[00:00] <buggable> ???????????? It's time for the monthly Accidental /win Lottery ???????????? We have 4 ballots submitted by 3 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 28! Congratulations to jnthn! You win a roll of duck tape!

[01:04] <tadzik> :D

[09:53] <lizmat> Files=1208, Tests=63592, 217 wallclock secs (13.08 usr  4.91 sys + 1312.49 cusr 133.75 csys = 1464.23 CPU)

[10:17] <lizmat> m: dd 42.Set (<) ^Inf .Set   # another case of badly handling failure

[10:17] <camelia> rakudo-moar 047464: OUTPUT: «Bool::False␤»

[10:17] <lizmat> m: dd 42.Set (<) ^100 .Set   # another case of badly handling failure

[10:17] <camelia> rakudo-moar 047464: OUTPUT: «Bool::True␤»

[10:39] <lizmat> m: dd ^Inf .Set (<=) ^Inf .Set   # so why is this False ???  :-)

[10:39] <camelia> rakudo-moar 047464: OUTPUT: «Bool::False␤»

[10:40] <lizmat> hint: the .WHICH of ^Inf .Set is not the same

[10:40] <lizmat> AKA, should we allow a single Failure to coerce to a Set ?

[10:41] <jnthn> A roll of duck tape! \o/

[10:41] <timotimo> duckroll?

[10:42] <jnthn> :P

[10:42] <timotimo> do you prefer your rolls with sweet toppings, or savory?

[10:42] <Geth> ¦ rakudo/nom: 3058ba0d48 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[10:42] <Geth> ¦ rakudo/nom: Make the (<) and (<=) family handle lazy lists properly

[10:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3058ba0d48

[10:44] <jnthn> Well, if there's duck inside of them, then it'd be sweet bean sauce or some such... :-)

[11:28] <Geth> ¦ rakudo/nom: ee54dda30b | (Elizabeth Mattijsen)++ | 13 files

[11:28] <Geth> ¦ rakudo/nom: Split up set_operators.pm into separate files

[11:28] <Geth> ¦ rakudo/nom:

[11:28] <Geth> ¦ rakudo/nom: - the file was getting too large

[11:28] <Geth> ¦ rakudo/nom: - by having different source files, execution errors become more meaningful

[11:28] <Geth> ¦ rakudo/nom: - file names should match name of test-files in S03-operator

[11:28] <Geth> ¦ rakudo/nom: - this will require running configure again

[11:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee54dda30b

[11:40] <Geth> ¦ roast: f6e1418fa2 | (Elizabeth Mattijsen)++ | 2 files

[11:40] <Geth> ¦ roast: Make filename same as in the core setting

[11:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f6e1418fa2

[11:41] <Geth> ¦ rakudo/nom: 662794668b | (Elizabeth Mattijsen)++ | t/spectest.data

[11:41] <Geth> ¦ rakudo/nom: Track renaming of S03-operators/proper_subset.pm

[11:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/662794668b

[11:52] <Geth> ¦ rakudo/nom: cb80390f79 | (Elizabeth Mattijsen)++ | 10 files

[11:52] <Geth> ¦ rakudo/nom: Add list of operators implemented

[11:52] <Geth> ¦ rakudo/nom:

[11:52] <Geth> ¦ rakudo/nom: As the files group families of set operators and it is not always clear

[11:52] <Geth> ¦ rakudo/nom: at first sight which ones are implemented where.

[11:52] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb80390f79

[11:59] <Geth> ¦ roast/master: 7 commits pushed by (Elizabeth Mattijsen)++

[11:59] <Geth> ¦ roast/master: e6d96a1d84 | Follow core setting naming of file set_addition

[11:59] <Geth> ¦ roast/master: c05cc2672d | Follow core setting naming of file set_difference

[11:59] <Geth> ¦ roast/master: a986325c0c | Follow core setting naming of file set_elem

[11:59] <Geth> ¦ roast/master: 372742ccb3 | Follow core setting naming of file set_intersection

[11:59] <Geth> ¦ roast/master: d57ae1fb36 | Follow core setting naming of file set_proper_subset

[11:59] <Geth> ¦ roast/master: b0d2f116df | Follow core setting naming of file set_subset

[11:59] <Geth> ¦ roast/master: 5e7783b04d | Follow core setting naming of file set_union

[11:59] <Geth> ¦ roast/master: review: https://github.com/perl6/roast/compare/f6e1418fa2...5e7783b04d

[12:03] <Geth> ¦ rakudo/nom: 1b56064b23 | (Elizabeth Mattijsen)++ | t/spectest.data

[12:03] <Geth> ¦ rakudo/nom: Follow renaming of S03-operators/set* test files

[12:03] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1b56064b23

[12:31] <Geth> ¦ rakudo/nom: 099a84b4ac | (Elizabeth Mattijsen)++ | src/core/set_elem.pm

[12:31] <Geth> ¦ rakudo/nom: Make Str:D (elem) Map a teeny bit faster

[12:31] <Geth> ¦ rakudo/nom:

[12:31] <Geth> ¦ rakudo/nom: - 3% for normal Map/Hash

[12:31] <Geth> ¦ rakudo/nom: - 10% for object hash

[12:31] <Geth> ¦ rakudo/nom: - felt worthwhile for such an elementary operation

[12:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/099a84b4ac

[12:44] <dogbert2> there is a method in the Channel class called 'receive-nil-on-close'. Did that slip through the cracks since I can't seem to find it it roast?

[12:47] <Geth> ¦ roast: 979f2a88a4 | (Elizabeth Mattijsen)++ | S03-operators/set_addition.t

[12:47] <Geth> ¦ roast: Fix some typoes

[12:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/979f2a88a4

[12:47] <lizmat> jnthn would know

[12:50] <timotimo> what does git blame say?

[12:51] <dogbert2> it say something about someone name Timo :-)

[12:51] <dogbert2> just joking :-) will check

[12:53] <dogbert2> oops, git seems to be looking at lizmat (if I understand git blame correctly)

[12:53] * lizmat looks to see if it jogs any memory

[12:55] <jnthn> It's used in the iterator impl

[12:55] <jnthn> Probably wants to be made private if it's just for that

[12:55] <dogbert2> I'm really just interested if it's anything that should be doc'ed or hidden from view

[12:56] <lizmat> jnthn: afaics, this construct is because !receive throws rather than return a Failure

[12:57] <lizmat> perhaps !receive should just return a Failure and then have receive throw it if it gets a failure ?

[12:58] <jnthn> That feels a bit roundabout

[12:58] <jnthn> Given that a Failure contains the Exception so it's a throwaway Failure every time

[12:58] <lizmat> well, I don't want to put a try block in the iterator

[12:59] <jnthn> Surely it'd be faster if it was just calling !receive(0) by itself rather than going via an odd-seeming public method? :)

[13:00] <jnthn> That or just pass $!queue to the iterator

[13:00] <lizmat> ??

[13:00] <jnthn> Though that'd lead to a bit of logic dupe

[13:00] <jnthn> oh, it's already getting $!channel

[13:01] <jnthn> Either way, there's loads of ways to do this without exposing a receive-nil-on-close

[13:02] <lizmat> except maybe someone would like to receive and just get a Nil when the channel closes, rather than having an exception thrown?

[13:03] <lizmat> pretty sure that was my thinking when I did that

[13:05] <jnthn> While we do use Nil with .poll, it does mean that if you .send Nil on a Channel things will not go too well

[13:05] <jnthn> It'd be nice of the iterator were not vulnerable to this

[13:05] <lizmat> but would the Nil not just become an Any ?

[13:06] <jnthn> Supply is vulnerable to this also

[13:06] <jnthn> Channel.Supply that is

[13:06] <jnthn> Where would that happen?

[13:06] <jnthn> But so far as I can tell, "no" :)

[13:06] <lizmat> with the push on $!queue ?

[13:07] <lizmat> hmmm...guess not

[13:07] <jnthn> No

[13:09] <lizmat> dogbert2: could you ticket this vulnerability to Nil so it won't fall through the cracks ?

[13:09] <dogbert2> lizmat: sure

[13:13] <dogbert2> just so I understand, the vulnerability is that Nil can be sent on a Channel if you call receive-nil-on-close?

[13:15] <lizmat> that the Nil would be taken as a close when using the iterator or .Supply

[13:16] <jnthn> It's that iterator and Supply will early if Nil is sent on the Channel

[13:16] <jnthn> We can just have that behavior on .poll as a "well, tough luck" :)

[13:16] <jnthn> But for iterator and Supply we should do better

[13:18] <Geth> ¦ roast: 6bcc903e55 | (Elizabeth Mattijsen)++ | S03-operators/set_multiply.t

[13:18] <Geth> ¦ roast: Add thorough testing for (.) and friends

[13:18] <Geth> ¦ roast:

[13:18] <Geth> ¦ roast: - de-activated tests currently fail

[13:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6bcc903e55

[13:19] <Geth> ¦ rakudo/nom: 75e87d1f52 | (Elizabeth Mattijsen)++ | t/spectest.data

[13:19] <Geth> ¦ rakudo/nom: Make sure we run the (.) tests

[13:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/75e87d1f52

[13:21] <dogbert2> will this do? RT #131684

[13:21] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131684

[13:26] <lizmat> dogbert2++

[13:29] <dogbert2> I guess I have to find another method in need of docs then :)

[13:30] * AlexDaniel looks at 263 open issues

[13:33] <lizmat> hmmm... is there a way that MAIN(@a) can match parameters from the CLI ?

[13:33] <lizmat> if not, maybe we should croak on such a signature ?

[13:36] <dogbert2> AlexDaniel: sometimes I pick stuff from there as well but for every one fixed two or three new ones pop up :(

[13:37] <dogbert2> on the positive side, I guess that more and more people are actually using the docs

[13:57] <[Tux]> This is Rakudo version 2017.06-126-g75e87d1f5 built on MoarVM version 2017.06-30-g389e9732

[13:57] <[Tux]> csv-ip5xs        2.701

[13:57] <[Tux]> test            12.654

[13:57] <[Tux]> test-t           4.050 - 4.087

[13:57] <[Tux]> csv-parser      12.451

[13:57] <jnthn> dogbert2: It's the same situation in the Rakudo RT queue

[13:57] <[Tux]> sorry for being late.

[13:57] * [Tux] works on YAPC Schedule

[14:07] <mst> I love how you're working on the schedule but neither the website, facebook or twitter ever announced the CFP or the CFP deadline

[14:07] * mst wonders how many people haven't submitted yet because of that

[14:21] <Geth> ¦ rakudo/nom: c56f0af9a8 | (Elizabeth Mattijsen)++ | src/core/set_multiply.pm

[14:21] <Geth> ¦ rakudo/nom: Fix outstanding (.) issues

[14:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c56f0af9a8

[14:22] <Geth> ¦ roast: a6501d3041 | (Elizabeth Mattijsen)++ | S03-operators/set_multiply.t

[14:22] <Geth> ¦ roast: Activate now passing tests

[14:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a6501d3041

[14:23] <lizmat> mst: http://act.perlconference.org/tpc-2017-amsterdam/call-for-papers.html   # been there for a while

[14:24] <mst> lizmat: http://act.perlconference.org/tpc-2017-amsterdam/ makes no reference to it

[14:24] <mst> lizmat: http://act.perlconference.org/tpc-2017-amsterdam/news/ makes no reference to it

[14:24] <mst> lizmat: there is a page there, but, as I said, quite specifically, the website never announced it

[14:24] <lizmat> under Talks & events, call for papers

[14:24] <mst> lizmat: in fact, I know a number of people who only managed to find that page via a 'site:' google search

[14:25] <mst> right, which is completely useless and an utter botch

[14:25] <lizmat> that it's missing in news, is indeed sub-optimal  :-(

[14:25] <mst> and that it was never on social media

[14:25] <lizmat> noted

[14:25] <mst> I feel like it would've been better to have a final social media push giving people a week or so then close submissions

[14:26] <lizmat> meanwhile, 75 talks were submitted

[14:28] <mst> which is stupidly low, yes, which is precisely my point

[14:29] <mst> compare to the last few years' stats

[14:33] <AlexDaniel> dogbert2: https://github.com/perl6/doc/issues/561 :)

[14:43] <[Tux]> mst: current plan is to make a deadline of fri Jun 7 midnight and start a campaign on twitter/facebook/linkedin asap

[14:44] <mst> [Tux]: that would be excellent

[14:44] <lizmat> [Tux] July 7 I hope ?

[14:45] <mst> ... heh, hadn't notice that typo

[15:27] <Geth> ¦ roast: 1510943d97 | (Elizabeth Mattijsen)++ | 2 files

[15:27] <Geth> ¦ roast: Remove now superfluous (.) tests

[15:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1510943d97

[15:34] <Geth> ¦ roast: 2fcb4f93da | (Elizabeth Mattijsen)++ | S03-operators/set_multiply.t

[15:34] <Geth> ¦ roast: Oops, forgot to de-activate debug helper

[15:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2fcb4f93da

[15:40] <[Tux]> lizmat, yes, of course

[16:43] <dogbert2> m: my ($a, $b) = BagHash.new(2, 2, 4), BagHash.new(2, 3, 3, 4); say $a (<) $b # correct ?

[16:43] <camelia> rakudo-moar c56f0a: OUTPUT: «False␤»

[16:43] <dogbert2> commit: 2016.03 my ($a, $b) = BagHash.new(2, 2, 4), BagHash.new(2, 3, 3, 4); say $a (<) $b

[16:43] <committable6> dogbert2, ¦2016.03: «True»

[19:29] * AlexDaniel feels like a bot that posts related links

[22:43] <cog_> m: sub a($) { say ++$ }; a('foo'); a('foo')

[22:43] <camelia> rakudo-moar c56f0a: OUTPUT: «1␤2␤»

[22:44] <cog_> I would expect using a placeholder variable to blow up instead of becoming a $ state variable

[22:45] <timotimo> outside of signatures $ is always an anonymous state variable

[22:48] <timotimo> also, a($) gives you an anonymous variable, too, which means you can't reference it anyway

[22:57] <cog_> ok, same name, different things

[23:01] <cog_> in a sense that the very purpose of $ as a variable, where each instance is a different variable. But that's piling magic over magic, I still thinks that deserves a warning for someone who would think $ in a signature could be a normal parameter instead of a placeholder

[23:04] <timotimo> and to defuse the warning you'd have to spell out (state $) every time?

[23:06] <cog_> maybe
