[01:00] <samcv> MasterDuke, yeah I thought the same. though i'm not sure where that literal stuff ends up

[01:00] <samcv> but i'm assuming it's just checking uc and lc versions of the string. which is not that great

[01:01] <samcv> any NFA.nqp knowledgeable people here?

[01:19] <MasterDuke> i tried changing the uc and lc in literal to just fc, but that broke a couple tests

[02:52] <MasterDuke> m: say "A" ~~ /:i a [b] /

[02:52] <camelia> rakudo-moar f190f2: OUTPUT: «Nil␤»

[02:53] <MasterDuke> ignore that

[02:54] <MasterDuke> m: say "A" ~~ /:i ab /

[02:54] <camelia> rakudo-moar f190f2: OUTPUT: «Nil␤»

[02:55] <MasterDuke> when i changed the ignorecase branch in `method literal` in src/QRegex/NFA.nqp to use fc instead of uc and lc, that ^^^ started matching

[02:57] <MasterDuke> m: say "A" ~~ /:i a | b /

[02:57] <camelia> rakudo-moar f190f2: OUTPUT: «｢A｣␤»

[02:57] <MasterDuke> and that ^^ stopped matching

[05:48] <samcv> which started matching? "A" ~

[05:48] <samcv> "A" ~~ /:i ab / # this?

[05:48] <samcv> MasterDuke,

[07:42] <[Tux]> This is Rakudo version 2017.02-226-g9d7c0ab8f built on MoarVM version 2017.02-35-gdc40845b

[07:42] <[Tux]> csv-ip5xs        2.881

[07:42] <[Tux]> test            14.114

[07:42] <[Tux]> test-t           5.407 - 5.512

[07:42] <[Tux]> csv-parser      13.683

[08:53] <samcv> [Tux], CSV might be faster now. idk

[08:53] <samcv> i at least made MVM case insensitive string compare probably fair amount faster

[08:53] <samcv> haven,t done any benchmarks but could be very significant

[08:54] <samcv> depending on the length of the haystack. it used to lowercase the whole haystack and whole needle then compare the two, now it only foldcases the haystack where it needs to

[09:00] <samcv> but it doesn't look like we have a case insensitive index op for nqp

[10:14] <lizmat> hmmm... looks like we lost 10% performance for test-t in the past day ?

[10:31] <Geth> ¦ rakudo/nom: 27dc7b155b | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[10:31] <Geth> ¦ rakudo/nom: Fix RT #130979

[10:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/27dc7b155b

[10:31] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130979

[10:54] <Geth> ¦ rakudo/nom: 1e246665cd | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[10:54] <Geth> ¦ rakudo/nom: Better fix for RT #130979

[10:54] <Geth> ¦ rakudo/nom:

[10:54] <Geth> ¦ rakudo/nom: Previous fix would just ignore any compile time errors in use arguments.

[10:54] <Geth> ¦ rakudo/nom: Which could lead to unexpected results in case of a typo on a use

[10:54] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130979

[10:54] <Geth> ¦ rakudo/nom: statement for a module that *does* exist.  Not sure how we can actually

[10:54] <Geth> ¦ rakudo/nom: pass on the actual compile time error.  Also, there appear to be a lot

[10:54] <Geth> ¦ rakudo/nom: of similar cases in World.nqp that are "unprotected", which may need

[10:54] <Geth> ¦ rakudo/nom: attention.

[10:54] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1e246665cd

[11:10] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fix RT #130979'

[11:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/210023624 https://github.com/rakudo/rakudo/compare/1754dc5f7e2d...27dc7b155b9a

[11:10] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130979

[11:20] <jnthn> lizmat: There's functions to help with that

[11:20] <jnthn> Well, methods probably

[11:21] <jnthn> handle-begin-time-exceptions

[11:21] <jnthn> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/World.nqp#L3228

[11:22] <jnthn> Which spits out decent errors

[11:22] <jnthn> m: sub foo() { die }; BEGIN foo

[11:22] <camelia> rakudo-moar f190f2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  Died␤    in sub foo at <tmp> line 1␤    in code  at <tmp> line 1␤␤»

[11:29] <samcv> u: { abs($_.uc - $_.lc) > 100 }

[11:29] <unicodable6> samcv, «timed out after 30 seconds» «exit signal = SIGHUP (1)»

[11:36] <samcv> u: { my $a = abs(.chr.uc.ord - .chr.lc.ord); .say if $a > 100  }

[11:36] <unicodable6> AlexDaniel, MasterDuke: Hey folks. What's up with me?

[11:36] <unicodable6> samcv, Oops, something went wrong!

[11:37] <samcv> u: { my $a = abs(.chr.uc.ord - .chr.lc.ord); $a > 100  }

[11:37] <unicodable6> samcv, U+00B5 MICRO SIGN [Ll] (µ)

[11:37] <unicodable6> samcv, U+00DF LATIN SMALL LETTER SHARP S [Ll] (ß)

[11:37] <unicodable6> samcv, 436 characters in total: https://gist.github.com/27948e188ad478c832727135651d873f

[11:40] <samcv> u: { my $a = .chr.uc.ord - .chr.lc.ord; $a > 0  }

[11:40] <unicodable6> samcv, U+00B5 MICRO SIGN [Ll] (µ)

[11:40] <unicodable6> samcv, U+00FF LATIN SMALL LETTER Y WITH DIAERESIS [Ll] (ÿ)

[11:40] <unicodable6> samcv, 194 characters in total: https://gist.github.com/392a28711e7f6088ceecf3e59b3d8bfc

[11:40] <samcv> m: 'µ'.uc.ord.say; 'µ'.lc.ord.say

[11:40] <camelia> rakudo-moar f190f2: OUTPUT: «924␤181␤»

[11:43] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Better fix for RT #130979

[11:43] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130979

[11:43] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/210026985 https://github.com/rakudo/rakudo/compare/27dc7b155b9a...1e246665cd7e

[12:14] <Geth> ¦ roast: a83d973edc | (Elizabeth Mattijsen)++ | 2 files

[12:14] <Geth> ¦ roast: Fudge tests broken with RT #130980

[12:14] <Geth> ¦ roast:

[12:14] <Geth> ¦ roast: Because https://github.com/rakudo/rakudo/commit/1754dc5f7e broke them.

[12:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a83d973edc

[12:14] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130980

[12:17] <lizmat> jnthn: handle-begin-time-exceptions is given a block, at the moment of RT #130979 there's only an $expr.ast

[12:17] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130979

[12:18] <jnthn> lizmat: Yes, the block to pass to it is self.compile_time_evaluate($/,$expr.ast)

[12:18] <jnthn> I think if you just wrap that in curlies and pass it to handle-being-time-exceptions it should work out

[12:18] <lizmat> ah, ok

[12:41] <lizmat> https://gist.github.com/lizmat/71581ee220d5b39869ab63bb016a4967  # jnthn, this way?

[12:42] <lizmat> jnthn: if so, that just reverts to the previous (silently) ignoring the error case  :-(

[12:49] <lizmat> afk&

[13:08] <jnthn> Huh, wonder what's catching it...

[13:37] <IOninja> c: HEAD for ^100_000 { $ = 'ﬆ' ~~ m:i/st/ }; say now - INIT now

[13:37] <committable6> IOninja, ¦HEAD(1e24666): «2.5304067»

[13:37] <IOninja> c: 2017.02 for ^100_000 { $ = 'ﬆ' ~~ m:i/st/ }; say now - INIT now

[13:37] <committable6> IOninja, ¦2017.02: «1.8736184»

[13:37] <IOninja> m: say 2.53/1.87

[13:37] <camelia> rakudo-moar f190f2: OUTPUT: «1.352941␤»

[13:38] <IOninja> samcv: seems it got slower, not faster? Could this be the 10% slowdown we're seeing in test-t bench?

[13:38] <samcv> IOninja, are we sure it's caused by that though? hm

[13:39] <samcv> could try running test-t before that commit with current rakudo otherwise

[13:39] <IOninja> 'abcdefghigklm' ~~ m:i/HIG/ is 4% faster

[13:39] <samcv> yeah it should be faster. especially the longer the haystack

[13:40] <IOninja> samcv: no idea what it's caused by. Just guessing here

[13:40] <samcv> i bet if you put a page of text it'd be like 25% at least faster

[13:40] <samcv> needs less memory churn too i think

[13:42] <IOninja> Just got `for ^100_000 { $ = 'abcdefghigklm' x 1000 ~~ m:i/HIG/ }; say now - INIT now` to segfault in #zofbot once. But can't repro..

[13:43] <IOninja> 'abcdefghigklm' x 100 ~~ m:i/HIG/  is now 61% faster

[13:43] <IOninja> samcv++

[13:43] <samcv> nice :)

[13:45] <moritz> samcv++

[13:46] <samcv> it can be even faster if i get some indexci op to go along with eqatic

[13:46] <samcv> not sure 100% how it works at that low level though.

[13:57] <MasterDuke> benchable6: 2017.02,HEAD for ^100_000 { $ = 'ﬆ' ~~ m:i/st/ }

[13:57] <benchable6> MasterDuke, starting to benchmark the 2 given commits

[13:58] <benchable6> MasterDuke, benchmarked the given commits, now zooming in on performance differences

[13:58] <benchable6> MasterDuke, https://gist.github.com/db9711a7dc2980c612524a6453ad7ff8

[14:07] <samcv> benchable6: 2017.02,HEAD for ^100_000 { $ = 'ﬆ' ~~ m:i/st/ }

[14:08] <samcv> MasterDuke, how many runs does it do, does it do any rounding?

[14:08] <samcv> oh i think it's AlexDaniels bot nvm

[14:28] <MasterDukeMobile> It does five runs and then takes the min

[15:08] <timotimo> so ... that got slower? :\

[15:08] <timotimo> only for short strings, then?

[15:11] * jnthn notes that this was primarily a correctness patch :)

[15:11] <jnthn> Being fast but wrong is less useful ;)

[15:11] <IOninja> Yeah :)

[15:11] <IOninja> It's a helluva faster for large input

[15:11] <timotimo> hah :)

[15:12] <timotimo> that's nice

[15:15] <jnthn> bbl &

[15:33] <Geth> ¦ rakudo/nom: 28a48ea593 | (Samantha McVey)++ | CONTRIBUTING.md

[15:33] <Geth> ¦ rakudo/nom: Add git commit style guide to CONTRIBUTING.md

[15:33] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/28a48ea593

[15:34] <samcv> IOninja,  the case insensitive regex is what you're talking about?

[16:00] <IOninja> yes

[16:08] <naxieAlDle> hmm

[16:08] <naxieAlDle> bench: 2017.02,HEAD for ^100_000 { $ = 'ﬆ' ~~ m:i/st/ }; say now - INIT now

[16:08] <naxieAlDle> ah…

[16:08] <IOninja> bot's ded

[16:09] <naxieAlDle> bench: 2017.02,HEAD for ^100_000 { $ = 'ﬆ' ~~ m:i/st/ }; say now - INIT now

[16:09] <benchable6> naxieAlDle, starting to benchmark the 2 given commits

[16:09] <naxieAlDle> let's see if it works

[16:09] <benchable6> naxieAlDle, benchmarked the given commits, now zooming in on performance differences

[16:09] <naxieAlDle> ah, it was already tried… should've backlogged a lil bit more

[16:11] <benchable6> naxieAlDle, https://gist.github.com/8b95a45f7697669881ed75f030f05145

[16:12] <naxieAlDle> that's better :)

[16:13] <naxieAlDle> I wonder if it can actually find it

[16:13] <naxieAlDle> bench: 61a65ce,26e6993 for ^100_000 { $ = 'ﬆ' ~~ m:i/st/ }; say now - INIT now

[16:13] <benchable6> naxieAlDle, starting to benchmark the 2 given commits

[16:13] <benchable6> naxieAlDle, benchmarked the given commits, now zooming in on performance differences

[16:13] <benchable6> naxieAlDle, ¦61a65ce: «2.0492» ¦26e6993: «2.7941»

[16:14] <naxieAlDle> ah!! It already did!!

[16:14] <naxieAlDle> benchable6++

[16:14] <naxieAlDle> MasterDuke: why didn't it work the first time?

[16:18] <MasterDuke> not sure. maybe the server was overloaded when running it the first time and the timings were off

[16:23] <naxieAlDle> I don't think the cpu load has ever been >10%

[16:25] <MasterDuke> huggable: shrug

[16:25] <huggable> MasterDuke, nothing found

[16:25] <naxieAlDle> m: say “\c[SHRUG]”

[16:25] <camelia> rakudo-moar 28a48e: OUTPUT: «🤷␤»

[17:08] <[Tux]> Updating submodules .................................... FAIL

[17:08] <[Tux]> git error: fatal: destination path '/pro/3gl/CPAN/rakudobrew/moar-blead-nom/nqp/MoarVM/3rdparty/libtommath' already exists and is not an empty directory.

[17:08] <[Tux]> fatal: clone of 'git://github.com/MoarVM/libtommath' into submodule path '/pro/3gl/CPAN/rakudobrew/moar-blead-nom/nqp/MoarVM/3rdparty/libtommath' failed

[17:08] <[Tux]> Failed to clone '3rdparty/libtommath'. Retry scheduled

[17:08] <[Tux]> fatal: destination path '/pro/3gl/CPAN/rakudobrew/moar-blead-nom/nqp/MoarVM/3rdparty/libtommath' already exists and is not an empty directory.

[17:08] <[Tux]> fatal: clone of 'git://github.com/MoarVM/libtommath' into submodule path '/pro/3gl/CPAN/rakudobrew/moar-blead-nom/nqp/MoarVM/3rdparty/libtommath' failed

[17:08] <[Tux]> Failed to clone '3rdparty/libtommath' a second time, aborting

[17:09] <IOninja> [Tux]: rm -fr nqp/MoarVM/3rdparty/libtommath

[17:09] <MasterDuke> gotta rm 3rdparty/libtommath

[17:09] <[Tux]> that's what I just did, but it is new

[17:11] <lizmat> [Tux]: what worked for me was to nuke the nqp dir

[17:13] <Geth> ¦ rakudo/nom: d444f655fd | (Elizabeth Mattijsen)++ | 3 files

[17:13] <Geth> ¦ rakudo/nom: Prevent unneccesary creation if iterator objects

[17:13] <Geth> ¦ rakudo/nom:

[17:13] <Geth> ¦ rakudo/nom: Check whether we can return a Rakudo::Iterator.Empty in the "new"

[17:13] <Geth> ¦ rakudo/nom: method, rather than in the !SET-SELF method where the iterator object

[17:13] <Geth> ¦ rakudo/nom: is already created.

[17:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d444f655fd

[17:13] <lizmat> *of

[17:13] <lizmat> grr

[17:23] <[Tux]> This is Rakudo version 2017.02-233-g28a48ea59 built on MoarVM version 2017.02-39-gd7caeba3

[17:23] <[Tux]> csv-ip5xs        2.867

[17:23] <[Tux]> test            12.352

[17:23] <[Tux]> test-t           5.036 - 5.039

[17:23] <[Tux]> csv-parser      12.905

[22:05] <Geth> ¦ roast: f16293c444 | (Daniel Green)++ | S02-types/int-uint.t

[22:05] <Geth> ¦ roast: Whitespace fix only

[22:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f16293c444

[22:06] <MasterDuke> is this test correct? https://github.com/perl6/roast/blob/master/S02-types/int-uint.t#L45-L47

[22:08] <MasterDuke> m: my int $a = 2**63; say $a

[22:08] <camelia> rakudo-moar d444f6: OUTPUT: «-9223372036854775808␤»

[22:08] <MasterDuke> m: my int $a = 2**64; say $a

[22:08] <camelia> rakudo-moar d444f6: OUTPUT: «Cannot unbox 65 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[22:08] <MasterDuke> m: my int $a = 2**63-1; say $a

[22:08] <camelia> rakudo-moar d444f6: OUTPUT: «9223372036854775807␤»

[22:08] <MasterDuke> m: my int $a = 2**63+1; say $a

[22:08] <camelia> rakudo-moar d444f6: OUTPUT: «-9223372036854775807␤»

[22:09] <MasterDuke> we allow you to assign values that are a little bit more than the max the type can hold, but not one that are a lot more

[22:10] <MasterDuke> s/one/values/
