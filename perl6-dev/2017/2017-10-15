[00:00] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1196: Simplify signatures for Regex and Associative...

[00:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1196

[00:33] <timotimo> don't have an intuition for that :(

[00:35] <AlexDaniel-> MasterDuke: so is it “:D” that makes all that difference or is it because of unneeded args?

[00:46] <MasterDuke> both

[00:47] <MasterDuke> but i believe the ":D" made more

[00:49] <AlexDaniel-> MasterDuke: soo… does it mean that you can make a bunch of stuff in rakudo faster if you grep for methods with unused params and autoreplace them with $ ?

[00:50] <MasterDuke> timotimo: no worries, it doesn't do that any more after my new PR

[00:50] <MasterDuke> AlexDaniel-: probably. don't know how many of them there are though

[00:53] <MasterDuke> benchable6: compare HEAD sub f1(Mu:D \var, int $im, int $monkey, int $s, int $a, $context) { rand }; my $s; $s += f($_, $_, $_, $_, $_, $_) for ^1_000_000; say $s; ||| sub f2(Mu:D \var, $, $, $, $, $) { rand }; my $s; $s += f($_, $_, $_, $_, $_, $_) for ^1_000_000; say $s

[00:53] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[00:53] <benchable6> MasterDuke, ¦HEAD: «04===SORRY!04=== Error while compiling /tmp/o7bHvwm18w␤Undeclared routine:␤    f used at line 1␤»

[00:53] <MasterDuke> benchable6: compare HEAD sub f1(Mu:D \var, int $im, int $monkey, int $s, int $a, $context) { rand }; my $s; $s += f1($_, $_, $_, $_, $_, $_) for ^1_000_000; say $s; ||| sub f2(Mu:D \var, $, $, $, $, $) { rand }; my $s; $s += f2($_, $_, $_, $_, $_, $_) for ^1_000_000; say $s

[00:53] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[00:53] <benchable6> MasterDuke, ¦HEAD: «Benchmark: ␤«timed out after 10 seconds»»

[00:53] <MasterDuke> benchable6: compare HEAD sub f1(Mu:D \var, int $im, int $monkey, int $s, int $a, $context) { rand }; my $s; $s += f1($_, $_, $_, $_, $_, $_) for ^100_000; say $s; ||| sub f2(Mu:D \var, $, $, $, $, $) { rand }; my $s; $s += f2($_, $_, $_, $_, $_, $_) for ^100_000; say $s

[00:53] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[00:53] <benchable6> MasterDuke, https://gist.github.com/181abcc2eec0bd0d71891fc64a6f8233

[00:54] <MasterDuke> so ~6% faster for $

[00:55] <AlexDaniel-> benchable6: compare HEAD sub f2(Mu:D \var, $, $, $, $, $) { rand }; my $s; $s += f2($_, $_, $_, $_, $_, $_) for ^100_000; say $s ||| sub f1(Mu:D \var, int $im, int $monkey, int $s, int $a, $context) { rand }; my $s; $s += f1($_, $_, $_, $_, $_, $_) for ^100_000; say $s;

[00:55] <benchable6> AlexDaniel-, starting to benchmark the 1 given commit

[00:55] <benchable6> AlexDaniel-, https://gist.github.com/401cc621cc0f4677429a94b1d330852c

[00:56] <AlexDaniel-> MasterDuke: is it? Whateverable server is a bit busy doing stuff for regressionable

[00:57] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Streamline "is pure" trait handling

[00:57] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/288050067 https://github.com/rakudo/rakudo/compare/b6982e6892bc...bb1df2cb0c52

[00:57] <MasterDuke> i tested locally a bunch. a million iterations was about .1s faster for $

[00:58] <MasterDuke> ~.83s vs ~.73s

[01:00] <AlexDaniel-> oh yeah I see it now

[01:00] <AlexDaniel-> it's definitely significant

[01:02] <AlexDaniel-> fwiw I don't think I'd be hunting for more regressions

[01:02] <AlexDaniel-> it's a lot of wörk and is only fun for the first hour…

[01:07] <MasterDuke> it doesn't sound like tons of fun, but i think it's been worthwile both times

[01:08] <MasterDuke> but it sounds like, hint hint, now you've got time to review PRs...

[01:16] <Geth> ¦ rakudo/nom: 317ae16c0e | (Daniel Green)++ | src/core/Match.pm

[01:16] <Geth> ¦ rakudo/nom: Simplify signatures for Regex and Associative...

[01:16] <Geth> ¦ rakudo/nom:

[01:16] <Geth> ¦ rakudo/nom: multis of INTERPOLATE.

[01:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/317ae16c0e

[01:16] <Geth> ¦ rakudo/nom: ebb0521bd2 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | src/core/Match.pm

[01:16] <Geth> ¦ rakudo/nom: Merge pull request #1196 from MasterDuke17/more_optimizing_the_regex_multi_for_INTERPOLATE

[01:16] <Geth> ¦ rakudo/nom:

[01:16] <Geth> ¦ rakudo/nom: Simplify signatures for Regex and Associative...

[01:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ebb0521bd2

[01:18] <MasterDuke> thanks

[01:21] <AlexDaniel-> m: react { whenever Supply.interval(0.2) { done if $_ == 5 } }; say ‘done’

[01:21] <camelia> rakudo-moar bb1df2cb0: OUTPUT: «done␤»

[01:21] <AlexDaniel-> m: react { whenever Supply.interval(-0.2) { done if $_ == 5 } }; say ‘done’

[01:22] <AlexDaniel-> eh… well

[01:22] <camelia> rakudo-moar bb1df2cb0: OUTPUT: «(timeout)»

[01:32] <AlexDaniel-> m: ^3 .map: ""

[01:32] <camelia> rakudo-moar ebb0521bd: OUTPUT: «===SORRY!===␤Cannot find method 'count' on object of type NQPMu␤»

[01:59] <AlexDaniel-> so here's an interesting fact

[02:00] <AlexDaniel-> most of the snippets I've filed regression tickets for are ≈5 months old or less

[02:00] <AlexDaniel-> it seems that people tend to run stuff that looks weird, but they don't file tickets because they just don't know that it is a regression

[02:01] <AlexDaniel-> I went through hundreds of snippets from 2016 and there's almost nothing

[02:03] <AlexDaniel-> so newer evals have more chances to be a regression. Weird but that's how it is

[02:03] <AlexDaniel-> to have a regression rather

[02:03] <AlexDaniel-> well, you get the point

[02:07] <AlexDaniel-> “62121 snippets tested, 17020 are known to be unstable”

[02:07] <AlexDaniel-> no, that's it, I'm done :)

[03:10] <AlexDaniel-> MasterDuke: hey, I created this ticket RT #132306

[03:10] <synopsebot> RT#132306 [new]: https://rt.perl.org/Ticket/Display.html?id=132306 [PERF] subroutine parameters, even if unused, make stuff slower ( f1($a, $, $, $, $, $) vs f2($a, $b, $c, $d, $e, $f) )

[04:04] <AlexDaniel-> MasterDuke: actually, there's a lot of stuff that jumps at me now

[04:04] <AlexDaniel-> for example

[04:04] <AlexDaniel-> https://github.com/rakudo/rakudo/blob/ebb0521bd259e9f81e4b127527534090969f398e/src/core/native_array.pm#L1399

[04:04] <AlexDaniel-> ok $i = -1, and where is $i used?

[04:04] <AlexDaniel-> I can't see it

[05:45] <Zoffix> Isn't that the other way around? The `$` is optimized away, because you can't access it, so it's faster, while named ones can't be optimized the same, so they run at "normal" speed.

[05:46] <Zoffix> It's like jnthn++ pointed out in a commit comment yesterday: these optimizations are done but no one says "wow, the nameless args are optimized to be that much faster"

[05:46] <Zoffix> :)

[05:59] <Zoffix> AlexDaniel: you around?

[05:59] <Zoffix> AlexDaniel: what's with committable missing? How do I restart it now?

[05:59] <Zoffix> $ sake start-all

[05:59] <Zoffix> start-all is no longer needed, systemd should start (and restart) the bots automatically

[05:59] <Zoffix> http://i0.kym-cdn.com/entries/icons/facebook/000/014/859/BS.jpg

[06:01] <Zoffix> I see it pop up in px and then go down again

[06:02] <Zoffix> grrrr second day in a row can't write bug cover tests due to something

[06:06] <Zoffix> c: HEAD say 42

[06:06] <committable6> Zoffix, No! It wasn't me! It was the one-armed man! Backtrace: https://gist.github.com/7224ec8e96ed3d03ede4681e2d701d31

[06:07] <Zoffix> c: HEAD say 42

[06:07] <committable6> Zoffix, No! It wasn't me! It was the one-armed man! Backtrace: https://gist.github.com/ae4183478b993bce11af3b935ca905a0

[06:08] <Zoffix> Bunch of uncommitted crap with a syntax error in it...

[06:14] <bartolin> whoa, just had a spectest that run to completion on jvm -- first time since 2017-06-13

[06:14] <bartolin> it took some time, since i didn't use the evalserver ...

[06:14] * bartolin gave up with the evalserver for now (RT #132104)

[06:14] <synopsebot> RT#132104 [open]: https://rt.perl.org/Ticket/Display.html?id=132104 [JVM] EvalServer leaks threads and memory when using Proc::Async

[06:18] <Zoffix> :)

[06:18] <ugexe> timotimo: now as a dual api (restful / graphql) Cro example https://gist.github.com/ugexe/b38416163be154f0bb727cbb654c0010

[06:27] <Geth> ¦ roast: 08ac054de0 | (Zoffix Znet)++ | S32-io/io-handle.t

[06:27] <Geth> ¦ roast: Test opened filehandles get closed on exit automatically

[06:27] <Geth> ¦ roast:

[06:27] <Geth> ¦ roast: RT#132030: https://rt.perl.org/Public/Bug/Display.html?id=132030

[06:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/08ac054de0

[06:27] <ugexe> dependency recursion is pretty slow i.e. `curl -H "Content-Type: application/json" -X POST -d '{ "query" : "{ resolve(name: GraphQL) { name dependencies { name dependencies { name dependencies { name } } } } }" }' http://localhost:3000/graphql`

[06:27] <synopsebot> RT#132030 [open]: https://rt.perl.org/Ticket/Display.html?id=132030 [TESTNEEDED] [REGRESSION] Broken Text::CSV tests and possibly other ecosystem fallout (buffering)

[06:52] <Geth> ¦ roast: 87889891d1 | (Zoffix Znet)++ | S02-types/set.t

[06:52] <Geth> ¦ roast: Set ops do not hang with Setty/Baggy/Mixie type objects

[06:52] <Geth> ¦ roast:

[06:52] <Geth> ¦ roast: RT#131300: https://rt.perl.org/Ticket/Display.html?id=131300

[06:52] <Geth> ¦ roast:

[06:52] <Geth> ¦ roast: Some ops still hang; skip() them

[06:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/87889891d1

[06:52] <synopsebot> RT#131300 [open]: https://rt.perl.org/Ticket/Display.html?id=131300 [BUG] MoarVM panic if you check for membership in undefined Set

[07:13] <AlexDaniel-> o/

[07:14] <AlexDaniel-> “Bunch of uncommitted crap with a syntax error in it...”

[07:14] <AlexDaniel-> oh… whoops…

[07:14] <Zoffix> Fixed the error. it was a `:` marker on a method that's now a sub call

[07:15] <AlexDaniel-> oh, ok

[07:15] <AlexDaniel-> sorry for the uncommitted stuff, will commit now

[07:15] <AlexDaniel-> I tend to use stuff a little bit before actually committing, which is why the bots were even taught to gist uncommitted stuff :)

[07:15] <AlexDaniel-> but yeah maybe that's not the best way to do things

[07:16] <AlexDaniel-> Zoffix++

[07:21] <AlexDaniel-> Zoffix: fwiw, over ssh it may be possible to see issues with systemctl, although I've noticed you need XDG_RUNTIME_DIR set for some reason

[07:21] <AlexDaniel-> XDG_RUNTIME_DIR=/run/user/`id -u`; systemctl status [email@hidden.address]
[07:21] <AlexDaniel-> something like this

[07:22] <AlexDaniel-> if you Ctrl+R you'll be able to get this command in no time

[07:22] <AlexDaniel-> (maybe)

[07:22] <Zoffix> m: $_ = 'not right';  sub { $_ = Str; say so /./ }()

[07:22] <camelia> rakudo-moar ebb0521bd: OUTPUT: «True␤»

[07:29] <AlexDaniel-> samcv: oh by the way, thank you for unintentionally making me aware of mosh :)

[07:29] * Zoffix adds that to discussion on https://rt.perl.org/Ticket/Display.html?id=130363#txn-1499602

[07:30] <AlexDaniel-> samcv: I've been using it since then, awesome

[07:30] <Zoffix> RT#130363

[07:30] <synopsebot> RT#130363 [open]: https://rt.perl.org/Ticket/Display.html?id=130363 [@LARRY] there's no match for Any aka /./ codegens differently from m/./ 

[07:30] <AlexDaniel-> I can move across networks (which I do all the time) and still have my ssh session! So awesome

[07:30] <AlexDaniel-> if only I could run sshfs over mosh also…

[07:32] <AlexDaniel-> I think there was one more ticket related to / / vs m/ /

[07:33] <AlexDaniel-> Zoffix: ah-ha, here it is RT #131925

[07:33] <synopsebot> RT#131925 [open]: https://rt.perl.org/Ticket/Display.html?id=131925 [BUG] [REGEX] Smartmatch against `m//` operator mishandles junctions

[07:34] <AlexDaniel-> Zoffix: maybe merge or link them if appropriate

[07:36] <Zoffix> AlexDaniel-: so what's the values of $*DISTRO.Str|$*KERNEL.Str ? I get True for both cases on my box

[07:36] <Zoffix> m: say so $*DISTRO.Str|$*KERNEL.Str ~~ m/linux/

[07:36] <camelia> rakudo-moar ebb0521bd: OUTPUT: «True␤»

[07:36] <Zoffix> bisect: say so $*DISTRO.Str|$*KERNEL.Str ~~ m/linux/

[07:36] <bisectable6> Zoffix, Bisecting by output (old=2015.12 new=ebb0521) because on both starting points the exit code is 0

[07:36] <bisectable6> Zoffix, bisect log: https://gist.github.com/ffe32acf6328b6634cc6761698aaa42d

[07:36] <bisectable6> Zoffix, (2017-08-21) https://github.com/rakudo/rakudo/commit/8a0f6ac110b42a37a352e46c32736bac59f9ba83

[07:36] <bartolin> hmm, looks like there is a missing nqp::p6bool for :bin in scr/core/Argfiles.pm (maybe also in other places): https://github.com/rakudo/rakudo/blob/nom/src/core/Argfiles.pm#L16

[07:37] <bartolin> we excpect a Bool in method new: https://github.com/rakudo/rakudo/blob/nom/src/core/IO/CatHandle.pm#L42

[07:37] <bartolin> this seems to work on moar (probably the isfalse is optimized somehow), but it blows up on jvm

[07:38] <Zoffix> Ah

[07:38] <Zoffix> I'll fix it in a sec

[07:38] <bartolin> cool, Zoffix++

[07:39] <bartolin> I think, there are other places as well -- e.g. in CatHandle.pm

[07:40] <Zoffix> m: use nqp; -> Bool :$bin {}(:bin(nqp::isfalse(0)))

[07:40] <camelia> rakudo-moar ebb0521bd: OUTPUT: «Type check failed in binding to parameter '$bin'; expected Bool but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[07:40] <Zoffix> Weird that it crashes here, but not in core

[07:40] <Zoffix> m: use nqp; class { method z (Bool :$bin) {} }.z: :bin(nqp::isfalse(0))

[07:40] <camelia> rakudo-moar ebb0521bd: OUTPUT: «Type check failed in binding to parameter '$bin'; expected Bool but got Int (1)␤  in method z at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[07:40] <Zoffix> ZofBot: dafuq?

[07:40] <ZofBot> Zoffix, For full well he knows He cannot so precisely weed this land As his misdoubts present occasion: His foes are so enrooted with his friends That, plucking to unfix an enemy, He doth unfasten so and shake a friend

[07:41] <bartolin> a related question: we have 'nqp::isfalse' in some places and 'nqp::not_i(nqp::istrue)' in other places -- most prominently here: https://github.com/rakudo/rakudo/blob/nom/src/core/Bool.pm#L77

[07:42] <bartolin> would it make a difference to replace nqp::not_i(nqp::istrue) with nqp::isfalse? probably that gets optimized on moar, anyway?

[07:46] <bartolin> at least on the jvm backend isfalse is implemented as 'istrue(obj, tc) == 0 ? 1 : 0' -- so using it would avoid one nqp op

[07:46] <Zoffix> .ask lizmat any idea why this commit fixes RT#131925? Trying to figure out if the bug is proper-fixed or if it just doesn't get triggered with the OP code. https://github.com/rakudo/rakudo/commit/8a0f6ac110b42a37a352e46c32736bac59f9ba83

[07:46] <yoleaux> Zoffix: I'll pass your message to lizmat.

[07:46] <synopsebot> RT#131925 [open]: https://rt.perl.org/Ticket/Display.html?id=131925 [BUG] [REGEX] Smartmatch against `m//` operator mishandles junctions

[07:48] <samcv> AlexDaniel-, you're welcome

[08:04] * bartolin takes back his last question. looks like the only relevant difference are a few characters spared with nqp::isfalse

[08:11] <Zoffix> m: use nqp; class { method new (Bool :$bin) {} }.new: :bin(nqp::isfalse(0))

[08:11] <camelia> rakudo-moar ebb0521bd: OUTPUT: «Type check failed in binding to parameter '$bin'; expected Bool but got Int (1)␤  in method new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:11] <Zoffix> m: @*ARGS = $?FILE; say $*ARGFILES

[08:11] <camelia> rakudo-moar ebb0521bd: OUTPUT: «IO::ArgFiles(opened on "<tmp>".IO)␤»

[08:12] <Zoffix> I don't get it. Why does it bypass typecheck for IO::CatHandle in https://github.com/rakudo/rakudo/blob/nom/src/core/Argfiles.pm#L16  yet properly crashes above?

[08:13] <Zoffix> oh wait

[08:13] <Zoffix> m: say $*ARGFILES

[08:13] <camelia> rakudo-moar ebb0521bd: OUTPUT: «IO::ArgFiles(opened on IO::Special.new("<STDIN>"))␤»

[08:13] <Zoffix> Nope. This should be exercising that codepath

[08:14] <Zoffix> m: use nqp; say IO::CatHandle.new: $?FILE, :bin(nqp::isfalse($*IN.encoding))

[08:14] <camelia> rakudo-moar ebb0521bd: OUTPUT: «IO::CatHandle(opened on "<tmp>".IO)␤»

[08:14] <Zoffix> wtf

[08:14] <bartolin> it fails as expected on jvm (say $*ARGFILES)

[08:15] <bartolin> maybe it's optimizied away for some reasons?

[08:15] * bartolin has no idea

[08:15] <Zoffix> If it's optimized away, why isn't it optimized away the same for the non-IO-CatHandle?

[08:16] <bartolin> .oO( jnthn would know :-) )

[08:16] <Zoffix> and "optimized away"... well... I'm giving incorrect type, so just igoring that fact is not an optimization

[08:17] <Zoffix> m: say IO::CatHandle.new: $?FILE, :bin("xdasdasdas")

[08:17] <camelia> rakudo-moar ebb0521bd: OUTPUT: «IO::CatHandle(opened on "<tmp>".IO)␤»

[08:17] <Zoffix> m: say IO::CatHandle.new: $?FILE, :bin(Mu)

[08:17] <camelia> rakudo-moar ebb0521bd: OUTPUT: «Type check failed in binding to parameter '$bin'; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[08:17] <Zoffix> any :S

[08:18] <Zoffix> m: say [.file, .line, .signature] with IO::CatHandle.^lookup("new")

[08:18] <camelia> rakudo-moar ebb0521bd: OUTPUT: «[SETTING::src/core/IO/CatHandle.pm 40 (IO::CatHandle $: *@handles, :&on-switch, :$chomp = Bool::True, :$nl-in = { ... }, Str :$encoding, Bool :$bin, *%_)]␤»

[08:20] <Zoffix> m: -> *@handles, :&on-switch, :$chomp = True, :$nl-in = ["\x0A", "\r\n"], Str :$encoding, Bool :$bin { dd [$bin ]}($?FILE, :bin("x"))

[08:20] <camelia> rakudo-moar ebb0521bd: OUTPUT: «["x"]␤»

[08:20] <Zoffix> c: releases -> *@, Int :$bin {dd [$bin]}(:bin("x"))

[08:21] <committable6> Zoffix, ¦releases (23 commits): «["x"]»

[08:21] <bartolin> at least moar has an function 'optimize_istrue_isfalse' https://github.com/MoarVM/MoarVM/blob/master/src/spesh/optimize.c#L947 (but i don't know if that's relevant here)

[08:21] <Zoffix> It's not.

[08:21] <Zoffix> The slurpy seems to cause typecheck on nameds not done

[08:22] <bartolin> oh!

[08:23] <bartolin> I see. so there's the difference between moar and jvm

[08:24] <bartolin> Zoffix++ # explaining

[08:25] <bartolin> m: 'use nqp; -> *@args, Bool :$bin {}(:bin(nqp::isfalse(0)))'

[08:25] <camelia> rakudo-moar ebb0521bd: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "use nqp; -> *@args, Bool :$bin {}(:bin(nqp::isfalse(0)))" in sink context (line 1)␤»

[08:25] <bartolin> m: -> *@args, Bool :$bin {}(:bin(nqp::isfalse(0)))

[08:25] <camelia> rakudo-moar ebb0521bd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::isfalse, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3args, Bool :$bin {}(:bin(nqp::isfalse(0)7⏏5))␤»

[08:25] <bartolin> m: use nqp; -> *@args, Bool :$bin {}(:bin(nqp::isfalse(0)))

[08:25] <camelia> rakudo-moar ebb0521bd: ( no output )

[08:26] <Zoffix> Seems there's no ticket for it, which is quite shocking no one noticed this since Christmas

[08:28] <AlexDaniel-> this is what I was thiking about yesterday

[08:29] <AlexDaniel-> so I'm submitting all these regression tickets, but… if nobody ever notices any of these changes, who cares?

[08:30] <Zoffix> Filed as https://rt.perl.org/Ticket/Display.html?id=132307

[08:31] <AlexDaniel-> let me guess, fixing this bug will also have a negative effect on performance? :)

[08:31] <Zoffix> heh

[08:32] <Zoffix> m: -> *@, Int :$bin where {sleep 10; True} {say [$bin, $bin.^name]}(:bin<x>)

[08:32] <Zoffix> At least the `where` clause seems to run

[08:33] <camelia> rakudo-moar ebb0521bd: OUTPUT: «[x Str]␤»

[08:33] <Zoffix> m: -> *@, Int :$bin where {sleep 10; False} {say [$bin, $bin.^name]}(:bin<x>)

[08:33] <camelia> rakudo-moar ebb0521bd: OUTPUT: «Type check failed in binding to parameter '$bin'; expected Int but got Str ("x")␤  in block <unit> at <tmp> line 1␤␤»

[08:33] <Zoffix> Even though it shouldn't in this case :)

[08:39] <Geth> ¦ rakudo/nom: ee0bcbd86e | (Zoffix Znet)++ | 2 files

[08:39] <Geth> ¦ rakudo/nom: Pass correct types to :bin

[08:39] <Geth> ¦ rakudo/nom:

[08:39] <Geth> ¦ rakudo/nom: The only reason this didn't crash in the past is due to RT#132307

[08:39] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee0bcbd86e

[08:39] <synopsebot> RT#132307 [new]: https://rt.perl.org/Ticket/Display.html?id=132307 [MOAR] Slurpy positionals cause type constraints to be ignored on named args

[08:39] <Geth> ¦ rakudo/nom: d23a9ba9d2 | (Zoffix Znet)++ | src/RESTRICTED.setting

[08:39] <Geth> ¦ rakudo/nom: Add IO::CatHandle to RESTRICTED setting

[08:39] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d23a9ba9d2

[08:45] <bartolin> Zoffix: ee0bcbd86e really should help with IO related tests on jvm, thanks. I saw this error mode during your IO refactoring earlier this year. but since I wasn't able to look closer (lack of time), I just fudged the failing tests as 'todo': https://github.com/perl6/roast/commit/c4dc7ba410 . I should have looked closer and mentioned the issue back then ...

[08:45] <Geth> ¦ roast: 76ed46049a | (Zoffix Znet)++ | S32-list/tail.t

[08:45] <Geth> ¦ roast: Can use ints over 64-bit in .tail

[08:45] <Geth> ¦ roast:

[08:45] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/43e7b893b1

[08:45] <Geth> ¦ roast: RT#132288: https://rt.perl.org/Ticket/Display.html?id=132288

[08:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/76ed46049a

[08:45] <synopsebot> RT#132288 [new]: https://rt.perl.org/Ticket/Display.html?id=132288 [REGRESSION][9999] .tail with large negative arguments (say (4,5,6).tail(-9999999999999999999))

[08:46] <Zoffix> wait wtf there are two .tail 9999 tickets

[08:47] <Zoffix> #130285 and #132288

[08:49] <AlexDaniel-> don't be surprised, I do that quite often…

[08:49] <AlexDaniel-> :S

[08:49] <Zoffix> The "HEAD" as problem commit in the tickets isn't very helpful. HEAD when?

[08:50] <AlexDaniel-> I think I've been including the actual head sha lately, this is an older ticket

[08:51] <AlexDaniel-> but yeah, slap me when I do that

[08:52] <Geth> ¦ roast: dc7447626b | (Zoffix Znet)++ | S32-list/head.t

[08:52] <Geth> ¦ roast: Test .head works correctly with large negative Ints

[08:52] <Geth> ¦ roast:

[08:52] <Geth> ¦ roast: RT#130285: https://rt.perl.org/Ticket/Display.html?id=130285

[08:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dc7447626b

[08:52] <synopsebot> RT#130285 [resolved]: https://rt.perl.org/Ticket/Display.html?id=130285 [9999] Unhealthy overflow in .head and .tail with huge negative numbers ( (4,5,6).tail(-9999999999999999999) )

[09:56] <Geth> ¦ roast: bc8b66866b | (Zoffix Znet)++ | S17-procasync/stress.t

[09:56] <Geth> ¦ roast: Test no "unknown errors" on reads in Proc::Async

[09:56] <Geth> ¦ roast:

[09:56] <Geth> ¦ roast: RT#130107: https://rt.perl.org/Ticket/Display.html?id=130107

[09:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bc8b66866b

[09:56] <synopsebot> RT#130107 [open]: https://rt.perl.org/Ticket/Display.html?id=130107 [CONC] unkown system error 0 via Proc::Async

[10:01] <gfldex> Zoffix++ # for closing my tickets

[10:43] <AlexDaniel-> oh, it's Sunday

[11:36] <MasterDuke> AlexDaniel-: Sundays do seem to happen occasionally, never been able to figure out a pattern of when though...

[11:37] <AlexDaniel-> MasterDuke: I know that the last one was on 2017-10-08_12:02:03, and today I was able to catch it on 2017-10-15_13:58:37

[11:38] <AlexDaniel-> the pattern is unclear indeed

[11:38] <AlexDaniel-> oh shit, that's local time

[11:38] <MasterDuke> ah, you keep better logs than i,

[11:39] <AlexDaniel-> so so ± something… err, ±≈13 ?

[11:40] <AlexDaniel-> hours

[11:44] <MasterDuke> this is why i want one timezone for the entire globe

[12:30] * masak .oO( kind of like Swatch Internet Time, eh? )

[12:31] <MasterDuke> masak: huh, i'd never heard of that before

[12:33] <timotimo> you mean .beats? :)

[12:34] <timotimo> i know of it from Phantasy Star Online which i had on the gamecube and couldn't play online because i didn't have a modem and my parents wouldn't have paid the subscription anyway

[12:38] <masak> MasterDuke: I had the wrist watch and everything.

[12:38] <masak> MasterDuke: one of those "what a lovely standard; now if only anyone besides used it" kind of deals :P

[12:39] <masak> besides me*

[12:40] <MasterDuke> yep, like the metric system...no, wait, it's just here in the US we don't

[13:19] <yoleaux> Zoffix: https://irclog.perlgeek.de/perl6-dev/2017-10-14#i_15301581

[13:33] <AlexDaniel-> “PS: I am not spamming. I have studied your website, prepared an audit report and believe I can help with your business promotion”

[13:33] * AlexDaniel- facepalms

[13:38] <AlexDaniel-> .tell lizmat RT weekly https://gist.github.com/AlexDaniel/0f20a508bff0f7e9edd4e4d1d94002e2

[13:38] <yoleaux> AlexDaniel-: I'll pass your message to lizmat.

[13:38] <AlexDaniel-> wait what

[13:39] <AlexDaniel-> even with all regression tickets, the number still went down?

[13:39] <AlexDaniel-> Zoffix++

[13:41] <AlexDaniel-> no really, this is awesome. Zoffix#

[14:19] <AlexDaniel-> .tell lizmat for p6weekly (please feel free to reword as you wish): https://gist.github.com/AlexDaniel/7eb90c85fa71014242213f0bceda6c2f

[14:19] <yoleaux> AlexDaniel-: I'll pass your message to lizmat.

[16:20] <Geth> ¦ rakudo/js: 6 commits pushed by pmurias++

[16:20] <Geth> ¦ rakudo/js: 4bb16b5a8f | [js] Enable fetching of signal names

[16:20] <Geth> ¦ rakudo/js: 71f0d3bb8f | [js] Fix nqp::p6invokeflat

[16:20] <Geth> ¦ rakudo/js: 0e91822bdf | Fix native type

[16:20] <Geth> ¦ rakudo/js: f6d0bcbbb2 | [js] Implement nqp::p6reprname

[16:20] <Geth> ¦ rakudo/js: 2053dded74 | [js] Enable unival

[16:20] <Geth> ¦ rakudo/js: 37ff7c6edf | [js] Enable building of native libs when testing

[16:20] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/compare/e1fc8255a9...37ff7c6edf

[16:23] <tbrowder> I’m preparing to work on table pod again and wonder what the opinion is for breaking Pod.npq into Pod.nqp and TablePod.nqp?

[16:36] <Geth> ¦ nqp: caaee9c76e | pmurias++ | src/vm/js/const_map.nqp

[16:36] <Geth> ¦ nqp: [js] Add constant for atomic integers

[16:36] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/caaee9c76e

[16:36] <Geth> ¦ nqp: 08c965368b | pmurias++ | 4 files

[16:36] <Geth> ¦ nqp: [js] Native Call Interface improvements

[16:36] <Geth> ¦ nqp:

[16:36] <Geth> ¦ nqp: The NativeCall modules starts to work a little

[16:36] <Geth> ¦ nqp: Passes t/04-nativecall/01-argless.t and t/04-nativecall/02-simple-args.t

[16:36] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/08c965368b

[18:07] <Geth> ¦ roast: b485b3399c | usev6++ | S03-operators/set_addition.t

[18:07] <Geth> ¦ roast: Disable debug helper

[18:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b485b3399c

[18:09] <Zoffix> man, spectest is a killer on my regular home box

[18:10] <Zoffix> Probably worth it to go through it al and move all the tests that just cover some freak-case bugs into stresstest

[18:12] <Zoffix> Worse still it uses all the resources so I almost can't do anything else (like play some games)

[18:12] <Zoffix> Files=1227, Tests=75670, 699 wallclock secs (13.52 usr  2.41 sys + 2399.60 cusr 198.40 csys = 2613.93 CPU)

[18:12] <Zoffix> And a failure. So I might need to make a change and do it again. half hour for a simple fix

[18:12] <timotimo> ugh :(

[18:12] <timotimo> you know ...

[18:13] <timotimo> with coverage data from every test file ...

[18:13] <timotimo> we could compare what lines were touched in the core setting by any given change and pull the tests that use that area of code to the front

[18:16] <dogbert17> Zoffix: time this one, t/spec/S17-promise/lock-async.t

[18:16] <Zoffix> takes ages

[18:16] <dogbert17> yep

[18:17] <BenGoldberg> You might even make a test variant which *only* runs those test which should be affected by a given change.

[18:17] <timotimo> BenGoldberg: i'd think that's difficult to properly figure out

[18:18] <dogbert17> a couple of weeks ago I timed all files in spectest

[18:24] <Geth> ¦ roast: 220e202a5e | (Zoffix Znet)++ | S32-io/pipe.t

[18:24] <Geth> ¦ roast: Fix broken Proc piping test

[18:24] <Geth> ¦ roast:

[18:24] <Geth> ¦ roast: The test is not part of 6.c-errata.

[18:24] <Geth> ¦ roast:

[18:24] <Geth> ¦ roast: .close on a pipe returns the Proc and sunk Proc awaits the

[18:24] <Geth> ¦ roast: process to finish. This causes proc1 in the test to finish off

[18:24] <Geth> ¦ roast: before the second proc had a chance to grab its pipe.

[18:24] <Geth> ¦ roast:

[18:24] <Geth> ¦ roast: The only reason this test was passing in the past is due to a bug where

[18:24] <Geth> ¦ roast: only the .close on the last open handle actually returned a Proc

[18:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/220e202a5e

[18:24] <dogbert17> S15-normalization/nfc-concat.t is also quite slow

[18:25] <Geth> ¦ rakudo/nom: 74328278f8 | (Zoffix Znet)++ | src/core/Proc.pm

[18:25] <Geth> ¦ rakudo/nom: Fix IO::Pipe.close not always returning the Proc

[18:25] <Geth> ¦ rakudo/nom:

[18:25] <Geth> ¦ rakudo/nom: Currently, only the .close on the last open handle returns the Proc

[18:25] <Geth> ¦ rakudo/nom: object, the rest return Nil, and since using Proc in Bool context

[18:25] <Geth> ¦ rakudo/nom: is a way to check whether it was successful, the Nil interferes with

[18:25] <Geth> ¦ rakudo/nom: such a test, giving a false negative.

[18:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/74328278f8

[18:26] <timotimo> good catch

[18:26] <Geth> ¦ roast: 436eb33e04 | (Zoffix Znet)++ | S29-os/system.t

[18:26] <Geth> ¦ roast: Test all of Proc's IO::Pipe's return the Proc

[18:26] <Geth> ¦ roast:

[18:26] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/74328278f8

[18:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/436eb33e04

[18:27] <Zoffix> .tell jnthn would you just double check that this commit doesn't undo something that was made by design https://github.com/rakudo/rakudo/commit/74328278f8 ? It makes such setups fail for example, 'cause sunk Proc is awaited on: https://github.com/perl6/roast/commit/220e202a5e

[18:27] <yoleaux> Zoffix: I'll pass your message to jnthn.

[18:31] <Zoffix> Files=1, Tests=39, 158 wallclock secs ( 0.03 usr  0.00 sys + 447.26 cusr  2.51 csys = 449.80 CPU)

[18:31] <Zoffix> Looks a lot like the ZOFVM test time.... that's for lock-async.t

[18:32] <timotimo> lock-async requires to produce a bunch of load on the system

[18:32] <dogbert17> I believe there's a scheduler problem lurking in that test file, changing the 'xx 4' lines at the end to say 'xx 2' make quite a bit of difference

[18:32] <dogbert17> *makes

[18:40] <Zoffix> and the test is already optimized. Lower than 10_000 iterations doesn't catch the bug, were there no locking

[18:41] <Zoffix> dogbert17: that halves the number of work, so I'm not surprised :)

[18:41] <Zoffix> doesn't always catch it at least.

[18:44] <dogbert17> it does, but the time to run goes done much more

[18:44] <dogbert17> *down

[18:46] <dogbert17> I remember it going down from ~2min to ~2sec

[18:49] <dogbert17> Zoffix: with 'xx 2' on the last two test I get a test time for the entire file as: real 0m3.996s

[18:52] <Geth> ¦ roast: 37cc7eaacc | (Zoffix Znet)++ | 3 files

[18:52] <Geth> ¦ roast: Improve roast run time by moving Lock Async tests

[18:52] <Geth> ¦ roast:

[18:52] <Geth> ¦ roast: - Move the lengthy lock stress tests to stresstest

[18:52] <Geth> ¦ roast:     - Fewer iterations don't catch failure mode all the time

[18:52] <Geth> ¦ roast:         so we can't reduce them, but move the test outta spectest

[18:52] <Geth> ¦ roast: - Split up the two long stresstest into separate files

[18:52] <Geth> ¦ roast:     - Their total run time is equal to total stresstest time on

[18:52] <Geth> ¦ roast:         a 24-core box, so by splitting them up we can at least

[18:52] <Geth> ¦ roast:         have them taken care of by separate cores if available

[18:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/37cc7eaacc

[18:52] <Geth> ¦ rakudo/nom: 1706194c72 | (Zoffix Znet)++ | t/spectest.data

[18:52] <Geth> ¦ rakudo/nom: Add extra proc async tests

[18:52] <Geth> ¦ rakudo/nom:

[18:52] <Geth> ¦ rakudo/nom: From https://github.com/perl6/roast/commit/37cc7eaacc

[18:52] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1706194c72

[18:53] <Zoffix> dogbert17: no idea why

[18:54] <dogbert17> perhaps jnthn has an idea

[18:55] <Zoffix> dogbert17: also, I don't think channel stress tests were fixed were they? Remember, when we had some hanging tests recently due to scheduler work (which were fixed) and channel stress test was taking ages (which I don't recall if it was fixed or not)

[18:56] <dogbert17> I remenber jnthn fixing at least one slow running test a week or two ago

[18:56] <Zoffix> ok

[18:57] <Zoffix> err  s/proc async tests/lock async tests/;

[18:57] <Zoffix> ZofBot: too much async!

[18:57] <ZofBot> Zoffix, What manner of man is he? Host

[18:59] <dogbert17> Zoffix: your change brought spectest time (on my system) down from 310 to 285

[19:03] <Zoffix> ZOFVM: Files=1280, Tests=152673, 151 wallclock secs (21.51 usr  3.62 sys + 3221.43 cusr 183.80 csys = 3430.36 CPU)

[19:03] <Zoffix> Didn't affect stresstest at all, but I recall there were other files that take ages

[19:04] <Zoffix> Need a more sssssssssssssssssystematiccccccccccccccccccccccccccccccccccccccccccccccccccc approach and measure e

[19:04] <Zoffix> ach            file

[19:04] <Zoffix> ^^ can't even type while spectest is running on my local box :()

[19:05] <Zoffix> hhhhhhhhhhhm weird. t/spec/S12-construction/destruction.t on my 24-core VM now flops with passssssssssssssssssssssssssssssssssssing TODOs

[19:05] <dogbert17> Zoffix: how long does S15-normalization/nfc-concat.t take on your box

[19:06] <Zoffix> lol wtf :) my keyboar'ds weird

[19:06] <Zoffix> dunno

[19:07] <dogbert17> I guess 40-50 sec

[19:08] <Zoffix> local spectest time now: Files=1227, Tests=75680, 550 wallclock secs (13.26 usr  2.73 sys + 1879.07 cusr 186.15 csys = 2081.21 CPU)

[19:09] <Zoffix> with TEST_JOBS=7 on 4-cpu box

[19:09] * Zoffix tries 4

[19:09] <dogbert17> that was a nice improvement

[19:20] <Zoffix> 548s, so no real dif

[20:59] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1197: Improve wrong arity error for anonymous subs

[20:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1197

[21:01] <Geth> ¦ rakudo/nom: 084078e1c3 | MasterDuke17++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[21:01] <Geth> ¦ rakudo/nom: Improve wrong arity error for anonymous subs

[21:01] <Geth> ¦ rakudo/nom:

[21:01] <Geth> ¦ rakudo/nom: If the routine doesn't have a name, use '<anon>' instead.

[21:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/084078e1c3

[21:01] <Geth> ¦ rakudo/nom: e52c8affa3 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/BOOTSTRAP.nqp

[21:01] <Geth> ¦ rakudo/nom: Merge pull request #1197 from MasterDuke17/RT132291

[21:01] <Geth> ¦ rakudo/nom:

[21:01] <synopsebot> RT#132291 [new]: https://rt.perl.org/Ticket/Display.html?id=132291 [LTA] Too few positionals passed to '' (for [:a] X [:b] -> ($i, $j) { })

[21:01] <Geth> ¦ rakudo/nom: Improve wrong arity error for anonymous subs

[21:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e52c8affa3

[21:01] <buggable> New CPAN upload: App-Bob-0.5.1.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-Bob-0.5.1.tar.gz

[21:05] <Geth> ¦ roast: a5b3bb1669 | (Zoffix Znet)++ | 2 files

[21:05] <Geth> ¦ roast: Replace test for RT#129291

[21:05] <Geth> ¦ roast:

[21:05] <Geth> ¦ roast: - At some point original test was reduced to 100 iterations, which

[21:05] <Geth> ¦ roast:     does not appear to reliably exercise the bug

[21:05] <Geth> ¦ roast: - The original test does not run on Win32

[21:05] <Geth> ¦ roast:

[21:05] <Geth> ¦ roast: Replace by test that uses `echo` instead, which is available on Win32,

[21:05] <Geth> ¦ roast: and runs in fewer iterations while still exercising the bug.

[21:05] <synopsebot> RT#129291 [open]: https://rt.perl.org/Ticket/Display.html?id=129291 problems when run()ning two procs and passing the :out of one to the :in of the other

[21:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a5b3bb1669

[21:14] <AlexDaniel-> Zoffix: hey, maybe we can speed up the tests by asking prove to reorder them a little bit

[21:15] <AlexDaniel-> one second I'll find how to do that…

[21:16] <Zoffix> ?

[21:16] <Zoffix> It already spaces out slow tests.

[21:17] <AlexDaniel-> oh really

[21:18] <AlexDaniel-> wait, where?

[21:21] <AlexDaniel-> --state=slow,save

[21:21] <Zoffix> AlexDaniel-: yup: https://gist.github.com/zoffixznet/809086f7d6ea7a8d8b6b4872a548e61d#file-harness5-pl-L45-L74

[21:21] <Zoffix> You have to manually mark slow test files in t/spectest.data

[21:21] <Zoffix> And t/harnes5 and t/harness6 will spread them out evenly through the run

[21:21] <AlexDaniel-> hmmm

[21:22] <Zoffix> And in the past I tried teaching it a bit smarter algo, but that didn't do anything for my 24-core stresstest runs (possibly 'cause there's a handlful of files that just take long time)

[21:23] <AlexDaniel-> well, if you pass --state=slow,save to prove, then it will run slow tests first. Maybe that's not the best strategy, right

[21:23] <Zoffix> How does it know which tests are slow?

[21:23] <AlexDaniel-> (and the slowness is determined by your previous run)

[21:23] <Zoffix> Ah

[21:24] <AlexDaniel-> there's another option “hot” which makes it run those tests that failed first

[21:24] <AlexDaniel-> which is amazing for TDD I think

[21:24] <Zoffix> I doubt there's much to gain in simply reordering the tests. You still have to do the same work, the only win will be from whatever little work is done at the end on fewer cores than you have available.

[21:25] <AlexDaniel-> ok then

[21:26] * Zoffix wouldn't mind being proven wrong :)

[21:27] <AlexDaniel-> Zoffix: well that's easy to test, just add “--state=slow,save” to the prove command and it should do the thing

[21:27] <AlexDaniel-> then run once, it will do it in normal order

[21:27] <AlexDaniel-> and the second time it will reorder it

[21:27] <AlexDaniel-> I don't think I can try it myself right now

[21:29] <AlexDaniel-> or… maybe not that easy

[21:30] <AlexDaniel-> does it even use prove? I thought it does…

[21:30] <AlexDaniel-> :S

[21:31] <Zoffix> nope, but TAP::Harness it uses likely has similar options to prove

[21:32] <dogbert17> 0:30.94elapsed   t/spec/S06-operator-overloading/infix.t

[21:32] <dogbert17> 0:36.94elapsed   t/spec/S17-supply/batch.t

[21:32] <dogbert17> 0:37.31elapsed   t/spec/S06-operator-overloading/circumfix.t

[21:32] <dogbert17> 0:43.78elapsed   t/spec/S15-normalization/nfc-concat.t

[21:33] <dogbert17> these are the four slowest tests on my system

[21:34] <dogbert17> followed by S32-io/lock.t, S17-supply/unique.t, S06-operator-overloading/sub.t, S15-nfg/concat-stable.t, S32-exceptions/misc.t and S29-context/sleep.t

[21:34] <MasterDuke> t/spec/S15-normalization/nfc-concat.t has 1823 tests in it. probably could be split into a couple files

[21:34] <AlexDaniel-> nope, I don't see that option

[21:35] <Zoffix> dogbert17: would be worth checking if those all are marked as slow in rakudo's t/spectest.data

[21:36] <dogbert17> let's see

[21:36] <Zoffix> The space-out-slow-tests thing we do don't make much sense to me. Wouldn't you wanna run all the slow tests first and let the faster tests fill in the gaps at the end rather than spacing slow tests out and leaving $n number of slow tests run slowly closer to end

[21:37] <Zoffix> s/closer to end$/when the spectest gets closer to end/;

[21:37] <Zoffix> 

[21:38] <dogbert17> nfc-concat is marked as # moar

[21:38] <timotimo> Zoffix: consider that the slow tests aren't more likely to break than short tests

[21:38] <timotimo> by spacing tests out you can get the expected latency to the first test failure down a little bit

[21:39] <AlexDaniel-> … also also increase the overall clock time

[21:39] <Zoffix> (prolly tomorrow). I'm gonna add .buffer method that lets users modify IO::Handle and kin's buffer size. Just gonna be a Proxy that uses whatever the name of the internal method to do that does. Wanna squeeze this knob into the release, which will be Star release and possibly last 6.c Star release.

[21:40] <AlexDaniel-> k

[21:40] <AlexDaniel-> releasable6: status

[21:40] <releasable6> AlexDaniel-, Next release in 5 days and ≈21 hours. 1 blocker. Changelog for this release was not started yet

[21:40] <releasable6> AlexDaniel-, Details: https://gist.github.com/032ac3ad4c0e0132b805f3588933013e

[21:40] <timotimo> i just ordered a replacement for my ergonomic keyboard ... so i can have a keyboard with a tab key again

[21:40] <Zoffix> timotimo: no, the latency is the same, as test failures are reported right away and not at the end of a test file run. Also, don't really care about that as 80% of the time I run it to a complete end.

[21:41] <timotimo> no, test failures are reported when tests fail

[21:41] <timotimo> so by running more tests earlier you get to the failing test faster on average

[21:42] <dogbert17> unmarked: S32-exceptions/misc.t, S06-operator-overloading/sub.t, S06-operator-overloading/infix.t and S06-operator-overloading/circumfix.t

[21:42] <AlexDaniel-> and if we were using prove with “hot” we'd be getting to these failing tests instantly the second time you run it :)

[21:42] <Zoffix> timotimo: right, so a slow file with 1000 tests and first test failing will report right away just the same as a fast file with 3 tests and first test failing.

[21:42] <jnthn> Zoffix: +1 on the .buffer things, only thing I wonder is if I shoulda called the parameter (and thus the method) output-buffer, so people don't thing they're setting an input buffer size

[21:42] <yoleaux> 18:27Z <Zoffix> jnthn: would you just double check that this commit doesn't undo something that was made by design https://github.com/rakudo/rakudo/commit/74328278f8 ? It makes such setups fail for example, 'cause sunk Proc is awaited on: https://github.com/perl6/roast/commit/220e202a5e

[21:42] <Zoffix> Alright. I'll think about that too.

[21:43] <jnthn> We actually hardcode the input buffer size a the moment

[21:43] <jnthn> *at

[21:43] <timotimo> slow test files don't actually always have more tests than fast ones

[21:43] <jnthn> So could make that configurable too

[21:43] <Zoffix> OK

[21:44] <jnthn> Also there's demand for making it possible to turn off newline translation on a handle too (sure there's an RT for it)

[21:44] <jnthn> it's done with :!translate-nl elsewhere, iirc (I think on Proc::Async)

[21:44] <jnthn> I knew that was wanted, and did the stuff to make sure we can implement it with just a little code in CORE.setting

[21:45] <jnthn> (Not suggesting this all for Zoffix++ :))

[21:45] <Zoffix> )

[21:45] <Zoffix> *:)

[21:46] <jnthn> Will hopefully make some more progress on the hyper/race stuff this week

[21:47] * timotimo goes to bed early today

[21:52] <jnthn> 'night, timotimo

[21:53] <timotimo> gnite jnthn :)

[21:58] <AlexDaniel-> weeee! Hyper/race!
