[00:05] <travis-ci> Rakudo build failed. Zoffix Znet 'Bump NQP'

[00:05] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/285823953 https://github.com/rakudo/rakudo/compare/484f987259bd...e11f4ea26629

[00:05] <buggable> [travis build above] ✓ All failures are due to: GitHub connectivity (1 failure).

[02:28] <MasterDuke> any reason `method foo(\var) { if nqp::isconcrete(var) { bar() } else { baz() } }` couldn't be turned into `proto method foo(|) { * }; multi method foo(Mu:D \var) { bar(var) } ; multi method foo(Mu:U \var) { baz(var) }`?

[06:09] <[Tux]> This is Rakudo version 2017.09-362-ge11f4ea26 built on MoarVM version 2017.09.1-582-gbd8e6687

[06:09] <[Tux]> csv-ip5xs        1.209 -  1.230

[06:09] <[Tux]> test             9.720 -  9.940

[06:09] <[Tux]> test-t           3.142 -  3.206

[06:09] <[Tux]> csv-parser       0.874 -  0.893

[06:17] <[Tux]> test-t           3.164 -  3.166

[07:48] <Zoffix> MasterDuke: does it really need to be?

[07:50] <Zoffix> As in, the measurements show it using almost a meg more RAM with no speed benefit.

[08:03] <Zoffix> Hm, Perl's `system` also has this issue that `system 'perl6', '-e', 'say q|foo"bar|';` doesn't work

[08:03] <Zoffix> Which I guess means we have no problem and I should stop trying to find a solution \o/

[08:05] <Zoffix> And also means we should try to get a proper executable instead of a batch file on windows

[08:11] <lizmat> Files=1227, Tests=75660, 346 wallclock secs (14.51 usr  5.00 sys + 2414.11 cusr 218.26 csys = 2651.88 CPU)

[08:28] <Zoffix> bah, and this crap is exploitable too >:(

[08:29] <Zoffix> `run $*EXECUTABLE, '-e', '"&whoami';` on windows executes `whoami` on the shell

[08:35] <Zoffix> pretty serious bug come to think of it... Despite Perl's `system` crapping out on `system 'perl6', '-e', 'say q|foo"bar|';` so far I'm unable to make it execute stuff

[08:46] * lizmat is going to be afk for most of the day

[08:54] <Zoffix> ah, k, `system 'C:\rakudo\perl6.bat', '-e', '"" &whoami';` does fall into shell

[08:55] <Zoffix> I guess I'll just pop open a [SECURITY] bug then

[08:59] <jnthn> MasterDuke: I'd lean towards multis generally, though spesh is often smart enough to eliminate the branches when specializing, and so those two caess might well fall out the same post-optimization these days.

[08:59] <jnthn> Smaller candidates are more likely to get inlined

[08:59] <jnthn> Which is a big win

[09:00] <jnthn> but given we also look at the post-speciallization size as well as the pre-specialization size, that may or may not matter

[09:00] <jnthn> It depends. If bar/baz are themselves inlined into the caller then it's possible both the unoptimized and optimized would be over the limit

[09:01] <jnthn> Of course, this is all stuff that we tweak in the VM too

[09:14] <Zoffix> Filed https://rt.perl.org/Ticket/Display.html?id=132258

[09:25] <Zoffix> gah "Cannot delete C:\rakudo\install\bin/moar.dll:  at -e line 1"

[09:25] <Zoffix> K, windows is positively unfun

[09:27] <Zoffix> huh, there were two moar.exe running still.... despite nothing on my terminal running

[10:07] <Geth> ¦ rakudo/nom: 880a8e1c14 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[10:07] <Geth> ¦ rakudo/nom: Make is-run() mangle run() args on Windows

[10:07] <Geth> ¦ rakudo/nom:

[10:07] <Geth> ¦ rakudo/nom: Due to RT#132258, when we `run $*EXECUTABLE` it goes throw cmd.exe

[10:07] <Geth> ¦ rakudo/nom: and the tests fail due to bad quoting. Mangle the args to the

[10:07] <Geth> ¦ rakudo/nom: test routine, so they get sent off properly.

[10:07] <Geth> ¦ rakudo/nom:

[10:07] <Geth> ¦ rakudo/nom: The issue with sending double quotes appear to still remain in some

[10:07] <Geth> ¦ rakudo/nom: <…commit message has 6 more lines…>

[10:07] <synopsebot> RT#132258 [new]: https://rt.perl.org/Ticket/Display.html?id=132258 [SECURITY][WIN32] `run "perl6" ...` can be made to execute shell commands

[10:07] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/880a8e1c14

[10:07] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.09-66-g943f7f7...2017.09-75-ga65dbe0

[10:07] <Geth> ¦ rakudo/nom: 47faae2b13 | (Zoffix Znet)++ | t/05-messages/01-errors.t

[10:07] <Geth> ¦ rakudo/nom: Make `make test` pass on Windows

[10:07] <Geth> ¦ rakudo/nom:

[10:07] <Geth> ¦ rakudo/nom: - Use `is-run` routine for failing tests that does a bit of arg

[10:07] <Geth> ¦ rakudo/nom:    mangling to make them palatable to Windows's cmd.exe (RT#132258)

[10:07] <Geth> ¦ rakudo/nom: - Skip one of the tests on Windows. Couldn't figure out how to send

[10:07] <Geth> ¦ rakudo/nom:    the quote in the args; the best I got resulted in duplicated quotes.

[10:07] <Geth> ¦ rakudo/nom:    Perhaps if there's a good solution to RT#132258 this fudge could be

[10:07] <Geth> ¦ rakudo/nom:    removed.

[10:07] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/47faae2b13

[10:07] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.09-66-g943f7f7...2017.09-75-ga65dbe0

[10:07] <Geth> ¦ rakudo/nom: b8eda66c90 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[10:07] <Geth> ¦ rakudo/nom: Merge branch 'nom' of https://github.com/rakudo/rakudo into nom

[10:07] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b8eda66c90

[10:07] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.09-66-g943f7f7...2017.09-75-ga65dbe0

[10:07] <Zoffix> bah

[10:08] <Zoffix> thought it'd ask me if it were gonna do a merge commit. Oh well

[10:52] <Zoffix> Learning Perl 6 published September preview copy; for those who were wondering what's happening with it...

[10:53] <Zoffix> 217 pages; with the final book aimed at 300

[11:03] <travis-ci> Rakudo build passed. Zoffix Znet 'Merge branch 'nom' of https://github.com/rakudo/rakudo into nom'

[11:03] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/285977216 https://github.com/rakudo/rakudo/compare/e11f4ea26629...b8eda66c90cd

[11:27] <stmuk> 1https://www.amazon.co.uk/learning-perl-keeping-impossible-within/dp/149197768X

[11:27] <stmuk> thats very expensive

[11:32] <stmuk> of course I'll buy it :)

[11:39] <Zoffix> says gonna be released on Nov 30, eh

[11:39] <yoleaux> 11:05Z <piojo> Zoffix: thanks for your work on repl-mode. Extremely helpful for use in cygwin.

[11:39] <Zoffix> huh

[11:39] <Zoffix> wonder why

[11:40] <stmuk> I've found book publishing dates v unreliable in the past .. usually months later than first promised

[11:41] <stmuk> the .fr claimed 5 days earlier

[11:42] <Zoffix> stmuk: BTW, RT#132258 goes into the Windows proc issue you were inquiring about a few days ago. Turns out our current `run` only works right if cmd.exe is not involved, and if you're `run`ing perl6, then it is

[11:42] <synopsebot> RT#132258 [new]: https://rt.perl.org/Ticket/Display.html?id=132258 [SECURITY][WIN32] `run "perl6" ...` can be made to execute shell commands

[11:43] <Zoffix> maybe there's a way to fix up perl6 batch script dunno

[11:43] * Zoffix &

[11:45] <stmuk> Zoffix: thanks I'll take a look

[12:28] <Zoffix> m: (my @a)[1] = 42; @a.List.perl.say; @a.List[0].perl.say

[12:28] <camelia> rakudo-moar b8eda6: OUTPUT: «(Mu, 42)␤Nil␤»

[12:28] <Zoffix> The whole hole business seems all over the map.

[12:28] <Zoffix> m: (my @a)[1] = 42; @a.Slip.perl.say; @a.Slip[0].perl.say

[12:28] <camelia> rakudo-moar b8eda6: OUTPUT: «slip(Any, 42)␤Any␤»

[12:31] <Zoffix> This is part of RT#131783 but the fact that Mus show up in .perl but are actually Nils when you access by index is quite weird

[12:31] <synopsebot> RT#131783 [open]: https://rt.perl.org/Ticket/Display.html?id=131783 [LTA] :delete holes in Arrays get turned to Mus when coercing to List or Slip

[12:34] <Zoffix> m: (my @a)[1] = Mu; @a.List.gist.say; @a.List.perl.say; @a.List[0,1].say

[12:34] <camelia> rakudo-moar b8eda6: OUTPUT: «((Mu) (Mu))␤(Mu, Mu)␤(Nil (Mu))␤»

[12:36] <Zoffix> gonna make .perl/.gist use a Nil there instead of a Mu

[12:46] <Zoffix> it's not working :(

[12:47] <Zoffix> m: (my @a = <a b c>)[1]:delete; use nqp; say @a.List.map: -> \v{ nqp::ifnull(v,Nil).gist }

[12:47] <camelia> rakudo-moar b8eda6: OUTPUT: «(a (Mu) c)␤»

[12:57] <Zoffix> Filed as Rt#132261

[12:57] <synopsebot> RT#132261 [new]: https://rt.perl.org/Ticket/Display.html?id=132261 Unclear what a hole in a List is

[13:02] <Geth> ¦ roast: 24d5fcb486 | (Zoffix Znet)++ | S32-array/delete.t

[13:02] <Geth> ¦ roast: Test holes with .List and .Slip

[13:02] <Geth> ¦ roast:

[13:02] <Geth> ¦ roast: RT#131783: https://rt.perl.org/Ticket/Display.html?id=131783

[13:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/24d5fcb486

[13:02] <synopsebot> RT#131783 [open]: https://rt.perl.org/Ticket/Display.html?id=131783 [LTA] :delete holes in Arrays get turned to Mus when coercing to List or Slip

[13:04] <Zoffix> m: (my @a)[1] = Mu; my @b is default(42) = @a.List; say @b

[13:04] <camelia> rakudo-moar b8eda6: OUTPUT: «[(Mu) (Mu)]␤»

[13:04] <Zoffix> m: (my @a)[1] = Mu; my @b is default(42) = @a.List[*]; say @b

[13:04] <camelia> rakudo-moar b8eda6: OUTPUT: «[42 (Mu)]␤»

[15:46] <Zoffix> Now I see why no one did the TESTNEEDED tickets during SQUASHathon. Went through a dozen of them or so and none are clear what even needs to be tested and two of them aren't even fixed.

[15:47] * Zoffix gives up on this endeavour

[15:51] <ugexe> Zoffix: ive been getting those zombie processes on windows as well

[15:56] <Zoffix> weird

[16:04] <ugexe> i wonder if the MVM_io_eventloop_cancel_work (such as inside MVM_proc_kill_async) can be interrupted in such a way that either handles don't get closed or the signal not getting sent at all (e.g. never reaches the exit_cb for uv_process_kill)

[16:27] <Zoffix> ZOFLAG: t/spec/S17-channel/stress.t

[16:27] <Zoffix> :)

[16:28] <Zoffix> Took 244s before I killed it. Gonna switch to just running spectests for now

[16:38] <Geth> ¦ roast: 1b0b55a873 | (Zoffix Znet)++ | S32-list/seq.t

[16:38] <Geth> ¦ roast: Adjust broken Seq consumation tests

[16:38] <Geth> ¦ roast:

[16:38] <Geth> ¦ roast: The tests are not part of 6.c-errata.

[16:38] <Geth> ¦ roast:

[16:38] <Geth> ¦ roast: The tests passed for the wrong reason. `eqv` will actually

[16:38] <Geth> ¦ roast: return True if the LHS and RHS are the same object; the test was

[16:38] <Geth> ¦ roast: passing because the Seq was touched in the guts of cmp-ok.

[16:38] <Geth> ¦ roast:

[16:38] <Geth> ¦ roast: Fix by using different consumed Seqs in the test.

[16:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1b0b55a873

[16:41] <Geth> ¦ rakudo/nom: 3684384db1 | (Zoffix Znet)++ | lib/Test.pm6

[16:41] <Geth> ¦ rakudo/nom: Make cmp-ok() take its args raw

[16:41] <Geth> ¦ rakudo/nom:

[16:41] <Geth> ¦ rakudo/nom: - Lets users use `=:=` op as comparator

[16:41] <Geth> ¦ rakudo/nom: - Prevents interference with other ops that rely on address

[16:41] <Geth> ¦ rakudo/nom:     equivalence to do their thang, such as `eqv`

[16:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3684384db1

[16:44] <Geth> ¦ roast: 4bc442622d | (Zoffix Znet)++ | S24-testing/13-cmp-ok.t

[16:44] <Geth> ¦ roast: Test cmp-ok() can be used with =:= op

[16:44] <Geth> ¦ roast:

[16:44] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/3684384db1

[16:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4bc442622d

[16:46] <ugexe> zombie processes seem to be coming from cntrl+c during the spectest?

[16:46] <ugexe> zombie moar processes, and some zombie 'Windows Command Processor' processes

[16:46] <Zoffix> I did do ctrl+c during spectest, so possible maybe

[16:47] <Zoffix> There's some test that hangs. I think INET sock one

[16:47] <Zoffix> ZOFVM: Files=1277, Tests=152649, 155 wallclock secs (21.43 usr  3.83 sys + 3351.40 cusr 200.18 csys = 3576.84 CPU)

[16:48] <ugexe> all the moar processes were under load until cntrl+c, at which time 2 processes closed and the other 4 dropped to 0% cpu utilization

[16:50] <Geth> ¦ rakudo/nom: 54507ac94e | (Zoffix Znet)++ | src/core/traits.pm

[16:50] <Geth> ¦ rakudo/nom: Fix `Mu` as is default() on attributes

[16:50] <Geth> ¦ rakudo/nom:

[16:50] <Geth> ¦ rakudo/nom: Fixes RT#132082: https://rt.perl.org/Ticket/Display.html?id=132082

[16:50] <Geth> ¦ rakudo/nom:

[16:50] <Geth> ¦ rakudo/nom: Routine args default to `Any`, so the multi for is default

[16:50] <Geth> ¦ rakudo/nom: with Mu was never reached, instead going to the multi that

[16:50] <Geth> ¦ rakudo/nom: cries about unknown traits.

[16:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/54507ac94e

[16:50] <synopsebot> RT#132082 [new]: https://rt.perl.org/Ticket/Display.html?id=132082 [BUG] "is default(Mu)" parse failure when used on attribute

[16:51] <Geth> ¦ roast: c537352009 | (Zoffix Znet)++ | S02-names/is_default.t

[16:51] <Geth> ¦ roast: Undfudge and expand `is default(Mu)` test

[16:51] <Geth> ¦ roast:

[16:51] <Geth> ¦ roast: RT#132082: https://rt.perl.org/Ticket/Display.html?id=132082

[16:51] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/54507ac94e

[16:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c537352009

[17:08] <bartolin> Zoffix: i saw your ticket about a holin in a List. i remember struggling with this about a year ago -- maybe the discussion in the following issue and the mentioned PR (both closed) are of interest: https://rt.perl.org/Ticket/Display.html?id=128320

[17:08] <bartolin> Zoffix: the concrete problem was a NPE on the jvm backend, but if i remember correctly, the underlying issue was List.iterator in combination with a hole

[17:20] <Zoffix> bartolin: don't know about JVM, but pretty sure nqp::ifnul in the iterator will fix the issue—that's what AT-POS does. However, I imagine having to do that on all the elements all the time will be a performance penalty that's really too steep to pay just to handle such a fringe usecase

[17:21] <Zoffix> Without considering perf, it makes sense to shove a Nil into holes, but... vOv

[17:21] <Zoffix> Maybe that's what the holes should be filled with, instead of Mus.

[17:21] <Zoffix> Like, right on deletion

[17:21] <Zoffix> (or expansion)

[17:23] <Zoffix> m: my @a is default(42) = <a b c>; @a[1] := Nil; say @a.List

[17:23] <camelia> rakudo-moar 54507a: OUTPUT: «(a Nil c)␤»

[17:23] <Zoffix> But then we're stuck with this problem. Though Nil kinda makes more sense. Since we say it's our "lack of value" indicator

[17:24] <Zoffix> More sense than Mu I mean. Mu also sucks because some things don't like it. So a hole creates an issue that an Array/List don't fit some places

[17:24] <Zoffix> my @a = <a b c>; @a[1]:delete; sub ($a, $b, $c) {}(|@a.List)

[17:24] <Zoffix> m: my @a = <a b c>; @a[1]:delete; sub ($a, $b, $c) {}(|@a.List)

[17:24] <camelia> rakudo-moar 54507a: OUTPUT: «Type check failed in binding to parameter '$b'; expected Any but got Mu (Mu)␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:26] <Zoffix> m: my @a = <a b c>; @a[1]:delete; sub bar { say $^x }; @a.List.map: &bar

[17:26] <camelia> rakudo-moar 54507a: OUTPUT: «a␤Type check failed in binding to parameter '$x'; expected Any but got Mu (Mu)␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:26] <Zoffix> etc.

[17:27] <Zoffix> m: my @a = <a b c>; @a[1]:delete; say [===] @a.List

[17:27] <camelia> rakudo-moar 54507a: OUTPUT: «Cannot resolve caller infix:<===>(Str, Mu); none of these signatures match:␤    ($?)␤    (\a, \b)␤    (Enumeration:D \a, Enumeration:D \b)␤    (Int:D \a, Int:D \b)␤    (int $a, int $b)␤    (Num:D \a, Num:D \b)␤    (num \a, num \b --> Bool)…»

[17:27] <Zoffix> But if they were Nils, these all would work

[17:27] <Zoffix> s: [], 'List', \()

[17:27] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/54507ac94/src/core/Array.pm#L358

[17:30] * Zoffix tries sticking ifnul up in there

[17:42] <Zoffix> haw, it did the trick. Though there's this `:view` arg thats undocumented, unused (in core) and unspecced and if you use it you don't get the nils

[17:43] <timotimo> is that a performance-related optimization thingie?

[17:43] <timotimo> a "i swear i won't modify anything, so please don't copy"

[17:43] <Zoffix> timotimo: yeah

[17:45] <Zoffix> .ask lizmat do you know if the `:view` can be removed? It doesn't appear to be used in core, undocumented, and unspecced. I'm making the method shove Nils into holes to resolve RT#132261 and user would still get Mus with `:view` arg. https://github.com/rakudo/rakudo/commit/e99082382905e2da6a8962a8b97663d32736c739

[17:45] <yoleaux> Zoffix: I'll pass your message to lizmat.

[17:46] <synopsebot> RT#132261 [new]: https://rt.perl.org/Ticket/Display.html?id=132261 Unclear what a hole in a List is

[17:46] <timotimo> oh, it's no longer used?

[17:46] <Zoffix> grep -FR 'List' src | grep 'view' shows me just the method definition, so I'm guessing no

[17:58] <Geth> ¦ rakudo/nom: e135121914 | (Zoffix Znet)++ | src/core/Array.pm

[17:58] <Geth> ¦ rakudo/nom: Make Array.List fill holes with Nil

[17:58] <Geth> ¦ rakudo/nom:

[17:58] <Geth> ¦ rakudo/nom: - Fixes RT#132261: https://rt.perl.org/Ticket/Display.html?id=132261

[17:58] <Geth> ¦ rakudo/nom: - List.AT-POS already gives a Nil for a hole, but .iterator does

[17:58] <Geth> ¦ rakudo/nom:     not do similar insertion. Doing so in Array.List lets us avoid

[17:58] <Geth> ¦ rakudo/nom:     paying for this feature in List.iterator

[17:58] <Geth> ¦ rakudo/nom: - This behaviour is closer to what happens with .Slip or .AT-POS,

[17:58] <Geth> ¦ rakudo/nom: <…commit message has 7 more lines…>

[17:58] <synopsebot> RT#132261 [new]: https://rt.perl.org/Ticket/Display.html?id=132261 Unclear what a hole in a List is

[17:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e135121914

[17:59] <Geth> ¦ roast: 2257ab353f | (Zoffix Znet)++ | S32-array/delete.t

[17:59] <Geth> ¦ roast: Spec Array.List fills holes with Nils

[17:59] <Geth> ¦ roast:

[17:59] <Geth> ¦ roast: RT#132261: https://rt.perl.org/Ticket/Display.html?id=132261

[17:59] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/e135121914

[17:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2257ab353f

[18:00] * Zoffix &

[18:02] <Zoffix> m: (my @a is default(42) = <a b c>)[1]:delete; @a.Slip.say

[18:02] <camelia> rakudo-moar 54507a: OUTPUT: «(a 42 c)␤»

[18:02] <Zoffix> m: (my @a is default(42) = <a b c>)[1]:delete; @a.Slip.List.say

[18:02] <camelia> rakudo-moar 54507a: OUTPUT: «(a (Mu) c)␤»

[18:02] <Zoffix> crap

[18:02] <Zoffix> Wonder if my fix fixes that. Kinda were expecting a 42 up there in the second version

[18:07] <Zoffix> No, don't think it fixes anything. dam

[18:07] <Zoffix> .in 4d fix (my @a is default(42) = <a b c>)[1]:delete; @a.Slip.List.say, bruh

[18:07] <yoleaux> Zoffix: I'll remind you on 14 Oct 2017 18:07Z

[18:08] <Zoffix> And currently it uses Slip.List that just transplants $!todo and $!reified.

[18:09] <Zoffix> m: my @a = <a b c>; my @list := @a.Slip.List; say @list; @a[1] = 42; say @list

[18:09] <camelia> rakudo-moar 54507a: OUTPUT: «(a b c)␤(a 42 c)␤»

[18:09] <Zoffix> Fun

[18:10] <Zoffix> m: my @a = <a b c>; my @list := @a.Slip.List; @list[1] = 42; say @list

[18:10] <camelia> rakudo-moar 54507a: OUTPUT: «(a 42 c)␤»

[18:10] <Zoffix> Even more fun >:(

[18:11] <Zoffix> Actually, no the first one is more fun.

[18:11] * Zoffix &&

[18:55] <AlexDaniel-> greppable6: hello

[18:55] <greppable6> AlexDaniel-, No! It wasn't me! It was the one-armed man! Backtrace: https://gist.github.com/bf4dc72c8d3e9302256a122e6a500da5

[18:57] <AlexDaniel-> so if it's from CPAN, how do I link to the code?

[18:57] <Zoffix> mp6o/dist/Dist::Name:cpan

[18:57] <AlexDaniel-> I guess a link to all-modules will do :S

[18:58] <Zoffix> or that

[20:24] <Geth> ¦ nqp: ebac9feeb6 | (Elizabeth Mattijsen)++ | 2 files

[20:24] <Geth> ¦ nqp: Make NQP's BUILDPLAN more like Perl6's BUILDPLAN

[20:24] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ebac9feeb6

[20:41] <travis-ci> NQP build failed. Elizabeth Mattijsen 'Make NQP's BUILDPLAN more like Perl6's BUILDPLAN'

[20:41] <travis-ci> https://travis-ci.org/perl6/nqp/builds/286217065 https://github.com/perl6/nqp/compare/a65dbe0c7775...ebac9feeb696

[20:42] * lizmat doesn't know if she just broke the JVM build or not

[20:42] <lizmat> java.lang.ClassCastException: org.perl6.nqp.sixmodel.reprs.P6strInstance cannot be cast to java.lang.String

[20:42] <lizmat> does that ring a bell?

[20:43] <bartolin> no, that's a recently added test that fails on jvm

[20:44] <lizmat> so it's not something I just broke in my last commit ?

[20:44] * lizmat is pretty noob in nqp proper

[20:44] <bartolin> i'm pretty sure, i've seen that one before.

[20:45] <bartolin> it uses dies-ok and it looks like there is something wrong with handling (native) java exception

[20:54] <pmurias> bartolin: it's the same problem we had with the divide by zero

[20:55] <pmurias> bartolin: the say call after the try block in dies-ok seems to cause problems

[20:56] <pmurias> s/cause problems/works incorrectly because the try screws up something

[21:04] <lizmat> ok

[21:04] <lizmat> cool  *phew*

[21:07] <AlexDaniel-> releasable6: next

[21:07] <releasable6> AlexDaniel-, Next release in 10 days and ≈21 hours. No blockers. Changelog for this release was not started yet

[21:07] <releasable6> AlexDaniel-, Details: https://gist.github.com/1b1b91f6ee10fd8322517b21f9ddaf98

[21:10] <bartolin> pmurias: yeah, i tried to understand what happens, but failed. maybe the exception isn't properly handled by CATCH -- and then blows up when 'ok' is called?

[21:19] <Zoffix> Yeah, that nqp error existed for awhile

[21:27] <Geth> ¦ rakudo/nom: dd943eded8 | (Elizabeth Mattijsen)++ | 4 files

[21:27] <Geth> ¦ rakudo/nom: Fix for RT #132236

[21:27] <Geth> ¦ rakudo/nom:

[21:27] <Geth> ¦ rakudo/nom: - Bump NQP

[21:27] <Geth> ¦ rakudo/nom:   - this brings the NQP buildplan in line with Perl 6

[21:27] <Geth> ¦ rakudo/nom:   - 0 -> CODE, 1 -> 0, 2 -> 11, 3 -> 12

[21:27] <Geth> ¦ rakudo/nom: - Add support for task codes 10, 11, 12 to auto-generated BUILDALL

[21:27] <Geth> ¦ rakudo/nom:   - having task 10 makes it ready for auto-generated BUILD_LEAST_DERIVED

[21:28] <Geth> ¦ rakudo/nom: - Add support for tasks 11,12 to Mu.BUILDALL and Mu.BUILD_LEAST_DERIVED

[21:28] <synopsebot> RT#132236 [open]: https://rt.perl.org/Ticket/Display.html?id=132236 [REGRESSION] Meta object construction

[21:28] <Geth> ¦ rakudo/nom:   - in case somehow we failed to auto-generate a BUILDALL

[21:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd943eded8

[21:32] * lizmat calls it a day again

[22:04] <Geth> ¦ rakudo/nom: 3ca6554fdd | (David Warring)++ | 3 files

[22:04] <Geth> ¦ rakudo/nom: implement typed pointer increment and array dereference

[22:04] <Geth> ¦ rakudo/nom:

[22:04] <Geth> ¦ rakudo/nom: This enables:

[22:04] <Geth> ¦ rakudo/nom:

[22:04] <Geth> ¦ rakudo/nom:         use NativeCall;

[22:04] <Geth> ¦ rakudo/nom:         my CArray[uint16] $a .= new: 10, 20 ... 100;

[22:04] <Geth> ¦ rakudo/nom:         my $p = nativecast(Pointer[uint16], $a);

[22:04] <Geth> ¦ rakudo/nom: <…commit message has 6 more lines…>

[22:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3ca6554fdd

[22:04] <Geth> ¦ rakudo/nom: e19b3409e8 | (Zoffix Znet)++ (committed using GitHub Web editor) | 3 files

[22:04] <Geth> ¦ rakudo/nom: Merge pull request #1186 from dwarring/pointer++

[22:04] <Geth> ¦ rakudo/nom:

[22:04] <Geth> ¦ rakudo/nom: implement typed pointer increment and array dereference salortiz++

[22:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e19b3409e8

[22:06] <Zoffix> dam wtf... placed `note($l.HOW.name($l)) if nqp::atkey(nqp::getenvhash(), 'ZZZ');` above this line https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L68  trying to dump the value, but when I set the env key make it dump, I get "Cannot invoke this object (REPR: Null; VMNull)" :/

[22:06] <Zoffix> nqp: note(42.HOW.name(42)) if nqp::atkey(nqp::getenvhash(), 'ME')

[22:06] <camelia> nqp-moarvm: OUTPUT: «BOOTInt␤»

[22:06] <Zoffix> And here it works fine :\

[22:16] <Zoffix> k, note() nor say() ain't working in that place. nqp::say() worked

[22:17] <timotimo> yo zoffix, whatcha up to?

[22:18] <Zoffix> m: $ = ""; sub postfix:<♥> { $^a + 42}; say "{ 5♥ }"

[22:18] <camelia> rakudo-moar e19b34: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3"; sub postfix:<♥> { $^a + 42}; say "{ 57⏏5♥ }"␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement m…»

[22:18] <Zoffix> timotimo: debugging this. Well, I already know it's %quote_lang_cache that's the cause, but just trying to figure out why the Slang Refactor bustred it

[22:19] <timotimo> ah, that

[22:19] <timotimo> yeah, man, that's a wild bug

[22:25] <Zoffix> oh lol, I see it I think

[22:26] <Zoffix> oh, false alarm, was looking at the wrong place -_-

[22:26] <timotimo> boy do i know that feeling

[22:27] <jnthn> Zoffix++ # persistence

[22:27] <jnthn> I don't have any guesses for you, alas

[22:29] <Zoffix> :)

[22:31] <MasterDuke> jnthn, Zoffix: thanks for the answers. i'm trying to make INTERPOLATE a little faster, so i'd only make the change if it does measure better, but i wanted to make sure the two options i asked about were in fact logically the same

[22:33] <Zoffix> MasterDuke: FWIW, I was measuring with /usr/bin/time perl6 -e 'use nqp; class Foo { method foo (\var) { nqp::isconcrete(var) ?? rand !! rand } }; my $f = Foo; $ = Foo.new.foo: 42 for ^3000_000; say now - INIT now'

[22:33] <Zoffix> vs same but with multies

[22:35] <MasterDuke> i believe one of the branches is taken way more than the other, so trying to break it out into its own more self-contained multi

[22:36] <Zoffix> cool

[22:36] <MasterDuke> but you saw a 1m more ram for the multi version? wouldn't have expected that

[22:37] <Zoffix> buggable: zen I WILL EAT THIS BUG ALIVE!!!

[22:37] <buggable> Zoffix, "When the mind is perfectly clear, what is is what we want."

[22:40] <AlexDaniel-> greppable6: Bundesliga

[22:40] <greppable6> AlexDaniel-, https://gist.github.com/1100fce50f199befe1f744c54dcc2e2c

[22:40] <AlexDaniel-> greppable6: HandleSupplier

[22:40] <greppable6> AlexDaniel-, https://gist.github.com/188793862e774b9ab179fe5d8b910336

[22:41] <AlexDaniel-> gitlab and cpan modules are now supported

[22:41] <Zoffix> AlexDaniel-++

[22:41] <AlexDaniel-> .oO( -++ :D )

[22:45] <MasterDuke> IIRC, protos currently don't support code in their body? that is actually shared by all the multis?

[22:46] <Zoffix> MasterDuke: they do. You're thinking of regex protos

[22:46] <Zoffix> m: proto x { say 'meow'; {*}; say 'moo' }; multi x(Int) { say 'here' }; multi x(Num) { say 'there' }; x 42; x pi

[22:46] <camelia> rakudo-moar e19b34: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:46] <Zoffix> m: proto($) x { say 'meow'; {*}; say 'moo' }; multi x(Int) { say 'here' }; multi x(Num) { say 'there' }; x 42; x pi

[22:46] <camelia> rakudo-moar e19b34: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤{*} may only appear in proto␤at <tmp>:1␤------> 3proto($) x { say 'meow'; {*}7⏏5; say 'moo' }; multi x(Int) { say 'here'␤    expecting any of:␤        horizontal whitespace␤        term␤»

[22:47] <Zoffix> it is a proto, bruh

[22:47] <Zoffix> m: proto sub($) x { say 'meow'; {*}; say 'moo' }; multi x(Int) { say 'here' }; multi x(Num) { say 'there' }; x 42; x pi

[22:47] <camelia> rakudo-moar e19b34: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3proto sub($)7⏏5 x { say 'meow'; {*}; say 'moo' }; multi␤    expecting any of:␤        new name to be defined␤»

[22:47] <Zoffix> buggable: zen KILL IT WITH FIRE!

[22:47] <buggable> Zoffix, "Today, you can decide to walk in freedom. You can choose to walk differently. You can walk as a free person, enjoying every step."

[22:47] <jnthn> Zoffix: Why are you putting the signature before the name? ;)

[22:47] <Zoffix> Ah

[22:47] <Zoffix> m: proto x($) { say 'meow'; {*}; say 'moo' }; multi x(Int) { say 'here' }; multi x(Num) { say 'there' }; x 42; x pi

[22:47] <camelia> rakudo-moar e19b34: OUTPUT: «meow␤here␤moo␤meow␤there␤moo␤»

[22:56] <ugexe> hmm, mkdir("exists.txt") returns "exists.txt".IO

[22:56] <ugexe> e.g. mkdir on file

[23:00] <timotimo> that probably shouldn't happen

[23:00] <AlexDaniel-> “hmm” indeed. mkdir -p complains about this kind of stuff

[23:01] <MasterDuke> Zoffix: ah, thanks

[23:07] <Zoffix> ugexe: yeah, there's a ticket for that: https://rt.perl.org/Ticket/Display.html?id=127772#ticket-history

[23:21] <MasterDuke> making progress, now INTERPOLATE is 3x slower

[23:22] <MasterDuke> that's what people want, right?

[23:23] <Zoffix> :)

[23:23] <Zoffix> 1. Make it slower for a few releases

[23:23] <Zoffix> 2. Fix it back to past speed

[23:24] <Zoffix> 3. Log "Made INTERPOALTE 3x faster" :)

[23:24] <Zoffix> ???

[23:24] <Zoffix> PROFIT!

[23:24] <AlexDaniel-> 1½. Log “Made INTERPOALTE 3x slower”

[23:25] <Geth> ¦ nqp: 26abb152bb | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[23:25] <Geth> ¦ nqp: Bump MoarVM

[23:25] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/26abb152bb

[23:25] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09.1-580-g631b3bf...2017.09.1-591-gf2deedf

[23:25] <Geth> ¦ rakudo/nom: a72214c4f1 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[23:25] <Geth> ¦ rakudo/nom: Bump NQP

[23:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a72214c4f1

[23:25] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.09-76-gebac9fe...2017.09-77-g26abb15

[23:26] <MasterDuke> heh. rather surprised  my changes had this much effect, thought they were pretty minot so far

[23:26] <MasterDuke> *minor

[23:34] <Zoffix> :S even with the brute-force hammer of nuking the cache, the bug is still there. The output says clearing cache-blah blah but shows zero keys in cache clearing method (both before and after deletion) yet in quote_lang method the keys still show up :/

[23:34] <Zoffix> https://gist.github.com/zoffixznet/ff4aa31a820449793bcd6b2d9d44ead2

[23:34] <Zoffix> Gonna continue it tomorrow

[23:38] <travis-ci> NQP build failed. Zoffix Znet 'Bump MoarVM'

[23:38] <travis-ci> https://travis-ci.org/perl6/nqp/builds/286282233 https://github.com/perl6/nqp/compare/ebac9feeb696...26abb152bbf3

[23:46] <MasterDuke> hm, after my changes tons of time is spent in find_best_dispatchee. it doesn't like something about my multis
