[08:12] <Geth> Â¦ rakudo/nom: bd4094e24b | (Elizabeth Mattijsen)++ | src/core/Junction.pm

[08:12] <Geth> Â¦ rakudo/nom: Only actually stringify non-Str in Junction.Str

[08:12] <Geth> Â¦ rakudo/nom:

[08:12] <Geth> Â¦ rakudo/nom: Makes it about 2x as fast if the junction already consistes of strings.

[08:12] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bd4094e24b

[08:24] <Geth> Â¦ rakudo/nom: a3c71e7d39 | (Elizabeth Mattijsen)++ | src/core/Junction.pm

[08:24] <Geth> Â¦ rakudo/nom: Concatting a Junction with an empty string is just .Str

[08:24] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a3c71e7d39

[08:51] <brrt> can we make a plan for killing the extops

[09:35] <Geth> Â¦ roast: 1d784096c9 | (brian d foy)++ (committed using GitHub Web editor) | S06-signature/slurpy-params.t

[09:35] <Geth> Â¦ roast: Minor typo

[09:35] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/1d784096c9

[09:45] <Geth> Â¦ nqp: 980ea2684d | pmurias++ | src/vm/js/nqp-runtime/io.js

[09:45] <Geth> Â¦ nqp: [js] Make nqp::readfh work on stdin

[09:45] <Geth> Â¦ nqp:

[09:45] <Geth> Â¦ nqp: This works on linux, but needs to be tested on windows (which lacks /dev/stdin)

[09:45] <Geth> Â¦ nqp: review: https://github.com/perl6/nqp/commit/980ea2684d

[09:48] <nine> Killing extops? I'd like that. They never made sense to me considering that MoarVM was explicitly written to run rakudo :)

[09:49] <jnthn> They're largely "things we didn't have time to design right in the VM, so exported the technical debt" :)

[09:49] <jnthn> (Yes, I'd like to see them go. No, I don't care to do it by just moving them.)

[10:06] <brrt> what would you recommend we'd need for them to go?

[10:08] <jnthn> Well, step 1 is probably to re-design the stuff that underpins Scalar

[10:08] <jnthn> Which we need to do for spesh to better understand it anyway

[10:08] <brrt> hmmm

[10:08] <jnthn> Once *that* is moved into MoarVM at least a few ops will go away

[10:09] <jnthn> The p6box_i, p6box_s etc. can easily go today

[10:09] <jnthn> Anyone can do that

[10:09] <jnthn> We "just" need to turn them into a wval + box instruction

[10:09] <jnthn> Or perhaps a hllboxtype_i + box

[10:10] <jnthn> That probably just leaves a small number of things

[10:10] <brrt> uhuh

[11:10] <Geth> Â¦ nqp: fff99261e1 | (Jonathan Worthington)++ | docs/ops.markdown

[11:10] <Geth> Â¦ nqp: Design/document soon-to-be-added atomic ops.

[11:10] <Geth> Â¦ nqp:

[11:10] <Geth> Â¦ nqp: These will be implemented in MoarVM and used to make atomics available

[11:10] <Geth> Â¦ nqp: in Rakudo.

[11:10] <Geth> Â¦ nqp: review: https://github.com/perl6/nqp/commit/fff99261e1

[11:56] <dogbert17_> ZOFFLOP: S03-junctions/autothreading.t, S05-modifier/ignoremark.t, S05-modifier/samemark.t, S17-promise/nonblocking-await.t, S32-io/IO-Socket-Async.t and S32-io/IO-Socket-INET.t

[13:05] <jnthn> So I'm putting in various atomic ops and pondering exactly how we'll expose them at Perl 6 level.

[13:06] <jnthn> A cas function is fine enough and we can overload it for Scalar and int

[13:06] <jnthn> Question beyond that is if we'd prefer an interface like Atomic.something(...) or a more functional interface

[13:07] <timotimo> just can't be bigint ... or immutable Int :P

[13:07] <jnthn> Right, has to be an `int $target is rw`

[13:08] <jnthn> m: multi m(int $target is rw) { say "int" }; multi m($x is rw) { say "reference" }; my int $test = 42; m($test); my $test2 = Mu; m($test2)

[13:08] <camelia> rakudo-moar a3c71e: OUTPUT: Â«int?Cannot resolve caller m(Mu); none of these signatures match:?    (int $target is rw)?    ($x is rw)?  in block <unit> at <tmp> line 1??Â»

[13:08] <jnthn> oops

[13:08] <jnthn> m: multi m(int $target is rw) { say "int" }; multi m($x is rw) { say "reference" }; my int $test = 42; m($test); my $test2 = Any; m($test2)

[13:08] <camelia> rakudo-moar a3c71e: OUTPUT: Â«int?reference?Â»

[13:09] <jnthn> m: multi m(int $target is rw) { say "int" }; multi m($x is rw) { say "reference" }; my int $test = 42; m($test); my $test2 = 42; m($test2)

[13:09] <camelia> rakudo-moar a3c71e: OUTPUT: Â«int?reference?Â»

[13:09] <jnthn> So those fall fine out of multi

[13:09] <jnthn> The other operations on scalars are atomic load and atomic store

[13:09] <jnthn> The other opreations on native int are atomic increment, decrement, add, load, and store

[13:10] <timotimo> ah, scalars will also store and load actual objects

[13:10] <jnthn> There's then an argument-less memory barrier

[13:10] <jnthn> The boring answer is just Atomic.add($i, 42)

[13:10] <jnthn> Atomic.full-barrier()

[13:10] <jnthn> etc.

[13:10] <timotimo> Atomic+ Atomic- :P

[13:11] <timotimo> is this anything to do with making object hashes perl6-level and making them threadsafe?

[13:11] <timotimo> or your latest secret project?

[13:11] <jnthn> But...well yeah, we can do horrors like $x A= $obj

[13:11] <jnthn> :P

[13:11] <timotimo> we do have the S metaop for "sequential" or something

[13:11] <timotimo> that's sort of what you get when you use atomic ops

[13:11] <jnthn> No, it's to do with somebody offering me funding to implement atomics :-)

[13:12] <timotimo> oh, cool

[13:12] <timotimo> .o( now in theaters: Atomic Jonthe )

[13:12] <jnthn> :P

[13:12] <jnthn> Wait, what secret project? :P :P Just 'cus I've got my first talk in ages coming up doesn't mean there'll be a big reveal :P

[13:13] <timotimo> :D

[13:13] <jnthn> Or at least, it doesn't *have* to... ;-)

[13:13] <timotimo> no pressure

[13:13] <jnthn> I pondered some atomic-y meta-op

[13:13] <jnthn> But it seems pretty poor generalization

[13:13] <timotimo> very

[13:14] <timotimo> i mean, it could be like += but instead of "assigning" it'll compare-and-swap in a loop or something?!

[13:14] <jnthn> We'd have to pick a non-ascii char for it too

[13:14] <jnthn> += can't fail

[13:14] <jnthn> There's a direct atomic add

[13:14] <jnthn> So no implicit loop there

[13:14] <timotimo> bad example, indeed

[13:14] <jnthn> I think cas just wants to be a function

[13:14] <timotimo> A.= lc

[13:15] <jnthn> Yeah but ++ and -- are the other ones

[13:15] <jnthn> And you can't A++ and A-- 'cus it'd have to be written $foo\A++ to not be ambiguous anyway

[13:15] <timotimo> indeed, that'd be ugly

[13:15] <jnthn> And then it'd only work on a native int of the right size :P

[13:15] <timotimo> +A+ -A- *ugh*

[13:15] <jnthn> eww :P

[13:16] <jnthn> ++A and --A and =A and +=A would work but...uh... )

[13:16] <timotimo> except we also have pre-increment

[13:16] <timotimo> though i believe the increment and decrement atomic ops give you the before value already

[13:16] <jnthn> Not natively but yeah, we can simulate it

[13:16] <jnthn> Right

[13:17] <jnthn> I think I'll go the boring route for now

[13:17] <timotimo> that'll be acceptable

[13:17] <jnthn> There are pretty special case anyway

[13:17] <jnthn> Argubably they could just be functions

[13:17] <jnthn> Not Atomic.blah

[13:17] <jnthn> Since cas already is

[14:24] <pmurias> jnthn: are $a.=repeated and $a .= repeated meant to compile differently?

[14:25] <pmurias> jnthn: $a.=repeated has a sink when compiled while $a .= repeated doesn't

[14:30] <jnthn> They're parsed very differently

[14:31] <jnthn> The first is parsed as a method call, like .+ and .* are

[14:31] <jnthn> The latter as an infix op

[14:31] <pmurias> both are intended to have identical semantics?

[14:31] <jnthn> Yeah

[14:31] <jnthn> Not sure what stops the latter one getting the sink

[14:31] <jnthn> Oh

[14:31] <jnthn> Maybe the problem is the former does get the sink though

[14:31] <jnthn> Yeah, it's an assignment

[14:32] <jnthn> And assignments shouldn't be sunk

[14:33] <pmurias> the sink is somehow called only on the JVM/JS backends

[14:33] <pmurias> I'll debug that

[14:34] <jnthn> pmurias++

[14:43] <Geth> Â¦ nqp/atomics: 8fddad9170 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[14:43] <Geth> Â¦ nqp/atomics: Map new atomic ops on MoarVM backend.

[14:43] <Geth> Â¦ nqp/atomics: review: https://github.com/perl6/nqp/commit/8fddad9170

[15:21] <pmurias> jnthn: it turns out that nqp::p6sink is called on MoarVM backend but it doesn't do anything because it gets a container (and nqp::p6sink deconts that container on the jvm and js)

[15:23] <pmurias> jnthn: I assume I should fix nqp::p6sink on js & jvm and stop the nqp::p6sink being emitted for .= on all backends?

[15:31] <Geth> Â¦ rakudo/atomics: 01b6d3f56e | (Jonathan Worthington)++ | 4 files

[15:31] <Geth> Â¦ rakudo/atomics: Initial implementation of real cas on Scalars.

[15:31] <Geth> Â¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/01b6d3f56e

[15:32] <jnthn> I guess if something's in a container we shouldn't sink it, yeah

[15:32] <jnthn> And yes, we don't want to sink .= since it's stored

[15:34] <Geth> Â¦ roast: a42b3995b3 | (Jonathan Worthington)++ | S17-lowlevel/cas.t

[15:34] <Geth> Â¦ roast: Add tests for the cas function.

[15:34] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/a42b3995b3

[16:24] <Geth> Â¦ rakudo/atomics: 40853b4f73 | (Jonathan Worthington)++ | 2 files

[16:24] <Geth> Â¦ rakudo/atomics: Re-implement auto-looping form of cas.

[16:24] <Geth> Â¦ rakudo/atomics:

[16:24] <Geth> Â¦ rakudo/atomics: This time actually doing it atomic.

[16:24] <Geth> Â¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/40853b4f73

[16:24] <Geth> Â¦ rakudo/atomics: 0155358517 | (Jonathan Worthington)++ | t/spectest.data

[16:24] <Geth> Â¦ rakudo/atomics: Run new cas tests.

[16:24] <Geth> Â¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/0155358517

[16:41] <AlexDaniel> .seen perlpilot

[16:41] <yoleaux> I saw perlpilot 2 Aug 2017 17:52Z in #perl6: <perlpilot> Altreus: gist works

[17:59] <nine> jnthn: functions are much easier to replace in a lexical scope, i.e. a new language version. So when in doubt about an API, functions are a less risky way.

[18:16] <samcv> AlexDaniel, that RT is probably not caused by me. i made changes which fixed a bug in ignoremark

[18:16] <samcv> ignoremark used to match if the first two codepoints in the needle were a match (no matter what else was in the needle)

[18:16] <samcv> so 'hello' ~~ /:m hem/ would match

[18:16] <samcv> i will reply to the RT after i make some tea

[18:17] <samcv> RT if anyone curious https://rt.perl.org/rt3/Public/Bug/Display.html?id=131881

[18:18] <samcv> though i maybe commited some other fixes that i will have to check

[18:24] <samcv> ah no i haven't made a fix another location yet. not sure if it will fix this. it is possible? i will see in a bit.

[18:24] <samcv> tea &

[18:27] <jnthn> nine: Good point, though in this case I'd expect it to be relatively low-risk; this is epxosing rather well-defined primitives. :)

[18:28] <jnthn> But yeah, I guess functions are more natural than methods always called on a type object

[18:50] <pmurias> function calls are easier to optimize too

[18:54] <jnthn> That also

[18:54] <samcv> AlexDaniel, so that bug is going to be fixed, just running spectest on everything. full details on squashing in #moarvm

[18:54] <jnthn> Don't need the speculative opt

[18:56] <samcv> NeuralAnomaly, staus

[18:56] <samcv> NeuralAnomaly, status

[18:56] <NeuralAnomaly> samcv, [?] Next release will be in 4 days and 9 hours. Since last release, there are 49 new still-open tickets (2 unreviewed and 3 blockers) and 156 unreviewed commits. See http://perl6.fail/release/stats for details

[19:11] <Geth> Â¦ nqp: 63d534d6ab | (Samantha McVey)++ | tools/build/MOAR_REVISION

[19:11] <Geth> Â¦ nqp: Bump MoarVM to get ignoremark fixes and other changes

[19:11] <Geth> Â¦ nqp:

[19:11] <Geth> Â¦ nqp: Full list of changes brought in:

[19:11] <Geth> Â¦ nqp: 712cff33 Fix a bug in index/eqat(im) and in ord_getbasechar

[19:11] <Geth> Â¦ nqp: 3e3f66ea Cleanup typos, formatting, etc in comments

[19:11] <Geth> Â¦ nqp: 7c4150f5 Cleanup typos, formatting, etc in comments

[19:11] <Geth> Â¦ nqp: 29d48d99 Cleanup typo in comments

[19:11] <Geth> Â¦ nqp: <â¦commit message has 16 more linesâ¦>

[19:11] <Geth> Â¦ nqp: review: https://github.com/perl6/nqp/commit/63d534d6ab

[19:11] <Geth> Â¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.07-378-g5e94da0...2017.07-403-g712cff33

[19:16] <Geth> Â¦ rakudo/nom: 7b81f0f996 | (Samantha McVey)++ | tools/build/NQP_REVISION

[19:16] <Geth> Â¦ rakudo/nom: Bump Moar/NQP for ignoremark fixes

[19:16] <Geth> Â¦ rakudo/nom:

[19:16] <Geth> Â¦ rakudo/nom: NQP changes brought in:

[19:16] <Geth> Â¦ rakudo/nom: 63d534d6a Bump MoarVM to get ignoremark fixes and other changes

[19:16] <Geth> Â¦ rakudo/nom: fff99261e Design/document soon-to-be-added atomic ops.

[19:16] <Geth> Â¦ rakudo/nom: 980ea2684 [js] Make nqp::readfh work on stdin

[19:16] <Geth> Â¦ rakudo/nom:

[19:16] <Geth> Â¦ rakudo/nom: <â¦commit message has 23 more linesâ¦>

[19:16] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7b81f0f996

[19:16] <Geth> Â¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-33-g1d2f0fe...2017.07-37-g63d534d6a

[19:19] <Geth> Â¦ roast: c185acc57a | (Samantha McVey)++ | S05-modifier/ignoremark.t

[19:19] <Geth> Â¦ roast: Add ignoremark tests to cover JSON::Tiny regression + other issue

[19:19] <Geth> Â¦ roast:

[19:19] <Geth> Â¦ roast: Synthetics with decomposable base characters properly work with ignoremark

[19:19] <Geth> Â¦ roast: \c[LATIN SMALL LETTER J WITH CARON, COMBINING DOT BELOW]" ~~ /:m:i j /

[19:19] <Geth> Â¦ roast: Since letter j with caron is one codepoint. It used to not decompose it.

[19:19] <Geth> Â¦ roast:

[19:19] <Geth> Â¦ roast: With latest MoarVM changes this is fixed, as well as the JSON::Tiny regression.

[19:19] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/c185acc57a

[19:31] <samcv> moritz, the JSON::Tiny bug should be fixed now

[19:31] <moritz> samcv: thanks!

[19:33] <lizmat> FWIW, I will fix t/spec/S03-junctions/autothreading.t issues tomorrow

[19:33] <samcv> you're very welcome moritz

[20:05] <Geth> Â¦ roast: 8e1f6718ab | pmurias++ | S04-statements/sink.t

[20:05] <Geth> Â¦ roast: Test that we don't sink things in containers

[20:05] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/8e1f6718ab

[20:22] <pmurias> hmm, how can I add a sink method to a Proxy (or any other container) and still have it remain usable as a container

[20:24] <lizmat> but role { method sink { } }

[20:54] <AlexDaniel> releasable6: status

[20:54] <releasable6> AlexDaniel, Next release in 4 days and ?22 hours. 3 blockers. Changelog for this release was not started yet

[20:54] <releasable6> AlexDaniel, Details: https://gist.github.com/03d0c3bbcd3b966773b2432056b27da3

[20:54] <AlexDaniel> kinda like this

[21:04] <perlpilot> AlexDaniel: what's up?

[21:04] <yoleaux> 7 Aug 2017 21:08Z <AlexDaniel> perlpilot: https://github.com/perlpilot/p6-sake/pull/6 plz

[21:05] <perlpilot> ah

[21:05] <AlexDaniel> :)

[21:05] <perlpilot> though, I'm clearly behind the curve a little bit in what's going on  :)

[21:07] <perlpilot> EVALFILE doesn't require some MONKEY-THING?

[21:07] <AlexDaniel> perlpilot: hm, that's an interesting question, but nope

[21:12] <AlexDaniel> perlpilot: there's one more pull request that I'd love to see merged, btw :)

[21:14] <perlpilot> AlexDaniel++

[21:15] <AlexDaniel> thanks!

[21:24] <samcv> releasable6, status

[21:24] <releasable6> samcv, Next release in 4 days and ?21 hours. 3 blockers. Changelog for this release was not started yet

[21:24] <releasable6> samcv, Details: https://gist.github.com/eb9a23d677af0303c7e2522287e8dc5b

[21:25] <samcv> hm wonder how long it takes to update. i just closed one of the blockers

[21:26] <AlexDaniel> samcv: blockers are taken from https://perl6.fail/ and the list is maintained manually there

[21:26] <AlexDaniel> samcv: I'll do something about it, maybe, but later

[21:27] <AlexDaniel> samcv: by the way, any tests for that ticket?

[21:27] <samcv> yes

[21:28] <samcv> :)

[21:28] <AlexDaniel> ah, I see already

[21:28] <AlexDaniel> samcv: great, thanks!

[21:28] <AlexDaniel> releasable6, status

[21:28] <releasable6> AlexDaniel, Next release in 4 days and ?21 hours. 1 blocker. Changelog for this release was not started yet

[21:28] <releasable6> AlexDaniel, Details: https://gist.github.com/19ebdeca33f069a41ec04f046dd0924c

[21:30] <samcv> nice so do we have all blockers resolvd then?

[21:31] <AlexDaniel> samcv: I misclickedâ¦ :)

[21:31] <AlexDaniel> releasable6: status

[21:31] <releasable6> AlexDaniel, Next release in 4 days and ?21 hours. 2 blockers. Changelog for this release was not started yet

[21:31] <releasable6> AlexDaniel, Details: https://gist.github.com/99392a3652831427fa1ed2a2e55672b4

[21:31] <AlexDaniel> this one is right

[21:31] <AlexDaniel> the memory issue thingâ¦ I just tested it. It got better, but it's still leaking

[21:32] <AlexDaniel> let's see if I can reproduce the leak with the provided exampleâ¦

[21:35] <AlexDaniel> yeah, I can. But it's less severe

[21:35] <samcv> is it a really bad memory leak? (is/was?)

[21:36] <AlexDaniel> it was horrible, yes. Currently not that much

[21:37] <AlexDaniel> in fact, I'm not sure if it was perfectly clean before it got worse

[21:41] <samcv> hm

[22:02] <jnthn> AlexDaniel: I'll try and take care of https://rt.perl.org/Public/Bug/Display.html?id=131857 this week

[22:03] <AlexDaniel> jnthn: ok! Thanks

[22:04] <AlexDaniel> jnthn: regarding RT #131879, I just reverted my commits that increased timeouts for bot tests (which is how I initially noticed the issue), everything is fine

[22:04] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131879

[22:04] <AlexDaniel> jnthn: so it is still leaking, noticeably but not too significantly, so I don't think that many people will notice it. Therefore, it's OK

[22:04] <jnthn> OK, guess that'll do for now then :)

[22:06] <AlexDaniel> releasable6: status

[22:06] <releasable6> AlexDaniel, Next release in 4 days and ?20 hours. 1 blocker. Changelog for this release was not started yet

[22:06] <releasable6> AlexDaniel, Details: https://gist.github.com/ee20b024b14c5c6491bdcc6d9ddae0d8

[22:06] <AlexDaniel> alright

[22:12] <lizmat> AlexDaniel++  # welcome to the core team

[22:12] <lizmat> AlexDaniel: shouldn't you be in CREDITS now ??

[22:13] <AlexDaniel> lizmat: \o/ thanks

[22:16] <AlexDaniel> lizmat: I never wondered what's the criteria for inclusion there

[22:16] <lizmat> well, having a commit bit definitely means you should be in there  :-)

[22:16] <AlexDaniel> alright I'll add myself then

[22:22] <Geth> Â¦ rakudo/nom: 29e41b45fa | (Aleks-Daniel Jakimenko-Aleksejev)++ | CREDITS

[22:22] <Geth> Â¦ rakudo/nom: Add myself to CREDITS

[22:22] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/29e41b45fa

[22:26] <lizmat> AlexDaniel++  :-)

[22:34] <AlexDaniel> by the way, the release process will be a little bit different this time. Still automated and awesome, but different

[22:34] <AlexDaniel> I'm doing some tests right now, so more info on that later

[22:53] <Geth> Â¦ rakudo/nom: 231cb3f5fe | (Jonathan Worthington)++ | src/core/IO/Path.pm

[22:53] <Geth> Â¦ rakudo/nom: Fix bad assumption about methods being closures.

[22:53] <Geth> Â¦ rakudo/nom:

[22:53] <Geth> Â¦ rakudo/nom: They're not, since they're looked up via a table in the meta-object.

[22:53] <Geth> Â¦ rakudo/nom: Thus this could cause data races when paths were being manipulated

[22:53] <Geth> Â¦ rakudo/nom: from different threads.

[22:53] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/231cb3f5fe

[22:54] <jnthn> That caused some pretty weird errors :P

[23:02] <lizmat> and another issue of the Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/08/14/2017-33-in-review/

[23:05] <lizmat> good night, #perl6-dev!

[23:10] <Zoffix> lizmat++ # good weekly

[23:15] * TimToady waves from mountain view

[23:22] * timotimo waves views from wave mountain
