[00:16] <Zoffix> ❗❗❗🌟🌟🌟❇️❇️❇️🌠🌠🌠🎉🎉🎉⚠️⚠️⚠️🚧🚧🚧🌈🌈🌈

[00:16] <Zoffix> 

[00:16] <Zoffix> PART 2: Upgrade Information for Changes Due to IO Grant Work: http://rakudo.org/2017/04/03/part-2-upgrade-information-for-changes-due-to-io-grant-work/

[00:16] <Zoffix> 

[00:16] <Zoffix> ❗❗❗🌟🌟🌟❇️❇️❇️🌠🌠🌠🎉🎉🎉⚠️⚠️⚠️🚧🚧🚧🌈🌈🌈

[00:21] <MasterDuke> Zoffix++

[00:27] <AlexDaniel> scary shit going on right there! But that's much better than having another newio branch wasted

[00:27] <AlexDaniel> Zoffix++

[00:35] <AlexDaniel> hm, so I guess cat is not going to happen now? https://design.perl6.org/S32/Containers.html#List

[00:36] <AlexDaniel> otherwise it may be confused with IO::Cat, no?

[00:36] <Zoffix> That's Cat, not IO::Cat

[00:37] <Zoffix> And they have similarities: "lazily treat content of a list of strings as one" vs "lazily treat content of a list of file handles as one"

[00:39] <Zoffix> m: class IO::Cat {}.gist.put # maybe in this way tho

[00:39] <camelia> rakudo-moar dcebce: OUTPUT: «(Cat)␤»

[00:39] <Zoffix> IO::CatHandle it is!

[00:43] <mst> that's a filehandle that mostly sleep()s when you try to get it to do anything, right?

[00:44] <Zoffix> heh

[01:39] <Geth> ¦ roast: d052285878 | (Zoffix Znet)++ | S32-io/indir.t

[01:39] <Geth> ¦ roast: Actually make use of test's description

[01:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d052285878

[01:39] <Geth> ¦ roast: 04333b3baa | (Zoffix Znet)++ | S32-io/indir.t

[01:39] <Geth> ¦ roast: [io grant] Test &indir fails with non-existent paths by default

[01:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/04333b3baa

[02:28] <Geth> ¦ roast: 73a54489fe | (Zoffix Znet)++ | S32-io/chdir.t

[02:28] <Geth> ¦ roast: [io grant] Remove two fudged &chdir tests

[02:28] <Geth> ¦ roast:

[02:28] <Geth> ¦ roast: They were fudged 5 years ago. Seems the intent is to check chdir for

[02:28] <Geth> ¦ roast: non-existent path fails and not throws, but one test wouldn't work now

[02:28] <Geth> ¦ roast: even if it were unfudged as a sunk Failure would explode.

[02:28] <Geth> ¦ roast:

[02:28] <Geth> ¦ roast: Testing of this functionality will be subsumed by the new tests,

[02:28] <Geth> ¦ roast: to be added shorly.

[02:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/73a54489fe

[03:03] <Geth> ¦ roast: a627e59226 | (Zoffix Znet)++ | S32-io/indir.t

[03:03] <Geth> ¦ roast: Fix incorrect order of arguments to indir test

[03:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a627e59226

[03:05] <Zoffix> Spectest never really feels that slow, until you're in a rush :o

[03:06] * Zoffix enables speed mode

[03:07] <Zoffix> R is aliased to `for i in `git diff --name-only`; do echo $i; scp $i [email@hidden.address] done;'

[03:07] <Zoffix> And same for roast files :) And then I just shift-tab to terminal on fast VM and run spectest fast, while still able to edit in Atom :)

[03:08] <Zoffix> (moments like this make me a bit jealous of people who like to use vi for coding)

[03:10] <Geth> ¦ rakudo/nom: 2483d68941 | (Zoffix Znet)++ | src/core/io_operators.pm

[03:10] <Geth> ¦ rakudo/nom: [io grant] Fix regression in &chdir's failure mode

[03:10] <Geth> ¦ rakudo/nom:

[03:10] <Geth> ¦ rakudo/nom: Yesterday's improvement used `.= chdir` to change the CWD, but that means

[03:10] <Geth> ¦ rakudo/nom: on failure mode, $*CWD ends up containing a Failure object. Fix by

[03:10] <Geth> ¦ rakudo/nom: returning Failures as is and assigning to $*CWD only on successes.

[03:10] <Geth> ¦ rakudo/nom:

[03:10] <Geth> ¦ rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/a0ef2ed6ff0408bd4b18086a12

[03:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2483d68941

[03:11] <Geth> ¦ roast: 86f79ce194 | (Zoffix Znet)++ | S32-io/chdir.t

[03:11] <Geth> ¦ roast: [io grant] Expand &chdir tests

[03:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/86f79ce194

[04:12] <Geth> ¦ rakudo/nom: 5464b82007 | (Zoffix Znet)++ | src/core/io_operators.pm

[04:12] <Geth> ¦ rakudo/nom: [io grant] Improve &*chdir

[04:12] <Geth> ¦ rakudo/nom:

[04:12] <Geth> ¦ rakudo/nom: - fail() not throw()

[04:12] <Geth> ¦ rakudo/nom: - return $*CWD, just like &chdir does

[04:12] <Geth> ¦ rakudo/nom: - Coerce argument to IO::Path instead of Str and use its .absolute as new CWD.

[04:12] <Geth> ¦ rakudo/nom:     This prevents accidental use of wrong path to chdir to when given some

[04:12] <Geth> ¦ rakudo/nom:     IO::Path objects, since ther .Str does not take its $!CWD into account

[04:12] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5464b82007

[04:12] <Geth> ¦ roast: 430ab897a8 | (Zoffix Znet)++ | S32-io/chdir-process.t

[04:12] <Geth> ¦ roast: [io grant] Test &*chdir

[04:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/430ab897a8

[04:22] <Geth> ¦ rakudo/nom: 4c31903e93 | (Zoffix Znet)++ | t/spectest.data

[04:22] <Geth> ¦ rakudo/nom: [io grant] Add S32-io/chdir-process.t to list of test files to run

[04:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4c31903e93

[04:48] <Geth> ¦ roast: b41a8ad41a | (Zoffix Znet)++ | S02-types/int-uint.t

[04:48] <Geth> ¦ roast: Unfudge passing int64 tests

[04:48] <Geth> ¦ roast:

[04:48] <Geth> ¦ roast: The fudge line covers more than just the newly-passing test, so

[04:48] <Geth> ¦ roast: duplicate the test in an if/else branch to just fudge it for tests

[04:48] <Geth> ¦ roast: that are not for int64

[04:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b41a8ad41a

[04:58] <Zoffix> ZOFVM: Files=1231, Tests=133141, 112 wallclock secs (21.36 usr  3.09 sys + 2340.76 cusr 126.00 csys = 2491.21 CPU)

[05:06] <Zoffix> ZOF6VM: Files=1231, Tests=133141,  224 wallclock secs

[06:29] <Geth> ¦ nqp: e5f9b825c3 | (Samantha McVey)++ | 2 files

[06:29] <Geth> ¦ nqp: Better Configure.pl errors when finding a MoarVM binary w/o version

[06:29] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e5f9b825c3

[06:29] <Geth> ¦ nqp: 097acbfe77 | (Samantha McVey)++ | tools/lib/NQP/Configure.pm

[06:29] <Geth> ¦ nqp: blah

[06:29] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/097acbfe77

[06:30] <samcv> oops. RE 2nd commit

[06:30] <samcv> oh well. i tried to Ctrl + C

[06:31] <samcv> was having a problem using ./Configure.pl in nqp. so now i added new error detection so it will tell you if your MoarVM doesn't supply a version but works and need to checkout tags and recompile

[06:31] <samcv> and made the specific errors display at the top instead of at the bottom so easier to find the most relevant info.

[06:50] <[Tux]> This is Rakudo version 2017.03-115-g4c31903e9 built on MoarVM version 2017.03-88-g21fc7a22

[06:50] <[Tux]> csv-ip5xs        3.229

[06:50] <[Tux]> test            12.392

[06:50] <[Tux]> test-t           4.843 - 5.029

[06:50] <[Tux]> csv-parser      13.011

[09:17] <dogbert17> hmm, there are several spectest failures

[09:17] * dogbert17 suspect IOninja++ doing io work

[09:37] <lizmat> Files=1181, Tests=56159, 204 wallclock secs (12.14 usr  4.81 sys + 1208.52 cusr 116.91 csys = 1342.38 CPU)

[09:38] <lizmat> yes, indeed

[10:05] <dogbert17> nqp: blah    :)

[10:05] <camelia> nqp-moarvm: OUTPUT: «Confused at line 2, near "blah    :)"␤   at gen/moar/stage2/NQPHLL.nqp:765  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQP.nqp:915  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/nqp.moarvm:comp_unit)␤ from gen/mo…»

[10:32] <Geth> ¦ rakudo/nom: 5ae454976b | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[10:32] <Geth> ¦ rakudo/nom: Streamline generic handling of (<+) (>+)

[10:32] <Geth> ¦ rakudo/nom:

[10:32] <Geth> ¦ rakudo/nom: Making it about 15% faster: mostly because of using .AT-KEY, thereby

[10:32] <Geth> ¦ rakudo/nom: skipping the {} step.

[10:32] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5ae454976b

[11:07] <Geth> ¦ roast: 47581980e1 | (Pawel Murias)++ | S02-lexical-conventions/unicode.t

[11:07] <Geth> ¦ roast: [js] Fudge lack of full unicode support

[11:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/47581980e1

[12:04] <Geth> ¦ nqp/master: 5 commits pushed by (Pawel Murias)++

[12:04] <Geth> ¦ nqp/master: b3e2458e8b | Fix find(not)cclass test

[12:04] <Geth> ¦ nqp/master: 2d24655ce1 | Test the cclass ops with EN QUAD and EM QUAD

[12:04] <Geth> ¦ nqp/master: ffea966e75 | [js] Fix nqp::iscclass with NEWLINE

[12:04] <Geth> ¦ nqp/master: 48888d7580 | [js] Fix dynamic variable use inside nqp::handle

[12:04] <Geth> ¦ nqp/master: 0c7704f8cd | [js] Make nqp::assign work on native references

[12:04] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/097acbfe77...0c7704f8cd

[12:13] <Geth> ¦ rakudo/nom: b64f210c7f | (Elizabeth Mattijsen)++ | 2 files

[12:13] <Geth> ¦ rakudo/nom: Add internal raw_hash method to Setty/Baggy

[12:13] <Geth> ¦ rakudo/nom:

[12:13] <Geth> ¦ rakudo/nom: To allow set operators access to internals, so that we can speed up

[12:13] <Geth> ¦ rakudo/nom: the common cases by orders of magnitude.

[12:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b64f210c7f

[12:30] <lizmat> hmmm... isn't (>+) the same as R(<+) ?

[12:46] <lizmat> m: class A { method succ() { ^42 .pick } }; say (A .. *).head(10)   # wonder if this is a bug

[12:46] <camelia> rakudo-moar b64f21: OUTPUT: «((A) 27 28 29 30 31 32 33 34 35)␤»

[12:46] <lizmat> or a DIHWIDT

[12:48] <Geth> ¦ rakudo/nom: 1277fb5875 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[12:48] <Geth> ¦ rakudo/nom: Simplify (>+) as it is just R(<+)

[12:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1277fb5875

[12:49] <[Coke]> Zoffix: I ended up not having time to review. I hope you got some feedback on your IO stuff.

[12:52] <jnthn> lizmat: What would the bug be? :)

[12:53] <jnthn> But yeah, I think the doctor would be like "stop taking that stuff" :P

[13:04] <Geth> ¦ rakudo/nom: 224e40f22f | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[13:04] <Geth> ¦ rakudo/nom: Make Setty (<+)/(>+) Setty at least 25x faster

[13:04] <Geth> ¦ rakudo/nom:

[13:04] <Geth> ¦ rakudo/nom: - this is for worst case in identical Sets of 26 strings

[13:04] <Geth> ¦ rakudo/nom: - no need to re-calculate .WHICH, so still faster for expensive .WHICHes

[13:04] <Geth> ¦ rakudo/nom: - shortcuts for empty Settys and Settys with different number of elements

[13:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/224e40f22f

[13:06] <Zoffix> dogbert17: what sort of failures? There should be no failures on HEAD

[13:15] <lizmat> Zoffix: t/spec/S32-io/chdir-process.t 2-4

[13:15] <lizmat> t/spec/S32-io/indir.t  10-21, 26, 28-29, 31, 34, 36, 38, 40, 42-43, 50, 52, 58, 62, 66

[13:16] <lizmat> seeing them since sometime last night, possibly earlier

[13:18] <dogbert17> Zoffix: what lizmat said

[13:20] * dogbert17 can retry in a bit

[13:23] <Zoffix> lizmat: and yet no faiures in t/spec/S32-io/chdir.t?

[13:23] * lizmat checks

[13:24] <Zoffix> That's really weird. Based on the numbers, looks like something to do with $*TMPDIR, but chdir.t does use it just as indir.t does :/

[13:24] <lizmat> t/spec/S32-io/chdir.t is ok

[13:24] <Zoffix> :S

[13:25] <lizmat> I think symlinks are involved

[13:25] <lizmat> expected: '/var/folders/7_/ndrzv7y14fj0zxjx3fy0hfjm0000gn/T/

[13:25] <lizmat> got: /private/var/folders/7_/ndrzv7y14fj0zxjx3fy0hfjm0000gn/T

[13:26] <Zoffix> lizmat: which test is that? one of chdir-proccess.t ones?

[13:26] <lizmat> /var is a symlink to /private/var on MacOS apparently

[13:26] <lizmat> yeah

[13:27] <Zoffix> OK, I'll try making my $*TMPDIR a symlink and see if it explodes

[13:27] <lizmat> so perhaps chdirring to a symlink is borked ?

[13:27] <lizmat> (or at least the test is borked :-)

[13:29] <dogbert17> All tests successful.

[13:29] <dogbert17> Files=1169, Tests=55610,  423 wallclock secs

[13:29] <dogbert17> Result: PASS

[13:29] <dogbert17> that's with 3 cores

[13:35] <Geth> ¦ roast: bc1c3a56c4 | (Zoffix Znet)++ | S32-io/chdir-process.t

[13:35] <Geth> ¦ roast: Fix tests to work right when $*TMPDIR/$*HOME are a symlink

[13:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bc1c3a56c4

[13:35] <Zoffix> That fixes chdir-process...

[13:35] * Zoffix looks at indir ones

[13:38] <Geth> ¦ rakudo/nom: 38b341aec8 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[13:38] <Geth> ¦ rakudo/nom: Make Mixy (<+)/(>+) Mixy at least 5x faster

[13:38] <Geth> ¦ rakudo/nom:

[13:38] <Geth> ¦ rakudo/nom: - this is for worst case in identical Mixes of 26 strings

[13:38] <Geth> ¦ rakudo/nom: - no need to re-calculate .WHICH, so still faster for expensive .WHICHes

[13:38] <Geth> ¦ rakudo/nom: - shortcuts for empty Mixes and Mixes with different number of elements

[13:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/38b341aec8

[13:40] <Zoffix> Can't repro the issue there.

[13:41] <Zoffix> lizmat: would you pastebin output of t/fudgeandrun t/spec/S32-io/indir.t  ? I wanna see details of what fails and what was expected.

[13:45] <lizmat> Zoffix: https://gist.github.com/lizmat/7b2ee0a9abd1b234bd8c2c2e47823c93

[13:46] <Zoffix> Thanks.

[14:01] <Geth> ¦ roast: e03ccac0b4 | (Zoffix Znet)++ | packages/Test/Util.pm

[14:01] <Geth> ¦ roast: Make make-temp-[file|dir] fully resolve $*TMPDIR

[14:01] <Geth> ¦ roast:

[14:01] <Geth> ¦ roast: This prevents problems when $*TMPDIR is a symlink and, say, is

[14:01] <Geth> ¦ roast: used someplace to make a path relative to it. If the symlink is not

[14:01] <Geth> ¦ roast: the same level as the actual temp dir, the relativenes will have

[14:01] <Geth> ¦ roast: too few/too many steps in it.

[14:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e03ccac0b4

[14:01] <Zoffix> lizmat: that fixes it.

[14:05] <lizmat> :-)

[14:06] <Geth> ¦ rakudo/nom: 928a406a8e | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[14:06] <Geth> ¦ rakudo/nom: Make Baggy (<+)/(>+) Baggy at least 6x faster

[14:06] <Geth> ¦ rakudo/nom:

[14:06] <Geth> ¦ rakudo/nom: - this is for worst case in identical Bags of 26 strings

[14:06] <Geth> ¦ rakudo/nom: - no need to re-calculate .WHICH, so still faster for expensive .WHICHes

[14:06] <Geth> ¦ rakudo/nom: - shortcuts for empty Bags and Bags with different number of elements

[14:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/928a406a8e

[14:06] <timotimo> nice.

[14:31] <Geth> ¦ rakudo/nom: 1ebeeb382c | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[14:31] <Geth> ¦ rakudo/nom: Broaden acceptance in (<+)/(>+)

[14:31] <Geth> ¦ rakudo/nom:

[14:31] <Geth> ¦ rakudo/nom: - all Quanthashes can be considered Settys for (<+)/(>+)

[14:31] <Geth> ¦ rakudo/nom: - all Baggys can be considered Mixys for (<+)/(>+)

[14:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ebeeb382c

[14:31] <lizmat> afk for a few hours&

[15:18] <Geth> ¦ roast: 86c5f9c4a4 | (Zoffix Znet)++ | S32-io/path.t

[15:18] <Geth> ¦ roast: [io grant] Delete qp{} tests

[15:18] <Geth> ¦ roast:

[15:18] <Geth> ¦ roast: This file is currently not being run and the 4 qp{} tests test a

[15:18] <Geth> ¦ roast: non-existent feature. We likely won't want that feature ever anyway,

[15:18] <Geth> ¦ roast: as ''.IO is much clearer and is just 1 extra character to type.

[15:18] <Geth> ¦ roast:

[15:18] <Geth> ¦ roast: The file will be repurposed for generic IO::Path tests.

[15:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/86c5f9c4a4

[15:28] <[Coke]> Zoffix++ #cleanups galore.

[15:37] <Geth> ¦ roast: 3c4e81b656 | (Zoffix Znet)++ | S32-io/path.t

[15:37] <Geth> ¦ roast: [io grant] Test IO::Path.Str works as advertised

[15:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3c4e81b656

[15:40] <Geth> ¦ roast: ba3e7be375 | (Zoffix Znet)++ | 2 files

[15:40] <Geth> ¦ roast: [io grant] Merge S32-io/path.t and S32-io/io-path.t

[15:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ba3e7be375

[15:46] <Zoffix> Oh shit. It's my bday \o/

[15:46] * Zoffix leaves to bake celebratory chicken wings and play celebratory video games

[15:47] <[Coke]> Zoffix: happy birthday, youngster.

[15:47] <perlpilot> Zoffix: happy birthday!  :)

[15:47] <Zoffix> Thanks.

[16:19] <stmuk> m: say "\c[BIRTHDAY CAKE]"

[16:19] <yoleaux2> 23 Jan 2017 23:32Z <samcv> stmuk: can you syndicate my perl 6 blog o/ pl6net? feed https://cry.nu/feed.xml

[16:19] <camelia> rakudo-moar 1ebeeb: OUTPUT: «🎂␤»

[16:53] <timotimo> happy birthday Zoffix!

[18:53] <Zoffix> Thanks.

[18:53] <Zoffix> Time for some celebratory hacking \o/

[19:18] <perlpilot> Zoffix++  you really know how to celebrate!  :-)

[19:18] <Zoffix> :)

[19:25] <samcv> oh i said that a while ago. hello stmuk

[19:26] <Geth> ¦ rakudo/nom: cb27bce745 | (Zoffix Znet)++ | 2 files

[19:26] <Geth> ¦ rakudo/nom: [io grant] Clean up &open and IO::Path.open

[19:26] <Geth> ¦ rakudo/nom:

[19:26] <Geth> ¦ rakudo/nom: The dance with $handle and .throw is pointless as .new will never

[19:26] <Geth> ¦ rakudo/nom: return a  :U thing.

[19:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb27bce745

[19:30] <samcv> time to put my birthday present in my laptop to get double cores :)

[19:31] <samcv> also happy bday Zoffix

[19:31] <Zoffix> Thanks.

[19:31] <samcv> be back once i have multiplied :-)

[19:31] <Zoffix> hbday to you too

[19:32] <samcv> you too :-)

[19:39] <vendethiel> .oO( I guess we should avoid incrementing Zoffix too often )

[19:40] <vendethiel> (happy bday, Zoffix++)

[21:17] <stmuk> samcv: yes maybe the bot was lagged .. your blog was syndicated anyway!

[21:26] <lizmat> stmuk: was it ?  I don't seem to see it ?

[21:28] <lizmat> samcv is taking a lot of time to multiply  :-(   Hope all is well!

[21:32] <timotimo> it's vendethiel!

[22:19] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/04/03/2017-14-the-io-front-advances/

[22:29] * lizmat gets some sleep

[22:29] <timotimo> gnite lizmat!

[22:39] * samcv has now multiplied

[22:40] <samcv> heh and since my TEST_JOBS env var is based on nproc + 1 and so is make, don't even have to touch anything

[22:41] <timotimo> nice

[22:45] <samcv> 2->4 cores; 2.6->2.7Ghz base; and 3.3->3.7Ghz max freq

[22:45] <samcv> nice that's a pretty huge jump in max frequency

[22:45] <samcv> double the cache

[22:47] <timotimo> nice.

[22:48] <timotimo> but isn't the max only achievable when you're using just a single core?

[22:48] <timotimo> i'm not sure how this "turboboost" stuff works

[22:49] <samcv> i don't think so

[22:49] <timotimo> excruciating to watch an appveyor build do its thing when you're not yet sure if the config is correct ...

[22:50] <samcv> heh

[22:50] <timotimo> NMAKE : fatal error U1065: invalid option 'j'

[22:50] <timotimo> GGGAAAAAHHHHHhhhhhh

[22:50] <samcv> i know that feel

[22:51] <timotimo> it boggles my mind that there are people who develop using windows like ... by choice

[22:52] <Zoffix> lizmat++ good weekly

[22:52] <samcv> making rakudo is not much faster

[22:53] <samcv> but running the tests should hopefully take half the time now

[22:59] <timotimo> yeah, should

[22:59] <timotimo> i heard using the harness5 is also noticably faster than the harness6

[23:07] <samcv> i never did end up getting a camelia sticker

[23:08] <timotimo> t\nqp/019-file-ops.t                 (Wstat: 0 Tests: 104 Failed: 0)

[23:08] <timotimo> Parse errors: Bad plan.  You planned 107 tests but ran 104.

[23:08] <timotimo> t\qregex/01-qregex.t                 (Wstat: 0 Tests: 781 Failed: 0)

[23:08] <timotimo> TODO passed:   342

[23:08] <timotimo> t\moar/08-indexic.t                  (Wstat: 0 Tests: 97 Failed: 0)

[23:08] <timotimo> TODO passed:   10

[23:08] <timotimo> i wonder what that's all about

[23:37] <timotimo> how do i get the tests to be verbose on windows with nmake?

[23:37] <timotimo> i believe we have a VERBOSE=1 flag or something?

[23:38] <samcv> uh

[23:39] <samcv> timotimo, you want `nmake -n`

[23:39] <samcv> `nmake -n spectest`

[23:39] <samcv> and then it'll give you the command that it runs, then you can type that in with verbose

[23:39] <samcv> that's what I do

[23:39] <samcv> verified nmake does have that option

[23:41] <timotimo> no i want the prove to not swallow all the test descriptions

[23:47] <samcv> cool https://cry.nu/coverage/is now dated and shows the nqp version and moarvm version

[23:47] <samcv> and it *should* also tell you if there are failed tests below where the date is

[23:48] <samcv> and it would be nice if the links on the right frame would open on the left

[23:48] <timotimo> target="_name_of_right_frame"

[23:49] <samcv> yeah

[23:49] <samcv> the boxes were resizeable but i broke it

[23:49] <timotimo> :S

[23:49] <samcv> they look resizeable at least. that's half way there

[23:49] <timotimo> will nmake -n actually give me the output from all those tests?

[23:49] <samcv> it will tell you the command that runs so you can modify it

[23:49] <samcv> to be verbose

[23:50] <timotimo> oh

[23:50] <timotimo> we have test-loud
