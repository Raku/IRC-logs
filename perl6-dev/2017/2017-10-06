[00:46] <Geth> ¦ rakudo/nom: e2ec569b7c | (Zoffix Znet)++ | src/core/IO/Handle.pm

[00:46] <Geth> ¦ rakudo/nom: Implement IO::Handle.slurp(:bin)

[00:46] <Geth> ¦ rakudo/nom:

[00:46] <Geth> ¦ rakudo/nom: During IO::Grant, we removed :bin from .slurp-rest, because it

[00:46] <Geth> ¦ rakudo/nom: mutated the handle's encoding. After the Deasyncing of IO, we

[00:46] <Geth> ¦ rakudo/nom: clarified the spec in that it was allowed to use binary read methods

[00:46] <Geth> ¦ rakudo/nom: on non-bin handles. With that in mind, re-adding a

[00:46] <Geth> ¦ rakudo/nom: non-$!encoding-mutating :bin to .slurp aligns the interface with

[00:46] <Geth> ¦ rakudo/nom: other methods and makes it easier to bin-slurp from Proc pipes too.

[00:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e2ec569b7c

[00:46] <Geth> ¦ roast: 1aa8a8ad18 | (Zoffix Znet)++ | S32-io/slurp.t

[00:46] <Geth> ¦ roast: Spec IO::Handle.slurp(:bin)

[00:46] <Geth> ¦ roast:

[00:46] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/e2ec569b7c

[00:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1aa8a8ad18

[00:59] <MasterDuke> Zoffix: i have a suggestion for synopsebot. if the sender is Geth, maybe it should wait until it sees a 'review: <link>' before reporting the RTs. right now it sometimes interrupts long commit messages

[01:02] <Zoffix> ok

[01:02] <Zoffix> .in 21h geth synopsebot

[01:02] <yoleaux> Zoffix: I'll remind you at 22:02Z

[01:39] <Geth> ¦ rakudo/nom: be83cd4ec7 | (Zoffix Znet)++ | src/core/Buf.pm

[01:39] <Geth> ¦ rakudo/nom: Make Blob.gist 40x faster

[01:39] <Geth> ¦ rakudo/nom:

[01:39] <Geth> ¦ rakudo/nom: Not exactly a method that gotta be über fast, but the original takes 50ms

[01:39] <Geth> ¦ rakudo/nom: per single call on a 100+ el buf (for comparison 100+ list takes 3ms)

[01:39] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/be83cd4ec7

[01:39] <Zoffix> $bed.append: $Zoffix

[01:53] <Zoffix> on second thought.....

[01:53] <Geth> ¦ rakudo/nom: 66a01aa827 | (Zoffix Znet)++ | src/core/Buf.pm

[03:50] <travis-ci> Rakudo build failed. Zoffix Znet 'Revert "Make Blob.gist 40x faster"

[03:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/283989608 https://github.com/rakudo/rakudo/compare/be83cd4ec72c...66a01aa827c1

[03:50] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/04-nativecall/13-cpp-mangling.t test file failed.

[06:39] <[Tux]> This is Rakudo version 2017.09-217-g66a01aa82 built on MoarVM version 2017.09.1-553-ga4fef0bd

[06:39] <[Tux]> csv-ip5xs        1.230 -  1.242

[06:39] <[Tux]> test             9.829 -  9.919

[06:39] <[Tux]> test-t           3.255 -  3.319

[06:39] <[Tux]> csv-parser       0.863 -  0.890

[06:39] <[Tux]> CSV::Parser still br0ken

[07:44] <samcv> .tell lizmat i fixed RT132216, where quaternary level was broken in moar blead

[07:44] <yoleaux> samcv: I'll pass your message to lizmat.

[07:44] <synopsebot> RT#132216 [new]: https://rt.perl.org/Ticket/Display.html?id=132216 [UNI] [TESTNEEDED] 'a' coll 'A" not Same but More with disabled tertiary and primary levels

[08:50] <Zoffix> squashable6: status

[08:50] <squashable6> Zoffix, ⚠🍕 Next SQUASHathon in ≈1 hour (2017-10-07 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[08:51] <Zoffix> 1 hour...

[09:12] <Geth> ¦ roast: c9af640c46 | pmurias++ | S02-names/is_default.t

[09:12] <Geth> ¦ roast: Remove fudged tests for a is default(*) on a native variable

[09:12] <Geth> ¦ roast:

[09:12] <Geth> ¦ roast: is default isn't supposed to work on natives

[09:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c9af640c46

[09:22] <Geth> ¦ roast: 73b10388fb | (Samantha McVey)++ | S32-str/Collation.t

[09:22] <Geth> ¦ roast: Add collation tests, testing with $*COLLATION

[09:22] <Geth> ¦ roast:

[09:22] <Geth> ¦ roast: Should add tests to close RT#132216 along with others. Added tag

[09:22] <Geth> ¦ roast: [6.d-REVIEW] in a comment, since it should be reviewed before

[09:22] <Geth> ¦ roast: a 6.d branch is created.

[09:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/73b10388fb

[09:22] <synopsebot> RT#132216 [new]: https://rt.perl.org/Ticket/Display.html?id=132216 [UNI] [TESTNEEDED] 'a' coll 'A" not Same but More with disabled tertiary and primary levels

[09:24] <Geth> ¦ rakudo/nom: 96669c6b0b | (Samantha McVey)++ | t/spectest.data

[09:24] <Geth> ¦ rakudo/nom: Add S32-str/Collation.t to spectest.data

[09:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/96669c6b0b

[10:09] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[10:10] <Geth> ¦ rakudo/nom: 20a99fc3ae | (Zoffix Znet)++ | src/core/Buf.pm

[10:10] <Geth> ¦ rakudo/nom: Make Blob.gist 26x faster

[10:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/20a99fc3ae

[10:14] <Geth> ¦ rakudo/nom: aad8991e2a | (Zoffix Znet)++ | src/core/Map.pm

[10:14] <Geth> ¦ rakudo/nom: Fix Map.perl losing cont / Make Map.gist trim to 100els

[10:14] <Geth> ¦ rakudo/nom:

[10:14] <Geth> ¦ rakudo/nom: Hash, List, and Buf trim .gist to 100 els, do the same for Map

[10:14] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aad8991e2a

[10:15] <Geth> ¦ rakudo/nom: 39461368b5 | (Zoffix Znet)++ | src/core/Hash.pm

[10:15] <Geth> ¦ rakudo/nom: Make Hash.perl/.gist use proper object name in circularities

[10:15] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39461368b5

[10:15] <Geth> ¦ rakudo/nom: 69af24c49e | (Zoffix Znet)++ | src/core/Hash.pm

[10:15] <Geth> ¦ rakudo/nom: Make Hash.gist 24% faster

[10:15] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/69af24c49e

[10:16] <Zoffix> Will commit tests for the above things that need tests in ~12hr

[10:16] * Zoffix &

[10:16] <timotimo> i wonder if .base can be expressed in a simple nqp op that ends up another 10x faster

[10:17] <Zoffix> timotimo: maybe. I just wasn't sure what's the range of typification a Blob's elements could be

[10:17] <Zoffix> m: Blob[num32].new(2e0) # huh?

[10:17] <camelia> rakudo-moar 96669c: OUTPUT: «concatenate requires a concrete string, but got null␤  in any protect at gen/moar/stage2/NQPCORE.setting line 1033␤  in block <unit> at <tmp> line 1␤␤»

[10:18] <travis-ci> Rakudo build passed. Samantha McVey 'Add S32-str/Collation.t to spectest.data'

[10:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/284116894 https://github.com/rakudo/rakudo/compare/66a01aa827c1...96669c6b0b98

[10:18] <timotimo> what, we support num bufs?

[10:35] <Zoffix> timotimo: don't know, hence the .base and not an op :) From role parametarization, I'd guess we support anything a native array can hold

[10:38] <Zoffix> m: use nqp; class Z is repr("VMArray") is array_type(num32) { method new (*@_) { nqp::push(self, $_) for @_ } }.new(2e0, 3e0).say

[10:38] <camelia> rakudo-moar 96669c: OUTPUT: «(signal SEGV)»

[10:38] <Zoffix> Weeeeee \o/

[10:39] <timotimo> whoops.

[10:40] <Zoffix> m: use nqp; nqp::push(class :: is repr("VMArray") {}, 42)

[10:40] <camelia> rakudo-moar 96669c: OUTPUT: «(signal SEGV)»

[10:40] <Zoffix> (no .new)

[10:40] <timotimo> ok, that should be easy to catch

[10:41] <Zoffix> Filed as https://rt.perl.org/Ticket/Display.html?id=132228

[10:41] * Zoffix &

[10:45] <timotimo> it'd be so cool if we had a moar built with debug symbols on camelia and on a segfault it'd immediately spit out the backtrace or something

[10:47] <timotimo> the push opcode doesn't even check concreteness, even though it probably should

[10:47] * timotimo AFK

[11:03] <Geth> ¦ nqp: cb91d63b5f | pmurias++ | 2 files

[11:03] <Geth> ¦ nqp: [js] Throw an exception when we can't find an attribute

[11:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cb91d63b5f

[11:03] <Geth> ¦ nqp: 3a01bcdd0f | pmurias++ | t/nqp/058-attrs.t

[11:03] <Geth> ¦ nqp: Test that we throw an exception for missing attributes with nqp::{get,bind}attr

[11:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3a01bcdd0f

[11:03] <Geth> ¦ nqp: 759496d50f | pmurias++ | src/vm/js/nqp-runtime/reprs.js

[11:03] <Geth> ¦ nqp: [js] Make MultiDimArray compose be able to take Perl 6 level ints

[11:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/759496d50f

[11:09] <travis-ci> Rakudo build passed. Zoffix Znet 'Make Blob.gist 26x faster'

[11:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/284134258 https://github.com/rakudo/rakudo/compare/96669c6b0b98...20a99fc3aef0

[11:15] <lizmat> Files=1226, Tests=75559, 348 wallclock secs (14.86 usr  5.43 sys + 2443.96 cusr 226.24 csys = 2690.49 CPU)

[11:15] <yoleaux> 06:22Z <teatime> lizmat: the link "the issues at hand" on latest weekly is broken.

[11:15] <yoleaux> 07:44Z <samcv> lizmat: i fixed RT132216, where quaternary level was broken in moar blead

[11:15] <yoleaux> 09:05Z <teatime> lizmat: looks like because I'm not logged in; this works even if logged out:  https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aperl6+label%3AHacktoberfest

[11:15] <synopsebot> RT#132216 [new]: https://rt.perl.org/Ticket/Display.html?id=132216 [UNI] [TESTNEEDED] 'a' coll 'A" not Same but More with disabled tertiary and primary levels

[11:17] <lizmat> samcv++

[11:18] <lizmat> teatime++   # link fixed

[11:18] <travis-ci> NQP build failed. pmurias '[js] Make MultiDimArray compose be able to take Perl 6 level ints'

[11:18] <travis-ci> https://travis-ci.org/perl6/nqp/builds/284152755 https://github.com/perl6/nqp/compare/1e17529bdfd6...759496d50f2f

[11:21] <Geth> ¦ rakudo/nom: d565ded029 | (Elizabeth Mattijsen)++ | 5 files

[11:21] <Geth> ¦ rakudo/nom: Make sure we have IO::Special before IO::Handle

[11:21] <Geth> ¦ rakudo/nom:

[11:21] <Geth> ¦ rakudo/nom: Needed for an optimization later

[11:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d565ded029

[11:33] <pmurias> the dies-ok problem we had with the divide by zero has reappeared on the nqp-js :(

[11:56] <Geth> ¦ roast: 7de1138c34 | (Zoffix Znet)++ | S32-hash/perl.t

[11:56] <Geth> ¦ roast: Map.perl preserves Map's scalar containeration

[11:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7de1138c34

[11:57] <Zoffix> Can someone with keys add `#perl6` to geth's web hook for the duration of squashathon?

[11:57] <Zoffix> And to moarvm

[11:58] <Zoffix> huggable: geth

[11:58] <huggable> Zoffix, Set geth report URL (select application/json and send me everything): http://geth.niner.name:8888/?chan=#perl6-dev       Old URL: https://geth.perl6.party/?chan=#zofbot

[11:58] <Zoffix> So it'd be http://geth.niner.name:8888/?chan=#perl6-dev,#perl6

[11:58] <Geth> ¦ roast: 7de1138c34 | (Zoffix Znet)++ | S32-hash/perl.t

[11:58] <Geth> ¦ roast: Map.perl preserves Map's scalar containeration

[11:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7de1138c34

[12:24] <Geth> ¦ rakudo/nom: 381c4c3bb2 | (Zoffix Znet)++ | src/core/Map.pm

[12:24] <Geth> ¦ rakudo/nom: Add space between els in Map.gist

[12:24] <Geth> ¦ rakudo/nom:

[12:24] <Geth> ¦ rakudo/nom: We add one in Hash, List, and Buf .gists

[12:24] <Geth> ¦ rakudo/nom:

[12:24] <Geth> ¦ rakudo/nom: (Noticing though that Buf and List gists separate els with spaces,

[12:24] <Geth> ¦ rakudo/nom: but Hash/Map with commas + spaces)

[12:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/381c4c3bb2

[12:25] <Geth> ¦ roast: 8a3908c3e2 | (Zoffix Znet)++ | S32-hash/map.t

[12:25] <Geth> ¦ roast: Spec Map.gist trimming to 100 els

[12:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8a3908c3e2

[12:41] <stmuk> .

[12:41] <Zoffix> :

[12:52] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make sure we have IO::Special before IO::Handle

[12:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/284158820 https://github.com/rakudo/rakudo/compare/69af24c49e02...d565ded02928

[13:01] <Geth> ¦ rakudo/nom: b377de1c48 | (Zoffix Znet)++ | src/core/Exception.pm

[13:01] <Geth> ¦ rakudo/nom: Versatilize X::Numeric::CannotConvert a bit

[13:01] <Geth> ¦ rakudo/nom:

[13:01] <Geth> ¦ rakudo/nom: Make it stringify .defined $!targets as is, while .perl'ifying

[13:01] <Geth> ¦ rakudo/nom: others. This maintains the old output for X::Numeric::Real, while

[13:01] <Geth> ¦ rakudo/nom: leaving open the possibility of using more than just a type for

[13:01] <Geth> ¦ rakudo/nom: $!target if we'll need to.

[13:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b377de1c48

[13:31] <dogbert17> .seen CallMeBob

[13:32] <yoleaux> I saw CallMeBob 5 Oct 2017 12:19Z in #perl6: <CallMeBob> -_-

[13:35] <Zoffix> ?

[13:36] <Zoffix> dogbert17: whatdyuwant?

[13:41] <dogbert17> just wondering if that's your new alias :)

[13:42] <Zoffix> None

[13:42] <Zoffix> I setup yoleaux to remind me of a bunch of stuff in /msg and I realized I won't get the reminders 'cause it won't sent them to the right person

[13:45] <dogbert17> aha

[14:32] <AlexDaniel> .

[15:30] <Geth> ¦ nqp: 60f79d38e9 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[15:30] <Geth> ¦ nqp: Bump MoarVM

[15:30] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/60f79d38e9

[15:30] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09.1-553-ga4fef0b...2017.09.1-575-gd4e230a

[15:30] <Geth> ¦ rakudo/nom: c4b96e457b | (Zoffix Znet)++ | tools/build/NQP_REVISION

[15:30] <Geth> ¦ rakudo/nom: Bump NQP

[15:30] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c4b96e457b

[15:30] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.09-40-ga6a1aa0...2017.09-59-g60f79d3

[15:33] <Zoffix> New blog post: "CPAN6 Is Here": https://6lang.party/post/CPAN6-Is-Here

[15:33] <lizmat> Zoffix++

[15:36] <jdv79> pause/cpan support was there since at least 2015 if not earlie

[15:36] <jdv79> the only thing that happened at that summit was the auto detection of p6 dists

[15:36] <jdv79> but its not important

[15:37] <jdv79> cool article though

[15:50] <travis-ci> NQP build failed. Zoffix Znet 'Bump MoarVM'

[15:50] <travis-ci> https://travis-ci.org/perl6/nqp/builds/284262049 https://github.com/perl6/nqp/compare/759496d50f2f...60f79d38e999

[15:53] <Zoffix> Same failure as previous bumps: [JVM] t/nqp/058-attrs.t ...................... 1/29 java.lang.ClassCastException: org.perl6.nqp.sixmodel.reprs.P6strInstance cannot be cast to java.lang.String

[16:34] <Geth> ¦ rakudo/nom: 8ff76b5962 | (Elizabeth Mattijsen)++ | 27 files

[16:34] <Geth> ¦ rakudo/nom: Add some # vim: ft=perl6 expandtab sw=4

[16:34] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ff76b5962

[16:58] <samcv> yay did mvm get bumped?

[17:00] <timotimo> looks just like

[17:00] <Zoffix> Yes, though there's still a bugglet with t/spec/S17-channel/stress.t  It alone takes almost twice as long as entire stresstest now

[17:10] <timotimo> Zoffix: the <abbr> for PAUSE on your blog post has a bug, it has a closing ] but no opening [

[17:10] <timotimo> (and why PAUSE has an abbr, but CPAN does not ... ?)

[17:13] <Zoffix> Thanks, fixed the typo

[17:14] <Zoffix> CPAN is more well-known. If people don't know what it stands for they can google it

[17:14] <timotimo> Zoffix, you think it's safe to kick JSON::Fast off of the p6c list?

[17:14] <timotimo> it's kind of a module that's used by a pretty big portion of the ecosystem

[17:14] <japhb> CPAN also doesn't collide with a common English word

[17:14] <timotimo> wouldn't want people to experience issues

[17:15] <timotimo> oh, that's a good point, japhb

[17:15] <Zoffix> timotimo: I think it's safe.

[17:15] <timotimo> the more dists move to cpan, the faster the modules page can update, right?

[17:16] <Zoffix> Yes. CPAN processor is super fast

[17:16] <timotimo> i have four dists on there, i'll look into making the others cpan-ready as well

[17:16] <timotimo> every module moved gives us about 5 seconds?

[17:16] <japhb> Zoffix: typo: 'nttp' (the link is correct, just the anchor text is wrong)

[17:16] <Zoffix> Yeah, something around that

[17:17] <japhb> Why is the CPAN processor so much faster?

[17:17] <timotimo> we're not allowed many requests to github per minute

[17:17] <samcv> about to remove ornate parenthesis from nqp in a sec

[17:17] <japhb> Ah!

[17:17] <Zoffix> japhb: thanks. Fixed

[17:17] <timotimo> samcv++

[17:17] <japhb> np

[17:19] <Zoffix> japhb: also we have to make requests in the first place. CPAN processor just rsyncs everything and then reads off the local disk, whereas GitHub processor has to fetch meta file off GitHub (while staying within limits), fetch commit info for freshly updated lists, and also has META validator check the source URL in the META file is a valid URL.

[17:20] <Zoffix> There's room to improve rate limiter, but that won't make it as fast as CPAN processor: https://github.com/perl6/modules.perl6.org/issues/79

[17:21] * japhb wonders if just keeping local mirrors of the GitHub repos would be faster than using their API

[17:21] <Geth> ¦ nqp: 02a426e0e6 | (Samantha McVey)++ | src/HLL/Grammar.nqp

[17:21] <Geth> ¦ nqp: Remove support for ornate parenthesis from quoting constructs

[17:21] <Geth> ¦ nqp:

[17:21] <Geth> ¦ nqp: Reasons:

[17:21] <Geth> ¦ nqp: * These are not recognized by Unicode as being brackets

[17:21] <Geth> ¦ nqp: * They do not conform to Pi/Pf or Ps/Pf general category pairings

[17:21] <Geth> ¦ nqp: * They don't have a Bidi_Mirroring_Glyph or a Bidi_Matching_Bracket pair

[17:21] <Geth> ¦ nqp: * They have never been considered brackets for any of the history of

[17:21] <samcv> there we go. i think i listed enough reasons

[17:21] <Geth> ¦ nqp:   Perl 6, and they never will be considered brackets

[17:21] <Geth> ¦ nqp: * There are no modules which use these brackets, and no known users

[17:21] <Geth> ¦ nqp: * It is not easily versionable, and not feasible to make it versioned

[17:21] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/02a426e0e6

[17:21] <samcv> reason 7: samcv doesn't like them :P

[17:22] <timotimo> Zoffix: i guess the first step would be to just query that for every 100 requests and output it in the log so we can get an idea of how far we're away from max allowed pace

[17:23] <timotimo> gaaah, i want to write code but i have to be careful with my wrists :(

[17:23] <Zoffix> :(

[17:26] <japhb> timotimo: Been there.  REALLY HATED THAT.

[17:34] <Geth> ¦ nqp: 576d78eef8 | (Samantha McVey)++ | src/HLL/Grammar.nqp

[17:34] <Geth> ¦ nqp: Add a removal message if ornate parentheses are used

[17:34] <Geth> ¦ nqp:

[17:34] <Geth> ¦ nqp: This message will eventually be removed, but in the very unlikely

[17:34] <Geth> ¦ nqp: case anybody is using them, provide a useful message.

[17:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/576d78eef8

[17:35] <samcv> cool. now nobody will have to come and ask why they code broke. just in the very very unlikely case someone out there *is* using ornate parens

[17:35] <samcv> and i don't think it should slow down parsing since that should only run if we can't find matching parens

[17:40] <Zoffix> But doesn't that branch run when non-matching delimiters are used

[17:40] <Zoffix> m: q:meows:

[17:40] <camelia> rakudo-moar 8ff76b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Colons may not be used to delimit quoting constructs␤at <tmp>:1␤------> 3q:meows:7⏏5<EOL>␤    expecting any of:␤        colon pair (restricted)␤»

[17:41] <Zoffix> m: q'meows'.say # like this case, for example

[17:41] <camelia> rakudo-moar 8ff76b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3q'meows7⏏5'.say # like this case, for example␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement mo…»

[17:41] * Zoffix was expecting that to work :(

[17:41] <samcv> hmm it might

[17:41] <Zoffix> m: q|meows|.say # like this case, for example

[17:41] <camelia> rakudo-moar 8ff76b: OUTPUT: «meows␤»

[17:42] <samcv> well worse case we get imperceptibly slower parsing for a month or two

[17:42] <Zoffix> .in 3m time to toss this: https://github.com/perl6/nqp/commit/576d78eef8

[17:42] <yoleaux> Zoffix: I'll remind you at 17:45Z

[17:42] <samcv> since i made indexing a single grapheme 9x faster in the last few months :p

[17:42] <Zoffix> uhhh

[17:42] <Zoffix> .in 90d time to toss this: https://github.com/perl6/nqp/commit/576d78eef8

[17:42] <yoleaux> Zoffix: I'll remind you on 4 Jan 2018 17:42Z

[17:42] <Zoffix> \o/

[17:43] <samcv> nice!

[17:45] <yoleaux> Zoffix: time to toss this: https://github.com/perl6/nqp/commit/576d78eef8

[17:46] <Zoffix> yoleaux: bad robot!

[18:06] <samcv> welp

[18:06] * samcv goes to toss

[18:10] <Geth> ¦ roast: 7fd6b6f3ac | (Moritz Lenz)++ | S04-statements/gather.t

[18:10] <Geth> ¦ roast: Test for RT #127672

[18:10] <Geth> ¦ roast:

[18:10] <Geth> ¦ roast: take inside a regex with m:g// runs the expected number of times

[18:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7fd6b6f3ac

[18:10] <synopsebot> RT#127672 [new]: https://rt.perl.org/Ticket/Display.html?id=127672 ｢take｣ inside global and exhaustive matching is broken (m:g/. {take 1}/)

[19:55] <Geth> ¦ roast: smls++ created pull request #341: Add tests for backtracking into alternations

[19:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/341

[19:56] <Geth> ¦ roast: 65a762217c | smls++ | 2 files

[19:56] <Geth> ¦ roast: Add tests for backtracking into alternations

[19:56] <Geth> ¦ roast:

[19:56] <Geth> ¦ roast: They're the bottom eight tests listed at

[19:56] <Geth> ¦ roast: https://github.com/perl6/nqp/pull/368

[19:56] <Geth> ¦ roast: (The other ones listed there, for quantifiers,

[19:56] <Geth> ¦ roast: seem to be already covered in S05-mass/rx.t)

[19:56] <Geth> ¦ roast:

[19:56] <Geth> ¦ roast: This closes RT #130117 and #131973.

[19:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/65a762217c

[19:56] <Geth> ¦ roast: b1ba026b46 | lizmat++ (committed using GitHub Web editor) | 2 files

[19:56] <synopsebot> RT#130117 [open]: https://rt.perl.org/Ticket/Display.html?id=130117 [TESTNEEDED] [REGEX] Sequential alternation `||` does not respect `:ratchet`

[19:56] <Geth> ¦ roast: Merge pull request #341 from smls/master

[19:56] <Geth> ¦ roast:

[19:56] <synopsebot> RT#131973 [open]: https://rt.perl.org/Ticket/Display.html?id=131973 [TESTNEEDED] [REGEX] Backtracking modifiers on individual atoms fail to override a regex-global `:ratchet` modifier.

[19:56] <Geth> ¦ roast: Add tests for backtracking into alternations

[19:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b1ba026b46

[20:37] <Geth> ¦ roast: 946d2ff79d | (Samantha McVey)++ | 2 files

[20:37] <Geth> ¦ roast: Add ignorecase and ignoremark tests to cover interpolation

[20:37] <Geth> ¦ roast:

[20:37] <Geth> ¦ roast: Add tests to cover RT132232 and RT132233 which I have just opened to

[20:37] <Geth> ¦ roast: track the interpolation issues with ignorecase. There may be issues

[20:37] <Geth> ¦ roast: with ignoremark or ignorecase+ignoremark as well.

[20:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/946d2ff79d

[20:37] <synopsebot> RT#132232 [new]: https://rt.perl.org/Ticket/Display.html?id=132232 [UNI] ignorecase returns too many graphemes for expanding foldcase graphemes

[20:37] <synopsebot> RT#132233 [new]: https://rt.perl.org/Ticket/Display.html?id=132233 [UNI] ignorecase doesn't use foldcase semantics when the haystack is interpolated

[20:37] <samcv> have rt's open to track these now

[20:45] <lizmat> m: role Foo[::T] { has T $.a }; class Bar {}; use nqp; my $b := Foo[Bar].new; dd nqp::getattr($b,$b.WHAT,'$!a').^name  # shouldn't that need to say Bar ?

[20:45] <camelia> rakudo-moar 8ff76b: OUTPUT: «"T"␤»

[21:05] <Geth> ¦ roast: 8773139c37 | smls++ | S06-signature/slurpy-and-interpolation.t

[21:05] <Geth> ¦ roast: Test interpolating a typed hash into an argument list

[21:05] <Geth> ¦ roast:

[21:05] <Geth> ¦ roast: Closes RT #126951

[21:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8773139c37

[21:05] <synopsebot> RT#126951 [open]: https://rt.perl.org/Ticket/Display.html?id=126951 [TESTNEEDED] Interpolating a typed hash into an argument list produces wrong keys

[21:32] <Geth> ¦ rakudo/nom: 92e51c3d4e | (Elizabeth Mattijsen)++ | 5 files

[21:32] <Geth> ¦ rakudo/nom: Compile time defaults for attributes stored as value

[21:32] <Geth> ¦ rakudo/nom:

[21:32] <Geth> ¦ rakudo/nom: - store the compile-time value of a default if possible

[21:32] <Geth> ¦ rakudo/nom: - makes object creation with concrete compile-time default values faster

[21:32] <Geth> ¦ rakudo/nom:   - about 40% faster for a single attribute, like "has $.foo = 42"

[21:32] <Geth> ¦ rakudo/nom: - rather than generating a method to be installed and called during init

[21:32] <Geth> ¦ rakudo/nom: - only supports concrete default values for now, type objects use old behaviour

[21:32] <Geth> ¦ rakudo/nom: <…commit message has 12 more lines…>

[21:32] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/92e51c3d4e

[21:34] <lizmat> seems to knock off about .1 second for my run of test-t  # [Tux]

[21:35] <Zoffix> \o/

[21:36] <Geth> ¦ roast: 59398cd9cf | smls++ | S06-signature/slurpy-and-interpolation.t

[21:36] <Geth> ¦ roast: bump plan for commit 8773139c3

[21:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/59398cd9cf

[21:36] <Geth> ¦ roast: 9ea27ad2e7 | smls++ | S03-metaops/reduce.t

[21:36] <Geth> ¦ roast: Add test for reducing a Seq with operator =>

[21:36] <Geth> ¦ roast:

[21:36] <Geth> ¦ roast: This closes RT #130906.

[21:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9ea27ad2e7

[21:36] <synopsebot> RT#130906 [open]: https://rt.perl.org/Ticket/Display.html?id=130906 [TESTNEEDED] [REGRESSION] Reducing a Seq with `=>` fails with "P6opaque: no such attribute '$!reified' in type List"

[21:37] <Geth> ¦ roast: be53acf443 | (Elizabeth Mattijsen)++ | S12-introspection/attributes.t

[21:37] <Geth> ¦ roast: Adapt tests to new possible Attribute.build values

[21:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/be53acf443

[21:39] <Geth> ¦ roast: a745629ef4 | (Elizabeth Mattijsen)++ | 2 files

[21:39] <Geth> ¦ roast: Untodo now passing tests

[21:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a745629ef4

[21:43] * lizmat calls it a day

[21:45] <yoleaux> Zoffix: Blob.gist, bruh

[21:46] <Zoffix> yoleaux: already did it, bruh

[22:02] <yoleaux> Zoffix: geth synopsebot

[22:02] <Zoffix> yoleaux: meh, don't feel like it

[22:07] <gfldex> m: my %h = :1a, :2b; %h<a c>:exists:delete; dd %h

[22:07] <camelia> rakudo-moar 92e51c: OUTPUT: «Hash %h = {:b(2)}␤»

[22:07] <gfldex> m: my %h = :1a, :2b; say %h<a c>:exists:delete; dd %h

[22:07] <camelia> rakudo-moar 92e51c: OUTPUT: «(True False)␤Hash %h = {:b(2)}␤»

[23:22] <buggable> New CPAN upload: SDL2-Raw-0.1.tar.gz by TIMOTIMO https://cpan.metacpan.org/authors/id/T/TI/TIMOTIMO/Perl6/SDL2-Raw-0.1.tar.gz

[23:40] <Zoffix> AlexDaniel: https://fail.rakudo.party/t/MOLD

[23:40] <AlexDaniel_> awesome

[23:41] <travis-ci> NQP build errored. Samantha McVey 'Add a removal message if ornate parentheses are used

[23:41] <travis-ci> https://travis-ci.org/perl6/nqp/builds/284315409 https://github.com/perl6/nqp/compare/02a426e0e6ea...576d78eef877

[23:41] <Zoffix> AlexDaniel_: also, manager interface now has a trashcan button on tickets. That's for deleting spam tickets

[23:41] <AlexDaniel_> Zoffix: oh. OK! Thanks

[23:43] <Zoffix> (well, I guess proper solution is to make it handle them automatically... but I kinda thought of adding a button lol)

[23:44] <AlexDaniel_> Zoffix: uh, what's the time limit exactly? 1 year?

[23:45] * AlexDaniel_ didn't understand the magic here https://github.com/zoffixznet/r6/commit/6d8844b3eb15dd52bf9a4fa273611b1671f57647#diff-d6ca9d1905e835bc4bd368de2ca40f02R112

[23:45] <Zoffix> If difference of years since "Last updated" is over 1 year, then tag mold

[23:45] <AlexDaniel_> ok!

[23:46] <Zoffix> Hm... well, it just considers years themselves... I guess I should change it to just unix time diff

[23:48] * Zoffix rebuilds again

[23:48] <timotimo> Zoffix: i'm not exactly sure what about the modules list rebuild is so slow?

[23:51] <Zoffix> AlexDaniel_: k, now it's marking them if last update is older than 60*60*24*365*2 seconds ago

[23:51] <timotimo> what happens after the "Parsing META file"? it takes like 2 seconds until the next output

[23:51] <AlexDaniel_> buggable: tag MOLD

[23:51] <buggable> AlexDaniel_, There are 234 tickets tagged with MOLD; See http://fail.rakudo.party/t/MOLD for details

[23:51] <AlexDaniel_> that's more approachable :)

[23:51] <AlexDaniel_> Zoffix: thanks! ♥

[23:51] * Zoffix is tired of web stuff and goes to hunt for a rakudo ticket to squash

[23:52] * AlexDaniel_ has spent more than an hour on an LTA ticket :'(

[23:53] <Zoffix> Actually no, I'm gonna eat sleeping pills and play GTA 5

[23:53] <Zoffix> Gonna squashathon tomorrow :)

[23:53] * Zoffix &

[23:53] <timotimo> have fun! :)

[23:54] <Zoffix> timotimo: I think it does github API fetching business for new commits after parsing meta + there's METAChecker postprocessor. I'd start looking in those two places

[23:54] * Zoffix &

[23:59] <timotimo> time to nytprof maybe ;)
