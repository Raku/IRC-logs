[00:15] <Geth> ¦ rakudo/nom: 6c76ed0abe | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/Repository/Installation.pm

[00:15] <Geth> ¦ rakudo/nom: Remove superfluous .IO

[00:15] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c76ed0abe

[07:11] <[Tux]> This is Rakudo version 2017.07-5-g6c76ed0ab built on MoarVM version 2017.07

[07:11] <[Tux]> csv-ip5xs        2.767

[07:11] <[Tux]> test            13.061

[07:11] <[Tux]> test-t           4.243 - 4.321

[07:11] <[Tux]> csv-parser      12.177

[08:22] <samcv> o/

[09:13] <Geth> ¦ perl6-lwp-simple: cpin++ created pull request #16: Delete method sends headers

[09:13] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/pull/16

[09:20] <lizmat> Files=1215, Tests=65558, 219 wallclock secs (13.29 usr  4.91 sys + 1321.98 cusr 138.56 csys = 1478.74 CPU)

[09:27] <Geth> ¦ rakudo/nom: d82db18f3a | (Elizabeth Mattijsen)++ | src/core/set_addition.pm

[09:27] <Geth> ¦ rakudo/nom: Simplify infix:<(+)>(**@p) candidate

[09:27] <Geth> ¦ rakudo/nom:

[09:27] <Geth> ¦ rakudo/nom: With all of the necessary candidates and testing for them in place,

[09:27] <Geth> ¦ rakudo/nom: we can now do that

[09:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d82db18f3a

[10:04] <Geth> ¦ perl6-lwp-simple: 685dbbf1ff | cpin++ | 2 files

[10:04] <Geth> ¦ perl6-lwp-simple: Delete method sends headers

[10:04] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/685dbbf1ff

[10:04] <Geth> ¦ perl6-lwp-simple: 37fffecb96 | cpin++ | t/delete-headers.t

[10:04] <Geth> ¦ perl6-lwp-simple: Delete test says Delete (not Get)

[10:04] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/37fffecb96

[10:04] <Geth> ¦ perl6-lwp-simple: 048dfc6763 | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[10:04] <Geth> ¦ perl6-lwp-simple: Merge pull request #16 from cpin/delete-headers

[10:04] <Geth> ¦ perl6-lwp-simple:

[10:04] <Geth> ¦ perl6-lwp-simple: Delete method sends headers

[10:04] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/048dfc6763

[10:04] <Geth> ¦ perl6-lwp-simple: 27c77f8da5 | (Zoffix Znet)++ (committed using GitHub Web editor) | META6.json

[10:04] <Geth> ¦ perl6-lwp-simple: Bump version

[10:04] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/27c77f8da5

[10:08] <nine> jnthn: so what do you think? Use subclasses for $*IN, $*OUT, $*ERR with an overwritten DESTROY or just have IO::Handle::DESTROY handle those file descriptors specially?

[10:10] * lizmat leans to the latter

[10:11] <jnthn> I was hoping somebody else would do the thinking :P

[10:11] <jnthn> But the most expedient is probably just to detect those handles in DESTROY :)

[10:11] <geekosaur> usually those file descriptors get special cased in one way or another. old perl's $^F is an example

[10:11] <nine> jnthn: ah, ok. With your investigation, this now seems like a rather trivial bug to fix

[10:13] <jnthn> nine: Yes, I figured so, thus why I moved on to the spesh type planner, which I doubt anybody else will do if I don't. :-)

[10:38] <Zoffix> What about .close? Should one be able to .close handles with 0, 1, 2 descriptors?

[10:39] <nine> Zoffix: yes

[10:39] <Zoffix> m: $*IN.close; $*IN.open; lines.say

[10:39] <camelia> rakudo-moar d82db1: OUTPUT: «Reading from filehandle failed: Bad file descriptor␤  in block <unit> at <tmp> line 1␤␤»

[10:40] <Zoffix> How do you get 'em back, after you close them?

[10:40] <nine> You don't :)

[10:40] <nine> I think that's the point ;)

[10:40] <Zoffix> OK

[10:46] <jnthn> Indeed, once they're gone they're gone

[10:48] * Zoffix cues https://www.youtube.com/watch?v=0G3_kG5FFfQ

[10:50] <Zoffix> ZOFFLOP: t/spec/S11-modules/require.t

[10:50] <Zoffix> ZOFVM: Files=1252, Tests=161171, 132 wallclock secs (22.33 usr  3.40 sys + 2757.61 cusr 185.54 csys = 2968.88 CPU)

[10:51] <Geth> ¦ rakudo/nom: 0e578c4fea | (Zoffix Znet)++ | src/core/IO/Handle.pm

[10:51] <Geth> ¦ rakudo/nom: Don't close standard handles in DESTROY

[10:51] <Geth> ¦ rakudo/nom:

[10:51] <Geth> ¦ rakudo/nom: 'cause you can't get them back. If the user planned to actually close

[10:51] <Geth> ¦ rakudo/nom: them, they should do so via .close method.

[10:51] <Geth> ¦ rakudo/nom:

[10:51] <Geth> ¦ rakudo/nom: Fixes RT#131755: https://rt.perl.org/Ticket/Display.html?id=131755

[10:51] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131755

[10:51] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0e578c4fea

[10:52] <Geth> ¦ roast: f739f03ff4 | (Zoffix Znet)++ | S32-io/open.t

[10:52] <Geth> ¦ roast: Unfudge standard handle reopen tests

[10:52] <Geth> ¦ roast:

[10:52] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/0e578c4fea

[10:52] <Geth> ¦ roast: RT#131755: https://rt.perl.org/Ticket/Display.html?id=131755

[10:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f739f03ff4

[10:52] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131755

[10:56] <Geth> ¦ roast: 9a85e42a6e | (Zoffix Znet)++ | S32-io/open.t

[10:56] <Geth> ¦ roast: Test .DESTROY doesn't close standard handles

[10:56] <Geth> ¦ roast:

[10:56] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/0e578c4fea

[10:56] <Geth> ¦ roast: RT#131755: https://rt.perl.org/Ticket/Display.html?id=131755

[10:56] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131755

[10:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9a85e42a6e

[11:19] <Geth> ¦ rakudo/nom: d7fcb314e9 | (Elizabeth Mattijsen)++ | src/core/set_difference.pm

[11:19] <Geth> ¦ rakudo/nom: Streamline infix:<(+)>(**@p) candidate

[11:19] <Geth> ¦ rakudo/nom:

[11:19] <Geth> ¦ rakudo/nom: - with all of the necessary candidates and testing in place, we can now do that

[11:19] <Geth> ¦ rakudo/nom: - makes $s (-) $s (-) $s on a 26 elem set about 1.5x faster

[11:19] <Geth> ¦ rakudo/nom: - much less memory hungry, test shows 1/3 of garbage collections

[11:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d7fcb314e9

[11:19] <lizmat> grrr flaky wifi

[11:20] <lizmat> argh.... copy pasto  (-) !!

[11:42] <stmuk> http://pl6anet.org/drop/rakudo-star-2017.07-RC0.tar.gz

[12:31] <Zoffix> heh, SixFix has a very interesting learning curve.

[12:32] <Zoffix> Day 1: basic of basics 1-line problem. Day 2: basic of basics 1-line REPL problem. Day 3: Here's 174-line command line processing script. Let's get cracking!

[12:33] <Zoffix> also not very interesting since atom can jump to a line without any scripts :/

[12:40] <mst> SixFix?

[12:47] <Zoffix> mst: http://sixfix.nigelhamilton.com/

[12:48] <lizmat> commute&

[12:49] <jnthn> Zoffix: Can we close https://rt.perl.org/Ticket/Display.html?id=131755 now?

[12:52] <Zoffix> Closed.

[12:53] <jnthn> yay :)

[12:53] <jnthn> 2 more and we'll be back to 33 pages of tickets instead of 34 :P

[12:53] <[Coke]> thought there was just one really big page. :)

[12:54] <jnthn> Guess there's different ways of viewing it :)

[12:54] * [Coke] suspects we could close 100 todo/nyi tickets with "not going to happen"

[12:54] <Geth> ¦ rakudo/nom: a0775e5e95 | (Elizabeth Mattijsen)++ | src/core/set_multiply.pm

[12:54] <Geth> ¦ rakudo/nom: Simplify infix:<(.)>(**@p) candidate

[12:54] <Geth> ¦ rakudo/nom:

[12:54] <Geth> ¦ rakudo/nom: With all of the necessary candidates and testing for them in place,

[12:54] <Geth> ¦ rakudo/nom: we can now do that

[12:54] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a0775e5e95

[13:21] <Geth> ¦ rakudo/nom: 2f5a6cd9a4 | (Jonathan Worthington)++ | src/vm/moar/ops/container.c

[13:21] <Geth> ¦ rakudo/nom: Ensure Scalar fetch can never return a NULL.

[13:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2f5a6cd9a4

[14:26] <dogbert17> lizmat: do you know if tests have been added for RT #130366 ?

[14:26] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130366

[15:04] <pmurias> jnthn: do you think dropping support for some of the unused continuation features would be ok?

[15:05] <jnthn> pmurias: Dropping support in what sense?

[15:05] <jnthn> The tests are already per backend for whatever it supports; MoarVM's are less inclusive than the JVM ones

[15:06] <jnthn> So if you don't wish to implement the case on the JS backend just don't include the tests for that case :)

[15:12] <pmurias> jnthn: any plans to make rakudo use the case with 1?

[15:13] <jnthn> pmurias: I'm not 100% confident saying "no" in that I'm still working on the non-blocking `await`

[15:13] <jnthn> pmurias: I mean, it seems unlikely

[15:17] <pmurias> why do we have per backends tests?

[15:18] <pmurias> jnthn: waiting till you get the non-blocking `await` done before trimming the ops seems resonable

[15:33] <Zoffix> m: say "\c[woman juggling: medium-dark skin tone]"

[15:33] <camelia> rakudo-moar 2f5a6c: OUTPUT: «????????‍♀️␤»

[15:33] <Zoffix> cool, `:` works now

[15:37] <AlexDaniel> yup, samcv++

[15:44] <AlexDaniel> .tell MasterDuke Malformed UTF-8 issue does not seem to be CATCH-able. I didn't really dive into this, but I guess if it happens in Proc::Async somewhere then you won't be able to handle it (as it is in a different thread)?

[15:44] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[16:00] <ugexe> wouldnt you use QUIT and not CATCH?

[16:28] <AlexDaniel> ugexe: that's a good point

[16:30] <Geth> ¦ rakudo/nom: 91be8bc1ca | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Backtrace.pm

[16:30] <Geth> ¦ rakudo/nom: Remove "evil hack" comment ????????????

[16:30] <Geth> ¦ rakudo/nom:

[16:30] <Geth> ¦ rakudo/nom: The comment is outdated in as much it was introduced when

[16:30] <Geth> ¦ rakudo/nom: a full path was used. We examining the filename in several

[16:30] <Geth> ¦ rakudo/nom: other places for this purpose in the class, so I'd dispute the claimed evility.

[16:30] <Geth> ¦ rakudo/nom:

[16:30] <Geth> ¦ rakudo/nom: Closes RT#131757: https://rt.perl.org/Ticket/Display.html?id=131757

[16:30] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131757

[16:30] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/91be8bc1ca

[16:32] <Zoffix> I can't believe no one fixed the encoding problem in logs still :/

[16:32] <Zoffix> Especially since #mojo too uses it.

[16:35] <AlexDaniel> ugexe: but… that's not exactly how it works

[16:35] <AlexDaniel> ugexe: the problem is that somewhere in the code “Malformed UTF-8” issue pops out (possibly due to rakudo bug), and there's no way I can catch it from the outside

[16:36] <AlexDaniel> so the whole program goes down when it happens

[16:37] <AlexDaniel> now, what if I set the “quit” thingy for both taps…

[16:39] <AlexDaniel> that works \o/

[16:39] <jnthn> If you're using .tap without a quit, then the exception is unhandled

[16:39] <jnthn> Note that this is a big reason to use react/whenever :)

[16:44] <AlexDaniel> well, I know that I created too many trap issues, but… sounds like a trap to me

[16:44] <jnthn> ??

[16:44] <jnthn> What's it supposed to do with async error, drop it on the floor?

[16:44] <jnthn> It behaves just like a sync exception if you don't write a CATCH

[16:44] <AlexDaniel> well, I'm not saying that what it does is wrong

[16:44] <AlexDaniel> but if I just wrapped my whole program in a try CATCH, I'm kinda expecting that the whole thing won't go down

[16:44] <AlexDaniel> and then I'm using Proc::Async somewhere to shell out some little thing… and possibly even just Proc now

[16:44] <jnthn> It's likely that error handling needs to be featured much more prominently in the docs

[16:44] <jnthn> Also, most likely, a lot less examples that call .tap

[16:44] <jnthn> And a lot more than use react/whenever

[16:45] <jnthn> (The concurrency docs, to be clear)

[16:48] <Zoffix> moritz: yo. How to debug the log encoding issue? If I clone the repo and try to run it, it tells me there's no backened.conf file. How can I play with the code and fix the problem?

[16:48] <Zoffix> Hm. There's ./install script.

[16:49] <AlexDaniel> .tell MasterDuke nevermind. It's just that I'm an idiot: https://irclog.perlgeek.de/perl6-dev/2017-07-17#i_14882744

[16:49] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[17:02] <Zoffix> man, there's no config/bot.conf.example :|

[17:03] <Zoffix> oh in the repo

[17:04] <Zoffix> this thing better have encoding issues when I finally launch it

[17:05] <Zoffix> ♥

[17:07] <Zoffix> And it's not there :(

[17:09] <Zoffix> .tell moritz so I launched my own ilbot on v5.24.0 and there ain't no encoding issues. Is it possible the database was exported/imported incorrectly when the box was upgraded? I'm sick of broken logs and I wanna fix the issue. How?

[17:09] <yoleaux> Zoffix: I'll pass your message to moritz.

[17:25] <AlexDaniel> does anybody have a working example using react/whenever and Proc::Async?

[17:26] <ugexe> AlexDaniel: https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/PrecompilationRepository.pm#L263

[17:26] <AlexDaniel> ah, $proc.start is in whenever also. Interesting

[17:26] <ugexe> that makes sure its not called until everything is tapped

[17:27] <AlexDaniel> well, I thought that putting something like await $proc.start before whenevers will do it also

[17:28] <ugexe> maybe await $proc.start *after* the whenevers, but certainly not before

[17:29] <AlexDaniel> well, you can try it and see what happens ;)

[17:30] <AlexDaniel> oh, actually it kinda works

[17:31] <AlexDaniel> I just didn't have the patience to wait until the program finishes to see any lines of the output (when doing $proc.start *after*)

[17:38] <Geth> ¦ roast: 9b51341b6c | (Elizabeth Mattijsen)++ | S03-operators/set_difference.t

[17:38] <Geth> ¦ roast: Add one more edge case test + disable debug helper

[17:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9b51341b6c

[21:46] <samcv> good *

[21:55] <Zoffix> *

[21:55] <samcv> has anybody ever had it happen when you make changes to a file but git diff doesn't show them

[21:57] <Zoffix> Yup, when it's not tracked (e.g. a new file). git status would tell you if it is

[21:57] <Zoffix> Also: editing the file in the wrong place :)

[21:57] <samcv> not in that case

[21:58] <samcv> hmm unless i pushed these cdhanges but. i can't see it...

[21:58] <samcv> ugh what

[21:58] * samcv checks rakudo/rakudo on github to ensure she's not crazy

[22:00] <samcv> ok i must have pushed some change. when did this happen. or someone else did

[22:00] <samcv> on my suggestion

[22:01] * samcv checks git blame

[22:01] <samcv> ok it was lizmat :)

[22:01] <samcv> ok i'm *not* crazy :P

[22:06] <AlexDaniel> yay, -2 open tickets! :) https://rt.perl.org/Ticket/Display.html?id=126063

[22:07] <Zoffix> buggable: tags

[22:07] <buggable> Zoffix, Total: 1621; BUG: 1073; UNTAGGED: 371; LTA: 171; NYI: 95; JVM: 60; RFC: 57; REGEX: 56; CONC: 51; TESTNEEDED: 33; UNI: 27; PERF: 26; SEGV: 26; IO: 22; NATIVECALL: 22; REGRESSION: 22; POD: 21; @LARRY: 20; TODO: 18; PRECOMP: 14; BUILD: 11; OO: 11; TESTCOMMITTED: 11; OPTIMIZER: 10; STAR: 7; BOOTSTRAP: 5; REPL: 5; GLR: 4; MATH: 4; OSX: 4; WEIRD: 4; SPESH: 3; WINDOWS: 3; RT: 2; BELL

[22:07] <Zoffix> ZofBot: only 1621 to go

[22:07] <ZofBot> Zoffix, List parameters List parameters capture a variable length list of data

[22:08] * lizmat continues on the P6W

[22:08] <AlexDaniel> Zoffix: well, if I used the search function before submitting tickets more often, we'd be much closer to 0 ;)

[22:10] * lizmat wonders what she pushed to surprise SamCV

[22:25] <Zoffix> "Dear zoffix, [...] As one of r/programming's most prolific contributors, we'd like to talk to you! Between January '16 and April '17, you posted 22 times on Reddit's r/programming (putting you at rank 169 out of 14,254 users who posted on r/programming, i.e., the top 2%)"

[22:25] <Zoffix> top 2% posters? Color me dubious

[22:28] <Zoffix> ZofBot: when I said I wanted to be the top-2-percenter, I meant money, not posts!

[22:28] <ZofBot> Zoffix, github didn't realize the file was totally deleted so viewing the diff looks terrible heh

[23:28] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/07/17/2017-29-zoffix-released/
