[00:47] <samcv> i got a segfault while compiling. argh

[00:47] <samcv> i must have messed something up..

[02:11] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1117: Speed up .contains by flattening the haystack

[02:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1117

[04:18] <AlexDaniel> am I doing something wrong? https://gist.github.com/AlexDaniel/4a5f0c17e32307f59e41a59c18cc54c0

[04:21] <AlexDaniel> ugexe: you probably know :)

[04:35] <AlexDaniel> well… even if I do, I hope we'll find a way to deal with it: RT #131763

[04:35] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131763

[05:37] <samcv> AlexDaniel, how much does that speed it up

[05:37] <samcv> flattening the string that is

[05:37] <samcv> i am curious

[05:38] <AlexDaniel> samcv: hm, what are you talking about exactly?

[05:38] <samcv> https://github.com/rakudo/rakudo/pull/1117/files

[05:38] <samcv> this. as it's very relevant to my interests

[05:39] <AlexDaniel> ask MasterDuke perhaps? :)

[05:39] <samcv> oh

[05:39] <samcv> dammit

[05:39] <samcv> sorry you pasted it

[05:39] <samcv> or am i just clicking the wrong links

[05:39] <samcv> i did. my bad :)

[05:39] <samcv> why can't you be the same person. would make my life easier

[05:40] <AlexDaniel> indeed, only one copyright line would be required in whateverable…

[05:40] <AlexDaniel> and I'd be able to search for *all* whateverable RT tickets using just my email :)

[05:40] <samcv> heh

[05:41] <AlexDaniel> on a related note, Proc::Async seems to be very broken :-/

[05:45] <AlexDaniel> There. RT #131764

[05:45] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131764

[05:48] <AlexDaniel> I *think* there's no bug if you are not using react/whenever, but I may be wrong

[05:50] <samcv> so it's a regression?

[05:51] <AlexDaniel> for whateverable, yes, because I refactored the code a little bit

[05:51] <AlexDaniel> and switched to react/whenever as was suggested…

[05:51] <AlexDaniel> hm, maybe I can check if it's a regression with bisectable…

[05:55] <AlexDaniel> the stdin issue is reproducible at least on 2017.03

[05:55] <AlexDaniel> so not a recent regression for sure

[05:56] <AlexDaniel> but the code does not seem to work at all in earlier versions, so I have no idea

[05:56] <AlexDaniel> maybe I'm doing something wrong? Maybe one is supposed to put stdin into Proc::Async differently

[06:29] <nine> AlexDaniel: it does work well if you move the $proc.close-stdin into the whenever $proc.stdout block

[06:30] <samcv> so i've been thinking about ways to speed up appending a \n or \r\n

[06:30] <samcv> for say and the like

[06:30] <AlexDaniel> nine: you are not suggesting this as a real solution, are you?

[06:31] <samcv> since everyone keeps telling me to make it faster :p

[06:31] <samcv> oh what's the tool to check speed across commits. is that a thing?

[06:31] <nine> AlexDaniel: no, more as a data point. It at least tells us that $proc should get all the input

[06:31] <samcv> AlexDaniel, ?

[06:32] <AlexDaniel> samcv: benchable, yes, but all bots are currently down for a moment

[06:32] <samcv> ah ok

[06:32] <AlexDaniel> samcv: https://github.com/perl6/whateverable/wiki/Benchable

[06:33] <AlexDaniel> nine: actually, that's a nice workaround…

[06:37] <AlexDaniel> nine: something like this works also: whenever Promise.in(0) { $proc.close-stdin }

[06:38] <samcv> so for appending \n, i was thinking of having a string always allocated that was \n. or maybe caching it. so when you concat "foo" ~ "\n" it will go some fast path or something. but this might not make it faster i don't know eh

[06:38] <samcv> thinking again maybe not faster. since i think it's already composed there uh

[06:40] <AlexDaniel> nine++

[06:40] <nine> AlexDaniel: $proc.print is asynchronous while $proc.close-stdin is not! So my previous assessment was wrong. In some cases $proc simply does not get the input because we closed its stdin before printing anything.

[06:40] <AlexDaniel> ooooooooooooooooh

[06:40] <nine> So the workaround is actually a fix. At least if close-stdin is really meant to be synchronous

[06:41] <samcv> it would seem like a naturally synchronouse command but maybe it shouldn't be?

[06:43] <AlexDaniel> nine: I don't think I understand it. What would guarantee that “whenever Promise.in(0)” runs after, if print is actually asynchronous?

[06:43] <AlexDaniel> closing whenever you get stdout is not a fix definitely, because you may get no stdout at all

[06:46] <nine> AlexDaniel: but print returns a promise. You can await that to ensure that we wrote anything before closing: $proc.print(“one\ntwo\nthree\nfour”).then: { $proc.close-stdin };

[06:46] <AlexDaniel> :O

[06:46] <AlexDaniel> riiiiiiiiight

[06:47] <AlexDaniel> then whenever $proc.print(…) { $proc.close-stdin } ? That should work…

[06:47] <[Tux]> This is Rakudo version 2017.07-11-g91be8bc1c built on MoarVM version 2017.07

[06:47] <[Tux]> csv-ip5xs        2.607

[06:47] <[Tux]> test            12.821

[06:47] <[Tux]> test-t           4.194 - 4.197

[06:47] <[Tux]> csv-parser      12.389

[06:47] <AlexDaniel> and it does!

[06:47] <AlexDaniel> nine: awesome!

[06:48] <nine> jnthn++ # beautiful API for a beautiful language

[06:49] <AlexDaniel> well…

[06:49] <AlexDaniel> I mean, it's really cool, yes

[06:50] <AlexDaniel> but now I wonder if I'm the only idiot trying to do something like this (not properly)

[06:52] <nine> AlexDaniel: note that I actually meant "beautiful", not "simple", "correct" or "well documented" ;) Because come one, it doesn't get prettier as that: $proc.print(“one\ntwo\nthree\nfour”).then: { $proc.close-stdin };

[06:53] <AlexDaniel> nine: I actually prefer the whenever version, but yeah, it's pretty cool

[06:54] <AlexDaniel> although it probably works a little bit differently

[06:54] <AlexDaniel> nine: if you get an exception during $proc.close-stdin, what's going to happen? :P

[06:55] <nine> Unless someone catches it, it'll explode?

[06:57] <AlexDaniel> m: Promise.in(1).then({ die ‘foo’ }); sleep 3

[06:57] <camelia> rakudo-moar 91be8b: ( no output )

[06:57] <AlexDaniel> m: Promise.in(1).then({ say ‘foo’; die ‘foo’; say ‘bar’ }); sleep 3

[06:57] <camelia> rakudo-moar 91be8b: OUTPUT: «foo␤»

[06:57] <AlexDaniel> … where does it go?

[06:58] <AlexDaniel> nine: I was expecting an explosion that you can't really catch outside, but I really don't know now.

[06:59] <AlexDaniel> not a problem with whenever :)

[07:08] <nine> m: Promise.in(1).then({ say ‘foo’; die ‘foo’; say ‘bar’ }).result; sleep 3

[07:08] <camelia> rakudo-moar 91be8b: OUTPUT: «foo␤Tried to get the result of a broken Promise␤  in block <unit> at <tmp> line 1␤␤Original exception:␤    foo␤      in block  at <tmp> line 1␤␤»

[07:08] <nine> .then also returns a Promise

[07:08] <AlexDaniel> nine: so yes, whenever version is actually prettier :P

[10:39] <Zoffix> [Coke]: Zoffix: going to step away for a bit. finding myself getting very frustrated, would rather not have that impact the conversation. Will get back to you.

[10:40] <Zoffix> [Coke]: so I'm still waiting for you to get back to me. When I started prepping 6.d you were the loudest telling me I can't do it. So I yielded to your expertise and stopped doing it and now you just disappear again. Feels a bit unfair.

[11:44] * Zoffix goes off the grid for a couple of weeks

[11:53] <nine> Zoffix: enjoy :)

[13:11] <jdv79> Zoffix: going to some far flung island with no electricity?

[13:12] <jdv79> in any case have fun!

[13:13] <timotimo> have fun, Zoffix :)

[13:14] <dogbert17> Zoffix: play through Prey while relaxing

[13:17] <dogbert17> lizmat: should I add tests for RT #130366 or have you already done that?

[13:17] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130366

[13:43] <nine> Looks like all the hotels recommended for TPC are sold out

[13:48] <llfourn> yikes! I didn't book yet.

[14:56] * llfourn manages to book something

[16:19] <lizmat> dogbert17: judging by the fact that "ack 130366 t/spec" comes up empty, I'd say there are no tests for it yet

[17:04] <[Coke]> more on the malformed utf8 error: https://github.com/perl6/doc/issues/1414

[17:07] <[Coke]> Zoffix: again, I never told you you couldn't do it.

[17:08] <[Coke]> So I feel your categorization is also a bit unfair.

[17:08] <[Coke]> I am not the blocker here. I'm just voting no based on the last proposal I saw.

[17:11] <[Coke]> regarding the utf8 error: I know other people aren't seeing it, but perhaps that diff might point to some hint about what's causing the issue.

[17:17] <[Coke]> Zoffix: if there are any particular questions you'd like me to try to answer, I'm happy to try that again.

[17:24] <Zoffix> [Coke]: the last question was, you saying "[Coke] Determine the "right" way to manage the roast spec" and me asking "what do you mean by manage?"

[17:24] <Zoffix> Do you mean the review process for 6.d inclusion?

[17:27] <Zoffix> And the other, I guess, is what's missing in https://github.com/perl6/6.d-prep/tree/master/TODO ? To me, it doesn't at all look like an impossible task for X number of weeks

[17:30] <Zoffix> As for Naming Issue Burnout, someone mentioned as the reason for 6.d being on Diwalli as impossible: the way I envison this is we present organized community feedback and leading reasoning for name extension to TimToady a month or so prior to release and he makes an executive decision whether and how to extend the language name to include an additional word that can be used standalone. Boom. Done. What's

[17:30] <Zoffix> there to burn out about and why does that impair 6.d release dates?

[17:30] <Zoffix> Dunno. This shit's look easy to me, but people keep saying it ain't. I don't know whom to believe my perception or others' :)

[17:31] <Zoffix> m: say "{Date.new("2017-10-19"} weeks until Diwali"

[17:31] <camelia> rakudo-moar 91be8b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> 3say "{Date.new("2017-10-19"7⏏5} weeks until Diwali"␤»

[17:32] <Zoffix> m: say "{(Date.new("2017-10-19") - Date.now) / 7} weeks until Diwali"

[17:32] <camelia> rakudo-moar 91be8b: OUTPUT: «No such method 'now' for invocant of type 'Date'. Did you mean any of these?␤    new␤    not␤␤  in block <unit> at <tmp> line 1␤␤»

[17:32] <Zoffix> m: say "{(Date.new("2017-10-19") - Date.today) / 7} weeks until Diwali"

[17:32] <camelia> rakudo-moar 91be8b: OUTPUT: «13.285714 weeks until Diwali␤»

[17:34] <Zoffix> Releasing a Diwali release widely off the actual Diwali date is just... weird.

[17:37] <geekosaur> code names are code names

[17:39] * Zoffix re-disappears, but will read the answers in the chatlog upon return

[18:03] <perlpilot> huh ... diwali will be released on my daughter's birthday.

[18:03] <perlpilot> (maybe :-)

[19:49] <[Coke]> another reason not to release on diwali. we do it once, it's the punchline to a long running joke. we do it twice, we're setting a precedent.

[20:00] <geekosaur> it was also rushed in unfortunate ways to make that punchline. that's another precedent it's best not to set imo

[20:18] <lucasb> Can I add some 6.d suggestions as issues in that repo?

[20:21] <lucasb> (or maybe it's better to start a thread in the mailing list...)

[20:44] <[Coke]> I think it's fine to add suggestions to the repo

[20:52] <Zoffix> Then let's not call it Diwali. Let's use something date-neutral.

[20:54] <Zoffix> lucasb: that's the purpose of the repo. To keep everything in one place. Please add everything to the repo instead of mailing lists some people might not be subscribed to

[20:54] <Zoffix> (mailing list are so '80s)

[20:54] * lucasb feels old

[20:55] <lucasb> ok, thanks. will add :)

[20:57] <Zoffix> .oO( 6.d "Drunk Druid" )

[20:58] <Zoffix> .oO( 6.d "Dreamy Dragon" )

[20:59] <Zoffix> .oO( 6.d "Dreamy Dusky-Wing" )

[20:59] <Zoffix> ^ actual butterfly name

[20:59] <Zoffix> http://butterfly.ucdavis.edu/butterfly/Erynnis/icelus

[21:01] <Zoffix> "Dotted Blue" "Dainty Sulphur" other ones. Yeah, I could totally get behind using butterfly names that start with release letter as release codewords

[21:02] <Zoffix> "Dismorphiinae"

[21:03] <Zoffix> Oh... 6.d "Dismorphia"  a genus of butterflies that actually look nice for a change: https://en.wikipedia.org/wiki/Dismorphia

[21:09] <timotimo> That was also the end of the first line in the file. (I.e. the first line of the JSON file contained just the opening bracket).

[21:09] <timotimo> ...

[21:09] <timotimo> i didn't mean to paste, i wanted the context menu ...

[21:09] <timotimo> living with a broken trackpad is terrible

[21:11] <Geth> ¦ 6.d-prep: 0405d453ba | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[21:11] <Geth> ¦ 6.d-prep: Add proposal to base release name...

[21:11] <Geth> ¦ 6.d-prep:

[21:11] <Geth> ¦ 6.d-prep: ...on a butterfly genus instead of some holiday

[21:11] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/0405d453ba

[21:13] <lucasb> m: say my num $

[21:13] <camelia> rakudo-moar 91be8b: OUTPUT: «NaN␤»

[21:13] <lucasb> m: say quietly +num

[21:13] <camelia> rakudo-moar 91be8b: OUTPUT: «0␤»

[21:13] <lucasb> ^^ I was going to create a issue in 6.d-prep to discuss to what value native num should be initialized

[21:14] <Zoffix> NaN

[21:14] <Zoffix> Do we even have tests for this?

[21:14] <Zoffix> As in, it don't got to be 6.d

[21:15] <lucasb> well, I saw that as I change in the language, but maybe it's not like that... :)

[21:15] <lucasb> *as a change in the language...

[21:16] <Zoffix> m: say +NaN

[21:16] <camelia> rakudo-moar 91be8b: OUTPUT: «NaN␤»

[21:16] <Zoffix> to me looks just a simple bug report

[21:17] <Zoffix> Oh, woop

[21:17] <Zoffix> Was wondering why there's no warning :)

[21:17] <Zoffix> ?m: say +Num

[21:17] <Zoffix> m: say +Num

[21:17] <camelia> rakudo-moar 91be8b: OUTPUT: «Use of uninitialized value of type Num in numeric context␤  in block <unit> at <tmp> line 1␤0␤»

[21:18] <Zoffix> lucasb: actually, I don't think there's any bugs. The typeobject gets coerced to zero in all cases. And default of `num` is NaN, since it can't be the type object

[21:18] <Geth> ¦ roast: dogbert17++ created pull request #285: Add tests for RT #130366

[21:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/285

[21:18] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130366

[21:18] <Zoffix> m: say +Proc::Async

[21:18] <camelia> rakudo-moar 91be8b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling prefix:<+>(Proc::Async) will never work with proto signature ($?)␤at <tmp>:1␤------> 3say 7⏏5+Proc::Async␤»

[21:18] <Zoffix> reaaally

[21:19] <Zoffix> Works fine locally

[21:19] <Zoffix> m: say +IO::Socket

[21:19] <camelia> rakudo-moar 91be8b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling prefix:<+>(IO::Socket) will never work with proto signature ($?)␤at <tmp>:1␤------> 3say 7⏏5+IO::Socket␤»

[21:19] <Zoffix> m: say +Date

[21:19] <camelia> rakudo-moar 91be8b: OUTPUT: «Use of uninitialized value of type Date in numeric context␤  in block <unit> at <tmp> line 1␤0␤»

[21:19] <Zoffix> there

[21:20] <dogbert17> Zoffix: are you still off the grid ?

[21:21] <Zoffix> Oh right

[21:21] <dogbert17> clickbaits lizmat with https://github.com/perl6/roast/pull/285

[21:28] <lucasb> m: class C {}; say quietly +C

[21:28] <camelia> rakudo-moar 91be8b: OUTPUT: «0␤»

[21:29] <lucasb> ok, this is new to me. I didn't know typeobjects numified to zero. (I was expecting an error)

[21:29] <Geth> ¦ 6.d-prep: 0b45a1f143 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[21:29] <Geth> ¦ 6.d-prep: Add extended language topic TODO

[21:29] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/0b45a1f143

[21:30] <Zoffix> lucasb: now THAT is a 6.d-worthy issue :)

[21:30] <Zoffix> I'm fully +2 on abandoning Perl 5's semantics and just erroring out on typeobject's since many ops fail on them instead of treating them as zeros

[21:30] * Zoffix re-degrids self

[21:36] <AlexDaniel> “Dismorphia” is an awesome idea

[21:40] <Geth> ¦ 6.d-prep: 6512fc5e80 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[21:40] <Geth> ¦ 6.d-prep: Move naming section to bottom

[21:40] <Geth> ¦ 6.d-prep:

[21:40] <Geth> ¦ 6.d-prep: The rest of stuff is far more important

[21:40] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/6512fc5e80

[21:54] <ugexe> m: sub foo(uint8 $x) { $x }; say foo(-1).perl; my uint8 $x = -1; say $x.perl; # is this expected?

[21:54] <camelia> rakudo-moar 91be8b: OUTPUT: «-1␤255␤»

[21:56] <AlexDaniel> ugexe: well, I'm surprised that the last one gives 255 XD

[21:56] <AlexDaniel> ugexe: but this is a long-standing bug actually…

[21:57] <ugexe> m: my uint32 $x = -1; say $x.perl; # i assume its giving their max

[21:57] <camelia> rakudo-moar 91be8b: OUTPUT: «4294967295␤»

[21:57] <AlexDaniel> this may be related: RT #131149

[21:57] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131149

[21:58] <AlexDaniel> maybe this also RT #124294

[21:58] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=124294

[21:58] <AlexDaniel> or this? RT #130267?

[21:58] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130267

[21:59] <AlexDaniel> m: my uint8 $x = 255; print $x, " -> "; $x = $x + 1; say $x;

[21:59] <camelia> rakudo-moar 91be8b: OUTPUT: «255 -> 0␤»

[22:00] <AlexDaniel> c: 2017.01 my uint8 $x = 255; print $x, " -> "; $x = $x + 1; say $x;

[22:00] <committable6> AlexDaniel, ¦2017.01: «255 -> 0»

[22:00] <AlexDaniel> c: 2016.12 my uint8 $x = 255; print $x, " -> "; $x = $x + 1; say $x;

[22:00] <committable6> AlexDaniel, ¦2016.12: «255 -> 0»

[22:01] <AlexDaniel> ah, it was this one

[22:01] <AlexDaniel> c: 2017.01,HEAD my uint8 $x = 255; print $x, " -> "; $x++; say $x;

[22:01] <committable6> AlexDaniel, ¦2017.01: «255 -> 256» ¦HEAD(91be8bc): «255 -> 0»

[22:01] <AlexDaniel> ugexe: anyway, no, this is not expected. Feel free to submit a new ticket or comment on any existing one.

[22:04] <jnthn> uint8 rolling over to 0 looks right to me, or is that not the thing being considered a problem?

[22:04] <jnthn> Oh, uint8 as an argument doing crazy things

[22:04] <jnthn> Yeah, that's wrong

[22:04] <jnthn> I'm sure there's a ticket about that

[22:05] <AlexDaniel> jnthn: no-no that's not a problem for sure. I think I just wanted to point out that bugs like this are pretty much … “expected” in some sense

[22:06] <AlexDaniel> “known” is probably a better word, even though we don't have a full list of problems with uints yet

[22:07] <jnthn> Yeah, they need some more work

[22:08] <Geth> ¦ rakudo/nom: 8e960522e5 | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[22:08] <Geth> ¦ rakudo/nom: Fix typo in comment

[22:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8e960522e5

[22:13] <ugexe> m: sub foo(UInt $x) { $x }; say foo(-1); # expected (for brevity)

[22:13] <camelia> rakudo-moar 91be8b: OUTPUT: «Constraint type check failed in binding to parameter '$x'; expected UInt but got Int (-1)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:15] <jnthn> MoarVM doesn't presently distinguish int/unit in parameters/arguments; dealing with that would solve quite a few issues, I suspect.

[22:37] <samcv> .tell AlexDaniel if .uniprop('Extend') { return " " ~ $_  } elsif .uniprop('Prepend') { return $_ ~ " " }

[22:37] <yoleaux> samcv: I'll pass your message to AlexDaniel.

[22:37] <AlexDaniel> .

[22:37] <yoleaux> 22:37Z <samcv> AlexDaniel: if .uniprop('Extend') { return " " ~ $_  } elsif .uniprop('Prepend') { return $_ ~ " " }

[22:38] <samcv> you can also use nbsp if you want to be even more *proper*

[22:38] <samcv> which is what unicode recommends to use to attach things to

[22:38] <AlexDaniel> u: { .uniprop('Extend') and .uniprop('Prepend') }

[22:38] <samcv> not gonna be both

[22:38] <samcv> "\c[NBSP]" works since months ago when i added name aliases fyi

[22:39] <unicodable6> AlexDaniel, U+0000 <control-0000> [Cc] (control character)

[22:39] <unicodable6> AlexDaniel, U+0001 <control-0001> [Cc] (control character)

[22:39] <samcv> ah cause it returns Other

[22:40] <samcv> just do .uniprop('GCB') eq 'Extend'

[22:40] <samcv> or .uniprop('GCB') eq 'Prepend'

[22:41] <samcv> my $gcb = .uniprop('GCB'); if $gcb eq 'Extend' { return $_ ~ "\c[NBSP]" } elsif $gcb eq 'Prepend' { return "\c[NBSP]" ~ $_ }

[22:42] <samcv> that is what i'd do and what unicode recommends

[22:42] <samcv> though someday we may have INVISIBLE CHARACTER which you can attach to it but for now NBSP is what is recommended you attach things to

[22:44] <samcv> AlexDaniel, also you can use $gcb eq 'Control' for control characters

[22:44] <samcv> and reduce the calls to .uniprop inside sanify

[22:45] <AlexDaniel> ooh

[22:45] <samcv> AlexDaniel, does that make sense? any other Q?

[22:46] <AlexDaniel> samcv: yes, thank you very much!

[22:46] <AlexDaniel> samcv: no, not yet at least!

[22:48] <samcv> ok :P

[22:48] <samcv> well you know what you need to do at least :P

[22:54] <AlexDaniel> m: “\c[ZWJ]”.ord.base(16).say

[22:54] <camelia> rakudo-moar 8e9605: OUTPUT: «200D␤»

[22:55] <AlexDaniel> unidump: u+200D

[22:55] <unicodable6> AlexDaniel, https://gist.github.com/9d5356b78baa8469036db0e9b44fd101

[22:55] <samcv> ZWJ has GCB ZWJ

[22:55] <AlexDaniel> yeah, I see

[22:56] <AlexDaniel> samcv: so I should surround it from both sides with NBSP, no?

[22:56] <samcv> uh

[22:56] <samcv> it's a nonprinting character though :P

[22:56] <samcv> unlike the other ones we were talking about

[22:57] <samcv> on the left only is needed

[22:57] <AlexDaniel> /o\

[22:57] <samcv> so "\c[NBSP]" ~ "\c[ZWJ]"

[22:57] <AlexDaniel> u: zero width joiner

[22:57] <unicodable6> AlexDaniel, U+200C ZERO WIDTH NON-JOINER [Cf] (‌)

[22:57] <unicodable6> AlexDaniel, U+200D ZERO WIDTH JOINER [Cf] (‍)

[22:58] <samcv> also do the same with ZWNJ

[22:58] <AlexDaniel> sooo it should not attempt to print it at all, right?

[22:58] <samcv> why not

[22:58] <samcv> you seem to want to so go ahead :P

[22:58] <samcv> just put nbsp on the left on ZWNJ and ZWJ

[22:58] <samcv> then the other two i mentioned and i think that's all you need

[22:59] <AlexDaniel> ZWNJ is Extend though

[22:59] <AlexDaniel> m: say “\c[ZWNJ]”.uniprop(‘GCB’).say

[22:59] <camelia> rakudo-moar 8e9605: OUTPUT: «Extend␤True␤»

[22:59] <AlexDaniel> m: say “\c[ZWNJ]”.uniprop(‘GCB’)

[22:59] <camelia> rakudo-moar 8e9605: OUTPUT: «Extend␤»

[22:59] <AlexDaniel> m: say “\c[ZWJ]”.uniprop(‘GCB’)

[22:59] <samcv> wel same thing i said anyway

[22:59] <camelia> rakudo-moar 8e9605: OUTPUT: «ZWJ␤»

[22:59] <samcv> that you put NBSP on the left

[22:59] <AlexDaniel> samcv: I'm just so happy that you exist…

[22:59] <samcv> hah

[22:59] <samcv> no problem

[23:00] <samcv> i'm glad i exist too :P

[23:03] <AlexDaniel> samcv: uh, if $gcb eq 'Extend' { return "\c[NBSP]" ~ $_ } then? Not other way round?

[23:12] <AlexDaniel> u: { .uniprop(‘GCD’) eq ‘E_Modifier’ }

[23:12] <unicodable6> AlexDaniel, Found nothing!

[23:12] <AlexDaniel> u: { .uniprop(‘GCB’) eq ‘E_Modifier’ }

[23:12] <unicodable6> AlexDaniel, U+1F3FB EMOJI MODIFIER FITZPATRICK TYPE-1-2 [Sk] (????)

[23:12] <unicodable6> AlexDaniel, U+1F3FC EMOJI MODIFIER FITZPATRICK TYPE-3 [Sk] (????)

[23:12] <unicodable6> AlexDaniel, 5 characters in total: https://gist.github.com/bc20cc5c426607ee21d100da636d1c51

[23:13] <AlexDaniel> u: { .uniprop(‘GCB’) eq ‘CR’ }

[23:13] <AlexDaniel> u: { .uniprop(‘GCB’) eq ‘LF’ }

[23:13] <unicodable6> AlexDaniel, U+000D <control-000D> [Cc] (control character)

[23:14] <unicodable6> AlexDaniel, U+000A <control-000A> [Cc] (control character)

[23:14] <AlexDaniel> .u U+000D

[23:14] <yoleaux> U+000D CARRIAGE RETURN (CR) [Cc] (␍)

[23:14] <AlexDaniel> yoleaux: that's not exactly that character :S

[23:26] <samcv> who wants to name 6.d Dingy Purplewing?

[23:26] <samcv> :P
