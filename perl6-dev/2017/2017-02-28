[00:02] <Zoffix> Actually t/spec/S09-typed-arrays/hashes.t

[00:02] <Zoffix> stupid copy-paste....

[00:03] <Zoffix> Actually t/spec/S09-typed-arrays/hashes.t doesn't have a contradictory test. It was just passing for the wrong reason. All of the failing tests reuse %h, checking the failures don't create `a` key.... but that key already exists in %h prior to tests and the reason they were passing is because trying to do a failed assignment nulled the hash

[00:03] <Zoffix> So lizmat++ actually fixed an issue that wasn't being caught by bad tests.

[00:05] <Geth> ¦ rakudo/nom: 61a65cee3d | (Zoffix Znet)++ | 2 files

[00:05] <Geth> ¦ rakudo/nom: Fix REPL printing a thrown-and-caught Exception

[00:05] <Geth> ¦ rakudo/nom:

[00:05] <Geth> ¦ rakudo/nom: Fixes https://rt.perl.org/Ticket/Display.html?id=130876#txn-1451692

[00:05] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/61a65cee3d

[00:50] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/02/28/2017-09-the-ios-are-a-changin/

[01:04] <cog_> lizmat++

[07:14] <[Tux]> This is Rakudo version 2017.02-120-g61a65cee3 built on MoarVM version 2017.02-9-gc5379702

[07:14] <[Tux]> csv-ip5xs        2.845

[07:14] <[Tux]> test            12.718

[07:14] <[Tux]> test-t           4.953 - 4.980

[07:14] <[Tux]> csv-parser      13.286

[10:12] <Geth> ¦ roast: 1c24625e0a | (Jonathan Worthington)++ | S17-supply/supplier-preserving.t

[10:12] <Geth> ¦ roast: Fix a race condition in S::P test.

[10:12] <Geth> ¦ roast:

[10:12] <Geth> ¦ roast: The @closings array could end up pushed to from multiple threads, so

[10:12] <Geth> ¦ roast: very occasionally something would go rotten.

[10:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1c24625e0a

[10:12] <jnthn> dogbert17: ^^ fixes one of the things you reported yesterday, hopefully :)

[10:19] <lizmat> http://stackoverflow.com/questions/42505139/does-changing-perl-6s-out-change-standard-output-for-child-processes

[10:19] <jnthn> No

[10:19] <jnthn> :)

[10:21] <jnthn> Replacing $*OUT isn't changing STDOUT at the handle level either, it's just changing the object that we use

[10:22] <jnthn> Could we fudge that somehow in the shell implementation? I guess, yes.

[10:24] <jnthn> A bit like we do with %*ENV and $*CWD - we never call setenv/chdir, we just use it in the appropriate places.

[10:24] <jnthn> But no, we haven't gone down the path of making $*OUT and $*ERR affect process spawning

[10:25] <lizmat> nor do I think we can, because one could replace $*OUT with something that doesn't do anything with handles at the OS level

[10:25] <lizmat> and how would you pass that on to a child process ?

[10:25] <jnthn> Oh, you wouldn't

[10:26] <jnthn> You'd have to pretend :err and :out were supplied

[10:26] <jnthn> And write stuff to $*OUT and $*ERR as it comes in

[10:27] <jnthn> I'm still not sure whether we should, however ;)

[11:16] <Geth> ¦ nqp: 44a3fed66b | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[11:16] <Geth> ¦ nqp: Bump MOAR_REVISION.

[11:16] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/44a3fed66b

[11:16] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.02-7-g3d85900...2017.02-17-gec99d41

[11:17] <Geth> ¦ roast: 7996c41781 | (Elizabeth Mattijsen)++ | S09-typed-arrays/hashes.t

[11:17] <Geth> ¦ roast: Adapt tests so we test something sensible

[11:17] <Geth> ¦ roast:

[11:17] <Geth> ¦ roast: If a STORE on a Hash fails, it should leave the Has unchanged, not

[11:17] <Geth> ¦ roast: empty (basically what ae7bcf1b8e1fa612413d changed).

[11:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7996c41781

[11:29] <Geth> ¦ rakudo/nom: 26e6993bd8 | (Jonathan Worthington)++ | tools/build/NQP_REVISION

[11:29] <Geth> ¦ rakudo/nom: Bump to get latest MoarVM.

[11:29] <Geth> ¦ rakudo/nom:

[11:29] <Geth> ¦ rakudo/nom: * Fix CArray so that setting a type object in an element (for struct,

[11:29] <Geth> ¦ rakudo/nom:   pointer, and array members) will pass NULL, not some junk value

[11:29] <Geth> ¦ rakudo/nom:   (jnthn++)

[11:29] <Geth> ¦ rakudo/nom: * Fix a very occasional deadlock when GC occurred exactly at the same

[11:29] <Geth> ¦ rakudo/nom:   time as the event loop worker thread was being spawned (jnthn++)

[11:29] <Geth> ¦ rakudo/nom: * Fixes to :i by using foldcase semantics, not lowercase

[11:29] <Geth> ¦ rakudo/nom:   (MasterDuke17++)

[11:29] <Geth> ¦ rakudo/nom: * Fix reporting of thread spawning errors when out of or low on memory

[11:29] <Geth> ¦ rakudo/nom:   or handles (timotimo++)

[11:29] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/26e6993bd8

[11:29] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.02-37-ga0de23c...2017.02-38-g44a3fed

[11:30] <Geth> ¦ rakudo/nom: 2ad93cfa3d | (Jonathan Worthington)++ | 4 files

[11:30] <Geth> ¦ rakudo/nom: Test nulling of CStruct/CArray elements.

[11:30] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2ad93cfa3d

[11:37] * lizmat pulls, builds and tests

[11:52] <Geth> ¦ roast: f42a931504 | (Elizabeth Mattijsen)++ | S05-modifier/ignorecase.t

[11:52] <Geth> ¦ roast: Unfudge now passing tests

[11:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f42a931504

[11:53] <jnthn> Figured you'd beat me to that :)

[11:58] * masak eats, shoots, and leaves :P

[12:03] <lizmat> bamboo-shoots and leaves?

[12:04] <lizmat> .oO( the food of pandas )

[12:08] <jnthn> :)

[12:08] <jnthn> lunch &

[13:07] <Zoffix> lucasb: 6.d is not scheduled; the list of proposed changes is at https://github.com/perl6/specs/blob/master/v6d.pod

[13:08] <lucasb> thanks Zoffix. I could add my ideas to specs/v6d.pod; but I'm sure they are controversial; so I prefer to say them here. If anybody likes them, then they can be added to v6d.pod

[13:09] <lucasb> Proposed change #1: make native num defaults to 0.0 instead of NaN

[13:09] <lucasb> m: say my num $

[13:09] <camelia> rakudo-moar 2ad93c: OUTPUT: «NaN␤»

[13:10] <lucasb> Proposed change #2: make $() really mean the empty itemized list instead of the $/ thing

[13:10] <Zoffix> I'll raise you: all of our "uninitialized numeric is zero" concept needs to be fixed; or tossed entirely, as I propsoe it.

[13:11] <Zoffix> m: say Num + 0

[13:11] <camelia> rakudo-moar 2ad93c: OUTPUT: «Invocant requires an instance of type Num, but a type object was passed.  Did you forget a .new?␤  in block <unit> at <tmp> line 1␤␤»

[13:11] <Zoffix> ^ broken

[13:12] <Zoffix> lucasb: what's the reasoning for the $() thing? Never once used it in my code to mean an itemized list. And I imagine its current meaning is much more useful, and would be even more useful if it checked definedness instead of truthiness

[13:13] <lucasb> sorry, I didn't understand. Do you want Int+0, Num+0 to return 0 instead of failing?

[13:15] <Zoffix> lucasb: Perl 5 has a thing where an `undef` is zero in numeric context and it issues a warning. We copied that.

[13:15] <Zoffix> m: say quietly +Num

[13:15] <camelia> rakudo-moar 2ad93c: OUTPUT: «0␤»

[13:16] <Zoffix> But not only do we have many numeric types, we also have an infinite number of `undef`s, so the concept doesn't really work. One of the issues is the Num + 0 example that should result in 0e0 + a warning

[13:16] * Zoffix greps logs

[13:16] <lucasb> idk if it's relevant, but I was talking specifically about the *native* num, not Num.

[13:17] <lucasb> native int already is initialized with 0

[13:17] <lucasb> native types are never undefined

[13:18] <Zoffix> Well, don't see the logs, but there many more examples of this brokeness, and I came to the conclusion that we should abandon this idea of treating an undefined numeric as a zero entirely.

[13:18] <Zoffix> lucasb: it's not so much initialized that it can't be anything else (other than some other valid int number). Whereas with `num` we can give it a non-numeric value, a NaN

[13:18] <Zoffix> There's no "uninitialized int"

[13:19] <Zoffix> lucasb: but why 0.0?

[13:19] <Zoffix> or rather 0e0

[13:19] <lizmat> could this be related to TimToady's slang work?  http://www.nntp.perl.org/group/perl.perl6.users/2017/02/msg3320.html

[13:21] <lucasb> I can only think of 0e0 or NaN as the default value for native num. between these 2, I personaly prefer 0e0

[13:21] <Zoffix> lucasb: but why?

[13:22] <lucasb> I can't put into words, it just feels the right thing, sorry :)

[13:23] <Zoffix> heh

[13:24] <lucasb> Proposed change #3: get rid of the undefine() function and add .clear methods to Array and Hash

[13:24] <Zoffix> NaN just feels right to me: no number was assigned to the num, so it doesn't have a number, or reworded, it has not-a-number

[13:24] <lucasb> undefine() doesn't undefine array and hashes, it just clears them

[13:24] <Zoffix> we have an undefine function? :o

[13:24] <lucasb> m: my @a; undefine(@a); say @a.defined

[13:24] <camelia> rakudo-moar 2ad93c: OUTPUT: «True␤»

[13:24] <lucasb> I wish there was @a.clear and %h.clear for this purpose

[13:25] * Zoffix is happy with = ()

[13:25] <timotimo> what, we have undefine()?

[13:25] <Zoffix> Yeah, I'm surprised too

[13:26] <Zoffix> There's a whole bunch of tests for it too, although it's not documented.

[13:26] <lucasb> I guess nobody uses it :)

[13:26] <lucasb> an indicantion that it is a candidate to go away?

[13:27] <Zoffix> lucasb: heh, well, the "nobody uses it" is based on two people, at least one of which doesn't use Perl 6...

[13:27] <Zoffix> lucasb: there are tests for it in the Perl 6 Specification, so it's not going away without a fight :)

[13:27] <lizmat> it's actually in the speculation: S32-setting-library/Basics, line 60

[13:28] <lucasb> I was half joking. undefine() for scalars makes sense. I just pointed its behavior with Array and Hash

[13:28] <lizmat> actual implementation is just assiging Nil to whatever is being passed

[13:29] <timotimo> right

[13:29] <lizmat> actually, assign Empty to arrays and hashes

[13:31] <lucasb> yes, assinging Nil/Empty/() to arrays and hahes *makes* sense. just the name "undefine" is a little off for arrays and hashes, because it can be confused with the definedness of the object, which concrete arrays and hashes are always defined

[13:33] <lucasb> these 3 are the only changes that come to my mind, now. thanks everybody for listening :)

[13:34] <timotimo> that's a good number

[13:35] <timotimo> perl6 started with how many hundred changes that were suggested? ;)

[13:35] <lucasb> 331, 311 rfcs or something :)

[13:35] <Zoffix> lucasb: well, write them down

[13:35] <Zoffix> huggable: v6.d

[13:35] <huggable> Zoffix, Proposed changes for Perl 6 v6.d: https://github.com/perl6/specs/blob/master/v6d.pod

[13:36] <Zoffix> "Please only submit planned changes if you are willing to provide a patch to implement them."

[13:36] <lucasb> oops, 361 rfcs to be exact

[13:37] <Zoffix> lucasb: I can make the patches for you if you don't wish to do them yourself, but it'll be your job to argue for the change. (mention that fact in stakehodler part)

[13:37] <lucasb> Zoffix: thanks!

[13:38] * jnthn back

[13:38] <lucasb> I feel the ideas need to achieve a little consensus before adding them to v6d.pod, so let the ideas stay a little in the air in the following weeks, for people to talk about...

[13:39] * Zoffix will likely forget about this conversation by tomorrow :}

[13:40] <lucasb> no problem, I always repeat N times my ideas, before I get a definite yes or no. so I'll bring this up other time :)

[13:41] <Zoffix> lizmat: fwiw, perl6-debug-m doesn't even start for me. I get "Illegal option --nqp-lib"

[13:42] <Zoffix> But the error in the message does suggest the brain changes, indeed.

[13:42] <timotimo> jnthn: i'm inclined to write up a response along "DIHWIDT" to bgill's RT #130886

[13:42] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130886

[13:42] <timotimo> though it surprises me a little that we don't get "inconsistent bind result" there

[13:43] <jnthn> Ah, is that the side-effects in where clauses?

[13:43] * Zoffix doesn't get where the inconsistent bind is

[13:44] <jnthn> But yeah, if you do side effects in your where clauses and something breaks, you get to keep all the pieces so far as I'm concerned.

[13:44] <Zoffix> As I see it, the where clause can give different result for same input; there are no sideeffects

[13:45] <timotimo> yup, the where clause pulls one value out of an iterator each time

[13:45] <timotimo> there are side-effects, though

[13:45] <timotimo> the iterator gets advanced

[13:45] <jnthn> pull-one is a side-effect

[13:45] <timotimo> i'll write something up

[13:45] <jnthn> timotimo++

[13:45] <Zoffix> m: multi foo($ where {$++ %% 5 ?? 1 !! 0}) { say "here" }; multi foo($) { say "♥

[13:45] <camelia> rakudo-moar 2ad93c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in double quotes; couldn't find final '"' ␤at <tmp>:1␤------> 3}) { say "here" }; multi foo($) { say "♥7⏏5<EOL>␤    expecting any of:␤        argument list␤    …»

[13:45] <Zoffix> m: multi foo($ where {$++ %% 5 ?? 1 !! 0}) { say "here" }; multi foo($) { say "♥" }; foo(42) xx 20

[13:45] <camelia> rakudo-moar 2ad93c: OUTPUT: «here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤»

[13:46] <Zoffix> m: multi foo($ where {$++ %% 2 ?? 1 !! 0}) { say "here" }; multi foo($) { say "♥" }; foo(42) xx 20

[13:46] <camelia> rakudo-moar 2ad93c: OUTPUT: «here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤»

[13:47] <Zoffix> m: multi foo($ where {$++ %% 2 ?? 1 !! 0}) { say "here" }; multi foo($) { say "♥" }; foo(42) for ^20

[13:47] <camelia> rakudo-moar 2ad93c: OUTPUT: «here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤»

[13:49] <timotimo> m: my $val; multi foo($ where {$val++ %% 2 ?? 1 !! 0}) { say "here" }; multi foo($) { say "♥" }; foo(42) for ^20

[13:49] <camelia> rakudo-moar 2ad93c: OUTPUT: «Internal error: inconsistent bind result␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:56] <timotimo> replied to that bug

[13:56] <Geth> ¦ rakudo/nom: 05add43243 | (Jonathan Worthington)++ | 2 files

[13:56] <Geth> ¦ rakudo/nom: Default to translating newlines in Proc::Async.

[13:56] <Geth> ¦ rakudo/nom:

[13:56] <Geth> ¦ rakudo/nom: At least, for stdout and stderr. Still need to look into stdin.

[13:56] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/05add43243

[13:56] <[Coke]> (https://irclog.perlgeek.de/perl6-dev/2017-02-28#i_14178991) - I think this is too strongly worded. Someone with a good idea may not end up implementing the idea; Certainly you can't complain if no one volunteers to do it on your behalf...

[13:56] * perlpilot agrees with [Coke] FWIW

[13:56] <perlpilot> (good morning btw :)

[13:57] <timotimo> ohai perlpilot

[14:05] <Zoffix> man, our default REPL is terrible, can't even move cursor around

[14:06] <timotimo> if you don't have anything readline-like ... yeah

[14:06] <timotimo> i'm glad we don't have a readline implementation in core, though

[14:08] <DrForr> so am I :) :/

[14:08] <timotimo> you know how linenoise started, and how linenoise ended up being? :P

[14:09] <timotimo> "bah, readline is like five million lines of code. it can't be that difficult to write a readline-like in a few hundred lines"

[14:09] <timotimo> "oh, this doesn't work on all systems. oh, there's some edge cases here. ah, we have to support these kinds of system properties. oh, not all terminals behave the same way"

[14:09] <timotimo> "how the fuck did we end up with six million lines of code?!?"

[14:10] <DrForr> Those who do not understand terminals are doomed to reimplement them, and even worse.

[14:10] <Zoffix> It has 6 million lines of code? :o

[14:10] <timotimo> no it doesn't, that was pure hyperbole

[14:11] <timotimo> it probably has less LoC than gnu readline

[14:11] <timotimo> but still

[14:12] <timotimo> people always be like "it can't be hard to make the cursor move around and have a bit of history"

[14:12] <timotimo> and then they either end up with a broken/buggy/incomplete implementation, or they figure out that it can actually be hard

[14:12] <timotimo> in short: fuck. this. shit.

[14:13] <jnthn> Maybe the default repl should just start a web server and open your browser :P

[14:13] <perlpilot> timotimo: remember that progress is made by the unreasonable man  ;)

[14:13] <Zoffix> m: sub foo { return ($^a, False) }; my ($a, $b) = foo Slip; dd [$a, $b]

[14:13] <camelia> rakudo-moar 05add4: OUTPUT: «[Slip, Bool::False]␤»

[14:13] <Zoffix> wc

[14:13] <timotimo> jnthn: actually, that sounds kinda nice

[14:21] <brrt> anybody recall the antirez guy writing a text editor in 1kb

[14:21] <timotimo> cool

[14:21] <brrt> the good thing about that 1kb was that it was really easy to find bugs in :-)

[14:28] <Geth> ¦ rakudo/nom: 0a2eef8fb0 | (Jonathan Worthington)++ | src/core/Str.pm

[14:28] <Geth> ¦ rakudo/nom: Add a :translate-nl option to Str.encode.

[14:28] <Geth> ¦ rakudo/nom:

[14:28] <Geth> ¦ rakudo/nom: If we're on Windows, this will replace \n with \r\n. At some point it

[14:28] <Geth> ¦ rakudo/nom: would be nice to get VM-backed decoders to do this in a single pass,

[14:28] <Geth> ¦ rakudo/nom: but that can wait until the larger upcoming encoding refactors.

[14:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0a2eef8fb0

[14:34] <lizmat> jnthn: maybe make :$translate-nl = False default to Rakudo::Internals.IS-WIN ?

[14:36] <Geth> ¦ rakudo/nom: 2973ccd5c7 | (Jonathan Worthington)++ | src/core/Proc/Async.pm

[14:36] <Geth> ¦ rakudo/nom: Make Proc::Async do newline translation on stdin.

[14:36] <Geth> ¦ rakudo/nom:

[14:36] <Geth> ¦ rakudo/nom: So that print/put/say on Windows will transform \n to \r\n.

[14:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2973ccd5c7

[14:37] <jnthn> lizmat: No because of the patch I just pushed :)

[14:37] <jnthn> Which uses it as the default for stdout/stderr too

[14:38] <jnthn> d'oh, my :$enc = $!enc dupes something though

[14:38] <jnthn> I was sure that was already the way it iwas

[14:38] <jnthn> *was

[14:53] <Geth> ¦ rakudo/nom: 779ef286f9 | (Jonathan Worthington)++ | src/core/Proc/Async.pm

[14:53] <Geth> ¦ rakudo/nom: Tweak object-level enc/translate-nl defaulting.

[14:53] <Geth> ¦ rakudo/nom:

[14:53] <Geth> ¦ rakudo/nom: We don't need to do it twice for `enc`, and the previous appraoch to

[14:53] <Geth> ¦ rakudo/nom: `translate-nl` being different from how we did it for `enc` was a bit

[14:53] <Geth> ¦ rakudo/nom: inconsistent, even if functionally equivalent.

[14:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/779ef286f9

[14:53] <Geth> ¦ nqp: 2780ed774a | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[14:53] <Geth> ¦ nqp: Bump MOAR_REVISION.

[14:53] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2780ed774a

[14:53] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.02-17-gec99d41...2017.02-18-g5f9d698

[14:55] <Geth> ¦ rakudo/nom: b4118a7375 | (Jonathan Worthington)++ | tools/build/NQP_REVISION

[14:55] <Geth> ¦ rakudo/nom: Get latest MoarVM.

[14:55] <Geth> ¦ rakudo/nom:

[14:55] <Geth> ¦ rakudo/nom: Exposes the newline translation functionality of VM-backed decoder,

[14:55] <Geth> ¦ rakudo/nom: which Rakudo is now using.

[14:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b4118a7375

[14:55] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.02-38-g44a3fed...2017.02-39-g2780ed7

[14:56] <Geth> ¦ roast: 875cc112ea | (Jonathan Worthington)++ | S17-procasync/basic.t

[14:56] <Geth> ¦ roast: Test to cover RT #130788.

[14:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/875cc112ea

[14:56] <Geth> ¦ roast: a5b0209812 | (Jonathan Worthington)++ | S17-procasync/basic.t

[14:56] <Geth> ¦ roast: Remove .subst("\r\n", "\n").

[14:56] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130788

[14:56] <Geth> ¦ roast:

[14:56] <Geth> ¦ roast: Not required after latest fixes.

[14:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a5b0209812

[15:01] <Zoffix> Wonder if https://github.com/perl6/roast/blob/master/S17-channel/stress.t really needs the randomness in it

[15:01] <Zoffix> I like running full stresstests, but that test's variance in runtimes is really annoying. Sometimes takes just 15 seconds, others 3-5 minutes :/

[15:02] <Zoffix> m: say 244/60

[15:02] <camelia> rakudo-moar 2973cc: OUTPUT: «4.066667␤»

[15:02] <Zoffix> Well, 1-2 minutes.

[15:10] <Geth> ¦ rakudo/nom: 7f9235c79d | (Zoffix Znet)++ | 2 files

[15:10] <Geth> ¦ rakudo/nom: Fix REPL thinking returned stuff is a thrown exception

[15:10] <Geth> ¦ rakudo/nom:

[15:10] <Geth> ¦ rakudo/nom: With the current versionb, it's possible to trick REPL into

[15:10] <Geth> ¦ rakudo/nom: thinking an exception was thrown when it really wasn't with code like:

[15:10] <Geth> ¦ rakudo/nom:

[15:10] <Geth> ¦ rakudo/nom: say "hi"; use nqp; my $x = REPL.new(nqp::getcomp("perl6"), %).repl-eval(q|die "meow"|);

[15:10] <Geth> ¦ rakudo/nom:

[15:10] <Geth> ¦ rakudo/nom: <…commit message has 5 more lines…>

[15:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7f9235c79d

[15:10] <Geth> ¦ roast: 5b965eb8ed | (Jonathan Worthington)++ | S17-channel/stress.t

[15:10] <Geth> ¦ roast: Make a stress test a little less stressful.

[15:10] <Geth> ¦ roast:

[15:10] <Geth> ¦ roast: The 2 minutes sometimes needed was a rather long time to wait, and

[15:10] <Geth> ¦ roast: this smaller example will either fail or flap on the bug.

[15:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5b965eb8ed

[15:11] <jnthn> git st

[15:11] <Zoffix> Wooo \o/ jnthn++

[15:11] <jnthn> oops

[15:11] <jnthn> :)

[15:35] * masak .oO( git st was too much for me to type, so I'm using a ligature instead: git ﬆ )

[15:37] <perlpilot> masak: why not "gst"?  or ligature that too  :)

[15:37] <Zoffix> why not g

[15:38] <perlpilot> not enough variation to get all of the git commands out of that one character.

[15:39] <Zoffix> sure there is

[15:39] <perlpilot> unless there are many unicode variations of g that I'm not aware of ...

[15:39] <Zoffix> g

[15:39] <Zoffix> gg

[15:39] <Zoffix> gggg

[15:39] <Zoffix> etc

[15:39] <timotimo> good game bro

[15:39] <Zoffix> There are a few

[15:39] <perlpilot> oh, but that messes with brevity

[15:40] <Zoffix> ⓖ🅖ｇ𝐠𝖌𝒈𝓰𝕘𝚐𝗀𝗴𝙜𝘨⒢🇬🄶🅶ǵgﻭﻭﻮБኗ𝔤ġɢǥgᵍƃƃgg

[15:41] <timotimo> %)

[15:41] <Zoffix> m: "ⓖ ｇ𝐠𝖌𝒈𝓰𝕘𝚐𝗀𝗴𝙜𝘨⒢   ǵgﻭﻭﻮБኗ𝔤ġɢǥgᵍƃƃgg".comb.unique.elems

[15:41] <camelia> rakudo-moar 7f9235: ( no output )

[15:41] <Zoffix> m: "ⓖ ｇ𝐠𝖌𝒈𝓰𝕘𝚐𝗀𝗴𝙜𝘨⒢   ǵgﻭﻭﻮБኗ𝔤ġɢǥgᵍƃƃgg".comb.unique.elems.say

[15:41] <camelia> rakudo-moar 7f9235: OUTPUT: «26␤»

[15:41] <Zoffix> 26 commands!

[15:54] <lucasb> "my $var does SomeRole" works. should "my $var does role {...}" work too?

[15:54] <jnthn> No

[15:55] <jnthn> The does trait expects a typename after it

[15:55] <lucasb> well, 'my $x; $x does role {...}' works

[15:55] <jnthn> Right, that's the does infix operator

[15:55] <lucasb> ah, got it! thanks jnthn

[15:56] <lucasb> difference between infix operator and an declaration

[15:56] <jnthn> Note that my $x does Role is mixing into the container too

[15:56] <jnthn> Whreas the does operator is talking about the value

[15:56] <jnthn> Which makes a difference when it's a Scalar

[16:36] <IOninja> ZOFVM: Files=1226, Tests=132924, 133 wallclock secs (22.01 usr  3.32 sys + 2402.17 cusr 312.99 csys = 2740.49 CPU)

[16:43] <Geth> ¦ rakudo/nom: 76f71878da | (Zoffix Znet)++ | src/core/IO/Path.pm

[16:43] <Geth> ¦ rakudo/nom: [io grant] Do not cache IO::Path.e results

[16:43] <Geth> ¦ rakudo/nom:

[16:43] <Geth> ¦ rakudo/nom: Fixes RT#130889: https://rt.perl.org/Ticket/Display.html?id=130889

[16:43] <Geth> ¦ rakudo/nom:

[16:43] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130889

[16:43] <Geth> ¦ rakudo/nom: The problem in the ticket is due to IO::Path not setting $!e when

[16:43] <Geth> ¦ rakudo/nom: write happens on a write-mode opened non-existent file. However,

[16:43] <Geth> ¦ rakudo/nom: even if that were fixed, we're still open to issues where the file's

[16:43] <Geth> ¦ rakudo/nom: existence changes on the filesystem, so we can't really cache that.

[16:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/76f71878da

[16:44] <Geth> ¦ roast: 908348eef1 | (Zoffix Znet)++ | S32-io/io-path.t

[16:44] <Geth> ¦ roast: Test IO::Path.e detects changes on filesystem

[16:44] <Geth> ¦ roast:

[16:44] <Geth> ¦ roast: RT#130889: https://rt.perl.org/Ticket/Display.html?id=130889

[16:44] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/76f71878da

[16:44] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130889

[16:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/908348eef1

[17:01] <IOninja> RT#130887 "method is public, so .perl.EVAL ought to be round-tripping the data that it exposes, however that's stored"

[17:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130887

[17:01] <IOninja> Doubt we can do that without setting the private attributes, which aren't preserved in .perl.EVAL roundtrip

[17:45] <ugexe> I'm surprised to see IO::Path.e caching go away (but glad). Seemed important last time I was getting stung by it

[17:45] <IOninja> ugexe: why surprised?

[17:46] <ugexe> I got the impression it was important for performance reasons from when I would comment on how I didn't like it

[17:46] <IOninja> Ah.

[17:47] * IOninja braces for lizmat's wrath then

[17:47] <ugexe> ~1 year ago though

[17:47] <IOninja> I removed it 'cause it's so obviously wrong to me; and I figured there'd be deoptimization, but I didn't even measure it

[17:48] <ugexe> however if you do get rid of it that means you can get rid of instances of `"$!some_IO_Path".IO` (cache busting technique)

[17:48] * IOninja waits for [Tux] to drop the news of new perf mark

[17:57] <IOninja> star: with "/tmp/foo".IO { .e.say; .spurt("foo"); .e.say; .unlink; .e.say }

[17:57] <camelia> star-m 2016.10: OUTPUT: «True␤'/tmp/foo' is a directory, cannot do '.open' on a directory␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in any  at gen/moar/m-Metamodel.nqp line 3096␤  in block <unit> at <tmp> line 1␤␤»

[17:57] <IOninja> star: with "/tmp/foozzz".IO { .e.say; .spurt("foo"); .e.say; .unlink; .e.say }

[17:57] <camelia> star-m 2016.10: OUTPUT: «False␤True␤True␤»

[17:58] <ugexe> maybe `method e(--> Bool) { $!e = %*ENV<RAKUDO_IO_PATH_CACHE> && defined $!e ?? $!e !! Rakudo::Internals.FILETEST-E($.abspath) }`

[17:58] <IOninja> ^ another bug due to (now removed) .e caching. That's two just involving Perl 6; but IMO it should consider filesystem operations too, so caching it seems like a very bad idea.

[17:58] <IOninja> ewww env vars

[18:00] <|Tux|> This is Rakudo version 2017.02-129-g76f71878d built on MoarVM version 2017.02-20-g773711e1

[18:00] <|Tux|> csv-ip5xs        2.828

[18:00] <|Tux|> test            12.534

[18:00] <|Tux|> test-t           4.996 - 5.138

[18:00] <|Tux|> csv-parser      12.890

[18:00] <IOninja> m: say $*PERL.compiler.version

[18:00] <camelia> rakudo-moar 76f718: OUTPUT: «v2017.02.129.g.76.f.7187␤»

[18:01] <IOninja> buggable: speed

[18:01] <buggable> IOninja, ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ data for 2017-01-29–2017-02-28; range: 4.788s–999.999s

[18:01] <IOninja> lulzwat

[18:02] <IOninja> m: say (4.996 - 5.138)/2 - (4.800 - 4.827)/2

[18:02] <camelia> rakudo-moar 76f718: OUTPUT: «-0.0575␤»

[18:02] <IOninja> So it's now... faster?

[18:03] <IOninja> Too much variance to tell for sure, but I don't see anything groundbreakingly slow due to .e cache removal :)

[18:03] <IOninja> And I'll tweak it more once the IO plan gets ratified.

[18:03] <ugexe> i would look at build times, or things that have to do a large number of file accesses

[18:03] <IOninja> mhm

[18:04] <IOninja> star: my $p = "/tmp/foo".IO; for ^1000_000 { $ = $p.e }; say now - INIT now

[18:04] <camelia> star-m 2016.10: OUTPUT: «1.78135584␤»

[18:04] <IOninja> m: my $p = "/tmp/foo".IO; for ^1000_000 { $ = $p.e }; say now - INIT now

[18:04] <camelia> rakudo-moar 76f718: OUTPUT: «3.29775591␤»

[18:05] <IOninja> m: say 3.3/1.78

[18:05] <camelia> rakudo-moar 76f718: OUTPUT: «1.853933␤»

[18:05] <lizmat> IOninja: no worries  :-)

[18:05] <IOninja> *phew* :)

[18:07] <ugexe> star: my $p = "/tmp/foo".IO; for ^1000_000 { $ = $p.mkdir }; say now - INIT now

[18:08] <camelia> star-m 2016.10: OUTPUT: «6.554999␤»

[18:08] <ugexe> m: my $p = "/tmp/foo".IO; for ^1000_000 { $ = $p.mkdir }; say now - INIT now

[18:08] <camelia> rakudo-moar 76f718: OUTPUT: «5.7469882␤»

[18:08] <ugexe> faster for that

[18:08] <IOninja> cool

[18:14] <IOninja> buggable: speed

[18:14] <buggable> IOninja, ▃▅▄▃▂▂▃▂▂▁▃▃▄▄▃▃▃▃▄▄▂▃▃▆▃▄▄▄▃▂█▂▇▂▁▃▁▁▂▁▁▃▃▅▃▂▃▄ data for 2017-01-29–2017-02-28; range: 4.788s–5.607s

[18:25] <japhb> IOninja: FWIW, the general problem is that the stat(2) system call is both very common and very slow.  The perl 5 solution to this was that every filesystem test defaulted to doing a fresh stat() for correctness, but it would also keep a copy of the most recently gathered stat buffer around, and you could explicitly indicate you wanted a filesystem test to operate on the cached stat buffer rather than do a fresh stat().

[18:26] <japhb> This made a huge difference when doing multiple tests on the same directory entry -- the difference for tree walkers was rather extreme.

[18:27] <japhb> It also allowed you to explicitly take a stat() at a given point in time and make use of that data, without worrying that someone would change the filesystem out from under you while you were working on it.

[18:27] <japhb> *working with that point-in-time stat() snapshot

[18:29] <IOninja> note

[18:29] <IOninja> *noted

[18:30] <IOninja> Will address it in IO Action Plan

[18:37] <lizmat> IOninja: in Perl 6 something like _ would be rather racy  :-)

[18:39] <timotimo> _?

[18:39] <IOninja> the last stated filehandle in Perl 5

[18:39] <timotimo> oh

[18:40] <IOninja> when you do stat tests on it it uses cached results

[18:40] <geekosaur> yeh. neat but not at all concurrent

[18:41] <geekosaur> (which means I avoided it in p5 even without threads; with experience, some things just smell like a disaster waiting to happen)

[18:50] <lizmat> yeah, that really was from a single process single CPU world  :-)

[18:52] <geekosaur> even that has concurrency if you yield a green thread at each I/O action

[18:52] <geekosaur> (concurrent != parallel)

[18:53] <geekosaur> not that p5 ever supported that, of course

[19:13] <IOninja> Need more eyes on https://github.com/rakudo/rakudo/pull/1020

[19:18] <IOninja> (that's the one to remove the error for my @a = @a, @a stuff)

[19:19] <perlpilot> IOninja: I don't know how much brain you want connected to the eyes, but it looked good to me.  :)

[19:20] * lizmat wonders how hard it would be to make nqp::backtrace return an IterationBuffer instead of an nqp::list

[19:20] <IOninja> perlpilot: so you're OK with removing 6.c-errata tests that PR breaks?

[19:22] <perlpilot> that or fixing them if they're trying to test something useful and it's just the X::Whatever name that's problematic

[19:22] <perlpilot> (I don't know if the X::Syntax::Variable::Initializer was invented for the thing this reverts or not)

[19:22] <perlpilot> If it was, then yes, remove them.

[19:23] <IOninja> It was.

[19:23] <IOninja> OK

[19:23] <lizmat> reality check: Array.STORE is supposed to be eager, no ?

[19:23] <lizmat> if so, we could probably do the same trick I did with %h = %a, %h

[19:23] <timotimo> "mostly eager", no?

[19:23] <timotimo> i.e. eager until it encounters a lazy?

[19:23] <IOninja> m: my @a = lazy 1...Inf; say @a[^10]

[19:23] <camelia> rakudo-moar 76f718: OUTPUT: «(1 2 3 4 5 6 7 8 9 10)␤»

[19:23] <lizmat> ah, yeah that  :-(

[19:23] <IOninja> Dunno if that calls it...

[19:24] <lizmat> yeah, it does

[19:24] <lizmat> hmmmm

[19:24] <IOninja> m: my @a = 1…Inf; say @a[^10]

[19:24] <camelia> rakudo-moar 76f718: OUTPUT: «(1 2 3 4 5 6 7 8 9 10)␤»

[19:26] <TimToady> lizmat: yes, that nntp you linked indicates a new rakudo with an old nqp that doesn't provide setlang

[19:28] <TimToady> so not really a slang problem, but a missing dep problem

[19:28] <Geth> ¦ rakudo/nom: 6c873b9c93 | (Zoffix Znet)++ | t/02-rakudo/repl.t

[19:28] <Geth> ¦ rakudo/nom: Add ticket number to a set of tests

[19:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c873b9c93

[19:29] <IOninja> ZOFVM: Files=1226, Tests=132926, 137 wallclock secs (22.71 usr  3.58 sys + 2511.66 cusr 333.40 csys = 2871.35 CPU)

[19:29] <IOninja> stresstest is really fast now after jnthn++'s change to that test file :D

[19:30] * TimToady finds it a bit odd to be on the opposite side of the world from europe, timing wise...

[19:30] <TimToady> there aren't many p6 people in the middle of the pacific ocean...

[19:31] <lizmat> good top of the morn, TimToady :-)

[19:33] <TimToady> jnthn: to change stdout in place, presumably we'd do a reopen on PROCESS::OUT, not $*OUT, since it belongs to the whole process

[19:36] <Geth> ¦ rakudo/nom: cd47e2a806 | (Zoffix Znet)++ | src/core/REPL.pm

[19:36] <Geth> ¦ rakudo/nom: Remove needless type constraint

[19:36] <Geth> ¦ rakudo/nom:

[19:36] <Geth> ¦ rakudo/nom: Variables are already Mus

[19:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd47e2a806

[19:36] <Geth> ¦ rakudo/nom: 0f37dd38e0 | (Zoffix Znet)++ | t/02-rakudo/repl.t

[19:36] <Geth> ¦ rakudo/nom: Test Nil line return in REPL ends up as Nil in output

[19:36] <Geth> ¦ rakudo/nom:

[19:36] <Geth> ¦ rakudo/nom: RT#130874: https://rt.perl.org/Ticket/Display.html?id=130874

[19:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130874

[19:36] <Geth> ¦ rakudo/nom: Rakudo fix: https://github.com/rakudo/rakudo/commit/a274bdd122

[19:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f37dd38e0

[19:37] <Geth> ¦ rakudo/nom: 7966dad5e9 | (Elizabeth Mattijsen)++ | src/core/CallFrame.pm

[19:37] <Geth> ¦ rakudo/nom: Make callframe() about 20% faster

[19:37] <Geth> ¦ rakudo/nom:

[19:37] <Geth> ¦ rakudo/nom: - lose the "level" attribute, it is only needed to initialize

[19:37] <Geth> ¦ rakudo/nom: - make annotations an nqp::hash

[19:37] <Geth> ¦ rakudo/nom: - adapt accessors accordingly

[19:37] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7966dad5e9

[19:40] <[Coke]> .ask zoffix aren't variables Any, not Mu by default?

[19:40] <[Coke]> IOninja: oh, you re-renamed.

[19:41] <[Coke]> m: my $output; say $output.WHAT;

[19:41] <camelia> rakudo-moar 76f718: OUTPUT: «(Any)␤»

[19:42] <IOninja> [Coke]: parameters are. Variables and attributes are Mu type contraints.

[19:42] <IOninja> [Coke]: the (Any) above is the default `is default` value

[19:42] <IOninja> m: my $x = Mu;

[19:42] <camelia> rakudo-moar 76f718: ( no output )

[19:43] <IOninja> m: my Any $x = Mu

[19:43] <camelia> rakudo-moar 76f718: OUTPUT: «Type check failed in assignment to $x; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[19:43] <IOninja> m: my $x is default(Mu); say $x.WHAT

[19:43] <camelia> rakudo-moar 76f718: OUTPUT: «(Mu)␤»

[19:43] <IOninja> m: my $x; $x.VAR.of.say

[19:43] <camelia> rakudo-moar 76f718: OUTPUT: «(Mu)␤»

[19:46] <Geth> ¦ roast: c7bf3a0aa4 | (Zoffix Znet)++ | S32-list/sort.t

[19:46] <Geth> ¦ roast: Test .sort on reified empty array does not crash

[19:46] <Geth> ¦ roast:

[19:46] <Geth> ¦ roast: RT#130866: https://rt.perl.org/Ticket/Display.html?id=130866

[19:46] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/75e070fdea

[19:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c7bf3a0aa4

[19:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130866

[20:00] <Geth> ¦ roast/6.c-errata: 2c76bfa77e | (Zoffix Znet)++ | S09-typed-arrays/hashes.t

[20:00] <Geth> ¦ roast/6.c-errata: Fix broken test in S09-typed-arrays/hashes.t

[20:00] <Geth> ¦ roast/6.c-errata:

[20:00] <Geth> ¦ roast/6.c-errata: The test mistakenly tests `a` key that already exists in %h prior

[20:00] <Geth> ¦ roast/6.c-errata: to type-check tests being run. The key that is being auto-vivified

[20:00] <Geth> ¦ roast/6.c-errata: in is `z`, not `a`, so change test to test for `z`'s auto-vivification.

[20:00] <Geth> ¦ roast/6.c-errata:

[20:00] <Geth> ¦ roast/6.c-errata: The only reason this test was passing in the past is because failed

[20:00] <Geth> ¦ roast/6.c-errata: <…commit message has 9 more lines…>

[20:00] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/2c76bfa77e

[20:00] <IOninja> s/array/hash/

[20:05] <lizmat> oops, I should have done that  :-(

[20:11] <Geth> ¦ roast: 3cd5126000 | (Zoffix Znet)++ | S09-typed-arrays/hashes.t

[20:11] <Geth> ¦ roast: Test self-referential (in top-level) hash asignment

[20:11] <Geth> ¦ roast:

[20:11] <Geth> ¦ roast: RT#130870: https://rt.perl.org/Ticket/Display.html?id=130870

[20:11] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/ae7bcf1b8e1fa6

[20:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3cd5126000

[20:11] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130870

[20:43] <Geth> ¦ roast: af2d786d40 | (Zoffix Znet)++ | S17-supply/syntax.t

[20:43] <Geth> ¦ roast: Test `next` in `whenever`

[20:43] <Geth> ¦ roast:

[20:43] <Geth> ¦ roast: Rakudo implementation:

[20:43] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/f97d5c2aafc8427bfce12794

[20:43] <Geth> ¦ roast:

[20:43] <Geth> ¦ roast: RT#130601: https://rt.perl.org/Ticket/Display.html?id=130601

[20:43] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130601

[20:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/af2d786d40

[21:12] <lizmat> shouldn't List.reverse return a Seq rather than a List ?

[21:37] <moritz> lizmat: there's not much point in making that lazy, since you have to reify the original list anyway to be able to reverse

[21:38] <lizmat> no, not true, if we have an iterator that takes the reified list but traverses it in the opposite direction, we wouldn't need to copy it

[21:38] <lizmat> currently, .reverse creates a reversed reified list and returns that

[21:39] <lizmat> if it were to return a Seq, that wouldn't be needed

[21:39] <lizmat> and it would then only create the reversed reified when really needed

[21:39] <lizmat> and not in a case such as for @a.reverse { }

[21:40] <moritz> you have to be careful with lazy Array.reverse, so that changes to the array aren't reflected in a lazy .reverse

[21:41] <lizmat> the Array.iterator.push-all creates new containers afaik

[21:41] <lizmat> so that would be covered

[21:47] <IOninja> Would it be possible for me to get a commit bit to rakudo/star? Gonna give #78 a go when I get home.

[22:00] <lizmat> jnthn TimToady opinions about having List.reverse return a Seq rather than a List ?  speculation mentions returning an Iterable, which maps to Seq post-GLR if I remember correctly

[22:00] <lizmat> jnthn TimToady it would prevent unnecessary copying of a reified list in many cases

[22:00] <lizmat> jnthn TimToady like for @a.reverse { }

[22:02] <jnthn> lizmat: Umm...I'm too tired to think straight any more, but it would be a breaking change potentially; my @a := @b.reverse; for example

[22:02] <jnthn> But it's arguably better as Seq

[22:03] * jnthn goes to rest :)

[22:03] <lizmat> there are a few spectests that break, but they check for Listiness specifically

[22:03] <lizmat> good night, jnthn

[22:03] <jnthn> 'night

[22:11] <[Coke]> IOninja: I don't appear to have access to grant you access to star.

[22:12] <[Coke]> IOninja: tag jnthn, masak, moritz, perlpilot, pmichaud

[22:15] <IOninja> *tag*

[22:29] <lizmat> good night, #perl6-dev!

[22:29] <IOninja> night

[23:16] <MasterDuke> timotimo: aside from the not-written-yet spesh bisect tool, what would you suggest as the next step to troubleshoot that spesh/EVAL/div bug that i/Zoffix found?
