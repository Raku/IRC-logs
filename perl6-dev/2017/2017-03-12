[01:52] <jeffythedragonsl> hey

[01:52] <MasterDuke> a diff of `my int $bar` vs `my $bar` is a little more instructive, in that there's almost no difference whatsoever

[01:53] <MasterDuke> which means it's probably not a grammar/codegen problem

[01:53] <jeffythedragonsl> WVal vs IVal

[01:54] <naxieAlDle> interestingly, it's not that

[01:54] <naxieAlDle> my $bar := 4; my int $foo2 := $bar || 12+0; say($foo2); # 4

[01:54] <naxieAlDle> my $bar := 4; my int $foo2 := $bar || 12; say($foo2); # 0

[01:54] <MasterDuke> and it is likely a moarvm problem

[01:55] <naxieAlDle> I wonder if there's any way to use committable to test nqp stuff…

[01:55] <MasterDuke> i'd `git grep unless` in MoarVM and see what you find there

[01:55] <naxieAlDle> because I wonder if it has always been like this

[01:55] <naxieAlDle> maybe someone should try to bisect manually, as it doesn't take much to compile nqp

[01:56] <MasterDuke> naxieAlDle: nqpbisect and moarvmbisect bots would be nice

[01:56] <jeffythedragonsl> there's a lot of stuff

[01:56] <naxieAlDle> yea, there's a feature request for that

[01:57] <naxieAlDle> MasterDuke: I think we can reuse bisectable for that

[01:57] <naxieAlDle> MasterDuke: I bet it's a difference of 5 lines or something like that

[01:57] <MasterDuke> bisectable6: use nqp; my $bar = 4; my int $foo2 = nqp::unless($bar,200); say($foo2);

[01:57] <bisectable6> MasterDuke, On both starting points (old=2015.12 new=d444f65) the exit code is 0 and the output is identical as well

[01:57] <bisectable6> MasterDuke, Output on both points: «4»

[01:57] <MasterDuke> bisectable6: use nqp; my int $bar = 4; my int $foo2 = nqp::unless($bar,200); say($foo2);

[01:57] <bisectable6> MasterDuke, On both starting points (old=2015.12 new=d444f65) the exit code is 0 and the output is identical as well

[01:57] <bisectable6> MasterDuke, Output on both points: «1»

[01:57] <MasterDuke> committable6: all use nqp; my $bar = 4; my int $foo2 = nqp::unless($bar,200); say($foo2);

[01:58] <committable6> MasterDuke, https://gist.github.com/1e2b35320de7a35dfacf85da5426f453

[01:58] <MasterDuke> committable6: all use nqp; my int $bar = 4; my int $foo2 = nqp::unless($bar,200); say($foo2);

[01:59] <committable6> MasterDuke, https://gist.github.com/52da5d8f542e4ed2cb73cf9ec973e994

[01:59] <MasterDuke> !!!

[01:59] <MasterDuke> committable6: 2015.11,2015.12 use nqp; my int $bar = 4; my int $foo2 = nqp::unless($bar,200); say($foo2);

[01:59] <committable6> MasterDuke, ¦2015.11: «4» ¦2015.12: «1»

[02:00] <naxieAlDle> bisect it?

[02:00] <MasterDuke> bisectable6: old=2015.11 use nqp; my int $bar = 4; my int $foo2 = nqp::unless($bar,200); say($foo2);

[02:00] <bisectable6> MasterDuke, Bisecting by output (old=2015.11 new=d444f65) because on both starting points the exit code is 0

[02:00] <bisectable6> MasterDuke, bisect log: https://gist.github.com/81733000d3a933c772be2a5c5db4850c

[02:00] <bisectable6> MasterDuke, (2015-12-16) https://github.com/rakudo/rakudo/commit/2d98de93ba16886ab7567d27d135a54c7aa657e3

[02:00] <naxieAlDle> doesn't look right?

[02:01] <MasterDuke> hmm, not sure that's related

[02:01] <naxieAlDle> commit: 2d98de93ba^,2d98de93ba use nqp; my int $bar = 4; my int $foo2 = nqp::unless($bar,200); say($foo2);

[02:01] <committable6> naxieAlDle, ¦2d98de93ba^: «4» ¦2d98de9: «1»

[02:01] <naxieAlDle> still interesting :)

[02:02] <MasterDuke> jeffythedragonsl: ^^^ might be helpful, might not

[02:02] <samcv> NeuralAnomaly, status

[02:02] <NeuralAnomaly> samcv, [✘] Next release will be in 6 days and 2 hours. Since last release, there are 56 new still-open tickets (18 unreviewed and 0 blockers) and 70 unreviewed commits. See http://perl6.fail/release/stats for details

[02:02] <naxieAlDle> Geth: help

[02:02] <Geth> naxieAlDle, Source at https://github.com/perl6/geth To add repo, add an 'application/json' webhook on GitHub pointing it to https://geth.perl6.party/?chan=#perl6 and choose 'Send me everything' for events to send | use `ver URL to commit` to fetch version bump changes

[02:02] <naxieAlDle> IOninja: what was the magic command to show what commits were brought by a NQP bump?

[02:02] <samcv> yes naxieAlDle

[02:03] * IOninja points to help above ^

[02:03] <jeffythedragonsl> you guys lost me a little... think I need to study the language more...

[02:03] <IOninja> c'mon man :)

[02:03] <samcv> naxieAlDle git log --oneline 2017.02-67-g5023309..HEAD

[02:03] <samcv> for example

[02:04] <samcv> just put in whatever is the actual `NQP_VERSION` or whatever is in that file

[02:04] <IOninja> Geth: ver https://github.com/rakudo/rakudo/commit/22f00cd72deaaaafbaeb1ad83187309854e33739

[02:04] <Geth> IOninja, version bump brought in these changes: https://github.com/perl6/nqp/compare/2017.02-67-g5023309...2017.02-69-g4ceee06d

[02:04] <samcv> oh with the bot

[02:04] <naxieAlDle> IOninja: you torturer, want me to read the source code :P

[02:04] <MasterDuke> jeffythedragonsl: i think `git grep unless_` in MoarVM will point you in the right direction

[02:04] <IOninja> naxieAlDle: no, the usage is in the help message :/

[02:04] <naxieAlDle> IOninja: ah, dammit… *facepalm

[02:05] <naxieAlDle> *

[02:05] <samcv> naxieAlDle, your name is annoying

[02:05] <naxieAlDle> IOninja: forgive my stupidity and blindness!

[02:05] <naxieAlDle> and my nickname too :P

[02:05] <jeffythedragonsl> at least it fits

[02:05] <samcv> that's what i was talking about

[02:05] <jeffythedragonsl> so it's like ack-grep?

[02:06] <IOninja> What is?

[02:06] <jeffythedragonsl> git grep

[02:06] <IOninja> Oh, no idea. Never used it.

[02:06] <jeffythedragonsl> https://beyondgrep.com/

[02:06] <jeffythedragonsl> it's my favorite perl 5 script

[02:07] <IOninja> Geth: ver http://github.com/perl6/nqp/commit/2d98de93ba

[02:08] <IOninja> Oh, it's rakudo's commit

[02:08] <IOninja> Geth: ver http://github.com/rakudo/rakudo/commit/2d98de93ba

[02:08] <IOninja> come on, you stupid robot!

[02:08] <IOninja> Geth: ver https://github.com/rakudo/rakudo/commit/2d98de93ba

[02:08] <Geth> IOninja, version bump brought in these changes: https://github.com/perl6/nqp/compare/                    $update[0] := $target[0];...                }

[02:08] <IOninja> uuh

[02:08] <IOninja> Ah

[02:09] <IOninja> It's not a version bump

[02:09] <samcv> i've been using `ripgrep` which allows regex or whatever, is pretty fast. and only searches things not ignored by .gitignore by default

[02:09] <samcv> but there's tons of ways to “grep” source code

[02:09] <geekosaur> git grep isn't as  smart as ack, but it does limit the search to (history of) the files that are version controlled so you don't get it searching the trash

[02:10] <jeffythedragonsl> ok I'll use git grep then.  Mostly I use ack when stuck in subversion world

[02:10] <naxieAlDle> another trick is to use ｢grep -P …｣, which gives perl-like regexes on some systems

[02:11] <naxieAlDle> e.g. grep -Po 'foo\K.*'

[02:12] <MasterDuke> i have `[grep] lineNumber = true` set in my ~/.gitconfig

[02:12] <samcv> wow ack is much slower than ripgrep

[02:13] <samcv> oh i guess maybe partially cause it is not ignoring things in gitignore

[02:13] <samcv> that's annoying

[02:13] <geekosaur> I think there's an option?

[02:13] <geekosaur> (and an ackrc file)

[02:13] <jeffythedragonsl> silver searcher is faster

[02:13] <MasterDuke> and then have a vim plugin which, when you do `vim <file>:<number>:`, open the file at that linenumber

[02:14] <samcv> ok if i do unrestricted search, ripgrep took 0.04s and ack takes 1.79 seconds

[02:14] <samcv> that's a pretty huge difference

[02:14] <jeffythedragonsl> ripgrep looks pretty new

[02:15] <samcv> ag took 1.01

[02:16] <samcv> try out ripgrep. really fast. (all the above measurements were in unrestricted mode to rule out them ignoring different files than each other)

[02:16] <naxieAlDle> I wish it was in debian repos

[02:16] <naxieAlDle> looks *very* promising

[02:16] <samcv> ripgrep isn't?

[02:17] <samcv> oh well

[02:19] <samcv> for detailed benchmarks you an see here http://blog.burntsushi.net/ripgrep/ for many different kinds of regex

[02:19] <naxieAlDle> samcv: I'll keep my eye on it anyway, thank you very much for mentioning it

[02:20] <naxieAlDle> I use grep every day, and recently started using ack sometimes, just to see how it goes. Yes, ack is noticeably slow

[02:21] <jeffythedragonsl> wow I take a break from coding for a couple years and look at all the cool stuff that happens

[02:24] <naxieAlDle> samcv: what's the easiest way to use rg with a pager? Or does it default to using one?

[02:24] <samcv> pager? what

[02:25] <jeffythedragonsl> I think he means the more command

[02:25] <naxieAlDle> or less

[02:27] <jeffythedragonsl> less is better than more :)

[02:28] <geekosaur> .oO { pg -ns }

[02:29] <MasterDuke> any reason infix:<min> and infix:<max> https://github.com/rakudo/rakudo/blob/nom/src/core/Any-iterable-methods.pm#L1932-L1944 don't have any narrow multi's? e.g., Int, int, Str

[02:30] <MasterDuke> i shaved a couple seconds off that code mscha posted in #perl6 earlier by adding them and they pass a spectest

[02:31] <Geth> ¦ rakudo/nom: 7bebec08e9 | (Samantha McVey)++ | CONTRIBUTING.md

[02:31] <Geth> ¦ rakudo/nom: Make some minor grammar and markdown changes for CONTRIBUTING.md

[02:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7bebec08e9

[02:32] <samcv> MasterDuke, by adding ones for Int?

[02:33] <MasterDuke> samcv: yeah

[02:33] <IOninja> couple seconds is what? ~2% increment?

[02:34] <samcv> MasterDuke, probably because cmp calls different things based on the types involved

[02:34] <IOninja> and it's marked as pure, so it gets constant folded.

[02:34] <MasterDuke> it was closer to 10%

[02:36] <MasterDuke> 11969988 calls to max took 5.3s before, 1.6s after

[02:37] <MasterDuke> `multi sub infix:<max>(Int:D \a, Int:D \b) { nqp::if(nqp::isgt_i(nqp::cmp_I(nqp::decont(a), nqp::decont(b)), 0), a, b) }`

[02:38] <IOninja> ah, based on AST it doesn't get folded when given variables, never mind.

[02:40] <MasterDuke> any objections to a PR adding Int, int, and Str versions for max and min?

[02:42] <naxieAlDle> .oO( only time and bisectable will tell )

[03:24] <travis-ci> Rakudo build errored. Samantha McVey 'Make some minor grammar and markdown changes for CONTRIBUTING.md'

[03:24] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/210178210 https://github.com/rakudo/rakudo/compare/d444f655fd82...7bebec08e930

[03:24] <buggable> [travis build above] ✓ All failures are due to timeout (1), missing build log (0), or GitHub connectivity (0).

[03:55] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1035: Add narrower candidates for infix min and max

[03:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1035

[04:05] <IOninja> m: say (int:D).HOW.^name

[04:05] <camelia> rakudo-moar 7bebec: OUTPUT: «Perl6::Metamodel::DefiniteHOW␤»

[04:05] <IOninja> m: say (int:U).HOW.^name

[04:05] <camelia> rakudo-moar 7bebec: OUTPUT: «Perl6::Metamodel::DefiniteHOW␤»

[04:27] <Geth> ¦ rakudo/nom: a9c51964a0 | (Daniel Green)++ | src/core/Any-iterable-methods.pm

[04:27] <Geth> ¦ rakudo/nom: Add narrower candidates for infix min and max

[04:27] <Geth> ¦ rakudo/nom:

[04:27] <Geth> ¦ rakudo/nom: Add :D candidate for Int, int, Num, and num and implement them in nqp.

[04:27] <Geth> ¦ rakudo/nom: Makes `Int:D max Int:D` about 3x faster.

[04:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a9c51964a0

[04:27] <Geth> ¦ rakudo/nom: 9cd7c5a98e | (Daniel Green)++ | src/core/Any-iterable-methods.pm

[04:27] <Geth> ¦ rakudo/nom: Remove unneeded/unused smilies from natives

[04:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9cd7c5a98e

[04:27] <Geth> ¦ rakudo/nom: 0f289a3fe3 | (Zoffix Znet)++ | src/core/Any-iterable-methods.pm

[04:27] <Geth> ¦ rakudo/nom: Merge pull request #1035 from MasterDuke17/add_narrower_candidates_for_infix_min_and_max

[04:27] <Geth> ¦ rakudo/nom:

[04:27] <Geth> ¦ rakudo/nom: Add narrower candidates for infix min and max

[04:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f289a3fe3

[04:34] <MasterDuke> IOninja: any opinion on https://github.com/perl6/roast/blob/master/S02-types/int-uint.t#L45-L47 ? think those are correct tests?

[04:39] <IOninja> no idea

[04:42] <MasterDuke> yeah, i'll .ask around

[04:45] <MasterDuke> .ask jnthn do you have any thoughts on my question here https://irclog.perlgeek.de/perl6-dev/2017-03-11#i_14247061 ? i was working on https://github.com/MoarVM/MoarVM/issues/513 and had made some progress, but those tests failed

[04:45] <yoleaux2> MasterDuke: I'll pass your message to jnthn.

[04:45] <MasterDuke> .ask lizmat do you have any thoughts on my question here https://irclog.perlgeek.de/perl6-dev/2017-03-11#i_14247061 ? i was working on https://github.com/MoarVM/MoarVM/issues/513 and had made some progress, but those tests failed

[04:45] <yoleaux2> MasterDuke: I'll pass your message to lizmat.

[04:45] <MasterDuke> .ask timotimo do you have any thoughts on my question here https://irclog.perlgeek.de/perl6-dev/2017-03-11#i_14247061 ? i was working on https://github.com/MoarVM/MoarVM/issues/513 and had made some progress, but those tests failed

[04:45] <yoleaux2> MasterDuke: I'll pass your message to timotimo.

[04:50] <DnAeillaxe> MasterDuke: my best guess is that the test was supposed to be: my $type \$var = $maxval; \$var++; \$var

[04:51] <MasterDuke> DnAeillaxe: yeah, was thinking the same thing. that makes sense

[04:52] <DnAeillaxe> MasterDuke: that being said…

[04:52] <DnAeillaxe> your changes will prevent this, right?

[04:52] <DnAeillaxe> m: my int8 $x = 250; say $x

[04:52] <camelia> rakudo-moar 0f289a: OUTPUT: «-6␤»

[04:53] <MasterDuke> i'm just working on the *64 versions

[04:55] <DnAeillaxe> well, fine

[04:55] <DnAeillaxe> m: my uint64 $x = 18446744073709551610; say $x

[04:55] <camelia> rakudo-moar 0f289a: OUTPUT: «-6␤»

[04:55] <MasterDuke> i guess if i get them right i might try the others. but i'm really not the best person for this stuff

[04:55] <DnAeillaxe> wait, what's up with it…

[04:56] <DnAeillaxe> m: my int64 $x = 18446744073709551610; say $x

[04:56] <camelia> rakudo-moar 0f289a: OUTPUT: «-6␤»

[04:56] <DnAeillaxe> this is what I meant…

[04:56] <DnAeillaxe> MasterDuke: I've been using this stuff to do quick conversions from unsigned to signed

[04:57] <DnAeillaxe> not in actual code, but using perl6 as my general-purpose calculator :)

[05:17] <travis-ci> Rakudo build passed. Zoffix Znet 'Merge pull request #1035 from MasterDuke17/add_narrower_candidates_for_infix_min_and_max

[05:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/210190501 https://github.com/rakudo/rakudo/compare/7bebec08e930...0f289a3fe3f4

[06:36] <Geth> ¦ roast: 534c607615 | usev6++ | 2 files

[06:36] <Geth> ¦ roast: Fudge some newly added tests for JVM

[06:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/534c607615

[08:40] <samcv> what. nqp isn't even tested on jvm by travis :(

[08:47] <samcv> time to remedy that

[08:47] <Geth> ¦ nqp: ff42445b9d | (Samantha McVey)++ | 10 files

[08:47] <Geth> ¦ nqp: Remake stage0 for JVM

[08:47] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ff42445b9d

[08:47] <Geth> ¦ nqp: 915c7517fd | (Samantha McVey)++ | .travis.yml

[08:47] <Geth> ¦ nqp: Attempt to get Travis CI testing under JVM

[08:47] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/915c7517fd

[08:52] <samcv> wow nice. it might actually work on the first .travis.yml commit :)

[09:38] <moritz> sound suspicious :-)

[10:11] <lizmat> .

[10:11] <yoleaux2> 04:45Z <MasterDuke> lizmat: do you have any thoughts on my question here https://irclog.perlgeek.de/perl6-dev/2017-03-11#i_14247061 ? i was working on https://github.com/MoarVM/MoarVM/issues/513 and had made some progress, but those tests failed

[10:14] <lizmat> MasterDuke: looks like if it fits, it is allowed: as soon as a significant bit is outside of 64bit, it complains

[10:15] <lizmat> but only on assignment.  Once it is in a native int, all bets and checks are off

[10:15] <lizmat> m: my int $a = 9223372036854775807; dd $a; $a++; dd $a

[10:15] <camelia> rakudo-moar 0f289a: OUTPUT: «9223372036854775807␤-9223372036854775808␤»

[10:15] <lizmat> and that is the intent of natives, afaik

[10:30] <lizmat> Files=1179, Tests=55864, 192 wallclock secs (11.65 usr  4.57 sys + 1149.74 cusr 107.20 csys = 1273.16 CPU)

[10:31] <lizmat> afk again&

[11:28] <Geth> ¦ rakudo: dod38fr++ created pull request #1036: fix installation path of core dist

[11:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1036

[11:44] <jnthn> .

[11:44] <yoleaux2> 04:45Z <MasterDuke> jnthn: do you have any thoughts on my question here https://irclog.perlgeek.de/perl6-dev/2017-03-11#i_14247061 ? i was working on https://github.com/MoarVM/MoarVM/issues/513 and had made some progress, but those tests failed

[11:45] <jnthn> MasterDuke: I suspect the test is a thinko; 2**63-1 and -2**63 would both be fine

[11:45] <jnthn> It's fine if you overflow once you're in native land, that's part of native semantics

[11:45] <jnthn> But unboxing something from Int that can't fit in the first place should be an error

[11:46] <MasterDuke> ah ha, that's what i thought/hoped

[11:47] <MasterDuke> for all the differently sized types?

[11:48] <MasterDuke> e.g., assigning 256 to a uint8 should fail, but assigning 255 and then incrementing should result in 0?

[11:49] <jnthn> Yes

[11:50] <MasterDuke> cool

[11:54] <MasterDuke> now while i'm thinking about it, can i create an mp_int outside of a function here? https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6bigint.c

[17:36] <timotimo> well, we always just create mp_int with malloc, iirc

[17:36] <yoleaux2> 04:45Z <MasterDuke> timotimo: do you have any thoughts on my question here https://irclog.perlgeek.de/perl6-dev/2017-03-11#i_14247061 ? i was working on https://github.com/MoarVM/MoarVM/issues/513 and had made some progress, but those tests failed

[17:37] <timotimo> MasterDuke: sorry, i don't think i have an actual clue for this topic

[17:40] <nine> I'd appreciate any input on https://irclog.perlgeek.de/perl6/2017-03-12#i_14250480

[17:40] <yoleaux2> 10 Mar 2017 23:40Z <IOninja> nine: camelia seems to be stuck on an old commit. Needs to nuke nqp/MoarVM/3rdparty/libtommath to get it going again

[17:41] <nine> jnthn: any input on https://irclog.perlgeek.de/perl6/2017-03-12#i_14250480 greatly appreciated :)

[17:47] * DrForr waves at nine - Found a little issue with role Inline::Python::PythonParent. If the parent class has :: in the name, $subclass_name has the :: in it as well, apparently illegal in Python.

[17:49] <DrForr> Filed an issue already :)

[18:27] <Geth> ¦ nqp: 042fe37620 | usev6++ | 2 files

[18:27] <Geth> ¦ nqp: [JVM] Make nqp::div_i round down, not towards zero

[18:27] <Geth> ¦ nqp:

[18:27] <Geth> ¦ nqp: This change makes failing test in t/nqp/059-nqpop.t pass.

[18:27] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/042fe37620

[19:11] <travis-ci> Rakudo build canceled. Nick Logan 'yyy'

[19:11] <travis-ci> https://travis-ci.org/ugexe/P6TCI/builds/210311755 https://github.com/ugexe/P6TCI/compare/a3f8003095ba...b65b0bfbf859

[19:40] <Geth> ¦ roast: bc98637a9f | usev6++ | 2 files

[19:40] <Geth> ¦ roast: [JVM] Unfudge three passing tests

[19:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bc98637a9f

[21:32] <IOninja> IO::Path.Bridge is broken because it tries to call Str.Bridge, but I don't really get why we do this .Bridge business in the first place.

[21:33] <IOninja> mc: '.'.IO.Bridge

[21:33] <committable6> IOninja, ¦2015.12: «Method 'Bridge' not found for invocant of class 'Str'␤  in block <unit> at /tmp/l4cpJDCX26 line 1␤ «exit code = 1»»

[21:33] <DrForr> Just in case there isn't complete overlap here, Perl6::Tidy is on github, though at the moment it only strips comments.

[21:33] <moritz> it's about convert to Num

[21:33] <IOninja> moritz: but why not just do that?

[21:34] <IOninja> s:g/\.Bridge/.Num/;

[21:34] <moritz> dunno

[21:34] <Geth> ¦ nqp: e30967c2f1 | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java

[21:34] <Geth> ¦ nqp: [JVM] Handle division by zero in div_i

[21:34] <Geth> ¦ nqp:

[21:34] <Geth> ¦ nqp: Commit 042fe37620 introduced a regression (two failing

[21:34] <Geth> ¦ nqp: tests in S32-num/int.t)

[21:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e30967c2f1

[21:35] <IOninja> I'm just gonna toss IO::Path.Bridge instead of adding Str.Bridge. Makes no sense to me :S

[21:36] <MasterDuke> if .Bridge is about having a common numerical ground and/or converting to Num, why does IO::Path have one anyway?

[21:37] * IOninja doesn't understand the question...

[21:37] <MasterDuke> why would one convert a path to some form of number?

[21:38] <IOninja> Because it's Cool, as to why, I don't know.

[21:38] <MasterDuke> ah, so you're going to explicitly disallow IO::Path.Bridge?

[21:39] <Geth> ¦ rakudo/nom: 212cc8ae5d | (Zoffix Znet)++ | src/core/IO/Path.pm

[21:39] <Geth> ¦ rakudo/nom: [io grant] Remove IO::Path.Bridge

[21:39] <Geth> ¦ rakudo/nom:

[21:39] <Geth> ¦ rakudo/nom: It has been broken since before Christmas because it tries to call

[21:39] <Geth> ¦ rakudo/nom: Str.Bridge that does not exist. Don't understand what the point

[21:39] <Geth> ¦ rakudo/nom: of .Bridge is, so instead of adding Str.Bridge, remove IO::Path.Bridge

[21:39] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/212cc8ae5d

[21:41] <MasterDuke> good grief, it also has a .Numeric and .Int?

[21:41] <IOninja> mhm

[21:41] <MasterDuke> are those tested in roast?

[21:41] <IOninja> no idea

[21:43] <MasterDuke> lizmat added them to IO::Path 3 years ago

[21:44] <Geth> ¦ roast: 2dd4f8b0e0 | usev6++ | S03-operators/increment.t

[21:44] <Geth> ¦ roast: [JVM] Fix fudges for X::Multi::NoMatch

[21:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2dd4f8b0e0

[21:45] <MasterDuke> .ask lizmat what are IO::Path.(Numeric|Int) for? you added them in https://github.com/rakudo/rakudo/commit/58709063feee03755a21f530842a02f7af43f3d4

[21:45] <yoleaux2> MasterDuke: I'll pass your message to lizmat.

[22:27] <gfldex> m: class C does Iterator { method pull-one { 1 } }; dd C.new.Seq ;

[22:27] <camelia> rakudo-moar 212cc8: OUTPUT: «No such method 'Seq' for invocant of type 'C'␤  in block <unit> at <tmp> line 1␤␤»
