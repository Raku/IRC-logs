[01:59] <BenGoldberg> I've been looking at a few Actions classes used with grammars, and noticed something a bit odd: I have not seen one single method which *doesn't* end in make(...) or $/.make: ...

[02:02] <BenGoldberg> It seems to me that we should offer a wrapper class which takes an Actions-like object (which *doesn't* have .made) on the methods, and which wraps each method in a version which does call .make; this would save users a good bit of typing.

[02:34] <raiph> BenGoldberg: perhaps an :ast argument that takes an actions class and, if a method does not itself set $/.ast before returning, takes the return value and sets $/.ast to it?

[02:34] <raiph> I mean an :ast argument added to parse

[02:41] <ugexe> maybe it could be accomplished if the return types were defined

[04:46] <BenGoldberg> With the current setup, the return values of methods are totally ignored; the 'make' function (or method) stores it's argument in the $/ variable in such a way that .made can later fetch it.

[07:10] <[Tux]> This is Rakudo version 2017.05-399-gbdf2019d4 built on MoarVM version 2017.05-76-gba6725f3

[07:10] <[Tux]> csv-ip5xs        2.810

[07:10] <[Tux]> test            13.039

[07:10] <[Tux]> test-t           4.362 - 4.427

[07:10] <[Tux]> csv-parser      13.870

[08:33] <lizmat> Files=1204, Tests=61803, 218 wallclock secs (13.07 usr  4.78 sys + 1321.65 cusr 119.56 csys = 1459.06 CPU)

[09:13] <cono> any1 have a minute to look: https://github.com/perl6/roast/pull/270

[09:31] <lizmat> cono: is there any reason you use Thread.new instead of start { } ?

[09:33] <cono> start { } gives me new thread ?

[09:33] <jnthn> It schedules stuff on the thread pool

[09:33] <jnthn> So no, doesn't promise a new thread

[09:34] <cono> but from high level perspective it should work the same?

[09:35] <cono> let me try

[09:35] <jnthn> Probably it would work the same, looking at the code, yes

[09:36] <cono> yeah, works fine, let me re-push

[09:37] <cono> done

[09:38] <lizmat> cono: instead of Thread.start I meant start { }

[09:39] <jnthn> That said, if you start { ... } you should await it somewhere so any errors will show up

[09:40] <jnthn> And, given it's a test, maybe the fewer other features it depends on the better, so while start { ... } might be better Perl 6 code in general, perhaps using Thread explicitly makes it a better test.

[09:40] <jnthn> Don't feel strongly on it either way, though

[09:41] <lizmat> well, lemme put it this way: if it doesn't work with start { }, most users of IO::Socket::Async will see errors

[09:41] <jnthn> Huh?

[09:42] <jnthn> This is the test for IO::Socket::INET

[09:42] <lizmat> so perhaps we need both: with Thread.new to make sure the lower parts work, and with start { } to make sure it interacts correctly with HLL

[09:42] <lizmat> ah, oops

[09:42] <jnthn> Sure; pretty sure we do have other tests that use IO::Socket::INET + start together, though

[09:42] <jnthn> It's just that this was our most minimal set of tests for it

[09:42] <jnthn> Rather than checking integration with other things

[09:42] <lizmat> ok

[09:43] <lizmat> then I will refrain from making things more complicated  :-)

[09:43] <jnthn> But yeah, if start { ... } blocks were busted you'd have a very busted Perl 6 :)

[10:47] <cono> so if no1 has any other concern may I click "merge" ? :)

[11:00] <eveo> yeah, merge

[11:08] <tbrowder> hi, #perl6

[11:13] <tbrowder> i'm working on my lite linter and a good test p6 prog for input to it. in fiddling with various combinations of =begin/=end pod blocks, both matched and unmatched, i'm finding possible inconsistencies in how perl6 treats them. it's too early to wave a flag but i thought the actual indentation of a =begin or =end isn't supposed to matter but it seems it sometimes does.

[11:31] <tbrowder> oops, wrong channel...

[11:38] <Geth> ¦ roast: cd224efdc4 | cono++ | 4 files

[11:38] <Geth> ¦ roast: Rework IO-Socket-INET test to make it more self-sufficient

[11:38] <Geth> ¦ roast:

[11:38] <Geth> ¦ roast: Basing rework on improvement: MoarVM/MoarVM#600

[11:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cd224efdc4

[11:38] <Geth> ¦ roast: 09b5e818e8 | cono++ | S32-io/IO-Socket-INET.t

[11:38] <Geth> ¦ roast: Rework Thread.new -> Thread.start

[11:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/09b5e818e8

[11:38] <Geth> ¦ roast: 6da9a282a5 | cono++ (committed using GitHub Web editor) | 4 files

[11:38] <Geth> ¦ roast: Merge pull request #270 from cono/socket_get_port

[11:38] <Geth> ¦ roast:

[11:38] <Geth> ¦ roast: Rework IO-Socket-INET test to make it more self-sufficient

[11:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6da9a282a5

[12:14] <eveo> NeuralAnomaly: 397

[12:14] <eveo> NeuralAnomaly: status

[12:14] <NeuralAnomaly> eveo, [✘] Next release will be in 4 days and 16 hours. Since last release, there are 69 new still-open tickets (66 unreviewed and 0 blockers) and 397 unreviewed commits. See http://perl6.fail/release/stats for details

[12:14] * eveo ponders how to filter out dupes from those 397 commits

[12:17] <eveo> Oh, looks like I won't have to. Luckily the site lists the dupe right after the original

[12:20] <eveo> And the dupes are the ones with double profile icons: https://github.com/rakudo/rakudo/compare/2017.05...HEAD

[12:20] <jnthn> Righty, back to work on the Proc refactors...

[12:25] <Geth> ¦ rakudo/proc-using-proc-async: 6 commits pushed by (Jonathan Worthington)++

[12:25] <Geth> ¦ rakudo/proc-using-proc-async: 05d8b88334 | Give Proc::Async support for merged output.

[12:25] <Geth> ¦ rakudo/proc-using-proc-async: 6b2967d70f | Support binding to standard handles in Proc::Async

[12:25] <Geth> ¦ rakudo/proc-using-proc-async: e6cdcc35ad | Add validation for Proc::Async handle binding.

[12:25] <Geth> ¦ rakudo/proc-using-proc-async: 8139b710ce | Run S17-procasync/bind-handles.t.

[12:25] <Geth> ¦ rakudo/proc-using-proc-async: 5154b620c1 | Include Proc::Async into JVM core setting.

[12:25] <Geth> ¦ rakudo/proc-using-proc-async: 055cf75703 | We have signal in JVM; re-order and remove #?jvm.

[12:25] <Geth> ¦ rakudo/proc-using-proc-async: review: https://github.com/rakudo/rakudo/compare/a2543a9c81...055cf75703

[12:25] <jnthn> (that was a rebase on nom)

[12:26] <eveo> jnthn: should this change be made for $.ln-in in IO::Handle and IO::CatHandle too? https://github.com/rakudo/rakudo/commit/187dea004d3e0f496b4b4dd0f3779bfba6fcb392

[12:26] <eveo> nl-in I mean

[12:31] <jnthn> eveo: Yeah, it can be

[12:32] <jnthn> eveo: It's just a code cleanup, not a functionality chance, to be clear

[12:33] <eveo> Ah

[12:48] <Geth> ¦ rakudo/proc-using-proc-async: 3adb14af96 | (Jonathan Worthington)++ | src/core/CompUnit/PrecompilationRepository.pm

[12:48] <Geth> ¦ rakudo/proc-using-proc-async: Switch to Proc::Async in PrecompilationRepository.

[12:48] <Geth> ¦ rakudo/proc-using-proc-async: review: https://github.com/rakudo/rakudo/commit/3adb14af96

[12:49] <jnthn> That passes all spectests still :)

[13:16] <Geth> ¦ rakudo/proc-using-proc-async: 3da80259c4 | (Jonathan Worthington)++ | src/core/IO/Handle.pm

[13:16] <Geth> ¦ rakudo/proc-using-proc-async: Introduce read-internal and write-internal.

[13:16] <Geth> ¦ rakudo/proc-using-proc-async:

[13:16] <Geth> ¦ rakudo/proc-using-proc-async: These are working names for the operations. They are the low-level,

[13:16] <Geth> ¦ rakudo/proc-using-proc-async: internal, methods for reading and writing from a handle. Since all

[13:16] <Geth> ¦ rakudo/proc-using-proc-async: of the higher-level ones now call them, this means that it is much

[13:16] <Geth> ¦ rakudo/proc-using-proc-async: easier to subclass IO::Handle: only this pair of methods and a

[13:16] <Geth> ¦ rakudo/proc-using-proc-async: handful of others need be overridden, and then you get all of the

[13:16] <Geth> ¦ rakudo/proc-using-proc-async: string-level and mixed-mode input and string-level output for free.

[13:16] <Geth> ¦ rakudo/proc-using-proc-async:

[13:16] <Geth> ¦ rakudo/proc-using-proc-async: This is in preparation for IO::Pipe switching to use Proc::Async,

[13:16] <Geth> ¦ rakudo/proc-using-proc-async: which will become a concrete illustration of this.

[13:17] <Geth> ¦ rakudo/proc-using-proc-async: review: https://github.com/rakudo/rakudo/commit/3da80259c4

[13:38] <Geth> ¦ rakudo/proc-using-proc-async: 40dd369d32 | (Jonathan Worthington)++ | src/core/Proc.pm

[13:38] <Geth> ¦ rakudo/proc-using-proc-async: Re-work shell in terms of spawn.

[13:38] <Geth> ¦ rakudo/proc-using-proc-async:

[13:38] <Geth> ¦ rakudo/proc-using-proc-async: Since there's really not much difference, and no reason to make a

[13:38] <Geth> ¦ rakudo/proc-using-proc-async: distinction at the VM op level that is so easily replicated at the

[13:38] <Geth> ¦ rakudo/proc-using-proc-async: Perl 6 level.

[13:38] <Geth> ¦ rakudo/proc-using-proc-async: review: https://github.com/rakudo/rakudo/commit/40dd369d32

[13:41] <eveo> m: my num $ = my str $ = 'Infinity';

[13:41] <camelia> rakudo-moar bdf201: OUTPUT: «Can't convert 'Infinity' to num: trailing stuff␤  in block <unit> at <tmp> line 1␤␤»

[13:42] <eveo> "trailing stuff"? heh.

[13:42] <jnthn> win 28

[13:42] <buggable> jnthn, Thank you for entering Accidental /win Lottery! The next draw will happen in -2 weeks, 2 days, 10 hours, 17 minutes, and 40 seconds

[13:42] <eveo> heh

[13:42] <eveo> Temporal bugs will hunt me forever.

[13:49] <Geth> ¦ rakudo/proc-using-proc-async: 2ccd5cb1f5 | (Jonathan Worthington)++ | src/core/Proc.pm

[13:49] <Geth> ¦ rakudo/proc-using-proc-async: Don't use nqp::ops to implement QX.

[13:49] <Geth> ¦ rakudo/proc-using-proc-async:

[13:49] <Geth> ¦ rakudo/proc-using-proc-async: Do it in terms of the Proc API instead, to ease refactoring.

[13:49] <Geth> ¦ rakudo/proc-using-proc-async: review: https://github.com/rakudo/rakudo/commit/2ccd5cb1f5

[13:50] <jnthn> OK, I think I've probably done all I can to make the re-working of Proc using Proc::Async stand a chance of going smoothly :)

[13:51] <jnthn> Time to go for the big step

[13:55] <[Coke]> jnthn++

[14:09] <eater> very cool jnthn :D

[14:47] * eveo adds a new "Internal" changelog section to log large internal stuff, like handle encoding refactor, or proc-as-proc-async refactor that still has some inpact on users, even if there's no apparent change in external API

[14:48] <jnthn> eveo: Makes sense to me

[14:54] <jnthn> Man, some effort to get this thing wroking

[14:54] <jnthn> At least it passes make test now

[14:54] * jnthn spectests

[14:56] <jnthn> Aww, 6 failures

[14:57] <ugexe> eveo: that branch might solve your weird DESTROY test failure since it uses proc async for precomp

[14:57] <eveo> Cool

[15:46] <eveo> .ask lizmat Do you remember which bug it was? Was it :{42 => 0}.Set still having 42 in it, despite value being 0? "This actually also fixes a hereto unseen bug in objecthash.Set coercion." https://github.com/rakudo/rakudo/commit/160de7e6f02e295b5e54c3c87b69af1ca5740fd8

[15:46] <yoleaux> eveo: I'll pass your message to lizmat.

[15:52] <Geth> ¦ rakudo/proc-using-proc-async: 7c279f479f | (Jonathan Worthington)++ | src/core/IO/Handle.pm

[15:52] <Geth> ¦ rakudo/proc-using-proc-async: Introduce eof-internal also.

[15:52] <Geth> ¦ rakudo/proc-using-proc-async:

[15:52] <Geth> ¦ rakudo/proc-using-proc-async: Which is always about the underlying handle, and not about the

[15:52] <Geth> ¦ rakudo/proc-using-proc-async: decoder.

[15:52] <Geth> ¦ rakudo/proc-using-proc-async: review: https://github.com/rakudo/rakudo/commit/7c279f479f

[15:52] <Geth> ¦ rakudo/proc-using-proc-async: 92bd7e4f54 | (Jonathan Worthington)++ | 3 files

[15:52] <Geth> ¦ rakudo/proc-using-proc-async: Re-implement Proc in terms of Proc::Async.

[15:52] <Geth> ¦ rakudo/proc-using-proc-async:

[15:52] <Geth> ¦ rakudo/proc-using-proc-async: Almost works; the case of chaining the output of one Proc into another

[15:52] <Geth> ¦ rakudo/proc-using-proc-async: is still to come.

[15:52] <Geth> ¦ rakudo/proc-using-proc-async: review: https://github.com/rakudo/rakudo/commit/92bd7e4f54

[15:53] <jnthn> OK, got exactly one failing test case across the whole spectest with that lot

[15:53] <jnthn> I know what it is, but will leave it until the morning to fix :)

[15:54] <eveo> \o/

[15:57] <lizmat> eveo: I think I showed the bug on Channel shortly before the fix

[15:57] <yoleaux> 15:47Z <eveo> lizmat: Do you remember which bug it was? Was it :{42 => 0}.Set still having 42 in it, despite value being 0? "This actually also fixes a hereto unseen bug in objecthash.Set coercion." https://github.com/rakudo/rakudo/commit/160de7e6f02e295b5e54c3c87b69af1ca5740fd8

[15:59] <eveo> Don't see anything in logs on that day±1. I'll just log it as fix for :{}.Set ignoring values.

[16:00] <eveo> c: 2017.05 :{42 => 0}.Set.say

[16:00] <committable6> eveo, ¦2017.05: «set(42)»

[16:00] <eveo> c: HEAD :{42 => 0}.Set.say

[16:00] <committable6> eveo, ¦HEAD(bdf2019): «set()»

[16:01] <lizmat> eveo: yeah, objectHash.Set not checking for truthiness was the problem

[16:02] <eveo> cool

[16:14] <jnthn> Yay, r-j seems to have also survived the changes

[16:15] <jnthn> oh darn, almost :/

[16:17] <jnthn> make install somehow blows up

[16:17] <jnthn> In install-core-dist

[16:17] <jnthn> Of course I'm presuming this is my change

[16:21] <eveo> Oh god.

[16:21] <eveo> I made a buggy bingo program. And now 200+ people are emailing me about me.

[16:21] <eveo> about it

[16:21] <lizmat> .oO( bingo! )

[16:36] <Geth> ¦ nqp: cabb94f14c | (Jonathan Worthington)++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/DecoderInstance.java

[16:36] <Geth> ¦ nqp: Mark decoder instnace methods synchronized.

[16:36] <Geth> ¦ nqp:

[16:36] <Geth> ¦ nqp: This shouldn't really be needed, but it seems it for some reason is

[16:36] <Geth> ¦ nqp: at present.

[16:36] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cabb94f14c

[16:37] <jnthn> Alrighty, that'll at least mean the JVM doesn't block the merge tomorrow :)

[16:37] <jnthn> Will fix the last test I mentioned earlier and merge this lot tomorrow

[16:49] <lizmat> good to have something for next week's P6W  :-)

[17:50] <eveo> .tell stmuk you have a PR in this repo. Also, looks like the Issues tab is disabled: https://github.com/stmuk/tap-harness6-prove6

[17:50] <yoleaux> eveo: I'll pass your message to stmuk.

[17:54] <dogbert17> m: sub foo(--> Cool(Int)) { Nil }

[17:54] <camelia> rakudo-moar bdf201: ( no output )

[17:54] <dogbert17> commit: 2016.06 ub foo(--> Cool(Int)) { Nil }

[17:54] <committable6> dogbert17, https://gist.github.com/a27df3ff2131e7cce31292d8c35ff0a8

[17:54] <dogbert17> commit: 2016.06 sub foo(--> Cool(Int)) { Nil }

[17:54] <committable6> dogbert17, ¦2016.06: «»

[17:55] <dogbert17> commit: 2016.01 sub foo(--> Cool(Int)) { Nil }

[17:55] <committable6> dogbert17, ¦2016.01: «»

[17:55] <eveo> Nils bypasss type checks

[17:55] <dogbert17> but why can now have corecion types as return constraints?

[17:55] <dogbert17> s/why/we/

[17:56] <eveo> m: sub foo(--> Int(Cool)) { "42" }().^name.say

[17:56] <camelia> rakudo-moar bdf201: OUTPUT: «Int␤»

[17:56] <eveo> mc: sub foo(--> Int(Cool)) { "42" }().^name.say

[17:56] <committable6> eveo, ¦2015.12: «Type check failed for return value; expected Int(Cool) but got Str␤  in sub foo at /tmp/24upj8BSrJ line 1␤  in block <unit> at /tmp/24upj8BSrJ line 1␤ «exit code = 1»»

[17:56] <eveo> Looks like it

[17:56] <dogbert17> cool, fixing up some docs again

[18:10] <eveo> .ask lizmat do you think we should add some custom iterators for Array.Seq/List.Seq/Range.Seq seqs? Seq.sink does .sink-all, which on default Iterator .pull-ones until end, which causes sunk .Seq of infinite Array/List/Range (I don't know what else) hang

[18:10] <yoleaux> eveo: I'll pass your message to lizmat.

[18:13] <eveo> Well, List already got a custom iterator; should we add .sink-all to it

[18:13] <eveo> (can we?)

[18:14] <eveo> Ah, no we can't. But we can for range.

[18:15] <eveo> I'm gonna add one for Range righ tnow

[18:18] <eveo> Eh, never mind. I don't know what I'm doing

[18:19] <eveo> Oh wait. there's already a rpoper iterator \\oi/

[18:21] <eveo> .tell lizmat nevermind. I realized we can't do that for List/Array 'cause they may be fed from a Seq. For Range, it already got a proper iterator, just going to give it a Seq method so it doesn't go through Any.Seq that does .list on it

[18:21] <yoleaux> eveo: I'll pass your message to lizmat.

[18:21] <eveo> ZofBot: Seqs, Drugs, and Rock'n'Roll

[18:21] <ZofBot> eveo, The rest of the time, it doesn't really matter whether the reader takes "

[18:25] <eveo> m: Seq.new((1..*).iterator)

[18:26] <eveo> or maybe not :|

[18:26] <camelia> rakudo-moar bdf201: OUTPUT: «(timeout)»

[18:27] <eveo> Ah in that case it goes through the special case that handles Inf

[18:27] <eveo> .tell lizmat nevermind. Didn't add anything. I see (1..*).iterator goes through special case without pull-all. Just gonna leave it all as is

[18:27] <yoleaux> eveo: I'll pass your message to lizmat.

[18:28] <eveo> NeuralAnomaly: status

[18:28] <NeuralAnomaly> eveo, [✘] Next release will be in 4 days and 10 hours. Since last release, there are 62 new still-open tickets (0 unreviewed and 1 blockers) and 1 unreviewed commits. See http://perl6.fail/release/stats for details

[18:28] <eveo> ^ marked perl6-debug-m as blocker to reminder to self to try to fix it before release.

[18:30] <lizmat> what can I say?  :-)

[18:30] <yoleaux> 18:10Z <eveo> lizmat: do you think we should add some custom iterators for Array.Seq/List.Seq/Range.Seq seqs? Seq.sink does .sink-all, which on default Iterator .pull-ones until end, which causes sunk .Seq of infinite Array/List/Range (I don't know what else) hang

[18:30] <yoleaux> 18:21Z <eveo> lizmat: nevermind. I realized we can't do that for List/Array 'cause they may be fed from a Seq. For Range, it already got a proper iterator, just going to give it a Seq method so it doesn't go through Any.Seq that does .list on it

[18:30] <yoleaux> 18:27Z <eveo> lizmat: nevermind. Didn't add anything. I see (1..*).iterator goes through special case without pull-all. Just gonna leave it all as is

[18:31] <eveo> Nothing :D

[18:38] <Geth> ¦ rakudo/nom: 0095cd8e27 | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/ChangeLog

[18:38] <Geth> ¦ rakudo/nom: Log all changes to date

[18:38] <Geth> ¦ rakudo/nom:

[18:38] <Geth> ¦ rakudo/nom: Documents commits:

[18:38] <Geth> ¦ rakudo/nom: 0104a439 01d948d2 02614f64 05f3e9a0 0646d3fa 06cd0bc3 071c88cb 07bff0e5

[18:38] <Geth> ¦ rakudo/nom: 0a100825 0cb4df44 0e9ee0d1 10e9c8ba 122aca1c 12d31e36 1369632f 160de7e6

[18:38] <Geth> ¦ rakudo/nom: 18dd0741 1ac7996a 1c16bf2e 1ed284e2 20310d7d 211063c7 232cf190 252dbf3a

[18:38] <Geth> ¦ rakudo/nom: 27f09e9d 2816ef71 2ac120ce 2e041b06 2efd812c 326faed6 32eb285f 36bc4102

[18:38] <Geth> ¦ rakudo/nom: <…commit message has 12 more lines…>

[18:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0095cd8e27

[18:39] <eveo> ????????????????????????????????????????????????????????????????????????????????????????????????????????

[18:39] <eveo> 

[18:39] <eveo> REMINDER: the next Rakudo compiler release will be this Saturday (Jun. 17).

[18:39] <eveo> Please check the ChangeLog, to ensure your work was correctly logged.

[18:39] <eveo> 

[18:39] <eveo> ????????????????????????????????????????????????????????????????????????????????????????????????????????

[18:46] <Geth> ¦ roast/6.c-errata: 5023c14153 | (Zoffix Znet)++ | integration/error-reporting.t

[18:46] <Geth> ¦ roast/6.c-errata: Fix syntax error

[18:46] <Geth> ¦ roast/6.c-errata:

[18:46] <Geth> ¦ roast/6.c-errata: Made in https://github.com/perl6/roast/commit/79b62cfce08d03fc1c6df18224

[18:46] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/5023c14153

[18:48] <eveo> .tell samcv on 6.c-errata t/spec/S15-nfg/grapheme-break.t now fails 3 Regional_Indicator tests. Are the tests wrong?

[18:48] <yoleaux> eveo: I'll pass your message to samcv.

[19:02] <Geth> ¦ roast/6.c-errata: b6f7a84191 | (Zoffix Znet)++ | S06-multi/type-based.t

[19:02] <Geth> ¦ roast/6.c-errata: Change broken native/where dispatch hang test

[19:02] <Geth> ¦ roast/6.c-errata:

[19:02] <Geth> ¦ roast/6.c-errata: The test tests circular hang does not occur, but relied on a buggy

[19:02] <Geth> ¦ roast/6.c-errata: behaviour that is now fixed[^1]. Fix the test by checking for hangs

[19:02] <Geth> ¦ roast/6.c-errata: using a different test routine.

[19:02] <Geth> ¦ roast/6.c-errata:

[19:02] <Geth> ¦ roast/6.c-errata: Explanation why old behaviour was a bug:

[19:02] <Geth> ¦ roast/6.c-errata: https://irclog.perlgeek.de/perl6-dev/2016-10-25#i_13462673

[19:02] <Geth> ¦ roast/6.c-errata: https://rt.perl.org/Ticket/Display.html?id=129844#txn-1433016

[19:02] <Geth> ¦ roast/6.c-errata:

[19:02] <Geth> ¦ roast/6.c-errata: [1] https://github.com/rakudo/rakudo/commit/ccfa5e51a21f5a613ecb0cf

[19:02] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/b6f7a84191

[19:03] <Geth> ¦ roast: 405c151ae6 | (Zoffix Znet)++ | S06-multi/type-based.t

[19:03] <Geth> ¦ roast: Revert "Remove test that's not correct"

[19:03] <Geth> ¦ roast:

[19:03] <Geth> ¦ roast: This reverts commit 1ba85e82227bbbba636d2c6c0057367bff1dda70.

[19:03] <Geth> ¦ roast:

[19:03] <Geth> ¦ roast: The test tests for hangs, so we're not going to remove it, but merely

[19:03] <Geth> ¦ roast: modify it.

[19:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/405c151ae6

[19:04] <Geth> ¦ roast: 01f8387e92 | (Zoffix Znet)++ | S06-multi/type-based.t

[19:04] <Geth> ¦ roast: Change broken native/where dispatch hang test

[19:04] <Geth> ¦ roast:

[19:04] <Geth> ¦ roast: The test tests circular hang does not occur, but relied on a buggy

[19:04] <Geth> ¦ roast: behaviour that is now fixed[^1]. Fix the test by checking for hangs

[19:04] <Geth> ¦ roast: using a different test routine.

[19:04] <Geth> ¦ roast:

[19:04] <Geth> ¦ roast: Explanation why old behaviour was a bug:

[19:04] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6-dev/2016-10-25#i_13462673

[19:04] <Geth> ¦ roast: https://rt.perl.org/Ticket/Display.html?id=129844#txn-1433016

[19:04] <Geth> ¦ roast:

[19:04] <Geth> ¦ roast: [1] https://github.com/rakudo/rakudo/commit/ccfa5e51a21f5a613ecb0cf

[19:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/01f8387e92

[19:08] <eveo> m: say mix("e" => 4.4) (<=) mix("e" => 2.2)

[19:08] <camelia> rakudo-moar 0095cd: OUTPUT: «True␤»

[19:08] <eveo> m: say mix("e" => 1.4) (<) mix("e" => 2.2)

[19:08] <camelia> rakudo-moar 0095cd: OUTPUT: «False␤»

[19:09] <eveo> Is that right? There are some errata tests failing in t/spec/S03-operators/mix.t

[19:10] <eveo> Oh

[19:10] <eveo> mix("e" => 2.2)

[19:10] <eveo> m: mix("e" => 2.2)

[19:10] <camelia> rakudo-moar 0095cd: ( no output )

[19:10] <eveo> m: dd mix("e" => 2.2)

[19:10] <camelia> rakudo-moar 0095cd: OUTPUT: «(:e(2.2)=>1).Mix␤»

[19:11] <eveo> pwned by generated test description

[19:12] <lizmat> eveo: oops ?

[19:13] <eveo> lizmat: I think everything's good.

[19:13] <lizmat> *phew*  :-)

[19:14] <eveo> I mean, a change is needed, but it's due to the already-discussed semantics for these ops.

[19:26] <eveo> oh, actually not even due to that. I was looking at the wrong thing

[19:27] * eveo is amused he successfully argued for removal of tests in roast before noticing their removal isn't needed

[19:28] <eveo> For record, my argument was that normal ops in the section were TODOed as "needing further discussion", but their negations weren't and were now failing. So the tests were wrong to assume finalized behaviour for negations when non-negated ops weren't finalized.

[19:28] <eveo> But turns out it's just the test data is wrong and the tests actually still pass and the TODOed ops now pass too

[19:32] <Geth> ¦ roast/6.c-errata: 4474fca9a7 | (Zoffix Znet)++ | S03-operators/mix.t

[19:32] <Geth> ¦ roast/6.c-errata: Fix incorrect test data creation

[19:32] <Geth> ¦ roast/6.c-errata:

[19:32] <Geth> ¦ roast/6.c-errata: mix "foo" => 42; creates a Mix with a Pair as key and weight 1, so

[19:32] <Geth> ¦ roast/6.c-errata: the tests that were passing, were passing for the wrong reason.

[19:32] <Geth> ¦ roast/6.c-errata:

[19:32] <Geth> ¦ roast/6.c-errata: Remove fudges for now-passing TODOs

[19:32] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/4474fca9a7

[19:35] <eveo> k; just t/spec/S15-nfg/grapheme-break.t now failing

[20:01] <Geth> ¦ rakudo/nom: 413eaeebb8 | (Zoffix Znet)++ | tools/contributors.pl6

[20:01] <Geth> ¦ rakudo/nom: Put Zoffix last if first in the contrib list

[20:01] <Geth> ¦ rakudo/nom:

[20:01] <Geth> ¦ rakudo/nom: Don't wanna be first.

[20:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/413eaeebb8

[20:07] <Geth> ¦ rakudo: danielcliffordmiller++ created pull request #1100: Added myself (danielcliffordmiller) to the credits

[20:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1100

[20:20] * lizmat wonders what the nick of danielcliffordmiller is

[20:22] <Geth> ¦ rakudo/nom: 44c33ddefe | danielcliffordmiller++ (committed using GitHub Web editor) | CREDITS

[20:22] <Geth> ¦ rakudo/nom: Added myself to the credits

[20:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44c33ddefe

[20:22] <Geth> ¦ rakudo/nom: de74f173c9 | lizmat++ (committed using GitHub Web editor) | CREDITS

[20:22] <Geth> ¦ rakudo/nom: Merge pull request #1100 from danielcliffordmiller/patch-1

[20:22] <Geth> ¦ rakudo/nom:

[20:22] <Geth> ¦ rakudo/nom: Added myself (danielcliffordmiller) to the credits

[20:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/de74f173c9

[20:33] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/06/12/2017-24-synchronicity-sorted/

[20:36] <tadzik> yay :) lizmat++

[20:40] <eveo> tadzik: you have a PR in some module

[20:40] <eveo> lizmat++ good weekly

[20:40] <tadzik> eveo: Oh! Looking...

[20:41] <eveo> tadzik: this one I think https://github.com/tadzik/Grammar-BNF/pulls

[20:43] <eveo> and the change that broke that test was removal of rogue space at the end of .message

[20:44] <tadzik> hah, interesting

[20:44] <tadzik> I can imagine the original author putting that space in there with a “*shrug*, I guess that's how it works” :P

[20:44] <tadzik> thanks for pointing it out for me :)

[20:57] <timotimo> yo tadzik!

[20:57] <tadzik> yo!

[21:02] <eveo> tadzik: just realized the travis file in that module still tries to rakudobrew panda. Sent a PR again https://github.com/tadzik/Grammar-BNF/pull/12

[21:03] <tadzik> sweet, thanks :)

[21:04] <tadzik> much appreciated

[21:07] <eveo> Found the test failure with toaster \o/

[21:07] <eveo> (as in toast.perl6.party )

[21:08] <timotimo> i bougth a sandwich toaster today

[21:17] * [Coke] misses sandwiches. :|

[21:36] <Geth> ¦ rakudo/nom: abfb52be1d | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[21:36] <Geth> ¦ rakudo/nom: Make infix:<∉> about 10% faster

[21:36] <Geth> ¦ rakudo/nom:

[21:36] <Geth> ¦ rakudo/nom: By only negating the final result, instead of negating the op.

[21:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/abfb52be1d

[21:43] <lizmat> m: dd { a => 1 } (<=) { a => 0 }   # grrrr

[21:43] <camelia> rakudo-moar de74f1: OUTPUT: «Bool::True␤»

[21:43] <lizmat> m: dd { a => 1 }.Set (<=) { a => 0 }.Set # should be the same

[21:43] <camelia> rakudo-moar de74f1: OUTPUT: «Bool::False␤»

[21:45] * lizmat will think about that tomorrow

[21:45] <eveo> m: dd { a => 0 }.Set

[21:45] <camelia> rakudo-moar de74f1: OUTPUT: «set()␤»

[21:46] <eveo> I'm hunting a toast burnage in some module. Dunno what the issue is yet, but I see .MixHash involved.

[21:48] <jnthn> ooh, I should remember about that Decoder REPR one tomorrow also

[21:54] <travis-ci> Rakudo build errored. Zoffix Znet 'Put Zoffix last if first in the contrib list

[21:54] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/242164372 https://github.com/rakudo/rakudo/compare/0095cd8e27ef...413eaeebb865

[21:54] <buggable> Failed to fetch build data

[21:56] <lizmat> good night, #perl6-dev!

[22:09] <eveo> uh-oh buggable ded

[22:09] <eveo> Sounds like Weekly Readers are using my toaster up that's nomming all the RAM :D

[22:09] <eveo> hm, nope. just ded

[22:23] <eveo> ugh... hate TFW you're too dig into debugging to give up, but you don't actually use this code to care if it's fixed

[22:23] <timotimo> hm, like, you'd have to write it down as a test case and run it regularly to see if it's still broken?

[22:26] <eveo> No, some change in Rakudo broke a module and I'm deep in its guts right now

[22:26] <eveo> But I don't use that module, so I don't really care if it's broken

[22:45] <eveo> finally

[22:45] <eveo> c: 2017.05 dd (0 => 1, 0 => 0, 0 => 0, 0 => -1).Seq.MixHash

[22:46] <committable6> eveo, ¦2017.05: «().MixHash»

[22:46] <eveo> c: HEAD dd (0 => 1, 0 => 0, 0 => 0, 0 => -1).Seq.MixHash

[22:46] <committable6> eveo, ¦HEAD(abfb52b): «(0=>0).MixHash»

[22:46] <eveo> I think I recall lizmat inquiring about this one.

[22:53] <eveo> .tell lizmat toaster found a regression in .MixHash coercer. Would you know how to fix this? https://rt.perl.org/Ticket/Display.html?id=131561#txn-1465951

[22:53] <yoleaux> eveo: I'll pass your message to lizmat.

[23:01] <eveo> Hiker burn seems a false positive. No errors

[23:01] <eveo> Need to start writing these down...

[23:01] * eveo calls it a night

[23:02] <eveo> ZofBot: good night, sweet prince!

[23:02] <ZofBot> eveo, If "BinTree" is a signature type and $top is a "Capture" (argument list) object, the child types of the signature are applied to the actual arguments in the argument list object

[23:15] <timotimo> i'll take a bit of time for p6 now and i'm wondering what to spend it doing

[23:20] <eveo> Anything people who top weekly contribution count lists cannot do.

[23:21] <timotimo> oh you :)

[23:23] <eveo> Well, more than one :) And for rakudo, lizmat++ is pretty much always the leader

[23:23] <eveo> But I meant it makes sense to do things that likely won't get done in a while given the current list of active contributors :)

[23:31] <timotimo> oh, neat, the range optimization still exists

[23:31] <timotimo> you know, by introducing a local variable we could totally also handle non-fixed-at-compile-time ranges

[23:32] <eveo> Here's a good one, if you're interested: https://rt.perl.org/Ticket/Display.html?id=131330#ticket-history

[23:33] <eveo> "for ^N { } got about 2.5x slower in 5401a1a

[23:33] <eveo> "

[23:37] <timotimo> ah, the for optimization happens in the gives-a-value branch of the want, but clearly the void version of the branch is being used in the end

[23:39] <timotimo> looks like we're not generating a p6sink for the for loop case, but it does get sunk anyway
