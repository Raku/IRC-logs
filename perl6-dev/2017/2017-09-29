[00:16] <Geth> ¦ roast/6.c-errata: 0940d21cf4 | (Zoffix Znet)++ | packages/Test/Util.pm

[00:16] <Geth> ¦ roast/6.c-errata: Update Test::Util version in 6.c-errata

[00:16] <Geth> ¦ roast/6.c-errata:

[00:16] <Geth> ¦ roast/6.c-errata: Need it for 6.c-only tests I'm gonna move from master

[00:16] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/0940d21cf4

[00:23] <Zoffix> 6.c-errata failures: t/spec/S04-phasers/end.t t/spec/S17-supply/basic.t t/spec/S29-context/exit.t t/spec/S32-str/sprintf.t

[00:23] <Zoffix> (I hope none are from my change to de-specialize `open "-"`

[00:23] <Zoffix> )

[00:26] <Geth> ¦ roast/6.c-errata: cba73db7d0 | (Zoffix Znet)++ | S32-io/open.t

[00:26] <Geth> ¦ roast/6.c-errata: Move open "-" specialness tests to 6.c

[00:26] <Geth> ¦ roast/6.c-errata:

[00:26] <Geth> ¦ roast/6.c-errata: They were only added to master branch and we're keeping this

[00:26] <Geth> ¦ roast/6.c-errata: behaviour only in 6.c lang, so it makes sense to keep them only in

[00:26] <Geth> ¦ roast/6.c-errata: the 6.c-errata branch.

[00:26] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/cba73db7d0

[00:27] <Geth> ¦ rakudo/nom: 03b1febc93 | (Zoffix Znet)++ | t/spectest.data.6.c

[00:27] <Geth> ¦ rakudo/nom: Add S32-io/open.t to 6.c test files

[00:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/03b1febc93

[00:44] <Zoffix> wtf

[00:45] <Zoffix> This passes the test: https://gist.github.com/zoffixznet/3320ed4897ffa9b651775fc961f4d43d

[00:46] <Zoffix> But if put into t/spec/S32-io/open.t, it gets stuck waiting for input on STDIN :/

[00:46] <Zoffix> even tho it got "use v6.d.PREVIEW;" at the top :

[00:50] <Zoffix> and if I add "diag $*PERL.version ;" before the tests in the file it prints 6.d :S

[00:50] <Zoffix> ZofBot: what's happening?

[00:50] <ZofBot> Zoffix, Note however that any dispatcher derived from "proto" will map named arguments to known declared positional parameters and call the "multi" candidates with positionals for those arguments rather than named arguments

[00:52] <Zoffix> huh

[00:52] <MasterDuke> Zoffix: no idea, but shouldn't the description of the second test be '&open(IO::Path)'?

[00:53] <Zoffix> And afetr the .t file hangs, if I run the file with code with git it hangs too, but if I kill it and re-run then it works.

[00:53] <Zoffix> MasterDuke: yeah, thanks

[00:57] <Zoffix> *sigh*

[00:57] <Zoffix> Gonna debug further tomorrow

[00:58] <Geth> ¦ rakudo/unspeshul-open: 76359abea7 | (Zoffix Znet)++ | src/core/IO/Handle.pm

[00:58] <Geth> ¦ rakudo/unspeshul-open: Make open("-") non-special in 6.d

[00:58] <Geth> ¦ rakudo/unspeshul-open: review: https://github.com/rakudo/rakudo/commit/76359abea7

[00:59] <Geth> ¦ roast/unspeshul-open: 481ec90646 | (Zoffix Znet)++ | S32-io/open.t

[00:59] <Geth> ¦ roast/unspeshul-open: Test open("-") is not special in 6.d

[00:59] <Geth> ¦ roast/unspeshul-open:

[00:59] <Geth> ¦ roast/unspeshul-open: The specialness tests were moved[^1] to 6.c-errata. Switch entire

[00:59] <Geth> ¦ roast/unspeshul-open: file to 6.d and test that "-" is not special

[00:59] <Geth> ¦ roast/unspeshul-open:

[00:59] <Geth> ¦ roast/unspeshul-open: [1] https://github.com/rakudo/rakudo/commit/03b1febc93

[00:59] <Geth> ¦ roast/unspeshul-open: review: https://github.com/perl6/roast/commit/481ec90646

[01:00] <Zoffix> s:g/hangs/waits for STDIN/;

[01:01] <Zoffix> Something isn't propagating the language right or maybe nqp::getcomp('perl6').language_version isn't the right way to get it at all times and need to use $*PERL.version

[01:23] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'We want the definite type, jnthn++'

[01:23] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280938056 https://github.com/rakudo/rakudo/compare/70ca505ad0df...af2ab751b838

[01:23] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[01:24] <TimToady> AlexDaniel: by that argument it should be called !lang

[01:24] <TimToady> m: <perl5 golang c# !lang 6lang ruby>.sort.say

[01:24] <camelia> rakudo-moar 03b1fe: OUTPUT: «(!lang 6lang c# golang perl5 ruby)␤»

[01:25] <AlexDaniel> unless "…4langs already exist, no

[01:26] <AlexDaniel> …5 I mean. O-ops :)

[01:26] <AlexDaniel> it's not that the proposal was motivated by this

[01:27] <AlexDaniel> simply it's one of its benefits

[01:28] <Zoffix> Clearly it should be "\0lang" :P

[01:29] * Zoffix & depowers

[01:30] <AlexDaniel> Zoffix: no, because this new language named \0 will be first then.

[01:31] <Zoffix> Dammit, can't win :)

[02:08] <travis-ci> Rakudo build passed. Zoffix Znet 'Polish unicode -> ascii op converter

[02:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/281002994 https://github.com/rakudo/rakudo/compare/af2ab751b838...9ff2f98f796b

[02:25] <TimToady> so if the real name of "golang" is Go, the real name of 6lang is "6"?

[02:32] <MasterDuke> "p6lang. with a 'p', like in psychology"

[02:35] <ugexe> i like bloop blorp

[02:49] <samcv> bloob blorp?

[03:00] <travis-ci> Rakudo build canceled. Stefan Seifert 'Remove unnecessary creation of an extra serialization context

[03:00] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280445160 https://github.com/rakudo/rakudo/compare/9af5607d523e...269fe7dbbd7b

[03:00] <buggable> [travis build above] ✓ All failures are due to: missing build log (1 failure).

[03:53] <Geth> ¦ roast/6.c-errata: 947ba7960e | (Samantha McVey)++ | S02-literals/quoting-unicode.t

[03:53] <Geth> ¦ roast/6.c-errata: Remove ornate parenthesis from quoting-unicode.t

[03:53] <Geth> ¦ roast/6.c-errata:

[03:53] <Geth> ¦ roast/6.c-errata: These should never have been added as they are not considered

[03:53] <Geth> ¦ roast/6.c-errata: brackets by Unicode. There are no modules in the ecosystem which use it

[03:53] <Geth> ¦ roast/6.c-errata: and saving this for Perl 6.d would not be viable or needed.

[03:53] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/947ba7960e

[05:10] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Move up Rakudo::Internals::CompilerServices

[05:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/281069472 https://github.com/rakudo/rakudo/compare/6824e19282e1...7363f898f67e

[05:48] <nine> .tell Zoffix Please do not use constructs like "$*PERL.version after v6.c". That it does what you need it to do is a plain bug that really needs to be fixed. You are trying to get your caller's language version by accessing something that should be different only in lexical scope. $*PERL.version behaves completely bogus and unpredictable.

[05:48] <yoleaux> nine: I'll pass your message to Zoffix.

[05:50] <nine> .tell Zoffix To make it clear: there is currently _no_ way at all to correctly do what you are trying. That's to me the single biggest blocker of 6.d.

[05:50] <yoleaux> nine: I'll pass your message to Zoffix.

[06:42] <travis-ci> Rakudo build passed. Zoffix Znet '"Remove" is_approx in 6.d

[06:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/281090613 https://github.com/rakudo/rakudo/compare/7363f898f67e...cd043f2ae4cb

[06:56] <[Tux]> Did the yesterday timings do a wake-up call? Drumrollllllll

[06:57] <[Tux]> This is Rakudo version 2017.09-154-g03b1febc9 built on MoarVM version 2017.09.1-50-g3059ba28

[06:57] <[Tux]> csv-ip5xs        1.351 -  1.461

[06:57] <[Tux]> test            10.236 - 10.898

[06:57] <[Tux]> test-t           3.247 -  3.318

[06:57] <[Tux]> csv-parser      13.066 - 13.113

[07:03] * TimToady finally back home (we had a 10-hour layover in YVR) and now will collapse into bed

[07:13] <nine> csv-ip5xs still looks slower than it used to be?

[07:19] <TimToady> and, of course, the pipe under the guest bathroom sink immediately breaks and floods everything before ever we get into bed...

[07:20] <gfldex> TimToady: that broken pipe will still be there in the morning

[07:20] <TimToady> hopefully the water won't...

[07:21] <TimToady> gonna run a fan overnight to help guarantee that...

[07:23] <travis-ci> Rakudo build passed. Zoffix Znet 'Deprecate Str.lines: :$count in 6.d'

[07:23] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/281093901 https://github.com/rakudo/rakudo/compare/cd043f2ae4cb...01d4939c38db

[07:25] <lizmat> [Tux] that's less than I was going for  :-(

[07:25] <yoleaux> 28 Sep 2017 22:39Z <dogbert2> lizmat: eb9c3d4dd7791ad1 fails

[08:07] <stmuk> has anyone tried building on the new OS X (High Sierra) with their new fs?

[08:10] <travis-ci> Rakudo build passed. Zoffix Znet 'Remove $*MAIN-ALLOW-NAMED-ANYWHERE

[08:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/281101058 https://github.com/rakudo/rakudo/compare/01d4939c38db...9cb4b167f5e0

[08:19] <Geth> ¦ rakudo/nom: 4959df3f31 | (Elizabeth Mattijsen)++ | 2 files

[08:19] <Geth> ¦ rakudo/nom: Remove $/ support from CompilerServices

[08:19] <Geth> ¦ rakudo/nom:

[08:19] <Geth> ¦ rakudo/nom: This reverts the first commit (and subsequent commits related to this)

[08:19] <Geth> ¦ rakudo/nom: that dogbert++ found to be the first that caused failures for him.

[08:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4959df3f31

[08:20] <lizmat> stmuk: not me

[08:57] <travis-ci> Rakudo build passed. Zoffix Znet 'Add S32-io/open.t to 6.c test files'

[08:57] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/281109987 https://github.com/rakudo/rakudo/compare/9cb4b167f5e0...03b1febc93ab

[08:58] <Zoffix> .

[08:58] <yoleaux> 05:48Z <nine> Zoffix: Please do not use constructs like "$*PERL.version after v6.c". That it does what you need it to do is a plain bug that really needs to be fixed. You are trying to get your caller's language version by accessing something that should be different only in lexical scope. $*PERL.version behaves completely bogus and unpredictable.

[08:58] <yoleaux> 05:50Z <nine> Zoffix: To make it clear: there is currently _no_ way at all to correctly do what you are trying. That's to me the single biggest blocker of 6.d.

[08:58] <Zoffix> interesting...

[08:59] <Zoffix> Well, at least that explains the bug I was having :D

[08:59] * Zoffix goes to sleep again

[09:01] * DrForr takes notes as well.

[09:06] <Zoffix> TimToady: the real name of 6lang is 6lang :)

[09:06] <Zoffix> Or "slang"

[09:06] <Zoffix> Or its alternative name "Perl 6"

[09:07] <Zoffix> Unless you plan to entirely replace the name, which I'm all for, but I know some other people aren't :)

[09:09] <DrForr> As long as the 6 faces in the right direction :)

[09:10] <Zoffix> Yup :)

[09:12] <DrForr> Being able to encaase blocks in 'for False, True -> $*PURE-PERL { .. }' makes for easy rewriting of test suites...

[09:12] <DrForr> The more I do this sort of thing the more an outline for Perl 6 best practices comes to mind..

[09:16] <Geth> ¦ rakudo/nom: 22d3d933b3 | (Zoffix Znet)++ | 2 files

[09:16] <Geth> ¦ rakudo/nom: Revert "Deprecate Str.lines: :$count in 6.d"

[09:16] <Geth> ¦ rakudo/nom:

[09:16] <Geth> ¦ rakudo/nom: This reverts commit 01d4939c38dba9c98b76991cd59be9e438d42a76.

[09:16] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-09-29#i_15233995

[09:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22d3d933b3

[09:16] <Geth> ¦ rakudo/nom: 8ed7adf1a6 | (Zoffix Znet)++ | 2 files

[09:16] <Geth> ¦ rakudo/nom: Revert ""Remove" is_approx in 6.d"

[09:16] <Geth> ¦ rakudo/nom:

[09:16] <Geth> ¦ rakudo/nom: This reverts commit cd043f2ae4cb617eae89252de3263a49c54311f3.

[09:16] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-09-29#i_15233995

[09:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ed7adf1a6

[09:18] <Geth> ¦ rakudo/nom: 68fdeff3b6 | (Zoffix Znet)++ | t/02-rakudo/v6.d-tests/01-deprecations.t

[09:18] <Geth> ¦ rakudo/nom: Revert "[6.d] Deprecate IO::Handle.slurp-rest"

[09:18] <Geth> ¦ rakudo/nom:

[09:18] <Geth> ¦ rakudo/nom: This reverts commit 3341384bfe1341200a75ddc7ec869812cd58aeed.

[09:18] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-09-29#i_15233995

[09:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/68fdeff3b6

[09:19] <Geth> ¦ rakudo/nom: 142f772e32 | (Zoffix Znet)++ | src/core/IO/Handle.pm

[09:19] <Geth> ¦ rakudo/nom: Revert "[6.d] Deprecate IO::Handle.slurp-rest"

[09:19] <Geth> ¦ rakudo/nom:

[09:19] <Geth> ¦ rakudo/nom: This reverts commit 3341384bfe1341200a75ddc7ec869812cd58aeed.

[09:19] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-09-29#i_15233995

[09:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/142f772e32

[09:19] <Zoffix> damn now conflicts

[09:21] <Geth> ¦ rakudo/nom: a65d5f922a | (Zoffix Znet)++ | 3 files

[09:21] <Geth> ¦ rakudo/nom: Revert "[6.d] Deprecate IO::Path.chdir"

[09:21] <Geth> ¦ rakudo/nom:

[09:21] <Geth> ¦ rakudo/nom: This reverts commit 6d2adb20f2529e36e32b50936281ef3f11f078b0.

[09:21] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-09-29#i_15233995

[09:21] <Geth> ¦ rakudo/nom: Conflicts:

[09:21] <Geth> ¦ rakudo/nom: 	t/02-rakudo/v6.d-tests/01-deprecations.t

[09:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a65d5f922a

[09:22] <Geth> ¦ rakudo/nom: 44d5256cd2 | (Zoffix Znet)++ | 3 files

[09:22] <Geth> ¦ rakudo/nom: Revert "Deprecate dummy arg on .Rat/.FatRat…"

[09:22] <Geth> ¦ rakudo/nom:

[09:22] <Geth> ¦ rakudo/nom: This reverts commit 4c337e8ef9fa8a117761f5a74dc444a188471b71.

[09:22] <Geth> ¦ rakudo/nom:

[09:22] <Geth> ¦ rakudo/nom: Conflicts:

[09:22] <Geth> ¦ rakudo/nom: 	t/02-rakudo/v6.d-tests/01-deprecations.t

[09:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44d5256cd2

[09:29] <Zoffix> ZOFVM: Files=1275, Tests=152181, 142 wallclock secs (20.72 usr  3.14 sys + 3005.78 cusr 208.19 csys = 3237.83 CPU)

[09:29] <Geth> ¦ 6.d-prep: 9913c2aab4 | (Zoffix Znet)++ | TODO/FEATURES.md

[09:29] <Geth> ¦ 6.d-prep: List TODO: need a way to get lang version

[09:29] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/9913c2aab4

[09:43] <nine> .oO(Zoffix doesn't seem to sleep very long. Or long at all. Or more than a moment or two.)

[09:43] <Zoffix> :)

[09:43] <Zoffix> I changed my mind on sleeping :)

[09:46] <Geth> ¦ rakudo/nom: d3c481854e | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[09:46] <Geth> ¦ rakudo/nom: Improve readability of BUILDALL autogenerating logic

[09:46] <Geth> ¦ rakudo/nom:

[09:46] <Geth> ¦ rakudo/nom: And perhaps a bit of streamlining, but I doubt that'd be noticeable.

[09:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d3c481854e

[11:09] <[TuxCM]> lizmat, going down ...

[11:09] <[TuxCM]> This is Rakudo version 2017.09-162-gd3c481854 built on MoarVM version 2017.09.1-50-g3059ba28

[11:09] <[TuxCM]> csv-ip5xs        1.260 -  1.265

[11:09] <[TuxCM]> test             9.359 -  9.486

[11:09] <[TuxCM]> test-t           3.183 -  3.208

[11:09] <[TuxCM]> csv-parser      12.003 - 12.101

[11:10] <lizmat> ah, better  :-)

[11:10] <lizmat> was hoping to get below 3  though  :-(

[11:10] <lizmat> m: say  3.183 / 1.260

[11:10] <camelia> rakudo-moar d3c481: OUTPUT: «2.526190␤»

[11:11] <lizmat> only 2.5x slower than XS + Inline::Perl5

[11:12] <nine> .oO(for low iteration counts)

[11:12] <timotimo> you think we should start doubling the amount of loop iterations? :)

[11:13] <Geth> ¦ rakudo/nom: 371befe8f7 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[11:13] <Geth> ¦ rakudo/nom: Give @/% attributes optimized handling

[11:13] <Geth> ¦ rakudo/nom:

[11:13] <Geth> ¦ rakudo/nom: - instead of having to go through p6store, which then does a .STORE

[11:13] <Geth> ¦ rakudo/nom: - we call .STORE directly

[11:13] <Geth> ¦ rakudo/nom: - This makes them a few percent faster

[11:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/371befe8f7

[11:16] <nine> At Frame 38, Instruction 88, op 'prepargs', operand 0, MAST::Local of wrong type (8) specified; expected 7

[11:16] <nine> trying to build nqp with current Moar master

[11:17] <timotimo> need a full reconfigure & rebuild?

[11:18] <nine> tried make distclean and Configure.pl but no change

[11:18] <timotimo> huh, interesting

[11:18] <nine> neither does realclean

[11:19] <nine> Ah, stupid me. I just forgot the git pull

[11:19] <timotimo> heh :)

[11:19] <timotimo> so a bump is missing?

[11:21] <nine> No, it's the other way round. Old nqp doesn't like new MoarVM

[11:21] <timotimo> oh

[11:23] <travis-ci> Rakudo build passed. Zoffix Znet 'Revert "Deprecate dummy arg on .Rat/.FatRat…"

[11:23] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/281216589 https://github.com/rakudo/rakudo/compare/a65d5f922aee...44d5256cd2cb

[11:24] <lizmat> nine: re test-t and more iterations: doubling the iterations doubles the runtime for me (minus startup overhead)

[11:25] <nine> lizmat: csv-ip5xs spends ~ half a second on startup. That's a huge part of the 1.2s

[11:25] <nine> Here it's pretty close to 1s for 10000 iterations and 5s for 100000 iterations

[11:30] <timotimo> oh, the benchmark tux runs subtracts startup, but perhaps the nativecall stuff isn't all set up during an empty workload

[11:32] <lizmat> $ time perl6 -MInline::Perl5 -e ''   # 0.243 for me, nine

[11:33] <lizmat> could it be that the additional .25 second is needed to parse the Perl 5 modules ?

[11:33] <nine> If it subtracts startup, the machine must be quite slow :) Considering that time perl6 -Ilib test-t.pl < /tmp/hello.csv runs in real    0m2.844s here

[11:33] <timotimo> generated nativecall subs are in nom already, aren't they?

[11:34] <lizmat> timotimo: not sure what you mean

[11:34] <nine> lizmat: that's missing a lot of overhead. You get closer by letting it run a single iteration and measuring that.

[11:34] <nine> Takes 0m0.537s here

[11:34] <timotimo> nativecall generates subs much like the buildallplan now does, but only when the sub actually gets invoked

[11:35] <timotimo> i.e. you only pay for the subs you call, but if you measure startup based on "nothing", you won't call most of the subs

[11:35] <timotimo> how far off the mark am i?

[11:35] <nine> That ^^^ and loading the native library itself, which is only done on the first call.

[11:36] <timotimo> that's probably a bunch cheaper

[11:36] <nine> And starting Perl 5 (which is fast, granted) and loading the Perl 5 modules

[11:36] <nine> And loading the modules triggers a lot of work in Inline::Perl5 for setting up the wrapper classes.

[11:38] <nine> time perl6 -MInline::Perl5 -e '' takes 0.190s here, time perl6 -MInline::Perl5 -e 'use Text::CSV_XS:from<Perl5>;' takes 0.461s

[11:42] <Zoffix> buggable: speed 4

[11:42] <buggable> Zoffix, ▄▂▁▂ dates: 2017-09-29–2017-09-29; range: 3.183s–3.318s; speed: 3% faster

[11:43] <Zoffix> nine: BTW is the $*PERL.version thing an unsolved problem or is there a known path to follow that just needs someone to do it?

[11:43] <Zoffix> Was just wondering if I had any chance to fix whatever the issue is

[11:43] <Zoffix> Or `nqp::getcomp('perl6').language_version()`

[11:43] <dogbert17> lizmat: so you only had to revert parts of your work not all of it ?

[11:43] <lizmat> if it now works for you, yes

[11:43] <timotimo> we've discussed - or tried discussing? - how to get the caller's perl version

[11:44] <timotimo> at the swiss perl workshop

[11:44] <Zoffix> timotimo: was any of it written down?

[11:44] <lizmat> timotimo: we need something like $/ that indicates the Perl version of the current scope

[11:45] <timotimo> "like $/"?

[11:45] <timotimo> you mean a variable accessible through CALLER:: or CLIENT:: ?

[11:45] <lizmat> yeah, like we handle methods setting / inspecting $/ in their outer scope

[11:46] * dogbert17 is at $work so has to download the doc repo

[11:46] <lizmat> because just looking at the callers' package version is not enough

[11:53] <dogbert17> lizmat: the error from yesterday seems to be gone, doing a complete run just to see that nothing else crops up

[12:01] <Geth> ¦ 6.d-prep: 9f0cccb3fd | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[12:01] <Geth> ¦ 6.d-prep: Fix typo; MasterDuke++

[12:01] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/9f0cccb3fd

[12:05] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Improve readability of BUILDALL autogenerating logic

[12:05] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/281224272 https://github.com/rakudo/rakudo/compare/44d5256cd2cb...d3c481854ec3

[12:12] <dogbert17> lizmat: htmlify.p6 is happy again

[12:12] <lizmat> cool  :-)

[12:12] <lizmat> and hopefully a bit faster  :-)

[12:13] <dogbert17> and I see that [Tux] benchmark runs faster, lizmat++

[12:13] <dogbert17> we're closing in on 3 seconds

[12:18] <Zoffix> buggable: speed 100 :4

[12:18] <buggable> Zoffix, ↑↑↑↑↑↑↑↑↑ ▂                                  ▅              █                                ▂       dates: 2017-08-18–2017-09-29

[12:18] <buggable> Zoffix, █████████▁█▄▃ ▅           ▄           ▄    ▅ █              █▆                               █▃      range: 3.183s–4.592s

[12:18] <buggable> Zoffix, █████████████▆█▂▃▆▃▃▅▆▃▂  █▇▁▂ ▂▂ ▂  ▁█▄▂▂▄█▇█▅▂▃▃▂▆▁▃  ▄▇▅▄██▃▃▂▃  ▁▂ ▂  ▂  ▄ ▁      ▃▄ ▄  ▄██▅     speed: 38% faster

[12:18] <buggable> Zoffix, █████████████████████████▇█████████▆▇█████████████████▇▇██████████▇▇██▇█▇▇██▇█▇█▆▇▇▇▇██████▄████▅▃▁▂

[12:18] * Zoffix passes around a round of ++

[12:28] <Zoffix> buggable: speed 120 :4

[12:28] <buggable> Zoffix, ↑            █▇▆↑↑↑██▇██↑↑↑↑↑                                    ▁              ▄                                        dates: 2017-08-04–2017-09-29

[12:28] <buggable> Zoffix, █     ▇      ████████████████ ▅▁  ▃           ▂           ▂    ▂ █              █▃                               ▆       range: 3.183s–4.925s

[12:28] <buggable> Zoffix, █▆▅▆▅▇█▇▅▆▆▃▃████████████████▆███▄█ ▁▄▂▂▃▄▂   █▅   ▁      █▂  ▂█▅█▃ ▂▁ ▄ ▂  ▂▅▃▃██▂▂ ▁           ▃        ▁▂ ▂  ▃██▃     speed: 43% faster

[12:28] <buggable> Zoffix, ████████████████████████████████████████████▇▆██▇█▇█▇▇█▅▆▇██████████████▇█▆▆██████████▆▆▇█▆█▆▆█▇▆█▆▇▅▆▆▇▆▇██▇█▇▄████▄▂▁▂

[12:28] <Zoffix> buggable: speed 115

[12:28] <buggable> Zoffix, ▄▆▄▄▄▄▃▃██▇↑↑↑█████↑↑↑↑↑▄▆▅▄▃▅▃▃▄▃▃▃▄▃▃▂▂▅▄▃▃▂▃▃▂▃▂▂▃▅▃▃▃▃▅▄▆▃▃▃▃▃▃▃▃▂▂▃▄▃▃▇▅▃▃▃▃▂▂▃▃▂▃▂▂▃▂▂▃▂▃▂▂▂▂▂▂▃▃▂▃▂▂▃▆▄▃▂▁▁▁ dates: 2017-08-06–2017-09-29; range: 3.183s–4.925s; speed: 17% faster

[12:29] <Zoffix> .oO( the "speed: 17% faster" thing needs to do some sort of averaging :/ )

[12:36] <Geth> ¦ rakudo/nom: 9d4a833b83 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[12:36] <Geth> ¦ rakudo/nom: Take all constant SVal values out of the loop

[12:36] <Geth> ¦ rakudo/nom:

[12:36] <Geth> ¦ rakudo/nom: Should help a bit with CPU and memory pressure of compilation.

[12:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d4a833b83

[12:48] <[Coke]> (stuffed bear, rubber duck) also the coworker who really doesn't care about your problem but is a good sport and listens to you explain it so y---ah, that's what i did.

[12:48] <[Coke]> (I also have a literal rubber duck on my desk)

[12:48] <DrForr> I used to have a Klingon teddy bear for such a purpose.

[12:50] <moritz> with two hearts?

[12:51] <Geth> ¦ rakudo/nom: 6902c59042 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[12:51] <Geth> ¦ rakudo/nom: Turns out callmethod also takes a :name

[12:51] <Geth> ¦ rakudo/nom:

[12:51] <Geth> ¦ rakudo/nom: So we don't need these SVals after all.

[12:51] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6902c59042

[12:51] <DrForr> Never listened.

[12:52] <moritz> DrForr: sounds like a tragic story

[12:56] <timotimo> oh jeez

[12:57] <DrForr> It's probably in storage, actually.

[12:57] <timotimo> https://imgur.com/5YhyQmE - control flow graph bug from hell

[12:57] <moritz> alone, forgotton and abandoned

[12:58] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Give @/% attributes optimized handling

[12:58] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/281250158 https://github.com/rakudo/rakudo/compare/d3c481854ec3...371befe8f7aa

[13:04] <DrForr> apt update - what hath you wrought, you evil bastard...

[13:26] <lizmat> afk until later&

[13:53] <stmuk> http://ohshitgit.com/

[13:56] <timotimo> that's a cool format

[13:57] <Zoffix> "I tried to run a diff but nothing happened?!" oh cool... I always hated that. Nice to know there is a way to see it

[13:57] <jdv79> to whom is git hard?

[13:58] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Take all constant SVal values out of the loop

[13:58] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/281276381 https://github.com/rakudo/rakudo/compare/371befe8f7aa...9d4a833b8322

[13:58] <buggable> [travis build above] ✓ All failures are due to: timeout (1 failure).

[14:02] <jdv79> how come test runs are so fragile?

[14:03] <Zoffix> it's a free service?

[14:05] <jdv79> so is cpantesters

[14:05] <jdv79> thats a lame excuse

[14:05] <jdv79> in short, we can do better

[14:05] <jdv79> :)

[14:05] <Zoffix> "we"? We don't own travis

[14:06] <jdv79> who needs travis?

[14:06] <Zoffix> why is the sky blue?

[14:06] <Zoffix> ZofBot: what's the question game?

[14:06] <ZofBot> Zoffix, csv-ip5xs 1.339 - 1.341

[14:06] <jdv79> not equivalent but ok

[14:07] <ilmari> jdv79: people who want to test things that aren't cpan modules

[14:09] <jdv79> is travis the best we can do?

[14:09] <timotimo> for free, yeah

[14:10] <jdv79> no.  challenge accepted.

[14:10] <timotimo> wow, ok

[14:13] <Zoffix> heh

[14:14] <jdv79> do we have a doc pointing to all testing infra?

[14:14] <jdv79> i feel like i asked this not that long ago.

[15:02] <Zoffix> m: for (<a b c>, <d e>).map({Slip.new: $_ }) { dd $_ }

[15:02] <camelia> rakudo-moar 6902c5: OUTPUT: «$("a", "b", "c")␤$("d", "e")␤»

[15:02] <Zoffix> m: for (<a b c>, <d e>).map({.Slip}) { dd $_ }

[15:02] <camelia> rakudo-moar 6902c5: OUTPUT: «"a"␤"b"␤"c"␤"d"␤"e"␤»

[15:02] * Zoffix doesn't get Slips

[15:04] <Zoffix> m: for (<a b c>, <d e>).map({Slip.new: |$_ }) { dd $_ }

[15:04] <camelia> rakudo-moar 6902c5: OUTPUT: «"a"␤"b"␤"c"␤"d"␤"e"␤»

[15:04] <Zoffix> ah right doh >_<

[15:07] <jnthn> omg

[15:07] <Zoffix> ?

[15:07] <jnthn> Been hunting bugs in IO::Socket::Async::SSL

[15:08] <jnthn> First, it turns out a fix I attmepted and thought didn't work earlier actually did work, but a second bug inside the failing test made it look like that fix didn't work

[15:08] <jnthn> Anyway, fine

[15:08] <jnthn> But that left me with an occasional hang

[15:09] <jnthn> Which looks like it may be because DESTROY can fire at pretty much any point

[15:09] <jnthn> Including the least possible convenient one

[15:09] <jnthn> And cause a circular lock contention

[15:09] <Zoffix> :o

[15:11] <jnthn> That took some finding.

[15:12] <jnthn> One thread held the lock used to protect libssl against concurrent use and wanted to keep a Promise. The other was adding a then to the Promise, so holding the internal lock on the Promise, but GC ran during Promise construction, ran a DESTROY, which tried to do a lock acquisition of the lock used the protect libssl.

[15:13] <stmuk> is 6.c-errata supposed to still pass on previous rakudo releases (eg. last month's)?

[15:14] <Zoffix> m: with (1, 2, 3).Seq -> $s { $s.skip for ^1000 }

[15:14] <camelia> rakudo-moar 6902c5: OUTPUT: «Method 'pull-one' must be implemented by Iterator because it is required by roles: Iterator.␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:14] <jnthn> hurrah, t/thread-stress.t ran and passed 100 times without a hang

[15:14] <jnthn> Or crash

[15:14] <jnthn> Or wrong answer

[15:14] <timotimo> greetings jnthn

[15:14] <jnthn> o/ timotimo

[15:15] <Zoffix> stmuk: not necessarily, since wrong tests testing incorrect behaviour can get fixed and older rakudo versions might still have the incorrect behaviour

[15:18] <Zoffix> the tarball gets shipped with the 6.c-errata snapshot and that version is supposed to pass for that rakudo version

[15:18] <stmuk> Zoffix: OK that's what I suspected.

[15:25] <stmuk> I can't see anyway of telling easily what git version of 6.c-errata probably passed for 2017.09 other than guessing from the date and comparing what's in the tarball

[15:26] <Zoffix> What the reason for you wanting to tell that?

[15:27] <stmuk> I'm wondering whether there should be a VERSION file or similar created in the roast directory

[15:27] <stmuk> or even tagging

[15:28] <Zoffix> What for?

[15:29] <stmuk> so that someone can use git to debug problems rather than having to use the tarball

[15:30] * Zoffix doesn't follow

[15:30] <Zoffix> I'd think all the problems would be debugged pre-release.

[15:31] <stmuk> what about trying the last rakudo release on a OS release which didn't exist at the time of the last release?

[15:32] <Zoffix> Get the tarball :) You'll get both the code and the tests. If you want to make a patch fixing something, then build from master ¯\_(ツ)_/¯

[15:33] <stmuk> it just seems strange and restricting there is information stored outside of git .. particularly given the importance of roast as defining what perl 6 is

[15:34] <Zoffix> It'd probably not be a VERSION file in roast, but a rakudo/rakudo/tools/build/ROAST_VERSION file + tag in roast

[15:34] <stmuk> yeah something along those lines maybe

[15:35] <Zoffix> stmuk: it makes sense tho. The older rakudo version does not implement the language correctly, so the fixed test fails now.

[15:36] <Zoffix> The whole tagging thing just adds micro language releases "this is rakudo that passes language version 6.c-errata-g.312321.4123fa3"

[15:37] <Zoffix> oh crap.

[15:37] <stmuk> isn't that what you have with monthly releases anyway?

[15:38] <Zoffix> m: my $s := (1, 2, 3); say $s.skip; say $s

[15:38] <camelia> rakudo-moar 6902c5: OUTPUT: «(2 3)␤(1 2 3)␤»

[15:38] <Zoffix> m: my $s := (1, 2, 3).Seq; say $s.skip; say $s

[15:38] <camelia> rakudo-moar 6902c5: OUTPUT: «(2 3)␤(2 3)␤»

[15:38] <Zoffix> different semantics :(

[15:39] <Zoffix> stmuk: yeah, ok, I guess micro-releases for 6.c-errata do make sense.

[15:40] <Zoffix> And the real reason it's crap is 'cause of this:

[15:41] <Zoffix> m: my $s := (1, 2, 3).Seq; $s.cache; say $s.skip; say $s

[15:41] <camelia> rakudo-moar 6902c5: OUTPUT: «Method 'pull-one' must be implemented by Iterator because it is required by roles: Iterator.␤  in block <unit> at <tmp> line 1␤␤»

[15:41] <Zoffix> It's broken there, but in my fix, attempting to .skip a cached Seq doesn't toss the element from the Seq anymore

[15:41] <Zoffix> cpan@perlbuild4~/CPANPRC/rakudo (nom)$ ./perl6 -e 'm: my $s := (1, 2, 3).Seq; $s.cache; say $s.skip; say $s'

[15:41] <Zoffix> (1 2 3)

[15:42] <Zoffix> cpan@perlbuild4~/CPANPRC/rakudo (nom)$ ./perl6 -e 'm: my $s := (1, 2, 3); say $s.skip; say $s'

[15:42] <Zoffix> (2 3)

[15:42] <Zoffix> (1 2 3)

[15:44] <nine> Regarding Travis' instability: I do have a couple gigs of RAM and lots of storage free on my server (even CPU cycles) and could easily set up a VM for running Travis, Jenkins or whatever. We'd just need someone tending to that installation.

[15:44] <nine> We don't _have_ to download and compile even Perl 5 for every single test run after all...

[15:50] <Zoffix> nine: OK, let's set it up. Would be helpful to run stresstest as part of the test run as well

[15:51] <nine> Sooo....what should I call that VM?

[15:51] <nine> rakudo-ci it is

[15:51] <Zoffix> m: say ('a'..'z').pick xx 7

[15:51] <camelia> rakudo-moar 6902c5: OUTPUT: «(j n v s k h u)␤»

[15:51] <Zoffix> m: say ('a'..'z').pick xx 7

[15:51] <camelia> rakudo-moar 6902c5: OUTPUT: «(j f e g n j a)␤»

[15:51] <Zoffix> :)

[15:55] <stmuk> https://metacpan.org/pod/App::test::travis looks interesting

[16:08] <Zoffix> Filed .skip issue as https://rt.perl.org/Ticket/Display.html?id=132184

[16:38] <Zoffix> SlippyIterator is a user class?

[16:38] <Zoffix> *role

[16:38] * ilmari read that as SloppyIterator...

[16:44] <ugexe> i like my iterators extra sloppy

[16:50] <AlexDaniel> Zoffix++ # being OK about changing his mind. I wish there was more of it around here. Me included.

[16:51] <AlexDaniel> .oO( life is hard :S )

[16:52] <AlexDaniel> .

[16:53] <AlexDaniel> japhb: thanks :) .tell didn't work but I did see it

[16:54] <AlexDaniel> m: say 42

[16:54] <evalable6> AlexDaniel, rakudo-moar 6902c5904: OUTPUT: «42»

[16:54] * AlexDaniel loves this little feature

[16:58] <AlexDaniel> Zoffix: re ｢git diff --staged｣, it's actually part of my normal workflow

[16:58] <AlexDaniel> so I always look at what I'm about to commit before running ｢git commit｣

[16:58] <AlexDaniel> … and then I also ｢git diff HEAD^..HEAD｣ after committing, better safe than sorry… :)

[16:59] <AlexDaniel> bonus tip: ｢git diff --staged｣ does not take much effort to type because you can Ctrl-R “sta” Enter

[17:00] <AlexDaniel> assuming that you've used it in the past

[17:00] <AlexDaniel> another bonus tip: remove bash_history limits so that you have infinite command history. Now you only have to type any command *once* in your lifetime. Bring your .bash_history file to any new system you use.

[17:02] <Zoffix> AlexDaniel: changing mind about what?

[17:03] <Zoffix> `git diff HEAD^..HEAD` I think `git show` does something like that

[17:04] <AlexDaniel> Zoffix: well, I was reminded about it when I saw “I changed my mind on sleeping”, but I've seen you go “ok, I'm switching my position” several times now

[17:04] <Zoffix> Ah

[17:04] <Zoffix> I have aliases: `gd` for `git diff` and now `gds` for `git diff --staged` :)

[17:05] <Zoffix> `grr` for 'git pull --rebase' and `GRRR` for `git reset --hard; git pull --rebase`

[17:05] * Zoffix grrrs alot :P

[17:06] <AlexDaniel> that's another way to do it, yeah. But Ctrl+r is universal in a way that you can quickly get *any* command as long as you remember something unique about it

[17:06] <japhb> alias glr='git log -p --reverse'

[17:06] <japhb> I like that one, but even more I use 'gpr', which is ... hold on a sec while I pull up my aliases ...

[17:07] <MasterDuke> alias gg='git grep -E'

[17:07] <MasterDuke> use that a lot

[17:07] <japhb> gpr () { cur=`git rev-parse HEAD`; git pull; git log -p --reverse $cur...; }

[17:07] <AlexDaniel> MasterDuke: have you tried ack? :)

[17:07] <AlexDaniel> it's not as fast though

[17:07] <japhb> That gpr is command is basically what I use to keep up with every Perl 6 repo I follow

[17:08] <MasterDuke> i think i have it installed, but never use it

[17:08] <jnthn> When I was teaching git I used to have git god as git log --graph --oneline --decorate :)

[17:08] <yoleaux> 16:18Z <MasterDuke> jnthn: not to distract from concurrency stuff, but when you've got some time, any thoughts on https://github.com/MoarVM/MoarVM/pull/689?

[17:08] <japhb> That and keeping '/^commit ' in my less history  :-)

[17:08] <japhb> jnthn: glg () { git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %Cblue<%an>%Creset' --abbrev-commit --date=relative "$@" | less -R ; }

[17:09] <jnthn> japhb: Neat :)

[17:10] <japhb> Huh, wonder why the color is missing when running that on my work computer

[17:12] <timotimo> no need to |less that

[17:12] <timotimo> git gives you a pager for free

[17:12] <mst> unless you want to control which pager

[17:13] <timotimo> hm, GIT_PAGER maybe? :)

[17:18] * japhb adds --color=always to the glg command, since that's rather the point

[17:20] <japhb> timotimo: Because I try to reduce the number of different ways I am configuring things, so that I can e.g. copy my .bash_aliases to a new computer, source it, and be immediately more productive, even before I copy more stuff over or if I forget to do so.

[17:20] <japhb> It costs me nothing to be explicit about what I want in my .bash_aliases, plus I can copy and paste from there to show people things, and not have to explain "Oh, and make sure you've got color enabled in your git config and all"

[17:24] <timotimo> fair enough

[17:39] <Zoffix> nine: so should I set everything up for rakudo-ci? Or are you doing something already

[17:40] <nine> Zoffix: I've only installed the very basics so far. What _do_ we actually want to run?

[17:40] <Zoffix> No idea :)

[17:41] <Zoffix> I mean, I have an idea of the end goal: something that builds new commits, stresstests them, and reports when failures happen.

[17:41] <Zoffix> But I guess we'd still have travis running, since it also does OSX? At least the time it takes for it to complete can be halved

[17:42] <Zoffix> Oh and it doesn't stresstests anything, just `make test`

[17:43] <nine> Oh, Travis is not actually really free software?

[17:43] <Zoffix> I don't know.

[17:43] <nine> Wikipedia says: Although the source is technically free software and available piecemeal on GitHub under permissive licenses, the company notes that it is unlikely that casual users could successfully integrate it on their own platforms.[

[17:44] <nine> We do have our own Jenkins at work. I'm not a massive fan however. And apparently it's very difficult/impossible to have it test random branches

[17:44] <Zoffix> Well, I already have an IRC bot that can cut releases. I can just modify it slightly to just be a testing bot.

[17:46] <nine> I wonder how many negative points that will give us in terms of being a sustainable free software project ;)

[17:48] <Zoffix> ZofBot: what are these points?

[17:48] <ZofBot> Zoffix, For instance: sleep& 6model The "new object model"/"MOP" that's currently in rakudo

[17:48] <Zoffix> .oO( 6model... we already have a 6lang-ish term in use... )

[17:48] <nine> But I can't find that sheet anymore that listed the factors

[17:49] <Zoffix> I wonder if the sheet was invented by people pushing corporate version of travis/github/etc :P

[18:07] <Zoffix> Need to nuke and rebuild R6 db from scratch....

[18:07] <Zoffix> ZofBot: in 3... 2... 1...

[18:07] * ZofBot waves good night.

[18:08] <Zoffix> \o/

[18:08] <Zoffix> R6 = fail.rakudo.party

[18:37] <Zoffix> Nuking completed

[18:54] <Zoffix> buggable: tag

[18:54] <buggable> Zoffix, Total: 1648; 6.D: 1; 9999: 10; @LARRY: 24; ANNOYING: 7; BOOTSTRAP: 5; BUG: 603; BUILD: 12; CONC: 48; DOCS: 1; EXOTICTEST: 1; GLR: 3; IO: 23; JVM: 53; LTA: 177; MATH: 4; META: 1; MOAR: 1; NATIVECALL: 22; NYI: 55; OO: 13; OPTIMIZER: 8; OSX: 2; PARSER: 6; PERF: 28; POD: 19; PRECOMP: 14; REGEX: 50; REGRESSION: 37; REPL: 6; RFC: 63; RT: 1;

[18:54] <buggable> Zoffix, SECURITY: 2; SEGV: 25; SINK: 1; SITE: 1; SPESH: 1; STAR: 7; TESTCOMMITTED: 10; TESTNEEDED: 45; TODO: 13; UNI: 26; UNTAGGED: 414; WEIRD: 2; WINDOWS: 3; See http://fail.rakudo.party/ for details

[18:54] <Zoffix> Fixed it getting cut off

[18:54] <Zoffix> buggable: tag security

[18:54] <buggable> Zoffix, There are 2 tickets tagged with SECURITY; See http://fail.rakudo.party/t/SECURITY for details

[18:55] <Zoffix> .oO( remove .EVAL method )

[18:56] <Zoffix> Fixed both RT#128684 and that eval-in-regex thing I posted somewhere

[18:59] <Zoffix> nine: geth is ded

[19:00] <Zoffix> I merged https://github.com/rakudo/rakudo/pull/1175 "Move security RT#131079 fix from Grammar to Actions "

[19:00] <Zoffix> man synopse bot is also ded...

[19:00] <Zoffix> ZofBot: is it a botstrike?

[19:00] <ZofBot> Zoffix, dothat): 1,2,3 or $obj

[19:04] <Zoffix> no idea how synopse bot is meant to be started... don't see a service for it and neither 6lang nor perl scripts in /home/synopsebot start up due to missing modules

[19:04] <MasterDuke> timotimo: ^^^

[19:05] <timotimo> there's a system file

[19:06] <timotimo> ● synopsebot.service - An IRC bot called "synopsebot" for links to the design documents.

[19:06] <Zoffix> oh dam

[19:07] <Zoffix> It wasn't showing up on `sudo service sy[TAB]`

[19:13] <mst> that can happen because the tab complete is running with your privileges

[19:14] <Zoffix> Ah

[19:14] <timotimo> anyway, that bot wants rewriting with the nicer irc bot library, and also to learn a thing or two, like not spitting out the same link multiple times over the course of two minutes

[19:14] <Zoffix> OK, I'll rewrite it tonight

[19:22] <timotimo> m: my $x = "abc"; $x [R~]= "xyz"; say $x

[19:22] <camelia> rakudo-moar 5d12bc: OUTPUT: «Potential difficulties:␤    Useless use of [R~]= in sink context␤    at <tmp>:1␤    ------> 3my $x = "abc"; $x 7⏏5[R~]= "xyz"; say $x␤xyzabc␤»

[19:22] <timotimo> ^- sinkbug

[19:24] <Zoffix> fileit :D

[19:24] <timotimo> there might already be one

[19:24] <timotimo> also i'd like to golf it a bit first

[19:25] <timotimo> looks like it happens for any metaop with brackets before an assignment metaop

[19:26] * Zoffix looks at extra correspondence after RT#132179 was closed

[19:26] <Zoffix> s/Texas/ASCII/ sounds good to me. So.. should be do it?

[19:26] <Zoffix> synopsebot6: weren't you supposed to link to tickets?

[19:27] <Zoffix> #132179 RT#132179 132179

[19:27] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132179

[19:27] <Zoffix> RT#132179

[19:27] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132179

[19:27] <Zoffix> :| now you're just screwing with me

[19:27] <Zoffix> Oh, it doesn't understand ACTION

[19:30] <timotimo> oh

[19:32] <timotimo> https://rt.perl.org/Public/Bug/Display.html?id=131251

[19:32] <Zoffix> Opened a doc Issue for the s/Texas/ASCII/ RFC: https://github.com/perl6/doc/issues/1584

[19:32] <timotimo> this is the bug for metaop assign useless use bug

[19:32] <timotimo> it should also have info for X and Z in there

[19:33] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Takes some more constant QAST out of the loop'

[19:33] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/281401195 https://github.com/rakudo/rakudo/compare/6902c5904271...fb4eb666b0b5

[19:33] <buggable> [travis build above] ☠ All failures are due to: timeout (1 failure), failed make test (1 failure). Across all jobs, only t/04-nativecall/06-struct.t test file failed.

[19:51] <Zoffix> TimToady: AlexDaniel some of Damian Conway's thoughts on the language naming: https://gist.github.com/zoffixznet/522abeb84debe64041ea70afeebc058a

[22:48] <Zoffix> .ask nine would I have the option to getting keys to geth so I could restart it, or pull new changes to it, if needed?

[22:48] <yoleaux> Zoffix: I'll pass your message to nine.

[22:48] <Zoffix> it's ded right now and IIRC it don't got latest fixes from the repo.

[23:03] <Zoffix> ZofBot: looks like it's just you and me here. Let's make a baby

[23:03] <ZofBot> Zoffix, Link: https://rt.perl.org/rt3/Public/Bug/Display.html?id=131079

[23:03] <Zoffix> Yup. You're thinking what I'm thinking. Let's make a ticket bot

[23:30] <stmuk> liuqu / liudao

[23:31] <Zoffix> "Six districts / stay" ?

[23:36] <stmuk> I had six states

[23:39] <stmuk> rokudo is "liudu" (these are mostly Buddist terms with esoteric and multiple meanings)

[23:43] <Zoffix> Hacktoberfest Issues: https://hacktoberfest.digitalocean.com/#projects

[23:45] <stmuk> also Rokushu

[23:47] <stmuk> 6 something or other .. I guess there is danger in naming similar to waking up with a mispelt tattoo spelling something different to what you wanted

[23:47] <Zoffix> :)

[23:51] <BenGoldberg> I've got a proposal to make!  I think we should rename perl6.  It should be called "pie".  I like pie!  Especially pumpkin.  Who likes pie? :)

[23:51] <BenGoldberg> PS: ^ not a serious suggestion, /me is suffering a case of the sillies.

[23:51] <Zoffix> I like pie!

[23:51] * Zoffix registers pie.party

[23:53] <Zoffix> "getlex: outer index out of range" nice... :/

[23:58] <Zoffix> Something with precomping constant regexes

[23:58] <Zoffix> m: with '/tmp/ZZZZRT'.IO.mkdir { .add('Foo.pm6').IO.spurt: q|unit class Foo; constant $RT_RE  = rx/«  [RT]?'#'? <( <[0..9]>**{5..6}  »/; method x ($e where $RT_RE) {say "in"}| }

[23:58] <camelia> rakudo-moar b9c985: ( no output )

[23:58] <Zoffix> m: use lib </tmp/ZZZZRT>; use Foo; Foo.new.x: "RT#131417"

[23:58] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131417

[23:58] <camelia> rakudo-moar b9c985: OUTPUT: «getlex: outer index out of range␤  in regex  at /tmp/ZZZZRT/.precomp/B605C1056356D83F4CB89430E4824F7C7F6DEFDE.1506729021.93654/20/201A6B3053CC1422D2C3670B62616221D2290929 line 1␤  in method x at /tmp/ZZZZRT/Foo.pm6 (Foo) line 1␤  in block <unit> at…»
