[04:29] <[Coke]> (google code in, summer of code) they are good for building community, but take a lot of effort, and SOC is dependant on the org getting accepted, which we have no control over.

[04:40] <[Coke]> .sen Zoffix

[04:40] <[Coke]> .seen Zoffix

[04:40] <yoleaux> I saw Zoffix 13 May 2017 19:55Z in #perl6-dev: <Zoffix> What for?

[04:45] <[Coke]> m: sub eof(IO::Handle:D: --> Bool:Ds) {};

[04:45] <camelia> rakudo-moar 4298dd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid type smiley 'Ds' used in type name␤at <tmp>:1␤------> 3sub eof(IO::Handle:D: --> Bool:Ds7⏏5) {};␤»

[04:48] <Zoffix> Ugh. Perl 6 dreams suck because you start to forget which bugs are real and which are you dreamed of

[04:48] <Zoffix> s: "", 'Str', \()

[04:48] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/4298dd5/src/core/Str.pm#L43

[04:48] <Zoffix> I guess we don't *actually* have any cases where Str.Str would throw ^_^

[04:55] <[Coke]> Zoffix: I have a bunch of fixes for xtest in the pipe.

[04:56] <Zoffix> ok

[04:59] <[Coke]> looks like you got one of my 5 commits with that last one.

[05:13] <Geth> ¦ rakudo/nom: 12c50b6397 | (Daniel Green)++ | 2 files

[05:13] <Geth> ¦ rakudo/nom: Throw X::NYI when trying to subset a native type

[05:13] <Geth> ¦ rakudo/nom:

[05:13] <Geth> ¦ rakudo/nom: Native type subsets can be created currently, but don't work, always

[05:13] <Geth> ¦ rakudo/nom: saying the type check failed (see RT #131310).

[05:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/12c50b6397

[05:13] <Geth> ¦ rakudo/nom: 80100aed90 | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[05:13] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131310

[05:13] <Geth> ¦ rakudo/nom: Merge pull request #1082 from MasterDuke17/native_types_subset_are_NYI

[05:13] <Geth> ¦ rakudo/nom:

[05:13] <Geth> ¦ rakudo/nom: Throw X::NYI when trying to subset a native type

[05:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/80100aed90

[05:25] <Zoffix> Any idea how to get an IO::Handle that has .t ("is tty?") returning true?

[05:25] <Zoffix> Seems the only case we test is it giving False

[05:33] <Zoffix> d'oh... $*OUT.t :)

[05:34] <Zoffix> wonder how to have it still True in a test :/

[05:37] <Zoffix> my $tt = shell :out, "tty"; $tt.out.slurp(:close).trim.IO.open.t.say

[05:37] <Zoffix> This will do in a pinch, I guess

[05:46] <Geth> ¦ roast: 60f5a6d9e7 | (Zoffix Znet)++ | S32-io/io-handle.t

[05:46] <Geth> ¦ roast: [io grant] Test IO::Handle.t when handle is a TTY

[05:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/60f5a6d9e7

[05:47] <Geth> ¦ roast: a3410d1143 | (Zoffix Znet)++ | S32-io/io-handle.t

[05:47] <Geth> ¦ roast: Ensure we close the handle when done with the test

[05:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a3410d1143

[06:03] <Geth> ¦ rakudo/nom: c3b47280c6 | (Elizabeth Mattijsen)++ | src/core/Compiler.pm

[06:03] <Geth> ¦ rakudo/nom: Compiler.verbose-config stringifies to -V output

[06:03] <Geth> ¦ rakudo/nom:

[06:03] <Geth> ¦ rakudo/nom: - my $a = Compiler.verbose-config.Str     # perl -V output in var

[06:03] <Geth> ¦ rakudo/nom: - Compiler.verbose-config(:say)           # say perl -V output

[06:03] <Geth> ¦ rakudo/nom: - say Compiler.verbose-config             # say perl -V output

[06:03] <Geth> ¦ rakudo/nom: - Compiler.verbose-config<moar><version>  # index into it as hash

[06:03] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c3b47280c6

[07:15] <Geth> ¦ rakudo/nom: d18a3332e6 | (Zoffix Znet)++ | src/core/io_operators.pm

[07:15] <Geth> ¦ rakudo/nom: Add :D to IO::Handle arg in IO routines

[07:15] <Geth> ¦ rakudo/nom:

[07:15] <Geth> ¦ rakudo/nom: To maintain consistency with methods

[07:15] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d18a3332e6

[07:15] <Zoffix> ZofBot: happy IO::Handles only!

[07:15] <ZofBot> Zoffix, Soon we plan to fill in the gaps with the Perl 5 details though

[07:15] <Zoffix> ZofBot: eww no!

[07:15] <ZofBot> Zoffix, 01

[07:55] <Zoffix> yeah... searching the logs for discussion of ".tell" method is rather a futile excersise :|

[07:59] <[TuxCM]> This is Rakudo version 2017.04.3-249-gd18a3332e built on MoarVM version 2017.04-64-g6d5ea042

[07:59] <[TuxCM]> csv-ip5xs        2.516

[07:59] <[TuxCM]> test            12.549

[07:59] <[TuxCM]> test-t           4.194 - 4.258

[07:59] <[TuxCM]> csv-parser      12.809

[08:07] <Zoffix> ZOFVM: Files=1242, Tests=135560, 114 wallclock secs (21.92 usr  3.48 sys + 2338.84 cusr 156.00 csys = 2520.24 CPU)

[08:08] <Geth> ¦ rakudo/nom: 276d4a7e7e | (Zoffix Znet)++ | src/core/IO/Handle.pm

[08:08] <Geth> ¦ rakudo/nom: [io grant] Remove .tell info in IO::Handle.gist

[08:08] <Geth> ¦ rakudo/nom:

[08:08] <Geth> ¦ rakudo/nom: .tell doesn't always give right info for handles in non-binary

[08:08] <Geth> ¦ rakudo/nom: mode and per discussion[^1], this is because .tell is for

[08:08] <Geth> ¦ rakudo/nom: binary mode only.

[08:08] <Geth> ¦ rakudo/nom:

[08:08] <Geth> ¦ rakudo/nom: [1] https://irclog.perlgeek.de/perl6-dev/2017-04-24#i_14477943

[08:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/276d4a7e7e

[08:11] <[TuxCM]> buggable speed

[08:13] <Zoffix> buggable: speed

[08:13] <buggable> Zoffix, ▇▆▆▆▆▆█▇▇▇▇██▆▂▂▂▃▄▂▂▃▃▂▂▂▁▂▂▂▂▂▂▁▁▁▁▁▁▁▁↑▁▁▁▂▁▁▁▁ data for 2017-04-25–2017-05-14; range: 4.194s–6.181s; 23% faster

[08:13] <Zoffix> buggable: speed 20

[08:13] <buggable> Zoffix, ▄▃▃▂▂▂▂▂▂▂▂↑▂▁▂▃▁▁▂▁ data for 2017-05-06–2017-05-14; range: 4.194s–6.181s; 4% faster

[08:27] <Geth> ¦ roast: 31e39932d8 | (Zoffix Znet)++ | S32-io/io-path.t

[08:27] <Geth> ¦ roast: [io grant] Test IO::Path*.gist

[08:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/31e39932d8

[08:34] <Geth> ¦ roast: e2a3a25751 | (Zoffix Znet)++ | S32-io/io-path.t

[08:34] <Geth> ¦ roast: Add mixed slashes to IO::Path.gist tests

[08:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e2a3a25751

[09:00] <Geth> ¦ rakudo/nom: 7c8f8d3eed | (Elizabeth Mattijsen)++ | src/core/VM.pm

[09:01] <Geth> ¦ rakudo/nom: Simplify getting osname from VM.config

[09:01] <Geth> ¦ rakudo/nom:

[09:01] <Geth> ¦ rakudo/nom: We shouldn't need to know the backend to find out the OS name.

[09:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7c8f8d3eed

[09:01] <Zoffix> "Perl5 to Java compiler - first release": http://blogs.perl.org/users/flavio_s_glock/2017/05/perl5-to-java-compiler---first-release.html

[09:14] <Zoffix> ZOFFLOP: t/spec/S32-io/IO-Socket-INET.t  # again starts taking ages to run; until you reboot the box

[09:15] <Zoffix> Seems something is left over listening: https://gist.github.com/zoffixznet/75784f61ba1d4a08384c0e804bdd16bd

[09:15] <Zoffix> tho killing that one moar process doesn't fix the issue

[09:17] <Zoffix> and I notice shutting off the google VM with that issue takes waaay longer than normal :/

[09:24] <Geth> ¦ rakudo/nom: 48cf0e670b | (Zoffix Znet)++ | src/core/IO/Spec/Cygwin.pm

[09:24] <Geth> ¦ rakudo/nom: [io grant] Make IO::Spec::Cygwin.is-absolute 21x faster

[09:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/48cf0e670b

[09:26] * lizmat started working on a Perl 6 version of https://metacpan.org/pod/System::Info

[09:26] <lizmat> progress can be seen at https://github.com/lizmat/System-Info

[09:29] <Geth> ¦ rakudo/nom: e79d749864 | (Elizabeth Mattijsen)++ | src/core/VM.pm

[09:29] <Geth> ¦ rakudo/nom: Introducing VM.osname

[09:29] <Geth> ¦ rakudo/nom:

[09:29] <Geth> ¦ rakudo/nom: Quick and dirty way to get at what is $^O in Perl 5.  Works both as an

[09:29] <Geth> ¦ rakudo/nom: instance method, as well as a class method (the latter case will just

[09:29] <Geth> ¦ rakudo/nom: look at the information of your OS, rather than what is livin inside

[09:29] <Geth> ¦ rakudo/nom: the object).

[09:29] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e79d749864

[09:29] <Zoffix> m: say IO::Spec::Unix.is-absolute: "/\x[308]"

[09:29] <camelia> rakudo-moar 7c8f8d: OUTPUT: «False␤»

[09:29] <Zoffix> m: say IO::Spec::Win32.is-absolute: "/\x[308]"

[09:29] <camelia> rakudo-moar 7c8f8d: OUTPUT: «True␤»

[09:29] <Zoffix> Oh, the irony...

[09:30] <Zoffix> m: use nqp; my $path := "/\[308]"; dd nqp::eqat($path, '/', 0); dd nqp::ord($path); dd nqp::iseq_i(($_ := nqp::ord($path)), 92) || nqp::iseq_i($_, 47)

[09:30] <camelia> rakudo-moar 7c8f8d: OUTPUT: «1␤47␤1␤»

[09:30] <Zoffix> I don't get how it ends up False in Unix tho :/

[09:30] <Zoffix> s: IO::Spec::Unix, 'is-absolute', \("/\x[308]")

[09:30] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/7c8f8d3/src/core/IO/Spec/Unix.pm#L96

[09:30] <Zoffix> yeah, so wtf...

[09:32] <Zoffix> m: use nqp; class Foo { method foo (Str() \p) { dd nqp::p6bool(nqp::eqat(p, '/', 0)); } }.foo: "/\[308]"

[09:32] <camelia> rakudo-moar 48cf0e: OUTPUT: «Bool::True␤»

[09:33] <Zoffix> that's IO::Spec::Unix.is-absolute :/ gives true here

[09:33] <Zoffix> ZofBot: what sorcery is this!?

[09:33] <ZofBot> Zoffix, For example: 1, 2, :a<b> The list represented here has 3 positional items

[09:34] <Zoffix> I don't get it

[09:36] <Zoffix> OMG

[09:37] <Zoffix> I missed the damn "x" in the escape -_-

[09:37] <Zoffix> m: use nqp; class Foo { method foo (Str() \p) { dd nqp::p6bool(nqp::eqat(p, '/', 0)); } }.foo: "/\x[308]"

[09:37] <camelia> rakudo-moar 48cf0e: OUTPUT: «Bool::False␤»

[09:37] <Zoffix> m: use nqp; my $path := "/\x[308]"; dd nqp::eqat($path, '/', 0); dd nqp::ord($path); dd nqp::iseq_i(($_ := nqp::ord($path)), 92) || nqp::iseq_i($_, 47)

[09:37] <camelia> rakudo-moar 48cf0e: OUTPUT: «0␤47␤1␤»

[09:37] <Zoffix> there we go

[09:40] <Geth> ¦ rakudo/nom: 1870685276 | (Elizabeth Mattijsen)++ | src/core/VM.pm

[09:40] <Geth> ¦ rakudo/nom: Partially revert 7c8f8d3eed7fc42b925c629

[09:40] <Geth> ¦ rakudo/nom:

[09:40] <Geth> ¦ rakudo/nom: There could be code out there looking for .config<os.name>

[09:40] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1870685276

[09:51] <Geth> ¦ rakudo/nom: 505ee33def | (Elizabeth Mattijsen)++ | src/core/Exception.pm

[09:51] <Geth> ¦ rakudo/nom: Recommend VM.osname rather than Distro.name

[09:51] <Geth> ¦ rakudo/nom:

[09:51] <Geth> ¦ rakudo/nom: VM.osname is basically what $^O is in Perl 5

[09:51] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/505ee33def

[09:57] <Zoffix> And apparently "/\x[308]" is absolute on Unix, but not Win32; "/\x[308]".IO.open: :w; creates file "\x[308]" in root dir on Unix but in current dir on Win32

[10:00] <Zoffix> Perl 5 dies with "The filename, directory name, or volume label syntax is incorrect." for that path

[10:01] <Zoffix> At least with `perl -wlE "open my $fh, ">", qq|e\x{308}| or die; close $fh"` which I don't get

[10:04] <Zoffix> ah, `""` around `>`

[10:06] <Zoffix> And Perl 5 makes them in root on Windows too, so I guess this is a bug

[10:06] <Zoffix> in our impl

[10:22] <Geth> ¦ rakudo/nom: 09506dc80f | (Elizabeth Mattijsen)++ | src/core/IO/Spec.pm

[10:22] <Geth> ¦ rakudo/nom: Streamline IO::Spec.select

[10:22] <Geth> ¦ rakudo/nom:

[10:22] <Geth> ¦ rakudo/nom: Use the new and shiny VM.osname

[10:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/09506dc80f

[10:29] <Zoffix> PSA: don't use `skip-rest` in roast. Use `skip` however many tests need to be skipped.

[10:29] <Zoffix> cause when people later add more tests to the file they have to puzzle over why the tests they added getting skipped...

[10:31] * Zoffix greps for `skip-rest` and sees a ton of usage :(

[10:32] <ugexe> then you'll just get people who wonder why their test doesn't get run because they put them within the skip range

[10:33] <Zoffix> Nope, you won't.

[10:36] <ugexe> i guess if you assume that all skipped tests would fail

[10:37] <Zoffix> all the skipped tests won't get run at all :/

[10:37] <Zoffix> skip "...", 42; prints 42 `ok`s with # SKIP marker

[10:42] <Geth> ¦ rakudo/nom: f4309de9f3 | (Zoffix Znet)++ | src/core/IO/Spec/Unix.pm

[10:42] <Geth> ¦ rakudo/nom: [io grant] Fix IO::Spec::Unix.is-absolute for combiners on /

[10:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f4309de9f3

[10:47] <Geth> ¦ roast: c481433260 | (Zoffix Znet)++ | 5 files

[10:47] <Geth> ¦ roast: [io grant] Test .is-absolute method for / with combiners

[10:47] <Geth> ¦ roast:

[10:47] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/f4309de9f3

[10:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c481433260

[11:21] <Zoffix> Actually the "/\x[308]" thing opening wrong file on Windows is due to Win32 SPEC's rel2abs; nqp::open works fine.

[11:22] <Zoffix> And I have its perf-boosted version laying around somewhere that should already have this issue fixed IIRC

[11:23] * Zoffix will fix after a nap

[14:01] <tadzik> https://github.com/tadzik/rakudobrew/issues/102

[14:44] <Zoffix> I don't have such issue with that module; installed with zef.. "Aug 2016".. yeah, that's a pretty stale Issue

[14:48] <Zoffix> geth ded eh

[14:48] <tadzik> but muh karma

[14:50] <Zoffix> well, adding a log was useless :/ this is all I see at the end of geth's screen log; no errors or anthing: https://gist.github.com/zoffixznet/5bb174eb2b9ac48165b3f5cf5c74a11e

[14:50] <Zoffix> Second time a charm maybe....

[14:50] <Zoffix> Will wait for another mystery crash

[14:54] <tadzik> would you like to take a look at modules.perl6.org/problems in the meantime? :)

[14:54] <Zoffix> 404

[14:54] <tadzik> I did a bit of cargo-culting especially in the DBIC parts

[14:54] <tadzik> impossibru

[14:54] * Zoffix is busy with IO

[14:54] <tadzik> alrighty then

[15:07] <lizmat> m: my %h = (a => 42, b => 666)   # works as expected

[15:07] <camelia> rakudo-moar f4309d: ( no output )

[15:08] <lizmat> m: my constant %h = (a => 42, b => 666)   # WAT?

[15:08] <camelia> rakudo-moar f4309d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Type check failed in constant declaration of %h; expected Associative but got List (List)␤at <tmp>:1␤------> 3nstant %h = (a => 42, b => 666)   # WAT?7⏏5<EOL>␤»

[15:08] <lizmat> feels to me this is a bug, no ?

[15:08] <Zoffix> lizmat: yeah, that's a known issue

[15:08] <lizmat> ok

[15:08] <lizmat> :-(

[15:09] <Zoffix> lizmat: the bug being it doesn't auto-convert stuff, but if you do it yourself you can have a constant hash

[15:09] <Zoffix> m: my constant %h = %(a => 42, b => 666)

[15:09] <camelia> rakudo-moar f4309d: ( no output )

[15:11] <Zoffix> This is the only ticket I see ATM: https://rt.perl.org/Ticket/Display.html?id=111944#ticket-history

[15:11] <Zoffix> But I recall filing one as well.

[16:26] <Geth> ¦ rakudo/nom: c96727aa55 | (Zoffix Znet)++ | src/core/IO/Spec/Win32.pm

[16:26] <Geth> ¦ rakudo/nom: [io grant] Fix combiners on SPEC::Win32.rel2abs; make 6% faster

[16:26] <Geth> ¦ rakudo/nom:

[16:26] <Geth> ¦ rakudo/nom: - When the path starts with a slash that has a combiner on it,

[16:26] <Geth> ¦ rakudo/nom:     we fail to corretly make an absolute path. Fix by avoiding

[16:26] <Geth> ¦ rakudo/nom:     regex and using nqp string operations instead.

[16:26] <Geth> ¦ rakudo/nom: - Possible other (unfixed) cases still exist due to splitpath using

[16:26] <Geth> ¦ rakudo/nom:     a regex, but will be fixed when splitpath is fixed

[16:26] <Geth> ¦ rakudo/nom: - Make 6% faster; much more boostage will happen after after

[16:26] <Geth> ¦ rakudo/nom:     splitpath is fixed/improved

[16:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c96727aa55

[16:28] <Zoffix> ugh

[16:28] <Zoffix> GitHub is at it again with the dumb styling "improvements"

[16:31] <Zoffix> This is what happens when too many voices ask for features and they're implemented without careful thought.

[16:32] <Geth> ¦ roast: 8ee0a0a6a5 | (Zoffix Znet)++ | S32-io/io-spec-win.t

[16:32] <Geth> ¦ roast: [io grant] Test IO::Spec::Win32.rel2abs with combiners

[16:32] <Geth> ¦ roast:

[16:32] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/c96727aa55

[16:32] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8ee0a0a6a5

[16:34] <Zoffix> .tell samcv sent you a pr: https://github.com/samcv/IRC-TextColor/pull/2

[16:34] <yoleaux> Zoffix: I'll pass your message to samcv.

[16:59] <Zoffix> m: say IO::Spec::Cygwin.is-absolute: ｢C:\foo｣;

[16:59] <camelia> rakudo-moar c96727: OUTPUT: «True␤»

[17:00] <Zoffix> But it's not, is it?

[17:00] <Zoffix> 'cause C:\ on my cygwin is at /cygdrive/c

[17:01] <Zoffix> Ah, nevermind. I was testing wrong

[17:02] <Zoffix> or not..

[17:03] <Zoffix> `cd C:\` works and gets me to /cygdrive/c, but `less C:\eula.1028.txt` gives "C:eula.1028.txt: No such file or directory"

[17:04] <Zoffix> note the lack of slash... and if I use C:/eula... slash is there but still can't open file

[17:04] <Zoffix> and `less /cygdrive/c/eula.1028.txt` reads the file.

[17:05] <eater> Zoffix: what does `ls C:\` give?

[17:06] <Zoffix> waits for more input

[17:07] <Zoffix> ls C:/ gives contents of my C drive

[17:07] <Zoffix> :S

[17:08] <Zoffix> less C:/CPANPRC/rakudo/README.md works fine

[17:08] <Zoffix> stupid system

[17:08] <eater> ah!

[17:08] <eater> permissions

[17:08] <Zoffix> Ah

[17:08] <eater> try running it as admin

[17:08] <eater> and see if it works then

[17:09] <Zoffix> But how? I can `less /cygdrive/c/eula.1028.txt` but not `less C:/eula.1028.txt`

[17:10] <Zoffix> Screw it. Will poke at it some time later.

[17:16] <Geth> ¦ rakudo/nom: 5feb3906d7 | (Elizabeth Mattijsen)++ | src/core/Compiler.pm

[17:16] <Geth> ¦ rakudo/nom: Show System::Info information with -V if available

[17:16] <Geth> ¦ rakudo/nom:

[17:16] <Geth> ¦ rakudo/nom: If System::Info is installed, then show that info in the -V output

[17:16] <Geth> ¦ rakudo/nom: as well.

[17:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5feb3906d7

[17:23] <Zoffix> NeuralAnomaly: status

[17:23] <NeuralAnomaly> Zoffix, [✘] Next release will be in 5 days and 11 hours. Since last release, there are 37 new still-open tickets (13 unreviewed and 1 blockers) and 284 unreviewed commits. See http://perl6.fail/release/stats for details

[17:23] <Zoffix> ZofBot: lotsacommits!

[17:23] <ZofBot> Zoffix, subst(/pat/, "replacement"); $str

[17:53] <dogbert17> Zoffix: do you want to proofread some new docs?

[17:54] <eater> Zoffix: for me in Cygwin, `less C:\help.txt` will give me an: No such file found, but `less C:/help.txt` works

[17:54] <dogbert17> or anyone else for that matter: https://gist.github.com/dogbert17/d76977c986df929f5febd14ea308ea74

[17:54] <eater> it will translate C:\help.txt to C:help.txt so it didn't work

[17:55] <Zoffix> nope; busy

[17:56] <dogbert17> caught up in IO madness I presume :)

[17:57] <eater> dogbert17: if start is 2, wouldn't it result in an index of 3

[17:57] <eater> m: say "banana".indices("ana", 2);

[17:57] <camelia> rakudo-moar 5feb39: OUTPUT: «(3)␤»

[17:58] <dogbert17> eater++, indeed (a typo)

[17:58] <dogbert17> gist has been updated

[18:04] <eater> dogbert17: left a comment, LGTM tho :)

[18:05] <Zoffix> m: use Test; for (('C:', './', 'ber'), ('C:', './', '/ber/'), ('C:', './', 'ber'), ('', './', 'ber'), ('', './', ''), ('', '', ''),) -> $p { for IO::Spec::Win32, IO::Spec::Unix { is .join(|$p), .catpath(|$p); } }

[18:05] <camelia> rakudo-moar 5feb39: OUTPUT: «ok 1 - ␤ok 2 - ␤ok 3 - ␤ok 4 - ␤ok 5 - ␤ok 6 - ␤ok 7 - ␤ok 8 - ␤ok 9 - ␤ok 10 - ␤ok 11 - ␤ok 12 - ␤»

[18:05] <Zoffix> So what exactly is the differente between $*SPEC.join and $*SPEC.catpath? :/

[18:14] <Zoffix> Seems the only case they differ at is when both dirname and filename are strings "/"

[18:14] <Zoffix> m: with ("/", "/") { without IO::Spec::Unix -> $s { $s.join(|$_).say; $s.catpath($_).say } }

[18:14] <camelia> rakudo-moar 5feb39: OUTPUT: «Too few positionals passed; expected 4 arguments but got 3␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:14] <Zoffix> m: with ("/", "/") { without IO::Spec::Unix -> $s { $s.join(|$_).say; $s.catpath(|$_).say } }

[18:14] <camelia> rakudo-moar 5feb39: OUTPUT: «Too few positionals passed; expected 4 arguments but got 3␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:15] <Zoffix> m: with ("", "/", "/") { without IO::Spec::Unix -> $s { $s.join(|$_).say; $s.catpath(|$_).say } }

[18:15] <camelia> rakudo-moar 5feb39: OUTPUT: «/␤//␤»

[18:15] <Zoffix> But that seems more of a bug than anything -_-

[18:15] <Zoffix> m: with ("", "/", "/f/") { without IO::Spec::Unix -> $s { $s.join(|$_).say; $s.catpath(|$_).say } }

[18:15] <camelia> rakudo-moar 5feb39: OUTPUT: «//f/␤//f/␤»

[18:15] <Zoffix> m: with ("", "/f/", "/f/") { without IO::Spec::Unix -> $s { $s.join(|$_).say; $s.catpath(|$_).say } }

[18:15] <camelia> rakudo-moar 5feb39: OUTPUT: «/f//f/␤/f//f/␤»

[18:15] <Zoffix> 'cause all these cases are the same...

[18:16] <eater> https://github.com/rakudo/rakudo/blob/48cf0e670bde8bd5e1ee415548f7a76109a8a108/src/core/IO/Spec/Win32.pm#L114

[18:16] <eater> Join has a bit more checking??

[18:17] <Zoffix> It has more code... but what sort of checking? It just changes file/dirname to something other and then passes the stuff to catpath

[18:17] <eater> yeah...

[18:20] <eater> Unix has the exact same code

[18:20] <Zoffix> .ask labster what's the difference between IO::Spec::*.join and .catpath? Seems the only dif is .join has an extra check that dir and file are both not "/"; but what usecase does that cover that there are two methods for it?

[18:20] <yoleaux> Zoffix: I'll pass your message to labster.

[18:20] <eater> only indenting is different :')

[18:20] * Zoffix sets $*SPEC on fire

[18:20] <eater> :')

[18:20] <Zoffix> eater: you're looking at too old a version then

[18:21] <Zoffix> s: IO::Spec::Unix, 'join', \()

[18:21] <SourceBaby> Zoffix, Something's wrong: ␤ERR: Type check failed in binding to parameter '&code'; expected Callable but got Method+{<anon|63132592>} (Method+{<anon|6313259...)␤  in sub do-sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 42␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 29␤  in block <

[18:21] <Zoffix> *sigh*

[18:23] <Zoffix> left is unix and center is win32; completely different codes: http://i.imgur.com/AfeyHpC.png

[18:23] <Zoffix> But behaviour is the same; it's just win32 has to care for volume too

[18:24] <eater> is using nqp functions faster?

[18:24] <Zoffix> Yeah, much faster

[18:24] <Zoffix> At least for now; I think the end-goal is for Perl 6 code to be automagically equally fast

[18:27] <eater> :m say $*SPEC.join("", ".", "ha") ~ " <=> " ~ $*SPEC.catpath("", ".", "ha");

[18:27] <eater> bleh

[18:27] <eater> m: say $*SPEC.join("", ".", "ha") ~ " <=> " ~ $*SPEC.catpath("", ".", "ha");

[18:27] <camelia> rakudo-moar 5feb39: OUTPUT: «ha <=> ./ha␤»

[18:28] <eater> there is your difference

[18:30] <Zoffix> Thanks.

[18:31] <Zoffix> Though I still don't get why that difference exists.

[18:31] <eater> can't really find a reason when this is useful tho

[18:31] <eater> except when `run`'ing things

[18:31] <Zoffix> As in: if you documented .join/.catpath, what would you write?

[18:31] * eater has no clue

[18:32] <eater> I think this would be better as flag than 2 seperate functions

[18:32] <eater> if there is a use-case

[18:33] <eater> m: say IO::Spec::Win32.join("C:", "/", "/") ~ " <=> " ~ IO::Spec::Win32.catpath("C:", "/", "/");

[18:33] <camelia> rakudo-moar 5feb39: OUTPUT: «C:/ <=> C://␤»

[18:33] <eater> also this

[18:33] <Zoffix> .tell labster and another special case in join is with `dirname` = '.' and `file` = 'anything'; with .catpath putting a space between, but .join just returning the filename. How should this stuff be documented??

[18:33] <yoleaux> Zoffix: I'll pass your message to labster.

[18:34] <eater> when would that extra slash matter? every system just ignores it

[18:35] <eater> but the weirdest thing is

[18:35] <eater> if you do

[18:35] <eater> say IO::Spec::Win32.join("C:", "/", "/ha") ~ " <=> " ~ IO::Spec::Win32.catpath("C:", "/", "/ha");

[18:35] <evalable6> eater, rakudo-moar 5feb3906d: OUTPUT: «C://ha <=> C://ha»

[18:38] <AlexDaniel> \o/

[18:39] <Zoffix> ?

[18:39] <Zoffix> Ah :) autodetection :)

[18:44] <AlexDaniel> Zoffix: by the way “your new diff highlights make it much harder to view large diffs”, what changed? And also, why not view it side by side instead?

[18:44] <Zoffix> $ perl6 -e 'IO::Handle.new.nl-in = 42'

[18:44] <Zoffix> set separator requires an object with REPR MVMOSHandle (got Scalar with REPR P6opaque)

[18:44] <Zoffix> boo

[18:44] <AlexDaniel> or is it highlighting parts of the line even if that line is completely new?

[18:45] <Zoffix> AlexDaniel: yes, they now highlight each like like a peacock, making it harder to read

[18:45] <AlexDaniel> ah ok, I see

[18:45] <Zoffix> s/like/line/;

[19:05] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[19:09] <Geth> ¦ rakudo/nom: 06d8800e2b | (Zoffix Znet)++ | src/core/IO/Handle.pm

[19:09] <Geth> ¦ rakudo/nom: [io grant] Fix crash when setting .nl-in ...

[19:09] <Geth> ¦ rakudo/nom:

[19:09] <Geth> ¦ rakudo/nom: ... on unopened IO::Handle

[19:09] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/06d8800e2b

[19:34] * Zoffix grumbles

[19:34] <Zoffix> IO::Handle.nl-in = [<foo bar>] but IO::Handle.encoding('utf8') -_-

[19:57] <Zoffix> heh

[19:58] <Zoffix> eater: in this community we usually don't thank/praise sarcastically :)

[20:03] <Zoffix> unless you're a bot...

[20:03] <Zoffix> ZofBot: thank you for your ears of service!

[20:03] <ZofBot> Zoffix, c#L240 at least doesn't show it on coverage reports

[20:03] <eater> :')

[20:14] <Geth> ¦ rakudo/nom: 7e9496dd19 | (Zoffix Znet)++ | src/core/IO/Handle.pm

[20:14] <Geth> ¦ rakudo/nom: [io grant] Make IO::Handle.encoding settable via .new

[20:14] <Geth> ¦ rakudo/nom:

[20:14] <Geth> ¦ rakudo/nom: Just like all the other publicly-accessible attributes.

[20:14] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7e9496dd19

[20:15] <Geth> ¦ rakudo/nom: 7003885575 | (Zoffix Znet)++ | src/core/IO/Handle.pm

[20:15] <Geth> ¦ rakudo/nom: [io gran] Fix crash when setting IO::Handle.encoding

[20:15] <Geth> ¦ rakudo/nom:

[20:15] <Geth> ¦ rakudo/nom: ... on an unopened handle

[20:15] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7003885575

[20:16] <Geth> ¦ rakudo/nom: 95e49dcbe2 | (Zoffix Znet)++ | src/core/IO/Handle.pm

[20:16] <Geth> ¦ rakudo/nom: [io grant] Make IO::Handle.open respect attribute values

[20:16] <Geth> ¦ rakudo/nom:

[20:16] <Geth> ¦ rakudo/nom: Default to the values of attributes instead of hardcoding own

[20:16] <Geth> ¦ rakudo/nom: defaults in the `method open`.

[20:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/95e49dcbe2

[20:17] <Geth> ¦ roast: a41027f9fb | (Zoffix Znet)++ | S32-io/io-handle.t

[20:17] <Geth> ¦ roast: [io grant] Test IO::Handle.nl-in can be set

[20:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a41027f9fb

[20:17] <Geth> ¦ roast: bfca66bee0 | (Zoffix Znet)++ | S32-io/open.t

[20:17] <Geth> ¦ roast: Mark Failure as handled after test

[20:17] <Geth> ¦ roast:

[20:17] <Geth> ¦ roast: So it doesn't spam "failure in destroy" warnings in output

[20:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bfca66bee0

[20:17] <timotimo> oh crap

[20:18] <Zoffix> ?

[20:18] <timotimo> for some reason my browser splits a line "$proc.stdout.tap(-" and "> $v { ... });"

[20:18] <timotimo> https://docs.perl6.org/type/Proc::Async - do you see that? it's in the first code block

[20:18] <Zoffix> 1 sec

[20:19] <Geth> ¦ roast: e82b7984a0 | (Zoffix Znet)++ | S32-io/open.t

[20:19] <Geth> ¦ roast: [io grant] Test IO::Handle.open respects attributes

[20:19] <Geth> ¦ roast:

[20:19] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/95e49dcbe2

[20:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e82b7984a0

[20:19] <Geth> ¦ roast: 2c291509b9 | (Zoffix Znet)++ | S32-io/io-handle.t

[20:19] <Geth> ¦ roast: [io grant] Test IO::Handle.nl-in attribute

[20:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2c291509b9

[20:20] <timotimo> "you split words at dashes, right?" - yeah, browser, definitely.

[20:22] <AlexDaniel> u: no break dash

[20:22] <unicodable6> AlexDaniel, Found nothing!

[20:22] <AlexDaniel> u: no break

[20:22] <unicodable6> AlexDaniel, U+006E LATIN SMALL LETTER N [Ll] (n)

[20:22] <unicodable6> AlexDaniel, U+006F LATIN SMALL LETTER O [Ll] (o)

[20:22] <unicodable6> AlexDaniel, 9 characters in total: https://gist.github.com/509fa06681ed1660a2aede15cbb302dd

[20:22] <AlexDaniel> u: no break

[20:22] <unicodable6> AlexDaniel, U+00A0 NO-BREAK SPACE [Zs] ( )

[20:22] <unicodable6> AlexDaniel, U+2011 NON-BREAKING HYPHEN [Pd] (‑)

[20:22] <unicodable6> AlexDaniel, 4 characters in total: https://gist.github.com/9fd357c35129472a5deff393f75ea137

[20:22] <Zoffix> Doesn't wrap for me.

[20:22] <AlexDaniel> hyphen, right

[20:22] <timotimo> ah, it's because i'm always zoomed in at least a bit

[20:23] <Zoffix> Well, unless I make my browser super tiny

[20:23] <timotimo> it's ok since it's my fault

[20:26] <Zoffix> timotimo: you can fix that by changing this `pre-wrap` to just `pre`, but I think the reason it's a pre-wrap in the first place is because with `pre` you'd have to always scroll most of the codeblocks on tiny screens. So it's a choice between two evils and the lesser one might be wrapping at weird places: https://github.com/perl6/doc/blob/master/assets/sass/style.scss#L39

[20:26] <Zoffix> like wrapping after a `}` likely also lead to broken code

[20:28] <timotimo> that's true

[20:28] <timotimo> hm, right

[20:40] <Zoffix> bisect: '.'.IO.^lookup('add').say

[20:40] <bisectable6> Zoffix, Bisecting by output (old=2015.12 new=95e49dc) because on both starting points the exit code is 0

[20:40] <bisectable6> Zoffix, bisect log: https://gist.github.com/4fdf21d0798f97c6af2becfc62d76c2f

[20:40] <bisectable6> Zoffix, (2017-04-16) https://github.com/rakudo/rakudo/commit/9d8e391f3b452efeb06c860e37293c696b244786

[20:40] <timotimo> it me \o/

[20:40] <Zoffix> lulzwut. Wrong commit, bisectable6

[20:41] <Zoffix> eater: but yeah, .add is new

[20:41] <eater> ah

[20:41] <eater> it was called concat-with

[20:41] <eater> thanks Zoffix :)

[20:41] <Zoffix> briefly

[20:42] <eater> well guess my project will just depend on 2017.04 then

[20:43] <Zoffix> buggable: eco RakudoPrereq

[20:43] <buggable> Zoffix, RakudoPrereq 'Require specific versions of Rakudo': https://github.com/zoffixznet/perl6-RakudoPrereq

[20:43] <Zoffix> You can use that

[20:43] <Zoffix> eater: or you can use .child method. It's the same as .add, but will be slightly changed in 6.d

[20:43] <eater> oh yes!

[20:46] <eater> thanks Zoffix :)

[20:46] <Zoffix> AlexDaniel: seems bisectable is off-by-one above. The actual commit one later after what it gave: https://github.com/rakudo/rakudo/commits/0b5a41ba87fee0dea5a400cff579cb7d020de665

[20:46] <AlexDaniel> that sounds pretty bad

[20:46] <Zoffix> c: 0b5a41b '.'.IO.^lookup('add').say

[20:46] <committable6> Zoffix, ¦0b5a41b: «add»

[20:46] <Zoffix> c: 0b5a41b~1 '.'.IO.^lookup('add').say

[20:46] <committable6> Zoffix, https://gist.github.com/feca134d6dcb0a882b8fb57a9ae46656

[20:46] <AlexDaniel> except that it seems to be right?

[20:46] <Zoffix> c: 9d8e391f3b45 '.'.IO.^lookup('add').say

[20:46] <committable6> Zoffix, https://gist.github.com/e681999bb0fa34c60b8d2e2b6040ef88

[20:47] <AlexDaniel> c: 0b5a41b^ '.'.IO.^lookup('add').say

[20:47] <committable6> AlexDaniel, https://gist.github.com/036013b812603f850ca44e888ace3c30

[20:47] <AlexDaniel> ah wait

[20:47] <AlexDaniel> that's just broken build

[20:47] <Zoffix> oh ok

[20:49] <AlexDaniel> I'm really sorry about this, but I don't know yet why this happens

[20:49] <AlexDaniel> I know that redoing it will help, sometimes… sometimes I had to delete it a couple of times

[20:50] <AlexDaniel> I have a script that attempts to detect builds like this, but it doesn't work for some reason

[20:50] <AlexDaniel> or rather, it checks for /perl6 executable, and it seems to be there

[20:51] <AlexDaniel> but in this case the issue is with nqpmo.moarvm

[20:51] <AlexDaniel> but still, I'm not sure why this happens in the first place… something is wrong when it creates the archive

[20:52] <AlexDaniel> here https://github.com/perl6/whateverable/blob/edcb6687b1a617c77fb533c2874141ec67b4a5f7/build.p6#L172-L173

[20:52] <AlexDaniel> a clever mind will already notice an unrelated error there…

[20:53] <AlexDaniel> bisect: '.'.IO.^lookup('add').say

[20:53] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=95e49dc) because on both starting points the exit code is 0

[20:53] <Zoffix> You're not closing .out? :)

[20:53] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/8ae1bf550d289007314bc0b1ae700784

[20:53] <bisectable6> AlexDaniel, (2017-04-16) https://github.com/rakudo/rakudo/commit/0b5a41ba87fee0dea5a400cff579cb7d020de665

[20:53] <AlexDaniel> yes

[20:53] <Zoffix> \o/

[20:54] <AlexDaniel> but this should simply leave the socket open, I don't think it would cause any problems?

[20:54] <AlexDaniel> or maybe it will

[20:54] <Zoffix> no idea

[20:54] <AlexDaniel> I should close it anyway

[20:54] <Geth> ¦ roast: 03ce93b7d6 | (Zoffix Znet)++ | S32-io/io-handle.t

[20:54] <Geth> ¦ roast: [io grant] Test IO::Handle.encoding can be set

[20:54] <Geth> ¦ roast:

[20:54] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/7003885575

[20:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/03ce93b7d6

[20:54] * Zoffix calls it a day

[20:54] <Zoffix> ZofBot: good night!

[20:55] <ZofBot> Zoffix, However, we're rather liberal in what we consider a name

[20:55] <Zoffix> ZofBot: I knew that the minute you've entered this channel!

[20:55] <ZofBot> Zoffix, (Sigspace after the entire construct matches once after the all repetitions are found

[20:55] <AlexDaniel> ZofBot: sometimes you are not making sense

[20:55] <ZofBot> AlexDaniel, do we want to restrict the actual github ids that can even push to 6

[21:24] <MasterDuke_> .ask jnthn do you have an opinion re https://rt.perl.org/rt3/Public/Bug/Display.html?id=131310 ? should subsets of native types be allowed?

[21:24] <yoleaux> MasterDuke_: I'll pass your message to jnthn.
