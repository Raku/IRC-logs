[08:09] <timotimo> i think the Supplier doc page ought to also mention Supplier::Preserving

[08:55] <Zoffix> Yeah. I was supposed to document it... like a year ago: https://irclog.perlgeek.de/perl6/2016-12-22#i_13786869

[08:56] <Zoffix> Oh, that's a log of me forgetting about. It's 13 months ago: https://irclog.perlgeek.de/perl6/2016-09-16#i_13221172

[08:56] <Zoffix> ^_^

[09:05] <timotimo> :D

[09:49] <|Tux|> This is Rakudo version 2017.09-431-ge52c8affa built on MoarVM version 2017.09.1-594-gb9d3f6da

[09:49] <|Tux|> csv-ip5xs        1.158 -  1.194

[09:49] <|Tux|> test             8.457 -  8.522

[09:49] <|Tux|> test-t           3.080 -  3.103

[09:49] <|Tux|> csv-parser       0.831 -  0.844

[10:13] <Zoffix> buggable: speed 100

[10:13] <buggable> Zoffix, ▆▆▆▇▆▆▅▅▇█▇▇↑↑▆▆▆▆▅▅▅▆▅▆▅▅▆▅▅▇▅▅▅▅▅▅▅▅▆▇▅▇▅▄▇↑↑▇▄▃▂▃▃▂▃▃▃▃▄▆▃▄▃▄▇▃▂▂▂▃▃▃▃▃▄▃▃▃▄▄▂▄▂▂▃▂▂▂▅▃▁▂▁▂▁▁▁▁▁▁ dates: 2017-09-10–2017-10-16; range: 3.071s–4.237s; speed: 14% faster (widths: 10/3)

[10:40] <lizmat> Files=1227, Tests=75680, 319 wallclock secs (14.65 usr  5.10 sys + 2217.21 cusr 209.33 csys = 2446.29 CPU)

[10:40] <yoleaux> 11 Oct 2017 02:10Z <MasterDuke> lizmat: i've got a question about multis and find_best_dispatchee here https://irclog.perlgeek.de/perl6-dev/2017-10-10#i_15286003, with some relevant info here https://irclog.perlgeek.de/perl6-dev/2017-10-11#i_15286163

[10:40] <yoleaux> 13 Oct 2017 06:23Z <AlexDaniel-> lizmat: this does not look right, but the commit seems to be innocent. What do you think? Let me know if I have to rakudobug it https://gist.github.com/AlexDaniel/de2c5f1fe66b1606589041ca10c82f50

[10:40] <yoleaux> 14 Oct 2017 02:44Z <AlexDaniel-> lizmat: fwiw please feel freer to reject my latest regression tickets

[10:40] <yoleaux> 14 Oct 2017 04:36Z <AlexDaniel-> lizmat: does this look alright? Let me know. c: 21b9a720c7^,21b9a720c7 dd Set.Mix

[10:40] <yoleaux> 14 Oct 2017 06:43Z <AlexDaniel-> lizmat: fwiw RT #131966

[10:40] <yoleaux> 15 Oct 2017 07:46Z <Zoffix> lizmat: any idea why this commit fixes RT#131925? Trying to figure out if the bug is proper-fixed or if it just doesn't get triggered with the OP code. https://github.com/rakudo/rakudo/commit/8a0f6ac110b42a37a352e46c32736bac59f9ba83

[10:40] <yoleaux> 15 Oct 2017 13:38Z <AlexDaniel-> lizmat: RT weekly https://gist.github.com/AlexDaniel/0f20a508bff0f7e9edd4e4d1d94002e2

[10:40] <yoleaux> 15 Oct 2017 14:19Z <AlexDaniel-> lizmat: for p6weekly (please feel free to reword as you wish): https://gist.github.com/AlexDaniel/7eb90c85fa71014242213f0bceda6c2f

[10:40] <yoleaux> 15 Oct 2017 23:52Z <b2gills> lizmat: I recommend just indenting code blocks by 4 spaces on StackOverflow (along with one ｢<!-- language-all: lang-perl6 -->｣ at the top of Perl 6 posts) https://stackoverflow.com/posts/46742643/revisions

[10:40] <yoleaux> 15 Oct 2017 23:52Z <b2gills> lizmat: Also it might be a good idea to add one or more OpenID logins to maintain control over your answers.

[10:40] <synopsebot> RT#131966 [new]: https://rt.perl.org/Ticket/Display.html?id=131966 [REGRESSION][9999] Shaped native arrays with negative sizes (my int @a[-9999999999999999])

[10:40] <synopsebot> RT#131925 [open]: https://rt.perl.org/Ticket/Display.html?id=131925 [BUG] [REGEX] Smartmatch against `m//` operator mishandles junctions

[10:41] <lizmat> *sigh*

[10:41] <timotimo> greetings lizmat :)

[10:46] <lizmat> hi timotimo

[10:46] <lizmat> was pleasantly surprised buy the spectest drop in wallclock

[10:46] <Zoffix> lol

[10:47] <Zoffix> lizmat: it was only 'cause a very long test was move to stresstest, not because stuff got faster

[10:47] <lizmat> last one I reported was 346

[10:47] <timotimo> wasn't that just throwing a very expensive test out of spectest and into stress... yes

[10:47] <lizmat> ah..  :-(

[10:47] <Zoffix> :)

[10:49] <lizmat> still... it helps me  :-)

[11:03] <timotimo> lizmat: you had some startup measurements recently; i put an optimization for startup speed in shortly after that. could you give the new measurement? (and perhaps dig up the old one as well?)

[11:03] <timotimo> (while i BBIAB)

[11:09] <lizmat> timotimo: the lowest I just got was 104 msecs

[11:10] <lizmat> but usually it is around 132 msecs

[11:10] <lizmat> I wonder what's causing this huge difference: possibly just clocking on my MBP, which is rather cold atm

[11:10] <lizmat> and thus clocked a bit higher

[11:11] <lizmat> fwiw, it feels in general it's now ~3 msecs faster

[11:29] <timotimo> that's not much :<

[11:36] <timotimo> jnthn: i've mulled over the case ufobat has where IO::Socket::Async::SSL.listen would quit its supply when a protocol problem happens. i don't see a way to actually keep the listening socket open when that happens. it might be a good idea to emit a "dummy" io::async::ssl socket that immediately quits any supply tapped on it or dies any write done to it

[11:36] <timotimo> so that you can have a QUIT and CATCH inside the data-whenever and bring down only the individual connection, not the whole listen socket

[11:36] <timotimo> because surely you don't want to open the socket over and over

[12:26] <Geth> ¦ nqp: 57453ad409 | pmurias++ | 2 files

[12:26] <Geth> ¦ nqp: [js] Support returning simple values from native calls

[12:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/57453ad409

[12:55] <Zoffix> m: <a b c>.grep({.chars and not *.ends-with: "b" and not 0}).say

[12:55] <camelia> rakudo-moar e52c8affa: OUTPUT: «(a b c)␤»

[12:55] * Zoffix just spent $x minutes trying to debug this bug

[12:56] <Zoffix> s: ((*.so)), 'Bool', \()

[12:56] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/e52c8affa/src/core/Mu.pm#L102

[12:57] <Zoffix> guess there is some usecases where you'd want a WhateverCode.Bool for legitimate reasons, so it can't be improved

[12:57] <lizmat> m: <a b c>.grep({.chars and not .ends-with: "b" and not 0}).say # this what you meant ?

[12:57] <camelia> rakudo-moar e52c8affa: OUTPUT: «(a c)␤»

[12:57] <lizmat> ah, yes..  because sometimes a WhateverCode could be an optional parameter

[12:57] <Zoffix> Yeah. I rewrite a .grep(*.ends-with: 'b') to a more complex conditional and the left over `*` made things wrong :(

[12:57] <Zoffix> *rewrote

[12:59] <Zoffix> ZofBot: remnew 5d4h document Supplier::Preserving

[12:59] <ZofBot> Zoffix, Will remind out on 2017-10-21T12:59:20.464653-04:00 about document Supplier::Preserving

[12:59] <lizmat> m: sub a($a?) { say $a("foo") if $a }; a; a *.u

[12:59] <camelia> rakudo-moar e52c8affa: OUTPUT: «No such method 'u' for invocant of type 'Str'. Did you mean 'uc'?␤  in block <unit> at <tmp> line 1␤␤»

[12:59] <lizmat> m: sub a($a?) { say $a("foo") if $a }; a; a *.uc

[12:59] <camelia> rakudo-moar e52c8affa: OUTPUT: «FOO␤»

[12:59] <Zoffix> \o/ :) made it remind me of stuff

[13:39] <gfldex> Zoffix: let me remind you that you don't need reminding because of https://github.com/perl6/doc/pull/1609

[13:40] <jnthn> timotimo: Hm, yeah, just seen the issue

[13:41] <jnthn> timotimo: Alternatively, any connection that doesn't even make it past the handshake stage could just be closed

[13:41] <timotimo> aye

[13:41] <timotimo> that's probably nicer. not really necessary to know about these

[13:41] <jnthn> I think I'll do that as it's the easiest option

[13:41] <timotimo> though perhaps a .errors-supply could be had

[13:42] <jnthn> And if somebody does some day wish to know about them then we can figure out a way to enable that with some option

[13:42] <timotimo> :failures-okay ;)

[13:48] <Zoffix> gfldex: ok. Thanks.

[14:11] <Geth> ¦ rakudo/nom: d6a9edacf2 | (Elizabeth Mattijsen)++ | 2 files

[14:11] <Geth> ¦ rakudo/nom: Remove unneeded var, improve push-all on native arrays

[14:11] <Geth> ¦ rakudo/nom:

[14:11] <Geth> ¦ rakudo/nom: Mentioned in RT #132306, this is what I probably had in mind working

[14:11] <Geth> ¦ rakudo/nom: on that.

[14:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d6a9edacf2

[14:11] <synopsebot> RT#132306 [new]: https://rt.perl.org/Ticket/Display.html?id=132306 [PERF] parameters, even if unused, make stuff slower ( f1($a, $, $, $, $, $) vs f2($a, $b, $c, $d, $e, $f) )

[14:19] <japhb> .ask moritz Is there any good reference for how to write (and/or use) a grammar so that it will produce useful error messages?  Will your upcoming book cover that?

[14:19] <yoleaux> japhb: I'll pass your message to moritz.

[14:22] <timotimo> https://github.com/moritz/Grammar-ErrorReporting check this out

[14:22] <moritz> japhb: yes, the upcoming book has a whole chapter on that topic

[14:22] <yoleaux> 14:19Z <japhb> moritz: Is there any good reference for how to write (and/or use) a grammar so that it will produce useful error messages?  Will your upcoming book cover that?

[14:22] <timotimo> moritz: shouldn't the name field in ErrorReporting's META6.json have :: instead of - between the words?

[14:22] <moritz> japhb: you can preorder it now; ETA is this year

[14:23] <moritz> timotimo: I have no idea

[14:24] <timotimo> it's probably not so critical, it just looks weird to have it called Grammar-ErrorReporting on modules.perl6.org

[14:24] <gfldex> :: would be better. Makes it search friendly

[14:27] <moritz> updated

[14:31] <buggable> New CPAN upload: Grammar-ErrorReporting-0.2.tar.gz by MORITZ https://cpan.metacpan.org/authors/id/M/MO/MORITZ/Perl6/Grammar-ErrorReporting-0.2.tar.gz

[14:53] <Geth> ¦ rakudo/hyper-race-rework: cc2a064395 | (Jonathan Worthington)++ | 4 files

[14:53] <Geth> ¦ rakudo/hyper-race-rework: Extract some Seq methods onto a Sequence role

[14:53] <Geth> ¦ rakudo/hyper-race-rework:

[14:53] <Geth> ¦ rakudo/hyper-race-rework: This will also be done by HyperSeq and RaceSeq, after upcoming changes

[14:53] <Geth> ¦ rakudo/hyper-race-rework: to how they are implemented.

[14:53] <Geth> ¦ rakudo/hyper-race-rework: review: https://github.com/rakudo/rakudo/commit/cc2a064395

[15:17] <Zoffix> m: -> Int:D() $x { dd $x }("1")

[15:17] <camelia> rakudo-moar d6a9edacf: OUTPUT: «Type check failed in binding to parameter '$x'; expected Int but got Str ("1")␤  in block <unit> at <tmp> line 1␤␤»

[15:17] <yoleaux> 14:32Z <[Coke]> Zoffix: Thanks for Proc::Q, it's basically exactly what I needed to build.

[15:18] <Zoffix> m: -> Int() $x { dd $x }("1")

[15:18] <camelia> rakudo-moar d6a9edacf: OUTPUT: «Int $x = 1␤»

[15:18] <Zoffix> Coersers to a :D ain't working... I could've swore I used them in the past

[15:18] <Zoffix> m: -> Int:D() $x { dd $x }(1)

[15:18] <camelia> rakudo-moar d6a9edacf: OUTPUT: «1␤»

[15:19] <Zoffix> And they're probably only working because they don't need to coerce anything 😟

[15:20] <jnthn> I'm not even sure what they'd mean

[15:21] <Zoffix> Int:D() => Coerce from Any to Int, ensuring you got an Int:D at the end

[15:22] <jnthn> Ah, so it'd not a coercer to :D type, just a check that the :D applies to the coerced result?

[15:22] <jnthn> Guess that makes sense.

[15:22] <Zoffix> Yeah

[15:22] <jnthn> Though -> Int(Any:D) $x { } is probably quite likely safer

[15:22] <jnthn> m: say Int.Int

[15:22] <camelia> rakudo-moar d6a9edacf: OUTPUT: «(Int)␤»

[15:23] <jnthn> m: say Str.Int

[15:23] <camelia> rakudo-moar d6a9edacf: OUTPUT: «Invocant of method 'Int' must be an object instance of type 'Str', not a type object of type 'Str'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[15:23] <jnthn> Heh, I thought it'd be a warning and 0

[15:23] <Zoffix> m: -> Int(Any:D) $x { $x.DEFINITE.say }(class { method Int { Int } }.new)

[15:23] <camelia> rakudo-moar d6a9edacf: OUTPUT: «False␤»

[15:24] <jnthn> Well yeah, somebody *can* write that, but it's unlikely a defined value would coerce into a type object

[15:25] <Zoffix> The fact that it silently fails is certainly LTA.

[15:25] <jnthn> Indeed

[15:25] <Zoffix> I probably used it in core even

[15:25] <Zoffix> jnthn: so should it DWIM and coerce to type + :D check or should it error out?

[15:26] <jnthn> Whichever somebody has the time/energy to implement, I guess ;)

[15:26] <jnthn> I mean, I'd prefer the first, but the second is surely easier :)

[15:26] <Zoffix> I prefer the first too

[15:27] <Zoffix> There are even roast tests for this even (fudged it seems tho)

[15:28] <Zoffix> gonna try to take a crack at it on the weekend

[15:28] <jnthn> Nice :)

[15:28] <Zoffix> |5d make Int:D() do things

[15:28] <ZofBot> Zoffix, Will remind you on 2017-10-21T11:28:20.708273-04:00 about make Int:D() do things

[16:04] <tbrowder> .tell jnthn Would breaking out a separate TablePod class in new file TablePod.nqp be considered if I go in that direction?

[16:04] <yoleaux> tbrowder: I'll pass your message to jnthn.

[16:13] <Geth> ¦ rakudo/hyper-race-rework: 2352efe513 | (Jonathan Worthington)++ | 9 files

[16:13] <Geth> ¦ rakudo/hyper-race-rework: Gut current, broken, hyper/race implementation

[16:13] <Geth> ¦ rakudo/hyper-race-rework: review: https://github.com/rakudo/rakudo/commit/2352efe513

[16:13] <jnthn> tbrowder: What benefits would it have?

[16:13] <yoleaux> 16:04Z <tbrowder> jnthn: Would breaking out a separate TablePod class in new file TablePod.nqp be considered if I go in that direction?

[16:14] <jnthn> (Genuine question; I don't know that area of the code much at all :))

[16:27] <Geth> ¦ rakudo/hyper-race-rework: d43b373850 | (Jonathan Worthington)++ | 8 files

[16:27] <Geth> ¦ rakudo/hyper-race-rework: Start to add guts of new hyper/race implementation

[16:27] <Geth> ¦ rakudo/hyper-race-rework: review: https://github.com/rakudo/rakudo/commit/d43b373850

[16:27] <tbrowder> jnthn: depending on my changes, just a little isolation  of table-specific code. maybe instead have methods inside the main table sub?

[16:27] <tbrowder> or subs?

[16:27] <jnthn> Perhaps that, yeah

[16:28] <tbrowder> ok, thanks!

[16:28] <jnthn> Breaking things up into manageable pieces is generally a good thing to do :)

[16:40] <Geth> ¦ rakudo/hyper-race-rework: dfa230f7bd | (Jonathan Worthington)++ | 3 files

[16:40] <Geth> ¦ rakudo/hyper-race-rework: Add new hyper/race pipeline builder

[16:40] <Geth> ¦ rakudo/hyper-race-rework:

[16:40] <Geth> ¦ rakudo/hyper-race-rework: This is the part that kicks off parallel workers. It does so using

[16:40] <Geth> ¦ rakudo/hyper-race-rework: non-blocking constructs, so as not to exhaust the thread pool and to

[16:40] <Geth> ¦ rakudo/hyper-race-rework: play nice with other tasks ongoing in the pool. This also means we'll

[16:40] <Geth> ¦ rakudo/hyper-race-rework: have nice behavior if a parallel worker does a `react` or `await` (so,

[16:40] <Geth> ¦ rakudo/hyper-race-rework: non-blocking under 6.d.PREVIEW). Support for rebatchers still to come.

[16:40] <Geth> ¦ rakudo/hyper-race-rework: review: https://github.com/rakudo/rakudo/commit/dfa230f7bd

[16:42] <gfldex> I can't wait to .hyper All The Things!

[16:43] <jnthn> I'd only hyper those where there's enough work to make it worth it :P

[17:39] <Geth> ¦ rakudo/hyper-race-rework: 1fdc84fe04 | (Jonathan Worthington)++ | 6 files

[17:39] <Geth> ¦ rakudo/hyper-race-rework: Start new HyperSeq/RaceSeq, wire up hyper/race

[17:39] <Geth> ¦ rakudo/hyper-race-rework:

[17:39] <Geth> ¦ rakudo/hyper-race-rework: Supports parallel evaluation of basic cases of map and grep.

[17:39] <Geth> ¦ rakudo/hyper-race-rework: review: https://github.com/rakudo/rakudo/commit/1fdc84fe04

[17:41] <jnthn> Hm, seems that passes S07-hyperrace/hyper.t and S07-hyperrace/race.t

[17:41] <jnthn> At least as well as what was there before

[17:41] <jnthn> Still more to do, of course

[17:41] <jnthn> But right now, time to go home and prep dinner :)

[17:42] <jnthn> oh, there are todo passes :D

[17:42] <jnthn> OK, really home o/

[18:37] <gfldex> jnthn: the heisenbug in .hyper is not gone yet. Should it have been?

[18:39] <Zoffix> Note the the work is in a branch.

[18:40] <gfldex> that I noted and pulled

[18:40] <timotimo> gfldex: what are you hypering so far?

[18:41] <gfldex> https://gist.github.com/b9914d412c807f45d2d041d45726f2b2

[18:42] <gfldex> in that example .hyper seams to return undefined values and Seq that are eaten already

[18:42] <gfldex> just now I got a $_ that is Mu when it shouldn't

[18:43] <gfldex> the bug seams to have a ~10% chance to trigger with 6 cores

[18:43] <gfldex> it does segfault too

[18:44] <gfldex> also it does heat up the water quite nicely :->

[18:48] <timotimo> i just now saw that samcv's grant will be paid out \o/

[18:49] <samcv> \o/

[18:49] <timotimo> that has been on the tpf blog since the 7th

[18:50] <samcv> should hopefully get paid soon. sent my W-9 to the right email and didn't get a response back after a week. forwarded it to [Coke] so hopefully will get through. he said the email may be behind a queue

[18:50] * [Coke] has been trying very hard to post blog things in a timely fashion.

[18:52] <gfldex> timotimo: I would not mind a critique of my attempt to .hyper to-json.

[18:54] <gfldex> I just spotted a bug.

[18:57] <Zoffix> I keep getting burned with `"Str does not support associative indexing"` 'cause I keep writing stuff like `"$!who{"@" if $!who or $!where}$!where"`

[18:58] <Zoffix> We clearly should've used different brackets for hashes and code blocks :}

[19:04] <timotimo> i don't know what a W-9 is :)

[19:05] * Zoffix turns timotimo in for tax evasion

[19:05] <Zoffix> It's a US form for tax stuff

[19:06] <timotimo> i see

[19:07] <timotimo> i wonder how payment to european folks will work

[19:07] <timotimo> (but first i have to do the actual work)

[19:07] <Zoffix> They just sent me a cheque

[19:07] <timotimo> that sounds easy

[19:07] <Zoffix> It was :)

[19:07] <timotimo> of course i have to figure out what process i have to go through to tax the money properly

[19:08] <gfldex> first you have to talk to the toll office (if it crosses €10k)

[19:08] <timotimo> it doesn't! :D

[19:09] <gfldex> lucky you! :-D

[19:09] <AlexDaniel`> releasable6: next

[19:09] <releasable6> AlexDaniel`, Next release in 4 days and ≈23 hours. 1 blocker. Changelog for this release was not started yet

[19:09] <lizmat> timotimo: if you are not a US citizen, you should only have to deal with the local tax office (aka it's income for you)

[19:09] <releasable6> AlexDaniel`, Details: https://gist.github.com/a4f451219f22eabd6a94e2ef4648a76a

[19:09] <timotimo> that doesn't seem terribly tricky

[19:09] <AlexDaniel`> .tell brrt Hello. Any news on RT #132269 ?

[19:09] <yoleaux> AlexDaniel`: I'll pass your message to brrt.

[19:09] * timotimo BBL

[19:09] <synopsebot> RT#132269 [new]: https://rt.perl.org/Ticket/Display.html?id=132269 [REGRESSION][BUG] JIT removing loop construct and confusing last()

[19:10] <lizmat> timotimo: most tricky thing in these situations is to actually set apart the money for taxes until they're due

[19:11] <timotimo> as opposed to spending it all immediately? :)

[19:12] <lizmat> yup

[19:54] <jnthn> gfldex: I've really no idea; the only indicators I have so far is that it passed a handful of local sanity tests I wrote and as I left the office I glimpsed some passing TODO tests from S07-hyperrace/.

[19:55] <jnthn> gfldex: There may be more TODO'd ones it doesn't pass, and I sure didn't yet have time to go through all of the RTs on hyper/race to see where they stand. :)

[20:12] <b2gills> Does that include the “<hyper race> X <map grep> done in reverse” ones? (race+map is the only one that works currently)

[21:11] <gfldex> HyperIterable and HyperSeq seam not to be specced. Is that intentional?

[22:02] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/10/16/2017-42-taking-ticketing-seriously/

[22:04] <MasterDuke> are there any downsides to non-sigiled variables? other than the obvious (i.e., they're read-only)

[22:07] <timotimo> they aren't read-only by themselves, they just don't get a scalar for free

[22:08] <MasterDuke> right. i guess why i'm asking, any reason not to do an audit of all core sub/method signatures and make anything raw that can be?

[22:10] <Zoffix> m: my $x = 100; sub (\z) { z = 42 }($x); say $x # they're not readonly at all :)

[22:10] <camelia> rakudo-moar d6a9edacf: OUTPUT: «42␤»

[22:10] <timotimo> it'll give you a read-write version of the incoming var if it has an actual scalar to go with it

[22:14] <MasterDuke> "I'm stupid. You're smart. I was wrong. You were right. You're the best. I'm the worst. You're very good-looking. I'm not very attractive"

[22:15] <timotimo> wait what

[22:15] <MasterDuke> happy gilmore

[22:16] * MasterDuke admits the first question included a less-than-completely-accurate statement along with it

[22:17] <MasterDuke> but what about the second question?

[22:19] <Zoffix> what was that? :)

[22:20] <Zoffix> the stupid smart thing

[22:21] <Zoffix> ZofBot: must be a human thing...

[22:21] <ZofBot> Zoffix, Would had no being, If this salute my blood a jot; it faints me To think what follows

[22:27] <timotimo> so, anybody know how printf with 0.3e0 gives an unlimited supply of zeroes?

[22:38] <MasterDuke> heh, didn't mean to cause that much confusion, i have a bunch of friends who use that quote all the time

[22:42] <timotimo> OK

[22:45] <timotimo> i have a version of sprintf cut down to have no grammar pieces

[22:45] <timotimo> now i can put debug info everywhere

[22:45] <MasterDuke> ooo, faster?

[22:47] <timotimo> well, i can change it now without recompiling nqp

[22:47] <timotimo> so yeah, faster

[22:47] <timotimo> it doesn't do anything except a single %f, though

[22:48] <timotimo> m: say 0.3e0 - 0.3

[22:48] <camelia> rakudo-moar d6a9edacf: OUTPUT: «0␤»

[22:49] <timotimo> we actually represent 0.3 precisely?

[22:51] <timotimo> ah, it's the same bug that breaks 1e-1 vs 0.1e0 i guess?

[22:55] <timotimo> i don't want to fiddle around with this tbh
