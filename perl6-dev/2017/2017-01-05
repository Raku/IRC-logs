[00:12] <dalek> roast: 1db2fc7 | (Zoffix Znet)++ | S19-command-line/arguments.t:

[00:12] <dalek> roast: Fudge test for a bugfix that hasn't been fixed yet

[00:12] <dalek> roast:

[00:12] <dalek> roast: https://github.com/MoarVM/MoarVM/issues/482

[00:12] <dalek> roast: review: https://github.com/perl6/roast/commit/1db2fc7c23

[04:58] <MasterDuke> samcv: https://github.com/perl6/roast/blob/master/S05-mass/properties-general.t#L817 is now passing for me (moar/nqp/rakudo HEAD), is that expected?

[05:16] <samcv> MasterDuke, even the TODO?

[05:17] <samcv> also no, not expected to pass     is '	 	' ~~ /<:space>+/, ' ', 'space chars';

[05:17] <samcv> m: use nqp; say nqp::propcode('space'); say nqp::propcode('White_Space')

[05:17] <camelia> rakudo-moar 996ab6: OUTPUT«===SORRY!===␤No registered operation handler for 'propcode'␤»

[05:17] <samcv> m: use nqp; say nqp::unipropcode('space'); say nqp::nuipropcode('White_Space')

[05:17] <camelia> rakudo-moar 996ab6: OUTPUT«===SORRY!===␤No registered operation handler for 'nuipropcode'␤»

[05:17] <samcv> m: use nqp; say nqp::unipropcode('space'); say nqp::unipropcode('White_Space')

[05:17] <camelia> rakudo-moar 996ab6: OUTPUT«99␤99␤»

[05:17] <samcv> and it's passing right now MasterDuke ?

[05:17] <samcv> or do you have the newest moar on git

[05:18] <samcv> m: say '   ' ~~ /<:space>/

[05:18] <camelia> rakudo-moar 996ab6: OUTPUT«Nil␤»

[05:19] <AlexDaniel> .tell notviki mch: my @a = <one two three>; @a[*] = "four"; say @a.perl

[05:19] <yoleaux2> AlexDaniel: I'll pass your message to notviki.

[05:19] <samcv> that test shouldn't pass. well it SHOULD pass. but unless some change in nqp is made it shouldn't pass, otherwise likely it thinks space means LF=space

[05:19] <samcv> cause it checks property _values_ before property_names(bools)

[05:20] <samcv> hmm curious

[05:20] <samcv> m: say ' '.uniprop('LF')

[05:20] <camelia> rakudo-moar 996ab6: OUTPUT«Sp␤»

[05:20] <samcv> m: say ' ' ~~ /<:Sp>/

[05:20] <camelia> rakudo-moar 996ab6: OUTPUT«｢ ｣␤»

[05:21] <samcv> i should put the rt in there MasterDuke https://rt.perl.org/Ticket/Display.html?id=130483

[05:22] <samcv> bisectable6, : use nqp; say nqp::unipropcode('space') == nqp::unipropcode('White_Space')

[05:22] <bisectable6> samcv, On both starting points (old=2015.12 new=996ab6a) the exit code is 1 and the output is identical as well

[05:22] <bisectable6> samcv, Output on both points: ===SORRY!=== Error while compiling /tmp/VGe_E7FzT9␤Bogus statement␤at /tmp/VGe_E7FzT9:1␤------> :⏏ use nqp; say nqp::unipropcode('space') ␤    expecting any of:␤        colon pair

[05:22] <samcv> bisectable6, use nqp; say nqp::unipropcode('space') == nqp::unipropcode('White_Space')

[05:22] <bisectable6> samcv, Bisecting by output (old=2015.12 new=996ab6a) because on both starting points the exit code is 0

[05:22] <bisectable6> samcv, bisect log: https://gist.github.com/50acf5fe072680085746459f144a106f

[05:22] <bisectable6> samcv, (2017-01-02) https://github.com/rakudo/rakudo/commit/7c8b705b3375522fc36304b771f82f50246afcf0

[05:27] <samcv> m: use nqp; say nqp::univalcode('space')

[05:27] <camelia> rakudo-moar 996ab6: OUTPUT«===SORRY!===␤No registered operation handler for 'univalcode'␤»

[05:28] <AlexDaniel> m: my %f := Map.new; %f = (<a 1 c 3 d 4 e 5>); %f{"b"} := 2; %f.WHICH.say

[05:28] <camelia> rakudo-moar 996ab6: OUTPUT«Map|Str|a(1) Str|c(3) Str|d(4) Str|e(5)␤»

[05:28] <AlexDaniel> what's up with this WHICH

[05:32] <dalek> roast: f292cec | samcv++ | S05-mass/properties-general.t:

[05:32] <dalek> roast: Add RT #130483 to this todo in properties-general.t

[05:32] <dalek> roast: review: https://github.com/perl6/roast/commit/f292cecbd2

[05:32] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130483

[05:46] <AlexDaniel> if anybody can figure out what's going on here and why, I would appreciate it:

[05:46] <AlexDaniel> m: my $x = gather for 1..5 { take $_; say $x; }; dd $x

[05:47] <camelia> rakudo-moar 996ab6: OUTPUT«(timeout)»

[05:47] <AlexDaniel> this is the commit that did it: https://github.com/rakudo/rakudo/commit/f3fe8196213173c4124693976540844e1eddc8ef

[05:47] <AlexDaniel> mc: my $x = gather for 1..5 { take $_; say $x; }; dd $x

[05:47] <committable6> AlexDaniel, https://gist.github.com/b6aaed70cc89bbb798913012a69d1c37

[07:35] <lizmat> Files=1163, Tests=57394, 198 wallclock secs (12.08 usr  4.98 sys + 1271.42 cusr 132.92 csys = 1421.40 CPU)

[08:23] <[Tux]> This is Rakudo version 2016.12-214-g996ab6a04 built on MoarVM version 2016.12-68-g1994c6ee

[08:23] <[Tux]> csv-ip5xs        2.957

[08:23] <[Tux]> test            13.140

[08:23] <[Tux]> test-t           5.377

[08:23] <[Tux]> csv-parser      15.453

[08:26] <samcv> hi tux

[08:27] <samcv> buggable, speed

[08:27] <buggable> samcv, ▇█▇▇█▇█▇██▇▇▇█▄▆▅▃▄▄▂▃▃▄▂▁▁▂▃▂▂▅▂▂▄▂▃▂▂▁▆▄▂▂▃▂▂▂▃▂ data for 2016-12-16–2017-01-05; range: 5.137s–6.264s

[09:04] <dalek> rakudo/nom: 8568dd1 | lizmat++ | src/core/ShapedArray.pm:

[09:04] <dalek> rakudo/nom: Fix RT #130513

[09:04] <dalek> rakudo/nom:

[09:04] <dalek> rakudo/nom: By adding a .List for shaped arrays.

[09:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8568dd1ef0

[09:04] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130513

[11:02] <notviki> 

[11:02] <yoleaux2> 05:19Z <AlexDaniel> notviki: mch: my @a = <one two three>; @a[*] = "four"; say @a.perl

[11:02] <notviki> mch: my @a = <one two three>; @a[*] = "four"; say @a.perl

[11:02] <committable6> notviki, ¦«2015.12»: ["four", Mu, Mu]␤¦«HEAD»: ["four", Any, Any]

[11:41] <dalek> rakudo/nom: 4e1e348 | titsuki++ | t/04-nativecall/ (3 files):

[11:41] <dalek> rakudo/nom: Use submethod TWEAK instead of method init

[11:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4e1e348f0e

[11:41] <dalek> rakudo/nom: 0fdf327 | lizmat++ | t/04-nativecall/ (3 files):

[11:41] <dalek> rakudo/nom: Merge pull request #987 from titsuki/use-tweak

[11:41] <dalek> rakudo/nom:

[11:41] <dalek> rakudo/nom: Use submethod TWEAK instead of method init

[11:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0fdf327157

[11:44] <dalek> rakudo/nom: d77f9b8 | lizmat++ | src/core/ShapedArray.pm:

[11:44] <dalek> rakudo/nom: Fix RT #130510

[11:44] <dalek> rakudo/nom:

[11:44] <dalek> rakudo/nom: By removing the (apparently faulty) type check: let the actual assignment

[11:44] <dalek> rakudo/nom: take care of that.

[11:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d77f9b873e

[11:44] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130510

[12:16] <lizmat> m: my @a[2;2] = (0,1),(2,3); my @b[2;2] = @a Z @a  # is Z supposed to preserver shape or not ?

[12:16] <camelia> rakudo-moar d77f9b: OUTPUT«Index 2 for dimension 1 out of range (must be 0..1)␤  in block <unit> at <tmp> line 1␤␤»

[12:16] <lizmat> m: my @a[2;2] = (0,1),(2,3); dd @a Z @a   # aka, is this correct ?

[12:16] <camelia> rakudo-moar d77f9b: OUTPUT«((0, 0), (1, 1), (2, 2), (3, 3)).Seq␤»

[12:17] <dalek> rakudo/nom: cbf30e1 | lizmat++ | src/core/Iterable.pm:

[12:17] <dalek> rakudo/nom: Don't bother creating a Failure that gets thrown always

[12:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cbf30e1054

[12:20] <jnthn> lizmat: No, it's not, and actually the @multi-dim Z= @flat idiom relies on it.

[12:20] <jnthn> hyper is meant to

[12:21] <jnthn> (to be clear, the idiom relies on it *not* trying to preserve shape)

[12:21] <lizmat> ok, but supposed we *want* to Z two shaped arrays into another (with the same shape), how would we co that ?

[12:21] <lizmat> *do

[12:21] <jnthn> Why'd you not hyper it?

[12:22] <lizmat> not seeing the syntax for that, could you elaborate ?

[12:23] <lizmat> >>,<< you mean ?

[12:23] <jnthn> Yeah but I don't quite understand what you're trying to achieve with plain Z :)

[12:23] <jnthn> Since that constructs sub-lists

[12:23] <lizmat> well, that was just an example, Z+ could be another  :-)

[12:23] <jnthn> Yeah, with Z+ it's more clearly just >>+<<

[12:24] <jnthn> I don't know if hyper *does* preserve shape yet

[12:24] <lizmat> How set in stone is all the hyper stuff in your book ?

[12:24] <jnthn> I don't think we've any tests for it on shaped things. So it's not. :-)

[12:25] <jnthn> (Provided we don't have such tests)

[12:25] <lizmat> m: my @a[2;2] = (0,1),(2,3); my @b[2;2] = @a >>+<< @a

[12:25] <camelia> rakudo-moar d77f9b: OUTPUT«Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤Cannot assign an array of shape  to an array of shape 2 2␤  in bl…»

[12:25] <lizmat> hmmm...

[12:25] <jnthn> I think it's just NYI

[12:25] <lizmat> seems like hypers don't know about shapes yet

[12:25] <lizmat> yup

[12:25] <jnthn> Yeah

[12:25] <jnthn> But hypers *do* preserve undeclared structure

[12:26] <jnthn> (Thus the whole nodal thing)

[12:26] <lizmat> yeah

[12:26] <jnthn> An official declared shape should surely be preserved too

[12:26] <jnthn> Just didn't get to it.

[12:27] <lizmat> I was also thinking of maybe adding a "is notslipping" trait

[12:27] <jnthn> The semantics of the the pointing-out forms on shaped arrays could be interesting

[12:27] <lizmat> also: specs speculate that any method on an Iterable could be considered "nodal"

[12:27] <lizmat> is that still the case?

[12:27] <jnthn> But the pointing in forms I guess are easy: if they shapes differ, or one side has a declared shape and the other doesn't, then error.

[12:28] <jnthn> Single value pointing out form is also quite easy

[12:28] <lizmat> yeah, looking at optimizing that stuff :-)

[12:28] <jnthn> e.g. the desired semantics of my @a[2;2]; ...; @a >>+=>> 1 are quite clear

[12:29] <jnthn> What's the thinking with the trait?

[12:29] <jnthn> Pretty sure that name won't fly :)

[12:29] <lizmat> well, yeah

[12:29] <jnthn> But the semantics are the thing that matters...

[12:30] <lizmat> but basically when we're processing such a block with that trait, we don't have to check for Slips being returned

[12:36] <jnthn> Is that really so costly?

[12:37] <lizmat> for every pull-one, we first check if something that was slipped is there,

[12:37] <lizmat> if not, we fetch a value, then check if it is a Slip

[12:37] <lizmat> that's one check for each pull-one

[12:38] <jnthn> Sure, but those should be comparatively cheap

[12:38] <jnthn> They're the kind of thing that should trace-jit well too, once we can do that

[12:39] <jnthn> I'd expect the checks can JIT down to just a few CPU instructions

[12:39] <jnthn> (Not saying they do today, but with the new JIT we're getting, etc...)

[12:56] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Fix RT #130510

[12:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/189154789 https://github.com/rakudo/rakudo/compare/0fdf3271571f...d77f9b873e64

[12:56] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130510

[12:56] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[13:01] <notviki> $ sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test"

[13:01] <notviki> Cannot add PPA: 'ppa:ubuntu-toolchain-r/test'.

[13:01] <notviki> Please check that the PPA name or format is correct.

[13:02] <notviki> " This job ran on our container-based trusty beta. Please read our blog post about the public beta.

[13:10] <notviki> NeuralAnomaly: status

[13:10] <NeuralAnomaly> notviki, [✘] Next release will be in 2 weeks and 2 days. Since last release, there are 75 new still-open tickets (74 unreviewed and 0 blockers) and 218 unreviewed commits. See http://perl6.fail/release/stats for details

[13:36] <dalek> rakudo/nom: a7d1061 | lizmat++ | src/core/Rakudo/Internals.pm:

[13:36] <dalek> rakudo/nom: Revert "Introducing R:I.RandomizeOrderIterator"

[13:36] <dalek> rakudo/nom:

[13:36] <dalek> rakudo/nom: This reverts commit dbe3e0eaa35e65d7ab0f52f55ecdaa05573c7725.

[13:36] <dalek> rakudo/nom:

[13:36] <dalek> rakudo/nom: YAGNI

[13:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a7d10613ae

[14:32] <MasterDuke> if i remove this ( https://github.com/perl6/nqp/blob/master/src/QRegex/Cursor.nqp#L995-L997 ) conditional, both NQP and Rakudo build. NQP fails 6 regex tests, but Rakduo passes spectest clean

[14:39] <jnthn> Time to write more spectests :)

[14:39] <jnthn> Think it's for <( and )>

[14:47] <MasterDuke> jnthn: yep

[14:51] <MasterDuke> i guess neither of those are used when building rakudo itself. i'd dumped every $name during a compile and didn't see $!from or $!to in the resulting list

[15:03] <dalek> rakudo/nom: 7ba9f84 | lizmat++ | src/core/ShapedArray.pm:

[15:03] <dalek> rakudo/nom: Add a shaped array STORE candidate for Iterators

[15:03] <dalek> rakudo/nom:

[15:03] <dalek> rakudo/nom: Intended to be part of the work to make hypers understand structure

[15:03] <dalek> rakudo/nom: when they should.  As a side effect of this, this now works:

[15:03] <dalek> rakudo/nom:

[15:03] <dalek> rakudo/nom:   $ 6 'my @a[3;3] = (^Inf).iterator; dd @a'

[15:03] <dalek> rakudo/nom:   Array.new(:shape(3, 3), [0, 1, 2], [3, 4, 5], [6, 7, 8])

[15:03] <dalek> rakudo/nom:

[15:04] <dalek> rakudo/nom: One could argue this is unwanted.  So maybe this STORE candidate

[15:04] <dalek> rakudo/nom: should be renamed to something else, like STORE-FROM-ITERATOR.

[15:04] <dalek> rakudo/nom: Comments / ideas welcome.

[15:04] <lizmat> review: https://github.com/rakudo/rakudo/commit/a7d10613ae

[15:04] <lizmat> grrr

[15:04] <lizmat> review: https://github.com/rakudo/rakudo/commit/7ba9f84

[15:12] <MasterDuke> notviki: https://github.com/rakudo/rakudo/blob/nom/lib/Test.pm6#L242, looks like this didn't get removed

[15:13] <notviki> it was decided to keep it until 6.d so we don't have to change 6.c-errata

[15:14] <MasterDuke> notviki: ok. btw, i thought you added a warns-like, but it don't see it there?

[15:15] <notviki> it's in t/spec/packages/Test/Util.pm

[15:16] <MasterDuke> thanks

[16:13] <MasterDuke> m: say("abc123def" ~~ /abc <( \d+ <( def/)

[16:13] <camelia> rakudo-moar 7ba9f8: OUTPUT«｢def｣␤»

[16:13] <MasterDuke> nqp: say("abc123def" ~~ /abc <( \d+ <( def/)

[16:13] <camelia> nqp-moarvm: OUTPUT«def␤»

[16:14] <MasterDuke> interesting, that's one of the failing nqp tests when i made my change (nqp gives 'abc123def' instead of 'def'), but it works in the rakudo i built with that nqp

[16:27] <notviki> MasterDuke: note that warns-like doesn't catch compile time warnings

[16:56] <MasterDuke> jnthn: any idea why the above regex fails in my modified nqp, but passes in a rakudo that uses my modified nqp?

[16:57] <jnthn> If your change is in MATCH, then Rakudo implements its own MATCH

[16:57] <MasterDuke> ahh, then i couldn't write spectests for it

[16:58] <MasterDuke> and the nqp tests correctly caught it

[17:09] <dalek> rakudo/nom: 2db2e3d | MasterDuke17++ | lib/Test.pm6:

[17:09] <dalek> rakudo/nom: Test.pm's is_approx isn't being removed until 6.d

[17:09] <dalek> rakudo/nom:

[17:09] <dalek> rakudo/nom: See https://irclog.perlgeek.de/perl6-dev/2017-01-05#i_13860967

[17:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2db2e3d4cb

[17:09] <dalek> rakudo/nom: 6d28c1d | (Zoffix Znet)++ | lib/Test.pm6:

[17:09] <dalek> rakudo/nom: Merge pull request #988 from MasterDuke17/fix_Test.pm_is_approx_deprecation_comment

[17:10] <dalek> rakudo/nom:

[17:10] <dalek> rakudo/nom: Test.pm's is_approx isn't being removed until 6.d

[17:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d28c1d0e8

[17:10] <ugexe> https://github.com/rakudo/rakudo/commit/b183cabf41b5c42cce04f68743180386782ee788 <- probably needs to be reverted; breaks TAP::Harness testing JSON::Fast and Test::Mock

[17:11] <notviki> seems appveyor's still failing to install strawberry perl: https://ci.appveyor.com/project/moritz/rakudo/build/1.0.2041/job/8f9m530xnl7eobr9

[17:13] <notviki> ugexe: will look into it

[17:16] <notviki> works fine with prove, so I'd say it's a bug in TAP::Harness that should be located and fixed rather than reverting anything

[17:16] * notviki looks

[17:16] <notviki> buggable: eco prove6

[17:16] <buggable> notviki, Nothing found

[17:16] <notviki> ugexe: is there a simple way to use TAP::Harness as harness?

[17:16] <notviki> how do I trigger the bug

[17:17] <ugexe> zef install JSON::Fast

[17:17] <ugexe> zef --/tap-harness install JSON::Fast will run with prove and works properly

[17:19] <notviki> ugexe: what distro is prove6 in?

[17:19] <ugexe> TAP::Harness

[17:20] <notviki> huggable: prove6 :is: https://github.com/Leont/tap-harness6/tree/master/bin

[17:20] <huggable> notviki, Added prove6 as https://github.com/Leont/tap-harness6/tree/master/bin

[17:31] <notviki> reproed with 6 lines of code with just TAP module and a test file...

[17:31] * notviki looks more

[17:38] <ugexe> I'm not sure if the original complaint makes sense - as far as I can tell you can't use a single \ as a test description in a perl 5 test either

[17:40] <ugexe> * makes sense as a rakudo bug and not a tap spec bug

[17:40] <notviki> You can use \

[17:40] <notviki> In perl 5. And TAP spec doesn't forbid it either

[17:41] <notviki> https://gist.github.com/zoffixznet/8a51c42894a478a27e187a37afa7308c

[17:44] <ugexe> hmm so I'm confused at why `say q|\n|` prints 2 characters but `say q|\|` is not valid syntax

[17:45] <notviki> oh ffs...

[17:46] <notviki> Note to self: before spending 10 minutes tweaking grammar trying to see changes, be sure to add -Ilib to your ./perl6 -_-

[17:46] <notviki> ugexe: because that \ escapes the |

[17:47] <notviki> it's defunct in q|| only if it's not at end

[17:47] <notviki> well.... or rather, if works to escape the closing delimiter

[17:48] <notviki> m: say q|\|\n|

[17:48] <camelia> rakudo-moar 6d28c1: OUTPUT«|\n␤»

[17:48] <notviki> m: say q'\|\n'

[17:48] <camelia> rakudo-moar 6d28c1: OUTPUT«\|\n␤»

[17:48] <ugexe> yeah, but i'm not wrapping my head around why since it doesn't escape anything else

[17:48] <notviki> so you could use the delimiter in the string itself, I guess

[17:49] <ugexe> ah

[17:52] <dalek> nqp: 4f67a6c | MasterDuke17++ | src/QRegex/Cursor.nqp:

[17:52] <dalek> nqp: Micro-optimize some commonly called methods

[17:52] <dalek> nqp:

[17:52] <dalek> nqp: These are called a combined several million times when building Rakudo.

[17:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4f67a6ca60

[17:52] <dalek> nqp: 3644864 | niner++ | src/QRegex/Cursor.nqp:

[17:52] <dalek> nqp: Merge pull request #336 from MasterDuke17/some_QRegex-Cursor_micro-optimizations

[17:52] <dalek> nqp:

[17:52] <dalek> nqp: Micro-optimize some commonly called methods

[17:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3644864e4e

[17:52] <notviki> I have a fix for TAP::Harness. Need to do some $work stuff and will then commit

[17:56] <notviki> hmm.. rather, I'd also like to re-read TAP spec and write some tests first, so prolly will commit in 4-5 hours. The issue is the TAP::Grammar.description assumes the description will either have a '\\' or a '\#' and no other '\' occurance, so right now it's choking on any lone slash in the description.

[18:11] <jnthn> Is this the same TAP::Parser that spectest6 uses?

[18:12] <notviki> Yeah. So this is probably also the reason why lizmat saw more failures that time

[18:12] <[Coke]> jnthn: I am not sure there was a ticket for this specifically: gentle reminder about perl6/doc's coke/bughunt branch.

[18:13] * [Coke] does a rebuild of perl6 to see if any recent fixes have impacted that.

[18:14] <dogbert17> [Coke]: re elevated RT privileges. I'm now thrown to a page where I can see my own reported bugs but I can't seem to be able to do much else. What am I doing wrong?

[18:14] <[Coke]> dogbert17: I don't know. what are you doing?

[18:15] <[Coke]> (what URL are you going to? what are you clicking on?)

[18:15] <dogbert17> [Coke], logging in with BitCard account and then I'm thrown to a /selfservice url

[18:16] <[Coke]> again, what URL are you going to?

[18:17] <dogbert17> https://rt.perl.org/SelfService/

[18:17] <notviki> What happens when you go to https://rt.perl.org/ ?

[18:17] <notviki> After lkogging in

[18:17] <[Coke]> ... that's the url you are ending on. is that also the URL you are putting into the browser to get there?

[18:18] <[Coke]> because if so, then there's your problem. :)

[18:18] <dogbert17> notviki: I'm thrown back to the SelfService url

[18:18] * notviki shrugs

[18:19] <dogbert17> [Coke]: no I start at rt.perl.org and logs in from there

[18:19] <dogbert17> *log

[18:27] <[Coke]> having dogbert17 escalate with rt bugadmins.

[18:28] <notviki> log out and log in again; try clearning cookies/cache; try different browser; try sacrificing a goat to the Internet Gods

[18:43] <diakopter> Bit

[18:44] <diakopter> their refusal to try to diagnose repeated BitCard complaints over the past many years is just deplorable

[18:45] <diakopter> I was of the numerous complainants whose reports were disregarded

[18:52] <jnthn> [Coke]: Thanks for the reminder. Maybe the same thing (or one of them) that I know about that afflicts the spectest6 will turn out to get it. Guess we'll find out next week...if not, will have to look deeper.

[18:53] <[Coke]> jnthn: MoarVM panic: Internal error: zeroed target thread ID in work pass - that's new. :)

[18:54] <[Coke]> jnthn: nicely formatted unlock when we're not locked!

[18:54] <[Coke]> so, definitely some weirdness still.

[19:19] <MasterDuke> huh, just tried to profile a rakudo compile again and it keeps getting killed after it goes over 10g ram used. ISTR it was less that than before

[19:20] <notviki> 10GB :o

[19:46] * notviki notices Instant.DateTime passes extra args to DateTime.new but other .DateTime methods we got don';t

[19:47] <gfldex> lizmat: please asked module authors that use travis to activate weekly cronjobs in the next weekly

[20:04] <nine> Just a heads up: I'm going on vacation starting tomorrow and will come back on the 15th. If everything works out, I'll be very much offline :)

[20:05] <notviki> NeuralAnomaly: status

[20:05] <NeuralAnomaly> notviki, [✘] Next release will be in 2 weeks and 1 day. Since last release, there are 76 new still-open tickets (75 unreviewed and 0 blockers) and 222 unreviewed commits. See http://perl6.fail/release/stats for details

[20:08] <notviki> wow, a ton more commits this month... from what I see in the log, a day before last release we had only 71... Now 222 and it's still 2 weeks before the release!

[20:11] <moritz> m: class A { method x (:U:) { }}

[20:11] <camelia> rakudo-moar 6d28c1: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> class A { method x (:⏏U:) { }}␤»

[21:22] <jnthn> nine: Have a nice vacation! :)

[21:24] <dalek> rakudo/nom: 1e88cd6 | lizmat++ | / (2 files):

[21:24] <dalek> rakudo/nom: Fix native array.sort

[21:24] <dalek> rakudo/nom:

[21:24] <dalek> rakudo/nom: For some reason this breakage went unnoticed.  Guess we don't have

[21:24] <dalek> rakudo/nom: any tests for it  :-(

[21:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1e88cd6c39

[21:26] <jnthn> Might be worth systematically going through the list methods and making sure they've got test coverage on native arrays

[21:27] <jnthn> Perhaps worth a ticket in roast issues

[21:54] <dalek> rakudo/nom: 4038c6c | lizmat++ | / (2 files):

[21:54] <dalek> rakudo/nom: Make sorting of 0,1,2 element native arrays about 30% faster

[21:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4038c6c44d

[21:58] <lizmat> jnthn: https://github.com/perl6/roast/issues/218

[22:07] <jnthn> lizmat++

[22:09] <MasterDuke> timotimo, notviki: did the linecoverage branch in MoarVM get updated? ISTR it had merge conflicts recently, which is why http://perl6.wtf/ doesn't have anything

[22:10] <MasterDuke> updating that might help detect large gaps in test coverage like ^^^

[22:10] <notviki> MasterDuke: it did, but the coverage script got bit-rotted by the SETTING::/ stuff we changed in the backtraces

[22:10] <lizmat> good night, #perl6!

[22:10] <notviki> night

[22:15] <MasterDuke> notviki: seems like a relatively straightforward fix should be possible, i'll try to get to that in the next week or so

[22:17] <notviki> MasterDuke++

[22:19] <notviki> it's this script https://github.com/MoarVM/MoarVM/blob/line_based_coverage_5/tools/parse_coverage_report.p6    and this is the shell script I use to make coverage report https://gist.github.com/zoffixznet/6cb85e011b7e3addddf65828c562cc4a

[22:19] <notviki> (it stresstests three times; only once is necessary, I do it three times to avoid flappers)

[22:24] <MasterDuke> thanks, i'd definitely forgotten some of those commands

[23:03] <timotimo> MasterDuke: the merge conflicts are always due to the oplist stuff. all you have to do every time is make sure the oplist looks correct, then perl6 tools/update_ops.p6 and commit all the files it generates

[23:05] <MasterDuke> timotimo: i did actually look at the most recent conflict, but i didn't know what the oplist *should* look like to know how to resolve it

[23:07] <MasterDuke> i.e., i don't think i know enough to resolve anything git couldn't

[23:10] <timotimo> just make sure the ops for coverage come after the sp_ ops, the rest doesn't matter

[23:11] <timotimo> the oplist is rather simple. the first batch (up until the first sp_ op) is append-only, everything after that is free for all

[23:12] <MasterDuke> thanks, should help next time i see a conflict

[23:16] <samcv> notviki, seems it is not doing test coverage for most files there? i think it used to work right?

[23:17] <notviki> samcv: yeah, it's not finding the files.

[23:18] <MasterDuke> samcv: that roast test i mentioned earlier is marked as a todo, but is in fact passing (with MoarVM/NQP/Rakudo all built from HEAD)

[23:18] <notviki> The old files are still accessible via the bot tho

[23:18] <notviki> Undercover: help

[23:18] <Undercover> notviki, Use cover: trigger with args to give to sourcery sub. e.g. cover: Int, 'base'. See http://modules.perl6.org/dist/CoreHackers::Sourcery

[23:18] <notviki> cover: &say

[23:18] <Undercover> notviki, The code is hit during stresstest [WARNING: this line is a proto! Check individual multies] See http://perl6.WTF/src_core_io_operators.pm.coverage.html#L20 for details

[23:18] <notviki> cover: &say, \()

[23:18] <Undercover> notviki, The code is NOT hit during stresstest See http://perl6.WTF/src_core_io_operators.pm.coverage.html#L21 for details

[23:18] <notviki> that might be slightly outdated

[23:20] <MasterDuke> i'm blanking, what do ? and ! mean at the start of subrules? e.g., <?alpha> or <!stdstopper>

[23:23] <notviki> m: say "abc:xyz" ~~ /.<?alpha>/

[23:23] <camelia> rakudo-moar 4038c6: OUTPUT«｢a｣␤»

[23:23] <notviki> m: say "a:xyz" ~~ /.<?alpha>/

[23:23] <camelia> rakudo-moar 4038c6: OUTPUT«｢:｣␤»

[23:23] <notviki> m: say "a:xyz" ~~ /.<!alpha>/

[23:23] <camelia> rakudo-moar 4038c6: OUTPUT«｢a｣␤»

[23:24] <notviki> m: say "ab:xyz:" ~~ /...<!alpha>/

[23:24] <camelia> rakudo-moar 4038c6: OUTPUT«｢xyz｣␤»

[23:24] <notviki> MasterDuke: positive and negative lookaheads

[23:24] <MasterDuke> ha, right. notviki++

[23:26] <dalek> roast: baaa8c9 | samcv++ | S15-nfg/emoji-test (2 files):

[23:26] <dalek> roast: Put the codepoints in the test description for the emoji tests

[23:26] <dalek> roast: review: https://github.com/perl6/roast/commit/baaa8c90a4
