[00:05] <gfldex> m: say (-∞..∞).pick(5)

[00:05] <camelia> rakudo-moar 042cb7413: OUTPUT: «()␤»

[00:05] <gfldex> I would prefere that to throw an out of range exception

[00:08] * Zoffix agrees with reasoning in https://github.com/rakudo/rakudo/commit/5c2283331d61729edce57099a365febf61982715

[01:17] <Geth> ¦ rakudo: c91bcc2afc | (Zoffix Znet)++ | 2 files

[01:17] <Geth> ¦ rakudo: Fix &infix:<eqv> with NaN-y Rationals

[01:17] <Geth> ¦ rakudo:

[01:17] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1353

[01:17] <Geth> ¦ rakudo:

[01:17] <Geth> ¦ rakudo: Check both numerator and denominators of both a and b are

[01:17] <Geth> ¦ rakudo: zero and return True. Otherwise, pass through `==` op.

[01:17] <Geth> ¦ rakudo:

[01:17] <Geth> ¦ rakudo: We can't just `==` check numerators even if both denominators

[01:17] <Geth> ¦ rakudo: are zero, since ±Inf Rationals could have those differ, yet would

[01:17] <Geth> ¦ rakudo: still be True `eqv`

[01:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c91bcc2afc

[01:17] <Geth> ¦ roast: 9b69d9787c | (Zoffix Znet)++ | S32-num/rat.t

[01:17] <Geth> ¦ roast: Spec `eqv` of zero-denominator Rationals

[01:17] <Geth> ¦ roast:

[01:17] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1353

[01:17] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/c91bcc2afc

[01:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9b69d9787c

[01:30] <Zoffix> Wondering if `eqv` is too loose with zero-denominator Rationals. For Nums, we care even about sign of zero, and I dug out comment: <TimToady> I would agree; eqv is not math, for which we have ==, but basically is about "would these serialize to the same thing" https://irclog.perlgeek.de/perl6-dev/2017-01-20#i_13959621

[01:30] <Zoffix> But for Rationals, we `eqv` two zero-denominator Rationals if their numerators are both zero or are both of the same sign

[01:31] <Zoffix> m: say <42/0> eqv <1/0>

[01:31] <camelia> rakudo-moar 042cb7413: OUTPUT: «True␤»

[01:31] <Zoffix> So should that be False, since it won't serialize the same?

[01:31] <Zoffix> For True: yes, they're equivalent anywhere math is involved

[01:32] <Zoffix> For False: no, they're not equivalent anywhere .numerator/.denominator are being worked on

[01:35] <Zoffix> m: (<43/0> + <42/0>).nude.say

[01:35] <camelia> rakudo-moar c91bcc2af: OUTPUT: «(85 0)␤»

[01:36] <Zoffix> Gonna leave it as `True`. If making it `False`, ^ the above would cause some uncertainty, since zero-denominator rats don't reduce

[01:36] <Zoffix> m: (<-2/0> + <4/0>).nude.say

[01:36] <camelia> rakudo-moar c91bcc2af: OUTPUT: «(2 0)␤»

[01:37] <Zoffix> crap

[01:38] <Zoffix> Maybe try always normalizing all zero-denominator Rats into <1/0>, <-1/0> and <0/0>

[01:41] * Zoffix puts it on the back burner, until .REDUCE-ME is removed

[01:55] <Geth> ¦ roast: 86bf39fcdc | (Zoffix Znet)++ | S32-num/rat.t

[01:55] <Geth> ¦ roast: Unspec zero-denominator Rationals leaving numerator untouched

[01:55] <Geth> ¦ roast:

[01:55] <Geth> ¦ roast: This test was added earlier today and is not part of 6.c spec.

[01:55] <Geth> ¦ roast:

[01:55] <Geth> ¦ roast: There are some math issues and we might want to solve them by normalizing

[01:55] <Geth> ¦ roast: newly-created zero-denomiator Rationals into <-1 0 1> numerators:

[01:55] <Geth> ¦ roast: R#1354 https://github.com/rakudo/rakudo/issues/1354

[01:55] <synopsebot> R#1354 [open]: https://github.com/rakudo/rakudo/issues/1354 Some operations with zero-denominator Rationals are broken

[01:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/86bf39fcdc

[03:56] <Geth> ¦ rakudo: e543c890ad | (Zoffix Znet)++ | 2 files

[03:56] <Geth> ¦ rakudo: Improve USAGE message for subset/where params

[03:56] <Geth> ¦ rakudo:

[03:56] <Geth> ¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1346

[03:56] <Geth> ¦ rakudo:

[03:56] <Geth> ¦ rakudo: - Display `where` constraints as `where { ... }` instead of

[03:56] <Geth> ¦ rakudo:     `-> ;; $_? is raw { #`(Block|83868104) ... }`. Looks like we

[03:56] <Geth> ¦ rakudo:     did this awhile back too, but the detection of custom wheres got

[03:56] <Geth> ¦ rakudo:     broken when .gist of blocks got changed

[03:56] <Geth> ¦ rakudo: - Display subset names instead of their nominal types in named params

[03:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e543c890ad

[04:01] <Geth> ¦ roast: b3d85987a7 | (Zoffix Znet)++ | S26-documentation/block-trailing.t

[04:01] <Geth> ¦ roast: [v6.d REVIEW] slightly simplify code

[04:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b3d85987a7

[04:04] <Geth> ¦ roast: 983aea724e | (Zoffix Znet)++ | S26-documentation/why-trailing.t

[04:04] <Geth> ¦ roast: [v6.d REVIEW] slightly simplify code

[04:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/983aea724e

[04:13] <Geth> ¦ roast: 88b27431ec | (Zoffix Znet)++ | S32-exceptions/misc.t

[04:13] <Geth> ¦ roast: [v6.d REVIEW] Formatting / more precise exceptions

[04:13] <Geth> ¦ roast:

[04:13] <Geth> ¦ roast: - Shorten long lines

[04:13] <Geth> ¦ roast: - Compress overly-vertical examples

[04:13] <Geth> ¦ roast: - Use actual exceptions instead of `Exception` in several

[04:13] <Geth> ¦ roast:     throws-like tests

[04:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/88b27431ec

[04:35] <Geth> ¦ roast: 1d71a97ac8 | (Zoffix Znet)++ | S32-list/seq.t

[04:35] <Geth> ¦ roast: [v6.d REVIEW] Improve Seq.from-list tests

[04:35] <Geth> ¦ roast:

[04:35] <Geth> ¦ roast: - Use more appropriate test routines

[04:35] <Geth> ¦ roast: - Use more elaborate &body to test it generates proper things

[04:35] <Geth> ¦ roast:

[04:35] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/146141d9d3d12caec72fd7b6c4b283d7c1eb9961

[04:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1d71a97ac8

[04:45] <travis-ci> Rakudo build failed. Zoffix Znet 'Improve USAGE message for subset/where params

[04:46] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/323485321 https://github.com/rakudo/rakudo/compare/c91bcc2afcc3...e543c890ad58

[04:46] <buggable> [travis build above] ☠ All failures are due to: failed make test (6 failures). Across all jobs, only t/05-messages/01-errors.t test file failed.

[04:50] <Geth> ¦ rakudo: 1d772dc002 | (Zoffix Znet)++ | src/core/List.pm

[04:50] <Geth> ¦ rakudo: Fix &list(Seq:D) to produce a List

[04:50] <Geth> ¦ rakudo:

[04:50] <Geth> ¦ rakudo: Per https://github.com/rakudo/rakudo/issues/1344 , a Seq is not

[04:50] <Geth> ¦ rakudo: a "list", because it does not do a Positional role.

[04:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1d772dc002

[04:56] <Geth> ¦ roast: 6636645ac9 | (Zoffix Znet)++ | S03-operators/context-forcers.t

[04:56] <Geth> ¦ roast: Change incorrect &list(Seq) tests

[04:56] <Geth> ¦ roast:

[04:56] <Geth> ¦ roast: Per https://github.com/rakudo/rakudo/issues/1344 , a Seq is not

[04:56] <Geth> ¦ roast: a "list", because it does not do a Positional role.

[04:56] <Geth> ¦ roast:

[04:56] <Geth> ¦ roast: Looks like the original tests[^2] did start off testing for List and

[04:56] <Geth> ¦ roast: because they were added alongside `cache` listop, they tested for

[04:56] <Geth> ¦ roast: <…commit message has 6 more lines…>

[04:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6636645ac9

[04:57] <Geth> ¦ roast/6.c-errata: 4a3719602f | (Zoffix Znet)++ | S03-operators/context-forcers.t

[04:57] <Geth> ¦ roast/6.c-errata: Change incorrect &list(Seq) tests

[04:57] <Geth> ¦ roast/6.c-errata:

[04:57] <Geth> ¦ roast/6.c-errata: Per https://github.com/rakudo/rakudo/issues/1344 , a Seq is not

[04:57] <Geth> ¦ roast/6.c-errata: a "list", because it does not do a Positional role.

[04:57] <Geth> ¦ roast/6.c-errata:

[04:57] <Geth> ¦ roast/6.c-errata: Looks like the original tests[^2] did start off testing for List and

[04:57] <Geth> ¦ roast/6.c-errata: because they were added alongside `cache` listop, they tested for

[04:57] <Geth> ¦ roast/6.c-errata: <…commit message has 6 more lines…>

[04:57] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/4a3719602f

[05:26] <Zoffix> .ask MasterDuke how come https://github.com/rakudo/rakudo/pull/1064/files converts `'` in literals to `'"'"'`  Makes it kinda hard to read in usage messages. I suspect this was to automatically add shell quoting, but that quoting doesn't apply to Windows

[05:26] <yoleaux> Zoffix: I'll pass your message to MasterDuke.

[05:40] <travis-ci> Rakudo build failed. Zoffix Znet 'Fix &list(Seq:D) to produce a List

[05:40] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/323490576 https://github.com/rakudo/rakudo/compare/e543c890ad58...1d772dc002e2

[05:41] <buggable> [travis build above] ☠ All failures are due to: failed make test (6 failures). Across all jobs, only t/05-messages/01-errors.t test file failed.

[06:14] <Geth> ¦ roast: cd327665b8 | (Zoffix Znet)++ | S32-exceptions/misc.t

[06:14] <Geth> ¦ roast: Add missing semicolon

[06:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cd327665b8

[06:17] <Geth> ¦ rakudo: 27fbd7ab77 | (Zoffix Znet)++ | 2 files

[06:17] <Geth> ¦ rakudo: More MAIN USAGE fixes

[06:17] <Geth> ¦ rakudo:

[06:17] <Geth> ¦ rakudo: - Fix string literal breakage caused by original fix[^1] to #1346

[06:17] <Geth> ¦ rakudo: - Make quote post-processing only apply when we're dealing with

[06:17] <Geth> ¦ rakudo:     a string literal, not with variable names (another reason why

[06:17] <Geth> ¦ rakudo:     I think we shouldn't do it:

[06:17] <synopsebot> RAKUDO#1346 [closed]: https://github.com/rakudo/rakudo/issues/1346 type info for named MAIN args ignores subset names

[06:17] <Geth> ¦ rakudo:     https://irclog.perlgeek.de/perl6-dev/2017-12-31#i_15636320 )

[06:17] <Geth> ¦ rakudo:

[06:17] <Geth> ¦ rakudo: [1] https://github.com/rakudo/rakudo/commit/e543c890ad58d4c707f73403

[06:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/27fbd7ab77

[06:41] <Geth> ¦ roast: 44602bd7e4 | usev6++ | S32-io/out-buffering.t

[06:41] <Geth> ¦ roast: [jvm] Skip newly added test

[06:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/44602bd7e4

[06:42] <Zoffix> Got some warts with `&list(Seq:D)` all signs point to the right answer for `list (1, 2, 3).Seq` is `((1, 2, 3).Seq)`

[06:43] <Zoffix> m: dd list $(1, 2, 3)

[06:43] <camelia> rakudo-moar 27fbd7ab7: OUTPUT: «($(1, 2, 3),)␤»

[06:43] <Zoffix> like we do here.

[06:44] <Zoffix> signs == &list and .list are not equivalent. There's no equivalence with, say, QuantHashes. Same as there's no equivalency between &hash and .hash

[06:46] <Zoffix> and HEAD~10's behaviour of &list(Seq:D) returning a Seq:D is really a quirk of `+@` slurpy with PositionalBindBlahBlah going on

[06:46] <Zoffix> m: sub (+l){ dd l }((1, 2, 3).Seq)

[06:46] <camelia> rakudo-moar 27fbd7ab7: OUTPUT: «(1, 2, 3).Seq␤»

[06:46] <Zoffix> m: sub (+l){ dd l }(42)

[06:46] <camelia> rakudo-moar 27fbd7ab7: OUTPUT: «(42,)␤»

[06:46] <Zoffix> ^ so &list(Seq:D) should work like the 42 version there and return a 1-item list.

[06:53] <Zoffix> I'm just gonna revert all I did in this area today: (a) 6.c had test that &list(Seq:D) was no-op; we judged Seq being a list as wrong and changed it, but it can be argued that Seq is *sometimes* a list due to PositionalBindFailover and in this case &list is a no-op precisely because of the failover;  (b) from user's perspective, IMO &list(Seq:D) giving a Seq is less surprising and more DWIMMI than

[06:53] <Zoffix> &list(Seq:D) giving a 1-item list with that Seq in it;   (c) I don't want to leave special Seq:D -> List handling in &list, since we don't do anything special for containerazied Positionals or QuantHashes

[06:54] <Zoffix> oh, I didn't even commit anything to rakudo

[06:55] <Geth> ¦ roast: 51d2569718 | (Zoffix Znet)++ | S03-operators/context-forcers.t

[06:55] <Geth> ¦ roast: Revert "Change incorrect &list(Seq) tests"

[06:55] <Geth> ¦ roast:

[06:55] <Geth> ¦ roast: This reverts commit 6636645ac9c0fbe96d7a9af27fe6b1af07c50429.

[06:55] <Geth> ¦ roast:

[06:55] <Geth> ¦ roast: They're right if you squint hard enough and alternatives are worse:

[06:55] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6-dev/2017-12-31#i_15636448

[06:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/51d2569718

[06:56] <Geth> ¦ roast/6.c-errata: 85ff3ca337 | (Zoffix Znet)++ | S03-operators/context-forcers.t

[06:56] <Geth> ¦ roast/6.c-errata: Revert "Change incorrect &list(Seq) tests"

[06:56] <Geth> ¦ roast/6.c-errata:

[06:56] <Geth> ¦ roast/6.c-errata: This reverts commit 6636645ac9c0fbe96d7a9af27fe6b1af07c50429.

[06:56] <Geth> ¦ roast/6.c-errata:

[06:56] <Geth> ¦ roast/6.c-errata: They're right if you squint hard enough and alternatives are worse:

[06:56] <Geth> ¦ roast/6.c-errata: https://irclog.perlgeek.de/perl6-dev/2017-12-31#i_15636448

[06:56] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/85ff3ca337

[06:58] <Geth> ¦ roast: fd95618356 | (Zoffix Znet)++ | S03-operators/context-forcers.t

[06:58] <Geth> ¦ roast: Add comment for future core devs

[06:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fd95618356

[07:09] <travis-ci> Rakudo build passed. Zoffix Znet 'More MAIN USAGE fixes

[07:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/323500240 https://github.com/rakudo/rakudo/compare/1d772dc002e2...27fbd7ab7737

[07:19] <yoleaux> AlexDaniel`: RT/GH weekly

[07:36] <Geth> ¦ rakudo: d78297fcf4 | (Zoffix Znet)++ | src/core/List.pm

[07:36] <Geth> ¦ rakudo: Revert "Fix &list(Seq:D) to produce a List"

[07:36] <Geth> ¦ rakudo:

[07:36] <Geth> ¦ rakudo: This reverts commit 1d772dc002e2740ffb744d5e210d5e15e04a1c1f.

[07:36] <Geth> ¦ rakudo:

[07:36] <Geth> ¦ rakudo: This was eventually deemed not the right course of action:

[07:36] <Geth> ¦ rakudo: https://irclog.perlgeek.de/perl6-dev/2017-12-31#i_15636448

[07:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d78297fcf4

[07:40] <Geth> ¦ roast: 79803f6322 | (Zoffix Znet)++ | S03-operators/context-forcers.t

[07:40] <Geth> ¦ roast: [v6.d REVIEW] Expand/clarify spec for numeric coercers

[07:40] <Geth> ¦ roast:

[07:40] <Geth> ¦ roast: - Test more variants of coersion

[07:40] <Geth> ¦ roast: - Remove fudge for RT#124540 ; the prefix:<-> coersion first

[07:40] <Geth> ¦ roast:     coerses and THEN negates result. The latter is deemed "using"

[07:40] <Geth> ¦ roast:     a value, and hence it's right that it explodes the Failure

[07:40] <Geth> ¦ roast:     created by the coersion. I double checked the speculations

[07:40] <synopsebot> RT#124540 [new]: https://rt.perl.org/Ticket/Display.html?id=124540 Roast rakudo skip/todo test:./S03-operators/context-forcers.t line:96 reason: 'failure modes of Str.Numeric'

[07:40] <Geth> ¦ roast:     referenced by the two test sections and don't see anything

[07:40] <Geth> ¦ roast:     saying it must preserve Failures (and it does coroborate the

[07:40] <Geth> ¦ roast:     "coerces, THEN negates" explanatiuon)

[07:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/79803f6322

[07:43] <Geth> ¦ roast: a3518f85c8 | (Zoffix Znet)++ | S03-operators/context-forcers.t

[07:43] <Geth> ¦ roast: Make extra sure potential Failures don't get exploded

[07:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a3518f85c8

[08:01] <Zoffix> Found one more LTA-ness with &list: it converts Arrays to Lists

[08:02] <Zoffix> And really, it's the +@ slurpy that's got its stuff all over the place

[08:02] <Zoffix> m: sub (+@l is raw){ dd @l }([1, (2, 3)])

[08:02] <camelia> rakudo-moar d78297fcf: OUTPUT: «(1, $(2, 3))␤»

[08:02] <Zoffix> Why did it turn that Array into a List?

[08:02] <Zoffix> m: sub (+@l){ dd @l }((1, (2, 3)))

[08:02] <camelia> rakudo-moar d78297fcf: OUTPUT: «[1, (2, 3)]␤»

[08:03] <Zoffix> here it turns a List into an Array

[08:03] <Zoffix> m: sub (+l){ dd @l }([1, (2, 3)])

[08:03] <camelia> rakudo-moar d78297fcf: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@l' is not declared␤at <tmp>:1␤------> 3sub (+l){ dd 7⏏5@l }([1, (2, 3)])␤»

[08:03] <Zoffix> and that one is same as `raw`

[08:25] <Zoffix> Opened as R#1355 and gonna put &list/.list spec on hold for now

[08:25] <synopsebot> R#1355 [open]: https://github.com/rakudo/rakudo/issues/1355 +@a/+a slurpies produce inconsistent results

[09:41] <[Tux]> Rakudo version 2017.12-76-gd78297fcf - MoarVM version 2017.12-14-g4541cf6f6

[09:41] <[Tux]> csv-test-xs-20      0.428 -  0.475

[09:41] <[Tux]> test-t --race       1.205 -  1.260

[09:41] <[Tux]> csv-ip5xs           1.141 -  1.303

[09:41] <[Tux]> test-t              2.882 -  2.933

[09:41] <[Tux]> test               11.726 - 11.882

[09:41] <[Tux]> csv-parser         12.532 - 14.391

[09:41] <[Tux]> csv-ip5xs-20       13.450 - 14.077

[09:41] <[Tux]> test-t-20 --race   18.666 - 19.257

[09:41] <[Tux]> test-t-20          51.524 - 51.675

[11:21] <gfldex> m: say so "½" ~~ /(\d+)/; say $0

[11:21] <camelia> rakudo-moar d78297fcf: OUTPUT: «False␤Nil␤»

[11:22] <gfldex> is that intentional? (If yes, it's a ENODOC trap.)

[11:33] <tbrowder> hi, #perl6-dev, anyone watching?

[11:33] <gfldex> I'm watching in waiting for answers.

[11:34] <gfldex> tbrowder: do you want to join me? :->

[11:34] <tbrowder> gfldex: hi!

[11:35] <tbrowder> i have an nqp challenge for the heavy hitters here: check my translation of sub parse_line found in p5 module Text::ParseWords (on cpan).

[11:37] <tbrowder> i'm close, but as they say in the carnival games, "no cigar"

[11:38] <tbrowder> my attempt so far is at gist https://gist.github.com/tbrowder/4a0b64e6c274229e3ae36c20aef47afd

[11:48] <gfldex> m: say "½".Rat;

[11:48] <camelia> rakudo-moar d78297fcf: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5½' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[11:48] <gfldex> is that intentional?

[11:49] <ilmari> m: say "½".unival

[11:49] <camelia> rakudo-moar d78297fcf: OUTPUT: «0.5␤»

[11:49] <ilmari> m: say "⅓".unival

[11:49] <camelia> rakudo-moar d78297fcf: OUTPUT: «0.333333␤»

[11:49] <ilmari> m: say "⅓".unival.Rat

[11:49] <camelia> rakudo-moar d78297fcf: OUTPUT: «0.333333␤»

[11:50] <ilmari> m: dd "⅓".unival.Rat

[11:50] <camelia> rakudo-moar d78297fcf: OUTPUT: «<1/3>␤»

[11:50] <ilmari> m: dd "⅓".unival

[11:50] <camelia> rakudo-moar d78297fcf: OUTPUT: «<1/3>␤»

[12:33] <lizmat> [Tux]: am I seeing this correctly?  is test-t --race now faster than csv-ip5cs ?

[12:33] <lizmat> ip5xs rather

[12:33] <lizmat> ?

[12:34] <[Tux]> ja en nee. de snelste run is sneller, maar de tweede run is trager

[12:35] <[Tux]> sorry, nl instead of en: the window is wider: the fastest run is faster, but the slowest run is slower

[12:35] <lizmat> still  :-)

[12:35] <lizmat> within noise then  :-)

[12:35] <[Tux]> yes, sure

[13:14] <gfldex> lizmat: given that next next year will start with a monday, a weekly with a little outlook of the next Perl 6-year would be nice.

[13:19] <lizmat> gfldex: not sure if Monday 1st would be the best time to look forward, not after having all that booze :-)

[13:20] <lizmat> both for the writer as well as the reader  :-)

[13:31] <El_Che> so no one else have failing tests on the latest rakudo?

[13:31] <El_Che> I wonder if it's docker related or not

[13:35] <lizmat> https://www.learningperl6.com/2017/12/31/playing-with-heaps-algorithm/  # I think brian could use some pointers

[13:35] <lizmat> like you also can use a sub in a sequence ?

[13:35] * lizmat is going afk in a mo

[14:51] <timotimo> m: my @foo = 1, 2, 3; my @bar = [ @foo ]; @foo[1] = 99; say @foo; say @bar

[14:51] <camelia> rakudo-moar d78297fcf: OUTPUT: «[1 99 3]␤[1 2 3]␤»

[14:51] <timotimo> oh, now i get it

[14:52] <timotimo> the , in there was the important bit

[14:52] <MasterDuke> Zoffix: maybe we need to add an `if $*OS.is-win` path? the reason for that patch (if i remember correctly) was so someone could copy and paste the output of the USAGE message and it would work

[14:52] <yoleaux> 05:26Z <Zoffix> MasterDuke: how come https://github.com/rakudo/rakudo/pull/1064/files converts `'` in literals to `'"'"'`  Makes it kinda hard to read in usage messages. I suspect this was to automatically add shell quoting, but that quoting doesn't apply to Windows

[14:53] <timotimo> gfldex: ½ doesn't match \d because it's not a digit, i'd say. that should go in the docs, though

[14:58] <timotimo> m: sub pretty-print(Int $seconds) { say $seconds.polymod(60*60*24, 60*60, 60, 1) Z~ " " Z~ <Days Hours Minutes Seconds> }; pretty-print(5 * 60 + 3); pretty-print(7 * 60*60*24 + 22 * 60*60)

[14:58] <camelia> rakudo-moar d78297fcf: OUTPUT: «(303 Days)␤(79200 Days)␤»

[14:58] <timotimo> haha, oh no

[14:59] <gfldex> i'm not gonna wait 79200 days!

[14:59] <timotimo> m: sub pretty-print(Int $seconds) { say $seconds.polymod(24, 60, 60, 1) Z~ " " Z~ <Days Hours Minutes Seconds> }; pretty-print(5 * 60 + 3); pretty-print(7 * 60*60*24 + 22 * 60*60)

[14:59] <camelia> rakudo-moar d78297fcf: OUTPUT: «(15 Days)␤(0 Days)␤»

[14:59] <gfldex> in fact, I plan to be dead by then :->

[15:00] <timotimo> https://docs.perl6.org/routine/polymod#class_Int - anyway, the examples here are already for dividing stuff into seconds, minutes, days, hours

[15:00] <timotimo> but i used it the wrong way around

[15:00] <timotimo> m: sub pretty-print(Int $seconds) { say $seconds.polymod(60, 60, 24) Z~ " " Z~ <Seconds Minutes Hours Days> }; pretty-print(5 * 60 + 3); pretty-print(7 * 60*60*24 + 22 * 60*60)

[15:00] <camelia> rakudo-moar d78297fcf: OUTPUT: «(3 Seconds)␤(0 Seconds)␤»

[15:00] <timotimo> but i'm not sure why it doesn't iterate over the result with the Z

[15:00] <timotimo> oh, the " " in the middle, haha

[15:01] <timotimo> m: sub pretty-print(Int $seconds) { say $seconds.polymod(60, 60, 24) Z~ (" " xx *) Z~ <Seconds Minutes Hours Days> }; pretty-print(5 * 60 + 3); pretty-print(7 * 60*60*24 + 22 * 60*60)

[15:01] <camelia> rakudo-moar d78297fcf: OUTPUT: «(3 Seconds 5 Minutes 0 Hours 0 Days)␤(0 Seconds 0 Minutes 22 Hours 7 Days)␤»

[15:01] <timotimo> m: sub pretty-print(Int $seconds) { say ($seconds.polymod(60, 60, 24) Z~ (" " xx *) Z~ <Seconds Minutes Hours Days>).grep(none(*.starts-with("0 ")) }; pretty-print(5 * 60 + 3); pretty-print(7 * 60*60*24 + 22 * 60*60)

[15:01] <camelia> rakudo-moar d78297fcf: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3s Days>).grep(none(*.starts-with("0 ")) 7⏏5}; pretty-print(5 * 60 …»

[15:01] <timotimo> m: sub pretty-print(Int $seconds) { say ($seconds.polymod(60, 60, 24) Z~ (" " xx *) Z~ <Seconds Minutes Hours Days>).grep(none(*.starts-with("0 "))) }; pretty-print(5 * 60 + 3); pretty-print(7 * 60*60*24 + 22 * 60*60)

[15:01] <camelia> rakudo-moar d78297fcf: OUTPUT: «(3 Seconds 5 Minutes)␤(22 Hours 7 Days)␤»

[15:01] <timotimo> m: sub pretty-print(Int $seconds) { say ($seconds.polymod(60, 60, 24) Z~ (" " xx *) Z~ <Seconds Minutes Hours Days>).grep(none(*.starts-with("0 "))).reverse }; pretty-print(5 * 60 + 3); pretty-print(7 * 60*60*24 + 22 * 60*60)

[15:01] <camelia> rakudo-moar d78297fcf: OUTPUT: «(5 Minutes 3 Seconds)␤(7 Days 22 Hours)␤»

[15:02] <timotimo> m: sub pretty-print(Int $seconds) { say ($seconds.polymod(60, 60, 24) X~ " " Z~ <Seconds Minutes Hours Days>).grep(none(*.starts-with("0 "))).reverse }; pretty-print(5 * 60 + 3); pretty-print(7 * 60*60*24 + 22 * 60*60)

[15:02] <camelia> rakudo-moar d78297fcf: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Only identical operators may be list associative; since 'X~' and 'Z~' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> 3y ($seconds.polymod(60, 60, 24) X…»

[15:02] <timotimo> m: sub pretty-print(Int $seconds) { say (($seconds.polymod(60, 60, 24) X~ " ") Z~ <Seconds Minutes Hours Days>).grep(none(*.starts-with("0 "))).reverse }; pretty-print(5 * 60 + 3); pretty-print(7 * 60*60*24 + 22 * 60*60)

[15:02] <camelia> rakudo-moar d78297fcf: OUTPUT: «(5 Minutes 3 Seconds)␤(7 Days 22 Hours)␤»

[15:03] <timotimo> good post, gfldex++

[17:57] <Geth> ¦ roast: jstuder-gh++ created pull request #373: Test Issue 1204 (Strip slip in quotewords)

[17:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/373

[18:10] <Zoffix> gfldex: yes "½".Rat is intentional. The ruling was the user needs to use unival() for those and only Nd were allowed. I image regex is the same

[18:11] <Zoffix> MasterDuke: yeah, adding $*DIST.is-win sounds like a plan.

[18:14] <Geth> ¦ roast: 4788582437 | (Jeremy Studer)++ | 3 files

[18:14] <Geth> ¦ roast: Test Issue 1204 (Strip slip in quotewords)

[18:14] <Geth> ¦ roast:

[18:14] <Geth> ¦ roast: This tests for bugs exhibited in

[18:14] <Geth> ¦ roast: [Issue 1204](https://github.com/rakudo/rakudo/issues/1204).

[18:14] <Geth> ¦ roast:

[18:14] <Geth> ¦ roast: Corresponds with development in Rakudo:

[18:14] <Geth> ¦ roast:     Commit ad684de383bb0c0ff051d7b0901583a9b5c2e398

[18:14] <Geth> ¦ roast:     [PR 1350](https://github.com/rakudo/rakudo/pull/1350)

[18:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4788582437

[18:14] <Geth> ¦ roast: bb44171de7 | (Zoffix Znet)++ (committed using GitHub Web editor) | 3 files

[18:15] <Geth> ¦ roast: Merge pull request #373 from jstuder-gh/issue_1204

[18:15] <Geth> ¦ roast:

[18:15] <Geth> ¦ roast: Test Issue 1204 (Strip slip in quotewords)

[18:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bb44171de7

[18:16] <Geth> ¦ roast: 22f00c7613 | (Zoffix Znet)++ | 2 files

[18:16] <Geth> ¦ roast: [v6.d REVIEW] Use more appropriate test routine

[18:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/22f00c7613

[18:53] <Geth> ¦ roast: 37133cb65a | (Zoffix Znet)++ | S03-operators/buf.t

[18:53] <Geth> ¦ roast: [v6.d REVIEW] Expand infix:<~> with Blob tests

[18:53] <Geth> ¦ roast:

[18:53] <Geth> ¦ roast: - Test both return and result of meta assign

[18:53] <Geth> ¦ roast: - Test other forms of the op

[18:53] <Geth> ¦ roast: Origs:

[18:53] <Geth> ¦ roast: https://github.com/perl6/roast/commit/a85c4b4b8c58de8d6de311a8937497c972f0bf97

[18:53] <Geth> ¦ roast: https://github.com/perl6/roast/commit/7073efe39add5c11469595c6723522990eb6d12e

[18:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/37133cb65a

[19:15] <Geth> ¦ roast: 3589f5f4c0 | (Zoffix Znet)++ | S32-list/minmax.t

[19:15] <Geth> ¦ roast: [v6.d REVIEW] remove trailing whitespace

[19:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3589f5f4c0

[19:29] <Geth> ¦ roast: ecf8c6d7fc | (Zoffix Znet)++ | S32-list/minmax.t

[19:29] <Geth> ¦ roast: [v6.d REVIEW] Unfudge min/max flattening tests

[19:29] <Geth> ¦ roast:

[19:29] <Geth> ¦ roast: The skip-fudge expects no flattening to happen with single-arg

[19:29] <Geth> ¦ roast: `[min]`/`[max]` with Range arg, but I don't see what would be a

[19:29] <Geth> ¦ roast: viable answer in such a case, other than min/maxing the Range's

[19:29] <Geth> ¦ roast: endpoints, which would merely be *an optimization*, not a functional

[19:29] <Geth> ¦ roast: difference, and IMO should not be specced. (N.B.: don't see

[19:29] <Geth> ¦ roast: <…commit message has 6 more lines…>

[19:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ecf8c6d7fc

[19:36] <Geth> ¦ rakudo: 4909430c73 | usev6++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java

[19:36] <Geth> ¦ rakudo: [jvm] Adjust logic for handling anonymous params

[19:36] <Geth> ¦ rakudo:

[19:36] <Geth> ¦ rakudo: This makes the code more similiar to what we do for MoarVM in BOOTSTRAP.nqp

[19:36] <Geth> ¦ rakudo: (following commit 88acdbb745).

[19:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4909430c73

[19:48] <Zoffix> .ask lizmat in this commit, suggestion for `$#` is `.fmt` do you remember which Perl 5 feature that covers? The only one I know is $#array which in Perl 6 would be @array.end. Wondering if I should just replace the .fmt with .end or have both of them because there's also some .fmt feature: https://github.com/rakudo/rakudo/commit/bda446566ac41af280f372c82d390a6f069c4e01

[19:48] <yoleaux> Zoffix: I'll pass your message to lizmat.

[19:52] <lizmat> https://metacpan.org/pod/perlvar#Deprecated-and-removed-variables

[19:52] <yoleaux> 19:48Z <Zoffix> lizmat: in this commit, suggestion for `$#` is `.fmt` do you remember which Perl 5 feature that covers? The only one I know is $#array which in Perl 6 would be @array.end. Wondering if I should just replace the .fmt with .end or have both of them because there's also some .fmt feature: https://github.com/rakudo/rakudo/commit/bda446566ac41af280f372c82d390a6f069c4e01

[19:52] <lizmat> "$# was a variable that could be used to format printed numbers."

[19:52] <Zoffix> lizmat++ thanks

[19:53] <lizmat> afk&

[20:52] <travis-ci> Rakudo build errored. usev6 '[jvm] Adjust logic for handling anonymous params

[20:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/323654712 https://github.com/rakudo/rakudo/compare/d78297fcf436...4909430c737d

[20:52] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, only t/02-rakudo/repl.t test file failed.

[21:08] <Geth> ¦ roast: 1e22663ad3 | (Zoffix Znet)++ | S32-exceptions/misc.t

[21:08] <Geth> ¦ roast: [v6.d REVIEW] Remove conflicting $# var test

[21:08] <Geth> ¦ roast:

[21:08] <Geth> ¦ roast: It's already tested to throw ::Perl5Var exception; don't

[21:08] <Geth> ¦ roast: test for ::Obsolete

[21:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1e22663ad3

[21:09] <Geth> ¦ rakudo: 0444a2c33f | (Zoffix Znet)++ | 2 files

[21:09] <Geth> ¦ rakudo: Awesomify `$#` var error

[21:09] <Geth> ¦ rakudo:

[21:09] <Geth> ¦ rakudo: - Throw more appropriate X::Syntax::Perl5Var instead of X::Obsolete

[21:09] <Geth> ¦ rakudo: - Suggest .fmt if it's just the `$#` var, which is an old Perl 5

[21:09] <Geth> ¦ rakudo:     variable for formatting numbers:

[21:09] <Geth> ¦ rakudo:     https://metacpan.org/pod/perlvar#Deprecated-and-removed-variables

[21:09] <Geth> ¦ rakudo: - Suggest @foo.end if it's the `$#var` var; include identifier name

[21:10] <Geth> ¦ rakudo:     in the error.

[21:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0444a2c33f

[21:11] <Geth> ¦ roast: 4967ec515b | (Zoffix Znet)++ | S32-exceptions/misc.t

[21:11] <Geth> ¦ roast: Unfudge `$#` var tests

[21:11] <Geth> ¦ roast:

[21:11] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/0444a2c33f

[21:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4967ec515b

[21:25] <Zoffix> .ask AlexDaniel perhaps the todo-fudged versions should be removed from the spec? The `$/` is a proper Perl 6 var. The rest... I dunno... the Perl5-ism errors only ever hurt me not helped me; I think the fewer of them we have the better. If I write `$+` it usually means I meant `$++` and I don't want it suggesting some crap from some other language...

[21:25] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[21:25] <Zoffix> https://github.com/perl6/roast/commit/0a1da1a8ba99020ae61cd97181bb9adddfe0b869

[21:25] <Zoffix> .ask AlexDaniel https://github.com/perl6/roast/commit/0a1da1a8ba99020ae61cd97181bb9adddfe0b869

[21:25] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[21:26] <Zoffix> m: my $x = new class Foo {}:

[21:26] <camelia> rakudo-moar 4909430c7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of C++ constructor syntax; in Perl 6 please use method call syntax␤at <tmp>:1␤------> 3my $x = new class 7⏏5Foo {}:␤»

[21:27] <Zoffix> This is the worst offender IMO, because it blocks a much more visible way to write a `.new` on a class's definition.

[21:29] <Zoffix> m: my $x = .new without class Foo {}

[21:29] <camelia> rakudo-moar 4909430c7: ( no output )

[21:48] <Geth> ¦ rakudo: 6f36b02137 | (Zoffix Znet)++ | 2 files

[21:48] <Geth> ¦ rakudo: Smartify harness automatic job number calculation

[21:48] <Geth> ¦ rakudo:

[21:48] <Geth> ¦ rakudo: - Use TEST_JOBS if we were given any

[21:48] <Geth> ¦ rakudo: - Instead of using default 6 jobs, calculate using the number of CPUs

[21:48] <Geth> ¦ rakudo:     on the box. Multiplying number by 1.3 is the optimal number of

[21:48] <Geth> ¦ rakudo:     test jobs I found a while back.

[21:48] <Geth> ¦ rakudo: - On harness6 old default was 1 by mistake; it was supposed to be 6

[21:49] <Geth> ¦ rakudo: - Default to 6 cores if our cpu-core computation fails for some reason

[21:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6f36b02137

[22:06] <Geth> ¦ roast: 7145799cce | (Zoffix Znet)++ | 2 files

[22:06] <Geth> ¦ roast: [v6.d REVIEW] Test for actual types instead of their .^names

[22:06] <Geth> ¦ roast:

[22:06] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/34ce0e9a09e2c0d76284546c900f74bae08c6e26

[22:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7145799cce

[22:11] <Geth> ¦ roast: 201865ab6f | (Zoffix Znet)++ | integration/weird-errors.t

[22:11] <Geth> ¦ roast: [v6.d REVIEW] Localize test's vars and subs

[22:11] <Geth> ¦ roast:

[22:11] <Geth> ¦ roast: So they don't affect other stuff in the file

[22:11] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/834afc7a26d38c03627c1b78c151edb0f1dbcd83

[22:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/201865ab6f

[22:13] <Geth> ¦ roast: 309c992bb5 | (Zoffix Znet)++ | S10-packages/precompilation.t

[22:13] <Geth> ¦ roast: [v6.d REVIEW] Fix typo in comment

[22:13] <Geth> ¦ roast:

[22:13] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/716b94f7ffc9fcc7f6009f1bb24cc8124cb41e59

[22:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/309c992bb5

[22:16] <Geth> ¦ roast: 438f4155ca | (Zoffix Znet)++ | S12-construction/BUILD.t

[22:16] <Geth> ¦ roast: [v6.d REVIEW] Remove trailing whitespace

[22:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/438f4155ca

[22:16] <Geth> ¦ roast: 80600333cf | (Zoffix Znet)++ | S12-construction/BUILD.t

[22:16] <Geth> ¦ roast: [v6.d REVIEW] Use more appropriate test routines

[22:16] <Geth> ¦ roast:

[22:16] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/f2105b8c408e5166420756c74122e8f232e153a3

[22:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/80600333cf

[22:20] <travis-ci> Rakudo build errored. Zoffix Znet 'Awesomify `$#` var error

[22:20] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/323668099 https://github.com/rakudo/rakudo/compare/4909430c737d...0444a2c33fb5

[22:20] <buggable> [travis build above] ✓ All failures are due to: timeout (3 failures).

[22:27] <Geth> ¦ roast: 0147de8705 | (Zoffix Znet)++ | S16-filehandles/mode.t

[22:27] <Geth> ¦ roast: [v6.d REVIEW] Improve IO.mode tests

[22:27] <Geth> ¦ roast:

[22:27] <Geth> ¦ roast: - Use our standard temp file routines for temp files

[22:27] <Geth> ¦ roast: - Shorten test descriptions

[22:27] <Geth> ¦ roast: - Use more appropriate test routines

[22:27] <Geth> ¦ roast: - Toss full-file Windows fudge. Any failures here will be dealt

[22:27] <Geth> ¦ roast:     separately, as part of resolving #320

[22:27] <synopsebot> SPEC#320 [open]: https://github.com/perl6/roast/issues/320 Windows roast failures just before 2017.09 release

[22:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0147de8705

[22:34] <Geth> ¦ roast: 3fafce04be | (Zoffix Znet)++ | S11-modules/nested.t

[22:34] <Geth> ¦ roast: [v6.d REVIEW] Remove ded comment

[22:34] <Geth> ¦ roast:

[22:34] <Geth> ¦ roast: - It seems to refer[^1] to a now-removed code

[22:34] <Geth> ¦ roast: - There's no such RT ticket

[22:34] <Geth> ¦ roast:

[22:34] <Geth> ¦ roast: [1] https://github.com/perl6/roast/commit/81819aeb84d4b0c8d3cc206be8a5834ef68befed

[22:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3fafce04be

[23:09] <Geth> ¦ roast: 899cf5e3fa | (Zoffix Znet)++ | S32-str/split-simple.t

[23:09] <Geth> ¦ roast: [v6.d REVIEW] Add missing `plan` in subtest

[23:09] <Geth> ¦ roast:

[23:09] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/c3f40c4b360c0b18364af49fa8f30a2aecd1d267

[23:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/899cf5e3fa

[23:11] <Geth> ¦ roast: 0ee6a4eb27 | (Zoffix Znet)++ | S05-transliteration/trans.t

[23:11] <Geth> ¦ roast: [v6.d REVIEW] Use more appropriate test routines

[23:11] <Geth> ¦ roast:

[23:11] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/20103df817681b81b90d36bc9018a3e654f120d6

[23:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0ee6a4eb27

[23:16] <Geth> ¦ roast: 86787bf61a | (Zoffix Znet)++ | S06-signature/types.t

[23:16] <Geth> ¦ roast: [v6.d REVIEW] Use more appropriate test routines

[23:16] <Geth> ¦ roast:

[23:16] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/3fe010131a21d7a30d2a99840aa7be484ec089ce

[23:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/86787bf61a

[23:19] <Geth> ¦ roast: 1f54bd963c | (Zoffix Znet)++ | S32-str/split.t

[23:19] <Geth> ¦ roast: [v6.d REVIEW] Use more appropriate test routines

[23:19] <Geth> ¦ roast:

[23:19] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/0d86018d749317b859e36dad1e4520950fad0e9f

[23:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1f54bd963c

[23:25] <travis-ci> Rakudo build errored. Zoffix Znet 'Smartify harness automatic job number calculation

[23:25] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/323673079 https://github.com/rakudo/rakudo/compare/0444a2c33fb5...6f36b02137fe

[23:25] <buggable> [travis build above] ☠ All failures are due to: timeout (2 failures), failed make test (1 failure). Across all jobs, 2 unique test files failed.

[23:29] <Geth> ¦ roast: 500cb47fb8 | (Zoffix Znet)++ | S12-enums/basic.t

[23:29] <Geth> ¦ roast: [v6.d REVIEW] Localize symbols in the test file

[23:29] <Geth> ¦ roast:

[23:29] <Geth> ¦ roast: To avoid conflicts in other parts of the file

[23:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/500cb47fb8

[23:33] <Geth> ¦ rakudo: e5b4f37f18 | (Zoffix Znet)++ | t/05-messages/02-errors.t

[23:33] <Geth> ¦ rakudo: Test .substr errors has right suggestsions

[23:33] <Geth> ¦ rakudo:

[23:33] <Geth> ¦ rakudo: RT#128039: https://rt.perl.org/Ticket/Display.html?id=128039

[23:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e5b4f37f18

[23:33] <synopsebot> RT#128039 [resolved]: https://rt.perl.org/Ticket/Display.html?id=128039 [BUG] Misleading suggestion in .substr error message for positive index values in Rakudo

[23:34] <Geth> ¦ roast: 55c3087001 | (Zoffix Znet)++ | S32-str/substr.t

[23:34] <Geth> ¦ roast: [v6.d REVIEW] DSETEM in .substr error

[23:34] <Geth> ¦ roast:

[23:34] <Geth> ¦ roast: DSETEM = "Do Not Spec Exact Text of Error Messages". These proved

[23:34] <Geth> ¦ roast: of little value and were interfering with readability changes

[23:34] <Geth> ¦ roast: in 6.c. Keep these in Rakudo's tests for now. If other impls need

[23:34] <Geth> ¦ roast: it, we can always do an Appendix set of tests to the spec that impls

[23:34] <Geth> ¦ roast: can optionally follow.

[23:34] <Geth> ¦ roast:

[23:34] <Geth> ¦ roast: Moved to rakudo in https://github.com/rakudo/rakudo/commit/e5b4f37f18

[23:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/55c3087001
