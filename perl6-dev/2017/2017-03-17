[00:15] <Geth> ¦ roast/6.c-errata: 80674ec44d | (Daniel Green)++ | S02-types/int-uint.t

[00:15] <Geth> ¦ roast/6.c-errata: Porting the fix in aa42c8340b to 6.c-errata

[00:15] <Geth> ¦ roast/6.c-errata:

[00:15] <Geth> ¦ roast/6.c-errata: The quick overview is that the tests for (over|under)flow and assigning

[00:15] <Geth> ¦ roast/6.c-errata: literals more than max or less than min were incorrect.

[00:15] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/80674ec44d

[13:57] <IOninja> m: (2.5..0).int-bounds.say

[13:57] <camelia> rakudo-moar 79f268: OUTPUT: «Cannot determine integer bounds␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[13:57] <IOninja> c: HEAD~10 (2.5..0).int-bounds.say

[13:57] <committable6> IOninja, ¦HEAD~10: «Cannot determine integer bounds␤  in block <unit> at /tmp/bpAPdfnMyE line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/bpAPdfnMyE line 1␤ «exit code = 1»»

[13:57] <IOninja> reallly

[13:58] <IOninja> star: (2.5..0).int-bounds.say

[13:58] <camelia> star-m 2016.10: OUTPUT: «Cannot determine integer bounds␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[13:58] <IOninja> Hm. Weird. I thought I broke this last night but looks like it was already broken

[13:58] <IOninja> or not

[13:59] <IOninja> star: (-2.5..0).int-bounds.say

[13:59] <camelia> star-m 2016.10: OUTPUT: «Cannot determine integer bounds␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[13:59] * IOninja shrugs

[13:59] <IOninja> Will take a closer look when my Internet goes back up -_-

[14:33] <IOninja> dammit.... called my ISP. Thry said there's no outage and it's likely some problem with the cable :(

[14:33] <IOninja> The earliest they can come and fix this is Monday :'(

[14:46] <[Coke]> we have a few places in town with free wifi. I might be camped out there over the weekend.

[15:37] <IOninja> Many free wifi places here too. imma just gonna tether to my for release and the rest of the time... be productive, I guess :)

[15:37] <IOninja> *to my phone

[16:51] <IOninja> The Gods of Fiber Optic have answered my payers. My Internet's back up without any intervention by the ISP's tech :)

[16:52] <geekosaur> "payers", Freudian much?

[16:52] <IOninja> :)

[19:23] <bartolin> we have multiple test files in roast where we run one test in a for loop for different input. one example is this: https://github.com/perl6/roast/blob/aa42c8340b068cf6530dfe03208327b380ebb1fd/S32-array/splice.t#L319

[19:23] <bartolin> now it sometimes happens that the test passes for most iterations but failes for a few

[19:24] <bartolin> in the example the test fails on the jvm backend for the last element of @test

[19:24] <bartolin> my question is: what's the best way to fudge in such a case?

[19:26] <bartolin> in the past I tried to pull out the problematic parts in order to be able to fudge them, like in roast commit 7e1ef3ee08

[19:27] <bartolin> but that's not something I'd like to do regularly. on the other hand I'd like to avoid spectest failures caused by such known problems

[19:42] <Geth> ¦ roast: c4f712d9de | usev6++ | S32-io/seek.t

[19:42] <Geth> ¦ roast: [JVM] Fudge failing tests

[19:42] <Geth> ¦ roast:

[19:42] <Geth> ¦ roast: It looks like seeking works ok, but there is a problem with

[19:42] <Geth> ¦ roast: LEAVE on rakudo-j. I had to put the subtests in extra blocks

[19:42] <Geth> ¦ roast: in order to fudge them properly.

[19:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c4f712d9de

[20:01] <gfldex> m: multi sub foo(Failure){}; multi sub foo($_){.say}; dir('.', :recursive, :f, :!d)».&foo

[20:01] <camelia> rakudo-moar 79f268: OUTPUT: «".cpanm".IO␤".local".IO␤".npm".IO␤".perl6".IO␤".perlbrew".IO␤".rcc".IO␤".ssh".IO␤"Perlito".IO␤"evalbot".IO␤"log".IO␤"nqp-js".IO␤"p1".IO␤"p2".IO␤"perl5".IO␤"std".IO␤".bash_history".IO␤".bashrc".IO␤"mbox".IO␤".lesshst".I…»

[20:01] <IOninja> bartolin: what about fudging a bit more than necessary; all tests in the group or something?

[20:01] <gfldex> IOninja: I found myself wanting to do this ^^^

[20:02] <IOninja> r: dd [ [|'I ❤️ Perl 6'.comb], 10, 6 ]

[20:02] <camelia> rakudo-moar 79f268: OUTPUT: «[["I", " ", "❤️", " ", "P", "e", "r", "l", " ", "6"], 10, 6]␤»

[20:02] <camelia> ..rakudo-jvm fb4f16: OUTPUT: «[["I", " ", "❤", "️", " ", "P", "e", "r", "l", " ", "6"], 10, 6]␤»

[20:02] <IOninja> uh-oh

[20:02] <bartolin> IOninja: well, but then I'd get some passed TODO tests -- that's annoying as well

[20:03] <IOninja> m: dd 'I  Perl 6'.comb

[20:03] <camelia> rakudo-moar 79f268: OUTPUT: «("I", " ", " ", "P", "e", "r", "l", " ", "6").Seq␤»

[20:03] <bartolin> of course the could be skipped, but that feels a bit like overkill

[20:03] <IOninja> ugh my terminal is playing tricks on me

[20:03] <bartolin> *they

[20:04] <IOninja> bartolin: not sure what to suggest. I'm probably the author of that test and I use these loops so to not dupe the test and its description all the time.

[20:05] <IOninja> So if letting the test fail is bad and fudging too many is bad, that's the only alternative I see and rather not :(

[20:05] <IOninja> That example is small, but many examples have dozens of test cases in an array all tested with a single line of a test, instead of dozens of test lines

[20:06] <IOninja> bartolin: actually, in that particular case, looks like the failure is due to .comb on JVM being busted with unicode chars

[20:06] <timotimo> yo uknow you can "emit" code for a given backend with the fudger?

[20:07] <bartolin> timotimo: yes, but I don't see how that would help in this case. I'prefer to run those tests

[20:08] <Geth> ¦ roast: 600028af7f | (Zoffix Znet)++ | S32-array/splice.t

[20:08] <Geth> ¦ roast: Toss Unicode char that's problematic on JVM

[20:08] <Geth> ¦ roast:

[20:08] <Geth> ¦ roast: Has no relation to the test itself.

[20:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/600028af7f

[20:09] <timotimo> @fudges = False xx $num-of-tests; #?jvm emit @fudges[10..*] = True

[20:10] <bartolin> IOninja: thanks, that was another alternative to fudging

[20:11] <bartolin> timotimo: I have to think about that a bit :-)

[20:12] * bartolin was aware of emit, but didn't consider to use it that way

[20:12] <timotimo> :)

[20:30] <Geth> ¦ roast: 3e8da11435 | usev6++ | S32-list/squish.t

[20:30] <Geth> ¦ roast: [JVM] Run passing test that was masked by 'emit'

[20:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3e8da11435

[20:30] <bartolin> timotimo++ # making me look into emit

[20:31] <timotimo> yay

[22:53] <Geth> ¦ rakudo/nom: 16ef21c162 | (Zoffix Znet)++ | src/core/Range.pm

[22:53] <Geth> ¦ rakudo/nom: Fix regression in Range.int-bounds

[22:53] <Geth> ¦ rakudo/nom:

[22:53] <Geth> ¦ rakudo/nom: Yesterday's fix[^1] to the method assumed an .Int on endpoints will be

[22:53] <Geth> ¦ rakudo/nom: False only if the conversion returns a Failure, but it's possible to

[22:53] <Geth> ¦ rakudo/nom: construct a non-int Range with `0` as one of the end-points, whose

[22:53] <Geth> ¦ rakudo/nom: .Int is False.

[22:53] <Geth> ¦ rakudo/nom:

[22:53] <Geth> ¦ rakudo/nom: Fix by adding additional type checks that .Int's are Int

[22:53] <Geth> ¦ rakudo/nom:

[22:53] <Geth> ¦ rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/79f2681004224108b2acd18bec2

[22:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/16ef21c162

[22:54] <Geth> ¦ roast: c8767e2b93 | (Zoffix Znet)++ | S02-types/range.t

[22:54] <Geth> ¦ roast: Test Range.int-bounds works on non-int Range with 0 endpoint

[22:54] <Geth> ¦ roast:

[22:54] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/16ef21c162

[22:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c8767e2b93

[23:25] <Geth> ¦ roast/6.c-errata: 2edc8f282d | (Elizabeth Mattijsen)++ | 4 files

[23:25] <Geth> ¦ roast/6.c-errata: Handle fallout of List.reverse -> Seq migration

[23:25] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/2edc8f282d

[23:28] <IOninja> Well, now I feel a little justified in complaining about t/fudgeandrun being moved to roast instead of rakudo. It's not present in 6.c-errata...

[23:28] <IOninja> "fudgeandrun has moved to roast but does not seem to be there. Perhaps updating roast (t/spec) will help."

[23:29] <IOninja> I hope all these people who are too lazy to run roast from a rakudo checkout are being helped by the change

[23:29] <IOninja> </grumpy>

[23:30] <Geth> ¦ roast/6.c-errata: 7b0c5a77a3 | (Zoffix Znet)++ | fudgeandrun

[23:30] <Geth> ¦ roast/6.c-errata: Add fudgeandrun script to 6.c-errata branch

[23:30] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/7b0c5a77a3

[23:36] <Geth> ¦ roast/6.c-errata: 4c16a7e405 | (Zoffix Znet)++ | S09-multidim/methods.t

[23:36] <Geth> ¦ roast/6.c-errata: Fix plan count

[23:36] <Geth> ¦ roast/6.c-errata:

[23:36] <Geth> ¦ roast/6.c-errata: The cherry-pick[^1] of the List.reverse change[^2] missed that the

[23:36] <Geth> ¦ roast/6.c-errata: plan was reduced by 2 tests.

[23:36] <Geth> ¦ roast/6.c-errata:

[23:36] <Geth> ¦ roast/6.c-errata: [1] https://github.com/perl6/roast/commit/2edc8f282d381f2dad9c98eeb

[23:36] <Geth> ¦ roast/6.c-errata: [2] https://github.com/perl6/roast/commit/93bd430e1a7b62ac6a78ff583

[23:36] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/4c16a7e405
