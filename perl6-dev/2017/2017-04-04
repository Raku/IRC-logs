[00:32] <samcv> ok now https://cry.nu/coverage/ has resizeable and movable boxes at least

[00:33] <samcv> well almost

[00:35] <samcv> yeah now it works. had to make sure jquery used https due to my very tight security settings for my domain

[04:56] <samcv> .tell lizmat can you add my grant to the p6weekly?

[04:56] <yoleaux2> samcv: I'll pass your message to lizmat.

[06:01] <samcv> ok so i made an overview of moarvm coverage for Roast https://cry.nu/coverage/roast.html you can see here

[06:09] <samcv> line by line here https://cry.nu/coverage/roast/

[06:50] <lizmat> .

[06:50] <yoleaux2> 04:56Z <samcv> lizmat: can you add my grant to the p6weekly?

[06:50] <lizmat> samcv: link ?

[06:56] <lizmat> http://stackoverflow.com/questions/43199427/why-doesnt-perl-6s-try-handle-a-non-zero-exit-in-shell   # comments anyone ?

[07:18] <[Tux]> This is Rakudo version 2017.03-123-gcb27bce74 built on MoarVM version 2017.03-88-g21fc7a22

[07:18] <[Tux]> csv-ip5xs        3.103

[07:18] <[Tux]> test            12.504

[07:18] <[Tux]> test-t           4.958 - 5.119

[07:18] <[Tux]> csv-parser      13.280

[07:43] <lizmat> samcv: found it and added it

[07:46] <samcv> ok thanks :-)

[07:53] <Geth> ¦ rakudo/nom: 0672082651 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[07:53] <Geth> ¦ rakudo/nom: Fix problem introduced by 38b341aec and 928a406a8e

[07:53] <Geth> ¦ rakudo/nom:

[07:53] <Geth> ¦ rakudo/nom: - spotted by perlawhirl++

[07:53] <Geth> ¦ rakudo/nom: - if the last key checked was wrong, we didn't see it

[07:53] <Geth> ¦ rakudo/nom: - turned out use of exhaustion of the iterator is not a good way to do it

[07:53] <Geth> ¦ rakudo/nom: - so revert to returning out of the inner loop

[07:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0672082651

[08:17] <lizmat> m: say Mu (elem) set()   #hmmmm

[08:17] <camelia> rakudo-moar 067208: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[08:19] <lizmat> m: dd set(Mu)

[08:19] <camelia> rakudo-moar 067208: OUTPUT: «set(Mu)␤»

[08:19] <lizmat> m: dd Mu.Set

[08:19] <camelia> rakudo-moar 067208: OUTPUT: «No such method 'Set' for invocant of type 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[08:19] <lizmat> hmmm

[08:26] <lizmat> so, should Mu be allowed as part of a Set / Bag / Mix ?

[08:26] <lizmat> aka, should we able to coerce Mu to a Set/Bag/Mix ?

[08:27] <lizmat> m: dd Mix(Mu)  # works

[08:27] <camelia> rakudo-moar 067208: OUTPUT: «Mix(Mu)␤»

[08:27] <lizmat> m: dd Mu.Mix  # doesn't

[08:27] <camelia> rakudo-moar 067208: OUTPUT: «No such method 'Mix' for invocant of type 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[08:28] <lizmat> I guess this all boils down:

[08:28] <lizmat> m: dd (1|2|3).Mix   # does this create 3 Mixes with 1 value, or 1 Mix with 1 Junction

[08:28] <camelia> rakudo-moar 067208: OUTPUT: «any((1=>1).Mix, (2=>1).Mix, (3=>1).Mix)␤»

[08:43] <lizmat> afk for a few hours&

[09:24] <|Tux|> Did IO signatures change?

[09:24] <|Tux|> Cannot resolve caller AUTOGEN(Text::CSV: IO::Handle, Str, Str, Str); none of these signatures match:

[09:24] <|Tux|> (Text::CSV $: IO:D $io, *%p --> Bool)

[09:24] <|Tux|> (Text::CSV $: IO:D $io, %c, *%_ --> Bool)

[09:24] <|Tux|> (Text::CSV $: IO:D $io, Capture $c, *%_ --> Bool)

[09:24] <|Tux|> (Text::CSV $: IO:D $io, @fld, *%_ --> Bool)

[09:24] <|Tux|> (Text::CSV $: IO:D $io, *@fld, *%_ --> Bool)

[09:24] <|Tux|> in block <unit> at t/20_file.t line 14

[09:24] <|Tux|> looks like quite a significant change

[09:25] <samcv> what did you try to call on an IO::Handle?

[09:25] <samcv> i think you can call it on the path but not the handle. as i read

[09:25] <|Tux|> my $fh = open $tf20, :w or die "$tf20: $!";

[09:25] <|Tux|> ok (!$csv.print ($fh, "abc", "def\007", "ghi"), "print bad character");

[09:26] <samcv> hmm

[09:27] <samcv> don't see anything wrong with that code

[09:27] <samcv> is $tf20 an IO object?

[09:28] <|Tux|> no, $fh is

[09:28] <|Tux|> $tf20 is a file name

[09:28] <samcv> it's faling at the second line?

[09:28] <samcv> not the first?

[09:28] <|Tux|> $csv.print ($fh, ...) causes the mismatch

[09:29] <samcv> ah ok

[09:29] <|Tux|> the first line is needed for you to see what $fh is

[09:29] <samcv> ah

[09:29] <|Tux|> with this change almost all IO related CSV test fail

[09:29] <samcv> you're trying to print to the filehandle?

[09:30] <|Tux|> yep

[09:30] <samcv> that. seems like a wrong way to call it

[09:30] <samcv> $fh.print(blah here)

[09:30] <|Tux|> it used to work for many years

[09:30] <samcv> interesting it let you do that before

[09:30] <|Tux|> NAH!

[09:30] <|Tux|> $csv.print ($fh, ...) makes thge CSV object use $fh to print to

[09:31] <|Tux|> printing to CSVB in not the same as plain printing

[09:31] <samcv> but what is the underlying IO thing done inside the csv object?

[09:32] <samcv> looking at your code

[09:32] <|Tux|> https://github.com/Tux/CSV/blob/master/lib/Text/CSV.pm#L1493

[09:38] <samcv> i see some changes to IO::Handle here http://rakudo.org/

[09:39] <samcv> so you're giving it an already opened handle. which it then calls print on?

[09:40] <samcv> do you need to change it to IO::Handle not IO?

[09:40] <samcv> or maybe it shouldn't have broken @Zoffix ?

[09:40] <samcv> i remember something bout inherentence changing

[09:41] <samcv> i think handles don't inherit from paths anymore or something (i could be totally wrong)

[09:41] <samcv> bisectable6, say IO ~~ IO::Handle

[09:41] <bisectable6> samcv, On both starting points (old=2015.12 new=0672082) the exit code is 0 and the output is identical as well

[09:41] <bisectable6> samcv, Output on both points: «False»

[09:42] <samcv> bisectable6, say IO::Handle ~~ IO

[09:42] <bisectable6> samcv, On both starting points (old=2015.12 new=0672082) the exit code is 0 and the output is identical as well

[09:42] <bisectable6> samcv, Output on both points: «False»

[09:42] * |Tux| submits change that makes all tests pass again, but I sincerely wonder how much will break in other places

[09:44] <|Tux|> pushed

[09:51] <timotimo> https://travis-ci.org/timo/json_fast/builds/218282663 - kinda mysterious? perhaps recent changes to rakudo broke it?

[10:02] <Zoffix> |Tux|: IO:D is not a thing anymore

[10:03] <|Tux|> I saw that, but isn't that going to break a lot of stuff?

[10:03] <|Tux|> I already pushed the fix for CSV, but I guess I'm not the only one that used it like that

[10:03] <timotimo> we can find out with ecosystem-all-modules

[10:03] <|Tux|> FWIW, I agree to the change. It makes a lot of sense

[10:04] <jnthn> m: say shell('/usr/bin/false').WHAT

[10:04] <camelia> rakudo-moar 067208: OUTPUT: «shell is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub shell at src/RESTRICTED.setting line 15␤  in block <unit> at <tmp> line 1␤␤»

[10:04] <jnthn> c: HEAD say shell('/usr/bin/false').WHAT

[10:04] <committable6> jnthn, ¦HEAD(0672082): «shell is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub shell at src/RESTRICTED.setting line 15␤  in block <unit> at /tmp/mgK62t6xIg line 1␤ «exit code = 1»»

[10:04] <jnthn> arrghhh...

[10:04] <jnthn> Can we please have a bot that isn't using the restricted setting...

[10:05] <timotimo> no, CSV is the only module which uses IO:D or anything IO:*, except for method calls like .IO:d

[10:05] <timotimo> which ... huh?

[10:05] <timotimo> m: say "foobar".IO:d

[10:05] <camelia> rakudo-moar 067208: OUTPUT: «"foobar".IO␤»

[10:05] <timotimo> that's not right, is it?

[10:06] <timotimo> like in tony-o/perl6-green bin/green: last if $dir.IO:d;

[10:06] <jnthn> Anyway, the reason that the try doesn't work out is shell returns a Proc

[10:06] <jnthn> And so the try block returns the Proc

[10:07] <jnthn> And that is then sunk, producing the exception outside of the try block

[10:07] <Zoffix> |Tux|: dunno if you read the weekly but there are two upgrade notices that went out recently: http://rakudo.org/2017/04/02/upgrade-information-for-changes-due-to-io-grant-work/ and http://rakudo.org/2017/04/03/part-2-upgrade-information-for-changes-due-to-io-grant-work/

[10:08] <Zoffix> |Tux|: as for break stuff, well, the use of IO:D is broken as is IMO. It accepts IO::Path, IO::Handle, and IO::Socket*; all of which have vastly different interfaces. role IO did not provide any of the methods (other than semi-broken `umask`)

[10:08] <|Tux|> I read them most of the time, but I've been on ski-holiday :)

[10:09] * |Tux| is in catching-up mudus

[10:40] <masak> timotimo: I suspect the .IO method gets a :d named parameter, which it discards

[10:40] <Zoffix> [Coke]: FWIW, when commenting on stuff, the page the user sees is kinda borked: http://i.imgur.com/zjOVhgs.png

[10:41] <masak> m: class C { method IO(:$d) { say $d ?? "yup" !! "naye" } }; C.IO:d

[10:41] <camelia> rakudo-moar 067208: OUTPUT: «naye␤»

[10:41] <masak> I... guess not.

[10:41] <timotimo> m: class C { method IO(:$d) { say $d ?? "yup" !! "naye" } }; C.IO():d

[10:41] <camelia> rakudo-moar 067208: OUTPUT: «yup␤»

[10:42] <masak> right, but it didn't say that... :)

[10:42] <masak> so how *is* it parsed and evaluated?

[10:42] * masak wishes he had a source-to-ast converter right now

[10:48] <jnthn> --targert=ast :)

[10:50] <Zoffix> --target=optimize # more accurate

[10:52] <jnthn> True :)

[10:56] <Zoffix> m: class C { method IO(:$d) { say $d ?? "yup" !! "nope" } }; C.IO :d

[10:56] <camelia> rakudo-moar 067208: OUTPUT: «yup␤»

[11:02] <Geth> ¦ rakudo/nom: 5b7ef3e89a | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[11:02] <Geth> ¦ rakudo/nom: Make (cont)/(elem) 25% to 5x faster for QuantHashes

[11:02] <Geth> ¦ rakudo/nom:

[11:02] <Geth> ¦ rakudo/nom: - based on a 10 element Set/Bag

[11:02] <Geth> ¦ rakudo/nom: - no coercion needed for Bags/Mixes

[11:02] <Geth> ¦ rakudo/nom: - rewrite with nqp where possible

[11:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5b7ef3e89a

[11:44] <Zoffix> samcv: looks like you're breaking barriers with your grant. Looking at past grants, the only other women who did a grant were Audrey Tang and Tina Connolly, but they have other people listed on the grant as well. Yours is the first solo one!

[11:44] <Zoffix> samcv++ Amelia Earhart of Perl hacking :)

[11:48] <dogbert17> Zoffix: although I'm a bit late ... happy birthday

[11:49] <dogbert17> you should treat yourself to some new cool FPS game

[11:50] <moritz> Tina Connolly the author?

[11:50] <moritz> but yes, samcv++

[12:05] <Zoffix> dogbert17: thanks.

[12:05] <Zoffix> moritz: yeah, the author

[12:06] <moritz> Zoffix: wow, I heard/read some of her fiction, never knew she was involved with perl at some point

[12:08] <Zoffix> :)

[12:36] <[Coke]> zoffix: I have no idea how to fix that, but will open a ticket.

[12:38] <[Coke]> (in review) ermergerd, --targert

[12:39] <[Coke]> ZOMG SO MUCH SPAM

[12:39] <[Coke]> (in mt comment admin)

[12:42] <Zoffix> [Coke]: don't have that page in front of me any more, but by the looks of the breakage, it looks like a forgotten close tag somewhere.

[12:43] <[Coke]> ok. I opened a tpf ticket for it so we don't lose it.

[12:44] <[Coke]> argh. marking mt comments as spam... doesn't delete them.

[12:45] <perlpilot> samcv++

[12:56] <[Coke]> and now this round of TPF grants have comments. Please poke me if your comment gets stuck in moderation.

[12:57] <Zoffix> \o/

[13:22] <Geth> ¦ rakudo/nom: 49807eb5dc | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[13:22] <Geth> ¦ rakudo/nom: Make Setty (|) Setty about 25x faster

[13:22] <Geth> ¦ rakudo/nom:

[13:22] <Geth> ¦ rakudo/nom: - make infix:<(|)> a multi

[13:22] <Geth> ¦ rakudo/nom: - add zero and 1 argument handling for infix:<(|)>

[13:22] <Geth> ¦ rakudo/nom: - add candidate for handling Setty (|) Setty

[13:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/49807eb5dc

[13:34] <Zoffix> ZOFVM: Files=1231, Tests=133144, 114 wallclock secs (20.93 usr  3.50 sys + 2351.28 cusr 165.12 csys = 2540.83 CPU)

[13:48] <Geth> ¦ rakudo/nom: 75c3f29100 | (Zoffix Znet)++ | src/core/Failure.pm

[13:48] <Geth> ¦ rakudo/nom: Awesomify 'unhandled Failure in DESTROY' warning

[13:48] <Geth> ¦ rakudo/nom:

[13:48] <Geth> ¦ rakudo/nom: I've seen this warning many times, but it never really clicked

[13:48] <Geth> ¦ rakudo/nom: why I was seeing it. Awesomify the warning, to suggest how the

[13:48] <Geth> ¦ rakudo/nom: user can get rid of this warning.

[13:48] <Geth> ¦ rakudo/nom:

[13:48] <Geth> ¦ rakudo/nom: Fixes RT#130857: https://rt.perl.org/Ticket/Display.html?id=130857

[13:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/75c3f29100

[13:57] <Zoffix> Cool. If we add 3 more test files, we'll have 1234 test files in roast :D

[13:58] <Zoffix> m: say 234567-133144

[13:58] <camelia> rakudo-moar 49807e: OUTPUT: «101423␤»

[13:58] <Zoffix> And 1101423 more tests to have 1234567 tests :)

[13:59] <Zoffix> .oO( the real trick is sticking that many tests into just 3 files! )

[13:59] <Zoffix> m: say 567890-133144

[13:59] <camelia> rakudo-moar 49807e: OUTPUT: «434746␤»

[14:01] <Zoffix> Though we can add 3 more files with 434746 tests in them that makes the stresstest run 9 seconds longer to make it read  "Files=1234, Tests=567890, 123 wallclock secs"

[14:10] <Zoffix> dogbert17: the spectre of Zoffix also sent a PR fixing code that was never valid: https://github.com/supernovus/exemel/pull/43

[14:12] <Zoffix> huggable: known IO breakage killstreak :is: 3

[14:12] <huggable> Zoffix, Added known IO breakage killstreak as 3

[14:13] <Zoffix> huggable: known IO breakage killstreak :is: 3 (doc test suite; Text::CSV; XML.pm6)

[14:13] <huggable> Zoffix, Added known IO breakage killstreak as 3 (doc test suite; Text::CSV; XML.pm6)

[14:57] <Zoffix> Wow, US is really going nuts with travel to it: https://www.wsj.com/articles/trump-administration-considers-far-reaching-steps-for-extreme-vetting-1491303602

[14:58] <Zoffix> On an off chance they catch a terrorist who didn't wipe their phone before comming in? heh

[14:58] <Zoffix> At least that gives me hope YAPC::NA will be moved to Canada :)

[15:11] <moritz> or Mexico :-)

[15:13] <Zoffix> Too far and too hot :P

[15:21] <[Coke]> Zoffix: getting an IO-related error in make xtest on docs; need to update my rakudo?

[15:21] <Zoffix> [Coke]: what's the error?

[15:21] <[Coke]> No such method 'spurt' for invocant of type 'IO::Handle+{File::Temp::File::Temp::AutoUnlink}' in block <unit> at t/pod-htmlify.t line 58

[15:22] <Zoffix> [Coke]: yeah, need to upgrade.

[15:22] <Zoffix> Or change that line from .spurt to .path.spurt

[15:24] <Zoffix> [Coke]: FWIW, I'm not running xtest with my changes ATM to save time, but will run it when I'm done and will fix all the errors, if any.

[15:25] <Zoffix> (when done = Apr. 17th)

[15:44] <[Coke]> ok.

[16:13] <AlexDaniel> “Can we please have a bot that isn't using the restricted setting...” yes, I'm working on it…

[16:14] <AlexDaniel> gonna take a little bit though

[16:14] <AlexDaniel> like… weeks…

[16:15] <Zoffix> AlexDaniel++

[16:15] <AlexDaniel> by the way, there's a little feature I implemented yesterday… not sure if there's a need to announce it though

[16:16] <AlexDaniel> because I'm not really expecting anybody to use it on purpose, but

[16:16] <AlexDaniel> say 42

[16:16] <evalable6> AlexDaniel, rakudo-moar 75c3f2910: OUTPUT: «42»

[16:17] <AlexDaniel> thing is, I've parsed the whole irc history and came up with some rules on when this is actually some code without m: rather than just somebody starting his message with “say”

[16:17] <Zoffix> say, that's a brilliant idea!

[16:17] <Zoffix> hah, OK :D

[16:18] <AlexDaniel> it matches ≈1400 messages out of which 5-10 are not really code, but very code-like

[16:18] <Zoffix> :)

[16:18] <AlexDaniel> but that's good enough I guess

[16:18] <Zoffix> say "42"

[16:18] <evalable6> Zoffix, rakudo-moar 75c3f2910: OUTPUT: «42»

[16:18] <Zoffix> put "42"

[16:18] <Zoffix> dd "42"

[16:18] <AlexDaniel> well let's see if somebody ever used put or dd…

[16:22] <masak> say, that's interesting

[16:22] <masak> say... can I trick it into running my sentence? :)

[16:22] <AlexDaniel> if you try hard enough, yes

[16:22] <masak> say "heh"

[16:22] <evalable6> masak, rakudo-moar 75c3f2910: OUTPUT: «heh»

[16:22] <masak> say I try hard enough

[16:23] <AlexDaniel> you can also trick it into not running your code :)

[16:23] <masak> ...it seems pretty good at first blush

[16:23] <AlexDaniel> say pi

[16:23] <AlexDaniel> say π

[16:23] <masak> AlexDaniel: I'm fine with false positives/negatives, as long as neither ends up being annoying/noisy :)

[16:23] <AlexDaniel> the last one I was kinda expecting to work…

[16:23] <masak> AlexDaniel++

[16:23] <masak> "in 2017, we developed technology to allow us to skip the `m: ` prefix..." :P

[16:24] <AlexDaniel> I wonder if people now will skip it on purpose…

[16:24] <masak> "we called it Code Auto-Detection™"

[16:24] <masak> say 1 + 2 + 3 + 4

[16:24] <evalable6> masak, rakudo-moar 75c3f2910: OUTPUT: «10»

[16:24] <masak> say "that's a distinct possibility

[16:24] <evalable6> masak, Full output: https://gist.github.com/cc37bcf657330d807821fb3596cfae99

[16:24] <evalable6> masak, rakudo-moar 75c3f2910: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/Zb8LtXGIIL␤Unable …»

[16:24] <masak> wohoo!

[16:25] <masak> I got something strange out of it :P

[16:25] <AlexDaniel> well, that's clearly some code

[16:25] <AlexDaniel> that's its normal output :D

[16:25] <masak> yeah, that's a pretty reasonable response

[16:25] <masak> say ...

[16:25] <masak> :)

[16:25] <Zoffix> say …

[16:25] <AlexDaniel> I know that it may get triggered if you use too many smileys

[16:25] <evalable6> Zoffix, rakudo-moar 75c3f2910: OUTPUT: «(exit code 1) Potential difficulties:␤    Apparent sequence operator parsed as stubbed fun…»

[16:25] <evalable6> Zoffix, Full output: https://gist.github.com/bc767e500a39c2fc32f79edd4ec4a610

[16:25] <Zoffix> hah

[16:26] <AlexDaniel> say what? :O :O :O amazing!!!!! :)

[16:26] <evalable6> AlexDaniel, Full output: https://gist.github.com/9b20ab5c918dc6deb3d274699a2381e0

[16:26] <evalable6> AlexDaniel, rakudo-moar 75c3f2910: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/W5BW6j8CYk␤Unsuppo…»

[16:26] <AlexDaniel> say what? :O :O :O amazing!!!!!

[16:26] <AlexDaniel> so yeah, smileys suck.

[16:28] <AlexDaniel> Zoffix: I see only one interesting message there: https://gist.github.com/Whateverable/d7b5dc7c59ba23fbfd49d73cbdb31332

[16:28] <AlexDaniel> Zoffix: dd is more interesting, but not interesting enough: https://gist.github.com/Whateverable/7962a426ed53f9f62335f1fd7de003dd

[16:28] <AlexDaniel> (by the way, this output is coming out of a new bot)

[16:30] <AlexDaniel> you give it a perl 6 regex, it gets back to you in a minute with this kind of gist :)

[16:31] <Zoffix> Where is `defined` defined?

[16:31] <Zoffix> SourceBaby can't find it neither under &defined nor under &prefix:<defined>

[16:36] <Zoffix> in Mu: https://github.com/rakudo/rakudo/blob/75c3f29/src/core/Mu.pm#L846

[16:36] <Zoffix> Stupid robot

[16:36] <Zoffix> s: &defined

[16:36] <SourceBaby> Zoffix, Something's wrong: ␤ERR: Cannot resolve caller sourcery(Sub+{<anon|63810960>}); none of these signatures match:␤    ($thing, Str:D $method, Capture $c)␤    ($thing, Str:D $method)␤    (&code)␤    (&code, Capture $c)␤  in block <unit> at -e line 6␤␤

[16:36] <Zoffix> m: say &defined ~~ Callable

[16:36] <camelia> rakudo-moar 75c3f2: OUTPUT: «False␤»

[16:36] <Zoffix> interesting

[16:50] <Geth> ¦ rakudo/nom: 87fe800d1d | TimToady++ | src/Perl6/Grammar.nqp

[16:50] <Geth> ¦ rakudo/nom: don't die on 'for $x()', only on 'for $x ()'

[16:50] <Geth> ¦ rakudo/nom:

[16:50] <Geth> ¦ rakudo/nom: We'll issue the looks-like-P5 error only if it would be two terms in a row

[16:50] <Geth> ¦ rakudo/nom: anyway, so there should be no false positives.  (Yes, P5 allows one to use

[16:50] <Geth> ¦ rakudo/nom: no space there, but people almost always put the space there regardless, so

[16:50] <Geth> ¦ rakudo/nom: merely catching most of the errors is plenty good enough for a heuristic.)

[16:50] <Geth> ¦ rakudo/nom:

[16:50] <Geth> ¦ rakudo/nom: Fixes #131076

[16:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/87fe800d1d

[16:53] <Zoffix> \o/

[16:54] <timotimo> i'm glad for that

[17:04] <AlexDaniel> I actually had exactly the same fix in a local branch somewhere

[17:04] <AlexDaniel> but then imagined how people are going to complain that it is valid p5 code even without the space

[17:04] <AlexDaniel> so never got to finishing it…

[17:05] * Zoffix wouldn't think many would've complained :)

[17:05] <timotimo> helps to be toady

[17:06] * geekosaur did say something about that the first time it came up :p

[17:06] <TimToady> "The programmer did something stupid, and we couldn't catch it, so that somehow becomes our fault, not theirs?"  :)

[17:06] <geekosaur> (and I did think about the whitespace issue but I kinda hate significant whitespace in that context as it is)

[17:08] * Zoffix wouldn't shed any tears if all the X::Obsolete warnings would go away

[17:08] <Zoffix> m: say "x" =~ 42

[17:08] <camelia> rakudo-moar 75c3f2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of =~ to do pattern matching; in Perl 6 please use ~~␤at <tmp>:1␤------> 3say "x" =~7⏏5 42␤»

[17:08] <Zoffix> Except maybe that one.

[17:09] <timotimo> it'd be much more useful if it stringified 42 and assigned it to "x" there!

[17:10] <Zoffix> :)

[17:12] <Zoffix> awww.. you can't have space before a postfix?

[17:12] <Zoffix> My dream lies in shatters

[17:12] <timotimo> only unspace

[17:12] <Zoffix> m: sub postfix:<or-fail> ($v) { 42 }; sub foo {}; dd foo() or-fail

[17:12] <camelia> rakudo-moar 87fe80: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "-" in expression "-fail" in sink context (line 1)␤Nil␤Failed␤  in block <unit> at <tmp> line 1␤␤»

[17:18] <Zoffix> m: sub postfix:<♥or-fail> ($v) { 42 }; sub foo {}; dd foo ♥or-fail

[17:18] <camelia> rakudo-moar 87fe80: OUTPUT: «42␤»

[17:18] <Zoffix> Ahhh

[17:18] <Zoffix> My dream is back in one piece :D

[17:24] <Zoffix> AlexDaniel: using ∨ in my code right now and I'm 100% -1 for it being a Mexican "or". It's just like "v"

[17:27] <Zoffix> if foo ∨-bar {}

[17:27] <Zoffix> Valid code :D

[17:28] <ilmari> huh, no ¬ operator?

[17:28] <ilmari> m: say ¬ True

[17:28] <camelia> rakudo-moar 87fe80: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 ¬ True␤Bogus postfix␤at <tmp>:1␤------> 3say 7⏏5¬ True␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤   …»

[17:28] <Zoffix> .oO( make a module :P )

[17:29] <ilmari> m: sub prefix:<¬>($x) { ! $x }; say ¬ True

[17:29] <camelia> rakudo-moar 87fe80: OUTPUT: «False␤»

[17:29] <[Coke]> m: ?now, do .WHAT

[17:29] <camelia> rakudo-moar 87fe80: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "?" in expression "?now" in sink context (line 1)␤»

[17:30] <Zoffix> Actually, you probably can't make a module.

[17:30] <Zoffix> Same reason you couldn't do the ≤ as a module

[17:30] <Zoffix> Well, *can* but it'd have to be a slang.

[17:32] <Zoffix> "===SORRY!=== MVMArray: Can't pop from an empty array"

[17:32] <Zoffix> I dream of the day when my programming in Perl 6 won't involve bugs.

[17:32] <Zoffix> Unless I want to, I mean :)

[17:37] <Zoffix> m: sub postfix:<!> is equiv(&infix:<orelse>) { $^v }; 42!

[17:37] <camelia> rakudo-moar 87fe80: OUTPUT: «===SORRY!===␤MVMArray: Can't pop from an empty array␤»

[17:37] <TimToady> m: module NottyNice { sub prefix:<¬>($x) is export { ! $x }; }; import NottyNice; say ¬ True

[17:37] <camelia> rakudo-moar 87fe80: OUTPUT: «False␤»

[17:37] <TimToady> should work fine in a module

[17:38] <Zoffix> s: &trait_mod, \(sub {}, :equiv)

[17:38] <SourceBaby> Zoffix, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Undeclared routine:␤    trait_mod used at line 6␤␤

[17:38] <Zoffix> TimToady: what about short-curcuiting and chaining with and?

[17:38] <Zoffix> Ah, I see conversation got changed to prefix ¬

[17:38] <Zoffix> Never mind :)

[17:39] <Zoffix> s: &trait_mod:<is>, \(sub {}, :equiv)

[17:39] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/87fe800/src/core/traits.pm#L107

[17:51] <Zoffix> m: sub postfix:<!> is prec({:assoc("list")}) { $^v }; 42!

[17:51] <camelia> rakudo-moar 87fe80: OUTPUT: «===SORRY!===␤MVMArray: Can't pop from an empty array␤»

[17:51] <Zoffix> seems the error is about making postfix ops list assoc

[17:52] <Zoffix> m: sub infix:<!> is prec({:assoc("list")}) ($, $) { }; 42!42

[17:52] <camelia> rakudo-moar 87fe80: OUTPUT: «5===SORRY!5===␤Expression needs parens to avoid gobbling block␤at <tmp>:1␤------> 3sub infix:<!> is prec({:assoc("list")}7⏏5) ($, $) { }; 42!42␤Missing block (apparently claimed by expression)␤at <tmp>:1␤------> 3sub infix:<!> is p…»

[17:52] <Zoffix> *sigh*

[17:52] <Zoffix> m: sub infix:<!> ($, $) is prec({:assoc("list")}) { }; 42!42

[17:52] <camelia> rakudo-moar 87fe80: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3$, $) is prec({:assoc("list")}) { }; 42!7⏏0542␤    expecting any of:␤        infix␤        infix stopper␤»

[17:53] <Zoffix> (╯°□°）╯︵ ┻━┻

[17:59] <Zoffix> Does it make sense for prefix/postfix ops to be list associative?

[18:00] <Zoffix> No idea where src/vm/moar/HLL/Backend.nqp is

[18:00] <Zoffix> But on line 1099 is pops from an array that ain't got things for infix and postfix ops.

[18:02] <Zoffix> No one's around

[18:03] * Zoffix just files this bug

[18:05] <Zoffix> https://rt.perl.org/Ticket/Display.html?id=131099

[18:11] <TimToady> list associativity makes no sense on a unary operator, since there can only be one of it, and associativity is about how two or more operators relate when precedence doesn't decide

[18:12] <TimToady> we can stretch the notion of associativity slightly to say how to parse things like ++$x++, but that's about it

[18:13] <Zoffix> OK cool.

[18:16] <Zoffix> I'll take care of that ticket then (gonna throw). Is there a saner way to check if an op is prefix/postfix than checking if .name.starts-with('postfix:') or .name.starts-with('prefix:') ?

[18:21] <TimToady> how 'bout only allowing it on 'infix'?

[18:21] <Zoffix> OK

[18:49] <Zoffix> Staring at the test run, wondering why the test I added doesn't show up in the output...

[18:49] <Zoffix> Turns out I made the fix on one box, but added the test on a completely different one!

[18:59] <Zoffix> m: 42.?name.starts-with: 'foo'; # sad kitty is sad

[18:59] <camelia> rakudo-moar 87fe80: OUTPUT: «Invocant requires an instance of type Cool, but a type object was passed.  Did you forget a .new?␤  in block <unit> at <tmp> line 1␤␤»

[19:00] <Zoffix> would be sweet to make .? shortcurcuit the method chain or something. It's not very useful in its current form

[19:02] <Zoffix> m: sub x {}; dd &x.^lookup("name")

[19:02] <camelia> rakudo-moar 87fe80: OUTPUT: «ForeignCode <anon> = ForeignCode.new␤»

[19:02] <Zoffix> Do all Routines have .name?

[19:03] <Zoffix> the method I mean

[19:03] <Zoffix> Oh

[19:03] <Zoffix> m: dd Routine.^lookup('name')

[19:03] <camelia> rakudo-moar 87fe80: OUTPUT: «ForeignCode <anon> = ForeignCode.new␤»

[19:03] <Zoffix> \o/

[19:03] <moritz> m: say Routine.can('name')

[19:03] <camelia> rakudo-moar 87fe80: OUTPUT: «(<anon>)␤»

[19:04] * moritz too slow

[19:04] <Zoffix> :)

[19:21] <Zoffix> *sigh* what's its problem? Tried like 4 different variations and getting this non-descript error :/ https://gist.github.com/zoffixznet/27711f3129f5ce93ddeb7f6ac1565212

[19:22] <Zoffix> (my diff with the change is at the bottom)

[19:26] <Zoffix> Wonder if some core ops is trying to set a list assoc and my check for whether its an infix op is sucky

[19:27] <samcv> hello perl 6 people

[19:28] <Zoffix> \o

[19:29] <Zoffix> Hm. Nope. Changed it to `note` instead of `die` and it's still unhappy :/

[19:30] <lizmat> Zoffix: is this a current issue in HEAD ?

[19:31] <Zoffix> lizmat: yeah. Well, there's no issue without my change.

[19:32] <Zoffix> well, almost head. There's a 1-line addition in traits.pm I have locally; but it passes the stresstest

[19:34] <lizmat> so what's different from HEAD that it causes you grief ?

[19:34] <lizmat> ah, at the bottom

[19:35] <Zoffix> Yeah

[19:35] * Zoffix tries rewriting that in nqp ops

[19:37] <Zoffix> Hm still throws: https://gist.github.com/zoffixznet/d74b81e7e95bb93df8c3584b136d3c78

[19:37] * Zoffix tries deleting things to find what breaks

[19:37] <lizmat> Zoffix: it would be quite possible that at that point in the setting, it doesn't know about Str.starts-with

[19:39] <lizmat> yeah, Str.starts-with doesn't exist until line 12619 in the setting, and the trait lives at line 180

[19:39] <lizmat> so, rewriting with nqp ops *should* work

[19:40] <lizmat> note that that code runs at compile time

[19:40] <lizmat> so it cannot be late bound

[19:42] <Zoffix> Well, this crashes too, so I'm guessing it's the attempt to look up stuff in the hash? https://gist.github.com/zoffixznet/c150dfde2c4b495773b7db24657631a0

[19:44] <Zoffix> It's probably not a Perl 6 hash

[19:47] <Zoffix> This dies too. I give up: https://gist.github.com/zoffixznet/e652bd5b99e991dac508d5eb3ef916ac

[19:49] <lizmat> Zoffix: if you do s/note/nqp::say./ ?

[19:50] <lizmat> because I don't think "note" is known at that time either

[19:50] <Zoffix> Gonna try in ~1hr. Gotta relocate

[19:51] <lizmat> ack

[19:53] <Geth> ¦ rakudo/nom: f9f0883c6c | (Zoffix Znet)++ | src/core/traits.pm

[19:53] <Geth> ¦ rakudo/nom: Delete .prec<assoc> in is equiv() trait

[19:53] <Geth> ¦ rakudo/nom:

[19:53] <Geth> ¦ rakudo/nom: This mirrors what is tighter and is looser do. Though they leave

[19:53] <Geth> ¦ rakudo/nom: other bits (like `thunky`) as is, so the whole thing is a bit iffy.

[19:53] <Geth> ¦ rakudo/nom:

[19:53] <Geth> ¦ rakudo/nom: Fixes RT131099: https://rt.perl.org/Ticket/Display.html?id=131099

[19:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f9f0883c6c

[19:53] <Geth> ¦ roast: 75f42755ec | (Zoffix Znet)++ | S06-traits/precedence.t

[19:53] <Geth> ¦ roast: Test `is equiv` does not set .prec<assoc>

[19:53] <Geth> ¦ roast:

[19:53] <Geth> ¦ roast: RT#131099: https://rt.perl.org/Ticket/Display.html?id=131099

[19:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/75f42755ec

[19:53] <Zoffix> (that was the previous commit I already had; not the one I was strugglign to compile)

[19:59] <samcv> ok. perl6 wizards. how can i determine which command line argument to the perl6 executable will actually be a file

[19:59] <lizmat> Zoffix: if nqp::can($r,'prec') && $r.prec<assoc> && $r.prec<assoc> eq 'list'

[19:59] <samcv> since usually it's the 1st one, but i fthere are options passed to it. then it can be other ones

[19:59] <samcv> is is almost always the LAST one?

[20:00] <lizmat> hmmm... not working either  :-(

[20:00] <samcv> at least as far as it is used in roast?

[20:11] <Zoffix> samcv: wouldn't it be any arg, if you consider args passed to the program too. Sometimes there isn't a file at all, like -e, or when reading the program from stdin

[20:12] <timotimo> yo Zoffix, remember when JSON::Fast took a long time and a lot of memory to parse that one json document you had?

[20:12] <Zoffix> timotimo, and now it fails tests? :p

[20:13] <timotimo> only when tests are run by zef for some reason

[20:13] * Zoffix read #moarvm

[20:13] <Zoffix> Hm.

[20:13] <lizmat> Zoffix: $r.prec('assoc') eq "list"

[20:15] <Zoffix> timotimo, what about zef --/tap-harness test .

[20:15] <timotimo> one sec

[20:15] <timotimo> i'm just recompiling rakudo

[20:15] <Zoffix> lizmat++ thanks

[20:16] <Zoffix> lizmat, I don't get why that's that way tho :s

[20:17] <lizmat> not sure what is causing the run error of the BEGIN block

[20:17] <Zoffix> m: dd &[orelse].prec('assoc')

[20:17] <camelia> rakudo-moar f9f088: OUTPUT: «"list"␤»

[20:17] <Zoffix> m: dd &[orelse].prec

[20:17] <camelia> rakudo-moar f9f088: OUTPUT: «{:assoc("list"), :prec("c="), :thunky(".b")}␤»

[20:17] <Zoffix> hm. OK

[20:17] <lizmat> but passing it as a parameter, will return '' if it doesn't exist

[20:17] <lizmat> so you don't need to lookup twice

[20:18] <Zoffix> Cool. That'll do the job. Thanks.

[20:18] <lizmat> yw  :-)

[20:21] <timotimo> Zoffix: with that flag it passes

[20:22] <Zoffix> timotimo: and without it fails?

[20:23] <Zoffix> Looks like a job for TAP::Harness Fixer Person!

[20:23] <Zoffix> :)

[20:23] <Zoffix> Hoe can I repro it?

[20:24] <timotimo> https://gist.github.com/timo/da1ed310c0375a5dc8b23cb2ffc89002

[20:24] <timotimo> should be able to just "zef install JSON::Fast"

[20:26] <timotimo> ok 12 - JSON string «[\n...[11]» parsed

[20:26] <timotimo> this is the one that it doesn't find for some reaso

[20:38] * Zoffix looks

[20:39] <Zoffix> everything passes on 2017.03-101-ga5800a1

[20:39] <Zoffix> m: say $*PERL.compiler.version

[20:39] <camelia> rakudo-moar f9f088: OUTPUT: «v2017.03.129.gf.9.f.0883␤»

[20:39] * Zoffix upgrades

[20:40] <Zoffix> timotimo: the failure's in https://github.com/timo/json_fast repo right now, right?

[20:41] <samcv> Zoffix, well yeah i know about -e. i only really care about ones that are asking for files

[20:42] <samcv> idk maybe i can do some path detection if something has a './' or a slashes in it

[20:42] <samcv> to see if i'm missing any coverage for roast

[20:42] <Zoffix> samcv: perl6 foo.p6 -some -args -to -the script   that works, right?

[20:42] <Zoffix> So it can be anywhere

[20:43] <samcv> ok but how to i figure it out from inside the perl6 sh script

[20:43] <Zoffix> dunno

[20:43] <samcv> maybe try the 1st one, and if it has `.t` or `.pl` `.p6` or something otherwise try the next one

[20:44] <timotimo> Zoffix: indeed, it's the master branch

[20:44] <samcv> or actually better may be, to just see if it starts with a `-`

[20:44] <samcv> and if it does go to the next one

[20:44] <samcv> and if it's -e just put it into a randomly generated -e profile

[20:45] <samcv> so i can make sure to save it all

[20:45] <AlexDaniel> Zoffix: renders very similarly to “v” here as well

[20:45] <AlexDaniel> Zoffix: ¬ ∧ ⊻ are very distinguishable though

[20:46] <Zoffix> samcv: perl6 -M Test script.p6 works

[20:46] <samcv> also i have all theese getout-RANDOM-RANDOM i think the Util.pm creates

[20:46] <Zoffix> AlexDaniel: I'd have a hard time remembering which is which tho :P

[20:46] <samcv> well it says `my $fnbase = 'getout';` so i think that's wheere all those files are coming from

[20:47] <samcv> why it gotta be so complicated XD

[20:47] <Zoffix> samcv: yeah, I have them sometimes as well. I think it's `is_run` that creates them. FWIW, I added make-test-file on the weekened that shoves these into $*TMPDIR so perhaps all such uses could be replaced vOv

[20:47] <samcv> so i think those profiles should be added to the roast profiles

[20:47] <samcv> even thoug they're not associated with one of the /t/ files

[20:47] <lizmat> decommute from Amsterdam.PM meeting&

[20:47] <samcv> well i'm sure they are somewhere?

[20:48] <AlexDaniel> Zoffix: yeah, well… maybe this has to be moved to questionable section

[20:48] <samcv> but it saves profiles based on the 1st argument to the perl6 script

[20:48] <samcv> basically `t/blah/blah.t` will create coverage/t/blah/blah.t.profraw

[20:48] <samcv> or whatever directory/file it is

[20:49] <Zoffix> timotimo: `zef test .` passes for me :/

[20:49] <Zoffix> On rakudo's head now

[20:49] <Zoffix> 2017.03-129-gf9f0883

[20:50] <Zoffix> timotimo: do you have TAP::Harness installed by any chance?

[20:50] <samcv> maybe we can somehow find a way to associate those is-run files with certain .t files

[20:50] <Zoffix> timotimo: zef uninstall TAP::Harness

[20:50] <samcv> err getout or something

[20:50] <samcv> since they are ran under a certain .t file

[20:51] <Zoffix> samcv: make-test-file does. Includes the test file name and line number in file's name

[20:51] <Zoffix> though I guess if is_run were to use them, then those would be wrong :(

[20:51] <samcv> yea

[20:52] <samcv> also where is make-test-file

[20:52] <samcv> i can't find it by grepping /t/ in rakudo

[20:52] <Zoffix> samcv: t/spec/packages/Test/Util.pm

[20:52] <Zoffix> samcv: zef uninstall TAP::Harness

[20:52] <Zoffix> oops

[20:52] <Zoffix> samcv: https://github.com/perl6/roast/blob/master/packages/Test/Util.pm#L237-L265

[20:52] <samcv> oh ok

[20:55] <Zoffix> timotimo: yeah, with ecosystem's TAP::Harness I get same failures as yours. Get rid of it, so zef uses core one

[20:57] <samcv> m: say $*PROGRAM

[20:57] <camelia> rakudo-moar f9f088: OUTPUT: «"<tmp>".IO␤»

[20:58] <samcv> m: say $*PROGRAM-NAME

[20:58] <camelia> rakudo-moar f9f088: OUTPUT: «<tmp>␤»

[20:59] <timotimo> !!!> Found no matching candidates to uninstall

[21:00] <Zoffix> dafuq

[21:01] <Zoffix> timotimo: well, I can't repro the issue on HEAD zef, HEAD rakudo, and HEAD JSON::Fast

[21:01] <Zoffix> When that module is not installed.

[21:02] <Zoffix> timotimo: here first pass; then I install that module and get failures: https://gist.github.com/zoffixznet/9c77efe428726e60d362a524f60d2a26

[21:11] <timotimo> oh

[21:11] <timotimo> i spelled it Tap instead of TAP

[21:12] <timotimo> soooo

[21:12] <timotimo> will someone open an issue on the TAP::Harness repo?

[21:12] <timotimo> anyway, dinner time real soon

[21:12] <Zoffix> hah :D

[21:13] <Zoffix> timotimo: I did open the issue, but one that says something along the lines of "having two tap harnesses sucks"

[21:14] <Zoffix> I kinda mentioned the module was broken to the author, but it was while debating the suckiness of TAP spec in another github repo

[21:15] <Zoffix> And the author was of the opinion that not escaping backslashes is dumb (but we do it now, so his module is broken).

[21:16] <timotimo> oh, huh

[21:16] <timotimo> i didn't know TAP::Harness isn't good

[21:17] <Zoffix> Well, here's that convo: https://github.com/TestAnything/testanything.github.io/pull/36#issuecomment-271145559

[21:17] <Zoffix> IMO it's pretty fucking stupid. All major TAP harnesses and TAP producers escape and handle escapes. Not speccing that feature is ignoring reality.

[21:17] <timotimo> AFK

[21:25] <Zoffix> $work gave me a free cake for bday. Anyone want a piece?

[21:25] <samcv> hmm it seems somewhere in roast is passing

[21:25] <Zoffix> 2,300 calories. All for me :/

[21:25] <samcv> "-e ''" as the 1st command line argument

[21:26] <samcv> that's not two seperate command line arguments but only one. idk maybe that's a purposeful test. wish i knew where it came from

[21:26] <samcv> argh

[21:27] <samcv> also how do you open files with perl 6 that start with a `-`

[21:28] <samcv> or is it impossible....

[21:28] <Zoffix> samcv: S17-procasync/basic.t:110:$pc = Proc::Async.new($*EXECUTABLE, "-e ''"); # It taps a warning, but it is safe to catch.

[21:28] <samcv> kk

[21:29] <Zoffix> there are three more places actually... Run grep -nFR 'e '\'''\'''

[21:29] <Zoffix> well, 1 more, since other two use shell

[21:29] <samcv> hmm

[21:29] <samcv> k

[21:34] <AlexDaniel> Zoffix: I'd eat it :S

[21:35] <Zoffix> /dcc AlexDaniel $rest-of-cake

[21:36] <AlexDaniel> thanks! But… I think I just need a robot that would make it for me

[21:38] <samcv> is it okay if i alter this https://github.com/perl6/roast/blob/master/S19-command-line-options/06-dash-rxtrace.t

[21:38] <samcv> cause it's failing when i use coverage because it takes stderr

[21:46] <Zoffix> samcv: alter how?

[21:48] <Zoffix> samcv: it's not part of 6.c-errata; so I think it's fine to change it, as long as it still covers the original bug

[21:48] <samcv> like this https://gist.github.com/samcv/401e93e49375366981e7d9b36cbc4593

[21:49] <samcv> yeah it does. and i tested it and made sure it failed and acted identically when it wasn't under profile

[21:49] <samcv> like if i change the say "hello" thing to note, it does output stderr and fails with exact same characters as before change. also works under profile as well

[21:50] <Zoffix> samcv: yeah, but maybe add that env var to README so people don't wonder what it's about

[21:50] <samcv> which readme

[21:50] <samcv> of roast?

[21:53] <samcv> hmm or maybe i can be super fancy and strip it out INSIDE the profiling script.

[21:53] <Zoffix> YEAH

[21:53] <Zoffix> I mean yeah

[21:53] <Zoffix> :)

[21:53] <samcv> the call is coming from inside the house

[21:54] <samcv> YEAH

[21:55] <timotimo> aynway

[21:55] <timotimo> hooray for JSON::Fast!

[21:55] <samcv> yay is it more fast?

[21:57] <timotimo> well, yeah?

[21:57] <timotimo> remember when i pasted the new time + memory use?

[21:57] <samcv> yep

[21:58] <samcv> missed the memory part but looked now. so a little bit of memory and a ton of speed improvement

[21:59] <Zoffix> timotimo++ awesome improvement

[21:59] <timotimo> um

[21:59] <timotimo> no, only 1/10 of the memory

[22:00] <samcv> Zoffix, will it seems to have worked. the uh changing it inside the executable

[22:00] <samcv> though maybe i can be cool and like. save that error to a log somewhere

[22:01] <Zoffix> I finally managed to compile my list fix. I didn't use .prec('assoc') 'cause that would've made it die AFTER mixing in the role, which I found iffy, but using nqp ops all the way, including nqp::atkey() made it compile finally

[22:01] <samcv> so i can actually see it (since prove makes it so i can't see it, though can see it if i execute the scritp normally)

[22:01] <Zoffix> bah t/spec/S06-traits/precedence.rakudo.moar .......................... Dubious, test returned 1 (wstat 256, 0x100)

[22:01] <Zoffix> screw you, computer!

[22:03] <Zoffix> oh, it's the test I added today.

[22:11] <Zoffix> what am I doing with my life...

[22:27] <Zoffix> New compilation errors. Yeye

[22:27] <Zoffix> This is stupid.

[22:27] * Zoffix stashes the diff for another day

[22:28] <Zoffix> Time for....

[22:28] <Zoffix> IO NINJAING \o\ -o )o) o-

[22:29] <AlexDaniel> \o/

[22:31] <timotimo> yeah!

[22:52] <samcv> ok i installed llvm 5.0 maybe profiling will have magical cool othings in it? I can hope. we will see

[22:53] <samcv> wow there's so many extra columns to the report overview

[22:56] <timotimo> whoa

[22:56] <samcv> oh my dear lord

[22:56] * samcv brain asplodes

[22:59] <samcv> wooo and you can link lines in html by line number

[22:59] <samcv> too cool

[22:59] <samcv> uploading now

[23:00] <samcv> as well as a "jump to first uncovered line" link at the very top of each file :O

[23:00] <samcv> amazing https://cry.nu/coverage/cov-index.html

[23:02] <timotimo> that's cool!

[23:02] <samcv> amazingly cool

[23:02] <samcv> and css style we could change if we want

[23:10] <samcv> i can do `llvm-cov show help` and get like some list, which most of them i don't care about

[23:11] <samcv> then there's like --help-list-hidden which shows some crazy number of things

[23:11] <samcv> most of them idk why i would ever need to do

[23:11] <samcv> 133 options

[23:12] <timotimo> wow

[23:13] <samcv> see timotimo https://gist.github.com/samcv/99a8edb933e3a470a8fd59eb3400236d

[23:13] <timotimo> yeah no

[23:13] <Zoffix> damn, now spurt is doing my head in.

[23:13] <timotimo> those are for *everything*

[23:13] <samcv> pretty much

[23:14] <Zoffix> And it's quite ironic that a day after I removed the desk-flip emoji from my keyboard hot key, I want to use it.

[23:14] <Zoffix> m: spurt "foo", "meoweeeee".encode; spurt "foo", "bar"; slurp("foo").say

[23:14] <camelia> rakudo-moar f9f088: OUTPUT: «spurt is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub spurt at src/RESTRICTED.setting line 17␤  in block <unit> at <tmp> line 1␤␤»

[23:15] <Zoffix> I'm getting "baroweeeee" as output :/

[23:15] <samcv> also timotimo there's -help-hidden and -help-list-hidden

[23:15] <timotimo> oh, spurt doesn't truncate, eh?

[23:15] <Zoffix> .... because I'm dumb

[23:16] * Zoffix spots the bug

[23:16] <timotimo> we probably want it to, though

[23:16] <samcv> oh i see. --help-hidden shows them grouped in subtype

[23:16] <Zoffix> it does. It's the New and Improved™ version :)

[23:16] <samcv> timotimo, i hope they have spectesting for all of their 1000 options :)

[23:16] <timotimo> they must have dominion over about a gajillion different machines

[23:17] <samcv> they are confusing

[23:19] <samcv> i'm sure there's no person on earth who knows whet EVERY one of those options does

[23:19] <samcv> they seem super specialized

[23:22] <ugexe> any other perl6 devs going to the perl toolchain summit (nine, lizmat)?

[23:23] * Zoffix is afraid of traveling to other countries, so no

[23:23] <Zoffix> ugexe: are you gonna be there?

[23:23] <ugexe> yeah

[23:24] <Zoffix> ugexe: Would be nice to figure out a security policy: what are the procedures when we discover a security issue.

[23:24] <Zoffix> I think lizmat is gonna be there too

[23:24] <Zoffix> tool chain summit

[23:24] * lizmat just got back from Amsterdam

[23:24] <lizmat> but yes, Toolchain summit, yes, going to be there

[23:25] <Zoffix> <Zoffix> Would be nice to figure out a security policy: what are the procedures when we discover a security issue.

[23:26] <lizmat> we can learn from p5p in that respect :-)

[23:27] <samcv> oh timotimo and it's nice. the coverage report doesn't list my full hd directory either on the new reports

[23:27] <samcv> woo. this is great.

[23:27] <timotimo> \o/

[23:27] <samcv> still need to learn how to combine libmoar.so and moar reports....

[23:27] <samcv> ugh

[23:28] <Zoffix> m: dd utf8.new(73,32,226,153,165,32,80,101,114,108,32,54) eqv Buf[uint8].new(73,32,226,153,165,32,80,101,114,108,32,54)

[23:28] <camelia> rakudo-moar f9f088: OUTPUT: «Bool::False␤»

[23:28] <Zoffix> m: dd utf8.new eqv Buf[uint8].new

[23:28] <camelia> rakudo-moar f9f088: OUTPUT: «Bool::False␤»

[23:28] <Zoffix> Is it supposed to be this way?

[23:30] <Zoffix> m: with "/tmp/bar42".IO { dd "foo".encode; .spurt: "foo".encode; dd .slurp("foo", :bin) }

[23:30] <camelia> rakudo-moar f9f088: OUTPUT: «utf8.new(102,111,111)␤Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[23:30] <Zoffix> huh

[23:30] <timotimo> Zoffix: yeah, utf8 is different from Buf, it's more like Blob

[23:31] <Zoffix> timotimo: Buf is Blob trho

[23:31] <Zoffix> m: with "/tmp/bar42".IO { dd "foo".encode; .spurt: "foo".encode; dd .slurp(:bin) }

[23:31] <camelia> rakudo-moar f9f088: OUTPUT: «utf8.new(102,111,111)␤Buf[uint8].new(102,111,111)␤»

[23:31] <timotimo> yeah, so why would they be eqv anyway?

[23:31] <timotimo> what's more important, though, is that the utf8 type claims the contents are valid utf8

[23:32] <Zoffix> m: utf8.new(102,111,111)[1] = 42

[23:32] <camelia> rakudo-moar f9f088: OUTPUT: «Cannot modify an immutable Int␤  in block <unit> at <tmp> line 1␤␤»

[23:32] <Zoffix> OK, I think I get it. Thanks

[23:32] <timotimo> yeah, buf is read-write, utf8 is read-only

[23:35] * lizmat is tired and goes to bed

[23:36] <timotimo> gnite lizmat!

[23:36] <Zoffix> night
