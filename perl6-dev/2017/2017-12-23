[00:30] <Geth> ¦ rakudo: 8943f7c546 | (Zoffix Znet)++ | t/08-performance/01-iterators.t

[00:30] <Geth> ¦ rakudo: Add ticket reference to test

[00:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8943f7c546

[01:07] <Geth> ¦ roast: 41f2ce6459 | (Zoffix Znet)++ | S32-io/dir.t

[01:07] <Geth> ¦ roast: Remove outdated comments

[01:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/41f2ce6459

[01:13] <Geth> ¦ roast: b41e6a0e61 | (Zoffix Znet)++ | S32-io/dir.t

[01:13] <Geth> ¦ roast: [v6.d REVIEW] Remove bogus fudge/adjust test

[01:13] <Geth> ¦ roast:

[01:13] <Geth> ¦ roast: 1) .dirname returns the dir portion of the path IO::Path was

[01:13] <Geth> ¦ roast:     created with and dir("t/") would have that as simply "t".

[01:13] <Geth> ¦ roast:     It's up to the user to absolutify the paths if they need to,

[01:13] <Geth> ¦ roast:     so test's expectation for .dirname to contain $*CWD is incorrect

[01:13] <Geth> ¦ roast: 2) Fudge says Rakudo doesn't add '/' to $*CWD, which seems perfectly

[01:13] <Geth> ¦ roast:     fine to me. Also, merely stringifying an IO::Path object and

[01:13] <Geth> ¦ roast:     appending a string with a dir isn't the right way to obtain

[01:13] <Geth> ¦ roast:     a child of a path. .child/.add are for that.

[01:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b41e6a0e61

[01:15] <JRaspass> AlexDaniel: I've bumped code-golf.io to the latest git version of rakudo after the combinations slow down in 2017-12 so hopefully all your blog post examples will be nice 'n' fast now :-)

[01:15] <AlexDaniel> oh that's very nice of you!

[01:16] <JRaspass> It's the least I could do, ta for all the publicity!

[01:21] <AlexDaniel> JRaspass: at least I can sleep well now looking at “12 Days of Christmas” task :D

[01:22] <JRaspass> oh darn, did you beat me? :-P

[01:22] <AlexDaniel> by 10 characters

[01:23] <JRaspass> ooo, guess I shan't be sleeping then

[01:23] <Geth> ¦ roast: e10e1fd400 | (Zoffix Znet)++ | S32-list/permutations.t

[01:23] <Geth> ¦ roast: [v6.d REVIEW] Test return data directly

[01:23] <Geth> ¦ roast:

[01:23] <Geth> ¦ roast: Instead of converting it to another type and stringifying.

[01:23] <Geth> ¦ roast:

[01:23] <Geth> ¦ roast: Partial origs:

[01:23] <Geth> ¦ roast: https://github.com/perl6/roast/commit/d64d2eb3af9ab8b2ab63170c3bcd74944438a40f

[01:23] <Geth> ¦ roast: https://github.com/perl6/roast/commit/ff44772ed2f020461b3028aa7aaaf2d982b9cbf2

[01:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e10e1fd400

[01:24] <AlexDaniel> at least. Some of the solutions I can't be bothered unless somebody does better :)

[01:24] <AlexDaniel> to improve*

[01:26] <AlexDaniel> JRaspass: I never thought that you follow the progress so carefully. The advent post I can understand, but the combinations slow down? :)

[01:27] <JRaspass> yeah im a lurker on this room, I just thought id finally install an IRC client and say hi

[01:28] <AlexDaniel> 🙋

[01:28] <JRaspass> who lacks emoji fonts it seems, what's that?

[01:28] <AlexDaniel> u: 🙋

[01:28] <unicodable6> AlexDaniel, U+1F64B HAPPY PERSON RAISING ONE HAND [So] (🙋)

[01:28] <JRaspass> hah, nice

[01:29] <JRaspass> apologies if im going off topic in this room, im hardly a perl6 dev

[01:30] <AlexDaniel> it's quiet today, so no probs :)

[01:30] <JRaspass> its the early hours of the morning over here, ill crash soon

[01:32] <AlexDaniel> JRaspass: oh, that too. I should be doing that also, maybe. https://irclog.perlgeek.de/perl6-dev/2017-12-16#i_15588284

[01:32] <JRaspass> ah you're west of me, that explains that weird hour github issues i get from you ;-)

[01:32] <teatime> lol, how do you read your graph?

[01:33] <AlexDaniel> teatime: open the image at 100%, there are some explanations on top left

[01:33] <teatime> you've been tracking it for a long time

[01:34] <AlexDaniel> not even 10 years. We'll get there. The question is how I'd be making the graph then :(

[01:34] <AlexDaniel> even today it's a bit too wide, and each day is 1 pixel anyway

[01:34] <AlexDaniel> although… 4k monitors?

[01:34] <Geth> ¦ roast: 6a595ec7af | (Zoffix Znet)++ | S07-hyperrace/hyper.t

[01:34] <Geth> ¦ roast: [v6.d REVIEW] Simplify test code

[01:34] <Geth> ¦ roast:

[01:34] <Geth> ¦ roast: And don't create objects we never use.

[01:34] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/2212bf233585e9b88d77dab75cc39e0c908d2cc4

[01:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6a595ec7af

[01:39] <timotimo> AlexDaniel: i think it should be "for you to have some fun"

[01:39] <timotimo> i wonder if we've had swearwords like "fucking" in the calendar posts until now

[01:40] <timotimo> oh, wow, it's in that song

[01:40] <timotimo> and it's not likely that it was supposed to be "pumpkin pie"?

[01:41] <AlexDaniel> yeah, the post is about fooling around so the language is kinda part of it

[01:42] <AlexDaniel> we did have a swearword at least once… I wonder who used it /o\

[01:43] <AlexDaniel> timotimo: fwiw feel free to edit it

[01:43] <AlexDaniel> the post I mean

[01:46] <timotimo> cool

[01:46] <timotimo> i wasn't aware of most of the tricks in that post

[01:48] <timotimo> m: for ^0x10FFFF { next without .unival; say .chr.codes / .unival.codes }

[01:48] <evalable6> timotimo, rakudo-moar 8943f7c54: OUTPUT: «(signal SIGHUP) 0.333333␤0.333333␤0.333333␤0.333333␤0.333333␤0.333333␤0.333333␤0.333333␤0.…»

[01:48] <evalable6> timotimo, Full output: https://gist.github.com/509c8f742ba157d0fae6da2b5bb686c4

[01:48] <timotimo> ah, yes. not terribly helpful :)

[01:49] <timotimo> m: ^0x10FFFF .map({ next without .unival; .chr.codes / .unival.codes }).unique.say

[01:49] <evalable6> timotimo, rakudo-moar 8943f7c54: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[01:49] <timotimo> m: ^0x10FFFF .hyper.map({ next without .unival; .chr.codes / .unival.codes }).unique.say

[01:49] <evalable6> timotimo, rakudo-moar 8943f7c54: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[01:50] * teatime never realized he could use a space like that instead of wrapping the range in ()

[01:50] <AlexDaniel> teatime: also, that may save one character I think!

[01:51] <timotimo> with a proper :batch and :degree it runs in 18 seconds on my machine

[01:51] <timotimo> (0.333333 1 0.25 0.666667 0.166667 0.2 0.5 0.142857 0.125 0.111111 0.076923 0.090909)

[01:53] <timotimo> (兆 0.076923 1000000000000) (𖭠 0.090909 10000000000) (𖭡 0.076923 1000000000000)

[01:54] <timotimo> with the littlest bit of knowledge about utf8 i could have used something much faster than .chr.codes

[01:58] <Geth> ¦ roast: 6315201cc9 | (Zoffix Znet)++ | S07-hyperrace/hyper.t

[01:58] <Geth> ¦ roast: [v6.d REVIEW] Simplify / test actual data

[01:58] <Geth> ¦ roast:

[01:58] <Geth> ¦ roast: - Get rid of useless variables

[01:58] <Geth> ¦ roast: - Break up overly long lines

[01:58] <Geth> ¦ roast: - Test actual return values instead of stringified versions

[01:58] <Geth> ¦ roast:

[01:58] <Geth> ¦ roast: Plan decreased due to some tests wrapped in subtests; no tests

[01:59] <Geth> ¦ roast: were removed.

[01:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6315201cc9

[02:00] <Hotkeys> "But what about 1000000000000 and 兆? In any case, code-golf.io is unicode-aware, so the length of any of these characters will be 1."

[02:00] <Hotkeys> oooh that's direty

[02:00] <Hotkeys> dirty*

[02:01] <Hotkeys> AlexDaniel++

[02:39] <Geth> ¦ roast: c8442d826c | (Zoffix Znet)++ | MISC/bug-coverage.t

[02:39] <Geth> ¦ roast: Add more .count-only/.bool-only tests

[02:39] <Geth> ¦ roast:

[02:39] <Geth> ¦ roast: Test both method and sub versions of combinations/permutations

[02:39] <Geth> ¦ roast: as they [can be] are implemented using different chain of iterators.

[02:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c8442d826c

[03:02] <Geth> ¦ rakudo: 57d164b464 | (Zoffix Znet)++ | src/core/Rakudo/Iterator.pm

[03:02] <Geth> ¦ rakudo: Add missing words in comment

[03:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/57d164b464

[03:13] <Zoffix> It's not quite the plan any more. The metacpan fork was limping all along and last time I got the update about it it was "stalled but not yet dead", which is why CPAN support was added to mp6o. My crystal ball says mp6o's featureset will slightly develop further for ~2 years, then there'll be move to write proper Rakudo version of the site. Perl 5 version just isn't working out, the way I see it.

[03:14] <Zoffix> manchicken, CPAN is CPAN. It has support for both Pumpkin Perl 5 and Rakudo Perl 6 modules. It's one of our ecosystems, with the other being GitHub/GitLab based, called "p6c". The modules.perl6.org ("mp6o") is the front-end for both of those ecosystems

[03:14] <Zoffix> ugh wc

[03:29] <Geth> ¦ rakudo: cda4a4d76a | (Zoffix Znet)++ | t/08-performance/01-iterators.t

[03:29] <Geth> ¦ rakudo: Fix &combinations.bool-only test

[03:29] <Geth> ¦ rakudo:

[03:29] <Geth> ¦ rakudo: Don't numify before boolifying; that uses wrong iterator method

[03:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cda4a4d76a

[03:37] <Geth> ¦ rakudo: 2c27eeaa34 | (Zoffix Znet)++ | t/08-performance/01-iterators.t

[03:37] <Geth> ¦ rakudo: Test &permutation offers .count/bool-only opts

[03:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2c27eeaa34

[03:48] <Geth> ¦ roast: 7c8c01a98d | (Zoffix Znet)++ | MISC/bug-coverage.t

[03:48] <Geth> ¦ roast: Fix incorrect .permutations use

[03:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7c8c01a98d

[03:48] <Zoffix> Jesus. Sure made a billion mistakes this week :| need to sleep more often

[03:49] <Geth> ¦ rakudo: d4f53ed5d9 | (Zoffix Znet)++ | 2 files

[03:49] <Geth> ¦ rakudo: Implement .[count|bool]-only opts on List.permutations

[03:49] <Geth> ¦ rakudo:

[03:49] <Geth> ¦ rakudo: Partially addresses https://github.com/rakudo/rakudo/issues/1331

[03:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d4f53ed5d9

[03:50] <Zoffix> ...and another one. Forgot the tests /o\

[03:51] <Geth> ¦ rakudo: 19604c2d21 | (Zoffix Znet)++ | t/08-performance/01-iterators.t

[03:51] <Geth> ¦ rakudo: Test List.permutation got iterator opt methods

[03:51] <Geth> ¦ rakudo:

[03:51] <Geth> ¦ rakudo: Fix: https://github.com/rakudo/rakudo/commit/d4f53ed5d9

[03:51] <Geth> ¦ rakudo: Partially addresses https://github.com/rakudo/rakudo/issues/1331

[03:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/19604c2d21

[03:52] <Zoffix> .ask lizmat does this commit look sane? https://github.com/rakudo/rakudo/commit/d4f53ed5d9  It's part of fixing R#1331 and if it looks fine, I plan to add something similar to List.combinations (thought not yet clear what it'll look like)

[03:52] <yoleaux> Zoffix: I'll pass your message to lizmat.

[03:52] <synopsebot> R#1331 [open]: https://github.com/rakudo/rakudo/issues/1331 [perf] .count-only/.bool-only exist on combinations/permutations subs, but not methods

[05:51] <Geth> ¦ roast: 78c3c865eb | (Zoffix Znet)++ | 3 files

[05:51] <Geth> ¦ roast: [v6.d REVIEW] Merge race and hyper tests

[05:51] <Geth> ¦ roast:

[05:51] <Geth> ¦ roast: - 90% of the tests are identical. Put them all in a loop and shove

[05:51] <Geth> ¦ roast:     method name to use into a variable. Add routine that sorts

[05:51] <Geth> ¦ roast:     the results when we're testing `race`.

[05:51] <Geth> ¦ roast: - Toss JVM fudges; the entire test files were `#moar`-marked in Rakudo's

[05:51] <Geth> ¦ roast:     spectest.data file

[05:52] <Geth> ¦ roast: - No tests were removed

[05:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/78c3c865eb

[05:52] <Geth> ¦ rakudo: f10e8b1346 | (Zoffix Znet)++ | t/spectest.data

[05:52] <Geth> ¦ rakudo: Reflect race - hyper test files merge

[05:52] <Geth> ¦ rakudo:

[05:52] <Geth> ¦ rakudo: https://github.com/perl6/roast/commit/78c3c865eb

[05:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f10e8b1346

[06:02] <Geth> ¦ roast: a034c77f15 | (Zoffix Znet)++ | S02-types/instants-and-durations.t

[06:02] <Geth> ¦ roast: [v6.d REVIEW] Formatting fixes

[06:02] <Geth> ¦ roast:

[06:02] <Geth> ¦ roast: - Toss Perl-5-ism and useless variables

[06:02] <Geth> ¦ roast: - Improve test descriptions

[06:02] <Geth> ¦ roast:

[06:02] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/8650ef2979b39de7801f68fc4bb015cafa615259

[06:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a034c77f15

[06:10] <Geth> ¦ rakudo: b7f93bee16 | (Zoffix Znet)++ | t/05-messages/02-errors.t

[06:10] <Geth> ¦ rakudo: Test (:::[]) does not spill guts

[06:10] <Geth> ¦ rakudo:

[06:10] <Geth> ¦ rakudo: Moving error-message-textual-content-test from roast.

[06:10] <Geth> ¦ rakudo: Orig: https://github.com/perl6/roast/commit/5dcda3c2f3c3c0bdbfb3becd0df0ac1b7b6abc9f

[06:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b7f93bee16

[06:15] <Geth> ¦ roast: fa6247ddee | (Zoffix Znet)++ | integration/weird-errors.t

[06:15] <Geth> ¦ roast: [v6.d REVIEW] DSETEM with `(:::[])`

[06:15] <Geth> ¦ roast:

[06:15] <Geth> ¦ roast: DSETEM = "Do Not Spec Exact Text of Error Messages". These proved

[06:15] <Geth> ¦ roast: of little value and were interfering with readability changes in 6.c.

[06:15] <Geth> ¦ roast: Keep these in Rakudo's tests for now. If other impls need it, we can

[06:15] <Geth> ¦ roast: always do an Appendix set of tests to the spec that impls can optionally follow.

[06:15] <Geth> ¦ roast:

[06:15] <Geth> ¦ roast: Test moved to rakudo's suite:

[06:15] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/b7f93bee16

[06:15] <Geth> ¦ roast:

[06:15] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/5dcda3c2f3c3c0bdbfb3becd0df0ac1b7b6abc9f

[06:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fa6247ddee

[06:19] <Geth> ¦ roast: 1a4548d3b3 | (Zoffix Znet)++ | S32-list/seq.t

[06:19] <Geth> ¦ roast: Avoid double-heredoc

[06:19] <Geth> ¦ roast:

[06:19] <Geth> ¦ roast: - Easier to understand

[06:19] <Geth> ¦ roast: - Doesn't blow up highlights for the entire file in atom

[06:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1a4548d3b3

[06:30] <Geth> ¦ roast: cb96abffca | (Zoffix Znet)++ | S32-list/seq.t

[06:30] <Geth> ¦ roast: [v6.d REVIEW] Simplify consumed Seq .perl.EVAL

[06:30] <Geth> ¦ roast:

[06:30] <Geth> ¦ roast: - Use fewer things

[06:30] <Geth> ¦ roast: - Use more precise tests

[06:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cb96abffca

[06:34] <Geth> ¦ roast: 17e1dda1fb | (Zoffix Znet)++ | S11-modules/require.t

[06:34] <Geth> ¦ roast: [v6.d REVIEW] Move test closer to thing being tested

[06:34] <Geth> ¦ roast:

[06:34] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/25c40d05f70ba3fabb83cb35a714344bc34c449f

[06:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/17e1dda1fb

[06:50] <travis-ci> Rakudo build passed. Zoffix Znet 'Reflect race - hyper test files merge

[06:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/320559820 https://github.com/rakudo/rakudo/compare/19604c2d217c...f10e8b134696

[07:11] <Geth> ¦ roast: 6fa5f6481f | (Zoffix Znet)++ | S11-modules/require.t

[07:11] <Geth> ¦ roast: [v6.d REVIEW] Use preciser test routines

[07:11] <Geth> ¦ roast:

[07:11] <Geth> ¦ roast: So they give better output when failing.

[07:11] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/91f9a9171df9aa2336baa80d2e3dde39d974379b

[07:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6fa5f6481f

[07:20] <Geth> ¦ roast: 85265395f5 | (Zoffix Znet)++ | S32-str/split.t

[07:20] <Geth> ¦ roast: [v6.d REVIEW] Test actual data instead of stringified

[07:20] <Geth> ¦ roast:

[07:20] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/10b2d6b2154087e0acd6d5777c437796fde63574

[07:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/85265395f5

[07:29] <Geth> ¦ roast: 3518bd06fc | (Zoffix Znet)++ | S03-operators/buf.t

[07:29] <Geth> ¦ roast: Remove trailing whitespace

[07:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3518bd06fc

[07:31] <Geth> ¦ roast: c44a3015fa | (Zoffix Znet)++ | S03-operators/buf.t

[07:31] <Geth> ¦ roast: [v6.d REVIEW] Improve tests for Buf.append and ilk

[07:31] <Geth> ¦ roast:

[07:31] <Geth> ¦ roast: - Use more appropriate test routines

[07:31] <Geth> ¦ roast: - Use more random item values (e.g. in case there's bug that just

[07:31] <Geth> ¦ roast:     pushes .elems instead of the value itself)

[07:31] <Geth> ¦ roast:

[07:31] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/a41c9f530131ca18d9586e0abc37ea9dc0581555

[07:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c44a3015fa

[07:36] <Geth> ¦ roast: e1fe3edf32 | (Zoffix Znet)++ | S32-temporal/Date.t

[07:36] <Geth> ¦ roast: [v.6 REVIEW] Improve DateTime subclass tests

[07:36] <Geth> ¦ roast:

[07:36] <Geth> ¦ roast: - Use proper test routines

[07:36] <Geth> ¦ roast: - Test type of created object

[07:36] <Geth> ¦ roast: - Lexicalize the test class

[07:36] <Geth> ¦ roast:

[07:36] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/e1449d6f3e18c625887d0bf653dcd0f36ae36ed5

[07:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e1fe3edf32

[07:36] <Geth> ¦ roast: 4f924634f5 | (Zoffix Znet)++ | S32-temporal/Date.t

[07:36] <Geth> ¦ roast: [v6.d REVIEW] Lexicalize test types

[07:36] <Geth> ¦ roast:

[07:36] <Geth> ¦ roast: To avoid potential conflicts in other places of the test file

[07:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4f924634f5

[07:40] <Geth> ¦ roast: 8846ba7407 | (Zoffix Znet)++ | S32-temporal/DateTime.t

[07:40] <Geth> ¦ roast: [v6.d REVIEW] Improve DateTime subclass tests

[07:40] <Geth> ¦ roast:

[07:40] <Geth> ¦ roast: (earlier commit was actually improvements for Date sublclass test, not DateTime)

[07:40] <Geth> ¦ roast: - Use proper test routines

[07:40] <Geth> ¦ roast: - Test type of created object

[07:40] <Geth> ¦ roast: - Lexicalize the test classes

[07:40] <Geth> ¦ roast:

[07:40] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/edaa353f95d44df1b2fcbcca9bf3d0c5ed95a624

[07:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8846ba7407

[07:42] <Geth> ¦ roast: 53aa3810b8 | (Zoffix Znet)++ | S01-perl-5-integration/context.t

[07:42] <Geth> ¦ roast: [v6.d REVIEW] Use more appropriate test routine

[07:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/53aa3810b8

[07:44] <Geth> ¦ roast: bbf4314142 | (Zoffix Znet)++ | S32-str/split.t

[07:44] <Geth> ¦ roast: [v6.d REVIEW] Move vim thingie to end of file

[07:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bbf4314142

[08:07] <Geth> ¦ roast: 84d90464aa | (Zoffix Znet)++ | integration/error-reporting.t

[08:07] <Geth> ¦ roast: [v6.d REVIEW] Don't spec ::AdHoc compilation error

[08:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/84d90464aa

[08:10] <Geth> ¦ roast: 991061b0d9 | (Zoffix Znet)++ | S12-attributes/native.t

[08:10] <Geth> ¦ roast: [v6.d REVIEW] Use more appropriate test routines

[08:10] <Geth> ¦ roast:

[08:10] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/eb2b08ebb1164c636e25a25bd5685b0ac690e193

[08:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/991061b0d9

[08:15] <Geth> ¦ roast: f17e8a6503 | (Zoffix Znet)++ | S02-names-vars/signature.t

[08:15] <Geth> ¦ roast: [v6.d REVIEW] Fix up capture binding + postfix:<++> tests

[08:15] <Geth> ¦ roast:

[08:15] <Geth> ¦ roast: - Add parens to avoid a warning

[08:15] <Geth> ¦ roast: - We now have proper exception type; use that

[08:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f17e8a6503

[08:42] <Geth> ¦ roast: fd0b683207 | (Zoffix Znet)++ | S02-names-vars/signature.t

[08:42] <Geth> ¦ roast: [v6.d REVIEW] Use more appropriate test routines

[08:42] <Geth> ¦ roast:

[08:42] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/27010e59df9a590a17f4496669916a0647f60ca9

[08:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fd0b683207

[09:15] <Geth> ¦ roast: 46bd9a77b2 | (Zoffix Znet)++ | S03-operators/buf.t

[09:15] <Geth> ¦ roast: [v6.d REVIEW] Fix code typo

[09:15] <Geth> ¦ roast:

[09:15] <Geth> ¦ roast: Made in https://github.com/perl6/roast/commit/c44a3015faa26538baf9b56a8f7e61b821da5409

[09:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/46bd9a77b2

[09:17] <Geth> ¦ roast: b429572460 | (Zoffix Znet)++ | S32-temporal/DateTime.t

[09:17] <Geth> ¦ roast: [v6.d REVIEW] Fix wrong variable name

[09:17] <Geth> ¦ roast:

[09:17] <Geth> ¦ roast: Forgot to run the test before commiting previous commit

[09:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b429572460

[09:17] <Geth> ¦ rakudo: a04c616471 | (Zoffix Znet)++ | 2 files

[09:17] <Geth> ¦ rakudo: Improve cmp-ok Str metaop error message

[09:17] <Geth> ¦ rakudo:

[09:17] <Geth> ¦ rakudo: Suggest to the user they need to use the &[...] Callable form.

[09:17] <Geth> ¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1334

[09:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a04c616471

[09:34] <Geth> ¦ roast: 61c882c452 | (Zoffix Znet)++ | S03-operators/buf.t

[09:34] <Geth> ¦ roast: Temporarily revert previous commits

[09:34] <Geth> ¦ roast:

[09:34] <Geth> ¦ roast: The original tests have a precedence bug and the fixed precedence

[09:34] <Geth> ¦ roast: appears to uncover a bug in Buf.push/.unshift, but I'm not yet

[09:34] <Geth> ¦ roast: sure why the rest of the tests was passing and too sleepy

[09:34] <Geth> ¦ roast: to figure out today.

[09:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/61c882c452

[10:02] <travis-ci> Rakudo build failed. Zoffix Znet 'Improve cmp-ok Str metaop error message

[10:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/320595112 https://github.com/rakudo/rakudo/compare/b7f93bee16fc...a04c61647152

[10:02] <buggable> [travis build above] ☠ All failures are due to: failed make test (6 failures). Across all jobs, only t/05-messages/02-errors.t test file failed.

[11:29] <lizmat> good *, #perl6-dev

[11:29] <yoleaux> 03:52Z <Zoffix> lizmat: does this commit look sane? https://github.com/rakudo/rakudo/commit/d4f53ed5d9  It's part of fixing R#1331 and if it looks fine, I plan to add something similar to List.combinations (thought not yet clear what it'll look like)

[11:29] <synopsebot> R#1331 [open]: https://github.com/rakudo/rakudo/issues/1331 [perf] .count-only/.bool-only exist on combinations/permutations subs, but not methods

[11:31] <lizmat> .tell Zoffix I'm slightly worried about the overhead this will incur for the normal case: if it is noticeable, then I would be in favour of removing count-only

[11:31] <yoleaux> lizmat: I'll pass your message to Zoffix.

[11:55] <timotimo> we may want to reword or reorder or resectionize the output of perl6 --help to make a few of the flags more obviously about the compiler rather than the user program. like the --output=name flag, which one might assume works like a redirect for program output, but in reality it does nothing at all unless you also have a --target=stage set

[11:55] <lizmat> +1

[11:56] <timotimo> also, at some point, sooner rather than later i'd expect, we'll want to have support for -i.foo and -i

[11:56] <lizmat> timotimo: ?

[11:57] <timotimo> working in-place with IO::CatHandle

[11:57] <timotimo> with an extension passed it'll backup the original file, without it'll clobber

[11:58] <AlexDaniel> +1+1+1 :)

[11:58] <AlexDaniel> I needed that several times

[11:58] <AlexDaniel> well, +i itself

[11:58] <AlexDaniel> m: say 42

[11:58] <camelia> rakudo-moar 3f90f663b: OUTPUT: «42␤»

[11:59] <AlexDaniel> \o/ \o/

[11:59] <timotimo> $ s='a+b' perl -ne '$pos = length() - length($ENV{s}) - 1;

[11:59] <timotimo> print if index($_, $ENV{s}) == $pos' eqns.txt

[11:59] <timotimo> ugh, look at this ugly one-liner

[12:00] <timotimo> isn't perl6 -ne '.say if .ends-with(%*ENV<s>)' much nicer

[12:00] <timotimo> hm. i wonder if starts-with and ends-with and maybe other string-comparison-y operators will want to learn :ignoremark and :ignorecase

[12:01] <timotimo> operators/operations

[12:09] <timotimo> d'oh, just going through the output of seq 14323 14563435 with -ne '.say if $++ == 234' takes ~22 seconds in perl6 but in perl5 it takes like 2

[13:02] <Geth> ¦ rakudo: 6cca27669f | (Elizabeth Mattijsen)++ | 3 files

[13:02] <Geth> ¦ rakudo: Make List a value type if it only has value types

[13:02] <Geth> ¦ rakudo:

[13:02] <Geth> ¦ rakudo: - add a $!WHICH attribute to List (and therefor also on Array)

[13:02] <Geth> ¦ rakudo: - on first call to .WHICH, will freeze the '$!WHICH' value

[13:02] <Geth> ¦ rakudo:   - if any of the elements is a container, it's not a value type

[13:02] <Geth> ¦ rakudo:   - if any of the elements.WHICH is not an ValueObjAt, it's not a value type

[13:02] <Geth> ¦ rakudo:   - if all value types, create a sha of the .WHICH strings as its .WHICH

[13:02] <Geth> ¦ rakudo: <…commit message has 18 more lines…>

[13:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6cca27669f

[13:12] <lizmat> the code for mixin in $!WHICH attribute on demand: https://gist.github.com/lizmat/4f9366ea226a3efa7e795ce2a1d34b45

[13:29] <Geth> ¦ roast: 5670acf676 | (Elizabeth Mattijsen)++ | 2 files

[13:29] <Geth> ¦ roast: Follow semantic change of https://github.com/rakudo/rakudo/commit/6cca27669f

[13:29] <Geth> ¦ roast:

[13:29] <Geth> ¦ roast: Lists consisting of only value types, are now also a value type.

[13:29] <Geth> ¦ roast: Please revert should 6cca27669f get reverted.

[13:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5670acf676

[13:54] <timotimo> lizmat: can we be sure that attrinited will work here? also, since autovivification of attributes and such is going away in the future, it'll have to be done differently then

[14:24] <Geth> ¦ rakudo: Kaiepi++ created pull request #1335: Ensure Configure.pl uses gmake for builds on BSDs

[14:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1335

[14:34] <lizmat> timotimo: it worked fine for Set, Bag, Mix so far

[14:40] <timotimo> m: say "which version"

[14:40] <camelia> rakudo-moar 6cca27669: OUTPUT: «which version␤»

[14:41] <timotimo> m: my $a = (1, 2, 3, 4); use nqp; nqp::getattr(nqp::decont($a), List, '$!WHICH'); say $a.WHICH

[14:41] <camelia> rakudo-moar 6cca27669: OUTPUT: «(Mu)␤»

[14:41] <timotimo> m: my $a = (1, 2, 3, 4); say $a.WHICH

[14:41] <camelia> rakudo-moar 6cca27669: OUTPUT: «List|0B079F685A3B305504908F130B8523E6D103194F␤»

[14:41] <timotimo> the question is whether it's possible to cause that with user code

[14:44] <lizmat> well, if that would be an issue. we would have seen it earlier with QuantHashes, as they use the same mechanism

[14:44] <timotimo> that's fair

[14:47] <lizmat> still I wonder whether ($a,$b) should decont $a and $b automatically or not

[14:47] <lizmat> I guess that would be too much magic

[14:47] <timotimo> it probably would, yeah

[14:48] <timotimo> and how would you get The Other Meaning

[14:48] <lizmat> yeah, true

[14:48] <timotimo> does an array decont and then recont?

[14:48] <lizmat> so ($a<>,$b<>) is then

[14:48] <lizmat> yes

[14:48] <timotimo> thought so

[14:48] <timotimo> yeah, i'd imagined the <> operator

[14:49] <yoleaux> Zoffix: take care of tossing deprecation in https://github.com/rakudo/rakudo/commit/9d9c7f9c3b and https://github.com/rakudo/rakudo/commit/cc6c05586b , bruh

[14:57] <lizmat> http://blogs.perl.org/users/leon_timmermans/2017/12/smartmatch-in-5277.html  # how Perl 5 is about to lose one of its most praise properties: stability

[14:57] <lizmat> *praised

[15:03] <Geth> ¦ rakudo: 729caa8f17 | (Elizabeth Mattijsen)++ | src/core/List.pm

[15:03] <Geth> ¦ rakudo: Make sure <<$a b c>> is also a value type

[15:03] <Geth> ¦ rakudo:

[15:03] <Geth> ¦ rakudo: Originally, anything with a $!todo would be considered a non-value type.

[15:03] <Geth> ¦ rakudo: This made <<$a b c>> not be a value type, because for some reason this

[15:03] <Geth> ¦ rakudo: is codegenned with an iterator.  Now, we try to vivify the whole list when

[15:03] <Geth> ¦ rakudo: a .WHICH is requested: if that fails (usually because the List is lazy),

[15:03] <Geth> ¦ rakudo: the List is considered a non-value type.

[15:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/729caa8f17

[15:36] <Geth> ¦ rakudo: 18557da950 | (Elizabeth Mattijsen)++ | src/core/List.pm

[15:36] <Geth> ¦ rakudo: Make sure subclasses of List create consistent .WHICH

[15:36] <Geth> ¦ rakudo:

[15:36] <Geth> ¦ rakudo: Well, at least consistent with the other .WHICH values so far, as in

[15:36] <Geth> ¦ rakudo: "Typename|stuff" rather than "Typenamestuff"

[15:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/18557da950

[15:58] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make sure <<$a b c>> is also a value type

[15:58] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/320673070 https://github.com/rakudo/rakudo/compare/6cca27669f15...729caa8f17f4

[15:58] <buggable> [travis build above] ☠ All failures are due to: failed make test (6 failures). Across all jobs, only t/05-messages/02-errors.t test file failed.

[16:14] <tbrowder> .tell AlexDaniel i think i have all the pod config hash stuff ready for a PR (after a bit of tidying). i hope all the work i see on value arrays and typing doesn't interfere with it--we'll see--i don't think it will. i have tested all the stuff as it shows currently in the docs (including lists and hashes).

[16:14] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[16:18] <Geth> ¦ rakudo: ec0021bbd6 | (Elizabeth Mattijsen)++ | t/05-messages/02-errors.t

[16:18] <Geth> ¦ rakudo: Make sure we also expect STDOUT to give something

[16:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ec0021bbd6

[16:35] <lizmat> I wonder if we could use a prefix op that would make valuetype an array so they could be easily used as keys in an object hash

[16:36] <lizmat> I was thinking of a prefix:</> op

[16:36] <lizmat> m: sub prefix:</>(\a) { a.List.item }; my @a = 1,2,3; my %h{Any}; %h{/@a} = 42; dd %h

[16:36] <camelia> rakudo-moar ec0021bbd: OUTPUT: «Hash[Any,Any] %h = (my Any %{Any} = ((1, 2, 3)) => 42)␤»

[16:37] * lizmat wonders what TimToady jnthn timotimo masak moritz would think about that

[16:38] <lizmat> m: sub prefix:</>(\a) { a.List.item }; my @a = 1,2,3; my %h{Any}; %h{/@a} = 42; dd %h{/(1,2,3)}

[16:38] <camelia> rakudo-moar ec0021bbd: OUTPUT: «Int %h = 42␤»

[16:44] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make sure subclasses of List create consistent .WHICH

[16:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/320683335 https://github.com/rakudo/rakudo/compare/729caa8f17f4...18557da95050

[16:44] <buggable> [travis build above] ☠ All failures are due to: failed make test (6 failures). Across all jobs, only t/05-messages/02-errors.t test file failed.

[16:46] <moritz> lizmat: prefix / collides with /.../ regexes

[16:53] <lizmat> sigh, indeed...

[16:53] <lizmat> apart from bikeshedding the form of the op, does the op make sense ?

[17:15] <Geth> ¦ rakudo: 548dcf4656 | (Elizabeth Mattijsen)++ | src/core/Exception.pm

[17:15] <Geth> ¦ rakudo: Reword X::Seq::Consumed message

[17:15] <Geth> ¦ rakudo:

[17:15] <Geth> ¦ rakudo: Having seen some discussions recently, e.g:

[17:15] <Geth> ¦ rakudo:   https://github.com/perl6/roast/commit/760dbe8465d7a5

[17:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/548dcf4656

[17:16] <pmurias> .seen jntn

[17:16] <yoleaux> 21 Dec 2017 22:52Z <bartolin> pmurias: I fiddled with the test for nqp::cleardispatcher you added yesterday. If I'm not mistaken the workaround I added does not change the purpose of the test -- so I hope my change is okay for you.

[17:16] <yoleaux> I haven't seen jntn around.

[17:16] <pmurias> .seen jnthn

[17:16] <yoleaux> I saw jnthn 22 Dec 2017 13:34Z in #perl6-dev: <jnthn> Though looking up the Perl 6 Int type, for example, and then using nqp::box_i, would do it

[17:33] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make sure we also expect STDOUT to give something'

[17:33] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/320694266 https://github.com/rakudo/rakudo/compare/18557da95050...ec0021bbd6b1

[17:46] <lizmat> afk&

[18:14] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Reword X::Seq::Consumed message

[18:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/320709820 https://github.com/rakudo/rakudo/compare/ec0021bbd6b1...548dcf46561e

[19:41] <Zoffix> I think .push and .unshift on Bufs should be removed.

[19:41] <yoleaux> 11:31Z <lizmat> Zoffix: I'm slightly worried about the overhead this will incur for the normal case: if it is noticeable, then I would be in favour of removing count-only

[19:41] <Zoffix> They're exactly like .append/.prepend, except they also come with a footgun that if you're not in full control of the argument you're passing, occasionally, the methods will throw

[19:42] <Zoffix> m: my $b := Buf.new; $b.push: 1

[19:42] <camelia> rakudo-moar 548dcf465: ( no output )

[19:42] <Zoffix> m: my $b := Buf.new; $b.push: 1 x 1

[19:42] <camelia> rakudo-moar 548dcf465: OUTPUT: «Type check failed in push to Buf; expected uint8 but got Str ("1")␤  in block <unit> at <tmp> line 1␤␤»

[19:42] <Zoffix> m: my $b := Buf.new; $b.push: 1 xx 1

[19:42] <camelia> rakudo-moar 548dcf465: OUTPUT: «Type check failed in push to Buf; expected uint8 but got Seq ($((1,).Seq))␤  in block <unit> at <tmp> line 1␤␤»

[19:43] <Zoffix> So, is that how we'd document them? (they aren't right now) ".push is like .append, but to be on a safe side always use .append"?

[19:45] <Zoffix> Going the other way, we could make them DWIM, but then that'd raise the question why it doesn't DWIM with, say, `(my Str @a).push` and there it makes more sense not to DWIM, so to me it seems like removing .push/.unshift from Bufs is more consistent than that. Yes, users will on occasion try to use .push and fail, but that's an easier failure to stumble upon than accidentally passing an iterable

[19:46] <Zoffix> m: -> :$stuff { say Buf.new.push: $stuff }(:stuff<1>)

[19:46] <camelia> rakudo-moar 548dcf465: OUTPUT: «Buf:0x<01>␤»

[19:46] <Zoffix> m: -> :$stuff { say Buf.new.push: $stuff }(:stuff<1 2>)

[19:46] <camelia> rakudo-moar 548dcf465: OUTPUT: «Type check failed in push to Buf; expected uint8 but got List ($(IntStr.new(1, "1"),...)␤  in block <unit> at <tmp> line 1␤␤»

[19:46] <Zoffix> ^ like in that code for example.

[19:56] <Zoffix> And we actually have 2 bugs in our own roast due to this behaviour: https://github.com/perl6/roast/commit/a41c9f530131ca18d9586e0abc37ea9dc0581555

[19:56] <Zoffix> Ah, nm. Not "due to this behaviour"

[19:58] <Zoffix> heh, chat logs' "plain text" doesn't work on Windows. Browser downloads the file (and it contains wrong new lines)

[19:59] <jnthn> Zoffix: I think .push/.unshift on Buf is fine for single items (integers) at least

[20:00] <jnthn> Well, with multiple args it's fine too if each is an integer

[20:00] <jnthn> Perhaps should honor Slip

[20:01] <Zoffix> Alright.

[20:01] <jnthn> But since one can't put anything other than an integer into a Buf then $buf.push(@foo) is doomed to always fail

[20:01] <jnthn> Or should be

[20:01] <jnthn> That's what append is for

[20:01] <jnthn> m: my Int @a; my @y = 1,2; @a.push(@y)

[20:01] <camelia> rakudo-moar 548dcf465: OUTPUT: «Type check failed in assignment to @a; expected Int but got Array ($[1, 2])␤  in block <unit> at <tmp> line 1␤␤»

[20:02] <jnthn> Should be consistent with that, I'd think

[20:02] <jnthn> m: my Int @a; my @y = 1,2; @a.append(@y)

[20:02] <camelia> rakudo-moar 548dcf465: ( no output )

[20:02] <jnthn> With that being fine

[20:02] <jnthn> m: my @a; my @y = 1,2; @a.push(@y); dd @a

[20:02] <camelia> rakudo-moar 548dcf465: OUTPUT: «Array @a = [[1, 2],]␤»

[20:02] <jnthn> And note that makes a nested array

[20:03] <jnthn> The reason we have append is 'cus @a.push(@b.pop) should always transfer 1 item

[20:03] <Geth> ¦ roast: 1f38f4acdb | (Zoffix Znet)++ | S03-operators/buf.t

[20:03] <Geth> ¦ roast: Revert "Temporarily revert previous commits"

[20:03] <Geth> ¦ roast:

[20:03] <Geth> ¦ roast: This reverts commit 61c882c452590b573b2cb5df3f60202a09d94442.

[20:03] <Geth> ¦ roast:

[20:03] <Geth> ¦ roast: The rest of the tests was passing, because the precedence errors

[20:03] <Geth> ¦ roast: in the original tests always caused .append/.prepend to be called.

[20:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1f38f4acdb

[20:05] <Geth> ¦ roast: 44719c8113 | (Zoffix Znet)++ | S03-operators/buf.t

[20:05] <Geth> ¦ roast: [v6.d REVIEW] Fix erroneous | causing explosions

[20:05] <Geth> ¦ roast:

[20:05] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/a41c9f530131ca18d9586e0abc37ea9dc0581555

[20:05] <Geth> ¦ roast: Explosions found after fixing precedence errors in

[20:05] <Geth> ¦ roast: https://github.com/perl6/roast/commit/1f38f4acdb

[20:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/44719c8113

[20:15] <Geth> ¦ rakudo: 4f86567168 | (Ben Davies)++ | Configure.pl

[20:15] <Geth> ¦ rakudo: Ensure Configure.pl uses gmake for builds on BSDs

[20:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4f86567168

[20:15] <Geth> ¦ rakudo: 78166e1ef8 | (Zoffix Znet)++ (committed using GitHub Web editor) | Configure.pl

[20:15] <Geth> ¦ rakudo: Merge pull request #1335 from Kaiepi/configure

[20:15] <Geth> ¦ rakudo:

[20:15] <Geth> ¦ rakudo: Ensure Configure.pl uses gmake for builds on BSDs

[20:15] <synopsebot> RAKUDO#1335 [closed]: https://github.com/rakudo/rakudo/pull/1335 Ensure Configure.pl uses gmake for builds on BSDs

[20:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/78166e1ef8

[20:18] <pmurias> jnthn: hi

[20:19] <pmurias> jnthn: when we are making a thunk for orelse (and similiar), it seems we are migrating stuff into the thunk being created: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L9067

[20:19] <pmurias> jnthn: does it make sense to do that, as p6capturelex doesn't work correctly in that case

[20:22] <jnthn> Hm, why doesn't it work correctly?

[20:25] <pmurias> jnthn: when we have nested orelse: Foo orelse $x orelse $x, the second orelse block is nested inside the first one

[20:25] <Zoffix> Don't know if related, but there's this bug RT#132337

[20:25] <synopsebot> RT#132337 [new]: https://rt.perl.org/Ticket/Display.html?id=132337 [BUG] Code block inside `andthen`/`orelse` doesn't close over lexical variables correctly

[20:26] <pmurias> jnthn: evil moar autoclosing hackery "fixes" it

[20:26] <jnthn> Given there's a bug report that Zoffix just linked to, it probably doesn't really fix it :)

[20:28] <jnthn> Yeah, that looks like some mis-nesting is happening or some such

[20:28] <jnthn> It's OK if the second block ends up nested inside the first provided it gets closure cloned appropriately inside of there

[20:30] <pmurias> jnthn: are we really migrating the blocks in the right direction?

[20:31] <jnthn> No idea

[20:31] <jnthn> Also, are they being migrated in a sufficiently fine-grained way, 'cus I think the migration mechanism is statement level.

[20:31] <pmurias> as we are migrating stuff from $*W.cur_lexpad() into the $block (the thunk we are creating)

[20:34] <pmurias> jnthn: if it's non-obvious I'll try to get some proper sleep and I'll check tomorrow what spectests break if we reverse the migration direction ;)

[20:34] <jnthn> :)

[20:35] <jnthn> Yeah, it's not clear to me what it's doing or should be :)

[20:43] <Geth> ¦ rakudo: e0af68a08a | (Zoffix Znet)++ | 2 files

[20:43] <Geth> ¦ rakudo: Remove deprecation fudge for native type instantiations

[20:43] <Geth> ¦ rakudo:

[20:43] <Geth> ¦ rakudo: Deprecation period has expired, so now all forms are fatal

[20:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e0af68a08a

[21:09] <Geth> ¦ roast: dbc1929dc7 | (Zoffix Znet)++ | README.md

[21:09] <Geth> ¦ roast: Mention errata branches

[21:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dbc1929dc7

[21:10] <Geth> ¦ rakudo: 9606aea22a | (Zoffix Znet)++ | tools/build/Makefile-common-rules.in

[21:10] <Geth> ¦ rakudo: Fix issues with roast checkout

[21:10] <Geth> ¦ rakudo:

[21:10] <Geth> ¦ rakudo: Unsure what the original purpose of setting the push_url stuff was

[21:10] <Geth> ¦ rakudo: about, but on any clean checkout I always have to change origin URLs,

[21:10] <Geth> ¦ rakudo: if I want to push anything, as it gives errors about push access.

[21:10] <Geth> ¦ rakudo:

[21:10] <Geth> ¦ rakudo: Fix by not messing with anything and just checking out over HTTPs.

[21:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9606aea22a

[21:58] * [Coke] wonders if there's a way to get the acme advent highlighter to treat a section as a <pre>

[22:00] * [Coke] realizes he can just make it a literal pre.

[22:11] * [Coke] puts https://perl6advent.wordpress.com/?p=7045&preview=true up

[22:11] <[Coke]> i *think* it's scheduled...

[22:40] * [Coke] pushes https://github.com/coke/p6-cube-three

[23:38] <timotimo> [Coke]: reading your post

[23:38] <timotimo> do you think gather for { take foo } is cleaner than do for { foo }?

[23:40] <timotimo> [Coke]: i wonder if "[eq] %!Sides{$side}" is nicer than "%!Sides{$side}.all eq %!Sides{$side}[4]"

[23:41] <timotimo> .o( also, .all eq .[4] given %!Sides{$side} )

[23:47] * timotimo wonders about double-width letters for the side names and ansi background colors for the squares

[23:47] <timotimo> nice post, [Coke]++
