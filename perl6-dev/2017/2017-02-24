[03:38] <MasterDuke_> i spoke to soon. trying to build rakudo with that method removed nearly killed my box and the oom killer took out firefox

[03:38] <MasterDuke_> *too

[03:40] <MasterDuke_> huh, and did i misstype my password? it won't let me /nick to MasterDuke, it says it's already in use

[07:29] <[Tux]> This is Rakudo version 2017.02-55-g320c2fb46 built on MoarVM version 2017.02-9-gc5379702

[07:29] <[Tux]> csv-ip5xs        2.890

[07:29] <[Tux]> test            12.664

[07:29] <[Tux]> test-t           4.823 - 5.004

[07:29] <[Tux]> csv-parser      13.261

[08:50] <lizmat> Files=1177, Tests=55938, 188 wallclock secs (11.31 usr  4.49 sys + 1123.82 cusr 105.84 csys = 1245.46 CPU)

[08:56] <lizmat> http://marc.info/?l=git&m=148787047422954  # probably also interesting wrt our use of sha1 in compunit repos

[09:16] <samcv> thanks lizmat

[09:18] <samcv> lizmat, this isn't as much an issue as like perl 5 having ./ in @INC right?

[09:22] <samcv> since you'd basically need write access to these locations anyway to exploit it

[09:39] <Geth> ¦ star: cschwenz++ created pull request #86: Revert copyright year in LICENSE to original.

[09:39] <Geth> ¦ star: review: https://github.com/rakudo/star/pull/86

[11:24] <lizmat> samcv: indeed

[11:25] <Geth> ¦ star: f78a2c06c1 | (Calvin Schwenzfeier)++ | LICENSE

[11:25] <Geth> ¦ star: Revert copyright year in LICENSE to original.

[11:25] <Geth> ¦ star:

[11:25] <Geth> ¦ star: Per the commit message on the Rakudo LICENSE file[^1] and the source

[11:25] <Geth> ¦ star: text for the original license[^2][^3], "Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed."

[11:25] <Geth> ¦ star:

[11:25] <Geth> ¦ star: [1] https://github.com/rakudo/rakudo/commit/47f5300f41cbce765471f81b52bda87bd4600be7

[11:25] <Geth> ¦ star: [2] http://www.perlfoundation.org/artistic_license_2_0

[11:25] <Geth> ¦ star: [3] https://opensource.org/licenses/Artistic-2.0

[11:25] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/f78a2c06c1

[11:25] <Geth> ¦ star: 70da757d7c | lizmat++ | LICENSE

[11:25] <Geth> ¦ star: Merge pull request #86 from cschwenz/master

[11:25] <Geth> ¦ star:

[11:25] <Geth> ¦ star: Revert copyright year in LICENSE to original.

[11:25] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/70da757d7c

[13:21] <MasterDuke_> if there aren't any further thoughts/comments, would anybody mind merging https://github.com/rakudo/rakudo/pull/1021 and https://github.com/rakudo/rakudo/pull/1018 (and maybe squashing 1018 so there aren't commits that break the jvm build)?

[13:22] <Geth> ¦ rakudo/nom: 25a3cc54b1 | (Daniel Green)++ | src/Perl6/Actions.nqp

[13:22] <Geth> ¦ rakudo/nom: Optimize Actions.(dec|hex|oct|bin)int()

[13:22] <Geth> ¦ rakudo/nom:

[13:22] <Geth> ¦ rakudo/nom: Create a string_to_int that uses nqp::radix instead of nqp::radix_I.

[13:22] <Geth> ¦ rakudo/nom: Then call that from Actions.(dec|hex|oct|bin)int() instead of

[13:22] <Geth> ¦ rakudo/nom: string_to_bigint when the number of chars in the string to be converted

[13:22] <Geth> ¦ rakudo/nom: is small enough that it couldn't cause overflow.

[13:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/25a3cc54b1

[13:22] <Geth> ¦ rakudo/nom: b61b3c7a7f | (Daniel Green)++ | src/Perl6/Actions.nqp

[13:22] <Geth> ¦ rakudo/nom: Use string_to_int for longer strings when 64-bit

[13:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b61b3c7a7f

[13:22] <Geth> ¦ rakudo/nom: d41b68e16c | lizmat++ | src/Perl6/Actions.nqp

[13:22] <Geth> ¦ rakudo/nom: Merge pull request #1021 from MasterDuke17/optimize_string_to_bigint

[13:22] <Geth> ¦ rakudo/nom:

[13:22] <Geth> ¦ rakudo/nom: Optimize Actions.(dec|hex|oct|bin)int()

[13:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d41b68e16c

[13:23] <lizmat> MasterDuke_: re 1018, what would be the effect on the JVM build?

[13:32] <MasterDuke_> lizmat++ the first commit breaks it, the next unbusts building, but has an error so it won't really run correctly, the last commit fixes running also

[13:42] <IOninja> s: CORE::.keys.grep(* ne "IterationEnd").map({CORE::{$_}}).grep({ !.DEFINITE and try .can("say") }), 'unique', \()

[13:42] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/320c2fb/src/core/Any-iterable-methods.pm#L1487

[13:58] <IOninja> bisectable6: Scalar.unique

[13:58] <bisectable6> IOninja, On both starting points (old=2015.12 new=d41b68e) the exit code is 0, exit signal is 11 (SIGSEGV) and the output is identical as well

[13:58] <bisectable6> IOninja, Output on both points:

[13:58] <IOninja> c: 2014.01 Scalar.unique

[13:58] <committable6> IOninja, ¦«2014.01»: Cannot invoke null object␤  in block  at /tmp/vrw4a_2gQY:1␤ «exit code = 1»

[13:58] <IOninja> c: 2015.01 Scalar.unique

[13:58] <committable6> IOninja, ¦«2015.01»:

[13:58] <IOninja> c: 2015.07 Scalar.unique

[13:58] <committable6> IOninja, ¦«2015.07»:

[13:59] <IOninja> c: all Scalar.unique

[13:59] <committable6> IOninja, https://gist.github.com/769828254057438050cb84a953f9041b

[16:40] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1025: Check that the argument to p6recont_ro IS_CONCRETE

[16:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1025

[16:42] <IOninja> Doesn't that make p6recont_ro a NOP for all type objects?

[16:43] <IOninja> oh, it's just the container's concretness that's tested...

[16:46] * IOninja wonders what happened to IS_WOOD, IS_STEEL, and IS_PAPER

[17:36] <dogbert17> IOninja; have you tried the mapper program with MasterDuke's fix?

[17:41] <Geth> ¦ rakudo/nom: cfe0e04622 | (Daniel Green)++ | src/vm/moar/ops/perl6_ops.c

[17:41] <Geth> ¦ rakudo/nom: Check that the argument to p6recont_ro IS_CONCRETE

[17:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cfe0e04622

[17:41] <Geth> ¦ rakudo/nom: ae2c1dadf0 | lizmat++ | src/vm/moar/ops/perl6_ops.c

[17:41] <Geth> ¦ rakudo/nom: Merge pull request #1025 from MasterDuke17/fix_segv_in_p6recont_ro

[17:41] <Geth> ¦ rakudo/nom:

[17:41] <Geth> ¦ rakudo/nom: Fix SEGV in nqp::p6recont_ro

[17:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ae2c1dadf0

[17:45] <IOninja> dogbert17: no, but I imagine it fixes it.

[17:52] <MasterDuke> lizmat++ also, need any other info for https://github.com/rakudo/rakudo/pull/1018?

[17:53] <Geth> ¦ rakudo/nom: 4 commits pushed by (Daniel Green)++, lizmat++

[17:53] <Geth> ¦ rakudo/nom: b2e0ac09ed | Make Parameter.[named_names, type_captures] list_s

[17:53] <Geth> ¦ rakudo/nom: b1def95c1a | JVM fix for native named_names and type_captures

[17:53] <Geth> ¦ rakudo/nom: 2f6d2c6f2f | Add braces to the now two-line body of an if

[17:53] <Geth> ¦ rakudo/nom: e9b55e5d83 | Merge pull request #1018 from MasterDuke17/make_Parameters_named_names_and_type_captures_native_str_lists

[17:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/compare/ae2c1dadf0...e9b55e5d83

[17:53] <lizmat> no  :-)

[17:55] <MasterDuke> lizmat++

[18:21] <Geth> ¦ rakudo/nom: 45b3af8dc2 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm

[18:21] <Geth> ¦ rakudo/nom: Make MERGESORT also take IterationBuffers directly

[18:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/45b3af8dc2

[18:21] <Geth> ¦ rakudo/nom: 7010ae9bbe | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[18:21] <Geth> ¦ rakudo/nom: Make R:I.ReifiedList take IterationBuffers directly

[18:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7010ae9bbe

[18:29] <MasterDuke> lizmat: is there an easy way to call/use MERGESORT directly?

[18:30] <lizmat> in the setting, it's just Rakudo::Internals.MERGESORT...()

[18:30] <lizmat> MasterDuke: but why ?

[18:31] <MasterDuke> lizmat: i thought i noticed some weirdness (seemed slower than i expected), but that was in a very large script and i wasn't sure what under the hood was using it

[18:32] <MasterDuke> so i was just going to try it with some random input and time it

[18:32] <lizmat> MasterDuke: by all means...  :-)

[18:32] <lizmat> it now directly takes IterationBuffers  :-)

[18:32] <lizmat> still returns a List though, baby steps  :-)

[19:20] <MasterDuke> lizmat: turns out a graph of Rakudo::Internals.MERGESORT-REIFIED-LIST performance has the same shape as Perl 5's sort, it's just the individual values are 15-20x higher

[19:22] <lizmat> yeah... not unsurprising, as that is same order of magnitude between Text::CSV_PP in Perl 5 and Text::CSV in Perl 6

[19:23] <Geth> ¦ roast: e31c78c52b | (Zoffix Znet)++ | S32-list/unique.t

[19:23] <Geth> ¦ roast: Test Scalar.unique does not SEGV

[19:23] <Geth> ¦ roast:

[19:23] <Geth> ¦ roast: RT#130852: https://rt.perl.org/Ticket/Display.html?id=130852

[19:23] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/ae2c1dadf0

[19:23] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130852

[19:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e31c78c52b

[19:23] <IOninja> ZOFVM: Files=1226, Tests=132875, 220 wallclock secs (25.02 usr  3.88 sys + 4621.42 cusr 310.74 csys = 4961.06 CPU)

[19:25] <MasterDuke> IOninja: i don't understand eval-lives-ok. on a perl6 build before my patch, `perl6 -e 'use Test; eval-lives-ok ｢Scalar.unique｣'` segfaults

[19:28] <IOninja> sure, 'cause the bug is still in there.

[19:28] <IOninja> You'd need to use `is_run` to make it fail just that test and not crash the test file.

[19:30] <IOninja> why didn't I use lives-ok { Scalar.unique } ? Ignorance and paranoia. I don't know what sort of optimizations we do or will do that won't turn that into some optimized version that doesn't hit the bug. Maybe the same would happen with the eval-lives-ok version, I've no idea.

[19:31] <IOninja> ...also ｢...｣ looks cool

[19:33] <MasterDuke> i find it mildly annoying that roast doesn't have a RAKUDO_REVISION. if i'm working on something in a branch and a bunch of roast tests go in there are likely to be failures, and i have to figure out whether they are because of my changes or not

[19:36] <Geth> ¦ rakudo/nom: 556db9d7bc | (Elizabeth Mattijsen)++ | src/core/Array.pm

[19:36] <Geth> ¦ rakudo/nom: Make Array.splice use IterationBuffer internally

[19:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/556db9d7bc

[19:38] <Geth> ¦ rakudo/nom: 9e9a4ad250 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[19:38] <Geth> ¦ rakudo/nom: Re-imagine Baggy!LISTIFY

[19:38] <Geth> ¦ rakudo/nom:

[19:38] <Geth> ¦ rakudo/nom: Make it return a ready made Str.  This allows using native strs

[19:38] <Geth> ¦ rakudo/nom: internally, and thereby speed up things like Bag.perl|gist|Str.

[19:38] <Geth> ¦ rakudo/nom:

[19:38] <Geth> ¦ rakudo/nom: Actually part of the nqp::list -> IterationBuffer hunt.

[19:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9e9a4ad250

[19:58] <Geth> ¦ rakudo/nom: 8e8cd14bf4 | (Elizabeth Mattijsen)++ | src/core/Block.pm

[19:58] <Geth> ¦ rakudo/nom: Make sure Block.phasers returns List with IB

[19:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8e8cd14bf4

[20:36] <Geth> ¦ rakudo/nom: 7556498daa | (Elizabeth Mattijsen)++ | src/core/CompUnit/RepositoryRegistry.pm

[20:36] <Geth> ¦ rakudo/nom: Move some code out of a loop

[20:36] <Geth> ¦ rakudo/nom:

[20:36] <Geth> ¦ rakudo/nom: Actually part of the nqp::list -> IB search

[20:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7556498daa

[21:17] <MasterDuke> re https://github.com/rakudo/rakudo/pull/876, if i removed all the controversial/incorrect commits from that branch/PR, would anybody have a problem with merging it?

[21:18] <[Coke]> .... by definition, probably not? :)

[21:19] <[Coke]> MasterDuke: coming in late: what is the purpose of the commit?

[21:19] <[Coke]> s/commit/PR/

[21:19] <MasterDuke> --> Nil return constraints are good for performance

[21:20] <MasterDuke> so i went through and added them everywhere i thought it made sense

[21:21] <timotimo> OK

[21:21] <MasterDuke> a couple were mistaken, but it's still a bunch of changes (though it did spectest clean at the time)

[21:21] <timotimo> were you able to measure any change in performance for those?

[21:21] <MasterDuke> nothing very noticeable

[21:22] <timotimo> ok :(

[21:22] <MasterDuke> though i like being explicit, so i would argue that alone is a benefit

[21:22] <timotimo> fair enough

[21:23] <[Coke]> if the performance increase isn't noticable, why do it?

[21:24] <[Coke]> so that leaves "making it explicit", which I would argue we don't care about in core. we want fast in core.

[21:24] <MasterDuke> well, just because the difference isn't noticeable now doesn't mean it won't be more so in the future

[21:36] <lizmat> right: afaik, --> Nil is not handled by the optimizer just yet

[21:37] <MasterDuke> i know timotimo said it was faster, but maybe that was more in a theoretical way

[21:40] <MasterDuke> benchable6: compare sub a() { my $a = rand; }; a() for ^5_000_000 ||| sub b(--> Nil) { my $a = rand; }; a() for ^5_000_000;

[21:40] <benchable6> MasterDuke, ¦«sub»:Cannot find this revision

[21:41] <MasterDuke> benchable6: compare HEAD sub a() { my $a = rand; }; a() for ^5_000_000 ||| sub b(--> Nil) { my $a = rand; }; a() for ^5_000_000;

[21:41] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[21:41] <benchable6> MasterDuke, ¦«HEAD»:04===SORRY!04=== Error while compiling -e␤Undeclared routine:␤    a used at line 1␤

[21:41] <MasterDuke> benchable6: compare HEAD sub a() { my $a = rand; }; a() for ^5_000_000 ||| sub b(--> Nil) { my $a = rand; }; b() for ^5_000_000;

[21:41] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[21:41] <benchable6> MasterDuke, ¦«HEAD»:Benchmark: ␤Timing 10 iterations of 0, 1...␤«timed out after 10 seconds, output»:

[21:42] <MasterDuke> benchable6: compare HEAD sub a() { my $a = rand; }; a() for ^2_000_000 ||| sub b(--> Nil) { my $a = rand; }; b() for ^2_000_000;

[21:42] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[21:42] <benchable6> MasterDuke, ¦«HEAD»:Benchmark: ␤Timing 10 iterations of 0, 1...␤         0: 8.2902 wallclock secs @ 1.2062/s (n=10)␤«timed out after 10 seconds, output»:

[21:42] <[Coke]> gah

[21:42] <MasterDuke> benchable6: compare HEAD sub a() { my $a = rand; }; a() for ^1_000_000 ||| sub b(--> Nil) { my $a = rand; }; b() for ^1_000_000;

[21:42] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[21:42] <benchable6> MasterDuke, https://gist.github.com/aa7e16a86d05f1bf8115339931d5b9cf

[21:42] <lizmat> MasterDuke: the https://github.com/rakudo/rakudo/pull/876 seems to have conflicts ?

[21:44] <MasterDuke> lizmat: yeah, it's pretty old. i was wondering if i should go to the effort of fixing them and addressing the comments

[21:44] <lizmat> I'll merge it if it's clean  :-)

[21:45] <lizmat> unless people have objections ?

[21:45] <MasterDuke> [Coke], timotimo, lizmat: if you look at the benchable6 results (and i confirmed the same thing on my machine), the --> Nil version is slightly faster

[21:45] <MasterDuke> but it does take a lot of iterations to notice it

[21:46] <MasterDuke> lizmat: cool, i'll see about revamping it then

[21:46] * [Coke] defers to lizmat.

[21:47] <Geth> ¦ rakudo/nom: adb6f87e88 | (Elizabeth Mattijsen)++ | src/core/control.pm

[21:47] <Geth> ¦ rakudo/nom: Make CLONE-HASH-DECONTAINERIZED a bit smarter

[21:47] <Geth> ¦ rakudo/nom:

[21:47] <Geth> ¦ rakudo/nom: Also tried moving that to Rakudo::Internals, but as a method the result

[21:47] <Geth> ¦ rakudo/nom: appears to always be HLLized, which sorta defeats the purpose.

[21:47] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/adb6f87e88

[21:48] * [Coke] really dislikes the opcode name "iterval". :)

[21:48] <IOninja> why?

[21:48] <[Coke]> because it's "interval" spelled wrong (except it isn't)

[21:49] <IOninja> ah :)

[22:20] <lizmat> m: my %h = a => 42, b => 666; say %h.DUMP  # this appears to be borked for a long time already

[22:20] <camelia> rakudo-moar adb6f8: OUTPUT: «Hash<1>(␤    :$!descriptor(Perl6::Metamodel::ContainerDescriptor<2>(...)),␤    :$!storage(BOOTHash<3>(...))␤)␤»

[22:22] <lizmat> ah, it only looks borked  :-)

[22:22] * [Coke] has apparently forgotten there was a .DUMP

[22:23] <[Coke]> is that the method form of dd?

[22:24] <lizmat> no, this predates dd by a long shot: appears to be some debugging aid from way back

[22:24] <[Coke]> kill it!

[22:24] <[Coke]> :)

[22:26] * lizmat is tempted

[22:26] * lizmat has some experience

[22:35] <Geth> ¦ rakudo/nom: 3de7b087b4 | (Elizabeth Mattijsen)++ | src/core/Hash.pm

[22:35] <Geth> ¦ rakudo/nom: Streamline Hash.DUMP a bit

[22:35] <Geth> ¦ rakudo/nom:

[22:35] <Geth> ¦ rakudo/nom: But it should probably be removed, as it looks like a very old

[22:35] <Geth> ¦ rakudo/nom: debugging aid.

[22:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3de7b087b4

[22:44] <lizmat> good night, #perl6-dev!

[22:44] <IOninja> night

[22:51] <timotimo> MasterDuke: i'm not actually sure i said anything about --> Nil being faster actually? :S

[22:51] <IOninja> you did

[22:52] <timotimo> oh

[22:52] <IOninja> timotimo: https://irclog.perlgeek.de/perl6-dev/2016-09-10#i_13184818

[22:52] <timotimo> maybe we're clever about generating the right kind of return code when we have --> Nil

[22:53] <IOninja> I think it bypasses the return type typecheck if it detects a Nil

[22:53] <timotimo> cool

[22:53] <timotimo> maybe i leaned a bit too far out of the window when i said "very good for performance"

[22:54] <IOninja> m: sub foo () {$ = 42}; for ^2000000 { $ = foo }; say now - INIT now

[22:54] <camelia> rakudo-moar 3de7b0: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[22:54] <IOninja> wat?

[22:55] <IOninja> oh, optimizer messes it up

[22:58] <IOninja> m: sub foo () {42}; for ^2000000 { $ = foo }; say now - INIT now

[22:58] <camelia> rakudo-moar 3de7b0: OUTPUT: «1.036167␤»

[22:58] <IOninja> m: sub foo (-->Nil) {42}; for ^2000000 { $ = foo }; say now - INIT now

[22:58] <camelia> rakudo-moar 3de7b0: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤1.2373463␤»

[22:58] <IOninja> m: sub foo (-->Nil) {$ = 42}; for ^2000000 { $ = foo }; say now - INIT now

[22:58] <camelia> rakudo-moar 3de7b0: OUTPUT: «1.23535806␤»

[22:58] <IOninja> m: sub foo (-->Nil) {$ = 42}; for ^2000000 { $ = foo }; say now - INIT now

[22:58] <camelia> rakudo-moar 3de7b0: OUTPUT: «1.2348875␤»

[22:58] <IOninja> m: sub foo (-->Nil) {$ = 42}; for ^2000000 { $ = foo }; say now - INIT now

[22:58] <camelia> rakudo-moar 3de7b0: OUTPUT: «1.317078601␤»

[22:59] <IOninja> m: sub foo () {42}; for ^2000000 { $ = foo }; say now - INIT now

[22:59] <camelia> rakudo-moar 3de7b0: OUTPUT: «0.9883682␤»

[22:59] <IOninja> m: sub foo () {42}; for ^2000000 { $ = foo }; say now - INIT now

[22:59] <camelia> rakudo-moar 3de7b0: OUTPUT: «0.9765939␤»

[22:59] * IOninja shrugs

[22:59] <timotimo> hm.
