[00:23] <samcv> .tell Zoffix dunno if you'd be interesed in this. should be an easy fix. But DateTime's - now doesn't work. though DateTime - now.DateTime works. so i guess it doesn't check if it can coerce to a DateTime object

[00:23] <yoleaux> samcv: I'll pass your message to Zoffix.

[00:24] <Zoffix> .

[00:24] <yoleaux> 00:23Z <samcv> Zoffix: dunno if you'd be interesed in this. should be an easy fix. But DateTime's - now doesn't work. though DateTime - now.DateTime works. so i guess it doesn't check if it can coerce to a DateTime object

[00:25] <Zoffix> samcv: that's cause there's an ambiguity: it could mean $date-time - now.DateTime (returning an Int of days) or $date-time.Instant - now (returning Duration object)

[00:27] <samcv> ah ok

[00:27] <samcv> thanks

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: 4ef28a7bcb | (Timo Paulssen)++ | src/core/ThreadPoolScheduler.pm6

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: calculate $smooth-per-core-util without .sum

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations:

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: we don't yet manage to throw the named args hash

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: away for the sum method, so we save a bunch of

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: allocations here.

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: review: https://github.com/rakudo/rakudo/commit/4ef28a7bcb

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: 8f4a5a5333 | (Timo Paulssen)++ | src/core/ThreadPoolScheduler.pm6

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: replace for ^$foo with native int loop

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations:

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: creating the range and its iterator was the

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: single most expensive bunch of allocations.

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations:

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: Moving the variables to the front also allows

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: us to get away without taking a closure here.

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: review: https://github.com/rakudo/rakudo/commit/8f4a5a5333

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: d425421644 | (Timo Paulssen)++ | src/core/ThreadPoolScheduler.pm6

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: nqp-ify a little bit of math

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations:

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: manually constant-folding away a multiplication

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: and calling nqp math ops directly saves us pretty

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: much all boxing that used to happen here.

[01:09] <Geth> Â¦ rakudo/supervisor_fewer_allocations: review: https://github.com/rakudo/rakudo/commit/d425421644

[01:16] <AlexDaniel> reportable6: 2018-03-19T00:00:00Z 2018-03-26T00:00:00Z

[01:16] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[01:17] <reportable6> AlexDaniel, https://gist.github.com/0ee777ff9662ddb627fdadf09d73162d

[01:17] <AlexDaniel> I'm fine. Thanks

[01:18] <AlexDaniel> reportable6: 2018-03-19T00:00:00Z 2018-03-26T00:00:00Z

[01:18] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[01:18] <AlexDaniel> reportable6: 2018-03-19T00:00:00Z 2018-03-26T00:00:00Z

[01:18] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[01:19] <reportable6> AlexDaniel, https://gist.github.com/2494cd8ee2e36dfcb7940044eb4e4d14

[01:29] <Geth> Â¦ rakudo: db7361a385 | (Zoffix Znet)++ | 2 files

[01:29] <Geth> Â¦ rakudo: Fix bad error on Lock.protect with wrong args

[01:29] <Geth> Â¦ rakudo:

[01:29] <Geth> Â¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1644 R#1644

[01:29] <Geth> Â¦ rakudo:

[01:29] <synopsebot> R#1644 [open]: https://github.com/rakudo/rakudo/issues/1644 Lock.protect({}) fails, but with surprising message

[01:29] <Geth> Â¦ rakudo: The LEAVE phaser gets executed when wrong args are given,

[01:29] <Geth> Â¦ rakudo: which causes LTA error: "unlock requires a concrete object

[01:29] <Geth> Â¦ rakudo: with REPR ReentrantMutex".

[01:29] <Geth> Â¦ rakudo:

[01:29] <Geth> Â¦ rakudo: Fix by making the method a multi, moving arg matching out of the

[01:29] <Geth> Â¦ rakudo: block with the LEAVE phaser.

[01:29] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/db7361a385

[01:35] <Geth> Â¦ rakudo: timo++ created pull request #1653: Supervisor fewer allocations

[01:35] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1653

[03:25] <Geth> Â¦ roast: d733c2a9c5 | (Zoffix Znet)++ | S02-types/num.t

[03:25] <Geth> Â¦ roast: No parsing glitches in the way Num is parsed

[03:25] <Geth> Â¦ roast:

[03:25] <Geth> Â¦ roast: Closes https://github.com/rakudo/rakudo/issues/1626

[03:25] <Geth> Â¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/8422d7b4e23678b5a6c

[03:25] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/d733c2a9c5

[03:28] <Geth> Â¦ rakudo: 646f9211cf | (Samantha McVey)++ | 2 files

[03:28] <Geth> Â¦ rakudo: Add ShiftJIS decode/encode support for MoarVM

[03:28] <Geth> Â¦ rakudo:

[03:28] <Geth> Â¦ rakudo: This makes the new shiftjis support in MoarVM accessible. It is

[03:28] <Geth> Â¦ rakudo: accessible as windows-932 because that is the dialect of shiftjis that

[03:28] <Geth> Â¦ rakudo: was implemented. It is not listed as shiftjis to maintain forward

[03:28] <Geth> Â¦ rakudo: compatibility in case other shiftjis (or the original) are added in

[03:28] <Geth> Â¦ rakudo: later.

[03:28] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/646f9211cf

[03:45] <Geth> Â¦ roast: f693c5547f | (Samantha McVey)++ | 3 files

[03:45] <Geth> Â¦ roast: Add shiftjis (windows-932) encoding tests

[03:45] <Geth> Â¦ roast:

[03:45] <Geth> Â¦ roast: Tests encode, decode, reading from a filehandle.

[03:45] <Geth> Â¦ roast: Also tests that replacement's work properly on unencodable bytes

[03:45] <Geth> Â¦ roast: encountered on decoding or unencodable Unicode encountered on encoding.

[03:45] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/f693c5547f

[03:49] <Geth> Â¦ roast: 589e30a8e8 | (Zoffix Znet)++ | S32-num/stringify.t

[03:49] <Geth> Â¦ roast: No precision lost in Num stringification

[03:49] <Geth> Â¦ roast:

[03:49] <Geth> Â¦ roast: Closes RT#127184: https://rt.perl.org/Ticket/Display.html?id=127184

[03:49] <Geth> Â¦ roast: MoarVM fix: https://github.com/MoarVM/MoarVM/commit/067c0594103a025472

[03:49] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/589e30a8e8

[03:49] <synopsebot> RT#127184 [open]: https://rt.perl.org/Ticket/Display.html?id=127184 [BUG]  One digit short to correctly stringify a double

[03:56] <Geth> Â¦ roast: 01d02dafb6 | (Zoffix Znet)++ | S32-num/stringify.t

[03:56] <Geth> Â¦ roast: Test same Nums strigify the same

[03:56] <Geth> Â¦ roast:

[03:56] <Geth> Â¦ roast: Part of RT#132330: https://rt.perl.org/Ticket/Display.html?id=132330

[03:56] <Geth> Â¦ roast: Fixes https://github.com/MoarVM/MoarVM/commit/067c0594103a025

[03:56] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/8841c4241b4faa8

[03:56] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/af2eb8a7f7d4344

[03:56] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/4d3fc2818d0032b

[03:56] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/8422d7b4e23678b

[03:56] <synopsebot> RT#132330 [open]: https://rt.perl.org/Ticket/Display.html?id=132330 [MATH] Floating point anomalies

[03:56] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/a2a2a745c4242d1

[03:56] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/01d02dafb6

[03:56] <Geth> Â¦ rakudo: f48636011c | (Samantha McVey)++ | t/spectest.data

[03:56] <Geth> Â¦ rakudo: Add shiftjis encoding test to spectest.data

[03:56] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f48636011c

[04:00] <Geth> Â¦ roast: b6d5364fe0 | (Zoffix Znet)++ | S02-types/num.t

[04:00] <Geth> Â¦ roast: Nums that are close to each other parsed correctly as different

[04:00] <Geth> Â¦ roast:

[04:00] <Geth> Â¦ roast: Part of RT#132330: https://rt.perl.org/Ticket/Display.html?id=132330

[04:00] <Geth> Â¦ roast: Fix:  https://github.com/MoarVM/MoarVM/commit/067c0594103a025

[04:00] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/8841c4241b4faa8

[04:00] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/af2eb8a7f7d4344

[04:00] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/4d3fc2818d0032b

[04:00] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/8422d7b4e23678b

[04:00] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/a2a2a745c4242d1

[04:00] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/b6d5364fe0

[04:03] <Geth> Â¦ roast: 855af84f82 | (Zoffix Znet)++ | S02-types/num.t

[04:03] <Geth> Â¦ roast: no parsing glitches in the way Num is parsed (2)

[04:03] <Geth> Â¦ roast:

[04:03] <Geth> Â¦ roast: Part of RT#132330: https://rt.perl.org/Ticket/Display.html?id=132330

[04:03] <Geth> Â¦ roast: Fix:  https://github.com/MoarVM/MoarVM/commit/067c0594103a025

[04:03] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/8841c4241b4faa8

[04:03] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/af2eb8a7f7d4344

[04:03] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/4d3fc2818d0032b

[04:03] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/8422d7b4e23678b

[04:03] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/a2a2a745c4242d1

[04:03] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/855af84f82

[04:16] <Geth> Â¦ roast: f4a6c635f4 | (Zoffix Znet)++ | S32-str/sprintf.t

[04:16] <Geth> Â¦ roast: sprintf maintains sane precision when stringifying nums

[04:16] <Geth> Â¦ roast:

[04:16] <Geth> Â¦ roast: Part of RT#132330: https://rt.perl.org/Ticket/Display.html?id=132330

[04:16] <Geth> Â¦ roast: Fix:  https://github.com/MoarVM/MoarVM/commit/067c0594103a025

[04:16] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/8841c4241b4faa8

[04:16] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/af2eb8a7f7d4344

[04:16] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/4d3fc2818d0032b

[04:17] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/8422d7b4e23678b

[04:17] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/a2a2a745c4242d1

[04:17] <synopsebot> RT#132330 [open]: https://rt.perl.org/Ticket/Display.html?id=132330 [MATH] Floating point anomalies

[04:17] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/f4a6c635f4

[04:25] <Geth> Â¦ roast: d1faf1d049 | (Zoffix Znet)++ | S02-types/set.t

[04:25] <Geth> Â¦ roast: Nums that are close to each other remain distinct when put in sets

[04:25] <Geth> Â¦ roast:

[04:25] <Geth> Â¦ roast: Part of RT#132330: https://rt.perl.org/Ticket/Display.html?id=132330

[04:25] <Geth> Â¦ roast: Fix:  https://github.com/MoarVM/MoarVM/commit/067c0594103a025

[04:25] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/8841c4241b4faa8

[04:25] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/af2eb8a7f7d4344

[04:25] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/4d3fc2818d0032b

[04:25] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/8422d7b4e23678b

[04:25] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/a2a2a745c4242d1

[04:25] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/d1faf1d049

[04:37] <Geth> Â¦ roast: 7fdd5372b8 | (Zoffix Znet)++ | S02-types/num.t

[04:37] <Geth> Â¦ roast: Num literals yield closest available Num to their nominal value

[04:37] <Geth> Â¦ roast:

[04:37] <Geth> Â¦ roast: RT#128912: https://rt.perl.org/Ticket/Display.html?id=128912

[04:37] <Geth> Â¦ roast: Fix:  https://github.com/MoarVM/MoarVM/commit/067c0594103a025

[04:37] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/8841c4241b4faa8

[04:37] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/af2eb8a7f7d4344

[04:37] <Geth> Â¦ roast:       https://github.com/MoarVM/MoarVM/commit/4d3fc2818d0032b

[04:37] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/8422d7b4e23678b

[04:37] <synopsebot> RT#128912 [open]: https://rt.perl.org/Ticket/Display.html?id=128912 [BUG] decimal->float bad rounding

[04:37] <Geth> Â¦ roast:       https://github.com/rakudo/rakudo/commit/a2a2a745c4242d1

[04:37] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/7fdd5372b8

[05:45] <nine> ~~

[05:45] <yoleaux> 25 Mar 2018 23:33Z <Zoffix> nine: any build jobs that build MoarVM/nqp/rakudo separately from scratch and check exit code fail now after this message " No rule to make target 'gen/nqp-version', needed by 'blib/Perl6/ModuleLoader.moarvm'". You can repro with this set of commands: https://gist.github.com/zoffixznet/03fac7a814057919574f703525db42a8

[05:45] <yoleaux> 02:21Z <Zoffix> nine: Did a bit of digging and wrote all my findings in https://github.com/rakudo/rakudo/issues/1654

[05:47] <nine> .tell Zoffix gen/nqp-version gets created by the check_nqp_version target which is run by m-all, so a make, make test or make install will all create the file. But maybe you're running another make target that does not imply m-all? Btw. I've had a more bullet proof version already, but that wouldn't work on nmake...

[05:47] <yoleaux> nine: I'll pass your message to Zoffix.

[05:53] <nine> .tell Zoffix scrap that, I see this in your output: /home/cpan/perl5/perlbrew/perls/perl-5.24.0/bin/perl tools/build/check-nqp-version.pl /home/cpan/R/install/bin/nqp-m

[05:53] <yoleaux> nine: I'll pass your message to Zoffix.

[05:53] <nine> .tell Zoffix I assume you get output from /home/cpan/R/install/bin/nqp-m --show-config | grep source-digest

[05:53] <yoleaux> nine: I'll pass your message to Zoffix.

[06:19] <Zoffix> .

[06:19] <yoleaux> 05:47Z <nine> Zoffix: gen/nqp-version gets created by the check_nqp_version target which is run by m-all, so a make, make test or make install will all create the file. But maybe you're running another make target that does not imply m-all? Btw. I've had a more bullet proof version already, but that wouldn't work on nmake...

[06:19] <yoleaux> 05:53Z <nine> Zoffix: scrap that, I see this in your output: /home/cpan/perl5/perlbrew/perls/perl-5.24.0/bin/perl tools/build/check-nqp-version.pl /home/cpan/R/install/bin/nqp-m

[06:19] <yoleaux> 05:53Z <nine> Zoffix: I assume you get output from /home/cpan/R/install/bin/nqp-m --show-config | grep source-digest

[06:19] <Zoffix> $ /home/zoffix/R/install/bin/nqp-m --show-config | grep source-digest

[06:19] <Zoffix> nqp::source-digest=f535bf491741d4a8a99257997be7bfa950f04899

[06:19] <Zoffix> nine: ^ yeah I get that

[06:20] <Zoffix> I mean, this is on working version, after I ran `make clean` on a blown up install and re-ran the install

[06:20] * Zoffix nukes gen/nqp-version and tries again and then will run the --show-config after/if it blows up

[06:22] <Zoffix> Oh, I see the reply on the Issue now

[06:23] <Zoffix> But yeah after it blows up the show-config still shows stuff: $ /home/zoffix/R/install/bin/nqp-m --show-config | grep source-digest

[06:23] <Zoffix> nqp::source-digest=f535bf491741d4a8a99257997be7bfa950f04899

[06:25] <Zoffix> Yup, tossing `-j` from make avoids the problem :)

[07:14] <[Tux]> Failed running /pro/bin/perl5.26.0 Configure.pl --backends=moar --gen-moar=master --gen-nqp=master --git-reference="/pro/3gl/CPAN/rakudobrew/git_reference" --make-install  at /pro/3gl/CPAN/rakudobrew/bin/rakudobrew line 57.

[07:14] <[Tux]> main::run("/pro/bin/perl5.26.0 Configure.pl --backends=moar --gen-moar=m"...) called at /pro/3gl/CPAN/rakudobrew/bin/rakudobrew line 382

[07:14] <[Tux]> main::build_impl("moar-blead", undef, "") called at /pro/3gl/CPAN/rakudobrew/bin/rakudobrew line 115

[07:14] <[Tux]> Makefile:16: recipe for target 'moar' failed

[07:15] <[Tux]> and I am up-to-date with rakudobrew

[07:59] <[Tux]> Rakudo version 2018.03-81-gf48636011 - MoarVM version 2018.03-29-g621ca3c22

[07:59] <[Tux]> csv-test-xs-20      0.428 -  0.505

[07:59] <[Tux]> csv-ip5xs           0.901 -  0.972

[07:59] <[Tux]> test-t --race       1.057 -  1.067

[07:59] <[Tux]> test-t              2.497 -  2.500

[07:59] <[Tux]> csv-ip5xs-20        8.658 -  8.876

[07:59] <[Tux]> test                9.100 -  9.429

[07:59] <[Tux]> test-t-20 --race   15.691 - 16.397

[07:59] <[Tux]> csv-parser         36.869 - 37.926

[07:59] <[Tux]> test-t-20          44.599 - 45.585

[09:57] <lizmat> Files=1236, Tests=76229, 309 wallclock secs (14.87 usr  5.15 sys + 2132.87 cusr 206.87 csys = 2359.76 CPU)

[10:03] <Geth> Â¦ rakudo/master: 4 commits pushed by (Timo Paulssen)++, (Elizabeth Mattijsen)++

[10:03] <Geth> Â¦ rakudo/master: 4ef28a7bcb | calculate $smooth-per-core-util without .sum

[10:03] <Geth> Â¦ rakudo/master: 8f4a5a5333 | replace for ^$foo with native int loop

[10:03] <Geth> Â¦ rakudo/master: d425421644 | nqp-ify a little bit of math

[10:03] <Geth> Â¦ rakudo/master: 4032e62eea | Merge pull request #1653 from rakudo/supervisor_fewer_allocations

[10:03] <Geth> Â¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/f48636011cf1...4032e62eeaa9

[11:08] <Geth> Â¦ rakudo: d0fbe7447a | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm6

[11:08] <Geth> Â¦ rakudo: Inline .getrusage-total to reduce nul-load overhead

[11:08] <Geth> Â¦ rakudo:

[11:08] <Geth> Â¦ rakudo: - fewer frames entered / BootHashes allocated

[11:08] <Geth> Â¦ rakudo: - fewer Ints allocated

[11:08] <Geth> Â¦ rakudo:   - assiging a native int from a sub returning a native int allocates an Int

[11:08] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d0fbe7447a

[11:16] <pmurias> are the semantics where storing a 2**40+2 into an int32 overflows but storing 2**80 throws dies intentional and wanted?

[11:16] <yoleaux> 05:40Z <Zoffix> pmurias: Are you sure nqp::div_In to make Nums is the right approach? This should be True: use nqp; dd nqp::div_In(99989999999999991, 100_000_000_000_000_000) == nqp::div_In(9998999999999999, 10_000_000_000_000_000);  But it's converting both of those Ints to doubles before doing the division and precision gets busted

[11:43] <lizmat> notable6: weekly

[11:43] <notable6> lizmat, 3 notes: https://gist.github.com/227027f16364524b14b4e88c74052271

[12:12] <stmuk> lizmat: note also https://rakudup.github.io/ rebranding

[12:14] <lizmat> stmuk: noted  :-)

[12:26] <lizmat> reportable6: 2018-03-19T00:00:00Z 2018-03-26T00:00:00Z

[12:26] <reportable6> lizmat, OK, working on it! This may take up to 40 seconds

[12:27] <lizmat> hmmm..  looks like I killed reportable6 ?

[12:27] <lizmat> reportable6: 2018-03-19T00:00:00Z 2018-03-26T00:00:00Z

[12:27] <reportable6> lizmat, OK, working on it! This may take up to 40 seconds

[12:28] <reportable6> lizmat, https://gist.github.com/438c5ac0b1da6c04beb0b10645eff5c5

[12:28] <lizmat> whee!  :-)

[12:40] <lizmat> m: my $a = 42; $a ** $a ** $a   # but but but

[12:40] <camelia> rakudo-moar d0fbe7447: OUTPUT: Â«WARNINGS for <tmp>:â¤Useless use of "**" in expression "$a ** $a **" in sink context (line 1)â¤Numeric overflowâ¤  in block <unit> at <tmp> line 1â¤â¤Â»

[14:25] <AlexDaniel> actually, maybe there are now less segfaults after R#1645 ? Maybe reportable won't die like this anymore.

[14:25] <synopsebot> R#1645 [open]: https://github.com/rakudo/rakudo/issues/1645 [SEGV][regression][â  blocker â ] Very simple spesh-related segfault

[14:25] <AlexDaniel> reportable6: uptime

[14:25] <reportable6> AlexDaniel, 1 hour, 4 minutes, and 41 seconds, 201.992188MiB maxrss. This is Rakudo version 2018.02.1-166-g51c4d4d89 built on MoarVM version 2018.02-171-geee5be412 implementing Perl 6.c.

[14:25] <AlexDaniel> that rakudo is *relatively* old

[14:44] <Geth> Â¦ rakudo: 3e9b705ea4 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperRaceSharedImpl.pm6

[14:44] <Geth> Â¦ rakudo: Streamline .hyper.grep batch producer

[14:44] <Geth> Â¦ rakudo:

[14:44] <Geth> Â¦ rakudo: This makes the producer go from 810 msecs to 639 msecs for something like

[14:44] <Geth> Â¦ rakudo:   say ^Inf .hyper.grep( *.is-prime ).skip(9999).head

[14:44] <Geth> Â¦ rakudo:

[14:44] <Geth> Â¦ rakudo: Instead of creating a new IterationBuffer for the result, the existing

[14:44] <Geth> Â¦ rakudo: IterationBuffer is reused.

[14:44] <Geth> Â¦ rakudo:

[14:44] <Geth> Â¦ rakudo: The --profile shows significantly fewer allocations.

[14:44] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3e9b705ea4

[15:17] <Zoffix> pmurias: when I noticed that behaviour last night, I was certain it's a bug. Our goal is to throw on assignment and to overflow on modifications (like $x++). It doesn't make much sense to me that int32 would be overflowing for values <64-bit and throwing for >64-bit values.

[15:18] <Zoffix> pmurias: there's this old, partially filed ticket about inconsistencies in native types: https://rt.perl.org/Ticket/Display.html?id=127409#ticket-history

[15:20] <pmurias> the current behavior to me seems to be accidental rather than intentional

[15:33] <jnthn> oh heh, I missed that protect was fixed by switching it to a multi...

[15:34] <jnthn> Wasn't mentioned on the ticket :P

[15:35] <jnthn> oh, it is

[15:35] <jnthn> Just very small so I missed it

[15:36] <jnthn> Zoffix: Did https://github.com/rakudo/rakudo/issues/1644 not get a test for a reason?

[15:39] <Zoffix> jnthn: it's in the same commit: https://github.com/rakudo/rakudo/commit/db7361a385d9d6da2978ac38bb26af394a7cb3fe

[15:39] <Zoffix> jnthn: I didn't want to spec that some arguments give X::Multi::NoMatch

[15:39] <jnthn> Ah, I see

[15:39] <jnthn> OK, fair enough

[15:39] <jnthn> I wasn't too keen on specing that either

[15:42] <Geth> Â¦ rakudo: 299dc6fc55 | (Jonathan Worthington)++ | 2 files

[15:42] <Geth> Â¦ rakudo: Fix Lock::Async.protect to match Lock.protect

[15:42] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/299dc6fc55

[16:17] <Geth> Â¦ roast: dogbert17++ created pull request #407: Add missing test for RT 128758

[16:17] <Geth> Â¦ roast: review: https://github.com/perl6/roast/pull/407

[16:17] <synopsebot> RT#128758 [open]: https://rt.perl.org/Ticket/Display.html?id=128758 Reduce with numeric ops does not numify things if only one arg is passed ([*] set(1,2,3))

[16:19] <Geth> Â¦ roast: c7d45f680a | (Jan-Olof Hendig)++ | S03-metaops/reduce.t

[16:19] <Geth> Â¦ roast: Add missing test for RT 128758

[16:19] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/c7d45f680a

[16:19] <Geth> Â¦ roast: 6b0fcc2b91 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | S03-metaops/reduce.t

[16:19] <Geth> Â¦ roast: Merge pull request #407 from dogbert17/test-rt-128758

[16:19] <Geth> Â¦ roast:

[16:19] <Geth> Â¦ roast: Add missing test for RT 128758

[16:19] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/6b0fcc2b91

[16:21] <Geth> Â¦ nqp: d9d648efbe | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[16:21] <Geth> Â¦ nqp: Bump MOAR_REVISION for child process ID support

[16:21] <Geth> Â¦ nqp: review: https://github.com/perl6/nqp/commit/d9d648efbe

[16:21] <Geth> Â¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.03-26-gb1f64db...2018.03-30-g7198eb8

[16:27] <Geth> Â¦ rakudo: 1321917d1b | (Jonathan Worthington)++ | 2 files

[16:27] <Geth> Â¦ rakudo: Provide child process ID via Proc::Async

[16:27] <Geth> Â¦ rakudo:

[16:27] <Geth> Â¦ rakudo: The `ready` method now conveys the child process ID. A `pid` method

[16:27] <Geth> Â¦ rakudo: is added as an alias for `ready`. Arguably, we could just tell people

[16:27] <Geth> Â¦ rakudo: to use `ready`, but providing a `pid` alias feels like it will be a

[16:27] <Geth> Â¦ rakudo: little more self-documenting. Sharing a `Promise` between the two as

[16:27] <Geth> Â¦ rakudo: an implementation detail makes this cheap to do, and we never did

[16:27] <Geth> Â¦ rakudo: commit to what the `ready` `Promise` evaluates to, so it's safe to

[16:27] <Geth> Â¦ rakudo: make it end up evaluating to the PID too. So far its use has just

[16:27] <Geth> Â¦ rakudo: been as a "the process is started" signal, and it will continue to

[16:27] <Geth> Â¦ rakudo: serve as that just fine.

[16:27] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1321917d1b

[16:27] <Geth> Â¦ roast: cbb0422090 | (Jonathan Worthington)++ | S17-procasync/basic.t

[16:27] <Geth> Â¦ roast: Spectests to cover Proc::Async.pid

[16:27] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/cbb0422090

[16:29] <dogbert17> jnthn: did you just fix https://github.com/rakudo/rakudo/issues/1638 ?

[16:33] <jnthn> dogbert17: Pretty much; left a comment

[16:34] <dogbert17> cool

[16:47] <AlexDaniel> YAY!

[16:47] <AlexDaniel> I needed this :)

[16:48] <AlexDaniel> tbrowder_: by the way â

[16:48] <timotimo> here's a second bump coming already

[16:55] <Geth> Â¦ nqp: 833364342a | (Timo Paulssen)++ | tools/build/MOAR_REVISION

[16:55] <Geth> Â¦ nqp: bump moar for getrusage api change

[16:55] <Geth> Â¦ nqp: review: https://github.com/perl6/nqp/commit/833364342a

[16:55] <Geth> Â¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.03-30-g7198eb8...2018.03-31-gfdb5e4d6b

[16:55] <Geth> Â¦ rakudo: c71fa17d8d | (Timo Paulssen)++ | 4 files

[16:55] <Geth> Â¦ rakudo: adapt to allocation-free getrusage api

[16:55] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c71fa17d8d

[16:57] <AlexDaniel> Meaningless benchmark of the day: role Foo {}; my $x = 42; for ^1000 { .say; $x = $x does Foo }

[17:03] <jnthn> Heh, a 1000+ level deep inheritance chain. :)

[17:12] <dogbert17> and rakudobrew is also busted

[17:15] <Zoffix> timotimo: is there an nqp bump missing? (Just looking at commits log; haven't tried building stuff)

[17:16] <timotimo> that last commit also bumps nqp

[17:16] <Zoffix> Ah :D

[17:17] <timotimo> https://wakelift.de/p/1a39c0ea-adfb-45d2-b4ae-c29380197d71/ - proofreaders welcome

[17:21] <dogbert17> timotimo: I don't get this sentence 'However, "zero allocations" was in very close now.'

[17:22] <Zoffix> timotimo: "The math we were doing [...] were doing some boxing and unboxing"; s/were/was/;

[17:22] <AlexDaniel> m: say 42

[17:22] <camelia> rakudo-moar 1321917d1: OUTPUT: Â«42â¤Â»

[17:22] <AlexDaniel> e: say 42

[17:22] <evalable6> AlexDaniel, rakudo-moar c71fa17d8: OUTPUT: Â«Cannot test c71fa17d8da36b8cfcbd85584cee32566f25f059 (Commit exists, but a perl6 executable could not be built for it)Â»

[17:22] <Zoffix> Also in the same sentence there's a comma splice. "boxing and unboxing, a call" -> "boxing and unboxing. A call"

[17:22] * AlexDaniel grumbles

[17:23] <timotimo> look again

[17:23] * AlexDaniel removes the build in a hope that it's just a fluke

[17:24] <Zoffix> oh no comma splice, nm... (I would've used `;` instead of commas to separate the outer list)

[17:24] <Zoffix> Oh yeah looks good now :)

[17:24] <Zoffix> timotimo++ good blog/work :)

[17:25] <Zoffix> make test fails t/06-telemetry/01-basic.t and bunch of other telemetry tests

[17:26] <Zoffix> fuller output https://gist.github.com/zoffixznet/961a4b7eb997e3e4a7ef04d1509ab5a5

[17:26] <Zoffix> That's with master/master/master

[17:26] <AlexDaniel> e: say 42

[17:26] <evalable6> AlexDaniel, No build for c71fa17d8. Not sure how this happened!

[17:26] <timotimo> yes, i'm investigating, Zoffix

[17:28] <timotimo> m: use nqp; my int @foo; nqp::bindpos_i(@foo, 1, 1);

[17:28] <camelia> rakudo-moar 1321917d1: ( no output )

[17:28] <timotimo> ok, got the fix

[17:30] <Geth> Â¦ rakudo: 3468f6908b | (Timo Paulssen)++ | lib/Telemetry.pm6

[17:30] <Geth> Â¦ rakudo: fix telemetry with `int @data`

[17:30] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3468f6908b

[17:30] <timotimo> lizmat: can you add https://wakelift.de/2018/03/26/tangentially-related-work/ to the weekly today? :)

[17:44] <tbrowder_> AlexDaniel: ditto YAY!

[17:48] <[Coke]> timotimo++

[17:56] <travis-ci> Rakudo build failed. Timo Paulssen 'adapt to allocation-free getrusage api'

[17:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/358502929 https://github.com/rakudo/rakudo/compare/1321917d1b25...c71fa17d8da3

[17:56] <buggable> [travis build above] â  All failures are due to: failed make test (6 failures). Across all jobs, 4 unique test files failed.

[17:57] <timotimo> ^- it's already compiling the new build that probably fixes this exact failure

[18:01] <AlexDaniel> e: say 42

[18:01] <evalable6> AlexDaniel, rakudo-moar 3468f6908: OUTPUT: Â«42â¤Â»

[18:01] <AlexDaniel> \o/

[18:03] <timotimo> so travis, you're telling me the build has been running for 32 minutes and it hasn't even started a single sub-task yet?

[18:04] <timotimo> oh, no, it just wasn't loading. refreshing the page fixed it

[18:33] <Geth> Â¦ rakudo: 1c4eebe52a | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperRaceSharedImpl.pm6

[18:33] <Geth> Â¦ rakudo: Streamline .hyper.grep batch producer

[18:33] <Geth> Â¦ rakudo:

[18:33] <Geth> Â¦ rakudo: This makes the producer go about 2.5% faster for something like:

[18:33] <Geth> Â¦ rakudo:   say ^Inf .hyper.map( *.is-prime ).skip(99999).head

[18:33] <Geth> Â¦ rakudo:

[18:33] <Geth> Â¦ rakudo: The --profile shows significantly fewer allocations.

[18:33] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c4eebe52a

[18:46] <lizmat> oops, that was a pasto in the title  :-(   should have been .hyper.map  :-(

[18:50] <lizmat> m: use nqp; nqp::getrusage(my int @a); dd @a   # feels to me we need a MoarVM bump ?

[18:50] <camelia> rakudo-moar 3468f6908: OUTPUT: Â«array[int].new(0, 168415, 0, 42103, 78964, 0, 0, 0, 15067, 171, 0, 61600, 40, 0, 0, 0, 264, 12)â¤Â»

[18:50] <lizmat> huh?

[18:50] <lizmat> ah, I guess the bump was hidden somewhere

[18:59] <timotimo> it was

[18:59] <timotimo> :S

[18:59] <timotimo> also, that's a much nicer way to spell that that i really should have thought of, too %)

[19:20] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Streamline .hyper.grep batch producer

[19:20] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/358544783 https://github.com/rakudo/rakudo/compare/3468f6908ba5...1c4eebe52a04

[21:56] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/03/26/2018-13-apply-perl-6/

[22:26] * lizmat calls it a day

[22:55] <jnthn> lizmat++ # weekly
