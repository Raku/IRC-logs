[00:36] *** Kaiepi left
[00:40] *** committable6 left
[00:40] *** nativecallable6 joined
[00:40] *** statisfiable6 joined
[00:40] *** bisectable6 joined
[00:40] *** greppable6 joined
[00:40] *** committable6 joined
[01:26] *** skids joined
[01:29] *** stmuk_ joined
[01:32] *** stmuk left
[01:37] *** benchable6 joined
[02:29] <AlexDaniel> weekly: reportable: https://gist.github.com/2461392a6a1ebc7fe8d36f4f2845e803

[02:29] <notable6> AlexDaniel, Noted!

[02:30] <AlexDaniel> weekly: another squashathon happened, next squashathon on 2018-08-04 https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[02:30] <notable6> AlexDaniel, Noted!

[03:02] *** skids left
[03:12] *** skids joined
[03:38] *** BenGoldberg joined
[03:55] *** MasterDuke joined
[04:51] *** BenGoldberg left
[05:04] *** stmuk joined
[05:07] *** stmuk_ left
[05:11] *** skids left
[05:23] *** ufobat_ joined
[05:59] *** zostay left
[05:59] *** zostay joined
[06:16] *** releasable6 joined
[06:29] *** robertle joined
[06:59] *** brrt joined
[07:10] <[Tux]> samcv, maybe. I'm currently struggling with a bugfix that surfaced by the hash tests failing

[07:11] <[Tux]> what is the perl6ishest way to do this:

[07:11] <[Tux]> I hava an Array of Hash and I want an Array of a slice of each of the elements

[07:13] <[Tux]> p6: my @aoh = [{:a(1),:b(2),:c(3)},{:a(2),:b(3),:c(4)}]; my @h = <a c>; my @out = @aoh.list.map ([${@h}]);

[07:13] <camelia> rakudo-moar 032c6c0bb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3; my @h = <a c>; my @out = @aoh.list.map7⏏5 ([${@h}]);␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statem…»

[07:14] <[Tux]> p6: my @aoh = [{:a(1),:b(2),:c(3)},{:a(2),:b(3),:c(4)}]; my @h = <a c>; my @out = @aoh.list.map ([$_{@h}]);

[07:14] <camelia> rakudo-moar 032c6c0bb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3; my @h = <a c>; my @out = @aoh.list.map7⏏5 ([$_{@h}]);␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        state…»

[07:15] <samcv> m: my @aoh = [{:a(1),:b(2),:c(3)},{:a(2),:b(3),:c(4)}]; my @h = <a c>; say  @aoh.map({ $_{@h}})

[07:15] <camelia> rakudo-moar 032c6c0bb: OUTPUT: «((1 3) (2 4))␤»

[07:15] <samcv> like this?

[07:16] <[Tux]> no, I wasn't clear enough, obviously :/

[07:17] * [Tux] tries to create a small test case

[07:21] <[Tux]> https://tux.nl/Files/t.pl

[07:26] <[Tux]> or in there shorter: my @out = [ @hdr ], $aoh.list.map([ $_{@hdr} ]);

[07:30] <[Tux]> my @out = [ @hdr ], $aoh.map({$[ $_{@hdr} ]}).Slip;

[07:30] <[Tux]>  

[07:30] <[Tux]> ^^^ that works

[07:31] *** brrt left
[08:03] *** dogbert17 left
[08:06] *** benchable6 left
[08:07] *** benchable6 joined
[08:07] *** nativecallable6 left
[08:07] *** statisfiable6 left
[08:07] *** bisectable6 left
[08:07] *** greppable6 left
[08:07] *** committable6 left
[08:07] *** committable6 joined
[08:07] *** greppable6 joined
[08:07] *** bisectable6 joined
[08:07] *** statisfiable6 joined
[08:07] *** nativecallable6 joined
[08:08] *** releasable6 left
[08:12] <[Tux]> Rakudo version 2018.06-85-g032c6c0bb - MoarVM version 2018.06-132-ga24033eb0

[08:12] <[Tux]> csv-test-xs-20      0.461 -  0.463

[08:12] <[Tux]> csv-ip5xs           0.902 -  0.905

[08:12] <[Tux]> test-t --race       0.962 -  0.999

[08:12] <[Tux]> test-t              2.299 -  2.413

[08:12] <[Tux]> csv-ip5xs-20        7.437 -  7.593

[08:12] <[Tux]> test                9.162 -  9.194

[08:12] <[Tux]> test-t-20 --race   14.868 - 14.900

[08:12] <[Tux]> csv-parser         26.941 - 27.932

[08:12] <[Tux]> test-t-20          41.077 - 41.205

[08:20] *** CIAvash[m] joined
[08:23] *** lizmat joined
[08:30] *** AlexDaniel`` joined
[08:42] <lizmat> .

[08:42] <yoleaux> 8 Jul 2018 22:41Z <DrForr> lizmat: Did you make any headway with Lembark's problem vis-a-vis readline? I've got time and inspiration to throw in whatever ideas you've got.

[08:44] <lizmat> .tell DrForr no I didn't.

[08:44] <yoleaux> lizmat: I'll pass your message to DrForr.

[09:05] *** releasable6 joined
[09:05] *** pmurias joined
[09:22] *** ilmari left
[09:23] *** ilmari joined
[09:23] *** ilmari left
[09:23] *** ilmari joined
[09:25] <Geth> ¦ nqp/truffle: 0f532d64b0 | (Paweł Murias)++ | 2 files

[09:25] <Geth> ¦ nqp/truffle: [truffle] Cleanup node construction, get rid of unneded method

[09:25] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/0f532d64b0

[09:30] *** brrt joined
[09:41] *** brrt left
[09:43] *** klapperl joined
[10:38] <Geth> ¦ rakudo: jkramer++ created pull request #2038: Include source file name in module-not-found error message.

[10:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2038

[10:41] *** brrt joined
[10:49] <Geth> ¦ rakudo: e93032a9a6 | (Elizabeth Mattijsen)++ | CREDITS

[10:49] <Geth> ¦ rakudo: Merge two entries for cognominal

[10:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e93032a9a6

[10:50] *** AlexDani` joined
[10:52] *** AlexDaniel left
[10:59] *** ExtraCrispy joined
[11:53] *** pmurias left
[12:12] *** pmurias joined
[12:22] *** Zoffix joined
[12:24] *** Zoffix left
[12:31] *** benjikun2 joined
[12:32] *** benjikun left
[12:54] <Geth> ¦ rakudo/rescalar: 49 commits pushed by (Jonathan Worthington)++

[12:54] <Geth> ¦ rakudo/rescalar: review: https://github.com/rakudo/rakudo/compare/7cf1207f313b...d0aab74164ce

[12:54] <jnthn> A rebase so I can see what spectsets I've actually busted :)

[12:55] <Geth> ¦ rakudo/rescalar: 05d7c39b40 | (Jonathan Worthington)++ | src/vm/moar/spesh-plugins.nqp

[12:55] <Geth> ¦ rakudo/rescalar: Use nqp::null as the "no Iterable" sentinel

[12:55] <Geth> ¦ rakudo/rescalar: 

[12:55] <Geth> ¦ rakudo/rescalar: Just in case the first lookup comes back with it as null, which can

[12:55] <Geth> ¦ rakudo/rescalar: apparently happen and then poisons it for the rest of time.

[12:55] <Geth> ¦ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/05d7c39b40

[12:57] <jnthn> After that, apparently only those that result from correcting the return decont of Proxy :)

[12:58] <timotimo> that sounds good

[13:04] <Geth> ¦ roast: 3fd9495f46 | (Jonathan Worthington)++ | 2 files

[13:04] <Geth> ¦ roast: Correct tests using return instead of return-rw

[13:04] <Geth> ¦ roast: 

[13:04] <Geth> ¦ roast: Even if the enclosing sub is marked `is rw` or `is raw`, it is still

[13:04] <Geth> ¦ roast: required to `return-rw` the `Proxy`. We got away with this so far, as

[13:04] <Geth> ¦ roast: Rakudo had an implementation limitation/bug that meant a `Proxy` being

[13:04] <Geth> ¦ roast: returned in a non-rw context would not be stripped from around the

[13:04] <Geth> ¦ roast: value. A Rakudo branch currently in progress fixes the issue. The

[13:04] <Geth> ¦ roast: corrected test works in both master and in the branch. However, the

[13:04] <Geth> ¦ roast: branch also fixes a couple of todo'd tests in one of these files too,

[13:04] <Geth> ¦ roast: which can then be un-todo'd once the branch merges.

[13:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3fd9495f46

[13:14] <Geth> ¦ roast: da2a3c726f | (Jonathan Worthington)++ | S06-traits/misc.t

[13:14] <Geth> ¦ roast: Remove over-specific and dubious error test

[13:14] <Geth> ¦ roast: 

[13:14] <Geth> ¦ roast: For one, this test checked for X::AdHoc, which a test should never do.

[13:14] <Geth> ¦ roast: It also checked that the error message contained the name of a readonly

[13:14] <Geth> ¦ roast: being assigned to (in parens too, for that matter). While we could in

[13:14] <Geth> ¦ roast: this particular case do that in Rakudo master, in numerous cases the

[13:14] <Geth> ¦ roast: information was not around at runtime to do this. Changes to Scalar

[13:14] <Geth> ¦ roast: <…commit message has 10 more lines…>

[13:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/da2a3c726f

[13:18] *** benjikun joined
[13:19] *** benjikun2 left
[13:20] <Geth> ¦ roast/6.c-errata: b25ed6b284 | (Jonathan Worthington)++ | 2 files

[13:20] <Geth> ¦ roast/6.c-errata: Correct tests using return instead of return-rw

[13:20] <Geth> ¦ roast/6.c-errata: 

[13:20] <Geth> ¦ roast/6.c-errata: Even if the enclosing sub is marked `is rw` or `is raw`, it is still

[13:20] <Geth> ¦ roast/6.c-errata: required to `return-rw` the `Proxy`. We got away with this so far, as

[13:20] <Geth> ¦ roast/6.c-errata: Rakudo had an implementation limitation/bug that meant a `Proxy` being

[13:20] <Geth> ¦ roast/6.c-errata: returned in a non-rw context would not be stripped from around the

[13:20] <Geth> ¦ roast/6.c-errata: value. A Rakudo branch currently in progress fixes the issue. The

[13:20] <Geth> ¦ roast/6.c-errata: corrected test works in both master and in the branch. However, the

[13:20] <Geth> ¦ roast/6.c-errata: branch also fixes a couple of todo'd tests in one of these files too,

[13:20] <Geth> ¦ roast/6.c-errata: which can then be un-todo'd once the branch merges.

[13:20] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/b25ed6b284

[13:21] <jnthn> Turns out the test I removed in da2a3c726f wasn't even in 6.c

[13:42] *** Zoffix joined
[13:43] <Zoffix> We have a wart in IO::Handle. In its TWEAK, it sets $!encoding, but that alone never sets up decoders

[13:43] <Geth> ¦ rakudo: 2d85f8a19c | (Jonas Kramer)++ | 3 files

[13:43] <Geth> ¦ rakudo: Include source file name in module-not-found error message.

[13:43] <Geth> ¦ rakudo: 

[13:43] <Geth> ¦ rakudo: Fixes rakudo/rakudo#2022.

[13:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2d85f8a19c

[13:43] <Geth> ¦ rakudo: 8fa9941468 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 3 files

[13:43] <Geth> ¦ rakudo: Merge pull request #2038 from jkramer/issue-2022

[13:43] <synopsebot> RAKUDO#2022 [closed]: https://github.com/rakudo/rakudo/issues/2022 [LTA] LTA error: "not found module" message does not include file

[13:43] <Geth> ¦ rakudo: 

[13:43] <Geth> ¦ rakudo: Include source file name in module-not-found error message.

[13:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8fa9941468

[13:46] <Zoffix> e: with class :: is IO::Handle {}.new { .encoding.say; .print: "foo"}

[13:46] <evalable6> Zoffix, rakudo-moar e93032a9a: OUTPUT: «(exit code 1) utf8␤Cannot do 'print' on a handle in binary mode␤  in block <unit> at /tmp/dbeuXgzaQW line 1␤␤»

[13:57] <Zoffix> probably can restructure and move the decoder creation to TWEAK, with .open not bothering with it if it's already set

[13:57] <Geth> ¦ nqp: ceabc66953 | (Jonathan Worthington)++ | src/vm/jvm/QAST/Compiler.nqp

[13:57] <Geth> ¦ nqp: Add no-op wantdecont for JVM backend

[13:57] <Geth> ¦ nqp: 

[13:57] <Geth> ¦ nqp: We currently don't push information about things we'd like to have

[13:57] <Geth> ¦ nqp: decontainerized down the tree on the JVM backend, so just make it

[13:57] <Geth> ¦ nqp: compile into something that will give a usable result, if non-optimal.

[13:57] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ceabc66953

[14:00] <Zoffix> R#2039

[14:00] <synopsebot> R#2039 [open]: https://github.com/rakudo/rakudo/issues/2039 [IO][LTA] LTA IO::Handle.encoding can have a value, but no valid decoder is setup

[14:00] *** Zoffix left
[14:03] *** skids joined
[14:05] <Geth> ¦ roast/handle-6.d: 3cefe0dc59 | (Zoffix Znet)++ | S32-io/io-handle.t

[14:05] <Geth> ¦ roast/handle-6.d: Start spec of IO::Handle.READ/.WRITE/.EOF

[14:05] <Geth> ¦ roast/handle-6.d: 

[14:05] <Geth> ¦ roast/handle-6.d: Blocked by R#2039 https://github.com/rakudo/rakudo/issues/2039

[14:05] <Geth> ¦ roast/handle-6.d: as without explicitly calling .encoding on handle creation

[14:05] <Geth> ¦ roast/handle-6.d: the character read/write methods explode.

[14:05] <Geth> ¦ roast/handle-6.d: review: https://github.com/perl6/roast/commit/3cefe0dc59

[14:05] <synopsebot> R#2039 [open]: https://github.com/rakudo/rakudo/issues/2039 [IO][LTA] LTA IO::Handle.encoding can have a value, but no valid decoder is setup

[14:09] <Geth> ¦ rakudo/handle-6.d: edf81bfef2 | (Zoffix Znet)++ | src/core/IO/Handle.pm6

[14:09] <Geth> ¦ rakudo/handle-6.d: Check if $!decoder is setup in IO::Handle.encoding…

[14:09] <Geth> ¦ rakudo/handle-6.d: 

[14:09] <Geth> ¦ rakudo/handle-6.d: …before we assume no work is needed. This likely won't be

[14:09] <Geth> ¦ rakudo/handle-6.d: needed when R#2039 https://github.com/rakudo/rakudo/issues/2039

[14:09] <Geth> ¦ rakudo/handle-6.d: is fixed to setup the decoder right when encoding is set on creation.

[14:09] <Geth> ¦ rakudo/handle-6.d: review: https://github.com/rakudo/rakudo/commit/edf81bfef2

[14:09] <synopsebot> R#2039 [open]: https://github.com/rakudo/rakudo/issues/2039 [IO][LTA] LTA IO::Handle.encoding can have a value, but no valid decoder is setup

[14:09] <Geth> ¦ rakudo/handle-6.d: 03d79975be | (Zoffix Znet)++ | 2 files

[14:09] <Geth> ¦ rakudo/handle-6.d: Change IO::Handle.*-internal methods to their final names

[14:10] <Geth> ¦ rakudo/handle-6.d: 

[14:10] <Geth> ¦ rakudo/handle-6.d: Per 6.d-prep list[^1], these are now named .WRITE/.READ/.EOF.

[14:10] <Geth> ¦ rakudo/handle-6.d: 

[14:10] <Geth> ¦ rakudo/handle-6.d: The spec[^2] for these is currently blocked by R#2039

[14:10] <Geth> ¦ rakudo/handle-6.d: https://github.com/rakudo/rakudo/issues/2039

[14:10] <Geth> ¦ rakudo/handle-6.d: 

[14:10] <Geth> ¦ rakudo/handle-6.d: [^1] https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#spec-iohandles-write-internal-read-internal-eof-internal

[14:10] <Geth> ¦ rakudo/handle-6.d: [^2] https://github.com/perl6/roast/commit/3cefe0dc59

[14:10] <Geth> ¦ rakudo/handle-6.d: review: https://github.com/rakudo/rakudo/commit/03d79975be

[14:11] <Geth> ¦ rakudo: zoffixznet self-assigned LTA IO::Handle.encoding can have a value, but no valid decoder is setup https://github.com/rakudo/rakudo/issues/2039

[14:18] *** travis-ci joined
[14:18] <travis-ci> NQP build failed. Jonathan Worthington 'Add no-op wantdecont for JVM backend

[14:18] <travis-ci> https://travis-ci.org/perl6/nqp/builds/401773842 https://github.com/perl6/nqp/compare/5c77fc36d0c8...ceabc6695315

[14:18] *** travis-ci left
[14:35] <Geth> ¦ nqp: d37fe51507 | (Jonathan Worthington)++ | 3 files

[14:35] <Geth> ¦ nqp: Implement casattr and atomicbindattr on JVM

[14:35] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d37fe51507

[14:40] <jnthn> That unbusts the JVM backend on my rescalar branch

[14:40] <jnthn> There's a bunch more things I want to do in that area, but I think perhaps it's sensible to merge the heart of it sooner rather than later.

[14:41] <jnthn> There's no immediate speed wins, though it paves the way for quite a few more in the future.

[14:41] <jnthn> Gets rid of an amount of C code in ext-ops

[14:41] <jnthn> Fixes the Proxy not being stripped on non-rw return bug

[14:42] <jnthn> Makes every Scalar 8 bytes (on 64-bit) smaller

[14:42] <jnthn> Currently stresstesting it; it's good with spectest

[14:46] <jnthn> Pro tip: remember to check out master of roast rather than stresstesting 6.c-errata and seeing a ton of passing todo tests :)

[14:51] *** travis-ci joined
[14:51] <travis-ci> NQP build failed. Jonathan Worthington 'Implement casattr and atomicbindattr on JVM'

[14:51] <travis-ci> https://travis-ci.org/perl6/nqp/builds/401790501 https://github.com/perl6/nqp/compare/ceabc6695315...d37fe515070a

[14:51] *** travis-ci left
[14:52] *** dogbert17 joined
[14:54] <lizmat> notable6: weekly

[14:54] <notable6> lizmat, 6 notes: https://gist.github.com/ce8fea5f8a0ab35cdb59a505f8b62c06

[15:02] <jnthn> releasable6: status

[15:02] <releasable6> jnthn, Next release in ≈12 days and ≈3 hours. 3 blockers. 0 out of 88 commits logged

[15:02] <releasable6> jnthn, Details: https://gist.github.com/26309646e30fe67f78439d4e18e8e2ab

[15:02] <jnthn> 2ish weeks. OK.

[15:03] <lizmat> which can be stretched of course, for a Rakudo * release  :-)

[15:06] <Geth> ¦ nqp: 39f1057452 | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[15:06] <Geth> ¦ nqp: Bump to latest MoarVM version

[15:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/39f1057452

[15:06] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-103-gaf455397f...2018.06-141-gcae4731

[15:08] <Geth> ¦ rakudo: c2446b03fa | (Jonathan Worthington)++ | tools/build/NQP_REVISION

[15:08] <Geth> ¦ rakudo: Bump NQP_REVISION

[15:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c2446b03fa

[15:08] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-27-gcec76ff79...2018.06-36-g39f1057

[15:08] <jnthn> Alright, here we go...

[15:10] *** brrt left
[15:17] *** ExtraCrispy left
[15:18] <Geth> ¦ rakudo/master: 51 commits pushed by (Jonathan Worthington)++

[15:18] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/c2446b03fa23...68ed6f2d874c

[15:18] <jnthn> That's the rescalar merge

[15:19] <jnthn> Please see the merge commit message for details

[15:19] <lizmat> ok, lemme try that again as well  :-)

[15:20] <timotimo> fantastic

[15:25] *** travis-ci joined
[15:25] <travis-ci> NQP build failed. Jonathan Worthington 'Bump to latest MoarVM version'

[15:25] <travis-ci> https://travis-ci.org/perl6/nqp/builds/401805286 https://github.com/perl6/nqp/compare/d37fe515070a...39f1057452e1

[15:25] *** travis-ci left
[15:32] <Tux__> On request ...

[15:32] <Tux__> Rakudo version 2018.06-140-g68ed6f2d8 - MoarVM version 2018.06-141-gcae4731e2

[15:32] <Tux__> csv-test-xs-20      0.443 -  0.458

[15:32] <Tux__> csv-ip5xs           0.965 -  0.972

[15:32] <Tux__> test-t --race       1.004 -  1.050

[15:32] <Tux__> test-t              2.387 -  2.427

[15:32] <Tux__> csv-ip5xs-20        8.572 -  8.807

[15:32] <Tux__> test                9.239 -  9.328

[15:32] *** Tux__ is now known as Tux

[15:32] <Tux> test-t-20 --race   14.367 - 14.735

[15:32] <yoleaux> 30 Jul 2015 15:10Z <[Coke]> Tux: if uchar has been tested on OS X? (I just installed quartz, xrdb, and now it runs without x errors, but if I run "uchar -d STUFF" it just prints out the original word.

[15:32] <yoleaux> 21 Dec 2015 11:15Z <brrt> Tux: whether he'd care to test the moarvm timos-jit-patch branch for the slowdown in the test

[15:32] <yoleaux> 21 Dec 2015 14:42Z <brrt> Tux: for my clarity whether the healthy numbers are from the fixed branch, and whether he's ok with me merging stuff

[15:32] <yoleaux> 17 Nov 2017 16:07Z <tony-o> Tux: bench now has cpu/sys/usr times in it

[15:32] <Tux> csv-parser         24.725 - 25.041

[15:32] <Tux> test-t-20          41.440 - 42.155

[15:33] *** Tux is now known as Guest96969

[15:33] *** Guest96969 is now known as |Tux|

[15:34] <|Tux|> Interesing yoleaux, keeping my messages for a nick that I cannot use, as it is registered to someone else :)

[15:41] *** Zoffix joined
[15:41] <lizmat> |Tux| thanks, confirms what I saw, this is groundwork for more optimizations to come

[15:41] <Zoffix> ZOFVM: Files=1297, Tests=153429, 148 wallclock secs (21.13 usr  3.21 sys + 3145.31 cusr 151.29 csys = 3320.94 CPU)

[15:41] <Zoffix> jnthn++ # rescallar work

[15:41] <Zoffix> Already seems to made an improvement, of about

[15:41] <Zoffix> m: say 161/148

[15:41] <camelia> rakudo-moar 68ed6f2d8: OUTPUT: «1.087838␤»

[15:41] <Zoffix> this many

[15:42] <|Tux|> :)

[15:42] <Zoffix> (roughly; the stresstest has some randomness-driven tests which affect the overall time, but the new trend is definitely lower than a few days ago)

[15:42] * |Tux| goes home. More test requests will of course be honoured if I can access the machine

[15:43] <jnthn> ah, nice :)

[15:44] <jnthn> The new kinds of inlining that MoarVM can now do look, as I glanced what it was doing, to have helped NQP code somewhat too, so we might be seeing faster compilation times in the spectest result.

[15:45] <jnthn> CORE.setting seemed to get a second faster for me.

[15:45] <Geth> ¦ roast: e0d71a2b64 | (Zoffix Znet)++ | S06-routine-modifiers/proxy.t

[15:45] <Geth> ¦ roast: Unfudge now-passing Proxy tests

[15:45] <Geth> ¦ roast: 

[15:45] <Geth> ¦ roast: RT#124341 https://rt.perl.org/Public/Bug/Display.html?id=124341

[15:45] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/68ed6f2d874c9d75022eb14118c9a569c80ef04c

[15:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e0d71a2b64

[15:45] <synopsebot> RT#124341 [open]: https://rt.perl.org/Ticket/Display.html?id=124341 [WEIRD] Proxy object also works on non- "is rw" subs/methods

[15:45] <jnthn> Zoffix++ 

[15:46] <jkramer> Zoffix: I renamed that attributes as you suggested. Should I change anything about the other points mentioned by ugexe?

[15:47] <Zoffix> jkramer: ugexe knows much more about that part of codebase than me, so talk to them about any further work :)

[15:47] * Zoffix is a CompUnit n00b

[15:56] <jkramer> He's not in IRC though. I'll just wait for further comments in the PR/ticket then. :)

[16:00] <Zoffix> You can ask on the Issue.

[16:04] <jkramer> I'll give him some time, I guess he would've already responded if he'd read our comments (and time). :)

[16:21] <jkramer> Zoffix: Is there anything left to do here? As ugexe pointed out it works as intended if the aliases is named. https://github.com/rakudo/rakudo/issues/1669

[16:24] <Zoffix> jkramer: the issue is the aliased name is missing in USAGE. Ugexe's use of the program is not shown as a possible use in the USAGE printed

[16:25] <Zoffix> jkramer: nm, it does

[16:25] <jkramer> perl6 -e 'sub MAIN(Bool :h(:$help)) {}' --asd

[16:26] <jkramer> Yeah his example is weird because it doesn't print the USAGE, but it works :)

[16:26] <Zoffix> closed

[16:26] <jkramer> Hmm, gotta look for something else then :)

[16:27] <Zoffix> jkramer: there are a bunch of Issues tagged with "easy to resolve": https://github.com/rakudo/rakudo/issues?q=is%3Aopen+is%3Aissue+label%3A%22easy+to+resolve%22

[16:27] <Zoffix> [Coke]: you around by any chance?

[16:30] <jkramer> Zoffix: I've already gone through them but I think they're mostly easy to resolve if you already have some knowledge about the internals and not "quick fixes anyone can do" :)

[16:31] <Zoffix> I think the idea is you ask questions for tips on how to fix them or something.

[16:37] <jkramer> I just don't want to annoy people with lots of newbie questions about tickets that they could probably solve themselves in 2min :)

[16:39] <Zoffix> huggable: hug1

[16:39] <huggable> Zoffix, Hug 1: Gift a Shovel. Always seek to expand our community. Invite people to help us. https://rakudo.party/post/On-Troll-Hugging-Hole-Digging-and-Improving-Open-Source-Communities#hug1:giftashovel

[16:40] <Zoffix> By answering newbiew questions, eventually the tickets that could probably take days would be solved by those no-longer-newbiews

[16:48] <Zoffix> .tell [Coke] sent you an email about my grant

[16:48] <yoleaux> Zoffix: I'll pass your message to [Coke].

[16:48] * Zoffix &

[16:48] *** Zoffix left
[16:50] *** benjikun2 joined
[16:51] *** benjikun left
[17:01] <jkramer> Is there a trick to speed up building rakudo/testing little changes? It seems like all code is copied into a giant CORE.setting file which is then compiled from scratch every time which is kinda slow.

[17:05] *** Zoffix joined
[17:05] <Zoffix> jkramer: there are some ways to avoid rebuilding, like modifying the object by mixing in a role with a fix: https://rakudo.party/post/Perl-6-Core-Hacking-Wrong-Address-Return-To-Sender

[17:06] <Zoffix> Also, I think japhb had some sort of thing that lets you avoid full recompilation, but it looked too complex for me to understand so I never used it.

[17:06] <Zoffix> But other than that, no, the 70-second compile dash is something to get used to

[17:07] <Zoffix> At home, I usually have some game open in another window, like Letter Quest: Grimm's Journey or Car Mechanic Simulator that I play while rakudo is compiling

[17:08] <Zoffix> Well, something to get used to, or optimize grammars and improve it :) R#1999

[17:08] <synopsebot> R#1999 [open]: https://github.com/rakudo/rakudo/issues/1999 [meta][regex][severe] Roadmap for Regex/Grammar optimizations

[17:09] <jkramer> Zoffix: That's very good advice, I'll look out for some good games or maybe just surf reddit :)

[17:13] <Zoffix> jkramer: oh, I linked to the wrong article. should've been this one https://rakudo.party/post/Hacking-on-Rakudo-Perl-6-Compiler-Mix-Your-Fix#mixyourfix

[17:15] <jkramer> Hmm, I'm now getting this when building: make: *** No rule to make target 'src/Perl6/Metamodel/ContainerDescriptor.nqp', needed by 'perl6.moarvm'.  Stop.

[17:15] <Zoffix> also surfing reddit isn't a good idea. Social media sites are purposefully designed to steal your attention, so you'll find instead of the 70-second compile tim you'll be spending 10-30 minutes each time, wasting your time :)

[17:15] <Zoffix> jkramer: you probably need to re-run perl Configure.pl

[17:16] <Zoffix> s/tim/time/;

[17:16] <Zoffix> There's also Z-script

[17:16] <Zoffix> huggable: zscript

[17:16] <huggable> Zoffix, Helper script for Rakudo Perl 6 core development: https://github.com/zoffixznet/z

[17:17] *** brrt joined
[17:18] <jkramer> Looks like I broke something, apparently my nqp is "too old" and I need to rebuild everything :)

[17:18] <Zoffix> My guess is you pulled new changes into rakudo, which included an nqp bump

[17:20] <jkramer> Ah yes that's probably it, I just switched from my working branch to master which had newer changes from upstream

[17:24] *** AlexDani` is now known as AlexDaniel

[17:25] <jkramer> Alright, time for me to go home. I worked on another issue here if you want to review/comment (no PR yet), but I'm probably not gonna see it before tomorrow. :) https://github.com/jkramer/rakudo/commit/6a956c3d46833c3951a8d13681a5400debe97c67

[17:26] <jkramer> Have a nice evening! o/

[17:26] <Zoffix> \o

[17:28] *** Zoffix left
[17:56] *** brrt left
[18:02] *** MasterDuke left
[19:21] *** pmurias left
[19:24] *** AlexDaniel left
[19:26] *** pmurias joined
[19:57] <Geth> ¦ nqp: 09ae11ea19 | MasterDuke17++ (committed using GitHub Web editor) | docs/ops.markdown

[19:57] <Geth> ¦ nqp: Remove some internal ops from the TOC

[19:57] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/09ae11ea19

[20:08] <Geth> ¦ nqp: ea992bccd6 | MasterDuke17++ (committed using GitHub Web editor) | docs/ops.markdown

[20:08] <Geth> ¦ nqp: Update unicmp_s section

[20:08] <Geth> ¦ nqp: 

[20:08] <Geth> ¦ nqp: It's also implemented in the JS backend. Make the signature more consistent with other ops.

[20:08] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ea992bccd6

[20:16] *** travis-ci joined
[20:16] <travis-ci> NQP build failed. MasterDuke17 'Remove some internal ops from the TOC'

[20:16] <travis-ci> https://travis-ci.org/perl6/nqp/builds/401928410 https://github.com/perl6/nqp/compare/39f1057452e1...09ae11ea1902

[20:16] *** travis-ci left
[20:17] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/07/09/2018-28-introduction-to-perl-6/

[20:25] <jnthn> lizmat++

[20:25] <jnthn> Busy week :)

[20:25] <lizmat> it sure was

[20:25] <lizmat> seems to get more busy every week

[20:26] *** travis-ci joined
[20:26] <travis-ci> NQP build failed. MasterDuke17 'Update unicmp_s section

[20:26] <lizmat> jnthn: any opinions on the sticker ?

[20:26] <travis-ci> https://travis-ci.org/perl6/nqp/builds/401932992 https://github.com/perl6/nqp/compare/09ae11ea1902...ea992bccd603

[20:26] *** travis-ci left
[20:29] <lizmat> m: while () { }; say "done"

[20:30] <camelia> rakudo-moar 68ed6f2d8: OUTPUT: «Resource temporarily unavailable»

[20:30] <lizmat> m: while () { }; say "done"

[20:30] <camelia> rakudo-moar 68ed6f2d8: OUTPUT: «done␤»

[20:30] <lizmat> now, oddly enough, in Perl 5 "while () { }" will loop forever

[20:32] <timotimo> well, () is the empty list in this perl6 snippet?

[20:33] <lizmat> yup

[20:34] <geekosaur> "while (1) {" o.O

[20:34] <geekosaur> (-MO=Deparse)

[20:37] <geekosaur> tbh I'd have expected either $_ or undef there

[20:40] <lizmat> this idiom occurs in 136 distributions on CPAN

[20:40] <lizmat> in 222 files

[20:40] <lizmat> so, it's at least out there in the world

[20:41] <lizmat> I was thinking of adding a p5ism worry for it, as it should be easily checkable

[20:44] *** ufobat_ left
[20:51] *** MasterDuke joined
[21:03] *** benjikun joined
[21:05] *** skids left
[21:05] *** benjikun2 left
[21:17] <lizmat> afk&

[21:27] *** MasterDuke left
[21:29] *** MasterDuke joined
[21:36] *** brrt joined
[21:37] <jnthn> lizmat: Looks nice, will collect one if you're coming to SPW :)

[21:49] <MasterDuke> any particular reason nqp::<coerce_is coerce_si> haven't been implemented on the JVM yet?

[21:50] <brrt> samcv only just added them on MoarVM?

[21:51] <MasterDuke> i thought it was *_us and *_su that she just added?

[22:03] <brrt> oh, yes, you're right

[22:03] <brrt> i misread

[22:16] <TimToady> the "while ()" thing was a bad default borrowed from how the middle term of "for (;;)" works

[22:18] *** pmurias left
[22:36] *** benjikun2 joined
[22:36] *** brrt left
[22:40] *** benjikun left
[22:41] *** AlexDaniel joined
[22:55] <Geth> ¦ nqp/truffle: a995b68e7f | (Daniel Green)++ | 3 files

[22:55] <Geth> ¦ nqp/truffle: [truffle] Pull copied function out to shared class

[22:55] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/a995b68e7f

[23:26] *** releasable6 left
[23:26] *** greppable6 left
[23:26] *** bisectable6 left
[23:26] *** statisfiable6 left
[23:26] *** nativecallable6 left
[23:26] *** benchable6 left
[23:27] *** benchable6 joined
[23:27] *** statisfiable6 joined
[23:27] *** bisectable6 joined
[23:27] *** nativecallable6 joined
[23:27] *** greppable6 joined
[23:27] *** releasable6 joined
[23:27] *** committable6 left
[23:47] <Geth> ¦ nqp: 4e23337c7c | (Daniel Green)++ | 3 files

[23:47] <Geth> ¦ nqp: Implement nqp::<coerce_si coerce_is> for the JVM

[23:47] <Geth> ¦ nqp: 

[23:47] <Geth> ¦ nqp: And unskip some now passing tests.

[23:47] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4e23337c7c

