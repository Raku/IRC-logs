[00:08] *** ZzZombo_ joined
[00:08] *** p6bannerbot sets mode: +v ZzZombo_

[00:10] *** ZzZombo left
[00:10] *** ZzZombo_ is now known as ZzZombo

[00:11] *** cognominal-p6 joined
[00:11] *** p6bannerbot sets mode: +v cognominal-p6

[00:15] *** lizmat left
[00:16] <Geth> ¦ roast: 7e0b791fa3 | (Zoffix Znet)++ | S32-num/rat.t

[00:16] <Geth> ¦ roast: [v6.d REVIEW] Throw out Rational parametarization propspec

[00:16] <Geth> ¦ roast: 

[00:16] <Geth> ¦ roast: The OP tests are invalid, as you cannot instantiate a UInt.

[00:16] <Geth> ¦ roast: We can't really take a subclass of Int because we have defaults

[00:16] <Geth> ¦ roast: on `nu`/`de` args that are Ints. And currently R#2322 blocks

[00:16] <Geth> ¦ roast: the native parametarizations, we got no POV to spec with.

[00:16] <synopsebot> R#2322 [open]: https://github.com/rakudo/rakudo/issues/2322 Type capture in role parametarization doesn't work with natives and defaults

[00:16] <Geth> ¦ roast: 

[00:16] *** Zoffix joined
[00:16] <Geth> ¦ roast: [1] https://github.com/rakudo/rakudo/issues/2322

[00:16] *** p6bannerbot sets mode: +v Zoffix

[00:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7e0b791fa3

[00:16] <Zoffix> .tell pmurias thanks. I reverted that propspec in https://github.com/perl6/roast/commit/7e0b791fa3

[00:16] <yoleaux> Zoffix: I'll pass your message to pmurias.

[00:37] *** Zoffix left
[01:07] *** bootkiller19 joined
[01:07] *** p6bannerbot sets mode: +v bootkiller19

[01:09] *** bootkiller19 left
[01:09] <Geth> ¦ roast: cde1f26f61 | (Zoffix Znet)++ | S03-junctions/autothreading.t

[01:09] <Geth> ¦ roast: [v6.d REVIEW] Don't spec order in Junction.perl

[01:09] <Geth> ¦ roast: 

[01:09] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/45b159756

[01:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cde1f26f61

[01:12] <Geth> ¦ roast: 96ec9e60be | (Zoffix Znet)++ | S04-statements/sink.t

[01:12] <Geth> ¦ roast: [v6.d REVIEW] Explain significance of ws in .= tests

[01:12] <Geth> ¦ roast: 

[01:12] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/da9a389b2

[01:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/96ec9e60be

[01:16] *** fake_space_whale joined
[01:17] *** p6bannerbot sets mode: +v fake_space_whale

[01:20] <Geth> ¦ roast: 7900eda8f0 | (Zoffix Znet)++ | S17-lowlevel/atomic.t

[01:20] <Geth> ¦ roast: [v6.d REVIEW] Fix typo in test description

[01:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7900eda8f0

[01:20] <Geth> ¦ roast: 37a969cf86 | (Zoffix Znet)++ | S17-lowlevel/atomic.t

[01:20] <Geth> ¦ roast: [v6.d REVIEW] Remove trailing whitespace

[01:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/37a969cf86

[01:32] <Geth> ¦ roast: bb5fb2ae0b | (Zoffix Znet)++ | S24-testing/3-output.t

[01:32] <Geth> ¦ roast: [v6.d REVIEW] Loosen spec of `#` quoting in TAP

[01:32] <Geth> ¦ roast: 

[01:32] <Geth> ¦ roast: We might end up removing the "add extra space" thing as it

[01:32] <Geth> ¦ roast: confuses users and probably was a hackish idea in the first place.

[01:32] <Geth> ¦ roast: 

[01:32] <Geth> ¦ roast: https://github.com/perl6/roast/commit/423cc68bf

[01:32] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bb5fb2ae0b

[01:33] *** Tazmain joined
[01:34] *** p6bannerbot sets mode: +v Tazmain

[01:37] *** Tazmain left
[01:43] <Geth> ¦ roast: 3b8be1568f | (Zoffix Znet)++ | S12-methods/qualified.t

[01:43] <Geth> ¦ roast: [v6.d REVIEW] Polish .:: tests

[01:43] <Geth> ¦ roast: 

[01:43] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/5d970e144

[01:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3b8be1568f

[01:44] *** mugsie0 joined
[01:45] *** p6bannerbot sets mode: +v mugsie0

[01:48] *** mugsie0 left
[01:55] *** SergeyLukjanov29 joined
[01:56] *** p6bannerbot sets mode: +v SergeyLukjanov29

[01:58] *** SergeyLukjanov29 left
[01:59] *** khalella13 joined
[02:00] *** p6bannerbot sets mode: +v khalella13

[02:03] *** khalella13 left
[02:19] *** ZzZombo left
[02:42] *** jj|2 joined
[02:43] *** jj|2 left
[02:55] *** tribaal12 joined
[02:55] *** p6bannerbot sets mode: +v tribaal12

[02:59] *** tribaal12 left
[03:02] *** jlacroix27 joined
[03:02] *** jlacroix27 left
[03:06] *** ZzZombo joined
[03:06] *** p6bannerbot sets mode: +v ZzZombo

[03:09] *** davidv7 joined
[03:10] *** p6bannerbot sets mode: +v davidv7

[03:12] *** davidv7 left
[03:21] *** mickael99 joined
[03:22] *** p6bannerbot sets mode: +v mickael99

[03:23] *** mickael99 left
[05:23] *** sim59022 joined
[05:24] *** p6bannerbot sets mode: +v sim59022

[05:24] *** sim59022 left
[05:28] *** ma2719 joined
[05:29] *** p6bannerbot sets mode: +v ma2719

[05:31] *** ma2719 left
[05:42] *** fake_space_whale left
[05:52] *** colinbits2 joined
[05:53] *** p6bannerbot sets mode: +v colinbits2

[05:57] *** colinbits2 left
[06:23] *** fake_space_whale joined
[06:24] *** p6bannerbot sets mode: +v fake_space_whale

[06:27] <samcv> i think we need a way to check the endianess of the system. i don't think there's any official way to do this yet. please someone correc me if there is

[06:28] *** tchaypo25 joined
[06:29] *** tchaypo25 left
[06:29] *** patrickb joined
[06:29] *** p6bannerbot sets mode: +v patrickb

[06:34] *** patrickb left
[06:43] *** robertle joined
[06:44] *** p6bannerbot sets mode: +v robertle

[06:48] <TimToady> well...since we depend on perl being out there, you can always run perl -E 'say unpack("n", pack "i", 42)' which will not return 42 on a little endian machine, though unpack "v" will

[06:48] *** fake_space_whale left
[06:51] <samcv> hah

[06:51] <samcv> well i can technically also write utf16 to a file and then read it as a buf. but that doesn't actually check that the BOM is correct for that endianess

[06:51] <samcv> this was something that'd go into roast btw

[06:52] <TimToady> well, I wasn't entirely serious :)

[06:52] <samcv> hahaha

[06:57] *** cygx joined
[06:58] *** p6bannerbot sets mode: +v cygx

[06:58] <cygx>  m: say $*VM.config<be>

[06:58] <camelia> rakudo-moar ddb5f8fc4: OUTPUT: «0␤»

[06:59] <cygx> samcv: ^ or were you looking for something else?

[07:00] <samcv> m: say $*VM.config<le>

[07:00] <camelia> rakudo-moar ddb5f8fc4: OUTPUT: «(Any)␤»

[07:00] <samcv> cygx: assuming that gives me whether or not it's big endian then that works

[07:00] *** lizmat joined
[07:00] *** p6bannerbot sets mode: +v lizmat

[07:01] <cygx> it should - moarvm needs to know endianness so it can decode bytecode

[07:02] <samcv> yep i know that. i just didn't know if it was exposed

[07:02] <samcv> unless you mean rakudo itself needs to know?

[07:04] <TimToady> 'course, perl didn't assume simple big or little endian, since it runs on some mix-endian machines...

[07:06] <TimToady> so it has a 'byteorder' that can be 12345678 or 87654321 or 56781234 or...

[07:06] <cygx> not sure if rakudo does anything with it - afaik it's just used to set MVM_BIGENDIAN in config.h

[07:08] <cygx> cross-platform computing used to be more fun - mixed order, integer padding, non-octet bytes...

[07:10] <samcv> as far as i remember bytes have no endianess at least as far as C is concerned

[07:10] <samcv> essentially not exposed and the machine could implement it anyway they want

[07:13] <cygx> endianness only makes sense if there's a smaller addressable subunit

[07:13] *** Destol joined
[07:13] <cygx> in C, you can't address individual bits, but have to use shifts etc, which are defined in terms of mathematical operations

[07:14] *** p6bannerbot sets mode: +v Destol

[07:14] <cygx> so agreed, no byte endianness as far as C is concerned

[07:14] <samcv> s/byte/bit

[07:14] <TimToady> I thought there were difference for the :4 subfields and such

[07:14] <TimToady> *ces

[07:15] <TimToady> but maybe the standards folks ironed all that out

[07:15] <samcv> that doesn't allow you as the programmer to tell the order though right?

[07:15] <TimToady> it does if you have unions :)

[07:16] *** lizmat left
[07:16] *** Destol left
[07:18] <samcv> ah ok :) i hadn't thought of that

[07:20] <cygx> TimToady: you're right, how bitfields are packed can be considered a type of endianness

[07:20] <cygx> it's wholly implementation-defined, though

[07:38] *** patrickb joined
[07:38] *** p6bannerbot sets mode: +v patrickb

[07:48] *** ZzZombo_ joined
[07:48] *** p6bannerbot sets mode: +v ZzZombo_

[07:49] <cygx> o/

[07:49] *** cygx left
[07:50] *** ZzZombo left
[07:50] *** ZzZombo_ is now known as ZzZombo

[07:54] *** Ven` joined
[07:55] *** p6bannerbot sets mode: +v Ven`

[07:59] *** robertle left
[08:01] *** robertle joined
[08:02] *** p6bannerbot sets mode: +v robertle

[08:06] *** dwi10 joined
[08:06] *** p6bannerbot sets mode: +v dwi10

[08:08] *** dwi10 left
[08:17] *** [TuxCM] left
[08:24] *** lizmat joined
[08:24] *** p6bannerbot sets mode: +v lizmat

[08:29] *** robertle left
[08:29] *** robertle joined
[08:30] *** p6bannerbot sets mode: +v robertle

[08:35] *** robertle left
[08:37] *** robertle joined
[08:38] *** p6bannerbot sets mode: +v robertle

[08:47] *** Corvus`9 joined
[08:48] *** p6bannerbot sets mode: +v Corvus`9

[08:51] *** Corvus`9 left
[08:58] *** UForgotten5 joined
[08:59] *** NccT joined
[08:59] *** p6bannerbot sets mode: +v UForgotten5

[09:00] *** p6bannerbot sets mode: +v NccT

[09:00] *** UForgotten5 left
[09:01] *** NccT left
[09:03] *** rossome8 joined
[09:04] *** p6bannerbot sets mode: +v rossome8

[09:05] *** rossome8 left
[09:10] *** nocoolnametom_ joined
[09:11] *** p6bannerbot sets mode: +v nocoolnametom_

[09:12] *** nocoolnametom_ left
[09:14] *** crees joined
[09:14] *** p6bannerbot sets mode: +v crees

[09:19] *** crees left
[09:37] *** hacosta25 joined
[09:38] *** p6bannerbot sets mode: +v hacosta25

[09:39] *** hacosta25 left
[09:45] *** vincian5 joined
[09:46] *** p6bannerbot sets mode: +v vincian5

[09:46] *** [TuxCM] joined
[09:47] *** vincian5 left
[09:47] *** p6bannerbot sets mode: +v [TuxCM]

[10:02] *** ZzZombo left
[10:15] *** stmuk_ joined
[10:16] *** p6bannerbot sets mode: +v stmuk_

[10:17] *** stmuk left
[10:23] *** c4757p5 joined
[10:24] *** p6bannerbot sets mode: +v c4757p5

[10:24] *** pmurias joined
[10:24] *** p6bannerbot sets mode: +v pmurias

[10:26] *** c4757p5 left
[10:35] *** Pomax1 joined
[10:35] *** Pomax1 left
[10:52] *** pmurias left
[10:53] *** pmurias joined
[10:53] *** p6bannerbot sets mode: +v pmurias

[10:58] *** AlexDani` joined
[10:59] *** p6bannerbot sets mode: +v AlexDani`

[11:01] *** KenOokamiHoro1 joined
[11:01] *** doctorx6 joined
[11:02] *** p6bannerbot sets mode: +v KenOokamiHoro1

[11:02] *** p6bannerbot sets mode: +v doctorx6

[11:02] *** AlexDaniel left
[11:03] *** doctorx6 left
[11:03] *** KenOokamiHoro1 left
[11:03] <Geth> ¦ roast: be320b5eb3 | (Paweł Murias)++ | S05-mass/properties-general.t

[11:03] <Geth> ¦ roast: [js] Copy rakudo.moar fudge as we keep it's behavior for now

[11:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/be320b5eb3

[11:11] *** pmurias left
[11:16] *** michalisko12 joined
[11:16] *** p6bannerbot sets mode: +v michalisko12

[11:18] *** michalisko12 left
[11:28] *** ZzZombo joined
[11:28] *** p6bannerbot sets mode: +v ZzZombo

[11:29] *** zer0c00l29 joined
[11:30] *** p6bannerbot sets mode: +v zer0c00l29

[11:30] *** zer0c00l29 left
[11:32] <|Tux|> Rakudo version 2018.09-43-gddb5f8fc4 - MoarVM version 2018.09-92-g1325e4ca6

[11:32] <|Tux|> csv-test-xs-20      0.424 -  0.431

[11:32] <|Tux|> test-t --race       0.818 -  0.837

[11:32] <|Tux|> csv-ip5xs           0.911 -  0.935

[11:32] <|Tux|> test-t              1.791 -  1.843

[11:32] <|Tux|> csv-ip5xs-20        8.045 -  8.045

[11:32] <|Tux|> test                8.557 -  8.798

[11:32] <|Tux|> test-t-20 --race   11.833 - 11.960

[11:32] <|Tux|> csv-parser         20.423 - 21.502

[11:32] <|Tux|> test-t-20          30.797 - 31.598

[11:33] *** AlexDani` is now known as AlexDaniel

[11:34] *** lizmat left
[11:52] *** sir_galahad_ad19 joined
[11:52] *** p6bannerbot sets mode: +v sir_galahad_ad19

[11:55] *** sir_galahad_ad19 left
[12:03] *** sjk27 joined
[12:03] *** sjk27 left
[12:07] *** Zoffix joined
[12:07] *** p6bannerbot sets mode: +v Zoffix

[12:10] <Zoffix> jnthn: yesteray you said: "Probably 'cus its BUILDALL isn't code-gen'd."... Is that the same stuff lizmat did in Rakudo? Where we gen a bunch of QAST for some common object instantiation things?

[12:10] <Zoffix> jnthn: is it a worthy pursuit for NQP? For example, `nqp::create(QAST::Op)` is 4.14 faster than QAST::Op.new

[12:11] <Zoffix> I imagine we have a ton of such .new's and it'd be a fairly big compilation time win, no?

[12:11] <Zoffix> ("4.14x as fast" I meant)

[12:19] <Zoffix> ZOFVM: Files=1310, Tests=153194, 160 wallclock secs (25.59 usr  3.46 sys + 3470.12 cusr 158.16 csys = 3657.33 CPU)

[12:19] <Geth> ¦ nqp: af49187006 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[12:19] <Geth> ¦ nqp: [MoarVM Bump] Brings 2 commits

[12:19] <Geth> ¦ nqp: 

[12:19] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.09-90-gb5eb48c...2018.09-92-g1325e4c

[12:19] <Geth> ¦ nqp: 1325e4c Make *_I ops in interp.c consistent

[12:19] <Geth> ¦ nqp: faea0ae Convert expmod_I to allocate in called function

[12:19] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/af49187006

[12:19] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.09-90-gb5eb48c...2018.09-92-g1325e4c

[12:19] <Geth> ¦ rakudo: 698c5ff71e | (Zoffix Znet)++ | tools/build/NQP_REVISION

[12:19] <Geth> ¦ rakudo: [NQP Bump] af49187 [MoarVM Bump] Brings 2 commits

[12:19] <Geth> ¦ rakudo: 

[12:19] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.09-8-g3ac7f23...2018.09-9-gaf49187

[12:19] <Geth> ¦ rakudo: 

[12:19] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.09-90-gb5eb48c...2018.09-92-g1325e4c

[12:19] <Geth> ¦ rakudo: 1325e4c Make *_I ops in interp.c consistent

[12:19] <Geth> ¦ rakudo: faea0ae Convert expmod_I to allocate in called function

[12:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/698c5ff71e

[12:19] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.09-8-g3ac7f23...2018.09-9-gaf49187

[12:31] <Zoffix> .ask lizmat would NQP benefit from the same BUILDALL gen you did in Rakudo? I imagine we create a ton of QAST objects. A plain `nqp::create(QAST::Op)` is 4.14x as fast as `QAST::Op.new`. I don't know if it could be genned when attributes are present, but it smells like there could be a nice win for compilation time (at least of Rakudo)

[12:31] <yoleaux> Zoffix: I'll pass your message to lizmat.

[12:40] <timotimo> QAST's creation is kind of complex, but it's possible to write a whole lot of code to make it faster

[12:42] <Zoffix> timotimo: how to find out why a method didn't turn green in the profile?

[12:42] <Zoffix> after 100000 iterations

[12:42] <timotimo> oh, heret oo

[12:42] *** JonathanO0 joined
[12:43] <timotimo> it's red, you say?

[12:43] *** p6bannerbot sets mode: +v JonathanO0

[12:44] <jnthn> Zoffix: Potentially, yes, though QAST::Node already has its own carefully coded setup path, I think

[12:44] <timotimo> it's not 100% inlined, though :P

[12:45] *** JonathanO0 left
[12:45] *** sparx29 joined
[12:46] *** p6bannerbot sets mode: +v sparx29

[12:49] *** sparx29 left
[12:55] *** pystar894 joined
[12:56] *** p6bannerbot sets mode: +v pystar894

[12:56] *** pystar894 left
[13:03] *** jorj1 joined
[13:03] *** p6bannerbot sets mode: +v jorj1

[13:06] *** jorj1 left
[13:15] *** cognominal-p6 left
[13:38] *** tm6049 joined
[13:39] *** p6bannerbot sets mode: +v tm6049

[13:44] *** tm6049 left
[13:46] *** Zoffix left
[13:47] *** SqrtNegInf joined
[13:48] *** p6bannerbot sets mode: +v SqrtNegInf

[14:03] <Geth> ¦ rakudo: 4a968059c2 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Rat.pm6

[14:03] <Geth> ¦ rakudo: Document purpose of non-normalizing rat routine

[14:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4a968059c2

[14:03] *** cognominal-p6 joined
[14:04] *** p6bannerbot sets mode: +v cognominal-p6

[14:08] *** Ven` left
[14:08] *** szagul joined
[14:09] *** p6bannerbot sets mode: +v szagul

[14:10] *** Kaiepi left
[14:11] *** Kaiepi joined
[14:11] *** p6bannerbot sets mode: +v Kaiepi

[14:14] *** szagul left
[14:19] *** cognominal-p6 left
[14:19] *** cognominal-p6 joined
[14:20] *** p6bannerbot sets mode: +v cognominal-p6

[14:21] *** lyarwood1 joined
[14:22] *** p6bannerbot sets mode: +v lyarwood1

[14:24] *** lyarwood1 left
[14:28] *** etingof12 joined
[14:28] *** etingof12 left
[14:38] *** Ven` joined
[14:39] *** p6bannerbot sets mode: +v Ven`

[14:42] <Geth> ¦ roast: 0f95942b73 | (Zoffix Znet)++ | S32-num/rat.t

[14:42] <Geth> ¦ roast: No `Inf`s in huge rat stringification

[14:42] <Geth> ¦ roast: 

[14:42] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1996 R#1996

[14:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0f95942b73

[14:42] <synopsebot> R#1996 [open]: https://github.com/rakudo/rakudo/issues/1996 Crazy Rats stringify as 0.00000…000Inf

[14:50] *** cognominal-p6 left
[14:51] *** [TuxCM] left
[15:04] *** fake_space_whale joined
[15:04] *** hjklhjklhjkl16 joined
[15:05] *** p6bannerbot sets mode: +v fake_space_whale

[15:05] *** p6bannerbot sets mode: +v hjklhjklhjkl16

[15:07] *** hjklhjklhjkl16 left
[15:20] *** lizmat joined
[15:20] *** p6bannerbot sets mode: +v lizmat

[15:29] *** patrickb left
[15:40] *** DarkPlace18 joined
[15:41] *** p6bannerbot sets mode: +v DarkPlace18

[15:42] *** lolcat joined
[15:43] *** p6bannerbot sets mode: +v lolcat

[15:49] *** DarkPlace18 left
[15:50] *** lolcat left
[15:51] *** dcrampton8 joined
[15:52] *** TheStrix26 joined
[15:52] *** p6bannerbot sets mode: +v dcrampton8

[15:52] <Geth> ¦ rakudo: 8bd3e5024b | (Jonathan Worthington)++ | src/core/Array.pm6

[15:52] *** p6bannerbot sets mode: +v TheStrix26

[15:52] <Geth> ¦ rakudo: Improve array assignment inlinability

[15:52] <Geth> ¦ rakudo: 

[15:52] <Geth> ¦ rakudo: Prior to this, the ASSIGN-POS method was too large to inline on MoarVM,

[15:52] <Geth> ¦ rakudo: but it's really quite helpful for performance if it does inline. Since

[15:53] <Geth> ¦ rakudo: MoarVM doesn't factor in the size of nested inlines, however, then it's

[15:53] <Geth> ¦ rakudo: possible to get below the inline limit by splitting some of the code out

[15:53] <Geth> ¦ rakudo: into a private method, as done by this commit.

[15:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8bd3e5024b

[15:56] *** TheStrix26 left
[15:58] *** dcrampton8 left
[15:58] <[Coke]> sneaky

[16:07] *** Ven` left
[16:10] *** pacak9 joined
[16:11] *** p6bannerbot sets mode: +v pacak9

[16:13] *** pacak9 left
[16:18] *** robertle left
[16:20] <SqrtNegInf> m: for  0.1, 0.2 ... 1 -> $a { say $a }

[16:20] <camelia> rakudo-moar 8bd3e5024: OUTPUT: «===SORRY!===␤This type (QAST::WVal) does not support positional operations␤»

[16:20] *** jigp joined
[16:20] <SqrtNegInf> It seems like sequences with 'for' can no longer contain decimals?

[16:20] <SqrtNegInf> m: for 1.0, 2.0 ... 4.0 -> $a { say $a }

[16:20] <camelia> rakudo-moar 8bd3e5024: OUTPUT: «===SORRY!===␤This type (QAST::WVal) does not support positional operations␤»

[16:20] *** p6bannerbot sets mode: +v jigp

[16:21] <SqrtNegInf> This change happened sometime yesterday.

[16:22] <timotimo> oh, that's bad

[16:22] <timotimo> bisectable6: for  0.1, 0.2 ... 1 -> $a { say $a }

[16:22] <bisectable6> timotimo, Bisecting by exit code (old=2015.12 new=8bd3e50). Old exit code: 0

[16:23] <bisectable6> timotimo, bisect log: https://gist.github.com/26de1c45dcfe2aec4b0af6ba5495664a

[16:23] <bisectable6> timotimo, (2018-09-26) https://github.com/rakudo/rakudo/commit/89787028882bf5faa4aa596a50e320cd6de16f2c

[16:23] *** Zoffix joined
[16:23] *** p6bannerbot sets mode: +v Zoffix

[16:23] <Zoffix> bisect: 2018.06,HEAD for 1.0, 2.0 ... 4.0 -> $a { say $a }

[16:23] <bisectable6> Zoffix, Using old=2018.06 new=HEAD in an attempt to DWIM

[16:23] <bisectable6> Zoffix, Bisecting by exit code (old=2018.06 new=8bd3e50). Old exit code: 0

[16:23] <timotimo> Zoffix: i just did that :)

[16:23] <bisectable6> Zoffix, bisect log: https://gist.github.com/18f02652648a49d3ed1bdf002db13bed

[16:23] <bisectable6> Zoffix, (2018-09-26) https://github.com/rakudo/rakudo/commit/89787028882bf5faa4aa596a50e320cd6de16f2c

[16:23] *** mutilator29 joined
[16:24] <Zoffix> log-lag :)

[16:24] <timotimo> somewhere in there it's doing a [x] on something that it didn't check for types before

[16:24] *** mutilator29 left
[16:24] *** stmuk joined
[16:24] *** jigp left
[16:25] <timotimo>                     if get_bound($op[1], 0) -> @rt {        # right side ok

[16:25] <timotimo>                         if nqp::istype(@rt[0],QAST::IVal) { # and is an int

[16:25] <timotimo> could be this part

[16:25] *** p6bannerbot sets mode: +v stmuk

[16:25] <timotimo> that get_bound misbehaves here

[16:25] <timotimo> or rather: having rats rather than ints is not what it expects and the return type differs?

[16:26] <timotimo> oh, the only changes there are comments

[16:26] <SqrtNegInf> One more data point, explicit rationals do work.

[16:26] <SqrtNegInf> m: for  1/10, 2/10 ... 1 -> $a { say $a }

[16:26] <camelia> rakudo-moar 8bd3e5024: OUTPUT: «0.1␤0.2␤0.3␤0.4␤0.5␤0.6␤0.7␤0.8␤0.9␤1␤»

[16:26] *** stmuk_ left
[16:26] <timotimo> it might come from accessing the [0][2] and [1][2] of the $list in the lower half of the code

[16:27] <SqrtNegInf> And there is a work-around, flat/slip

[16:27] <timotimo> SqrtNegInf: we should be able to fix this in a jiffy

[16:27] <SqrtNegInf> m: for  |0.1, 0.2 ... 1 -> $a { say $a }

[16:27] <camelia> rakudo-moar 8bd3e5024: OUTPUT: «0.1␤0.2␤0.3␤0.4␤0.5␤0.6␤0.7␤0.8␤0.9␤1␤»

[16:27] <Zoffix> I call dibs!

[16:27] <timotimo> Zoffix: will you fix it or should i try?

[16:27] <timotimo> ok :)

[16:31] <Zoffix> fixed

[16:33] <timotimo> Zoffix++

[16:33] <SqrtNegInf> Nice. Bugs fixed while-U-wait... 

[16:35] <Zoffix> just gonna stresstest and push

[16:37] *** intermezzo4 joined
[16:38] <Zoffix> Though there are still bugs with that opts

[16:38] <Zoffix> c: 2018.06,HEAD my @a; for 1.0 ... 3 -> $a { @a.push: $a }; dd @a

[16:38] <committable6> Zoffix, ¦2018.06: «Array @a = [1.0, 2.0, 3.0]␤» ¦HEAD(8bd3e50): «Array @a = [1, 2, 3]␤»

[16:38] *** p6bannerbot sets mode: +v intermezzo4

[16:40] <Zoffix> ZOFFLOP: t/spec/S09-typed-arrays/native-int.t

[16:41] *** intermezzo4 left
[16:42] <Geth> ¦ rakudo: 2af789d796 | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[16:42] <Geth> ¦ rakudo: Fix QAST crash in `for …` opt with Rats

[16:42] <Geth> ¦ rakudo: 

[16:42] <Geth> ¦ rakudo: Bug find: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-09-27#l369

[16:42] <Geth> ¦ rakudo: 

[16:42] <Geth> ¦ rakudo: We incorrectly assumed we'll always have a QAST::Want in places,

[16:42] <Geth> ¦ rakudo: but when Rats are involved, we get a QAST::WVal there instead.

[16:42] <Geth> ¦ rakudo: 

[16:42] <Geth> ¦ rakudo: Fix by watching for ::Wants explicitly

[16:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2af789d796

[16:43] <Geth> ¦ roast: 3337a7d798 | (Zoffix Znet)++ | MISC/bug-coverage.t

[16:43] <Geth> ¦ roast: Cover Rats in `for …`

[16:43] <Geth> ¦ roast: 

[16:43] <Geth> ¦ roast: Covers bug fixed in https://github.com/rakudo/rakudo/commit/2af789d796

[16:43] <Geth> ¦ roast: and adds two fudges for a wrong-result-type bug yet to be fixed

[16:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3337a7d798

[16:43] <Zoffix> (dibs on the other bug too :P)

[16:46] *** niveus5 joined
[16:47] *** p6bannerbot sets mode: +v niveus5

[16:48] *** niveus5 left
[16:55] *** travis-ci joined
[16:55] *** p6bannerbot sets mode: +v travis-ci

[16:55] <travis-ci> Rakudo build passed. Jonathan Worthington 'Improve array assignment inlinability

[16:55] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/434172352 https://github.com/rakudo/rakudo/compare/4a968059c2ea...8bd3e5024b88

[16:55] *** travis-ci left
[16:55] <Zoffix> .ask jnthn is it deliberate that the range of optimized values doesn't include the endpoints? I.e. that comparators are `>`/`<` instead of `>=`/`<=`? https://github.com/rakudo/rakudo/commit/1a103e7457d15029333fb8840cfc4351f2ec5598#diff-c6d4338f0fe083856631860c53453281R893

[16:55] <yoleaux> Zoffix: I'll pass your message to jnthn.

[17:02] *** dkabot4 joined
[17:03] *** p6bannerbot sets mode: +v dkabot4

[17:05] *** dkabot4 left
[17:19] <samcv> i have tried adding a BOM for utf16 in method open but i'm having issues when we open for append https://github.com/samcv/rakudo/commit/e52b8667b07dcaabeec0ffce43d19ec2e4459ab8

[17:20] <samcv> if we open for append, i get self.tell() as 0 even when there is data in the file and it ends up writing more BOM. not sure if it only seeks in the file sometime later? though not sure what is going on here

[17:20] <samcv> i'll be gone for an hour and a half, but wanted to ask in case anyone sees this and knows what is going on

[17:24] <geekosaur> on posix, it effectively seeks to the end first on every write

[17:25] <geekosaur> append doesn't mean "seek to end first", it means "all writes forced to be appended to the current end of file"

[17:38] *** blakespot_wrk joined
[17:39] *** p6bannerbot sets mode: +v blakespot_wrk

[17:39] *** blakespot_wrk left
[17:40] *** Tengu19 joined
[17:41] *** p6bannerbot sets mode: +v Tengu19

[17:42] *** travis-ci joined
[17:42] *** p6bannerbot sets mode: +v travis-ci

[17:42] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix QAST crash in `for …` opt with Rats

[17:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/434196785 https://github.com/rakudo/rakudo/compare/8bd3e5024b88...2af789d796a2

[17:42] *** travis-ci left
[17:46] *** cognominal-p6 joined
[17:47] *** p6bannerbot sets mode: +v cognominal-p6

[17:47] *** Tengu19 left
[17:48] *** Furna_ joined
[17:49] *** p6bannerbot sets mode: +v Furna_

[17:49] *** Furna_ left
[17:52] *** cognominal-p6 left
[17:52] *** cognominal-p6 joined
[17:53] *** p6bannerbot sets mode: +v cognominal-p6

[17:57] *** stubbers11 joined
[17:57] *** stubbers11 left
[17:58] *** Kaiepi left
[17:58] *** Kaiepi joined
[17:59] *** p6bannerbot sets mode: +v Kaiepi

[17:59] *** OliverUv28 joined
[18:00] *** p6bannerbot sets mode: +v OliverUv28

[18:01] *** OliverUv28 left
[18:02] <timotimo> that's how concurrent appends "work" i guess

[18:21] *** lizmat left
[18:22] <geekosaur> yep. there's also an atomicity guarantee if the write buffer is below some system dependent size

[18:24] *** niston27 joined
[18:25] *** p6bannerbot sets mode: +v niston27

[18:27] *** niston27 left
[18:28] <Zoffix> ASDLK:>U<ASV LTRAYDSEhtgnsdfcb

[18:28] <Zoffix> Cannot look up attributes in a VMNull type object my ass

[18:30] <Zoffix> God, the 85+s compile time of rakudo is awful

[18:35] <TimToady> samcv: perhaps check the filesize rather than the current location?

[18:35] <geekosaur> fstat() is for a reason :)

[18:36] *** fake_space_whale left
[18:48] *** Myon27 joined
[18:49] *** fake_space_whale joined
[18:49] *** p6bannerbot sets mode: +v Myon27

[18:49] *** Myon27 left
[18:49] *** p6bannerbot sets mode: +v fake_space_whale

[18:54] <Zoffix> m: for 1, 2 ^… 10 {}

[18:54] <camelia> rakudo-moar 2af789d79: OUTPUT: «10␤  in block <unit> at <tmp> line 1␤␤»

[18:54] <Zoffix> wat

[18:58] *** dericcrago9 joined
[18:58] *** p6bannerbot sets mode: +v dericcrago9

[18:59] *** Ven`` joined
[19:00] <Zoffix> R#2325

[19:00] <synopsebot> R#2325 [open]: https://github.com/rakudo/rakudo/issues/2325 [LTA] Inconsistencies/bugs with parsing of excluded sequence op

[19:00] *** p6bannerbot sets mode: +v Ven``

[19:01] *** dericcrago9 left
[19:06] *** notmatti joined
[19:06] <TimToady> how is it even printing that?

[19:06] <TimToady> oh, it's the ... listop

[19:06] *** p6bannerbot sets mode: +v notmatti

[19:08] <TimToady> m: say (1, 2 ^??? 10).perl

[19:08] <camelia> rakudo-moar 2af789d79: OUTPUT: «10␤(1, one(2, 0))␤  in block <unit> at <tmp> line 1␤»

[19:08] *** notmatti left
[19:08] <Zoffix> Ah, lol

[19:09] <TimToady> istr that we decided excluding the beginning didn't make a lot of sense for ... due to ambiguity with how much of the initial list to exclude

[19:10] *** lizmat joined
[19:10] *** p6bannerbot sets mode: +v lizmat

[19:10] <TimToady> but the failure mode is definitely a bit of a WAT

[19:14] <samcv> TimToady: yeah we can do that too. i was just wondering what was happening

[19:15] <Geth> ¦ rakudo: f8d91b9e22 | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[19:15] <Geth> ¦ rakudo: Fix wrong type of result in `for 1.5 … 2.5 {}`

[19:15] <Geth> ¦ rakudo: 

[19:15] <Geth> ¦ rakudo: The get_bound() coerces to Int, with which we could get away for

[19:15] <Geth> ¦ rakudo: opts like `for ^1.5`, but with the new opts, we have to be more

[19:15] <Geth> ¦ rakudo: strict in what we accept, or we generate an incorrect sequence.

[19:15] <Geth> ¦ rakudo: 

[19:15] <Geth> ¦ rakudo: Fix by typechecking the value we have is an Int, instead of coercing

[19:15] <Geth> ¦ rakudo: stuff. This de-optimizes things that where coercion was acceptable

[19:15] <Geth> ¦ rakudo: (e.g. doing `for ^1.5`).

[19:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f8d91b9e22

[19:15] <Geth> ¦ rakudo: 996742e507 | (Zoffix Znet)++ | t/08-performance/02-qast-rewrites.t

[19:15] <Geth> ¦ rakudo: Cover new `for` opts

[19:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/996742e507

[19:15] <Geth> ¦ roast: 1065bc8156 | (Zoffix Znet)++ | MISC/bug-coverage.t

[19:15] <Geth> ¦ roast: More cover for `for` opts

[19:15] <Geth> ¦ roast: 

[19:15] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/f8d91b9e22

[19:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1065bc8156

[19:16] *** Ven`` left
[19:19] <samcv> TimToady: .tell doesn't seem to do anything until it actually writes bytes

[19:19] <geekosaur> correct

[19:20] <geekosaur> wen you open the file you're at its beginning.

[19:20] <geekosaur> wen you write, the file offset si forced to the current end of file,t hen the write takes place

[19:20] <samcv> yep

[19:20] <geekosaur> if your'e open O_RDWR|O_APPEND, youan seek anywhere ad read, but the next write will again force the offset to the current end of file

[19:21] <geekosaur> this is for support of log files (including e.g. database transaction logs)

[19:22] <samcv> yeah that makes total sense

[19:25] <Geth> ¦ rakudo: 60d64e10a2 | (Zoffix Znet)++ | t/08-performance/02-qast-rewrites.t

[19:25] <Geth> ¦ rakudo: Check `for ^10 .reverse {}` opt is done

[19:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/60d64e10a2

[19:27] *** kindling29 joined
[19:28] *** p6bannerbot sets mode: +v kindling29

[19:32] <Zoffix> TimToady: are you open to blessing an official alias name for the language for 6.d release? I'm gonna gather some of the suggestions I've seen, and hoping to do some marketing research to could perhaps advise the choice. This will be ready October 9th and if we do get an alias name, I want to know what it is in advance of the 6.d release, to prepare some brochures and stuff.

[19:32] *** kindling29 left
[19:34] <Geth> ¦ rakudo: bab9a8d791 | (Zoffix Znet)++ | t/08-performance/02-qast-rewrites.t

[19:34] <Geth> ¦ rakudo: Cover more `for` opts

[19:34] <Geth> ¦ rakudo: 

[19:34] <Geth> ¦ rakudo: Per https://github.com/rakudo/rakudo/commit/60d64e10a2b20ee88adb8e3ccb86e7debff6b968#commitcomment-30680316

[19:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bab9a8d791

[19:35] <lizmat> Zoffix++

[19:37] <Zoffix> buggable: 6.d

[19:37] <buggable> Zoffix, Diwali is in 40 days, which is 5 weeks, 4 days, 4 hours, 22 minutes, and 3 seconds. Need to review 125 commits per day (879/week) to complete. Need 2 teaser flyers. Still have 2 TODO features costing 8 hours. Still have 0.3 policies to write. Still have ~95% of ChangeLog to do.

[19:53] *** Urvelniel28 joined
[19:54] *** p6bannerbot sets mode: +v Urvelniel28

[19:57] *** Urvelniel28 left
[20:02] *** sheyll joined
[20:03] *** p6bannerbot sets mode: +v sheyll

[20:04] *** sheyll left
[20:04] *** Raxz27 joined
[20:05] *** p6bannerbot sets mode: +v Raxz27

[20:07] *** Raxz27 left
[20:11] *** fake_space_whale left
[20:22] *** polux362 joined
[20:23] *** p6bannerbot sets mode: +v polux362

[20:25] *** ludovicchabant joined
[20:26] *** p6bannerbot sets mode: +v ludovicchabant

[20:26] *** polux362 left
[20:30] *** ludovicchabant left
[20:40] *** sw1nn24 joined
[20:40] *** sw1nn24 left
[20:44] <Geth> ¦ rakudo: 06dfbf0273 | (Elizabeth Mattijsen)++ | 2 files

[20:44] <Geth> ¦ rakudo: BEGINnify nqp::getcurhllsym('default_cont_spec')

[20:44] <Geth> ¦ rakudo: 

[20:44] <Geth> ¦ rakudo: Because we don't need to look that up each time at runtime

[20:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/06dfbf0273

[20:48] *** nige joined
[20:49] *** p6bannerbot sets mode: +v nige

[20:49] *** [TuxCM] joined
[20:49] *** hotbobby25 joined
[20:49] *** p6bannerbot sets mode: +v [TuxCM]

[20:50] *** hotbobby25 left
[20:50] <nige> TimToady, just saw Zoffix mention the alias for the 6.d release. Here are some of the names I've collected: http://nigelhamilton.com/perl-branding-proposal.html

[20:53] *** naos13 joined
[20:53] *** MasterDuke left
[20:53] *** p6bannerbot sets mode: +v naos13

[20:57] *** naos13 left
[20:59] *** oem joined
[21:00] *** p6bannerbot sets mode: +v oem

[21:07] *** Charlie joined
[21:07] *** ProprietaryFreew joined
[21:08] *** p6bannerbot sets mode: +v Charlie

[21:08] *** p6bannerbot sets mode: +v ProprietaryFreew

[21:08] *** travis-ci joined
[21:08] *** p6bannerbot sets mode: +v travis-ci

[21:08] <travis-ci> Rakudo build passed. Zoffix Znet 'Cover more `for` opts

[21:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/434284315 https://github.com/rakudo/rakudo/compare/60d64e10a2b2...bab9a8d79178

[21:08] *** travis-ci left
[21:09] *** Kaiepi left
[21:09] *** ProprietaryFreew left
[21:10] *** Charlie left
[21:11] <Geth> ¦ rakudo: 8c4546bb58 | (Elizabeth Mattijsen)++ | src/core/array_operators.pm6

[21:11] <Geth> ¦ rakudo: Make [42] use the new Scalar initialization setup

[21:11] <Geth> ¦ rakudo: 

[21:11] <Geth> ¦ rakudo: Completely inlines `for ^1_000_000 -> int $_ { [42] }` without any

[21:11] <Geth> ¦ rakudo: allocations whatsoever: 99.11% of frames got inlined in --profile.

[21:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8c4546bb58

[21:18] * Zoffix hopes people won't all pile on on TimToady now

[21:18] *** MasterDuke joined
[21:18] *** p6bannerbot sets mode: +v MasterDuke

[21:18] *** MasterDuke left
[21:18] *** MasterDuke joined
[21:18] *** herbert.freenode.net sets mode: +v MasterDuke

[21:18] *** p6bannerbot sets mode: +v MasterDuke

[21:19] <Zoffix> We had over a year worth of discussion threads. They're all logged and will be presented.

[21:19] <AlexDaniel> Yeah no need, I'm pretty sure Zoffix will do the best job possible at this

[21:21] <nige> agreed - I hope the link above is helpful (that's all)

[21:21] <AlexDaniel> it's nice to see this moving forward somewhat, Zoffix++

[21:27] <AlexDaniel> I'm also so tired with that issue that I'll take *any* alias. I hope others feel the same :)

[21:29] <nige> (still hopes that TimToady would come up with one) 

[21:32] * lizmat has expressed her opinion in the past and refrains from expressing it again as it hasn't changed

[21:40] *** oem left
[21:44] *** gmodena29 joined
[21:45] *** gmodena29 left
[22:05] *** stmuk_ joined
[22:05] *** stmuk left
[22:06] *** travis-ci joined
[22:06] *** p6bannerbot sets mode: +v travis-ci

[22:06] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'BEGINnify nqp::getcurhllsym('default_cont_spec')

[22:06] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/434314754 https://github.com/rakudo/rakudo/compare/bab9a8d79178...06dfbf0273cf

[22:06] *** travis-ci left
[22:06] *** p6bannerbot sets mode: +v stmuk_

[22:09] *** fake_space_whale joined
[22:10] *** p6bannerbot sets mode: +v fake_space_whale

[22:21] *** SanguineAnomaly2 joined
[22:22] *** p6bannerbot sets mode: +v SanguineAnomaly2

[22:22] *** b2 joined
[22:23] *** p6bannerbot sets mode: +v b2

[22:24] *** SanguineAnomaly2 left
[22:26] *** b2 left
[22:27] <Zoffix> AlexDaniel: same here. I'll take anything that isn't tied to perl

[22:35] <jnthn> .

[22:35] <yoleaux> 16:55Z <Zoffix> jnthn: is it deliberate that the range of optimized values doesn't include the endpoints? I.e. that comparators are `>`/`<` instead of `>=`/`<=`? https://github.com/rakudo/rakudo/commit/1a103e7457d15029333fb8840cfc4351f2ec5598#diff-c6d4338f0fe083856631860c53453281R893

[22:36] <jnthn> Zoffix: Umm...I can't immediately think of a reason.

[22:37] <jnthn> I wonder if we can do it with 64-bit numbers even

[22:38] <jnthn> Or at least, do that on MoarVM and JVM...I dunno about js in that reguard

[22:38] *** okdana3 joined
[22:39] *** p6bannerbot sets mode: +v okdana3

[22:41] *** okdana3 left
[22:49] *** evalable6 left
[22:49] *** evalable6 joined
[22:49] *** ChanServ sets mode: +v evalable6

[22:50] *** p6bannerbot sets mode: +v evalable6

[22:53] <MasterDuke> ugh, i'm trying to rebase my wip range optimization to HEAD, it's not an easy merge

[23:22] *** edog17 joined
[23:23] *** p6bannerbot sets mode: +v edog17

[23:25] *** edog17 left
[23:31] *** raSAM21 joined
[23:32] *** p6bannerbot sets mode: +v raSAM21

[23:34] *** raSAM21 left
