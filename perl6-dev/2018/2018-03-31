[04:40] <Geth> ¦ rakudo: Kaiepi++ created pull request #1674: REPL: exit by pressing ^D twice, not once

[04:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1674

[08:07] <Geth> ¦ nqp/nqpmake: 8a3f2005c6 | (Stefan Seifert)++ | tools/make.nqp

[08:07] <Geth> ¦ nqp/nqpmake: No need to split target names, we already split prerequisites

[08:07] <Geth> ¦ nqp/nqpmake:

[08:07] <Geth> ¦ nqp/nqpmake: We already expand macros and split them into individual target names when

[08:07] <Geth> ¦ nqp/nqpmake: dealing with prerequisites, so we don't have to do that again when processing

[08:07] <Geth> ¦ nqp/nqpmake: targets.

[08:07] <Geth> ¦ nqp/nqpmake: review: https://github.com/perl6/nqp/commit/8a3f2005c6

[09:10] <[Tux]> Rakudo version 2018.03-135-gac5cf2bb0 - MoarVM version 2018.03-58-g0aaea3c4f

[09:10] <[Tux]> csv-test-xs-20      0.430 -  0.458

[09:10] <[Tux]> csv-ip5xs           0.920 -  0.924

[09:10] <[Tux]> test-t --race       1.039 -  1.044

[09:10] <[Tux]> test-t              2.402 -  2.412

[09:10] <[Tux]> csv-ip5xs-20        8.565 -  8.682

[09:10] <[Tux]> test                8.826 -  9.224

[09:10] <[Tux]> test-t-20 --race   15.567 - 15.583

[09:10] <[Tux]> csv-parser         36.501 - 38.147

[09:10] <[Tux]> test-t-20          43.329 - 44.003

[12:41] <Geth> ¦ rakudo: 768cf9f298 | (Elizabeth Mattijsen)++ | src/core/Capture.pm6

[12:41] <Geth> ¦ rakudo: Streamline Capture.FLATTENABLE_(LIST|HASH)

[12:41] <Geth> ¦ rakudo:

[12:41] <Geth> ¦ rakudo: This appears to make it 30% faster.  This should benefit any code that

[12:41] <Geth> ¦ rakudo: passes on a flattened Capture.  Found this while looking at start { }

[12:41] <Geth> ¦ rakudo: performance.

[12:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/768cf9f298

[12:47] <timotimo> :o :o :o :o :o

[12:47] <timotimo> https://hg.icculus.org/icculus/mojoelf/file/78de07f0b181/mojoelf.c

[12:48] <MasterDuke> can we use that for something?

[12:49] <timotimo> ryan gordon wrote this, "because dlopen() needs a filename and [he] wanted to load shared libraries from a memory buffer."

[12:49] <timotimo> i ran into this very limitation when i wanted to build a single-executable rakudo binary

[12:50] <timotimo> because it has these "extops" that are loaded in via a .so file

[12:52] <MasterDuke> ah

[12:53] <MasterDuke> but this won't work for windows, right?

[12:54] <timotimo> oh, well ...

[12:55] <timotimo> i think if we compile the library in question into an elf format even on windows it might work?

[12:56] <MasterDuke> huh

[12:56] <timotimo> not sure if we can actually do that

[12:58] <timotimo> there's a library that does the same thing for PE binaries

[12:59] <MasterDuke> oh, nice

[13:00] <timotimo> https://github.com/fancycode/MemoryModule

[13:14] <dogbert17> is synopsebot down?

[14:22] <dogbert17> m: class Foo { multi method aaa() { my Int $y = 0; }; multi method aaa(Int $x where $x > 0 = 1) { my Int $y = $x; }; }; my Instant $t1 = now; for (1 .. 10000) { Foo.aaa() }; my Instant $t2 = now; my $d1 = ( $t2 - $t1 ).narrow; say "$d1"

[14:22] <camelia> rakudo-moar 768cf9f29: OUTPUT: «0.3034108␤»

[14:22] <dogbert17> m: class Foo { multi method aaa() { my Int $y = 0; }; multi method aaa(Int $x = 1) { my Int $y = $x; }; }; my Instant $t1 = now; for (1 .. 10000) { Foo.aaa() }; my Instant $t2 = now; my $d1 = ( $t2 - $t1 ).narrow; say "$d1"

[14:22] <camelia> rakudo-moar 768cf9f29: OUTPUT: «0.016522␤»

[14:23] <dogbert17> say 0.3034108 / 0.016522

[14:23] <evalable6> dogbert17, rakudo-moar 768cf9f29: OUTPUT: «18.364048␤»

[14:25] <timotimo> it's a little bit faster if you write where * > 0 rather than where $x > 0

[14:25] <dogbert17> aha

[14:26] <dogbert17> m: class Foo { multi method aaa() { my Int $y = 0; }; multi method aaa(Int $x where * > 0 = 1) { my Int $y = $x; }; }; my Instant $t1 = now; for (1 .. 10000) { Foo.aaa() }; my Instant $t2 = now; my $d1 = ( $t2 - $t1 ).narrow; say "$d1"

[14:26] <camelia> rakudo-moar 768cf9f29: OUTPUT: «0.4627085␤»

[14:26] <dogbert17> heh

[14:26] <timotimo> um ...

[14:27] <timotimo> it's faster on my system at least

[14:27] <timotimo> maybe try benchable instead, as it runs the thing multiple times to account for system load and such?

[14:27] * dogbert17 checks locally

[14:28] <dogbert17> yeah, it's faster although not by much

[14:29] <dogbert17> so what's happening here, i.e. in the first example we call the multi with no params so the one with the where clause shouldn't be involved ?

[14:29] <timotimo> it does look like it's calling into ACCEPTS; i'd imagine we could try to pull the where clause out when compiling the signature to actual code

[14:30] <timotimo> m: class Foo { multi method aaa() { my Int $y = 0; }; multi method aaa(Int $x where $x > 0) { my Int $y = $x; }; }; my Instant $t1 = now; for (1 .. 10000) { Foo.aaa() }; my Instant $t2 = now; my $d1 = ( $t2 - $t1 ).narrow; say "$d1"

[14:30] <camelia> rakudo-moar 768cf9f29: OUTPUT: «0.0067389␤»

[14:31] <timotimo> if you make it non-optional it takes the first one always

[14:32] <dogbert17> interesting

[14:33] <timotimo> looks like an optional parameter that has a matching where clause with its default value is considered more narrow than the one that matches arity perfectly

[14:34] <dogbert17> is that reasonable?

[14:34] <timotimo> i'd prefer if it didn't do that :)

[14:34] <timotimo> what if we re-order the candidates ..

[14:35] <timotimo> m: class Foo { multi method aaa(Int $x where $x > 0 = 1) { my Int $y = 1; }; multi method aaa() { my Int $y = 0; }; }; my Instant $t1 = now; for (1 .. 10000) { Foo.aaa() }; my Instant $t2 = now; my $d1 = ( $t2 - $t1 ).narrow; say "$d1"

[14:35] <camelia> rakudo-moar 768cf9f29: OUTPUT: «0.2533668␤»

[14:35] <timotimo> nope

[14:36] <dogbert17> hmm

[14:37] <dogbert17> was looking at RT #128055

[14:37] <dogbert17> however certain bots are down :(

[14:44] <Geth> ¦ nqp/nqpmake: dc717a8b77 | (Stefan Seifert)++ | tools/make.nqp

[14:44] <Geth> ¦ nqp/nqpmake: Ensure we get the most up to date timestamp for freshly built targets

[14:44] <Geth> ¦ nqp/nqpmake: review: https://github.com/perl6/nqp/commit/dc717a8b77

[14:54] <AlexDaniel> undersightable6: status

[14:54] <AlexDaniel> …

[14:58] <AlexDaniel> undersightable6: status

[14:58] <undersightable6> AlexDaniel, OK! Working on it…

[14:58] <undersightable6> AlexDaniel, 0 errors, 11 warnings: https://gist.github.com/fc9fbb5c782e7ac3f823a23b64203657

[14:59] <AlexDaniel> dalek synopsebot ZofBot

[15:00] <AlexDaniel> I can't ssh to hack.p6c.org

[15:00] <AlexDaniel> timotimo: ↑ you should be pinged according to https://github.com/perl6/doc/issues/711#issuecomment-235414744

[15:01] <AlexDaniel> dogbert17: fwiw undersightable6 was down because of the 10 connection limit, and sometimes other whateverables end up like this too

[15:02] <AlexDaniel> (there are 17 bots and only 10 connections are allowed per IP)

[15:03] <AlexDaniel> well, and 20 is the limit because ipv4 and ipv6

[15:03] <dogbert17> so, we have too many bots :)

[15:04] <AlexDaniel> no, the real problem is that we don't have this merged: https://github.com/MoarVM/MoarVM/pull/659

[15:04] <AlexDaniel> then I'd be able to give every bot its own ipv4 address lol (if I really wanted)

[15:04] <dogbert17> cool

[15:05] <dogbert17> are your bots still doing well, i.e. no SEGV's

[15:05] <AlexDaniel> yes, everything is perfect

[15:05] <AlexDaniel> no significant memory leaks, no segvs

[15:06] <AlexDaniel> this will be the most stable star release from my view

[15:06] <dogbert17> \o/

[15:06] <timotimo> i just force-off'd hack

[15:06] <AlexDaniel> timotimo: thanks

[15:16] <timotimo> AlexDaniel: shouldn't you be able to get a "custom" network interface for individual unit files that have a different IP?

[15:16] <AlexDaniel> timotimo: maybe?

[15:17] <AlexDaniel> last time I looked I was unable to figure out an easy way to do it

[15:17] <timotimo> that'll get us a head start on "too many bots"

[15:17] <AlexDaniel> well, there's a room for 3 more bots :)

[15:17] <AlexDaniel> they just get stuck trying to reconnect with the same ip sometimes

[15:17] <Kaiepi> unit files?

[15:18] <AlexDaniel> I think after an hour of this they get restarted by systemd, which then does .pick again

[15:18] <AlexDaniel> and so has 50% chance of finally connecting properly :D

[15:18] <timotimo> Kaiepi: systemd things

[15:18] <Kaiepi> ohh

[15:18] <AlexDaniel> I mean, the bot does .pick when it starts

[15:22] <Kaiepi> for my vpses i have dhcpd set up so each one has its own static ip for this sort of thing

[15:22] <Kaiepi> *vms

[15:23] <Kaiepi> they use their own network interfaces for this

[15:24] <Kaiepi> i'm not sure how well that'd transfer over to systemd, but i haven't had any problems with it so far

[15:27] <dogbert17> RT #130370

[15:27] <synopsebot> RT#130370 [open]: https://rt.perl.org/Ticket/Display.html?id=130370 [CONC] Tapping on a very active .out of Proc::Async wrecks the work queue

[15:27] <dogbert17> yay

[15:30] <AlexDaniel> dogbert17: yeah that's resolved I think

[15:31] <AlexDaniel> maybe there are other cases where it does not perform well enough

[15:31] <AlexDaniel> but this particular ticket probably just needs tests

[15:38] <jnthn> That one is a lot better than it was because there's now multiple work queues

[15:39] <jnthn> There isn't yet sufficient work done on back-pressure to slow down a process emitting too fast for us to handle, however

[15:53] <nine> Darn...make recipies consist of multiple commands which have to be run serially. This makes managing concurrency via ConcBlockingQueue for those async processes a lot harder

[15:54] <timotimo> give a command the queue and a "next" like a linked list so they can push their next back into the queue?

[15:58] <nine> That's how I figured it would work overall. The difficulty now comes from the queue managing low level commands while concurrency is meant for the higher level jobs.

[15:59] <nine> Will need some thinking for how to structure this. At least most of the infrastructure is already done. I have a nice job graph built from the Makefile tree and I have a means of finding the next buildable job.

[16:03] <nine> The funny part is that to be able to keep the queue filled, I may not just toposort the tree once and push into the queue but have to traverse the tree again and again. Countrary to intuition this is not that costly because the next buildable job will be reached in very few traversal steps every time.

[17:12] <dogbert17> m: my @primes = grep { .is-prime }, 1 .. *; my @p = gather for 4000, 5, 100, 2000 -> $n { take start { @primes[$n] }; }; .say for await @p  # RT #127208

[17:12] <camelia> rakudo-moar 768cf9f29: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    No such method 'is-prime' for invocant of type 'Mu'␤      in block  at <tmp> line 1␤      in block  at <tmp> line 1␤␤»

[17:12] <synopsebot> RT#127208 [open]: https://rt.perl.org/Ticket/Display.html?id=127208 [SEGV][CONC] Non-deterministic segfaults in parallel code

[17:12] <dogbert17> is the syntax above incorrect ?

[17:18] <jnthn> Syntax is fine, it's the semantics that are the problem.

[17:20] <dogbert17> so the code is a bit bogus as it stands

[17:22] * dogbert17 must read up a bit on this stuff

[17:34] <Geth_> ¦ nqp: 29793bb553 | usev6++ | src/vm/jvm/QAST/Compiler.nqp

[17:34] <Geth_> ¦ nqp: [JVM] Fix compilation for list of void statements

[17:34] <Geth_> ¦ nqp:

[17:34] <Geth_> ¦ nqp: Fixes 'my (\x) = 42' (gave an ArrayIndexOutOfBoundException before).

[17:34] <Geth_> ¦ nqp: review: https://github.com/perl6/nqp/commit/29793bb553

[18:47] <AlexDaniel> dogbert17: I guess RT#128870 is related?

[18:47] <synopsebot> RT#128870 [open]: https://rt.perl.org/Ticket/Display.html?id=128870 [SEGV] Pushing into the same array from two threads segfaults reliably

[18:58] <Geth_> ¦ nqp: 9cc4fc134b | (Elizabeth Mattijsen)++ | tools/build/MOAR_REVISION

[18:58] <Geth_> ¦ nqp: Get CPP nativecall and nqp::ctx JITting fixes

[18:58] <Geth_> ¦ nqp: review: https://github.com/perl6/nqp/commit/9cc4fc134b

[18:58] <Geth_> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.03-56-g85fc758...2018.03-59-gfc1bb31

[19:14] <Geth_> ¦ rakudo: dc1a3f5a31 | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[19:14] <Geth_> ¦ rakudo: Bump NQP to several fixes

[19:14] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dc1a3f5a31

[19:14] <Geth_> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.03-42-g0d344c2...2018.03-44-g9cc4fc1

[19:59] <AlexDaniel> lizmat: “I'm working from these premises: […] Perl 6 is not going to change its name.” that's a very strong assumption that hopefully does not correspond to reality

[19:59] <AlexDaniel> for example, we have this: https://github.com/perl6/6.d-prep/tree/master/TODO#language-extended-naming

[19:59] <AlexDaniel> which is not exactly about changing a name completely, but it can turn into that eventually

[20:02] <AlexDaniel> and even your 3rd premise is not entirely right, as Larry seemed to agree that things can have more than one name

[20:02] <lizmat> well, it comes together with "Larry is not going to change his mind about the naming of Perl 6"

[20:03] <lizmat> I guess TIMTOWTNI  :-

[20:03] <lizmat> (

[20:03] <Geth_> ¦ roast: 9f1fd82def | usev6++ | 2 files

[20:03] <Geth_> ¦ roast: [JVM] Run tests for my with parens and SSA binding

[20:03] <Geth_> ¦ roast:

[20:03] <Geth_> ¦ roast: Fixed with https://github.com/perl6/nqp/commit/29793bb553

[20:03] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/9f1fd82def

[20:06] <lizmat> AlexDaniel: let me put it this way: I believe it when I see it  :-)

[20:06] <AlexDaniel> lizmat: well, I assume you've seen this? https://youtu.be/E5t8qaAGw9w?t=4885

[20:08] <lizmat> AlexDaniel: I co-organized that even and I was there  :-)

[20:08] <AlexDaniel> touché :)

[20:11] * jnthn wonders where AlexDaniel quoted from?

[20:12] <AlexDaniel> https://www.reddit.com/r/perl/comments/885j9v/how_we_can_reappropriate_the_perl_brand_in_the/

[20:12] <jnthn> oh goodness reddit

[20:12] <AlexDaniel> :)

[20:13] <lizmat> yeah, thanks to the efforts of ribasushi

[20:13] <AlexDaniel> listening to that video carefuly, however, I realize that it doesn't fully make sense. He is talking about marketing distributions and … versions? So Star can be marketed as Star, and Diwali can be marketed as Diwali? Well thanks a lot, but this is not helping anything when the underlying language is “Perl”.

[20:14] <lizmat> indeed

[20:14] <AlexDaniel> and it almost feels like I and Zoffix were a bit too optimistic to hear what we wanted to hear there

[22:05] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/03/31/2018-14-singularity-released/

[22:08] <timotimo> lizmat: i have a blog post!

[22:09] <timotimo> oh wait

[22:09] <lizmat> cool, where ?

[22:09] <timotimo> that was already in last week's weekly

[22:09] <timotimo> never mind!

[22:09] <timotimo> i just can't believe it has been that long :)

[22:09] <lizmat> yeah, time flies, and it's not even a week ago  :)

[22:10] <timotimo> right

[23:20] <Zoffix> AlexDaniel: I didn't hear what I wanted to hear. I heard exactly what Larry said: "we can have other names under which versions/distros can be marketed". Which is exactly why the 6.d-prep repo talks about aliases not renames ( https://irclog.perlgeek.de/perl6/2018-03-16#i_15929728 )

[23:20] <yoleaux> 30 Mar 2018 16:03Z <Kaiepi> Zoffix: didn't end up being a bug, just differences in how openbsd handles fcntl that i wasn't aware of

[23:21] <Zoffix> But skimming that reddit thread, I'd say people are doing too much thinking for Larry. People spew completely made up information just for the sake of trying to win an argument and not having an accurate picture of reality.

[23:24] <Zoffix> As well as people trying to intetionally stir up drama by declaring assumptions about liz's talks as facts before it even happened

[23:29] <Zoffix> lizmat++ # good weekly

[23:29] <Zoffix> You got me with the Singularity :(

[23:29] <Zoffix> (mostly because it's still 31st here :P)

[23:30] <timotimo> april fool's things have been happening all day for some reason

[23:42] <AlexDaniel> Zoffix: well, that quote is exactly my point. He didn't say that the language itself can be marketed under another name

[23:42] <AlexDaniel> maybe it was implied, I don't know

[23:48] <Zoffix> AlexDaniel: the question was posed about multiple language versions and the answer was about versions.

[23:48] <Zoffix> There was no "THE language" in that question.

[23:50] <Zoffix> ("Pumpking Perl" is the old proposed rename for Perl 5)

[23:50] <AlexDaniel> oh, versions in this sense

[23:50] <AlexDaniel> I totally forgot that the number was supposed to be a version

[23:50] <AlexDaniel> d'oh!

[23:52] <AlexDaniel> OK then

[23:52] <AlexDaniel> ZofBot: do you also now think that “6” is part of the name?

[23:52] <ZofBot> AlexDaniel, m
