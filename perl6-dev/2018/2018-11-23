[00:04] *** Ven`` left
[00:55] *** lizmat left
[01:00] *** lizmat joined
[01:00] *** p6bannerbot sets mode: +v lizmat

[01:45] <lucasb> m: class { multi method m(1) {}; method gist {'XXXXXXXXXXXX'} }.m

[01:45] <camelia> rakudo-moar 8e27d5f5b: OUTPUT: «Cannot resolve caller m(XXXXXXXXXXXX: ); none of these signatures match:␤    (<anon|1>: Int $ where { ... }, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[01:45] <lucasb> ^^ gist string leaked into error message

[01:46] *** lucasb left
[02:59] *** lizmat left
[03:01] *** MasterDuke joined
[03:03] *** ufobat_ joined
[03:04] *** p6bannerbot sets mode: +v ufobat_

[03:07] *** ufobat left
[03:17] *** MasterDuke left
[03:20] *** leont left
[07:35] *** robertle joined
[07:35] *** p6bannerbot sets mode: +v robertle

[08:43] *** lizmat joined
[08:43] *** p6bannerbot sets mode: +v lizmat

[09:32] *** robertle left
[09:33] <jnthn> I don't think the gist string "leaked" into the error, so much as it was a deliberate design choice to use gist there to convey the value that was being passed in some reasonable way

[09:33] <yoleaux> 02:49Z <Xliff> jnthn: Well, I finally had time to try your valgrind idea. Have no idea how to parse the results, though. https://gist.github.com/Xliff/8e402d623cea2dc39ceaf245e820d7fd

[09:59] <Geth> ¦ rakudo: 10693d16f1 | (Elizabeth Mattijsen)++ | 2 files

[09:59] <Geth> ¦ rakudo: Make sure BagHash/MixHash.push-all push proxies as well

[09:59] <Geth> ¦ rakudo: 

[09:59] <Geth> ¦ rakudo: Because PositionalBindFailover uses .push-all internally to generate its

[09:59] <Geth> ¦ rakudo: cache of values, we need to pass proxies in there to make %bh <<+=>> 3 work

[09:59] <Geth> ¦ rakudo: 

[09:59] <Geth> ¦ rakudo: Spotted while writing exhaustive infix metaop tests.

[09:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/10693d16f1

[10:04] <Geth> ¦ roast: 8e726026a3 | (Elizabeth Mattijsen)++ | S03-metaops/infix.t

[10:04] <Geth> ¦ roast: More tests and tweaks

[10:04] <Geth> ¦ roast: 

[10:04] <Geth> ¦ roast: - enable %h <<+=>> 3 tests, they now work on BagHash/MixHash

[10:04] <Geth> ¦ roast: - move to div tests to real section

[10:04] <Geth> ¦ roast:   - div= *always* removes all keys from a SetHash as True div X where X > 1

[10:04] <Geth> ¦ roast:     is always False, because 1 div X where X > 1 is always 0

[10:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8e726026a3

[10:52] <lizmat> London sight seeing + socializing &

[10:52] <yoleaux> 22 Nov 2018 11:53Z <SmokeMachine> lizmat: very good article! Would it worth to tell that currently custom specialization of X::Control won’t be catched by a CONTROL phaser but will by a CATCH?

[10:52] <yoleaux> 22 Nov 2018 14:37Z <uzl> lizmat: Great article! BTW, `say $foo;` doesn't throw a warning even when outside of the quietly block. I guess you meant to use `print`?.

[10:52] <yoleaux> 22 Nov 2018 14:38Z <uzl> lizmat: I also have a question about the article on containers: https://colabti.org/irclogger/irclogger_log/perl6?date=2018-11-20#l424

[10:52] *** lizmat left
[11:16] *** lucasb joined
[11:17] *** p6bannerbot sets mode: +v lucasb

[11:21] <lucasb> m: use MONKEY-TYPING; augment class Str { multi method foo(Int) {} }; 'hi there'.foo

[11:21] <camelia> rakudo-moar 10693d16f: OUTPUT: «Cannot resolve caller foo(Str: ); none of these signatures match:␤    (Str: Int, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[11:21] <lucasb> m: use MONKEY-TYPING; augment class Str { multi method foo(1) {} }; 'hi there'.foo

[11:21] <camelia> rakudo-moar 10693d16f: OUTPUT: «Cannot resolve caller foo(hi there: ); none of these signatures match:␤    (Str: Int $ where { ... }, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[11:22] <lucasb> ^^ deliberate design choice? :)

[11:43] <jnthn> I'm not sure what you're asking is deliberate

[11:43] <jnthn> Nothing looks surprising to me there

[11:48] <lucasb> In the message "Cannot resolve caller foo(hi there: )", is the substring "hi there" a more descriptive description of the type Str than the string "Str" itself, as shown in the previous error message? The only thing that changed was the signature (Int) vs (Int $x where $x == 1)

[11:59] <jnthn> oh, I see

[12:00] <jnthn> I wonder if it's being very smart and figuring out a type mis-match vs. constraint mis-match

[12:00] <jnthn> "very smart" :)

[12:01] <jnthn> In that I guess it's saying "do we have any constraints"

[12:01] <jnthn> And if yes, then emitting the values, not just the types

[12:01] <jnthn> That's kinda helpful, though arguably less so on the invocant

[12:02] <jnthn> Though technically one could constrain that too :)

[12:05] <lucasb> thanks for confirming, jnthn!

[12:05] <lucasb> I just wanted to point that it was using the .gist, like the snippet "class { multi method m(1) {}; method gist {'XXXXXXXXXXXX'} }.m" in the backlog

[12:06] *** leont joined
[12:07] *** p6bannerbot sets mode: +v leont

[12:13] *** [Tux] left
[12:17] *** j3nnn1 joined
[12:17] *** p6bannerbot sets mode: +v j3nnn1

[12:21] *** leont left
[12:22] *** [Tux] joined
[12:22] *** p6bannerbot sets mode: +v [Tux]

[12:37] <|Tux|> Rakudo version 2018.10-174-g10693d16f - MoarVM version 2018.10-91-g8c67e1697

[12:37] <|Tux|> csv-test-xs-20      0.427 -  0.460

[12:37] <|Tux|> test-t --race       0.803 -  0.822

[12:37] <|Tux|> csv-ip5xs           0.901 -  0.909

[12:37] <|Tux|> test-t              1.755 -  1.798

[12:37] <|Tux|> csv-ip5xs-20        6.813 -  6.820

[12:37] <|Tux|> test                7.997 -  8.035

[12:37] <|Tux|> test-t-20 --race   10.263 - 10.418

[12:37] <|Tux|> csv-parser         21.780 - 22.186

[12:37] <|Tux|> test-t-20          29.968 - 30.320

[13:00] *** ufobat___ joined
[13:00] *** ufobat_ left
[13:00] *** p6bannerbot sets mode: +v ufobat___

[13:37] *** brrt joined
[13:38] *** p6bannerbot sets mode: +v brrt

[14:27] *** leont joined
[14:28] *** p6bannerbot sets mode: +v leont

[14:55] *** donaldh joined
[14:56] *** p6bannerbot sets mode: +v donaldh

[17:05] *** brrt left
[17:38] *** jsimonet left
[17:38] *** jsimonet joined
[17:39] *** p6bannerbot sets mode: +v jsimonet

[17:57] <lucasb> m: dd (.list, .hash) given \(1,2,'a'=>1,'b'=>2)

[17:57] <camelia> rakudo-moar 10693d16f: OUTPUT: «((1, 2, :a(1), :b(2)), Map.new(()))␤»

[17:58] <lucasb> m: dd (.list, .hash) given (1,2,'a'=>1,'b'=>2).Capture

[17:58] <camelia> rakudo-moar 10693d16f: OUTPUT: «((1, 2), Map.new((:a(1),:b(2))))␤»

[17:59] <lucasb> So, while the capture construct \(...) makes a clear distinction between named parameters and pair objects

[17:59] <lucasb> List.Capture goes the extra effort of partitioning the list into list/hash parts

[18:01] <lucasb> List.Capture had this design choice, either handle all pair objects as positionals or as named parameters

[18:02] <lucasb> Either way choosen, would be make it impossible to achieve the other, no?

[18:02] <lucasb> currently, there's no way to create a capture from a list that contains positional pair objects

[18:03] <lucasb> the same way as would be no way to create a capture from a list that contains named parameters, if List.Capture had choosen to make all elements as positionals, instead of splitting the list into two.

[18:08] <lucasb> ^^ is my interpretation correct?

[18:12] <timotimo> that will at least make Capture.List.Capture partially round-trip

[18:15] <lucasb> m: dd (.list, .hash) given \(1,2,'a'=>1,'b'=>2).List.Capture

[18:15] <camelia> rakudo-moar 10693d16f: OUTPUT: «((1, 2), Map.new((:a(1),:b(2))))␤»

[18:16] <lucasb> ^^ do you mean like that?

[18:16] <lucasb> I don't think Capture.List.Capture round-tripped the right way like this

[18:17] <lucasb> the Capture's positinal pairs ended up as named parameters, no?

[18:21] <lucasb> here's List.Capture: https://github.com/rakudo/rakudo/blob/master/src/core/List.pm6#L895-L919

[18:22] *** hankache joined
[18:23] *** p6bannerbot sets mode: +v hankache

[18:25] <lucasb> what you all think about a named paramater for List.Capture like somelist.Capture(:handle-pair-objects-as-positinals)

[18:26] <lucasb> *positionals :)

[18:26] <lucasb> just as an experiment :)

[18:27] <lucasb> to try to remedy the current situation. the name of the flag can be bikeshedded

[18:33] *** hankache left
[18:33] *** hankache joined
[18:34] *** p6bannerbot sets mode: +v hankache

[18:37] *** hankache_ joined
[18:38] *** p6bannerbot sets mode: +v hankache_

[18:40] *** kmel joined
[18:40] *** hankache left
[18:40] *** p6bannerbot sets mode: +v kmel

[18:43] *** hankache_ left
[18:47] *** kmel left
[18:49] <SmokeMachine> lucasb: that's the same, but the opposite for hashes...

[18:49] <SmokeMachine> m: dd (.list, .hash) given {"a" => 1, "b" => 2}.Capture

[18:49] <camelia> rakudo-moar 10693d16f: OUTPUT: «((), Map.new((:a(1),:b(2))))␤»

[18:51] <SmokeMachine> lucasb: I think a List converted to a Capture should only populate the .list part, as a Hash converted to a Capture should only populate the .hash part... as it is currently...

[18:53] <SmokeMachine> I mean the oposite

[18:55] <lucasb> "a List converted to a Capture should only populate the .list part"

[18:56] <lucasb> I can agree with that. But I also can view the side of the current implementation, that splits/partition the list into list/hash parts

[18:57] <lucasb> but this is perl, so I think an API the that combines all sides is prefered

[18:59] <lucasb> thus, I propose List.Capture(:all-pairs-are-positionals) and List.Capture(:all-pairs-are-named-args)

[19:00] <lucasb> whatever the actual flag names would be

[19:04] <AlexDaniel> fwiw I'll be busy tomorrow for the whole day

[19:05] <SmokeMachine> m: dd (.list, .hash) given Capture.new: :list(1, 2, "a" => 1, "b" => 2) # lucasb this works too

[19:05] <camelia> rakudo-moar 10693d16f: OUTPUT: «((1, 2, :a(1), :b(2)), Map.new(()))␤»

[19:05] <AlexDaniel> someone please please take a look at R#2499 :)

[19:05] <synopsebot_> R#2499 [open]: https://github.com/rakudo/rakudo/issues/2499 [⚠ blocker ⚠] Failures in Perl6::Parser module

[19:55] <lucasb> :{(Any) => 1}.Capture  #=> warns: Use of uninitialized value of type Any in string context

[19:55] <lucasb> :{(Str) => 1}.Capture  #=> dies: Cannot unbox a type object (Str) to a str

[19:55] <lucasb> :{(Mu) => 1}.Capture   #=> dies: Type check failed in binding to parameter 'key'; expected Any but got Mu (Mu)

[19:58] <leont> Hashes are string indexed by default

[19:58] <SmokeMachine> not with `:{}`

[19:58] <leont> Not?

[19:59] <SmokeMachine> m: my $a = :{42 => 1}; $a.keys.head.^name.say

[19:59] <camelia> rakudo-moar 10693d16f: OUTPUT: «Int␤»

[20:05] <lucasb> leont: it's "objects hashes". First time I saw the syntax ":{...}" I thought it was strange, but now I'm used to it :)

[20:06] <lucasb> I was just trying to show that Hash.Capture has trouble converting an object hash to a capture. dunno how it's supposed to behave

[20:07] <lucasb> Hash.Capture, as List.Capture, also has to make the decision if things should ended up on the .list or .hash side of the Capture

[20:19] <leont> Ah, I see

[20:23] *** Ven`` joined
[20:24] *** lucasb left
[20:24] *** p6bannerbot sets mode: +v Ven``

[20:24] *** Ven` joined
[20:25] *** p6bannerbot sets mode: +v Ven`

[20:28] *** Ven`` left
[21:19] *** Ven` left
[21:44] *** patrickb joined
[21:44] *** p6bannerbot sets mode: +v patrickb

[23:32] *** patrickb left
[23:35] *** j3nnn1 left
[23:40] *** lizmat joined
[23:40] *** p6bannerbot sets mode: +v lizmat

[23:47] *** donaldh left
