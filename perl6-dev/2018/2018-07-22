[01:22] *** Kaiepi left
[01:56] *** PufferBot joined
[01:56] *** Kaiepi joined
[04:04] *** Kaiepi left
[04:05] *** PufferBot left
[04:44] *** Kaiepi joined
[05:43] *** x[LGWs4x4i]uG2N0 joined
[06:05] *** robertle joined
[06:28] *** Kaiepi left
[06:29] *** AlexDaniel left
[06:29] *** AlexDaniel joined
[06:30] *** Kaiepi joined
[06:33] *** fake_space_whale left
[07:24] <lizmat> Files=1246, Tests=76393, 381 wallclock secs (16.26 usr  5.56 sys + 2668.57 cusr 260.40 csys = 2950.79 CPU)

[07:37] <lizmat> benchable6: 2017.01,2018.01,2018.04, 2018.06 say (^Inf).hyper.grep( *.is-prime ).skip(999).head

[07:37] <benchable6> lizmat, starting to benchmark the 4 given commits

[07:38] <benchable6> lizmat, ¦2017.01: ««run failed, exit code = 1, exit signal = 0»» ¦2018.01: «0.7017» ¦2018.04: «0.7192» ¦2018.06: «0.6407»

[07:38] <benchable6> lizmat, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[07:38] <benchable6> lizmat, https://gist.github.com/ee98308dcca3561d46bff8128bc4de20

[07:39] <lizmat> benchable6: 2017.09,2018.01,2018.04, 2018.06 say (^Inf).hyper.grep( *.is-prime ).skip(999).head

[07:39] <benchable6> lizmat, starting to benchmark the 4 given commits

[07:40] <benchable6> lizmat, ¦2017.09: «10.0265» ¦2018.01: «0.6959» ¦2018.04: «0.6106» ¦2018.06: «0.6597»

[07:40] <benchable6> lizmat, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[07:42] <benchable6> lizmat, https://gist.github.com/879bf1a494fb43e1e3ac863e79127896

[09:33] *** skids joined
[10:01] *** lizmat left
[10:02] *** skids left
[10:04] *** Ven`` joined
[10:11] *** ilogger2 joined
[10:49] *** reportable6 left
[10:49] *** reportable6 joined
[10:49] *** ChanServ sets mode: +v reportable6

[11:09] * AlexDaniel retoasts

[12:12] <jnthn> .

[12:12] <yoleaux> 03:09Z <Zoffix> jnthn: does spesh do anything interesting with type constraints? What's the answer to the question: "Is there any potential performance benefit to specifying `Int` type constraint instead of just leaving it at Mu/Any?"

[12:16] <jnthn> .tell Zoffix In various places, Mu is treated as "don't even type check this", which is why we can use it to pass around non-Perl 6 types (e.g. NQP types, VM-provided objects). So that sounds like a win. But then if we have `sub foo(Int $i) { }` then it spots Int !~~ Iterable and Iterable !~~ Int and then emits code that just deconts any incoming value but does *not* wrap it up in a readonly Scalar. For

[12:16] <yoleaux> jnthn: I'll pass your message to Zoffix.

[12:16] <jnthn> Any it can't assume that, so conservatively emits code to create the container to make sure it stays as an item.

[12:18] <jnthn> .tell Zoffix So far as spesh goes, it will try to eliminate whatever type checks it can, usually replacing them with much cheaper deopt guards. In some cases, it do one guard of something and then avoid re-checking later, so removing type checks from whole chains of calls.

[12:18] <yoleaux> jnthn: I'll pass your message to Zoffix.

[12:20] *** Ven`` joined
[12:21] <jnthn> .tell Zoffix In summary, you stand to get better memory behavior with declaring the types, and in places where the default would be Any then it's all the same to spesh, so Any has no performance benefit over Int.

[12:21] <yoleaux> jnthn: I'll pass your message to Zoffix.

[13:06] <[Tux]> Rakudo version 2018.06-234-gcb2ea9328 - MoarVM version 2018.06-309-g428ed0e2a

[13:06] <[Tux]> csv-test-xs-20      0.444 -  0.452

[13:06] <[Tux]> test-t --race       0.984 -  1.031

[13:06] <[Tux]> csv-ip5xs           1.209 -  1.268

[13:06] <[Tux]> test-t              2.386 -  2.389

[13:06] <[Tux]> csv-ip5xs-20        8.241 -  8.538

[13:06] <[Tux]> test               10.355 - 10.552

[13:06] <[Tux]> test-t-20 --race   13.435 - 13.779

[13:06] <[Tux]> csv-parser         24.545 - 24.581

[13:06] <[Tux]> test-t-20          41.290 - 42.179

[13:08] <Geth> ¦ nqp/truffle: 5 commits pushed by (Paweł Murias)++

[13:08] <Geth> ¦ nqp/truffle: af2da82a58 | [truffle] Implement nqp::split (taking the HLL into account is still TODO)

[13:08] <Geth> ¦ nqp/truffle: e4564d2b22 | [truffle] Implement using void things as return values

[13:08] <Geth> ¦ nqp/truffle: 8b03b072b3 | [truffle] Better diagnostics for &is

[13:08] <Geth> ¦ nqp/truffle: 1b3ad31a8d | [truffle] Standardize num to str coercion to moar behavior

[13:08] <Geth> ¦ nqp/truffle: 911a0683f6 | Test stringifing 1.01e-100

[13:08] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/compare/33b9c7910d36...911a0683f680

[13:08] *** pmurias joined
[13:16] *** Ven`` left
[13:28] <Geth> ¦ nqp/truffle: 4361c5c07d | (Paweł Murias)++ | src/vm/jvm/bin/run_tests.pl

[13:28] <Geth> ¦ nqp/truffle: [truffle] Run passing tests

[13:28] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/4361c5c07d

[13:47] *** Ven`` joined
[14:12] *** thundergnat joined
[14:13] <thundergnat> Some more information about the module build failure I reported yesterday. http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-07-21#l216 

[14:14] <thundergnat> They are still happening for me, with completely fresh install of Rakudo HEAD and fresh install of zef into completely emptied directories.

[14:14] <thundergnat> See this gist for exact error information: https://gist.github.com/thundergnat/057aef48c0612905aa88b7553cc3323c 

[14:15] <thundergnat> I still haven't filed it as an issue because I'm still not convinced I am not causing it somehow... but I can't figure out how. :-(

[14:17] <thundergnat> Anyway, I can't stay online continuously, but I read the logs pretty regularly, if you need/want more info, ping me and I'll get back to you. 

[14:18] *** thundergnat left
[14:23] *** pmurias left
[14:25] *** pmurias joined
[15:01] <dogbert17> I see the same problems as thundergnat

[15:10] <dogbert17> perhaps it has something to do with the fact that anonymous access seems to be disallowed for the host used in the tests

[15:19] <Geth> ¦ rakudo: AlexDaniel assigned to lizmat Issue `please 'use experimental :pack'` even if code does exactly that https://github.com/rakudo/rakudo/issues/2111

[15:19] <Geth> ¦ rakudo: AlexDaniel assigned to jnthn Issue `please 'use experimental :pack'` even if code does exactly that https://github.com/rakudo/rakudo/issues/2111

[15:19] <AlexDaniel> and yes:

[15:19] <AlexDaniel> c: a847abe523^,a847abe523 package Foo { use experimental :pack; sub go() is export { "".encode.unpack("*") }; }; import Foo; go()

[15:19] <committable6> AlexDaniel, ¦a847abe523^: «» ¦a847abe: «Use of the 'unpack' method is experimental; please 'use experimental :pack'␤  in sub go at /tmp/juXla5Uwul line 1␤  in block <unit> at /tmp/juXla5Uwul line 1␤␤ «exit code = 1»»

[15:20] <AlexDaniel> (2018-07-18) https://github.com/rakudo/rakudo/commit/a847abe5236a6d3b63ae08ba116ea19c3738c291

[15:20] <AlexDaniel> that was a bit surprising to me

[15:21] <AlexDaniel> jnthn: ↑ :)

[15:21] <AlexDaniel> .tell thundergnat thanks GH#2111

[15:21] <yoleaux> AlexDaniel: I'll pass your message to thundergnat.

[15:21] <synopsebot> GH#2111 [open]: https://github.com/rakudo/rakudo/issues/2111 [regression][⚠ blocker ⚠] `please 'use experimental :pack'` even if code does exactly that

[15:28] <jnthn> AlexDaniel: Hm, don't think I did anything much with pack/unpack?

[15:28] <jnthn> Not that I remember anyway :P

[15:28] <AlexDaniel> jnthn: which is why it's so interesting, yes!

[15:28] <jnthn> Agree the error looks odd, though

[15:29] <AlexDaniel> I mean, it's bisected to https://github.com/rakudo/rakudo/commit/a847abe5236a6d3b63ae08ba116ea19c3738c291

[15:29] <AlexDaniel> which is directly these changes: https://github.com/perl6/nqp/commit/1925237d22b2cd93b0a2169d39256711979313e3

[15:29] <AlexDaniel> well, I mean these: https://github.com/MoarVM/MoarVM/compare/2018.06-230-g0daa14c87...2018.06-238-gfae91a6eb

[15:30] * jnthn is a bit surprised about a lexical pragma affecting a method...

[15:30] <AlexDaniel> I know! I'm doubting committable a bit :) but committable never ever gave a wrong result so far…

[15:32] <AlexDaniel> ah, you mean that…

[15:32] <jnthn> Ah

[15:32] * AlexDaniel 🤷

[15:32] <jnthn> https://github.com/rakudo/rakudo/blob/2fa08d5e6fc881fb951861f23a8a0835d03d012f/src/core/Buf.pm6#L285

[15:32] <jnthn> That makes it look more related

[15:52] <AlexDaniel> fresh toasts: https://toast.6lang.org/

[15:52] <AlexDaniel> several modules unhappy because of pack

[15:55] <jnthn> That looks much better than the previous run

[15:55] *** Ven`` left
[15:56] <jnthn> Ah, I still should put in that Proxy compat thing, though that's easy

[16:06] <Geth> ¦ rakudo: AlexDaniel assigned to jnthn Issue Backward compatibility for returning Proxy without `is rw` https://github.com/rakudo/rakudo/issues/2113

[16:06] <AlexDaniel> jnthn: ↑ a ticket for convenience

[16:06] <jnthn> Thanks

[16:06] <jnthn> I'll see if I can look at the tomorrow. Kinda need a bit of time off it today.

[16:07] <AlexDaniel> that's OK, I hope it's clear that nobody should be holding their breath for this release :)

[16:08] <AlexDaniel> although I hope we'll get somewhere by the end of the following week

[16:08] <jnthn> I sure hope so

[16:08] <jnthn> fwiw, I'm on vacation from Friday

[16:08] <jnthn> For a week

[16:09] <jnthn> Can almost certainly deal with the Proxy thing tomorrow, and probably the other issue too.

[16:10] <AlexDaniel> well yeah, once the issue with proxy and another one with pack are resolved I'm hoping to see a much cleaner result from toaster

[16:11] <AlexDaniel> other blockers are hopefully not busfactored on you :)

[16:11] <AlexDaniel> jnthn: btw it was amazing to see all the blockers disappear this week, very nice job 👍

[16:12] *** fake_space_whale joined
[16:14] <jnthn> Thanks. It was quite a bit of work, though I'm glad to have them resolved. :)

[16:14] <jnthn> Means I'll be able, especially after vacation, to get back to the more fun task of putting in new optimizations. :-)

[16:15] <AlexDaniel> heh, it's a lot of fun doing release prep these days! :)

[16:17] <jnthn> I'll aim to make the next one less "fun" for us all. :-)

[16:19] <AlexDaniel> I do find it somewhat enjoyable though. Bisecting stuff, trying to make sense of all the failures

[16:20] <AlexDaniel> otherwise it's just changelogging and hitting the button to cut the release… boring :)

[16:20] *** fake_space_whale left
[16:34] *** fake_space_whale joined
[16:51] *** robertle joined
[17:40] *** sivoais left
[18:11] *** sivoais joined
[18:14] *** pmurias left
[18:20] *** pmurias joined
[19:25] <Geth> ¦ rakudo: Kaiepi++ created pull request #2116: Implement native-descriptor attribute for IO::Socket::Async

[19:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2116

[19:29] *** Ven`` joined
[19:35] *** Kaiepi joined
[20:08] *** dct joined
[20:11] *** dct left
[20:23] <Geth> ¦ nqp: Kaiepi++ created pull request #488: Implement stubs for getting file descriptors from async sockets

[20:23] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/488

[20:31] *** Kaiepi left
[20:31] *** Kaiepi joined
[20:46] *** cognominal joined
[20:47] *** Ven`` left
[20:48] *** Ven`` joined
[20:54] *** pmurias left
[21:00] *** brrt joined
[21:07] *** MasterDuke joined
[21:15] *** cognominal left
[21:16] *** cognominal joined
[21:23] *** timo joined
[21:41] *** Ven`` left
[21:57] *** lizmat joined
[22:18] *** robertle left
[22:22] *** brrt left
[23:02] <Geth> ¦ rakudo: jmaslak++ created pull request #2117: Improve err for obs positionals w/ quantifiers

[23:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2117

[23:06] *** timo left
[23:45] *** fake_space_whale left
