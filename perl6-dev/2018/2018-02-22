[01:17] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1553: Rewrite 'Strip Slip' return to fit style better

[01:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1553

[01:43] <Geth> ¦ rakudo: e17f23f318 | (Jeremy Studer)++ | src/Perl6/Actions.nqp

[01:43] <Geth> ¦ rakudo: Rewrite 'Strip Slip' return to fit style better

[01:43] <Geth> ¦ rakudo:

[01:43] <Geth> ¦ rakudo: Match the style of the surrounding code better.

[01:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e17f23f318

[01:43] <Geth> ¦ rakudo: 832ae591f2 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[01:43] <Geth> ¦ rakudo: Merge pull request #1553 from jstuder-gh/quoteword_slip_style_tweak

[01:43] <Geth> ¦ rakudo:

[01:44] <Geth> ¦ rakudo: Rewrite 'Strip Slip' return to fit style better

[01:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/832ae591f2

[01:45] <Geth> ¦ rakudo: de3bde1367 | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/obtaining-a-commit-bit.pod

[01:45] <Geth> ¦ rakudo: Link `#perl6` in text to actual chat

[01:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/de3bde1367

[01:50] <Geth> ¦ rakudo: f9bced0c83 | (Zoffix Znet)++ | docs/obtaining-a-commit-bit.pod

[01:50] <Geth> ¦ rakudo: Tweak up commit bit docs

[01:50] <Geth> ¦ rakudo:

[01:50] <Geth> ¦ rakudo: - Mention some contributors emailed CLAs (it's a much

[01:50] <Geth> ¦ rakudo:     faster process)

[01:50] <Geth> ¦ rakudo: - Link to IRC chat

[01:50] <Geth> ¦ rakudo: - Mention contact on IRC users can speak to if they have any problems

[01:50] <Geth> ¦ rakudo: - Clarify TPF needs to receive the CLA before commit bit can be givent

[01:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f9bced0c83

[01:51] <Geth> ¦ rakudo: d0455a73e1 | (Zoffix Znet)++ | docs/obtaining-a-commit-bit.pod

[01:51] <Geth> ¦ rakudo: s/Markdown/Pod/

[01:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d0455a73e1

[01:52] <Geth> ¦ rakudo: da61c8d10d | (Zoffix Znet)++ | docs/obtaining-a-commit-bit.pod

[01:52] <Geth> ¦ rakudo: s:g/Markdown/Pod/

[01:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/da61c8d10d

[01:55] <Geth> ¦ rakudo: 3dd86f3d4b | (Will "Coke" Coleda)++ | docs/obtaining-a-commit-bit.pod

[01:55] <Geth> ¦ rakudo: remove reference to parrot

[01:55] <Geth> ¦ rakudo:

[01:55] <Geth> ¦ rakudo: The phrasing implies we do it just because parrot did;

[01:55] <Geth> ¦ rakudo: instead just go straight to the reasons.

[01:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3dd86f3d4b

[02:10] <Geth> ¦ nqp: ugexe++ created pull request #422: Add getppid op

[02:10] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/422

[02:12] <AlexDaniel> oooooooooooo getppid, yaaay

[02:15] <AlexDaniel> ooo libuv version bump, yaaaay

[03:08] <travis-ci> Rakudo build passed. Will "Coke" Coleda 'remove reference to parrot

[03:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/344616107 https://github.com/rakudo/rakudo/compare/da61c8d10dbf...3dd86f3d4b53

[06:19] <Geth> ¦ nqp: usev6++ created pull request #423: [JVM] Fix eof detection after read from empty file

[06:19] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/423

[08:18] <nine> [Coke]: I don't think the CLA helps the Perl Foundation as much as you'd like. We accept plenty of code that's not covered by a CLA via pull requests.

[08:20] <[Tux]> Rakudo version 2018.02-21-g3dd86f3d4 - MoarVM version 2018.02-6-g1849ae6d6

[08:20] <[Tux]> csv-test-xs-20      0.463 -  0.484

[08:21] <[Tux]> csv-ip5xs           0.811 -  0.825

[08:21] <[Tux]> test-t --race       1.086 -  1.094

[08:21] <[Tux]> test-t              2.582 -  2.603

[08:21] <[Tux]> csv-ip5xs-20        7.591 -  8.467

[08:21] <[Tux]> test                9.423 -  9.582

[08:21] <[Tux]> csv-parser         12.231 - 12.857

[08:21] <[Tux]> test-t-20 --race   16.119 - 17.071

[08:21] <[Tux]> test-t-20          47.493 - 48.122

[09:05] <lizmat> Files=1235, Tests=76224, 315 wallclock secs (14.96 usr  5.14 sys + 2164.75 cusr 213.24 csys = 2398.09 CPU)

[13:47] <tbrowder> .tell ufobat try restarting bailador travis after Zoffix’s fix

[13:47] <yoleaux> tbrowder: I'll pass your message to ufobat.

[13:48] <ufobat> done already

[13:48] <yoleaux> 13:47Z <tbrowder> ufobat: try restarting bailador travis after Zoffix’s fix

[13:48] <ufobat> it passes again

[14:04] <Geth> ¦ nqp: tbrowder++ created pull request #424: add a new built-in sub: run-command

[14:04] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/424

[14:05] <AlexDaniel> .

[14:16] <tbrowder> ufobat: bailador tests look good i see!

[14:17] <tbrowder> at least travis does

[14:23] <tbrowder> ufobat: it looks as if appveyor also needs a restart

[14:23] <tbrowder> last run was a day ago, before the Zoffix fix

[14:26] <tbrowder> [Coke]: i resent cla, return receipt requested

[14:32] <[Coke]> .. via mail again?

[14:38] <tbrowder> yep, maybe i’ll scan it and send it that doesn’t work. were they affected by the fires?

[14:48] <[Coke]> no, but please for anyone in future; scan and email if you can. it's so much more efficient.

[14:57] <AlexDaniel> huggable: CLA

[14:57] <huggable> AlexDaniel, http://www.perlfoundation.org/contributor_license_agreement  print it out, sign it, scan it in (resize your scan to 250KB or less). Email to trademark -at- perlfoundation.org

[14:58] <AlexDaniel> huggable: CLA :is: http://www.perlfoundation.org/contributor_license_agreement  print it out, sign it, scan it in (resize your scan to 250KB or less). Email to trademark -at- perlfoundation.org (please scan and email if you can, it's so much more efficient)

[14:58] <huggable> AlexDaniel, Added CLA as http://www.perlfoundation.org/contributor_license_agreement  print it out, sign it, scan it in (resize your scan to 250KB or less). Email to trademark -at- perlfoundation.org (please scan and email if you can, it's so much more efficient)

[15:09] <Zoffix> What's the acceptable criteria for an nqp::call to be converted to an nqp::callstatic? From what I understand static ones can't be used as closures over something... Is that the only limitation? Can arguments given to a static call ever affect whether it would no longer be static?

[15:10] <Zoffix> I mean the callable given to callstatic can't be a closure over something. Is that the only thing that matters?

[15:11] <Zoffix> Also, what if there are multi candidates for a callable called by nqp::callstatic and one of them closes over something, while another doesn't. Can nqp::callstatic be used to call the candidate that doesn't?

[15:13] <Zoffix> Also, if the callable uses some other callable in its body, is that considered closing over something? Can it still be used with nqp::callstatic? Like &infix:</>(Int, Int) is using DIVIDE_NUMBERS routine; it it OK for that to be called as nqp::callstatic?

[15:13] <Zoffix> ZofBot: so many questions!

[15:13] <ZofBot> Zoffix, And it is incorrect in assuming facts not established upon the evidence, that he cut her repeatedly to the extent of about twenty-four times with a knife; and in those respects to which have called your Honor's attention, the question is improper, in that it assumes facts not proven, that it is im

[15:13] <jnthn> Zoffix: There will only ever be one closure clone of it ever

[15:14] <jnthn> Zoffix: It basically tells the VM "you can cache this lookup forever and never do it again"

[15:14] <Zoffix> OK. Thanks.

[15:14] <jnthn> So it's fine for stuff in the setting.

[15:14] <jnthn> It's fine for stuff in UNIT

[15:14] <jnthn> Anything in a more nested scope...needs a lot more care

[15:15] <jnthn> I think it may be safe for symbols that come to exist via `import`

[15:15] <jnthn> But in the case of, say, `for ^5 -> $i { sub foo() { say $i }; foo() }`, that foo() call must resolve to the correct closure every time

[15:15] <jnthn> So we must resolve it each time

[15:15] <Zoffix> Got it.

[15:16] <jnthn> That used to mean "no inlining", but since last summer it doesn't :)

[15:16] <Zoffix> \o/

[15:16] <jnthn> We still gotta do the lookup (though it should be by index, not by hash) and do a guard on it

[15:17] <jnthn> So not so cheap as a callstatic, but still can be optimized decently

[15:34] <pmurias> do we have a way of portably firing up a fresh nqp? or any other way of testing repossesion during serialization from the nqplevel

[15:56] <Zoffix> AlexDaniel: I found the cause and scope of R#1550 and I think we'd have to do a point release. Basically any whatever curry that's in the topic of `for` or `given` (e.g. `Nil given *+1` has a mis-scoped QAST::Block and has the potential to explode in unpredictable ways.

[15:56] <synopsebot> R#1550 [open]: https://github.com/rakudo/rakudo/issues/1550 [regression] Segfault in one liner that used to work in 2018.01

[15:56] <Zoffix> (working on a fix ATM)

[15:56] <AlexDaniel> okay

[16:15] <[Coke]> Zoffix++

[16:16] <[Coke]> Also, thanks alex & zoffix for improving the release process - having done many of them more manually, I really appreciate the rigor and automation you've added around it.

[16:16] <[Coke]> er, AlexDaniel++ and Zoffix++

[16:39] <Zoffix> Actually, the actual bug wasn't due to new whatever currier's design, but due to another Zof-Fix for one of the curry-in-stmt-mod bugs :P

[16:57] <Zoffix> ZOFVM: Files=1289, Tests=153232, 156 wallclock secs (21.32 usr  3.31 sys + 3380.93 cusr 169.87 csys = 3575.43 CPU)

[16:57] <Geth> ¦ rakudo: 5270471c38 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[16:57] <Geth> ¦ rakudo: Fix Whatever curry QAST::Block migration in stmt mods

[16:57] <Geth> ¦ rakudo:

[16:57] <Geth> ¦ rakudo: Fixes R#1550 https://github.com/rakudo/rakudo/issues/1550

[16:57] <Geth> ¦ rakudo:

[16:57] <Geth> ¦ rakudo: An ealier fix[^1] for curry migration added `statement_id`

[16:57] <Geth> ¦ rakudo: annotation to whatever curries, to effect migration of their

[16:57] <synopsebot> R#1550 [open]: https://github.com/rakudo/rakudo/issues/1550 [regression] Segfault in one liner that used to work in 2018.01

[16:57] <Geth> ¦ rakudo: QAST::Blocks in certain cases. However, `in_stmt_mod`

[16:57] <Geth> ¦ rakudo: annotation is also required, to prevent that migration when the

[16:57] <Geth> ¦ rakudo: curry is present as part of the statement modifier topic.

[16:57] <Geth> ¦ rakudo:

[16:58] <Geth> ¦ rakudo: [1] https://github.com/rakudo/rakudo/commit/1ee89b54074e80c0753a120d6

[16:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5270471c38

[16:59] <Geth> ¦ roast: 4f6cd0c388 | (Zoffix Znet)++ | MISC/bug-coverage-stress.t

[16:59] <Geth> ¦ roast: Cover crashes in whatever curries in…

[16:59] <Geth> ¦ roast:

[16:59] <Geth> ¦ roast: `for`/`given` statement modifier topics

[16:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4f6cd0c388

[17:12] <Geth> ¦ rakudo/release/2018.02.1: fb3dfa5674 | (Zoffix Znet)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | src/Perl6/Actions.nqp

[17:12] <Geth> ¦ rakudo/release/2018.02.1: Fix Whatever curry QAST::Block migration in stmt mods

[17:12] <Geth> ¦ rakudo/release/2018.02.1:

[17:12] <Geth> ¦ rakudo/release/2018.02.1: Fixes R#1550 https://github.com/rakudo/rakudo/issues/1550

[17:12] <Geth> ¦ rakudo/release/2018.02.1:

[17:12] <Geth> ¦ rakudo/release/2018.02.1: An ealier fix[^1] for curry migration added `statement_id`

[17:12] <Geth> ¦ rakudo/release/2018.02.1: annotation to whatever curries, to effect migration of their

[17:12] <synopsebot> R#1550 [closed]: https://github.com/rakudo/rakudo/issues/1550 [regression] Segfault in one liner that used to work in 2018.01

[17:12] <Geth> ¦ rakudo/release/2018.02.1: QAST::Blocks in certain cases. However, `in_stmt_mod`

[17:13] <Geth> ¦ rakudo/release/2018.02.1: annotation is also required, to prevent that migration when the

[17:13] <Geth> ¦ rakudo/release/2018.02.1: curry is present as part of the statement modifier topic.

[17:13] <Geth> ¦ rakudo/release/2018.02.1:

[17:13] <Geth> ¦ rakudo/release/2018.02.1: [1] https://github.com/rakudo/rakudo/commit/1ee89b54074e80c0753a120d6

[17:13] <Geth> ¦ rakudo/release/2018.02.1: review: https://github.com/rakudo/rakudo/commit/fb3dfa5674

[17:13] <AlexDaniel> so I'm thinking that this point release will be branched out. Feel free to object though :)

[17:57] <Zoffix> +1 on branching out. Master has some commits I specifically had in post-release branch for them to get some bleed time usage.

[18:01] <jnthn> Yeah, point releases want to be a branch from the release tag + as few further commits as possible

[18:18] <Geth> ¦ rakudo: 2c04b208e5 | (Zoffix Znet)++ | 2 files

[18:18] <Geth> ¦ rakudo: Comment that in_stmt_mod and statement_id…

[18:18] <Geth> ¦ rakudo:

[18:18] <Geth> ¦ rakudo: …when used as annotations may require both to be present.

[18:18] <Geth> ¦ rakudo: To try to lessen chance of

[18:18] <Geth> ¦ rakudo: https://github.com/rakudo/rakudo/commit/5270471c38

[18:18] <Geth> ¦ rakudo: happening in the future.

[18:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2c04b208e5

[18:18] <Geth> ¦ rakudo: 084ac02ec5 | (Zoffix Znet)++ | 0 files

[18:18] <Geth> ¦ rakudo: Merge branch 'master' of https://github.com/rakudo/rakudo

[18:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/084ac02ec5

[18:19] <tbrowder> anyone: is travis debug enabled for the perl6 repo?

[18:20] <Zoffix> (nm merge commit; I was just a bit paranoid about doing `git pull --rebase` right now; due to events in https://rakudo.party/post/I-Botched-A-Perl-6-Release-And-Now-A-Robot-Is-Taking-My-Job )

[18:23] <Zoffix> tbrowder: which repo?

[18:24] <AlexDaniel> Zoffix: there's already a different branch so there's nothing to worry about I think

[18:25] <tbrowder> Zoffix: perl6/nqp

[18:25] * AlexDaniel is watching releasable going through the dry run of making a point release

[18:27] * AlexDaniel also just kicked off toaster (yes I'm paranoid)

[18:27] <tbrowder> i’m getting a hang from a test that works on my local hosts

[18:28] <Zoffix> tbrowder: I don't see the button mentioned here, so I guess it's not enabled https://docs.travis-ci.com/user/running-build-in-debug-mode/

[18:28] <Zoffix> And it says "This feature is available for private repositories and those public repositories for which the feature is enabled. To have the feature enabled for a public repository, please email us at support@travis-ci.com indicating which ones. Push access to the repository is also required."

[18:30] <tbrowder> there is also a method to use a travis docker image locally, but i’m not sure what image we’re using...if any

[20:29] <Geth> ¦ nqp: samcv++ created pull request #425: [moar] Add encodeconf and decodeconf ops

[20:29] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/425

[20:34] <samcv> Zoffix: how do i specific to act differently if we are using 6.d?

[20:35] <samcv> i'm working on utilizing the new decode/encode ops i created

[20:35] <samcv> so they use the old functionality unless we are using 6.d

[20:44] <Zoffix> samcv: when *parsing* you can get current version from `nqp::getcomp('perl6').language_version` to decide which language you need to parse as. When *executing code*, the mechanism is not currently available; it's a current 6.d blocker, filed as R#1289

[20:45] <synopsebot> R#1289 [open]: https://github.com/rakudo/rakudo/issues/1289 [6.d][severe] [6.d BLOCKER] Implement a Way to Know Caller's Language

[20:45] <samcv> aww

[20:55] <Zoffix> Well, I feel better about my release-buster bug now: https://github.com/npm/npm/issues/19883

[20:55] <Zoffix> "This issue has been happening ever since 5.7.0 was released a few hours ago" [...] "This destroyed 3 production server after a single deploy!"

[20:59] <AlexDaniel> xD

[21:01] <AlexDaniel> “can someone prove that this update does destroy production servers ?”

[21:01] <AlexDaniel> “Oh yes”

[22:15] <Zoffix> All the hatred from users spewed on that thread *does* make me glad we're not as popular as node tho

[22:21] <jnthn> It's pretty stupid on the part of the users who do that, though.

[22:23] <jnthn> They're demotivating the folks - probably volunteers - who provide them with npm in the first place

[22:23] <Zoffix> Yeah.

[22:26] <Zoffix> If such a thing happened to us, the p6lert service would come out pretty great. We could immediatelly push a high-severity alert and anyone who runs p6lert script with --block-on feature https://github.com/zoffixznet/perl6-p6lert#--block-on

[22:26] <Zoffix> Come to think of it... not a bad idea to make `--block-on=critical` a default

[22:27] <jnthn> Aye, that's a pretty neat thing

[22:27] <jnthn> ...if poeple know to use it :)

[22:27] <Zoffix> Yeah :)

[22:34] <cog__> 1`````````````````````

[22:35] <Zoffix> 2!!!!!!!!!!!!!!!!!!!!!!!!!!!

[22:56] <Zoffix> Looks like current number of p6lert users is zero, considering I misspelt one of the prereqs, rendering it uninstallable :P

[22:59] <jnthn> bah, before staring one's simple lock-free stack that one has written a dozen times before in various languages wondering why it fails its test...make sure the test case is doing ⚛+=, not just +=

[23:00] <jnthn> *staring at

[23:00] <Zoffix> :)
