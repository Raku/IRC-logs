[01:03] *** ZzZombo joined
[01:03] *** p6bannerbot sets mode: +v ZzZombo

[05:07] *** MasterDuke left
[08:51] <lizmat> Files=1255, Tests=76358, 347 wallclock secs (15.69 usr  5.68 sys + 2441.71 cusr 226.99 csys = 2690.07 CPU)

[09:03] <lizmat> restarted the failing Travis build, and now it's green

[09:04] <lizmat> so it was a flapper :-(

[09:52] <Geth> ¦ rakudo: 6208c266ae | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[09:52] <Geth> ¦ rakudo: Rename private method

[09:52] <Geth> ¦ rakudo: 

[09:52] <Geth> ¦ rakudo: It handles iterators, not iterables.

[09:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6208c266ae

[09:58] <nine> Does Travis build MoarVM HEAD or what's in MOAR_REVISION? If the latter than a bump might fix a lot of flappers

[09:59] <lizmat> not sure...

[10:00] <nine> /home/travis/perl5/perlbrew/perls/5.14/bin/perl Configure.pl --prefix=/home/travis/build/rakudo/rakudo/install --backends=moar --make-install --git-protocol=https --gen-moar --moar-option=--cc=gcc-6

[10:00] <nine> os it's MOAR_REVISION

[10:01] <lizmat> so I guess I'll bump Moar and NQP, or will you ?  

[10:01] <nine> on it

[10:04] <Geth> ¦ nqp: 6882fe62e4 | (Stefan Seifert)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[10:04] <Geth> ¦ nqp: Fix compilation of conditionals not actually coercing condition to full width

[10:04] <Geth> ¦ nqp: 

[10:04] <Geth> ¦ nqp: The code created a coercion register but never actually wrote to it. I can only

[10:04] <Geth> ¦ nqp: assume that register re-use led to a useful value ending up in $coerce-reg by

[10:04] <Geth> ¦ nqp: accident. This is supported by the experimental allocation of a dummy register

[10:04] <Geth> ¦ nqp: which breaks NQP's build.

[10:04] <Geth> ¦ nqp: 

[10:04] <Geth> ¦ nqp: Unfortunately .coerce will release the source register unconditionally so we

[10:04] <Geth> ¦ nqp: cannot just use the condition's result_reg as We do need that later for

[10:04] <Geth> ¦ nqp: coercion to the conditional's result type.

[10:04] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6882fe62e4

[10:05] <Geth> ¦ nqp: 08c0de3310 | (Stefan Seifert)++ | tools/build/MOAR_REVISION

[10:05] <Geth> ¦ nqp: Bump MoarVM version to get the fix for uninitialized values

[10:05] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/08c0de3310

[10:05] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.10-72-g4fbaeee5f...2018.10-75-g1bf132125

[10:05] <Geth> ¦ rakudo: 9ac581bc4a | (Stefan Seifert)++ | tools/build/NQP_REVISION

[10:05] <Geth> ¦ rakudo: Bump NQP version to get the fix for uninitialized values on MoarVM

[10:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9ac581bc4a

[10:05] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.10-97-g3aa8cbb40...2018.10-108-g08c0de331

[10:30] <lizmat> I'm doing some timing on hyper ops, but the timings are all over the place :-(

[10:32] <Geth> ¦ rakudo: 9221c08dac | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[10:32] <Geth> ¦ rakudo: Remove dead code

[10:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9221c08dac

[10:34] <nine> Yeah, measuring multi threaded performance is terrible with the OS scheduler and the CPU's thermal management and SMT making it completely non-deterministic. All you can do is statistical analysis of preferrably 1000s of runs.

[10:34] <lizmat> well, that's it: hyper ops aren't multi-threaded just yet anyway

[10:35] <nine> Then the same still applies, just a bit less so :)

[10:36] <lizmat> yeah, but going from 750 msecs to 1150 msecs back to 800 msecs within a few seconds

[10:36] <nine> That's pretty short runs in any case

[10:37] <lizmat> I guess...  :-)

[10:38] <nine> I've found the profiler to be much better at giving reliable information. Even with the total runtime fluctuating, the timing of individual calls did much less so

[10:57] <Geth> ¦ rakudo: c03e71d574 | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[10:57] <Geth> ¦ rakudo: Make sure intermediates are Lists

[10:57] <Geth> ¦ rakudo: 

[10:57] <Geth> ¦ rakudo: So they don't get created with containers, which saves a lot of allocations

[10:57] <Geth> ¦ rakudo: and makes Asssociative related hyper ops about 30% faster.

[10:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c03e71d574

[11:01] *** pmurias joined
[11:01] *** p6bannerbot sets mode: +v pmurias

[11:01] <pmurias> nine: did you see by PR https://github.com/MoarVM/MoarVM/pull/994?

[11:02] <nine> pmurias: yes, it's next on my list

[11:15] <nine> pmurias: ah, yes, my mistake is clear now :) Actually, I think we can even simplify that. A user of nqp::serializetobuffer will not expect the data to be stored in tc->serialized anyway as the only user of that is the old MAST backend which is going away.

[11:15] <nine> So we can just move the if (type) block up before the if (tc->compiling_scs && MVM_repr_elems(tc, tc->compiling_scs) &&

[11:15] <nine>              MVM_repr_at_pos_o(tc, tc->compiling_scs, 0) == (MVMObject *)writer->root.sc)

[11:27] <nine> pmurias: so what's the connection between the JS backend and MoarVM? I was under the impression that none of my changes should affect other backends.

[11:34] <pmurias> nine: the JS backends cross compiles itself using MoarVM

[11:34] <pmurias> nine: I don't keep a pre-compiled bootstrapped JS backend around

[11:34] <nine> ooh

[11:36] <pmurias> nine: https://paste.debian.net/1051284/ - t/serialization/01-basic.t with a nqp::serializetobuffer test added at the end

[11:37] <pmurias> nine: feel free to fix nqp::serializetobuffer how it's best, rather then we go through the silly code-review dance ;)

[11:50] *** eater left
[11:54] *** travis-ci joined
[11:54] *** p6bannerbot sets mode: +v travis-ci

[11:54] <travis-ci> Rakudo build failed. Stefan Seifert 'Bump NQP version to get the fix for uninitialized values on MoarVM'

[11:54] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/453516618 https://github.com/rakudo/rakudo/compare/6208c266aef9...9ac581bc4ad4

[11:54] *** travis-ci left
[11:54] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[11:56] <lizmat> restarted the failing job

[12:01] <Geth> ¦ rakudo: 11cb4facf0 | (Elizabeth Mattijsen)++ | src/core/DateTime.pm6

[12:01] <Geth> ¦ rakudo: Make basic argument checking on DateTime.later a lot faster

[12:01] <Geth> ¦ rakudo: 

[12:01] <Geth> ¦ rakudo: Improves performance of DateTime.later with about 15%, mostly because

[12:01] <Geth> ¦ rakudo: of a lot less allocations.

[12:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/11cb4facf0

[12:03] <lizmat> *fewer

[12:05] <timotimo> fever allocations

[12:22] <nine> less allocating? ;)

[12:22] <timotimo> allocantation

[12:24] <lizmat> it's either a "lot fewer allocations" or "lot less allocating" grammarly speaking

[12:25] <Geth> ¦ nqp: 19653bf341 | (Stefan Seifert)++ | t/serialization/01-basic.t

[12:25] <Geth> ¦ nqp: Basic test for nqp::serializetobuf

[12:25] <Geth> ¦ nqp: 

[12:25] <Geth> ¦ nqp: Written by pmurias++

[12:25] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/19653bf341

[12:41] <Geth> ¦ rakudo: b6292fe9ca | (Elizabeth Mattijsen)++ | src/core/DateTime.pm6

[12:41] <Geth> ¦ rakudo: Make creation of DateTime a bit faster

[12:41] <Geth> ¦ rakudo: 

[12:41] <Geth> ¦ rakudo: Before, that used to be the best way.  Apparently not so anymore.  Makes

[12:41] <Geth> ¦ rakudo: .later about 5% faster.

[12:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b6292fe9ca

[12:41] <lizmat> I think there's a lot of relatively low hanging optimizing fruit hanging in DateTime still

[12:42] *** travis-ci joined
[12:42] *** p6bannerbot sets mode: +v travis-ci

[12:42] <travis-ci> NQP build failed. Stefan Seifert 'Basic test for nqp::serializetobuf

[12:42] <travis-ci> https://travis-ci.org/perl6/nqp/builds/453547762 https://github.com/perl6/nqp/compare/08c0de331099...19653bf34129

[12:42] *** travis-ci left
[12:54] <Geth> ¦ rakudo: 0fa6988cd0 | (Elizabeth Mattijsen)++ | src/core/metaops.pm6

[12:54] <Geth> ¦ rakudo: list of iterators can be a list

[12:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0fa6988cd0

[13:09] <Geth> ¦ rakudo: 08fac0452f | (Elizabeth Mattijsen)++ | src/core/Date.pm6

[13:09] <Geth> ¦ rakudo: Make basic argument checking on DateTime.later a lot faster

[13:09] <Geth> ¦ rakudo: 

[13:09] <Geth> ¦ rakudo: Improves performance of Date.later with about 30%, mostly because

[13:09] <Geth> ¦ rakudo: of a lot less allocations.

[13:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/08fac0452f

[13:17] <SmokeMachine> .tell jnthn I’m sorry, I know that was a long time ago... but had you thought about this? https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2017-11-29#l94

[13:17] <yoleaux> SmokeMachine: I'll pass your message to jnthn.

[13:21] <timotimo> this is about https://github.com/FCO/rakudo/commit/6b18cd3b92355ce02b888e4c6eec463d16aecef3

[13:21] <timotimo> right?

[13:22] <timotimo> the default reduce sub you have there seems rather wasteful performance-wise

[13:22] <Geth> ¦ rakudo: 98d07cf6f9 | (Elizabeth Mattijsen)++ | src/core/Date.pm6

[13:22] <Geth> ¦ rakudo: Make cloning a Date faster

[13:22] <Geth> ¦ rakudo: 

[13:22] <Geth> ¦ rakudo: Use nqp::ifnull instead of existskey ?? atkey !! attribute combo.  Makes

[13:22] <Geth> ¦ rakudo: Date.later about 15% faster, and probably other Date operations as well.

[13:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/98d07cf6f9

[13:22] <timotimo> but other than that at first glance it looks like an interesting addition

[13:23] <SmokeMachine> timotimo: yes, about something like that, not necessarily that code...

[13:25] <SmokeMachine> timotimo: I’ll try to make it better... but I think that would be a good think have the possibility to use that..

[13:28] <SmokeMachine> ^10 .classify: * %%2, :reduce{$^a + $^b}

[13:30] <SmokeMachine> timotimo: would a `agg.push: value` be better, or how would the default reduce sub be better?

[13:33] <SmokeMachine> Or should I use nqp?

[13:35] *** travis-ci joined
[13:35] *** p6bannerbot sets mode: +v travis-ci

[13:35] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make basic argument checking on DateTime.later a lot faster

[13:35] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/453542401 https://github.com/rakudo/rakudo/compare/c03e71d574e2...11cb4facf094

[13:35] *** travis-ci left
[13:36] <lizmat> I guess this is good news: https://twitter.com/alteholzDD/status/1061607254397501440

[13:48] <Geth> ¦ rakudo: bf3575cca3 | (Elizabeth Mattijsen)++ | src/core/CompUnit/Repository/FileSystem.pm6

[13:48] <Geth> ¦ rakudo: Bind constant list rather than assigning

[13:48] <Geth> ¦ rakudo: 

[13:48] <Geth> ¦ rakudo: Makes initialization a bit faster and with fewer allocations.

[13:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bf3575cca3

[13:48] <Geth> ¦ rakudo: 18ded174e5 | (Elizabeth Mattijsen)++ | 3 files

[13:48] <Geth> ¦ rakudo: Make some initializations as Lists rather than Arrays

[13:48] <Geth> ¦ rakudo: 

[13:48] <Geth> ¦ rakudo: Because they are immutable in further usage, so this saves on creating

[13:48] <Geth> ¦ rakudo: containers and de-containerizing when accessing.

[13:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/18ded174e5

[13:57] *** ufobat joined
[13:58] *** p6bannerbot sets mode: +v ufobat

[14:07] *** eater joined
[14:08] *** p6bannerbot sets mode: +v eater

[14:10] <pmurias> nine: I'll add the nqp::serializetobuf to the JVM backend

[14:11] <pmurias> we don't have fudges for NQP so I think that's the best way to make it pass on the JVM

[14:13] <lizmat> ++pmurias

[14:28] *** travis-ci joined
[14:28] *** p6bannerbot sets mode: +v travis-ci

[14:28] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make creation of DateTime a bit faster

[14:28] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/453551322 https://github.com/rakudo/rakudo/compare/11cb4facf094...b6292fe9caa2

[14:28] *** travis-ci left
[14:32] <Geth> ¦ rakudo: b463746daf | (Elizabeth Mattijsen)++ | 2 files

[14:32] <Geth> ¦ rakudo: Replace foo === Type with nqp::eqaddr(foo.WHAT,Type)

[14:32] <Geth> ¦ rakudo: 

[14:32] <Geth> ¦ rakudo: Which is *much* faster that === on account of not having to call a sub,

[14:32] <Geth> ¦ rakudo: not having to wrap the result into a Bool, so a lot less allocating.

[14:32] <Geth> ¦ rakudo: Makes Date.later about 30% faster, and other Date / DateTime related things

[14:32] <Geth> ¦ rakudo: probably also significantly faster.

[14:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b463746daf

[14:38] <Geth> ¦ nqp: 846b8fcf23 | (Paweł Murias)++ | 3 files

[14:38] <Geth> ¦ nqp: [jvm] Implement nqp::serializetobuf

[14:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/846b8fcf23

[14:55] <Geth> ¦ star/master: 13 commits pushed by (Steve Mynott)++

[14:55] <Geth> ¦ star/master: review: https://github.com/rakudo/star/compare/cd6f392c8736...8681f6d578c4

[14:55] *** travis-ci joined
[14:55] *** p6bannerbot sets mode: +v travis-ci

[14:55] <travis-ci> NQP build failed. Paweł Murias '[jvm] Implement nqp::serializetobuf'

[14:55] <travis-ci> https://travis-ci.org/perl6/nqp/builds/453579932 https://github.com/perl6/nqp/compare/19653bf34129...846b8fcf2348

[14:55] *** travis-ci left
[15:10] * stmuk_ suffers the sense of imminent dread associated with starting a long ignored windows VM and trying a build on it

[15:19] *** travis-ci joined
[15:19] *** p6bannerbot sets mode: +v travis-ci

[15:19] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make cloning a Date faster

[15:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/453560583 https://github.com/rakudo/rakudo/compare/08fac0452f4b...98d07cf6f9c2

[15:19] *** travis-ci left
[16:15] <SqrtNegInf> Good news first, issue GH#2480 is fixed, lizmat++

[16:15] <synopsebot> GH#2480 [open]: https://github.com/rakudo/rakudo/issues/2480 [testneeded] Array built with hyper operations becomes immutable

[16:16] *** travis-ci joined
[16:16] *** p6bannerbot sets mode: +v travis-ci

[16:16] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Replace foo === Type with nqp::eqaddr(foo.WHAT,Type)

[16:16] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/453578513 https://github.com/rakudo/rakudo/compare/18ded174e594...b463746daf51

[16:16] *** travis-ci left
[16:16] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[16:17] <lizmat> restarted the one failing job

[16:17] <SqrtNegInf> But several more programs having problems, slip and hyper operations interacting to create another 'immutable value' problem, opened a new issue

[16:17] <SqrtNegInf> https://github.com/rakudo/rakudo/issues/2482

[16:17] <lizmat> SqrtNegInf: will look after dinner for sure

[16:19] <lizmat> bisectable6: old=2018.10 say |<1 2> »xx» 2

[16:19] <bisectable6> lizmat, Bisecting by exit code (old=2018.10 new=b463746). Old exit code: 0

[16:20] <bisectable6> lizmat, bisect log: https://gist.github.com/9aff8826b2a1b4a198a9fa11e671aeec

[16:20] <bisectable6> lizmat, (2018-11-10) https://github.com/rakudo/rakudo/commit/1a2b39dc1a9bef6c8aba8ca647d8b2cbc8ed2ad9

[16:25] <Geth> ¦ rakudo: bf3eb8ec9c | (Elizabeth Mattijsen)++ | src/core/DateTime.pm6

[16:25] <Geth> ¦ rakudo: Make cloning a DateTime faster

[16:25] <Geth> ¦ rakudo: 

[16:25] <Geth> ¦ rakudo: Use nqp::ifnull instead of existskey ?? atkey !! attribute combo.

[16:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bf3eb8ec9c

[16:25] <Geth> ¦ rakudo: a11d599f4b | (Elizabeth Mattijsen)++ | src/core/Date.pm6

[16:25] <Geth> ¦ rakudo: Make Date.succ/pred and Date ± N about 3x as fast (usually)

[16:25] <Geth> ¦ rakudo: 

[16:25] <Geth> ¦ rakudo: This should make iterating over a range of Dates or a loop with ++$date

[16:25] <Geth> ¦ rakudo: about 3x as fast.  Optimization based on the observation that if only the

[16:25] <Geth> ¦ rakudo: date value can change, we just need to clone the object and update the day

[16:25] <Geth> ¦ rakudo: value.  Complicating factor could be the daycount attribute that also needs

[16:25] <Geth> ¦ rakudo: updating if it is set.  If anything apart the day needs to change, then it

[16:25] <Geth> ¦ rakudo: will fallback to the old logic, creating a new object using the daycount

[16:25] <Geth> ¦ rakudo: attribute.

[16:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a11d599f4b

[16:25] <lizmat> argh: s/date/day

[17:21] *** dct joined
[17:21] *** p6bannerbot sets mode: +v dct

[17:29] *** travis-ci joined
[17:29] *** p6bannerbot sets mode: +v travis-ci

[17:29] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make Date.succ/pred and Date ± N about 3x as fast (usually)

[17:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/453610980 https://github.com/rakudo/rakudo/compare/b463746daf51...a11d599f4b88

[17:30] *** travis-ci left
[18:16] <Geth> ¦ rakudo: lizmat self-assigned Slip and hyper operations interact to cause immutable values https://github.com/rakudo/rakudo/issues/2482

[18:18] <Geth> ¦ rakudo: 78f642039f | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[18:18] <Geth> ¦ rakudo: Give List/Slip both special handling in @a >>+>> 42

[18:18] <Geth> ¦ rakudo: 

[18:18] <Geth> ¦ rakudo: Anything else will have to go through Foo.new(...), which may involve a

[18:18] <Geth> ¦ rakudo: slowdown for Array's.  But I intend to give these special handling anyway,

[18:18] <Geth> ¦ rakudo: so that should be ok for now.  Fixes R#2842.

[18:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/78f642039f

[18:31] <lizmat> hmmm.. seems I did *not* spectest that one and borked 1..N >>+>> 42

[18:31] <lizmat> working on that

[19:03] *** lizmat left
[19:04] *** lizmat joined
[19:04] *** p6bannerbot sets mode: +v lizmat

[19:11] <Geth> ¦ star: 15147954a0 | (Steve Mynott)++ | tools/star/release-guide.pod

[19:11] <Geth> ¦ star: claim credit and pass buck

[19:11] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/15147954a0

[19:12] *** stmuk_ left
[19:19] <Geth> ¦ rakudo: 63ae9dcc5d | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[19:19] <Geth> ¦ rakudo: Check if a class can .STORE before .newing it

[19:19] <Geth> ¦ rakudo: 

[19:19] <Geth> ¦ rakudo: This fixes the issue caused the last commit with (1..42) >>+>> 666.

[19:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/63ae9dcc5d

[19:20] <lizmat> stmuk++   # doing Rakudo Star distributions in the past, and hopefully in the future despite recent events

[19:22] <lizmat> moritz: https://twitter.com/steve_mynott/status/1061696671866937345

[19:27] <moritz> lizmat: retweeted

[19:27] <moritz> stmuk++

[19:27] <lizmat> moritz++

[19:36] <dogbert11> meh: This representation (P6num) cannot unbox to a native int (for type BOOTNum)

[19:36] <dogbert11>    at /home/dogbert/repos/rakudo/install/bin/../share/nqp/lib/MAST/Nodes.nqp:65  (/home/dogbert/repos/rakudo/install/share/nqp/lib/MASTNodes.moarvm:write_uint32)

[19:50] <timotimo> dogbert11: can you give us the caller of that?

[20:32] *** cog joined
[20:32] *** p6bannerbot sets mode: +v cog

[20:51] <dogbert11> timotimo: I get it sometimes when running t/spec/S15-nfg/emoji-test.t on my 32 bit system. It happens before any tests in that file are run.

[20:51] <timotimo> that makes sense, since MASTNodes is used in the compiler

[20:52] <dogbert11> here's a gist with more output: https://gist.github.com/dogbert17/f57316a449deff98346e4ae1e3b9f465

[20:55] <timotimo> MASTNodes.nqp lives in moarvm's repo and is auto-generated by update_ops.p6

[20:56] <timotimo> would be interesting to find out where exactly a num is added into the %labels hash

[20:56] <timotimo> could be line 853

[20:56] <timotimo> there's a + there, maybe turn it into an add_i

[20:56] <timotimo> could you try that change and see if it helps?

[20:57] <Kaiepi> why doesn't SocketHandle in the jvm use SocketChannel instead of ByteChannel

[20:57] <Kaiepi> this makes it impossible for me to implement getsockopt/setsockopt on the jvm

[20:58] <timotimo> as long as your changes pass spectests, and maybe also behave sensible apart from that, i'm sure you can change that?

[20:59] <Kaiepi> i'll think about it

[20:59] <dogbert11> timotimo: where is MASTNodes.nqp loacated

[20:59] <timotimo> moarvm's lib folder has a MAST folder

[21:00] <Kaiepi> i guess i'll just stub getsockopt/setsockopt on the jvm for now

[21:01] <Kaiepi> it's almost done, but i gotta wait for the async .native-descriptors pullreq to get merged before this can since i depend on getting the raw socket of async server connections

[21:02] <Kaiepi> btw can someone review that pullreq?

[21:02] <dogbert11> timotimo: $pos := $pos + $offset;  ->  nqp::add_i($pos, $offset);      is that the correct syntax?

[21:03] <dogbert11> or is it $pos := nqp::add_i($pos, $offset);

[21:03] <timotimo> yes

[21:03] <timotimo> oh

[21:03] <timotimo> yes, it still needs the bind

[21:03] *** pmurias left
[21:04] *** pmurias joined
[21:04] *** p6bannerbot sets mode: +v pmurias

[21:04] <dogbert11> ok, will change and rebuild MoarVM

[21:04] <timotimo> i think just "make install" would do it

[21:04] <timotimo> though i'm not sure

[21:05] <dogbert11> I'll do that as well

[21:09] <dogbert11> no improvement I'm afraid

[21:09] <timotimo> can you put a debug note("foo") in there to see if the code actually gets hit? and another in a place that definitely runs (for example the one that explodes) to see if your code changes actually reach the process?

[21:10] <dogbert11> ok

[21:15] <timotimo> i mean there's always also moar-remote ...

[21:16] <dogbert11> do I have to rebuild rakudo as well?

[21:17] <timotimo> oh

[21:17] <timotimo> yeah

[21:17] <timotimo> actually

[21:17] <timotimo> not 100% sure, but i think so

[21:23] <dogbert11> hmm, no effect, I can't see anything being written out. I'm obviously doing something wrong

[21:24] <timotimo> hm, so it didn't reach that

[21:24] <timotimo> perhaps nuke the install folder

[21:24] <timotimo> and after running "make install" in moar check if perhaps the MAST/Nodes.nqp file was regenerated without your changes before installation

[21:25] <dogbert11> tricky stuff :)

[21:29] <Geth> ¦ rakudo: fa5215b61b | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[21:29] <Geth> ¦ rakudo: Make sure immutable structures also work with Associatives

[21:29] <Geth> ¦ rakudo: 

[21:29] <Geth> ¦ rakudo: - such as: dd (a => 42, b => 666).Map >>+>> 2  # Map.new((:a(44),:b(668)))

[21:29] <Geth> ¦ rakudo: - alas, we need customized Associative handling for QuantHashes

[21:29] <Geth> ¦ rakudo:   - .STORE expects Pairs for QuantHashes

[21:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fa5215b61b

[21:37] <dogbert11> rebuilding rakudo and now my screen is filled with 'foo'

[21:38] <timotimo> ah, success

[21:40] <dogbert11> in a sense at least. The test file passed once and printed a lot of foo's in the beginning. the second time it crashed before any foo was written

[21:40] <timotimo> where exactly does the foo live?

[21:41] <timotimo> i mean, there's also an accessor to the labels hash so outside code can directly meddle with it and accidentally store a num instead of an int

[21:41] <timotimo> like, in theory you could output a backtrace whenever the labels hash gets pulled out

[21:44] <dogbert11> the foo is printed on the line before the one changed to add_i

[21:48] <timotimo> AFK

[22:21] *** pmurias left
[22:41] <gfldex> lizmat: thanks for the DateTime speed up :)

[22:41] <gfldex> 21589 processed in 2.9981314s with 7200.818471281177 stations/s

[22:41] <gfldex> that used to be ~6800 /s

[22:41] *** dct left
[22:42] *** dct joined
[22:42] *** p6bannerbot sets mode: +v dct

[22:49] *** dct left
[22:50] *** cog left
