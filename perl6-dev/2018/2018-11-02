[00:05] *** stmuk joined
[00:06] *** p6bannerbot sets mode: +v stmuk

[00:07] *** cognominal-p6 left
[00:08] *** stmuk_ left
[00:15] <Geth> ¦ rakudo: tbrowder++ created pull request #2460: move pod-only code to end of their enclosing blocks

[00:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2460

[00:16] *** leont left
[00:17] *** MasterDuke joined
[00:17] *** p6bannerbot sets mode: +v MasterDuke

[00:18] *** MasterDuke left
[00:18] *** MasterDuke joined
[00:18] *** herbert.freenode.net sets mode: +v MasterDuke

[00:18] *** p6bannerbot sets mode: +v MasterDuke

[00:22] *** lizmat left
[00:42] *** ufobat left
[00:42] *** ufobat joined
[00:43] *** p6bannerbot sets mode: +v ufobat

[00:45] <tbrowder___> Folks, please review my  PR #2460 which moves pod-only code to the bottom of Grammar.nqp and Actions.nqp of their enclosing blocks. I would like to merge it after it shows testing OK but you who are actively modifying those files need to be aware of possible surprises--no real changes but code chunks being  moved around.

[01:00] *** lizmat joined
[01:00] *** p6bannerbot sets mode: +v lizmat

[01:07] *** cognominal-p6 joined
[01:08] *** p6bannerbot sets mode: +v cognominal-p6

[01:13] *** cognominal-p6 left
[01:13] *** cognominal-p6 joined
[01:14] *** p6bannerbot sets mode: +v cognominal-p6

[01:48] <tbrowder___>  ok, test

[01:48] <tbrowder___> ok, travis checks passed, merging...

[01:49] <Geth> ¦ rakudo: 71ba96683c | (Tom Browder)++ | 2 files

[01:49] <Geth> ¦ rakudo: move pod-only code to end of their enclosing blocks

[01:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/71ba96683c

[01:49] <Geth> ¦ rakudo: d5c3c495e2 | (Tom Browder)++ (committed using GitHub Web editor) | 2 files

[01:49] <Geth> ¦ rakudo: Merge pull request #2460 from tbrowder/nqp-pod-split

[01:49] <Geth> ¦ rakudo: 

[01:49] <Geth> ¦ rakudo: move pod-only code to end of their enclosing blocks

[01:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d5c3c495e2

[01:50] *** Kaiepi joined
[01:51] *** p6bannerbot sets mode: +v Kaiepi

[02:20] *** MasterDuke left
[02:51] *** travis-ci joined
[02:51] *** p6bannerbot sets mode: +v travis-ci

[02:51] <travis-ci> Rakudo build passed. Tom Browder 'Merge pull request #2460 from tbrowder/nqp-pod-split

[02:51] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/449644644 https://github.com/rakudo/rakudo/compare/94dd0a411d53...d5c3c495e277

[02:51] *** travis-ci left
[02:54] *** cognominal-p6 left
[03:12] *** ufobat_ joined
[03:12] *** p6bannerbot sets mode: +v ufobat_

[03:16] *** ufobat left
[03:51] *** ggoebel left
[04:07] *** ggoebel joined
[04:07] *** p6bannerbot sets mode: +v ggoebel

[05:10] *** b2gills left
[05:10] *** b2gills joined
[05:11] *** p6bannerbot sets mode: +v b2gills

[05:51] *** cognominal-p6 joined
[05:51] *** p6bannerbot sets mode: +v cognominal-p6

[05:59] *** cognominal-p6 left
[06:00] *** cognominal-p6 joined
[06:00] *** p6bannerbot sets mode: +v cognominal-p6

[08:01] <[Tux]> https://www.perlmonks.org/?node_id=1225082

[08:13] * lizmat doesn't do perlmonks anymore

[08:23] <lizmat> Files=1255, Tests=76368, 337 wallclock secs (15.77 usr  5.55 sys + 2371.57 cusr 229.62 csys = 2622.51 CPU)

[08:38] <[Tux]> Rakudo version 2018.10-51-gd5c3c495e - MoarVM version 2018.10-28-ga74af5585

[08:38] <[Tux]> csv-test-xs-20      0.431 -  0.432

[08:38] <[Tux]> test-t --race       0.844 -  0.871

[08:38] <[Tux]> csv-ip5xs           0.928 -  1.138

[08:38] <[Tux]> test-t              1.880 -  1.955

[08:38] <[Tux]> csv-ip5xs-20        7.844 -  8.167

[08:38] <[Tux]> test                7.854 -  8.986

[08:38] <[Tux]> test-t-20 --race   10.945 - 11.207

[08:38] <[Tux]> csv-parser         21.668 - 24.983

[08:38] <[Tux]> test-t-20          31.426 - 32.514

[09:30] <Geth> ¦ rakudo: 1766435abe | (Elizabeth Mattijsen)++ | src/core/Int.pm6

[09:30] <Geth> ¦ rakudo: Save 2 deconts for Int === Int

[09:30] <Geth> ¦ rakudo: 

[09:30] <Geth> ¦ rakudo: Only makes it less than 1% faster, but it is also better readable code

[09:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1766435abe

[09:30] <Geth> ¦ rakudo: 8e858c8d02 | (Elizabeth Mattijsen)++ | src/core/metaops.pm6

[09:30] <Geth> ¦ rakudo: Lose unnecessary intermediate variable

[09:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8e858c8d02

[10:02] *** Zoffix joined
[10:02] *** p6bannerbot sets mode: +v Zoffix

[10:03] * Zoffix glances at the perlmonk post... looks like a perfect thing to never reply to

[10:30] <Zoffix> TIL `$`-sigilled params aren't conted

[10:30] <Zoffix> For some reason I thought they always were, so I imagine there's a ton of routines the same thing as in https://github.com/rakudo/rakudo/commit/1766435abe can be done to

[10:45] <jnthn> Zoffix: If we know they are of a type that isn't Iterable, then we indeed allow them not to be

[10:45] <jnthn> We've had that optimization for a long while

[10:46] <jnthn> Thus declaring `sub foo(Int $x) { }` will generate better code than `sub foo($x) { }` :)

[10:46] <jnthn> Because it can say "oh, Int ain't Iterable", while in the second case it can't

[10:46] <Zoffix> :o

[10:47] <jnthn> And that has a cascade effect into spesh, because if we can lower the parameter into a local too then it doesn't need so many guards :)

[10:47] <jnthn> I also re-worked the signature binding code-gen earlier on this year so it only has to do a single decont now too (in the past it did a bunch of them per parameter)

[11:28] *** evalable6 left
[11:28] *** evalable6 joined
[11:29] *** p6bannerbot sets mode: +v evalable6

[11:57] *** Zoffix left
[12:21] *** brrt joined
[12:22] *** p6bannerbot sets mode: +v brrt

[12:25] *** leont joined
[12:25] *** p6bannerbot sets mode: +v leont

[13:33] *** dogbert17 joined
[13:33] *** p6bannerbot sets mode: +v dogbert17

[13:36] *** cognominal-p6 left
[13:48] <[Coke]> jnthn++

[14:31] <Geth> ¦ roast: 10ff461f6e | (Jonathan Worthington)++ | S32-io/lock.t

[14:31] <Geth> ¦ roast: Harden tests against upcoming `start` changes

[14:31] <Geth> ¦ roast: 

[14:31] <Geth> ¦ roast: We'll now be reporting errors in sunk `start` blocks; doing so made

[14:31] <Geth> ¦ roast: these tests fail, since they expected silent discarding of exceptions

[14:31] <Geth> ¦ roast: inside of `start`. (Note that the semantics only change for 6.d, so

[14:31] <Geth> ¦ roast: this will not cause breakage for the test as it originally was in 6.c,

[14:31] <Geth> ¦ roast: if it indeed was part of 6.c.)

[14:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/10ff461f6e

[14:37] *** lizmat left
[14:44] <Geth> ¦ rakudo: 15c16e35ad | (Jonathan Worthington)++ | 2 files

[14:44] <Geth> ¦ rakudo: Report unhandled exceptions of sunk `start` blocks

[14:44] <Geth> ¦ rakudo: 

[14:44] <Geth> ¦ rakudo: In 6.d only. They are reported using the `handle_uncaught` method of

[14:44] <Geth> ¦ rakudo: the scheduler the code was run under, providing a way to handle such

[14:44] <Geth> ¦ rakudo: application-level errors (and also to test this functionality).

[14:44] <Geth> ¦ rakudo: 

[14:44] <Geth> ¦ rakudo: Since this is done with the `sink` method, then something like:

[14:45] <Geth> ¦ rakudo: <…commit message has 17 more lines…>

[14:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/15c16e35ad

[14:45] <Geth> ¦ roast: 9cf31a99c6 | (Jonathan Worthington)++ | S17-promise/start.t

[14:45] <Geth> ¦ roast: Test 6.d sunk `start` exception behavior

[14:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9cf31a99c6

[14:46] <jnthn> Finally got to it :)

[14:49] *** Zoffix joined
[14:49] *** p6bannerbot sets mode: +v Zoffix

[15:01] <dogbert17> are you already done?

[15:04] <jnthn> dogbert17: With the `start` changes? Yes. Still got to play with the $_ changes some more :)

[15:05] <dogbert17> impressive speed there

[15:09] * dogbert17 note that t/spec/S17-supply/supplier-preserving.t has started flapping

[15:11] <jnthn> Yeah, I noticed that :/

[15:11] <jnthn> Though I think it has been before now anyway

[15:12] <jnthn> ah, finally managed to make it fail

[15:12] <jnthn> Unhandled exception in code scheduled on thread 4

[15:12] <jnthn>     ok 8 - Received expected messages (7)

[15:12] <jnthn> emit without supply or react

[15:12] <jnthn>   in block  at t/spec/S17-supply/supplier-preserving.t line 15

[15:13] <dogbert17> yep, got the same

[15:14] <jnthn> Interesting.

[15:15] <hoelzro> o/

[15:15] <hoelzro> hey Perl 6 people! I wanted to follow up about this PR I made: https://github.com/rakudo/rakudo/pull/2415

[15:16] <dogbert17> sadly both asan and valgrind are silent

[15:16] <hoelzro> after reflecting on it, I couldn't find documentation that mentioned that placeholder vars aren't allowed in methods; if anyone knows where that is off of top of their head, could they please direct me to it?

[15:16] <jnthn> Lots more details with --ll-exception, not sure if useful

[15:25] *** ExtraCrispy joined
[15:25] *** p6bannerbot sets mode: +v ExtraCrispy

[15:27] <dogbert17> jnthn: ig I run with MVM_SPESH_NODELAY=1 and MVM_SPESH_BLOCKING=1 the error is simply ignored, i.e. the error is written out but the test file continues to run untile completion claiming that all tests were OK

[15:28] <dogbert17> s/ig/if/

[15:28] <jnthn> I suspect that might just be a timing curiosity 

[15:28] <jnthn> hoelzro: I don't see any such docs right off

[15:29] <jnthn> hoelzro: I'm also not sure if the design docs actually mandated this, or if it was an implementation decision

[15:29] <hoelzro> ah ha

[15:30] <hoelzro> the fact that the test was requested for the rakudo tests rather than spec kind of points in that direction

[15:30] <hoelzro> then again, I would assume anything around error messages would be bound for rakudo tests regardless

[15:31] <jnthn> I dunno, I think there's some push to maybe not spec too many exception types until they've had more review, though I'm not sure if that isn't letting the perfect be the enemy of the good. :)

[15:31] <dogbert17> it happens even if spesh is turned off

[15:31] <jnthn> (I mean, if that happens, sure, but if we're still saying this in a couple more years...)

[15:31] <jnthn> dogbert17: Yeah. It's weird. Here: `nqp::atpos($snapshot, $i).emit()(value);` occasionally the nqp::atpos comes back with a `Mu`

[15:32] <jnthn> I can't see how that could ever happen

[15:32] <jnthn> But the result is we do `Mu.emit` which is like `emit Mu` and thus get the error

[15:32] <jnthn> But I just don't see how we could ever end up with something that's not a `TapListEntry` inside of that list

[15:35] <jnthn> oh, unless it's a dupe close, hmm

[15:35] <jnthn> oh, I...

[15:35] <jnthn> Yeah, I think I see it :)

[15:36] <Zoffix> hoelzro: I didn't look at the Issue when I commented on that PR, so my comment there is wrong, the placeholders in that context aren't `*%_`/`*@`, etc, it's as you later commented: the @_ and %_ used inside the body of the method, and yes `%_` is not disallowed because all methods have an implicit `*%_` slurpy already

[15:37] <dogbert17> jnthn++ detective work

[15:37] <jnthn> I know a fix but...hmm

[15:38] <Zoffix> hoelzro: and I don't know the original reason, but I'd guess @_ is not allowed because it's not entirely obvious whether `{ $^a.foo: $^b }` is equivalent to `{ self.foo: $first-pos-arg }` or to `{ $first-pos-arg.foo: $second-pos-arg }`

[15:38] <jnthn> The problem is that we must send the "this was tapped" notification before anything is emitted

[15:38] <jnthn> But that might in some cases result in immediate tap closure

[15:39] <jnthn> And the close might try and remove the thing from the list before it gets inserted

[15:40] <jnthn> So we'd instead of iterating a list iterate Mu and put that into the list

[15:40] <jnthn> So the immediate fix is to not do that

[15:40] <jnthn> But that doesn't totally solve it

[15:40] <jnthn> Since then we end up with a closed tap entry in the list because the removal preceded the insertion

[15:40] <dogbert17> sounds like the problem has been there for quite some time

[15:41] <jnthn> Yeah

[15:41] <jnthn> I've seen it flap before, but very occasionally

[15:42] <jnthn> Think I've got a proper solution

[15:44] <dogbert17> cool

[15:45] <dogbert17> it was beginning to sound like a catch 22 problem

[15:45] <jnthn> Yeah, took a bit of thought

[15:49] <Zoffix> hoelzro: as for the PR, do you think we're going a bit too far with that error in the part that tries to guess what the signature should be? It's a whole paragraph of code, all for the sake of a marginally better error that may or may not produce bogus suggestions. The same thing happened when we tried to improve radix errors and it was a page of code that kept reporting off-by-one offsets for various

[15:49] <Zoffix> special cases.

[15:50] <Zoffix> hoelzro: that was just a food for thought. I don't have a problem with the PR going in the way it is now.

[15:55] *** pmurias joined
[15:55] *** p6bannerbot sets mode: +v pmurias

[15:55] <Geth> ¦ rakudo: 68d79e70fb | (Jonathan Worthington)++ | src/core/Supply.pm6

[15:55] <Geth> ¦ rakudo: Fix an add/remove race in Supplier::Preserving

[15:55] <Geth> ¦ rakudo: 

[15:55] <Geth> ¦ rakudo: The tap list was vulnerable to a situation where the `tap(...)` call

[15:55] <Geth> ¦ rakudo: could result in a sequence of actions that would `close` that tap,

[15:55] <Geth> ¦ rakudo: but the tap had not been added to the tap list yet. This could result

[15:55] <Geth> ¦ rakudo: in us having a taplist containing `Mu`, and `Mu.emit` would blow up

[15:55] <Geth> ¦ rakudo: (the call meaning to target a TapListEntry`. Even if the `Mu` insertion

[15:55] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[15:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/68d79e70fb

[15:56] <pmurias> I need to add a hook to overide what sort of CompUnit::Repository a 'use lib' installs

[15:56] <pmurias> what would be a good way to expose this

[15:57] <pmurias> ?

[15:57] *** lizmat joined
[15:57] *** p6bannerbot sets mode: +v lizmat

[15:58] <pmurias> (I need that because when I'm compiling stuff when bundling something for use in the browser in rakudo.js I register by own custom CompUnit::Repository to record stuff that's loaded at compile time

[15:58] <pmurias> )

[15:59] <jnthn> Turns out that Supplier is also vulnerable to such an issue; patching that too

[16:00] <dogbert17> interesting

[16:01] <Zoffix> jnthn: question about sunk start: we had these tests for sunk start and one of them tests that sunk-start exceptions respect our PERL6_EXCEPTIONS_HANDLER env var for custom exception handlers. That test fails now. Should that feature work or should the test be removed?":

[16:01] <Zoffix> These tests I meant https://github.com/perl6/roast/commit/592b0b5cfbbf

[16:04] <jnthn> Zoffix: Ah. Well, it's probably that the handle_uncaught mechanism should be taught about that

[16:04] <Zoffix> ok

[16:04] *** robertle left
[16:04] <pmurias> Zoffix, hoelzro: Would it be possible to throw a structured exception for the placeholder problem?

[16:05] <jnthn> m: Thread.start({ die "oops" }); sleep 1; # I bet this doesn't respect it either

[16:05] <camelia> rakudo-moar 15c16e35a: OUTPUT: «No exception handler located for catch␤   at SETTING::src/core/Exception.pm6:57  (/home/camelia/rakudo-m-inst-1/share/perl6/runtime/CORE.setting.moarvm:throw)␤ from SETTING::src/core/control.pm6:178  (/home/camelia/rakudo-m-inst-1/share/perl6/runt…»

[16:05] <jnthn> oh, right, not that one

[16:05] <jnthn> m: $*SCHEDULER.cue({ die "oops" }); sleep 1; # I bet this doesn't respect it either

[16:05] <camelia> rakudo-moar 15c16e35a: OUTPUT: «Unhandled exception in code scheduled on thread 4␤oops␤  in block  at <tmp> line 1␤␤»

[16:05] <jnthn> That's the one I was thinking of

[16:05] <jnthn> Though the first could also do with being improved :)

[16:05] <Zoffix> They both don't

[16:05] <jnthn> Right

[16:06] <jnthn> So, I'd fix the handle_uncaught in the scheduler to respect the env var, and then it'll fix it for sunk `start` implicitly

[16:07] <Geth> ¦ roast: 909b59a238 | (Zoffix Znet)++ | MISC/misc-6.d.t

[16:07] <Geth> ¦ roast: Remove old sunk `start` tests

[16:07] <Geth> ¦ roast: 

[16:07] <Geth> ¦ roast: The feature is now better specced (without relying on sleeps) in

[16:07] <Geth> ¦ roast: https://github.com/perl6/roast/commit/9cf31a99c63a880596e68519999

[16:07] <Geth> ¦ roast: 

[16:07] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/2436 R#2436

[16:07] <synopsebot> R#2436 [closed]: https://github.com/rakudo/rakudo/issues/2436 [6.d review][fudged tests committed] Crash in 6.d with sunk start

[16:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/909b59a238

[16:08] <dogbert17> jnthn: do you think that e.g. R#2224 is squashed by your fixes?

[16:08] <synopsebot> R#2224 [open]: https://github.com/rakudo/rakudo/issues/2224 [hyper/race] hyper/race sometimes fails with 'emit without supply or react'

[16:09] <jnthn> dogbert17: ooh, very possibly

[16:09] <dogbert17> searching for the word emit emong the issues yielded 40 hits

[16:09] <jnthn> oh, actually looking at the stack trace, I don't think so

[16:09] <dogbert17> *among

[16:09] <dogbert17> darn

[16:09] <jnthn> oh hang on

[16:09] <jnthn> I misread a line number

[16:10] <Zoffix> Filed as R#2462

[16:10] <synopsebot> R#2462 [open]: https://github.com/rakudo/rakudo/issues/2462 [NYI] Unhandled Exceptions Handler doesn't respect PERL6_EXCEPTIONS_HANDLER env var

[16:10] <jnthn> Yes, I think with the fix I'm currently working on for Supplier

[16:10] <dogbert17> ah

[16:11] <hoelzro> pmurias: I'm in favor of that - would we create a new exception type for that situation?

[16:13] <pmurias> hoelzro: I think so

[16:13] <pmurias> X::Signature::Placeholder seems to be an exception for a different scenario

[16:13] <hoelzro> indeed

[16:14] <hoelzro> Zoffix: I see what you're saying - it's a good chunk of code for a "pretty" error

[16:14] <hoelzro> I thought about maybe lifting that suggestion code out into its own sub/method

[16:14] *** brrt left
[16:14] <Geth> ¦ rakudo: 7ee1f3c50e | (Jonathan Worthington)++ | src/core/Supply.pm6

[16:14] <Geth> ¦ rakudo: Fix tap add/remove race in Supplier

[16:14] <Geth> ¦ rakudo: 

[16:14] <Geth> ¦ rakudo: This applies a similar fix as was done to Supplier::Preserving in

[16:14] <Geth> ¦ rakudo: 68d79e70fb. This may well resolve #2224.

[16:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7ee1f3c50e

[16:14] <synopsebot> RAKUDO#2224 [open]: https://github.com/rakudo/rakudo/issues/2224 [hyper/race] hyper/race sometimes fails with 'emit without supply or react'

[16:15] <hoelzro> that's a good point about %_, though - I forgot that methods were implicitly named parameter slurpy

[16:15] <jnthn> haha...github doesn't understand the conditional tense :P

[16:15] <hoelzro> re: @_ - I wonder if that's just a side effect of the way the compiler was checking for placeholders?

[16:17] <Zoffix> I have a vague memory of being told there was a proper reason, but I don't know if I'm confusing it with being told about why %_ slurpy is in the sig

[16:20] <pmurias> hoelzro: also you might want to use the same code/exception for Placeholder variables cannot be used in a regex

[16:20] * hoelzro nods

[16:20] *** brrt joined
[16:21] *** p6bannerbot sets mode: +v brrt

[16:29] *** Zoffix left
[16:31] *** robertle joined
[16:31] *** cognominal-p6 joined
[16:31] *** p6bannerbot sets mode: +v robertle

[16:32] *** p6bannerbot sets mode: +v cognominal-p6

[16:41] *** cognominal-p6 left
[16:42] *** cognominal-p6 joined
[16:43] *** p6bannerbot sets mode: +v cognominal-p6

[16:56] *** cognominal-p6 left
[16:58] *** travis-ci joined
[16:58] *** p6bannerbot sets mode: +v travis-ci

[16:58] <travis-ci> Rakudo build passed. Jonathan Worthington 'Fix an add/remove race in Supplier::Preserving

[16:58] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/449905757 https://github.com/rakudo/rakudo/compare/15c16e35ade2...68d79e70fbf4

[16:58] *** travis-ci left
[17:27] <lizmat> m: dd :{ "a" => 42 } «+» :{ "a" => 42 }

[17:27] <yoleaux> 12:23Z <brrt> lizmat: if apple releases a laptop with an A12/A14 chip, that's finally going to be a good reason for me to buy an apple laptop ;-)

[17:27] <camelia> rakudo-moar 7ee1f3c50: OUTPUT: «:{:a(84)}␤»

[17:27] <lizmat> dd :{ 1 => 42 } «+» :{ 1 => 42 }

[17:28] <lizmat> m: dd :{ 1 => 42 } «+» :{ 1 => 42 }

[17:28] <camelia> rakudo-moar 7ee1f3c50: OUTPUT: «Cannot resolve caller HYPER(Sub+{is-pure}+{Precedence}, Mu, Mu, :dwim-left(Int), :dwim-right(Int)); none of these signatures match:␤    (&op, \left, \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \left, Associative:D \right, :$dwim-lef…»

[17:28] <lizmat> looks like hypers don't handle object hashes / quanthashes that well  :-(

[17:29] <lizmat> m: dd <a b c>.Set <<+>> <a b c>.Set

[17:29] <camelia> rakudo-moar 7ee1f3c50: OUTPUT: «Cannot modify an immutable Set (set())␤  in block <unit> at <tmp> line 1␤␤»

[17:29] <lizmat> that's also bogus, as creating a new Set should just work

[17:30] <lizmat> m: dd <a b c>.SetHash <<+>> <a b c>.Bag  # more of a policy question

[17:30] <camelia> rakudo-moar 7ee1f3c50: OUTPUT: «SetHash.new("a","c","b")␤»

[17:31] <lizmat> with set operators, this would have upgraded to a BagHash

[17:32] <lizmat> so, hypers between two QuantHashes, should that work the same as set operators or not ?

[17:42] *** SyrupThinker left
[17:46] *** SyrupThinker joined
[17:46] *** p6bannerbot sets mode: +v SyrupThinker

[17:57] *** travis-ci joined
[17:57] *** p6bannerbot sets mode: +v travis-ci

[17:57] <travis-ci> Rakudo build passed. Jonathan Worthington 'Fix tap add/remove race in Supplier

[17:57] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/449914931 https://github.com/rakudo/rakudo/compare/68d79e70fbf4...7ee1f3c50e95

[17:57] *** travis-ci left
[18:02] <lizmat> m: dd <a 1 c 2>.Map <<+>> <a 1 c 2>.Map

[18:02] <camelia> rakudo-moar 7ee1f3c50: OUTPUT: «Cannot modify an immutable Map (Map.new(()))␤  in block <unit> at <tmp> line 1␤␤»

[18:03] <lizmat> bogus  :-)

[18:08] *** ExtraCrispy left
[18:08] *** ExtraCrispy joined
[18:08] *** p6bannerbot sets mode: +v ExtraCrispy

[18:09] *** brrt left
[18:14] <Geth> ¦ rakudo: bfe2ad63f8 | (Elizabeth Mattijsen)++ | src/core/metaops.pm6

[18:14] <Geth> ¦ rakudo: Make Associative <<op>> Associative work a bit better

[18:14] <Geth> ¦ rakudo: 

[18:14] <Geth> ¦ rakudo: - no longer throws if left side is an immutable type like Map

[18:14] <Geth> ¦ rakudo: - directly call STORE rather than going through the assign magic

[18:14] <Geth> ¦ rakudo: - call STORE with :INITIALIZE (so that it can work on immutable types)

[18:14] <Geth> ¦ rakudo: 

[18:14] <Geth> ¦ rakudo: This does *not* fix the issue with objects hashes and QuantHashes of the

[18:14] <Geth> ¦ rakudo: keys are not strings.

[18:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bfe2ad63f8

[18:20] <Geth> ¦ roast/6.c-errata: dc2ec0a005 | (Elizabeth Mattijsen)++ | S02-types/set.t

[18:20] <Geth> ¦ roast/6.c-errata: Remove bogus tests

[18:20] <Geth> ¦ roast/6.c-errata: 

[18:20] <Geth> ¦ roast/6.c-errata: Immutable types on the left are ok

[18:20] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/dc2ec0a005

[18:20] <Geth> ¦ roast: 72c5861b80 | (Elizabeth Mattijsen)++ | S02-types/set.t

[18:20] <Geth> ¦ roast: Remove bogus test

[18:20] <Geth> ¦ roast: 

[18:20] <Geth> ¦ roast: Immutable types on the left should be fine

[18:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/72c5861b80

[18:38] *** patrickb joined
[18:39] *** p6bannerbot sets mode: +v patrickb

[18:39] *** cognominal-p6 joined
[18:40] *** p6bannerbot sets mode: +v cognominal-p6

[18:48] *** cognominal-p6 left
[18:49] *** cognominal-p6 joined
[18:49] *** p6bannerbot sets mode: +v cognominal-p6

[18:52] *** patrickb left
[18:54] *** fake_space_whale left
[19:06] *** dct joined
[19:06] *** p6bannerbot sets mode: +v dct

[19:14] *** ExtraCrispy left
[19:30] *** dct left
[20:28] *** patrickb joined
[20:28] *** p6bannerbot sets mode: +v patrickb

[20:32] <tbrowder___> i'm building master and getting two "make test" failures: t/09-moar/Line_Break__LineBreak.t and t/09-moar/General_Category__extracted-DerivedGeneralCategory.t

[20:33] <tbrowder___> perl6 -v: Rakudo version 2018.08-706-gbfe2ad6 built on MoarVM version 2018.10-26-g318e1ec

[20:33] <tbrowder___> anyone else seeing same thing?

[20:35] <timotimo> that looks like unicode database changes that aren't in your moarvm, but in the nqp test suite

[20:35] <timotimo> or rakudo test suite

[20:36] <tbrowder___> ok, thanks, timotimo, checking closer...

[20:36] *** cognominal-p6 left
[20:49] <tbrowder___> tests working now

[20:49] <timotimo> glad to hear it

[20:52] *** patrickb left
[21:04] *** lizmat left
[22:01] *** pmurias left
[22:12] *** MasterDuke joined
[22:12] *** p6bannerbot sets mode: +v MasterDuke

[22:12] *** MasterDuke left
[22:12] *** MasterDuke joined
[22:12] *** herbert.freenode.net sets mode: +v MasterDuke

[22:12] *** p6bannerbot sets mode: +v MasterDuke

[22:22] *** lizmat joined
[22:22] *** p6bannerbot sets mode: +v lizmat

[23:17] <AlexDaniel> TimToady: so Raku is the final decision, is that right?

[23:32] *** cognominal-p6 joined
[23:33] *** p6bannerbot sets mode: +v cognominal-p6

[23:38] *** cognominal-p6 left
[23:39] *** cognominal-p6 joined
[23:40] *** p6bannerbot sets mode: +v cognominal-p6

[23:52] *** Zoffix joined
[23:52] *** p6bannerbot sets mode: +v Zoffix

[23:52] *** Zoffix left
[23:53] *** Zoffix joined
[23:53] *** p6bannerbot sets mode: +v Zoffix

[23:56] *** cognominal-p6 left
