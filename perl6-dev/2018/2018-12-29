[00:54] *** MasterDuke joined
[00:54] *** p6bannerbot sets mode: +v MasterDuke

[00:54] *** MasterDuke left
[00:54] *** MasterDuke joined
[00:54] *** herbert.freenode.net sets mode: +v MasterDuke

[00:54] *** p6bannerbot sets mode: +v MasterDuke

[01:24] <Geth> ¦ rakudo: 501231ee42 | (Timo Paulssen)++ | 2 files

[01:24] <Geth> ¦ rakudo: Eliminate A Few Scalar Allocs For Push-All

[01:24] <Geth> ¦ rakudo: 

[01:24] <Geth> ¦ rakudo: I could not measure a performance benefit

[01:24] <Geth> ¦ rakudo: in the benchmark I had, but the bytecode

[01:24] <Geth> ¦ rakudo: got a bit simpler and total allocation count

[01:24] <Geth> ¦ rakudo: decreased a little.

[01:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/501231ee42

[03:17] *** MasterDuke left
[03:23] *** Ven`` joined
[03:24] *** p6bannerbot sets mode: +v Ven``

[03:34] *** Ven`` left
[05:01] *** llfourn joined
[05:02] *** p6bannerbot sets mode: +v llfourn

[08:39] *** dct left
[08:46] *** dct joined
[08:46] *** p6bannerbot sets mode: +v dct

[09:01] *** dct left
[10:43] <lizmat> Files=1262, Tests=87961, 381 wallclock secs (19.86 usr  6.05 sys + 2615.41 cusr 221.77 csys = 2863.09 CPU)

[10:43] <lizmat> ^^ looks like my work on adding return types is slowing down the spectest significantly  :-(

[10:46] <Geth> ¦ rakudo: 7a68df2b7d | (Elizabeth Mattijsen)++ | 3 files

[10:46] <Geth> ¦ rakudo: Add return signatures to Dateish/Date/DateTime where appropriate

[10:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7a68df2b7d

[11:04] <[Tux]> Rakudo version 2018.12-70-g501231ee4 - MoarVM version 2018.12-8-g45d15efe9

[11:04] <[Tux]> csv-test-xs-20      0.424 -  0.425

[11:04] <[Tux]> test-t --race       0.844 -  0.866

[11:04] <[Tux]> csv-ip5xs           0.943 -  0.972

[11:04] <[Tux]> test-t              1.866 -  1.894

[11:04] <[Tux]> test                6.915 -  6.973

[11:04] <[Tux]> csv-ip5xs-20        7.219 -  7.362

[11:04] <[Tux]> test-t-20 --race    9.643 -  9.750

[11:04] <[Tux]> csv-parser         22.429 - 22.511

[11:04] <[Tux]> test-t-20          30.839 - 31.488

[11:20] <lizmat> m: sub a() { 42 }; for ^1_000_000 -> int $_ { a }; say now - INIT now

[11:20] <camelia> rakudo-moar 7a68df2b7: OUTPUT: «0.58137785␤»

[11:21] <lizmat> m: sub a(--> Int:D) { 42 }; for ^1_000_000 -> int $_ { a }; say now - INIT now

[11:21] <camelia> rakudo-moar 7a68df2b7: OUTPUT: «0.3867178␤»

[11:21] <lizmat> huh?

[11:21] <lizmat> m: sub a() { 42 }; for ^1_000_000 -> int $_ { a }; say now - INIT now

[11:21] <camelia> rakudo-moar 7a68df2b7: OUTPUT: «0.184703␤»

[11:21] <lizmat> ah, more like it

[11:21] <lizmat> so it looks like there *is* quite a penalty for adding a return type :-(

[11:22] <lizmat> roughly 2x as slow  in this benchmark :-(

[11:38] <lizmat> R#2573   # jnthn timotimo 

[11:38] <synopsebot> R#2573 [open]: https://github.com/rakudo/rakudo/issues/2573 Adding a return type slows execution down

[12:46] <nine> lizmat: I'm not terribly surprised. The return type is a constraint, therefor we have to generate code to check if the constraint is met. OTOH it could help the VM, since if we know what code is called and there's a return type constraint, we could rely on that. But I'm not aware of any optimization making use of this currently.

[12:47] <lizmat> nine: I guess the question becomes: should I continue adding return types, should I remove them, or should I just stop adding them

[12:48] <lizmat> so I guess the --> Mu signature means: don't generate constraint type checking code

[12:48] <lizmat> rather than checking against Mu

[12:48] *** lucasb joined
[12:48] *** p6bannerbot sets mode: +v lucasb

[12:50] <timotimo> huh, even after speshing a, it still makes explicit calls into typecheckrv and decontrv spesh plugins

[12:50] <lizmat> timotimo: so you're saying there's a deficiency there ?

[12:51] <timotimo> not entirely sure, i'm investigating

[13:01] *** pmurias joined
[13:01] *** p6bannerbot sets mode: +v pmurias

[13:03] <pmurias> are there plans to get precompilation of scrips working in rakudo?

[13:07] <lizmat> it's somewhere on the list of todo's waiting for someone to have that itch sufficiently ?

[13:14] <timotimo> benchable: sub a(--> Int:D) { 42 }; for ^1_000_000 -> int $_ { a; a; a; a; a }; say now - INIT now

[13:14] <benchable6> timotimo, No new data found

[13:14] <timotimo> ..oh?

[13:16] *** MasterDuke joined
[13:16] *** p6bannerbot sets mode: +v MasterDuke

[13:16] *** MasterDuke left
[13:16] *** MasterDuke joined
[13:16] *** herbert.freenode.net sets mode: +v MasterDuke

[13:16] *** p6bannerbot sets mode: +v MasterDuke

[13:17] <MasterDuke> timotimo: think you need to give it a revision

[13:18] <timotimo> oh, right

[13:18] <timotimo> benchable: releases sub a(--> Int:D) { 42 }; for ^1_000_000 -> int $_ { a; a; a; a; a }; say now - INIT now

[13:18] <benchable6> timotimo, starting to benchmark the 36 given commits

[13:20] <timotimo> so the spesh log for a shows that it's gotten 'identity' to use, but it's not actually inlining identity into a?

[13:20] <timotimo> i haven't looked at the spesh log for the other one, though tbh

[13:20] <MasterDuke> timotimo: btw, any idea why a --profile-compile of some of Xliff's GTK code (with a 5s parse time) would show all the exlusive time in await?

[13:21] <timotimo> MasterDuke: how multithreaded is it?

[13:22] <timotimo> i mean, with an await in there, it probably has at least two threads?

[13:22] <benchable6> timotimo, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[13:22] <MasterDuke> it's just the compilation, so i guess just whatever spesh does

[13:23] <timotimo> so perhaps it has a subprocess that does some precomp

[13:23] <benchable6> timotimo, «hit the total time limit of 300 seconds»

[13:24] <timotimo> d'oh

[13:24] <MasterDuke> so the the profile isn't really helpful

[13:24] <timotimo> could be

[13:24] <MasterDuke> *then the

[13:28] <MasterDuke> benchable: 2016.12,2017.12,2018.12,HEAD sub a(--> Int:D) { 42 }; for ^1_000_000 -> int $_ { a; a; a; a; a };

[13:28] <benchable6> MasterDuke, starting to benchmark the 4 given commits

[13:29] <benchable6> MasterDuke, ¦2016.12: «1.3913» ¦2017.12: «0.3946» ¦2018.12: «1.3964» ¦HEAD: «1.4191»

[13:29] <benchable6> MasterDuke, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[13:30] <benchable6> MasterDuke, https://gist.github.com/8a40e8bab2b7b3b9647fde02d05b40fd

[13:32] <timotimo> could we get the revisions as clickable links? :3

[13:32] <MasterDuke> committable6: 1070fa0,a41c37c sub a(--> Int:D) { 42 }; for ^1_000_000 -> int $_ { a; a; a; a; a }; say now - INIT now

[13:32] <committable6> MasterDuke, ¦1070fa0: «0.1335828␤» ¦a41c37c: «1.307461␤»

[13:32] <MasterDuke> timotimo: i think there's an issue for that

[13:32] <timotimo> cool

[13:33] <MasterDuke> https://github.com/rakudo/rakudo/commit/1070fa0

[13:33] <MasterDuke> https://github.com/rakudo/rakudo/commit/a41c37c

[13:34] <MasterDuke> geth: ver https://github.com/rakudo/rakudo/commit/a41c37c

[13:35] <MasterDuke> Geth: help

[13:35] <Geth> MasterDuke, Source at https://github.com/perl6/geth To add repo, add an 'application/json' webhook on GitHub pointing it to http://hack.p6c.org:8888/?chan=#perl6 and choose 'Send me everything' for events to send | use `ver URL to commit` to fetch version bump changes

[13:35] <pmurias> lizmat: I'm wondering if it might makes sense to check if roast tests pass when precompiled

[13:35] <MasterDuke> Geth: ver https://github.com/rakudo/rakudo/commit/a41c37c

[13:35] <Geth> MasterDuke, version bump brought in these changes: https://github.com/perl6/nqp/compare/2018.06-147-g39bfe08...2018.06-154-ge1929a4

[13:36] <MasterDuke> Geth: ver https://github.com/perl6/nqp/commit/e1929a49481501de35ce1302a6864318d59903ac

[13:36] <Geth> MasterDuke, version bump brought in these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-391-g91d2878...2018.06-395-g0c5f6e5

[13:37] <MasterDuke> some of those moarvm commits look relevant

[13:38] <MasterDuke> https://github.com/MoarVM/MoarVM/commit/286b56079d1484b1d8a5fe742bf1e938d344c67b and https://github.com/MoarVM/MoarVM/commit/51197804f82353e6794659e50c39d199a9ecdfc5

[13:39] <lizmat> afk for a few hours&

[13:40] <nine> OMG I think I've found a fix for issue #2563

[13:44] <dogbert11> the spesh bug issue?

[13:45] <nine> yep

[13:47] <dogbert11> very cool

[13:54] *** Ven`` joined
[13:55] *** p6bannerbot sets mode: +v Ven``

[14:36] <AlexDaniel> nine++

[14:36] <AlexDaniel> nine: thank you very much!

[14:37] <AlexDaniel> robertle: do you need a point release or can you apply it as a patch yourself?

[14:49] *** AlexDani` joined
[14:50] *** p6bannerbot sets mode: +v AlexDani`

[14:58] <pmurias> if we can't determin the current $*KERNERL.hostname (in the browser) what should it return? 

[15:06] <Geth> ¦ nqp: 9f9e4fae37 | (Paweł Murias)++ | src/vm/js/nqp-runtime/runtime.js

[15:06] <Geth> ¦ nqp: [js] Fix bug

[15:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9f9e4fae37

[15:06] <Geth> ¦ nqp: fbbfb6c0a9 | (Paweł Murias)++ | src/vm/js/nqp-runtime/ctx.js

[15:06] <Geth> ¦ nqp: [js] Remove left over debugging message

[15:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fbbfb6c0a9

[15:06] <Geth> ¦ nqp: ab46ec2c2c | (Paweł Murias)++ | src/vm/js/nqp-runtime/ctx.js

[15:06] <Geth> ¦ nqp: [js] Fix uncaught exception handlers getting wrong context

[15:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ab46ec2c2c

[16:05] <Geth> ¦ rakudo/master: 6 commits pushed by (Paweł Murias)++

[16:05] <Geth> ¦ rakudo/master: 8f2d9ed0d9 | [js] When faking a process in the browser assign it a new pid

[16:05] <Geth> ¦ rakudo/master: fc39f5ff4b | [js] Add browser to the list of know DISTRO and KERNEL names

[16:05] <Geth> ¦ rakudo/master: 9b20c476fd | [js] Set the user program name

[16:05] <Geth> ¦ rakudo/master: 822962dac1 | [js] In the browser use a 'browser' kernel name

[16:05] <Geth> ¦ rakudo/master: e233f287b0 | [js] Add missing async/await

[16:05] <Geth> ¦ rakudo/master: 52de9657d3 | [js] Fix after function signature change in nqp

[16:05] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/7a68df2b7d58...52de9657d342

[16:18] <pmurias> jnthn: what's our policy in regards to serializing things that are special cased in our variant serialization being forced to be serialized as objects by being placed into WVals?

[16:19] <pmurias> jnthn: is that something that should silently work or is that just potential trouble?

[16:35] *** AlexDani` is now known as AlexDaniel

[17:48] <MasterDuke> committable6: a41c37c,a41c37c^ sub a(--> Int:D) { 42 }; for ^1_000_000 -> int $_ { a; a; a; a; a }; say now - INIT now

[17:48] <committable6> MasterDuke, ¦a41c37c: «1.3292806␤» ¦a41c37c^: «0.105792␤»

[18:18] *** Kaiepi joined
[18:18] *** p6bannerbot sets mode: +v Kaiepi

[18:30] *** lizmat joined
[18:30] *** p6bannerbot sets mode: +v lizmat

[18:34] *** Kaiepi left
[19:02] <lizmat> timotimo: re 501231ee423ebc8ce6de , would you recommend doing that for all of the push-all methods ?

[19:12] <timotimo> maybe

[19:12] <timotimo> it's the tiniest improvement it seems like

[19:13] <lizmat> well, for hot code paths that may make a difference

[19:13] <timotimo> right

[19:13] <lizmat> and it's not going to make things worse for non-hot paths, right ?

[19:17] <timotimo> i think it won't, though better check

[19:22] <MasterDuke> didn't jnthn recently undo that kind of optimization somewhere? with some explanation of why it might not always be better?

[19:27] *** Ven`` left
[19:51] *** Ven`` joined
[19:52] *** p6bannerbot sets mode: +v Ven``

[19:56] *** MasterDuke left
[20:18] <Geth> ¦ rakudo: a904d25a57 | (Elizabeth Mattijsen)++ | 23 files

[20:18] <Geth> ¦ rakudo: Convert all $target to \target in iterators

[20:18] <Geth> ¦ rakudo: 

[20:18] <Geth> ¦ rakudo: Inspired by 501231ee423ebc8c, appears to have a positive effect on the

[20:18] <Geth> ¦ rakudo: spectest so this appears to be a good thing.

[20:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a904d25a57

[20:48] *** lucasb left
[20:54] <Geth> ¦ rakudo: 5cf65b57cb | (Elizabeth Mattijsen)++ | src/core/Map.pm6

[20:54] <Geth> ¦ rakudo: Add return signatures to Map.methods/subs

[20:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5cf65b57cb

[21:12] *** Ven`` left
[21:13] *** Ven`` joined
[21:14] *** p6bannerbot sets mode: +v Ven``

[21:14] <Geth> ¦ rakudo: 87698317a9 | (Elizabeth Mattijsen)++ | src/core/Map.pm6

[21:14] <Geth> ¦ rakudo: Simplify Map.Hash

[21:14] <Geth> ¦ rakudo: 

[21:14] <Geth> ¦ rakudo: Removes one call to nqp::elems, because we need the iterator we can use

[21:14] <Geth> ¦ rakudo: that as the condition for the if (as an iterator on an empty hash will

[21:14] <Geth> ¦ rakudo: always start out to be false)

[21:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/87698317a9

[21:15] <timotimo> lizmat: you think putting a setelemspos in a push-all where we know the exact amount would be beneficial?

[21:16] <lizmat> timotimo: and then doing bindpos ?

[21:16] <lizmat> you mean doing a loop with bindpos as opposed to pushing values ?

[21:17] <timotimo> nah, i thought setelemspos it back to what it was

[21:17] <timotimo> you know, we can make these ops return whatever we want if nothing is currently relying on them

[21:17] * lizmat only knows about setelems 

[21:17] <timotimo> oh

[21:17] <timotimo> setelemspos is what it's called somewhere interally

[21:17] <lizmat> ah, ok

[21:17] <timotimo> like, setelemspos($foo, setelemspos($foo, 0)) could have the inner one return the current number of elems

[21:18] <timotimo> wait, that's nonsense %)

[21:18] <lizmat> setelems current returns $foo

[21:18] <lizmat> and that's very handy

[21:18] <timotimo> setelemspos($foo, setelemspos($foo, elems($foo) + 20))

[21:18] <timotimo> oh, OK

[21:19] <lizmat> fwiw, I've tried that several times, pre-sizing the buffer...  but it made things worse for small buffers

[21:19] <timotimo> though we can have a version in the compiler as a desugar that just handles getting the "right" return value back as cheaply as possible

[21:19] <timotimo> ah, hm.

[21:19] <lizmat> do you have an idea at how many elements it makes sense to pre-size?

[21:19] <lizmat> anyways, this smells like premature opts..  :-)

[21:19] <timotimo> i do not

[22:15] <Geth> ¦ rakudo: ugexe++ created pull request #2574: Add naive $?DISTRIBUTION implementation

[22:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2574

[22:36] <jnthn> pmurias: We probably shouldn't have that happening, though I think the variant serialization thing can slowly go away; it exists for historical reasons.

[22:36] <yoleaux> 24 Dec 2018 22:04Z <SmokeMachine> jnthn: thanks for your issue on Red! That's a great idea!

[22:36] <yoleaux> 24 Dec 2018 22:12Z <SmokeMachine> jnthn: sorry, wrong Jonathan! :)

[22:36] <yoleaux> 28 Dec 2018 22:39Z <Xliff> jnthn: Can you wrap submethod BUILD via .^add_method? ie: Are submethods handled the same as methods, internally?

[22:37] <jnthn> .tell Xliff Yes, submethods are added via .^add_method; it drops them into a different table based on a type distiction.

[22:37] <yoleaux> jnthn: I'll pass your message to Xliff.

[22:58] *** Ven`` left
[22:59] *** Ven`` joined
[23:00] *** p6bannerbot sets mode: +v Ven``

[23:24] *** pmurias left
