[00:00] *** lizmat joined
[00:01] *** p6bannerbot sets mode: +v lizmat

[00:02] *** nativecallable6 joined
[00:02] *** bisectable6 joined
[00:02] *** benchable6 joined
[00:03] *** p6bannerbot sets mode: +v nativecallable6

[00:03] *** p6bannerbot sets mode: +v bisectable6

[00:03] *** p6bannerbot sets mode: +v benchable6

[00:05] *** lizmat left
[00:58] *** astj joined
[00:59] *** p6bannerbot sets mode: +v astj

[01:04] *** yoleaux joined
[01:04] *** p6bannerbot sets mode: +v yoleaux

[01:28] *** astj left
[01:29] *** astj joined
[01:29] *** p6bannerbot sets mode: +v astj

[01:31] *** lorimer3 joined
[01:31] *** pOe[ joined
[01:31] *** pOe[ left
[01:32] *** p6bannerbot sets mode: +v lorimer3

[01:37] *** lorimer3 left
[01:46] <MasterDuke> this is annoying. i got the first part of a new jvm bootstrap, but when i go to remove the old nqp::getstrfromname and build i keep getting `java.lang.RuntimeException: No such attribute '$!do' for this object   in clone (gen/jvm/stage2/NQPCORE.setting:374) ...`

[02:37] <Geth> ¦ nqp: 0003b32bdb | 陈梓立++ (committed using GitHub Web editor) | src/NQP/Grammar.nqp

[02:37] <Geth> ¦ nqp: whitespace

[02:37] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0003b32bdb

[02:40] *** travis-ci joined
[02:40] *** p6bannerbot sets mode: +v travis-ci

[02:40] <travis-ci> NQP build failed. 陈梓立 'whitespace'

[02:40] <travis-ci> https://travis-ci.org/perl6/nqp/builds/413872974 https://github.com/perl6/nqp/compare/59429960fbfc...0003b32bdbba

[02:40] *** travis-ci left
[03:19] *** frmus20 joined
[03:20] *** p6bannerbot sets mode: +v frmus20

[03:22] *** rkta joined
[03:23] *** p6bannerbot sets mode: +v rkta

[03:23] <rkta> Don't support freenode and their ICO scam, switch to a network that hasn't been co-opted by corporate interests. OFTC or efnet might be a good choice. Perhaps even https://matrix.org/

[03:23] *** rkta left
[03:24] *** frmus20 left
[04:14] *** Namarrgon3 joined
[04:15] *** p6bannerbot sets mode: +v Namarrgon3

[04:16] *** Namarrgon3 left
[04:44] *** Selavi24 joined
[04:44] *** p6bannerbot sets mode: +v Selavi24

[04:45] *** Selavi24 left
[04:45] *** skids joined
[04:46] *** skids left
[04:48] *** ktr joined
[04:49] *** p6bannerbot sets mode: +v ktr

[04:53] *** ktr left
[04:59] *** blocked29 joined
[04:59] *** p6bannerbot sets mode: +v blocked29

[05:00] *** blocked29 left
[05:17] *** brrt joined
[05:18] *** p6bannerbot sets mode: +v brrt

[05:43] *** diakopter left
[05:45] *** yoleaux left
[05:45] *** yoleaux joined
[05:46] *** p6bannerbot sets mode: +v yoleaux

[06:18] *** robertle joined
[06:19] *** p6bannerbot sets mode: +v robertle

[06:26] *** Kaypie joined
[06:26] *** Kaiepi left
[06:26] *** FROGGS__ joined
[06:27] *** p6bannerbot sets mode: +v Kaypie

[06:27] *** p6bannerbot sets mode: +v FROGGS__

[06:29] *** FROGGS_ left
[06:33] *** NvpkD1y7Ez joined
[06:33] *** NvpkD1y7Ez left
[06:34] *** AlexDaniel joined
[06:35] *** p6bannerbot sets mode: +v AlexDaniel

[06:49] *** lizmat joined
[06:49] *** p6bannerbot sets mode: +v lizmat

[06:49] <lizmat> good *. #perl6-dev!

[06:50] <lizmat> Files=1248, Tests=75965, 364 wallclock secs (16.09 usr  5.79 sys + 2587.15 cusr 226.74 csys = 2835.77 CPU)

[06:50] <lizmat> that's quite a bit less than the last time I did this!

[06:50] *** brrt left
[07:12] *** brrt joined
[07:13] *** p6bannerbot sets mode: +v brrt

[07:21] *** Kaypie left
[07:31] <[Tux]> 2.290, but I'll run it again later today when I'm not using the desktop

[07:33] *** Kaiepi joined
[07:34] *** p6bannerbot sets mode: +v Kaiepi

[07:37] *** [TuxCM] left
[07:38] *** FROGGS__ left
[07:43] *** FROGGS joined
[07:43] *** p6bannerbot sets mode: +v FROGGS

[07:49] *** CIAvash[m] joined
[07:49] *** p6bannerbot sets mode: +v CIAvash[m]

[07:51] *** Ven` joined
[07:52] *** p6bannerbot sets mode: +v Ven`

[08:01] *** robertle left
[08:08] *** brrt left
[08:10] *** PufferBot left
[08:10] *** Kaiepi left
[08:11] *** Kaiepi joined
[08:11] *** p6bannerbot sets mode: +v Kaiepi

[08:12] *** Kaiepi left
[08:13] *** Kaiepi joined
[08:13] *** p6bannerbot sets mode: +v Kaiepi

[08:24] *** Kaypie joined
[08:24] *** Kaiepi left
[08:25] *** p6bannerbot sets mode: +v Kaypie

[08:34] *** Kaypie left
[08:35] *** Kaypie joined
[08:35] *** p6bannerbot sets mode: +v Kaypie

[08:44] *** Kaypie is now known as Kaiepi

[08:51] *** FROGGS left
[08:51] *** FROGGS joined
[08:52] *** p6bannerbot sets mode: +v FROGGS

[08:53] *** FROGGS left
[08:53] *** FROGGS joined
[08:54] *** p6bannerbot sets mode: +v FROGGS

[08:59] *** FROGGS left
[09:00] *** FROGGS joined
[09:00] *** p6bannerbot sets mode: +v FROGGS

[09:05] *** FROGGS left
[09:05] *** FROGGS joined
[09:06] *** p6bannerbot sets mode: +v FROGGS

[09:11] *** FROGGS left
[09:11] *** FROGGS joined
[09:12] *** p6bannerbot sets mode: +v FROGGS

[09:13] <lizmat> jnthn: nowadays, is there a reason not to have infix:<~> *always* return a native str ?

[09:14] *** FROGGS left
[09:18] <lizmat> since we have a str ~ str candidate that is inlined, it would seem to me it makes sense for strings with a lot of things interpolated

[09:22] <jnthn> Str ~ Str will be inlined by spesh also, surely.

[09:25] <lizmat> yeah, but that will still create a new Str object for each ~

[09:26] <lizmat> right ?

[09:26] <jnthn> That'd still be the case if you just change the return type :)

[09:26] <lizmat> it does do a nqp::p6box_s on return

[09:26] <jnthn> But actually spesh is in the middle of learning how to spot box/unbox pairs and eliminate the boxing where that's all that happens.

[09:27] <lizmat> FWIW, always return str for the infix ~ candidates spectests clean

[09:27] <jnthn> Yeah, but it's wrong

[09:27] <jnthn> Design wise

[09:28] <lizmat> not sure I follow

[09:29] <lizmat> you mean, people would need to be able to override infix:<~> ?

[09:30] <jnthn> We consistently have the return types of operators taking boxed inputs as giving boxed outputs. Introducing a discontinuity just because it might be a win that we'll have out of more general optimizations anyway seems odd.

[09:31] <lizmat> the reason I'm looking into this, is trying to optimize nested infix:<~> calls (which are the result of interpolation) and try to turn them into a nqp::join on a list_s

[09:32] <lizmat> that should speed up a common case very much

[09:32] <lizmat> then I realized that maybe I didn't have to do that, if infix:<~> would always return str rather than Str:D

[09:33] <jnthn> No, because str is still immutable, so you'd still have a lot of the costs that join might save

[09:33] <lizmat> BTW, inspired by the cause of one of the speed increases of Perl 5.28: optimizing multiple concats into a specific op

[09:33] <lizmat> I fugured we wouldn't need the specific op

[09:34] <jnthn> I thought the original idea for doing this was making infix:<~> list associative, but I think doing so introduced other issues

[09:34] <lizmat> well, there *is* a candidate for it, which takes a slurpy

[09:35] <lizmat> which is a big slowdown, I think

[09:35] <lizmat> but I don't get your point about immutability of str

[09:36] <lizmat> I mean, under the hood in the end it all turns into nqp::concat

[09:36] <lizmat> so why would we knowingly do all of the boxing ?

[09:36] <lizmat> I understand your general point: this is about only infix:<~>

[09:37] <jnthn> The boxing doesn't matter much in that we'll soon be able to optimize it out anyway

[09:38] <jnthn> Of course, there's no reason we can't for now do this by using nqp::concat ops on the pieces and then boxing the final thing

[09:39] <jnthn> (After checking we have the CORE.setting version of infix:<~> in scope)

[09:39] <lizmat> yeah, obviously  :-)

[09:39] <jnthn> But if doing such a transformation anyway, it might be better to go straight for turning it into an nqp::join

[09:40] <lizmat> actually, that was my plan

[09:40] <lizmat> push to an nqp::list_s, and then join and box at the end

[09:40] <jnthn> Because nqp::join can assemble a single result buffer and copy all the pieces in to it

[09:40] *** brrt joined
[09:40] <jnthn> But nqp::concat even on native things can't do that

[09:41] <lizmat> ok, so this is the plan then:

[09:41] <lizmat> 1. drop the idea of infix:<~> returning str always

[09:41] *** p6bannerbot sets mode: +v brrt

[09:42] <lizmat> 2. look into optimizing nested nqp::concats of significant depth into nqp::push_s on a list_s with an nqp::join at the end

[09:42] <lizmat> with the core infix:<~> in scope

[09:45] <Geth> ¦ nqp: 261276cb00 | 陈梓立++ | t/nqp/019-file-ops.t

[09:45] <Geth> ¦ nqp: update test

[09:45] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/261276cb00

[09:45] *** robertle joined
[09:45] *** weq8 joined
[09:45] <jnthn> ++lizmat

[09:46] *** p6bannerbot sets mode: +v robertle

[09:46] *** p6bannerbot sets mode: +v weq8

[09:47] *** weq8 left
[09:51] *** travis-ci joined
[09:51] *** p6bannerbot sets mode: +v travis-ci

[09:51] <travis-ci> NQP build failed. 陈梓立 'update test'

[09:51] <travis-ci> https://travis-ci.org/perl6/nqp/builds/413976331 https://github.com/perl6/nqp/compare/0003b32bdbba...261276cb00ed

[09:51] *** travis-ci left
[10:01] *** pmurias joined
[10:01] *** p6bannerbot sets mode: +v pmurias

[10:03] <lizmat> jnthn: is there a reason that " $a" gets codegenned as "infix:<~>( " ", $a.Stringy )" instead of having MMD take care of stringification?

[10:04] <lizmat> or is that some leftover from before MMD was fully functional ?

[10:04] <jnthn> To make it easier for you to turn it into a join without having to worry about things MMD would take care of? :D

[10:04] <lizmat> he

[10:05] <jnthn> It's probably faster this way, though

[10:05] <lizmat> but seriously, why ?

[10:05] <jnthn> Oh, also

[10:05] <jnthn> We had a fun bug once

[10:05] <jnthn> my $i = 42; say "$i".WHAT # returned Int :P

[10:05] <evalable6> jnthn, rakudo-moar fa73bb48d: OUTPUT: «(Str)␤»

[10:07] <jnthn> I think the current factoring meant that bug just wouldn't happen by design. I suspect it's faster to do it this way because it avoids a redispatch and the callsite to .Stringy is potentially monomorphic rather than being a polymorphic one burried in the general coercing infix:<~> candidate.

[10:07] <lizmat> well, I was thinking of adding Cool:D candidates that would directly call .Str

[10:07] <lizmat> because that's also a common case

[10:08] <lizmat> the path through Stringy nowadays typically takes 10%

[10:08] <lizmat> for Cools

[10:09] <jnthn> Measured through --profile, or timings?

[10:09] <jnthn> (The profiler distorts very small inlines, thus the question)

[10:09] <lizmat> through --profile

[10:42] *** orb joined
[10:42] *** p6bannerbot sets mode: +v orb

[10:45] *** captain4221 joined
[10:45] *** captain4221 left
[10:46] *** orb left
[10:47] *** mattcode joined
[10:47] *** p6bannerbot sets mode: +v mattcode

[10:48] *** mattcode left
[11:22] *** ChickenSoup_23 joined
[11:23] *** p6bannerbot sets mode: +v ChickenSoup_23

[11:23] *** ChickenSoup_23 left
[11:27] *** statisfiable6 joined
[11:27] *** p6bannerbot sets mode: +v statisfiable6

[11:29] *** Ven` left
[11:30] <|Tux|> Rakudo version 2018.06-369-gfa73bb48d - MoarVM version 2018.06-395-g0c5f6e52e

[11:30] <|Tux|> csv-test-xs-20      0.437 -  0.439

[11:30] <|Tux|> test-t --race       0.935 -  0.948

[11:30] <|Tux|> csv-ip5xs           0.958 -  0.977

[11:30] <|Tux|> test-t              2.184 -  2.218

[11:30] <|Tux|> csv-ip5xs-20        7.880 -  7.955

[11:30] <|Tux|> test                7.790 -  8.203

[11:30] <|Tux|> test-t-20 --race   12.565 - 12.669

[11:30] <|Tux|> csv-parser         24.064 - 24.399

[11:30] <|Tux|> test-t-20          38.395 - 38.856

[11:49] *** astj left
[11:49] *** astj joined
[11:50] *** p6bannerbot sets mode: +v astj

[11:51] *** AlexDaniel left
[11:52] *** astj left
[11:52] *** astj joined
[11:53] *** p6bannerbot sets mode: +v astj

[11:54] *** bigpresh24 joined
[11:54] *** p6bannerbot sets mode: +v bigpresh24

[11:55] *** bigpresh24 left
[12:06] *** Ven` joined
[12:06] *** p6bannerbot sets mode: +v Ven`

[12:15] *** anataex joined
[12:16] *** p6bannerbot sets mode: +v anataex

[12:21] *** anataex left
[12:23] *** robertle left
[12:23] <jnthn> Umm...oh no

[12:23] <jnthn> Can somebody give me a sanity check?

[12:23] <jnthn> We have this:

[12:23] <jnthn>     method d(IO::Path:D: --> Bool:D) {

[12:24] <jnthn>         $.e

[12:24] <jnthn>           ?? ?Rakudo::Internals.FILETEST-D($!abspath)

[12:24] <jnthn>           !! Failure.new(X::IO::DoesNotExist.new(:path($!abspath),:trying<d>))

[12:24] <jnthn>     }

[12:24] <jnthn> Bool:D. Failure return type.

[12:25] <jnthn> m: class C { method m(--> Bool:D) { Failure.new(X::AdHoc.new) } }; C.m

[12:25] <camelia> rakudo-moar fa73bb48d: OUTPUT: «Unexplained error␤  in block <unit> at <tmp> line 1␤␤»

[12:25] <jnthn> m: class C { method m(--> Bool:D) { Failure.new(X::AdHoc.new) } }; my $x = C.m

[12:25] <camelia> rakudo-moar fa73bb48d: ( no output )

[12:25] <jnthn> I thought :D didn't yet through Failure and Nil?

[12:25] <jnthn> m: class C { method m(--> Bool:D) { Nil } }; my $x = C.m

[12:25] <camelia> rakudo-moar fa73bb48d: ( no output )

[12:25] <jnthn> m: class C { method m(--> Bool) { Nil } }; my $x = C.m

[12:25] <camelia> rakudo-moar fa73bb48d: ( no output )

[12:26] * lizmat is unsure

[12:26] <lizmat> afk for a bit to look at the rain

[12:30] <jnthn> I'll just retain current behavior for now

[12:30] <jnthn> (Looking into the last spectest failures of my p6decontrv plugin)

[12:32] *** pmurias left
[12:35] *** pmurias joined
[12:36] *** p6bannerbot sets mode: +v pmurias

[12:37] *** j3nnn1 joined
[12:37] *** p6bannerbot sets mode: +v j3nnn1

[12:44] *** Zoffix joined
[12:44] *** p6bannerbot sets mode: +v Zoffix

[12:44] <Zoffix> jnthn: I thought Nil and Failure bypassed return typecheck entirely

[12:45] <Zoffix> jnthn: also, is your p6decontrv plugin "large" work? Like, I just fired off toaster. Should I kill it and wait for you to merge that work?

[12:45] *** Kaiepi left
[12:45] *** Kaypie joined
[12:45] <Geth> ¦ rakudo/return-type-check-plugin: db96cab335 | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[12:45] <Geth> ¦ rakudo/return-type-check-plugin: Discard p6decontrv when returning a known constant

[12:45] <Geth> ¦ rakudo/return-type-check-plugin: review: https://github.com/rakudo/rakudo/commit/db96cab335

[12:45] <Geth> ¦ rakudo/return-type-check-plugin: 09f5d0b68b | (Jonathan Worthington)++ | src/vm/moar/spesh-plugins.nqp

[12:45] <Geth> ¦ rakudo/return-type-check-plugin: One identity sub shall suffice

[12:45] <Geth> ¦ rakudo/return-type-check-plugin: review: https://github.com/rakudo/rakudo/commit/09f5d0b68b

[12:45] <Geth> ¦ rakudo/return-type-check-plugin: f8be2a2d64 | (Jonathan Worthington)++ | src/vm/moar/spesh-plugins.nqp

[12:45] <Geth> ¦ rakudo/return-type-check-plugin: Enforce definiteness checks on return values

[12:45] <Geth> ¦ rakudo/return-type-check-plugin: review: https://github.com/rakudo/rakudo/commit/f8be2a2d64

[12:45] <Zoffix> (well, just Nil, I guess, since Failure is Nil)

[12:46] *** p6bannerbot sets mode: +v Kaypie

[12:46] <jnthn> Zoffix: Well, it's large in so far as return value type checks are widely used goes

[12:46] <Zoffix> k, I'll wait for merge :)

[12:46] <jnthn> On the other hand, it's also quite isolated (that is, I'm not doing code changes all over the place, just in one or two places)

[12:46] <jnthn> So it's nothing like so risky as the Scalar changes :-)

[12:46] <jnthn> I've got one spectest change I need to look at

[12:47] <jnthn> *regression

[12:49] <jnthn> "Type check failed for return value; expected num but got Bool (Bool::True)"

[12:49] <jnthn> Huh, we ain't even meant to use this logic if it's a native return type...

[12:53] *** diakopter joined
[12:53] *** p6bannerbot sets mode: +v diakopter

[13:14] *** brrt left
[13:14] *** brrt joined
[13:15] *** p6bannerbot sets mode: +v brrt

[13:27] <jnthn> Hurrah, a happy spectest

[13:27] <timotimo> \o/

[13:30] <Geth> ¦ rakudo/return-type-check-plugin: bf9ab42e0f | (Jonathan Worthington)++ | 2 files

[13:30] <Geth> ¦ rakudo/return-type-check-plugin: Pass type into the spesh type check plugin

[13:30] <Geth> ¦ rakudo/return-type-check-plugin: 

[13:30] <Geth> ¦ rakudo/return-type-check-plugin: Turns out that the static inliner likes to inline some things that use

[13:30] <Geth> ¦ rakudo/return-type-check-plugin: it.

[13:30] <Geth> ¦ rakudo/return-type-check-plugin: review: https://github.com/rakudo/rakudo/commit/bf9ab42e0f

[13:30] <timotimo> oh, interesting

[13:34] <lizmat> hmmm.. t/spec/MISC/misc-6.d.t flaps for me   # Zoffix

[13:35] <Geth> ¦ rakudo/master: 6 commits pushed by (Jonathan Worthington)++

[13:35] <Geth> ¦ rakudo/master: fe5c8d4973 | Use a spesh plugin for return value type checks

[13:35] <Geth> ¦ rakudo/master: db96cab335 | Discard p6decontrv when returning a known constant

[13:35] <Geth> ¦ rakudo/master: 09f5d0b68b | One identity sub shall suffice

[13:35] <Geth> ¦ rakudo/master: f8be2a2d64 | Enforce definiteness checks on return values

[13:35] <Geth> ¦ rakudo/master: bf9ab42e0f | Pass type into the spesh type check plugin

[13:35] <Geth> ¦ rakudo/master: dc68b932d3 | Merge branch 'return-type-check-plugin'

[13:35] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/fa73bb48d5a6...dc68b932d37c

[13:35] <lizmat> whee!

[13:35] *** brrt left
[13:35] <jnthn> Probably a good time to do some version bumps now too :)

[13:38] <jnthn> grrr

[13:38] <jnthn> Can NOT inline AT-KEY (6256) with bytecode size 440 into postcircumfix:<{ }> (2249): bytecode is too large to inline

[13:38] <jnthn> I'm sure I tuned that to work out before :(

[13:39] <timotimo> damn

[13:39] <jnthn> oh, lemme make sure I've got that revert of the change to it...

[13:39] <timotimo> oh, the AT-KEY-NO-CONTAINER or what it was

[13:39] <jnthn> yeah

[13:41] <jnthn> yay, that revert helped

[13:41] <timotimo> hooray

[13:45] <jnthn> With it reverted a hash reading benchmark takes 0.3758; the manual inline slowed it to 0.6178 :)

[13:45] <lizmat> yeah... :-)

[13:45] <lizmat> sorry about that one

[13:46] <jnthn> No worries, glad I caught it going in

[13:46] <jnthn> AT-POS also inlines quite nicely nowadays too

[13:46] <jnthn> ASSIGN-POS doesn't

[13:47] <jnthn> Maybe time for another crack at that

[13:50] *** Kaypie left
[13:51] <lizmat> jnthn: so, time to bump versions, or not ?

[13:51] <jnthn> Yeah, can do :)

[13:51] <lizmat> ok, will do in a mo (after my last spectest)

[13:52] *** PufferBot joined
[13:52] *** Kaiepi joined
[13:53] *** p6bannerbot sets mode: +v PufferBot

[13:53] *** p6bannerbot sets mode: +v Kaiepi

[13:56] <timotimo> what was it before the recent round of optimifications?

[13:57] <jnthn> Closer to the 0.6 or so

[13:57] <Geth> ¦ rakudo: 3ae97e5f38 | (Elizabeth Mattijsen)++ | 3 files

[13:57] <Geth> ¦ rakudo: Optimize interpolation

[13:57] <Geth> ¦ rakudo: 

[13:57] <Geth> ¦ rakudo: Before, all interpolation was codegenned with a call to "Stringy".  This

[13:57] <Geth> ¦ rakudo: has several disadvantages:

[13:58] <Geth> ¦ rakudo: - it created a more opcodes (this patch makes core setting 25K smaller)

[13:58] <Geth> ¦ rakudo: - it wouldn't allow for better optimized infix:<~> candidates

[13:58] <Geth> ¦ rakudo: - it didn't allow custom infix:<~> to be seen (as all became Str)

[13:58] <Geth> ¦ rakudo: <…commit message has 13 more lines…>

[13:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3ae97e5f38

[14:02] <lizmat> jnthn: I have one test failing in nqp: t/nqp/019-file-ops.t

[14:02] *** AlexDaniel joined
[14:02] <lizmat> You planned 111 tests but ran 112.  # ring a bell ?

[14:03] *** p6bannerbot sets mode: +v AlexDaniel

[14:04] <Geth> ¦ nqp: b9c0bfcfcb | (Zoffix Znet)++ | t/nqp/019-file-ops.t

[14:04] *** AlexDaniel left
[14:04] *** AlexDaniel joined
[14:04] *** card.freenode.net sets mode: +v AlexDaniel

[14:04] <Geth> ¦ nqp: Revert "update test"

[14:04] <Geth> ¦ nqp: 

[14:04] <Geth> ¦ nqp: This reverts commit 261276cb00ed62526050d2328667032888ffaaed.

[14:04] <Geth> ¦ nqp: 

[14:04] *** p6bannerbot sets mode: +v AlexDaniel

[14:04] <Geth> ¦ nqp: The commit is unexplained and makes the test suit fail. I don't

[14:04] <Geth> ¦ nqp: immediatelly see why the failure occurs.

[14:04] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b9c0bfcfcb

[14:06] *** timotimo left
[14:06] *** AlexDaniel left
[14:06] *** AlexDaniel joined
[14:06] *** p6bannerbot sets mode: +v AlexDaniel

[14:06] <lizmat> ok, that's solved then  :-)

[14:07] <Geth> ¦ nqp: d24856daf0 | (Zoffix Znet)++ | t/nqp/019-file-ops.t

[14:07] <Geth> ¦ nqp: Revert "Revert "update test""

[14:07] <Geth> ¦ nqp: 

[14:07] <Geth> ¦ nqp: This reverts commit b9c0bfcfcb043cd138e1a1d57233f90793a4914f.

[14:07] <Geth> ¦ nqp: 

[14:07] <Geth> ¦ nqp: https://github.com/perl6/nqp/commit/261276cb00ed62526050d2328667032888ffaaed#commitcomment-30020362

[14:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d24856daf0

[14:07] <lizmat> ah, it's not ?

[14:07] <lizmat> Zoffix: que?

[14:07] <Geth> ¦ nqp: c05a3120f8 | (Zoffix Znet)++ | t/nqp/019-file-ops.t

[14:07] <Geth> ¦ nqp: Fix plan

[14:07] <Geth> ¦ nqp: 

[14:07] <Geth> ¦ nqp: https://github.com/perl6/nqp/commit/261276cb00ed62526050d2328667032888ffaaed#commitcomment-30020362

[14:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c05a3120f8

[14:07] <Geth> ¦ nqp: e1929a4948 | (Elizabeth Mattijsen)++ | tools/build/MOAR_REVISION

[14:07] <Geth> ¦ nqp: Bump MoarVM for latest goodies

[14:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e1929a4948

[14:07] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-391-g91d2878...2018.06-395-g0c5f6e5

[14:08] *** travis-ci joined
[14:08] *** p6bannerbot sets mode: +v travis-ci

[14:08] <travis-ci> NQP build canceled. Zoffix Znet 'Fix plan

[14:08] <travis-ci> https://travis-ci.org/perl6/nqp/builds/414077835 https://github.com/perl6/nqp/compare/d24856daf079...c05a3120f8f2

[14:08] *** travis-ci left
[14:09] *** travis-ci joined
[14:09] *** p6bannerbot sets mode: +v travis-ci

[14:09] <travis-ci> NQP build failed. Zoffix Znet 'Revert "update test"

[14:09] <travis-ci> https://travis-ci.org/perl6/nqp/builds/414076313 https://github.com/perl6/nqp/compare/261276cb00ed...b9c0bfcfcb04

[14:09] *** travis-ci left
[14:11] *** travis-ci joined
[14:11] *** p6bannerbot sets mode: +v travis-ci

[14:11] <travis-ci> NQP build failed. Zoffix Znet 'Revert "Revert "update test""

[14:11] <travis-ci> https://travis-ci.org/perl6/nqp/builds/414077657 https://github.com/perl6/nqp/compare/b9c0bfcfcb04...d24856daf079

[14:11] *** travis-ci left
[14:13] <Zoffix> lizmat: yeah, it's solved. It was just a wrong plan after a recent change to that test file

[14:14] <Zoffix> (the travis failures are N#494)

[14:14] <synopsebot> N#494 [open]: https://github.com/perl6/nqp/issues/494 Bootstrap for JVM backend

[14:14] *** travis-ci joined
[14:14] *** p6bannerbot sets mode: +v travis-ci

[14:14] <travis-ci> NQP build failed. Elizabeth Mattijsen 'Bump MoarVM for latest goodies'

[14:14] <travis-ci> https://travis-ci.org/perl6/nqp/builds/414078139 https://github.com/perl6/nqp/compare/c05a3120f8f2...e1929a494815

[14:14] *** travis-ci left
[14:16] *** ExtraCrispy joined
[14:17] <lizmat> that's the JVM build failing with "nqp::strfromname(~$/)"), no registered operation handler"

[14:17] *** p6bannerbot sets mode: +v ExtraCrispy

[14:18] <Zoffix> lizmat: which test flaps int/spec/MISC/misc-6.d.t ? I can't get any to flap

[14:18] <lizmat> the "is native num initialized with 0e0" test

[14:19] <Zoffix> 0_o

[14:20] <lizmat> m: say 14051288 - 13956344   # reduction in .moarvm

[14:20] <camelia> rakudo-moar 3ae97e5f3: OUTPUT: «94944␤»

[14:20] *** bluszcz1 joined
[14:20] <Zoffix> lizmat: does this have any failures? https://gist.github.com/zoffixznet/82efbc2821bb908515125d087b457735  

[14:21] <Zoffix> lizmat: I ran it with `prove -e ./perl6 ../z.p6`

[14:21] *** bluszcz1 left
[14:21] <Zoffix> All tests successful.

[14:21] <Zoffix> Files=1, Tests=100000,

[14:21] <Geth> ¦ rakudo: a41c37c89f | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[14:21] <Geth> ¦ rakudo: Bump NQP to get the latest goodies

[14:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a41c37c89f

[14:21] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-147-g39bfe08...2018.06-154-ge1929a4

[14:23] <lizmat> Zoffix: that was ok for me as well

[14:23] <lizmat> note: that was with the bumped MoarVm

[14:23] <notable6> lizmat, Noted!

[14:23] <lizmat> oops

[14:23] <Zoffix> I'm on master/master/master with 2018.06-376-g3ae97e5 built on MoarVM version 2018.06-395-g0c5f6e5

[14:24] <lizmat> same here

[14:26] <lizmat> [Tux]: looks like the latest bump will have a positive effect on test-t  :-)

[14:26] *** pmurias left
[14:27] *** pmurias joined
[14:27] <lizmat> test-t < 1.9 on my machine for the first time

[14:27] <Zoffix> :o

[14:27] *** p6bannerbot sets mode: +v pmurias

[14:27] <|Tux|> it is running now …

[14:28] <Zoffix> Yesterday, stage parse was 99s on this box, today it's 89. Dunno if it's just noise/less busy box, but might be a real improvement :)

[14:30] <diakopter> O_O

[14:30] <Zoffix> ?

[14:30] <diakopter> that's fast

[14:31] <diakopter> sometimes the highest-hanging fruit is heaviest

[14:31] *** Cprossu11 joined
[14:31] <jnthn> I saw a slight improvement :)

[14:31] <|Tux|> 2.213 on first run

[14:31] *** p6bannerbot sets mode: +v Cprossu11

[14:32] *** Cprossu11 left
[14:34] *** PufferBot left
[14:35] *** Kaiepi left
[14:35] *** Kaiepi joined
[14:36] *** p6bannerbot sets mode: +v Kaiepi

[14:37] <|Tux|> Rakudo version 2018.06-377-ga41c37c89 - MoarVM version 2018.06-395-g0c5f6e52e

[14:37] <|Tux|> csv-test-xs-20      0.485 -  0.504

[14:37] <|Tux|> test-t --race       0.906 -  0.939

[14:37] <|Tux|> csv-ip5xs           0.950 -  0.988

[14:37] <|Tux|> test-t              2.133 -  2.213

[14:37] <|Tux|> csv-ip5xs-20        7.225 -  7.744

[14:37] <|Tux|> test                7.841 -  8.863

[14:37] <|Tux|> test-t-20 --race   11.905 - 12.101

[14:37] <|Tux|> csv-parser         22.602 - 22.667

[14:37] <|Tux|> test-t-20          37.417 - 39.629

[14:37] <|Tux|> 2018-08-09 13:22:47 test-t 2.184

[14:37] <|Tux|> 2018-08-07 19:22:21 test-t 2.178

[14:37] <|Tux|> 2018-08-03 17:01:13 test-t 2.175

[14:37] <|Tux|> 2018-08-07 16:28:38 test-t 2.159

[14:37] <|Tux|> 2018-08-09 16:34:28 test-t 2.133

[14:39] <Zoffix> .oO( we need a new, more comprehensive bench )

[14:40] *** Zoffix left
[14:47] <dogbert17> we need to get below 2 :-)

[14:50] <lizmat> dogbert17: on my machine, test-t is now below 1.9  :-)

[14:51] <|Tux|> my test box: Linux 4.4.140-62-default [openSUSE Leap 42.3]  HP Z220CMT Xeon(R) CPU E3-1245 V2 @ 3.40GHz/3271(8 cores) x86_64  11888 Mb

[14:55] <lizmat> 2.9GHz I7 with turbo boost up to 3.6GHz I believe

[14:56] <lizmat> afk for a few hours&

[14:59] <dogbert17> lizmat: cool

[15:01] *** Cprossu3 joined
[15:02] *** p6bannerbot sets mode: +v Cprossu3

[15:05] <dogbert17> ZOFFLOP: /spec/S09-typed-arrays/native-int.t

[15:06] <dogbert17> valgrind doesn't like that file

[15:06] <dogbert17> ==8553== Conditional jump or move depends on uninitialised value(s)

[15:07] <dogbert17> ==8553==    at 0x502B97A: MVM_validate_static_frame (validation.c:696)

[15:07] *** Cprossu3 left
[15:16] <jnthn> Studying some of the code we produce shows up quite a few little things for improvement...

[15:18] <|Tux|> 2.129

[15:20] *** Zoffix joined
[15:20] *** p6bannerbot sets mode: +v Zoffix

[15:20] <Zoffix> nm on toaster... Google keeps killing my VM after several minutes and I don't see an option to turn off pre-emptability without re-creating the VM from scratch, which I'm too lazy to do

[15:21] <jnthn> CORE.setting compilation does also seem reliably a little faster for me, fwiw 

[15:22] <jnthn> 48.273 is the lowest I remember seeing

[15:24] <jnthn> hmpf, one of my code-gen improvements regressed my hash store benchmark...

[15:26] *** Zoffix left
[15:26] <jnthn> huh, or pulling latest did

[15:27] <jnthn> oh yes, ASSIGN-KEY now fails to inline

[15:34] <jnthn> Heh, 48.014 certainly is

[15:35] <jnthn> (Not because of another improvement, just a lucky run)

[15:35] <jnthn> wat, I just got 47.734 on my latest one o.O

[15:37] *** timo joined
[15:37] *** p6bannerbot sets mode: +v timo

[15:37] *** timo is now known as timotimo

[15:39] <diakopter> jnthn: mebbe that was VERY fortuitous cosmic rays optimizing your program for you

[15:41] *** lizmat left
[15:44] <timotimo> it just keeps getting faster and faster

[15:49] <Geth> ¦ nqp: 2bb945df83 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[15:49] <Geth> ¦ nqp: Improve getattr/bindattr code gen quality

[15:49] <Geth> ¦ nqp: 

[15:49] <Geth> ¦ nqp: Recognize when we have a literal wrapped up in a QAST::Want, and emit

[15:49] <Geth> ¦ nqp: a more efficient getattr_* instead of a const_s and getattrs_*.

[15:49] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2bb945df83

[15:52] <jnthn> Not quite sure who and what is to thank for it, but CORE.setting here is now under the 14 MB mark

[15:56] <timotimo> \o/

[15:57] <timotimo> i expect all of this to also decrease memory usage during core setting compilation by a tiny amount

[15:58] <timotimo> statisfiable6: core

[15:58] <statisfiable6> timotimo, OK! Working on it…

[16:00] <statisfiable6> timotimo, https://gist.github.com/605db5c0b63cf1a56f29fd93e7dc56d3

[16:02] <timotimo> 3ae97e5f38e85a5db76053ed2c7757c59a22f73d 14.00476

[16:02] <timotimo> a41c37c89f45327c91c024b72ed1d59693cfa832 13.956392

[16:07] *** Zoffix joined
[16:07] *** p6bannerbot sets mode: +v Zoffix

[16:10] <Geth> ¦ nqp: b23941d2ee | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[16:10] <Geth> ¦ nqp: Often do a decont less in getattr/bindattr codegen

[16:10] <Geth> ¦ nqp: 

[16:10] <Geth> ¦ nqp: In the case that we have a QAST::WVal for the class handle, then we

[16:10] <Geth> ¦ nqp: know that we don't need to generate one.

[16:10] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b23941d2ee

[16:11] <jnthn> m: my @a; dd (@a = 42)

[16:11] <camelia> rakudo-moar a41c37c89: OUTPUT: «Array @a = [42]␤»

[16:11] <jnthn> m: my @a; dd (@a[1] = 42)

[16:11] <camelia> rakudo-moar a41c37c89: OUTPUT: «42␤»

[16:11] <jnthn> m: my @a; (@a[1] = 42) = 101

[16:11] <camelia> rakudo-moar a41c37c89: OUTPUT: «Cannot modify an immutable Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[16:13] <Geth> ¦ rakudo: fd6164a106 | (Jonathan Worthington)++ | src/vm/moar/Perl6/Ops.nqp

[16:13] <Geth> ¦ rakudo: Improve p6bindattrinvres code-gen quality

[16:13] <Geth> ¦ rakudo: 

[16:13] <Geth> ¦ rakudo: * Generate simpler bindattr_o where possible instead of bindattrs_o

[16:13] <Geth> ¦ rakudo:   and a const_s

[16:13] <Geth> ¦ rakudo: * Don't decont the class handle if it's a QAST::WVal type object

[16:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fd6164a106

[16:13] <Geth> ¦ rakudo: 9a5c538fa2 | (Jonathan Worthington)++ | src/Perl6/World.nqp

[16:13] <Geth> ¦ rakudo: Ensure Scalar type objects compiles to QAST::WVal

[16:13] <Geth> ¦ rakudo: 

[16:13] <Geth> ¦ rakudo: It previously would compile into a `getlex`. Amusingly enough, spesh

[16:13] <Geth> ¦ rakudo: did try and make the best of a bad situation by sticking in a guard so

[16:13] <Geth> ¦ rakudo: things like `nqp::create(Scalar)` and attribute lookups using `Scalar`

[16:13] <Geth> ¦ rakudo: would be lowered anyway, which is cute, but still wasteful.

[16:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9a5c538fa2

[16:13] <Geth> ¦ rakudo: c60a347f61 | (Jonathan Worthington)++ | src/core/Hash.pm6

[16:13] <Geth> ¦ rakudo: Further code shrinkage of Hash.ASSIGN-KEY

[16:13] <Geth> ¦ rakudo: 

[16:13] <Geth> ¦ rakudo: To really make sure it's getting reliably inlined.

[16:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c60a347f61

[16:14] *** travis-ci joined
[16:14] *** p6bannerbot sets mode: +v travis-ci

[16:14] <travis-ci> NQP build failed. Jonathan Worthington 'Often do a decont less in getattr/bindattr codegen

[16:14] <travis-ci> https://travis-ci.org/perl6/nqp/builds/414136113 https://github.com/perl6/nqp/compare/2bb945df8334...b23941d2ee96

[16:14] *** travis-ci left
[16:34] *** Ven` left
[16:48] <Zoffix> New blog post: "The 100 Day Plan: The Update on Perl 6.d Preparations": https://rakudo.party/post/The-100-Day-Plan-The-6-d-Update

[16:54] *** AlexDaniel left
[16:54] <Ulti> yay Im going to share a birthday with Perl 6.d

[16:55] <Ulti> or at least Diwali this year

[16:55] *** AlexDaniel joined
[16:55] *** p6bannerbot sets mode: +v AlexDaniel

[16:55] <Ulti> which is convenient since in the UK we will be setting the place on fire around that time anyway

[16:57] <diakopter> <sideways laughter crying emoji>

[16:58] *** Zoffix left
[17:04] *** Zoffix joined
[17:04] *** p6bannerbot sets mode: +v Zoffix

[17:04] <Zoffix> Toast results for HEAD: aborted because zef failed to run "flattening of other hash reprs NYI."

[17:05] <Zoffix> actually, no it's the step after zef

[17:05] * Zoffix tries to golf

[17:07] <Zoffix> Actually, g2g ATM... Here's the tail of toaster session with the error: https://gist.github.com/zoffixznet/c0f9d9e02c5fd225414f5f5d09f9c80b  and toaster code is here: https://github.com/zoffixznet/perl6-Toaster

[17:07] *** Zoffix left
[17:08] <Ulti> m: say "\c[ROLLING ON THE FLOOR LAUGHING]"

[17:08] <camelia> rakudo-moar c60a347f6: OUTPUT: «🤣␤»

[17:08] <Ulti> naw

[17:08] <Ulti> diakopter I think thats what you wanted :P

[17:16] *** brrt joined
[17:17] *** p6bannerbot sets mode: +v brrt

[17:20] *** brrt left
[17:22] *** jdv79_ is now known as jdv79

[17:23] *** brrt joined
[17:23] *** p6bannerbot sets mode: +v brrt

[17:28] *** Zoffix joined
[17:28] *** p6bannerbot sets mode: +v Zoffix

[17:28] <Zoffix> Actually yeah, it is zef. I can repro by just cloning zef and running `perl6 -Ilib bin/zef info Test`

[17:28] <Zoffix> on 2018.06-377-ga41c37c built on MoarVM version 2018.06-395-g0c5f6e5

[17:30] <Zoffix> and the "flattening of other hash reprs NYI." crash is on "  $!recommendation-manager.search(@identities, :$strict, |%fields);", but I'm failing to repro it outside the code

[17:38] *** SakiiR joined
[17:39] *** p6bannerbot sets mode: +v SakiiR

[17:44] *** SakiiR left
[17:48] <Zoffix> .tell jnthn FYI: R#2195 https://github.com/rakudo/rakudo/issues/2195

[17:48] <yoleaux> Zoffix: I'll pass your message to jnthn.

[17:48] <synopsebot> R#2195 [open]: https://github.com/rakudo/rakudo/issues/2195 [⚠ blocker ⚠] False positive throwage of "flattening of other hash reprs NYI"

[17:48] *** Zoffix left
[17:49] *** brrt left
[18:14] <Geth> ¦ rakudo: 5559f4c99f | (Jonathan Worthington)++ | src/core/Array.pm6

[18:14] <Geth> ¦ rakudo: Tune up Array.ASSIGN-POS

[18:14] <Geth> ¦ rakudo: 

[18:14] <Geth> ¦ rakudo: This gets the code size to be quite significantly smaller. It's not

[18:14] <Geth> ¦ rakudo: quite at the point where it will inline yet, but a great deal closer.

[18:14] <Geth> ¦ rakudo: There's still some suboptimality in the code produced after

[18:14] <Geth> ¦ rakudo: specialization, so this will need more attention. Even with these

[18:14] <Geth> ¦ rakudo: outstanding tasks, this is still a quite measurable speedup.

[18:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5559f4c99f

[18:42] *** lizmat joined
[18:43] *** p6bannerbot sets mode: +v lizmat

[18:45] <lizmat> jnthn: from c60a347f615400b41b6d I gather that nowadays we don't want to do 2 getattrs, but preferably do a single one, bind to that and use the alias?

[18:46] *** BlueShark6 joined
[18:46] *** BlueShark6 left
[19:29] *** e22 joined
[19:29] *** e22 left
[19:38] *** xerox1233 joined
[19:38] *** Odd_ joined
[19:38] *** xerox1233 left
[19:39] *** p6bannerbot sets mode: +v Odd_

[19:39] *** Odd_ left
[19:57] <jnthn> lizmat: Yes. Sigilless vars (provided not closed over) just become a VM register and the "assignment" into them a `set` instruction

[19:57] <jnthn> lizmat: Then the references to it are immediate (e.g. no lookup instruction)

[19:57] <lizmat> ok, I think I know a few other places then that could use that change  :-)

[19:58] <jnthn> lizmat: Further to that, each getattr means a guard, and it's better to have less of those :)

[19:58] <lizmat> gotcha

[19:58] <lizmat> it used to be that having extra locals would be overhead

[19:58] <lizmat> I guess that's no longer the case then  :)

[20:00] <jnthn> Well, it also used to be they were *not* locals, they were lexicals :)

[20:01] <lizmat> ah, that... ok

[20:01] <lizmat> argh, I just found out that sprintf/fmt use a grammar under the hood

[20:01] <lizmat> which makes them really slow  :-(

[20:02] <jnthn> Well, it's fast if you keep a hash mapping format string into code that does the job, but yeah, if you parse it every time... :)

[20:03] <lizmat> how would you keep that ?

[20:03] <diakopter> sprintf/fmt used to be non-grammar based :o

[20:03] <lizmat> jnthn: how can you *not* parse that every time ?

[20:08] *** yawkat19 joined
[20:09] *** p6bannerbot sets mode: +v yawkat19

[20:09] *** yawkat19 left
[20:10] <jnthn> lizmat: Parse it once, turn it into a closure tree (or compile it into QAST) that - given the arguments - applies the format

[20:11] <lizmat> I'm afraid I don't follow :-(

[20:18] <jnthn> lizmat: Compile formats into code that, keep a hash of format string to code, run the cdoe each time

[20:19] <lizmat> ok, so you're suggesting I implement that in the core?  Is that what you're saying ?

[20:21] <jnthn> Well, it's probably an amount of work, but yes, it's probably the right direction to go

[20:22] <jnthn> If we're parsing the string with a grammar every time, that ain't going to be so fast...

[20:29] <lizmat> ok

[20:29] <lizmat> gotcha

[20:38] *** lizmat_ joined
[20:39] *** p6bannerbot sets mode: +v lizmat_

[20:40] *** lizmat left
[20:49] <pmurias> Dynamicaly created sprintf formats are super rare, right?

[20:51] *** Stummi6 joined
[20:52] <timotimo> i would expect that

[20:52] *** p6bannerbot sets mode: +v Stummi6

[20:52] *** Stummi6 left
[21:04] <jnthn> I figure so. We can always put a size limit on the cache.

[21:06] <AlexDaniel> Zoffix++ # v6.d work

[21:16] *** pmurias left
[21:16] *** timotimo left
[21:23] *** Ambroisie joined
[21:23] *** Ambroisie left
[21:36] *** sparklefarkle joined
[21:36] *** sparklefarkle left
[21:36] <Geth> ¦ rakudo: 45df171ae5 | (Elizabeth Mattijsen)++ | 2 files

[21:36] <Geth> ¦ rakudo: Move the Any ~ Any candidate to Str.pm6

[21:36] <Geth> ¦ rakudo: 

[21:36] <Geth> ¦ rakudo: And reduce a level of indirection in that case.

[21:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/45df171ae5

[21:36] <Geth> ¦ rakudo: 327cae7c93 | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[21:36] <Geth> ¦ rakudo: Reduce the number of nqp::getattr calls

[21:36] <Geth> ¦ rakudo: 

[21:36] <Geth> ¦ rakudo: According to jnthn:

[21:36] <Geth> ¦ rakudo:   http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-08-09#l623

[21:36] <Geth> ¦ rakudo: 

[21:36] <Geth> ¦ rakudo: Reduces the .moarvm file by 760 bytes.  All little things help  :-)

[21:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/327cae7c93

[21:41] <lizmat_> jnthn: is nqp::getattr(self,List,'$!todo') also auto-magically vivifying ?

[21:46] <jnthn> lizmat_: To something, maybe to Mu; I forget :)

[21:46] *** lizmat_ is now known as lizmat

[21:53] *** rory9 joined
[21:53] *** rory9 left
[21:55] *** entonian joined
[21:55] *** p6bannerbot sets mode: +v entonian

[21:56] *** entonian left
[22:00] *** Kaiepi left
[22:09] *** lizmat left
[22:12] *** Kaiepi joined
[22:12] *** p6bannerbot sets mode: +v Kaiepi

[22:14] *** lizmat joined
[22:15] *** p6bannerbot sets mode: +v lizmat

[22:48] <Geth> ¦ rakudo/master: 7 commits pushed by (Elizabeth Mattijsen)++

[22:48] <Geth> ¦ rakudo/master: 8b106374d0 | Reduction spree in Map

[22:48] <Geth> ¦ rakudo/master: 498be29fbd | Reduction spree in Stash

[22:48] <Geth> ¦ rakudo/master: d9be6e1d52 | Reduction spree in Str

[22:48] <Geth> ¦ rakudo/master: d168ceff1a | Reduction spree in control

[22:48] <Geth> ¦ rakudo/master: 9b5dec9311 | Reduction spree in set_difference

[22:48] <Geth> ¦ rakudo/master: a2933ac17d | Reduction spree in set_intersection

[22:48] <Geth> ¦ rakudo/master: c6a1536d57 | Reduction spree in set_subset

[22:48] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/327cae7c9395...c6a1536d57a6

[22:50] <lizmat> this shaves 1856 bytes from .moarvm file

[22:53] *** timo joined
[22:53] *** p6bannerbot sets mode: +v timo

[22:53] *** timo is now known as timotimo

[23:03] *** Shnaw18 joined
[23:04] *** p6bannerbot sets mode: +v Shnaw18

[23:04] *** Shnaw18 left
[23:06] <jnthn> :)

[23:09] *** travis-ci joined
[23:09] *** p6bannerbot sets mode: +v travis-ci

[23:09] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Reduction spree in set_subset'

[23:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/414293399 https://github.com/rakudo/rakudo/compare/327cae7c9395...c6a1536d57a6

[23:09] *** travis-ci left
[23:09] <MasterDuke> woohoo, and my parse time is the lowest it's been in a while. 72s

[23:10] <jnthn> :)

[23:17] *** EXCEPTS joined
[23:18] *** p6bannerbot sets mode: +v EXCEPTS

[23:19] *** EXCEPTS left
[23:20] <timotimo> sweet

[23:20] <timotimo> same here fwiw

[23:27] *** greppable6 joined
[23:28] *** p6bannerbot sets mode: +v greppable6

[23:51] *** IntPtr13 joined
[23:51] *** IntPtr13 left
