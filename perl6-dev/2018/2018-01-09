[04:26] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1379: Add test to finish Issue 1305 (LTA Range Error)

[04:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1379

[05:07] <Geth> ¦ rakudo: e91159c5a1 | (Jeremy Studer)++ | t/05-messages/02-errors.t

[05:07] <Geth> ¦ rakudo: Add test to finish Issue 1305 (LTA Range Error)

[05:07] <Geth> ¦ rakudo:

[05:07] <Geth> ¦ rakudo: <https://github.com/rakudo/rakudo/issues/1305>

[05:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e91159c5a1

[05:07] <Geth> ¦ rakudo: 5a76b3cfe4 | (Zoffix Znet)++ (committed using GitHub Web editor) | t/05-messages/02-errors.t

[05:07] <Geth> ¦ rakudo: Merge pull request #1379 from jstuder-gh/issue_1305_test

[05:07] <Geth> ¦ rakudo:

[05:08] <Geth> ¦ rakudo: Add test to finish Issue 1305 (LTA Range Error)

[05:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5a76b3cfe4

[06:44] <travis-ci> Rakudo build failed. Zoffix Znet 'Merge pull request #1379 from jstuder-gh/issue_1305_test

[06:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/326674840 https://github.com/rakudo/rakudo/compare/14c2cdb314ee...5a76b3cfe47e

[06:44] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[08:53] <lizmat> Files=1231, Tests=75999, 328 wallclock secs (14.85 usr  5.32 sys + 2269.97 cusr 233.42 csys = 2523.56 CPU)

[09:09] <Geth> ¦ rakudo: f99943d3fd | (Elizabeth Mattijsen)++ | src/core/Str.pm

[09:09] <Geth> ¦ rakudo: Streamline infix:<x>

[09:09] <Geth> ¦ rakudo:

[09:09] <Geth> ¦ rakudo: - add Bool:D candidate, makes it about 2x faster for True

[09:09] <Geth> ¦ rakudo: - only call nqp::x if there's actually something to do, mild improvement

[09:09] <Geth> ¦ rakudo:

[09:09] <Geth> ¦ rakudo: Inspired by https://twitter.com/zoffix/status/950537151212675072

[09:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f99943d3fd

[09:13] <lizmat> Zoffix: re https://github.com/zoffixznet/q , cool!  maybe some documentation is in order?

[09:14] <lizmat> also, maybe that should be in core ?

[10:13] <jnthn> We already have a .dump() on QAST nodes in core, fwiw

[10:14] <jnthn> (So perhaps that can be improved)

[10:37] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Streamline infix:<x>

[10:37] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/326725911 https://github.com/rakudo/rakudo/compare/5a76b3cfe47e...f99943d3fd3c

[10:37] <buggable> [travis build above] ☠ All failures are due to: failed make test (3 failures). Across all jobs, 2 unique test files failed.

[11:53] <|Tux|> Rakudo version 2017.12-143-gf99943d3f - MoarVM version 2017.12-22-gc2de234c4

[11:53] <|Tux|> csv-test-xs-20      0.434 -  0.482

[11:53] <|Tux|> csv-ip5xs           1.098 -  1.099

[11:53] <|Tux|> test-t --race       1.124 -  1.166

[11:53] <|Tux|> test-t              2.783 -  2.810

[11:53] <|Tux|> test               11.299 - 11.497

[11:53] <|Tux|> csv-parser         12.309 - 12.624

[11:53] <|Tux|> csv-ip5xs-20       12.688 - 12.764

[11:53] <|Tux|> test-t-20 --race   18.147 - 19.213

[11:53] <|Tux|> test-t-20          50.385 - 50.631

[11:54] <|Tux|> 2017-12-05 22:26:46 test-t 2.825

[11:54] <|Tux|> 2018-01-09 12:44:30 test-t 2.810

[11:54] <|Tux|> 2017-12-01 17:41:36 test-t 2.809

[11:54] <|Tux|> 2017-12-13 10:54:18 test-t 2.785

[11:54] <|Tux|> 2018-01-09 12:47:47 test-t 2.783

[12:09] <lizmat> m: sub a(Any:D $a) { }; a   # should this fail or not ?

[12:09] <camelia> rakudo-moar f99943d3f: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:10] <lizmat> argh, I meant:

[12:10] <lizmat> m: sub a(Any:D :$a) { }; a   # should this fail or not ?

[12:10] <camelia> rakudo-moar f99943d3f: OUTPUT: «Parameter '$a' of routine 'a' must be an object instance of type 'Any', not a type object of type 'Any'.  Did you forget a '.new'?␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:10] <lizmat> basically the question of: https://stackoverflow.com/questions/48166325/should-constraining-a-perl-6-named-parameter-to-a-definite-value-make-it-a-requi

[12:11] <lizmat> m: sub a(Any:D :$a = 42) { }; a  # I guess requiring a :D for a named, means you have to supply a defined default value for it

[12:11] <camelia> rakudo-moar f99943d3f: ( no output )

[12:11] <lizmat> m: sub a(Any:D :$a = Int) { }; a

[12:11] <camelia> rakudo-moar f99943d3f: OUTPUT: «Parameter '$a' of routine 'a' must be an object instance of type 'Any', not a type object of type 'Int'.  Did you forget a '.new'?␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:17] <lizmat> BTW, same issue with positionals:

[12:17] <lizmat> m: sub a(Any:D $a?) {}; a

[12:17] <camelia> rakudo-moar f99943d3f: OUTPUT: «Parameter '$a' of routine 'a' must be an object instance of type 'Any', not a type object of type 'Any'.  Did you forget a '.new'?␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:22] <Geth> ¦ rakudo: 5f7fdfdd37 | (Elizabeth Mattijsen)++ | src/core/List.pm

[12:22] <Geth> ¦ rakudo: Add some type-smileys to signature of infix:<xx>

[12:22] <Geth> ¦ rakudo:

[12:22] <Geth> ¦ rakudo: Should create better error messages on input with type objects.

[12:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5f7fdfdd37

[12:47] <Geth> ¦ rakudo: ca4fcacafe | (Elizabeth Mattijsen)++ | src/core/List.pm

[12:47] <Geth> ¦ rakudo: Add Bool:D candidates for infix:<xx>

[12:47] <Geth> ¦ rakudo:

[12:47] <Geth> ¦ rakudo: - makes 42 xx False about 16x faster

[12:47] <Geth> ¦ rakudo: - makes 42 xx True about 10% faster

[12:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ca4fcacafe

[12:52] <Zoffix> lizmat: yeah, that looks right to me. The attribute's default default is an Any:U, which causes a typecheck error. Even tho the parameter is optional, it *always* can be used inside the routine, even if the argument was not specified, so it must have some :D value in it at all times. -1 on OP's proposal to make :D's automatically required. It's just a single character (!) to type to make them required

[12:52] <Zoffix> explicitly so addiing special casing IMO will just cause extra learning burden and poorer errors for no benefit

[12:56] * jnthn agrees fwiw

[13:04] <masak> many of those could be compile-time errors if we wanted

[13:05] <masak> like with `sub a(Int:D $number = Int)`, you've just written a line of code that's just sitting around waiting to blow up at runtime

[13:05] <masak> but we have all the information to do the typecheck at compile time

[13:06] <lizmat> yeah, it's a smop

[13:06] <masak> in my view, this would be the attraction of gradual typing -- that you get to opt into more static checks :)

[13:12] <El_Che> except when prototyping, wouldn't "do always static typing" be the best practice?

[13:13] <El_Che> I don't see the use of not using types when you have them

[13:13] <masak> not typechecking the type violates Least Surprise :P

[13:15] <El_Che> someone (lizmat?) once told me that there isn't a perfomance price to pay for typechekcing, because everything is typed under the hood

[13:15] <lizmat> yup, if you don't specify a type, it will be typechecked against Any (generally)

[13:15] <lizmat> m: my $a; dd $a.WHAT

[13:15] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «Any␤»

[13:16] <El_Che> so since then, type check everything :)

[13:16] <lizmat> well, however much you're interested in  :-)

[13:16] * masak .oO( have the appropriate amount to typechecking )

[13:22] <Zoffix> m: say Int/Num

[13:22] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «Invocant of method 'Bridge' must be an object instance of type 'Int', not a type object of type 'Int'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[13:23] <Zoffix> Kinda LTA IMO, since users don't really ever deal with Bridge methods

[13:23] <pmurias> samcv: why did we choose the non-ignorable (as opposed to shifted) unicode collation

[13:24] <samcv> pmurias: becuase it's the simplest and the base level

[13:25] <samcv> but there's no shifted yet becuase it has not been implemented yet

[13:29] <El_Che> samcv: I hear you were planning to come to fosdem?

[13:29] <samcv> no i won't be at fosdem

[13:30] <samcv> i was considering it but it is expensive

[13:30] <El_Che> next time, then :)

[13:30] <samcv> yes!

[13:30] <El_Che> yeah, it's not cheap. Find a good boss that sends you to give a talk :)

[14:09] <Zoffix> m: -> Int() $x? {dd $x}()

[14:09] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «No such method 'Int' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[14:09] <Zoffix> m: -> Int(Str) $x? {dd $x}()

[14:09] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «Invocant of method 'Int' must be an object instance of type 'Str', not a type object of type 'Str'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[14:10] <Zoffix> This, on the other hand, IMO could be improved. Default these to the target, not the source of the coercer

[14:12] <Zoffix> and then it'd bypass the coersion and not explode above and just make $x an Int type object

[14:12] <Zoffix> gonna try that this week and see if any spectests explode

[14:13] * Zoffix &

[14:18] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Add some type-smileys to signature of infix:<xx>

[14:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/326789557 https://github.com/rakudo/rakudo/compare/f99943d3fd3c...5f7fdfdd37a0

[14:18] <buggable> [travis build above] ☠ All failures are due to: failed make test (3 failures). Across all jobs, 3 unique test files failed.

[14:26] <lizmat> m: dd rand xx 3  # expected

[14:26] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «(0.232755674256339e0, 0.463546185312859e0, 0.645911634770275e0).Seq␤»

[14:27] <lizmat> m: dd |(1,2,3) xx 3  # expected

[14:27] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «(1, 2, 3, 1, 2, 3, 1, 2, 3).Seq␤»

[14:27] <lizmat> m: dd { |(1,2,3) } xx 3  # UNexpected

[14:27] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «(-> ;; $_? is raw { #`(Block|54339088) ... }, -> ;; $_? is raw { #`(Block|54355864) ... }, -> ;; $_? is raw { #`(Block|54355936) ... }).Seq␤»

[14:27] <lizmat> shouldn't that just execute the block and flatten the Slips it produces ?

[14:28] <timotimo> m: dd do { |(1,2,3) } xx 3  # UNexpected

[14:28] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «(1, 2, 3, 1, 2, 3, 1, 2, 3).Seq␤»

[14:28] <timotimo> er, didn't mean to keep the comment

[14:32] <lizmat> so you're saying if you want it like that, you need to prefix it with a do ?

[14:32] <lizmat> if so, why ?

[14:33] <lizmat> m: dd { |(1,2,3) }()

[14:33] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «slip(1, 2, 3)␤»

[14:34] <timotimo> m: dd { |(1, 2, 3) }

[14:34] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «-> ;; $_? is raw { #`(Block|75592432) ... }␤»

[14:40] <Zoffix> lizmat: 'cause some forms of xx thunk and { blah } xx 42 ends being a thunk that returns a Block, so you get a bunch of blocks.

[14:40] <Zoffix> m: &infix:<xx>.candidates».signature.say

[14:40] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «(() (Mu \x) (&x, Any:D $n) (&x, Whatever) (&x, Bool:D $b) (&x, Int:D $n) (Mu \x, Any:D $n) (Mu \x, Whatever) (Mu \x, Bool:D $b) (Mu \x, Int:D $n))␤»

[14:40] <Zoffix> I think all teh Callable candidates are for thunks

[14:41] <lizmat> grr...  so a &x signature will also take a thunk

[14:42] <lizmat> I guess this is some wierd xx parsing, because it doesn't happen with custom infix:<foo>

[14:43] <timotimo> yeah, for thunky things we need support in the parser itself

[14:43] <lizmat> m: dd { |(1,2,3) } xx 3  # so this is intentional behaviour ?

[14:43] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «(-> ;; $_? is raw { #`(Block|56997376) ... }, -> ;; $_? is raw { #`(Block|57014152) ... }, -> ;; $_? is raw { #`(Block|57014224) ... }).Seq␤»

[14:43] <Zoffix> lizmat: yeah, it's done by grammar specially: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L3968 https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L4397

[14:44] <Zoffix> m: multi infix:<xx> (Code, Any:D $n) { say "woot a thunk!" }; say {;} xx 42

[14:44] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «woot a thunk!␤True␤»

[14:45] <Zoffix> m: multi infix:<xx> (Code $c, Any:D $n) { $c.^mro.say; $c.^roles.say }; say {;} xx 42

[14:45] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «((Code) (Any) (Mu))␤((Callable))␤True␤»

[14:45] <Zoffix> I believe thunks are `Code` and the other Callables can be Block/Routine

[14:47] <lizmat> ok, and the "do" turns the block into a thunk (or 'Code')

[14:48] <lizmat> I guess that's the price we pay for getting

[14:48] <lizmat> m: dd rand xx 3

[14:48] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «(0.131076344781978e0, 0.979521644003032e0, 0.176383433300909e0).Seq␤»

[14:48] <lizmat> to work

[14:48] <Zoffix> m: (.^mro.map(*.^name) ...^ "Code").say for ((*.so), {;}, sub {}, my method {}, my submethod {})

[14:48] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «(WhateverCode)␤(Block)␤(Sub Routine Block)␤(Method Routine Block)␤(Submethod Routine Block)␤»

[14:48] <lizmat> fwiw, I think this is pretty inconsistent

[14:49] <lizmat> but now I also understand how this works:

[14:50] <lizmat> m: dd |(1,2,3) xx 3

[14:50] <camelia> rakudo-moar ca4fcacaf: OUTPUT: «(1, 2, 3, 1, 2, 3, 1, 2, 3).Seq␤»

[15:07] <Geth> ¦ rakudo: 014f1712c6 | (Elizabeth Mattijsen)++ | src/core/List.pm

[15:07] <Geth> ¦ rakudo: Make |(1,2,3) xx 42 about 3x faster

[15:07] <Geth> ¦ rakudo:

[15:07] <Geth> ¦ rakudo: - simplify counting

[15:07] <Geth> ¦ rakudo: - directly use iterator.push-all instead of "for" loop

[15:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/014f1712c6

[15:08] <lizmat> afk&

[15:15] * [Coke] will very likely not be at FOSDEM.

[15:17] <yoleaux> Zoffix: If anyone has any ideas for how to proceed on R#1289 please comment

[15:17] <synopsebot> R#1289 [open]: https://github.com/rakudo/rakudo/issues/1289 [severe] [6.d BLOCKER] Implement a Way to Know Caller's Language

[15:18] <Zoffix> jnthn: TimToady nine ^ ping. Any ideas for how to resolve that issue? I can write code if someone gives me some pointers

[15:59] <Zoffix> Travis replied saying all looks OK on their end and to open a support ticket: https://twitter.com/travisci/status/950757629781008384

[16:01] <DrForr> [Coke]: :(

[16:02] <Zoffix> El_Che++ # finding cause of #1377 ; I guess I was wrong and tars can be different :o

[16:04] <[Coke]> DrForr: looks like conferences are a possibility - but out-of-country ones are much harder to sell

[16:06] <Geth> ¦ rakudo: 31c2f5311d | (Zoffix Znet)++ (committed using GitHub Web editor) | .travis.yml

[16:06] <Geth> ¦ rakudo: Travis debug

[16:06] <Geth> ¦ rakudo:

[16:06] <Geth> ¦ rakudo: try making secondary make test non-verbose to see if starts to fail

[16:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/31c2f5311d

[16:08] <DrForr> In the current world economy I can completely understand.

[16:08] <El_Che> FOSDEM has normally a nice mix of Perl 6 devs and users. Let's hope enough Perl 6 people show up :)

[16:09] <DrForr> We'll see. I'm booking tonight once I check out the hotel situation.

[16:11] <DrForr> (not that I'm deciding *whether*, I'm deciding how long.)

[16:12] <DrForr> (now that's a rather *personal* question, innit?)

[16:20] <Zoffix> Interesting; second run with `prove` produced a native call warning about incompatible pointer types: https://travis-ci.org/rakudo/rakudo/jobs/326877727#L1578  but `make test` run above it didn't

[16:22] <[Coke]> Zoffix: one's using harness, one's using prove, yes?

[16:22] <Zoffix> And out of 3 Linux runs; 3 `make test` had rundom errors and 3 non-verbose proves succeeded

[16:22] <Zoffix> [Coke]: yeah

[16:22] <[Coke]> different version of perl5? different env vars, mebbe?

[16:22] <[Coke]> (wouldn't expect that to matter generally)

[16:23] <Zoffix> And I double-checked and indeed, Linux failures started right after new years hard drive issues

[16:26] <Zoffix> or did it..

[16:26] * Zoffix tripple checks

[16:30] <Geth> ¦ rakudo: 18e3468901 | (Zoffix Znet)++ | 2 files

[16:30] <Geth> ¦ rakudo: Revert "Smartify harness automatic job number calculation"

[16:30] <Geth> ¦ rakudo:

[16:30] <Geth> ¦ rakudo: This reverts commit 6f36b02137fe8a27f04c5d701e0cbe01cd68cb29.

[16:30] <Geth> ¦ rakudo:

[16:30] <Geth> ¦ rakudo: Try to eliminate potential Travis Linux failures suspect.

[16:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/18e3468901

[16:37] <Zoffix> Actually, I see one "wait code 9" error in a commit 2 commits before (and 7hr) before hard drive crash. Tho the two commits in between have timeout failures, so it's hard to tell.

[16:37] <Zoffix> Disk crash: https://travis-ci.org/rakudo/rakudo/builds/323728746 first wait 9 failure: https://travis-ci.org/rakudo/rakudo/builds/323686909

[16:43] <El_Che> data could also be corrupted before the crash

[16:43] <El_Che> it's actually likely

[16:50] <Zoffix> Well, I'll be pwned. Looks like my harness smartification commit was to blame.

[16:50] <Zoffix> All three jobs passed now.

[16:50] * Zoffix restarts to make sure

[17:07] <Zoffix> Yeah. All green again.

[17:07] <Zoffix> Hooray? :(

[17:07] <Zoffix> |90d see why harness smartification makes Travis cry: https://github.com/rakudo/rakudo/commit/18e3468901 causes wait 9 failures: https://travis-ci.org/rakudo/rakudo/builds/323686909

[17:07] <ZofBot> Zoffix, Will remind you on 2018-04-09T12:07:38.028904-05:00 about see why harness smartification makes Travis cry: https://github.com/rakudo/rakudo/commit/18e3468901 causes wait 9 failures: https://travis-ci.org/rakudo/rakudo/builds/323686909

[18:04] <Geth> ¦ rakudo: 6709166f3b | (Zoffix Znet)++ (committed using GitHub Web editor) | .travis.yml

[18:04] <Geth> ¦ rakudo: Remove travis debug code

[18:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6709166f3b

[18:07] <Zoffix> [Coke]: I think you were asking if it were possible to see in git log whether commit was committed using Web Editor. It is: the committer's email address would be [email@hidden.address]  so it'd be `git log --oneline --author=users.noreply.github.com`

[18:25] <[Coke]> I don't see that in my local git log for ba8ed096, e.g.

[18:25] <[Coke]> which I am pretty sure I edited online directly.

[18:28] <Zoffix> Hm, yeah. Bot said it was online editor https://irclog.perlgeek.de/perl6/2018-01-08#i_15665932  but yeah, `git log` shows me your normal email too. I guess the used email depends on github account settings

[18:31] <[Coke]> ah well. no worries, thanks for checking!

[18:35] <Zoffix> [Coke]: tho if you know commit SHA you can use GitHub's API to fetch info:  perl6 -MWWW -e 'say jget("https://api.github.com/repos/perl6/doc/commits/" ~ @*ARGS.head)<commit><committer><name> eq "GitHub" ?? "using web editor" !! "no editor"' ba8ed096

[18:37] <Zoffix> or looking at https://github.com/web-flow , `)<committer><login> eq "web-flow"` might be righter

[19:30] <travis-ci> Rakudo build passed. Zoffix Znet 'Revert "Smartify harness automatic job number calculation"

[19:30] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/326889065 https://github.com/rakudo/rakudo/compare/31c2f5311d8e...18e346890158

[20:36] <Geth> ¦ rakudo: b688d43935 | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[20:36] <Geth> ¦ rakudo: Do not compute value unless we gonna use it

[20:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b688d43935

[20:48] <lizmat> :q

[20:48] <lizmat> oops

[20:48] <lizmat> :)

[20:50] * jnthn hugs lizmat, good Vi(m) user

[20:50] <lizmat> hehe

[20:50] <jnthn> .oO( Hah! Sometimes it's the humans taking the jobs from the bots! )

[20:52] <brrt> \o #perl6-dev

[20:53] <timotimo> o/ brrt

[20:53] <brrt> blegh, meltdown fix makes emacs not start instantaneously

[20:53] <brrt> (i'm spoiled)

[20:54] <timotimo> :)

[21:07] <DrForr> Obviously the if $editor === $kernel { } branch was failing.

[21:25] <Geth> ¦ rakudo: e820f30911 | usev6++ | src/Perl6/Actions.nqp

[21:25] <Geth> ¦ rakudo: Chain negated operators on MoarVM only

[21:25] <Geth> ¦ rakudo:

[21:25] <Geth> ¦ rakudo: The 'chain' op was modified for MoarVM with nqp commit 92d1d56831

[21:25] <Geth> ¦ rakudo: to allow the option to use the first child as the callee.

[21:25] <Geth> ¦ rakudo: This does not work for jvm or js, currently.

[21:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e820f30911

[21:36] <Geth> ¦ roast: e35ef6add1 | usev6++ | 2 files

[21:36] <Geth> ¦ roast: [jvm] Run tests for chained negated ops

[21:36] <Geth> ¦ roast:

[21:36] <Geth> ¦ roast: With https://github.com/rakudo/rakudo/commit/e820f30911 the old

[21:36] <Geth> ¦ roast: behaviour is used when not running on MoarVM.

[21:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e35ef6add1

[22:44] <Geth> ¦ rakudo: eed54caef5 | (Elizabeth Mattijsen)++ | src/core/List.pm

[22:44] <Geth> ¦ rakudo: Don't allow binding into a List, period

[22:44] <Geth> ¦ rakudo:

[22:44] <Geth> ¦ rakudo: As per jnthn's comment in the discussion on GH #1261.  Spectests clean.

[22:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eed54caef5

[22:44] <synopsebot> RAKUDO#1261 [open]: https://github.com/rakudo/rakudo/issues/1261 Silent Failure When Binding To Map Key

[22:45] <lizmat> bed&

[22:46] <jnthn> 'night, lizmat++

[23:36] <Zoffix> Now I'll have to edit my Containers article :P

[23:37] <Zoffix> m: my $list := (my $, my $, my $); $list[0] := 100; say $list;

[23:37] <camelia> rakudo-moar eed54caef: OUTPUT: «Cannot use bind operator with this left-hand side␤  in block <unit> at <tmp> line 1␤␤»

[23:37] <Zoffix> Yeah. This is one of the examples :)

[23:39] * Zoffix settles for a clarificatory comment

[23:39] <gfldex> If everything becomes immutable who are we gonna get superheros? :->

[23:52] <timotimo> the zofferton first got his super powers in a horrific mutability accident
