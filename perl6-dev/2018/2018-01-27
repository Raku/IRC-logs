[01:17] <jnthn> Just a quick heads up in case I don't get to mention it here tomorrow: I'm heading away for a weekend birthday break, and won't be dragging a laptop along with me. I'll be back here on Monday. :-)

[01:17] <jnthn> 'night o/

[01:18] <timotimo> \o/

[06:47] <Geth> ¦ nqp: jstuder-gh++ created pull request #402: Rakudo Issue 1304: [jvm] Allow 'chain' op to use child as callee

[06:47] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/402

[06:50] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1448: Issue 1304 Continued: Re-enable negated chaining on the JVM

[06:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1448

[06:53] <Geth> ¦ roast: jstuder-gh++ created pull request #381: Rakudo Issue 1304: Unfudge now passing negated chain tests on JVM

[06:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/381

[07:02] <Geth> ¦ nqp: 84278100ac | (Jeremy Studer)++ | src/vm/jvm/QAST/Compiler.nqp

[07:02] <Geth> ¦ nqp: [jvm] Allow 'chain' op to use child as callee

[07:02] <Geth> ¦ nqp:

[07:02] <Geth> ¦ nqp: Modify the 'chain' op to allow the option to use the first child as the

[07:02] <Geth> ¦ nqp: callee. Before the name of the op served as the operator sub and the

[07:02] <Geth> ¦ nqp: children the operands. This modification makes it so that, if there is

[07:02] <Geth> ¦ nqp: no name provided to the chain, child 0 serves as the operator and

[07:02] <Geth> ¦ nqp: children 1 and 2 the operands.

[07:02] <Geth> ¦ nqp: <…commit message has 5 more lines…>

[07:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/84278100ac

[07:02] <Geth> ¦ nqp: cd03234e17 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/vm/jvm/QAST/Compiler.nqp

[07:02] <Geth> ¦ nqp: Merge pull request #402 from jstuder-gh/jvm_neg_chaining

[07:02] <Geth> ¦ nqp:

[07:02] <Geth> ¦ nqp: Rakudo Issue 1304: [jvm] Allow 'chain' op to use child as callee

[07:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cd03234e17

[07:11] <Geth> ¦ rakudo: e72ec51817 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[07:11] <Geth> ¦ rakudo: [NQP Bump] Brings 3 commits

[07:11] <Geth> ¦ rakudo:

[07:11] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.01-14-ge4f79cb...2018.01-17-gcd03234

[07:11] <Geth> ¦ rakudo: cd03234 Merge pull request #402 from jstuder-gh/jvm_neg_chaining

[07:11] <Geth> ¦ rakudo: 8427810 [jvm] Allow 'chain' op to use child as callee

[07:11] <Geth> ¦ rakudo: d71bd73 Fix typo

[07:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e72ec51817

[07:11] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-14-ge4f79cb...2018.01-17-gcd03234

[07:11] <Geth> ¦ rakudo: 1f22319016 | (Jeremy Studer)++ | src/Perl6/Actions.nqp

[07:11] <Geth> ¦ rakudo: Re-enable negated chaining on the JVM

[07:11] <Geth> ¦ rakudo:

[07:11] <Geth> ¦ rakudo: This statement was previously restricted to MoarVM only as the JVM's

[07:11] <Geth> ¦ rakudo: chain op was not yet set up to handle a child as the callee.

[07:11] <Geth> ¦ rakudo:

[07:11] <Geth> ¦ rakudo: Now, as of commit 84278100acbf589a37f5baa85ffe27d68de52d13 (in the NQP

[07:11] <Geth> ¦ rakudo: repo), the chain op's JVM implementation works the same way that

[07:11] <Geth> ¦ rakudo: MoarVM's does, making this negated chaining implementation functional

[07:11] <Geth> ¦ rakudo: on the JVM backend as well.

[07:11] <Geth> ¦ rakudo:

[07:11] <Geth> ¦ rakudo: See <https://github.com/rakudo/rakudo/issues/1304>.

[07:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1f22319016

[07:12] <Geth> ¦ rakudo: 0c1191f6f8 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[07:12] <Geth> ¦ rakudo: Merge pull request #1448 from jstuder-gh/jvm_neg_chaining

[07:12] <Geth> ¦ rakudo:

[07:12] <Geth> ¦ rakudo: Issue 1304 Continued: Re-enable negated chaining on the JVM

[07:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0c1191f6f8

[07:12] <Geth> ¦ roast: d4deb15487 | (Jeremy Studer)++ | S03-operators/relational.t

[07:12] <Geth> ¦ roast: Unfudge now passing negated chain tests on JVM

[07:12] <Geth> ¦ roast:

[07:12] <Geth> ¦ roast: See <https://github.com/rakudo/rakudo/issues/1304>.

[07:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d4deb15487

[07:12] <Geth> ¦ roast: 910f2dfbe8 | (Zoffix Znet)++ (committed using GitHub Web editor) | S03-operators/relational.t

[07:12] <Geth> ¦ roast: Merge pull request #381 from jstuder-gh/jvm_neg_chaining

[07:12] <Geth> ¦ roast:

[07:12] <Geth> ¦ roast: Rakudo Issue 1304: Unfudge now passing negated chain tests on JVM

[07:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/910f2dfbe8

[08:57] <lizmat> Files=1233, Tests=76124, 311 wallclock secs (14.81 usr  5.14 sys + 2149.22 cusr 201.72 csys = 2370.89 CPU)

[08:57] <lizmat> that's 28 seconds less than my last run, I believe, nine++

[10:57] <AlexDaniel> I'm assuming that it will speed up the toaster as well

[10:58] <lizmat> AlexDaniel: it probably will

[10:58] <lizmat> afk for rest of day&

[12:45] <[Tux]> WHAT? .... :)

[12:45] <[Tux]> Rakudo version 2018.01-40-g0c1191f6f - MoarVM version 2018.01-21-gd3ce626b4

[12:45] <[Tux]> csv-test-xs-20      0.424 -  0.459

[12:45] <[Tux]> csv-ip5xs           1.033 -  1.062

[12:45] <[Tux]> test-t --race       1.093 -  1.116

[12:46] <[Tux]> test-t              2.537 -  2.572

[12:46] <[Tux]> test               10.615 - 10.753

[12:46] <[Tux]> csv-ip5xs-20       11.102 - 11.298

[12:46] <[Tux]> csv-parser         11.877 - 12.589

[12:46] <[Tux]> test-t-20 --race   16.238 - 16.859

[12:46] <[Tux]> test-t-20          46.291 - 46.658

[12:46] <[Tux]> 2018-01-26 15:13:38 test-t 2.687

[12:46] <[Tux]> 2018-01-19 13:33:23 test-t 2.683

[12:46] <[Tux]> 2018-01-26 15:16:48 test-t 2.608

[12:46] <[Tux]> 2018-01-27 13:39:21 test-t 2.572

[12:46] <[Tux]> 2018-01-27 13:42:33 test-t 2.537

[12:47] <[Tux]> result twittered

[13:13] <timotimo> here's to another 100x

[13:16] <DrForr> +2

[13:17] <DrForr> (1 for the 100x, 1 for yay in general!)

[13:18] <timotimo> m: say 16.238 / 46.291

[13:18] <camelia> rakudo-moar 0c1191f6f: OUTPUT: «0.350781␤»

[13:18] <timotimo> that's not so bad; [Tux], you're running the --race ones on a 4-core machine?

[13:22] <[Tux]> Linux 4.4.104-39-default [openSUSE Leap 42.3]  HP Z220CMT Xeon(R) CPU E3-1245 V2 @ 3.40GHz/1965(8) x86_64  11889 Mb

[13:26] <timotimo> i'm not sure, is the (8) the number of cores there? :|

[13:37] <[Tux]> https://www.cpubenchmark.net/cpu.php?cpu=Intel+Xeon+E3-1245+V2+%40+3.40GHz&id=1191

[13:37] <[Tux]> No of Cores: 4 (2 logical cores per physical)

[13:37] <[Tux]> Linux shows 8 CPU's

[13:38] <timotimo> ah, i wonder what it'll use for the degree in race in that case

[13:38] <Geth> ¦ rakudo: b188cc8265 | (Stefan Seifert)++ | 2 files

[13:38] <Geth> ¦ rakudo: Speed up resolve-unknown-repos

[13:38] <Geth> ¦ rakudo:

[13:38] <Geth> ¦ rakudo: No need to turn the repo-chain into an array just to traverse it.

[13:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b188cc8265

[13:38] <timotimo> because for 8 cores, 3x speedup isn't so great any more :)

[13:46] <Geth> ¦ rakudo: 838beab9d9 | (Stefan Seifert)++ | 4 files

[13:46] <Geth> ¦ rakudo: Avoid unnecessary check of PrecompilationId's validity

[13:46] <Geth> ¦ rakudo:

[13:46] <Geth> ¦ rakudo: In many cases we can trust that the precompilation id is already valid,

[13:46] <Geth> ¦ rakudo: because it's derived from the compiler's id or is generated by way of sha1

[13:46] <Geth> ¦ rakudo: or comes from the name of a file named after a precompilation id.

[13:46] <Geth> ¦ rakudo: So avoid the costly regex parsing of the id in those cases and just trust

[13:46] <Geth> ¦ rakudo: the value.

[13:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/838beab9d9

[13:58] <Geth> ¦ rakudo: baa1393b6d | (Stefan Seifert)++ | src/vm/moar/ops/container.c

[13:58] <Geth> ¦ rakudo: Clean up handler successors after throwish ops become non-throwing

[13:58] <Geth> ¦ rakudo:

[13:58] <Geth> ¦ rakudo: Mirrors MoarVM commit f80d610cc4

[13:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/baa1393b6d

[14:01] <Geth> ¦ rakudo: 3ed2fbd550 | (Stefan Seifert)++ | lib/NativeCall.pm6

[14:01] <Geth> ¦ rakudo: Improve dynamic optimization of nativecast

[14:01] <Geth> ¦ rakudo:

[14:01] <Geth> ¦ rakudo: Using multi candidates for the Int and Num special cases, the dynamic

[14:01] <Geth> ¦ rakudo: optimzier will be able to remove a type check altogethr in some cases.

[14:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3ed2fbd550

[15:15] <nine> Oh, this is crazy. We can safe another 15ms with this added to src/core/IO/Handle.pm: my class buf8 does Buf[uint8] is repr('VMArray') { }

[15:16] <nine> Because it turns out, almost all of the time spent slurping a source file to calculate its checksum is wasted on punning the buf8 role.

[15:43] <nine> Oooh...a much less intrusive and therefor better way is to add a "buf8.new;" to Buf.pm. This way we create the punned version at compile time.

[16:15] <timotimo> nice.

[16:15] <Geth> ¦ rakudo: db1e067e3d | (Stefan Seifert)++ | src/core/Buf.pm

[16:15] <Geth> ¦ rakudo: Reduce startup overhead of file I/O and module loading a bit

[16:15] <Geth> ¦ rakudo:

[16:15] <Geth> ¦ rakudo: Punning the buf8 role costs a couple of milliseconds when loading modules.

[16:15] <Geth> ¦ rakudo: We can move this overhead to compile time of the setting instead.

[16:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/db1e067e3d

[16:28] <Geth> ¦ rakudo: a9a9e1c97e | (Stefan Seifert)++ | src/core/CompUnit/Repository/FileSystem.pm

[16:28] <Geth> ¦ rakudo: Safe another millisecond by avoiding .repo-chain

[16:28] <Geth> ¦ rakudo:

[16:28] <Geth> ¦ rakudo: We have better and faster ways to iterate of a linked list

[16:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a9a9e1c97e

[16:37] <nine> Why don't we initialize $*PERL when compiling the setting? Seems like it cannot change afterwards anyway as all its properties are determined at the time of the settings compilation

[17:07] <AlexDaniel> nine++ # awesome work

[17:36] <nine> Initializing $*PERL during setting compilation is harder than it sounds. But that's just because it throws some exception and I can't find a way to get at the message.

[17:36] <nine> "An exception occurred while evaluating a BEGIN" but which one?

[17:42] <mst> nine: apply time traveling debugger?

[23:36] <cygx> o/

[23:37] <cygx> nine: install-core-dist.pl fails with "No such method 'prefix' for invocant of type 'Str'" on my MinGW build

[23:37] <cygx> nine: could that be related to your recent commits?
