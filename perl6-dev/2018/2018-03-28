[00:22] <AlexDaniel`> I just stumbled upon this: https://raid6.com.au/~onlyjob/posts/arena/ (on perl5 subreddit)

[00:23] <AlexDaniel`> and here's my take on rewriting the perl5 solution in perl6: https://gist.github.com/AlexDaniel/baae3c4ffda55f9cca783f17aaab1f2b

[00:23] <AlexDaniel`> using `str` halves the run time, I wonder though if it affects anything else functionally

[00:24] <AlexDaniel`> first three lines for perl5: 0sec 2sec 6sec

[00:24] <AlexDaniel`> and using rakudo: 14sec 52sec 112sec

[00:25] <AlexDaniel`> better than python3???

[00:25] <AlexDaniel`> hold on…

[00:27] <AlexDaniel`> no, definitely not: 2sec 8sec 20sec

[00:27] <AlexDaniel`> anyway, maybe some optimization wizards want to take a look at this :)

[00:33] <japhb> Judging by the timestamps on the comments on that benchmark page, this was from 2011.  I suspect all the other languages (including python3) got faster in the interim.

[00:38] <timotimo> i do believe AlexDaniel knows to run these benchmarks on the same machine

[00:38] <timotimo> yeah, this runs for a couple of minutes ...

[00:39] <AlexDaniel`> I didn't even wait for it to finish

[00:40] <timotimo> 11sec 42sec 90sec 158sec 244sec 349sec 474sec

[00:40] <timotimo> m: say <11sec 42sec 90sec 158sec 244sec 349sec 474sec>.subst("sec", "")

[00:40] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «11 42sec 90sec 158sec 244sec 349sec 474sec␤»

[00:40] <timotimo> m: say <11sec 42sec 90sec 158sec 244sec 349sec 474sec>.subst(/sec/, "")

[00:40] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «11 42sec 90sec 158sec 244sec 349sec 474sec␤»

[00:40] <timotimo> mhh?

[00:40] <timotimo> m: say <11sec 42sec 90sec 158sec 244sec 349sec 474sec>.Str.subst(/sec/, "")

[00:40] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «11 42sec 90sec 158sec 244sec 349sec 474sec␤»

[00:40] <timotimo> oh, :g, yeah

[00:40] <timotimo> m: say <11sec 42sec 90sec 158sec 244sec 349sec 474sec>.Str.subst(/sec/, "", :g)

[00:40] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «11 42 90 158 244 349 474␤»

[00:41] <timotimo> m: say (<11sec 42sec 90sec 158sec 244sec 349sec 474sec>.Str.subst(/sec/, "", :g))>>.Int Z/ (256, 512 ... *)

[00:41] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «Cannot convert string to number: trailing characters after number in '0311⏏5 42 90 158 244 349 474' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[00:41] <timotimo> m: say (<11sec 42sec 90sec 158sec 244sec 349sec 474sec>.>>.subst(/sec/, "", :g))>>.Int Z/ (256, 512 ... *)

[00:41] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «(0.042969 0.082031 0.117188 0.154297 0.190625 0.227214 0.264509)␤»

[00:41] <timotimo> what's that, quadratic growth?

[00:42] <timotimo> m: say (<11sec 42sec 90sec 158sec 244sec 349sec 474sec>.>>.subst(/sec/, "", :g))>>.Int Z/ (256, 512 ... *) Z/ (1, 2, 3 ... *)

[00:42] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «(0.042969 0.041016 0.039063 0.038574 0.038125 0.037869 0.037787)␤»

[00:42] <timotimo> my brain definitely can't maths right now, but that looks linear?

[00:43] <AlexDaniel`> yea, it's aproximately linear

[00:43] * AlexDaniel` can't do spelling right now

[00:43] <timotimo> m: say (<11sec 42sec 90sec 158sec 244sec 349sec 474sec 616sec 776sec>.>>.subst(/sec/, "", :g))>>.Int Z/ (256, 512 ... *) Z/ (1, 2, 3 ... *)

[00:43] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «(0.042969 0.041016 0.039063 0.038574 0.038125 0.037869 0.037787 0.037598 0.037423)␤»

[00:52] <timotimo> this is taking looooong %)

[00:52] <timotimo> m: say (<11sec 42sec 90sec 158sec 244sec 349sec 474sec 616sec 776sec 955 1151>.>>.subst(/sec/, "", :g))>>.Int Z/ (256, 512 ... *) Z/ (1, 2, 3 ... *)

[00:52] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «(0.042969 0.041016 0.039063 0.038574 0.038125 0.037869 0.037787 0.037598 0.037423 0.037305 0.037158)␤»

[00:53] <timotimo> it's at like 5 gigs at the moment, 3072k so far

[00:54] <timotimo> *shrug* i restarted it for 1 meg %)

[00:58] <timotimo> SETTING::src/core/Str.pm6:1187 has the #1 spot, extremely closely followed by gen/moar/stage2/QRegex.nqp:1426 (!cursor_init

[00:59] <timotimo> ) and then SETTING::src/core/Str.pm6:1182

[00:59] <timotimo> the first two at 37.3% and 37.12% respectively, the third at 19.52%

[01:01] <timotimo> not sure why List.pm6's ACCEPTS is called as often as the other things

[01:02] <timotimo> and where does it get dispatch:<!>?

[01:02] <timotimo> ah, APPLY-MATCHES

[01:03] <timotimo> bedtime

[01:37] <japhb> timotimo: I wasn't assuming AlexDaniel` didn't know how to benchmark.  I was commenting that the original conclusions may be incorrect because relative values had changed (e.g. I doubt that perl5 still holds a clear win).  Badly worded, sorry about that.

[06:26] <samcv> i got to 2304kb and it was using about 12GB of ram (well i know my system was using 15/15.6GB of ram) so using at least 9GB

[08:25] <samcv> also i seem to be coming up with 36% of the cpu going to MVM's hashing function. but i'm not sure what would be hashing that often

[08:25] <lizmat> Files=1237, Tests=76255, 308 wallclock secs (14.69 usr  5.30 sys + 2120.90 cusr 204.81 csys = 2345.70 CPU)

[08:25] <samcv> i'm guessing it must be the changing string or something else?

[08:26] <samcv> not sure why this is using hashes https://gist.githubusercontent.com/AlexDaniel/baae3c4ffda55f9cca783f17aaab1f2b/raw/7ad63a91b7fd2f87d4e9ecd1cb69284b8fe3a178/foo.p6

[08:31] <samcv> or maybe i'm reading it wrong. trying a new gui

[08:49] <samcv> and weirder it seems to show that collapse_strands is calling MVM_string_compute_hash??

[08:50] <samcv> https://i.imgur.com/cPLsGgC.png

[08:51] <lizmat> that feels weird

[08:52] <samcv> i'm using perf record -g --call-graph dwarf

[09:14] <Geth> ¦ rakudo: 5bab5865c9 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm6

[09:14] <Geth> ¦ rakudo: Streamline queue selection logic

[09:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5bab5865c9

[09:15] <samcv> lizmat: i seem to have gotten it working. going to try and see what change i made fixed it

[09:15] <lizmat> cool!  samcv++

[09:32] <Geth> ¦ rakudo: 8e2ee64e48 | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[09:32] <Geth> ¦ rakudo: Streamline Hash.BIND-KEY a bit

[09:32] <Geth> ¦ rakudo:

[09:32] <Geth> ¦ rakudo: Both normal and object hashes

[09:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8e2ee64e48

[09:34] <samcv> lizmat: i needed the -a option --all-cpus

[09:38] <samcv> the hash function is still 6% cpu hmm. but i will focus on other things

[09:38] <lizmat> I guess the question is really: why ? right?

[09:39] <samcv> yeah

[09:51] <timotimo> on my end it's 72.5% iterate_gi_into_string and 18.95% copy_to_32bit

[10:03] <samcv> timotimo: what compiler and options

[10:04] <samcv> timotimo: also i am only running it a short period of time. maybe it changes the longer it goes

[10:04] <timotimo> just the regular --optimize=3 --debug=3

[10:04] <samcv> and gcc?

[10:05] <|Tux|> Rakudo version 2018.03-110-g8e2ee64e4 - MoarVM version 2018.03-31-gfdb5e4d6b

[10:05] <|Tux|> csv-test-xs-20      0.479 -  0.508

[10:05] <samcv> timotimo: and how long were you running it?

[10:05] <timotimo> yes

[10:05] <|Tux|> csv-ip5xs           0.891 -  0.922

[10:05] <timotimo> up to 1 meg

[10:05] <|Tux|> test-t --race       1.018 -  1.056

[10:05] <|Tux|> test-t              2.484 -  2.597

[10:05] <|Tux|> csv-ip5xs-20        8.820 -  8.911

[10:05] <|Tux|> test                9.036 -  9.119

[10:05] <|Tux|> test-t-20 --race   14.729 - 16.729

[10:05] <|Tux|> csv-parser         36.607 - 37.247

[10:05] <|Tux|> test-t-20          43.574 - 44.007

[10:05] <|Tux|> that is a wide gap today between the two runs

[10:07] <timotimo> samcv: this copy_to_32bit part is the piece extracted from string_join, fwiw

[10:07] <samcv> yeah

[10:07] <samcv> i got a lot of that too

[10:07] <samcv> it just ends up copying the string around all day long

[10:08] <timotimo> btw, we call string_indexing_optimized a bunch, because this uses regex

[10:08] <timotimo> so whatever benefit we have from ropes gets flushed down the drain :)

[10:11] <timotimo> i'm not entirely sure why we'd build a 32bit grapheme string here, all that's in there is letters a through h and _

[10:12] <samcv> well join calls it

[10:12] <samcv> err the copying as well

[10:12] <samcv> well join only builds 32 bit strings if it iterates it. and it does that unless all of the pieces are strands already and under a certain amount

[10:13] <samcv> of strands and over an average number of graphemes per strand

[10:13] <samcv> and i'm guessing they may not all be strands

[10:13] <samcv> i had thought about fixing that so it would compose strands, but that was gonna be a lot of work

[10:14] <timotimo> it'd be a benefit already if it made 8bit grapheme strings instead, wouldn't it?

[10:14] <samcv> yeah

[10:14] <samcv> that's faster

[10:17] <AlexDaniel> fwiw you can also try running it without nativestrs

[10:18] <AlexDaniel> to see what changes

[10:18] <AlexDaniel> (it's twice slower this way though)

[10:18] <timotimo> the only difference is that non-nativestr will create an extra Str object to contain the underlying string

[10:31] <samcv> AlexDaniel: that's not going to help. i just tested

[10:31] <samcv> all of the join's involve sections which have a 32 bit section

[10:32] <samcv> well practically all after after initialization

[10:32] <samcv> well literally all after the first few moments

[10:33] <timotimo> OK, what gives us the 32bit part that infects everything?

[10:33] <samcv> no clue. but changing that won't make it tons faster anyway

[10:34] <samcv> maybe 25% less cpu in the sections where we iterate it. but doesn't solve the underlying issue

[10:34] <Geth> ¦ rakudo: 29b7f464e6 | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[10:34] <Geth> ¦ rakudo: Don't use private method for AT-KEY-CONTAINER

[10:34] <Geth> ¦ rakudo:

[10:34] <Geth> ¦ rakudo: - avoid the runtime lookup of dispatch:<!>

[10:34] <Geth> ¦ rakudo: - rename it to AT_KEY_CONTAINER to mark its privateness

[10:34] <Geth> ¦ rakudo: - should improve some Hash heavy applications

[10:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/29b7f464e6

[10:36] <jnthn> Hm, does that really involve runtime lookup?

[10:36] <jnthn> I know private method calls in roles can, but that's entirely within the class...

[10:36] <lizmat> ok, lemme double check that then

[10:37] <samcv> what i need to do is have it concat instead of iterating every single time. so it can concat strings of different types

[10:38] <samcv> i'll work on that tomorrow

[10:43] <lizmat> m: class A { method a() { self.b }; method b {} }; A.a for ^10000000; say now - INIT now

[10:43] <camelia> rakudo-moar 8e2ee64e4: OUTPUT: «0.78767999␤»

[10:43] <lizmat> m: class A { method a() { self!b }; method !b {} }; A.a for ^10000000; say now - INIT now

[10:43] <camelia> rakudo-moar 8e2ee64e4: OUTPUT: «0.84327224␤»

[10:43] <lizmat> there *is* a difference still

[10:46] <lizmat> m: class A { method a() { self.b }; method b {} }; A.a for ^10000000; say now - INIT now

[10:46] <camelia> rakudo-moar 8e2ee64e4: OUTPUT: «0.7832884␤»

[10:46] <lizmat> m: class A { method a() { self!b }; method !b {} }; A.a for ^10000000; say now - INIT now

[10:46] <camelia> rakudo-moar 8e2ee64e4: OUTPUT: «0.8091301␤»

[10:47] <lizmat> must be something at nqp level, as the --profile output are identical

[10:48] <jnthn> Pretty close, but yeah, small difference. I wonder why.

[11:10] <dogbert2> jnthn: I get the following message when running AlexDaniel's Cro+Digest::SHA256 SEGV example on a 32-bit box

[11:10] <dogbert2> Cannot locate symbol 'SSL_CTX_set_alpn_protos' in native library 'libssl.so'

[11:11] <dogbert2> does that mean that my ssllibs are too old or is there another problem here?

[11:12] <dogbert2> i.e. this code https://github.com/rakudo/rakudo/issues/1660

[11:14] <jnthn> Yes, though we try to support pre-ALPN versions too

[11:14] <jnthn> But perhaps missed a check somewhere

[11:16] <dogbert2> jnthn: https://gist.github.com/dogbert17/6648129d5c91119da1af876d6a0cb755

[11:17] <dogbert2> perhaps that gives a clue. let me know if you want it reported somewhere

[11:40] <timotimo> samcv: but every time around the loop it does a regex match, which forces strand collapse

[11:42] <samcv> timotimo: yes that is true. but still a lot of cpu usage also relates to join as well. not saying what you are mentioning doesn't factor in

[11:46] <timotimo> OK

[11:47] <samcv> if i don't collapse strands it takes 19.8 seconds to get to 256kb

[11:47] <timotimo> and if you do?

[11:47] <timotimo> i get to 256 in 11s, so it doesn't compare :S

[11:49] <samcv> 12 seconds

[11:49] <timotimo> oh, huh, so collapsing strands here is worth a lot

[11:49] <samcv> also it's always collapsing strands of length 2

[11:50] <timotimo> it's forced to collapse them very soon, right?

[11:50] <timotimo> so there's not too much we can do

[11:50] <samcv> no that's with it disabled

[11:50] <samcv> or enabled

[11:50] <timotimo> oh, huh?

[11:50] <samcv> it flattens inside join i'm guessing

[11:50] <samcv> then concats

[11:50] <samcv> then flattens

[11:50] <samcv> something like that not 100% sure

[11:51] <samcv> but if i make collapse_strands just return the string unchanged and print out the number of strands it started with. it's always 2

[11:51] <samcv> except for the very beginning

[11:51] <samcv> if i enable collapse_strands it's still 2

[11:57] <samcv> 32bit ~ 8bit it seems like. well the first strand is 32 bit and the second is 8 bit in collapse_strands

[12:47] <Geth> ¦ rakudo: 1fff4f106a | (Zoffix Znet)++ | .gitignore

[12:47] <Geth> ¦ rakudo: Ignore gen/nqp-version file

[12:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1fff4f106a

[12:48] <nine> Zoffix: why don't we ignore the whole gen directory? We ignore src/gen so it looks like when gen was moved out of src, we just didn't update .gitignore

[12:48] <yoleaux> 27 Mar 2018 14:54Z <ggoebel> nine: how to get the output of a command when using nmake... (https://stackoverflow.com/questions/4883021/how-to-get-the-output-of-a-command-when-using-microsoft-nmake)

[12:48] <yoleaux> 27 Mar 2018 22:54Z <Zoffix> nine: would you be able to take a look at this Issue? Does the path it's trying to slurp look right? with the "perl#sources" stuff in it? https://github.com/rakudo/rakudo/issues/1662

[12:50] <Geth> ¦ rakudo: 68a576e62e | (Zoffix Znet)++ | .gitignore

[12:50] <Geth> ¦ rakudo: Ignore whole /gen

[12:50] <Geth> ¦ rakudo:

[12:50] <Geth> ¦ rakudo: https://irclog.perlgeek.de/perl6-dev/2018-03-28#i_15975687

[12:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/68a576e62e

[12:58] <Zoffix> FWIW, got a hang on (what looks like) t/spec/S17-supply/syntax.t while stresstesting

[13:01] <Zoffix> second run got through OK..

[13:01] <Zoffix> ZOFVM: Files=1279, Tests=153178, 147 wallclock secs (21.29 usr  3.27 sys + 3140.29 cusr 161.46 csys = 3326.31 CPU)

[13:04] <Zoffix> hm, that time is skewed, I didn't have Inline::Perl5 installed

[13:07] <Zoffix> ran t/spec/S17-supply/syntax.t a few times, no hangs

[13:07] <Zoffix> ZOFVM: Files=1292, Tests=153265, 147 wallclock secs (20.98 usr  3.30 sys + 3160.78 cusr 161.99 csys = 3347.05 CPU)

[13:09] <AlexDaniel> it did hang for me previously I think

[13:09] <AlexDaniel> there was this one file that did that… I think this was it

[13:09] <AlexDaniel> I wonder if we have a ticket for it already

[13:10] <AlexDaniel> o no it was t/spec/S07-hyperrace/basics.t

[13:10] <AlexDaniel> R#1529

[13:10] <synopsebot> R#1529 [open]: https://github.com/rakudo/rakudo/issues/1529 [severe] Spectest sometimes gets stuck on t/spec/S07-hyperrace/basics.t

[13:15] <Geth> ¦ rakudo/fails-like: 4abfd4ca5e | (Zoffix Znet)++ | 2 files

[13:15] <Geth> ¦ rakudo/fails-like: Implement fails-like routine in Test.pm6

[13:15] <Geth> ¦ rakudo/fails-like:

[13:15] <Geth> ¦ rakudo/fails-like: Same as throws-like, except checks the code returns an armed Failure.

[13:15] <Geth> ¦ rakudo/fails-like:

[13:15] <Geth> ¦ rakudo/fails-like: Failures are a ubiquitous feature of the language, yet there's no

[13:15] <Geth> ¦ rakudo/fails-like: convenient way to test for them:

[13:15] <Geth> ¦ rakudo/fails-like:

[13:15] <Geth> ¦ rakudo/fails-like: <…commit message has 8 more lines…>

[13:15] <Geth> ¦ rakudo/fails-like: review: https://github.com/rakudo/rakudo/commit/4abfd4ca5e

[13:15] <Geth> ¦ rakudo: zoffixznet++ created pull request #1664: Implement fails-like routine in Test.pm6

[13:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1664

[13:16] <samcv> timotimo: super interesting. so it tries to concat a very long 32 bit string and a short 8 bit string. if i do the slow iterating method it creates one long 8 bit string

[13:16] <samcv> and it basically takes away taking all the time iterating and copying it it away. but instead the time it takes for string indexing is much longer

[13:16] <Geth> ¦ roast/fails-like: 230a2aa19c | (Zoffix Znet)++ | 2 files

[13:16] <Geth> ¦ roast/fails-like: Spec fails-like and swap to core fails-like for tests that use it

[13:16] <Geth> ¦ roast/fails-like:

[13:16] <Geth> ¦ roast/fails-like: To go with https://github.com/rakudo/rakudo/pull/1664

[13:16] <Geth> ¦ roast/fails-like: review: https://github.com/perl6/roast/commit/230a2aa19c

[13:17] <Geth> ¦ roast: zoffixznet++ created pull request #408: Spec fails-like and swap to core fails-like for tests that use it

[13:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/408

[13:18] <samcv> it went from iterate_gi_into_string taking 55% of cycles to KMP_string_index taking 30% of all cycles

[13:19] <samcv> and taking longer

[13:19] <samcv> from 11s to 13s

[13:19] <samcv> i'll investigate more tomorrow

[13:19] <samcv> night o/

[13:22] <samcv> AH ok guess to throw out there. is that it's not using memmem() anymore since needle and haystack don't have matching flat data types anymore if i return the 32 bit string

[13:22] <samcv> and and doing grapheme based KMP is much slower than memmem

[13:22] <samcv> ok actually sleep now :)

[13:24] <AlexDaniel> samcv++

[13:34] <timotimo> aha, ouch :)

[14:01] <dogbert2> timotimo: are there still problems with the profiler?

[14:04] <timotimo> yep!

[14:05] <timotimo> there is basically every problem ever

[14:05] <dogbert2> I have more examples if needed, e.g. large files, MoarVM panics etc

[14:07] <dogbert2> it strikes me that you haven't merged your fixes so ignore my comments for the time being :)

[14:07] <timotimo> yes, it's not actually correct yet

[14:16] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make affinity-threshold calculation simpler

[14:16] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/359087133 https://github.com/rakudo/rakudo/compare/637147af410e...04014cf67d89

[14:51] <Geth> ¦ rakudo: 4abfd4ca5e | (Zoffix Znet)++ | 2 files

[14:51] <Geth> ¦ rakudo: Implement fails-like routine in Test.pm6

[14:52] <Geth> ¦ rakudo:

[14:52] <Geth> ¦ rakudo: Same as throws-like, except checks the code returns an armed Failure.

[14:52] <Geth> ¦ rakudo:

[14:52] <Geth> ¦ rakudo: Failures are a ubiquitous feature of the language, yet there's no

[14:52] <Geth> ¦ rakudo: convenient way to test for them:

[14:52] <Geth> ¦ rakudo:

[14:52] <Geth> ¦ rakudo: <…commit message has 8 more lines…>

[14:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4abfd4ca5e

[14:52] <Geth> ¦ rakudo: 82a0e70653 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files

[14:52] <Geth> ¦ rakudo: Merge pull request #1664 from rakudo/fails-like

[14:52] <Geth> ¦ rakudo:

[14:52] <Geth> ¦ rakudo: Implement fails-like routine in Test.pm6

[14:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/82a0e70653

[14:52] <Geth> ¦ roast: 230a2aa19c | (Zoffix Znet)++ | 2 files

[14:52] <Geth> ¦ roast: Spec fails-like and swap to core fails-like for tests that use it

[14:52] <Geth> ¦ roast:

[14:52] <Geth> ¦ roast: To go with https://github.com/rakudo/rakudo/pull/1664

[14:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/230a2aa19c

[14:52] <Geth> ¦ roast: 220c805fbc | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files

[14:52] <Geth> ¦ roast: Merge pull request #408 from perl6/fails-like

[14:52] <Geth> ¦ roast:

[14:52] <Geth> ¦ roast: Spec fails-like and swap to core fails-like for tests that use it

[14:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/220c805fbc

[15:08] <Geth> ¦ rakudo: a0e5e88058 | (Elizabeth Mattijsen)++ | src/core/Array.pm6

[15:08] <Geth> ¦ rakudo: Implement Array.grab, as discussed in GH R#1658

[15:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a0e5e88058

[15:08] <synopsebot> R#1658 [open]: https://github.com/rakudo/rakudo/issues/1658 [@LARRY][NYI] Why do Array / Hash not have .grab like QuantHashes do?

[15:11] <japhb> .oO( Why do butterflies suddenly appear, / Every time you are near? / Just like me, they long to be / Coding with you ... )

[15:11] <lizmat> :-)

[15:53] <Geth> ¦ rakudo: ce82292562 | (Elizabeth Mattijsen)++ | src/core/Array.pm6

[15:53] <Geth> ¦ rakudo: Remove some leftover code

[15:53] <Geth> ¦ rakudo:

[15:53] <Geth> ¦ rakudo: Since we abstracted the grabbing logic to GRAB_ONE, we don't need to

[15:53] <Geth> ¦ rakudo: keep the number of elements anymore.

[15:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ce82292562

[16:26] <Zoffix> Looks like private methods can be boosted by figuring out whether we can do nqp::callstatic instead of just nqp::call them after resolving at compiletime.

[16:27] <Zoffix> Though I still don't fully get when callstatic is appropriate. There'll only ever be one closure clone, but not sure what the implications of that are.

[16:28] <Zoffix> like what does a closure clone do exactly and what happens if you don't clone it

[16:30] <Zoffix> The current choice for staticalizing a call is done with `my $scopes := $!symbols.scopes_in($call.name);` and checking if scopes is <= 1. But if I ain't got a name, does that mean I can always staticalize or never?

[16:36] <Zoffix> Based on what I'm reading here, it should be fine to nqp::callstatic a looked up private method: https://irclog.perlgeek.de/perl6-dev/2018-02-22#i_15846449

[16:37] <Zoffix> oh or not

[16:37] <Zoffix> for ^5 -> $i { sub foo() { say $i }; foo() }     =>   with class Foo { my $x = 42; method !z { say $x }; method z { self!z }; method mod { $x = 100 }; }.new { .z; .mod; .z };

[16:37] <Zoffix> Same thing right? To correctly do !z call we need to resolve the things and the $x thing, eh?

[16:44] <Zoffix> seems to update just fine if I make it static.

[16:46] <Zoffix> And makes private method calls 11% *faster* than public ones.

[16:49] * Zoffix waits for jnthn to say that it can't be callstatic :D

[16:49] <Zoffix> ZOFVM Files=1292, Tests=153265, 146 wallclock secs (20.21 usr  3.11 sys + 3111.76 cusr 155.04 csys = 3290.12 CPU)

[16:49] <Zoffix> At least stresstest is clean

[16:52] <Geth> ¦ rakudo/static-privates: 1b4bb402a0 | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[16:52] <Geth> ¦ rakudo/static-privates: Make resolved private method calls callstatic

[16:52] <Geth> ¦ rakudo/static-privates: review: https://github.com/rakudo/rakudo/commit/1b4bb402a0

[16:53] <Geth> ¦ rakudo: zoffixznet++ created pull request #1665: Make resolved private method calls callstatic

[16:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1665

[16:56] <lizmat> Zoffix++  :-)

[16:57] <Zoffix> Well, I don't know if it's good. Gonna wait for jnthn to review :)

[16:57] <lizmat> well, ++ for the work you've put into it either way  :-)

[16:57] <Zoffix> :)

[17:04] <Zoffix> OK, now I'm more confident that it's OK, 'cause QASTs for `my $i; sub bar { $i = $++; }; sub foo() { say $i }; for ^10 { foo; bar }` use static calls in the loop, so I guess the specialness of `for ^5 -> $i { sub foo() { say $i }; foo() }` isn't that `$i` is getting updated, but that the loop "creates" the sub each time. And since classes ain't closures, there's no new method created each time.

[17:05] <lizmat> such a simple change  :-)

[17:06] <lizmat> perhaps jnthn thought it was already done long ago

[19:46] <lizmat> Zoffix: confirm that https://github.com/rakudo/rakudo/pull/1665 makes the difference between public / private methods go to within noise

[19:46] <lizmat> with what looks like a small preference for private

[19:47] <lizmat> --profiles don't see a difference

[20:20] <bartolin> hmm, the rakudo-j is broken and I'm unable to fix it. On the surface the build fails because the api for getrusage has been changed. But if I adjust that op to take an array, a bigger problem surfaces: Creating @rusage as a native array doesn't work -- it's the same problem that made this workaround necessary: https://github.com/rakudo/rakudo/commit/581edd58e9

[20:22] <timotimo> oh, that's my fault :o

[20:22] <bartolin> a similiar workaround should be possible by adding some more '#if jvm' statments, though

[20:22] <timotimo> yes, indeed

[20:22] <bartolin> well, it was an improvement for MoarVM ...

[20:23] <timotimo> :S

[20:23] <bartolin> should I try to add another special case for JVM there?

[20:23] <timotimo> yes, please

[20:24] <bartolin> ok, will look. (at a first glance I thought a lot of code expected @rusage to be a native array there, but it's not that much code, actually)

[20:39] <Geth> ¦ rakudo: a393ff6916 | (Elizabeth Mattijsen)++ | 2 files

[20:39] <Geth> ¦ rakudo: Implement (native array).grab, see GH R#1658

[20:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a393ff6916

[20:39] <synopsebot> R#1658 [open]: https://github.com/rakudo/rakudo/issues/1658 [@LARRY][NYI][testneeded] Why do Array / Hash not have .grab like QuantHashes do?

[21:31] <Geth> ¦ rakudo: f97398cfb8 | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp

[21:31] <Geth> ¦ rakudo: Make sure that values of `once` blocks are deconted

[21:31] <Geth> ¦ rakudo:

[21:31] <Geth> ¦ rakudo: Fixes GH R#1610

[21:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f97398cfb8

[21:31] <synopsebot> R#1610 [open]: https://github.com/rakudo/rakudo/issues/1610 `once` places the return value into unwanted Scalar container

[21:38] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Streamline Hash.BIND-KEY a bit

[21:38] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/359279857 https://github.com/rakudo/rakudo/compare/5bab5865c944...8e2ee64e48fe

[21:38] <buggable> [travis build above] ✓ All failures are due to: missing build log (1 failure).

[21:42] <Geth> ¦ nqp: jstuder-gh++ created pull request #433: Profiler Template: Sort by time Instead of Pct

[21:42] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/433

[21:56] <Geth> ¦ rakudo: 88d61bd945 | (Elizabeth Mattijsen)++ | 2 files

[21:56] <Geth> ¦ rakudo: Move proto method splice: Mu -> Any

[21:56] <Geth> ¦ rakudo:

[21:56] <Geth> ¦ rakudo: As discussed in GH R#1575

[21:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/88d61bd945

[21:56] <synopsebot> R#1575 [open]: https://github.com/rakudo/rakudo/issues/1575 [6.d][@LARRY] Arbitrary drift of methods to `Mu` and `Any`

[22:00] <Geth> ¦ nqp: 0736a0c405 | usev6++ | 2 files

[22:00] <Geth> ¦ nqp: [JVM] Adjust 'getrusage' to fix rakudo build

[22:00] <Geth> ¦ nqp:

[22:00] <Geth> ¦ nqp: The api for getrusage has been changed -- it takes an argument now.[1]

[22:00] <Geth> ¦ nqp:

[22:00] <Geth> ¦ nqp: Also, this commit adds a workaround for non-working native arrays

[22:00] <Geth> ¦ nqp: in Rakudo's ThreadPoolScheduler.[2] Declaring @rusage as a native int

[22:00] <Geth> ¦ nqp: array comes out as a VMArrayInstance_i instead of a VMArrayInstance.

[22:00] <Geth> ¦ nqp: This really needs a clean fix, but I was unable to do that.

[22:00] <Geth> ¦ nqp:

[22:00] <Geth> ¦ nqp: [1] https://github.com/rakudo/rakudo/commit/c71fa17d8d

[22:00] <Geth> ¦ nqp: [2] https://github.com/rakudo/rakudo/issues/1666

[22:00] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0736a0c405

[22:03] <Geth> ¦ rakudo: aaacc5a453 | usev6++ | src/core/ThreadPoolScheduler.pm6

[22:03] <Geth> ¦ rakudo: [JVM] Work around problem with native arrays

[22:03] <Geth> ¦ rakudo:

[22:03] <Geth> ¦ rakudo: See https://github.com/rakudo/rakudo/issues/1666

[22:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/aaacc5a453

[22:04] <lizmat> bartolin++

[22:04] <bartolin> ^^ I didn't see a better way to fix the JVM build. Please revert if this is to hacky.

[22:06] <timotimo> thank you for fixing up my mess

[22:07] <bartolin> yw :-)

[22:10] <bartolin> btw, I didn't run a spectest on r-j with those changes (only on r-m). But at least S17-scheduler/basic.t came out clean. I'm waiting for my nightly spectest run ...

[22:12] * lizmat calls it a day

[22:13] <bartolin> o/

[22:28] <samcv> AlexDaniel`: haven't fixed the collapse_strings overhead in that file. but i got this string test i made a while ago complete 25% faster https://gist.github.com/samcv/5c5c9916d42eca70ae87af87a5dfe9cd

[22:28] <Geth> ¦ roast: 4c1a52d755 | (Zoffix Znet)++ | S02-types/num.t

[22:28] <Geth> ¦ roast: Fix wrong var in test; edwinst++

[22:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4c1a52d755

[22:28] <samcv> basically if the haystack is a flat string, and the needle is under 100 graphemes, we convert the needle to be the same string type as the haystack

[22:29] <samcv> if it's an 8bit haystack and a 32 bit needle. we also bail if we encounter a non8bit grapheme. though that part isn't tested in that test file

[22:47] <MasterDuke> samcv: any idea why that other file is creating 32bit strings in the first place?

[22:48] <samcv> it's not. it's just concatting an 8 bit string with a 32 bit string

[22:48] <samcv> though i guess you could ask why the thing you're concatting on is 32 bit (the short section)

[22:48] <samcv> but the real slowdown comes from the flattening. but i'm going to work on that after this

[22:50] <samcv> at least i think. maybe i'm misremembering if the longer section was 32 bit or not

[22:50] <MasterDuke> well yeah, why is any section 32bit

[22:51] <samcv> though to be honest i'm much less worried about that. since in real use we get an assortment of strings

[22:51] <samcv> so we should be able to deal either way

[22:51] <MasterDuke> true. but you have an idea how to  speed up flattening?

[22:52] <samcv> yeah

[22:52] <MasterDuke> nice

[22:53] <samcv> pretty happy with the changes i'm making right now though. should speed things up a huge amount with regex

[22:53] <samcv> since most of the time we don't have matching needles

[22:53] <samcv> and haystacks if they're both flat that is

[22:54] <samcv> or flat haystack (since indexingoptimized) but needle isn't. and it's pretty neat that it will bail if it encounters a 32 bit grapheme in the needle and the haystack is 8 (before even doing the memmem)

[23:27] <samcv> wow. crazy. looks like there's a bug in a section of code i could never trigger. at least i'm pretty sure. so memmem works on 8 bit boundaries but when we search 32 bit strings it checks and makes sure we are on a 32 bit boundary and not an 8 bit one. and i never could get that to trigger

[23:28] <samcv> but with these changes of converting the needle, it got triggered and entered an infinite loop. because it places the start position back at the last position (instead of one byte AFTER the last position)

[23:32] <MasterDuke> so the new code will be faster and more correct? sounds like a win all around

[23:37] <samcv> i'm suprised yet relieved that it triggered at the same time

[23:39] <samcv> now i want to print out the two strings that triggered it

[23:43] <samcv> wow ok that makes sense. the needle is \0 :D

[23:45] <samcv> that was one thing i most suspected could happen, but i never triggered it. probably because \0 would always be 8bit and for a 32 bit haystack it never triggers

[23:45] <samcv> that makes me feel a lot better than it's unlikely anyone has ever triggered it themselves

[23:45] <samcv> only if they had somehow made a 32bit based "\0"

[23:45] <samcv> which i never could do

[23:51] <samcv> m: "67 55 49 50 70 69 54 57 54 57 70 55 56 54 67 57 51 56 48 68 54 52 51 68 70 49 55 69 56 53 68 48 54 56 54 56 50 49 57 69 0 112 101 114 108 35 115 111 117 114 99 101 115 47 67 55 49 50 70 69 54 57 54 57 70 55 56 54 67 57 51 56 48 68 54 52 51 68 70 49 55 69 56 53 68 48 54 56 54 56 50 49 57 69 0 49 57 68 50 68 48 56 67 48 51 50 69 54 57 66 55 56 57 57 51 69 57 56 65 53 65 48 69 57 66 68 69 51 52 67 66 54 57 54 52 0 67 111 109 112 85 110 105 116 58

[23:51] <samcv> 58 68 101 112 101 110 100 101 110 99 121 83 112 101 99 105 102 105 99 97 116 105 111 110 46 110 101 119 40 115 104 111 114 116 45 110 97 109 101 32 61 62 32 34 84 101 115 116 34 44 32 115 111 117 114 99 101 45 108 105 110 101 45 110 117 109 98 101 114 32 61 62 32 50 44 32 102 114 111 109 32 61 62 32 34 80 101 114 108 54 34 44 32 118 101 114 115 105 111 110 45 109 97 116 99 104 101 114 32 61 62 32 66 111 111 108 58 58 84 114 117 101 44 32 97 117

[23:51] <samcv> 116 104 45 109 97 116 99 104 101 114 32 61 62 32 66 111 111 108 58 58 84 114 117 101 44 32 97 112 105 45 109 97 116 99 104 101 114 32 61 62 32 66 111 111 108 58 58 84 114 117 101 41".split(' ').chrs.index("\0").say

[23:51] <camelia> rakudo-moar aaacc5a45: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)␤at <tmp>:1␤------> 0354 52 0 67 111 109 112 85 110 105 116 587⏏5<EOL>␤    expecting…»

[23:51] <samcv> oops...

[23:52] <samcv> m:  "67 55 49 50 70 69 54 57 54 57 70 55 56 54 67 57 51 56 48 68 54 52 51 68 70 49 55 69 56 53 68 48 54 56 54 56 50 49 57 69 0 112 101 114 108 35 115 111 117 114 99 101 115 47 67 55 49 50 70 69 54 57 54 57 70 55 56 54 67 57 51 56 48 68 54 52 51 68 70 49 55 69 56 53 68 48 54 56 54 56 50 49 57 69 0 49 57 68 50 68 ".split(' ').chrs.index("\0").say

[23:52] <camelia> rakudo-moar aaacc5a45: OUTPUT: «40␤»
