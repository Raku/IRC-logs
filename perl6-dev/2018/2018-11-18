[00:18] *** MasterDuke joined
[00:18] *** p6bannerbot sets mode: +v MasterDuke

[00:18] *** MasterDuke left
[00:18] *** MasterDuke joined
[00:18] *** herbert.freenode.net sets mode: +v MasterDuke

[00:18] *** p6bannerbot sets mode: +v MasterDuke

[01:24] *** SourceBaby left
[02:37] *** evalable6 left
[02:39] *** evalable6 joined
[02:39] *** ChanServ sets mode: +v evalable6

[02:39] *** p6bannerbot sets mode: +v evalable6

[07:42] *** lizmat left
[09:57] <AlexDaniel> timotimo: hmm, Geth?

[09:57] <AlexDaniel> and hack?

[10:06] *** robertle left
[10:29] *** dalek joined
[10:29] *** ChanServ sets mode: +v dalek

[10:29] *** p6lert left
[10:29] *** synopsebot_ joined
[10:29] *** Geth joined
[10:29] *** ChanServ sets mode: +v synopsebot_

[10:29] *** ChanServ sets mode: +v Geth

[10:29] *** p6lert joined
[10:29] *** synopsebot left
[10:29] <timotimo> sorry, i somehow managed to not "get it" that "geth is down" means "hack might need restarted"

[10:29] *** p6bannerbot sets mode: +v dalek

[10:30] *** p6bannerbot sets mode: +v synopsebot_

[10:30] *** p6bannerbot sets mode: +v Geth

[10:30] *** p6bannerbot sets mode: +v p6lert

[10:38] <AlexDaniel> timotimo: can we figure out why it happens?

[10:40] <timotimo> probably, with a bit of work

[11:16] <timotimo> the first step might be to ensure we have a working shell on the vm even when the disk has disappeared, for example by leaving a root shell open (sounds like a great idea!) logged into a statically compiled busybox that's been loaded into memory completely

[11:16] <timotimo> that way we'd be able to poke around in /sys and /proc and such

[11:39] *** lizmat joined
[11:39] *** p6bannerbot sets mode: +v lizmat

[11:40] <nine> Where does hack send its logs to?

[11:48] *** [Tux] left
[11:50] <timotimo> i don't know

[11:50] <timotimo> and i'm not entirely sure how to find out :)

[11:54] <timotimo> hm. an rsyslog daemon is running, but /var/spool/rsyslog is empty, so it's probably not going there

[11:58] <timotimo> oh, maybe the logs actually go to www.p6c.org

[11:58] <timotimo> at least there's an entry in /etc/rsyslog.d/remote_www.p6c.org.conf on hack

[12:00] <timotimo> yeah, they live in /var/log/hack.p6c.org/

[12:01] *** [Tux] joined
[12:02] <timotimo> it doesn't seem like the logging actually reaches www, though

[12:02] *** p6bannerbot sets mode: +v [Tux]

[12:03] <timotimo> i wonder if rsyslogd on hack dies from lack of disk and doesn't continue with the next output, so before it can send logs it waits forever for some disk access to finish

[12:05] <nine> Sounds reasonable. Is it possible to switch the outputs?

[12:08] <timotimo> surely

[12:11] <timotimo> hm

[12:11] <timotimo> the include directive is in front of the rules that split the log messages into different files

[12:12] <timotimo> but i don't know if it's "ordered"

[12:16] <nine> Wait, does it log anything at all to www?

[12:16] <timotimo> yes

[12:16] <nine> Ok, so we're really just missing the interesting log entries

[12:16] <timotimo> i think so

[12:16] <timotimo> or perhaps those aren't even reaching rsyslog

[12:16] <timotimo> no clue, tbh

[12:18] <nine> Is rsyslogd the only loggin daemon or is journald involved, too?

[12:18] <timotimo> i believe journald also runs, yeah

[12:18] <timotimo> it gets kernel messages

[12:19] <timotimo> ah, and a bunch of other stuff, too

[12:19] <timotimo> looks like everything

[12:19] <nine> Maybe using systemd-journal-remote is more reliable?

[12:19] <timotimo> perhaps rsyslogd gets its data from journalctl?

[12:19] <timotimo> could be. do you want to set it up? :)

[12:25] <nine> Nice. The journal supports both push and pull

[12:28] <nine> But hack is a debian system and I don't have sudo rights and this apt stuff looks much more complicated than zypper

[12:31] <timotimo> heh.

[12:32] <timotimo> i'm lots distracted ATM

[12:32] <nine> Btw. looks like I actually don't need $*MAST_FRAME at all. I can put it into an attribute in QASTCompilerMAST just as easily.

[12:33] <timotimo> oh!

[12:33] <timotimo> that should give another percent or two

[13:00] *** pmurias joined
[13:00] *** p6bannerbot sets mode: +v pmurias

[13:26] *** MasterDuke left
[14:06] *** dogbert2_ left
[14:09] *** patrickb joined
[14:10] *** p6bannerbot sets mode: +v patrickb

[14:25] <nine> timotimo: 1-2 % was a really good guess

[14:27] <timotimo> damn

[15:00] <nine> I wonder if it'd be faster to use integer constants instead of string literals in compile_var

[15:02] *** lizmat left
[15:05] <timotimo> nqp isn't very good at constants, but you should try it anyway

[15:06] *** Kaiepi left
[15:07] *** Kaiepi joined
[15:07] *** p6bannerbot sets mode: +v Kaiepi

[15:14] *** lizmat joined
[15:14] *** p6bannerbot sets mode: +v lizmat

[15:18] *** lizmat left
[15:21] *** patrickz joined
[15:22] *** p6bannerbot sets mode: +v patrickz

[15:25] *** patrickb left
[15:31] <nine> Maybe. But a closer look at fresh_register yielded about the same speedup as all my other efforts today ;)

[15:33] <timotimo> you mean you just doubled your improvements for the day?

[15:34] *** lucasb joined
[15:34] <nine> Sounds much better :)

[15:35] *** p6bannerbot sets mode: +v lucasb

[15:39] <lucasb> m: dd ([slip,slip],[Slip,Slip])

[15:39] <camelia> rakudo-moar 50f2207bb: OUTPUT: «([], [Slip, Slip])␤»

[15:39] <lucasb> Shouldn't a Slip type object be as slippery as a concrete slip value?

[15:41] <timotimo> no, type objects are always itemy

[15:42] <lucasb> ah, right. thanks

[15:42] <nine> timotimo: btw. your hint to set $!index as box_target in MAST::Local was just great!

[15:43] <nine> Saves so much coercion and boxing

[15:44] <timotimo> <3

[15:44] <timotimo> glad to hear it

[15:45] <timotimo> hm, actually, they might sometimes not be itemy, probably some way to override that behaviour

[15:57] <lucasb> 'Nil.new =:= Nil' is always true. Do you think makes sense to make argument-less slip 'Slip.new =:= Empty' be true?

[15:59] <lucasb> in Slip.pm: multi method new(--> Empty) {}  # ? :)

[16:03] <timotimo> that way you could "does" Empty and get the same changes every time you write Slip.new

[16:07] <lucasb> hm, not sure I understood :)

[16:07] <lucasb> m: use MONKEY-TYPING; Empty does role { method foo { 42 } }; augment class Slip { multi method new(-->Empty) {} }; dd slip.foo

[16:07] <camelia> rakudo-moar 50f2207bb: OUTPUT: «42␤»

[16:07] <lucasb> ^^ related idea?

[16:08] <timotimo> yeah

[16:36] *** ufobat___ joined
[16:37] *** p6bannerbot sets mode: +v ufobat___

[16:45] *** lucasb left
[17:15] *** leont joined
[17:16] *** p6bannerbot sets mode: +v leont

[17:28] *** lizmat joined
[17:28] *** p6bannerbot sets mode: +v lizmat

[17:45] <Geth> ¦ nqp: 06b0001d84 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[17:45] <Geth> ¦ nqp: [MoarVM Bump] 4454cfd99 fix jit perf map with  […]

[17:45] <Geth> ¦ nqp: 

[17:45] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.10-79-gdd27d548a...2018.10-80-g4454cfd99

[17:45] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/06b0001d84

[17:45] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.10-79-gdd27d548a...2018.10-80-g4454cfd99

[17:46] <Geth> ¦ rakudo: 0d5a813240 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[17:46] <Geth> ¦ rakudo: [NQP Bump] 06b0001d8 [MoarVM Bump] 4454cfd99 f […]

[17:46] <Geth> ¦ rakudo: 

[17:46] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.10-114-gc21005716...2018.10-115-g06b0001d8

[17:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0d5a813240

[17:46] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.10-114-gc21005716...2018.10-115-g06b0001d8

[17:50] *** dct joined
[17:50] *** p6bannerbot sets mode: +v dct

[17:59] <lizmat> Files=1255, Tests=76369, 344 wallclock secs (15.70 usr  5.35 sys + 2429.93 cusr 225.53 csys = 2676.51 CPU)

[19:05] <Geth> ¦ rakudo: f1fa5adfff | (Timo Paulssen)++ | 2 files

[19:05] <Geth> ¦ rakudo: empty array at start of STORE

[19:05] <Geth> ¦ rakudo: 

[19:05] <Geth> ¦ rakudo: so that assigning a Seq into a native array won't

[19:05] <Geth> ¦ rakudo: make it grow more and more each time

[19:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f1fa5adfff

[19:11] <timotimo> writing a test for this nao

[19:17] <timotimo> i "git reset" the wrong repo %)

[19:44] <Geth> ¦ roast: 1725e7e076 | (Timo Paulssen)++ | S09-typed-arrays/native.t

[19:44] <Geth> ¦ roast: test repeated STORE Seq on native arrays

[19:44] <Geth> ¦ roast: 

[19:44] <Geth> ¦ roast: an unfiled bug in rakudo caused those to result

[19:44] <Geth> ¦ roast: in just all values being concatenated.

[19:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1725e7e076

[19:49] *** dct left
[19:57] *** patrickz left
[20:08] <lizmat> timotimo: good catch!

[20:27] <timotimo> tanks

[20:28] <timotimo> may want to go through all method STORE across the codebase and check for this issue

[20:28] <timotimo> and write tests perhaps

[20:35] <lizmat> :-)  will do

[20:35] <Geth> ¦ rakudo: 2e5be5b8e4 | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[20:35] <Geth> ¦ rakudo: Handle PredictiveIterators a bit better

[20:35] <Geth> ¦ rakudo: 

[20:35] <Geth> ¦ rakudo: - one check less per iteration at the expense of a little initial overhead

[20:35] <Geth> ¦ rakudo: - throw exception immediately if lengths don't match

[20:35] <Geth> ¦ rakudo:   - rather than iterating until one of them is exhausted

[20:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2e5be5b8e4

[20:52] *** pmurias left
[20:55] <lizmat> m: my @a[10] = ^6; @a = 5; dd @a   # one problem found

[20:55] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «Array element = Array.new(:shape(10,), [5, 1, 2, 3, 4, 5, Any, Any, Any, Any])␤»

[20:57] <timotimo> ah, interesting

[20:57] <timotimo> i wonder if that's perhaps specced?

[20:58] <lizmat> m: my @a[10] = ^6; @a = ^3; dd @a   # another problem found

[20:58] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «Array element = Array.new(:shape(10,), [0, 1, 2, 3, 4, 5, Any, Any, Any, Any])␤»

[20:58] <lizmat> timotimo: not sure

[20:58] <lizmat> gonna fix it and see if any spectests break

[20:59] <timotimo> OK

[21:18] *** Kaiepi left
[21:34] *** lucasb joined
[21:34] *** p6bannerbot sets mode: +v lucasb

[21:38] *** Kaiepi joined
[21:39] *** p6bannerbot sets mode: +v Kaiepi

[22:54] *** lucasb left
[22:59] <Geth> ¦ rakudo: 7262b4e840 | (Elizabeth Mattijsen)++ | src/core/Shaped1Array.pm6

[22:59] <Geth> ¦ rakudo: Fix re-initialization of 1dim shaped arrays

[22:59] <Geth> ¦ rakudo: 

[22:59] <Geth> ¦ rakudo: Nudged by timotimo++

[22:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7262b4e840

[23:00] <lizmat> timotimo: no noise from spectest

[23:00] <lizmat> will continue looking for others tomorrow

[23:00] <lizmat> afk&

[23:15] <timotimo> frames per second:

[23:15] <timotimo> 4963.6734 4871.4332 4782.5587 4660.3378 718.3257

[23:16] <timotimo> actually it's lines per second, but it redraws the screen after every individual line, so ... :)

[23:28] <timotimo> m: say "full screen redraws were between { 4963 / (786 / 2) } and { 718 (786 / 2) } per second"

[23:28] <camelia> rakudo-moar 7262b4e84: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3e between { 4963 / (786 / 2) } and { 7187⏏5 (786 / 2) } per second"␤    expecting any of:␤        infix␤        infix stopper␤        statement e…»

[23:28] <timotimo> m: say "full screen redraws were between { 4963 / (786 / 2) } and { 718 / (786 / 2) } per second"

[23:28] <camelia> rakudo-moar 7262b4e84: OUTPUT: «full screen redraws were between 12.628499 and 1.826972 per second␤»

