[00:00] *** lizmat joined
[00:04] *** lizmat left
[00:10] *** Kaiepi left
[00:37] *** BenGoldberg joined
[02:47] *** ufobat_ joined
[02:50] *** ufobat left
[04:08] *** xi- left
[04:09] *** xi- joined
[05:22] *** BenGoldberg left
[06:28] *** Kaiepi joined
[06:48] *** robertle joined
[06:52] *** ufobat_ is now known as ufobat

[07:32] <[TuxCM]> Rakudo version 2018.06-64-gb659a9c2f - MoarVM version 2018.06-103-gaf455397f

[07:32] <[TuxCM]> csv-test-xs-20      0.467 -  0.470

[07:32] <[TuxCM]> csv-ip5xs           0.910 -  0.918

[07:32] <[TuxCM]> test-t --race       0.966 -  1.063

[07:32] <[TuxCM]> test-t              2.303 -  2.347

[07:32] <[TuxCM]> csv-ip5xs-20        7.405 -  7.732

[07:32] <[TuxCM]> test                9.055 -  9.093

[07:32] <[TuxCM]> test-t-20 --race   14.855 - 15.403

[07:32] <[TuxCM]> csv-parser         26.379 - 27.225

[07:32] <[TuxCM]> test-t-20          41.875 - 42.239

[08:06] *** Ven` joined
[09:46] *** |Tux| joined
[10:13] *** Ven` left
[10:15] *** donaldh joined
[10:25] *** lizmat joined
[10:30] *** BenGoldberg joined
[10:32] *** Ven` joined
[10:45] <tbrowder_> greppable6: caption

[10:45] <greppable6> tbrowder_, 129 lines, 27 modules: https://gist.github.com/0701c1ccd6eb261bde534b3bde8b4e90

[10:46] <Geth> ¦ rakudo: 2a414aee18 | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[10:46] <Geth> ¦ rakudo: Remove unncessary comment, Ven++

[10:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2a414aee18

[10:49] <tbrowder_> morning all!

[10:49] <tbrowder_> that greppable is very cool!

[10:59] *** Ven` left
[11:21] <Geth> ¦ rakudo: 5ec2c96ec2 | (Elizabeth Mattijsen)++ | lib/Test.pm6

[11:21] <Geth> ¦ rakudo: Fix "diag "foo"|"bar"

[11:21] <Geth> ¦ rakudo: 

[11:21] <Geth> ¦ rakudo: We allow junctions to be specified in e.g. "is", but if they fail, they

[11:21] <Geth> ¦ rakudo: used to bomb on the "diag" being done.  This fixes the bombing.   This is

[11:21] <Geth> ¦ rakudo: spectests clean.

[11:21] <Geth> ¦ rakudo: 

[11:21] <Geth> ¦ rakudo: Inspired by Text::CSV ecosystem fallout, following hash randomization changes

[11:21] <Geth> ¦ rakudo: needing tests to be fixed.

[11:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5ec2c96ec2

[11:22] <lizmat> m: diag "foo"|"bar"

[11:22] <camelia> rakudo-moar 2a414aee1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    diag used at line 1␤␤»

[11:22] <lizmat> m: use Test; diag "foo"|"bar"   # duh

[11:22] <camelia> rakudo-moar 2a414aee1: OUTPUT: «This type cannot unbox to a native string: P6opaque, Junction␤  in sub _diag at /home/camelia/rakudo-m-inst-1/share/perl6/sources/C712FE6969F786C9380D643DF17E85D06868219E (Test) line 440␤  in sub diag at /home/camelia/rakudo-m-inst-1/share/perl6/s…»

[11:39] *** Ven` joined
[11:48] <Geth> ¦ nqp/truffle: 1dd77223dc | (Paweł Murias)++ | 3 files

[11:48] <Geth> ¦ nqp/truffle: [truffle] Abstract away call arguments, so that we may pass extra stuff

[11:48] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/1dd77223dc

[11:56] <lizmat> trivia question: what's so special about 20 September this year ?

[11:59] *** Zoffix joined
[11:59] <Zoffix> lizmat: maybe fix needs to be done somewhere earlier? 'cause right now it has this behaviour:

[12:00] <Zoffix> c: HEAD use Test; is ^100 .any, 46

[12:00] <committable6> Zoffix, ¦HEAD(5ec2c96): «ok 1 - ␤»

[12:00] <Zoffix> c: HEAD use Test; is ^100 .any, 460

[12:00] <committable6> Zoffix, https://gist.github.com/18faedb3c0d9e950a898e8efbaa1dc7e

[12:00] <Zoffix> and instead it should probably print "got: any(…)" or something

[12:01] <lizmat> well, this was the least intrusive fix I could think of, apart from full-blown Junction support

[12:01] <Zoffix> c: HEAD use Test; is-deeply ^100 .any, 460

[12:01] <committable6> Zoffix, https://gist.github.com/04e5afa570818f54f7032be242acaf06

[12:01] <Zoffix> OK, I'll just file a ticket

[12:07] <Geth> ¦ rakudo: e4e753b023 | (Elizabeth Mattijsen)++ | src/core/Cool.pm6

[12:07] <Geth> ¦ rakudo: Remove "uniscript"

[12:07] <Geth> ¦ rakudo: 

[12:07] <Geth> ¦ rakudo: Clearly this was *way* too naive.  See GH#2003

[12:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e4e753b023

[12:07] <synopsebot> GH#2003 [open]: https://github.com/rakudo/rakudo/issues/2003 Should we allow identifiers with different scripts?

[12:07] <Zoffix> R#2017

[12:07] <synopsebot> R#2017 [open]: https://github.com/rakudo/rakudo/issues/2017 Test.pm6's Junction support is haphazard

[12:11] <Zoffix> lizmat: so what's special about September?

[12:11] <lizmat> answer to trivia question: 20 Sep 2018 is 1000 days after Christmas

[12:11] <Zoffix> Ah, cool :)

[12:12] <Zoffix> Perfect time for 6.d to be ready to ship *wink* *wink* :)

[12:13] <lizmat> hehe.... thought has crossed my mind

[12:14] <lizmat> it's also like 12 days after the Swiss Perl Workshop

[12:15] <lizmat> and not too far from 2018.09 release date

[12:20] <Geth> ¦ 6.d-prep: 714262b058 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[12:20] <Geth> ¦ 6.d-prep: Remove `Dismorphia` butterfly name name proposal

[12:20] <Geth> ¦ 6.d-prep: 

[12:20] <Geth> ¦ 6.d-prep: - Someone pointed out it's also a name of some disease

[12:20] <Geth> ¦ 6.d-prep: - Remove my comments about LTAness of Diwali. I no longer care about them and

[12:20] <Geth> ¦ 6.d-prep:    butterfly names weren't a widely accepted idea.

[12:20] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/714262b058

[12:21] <timotimo> .o( people like comma well enough )

[12:21] * jnthn wonders how many people (aside from those reading the FAQ) realize it's a butterfly name rather than a ,

[12:22] <Zoffix> I didn't know there was a butterfly named comma :P

[12:22] * MasterDuke neither

[12:23] <jnthn> :D

[12:24] <MasterDuke> jnthn, timotimo: is EVAL supposed to be thread-safe? or does the language not guarantee that?

[12:24] <timotimo> it was worth it for me to bring that up

[12:24] <timotimo> i'd say it should be made threadsafe

[12:24] <MasterDuke> pretty sure i looked at the faq, but i guess i missed that

[12:25] <MasterDuke> i was hoping ugexe's commit yesterday would have helped, but didn't seem to make a difference

[12:25] <timotimo> https://en.wikipedia.org/wiki/Polygonia_c-album - Polygonia c-album (comma) is a food generalist (polyphagous) butterfly species belonging to the family Nymphalidae.

[12:25] <MasterDuke> at least for `perl6 --profile -e 'say "127.0.0.1" ~~ /^ [ <{ 0 .. 255 }> ]**4 % \. $/; say now - INIT now'`

[12:25] <jnthn> MasterDuke: I think the language should guarantee it

[12:26] <jnthn> Hm, there's no threading in that?

[12:26] <Zoffix> MasterDuke: FWIW, there's more thread unsafeness that ugexe's commit didn't fix: R#1391

[12:26] <synopsebot> R#1391 [open]: https://github.com/rakudo/rakudo/issues/1391 EVAL is not thread safe

[12:28] <Zoffix> Well, I guess I don't know for sure if that's the cause of EVAL's crashing

[12:28] <Zoffix> s/crashing/unsafeness/;

[12:31] <MasterDuke> jnthn: https://github.com/rakudo/rakudo/issues/2013

[12:32] <MasterDuke> isn't the <{ ... }> in the regex causing an EVAL?

[12:32] <Zoffix> MasterDuke: yes, but there's no threading involved

[12:33] <MasterDuke> Zoffix: hm, it only crashes when profiling, but i guess that doesn't have to mean threads...

[12:33] <jnthn> No, I expect the profiler crash is something else

[12:34] <MasterDuke> actually, didn't timotimo make some recent fix where EVAL or something like that wasn't propagating the is_profiling fact?

[12:34] *** Zoffix left
[12:35] <timotimo> wasn't me

[12:35] <timotimo> but if eval is being activated again inside the eval, that would be bad

[12:35] <MasterDuke> maybe you were commenting that was a potential cause of a problem

[12:37] <timotimo> ah, it's supposed to throw an exception that profiling has already started

[12:37] <timotimo> and it doesn't call MVM_profile_start a second time before it segfaults on my end

[12:37] <timotimo> though the first time it actually ran to where it outputs the profile

[12:38] *** brrt joined
[12:39] <MasterDuke> oh right, weren't we were debugging something else and shaved the yak all the way down to seeing if MVM_profile_(start|end) were getting called the correct number of times?

[12:40] <timotimo> right, i seem to recall perhaps profile_end was being called too often

[12:41] <MasterDuke> ah, i think we got onto that because i was trying to --profile-compile the rakudo build and it wasn't outputting anything

[12:41] <timotimo> ah, mhm

[12:41] <timotimo> fun. the crash is inside a routine that's about 3k instructions long

[12:42] <MasterDuke> i don't remember where we left off with the --profile-compile stuff...

[12:46] <timotimo> it's always great when the dump_bytecode output has a -> that's nowhere near the instruction you're looking at, like in this case :|

[12:50] <MasterDuke> right, i'd dumped the bytecode of something, don't remember if you'd found it useful

[12:50] <timotimo> i've got an rr trace now, that means i can step backwards from the crash and just compare what opcodes are being run :)

[12:51] <MasterDuke> nice

[12:56] <timotimo> oh, i must recompile with --optimize=0, or else i'll have a hard time

[13:38] <timotimo> hm. developing an IDE is a hairy affair, so the butterfly fits there, too :P

[13:38] *** brrt left
[13:41] *** brrt joined
[13:54] *** brrt left
[14:04] <Geth> ¦ rakudo: jkramer++ created pull request #2018: Issue 1906

[14:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2018

[14:07] <Geth> ¦ rakudo: jkramer++ created pull request #2019: Always coerce first argument to &round to Numeric.

[14:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2019

[14:09] <Geth> ¦ rakudo: e547811a30 | (Jonas Kramer)++ | src/core/Numeric.pm6

[14:09] <Geth> ¦ rakudo: Always coerce first argument to &round to Numeric.

[14:09] <Geth> ¦ rakudo: 

[14:09] <Geth> ¦ rakudo: Fixes rakudo/rakudo#1745.

[14:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e547811a30

[14:09] <Geth> ¦ rakudo: 2f8074beb2 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Numeric.pm6

[14:09] <Geth> ¦ rakudo: Merge pull request #2019 from jkramer/issue-1746

[14:09] <synopsebot> RAKUDO#1745 [closed]: https://github.com/rakudo/rakudo/issues/1745 [consistency][easy to resolve][good first issue] &round inconsistent on types of arguments.

[14:09] <Geth> ¦ rakudo: 

[14:09] <Geth> ¦ rakudo: Always coerce first argument to &round to Numeric.

[14:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2f8074beb2

[14:31] *** Zoffix joined
[14:31] <Zoffix> ZOFVM: Files=1297, Tests=153433, 172 wallclock secs (27.99 usr  3.66 sys + 3666.80 cusr 190.53 csys = 3888.98 CPU)

[14:31] <Zoffix> That's a bunch slower than earlier runs :/

[14:31] *** donaldh left
[14:32] <Zoffix> Wonder if locking for each serialization context is what's to blame.

[14:32] <Zoffix> There's a whole ton of tests that use eval to run the test.

[14:34] <jnthn> Doubt it; it just takes a lock while it increments an integer once per eval

[14:34] <jnthn> If you mean the ugexe++ patch, anyway

[14:34] <Zoffix> Yeah, this: https://github.com/rakudo/rakudo/commit/80bbfbb36a3b358e29b94e6f7bd61a8c54ea026b

[14:34] <Zoffix> But if I have 1000 tests, that's 1000 locks

[14:35] <jnthn> m: my $lock = Lock.new; my $i = 0; for 1..100000 { $lock.protect: { $i++ } }; say now - ENTER now

[14:35] <camelia> rakudo-moar 2f8074beb: OUTPUT: «0.24730315␤»

[14:35] <jnthn> m: my $lock = Lock.new; my $i = 0; for 1..1000000 { $lock.protect: { $i++ } }; say now - ENTER now

[14:35] <camelia> rakudo-moar 2f8074beb: OUTPUT: «2.2474774␤»

[14:35] <Zoffix> ok

[14:36] <Zoffix> m: my atomicint $i; for 1..1000000 { $i⚛++ }; say now - ENTER now

[14:36] <camelia> rakudo-moar 2f8074beb: OUTPUT: «0.30206118␤»

[14:36] <Zoffix> s: postfix:<⚛++>, \($)

[14:36] <SourceBaby> Zoffix, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Calling postfix:<⚛++>() will never work with signature of the proto ($, *%)␤at -e:6␤------>     put sourcery( <HERE>postfix:<⚛++>, \($) )[1];␤

[14:36] <Zoffix> huh

[14:36] <timotimo> needs specifically a writable container that's a native int

[14:37] <Zoffix> Why is it telling me `Calling postfix:<⚛++>()` when that's not what I called?

[14:37] <Zoffix> s: postfix:<⚛++>, \(my atomicint $x)

[14:37] <SourceBaby> Zoffix, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Calling postfix:<⚛++>() will never work with signature of the proto ($, *%)␤at -e:6␤------>     put sourcery( <HERE>postfix:<⚛++>, \(my atomicint $x) )[1];␤

[14:37] <Zoffix> ah, I forgot the &

[14:37] <Zoffix> s: &postfix:<⚛++>, \(my atomicint $x)

[14:37] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/2f8074beb/src/core/atomicops.pm6#L81

[14:37] <timotimo> aaah

[14:38] <Zoffix> So, is it OK to swap that lock to an atomicint or is it too small?

[14:38] <Zoffix> m: uint32.Range.max.say

[14:38] <camelia> rakudo-moar 2f8074beb: OUTPUT: «4294967295␤»

[14:38] <Zoffix> m: int32.Range.max.say

[14:38] <camelia> rakudo-moar 2f8074beb: OUTPUT: «2147483647␤»

[14:39] <Zoffix> ZOFVM: Files=1297, Tests=153433, 169 wallclock secs (27.00 usr  3.80 sys + 3648.36 cusr 172.61 csys = 3851.77 CPU)

[14:43] <Zoffix> too small, I think, if it's incremented for each eval

[14:43] *** brrt joined
[14:54] <Zoffix> ZOFSPECTEST: Files=1242, Tests=76420, 130 wallclock secs (18.37 usr  3.36 sys + 2611.22 cusr 152.56 csys = 2785.51 CPU)

[14:55] *** Zoffix left
[15:06] *** Ven` left
[15:10] *** Ven` joined
[15:26] <AlexDaniel> weekly:

[15:26] <notable6> AlexDaniel, 18 notes: https://gist.github.com/fe21e524aeac4f17b4db320d82e835c4

[15:26] <AlexDaniel> weekly: reset

[15:26] <notable6> AlexDaniel, Moved existing notes to “weekly_2018-07-04T15:26:42Z”

[15:26] <AlexDaniel> weekly: https://leejo.github.io/2018/07/04/five_years_of_spw/

[15:26] <notable6> AlexDaniel, Noted!

[15:27] <lizmat> AlexDaniel: ah, good point  :-)

[15:28] *** robertle left
[15:31] *** perlpilot joined
[15:32] <lizmat> .tell moritz https://perl6book.com doesn't show "Parsing with Perl 6 Regexes and Grammars" ?

[15:32] <yoleaux> lizmat: I'll pass your message to moritz.

[15:34] <lizmat> .tell moritz well, at least in the graph  :-)

[15:34] <yoleaux> lizmat: I'll pass your message to moritz.

[15:42] <Geth> ¦ rakudo/master: 4 commits pushed by (Jonas Kramer)++, (Zoffix Znet)++

[15:42] <Geth> ¦ rakudo/master: 38d7f2a035 | Pass result of &prompt through &val.

[15:42] <Geth> ¦ rakudo/master: 0275ea2903 | Mute &val warnings in &prompt in case of EOF.

[15:42] <Geth> ¦ rakudo/master: 07b032d046 | Check input for definedness instead of passing everything to &val and muting potential warnings.

[15:42] <Geth> ¦ rakudo/master: 058addf148 | Merge pull request #2018 from jkramer/issue-1906

[15:42] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/2f8074beb221...058addf14852

[15:55] <Geth> ¦ roast: jkramer++ created pull request #444: Tests for rakudo/rakudo#1745.

[15:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/444

[15:55] <synopsebot> RAKUDO#1745 [open]: https://github.com/rakudo/rakudo/issues/1745 [consistency][easy to resolve][good first issue][testneeded] [RESOLVED; NEED TEST] &round inconsistent on types of arguments.

[16:05] <Geth> ¦ roast: 955b0e0203 | (Jonas Kramer)++ | S32-num/rounders.t

[16:05] <Geth> ¦ roast: Add tests for rakudo/rakudo#1745 plus some more for 2-argument version of &round.

[16:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/955b0e0203

[16:05] <Geth> ¦ roast: fc20825797 | (Jonas Kramer)++ | S32-num/rounders.t

[16:05] <Geth> ¦ roast: Use numeric comparison for &round tests.

[16:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fc20825797

[16:05] <Geth> ¦ roast: 1e17e668ed | (Zoffix Znet)++ (committed using GitHub Web editor) | S32-num/rounders.t

[16:05] <synopsebot> RAKUDO#1745 [open]: https://github.com/rakudo/rakudo/issues/1745 [consistency][easy to resolve][good first issue][testneeded] [RESOLVED; NEED TEST] &round inconsistent on types of arguments.

[16:05] <Geth> ¦ roast: Merge pull request #444 from jkramer/rakudo-1745

[16:05] <Geth> ¦ roast: 

[16:05] <Geth> ¦ roast: Tests for rakudo/rakudo#1745.

[16:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1e17e668ed

[16:10] <Geth> ¦ rakudo: 4b0f398537 | (Zoffix Znet)++ | tools/contributors.p6

[16:10] <Geth> ¦ rakudo: chmod +x ./tools/contributors.p6

[16:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4b0f398537

[16:13] *** jkramer joined
[16:14] *** AlexDaniel left
[16:15] *** BenGoldberg left
[16:27] <tbrowder_> .tell moritz don’t see that book on perl6.org/resources either

[16:27] <yoleaux> tbrowder_: I'll pass your message to moritz.

[16:28] *** robertle joined
[16:31] *** scovit left
[16:39] *** Ven` left
[16:50] * samcv is wondering how many more modules and code i'll break when i randomize hash's more

[16:50] <samcv> essentially the order of iteration will change whenever you add something to the hash. there's parts in spectest that assume modifying the hash won't cause the order to change

[16:52] <jnthn> That's already not reliably true, though, is it?

[16:52] <jnthn> (Like if it resizes)

[16:52] <samcv> well. true on resizes

[16:52] <samcv> also if the table gets resized while you're iterating. that could be very bad

[16:53] <Geth> ¦ roast: jkramer++ created pull request #445: Add tests for rakudo/rakudo#1906.

[16:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/445

[16:53] <synopsebot> RAKUDO#1906 [open]: https://github.com/rakudo/rakudo/issues/1906 [RFC][docs needed][easy to resolve][good first issue][testneeded] [RESOLVED; NEED TEST] &prompt should pass stuff through `val`

[16:53] <samcv> so i'm thinking we might want to make it an exception trying to grab another thing from the same iterator

[16:53] <samcv> if you've added something to the hash

[16:55] <samcv> also there's a test i'm not sure why it fails

[16:58] <samcv> ah nvm i think the test was changed. i'm gonna update my rakudo

[17:06] *** scovit joined
[17:08] <samcv> jnthn: what are your thoughts on making adding entries to a hash a throwable offense?

[17:08] <samcv> or anyone else can chime in

[17:08] <jnthn> It's the iteration that'd throw rather than the adding itself, I guess?

[17:09] <jnthn> Ah, you said so above. Sorry, debugging something and only half reading. :)

[17:10] <samcv> yeah the iteration

[17:10] <samcv> as long as you don't try and get another thing from the iterator you're fine

[17:13] <jnthn> What about deletion from the hash?

[17:14] <samcv> you can delete from the hash. though i guess you should only delete the current entry you're on

[17:14] <samcv> if you delete another entry somewhere else that could be bad though

[17:22] *** raschipi joined
[17:32] *** Kaiepi left
[17:33] *** Kaiepi joined
[17:55] *** Kaiepi left
[17:56] *** Kaiepi joined
[18:08] *** lizmat left
[18:17] *** lizmat joined
[18:26] <Geth> ¦ synopsebot: f03793db5a | (Zoffix Znet)++ | 2 files

[18:26] <Geth> ¦ synopsebot: Add debug launcher script

[18:26] <Geth> ¦ synopsebot: review: https://github.com/perl6/synopsebot/commit/f03793db5a

[18:26] <Geth> ¦ synopsebot: 6b1a794aee | (Zoffix Znet)++ | dev-start-localhost

[18:26] <Geth> ¦ synopsebot: Launch correct script

[18:26] <Geth> ¦ synopsebot: review: https://github.com/perl6/synopsebot/commit/6b1a794aee

[18:50] *** brrt left
[18:52] <Geth> ¦ synopsebot: 386197a8d7 | (Zoffix Znet)++ | 7 files

[18:52] <Geth> ¦ synopsebot: Implement geth-waiter feature

[18:52] <Geth> ¦ synopsebot: 

[18:52] <Geth> ¦ synopsebot: When Issue links are said by Geth, wait for Geth to

[18:52] <Geth> ¦ synopsebot: finish talking

[18:52] <Geth> ¦ synopsebot: 

[18:52] <Geth> ¦ synopsebot: (currently this commit crashes with weird error; making

[18:52] <Geth> ¦ synopsebot: a commit to reference it in Rakudo issue)

[18:52] <Geth> ¦ synopsebot: review: https://github.com/perl6/synopsebot/commit/386197a8d7

[19:02] <raschipi> Thanks Zoffix++

[19:14] <Geth> ¦ synopsebot: f3398f96bb | (Zoffix Znet)++ | 4 files

[19:14] <Geth> ¦ synopsebot: Fix some compile errors

[19:14] <Geth> ¦ synopsebot: review: https://github.com/perl6/synopsebot/commit/f3398f96bb

[19:20] <[Coke]> ping zoffix

[19:24] <Geth> ¦ synopsebot: 3eaf934046 | (Zoffix Znet)++ | 7 files

[19:24] <Geth> ¦ synopsebot: Revert geth-waiter feature

[19:24] <Geth> ¦ synopsebot: 

[19:24] <Geth> ¦ synopsebot: Doesn't run due to #2023 and I'm too frustrated now to figure out

[19:24] <Geth> ¦ synopsebot: wtf causes that error.

[19:24] <Geth> ¦ synopsebot: review: https://github.com/perl6/synopsebot/commit/3eaf934046

[19:24] *** Zoffix joined
[19:24] <Zoffix> [Coke]: sup

[19:25] *** brrt joined
[19:27] <raschipi> Zoffix: Thanks anyway.

[19:44] *** perlpilot left
[19:47] *** Kaiepi left
[19:47] *** Kaiepi joined
[19:52] *** ufobat left
[20:16] *** AlexDaniel joined
[20:21] *** dct joined
[20:22] *** j3nnn1 left
[20:35] *** dogbert17 left
[20:43] <Geth> ¦ rakudo: zoffixznet self-assigned Missing MoarVM contributors since 2016.09 release https://github.com/rakudo/rakudo/issues/2024

[20:49] <Zoffix> fus'ake :) I wonder how many people are missing :)

[20:50] *** j3nnn1 joined
[21:04] *** brrt left
[21:10] *** robertle left
[21:12] *** BenGoldberg joined
[21:29] *** raschipi left
[22:15] *** perlpilot joined
[22:27] *** perlpilot left
[23:05] *** stmuk joined
[23:07] <Geth> ¦ nqp: jstuder-gh++ created pull request #482: Display build/commit info on config/make

[23:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/482

[23:07] <Geth> ¦ rakudo: jstuder-gh++ created pull request #2026: Display build/commit info on config/make

[23:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2026

[23:38] *** Zoffix left
