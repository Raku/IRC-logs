[00:08] *** lizmat joined
[00:08] *** p6bannerbot sets mode: +v lizmat

[00:33] *** lizmat left
[00:37] *** lizmat joined
[00:37] *** p6bannerbot sets mode: +v lizmat

[02:08] *** notable6 left
[02:08] *** benchable6 left
[02:08] *** bloatable6 left
[02:08] *** squashable6 left
[02:08] *** nativecallable6 left
[02:08] *** quotable6 left
[02:08] *** releasable6 left
[02:08] *** statisfiable6 left
[02:08] *** reportable6 left
[02:08] *** committable6 left
[02:08] *** undersightable6 left
[02:08] *** bisectable6 left
[02:08] *** evalable6 left
[02:08] *** greppable6 left
[02:08] *** shareable6 left
[02:08] *** coverable6 left
[02:08] *** unicodable6 left
[02:08] *** nativecallable6 joined
[02:08] *** ChanServ sets mode: +v nativecallable6

[02:08] *** bloatable6 joined
[02:08] *** quotable6 joined
[02:08] *** ChanServ sets mode: +v quotable6

[02:08] *** evalable6 joined
[02:08] *** ChanServ sets mode: +v evalable6

[02:08] *** notable6 joined
[02:08] *** coverable6 joined
[02:08] *** ChanServ sets mode: +v notable6

[02:08] *** ChanServ sets mode: +v coverable6

[02:08] *** greppable6 joined
[02:08] *** ChanServ sets mode: +v greppable6

[02:08] *** unicodable6 joined
[02:08] *** bisectable6 joined
[02:08] *** committable6 joined
[02:08] *** benchable6 joined
[02:08] *** ChanServ sets mode: +v committable6

[02:08] *** ChanServ sets mode: +v benchable6

[02:08] *** reportable6 joined
[02:08] *** releasable6 joined
[02:08] *** ChanServ sets mode: +v reportable6

[02:08] *** ChanServ sets mode: +v releasable6

[02:08] *** undersightable6 joined
[02:08] *** undersightable6 left
[02:08] *** unicodable6 left
[02:08] *** bisectable6 left
[02:08] *** bloatable6 left
[02:09] *** p6bannerbot sets mode: +v nativecallable6

[02:09] *** p6bannerbot sets mode: +v quotable6

[02:09] *** p6bannerbot left
[02:09] *** p6bannerbot joined
[02:09] *** ChanServ sets mode: +o p6bannerbot

[02:13] *** lizmat left
[02:37] *** lizmat joined
[02:37] *** p6bannerbot sets mode: +v lizmat

[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:09] *** bisectable6 joined
[03:09] *** unicodable6 joined
[03:09] *** bloatable6 joined
[03:09] *** p6bannerbot sets mode: +v bisectable6

[03:09] *** p6bannerbot sets mode: +v unicodable6

[03:10] *** p6bannerbot sets mode: +v bloatable6

[03:11] *** undersightable6 joined
[03:11] *** p6bannerbot sets mode: +v undersightable6

[03:11] *** ufobat_ joined
[03:12] *** p6bannerbot sets mode: +v ufobat_

[03:15] *** ufobat___ left
[03:20] *** MasterDuke left
[06:13] *** statisfiable6 joined
[06:14] *** p6bannerbot sets mode: +v statisfiable6

[07:15] *** dct joined
[07:15] *** p6bannerbot sets mode: +v dct

[07:28] *** ZzZombo left
[08:42] <lizmat> Files=1255, Tests=76369, 365 wallclock secs (16.12 usr  5.65 sys + 2413.97 cusr 226.88 csys = 2662.62 CPU)

[08:42] <lizmat> not sure whether that delay is a fluke or not

[08:56] <lizmat> jnthn: perhaps something for you? https://stackoverflow.com/questions/53331761/print-sth-every-second-and-also-sleep-10-seconds-very-5-seconds-using-react

[09:06] <lizmat> jnthn: re implementing 6.d functionality: would it make sense to have a MOP method to replace one candidate by another in a dispatchee list ?

[09:07] <lizmat> case in point: I realized that my %h<a b> 5x improvement has a slight semantic difference in case someone added their own postcircumfix:<{ }> candidates

[09:08] <lizmat> that made sense before we completely fleshed out the AT-KEY interface, it does so less now

[09:09] <lizmat> so I was thinking: I'll simply add the new version to 6.d, but then we get an ambiguous call error  :-(

[09:16] <[Tux]> Rakudo version 2018.10-145-gf7007ac0e - MoarVM version 2018.10-78-gc130b7cdb

[09:16] <[Tux]> csv-test-xs-20      0.435 -  0.465

[09:16] <[Tux]> test-t --race       0.845 -  0.856

[09:16] <[Tux]> csv-ip5xs           0.923 -  0.923

[09:16] <[Tux]> test-t              1.812 -  1.850

[09:16] <[Tux]> csv-ip5xs-20        7.132 -  7.269

[09:16] <[Tux]> test                8.412 -  8.953

[09:16] <[Tux]> test-t-20 --race   10.470 - 11.534

[09:16] <[Tux]> csv-parser         22.706 - 25.099

[09:16] <[Tux]> test-t-20          32.156 - 32.707

[09:50] *** dogbert11 joined
[09:51] *** p6bannerbot sets mode: +v dogbert11

[09:53] *** dogbert17 left
[10:38] *** brrt joined
[10:38] *** p6bannerbot sets mode: +v brrt

[10:50] <brrt> \o

[10:50] <brrt> I believe I fixed the JIT register type match issue

[10:51] <brrt> It may be time for a moarvm bump

[10:58] <dogbert11> hi brrt, nice job

[11:17] <lizmat> jnthn: sanity check: inside a react block, only one whenever runs at any time, right ?

[11:24] <jnthn> Correct

[11:32] <lizmat> oki

[11:41] *** brrt left
[12:16] <timotimo> that's also why having lexicals in a react or supply block is just fine, because concurrent access is prevented

[12:47] *** lizmat left
[12:49] *** lizmat joined
[12:49] *** p6bannerbot sets mode: +v lizmat

[12:59] <Geth> ¦ nqp: c210057164 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[12:59] <Geth> ¦ nqp: [MoarVM Bump] Brings 2 commits

[12:59] <Geth> ¦ nqp: 

[12:59] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.10-77-g6236eb5de...2018.10-79-gdd27d548a

[12:59] <Geth> ¦ nqp: dd27d548a [JIT] Fix signedness issues

[12:59] <Geth> ¦ nqp: c130b7cdb [jit-bisect.pl] Give a --nodelay flag

[12:59] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c210057164

[12:59] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.10-77-g6236eb5de...2018.10-79-gdd27d548a

[12:59] <Geth> ¦ rakudo: 21f11a3f02 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[12:59] <Geth> ¦ rakudo: [NQP Bump] c21005716 [MoarVM Bump] Brings 2 co […]

[12:59] <Geth> ¦ rakudo: 

[12:59] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.10-113-g115212ed8...2018.10-114-gc21005716

[12:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/21f11a3f02

[12:59] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.10-113-g115212ed8...2018.10-114-gc21005716

[13:12] <SqrtNegInf> Regarding the hash assignment changes:

[13:12] <SqrtNegInf> m: my @b; @b[0]<a> = 42; @b[0]<b> = 47; dd @b; # this is fine

[13:12] <camelia> rakudo-moar 21f11a3f0: OUTPUT: «Array @b = [{:a(42), :b(47)},]␤»

[13:12] <SqrtNegInf> m: my @a; @a[0]<a b> = 42, 47; dd @a; # this stopped working

[13:12] <camelia> rakudo-moar 21f11a3f0: OUTPUT: «Array @a = []␤»

[13:13] <SqrtNegInf> I don't know if this was ever something that was documented to work or not...

[13:15] <jnthn> I think it should work

[13:15] <jnthn> I'm a bit surprised we don't have tests covering it

[13:21] *** pmurias joined
[13:21] *** p6bannerbot sets mode: +v pmurias

[13:36] *** lizmat left
[13:42] *** lizmat joined
[13:42] *** p6bannerbot sets mode: +v lizmat

[13:43] * lizmat is going to revert the 5x faster %h<a b>

[13:45] <lizmat> hmmm... maybe not

[13:47] <lizmat> SqrtNegInf: looking at the issue, could you please make a ticket ?>

[13:48] <SqrtNegInf> Will do that.

[13:58] <lizmat> SqrtNegInf: I have a fix ready and tested, but would like to refer to issue in commit message...

[13:58] <lizmat> if you're not doing it already, I could make the issue

[13:58] <SqrtNegInf> Just a sec...

[14:00] <SqrtNegInf> GH#2490

[14:00] <synopsebot> GH#2490 [open]: https://github.com/rakudo/rakudo/issues/2490 Assignment to hash via array subscript fails

[14:02] <lizmat> SqrtNegInf++

[14:03] <Geth> ¦ rakudo: c4da4c7eab | (Elizabeth Mattijsen)++ | src/core/hash_slice.pm6

[14:03] <Geth> ¦ rakudo: Make sure we vivify on containerized type objects

[14:03] <Geth> ¦ rakudo: 

[14:03] <Geth> ¦ rakudo: Fixes R#2490, SqrtNegInf++

[14:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c4da4c7eab

[14:03] <synopsebot> R#2490 [open]: https://github.com/rakudo/rakudo/issues/2490 Assignment to hash via array subscript fails

[14:06] <lizmat> hmmm....  this needs additional fixing...

[14:06] <lizmat> bisectable6: old=2018.10 my @a; dd @a[0]<a b>

[14:06] <bisectable6> lizmat, On both starting points (old=2018.10 new=21f11a3) the exit code is 0 and the output is identical as well

[14:06] <bisectable6> lizmat, Output on both points: «(Any, Any)␤»

[14:07] <lizmat> bisectable6: old=2018.10 my @a; dd @a[0]<a b>; dd @a

[14:07] <bisectable6> lizmat, On both starting points (old=2018.10 new=21f11a3) the exit code is 0 and the output is identical as well

[14:07] <bisectable6> lizmat, Output on both points: «(Any, Any)␤Array @a = []␤»

[14:11] <Geth> ¦ rakudo: 9a2c4b447b | (Elizabeth Mattijsen)++ | src/core/hash_slice.pm6

[14:11] <Geth> ¦ rakudo: We shouldn't auto-vivify on access

[14:11] <Geth> ¦ rakudo: 

[14:11] <Geth> ¦ rakudo: Fix for R#2490 was a bit too enthusiastic

[14:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9a2c4b447b

[14:11] <synopsebot> R#2490 [open]: https://github.com/rakudo/rakudo/issues/2490 Assignment to hash via array subscript fails

[14:27] *** shareable6 joined
[14:28] *** p6bannerbot sets mode: +v shareable6

[14:37] *** reportable6 left
[14:38] *** reportable6 joined
[14:38] *** squashable6 joined
[14:38] *** ChanServ sets mode: +v squashable6

[14:38] *** p6bannerbot sets mode: +v reportable6

[14:38] *** p6bannerbot sets mode: +v squashable6

[16:11] <Geth> ¦ rakudo: dc67ee75b1 | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[16:11] <Geth> ¦ rakudo: Make %h >>op<< %h about 30% faster

[16:11] <Geth> ¦ rakudo: 

[16:11] <Geth> ¦ rakudo: Because we don't need to go through creating Lists, but instead directly

[16:11] <Geth> ¦ rakudo: use the iterator

[16:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dc67ee75b1

[16:22] *** trnh joined
[16:22] *** p6bannerbot sets mode: +v trnh

[16:30] *** trnh left
[17:18] <lizmat> timotimo: is there something obvious as to why the following doesn't JIT?

[17:18] <lizmat> method pull-one() { nqp::if( $!iter, nqp::iterkey_s(nqp::shift($!iter)), IterationEnd) }

[17:18] <lizmat> could it be that the $!iter is from a role ?

[17:36] *** robertle left
[17:51] <timotimo> well, what does the spesh log say?

[17:54] <timotimo> it could be it gets inlined into an outer and that outer is preventing jitting

[18:21] <lizmat> I haven't looked at the spesh log yet...  I just see yellow with --profile  :-)

[18:33] <lizmat> could it be that nqp::iterkey_s is not jitted ?

[18:37] <timotimo> let me have a look

[18:38] <timotimo> well, it is in graph.c

[18:40] <lizmat> what should I be looking for in the spesh log ?

[18:40] <lizmat> expr bail ?

[18:40] <lizmat> n

[18:41] <timotimo> BAIL is for a complete bail

[18:41] <lizmat> something like: Unexpected opcode in invoke sequence: <speshresolve> ?

[18:41] <timotimo> i just saw that in my log, too

[18:41] <lizmat> yup, that's the difference

[18:42] <timotimo> ah, that's one message that has uppercase bail

[18:42] <lizmat> that seems odd

[18:42] <timotimo> there is also "JIT: bailed completely"

[18:42] <timotimo> speshresolve should be acceptable to just jit the exact same way as sp_speshresolve, tbh

[18:43] <timotimo> nope, wrong

[18:43] <lizmat> that looks really weird for a simple piece of code like: my %h = "a".."z" Z=> 1..26; for ^10_000 -> int $_ { Nil for %h.keys }

[18:45] *** dct left
[18:45] <timotimo> it surprises me that a speshresolve would survive spesh without being turned into an sp_speshresolve

[18:46] <timotimo> maybe there is no MVMSpeshPlanned available

[18:46] <timotimo> that could be an explanation in theory

[18:47] <timotimo> or if it came from an inline i guess?

[18:47] <timotimo> that's probably what

[18:48] <lizmat> well, the .value version of the code above is clean

[18:48] <lizmat> the implementation of the two iterators is identical except that one does iterkey_s

[18:48] <lizmat> and the other does iterval

[18:48] <timotimo> in that case it's probably important what it inlines

[18:50] <lizmat> just before the BAIL, is that a normal set of PHI's for such simple code ?

[18:51] <timotimo> oh, i'm looking at a spesh log for completely different code

[18:53] <lizmat> I mean: if the only difference in the executing code is nqp::iterkey_s vs iterval

[18:53] <lizmat> shouldn't the spesh log be more or less the same ?

[19:02] <lizmat> also: spesh log for .keys: 10273469  , for .values 10040117

[19:05] <timotimo> lines or bytes or what?

[19:06] <timotimo> i'm distracted with $grant stuff at the moment, but if you send me the files - they should compress very well with something like lzma -9 or so :) - i can have a look

[19:18] <b2gills> m: #`( lizmat: ) my %h = a => 1, b => 2; %h >>+=<< (1,2)

[19:18] <camelia> rakudo-moar dc67ee75b: OUTPUT: «Ambiguous call to 'infix(Hyper: Hash, List)'; these signatures all match:␤:(Hyper: Associative:D \left, Iterable:D \right, *%_)␤:(Hyper: Iterable:D \left, Iterable:D \right, *%_ --> Iterable:D)␤  in block <unit> at <tmp> line 1␤␤»

[19:20] <lizmat> b2gills: grrr

[19:20] <b2gills> I know right?

[19:20] <lizmat> timotimo: bytes

[19:22] <lizmat> timotimo: I'll compress even better:

[19:22] <lizmat> perl6 --profile -e 'my %h = "a".."z" Z=> 1..26; for ^10_000 -> int $_ { Nil for %h.keys }'

[19:22] <lizmat> MVM_SPESH_LOG=keys perl6 --profile -e 'my %h = "a".."z" Z=> 1..26; for ^10_000 -> int $_ { Nil for %h.keys }'

[19:22] <lizmat> MVM_SPESH_LOG=values perl6 --profile -e 'my %h = "a".."z" Z=> 1..26; for ^10_000 -> int $_ { Nil for %h.values }'

[19:23] <lizmat> how's that for compression  :-)

[19:23] <timotimo> haha

[19:24] <lizmat> b2gills: the thing is that that should not work

[19:24] <lizmat> because you cannot know the order of the keys in the hash

[19:25] <lizmat> so the offending multi is just for dieing

[19:25] <timotimo> gotta go AFK for a bit, though

[19:25] <lizmat> ok...  have fun being afk

[19:26] <b2gills> That's fair. I was just trying to break your code, and found something that didn't work.

[19:28] <jnthn> lizmat: I finally got a moment to write an answer on that SO question; thanks for the pointer to it. I'd kinda stopped checking often there, there's been not so many new ones of late.

[19:29] <lizmat> jnthn++

[19:29] <lizmat> b2gills: please keep those breakages coming!  :-)

[19:35] <b2gills> I always keep a tab openned to https://stackoverflow.com/questions/tagged/perl6+or+rakudo+or+rakudo-star?sort=active&pageSize=50

[20:38] <Geth> ¦ rakudo: cae9847e46 | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[20:38] <Geth> ¦ rakudo: foo

[20:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cae9847e46

[20:38] <Geth> ¦ rakudo: 481dbf9270 | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[20:38] <Geth> ¦ rakudo: Use List:D to dispatch on rather than Iterable

[20:38] <Geth> ¦ rakudo: 

[20:38] <Geth> ¦ rakudo: This appears to fix the MMD issue that Brad Gilbert++ found with:

[20:38] <Geth> ¦ rakudo: 

[20:38] <Geth> ¦ rakudo:    %h >>+<< (1,2)

[20:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/481dbf9270

[20:39] <lizmat> argh

[20:40] <lizmat> Commit message should have read:

[20:40] <lizmat> Don't create the list of keys beforehand, as the .keys and .values functions are guaranteed to have the same order while the structure of the hash is untouched.

[20:41] <lizmat> (for the "foo" one)

[20:56] *** patrickb joined
[20:57] *** p6bannerbot sets mode: +v patrickb

[21:09] <Geth> ¦ rakudo: 64a47d8727 | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[21:09] <Geth> ¦ rakudo: Improve error message for Associative >>op<< Iterable§

[21:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/64a47d8727

[21:21] <mst> AlexDaniel: can I please have a list of all IPs your the *ables are coming from? we seem to be poking limits again

[21:22] *** pmurias left
[21:27] *** pmurias joined
[21:27] *** p6bannerbot sets mode: +v pmurias

[21:53] <AlexDaniel> mst: there are just two, one ipv4 and another ipv6

[21:54] <AlexDaniel> mst: 94.23.219.181 aaand…

[22:01] <mst> ....ticipation

[22:03] <AlexDaniel> mst: and 2001:41d0:2:5eb5:: which you can see also, I guess? About half of them are using one and about another half are using the other

[22:06] <AlexDaniel> mst: what do you mean by limits? IIRC the limit is 10 which is why I made them use two IPs… that said, I plan to shut down some of the bots relatively soon (though it's unlikely the total count will go below 10…)

[22:07] *** [Tux] left
[22:07] <AlexDaniel> let me know if I should change something on my end

[22:28] *** [Tux] joined
[22:29] *** p6bannerbot sets mode: +v [Tux]

[22:42] <Geth> ¦ rakudo: c4445649f1 | (Elizabeth Mattijsen)++ | 2 files

[22:42] <Geth> ¦ rakudo: Mark ops generated by METAOP_ASSIGN with the power of pod

[22:42] <Geth> ¦ rakudo: 

[22:42] <Geth> ¦ rakudo: Unfortunately, this also needed a tweak in Block.WHY to make the setting

[22:42] <Geth> ¦ rakudo: build (the nextsame during setting building went into laland).

[22:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c4445649f1

[22:42] <Geth> ¦ rakudo: 19f0c84276 | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[22:42] <Geth> ¦ rakudo: Optimize assigning metaops

[22:42] <Geth> ¦ rakudo: 

[22:42] <Geth> ¦ rakudo: If the metaop is one of the >>op=<< persuasion, then we don't need to build

[22:42] <Geth> ¦ rakudo: a result to return, as the left hand side of the op *is* the result.  This

[22:42] <Geth> ¦ rakudo: makes >>+=<< about 8% faster.

[22:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/19f0c84276

[22:52] *** pmurias left
[23:00] <releasable6> Next release in ≈19 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:06] <japhb> Something tells me 4 blockers are unlikely to fall in the next 19 hours

[23:12] <AlexDaniel> hah

[23:12] <AlexDaniel> releasable6: status

[23:12] <releasable6> AlexDaniel, Next release in ≈19 hours. 4 blockers. 0 out of 154 commits logged

[23:12] <releasable6> AlexDaniel, Details: https://gist.github.com/37a8e05565a3bbb78d7f4cfead448df0

[23:12] <AlexDaniel> japhb: releasable6 is very optimistic :)

[23:12] <AlexDaniel> but

[23:12] <AlexDaniel> IIRC GH#2477 is resolved

[23:12] <synopsebot> GH#2477 [open]: https://github.com/rakudo/rakudo/issues/2477 [⚠ blocker ⚠] MoarVM panic: Register types do not match between value and node

[23:13] <AlexDaniel> I'm not sure, haven't checked it yet

[23:13] <AlexDaniel> GH#2451 is kinda half done

[23:13] <synopsebot> GH#2451 [open]: https://github.com/rakudo/rakudo/issues/2451 [⚠ blocker ⚠] Pre-2018.11 toasting

[23:13] <AlexDaniel>   GH#2113 can be postponed

[23:13] <synopsebot> GH#2113 [open]: https://github.com/rakudo/rakudo/issues/2113 [⚠ blocker ⚠] Revisit bug compatibility unfix for returning Proxy

[23:15] <AlexDaniel> fwiw I'm busy till tomorrow so will not be looking into things now

[23:17] <AlexDaniel> ok I don't know if GH#2477 is resolved or not. brrt fixed something but in the ticket there is no update yet

[23:17] <synopsebot> GH#2477 [open]: https://github.com/rakudo/rakudo/issues/2477 [⚠ blocker ⚠] MoarVM panic: Register types do not match between value and node

[23:27] *** j3nnn1 left
[23:38] *** patrickb left
