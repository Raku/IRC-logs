[00:19] *** lizmat left
[01:06] *** Zoffix joined
[01:06] *** p6bannerbot sets mode: +v Zoffix

[01:12] <Zoffix> I think that's largely impossible though, isn't it? .count-only must be able to figure out the elems without advancing the iterator. Even if we assume an already-fully-reified and cached list as input, you'd be left with a problem that you'd be executing the &Callable more than expected number of times in constructs like .grep[*-1], because you'd be calling it first to get the count-only, and then to get

[01:12] <Zoffix> the actual elems later

[01:12] <timotimo> oh, OK

[01:17] *** Zoffix left
[01:24] <Geth> Â¦ roast: 2908259df2 | (Zoffix Znet)++ | S05-mass/rx.t

[01:24] <Geth> Â¦ roast: Remove trailing whitespace

[01:24] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/2908259df2

[01:25] <Geth> Â¦ roast: dc89c6ac4d | (Zoffix Znet)++ | S05-mass/rx.t

[01:25] <Geth> Â¦ roast: [v6.d REVIEW] improve fancy-digit backref test desc

[01:25] <Geth> Â¦ roast: 

[01:25] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/2667e3edf

[01:25] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/dc89c6ac4d

[01:29] <Geth> Â¦ roast: c6ea815c72 | (Zoffix Znet)++ | S05-mass/rx.t

[01:29] <Geth> Â¦ roast: [v6.d REVIEW] Improve fancy-digit ** regex op test

[01:29] <Geth> Â¦ roast: 

[01:29] <Geth> Â¦ roast: - Test we match correct portion of data

[01:29] <Geth> Â¦ roast: - Test non-matching case too

[01:29] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/876785a94

[01:29] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/c6ea815c72

[01:30] *** fake_space_whale joined
[01:31] *** p6bannerbot sets mode: +v fake_space_whale

[01:34] <Geth> Â¦ roast: ee1fedaf94 | (Zoffix Znet)++ | S32-str/utf8-c8.t

[01:34] <Geth> Â¦ roast: Fix whitespace at end of file

[01:34] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/ee1fedaf94

[01:35] <Geth> Â¦ roast: 03042d0584 | (Zoffix Znet)++ | S32-str/utf8-c8.t

[01:35] <Geth> Â¦ roast: [v6.d REVIEW] Use standard test file routines

[01:35] <Geth> Â¦ roast: 

[01:35] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/65979128a

[01:35] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/03042d0584

[01:39] *** huggable joined
[01:39] *** ChanServ sets mode: +v huggable

[01:39] *** p6bannerbot sets mode: +v huggable

[01:49] <Geth> Â¦ roast: ea161c99bf | (Zoffix Znet)++ | S32-array/create.t

[01:49] <Geth> Â¦ roast: [v6.d REVIEW] Expand .Array on list writability tests

[01:49] <Geth> Â¦ roast: 

[01:49] <Geth> Â¦ roast: Test we actually get correct results

[01:49] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/890ca310e

[01:49] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/ea161c99bf

[01:58] *** fake_space_whale left
[02:02] <Geth> Â¦ roast: 884e75d976 | (Zoffix Znet)++ | S02-types/array-shapes.t

[02:02] <Geth> Â¦ roast: [v6.d REVIEW] Improve .= new shaped array test

[02:02] <Geth> Â¦ roast: 

[02:02] <Geth> Â¦ roast: Test we actually got right result.

[02:02] <Geth> Â¦ roast: (tested with .perl's rather than is-deeply, because the latter

[02:02] <Geth> Â¦ roast: dies with partially dim. views NYI)

[02:02] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/1f05be281

[02:02] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/884e75d976

[02:05] <Geth> Â¦ roast: 596f4fe414 | (Zoffix Znet)++ | S02-types/num.t

[02:05] <Geth> Â¦ roast: [v6.d REVIEW] Clarify tests that use U+2212 minus

[02:05] <Geth> Â¦ roast: 

[02:05] <Geth> Â¦ roast: Document we use fancy minus, to care for fonts that render it the

[02:05] <Geth> Â¦ roast: same as regular minus, making tests look duplicated.

[02:05] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/bbdbb0158

[02:05] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/596f4fe414

[02:08] <Geth> Â¦ roast: db0c3d1fa7 | (Zoffix Znet)++ | S32-num/rat.t

[02:08] <Geth> Â¦ roast: [v6.d REVIEW] Improve Real cmp RatStr test

[02:08] <Geth> Â¦ roast: 

[02:08] <Geth> Â¦ roast: - Test we get right results too

[02:08] <Geth> Â¦ roast: - Test in reverse order as well

[02:08] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/6bbfcc0ee

[02:08] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/db0c3d1fa7

[02:24] *** klapperl left
[02:33] *** klapperl joined
[02:34] *** p6bannerbot sets mode: +v klapperl

[03:11] *** MasterDuke left
[03:14] *** MasterDuke joined
[03:14] *** p6bannerbot sets mode: +v MasterDuke

[03:14] *** MasterDuke left
[03:14] *** MasterDuke joined
[03:14] *** herbert.freenode.net sets mode: +v MasterDuke

[03:14] *** p6bannerbot sets mode: +v MasterDuke

[04:10] <Geth> Â¦ roast: c25b7343e8 | (Zoffix Znet)++ | S16-io/lines.t

[04:10] <Geth> Â¦ roast: [v6.d REVIEW] Use standard temp file routine

[04:10] <Geth> Â¦ roast: 

[04:10] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/7b680fe5e

[04:10] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/c25b7343e8

[04:28] <Geth> Â¦ roast: f9574de418 | (Zoffix Znet)++ | S32-num/rat.t

[04:28] <Geth> Â¦ roast: [v6.d REVIEW] Improve Rational subclass test

[04:28] <Geth> Â¦ roast: 

[04:28] <Geth> Â¦ roast: Check the resultant types and num/den too

[04:28] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/a4290dfd6

[04:28] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/f9574de418

[04:33] <Geth> Â¦ 6.d-prep: 97a61a3ee9 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[04:33] <Geth> Â¦ 6.d-prep: Update Zoffix's review commit and note weak points of the review

[04:33] <Geth> Â¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/97a61a3ee9

[04:41] <Geth> Â¦ roast: 50138a913f | (Zoffix Znet)++ | 2 files

[04:41] <Geth> Â¦ roast: [v6.d REVIEW] Move Supply:U.skip test to appendix

[04:41] <Geth> Â¦ roast: 

[04:41] <Geth> Â¦ roast: We might alter this behaviour, based on R#2100 results

[04:41] <Geth> Â¦ roast: https://github.com/rakudo/rakudo/issues/2100

[04:41] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/24af69c6c

[04:41] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/50138a913f

[04:41] <synopsebot> R#2100 [open]: https://github.com/rakudo/rakudo/issues/2100 [6.d review][@LARRY][audit entire codebase for such issues][consistency] Inconsistent behaviour with methods called on :Us

[04:42] <Geth> Â¦ rakudo: 741ae6f4ed | (Zoffix Znet)++ | t/spectest.data

[04:42] <Geth> Â¦ rakudo: Add APPENDICES/A02-some-day-maybe/concreteness.t to test files

[04:42] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/741ae6f4ed

[04:46] <Geth> Â¦ roast: 07f252d974 | (Zoffix Znet)++ | S17-supply/skip.t

[04:46] <Geth> Â¦ roast: [v6.d REVIEW] Fix broken Supply.skip test

[04:46] <Geth> Â¦ roast: 

[04:46] <Geth> Â¦ roast: The test was passing for the wrong reason: death was due to Supply.new

[04:46] <Geth> Â¦ roast: call and not the erroneous .skip call. Fix by using more precise test.

[04:46] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/24af69c6c

[04:46] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/07f252d974

[04:52] <Geth> Â¦ roast: e0cdd5deef | (Zoffix Znet)++ | S32-list/batch.t

[04:52] <Geth> Â¦ roast: [v6.d REVIEW] Precisify .batch tests

[04:52] <Geth> Â¦ roast: 

[04:52] <Geth> Â¦ roast: Test the actual types and their structure instead of the stringified

[04:52] <Geth> Â¦ roast: shadow (e.g, the tests would not detect Arrays being returned instead

[04:52] <Geth> Â¦ roast: of Seqs and the 20 batch test would not detect lack of batching instead

[04:52] <Geth> Â¦ roast: of a single batch being returned)

[04:52] <Geth> Â¦ roast: 

[04:52] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/ca42a3750

[04:52] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/e0cdd5deef

[04:59] <Geth> Â¦ roast: fc96f8a711 | (Zoffix Znet)++ | S12-class/attributes.t

[04:59] <Geth> Â¦ roast: [v6.d REVIEW] Improve :: class in attr init test

[04:59] <Geth> Â¦ roast: 

[04:59] <Geth> Â¦ roast: Actually test the resultant attribute has correct type

[04:59] <Geth> Â¦ roast: Orig: https://github.com/perl6/roast/commit/afe080a02

[04:59] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/fc96f8a711

[06:18] *** lizmat joined
[06:19] *** p6bannerbot sets mode: +v lizmat

[06:47] *** lizmat left
[07:46] *** klapperl_ joined
[07:47] *** p6bannerbot sets mode: +v klapperl_

[07:49] *** klapperl left
[08:22] *** MasterDuke left
[08:41] <Geth> Â¦ rakudo: 3b61d4f230 | (Elizabeth Mattijsen)++ | src/core/Iterator.pm6

[08:41] <Geth> Â¦ rakudo: Update internal doc of Iterator.count-only/bool-only

[08:41] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3b61d4f230

[08:41] <Geth> Â¦ rakudo: 6977973dec | (Elizabeth Mattijsen)++ | src/core/Map.pm6

[08:41] <Geth> Â¦ rakudo: Simplify the Map.kv iterator

[08:41] <Geth> Â¦ rakudo: 

[08:41] <Geth> Â¦ rakudo: Using the now existing roles/classes/iterators

[08:41] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6977973dec

[08:53] *** AlexDaniel joined
[08:53] *** p6bannerbot sets mode: +v AlexDaniel

[09:05] <Geth> Â¦ rakudo: 64ddacab8f | (Elizabeth Mattijsen)++ | src/core/Str.pm6

[09:05] <Geth> Â¦ rakudo: Make sure Str.Lines iterator has correct bool-only semantics

[09:05] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/64ddacab8f

[09:23] <Geth> Â¦ rakudo: 9738dfbf21 | (Elizabeth Mattijsen)++ | src/core/Shaped1Array.pm6

[09:23] <Geth> Â¦ rakudo: Correct 1dim shaped array iterator count-only/bool-only semantics

[09:23] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9738dfbf21

[09:33] *** robertle joined
[09:34] *** p6bannerbot sets mode: +v robertle

[09:36] <Geth> Â¦ rakudo: d1e80dfe28 | (Elizabeth Mattijsen)++ | src/core/Str.pm6

[09:36] <Geth> Â¦ rakudo: Correct Str.comb.count-only/bool-only semantics

[09:36] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d1e80dfe28

[09:44] <Geth> Â¦ rakudo: 9ff1736761 | (Elizabeth Mattijsen)++ | src/core/Str.pm6

[09:44] <Geth> Â¦ rakudo: Disable Str.comb(N).count-only/bool-only semantics for now

[09:44] <Geth> Â¦ rakudo: 

[09:44] <Geth> Â¦ rakudo: This Iterator needs an overhaul.

[09:44] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9ff1736761

[09:52] *** donaldh left
[10:30] *** travis-ci joined
[10:30] *** p6bannerbot sets mode: +v travis-ci

[10:30] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make sure Str.Lines iterator has correct bool-only semantics'

[10:30] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/426044584 https://github.com/rakudo/rakudo/compare/6977973dec19...64ddacab8f8e

[10:30] *** travis-ci left
[10:31] <buggable> [travis build above] â  Did not recognize some failures. Check results manually.

[10:50] *** cognominal-p6 joined
[10:51] *** p6bannerbot sets mode: +v cognominal-p6

[10:54] <[Tux]> Rakudo version 2018.08-54-g9ff173676 - MoarVM version 2018.08-38-g477ec445f

[10:54] <[Tux]> csv-test-xs-20      0.427 -  0.450

[10:54] <[Tux]> csv-ip5xs           0.939 -  0.954

[10:54] <[Tux]> test-t --race       0.941 -  1.007

[10:54] <[Tux]> test-t              2.160 -  2.165

[10:54] <[Tux]> csv-ip5xs-20        7.570 -  7.704

[10:54] <[Tux]> test                8.091 -  9.441

[10:54] <[Tux]> test-t-20 --race   13.374 - 13.810

[10:54] <[Tux]> csv-parser         24.822 - 25.170

[10:54] <[Tux]> test-t-20          38.216 - 40.236

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: 09f561314f | (Zoffix Znet)++ | MISC/bug-coverage.t

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: Cover more iterator opt tests

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: 

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: Covers bugs fixed by

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: https://github.com/rakudo/rakudo/commit/64ddacab8f

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: https://github.com/rakudo/rakudo/commit/9738dfbf21

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: https://github.com/rakudo/rakudo/commit/d1e80dfe28

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: https://github.com/rakudo/rakudo/commit/9ff1736761

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: 

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: Merge blocked by R#2075 https://github.com/rakudo/rakudo/issues/2075

[11:30] <synopsebot> R#2075 [open]: https://github.com/rakudo/rakudo/issues/2075 [6.d review][@LARRY] Meaning of `.bool-only`/`.count-only` after receiving IterationEnd ?

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: as some of the opt methods return incorrect values after IterationEnd

[11:30] <Geth> Â¦ roast/moaaar-iterator-cover: review: https://github.com/perl6/roast/commit/09f561314f

[11:32] <Geth> Â¦ 6.d-prep: 5b4e388811 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[11:32] <Geth> Â¦ 6.d-prep: List another roast commit that hangs on .bool-only/.count-only meaning

[11:32] <Geth> Â¦ 6.d-prep: 

[11:32] <Geth> Â¦ 6.d-prep: Needs resolution to R#2075 https://github.com/rakudo/rakudo/issues/2075

[11:32] <Geth> Â¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/5b4e388811

[11:32] <synopsebot> R#2075 [open]: https://github.com/rakudo/rakudo/issues/2075 [6.d review][@LARRY] Meaning of `.bool-only`/`.count-only` after receiving IterationEnd ?

[11:34] * cognominal-p6 notes that both in the doc and specs repository, sigiless and sigiled sometimes written with two l, sometimes with one. For sake of grepping, we should choose only one of the two spellings.

[11:41] *** MasterDuke joined
[11:41] *** p6bannerbot sets mode: +v MasterDuke

[11:41] *** MasterDuke left
[11:41] *** MasterDuke joined
[11:41] *** herbert.freenode.net sets mode: +v MasterDuke

[11:41] *** p6bannerbot sets mode: +v MasterDuke

[11:56] *** travis-ci joined
[11:56] *** p6bannerbot sets mode: +v travis-ci

[11:56] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Disable Str.comb(N).count-only/bool-only semantics for now

[11:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/426052368 https://github.com/rakudo/rakudo/compare/d1e80dfe285c...9ff173676126

[11:56] *** travis-ci left
[12:01] *** cognominal-p6 left
[12:22] <MasterDuke> are [Tux]'s most recent numbers a bit slower? or am i imagining that?

[13:19] <MasterDuke> m: my Int $a := 50_000_000; Nil for ^$a; say now - INIT now

[13:19] <camelia> rakudo-moar 9ff173676: OUTPUT: Â«4.1872836â¤Â»

[13:20] <MasterDuke> m: use nqp; my Int $a := 50_000_000; my Int $b := -1; my Int $c := nqp::clone($a); nqp::while(nqp::isle_I(nqp::bind($b,nqp::add_I($b,1,Int)),$c),Nil); say now - INIT now

[13:20] <camelia> rakudo-moar 9ff173676: OUTPUT: Â«3.6378301â¤Â»

[13:22] <MasterDuke> timotimo: ^^^ something like that for the non-native/literal/constant for-range -> while conversion?

[13:24] <MasterDuke> lizmat, et al.: any thoughts either?

[13:27] *** ExtraCrispy joined
[13:28] *** p6bannerbot sets mode: +v ExtraCrispy

[13:33] *** cognominal-p6 joined
[13:34] *** p6bannerbot sets mode: +v cognominal-p6

[13:48] *** diakopter joined
[13:48] *** p6bannerbot sets mode: +v diakopter

[13:49] *** Zoffix joined
[13:49] *** p6bannerbot sets mode: +v Zoffix

[13:49] <Zoffix> MasterDuke: that's not a constant tho

[13:49] <Zoffix> m: my Int $b := -1; $b := 42; say $b

[13:49] <camelia> rakudo-moar 9ff173676: OUTPUT: Â«42â¤Â»

[13:50] <MasterDuke> heh, that should have been "non-(native/literal/constant)"

[13:52] <MasterDuke> i.e., we currently only do the conversion/optimization for natives/literals/constants, i'm trying to see if it can be done for other things

[13:54] <Zoffix> Ah, right, I thought it'd be breakable, but it ain't

[13:54] <Zoffix> m: my Int $a := 5; for ^2 { .say for ^$a; $a := 10 };

[13:54] <camelia> rakudo-moar 9ff173676: OUTPUT: Â«0â¤1â¤2â¤3â¤4â¤0â¤1â¤2â¤3â¤4â¤5â¤6â¤7â¤8â¤9â¤Â»

[13:54] <Zoffix> like with this case, but the optimized version does handle it (tho it got an off-by-one error)

[13:55] <Zoffix> but... 

[13:55] * Zoffix tries to break it

[13:57] *** cognominal-p6 left
[13:58] *** cognominal-p6 joined
[13:58] *** p6bannerbot sets mode: +v cognominal-p6

[13:59] <Zoffix> m: EVAL 'use MONKEY; augment class Range { multi method new (0, 10) { ^3 } }'; my Int $a := 5; for ^2 { .say for ^$a; $a := 10 };

[13:59] <camelia> rakudo-moar 9ff173676: OUTPUT: Â«0â¤1â¤2â¤3â¤4â¤0â¤1â¤2â¤Â»

[13:59] <Zoffix> DIHWIDT? :)

[13:59] <Zoffix> That probably applies to native case too

[14:00] <Zoffix> yup

[14:00] <Zoffix> $ perl6 -e 'm: EVAL ï½¢use MONKEY; augment class Range { multi method new (0, 10) { ^3 } }ï½£; .print for ^10'                                                                                                                        

[14:00] <Zoffix> 0123456789

[14:00] <Zoffix> $ perl6 --optimize=off -e 'm: EVAL ï½¢use MONKEY; augment class Range { multi method new (0, 10) { ^3 } }ï½£; .print for ^10'

[14:00] <Zoffix> 012

[14:01] * Zoffix votes DIHWIDT

[14:01] * MasterDuke goes afk for a bit, but hope the comments keep coming

[14:02] *** Zoffix left
[14:21] *** cognominal-p6 left
[14:26] *** cognominal-p6 joined
[14:27] *** p6bannerbot sets mode: +v cognominal-p6

[14:37] <AlexDaniel> cognominal-p6: please file a ticket

[14:37] <AlexDaniel> cognominal-p6: pretty sure it will be fixed very quickly in the doc repo

[15:19] *** cognominal-p6 left
[15:31] *** cognominal-p6 joined
[15:32] *** p6bannerbot sets mode: +v cognominal-p6

[15:35] *** cognominal-p6 left
[15:35] *** cognominal-p6 joined
[15:36] *** p6bannerbot sets mode: +v cognominal-p6

[15:59] *** cognominal-p6 left
[16:14] *** diakopter left
[17:03] *** diakopter joined
[17:03] *** p6bannerbot sets mode: +v diakopter

[18:11] *** cognominal-p6 joined
[18:12] *** p6bannerbot sets mode: +v cognominal-p6

[18:12] <MasterDuke> if nqp::objprimspec($a) == 0, that means it's an object, right?

[18:13] *** Kaiepi left
[18:13] <timotimo> that's right

[18:14] *** Kaiepi joined
[18:14] <MasterDuke> thanks

[18:15] *** p6bannerbot sets mode: +v Kaiepi

[18:15] <timotimo> i got a little shout-out by jnthn for my profiler frontend work during an SPW2018 lightning talk <3

[18:16] <MasterDuke> nice

[18:25] *** cognominal-p6 left
[18:25] *** cognominal-p6 joined
[18:26] *** p6bannerbot sets mode: +v cognominal-p6

[18:31] *** diakopter left
[18:35] *** diakopter joined
[18:35] *** p6bannerbot sets mode: +v diakopter

[18:51] *** cognominal-p6 left
[18:57] *** Kaiepi left
[19:03] *** Kaiepi joined
[19:03] *** p6bannerbot sets mode: +v Kaiepi

[19:07] <MasterDuke> hm, why would `my $vname := $!symbols.find_lexical_symbol($node.name);` die with `Cannot look up attributes in a VMNull type object`? fwiw, `$node.name` is '$max'

[19:10] *** cognominal-p6 joined
[19:11] *** p6bannerbot sets mode: +v cognominal-p6

[19:22] *** cognominal-p6 left
[19:22] *** cognominal-p6 joined
[19:23] *** p6bannerbot sets mode: +v cognominal-p6

[19:37] *** cognominal-p6 left
[20:06] <Geth> Â¦ nqp/master: 4 commits pushed by (Stefan Seifert)++, (PaweÅ Murias)++

[20:06] <Geth> Â¦ nqp/master: d0e72fa9e5 | Map hllbool and hllboolfor ops

[20:06] <Geth> Â¦ nqp/master: 365113176d | Add tests for nqp::hllboolfor and nqp::hllbool

[20:06] <Geth> Â¦ nqp/master: 92f2ba09d7 | [js] Implement nqp::hllbool and nqp::hllboolfor

[20:06] <Geth> Â¦ nqp/master: a640e8d75f | [jvm] Implement nqp::hllbool and nqp::hllboolfor

[20:06] <Geth> Â¦ nqp/master: review: https://github.com/perl6/nqp/compare/715ae5d87172...a640e8d75f07

[20:07] <Geth> Â¦ rakudo/master: 5 commits pushed by (Stefan Seifert)++

[20:07] <Geth> Â¦ rakudo/master: 672196cdd1 | Set true_value and false_value in hllconfig

[20:07] <Geth> Â¦ rakudo/master: 20feda7026 | Move up initialization of hllconfig to have hllbool available

[20:07] <Geth> Â¦ rakudo/master: 170ffd40ca | Replace use of p6bool by hllbool and hllboolfor

[20:07] <Geth> Â¦ rakudo/master: 7e69c6408b | Remove p6bool extop

[20:07] <Geth> Â¦ rakudo/master: de4e82259b | Remove obsolete p6settypes extop

[20:07] <Geth> Â¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/9ff173676126...de4e82259be3

[20:25] *** travis-ci joined
[20:25] *** p6bannerbot sets mode: +v travis-ci

[20:25] <travis-ci> NQP build failed. PaweÅ Murias '[jvm] Implement nqp::hllbool and nqp::hllboolfor'

[20:25] <travis-ci> https://travis-ci.org/perl6/nqp/builds/426181532 https://github.com/perl6/nqp/compare/715ae5d87172...a640e8d75f07

[20:25] *** travis-ci left
[20:36] *** travis-ci joined
[20:36] *** p6bannerbot sets mode: +v travis-ci

[20:36] <travis-ci> Rakudo build failed. Stefan Seifert 'Remove obsolete p6settypes extop

[20:36] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/426181691 https://github.com/rakudo/rakudo/compare/9ff173676126...de4e82259be3

[20:36] *** travis-ci left
[20:36] <buggable> [travis build above] â  Did not recognize some failures. Check results manually.

[20:41] <MasterDuke> nine: just got a segv in stage parse

[20:46] <MasterDuke> nine: https://gist.github.com/MasterDuke17/52aacbcc1ff746d26dcacbc09f8282b4

[20:48] <MasterDuke> same segv with expr jit disabled, but seems to be ok with regular jit disabled

[21:29] *** user___ joined
[21:30] *** diakopter left
[21:30] *** user___ left
[21:30] <MasterDuke> no segv under valgrind so far

[21:32] *** user___ joined
[21:32] *** user___ left
[21:33] *** diakopter joined
[21:33] *** p6bannerbot sets mode: +v diakopter

[22:30] <timotimo> looks like there's a small performance win in json::fast by putting the parse stuff into methods in a class and having $!pos and $!text instead of passing them around as arguments

[22:32] *** cognominal-p6 joined
[22:33] *** p6bannerbot sets mode: +v cognominal-p6

[22:37] <MasterDuke> timotimo: did you see my question about $!symbols.find_lexical_symbol? any idea?

[22:39] *** cognominal-p6 left
[22:39] *** cognominal-p6 joined
[22:40] *** p6bannerbot sets mode: +v cognominal-p6

[22:41] <timotimo> oh? i must have missed it

[22:41] <timotimo> oh, there it is

[22:41] <timotimo> did you get a breakpoint in gdb to stop there?

[22:42] <MasterDuke> i haven't yet

[22:42] <timotimo> m: say 3.47 / 3.72

[22:42] <camelia> rakudo-moar 9ff173676: OUTPUT: Â«0.932796â¤Â»

[22:42] <timotimo> about 7% less time spent when using attributes

[22:43] <MasterDuke> nice

[22:44] <timotimo> that shall add up since so many things use JSON::Fast

[22:48] <timotimo> m: say 3.18 / 3.36

[22:48] <camelia> rakudo-moar 9ff173676: OUTPUT: Â«0.946429â¤Â»

[22:48] <timotimo> only 5% with postrelease-opts

[22:48] <timotimo> but that may not land in the next release after the next one, so ...

[22:49] <MasterDuke> i breaked at that MVM_exception_throw_adhoc

[22:50] <timotimo> OK, can you find the right spot in the bytecode? call MVM_dump_bytecode(tc)?

[22:51] <MasterDuke> 00220      getattr_o          loc_24_obj, loc_22_obj, loc_3_obj, '$!symbols', 0

[22:51] <MasterDuke> ...

[22:51] <MasterDuke> 00228      findmeth           loc_22_obj, loc_23_obj, 'find_lexical_symbol'

[22:51] <timotimo> is there a --> anywhere?

[22:52] <MasterDuke> 00217   -> getlex_no          loc_22_obj, 'self'

[22:52] <MasterDuke> should i gist this whole section?

[22:52] <timotimo> ok, that's probably just the cur_op being incremented after finishing the getattr or something

[22:52] <timotimo> it sounds like your self may be null

[22:54] *** cognominal-p6 left
[22:54] <MasterDuke> i've made some edits, but i'm essentially in here https://github.com/rakudo/rakudo/blob/master/src/Perl6/Optimizer.nqp#L1048-L1057

[22:58] <timotimo> aha

[22:58] <timotimo> you're inside a sub, yeah?

[22:58] <timotimo> that makes it difficult to use $!foo :)

[23:04] <timotimo> MasterDuke: does that give you a way forward?

[23:06] <MasterDuke> oh, ha

[23:09] <MasterDuke> timotimo++

[23:10] <timotimo> sorry it took like four hours :(

[23:11] <MasterDuke> no worries, there was dinner and gdbing the new segv in that time

[23:14] *** epony left
[23:20] <MasterDuke> heh, just turning the sub into a method won't work

[23:22] <timotimo> i hope you also put a self. in front of every time it's used?

[23:22] <timotimo> otherwise it'll look a bit like this

[23:22] <timotimo> nqp-m: foo()

[23:22] <camelia> nqp-moarvm: OUTPUT: Â«Cannot invoke this object (REPR: Null; VMNull)â¤   at <tmp>:1  (<ephemeral file>:<mainline>)â¤ from gen/moar/stage2/NQPHLL.nqp:1567  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPHLL.moarvm:eval)â¤ from gen/moar/stage2/NQPHLL.nqp:1806  (/home/camelia/rakudoâ¦Â»

[23:23] <MasterDuke> yeah, but `Cannot call method 'get_bound' on a null object`

[23:23] <MasterDuke> i.e., i did put self

[23:25] <timotimo> from a method? :)

[23:26] <MasterDuke> nope, it's in the mainline of the class

[23:26] <timotimo> that's not going to work, then

[23:27] <timotimo> at that point, no instance exists

[23:28] <MasterDuke> yep

[23:38] <timotimo> i'm not entirely sure why you'd call the method from the mainline of the class anyway

[23:43] *** fake_space_whale joined
[23:43] <MasterDuke> get_bound is used to populate %range_bounds

[23:43] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Optimizer.nqp#L1062-L1087

[23:44] *** p6bannerbot sets mode: +v fake_space_whale

[23:44] <timotimo> well, it'll be extremely difficult to get at %!symbols in that case

[23:44] <timotimo> so maybe pass %!symbols as an argument whenever it's potentially needed

[23:44] <timotimo> then get_bounds can become a sub again

[23:45] <MasterDuke> yeah, that might be easier overall

[23:47] *** Kaiepi left
[23:50] <Geth> Â¦ nqp: db0f1175ad | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[23:50] <Geth> Â¦ nqp: [MoarVM Bump] Brings 17 commits

[23:50] <Geth> Â¦ nqp: 

[23:50] <Geth> Â¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.08-28-g2fb3265...2018.08-45-gef47433

[23:50] <Geth> Â¦ nqp: ef47433 Teach the lego JIT to compile hllbool, too

[23:50] <Geth> Â¦ nqp: c1c2b7e JIT compile hllboolfor

[23:50] <Geth> Â¦ nqp: 756a97d JIT compile hllbool

[23:50] <Geth> Â¦ nqp: 7c5740f Teach spesh to replace hllboolfor by the result for known values

[23:50] <Geth> Â¦ nqp: <â¦commit message has 13 more linesâ¦>

[23:51] <Geth> Â¦ nqp: review: https://github.com/perl6/nqp/commit/db0f1175ad

[23:51] <Geth> Â¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.08-28-g2fb3265...2018.08-45-gef47433

[23:51] <Geth> Â¦ rakudo: 3272207ae5 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[23:51] <Geth> Â¦ rakudo: [NQP Bump] Brings 11 commits

[23:51] <Geth> Â¦ rakudo: 

[23:51] <Geth> Â¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.08-35-ge2cb00a...2018.08-46-gdb0f117

[23:51] <Geth> Â¦ rakudo: db0f117 [MoarVM Bump] Brings 17 commits

[23:51] <Geth> Â¦ rakudo: a640e8d [jvm] Implement nqp::hllbool and nqp::hllboolfor

[23:51] <Geth> Â¦ rakudo: 92f2ba0 [js] Implement nqp::hllbool and nqp::hllboolfor

[23:51] <Geth> Â¦ rakudo: 3651131 Add tests for nqp::hllboolfor and nqp::hllbool

[23:51] <Geth> Â¦ rakudo: <â¦commit message has 26 more linesâ¦>

[23:51] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3272207ae5

[23:51] <Geth> Â¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.08-35-ge2cb00a...2018.08-46-gdb0f117

[23:52] *** Zoffix joined
[23:52] *** p6bannerbot sets mode: +v Zoffix

[23:54] <Zoffix> MasterDuke: ^ try with those bumps. I don't get no segvs

[23:54] <Zoffix> ZOFVM: Files=1305, Tests=153123, 152 wallclock secs (21.77 usr  3.28 sys + 3244.31 cusr 172.21 csys = 3441.57 CPU)

[23:55] <Zoffix> nine++ # don't know if it's real or if google is giving more juice to my VM, but I'm seeing an 11% improvement in stresstest run

[23:57] <Zoffix> (actually, I forgot how many days ago I ran last stresstest, so it might be lizmat++'s perf improvements too :))

[23:58] <MasterDuke> Zoffix: same segv (i was on HEAD of all three repos before, so not surprising the bumps didn't change anything)

[23:59] <Zoffix> ZOFFLOP: t/spec/S17-promise/lock-async-stress2.t  SEGV + "MoarVM panic: Corrupt multi dispatch cache: cur_node != 0, re-check == (nil)" on another un

[23:59] <timotimo> bit the hllbool merge was very new, wasn't it?

[23:59] <MasterDuke> i had rebuilt immediately after it landed

[23:59] <timotimo> OK

[23:59] <timotimo> rakudo fully rebuilt?

