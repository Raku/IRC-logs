[00:30] <Kaiepi> did i open https://github.com/MoarVM/MoarVM/issues/794 in the wrong place?

[00:46] <array_of_scalars> Can anybody point me to a URL/paper that keeps tracks of speed/performance changes across the various moarVM/rakudo star releases?

[00:49] <MasterDuke> array_of_scalars: here's one http://tux.nl/Talks/CSV6/speed4.html

[00:51] <MasterDuke> Kaiepi: i think so. can you recompile your MoarVM with --debug=3 ?

[00:51] <MasterDuke> that should give a more useful backtrace

[00:52] <array_of_scalars> MasterDuke: Cheers, that's cool.

[00:53] <MasterDuke> array_of_scalars: we also have ways to run code on previous releases, if you have something in particular you'd like to benchmark

[00:58] <array_of_scalars> MasterDuke: I am trying to make the case to move from a Perl 5 DBI and XML::Parser to the Perl 6 DBIish and XML::Parser::Tiny. Comparative performance between Perl 5 and 6 is of no interest. What is of interest is for me to prove that things are improving.

[00:59] <MasterDuke> they definitely are that

[01:16] <tbrowder> Zoffix: in all my experiments with your code and with the nqp test 111*spawn*t i have NOT been able to capture stderr. something seems to block when trying to simply substitute stderr for stdout. the moarvm underlying code so far has not revealed anything to me but i have just started looking at it to get familiar with mapping of vars and hash keys. i need some smart person to demonstrate capturing stderr!

[03:20] <AlexDaniel> reportable6: 2018-02-05T00:00:00Z 2018-02-12T00:00:00Z

[03:20] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[03:21] <reportable6> AlexDaniel, https://gist.github.com/3ac0cdfe3b4eb15c833664a98aec5a9e

[03:21] <AlexDaniel> weekly: https://gist.github.com/3ac0cdfe3b4eb15c833664a98aec5a9e

[03:21] <notable6> AlexDaniel, Noted!

[06:23] <Zoffix> Someone said I should do this week's weekly again.

[06:25] <lizmat> Zoffix: working on it

[06:25] <lizmat> almost finished

[06:26] <Zoffix> Ah, OK :)

[06:27] <lizmat> you're off the hook  :-)

[06:56] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/02/12/2018-07-a-quick-one-from-apopka/

[07:45] <nine> lizmat++ # thanks a lot!

[08:29] <[Tux]> Rakudo version 2018.01-185-g00af9ce27 - MoarVM version 2018.01-82-g296620e86

[08:29] <[Tux]> csv-test-xs-20      0.429 -  0.457

[08:29] <[Tux]> csv-ip5xs           0.802 -  0.832

[08:29] <[Tux]> test-t --race       1.082 -  1.085

[08:29] <[Tux]> test-t              2.586 -  2.635

[08:29] <[Tux]> csv-ip5xs-20        7.567 -  7.795

[08:29] <[Tux]> test                9.307 -  9.394

[08:29] <[Tux]> csv-parser         11.630 - 11.975

[08:29] <[Tux]> test-t-20 --race   16.549 - 17.365

[08:29] <[Tux]> test-t-20          47.881 - 48.521

[10:42] <dogbert2_> m: for 1..1000 { $^i %% $_ && put "$_ " for ^$i }

[10:42] <camelia> rakudo-moar 00af9ce27: OUTPUT: «(signal SEGV)1 ␤1 ␤1 ␤2 ␤1 ␤1 ␤2 ␤3 ␤1 ␤1 ␤2 ␤4 ␤1 ␤3 ␤1 ␤2 ␤5 ␤1 ␤1 ␤2 ␤3 ␤4 ␤6 ␤1 ␤1 ␤2 ␤7 ␤1 ␤3 ␤5 ␤1 ␤2 ␤4 ␤8 ␤1 ␤1 ␤2 ␤3 ␤6 ␤9 ␤1 ␤1 ␤2 ␤4 ␤5 ␤10 ␤1 ␤3 …»

[10:42] <dogbert2_> commit: 2018.01 for 1..1000 { $^i %% $_ && put "$_ " for ^$i }

[10:42] <committable6> dogbert2_, ¦2018.01: «1 ␤ «exit signal = SIGSEGV (11)»»

[10:42] <dogbert2_> commit: 2017.12 for 1..1000 { $^i %% $_ && put "$_ " for ^$i }

[10:43] <committable6> dogbert2_, https://gist.github.com/043319c6ee7aec7c0b01b1939c5c68dd

[10:47] <Geth> ¦ rakudo: 34b3356fda | (Zoffix Znet)++ | 2 files

[10:47] <Geth> ¦ rakudo: Make &wanted mark passed node as wanted…

[10:47] <Geth> ¦ rakudo:

[10:47] <Geth> ¦ rakudo: …if none of the other conditions managed to take care of it.

[10:47] <Geth> ¦ rakudo: Looks like some constructs, like macro calls, just wanted()

[10:47] <Geth> ¦ rakudo: things like QAST::Vars and QAST::WVals, without them wrapped

[10:47] <Geth> ¦ rakudo: in anything else. We missed those, which resulted in spurious

[10:47] <Geth> ¦ rakudo: useless use warnings produced.

[10:47] <Geth> ¦ rakudo:

[10:47] <Geth> ¦ rakudo: Fixes R#1512: https://github.com/rakudo/rakudo/issues/1512

[10:47] <synopsebot> R#1512 [open]: https://github.com/rakudo/rakudo/issues/1512 [regression][useless useless] Useless useless use warning in OO::Monitors

[10:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/34b3356fda

[12:15] <Geth> ¦ roast: d648005e4c | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[12:15] <Geth> ¦ roast: Revert test for coercers not coercing defaults

[12:15] <Geth> ¦ roast:

[12:15] <Geth> ¦ roast: There's a problematic case where target isn't a subclass of source,

[12:15] <Geth> ¦ roast: filed as https://github.com/rakudo/rakudo/issues/1517

[12:15] <Geth> ¦ roast:

[12:15] <Geth> ¦ roast: So I'm reverting the original fix that made this work, for now.

[12:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d648005e4c

[12:15] <Geth> ¦ rakudo: e72eb01ed0 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[12:15] <Geth> ¦ rakudo: Revert "Use target type as default default for coercers"

[12:15] <Geth> ¦ rakudo:

[12:15] <Geth> ¦ rakudo: This reverts commit ae697080d2d522552e7fb8d168a1bfd2da127bae.

[12:15] <Geth> ¦ rakudo:

[12:15] <Geth> ¦ rakudo: Needs a bit more cooking, in light of

[12:15] <Geth> ¦ rakudo: R#1517 https://github.com/rakudo/rakudo/issues/1517

[12:15] <synopsebot> R#1517 [open]: https://github.com/rakudo/rakudo/issues/1517 Type coercion turns optional named argument into required one substantially

[12:15] <Geth> ¦ rakudo:

[12:15] <Geth> ¦ rakudo: Fixes R#1519 https://github.com/rakudo/rakudo/issues/1519

[12:15] <synopsebot> R#1519 [open]: https://github.com/rakudo/rakudo/issues/1519 [⚠ blocker ⚠] Recent coercer work blows up in fast-path binder: "Internal error: inconsistent bind result"

[12:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e72eb01ed0

[12:30] <Geth> ¦ nqp: tbrowder++ created pull request #408: add a test for pod panic, but stderr is blocking

[12:30] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/408

[12:36] <tbrowder> ref my nqp PR #408, could stderr hanging on spawnasync be symptomatic of other problems? i don’t see any existing tests for capturing stderr.

[12:46] <tbrowder> i just added a new issue for nqp::spawnprocasync not testing stderr or merge capture.

[12:47] <tbrowder> is the problem that each output stream needs its own buffer?

[12:48] <tbrowder> *buffer for capture? investigating that avenue...

[12:56] <tbrowder> don’t think so, unique seq num per read i think...

[13:14] <tbrowder> trying to understand func spawn_permit in moarvm io procops.c

[13:33] <jnthn> stdout and stderr are separate streams with their own sequence numbers

[13:41] <Zoffix> buggable: toast

[13:41] <buggable> Zoffix, Between 2018.01-187-ge72eb01 and 2018.01: 21 (2.14%) modules got burnt; 25 (2.55%) got unsucced; 278 (28.34%) out of 981 modules appear unusable. See https://toast.perl6.party/ for details.

[13:41] <Zoffix> Ran a toast, though log showed it exited with signal 11 (so that's a SEGV in the runner?)

[13:42] <Zoffix> Also, I didn't re-run 2018.01 release, so it's possible the modules got broken by new commits to their source since the 2018.01-121-g0bf735a run

[13:46] <tbrowder> jnthn: is the $seq number the 1 or 2 for fd for stdout stderr?

[13:48] <Zoffix> Bunch of "could not open file", like Failed to open file /home/cpan/.zef/store/JSON-Fast-0.9.9.tar.gz/JSON-Fast-0.9.9/META6.json: No such file or directory

[13:48] <Zoffix> and a bunch of stuff about sockets

[13:49] <Zoffix> And Malformed UTF-8  in LWP::Simple

[13:49] <Zoffix> (which is used by a bunch of modules)

[13:49] <jnthn> tbrowder: It's just an incrementing number per buffer emitted

[13:51] <tbrowder> jnthn: ok, can the two streams share the same buffer for capture or do they each need their own buffer?

[13:51] <Zoffix> I think I'll clean the VM, build 2018.01 to use for the runner and then re-toast 2018.01 + master.

[13:53] <jnthn> tbrowder: merge, in theory, will put them into a single buffer

[13:53] <jnthn> If you put callbacks for stdout and stderr bytes, then you get two streams

[13:53] <tbrowder> right now the config hash for spawnprocasync only show one ‘buffer’ to be used for either or both streams.

[13:53] <jnthn> Oh

[13:54] <jnthn> buffer is just the type to use

[13:54] <tbrowder> *shows

[13:54] <jnthn> I thought you were talking about the callbacks, sorry

[13:54] <jnthn> Note that buffer is used purely for its type

[13:54] <jnthn> Data is *not* put into that

[13:55] <jnthn> It's delivered via the callbacks

[13:56] <tbrowder> ok, then the current practice of passing the one buffer for the queue should be good.

[13:56] <jnthn> Yeah, maybe having called it buffer_type woulda been better :)

[13:57] <tbrowder> any idea of why reading from stderr is causing a hang?

[13:58] <jnthn> There is no "read from" so far as spawnprocasync goes, it pushes stuff out as its available

[13:58] <jnthn> So that'd be a problem in how it's being utilized

[13:58] <jnthn> Well, unless the stream isn't being given a permit, perhaps

[13:58] <jnthn> In which case it won't start the reader

[14:00] <tbrowder> can you look at nqp PR #408? and see if that has a problem or is it deeper in the permit code. i see there the stderr piggy backs with stdout.

[14:00] <tbrowder> at least for merge.

[14:08] <jnthn> Sorry, had to take care of soemthing else. Will look in a minute.

[14:12] <tbrowder> thnx!

[14:15] <jnthn> tbrowder: Which test is unhappy?

[14:16] <jnthn> Maybe spotted the issue

[14:16] <jnthn> Left a comment

[14:16] <tbrowder> oh, the 005-pod-panic.t is to show the problem. if you run it by itself it hangs on the third call.

[14:17] <tbrowder> thanks!

[14:17] <jnthn> ah, 3rd call matches the problem I mentioned :)

[14:58] <tbrowder> jnthn: almost fixed, using channel 1 for stdout only works fine, channel 2 for stderr works fine, channel 0 for both (merge) runs but i get “unreadable output”.

[14:59] <tbrowder> i got the channel 0 from reading procops.c for the merge case

[15:05] <jnthn> tbrowder: What does "unreadable output" mean? :)

[15:07] <tbrowder> the channel references are for nqp::permit

[15:11] <tbrowder> that’s the error message from the regex test on output from using nqp::permit channel 0 for the merged capture

[15:15] <tbrowder> sorry, the msg is “cannot stringify this”...

[15:16] <jnthn> ah, that one probably is just trying to use something as a string that isn't one (and can't turn into one, which most things in NQP cannot)

[15:24] <tbrowder> ok, i think i’m confusing you with my errors now. i think i’m on the right track and i’ll tighten up the testing.  but one question: is it correct that nqp::permit channel 0 is for the nerge

[15:24] <tbrowder> *merge_bytes output?

[15:25] <jnthn> tbrowder: Yes, that seems to match what Proc::Async does too

[15:25] <tbrowder> ok, thank you very much, and good hunting with the grant!

[15:26] <AlexDaniel> notable6: weekly

[15:26] <notable6> AlexDaniel, 6 notes: https://gist.github.com/e2ddbb2b25b0f64835f2bf7f969633ee

[15:26] <AlexDaniel> notable6: clear weekly

[15:26] <notable6> AlexDaniel, Moved existing notes to “weekly_2018-02-12T15:26:28Z”

[15:27] <AlexDaniel> “I have applied for a Perl6 core grant to deal with this documentation”

[15:27] <AlexDaniel> :O

[15:27] <AlexDaniel> I hope there are funds for that

[15:28] <tyil> applying is always possible afaik

[15:28] <tyil> funds or no

[15:28] <AlexDaniel> I mean, I hope it will be funded :)

[15:28] <tyil> same

[15:29] <tyil> I find Perl 6 docs to be pretty good already for the most part

[15:29] <tyil> but making it even better is never a bad thing

[15:33] <AlexDaniel> tyil: judging by the amount of issues and its dynamics, I don't think the docs are good enough :)

[15:33] <AlexDaniel> look here for example

[15:33] <AlexDaniel> https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:33] <AlexDaniel> 280 → 294 → 304

[15:34] <tyil> there's always room for improvement, but as a casual user of Perl 6 I am much more happy with the Perl 6 docs than I was with the Rust docs when I was trying that out

[15:34] <AlexDaniel> right now we have 291, which I guess is the result of JJ's work

[16:21] <Zoffix> buggable: toast

[16:21] <buggable> Zoffix, Between 2018.01-187-ge72eb01 and 2018.01: 8 (0.82%) modules got burnt; 12 (1.22%) got unsucced; 255 (25.99%) out of 981 modules appear unusable. See https://toast.perl6.party/ for details.

[16:21] <Zoffix> k, much more polished toast results now.

[16:22] <tyil> hmm

[16:22] <Zoffix> AlexDaniel: SQUASHathon idea: ^ making those 255 failing modules work again.... Possibly sorted by how recently the author was active on GitHub

[16:22] <tyil> can I see the list of modules that are failing rn, so I can see if any of my modules are breaking?

[16:23] <Zoffix> Still seeing the "Malformed UTF-8 at line 8 col 12678" from LWP::Simple

[16:23] <AlexDaniel> note: squashathon making those 255 failing modules work again https://irclog.perlgeek.de/perl6-dev/2018-02-12#i_15809006

[16:23] <notable6> AlexDaniel, Noted!

[16:23] <Zoffix> tyil: the bot did include the link

[16:23] <tyil> oh

[16:23] <tyil> I should learn to read

[16:23] <AlexDaniel> Zoffix: IIRC it fetches a web page that indeed has malformed utf8 lol

[16:24] <Zoffix> AlexDaniel: but why does it pass on 2018.01?

[16:24] <AlexDaniel> it's different every run

[16:25] <Zoffix> eco: LWP::Simple

[16:25] <buggable> Zoffix, LWP::Simple 'LWP::Simple quick & dirty implementation for Rakudo Perl 6': https://github.com/perl6/perl6-lwp-simple

[16:25] <Zoffix> It's a perl6 org's module. We could fix that...

[16:25] <AlexDaniel> this issue: https://github.com/perl6/perl6-lwp-simple/issues/13

[16:28] <Zoffix> bisect: old=2018.01,new=HEAD try ｢sub func(Numeric(Rat) $v?) { dd $v; 42 }()｣.EVAL; die "meow" if $!;

[16:28] <bisectable6> Zoffix, On both starting points (old=2018.01 new=e72eb01) the exit code is 0 and the output is identical as well

[16:28] <bisectable6> Zoffix, Output on both points: «Rat␤»

[16:28] <Zoffix> bisect: old=2018.01,new=HEAD~10 try ｢sub func(Numeric(Rat) $v?) { dd $v; 42 }()｣.EVAL; die "meow" if $!;

[16:28] <bisectable6> Zoffix, Bisecting by exit code (old=2018.01 new=HEAD~10). Old exit code: 0

[16:28] <bisectable6> Zoffix, bisect log: https://gist.github.com/61cfe6c0d4cc6712cf325db7eb148d1a

[16:28] <bisectable6> Zoffix, There are 5 candidates for the first “new” revision. See the log for more details

[16:29] <Zoffix> AlexDaniel: also, why does it saw "5 candidates" blah blah, when it was just a single commit that made the change. Is it because the commit was made on post-release branch that was later merged?

[16:29] <Zoffix> s/saw/say/;

[16:29] <AlexDaniel> c: 426a39a6ef867f8ef7378a11482f18aca842c33d try ｢sub func(Numeric(Rat) $v?) { dd $v; 42 }()｣.EVAL; die "meow" if $!;

[16:29] <committable6> AlexDaniel, ¦426a39a: «Cannot test this commit (Commit exists, but a perl6 executable could not be built for it)»

[16:29] <AlexDaniel> let's try rebuilding this to see if it helps…

[16:30] <AlexDaniel> c: 426a39a6ef867f8ef7378a11482f18aca842c33d try ｢sub func(Numeric(Rat) $v?) { dd $v; 42 }()｣.EVAL; die "meow" if $!;

[16:30] <committable6> AlexDaniel, ¦426a39a: «No build for this commit»

[16:31] <AlexDaniel> k, will try again in a few minutes once it's done

[16:32] <AlexDaniel> Zoffix: typically it means that someone has split his work into several commits in a way that makes it impossible to build rakudo on these intermediate commits. Sometimes this is because of nqp bumps (rakudo changed first to depend on something in nqp, but nqp is bumped later)

[16:33] <AlexDaniel> there's a chance that it just failed for some random reason, which is why I'm deleting the build to let it try again

[16:33] <AlexDaniel> s/his/their/

[16:33] <Zoffix> Ah, OK.

[16:34] <AlexDaniel> c: 426a39a6ef867f8ef7378a11482f18aca842c33d try ｢sub func(Numeric(Rat) $v?) { dd $v; 42 }()｣.EVAL; die "meow" if $!;

[16:34] <committable6> AlexDaniel, ¦426a39a: «Cannot test this commit (Commit exists, but a perl6 executable could not be built for it)»

[16:34] <Zoffix> ok, whatever.

[16:34] <AlexDaniel> yea, can't do that. We can take a look at the log actually

[16:34] <AlexDaniel> shareable6: 426a39a6ef867f8ef7378a11482f18aca842c33d

[16:34] <shareable6> AlexDaniel, /426a39a6ef867f8ef7378a11482f18aca842c33d

[16:34] <AlexDaniel> …

[16:35] <Zoffix> Just wanted to make sure it's not that all post-release branch commits are unbisectable.

[16:35] <AlexDaniel> no that's not a problem at all. In theory post-release commits should be bisectable even when post-release is not even merged yet

[16:35] <Zoffix> cool

[16:35] <AlexDaniel> but I haven't tried that in a while so maybe that doesn't work entirely

[16:37] <AlexDaniel> shareable6: 426a39a6ef867f8ef7378a11482f18aca842c33d

[16:37] <shareable6> AlexDaniel, https://whateverable.6lang.org/426a39a6ef867f8ef7378a11482f18aca842c33d

[16:38] <AlexDaniel> Zoffix: just FYI, these archives contain log files from running `make`, so here's the reason: https://gist.github.com/AlexDaniel/833671a52725768553939e931e60d57d

[16:44] <Zoffix> Oh, OK :)

[16:44] <Zoffix> (this is the "forgot to bump NQP" case)

[16:51] <AlexDaniel> whateverable++ then for being correct consistently

[16:52] <AlexDaniel> … and whateverable-- for not being able to look through the commits and use its intellect to understand what actually happened

[16:52] <AlexDaniel> :P

[17:18] <AlexDaniel> jnthn++ # oh my god that sounds so great

[17:18] <AlexDaniel> (fixes for memory “leaks”)

[17:19] <jnthn> There was a real leak too

[17:19] <jnthn> But mismanagement can be as troublesome as a leak

[17:22] <timotimo> a leak by any other name ...

[17:23] <jnthn> valgrind: the 'impossible' happened: LibVEX called failure_exit().

[17:23] <jnthn> ...oops :)

[18:25] <japhb> I'm always impressed by corruption that manages to blow up the tooling used to investigate corruption

[18:25] <japhb> It's like bringing a canary into a coal mine and having it explode.

[18:26] <japhb> Can we bump after jnthn++'s last two MoarVM fixes?

[18:27] * AlexDaniel is wondering that as well

[18:27] <[Coke]> if we're early in the month, bump early & often.

[18:28] <japhb> [Coke]: ~1 week to release, I think

[18:28] <[Coke]> (once a day after jnthn goes on a tear seems like a good frequency. :)

[18:28] <japhb> Should be early enough to make sure his fixes get some serious wearing-in time

[18:28] <[Coke]> I assume since those hit master he's intending for them to be in the moar release; but one more day wouldn't hurt.

[18:45] <Geth> ¦ nqp: 51b9df0a89 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[18:45] <Geth> ¦ nqp: [MoarVM Bump] Brings 6 commits

[18:45] <Geth> ¦ nqp:

[18:45] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.01-82-g296620e...2018.01-88-gc6519f4c3

[18:45] <Geth> ¦ nqp: c6519f4c3 Clean up one-shot timers after firing

[18:45] <Geth> ¦ nqp: cf523c89c Test the current thread's frame in heap snapshot

[18:45] <Geth> ¦ nqp: 004680a03 Don't spesh log if we have a spesh_cand

[18:45] <Geth> ¦ nqp: da41e397f Implement unmanaged_size in MVMSpeshLog repr

[18:45] <AlexDaniel> well, let's see :)

[18:45] <Geth> ¦ nqp: 48d98a183 Merge pull request #801 from wukgdu/fix_format

[18:45] <Geth> ¦ nqp: c27af6a54 fix format string's parameters

[18:45] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/51b9df0a89

[18:45] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.01-82-g296620e...2018.01-88-gc6519f4c3

[18:45] <Geth> ¦ rakudo: d74dac816a | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[18:45] <Geth> ¦ rakudo: [NQP Bump] Brings 6 commits

[18:45] <Geth> ¦ rakudo:

[18:46] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.01-60-g2c51764...2018.01-66-g51b9df0a8

[18:46] <Geth> ¦ rakudo: 51b9df0a8 [MoarVM Bump] Brings 6 commits

[18:46] <Geth> ¦ rakudo: 135154876 [js] eslint --fix

[18:46] <Geth> ¦ rakudo: 48dcb3f30 [js] Start taking grapheme boundaries into account more

[18:46] <Geth> ¦ rakudo: fc524076c [js] Make enumcharlist work better with graphemes

[18:46] <Geth> ¦ rakudo: 4c8ea814c [js] Strip marks more correctly in weird cases

[18:46] <Geth> ¦ rakudo: 9d664e6d6 [js] Scan in regexes by graphemes not by bytes

[18:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d74dac816a

[18:46] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-60-g2c51764...2018.01-66-g51b9df0a8

[19:04] <travis-ci> NQP build failed. Aleks-Daniel Jakimenko-Aleksejev '[MoarVM Bump] Brings 6 commits

[19:04] <travis-ci> https://travis-ci.org/perl6/nqp/builds/340623204 https://github.com/perl6/nqp/compare/135154876cb2...51b9df0a8925

[19:11] <AlexDaniel> I guess that was not a great idea! :)

[19:12] <AlexDaniel> hmm… but no complaints about rakudo repo

[19:12] * AlexDaniel looks

[19:13] <AlexDaniel> heh, segfault

[19:18] <AlexDaniel> yea, that was a mistake, should've looked at Moar's CI status

[19:19] <timotimo> aye, a fix to spesh has caused more stuff to be considered by the expr jit, making many workloads fail much sooner than they otherwise would have

[19:21] <Geth> ¦ rakudo: c83202db0a | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[19:21] <Geth> ¦ rakudo: Revert "[NQP Bump] Brings 6 commits"

[19:21] <Geth> ¦ rakudo:

[19:21] <Geth> ¦ rakudo: This reverts commit d74dac816a73e0da18860389136e3c7f06f93a9e.

[19:21] <Geth> ¦ rakudo:

[19:21] <Geth> ¦ rakudo: Just to unbreak it for anyone who is relying on HEAD too much. See

[19:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c83202db0a

[19:21] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-66-g51b9df0a8...2018.01-60-g2c51764

[19:21] <AlexDaniel> ……… see #1520 of course…

[19:22] <AlexDaniel> yea, don't start lines in your commit message with “#”

[19:23] <timotimo> :D

[19:31] <travis-ci> Rakudo build failed. Aleks-Daniel Jakimenko-Aleksejev '[NQP Bump] Brings 6 commits

[19:31] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/340623280 https://github.com/rakudo/rakudo/compare/e72eb01ed06d...d74dac816a73

[19:31] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[20:12] <travis-ci> Rakudo build failed. Aleks-Daniel Jakimenko-Aleksejev 'Revert "[NQP Bump] Brings 6 commits"

[20:12] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/340637658 https://github.com/rakudo/rakudo/compare/d74dac816a73...c83202db0a67

[20:12] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[22:15] <Geth> ¦ nqp: 4c93027640 | (Tom Browder)++ (committed using GitHub Web editor) | docs/ops.markdown

[22:15] <Geth> ¦ nqp: correct  return values for ```decoderempty```,  they were reversed

[22:15] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4c93027640

[22:30] <travis-ci> NQP build failed. Tom Browder 'correct  return values for ```decoderempty```,  they were reversed'

[22:30] <travis-ci> https://travis-ci.org/perl6/nqp/builds/340710537 https://github.com/perl6/nqp/compare/51b9df0a8925...4c9302764027
