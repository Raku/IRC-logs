[00:11] <Geth> ¦ nqp: 83ed559f53 | (Zoffix Znet)++ (committed using GitHub Web editor) | tools/build/install-jvm-runner.pl.in

[00:11] <Geth> ¦ nqp: Bump Xmx for nqp-j by another 300MB

[00:11] <Geth> ¦ nqp:

[00:11] <Geth> ¦ nqp: It still crashes with out of mem on occasion and 1.2GB is about what it takes to

[00:11] <Geth> ¦ nqp: compile MoarVM version rakudo

[00:11] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/83ed559f53

[00:18] <MasterDuke> Zoffix: ugh, that's what i get for hand-editing the wrong version. added the ` = $*CWD` back in and now it builds and passes a spectest

[00:19] <Zoffix> But does it blend? :)

[00:19] <Zoffix> Is it slower than before?

[00:20] <MasterDuke> haven't tested IO::Path.new yet. tested some similar made up examples, i can show here

[00:21] <MasterDuke> m: sub f(Str:D $a) { "a = $a" }; my $s; for ^1_000_000 { $s = f($_.Str) }; say $s; say now - INIT now

[00:21] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «a = 999999␤0.65999187␤»

[00:21] <MasterDuke> m: sub f(Cool $a) { "a = $a.Str()" }; my $s; for ^1_000_000 { $s = f($_) }; say $s; say now - INIT now

[00:21] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «a = 999999␤1.289085959␤»

[00:21] <MasterDuke> m: sub f(Str(Cool) $a) { "a = $a" }; my $s; for ^1_000_000 { $s = f($_) }; say $s; say now - INIT now

[00:21] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «a = 999999␤1.009371␤»

[00:21] <Zoffix> Looking at QAST, the coercer gotta be slower, because it first checks for Any type and then does a second check for Str

[00:22] <Zoffix> Would've thought doing Str check first and coercing only if it ain't a Str would've made more sense, 'cause right now you can only coerce from ancestor types, not just from arbitrary types (and you do an extra checks for things that don't need coercing)

[00:23] <Zoffix> m: sub f(Str $a) { "a = $a" }; my $s; for ^1_000_000 { $s = f($_.Str); Nil }; say $s; say now - INIT now

[00:23] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «a = 999999␤0.7226964␤»

[00:23] <Zoffix> m: sub f(Str:D $a) { "a = $a" }; my $s; for ^1_000_000 { $s = f($_.Str); Nil }; say $s; say now - INIT now

[00:23] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «a = 999999␤0.84479403␤»

[00:25] <MasterDuke> huh, where does coercing actually happen? think that's an optimization that'll work everywhere?

[00:32] <Zoffix> Well, I'm looking at the fast-past binder, in which case the QAST is right in the param setting code there's also the slow-path binder in BOOTSTRAP.nqp somewhere (method bind or bind-one or something)

[00:32] <Zoffix> Well, it'll work everywhere, but it changes semantics of how coercers work... so...

[00:42] <Zoffix> (and the fast-past bindder is genned in Actions

[00:42] <Zoffix> )

[00:47] <Zoffix> ffs... keep getting "Unhandled exception: java.lang.OutOfMemoryError: Java heap space" :|

[00:58] <Zoffix> Oh, and to make the code go through fast or slow binder just tack on a bunch of nested multies

[00:58] <Zoffix> -> $ {} # fast-path binder;  -> $, :foo(:bar(:ber(:$mer))) {} # slow-path binder

[01:11] <Zoffix> Alright. I reached the point where I'm giving up.

[01:11] <Zoffix> You ++ed me too early :)

[01:33] <AlexDaniel> Zoffix--

[01:33] <AlexDaniel> alright alright, I'm kidding of course :)

[01:33] <Zoffix> :)

[04:02] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1766: Condense three IO::Path.new multis down to one...

[04:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1766

[06:54] <nine> .tell lizmat https://github.com/ugexe/zef/issues/241#issuecomment-383823558

[06:54] <yoleaux> nine: I'll pass your message to lizmat.

[07:38] <lizmat> Files=1239, Tests=76308, 319 wallclock secs (15.73 usr  5.36 sys + 2197.99 cusr 219.21 csys = 2438.29 CPU)

[08:14] <[Tux]> Rakudo version 2018.03-263-gd4a6b92f3 - MoarVM version 2018.03-128-g0ad859add

[08:14] <[Tux]> csv-test-xs-20      0.447 -  0.452

[08:14] <[Tux]> csv-ip5xs           0.888 -  1.007

[08:14] <[Tux]> test-t --race       1.033 -  1.080

[08:14] <[Tux]> test-t              2.535 -  2.625

[08:14] <[Tux]> csv-ip5xs-20        8.846 -  9.263

[08:14] <[Tux]> test                9.562 - 10.173

[08:14] <[Tux]> test-t-20 --race   16.596 - 18.452

[08:14] <[Tux]> csv-parser         36.586 - 39.136

[08:14] <[Tux]> test-t-20          45.144 - 48.426

[08:56] <pmurias> .tell Zoffix are you still working on the jvm backend fix or should I look into it?

[08:56] <yoleaux> 01:18Z <Zoffix> pmurias: did some initial debugging for JVM issue, but giving up. Maybe it'll help you fix the problem: https://github.com/rakudo/rakudo/issues/1765#issuecomment-383771805

[08:56] <yoleaux> pmurias: I'll pass your message to Zoffix.

[08:57] <pmurias> .tell Zoffix gcx.Associative isn't set ever

[08:57] <yoleaux> pmurias: I'll pass your message to Zoffix.

[09:36] <pmurias> is there a way to passed named arguments to traits?

[09:41] <lizmat> pmurias: you can pass a hash to a trait

[09:44] <lizmat> m: sub trait_mod:<is>(Variable:D $, :$foo!) { dd $foo }; my $a is foo( a => 42, b => 666)   # or a list of paur

[09:44] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «List $foo = $(:a(42), :b(666))␤»

[09:44] <lizmat> *pairs

[09:47] <pmurias> lizmat: thanks

[09:51] <pmurias> and any ways of passing named arguments to infix or prefix ops?

[09:53] <jnthn> Yes, adverb syntax

[09:54] <jnthn> m: multi infix:<+>($a, $b, :$double!) { 2 * ($a + $b) }; say 1 + 1 :double

[09:54] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «Unexpected named argument 'double' passed␤  in block <unit> at <tmp> line 1␤␤»

[09:54] <jnthn> m: multi infix:<+>($a, $b, :$double!) { 2 * ($a + $b) }; say (1 + 1 :double)

[09:54] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «Unexpected named argument 'double' passed␤  in block <unit> at <tmp> line 1␤␤»

[09:54] <jnthn> oh

[09:54] <jnthn> m: multi infix:<+>(Int $a, Int $b, :$double!) { 2 * ($a + $b) }; say (1 + 1 :double)

[09:54] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «4␤»

[09:54] <jnthn> There we go

[09:55] <jnthn> That's for infix ops, to be clear

[09:55] <jnthn> For prefix, no, don't think there's any way

[09:55] <jnthn> Nor postfix

[09:55] <jnthn> Oh...uh...or is there

[09:55] <pmurias> jnthn: it seems *% in signatures for stuff that is called before Hash is turned into Associative is blowing up on the JVM backend

[09:56] <jnthn> Ah yeah, I'm getting confused. Adverbs are parsed as fake infixes, but they can apply to any operator

[09:58] <pmurias> jnthn: does declaring Associative during the bootstrap seem like a sane solution?

[10:01] <jnthn> I don't think we create any roles during BOOTSTRAP, I think it's not very sane. But we could I guess just do a `my class Hash does Associative { ... }` a bit earlier?

[11:08] <Kaiepi> pufferbot now supports Inline::Perl5 for make stresstest!

[11:09] <Kaiepi> might help if i remember to put it in a screen though

[12:28] <Geth> ¦ rakudo: 1ae4d2d426 | pmurias++ | 4 files

[12:28] <Geth> ¦ rakudo: [jvm] Skip the type check for Associative for slurpy names when compiling the setting

[12:28] <Geth> ¦ rakudo:

[12:28] <Geth> ¦ rakudo: This makes the setting compile

[12:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1ae4d2d426

[12:28] <pmurias> the JVM backend should now compile the setting

[12:30] <jnthn> pmurias++

[12:56] <Geth> ¦ rakudo: f0522df011 | (Zoffix Znet)++ (committed using GitHub Web editor) | README.md

[12:56] <Geth> ¦ rakudo: List setting JAVA_OPTS as an alternative to avoid out-of-mem error

[12:56] <Geth> ¦ rakudo:

[12:56] <Geth> ¦ rakudo: `export JAVA_OPTS="-Xmx51200000000"` does the trick for me to

[12:56] <Geth> ¦ rakudo: get rid of that error that's present even with the runner updated to 1.2GB

[12:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f0522df011

[12:59] <Zoffix> pmurias++ # confirming the fix fixed it on my box

[12:59] <Zoffix> AlexDaniel: ^ all blockers have been fixed now

[13:00] <AlexDaniel> this is awesome

[13:00] <AlexDaniel> pmurias++ Zoffix++

[13:01] <stmuk> yay

[13:02] * Zoffix spectests bumps

[13:03] <Zoffix> stresstests

[13:03] <Zoffix> ZofBot: burnouttests

[13:09] <Geth> ¦ nqp: ccf98076eb | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[13:09] <Geth> ¦ nqp: [MoarVM Bump] Brings 2 commits

[13:09] <Geth> ¦ nqp:

[13:09] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.03-126-g876aa90...2018.03-128-g0ad859a

[13:09] <Geth> ¦ nqp: 0ad859a Use an array instead of a big switch for ShiftJIS decoding

[13:09] <Geth> ¦ nqp: f2b9b7f [JIT] Measure and report time spent on JIT compilation

[13:09] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ccf98076eb

[13:09] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.03-126-g876aa90...2018.03-128-g0ad859a

[13:09] <Geth> ¦ rakudo: 79ed89ba40 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[13:09] <Geth> ¦ rakudo: [NQP Bump] Brings 4 commits

[13:09] <Geth> ¦ rakudo:

[13:09] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.03-85-ga24e43d...2018.03-89-gccf9807

[13:09] <Geth> ¦ rakudo: ccf9807 [MoarVM Bump] Brings 2 commits

[13:09] <Geth> ¦ rakudo: 83ed559 Bump Xmx for nqp-j by another 300MB

[13:09] <Geth> ¦ rakudo: 05c18bc [JVM] Increase Xmx for nqp-j to 1 GB

[13:09] <Geth> ¦ rakudo: 6c982a8 This test is now passing on OS X.

[13:09] <Geth> ¦ rakudo:

[13:09] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.03-126-g876aa90...2018.03-128-g0ad859a

[13:09] <Geth> ¦ rakudo: 0ad859a Use an array instead of a big switch for ShiftJIS decoding

[13:09] <Geth> ¦ rakudo: f2b9b7f [JIT] Measure and report time spent on JIT compilation

[13:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/79ed89ba40

[13:09] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.03-85-ga24e43d...2018.03-89-gccf9807

[13:09] <Zoffix> ZOFVM: Files=1294, Tests=153321, 150 wallclock secs (20.77 usr  3.03 sys + 3196.38 cusr 160.30 csys = 3380.48 CPU)

[13:10] <Zoffix> ~1 test per millisecond. Pretty damn good :P

[13:12] * Zoffix &

[13:43] <AlexDaniel> samcv: ↑ I think we are very ready :)

[14:09] <AlexDaniel> I will be afk for a few hours though

[14:12] <lizmat> so: I have a class A and I mix in a role B: is there some magic that I can use to dispatch to original method in class A  from the mixed in object ?

[14:12] <jnthn> callsame and friends would do it

[14:14] <lizmat> jnthn++  :-)

[14:36] <Zoffix> can also use "fully-qualified" method name or whatever it's called:

[14:36] <Zoffix> m: class A { method z { say "orig" } }; role B { method z { say "role"; self.A::z } }; (A.new does B).z

[14:36] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «role␤orig␤»

[14:36] <Zoffix> m: class A { method z { say "orig" } }; role B { method z { say "role"; self.+z } }; (A.new does B).z

[14:36] <Zoffix> that looks broken...

[14:37] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «(timeout)role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role…»

[14:38] <jnthn> It's an infinite recursion, ain't it?

[14:38] <Zoffix> Is it meant to tho?

[14:38] <jnthn> .+z is a fresh dispatch

[14:38] <jnthn> Not a continuation of the current one

[14:38] <Zoffix> Ah. doh

[14:39] <Zoffix> m: class A { method z { say "orig" } }; role B { method z { say "role"; self.z } }; (A.new does B).z

[14:39] <Zoffix> Look this one is broken too! :D

[14:39] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «(timeout)role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role␤role…»

[14:43] <Zoffix> m: class A { method z { say "orig" } }; role B { method z { say "role"; self."$(self.^mro.skip.head.^name)::&?ROUTINE.name()"() } }; (A.new does B).z

[14:43] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «role␤No such method 'A::z' for invocant of type 'A+{B}'␤  in method z at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:44] <Zoffix> m: class A { method z { say "orig" } }; role B { method z { say "role"; self.A::z() } }; (A.new does B).z

[14:44] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «role␤orig␤»

[14:44] <Zoffix> m: class A { method z { say "orig" } }; role B { method z { say "role"; self."A::z"() } }; (A.new does B).z

[14:44] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «role␤No such method 'A::z' for invocant of type 'A+{B}'␤  in method z at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:44] <Zoffix> jnthn: do you think the second one should work? ^

[14:44] <jnthn> No

[14:44] <Zoffix> fully-qualified name in a string

[14:44] <Zoffix> Ah, ok

[14:45] <jnthn> If we want that we'd want some syntax like self.::('A::z')() or some such

[14:46] <Zoffix> m: class A { method z { say "orig" } }; role B { method z { say "role"; self.&(::("A").^lookup: "z") } }; (A.new does B).z

[14:46] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «role␤orig␤»

[14:47] <Zoffix> m: class A { method z { say "orig" } }; role B { method z { say "role"; self.^mro.skip.head.^lookup(&?ROUTINE.name)(self) } }; (A.new does B).z

[14:47] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «role␤orig␤»

[14:47] <Zoffix> \o/

[14:51] <Zoffix> m: class Z { method z { say "pre-orig" } }; class A is Z { method z { say "orig" } }; role B { method z { say "role"; for self.^mro.skip { $_.^lookup(&?ROUTINE.name) andthen .(self) } } }; (A.new does B).z

[14:51] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «role␤orig␤pre-orig␤»

[14:51] <Zoffix> hm

[14:51] <Zoffix> m: .^lookup("so") andthen .($_).say for ^10

[14:51] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤»

[14:51] <Zoffix> this works, but this:

[14:52] <Zoffix> m: class A { method z { say "orig" } }; role B { method z { say "role"; $_.^lookup(&?ROUTINE.name) andthen .(self) for self.^mro.skip } }; (A.new does B).z

[14:52] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «role␤»

[14:52] <Zoffix> doesn't

[14:54] <Zoffix> m: sub z { dd &?ROUTINE.name for ^10 }; z

[14:54] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «""␤""␤""␤""␤""␤""␤""␤""␤""␤""␤»

[14:54] <Zoffix> m: sub z { for ^10 { dd &?ROUTINE.name } }; z

[14:54] <camelia> rakudo-moar 79ed89ba4: OUTPUT: «"z"␤"z"␤"z"␤"z"␤"z"␤"z"␤"z"␤"z"␤"z"␤"z"␤»

[14:56] <Zoffix> R#1768

[14:56] <synopsebot> R#1768 [open]: https://github.com/rakudo/rakudo/issues/1768 Postfix `for`, and possibly others, cause &?ROUTINE to be set to empty string

[15:22] <tony-o> nine: i have an extracted version of the zef build ordering i made if you're interested in it - i fixed it up so it's faster than i described

[15:23] <tony-o> though i'm not sure it'd help for precomp unless you're able to determine what exactly depends on what else

[15:33] <tony-o> nine: https://github.com/tony-o/p6-Uxmal

[15:49] <timotimo> cool, i've been hoping for something like this for a while!

[15:50] <timotimo> oh, it doesn't make graphical graphs

[16:03] <tony-o> timotimo: that's up next

[16:03] <timotimo> you know how to work graphviz?

[16:04] <tony-o> was looking for a uml module

[16:04] <tony-o> i don't work with charts like that much, i don't know about graphviz

[16:11] <timotimo> oh, OK

[16:12] <timotimo> graphviz is a super simple description language that dot and friends will turn into graphics of different types

[16:12] <timotimo> digraph G { A -> B; B -> C; A -> D; D -> E } is a simple example

[16:12] <timotimo> do dot -Tpng bloop.dot > foo.png and it'll be rendered

[16:12] <tony-o> actually dot format looks simple enough i can play with it on the plane

[16:12] <tony-o> and i have 11 hours of flying tomorrow

[16:12] <tony-o> ah, you beat me to it

[16:13] <timotimo> wow, 11 hours

[16:13] <timotimo> yeah, you'll get loads and loads done in that time

[16:13] <timotimo> if  you want, that is

[16:13] <timotimo> gotta go AFK

[16:13] <timotimo> but do have a look at moarvm's tools folder where i have one or two scripts that generate dot files with more advanced features

[16:14] <tony-o> usually i sleep on planes but this is relatively interesting

[16:14] <tony-o> i'll take a look

[16:14] <timotimo> and p6profiler-tools or something on my github which has progress bar like things using gradients

[16:14] <timotimo> have a safe trip, if we don't talk until you're off :)

[19:19] <tony-o> thanks timotimo :-)

[19:45] <samcv> .ask Zoffix so is div_in 14x slower than last release? i see one that says it slows it down by 14x but the denormal fix commit says it increases certain div_In ops?

[19:45] <yoleaux> samcv: I'll pass your message to Zoffix.

[19:49] <Zoffix> .

[19:49] <yoleaux> 19:45Z <samcv> Zoffix: so is div_in 14x slower than last release? i see one that says it slows it down by 14x but the denormal fix commit says it increases certain div_In ops?

[19:50] <Zoffix> samcv: first commit made stringification of Nums 2x faster for most cases; the div_In fix fixed precision drift in Num -> Str -> Num -> Str roundtrippage, but the price for that was making it 14x slower.

[19:51] <Zoffix> I'll try to regain some of it during CaR grant. I think we can divide only parts of bignums to get a precise enough number.

[19:52] <Zoffix> samcv: actually it's not just drift, but because in rakudo we use that op for parsing nums, we used to create nums that aren't the closest representable num to what was written in the string.

[19:53] <Zoffix> (and that was also the reason for the drift)

[19:53] <samcv> Zoffix: thanks :)

[19:53] <Zoffix> in div_In we used to convert both numbers to doubles and THEN divide them, now we first divide them and then convert the result to double. If that makes logging it easier

[20:41] <Kaiepi> should CArray have an alloc method or should Buf/Blob be used instead when you need to do that?

[21:03] <tony-o> timotimo: now with dot generation

[21:04] <timotimo> \o/

[21:04] <AlexDaniel> \o/

[21:05] <tony-o> https://i.imgur.com/VAWq35B.png

[21:05] <tony-o> this is the graph it builds on the second test in build-order.t

[21:07] <timotimo> cute

[21:15] <AlexDaniel> I love graphviz, especially how well it works with large graphs

[21:15] <AlexDaniel> well, as long as you don't have a bunch of nodes on the same level, ha-ha

[21:15] <timotimo> in that case you haven't made graphs as big as mine :P

[21:16] <AlexDaniel> I guess so, yeah

[21:17] <AlexDaniel> well, the largest graphs I've generated were probably from Yosys, but you rarely look at the whole flattened design…

[21:17] <AlexDaniel> I should probably try that just to see what happens

[21:18] <AlexDaniel> by the way, yosys does this nice little trick of using random colors for edges, which AFAIK is not a graphviz option

[21:18] <AlexDaniel> but it makes such a big difference really

[21:19] <timotimo> https://pbs.twimg.com/media/DC1zZ1uXkAADNb8.jpg:large

[21:20] <AlexDaniel> pffffffft :D

[21:20] <AlexDaniel> D#246 strikes again

[21:20] <synopsebot> D#246 [closed]: https://github.com/perl6/doc/issues/246 [build] Unreadable type graphs

[21:21] <AlexDaniel> same issue with a bunch of nodes on the same level

[21:21] <timotimo> mhm

[21:22] <AlexDaniel> we “fixed” it by using neato instead, but arguably that's not any better: https://docs.perl6.org/type/Metamodel::MethodContainer.html#Type_Graph
