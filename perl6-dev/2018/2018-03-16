[01:04] <Kaiepi> BeastieBot, build

[01:04] <Kaiepi> BeastieBot, help

[01:05] <Kaiepi> PufferBot, help

[01:06] <Kaiepi> oh forgot to actually use the rakudo plugin with irc::client after the huge refactor

[01:06] <Kaiepi> lol

[01:07] <Kaiepi> BeastieBot, help

[01:07] <BeastieBot> Kaiepi, address me with "build", "test", or "spectest" to test building Rakudo, running tests, and running Roast's suite respectively on freebsd. Address me with "all" to attempt to run all three sequentially.

[01:10] <Kaiepi> BeastieBot, build

[01:10] <Kaiepi> BeastieBot, help

[01:10] <BeastieBot> Kaiepi, address me with "build", "test", or "spectest" to test building Rakudo, running tests, and running Roast's suite respectively on freebsd. Address me with "all" to attempt to run all three sequentially.

[01:11] <Kaiepi> BeastieBot, test

[01:12] <Kaiepi> odd

[01:12] <Kaiepi> PufferBot, build

[01:59] <Zoffix> Kaiepi: were those returns always there?

[01:59] <yoleaux> 15 Mar 2018 20:22Z <cfa> Zoffix: /perl6/roast/issues/402

[01:59] <Zoffix> m: sub foo { my $p = start  { return 42 }; await $p; $p }; say foo

[01:59] <camelia> rakudo-moar dffbd68a7: OUTPUT: «MoarVM panic: Internal error: Unwound entire stack and missed handler␤»

[02:00] <Zoffix> I don't think you can return from a method from within a promise and if you meant to return from the .protected bit only, then you need to make that a sub, not a block.

[02:00] <Zoffix> Also, what's sending output to IRC?

[02:00] <Kaiepi> the methods within the promises

[02:00] <Zoffix> FWIW returning a Promise from IRC::Client method sends return value to IRC when promise completes

[02:02] <Kaiepi> is there a way to make it so it doesn't address the user that called the command when you return a string from the method?

[02:02] <Zoffix> Ah. No

[02:03] <Zoffix> BeastieBot, source

[02:03] <Zoffix> BeastieBot, help

[02:03] <Zoffix> Where's the full source at?

[02:03] <Kaiepi> https://github.com/Kaiepi/p6-RakudoBot/blob/master/lib/IRC/Client/Plugin/Rakudo.pm6

[02:09] <Zoffix> "No such method 'irc' for invocant of type 'IRC::Client::Plugin::Rakudo'"

[02:10] <Zoffix> "Attempt to return outside of immediatelly-enclosing Routine (i.e. `return` execution is outside the dynamic scope of the Routine where `return` was used)"

[02:10] <Kaiepi> hm

[02:10] <Zoffix> Kaiepi: so you need to add ` does IRC::Client::Plugin;` to the class IRC::Client::Plugin::Rakudo line and, as I mentioned, change those blocks given to .protect() into sub {}

[02:11] <Kaiepi> ah

[02:11] <Kaiepi> gimme a sec, i gotta set up my vim plugins on my vps before i can test

[02:12] <Zoffix> Kaiepi: and I found that out by sticking CATCH { default { say "Error: $_" } } inside those `start` blocks. Also, IRC::Client.new can take a `:debug` flag that prints what it's doing (you can also install Terminal::ANSIColor to get preety colors)

[02:13] <Kaiepi> yeah, i'm adding a debug option to config.json for that

[02:13] <Zoffix> Kaiepi: here's the modifications I made. Seems to do things now and no errors show up in `build` routine. Still need to change blocks to subs in all the other protected blocks that try to return: https://gist.github.com/zoffixznet/3453f533f5ce4fa8121de5b3498b55a4

[02:13] * Zoffix &

[02:14] <Kaiepi> thanks

[02:26] <Kaiepi> PufferBot, build

[03:17] <Kaiepi> PufferBot, source

[03:17] <PufferBot> Kaiepi, https://github.com/Kaiepi/p6-RakudoBot.git

[03:18] <Kaiepi> PufferBot, build

[03:51] <Kaiepi> BeastieBot, test

[03:51] <BeastieBot> [freebsd] Testing Rakudo...

[03:53] <BeastieBot> [freebsd] | t/04-nativecall/02-simple-args.t                              (Wstat: 256 Tests: 14 Failed: 1)

[03:53] <BeastieBot> [freebsd] Tests failed. See the output at http://fpaste.scsys.co.uk/575920

[03:53] <BeastieBot> Kaiepi, done!

[06:53] <Geth> ¦ rakudo: Kaiepi++ created pull request #1620: Skip NativeCall TakeUint16 test on FreeBSD

[06:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1620

[06:58] <nine_> .tell jnthn On the issue of `composalizable` and `inheritalizable` I'm firmly in the "brilliant use of English derivational morphology" camp. But then, I'm native German speaker, so I'm used to torturing words ;)

[06:58] <yoleaux> nine_: I'll pass your message to jnthn.

[08:52] <Geth> ¦ rakudo: 51c4d4d89c | (Stefan Seifert)++ | lib/NativeCall.pm6

[08:52] <Geth> ¦ rakudo: Fix precomp files of NativeCall users containing absolute paths

[08:52] <Geth> ¦ rakudo:

[08:52] <Geth> ¦ rakudo: By storing the compiler object in a variable scoped to the Native role, it

[08:52] <Geth> ¦ rakudo: gets serialized into precomp files. This compiler object contains a lot of

[08:52] <Geth> ¦ rakudo: information including the path to the source file of the currently compiling

[08:52] <Geth> ¦ rakudo: module (the NativeCall user) and the path of the target bytecode file.

[08:52] <Geth> ¦ rakudo:

[08:52] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[08:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/51c4d4d89c

[09:31] <Geth> ¦ nqp: 00b1f84f35 | (Stefan Seifert)++ | src/QRegex/NFA.nqp

[09:31] <Geth> ¦ nqp: Remove partially commented out timing debug code

[09:31] <Geth> ¦ nqp:

[09:31] <Geth> ¦ nqp: Since this code went in in 2014 we have gained a profiler, rendering custom

[09:31] <Geth> ¦ nqp: timing code pretty much obsolete. The global variable initialized to the

[09:31] <Geth> ¦ nqp: current time however prevents reproducible builds.

[09:31] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/00b1f84f35

[09:57] <[TuxCM]> Rakudo version 2018.02.1-166-g51c4d4d89 - MoarVM version 2018.02-171-geee5be412

[09:57] <[TuxCM]> csv-test-xs-20      0.437 -  0.445

[09:57] <[TuxCM]> csv-ip5xs           0.800 -  0.828

[09:57] <[TuxCM]> test-t --race       1.041 -  1.054

[09:57] <[TuxCM]> test-t              2.542 -  2.869

[09:57] <[TuxCM]> csv-ip5xs-20        7.557 -  7.772

[09:57] <[TuxCM]> test                8.811 -  8.984

[09:57] <[TuxCM]> test-t-20 --race   15.525 - 15.836

[09:57] <[TuxCM]> csv-parser         36.197 - 37.209

[09:57] <[TuxCM]> test-t-20          45.303 - 45.760

[10:47] <nine_> .tell jnthn What do you thing about this patch giving us reproducible nqp builds? With it a simple make clean && make install without changes won't break an installed rakudo anymore. https://gist.github.com/niner/c82676810ce4fb2d4aee50e0ef086ef6

[10:47] <yoleaux> nine_: I'll pass your message to jnthn.

[11:32] <lizmat> Files=1236, Tests=76268, 315 wallclock secs (15.01 usr  5.36 sys + 2170.44 cusr 215.50 csys = 2406.31 CPU)

[11:53] <AlexDaniel> PufferBot: all

[11:53] <AlexDaniel> BeastieBot: all

[11:53] <BeastieBot> [freebsd] The current branch has uncommitted changes. Please tell Kaiepi to commit or reset any changes made before running your command again.

[11:53] <BeastieBot> AlexDaniel, done!

[11:53] <AlexDaniel> Kaiepi: please commit or reset any changes

[11:54] <Kaiepi> BeastieBot, all

[11:54] <BeastieBot> [freebsd] Configuring Rakudo...

[11:55] <BeastieBot> [freebsd] Building Rakudo...

[11:58] <BeastieBot> [freebsd] Build failed. See the output at http://fpaste.scsys.co.uk/575922

[11:58] <BeastieBot> Kaiepi, done!

[11:59] <Kaiepi> BeastieBot, build

[11:59] <BeastieBot> [freebsd] Configuring Rakudo...

[11:59] <BeastieBot> [freebsd] Building Rakudo...

[12:00] <Kaiepi> PufferBot, all

[12:01] <Kaiepi> PufferBot, build

[12:01] <Kaiepi> ok weird, it should be using the same code beastiebot is

[12:15] <BeastieBot> [freebsd] Build failed. See the output at http://fpaste.scsys.co.uk/575924

[12:15] <BeastieBot> Kaiepi, done!

[13:01] <Kaiepi> BeastieBot, build

[13:01] <BeastieBot> [freebsd] Configuring Rakudo...

[13:01] <BeastieBot> [freebsd] Building Rakudo...

[13:03] <Kaiepi> PufferBot, all

[13:03] <PufferBot> [openbsd] Configuring Rakudo...

[13:03] <PufferBot> [openbsd] Building Rakudo...

[13:03] <AlexDaniel> Kaiepi: so what's up with these failures?

[13:04] <AlexDaniel> does it mean that rakudo is broken?

[13:04] <AlexDaniel> how do I interpret this result correctly?

[13:04] <nine> I'd guess it's running out of memory

[13:04] <yoleaux> 12:13Z <jnthn> nine: Goodness, that's a tiny patch to achieve such a thing! Can't think of an objection :)

[13:05] <Kaiepi> the failures don't seem to happen when i run make manually

[13:05] <PufferBot> [openbsd] Build successful!

[13:05] <PufferBot> [openbsd] Testing Rakudo...

[13:05] <BeastieBot> [freebsd] Build failed. See the output at http://fpaste.scsys.co.uk/575932

[13:05] <BeastieBot> Kaiepi, done!

[13:06] <PufferBot> [openbsd] Tests passed!

[13:06] <PufferBot> [openbsd] Running Roast test suite... (this will take a while)

[13:08] <Kaiepi> i'm either running out of memory or running out of swap space

[13:09] <Kaiepi> pid 32318 (moar), uid 1001, was killed: out of swap space

[13:10] <nine> AlexDaniel: I guess I should only commit https://gist.github.com/niner/c82676810ce4fb2d4aee50e0ef086ef6 after the release?

[13:11] <Zoffix> AlexDaniel: commited some changes to changelog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft/_compare/b4615fc92a088d317ecd7e7bb8ec361463246f10...bc9949ac9d43b9fbd928e37abe33465562c0d9ec

[13:12] <Zoffix> ZofBot: who logs changes the changelog?

[13:12] <ZofBot> Zoffix, But it will get better

[13:13] <nine> jnthn: looks like I was rather close to reproducibility when I worked on eliminating those uninitialized padding bytes in serialization back in August. If only I had known how close :)

[13:17] <AlexDaniel> nine: for me it's a bit hard to judge if this is going to affect anything, so maybe after the release?

[13:17] <PufferBot> [openbsd] | t/spec/S16-io/print.t                                           (Wstat: 512 Tests: 15 Failed: 2)

[13:17] <PufferBot> [openbsd] | t/spec/S32-io/IO-Socket-Async.t                                 (Wstat: 256 Tests: 17 Failed: 0)

[13:17] <PufferBot> [openbsd] Roast tests failed. See the output at http://fpaste.scsys.co.uk/575933

[13:17] <PufferBot> Kaiepi, done!

[13:17] <AlexDaniel> Zoffix: this is awesome, thank you!

[13:19] <Zoffix> Kaiepi: looks like it failed to update roast repo: "*** Error 1 in target 'spectest_update' (ignored)"

[13:20] <Zoffix> Kaiepi: and the S16-io/print.t failures look to be exactly due to that; not recent enough roast

[13:20] <nine> AlexDaniel: it could be big news for distro packagers. But no, let's not rush things. The change could cause weird issues that only surface in real world usage.

[13:20] <Kaiepi> does make spectest not update roast on its own?

[13:20] <AlexDaniel> ZofBot: the right answer was https://github.com/perl6/whateverable/issues/208

[13:20] <ZofBot> AlexDaniel, hmmm... running a --profile on the same .hypering code, produces wildly differently sized .html files (60MB - 342MB) # timotimo jnthn

[13:21] <Kaiepi> BeastieBot, all

[13:21] <BeastieBot> [freebsd] Configuring Rakudo...

[13:21] <nine> AlexDaniel: but damn am I looking forward to getting this in :)

[13:21] <BeastieBot> [freebsd] Building Rakudo...

[13:21] <AlexDaniel> huggable: star

[13:21] <huggable> AlexDaniel, Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[13:21] <AlexDaniel> nine: I think it'll go in at the right time ↑ :)

[13:21] <Zoffix> Kaiepi: it does, but in your case there was an error.

[13:21] <Kaiepi> ah

[13:21] <AlexDaniel> assuming releases that have star based on them are somewhat better

[13:23] <BeastieBot> [freebsd] Build successful!

[13:23] <BeastieBot> [freebsd] Testing Rakudo...

[13:26] <BeastieBot> [freebsd] | t/04-nativecall/02-simple-args.t                              (Wstat: 256 Tests: 14 Failed: 1)

[13:26] <BeastieBot> [freebsd] Tests failed. See the output at http://fpaste.scsys.co.uk/575934

[13:26] <BeastieBot> Kaiepi, done!

[13:27] <Kaiepi> BeastieBot, spectest

[13:27] <BeastieBot> [freebsd] Running Roast test suite... (this will take a while)

[13:36] <AlexDaniel> BeastieBot: fwiw there are alse #whateverable and #zofbot that are meant for bot abuse

[13:36] <AlexDaniel> also

[13:36] <AlexDaniel> *

[13:42] <AlexDaniel> maybe we should start #robotabuse

[14:01] <BeastieBot> [freebsd] | t/spec/S17-supply/syntax.t                                      (Wstat: 9 Tests: 69 Failed: 0)

[14:01] <BeastieBot> [freebsd] | t/spec/S17-promise/basic.t                                      (Wstat: 256 Tests: 41 Failed: 1)

[14:01] <BeastieBot> [freebsd] Roast tests failed. See the output at http://fpaste.scsys.co.uk/575935

[14:01] <BeastieBot> Kaiepi, done!

[14:12] <AlexDaniel> BeastieBot: spectest

[14:12] <BeastieBot> [freebsd] Running Roast test suite... (this will take a while)

[14:12] <AlexDaniel> flappers?

[14:13] <lizmat> those look like familiar flappers to me

[14:23] <lizmat> notable6: weekly http://www.0racle.info/articles/pick_and_choose_part1-half

[14:23] <notable6> lizmat, Noted!

[14:25] <lizmat> notable6: weekly http://www.0racle.info/articles/pick_and_choose_part2

[14:25] <notable6> lizmat, Noted!

[14:47] <BeastieBot> [freebsd] | t/spec/S17-supply/syntax.t                                      (Wstat: 9 Tests: 69 Failed: 0)

[14:47] <BeastieBot> [freebsd] | t/spec/S17-promise/at.t                                         (Wstat: 256 Tests: 4 Failed: 1)

[14:47] <BeastieBot> [freebsd] | t/spec/S17-promise/basic.t                                      (Wstat: 512 Tests: 41 Failed: 2)

[14:47] <BeastieBot> [freebsd] Roast tests failed. See the output at http://fpaste.scsys.co.uk/575936

[14:47] <BeastieBot> AlexDaniel, done!

[14:55] <AlexDaniel> so at.t flapped but syntax.t and basic.t are failing consistently?

[15:09] <Geth> ¦ roast/post-release-2018.03: 05c07809fb | (Zoffix Znet)++ | S32-io/open.t

[15:09] <Geth> ¦ roast/post-release-2018.03: Do not rely on EVAL's :context in tests

[15:09] <Geth> ¦ roast/post-release-2018.03: review: https://github.com/perl6/roast/commit/05c07809fb

[15:15] <AlexDaniel> nine: ↑ you can put it into the post-release branch

[15:24] <AlexDaniel> BeastieBot: spectest

[15:24] <BeastieBot> [freebsd] Running Roast test suite... (this will take a while)

[15:42] <Geth> ¦ rakudo/post-release-2018.03: 18eda3ea69 | (Zoffix Znet)++ | src/core/IO/Handle.pm6

[15:42] <Geth> ¦ rakudo/post-release-2018.03: Clear up nqp code in IO::Handle.open

[15:42] <Geth> ¦ rakudo/post-release-2018.03:

[15:42] <Geth> ¦ rakudo/post-release-2018.03: - &&/|| already compile to nqp::if/nqp::unless

[15:42] <Geth> ¦ rakudo/post-release-2018.03: - No functional changes

[15:42] <Geth> ¦ rakudo/post-release-2018.03: review: https://github.com/rakudo/rakudo/commit/18eda3ea69

[15:51] <Geth> ¦ rakudo: 0194ef46a3 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperToIterator.pm6

[15:51] <Geth> ¦ rakudo: Streamline HyperToIterator.consume-batch

[15:51] <Geth> ¦ rakudo:

[15:51] <Geth> ¦ rakudo: - makes it about 4x faster

[15:51] <Geth> ¦ rakudo: - makes say ^Inf .hyper.grep( *.is-prime ).skip(9999).head about 2% faster

[15:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0194ef46a3

[15:57] <BeastieBot> [freebsd] | t/spec/S17-supply/syntax.t                                      (Wstat: 9 Tests: 69 Failed: 0)

[15:57] <BeastieBot> [freebsd] | t/spec/S17-promise/nonblocking-await.t                          (Wstat: 256 Tests: 4 Failed: 0)

[15:57] <BeastieBot> [freebsd] | t/spec/S17-promise/basic.t                                      (Wstat: 256 Tests: 41 Failed: 1)

[15:57] <BeastieBot> [freebsd] Roast tests failed. See the output at http://fpaste.scsys.co.uk/575937

[15:57] <BeastieBot> AlexDaniel, done!

[16:09] <nine> Looks like I also got a patch for rakudo for making builds reproducible, i.e. no more timestamps in path names or hidden in sha hashes. I can now run Inline::Perl5's tests, do a make install in rakudo (re-compiling NativeCall), run Inline::Perl5 again and don't have to wait for it to re-compile Inline::Perl5

[16:12] <lizmat> whee!

[16:13] <nine> Apart from this convenience and much more rare "Missing or wrong version of dependency" messages, this will most of all help packagers. Because a simple rebuild of one package (nqp, rakudo or some module package) will no longer invalidate depending packages.

[16:14] <lizmat> nine++

[16:14] <japhb> Definitely nine++

[16:16] <jnthn> nine++ indeed

[17:03] <Geth> ¦ rakudo: 21997b6256 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[17:03] <Geth> ¦ rakudo: Don't use typevar inappropriately

[17:03] <Geth> ¦ rakudo:

[17:03] <Geth> ¦ rakudo: It instructs optimizers that if they are holding the type of the first

[17:03] <Geth> ¦ rakudo: argument (in a method, "the invocant") constant, then the lookup of the

[17:03] <Geth> ¦ rakudo: lexical can also be assumed constant also. However, we were using it in

[17:03] <Geth> ¦ rakudo: nested blocks, where a first argument type could be held constant but it

[17:03] <Geth> ¦ rakudo: was totally unrelated to any notion of "invocant".

[17:03] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[17:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/21997b6256

[17:04] <Geth> ¦ roast: 953f8b8638 | (Jonathan Worthington)++ | S12-methods/private.t

[17:04] <Geth> ¦ roast: Test to cover buggy private method lookup caching

[17:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/953f8b8638

[17:27] <Geth> ¦ nqp: db6801437b | pmurias++ | src/vm/js/nqp-runtime/ctx.js

[17:27] <Geth> ¦ nqp: [js] Throw an exception when accessing a missing variable with nqp::atkey

[17:27] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/db6801437b

[17:27] <Geth> ¦ nqp: 199dd708b1 | pmurias++ | 4 files

[17:27] <Geth> ¦ nqp: [js] Implement getcodelocation

[17:27] <Geth> ¦ nqp:

[17:27] <Geth> ¦ nqp: It's done in a very inefficent manner, needs to be more optimized

[17:27] <Geth> ¦ nqp: for performance important use

[17:27] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/199dd708b1

[17:27] <AlexDaniel> nine: that's awesome!

[17:29] <jnthn> m/sg camelia m: class C { multi method m(Int $x) { samewith ~$x }; multi method m(Str) { }; multi method call() { self.m(42) } }; C.call for ^100000

[17:29] <jnthn> bah :)

[17:30] <jnthn> I have a fix for that blocker too

[17:30] <jnthn> #1573

[17:34] <jnthn> Golfs to

[17:34] <jnthn> $ MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 ./perl6-m -e 'class C { multi method m(Int $x) { samewith $x.Str }; multi method m(Str) { }; multi method call() { self.m(42) } }; C.call for ^10000'

[17:34] <Geth> ¦ rakudo: 6232d29ebc | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperToIterator.pm6

[17:34] <Geth> ¦ rakudo: Streamline HyperToIterator.pull-one a bit

[17:34] <Geth> ¦ rakudo:

[17:34] <Geth> ¦ rakudo: - remove unnecessary variable

[17:34] <Geth> ¦ rakudo: - bind rather than assign, removing need for deconts

[17:34] <Geth> ¦ rakudo: - make sure it is "is raw" (apparently we have no tests for containers)

[17:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6232d29ebc

[17:37] <Zoffix> jnthn: FWIW, there're two blockers; another one is R#1566 (mentioning, just in case)

[17:37] <synopsebot> R#1566 [open]: https://github.com/rakudo/rakudo/issues/1566 [regression][⚠ blocker ⚠] multi built-ins are not assignable to Callable

[17:38] <Zoffix> That's the Callable-is-mixed-in-before-it's-composed thing

[17:38] <jnthn> Yeah, I won't have time for that

[17:38] <jnthn> Not this side of the weekend, anyways

[17:39] <Geth> ¦ rakudo: e12e305a6b | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[17:39] <Geth> ¦ rakudo: Make sure `samewith`-using routines aren't inlined

[17:39] <Geth> ¦ rakudo:

[17:39] <Geth> ¦ rakudo: We already did it for callsame, nextsame, etc. but forgot to put

[17:39] <Geth> ¦ rakudo: samewith in the list.

[17:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e12e305a6b

[17:40] <Zoffix> jnthn: OK, then I'll stick a couple of .^compose after Callable is composed, just to unblock the blocker. So that any new routines that got this bug this release would not have it. There's &max, &min, and probably a couple more.

[17:40] <dogbert11> jnthn++, that second one was quick

[17:40] <Zoffix> m: say &max ~~ Callable; &max.^compose; say &max ~~ Callable

[17:40] <camelia> rakudo-moar 21997b625: OUTPUT: «False␤True␤»

[17:41] <Geth> ¦ roast: e6b0872ef7 | (Jonathan Worthington)++ | S12-methods/defer-next.t

[17:41] <Geth> ¦ roast: Test to cover Rakudo issue #1573

[17:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e6b0872ef7

[17:41] <jnthn> Zoffix: Yeah, that's probably best.

[17:47] <AlexDaniel> Zoffix++

[17:59] <jnthn> Alrightly, well, that's a couple of icky bugs squished at least...

[17:59] * jnthn wanders home

[18:02] <Geth> ¦ roast/post-release-2018.03: 37aa7c3d7f | (Zoffix Znet)++ | S32-io/open.t

[18:02] <Geth> ¦ roast/post-release-2018.03: Expand/clarify spec for .open mode arguments

[18:02] <Geth> ¦ roast/post-release-2018.03:

[18:02] <Geth> ¦ roast/post-release-2018.03: Closes R#1614 https://github.com/rakudo/rakudo/issues/1614

[18:02] <Geth> ¦ roast/post-release-2018.03: Closes R#1615 https://github.com/rakudo/rakudo/pull/1615

[18:02] <Geth> ¦ roast/post-release-2018.03:

[18:02] <Geth> ¦ roast/post-release-2018.03: - Add 183 new tests (plan count went down due to use of subtests)

[18:02] <synopsebot> R#1614 [open]: https://github.com/rakudo/rakudo/issues/1614 .open with :truncate/:create violates "read only" default open mode

[18:02] <synopsebot> R#1615 [open]: https://github.com/rakudo/rakudo/pull/1615 Throw when opening read-only files with truncate and create flags

[18:02] <Geth> ¦ roast/post-release-2018.03: - Tests all of the "approved" mode combinations

[18:02] <Geth> ¦ roast/post-release-2018.03: - Deliberately leaves unapproved mode combinations implementation-dependent,

[18:02] <Geth> ¦ roast/post-release-2018.03:     to keep docs simpler and to not lock down implementations to a

[18:02] <Geth> ¦ roast/post-release-2018.03:     particular set of options and order of checking them

[18:02] <Geth> ¦ roast/post-release-2018.03: review: https://github.com/perl6/roast/commit/37aa7c3d7f

[19:39] <Zoffix> k, looking through all the commits since last release, looks like only &min, &max, &minmax regressed for not being Callable anymore

[19:40] <Zoffix> ZOFFLOP: t/spec/S02-types/baghash.t

[19:40] <Zoffix> (some tests that assume ordering?)

[19:41] <Geth> ¦ rakudo/post-release-2018.03: 87e43c4aea | (Zoffix Znet)++ | src/core/operators.pm6

[19:41] <Geth> ¦ rakudo/post-release-2018.03: Fix infix:<o> identity function

[19:41] <Geth> ¦ rakudo/post-release-2018.03:

[19:41] <Geth> ¦ rakudo/post-release-2018.03: Failure.self explodes Failures, so we can't use it

[19:41] <Geth> ¦ rakudo/post-release-2018.03: for identity routine.

[19:41] <Geth> ¦ rakudo/post-release-2018.03: review: https://github.com/rakudo/rakudo/commit/87e43c4aea

[19:44] <Geth> ¦ roast/post-release-2018.03: eacaf276f8 | (Zoffix Znet)++ | S03-operators/composition.t

[19:44] <Geth> ¦ roast/post-release-2018.03: Test infix:<o>() with Failures

[19:44] <Geth> ¦ roast/post-release-2018.03:

[19:44] <Geth> ¦ roast/post-release-2018.03: Rakudo fix: https://github.com/rakudo/rakudo/commit/87e43c4aea

[19:44] <Geth> ¦ roast/post-release-2018.03: review: https://github.com/perl6/roast/commit/eacaf276f8

[19:48] <Zoffix> will fix the &min, &max, &minmax  in ~2h

[20:48] <travis-ci> Rakudo build passed. Jonathan Worthington 'Make sure `samewith`-using routines aren't inlined

[20:48] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/354430390 https://github.com/rakudo/rakudo/compare/6232d29ebc37...e12e305a6b9e

[21:22] <AlexDaniel> samcv: hey, how is it going? I think rakudo side will ready tomorrow

[21:22] <AlexDaniel> be*

[21:22] <AlexDaniel> releasable6: status

[21:22] <releasable6> AlexDaniel, Next release in ≈21 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[21:22] <AlexDaniel> yea, in that amount of time

[21:49] <samcv> AlexDaniel: going good. sounds good to me!

[21:53] <Geth> ¦ rakudo: 4513c279d4 | (Zoffix Znet)++ | src/core/Cool.pm6

[21:53] <Geth> ¦ rakudo: Workaround regression in Routines not doing Callable

[21:53] <Geth> ¦ rakudo:

[21:53] <Geth> ¦ rakudo: Removes blocker status from R#1566

[21:53] <Geth> ¦ rakudo: https://github.com/rakudo/rakudo/issues/1566

[21:53] <Geth> ¦ rakudo:

[21:53] <Geth> ¦ rakudo: The actual bug is that Callable role gets mixed in into routines

[21:53] <synopsebot> R#1566 [open]: https://github.com/rakudo/rakudo/issues/1566 [regression][⚠ blocker ⚠] multi built-ins are not assignable to Callable

[21:53] <Geth> ¦ rakudo: before it's composed, and when it is composed, the routines end up

[21:53] <Geth> ¦ rakudo: not "doing" `Callable` role, even though they do. There are many more

[21:54] <Geth> ¦ rakudo: routines suffering this issue, but these three regressed since last

[21:54] <Geth> ¦ rakudo: release and we don't have the time to fix the primary bug before the

[21:54] <Geth> ¦ rakudo: release, so in this fudge goes.

[21:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4513c279d4

[21:54] <Geth> ¦ roast: 154a22c963 | (Zoffix Znet)++ | S03-smartmatch/any-callable.t

[21:54] <Geth> ¦ roast: Test for glitches in Routines not doing Callable role

[21:54] <Geth> ¦ roast:

[21:54] <Geth> ¦ roast: R#1566: https://github.com/rakudo/rakudo/issues/1566

[21:54] <Geth> ¦ roast: Rakudo workaround for select routines:

[21:54] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/4513c279d4

[21:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/154a22c963

[21:58] <Zoffix> releasable6: status

[21:58] <releasable6> Zoffix, Next release in ≈21 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[21:58] <releasable6> Zoffix, Details: https://gist.github.com/071eb3f0b0963c700ad8d603dc3a7f1d

[21:58] <Zoffix> .tell AlexDaniel the workaround for R#1566 went in. There are no more known release blockers.

[21:58] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[21:58] <AlexDaniel> oh well, that's awesome

[21:58] <yoleaux> 21:58Z <Zoffix> AlexDaniel: the workaround for R#1566 went in. There are no more known release blockers.

[21:58] <AlexDaniel> thanks
