[00:46] <travis-ci> Rakudo build passed. Zoffix Znet 'Add fudged tests for restrictive protos

[00:46] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/369361601 https://github.com/rakudo/rakudo/compare/4f848967c8ba...20ccaccad7b6

[01:00] <Zoffix> oh, we also need to make protos named-slurpy

[01:02] <Zoffix> m: say 275/349

[01:02] <camelia> rakudo-moar 20ccaccad: OUTPUT: «0.787966␤»

[01:03] <Zoffix> 79% of protos are wrong

[01:03] <Zoffix> ZofBot: brew some coffee; it's gunna be a long night

[01:03] <ZofBot> Zoffix, which is both more expensive to keep track of and can introduce bugs when behavior is attached to the wrong aspect (which iirc is one perl 6 has run into) but if someone can figure out a way to make the generic case better, i'd 100% be fine with removing those special cases MasterDuke: do you know

[02:41] <Zoffix> weird that some core multies ain't got no protos

[02:41] <Zoffix> &prompt, &undefine, &warn

[02:41] <Zoffix> s: &warn

[02:41] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/20ccaccad/src/core/control.pm6#L186

[02:42] <Zoffix> that ain't a proto

[03:22] <samcv> releasable6: status

[03:22] <releasable6> samcv, Next release in ≈15 hours. 3 blockers. 224 out of 247 commits logged

[03:22] <releasable6> samcv, Details: https://gist.github.com/2f13e3eb681dade3dd9534bf87dc577b

[03:43] <Zoffix> .... mf...

[03:43] <Zoffix> A single test doesn't let me experience a dopamine boost.

[03:44] <Zoffix> For some reason tells me the proto for &postcircumfix:<{ }> got a Mu param, when it doesn't :S

[03:45] <Zoffix> oh, I'm not reading the results right

[03:50] <Zoffix> All tests successful.

[03:50] <Zoffix> Files=1, Tests=352,  1 wallclock secs ( 0.06 usr  0.01 sys +  1.34 cusr  0.25 csys =  1.66 CPU)

[03:50] <Zoffix> Oh yes...

[03:50] <Zoffix> ZofBot: this is better than cocaine!

[03:50] * ZofBot turns more for loops into loop loops

[04:06] <Zoffix> shit looks like the profiler doesn't like more specific protos :|

[04:08] <Zoffix> `my int $i = 1; say $i * 2` that used to be optimized to `mul_i`, now it's just callstatic of infix:<*>

[04:19] <Zoffix> m: proto z(|) {*}; multi z($) {}; z Mu

[04:19] <camelia> rakudo-moar 20ccaccad: OUTPUT: «Cannot resolve caller z(Mu); none of these signatures match:␤    ($)␤  in block <unit> at <tmp> line 1␤␤»

[04:19] <Zoffix> m: proto z($) {*}; multi z($) {}; z Mu

[04:19] <camelia> rakudo-moar 20ccaccad: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[04:19] <Zoffix> Some tests are failing due to this :(

[04:29] <Zoffix> :| and t/spec/S02-types/array.t  t/spec/S02-types/hash.t t/spec/S06-multi/type-based.t  fail during stresstest but succeed by themselves

[04:36] <Zoffix> :/

[04:36] <Zoffix> Might've been something with my `./perl6` missing and t/fudgeandrun defauling to `perl6` in those cases.

[04:44] <Zoffix> m: multi foo (Regex $bar) { "Regex " ~ gist(WHAT( $bar )) }

[04:44] <camelia> rakudo-moar 20ccaccad: ( no output )

[04:44] <Zoffix> this now fails. Tells me Calling gist(Mu) will never work with any of these multi signatures:

[04:44] <Zoffix> ()

[04:44] <Zoffix> at -e:1

[04:44] <Zoffix> Without even calling that multi

[04:44] <Zoffix> There's no way I'm shipping this into the release

[04:50] <Zoffix> $ ./perl6 -e 'multi foo ($bar) { gist $bar }; foo "x"'

[04:50] <Zoffix> Too many positionals passed; expected 0 arguments but got 1

[04:50] <Zoffix> ... wat :S

[04:52] <Zoffix> oh.. luckily this is my fuckup. gist() has wrong sig and instead it pokes into p6argvmarray

[05:00] <Zoffix> oh it does has proper sig, I just messed it up :D

[05:59] <Geth> ¦ roast/proto-fix-R1739: 0faa97adf8 | (Zoffix Znet)++ | packages/Test/Util.pm

[05:59] <Geth> ¦ roast/proto-fix-R1739: Implement throws-like-any helper routine

[05:59] <Geth> ¦ roast/proto-fix-R1739:

[05:59] <Geth> ¦ roast/proto-fix-R1739: Same as throws-like but checks the exception among possibilities

[05:59] <Geth> ¦ roast/proto-fix-R1739: review: https://github.com/perl6/roast/commit/0faa97adf8

[06:00] <Geth> ¦ roast/proto-fix-R1739: d35c12e39f | (Zoffix Znet)++ | S32-list/sort.t

[06:00] <Geth> ¦ roast/proto-fix-R1739: Test .sort doesn't crash with &lc

[06:00] <Geth> ¦ roast/proto-fix-R1739:

[06:00] <Geth> ¦ roast/proto-fix-R1739: Covers https://github.com/rakudo/rakudo/issues/1739

[06:00] <Geth> ¦ roast/proto-fix-R1739: review: https://github.com/perl6/roast/commit/d35c12e39f

[06:03] <Geth> ¦ roast/proto-fix-R1739: 16594c6187 | (Zoffix Znet)++ | 2 files

[06:03] <Geth> ¦ roast/proto-fix-R1739: Loosen no-multi tests for Mu.[]/Mu.{}

[06:03] <Geth> ¦ roast/proto-fix-R1739:

[06:03] <Geth> ¦ roast/proto-fix-R1739: The tests test there's no candidate to handle the Mu, but

[06:03] <Geth> ¦ roast/proto-fix-R1739: testing for X::Multi::NoMatch is too strict a restriction.

[06:03] <Geth> ¦ roast/proto-fix-R1739:

[06:03] <Geth> ¦ roast/proto-fix-R1739: Allow X::TypeCheck::Binding::Parameter to be thrown as well in those

[06:03] <Geth> ¦ roast/proto-fix-R1739: cases.

[06:03] <Geth> ¦ roast/proto-fix-R1739: review: https://github.com/perl6/roast/commit/16594c6187

[06:05] <Geth> ¦ rakudo/proto-fix-R1739: 105bc34259 | (Zoffix Znet)++ | t/02-rakudo/12-proto-arity-count.t

[06:05] <Geth> ¦ rakudo/proto-fix-R1739: Expand proto narrowness tests

[06:05] <Geth> ¦ rakudo/proto-fix-R1739:

[06:05] <Geth> ¦ rakudo/proto-fix-R1739: - Unfudge

[06:05] <Geth> ¦ rakudo/proto-fix-R1739: - Test proto Mu args match the candidates

[06:05] <Geth> ¦ rakudo/proto-fix-R1739: - Add more candidates that didn't have protos

[06:05] <Geth> ¦ rakudo/proto-fix-R1739: review: https://github.com/rakudo/rakudo/commit/105bc34259

[06:06] <Geth> ¦ rakudo/proto-fix-R1739: a3a7c142a4 | (Zoffix Znet)++ | t/02-rakudo/08-inline-native-arith.t

[06:06] <Geth> ¦ rakudo/proto-fix-R1739: Temp-fudge mul_i opt test

[06:06] <Geth> ¦ rakudo/proto-fix-R1739: review: https://github.com/rakudo/rakudo/commit/a3a7c142a4

[06:11] <Geth> ¦ rakudo/proto-fix-R1739: 4b5d36f3a8 | (Zoffix Znet)++ | 37 files

[06:11] <Geth> ¦ rakudo/proto-fix-R1739: Fix up proto .arity/.count for all core multi subs

[06:11] <Geth> ¦ rakudo/proto-fix-R1739:

[06:11] <Geth> ¦ rakudo/proto-fix-R1739: Fixes https://github.com/rakudo/rakudo/issues/1739

[06:11] <Geth> ¦ rakudo/proto-fix-R1739:

[06:11] <Geth> ¦ rakudo/proto-fix-R1739: THIS COMMIT HAS REGRESSION IN OPTIMIZATION of rewriting

[06:11] <Geth> ¦ rakudo/proto-fix-R1739: stuff like `*` with natives to `mul_i`. That still needs

[06:11] <Geth> ¦ rakudo/proto-fix-R1739: to be looked at.

[06:11] <Geth> ¦ rakudo/proto-fix-R1739: <…commit message has 10 more lines…>

[06:11] <Geth> ¦ rakudo/proto-fix-R1739: review: https://github.com/rakudo/rakudo/commit/4b5d36f3a8

[06:22] * Zoffix has trouble finding where infix:<*> is being rewritten to mul_i

[06:55] <Zoffix> ZofBot: If you tell me where the opt is at now, that'll be the end of it. I will not look for you, I will not pursue you. But if you don't, I will look for you, I will find you, and I will kill you.

[06:55] <ZofBot> Zoffix, Then Mrs

[07:43] <Zoffix> Looks like the reason I can't find it is 'cause it's actually being rewritten in NQP land.

[07:44] <Zoffix> A puzzle for past-powerdown-period.

[08:08] <Zoffix> .tell AlexDaniel FWIW R#1739 is already fixed in a branch but the fix disables at least one native math op optimizations and (very likely more if not all of them). Looks like the opt is in nqp's repo and I'm guessing the old opt that takes care of slurpy capture needs to be taught the same trick with named slurpy. Gonna take a look at it after sleeping. I think that's the only real release blocker left.

[08:08] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[08:08] <synopsebot> R#1739 [open]: https://github.com/rakudo/rakudo/issues/1739 [⚠ blocker ⚠] Unintended consequences of converting routines from `only` to `multi`

[08:31] <AlexDaniel> OK

[08:31] <yoleaux> 08:08Z <Zoffix> AlexDaniel: FWIW R#1739 is already fixed in a branch but the fix disables at least one native math op optimizations and (very likely more if not all of them). Looks like the opt is in nqp's repo and I'm guessing the old opt that takes care of slurpy capture needs to be taught the same trick with named slurpy. Gonna take a look at it after sleeping. I think that's the only real release blocker left.

[08:31] <synopsebot> R#1739 [open]: https://github.com/rakudo/rakudo/issues/1739 [⚠ blocker ⚠] Unintended consequences of converting routines from `only` to `multi`

[08:32] <AlexDaniel> Thank you

[08:32] <AlexDaniel> yes indeed it's the last blocker blocker

[08:54] <Geth> ¦ rakudo: 8f3237c28d | (Stefan Seifert)++ | 3 files

[08:54] <Geth> ¦ rakudo: Add gist methods to AbsolutePath, NQP and Perl6 repositories

[08:54] <Geth> ¦ rakudo:

[08:54] <Geth> ¦ rakudo: This gives much more uniform and less confusing output on:

[08:54] <Geth> ¦ rakudo: .say for $*REPO.repo-chain

[08:54] <Geth> ¦ rakudo: Should have done this years ago...

[08:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8f3237c28d

[12:52] <Geth> ¦ nqp: 888e05af83 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[12:52] <Geth> ¦ nqp: [MoarVM Bump] 05d589e5c fix confused pointer o […]

[12:52] <Geth> ¦ nqp:

[12:52] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.03-124-gdeaffb2de...2018.03-125-g05d589e5c

[12:52] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/888e05af83

[12:52] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.03-124-gdeaffb2de...2018.03-125-g05d589e5c

[12:52] <Geth> ¦ rakudo: 1c6701b92a | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[12:52] <Geth> ¦ rakudo: [NQP Bump] 888e05af8 [MoarVM Bump] 05d589e5c f […]

[12:52] <Geth> ¦ rakudo:

[12:52] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.03-83-gc84f2fa20...2018.03-84-g888e05af8

[12:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c6701b92a

[12:52] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.03-83-gc84f2fa20...2018.03-84-g888e05af8

[13:00] <Geth> ¦ rakudo: AlexDaniel self-assigned Toaster results show several modules' tests rely on buggy Num stringification https://github.com/rakudo/rakudo/issues/1736

[15:02] <AlexDaniel> bisect: subset ZInt of Cool where { $_ == $_}; sub foo(ZInt(Cool) $Z) { }; say 42

[15:02] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=1c6701b) because on both starting points the exit code is 0

[15:02] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/ad987cd9dd12118454024c70d5918f80

[15:02] <bisectable6> AlexDaniel, (2018-04-04) https://github.com/rakudo/rakudo/commit/82b19b1f533fc43531906edf379796e6a4af9493

[15:02] <AlexDaniel> c: 2018.03,HEAD subset ZInt of Cool where { $_ == $_}; sub foo(ZInt(Cool) $Z) { }; say 42

[15:02] <committable6> AlexDaniel, ¦2018.03: «42␤» ¦HEAD(1c6701b): «Use of uninitialized value of type Iterable in numeric context␤42␤  in block  at /tmp/k5k131IdHV line 1␤Use of uninitialized value of type Iterable in numeric context␤  in block  at /tmp/k5k131IdHV line 1␤»

[15:03] <AlexDaniel> c: 82b19b1f^,82b19b1f subset ZInt of Cool where { $_ == $_}; sub foo(ZInt(Cool) $Z) { }; say 42

[15:03] <committable6> AlexDaniel, ¦82b19b1f^: «42␤» ¦82b19b1: «Use of uninitialized value of type Iterable in numeric context␤42␤  in block  at /tmp/Ks3uwul4GB line 1␤Use of uninitialized value of type Iterable in numeric context␤  in block  at /tmp/Ks3uwul4GB line 1␤»

[15:03] <AlexDaniel> I'm afk for shower, but this ↑ is why a module is failing https://github.com/briandfoy/perl6-chemistry-elements

[16:07] <AlexDaniel> c: 2018.03,HEAD subset ZInt of Cool where { say $_; True }; sub foo(ZInt(Cool) $Z) {}

[16:07] <committable6> AlexDaniel, ¦2018.03: «» ¦HEAD(1c6701b): «(Iterable)␤»

[16:07] <AlexDaniel> that looks wrong

[16:18] <Zoffix> bisect: 2018.03,HEAD subset ZInt of Cool where { say $_; True }; sub foo(ZInt(Cool) $Z) {}

[16:18] <bisectable6> Zoffix, Using old=2018.03 new=HEAD in an attempt to DWIM

[16:18] <bisectable6> Zoffix, Bisecting by output (old=2018.03 new=1c6701b) because on both starting points the exit code is 0

[16:18] <bisectable6> Zoffix, bisect log: https://gist.github.com/e03607cd3608bdbf711e6e09910c20c8

[16:18] <bisectable6> Zoffix, (2018-04-04) https://github.com/rakudo/rakudo/commit/82b19b1f533fc43531906edf379796e6a4af9493

[16:19] <AlexDaniel> ticket R#1753

[16:19] <synopsebot> R#1753 [open]: https://github.com/rakudo/rakudo/issues/1753 [regression][⚠ blocker ⚠] Iterable appearing in subset constraints

[16:35] <Zoffix> *sigh* just can't find it :/

[16:36] <Zoffix> $code_obj.inline_info got the rewritten op, but I can't find where it's being set :/

[16:37] <[TuxCM]> nine, https://github.com/Tux/CSV/blob/master/43_binary.t

[16:48] <nine> [TuxCM]: the "Cannot look up attributes in a CSV::Field type object" error is actually dependent on the Buf's contents. I have an example that reproducs 100 %

[16:58] <nine> [TuxCM]: my $b = Buf.new(224,34,204,182);

[17:13] <stmuk_> releasable6: status

[17:13] <releasable6> stmuk_, Next release in ≈1 hour. 2 blockers. 224 out of 249 commits logged

[17:13] <releasable6> stmuk_, Details: https://gist.github.com/26fd18f831a36e30aa094df7be0c70bd

[17:14] <stmuk_> "it's the final countdown!"

[17:14] <stmuk_> maybe

[17:14] <Zoffix> https://www.youtube.com/watch?v=9jK-NcRmVcw

[17:16] <AlexDaniel> well, in 1 hour definitely not, but very likely it's happening this weekend or so

[17:17] <Zoffix> It's definitely a final countdown for my op bug.

[17:17] <Zoffix> ... I can smell its presence.

[17:17] <Zoffix> ZofBot: ready the sandwich bread!

[17:17] <ZofBot> Zoffix, Or that we might move into her house

[17:17] <timotimo> Zoffix: talk to me, what are you looking for?

[17:18] <AlexDaniel> robertle: sorry, what does that mean? “I have been unable to reproduce the problem without the patch however”

[17:18] <AlexDaniel> robertle: what problem are we talking about exactly?

[17:20] <robertle_> the SIGBUS. A short while ago I was able to get a SIGBUS on armhf quite consistently, with the test suite and the small case in the bug report...

[17:21] <robertle_> I hava not had a terrible lot of time today though...

[17:21] <Zoffix> timotimo: proto infix:<*> (|) causes `my int $x; say $x * 2` to get rewritten to mul_i, but `proto infix:<*>($, $, *%)` doesn't. So far, I tracked it to to analyze_args_for_ct_call and I want to teach it to handle *% the same as it handles | but I don't really see any handling for | so looks like it's just ignored :/

[17:21] <AlexDaniel> robertle_: ok, so with the patch it no longer happens, right? Isn't it good?

[17:22] <robertle_> yeah, it is good! but it would be even better if teh problem could be reproduced...

[17:22] <AlexDaniel> aaaaaaaaaaaaaaah

[17:22] <AlexDaniel> ok I get it now, sorry

[17:22] <robertle_> but the patch looks desirable independently from the crash, really

[17:22] * Zoffix tries s/$_.named ne ''/($_.named && ! $_.slurpy)/

[17:22] <AlexDaniel> nine: can you commit it? ↑

[17:23] <robertle_> I wanna try the big endian libffi patch next...

[17:24] <timotimo> Zoffix: isn't that "flattening" related?

[17:24] <timotimo> ah, that's what you're changing there

[17:24] <Zoffix> damn Cannot find method 'slurpy' on object of type QAST::Op+{QAST::SpecialArg}

[17:25] <Zoffix> it's just named and flat it got

[17:25] <timotimo> slurpy is called flattening in those parts i think?

[17:26] <timotimo> hm, though, that's probably the differnce between a specific call vs the signature

[17:30] <nine> AlexDaniel: will do

[17:30] <AlexDaniel> thank you

[17:38] <AlexDaniel> ( https://github.com/perl6/nqp/issues/431#issuecomment-382871449 )

[17:41] <[TuxCM]> samcv, I'd like a chat with tou when you're visiting an Amsterdam.PM meeting again :)

[17:49] <[TuxCM]> I'm out for the day. bbl

[18:56] <Zoffix> looks like App::MoarVM::Debug doesn't work on src/Perl6/Optimizer.nqp

[18:57] <Zoffix> (unless I just dun it wron)

[18:58] <timotimo> interesting, let's check it out together

[18:58] <timotimo> what are you doing, what's happening?

[18:59] <Zoffix> Trying to dump this array: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Optimizer.nqp#L1586

[18:59] <Zoffix> While running code my int $x = 4; say 2 * $x

[19:00] <timotimo> oh, now rakudo's exploding because FSA_SIZE_DEBUG found something

[19:01] <Zoffix> :o

[19:01] <timotimo> right, the debugserver is using it wrong there

[19:05] <timotimo> oh, thats fun

[19:05] <timotimo> i use MVM_calloc at one point to create that. that could be the problem :D

[19:07] <timotimo> Zoffix: i have a sneaking suspicion already

[19:07] <Zoffix> About what?

[19:08] <timotimo> wait, i didn't even ask what wasn't working

[19:08] <timotimo> did you reach the right position in the code with a breakpoint?

[19:09] <Zoffix> timotimo: it doesn't stop at the breakpoint. Here's the session: https://gist.github.com/zoffixznet/0fe1eb3a4051ecfdf8f81f2044a1bed4

[19:10] <timotimo> yup, there is not actually a file that has that path

[19:10] <timotimo> has to be gen/moar/Perl6-Optimizer.nqp

[19:11] <timotimo> in that file, 1581 is a comment line

[19:11] <timotimo> 1589 is the right one

[19:12] <timotimo> that breakpoint is hit on my end

[19:12] <Zoffix> oh

[19:12] <timotimo> if you need the filenames that are valid listed to you, you can run moar with MDS_PROTOCOL=yes in the environment and it'll flood you with info

[19:12] <Zoffix> huggable: debug

[19:12] <huggable> Zoffix, nothing found

[19:13] <Zoffix> huggable: debug :is: https://github.com/edumentab/p6-app-moarvm-debug#appmoarvmdebug if you need the filenames that are valid listed to you, you can run moar with MDS_PROTOCOL=yes in the environment and it'll flood you with info

[19:13] <huggable> Zoffix, Added debug as https://github.com/edumentab/p6-app-moarvm-debug#appmoarvmdebug if you need the filenames that are valid listed to you, you can run moar with MDS_PROTOCOL=yes in the environment and it'll flood you with info

[19:13] <timotimo> there's not yet anything in the protocol to signal this info, i assume there ought to be in the future

[19:15] <timotimo> i don't get any lexicals for analyze_args_for_ct_call, hooray for lexical-to-local-lowering :S

[19:20] <timotimo> maybe rebuild rakudo with the perl6-optimizer turned off for its own code

[19:20] <timotimo> so that all lexicals remain in there

[19:20] <Zoffix> I managed to dump them manually

[19:21] <Zoffix> Types end up being [Int, int] in broken version and [int] in working :/

[19:23] <Zoffix> oh wait, nm, there are two places they get dumped at

[19:23] <timotimo> damn, you had to change the code and recompile rakudo?

[19:30] <Zoffix> Ok, finally golfed it down to something outside rakudo

[19:30] <Zoffix> m: use nqp; dd nqp::p6trialbind(:($?, $?), nqp::list(Int, int), nqp::list(33, 1))

[19:30] <camelia> rakudo-moar 1c6701b92: OUTPUT: «1␤»

[19:30] <Zoffix> m: use nqp; dd nqp::p6trialbind(:($?, $?, *%), nqp::list(Int, int), nqp::list(33, 1))

[19:30] <camelia> rakudo-moar 1c6701b92: OUTPUT: «0␤»

[19:30] <Zoffix> Needs to say 1 in both cases

[19:30] <nine> zef now officialy supports Distribution::Builder as specified in S22 since last PTS :)

[19:31] <Zoffix> nice

[19:32] <Zoffix> "# If there's a single capture parameter, then we're OK. (Worth handling especially as it's the common case for protos)."

[19:32] <Zoffix> Well, not anymore :/

[19:32] <nine> It's funny to discover what amazing stuff we did last year and almost forgot about it later. And that it's at least as much work to get this stuff into the toolchain while maintaining backwards compatibility

[19:32] <Zoffix> Wonder if all these more specific protos stuff will make stuff slower to compile now

[19:35] <Zoffix> "# If the parameter is anything other than a boring old positional parameter, we won't analyze it."

[19:35] <Zoffix> I guess that's the ticket. Need to make it treat *% as "ok"

[19:42] <Zoffix> ZofBot: ohyea boiii

[19:42] <ZofBot> Zoffix, We do this because sometimes Father wants to give me a hug, but do not like hugging people so we do this instead, and it means that he loves me

[19:45] <AlexDaniel> O_O

[19:46] <Zoffix> XD

[19:48] <Zoffix> ZofBot: and who's your Father?

[19:48] <ZofBot> Zoffix, It's the same concept but written in a more explicit way

[19:54] <Zoffix> ZOFVM: Files=1294, Tests=153320, 147 wallclock secs (19.92 usr  3.15 sys + 3118.95 cusr 146.01 csys = 3288.03 CPU)

[19:54] <Zoffix> win

[19:55] <Zoffix> Well, I hope it's a win and I didn't actually mess something up :P

[19:56] <Zoffix> hm

[20:02] <Zoffix> jnthn: are you around?

[20:04] <Zoffix> .ask jnthn is it right that we OKing a capture param in trial bind; 'cause it might have a `where` clause on it, doesn't it? https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/BOOTSTRAP.nqp#L998 Asking 'cause I'm sticking `if $flags +& $SIG_ELEM_SLURPY_NAMED { next }` before this line https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/BOOTSTRAP.nqp#L1014 to ignore named slurpy

[20:04] <yoleaux> Zoffix: I'll pass your message to jnthn.

[20:04] <Zoffix> params, since we now use them in protos, but now I'm wondering what if they got a where clause on them......

[20:04] <Zoffix> .tell jnthn params, since we now use them in protos, but now I'm wondering what if they got a where clause on them......

[20:04] <yoleaux> Zoffix: I'll pass your message to jnthn.

[20:06] <Geth> ¦ rakudo/proto-fix-R1739: d443076dab | (Zoffix Znet)++ | t/02-rakudo/08-inline-native-arith.t

[20:06] <Geth> ¦ rakudo/proto-fix-R1739: Revert "Temp-fudge mul_i opt test"

[20:06] <Geth> ¦ rakudo/proto-fix-R1739:

[20:06] <Geth> ¦ rakudo/proto-fix-R1739: This reverts commit a3a7c142a48026db434893e79930478efba926c9.

[20:06] <Geth> ¦ rakudo/proto-fix-R1739: review: https://github.com/rakudo/rakudo/commit/d443076dab

[20:06] <Geth> ¦ rakudo/proto-fix-R1739: 6a65ed02bf | (Zoffix Znet)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[20:06] <Geth> ¦ rakudo/proto-fix-R1739: Teach Binder's .trial_bind to handle named slurpies

[20:06] <Geth> ¦ rakudo/proto-fix-R1739:

[20:06] <Geth> ¦ rakudo/proto-fix-R1739: Since this one would accept any named param, just ignore it

[20:06] <Geth> ¦ rakudo/proto-fix-R1739: while trial binding. This lets us use `*%` in our protos as

[20:06] <Geth> ¦ rakudo/proto-fix-R1739: part of fixing https://github.com/rakudo/rakudo/issues/1739

[20:06] <Geth> ¦ rakudo/proto-fix-R1739: review: https://github.com/rakudo/rakudo/commit/6a65ed02bf

[20:06] <Geth> ¦ rakudo/proto-fix-R1739: d17f7535aa | (Zoffix Znet)++ | t/02-rakudo/08-inline-native-arith.t

[20:07] <Geth> ¦ rakudo/proto-fix-R1739: Unfudge mul_i inline / add additional test for *% trialbind

[20:07] <Geth> ¦ rakudo/proto-fix-R1739: review: https://github.com/rakudo/rakudo/commit/d17f7535aa

[20:07] <Geth> ¦ roast/proto-fix-R1739: bae723ceaa | (Zoffix Znet)++ | S06-signature/unspecified.t

[20:07] <Geth> ¦ roast/proto-fix-R1739: Tweak test to work even when we find error at compile time

[20:07] <Geth> ¦ roast/proto-fix-R1739:

[20:07] <Geth> ¦ roast/proto-fix-R1739: The test assumes the dispatch failure will only ever going to

[20:07] <Geth> ¦ roast/proto-fix-R1739: be detected at runtime, but we're now smart enough to detect

[20:07] <Geth> ¦ roast/proto-fix-R1739: it at compile time.

[20:07] <Geth> ¦ roast/proto-fix-R1739:

[20:07] <Geth> ¦ roast/proto-fix-R1739: Fix the test by using eval-dies-ok instead of just dies-ok.

[20:07] <Geth> ¦ roast/proto-fix-R1739: review: https://github.com/perl6/roast/commit/bae723ceaa

[20:08] <Geth> ¦ rakudo: zoffixznet++ created pull request #1755: Proto fix r1739

[20:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1755

[20:08] <Geth> ¦ rakudo/master: 7 commits pushed by (Zoffix Znet)++

[20:08] <Geth> ¦ rakudo/master: 105bc34259 | Expand proto narrowness tests

[20:08] <Geth> ¦ rakudo/master: a3a7c142a4 | Temp-fudge mul_i opt test

[20:08] <Geth> ¦ rakudo/master: 4b5d36f3a8 | Fix up proto .arity/.count for all core multi subs

[20:08] <Geth> ¦ rakudo/master: d443076dab | Revert "Temp-fudge mul_i opt test"

[20:08] <Geth> ¦ rakudo/master: 6a65ed02bf | Teach Binder's .trial_bind to handle named slurpies

[20:08] <Geth> ¦ rakudo/master: d17f7535aa | Unfudge mul_i inline / add additional test for *% trialbind

[20:08] <Geth> ¦ rakudo/master: 92eaa11a1f | Merge pull request #1755 from rakudo/proto-fix-R1739

[20:08] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/1c6701b92ac7...92eaa11a1f60

[20:09] <Geth> ¦ roast: zoffixznet++ created pull request #417: Proto fix r1739

[20:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/417

[20:09] <Geth> ¦ roast/master: 5 commits pushed by (Zoffix Znet)++

[20:09] <Geth> ¦ roast/master: 0faa97adf8 | Implement throws-like-any helper routine

[20:09] <Geth> ¦ roast/master: d35c12e39f | Test .sort doesn't crash with &lc

[20:09] <Geth> ¦ roast/master: 16594c6187 | Loosen no-multi tests for Mu.[]/Mu.{}

[20:09] <Geth> ¦ roast/master: bae723ceaa | Tweak test to work even when we find error at compile time

[20:09] <Geth> ¦ roast/master: ab8c502ceb | Merge pull request #417 from perl6/proto-fix-R1739

[20:09] <Geth> ¦ roast/master: review: https://github.com/perl6/roast/compare/9b51e66c2c71...ab8c502ceb5d

[20:09] <AlexDaniel> Zoffix++

[20:10] <samcv> [Tux]: looking forward to it :)

[20:11] <Zoffix> AlexDaniel: there are three commits that need to be cherry-picked to 6.c-errata: 16594c6187 which just fixes up test to not assuming the call will fail with a multi dispatch failure (it can also and now does fail with single-sub param bind failure, since we fail in proto, before we even get to candidates); 0faa97adf8 is the helper routine used in previous commit; and bae723ceaa just makes the assumption

[20:11] <Zoffix> call failure will be done at runtime, but we now are able to detect that it'll never work at compile time, so the test is tweaked to handle compile time throwage.

[20:12] <Zoffix> AlexDaniel: and https://github.com/rakudo/rakudo/issues/1739 is now fixed, but would be nice for jnthn to OK this commit https://github.com/rakudo/rakudo/pull/1755/commits/6a65ed02bf1fccb8a5d4b7df248d93036e7652c6 ( I sent a robot message here https://irclog.perlgeek.de/perl6-dev/2018-04-21#i_16075200 )

[20:12] <Zoffix> It's just too obvious a thing to have it check so the fact that it wasn't makes me think there might be a reason.

[20:13] <AlexDaniel> I see

[20:13] <Zoffix> And if that commits needs to be reverted, then we got a problem, as pretty much all our protos now have a *% (all except those that got a |)

[20:13] <AlexDaniel> so, from my side, toaster looked good (at least before these changes)

[20:13] <AlexDaniel> but

[20:13] <AlexDaniel> releasable fails when trying to install Inline::Perl5

[20:14] <AlexDaniel> trying to figure out why

[20:14] <AlexDaniel> but it just says

[20:14] <AlexDaniel> ===> Building: Inline::Perl5:ver<0.32>:auth<github:niner>

[20:14] <AlexDaniel> (Any)

[20:14] <AlexDaniel> No building backend available

[20:14] <AlexDaniel> nine: ↑ does that ring any bells?

[20:14] <AlexDaniel> (well there's a backtrace also obviously)

[20:14] <Kaiepi> that reminds me i need to get rakudobot to support inline::perl5

[20:17] <AlexDaniel> ah

[20:18] <AlexDaniel> right, can reproduce it

[20:18] <AlexDaniel> just had to update zef

[20:20] <tony-o> we're here working on it

[20:20] <AlexDaniel> nine: I filed this ticket, let me know if there's anything else I should do: https://github.com/ugexe/zef/issues/240

[20:21] <AlexDaniel> oh

[20:21] <tony-o> oh, not on the issue afaik, just on zef in general

[20:21] <tony-o> okay, now we're looking at it

[20:21] <AlexDaniel> good, thank you

[20:21] <tony-o> nine just flipped open his pc

[20:22] <AlexDaniel> \o/ :)

[20:24] <tony-o> if you want the play by play, he can reproduce

[20:24] <tony-o> he's typing furiously

[20:26] <AlexDaniel> this is amazing :D

[20:29] <MasterDuke> is he livestreaming on twitch?

[20:30] <nine> AlexDaniel: just pushed a fix

[20:30] <nine> at least I hope so :)

[20:30] <tony-o> he's anxiously awaiting an update on his progress

[20:30] <AlexDaniel> .oO( 20$ for another hour trying to fix a bug )

[20:31] <AlexDaniel> nine: don't you have to bump the version?

[20:31] <tony-o> ugexe is waiting to do that since all 3 of us are testing

[20:32] <nine> Fix is good...ugexe is doing the version bump

[20:32] <tony-o> nine is now napping

[20:33] <AlexDaniel> thanks to all of you \o/

[20:34] <nine> AlexDaniel: thanks for the report

[20:35] <jnthn> Currently testing a fix for https://github.com/rakudo/rakudo/issues/1753

[20:35] <yoleaux> 20:04Z <Zoffix> jnthn: is it right that we OKing a capture param in trial bind; 'cause it might have a `where` clause on it, doesn't it? https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/BOOTSTRAP.nqp#L998 Asking 'cause I'm sticking `if $flags +& $SIG_ELEM_SLURPY_NAMED { next }` before this line https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/BOOTSTRAP.nqp#L1014 to ignore named slurpy

[20:35] <yoleaux> 20:04Z <Zoffix> jnthn: params, since we now use them in protos, but now I'm wondering what if they got a where clause on them......

[20:45] <AlexDaniel> c: HEAD subset ZInt of Cool where *.elems; sub foo(ZInt(Cool) $Z) {}; say "well that's compile time

[20:45] <committable6> AlexDaniel, ¦HEAD(92eaa11): «===SORRY!===␤Method 'iterator' must be implemented by Iterable because it is required by roles: Iterable.␤ «exit code = 1»»

[20:46] <jnthn> It's so compile time you get the error before your syntax error. :-)

[20:46] <AlexDaniel> :)

[20:47] <jnthn> My change extended an optimization to include coercion types, but I'd not considered that he target of a coercion type might be a subset type. In theory that shouldn't be a problem.

[20:47] <jnthn> But practice ain't theory. ;)

[20:47] <nine> In theory theory and practice are the same

[20:47] <jnthn> But all I really need is the nominal type the subset type is based on.

[20:48] <AlexDaniel> golfing it was fun, I just deleted everything in the file from some point (all these closing braces) and the error was still there

[20:48] <jnthn> So I've got a patch to do that. I've checked in --target=ast that the opt still applies how I expect. Spectest is nearly done.

[20:54] <Geth> ¦ rakudo: zoffixznet self-assigned Iterable appearing in subset constraints https://github.com/rakudo/rakudo/issues/1753

[20:55] <Zoffix> oh damn, my IRC was hung

[20:55] <Geth> ¦ rakudo: 12a38f1f65 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[20:55] <Geth> ¦ rakudo: Make `Foo() $x` optimization use nominal type

[20:55] <Geth> ¦ rakudo:

[20:55] <Geth> ¦ rakudo: Since that's all it needs anyway. As noted in issue #1753, subset type

[20:55] <Geth> ¦ rakudo: `where` clauses will often not be written so robustly as to handle

[20:55] <Geth> ¦ rakudo: having the `Iterable` role passed in to check. Since we've no need to

[20:55] <Geth> ¦ rakudo: do that anyway, this change side-steps the problem, in the same way it

[20:55] <synopsebot> RAKUDO#1753 [open]: https://github.com/rakudo/rakudo/issues/1753 [regression][⚠ blocker ⚠] Iterable appearing in subset constraints

[20:55] <Geth> ¦ rakudo: is side-stepped for the optimization on a `Foo $x` parameter.

[20:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/12a38f1f65

[20:57] <Zoffix> My patch was just sticking nqp::how($*W.find_symbol: ['Metamodel', 'SubsetHOW'], :setting-only)) before testing for istype Iterable

[20:58] <Zoffix> AlexDaniel: so then that's it. All blockers are fixed

[20:58] <AlexDaniel> yeah, that's awesome

[20:59] <jnthn> Zoffix: Something like that would fix it, but be a missed opportunity (in that if we pull out the nominal base type then we can still apply the opt).

[20:59] <AlexDaniel> jnthn: so what's the answer to the robomessage?

[21:00] <Zoffix> jnthn: yeah, I see it now

[21:00] <jnthn> Was just about to read that, now I'm done with that ticket :-)

[21:00] <AlexDaniel> ♥

[21:01] <jnthn> Zoffix: Yes, you're right, a `where` clause on that `Capture` would break that opt.

[21:01] <jnthn> I'm pretty sure the syntax admits one

[21:01] <jnthn> m: sub foo(|c where *.elems) { }

[21:01] <camelia> rakudo-moar 92eaa11a1: ( no output )

[21:01] <jnthn> Yeah, it does

[21:02] <jnthn> Note that below there's:

[21:02] <jnthn> unless nqp::isnull(nqp::getattr($param, Parameter, '@!post_constraints')) {

[21:02] <jnthn> return $TRIAL_BIND_NOT_SURE;

[21:02] <jnthn> }

[21:02] <jnthn> So we cover that in general

[21:03] <jnthn> If a handling of *% comes before that test, then we'd need to check that also

[21:03] <Zoffix> Yeah, it does. Gonna add it

[21:03] <jnthn> Zoffix++

[21:03] <jnthn> Nice catch

[21:03] <jnthn> OK, anything else release-blocking that wants my eyes?

[21:04] <Zoffix> AlexDaniel: ping ^

[21:04] <AlexDaniel> to my knowledge there's nothing left :)

[21:04] <jnthn> \o/

[21:04] <timotimo> very cool.

[21:05] <Geth> ¦ roast: 3d94721d68 | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[21:05] <Geth> ¦ roast: Test coercer with subset target does not crash

[21:05] <Geth> ¦ roast:

[21:05] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1753 R#1753

[21:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3d94721d68

[21:07] <AlexDaniel> Zoffix: proposed errata changes look fine too, I hope no one is relying (they really shouldn't) on subs dying at run time

[21:08] <AlexDaniel> but I'll run toaster once again anyway, because I can :)

[21:08] <Zoffix> AlexDaniel: 1 sec, let me commit the fix for trial bind

[21:09] <nine> jnthn: I'd just be interested in your opinion on doing https://github.com/MoarVM/MoarVM/commit/876aa90ee7 on all architectures for potential performance wins of keeping pointers aligned

[21:09] <AlexDaniel> you can also do a bump

[21:09] <Zoffix> will do

[21:11] <jnthn> nine: Not sure; it's a trade-off against how much fits into caches.

[21:12] <jnthn> nine: I suspect we don't have many things that actually need padding, however.

[21:12] <nine> Aren't cache entries aligned anyway?

[21:12] <jnthn> In fact, I'm curious where this does come up

[21:12] <jnthn> Cache lines are, but they're also 64 bytes in size

[21:13] <jnthn> Or 32, or 16...

[21:13] <jnthn> But bigger an an individual item

[21:14] <jnthn> I think it's probably worth doing alignment to pointer size everywhere

[21:14] <jnthn> Whether it's worth doing 8-byte alignment on 32-bit platforms so that doubles are always aligned, on the other hand, I'm much less sure about.

[21:14] <jnthn> (On platforms where we don't need it, I mean)

[21:16] <Zoffix> hm, can't come up with a piece of code that would show `sub foo(|c where *.elems) { }` as problematic case

[21:17] <jnthn> It'd need to be a multi, I think?

[21:19] * jnthn afk a bit

[21:21] <Zoffix> I give up

[21:22] <Geth> ¦ rakudo: 859178b066 | (Zoffix Znet)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[21:22] <Geth> ¦ rakudo: Check postconstraints when we handle capture/named slurpy in trial bind

[21:22] <Geth> ¦ rakudo:

[21:22] <Geth> ¦ rakudo: https://irclog.perlgeek.de/perl6-dev/2018-04-21#i_16075429

[21:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/859178b066

[21:25] <Zoffix> c: 2018.03 proto z(|) is pure {*};  multi z(Str) {say "called"}; say "runtime"; $ = z ""

[21:25] <committable6> Zoffix, ¦2018.03: «called␤runtime␤»

[21:25] <Zoffix> c: 2018.03 proto z(| where *.head.so) is pure {*};  multi z(Str) {say "called"}; say "runtime"; $ = z ""

[21:25] <committable6> Zoffix, ¦2018.03: «runtime␤Constraint type check failed in binding to parameter '<anon>'; expected anonymous constraint to be met but got Capture (\(""))␤  in block <unit> at /tmp/UQSWQjJu_f line 1␤␤ «exit code = 1»»

[21:25] <Zoffix> Like, I would've expected that to miss the `where` in the proto and behave the same as the first case

[21:27] <Zoffix> m: use nqp; dd nqp::p6trialbind(:(| where *.not), nqp::list(Int, int), nqp::list(33, 1))

[21:27] <camelia> rakudo-moar 12a38f1f6: OUTPUT: «1␤»

[21:27] <Zoffix> c: HEAD use nqp; dd nqp::p6trialbind(:(| where *.not), nqp::list(Int, int), nqp::list(33, 1))

[21:27] <committable6> Zoffix, ¦HEAD(12a38f1): «1␤»

[21:27] <Zoffix> that prolly it

[21:27] <Zoffix> yup

[21:29] <Geth> ¦ nqp: a24e43d8f4 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[21:29] <Geth> ¦ nqp: [MoarVM Bump] 876aa90 Ensure memory blocks in  […]

[21:29] <Geth> ¦ nqp:

[21:29] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.03-125-g05d589e5c...2018.03-126-g876aa90

[21:29] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a24e43d8f4

[21:29] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.03-125-g05d589e5c...2018.03-126-g876aa90

[21:29] <Geth> ¦ rakudo: db7e79a015 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[21:30] <Geth> ¦ rakudo: [NQP Bump] a24e43d [MoarVM Bump] 876aa90 Ensur […]

[21:30] <Geth> ¦ rakudo:

[21:30] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.03-84-g888e05af8...2018.03-85-ga24e43d

[21:30] <Geth> ¦ rakudo:

[21:30] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.03-125-g05d589e5c...2018.03-126-g876aa90

[21:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/db7e79a015

[21:30] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.03-84-g888e05af8...2018.03-85-ga24e43d

[21:31] <AlexDaniel> BeastieBot: all

[21:31] <BeastieBot> [freebsd] Configuring Rakudo...

[21:31] <Geth> ¦ rakudo: fa979c9227 | (Zoffix Znet)++ | t/02-rakudo/08-inline-native-arith.t

[21:31] <Geth> ¦ rakudo: Test p6trialbind with `where`s

[21:31] <Geth> ¦ rakudo:

[21:31] <Geth> ¦ rakudo: Ensure it notices `where` on capture / named slurpy

[21:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fa979c9227

[21:31] <Zoffix> AlexDaniel: I'm done. All good for toasting

[21:31] <AlexDaniel> cool

[21:33] <BeastieBot> [freebsd] Building Rakudo...

[21:36] <BeastieBot> [freebsd] Build successful!

[21:36] <BeastieBot> [freebsd] Testing Rakudo...

[21:39] <Geth> ¦ roast/6.c-errata: 75b4fb032a | (Zoffix Znet)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | packages/Test/Util.pm

[21:39] <Geth> ¦ roast/6.c-errata: Implement throws-like-any helper routine

[21:39] <Geth> ¦ roast/6.c-errata:

[21:39] <Geth> ¦ roast/6.c-errata: Same as throws-like but checks the exception among possibilities

[21:39] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/75b4fb032a

[21:39] <Geth> ¦ roast/6.c-errata: 7dc87a906f | (Zoffix Znet)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | 2 files

[21:39] <Geth> ¦ roast/6.c-errata: Loosen no-multi tests for Mu.[]/Mu.{}

[21:39] <Geth> ¦ roast/6.c-errata:

[21:39] <Geth> ¦ roast/6.c-errata: The tests test there's no candidate to handle the Mu, but

[21:39] <Geth> ¦ roast/6.c-errata: testing for X::Multi::NoMatch is too strict a restriction.

[21:39] <Geth> ¦ roast/6.c-errata:

[21:39] <Geth> ¦ roast/6.c-errata: Allow X::TypeCheck::Binding::Parameter to be thrown as well in those

[21:39] <Geth> ¦ roast/6.c-errata: cases.

[21:39] <BeastieBot> [freebsd] | t/04-nativecall/02-simple-args.t                              (Wstat: 256 Tests: 14 Failed: 1)

[21:39] <BeastieBot> [freebsd] Tests failed. See the output at http://fpaste.scsys.co.uk/577186

[21:39] <BeastieBot> AlexDaniel, done!

[21:39] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/7dc87a906f

[21:39] <Geth> ¦ roast/6.c-errata: b8889f73f3 | (Zoffix Znet)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S06-signature/unspecified.t

[21:39] <Geth> ¦ roast/6.c-errata: Tweak test to work even when we find error at compile time

[21:39] <Geth> ¦ roast/6.c-errata:

[21:39] <Geth> ¦ roast/6.c-errata: The test assumes the dispatch failure will only ever going to

[21:39] <Geth> ¦ roast/6.c-errata: be detected at runtime, but we're now smart enough to detect

[21:39] <Geth> ¦ roast/6.c-errata: it at compile time.

[21:39] <Geth> ¦ roast/6.c-errata:

[21:39] <Geth> ¦ roast/6.c-errata: Fix the test by using eval-dies-ok instead of just dies-ok.

[21:39] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/b8889f73f3

[21:39] <AlexDaniel> Kaiepi: is that something I should worry about?

[21:52] <Kaiepi> is what?

[21:52] <Kaiepi> oh lemme check

[21:53] <Kaiepi> yes and no

[21:53] <Kaiepi> i already made a pullreq to mitigate it, and there's another way that might work for os x as well

[21:54] <Kaiepi> https://github.com/rakudo/rakudo/pull/1620

[21:56] <Kaiepi> i'll get pufferbot up and check its tests

[21:57] <Kaiepi> the stresstests i'll have to run myself for both bots since i need to refactor it badly before i can support it properly

[21:58] <AlexDaniel> uhhh

[21:59] <Geth> ¦ rakudo: 71d23f0abe | (Ben Davies)++ | t/04-nativecall/02-simple-args.t

[21:59] <Geth> ¦ rakudo: Skip NativeCall TakeUint16 test on FreeBSD

[21:59] <Geth> ¦ rakudo:

[21:59] <Geth> ¦ rakudo: See #1619

[21:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/71d23f0abe

[21:59] <Geth> ¦ rakudo: a138dcf50d | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | t/04-nativecall/02-simple-args.t

[21:59] <synopsebot> RAKUDO#1619 [open]: https://github.com/rakudo/rakudo/issues/1619 NativeCall TakeUint16(0xFFFE) test fails in certain cases on FreeBSD

[21:59] <Geth> ¦ rakudo: Merge pull request #1620 from Kaiepi/nativecall

[21:59] <Geth> ¦ rakudo:

[21:59] <Geth> ¦ rakudo: Skip NativeCall TakeUint16 test on FreeBSD

[21:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a138dcf50d

[21:59] <AlexDaniel> Kaiepi: ok can you please file a ticket mentioning that these tests are skipped?

[22:00] <Kaiepi> ok

[22:00] <AlexDaniel> skipping is probably ok for now given that we already do it for osx, but we want to fix that eventually

[22:00] <AlexDaniel> thanks

[22:02] <Kaiepi> how do i open a ticket on the site though?

[22:02] <Zoffix> Kaiepi: file it on github: https://github.com/rakudo/rakudo/issues/new

[22:03] <Kaiepi> ohhh

[22:03] <Kaiepi> lol

[22:04] <Kaiepi> i've been doing that since it seemed like the style here, but didn't realize it opened tickets

[22:04] <Zoffix> Kaiepi: what site were you talking about? https://fail.rakudo.party/

[22:04] <Zoffix> ?

[22:05] <AlexDaniel> oh, there is a ticket already: R#1619

[22:05] <Kaiepi> ....the perl 5 one it looks like

[22:08] <AlexDaniel> I guess both https://fail.rakudo.party/ and RT should now say that new tickets are preferably submitted on github

[22:09] <Kaiepi> that's a relief

[22:09] <AlexDaniel> otherwise people tracking these websites probably get a feeling that no one is reporting bugs anymore

[22:09] <Zoffix> :)

[22:35] <travis-ci> Rakudo build passed. Aleks-Daniel Jakimenko-Aleksejev 'Merge pull request #1620 from Kaiepi/nativecall

[22:35] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/369606309 https://github.com/rakudo/rakudo/compare/fa979c922703...a138dcf50df2

[22:38] <Kaiepi> i'm gonna need to upu the ram on my freebsd vps, beastiebot doesn't handle stresstest unless you're lucky

[22:38] <timotimo> maybe it's enough to set TEST_JOBS to a lower number?

[22:40] <Kaiepi> i'll give that a shot

[22:40] <timotimo> though i could imagine we have marked some tests as "memory hungry" and perhaps run these in isolation?

[22:40] <timotimo> *shrug*

[22:45] <Kaiepi> the vps has only one core, so TEST_JOBS might be what i need

[22:46] <Kaiepi> or more cores

[22:49] <timotimo> is that the core of your problem?

[22:50] <Kaiepi> possibly :)

[23:00] <Kaiepi> ok Inline::Perl5 won't install on freebsd

[23:01] <Kaiepi> i'll see how the stresstest goes without it

[23:07] <Kaiepi> freebsd stresstest results: https://hastebin.com/zebiranuce.sql

[23:09] <Kaiepi> wait i interrupted it?

[23:09] <Kaiepi> nvm lemme run it again

[23:09] <AlexDaniel> ok releasable is happy

[23:10] <AlexDaniel> toaster not done yet but I'm not expecting any new failures from there

[23:10] <AlexDaniel> so having said that, I'll now get some sleep, see you all tomorrow :)

[23:11] <Kaiepi> night

[23:11] <AlexDaniel> samcv: it looks like everything is ready for rakudo release (except for some paperwork) \o/

[23:11] <timotimo> good night AlexDaniel :)

[23:11] <AlexDaniel> Kaiepi: please file a bug report if you get some consistent failures

[23:12] <AlexDaniel> Kaiepi: sometimes things flap, so rerun if you get one failure somewhere

[23:12] <AlexDaniel> … well sometimes maybe more than one :)

[23:13] <Kaiepi> if i haven't been doing it consistently enough, i'll work on that

[23:14] <Kaiepi> actually wait i should mention the io-socket-async ipv6 failures on systems without it

[23:31] <Kaiepi> openbsd stresstests done: a bunch failed https://hastebin.com/molupujeqo.sql

[23:32] <Kaiepi> depending on what stresstest's doing it might just be an issue with login.com

[23:32] <Kaiepi> *login.conf

[23:39] <Zoffix> It's a 1-core box? Likely why t/spec/MISC/bug-coverage-stress.t failed

[23:39] <Kaiepi> the link i just posted is my desktop

[23:39] <Kaiepi> the freebsd one's still going

[23:39] <Zoffix> Ah

[23:40] <Kaiepi> could be a login.conf issue

[23:42] <Zoffix> That reminds me. Spectest failures for Win10: https://gist.github.com/zoffixznet/c0cf58aad5242ba0ca27e97f205fdcd6

[23:42] <Zoffix> on head

[23:43] <tony-o> timotimo: ping

[23:43] <Kaiepi> the tests i'm running are on head

[23:44] <Kaiepi> i stopped working in t/spec and cloned roast, so those errors shouldn't pop up anymore
