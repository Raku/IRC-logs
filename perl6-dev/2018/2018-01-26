[00:07] <AlexDaniel> Failed to find dependencies: DateTime::Parse

[00:07] <AlexDaniel> (╯°□°）╯︵ ┻━┻

[00:09] <AlexDaniel> https://raw.githubusercontent.com/sergot/datetime-parse/master/META.info 404

[00:09] <AlexDaniel> Unsuccessful HTTP response: 404 404 Not Found at server/updatelist.pl line 43, <$_[...]> line 877.

[00:09] <AlexDaniel> that's from http://ecosystem-api.p6c.org/update.log

[00:10] <AlexDaniel> right, because it's META6

[00:13] <AlexDaniel> ok, should be good now

[01:03] <Geth> ¦ nqp: 8192977b92 | (Tom Browder)++ (committed using GitHub Web editor) | docs/ops.markdown

[01:03] <Geth> ¦ nqp: document removal of shell and spawn

[01:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8192977b92

[01:09] <Geth> ¦ nqp: cbfe319ce2 | (Tom Browder)++ (committed using GitHub Web editor) | docs/ops.markdown

[01:09] <Geth> ¦ nqp: remove entry for external commands

[01:09] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cbfe319ce2

[02:15] <travis-ci> Rakudo build passed. Zoffix Znet 'Merge pull request #1441 from rakudo/post-release

[02:15] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/333092767 https://github.com/rakudo/rakudo/compare/d1a48efc975a...7c8bbc8dad6a

[04:02] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Give a bare 'fc' the same treatment as bare 'lc' or 'uc''

[04:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/333262169 https://github.com/rakudo/rakudo/compare/7c8bbc8dad6a...8ffbc43b411c

[05:17] <travis-ci> Rakudo build passed. Pepe Schwarz 'Fix basic list marshalling'

[05:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/333271941 https://github.com/rakudo/rakudo/compare/8ffbc43b411c...a2499c90fc06

[08:31] <stmuk> subjectively without benchmarking 2018.01 pod generation seems faster to me

[08:31] <stmuk> p6doc is more useable than before

[08:47] <AlexDaniel> stmuk: that's very interesting. If that's true, then I think it's because of general performance improvements in rakudo. All pod changes were about its correctness and not performance, IIRC

[09:00] <AlexDaniel> committable6: HEAD say 42

[09:00] <committable6> AlexDaniel, ¦HEAD(a2499c9): «42␤»

[09:00] <AlexDaniel> committable6: HEAD say ‘hello world’ for ^20

[09:00] <committable6> AlexDaniel, https://gist.github.com/93babf61ea049e30d88842cce2fbbec0

[09:55] <lizmat> Files=1233, Tests=76092, 339 wallclock secs (15.07 usr  5.47 sys + 2303.60 cusr 237.49 csys = 2561.63 CPU)

[10:40] <stmuk> this "say" truncating output via .gist is going to catch some p5 people out

[10:40] <Geth> ¦ nqp: e4f79cbae1 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[10:40] <Geth> ¦ nqp: [MoarVM Bump] Brings 21 commits

[10:40] <Geth> ¦ nqp:

[10:40] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.01...2018.01-21-gd3ce626

[10:40] <Geth> ¦ nqp: d3ce626 Add JIT template for atkey_o

[10:40] <Geth> ¦ nqp: ac9f241 Update release_guide.md w/ info on generating releases.html

[10:40] <Geth> ¦ nqp: 65273a4 Add script that generates moarvm.org/releases.html

[10:40] <Geth> ¦ nqp: f1197e4 Edit the ChangeLog to include the original release

[10:40] <Geth> ¦ nqp: 3992885 Fix MVM_spesh_log_decont not logging anything

[10:40] <Geth> ¦ nqp: 7e7ee8d Run basic facts discovery on inlined code

[10:40] <Geth> ¦ nqp: 00d19a6 Fix segfault in JIT bytecode dumper on code without static frame

[10:40] <Geth> ¦ nqp: 279d7d7 Fix a typo in a comment

[10:40] <Geth> ¦ nqp: 63f92e0 Only BAIL on DEOPT_ONE annotations on actual guard ops in expr JIT

[10:40] <Geth> ¦ nqp: d3f38a1 Expr JIT template for create

[10:40] <Geth> ¦ nqp: 72626cc Expr JIT template for capturelex

[10:40] <Geth> ¦ nqp: 4d71947 Expr JIT template for takeclosure

[10:40] <Geth> ¦ nqp: <…commit message has 9 more lines…>

[10:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e4f79cbae1

[10:40] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.01...2018.01-21-gd3ce626

[10:40] <Geth> ¦ rakudo: a5c2398cc7 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[10:40] <Geth> ¦ rakudo: [NQP Bump] Brings 4 commits

[10:40] <Geth> ¦ rakudo:

[10:40] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.01-10-gb88de49aa...2018.01-14-ge4f79cb

[10:41] <Geth> ¦ rakudo: e4f79cb [MoarVM Bump] Brings 21 commits

[10:41] <Geth> ¦ rakudo: cbfe319 remove entry for external commands

[10:41] <Geth> ¦ rakudo: 8192977 document removal of shell and spawn

[10:41] <Geth> ¦ rakudo: b930e35 No need to load ModuleLoader multiple times

[10:41] <Geth> ¦ rakudo:

[10:41] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.01...2018.01-21-gd3ce626

[10:41] <Geth> ¦ rakudo: d3ce626 Add JIT template for atkey_o

[10:41] <Geth> ¦ rakudo: ac9f241 Update release_guide.md w/ info on generating releases.html

[10:41] <Geth> ¦ rakudo: 65273a4 Add script that generates moarvm.org/releases.html

[10:41] <Geth> ¦ rakudo: f1197e4 Edit the ChangeLog to include the original release

[10:41] <Geth> ¦ rakudo: 3992885 Fix MVM_spesh_log_decont not logging anything

[10:41] <Geth> ¦ rakudo: 7e7ee8d Run basic facts discovery on inlined code

[10:41] <Geth> ¦ rakudo: <…commit message has 15 more lines…>

[10:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a5c2398cc7

[10:41] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-10-gb88de49aa...2018.01-14-ge4f79cb

[10:41] <Zoffix> stmuk: considering they stole `say` from Perl 6, I'd say it's their problem :P

[10:41] <yoleaux> 25 Jan 2018 21:23Z <Xliff_> Zoffix: HAH! I almost guessed Russian.

[10:42] <stmuk> maybe it should be renamed "mumble"

[10:44] <Zoffix> -1

[10:45] <Zoffix> Based on what people ask for help with, I wouldn't say it causes a lot of issues.

[10:48] <Zoffix> ZofBot: hold my eBeer and watch this

[10:48] <ZofBot> Zoffix, There are some that are todo'd for os x, IIRC [Coke]: why cant the fudge step happen at runtime? i thought it just inserts todos /skips it's rewriting the source code

[10:48] <Geth> ¦ rakudo: 1ee89b5407 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[10:48] <Geth> ¦ rakudo: Fix block migration in thunk gen; skids++ for the assist

[10:48] <Geth> ¦ rakudo:

[10:48] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1212

[10:48] <Geth> ¦ rakudo: Fixes RT#130575: https://rt.perl.org/Ticket/Display.html?id=130575

[10:49] <Geth> ¦ rakudo: Fixes RT#132337: https://rt.perl.org/Ticket/Display.html?id=132337

[10:49] <Geth> ¦ rakudo: Fixes RT#131548: https://rt.perl.org/Ticket/Display.html?id=131548

[10:49] <Geth> ¦ rakudo: Fixes RT#132211: https://rt.perl.org/Ticket/Display.html?id=132211

[10:49] <Geth> ¦ rakudo: Fixes RT#126569: https://rt.perl.org/Ticket/Display.html?id=126569

[10:49] <synopsebot> RT#130575 [new]: https://rt.perl.org/Ticket/Display.html?id=130575 [BUG] Variables inside a try {} block used with `andthen` don't always get updated to correct values

[10:49] <Geth> ¦ rakudo: Fixes RT#128054: https://rt.perl.org/Ticket/Display.html?id=128054

[10:49] <synopsebot> RT#132337 [new]: https://rt.perl.org/Ticket/Display.html?id=132337 [BUG] Code block inside `andthen`/`orelse` doesn't close over lexical variables correctly

[10:49] <Geth> ¦ rakudo: Fixes RT#126413: https://rt.perl.org/Ticket/Display.html?id=126413

[10:49] <Geth> ¦ rakudo: Fixes RT#126984: https://rt.perl.org/Ticket/Display.html?id=126984

[10:49] <synopsebot> RT#131548 [new]: https://rt.perl.org/Ticket/Display.html?id=131548 [BUG] andthen weirdness with lexicals

[10:49] <Geth> ¦ rakudo: Fixes RT#132172: https://rt.perl.org/Ticket/Display.html?id=132172

[10:49] <synopsebot> RT#132211 [new]: https://rt.perl.org/Ticket/Display.html?id=132211 [BUG] combination of `andthen` and `orelse` causes closed over variable to never update

[10:49] <Geth> ¦ rakudo:

[10:49] <Geth> ¦ rakudo: All of the bugs in the tickets are caused by mis-scoped blocks

[10:49] <synopsebot> RT#126569 [new]: https://rt.perl.org/Ticket/Display.html?id=126569 [BUG] xx-repeated expression enclosed in parens can't access the topic $_ of a statement modifier

[10:49] <Geth> ¦ rakudo: resulting in p6capturelex failing to set outers correctly, and thus

[10:49] <Geth> ¦ rakudo: <…commit message has 39 more lines…>

[10:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1ee89b5407

[10:49] <synopsebot> RT#128054 [open]: https://rt.perl.org/Ticket/Display.html?id=128054 [PARSER] In a string enclosed in parens, a {}-interpolation can't access the topic $_ of a statement modifier

[10:49] <synopsebot> RT#126413 [new]: https://rt.perl.org/Ticket/Display.html?id=126413 [BUG] WhateverCode loses topic inside given modifier

[10:49] <synopsebot> RT#126984 [open]: https://rt.perl.org/Ticket/Display.html?id=126984 [BUG] WhateverCode in given doesn't get refreshed when entering surrounding block in Rakudo

[10:49] <synopsebot> RT#132172 [new]: https://rt.perl.org/Ticket/Display.html?id=132172 [BUG] `orelse` + block in a string gets the wrong $_

[10:49] <Zoffix> M-M-M-MONSTER KILL! 😎

[10:50] <Geth> ¦ roast: 2f2998733a | (Zoffix Znet)++ | MISC/bug-coverage.t

[10:50] <Geth> ¦ roast: Test lexical scoping in thunks

[10:50] <Geth> ¦ roast:

[10:50] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1212

[10:50] <Geth> ¦ roast: RT#130575: https://rt.perl.org/Ticket/Display.html?id=130575

[10:50] <Geth> ¦ roast: RT#132337: https://rt.perl.org/Ticket/Display.html?id=132337

[10:50] <Geth> ¦ roast: RT#131548: https://rt.perl.org/Ticket/Display.html?id=131548

[10:50] <Geth> ¦ roast: RT#132211: https://rt.perl.org/Ticket/Display.html?id=132211

[10:50] <Geth> ¦ roast: RT#126569: https://rt.perl.org/Ticket/Display.html?id=126569

[10:50] <Geth> ¦ roast: RT#128054: https://rt.perl.org/Ticket/Display.html?id=128054

[10:50] <Geth> ¦ roast: RT#126413: https://rt.perl.org/Ticket/Display.html?id=126413

[10:50] <Geth> ¦ roast: RT#126984: https://rt.perl.org/Ticket/Display.html?id=126984

[10:50] <Geth> ¦ roast: RT#132172: https://rt.perl.org/Ticket/Display.html?id=132172

[10:50] <Geth> ¦ roast:

[10:50] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/1ee89b5407

[10:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2f2998733a

[10:51] <jnthn> Zoffix++ :D

[10:51] <Ven``> Zoffix++ skids++

[10:52] <Zoffix> :)

[11:02] <Geth> ¦ roast: e39e5d72ea | (Zoffix Znet)++ | 2 files

[11:02] <Geth> ¦ roast: Unfudge now-passing tests

[11:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e39e5d72ea

[11:02] <dogbert2> ZOFFLOP: t/spec/MISC/bug-coverage.t

[11:02] <dogbert2> Zoffix++

[11:45] * lizmat expects a small gain for test-t after these commits

[11:52] <tbrowder> nqp err msg: “write_fhb requires a native array to write from”

[11:53] <tbrowder> i’m just trying to write to an open file handle...

[11:58] <AlexDaniel> Zoffix++ this is awesome :D

[12:01] <tbrowder> nqp 2017.11, moarvm 2017.11

[12:02] <jnthn> tbrowder: What did you try to write?

[12:03] <tbrowder> sorry, moar version 2018.01

[12:03] <AlexDaniel> nqp 2017.11 and moar 2018.01?

[12:04] <AlexDaniel> is that supposed to work?

[12:04] <jnthn> nqp: nqp::writefh(nqp::getstdout(), "no, can't do a string")

[12:04] <camelia> nqp-moarvm: OUTPUT: «write_fhb requires a native array to read from␤   at <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1537  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.nqp:1774  (/home/camelia/rakudo…»

[12:04] <tbrowder> i tried to write a string to the open file

[12:04] <jnthn> Then the error is accurate, write is for byte buffers

[12:04] <tbrowder> that has changed from prev behavior

[12:05] <jnthn> the nqp::writefh op has never worked with strings

[12:05] <jnthn> Are you working with a handle you got from open, or nqp::open?

[12:06] <jnthn> If the former, then you chould have an object wrapping the handle that has a print method

[12:06] <tbrowder> nqp::open

[12:06] <tbrowder> the docs say writefh takes a str

[12:07] <jnthn> Then they're wrong

[12:07] <jnthn> Consider using open instead

[12:07] <tbrowder> so that’s another builtin?

[12:07] <jnthn> That gives you an NQP::FileHandle object, which has a print method

[12:07] <jnthn> Sort of

[12:07] <jnthn> nqp:: ops are the interface to the VM

[12:08] <jnthn> NQP, for convenience, also has a setting

[12:08] <jnthn> Which has various higher-level built-ins

[12:08] <jnthn> At the nqp:: op level, all I/O is binary

[12:08] <jnthn> That's a fine design for the VM inter-op layer, but not very convenient for writing NQP code

[12:09] <tbrowder> :-D

[12:09] <jnthn> Thus open returns an NQPFileHandle object which has methods like print and say, which do the encode and write for you.

[12:11] <tbrowder> like this: $fh := open($fnam, “w”);  print($fh, $str). ??

[12:19] <jnthn> $fh.print($str)

[12:19] <jnthn> Possibly also :w instead of "w", but I forget

[12:19] <jnthn> lunch, bbiab

[12:26] <tbrowder> this works: $fh := open(“f.txt”, :w); $fh.print(“text\n”);

[12:27] <tbrowder> thnx

[14:18] <Geth> ¦ nqp: d71bd7334c | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/qast.markdown

[14:18] <Geth> ¦ nqp: Fix typo

[14:18] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d71bd7334c

[14:19] <|Tux|> Rakudo version 2018.01-31-g1ee89b540 - MoarVM version 2018.01-21-gd3ce626b4

[14:19] <|Tux|> csv-test-xs-20      0.449 -  0.521

[14:20] <|Tux|> csv-ip5xs           1.026 -  1.034

[14:20] <|Tux|> test-t --race       1.104 -  1.110

[14:20] <|Tux|> test-t              2.608 -  2.687

[14:20] <|Tux|> test               10.556 - 10.608

[14:20] <|Tux|> csv-ip5xs-20       10.821 - 11.063

[14:20] <|Tux|> csv-parser         11.626 - 11.936

[14:20] <|Tux|> test-t-20 --race   16.274 - 18.746

[14:20] <|Tux|> test-t-20          46.828 - 47.088

[14:20] <|Tux|> 2018-01-18 18:56:57 test-t 2.704

[14:20] <|Tux|> 2018-01-19 13:30:08 test-t 2.691

[14:20] <|Tux|> 2018-01-26 15:13:38 test-t 2.687

[14:20] <|Tux|> 2018-01-19 13:33:23 test-t 2.683

[14:20] <|Tux|> 2018-01-26 15:16:48 test-t 2.608

[14:23] <timotimo> way cool.

[14:24] <lizmat> test-t about 4% faster, I'd say

[14:25] <ilmari> buggable: speed :4 test-t

[14:25] <buggable> ilmari, ▅ █  ▄↑    ▇▅      ▄                  ↑▆ █         dates: 2018-01-12–2018-01-26

[14:25] <buggable> ilmari, █▆█  ██▇▅▅▅██ ▃▆▂ ▂█   ▄▆    ▄▄▂    ▃ ██▅█▄    ▃   range: 2.608s–3.397s

[14:25] <buggable> ilmari, ███▇▅████████▅███▅███▄▄██▁▃  ███▇▆▇▂███████▅▆▄▄█   speed: 7% faster (widths: 9/3)

[14:25] <buggable> ilmari, ███████████████████████████▇▇███████████████████▇▁

[14:36] <dogbert2> Zoffix++ for Unreal fixes :-)

[14:36] <lizmat> I think MasterDuke also had a bit in this one :-)

[14:37] <lizmat> afk for a few hours&

[14:37] <dogbert2> was referring to the M-M-M-MONSTER KILL! fix

[14:38] <dogbert2> .oO(one more and it would have been an ULTRA KILL)

[15:44] <Geth> ¦ rakudo: 5bd3366921 | (Stefan Seifert)++ | src/core/CompUnit/RepositoryRegistry.pm

[15:44] <Geth> ¦ rakudo: Speed up repo chain setup by avoiding costly regexes

[15:44] <Geth> ¦ rakudo:

[15:44] <Geth> ¦ rakudo: Seems wasteful to assemble repo spec strings just to parse them again later on.

[15:44] <Geth> ¦ rakudo: Better to create the repository objects directly and assemble the chain

[15:44] <Geth> ¦ rakudo: manually.

[15:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5bd3366921

[15:44] <Geth> ¦ rakudo: 6fa1e78f80 | (Stefan Seifert)++ | src/core/CompUnit/RepositoryRegistry.pm

[15:44] <Geth> ¦ rakudo: Avoid costly regexes if include spec is a plain path

[15:44] <Geth> ¦ rakudo:

[15:44] <Geth> ¦ rakudo: If there's something to parse, the spec contains a '#' which we can look

[15:44] <Geth> ¦ rakudo: for quite cheaply. In the very common case of -Isome/path/to/lib we don't

[15:44] <Geth> ¦ rakudo: have to parse anything.

[15:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6fa1e78f80

[16:49] <Geth> ¦ rakudo: CurtTilmes++ created pull request #1446: Fix function signature

[16:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1446

[16:50] <Geth> ¦ rakudo: 44e7220fca | (Curt Tilmes)++ | t/04-nativecall/01-argless.c

[16:50] <Geth> ¦ rakudo: Fix function signature

[16:50] <Geth> ¦ rakudo:

[16:50] <Geth> ¦ rakudo: Current signature is int*, but it actually returns a char* which gives a

[16:50] <Geth> ¦ rakudo: warning. It still works because Perl declares the nativecall as a Str

[16:50] <Geth> ¦ rakudo: anyway.  This just avoids the warning.

[16:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/44e7220fca

[16:50] <Geth> ¦ rakudo: 38ae3b9c69 | (Zoffix Znet)++ (committed using GitHub Web editor) | t/04-nativecall/01-argless.c

[16:50] <Geth> ¦ rakudo: Merge pull request #1446 from CurtTilmes/master

[16:50] <Geth> ¦ rakudo:

[16:50] <Geth> ¦ rakudo: Fix function signature

[16:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/38ae3b9c69

[20:15] <lizmat> nine: How difficult would it be for repo's to handle :api<perl5> in use statements ?

[21:18] <nine> lizmat: that should already work?

[21:20] <lizmat> m: use Test:api<perl5>

[21:20] <camelia> rakudo-moar 38ae3b9c6: ( no output )

[21:20] <lizmat> hmmm

[21:20] <lizmat> m: class Foo:api<perl5>

[21:20] <camelia> rakudo-moar 38ae3b9c6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use adverb api on a type name (only 'ver' and 'auth' are understood)␤at <tmp>:1␤------> 3class Foo:api<perl5>7⏏5<EOL>␤    expecting any of:␤        generic role␤»

[21:20] <lizmat> m: class Foo:api<perl5> { }

[21:20] <camelia> rakudo-moar 38ae3b9c6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use adverb api on a type name (only 'ver' and 'auth' are understood)␤at <tmp>:1␤------> 3class Foo:api<perl5>7⏏5 { }␤    expecting any of:␤        generic role␤»

[21:20] <lizmat> ok, so it's just matter of getting this parsed ?

[21:22] <nine> lizmat: note that the FileSystem repo ignores :ver, :auth and :api. That may be why it finds Test anyway

[21:23] <nine> lizmat: api is part of a dist's META

[21:24] <lizmat> well, would be nice if you could specify that also in the class / module statement, no?

[21:24] <lizmat> would help mi6

[21:27] <nine> certainly

[21:29] <lizmat> ok, I looked at it earlier today...

[21:30] <lizmat> nine: question: I'm trying to re-export imported subs

[21:30] <lizmat> do we have a recipe for that anywhere that you know of ?

[21:32] <nine> lizmat: https://github.com/LLFourn/p6-CompUnit-Util#re-export

[21:32] <lizmat> cool

[21:36] <lizmat> hmmm... isn't this just a matter of finding the code refs and putting them in a map in EXPORT ?

[21:39] <nine> Could very well be. It's quite unmagical actually

[21:47] <lizmat> guess I'm too tired now to figure this out, but this works:

[21:47] <lizmat> use P5tie;

[21:47] <lizmat> BEGIN %export{'&' ~ .name} := $_ for &tie, &tied, &untie;

[21:47] <lizmat> and then sub EXPORT { %export }

[21:55] <Geth> ¦ rakudo: c268f55c7c | (Stefan Seifert)++ | src/core/CompUnit/RepositoryRegistry.pm

[21:55] <Geth> ¦ rakudo: Micro optimize parse-include-specS

[21:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c268f55c7c

[21:55] <Geth> ¦ rakudo: 5be174bbe4 | (Stefan Seifert)++ | 4 files

[21:55] <Geth> ¦ rakudo: Speed up repository chain setup

[21:55] <Geth> ¦ rakudo:

[21:55] <Geth> ¦ rakudo: Instead of specially encoded repository specification strings, we now parse

[21:55] <Geth> ¦ rakudo: the input into CompUnit::Repository::Spec objects as soon as possible and

[21:55] <Geth> ¦ rakudo: only deal with those. This saves quite some string mangling and parsing

[21:55] <Geth> ¦ rakudo: cutting a couple of milliseconds from repository chain setup overhead.

[21:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5be174bbe4

[21:56] <lizmat> whee!  :-)

[21:56] <nine> My commits today amount to about 10ms savings when running perl6 -Ilib -MTest -e ''

[21:57] <nine> I.e. about a second saved when running a test suite of 100 files ;)

[21:58] <nine> What makes optimizing this part really hard is that it's code that runs only once and that very soon. So none of our spesh and JIT stuff helps and even multi dispatch shows its cost

[21:58] <moritz> nine++

[22:07] <lizmat> https://www.reddit.com/r/perl/comments/7t830k/of_sisters_stacks_and_cpan/

[22:08] <lizmat> before anybody gives it a different title

[23:04] <jnthn> nine: I suspect we could at least do the candidate sort at compile time, even if we can't prime the cache.

[23:06] <japhb> jnthn++  # A very thoughtful, calm, measured response.  This is what being a project leader *should* look like.
