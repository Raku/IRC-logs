[00:27] <MasterDuke> m: for ^5_000 -> int $i { for ^5_000 -> int $j {  } }; say now - INIT now

[00:27] <camelia> rakudo-moar 5981f81b6: OUTPUT: «3.1955034␤»

[00:27] <MasterDuke> m: for ^5_000 { for ^5_000 {  } }; say now - INIT now

[00:28] <camelia> rakudo-moar 5981f81b6: OUTPUT: «1.399760636␤»

[00:28] <MasterDuke> huh, not what i was expecting

[00:31] <MasterDuke> "Inlining eliminated the need to create 0 call frames (that's 0%)." -- native case

[00:31] <MasterDuke> "Inlining eliminated the need to create 24989411 call frames (that's 99.92%)." -- non-native case

[00:33] <MasterDuke> non-native version even spent 645ms doing 237 GCs vs 0 GCs for native version

[07:22] <nine> Zoffix: camelia JVM build fails with: Unhandled exception: VMArray representation does not implement bind_pos_native

[07:23] <nine> in STORE (gen/jvm/CORE.setting:29581)

[07:32] <nine> That's in https://github.com/rakudo/rakudo/blob/master/src/core/native_array.pm6#L835

[07:39] <nine> Zoffix: ooooooh... rakudo-jvm was still on nom on camelia! Building master now

[08:01] <timotimo> oh wow

[08:01] <timotimo> nine: where you at? :)

[08:14] <nine> timotimo: not at GPW :( Too much work to afford GPW and PTS in April

[08:18] <timotimo> i see!

[08:22] <lizmat> :-(

[08:23] <lizmat> nine: don't overwork!   been there, done that, no fun  :-(

[08:32] <|Tux|> drumroll …

[08:36] * timotimo rolls drums around

[08:38] <lizmat> ka-tjing! :-)  ?

[08:40] <|Tux|> Rakudo version 2018.03-155-g5981f81b6 - MoarVM version 2018.03-76-g21d6c5470

[08:40] <|Tux|> csv-test-xs-20      0.471 -  0.482

[08:40] <|Tux|> csv-ip5xs           0.902 -  0.906

[08:40] <|Tux|> test-t --race       1.005 -  1.010

[08:40] <|Tux|> test-t              2.382 -  2.396

[08:40] <|Tux|> test                8.335 -  9.080

[08:40] <|Tux|> csv-ip5xs-20        8.933 -  9.246

[08:40] <|Tux|> test-t-20 --race   15.351 - 15.500

[08:40] <|Tux|> csv-parser         36.379 - 36.903

[08:40] <|Tux|> test-t-20          42.715 - 42.866

[08:40] <|Tux|> 2018-04-02 12:13:31 test-t 2.400

[08:40] <|Tux|> 2018-04-04 10:31:33 test-t 2.396

[08:40] <|Tux|> 2018-04-04 10:36:12 test-t 2.382

[08:40] <|Tux|> 2018-03-29 14:32:06 test-t 2.379

[08:40] <|Tux|> 2018-03-29 14:36:32 test-t 2.372

[08:41] <|Tux|> second time two following tests under 2.4

[08:42] <lizmat> whee  :-)

[08:42] <timotimo> fantastic

[09:45] <jnthn> .tell MasterDuke Because when the static optimizer understands all args are native it does the inline of the native operator then. So there's no inlining for spesh to do

[09:45] <yoleaux> 3 Apr 2018 21:30Z <pmurias> jnthn: a big problem with the current parameter interning is that paramaterized types are registered when they are deserialized, and objects are deserialized lazily

[09:45] <yoleaux> jnthn: I'll pass your message to MasterDuke.

[09:45] <yoleaux> 01:46Z <MasterDuke> jnthn: how come the inline log for 'my $s = 0; for ^3_000 -> $i { for ^3_000 -> $j { $s = $i - $j } }; say $s;' say `Can inline infix:<-> (3193) into  (1)`, but not for 'my int $s = 0; for ^3_000 -> int $i { for ^3_000 -> int $j { $s = $i - $j } }; say $s;'?

[10:58] <pmurias> jnthn: do you have ideas for how the parameter interning should be fixed? I'm thinking maybe moving out the paramaterized registering to a separate section makes sense

[12:04] <jnthn> pmurias: Maybe by not lazily deserializing them.

[12:04] <Geth> ¦ rakudo: 7c51061134 | (Jonathan Worthington)++ | src/core/Rat.pm6

[12:04] <Geth> ¦ rakudo: Avoid two Scalar allocations in various Rat ops

[12:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7c51061134

[12:04] <Geth> ¦ rakudo: 82b19b1f53 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[12:04] <Geth> ¦ rakudo: Use target coercion type in scalar wrap decision

[12:04] <Geth> ¦ rakudo:

[12:04] <Geth> ¦ rakudo: When we compiler a signature with some `T $x`, if T is a type that is

[12:04] <Geth> ¦ rakudo: not `Iterable` then we don't need to wrap it in a `Scalar`. This saves

[12:04] <Geth> ¦ rakudo: quite some allocations. However, we used the nominal type always to

[12:04] <Geth> ¦ rakudo: decide whether to wrap. That's both creating containers when we don't

[12:04] <Geth> ¦ rakudo: need to (for example, `Bool()` doesn't need one but would get one),

[12:04] <Geth> ¦ rakudo: but also potentially a bug if one coerces to an iterable type from a

[12:04] <Geth> ¦ rakudo: non-iterable one (probably odd enough that we didn't hit this issue).

[12:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/82b19b1f53

[12:04] <Geth> ¦ rakudo: 74b755992d | (Jonathan Worthington)++ | src/core/hash_slice.pm6

[12:05] <Geth> ¦ rakudo: Use Bool() on postcircumfix:<{ }> adverbs params

[12:05] <Geth> ¦ rakudo:

[12:05] <Geth> ¦ rakudo: This saves a `Scalar` allocation per time we do `%foo<bar>:exists`

[12:05] <Geth> ¦ rakudo: and similar. In programs doing a lot of such operations, those can

[12:05] <Geth> ¦ rakudo: add up.

[12:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/74b755992d

[13:15] <lizmat> trivia question: how many Match objects does this code create: my $s = "a" x 100000; my @a = $s.match(/a/,:g)

[13:19] <lizmat> answer: it creates 2 Match objects for each match  :-

[13:19] <lizmat> (

[13:24] <nine> but but but...why?

[13:25] <lizmat> I have no idea...

[13:25] <lizmat> seems to me we have an optimization opportunity  :-)

[13:25] <timotimo> i'll make a more precise measurement, gimme a sec.

[13:27] <timotimo> the count is accurate

[13:27] <lizmat> other thing, inspired by corion's talk:

[13:27] <lizmat> would this make sense?   Channel.new.hyper

[13:28] <lizmat> aka, using a Channel as a data source for batching, so that the code inside the hyper can send on the Channel

[13:28] <lizmat> think recursive link extraction and URL-fetching

[13:29] <timotimo> yeah, once in !cursor_init and once in !cursor_start_cur

[13:30] <timotimo> wrong

[13:30] <timotimo> CURSOR_MORE seems to call cursor_start, though

[13:33] <timotimo> via the user's code, though

[13:33] <timotimo> so it's something our regex compiler emits?

[14:09] <|Tux|> Travis fails with a zef message (last lines on long log https://api.travis-ci.org/v3/job/359818489/log.txt )

[14:09] <|Tux|> anything I can do about that?

[14:12] <timotimo> looks like perl6 crashed?

[14:20] <Geth> ¦ nqp: 44d03f812e | pmurias++ | src/vm/js/Operations.nqp

[14:20] <Geth> ¦ nqp: [js] Make nqp::getattr in void use autovivify the attribute

[14:20] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/44d03f812e

[14:20] <Geth> ¦ nqp: f1d11804bd | pmurias++ | t/nqp/058-attrs.t

[14:20] <Geth> ¦ nqp: Test that nqp::getattr in void use autovivifies

[14:20] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f1d11804bd

[14:47] <dogbert17> [Tux] it's the file t/90_csv.t which manages to make Perl6 SEGV

[14:48] <|Tux|> reproducable.

[14:50] <|Tux|> damn, only once. I had coredumpsize limit 0. When I raised it, it didn't core anymore :(

[14:53] <dogbert17> I can probably reproduce it. As luck has it, there are plenty of core devs somewhere in Germany, drinking beer, and wating for something like this to fix :)

[14:56] <dogbert17> |Tux|, timotimo: https://gist.github.com/dogbert17/82210e043431ccd739394614cb8a3fd6

[14:57] <dogbert17> seems to be test #164

[14:57] <|Tux|> dogbert17++

[14:57] <|Tux|> but why not always?

[14:59] <timotimo> oh, a low-level null pointer somehow makes it in there

[15:01] <dogbert17> perhaps spesh is involved

[15:01] * dogbert17 checks

[15:03] <dogbert17> timotimo: I suspect that it's something to do with inlining

[15:05] <dogbert17> |Tux| try running the test file like this: MVM_SPESH_NODELAY=1 perl6 t/90_csv.t

[15:06] <|Tux|> segfault in 171

[15:06] <dogbert17> yeah, my comment about test #164 was totally bogus

[15:07] <|Tux|> but still, not always. Most tests still pass

[15:08] <dogbert17> yeah, I'm pretty sure that the gang in Germany will figure this out

[15:09] <dogbert17> |Tux|: very good that you noticed this

[15:09] <|Tux|> \o/

[15:09] <dogbert17> releasable: next

[15:09] <releasable6> dogbert17, Next release in ≈17 days and ≈3 hours. 4 blockers. 0 out of 158 commits logged (⚠ 9 warnings)

[15:09] <releasable6> dogbert17, Details: https://gist.github.com/5787bfa2825586e286da0b4e9336a0b9

[15:44] <dogbert17> timotimo, |Tux|: reported as https://github.com/MoarVM/MoarVM/issues/835

[15:44] <AlexDaniel> releasable6: uptime

[15:44] <releasable6> AlexDaniel, 20 hours, 42 minutes, and 30 seconds, 1511.957031MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[15:45] <AlexDaniel> dogbert17: :'(

[15:45] <AlexDaniel> no way, not again…

[15:45] <dogbert17> AlexDaniel: what's up with the memory usage?

[15:45] <AlexDaniel> I did touch releasable6 recently, so could be my mistake somewhere…

[15:45] <AlexDaniel> but yesterday some other bot was leaking also

[15:46] <dogbert17> but not all of them?

[15:46] <AlexDaniel> shareable6: uptime

[15:46] <shareable6> AlexDaniel, 20 hours, 44 minutes, and 29 seconds, 511.511719MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[15:46] <dogbert17> bisect: uptime

[15:46] <bisectable6> dogbert17, 4 hours, 42 minutes, and 2 seconds, 298.699219MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[15:46] <AlexDaniel> that's still higher than normal I think?

[15:46] <dogbert17> looks higher

[15:47] <AlexDaniel> it's a recent-ish regression I think

[15:47] <AlexDaniel> but no idea how to bisect

[15:47] <dogbert17> but that's your area of expertise :)

[15:49] <AlexDaniel> not when bisectable itself is the problem xD

[15:51] <dogbert17> do you remember which version of Rakudo you had before updating to the SEGV free one you're running now?

[15:59] <AlexDaniel> dogbert17: no idea whatsoever.

[15:59] <AlexDaniel> filed it here (so that I won't forget): https://github.com/rakudo/rakudo/issues/1686

[16:00] <AlexDaniel> dogbert17: well, I think bots were running fine on 2018.03

[16:00] <AlexDaniel> so that's a good old=

[16:01] <AlexDaniel> R#1280 was closed 7 days ago, but I don't know if it was using rakudo HEAD at that moment

[16:01] <synopsebot> R#1280 [closed]: https://github.com/rakudo/rakudo/issues/1280 [regression] Memory “leak” in whateverable

[16:01] <AlexDaniel> 20495f097 is actually 5 days old

[16:03] <AlexDaniel> anyway, I think I'll just have to experiment with it

[16:03] <AlexDaniel> probably there's a way to trigger it by asking the bots to do something

[16:11] <AlexDaniel> undersightable6: status

[16:11] <undersightable6> AlexDaniel, OK! Working on it…

[16:13] <undersightable6> AlexDaniel, 0 errors, 13 warnings: https://gist.github.com/859a12492bac861bbef1418192cad37d

[16:13] <AlexDaniel> weird…

[16:13] <AlexDaniel> yoleaux: ping

[16:13] <yoleaux> AlexDaniel: pong! (0 queued, 0 running)

[16:13] <AlexDaniel> buggable and ZofBot are down

[16:14] <AlexDaniel> others are up and undersightable6 is just acting stupid

[16:14] <AlexDaniel> thanks

[16:16] <AlexDaniel> dogbert17: fwiw you can (and maybe even should) submit tickets like M#835 directly (well… indirectly) against rakudo

[16:16] <synopsebot> M#835 [open]: https://github.com/MoarVM/MoarVM/issues/835 SEGV when running t/90_csv.t in 

[16:18] <AlexDaniel> well, at least for me it's more convenient I guess, because blockers and other stuff only works there

[16:18] <AlexDaniel> and we have a stricter “don't close without tests” policy there

[16:19] <AlexDaniel> dogbert17++ for creating a ticket btw

[16:20] <AlexDaniel> dogbert17: by the way, what did you do to reproduce it?

[16:20] <AlexDaniel> how consistent is it?

[16:37] <dogbert17> AlexDaniel: for me it was very consistent if I ran it with MVM_SPESH_NODELAY=1

[16:38] <dogbert17> perhaps you can bisect it

[16:39] <dogbert17> also, should I close the bug and move it to Rakudo instead?

[16:51] <Zoffix> TFW: you find a solution to a bug, but it turns out you did it in a dream :()

[16:52] <Zoffix> Or rather, I did solve it in a dream but apparently MSVC doesn't provide long double :P

[17:17] <Zoffix> actually long double don't solve it, so yey :)

[19:38] <Zoffix> m: say 2.56/.2

[19:38] <camelia> rakudo-moar 74b755992: OUTPUT: «12.8␤»

[19:38] <Zoffix> dam :(

[19:38] <Zoffix> So it appears I managed to fix R#1651 but it costs 12.8x perf drop in nqp::div_In :(

[19:38] <synopsebot> R#1651 [open]: https://github.com/rakudo/rakudo/issues/1651 [math] Drift in Str -> Num -> Str conversion

[19:41] <Zoffix> I think I'm gonna commit, 'cause righter > faster. And then gonna give it another crack after CaR grant (if it's approved), since by then I imagine $Zoffix.numeric-knowledge will be a lot greater.

[19:49] <Zoffix> looks like the fix broke denormals -_-

[20:24] <tony-o> [Tux]: is Text::CSV broken ?

[20:54] <samcv> this was odd Unhandled exception: Probable version skew in pre-compiled 'gen/moar/CORE.setting' (cause: no object at index 140115913614632)

[20:55] <samcv> on starting a program. but then i restarted it and it didn't show up again..

[20:55] <samcv> seems i can trigger it again

[20:56] <samcv> gonna try a make clean and rebuild moar

[20:56] <samcv> oh may be rakudo then

[21:03] <samcv> nope. recompiling didn't fix it

[21:03] <samcv> recompiled moar, nqp and rakudo

[21:04] <MasterDuke> try removing a .precomp dirctory somewhere?

[21:04] <yoleaux> 09:45Z <jnthn> MasterDuke: Because when the static optimizer understands all args are native it does the inline of the native operator then. So there's no inlining for spesh to do

[21:06] <samcv> there's no precomp in the folder i'm running the script from. though i could try a clean make of rakudo. not sure how much that does

[21:07] <samcv> oh this isn't good

[21:07] <samcv> num_objects is a MVMint32 but we cast it to a 64 bit int

[21:07] <samcv> could be totally unrelated though..

[21:07] <timotimo> m: say 140115913614632.msb

[21:07] <camelia> rakudo-moar 74b755992: OUTPUT: «46␤»

[21:08] <timotimo> wouldn't upcasting clear out the higher bits?

[21:08] <timotimo> perhaps there's a problem with the format string of that error message on top of that

[21:08] <samcv> well we cast from int32 to int64

[21:08] <samcv> in MVM_sc_get_object where it throws. but that may not be the issue

[21:08] <samcv> or maybe it happens in another place idk

[21:11] <Zoffix> int32 to int64 isn't a problematic cast tho.

[21:11] <samcv> yeah. which is why it's probably not the cause

[21:12] <samcv> this is the file that the i see the issue on https://cry.nu/files/process.tar

[21:12] <samcv> i can't replicate with other scripts

[21:12] <samcv> if someone can tell me if running it ~10 times causes that error

[21:12] <timotimo> valgrind or asan are quiet?

[21:13] <samcv> valgrind at least is clean

[21:13] <samcv> i will check asan though

[21:14] <Zoffix> samcv: Stuck it in loop; works fine. On 2018.03-155-g5981f81b6 built on MoarVM version 2018.03-79-g95014f524

[21:19] <samcv> it doesn't get an exception if i compile it with ASAN

[21:21] <Zoffix> ZOFVM: Files=1292, Tests=153265, 144 wallclock secs (19.73 usr  3.04 sys + 3081.28 cusr 154.08 csys = 3258.13 CPU)

[21:22] <Zoffix> Either stresstest is totally awful as a perf eyeballing tool or my 12x slower div_In doesn't have much impact

[21:22] <MasterDuke> Unhandled exception: Probable version skew in pre-compiled 'gen/moar/CORE.setting' (cause: no object at index 140022413980824)

[21:22] <MasterDuke> This is Rakudo version 2018.03-155-g5981f81b6 built on MoarVM version 2018.03-79-g95014f524

[21:23] <samcv> https://gist.github.com/776e6e9813a34039044474dc0f906afb here is a backtrace.

[21:23] <samcv> Zoffix: what platform are you on?

[21:25] <Zoffix> $ uname -a

[21:25] <Zoffix> Linux VirtualBox 4.2.0-30-generic #36~14.04.1-Ubuntu SMP Fri Feb 26 18:49:23 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

[21:25] <MasterDuke> samcv: what about an MVM_dump_backtrace?

[21:25] <samcv> do you want me to replace the throw with a backtrace instead?

[21:30] <samcv> ok this may be it. it starts as a MVMuint64 then it gets cast to an MVMint64. or could be unrelated. i'll at least test it

[21:31] <samcv> just tracing down the line of where that value comes from

[21:31] <MasterDuke> samcv: i meant `call MVM_dump_backtrace(tc)` where you also called `bt`

[21:36] <samcv> MasterDuke: call it inside gdb/lldb?

[21:36] <MasterDuke> yeah

[21:41] <samcv> MasterDuke: it doesn't print anything...

[21:41] <samcv> also prints nothing if i put the function above the exception throwing and recompile. and i know it runs since i put a printf in it

[21:42] <samcv> cur_frame is NULL

[21:43] <MasterDuke> put what function?

[21:43] <samcv> MVM_dump_backtrace

[21:44] <MasterDuke> oh, you don't need to put it in the source

[21:45] <MasterDuke> just call it while stopped in gdb

[21:45] <samcv> well i tried it in lldb and it printed out nothing so i put it in the code to make sure. the issue is cur_frame is NULL

[21:45] <samcv> so it doesn't print anything out

[21:49] <MasterDuke> huh

[21:49] <samcv> yep

[21:50] <MasterDuke> is nine around? this seems like something he might know about

[22:19] <Zoffix> 144 seconds was without my patch turns out

[22:19] <Zoffix> ZOFVM: Files=1292, Tests=153265, 149 wallclock secs (20.72 usr  3.14 sys + 3222.14 cusr 158.04 csys = 3404.04 CPU)

[22:19] <Zoffix> m: say 149/144

[22:19] <camelia> rakudo-moar 74b755992: OUTPUT: «1.034722␤»

[22:23] <Zoffix> ZOFVM: Files=1292, Tests=153265, 146 wallclock secs (20.50 usr  3.16 sys + 3114.82 cusr 157.74 csys = 3296.22 CPU)

[22:40] <Geth> ¦ nqp: a452de9a68 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[22:40] <Geth> ¦ nqp: [MoarVM Bump] Brings 11 commits

[22:40] <Geth> ¦ nqp:

[22:40] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.03-75-g156a7a6...2018.03-86-gb735866

[22:40] <Geth> ¦ nqp: b735866 Fix drift in Num->Str roundtrip; Make nqp::div_In 14x slower

[22:40] <Geth> ¦ nqp: 02dd490 Fix scanning loop in string cmp ASAN errors

[22:40] <Geth> ¦ nqp: 9730ff9 jit continuationinvoke

[22:41] <Geth> ¦ nqp: 19004b0 fix wrong pointer type

[22:41] <Geth> ¦ nqp: <…commit message has 7 more lines…>

[22:41] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a452de9a68

[22:41] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.03-75-g156a7a6...2018.03-86-gb735866

[22:41] <Geth> ¦ rakudo: a760ac3cfc | (Zoffix Znet)++ | tools/build/NQP_REVISION

[22:41] <Geth> ¦ rakudo: [NQP Bump] Brings 3 commits

[22:41] <Geth> ¦ rakudo:

[22:41] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.03-49-g0edf50d...2018.03-52-ga452de9

[22:41] <Geth> ¦ rakudo: a452de9 [MoarVM Bump] Brings 11 commits

[22:41] <Geth> ¦ rakudo: f1d1180 Test that nqp::getattr in void use autovivifies

[22:41] <Geth> ¦ rakudo: 44d03f8 [js] Make nqp::getattr in void use autovivify the attribute

[22:41] <Geth> ¦ rakudo:

[22:41] <Geth> ¦ rakudo: <…commit message has 12 more lines…>

[22:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a760ac3cfc

[22:41] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.03-49-g0edf50d...2018.03-52-ga452de9

[22:42] <Geth> ¦ roast: a03e959cfa | (Zoffix Znet)++ | S32-num/stress.t

[22:42] <Geth> ¦ roast: Test Num.Str roundtrippage is stable

[22:42] <Geth> ¦ roast:

[22:42] <Geth> ¦ roast: Covers R#1651 https://github.com/rakudo/rakudo/issues/1651

[22:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a03e959cfa

[22:42] <synopsebot> R#1651 [open]: https://github.com/rakudo/rakudo/issues/1651 [math] Drift in Str -> Num -> Str conversion

[22:43] <Geth> ¦ rakudo: fbab08163e | (Zoffix Znet)++ | t/spectest.data

[22:43] <Geth> ¦ rakudo: Add S32-num/stress.t stresstest

[22:43] <Geth> ¦ rakudo:

[22:43] <Geth> ¦ rakudo: Closes https://github.com/rakudo/rakudo/issues/1651 R#1651

[22:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fbab08163e

[22:44] <Geth> ¦ roast: cd57ba0491 | (Zoffix Znet)++ | S02-names-vars/perl.t

[22:44] <Geth> ¦ roast: Revert "Temp-fudge Num roundtrip test for Moar"

[22:44] <Geth> ¦ roast:

[22:44] <Geth> ¦ roast: This reverts commit dba0ce16565f8003ca82e96c915998c08bb0e0f8.

[22:44] <Geth> ¦ roast:

[22:44] <Geth> ¦ roast: The bug requiring this fudge has been fixed[^2];

[22:44] <Geth> ¦ roast:

[22:44] <Geth> ¦ roast: [1] https://github.com/rakudo/rakudo/issues/1651

[22:44] <Geth> ¦ roast: [2] https://github.com/MoarVM/MoarVM/commit/b735866ddee9bd719440e5c822045430b335f27b

[22:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cd57ba0491

[22:46] <Geth> ¦ roast: 71f8f4ef9f | (Zoffix Znet)++ | S32-exceptions/misc.t

[22:46] <Geth> ¦ roast: Revert "Loosen Num-in-sink warning text message match test"

[22:46] <Geth> ¦ roast:

[22:46] <Geth> ¦ roast: This reverts commit 45468627033ef62abc4999268a6a6204fe0cf3f1.

[22:46] <Geth> ¦ roast:

[22:46] <Geth> ¦ roast: The bug[^1] requiring this tweak has been fixed[^2];

[22:46] <Geth> ¦ roast:

[22:46] <Geth> ¦ roast: [1] https://github.com/rakudo/rakudo/issues/1651

[22:46] <Geth> ¦ roast: [2] https://github.com/MoarVM/MoarVM/commit/b735866ddee9bd719440e5c822045430b335f27b

[22:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/71f8f4ef9f

[22:47] <Zoffix> k; I think that covers all the Num-related stuff I wanted to do/fix before release.

[22:49] <timotimo> Zoffix: i wonder if you can make those shifts faster by doing direct bitwise operations on the underlying floating point numbers?

[22:50] <timotimo> because 2^-1024 and 2^1024 ought to be just addition/subtraction to the exponent, right?

[22:50] <timotimo> not even needing a normalization step of some kind?

[22:51] <Zoffix> No idea

[22:52] <Zoffix> $ ccc 'printf("%.17g", 2e0 << 100)'

[22:52] <Zoffix> program.c: In function ‘main’:

[22:52] <Zoffix> program.c:9:21: error: invalid operands to binary << (have ‘double’ and ‘int’)

[22:52] <timotimo> oh, i meant that differently

[22:53] <timotimo> like, & it with 0b0111111111110000000000000000000000000000000000000000000000000000000

[22:54] <timotimo> m: say "0111111111110000000000000000000000000000000000000000000000000000000".chars

[22:54] <camelia> rakudo-moar fbab08163: OUTPUT: «67␤»

[22:54] <timotimo> oops

[22:54] <Zoffix> I don't know if doubles are represented in the same format on all systems, with the exponent in that portion

[22:55] <Zoffix> Are they?

[22:55] <timotimo> that's standardised and i'm willing to bet every platform we're on uses that standard

[22:56] <timotimo> how often does the shift happen?

[22:56] <timotimo> m: say 0b11111111111

[22:56] <camelia> rakudo-moar fbab08163: OUTPUT: «2047␤»

[22:56] <Zoffix> once for most cases

[22:56] <timotimo> hm, i don't think it can actually do the shift more than once though?

[22:57] <timotimo> or does that cause the fraction to become smaller instead?

[22:57] <Zoffix> I mean zero for most cases

[22:57] <timotimo> m: use NativeCall; my $num = 0.00000001e-1022; say nativecast($num, int64).base(16)

[22:57] <camelia> rakudo-moar fbab08163: OUTPUT: «Native call expected return type with CPointer, CStruct, CArray, or VMArray representation, but got a P6int (int64)␤  in sub nativecast at /home/camelia/rakudo-m-inst-1/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 6…»

[22:58] <timotimo> m: use NativeCall; my CArray[num] $num .= new(0.00000001e-1022); say nativecast($num, CArray[int64])[0].base(16)

[22:58] <camelia> rakudo-moar fbab08163: OUTPUT: «0␤»

[22:58] <timotimo> m: use NativeCall; my CArray[num] $num .= new(0.0001e-1022); say nativecast($num, CArray[int64])[0].base(16)

[22:58] <camelia> rakudo-moar fbab08163: OUTPUT: «0␤»

[22:58] <timotimo> m: use NativeCall; my CArray[num] $num .= new(1e-1022); say nativecast($num, CArray[int64])[0].base(16)

[22:58] <camelia> rakudo-moar fbab08163: OUTPUT: «0␤»

[22:58] <timotimo> is this the wrong way around perhaps? %)

[22:59] <Zoffix> What are you trying to do?

[22:59] <timotimo> it is

[22:59] <timotimo> m: use NativeCall; my CArray[num] $num .= new(0.00000001e-1022); say nativecast(CArray[int64], $num)[0].base(16)

[22:59] <camelia> rakudo-moar fbab08163: OUTPUT: «0␤»

[22:59] <timotimo> look at the floating point number with its bits as hexadecimal

[22:59] <timotimo> m: use NativeCall; my CArray[num] $num .= new(1e-1022); say nativecast(CArray[int64], $num)[0].base(16)

[22:59] <camelia> rakudo-moar fbab08163: OUTPUT: «0␤»

[22:59] <timotimo> m: use NativeCall; my CArray[num] $num .= new; $num[0] = 1e-1022; say nativecast(CArray[int64], $num)[0].base(16)

[22:59] <camelia> rakudo-moar fbab08163: OUTPUT: «0␤»

[23:00] <Zoffix> m: use NativeCall; my CArray[num] $num .= new; $num[0] = 1e-1020; say nativecast(CArray[int64], $num)[0].base(16)

[23:00] <camelia> rakudo-moar fbab08163: OUTPUT: «0␤»

[23:00] <Zoffix> m: use NativeCall; my CArray[num] $num .= new; $num[0] = 1e-102; say nativecast(CArray[int64], $num)[0].base(16)

[23:00] <camelia> rakudo-moar fbab08163: OUTPUT: «2AC1EAFF4A98553D␤»

[23:01] <timotimo> i was literally getting zero? %)

[23:01] <Zoffix> Don't know why tho.

[23:01] <Zoffix> Oh doh

[23:01] <Zoffix> Yeah

[23:01] <timotimo> because base 2 vs base 10

[23:01] <Zoffix> I was looking at it as 2**-1020

[23:01] <Zoffix> m: use NativeCall; my CArray[num] $num .= new; $num[0] = 5e-324; say nativecast(CArray[int64], $num)[0].base(16)

[23:01] <camelia> rakudo-moar fbab08163: OUTPUT: «1␤»

[23:02] <Zoffix> That's the lowest number

[23:02] <timotimo> now that we have firmly established that my brain is in no shape for thinking, i'll continue preparing my lightning talk!

[23:02] <Zoffix> m: use NativeCall; my CArray[num] $num .= new; $num[0] = 1.7e-308; say nativecast(CArray[int64], $num)[0].base(16)

[23:02] <camelia> rakudo-moar fbab08163: OUTPUT: «C396C98F8D898␤»

[23:02] <Zoffix> that's close to highest number

[23:03] <Zoffix> m: use NativeCall; my CArray[num] $num .= new; $num[0] = 1.7976931348623157e+308; say nativecast(CArray[int64], $num)[0].base(16)

[23:03] <camelia> rakudo-moar fbab08163: OUTPUT: «7FEFFFFFFFFFFFFF␤»

[23:03] <Zoffix> That's DBL_MAX on my box

[23:04] <Zoffix> m: use NativeCall; my CArray[int64] $num .= new; $num[0] = 0xFFFFFFFFFFFFFFFF; say nativecast(CArray[num], $num)[0]

[23:04] <camelia> rakudo-moar fbab08163: OUTPUT: «Cannot unbox 64 bit wide bigint into native integer␤  in method ASSIGN-POS at /home/camelia/rakudo-m-inst-1/share/perl6/sources/51E302443A2C8FF185ABC10CA1E5520EFEE885A1 (NativeCall::Types) line 109␤  in block <unit> at <tmp> line 1␤␤»

[23:04] <Zoffix> m: use NativeCall; my CArray[int64] $num .= new; $num[0] = 0xFFFFFFFFFFFFFFFF-1; say nativecast(CArray[num], $num)[0]

[23:04] <camelia> rakudo-moar fbab08163: OUTPUT: «Cannot unbox 64 bit wide bigint into native integer␤  in method ASSIGN-POS at /home/camelia/rakudo-m-inst-1/share/perl6/sources/51E302443A2C8FF185ABC10CA1E5520EFEE885A1 (NativeCall::Types) line 109␤  in block <unit> at <tmp> line 1␤␤»

[23:04] <timotimo> put 7 first instead of F that should work

[23:04] <Zoffix> m: use NativeCall; my CArray[int64] $num .= new; $num[0] = 0xFFFFFFFFFFFFFFFF-2; say nativecast(CArray[num], $num)[0]

[23:04] <camelia> rakudo-moar fbab08163: OUTPUT: «Cannot unbox 64 bit wide bigint into native integer␤  in method ASSIGN-POS at /home/camelia/rakudo-m-inst-1/share/perl6/sources/51E302443A2C8FF185ABC10CA1E5520EFEE885A1 (NativeCall::Types) line 109␤  in block <unit> at <tmp> line 1␤␤»

[23:04] <Zoffix> Ah

[23:04] <Zoffix> m: use NativeCall; my CArray[int64] $num .= new; $num[0] = 0x7FFFFFFFFFFFFFFF; say nativecast(CArray[num], $num)[0]

[23:04] <camelia> rakudo-moar fbab08163: OUTPUT: «NaN␤»

[23:04] <timotimo> i think it complains before it even reaches the subtraction perhaps

[23:05] <timotimo> right, the exponent being all 1s is for NaN

[23:05] <Zoffix> m: use NativeCall; my CArray[int64] $num .= new; $num[0] = 0x7FFFFFFFFFFFFFFF; say nativecast(CArray[num], $num)[0] xx 10, " batman"

[23:05] <camelia> rakudo-moar fbab08163: OUTPUT: «(NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN) batman␤»

[23:05] <timotimo> but anyway, if it doesn't call that often anyway, that's probably not the source of slowness

[23:06] <Zoffix> It's probably the division on huge integeres.
