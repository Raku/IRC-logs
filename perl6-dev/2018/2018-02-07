[01:01] <Geth> ¦ rakudo/post-inc-dec-opt: a4f1f243ce | (Zoffix Znet)++ | t/packages/Test/Helpers/QAST.pm6

[01:01] <Geth> ¦ rakudo/post-inc-dec-opt: Implement Test::Helpers::QAST private test helpers

[01:01] <Geth> ¦ rakudo/post-inc-dec-opt:

[01:01] <Geth> ¦ rakudo/post-inc-dec-opt: These let us examine chunks of QAST and test whether or

[01:01] <Geth> ¦ rakudo/post-inc-dec-opt: not a particular optimization has been applied.

[01:01] <Geth> ¦ rakudo/post-inc-dec-opt: review: https://github.com/rakudo/rakudo/commit/a4f1f243ce

[01:46] <Geth> ¦ rakudo/post-inc-dec-opt: 13e6ed8ce1 | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[01:46] <Geth> ¦ rakudo/post-inc-dec-opt: Fix up native type post-dec to pre- optimization

[01:46] <Geth> ¦ rakudo/post-inc-dec-opt: review: https://github.com/rakudo/rakudo/commit/13e6ed8ce1

[01:46] <Geth> ¦ rakudo/post-inc-dec-opt: 888328ef6a | (Zoffix Znet)++ | t/08-performance/02-qast-rewrites.t

[01:46] <Geth> ¦ rakudo/post-inc-dec-opt: Test native postinc/dec is opted to NQP ops

[01:46] <Geth> ¦ rakudo/post-inc-dec-opt: review: https://github.com/rakudo/rakudo/commit/888328ef6a

[02:24] <AlexDaniel> ⚠ new bot! https://irclog.perlgeek.de/perl6/2018-02-07#i_15786705

[03:10] <Geth> ¦ rakudo/post-inc-dec-opt: 971d17c43f | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[03:10] <Geth> ¦ rakudo/post-inc-dec-opt: Add commented out opt for post-to-pre inc/dec conversion

[03:10] <Geth> ¦ rakudo/post-inc-dec-opt:

[03:10] <Geth> ¦ rakudo/post-inc-dec-opt: For some reason prefix is slower than postfix in both void

[03:10] <Geth> ¦ rakudo/post-inc-dec-opt: and non-void context. I opened that as

[03:10] <Geth> ¦ rakudo/post-inc-dec-opt: https://github.com/rakudo/rakudo/issues/1491

[03:10] <Geth> ¦ rakudo/post-inc-dec-opt: review: https://github.com/rakudo/rakudo/commit/971d17c43f

[03:10] <Geth> ¦ rakudo: zoffixznet++ created pull request #1492: Post inc dec opt

[03:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1492

[03:10] <Geth> ¦ rakudo/master: 6 commits pushed by (Zoffix Znet)++

[03:10] <Geth> ¦ rakudo/master: 4a5cc2c200 | Fix/add native type post-inc/dec to pre- optimization

[03:10] <Geth> ¦ rakudo/master: a4f1f243ce | Implement Test::Helpers::QAST private test helpers

[03:10] <Geth> ¦ rakudo/master: 13e6ed8ce1 | Fix up native type post-dec to pre- optimization

[03:10] <Geth> ¦ rakudo/master: 888328ef6a | Test native postinc/dec is opted to NQP ops

[03:10] <Geth> ¦ rakudo/master: 971d17c43f | Add commented out opt for post-to-pre inc/dec conversion

[03:10] <Geth> ¦ rakudo/master: d4712ab9cd | Merge pull request #1492 from rakudo/post-inc-dec-opt

[03:10] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/052a0bbef5...d4712ab9cd

[03:12] <Geth> ¦ roast: zoffixznet++ created pull request #386: Test post-inc/dec op optimization does not affect custom ops

[03:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/386

[03:12] <Geth> ¦ roast: 9bcee77ff7 | (Zoffix Znet)++ | S06-operator-overloading/prefix.t

[03:12] <Geth> ¦ roast: Test post-inc/dec op optimization does not affect custom ops

[03:12] <Geth> ¦ roast:

[03:12] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1477

[03:12] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1315

[03:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9bcee77ff7

[03:12] <Geth> ¦ roast: c2be214cb7 | (Zoffix Znet)++ (committed using GitHub Web editor) | S06-operator-overloading/prefix.t

[03:12] <Geth> ¦ roast: Merge pull request #386 from perl6/post-inc-dec-opt

[03:12] <Geth> ¦ roast:

[03:12] <Geth> ¦ roast: Test post-inc/dec op optimization does not affect custom ops

[03:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c2be214cb7

[03:13] <TimToady> we really need to establish a mechanism for declaring you want to follow the policy of the underlying operator

[03:13] <yoleaux> 6 Feb 2018 18:41Z <Zoffix> TimToady: What's your opinion on allowing multi-arg HyperWhatevers? `(** + **)(1, 2, 3, 4)` to mean `(1, 2, 3, 4).flat.map: * + *`. Basically the double-asterisks are used anywhere an arg is to be placed into, just like with normal Whatevers, and they're mapped N-at-a-time

[03:14] <TimToady> not just assume that it's either the same or different

[03:14] <TimToady> what if the custom ops *want* the optimization?

[03:16] <TimToady> I'd have to think more about the HyperWhatevers, since their original intent was to express multidimensional notions, not just extra args

[03:18] <Zoffix> TimToady: traits are compile time right? How about enable optimization by default and have users opt out of it for custom ops with `is not-optimized` trait?

[03:18] <TimToady> so the question arises whether each ** should express another dimension, or whether it makes sense to allow on one extra dimension (the map list, here)

[03:19] <TimToady> not-optimized is overly specific

[03:19] <TimToady> different operators have different policies, and optimization is only one of the things those policies can affect

[03:20] <TimToady> possibly to override we merely make the user declare their own proto that doesn't carry the policy

[03:21] <TimToady> though that also has the downside if you want the originals multied in with different policies

[03:22] <TimToady> the most common underlying policy currently is "is pure"

[03:22] <TimToady> (I suspect)

[03:25] <Geth> ¦ roast: 2f76cca07b | (Zoffix Znet)++ (committed using GitHub Web editor) | S06-operator-overloading/prefix.t

[03:25] <Geth> ¦ roast: Mark custom op non-optimization for 6.d review

[03:25] <Geth> ¦ roast:

[03:25] <Geth> ¦ roast: It's questionable: https://irclog.perlgeek.de/perl6-dev/2018-02-07#i_15786958

[03:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2f76cca07b

[03:25] <TimToady> m: multi sub infix:<+>($a,$b) is pure { say "$a $b" }; my $a = 1 + 2; BEGIN say "done"

[03:25] <camelia> rakudo-moar 052a0bbef: OUTPUT: «done␤»

[03:25] <TimToady> m: multi sub infix:<+>($a,$b) is pure(0) { say "$a $b" }; my $a = 1 + 2; BEGIN say "done"

[03:25] <camelia> rakudo-moar 052a0bbef: OUTPUT: «done␤»

[03:25] <TimToady> hmm

[03:25] <TimToady> dinner &

[03:27] * Zoffix & bed

[03:29] <Zoffix> P.S.: `is pure` stuff is compiled in the optimizer, so it's later than BEGIN

[03:29] <Zoffix> m: sub infix:<+>($a,$b) is pure { say "$a $b" }; my $a = 1 + 2; BEGIN say "done"; INIT say "meow"

[03:29] <camelia> rakudo-moar 052a0bbef: OUTPUT: «done␤1 2␤meow␤»

[03:29] <Zoffix> m: sub infix:<+>($a,$b) { say "$a $b" }; my $a = 1 + 2; BEGIN say "done"; INIT say "meow"

[03:29] <camelia> rakudo-moar 052a0bbef: OUTPUT: «done␤meow␤1 2␤»

[07:46] <[Tux]> Rakudo version 2018.01-128-gd4712ab9c - MoarVM version 2018.01-77-g9a029b408

[07:46] <[Tux]> csv-test-xs-20      0.470 -  0.484

[07:46] <[Tux]> csv-ip5xs           0.804 -  0.849

[07:46] <[Tux]> test-t --race       1.082 -  1.087

[07:46] <[Tux]> test-t              2.635 -  2.639

[07:46] <[Tux]> csv-ip5xs-20        7.528 -  8.110

[07:46] <[Tux]> test                9.151 -  9.365

[07:46] <[Tux]> csv-parser         11.310 - 11.921

[07:46] <[Tux]> test-t-20 --race   16.258 - 16.707

[07:46] <[Tux]> test-t-20          46.362 - 48.193

[10:45] <Geth> ¦ rakudo: 2847e509d8 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[10:45] <Geth> ¦ rakudo: Fix WhateverCode block migrator

[10:45] <Geth> ¦ rakudo:

[10:45] <Geth> ¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1487

[10:45] <Geth> ¦ rakudo:

[10:45] <Geth> ¦ rakudo: When we migrate the things from a WhateverCode and disable the

[10:45] <Geth> ¦ rakudo: old block, be sure to empty out its declarations. Otherwise,

[10:45] <Geth> ¦ rakudo: we can end up with duplicated QAST::Blocks in two places, which

[10:45] <Geth> ¦ rakudo: was causing the bug.

[10:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2847e509d8

[10:46] <Geth> ¦ roast: 00c4d36a67 | (Zoffix Znet)++ | S02-types/whatever.t

[10:46] <Geth> ¦ roast: Test whatever curry + regex + methodcall

[10:46] <Geth> ¦ roast:

[10:46] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1487

[10:46] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/2847e509d8

[10:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/00c4d36a67

[11:16] <samcv> releasable6: status

[11:16] <releasable6> samcv, Next release in 10 days and ≈7 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[11:16] <releasable6> samcv, Details: https://gist.github.com/91f9f6126f363633d566a4650ab7bbac

[13:55] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1494: Separate adding child block from creating code obj

[13:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1494

[14:06] <Zoffix> Looking at the impl of p6sink op, it checks if the object nqp::can call .sink before calling it: https://github.com/rakudo/rakudo/blob/master/src/vm/moar/Perl6/Ops.nqp#L343

[14:07] <Zoffix> So I ripped out method sink from Mu and Nil and `my $i = 1; for ^1000_000 { $i++; $i++; $i++; $i++; $i++; $i++; Nil }; say now - INIT now` comes out at 8% faster

[14:09] <jnthn> I wonder what we run into if we rip out the can

[14:10] <jnthn> Hm, probably quite a lot :S

[14:10] <Zoffix> First attempt to compile fails with "Method 'sink' not found for invocant of class 'IterationBuffer'"

[14:10] <jnthn> oh heck, 'cus it'll be guarding bootstrap stuff too I guess

[14:13] <Zoffix> and adding method sink to src/core/IterationBuffer.pm didn't help it

[14:24] <Zoffix> hm, `nqp::istype($foo, Mu)` comes out 60% faster than nqp::can($foo, 'sink'), but I guess there's no way to tell `src/vm/moar/Perl6/Ops.nqp` what the `Mu` type is, eh?

[14:25] <Zoffix> prolly won't be a big win anyway, 30M iterations complete in 3s

[14:25] * Zoffix &

[14:29] <Geth> ¦ roast: dogbert17++ created pull request #387: Add tests for RT #126703

[14:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/387

[14:29] <synopsebot> RT#126703 [open]: https://rt.perl.org/Ticket/Display.html?id=126703 Typed Shaped Arrays can't be initialized

[14:30] <Geth> ¦ roast: 08061255e7 | (Jan-Olof Hendig)++ | S09-multidim/assign.t

[14:30] <Geth> ¦ roast: Add tests for RT #126703

[14:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/08061255e7

[14:30] <Geth> ¦ roast: 0f07adc7fb | (Zoffix Znet)++ (committed using GitHub Web editor) | S09-multidim/assign.t

[14:30] <Geth> ¦ roast: Merge pull request #387 from dogbert17/test-rt-126703

[14:30] <Geth> ¦ roast:

[14:30] <Geth> ¦ roast: Add tests for RT #126703

[14:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0f07adc7fb

[14:49] <Geth> ¦ rakudo: 5bde60f5b5 | (Jeremy Studer)++ | 2 files

[14:49] <Geth> ¦ rakudo: Separate adding child block from creating code obj

[14:49] <Geth> ¦ rakudo:

[14:49] <Geth> ¦ rakudo: Previously, the create_simple_code_object method in the Perl6 World

[14:49] <Geth> ¦ rakudo: would add the block passed to it to the desired outer block in addition

[14:50] <Geth> ¦ rakudo: to returning a code object for it. From the name, it is not clear that

[14:50] <Geth> ¦ rakudo: the method has such side-effects. Separating the actions in order to

[14:50] <Geth> ¦ rakudo: make it explicit that we performing both of these.

[14:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5bde60f5b5

[14:50] <Geth> ¦ rakudo: 06f34a0630 | (Jeremy Studer)++ | 2 files

[14:50] <Geth> ¦ rakudo: Change name of code obj method

[14:50] <Geth> ¦ rakudo:

[14:50] <Geth> ¦ rakudo: Change the name of the code object method instead so as not to incur the

[14:50] <Geth> ¦ rakudo: cost of an additional World method lookup.

[14:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/06f34a0630

[14:50] <Geth> ¦ rakudo: 4219f8ccf6 | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[14:50] <Geth> ¦ rakudo: Merge pull request #1494 from jstuder-gh/sep_code_obj_actions

[14:50] <Geth> ¦ rakudo:

[14:50] <Geth> ¦ rakudo: Separate adding child block from creating code obj

[14:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4219f8ccf6

[15:17] <japhb> Zoffix, ISTR there are nqp:: ops whose sole purpose is to pass an HLL type to lower layers -- that might be worth looking at for your sink optimization work.

[15:17] <japhb> *as a mechanism for

[15:18] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1495: Remove extra push of child to outer block

[15:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1495

[15:23] <Geth> ¦ rakudo: ba09db6719 | (Jeremy Studer)++ | src/Perl6/Actions.nqp

[15:23] <Geth> ¦ rakudo: Remove extra push of child to outer block

[15:23] <Geth> ¦ rakudo:

[15:23] <Geth> ¦ rakudo: The action should only occur once and already occurs in the method to

[15:23] <Geth> ¦ rakudo: create code objects. zoffix++ for verification.

[15:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ba09db6719

[15:23] <Geth> ¦ rakudo: eac39b9246 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[15:23] <Geth> ¦ rakudo: Merge pull request #1495 from jstuder-gh/rm_extra_child_push

[15:23] <Geth> ¦ rakudo:

[15:23] <Geth> ¦ rakudo: Remove extra push of child to outer block

[15:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eac39b9246

[15:42] <AlexDaniel> releasable6: next

[15:42] <releasable6> AlexDaniel, Next release in 10 days and ≈3 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[15:42] <releasable6> AlexDaniel, Details: https://gist.github.com/8cee98232d049ae2eb297a95cc379995

[16:51] <jdv79> .seen ugexe

[16:51] <yoleaux> I saw ugexe 23 Nov 2017 15:02Z in #perl6: <ugexe> I’m getting tired of it

[17:13] <AlexDaniel> jdv79: IIRC ugexe is a little bit active on github

[17:30] <pmurias> do we have a ticket for unrecognized unicode properties failing silently?

[17:32] <AlexDaniel> pmurias: I don't remember one, but it's a known issue

[17:32] <AlexDaniel> pmurias: please file a ticket for it

[17:38] <pmurias> AlexDaniel: https://github.com/rakudo/rakudo/issues/1496

[17:54] <AlexDaniel> pmurias: thanks

[18:17] <Zoffix> m: /{say 42}/

[18:17] <camelia> rakudo-moar eac39b924: ( no output )

[18:18] <Zoffix> ^ that block is actually mis-scoped.

[18:19] <Zoffix> Looks like all the regex blocks are miscoped (other than token/rule/regex as methods). And that's the cause of R#1481 too

[18:19] <synopsebot> R#1481 [open]: https://github.com/rakudo/rakudo/issues/1481 `where` with regex miscopes QAST::Blocks inside the regex

[18:20] <Zoffix> But I'm totally failing to write a migration predicate that compiles :S

[18:20] <Zoffix> Stage parse      : Cannot find method 'blocktype' on object of type QAST::Op

[18:20] <Zoffix> at gen/moar/Perl6-Actions.nqp:827  (blib/Perl6/Actions.moarvm:block_immediate)

[18:20] <Zoffix> It crashes with that ^ because something is trying to access a migrated block as if it were in the original place (that QAST::Op is a nqp::null the block was replaced with)

[18:21] <Zoffix> Event tried a $BLOCK.annotate('in_regex', 1) if nqp::defined(%*RX); in method block and migrating only those.

[18:23] <Zoffix> hm, Plan B. Rake the regex QAST for anything with past_block annotation and migrate that instead

[18:52] <Zoffix> looks like that did the trick.

[18:54] <dogbert17> Zoffix: wrt R#1488, is it this you're looking for ? nqp::eqaddr(nqp::decont(a),nqp::decont(b))

[18:54] <synopsebot> R#1488 [open]: https://github.com/rakudo/rakudo/issues/1488 [LHF] multi sub infix:<cmp>(\a, \b) is missing decont

[18:54] <Zoffix> dogbert17: yeah

[18:54] <Zoffix> There's probably more of such cases in the codebase

[18:54] <dogbert17> it passes spectest

[18:56] <dogbert17> how is it supposed to work: trying 'say Nil cmp $ = Nil' only gives a lot of complaints

[18:57] <dogbert17> the last part of the errmsg is 'Cannot modify an immutable Order (Same)'

[18:57] <Zoffix> m: say Nil cmp $ = Nil

[18:57] <camelia> rakudo-moar eac39b924: OUTPUT: «Use of Nil in string context␤  in block <unit> at <tmp> line 1␤Use of uninitialized value $ of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> li…»

[18:57] <Zoffix> m: say Nil cmp ($ = Nil)

[18:57] <camelia> rakudo-moar eac39b924: OUTPUT: «Use of Nil in string context␤Same␤  in block <unit> at <tmp> line 1␤Use of uninitialized value $ of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <…»

[18:57] <Zoffix> the last one ^

[18:58] <Zoffix> In working version there would not be any warnings.

[18:58] <Zoffix> I kinda think there shouldn't be any warnings if you `cmp` Nil cmp $whatever

[18:58] <dogbert17> then my fix is not correct since I get: Use of Nil in string context

[18:58] <dogbert17> in block <unit> at -e line 1

[18:58] <dogbert17> Use of uninitialized value $ of type Any in string context.

[18:58] <dogbert17> Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.

[18:59] <dogbert17> in block <unit> at -e line 1

[18:59] <dogbert17> Cannot modify an immutable Order (Same)

[18:59] <dogbert17> in block <unit> at -e line 1

[18:59] <Zoffix> dogbert17: what code did you try?

[18:59] <Zoffix> dogbert17: to run

[18:59] <dogbert17> what you ran above

[18:59] <dogbert17> ./perl6 -e 'say Nil cmp $ = Nil'

[18:59] <Zoffix> I ran two different things. Your error suggest you tried the first one

[19:00] <Zoffix> ./perl6 -e 'say Nil cmp ($ = Nil)'

[19:00] * Zoffix bbin30

[19:01] <dogbert17> Zoffix: dogbert@dogbert-VirtualBox ~/repos/rakudo $ ./perl6 -e 'say Nil cmp ($ = Nil)'

[19:01] <dogbert17> Use of Nil in string context

[19:01] <dogbert17> in block <unit> at -e line 1

[19:01] <dogbert17> Use of uninitialized value $ of type Any in string context.

[19:01] <dogbert17> Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.

[19:01] <dogbert17> in block <unit> at -e line 1

[19:01] <dogbert17> Same

[20:22] <Zoffix> s: &infix:<cmp>, \(Nil, Nil)

[20:22] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/eac39b924/src/core/Order.pm#L10

[20:23] <Zoffix> m: sub infix:<cmp> (\a, \b) { nqp::eqaddr(a,b) ?? Same !! a.Stringy cmp b.Stringy }; say Nil cmp ($ = Nil)

[20:23] <camelia> rakudo-moar eac39b924: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::eqaddr, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3 infix:<cmp> (\a, \b) { nqp::eqaddr(a,b)7⏏5 ?? Same !! a.Stringy cmp b.Stringy }; s␤»

[20:23] <Zoffix> m: use nqp; sub infix:<cmp> (\a, \b) { nqp::eqaddr(a,b) ?? Same !! a.Stringy cmp b.Stringy }; say Nil cmp ($ = Nil)

[20:23] <camelia> rakudo-moar eac39b924: OUTPUT: «Use of Nil in string context␤Same␤  in sub infix:<cmp> at <tmp> line 1␤Use of uninitialized value $ of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in sub infix:<cmp…»

[20:23] <Zoffix> m: use nqp; sub infix:<cmp> (\a, \b) { nqp::eqaddr(nqp::decont(a),nqp::decont(b)) ?? Same !! a.Stringy cmp b.Stringy }; say Nil cmp ($ = Nil)

[20:23] <camelia> rakudo-moar eac39b924: OUTPUT: «Use of Nil in string context␤Same␤  in sub infix:<cmp> at <tmp> line 1␤Use of uninitialized value $ of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in sub infix:<cmp…»

[20:23] <Zoffix> m: use nqp; sub infix:<cmp> (\a, \b) { nqp::eqaddr(nqp::decont(a),nqp::decont(b)) }; say Nil cmp ($ = Nil)

[20:23] <camelia> rakudo-moar eac39b924: OUTPUT: «0␤»

[20:24] <Zoffix> m: use nqp; sub infix:<cmp> (\a, \b) { nqp::eqaddr(nqp::decont(a),nqp::decont(b)) }; say Nil cmp (Nil)

[20:24] <camelia> rakudo-moar eac39b924: OUTPUT: «1␤»

[20:24] * Zoffix doesn't get it... Ohhh

[20:24] <Zoffix> dogbert17: sorry, it's a bogus sample code

[20:25] <Zoffix> ( ($ = Nil) is an Any not Nil)

[20:25] <Zoffix> m: use nqp; sub infix:<cmp> (\a, \b) { nqp::eqaddr(nqp::decont(a),nqp::decont(b))?? Same !! a.Stringy cmp b.Stringy }; class Foo { method Stringy { die "no opt" } }; my $f := Foo.new; say $f cmp ($ = $f)

[20:25] <camelia> rakudo-moar eac39b924: OUTPUT: «Same␤»

[20:26] <Zoffix> m: use nqp; sub infix:<cmp> (\a, \b) { nqp::eqaddr(nqp::decont(a),b)?? Same !! a.Stringy cmp b.Stringy }; class Foo { method Stringy { die "no opt" } }; my $f := Foo.new; say $f cmp ($ = $f)

[20:26] <camelia> rakudo-moar eac39b924: OUTPUT: «no opt␤  in method Stringy at <tmp> line 1␤  in sub infix:<cmp> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:27] <Zoffix> m: use Test; { my class Foo { method Stringy { die "missed optimization" } }; my $f := Foo.new; is-deeply $f cmp ($ = $f), Same, 'eqaddr optimization for cmp exists' }

[20:27] <camelia> rakudo-moar eac39b924: OUTPUT: «missed optimization␤  in method Stringy at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:27] <Zoffix> dogbert17: ^ that should pass when the fix is applied. And that could go into some new file inside https://github.com/rakudo/rakudo/tree/master/t/08-performance/  (99-misc.t or something)

[20:43] <Zoffix> ZOFVM: Files=1288, Tests=153196, 152 wallclock secs (21.47 usr  3.20 sys + 3244.01 cusr 171.16 csys = 3439.84 CPU)

[20:43] <Zoffix> hey cool... a passing todo \o/

[20:43] <dogbert17> Zoffix: thx, the test does indeed pass. I'll whip up a PR

[20:49] <Geth> ¦ rakudo: c0c7756f4b | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[20:49] <Geth> ¦ rakudo: Fix migration of in-regex blocks

[20:49] <Geth> ¦ rakudo:

[20:49] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1481

[20:49] <Geth> ¦ rakudo: Fixes RT#124998: https://rt.perl.org/Ticket/Display.html?id=124998

[20:49] <Geth> ¦ rakudo:

[20:49] <Geth> ¦ rakudo: Looks like we never bothered to migrate blocks from regex into

[20:49] <Geth> ¦ rakudo: the QAST::Block made for the regex and the things worked simply

[20:49] <synopsebot> RT#124998 [open]: https://rt.perl.org/Ticket/Display.html?id=124998 [BUG] Type of $¢ is Any instead of Cursor

[20:49] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[20:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c0c7756f4b

[20:50] <samcv> who has the power to do a rebuild on appveyor?

[20:50] <Geth> ¦ roast: d05a949255 | (Zoffix Znet)++ | S05-capture/match-object.t

[20:50] <Geth> ¦ roast: Unfudge now-passing tests

[20:50] <Geth> ¦ roast:

[20:50] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/c0c7756f4b

[20:50] <Geth> ¦ roast: RT#124998: https://rt.perl.org/Ticket/Display.html?id=124998

[20:50] <Geth> ¦ roast: RT#124999: https://rt.perl.org/Ticket/Display.html?id=124999

[20:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d05a949255

[20:50] <synopsebot> RT#124999 [open]: https://rt.perl.org/Ticket/Display.html?id=124999 [BUG] Type of $¢ is Any instead of Cursor

[20:51] <dogbert17> Zoffix++

[20:51] <samcv> m: say $¢

[20:51] <camelia> rakudo-moar eac39b924: OUTPUT: «Nil␤»

[20:51] <samcv> what...

[20:51] <Geth> ¦ roast: cec838d4c9 | (Zoffix Znet)++ | S05-metasyntax/regex.t

[20:51] <Geth> ¦ roast: Test where with regex + block

[20:51] <Geth> ¦ roast:

[20:51] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1481

[20:51] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/c0c7756f4b

[20:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cec838d4c9

[20:51] <samcv> why does th't work?

[20:52] <Zoffix> It's special variable. Current Cursor or something

[20:52] <Zoffix> m: grammar { token TOP { { dd $¢ } . } }.parse: "x"

[20:52] <camelia> rakudo-moar eac39b924: OUTPUT: «Match.new(list => (), made => Any, pos => 0, hash => Map.new(()), orig => "x", from => 0)␤»

[20:52] <samcv> it's not on the docs page

[20:53] <samcv> should I open an issue?

[20:54] <samcv> i only find one usage in the docs and it doesn't explain what it means

[20:54] <samcv> it's just the output of some introspection

[20:57] <Geth> ¦ rakudo: dogbert17++ created pull request #1498: Fix R#1488 - multi sub infix:<cmp>(\a, \b) is missing decont. Zoffix++

[20:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1498

[20:57] <synopsebot> R#1488 [open]: https://github.com/rakudo/rakudo/issues/1488 [LHF] multi sub infix:<cmp>(\a, \b) is missing decont

[21:11] <Geth> ¦ rakudo: 114e3735de | (Jan-Olof Hendig)++ | src/core/Order.pm

[21:11] <Geth> ¦ rakudo: Fix R#1488 - multi sub infix:<cmp>(\a, \b) is missing decont. Zoffix++

[21:11] <Geth> ¦ rakudo:

[21:11] <Geth> ¦ rakudo: Phixes: https://github.com/rakudo/rakudo/issues/1488

[21:11] <Geth> ¦ rakudo:

[21:11] <synopsebot> R#1488 [open]: https://github.com/rakudo/rakudo/issues/1488 [LHF] multi sub infix:<cmp>(\a, \b) is missing decont

[21:11] <Geth> ¦ rakudo: There's every chance that the codebase contains more problems like

[21:11] <Geth> ¦ rakudo: this.

[21:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/114e3735de

[21:11] <Geth> ¦ rakudo: eca2bb999e | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Order.pm

[21:11] <Geth> ¦ rakudo: Merge pull request #1498 from dogbert17/fix-r1488

[21:11] <Geth> ¦ rakudo:

[21:11] <Geth> ¦ rakudo: Fix R#1488 - multi sub infix:<cmp>(\a, \b) is missing decont. Zoffix++

[21:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eca2bb999e

[21:46] <AlexDaniel> samcv: always thought that it is not supposed to be used by others, but I could be wrong

[21:47] <AlexDaniel> and if we want others to use it, then… is there an ascii equivalent?

[21:48] <AlexDaniel> I*

[21:50] <AlexDaniel> greppable6: \$¢

[21:50] <greppable6> AlexDaniel, Sorry, can't do that

[21:50] <geekosaur> afaik this only came up because zoffix suggested it as a predefined variable for code golf

[21:51] <AlexDaniel> greppable6: \$\¢

[21:51] <greppable6> AlexDaniel, Sorry, can't do that

[21:51] <AlexDaniel> greppable6: ¢

[21:51] <greppable6> AlexDaniel, 19 lines, 9 modules: https://gist.github.com/504d778ef564a056e7a0eb343843cfa3

[21:52] <AlexDaniel> yea

[22:31] <jnthn> My recollection is that $¢ was user-facing. The ASCII form is $/.CURSOR

[22:37] <Zoffix> No, it came up right now because I closed a now-passing TODO for it. S09 talks about it. The $¢ and $/ start out the same in closures, but more matches are done in the closure, $¢ will remain the same, while $/ will be set to new match object.

[22:37] <Zoffix> $¢ is already ASCII

[22:37] <Zoffix> m: say '$¢'.ords

[22:37] <camelia> rakudo-moar eca2bb999: OUTPUT: «(36 162)␤»

[22:37] <Zoffix> m: say '$¢'.ords».chr

[22:37] <camelia> rakudo-moar eca2bb999: OUTPUT: «($ ¢)␤»

[22:38] <Zoffix> m: grammar { token TOP { { dd $¢ === $/.CURSOR; "x" ~~ /x/; dd $¢ === $/.CURSOR } . } }.parse: "x"

[22:38] <camelia> rakudo-moar eca2bb999: OUTPUT: «Bool::True␤Bool::False␤»

[22:39] <Zoffix> S09:3123

[22:39] <synopsebot> Link: https://design.perl6.org/S09.html#line_3123

[22:39] <Zoffix> those anchors don't work in chrome...

[22:40] <jnthn> No :(

[22:40] <MasterDuke> nor in FF

[22:40] <jnthn> And if I search for $¢ in that file I find nothing

[22:40] <jnthn> Wait, S09?

[22:40] <jnthn> S05:3123

[22:40] <synopsebot> Link: https://design.perl6.org/S05.html#line_3123

[22:40] <Zoffix> Oh, right lol

[22:40] <jnthn> S09 isn't the regex one :P

[22:40] <Zoffix> and now the anchor works :)

[22:41] <MasterDuke> heh, now it works in FF

[22:41] <jnthn> I suspect the exact relationship between $¢ and $/ maybe have evolved a bit in the Cursor/Match unification

[22:42] <jnthn> I can't say I've ever used $¢

[22:50] <Geth> ¦ rakudo: dogbert17++ created pull request #1499: Add test for R#1488

[22:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1499

[22:50] <synopsebot> R#1488 [open]: https://github.com/rakudo/rakudo/issues/1488 [LHF] multi sub infix:<cmp>(\a, \b) is missing decont

[22:51] <Geth> ¦ rakudo: 25c5c488d8 | (Jan-Olof Hendig)++ | t/08-performance/99-misc.t

[22:51] <Geth> ¦ rakudo: Add test for R#1488

[22:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/25c5c488d8

[22:51] <Geth> ¦ rakudo: 1e2e46ff90 | (Zoffix Znet)++ (committed using GitHub Web editor) | t/08-performance/99-misc.t

[22:51] <Geth> ¦ rakudo: Merge pull request #1499 from dogbert17/test-r1488

[22:51] <Geth> ¦ rakudo:

[22:51] <Geth> ¦ rakudo: Add test for R#1488

[22:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1e2e46ff90

[23:04] <Geth> ¦ rakudo/undefinitehow-default-defaults: 11e6d5e2c2 | (Zoffix Znet)++ | src/Perl6/World.nqp

[23:04] <Geth> ¦ rakudo/undefinitehow-default-defaults: Potential 6.d impl of default defaults for DefiniteHOWs

[23:04] <Geth> ¦ rakudo/undefinitehow-default-defaults:

[23:04] <Geth> ¦ rakudo/undefinitehow-default-defaults: Would probably take care of https://github.com/rakudo/rakudo/issues/1493

[23:04] <Geth> ¦ rakudo/undefinitehow-default-defaults: (need to be tested)

[23:04] <Geth> ¦ rakudo/undefinitehow-default-defaults: review: https://github.com/rakudo/rakudo/commit/11e6d5e2c2

[23:06] <Geth> ¦ 6.d-prep: a3a39741a9 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[23:06] <Geth> ¦ 6.d-prep: Add TODO: Make default defaults for DefiniteHOWs be normal types

[23:06] <Geth> ¦ 6.d-prep:

[23:06] <Geth> ¦ 6.d-prep: For https://github.com/rakudo/rakudo/issues/1493

[23:06] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/a3a39741a9

[23:47] <travis-ci> Rakudo build failed. Zoffix Znet 'Merge pull request #1499 from dogbert17/test-r1488

[23:47] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/338747286 https://github.com/rakudo/rakudo/compare/eca2bb999edb...1e2e46ff904b

[23:47] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/04-nativecall/09-nativecast.t test file failed.

[23:56] <Geth> ¦ rakudo: 7fa57657d1 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[23:56] <Geth> ¦ rakudo: Fix fake-infix adverb args with new .= opt

[23:56] <Geth> ¦ rakudo:

[23:56] <Geth> ¦ rakudo: Phixes: https://github.com/rakudo/rakudo/issues/1485

[23:56] <Geth> ¦ rakudo:

[23:56] <Geth> ¦ rakudo: Annotate the `.=` construct so when we get to fake-infix adverbs

[23:56] <Geth> ¦ rakudo: we shove them in the right place.

[23:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7fa57657d1

[23:56] <Geth> ¦ roast: 4d0c09f9a2 | (Zoffix Znet)++ | S03-operators/inplace.t

[23:56] <Geth> ¦ roast: Test .= calls with fake-infix adverbs

[23:56] <Geth> ¦ roast:

[23:56] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1485

[23:56] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/7fa57657d1

[23:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4d0c09f9a2
