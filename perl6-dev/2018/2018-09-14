[00:00] *** ggoebel_ left
[00:01] *** ggoebel left
[00:04] * timotimo turns on the TUI

[00:05] *** lizmat left
[00:05] * timotimo recompiles with --optimize=0

[00:08] <timotimo> do you know about the tui?

[00:08] <timotimo> it's much easier to see where in the code you're stepping after you "tui enable"

[00:09] <timotimo> Because the arrow keys scroll the active window in the TUI mode, they are not available for their normal use by readline unless the command window has the focus. When another window is active, you must use other readline key bindings such as C-p, C-n, C-b and C-f to control the command window.

[00:10] <timotimo> ehhh

[00:10] <MasterDuke> tui for gdb or debugserver?

[00:11] <timotimo> gdb

[00:11] <timotimo> hum. i'll begin preparations for going to bed, actually

[00:11] <timotimo> but i was hoping i could step-a-step-step until i get much closer to the problematic spot

[00:12] <timotimo> actually, perhaps i'll even rr record this

[00:12] <MasterDuke> huh, never knew about that

[00:12] <timotimo> heay, it's hidden behind the incredibly intuitive keybind C-x C-a ;)

[00:12] <MasterDuke> those look emacs-related?

[00:13] <timotimo> yeah

[00:13] <MasterDuke> huh, this could be nice...

[00:14] <MasterDuke> but if you're going to record this in rr, i'm going to kill my gdb/debugserver session

[00:15] <MasterDuke> because the daughter got to this computer and the keyboard very much needs a wash

[00:15] <timotimo> hah

[00:15] <timotimo> having it recorded in rr doesn't allow usage of the debugserver, though

[00:15] <timotimo> but it ought to be easy-ish enough to get it up again

[00:16] *** ggoebel joined
[00:16] <MasterDuke> oh, right. i'll just trying stepping in it to see what happens

[00:16] <timotimo> good luck!

[00:16] *** ggoebel_ joined
[00:16] <MasterDuke> thanks, and for all the help

[00:16] *** p6bannerbot sets mode: +v ggoebel

[00:17] <timotimo> YW, and thanks for working on this :)

[00:17] *** p6bannerbot sets mode: +v ggoebel_

[00:38] *** Kaiepi left
[00:38] *** PufferBot left
[00:41] *** PufferBot joined
[00:41] *** MasterDuke left
[00:41] *** p6bannerbot sets mode: +v PufferBot

[00:42] *** Kaiepi joined
[00:42] *** p6bannerbot sets mode: +v Kaiepi

[00:50] <tbrowder__> timotimo: thnx for the help, build looking good so far...

[00:53] *** ZzZombo_ left
[00:53] *** ZzZombo_ joined
[00:53] *** hitchcock.freenode.net sets mode: +v ZzZombo_

[00:53] *** p6bannerbot sets mode: +v ZzZombo_

[00:53] *** ZzZombo_ is now known as ZzZombo

[01:14] *** MasterDuke joined
[01:14] *** p6bannerbot sets mode: +v MasterDuke

[01:14] *** MasterDuke left
[01:14] *** MasterDuke joined
[01:14] *** herbert.freenode.net sets mode: +v MasterDuke

[01:14] *** p6bannerbot sets mode: +v MasterDuke

[01:18] *** ZzZombo left
[01:36] <tbrowder__> well, master build fails, what now?

[01:38] <tbrowder__> goind to bed now, i  hope someone can leave me a hint for tomorrow. i have a PR ready if i can get a good spectest to work from.

[01:51] *** Kaiepi left
[01:52] *** Kaiepi joined
[01:52] *** p6bannerbot sets mode: +v Kaiepi

[02:12] *** ZzZombo joined
[02:12] *** p6bannerbot sets mode: +v ZzZombo

[02:33] *** ZzZombo left
[02:35] *** ZzZombo joined
[02:35] *** p6bannerbot sets mode: +v ZzZombo

[02:41] *** ZzZombo left
[02:41] *** ZzZombo_ joined
[02:41] *** ZzZombo_ is now known as ZzZombo

[02:41] *** p6bannerbot sets mode: +v ZzZombo

[03:00] <releasable6> Next release in ‚âà1 day and ‚âà15 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:02] *** Ulti joined
[03:02] *** sjn joined
[03:02] *** sivoais joined
[03:02] *** sivoais left
[03:02] *** sivoais joined
[03:02] *** p6bannerbot sets mode: +v sivoais

[03:03] *** p6bannerbot sets mode: +v Ulti

[03:03] *** p6bannerbot sets mode: +v sjn

[03:03] *** p6bannerbot sets mode: +v sivoais

[03:07] *** tony-o joined
[03:08] *** p6bannerbot sets mode: +v tony-o

[05:48] *** AlexDaniel left
[06:11] *** patrickb joined
[06:11] *** p6bannerbot sets mode: +v patrickb

[06:27] *** robertle_ joined
[06:28] *** p6bannerbot sets mode: +v robertle_

[07:46] *** lizmat joined
[07:47] *** p6bannerbot sets mode: +v lizmat

[07:55] <lizmat> Files=1251, Tests=76117, 343 wallclock secs (15.75 usr  5.43 sys + 2399.00 cusr 237.84 csys = 2658.02 CPU)

[08:04] *** Ven`` joined
[08:05] *** p6bannerbot sets mode: +v Ven``

[08:18] <lizmat> .ask jnthn I think we need a decoder.reset function, as otherwise we will have to fetch the $!decoder from the $!handle for each .pull-one in the GetLineFast iterator

[08:18] <yoleaux> lizmat: I'll pass your message to jnthn.

[08:22] <lizmat> .tell jnthn case in point: my $h = open("ten"); for $h.lines { .say; $h.close }

[08:22] <yoleaux> lizmat: I'll pass your message to jnthn.

[08:53] *** tobiash12 joined
[08:54] *** tobiash12 left
[09:26] *** AlexDaniel joined
[09:26] *** p6bannerbot sets mode: +v AlexDaniel

[09:26] *** Ven`` left
[09:29] *** OliPicard__16 joined
[09:30] *** OliPicard__16 left
[10:21] <samcv> lizmat: i'm not sure about that file handle thing unfortunatly

[10:26] <lizmat> samcv: fair enough   :-)

[10:27] *** ZzZombo left
[10:40] <timotimo> lizmat: i just claimed i'd file a doc repo issue for the "new" page, but you were 2 mins faster than me; will you file the issue?

[10:41] <lizmat> I'm happy for you to file it  :-)

[10:41] <lizmat> or Todd

[10:44] <lizmat> now for something completely different:

[10:44] <lizmat> m: my $l := (1,2,3); dd $_ for $l

[10:44] <camelia> rakudo-moar b07874e06: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[10:44] <lizmat> m: my $l = (1,2,3); dd $_ for $l

[10:44] <camelia> rakudo-moar b07874e06: OUTPUT: ¬´List $l = $(1, 2, 3)‚ê§¬ª

[10:46] <lizmat> feels a bit inconsistent to me: how to explain that to laypeople ?

[10:49] *** MasterDuke left
[10:50] *** j1mc_polari joined
[10:53] *** j1mc_polari left
[11:06] <timotimo> i'm mildly surprised -M./Foo works

[11:07] <timotimo> binding lets you screw with containers, and containerization is how loops and other things figure out whether to descend into something or iterate it as a single item

[11:08] <lizmat> yeah, I figured I would need to focus on the containerization

[11:16] *** Zoffix joined
[11:16] *** p6bannerbot sets mode: +v Zoffix

[11:16] <Zoffix> lizmat: assignment gives you shortcuts, like creating a Scalar container with $ sigils and creating Array/Hash with @/% sigils:  https://perl6advent.wordpress.com/2017/12/02/

[11:22] <Zoffix> (not sure which part you meant is inconsistent) And Scalar containers cause things with multiple things in them (like lists) to be treated as a single thing. 

[11:23] <lizmat> Zoffix: I still love that article

[11:24] <Zoffix> .tell tbrowder__ well, like the old adage goes: https://xkcd.com/1597/   Nuke everything and build anew. There's also ZScript that simplifies building various bits of the system: https://github.com/zoffixznet/z

[11:24] <yoleaux> Zoffix: I'll pass your message to tbrowder__.

[11:24] <lizmat> but I'm more going for a less deeply involved audience

[11:25] <Zoffix> cool

[11:25] * Zoffix g2g

[11:25] *** Zoffix left
[11:27] <tbrowder__> .tell Zoffix you‚Äôre right, time to changeover to ZScript, just have to do it gently so as not to hurt anything in the changeover...

[11:27] <yoleaux> tbrowder__: I'll pass your message to Zoffix.

[11:27] <yoleaux> 11:24Z <Zoffix> tbrowder__: well, like the old adage goes: https://xkcd.com/1597/   Nuke everything and build anew. There's also ZScript that simplifies building various bits of the system: https://github.com/zoffixznet/z

[11:43] *** cheets10 joined
[11:44] *** cheets10 left
[11:47] *** cybernaut18 joined
[11:50] *** cybernaut18 left
[11:51] *** ZzZombo joined
[11:51] *** p6bannerbot sets mode: +v ZzZombo

[12:56] *** lizmat left
[12:58] *** patrickb left
[12:59] *** lizmat joined
[13:00] *** p6bannerbot sets mode: +v lizmat

[13:06] *** animeshs joined
[13:11] *** animeshs left
[13:22] <lizmat> m: sub a($*a) { dd $*a }; a 42   # should this even be allowed?

[13:22] <camelia> rakudo-moar b07874e06: OUTPUT: ¬´42‚ê§¬ª

[13:22] <timotimo> why not?

[13:22] <lizmat> m: sub a($*a) { dd $*a.VAR.dynamic }; a 42   # it's *not* a dynamic variable

[13:22] <camelia> rakudo-moar b07874e06: OUTPUT: ¬´Bool::False‚ê§¬ª

[13:23] <timotimo> same behaviour as sub a($!a) / } i think?

[13:23] <timotimo> oh

[13:23] <timotimo> well, that's not good :)

[13:23] <lizmat> so you're saying that should just be a dynamic variable

[13:24] <timotimo> that'd be my intuition

[13:25] <lizmat> m: sub a($*a) { }; dd &a.signature.params[0]

[13:25] <camelia> rakudo-moar b07874e06: OUTPUT: ¬´Parameter $*a = $*a‚ê§¬ª

[13:25] <lizmat> m: sub a($*a) { }; dd &a.signature.params[0].twigil

[13:25] <camelia> rakudo-moar b07874e06: OUTPUT: ¬´""‚ê§¬ª

[13:26] *** araraloren joined
[13:27] <lizmat> I'll make a ticket

[13:27] *** p6bannerbot sets mode: +v araraloren

[13:36] <lizmat> R#2276

[13:36] <synopsebot> R#2276 [open]: https://github.com/rakudo/rakudo/issues/2276 [@LARRY][NYI][consistency][question] What should the * twigil do as a parameter?

[13:57] <timotimo> i might not get to making that ticket inspired by the mail about "new" in the docs

[14:21] <lizmat> spectesting fix for #2275

[14:29] *** AlexDaniel left
[14:32] <Geth> ¬¶ rakudo: 39f2d68a11 | (Elizabeth Mattijsen)++ | src/core/Parameter.pm6

[14:32] <Geth> ¬¶ rakudo: Make Parameter.twigil also work on dynamic Parameters

[14:32] <Geth> ¬¶ rakudo: 

[14:32] <Geth> ¬¶ rakudo: Fixes R#2275

[14:32] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/39f2d68a11

[14:32] <synopsebot> R#2275 [open]: https://github.com/rakudo/rakudo/issues/2275 Twigil method return nothing for variable

[14:48] <Geth> ¬¶ roast: c60405b224 | (Elizabeth Mattijsen)++ | S06-signature/introspection.t

[14:48] <Geth> ¬¶ roast: Add tests for R#2275

[14:48] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/c60405b224

[14:48] <synopsebot> R#2275 [open]: https://github.com/rakudo/rakudo/issues/2275 Twigil method return nothing for variable

[15:01] <lizmat> m: sub a($a) { }; my $b = 42; for ^1_000_000 -> int $_ {  }; say now - INIT now

[15:01] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´0.02119011‚ê§¬ª

[15:01] <lizmat> m: sub a($a) { }; my $b = 42; for ^1_000_000 -> int $_ { a($b) }; say now - INIT now

[15:01] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´0.0643862‚ê§¬ª

[15:01] <lizmat> m: sub a($a is rw) { }; my $b = 42; for ^1_000_000 -> int $_ { a($b) }; say now - INIT now

[15:01] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´0.036639‚ê§¬ª

[15:01] <lizmat> interesting numbers

[15:02] <lizmat> m: say (0.0643862 - 0.02119011) / (0.036639 - 0.02119011)

[15:02] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´2.79606431‚ê§¬ª

[15:03] <lizmat> jnthn: is this perhaps an opt opportunity, if you can prove $a doesn't get assigned to inside sub $a ?

[15:07] *** AndreSomers23 joined
[15:08] *** lucasb joined
[15:09] *** p6bannerbot sets mode: +v lucasb

[15:13] *** AndreSomers23 left
[15:20] *** obedmr15 joined
[15:22] *** araraloren left
[15:23] *** obedmr15 left
[15:23] <[Tux]> Rakudo version 2018.08-100-g39f2d68a1 - MoarVM version 2018.08-76-gf8fb3a97a

[15:23] <[Tux]> csv-test-xs-20      0.429 -  0.444

[15:23] <[Tux]> test-t --race       0.883 -  0.897

[15:23] <[Tux]> csv-ip5xs           0.904 -  1.026

[15:23] <[Tux]> test-t              2.025 -  2.062

[15:23] <[Tux]> csv-ip5xs-20        7.226 -  8.119

[15:23] <[Tux]> test                8.746 -  9.500

[15:23] <[Tux]> test-t-20 --race   11.598 - 12.225

[15:23] <[Tux]> csv-parser         23.761 - 25.901

[15:23] <[Tux]> test-t-20          35.165 - 38.760

[15:41] *** Kaiepi left
[15:41] *** Kaiepi joined
[15:42] <Geth> ¬¶ roast: d3ad9146ad | (Elizabeth Mattijsen)++ | S02-names/is_dynamic.t

[15:42] <Geth> ¬¶ roast: Add tests for R#2276

[15:42] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/d3ad9146ad

[15:42] <synopsebot> R#2276 [closed]: https://github.com/rakudo/rakudo/issues/2276 [consistency][testneeded] What should the * twigil do as a parameter?

[15:42] *** p6bannerbot sets mode: +v Kaiepi

[15:53] *** lucasb left
[16:11] *** jemershaw9 joined
[16:14] *** jemershaw9 left
[16:19] *** Kaiepi left
[16:20] *** Kaiepi joined
[16:21] *** p6bannerbot sets mode: +v Kaiepi

[16:45] *** lizmat left
[16:47] *** lizmat joined
[17:07] *** Kaiepi left
[17:08] *** Kaiepi joined
[17:08] *** p6bannerbot sets mode: +v Kaiepi

[17:09] *** robertle_ left
[17:23] *** or4n26 joined
[17:23] *** or4n26 left
[17:33] *** patrickz joined
[17:33] *** p6bannerbot sets mode: +v patrickz

[17:36] *** Hobby_boy27 joined
[17:37] *** AlexDaniel joined
[17:37] *** p6bannerbot sets mode: +v AlexDaniel

[17:39] *** Hobby_boy27 left
[17:58] *** ggoebel_ left
[17:58] *** ggoebel left
[18:03] *** Kaiepi left
[18:11] *** Kaiepi joined
[18:11] *** ggoebel joined
[18:11] *** ggoebel_ joined
[18:12] *** p6bannerbot sets mode: +v Kaiepi

[18:12] *** p6bannerbot sets mode: +v ggoebel

[18:12] *** p6bannerbot sets mode: +v ggoebel_

[18:27] *** swolffs joined
[18:33] *** swolffs left
[18:47] *** archerseven joined
[18:53] *** archerseven left
[19:33] <b2gills> samcv: I noticed that there doesn't seem to be a stream decoder for utf16  `'test.in'.IO.open(:enc<utf16>).lines` result: `Streaming decode NYI for encoding 4`

[19:33] <b2gills> samcv: This is important as programs on Windows tend to default to utf16

[19:35] <samcv> b2gills: yeah atm we only have non-stream decoder

[19:36] <b2gills> Is there a way to fall-back to the non-stream decoder?

[19:36] <samcv> i don't think so. other than reading it as binary and then doing .decode

[19:51] *** AlexDaniel left
[19:51] *** AlexDaniel joined
[19:51] *** p6bannerbot sets mode: +v AlexDaniel

[20:05] *** lucasb joined
[20:05] <samcv> b2gills: also it seems i cannot do $fh.write: 'hello'.encode('utf16')

[20:05] <samcv> i get write_fhb requires a native array of uint8 or int8

[20:05] *** p6bannerbot sets mode: +v lucasb

[20:06] <samcv> m: say 'hello'.encode('utf16')

[20:06] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´utf16:0x<68 65 6c 6c 6f>‚ê§¬ª

[20:06] <samcv> so it looks like it's a uint8 array

[20:06] <samcv> but maybe it's not.

[20:07] <b2gills> m: utf16.^roles.say

[20:07] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´((Blob[uint16]) (Positional[T]) (Stringy))‚ê§¬ª

[20:07] <samcv> hm ok

[20:08] <samcv> silly me looks like it is 16bit

[20:09] <samcv> maybe this needs to be fixed in moarvm then

[20:10] <b2gills> I suspected it might, which is why I didn't look into it much.   I have only a cursory understanding of MoarVM stuff.

[20:13] <b2gills> It would be nice if you could alias the same memory space as two different layouts, then a lot of interesting binary munging can easily happen in Perl6

[20:20] <b2gills> class FooStruct is repr<CStruct> {‚Ä¶};  my FooStruct @a; my @b := @a.view(Buf[uint8]); @a[0].baz = 32;  say @b[4]; # 32

[20:22] <b2gills> This would make it so that you could do `$fh.write: 'hello'.encode('utf16').view(Buf[uint8])`

[20:26] *** amatecha___ joined
[20:27] *** amatecha___ left
[20:29] <lucasb> m: my $v; say (map { k => $v = $_ }, ^3)

[20:29] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´(k => 0 k => 1 k => 2)‚ê§¬ª

[20:29] <lucasb> m: my $v; say (map { k => $v = $_ }, ^3).eager

[20:29] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´(k => 2 k => 2 k => 2)‚ê§¬ª

[20:31] <lucasb> the same thing I mentioned today before in #perl6

[20:31] <lucasb> I ask again, this is a bug right?

[20:32] <lucasb> hold on. I just found the docs :)

[20:33] <lucasb> "It is worth noting that when assigning a Scalar as value of a Pair the value holds the container of the value itself. This means that it is possible to change the value from outside of the Pair itself"

[20:34] <lucasb> :-(

[20:38] <lucasb> m: my $v; say my @a := (map { k => $v = $_ }, ^3).list; say @a  # one last snippet

[20:38] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´(k => 0 k => 1 k => 2)‚ê§(k => 2 k => 2 k => 2)‚ê§¬ª

[20:38] <lucasb> to me, this is very strange. I wonder what's the rationale...

[20:39] <geekosaur> so you can hold a "reference" to a value stored in a Hash and change it directly, I believe. (a Hash is a bucket of Pairs addressed by key)

[20:41] <geekosaur> you can also thik of a Pair as being a Scalar with an associated key

[20:41] <b2gills> m: my $v; say my @a := (map { k => ($v = $_)<> }, ^3).list; say @a; # decont it

[20:41] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´(k => 0 k => 1 k => 2)‚ê§(k => 0 k => 1 k => 2)‚ê§¬ª

[20:48] <lucasb> it should always be like this then? if the Pair is created with named parameters, then it doesn't work as a alias to the scalar

[20:48] *** AlexDaniel left
[20:49] <lucasb> m: my $v = 10; my $p = Pair.new(key=>'a',value=>$v); say $p; $v = 20; say $p

[20:49] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´a => 10‚ê§a => 10‚ê§¬ª

[20:49] <lucasb> m: my $v = 10; my $p = Pair.new('a',$v); say $p; $v = 20; say $p

[20:49] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´a => 10‚ê§a => 20‚ê§¬ª

[20:50] <b2gills> m: my $v = 0; my $kv = key => $v; $kv.value = 42; say $v;

[20:50] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´42‚ê§¬ª

[20:50] <b2gills> m: my $v = 0; my $kv = key => $v<>; $kv.value = 42; say $v;

[20:50] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´Cannot modify an immutable Int (0)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:51] <lucasb> I'm point the discrepancy with Pair.new(key=>'a',value=>$v), in case it's a bug

[20:52] <lucasb> m: my $v = 10; my $p = Pair.new(key=>'a',value=>$v); $p.value = 20 

[20:52] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´Cannot assign to a readonly variable or a value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:53] <b2gills> multi method new(Pair: Mu :$key!, Mu :$value!) {

[20:53] *** cateye10 joined
[20:53] <b2gills> multi method new(Pair: Mu :$key!, Mu :$value! is raw) {

[20:54] <b2gills> If it is a bug, I think that may be the only change needed

[20:54] *** lizmat left
[20:55] *** lizmat joined
[20:55] *** p6bannerbot sets mode: +v lizmat

[20:56] *** cateye10 left
[20:56] <lizmat> m: my %h = a => 42; for %h { .value = 666 }; dd %h

[20:56] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´Hash %h = {:a(666)}‚ê§¬ª

[20:57] <samcv> b2gills: i added support now for writing utf16 to moarvm

[20:57] <b2gills> \O/

[20:57] <samcv> with $fh.write: 'foo'.encode('utf16') at least

[20:57] <lizmat> that's why you need .value to be a left value

[20:58] <lucasb> I'm not disputing the rw-ness of the .value. I'm ok with it

[20:59] <b2gills> I think it is better to think of it as `raw` instead of `rw`

[20:59] <lucasb> also, "abstractly", a hash is a list of pairs

[21:00] <lucasb> but a Perl 6 hash is not implemented in terms of Perl 6 Pairs, correct? 

[21:02] <lucasb> m: my $v = 10; my %h = map {$_=>$v}, <a b c>; $v = 20; say %h

[21:02] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´{a => 10, b => 10, c => 10}‚ê§¬ª

[21:02] <lucasb> m: my $v = 10; my @a = map {$_=>$v}, <a b c>; $v = 20; say @a

[21:02] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´[a => 20 b => 20 c => 20]‚ê§¬ª

[21:02] <lizmat> lucasb: it mimics one

[21:03] <geekosaur> Ithink the implementatiois different tu it's a bug if you can observe that without invoking nqp

[21:03] <lizmat> m: my %h = a => 42; for %h { .value = 666 }; dd %h   # which is why this works

[21:03] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´Hash %h = {:a(666)}‚ê§¬ª

[21:03] <geekosaur> "I think the implementation is different but"

[21:03] <b2gills> I don't think you can observe it even if you invoke nqp

[21:03] <geekosaur> tis keyboard does not like typing quickly

[21:04] *** patrickz left
[21:04] <b2gills> Yeah that is the problem with keyboards that are based on USB (even laptop keyboards)

[21:05] <b2gills> USB uses a poll mechanism, while PS/2 keyboards interrupt the processor.

[21:07] <geekosaur> this is a backup keyboard, I managed to break the other one. it worked much better

[21:10] <Geth> ¬¶ rakudo: 85da7b206f | (Elizabeth Mattijsen)++ | 2 files

[21:10] <Geth> ¬¶ rakudo: At least document the methods that should be supplied

[21:10] <Geth> ¬¶ rakudo: 

[21:10] <Geth> ¬¶ rakudo: The Positional / Associative roles do not actually enforce the implementation

[21:10] <Geth> ¬¶ rakudo: of needed methods, such as AT-POS / AT-KEY.  Adding stubs for these methods

[21:10] <Geth> ¬¶ rakudo: breaks the setting build, complaining about methods not being implemented

[21:10] <Geth> ¬¶ rakudo: which clearly *are* implemented.

[21:10] <Geth> ¬¶ rakudo: 

[21:10] <Geth> ¬¶ rakudo: I've tried to add the stubs and defer mixing in the role in a BEGIN block

[21:10] <Geth> ¬¶ rakudo: in the core_epilogue.  Although that compiles ok, the mixed in role is *not*

[21:10] <Geth> ¬¶ rakudo: visible in smart-match (probably nqp::istype), causing all sorts of breakage.

[21:10] <Geth> ¬¶ rakudo: Alas.  Suggestions welcome.

[21:10] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/85da7b206f

[21:13] *** daffy95123 joined
[21:14] *** daffy95123 left
[21:18] <timotimo> b2gills: have you had a look at CUnion?

[21:19] <timotimo> m: use NativeCall; class Coercer is repr('CUnion') { has int64 $.sxtfr; has int32 $.thrtw; has int16 $.sxtn }; Coercer.new(sxftfr => 0xff998877112233).sxtn.say

[21:19] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´0‚ê§¬ª

[21:20] <timotimo> m: use NativeCall; class Coercer is repr('CUnion') { has int64 $.sxtfr; has int32 $.thrtw; has int16 $.sxtn }; Coercer.new(sxftfr => 0xff998877112233).thrtw.say

[21:20] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´0‚ê§¬ª

[21:20] <timotimo> hm?

[21:20] <timotimo> i wonder if it assigns default values to the other attributes?

[21:21] <timotimo> m: use NativeCall; class Coercer is repr('CUnion') { has int64 $.sxtfr; has int32 $.thrtw; has int16 $.sxtn }; my $c = Coercer.new(); $c.thrtw = 0x123456789; say $c.perl;

[21:21] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´Cannot modify an immutable Int (0)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:21] <timotimo> m: use NativeCall; class Coercer is rw is repr('CUnion') { has int64 $.sxtfr; has int32 $.thrtw; has int16 $.sxtn }; my $c = Coercer.new(); $c.thrtw = 0x123456789; say $c.perl;

[21:21] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´Coercer.new(sxtfr => 591751049, thrtw => 591751049, sxtn => 26505)‚ê§¬ª

[21:21] <timotimo> OK, so using .new doesn't seem to do it right, but assigning after creation does

[21:21] <timotimo> we may want to change that

[21:23] <timotimo> m: use NativeCall; class A is rw is repr('CStruct') { has int16 $.x; has int32 $.y; has int16 $.z; }; class B is rw is repr('CStruct') { has int32 $.a; has int32 $.b }; class Coercer is rw is repr('CUnion') { HAS A $.a; HAS B $.b; }; my $c = Coercer.new(); $c.a.y = 0xffffffff; say $c.perl

[21:23] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´Coercer.new(a => A.new(x => 0, y => -1, z => 0), b => B.new(a => 0, b => -1))‚ê§¬ª

[21:23] <timotimo> ah, well.

[21:23] <timotimo> m: use NativeCall; class A is rw is repr('CStruct') { has int16 $.x; has int32 $.y; has int16 $.z; }; class B is rw is repr('CStruct') { has int32 $.a; has int32 $.b }; class Coercer is rw is repr('CUnion') { HAS A $.a; HAS B $.b; }; my $c = Coercer.new(); $c.a.y = 0x44332211; say $c.perl

[21:23] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´Coercer.new(a => A.new(x => 0, y => 1144201745, z => 0), b => B.new(a => 0, b => 1144201745))‚ê§¬ª

[21:23] <timotimo> that doesn't seem right

[21:24] <timotimo> m: use NativeCall; class A is rw is repr('CStruct') { has int16 $.x; has int32 $.y; has int16 $.z; }; class B is rw is repr('CStruct') { has int32 $.a; has int32 $.b }; class Coercer is rw is repr('CUnion') { HAS A $.a; HAS B $.b; }; my $c = Coercer.new(); $c.a.x = 0x4433; $c.a.z = 0x112233; say $c.perl

[21:24] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´Coercer.new(a => A.new(x => 17459, y => 0, z => 8755), b => B.new(a => 17459, b => 0))‚ê§¬ª

[21:24] <b2gills> I want to be able to use @[2;2;2] and @[8]

[21:24] <timotimo> m: use NativeCall; class Coercer is rw is repr('CUnion') { HAS int8[16] @.a; HAS int16[8] @.b };

[21:24] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§An exception occurred while parameterizing int8‚ê§at <tmp>:1‚ê§Exception details:‚ê§  5===SORRY!5=== Error while compiling <tmp>‚ê§  int8 cannot be parameterized‚ê§  at <tmp>:1‚ê§  ------> 3r is rw‚Ä¶¬ª

[21:25] <timotimo> hah oops

[21:25] <timotimo> m: use NativeCall; class Coercer is rw is repr('CUnion') { HAS int8 @.a[16]; HAS int16 @.b[8] };

[21:25] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§CUnion representation only handles attributes of type:‚ê§  (u)int8, (u)int16, (u)int32, (u)int64, (u)long, (u)longlong, num32, num64, (s)size_t, bool, Str‚ê§  and types with representation: CArray, CPoi‚Ä¶¬ª

[21:25] <timotimo> m: use NativeCall; class Coercer is rw is repr('CUnion') { HAS int8 @.a[16] is CArray; HAS int16 @.b[8] is CArray };

[21:25] <camelia> rakudo-moar 39f2d68a1: ( no output )

[21:25] <timotimo> m: use NativeCall; class Coercer is rw is repr('CUnion') { HAS int8 @.a[16] is CArray; HAS int16 @.b[8] is CArray }; my $c = Coercer.new; $c.b[2] = 0x1122; say $c.perl

[21:25] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´Coercer.new(a => NativeCall::Types::CArray[int8].new, b => NativeCall::Types::CArray[int16].new)‚ê§¬ª

[21:26] <timotimo> m: use NativeCall; class Coercer is rw is repr('CUnion') { HAS int8 @.a[16] is CArray; HAS int16 @.b[8] is CArray }; my $c = Coercer.new; $c.b[2] = 0x1122; $c.a[$_].fmt("%x").say for ^16

[21:26] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§¬ª

[21:26] <timotimo> damn it

[21:26] <timotimo> you can still use nativecast to get what you want, but it isn't as seamless

[21:29] <timotimo> m: use NativeCall; class Coercer is rw is repr('CUnion') { has int8 @.a[16] is CArray; has int16 @.b[8] is CArray }; my $c = Coercer.new; $c.b[2] = 0x1122; $c.a[$_].fmt("%x").say for ^16

[21:29] <camelia> rakudo-moar 39f2d68a1: OUTPUT: ¬´0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§¬ª

[21:29] <timotimo> still nothing, huh.

[21:30] <b2gills> my uint64 @a; my uint8 @b := @a; # I'm just saying something like this would be awesome if it worked

[21:32] *** lucasb left
[21:33] <timotimo> mhm

[21:33] <timotimo> i mean you can implement a STORE method to do that for you, and use assignment

[21:35] <timotimo> m: class TransformIt is Positional { method STORE(int8 @other) { say "storing an int8 in here:"; say @other.perl } }; my @foo is TransformIt; my int8 @other = 1, 2, 3, 4; @foo = @other

[21:35] <camelia> rakudo-moar 85da7b206: OUTPUT: ¬´storing an int8 in here:‚ê§array[int8].new(1, 2, 3, 4)‚ê§¬ª

[21:35] <b2gills> If you could tell MoarVM to just use the same memory space (with some caveats) it would be fast as well.

[21:35] <timotimo> our regular VMArray won't like that very much, because it is resizable and the memory can actually "move around" inside of its allocated memory (to support quick push/pull shift/unshift)

[21:36] <timotimo> but native shaped arrays would support that

[21:36] <timotimo> however, i don't think binding is the right way to implement that

[21:36] <timotimo> otherwise you wouldn't get an error if you're passing an int8 @a to a sub that expects an int16 @b

[21:36] <b2gills> I don't either, I was going for clarity of intent

[21:36] <timotimo> it'd be kind of C-ish that way, but even more happy to just coerce for you

[21:37] *** AlexDaniel joined
[21:37] *** p6bannerbot sets mode: +v AlexDaniel

[21:39] <b2gills> my uint64 @a[16]; my uint8 @b[64] := @a.view(uint8); # where view tells MoarVM to reuse the memory.

[21:46] <b2gills> Something like that could get us C level speeds for binary manipulations.

[21:46] <b2gills> Without the overhead of NativeCall

[22:00] <timotimo> i don't think it'd be extremely hard to jit-compile nativecast calls down to something very fast

[22:00] <timotimo> so that the vast majority of time spent is accessing the original array and storing it whereever you're putting it

[22:00] <timotimo> but the "view" idea is already a proposal for the binary manipulation low-level api

[22:01] <b2gills> yeah it seemed to me to be in the same vein as what I have thought of (I've had this idea for quite some time)

[22:04] <timotimo> aye, it's not really new

[22:04] <b2gills> I'm just trying to tickle other peoples brains

[22:04] <timotimo> there was already at least one proposal for new "pack" APIs, but iirc that was at the user-facing level

[22:05] <b2gills> tickle them in the same way that `with` got added

[22:06] <timotimo> would you say TWEAK was different?

[22:06] <b2gills> There have been at least 3 times that I was quiet about something, that later got noticed by someone else

[22:06] <b2gills> TWEAK wasn't different, but it wasn't me that tickled other peoples brains

[22:07] <b2gills> I noticed at the time that `.pull-at-least` should be `.pull-at-most`, but I didn't say anything

[22:07] <timotimo> ah, i think i noticed that one at some point

[22:08] <b2gills> I thought at the time that `.count-only` should be done by including a role

[22:08] <timotimo> that now became the PredictableIterator?

[22:08] <b2gills> yeah, but it could have happened days after the initial addition of `.count-only` instead of months/years later

[22:09] <timotimo> right

[22:09] *** Guest88982 joined
[22:09] <timotimo> it's good that you're giving it a try :)

[22:09] <timotimo> like, courageously speaking your mind when you notice something odd

[22:09] <b2gills> I have anxiety problems that often stop me

[22:10] <timotimo> ah, i can sy

[22:10] *** Guest88982 left
[22:10] <timotimo> mpathise with that

[22:10] <timotimo> i'm usually fine enough on IRC, but in person that's a different story :)

[22:11] <b2gills> I'm not saying that all of my thoughts are gems, but there are already several examples that got added.

[22:11] <timotimo> oh, of course

[22:11] <timotimo> it's very hard to "not give a shit if my thoughts aren't valuable"

[22:12] <b2gills> I would have suggested `PredictableIterator`, but I couldn't come up with a good name for it at the time. So I stayed quiet.

[22:14] <b2gills> The anxiety is also why I've never had a job as a programmer.

[22:14] <timotimo> i have enjoyed a few extra servings of impostor syndrome ever since ... i dunno?

[22:15] <timotimo> a long time, for sure

[22:16] <timotimo> i imagine it's just a little similar to what you're mentioning

[22:16] *** tomku0 joined
[22:17] *** tomku0 left
[22:18] <b2gills> Actually it is more of the anxiety of dealing with other people than my qualifications.

[22:19] <b2gills> I think I almost got a job soldering, but I didn't pick up the phone either time they called back.

[22:21] <timotimo> ah, OK

[22:21] <timotimo> i think i missed an opportunity because i didn't nag hard enough after the interview

[22:31] *** lucasb joined
[22:32] *** p6bannerbot sets mode: +v lucasb

[23:00] <releasable6> Next release in ‚âà19 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:29] *** MasterDuke joined
[23:29] *** p6bannerbot sets mode: +v MasterDuke

[23:29] *** MasterDuke left
[23:29] *** MasterDuke joined
[23:29] *** herbert.freenode.net sets mode: +v MasterDuke

[23:29] *** p6bannerbot sets mode: +v MasterDuke

[23:29] *** alien2003_ joined
[23:33] <timotimo> haha, why did nobody tell me that the allocations page in the profiler screenshot/-cast i recently posted had "kb" instead of "bytes" %)

[23:33] <timotimo> surely it's totally normal that a Scalar is 48 kbytes big!

[23:34] *** lucasb left
[23:34] *** alien2003_ left
[23:53] <MasterDuke> heh

[23:55] <MasterDuke> guess that's why jnthn is trying to reduce the number created!

