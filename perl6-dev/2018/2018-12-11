[00:29] *** cognominal left
[00:30] *** cognominal joined
[00:30] *** p6bannerbot sets mode: +v cognominal

[00:34] *** cognomin_ joined
[00:35] *** p6bannerbot sets mode: +v cognomin_

[00:37] *** cognominal left
[00:39] *** cognomin_ left
[00:44] <Geth> ¦ rakudo: 5603128e01 | (Petr Rockai)++ | src/core/VM.pm6

[00:44] <Geth> ¦ rakudo: Ignore shared library versions on OpenBSD.

[00:44] <Geth> ¦ rakudo: 

[00:44] <Geth> ¦ rakudo: Shared library version numbers in OpenBSD rarely match those provided by

[00:44] <Geth> ¦ rakudo: upstream, breaking many packages which specify them.

[00:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5603128e01

[00:44] <Geth> ¦ rakudo: 313170011d | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | src/core/VM.pm6

[00:44] <Geth> ¦ rakudo: Merge pull request #2530 from mornfall/fix-openbsd-libs

[00:44] <Geth> ¦ rakudo: 

[00:44] <Geth> ¦ rakudo: Ignore shared library versions on OpenBSD.

[00:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/313170011d

[00:48] <AlexDaniel> timotimo: what's that (last)? Docs? Tests?

[00:49] <timotimo> oh, i was about to test my tests, but got distracted after building newest moarvm (and still have to build a new nqp and rakudo), but i also want to go to sleep soon

[00:50] <timotimo> m: react { whenever Supply.interval(0.3) { say "B1: $_"; last if $_ > 5; LAST { say "last B1" } }; whenever Supply.interval(0.6) { say "beep $_"; last if $_ > 5; LAST { say "last beep" } } }; say "finished"

[00:50] <camelia> rakudo-moar 890d628a2: OUTPUT: «B1: 0␤beep 0␤B1: 1␤beep 1␤B1: 2␤B1: 3␤beep 2␤B1: 4␤B1: 5␤beep 3␤B1: 6␤last B1␤beep 4␤beep 5␤beep 6␤last beep␤finished␤»

[00:50] <timotimo> this is new ^

[00:51] <AlexDaniel> ahhh I see

[00:53] *** MasterDuke joined
[00:53] *** p6bannerbot sets mode: +v MasterDuke

[00:54] *** MasterDuke left
[00:54] *** MasterDuke joined
[00:54] *** herbert.freenode.net sets mode: +v MasterDuke

[00:54] *** p6bannerbot sets mode: +v MasterDuke

[00:58] *** cognominal joined
[00:59] *** p6bannerbot sets mode: +v cognominal

[01:01] <Geth> ¦ rakudo: Kaiepi++ created pull request #2536: Add Kaiepi to CREDITS

[01:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2536

[01:02] <Geth> ¦ rakudo: e3ab2f9ed5 | (Ben Davies)++ (committed using GitHub Web editor) | CREDITS

[01:02] <Geth> ¦ rakudo: Add Kaiepi to CREDITS

[01:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e3ab2f9ed5

[01:02] <Geth> ¦ rakudo: a63c2ba837 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | CREDITS

[01:02] <Geth> ¦ rakudo: Merge pull request #2536 from Kaiepi/patch-1

[01:02] <Geth> ¦ rakudo: 

[01:02] <Geth> ¦ rakudo: Add Kaiepi to CREDITS

[01:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a63c2ba837

[01:11] *** cognominal left
[01:12] *** cognominal joined
[01:13] *** p6bannerbot sets mode: +v cognominal

[01:14] *** cognomin_ joined
[01:14] *** p6bannerbot sets mode: +v cognomin_

[01:16] *** cognominal left
[01:18] *** cognomin_ left
[01:46] *** cognominal joined
[01:47] *** p6bannerbot sets mode: +v cognominal

[01:48] *** lucasb left
[01:50] *** reportable6 left
[01:50] *** committable6 left
[01:50] *** evalable6 left
[01:50] *** squashable6 left
[01:50] *** releasable6 left
[01:51] *** reportable6 joined
[01:51] *** ChanServ sets mode: +v reportable6

[01:51] *** committable6 joined
[01:52] *** releasable6 joined
[01:52] *** p6bannerbot sets mode: +v reportable6

[01:52] *** p6bannerbot sets mode: +v committable6

[01:52] *** p6bannerbot sets mode: +v releasable6

[01:55] *** squashable6 joined
[01:55] *** ChanServ sets mode: +v squashable6

[01:55] *** evalable6 joined
[01:55] *** ChanServ sets mode: +v evalable6

[01:55] *** lizmat left
[01:56] *** p6bannerbot sets mode: +v squashable6

[01:56] *** p6bannerbot sets mode: +v evalable6

[02:16] *** cognomin_ joined
[02:17] *** p6bannerbot sets mode: +v cognomin_

[02:19] *** cognominal left
[02:20] *** cognomin_ left
[03:18] *** timotimo left
[03:26] *** timotimo joined
[03:26] *** p6bannerbot sets mode: +v timotimo

[03:46] *** lgtaube joined
[03:47] *** p6bannerbot sets mode: +v lgtaube

[03:53] *** literal left
[04:01] *** literal joined
[04:01] *** p6bannerbot sets mode: +v literal

[04:12] *** MasterDuke left
[04:19] *** cognominal joined
[04:19] *** p6bannerbot sets mode: +v cognominal

[04:50] *** cognominal left
[06:15] *** dalek left
[06:17] *** Geth left
[06:49] *** cognominal joined
[06:50] *** dalek joined
[06:50] *** ChanServ sets mode: +v dalek

[06:50] *** p6lert left
[06:50] *** p6lert_ joined
[06:50] *** Geth joined
[06:50] *** ChanServ sets mode: +v Geth

[06:50] *** SourceBaby left
[06:50] *** p6bannerbot sets mode: +v cognominal

[06:50] *** p6bannerbot sets mode: +v dalek

[06:50] *** p6bannerbot sets mode: +v p6lert_

[06:50] *** p6bannerbot sets mode: +v Geth

[07:22] *** cognominal left
[07:30] *** robertle joined
[07:30] *** p6bannerbot sets mode: +v robertle

[07:55] *** xlat joined
[07:56] *** p6bannerbot sets mode: +v xlat

[07:58] *** dct joined
[07:58] *** p6bannerbot sets mode: +v dct

[08:24] *** dct left
[09:19] *** cognominal joined
[09:20] *** p6bannerbot sets mode: +v cognominal

[09:50] *** cognomin_ joined
[09:50] *** p6bannerbot sets mode: +v cognomin_

[09:52] *** cognominal left
[09:54] *** cognomin_ left
[10:01] *** lizmat joined
[10:01] *** p6bannerbot sets mode: +v lizmat

[10:13] <lizmat> Files=1256, Tests=81562, 338 wallclock secs (15.03 usr  5.32 sys + 2403.78 cusr 208.67 csys = 2632.80 CPU)

[10:15] <jnthn> Huh, how could `$result ~~ Rat && $result.denominator == 0` ever result in "No such method denominator for invocant of type Num"?

[10:43] <|Tux|> system-load during build is ultra-high again: http://tux.nl/Files/20181211114336.png

[10:48] <lizmat> [Tux]: any idea when that changed ?

[10:48] <|Tux|> nope

[10:50] <|Tux|> Rakudo version 2018.11-28-ga63c2ba83 - MoarVM version 2018.11-19-g0d5f389c3

[10:50] <|Tux|> csv-test-xs-20      0.419 -  0.420

[10:50] <|Tux|> test-t --race       0.770 -  0.779

[10:50] <|Tux|> csv-ip5xs           0.905 -  0.931

[10:50] <|Tux|> test-t              1.799 -  1.807

[10:50] <|Tux|> csv-ip5xs-20        7.227 -  7.264

[10:50] <|Tux|> test                7.788 -  8.616

[10:50] <|Tux|> test-t-20 --race    9.066 - 10.908

[10:50] <|Tux|> csv-parser         21.491 - 22.327

[10:50] <|Tux|> test-t-20          30.262 - 30.477

[10:52] *** lucasb joined
[10:52] *** p6bannerbot sets mode: +v lucasb

[11:03] <Ulti> |Tux|: out of curiosity which Perl 5 are you using?

[11:04] <lizmat> .ask jnthn are dynamic variable lookups cached and if so, OOC how?

[11:04] <yoleaux> lizmat: I'll pass your message to jnthn.

[11:10] <lizmat> m: for ^1_000 { for ^2 { if $*FOO { } } }; say now - INIT now

[11:10] <camelia> rakudo-moar a63c2ba83: OUTPUT: «0.1114137␤»

[11:10] <lizmat> m: for ^1_000 { my $FOO := $*FOO; for ^2 { if $FOO { } } }; say now - INIT now

[11:10] <camelia> rakudo-moar a63c2ba83: OUTPUT: «0.07577071␤»

[11:12] <lizmat> currently it makes sense to cache a single (failing) dynamic var lookup if you would look it up *twice* in the same scope

[11:14] <lizmat> even for successful lookups it makes sense:

[11:14] <lizmat> m: my $*FOO = 42; for ^10_000 { for ^2 { if $*FOO { } } }; say now - INIT now

[11:14] <camelia> rakudo-moar a63c2ba83: OUTPUT: «0.02156946␤»

[11:14] <lizmat> m: my $*FOO = 42; for ^10_000 { my $FOO := $*FOO; for ^2 { if $FOO { } } }; say now - INIT now

[11:14] <camelia> rakudo-moar a63c2ba83: OUTPUT: «0.021713␤»

[11:14] <lizmat> m: my $*FOO = 42; for ^10_000 { for ^2 { if $*FOO { } } }; say now - INIT now

[11:14] <camelia> rakudo-moar a63c2ba83: OUTPUT: «0.021828006␤»

[11:14] <lizmat> m: my $*FOO = 42; for ^10_000 { my $FOO := $*FOO; for ^2 { if $FOO { } } }; say now - INIT now

[11:14] <camelia> rakudo-moar a63c2ba83: OUTPUT: «0.02200071␤»

[11:15] <lizmat> ok, I guess it is within noise then

[11:17] <lizmat> also: running a profile on "for ^1_000 { for ^2 { if $*FOO { } } }" creates a huge, broken profile

[11:19] <lizmat> timotimo ^^^  ideas, opinions?

[11:20] <|Tux|> Ulti, at that box, or anywhere?

[11:21] <|Tux|> on tux (the test box) I use 5.28.0 (x86_64-linux-thread-multi-ld)

[11:24] <Ulti> on the test box for the output

[11:24] <Ulti> ok thats cool

[11:37] <timotimo> oh, i hope that's not another incarnation of the "we generate gotos across 'prof_leave' and the tree grows sideways" problem

[11:45] <lizmat> timotimo: should I ticket it ?

[11:52] *** cognominal joined
[11:53] *** p6bannerbot sets mode: +v cognominal

[12:03] <Geth> ¦ nqp: a50a2a6ee7 | (Elizabeth Mattijsen)++ | docs/ops.markdown

[12:03] <Geth> ¦ nqp: Fix label

[12:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a50a2a6ee7

[12:06] <Geth> ¦ nqp: f8e87c58cd | (Elizabeth Mattijsen)++ | docs/ops.markdown

[12:06] <Geth> ¦ nqp: Add constants to list of constants

[12:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f8e87c58cd

[12:07] <timotimo> yeah, if you want to

[12:08] <lizmat> will do

[12:21] *** cognomin_ joined
[12:22] *** p6bannerbot sets mode: +v cognomin_

[12:24] *** cognominal left
[12:26] *** cognomin_ left
[13:32] <Geth> ¦ rakudo/master: 8 commits pushed by (Paweł Murias)++

[13:32] <Geth> ¦ rakudo/master: 1dd59f105d | [js] Set an empty %!cli-options on the compiler when we don't run from the command line

[13:32] <Geth> ¦ rakudo/master: 52c2af5d8f | [js] Update to passing the nqp runtime to loaded code

[13:32] <Geth> ¦ rakudo/master: 8b13655c38 | [js] Update our release making procedure

[13:32] <Geth> ¦ rakudo/master: 2869a48b1f | [js] Sprinkle async/await on nqp::p6... ops

[13:32] <Geth> ¦ rakudo/master: cf5432aecd | [js] Fix use of await instead of async

[13:32] <Geth> ¦ rakudo/master: 758caa8999 | [js] Migrate typeObject_ to $$typeObject

[13:32] <Geth> ¦ rakudo/master: e0b943d0af | [js] Rename ._STable to $$STable

[13:32] <Geth> ¦ rakudo/master: a759f9d729 | [js] Adapt to using a p6$ prefix on methods

[13:32] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/a63c2ba8375d...a759f9d72936

[13:39] *** pmurias joined
[13:39] *** p6bannerbot sets mode: +v pmurias

[13:42] *** pmurias left
[13:47] *** pmurias joined
[13:47] *** p6bannerbot sets mode: +v pmurias

[13:49] *** cognominal joined
[13:50] *** p6bannerbot sets mode: +v cognominal

[13:50] *** cognomin_ joined
[13:51] *** p6bannerbot sets mode: +v cognomin_

[13:53] *** cognominal left
[13:55] *** cognomin_ left
[13:56] *** cognominal joined
[13:57] *** p6bannerbot sets mode: +v cognominal

[14:05] *** pmurias left
[14:06] *** pmurias joined
[14:06] *** p6bannerbot sets mode: +v pmurias

[14:26] *** pmurias left
[14:31] *** pmurias joined
[14:31] *** p6bannerbot sets mode: +v pmurias

[14:33] *** pmurias left
[14:35] *** travis-ci joined
[14:35] *** p6bannerbot sets mode: +v travis-ci

[14:35] <travis-ci> Rakudo build failed. Paweł Murias '[js] Adapt to using a p6$ prefix on methods'

[14:35] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/466512550 https://github.com/rakudo/rakudo/compare/a63c2ba8375d...a759f9d72936

[14:35] *** travis-ci left
[14:35] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[14:36] *** pmurias joined
[14:36] *** p6bannerbot sets mode: +v pmurias

[14:37] <lizmat> restarted the failing job: probably a flapper

[14:39] <Geth> ¦ rakudo: 4f14d7134c | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[14:39] <Geth> ¦ rakudo: Initial implementation of Blob.readint / Buf.writeint

[14:39] <Geth> ¦ rakudo: 

[14:39] <Geth> ¦ rakudo: As more or less described in

[14:39] <Geth> ¦ rakudo:   https://gist.github.com/jnthn/1e865a06d213d89d9aa6352908858a57

[14:39] <Geth> ¦ rakudo: 

[14:39] <Geth> ¦ rakudo: This commit implements:

[14:39] <Geth> ¦ rakudo: 

[14:39] <Geth> ¦ rakudo: <…commit message has 19 more lines…>

[14:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4f14d7134c

[14:58] *** cognominal left
[14:59] *** cognominal joined
[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:00] *** p6bannerbot sets mode: +v cognominal

[15:01] *** cognomin_ joined
[15:02] *** p6bannerbot sets mode: +v cognomin_

[15:04] *** cognominal left
[15:05] *** cognomin_ left
[15:07] *** pmurias left
[15:08] *** pmurias joined
[15:08] *** p6bannerbot sets mode: +v pmurias

[15:10] <lizmat> travis build is green after restart of job

[15:18] <lizmat> m: my $b = Blob[int8].new(-1); dd $b.read-int8(0)

[15:18] <camelia> rakudo-moar 4f14d7134: OUTPUT: «255␤»

[15:18] <lizmat> that feels wrong

[15:19] <lizmat> m: my $b = Blob[int8].new(-1); dd $b.read-int8(0); dd $b[0]

[15:19] <camelia> rakudo-moar 4f14d7134: OUTPUT: «255␤-1␤»

[15:20] <lizmat> nine ^^

[15:25] <Geth> ¦ roast: f08f4a4008 | (Elizabeth Mattijsen)++ | S03-buf/read-int8.t

[15:25] <Geth> ¦ roast: Add test file for testing Blob.read-int8

[15:25] <Geth> ¦ roast: 

[15:25] <Geth> ¦ roast: Created a new directory for these tests.  Also, did not add this to rakudo's

[15:25] <Geth> ¦ roast: spectest.data as it presently still has quite a number of failures.

[15:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f08f4a4008

[15:26] *** AlexDaniel left
[15:28] *** cognominal joined
[15:29] *** p6bannerbot sets mode: +v cognominal

[15:30] <lizmat> m: my $b = Blob[uint8].new(255); dd $b.read-int8(0)   # sorta expected to see -1 there, am I wrong ?

[15:30] <camelia> rakudo-moar 4f14d7134: OUTPUT: «255␤»

[15:38] <|Tux|> Rakudo version 2018.11-37-g4f14d7134 - MoarVM version 2018.11-19-g0d5f389c3

[15:38] <|Tux|> csv-test-xs-20      0.424 -  0.434

[15:38] <|Tux|> test-t --race       0.789 -  0.791

[15:38] <|Tux|> csv-ip5xs           0.915 -  0.937

[15:38] <|Tux|> test-t              1.709 -  1.714

[15:38] <|Tux|> csv-ip5xs-20        6.992 -  7.543

[15:38] <|Tux|> test                7.225 -  7.989

[15:38] <|Tux|> test-t-20 --race    9.709 -  9.812

[15:39] <|Tux|> csv-parser         21.928 - 22.270

[15:39] <|Tux|> test-t-20          29.292 - 30.499

[15:39] <|Tux|> (the system-load was now more or less as expected: http://tux.nl/Files/20181211163914.png)

[15:39] <lizmat> that looks a lot better

[15:39] <|Tux|> indeed

[15:42] <lizmat> the MoarVM version is the same, and the other commits either only just add stuff or are JS specific

[15:42] <lizmat> so I can't explain the difference... :-(

[15:47] <nine> lizmat: that's....odd. If anything I'd expect it to faultily interpret something as singed, not unsigned.

[15:48] <lizmat> nine: well, writing tests now...  so that's how I found out  :-)

[15:52] <Geth> ¦ rakudo: 011c6f11d4 | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[15:52] <Geth> ¦ rakudo: The endianness parameter of read-int8/uint8 is meaningless

[15:52] <Geth> ¦ rakudo: 

[15:52] <Geth> ¦ rakudo: So ignore its value and just go for native

[15:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/011c6f11d4

[15:52] <lizmat> afk for a bit&

[15:53] <nine> nqp: my $b := MAST::Bytecode.new; nqp::bindpos_i($b, 0, -1); note(nqp::readint($b, 0, 1))

[15:53] <camelia> nqp-moarvm: OUTPUT: «255␤»

[15:53] <nine> lizmat: same here ^^^

[15:53] <nine> Ooooooh, I get it

[15:56] <nine> It's missing the sign extension when reading less than 64 bits. While 255 and -1 are indeed represented exactly the same in a byte, there's a whole lot of difference in a 64 bit number. There 255 is not the highest possible unsigned value

[15:57] <lizmat> so it is a bug ?

[16:05] <lizmat> afk for a bit for real&

[16:24] *** robertle left
[16:54] *** robertle joined
[16:55] *** p6bannerbot sets mode: +v robertle

[16:59] *** cognominal left
[16:59] *** cognominal joined
[17:00] *** p6bannerbot sets mode: +v cognominal

[17:04] *** cognominal left
[17:08] *** Ven`` joined
[17:09] *** p6bannerbot sets mode: +v Ven``

[17:13] *** Ven`` left
[17:42] *** cognominal joined
[17:43] *** p6bannerbot sets mode: +v cognominal

[18:00] <lizmat> hmmm... so do we have a constant somewhere that indicates whether we're running on a little-endian or big-endian system ?

[18:02] <samcv> lizmat, no

[18:02] <samcv> i want one though

[18:03] * lizmat too

[18:03] <lizmat> I guess the new read-int8 will give us a way to do it...

[18:04] <samcv> lizmat, you can hack it though. by encoding something with utf16 

[18:04] <samcv> and seeing if it matches with utf16le encoder :P

[18:04] <samcv> what's the new read-int8?

[18:05] <lizmat> m: say Blob[uint16].new(256).read-int8(0)   # 1 means big-endian

[18:05] <camelia> rakudo-moar 011c6f11d: OUTPUT: «0␤»

[18:06] <lizmat> samcv: implementation of https://gist.github.com/jnthn/1e865a06d213d89d9aa6352908858a57

[18:06] <lizmat> but instead of named params, use a optional positional of the Endian enum

[18:06] <samcv> ah nice

[18:06] <lizmat> m: dd Endian.^enum_values

[18:06] <camelia> rakudo-moar 011c6f11d: OUTPUT: «Hash element = {:big-endian(2), :little-endian(1), :native-endian(0)}␤»

[18:07] <samcv> i always wanted to read a blob as an int

[18:07] <samcv> well actually whichever bits i wanted

[18:07] <samcv> arbitrary bits

[18:07] <samcv> but mostly just as byte or multibyte numbers

[18:07] <lizmat> well, this is byte level, not bit level

[18:08] <lizmat> or actually, element level, as the offset indicates the element in the underlying buf

[18:08] <lizmat> *not* byte offset

[18:08] <lizmat> not sure I like that, but that's the way it is currently implemented

[18:09] <nine> lizmat: you're the first one to try it on anything but a uint8 buffer

[18:09] <samcv> so basically casts it as a 8bit array?

[18:09] <lizmat> m: say Blob[uint16].new(256).read-int8(0,little-endian)  # should probably be specific

[18:09] <camelia> rakudo-moar 011c6f11d: OUTPUT: «0␤»

[18:10] <lizmat> nine: actually, that's a good point

[18:10] <lizmat> the spec only specifies methods for blob8/buf8

[18:11] <nine> Which probably is the most natural representation of a mixed size memory region

[18:11] <nine> mixed element size

[18:12] <lizmat> ok, that simplifies matters a bit  :-)

[18:13] *** pmurias left
[18:16] *** cognominal left
[18:17] *** cognominal joined
[18:18] *** p6bannerbot sets mode: +v cognominal

[18:19] *** cognomin_ joined
[18:20] *** p6bannerbot sets mode: +v cognomin_

[18:21] *** cognominal left
[18:23] *** cognomin_ left
[18:45] * lizmat is having a tough time mixing in read-int/write-int just into the blob8/buf8 roles

[18:46] *** AlexDaniel joined
[18:46] *** p6bannerbot sets mode: +v AlexDaniel

[18:52] *** cognominal joined
[18:53] *** p6bannerbot sets mode: +v cognominal

[19:02] * lizmat gives up for now

[19:16] *** sivoais left
[19:22] *** cognomin_ joined
[19:23] *** p6bannerbot sets mode: +v cognomin_

[19:25] *** cognominal left
[19:27] *** cognomin_ left
[19:32] *** sivoais joined
[19:32] *** p6bannerbot sets mode: +v sivoais

[20:02] <lizmat> feels like I'm moving into "here be dragons" area:

[20:02] <lizmat> m: my uint64 $a = 9223372036854775807; say $a; say $a.fmt("%x")

[20:02] <camelia> rakudo-moar 011c6f11d: OUTPUT: «9223372036854775807␤7fffffffffffffff␤»

[20:02] <lizmat> m: my uint64 $a = 9223372036854775808; say $a; say $a.fmt("%x")

[20:02] <camelia> rakudo-moar 011c6f11d: OUTPUT: «-9223372036854775808␤-8000000000000000␤»

[20:02] <lizmat> first of all: that should not be negative

[20:02] <lizmat> secondly: wtf with the .fmt("%x") ???

[20:03] <lizmat> ah, that's actually correct

[20:03] <lizmat> no, why the - ???

[20:05] <lizmat> m: my int8 $a = 255; say $a; say $a.fmt("%x")  # is this to be expected?   I would have expected "ff" ?

[20:05] <camelia> rakudo-moar 011c6f11d: OUTPUT: «-1␤-1␤»

[20:07] *** sivoais left
[20:22] *** sivoais joined
[20:22] *** p6bannerbot sets mode: +v sivoais

[20:23] *** sivoais left
[20:40] <Geth> ¦ rakudo/cur-candidates: 709 commits pushed by 26 authors

[20:40] <Geth> ¦ rakudo/cur-candidates: review: https://github.com/rakudo/rakudo/compare/3999d753c3d7...d41bc6dd2452

[21:25] *** cognominal joined
[21:26] *** p6bannerbot sets mode: +v cognominal

[21:32] *** pmurias joined
[21:32] *** p6bannerbot sets mode: +v pmurias

[21:34] <AlexDaniel> releasable6: status

[21:34] <releasable6> AlexDaniel, Next release in ≈3 days and ≈21 hours. 4 blockers. 0 out of 38 commits logged

[21:34] <releasable6> AlexDaniel, Details: https://gist.github.com/04e24e6347a0239bb0961772be51c416

[21:36] *** robertle left
[21:41] *** pmurias left
[21:42] <gfldex> m: given True { when :so { say 'outtahere' }; say 'not saying!'; CONTROL { default { say .^name; .resume } } }

[21:42] <camelia> rakudo-moar 011c6f11d: OUTPUT: «outtahere␤»

[21:42] <gfldex> m: given True { when :so { say 'outtahere' }; say 'not saying!'; CONTROL { default { say .^name; .resume } } }

[21:42] <camelia> rakudo-moar 011c6f11d: OUTPUT: «outtahere␤CX::Succeed␤not saying!␤»

[21:42] <gfldex> please not the flapping ^^^

[21:42] <gfldex> *note

[21:43] *** pmurias joined
[21:43] *** p6bannerbot sets mode: +v pmurias

[21:45] <lizmat> gfldex: flapping confirmed

[21:45] <lizmat> and I'm not seeing any potential for a race there

[21:46] <gfldex> filed as #2538

[21:47] * gfldex tries not to dream of flapping bugs

[21:47] *** xlat left
[21:53] <lucasb> R#2538

[22:06] <Geth> ¦ roast: ee604e4bc4 | (Elizabeth Mattijsen)++ | S03-buf/read-int8.t

[22:06] <Geth> ¦ roast: All possible read-int tests

[22:06] <Geth> ¦ roast: 

[22:06] <Geth> ¦ roast: With quite a lot of fails still, caused by 2 reasons:

[22:06] <Geth> ¦ roast: 

[22:06] <Geth> ¦ roast:   uint64 is not a uint:

[22:06] <Geth> ¦ roast:     my uint64 $a = 0xffff_ffff_ffff_ffff; say $a   # -1 instead of 2**63 - 1

[22:06] <Geth> ¦ roast: 

[22:06] <Geth> ¦ roast:   read-intx() does not extend sign bit:

[22:06] <Geth> ¦ roast:     dd blob8.new(255).read-int8(0)   # 255 instead of -1

[22:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ee604e4bc4

[22:07] <Geth> ¦ roast: 1a8e22df51 | (Elizabeth Mattijsen)++ | 2 files

[22:07] <Geth> ¦ roast: Change name of file: not just about int8

[22:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1a8e22df51

[22:10] <Geth> ¦ roast: 816f89299e | (Elizabeth Mattijsen)++ | S03-buf/read-int.t

[22:10] <Geth> ¦ roast: Add some comments

[22:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/816f89299e

[22:10] <lizmat> afk&

[22:36] <Geth> ¦ roast: 5824d79954 | (Timo Paulssen)++ | S17-supply/syntax.t

[22:36] <Geth> ¦ roast: add tests for "last" in whenever blocks

[22:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5824d79954

[22:46] <timotimo> e: use MONKEY; EVAL qq⟨class Test \{ { 'has $.attr_' ~ $_ ~ ';\n' for ^100_000 } \}.new ⟩

[22:46] <evalable6> timotimo, rakudo-moar 011c6f11d: OUTPUT: «Use of Nil in string context␤  in block <unit> at /tmp/NthM6XedvL line 1␤»

[22:47] <timotimo> e: use MONKEY; say qq⟨class Test \{ { 'has $.attr_' ~ $_ ~ ';\n' for ^100_000 } \}.new ⟩

[22:47] <evalable6> timotimo, rakudo-moar 011c6f11d: OUTPUT: «Use of Nil in string context␤class Test {  }.new ␤  in block <unit> at /tmp/Z62Q3YHy7S line 1␤»

[22:47] <timotimo> e: use MONKEY; say qq⟨class Test \{ { join "", do 'has $.attr_' ~ $_ ~ ';\n' for ^100_000 } \}.new ⟩

[22:47] <timotimo> e: use MONKEY; EVAL qq⟨class Test \{ { join "", do 'has $.attr_' ~ $_ ~ ';\n' for ^100_000 } \}.new ⟩

[22:48] <evalable6> timotimo, rakudo-moar 011c6f11d: OUTPUT: «class Test { has $.attr_0;\nhas $.attr_1;\nhas $.attr_2;\nhas $.attr_3;\nhas $.attr_4;\nha…»

[22:48] <evalable6> timotimo, rakudo-moar 011c6f11d: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /home/bisectable/git/wh…»

[22:48] <evalable6> timotimo, Full output: https://gist.github.com/29d13d7588d4cdc1e35233f4ae924e3a

[22:48] <evalable6> timotimo, Full output: https://gist.github.com/22af171b5ea746e1b71f0e9dda032b2c

[22:53] <timotimo> oh, that \n became literal

[22:53] <timotimo> e: use MONKEY; EVAL qq⟨class Test \{ { join ";\n", do 'has $.attr_' ~ $_ for ^100_000 } \}.new ⟩

[22:54] <timotimo> m: say 2 ** 16 / 8

[22:54] <camelia> rakudo-moar 011c6f11d: OUTPUT: «8192␤»

[22:54] <evalable6> timotimo, rakudo-moar 011c6f11d: OUTPUT: «(signal SIGHUP) «timed out after 25 seconds»»

[22:54] <timotimo> e: use MONKEY; EVAL qq⟨class Test \{ { join ";\n", do 'has $.attr_' ~ $_ for ^10_000 } \}.new ⟩

[22:54] <evalable6> timotimo, rakudo-moar 011c6f11d: OUTPUT: «»

[23:05] *** pmurias left
[23:13] *** ufobat joined
[23:14] *** p6bannerbot sets mode: +v ufobat

[23:43] *** cognominal left
[23:43] *** cognominal joined
[23:44] *** p6bannerbot sets mode: +v cognominal

[23:45] *** SqrtNegInf left
[23:47] *** cognomin_ joined
[23:48] *** p6bannerbot sets mode: +v cognomin_

[23:49] *** cognominal left
[23:51] *** cognomin_ left
[23:53] *** SqrtNegInf joined
[23:54] *** p6bannerbot sets mode: +v SqrtNegInf

