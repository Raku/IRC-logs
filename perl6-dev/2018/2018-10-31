[00:05] *** j3nnn1 left
[00:10] *** cognominal-p6 left
[00:55] <timotimo> I had hoped to look into problems with the heap snapshot profiler, but I just basically killed my pc

[01:00] <MasterDuke> timotimo: do you know what code was being used to generate the problem profile?

[01:02] <timotimo> no

[01:32] *** cognominal-p6 joined
[01:32] *** p6bannerbot sets mode: +v cognominal-p6

[01:48] *** cognominal-p6 left
[01:49] *** cognominal-p6 joined
[01:49] *** p6bannerbot sets mode: +v cognominal-p6

[02:05] *** leont left
[03:22] <AlexDaniel> greppable6: throws-like\s+['"q｢]

[03:22] <greppable6> AlexDaniel, 4 lines, 3 modules: https://gist.github.com/b4117c92ca26fd96b29e1f6a6cea2dca

[03:48] *** MasterDuke left
[07:20] *** ufobat joined
[07:20] *** p6bannerbot sets mode: +v ufobat

[07:38] *** dct joined
[07:38] *** p6bannerbot sets mode: +v dct

[07:49] *** dct left
[08:25] *** robertle joined
[08:26] *** p6bannerbot sets mode: +v robertle

[09:06] *** ufobat left
[09:13] *** ilmari_ left
[09:13] *** tyil[m] left
[09:13] *** CIAvash left
[09:13] *** AlexDaniel` left
[09:24] *** AlexDaniel` joined
[09:24] *** p6bannerbot sets mode: +v AlexDaniel`

[09:44] *** tyil[m] joined
[09:44] *** ilmari_ joined
[09:44] *** p6bannerbot sets mode: +v tyil[m]

[09:44] *** p6bannerbot sets mode: +v ilmari_

[09:44] *** CIAvash joined
[09:44] *** p6bannerbot sets mode: +v CIAvash

[11:17] *** Zoffix joined
[11:17] *** p6bannerbot sets mode: +v Zoffix

[11:21] <Zoffix> Perl 6 Advent Calendar 2018 Call for Authors: https://perl6.party/post/Perl-6-Advent-Calendar-2018--Call-for-Authors

[11:24] *** |Tux| left
[11:26] <lizmat> m: class Point { has $.x; has $.y; method new($x,$y) { self.bless(:$x,:$y) } }; say Point.new(42,66).perl

[11:26] <camelia> rakudo-moar 266af373d: OUTPUT: «Point.new(x => 42, y => 66)␤»

[11:26] <lizmat> that seems LTA to me...

[11:27] <Zoffix> heh :)

[11:30] <lizmat> R#2448

[11:30] <synopsebot> R#2448 [open]: https://github.com/rakudo/rakudo/issues/2448 Custom .new method is not reflected in standard .perl

[11:30] <lizmat> m: class Point { has $.x; has $.y; method new($x,$y) { self.bless(:$x,:$y) } }; say Point.new(42,66)

[11:30] <camelia> rakudo-moar 266af373d: OUTPUT: «Point.new(x => 42, y => 66)␤»

[11:30] <lizmat> I guess .gist just falls back to .perl

[11:31] <lizmat> ah, yes it does

[11:32] *** |Tux| joined
[11:33] *** p6bannerbot sets mode: +v |Tux|

[11:36] <Geth> ¦ rakudo: lizmat self-assigned Nested Coercers? https://github.com/rakudo/rakudo/issues/2427

[11:37] <Geth> ¦ rakudo: lizmat self-unassigned Nested Coercers? https://github.com/rakudo/rakudo/issues/2427

[11:37] <lizmat> oops

[11:37] <Geth> ¦ rakudo: lizmat self-assigned CompUnit...load($key, :since($instant)) not working https://github.com/rakudo/rakudo/issues/2428

[11:37] <Geth> ¦ rakudo: lizmat self-unassigned CompUnit...load($key, :since($instant)) not working https://github.com/rakudo/rakudo/issues/2428

[11:37] <lizmat> ./me should learn how to click

[11:37] <Geth> ¦ rakudo: lizmat self-assigned Custom .new method is not reflected in standard .perl https://github.com/rakudo/rakudo/issues/2448

[12:03] <lizmat> Files=1255, Tests=76391, 337 wallclock secs (15.83 usr  5.25 sys + 2370.09 cusr 228.58 csys = 2619.75 CPU)

[12:12] *** Zoffix left
[12:13] <Geth> ¦ rakudo: adc9683773 | (Elizabeth Mattijsen)++ | src/core/Mu.pm6

[12:13] <Geth> ¦ rakudo: Don't return standard .perl for classes with custom .new

[12:13] <Geth> ¦ rakudo: 

[12:13] <Geth> ¦ rakudo: - also make code more idiomatic Perl 6

[12:13] <Geth> ¦ rakudo: - return "Class.new(...)" for now with custom new

[12:13] <Geth> ¦ rakudo: - step 1 in fixing R#2448

[12:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/adc9683773

[12:13] <synopsebot> R#2448 [open]: https://github.com/rakudo/rakudo/issues/2448 Custom .new method is not reflected in standard .perl

[12:36] *** Tux__ joined
[12:36] *** |Tux| left
[12:37] *** p6bannerbot sets mode: +v Tux__

[12:43] *** leont joined
[12:44] *** p6bannerbot sets mode: +v leont

[12:49] *** Tux__ is now known as |Tux|

[13:03] *** j3nnn1 joined
[13:03] *** p6bannerbot sets mode: +v j3nnn1

[13:10] *** lizmat left
[13:16] *** travis-ci joined
[13:16] *** p6bannerbot sets mode: +v travis-ci

[13:16] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Don't return standard .perl for classes with custom .new

[13:16] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/448817396 https://github.com/rakudo/rakudo/compare/052067fd1387...adc9683773ff

[13:16] *** travis-ci left
[13:17] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[13:21] <geekosaur> some tests were aparently relying on the stock .perl on Failure

[13:22] <geekosaur> t/02-rakudo/dd.t                                              (Wstat: 256 Tests: 2 Failed: 1)

[13:24] *** lizmat joined
[13:24] *** p6bannerbot sets mode: +v lizmat

[13:32] *** ufobat joined
[13:33] *** p6bannerbot sets mode: +v ufobat

[13:54] <SqrtNegInf> Like Xliff, I'm seeing a segfault (in a previously reliable program).  Hard to golf, but does go away with MVM_SPESH_OSR_DISABLE=1

[13:55] <SqrtNegInf> Here's a gist with possibly useful info: https://gist.github.com/SqrtNegInf/2b0ccf921e2c5b529432555c74ece006

[13:57] *** dogbert17 joined
[13:57] *** p6bannerbot sets mode: +v dogbert17

[14:27] *** SourceBaby joined
[14:27] *** ChanServ sets mode: +v SourceBaby

[14:27] *** Zoffix joined
[14:27] *** p6bannerbot sets mode: +v Zoffix

[14:28] *** p6bannerbot sets mode: +v SourceBaby

[14:37] <Zoffix> c: HEAD,HEAD~1 class Foo { has $.a = 1; has $.b = 2; has $.c = 3; has $.d = 4; method new { self.bless } }; dd Foo.new; say Foo.new

[14:37] <committable6> Zoffix, ¦HEAD(adc9683): «Foo.new(...)␤Foo.new(...)␤» ¦HEAD~1: «Foo.new(a => 1, b => 2, c => 3, d => 4)␤Foo.new(a => 1, b => 2, c => 3, d => 4)␤»

[14:38] <Zoffix> That gonna piss people right off if they're forced to implement custom .gist/.perl just to dump the guts of an object with custom .new

[14:43] *** Zoffix left
[14:46] *** |Tux| left
[14:50] *** AlexDaniel left
[14:54] *** |Tux| joined
[14:54] *** p6bannerbot sets mode: +v |Tux|

[14:59] <dogbert17> ZOFFLOP: t/spec/MISC/bug-coverage-stress-6.d.t - Unhandled exception in code scheduled on thread 4 - continuationinvoke expects an MVMContinuation

[14:59] <timotimo> i'm not happy about that either ... i'd hope .perl is a "best effort" at giving you something you can eval to get the object back

[15:00] *** buggable left
[15:01] *** buggable joined
[15:01] *** ChanServ sets mode: +v buggable

[15:01] <timotimo> how about we dump it like do { $_ = Foo.new; .a = 1; .b = 2; .c = 3; .d = 4; .self }

[15:01] *** p6bannerbot sets mode: +v buggable

[15:05] *** Zoffix joined
[15:05] *** p6bannerbot sets mode: +v Zoffix

[15:06] <Zoffix> timotimo: that's just a more convoluted way to dump a .new, which still doesn't work because in my example attributes aren't `is rw`

[15:06] *** brrt joined
[15:06] <Zoffix> Maybe dump all attributes like before, but stick a stub before them if there is a custom .new

[15:06] <Zoffix> So it'd be `Foo.new(…, a => 1, b => 2, c => 3, d => 4)

[15:06] <Zoffix> `

[15:06] *** p6bannerbot sets mode: +v brrt

[15:07] <Zoffix> m: 'Foo.new(…, a => 1, b => 2, c => 3, d => 4)'.EVAL

[15:07] <camelia> rakudo-moar 266af373d: OUTPUT: «5===SORRY!5=== Error while compiling /home/camelia/EVAL_0␤Undeclared name:␤    Foo used at line 1␤␤»

[15:07] <timotimo> damn, you're right

[15:07] <Zoffix> e: 'class Foo {}; Foo.new(…, a => 1, b => 2, c => 3, d => 4)'.EVAL

[15:07] <evalable6> Zoffix, rakudo-moar adc968377: OUTPUT: «(exit code 1) Stub code executed␤  in block <unit> at EVAL_0 line 1␤  in block <unit> at /tmp/GhtJ7igJNq line 1␤␤»

[15:07] <timotimo> about the "rw" attributes

[15:07] <Zoffix> So it still dies on .EVAL, because we've no idea how the custom `.new` works, but it still shows all the info for debugging aid

[15:07] <Zoffix> and keeps `infix:<eqv>` working

[15:08] <timotimo> that sounds like a good compromise at first glance

[15:09] <timotimo> can we somehow get a better error message than just "stub code executed"? … would take an argument, so a word or two there could be nice

[15:11] <Zoffix> e: 'class Foo {}; Foo.new((… "CAN HAS CUSTOM .PERL TO GO WITH CUSTOM .new?"), a => 1, b => 2, c => 3, d => 4)'.EVAL

[15:11] <evalable6> Zoffix, rakudo-moar adc968377: OUTPUT: «(exit code 1) CAN HAS CUSTOM .PERL TO GO WITH CUSTOM .new?␤  in block <unit> at EVAL_0 line 1␤  in block <unit> at /tmp/bHVJvJrlhE line 1␤␤»

[15:11] <Zoffix> ehehe

[15:20] *** fake_space_whale joined
[15:21] *** p6bannerbot sets mode: +v fake_space_whale

[15:22] *** Zoffix left
[15:22] <|Tux|> Rakudo version 2018.10-30-gadc968377 - MoarVM version 2018.10-26-g318e1ec55

[15:22] <|Tux|> csv-test-xs-20      0.424 -  0.425

[15:22] <|Tux|> test-t --race       0.788 -  0.850

[15:22] <|Tux|> csv-ip5xs           0.894 -  0.959

[15:22] <|Tux|> test-t              1.671 -  1.699

[15:22] <|Tux|> csv-ip5xs-20        7.124 -  7.412

[15:22] <|Tux|> test                7.970 -  8.403

[15:22] <|Tux|> test-t-20 --race    9.870 - 10.129

[15:22] <|Tux|> csv-parser         20.582 - 21.061

[15:22] <|Tux|> test-t-20          29.168 - 29.870

[15:23] <|Tux|> back to normal

[15:54] <dogbert17> 1.671, now we're talking :-)

[16:03] <jnthn> I think the default `.perl` for objects should assume the default construction interface, and if you make a custom `new` and you care about round-tripping then it's on you to write a custom `method perl` to go with it

[16:03] <jnthn> Alternatively, dump with `.bless` instead of `.new` :)

[16:17] *** robertle left
[16:18] *** AlexDaniel joined
[16:18] *** p6bannerbot sets mode: +v AlexDaniel

[16:28] <Geth> ¦ roast: 4ae2c6a940 | (Zoffix Znet)++ | 2 files

[16:28] <Geth> ¦ roast: SAP role multi dispatch test

[16:28] <Geth> ¦ roast: 

[16:28] <Geth> ¦ roast: The test relies on side-effects from `where` clauses which

[16:28] <Geth> ¦ roast: is an unsupported feature that works in Rakudo by accident.

[16:28] <Geth> ¦ roast: 

[16:28] <Geth> ¦ roast: I don't immediatelly see a way to rewrite that test to not use

[16:28] <Geth> ¦ roast: side effects from `where`, so shoving it to SAP.

[16:28] <Geth> ¦ roast: 

[16:28] <Geth> ¦ roast: Closes https://github.com/perl6/6.d-prep/issues/1

[16:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4ae2c6a940

[16:29] *** Zoffix joined
[16:29] *** p6bannerbot sets mode: +v Zoffix

[16:30] <Zoffix> .tell AlexDaniel was the async sock native descriptor reverted? There's S#490 . Wondering if it needs to be closed now.

[16:30] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[16:30] <synopsebot> S#490 [open]: https://github.com/perl6/roast/issues/490 Need spec of .native-descriptor for async sockets 

[16:30] <AlexDaniel> .

[16:30] <yoleaux> 16:30Z <Zoffix> AlexDaniel: was the async sock native descriptor reverted? There's S#490 . Wondering if it needs to be closed now.

[16:30] <AlexDaniel> it was reverted

[16:30] <AlexDaniel> rakudo ticket: https://github.com/rakudo/rakudo/issues/2437

[16:32] <Zoffix> thanks.

[16:32] *** Zoffix left
[16:32] *** brrt left
[16:42] <Geth> ¦ 6.d-prep: 59c255e672 | (Zoffix Znet)++ | 2 files

[16:42] <Geth> ¦ 6.d-prep: All planed features have been implemented

[16:42] <Geth> ¦ 6.d-prep: 

[16:42] <Geth> ¦ 6.d-prep: The remaining items are a better impl of sunk `start`, which

[16:42] <Geth> ¦ 6.d-prep: jnthn++ promised to do this week as well as de-dynamification

[16:42] <Geth> ¦ 6.d-prep: of `$_` variable, which isn't making it to 6.d on language-level,

[16:42] <Geth> ¦ 6.d-prep: but we cleaned up 6.d spec to allow for its preview implementation

[16:42] <Geth> ¦ 6.d-prep: in Rakudo under 6.d language.

[16:42] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/59c255e672

[16:42] <Geth> ¦ 6.d-prep: 273a2465bc | (Zoffix Znet)++ | TODO/README.md

[16:42] <Geth> ¦ 6.d-prep: missing plans in subtests has been fixed

[16:42] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/273a2465bc

[16:51] <[Coke]> Zoffix++ again for all the 6.d work

[16:51] <yoleaux> 30 Oct 2018 01:24Z <tbrowder___> [Coke]: are the dates for TPC::NA 2019 decided yet?

[16:51] <yoleaux> 30 Oct 2018 10:11Z <tbrowder___> [Coke]: do you know dates for TPC::NA 2019?

[16:51] <[Coke]> Yes. Let me find the blog post.

[16:52] <[Coke]> .tell tbrowder___ https://perlconference.us/tpc-2019-pit/

[16:52] <yoleaux> [Coke]: I'll pass your message to tbrowder___.

[16:52] <[Coke]> this was announced during the last yapc before it ended.

[16:54] <jnthn> Yup, I'll work on those two tomorrow :)

[16:54] <jnthn> I don't really know what lexical $_ would look like in the spec. Maybe a test that CALLER::<$_> doesn't find anything.

[16:57] *** Zoffix joined
[16:57] *** p6bannerbot sets mode: +v Zoffix

[16:57] <Zoffix> .tell lizmat a friendly reminder about changelogging set ops for 6.d release, if you have the time: https://github.com/perl6/6.d-prep/blob/master/ChangeLog.md#new-behaviors

[16:57] <yoleaux> Zoffix: I'll pass your message to lizmat.

[16:58] *** Zoffix left
[17:01] <japhb> [Coke]: Oooh, a TPC location I might be able to attend.  That would be a nice change.

[17:13] <[Coke]> I am currently planning on driving.

[17:29] <AlexDaniel> buggable: 6.d

[17:29] <buggable> AlexDaniel, Diwali is in 6 days, which is 5 days, 6 hours, 30 minutes, and 23 seconds. Need to changelog 999 commits per day (6997/week). Need release brochure. Still have 2 TODO features costing 8 hours. Still have 0.3 policies to write.

[17:29] <AlexDaniel> buggable: d

[17:29] <buggable> AlexDaniel, Diwali is in 6 days, which is 5 days, 6 hours, 30 minutes, and 19 seconds. Need to changelog 999 commits per day (6997/week). Need release brochure. Still have 2 TODO features costing 8 hours. Still have 0.3 policies to write.

[17:29] <AlexDaniel> huggable:: d

[17:29] <huggable> AlexDaniel, nothing found

[17:29] <AlexDaniel> huggable: d

[17:29] <huggable> AlexDaniel, https://gist.github.com/AlexDaniel/3296f8cbc5dcc9ca55272114f25d5087#file-bisected

[17:35] <AlexDaniel> Zoffix: I filed this ticket: https://github.com/rakudo/rakudo/issues/2451

[17:35] <AlexDaniel> all these are LHF in my opinion, so others can help easily

[17:47] <Geth> ¦ star/2018.10: 806c78abcd | (Steve Mynott)++ | docs/perl6intro.pdf

[17:47] <Geth> ¦ star/2018.10: new version of perl6intro.pdf

[17:47] <Geth> ¦ star/2018.10: review: https://github.com/rakudo/star/commit/806c78abcd

[17:56] *** cognominal-p6 left
[17:56] <AlexDaniel> Zoffix: https://github.com/perl6/whateverable/issues/345

[17:57] <Geth> ¦ star/2018.10: 9966bcb60b | (Steve Mynott)++ | docs/announce/2018.10.md

[17:57] <Geth> ¦ star/2018.10: mention JS backend and 6pad

[17:57] <Geth> ¦ star/2018.10: review: https://github.com/rakudo/star/commit/9966bcb60b

[17:58] <AlexDaniel> stmuk_++

[17:58] <AlexDaniel> stmuk_: consider linking to 6pad: https://perl6.github.io/6pad/

[17:59] <stmuk_>  Good Idea!

[18:01] <Geth> ¦ star/2018.10: 2b673d6a6a | (Steve Mynott)++ | docs/announce/2018.10.md

[18:01] <Geth> ¦ star/2018.10: AlexDaniel++ 6pad link

[18:01] <Geth> ¦ star/2018.10: review: https://github.com/rakudo/star/commit/2b673d6a6a

[18:10] <stmuk_> is "stage parse" slower now than a few releases back? is it my imagination?

[18:11] <timotimo> maybe we should add a tiny module to Rakudo::Star that just launches a tiny web server that hosts a 6pad - or does it also work off of file:// ?

[18:13] <stmuk_> that's not a bad idea

[18:23] *** cognominal-p6 joined
[18:24] *** p6bannerbot sets mode: +v cognominal-p6

[18:38] *** cognominal-p6 left
[18:38] *** cognominal-p6 joined
[18:39] *** p6bannerbot sets mode: +v cognominal-p6

[19:01] *** fake_space_whale left
[19:16] *** patrickb joined
[19:16] *** p6bannerbot sets mode: +v patrickb

[19:34] <Geth> ¦ rakudo: 20d50e071d | (Elizabeth Mattijsen)++ | src/core/Mu.pm6

[19:34] <Geth> ¦ rakudo: Adjust default .perl for custom .new

[19:34] <Geth> ¦ rakudo: 

[19:34] <Geth> ¦ rakudo: - instead of trying to be smart, be really stupid

[19:34] <Geth> ¦ rakudo: - if a class has a .new, it won't most likely not have a custom .bless

[19:34] <Geth> ¦ rakudo: - so just change the name of the method being called to "bless"

[19:34] <Geth> ¦ rakudo: - fixes R#2448 and R@2449

[19:34] <synopsebot> R#2448 [open]: https://github.com/rakudo/rakudo/issues/2448 Custom .new method is not reflected in standard .perl

[19:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/20d50e071d

[19:35] <lizmat> hmmm double negatives

[19:35] <yoleaux> 16:57Z <Zoffix> lizmat: a friendly reminder about changelogging set ops for 6.d release, if you have the time: https://github.com/perl6/6.d-prep/blob/master/ChangeLog.md#new-behaviors

[19:35] <lizmat> Zoffix: noted

[19:36] <Geth> ¦ roast: c13551e549 | (Elizabeth Mattijsen)++ | S06-advanced/callframe.t

[19:36] <Geth> ¦ roast: Fix overeager test for R#2448 / R#2449

[19:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c13551e549

[19:36] <synopsebot> R#2448 [open]: https://github.com/rakudo/rakudo/issues/2448 Custom .new method is not reflected in standard .perl

[19:36] <synopsebot> R#2449 [open]: https://github.com/rakudo/rakudo/issues/2449 [⚠ blocker ⚠] `eqv` with classes that have custom `.new` and no `.perl` is now always True

[19:38] <Geth> ¦ roast/6.c-errata: 5218a83d3b | (Elizabeth Mattijsen)++ | S06-advanced/callframe.t

[19:38] <Geth> ¦ roast/6.c-errata: Fix overeager test for R#2448 / R#2449

[19:38] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/5218a83d3b

[19:38] <synopsebot> R#2448 [open]: https://github.com/rakudo/rakudo/issues/2448 Custom .new method is not reflected in standard .perl

[19:38] <synopsebot> R#2449 [open]: https://github.com/rakudo/rakudo/issues/2449 [⚠ blocker ⚠] `eqv` with classes that have custom `.new` and no `.perl` is now always True

[19:42] <lizmat> Zoffix: re https://github.com/perl6/6.d-prep/blob/master/ChangeLog.md#new-behaviors , it looks to me we should drop the word "now" from all descriptions

[19:42] <tbrowder___> [Coke]: nowhere can i find exact dates, just “june”—

[19:43] *** Zoffix joined
[19:43] *** p6bannerbot sets mode: +v Zoffix

[19:43] <Zoffix> lizmat: +1

[19:44] <Geth> ¦ 6.d-prep: aaef945536 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | ChangeLog.md

[19:44] <Geth> ¦ 6.d-prep: Fix spello

[19:44] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/aaef945536

[19:44] <lizmat> Zoffix: ok, will do

[19:44] * Zoffix is slightly worried about that .perl -> .bless thing causing tough-to-notice bugs

[19:45] <lizmat> Zoffix: it's .new -> .bless

[19:45] <lizmat> the point of .perl is that it should roundtrip

[19:45] <lizmat> there has never been any guarantee about readability

[19:46] <lizmat> now, maybe we would need to make a more custom default .gist

[19:46] <Zoffix> lizmat: yeah, but by using .bless you're making an assumption `.new` doesn't do too much of useful stuff. So it'll work for cases where you're just using `.new` to take positionals instead of nameds, but will be a tough-to-spot bug if you do any sort of set up. For example Failure.new does some sort of setup

[19:46] <Zoffix> e: dd Failure.new: 'moews'

[19:46] <evalable6> Zoffix, rakudo-moar 20d50e071: OUTPUT: «Failure.bless(exception => X::AdHoc.new(payload => "moews"), backtrace => Backtrace.bless)␤»

[19:46] <Zoffix> m: say Failure.bless(exception => X::AdHoc.new(payload => "moews"), backtrace => Backtrace.bless)

[19:46] <camelia> rakudo-moar adc968377: OUTPUT: «No exception handler located for catch␤   at SETTING::src/core/Exception.pm6:412  (/home/camelia/rakudo-m-inst-2/share/perl6/runtime/CORE.setting.moarvm:print_exception)␤ from SETTING::src/core/Exception.pm6:469  (/home/camelia/rakudo-m-inst-2/sha…»

[19:47] <Zoffix> lizmat: ^ and now there is this weird error and would people even realize that they're getting .bless from .perl?

[19:48] <Zoffix> The point of .perl is that it should roundtrip, but it still doesn't roundtrip here. 

[19:48] <lizmat> well, that example wouldn't even work with .perl, on account of Backtrace.perl

[19:49] <Zoffix> The stub approach was the bestest one IMO. It just died and told you you had to provide a .perl

[19:49] <Zoffix> Well, stub + still listing attribute values, so you could still use it as debuging aid

[19:49] <lizmat> so: just add '...' if there's something weird going on ?

[19:50] <lizmat> still, using it as a debugging aid, why would it matter that it was .bless instead of .new ?

[19:50] <Zoffix> Yeah, like `Foo.new(…, attr1 => 42, attr2 => 100)` and timotimo pointed out that it could use a better error message than the default, so it'd prolly look like`Foo.new((… "custom method new requires implementation of custom .perl"), attr1 => 42, attr2 => 100)` or something

[19:51] <Zoffix> lizmat: it doesn't matter. The .bless is bad because it solves half the problem, while requiring user to notice they're getting a different .perl when they define a custom .new method

[19:52] <Zoffix> vs. just dying

[19:52] <lizmat> ok, lemme look at that again after I'm done with the 6.d Changelog stuff

[19:54] <Zoffix> e: class NuclearPowerPlant { has $!uranium; method new ($q) { self.bless: uranium => ($q > 1000 ?? 1000 !! $q) }; method power { say 42/$!uranium } }; NuclearPowerPlant.new(10000000000).perl.EVAL.power

[19:54] <evalable6> Zoffix, rakudo-moar 20d50e071: OUTPUT: «(exit code 1) Use of uninitialized value of type Any in numeric context␤  in method power …»

[19:54] <evalable6> Zoffix, Full output: https://gist.github.com/bd39208fb15106ccbcce279fb9e338b5

[19:54] <Zoffix> that vs. dying with "need custom .perl, bruh"

[19:57] * Zoffix &

[19:58] *** Zoffix left
[19:59] *** brrt joined
[20:00] *** p6bannerbot sets mode: +v brrt

[20:05] <Geth> ¦ 6.d-prep: b010f82a12 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | ChangeLog.md

[20:05] <Geth> ¦ 6.d-prep: Remove "now" where it was felt to be superfluous

[20:05] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/b010f82a12

[20:19] <Geth> ¦ 6.d-prep: 7dff0fcf8b | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | ChangeLog.md

[20:19] <Geth> ¦ 6.d-prep: Put all QuantHash stuff together

[20:19] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/7dff0fcf8b

[20:45] <lizmat> hmmm... I changed something in a src/core.d/... file

[20:45] <lizmat> and now even the "normal" setting is getting recompiled.  should it ?  feels to me that it shouldn't have to ?

[20:46] *** travis-ci joined
[20:46] *** p6bannerbot sets mode: +v travis-ci

[20:46] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Adjust default .perl for custom .new

[20:46] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/449026572 https://github.com/rakudo/rakudo/compare/adc9683773ff...20d50e071d40

[20:46] *** travis-ci left
[20:47] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[21:08] <lizmat> we still don't have a way to remove a sub from the 6.c setting in 6.d, right ?

[21:12] <Geth> ¦ rakudo: 4af55fb611 | (Elizabeth Mattijsen)++ | t/02-rakudo/dd.t

[21:12] <Geth> ¦ rakudo: Make Travis happy for now

[21:12] <Geth> ¦ rakudo: 

[21:12] <Geth> ¦ rakudo: Working on making this work more generally

[21:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4af55fb611

[21:45] *** Zoffix joined
[21:45] *** p6bannerbot sets mode: +v Zoffix

[21:49] <Zoffix> lizmat: it's even worse. You can't override, say, a single existing multi, because then it'd conflict with the one in 6.c. Also, overriding stuff in 6.d doesn't actually override it inside 6.c code. I think it basically works out to something like:   { multi six-c-stuff { ... };  { multi six-d-stuff { ... }; { user's-code } } }, so it's layered and you can only add-on. Here's how I deprecated the

[21:50] <Zoffix> `undefined`: https://github.com/rakudo/rakudo/blob/master/src/core.d/operators.pm6 but I couldn't override `infix:</>` for Nums to do IEEE stuff right, because I'd have to override ALL the `infix:</>` and anything that uses `/` inside 6.c core would not get the 6.d version still

[21:51] <lizmat> perhaps we need an "unproto"  :-)

[21:54] <Zoffix> :)

[22:06] <lizmat> m: class A { has $.a; method TWEAK() { $!a = !$!a } }; dd A.new(:a)   # not roundtripping

[22:06] <camelia> rakudo-moar 4af55fb61: OUTPUT: «A.new(a => Bool::False)␤»

[22:10] <Geth> ¦ rakudo: 8561d0ae56 | (Elizabeth Mattijsen)++ | src/core/Deprecations.pm6

[22:10] <Geth> ¦ rakudo: Make sure the :up of DEPRECATED gets handled correctly

[22:10] <Geth> ¦ rakudo: 

[22:10] <Geth> ¦ rakudo: There seems to be a scoping issue with $_ in the case of:

[22:10] <Geth> ¦ rakudo: 

[22:10] <Geth> ¦ rakudo:    foo = $_ with bar for ^10;

[22:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8561d0ae56

[22:10] <Geth> ¦ rakudo: 951303f9aa | (Elizabeth Mattijsen)++ | src/core.d/operators.pm6

[22:10] <Geth> ¦ rakudo: "Remove" (<+), ≼, (>+), ≽ from 6.d

[22:10] <Geth> ¦ rakudo: 

[22:10] <Geth> ¦ rakudo: Well, not really, actually.  But it won't work anymore and it will tell

[22:10] <Geth> ¦ rakudo: you what to use instead if you *do* try to use it.

[22:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/951303f9aa

[22:13] <Geth> ¦ roast: a5a3969588 | (Elizabeth Mattijsen)++ | S03-operators/set_precedes.t

[22:13] <Geth> ¦ roast: set_precedes tests only work in 6.c

[22:13] <Geth> ¦ roast: 

[22:13] <Geth> ¦ roast: And 'use v6' implies the most current, but that won't work anymore since

[22:13] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/951303f9aa

[22:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a5a3969588

[22:14] *** travis-ci joined
[22:14] *** p6bannerbot sets mode: +v travis-ci

[22:14] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make Travis happy for now

[22:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/449068866 https://github.com/rakudo/rakudo/compare/20d50e071d40...4af55fb61150

[22:14] *** travis-ci left
[22:16] <Geth> ¦ rakudo: c04d5b7780 | (Elizabeth Mattijsen)++ | src/core/Mu.pm6

[22:16] <Geth> ¦ rakudo: Return to the status quo wrt to Mu.perl

[22:16] <Geth> ¦ rakudo: 

[22:16] <Geth> ¦ rakudo: This turns out to be a hornet's nest.  Sorry to have stirred it.

[22:16] <Geth> ¦ rakudo: 

[22:16] <Geth> ¦ rakudo: This reverts adc96837 and 20d50e07

[22:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c04d5b7780

[22:25] <Zoffix> Oh yeah. Totally forgot about TWEAK and other of those methods.

[22:29] <Geth> ¦ rakudo: 4c05a0b13e | (Elizabeth Mattijsen)++ | t/02-rakudo/dd.t

[22:29] <Geth> ¦ rakudo: Revert "Make Travis happy for now"

[22:29] <Geth> ¦ rakudo: 

[22:29] <Geth> ¦ rakudo: This reverts commit 4af55fb61150e23c7ce15718cb5d103e8ccab6cd.

[22:29] <Geth> ¦ rakudo: 

[22:29] <Geth> ¦ rakudo: No longer needed.

[22:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4c05a0b13e

[22:38] *** brrt left
[22:41] <lizmat> Zoffix: will continue with ChangeLog tomorrow

[22:41] <lizmat> sleep&

[23:05] *** ufobat left
[23:05] *** ggoebel left
[23:17] *** travis-ci joined
[23:17] *** p6bannerbot sets mode: +v travis-ci

[23:17] <travis-ci> Rakudo build passed. Elizabeth Mattijsen '"Remove" (<+), ≼, (>+), ≽ from 6.d

[23:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/449092719 https://github.com/rakudo/rakudo/compare/4af55fb61150...951303f9aaec

[23:17] *** travis-ci left
[23:27] *** cognominal-p6 left
[23:52] *** cognominal-p6 joined
[23:52] *** MasterDuke joined
[23:52] *** p6bannerbot sets mode: +v MasterDuke

[23:53] *** p6bannerbot sets mode: +v cognominal-p6

[23:53] *** MasterDuke left
[23:53] *** MasterDuke joined
[23:53] *** herbert.freenode.net sets mode: +v MasterDuke

[23:53] *** p6bannerbot sets mode: +v MasterDuke

