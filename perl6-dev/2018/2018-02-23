[01:18] <Geth> ¦ roast/absolute-lib-paths-take2: dfe7430ded | (Nick Logan)++ | 265 files

[01:18] <Geth> ¦ roast/absolute-lib-paths-take2: Allow tests to be run outside of rakudo dir

[01:18] <Geth> ¦ roast/absolute-lib-paths-take2:

[01:18] <Geth> ¦ roast/absolute-lib-paths-take2: Absolutify lib paths and file paths using $?FILE.IO.parent(...),

[01:18] <Geth> ¦ roast/absolute-lib-paths-take2: since a test can know the file layout of its own repo but not the

[01:18] <Geth> ¦ roast/absolute-lib-paths-take2: cwd the user is invoking a test from.

[01:18] <Geth> ¦ roast/absolute-lib-paths-take2:

[01:18] <Geth> ¦ roast/absolute-lib-paths-take2: This allows you to install perl6, clone the roast anywhere you

[01:18] <Geth> ¦ roast/absolute-lib-paths-take2: <…commit message has 11 more lines…>

[01:18] <Geth> ¦ roast/absolute-lib-paths-take2: review: https://github.com/perl6/roast/commit/dfe7430ded

[01:18] <Geth> ¦ roast/absolute-lib-paths-take2: fb83b01d95 | (Nick Logan)++ | S11-modules/require.t

[01:19] <Geth> ¦ roast/absolute-lib-paths-take2: Revert "[v6.d REVIEW] Use preciser test routines"

[01:19] <Geth> ¦ roast/absolute-lib-paths-take2:

[01:19] <Geth> ¦ roast/absolute-lib-paths-take2: This reverts commit 6fa5f6481ffe2f6458e32087c1c9d209b056234c.

[01:19] <Geth> ¦ roast/absolute-lib-paths-take2:

[01:19] <Geth> ¦ roast/absolute-lib-paths-take2: `use "t/spec/packages"`, and hence Test::Util, cannot be used

[01:19] <Geth> ¦ roast/absolute-lib-paths-take2: here  because the 'can change directory and require a module'

[01:19] <Geth> ¦ roast/absolute-lib-paths-take2: test relies on t/spec/packages not being loaded.

[01:19] <Geth> ¦ roast/absolute-lib-paths-take2: review: https://github.com/perl6/roast/commit/fb83b01d95

[01:20] <Geth> ¦ roast: ugexe++ created pull request #390: Allow tests to be run outside of rakudo dir

[01:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/390

[02:55] <Geth> ¦ rakudo/release/2018.02.1: badec48118 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 3 files

[02:55] <Geth> ¦ rakudo/release/2018.02.1: Docs for the point release

[02:55] <Geth> ¦ rakudo/release/2018.02.1: review: https://github.com/rakudo/rakudo/commit/badec48118

[03:07] * Zoffix makes a wild guess that the problem is in JSON::Fast

[03:12] <AlexDaniel> sounds reasonable https://github.com/timo/json_fast/commit/d3dea8988b04c7d5aeb51b744e8390c663e710ef

[03:13] <Zoffix> 2018.02.24 zoffix@VirtualBox~$ perl6 -MJSON::Fast -e 'say from-json q|"\/"|'

[03:13] <Zoffix> \\/

[03:13] <Zoffix> 2018.02.24 zoffix@VirtualBox~$ perl -MMojo::JSON=from_json -wlE 'say from_json q|"\/"|'

[03:13] <Zoffix> /

[03:13] <Zoffix> bah: https://github.com/timo/json_fast/issues/36

[03:15] <Zoffix> .tell timotimo FWIW there's a possible regression in JSON::Fast vis-a-vis unescaping slashes: https://github.com/timo/json_fast/issues/36

[03:15] <yoleaux> Zoffix: I'll pass your message to timotimo.

[03:18] <AlexDaniel> what's the most appropriate place for the sakefile that I'm using to cut releases? Doesn't really fit into whateverable project because it's not related to the bot framework, I also hardly see it in the rakudo repo itself

[03:19] <Zoffix> huggable: shrug

[03:19] <huggable> Zoffix, ¯\_(ツ)_/¯

[03:19] <AlexDaniel> should I make an App::Releaser module or something?

[03:20] <Zoffix> If it's for cutting rakudo releases, why not stick it into rakudo repo?

[03:21] <AlexDaniel> heh… I guess that's a good point

[05:41] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1558: Speedup Rational.Str

[05:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1558

[06:06] <Geth> ¦ rakudo/release/2018.02.1: b656f6b1b1 | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[06:06] <Geth> ¦ rakudo/release/2018.02.1: [release] Bump VERSION to 2018.02.1

[06:06] <Geth> ¦ rakudo/release/2018.02.1: review: https://github.com/rakudo/rakudo/commit/b656f6b1b1

[06:08] <Geth> ¦ rakudo: dc0f06b500 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 3 files

[06:08] <Geth> ¦ rakudo: Docs for the point release

[06:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dc0f06b500

[06:09] <AlexDaniel> alright, that seems to be correct

[06:21] <AlexDaniel> p6lert: help

[06:21] <p6lert> AlexDaniel, https://github.com/perl6/alerts P6lert commands: [insta]?add ALERT, update ID ALERT, delete ID; ALERT format: ['severity:'\S+]? ['affects:['<-[\]]>+']']? ALERT_TEXT

[06:27] <AlexDaniel> p6lert: add severity:normal affects:[2018.02] Rakudo 2018.02 (note: no .1) was discovered to contain a bug which caused segfaults when using Whatever curries in topics of for/given statement modifiers. This is fixed in 2018.02.1 point release.

[06:27] <AlexDaniel> p6lert, add severity:normal affects:[2018.02] Rakudo 2018.02 (note: no .1) was discovered to contain a bug which caused segfaults when using Whatever curries in topics of for/given statement modifiers. This is fixed in 2018.02.1 point release.

[06:27] <AlexDaniel> well, I guess that doesn't work?

[06:27] <AlexDaniel> or I just don't have the rights :)

[09:50] <Geth> ¦ nqp/master: 4 commits pushed by pmurias++

[09:50] <Geth> ¦ nqp/master: 98fae8a3d5 | [js] Handle throwing a LAST control exception from 3rd argument of nqp::while

[09:50] <Geth> ¦ nqp/master: 033aeacee3 | [js] Fix --source-map

[09:50] <Geth> ¦ nqp/master: 7e10bd031b | [js] Fix overwriting the method cache when repossessing

[09:50] <Geth> ¦ nqp/master: 026286a181 | Check if the serialization context is changed after repossesion

[09:50] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/a850efd0587f...026286a181fa

[11:46] <Zoffix> AlexDaniel: right, no rights. If you have a stable IRC host I can add you to the list.

[11:46] <AlexDaniel> Zoffix: is the one AlexDaniel` has good enough?

[11:46] <AlexDaniel> yea it should be

[11:47] <AlexDaniel`> uh… am I even here?

[11:47] <AlexDaniel> yea

[11:47] <AlexDaniel> Zoffix: oh, but that's not the username you're talking about

[11:48] <AlexDaniel> then no I think

[11:48] <AlexDaniel> (like the one you register)

[11:49] <Zoffix> Right, I meant IRC *host*. Like perl6/zoffix

[11:50] <Zoffix> p6lert: add Rakudo compiler-only release 2018.02 (note: no .1) was discovered to contain a bug which caused segfaults when using Whatever curries in topics of for/given statement modifiers. This is fixed in 2018.02.1 point release.

[11:50] <p6lert> Zoffix, Added alert ID 4: https://alerts.perl6.org/alert/4

[11:51] <Zoffix> AlexDaniel++ # for cutting point release

[12:13] <|Tux|> Rakudo version 2018.02-25-gdc0f06b50 - MoarVM version 2018.02-6-g1849ae6d6

[12:13] <|Tux|> csv-test-xs-20      0.436 -  0.441

[12:14] <|Tux|> csv-ip5xs           0.807 -  0.833

[12:14] <|Tux|> test-t --race       1.089 -  1.101

[12:14] <|Tux|> test-t              2.619 -  2.657

[12:14] <|Tux|> csv-ip5xs-20        7.207 -  7.509

[12:14] <|Tux|> test                9.349 -  9.607

[12:14] <|Tux|> csv-parser         11.855 - 12.810

[12:14] <|Tux|> test-t-20 --race   16.361 - 16.716

[12:14] <|Tux|> test-t-20          46.417 - 46.681

[12:21] <Geth> ¦ rakudo: 008b9279ad | (Daniel Green)++ | src/core/Rational.pm

[12:21] <Geth> ¦ rakudo: Speedup Rational.Str

[12:21] <Geth> ¦ rakudo:

[12:21] <Geth> ¦ rakudo: By generating the fractional part two characters at a time instead of

[12:21] <Geth> ¦ rakudo: one.

[12:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/008b9279ad

[12:21] <Geth> ¦ rakudo: 6006e2f633 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Rational.pm

[12:21] <Geth> ¦ rakudo: Merge pull request #1558 from MasterDuke17/speedup_Rational.Str

[12:21] <Geth> ¦ rakudo:

[12:21] <Geth> ¦ rakudo: Speedup Rational.Str

[12:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6006e2f633

[12:38] <AlexDaniel> mst: can I have perl6 dev cloak?

[14:29] <timotimo> i'm having trouble building a test case for \/ that currently fails; what do i have to do?

[14:29] <yoleaux> 03:15Z <Zoffix> timotimo: FWIW there's a possible regression in JSON::Fast vis-a-vis unescaping slashes: https://github.com/timo/json_fast/issues/36

[15:23] <timotimo> what the heck, the code looks like it's been trying to replace \n with n and \b with b and all that for a while, how did this ever work

[15:31] <Zoffix> m: use JSON::Fast; use Test; is-deeply ｢"\/"｣.&from-json, ｢/｣, "backslashed slashes get unescaped"

[15:31] <camelia> rakudo-moar 6006e2f63: OUTPUT: «===SORRY!===␤Could not find JSON::Fast at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    CompUni…»

[15:31] <Zoffix> staar: use JSON::Fast; use Test; is-deeply ｢"\/"｣.&from-json, ｢/｣, "backslashed slashes get unescaped"

[15:31] <Zoffix> star: use JSON::Fast; use Test; is-deeply ｢"\/"｣.&from-json, ｢/｣, "backslashed slashes get unescaped"

[15:31] <camelia> star-m 2017.07: OUTPUT: «ok 1 - backslashed slashes get unescaped␤»

[15:31] <Zoffix> timotimo: ^

[15:33] <timotimo> i get "ok" locally now

[15:33] <timotimo> but i already got that with what's "master" on my github

[15:33] <timotimo> so i should just have released?

[15:44] <Zoffix> timotimo: my test fails for me even with master

[15:44] <Zoffix> This is the repo, right? https://github.com/timo/json_fast

[15:44] <timotimo> OK, let's see, i'ma push a branch in a tiny bit

[15:44] <timotimo> that's the one

[15:46] <Zoffix> Fails for me on fresh clone: https://gist.github.com/zoffixznet/47f686c949c19d48c787bfd3569b9e9c

[15:48] <timotimo> check the "escape-unescape-fixes" branch please

[15:48] <Zoffix> timotimo: passes in that branch

[15:48] <timotimo> good

[15:48] <timotimo> i believe i need even more tests

[15:52] <timotimo> and i need to stop using "" and '' in my tests to write out json literals

[15:54] <timotimo> especially in the escaping tests

[15:54] <timotimo> Zoffix: you think this is good for release perhaps?

[15:55] <Zoffix> I guess :) It does fix a critical bug :)P

[17:39] <Geth> ¦ nqp: 6269c85dcc | pmurias++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/SerializationReader.java

[17:39] <Geth> ¦ nqp: [jvm] Fix typo in comment

[17:39] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6269c85dcc

[17:39] <Geth> ¦ nqp: ca9da81087 | pmurias++ | 2 files

[17:39] <Geth> ¦ nqp: [js] Resolve object repossession conflicts

[17:39] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ca9da81087

[17:39] <Geth> ¦ nqp: a30610a7a7 | pmurias++ | src/vm/js/nqp-runtime/io.js

[17:40] <Geth> ¦ nqp: [js] Fix nqp::rmdir

[17:40] <Geth> ¦ nqp:

[17:40] <Geth> ¦ nqp: Make it ignore missing directories and throw a proper exception

[17:40] <Geth> ¦ nqp: for non-empty ones

[17:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a30610a7a7

[17:57] <travis-ci> NQP build failed. pmurias '[js] Fix nqp::rmdir

[17:57] <travis-ci> https://travis-ci.org/perl6/nqp/builds/345354504 https://github.com/perl6/nqp/compare/026286a181fa...a30610a7a75d

[18:27] <stmuk> is 2018.02.1 tagged? I don't see it

[18:29] <Zoffix> stmuk: yeah, it is. And I see the tag

[18:30] <japhb> Are the fixes on both the mainline and the branch?

[18:30] <Zoffix> "12 hours ago": https://i.imgur.com/IIMLnd4.png

[18:33] <stmuk> Zoffix: the VERSION file in rakudo master still says 2018.02

[18:38] <jnthn> japhb: The fix was committed in mainline, and was cherry-picked to a release branch, I believe. So yes.

[18:41] <japhb> jnthn: Ah good.

[18:43] <stmuk> apart from  b656f6

[18:43] <Zoffix> stmuk: yeah. I it was realeased off a branch. I guess it also needs to be merged to master?

[18:43] <Zoffix> AlexDaniel`: ping ^

[18:44] <japhb> .tell retupmoca Saw this while `zef install`ing my usual packages: ===> Extraction: Failed to find a META6.json file for JSON::JWT:ver<1.0>:auth<github:retupmoca> -- failure is likely

[18:44] <yoleaux> japhb: I'll pass your message to retupmoca.

[18:48] <Zoffix> m: dd :{:$_}

[18:48] <camelia> rakudo-moar 6006e2f63: OUTPUT: «-> ;; $_? is raw { #`(Block|59930128) ... }␤»

[18:48] <Zoffix> This is a bug, innit? That shouldn't ever be a Block

[18:48] <Zoffix> m: dd :{;}

[18:48] <camelia> rakudo-moar 6006e2f63: OUTPUT: «-> ;; $_? is raw { #`(Block|63574576) ... }␤»

[18:52] <TimToady> looks kinda like a bug to me; the $_ criterion was only supposed to be for disambiguating bare {} in cases where it's obviously intened as a block, like in: map { $_ => 1 }, ...

[18:52] <yoleaux> 21 Feb 2018 23:13Z <Zoffix> TimToady: would you like to weigh in on this Issue: https://github.com/rakudo/rakudo/issues/1552 [@LARRY][RFC] [@LARRY] Booliness of Zero-Denominator Rationals

[18:53] <Zoffix> Filed as R#1559

[18:53] <synopsebot> R#1559 [open]: https://github.com/rakudo/rakudo/issues/1559 :{ }   sometimes constructs a Block

[18:57] <TimToady> on the truthiness of nan rats, I can argue it both ways, but I'm inclined to think that the cost of checking the denominator is only when the numerator is already 0, which is usually not going to be the case, so I think the efficiency argument doesn't for making it True doesn't carry a lot of weight

[18:57] <TimToady> so maybe this morning I'm more in favor of Least Astonishment

[18:58] <TimToady> (assuming here that we want infinities to be true)

[18:58] <Zoffix> TimToady: Least Astonishment is zero-denominator Rats to be True?

[18:59] <TimToady> is 0/0 False, 1/0 True

[18:59] <Zoffix> oh

[19:00] <TimToady> if num is non-zero, it's always True, otherwise, actually, I guess we don't need to check denom if we want NaN to be falsey

[19:00] <japhb> Least astonishment would have ?NaN == ?(NaN.Rat), no?

[19:01] <TimToady> well, there are probably conflicting astonishments here

[19:01] <japhb> "conflicting astonishments" -- I like that phrase

[19:02] <Zoffix> +1 on False being "denominator is 0" and the rest is true

[19:02] <TimToady> anyway, I'm okay with a bit of inconsistency between num and rat

[19:03] <TimToady> there are no perfect number representations in computers anyway...

[19:03] <japhb> s/in computers//

[19:04] <TimToady> :D

[19:04] <TimToady> .oO(the first uninteresting integer)

[19:07] <japhb> Apropos of which, I find my brain enjoys numerically interesting clock times.  12:34, 12:36, 12:48, 11:11, 22:22, 10:01, that sort of thing.  But I suspect the clock times that I will find interesting are rather dense, because dangit, there's so many interesting numbers.

[19:11] <japhb> Speaking of which, 11:11

[19:12] <stmuk> 16:20 (dude!)

[19:12] <Zoffix> err @Zoffix[*-1] ~~ s/denominator/numerator/;

[19:13] <TimToady> nod, I actually read it that way :)

[19:16] <japhb> Latest Rakudo builds and zef installs all my usual stuff.  (This is an improvement, because a week ago it was segfaulting)

[19:17] * TimToady has to borrow a power snake this morning, sigh...

[19:18] <TimToady> .oO("Power tools, power tools, it's my favorite thing to use...")

[19:29] <Zoffix> m: dd <-42/-1>

[19:29] <camelia> rakudo-moar 6006e2f63: OUTPUT: «RatStr.new(42.0, "-42/-1")␤»

[19:29] <Zoffix> Would've thought that to make a regular Rat

[19:32] <japhb> m: dd < -42/-1 >

[19:32] <camelia> rakudo-moar 6006e2f63: OUTPUT: «RatStr.new(42.0, "-42/-1")␤»

[19:33] <japhb> m: dd <-42/1>

[19:33] <camelia> rakudo-moar 6006e2f63: OUTPUT: «-42.0␤»

[19:34] <Geth> ¦ nqp: b5da011768 | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/io/FileHandle.java

[19:34] <Geth> ¦ nqp: [JVM] Reset eof to false after seeking

[19:34] <Geth> ¦ nqp:

[19:34] <Geth> ¦ nqp: Fixes tests in S16-io/eof.t (https://github.com/rakudo/rakudo/issues/1322).

[19:34] <Geth> ¦ nqp:

[19:34] <Geth> ¦ nqp: After a call to seek the state of eof might very well have changed. Better

[19:34] <Geth> ¦ nqp: reset it to false so that it is properly checked the next time eof is tested.

[19:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b5da011768

[19:39] <gfldex> m: my @a = (<a b>, (1, 2)); dd @a[*;1..*];

[19:39] <gfldex> should that terminate?

[19:39] <camelia> rakudo-moar 6006e2f63: OUTPUT: «(timeout)»

[19:43] * Zoffix wonders if .Bool of allomorphs is actually explicitly specced

[19:43] <Zoffix> Don't see anything in S02-literals/allomorphic.t and they're using .Bool of numeric portion, but seemingly by accident

[19:43] <Zoffix> m: dd ?<0.0>, ?<0>, ?<0e0>, ?<0+0i >

[19:43] <camelia> rakudo-moar 6006e2f63: OUTPUT: «Bool::False␤Bool::False␤Bool::False␤Bool::False␤»

[19:44] <TimToady> I suspect preferring the numeric test is more betterer

[19:44] * Zoffix nods

[19:45] <Geth> ¦ rakudo: 748d1a57b9 | (Zoffix Znet)++ | src/core/Rational.pm

[19:45] <Geth> ¦ rakudo: Implement Rational.Bool

[19:45] <Geth> ¦ rakudo:

[19:45] <Geth> ¦ rakudo: Fixes R#1552 https://github.com/rakudo/rakudo/issues/1552

[19:45] <Geth> ¦ rakudo:

[19:45] <Geth> ¦ rakudo: Changes[^1] behaviour of zero-denominator rationals,

[19:45] <Geth> ¦ rakudo: making <0/0> be False. The rest remain as they were, except

[19:45] <synopsebot> R#1552 [open]: https://github.com/rakudo/rakudo/issues/1552 [@LARRY][RFC] Booliness of Zero-Denominator Rationals

[19:45] <Geth> ¦ rakudo: now likely perform slightly faster.

[19:46] <Geth> ¦ rakudo:

[19:46] <Geth> ¦ rakudo: [1] https://irclog.perlgeek.de/perl6-dev/2018-02-23#i_15851526

[19:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/748d1a57b9

[19:46] <Geth> ¦ roast: f82c984b43 | (Zoffix Znet)++ | S32-num/rat.t

[19:46] <Geth> ¦ roast: Spec Rational.Bool

[19:46] <Geth> ¦ roast:

[19:46] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1552 R#1552

[19:46] <Geth> ¦ roast:

[19:46] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/748d1a57b9

[19:46] <Geth> ¦ roast: Discussion:  https://irclog.perlgeek.de/perl6-dev/2018-02-23#i_15851526

[19:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f82c984b43

[19:56] <travis-ci> NQP build failed. usev6 '[JVM] Reset eof to false after seeking

[19:56] <travis-ci> https://travis-ci.org/perl6/nqp/builds/345400559 https://github.com/perl6/nqp/compare/a30610a7a75d...b5da01176878

[19:57] <Geth> ¦ roast: 4fab1d3d7c | (Zoffix Znet)++ | S02-literals/allomorphic.t

[19:57] <Geth> ¦ roast: Spec .Bool on allomorphs

[19:57] <Geth> ¦ roast:

[19:57] <Geth> ¦ roast: Uses .Bool of numeric portion.

[19:57] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6-dev/2018-02-23#i_15851777

[19:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4fab1d3d7c

[20:21] <Zoffix> ZOFVM: Files=1289, Tests=153234, 145 wallclock secs (20.17 usr  3.10 sys + 3126.66 cusr 152.58 csys = 3302.51 CPU)

[20:22] <Zoffix> Also the "slightly faster" on that Rational.Bool commit turns out to be 11.5x faster :P  MasterDuke++ for bringing that one up.

[20:36] <dogbert11> m: Seq.Bool

[20:36] <camelia> rakudo-moar 748d1a57b: OUTPUT: «Invocant of method 'Bool' must be an object instance of type 'Seq', not a type object of type 'Seq'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[20:37] <Zoffix> .oO( I thought we fixed all this stuff )

[20:38] <Zoffix> I see more

[20:38] <Zoffix> m: Seq.Int

[20:38] <camelia> rakudo-moar 748d1a57b: OUTPUT: «Cannot look up attributes in a Seq type object␤  in block <unit> at <tmp> line 1␤␤»

[20:38] <dogbert11> RT #130867

[20:38] <synopsebot> RT#130867 [new]: https://rt.perl.org/Ticket/Display.html?id=130867 [BUG] `only` methods are used where `multies` should be, preventing dispatch to Mu.* candidates

[20:38] <Zoffix> Ah, OK, yeah, that's the ticket I was thinking about

[20:39] <Zoffix> Seq.Numeric and Seq.elems are in the same pile

[20:41] <dogbert11> wasn't lizmat working on stuff like this the other day?

[20:42] <lizmat> dogbert11: I started doing some subs and then got distracted  :-(

[20:42] <dogbert11> I get distracted all the time :-)

[20:44] <Zoffix> dogbert11: hm, good point. I wonder if we'll then have the opposite problem: methods that were declared non-multi on purpose, to block off the multi from higher up :)

[20:44] <Zoffix> (the fix would be to just stick a proto in the class, but still)

[20:45] <dogbert11> so how do we figure out if 'multi' was left out on purpose then

[20:51] <Zoffix> Well, I know some of that stuff (like .new) is covered by roast.

[20:51] <Zoffix> The rest, we'd just need to think about each one, I guess.

[20:52] <lizmat> fwiw, I intend to look further

[20:52] <Zoffix> lizmat++

[20:52] * Zoffix &

[20:52] <lizmat> but I appear to tire easily still, so I try to maximize time on recovery atm

[20:52] <dogbert11> clever move

[20:57] <lizmat> like calling it a night at 10pm  :-)

[21:00] <dogbert11> sleep well

[22:46] <lucasb> I submitted 2 new suggestions in 6.d-prep. I appreciate any comments there. Thanks.

[22:47] <tbrowder> .tell AlexDaniel NQP#424 has an iteresting mod to .travis.yml to help get past stallevjobs

[22:47] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[22:47] <synopsebot> NQP#424 [open]: https://github.com/perl6/nqp/pull/424 add a new built-in sub: run-command

[22:48] <lucasb> I see both proposals as related, but it seemed better to submit them separated. (In other words, if there was a .clear method, the purpose of the undefine() function would diminish.)

[22:49] <jnthn> Not sure Arrays need a .clear method, just assign () or Empty

[22:49] <tbrowder> s/stallevjobs/stalled jobs/

[22:51] <lucasb> jnthn: Correct. On the other hand, assignment can't be chained like a method call chain, right? like @array.something.clear.something

[22:52] <jnthn> Do you have a use case?

[22:52] <jnthn> I mean, it's not like many methods on @array return the array itself

[22:54] <lucasb> idk, maybe a use case would be to push to a empty array? if $something { @array.clear.push(...) } else { @array.push(...) }

[22:54] <lucasb> *if* the clear method returns self. I suggested other options for the return value in the issue

[23:02] <jnthn> That feels so cluttery compared to @array = ...; though?

[23:08] <timotimo> Zoffix, you don't need to declare something non-multi to block multis from up above, you can just define a new proto

[23:09] <Zoffix> timotimo: yeah, I know. But declaring an only works too and I was saying what if some of the methods are onlies because the multies weren't meant to be available.

[23:09] <Zoffix> multies up the food chain I mean

[23:10] <Zoffix> m: Rat.new: 1, 2, 3

[23:10] <camelia> rakudo-moar 748d1a57b: OUTPUT: «Too many positionals passed; expected 1 to 3 arguments but got 4␤  in block <unit> at <tmp> line 1␤␤»

[23:10] <Zoffix> If you blindlign just add `multi` to everything, taht ^ would start saying "Default .new takes only named args" thing is what I meant

[23:14] <timotimo> oh, huh.

[23:15] <Zoffix> m: my @array = <a b c>; (@array &&= ()).push: 42; dd @array

[23:15] <camelia> rakudo-moar 748d1a57b: OUTPUT: «Array @array = [42]␤»

[23:16] <Zoffix> Not sure why I'd be working with an array that got stuff up in it if I want an empty array tho

[23:17] <Zoffix> m: my @array = <a b c>; (@array = ()).push: 42; dd @array

[23:17] <camelia> rakudo-moar 748d1a57b: OUTPUT: «Array @array = [42]␤»

[23:17] <Zoffix> even just this works

[23:35] <Zoffix> .tell samcv the other day I said that executing code per lang version was blocked by R#1289, but I forgot to mention that that's basically for classes. For just subs, you can stick 6.d subs into files in src/core.d/ dir

[23:35] <yoleaux> Zoffix: I'll pass your message to samcv.

[23:35] <synopsebot> R#1289 [open]: https://github.com/rakudo/rakudo/issues/1289 [6.d][severe] [6.d BLOCKER] Implement a Way to Know Caller's Language

[23:36] <Zoffix> .tell samcv there's already stuff for &await you could use as an example

[23:36] <yoleaux> Zoffix: I'll pass your message to samcv.

[23:36] <samcv> hmm

[23:36] <yoleaux> 23:35Z <Zoffix> samcv: the other day I said that executing code per lang version was blocked by R#1289, but I forgot to mention that that's basically for classes. For just subs, you can stick 6.d subs into files in src/core.d/ dir

[23:36] <yoleaux> 23:36Z <Zoffix> samcv: there's already stuff for &await you could use as an example

[23:36] <samcv> ok

[23:36] <samcv> thank you

[23:36] <samcv> :)
