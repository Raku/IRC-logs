[03:56] <travis-ci> Rakudo build passed. Zoffix Znet 'Do not warn in explicit sink of variables

[03:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/328406168 https://github.com/rakudo/rakudo/compare/ef2dc1b8ba7d...99da4a5a6c45

[05:41] <AlexDaniel> R#1403

[05:41] <synopsebot> R#1403 [open]: https://github.com/rakudo/rakudo/issues/1403 Consider removing the :caption key from table POD’s %config hash

[05:41] <AlexDaniel> tbrowder: fwiw, if you write it like this ↑, then the bot automatically generates a link :)

[07:02] <AlexDaniel> reportable6: list

[07:02] <reportable6> AlexDaniel, https://gist.github.com/8f23f74d9cac31b02373bec88f471012

[07:03] <AlexDaniel> reportable6: 2018-01-08T00:00:00Z 2018-01-15T00:00:00Z

[07:03] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[07:04] <reportable6> AlexDaniel, https://gist.github.com/e32f56c162a27c4e018b49c035964fbc

[07:42] <travis-ci> Rakudo build passed. Zoffix Znet 'Add node info to ±Inf/NaN num constants'

[07:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/328415384 https://github.com/rakudo/rakudo/compare/99da4a5a6c45...00188757dc93

[10:25] <|Tux|> Rakudo version 2017.12-222-gd0be53a1e - MoarVM version 2017.12.1-32-g56c03d99c

[10:25] <|Tux|> csv-test-xs-20      0.456 -  0.503

[10:25] <|Tux|> csv-ip5xs           1.089 -  1.103

[10:25] <|Tux|> test-t --race       1.111 -  1.141

[10:26] <|Tux|> test-t              2.756 -  2.804

[10:26] <|Tux|> test               11.112 - 11.210

[10:26] <|Tux|> csv-parser         12.147 - 12.314

[10:26] <|Tux|> csv-ip5xs-20       12.746 - 13.228

[10:26] <|Tux|> test-t-20 --race   16.584 - 16.990

[10:26] <|Tux|> test-t-20          48.951 - 49.276

[10:41] <lizmat> Files=1232, Tests=75995, 324 wallclock secs (14.72 usr  5.22 sys + 2250.03 cusr 226.87 csys = 2496.84 CPU)

[11:01] <jnthn> Same but 177s :)

[11:05] <lizmat> how many cores ?

[11:06] <jnthn> 6p, 12v

[11:19] <timotimo> 6 pascal over 12 volts

[11:33] <lizmat> jnthn: I bet that doesn't fit in a notebook

[11:34] <jnthn> Probably not, but a notebook doesn't fit me, so... :)

[11:35] * jnthn is currently case-analyzing single-whenever react/supply blocks, to hopefully give them a nice performance boost

[11:37] <pmurias> do we have a graph how rakudo performance is changing across (releases/commits)?

[11:40] <DrForr> Tux has been doing a great job on doing benchmarking, though I don't know how much (if any) the recent Meltdown/Spectre bugs have caused an issue...

[11:42] <|Tux|> pmurias, http://tux.nl/Talks/CSV6/speed4.html - date-based, not commit based

[11:43] <timotimo> [Tux]: could we also get graphs that zoom in on the horizontal axis?

[11:43] <timotimo> like, the lowest three graphs starting in 01-Jul, so we get double the horizontal resolution?

[11:45] <AlexDaniel> releasable6: next

[11:45] <releasable6> AlexDaniel, Next release in 5 days and ≈7 hours. No blockers. Unknown changelog format

[12:16] <dogbert2> t/spec/S03-operators/short-circuit.t is still failing for me

[12:30] <pmurias> [Tux]: thank you

[13:41] <jnthn> Looks like a factor of 3-4 improvement through the assumptions we can make about single top-level whenever suppy/react blocks

[13:41] <travis-ci> Rakudo build passed. Zoffix Znet 'Warn on ±Inf/NaN in sink context

[13:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/328415557 https://github.com/rakudo/rakudo/compare/00188757dc93...e9c9dc469549

[13:42] <lizmat> jnthn: not bad  :-)

[13:54] <Geth> ¦ rakudo/supply-syntax-opts: 13 commits pushed by (Jonathan Worthington)++

[13:54] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/compare/db3953a24a...4804003acc

[13:54] <jnthn> That's just a rebase on master for easier spectesting

[13:54] <Geth> ¦ rakudo/supply-syntax-opts: e5f412d696 | (Jonathan Worthington)++ | 3 files

[13:54] <Geth> ¦ rakudo/supply-syntax-opts: Special-case one top-level whenever supply/react

[13:54] <Geth> ¦ rakudo/supply-syntax-opts:

[13:54] <Geth> ¦ rakudo/supply-syntax-opts: When the supply or react block ends with a single top-level whenever

[13:54] <Geth> ¦ rakudo/supply-syntax-opts: (this is the case in the non-block form, but also the block form when

[13:54] <Geth> ¦ rakudo/supply-syntax-opts: some setup is done followed by a `whenever`), then we can simply call

[13:54] <Geth> ¦ rakudo/supply-syntax-opts: `serialize` on that Supply (which is a no-op in many cases) and that

[13:54] <Geth> ¦ rakudo/supply-syntax-opts: is sufficient concurrency control. Thanks to the data structures that

[13:54] <Geth> ¦ rakudo/supply-syntax-opts: <…commit message has 5 more lines…>

[13:54] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/e5f412d696

[13:54] <jnthn> And that's the interesting commit :)

[13:56] <lizmat> jnthn: recently you changed some assignments to binding, to reduce the number of scalar allocations

[13:56] <jnthn> Yes

[13:57] <lizmat> is there a reason you use assignment here, e.g. in REACT-ONE-WHENEVER ?

[13:57] <jnthn> It's a copy of REACT and I didn't optimize that yet :)

[13:57] <lizmat> ok  :-)

[13:57] <jnthn> It wasn't such a hot path

[13:57] <jnthn> (I was looking at sources of Scalar allocations and started at the most guilty :))

[13:59] <Zoffix> Any easy way to find out if a QAST::Op.new(:op<call>, :name('&infix:<|>')) would call the core op?

[13:59] <jnthn> A week ago, `my $s = supply emit 42; for ^100_000 { react whenever $s {  } }` ran in 29.49s. Now it's 5.51s.

[13:59] <Zoffix> * Find out from within Actions I mean

[13:59] <lizmat> i just browsed the commit  :-)

[13:59] <jnthn> Yeah, 'tis an easy win though, so will do it :)

[13:59] <jnthn> lizmat++

[14:00] <jnthn> Zoffix: As in, will be producing a Slip rather than be turned into a flattening?

[14:00] <lizmat> jnthn: perhaps related: does adding an "is raw" to s sub also help in e.g. sub SUPPLY-ONE-WHENEVER ?

[14:00] <Zoffix> jnthn: infix. A Junction call.

[14:01] <jnthn> Oh, damn

[14:01] <jnthn> No, you can't figure that out in Actions.nqp

[14:01] <Zoffix> OK. Thanks.

[14:01] <jnthn> Because an infix:<|> might be declared waaay later

[14:01] <jnthn> Optimizer.nqp is the right place for such things

[14:02] <jnthn> There's even a way in there to ask if something is the version from the setting

[14:02] <Zoffix> Yeah, I saw that one.

[14:02] <Zoffix> Is there a way to attach a QAST to a Code/Block object? I saw @!comp_stuff in Code, but it seems it's not available early enough

[14:04] <jnthn> Not really sure what you mean

[14:05] <jnthn> But "probably not"

[14:07] <Zoffix> Basically, I got this patch to gen optimized QAST for `$ where Int|Num|Whatever` signatures. It does it only for fast path binding and for slow binder it uses the old-style code block `where` and the way it does it is it makes an nqp::list with Code and QAST and in post_consraint codegen it grabs the QAST and changes the list to Code to use in the slowpath. BUT, it'll do this even for user's &infix:<|> and

[14:07] <Zoffix> I want to do this only for core Junction op. And if there's no way to find if it's a core op in Actions, I was thinking of sticking that QAST to the Code and swapping it in Optimizer instead: https://gist.github.com/zoffixznet/17fb70a6cccdf0231f74e0ff180acf5e

[14:08] <jnthn> Why can't you do the whole transformation in Optimizer?

[14:09] <jnthn> Can always .annotate the post_constraint code that you'd need to fix up to help you robustly find it

[14:10] <Zoffix> OK. I'll give that a go. Thanks.

[14:11] <Zoffix> jnthn: do you mean gen the optimized where code in Optimizer too?

[14:12] <Zoffix> The `sub optimized-where-block` in my diff

[14:14] <jnthn> Yes

[14:15] <Zoffix> Cool. I'll give it a go

[14:20] <dogbert2> Zoffix: do you know why t/spec/S03-operators/short-circuit.t is failing, is it WIP?

[14:29] <Zoffix> dogbert2: it's not failing for me

[14:39] <dogbert2> Zoffix: test #84 subtest #3:     not ok 3 - 4-arg, with all but last args wanted

[14:39] <dogbert2> # Failed test '4-arg, with all but last args wanted'

[14:39] <dogbert2> perhaps I'm the only one though

[14:45] <Zoffix> dogbert2: what's your Perl 6 version? What's the full output of perl6 -e 'uc "foo" xor "bar".uc xor "ber".uc xor "baz"'

[14:46] <dogbert2> This is Rakudo version 2017.12-222-gd0be53a1e built on MoarVM version 2017.12.1-30-ged7c1234f

[14:47] <dogbert2> dogbert@dogbert-VirtualBox ~ $ perl6 -e 'uc "foo" xor "bar".uc xor "ber".uc xor "baz"'

[14:47] <dogbert2> WARNINGS for -e:

[14:47] <dogbert2> Useless use of constant string "baz" in sink context (line 1)

[14:47] <dogbert2> Zoffix: ^^

[14:48] <Zoffix> dogbert2: what's the full output of test failure?

[14:49] <dogbert2> 1..3

[14:49] <dogbert2> ok 1 - 2-arg

[14:49] <dogbert2> ok 2 - 4-arg

[14:49] <dogbert2> not ok 3 - 4-arg, with all but last args wanted

[14:49] <dogbert2> # Failed test '4-arg, with all but last args wanted'

[14:49] <dogbert2> # at /home/dogbert/repos/rakudo/t/spec/packages/Test/Util.pm (Test::Util) line 111

[14:49] <dogbert2> #      got err: "WARNINGS for /home/dogbert/repos/rakudo/getout-11177-448646.code:\nUseless use of constant string \"baz\" in sink context (line 1)\n"

[14:49] <dogbert2> # Looks like you failed 1 test of 3

[14:49] <dogbert2> not ok 84 - xor warns when used with bad precedence

[14:52] <Geth> ¦ roast: 5ac1ebf6b2 | (Zoffix Znet)++ (committed using GitHub Web editor) | S03-operators/short-circuit.t

[14:52] <Geth> ¦ roast: Use test strings less likely to be part of paths

[14:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5ac1ebf6b2

[14:52] <Zoffix> dogbert2: ^ that should fix it

[14:53] <dogbert2> it does :-) Zoffix++

[14:53] <Zoffix> k

[14:55] <Geth> ¦ nqp: 88fbd344d3 | (Zoffix Znet)++ | src/QAST/Node.nqp

[14:55] <Geth> ¦ nqp: Remove trailing whitespace

[14:55] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/88fbd344d3

[14:55] <Geth> ¦ nqp: 4e647a70b7 | (Zoffix Znet)++ | src/QAST/Node.nqp

[14:55] <Geth> ¦ nqp: Implement QAST::Node.annotate_self

[14:55] <Geth> ¦ nqp:

[14:55] <Geth> ¦ nqp: Same as .annotate but return self instead of the value we're

[14:55] <Geth> ¦ nqp: annotating with. Makes it easier to set annotations when you just

[14:55] <Geth> ¦ nqp: wanna set them and return the Node; no need to save it into variable.

[14:55] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4e647a70b7

[15:13] <travis-ci> NQP build passed. Zoffix Znet 'Implement QAST::Node.annotate_self

[15:13] <travis-ci> https://travis-ci.org/perl6/nqp/builds/329089336 https://github.com/perl6/nqp/compare/d20574ddd3c9...4e647a70b7e5

[15:15] <Geth> ¦ nqp/post-release: e34595c66c | (Zoffix Znet)++ | 2 files

[15:15] <Geth> ¦ nqp/post-release: Avoid using variables where we don't need any

[15:15] <Geth> ¦ nqp/post-release:

[15:15] <Geth> ¦ nqp/post-release: Make use of new .annotate_self

[15:15] <Geth> ¦ nqp/post-release: review: https://github.com/perl6/nqp/commit/e34595c66c

[15:46] <Geth> ¦ rakudo/post-release: 426a39a6ef | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[15:46] <Geth> ¦ rakudo/post-release: Avoid using variables where we don't need any

[15:46] <Geth> ¦ rakudo/post-release:

[15:46] <Geth> ¦ rakudo/post-release: Make use of new .annotate_self

[15:46] <Geth> ¦ rakudo/post-release: review: https://github.com/rakudo/rakudo/commit/426a39a6ef

[16:26] <|Tux|> timotimo, scroll to the end of https://tux.nl/Talks/CSV6/speed4.html

[16:28] <timotimo> oooh i like that

[16:28] <timotimo> last 10 days is maybe a bit too far zoomed in, but still: nice!

[16:57] <lizmat> moritz: looks like search on irclog is stuk on 18 Dec  :-(

[16:57] <lizmat> *stuck rather :-)

[17:00] <TimToady> jnthn: from your description, your single-whenever optimization sounds kinda like the dual of TCO

[17:03] <lizmat> Total Cost of Ownership ?

[17:04] <jnthn> Tail Call Opt :)

[17:05] <jnthn> Hm, didn't think of that :)

[17:05] <TimToady> that's why I said it :)

[17:05] <moritz> lizmat: thanks for the pointer; I'm trying to fix it now

[17:13] <|Tux|> timotimo, what quadruple would you like better than 10, 30, 90, 180?

[17:13] <|Tux|> (u roept, wij draiien)

[17:14] <|Tux|> (u roept, wij draaien)

[17:14] <timotimo> i'd just say have three instead of four

[17:24] <Geth> ¦ rakudo/supply-syntax-opts: 4 commits pushed by (Jonathan Worthington)++

[17:24] <Geth> ¦ rakudo/supply-syntax-opts: 229b03fd17 | Use binding in react implementation

[17:24] <Geth> ¦ rakudo/supply-syntax-opts: 163f275b66 | Optimize Tap and Supply construction

[17:24] <Geth> ¦ rakudo/supply-syntax-opts: 83a619ec9a | Optimize Tap.close a little

[17:24] <Geth> ¦ rakudo/supply-syntax-opts: 64de571b88 | Various tweaks to reduce Scalar allocations

[17:24] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/compare/e5f412d696...64de571b88

[17:53] <Geth> ¦ rakudo/supply-syntax-opts: 2ac1ceaa1b | (Jonathan Worthington)++ | src/core/Promise.pm

[17:53] <Geth> ¦ rakudo/supply-syntax-opts: Slightly faster Promise construction

[17:53] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/2ac1ceaa1b

[17:58] <Geth> ¦ rakudo/master: 19 commits pushed by (Jonathan Worthington)++

[17:58] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/d0be53a1ec...2ac1ceaa1b

[17:58] <jnthn> There's a merge of my supply work

[18:11] <jnthn> bbl &

[18:14] <|Tux|> timotimo, I prefer 4 because http://tux.nl/Files/20180115191444.png

[18:15] * |Tux| now off to badminton

[18:38] <timotimo> ah, good point. if i zoom out more so i get that layout, that's probably fine

[19:45] * dogbert17 looks sceptically at RT #127587

[19:45] <synopsebot> RT#127587 [open]: https://rt.perl.org/Ticket/Display.html?id=127587 [OSX] External process return values affecting react blocks

[19:47] <dogbert17> the line 'qq:x[ echo  "echo: $phrase" ]' won't output anything unless e.g. say is used one it

[19:51] <lizmat> dogbert17: $cmd.stdout.tap: *.say; ??

[19:52] <dogbert17> is looking at the second example

[19:52] <lizmat> if a class has a DESTROY method, and something calls that method *before* the object is actually destroyed

[19:52] <lizmat> will the reaping of the GC call the DESTROY again when the object is *actually* destroyed ?

[20:05] <timotimo> i think calling DESTROY doesn't do anything

[20:11] <lizmat> m: class A { method DESTROY { say "bye" } }; A.DESTROY  # looks like an ordinary method to me

[20:11] <camelia> rakudo-moar 2ac1ceaa1: OUTPUT: «bye␤»

[20:12] <timotimo> yup, it's completely ordinary

[20:12] <timotimo> i meant to say "it doesn't do anything magical"

[20:13] <lizmat> ok

[20:18] <jnthn> lizmat: Yes, you calling DESTROY on an object sooner doesn't affect finalization in any way

[20:18] <jnthn> In fact the VM doesn't call DESTROY

[20:18] <lizmat> so it would get called twice *if* it gets to that point

[20:18] <lizmat> no?

[20:18] <jnthn> It calls a handler with a list of objects that need finalizing

[20:18] <jnthn> And just loops over them calling DESTROY

[20:19] <jnthn> Yes, if you write a call to .DESTROY then you've violated the contract

[20:19] <lizmat> ok, clear

[20:21] <jnthn> role DestroyOnce { method DESTROYONCE { ... }; has $.destroyed = False; method DESTROY() { unless cas($!destroyed, False, True) { self.DESTROYONCE } }

[20:22] <jnthn> That's a pretty robust way to implement at-most-once

[20:22] <jnthn> (Copes with concurrent calls)

[20:22] <lizmat> ok, but I don't think I'll need that

[20:23] <jnthn> *nod*

[20:56] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/01/15/2018-03-blue-note/

[21:10] <jnthn> lizmat++

[21:33] <gfldex> jnthn: did Cro benefit from your changes?

[21:34] <jnthn> gfldex: Yeah, the branch I merged got ~12% more requests/second

[21:35] <gfldex> nice :)

[22:09] <Zoffix> So I got a WVal with Block: https://gist.github.com/zoffixznet/891363fb13c2efd9998e9271dad3a1af#file-p6-p6-L101  and its guts are here: https://gist.github.com/zoffixznet/891363fb13c2efd9998e9271dad3a1af#file-p6-p6-L66-L85

[22:10] <Zoffix> Is there a trick to getting its guts when I'm at that WVal or do I need to annotate WVal with the guts?

[22:16] <Zoffix> Ah, it might be @compstuff[0]

[23:11] <Zoffix> Took me long enough to dump it, but yeah, Code's @!compstuff[0] attr containts the QAST for the block.
