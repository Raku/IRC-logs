[00:44] <AlexDaniel> if anybody knows about some serious issue, please don't hesitate to tell me about it :)

[00:55] <Geth> ¦ nqp/profiler_new_spesh_semantics: 0a8693b683 | (Timo Paulssen)++ | src/vm/moar/HLL/Backend.nqp

[00:55] <Geth> ¦ nqp/profiler_new_spesh_semantics: put gc sequence number in gcs table

[00:55] <Geth> ¦ nqp/profiler_new_spesh_semantics: review: https://github.com/perl6/nqp/commit/0a8693b683

[00:55] <Geth> ¦ nqp/profiler_new_spesh_semantics: 90d6b697ea | (Timo Paulssen)++ | src/vm/moar/HLL/Backend.nqp

[00:55] <Geth> ¦ nqp/profiler_new_spesh_semantics: remove accidentally left-over line

[00:55] <Geth> ¦ nqp/profiler_new_spesh_semantics: review: https://github.com/perl6/nqp/commit/90d6b697ea

[00:55] <Geth> ¦ nqp/profiler_new_spesh_semantics: c1261f6438 | (Timo Paulssen)++ | src/vm/moar/profiler/template.html

[00:55] <Geth> ¦ nqp/profiler_new_spesh_semantics: teach old html frontend a bit about multiple threads

[00:56] <Geth> ¦ nqp/profiler_new_spesh_semantics:

[00:56] <Geth> ¦ nqp/profiler_new_spesh_semantics: still missing: call graph for the rest of the threads,

[00:56] <Geth> ¦ nqp/profiler_new_spesh_semantics: GC tab ought to display a bit of information about all

[00:56] <Geth> ¦ nqp/profiler_new_spesh_semantics: the other participants (if applicable), and there's

[00:56] <Geth> ¦ nqp/profiler_new_spesh_semantics: a bug causing incredible amounts of promoted bytes in

[00:56] <Geth> ¦ nqp/profiler_new_spesh_semantics: the GC list.

[00:56] <Geth> ¦ nqp/profiler_new_spesh_semantics:

[00:56] <Geth> ¦ nqp/profiler_new_spesh_semantics: Also, a decision on whether "inclusive" time is allowed

[00:56] <Geth> ¦ nqp/profiler_new_spesh_semantics: to go past 100% or if everything should be scaled down

[00:56] <Geth> ¦ nqp/profiler_new_spesh_semantics: to "total cpu time".

[00:56] <Geth> ¦ nqp/profiler_new_spesh_semantics: review: https://github.com/perl6/nqp/commit/c1261f6438

[01:57] <Zoffix> Reminder that there's a proposal for nailing shut the holes in the spec for type constraints on constants: https://github.com/rakudo/rakudo/blob/master/docs/archive/constants-type-constraints-proposal-2018-02-10.md#type-constraints-on-constants

[01:57] <Zoffix> Gon'a start implementing it like in a week maybe

[02:55] <AlexDaniel> Zoffix: I looked through it and it makes sense. I was kinda hoping that the proposal would make “my Numeric constant @foo” do something useful, so that's somewhat a bummer… but it doesn't work right now anyway so that's ok

[02:55] <AlexDaniel> hmm… actually I was thinking about something like constant Numeric @foo ?

[02:55] <AlexDaniel> but that expectation is probably wrong :)

[02:55] <AlexDaniel> 🤷

[02:58] <Zoffix> m: constant Numeric is export(foo => my Str constant x is export("ehehehe" => "/ahaha".IO.e) = "meows") = 42; say Numeric

[02:58] <AlexDaniel> Zoffix: right, it'd have to decide what it was after the fact…

[02:58] <camelia> rakudo-moar f74890550: OUTPUT: «42␤»

[02:58] <Zoffix> that's a lot of stuff before `=` for it to decide about :)

[02:59] <AlexDaniel> I see :)

[03:01] <AlexDaniel> well, the way I had it in my mind would make it die on ⏏export, because that's definitely a numeric constant named “is” :D

[03:01] <AlexDaniel> .oO( goddamn sigilless things )

[03:03] <Zoffix> greppable6: my\s+\S+\s+constant

[03:03] <greppable6> Zoffix, 7 lines, 6 modules: https://gist.github.com/29444ba3abec40f8237cf3f8c03a928f

[03:03] <Zoffix> We actually have been parsing it that way for ages, but the parsed stuff ain't hooked up to anything

[03:04] <Zoffix> I mean in the `my Type constant foo`

[03:04] <Zoffix> m: my int32 constant LC_ALL = "so much int, so wow"; say LC_ALL

[03:04] <camelia> rakudo-moar f74890550: OUTPUT: «so much int, so wow␤»

[03:04] <AlexDaniel> yea, and I guess my stupid question was asked before :P

[03:05] <Zoffix> Yeah, 10 days ago: https://github.com/rakudo/rakudo/issues/1503#issuecomment-364393338

[03:05] <AlexDaniel> heh

[03:06] <AlexDaniel> oh, https://github.com/rakudo/rakudo/issues/1541 should be closed I think

[03:07] <Zoffix> closed

[03:07] <Zoffix> (tests already exists that cover yesterday's bug in MoarVM)

[03:09] <AlexDaniel> it says that the r-j is still failing on that test though, but the commit message claims that the reason is different

[03:09] <AlexDaniel> okay then

[03:09] <AlexDaniel> who can edit http://rakudo.org/how-to-get-rakudo/ ?

[03:10] <AlexDaniel> because RT#132877 seems to be a LHF as long as you have access to edit that page…

[03:10] <synopsebot> RT#132877 [new]: https://rt.perl.org/Ticket/Display.html?id=132877 Confusing link to 'zef'

[03:11] <AlexDaniel> reportable6: 2018-02-12T00:00:00Z 2018-02-19T00:00:00Z

[03:11] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[03:12] <reportable6> AlexDaniel, https://gist.github.com/a23d46247a4aed8a4205ffe96e69485b

[03:14] <AlexDaniel> weekly: reportable: https://gist.github.com/a23d46247a4aed8a4205ffe96e69485b

[03:14] <notable6> AlexDaniel, Noted!

[03:14] <AlexDaniel> weekly:

[03:14] <notable6> AlexDaniel, 1 note: 2018-02-19T03:14:40Z <AlexDaniel>: reportable: https://gist.github.com/a23d46247a4aed8a4205ffe96e69485b

[03:15] <AlexDaniel> propdump: C℃℉

[03:15] <unicodable6> AlexDaniel, https://gist.github.com/00ef9a5359fcd3ffa6e8fe1a93bba0bb

[03:18] <AlexDaniel> Zoffix: regarding your last tweet, both ℃ and ℉ have “East_Asian_Width” property set to A (Amiguous), so the editor (or the font) doesn't really have any specific way to render it…

[03:18] <AlexDaniel> it's really sad :)

[03:19] <AlexDaniel> but you also seem to have a font issue and these chars are rendered neither as fullwidth or halfwidth

[06:46] <Geth> ¦ roast: a066ace2dc | usev6++ | 2 files

[06:46] <Geth> ¦ roast: [JVM] Remove (most) fudges for R#1541

[06:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a066ace2dc

[06:46] <synopsebot> R#1541 [closed]: https://github.com/rakudo/rakudo/issues/1541 [IO][JVM] [JVM] IO::Handle.eof always reports true for zero-size and /proc files 

[08:02] <[Tux]> Rakudo version 2018.01-209-gf74890550 - MoarVM version 2018.01-97-g22d2db5e0

[08:02] <[Tux]> csv-test-xs-20      0.452 -  0.460

[08:02] <[Tux]> csv-ip5xs           0.821 -  0.836

[08:02] <[Tux]> test-t --race       1.106 -  1.109

[08:02] <[Tux]> test-t              2.641 -  2.651

[08:02] <[Tux]> csv-ip5xs-20        7.531 -  7.765

[08:02] <[Tux]> test                9.418 -  9.434

[08:02] <[Tux]> csv-parser         12.333 - 12.551

[08:02] <[Tux]> test-t-20 --race   16.466 - 16.594

[08:02] <[Tux]> test-t-20          47.140 - 47.591

[16:17] <Zoffix> hm, updated to latest and greatest rakudo couple of days ago on perl6.party and now Linode emailed me "Your Linode, leliana, has exceeded the notification threshold (90) for CPU Usage by averaging 108.4% for the last 2 hours."

[16:18] <Zoffix> htop says buggable is to blame

[16:18] <Zoffix> and it's not even connected no more :o

[16:19] <Zoffix> k, maybe the high CPU use was due to it just trying to reconnect in a loop

[16:48] <AlexDaniel> yeah, I doubt there's any issue, but I can upgrade rakudo for whateverables

[16:48] <AlexDaniel> bisectable6: uptime

[16:49] <bisectable6> AlexDaniel, No! It wasn't me! It was the one-armed man! Backtrace: https://gist.github.com/02ccaa67babb649eda5aa70dd98152e4

[16:50] <AlexDaniel> uhh… that's a precomp issue I think

[16:50] <AlexDaniel> so nvm that, I've seen that before

[16:52] <AlexDaniel> bisectable6: uptime

[16:52] <bisectable6> AlexDaniel, 13 seconds, 194.136719MiB maxrss. This is Rakudo version 2018.01-209-gf74890550 built on MoarVM version 2018.01-97-g22d2db5e0 implementing Perl 6.c.

[17:11] <Zoffix> bisectable6: uptime

[17:11] <bisectable6> Zoffix, 19 minutes and 35 seconds, 222.136719MiB maxrss. This is Rakudo version 2018.01-209-gf74890550 built on MoarVM version 2018.01-97-g22d2db5e0 implementing Perl 6.c.

[17:12] <Zoffix> bisectable6: uptime

[17:12] <bisectable6> Zoffix, 20 minutes and 36 seconds, 233.9375MiB maxrss. This is Rakudo version 2018.01-209-gf74890550 built on MoarVM version 2018.01-97-g22d2db5e0 implementing Perl 6.c.

[17:13] <AlexDaniel> ehhh…

[17:13] <Zoffix> hah

[17:13] <Zoffix> So it lasted for 4 bisects :)

[17:14] <AlexDaniel> This was reported in November, by the way: https://github.com/rakudo/rakudo/issues/1259

[17:15] <Zoffix> committable6: uptime

[17:15] <committable6> Zoffix, 22 minutes and 48 seconds, 192.566406MiB maxrss. This is Rakudo version 2018.01-209-gf74890550 built on MoarVM version 2018.01-97-g22d2db5e0 implementing Perl 6.c.

[17:15] <Zoffix> c: HEAD Numeric.new + 0

[17:15] <AlexDaniel> according to tests only bisectable6 does that

[17:15] <committable6> Zoffix, ¦HEAD(f748905): «WARNINGS for /tmp/7cWlIWVDYZ:␤«timed out after 10 seconds» «exit signal = SIGKILL (9)»»

[17:15] <Zoffix> committable6: uptime

[17:15] <committable6> Zoffix, 23 minutes and 32 seconds, 193.664063MiB maxrss. This is Rakudo version 2018.01-209-gf74890550 built on MoarVM version 2018.01-97-g22d2db5e0 implementing Perl 6.c.

[17:15] <Zoffix> neat

[17:16] <AlexDaniel> c: all say 42

[17:16] <AlexDaniel> c: all say 42

[17:16] <AlexDaniel> c: all say 42

[17:16] <committable6> AlexDaniel, ¦all (49 commits): «42␤»

[17:17] <committable6> AlexDaniel, ¦all (49 commits): «42␤»

[17:17] <committable6> AlexDaniel, ¦all (49 commits): «42␤»

[17:17] <AlexDaniel> committable6: uptime

[17:17] <committable6> AlexDaniel, 25 minutes and 18 seconds, 220.609375MiB maxrss. This is Rakudo version 2018.01-209-gf74890550 built on MoarVM version 2018.01-97-g22d2db5e0 implementing Perl 6.c.

[17:20] <timotimo> hm, the uptime message could include stats on what it's been doing since it was last started

[17:29] <dogbert17> m: my @z = (^3).map: {$_}; my $x = { :a(1) :b(@z) }

[17:29] <camelia> rakudo-moar f74890550: OUTPUT: «===SORRY!===␤Unknown QAST node type NQPMu␤»

[17:33] <dogbert17> m: react { Supply.interval(1).tap: -> { .say } }

[17:33] <camelia> rakudo-moar f74890550: ( no output )

[17:33] <dogbert17> m: react { Supply.interval(1).tap: -> { .say } }

[17:33] <camelia> rakudo-moar f74890550: ( no output )

[17:35] <Zoffix> The last one makes sense, it's not whenevering anything, so react exits right away

[17:36] <Zoffix> And the first one is part of RT#127023

[17:36] <synopsebot> RT#127023 [new]: https://rt.perl.org/Ticket/Display.html?id=127023 [BOOTSTRAP] error message “Unknown QAST node type NQPMu” ( (:w :h<1>) )

[17:36] <Zoffix> m: react { Supply.interval(1).tap: -> { .say } }; say "buh-bye"

[17:36] <camelia> rakudo-moar f74890550: OUTPUT: «buh-bye␤Unhandled exception in code scheduled on thread 4␤»

[17:36] <Zoffix> :o

[17:36] <Zoffix> m: react { Supply.interval(1).tap: -> { .say } }; say "buh-bye"

[17:36] <camelia> rakudo-moar f74890550: OUTPUT: «Unhandled exception in code scheduled on thread 4␤buh-bye␤»

[17:36] <Zoffix> Guessing the "expected 0 args but got 1"

[17:36] <AlexDaniel> that seems to be correct also

[17:37] <Zoffix> m: react { Supply.interval(1).tap: { .say } }; say "buh-bye"

[17:37] <camelia> rakudo-moar f74890550: OUTPUT: «0␤buh-bye␤»

[17:37] <Zoffix> yup

[17:37] <AlexDaniel> hm… but why can't it print the backtrace or something?

[17:41] <Zoffix> I'm guessing same reason why Proc::Async.stdout/err.tap can't

[17:41] <Zoffix> Remember, jnthn++ said it's better to use react instead for that reason

[17:43] <AlexDaniel> m: start react { whenever Supply.interval(1) -> { .say } }; sleep 2; say 42

[17:43] <camelia> rakudo-moar f74890550: OUTPUT: «42␤»

[17:43] <AlexDaniel> huh…

[17:44] <dogbert17> Zoffix: didn't you fix RT #126423 recently?

[17:44] <synopsebot> RT#126423 [open]: https://rt.perl.org/Ticket/Display.html?id=126423 [BUG] `if` block with slurpy parameter does not receive argument

[17:45] * dogbert17 is looking at old RT's

[17:46] <dogbert17> also the react thingy is RT #127098

[17:46] <synopsebot> RT#127098 [new]: https://rt.perl.org/Ticket/Display.html?id=127098 [BUG] Unhandled exception in code scheduled on thread 4

[17:47] <dogbert17> m: if 42 -> *@a { say @a } # seems to work now

[17:47] <camelia> rakudo-moar f74890550: OUTPUT: «[42]␤»

[17:47] <Zoffix> dogbert17: yeah, but it was a differnt ticket

[17:48] <dogbert17> so two for the price of one then :-)

[17:56] <dogbert17> Zoffix: ok, so you fixed RT #105872 with commit https://github.com/rakudo/rakudo/commit/ef1d22f4c1

[17:56] <synopsebot> RT#105872 [resolved]: https://rt.perl.org/Ticket/Display.html?id=105872 [BUG] 42, 44, 22 -> *@a { say @a.perl }

[17:58] <dogbert17> I'll close 126423 then

[17:59] <AlexDaniel> dogbert17: I think this is more accurate: [ef1d22f4][dfb6d951][59556c70][4b7113fa][00af9ce2]

[18:01] <dogbert17> I wrote down the commits mentioned by Zoffix in 105872

[18:03] <dogbert17> AlexDaniel: unless you decide to reopen it I guess it can be added to the changelog for 2018.02

[18:04] <AlexDaniel> that's exactly from the changelog :)

[18:06] <dogbert17> :-)

[18:44] <Geth> ¦ rakudo: f1b7cc4d99 | usev6++ | 2 files

[18:44] <Geth> ¦ rakudo: [JVM] Avoid NullPointerException in nqp::clone

[18:44] <Geth> ¦ rakudo:

[18:44] <Geth> ¦ rakudo: Some discussion here: https://irclog.perlgeek.de/perl6-dev/2018-02-18#i_15831894

[18:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f1b7cc4d99

[19:24] <Geth> ¦ roast: 27cccfd284 | usev6++ | 2 files

[19:24] <Geth> ¦ roast: [JVM] Fudge some failing tests

[19:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/27cccfd284

[21:03] <lizmat> notable6: weekly

[21:03] <notable6> lizmat, 1 note: 2018-02-19T03:14:40Z <AlexDaniel>: reportable: https://gist.github.com/a23d46247a4aed8a4205ffe96e69485b

[22:03] <lizmat> .tell Zoffix re https://twitter.com/zoffix/status/963789542921854976?s=20 , afaik subst-mutate was originally implemented by TimToady in a time when there was no Nil yet.  the exact reasoning for subst-mutate, apart from optimization purposes, is also unclear to me

[22:03] <yoleaux> lizmat: I'll pass your message to Zoffix.

[22:26] <dogbert17> bisect: await do for ^1000 -> $i { start { "A".match: /(“A”) { say "BOOM: $i) ", $0 if not $0 }/ } }

[22:26] <bisectable6> dogbert17, On both starting points (old=2015.12 new=f1b7cc4) the exit code is 0 and the output is identical as well

[22:26] <bisectable6> dogbert17, Output on both points: «»

[22:26] <pmurias> lizmat: how is subst-mutate faster?

[22:29] <lizmat> well,

[22:29] <lizmat> subst can be faster because the object is guaranteed to be immutable

[22:30] <lizmat> if .subst would provide a left value, you could not make that assumption

[22:30] <lizmat> (is what I remember from a similar discussion many years ago :-)

[22:33] <pmurias> what is a left value?

[22:36] <pmurias> subst-mutate seems useful for something like if $msg.subst-mutate(/excellent/, 'double plus good') { warn "Obsolete vocabulary detected" }

[22:36] <lizmat> a left value is something you can assign to

[22:37] <lizmat> my $a;   # left value

[22:37] <lizmat> 42; # not a left value

[22:38] <pmurias> ahh an lvalue ;)

[22:41] <pmurias> lizmat: I think it was subst/subst-rw in that discussion

[22:45] <lizmat> ah, hmmm...

[22:45] <jnthn> Hm, wasn't part of the reason for substr-mutate to have something to compile s/// into?

[22:45] <jnthn> I may be confusing that with adding S/// so we had an operator form of .subst though

[22:46] <jnthn> Though I guess the symmetry is kinda nice

[22:47] * lizmat clearly is not recovered enough to take part in technical discussions

[22:48] <pmurias> yeah, subst-mutate looks very strongly like something that carries over the Perl 5 idiom over

[22:49] <pmurias> g'night &

[23:03] <Zoffix> .

[23:03] <yoleaux> 22:03Z <lizmat> Zoffix: re https://twitter.com/zoffix/status/963789542921854976?s=20 , afaik subst-mutate was originally implemented by TimToady in a time when there was no Nil yet.  the exact reasoning for subst-mutate, apart from optimization purposes, is also unclear to me

[23:03] <lizmat> Zoffix: please also see discussion with pmurias just now

[23:03] <Zoffix> lizmat: but .subst would not provide an lvalue; that's .='s job

[23:04] <lizmat> "/me clearly is not recovered enough to take part in technical discussions"

[23:04] <Zoffix> And IIRC s/// doesn't even use .subst-mutate; it uses .match and !APPLY-MATCHES or sometyhing

[23:06] <Zoffix> Yeah, .match https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L8346 and Str!APPLY-MATCHES https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L8383

[23:09] <Geth> ¦ rakudo/post-release: 4e5c908d4d | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Str.pm

[23:09] <Geth> ¦ rakudo/post-release: Add comment Str!APPLY-MATCHES is used...

[23:09] <Geth> ¦ rakudo/post-release:

[23:09] <Geth> ¦ rakudo/post-release: ...by stuff outside the class

[23:09] <Geth> ¦ rakudo/post-release: review: https://github.com/rakudo/rakudo/commit/4e5c908d4d

[23:29] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/02/19/2018-08-perl-6ya-giris/

[23:36] <Zoffix> lizmat++ # good weekly

[23:51] <Zoffix> .ask jnthn are Exceptions resumable? I seem to recall a conversation that they weren't (only control exceptions were) and something about removing .resumable method or something). Currently Exception.resume is documented as putting control back to place throwage; wonder if that's accurate: https://docs.perl6.org/type/Exception#method_resume

[23:51] <yoleaux> Zoffix: I'll pass your message to jnthn.

[23:52] <jnthn> Zoffix: They may be.

[23:52] <yoleaux> 23:51Z <Zoffix> jnthn: are Exceptions resumable? I seem to recall a conversation that they weren't (only control exceptions were) and something about removing .resumable method or something). Currently Exception.resume is documented as putting control back to place throwage; wonder if that's accurate: https://docs.perl6.org/type/Exception#method_resume

[23:52] <jnthn> Zoffix: Any exception you throw yourself with die will be.

[23:52] <jnthn> Zoffix: For obvious reasons, those thrown from the guts when it gets into an "impossible to continue" situation cannot be

[23:53] <jnthn> And even then, not all exceptions you can resume make sense to do so (e.g. you might well just resume only to run straight into a more guts-y exception because the initial one was guarding something)

[23:53] <Zoffix> m: sub foo { 0 or die; say "meow" }; try foo; bar $!; sub bar { $^v.resume }

[23:53] <camelia> rakudo-moar f1b7cc4d9: OUTPUT: «This exception is not resumable␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:54] <jnthn> That error is a tad off

[23:54] <Zoffix> m: die; say "meow"; CATCH { default { .resume } }

[23:54] <camelia> rakudo-moar f1b7cc4d9: OUTPUT: «meow␤»

[23:54] <jnthn> You *must* resume inside of the CATCH or CONTROL handler

[23:54] <jnthn> Outside of that, it's too late

[23:55] <jnthn> We may be able to distinguish those cases and give different errors cheaply.

[23:55] <jnthn> (e.g. "You can no longer reusme this exception")

[23:55] <Zoffix> Filed as https://github.com/rakudo/rakudo/issues/1544

[23:55] <jnthn> Thanks

[23:56] <jnthn> I mean, it's not wrong in that the exception is - by that point - not resumable. But it'd be nice to see if we can give a hint when it once would have been.

[23:56] <jnthn> fwiw, the reason for the limitation is that CATCH handlers run in the dynamic scope of the exception and *then* the stack is unwound

[23:57] <jnthn> So a resume is just "don't unwind"
