[00:20] *** lizmat left
[00:24] *** MasterDuke left
[00:35] *** MasterDuke joined
[00:35] *** p6bannerbot sets mode: +v MasterDuke

[00:35] *** MasterDuke left
[00:35] *** MasterDuke joined
[00:35] *** herbert.freenode.net sets mode: +v MasterDuke

[00:35] *** p6bannerbot sets mode: +v MasterDuke

[00:41] <Geth> ¦ rakudo: tbrowder++ created pull request #2277: Partially implement Pod '#' alias for %config :numbered

[00:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2277

[01:33] *** ilogger2 joined
[01:33] *** p6bannerbot sets mode: +v ilogger2

[01:39] <Geth> ¦ roast: tbrowder++ created pull request #472: add tests for pod :numbered alias

[01:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/472

[01:40] <Geth> ¦ roast: bd4f14ab4f | (Tom Browder)++ (committed using GitHub Web editor) | S26-documentation/15-numbered-alias.t

[01:40] <Geth> ¦ roast: add tests for pod :numbered alias (#472)

[01:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bd4f14ab4f

[02:05] *** kysse13 joined
[02:08] *** kysse13 left
[02:44] *** mhall119 joined
[02:46] *** mhall119 left
[03:05] *** epony joined
[03:05] *** p6bannerbot sets mode: +v epony

[03:32] *** ggoebel joined
[03:32] *** p6bannerbot sets mode: +v ggoebel

[05:32] *** Ingersol1 joined
[05:38] *** Ingersol1 left
[06:13] *** jindraj8 joined
[06:18] *** jindraj8 left
[07:23] *** Dazzozo25 joined
[07:28] *** Dazzozo25 left
[07:49] <Geth> ¦ nqp: d46ad39b5d | (Bart Wiegmans)++ | t/moar/12-decodelocaltime.t

[07:49] <Geth> ¦ nqp: [decodelocaltime] Make test less sensitivve to timezone

[07:49] <Geth> ¦ nqp: 

[07:49] <Geth> ¦ nqp: Silly me, thinking the unix epoch starts at 1970-01-01 00:00:00,

[07:49] <Geth> ¦ nqp: forgetting about timezones :-)

[07:49] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d46ad39b5d

[07:54] *** lizmat joined
[07:55] *** p6bannerbot sets mode: +v lizmat

[07:56] <lizmat> Files=1251, Tests=76126, 339 wallclock secs (15.90 usr  5.30 sys + 2388.59 cusr 222.85 csys = 2632.64 CPU)

[08:00] *** Inv1s1ble joined
[08:05] *** Inv1s1ble left
[08:52] <lizmat> Q: is there a reason why the multi/onlyness of an implemented method in a role must match an implementation of a method in a consuming class ?

[09:01] <Geth> ¦ rakudo: f1f6825b9c | (Elizabeth Mattijsen)++ | 2 files

[09:01] <Geth> ¦ rakudo: Fix native array generator script for p6bool -> hllbool

[09:01] <Geth> ¦ rakudo: 

[09:01] <Geth> ¦ rakudo: Apparently the generated code was changed, but not the generator :-(

[09:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f1f6825b9c

[09:31] *** theraspberry24 joined
[09:31] *** theraspberry24 left
[09:51] *** gamingrobot18 joined
[09:56] *** gamingrobot18 left
[10:04] <Geth> ¦ rakudo: ed9b48de6a | (Elizabeth Mattijsen)++ | 7 files

[10:04] <Geth> ¦ rakudo: Standardize use of proto's on .STORE methods

[10:04] <Geth> ¦ rakudo: 

[10:04] <Geth> ¦ rakudo: This should make sure there is no inter-class leakage of .STORE candidates.

[10:04] <Geth> ¦ rakudo: And perhaps this opens up a way to allow for a default implementation of

[10:04] <Geth> ¦ rakudo: .STORE in the Positional / Associative roles.

[10:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ed9b48de6a

[10:15] *** patrickz joined
[10:15] *** p6bannerbot sets mode: +v patrickz

[10:25] <patrickz> Hi everyone!

[10:27] *** lizmat_ joined
[10:27] <patrickz> Perl6 is currently not relocatable. I'd like to change that.

[10:27] *** p6bannerbot sets mode: +v lizmat_

[10:28] <patrickz> I guess I'll try to get it to work on moarvm on linux and only afterwards tackle other combinations.

[10:28] <patrickz> As I'm quite new to the code base I'll probably need some help.

[10:29] *** lizmat left
[10:32] <patrickz> I have already looked around a bit and managed to compile a MoarVM that works in a non install path and yet a different CWD (it starts and displays the help).

[10:36] <patrickz> NQP and Rakudo are trickier because they currently have the installation path hard coded. Setting it to a relative path helps, but then it's dependant on the CWD.

[10:40] <patrickz> What's needed is some logic to retrieve the installation location a runtime.

[10:40] <timotimo> mhh, people will be quite happy to have that feature :)

[10:41] <patrickz> I'm one of them. That is currently blocking me from using P6 at work...

[10:42] <timotimo> how often do you have to move the perl6 install around? :)

[10:43] <patrickz> It's not about moving, but about deploying.

[10:43] <timotimo> OK

[10:43] <lizmat_> ++patrickz

[10:43] *** lizmat_ is now known as lizmat

[10:43] <patrickz> When perl6 is relocatable I can put my program next to it, zip it up and send it to my colleagues.

[10:46] <patrickz> The most naive way I can think of is setting config<prefix> and config<libdir> early on during rakudo startup to an absolute path.

[10:46] <timotimo> i wonder when we'll find something that'll let us throw out old precompilation results

[10:46] <patrickz> prefix is the install path and libdir the Perl6 internal library path.

[10:48] <timotimo> 759M../install/share/perl6

[10:48] <lizmat> 1.2G for me  :-)

[10:49] <lizmat> guess I do many more core setting compilations / spectests

[10:49] <timotimo> i don't think they put very much in there actually?

[10:49] <timotimo> like, the core setting file will be overwritten each time?

[10:50] <lizmat> not sure: du -shc install/share/perl6/precomp/   # 1.0G

[10:51] <timotimo> what do we have to introspect the precomp file?

[10:51] <timotimo> folder*

[10:51] <lizmat> nothing, afaik  :-(

[10:54] <patrickz> Is QASTOperationsMAST a simple mapping of NQP Ops to MoarVM opcodes?

[10:55] <timotimo> it's relatively simple, but there's a few complex bits in there, too

[10:55] <patrickz> nqp/src/vm/moar/QAST/QASTOperationsMAST.nqp that is...

[10:55] <lizmat> FSVO simple

[10:56] <timotimo> some ops are implemented as a little sub that emits MAST "manually", or via a different QAST tree

[10:56] <patrickz> But that's the basic idea? (I'm totally new to the rakudo/nqp/moarvm codebases, trying to get the big picture atm)

[10:56] <timotimo> yep, that's the idea

[10:59] <robertle> lizmat, timotimo: aren't all precomp files organized in folders where the folder name is a hash of the compiler id? so you could just throw away all such folders that do not match the current compiler, no?

[11:00] <timotimo> i'm grepping all the precomp files for strings and i'm seeing a whole lot of anon classes named like "<anon|114083744>"

[11:00] <timotimo> i think the more anon classes we move out and give proper, shorter names, the more string memory we save

[11:00] <timotimo> though of course the effect is tiny

[11:00] <timotimo> robertle: i thought the compiler id is just a part of the hash input

[11:00] <timotimo> cat wants cuddles on the couch, bbl

[11:00] <lizmat> robertle: yes, and since just about everything is automatically rebuilt, I sometimes just nuke the precomp directories on my machinne

[11:02] <robertle> not sure, but my investigations a while ago: https://wiki.debian.org/Perl6PreCompProposal if this is true, it should be simple to write something that removes all the dirs for not-current compilers

[11:02] <robertle> afk

[11:04] <AlexDaniel> dogbert2: can you confirm that it builds properly now?

[11:06] <AlexDaniel> patrickz: but what's the current situation?

[11:06] <AlexDaniel> is moarvm relocatable?

[11:06] <patrickz> In mainline neither moarvm nor rakudo are relocatable.

[11:06] <AlexDaniel> do we even have a ticket for that?

[11:06] <AlexDaniel> it's a very well known problem, but still, it needs a ticket if there's none

[11:07] <patrickz> I don't know. Lets see...

[11:21] <timotimo> it might be necessary for someone who knows more about OS internals than me to check whether nuking precomp files while a moarvm process is running somewhere will cause problems

[11:21] <timotimo> i've seen segfaults under those circumstances

[11:24] <patrickz> AlexDaniel: RT#122752 is related. I didn't find any other ticket.

[11:24] <synopsebot> RT#122752 [new]: https://rt.perl.org/Ticket/Display.html?id=122752 [STAR] [BUILD] Allow different INSTALLLOCATION for Rakudo Star MSI package

[11:24] <AlexDaniel> create some then

[11:26] <patrickz> That's a task that requires changes in moarvm and rakudo. Should I create two tickets then?

[11:37] <lizmat> patrickz: can any change be done to moarvm without needing an immediate change to nqp / rakudo

[11:38] <patrickz> I think so, yes.

[11:38] <lizmat> then I would say different tickets  :-)

[11:38] <patrickz> I would actually try to do it that way. Work my way up.

[11:39] <lizmat> patrickz++  # sounds like a plan

[11:44] <patrickz> Tickets are created.

[11:46] <AlexDaniel> patrickz++ that's a good start :)

[12:16] <nine> On Linux at least, deleting precomp files shouldn't cause an issue even if they are in use by moar. The files are kept open and Linux will only really delete them when the last user closes them.

[12:17] <timotimo> that's what i thought, too.

[12:17] <nine> While the compiler id is part of what goes into a precomp files's hash, they are also stored in directories named after the compiler id.

[12:17] <timotimo> at the time i thought it was because rewriting the files was causing the file to be truncated and rewritten

[12:17] <timotimo> but the fix i put in didn't actually seem to fix that, i later discovered ... iirc

[12:17] <nine> Yes, modifying the files in place would cause interesting issues for sure :)

[12:18] <timotimo> isn't there an argument to mmap that'll COW the file contents?

[12:18] <timotimo> but still share it between different processes?

[12:19] <nine> MAP_PRIVATE Create a private copy-on-write mapping.  Updates to the mapping are not visible to other processes mapping the same file, and are not carried through to the underlying file.  It is unspecified whether changes made to the  file  after the mmap() call are visible in the mapped region.

[12:20] <timotimo> that still means that potentially if the file on the filesystem changes the process might explode?

[12:21] <nine> looks like

[12:23] * timotimo stumbles upon style="width: 0.1% white-space: nowrap;"

[12:37] <tbrowder__> hi folks

[12:39] <tbrowder__> i’ve tried to change two quantifier constructs in src/Perl6/Grammar.nqp to a simple ‘?’ and am getting a build failure.

[12:40] <tbrowder__> i changed the one instance of “**1” to “?” and 15 instances of “**0..1” to “?”.

[12:44] <tbrowder__> akaik, those changes should not have caused a problem, but i have also seen that seemingly simple nqp changes can cause some strange results in faraway places. does anyone see an error in the changes i made?

[12:44] <timotimo> well

[12:44] <timotimo> going from **0..1 to ? will change what type you get

[12:45] <timotimo> **0..1 will always give you a list, ? will never give you a list

[12:45] <timotimo> so you'll definitely have to change the usages, too

[12:45] <timotimo> FWIW, the performance for ? might be a tiny bit better compared to **0..1

[12:46] <timotimo> just the tinyest bit. i haven't measured it at all.

[12:55] <tbrowder__> ah, ok, i thought about that at first because some just looked like a list, but thanks for that info. i’m not sure i’ve seen stated before.

[12:55] <tbrowder__> that may be the key to something else i’ve been trying to do.

[12:56] <tbrowder__> timotimo: thanks!

[12:58] <tbrowder__> i think i’ll leave all as is, but maybe leave a note...

[13:00] <timotimo> maybe we can have a look at the most used regexes from the perl6 grammar and replace **0..1 with ? (including the necessary changes to Actions.nqp) and see if that makes a noticable change in core setting compilation memory use

[13:01] <timotimo> it's used in quite a few places it seems like

[13:01] <timotimo> if i'm not mistaken, having no entry there will always cost us an empty list that has to be allocated and will stick around a long time

[13:02] <tbrowder__> i would love to see you do that, i think that’s beyond my skill level now

[13:04] <timotimo> i don't know the exact changes for [ ]**0..1 actually

[13:04] <timotimo> m: "abc" ~~ / [ <ident> ]**0..1 /; say $/.perl

[13:04] <camelia> rakudo-moar ed9b48de6: OUTPUT: «Match.new(orig => "abc", hash => Map.new((:ident([Match.new(made => Any, from => 0, list => (), orig => "abc", hash => Map.new(()), pos => 3)]))), pos => 3, made => Any, from => 0, list => ())␤»

[13:04] <timotimo> m: "abc" ~~ / [ <ident> ]? /; say $/.perl

[13:04] <camelia> rakudo-moar ed9b48de6: OUTPUT: «Match.new(pos => 3, hash => Map.new((:ident(Match.new(pos => 3, hash => Map.new(()), made => Any, list => (), orig => "abc", from => 0)))), made => Any, list => (), orig => "abc", from => 0)␤»

[13:04] <timotimo> OK

[13:05] <timotimo> so in [ ]**0..1 we will actually get lists for the named captures inside

[13:06] <tbrowder__> try the **1 construct

[13:06] <timotimo> m: "abc" ~~ / [ <ident> ]**1 /; say $/.perl

[13:06] <camelia> rakudo-moar ed9b48de6: OUTPUT: «Match.new(list => (), hash => Map.new((:ident([Match.new(list => (), hash => Map.new(()), orig => "abc", pos => 3, made => Any, from => 0)]))), made => Any, from => 0, pos => 3, orig => "abc")␤»

[13:06] <timotimo> m: "abc" ~~ / [ <ident> ] /; say $/.perl

[13:06] <camelia> rakudo-moar ed9b48de6: OUTPUT: «Match.new(orig => "abc", made => Any, pos => 3, hash => Map.new((:ident(Match.new(hash => Map.new(()), pos => 3, list => (), from => 0, orig => "abc", made => Any)))), list => (), from => 0)␤»

[13:06] <timotimo> same thing i guess?

[13:07] <timotimo> i only see a single **1 in the Grammar

[13:07] <tbrowder__> that was my guess, docs say **1 is short for **0..1

[13:08] <tbrowder__> yes, just one is all i’ve found, 15 of the others

[13:10] <timotimo> what?

[13:10] <timotimo> that seems strange

[13:10] <timotimo> m: say "" ~~ / a ** 1 /

[13:10] <camelia> rakudo-moar ed9b48de6: OUTPUT: «Nil␤»

[13:10] <timotimo> ** 1 must be short for ** 1..1

[13:11] <tbrowder__> i may have misread, but i’ll recheck

[13:11] <timotimo> if you read right we should fix that

[13:12] <tbrowder__> but ^^ makes more sense

[13:13] <tbrowder__> in fact, that was my first thougt becaause i alway think of exponentiation with any **

[13:15] <tbrowder__> m: say “‘ ~~ / a **0..1 /

[13:15] <camelia> rakudo-moar ed9b48de6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in curly double quotes; couldn't find final '”' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3say “‘ ~~ / a **0..1 /7⏏5<EOL>␤    expecting any of…»

[13:16] <tbrowder__> m: say “” ~~ / a **0..1 /

[13:16] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢｣␤»

[13:17] *** ZzZombo_ joined
[13:17] *** p6bannerbot sets mode: +v ZzZombo_

[13:17] <tbrowder__> m: say “aaa” ~~ / a ** 1 /

[13:17] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢a｣␤»

[13:18] <tbrowder__> m: say “aaa” ~~ / a **0..1 /

[13:18] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢a｣␤»

[13:18] <tbrowder__> looks the same?

[13:19] *** ZzZombo_ is now known as ZzZombo

[13:22] <tbrowder__> m: say “aaa” ~~ /a **0..3/

[13:22] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢aaa｣␤»

[13:23] <tbrowder__> m: say “aaa” ~~ /a**2/

[13:23] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢aa｣␤»

[13:24] <tbrowder__> m: say “aaa” ~~ /a**0..2/

[13:24] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢aa｣␤»

[13:26] <tbrowder__> m: say “aaa” ~~ /[a]**1/; say $/.dump

[13:26] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢a｣␤␤»

[13:28] <tbrowder__> m: say “aaa” ~~ /[a]**0..2/; say $/.dump

[13:28] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢aa｣␤␤»

[13:30] <tbrowder__> m: say “aaa” ~~ /[a]**0..2/;say $/.perl

[13:30] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢aa｣␤Match.new(orig => "aaa", pos => 2, made => Any, from => 0, list => (), hash => Map.new(()))␤»

[13:47] *** walterve22 joined
[13:49] *** walterve22 left
[13:52] <Geth> ¦ roast: 92286fae07 | (Zoffix Znet)++ | S11-modules/require.t

[13:52] <Geth> ¦ roast: [v6.d REVIEW] Actually test constant has good value

[13:52] <Geth> ¦ roast: 

[13:52] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/6aa2290b4

[13:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/92286fae07

[13:55] *** patrickz left
[13:57] *** savoca14 joined
[14:00] <Geth> ¦ roast: 322694eb2e | (Zoffix Znet)++ | S32-io/io-special.t

[14:00] <Geth> ¦ roast: [v6.d REVIEW] Be explicit about IO::Special.Str/.what values

[14:00] <Geth> ¦ roast: 

[14:00] <Geth> ¦ roast: Otherwise they might contain garbage and test would still pass,

[14:00] <Geth> ¦ roast: the way it's written.

[14:00] <Geth> ¦ roast: 

[14:00] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/43ec5437d

[14:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/322694eb2e

[14:01] *** savoca14 left
[14:05] <Geth> ¦ roast: 02ab716ce1 | (Zoffix Znet)++ | S32-io/io-spec-unix.t

[14:05] <Geth> ¦ roast: [v6.d REVIEW] Expand IO::Spec::Unix.basename

[14:05] <Geth> ¦ roast: 

[14:05] <Geth> ¦ roast: Include a test with backslash, which isn't a path separator on *nix

[14:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/02ab716ce1

[14:07] <Geth> ¦ roast: c91244ef1a | (Zoffix Znet)++ | S32-io/io-spec-win.t

[14:07] <Geth> ¦ roast: [v6.dt REVIEW] Expan IO::Spec::Win32.basename

[14:07] <Geth> ¦ roast: 

[14:07] <Geth> ¦ roast: Include test with backslash in path, which is a path sep on Win32

[14:07] <Geth> ¦ roast: 

[14:07] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/c3c51ede0

[14:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c91244ef1a

[14:11] <Geth> ¦ roast: cf255ba920 | (Zoffix Znet)++ | S32-io/null-char.t

[14:11] <Geth> ¦ roast: [v6.d REVIEW] Add &open to list of NUL test subs

[14:11] <Geth> ¦ roast: 

[14:11] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/b16fbd3b2

[14:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cf255ba920

[14:15] <Geth> ¦ roast: c3b40394b8 | (Zoffix Znet)++ | S02-types/native.t

[14:15] <Geth> ¦ roast: [v6.d REVIEW] Move int test to runtime

[14:15] <Geth> ¦ roast: 

[14:15] <Geth> ¦ roast: To avoid any future optimizations making this code die prematurely

[14:15] <Geth> ¦ roast: 

[14:15] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/a8a968499

[14:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c3b40394b8

[14:19] <jnthn> Ahh...home at last. :)

[14:19] <AlexDaniel> samcv: hello, how is it going?

[14:20] <AlexDaniel> btw, we saw no toaster results so far. I'll see if I can get new toaster going today, if not then probably will run the old one

[14:25] *** ZzZombo left
[14:26] *** ZzZombo joined
[14:26] *** p6bannerbot sets mode: +v ZzZombo

[14:36] <samcv> AlexDaniel: heyo

[14:56] *** tinoco15 joined
[15:00] *** tinoco15 left
[15:38] *** lizmat left
[15:57] <Geth> ¦ roast: 9f50f42d11 | (Zoffix Znet)++ | S32-io/io-path.t

[15:57] <Geth> ¦ roast: [v6.d REVIEW] Remove fudged .child-secure

[15:57] <Geth> ¦ roast: 

[15:57] <Geth> ¦ roast: We're not doing this stuff in 6.d, and I'm increasingly leaning

[15:57] <Geth> ¦ roast: towards never doing it and instead securize .open

[15:57] <Geth> ¦ roast: 

[15:57] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/f3c5dae28

[15:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9f50f42d11

[15:59] <Geth> ¦ roast: 0766c4617a | (Zoffix Znet)++ | fudge

[15:59] <Geth> ¦ roast: Teach fudger new Test::Util routines

[15:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0766c4617a

[16:03] <Geth> ¦ roast: 4124c1b592 | (Zoffix Znet)++ | S12-introspection/attributes.t

[16:03] <Geth> ¦ roast: [v6.d REVIEW] Test actual value instead of .gist of Attr shape

[16:03] <Geth> ¦ roast: 

[16:03] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/0b199e1a4

[16:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4124c1b592

[16:03] *** DyDyMan12 joined
[16:04] <Geth> ¦ roast: 3b5fad4897 | (Zoffix Znet)++ | S32-io/dir.t

[16:04] <Geth> ¦ roast: [v6.d REVIEW] Use is-path helper for $*CWD tests

[16:04] <Geth> ¦ roast: 

[16:04] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/41b7f9f6a

[16:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3b5fad4897

[16:07] *** DyDyMan12 left
[16:07] <Geth> ¦ roast: 32c3c97c4e | (Zoffix Znet)++ | 2 files

[16:07] <Geth> ¦ roast: [v6.d REVIEW] Appendicise .match: Nil test

[16:07] <Geth> ¦ roast: 

[16:07] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/0a67c4316

[16:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/32c3c97c4e

[16:08] <Geth> ¦ roast: dcadfbcec9 | (Zoffix Znet)++ | S16-io/words.t

[16:08] <Geth> ¦ roast: [v6.d REVIEW] More precise test for words()

[16:08] <Geth> ¦ roast: 

[16:08] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/8f78ca604

[16:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dcadfbcec9

[16:11] <Geth> ¦ roast: c327c01e0d | (Zoffix Znet)++ | S02-literals/radix.t

[16:11] <Geth> ¦ roast: [v6.d REVIEW] Remove references to particular impls

[16:11] <Geth> ¦ roast: 

[16:11] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/ea1aa6721

[16:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c327c01e0d

[16:12] *** semarie14 joined
[16:15] *** semarie14 left
[16:38] <Geth> ¦ roast: 8858608e2a | (Zoffix Znet)++ | S16-io/home.t

[16:38] <Geth> ¦ roast: [v6.d REVIEW] Polish $*HOME tests

[16:38] <Geth> ¦ roast: 

[16:38] <Geth> ¦ roast: - Don't rely on $*TMPDIR

[16:38] <Geth> ¦ roast: - Use is-path for path testing

[16:38] <Geth> ¦ roast: 

[16:38] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/71a6423a9

[16:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8858608e2a

[16:45] <[Tux]> Rakudo version 2018.08-105-ged9b48de6 - MoarVM version 2018.08-79-gda2072b57

[16:45] <[Tux]> csv-test-xs-20      0.425 -  0.432

[16:45] <[Tux]> csv-ip5xs           0.884 -  0.901

[16:45] <[Tux]> test-t --race       0.923 -  0.925

[16:45] <[Tux]> test-t              2.089 -  2.124

[16:45] <[Tux]> csv-ip5xs-20        7.235 -  7.361

[16:45] <[Tux]> test                8.947 -  8.956

[16:45] <[Tux]> test-t-20 --race   12.029 - 12.087

[16:45] <[Tux]> csv-parser         23.919 - 24.861

[16:45] <[Tux]> test-t-20          35.828 - 36.839

[16:46] <Geth> ¦ roast: ba05946b54 | (Zoffix Znet)++ | S03-operators/andthen.t

[16:46] <Geth> ¦ roast: [v6.d REVIEW] Clarify andthen test desc

[16:46] <Geth> ¦ roast: 

[16:46] <Geth> ¦ roast: Not all impls might use `andthen` to handle `with`

[16:46] <Geth> ¦ roast: 

[16:46] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/e036c4e28

[16:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ba05946b54

[16:47] <Geth> ¦ roast: 341d655725 | (Zoffix Znet)++ | S03-operators/notandthen.t

[16:47] <Geth> ¦ roast: [v6.d REVIEW] Clarify desc of notandthen test

[16:47] <Geth> ¦ roast: 

[16:47] <Geth> ¦ roast: Not all impls might use notandthen to handle `without`

[16:47] <Geth> ¦ roast: 

[16:47] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/50b54916d

[16:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/341d655725

[16:54] <Geth> ¦ roast: c2e247d880 | (Zoffix Znet)++ | S32-io/io-path.t

[16:54] <Geth> ¦ roast: [v6.d REVIEW] Use is-path routine for IO::Path.perl.EVAL test

[16:54] <Geth> ¦ roast: 

[16:54] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/1ed18b431

[16:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c2e247d880

[17:08] <Geth> ¦ roast: a3181cfa7b | (Zoffix Znet)++ | S02-types/sethash.t

[17:08] <Geth> ¦ roast: [v6.d REVIEW] Fix bad Set key container test

[17:08] <Geth> ¦ roast: 

[17:08] <Geth> ¦ roast: Original test doesn't actually cover the bug in the ticket

[17:08] <Geth> ¦ roast: 

[17:08] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/0e018d48b

[17:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a3181cfa7b

[17:10] <Geth> ¦ roast: bf3a2159bb | (Zoffix Znet)++ | S02-types/sethash.t

[17:10] <Geth> ¦ roast: [v6.d REVIEW] Cover Bag|Mix in cont key test too

[17:10] <Geth> ¦ roast: 

[17:10] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/0e018d48b

[17:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bf3a2159bb

[17:18] *** Fumler joined
[17:24] *** Fumler left
[17:37] <TimToady> m: say “a” ~~ /(b)? a/; say $0

[17:37] <yoleaux> 13 Sep 2018 18:36Z <Zoffix> TimToady: there's an Issue revolving around something you said about `returns`, if you wanted to comment: https://github.com/rakudo/rakudo/issues/2274 R#2274

[17:37] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢a｣␤Nil␤»

[17:37] <synopsebot> R#2274 [closed]: https://github.com/rakudo/rakudo/issues/2274 Future removal of returns?

[17:37] <TimToady> m: say “a” ~~ /(b) ** 0..1 a/; say $0

[17:37] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢a｣␤[]␤»

[17:38] <TimToady> tbrowder__: ^^^ here is the actual difference

[17:41] <TimToady> that is, it doesn't make a difference when quantifying a mere string, only when capturing

[17:43] <TimToady> m: say “ba” ~~ /(b) a/; say $0

[17:43] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢ba｣␤ 0 => ｢b｣␤｢b｣␤»

[17:43] <TimToady> m: say “ba” ~~ /(b) ** 1 a/; say $0

[17:43] <camelia> rakudo-moar ed9b48de6: OUTPUT: «｢ba｣␤ 0 => ｢b｣␤[｢b｣]␤»

[17:44] <TimToady> basically quantified captures always produce lists of captures

[17:47] <TimToady> so we use ** when we plan to feed the result to a "for", whereas ? is more for intended for "if" or "with" processing, hence a scalar the defined match or Nil is more appropriate

[17:47] <TimToady> hmm, that's almost English...

[17:49] <TimToady> ...a scalar thing, the defined match or Nil, is...

[17:53] <TimToady> as for why it uses ** 0..1 in the grammar, ? used to return a list, so that was a quick hack to continue to feed the results to action routines that expected a list

[17:53] <TimToady> as you discovered :)

[18:05] <tbrowder__> Thanks!

[18:45] *** kilogram joined
[18:45] *** ohama17 joined
[18:47] *** lizmat joined
[18:48] *** kilogram left
[18:48] *** p6bannerbot sets mode: +v lizmat

[18:51] *** ohama17 left
[19:21] <lizmat> sometimes I feel our methods in Positional / Associative miss a CLEAR method to reset the whole thing

[19:28] <timotimo> like binding a new nqp::list or nqp::hash to the storage attribute?

[19:32] <lizmat> yeah

[19:32] <lizmat> I'm now working on an Array::Agnostic role that will do all the stuff that Arrays do

[19:33] <lizmat> but without needIng to know how the representation is

[19:33] <lizmat> if I want to do something like .STORE, then I need to do repeated DELETE-POS's from the end back

[19:36] <samcv> b2gills: i'm working on a streaming utf16 decoder fyi

[20:05] <b2gills> \O/

[20:10] <samcv> yay it works

[20:11] <b2gills> ｢\O/｣ xx 16

[20:12] <samcv> b2gills: would you mind testing it?

[20:12] <b2gills> I was just reporting something I found while responding on the users mailing list

[20:12] <samcv> ah ok

[20:12] <samcv> i thought it was you who needed it

[20:13] <b2gills> I put utf16 data into a file and used `run <cat test.in>, :out, :enc<utf16>`

[20:15] <b2gills> The other people were saying to remove the nulls after decoding which is a good way to end up with mojibake

[20:29] <samcv> b2gills: is there an online place i can read the mailing list? also just pushed the utf16 decodestream code

[20:30] <samcv> i think i might bump nqp later

[20:31] <samcv> so now we'll be able to do decodestream, so .lines and others, plus i fixed the issue of writing a 16 bit buffer

[20:31] <b2gills> https://www.nntp.perl.org/group/perl.perl6.users/2018/09/msg5551.html

[20:31] <samcv> though i'm guessing utf16 at least worked some amount?

[20:32] <b2gills> Str.decode and Str.encode

[20:32] <samcv> i never tested: open 'foo', :w, :enc<utf16>; $fh.print('blah')

[20:32] <samcv> ^or did this not work due to unimplemented functionality i fixed yesterday?

[20:33] <b2gills> All I was did was test `run(<cat test.in>, :out, :enc<utf16>).out.lines`

[20:33] <b2gills> I put the data into test.in using echo on the command line

[20:33] <samcv> m: my $fh = open 'test', :w, :enc<utf16>; $fh.print('testing')

[20:33] <camelia> rakudo-moar ed9b48de6: OUTPUT: «open is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub open at src/RESTRICTED.setting line 9␤  in block <unit> at <tmp> line 1␤␤»

[20:34] <samcv> let me roll back my moarvm and test all these so i know where we were at before

[20:34] <timotimo> evalable6: my $fh = open 'test', :w, :enc<utf16>; $fh.print('testing')

[20:34] <evalable6> timotimo, rakudo-moar ed9b48de6: OUTPUT: «(exit code 1) Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at /tmp/74S6p5EZlH line 1␤␤»

[20:34] <samcv> ok. .print did not work at all.

[20:34] <timotimo> evalable6: my $fh = open 'test', :w, :enc<utf16>; say $fh.perl

[20:34] <evalable6> timotimo, rakudo-moar ed9b48de6: OUTPUT: «Failure.new(exception => X::AdHoc.new(payload => "Failed to open file /home/bisectable/git/whateverable/test: Read-only file system"), backtrace => Backtrace.new)␤»

[20:35] <samcv> ok well that's good that our utf16 enncoding is now functional

[20:35] <timotimo> evalable6: my $fh = open '/tmp/test', :w, :enc<utf16>; $fh.print('testing')

[20:35] <evalable6> timotimo, rakudo-moar ed9b48de6: OUTPUT: «(exit code 1) write_fhb requires a native array of uint8 or int8␤  in block <unit> at /tmp/0j1rpfRQtc line 1␤␤»

[20:35] * samcv goes to bump nqp and rakudo

[20:36] <Geth> ¦ nqp: cb3d9562e2 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[20:36] <Geth> ¦ nqp: Bump MoarVM to get utf16 fh write and decodestream support

[20:36] <Geth> ¦ nqp: 

[20:36] <Geth> ¦ nqp: Changes: 2018.08-70-g1d68871d0..2018.08-80-g578c2f762

[20:36] <Geth> ¦ nqp: 578c2f762 Add support for utf-16 decodestream

[20:36] <Geth> ¦ nqp: 3388d1229 Fix wrong field in exprjit cast and add macro

[20:36] <Geth> ¦ nqp: 51f2db579 Add support in write_fhb op for writing 16 bit VM arrays

[20:36] <Geth> ¦ nqp: 848f74e37 Add exprjit macros for register type constants

[20:36] <Geth> ¦ nqp: 18cb687c4 Add ^zero/^one exprjit macros for 0 and 1 integers

[20:36] <Geth> ¦ nqp: 2025a47da Use SIZEOF_MEMBER instead of literal in exprjit

[20:36] <Geth> ¦ nqp: 7567696e2 Pass MVMRegister to lexical-binding fn for exprjit

[20:36] <Geth> ¦ nqp: ccf3dd373 Fix alignment of nursery allocations

[20:36] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cb3d9562e2

[20:36] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.08-70-g1d68871d0...2018.08-80-g578c2f762

[20:36] <samcv> tbh i assumed we had working utf16, otherwise i would have fixed this earlier :P but i never tested it

[20:37] <samcv> well we had encode and decode support, but never tested the other ones. so glad you brought that to my attention b2gills++

[20:37] <b2gills> I assume it was just overlooked when the streaming API was added

[20:38] <Geth> ¦ rakudo: 8fcebb8615 | (Samantha McVey)++ | tools/build/NQP_REVISION

[20:38] <Geth> ¦ rakudo: Bump Moar/NQP to get utf16 decodestream and fh write support

[20:38] <Geth> ¦ rakudo: 

[20:38] <Geth> ¦ rakudo: Changes: 2018.08-52-g000fea1..2018.08-63-gcb3d9562e

[20:38] <Geth> ¦ rakudo: cb3d9562e Bump MoarVM to get utf16 fh write and decodestream support

[20:38] <Geth> ¦ rakudo: d46ad39b5 [decodelocaltime] Make test less sensitivve to timezone

[20:38] <Geth> ¦ rakudo: a7351c4a0 put the name of the SC in every type's extra info

[20:38] <Geth> ¦ rakudo: 88e732216 bump moarvm to get new profiler data structure

[20:38] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[20:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8fcebb8615

[20:38] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.08-52-g000fea1...2018.08-63-gcb3d9562e

[20:48] <Geth> ¦ roast: aaa23d062e | (Zoffix Znet)++ | S32-array/pop.t

[20:48] <Geth> ¦ roast: Remove trailing whitespace

[20:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/aaa23d062e

[20:49] <Geth> ¦ roast: 5eba41d42f | (Zoffix Znet)++ | S32-array/pop.t

[20:49] <Geth> ¦ roast: [v6.d REVIEW] Reformat ghost el tests + add plan

[20:49] <Geth> ¦ roast: 

[20:49] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/2973f845c

[20:49] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5eba41d42f

[20:49] <Geth> ¦ roast: e5a48ebc39 | (Zoffix Znet)++ | S32-array/pop.t

[20:49] <Geth> ¦ roast: [v6.d REVIEW] Cover :delete in ghost el test

[20:49] <Geth> ¦ roast: 

[20:49] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/2973f845c

[20:49] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e5a48ebc39

[20:50] <samcv> b2gills: would you mind responding and say utf16 has been added to the latest master?

[20:50] <samcv> since i'm not on the mailing list

[20:51] <b2gills> I did

[20:51] <samcv> ok cool :)

[21:02] <Geth> ¦ roast: 589f65b788 | (Zoffix Znet)++ | S32-io/io-handle.t

[21:02] <Geth> ¦ roast: [v6.d REVIEW] Toss IO::Handle.new.encoding test

[21:02] <Geth> ¦ roast: 

[21:02] <Geth> ¦ roast: There are several indications[^1][^2][^3] that we might want

[21:02] <Geth> ¦ roast: to remove .new in the future entirely or at least not set up the

[21:02] <Geth> ¦ roast: encoding until the open call, and this test would interfere with that.

[21:02] <Geth> ¦ roast: 

[21:02] <Geth> ¦ roast: [1] http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-07-11#l201

[21:02] <Geth> ¦ roast: [2] https://github.com/rakudo/rakudo/issues/2039 R#2039

[21:02] <synopsebot> R#2039 [open]: https://github.com/rakudo/rakudo/issues/2039 [IO][LTA] LTA IO::Handle.encoding can have a value, but no valid decoder is setup

[21:02] <Geth> ¦ roast: [3] https://github.com/rakudo/rakudo/issues/2049 R#2049

[21:02] <synopsebot> R#2049 [open]: https://github.com/rakudo/rakudo/issues/2049 [IO] IO::CatHandle.encoding mismatched with IO::Handle.encoding

[21:02] <Geth> ¦ roast: [4] https://github.com/rakudo/rakudo/issues/2050 R#2050

[21:02] <synopsebot> R#2050 [open]: https://github.com/rakudo/rakudo/issues/2050 [IO] IO::[Cat]Handle.open missing some encoding options

[21:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/589f65b788

[21:05] *** oldlaptop22 joined
[21:05] *** oldlaptop22 left
[21:12] *** PufferBot joined
[21:13] *** p6bannerbot sets mode: +v PufferBot

[21:50] <Geth> ¦ roast: e730fb0781 | (Zoffix Znet)++ | S32-io/io-handle.t

[21:50] <Geth> ¦ roast: [v6.d REVIEW] Fix IO::Handle.flush test

[21:50] <Geth> ¦ roast: 

[21:50] <Geth> ¦ roast: We make the first write unbuffered to test if we can write

[21:50] <Geth> ¦ roast: to a handle at all, so to trigger buffering we have to perform

[21:50] <Geth> ¦ roast: two separate writes and only the second one will buffer.

[21:50] <Geth> ¦ roast: 

[21:50] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/449561528

[21:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e730fb0781

[21:57] <Geth> ¦ roast: 4c89683050 | (Zoffix Znet)++ | S32-io/io-spec-win.t

[21:57] <Geth> ¦ roast: [v6.d REVIEW] Loosen IO::Path::Win32.absolute test

[21:57] <Geth> ¦ roast: 

[21:57] <Geth> ¦ roast: Do not force implementations to use the same path separator

[21:57] <Geth> ¦ roast: that was used during path's creation. Simply test the combiners

[21:57] <Geth> ¦ roast: on existing seps don't cause addition of another sep before it.

[21:57] <Geth> ¦ roast: 

[21:57] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/8ee0a0a6a

[21:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4c89683050

[22:01] <Geth> ¦ roast: 1f26d0b796 | (Zoffix Znet)++ | S32-io/io-handle.t

[22:01] <Geth> ¦ roast: [v6.d REVIEW] Toss .nl-in on unopened handle tests

[22:01] <Geth> ¦ roast: 

[22:01] <Geth> ¦ roast: There are several indications[^1][^2][^3] that we might want

[22:01] <Geth> ¦ roast: to restrict functionalities of unopened handles. Remove these

[22:01] <Geth> ¦ roast: proptests to ensure they don't interfere with that plan in the future

[22:01] <Geth> ¦ roast: 

[22:01] <Geth> ¦ roast: [1] http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-07-11#l201

[22:01] <Geth> ¦ roast: [2] https://github.com/rakudo/rakudo/issues/2039 R#2039

[22:01] <synopsebot> R#2039 [open]: https://github.com/rakudo/rakudo/issues/2039 [IO][LTA] LTA IO::Handle.encoding can have a value, but no valid decoder is setup

[22:01] <Geth> ¦ roast: [3] https://github.com/rakudo/rakudo/issues/2049 R#2049

[22:01] <synopsebot> R#2049 [open]: https://github.com/rakudo/rakudo/issues/2049 [IO] IO::CatHandle.encoding mismatched with IO::Handle.encoding

[22:02] <Geth> ¦ roast: [4] https://github.com/rakudo/rakudo/issues/2050 R#2050

[22:02] <synopsebot> R#2050 [open]: https://github.com/rakudo/rakudo/issues/2050 [IO] IO::[Cat]Handle.open missing some encoding options

[22:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1f26d0b796

[22:18] <Geth> ¦ roast: 92be0841ac | (Zoffix Znet)++ | S32-io/open.t

[22:18] <Geth> ¦ roast: [v6.d REVIEW] Remove 6.d TODO comment for .encoding

[22:18] <Geth> ¦ roast: 

[22:18] <Geth> ¦ roast: Yes, it's inconsistent, but likely in a fairly heavy use

[22:18] <Geth> ¦ roast: and we have a million other inconsistent things too, so

[22:18] <Geth> ¦ roast: we'll delay doing anything breaking about this until

[22:18] <Geth> ¦ roast: the Great Inconsistencies Refactor some time in the future

[22:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/92be0841ac

[22:21] <Geth> ¦ roast: ebcf115187 | (Zoffix Znet)++ | S32-io/io-handle.t

[22:21] <Geth> ¦ roast: [v6.d REVIEW] Toss unopened handle .encoding tests

[22:21] <Geth> ¦ roast: 

[22:21] <Geth> ¦ roast: There are several indications[^1][^2][^3] that we might want

[22:21] <Geth> ¦ roast: to restrict functionalities of unopened handles. Remove these

[22:21] <Geth> ¦ roast: proptests to ensure they don't interfere with that plan in the future

[22:21] <Geth> ¦ roast: 

[22:21] <Geth> ¦ roast: [1] http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-07-11#l201

[22:21] <Geth> ¦ roast: [2] https://github.com/rakudo/rakudo/issues/2039 R#2039

[22:21] <synopsebot> R#2039 [open]: https://github.com/rakudo/rakudo/issues/2039 [IO][LTA] LTA IO::Handle.encoding can have a value, but no valid decoder is setup

[22:21] <Geth> ¦ roast: [3] https://github.com/rakudo/rakudo/issues/2049 R#2049

[22:21] <synopsebot> R#2049 [open]: https://github.com/rakudo/rakudo/issues/2049 [IO] IO::CatHandle.encoding mismatched with IO::Handle.encoding

[22:21] <Geth> ¦ roast: [4] https://github.com/rakudo/rakudo/issues/2050 R#2050

[22:21] <synopsebot> R#2050 [open]: https://github.com/rakudo/rakudo/issues/2050 [IO] IO::[Cat]Handle.open missing some encoding options

[22:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ebcf115187

[22:26] <Geth> ¦ roast: 40adba0df9 | (Zoffix Znet)++ | S32-io/io-path.t

[22:26] <Geth> ¦ roast: [v6.d REVIEW] Don't lock path sep for Win32 .parts

[22:26] <Geth> ¦ roast: 

[22:26] <Geth> ¦ roast: Permit either \ or / sep used

[22:26] <Geth> ¦ roast: 

[22:26] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/fb61306aa

[22:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/40adba0df9

[22:32] <AlexDaniel> what is Zef actually doing when it says

[22:32] <AlexDaniel> ===> Searching for: CSS::Grammar

[22:33] <AlexDaniel> in others words, why does it take so long?

[22:42] <Geth> ¦ roast: 205aa81d1c | (Zoffix Znet)++ | S32-io/io-spec-unix.t

[22:42] <Geth> ¦ roast: [v6.d REVIEW] use more precise test for .path

[22:42] <Geth> ¦ roast: 

[22:42] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/726652269

[22:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/205aa81d1c

[22:43] <Geth> ¦ roast: 84da99b988 | (Zoffix Znet)++ | S32-io/io-spec-unix.t

[22:43] <Geth> ¦ roast: Fudge .path test as it gives improper empty Seq

[22:43] <Geth> ¦ roast: 

[22:43] <Geth> ¦ roast: R#2281 https://github.com/rakudo/rakudo/issues/2281

[22:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/84da99b988

[22:43] <synopsebot> R#2281 [open]: https://github.com/rakudo/rakudo/issues/2281 [6.d review] Problems with `EmptySeq`

[22:45] <Geth> ¦ roast: f1839e7831 | (Zoffix Znet)++ | S32-io/io-spec-unix.t

[22:45] <Geth> ¦ roast: Revert "Fudge .path test as it gives improper empty Seq"

[22:45] <Geth> ¦ roast: 

[22:45] <Geth> ¦ roast: This reverts commit 84da99b98819dc2e5e742486cd33862503ae0bcf.

[22:45] <Geth> ¦ roast: 

[22:45] <Geth> ¦ roast: Invalid fudge

[22:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f1839e7831

[22:45] <Geth> ¦ roast: d0f6ba70dc | (Zoffix Znet)++ | S32-io/io-spec-unix.t

[22:45] <Geth> ¦ roast: Fudge .path test as it gives improper empty Seq

[22:45] <Geth> ¦ roast: 

[22:45] <Geth> ¦ roast: R#2281 https://github.com/rakudo/rakudo/issues/2281

[22:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d0f6ba70dc

[22:45] <synopsebot> R#2281 [open]: https://github.com/rakudo/rakudo/issues/2281 [6.d review] Problems with `EmptySeq`

[22:50] <Geth> ¦ roast: 81382e15fd | (Zoffix Znet)++ | S32-io/io-spec-win.t

[22:50] <Geth> ¦ roast: [v6.d REVIEW] Loosen IO::Spec::Win32.path tests

[22:50] <Geth> ¦ roast: 

[22:50] <Geth> ¦ roast: Allow either separator to be used in the result

[22:50] <Geth> ¦ roast: 

[22:50] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/6ac3b4aab

[22:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/81382e15fd

[23:12] <Geth> ¦ rakudo: b1a07f0935 | (Zoffix Znet)++ | t/02-rakudo/99-misc.t

[23:12] <Geth> ¦ rakudo: [v6.d REVIEW] Move IO::Handle.perl.EVAL test to rakudo suite

[23:12] <Geth> ¦ rakudo: 

[23:12] <Geth> ¦ rakudo: Handles are a bit of a weird thing to roundtrip through eval and

[23:12] <Geth> ¦ rakudo: we don't keep the openness, file descriptor, nor file position,

[23:12] <Geth> ¦ rakudo: so it's possible in the future we'd die, similar to

[23:12] <Geth> ¦ rakudo: how (1...*).perl dies.

[23:12] <Geth> ¦ rakudo: 

[23:12] <Geth> ¦ rakudo: Orig: https://github.com/perl6/roast/commit/dbbea1572

[23:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b1a07f0935

[23:12] <Geth> ¦ roast: d65abd546e | (Zoffix Znet)++ | S32-io/io-handle.t

[23:12] <Geth> ¦ roast: [v6.d REVIEW] Move IO::Handle.perl.EVAL test to rakudo suite

[23:12] <Geth> ¦ roast: 

[23:12] <Geth> ¦ roast: Handles are a bit of a weird thing to roundtrip through eval and

[23:12] <Geth> ¦ roast: we don't keep the openness, file descriptor, nor file position,

[23:12] <Geth> ¦ roast: so it's possible in the future we'd die, similar to

[23:12] <Geth> ¦ roast: how (1...*).perl dies.

[23:12] <Geth> ¦ roast: 

[23:13] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/dbbea1572

[23:13] <Geth> ¦ roast: Moved to: https://github.com/rakudo/rakudo/commit/b1a07f0935

[23:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d65abd546e

[23:22] <AlexDaniel> --debug doesn't tell much

[23:22] <AlexDaniel> there's a delay before that step and after, without any output

[23:24] <AlexDaniel> s/after/during/

[23:30] *** Zoffix joined
[23:30] *** p6bannerbot sets mode: +v Zoffix

[23:31] <Zoffix> AlexDaniel: I'm 40% sure that it's reading its local database of things is what it's doing

[23:31] <Zoffix> and another 20% is it's parsing the p6c ecosystem JSON

[23:31] <Zoffix> actually swap that, 40% the eco JSON and 20% little database

[23:31] <AlexDaniel> shouldn't be the JSON because it doesn't do that every time

[23:31] <timotimo> AlexDaniel: you know, if you can step to the place you're interested in, and to after it, you can make a perf record

[23:31] <AlexDaniel> at least it doesn't fetch it every time

[23:32] <Zoffix> AlexDaniel: well, it caches it right? That's what zef update does; to update the things?

[23:32] <timotimo> that'll show what C functions inside of moarvm are doing stuff

[23:32] <timotimo> also, valgrind's callgrind can be started "inactive" and activated/deactivated at any point with callgrind_control

[23:32] *** Zoffix left
[23:34] <AlexDaniel> timotimo: I'm interested in a high level explanation

[23:34] <AlexDaniel> looked at the source, it's Zef::Repository doing *something*

[23:34] <timotimo> so you were using the debugserver and stepping through?

[23:35] <timotimo> hey, btw, can we have a bot where i can just say "hey give me a file of this name" and it'll just DWIM?

[23:35] <timotimo> like, could i ask for Zef/Repository.pm6 and, like, it'll go to the right repo and make a link to github?

[23:35] <AlexDaniel> can be done, yes

[23:35] <timotimo> using perl6-all-repos (which is on the whateverable server already anyway, right?) and rakudo's and nqp's sources

[23:35] <timotimo> and why not also moarvm's

[23:35] <AlexDaniel> in fact I wanted to do something like this for a long time, at least for the commit shas and stuff

[23:36] <timotimo> let's call it travelable

[23:36] <timotimo> or locatable, or scryable

[23:37] <timotimo> FWIW, it could also be merged into SourceBaby

[23:37] <timotimo> just from what else it does

[23:37] <timotimo> and the name

[23:38] <AlexDaniel> timotimo: no I'm not using the debugserver, I was just wondering why this first seemingly trivial step takes 10 seconds which is like… half of the installation time (the rest being running tests and other reasonable stuff)

[23:38] <AlexDaniel> I was thinking maybe everyone else knows :)

[23:38] <timotimo> ah

[23:39] <timotimo> maybe strace can show something, though it's not very likely it's system time

[23:39] <AlexDaniel> ugexe++ did add some parallelization recently: https://github.com/ugexe/zef/commit/b596922f5edec3c43a749e28653f08caec7d73cd#diff-8803687a4f475f3d029884e14c0c8720

[23:39] <AlexDaniel> I guess to resolve that exact issue

[23:40] <timotimo> what command should i use to get the same "benchmark" you're getting?

[23:40] <AlexDaniel> timotimo: time zef install JSON::Fast :)

[23:41] <timotimo> my ram is, once again, almost filled to the brim :\

[23:41] <AlexDaniel> “Speeds up `zef update` from 4.3s to 7.8s ( and consequently anytime `zef install ...` runs an auto update )”

[23:41] *** PufferBot left
[23:41] <timotimo> All candidates are currently installed

[23:41] <AlexDaniel> the numbers are other way round, but it makes sense

[23:41] <timotimo> 5.25user 0.07system 0:04.48elapsed 118%CPU (0avgtext+0avgdata 133956maxresident)k

[23:41] <AlexDaniel> timotimo: uninstall, then install again

[23:42] <timotimo> ok

[23:42] <AlexDaniel> you can use --dry so that it doesn't install every time

[23:42] <AlexDaniel> so it's doing something for cpan, and something for the github ecosystem

[23:43] <AlexDaniel> .race basically made it run stuff in two threads, so it halved the time

[23:43] <timotimo> it could probably get the mirror updates in parallel, too

[23:43] <AlexDaniel> but still, what is it doing

[23:44] <timotimo> so we're interested in the time between start and "==> Searching for: JSON::Fast"?

[23:44] <timotimo> or for the time after that?

[23:44] <AlexDaniel> timotimo: between `Searching for` and the next step

[23:45] <AlexDaniel> timotimo: there's also a delay before it gets to that point, which also feels like it shouldn't be there

[23:45] <timotimo> --debug only?

[23:46] <timotimo> let me see if i can/should update zef

[23:46] <timotimo> i seem to have 0.4.4

[23:46] <AlexDaniel> if you want to see parallelization in action then yes, likely

[23:46] <AlexDaniel> you also need rakudo 2018.08 or later

[23:47] <timotimo> i'm on HEAD, or something close by

[23:47] <AlexDaniel> timotimo: fwiw it's already does fetching in parallel, or so it seems

[23:47] <timotimo> it didn't in my ooooold version ;)

[23:48] <AlexDaniel> time zef --dry --/test --/build install JSON::Fast

[23:48] <AlexDaniel> timotimo: ↑ try this

[23:48] <AlexDaniel> no tests, no building, no installing

[23:48] <AlexDaniel> essentially a noop

[23:48] <AlexDaniel> 10 seconds on my machine

[23:49] <AlexDaniel> because it does “searching”

[23:50] <AlexDaniel> the reason I'm interested to see that get faster… is that if you have 1000 modules and you do nothing but that

[23:50] <AlexDaniel> m: say 1000 × 10 ÷ 60 ÷ 60

[23:50] <camelia> rakudo-moar b1a07f093: OUTPUT: «2.777778␤»

[23:50] <AlexDaniel> ↑ 2.7 hours?

[23:51] <timotimo> whoops :)

[23:52] <AlexDaniel> ok surely I'll run multiple processes so it'll faster, but still

[23:53] <timotimo> oh, my moarvm is currently built without optimization, so it'll be a bit slower

[23:54] <timotimo> trying to --profile it, it makes something related to nfas EXPLODE

[23:54] <timotimo> MoarVM panic: Memory allocation failed; could not allocate 27021889821999112 bytes

[23:55] <timotimo> turning spesh off makes it go away, brilliant

[23:57] <timotimo> haha, i can't analyze the profile because i don't have JSON::Fast installed :D

[23:57] <AlexDaniel> heh

[23:57] <AlexDaniel> can be any other module

[23:58] <AlexDaniel> Color is a good choice probably cuz no deps

[23:58] <timotimo> sounds good

[23:58] <AlexDaniel> it does test-depend on Test but IIRC zef should just ignore that

[23:58] *** MasterDuke joined
[23:58] *** p6bannerbot sets mode: +v MasterDuke

[23:59] <AlexDaniel> also we're not testing… :)

[23:59] *** MasterDuke left
[23:59] *** MasterDuke joined
[23:59] *** herbert.freenode.net sets mode: +v MasterDuke

[23:59] *** p6bannerbot sets mode: +v MasterDuke

