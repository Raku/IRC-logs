[00:41] <MasterDuke> heh. i'm trying to optimize POSITIONS() in array_slice.pm6. my changes didn't seem to make it faster, so thought i'd check instruction count with callgrind

[00:42] <MasterDuke> my test case, which takes 1.9 billion instructions before any changes, takes 391 instructions more after my optimization attempt

[00:43] <MasterDuke> back to the drawing board...

[01:21] <japhb> Good on you for checking that though ....

[07:26] <Geth> ¦ nqp: 13845470aa | pmurias++ | 3 files

[07:26] <Geth> ¦ nqp: [js] Basic implementation of new encoding ops

[07:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/13845470aa

[07:26] <Geth> ¦ nqp: 5bcb548b34 | pmurias++ | t/moar/11-decode.t

[07:26] <Geth> ¦ nqp: Extra decoding tests

[07:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5bcb548b34

[08:17] <[Tux]> Rakudo version 2018.03-29-ga3e4f9e3e - MoarVM version 2018.03-3-g2bd691551

[08:17] <[Tux]> csv-test-xs-20      0.428 -  0.474

[08:18] <[Tux]> csv-ip5xs           0.822 -  0.842

[08:18] <[Tux]> test-t --race       1.072 -  1.076

[08:18] <[Tux]> test-t              2.547 -  2.573

[08:18] <[Tux]> csv-ip5xs-20        7.844 -  7.895

[08:18] <[Tux]> test                9.118 -  9.192

[08:18] <[Tux]> test-t-20 --race   16.488 - 16.678

[08:18] <[Tux]> csv-parser         37.953 - 38.068

[08:18] <[Tux]> test-t-20          45.384 - 47.843

[09:26] <Geth> ¦ rakudo: 2760753d5a | (Samantha McVey)++ | 2 files

[09:26] <Geth> ¦ rakudo: Fix Encoding::Decoder so it works properly with a replacement

[09:26] <Geth> ¦ rakudo:

[09:26] <Geth> ¦ rakudo: Fix a write error to a read only variable and fix the signatures so it

[09:26] <Geth> ¦ rakudo: doesn't fail when a Bool is passed in.

[09:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2760753d5a

[09:26] <Geth> ¦ rakudo: 37fc2883dd | (Samantha McVey)++ | src/core/IO/Handle.pm6

[09:26] <Geth> ¦ rakudo: Make sure IO::Handle.encoding passes replacement, strict to decoder

[09:26] <Geth> ¦ rakudo:

[09:26] <Geth> ¦ rakudo: The signature had :$replacement and :$strict but they were not passed

[09:26] <Geth> ¦ rakudo: through to Encoding.decoder, though they worked fine with the encoder.

[09:26] <Geth> ¦ rakudo:

[09:26] <Geth> ¦ rakudo: In addition add a :$translate-nl argument to allow changing the value.

[09:26] <Geth> ¦ rakudo: Previously the default of $translate-nl = True was passed into the

[09:26] <Geth> ¦ rakudo: decoder and encoder's but there was no way to configure it.

[09:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/37fc2883dd

[09:35] <Geth> ¦ roast: 1e1b9c0db0 | pmurias++ | S32-str/encode.t

[09:35] <Geth> ¦ roast: Stop using invalid unicode in a string literal

[09:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1e1b9c0db0

[09:59] <Geth> ¦ nqp: bb14087e03 | pmurias++ | src/vm/js/nqp-runtime/codecs.js

[09:59] <Geth> ¦ nqp: [js] Fix nqp::encoderep with utf8

[09:59] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/bb14087e03

[09:59] <Geth> ¦ nqp: 02a2378f31 | pmurias++ | src/vm/js/nqp-runtime/core.js

[09:59] <Geth> ¦ nqp: [js] Wrap native strings in NQPStr

[09:59] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/02a2378f31

[10:12] <pmurias> m: the round method is broken due to floating point errors

[10:12] <camelia> rakudo-moar 37fc2883d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3the round method is7⏏5 broken due to floating point errors␤»

[10:12] <pmurias> say (123.456789).round(1e-5) === 123.45679

[10:12] <evalable6> pmurias, rakudo-moar 37fc2883d: OUTPUT: «False␤»

[10:12] <pmurias> say (123.456789).round(1e-5)

[10:12] <evalable6> pmurias, rakudo-moar 37fc2883d: OUTPUT: «123.45679␤»

[11:46] <pmurias> .tell Zoffix I imagine the least daunting p6 install experience would look something like this: https://p6up.github.io/

[11:46] <yoleaux> pmurias: I'll pass your message to Zoffix.

[12:02] <Geth> ¦ rakudo: 684a50d1f6 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm6

[12:02] <Geth> ¦ rakudo: Give R:I.IntRange its own .push-exactly

[12:02] <Geth> ¦ rakudo:

[12:02] <Geth> ¦ rakudo: This makes HyperIteratorBatcher.produce-batch about 3x as fast as before when

[12:02] <Geth> ¦ rakudo: given a Range.iterator..  The dedicated HyperRangeBatcher makes it about 5x as

[12:02] <Geth> ¦ rakudo: fast, but introduces a lot of code and maintenance overhead.  Given that the

[12:02] <Geth> ¦ rakudo: HyperxBatcher.produce-batch is typically less than 0.1% of total time used,

[12:02] <Geth> ¦ rakudo: it feels that just creating an optimized .push-exactly is the right thing to do.

[12:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/684a50d1f6

[12:16] <lizmat> GH R#1639

[12:16] <synopsebot> R#1639 [open]: https://github.com/rakudo/rakudo/issues/1639 [NYI][RFC] Do we need an API method "SLICE", as extension to AT-POS?

[12:19] <Geth> ¦ rakudo: a7ed20975c | (Elizabeth Mattijsen)++ | 4 files

[12:19] <Geth> ¦ rakudo: HyperRangeBatcher RIP

[12:19] <Geth> ¦ rakudo:

[12:19] <Geth> ¦ rakudo: The maintenance overhead and bloat do not warrant the existence of this

[12:19] <Geth> ¦ rakudo: optimization that in itself could be significant (.produce-batch on Range

[12:19] <Geth> ¦ rakudo: being 5x faster instead of only 3x with a better Range.iterator.push-exactly)

[12:19] <Geth> ¦ rakudo: the CPU usage is well within noise levels just about any benchmark.

[12:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a7ed20975c

[13:27] <dogbert2> .seen Zoffix

[13:27] <yoleaux> I saw Zoffix 01:21Z in #perl6: <Zoffix> FWIW: my vacation at $work started and I'm gonna go into isolation until Apr. 6, to enjoy it. I might make some commits to repos, but I'll be ignoring all notifications. If I break something, just revert or fix the commit, as I won't see the notification about breakage. If pmichaud comes around; rakudo.org domain is ready for move, per https://github.com/perl6/perl6.org/issues/96#issuecomment-

[13:27] <yoleaux> 373971373

[13:29] <dogbert2> .tell Zoffix there's a spelling error in the brochure 'Language built from the ground up with *concurency* in mind'

[13:29] <yoleaux> dogbert2: I'll pass your message to Zoffix.

[14:04] <Geth> ¦ rakudo: dc921b601e | (Elizabeth Mattijsen)++ | src/core/Channel.pm6

[14:04] <Geth> ¦ rakudo: Micro-optimize Channel.send

[14:04] <Geth> ¦ rakudo:

[14:04] <Geth> ¦ rakudo: It's used a lot in async code, so every little bit helps.

[14:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dc921b601e

[14:05] <Geth> ¦ rakudo: caacb2e4fc | (Elizabeth Mattijsen)++ | src/core/Supply.pm6

[14:05] <Geth> ¦ rakudo: Mark Supplier.emit/done as --> Nil

[14:05] <Geth> ¦ rakudo:

[14:05] <Geth> ¦ rakudo: Since TapList.emit/done are marked as --> Nil.  Having the compiler already

[14:05] <Geth> ¦ rakudo: know that it will always be Nil, may help.

[14:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/caacb2e4fc

[14:05] <Geth> ¦ rakudo: 67f9157231 | (Elizabeth Mattijsen)++ | src/core/Channel.pm6

[14:05] <Geth> ¦ rakudo: Streamline Channel.close a bit

[14:05] <Geth> ¦ rakudo:

[14:05] <Geth> ¦ rakudo: - the attribute is an integer flag, make it a native

[14:05] <Geth> ¦ rakudo: - Channel.close always returns Nil, so mark it as the return value

[14:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/67f9157231

[14:06] <dogbert2> lizmat: are you working with channels now?

[14:07] <lizmat> I'm working on anything that will make .hyper / .race go faster  :-)

[14:07] <dogbert2> I remebered this: RT #131684

[14:07] <synopsebot> RT#131684 [new]: https://rt.perl.org/Ticket/Display.html?id=131684 Iterator and Supply might fail early if Nil is sent on a channel

[14:07] <dogbert2> *bad spelling

[14:08] <lizmat> will look at it while I'm at it  :-)

[14:16] <dogbert2> ++lizmat

[14:44] <Geth> ¦ rakudo: 739fd9c9a9 | (Elizabeth Mattijsen)++ | src/core/Supply.pm6

[14:44] <Geth> ¦ rakudo: Streamline the Tap class

[14:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/739fd9c9a9

[15:07] <Geth> ¦ rakudo: f4255d5a17 | (Elizabeth Mattijsen)++ | src/core/Supply.pm6

[15:07] <Geth> ¦ rakudo: Streamline Supply.new a bit

[15:07] <Geth> ¦ rakudo:

[15:07] <Geth> ¦ rakudo: - no more SET-SELF, use nqp::p6bindattrinvres instead

[15:07] <Geth> ¦ rakudo: - no more =:=, use nqp::eqaddr instead

[15:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f4255d5a17

[15:41] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Streamline the Tap class'

[15:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/356911704 https://github.com/rakudo/rakudo/compare/67f9157231ac...739fd9c9a9cd

[15:41] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/04-nativecall/13-cpp-mangling.t test file failed.

[15:43] <lizmat> cannot reproduce that error

[16:05] <Geth> ¦ rakudo: bdd8143e6f | (Elizabeth Mattijsen)++ | src/core/Channel.pm6

[16:05] <Geth> ¦ rakudo: Streamline Channel.iterator, fixes RT #131684

[16:05] <Geth> ¦ rakudo:

[16:05] <Geth> ¦ rakudo: - move logic of receive-nil-on-close into .iterator.pull-one

[16:05] <Geth> ¦ rakudo: - remove receive-nil-on-close altogether

[16:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bdd8143e6f

[16:05] <synopsebot> RT#131684 [new]: https://rt.perl.org/Ticket/Display.html?id=131684 Iterator and Supply might fail early if Nil is sent on a channel

[16:05] <lizmat> dogbert2 ^^^

[16:05] <dogbert2> lizmat++

[16:10] <Kaiepi> PufferBot, build

[16:10] <PufferBot> [openbsd] Configuring Rakudo...

[16:11] <PufferBot> [openbsd] Configuring failed. See the output at http://fpaste.scsys.co.uk/576185

[16:11] <PufferBot> Kaiepi, done!

[16:13] <AlexDaniel> 6c: say 23067200747291880127814827277075079921671259751791 %% 100000000000000000000000000000000000000000000000577

[16:13] <Kaiepi> weird, it works when passing --has-libffi instead of --has-dyncall

[16:13] <committable6> AlexDaniel, https://gist.github.com/07d40e5b6250c046c544db2569e0cc2e

[16:24] <Geth> ¦ rakudo: 33c52dbc7f | (Elizabeth Mattijsen)++ | src/core/Numeric.pm6

[16:24] <Geth> ¦ rakudo: Fix GH R#1640

[16:24] <Geth> ¦ rakudo:

[16:24] <Geth> ¦ rakudo: nqp::not_i on big Int's don't work.  Use the HLL prefix:<!> instead.

[16:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/33c52dbc7f

[16:24] <synopsebot> R#1640 [open]: https://github.com/rakudo/rakudo/issues/1640 [regression] %% fails with bigInt, bigInt arguments 

[16:40] <AlexDaniel> lizmat: hmm :) Why do you always forget to add testneeded tag?

[16:41] <lizmat> you mean on RT?  or on GH ?

[16:41] <lizmat> if it's RT, I don't do RT directly, only through email

[16:41] <lizmat> on GH, I've just taught myself to add the testneeded tag  :-)

[16:44] <Geth> ¦ rakudo: 6f42d19eb0 | (Elizabeth Mattijsen)++ | src/core/Supply.pm6

[16:44] <Geth> ¦ rakudo: Streamline Supply.emit

[16:44] <Geth> ¦ rakudo:

[16:44] <Geth> ¦ rakudo: - favour the case where there is only 1 tap

[16:44] <Geth> ¦ rakudo: - reduce loop overhead on >1 tap case

[16:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6f42d19eb0

[16:46] <AlexDaniel> lizmat: ooooh… OK I see

[17:02] <MasterDuke> is there any reason https://github.com/rakudo/rakudo/blob/master/src/core/List.pm6#L352-L355 couldn't be just `nqp::splice(iterbuffer, $reified, 0, nqp::elems($reified))`?

[17:03] <MasterDuke> well, `nqp::splice(iterbuffer, $reified, 0, $elems)`

[17:06] <lizmat> MasterDuke: I would say, none

[17:06] <lizmat> but I would also say: the List of **@things is something that is volatile anyway, I think

[17:07] <MasterDuke> but this https://github.com/rakudo/rakudo/blob/master/src/core/List.pm6#L348 `my int $elems = +@things; # reify` should take care of that, right?

[17:07] <lizmat> so I wonder why that just doesn't return @things ?

[17:07] <lizmat> or @things.List rather  :-)

[17:10] <MasterDuke> hm, not sure what you're getting at. that new is in `class Reifer` inside `class List`

[17:12] <lizmat> ah, ok  hmmmm

[17:20] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Streamline Channel.iterator, fixes RT #131684

[17:20] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/356954108 https://github.com/rakudo/rakudo/compare/f4255d5a1758...bdd8143e6fa0

[17:20] <synopsebot> RT#131684 [open]: https://rt.perl.org/Ticket/Display.html?id=131684 Iterator and Supply might fail early if Nil is sent on a channel

[17:20] <AlexDaniel> dogbert11: any progress on your RT account?

[17:32] <Geth> ¦ rakudo: 828cd4a8c6 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm6

[17:32] <Geth> ¦ rakudo: Give R:I.ReifiedList/ReifiedArray their own push.exactly

[17:32] <Geth> ¦ rakudo:

[17:32] <Geth> ¦ rakudo: To generally make things faster, and especially when .hypering over an

[17:32] <Geth> ¦ rakudo: Array or a List.

[17:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/828cd4a8c6

[17:35] <Kaiepi> ok the build issue i was getting with pufferbot earlier just ended up being a problem with how my system's configured, not with moar itself

[17:37] <AlexDaniel> \o/

[17:37] <AlexDaniel> that sounds great

[17:50] <Geth> ¦ roast: 64a0eae869 | (Ben Davies)++ | S32-str/encode.t

[17:50] <Geth> ¦ roast: Fix plan in S32-str/encode.t

[17:50] <Geth> ¦ roast:

[17:50] <Geth> ¦ roast: See https://github.com/perl6/roast/commit/1e1b9c0db02a142526ae75318131fbf21a1d410e#diff-87f3f8cab5d5274359969736ef11c692

[17:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/64a0eae869

[17:54] <Geth> ¦ rakudo: 232197da00 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm6

[17:54] <Geth> ¦ rakudo: Don't use private methods in Rakudo::Iterator

[17:54] <Geth> ¦ rakudo:

[17:54] <Geth> ¦ rakudo: - there's no point since they're all inside anonymouse classes

[17:54] <Geth> ¦ rakudo:   - so there is noi real danger of them being visible from the outside

[17:54] <Geth> ¦ rakudo: - avoids the still relatively costly dispatch:<!> runtime lookup

[17:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/232197da00

[17:57] <dogbert11> does anyone want to merge https://github.com/perl6/roast/pull/405 or should I do it myself?

[18:03] <MasterDuke> m: use nqp; my \ib = nqp::create(IterationBuffer); my @li = (1, 2, "c", 4); nqp::splice(ib, nqp::getattr(@li, List, q|$!reified|), 0, 2); dd ib; say nqp::elems(ib)

[18:03] <camelia> rakudo-moar 828cd4a8c: OUTPUT: «(1, 2, "c", 4)␤4␤»

[18:03] <MasterDuke> ^^^ why isn't the count in the nqp::splice call respected?

[18:04] <jnthn> That's how many elements to replace in the target, I think?

[18:05] <lizmat> .oO( yet another reason we need something like nqp::subbuf )

[18:05] <MasterDuke> oh, ha. "Replace them with all the elements from @from"

[18:06] <MasterDuke> jnthn: do you have any thoughts on introducing an nqp::subbuf?

[18:06] <MasterDuke> afk for a while though

[18:07] <jnthn> Well, sorta, also something more like memcpy :)

[18:07] <jnthn> We actually want a couple of different things

[18:07] <jnthn> One of them being an op that lets us get a view of an underlying thing without having to copy

[18:08] <lizmat> jnthn: that we could nqp::clone you mean ?

[18:08] <lizmat> if necessary  :-)

[18:08] <jnthn> Well, we need that one in particular for doing partial views of multi-dim arrays

[18:09] <jnthn> But note that we could also use it for Blob

[18:09] <jnthn> Which is immutable

[18:09] <lizmat> or Lists ?

[18:09] <lizmat> IterationBuffers ?

[18:09] <jnthn> Well, only the underlying storage of List, but potentially yes

[18:10] <lizmat> repr(VMArray) basically, right ?

[18:10] <jnthn> That or repr(MultiDimArray)

[18:11] <jnthn> So that it's useful for the partial view case

[18:11] <jnthn> (to be clear, so that `my @a[2;2]; @a[2]` will work)

[18:11] <jnthn> m: my @a[2;2]; say @a[2]

[18:11] <camelia> rakudo-moar 232197da0: OUTPUT: «Partially dimensioned views of shaped arrays not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»

[18:21] <Geth> ¦ rakudo: aa974ecdc2 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperRaceSharedImpl.pm6

[18:21] <Geth> ¦ rakudo: Implement .hyper.invert

[18:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/aa974ecdc2

[18:25] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fix GH R#1640

[18:25] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/356964343 https://github.com/rakudo/rakudo/compare/bdd8143e6fa0...33c52dbc7f9b

[18:25] <synopsebot> R#1640 [open]: https://github.com/rakudo/rakudo/issues/1640 [regression][testneeded] %% fails with bigInt, bigInt arguments 

[18:44] <Geth> ¦ rakudo: 32774e7be6 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperRaceSharedImpl.pm6

[18:44] <Geth> ¦ rakudo: Revert "Implement .hyper.invert"

[18:44] <Geth> ¦ rakudo:

[18:44] <Geth> ¦ rakudo: This reverts commit aa974ecdc2d42acd2bc9672cc774d7cb582098b4.

[18:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/32774e7be6

[18:45] <lizmat> yeah, that was not so bright  :-)

[18:56] <Geth> ¦ roast: bc2894aa58 | (Jan-Olof Hendig)++ | S04-declarations/constant.t

[18:56] <Geth> ¦ roast: Test for RT 127352

[18:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bc2894aa58

[18:56] <Geth> ¦ roast: f2d422f229 | dogbert17++ (committed using GitHub Web editor) | S04-declarations/constant.t

[18:56] <Geth> ¦ roast: Merge pull request #405 from dogbert17/test-rt-127352

[18:56] <Geth> ¦ roast:

[18:56] <Geth> ¦ roast: Test for RT 127352

[18:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f2d422f229

[18:56] <synopsebot> RT#127352 [open]: https://rt.perl.org/Ticket/Display.html?id=127352 [BUG] Behavior of Regular Expressions Contained in a Constant with a Sigil

[19:37] <Geth> ¦ rakudo: d75f4cfc71 | (Elizabeth Mattijsen)++ | 3 files

[19:37] <Geth> ¦ rakudo: Implement .hyper|race.invert properly

[19:37] <Geth> ¦ rakudo:

[19:37] <Geth> ¦ rakudo: - in HyperSeq/RaceSeq

[19:37] <Geth> ¦ rakudo: - actual handler in HyperRaceSharedImpl

[19:37] <Geth> ¦ rakudo:   - which is actually just a front end for .map

[19:37] <Geth> ¦ rakudo:

[19:37] <Geth> ¦ rakudo: Also unify the order of methods in HyperSeq/RaceSeq with each other for

[19:37] <Geth> ¦ rakudo: better maintainability.

[19:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d75f4cfc71

[20:36] <MasterDuke> jnthn: so nqp::subbuf should copy, but nqp::bufview not copy?

[20:45] <MasterDuke> so i just tried replacing https://github.com/rakudo/rakudo/blob/master/src/core/List.pm6#L352-L355 with `nqp::splice(iterbuffer,nqp::getattr(@things,List,'$!reified'),0,0);`

[20:45] <MasterDuke> and it builds ok, but during the install, i get `This type (Scalar) does not support elems   in block <unit> at tools/build/create-moar-runner.pl line 11`

[20:50] <lizmat> MasterDuke: that's probably a missing nqp::decont on @things ?

[20:50] <lizmat> ah, elems

[20:52] <lizmat> perhaps a decont on the nqp::getattr

[21:03] <MasterDuke> heh, now it's `This type (Mu) does not support elems   in block <unit> at tools/build/create-moar-runner.pl line 11`

[21:16] <lizmat> MasterDuke: could you gist the diff ?

[21:17] <MasterDuke> lizmat: https://gist.github.com/MasterDuke17/697b0058518e169fa9e2c1ebf68d2971

[21:22] <MasterDuke> ah, builds+installs if i add back in the `my $reified  := nqp::getattr(@things,List,'$!reified');` and then wrap the nqp::splice in an `nqp::if($reified,...)`

[21:22] <MasterDuke> spectesting

[21:22] <lizmat> aaaahhh... yes, it should exist

[21:22] <lizmat> :-)

[21:33] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Don't use private methods in Rakudo::Iterator

[21:33] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/357010566 https://github.com/rakudo/rakudo/compare/828cd4a8c655...232197da0006

[21:33] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[21:46] <Geth> ¦ rakudo: 8ce20ae1fc | (Elizabeth Mattijsen)++ | src/core/Array.pm6

[21:46] <Geth> ¦ rakudo: Streamline Array.STORE-ITERABLE a bit

[21:46] <Geth> ¦ rakudo:

[21:46] <Geth> ¦ rakudo: - lose the =:= in favour of nqp::eqaddr

[21:46] <Geth> ¦ rakudo: - combine bindattr + return value into singe p5bindattrinvres

[21:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8ce20ae1fc

[21:52] <lizmat> and that concludes my hacking for today&

[22:03] <japhb> lizmat++

[22:16] <timotimo> p5bindattrinvres? ;)

[23:04] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1641: Simplify List's Reifier.new

[23:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1641
