[00:04] *** MasterDuke left
[00:07] *** j3nnn1 left
[00:08] *** MasterDuke joined
[00:11] <Geth> ¦ nqp: 8d7738ec87 | (Daniel Green)++ | src/vm/js/nqp-runtime/.core.js.swn

[00:11] <Geth> ¦ nqp: Remove another vim swap file

[00:11] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8d7738ec87

[00:55] *** stmuk_ joined
[00:57] *** stmuk left
[01:49] *** stmuk joined
[01:51] *** stmuk_ left
[02:38] *** ufobat___ joined
[02:41] *** ufobat_ left
[03:15] <Geth> ¦ nqp/truffle: 4282d2f1e3 | (Daniel Green)++ | 3 files

[03:15] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::<ordbaseat replace> ops

[03:15] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/4282d2f1e3

[03:20] *** MasterDuke left
[03:42] *** benji__ left
[04:05] *** BenGoldberg joined
[05:08] *** BenGoldberg left
[05:29] *** brrt joined
[05:38] *** Ven` joined
[05:42] *** Ven` left
[05:51] *** robertle joined
[06:10] <[Tux]> Rakudo version 2018.06-144-g08a54212e - MoarVM version 2018.06-142-gc7627e511

[06:10] <[Tux]> csv-test-xs-20      0.439 -  0.458

[06:10] <[Tux]> csv-ip5xs           0.994 -  1.019

[06:10] <[Tux]> test-t --race       1.027 -  1.097

[06:10] <[Tux]> test-t              2.480 -  2.487

[06:10] <[Tux]> csv-ip5xs-20        8.922 -  9.060

[06:10] <[Tux]> test                9.484 -  9.894

[06:10] <[Tux]> test-t-20 --race   15.233 - 15.535

[06:10] <[Tux]> csv-parser         27.964 - 28.454

[06:10] <[Tux]> test-t-20          43.680 - 47.263

[06:41] <nine> Looks like csv-ip5xs lost a lot after the rescalar merge :/

[07:15] <brrt> :-(

[07:16] <brrt> ohai nine. btw, did you see some of the angry jit-nativecall bugs

[07:16] <brrt> I was thinking, maybe we can move the jit-nativecall bit to an expression tree

[07:42] *** lizmat joined
[07:58] <lizmat> Files=1242, Tests=76399, 326 wallclock secs (15.98 usr  5.79 sys + 2272.25 cusr 228.95 csys = 2522.97 CPU)

[08:23] *** [TuxCM] left
[08:30] *** Ven` joined
[08:46] <nine> brrt: yes, saw them but I currently don't seem to have time and energy to have a closer look. Vacation next week ought to fix that though :)

[08:51] <brrt> :-)

[09:16] *** lizmat left
[09:19] *** lizmat joined
[09:22] *** robertle left
[09:30] *** nativecallable6 joined
[09:35] <Ulti> brrt: made it to the front page ;) https://news.ycombinator.com/item?id=17496789

[09:39] *** lizmat_ joined
[09:39] *** brrt left
[09:40] *** lizmat left
[09:47] *** [TuxCM] joined
[09:49] *** lizmat_ is now known as lizmat

[09:51] <AlexDaniel> so I'm looking through toaster failures

[09:51] <yoleaux> 10 Jul 2018 14:39Z <tyil[m]> AlexDaniel: if the perl community were to get it's own Matrix homeserver, would it be interesting to link both perl.org and freenode's #perl6 channels to them?

[09:52] <AlexDaniel> it's interesting!

[09:52] <AlexDaniel> a lot of stuff depended on XML and there's a PR for that already

[09:53] <AlexDaniel> but, for example, module ANTLR4::Grammar works fine with MVM_SPESH_DISABLE=1 and fails otherwise

[09:54] <AlexDaniel> that's a lot of stuff to go through so I guess I'll be filing a bunch of tickets shortly

[09:54] <AlexDaniel> just to make it manageable

[10:02] <jnthn> AlexDaniel++

[10:04] <jnthn> There's a lot of spesh changes, a lot of new use of spesh plugins, and Scalar has been extensively re-worked.

[10:05] <AlexDaniel> release process is going to be fun then :)

[10:05] <jnthn> There's also a spesh branch that will merge shortly that contains some fixes, and helps us sanity-check the spesh graph better.

[10:05] <jnthn> Yeah. I'm also now remembering why I do spesh works in chunks. Once I'm zoned in to that it's hard to do anything else.

[10:22] *** pmurias joined
[10:37] *** brrt joined
[10:39] <AlexDaniel> samcv: so the gist of your changes is “now stuff is randomized not just per run, but all the freaking time”, is that right? :)

[10:40] <AlexDaniel> I see one module that's unhappy about that, yeah

[10:40] <samcv> AlexDaniel: yes. if you add a key to the hash then the order will change completely

[10:40] <samcv> also before:

[10:40] <AlexDaniel> c: 2018.06,HEAD say <a b c d ef gh>.Set.Str for ^30

[10:40] <committable6> AlexDaniel, https://gist.github.com/461302fa671a4eeb554316a839a6e1a7

[10:40] <samcv> m: my %hash; for ^10 { %hash{$_} = 1}; say %hash.keys

[10:40] <camelia> rakudo-moar 08a54212e: OUTPUT: «(1 5 3 4 0 2 7 6 8 9)␤»

[10:41] <samcv> my %hash; for ^10 { %hash{$_} = 1}; say %hash.keys; my %hash2; for ^10 { %hash2{$_} = 1}; say %hash2.keys

[10:41] <evalable6> samcv, rakudo-moar 08a54212e: OUTPUT: «(9 6 3 5 7 4 1 2 0 8)␤(0 8 1 2 7 4 9 3 6 5)␤»

[10:41] <samcv> also before, this would have the same result, i mean it would be different each startup of moarvm, but two branch new hash's with elemnts added in the same order would have the same order

[10:42] <AlexDaniel> yeah, that

[10:42] <AlexDaniel> I see, thanks

[10:42] <samcv> if you did all operations identical between the two hashes they wolud have the same order (assuming they have the same number of buckets)

[10:42] <AlexDaniel> yeah

[10:43] <samcv> also at NL perl workshop some people told me that they think having in order hashes as a type is useful. so we could add ordered hashes later if people wanted them

[10:46] *** brrt left
[10:49] <AlexDaniel> FWIW my goal is to send a bunch of PRs first, and then we'll think what should be done about all that

[10:50] *** Ven` left
[10:54] <Geth> ¦ nqp: f8f7d34b36 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[10:54] <Geth> ¦ nqp: Map a new istype_nd ("no decont") op on MoarVM

[10:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f8f7d34b36

[10:56] <lizmat> oooo   wow

[10:56] <lizmat> that would allow cleaning up a lot of HLL code (if the JVM backend would also have it)

[10:56] <jnthn> Would it?

[10:56] * jnthn is curious where

[10:57] <jnthn> There's now a few nqp::blah_nd ops though

[10:57] <lizmat> there's a lot of candidates that have an explicit nqp::istype(nqp::decont)

[10:57] <jnthn> They can save some nqp::p6var

[10:57] <jnthn> uh...what?

[10:57] <lizmat> no?

[10:57] <jnthn> You understood backwards, I think

[10:57] <jnthn> nqp::istype($a, $b) deconts *both* $a and $b

[10:57] <jnthn> The new op does neither

[10:57] <lizmat> ah....  hmmm

[10:57] <lizmat> lemme double check

[10:58] <Geth> ¦ rakudo: 7dfc60235d | (Jonathan Worthington)++ | tools/build/NQP_REVISION

[10:58] <Geth> ¦ rakudo: Bump NQP for new istype_nd op on MoarVM

[10:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7dfc60235d

[10:58] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-36-g39f1057...2018.06-41-gf8f7d34

[10:58] <Geth> ¦ rakudo: 1b3dd35e54 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[10:58] <Geth> ¦ rakudo: Generate less deconts in lowered signature binding

[10:58] <Geth> ¦ rakudo: 

[10:58] <Geth> ¦ rakudo: Previously, a method like:

[10:58] <Geth> ¦ rakudo: 

[10:58] <Geth> ¦ rakudo:     multi method chars(Str:D: --> Int:D) {

[10:58] <Geth> ¦ rakudo:         nqp::p6box_i(nqp::chars($!value))

[10:58] <Geth> ¦ rakudo:     }

[10:58] <Geth> ¦ rakudo: <…commit message has 13 more lines…>

[10:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1b3dd35e54

[11:01] <lizmat> jnthn: indeed, got it backward *and* was thinking of something else

[11:01] <lizmat> so the _nd versions are for cases where you *know* things have been deconted already, right ?

[11:02] <jnthn> Yes

[11:02] <jnthn> But...be careful :)

[11:02] <jnthn> Remember that spesh strips out many pointless ones

[11:03] <jnthn> And it's an icky bug if we mis-use it

[11:03] <jnthn> The best place to use them is in places where you explicitly did a decont yourself

[11:07] <lizmat> but would doing an explicit decont not be worse?

[11:08] <jnthn> Not if you need to do one :P

[11:08] <lizmat> I mean, the "standard" versions would do the decont internall, so one fewer op to process, no?

[11:08] <jnthn> No, the standard versions compile into decont + the op

[11:08] <jnthn> You don't see it, but code-gen emits it :)

[11:09] <lizmat> also on JVM ?

[11:09] <lizmat> seem to recall it being an issue there sometimes, so an explicit decont was needed

[11:09] <jnthn> No, there it's currently scattered across the op bodies

[11:09] <lizmat> or have 2 versions of code: yuk

[11:09] <jnthn> Though in theory they should match up :)

[11:10] <lizmat> ok, well, for now I will refrain from mucking with that until after the 2016.07 release

[11:11] *** brrt joined
[11:35] *** robertle joined
[11:43] *** Ven` joined
[11:44] <Geth> ¦ roast/Unicode-11.0: de629d08c5 | (Samantha McVey)++ | 3 files

[11:44] <Geth> ¦ roast/Unicode-11.0: Update Emoji Tests to version Unicode version 11.0

[11:44] <Geth> ¦ roast/Unicode-11.0: review: https://github.com/perl6/roast/commit/de629d08c5

[11:45] <samcv> ugh. collation broke once i updated unicode. so will take longer to update than i had hoped. bbl

[12:28] <Geth> ¦ rakudo: 86846ac50c | (Zoffix Znet)++ | src/core/IO/Handle.pm6

[12:28] <Geth> ¦ rakudo: Check if $!decoder is setup in IO::Handle.encoding…

[12:28] <Geth> ¦ rakudo: 

[12:28] <Geth> ¦ rakudo: …before we assume no work is needed. This likely won't be

[12:28] <Geth> ¦ rakudo: needed when R#2039 https://github.com/rakudo/rakudo/issues/2039

[12:28] <Geth> ¦ rakudo: is fixed to setup the decoder right when encoding is set on creation.

[12:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/86846ac50c

[12:28] <synopsebot> R#2039 [open]: https://github.com/rakudo/rakudo/issues/2039 [IO][LTA] LTA IO::Handle.encoding can have a value, but no valid decoder is setup

[12:28] <Geth> ¦ rakudo/handle-6.d: 62 commits pushed by (Jonas Kramer)++, (Jonathan Worthington)++, (Elizabeth Mattijsen)++, (Zoffix Znet)++

[12:28] <Geth> ¦ rakudo/handle-6.d: review: https://github.com/rakudo/rakudo/compare/03d79975be53...44ae3789f36a

[12:46] *** Zoffix joined
[12:46] <Zoffix> What's :$replacement in IO::Handle.encoding?

[12:47] <timotimo> i think it's what you get when a character can't be encoded in the target encoding

[12:47] <jnthn> Replacement char if the string contains something not possible to encode

[12:47] <Zoffix> Thanks.

[12:47] <jnthn> (In the specified encoding)

[12:47] <timotimo> maybe also what you get when there's garbage in the data to be decoded?

[12:50] <Zoffix> And :$strict is part of spec now or what's happening? I recall there being something about this blocked from changing because we can't do caller's lang version yet?

[12:50] *** j3nnn1 joined
[12:55] <Zoffix> I know what our marketing alias should be: Mistery.

[12:55] <Zoffix> If you read the source you'll find all of these mystery options that aren't specced or documented and half the core devs don't even know what they are :P

[12:56] *** Zoffix left
[12:58] <lizmat> .oO( Worri )

[12:58] <lizmat> and people using Worri would be Worriors  :-)

[12:59] <lizmat> although, "Misterians" also has a ring to it :-)

[12:59] <stmuk> Mysterons

[13:01] *** lizmat left
[13:04] *** lizmat joined
[13:04] <jkramer> I like Rakudo as a name. And the mascot should be a raccoon.

[13:07] <AlexDaniel> rakudo name is unfortunately taken by another software project :P

[13:09] <jkramer> Raccoodo?

[13:09] * jkramer just likes raccoons :)

[13:10] *** Zoffix joined
[13:10] <Zoffix> AlexDaniel: rename Rakudo :)

[13:10] <Zoffix> To Rokudo

[13:10] <AlexDaniel> two renames for the price of one!

[13:11] <lizmat> https://www.rakudodining.com   # mjammie

[13:11] <Zoffix> "Ideally the language itself would be "Rakudo" ("Way of the Camel") and the current implementation would be "Rokudo" ("Way of Six")"

[13:11] <jkramer> Or make rakudo really fast and name it Rockedo

[13:11] <Zoffix> Tho Camel is already taken by another language :)

[13:12] <Zoffix> Chonomichi 

[13:12] <Zoffix> "The way of the butterfly", according to google translate: https://translate.google.ca/#en/ja/the%20way%20of%20the%20butterfly

[13:15] <brrt> 'no michi' appears to be 'way of'

[13:15] <brrt> if I'm guessing language correctly

[13:16] <brrt> 'butterflies' is 'cho'

[13:16] <Zoffix> "Kinaru" = "marvelous"

[13:16] <brrt> which is nicely close to 'cro', so...

[13:16] <stmuk> jitenshaokiba-do

[13:33] <Geth> ¦ rakudo: f830bf344e | (Elizabeth Mattijsen)++ | 5 files

[13:33] <Geth> ¦ rakudo: Make .sum a multi

[13:33] <Geth> ¦ rakudo: 

[13:33] <Geth> ¦ rakudo: Needed for some future optimization

[13:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f830bf344e

[13:41] <Zoffix> grr... fixing R#2039 makes IO::Handle.new(:path(self)).open(:bin) break, because decoder is setup in TWEAK -_-

[13:41] <synopsebot> R#2039 [open]: https://github.com/rakudo/rakudo/issues/2039 [IO][LTA] LTA IO::Handle.encoding can have a value, but no valid decoder is setup

[13:42] <Zoffix> (that was from IO::Path.slurp and I'm guessing probably used in the wild too; and if it isn't then we're paying to setup a decoder in TWEAK that won't ever be needed -_-)

[13:43] <Zoffix> .new should have all the arguments about encodings and .open should only have open modes.

[13:43] <Zoffix> *1 set of open modes

[13:45] <lizmat> I think this all comes from the fact that IO::Handle.new doesn't open

[13:46] <lizmat> what is the use of creating an IO::Handle object if you're not going to open a file with it ?

[13:47] <Zoffix> yeah

[13:49] <lizmat> if this is about delaying opening a file, putting a more generic solution such as Object::Trampoline in core, would make much more sense

[13:49] *** brrt left
[13:51] <samcv> Zoffix: i believe strict is speced at least for some things

[13:51] <samcv> or maybe i thought wrong

[13:52] <Zoffix> samcv: yeah, for .encode/.decode it is

[13:52] <Zoffix> oh wait, that was :replacement

[13:52] <samcv> anyway i wanted strict to be in roast. it should be specced anyway

[13:53] <Zoffix> Don't see any encoding-related matches for `strict`

[13:53] <samcv> and atm it only works for windows-1251 and windows-1252. and most other encodings do strict by default. though latin-1 may be unstrict by default

[13:53] <samcv> essentially the reasoning is that our encode/decoder would let invalid but ascii codepoints through windows-1252

[13:54] <samcv> and if you tried to open them in most things it'd say the document was corrupted. so strict will enforce only valid codepoints into that encoding

[13:55] <Zoffix> R#448

[13:55] <synopsebot> R#448 [closed]: https://github.com/rakudo/rakudo/pull/448 Prevent calling .clone with new attributes affect the original

[13:55] <samcv> m: for ^255 { .chr.encode('windows-1252', :strict) }

[13:55] <camelia> rakudo-moar f830bf344: OUTPUT: «Error encoding Windows-1252 string: could not encode codepoint 128␤  in block <unit> at <tmp> line 1␤␤»

[13:55] <Zoffix> I mean

[13:55] <Zoffix> S#448

[13:55] <synopsebot> S#448 [open]: https://github.com/perl6/roast/issues/448 [need to write tests] :$strict option for encoding/decoding related operations isn't specced

[13:56] <samcv> m: for ^255 { .chr.encode('latin1') }

[13:56] <camelia> rakudo-moar f830bf344: ( no output )

[13:58] <Geth> ¦ rakudo: zoffixznet self-unassigned LTA IO::Handle.encoding can have a value, but no valid decoder is setup https://github.com/rakudo/rakudo/issues/2039

[13:59] <Geth> ¦ rakudo: 5a9168e788 | (Elizabeth Mattijsen)++ | 5 files

[13:59] <Geth> ¦ rakudo: Revert "Make .sum a multi"

[13:59] <Geth> ¦ rakudo: 

[13:59] <Geth> ¦ rakudo: This reverts commit f830bf344ecafb10f7c8d769d390e31b3fba2de9.

[13:59] <Geth> ¦ rakudo: 

[13:59] <Geth> ¦ rakudo: This actually almost doubles the time for List.sum.  Not sure what is

[13:59] <Geth> ¦ rakudo: going on here, but it looks like List.sum gets OSR'd in the "method"

[13:59] <Geth> ¦ rakudo: case, but doesn't even get JITted in the multi case.  Weird!

[13:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5a9168e788

[14:01] <samcv> Zoffix: well ok it seems latin1 on ruby will let you put in lower control characters but not 129.chr though lower controls aren't specced. which seems fine enough. lower controls aren't ambiguous at all

[14:02] <samcv> and we should probably do something like that for latin1

[14:05] <Geth> ¦ 6.d-prep: 133fcbb0fb | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[14:05] <Geth> ¦ 6.d-prep: Add TODO: Remove all proptests for IO::Handle.new's attribute-setting

[14:05] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/133fcbb0fb

[14:32] *** brrt joined
[14:41] *** Zoffix left
[14:51] <Geth> ¦ rakudo: 88e913b62e | (Elizabeth Mattijsen)++ | src/core/native_array.pm6

[14:51] <Geth> ¦ rakudo: Make native array.sum faster

[14:51] <Geth> ¦ rakudo: 

[14:51] <Geth> ¦ rakudo: - 1.2x as fast by default by not using Any::sum anymore

[14:51] <Geth> ¦ rakudo: - 35x as fast with specifying the :wrap named variable

[14:51] <Geth> ¦ rakudo: 

[14:51] <Geth> ¦ rakudo: The latter will do *all* calculations in native ints: should the sum of

[14:51] <Geth> ¦ rakudo: the native array exceed the size of the "int" type, then it will silently

[14:51] <Geth> ¦ rakudo: wrap.  This may or may not be what you want, hence the optional named variable.

[14:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/88e913b62e

[15:10] <Geth> ¦ rakudo: bduggan++ created pull request #2051: Improve the error message for slicing a shaped array

[15:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2051

[15:13] *** robertle left
[15:20] <Geth> ¦ roast: c313c0a238 | (Elizabeth Mattijsen)++ | S09-typed-arrays/native-int.t

[15:20] <Geth> ¦ roast: Add tests for my int @a; @a.sum(:wrap)

[15:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c313c0a238

[15:28] <Geth> ¦ nqp: 2b12cad8f5 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[15:28] <Geth> ¦ nqp: Map hllboxtype_* on MoarVM backend

[15:28] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2b12cad8f5

[15:31] *** lizmat left
[15:33] *** lizmat joined
[15:38] *** robertle joined
[15:48] *** [TuxCM] left
[15:54] <Geth> ¦ nqp: 668be5c2d8 | (Jonathan Worthington)++ | 2 files

[15:54] <Geth> ¦ nqp: Provide hllboxtype_* ops on JVM backend

[15:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/668be5c2d8

[16:14] *** tyil[m] joined
[16:23] *** Ven` left
[17:15] *** [TuxCM] joined
[17:44] *** j3nnn1 left
[18:28] *** brrt left
[18:49] *** pmurias left
[18:53] *** Ven`` joined
[19:03] *** stephane_ left
[19:09] *** dogbert17 left
[19:17] *** lizmat left
[19:24] *** lizmat joined
[19:30] *** cognominal joined
[20:09] *** cognominal left
[20:16] *** cognominal joined
[20:40] *** MasterDuke joined
[21:41] *** MasterDuke left
[21:44] *** MasterDuke joined
[21:48] *** Ven`` left
[21:58] *** Ven`` joined
[21:59] *** Ven`` left
[22:03] <Geth> ¦ rakudo: 5682ee1f12 | (Elizabeth Mattijsen)++ | src/core/native_array.pm6

[22:03] <Geth> ¦ rakudo: Make my int @a = ^5000 about 1.7x as fast

[22:03] <Geth> ¦ rakudo: 

[22:03] <Geth> ¦ rakudo: By not binding values to specific indices, but just pushing values onto

[22:03] <Geth> ¦ rakudo: the native array.

[22:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5682ee1f12

[22:03] <lizmat> timotimo: ^^^

[22:05] <timotimo> oh, neat

[22:06] <lizmat> yeah, apparently push is a lot faster than bindpos_i() and keeping an index

[22:06] <timotimo> the only thing i could think of to make this even faster is unroll the loop a tiny bit

[22:07] <timotimo> like, do 5 pushes at a time before checking $val against $max again

[22:07] <timotimo> unlikely to have a good impact

[22:08] <timotimo> actually, it could be noticable

[22:09] <lizmat> that would require extra logic that would grow the code in size

[22:10] <lizmat> I just realized there are some other cases that could benefit from this change

[22:10] <lizmat> but am too tired to do that now

[22:10] <lizmat> so tomorrow&

[22:11] <timotimo> the code grows, but more importantly, the section of code between gotos grows

[22:12] <timotimo> it'd be cool if we could throw out the boundary check inside push because we already have our own check, but that's probably really tricky

[22:15] <lizmat> timotimo: but that's the thing: the array starts from 0 elements: there is no max value known to the array

[22:16] <lizmat> now, if we would have something like a push that and an internal index, that would allow you to push until the end of the array is reached

[22:16] <lizmat> that might work

[22:17] <timotimo> yeah, $max is the max value, not the number of times we push

[22:17] <timotimo> that's what makes it extra tricky

[22:18] <lizmat> so, basically something like nqp::setelems(@a,10000); nqp::set_index(@a,0), nqp::while( nqp::push_i(@a,++$val), nqp::null)

[22:18] <lizmat> anyways, bedtime  :-)

[22:18] <lizmat> &

[22:19] <timotimo> we don't even need to set_index, i don't think

[22:19] <timotimo> just make the hypothetical push instruction return false when the internal storage capacity (which we set with setelemspos) is reached

[22:21] <Geth> ¦ nqp/new-runner-enable-execname: 6997926ffc | 陈梓立++ (committed using GitHub Web editor) | 0 files

[22:21] <Geth> ¦ nqp/new-runner-enable-execname: Update install-moar-runner.pl

[22:21] <Geth> ¦ nqp/new-runner-enable-execname: review: https://github.com/perl6/nqp/commit/6997926ffc

[22:23] <timotimo> oh what the heck, we have getattrs_o there even though the string is const_s right before it

[22:23] <timotimo> i wonder what blew that opt

[22:25] <timotimo> OK, we don't know anything about the thing we're getting attributes from, so the opt just nopes right outta there without even doing the "const string known" opt

[22:25] <timotimo> doesn't matter for the hot loop portion anyway

[22:27] <timotimo> the code is rather tight. only thing that could be better is that it's using lexicals for $val and $max. not sure why that isn't lowered to be locals instead

[22:55] <Geth> ¦ nqp: 2e053da6fb | 陈梓立++ (committed using GitHub Web editor) | 2 files

[22:55] <Geth> ¦ nqp: Pass --execname to nqp thus nqp::execname() works (#479)

[22:55] <Geth> ¦ nqp: 

[22:55] <Geth> ¦ nqp: Only for MoarVM backend, now `nqp::execname()` give out the execution path as defined.

[22:55] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2e053da6fb

[23:04] *** Kaiepi left
[23:05] *** travis-ci joined
[23:05] <travis-ci> NQP build errored. 陈梓立 'Pass --execname to nqp thus nqp::execname() works (#479)

[23:05] <travis-ci> https://travis-ci.org/perl6/nqp/builds/402890259 https://github.com/perl6/nqp/compare/668be5c2d84d...2e053da6fbf7

[23:05] *** travis-ci left
[23:05] *** Kaiepi joined
