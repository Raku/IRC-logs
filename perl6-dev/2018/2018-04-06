[00:41] <Zoffix> QAST::IVal, QAST::NVal, and QAST::SVal should be doing QAST::CompileTimeValue, shouldn't they?

[00:41] <yoleaux> 5 Apr 2018 23:12Z <samcv> Zoffix: i've just added permissions for all people on Team MoarVM on github to have perms to the appveyor project

[00:44] <Zoffix> m: use QAST:from<NQP>; BEGIN $*W.compile_time_evaluate: $, QAST::Op.new: :op<call>, :name<&say>, QAST::SVal.new: :value(QAST::Op.new: :op<concat>, QAST::SVal.new(:value<me>), QAST::SVal.new: :value<ows>)

[00:44] <camelia> rakudo-moar c8364d696: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  cannot stringify this␤  at :␤»

[00:44] <Zoffix> I'll take that as a "yes" (QAST::WVal already does it)

[00:45] <Zoffix> oh and QAST::BVal is that too always compile time?

[00:53] <Zoffix> refers to a QAST::Block and *rakes brain* pads are immutable, so yeah should be safe

[01:06] <samcv> Zoffix: i have a potential fix for the randomness issue of .rand

[01:06] <samcv> it's at least 10,000 better than before

[01:06] <samcv> maybe. err actually maybe not

[01:07] <samcv> still seems to have issues with very large ones

[01:07] <Zoffix> But are you sure there's a problem in the first place?

[01:07] <samcv> yeah

[01:08] <Zoffix> What does the fix do?

[01:08] <samcv> m: say ((10**300)).rand.base(16)

[01:08] <camelia> rakudo-moar c8364d696: OUTPUT: «F9AD8B6F9F64080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000␤»

[01:08] <Zoffix> But there's only 17 sigfigs of precision

[01:08] <samcv> that is pretty unrandom. it's only apparent if you use base(16) though is that also maybe caused by float?

[01:08] <Zoffix> m: say 1e300.base(16)

[01:08] <camelia> rakudo-moar c8364d696: OUTPUT: «17E43C8800759C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000␤»

[01:08] <samcv> ah ok

[01:08] <Zoffix> m: say 1e20.base(16)

[01:08] <camelia> rakudo-moar c8364d696: OUTPUT: «56BC75E2D63100000␤»

[01:08] <samcv> that is true

[01:09] <samcv> what's the way to do a random integer? moarvm has a function for it but idk if we have one in rakudo?

[01:11] <Zoffix> There's nqp::rand_I but looks like it's only used in the guts of Range

[01:12] <Zoffix> m: use nqp; dd nqp::rand_I(10**100, Int)

[01:12] <camelia> rakudo-moar c8364d696: OUTPUT: «9459655568654579812141384835898965024064900079022219319823570042804819449176602894675134833113932965␤»

[01:12] <Zoffix> m: use nqp; dd nqp::rand_I(10**100, Int).base: 16

[01:12] <camelia> rakudo-moar c8364d696: OUTPUT: «"71E9099B8EE0E6F8899394638174AA9458C85F4CD98C114DC58E08985657E2D4FEB43F84A0D19E676E7"␤»

[01:16] <samcv> i'm sure plenty of people use rand just for random integer numbers. and since it's pretty unrandom for large ones we may want to provide a way to use rand_I

[01:17] <Zoffix> yeah

[01:17] <samcv> e

[01:18] <Zoffix> m: (1e300.rand xx 100_000).unique.elems.say

[01:18] <camelia> rakudo-moar c8364d696: OUTPUT: «100000␤»

[01:18] <Zoffix> .oO( that was surprisingly fast... )

[01:18] <Zoffix> m: (1e300.rand xx 10_000_000).unique.elems.say

[01:19] <camelia> rakudo-moar c8364d696: OUTPUT: «(timeout)»

[01:19] <samcv> well our rand_I is fairly random but i haven't tested the double one

[01:19] <Zoffix> m: (1e300.rand xx 1_000_000).unique.elems.say

[01:19] <camelia> rakudo-moar c8364d696: OUTPUT: «1000000␤»

[01:19] <samcv> just have to figure out best way to convert it to a Buf. i mean i could convert them to an Int but is that really random?

[01:19] <samcv> i guess i might as well try it anyway

[01:19] <Zoffix> m: say 1e100.Int == 1e100.Int

[01:19] <camelia> rakudo-moar c8364d696: OUTPUT: «True␤»

[01:20] <Zoffix> don't look to be random

[01:20] <Zoffix> m: say 1e100.Int == (1e100+1).Int

[01:20] <camelia> rakudo-moar c8364d696: OUTPUT: «True␤»

[01:20] <Zoffix> m: (1e7.rand xx 1_000_000).unique.elems.say

[01:20] <camelia> rakudo-moar c8364d696: OUTPUT: «1000000␤»

[01:21] <Zoffix> m: (1e16.rand xx 1_000_000).unique.elems.say

[01:21] <camelia> rakudo-moar c8364d696: OUTPUT: «1000000␤»

[01:21] * Zoffix shrugs

[01:22] <Zoffix> getting "Cannot unbox a type object (NQPMu) to a str." so I guess those nodes can't be just be made CompileTime value :(

[01:28] <samcv> i guess my random generation values are not being random anymore

[01:28] <samcv> testing with this https://www.fourmilab.ch/random/

[01:28] <samcv> perl6 -e 'use nqp; $*OUT.write: Buf.new(nqp::rand_I(0xFF+1, 0) xx 1000) for ^10000' | pv | ./random/ent

[01:29] <samcv> getting 5% and 95% alternatng (should be ~50%)

[01:29] <samcv> was getting 45% before. but i guess that's based on how random the random state we keep

[01:37] <Zoffix> I think if you ping something you get more entropy available? sudo ping -f some host

[01:38] <samcv> what? well moarvm's randomness isn't related to the system's randomness

[01:40] <samcv> Zoffix: i think this funcion reseeds the uint64 random https://github.com/MoarVM/MoarVM/blob/master/3rdparty/tinymt/tinymt64.c#L68

[01:40] <samcv> and this generates the double we use in rand_n https://github.com/MoarVM/MoarVM/blob/master/3rdparty/tinymt/tinymt64.c#L113

[01:40] <Geth> ¦ nqp: 6689823e26 | (Zoffix Znet)++ | 3 files

[01:40] <Geth> ¦ nqp: Implement `cvalue` method for [NIS]Val QAST Nodes

[01:40] <Geth> ¦ nqp:

[01:40] <Geth> ¦ nqp: A lot of the values we set to these nodeas are compile-time known,

[01:40] <Geth> ¦ nqp: and this is a convenience method to mixin QAST::CompileTimeValue

[01:40] <Geth> ¦ nqp: and set $!value/$!compile_time_value to the given value, right from

[01:40] <Geth> ¦ nqp: the constructor.

[01:40] <Geth> ¦ nqp:

[01:40] <Geth> ¦ nqp: Originally, I tried `does` QAST::CompileTimeValue to these nodes,

[01:40] <Geth> ¦ nqp: like we do with QAST::WVal, but NQP compilation would blew up.

[01:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6689823e26

[01:41] <Zoffix> that stuff's over my head.

[01:42] <samcv> well it doesn't look like it adds any "actual" randomness back in

[01:56] <samcv> it does a lot of fancy bitshifting and OR and XORing

[01:56] <Zoffix> ah

[01:56] <samcv> dunno if there's some way we could seed randomness in from moarvm based on something

[01:56] <samcv> if we have any number and XOR it with the random seed numbers we use. then it will still be just as random theoretically

[01:59] <Zoffix> .oO( I think I'm going about it the wrong way )

[02:00] <Zoffix> ZofBot: what do you think?

[02:00] <ZofBot> Zoffix, When people die they are sometimes put into coffins, which means that they don’t mix with the earth for a very long time until the wood of the coffin rots

[02:00] <Zoffix> eww, gross

[02:01] <Zoffix> I got the hint... next time, I'll ask someone else -_-

[02:09] <Zoffix> Yeah, there's just one spot I saw that cares about .has_compile_time_value on an IVal we're shoving into a spot. The rest is all is just blind guess.

[02:10] <Geth> ¦ nqp: e20fdaa20f | (Zoffix Znet)++ | 3 files

[02:10] <Geth> ¦ nqp: Revert "Implement `cvalue` method for [NIS]Val QAST Nodes"

[02:10] <Geth> ¦ nqp:

[02:10] <Geth> ¦ nqp: This reverts commit 6689823e263b3e8d3105f9042d9f72e864203717.

[02:10] <Geth> ¦ nqp:

[02:10] <Geth> ¦ nqp: YAGNI https://irclog.perlgeek.de/perl6-dev/2018-04-06#i_16011781

[02:10] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e20fdaa20f

[02:29] <Zoffix> m: { sub { loop { LAST Nil; last if $++ > 10 } }(); say now - ENTER now }

[02:29] <camelia> rakudo-moar c8364d696: OUTPUT: «(timeout)»

[02:29] <Zoffix> m: my int $i; { sub { loop { LAST Nil; last if $i++ > 10 } }(); say now - ENTER now }

[02:29] <camelia> rakudo-moar c8364d696: OUTPUT: «No such method '!capture_phasers' for invocant of type 'Code'␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[02:29] <Zoffix> lesigh

[02:33] <Zoffix> m: say (Seq.from-loop({say $++; last if $++ > 100  })).head: 100

[02:33] <camelia> rakudo-moar c8364d696: OUTPUT: «0␤()␤»

[02:34] <Zoffix> m: my int $i; say (Seq.from-loop({say $++; last if $i++ > 100  })).head: 100

[02:34] <camelia> rakudo-moar c8364d696: OUTPUT: «0␤()␤»

[02:35] <Zoffix> m: my int $i; sub { loop {say $++; last if $i++ > 100  } }()

[02:35] <camelia> rakudo-moar c8364d696: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49␤50␤51␤5…»

[02:35] <Zoffix> I don't get it :/

[02:36] <Zoffix> I don't get why m: my int $i; say (Seq.from-loop({say $++; last if $i++ > 100  })).head: 100 gives an empty list

[02:55] <Zoffix> m: my int $i; eager do loop { say $i++; last if $i > 10 }

[02:55] <camelia> rakudo-moar c8364d696: OUTPUT: «0␤Cannot call method 'eager' on a null object␤  in block <unit> at <tmp> line 1␤␤1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[02:56] <Zoffix> Man, do we have *any* tests for `loop`?

[02:57] <Zoffix> m: my int $i; say eager do loop { say $i++; last if $i > 10 }

[02:57] <camelia> rakudo-moar c8364d696: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤()␤»

[02:57] <Zoffix> ^ that works by accident; another bug that gens crap code in this instance

[03:00] <Zoffix> ZofBot: or is that a feature?

[03:00] <ZofBot> Zoffix, Alexander said, “Is this about Wellington?” And nodded because that didn’t count as being a detective

[03:01] <Geth> ¦ rakudo/better-loop: c1906c1af1 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[03:01] <Geth> ¦ rakudo/better-loop: Improve codegen of `loop {}` when we want its value

[03:01] <Geth> ¦ rakudo/better-loop:

[03:01] <Geth> ¦ rakudo/better-loop: We gen Seq.from-loop that has a special case for when the

[03:01] <Geth> ¦ rakudo/better-loop: condition is always true. I'd imagine it to be faster,

[03:01] <Geth> ¦ rakudo/better-loop: but currently this work is blocked by a deficiency in that

[03:01] <Geth> ¦ rakudo/better-loop: case in that it's treating empty slips as end of loop.

[03:01] <Geth> ¦ rakudo/better-loop: review: https://github.com/rakudo/rakudo/commit/c1906c1af1

[03:20] <Zoffix> Filed as R#1692

[03:20] <synopsebot> R#1692 [open]: https://github.com/rakudo/rakudo/issues/1692 Seq.from-loop(&body) does not behave like `loop { ... }`

[03:21] <Zoffix> And that commit ^ also re-breaks the broken state vars in `do loop { ... }`

[03:23] <Zoffix> *the recently-fixed ones I mean

[04:58] <lizmat> hmmm./... MoarVM doesn't build for me anymore  :-(

[05:33] <Zoffix> lizmat: you may need to nuke 3rd_party/libatomic or whatever it's called

[05:33] <Zoffix> 3rdparty/libatompic_ops in MoarVM's dir

[05:34] <geekosaur> git and submodules don't always get along

[05:39] <lizmat> yeah, that fixed it, thanks!

[05:39] <lizmat> Zoffix: shouldn't nqp be bumped again to have the revert in nqp be seen in rakudo ?

[05:41] <Zoffix> lizmat: not necessary as I didn't end up using the new methods in rakudo

[05:42] <lizmat> ok

[05:42] <Zoffix> and like the now-reverted commit only added new methods to qast nodes

[06:24] <[Tux]> Rakudo version 2018.03-162-ge348b8f21 - MoarVM version 2018.03-87-g677d4e9a8

[06:24] <[Tux]> csv-test-xs-20      0.436 -  0.455

[06:24] <[Tux]> csv-ip5xs           0.883 -  0.929

[06:24] <[Tux]> test-t --race       1.021 -  1.057

[06:24] <[Tux]> test-t              2.424 -  2.540

[06:24] <[Tux]> test                8.441 -  9.652

[06:24] <[Tux]> csv-ip5xs-20        8.460 -  8.667

[06:24] <[Tux]> test-t-20 --race   14.806 - 16.237

[06:24] <[Tux]> csv-parser         36.799 - 37.738

[06:24] <[Tux]> test-t-20          43.431 - 44.087

[12:41] <Geth> ¦ roast: d9a4a65b1c | (Ben Davies)++ | S29-os/system.t

[12:41] <Geth> ¦ roast: Add tests for Proc.pid

[12:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d9a4a65b1c

[17:29] <Geth> ¦ roast: ronaldxs++ created pull request #409: Update class-and-instance.t - tests for class and instance only methods

[17:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/409

[18:06] <Geth> ¦ roast: eeb1086cf9 | (Ben Davies)++ | S29-os/system.t

[18:06] <Geth> ¦ roast: Improve Proc.pid tests

[18:06] <Geth> ¦ roast:

[18:06] <Geth> ¦ roast: This tests for proper .pid updates when run/shell fails and removes a

[18:06] <Geth> ¦ roast: test that could potentially fail in rare cases.

[18:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/eeb1086cf9

[18:38] <Geth> ¦ roast: 503021a7a6 | (Ronald Schmidt)++ | S12-methods/class-and-instance.t

[18:38] <Geth> ¦ roast: Update class-and-instance.t to add tests for class and instance

[18:38] <Geth> ¦ roast:

[18:38] <Geth> ¦ roast: only methods selected by invocant concreteness (eg ::?CLASS:[U|D]:).

[18:38] <Geth> ¦ roast: GH roast issue #217.

[18:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/503021a7a6

[18:38] <Geth> ¦ roast: 9ab28e208e | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | S12-methods/class-and-instance.t

[18:38] <synopsebot> SPEC#217 [open]: https://github.com/perl6/roast/issues/217 [testneeded] Tests needed for using method invocant to distinguish between class and object methods

[18:38] <Geth> ¦ roast: Merge pull request #409 from ronaldxs/class-xor-instance-method

[18:38] <Geth> ¦ roast:

[18:38] <Geth> ¦ roast: Update class-and-instance.t - tests for class and instance only methods

[18:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9ab28e208e

[19:45] <brrt> ohai

[21:28] <Geth> ¦ rakudo: cfc6b1094c | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[21:28] <Geth> ¦ rakudo: In tweak_loop: Add node refs / clean up a bit

[21:28] <Geth> ¦ rakudo:

[21:28] <Geth> ¦ rakudo: A bit of prep for fixing R#1623

[21:28] <Geth> ¦ rakudo: https://github.com/rakudo/rakudo/issues/1623

[21:28] <synopsebot> R#1623 [open]: https://github.com/rakudo/rakudo/issues/1623 Phasers FIRST/LAST in sub-loop doesn't compile: Cannot reference undeclared local 'LOOP_BLOCK_1'

[21:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cfc6b1094c

[21:55] <AlexDaniel> FWIW there are currently 10 blockers

[21:56] <AlexDaniel> 5 of them are assigned, and other 5 probably need more eyes

[22:23] <nooninm> Page 10 of Thinking in Perl 6 shows different output than below > say(1, 234, 567).WHAT 1234567

[22:24] <nooninm> Book says it should be as below > say (1,234,567).WHAT (List)

[22:25] <nooninm> Is book wrong or is Rakudo Star version 2018.01 wrong?

[22:25] <timotimo> that's the book being wrong

[22:25] <nooninm> Thanks

[22:25] <timotimo> .WHAT is always supposed to give you the type object, and those will output as the name of the type in parenthesis if you "say" it

[22:25] <nooninm> Bye

[22:25] <timotimo> have a good one!

[22:27] <nooninm> Whoa, wait a sec.  Then the book is right.  say (1,234,567).WHAT should output    "(List)"  because List is the type, right?

[22:27] <nooninm> But instead it outputs the number 1234567

[22:27] <timotimo> oh!

[22:27] <timotimo> i got it the wrong way around

[22:27] <timotimo> sorry, now i see it

[22:27] <timotimo> you need to put a space after the say

[22:28] <timotimo> that is the difference between calling say with the numbers and the ncalling WHAT on what say returns vs calling WHAT no the list and saying what WHAT returns

[22:28] <timotimo> excuse me, it's past midnight here :)

[22:28] <nooninm> The space did the trick.

[22:28] <nooninm> Thanks

[22:28] <nooninm> Did not think of the say return value.  Thanks

[22:28] <timotimo> feel free to come back at any time for a wrong answer followed immediately by a right answer

[22:29] <nooninm> Bye

[23:58] <Zoffix> ZOFFLOP: t/spec/S12-methods/calling_sets.t
