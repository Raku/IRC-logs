[05:28] <AlexDaniel> unidump:

[05:28] <unicodable6> AlexDaniel, https://gist.github.com/1009cb702c7f752ecbf6cb8158eda652

[05:28] <AlexDaniel> /o\

[05:29] <AlexDaniel> unidump: a Â b

[05:29] <unicodable6> AlexDaniel, https://gist.github.com/8cffe8e155ffc07ad05dbeaf327d5784

[05:34] <AlexDaniel> a: a Â b

[05:34] <AlexDaniel> u: a Â b

[05:34] <unicodable6> AlexDaniel, U+0061 LATIN SMALL LETTER A [Ll] (a)

[05:34] <unicodable6> AlexDaniel, U+0020 SPACE [Zs] ( )

[05:34] <unicodable6> AlexDaniel, 4 characters in total (a Â b): https://gist.github.com/a3cb10c1f85a3dd72c6c79e4763addf2

[07:12] <AlexDaniel> greppable6: Â« .* Â»

[07:12] <greppable6> AlexDaniel, 70 lines, 18 modules: https://gist.github.com/576bc17fe1eb2c081819a4e13e4a7f26

[07:12] <AlexDaniel> sad :(

[07:46] <Geth> Â¦ rakudo: a4f9090e24 | (Zoffix Znet)++ | 2 files

[07:46] <Geth> Â¦ rakudo: Fix X::TypeCheck::Binding::Parameter with subsetsâ€¦

[07:46] <Geth> Â¦ rakudo:

[07:46] <Geth> Â¦ rakudo: â€¦show the name of the subset rather than the base type.

[07:46] <Geth> Â¦ rakudo:

[07:46] <Geth> Â¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1560 R#1560

[07:46] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a4f9090e24

[07:46] <synopsebot> R#1560 [closed]: https://github.com/rakudo/rakudo/issues/1560 subset type check error points to the original type, not the subset name

[07:51] <Geth> Â¦ rakudo: 235d3f1ce7 | (Zoffix Znet)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[07:51] <Geth> Â¦ rakudo: Remove unused code

[07:51] <Geth> Â¦ rakudo:

[07:51] <Geth> Â¦ rakudo: Accidental left-over from

[07:51] <Geth> Â¦ rakudo: https://github.com/rakudo/rakudo/commit/a4f9090e24851ea378254802d7ac914f121bd66c

[07:51] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/235d3f1ce7

[10:08] <AlexDaniel> releasable6: are you alive?

[10:08] <releasable6> AlexDaniel, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Releasable

[13:56] <[Tux]> Rakudo version 2018.02.1-38-g235d3f1ce - MoarVM version 2018.02-6-g1849ae6d6

[13:56] <[Tux]> csv-test-xs-20      0.455 -  0.477

[13:56] <[Tux]> csv-ip5xs           0.816 -  0.843

[13:56] <[Tux]> test-t --race       1.098 -  1.098

[13:56] <[Tux]> test-t              2.595 -  2.645

[13:56] <[Tux]> csv-ip5xs-20        7.566 -  7.567

[13:56] <[Tux]> test                9.348 -  9.517

[13:56] <[Tux]> csv-parser         12.289 - 12.338

[13:56] <[Tux]> test-t-20 --race   16.190 - 17.422

[13:56] <[Tux]> test-t-20          46.498 - 48.937

[14:11] <MasterDuke> anyone mind merging https://github.com/rakudo/rakudo/pull/1563 ?

[14:26] <travis-ci> NQP build passed. Samantha McVey 'Only run the new decode/encode conf tests on moarvm for now'

[14:26] <travis-ci> https://travis-ci.org/tbrowder/nqp/builds/345931388 https://github.com/tbrowder/nqp/compare/a850efd0587f...24f90977a16d

[14:29] <MasterDuke> does anyone have any optimization idea for List.STORE? https://github.com/rakudo/rakudo/blob/master/src/core/List.pm#L741-L806

[14:31] <pmurias> do we have any sort of style document describing how we put in whitespace in the core

[14:31] <pmurias> (somebody needs to write a working p6tidy)

[14:33] <MasterDuke> i think it's on DrForr's to-do list, now that's he has a 1.0 of Perl6::Parser

[14:36] <pmurias> question: like do we want to have nqp::bindattr(...,...,...,...) or nqp::bindattr(..., ..., ..., ...)?

[14:37] <pmurias> the pull request seems to be aliging stuff

[14:38] * pmurias feels like asshat reviewing code formating with a code formatting style guide

[14:38] <MasterDuke> i think most nqp:: calls in the core don't put spaces after the commas

[14:38] <pmurias> * an asshat

[14:39] <MasterDuke> i think it's because nqp:: calls usually create longer lines and this is a way to keep the size down

[14:40] <MasterDuke> eh, i don't mind a reasonable formatting discussion

[14:45] <pmurias> s/with/without/

[14:47] <Geth> Â¦ rakudo: 36caa18a56 | MasterDuke17++ | src/core/Rational.pm

[14:47] <Geth> Â¦ rakudo: Whitespace fixes for Rational.pm

[14:47] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/36caa18a56

[14:47] <Geth> Â¦ rakudo: 2a8b17ae9c | (PaweÅ‚ Murias)++ (committed using GitHub Web editor) | src/core/Rational.pm

[14:47] <Geth> Â¦ rakudo: Merge pull request #1563 from MasterDuke17/whitespace_fixes_for_Rational.pm

[14:47] <Geth> Â¦ rakudo:

[14:47] <Geth> Â¦ rakudo: Whitespace fixes for Rational.pm

[14:47] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2a8b17ae9c

[14:48] <MasterDuke> thanks

[17:04] * [Coke] yawns

[17:07] <AlexDaniel> [Coke]: are you bored? There are 10 issues assigned to you :) https://github.com/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+assignee%3Acoke+archived%3Afalse+

[17:21] <skids> what do we do these days to performance test a change locally?

[17:25] <japhb> skids: What kind of change is it?  It depends on whether you are optimizing a particular method, or a common construction, or underlying infrastructure ...

[17:26] <gfldex> skids: I got a sizable JSON chunck that I read, modify, and store. The script in question likes threads.

[17:26] <skids> Static optiizer tweak.

[17:26] <skids> *optimizer

[17:27] <japhb> Tweaking what exactly?

[17:27] <skids> Eliminating unnecessary $_ ensconses on inlined blocks.

[17:27] <japhb> (And FWIW, Zoffix and lizmat have done a lot of "optimize a particular construction and test the results")

[17:27] <japhb> Oh, that's gonna be a biggie.

[17:28] <skids> Yeah more a general test than specific cases.

[17:29] <japhb> One possibility for something that pervasive is to test the difference on the rakudo, spectest, and stresstest suites, plus some well-known benchmarks like [Tux]'s suite of CVS parsers.

[17:30] <japhb> Oh wait -- are you looking to confirm that there *is* an effect, to quantify what that effect is, or confirm that there are no regressions from it?

[17:31] <skids> Yes? :-)

[17:31] <japhb> Heh

[17:32] <japhb> Start with [Tux]'s main test-t script, because it runs quickly and fairly stably, and shows many optimizations well, and work out from there.

[17:32] <skids> Ok, thanks.

[17:33] <gfldex> skids: if you look for regressions you could setup your own meta-module and offload the testing to travis.

[17:34] <skids> What's a meta-module?

[17:34] <gfldex> skids: like so: https://gfldex.wordpress.com/2017/01/20/once-a-week/

[17:34] <skids> Will check it out.

[17:35] <gfldex> skids: and stuff the most used modules into the depends-section

[17:36] <gfldex> Zoffix might be able to point to usage statistics on modules.perl6.org

[17:37] <japhb> Looking at the travis screenshots in that post makes me wonder what culture sees switch to the left as on and switch to the right as off.

[17:39] <skids> Reverse tinder?

[17:39] <skids> (I've always hated those android style switches.)

[17:40] <gfldex> the site might have been build be a legt handed person

[17:40] <gfldex> if you use your left thunb to move a switch, moving it the the left is more natural

[17:43] <japhb> Oh that's an interesting possibility

[17:44] <skids> Well, I know everyone is acclimated, but I've always found the idea of touching something that says "off" to turn it "on" to be a bit dicey.

[17:44] * gfldex .oO( 5 hours of sleep is not good for your speeling )

[17:46] <japhb> skids: FWIW I agree with you still

[17:46] <timotimo> steevn spellburg

[17:46] <japhb> Recently I saw a two-state button that read "Turn on" and "Turn off", which is I suppose mildly better, but because you then have to mentally compute the *current* state each time, is still far less than ideal.

[17:48] <skids> Keeping both "on" and "off" visible and just moving the highlight/grayout makes those types of switches a bit better.

[17:48] * japhb wishes for the tactility and dimensionality of audio equipment

[17:49] <japhb> skids: Apple had at least one iteration in which they did something like that, except to my eyes the "highlight" appeared to *de-*emphasize the current setting

[17:50] <skids> Yeah I remember that.

[18:07] <skids> Hrm.  A good number of missing meta deps installing Text::CSV... and internally withing the Test::META and JSON package stacks.

[18:07] <skids> *within

[18:09] <skids> Or maybe my zef is old or something.

[18:14] <MasterDuke> skids: what frequently do is have a clone of moritz's perl6-all-modules and just add paths to there in a -I

[18:14] <MasterDuke> *what i

[18:15] <jdv79> shouldn't 'make t/spec/S24-testing/1-basic.t' work?

[18:17] <jdv79> https://gist.github.com/anonymous/0f389a0b74f28df4bedb768b28d65caa

[18:28] <timotimo> well, it's not in the spectest.data it seems like

[18:28] <timotimo> for what reason? i don't know

[18:37] <jdv79> whatever.  i'll just put it as a PR

[18:37] <jdv79> do bugs go in rt or gh now?

[18:40] <MasterDuke> GH preferred, but could use either

[18:48] <Geth> Â¦ rakudo: jdv++ created pull request #1568: Unbusts like and unlike coercion.

[18:48] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1568

[18:53] <Kaiepi> 6

[18:54] <Kaiepi> agh i need to disable my touchpad

[19:25] <Zoffix> MasterDuke: "i think most nqp:: calls in the core don't put spaces after the commas".   lizmat doesn't put spaces after commas in nqp code

[19:26] <Zoffix> And I find overall that style makes it look a lot cleaner, but it irks me to write that way so in my nqp code I put spaces after commas.

[19:30] <MasterDuke> yeah, i'm not sure that i'm 100% consistent. i tend to prefer spaces after commas in general, but generally go with what the majority of the surrounding code does (if there is pre-existing code)

[19:31] <Zoffix> And I know closing parens placement is where lizmat-nqp and Zoffix-nqp differ on

[19:32] <Zoffix> Mine: https://github.com/rakudo/rakudo/blob/2a8b17ae9c6f886edafb1e510e6abb7c10c69d82/src/core/Version.pm#L25-L82

[19:32] <Zoffix> Lizmat's: https://github.com/rakudo/rakudo/blob/master/src/core/Rakudo/Iterator.pm#L3200-L3298

[19:33] <MasterDuke> i believe yours is more common in lisp circles

[20:51] <Zoffix> jdv79: I left some comments on your PR. If you want, I can just commit a fix myse;f/

[21:41] <Geth> Â¦ rakudo: d5baa036fa | (Zoffix Znet)++ | src/core/IO/CatHandle.pm

[21:41] <Geth> Â¦ rakudo: Implement IO::CatHandle.handles

[21:41] <Geth> Â¦ rakudo:

[21:41] <Geth> Â¦ rakudo: Lets the user work on source handles individually, which is

[21:41] <Geth> Â¦ rakudo: especially handy when working with $*ARGFILES. e.g.:

[21:41] <Geth> Â¦ rakudo:

[21:41] <Geth> Â¦ rakudo:     # print at most the first 2 lines of each file in $*ARGFILES:

[21:41] <Geth> Â¦ rakudo:     .say for flat $*ARGFILES.handles.map: *.lines: 2

[21:41] <Geth> Â¦ rakudo:

[21:41] <Geth> Â¦ rakudo: Addresses R#1546 https://github.com/rakudo/rakudo/issues/1546

[21:41] <synopsebot> R#1546 [open]: https://github.com/rakudo/rakudo/issues/1546 [IO] Implement IO::CatHandle.handles

[21:41] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d5baa036fa

[21:41] <Geth> Â¦ roast: 1a89a1e8f3 | (Zoffix Znet)++ | S32-io/io-cathandle.t

[21:41] <Geth> Â¦ roast: Spec IO::CatHandle.handles

[21:41] <Geth> Â¦ roast:

[21:41] <Geth> Â¦ roast: Covers R#1546 https://github.com/rakudo/rakudo/issues/1546

[21:41] <Geth> Â¦ roast: Rakudo impl:  https://github.com/rakudo/rakudo/commit/d5baa036fa

[21:41] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/1a89a1e8f3

[21:48] <Geth> Â¦ rakudo: 639c6da0ce | (Zoffix Znet)++ | src/core/IO/CatHandle.pm

[21:48] <Geth> Â¦ rakudo: Privatize the cat

[21:48] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/639c6da0ce

[21:57] <Geth> Â¦ roast: f22a783617 | (Zoffix Znet)++ | README.md

[21:57] <Geth> Â¦ roast: Document we got Test::Utils

[21:57] <Geth> Â¦ roast:

[21:57] <Geth> Â¦ roast: And how to write `use lib` for them

[21:57] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/f22a783617

[21:57] <Geth> Â¦ roast: c13f9b1d18 | (Zoffix Znet)++ | README.md

[21:57] <Geth> Â¦ roast: Remove trailing whgitespace

[21:57] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/c13f9b1d18

[22:02] <Geth> Â¦ roast: 98a2004409 | (Zoffix Znet)++ | README.md

[22:02] <Geth> Â¦ roast: Fix urls to module source

[22:02] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/98a2004409

[22:12] <jnthn> .oO( Privatize the cat? This small government thing is really getting out of hand... )

[22:16] <timotimo> who Handles the Cat?

[22:18] <MasterDuke> and why is the cat not in a hat instead?

[22:18] <japhb> These jokes are a catastrophe

[22:19] <MasterDuke> don't fly off your handle!

[22:21] <japhb> Stop, please, I'll go catatonic

[22:21] <japhb> ;-)

[22:30] <Geth> Â¦ roast: 4adee51f32 | (Zoffix Znet)++ | packages/Test/Util.pm

[22:30] <Geth> Â¦ roast: Implement Test::Util::test-iter-opt

[22:30] <Geth> Â¦ roast:

[22:30] <Geth> Â¦ roast: Tests iterator produces correct values and tests the values of

[22:30] <Geth> Â¦ roast: .count-only/.bool-onlyâ€”if implementedâ€”are correct at each

[22:30] <Geth> Â¦ roast: step of reification.

[22:30] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/4adee51f32

[22:31] <Geth> Â¦ roast: 95a7aca30c | (Zoffix Znet)++ | S32-str/ords.t

[22:31] <Geth> Â¦ roast: Fix assumption Str.ords.iterator alwaysâ€¦

[22:31] <Geth> Â¦ roast:

[22:31] <Geth> Â¦ roast: â€¦offers .count-only/.bool-only optimization methods.

[22:31] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/95a7aca30c

[22:38] <jdv79> .tell zoffix yeah; just do it

[22:38] <yoleaux> jdv79: I'll pass your message to zoffix.

[22:38] <jdv79> .tell zoffix note though that timo changed it in that commit i referenced in the issue for a reason.

[22:38] <yoleaux> jdv79: I'll pass your message to zoffix.

[22:47] <Geth> Â¦ roast: 99504f7991 | (Zoffix Znet)++ | packages/Test/Util.pm

[22:47] <Geth> Â¦ roast: Add test-iter-opt variant that doesn't test values

[22:47] <Geth> Â¦ roast:

[22:47] <Geth> Â¦ roast: For testing opts on iterators for which order of values isn't

[22:47] <Geth> Â¦ roast: guaranteed, such as iterators from Hashes.

[22:47] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/99504f7991

[22:47] <Geth> Â¦ roast: 2c021d7a1b | (Zoffix Znet)++ | MISC/bug-coverage.t

[22:47] <Geth> Â¦ roast: Simplify test code

[22:47] <Geth> Â¦ roast:

[22:47] <Geth> Â¦ roast: Use the now-available `test-iter-opt` utility test routine.

[22:47] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/2c021d7a1b

[23:50] <Geth> Â¦ roast: 1d33b3e421 | (Zoffix Znet)++ | S24-testing/14-like-unlike.t

[23:50] <Geth> Â¦ roast: Test like/unlike coerce to Str

[23:50] <Geth> Â¦ roast:

[23:50] <Geth> Â¦ roast: Covers https://github.com/rakudo/rakudo/issues/1567

[23:50] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/1d33b3e421

[23:50] <Geth> Â¦ rakudo: 7c1a6cac77 | (Zoffix Znet)++ | 3 files

[23:50] <Geth> Â¦ rakudo: Improve Test.pm6's like/unlike

[23:50] <Geth> Â¦ rakudo:

[23:50] <Geth> Â¦ rakudo: - Coerce arguments to Str

[23:50] <Geth> Â¦ rakudo:     Fixes  https://github.com/rakudo/rakudo/issues/1567 R#1567

[23:50] <synopsebot> R#1567 [closed]: https://github.com/rakudo/rakudo/issues/1567 Test::like() and Test::unlike() don't coerce anymore

[23:50] <Geth> Â¦ rakudo:     Closes https://github.com/rakudo/rakudo/pull/1568   R#1568

[23:50] <synopsebot> R#1568 [closed]: https://github.com/rakudo/rakudo/pull/1568 Unbusts like and unlike coercion.

[23:51] <Geth> Â¦ rakudo: - Improve/fix failure diagnostics

[23:51] <Geth> Â¦ rakudo:     - Don't quote the $expected, it's a regex, not a string

[23:51] <Geth> Â¦ rakudo:     - .perl()ify the $got so user sees all potential whitespace weirdness

[23:51] <Geth> Â¦ rakudo:     - Say we wanted to [not] match against a regex, not just "expected"

[23:51] <Geth> Â¦ rakudo:     - `unlike` used to incorrectly say "expected: a Str **that matches**"

[23:51] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7c1a6cac77
