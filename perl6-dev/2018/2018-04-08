[01:05] <Geth> ¦ roast: b477bee606 | MasterDuke17++ (committed using GitHub Web editor) | CONTRIBUTING.md

[01:05] <Geth> ¦ roast: Add a couple of suggestions

[01:05] <Geth> ¦ roast:

[01:05] <Geth> ¦ roast: Wording stolen nearly verbatim from zoffix++.

[01:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b477bee606

[01:11] <Geth> ¦ rakudo: ronaldxs++ created pull request #1706: Update 05-messages/03-errors.t test for RT #132238

[01:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1706

[01:11] <synopsebot> RT#132238 [new]: https://rt.perl.org/Ticket/Display.html?id=132238 [LTA] $<> and “Corresponding … was at line”

[01:13] <Geth> ¦ rakudo: 27e77c8d03 | (Ronald Schmidt)++ | t/05-messages/03-errors.t

[01:13] <Geth> ¦ rakudo: Update 05-messages/03-errors.t test for RT #132238 clearer error message for unclosed <> hash quote index operator

[01:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/27e77c8d03

[01:13] <Geth> ¦ rakudo: 9ff655645b | (Zoffix Znet)++ (committed using GitHub Web editor) | t/05-messages/03-errors.t

[01:13] <Geth> ¦ rakudo: Merge pull request #1706 from ronaldxs/rakudo-t-RT-132238-match-hash-2

[01:13] <Geth> ¦ rakudo:

[01:13] <Geth> ¦ rakudo: Update 05-messages/03-errors.t test for RT #132238

[01:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9ff655645b

[02:52] <AlexDaniel> m: 42 xx ∞

[02:53] <camelia> rakudo-moar 9ff655645: OUTPUT: «(timeout)»

[03:43] <Geth> ¦ roast: b320464868 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S03-operators/repeat.t

[03:43] <Geth> ¦ roast: Test xx not dying with large repetition count

[03:43] <Geth> ¦ roast:

[03:43] <Geth> ¦ roast: Closes RT#126014.

[03:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b320464868

[03:43] <synopsebot> RT#126014 [open]: https://rt.perl.org/Ticket/Display.html?id=126014 Too many repetitions with xx operator causes out of memory; should it work lazily?

[03:45] <Geth> ¦ roast: 19344b3c7f | (Aleks-Daniel Jakimenko-Aleksejev)++ | S03-operators/repeat.t

[03:45] <Geth> ¦ roast: Oops. Fix RT number in the last commit

[03:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/19344b3c7f

[04:22] <Geth> ¦ roast: a7af87465e | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-io/io-handle.t

[04:22] <Geth> ¦ roast: Test that nl-in has \n and \r\n

[04:22] <Geth> ¦ roast:

[04:22] <Geth> ¦ roast: Closes RT#131858, but I still don't understand why it gives an array

[04:22] <Geth> ¦ roast: instead of a Junction. There's probably a good reason, but speccing it

[04:22] <Geth> ¦ roast: this way is probably wrong. Please adjust.

[04:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a7af87465e

[04:22] <synopsebot> RT#131858 [open]: https://rt.perl.org/Ticket/Display.html?id=131858 [REGRESSION] default $.nl-in on IO::Handle does not correctly work in subclasses

[04:26] <AlexDaniel> m: 42 xx 2⁹⁹⁹⁹⁹

[04:26] <camelia> rakudo-moar 9ff655645: ( no output )

[04:27] <AlexDaniel> m: 42 xx 2⁹⁹

[04:27] <camelia> rakudo-moar 9ff655645: ( no output )

[04:27] <AlexDaniel> m: 42 xx 2⁶³

[04:27] <camelia> rakudo-moar 9ff655645: ( no output )

[04:27] <AlexDaniel> m: 42 xx 2⁶⁰

[04:27] <camelia> rakudo-moar 9ff655645: ( no output )

[05:07] <Geth> ¦ roast: ec2b4c3a7c | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-io/io-handle.t

[05:07] <Geth> ¦ roast: Change nl-in test to is-deeply

[05:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ec2b4c3a7c

[05:12] <Geth> ¦ roast: 22001cb924 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S04-statements/for.t

[05:12] <Geth> ¦ roast: Use is-deeply in hole tests

[05:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/22001cb924

[05:25] <Geth> ¦ rakudo: 5f256baec2 | (Zoffix Znet)++ | src/core/Rakudo/Iterator.pm6

[05:25] <Geth> ¦ rakudo: Implement optimized Iterator methods for `42 xx ...`

[05:25] <Geth> ¦ rakudo:

[05:25] <Geth> ¦ rakudo: Fixes R#1708 https://github.com/rakudo/rakudo/issues/1708

[05:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5f256baec2

[05:25] <synopsebot> R#1708 [open]: https://github.com/rakudo/rakudo/issues/1708 … xx ∞ should return a Seq

[05:29] <Geth> ¦ roast: b4b0d584bc | (Zoffix Znet)++ | S03-operators/repeat.t

[05:29] <Geth> ¦ roast: Test opt methods/sinkage of `xx` with simple value

[05:29] <Geth> ¦ roast:

[05:29] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1708 R#1708

[05:29] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/5f256baec2

[05:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b4b0d584bc

[05:51] <Geth> ¦ roast: 5fe5978a18 | (Zoffix Znet)++ (committed using GitHub Web editor) | CONTRIBUTING.md

[05:51] <Geth> ¦ roast: Use implementation-neutral language

[05:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5fe5978a18

[06:21] <Geth> ¦ roast: 03ac03f16c | usev6++ | MISC/bug-coverage-stress.t

[06:21] <Geth> ¦ roast: [JVM] Skip tests using 'atomicint'

[06:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/03ac03f16c

[07:18] <Zoffix> ZOFHANG: t/spec/S07-hyperrace/stress.t

[07:22] <Zoffix> ZOFVM: Files=1294, Tests=153299, 142 wallclock secs (20.31 usr  3.18 sys + 3026.02 cusr 141.63 csys = 3191.14 CPU)

[07:29] <Geth> ¦ rakudo: 4402839adb | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[07:29] <Geth> ¦ rakudo: Fix crash in double-sink for for ... { Package::foo }

[07:29] <Geth> ¦ rakudo:

[07:29] <Geth> ¦ rakudo: Fixes R#1693 https://github.com/rakudo/rakudo/issues/1693

[07:29] <Geth> ¦ rakudo:

[07:29] <Geth> ¦ rakudo: After adding a sink call to the last statement, we UNWANTED,

[07:29] <Geth> ¦ rakudo: the guts and because of the setup, we ended up adding another

[07:29] <synopsebot> R#1693 [open]: https://github.com/rakudo/rakudo/issues/1693 [regression][⚠ blocker ⚠] Cannot find method 'Nil'

[07:29] <Geth> ¦ rakudo: sink call into the QAST inside UNWANTED, causing the error in the Issue.

[07:29] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[07:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4402839adb

[07:30] <Geth> ¦ roast: 06d2abbc6c | (Zoffix Znet)++ | S04-statements/sink.t

[07:30] <Geth> ¦ roast: Test sinkage of package call in for

[07:30] <Geth> ¦ roast:

[07:30] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1693 R#1693

[07:30] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/4402839adb

[07:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/06d2abbc6c

[07:47] <Zoffix> ZOFHANG: t/spec/S07-hyperrace/stress.t

[07:48] <Zoffix> releasable6: next

[07:48] <releasable6> Zoffix, Next release in ≈13 days and ≈11 hours. 6 blockers. 0 out of 188 commits logged (⚠ 9 warnings)

[07:48] <releasable6> Zoffix, Details: https://gist.github.com/04a8b844fed55d64eb4316030f104e51

[07:48] <Zoffix> huggable: star

[07:48] <huggable> Zoffix, Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[07:52] <Geth> ¦ rakudo: 9bcc8e523e | (Zoffix Znet)++ | src/core/CompUnit/PrecompilationUnit.pm6

[07:52] <Geth> ¦ rakudo: Fix thinko in CURR conditional

[07:52] <Geth> ¦ rakudo:

[07:52] <Geth> ¦ rakudo: Part of fixing R#1662 https://github.com/rakudo/rakudo/issues/1662

[07:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9bcc8e523e

[07:52] <synopsebot> R#1662 [open]: https://github.com/rakudo/rakudo/issues/1662 [⚠ blocker ⚠] Windows Issues with "Replace error-prone file timestamp check by checksum when loading deps"

[08:00] <Zoffix> ZOFFLOP: t/spec/S17-procasync/basic.t

[08:06] <Zoffix> Shoved t/spec/S07-hyperrace/stress.t into a loop, while stresstesting in another terminal, after ~5min it crashed with `Type check failed in binding to parameter '$batch'; expected Rakudo::Internals::HyperWorkBatch but got Mu (Mu)` Full output: https://gist.github.com/zoffixznet/5740c60fec4cf093d1bfe93416b87515

[08:13] <Zoffix> k, reproed a hang with a small bit of t/spec/S07-hyperrace/stress.t again

[08:18] <Zoffix> Filed as https://github.com/rakudo/rakudo/issues/1709 R#1709

[08:18] <synopsebot> R#1709 [open]: https://github.com/rakudo/rakudo/issues/1709 [ASYNC][⚠ blocker ⚠] A race in HyperRace causing rare crash/hang

[08:21] <Zoffix> ZOFFLOP: t/spec/S06-advanced/stub.t

[08:21] <Zoffix> ZOFFLOP: t/spec/S10-packages/basic.t

[08:21] <Zoffix> ZOFFLOP: t/spec/S10-packages/basict

[08:22] <Zoffix> ZOFFLOP: t/spec/S02-types/capture.t

[08:22] <Zoffix> ZOFFLOP: t/spec/S06-other/main.t

[08:22] <Zoffix> ZOFFLOP: t/spec/S17-procasync/basic.t

[08:23] <Zoffix> That's the floppers from 7 stresstest runs

[08:23] <Zoffix> S10-packages/basic.t and S17-procasync/basic.t are familiar offenders, but the rest are freshcomers

[08:27] * Zoffix fires off another 10 runs

[08:27] <Zoffix> And filed R#1710 not sure what else to say in the issue otehr than I see a lot more random floppers I've not seen before

[08:27] <synopsebot> R#1710 [open]: https://github.com/rakudo/rakudo/issues/1710 New stresstest floppers

[08:28] <FROGGS> o/

[08:28] <Zoffix> \o

[08:31] <nine> Zoffix: are they more reproducible with these env vars? MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1

[08:38] * Zoffix re-starts 10 runs with those vars set

[08:46] <Zoffix> I got 4 files I've not seen before and t/spec/S17-procasync/basic.t on the first run. Gonna post results on the ticket after a few more runs

[09:16] <Zoffix> Posted 5 runs: https://github.com/rakudo/rakudo/issues/1710#issuecomment-379534521   Looks like most of them aren't floppers but are just reproducible failures

[09:20] <AlexDaniel> Zoffix: fwiw we can bisect with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 if needed

[09:20] <AlexDaniel> so maybe someone can try golfing one of these and then we'll bisect

[09:20] <AlexDaniel> and even if bisect points to a bump, we'll at least have a golfed version :)

[09:24] <robertle> what do MVM_SPESH_NODELAY and MVM_SPESH_BLOCKING actually do?

[09:25] <Zoffix> MVM_SPESH_NODELAY           Run dynamic optimization even for cold frames

[09:25] <Zoffix> MVM_SPESH_BLOCKING          Blocks log-sending thread while specializer runs

[09:25] <Zoffix> There's a bunch more in (see moar --help)

[09:26] <Zoffix> robertle: basically makes spesh bugs pop up a lot easier, as far as I understand it

[09:26] <Zoffix> spesh = our dynamic optimizer

[09:28] <[Tux]> Rakudo version 2018.03-162-ge348b8f21 - MoarVM version 2018.03-87-g677d4e9a8

[09:28] <[Tux]> csv-test-xs-20      0.457 -  0.504

[09:28] <[Tux]> csv-ip5xs           0.902 -  0.940

[09:28] <[Tux]> test-t --race       0.982 -  1.040

[09:28] <[Tux]> test-t              2.414 -  2.572

[09:28] <[Tux]> csv-ip5xs-20        8.533 -  8.784

[09:28] <[Tux]> test                9.100 -  9.492

[09:28] <[Tux]> test-t-20 --race   14.844 - 15.146

[09:28] <[Tux]> csv-parser         36.214 - 36.978

[09:28] <[Tux]> test-t-20          42.845 - 43.755

[09:30] <[Tux]> And I got this

[09:30] <[Tux]> All tests successful.

[09:30] <[Tux]> Files=30, Tests=22441, 25 wallclock secs ( 2.49 usr  0.25 sys + 84.88 cusr  2.84 csys = 90.46 CPU)

[09:30] <[Tux]> Result: PASS

[09:30] <Zoffix> ? Do you mean you didn't get that beoore?

[09:31] <Zoffix> *before

[10:02] <Geth> ¦ roast: JJ++ created pull request #414: Adds test for RT#126394

[10:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/414

[10:02] <synopsebot> RT#126394 [open]: https://rt.perl.org/Ticket/Display.html?id=126394 [BUG] Assigning Failure to typed variable swallows Failure information

[10:03] <Geth> ¦ roast: ce173d4c66 | (JJ Merelo)++ | S04-exceptions/fail.t

[10:03] <Geth> ¦ roast: Adds test for RT#126394

[10:03] <Geth> ¦ roast:

[10:03] <Geth> ¦ roast: Checking that it fails and effectively includes the important message.

[10:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ce173d4c66

[10:03] <Geth> ¦ roast: 295d101a09 | (Zoffix Znet)++ (committed using GitHub Web editor) | S04-exceptions/fail.t

[10:03] <Geth> ¦ roast: Merge pull request #414 from JJ/master

[10:03] <Geth> ¦ roast:

[10:03] <Geth> ¦ roast: Adds test for RT#126394

[10:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/295d101a09

[10:04] <Geth> ¦ roast: 39b4d2a83e | (Zoffix Znet)++ (committed using GitHub Web editor) | S04-exceptions/fail.t

[10:04] <Geth> ¦ roast: Remove needless ticket title

[10:04] <Geth> ¦ roast:

[10:04] <Geth> ¦ roast: (along with possibly-conflicting with fudger `#?` portion)

[10:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/39b4d2a83e

[10:07] <Geth> ¦ nqp: d6061c5f36 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp

[10:07] <Geth> ¦ nqp: Don't emit cstack handling code if unused

[10:07] <Geth> ¦ nqp:

[10:07] <Geth> ¦ nqp: Anything that doesn't capture or won't need to backtrack into a subrule

[10:07] <Geth> ¦ nqp: call will not need a cstack. We already allocate it lazily, but this

[10:07] <Geth> ¦ nqp: change means we don't even generate code to trim it when the null check

[10:07] <Geth> ¦ nqp: guarding it would always come out true. This saves the check and makes

[10:07] <Geth> ¦ nqp: the generated code more compact. This results in a bit over 3KB less

[10:07] <Geth> ¦ nqp: bytecode from compiling the NQP grammar. This change combined with the

[10:07] <Geth> ¦ nqp: previous one to not emit unused cclass setup save around 43KB off the

[10:07] <Geth> ¦ nqp: compiled output of the Perl 6 grammar.

[10:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d6061c5f36

[10:07] <Geth> ¦ roast: d3c04b47ca | (Zoffix Znet)++ (committed using GitHub Web editor) | S04-exceptions/fail.t

[10:07] <Geth> ¦ roast: Add test description

[10:07] <Geth> ¦ roast:

[10:07] <Geth> ¦ roast: (and toss unneeded `say` code)

[10:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d3c04b47ca

[10:15] <robertle> thanks, I am trying to reproduce sporadic build failures on s390x and mips, and was wondering if these could affect behavior... doesn't look like they make a massive difference though

[10:44] <Geth> ¦ roast: 1f171a9d2f | (Aleks-Daniel Jakimenko-Aleksejev)++ | S07-hyperrace/basics.t

[10:44] <Geth> ¦ roast: Add tests for hyperized s///

[10:44] <Geth> ¦ roast:

[10:44] <Geth> ¦ roast: Should also catch other reliability issues of .hyper, including

[10:44] <Geth> ¦ roast: segfaults. Closes RT#126752.

[10:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1f171a9d2f

[10:44] <synopsebot> RT#126752 [open]: https://rt.perl.org/Ticket/Display.html?id=126752 [BUG] $/ vs .hyper gets confused

[12:15] <Geth> ¦ roast: dogbert17++ created pull request #415: Add test for RT #127974

[12:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/415

[12:15] <synopsebot> RT#127974 [open]: https://rt.perl.org/Ticket/Display.html?id=127974 [CONC] sprintf() not threadsafe/reentrant if the format tokens use explicit indices

[13:03] <Geth> ¦ rakudo: ronaldxs++ created pull request #1712: Update 05-messages/03-errors.t simpler and clearer tests for RT#132238

[13:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1712

[13:03] <synopsebot> RT#132238 [resolved]: https://rt.perl.org/Ticket/Display.html?id=132238 [LTA] $<> and “Corresponding … was at line”

[13:37] <Geth> ¦ nqp/master: 4 commits pushed by pmurias++

[13:37] <Geth> ¦ nqp/master: cb8b562c04 | [js] Fix deserializing debugName

[13:37] <Geth> ¦ nqp/master: f1d73d1036 | [js] Parameter interning

[13:37] <Geth> ¦ nqp/master: 5b8b657be2 | Basic test for parameter interning

[13:37] <Geth> ¦ nqp/master: df7d707933 | [js] Temporary workaround till we load real unicode data

[13:37] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/d6061c5f3670...df7d7079338d

[14:39] <Geth> ¦ nqp: 95116aa460 | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/io/AsyncProcessHandle.java

[14:39] <Geth> ¦ nqp: [JVM] Make process ID of started child available

[14:39] <Geth> ¦ nqp:

[14:39] <Geth> ¦ nqp: Please note: I didn't test the code on Windows.

[14:39] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/95116aa460

[17:37] <Geth> ¦ nqp: f79f0ce1a4 | (Elizabeth Mattijsen)++ | tools/build/MOAR_REVISION

[17:37] <Geth> ¦ nqp: Get latest Moar for nqp::floor_n JITting

[17:37] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f79f0ce1a4

[17:37] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.03-96-gfa16746...2018.03-97-ga206cd8

[18:09] <Geth> ¦ rakudo: a53811cd4d | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[18:09] <Geth> ¦ rakudo: Bump NQP to get the nqp::floor_n jitting

[18:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a53811cd4d

[18:09] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.03-65-g9b75f67...2018.03-72-gf79f0ce

[18:23] <Geth> ¦ rakudo: d9869e53b5 | (Elizabeth Mattijsen)++ | src/core/Array.pm6

[18:23] <Geth> ¦ rakudo: Mark reification target .push / .append as --> Nil

[18:23] <Geth> ¦ rakudo:

[18:23] <Geth> ¦ rakudo: Hopefully that will mean they optimize better in the future

[18:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d9869e53b5

[18:36] <Geth> ¦ roast: 3727e0314a | (Jan-Olof Hendig)++ | S07-hyperrace/basics.t

[18:36] <Geth> ¦ roast: Add test for RT #127974

[18:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3727e0314a

[18:36] <Geth> ¦ roast: 76d6344efd | dogbert17++ (committed using GitHub Web editor) | S07-hyperrace/basics.t

[18:36] <Geth> ¦ roast: Update basics.t

[18:36] <Geth> ¦ roast:

[18:36] <Geth> ¦ roast: Don't merge this yet as the added test seems to uncover another bug. AlexDaniel++ for the test.

[18:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/76d6344efd

[18:36] <synopsebot> RT#127974 [open]: https://rt.perl.org/Ticket/Display.html?id=127974 [CONC] sprintf() not threadsafe/reentrant if the format tokens use explicit indices

[18:36] <Geth> ¦ roast: d21d2b33f9 | (Zoffix Znet)++ (committed using GitHub Web editor) | S07-hyperrace/basics.t

[18:37] <Geth> ¦ roast: Merge pull request #415 from dogbert17/test-rt-127974

[18:37] <Geth> ¦ roast:

[18:37] <Geth> ¦ roast: Add test for RT #127974

[18:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d21d2b33f9

[18:39] <Geth> ¦ rakudo: a2a6aad8be | (Ronald Schmidt)++ | t/05-messages/03-errors.t

[18:39] <Geth> ¦ rakudo: Update 05-messages/03-errors.t simpler and clearer tests for RT#132238 unclosed $< .

[18:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a2a6aad8be

[18:39] <Geth> ¦ rakudo: 318a9b090c | (Zoffix Znet)++ (committed using GitHub Web editor) | t/05-messages/03-errors.t

[18:39] <Geth> ¦ rakudo: Merge pull request #1712 from ronaldxs/rakudo-t-RT-132238-match-hash-2

[18:39] <Geth> ¦ rakudo:

[18:39] <Geth> ¦ rakudo: Update 05-messages/03-errors.t simpler and clearer tests for RT#132238

[18:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/318a9b090c

[18:39] <synopsebot> RT#132238 [resolved]: https://rt.perl.org/Ticket/Display.html?id=132238 [LTA] $<> and “Corresponding … was at line”

[19:00] <lizmat> is the last test of S07-hyperrace/basics.t supposed to hang ?

[19:00] <lizmat> it hangs for me reliably  :-

[19:00] <lizmat> (

[19:02] <Zoffix> lizmat: don't think so. And there's also R#1709 I filed last night

[19:02] <synopsebot> R#1709 [open]: https://github.com/rakudo/rakudo/issues/1709 [ASYNC][⚠ blocker ⚠] A race in HyperRace causing rare crash/hang

[19:03] <lizmat> ok, would be surprised if it is my last local change causing this

[19:06] <lizmat> nope, it's not

[19:06] <lizmat> how long is that test supposed to run?  seconds ?

[19:07] <Zoffix> Files=1, Tests=83,  4 wallclock secs ( 0.04 usr  0.00 sys +  4.24 cusr  0.38 csys =  4.66 CPU)

[19:07] <Zoffix> (doesn't hang for me)

[19:08] <dogbert17> I don't think that PR should have been merged just yet ...

[19:09] <Geth> ¦ rakudo: 5ec4a5ab44 | (Elizabeth Mattijsen)++ | 2 files

[19:09] <Geth> ¦ rakudo: Use nqp::elems instead of .elems for native arrays

[19:09] <Geth> ¦ rakudo:

[19:09] <Geth> ¦ rakudo: Saves 1 method call + a number of allocations.  Makes e.g. copying native

[19:09] <Geth> ¦ rakudo: arrays about 9% faster

[19:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5ec4a5ab44

[19:10] <dogbert17> "roast: Don't merge this yet as the added test seems to uncover another bug. AlexDaniel++ for the test."

[19:12] <Zoffix> dogbert17: well, it'd be helpful to specify that in the PR's description instead of burried in the commit messages. The PR was marged as approved: https://i.imgur.com/Q8wIhUY.png

[19:12] <Zoffix> s/merged/marked/;

[19:13] <dogbert17> Zoffix: it was indeed, I'm the one to blame for this

[19:14] <dogbert17> it seems as if there are still a few bugs in the implementation of 'race'

[19:16] <samcv> Zoffix: what do you think about Int.random which will get a random integer?

[19:17] <samcv> or we could call it another name if we want

[19:18] <Zoffix> .oO( YAGNI )

[19:18] <samcv> there's no way to generate a random bigint though

[19:20] <Zoffix> IMO that's going backwards: you see a way to implement a feature and try to think of the usecase, where the usecase should come first.

[19:21] <samcv> though i am thinking about making .rand more random. because our origin source of entropy is just "time * pid"

[19:21] <samcv> which is pretty unrandom

[19:22] <Zoffix> Current .rand gives a range of quadrillion random numbers. Not all of them are representable in Num, in 2**53 every second one is representable and it increases as you increase or decrease that, but even if we dial down by three magnitudes, that's a trillion random numbers.

[19:22] <samcv> but i should be able to mix in some actual randomness

[19:22] <Zoffix> So yeah, I can see trailing zeros in 1e300.rand, but I don't have a usecase where I need more than a trillion random numbers.

[19:23] <Zoffix> And I can always combine multiple random portions of those Nums to form a very large Int if I ever need more than a trillion.

[19:23] <samcv> and .rand acts based on the seed value. nqp::rand_I i believe doesn't if the platform has a random number system function

[19:24] <samcv> so the usecase may be greater for getting actual random numbers from the os instead of a deterministic random number

[19:24] <samcv> i'll think on that i suppose

[19:25] <Zoffix> Perfect for a module.

[19:25] <samcv> it would have to use nqp though? that seems less than ideal

[19:26] <Zoffix> Why? Every language has modules that produce true random numbers. I doubt they all rely on exposed guts of the language's interpreter/compiler.

[19:27] <Zoffix> But still IMO that's going backwards: you see a way to implement a feature and try to think of the usecase, where the usecase should come first.

[19:27] <samcv> well they have to get it from somewhere. i mean i guess you could use nativecall. but not sure how well that'd work cross platform

[19:28] <samcv> but as i said i'll think about this stuff

[19:28] <Zoffix> What do you need true random numbers for? What are you building? What are you building that you need so many true random numbers that it'd be convenient to have it as a core feature?

[19:28] <samcv> and in the meantime at least seed with something better than(epochtime * PID)

[19:29] <Zoffix> This is the same as IO::Path.parent(UInt). It was argued about how needed it is and implemented but like half a year later it was still undocumented and untested and no one used it. Just shows the feature was implemented without a user actually needin git.

[19:30] <Zoffix> Same with true randomness. Do all OSes provide the means to produce true random numbers? And what'll be the behaviour when available entropy is exhausted?

[19:31] <samcv> no i agree with what you're saying. and thank you for providing your opinion on this

[19:34] <samcv> Zoffix: .parent does seem to be used in modules. though i appologize for not adding it to the docs

[19:36] <samcv> i'll be back a bit later. o/

[19:36] <lizmat_> .tell jnthn for something like "my int @a = ^100; my int @b = @a" more than 80% of the time is spent in MetaModel code, which seems suboptimal  :-)

[19:36] <yoleaux> lizmat_: I'll pass your message to jnthn.

[19:39] <Geth> ¦ rakudo: 8c265f9baa | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/CurriedRoleHOW.nqp

[19:39] <Geth> ¦ rakudo: Micro-optimize CurriedRoleHOW.accept_type

[19:39] <Geth> ¦ rakudo:

[19:39] <Geth> ¦ rakudo: This makes it 1% faster.  But with it being responsible for 40+% of

[19:39] <Geth> ¦ rakudo: time in something like "my int @a = ^100; my int @b = @a", it seemed

[19:39] <Geth> ¦ rakudo: worthwhile.

[19:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8c265f9baa

[19:40] <lizmat_> .tell jnthn feels like we're missing a caching opportunity here

[19:40] <yoleaux> lizmat_: I'll pass your message to jnthn.

[20:21] <Geth> ¦ rakudo: e8ec81db06 | (Elizabeth Mattijsen)++ | src/core/native_array.pm6

[20:21] <Geth> ¦ rakudo: Make my int @a = ^100 about 40% faster

[20:21] <Geth> ¦ rakudo:

[20:21] <Geth> ¦ rakudo: Fewer method calls, 2 allocations less per call

[20:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e8ec81db06

[20:32] <Geth> ¦ rakudo: 6c2f24455c | (Zoffix Znet)++ | src/core/Rakudo/Internals.pm6

[20:32] <Geth> ¦ rakudo: Include backtrace when printing THE-END exceptions

[20:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6c2f24455c

[20:33] <lizmat> Zoffix++

[20:37] <MasterDuke> zoffix++, but i think it would be good to put a '\n' before the backtrace

[20:41] <Geth> ¦ rakudo: 5fee5891c1 | (Zoffix Znet)++ | src/core/Rakudo/Internals.pm6

[20:41] <Geth> ¦ rakudo: Include \n before backtrace; MasterDuke++

[20:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5fee5891c1

[21:04] <Geth> ¦ rakudo: 91fe6b63d3 | (Zoffix Znet)++ | src/core/Rakudo/Internals.pm6

[21:04] <Geth> ¦ rakudo: Indent backtraces in THE-END exceptions

[21:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/91fe6b63d3

[21:07] <AlexDaniel> dogbert17: ok just fudge the test then

[21:07] <lizmat> this is about the last race test that hangs ?

[21:07] <AlexDaniel> yes

[21:07] <lizmat> ok, I had already fudged it locally

[21:08] <lizmat> will push

[21:08] <AlexDaniel> okay

[21:08] <Geth> ¦ roast: f5246f8b3e | (Elizabeth Mattijsen)++ | S07-hyperrace/basics.t

[21:08] <Geth> ¦ roast: Fudge new test that is hanging on at least MacOS

[21:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f5246f8b3e

[21:13] <dogbert17> lizmat++

[21:17] <Geth> ¦ rakudo: 40815d16db | (Elizabeth Mattijsen)++ | 2 files

[21:17] <Geth> ¦ rakudo: Make initialization of int(8|16|32|64)/num(32|64) arrays 9x as fast

[21:17] <Geth> ¦ rakudo:

[21:17] <Geth> ¦ rakudo: Due to a bad signature, it was using the slow, generic path.

[21:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/40815d16db

[21:20] <AlexDaniel> c: HEAD say do for ^20 { [do for ^5 { ("a".."z").roll(3).join }] };

[21:20] <committable6> AlexDaniel, https://gist.github.com/a2cdebffbf3da91d448dd357f4a1cc80

[21:21] <AlexDaniel> c: HEAD do for ^1000 { [do for ^5 { ("a".."z").roll(3).join }] };

[21:21] <committable6> AlexDaniel, ¦HEAD(91fe6b6): «»

[21:21] <AlexDaniel> c: HEAD do for ^10000 { [do for ^5 { ("a".."z").roll(3).join }] };

[21:21] <committable6> AlexDaniel, ¦HEAD(91fe6b6): «»

[21:22] <timotimo> ooooh

[21:22] <timotimo> lizmat++

[21:23] <AlexDaniel> did anybody manage to reproduce https://github.com/MoarVM/MoarVM/issues/838 ?

[21:24] <lizmat> afraid I didn't

[21:25] <jnthn> Me either, but I don't have HEAD of everything

[21:25] <yoleaux> 19:36Z <lizmat_> jnthn: for something like "my int @a = ^100; my int @b = @a" more than 80% of the time is spent in MetaModel code, which seems suboptimal  :-)

[21:25] <yoleaux> 19:40Z <lizmat_> jnthn: feels like we're missing a caching opportunity here

[21:25] <jnthn> Suboptimal indeed :)

[21:26] <jnthn> Will have to look at that

[21:26] <lizmat> it *may* have something to do with the candidates, looking at that now

[21:26] <lizmat> will get back to you on that  :-)

[21:27] <jnthn> Alright :)

[21:29] <lizmat> I think https://github.com/rakudo/rakudo/commit/40815d16db fixed it

[21:29] <lizmat> but maybe not  :-)

[21:30] <jnthn> aha

[21:35] <Geth> ¦ rakudo: c015f08dec | (Zoffix Znet)++ | 2 files

[21:35] <Geth> ¦ rakudo: Fix crash with unknown column in RAKUDO_REPORT_COLUMNS

[21:35] <Geth> ¦ rakudo:

[21:35] <Geth> ¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1714

[21:35] <Geth> ¦ rakudo:

[21:35] <Geth> ¦ rakudo: Warn that we don't know what that is instead.

[21:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c015f08dec

[21:42] <dogbert17> was it a good conference?

[21:43] <lizmat> dogbert17: I thought it was pretty good... should have some videos of it before long  :)

[21:44] <dogbert17> any interesting speeches?

[21:45] <timotimo> three jonathan talks :) :)

[21:46] <dogbert17> aha, interesting

[21:48] <lizmat> yes, they all were  :-)

[21:51] <MasterDuke> Zoffix, lizmat: re https://github.com/rakudo/rakudo/commit/c015f08dec, tcd is a valid column/field according to https://docs.perl6.org/type/Telemetry::Instrument::Thread, there just weren't any values recorded for it

[21:52] <MasterDuke> would it make sense for the warning to mention that as a possibility?

[21:52] <Geth> ¦ rakudo: b5318e6ef2 | (Elizabeth Mattijsen)++ | 2 files

[21:52] <Geth> ¦ rakudo: Make my @a = ^100; my int @b = @a about 9x as fast

[21:52] <Geth> ¦ rakudo:

[21:52] <Geth> ¦ rakudo: - create a separate List:D source candidate that can use nqp::atpos

[21:52] <Geth> ¦ rakudo: - also for native str and num

[21:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b5318e6ef2

[21:52] <Geth> ¦ rakudo: ronaldxs++ created pull request #1715: Update 05-messages/03-errors.t to add test for RT #122980.

[21:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1715

[21:52] <synopsebot> RT#122980 [open]: https://rt.perl.org/Ticket/Display.html?id=122980 [BUG] LTA error message on fairly strange input, complaining about the lack of a semicolon when the semicolon's right there in Rakudo

[21:59] <Geth> ¦ rakudo: 1c33453cd6 | (Ronald Schmidt)++ | t/05-messages/03-errors.t

[21:59] <Geth> ¦ rakudo: Update 05-messages/03-errors.t to add test for RT #122980 and check

[21:59] <Geth> ¦ rakudo:

[21:59] <Geth> ¦ rakudo: for the invalid "missing semicolon" message. The rakudo versions with

[21:59] <Geth> ¦ rakudo: the problem were over three years old and the Test libraries were not

[21:59] <Geth> ¦ rakudo: compatible with 2018 03-errors.t so testing with a symptomatic version

[21:59] <Geth> ¦ rakudo: had to be manually jury rigged. If test is still wanted think about

[21:59] <Geth> ¦ rakudo: the best that can be done.

[21:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c33453cd6

[21:59] <Geth> ¦ rakudo: 95481e26bd | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | t/05-messages/03-errors.t

[21:59] <Geth> ¦ rakudo: Merge pull request #1715 from ronaldxs/test-RT-122980-wrong-msg-semi

[21:59] <Geth> ¦ rakudo:

[21:59] <Geth> ¦ rakudo: Update 05-messages/03-errors.t to add test for RT #122980.

[21:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/95481e26bd

[22:02] <Zoffix> MasterDuke: that column wasn't on my box. Maybe the available columns depend on the OS? I'm on Bodhi Linux. There's a bunch of columns (like IIRC `act`) that didn't have any values and don't show up in the output, but a warning wouldn't be shown for those.

[22:03] <Zoffix> or was it there....

[22:03] * Zoffix re-stricks debug prints

[22:04] <Zoffix> MasterDuke: if I dump %format.keys at line 845 of lib/Telemetry.pm6, I get ["tw", "gw", "atc", "util\%", "volcsw", "nswp", "minf", "cpu", "ttq", "mrcv", "cpu-sys", "ttc", "s", "aw", "wallclock", "is-rss", "invcsw", "inb", "cpus", "gtc", "atq", "outb", "nsig", "max-rss", "ix-rss", "gtq", "cpu-user", "majf", "id-rss", "msnd"]

[22:04] <Zoffix> And `act` is one of teh default columns for which no data is collected

[22:04] <timotimo> you want atc, not act

[22:05] <Zoffix> yeah, atc

[22:05] <timotimo> ah, that was just a typo

[22:05] <Zoffix> And if I write RAKUDO_REPORT_COLUMNS=atc I don't get output nor warning, but if I write RAKUDO_REPORT_COLUMNS=act I get the "unknown column" warning

[22:06] <timotimo> aw, that's not good

[22:08] <Zoffix> Which part?

[22:08] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/lib/Telemetry.pm6#L234

[22:09] <MasterDuke> line 247 even shows it as a default column. but maybe there is some OS dependence?

[22:13] <Zoffix> Ah k

[22:13] <Zoffix> MasterDuke: If I set RAKUDO_TELEMETRY_INSTRUMENTS=Thread I get tcd and bunch of other columns

[22:14] <Zoffix> With no data in them

[22:14] <MasterDuke> ah, cool. let me try that...

[22:16] <Geth> ¦ rakudo: 6cdee60df3 | (Zoffix Znet)++ | lib/Telemetry.pm6

[22:16] <Geth> ¦ rakudo: Suggest RAKUDO_TELEMETRY_INSTRUMENTS in warning

[22:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6cdee60df3

[22:16] <MasterDuke> heh, i once got tsd and thid, but usually it's blank

[22:16] <MasterDuke> Zoffix++

[22:24] <Geth> ¦ nqp: 463e56954b | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[22:24] <Geth> ¦ nqp: [MoarVM Bump] Brings 2 commits

[22:24] <Geth> ¦ nqp:

[22:24] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.03-97-ga206cd8...2018.03-99-g4234ab5

[22:24] <Geth> ¦ nqp: 4234ab5 throw out problematic impl of floor_n in jit

[22:24] <Geth> ¦ nqp: cfa1f2a Fix memory corruption when running with FSA_SIZE_DEBUG set

[22:24] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/463e56954b

[22:24] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.03-97-ga206cd8...2018.03-99-g4234ab5

[22:24] <Geth> ¦ rakudo: 0a08f1d0aa | (Zoffix Znet)++ | tools/build/NQP_REVISION

[22:24] <Geth> ¦ rakudo: [NQP Bump] 463e569 [MoarVM Bump] Brings 2 commits

[22:24] <Geth> ¦ rakudo:

[22:24] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.03-72-gf79f0ce...2018.03-73-g463e569

[22:24] <Geth> ¦ rakudo:

[22:24] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.03-97-ga206cd8...2018.03-99-g4234ab5

[22:24] <Geth> ¦ rakudo: 4234ab5 throw out problematic impl of floor_n in jit

[22:24] <Geth> ¦ rakudo: cfa1f2a Fix memory corruption when running with FSA_SIZE_DEBUG set

[22:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0a08f1d0aa

[22:24] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.03-72-gf79f0ce...2018.03-73-g463e569

[22:26] <Geth> ¦ roast: bf28c7796e | (Zoffix Znet)++ | MISC/bug-coverage.t

[22:26] <Geth> ¦ roast: Cover Illegal Instruction crash

[22:26] <Geth> ¦ roast:

[22:26] <Geth> ¦ roast: Covers M#838 https://github.com/MoarVM/MoarVM/issues/838

[22:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bf28c7796e

[22:26] <synopsebot> M#838 [closed]: https://github.com/MoarVM/MoarVM/issues/838 [⚠ blocker ⚠] SIGILL in MoarVM HEAD, works in 2018.03

[23:13] <travis-ci> Rakudo build failed. Zoffix Znet 'Indent backtraces in THE-END exceptions'

[23:13] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/363872717 https://github.com/rakudo/rakudo/compare/5fee5891c121...91fe6b63d3a5

[23:13] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[23:51] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix crash with unknown column in RAKUDO_REPORT_COLUMNS

[23:51] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/363880298 https://github.com/rakudo/rakudo/compare/40815d16dbd7...c015f08dec6b

[23:59] <Geth> ¦ rakudo: 404f30217b | (Zoffix Znet)++ | t/06-telemetry/01-basic.t

[23:59] <Geth> ¦ rakudo: Fix new test on Windows

[23:59] <Geth> ¦ rakudo:

[23:59] <Geth> ¦ rakudo: We flatten is-run code into a single line to avoid issues with

[23:59] <Geth> ¦ rakudo: windows runner, so we need a colon after the brace.

[23:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/404f30217b
