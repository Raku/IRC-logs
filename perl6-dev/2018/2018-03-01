[00:17] <Geth> ¦ rakudo: ae4204c574 | (Elizabeth Mattijsen)++ | src/core/List.pm

[00:17] <Geth> ¦ rakudo: Make sub rotate a multi

[00:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ae4204c574

[00:17] <Geth> ¦ rakudo: 8cba084690 | (Elizabeth Mattijsen)++ | src/core/List.pm

[00:17] <Geth> ¦ rakudo: Make sub roundrobin a multi

[00:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8cba084690

[00:17] <Geth> ¦ rakudo: 1b94ff6f9e | (Elizabeth Mattijsen)++ | src/core/List.pm

[00:17] <Geth> ¦ rakudo: Make sub prefix:<|> a multi

[00:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1b94ff6f9e

[00:28] <Geth> ¦ rakudo: 254f477ea5 | (Elizabeth Mattijsen)++ | src/core/Numeric.pm

[00:28] <Geth> ¦ rakudo: Make subs infix:<×>|<÷> aliases of subs infix:<*>|</>

[00:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/254f477ea5

[02:20] <MasterDuke> huh. anyone have an idea why i can't profile the build anymore?

[02:20] <MasterDuke> it just does nothing

[02:54] <MasterDuke> whoops, it's --profile-compile for doing that

[05:05] <MasterDuke> ugh, i think even this 26gb vm doesn't have enough ram to profile the compile anymore

[08:02] <AlexDaniel> squashable6: next

[08:02] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 1 day and ≈1 hour (2018-03-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[08:49] <lizmat> Files=1236, Tests=76231, 317 wallclock secs (14.86 usr  5.17 sys + 2176.41 cusr 213.09 csys = 2409.53 CPU)

[08:50] <lizmat> AlexDaniel: alas, again I won't be able to do any squashing this Saturday, will be offline the whole day

[08:50] <AlexDaniel> I think it's going to be very busy around here anyway because JJ will be participating :)

[08:59] <Geth> ¦ rakudo: 5490bacd02 | (Elizabeth Mattijsen)++ | src/core/Numeric.pm

[08:59] <Geth> ¦ rakudo: Make sub infix:<=~=> a multi

[08:59] <Geth> ¦ rakudo:

[08:59] <Geth> ¦ rakudo: - and make infix:<≅> an alias

[08:59] <Geth> ¦ rakudo: - put actual logic on the ascii operator version, just like other operators

[08:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5490bacd02

[09:25] <Geth> ¦ rakudo: 1be26afb78 | (Elizabeth Mattijsen)++ | src/core/operators.pm

[09:25] <Geth> ¦ rakudo: Mark sub infix:<=> as an "only" sub

[09:25] <Geth> ¦ rakudo:

[09:25] <Geth> ¦ rakudo: Assignment is handled directly in the compiler.  Add some comments to this

[09:25] <Geth> ¦ rakudo: effect and make it an only to mark its "specialness" in that respect.

[09:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1be26afb78

[09:35] <Geth> ¦ rakudo: 25bedf8811 | (Elizabeth Mattijsen)++ | src/core/operators.pm

[09:35] <Geth> ¦ rakudo: Mark subs WHAT/HOW/VAR as only subs

[09:35] <Geth> ¦ rakudo:

[09:35] <Geth> ¦ rakudo: They should really be macro's, so don't make them multi's.

[09:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/25bedf8811

[09:51] <Geth> ¦ rakudo: e1b711ae6a | (Elizabeth Mattijsen)++ | src/core/operators.pm

[09:51] <Geth> ¦ rakudo: Make subs infix:<andthen>/<notandthen>/<orelse> multi's

[09:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e1b711ae6a

[09:51] <Geth> ¦ rakudo: a23684f328 | (Elizabeth Mattijsen)++ | src/core/operators.pm

[09:51] <Geth> ¦ rakudo: Make sub infix:<o> a multi

[09:51] <Geth> ¦ rakudo:

[09:51] <Geth> ¦ rakudo: - and make infix:<∘> an alias

[09:51] <Geth> ¦ rakudo: - put actual logic on the ascii operator version, just like other operators

[09:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a23684f328

[09:51] <lizmat> afk for a few hours&

[10:48] <|Tux|> Rakudo version 2018.02.1-85-ga23684f32 - MoarVM version 2018.02-22-g9233d85e7

[10:48] <|Tux|> csv-test-xs-20      0.449 -  0.466

[10:48] <|Tux|> csv-ip5xs           0.812 -  0.817

[10:48] <|Tux|> test-t --race       1.068 -  1.074

[10:48] <|Tux|> test-t              2.526 -  2.586

[10:48] <|Tux|> csv-ip5xs-20        7.606 -  7.875

[10:48] <|Tux|> test                9.090 -  9.210

[10:48] <|Tux|> test-t-20 --race   15.945 - 17.309

[10:48] <|Tux|> csv-parser         37.937 - 38.294

[10:48] <|Tux|> test-t-20          46.727 - 46.795

[12:15] <Geth> ¦ rakudo: 804c009a87 | (Elizabeth Mattijsen)++ | src/core/Pair.pm

[12:15] <Geth> ¦ rakudo: Make sub infix:«=>» a multi

[12:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/804c009a87

[12:47] <Geth> ¦ rakudo: f5b23a5566 | (Elizabeth Mattijsen)++ | src/core/Range.pm

[12:47] <Geth> ¦ rakudo: Make subs infix:<..>/<^..>/<..^>/<^..^> and prefix:<^> multi's

[12:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f5b23a5566

[12:50] <lizmat> I think this covers what could reasonably be made multi's in the settings

[12:50] <AlexDaniel> that was quick. lizmat++

[12:51] <lizmat> putting them in separate commits and running spectests on them, was really most of the work

[12:52] <lizmat> separate commits, so that any breakage should be easier to bisect

[12:54] <AlexDaniel> lizmat+=2

[12:56] <lizmat> hmmm... there should be no difference between infix:«<=» and infix:«≤», right ?

[13:00] <AlexDaniel> yes

[13:00] <lizmat> that's what I thought  :-)

[13:00] <AlexDaniel> well except that <= is ambiguous in some cases

[13:00] <AlexDaniel> m: say 5<=2

[13:00] <camelia> rakudo-moar f5b23a556: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Whitespace required before <= operator␤at <tmp>:1␤------> 3say 5<=27⏏5<EOL>␤    expecting any of:␤        postfix␤»

[13:00] <AlexDaniel> m: say 5≤2

[13:00] <camelia> rakudo-moar f5b23a556: OUTPUT: «False␤»

[13:01] <lizmat> ah, but that's a parsing difference, not a runtime differencve

[13:19] <Geth> ¦ roast: d5f2ea6d18 | (Zoffix Znet)++ (committed using GitHub Web editor) | S11-modules/require.t

[13:19] <Geth> ¦ roast: Add comment not add use lib or use modules

[13:19] <Geth> ¦ roast:

[13:19] <Geth> ¦ roast: Per https://github.com/perl6/roast/commit/fb83b01d95a05717eb662ee26f47c6f3014a1399

[13:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d5f2ea6d18

[13:57] <Geth> ¦ rakudo: aadd3c12d1 | (Elizabeth Mattijsen)++ | 9 files

[13:57] <Geth> ¦ rakudo: Make infix:<≤> an alias of infix:«<=»

[13:57] <Geth> ¦ rakudo:

[13:57] <Geth> ¦ rakudo: By making it an alias, we can get rid of all of the duplication for the

[13:57] <Geth> ¦ rakudo: unicode operator.  This reduces memory size (about 10K in the setting.moarvm)

[13:57] <Geth> ¦ rakudo: and maintenance burden (because additional candidates will only need to be

[13:57] <Geth> ¦ rakudo: added for the ascii version of the operator).

[13:57] <Geth> ¦ rakudo:

[13:57] <Geth> ¦ rakudo: Please note that the alias *must* use <> brackets: apparently creating

[13:57] <Geth> ¦ rakudo: constants takes literal names, and 'sub infix:«≤»; normalizes to <> brackets.

[13:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/aadd3c12d1

[13:58] <AlexDaniel> lizmat: …

[13:58] <AlexDaniel> what about performance?

[13:59] <AlexDaniel> it was duplicated like this so that it's as fast as <=

[13:59] <lizmat> there shouldn't be any difference between <= and ≤

[14:00] <lizmat> but lemme doublecheck

[14:00] <AlexDaniel> RT#131626

[14:00] <synopsebot> RT#131626 [open]: https://rt.perl.org/Ticket/Display.html?id=131626 [PERFTEST][PERF] ≥ and ≤  are 36x slower than Texas version; ≠ is 15x slower

[14:01] <lizmat> I don't see a difference in speed

[14:01] <AlexDaniel> https://github.com/rakudo/rakudo/commit/6ad06fad9f

[14:01] <lizmat> perhaps I also fixed that  :-)

[14:01] <lizmat> m: my $a = 42; for ^1000000 { my $b = $a ≤ $a }; say now - INIT now

[14:02] <camelia> rakudo-moar f5b23a556: OUTPUT: «0.1131201␤»

[14:02] <lizmat> m: my $a = 42; for ^1000000 { my $b = $a <= $a }; say now - INIT now

[14:02] <camelia> rakudo-moar f5b23a556: OUTPUT: «0.11257860␤»

[14:02] <lizmat> m: my $a = 42; for ^1000000 { my $b = $a <= $a }; say now - INIT now

[14:02] <camelia> rakudo-moar f5b23a556: OUTPUT: «0.1125891␤»

[14:02] <lizmat> m: my $a = 42; for ^1000000 { my $b = $a ≤ $a }; say now - INIT now

[14:02] <camelia> rakudo-moar f5b23a556: OUTPUT: «0.1130999␤»

[14:04] <lizmat> in the profiler I only infix:«<=» when I use ≤ (which I expected, because we aliased the proto basically)

[14:06] <lizmat> and it is spectest clean

[14:07] <AlexDaniel> hm… indeed

[14:07] <AlexDaniel> ok!

[14:08] <AlexDaniel> lizmat: awesome!

[14:08] <lizmat> rinse and repeating now for != and >=

[14:18] <Geth> ¦ rakudo: bc52fefa93 | (Elizabeth Mattijsen)++ | 6 files

[14:18] <Geth> ¦ rakudo: Make infix:<≠> an alias of infix:«!=»

[14:18] <Geth> ¦ rakudo:

[14:18] <Geth> ¦ rakudo: By making it an alias, we can get rid of all of the duplication for the

[14:18] <Geth> ¦ rakudo: unicode operator.  This reduces memory size (about 3K in the setting.moarvm)

[14:18] <Geth> ¦ rakudo: and maintenance burden (because additional candidates will only need to be

[14:18] <Geth> ¦ rakudo: added for the ascii version of the operator).

[14:18] <Geth> ¦ rakudo:

[14:18] <Geth> ¦ rakudo: Please note that the alias *must* use <> brackets: apparently creating

[14:18] <Geth> ¦ rakudo: constants takes literal names, and 'sub infix:«≠»; normalizes to <> brackets.

[14:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bc52fefa93

[14:37] <Geth> ¦ rakudo: a2100ec7d3 | (Elizabeth Mattijsen)++ | 9 files

[14:37] <Geth> ¦ rakudo: Make infix:<≥> an alias of infix:«>=»

[14:37] <Geth> ¦ rakudo:

[14:37] <Geth> ¦ rakudo: By making it an alias, we can get rid of all of the duplication for the

[14:37] <Geth> ¦ rakudo: unicode operator.  This reduces memory size (about 10K in the setting.moarvm)

[14:37] <Geth> ¦ rakudo: and maintenance burden (because additional candidates will only need to be

[14:37] <Geth> ¦ rakudo: added for the ascii version of the operator).

[14:37] <Geth> ¦ rakudo:

[14:37] <Geth> ¦ rakudo: Please note that the alias *must* use <> brackets: apparently creating

[14:37] <Geth> ¦ rakudo: constants takes literal names, and 'sub infix:«≥»; normalizes to <> brackets.

[14:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a2100ec7d3

[14:37] * lizmat loves making code faster by removing stuff

[14:50] <AlexDaniel> yes

[14:53] <Geth> ¦ rakudo: 2e7a0e59ec | (Elizabeth Mattijsen)++ | 2 files

[14:53] <Geth> ¦ rakudo: Make infix/prefix:<−> an alias of infix/prefix:<->

[14:53] <Geth> ¦ rakudo:

[14:53] <Geth> ¦ rakudo: This saves about 3K in setting.moarvm size and should remove any performance

[14:53] <Geth> ¦ rakudo: difference between using − or -.

[14:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2e7a0e59ec

[14:54] <lizmat> I think this concludes this round of optimizations

[14:55] <|Tux|> should that be noticable in CSV?

[14:57] <lizmat> are you using unicode operators in there?

[14:57] <lizmat> think not, no?

[14:57] <|Tux|> nope

[14:58] <lizmat> so, don't think it will make a difference then

[14:59] <lizmat> not seeing any difference outside of noise

[14:59] <lizmat> afk&

[15:57] <AlexDaniel> dogbert21: are you on 64-bit linux?

[15:58] <AlexDaniel> dogbert17: ↑ :)

[16:05] <dogbert17> AlexDaniel: I'm on both

[16:06] <dogbert17> i.e. 32 and 64 bit depending on what I'm doing

[16:07] <AlexDaniel> k

[16:52] <AlexDaniel> dogbert17: I wonder if you can help me by trying to reproduce the segfault

[16:52] <AlexDaniel> dogbert17: follow the instructions here: https://github.com/perl6/whateverable/wiki/Installation

[16:52] <AlexDaniel> dogbert17: then run: t/evalable.t

[16:52] <AlexDaniel> the bot will segfault

[16:53] <AlexDaniel> or… well… it should

[16:53] <AlexDaniel> if it doesn't, try running again, I think the fresh run is slightly different

[17:02] <AlexDaniel> well I'm just interested if someone else can go through the process :)

[17:50] <Kaiepi> PufferBot, help

[17:50] <PufferBot> Say "PufferBot, test" to test Rakudo builds on openbsd

[17:50] <Kaiepi> PufferBot, test

[17:50] <PufferBot> [openbsd] Building Rakudo...

[17:50] <PufferBot> [openbsd] Compiling successful! Testing...

[17:51] <Kaiepi> shit forgot to uncomment out make clean

[17:51] <Kaiepi> PufferBot, test

[17:51] <PufferBot> [openbsd] Building Rakudo...

[17:54] <PufferBot> [openbsd] Compiling successful! Testing...

[17:54] <PufferBot> [openbsd] | t/01-sanity/02-op-math.t ........................................ ok

[17:54] <PufferBot> [openbsd] | t/01-sanity/01-literals.t ....................................... ok

[17:54] <PufferBot> [openbsd] | t/01-sanity/04-op-cmp.t ......................................... ok

[17:54] <PufferBot> [openbsd] | t/01-sanity/05-var.t ............................................ ok

[17:54] <PufferBot> [openbsd] | t/01-sanity/03-op-logic.t ....................................... ok

[17:54] <PufferBot> [openbsd] | t/01-sanity/06-op-inplace.t ..................................... ok

[17:54] <PufferBot> [openbsd] | t/01-sanity/09-end-blocks.t ..................................... ok

[17:54] <PufferBot> [openbsd] | t/01-sanity/08-var-array.t ...................................... ok

[17:54] <PufferBot> [openbsd] | t/01-sanity/07-op-string.t ...................................... ok

[17:54] <Kaiepi> ...and the regex

[17:54] <Kaiepi> lol

[18:01] <Kaiepi> there we go

[18:17] <AlexDaniel> Kaiepi: cool! please edit this comment and link to appropriate documentation for the bot: https://github.com/perl6/doc/issues/711#issuecomment-235414744

[18:34] <Kaiepi> i'll get that done once i make a git for it as a proper module

[18:45] <Kaiepi> wait i could just do it now and update it with the link later

[18:58] <AlexDaniel> sure

[19:29] <dogbert17> AlexDaniel: I have unicodable6test running, what now?

[19:40] <AlexDaniel> dogbert17: turn it off, and run evalable tests

[19:40] <AlexDaniel> dogbert17: perl6 t/evalable.t

[19:41] <AlexDaniel> squashable6: next

[19:41] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in ≈14 hours (2018-03-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[19:52] <dogbert17> AlexDaniel: it fails test 32

[19:52] <dogbert17> not ok 32 - basic “nick:” query

[19:53] <dogbert17> got: ["testable535548, No build for 2e7a0e59e. Not sure how this happened!"]

[20:00] <AlexDaniel> dogbert17: is that on 64-bit?

[20:04] <dogbert17> no :-)

[20:04] <dogbert17> does it have to be?

[20:04] <dogbert17> I can switch

[20:04] <AlexDaniel> yea, has to be right now

[20:05] <dogbert17> ok, gimme a few minutes

[20:05] <dogbert17> at least the bot seems to work in 32bit

[20:05] <AlexDaniel> basically it attempted to cheat by pulling 2e7a0e59e from the server, but there's no 32-bit build so :P

[20:06] <AlexDaniel> in theory you could build it yourself but there's no easy way *yet*

[20:07] <dogbert17> I see

[20:19] <dogbert17> the same test #32 failed again, now under 64 bit

[20:19] <dogbert17> # expected: [/^ <me($t)>‘, rakudo-moar ’<sha>‘: OUTPUT: «hello␤»’ $/]

[20:19] <dogbert17> #  matcher: 'infix:<~~>'

[20:19] <dogbert17> #      got: []

[20:19] <AlexDaniel> buuut anything interesting a few lines before that?

[20:20] <AlexDaniel> should be: # Bot process finished (exit code=0, signal=11)

[20:20] <dogbert17> Attempting to fetch 2e7a0e59ec55b2bb4ef8cb6dd935e3ff77e91eb7…

[20:20] <AlexDaniel> oh… wait that's the first test

[20:20] <AlexDaniel> hmhmhm…

[20:20] <dogbert17> # Failed to get expected result in 11.0954629 seconds (11 nominal)

[20:21] <AlexDaniel> ok, try again?

[20:21] <dogbert17> ok

[20:21] <AlexDaniel> my guess is that your internet connection is slow?

[20:21] <dogbert17> /tmp/whateverable/rakudo-moar/2e7a0e59ec55b2bb4ef8cb6dd935e3ff77e91eb7 is locked. Waiting…

[20:21] <AlexDaniel> rm -rf /tmp/whateverable/rakudo-moar/2e7a0e59ec55b2bb4ef8cb6dd935e3ff77e91eb7

[20:22] <AlexDaniel> ooooooooooooooooooooooooooohhhhhhhhhhh…

[20:22] <AlexDaniel> apt install zstd lrzip

[20:23] <dogbert17> aha

[20:25] <dogbert17> still no dice, same error

[20:26] <dogbert17> test #32

[20:26] <AlexDaniel> dogbert17: “got: []” you mean?

[20:26] <AlexDaniel> dogbert17: ok let's move to #whateverable…

[21:35] <[Coke]> need to come up with a talk for tpc-us

[21:44] <AlexDaniel> “How I spent 2 hours jumping through hoops just to run Evalable”

[21:44] <AlexDaniel> dogbert17: :)

[21:44] <timotimo> just make it dockerable %)

[21:44] <timotimo> for dockbert17

[21:45] <AlexDaniel> yes that's a wonderful idea

[21:46] <dogbert17> has worked 5 times now

[21:47] <AlexDaniel> (↑ evalable.t with SPESH_DISABLE=1, otherwise SEGV)

[21:47] <dogbert17> did you try it as well?

[21:51] <AlexDaniel> dogbert17: yea, same result

[21:51] <AlexDaniel> didn't run it 5 times but I believe it will be consistent :)

[21:52] <AlexDaniel> dogbert17: I don't know, maybe there's a way to golf it… but last time I failed at that

[21:52] <AlexDaniel> because the issue just disappears randomly when you change something a little bit

[21:52] <AlexDaniel> anyway, I need to get some sleep o/

[21:53] <timotimo> good luck!

[21:56] <dogbert17> good night

[21:57] <dogbert17> timotimo: if you're interested, see https://gist.github.com/dogbert17/0169440865ea7b1dcef2bcd457c847f1

[21:58] <timotimo> dogbert17: maybe compile with gc debug? or is that already active?

[21:58] <timotimo> the stack looks a bit screwed; does it still segv without the jit?

[21:59] <dogbert17> let me make some changes :-)

[22:04] <dogbert17> does it look better now?

[22:09] <dogbert17> timotimo: if does indeed fail with MVM_JIT_DISABLE=1

[22:28] <timotimo> i wonder what exactly breaks there; is it the sc_idx being out of bounds for the all_scs array?

[22:28] <timotimo> the all_scs array is usually smaller than a hundred entries

[22:30] <timotimo> i still want that browser extension or user script that lets me go from filename/line-number in gists directly to the file in question, on github or otherwise

[22:30] <timotimo> maybe clicking on it would add a little expandable section with the surrounding code or whatever

[22:30] <MasterDuke> linkable?

[22:31] <timotimo> sure, though probably without irc in the middle

[22:31] <timotimo> that's one step too many for me, see? :)

[22:32] <MasterDuke> ah. wonder if an FF or chrome plugin exists already

[22:32] <timotimo> this is a bizzarely specific use case for someone to have made that, tbh

[22:34] <MasterDuke> is greasemonkey still a thing?

[22:34] <timotimo> well, chrome has "userscript" support built-in nowadays

[22:35] <timotimo> oh, maybe not actually?

[22:39] <MasterDuke> 800+ seconds so far to profile the build, hopefully 52gb is enough...

[22:39] <timotimo> the build of what exactly? o_O

[22:40] <MasterDuke> rakudo

[22:40] <dogbert17> (gdb) p sc_idx

[22:40] <dogbert17> $2 = 101090888

[22:41] <dogbert17> that's a bit high isn't it?

[22:41] <timotimo> m: say 101090888 / 420

[22:41] <camelia> rakudo-moar 2e7a0e59e: OUTPUT: «240692.590476␤»

[22:41] <timotimo> it's about yea high

[22:43] <MasterDuke> well, it didn't say it died, but it didn't create any profile and /usr/bin/time said 50gb was used...

[22:44] <dogbert17> I guess something went south with this call then: https://github.com/MoarVM/MoarVM/blob/master/src/gc/collect.c#L365

[23:03] <Geth> ¦ rakudo: 1da0753035 | (Elizabeth Mattijsen)++ | src/core/Str.pm

[23:03] <Geth> ¦ rakudo: Make Str.comb(Regex) return a Seq, fixes GH #1564

[23:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1da0753035

[23:03] <synopsebot> RAKUDO#1564 [open]: https://github.com/rakudo/rakudo/issues/1564 The Str "comb" method (Regex candidate) returns List instead of Seq

[23:33] <lizmat> sleep&
