[00:07] <MasterDuke> timotimo: would the spesh log have anything useful? 

[00:11] <timotimo> not entirely sure

[00:12] <MasterDuke> it changes if i do `<...> for ^N` vs `for ^N { <...> }`

[00:12] <timotimo> the spesh log or the behaviour?

[00:12] <MasterDuke> behavior

[00:12] <MasterDuke> the infini-looping happens around 2k instead of 6k

[00:13] <MasterDuke> but lower counts still give `Too few positionals passed; expected 3 arguments but got 2 at SETTING::src/core/Mu.pm6:582  (/home/dan/Source/perl6/install/share/perl6/runtime/CORE.setting.moarvm:gistseen)`

[00:17] *** shareable6 left
[00:18] <MasterDuke> oh, that's cause i added self.gistseen to Map.gist, but i did give the wrong number of arguments. odd that it only dies on low iterations...

[00:23] *** pmurias left
[00:31] *** lucasb left
[00:44] <MasterDuke> m: my @a; for ^5_000 { @a.push(PseudoStash.new) }; say @a.tail

[00:44] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´PseudoStash.new((!UNIT_MARKER => (!UNIT_MARKER), $! => Nil, $/ => Nil, $=finish => (Mu), $=pod => [], $?PACKAGE => (GLOBAL), $_ => (Any), $¬¢ => Nil, ::?PACKAGE => (GLOBAL), @a => [PseudoStash.new(($_ => 0)) PseudoStash.new(($_ => 1)) PseudoStash.new(‚Ä¶¬ª

[00:46] <MasterDuke> c: MVM_SPESH_INLINE_DISABLE=1 HEAD my @a; for ^5_000 { @a.push(PseudoStash.new) }; say @a.tail

[00:46] <committable6> MasterDuke, ¬¶HEAD(01a3736): ¬´PseudoStash.new(($_ => 4999))‚ê§¬ª

[00:46] <MasterDuke> c: HEAD my @a; for ^5_000 { @a.push(PseudoStash.new) }; say @a.tail

[00:46] <committable6> MasterDuke, https://gist.github.com/d21714e5a39ad1d6ac4c3375d95c9f1d

[00:46] <MasterDuke> c: HEAD my @a; for ^1_000 { @a.push(PseudoStash.new) }; say @a.tail

[00:46] <committable6> MasterDuke, ¬¶HEAD(01a3736): ¬´PseudoStash.new(($_ => 999))‚ê§¬ª

[00:50] <MasterDuke> nqp::ctx, nqp::ctxouterskipthunks, and nqp::ctxcallerskipthunks are all marked :noinline, but not ctxouter, ctxcaller, ctxlexpad, or ctxcode

[00:51] <MasterDuke> is that correct?

[00:52] <MasterDuke> jnthn, timotimo: ^^^

[01:29] <timotimo> MasterDuke: i'ven't got an intuition about that and my brain's kinda running on low capacity

[01:31] <MasterDuke> timotimo: no worries

[01:31] <MasterDuke> fwiw, i tried adding :noinline to all the ones without, but everything still seems the same

[01:33] *** Kaiepi left
[01:37] <timotimo> hm, it might be that the way PseudoStash gets the frames in question is sensitive to inlining of the frame that calls it

[01:38] <timotimo> so the instructions for PseudoStash, like ctx* instructions, wouldn't matter as much with regards to their inlining behaviour

[01:40] <timotimo> bedtime for me, seeya!

[01:43] *** Kaiepi joined
[01:47] *** ilbot3 left
[01:57] *** ilbot3 joined
[01:57] *** ChanServ sets mode: +v ilbot3

[02:03] <samcv> i just found a pretty big bug in an op probably 0 people use

[02:03] <samcv> m: "\c[canada]" ~& "\c[brazil]"

[02:03] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "~&" in expression "\"\\c[canada]\" ~& \"\\c[brazil]\"" in sink context (line 1)‚ê§¬ª

[02:03] <samcv> m: say "\c[canada]" ~& "\c[brazil]"

[02:03] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´üáßüá∑‚ê§¬ª

[02:04] <samcv> m: "\c[canada]" ~& "\c[brazil]"; "\c[canada]" ~& "\c[united states]"

[02:04] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "~&" in expression "\"\\c[canada]\" ~& \"\\c[united states]\"" in sink context (line 1)‚ê§Useless use of "~&" in expression "\"\\c[canada]\" ~& \"\\c[brazil]\"" in sink context (line 1)‚ê§¬ª

[02:04] <samcv> m: say "\c[canada]" ~& "\c[brazil]"; say "\c[canada]" ~& "\c[united states]"

[02:04] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´üáßüá∑‚ê§MoarVM oops: MVM_nfg_get_synthetic_info call requested a synthetic codepoint that does not exist.‚ê§Requested synthetic 15 when only 9 have been created.‚ê§   at SETTING::src/core/Encoding/Encoder/Builtin.pm6:24  (/home/camelia/rakudo-m-ins‚Ä¶¬ª

[02:07] <samcv> it doesn't work on a codepoint bases but works on a grapheme basis. so for synthetics it just &'s the two synthetics together

[02:09] <samcv> (if anybody actually uses this op someone please inform me)

[02:10] <MasterDuke> greppable6: \~\&

[02:10] <greppable6> MasterDuke, 29 lines, 6 modules: https://gist.github.com/5b9f5ec5bedb2ba3995d8bb916d37981

[02:11] <samcv> also issue 2 is that it doesn't retain normalization after the op

[02:11] <samcv> but these caveats also make me realize why nobody uses it as it is pretty silly

[02:12] <samcv> i'm still going to fix it though :P

[02:14] <samcv> i'm suprised that +& op doesn't work on Buf's though

[02:43] <samcv> greppable6: \~\|

[02:43] <greppable6> samcv, 38 lines, 9 modules: https://gist.github.com/2a14e30ac2bba314e3c1bd9041682050

[02:44] <samcv> greppable6: \~\^

[02:44] <greppable6> samcv, 173 lines, 8 modules: https://gist.github.com/c14af5464f875d680ab0abee508306a6

[02:45] <samcv> omg i found someone that uses

[02:45] <samcv> just the ~^ op

[02:49] <samcv> maybe i'll add a condition to only renormalize after processing if codepoints are above the first significant NFC character

[03:05] *** Kaiepi left
[03:49] *** BenGoldberg left
[04:03] *** PufferBot joined
[04:07] *** Kaiepi joined
[04:44] <samcv> ok question for people. currently the ~& (string AND op) performs differently than the ~^ or ~| op in that the ~& op's result is the length of the shortest string

[04:45] <samcv> while the other two ops, the result is the length of the longest string

[04:47] <samcv> because ~& op, i'd just end up being null's, so i guess it just shortens it. but does this make sense to have them act differently

[04:47] <samcv> though i guess it's specced so. i have to leave it as is

[05:32] *** robertle left
[06:00] *** robertle joined
[06:07] <samcv> night o/

[07:39] <AlexDaniel> m: say ‚Äòfoo‚Äô ~| ‚Äòbar‚Äô

[07:39] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´fo^H‚ê§¬ª

[09:02] <[Tux]> Rakudo version 2018.05-25-g01a373649 - MoarVM version 2018.05-27-gaed4e3886

[09:02] <[Tux]> csv-test-xs-20      0.429 -  0.472

[09:02] <[Tux]> csv-ip5xs           0.881 -  0.882

[09:02] <[Tux]> test-t --race       0.983 -  1.013

[09:02] <[Tux]> test-t              2.325 -  2.355

[09:02] <[Tux]> csv-ip5xs-20        8.474 -  9.355

[09:02] <[Tux]> test                8.670 -  9.104

[09:02] <[Tux]> test-t-20 --race   14.550 - 14.996

[09:02] <[Tux]> csv-parser         24.434 - 25.035

[09:02] <[Tux]> test-t-20          42.118 - 43.012

[09:25] <lizmat> Files=1239, Tests=76363, 320 wallclock secs (15.49 usr  5.28 sys + 2209.15 cusr 223.06 csys = 2452.98 CPU)

[11:31] <lizmat> so, do we have a way to find to what PseudoStash we're exporting to when we'er inside an EXPORT sub ?

[11:32] <lizmat> jnthn moritz timotimo Zoffix ^^^

[11:33] <moritz> I'm not aware of one, but that doesn't mean much

[12:01] <jnthn> lizmat: Pretty sure there's no way to do that.

[12:02] <lizmat> jnthn: yeah, slowly coming to that conclusion

[12:02] <lizmat> what I want to do is to bind to $_ of the scope we're exporting to

[12:04] <jnthn> o.O

[12:04] <jnthn> Can't you just stick a `$_` into the Map returned by EXPORT?

[12:04] <jnthn> Maybe that's a redecl error though

[12:05] <lizmat> yup

[12:05] <lizmat> that's what I'm trying to prevent

[12:05] <lizmat> and I can't CATCH the error either  :-(

[12:05] <jnthn> Well no, because you've already returned the Map by that point :)

[12:06] <lizmat> FWIW, I'm trying to port https://metacpan.org/pod/Env to Perl 6 and handling the case of %*ENV<_>

[12:08] <jnthn> That'd be an...interesting...choice of env var name :P

[12:08] <lizmat> it's pretty common in shells 

[12:09] <lizmat> it's usually the last command you've executed in the shell ?

[12:09] <lizmat> m: dd %*ENV<_>

[12:09] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´Str <element> = "/home/camelia/perl5/perlbrew/perls/perl-5.20.1/bin/perl"‚ê§¬ª

[12:09] <jnthn> heh, wow :)

[12:10] <jnthn> TIL

[12:10] <jnthn> I'm doubtful that getting hold of the pseudostash would actually be a solution here though

[12:10] <jnthn> Compile-time bindings don't actually quite work that way

[12:13] <lizmat> so I wouldn't have been able to bind to the <$_> anyway, is what you're saying?

[12:14] <lizmat> m: $_ = 42; sub a() { CALLERS::<$_> := 666 }; a; dd $_  # guess not

[12:14] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´This case of binding is not yet implemented‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:15] <lizmat> ok, thanks for thinking about it...  will circumvent by prefixing names with "env_"

[12:15] <lizmat> which would be read better anyway

[12:16] <jnthn> Honestly, it's one of those places where I'd just say "if you want 'use Env qw($FOO $BAR)', just write 'my (:$FOO, :$BAR, *%) := %*ENV;'" :P

[12:17] <lizmat> I will put that in the pod  :-)

[12:20] <lizmat> m: my (:$_, :$PATH, *%) := %*ENV; dd $_, $PATH

[12:20] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Redeclaration of symbol '$_'‚ê§at <tmp>:1‚ê§------> 3my (:$_7‚èè5, :$PATH, *%) := %*ENV; dd $_, $PATH‚ê§    expecting any of:‚ê§        shape declaration‚ê§¬ª

[12:20] <lizmat> :-(

[12:20] <lizmat> :-)

[12:21] <lizmat> m: no worries; my (:$_, :$PATH, *%) := %*ENV; dd $_, $PATH

[12:21] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Redeclaration of symbol '$_'‚ê§at <tmp>:1‚ê§------> 3no worries; my (:$_7‚èè5, :$PATH, *%) := %*ENV; dd $_, $PATH‚ê§    expecting any of:‚ê§        shape declaration‚ê§¬ª

[12:21] <lizmat> hmmm

[12:21] <jnthn> m: given %*ENV -> (:$_, :$PATH, *%) { dd $_, $PATH }

[12:21] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´Str $_ = "/home/camelia/perl5/perlbrew/perls/perl-5.20.1/bin/perl"‚ê§Str $PATH = "/home/camelia/perl5/perlbrew/bin:/home/camelia/perl5/perlbrew/perls/perl-5.20.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"‚ê§¬ª

[12:40] *** Zoffix joined
[12:40] <Zoffix> m: no strict; :(:$_, :$PATH, |) := %*ENV; dd $_, $PATH

[12:40] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´Str $_ = "/home/camelia/perl5/perlbrew/perls/perl-5.20.1/bin/perl"‚ê§Str $PATH = "/home/camelia/perl5/perlbrew/bin:/home/camelia/perl5/perlbrew/perls/perl-5.20.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"‚ê§¬ª

[12:43] <MasterDuke> jnthn: did you see any of my PseudoStash-related ramblings last night?

[12:56] <Zoffix> m: BEGIN '/tmp/20180527'.IO.mkdir.add('Foo.pm6').spurt: ÔΩ¢sub EXPORT { $*W.install_lexical_symbol: $*W.cur_lexpad, '$_', 42; {} }ÔΩ£;  use lib </tmp/20180527>; use Foo; say $_

[12:56] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´42‚ê§¬ª

[12:56] <Zoffix> lizmat: ^

[12:57] <lizmat> Zoffix: wow

[13:14] <samcv> good *

[13:28] <AlexDaniel> o/

[13:28] <Zoffix> \o

[13:28] *** Zoffix left
[13:37] <MasterDuke> might be interesting to see how perl 6 compares. https://github.com/dyu/ffi-overhead

[13:41] <timotimo> tup ... that's a name i haven't heard in a long time

[13:42] <MasterDuke> don't think i've ever heard of it before

[13:42] <timotimo> it's cute

[13:42] <timotimo> i think it's also really really fast

[14:59] *** shareable6 joined
[15:01] <dogbert17> m: my $foo; "abcd" ~~ m/a $foo=(..) d/

[15:01] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´===SORRY!===‚ê§QAST::Block with cuid 1 has not appeared‚ê§¬ª

[15:16] *** robertle left
[15:18] <dogbert17> m: say (1,2,3).map({$^a + $^b}) # should this work ?

[15:18] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´Too few positionals passed; expected 2 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:19] <timotimo> m: say (1,2,3).map(-> $a, $b? {$a + $b})

[15:19] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:19] <timotimo> m: say (1,2,3).map(-> $a, Mu $b? {$a + $b})

[15:19] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:19] <timotimo> weird.

[15:20] <timotimo> where did that "anon" come from?

[15:20] <dogbert17> strange

[15:20] <timotimo> m: say (1,2,3).map(-> $a, Mu $b? {$a + $b with $b})

[15:20] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´(3)‚ê§¬ª

[15:21] <timotimo> it's because + isn't happy when it's passed a Mu

[15:21] <timotimo> bisectable6: say 1 + Mu

[15:21] <bisectable6> timotimo, Bisecting by output (old=2015.12 new=01a3736) because on both starting points the exit code is 1

[15:21] <bisectable6> timotimo, bisect log: https://gist.github.com/4d20b8610188c7209d5ecc0dd54e815f

[15:21] <bisectable6> timotimo, (2016-03-04) https://github.com/rakudo/rakudo/commit/eac1e26d6342d0d65ff39a82d7b204341e986a91

[15:23] <lizmat> weird commit message  :-)

[15:23] <timotimo> but + with a Mu always failed

[15:24] <timotimo> did map always pass Mu for a missing parameter?

[15:25] <dogbert17> there are skipped tests in roast which expect this to work

[15:39] <lizmat> https://stackoverflow.com/questions/50553365/triple-pointer-native-call-on-perl-6  # question about NativeCall I don't know the answer to

[15:39] *** AlexDaniel left
[15:40] *** AlexDaniel joined
[15:53] *** robertle joined
[15:54] *** BenGoldberg joined
[16:16] *** robertle left
[17:31] *** MasterDuke left
[17:41] *** MasterDuke joined
[18:20] <nine> Turns out, our meta model code assumes that meta classes are written in NQP in quite a few places

[18:28] <Geth> ¬¶ nqp: 67c8b96dd1 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[18:28] <Geth> ¬¶ nqp: Bump MoarVM for str bitwise op fixes and .words speed impv.

[18:28] <Geth> ¬¶ nqp: 

[18:28] <Geth> ¬¶ nqp: Changes: 2018.05-13-gec9deabcb..2018.05-28-gfede5cf50

[18:28] <Geth> ¬¶ nqp: fede5cf50 Fix the bitwise ops so STRAND_CHECK is done on result string

[18:28] <Geth> ¬¶ nqp: aed4e3886 Handle synthetics and normalization property in string bitwise ops

[18:28] <Geth> ¬¶ nqp: 7411fb4c9 Remove an unneeded variable from grapheme_is_cclass

[18:29] <Geth> ¬¶ nqp: e7f5f64a7 Use the Unicode db defines instead of querying property codes on init

[18:29] <Geth> ¬¶ nqp: <‚Ä¶commit message has 11 more lines‚Ä¶>

[18:29] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/67c8b96dd1

[18:29] <Geth> ¬¶ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.05-13-gec9deabcb...2018.05-28-gfede5cf50

[18:29] <samcv> i'm headed to a movie. will bump rakudo when i get back, unless someone else wants to bump it

[18:29] <nine> samcv: have fun!

[18:36] *** BenGoldberg left
[18:37] * bartolin hurries to put in some nqp fixes for async stuff on the jvm backend before the bump

[18:44] <nine> Can I derive a class with P6opaque repr from a class with CPointer repr and still access the pointer?

[18:47] <nine> Doesn't look good:

[18:47] <nine> m: use NativeCall; class Foo is Pointer { has $.foo; }; Foo.new(:foo<a>).foo.say; Foo.new.Int.say;

[18:47] <camelia> rakudo-moar 01a373649: OUTPUT: ¬´(Any)‚ê§This type cannot unbox to a native integer: P6opaque, Foo‚ê§  in method Int at /home/camelia/rakudo-m-inst-1/share/perl6/sources/51E302443A2C8FF185ABC10CA1E5520EFEE885A1 (NativeCall::Types) line 33‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:16] <Geth> ¬¶ nqp: 628d70fa51 | usev6++ | 2 files

[19:16] <Geth> ¬¶ nqp: [JVM] Use peer/socket host/port in async sockets

[19:16] <Geth> ¬¶ nqp: 

[19:16] <Geth> ¬¶ nqp: Rakudo expects additional parameters (peer-host, peer-port, socket-host,

[19:16] <Geth> ¬¶ nqp: socket-port) in async sockets since commit 76af17a8b1. This set of changes

[19:16] <Geth> ¬¶ nqp: tries to port https://github.com/MoarVM/MoarVM/commit/5e94da0 to the JVM

[19:16] <Geth> ¬¶ nqp: backend and makes most tests from S32-io/IO-Socket-Async.t pass.

[19:16] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/628d70fa51

[19:20] *** shareable6 left
[19:22] <jnthn> nine: An object has one representation

[19:23] <nine> So I'm gonna have to figure out how to actually get that attribute storage working

[19:23] <jnthn> What're you trying to do? :)

[19:24] * jnthn can't figure it out from the questions

[19:26] <nine> I'm trying to give the wrapper classes Inline::Perl5 creates for Perl 5 classes a new meta class. This should give me more control over e.g. the method cache. With that I can simply add methods to the cache as I discover them through usage at runtime.

[19:30] <jnthn> Following so far. What repr does the wrapper class have today?

[19:32] <jnthn> Hm, and are you wanting an attribute on the object to hang the cache off? I'd maybe expect the method cache to live in the meta class...

[19:32] <nine> As of https://github.com/niner/Inline-Perl5/commit/c513be1f017b4fce2a6d799a3910157b00caf8e2 wrapper classes are plain standard P6opaque classes which do the Inline::Perl5::Package role: https://github.com/niner/Inline-Perl5/blob/master/lib/Inline/Perl5/Package.pm6

[19:33] <jnthn> Ah, OK

[19:33] <nine> The method cache is in an instance of the meta class. The only data those wrapper classes have is the pointer to an underying Perl 5 object. Hence the idea to use a CPointer repr. But then classes inheriting from such a wrapper won't be able to have attributes anymore

[19:34] <jnthn> Ah, I see

[19:35] <jnthn> Yeah, probably they want to have an attribute containing the CPointer instead

[19:35] <nine> On current master, objects passed from Perl 5 to Perl 6 are all wrapped by Inline::Perl5::Object instances. And optimized candidates for discovered methods are added to those objects by mixing in roles: https://github.com/niner/Inline-Perl5/blob/master/lib/Inline/Perl5/Object.pm6#L32

[19:36] <jnthn> I guess all the roles get costly with time :)

[19:36] <nine> Not to mention that it's just a terrible hack :)

[19:37] <jnthn> That too. Are you going to do the method caching by using the built-in method cache mechanism?

[19:37] <jnthn> I think Metamodel::Primitives exposes something to update that

[19:38] <jnthn> Doing that should mean spesh can resolve the method dispatches

[19:38] <nine> Yep, Metamodel::Primitives makes this job a lot easier :) I'm just discovering the missing parts. E.g. the callers of .method_table all expect it to return a VMHash which Perl 6 code has a bit of a hard time doing

[19:38] <jnthn> Ah.

[19:39] <jnthn> Yeah.

[19:39] <nine> And issues like getting a "This representation (Null) does not support associative access (for type VMNull)" in https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/AttributeContainer.nqp#L12

[19:40] <nine> Which I suspect is because %!attribute_lookup is not automatically initialized when a Perl 6 class does the Perl6::Metamodel::AttributeContainer role.

[19:57] <nine> Nope....still P6opaque: no such attribute '$!wrapped-perl5-object' on type Foo in a Foo when trying to bind a value

[19:58] <nine> Despite doing Metamodel::AttributeContainer and self.add_attribute to add that attribute and running self.compose_attributes($type) later on

[20:20] <nine> Oooh...sprinkling some nqp::decont in compose_repr helps

[21:08] *** Kaiepi left
[21:09] *** Kaiepi joined
[21:15] <MasterDuke> both https://github.com/vim/vim/blob/master/runtime/syntax/perl6.vim#L133-L150 and https://github.com/vim-perl/vim-perl6/blob/master/syntax/perl6.vim#L99-L124 have a lot of things that aren't actually types (any more at least)

[21:18] <MasterDuke> am i missing something, or do those need a lot of correcting?

[21:32] *** PufferBot left
[21:38] <AlexDaniel> yea they need to be corrected I think

[21:41] <MasterDuke> it looks like official vim isn't pulling in updates from vim-perl6 anymore also

[22:08] <lizmat> .tell nine perhaps "my class Rakudo::Internals::IterationSet is repr('VMHash') { }" could be of help?

[22:08] <yoleaux> lizmat: I'll pass your message to nine.

[22:09] <lizmat> .tell nine or perhaps we need to generalize this a bit like IterationBuffer

[22:09] <yoleaux> lizmat: I'll pass your message to nine.

[23:56] <samcv> MasterDuke, i think tyil knows the current status on vim-perl6 atm. when he wakes up again he'll probably know

