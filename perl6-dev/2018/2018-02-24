[01:11] <MasterDuke> i don't use twitter, but someone who does might like to reply to https://twitter.com/colomon/status/964127177229918208 saying that just got a bit faster

[01:12] <MasterDuke> and it's really just creating the string representations that's slow, calculating the sequence itself is pretty fast

[01:22] <Zoffix> Done: https://twitter.com/zoffix/status/967207578076934144

[02:34] <AlexDaniel> greppable6: undefine

[02:34] <yoleaux> 23 Feb 2018 22:47Z <tbrowder> AlexDaniel: NQP#424 has an iteresting mod to .travis.yml to help get past stallevjobs

[02:34] <synopsebot> NQP#424 [open]: https://github.com/perl6/nqp/pull/424 add a new built-in sub: run-command

[02:34] <greppable6> AlexDaniel, 1151 lines, 104 modules: https://gist.github.com/19db2bf219677cd70c91ed3fa1663d8a

[02:34] <AlexDaniel> greppable6: undefine\b

[02:34] <greppable6> AlexDaniel, 17 lines, 12 modules: https://gist.github.com/110496947900da1790f7cc3406ea9c10

[02:35] <AlexDaniel> oh wow it's used a few times

[02:35] <AlexDaniel> greppable6: undefine\b[$@%]

[02:35] <greppable6> AlexDaniel, Found nothing!

[02:36] <AlexDaniel> greppable6: undefine \W

[02:36] <greppable6> AlexDaniel, 6 lines, 5 modules: https://gist.github.com/c4c56e292b3a6a0a0de89c6504efbefa

[02:55] <MasterDuke> Zoffix++

[03:11] <Geth> ¦ roast/master: 5 commits pushed by (Nick Logan)++, (Zoffix Znet)++

[03:11] <Geth> ¦ roast/master: dfe7430ded | Allow tests to be run outside of rakudo dir

[03:11] <Geth> ¦ roast/master: fb83b01d95 | Revert "[v6.d REVIEW] Use preciser test routines"

[03:11] <Geth> ¦ roast/master: 9fdbfbec5e | Minor cleanup

[03:11] <Geth> ¦ roast/master: 9c220e367c | Fix space-safety of path usage

[03:11] <Geth> ¦ roast/master: b070ea7f40 | Merge pull request #390 from perl6/absolute-lib-paths-take2

[03:11] <Geth> ¦ roast/master: review: https://github.com/perl6/roast/compare/4fab1d3d7c10...b070ea7f4074

[04:05] <Geth> ¦ rakudo/master: 4 commits pushed by (Zoffix Znet)++, (Aleks-Daniel Jakimenko-Aleksejev)++

[04:05] <Geth> ¦ rakudo/master: fb3dfa5674 | Fix Whatever curry QAST::Block migration in stmt mods

[04:05] <Geth> ¦ rakudo/master: badec48118 | Docs for the point release

[04:05] <Geth> ¦ rakudo/master: b656f6b1b1 | [release] Bump VERSION to 2018.02.1

[04:05] <Geth> ¦ rakudo/master: d3a7d7d2e1 | Merge branch 'release/2018.02.1'

[04:05] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/748d1a57b934...d3a7d7d2e174

[04:07] <AlexDaniel> also I'm pretty sure that release/2018.02.1 branch can be just deleted now

[04:09] * AlexDaniel just did that

[04:12] <AlexDaniel> stmuk: thanks

[05:26] <samcv> what was the release bumped for?

[05:27] <AlexDaniel> samcv: https://github.com/rakudo/rakudo/issues/1550

[05:28] <AlexDaniel> possibly related: https://irclog.perlgeek.de/perl6-dev/2018-02-23#i_15851641 :)

[09:16] <lizmat> Files=1235, Tests=76226, 317 wallclock secs (14.98 usr  5.18 sys + 2177.86 cusr 213.62 csys = 2411.64 CPU)

[10:09] <[Tux]> Rakudo version 2018.02.1-29-gd3a7d7d2e - MoarVM version 2018.02-6-g1849ae6d6

[10:09] <[Tux]> csv-test-xs-20      0.435 -  0.444

[10:09] <[Tux]> csv-ip5xs           0.820 -  0.930

[10:09] <[Tux]> test-t --race       1.130 -  1.155

[10:09] <[Tux]> test-t              2.633 -  2.642

[10:09] <[Tux]> csv-ip5xs-20        7.845 -  7.937

[10:09] <[Tux]> test                9.626 -  9.836

[10:09] <[Tux]> csv-parser         12.505 - 12.845

[10:09] <[Tux]> test-t-20 --race   16.851 - 17.712

[10:09] <[Tux]> test-t-20          47.504 - 47.790

[10:09] <[Tux]> first double run was slower

[10:09] <[Tux]> test-t              2.703 -  2.706

[10:50] <timotimo> Zoffix, regarding the point release, i'd say ... all is for given!

[11:18] <Geth> ¦ rakudo: 4f47386762 | (Elizabeth Mattijsen)++ | src/core/Date.pm

[11:18] <Geth> ¦ rakudo: Make sub sleep/sleep-timer/sleep-until multi's

[11:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4f47386762

[11:51] <Geth> ¦ rakudo: bf5e335730 | (Elizabeth Mattijsen)++ | src/core/Hash.pm

[11:51] <Geth> ¦ rakudo: Make sub hash a multi

[11:51] <Geth> ¦ rakudo:

[11:51] <Geth> ¦ rakudo: - also handle named only's faster

[11:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bf5e335730

[11:59] <Geth> ¦ nqp/master: 10 commits pushed by (Timo Paulssen)++

[11:59] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/b5da01176878...09f77a7edb33

[12:01] <Geth> ¦ nqp: cb3c1a9b00 | (Timo Paulssen)++ | tools/build/MOAR_REVISION

[12:01] <Geth> ¦ nqp: bump moar to get new profiler data formats

[12:01] <Geth> ¦ nqp:

[12:01] <Geth> ¦ nqp: mostly changes for multithreading, also makes the profiler

[12:01] <Geth> ¦ nqp: less crashy when running it with multi-threaded programs.

[12:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cb3c1a9b00

[12:01] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.02-3-gb39fa0e...2018.02-21-gc6543e21f

[12:02] <dogbert11> bisect: say Blob[uint8].new(233).decode("utf8-c8").encode("utf8-c8").perl

[12:02] <bisectable6> dogbert11, Bisecting by output (old=2015.12 new=bf5e335) because on both starting points the exit code is 0

[12:02] <Geth> ¦ rakudo: 26e34cd1f4 | (Elizabeth Mattijsen)++ | src/core/Hash.pm

[12:02] <Geth> ¦ rakudo: Update error description on sub circumfix:<:{ }>()

[12:02] <Geth> ¦ rakudo:

[12:02] <Geth> ¦ rakudo: For some reason it now thinks we're changing the Perl 6 grammar now.

[12:02] <Geth> ¦ rakudo: So either we have a problem in the Perl 6 grammar in the handling of :{ }

[12:02] <Geth> ¦ rakudo: or we have a false positive on the error message.

[12:02] <Geth> ¦ rakudo:

[12:02] <Geth> ¦ rakudo: Not pursuing this further at this point.

[12:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/26e34cd1f4

[12:02] <bisectable6> dogbert11, bisect log: https://gist.github.com/0de4ac173a1cfcfec9a34a36d4af058e

[12:02] <bisectable6> dogbert11, (2016-04-01) https://github.com/rakudo/rakudo/commit/a87fb43b6c85a496ef0358197625b5b417a0d372

[12:18] <travis-ci> NQP build failed. Timo Paulssen 'ensure threads without call graph don't mess up sql syntax'

[12:18] <travis-ci> https://travis-ci.org/perl6/nqp/builds/345623058 https://github.com/perl6/nqp/compare/b5da01176878...09f77a7edb33

[12:19] <timotimo> we can't install the clang we want on travis for some reason

[12:19] <timotimo> Depends: libstdc++-4.9-dev but it is not installable

[12:19] <timotimo> Depends: libgcc-4.9-dev but it is not installable

[12:19] <timotimo> Depends: libobjc-4.9-dev but it is not installable

[12:26] <timotimo> the failure got resolved by trying again ...

[12:26] <timotimo> https://travis-ci.org/perl6/nqp/builds/345623764 - does this show any actual builds for anybody? all i get is "it's been running for 25 minutes" but no logs to be found

[12:29] <lizmat> I see a log for https://travis-ci.org/perl6/nqp/jobs/345623767

[12:29] <timotimo> interesting; i don't get a link to that job

[12:30] <lizmat> perhaps some JS fun ?

[12:30] <timotimo> no clue :<

[12:35] <tbrowder> i note that NQP has six or so PRs passing all tests (one has a conflict).  i say they should either be merged or the author told why not.

[12:36] <lizmat> timotimo: perhaps a reboot of your browser ?

[12:38] <timotimo> it's not that important, i reckon

[12:39] <Geth> ¦ rakudo: 5210d7028d | (Elizabeth Mattijsen)++ | src/core/Int.pm

[12:39] <Geth> ¦ rakudo: Make sub is-prime a multi

[12:39] <Geth> ¦ rakudo:

[12:39] <Geth> ¦ rakudo: I kept the "is pure" on the proto, although I think this is technically

[12:39] <Geth> ¦ rakudo: incorrect as an added candidate could not be guaranteeing a "pure" result

[12:39] <Geth> ¦ rakudo: necessarily (altough in this case that would probably be folly).

[12:39] <Geth> ¦ rakudo:

[12:39] <Geth> ¦ rakudo: Additional notes:

[12:39] <Geth> ¦ rakudo: - is-prime(3) still constant folds (if the "is pure" is on the candidate,

[12:39] <Geth> ¦ rakudo:   it wouldn't).  Not sure what is going on there.

[12:39] <Geth> ¦ rakudo: - 3.is-prime does *not* constant fold, even when annotated with "is pure"

[12:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5210d7028d

[12:40] <tbrowder> timotimo: if you look at my NQP#424 you will see my .travis.yml mod that got my stalled job working again

[12:40] <synopsebot> NQP#424 [open]: https://github.com/perl6/nqp/pull/424 add a new built-in sub: run-command

[12:41] <tbrowder> my money is on it working for your job

[12:45] <travis-ci> NQP build passed. Timo Paulssen 'bump moar to get new profiler data formats

[12:45] <travis-ci> https://travis-ci.org/perl6/nqp/builds/345623764 https://github.com/perl6/nqp/compare/09f77a7edb33...cb3c1a9b00de

[12:46] <tbrowder> well shut my mouth!!

[12:47] <timotimo> tbrowder: i think the problem was only on the display side

[12:48] <timotimo> because liz did see the jobs

[12:50] <tbrowder> it did take a long time, though. the difference between yr job and mine was in mine travis reported a failure due to a process time out. while your’s didn’t.

[12:54] <Geth> ¦ rakudo: b704a17513 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm

[12:54] <Geth> ¦ rakudo: Make sub gist a multi

[12:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b704a17513

[12:57] <tbrowder> timotimo: why haven’t you merged NQP#283

[12:57] <synopsebot> NQP#283 [open]: https://github.com/perl6/nqp/pull/283 expose coerce_in and _ni for direct int <-> num

[12:58] <timotimo> don't knw tbh

[12:59] <tbrowder> there are several open nqp PRs with good tests just waiting to be merged

[13:00] <tbrowder> that is, unless core devs disapprove for some reason..l

[13:04] <lizmat> tbrowder: if someone would disapprove, they would say, I'm sure

[13:05] <lizmat> seems your PR's got warnocked somehow, which isn't too strange with the low bus number on nqp internals  :-(

[13:06] <tbrowder> “warnocked”, as in low priority?

[13:07] <lizmat> https://en.wikipedia.org/wiki/Warnock%27s_dilemma

[13:09] <tbrowder> oh...that sounds familiar, i think AD gets tired...

[13:11] <lizmat> https://www.nntp.perl.org/group/perl.perl6.language/2003/05/msg15407.html   # more specific to Perl 6

[13:13] <Geth> ¦ rakudo: 4c67498f90 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm

[13:13] <Geth> ¦ rakudo: Make subs chdir/chmod/unlink/rmdir/mkdir/rename/copy/move/symlink/link a multi

[13:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4c67498f90

[13:18] <timotimo> wow, i hadn't realized warnock was perl6-related at all

[13:23] <tbrowder> timotimo: any objection to my merging yr old pr?

[13:23] <tbrowder> going onto 2yrs

[13:24] <MasterDuke> timotimo: you said something a couple days ago about getting that prime code someone (rindolf?) had a bunch faster. was that by optimizing his code, or rakudo/moarvm?

[13:33] <Geth> ¦ rakudo: 7d72387bc0 | (Elizabeth Mattijsen)++ | src/core/List.pm

[13:33] <Geth> ¦ rakudo: Make sub combinations/permutations a multi

[13:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7d72387bc0

[13:35] <Geth> ¦ nqp/master: 12 commits pushed by (Tom Browder)++

[13:35] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/cb3c1a9b00de...66acf2c303a9

[13:44] <timotimo> MasterDuke: i split a mathy expression into multiple assignments into native int typed variables

[13:48] <timotimo> i wonder if i can golf it down significantly into a one-liner

[13:51] <timotimo> the expression used to be @d.ASSIGN-POS($m, (@d.AT-POS($m) + @d.AT-POS($m - $p)) % $BASE)

[13:51] <timotimo> now it's that over four lines with three variables

[13:51] <MasterDuke> heh, sounds somewhat less readable

[14:02] <tbrowder> .ask pmurias any debugging ideas about situation where nqp tests on jvm pass on my local host but fail on travis-ci?

[14:02] <yoleaux> tbrowder: I'll pass your message to pmurias.

[14:05] <timotimo> well, i can probably put all the "my"s into one line again

[14:13] <timotimo> i don't remember what i wanted coerce_ni and coerce_in for

[15:41] <dogbert17> my @primes = grep { .is-prime }, 1 .. *; my @p = gather for 4000, 5, 100, 2000 -> $n { take start { @primes[$n] }; }; .say for await @p;

[15:42] <dogbert17> m: my @primes = grep { .is-prime }, 1 .. *; my @p = gather for 4000, 5, 100, 2000 -> $n { take start { @primes[$n] }; }; .say for await @p;

[15:42] <camelia> rakudo-moar 7d72387bc: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    No such method 'is-prime' for invocant of type 'Mu'␤      in block  at <tmp> line 1␤      in block  at <tmp> line 1␤␤»

[15:42] <dogbert17> what's wrong here?

[15:43] <dogbert17> if anything :-) RT #127208

[15:44] <synopsebot> RT#127208 [open]: https://rt.perl.org/Ticket/Display.html?id=127208 [SEGV][CONC] Non-deterministic segfaults in parallel code

[15:44] <MasterDuke> *.is-prime

[15:46] <dogbert17> m: my @primes = grep { *.is-prime }, 1 .. *; my @p = gather for 4000, 5, 100, 2000 -> $n { take start { @primes[$n] }; }; .say for await @p;  # like this ?

[15:46] <camelia> rakudo-moar 7d72387bc: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed double closure; WhateverCode is already a closure without curlies, so either remove the curlies or use valid parameter syntax instead of *␤at <tmp>:1␤------> 3my @primes = grep { *.is-pri…»

[15:46] <MasterDuke> whoops, my bad

[15:48] <dogbert17> it's a bit strange, I'm probably missing something obvious

[15:52] <MasterDuke> m: my @primes = grep { .is-prime }, 1 .. *; my @p = gather for 40, 5, 1, 20 -> $n { take { @primes[$n] }; }; .().say for @p;

[15:52] <camelia> rakudo-moar 7d72387bc: OUTPUT: «179␤13␤3␤73␤»

[15:58] <MasterDuke> m: my @primes = (1 .. *).grep(*.is-prime); my @p = gather for 4000, 5, 100, 2000 -> $n { take start { @primes[$n] }; }; .say for await @p;

[15:58] <camelia> rakudo-moar 7d72387bc: OUTPUT: «37649␤13␤547␤17333␤»

[15:59] <MasterDuke> m: my @primes = (1 .. *).grep({ .is-prime }); my @p = gather for 4000, 5, 100, 2000 -> $n { take start { @primes[$n] }; }; .say for await @p;

[15:59] <camelia> rakudo-moar 7d72387bc: OUTPUT: «37699␤13␤547␤17359␤»

[15:59] <MasterDuke> dogbert17: ^^^, works with the method form of grep

[16:03] <mst> how come the block form and the whatever star form return different results? did I miss something?

[16:06] <MasterDuke> i had different indices in the block form

[16:06] <mst> both seem to be 4000, 5, 100, 2000 ?

[16:07] <mst> I mean .grep(*.is-prime) versus grep({ .is-prime })

[16:07] <MasterDuke> oh, the block form of the method call, yeah, that's weird

[16:07] <mst> the 5 and 100 results are the same, the 2000 and 4000 results are different

[16:07] <mst> that ... doesn't strike me as something that should happen

[16:08] <MasterDuke> i get a bunch of different values if i run it a bunch more times

[16:09] <MasterDuke> i'm guessing some sort of race condition with the iterator for @primes?

[16:10] <MasterDuke> m: my @primes = (1 .. *).grep({.is-prime}); my @p = gather for 4000, 5, 100, 2000 -> $n { take { @primes[$n] }; }; .().say for @p;

[16:10] <camelia> rakudo-moar 7d72387bc: OUTPUT: «37831␤13␤547␤17393␤»

[16:10] <MasterDuke> because this always returns the same values

[16:12] <MasterDuke> mst: btw, don't know if you saw it, but Zoffix was asking about a Perl 6 dev cloak

[16:12] <mst> I say alexdaniel ask

[16:12] <mst> *saw

[16:12] <mst> that one's done

[16:13] <AlexDaniel> oh

[16:13] <AlexDaniel> yes :)

[16:13] <mst> of course you'll have to log in :P

[16:13] <MasterDuke> whoops, you're right, my bad

[16:14] <dogbert17> MasterDuke: thx

[16:14] <AlexDaniel> mst: thanks!

[16:16] <MasterDuke> mst: does one have to have signed the CLA to get one?

[16:16] <mst> I can give out @perl6/name to anybody who wants one

[16:17] <mst> @perl6/developer/name I was *guessing* should be people with commit bits

[16:17] <mst> but

[16:17] <mst> I'm mostly "the dude doing the paperwork" here, so if people with commit bits tell me to give 'em to other people, I'm not going to argue

[16:18] <mst> like, the perl community in general has never exactly been fussy about formal status, so I'm not going to go all bureaucratic about it ;)

[16:18] <AlexDaniel> MasterDuke: sooo… with 178 commits to rakudo, isn't it time to submit a CLA? ;)

[16:20] <pmurias> what are the Perl 6 dev cloaks useful for?

[16:20] <mst> beiny shiny?

[16:21] <timotimo> hides your ip from evil haxors!

[16:21] <mst> cloaks don't hide your ip particularly reliably

[16:21] <MasterDuke> i'll get around to it eventually

[16:22] <mst> basically, cloaks are just there to show project affiliation

[16:22] <AlexDaniel> pmurias: I was thinking this: https://irclog.perlgeek.de/perl6-dev/2018-02-23#i_15850058

[16:23] <mst> oh, yeah, they do make hostmask-based matching easier

[16:24] <AlexDaniel> .tell Zoffix now that I have a dev cloak, can you add me to the list for p6lert?

[16:24] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[16:25] <pmurias> tbrowder: haven't dealt with travis jvm behaving differently, so I don't have any good hints

[16:29] <Zoffix> AlexDaniel: done. Docs for interface are: https://github.com/perl6/alerts#posting-alerts

[16:29] <yoleaux> 16:24Z <AlexDaniel> Zoffix: now that I have a dev cloak, can you add me to the list for p6lert?

[16:30] <Zoffix> FWIW, anyone with sudo access to hack can add users. You'd edit /home/p6lert/alerts/secret.json config file.

[16:30] <mst> Zoffix: tempted to suggest that your cloak should be @perl6/botguru/zoffix :)

[16:31] <Zoffix> heh

[16:34] <MasterDuke> AlexDaniel could be botherder, or maybe botfather, botdad

[16:34] <timotimo> botherer?

[16:34] <AlexDaniel> … botherable

[16:43] <AlexDaniel> MasterDuke: btw there are two dads :P https://github.com/perl6/whateverable/blob/177b77cb2ebc045736b8e7a1cf6eb8e25fdce7b6/lib/Whateverable.pm6#L47

[16:44] <MasterDuke> heh

[16:58] <mst> # TODO roles should not have TWEAK method

[16:58] <mst> why not?

[16:58] <mst> having to do 'sub BUILD {} after BUILD => sub { ... };' in Moo(se) roles has always been a bit annoying

[17:00] <timotimo> a role's TWEAK method will be merged into the class it's applied to by overwriting what's there already

[17:01] <AlexDaniel> yeah, something like that. IMO it should not be that way

[17:02] <TimToady> in general, it seems like submethods should be glommed together, not overridden

[17:02] <japhb> .oO( Glomming Submethods for Fun and Profit )

[17:03] <japhb> ... and FWIW I agree

[17:04] <mst> I thought TWEAK and BUILD being submethods it wouldn't overwrite

[17:06] <TimToady> perhaps it's currently "shouldn't" :)

[17:08] <mst> oh, right, I misread your glomming comment

[17:08] <TimToady> I don't actually know whether there is an attempt to glom currently; haven't been in that code much...

[17:09] <mst> timotimo: also, surely if the class already had one, it wouldn't be overwritten - and if the superclass has one, that'll still get called via whatever equivalent mechanism to 'call all BUILDs'

[17:09] <TimToady> certainly we glom at the class level, that's what the whole buildplan is about

[17:10] <TimToady> but glomming should likely be guaranteed for role submethods as well

[17:10] <mst> I mean, still not really helpful, but that's why 'sub BUILD {} after BUILD => sub { ... };' works in perl5 M* OO to emulate glomming

[17:30] <Geth> ¦ nqp: 1f96304a73 | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/DecoderInstance.java

[17:30] <Geth> ¦ nqp: [JVM] Don't add to decoder if there is no byte

[17:30] <Geth> ¦ nqp:

[17:30] <Geth> ¦ nqp: This should fix the last part of https://github.com/rakudo/rakudo/issues/1541

[17:30] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1f96304a73

[17:30] <Geth> ¦ nqp: ad9762520b | usev6++ | 2 files

[17:30] <Geth> ¦ nqp: Test for empty decoder after adding empty buffer

[17:30] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ad9762520b

[17:30] <Geth> ¦ nqp: 17fd55f9de | (Christian Bartolomäus)++ (committed using GitHub Web editor) | 3 files

[17:30] <Geth> ¦ nqp: Merge pull request #423 from usev6/jvm_decoder_empty

[17:30] <Geth> ¦ nqp:

[17:30] <Geth> ¦ nqp: [JVM] Fix eof detection after read from empty file

[17:30] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/17fd55f9de

[18:52] <Geth> ¦ roast: c227876274 | skids++ | S02-magicals/dollar-underscore.t

[18:52] <Geth> ¦ roast: Add tests for aliasing, or not, of $_ in various block syntaxes

[18:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c227876274

[18:58] <Geth> ¦ nqp: fe7cae2142 | (Nick Logan)++ (committed using GitHub Web editor) | 2 files

[18:58] <Geth> ¦ nqp: Add getppid op (#422)

[18:58] <Geth> ¦ nqp:

[18:58] <Geth> ¦ nqp: Allows a child process to get the parent process id, and thus

[18:58] <Geth> ¦ nqp: guess if it has become orphaned.

[18:58] <Geth> ¦ nqp:

[18:58] <Geth> ¦ nqp: See: #381

[18:58] <synopsebot> NQP#381 [closed]: https://github.com/perl6/nqp/pull/381 Add getppid op for moarvm

[18:58] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fe7cae2142

[19:02] <MasterDuke> timotimo: did you see the possible race condition we were experimenting with earlier?

[19:02] <timotimo> multiple threads reifying the same array?

[19:03] <MasterDuke> could be

[19:04] <MasterDuke> m: my @primes = (1 .. *).grep({ .is-prime }); my @p = gather for 4000, 5, 100, 2000 -> $n { take start { @primes[$n] }; }; .say for await @p;

[19:04] <camelia> rakudo-moar 7d72387bc: OUTPUT: «37657␤13␤547␤17299␤»

[19:04] <MasterDuke> m: my @primes = (1 .. *).grep({ .is-prime }); my @p = gather for 4000, 5, 100, 2000 -> $n { take start { @primes[$n] }; }; .say for await @p;

[19:04] <camelia> rakudo-moar 7d72387bc: OUTPUT: «37589␤13␤547␤17293␤»

[19:04] <MasterDuke> notice the different results

[19:05] <jnthn> Yeah, that ain't going to work out too well, at least, not unless we decide we're going to insert locking into lazy arrays

[19:06] <timotimo> yeah, no, we probably don't want that

[19:08] <MasterDuke> m: my @primes = .grep { .is-prime }, 1 .. *; my @p = gather for 4000, 5, 100, 2000 -> $n { take start { @primes[$n] }; }; .say for await @p;

[19:08] <camelia> rakudo-moar 7d72387bc: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> 3my @primes = .grep7⏏5 { .is-prime }, 1 .. *; my @p = gather f␤    expecting any…»

[19:08] <MasterDuke> m: my @primes = grep { .is-prime }, 1 .. *; my @p = gather for 4000, 5, 100, 2000 -> $n { take start { @primes[$n] }; }; .say for await @p;

[19:08] <camelia> rakudo-moar 7d72387bc: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    No such method 'is-prime' for invocant of type 'Mu'␤      in block  at <tmp> line 1␤      in block  at <tmp> line 1␤␤»

[19:08] <MasterDuke> that's the other odd thing ^^^

[19:09] <jnthn> Same underlying cause, surely

[19:09] <jnthn> timotimo: Well, given it only impacts upon things that are marked lazy, when you already asked to trade time for less memory etc...

[19:09] <jnthn> timotimo: Provided we can do it without making the non-lazy case more costly I'm open to looking into it at least

[19:10] <timotimo> fair enough

[19:12] <timotimo> surely we can do something clever with regards to signaling

[19:12] <timotimo> i.e. if one thread is already reifying 0 to 10_000 and we are interested in value 100, but it's not yet ready

[19:14] <travis-ci> NQP build failed. Nick Logan 'Add getppid op (#422)

[19:14] <travis-ci> https://travis-ci.org/perl6/nqp/builds/345715828 https://github.com/perl6/nqp/compare/17fd55f9deeb...fe7cae21420f

[19:21] <MasterDuke> synopsebot: source

[19:21] <synopsebot> MasterDuke, See: https://github.com/perl6/synopsebot

[19:27] <MasterDuke> does anyone else think it would make sense for synopsebot to wait until it sees `review: https://github.com/*` before it prints its stuff?

[19:56] <geekosaur> with a timeout in case what it thought was a commit announcement wasn't?

[20:00] <timotimo> yeah, i wanted that feature in the past

[20:04] <Geth> ¦ nqp: b6d98eac3f | (Samantha McVey)++ | 2 files

[20:04] <Geth> ¦ nqp: [moar] Add encodeconf and decodeconf ops

[20:04] <Geth> ¦ nqp:

[20:04] <Geth> ¦ nqp: These ops by default decode strictly with windows-1252 and windows-1251

[20:04] <Geth> ¦ nqp: codetable specification, throwing on invalid input or output (as is done

[20:04] <Geth> ¦ nqp: now for utf8 encoding). They can be set to decode/encode permissively as

[20:04] <Geth> ¦ nqp: well, which will decode/encode codepoints that are unmapped yet still

[20:04] <Geth> ¦ nqp: fit within one byte.

[20:04] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b6d98eac3f

[20:20] <travis-ci> NQP build failed. Samantha McVey '[moar] Add encodeconf and decodeconf ops

[20:20] <travis-ci> https://travis-ci.org/perl6/nqp/builds/345731140 https://github.com/perl6/nqp/compare/fe7cae21420f...b6d98eac3f0d

[20:22] <pmurias> samcv: nqp::encode(...) is now just an alias for nqp::encodeconf(..., 1)

[20:22] <pmurias> ?

[20:22] <samcv> no

[20:23] <samcv> well it maybe will be

[20:24] <samcv> but yeah nqp::encode is like doing nqp::encodeconf(.., 1) sorry if i wasn't clear

[20:24] <samcv> https://github.com/MoarVM/MoarVM/commit/314c523fe5e7ded9dc0158faa38cc707d4c2068b

[20:27] <Kaiepi> i finally figured out what was causing me to require gmake to install rakudo from a while back, when normally bsd make works fine

[20:29] <Kaiepi> passing --compiler=gcc to moarvm makes it generate a gnu makefile, but doesn't check whether make actually is gmake

[20:30] <Kaiepi> so trying to build it on *bsd (apart from osx) will fail

[20:32] <Kaiepi> but i'm wondering what the distinction between --compiler and --cc is meant to be, since --cc=gcc doesn't screw with the generated makefile

[20:34] <Kaiepi> is --cc just meant to be used for the path to the compiler if it's different from where where the one the configure script chooses is?

[20:38] <pmurias> samcv: any need to keep the old ops when rakudo (and other backends) updated to the new ones?

[20:38] <samcv> pmurias: no not really

[20:38] <yoleaux> 20:36Z <Zoffix> samcv: does Unicode have some sort of "non-break" property? In .words and with \S/\s we split on \x00A0\x2007\x202F chars because they're Zs and don't split on \xFEFF because it ain't. But when parsing quotewords we have code explitly not splitting on "\x00A0\x2007\x202F\xFEFF" and I don't know why these 4 chars were chosen to be special exactly (other than having "non-break" in the name)

[21:18] <tbrowder> samcv: try modifying yr .travis.yml as it is now in the master branc.

[21:19] <tbrowder> *branch. that should get yr jvm job farther along.

[21:19] <Geth> ¦ nqp: 24f90977a1 | (Samantha McVey)++ | 2 files

[21:19] <Geth> ¦ nqp: Only run the new decode/encode conf tests on moarvm for now

[21:19] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/24f90977a1

[21:20] <tbrowder> for

[22:12] <tbrowder> .tell samcv try modifying yr .travis.yml as in the current nqp master branch. it will help push yr jvm job along in NQP#425

[22:12] <yoleaux> tbrowder: I'll pass your message to samcv.

[22:12] <synopsebot> NQP#425 [open]: https://github.com/perl6/nqp/pull/425 [moar] Add encodeconf and decodeconf ops

[22:37] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1563: Whitespace fixes for Rational.pm

[22:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1563

[23:13] <[Coke]> 
