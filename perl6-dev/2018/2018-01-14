[00:16] <Zoffix> I may have mentioned yesterday that I was gonna try to fix the new traits tickets ( RT#132711 / RT#132713 / R#131099 ), but all roads lead to EXPR parser and it's too hard for me right now, so I'm gonna give up on these. And RT#132710 looks fairly easy. Gonna fix that one (make it warn if it sees duplicated trait used)

[00:16] <synopsebot> RT#132711 [open]: https://rt.perl.org/Ticket/Display.html?id=132711 [LTA] Stupidly using `is assoc` with unary prefix operator has an error message from the deep

[00:16] <synopsebot> RT#132713 [open]: https://rt.perl.org/Ticket/Display.html?id=132713 Order of `is assoc` and precedence traits matter, but should it?

[00:16] <synopsebot> RT#132710 [new]: https://rt.perl.org/Ticket/Display.html?id=132710 [LTA] Warning message for duplicated tighter trait

[00:17] <Zoffix> (and EXPR parser probably shouldn't be messed with before release)

[01:29] <Geth> ¦ rakudo: ad60b947e4 | (Zoffix Znet)++ | src/Perl6/World.nqp

[01:29] <Geth> ¦ rakudo: Warn on duplicate trait application

[01:29] <Geth> ¦ rakudo:

[01:29] <Geth> ¦ rakudo: Partially fixes RT#132710:

[01:29] <Geth> ¦ rakudo: https://rt.perl.org/Ticket/Display.html?id=132710

[01:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ad60b947e4

[01:29] <synopsebot> RT#132710 [new]: https://rt.perl.org/Ticket/Display.html?id=132710 [LTA] Warning message for duplicated tighter trait

[01:39] <Geth> ¦ rakudo: 732a25c312 | (Zoffix Znet)++ | src/Perl6/World.nqp

[01:39] <Geth> ¦ rakudo: Improve location for dupe trait warning

[01:39] <Geth> ¦ rakudo:

[01:39] <Geth> ¦ rakudo: Original pointed to end of routine (or end of file?). Fix to

[01:39] <Geth> ¦ rakudo: point at the start of dupe trait definition.

[01:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/732a25c312

[01:40] <Geth> ¦ roast: 2dca47b3a1 | (Zoffix Znet)++ | S06-traits/misc.t

[01:40] <Geth> ¦ roast: Test dupe trait application warns

[01:40] <Geth> ¦ roast:

[01:40] <Geth> ¦ roast: RT#132710: https://rt.perl.org/Ticket/Display.html?id=132710

[01:40] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/ad60b947e4

[01:40] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/732a25c312

[01:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2dca47b3a1

[01:40] <synopsebot> RT#132710 [new]: https://rt.perl.org/Ticket/Display.html?id=132710 [LTA] Warning message for duplicated tighter trait

[02:34] <Geth> ¦ rakudo: ade7c4660f | (Aleks-Daniel Jakimenko-Aleksejev)++ | 3 files

[02:34] <Geth> ¦ rakudo: .pl → .p6 extension for Perl 6 scripts

[02:34] <Geth> ¦ rakudo:

[02:34] <Geth> ¦ rakudo: This one was supposed to be executed manually, so hopefully no

[02:34] <Geth> ¦ rakudo: automation is depending on this.

[02:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ade7c4660f

[03:05] <Geth> ¦ rakudo: 029226fe99 | (Zoffix Znet)++ | src/core/traits.pm

[03:05] <Geth> ¦ rakudo: Don't assume <prec> key got stuff in it

[03:05] <Geth> ¦ rakudo:

[03:05] <Geth> ¦ rakudo: Under some conditions it appears to not have anything, though it's

[03:05] <Geth> ¦ rakudo: possible the existence of those conditions is a bug in itself.

[03:05] <Geth> ¦ rakudo:

[03:05] <Geth> ¦ rakudo: Also swap to the much faster (Str, Str) subst candidate.

[03:05] <Geth> ¦ rakudo:

[03:05] <Geth> ¦ rakudo: Fixes crash seen in RT#132710:

[03:05] <Geth> ¦ rakudo: https://rt.perl.org/Ticket/Display.html?id=132710

[03:05] <synopsebot> RT#132710 [new]: https://rt.perl.org/Ticket/Display.html?id=132710 [LTA] Warning message for duplicated tighter trait

[03:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/029226fe99

[03:07] <travis-ci> Rakudo build passed. Zoffix Znet 'Simplify core op lookup'

[03:07] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/328360149 https://github.com/rakudo/rakudo/compare/c3a83afaafeb...d73d88717dfe

[03:07] <Geth> ¦ roast: 27f9e2eef6 | (Zoffix Znet)++ | S06-traits/misc.t

[03:07] <Geth> ¦ roast: Cover crash in traits

[03:07] <Geth> ¦ roast:

[03:07] <Geth> ¦ roast: RT#132710: https://rt.perl.org/Ticket/Display.html?id=132710

[03:07] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/029226fe99

[03:07] <Geth> ¦ roast:

[03:07] <Geth> ¦ roast: It's possible this test will need to be modified after 2018.01

[03:07] <Geth> ¦ roast: release, when another fix for traits (to warn on mixing them in

[03:07] <Geth> ¦ roast: from wrong routine) goes in.

[03:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/27f9e2eef6

[03:47] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1400: Issue 1397: Reifiy pending elements in Seq prior to rotor call

[03:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1400

[05:56] <Geth> ¦ rakudo: 4a82b4b6f0 | (Jeremy Studer)++ | src/core/Rakudo/Iterator.pm

[05:56] <Geth> ¦ rakudo: Fix R::I::Rotor calling .pull-one one too many times

[05:56] <Geth> ¦ rakudo:

[05:56] <Geth> ¦ rakudo: Rakudo::Iterator::Rotor was calling .pull-one too many times causing

[05:56] <Geth> ¦ rakudo: error. This type of error has been encountered before, on another

[05:56] <Geth> ¦ rakudo: code-path involving Rakudo::Iterator::Batch. zoffix++ for pointing

[05:56] <Geth> ¦ rakudo: this out.

[05:56] <Geth> ¦ rakudo:

[05:56] <Geth> ¦ rakudo: Addresses [Issue 1397](https://github.com/rakudo/rakudo/issues/1397)

[05:56] <Geth> ¦ rakudo:

[05:56] <Geth> ¦ rakudo: See commit for more details:

[05:56] <Geth> ¦ rakudo:     bcd902a43ee74a1ad0aab3715273037a6e4efa70

[05:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4a82b4b6f0

[05:57] <Geth> ¦ rakudo: 1ed8f5de56 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Rakudo/Iterator.pm

[05:57] <Geth> ¦ rakudo: Merge pull request #1400 from jstuder-gh/issue_1397_ords_rotor

[05:57] <Geth> ¦ rakudo:

[05:57] <Geth> ¦ rakudo: Issue 1397: Reifiy pending elements in Seq prior to rotor call

[05:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1ed8f5de56

[05:59] <Zoffix> What takes care of setting .line/.file on Routines? I'm trying to make a PDG warning from inside a trait, but if I set .line/.file from the Routine received as an arg in the trait, it always points to https://github.com/rakudo/rakudo/blob/master/src/Perl6/World.nqp#L2263 instead of the final location.

[05:59] <Zoffix> Trying to figure out how to get that final location...

[07:03] <Zoffix> K, screw it. Gonna leave it APDG

[07:04] <Zoffix> "Almost Pretty Damn Good" :)

[07:04] <AlexDaniel> releasable6: next

[07:04] <releasable6> AlexDaniel, Next release in 6 days and ≈11 hours. No blockers. Unknown changelog format

[07:54] <Geth> ¦ roast: 48a7028bbb | usev6++ | 2 files

[07:54] <Geth> ¦ roast: [jvm] Add ticket number to fudge message

[07:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/48a7028bbb

[08:31] <Geth> ¦ roast: 799efffbb0 | usev6++ | S32-list/toggle.t

[08:31] <Geth> ¦ roast: [jvm] Skip newly added tests for '.toggle'

[08:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/799efffbb0

[08:33] <Geth> ¦ rakudo: f8953ee853 | (Zoffix Znet)++ | src/Perl6/World.nqp

[08:33] <Geth> ¦ rakudo: Improve trait-triggered warning reporting

[08:33] <Geth> ¦ rakudo:

[08:33] <Geth> ¦ rakudo: Report position of the start of the trait, rather than the end

[08:33] <Geth> ¦ rakudo: of the routine it's being applied to.

[08:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f8953ee853

[08:42] <[Tux]> Rakudo version 2017.12-213-g1ed8f5de5 - MoarVM version 2017.12.1-32-g56c03d99c

[08:42] <[Tux]> csv-test-xs-20      0.441 -  0.457

[08:42] <[Tux]> test-t --race       1.161 -  1.199

[08:42] <[Tux]> csv-ip5xs           1.135 -  1.214

[08:42] <[Tux]> test-t              2.935 -  2.963

[08:42] <[Tux]> test               11.337 - 11.972

[08:42] <[Tux]> csv-parser         12.558 - 13.043

[08:42] <[Tux]> csv-ip5xs-20       13.869 - 14.025

[08:42] <[Tux]> test-t-20 --race   17.756 - 18.315

[08:42] <[Tux]> test-t-20          51.718 - 52.400

[08:59] <Geth> ¦ rakudo/trait-use-warnings: 61ba4345f3 | (Zoffix Znet)++ | src/core/traits.pm

[08:59] <Geth> ¦ rakudo/trait-use-warnings: Warn on use of traits on other than on proto for multies

[08:59] <Geth> ¦ rakudo/trait-use-warnings:

[08:59] <Geth> ¦ rakudo/trait-use-warnings: Stash a draft idea.

[08:59] <Geth> ¦ rakudo/trait-use-warnings: review: https://github.com/rakudo/rakudo/commit/61ba4345f3

[09:13] <Geth> ¦ rakudo/RT132710-traits-from-all-multies: 6b17ab1d86 | (Zoffix Znet)++ | src/core/traits.pm

[09:13] <Geth> ¦ rakudo/RT132710-traits-from-all-multies: Draft for traits application on multies

[09:13] <Geth> ¦ rakudo/RT132710-traits-from-all-multies:

[09:13] <Geth> ¦ rakudo/RT132710-traits-from-all-multies: Part of work on RT#132710:

[09:13] <Geth> ¦ rakudo/RT132710-traits-from-all-multies: https://rt.perl.org/Ticket/Display.html?id=132710

[09:13] <Geth> ¦ rakudo/RT132710-traits-from-all-multies:

[09:13] <Geth> ¦ rakudo/RT132710-traits-from-all-multies: Makes precedence-affecting traits work on any multi they're

[09:13] <Geth> ¦ rakudo/RT132710-traits-from-all-multies: applied to, but it breaks lexicality of subs. Since configuration

[09:13] <synopsebot> RT#132710 [new]: https://rt.perl.org/Ticket/Display.html?id=132710 [LTA] Warning message for duplicated tighter trait

[09:13] <Geth> ¦ rakudo/RT132710-traits-from-all-multies: gets written to the dispatcher, a lexically defined multi will

[09:13] <Geth> ¦ rakudo/RT132710-traits-from-all-multies: globally affect precedence.

[09:13] <Geth> ¦ rakudo/RT132710-traits-from-all-multies: review: https://github.com/rakudo/rakudo/commit/6b17ab1d86

[09:16] <Geth> ¦ rakudo/RT132710-traits-warn-on-non-proto: 29a6182698 | (Zoffix Znet)++ | src/core/traits.pm

[09:16] <Geth> ¦ rakudo/RT132710-traits-warn-on-non-proto: Warn if prec/assoc traits are on multies other…

[09:16] <Geth> ¦ rakudo/RT132710-traits-warn-on-non-proto:

[09:16] <Geth> ¦ rakudo/RT132710-traits-warn-on-non-proto: other than proto or first multi if using implicit proto (fails

[09:16] <Geth> ¦ rakudo/RT132710-traits-warn-on-non-proto: compilation due to `for` on `.^attributes` loop). Unsure whether

[09:16] <Geth> ¦ rakudo/RT132710-traits-warn-on-non-proto: we should warn, die, or Just Work.

[09:16] <Geth> ¦ rakudo/RT132710-traits-warn-on-non-proto:

[09:16] <Geth> ¦ rakudo/RT132710-traits-warn-on-non-proto: Part of work on RT#132710:

[09:16] <Geth> ¦ rakudo/RT132710-traits-warn-on-non-proto: https://rt.perl.org/Ticket/Display.html?id=132710

[09:16] <Geth> ¦ rakudo/RT132710-traits-warn-on-non-proto: review: https://github.com/rakudo/rakudo/commit/29a6182698

[09:19] <Geth> ¦ rakudo/fix-equiv: 6f5b27ce63 | (Zoffix Znet)++ | src/core/traits.pm

[09:19] <Geth> ¦ rakudo/fix-equiv: Revert "Delete .prec<assoc> in is equiv() trait"

[09:19] <Geth> ¦ rakudo/fix-equiv:

[09:19] <Geth> ¦ rakudo/fix-equiv: This reverts commit f9f0883c6cef3695c5150d336f5e6552e1be4a4c.

[09:19] <Geth> ¦ rakudo/fix-equiv:

[09:19] <Geth> ¦ rakudo/fix-equiv: Per S06 speculations, `is equiv` is supposed to copy assoc.

[09:19] <Geth> ¦ rakudo/fix-equiv: [1] https://design.perl6.org/S06.html

[09:19] <Geth> ¦ rakudo/fix-equiv: review: https://github.com/rakudo/rakudo/commit/6f5b27ce63

[09:55] <Geth> ¦ roast: c7615b3537 | (Zoffix Znet)++ (committed using GitHub Web editor) | S06-traits/misc.t

[09:55] <Geth> ¦ roast: Mark recently-added iffy test with ticket number

[09:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c7615b3537

[10:19] <lizmat> Files=1232, Tests=76017, 330 wallclock secs (14.97 usr  5.37 sys + 2276.88 cusr 233.14 csys = 2530.36 CPU)

[10:29] <Geth> ¦ rakudo: ddbf07e8c8 | (Elizabeth Mattijsen)++ | src/core/operators.pm

[10:29] <Geth> ¦ rakudo: Make infix:<does> and X::Does::TypeObject also take nameds

[10:29] <Geth> ¦ rakudo:

[10:29] <Geth> ¦ rakudo: This makes the error more useful: before it could die because nameds

[10:29] <Geth> ¦ rakudo: were not accepted by infix:<does>, which sent me on a goose chase for

[10:29] <Geth> ¦ rakudo: an hour.  With the nameds shown, it became very clear what my problem was.

[10:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ddbf07e8c8

[10:29] <Geth> ¦ rakudo: 577808ecbd | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[10:29] <Geth> ¦ rakudo: Don't need to initialized native ints to 0

[10:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/577808ecbd

[11:09] <Geth> ¦ rakudo/post-release: f5b4d89fbb | (Zoffix Znet)++ | src/Perl6/Grammar.nqp

[11:09] <Geth> ¦ rakudo/post-release: Fix `no worries` pragma

[11:09] <Geth> ¦ rakudo/post-release:

[11:09] <Geth> ¦ rakudo/post-release: Looks like it never worked, despite the machinery being there, as

[11:09] <Geth> ¦ rakudo/post-release: it expected a "no-worries" pragma to be set to a true value.

[11:09] <Geth> ¦ rakudo/post-release: review: https://github.com/rakudo/rakudo/commit/f5b4d89fbb

[11:10] <Geth> ¦ roast/post-release: 5c91d6803b | (Zoffix Znet)++ | S32-exceptions/misc.t

[11:10] <Geth> ¦ roast/post-release: Add rudimentary tests of `no worries` pragma

[11:10] <Geth> ¦ roast/post-release:

[11:10] <Geth> ¦ roast/post-release: Rakudo impl: https://github.com/rakudo/rakudo/commit/f5b4d89fbb

[11:10] <Geth> ¦ roast/post-release: review: https://github.com/perl6/roast/commit/5c91d6803b

[11:32] <tbrowder> .tell AlexDaniel DrForr yesterday mentioned he was surprised :caption resulted in both a %config entry and a table caption attribute value.  I don’t see that S26 is too specific on that point but I think, given Damian’s preciseness of language, it should exist only as an attribute just like the “predefined” values  such as nested.

[11:32] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[11:32] <AlexDaniel> .

[11:32] <yoleaux> 11:32Z <tbrowder> AlexDaniel: DrForr yesterday mentioned he was surprised :caption resulted in both a %config entry and a table caption attribute value.  I don’t see that S26 is too specific on that point but I think, given Damian’s preciseness of language, it should exist only as an attribute just like the “predefined” values  such as nested.

[11:33] <AlexDaniel> tbrowder: that makes sense, it is surprising indeed

[11:33] <AlexDaniel> tbrowder: but what was the behavior before you started your changes?

[11:33] <AlexDaniel> iirc no caption attribute was generated, but I could be wrong

[11:35] <tbrowder> that’s correct, no caption attribute existed prior to 11 dec 2017.

[11:35] <AlexDaniel> ah, and I also remember that some people were depending on caption %config entry?

[11:35] <AlexDaniel> greppable6: caption

[11:36] <greppable6> AlexDaniel, https://gist.github.com/7782543feb1583f87caa4fa4269690c0

[11:36] <tbrowder> er, true...

[11:36] <hankache> Hello #perl6

[11:37] <AlexDaniel> greppable6: \<caption

[11:37] <greppable6> AlexDaniel, https://gist.github.com/129d587c66ecf3d5d2a5e35a016dc66f

[11:37] <tbrowder> your memory is MUCH better than mine.

[11:37] <hankache> Notepad++ on Windows and Geany on Linux are two widely used lightweight editors that use Scintilla for syntax highlighting.

[11:37] <AlexDaniel> here is an example: https://github.com/perl6/Pod-To-HTML/blob/98cc35eb05ac02979d0b2d0d9a7f7853d6f81dc8/lib/Pod/To/HTML.pm#L392

[11:37] <hankache> It would be great if someone with the required knowledge from the community can help build one for Perl 6.

[11:38] <hankache> https://sourceforge.net/p/scintilla/feature-requests/1207/

[11:39] <AlexDaniel> tbrowder: so it feels like we should keep it in v6.c, or at least be more prepared to perform the change

[11:39] <AlexDaniel> I do understand that the thing was probably underspec-ed, but that doesn't really justify breaking a bunch of code out there

[11:40] <AlexDaniel> You see, we can go through the ecosystem and change stuff to .caption… but that means it will stop working with older rakudos

[11:40] <AlexDaniel> life is hard

[11:42] <tbrowder> ok, you’re correct—cooler heads rule the day!

[11:46] <AlexDaniel> tbrowder: maybe you can submit a rakudo ticket with a summary of the situation?

[11:46] <AlexDaniel> just something we can use later when coming back to the topic

[11:47] <AlexDaniel> releasable6: next

[11:47] <releasable6> AlexDaniel, Next release in 6 days and ≈7 hours. No blockers. Unknown changelog format

[11:47] <tbrowder> wilco

[12:02] <Geth> ¦ rakudo: titsuki++ created pull request #1402: Fix RT#132214

[12:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1402

[12:02] <synopsebot> RT#132214 [new]: https://rt.perl.org/Ticket/Display.html?id=132214 [LHF] `need` with version silently fails

[12:15] <Geth> ¦ rakudo/master: 5 commits pushed by (Itsuki Toyota)++, (Elizabeth Mattijsen)++

[12:15] <Geth> ¦ rakudo/master: 7537f89983 | Delete an iteration of $<version> from statement_control:sym<need>

[12:15] <Geth> ¦ rakudo/master: 0cdd82a21b | Make "need" enable to throw an exception when it detects version token

[12:15] <Geth> ¦ rakudo/master: 0a73f19a3e | Recommend "use" instead of "need"

[12:15] <Geth> ¦ rakudo/master: 4d5e097af1 | Add tests for "need 6.0" and "need v6.0"

[12:15] <Geth> ¦ rakudo/master: fd44f70244 | Merge pull request #1402 from titsuki/fix-need

[12:15] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/577808ecbd...fd44f70244

[12:32] <tbrowder> is there any preference for new rakudo bug tickets in GH or RT? GH is certainly easier for the user IMHO.

[12:39] <Geth> ¦ nqp: 31dcf0d967 | pmurias++ | src/vm/js/nqp-runtime/package.json

[12:39] <Geth> ¦ nqp: [js] Bump dep to a fixed version unicode-collation-algorithm

[12:39] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/31dcf0d967

[12:46] <lizmat> tbrowder: GH has preference nowadays for maintainers

[12:46] <lizmat> and possibly for users  :-)

[12:46] <tbrowder> thnx!

[12:46] <lizmat> s/maintainers/many current maintainers/

[12:50] <dogbert17> ZOFFLOP: t/spec/S10-packages/basic.t (test #48)

[14:08] <Geth> ¦ roast: jstuder-gh++ created pull request #377: Rakudo Issue 1397: Test Rotor iter stops pulling after IterationEnd

[14:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/377

[14:20] <Geth> ¦ roast: d6dcfbff8b | (Jeremy Studer)++ | S32-list/rotor.t

[14:20] <Geth> ¦ roast: Test Rotor iter stops pulling after IterationEnd

[14:20] <Geth> ¦ roast:

[14:20] <Geth> ¦ roast: Test courtesy of zoffix.

[14:20] <Geth> ¦ roast:

[14:20] <Geth> ¦ roast: Addresses

[14:20] <Geth> ¦ roast: [Rakudo Issue 1397](https://github.com/rakudo/rakudo/issues/1397)

[14:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d6dcfbff8b

[14:20] <Geth> ¦ roast: 411b2bf645 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S32-list/rotor.t

[14:20] <Geth> ¦ roast: Merge pull request #377 from jstuder-gh/issue_1397_ords_rotor

[14:20] <Geth> ¦ roast:

[14:20] <Geth> ¦ roast: Rakudo Issue 1397: Test Rotor iter stops pulling after IterationEnd

[14:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/411b2bf645

[15:25] <travis-ci> Rakudo build passed. Zoffix Znet 'Add a debug point in visit_children'

[15:25] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/328385065 https://github.com/rakudo/rakudo/compare/d73d88717dfe...062dc3f04fa8

[17:00] <pmurias> jnthn: how can the semantics of declaration_static/immediate_static be described?

[17:05] <pmurias> jnthn: I think some of my problems in getting roles to work on rakudo.js are caused by me having a flawed model of how they are supposed to work (plus it would be great to have them documented in QAST docs)

[17:06] <timotimo> hm, do roles and qast actually interact that much?

[17:29] <pmurias> timotimo: roles contain method that are

[17:30] <pmurias> built as qast, and they end up with wrong scopes in rakudo.js (so &say doesn't work properly)

[17:34] <timotimo> ah, ok

[17:55] <jnthn> pmurias: Effecitvely, they just tell the code-gen to not emit any takeclosure ops, because that will be handled manually (in the Rakudo case by Block.clone and p6capturelex)

[18:45] <[Tux]> First run on openSUSE 42.3:

[18:45] <[Tux]> Rakudo version 2017.12-221-gfd44f7024 - MoarVM version 2017.12.1-32-g56c03d99c

[18:45] <[Tux]> csv-test-xs-20      0.449 -  0.451

[18:45] <[Tux]> test-t --race       1.147 -  1.150

[18:45] <[Tux]> csv-ip5xs           1.131 -  1.197

[18:45] <[Tux]> test-t              2.758 -  2.816

[18:45] <[Tux]> test               11.236 - 11.311

[18:45] <[Tux]> csv-parser         12.588 - 13.316

[18:45] <[Tux]> csv-ip5xs-20       13.404 - 13.459

[18:45] <[Tux]> test-t-20 --race   17.563 - 18.960

[18:45] <[Tux]> test-t-20          49.195 - 51.853

[19:27] <travis-ci> Rakudo build passed. Zoffix Znet 'Label test with ticket number for it'

[19:27] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/328396554 https://github.com/rakudo/rakudo/compare/062dc3f04fa8...60566cfc4ad4

[20:44] <Geth> ¦ rakudo/post-release: 7c45151426 | (Zoffix Znet)++ | src/core/IO/Socket/Async.pm

[20:44] <Geth> ¦ rakudo/post-release: Don't lose scheduler when we pass the args

[20:44] <Geth> ¦ rakudo/post-release: review: https://github.com/rakudo/rakudo/commit/7c45151426

[21:09] <dogbert17> .seen zofbot

[21:09] <yoleaux> I saw ZofBot 9 Jan 2018 17:07Z in #perl6-dev: <ZofBot> Zoffix, Will remind you on 2018-04-09T12:07:38.028904-05:00 about see why harness smartification makes Travis cry: https://github.com/rakudo/rakudo/commit/18e3468901 causes wait 9 failures: https://travis-ci.org/rakudo/rakudo/builds/323686909

[21:27] <dogbert17> m: my @a = 1,2,3; my @b = 4,5,6; say [min] @a, @b # is this correct?

[21:27] <camelia> rakudo-moar fd44f7024: OUTPUT: «[1 2 3]␤»

[21:27] <dogbert17> it seems to have behaved differently at one point

[21:27] <lizmat> dogbert17: probably before the GLR

[21:27] <lizmat> m: my @a = 1,2,3; my @b = 4,5,6; say @a cmp @b

[21:27] <camelia> rakudo-moar fd44f7024: OUTPUT: «Less␤»

[21:28] <dogbert17> was looking at an Advent article from 2009 :)

[21:28] <lizmat> m: my @a = 1,2,3; my @b = 4,5,6; say [min] |@a, |@b  # perhaps this is what you want

[21:28] <camelia> rakudo-moar fd44f7024: OUTPUT: «1␤»

[21:28] <lizmat> dogbert17: yeah, that's pre GLR

[21:28] <dogbert17> that definitely does the trick, lizmat++

[21:54] <Geth> ¦ nqp: d20574ddd3 | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/ops.markdown

[21:54] <Geth> ¦ nqp: Document if/unless return condition when no else

[21:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d20574ddd3

[22:06] <Zoffix> What does nqp::hllize do?

[22:10] <timotimo> an HLL is, among other things, a set of role (in the general meaning) -> type mappings

[22:11] <timotimo> hllize is used everywhere one language may call stuff in another language, commonly NQP <-> Perl6

[22:11] <Zoffix> Thanks.

[22:11] <timotimo> m: say nqp::list_s.^name

[22:11] <camelia> rakudo-moar fd44f7024: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::list_s, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3say nqp::list_s7⏏5.^name␤    expecting any of:␤        argument list␤»

[22:11] <timotimo> m: use nqp; say nqp::list_s.^name

[22:11] <camelia> rakudo-moar fd44f7024: OUTPUT: «BOOTStrArray␤»

[22:12] <travis-ci> NQP build failed. Zoffix Znet 'Document if/unless return condition when no else'

[22:12] <travis-ci> https://travis-ci.org/perl6/nqp/builds/328840437 https://github.com/perl6/nqp/compare/31dcf0d9676f...d20574ddd3c9

[22:12] <timotimo> nqp: say(nqp::list_s).^name

[22:12] <camelia> nqp-moarvm: OUTPUT: «Confused at line 2, near "say(nqp::l"␤   at gen/moar/stage2/NQPHLL.nqp:707  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQP.nqp:919  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/nqp.moarvm:comp_unit)␤ from gen/mo…»

[22:12] <Zoffix> m: use nqp; say nqp::hllize(nqp::list_s).^name

[22:12] <camelia> rakudo-moar fd44f7024: OUTPUT: «BOOTStrArray␤»

[22:12] <timotimo> nqp: say(nqp::list_s).HOW.name(nqp::list_s)

[22:12] <camelia> nqp-moarvm: OUTPUT: «cannot stringify this␤   at gen/moar/stage2/NQPCORE.setting:950  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPCORE.setting.moarvm:join)␤ from gen/moar/stage2/NQPCORE.setting:939  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPCORE.setting.moarvm:say)␤ …»

[22:12] <timotimo> hrmpf

[22:12] <timotimo> wrong parens

[22:12] <timotimo> nqp: say(nqp::list_s.HOW.name(nqp::list_s))

[22:12] <camelia> nqp-moarvm: OUTPUT: «BOOTStrArray␤»

[22:12] <timotimo> okay, this is a bad example looks like

[22:13] <Zoffix> nqp travis: 1 job == t/concurrency/01-thread.t .............. Failed 1/24 subtests

[22:13] <timotimo> m: use nqp; nqp::hllizefor(1, "nqp").^name

[22:13] <camelia> rakudo-moar fd44f7024: ( no output )

[22:13] <timotimo> m: use nqp; nqp::hllizefor(1, "nqp").^name.say

[22:13] <camelia> rakudo-moar fd44f7024: OUTPUT: «Int␤»

[22:13] <timotimo> hmpf.

[22:14] <timotimo> m: use nqp; nqp::hllizefor(Mu, "nqp").^name.say

[22:14] <camelia> rakudo-moar fd44f7024: OUTPUT: «Mu␤»

[22:14] <timotimo> m: use nqp; nqp::hllizefor(nqp::null, "nqp").^name.say

[22:14] <camelia> rakudo-moar fd44f7024: OUTPUT: «(signal SEGV)»

[22:14] <timotimo> ...

[22:15] <Zoffix> :)

[22:16] <Zoffix> nqp: say(nqp::hllize(nqp::null).HOW.name: nqp::hllize(nqp::null))

[22:16] <camelia> nqp-moarvm: OUTPUT: «(signal SEGV)»

[22:16] <timotimo> it's hard to study the effects of hllization in perl6 code because hllize is sprinkled pretty much everywhere

[22:17] <timotimo> moar's dynamic optimizer can eliminate 99% of these hllize ops, though

[22:20] <Geth> ¦ rakudo: d0be53a1ec | (Zoffix Znet)++ | src/core/Any.pm

[22:20] <Geth> ¦ rakudo: Rework &dd low-level object fixups

[22:20] <Geth> ¦ rakudo:

[22:20] <Geth> ¦ rakudo: The original[^1] fix up is too broad a brush as with lazy objects

[22:20] <Geth> ¦ rakudo: we can crash when calling their .perl (e.g. `dd gather die`), which

[22:20] <Geth> ¦ rakudo: causes misinterpreteting them as low-level stuff.

[22:20] <Geth> ¦ rakudo:

[22:20] <Geth> ¦ rakudo: Fix by using nqp::can to check methods we wanna call exist instead of `try`

[22:20] <Geth> ¦ rakudo:

[22:20] <Geth> ¦ rakudo: [1] https://github.com/rakudo/rakudo/commit/99923747ee7461f4630bac971d63

[22:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d0be53a1ec

[22:29] <lizmat> Zoffix++

[22:51] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix spurious warnings in try thunks inside blocks

[22:51] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/328397563 https://github.com/rakudo/rakudo/compare/728acf597cf3...ef2dc1b8ba7d
