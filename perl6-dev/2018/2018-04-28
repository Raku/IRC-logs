[00:01] <AlexDaniel> heh…

[00:02] <Zoffix> Well, I was planning to use last night's NQP fix to parse Rakudo's nums... to see if it's faster. I guess I'm going to be doing that sooner than I thought

[00:05] <Zoffix> Hehe, I feel slightly better that offending commit doesn't have *just* my name on it :P https://github.com/rakudo/rakudo/commit/8422d7b4e23678b5a6ccbc42550e92ce5140e76b

[00:14] <Zoffix> :o the fix worked the first time

[00:23] <Zoffix> ZOFFLOP: t/08-performance/02-qast-rewrites.t

[00:23] <Zoffix> weird that THAT would flop :S

[00:23] <Zoffix> Ah, it was a segv ok

[00:26] <AlexDaniel> like if that's much better :D

[00:26] <Zoffix> :)

[00:26] <AlexDaniel> anyway, see you tomorrow

[00:28] <Zoffix> \o

[00:29] <Zoffix> holy shit

[00:29] <Zoffix> that was caused by `nqp: say(04864.357230107115212e249)` aPPARENTly

[00:50] <Zoffix> m: say(4.864357230107115468e+252 == 04864.357230107115212e249)

[00:50] <camelia> rakudo-moar 24a907747: OUTPUT: «False␤»

[00:50] <Zoffix> turns out this type of precision bug hasn't been rooted out in rakudo

[00:51] <Zoffix> j: say 4.864357230107115468e+252 == 04864.357230107115212e249

[00:51] <camelia> rakudo-jvm 24a907747: OUTPUT: «True␤»

[00:51] <Zoffix> .... ow it's in nqp::div_I :'(

[02:45] <Zoffix> ugggh

[02:45] <Zoffix> I'm stuck

[03:07] <Zoffix> pmurias, are you around? How are you doing nqp::div_In bigint division on JS? Are you doing some rounding stuff? I'm doing bigints, but still hitting pockets where not the closest representable num gets produced

[03:09] <Zoffix> .oO( I guess I can just look myself )

[03:11] <Zoffix> I see

[03:32] <Zoffix> god strtod's sauce is huge.

[03:33] <Zoffix> k Plan B: sweep the problem under the rug and take care of it as part of CaR Grant.

[03:33] <Zoffix> "the problem" == degeneration of Rat to Num doesn't choose closest representable num

[03:36] <Zoffix> m: use nqp; nqp::stringify('22e0')

[03:36] <camelia> rakudo-moar 24a907747: OUTPUT: «===SORRY!===␤No registered operation handler for 'stringify'␤»

[03:36] <Zoffix> dammit

[03:36] <Zoffix> `src/vm/moar/NQP/Ops.nqp:95:$ops.add_hll_op('nqp', 'stringify', -> $qastcomp, $op {`

[03:36] <Zoffix> Any way to get to it from HLL land?

[03:38] <Zoffix> I don't know what I'm doing

[03:39] <Zoffix> ZofBot: haaaallp

[05:54] <Zoffix> $ ./perl6 -e 'say 1e100000000000'

[05:54] <Zoffix> ===SORRY!===

[05:54] <Zoffix> P6opaque: get_boxed_ref could not unbox for the representation 'P6bigint' of type Num

[05:55] <Zoffix> gaddamit

[05:56] <Zoffix> j: say 1e100000000000

[05:56] <camelia> rakudo-jvm 24a907747: OUTPUT: «1␤»

[05:56] <Zoffix> hahaha. We'll, I'll take a crash over that :P

[05:56] <Zoffix> c: 2018.03 say 1e100000000000

[05:56] <committable6> Zoffix, ¦2018.03: «Inf␤»

[05:57] <Zoffix> c: 2018.03 say 1e1000000000000000000000000000000000000000000000000000

[05:57] <committable6> Zoffix, ¦2018.03: «Inf␤»

[05:57] <Zoffix> nqp: say(1e1000000000000000000000000000000000000000000000000000)

[05:57] <camelia> nqp-moarvm: OUTPUT: «Inf␤»

[06:37] <Zoffix> Got all the right bits to fix the parsing perf loss: https://temp.perl6.party/num-speed-fix-diff.diff

[06:37] <Zoffix> Just need to use that nqp::p6stringifyasnqp inside &val's num parser.

[06:38] <Zoffix> And we'll then still have the issue with Rat->Num degration not choosing closest num, but that can easily be left for the RaT grant and I don't believe there are any committed tests that cover it

[06:39] <Geth> ¦ roast/car-grant-num-precision-tests: b99720b985 | (Zoffix Znet)++ | S02-types/num.t

[06:39] <Geth> ¦ roast/car-grant-num-precision-tests: [CaR Grant] Test Num/Rat->Num picks closest representable num

[06:39] <Geth> ¦ roast/car-grant-num-precision-tests: review: https://github.com/perl6/roast/commit/b99720b985

[06:40] <Zoffix> Those ones; particularly the last one in that group. And I'll have more to add too, but that's not the concern of the current release.

[06:42] <Zoffix> Dropping to bed now and then need to work from morning to afternoon, so gonna be unavailable for the next ~15 hours, but if anyone wants to apply that fix in that diff then the release could go on. The &val changes needed is basically grab or construct a num to parse as a string and give it to nqp::p6stringifyasnqp op and that'll stringify it right

[06:42] * Zoffix drops to bed

[06:42] <Zoffix> .tell AlexDaniel` https://irclog.perlgeek.de/perl6-dev/2018-04-28#i_16105470

[06:42] <yoleaux> Zoffix: I'll pass your message to AlexDaniel`.

[06:46] <Zoffix> Forgot to say: no idea what the situation on JVM is; would need to #ifjvm or something around that op or implement it (JVM probably can stringify the nums just fine)

[06:47] <Zoffix> Or we could just leave it all as is and go with original plan of point-releasing fudged tests only and send a p6lert that in this release nums with hugely-huge powers are super slow to parse

[06:50] <Zoffix> Oh, and I just realized I totally mis-named that op. It should be something like, nqp::smartnumify instead of stringifying >_<

[06:56] <Kaiepi> aight got spectest to stop making the bot disconnect now i think

[06:56] <Kaiepi> BeastieBot, stresstest

[06:56] <BeastieBot> [freebsd] Running Roast's stress test suite (this will take a while)...

[06:56] <BeastieBot> [freebsd] Failed Roast stress test suite... See the output at http://fpaste.scsys.co.uk/577323

[06:56] <Kaiepi> lol

[07:00] <Kaiepi> BeastieBot, all

[07:00] <BeastieBot> [freebsd] Running complete Rakudo build and tests (this will take a while)...

[07:00] <Kaiepi> i swear i'll get this to finish running

[07:34] <lizmat> Files=1239, Tests=76292, 318 wallclock secs (15.87 usr  5.62 sys + 2190.61 cusr 219.84 csys = 2431.94 CPU)

[07:35] <BeastieBot> [freebsd] Failed to build Rakudo and run all tests... See the output at http://fpaste.scsys.co.uk/577329

[07:39] <Kaiepi> finally, rakudo bot's in working order

[07:43] <AlexDaniel`> .

[07:43] <yoleaux> 06:42Z <Zoffix> AlexDaniel`: https://irclog.perlgeek.de/perl6-dev/2018-04-28#i_16105470

[08:00] <AlexDaniel`> "super slow to parse" sounds a bit misleading I think

[08:01] <AlexDaniel`> c: 2018.03,2018.04 my $x = "1e10000000"; say +$x

[08:01] <committable6> AlexDaniel`, ¦2018.03: «Inf␤» ¦2018.04: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[08:01] <[Tux]> Rakudo version 2018.04-21-g24a907747 - MoarVM version 2018.04-34-g25f165ad7

[08:01] <[Tux]> csv-test-xs-20      0.452 -  0.462

[08:01] <[Tux]> csv-ip5xs           0.904 -  0.944

[08:01] <[Tux]> test-t --race       1.037 -  1.050

[08:01] <[Tux]> test-t              2.546 -  2.546

[08:01] <[Tux]> csv-ip5xs-20        9.040 -  9.134

[08:01] <[Tux]> test                9.501 -  9.609

[08:01] <[Tux]> test-t-20 --race   14.877 - 15.765

[08:01] <[Tux]> csv-parser         38.099 - 38.348

[08:01] <[Tux]> test-t-20          44.639 - 45.688

[08:02] <AlexDaniel`> so technically that's parsing, sure, but it's very run time :)

[08:03] <AlexDaniel`> I'll be away for a few hours, but to me that feels like something we want to fix for the point release

[10:32] <lizmat> m: multi sub a() { dd callframe(2).my }; a; a   # WAT ?

[10:32] <camelia> rakudo-moar 24a907747: OUTPUT: «{"!UNIT_MARKER" => !UNIT_MARKER, "\$!" => Nil, "\$/" => Nil, "\$=finish" => Mu, "\$=pod" => [], "\$?PACKAGE" => GLOBAL, "\$_" => Any, "\$¢" => Nil, "\&a" => sub a (;; Mu | is raw) { #`(Sub|58941856) ... }, "::?PACKAGE" => GLOBAL, :EXPORT(EXPORT), :GL…»

[10:32] <lizmat> m: multi sub a() { dd callframe(2).my.elems }; a; a   # WAT ?

[10:32] <camelia> rakudo-moar 24a907747: OUTPUT: «12␤0␤»

[10:32] <lizmat> something is getting lost here?

[12:03] <Geth> ¦ rakudo: 0d216befba | (Jonathan Worthington)++ | 2 files

[12:03] <Geth> ¦ rakudo: Make CallFrame skip over thunk-like things

[12:03] <Geth> ¦ rakudo:

[12:03] <Geth> ¦ rakudo: So that we get consistent results in a `multi` with an onlystar

[12:03] <Geth> ¦ rakudo: `proto`. Addresses #1781.

[12:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0d216befba

[12:03] <synopsebot> RAKUDO#1781 [open]: https://github.com/rakudo/rakudo/issues/1781 callframe info changes inside multi sub

[12:30] <dogbert17> m: say [-] 10 # wasn't this the example fixed by timtoady some time ago, used to return -10

[12:30] <camelia> rakudo-moar 0d216befb: OUTPUT: «MoarVM panic: Could not spawn thread: errorcode -11␤»

[12:30] <dogbert17> WAT

[12:31] <dogbert17> m: say [-] 10 # tries again

[12:31] <camelia> rakudo-moar 0d216befb: OUTPUT: «10␤»

[12:31] <dogbert17> hmmm

[12:31] <dogbert17> m: say [-] 10 # wasn't this the example fixed by timtoady some time ago, used to return -10

[12:31] <camelia> rakudo-moar 0d216befb: OUTPUT: «10␤»

[12:33] <timotimo> m: say &infix:<->(10)

[12:33] <camelia> rakudo-moar 0d216befb: OUTPUT: «10␤»

[12:33] <timotimo> so we need to call &infix:<->(&infix:<->(), $first-value), eh?

[12:37] <dogbert17> this specific example can be found in the docs https://docs.perl6.org/routine/reduce

[12:37] <dogbert17> I just patched it though

[13:25] <dogbert17> timotimo: what was the deal with messages like this, I have forgotten: Unhandled exception: const_iX NYI

[13:26] <dogbert17> happened when running: MVM_SPESH_DISABLE=1 ./perl6 --profile -e '(^∞).hyper.grep(*.is-prime)[10_000].say; say now - ENTER now'

[13:26] <timotimo> anything that executes bogus bytecode

[13:26] <timotimo> memory corruption, wrong jumps, no clue what can usually cause this

[13:26] <dogbert17> at least we have an example :)

[13:27] <timotimo> huh, i wonder if removing instrumentation can cause executing code to start running in already-freed memory

[13:29] <dogbert17> that would be quite bad

[13:31] <timotimo> but valgrind would have complained, wouldn't it?

[13:37] <dogbert17> and it doesn't

[13:48] <MasterDuke> because it forces everything to one thread?

[13:50] <dogbert17> on my 32 bit system valgrind does complain, usually with: ==5302== Invalid read of size 4 at 0x41201E3: MVM_hll_map (hll.c:178)

[13:57] <dogbert17> timotimo, MasterDuke: it can look like this when it SEGV's: https://gist.github.com/dogbert17/782a4be73b1d9106e2d1848f882b71ce

[14:27] <MasterDuke> my 64 bit system also gives the same complaint in valgrind

[14:28] <MasterDuke> fwiw, https://gist.github.com/MasterDuke17/b484325d7bff8187b2c99d4f03e02aa5

[14:29] <MasterDuke> dogbert17: have you tried ASAN?

[14:29] <timotimo> i wonder if we have a problem with deopt + removal of instrumentation perhaps?

[14:29] <timotimo> but this is all wild speculation

[14:30] <MasterDuke> why would there be a deopt? with spesh disabled, wouldn't there not be any opts to de?

[14:30] <timotimo> oh, that's with spesh disabled, ok

[15:06] <pmurias> re rakudo failing tests on i386 do we have an evalbot for that?

[15:06] <yoleaux> 27 Apr 2018 11:56Z <Zoffix> pmurias: I think package-lock.json is something with JS backend innit? Would you know how to fix this Issue? https://github.com/perl6/nqp/issues/437

[15:06] <pmurias> .tell Zoffix I'll look into it

[15:06] <yoleaux> pmurias: I'll pass your message to Zoffix.

[15:07] <pmurias> .tell how do I see that the vurlnerable dependency is?

[15:07] <yoleaux> pmurias: I'll pass your message to how.

[15:08] <pmurias> .tell Zoffix vulnerable

[15:08] <yoleaux> pmurias: I'll pass your message to Zoffix.

[15:08] <Zoffix> pmurias: try going to https://github.com/perl6/nqp

[15:08] <Zoffix> I added you to the list of people who can see these messages

[15:08] <Zoffix> Does it show up?

[15:09] <pmurias> where?

[15:10] <Zoffix> pmurias: https://i.imgur.com/5d0OcSy.png

[15:10] <Zoffix> Or are you asking about something else?

[15:11] <Zoffix> "rakudo failing tests on i386" <-- it was nqp failing them and it's already fixed on MoarVM and I don't think JVM was affected.

[15:12] <pmurias> Zoffix: I can see the alert I'll read up on package-lock.json and get rid of it

[15:12] <Zoffix> And this is an all-platform test file that covers the bug, so if JS is passing it, then it's not affected: https://github.com/perl6/nqp/blob/master/t/nqp/115-nums.t

[15:13] <Zoffix> pmurias: also, the parsing nums with nqp::div_In is buggy. I'm gonna replace it with nqp::numify op soon-ish

[15:13] <Zoffix> m: 1e10000000000000

[15:13] <camelia> rakudo-moar 0d216befb: OUTPUT: «===SORRY!===␤P6opaque: get_boxed_ref could not unbox for the representation 'P6bigint' of type Num␤»

[15:13] <Zoffix> That's one

[15:13] <Zoffix> m: 1e10000000

[15:13] <Zoffix> (hangs). That's the other

[15:14] <camelia> rakudo-moar 0d216befb: OUTPUT: «(timeout)»

[15:15] <pmurias> Zoffix: you have found how div_In is implemented on the js backend?

[15:15] <pmurias> Zoffix: it's slow btw so avoiding it seems like a good idea

[15:17] <Zoffix> Yeah, I found it.

[15:40] <dogbert17> MasteDuke, timotimo: ASAN output here: https://gist.github.com/dogbert17/52e8199096df3672236e658affe64b72

[15:48] <MasterDuke> dogbert17: you have GC_DEBUG set to 2? do you get the same error with it off?

[15:51] <dogbert17> MasterDuke: yes I set it in order to see if something different showed up

[15:54] <dogbert17> without the flag set ASAN is silent

[15:55] <dogbert17> I was too quick, it does trigger from time to time with the usual - #0 0xb53daf2c in MVM_hll_map /home/dogbert/repos/rakudo/nqp/MoarVM/src/core/hll.c:178

[15:57] <timotimo> it could very well be that hll_map is just the first op that gets run after some kind of change happens

[16:06] <Geth> ¦ nqp: e5389cb6da | (Samantha McVey)++ | tools/build/MOAR_REVISION

[16:07] <Geth> ¦ nqp: Bump MoarVM

[16:07] <Geth> ¦ nqp:

[16:07] <Geth> ¦ nqp: Changes: 2018.04-34-g25f165a..2018.04-36-g28f7fe711

[16:07] <Geth> ¦ nqp: 28f7fe711 Fix getrandom Linux syscall by removing debug code

[16:07] <Geth> ¦ nqp: e5d028ce2 Use all uppercase for Hangul Syllable names

[16:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e5389cb6da

[16:07] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.04-34-g25f165a...2018.04-36-g28f7fe711

[16:07] <Geth> ¦ nqp: adc3bf6c98 | (Samantha McVey)++ | t/nqp/106-unicodenames.t

[16:07] <Geth> ¦ nqp: Add test for Hangul syllables's unicode name

[16:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/adc3bf6c98

[16:25] <Geth> ¦ rakudo: 305c1d6c86 | (Samantha McVey)++ | tools/build/NQP_REVISION

[16:25] <Geth> ¦ rakudo: Bump MoarVM/NQP

[16:25] <Geth> ¦ rakudo:

[16:25] <Geth> ¦ rakudo: NQP Changes: 2018.04-10-g4d85039..2018.04-13-gadc3bf6c9

[16:25] <Geth> ¦ rakudo: adc3bf6c9 Add test for Hangul syllables's unicode name

[16:25] <Geth> ¦ rakudo: e5389cb6d Bump MoarVM

[16:25] <Geth> ¦ rakudo: d36869cc2 Fudge newly-added Unicodey tests on JVM

[16:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/305c1d6c86

[16:25] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.04-10-g4d85039...2018.04-13-gadc3bf6c9

[16:26] <Geth> ¦ roast: 8afc5a23a6 | (Samantha McVey)++ | S15-unicode-information/uniname.t

[16:26] <Geth> ¦ roast: Correct Hangul Syllable Unicode name test

[16:26] <Geth> ¦ roast:

[16:26] <Geth> ¦ roast: Update it to be all uppercase like the rest of the Unicode codepoint

[16:26] <Geth> ¦ roast: names.

[16:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8afc5a23a6

[16:35] <pmurias> Zoffix: re 32bit evalbot I'm concerned if a test is failing because int is 32bit on the js backend or because the js backend is buggy

[16:35] <pmurias> Zoffix: if I had a 32bit rakudo.moar I could check that directly

[16:35] <Zoffix> Ah

[16:36] <Geth> ¦ roast: 67f9d5a43b | pmurias++ | S02-types/native.t

[16:36] <Geth> ¦ roast: Fix and unfuge test for .WHAT on a native variable

[16:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/67f9d5a43b

[16:43] <Zoffix> ZOFFLOP: t/spec/S07-hyperrace/stress.t

[17:14] <Zoffix> ZOFVM: Files=1294, Tests=153324, 151 wallclock secs (21.10 usr  3.09 sys + 3188.27 cusr 159.92 csys = 3372.38 CPU)

[17:35] <Geth> ¦ nqp: 133e85df43 | (Zoffix Znet)++ | 3 files

[17:35] <Geth> ¦ nqp: Implement nqp::numify op

[17:35] <Geth> ¦ nqp:

[17:35] <Geth> ¦ nqp: Exposes NQP's numification for use in HLL language. This will

[17:35] <Geth> ¦ nqp: let us use NQP's num parser instead of re-inventing our own.

[17:35] <Geth> ¦ nqp:

[17:35] <Geth> ¦ nqp: Nothing is added to JS backend, as as far as I can see the

[17:35] <Geth> ¦ nqp: NQP-level numify op is already exposed in HLL language.

[17:35] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/133e85df43

[17:37] <Zoffix> m: use nqp; my $n = ~1e200.rand; my int $i; {nqp::while($i++ < 30_000_0, nqp::stmts(+$n,nqp::null)); say now - ENTER now}

[17:37] <camelia> rakudo-moar 305c1d6c8: OUTPUT: «6.52349021␤»

[17:37] <Zoffix> So with the fix, this is now 80% faster than current master

[17:38] <Zoffix> m: say 4.26387271 / 4.024373

[17:38] <camelia> rakudo-moar 305c1d6c8: OUTPUT: «1.0595123042␤»

[17:38] <Zoffix> But is still 6% slower than 2018.03 (the cost of fixed precision)

[17:39] <Zoffix> And fixed denomarls

[17:39] <Zoffix> *denormals

[17:41] <Zoffix> And we kinda double-parse it: first we figure out the size of the substring the number is in using nqp::radix twice and then we parse it with nqp::numify to actually get the right number. I'd guess there's an optimization opportunity to avoid the radix stuff and just find the substring size with some faster method

[17:41] <samcv> j: 85679.uniname.say

[17:41] <camelia> rakudo-jvm 305c1d6c8: OUTPUT: «<unassigned>␤»

[17:42] <Zoffix> huh... upgraded to latest rakudo/JSON::Fast and now my ZScript is dying with ===SORRY!===

[17:42] <Zoffix> Invalid JSON: [

[17:42] <Zoffix> "/home/cpan/zscript/bin/../lib/RDev.pm6"

[17:42] <Zoffix> ]

[17:46] <Zoffix> And blowing away lib/.precomp fixed it

[17:47] <samcv> i want to add a call which checks what version of unicode the VM supports

[17:48] <Zoffix> .tell AlexDaniel` I noticed one or two people having issues after upgrading rakudo and then nuking lib/.precomp fixed the problem. I just had the same myself: https://irclog.perlgeek.de/perl6-dev/2018-04-28#i_16107270  Looks like some recent commits broke precomp-renewal-detector or whatever. IIRC before upgrade I was on 2018.03-63 or -68 something in the 60s

[17:48] <yoleaux> Zoffix: I'll pass your message to AlexDaniel`.

[17:48] <samcv> should help with testing if we can implement it across VM's. then we won't have to special code for each VM having support for certain characters and can do it by unicode version. as well should also be useful for programmers

[17:48] <samcv> Zoffix: which thing would we want to hang that off of

[17:49] * Zoffix shrugs

[17:51] <Zoffix> .tell AlexDaniel` the only commit I see in src/core/CompUnit in that range is this :S https://github.com/rakudo/rakudo/commit/9bcc8e523e72e137db10e1b5f01ed9116d33ac2f

[17:51] <yoleaux> Zoffix: I'll pass your message to AlexDaniel`.

[17:53] <pmurias> Zoffix: when adding nqp:: ops tests are super welcome ;)

[17:54] <samcv> Zoffix: do you know about the failures on toaster, if any of them are related to hash randomization or should i invistigate the ones i see?

[17:54] <Zoffix> samcv: I'm not aware of any toaster results that were run recent enough to test hash randomization

[17:55] <samcv> i seem to be getting compilation failure on rakudo-j

[17:55] <samcv> Invocant of method 'path-spec' must be an object instance of type 'CompUnit::Repository::Locally', not a type object of type 'CompUnit::Repository::Staging'.  Did you forget a '.new'

[17:55] <Zoffix> pmurias: well, there are tests in rakudo. I don't know how to test that op in nqp's test suite

[17:56] <Zoffix> ZOFFLOP: t/spec/S17-supply/batch.t

[17:56] <Geth> ¦ nqp: 62550f34de | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[17:56] <Geth> ¦ nqp: [MoarVM Bump] Brings 0 commit

[17:56] <Geth> ¦ nqp:

[17:56] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.04-36-g28f7fe711...2018.04-36-g28f7fe7

[17:56] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/62550f34de

[17:56] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.04-36-g28f7fe711...2018.04-36-g28f7fe7

[17:56] <Geth> ¦ rakudo: 086980d405 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[17:56] <Geth> ¦ rakudo: [NQP Bump] Brings 2 commits

[17:56] <Geth> ¦ rakudo:

[17:56] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.04-13-gadc3bf6c9...2018.04-15-g62550f3

[17:56] <Geth> ¦ rakudo: 62550f3 [MoarVM Bump] Brings 0 commit

[17:56] <Geth> ¦ rakudo: 133e85d Implement nqp::numify op

[17:56] <Geth> ¦ rakudo:

[17:56] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.04-36-g28f7fe711...2018.04-36-g28f7fe7

[17:56] <Zoffix> "Brings 0 commit" :S

[17:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/086980d405

[17:56] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.04-13-gadc3bf6c9...2018.04-15-g62550f3

[17:57] <Zoffix> hm, I notice `git describe` gives 2 fewer numbers on my system than on whoever bumped before

[17:58] <Zoffix> m: say v2018.04-36-g28f7fe711 before v2018.04-36-g28f7fe7

[17:58] <camelia> rakudo-moar 305c1d6c8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3say v2018.7⏏0504-36-g28f7fe711 before v2018.04-36-g28f␤»

[17:58] <Zoffix> m: say Version.new("2018.04-36-g28f7fe711") before Version.new("2018.04-36-g28f7fe7")

[17:58] <camelia> rakudo-moar 305c1d6c8: OUTPUT: «False␤»

[17:58] <Zoffix> m: say Version.new("2018.04-36-g28f7fe711") after Version.new("2018.04-36-g28f7fe7")

[17:58] <camelia> rakudo-moar 305c1d6c8: OUTPUT: «True␤»

[18:01] <Geth> ¦ rakudo: 40d887c8e1 | (Zoffix Znet)++ | 2 files

[18:01] <Geth> ¦ rakudo: Use new nqp::numify op for Num parsing

[18:01] <Geth> ¦ rakudo:

[18:01] <Geth> ¦ rakudo: - Fixes hang in parsing of nums with huge exponens

[18:01] <Geth> ¦ rakudo: - Makes parsing of nums 80%

[18:01] <Geth> ¦ rakudo:

[18:01] <Geth> ¦ rakudo: - Used for parsing Num literals

[18:01] <Geth> ¦ rakudo: - Used in &val which is also used by Str.Numeric

[18:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/40d887c8e1

[18:01] <pmurias> Zoffix: what the difficulty with testing the op in the nqp test suite?

[18:03] <Zoffix> pmurias: because if I use `nqp::numify` I get the NQP's version of it, not the HLL's version of it.

[18:03] <Zoffix> nqp: use nqp; say(nqp::numify(nqp::unbox_s("42e0")))

[18:03] <camelia> nqp-moarvm: OUTPUT: «42␤»

[18:03] <Zoffix> m: use nqp; say(nqp::numify(nqp::unbox_s("42e0")))

[18:03] <camelia> rakudo-moar 305c1d6c8: OUTPUT: «===SORRY!===␤No registered operation handler for 'numify'␤»

[18:03] <Zoffix> ^ so I added a "second" numify that makes it available on HLL

[18:04] <Zoffix> s:g/HLL/rakudo's Perl 6 code/; # I've no idea what HLL means in NQP

[18:16] <Zoffix> dafuq... somehow I lost the num-parser vs nqp::div_In bug

[18:16] <Geth> ¦ roast: zoffixznet++ created pull request #422: [CaR Grant] Test Num/Rat->Num picks closest representable num

[18:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/422

[18:16] <Geth> ¦ roast: b99720b985 | (Zoffix Znet)++ | S02-types/num.t

[18:16] <Geth> ¦ roast: [CaR Grant] Test Num/Rat->Num picks closest representable num

[18:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b99720b985

[18:16] <Geth> ¦ roast: c930cfcb17 | (Zoffix Znet)++ (committed using GitHub Web editor) | S02-types/num.t

[18:16] <Geth> ¦ roast: Merge pull request #422 from perl6/car-grant-num-precision-tests

[18:16] <Geth> ¦ roast:

[18:16] <Geth> ¦ roast: [CaR Grant] Test Num/Rat->Num picks closest representable num

[18:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c930cfcb17

[18:18] <timotimo> Zoffix: HLL can mean different things, one of them is the "hllization" thing that transforms some types into other types at the boundary between perl6 and nqp (so you get an Array rather than a BOOTArray or something)

[18:18] <timotimo> the other thing is a few classes/roles that both NQP and rakudo derive from, mostly as a code sharing measure, like HLL::Compiler

[18:22] <Geth> ¦ rakudo: zoffixznet self-assigned Rat.Num does not choose the closest representable Num https://github.com/rakudo/rakudo/issues/1782

[18:24] <Zoffix> .tell AlexDaniel` and it's the second time it happens that this massive stresstest fallout (mostly precomp tests) occurs and doesn't go away until you nuke all the .precomp dirs (`declutter` command): https://gist.github.com/zoffixznet/43e5db7850fabf397c08cb237262b856

[18:24] <yoleaux> Zoffix: I'll pass your message to AlexDaniel`.

[18:25] <Zoffix> There's definitely some precomp bug lurking

[18:26] <Zoffix> .ask nine do you know if any recent work went in that would cause issues until you blow away .precomp dir? It happened with one of my programs after rakudo upgrade. Here's the second time it happens with my stresstest run where a bunch of tests fail and keep failing until you blow away .precomp dirs (declutter command in the gist): https://gist.github.com/zoffixznet/43e5db7850fabf397c08cb237262b856

[18:26] <yoleaux> Zoffix: I'll pass your message to nine.

[18:28] <Zoffix> ZOFVM: Files=1294, Tests=153324, 154 wallclock secs (21.41 usr  3.10 sys + 3304.94 cusr 163.14 csys = 3492.59 CPU)

[18:30] <Zoffix> m: dd <Inf>

[18:30] <camelia> rakudo-moar 40d887c8e: OUTPUT: «MoarVM panic: Could not spawn thread: errorcode -11␤»

[18:31] <Zoffix> e: dd <Inf>

[18:31] <evalable6> Zoffix, rakudo-moar 40d887c8e: OUTPUT: «NumStr.new(Inf, "Inf")␤»

[18:31] <timotimo> that's not really necessary, eh?

[18:31] <Zoffix> m: dd <Inf>

[18:31] <camelia> rakudo-moar 40d887c8e: OUTPUT: «NumStr.new(Inf, "Inf")␤»

[18:31] <Zoffix> *phew* I guess it was just a camelia glitch.

[18:33] <brrt> .

[18:33] <yoleaux> 27 Apr 2018 16:58Z <Zoffix> brrt: Luke Jit Walker results: https://irclog.perlgeek.de/perl6-dev/2018-04-27#i_16103228

[18:33] <yoleaux> 27 Apr 2018 17:55Z <nine> brrt: csv-ip5xs.pl performance is well within noise.

[18:33] <yoleaux> 27 Apr 2018 23:31Z <MasterDuke> brrt: i didn't see any noticeable difference running Tux's test-t and test-t --race scripts on the jit-stack-walker branch

[18:34] <brrt> .ask Zoffix what commit of the stack walker were you running?

[18:34] <yoleaux> brrt: I'll pass your message to Zoffix.

[18:34] <brrt> i've fixed a bug since

[18:34] <brrt> .tell nine that is unfortunate, but after some thought, not unexpected, since I don't think that test exercises the JIT particularly hard

[18:34] <yoleaux> brrt: I'll pass your message to nine.

[18:34] <Zoffix> good question... IIRC I just ran `git checkout jit-stack-walker`

[18:34] <yoleaux> 18:34Z <brrt> Zoffix: what commit of the stack walker were you running?

[18:34] <brrt> yeah, and i fixed a bug soon after i asked you all

[18:35] <Zoffix> Oh

[18:35] <Zoffix> Well, then disregard my results :)

[18:35] <brrt> so there may have been a race condition. I'm kind of hoping there was

[18:35] <brrt> no no, I want to be sure :-)

[18:35] <brrt> i had a clean spectest myself, but that proves nothing

[18:36] <Zoffix> brrt: can you merge master into it? Latest and greatest MoarVM is needed for some of the new stresstests

[18:36] <Zoffix> Oh

[18:36] <Zoffix> Nm, I think that fix was like from 2 days ago

[18:36] <Zoffix> lemme run and see

[18:37] <brrt> i think i've rebased it

[18:38] <brrt> oh, i'm not entirely up-to-date

[18:43] <Zoffix> brrt: can't get past make test: https://gist.github.com/zoffixznet/8ff7fe90dcefef9fc8ee92bbc2eacac3

[18:44] <brrt> let me try that out

[18:49] <AlexDaniel`> .

[18:49] <yoleaux> 17:48Z <Zoffix> AlexDaniel`: I noticed one or two people having issues after upgrading rakudo and then nuking lib/.precomp fixed the problem. I just had the same myself: https://irclog.perlgeek.de/perl6-dev/2018-04-28#i_16107270  Looks like some recent commits broke precomp-renewal-detector or whatever. IIRC before upgrade I was on 2018.03-63 or -68 something in the 60s

[18:49] <yoleaux> 17:51Z <Zoffix> AlexDaniel`: the only commit I see in src/core/CompUnit in that range is this :S https://github.com/rakudo/rakudo/commit/9bcc8e523e72e137db10e1b5f01ed9116d33ac2f

[18:49] <yoleaux> 18:24Z <Zoffix> AlexDaniel`: and it's the second time it happens that this massive stresstest fallout (mostly precomp tests) occurs and doesn't go away until you nuke all the .precomp dirs (`declutter` command): https://gist.github.com/zoffixznet/43e5db7850fabf397c08cb237262b856

[18:50] <brrt> .ask Zoffix - did you run --reconfig on the jit stack walker branch

[18:50] <yoleaux> brrt: I'll pass your message to Zoffix.

[18:50] <brrt> or make reconfig

[18:51] <brrt> we need a bunch of different flags for the stack walker to work

[18:52] <Zoffix> brrt: no, I just ran this: https://github.com/zoffixznet/z/blob/master/lib/RDev.pm6#L219-L224

[18:52] <AlexDaniel> yeah I think I had a related problem to this .precomp issue

[18:53] <AlexDaniel> and I'm pretty sure it appeared after 2018.04, but I could be wrong

[18:53] <Geth> ¦ roast: f89f980505 | (Zoffix Znet)++ | S02-types/num.t

[18:53] <Geth> ¦ roast: Cover hangs in parsing of Nums with huge exponents

[18:53] <Geth> ¦ roast:

[18:53] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/40d887c8e1

[18:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f89f980505

[18:54] <AlexDaniel> Zoffix: sorry, what's ｢declutter｣?

[18:54] <Zoffix> $ type declutter

[18:54] <Zoffix> declutter is aliased to `rm -fr **/.precomp'

[18:54] <AlexDaniel> right

[18:54] <AlexDaniel> ok

[18:55] <AlexDaniel> Zoffix: although… don't you need to also wipe ~/.perl6/precomp ?

[18:56] <brrt> oh, that should've been good enough though

[18:57] <Zoffix> AlexDaniel: don't know

[18:57] <Zoffix> AlexDaniel: anyway. The num stuff is fixed now.

[18:57] <AlexDaniel> oh

[18:57] <AlexDaniel> dat bump tho https://github.com/perl6/nqp/commit/62550f34deeb5020b450188f1b656be9c30fa5dd

[18:58] <Zoffix> yeah, the script relied on not bumping if it can't commit the MOAR_VERSION but this time it could because apparently git describe gives different-length tags

[18:58] <Zoffix> need to make it detect this stuff better

[19:00] <AlexDaniel> Zoffix: alright, so I cherry-pick https://github.com/perl6/nqp/commit/133e85df43ac8bbcbb3971f230f1202d417a3d6d and https://github.com/rakudo/rakudo/commit/40d887c8e17715d2d94e09a42493f02c5efe868c , correct?

[19:01] <Zoffix> AlexDaniel: we also gonna need a MoarVM point release

[19:01] <AlexDaniel> oh how wonderful

[19:01] <Zoffix> :}

[19:02] <AlexDaniel> Zoffix: wait, why?

[19:02] * AlexDaniel is trying to understand

[19:02] <Zoffix> AlexDaniel: this stuff https://github.com/MoarVM/MoarVM/pull/850

[19:02] <Zoffix> c: 2018.03 say 5e-324

[19:02] <committable6> Zoffix, ¦2018.03: «0␤»

[19:02] <Zoffix> lol

[19:03] <Zoffix> Well, otherwise we gonna lose all the precision/denormals fixes

[19:03] <AlexDaniel> riiiiight

[19:03] <AlexDaniel> okay I see now

[19:03] <brrt> Zoffix: can't replicate :-(

[19:03] <Zoffix> And I'm guessing there's by now a ton of stresstests covering those fixes

[19:03] <AlexDaniel> samcv: hello, you there? :)

[19:03] <samcv> yep

[19:04] <Zoffix> brrt: ¯\_(ツ)_/¯  can't replicate then ignore :) It could be just my system

[19:04] <AlexDaniel> samcv: so, some discussion ↑ about the point release

[19:04] <AlexDaniel> samcv: we'll have to do it, including moarvm point release

[19:04] <samcv> ok let me look. pretty jetlagged atm

[19:05] <samcv> looking forward to tonight

[19:05] <Zoffix> samcv: FWIW there's also some precomp issue that's showing up; dunno if we're gonna look into it before the point release or not.

[19:05] <samcv> ok so is this related to the numification?

[19:05] <AlexDaniel> yeah

[19:06] <Zoffix> samcv: no, it's something different that just recently got noticed

[19:06] <samcv> ok. then maybe we want to make a new branch of moarvm and then cherry pick the needed moarvm changes to that?

[19:06] <Zoffix> .oO( I hope it's not related to numification )

[19:06] <samcv> oh

[19:06] <brrt> that's not how i roll though :-) something is broken, it better be fixed

[19:06] <AlexDaniel> well, the point release is related to numification… that's what I meant xD

[19:06] <samcv> ah ok

[19:07] <samcv> i think we should make a moarvm branch to do the point release and only use the commits we need to make the fixes

[19:07] <AlexDaniel> yes

[19:07] <AlexDaniel> that's correct

[19:07] <AlexDaniel> same for nqp/rakudo

[19:07] <samcv> ok cool :) we both thought similarly

[19:09] <AlexDaniel> samcv: here's how I see it. If you make a branch with all needed commits, I'd be able to create a prerelease and test that

[19:10] <samcv> so on moarvm do we just need these commits https://github.com/MoarVM/MoarVM/pull/850

[19:10] <AlexDaniel> samcv: so just pause before making the tag and other final steps, so that we just have a branch we required commits that we can work with

[19:10] <samcv> okay cool. let me make a branch

[19:12] <AlexDaniel> with*

[19:14] <Zoffix> samcv: FWIW you said you had an issue with JVM build earlier. Just built it on my box and it built fine

[19:14] <Zoffix> uh...

[19:15] <Zoffix> don't see a perl6-j or it building jvm rakudo in the log..

[19:16] * Zoffix nukes and re-tries

[19:19] <Zoffix> Creating tools/build/install-jvm-runner.pl ...

[19:20] <Zoffix> Can't exec "/home/cpan/J/install/bin/moar": No such file or directory at tools/lib/NQP/Configure.pm line 293.

[19:20] <Zoffix> Do I really have to have moarvm installed to install JVM NQP or is this my build script glitching?

[19:22] <samcv> Zoffix: i think i've encountered the same thing. you need moarvm i *think*?

[19:22] <Zoffix> Ah, it's buildscript

[19:23] <Zoffix> (Bool :$moar = True) { ... my $backends = join ',', ('moar' with $moar), ('jvm' with $jvm); }

[19:23] <Zoffix> (even if I set moar to false it's still defined

[19:23] <Zoffix> https://xkcd.com/1319/

[19:24] <samcv> AlexDaniel: see if this works https://github.com/MoarVM/MoarVM/tree/2018.04.1

[19:24] <samcv> has those two commits from that Zoffix PR you linked

[19:24] <Zoffix> (by buildscript I meant ZScript, not the nqp's build tools)

[19:26] <japhb> Are any of the #perl6-dev folk in the Ireland or NYC areas in the next few weeks?  I'm going to be travelling to those areas ...

[19:26] <AlexDaniel> samcv: maybe it's not the best idea to name the branch identically to the upcoming tag

[19:26] <AlexDaniel> but I actually don't know if it affects anything

[19:27] <AlexDaniel> the branch should be merged back into master anyway, and can be deleted later

[19:27] <samcv> AlexDaniel: well. those commits are already in master right?

[19:27] <samcv> but yeah we can delete the branch after tagging if we want

[19:27] <samcv> maybe should move the branch to be named differently than the tag

[19:28] <AlexDaniel> samcv: yes, but then you'll have some extra commits for VERSION and maybe changelog

[19:28] <AlexDaniel> and you'd have to get these back into master anyway, so instead of cherry-picking you can just merge

[19:28] <AlexDaniel> as a bonus you can then delete the branch without getting a dangling tag :)

[19:29] <El_Che> tag and branches are usued as synonyms by a lot of tools

[19:29] <El_Che> (including mine)

[19:29] <samcv> AlexDaniel: ah i see what you mean. we can merge i suppose after the 2018.04.1 release. (i am guessing that's what you mean?)

[19:29] <AlexDaniel> samcv: yes

[19:30] <samcv> AlexDaniel: what should we name the branch? is 2018.04.1-branch ok?

[19:31] <AlexDaniel> in rakudo I am actually using release/2018.04.1

[19:31] <AlexDaniel> (that's right, with a slash)

[19:31] <AlexDaniel> but any name will do, it's just a branch

[19:37] <Zoffix> But rakudo build now fails... "Unable to read configuration from NQP on MoarVM"

[19:38] <samcv> AlexDaniel: i have pushed to release/2018.04.1 on MoarVM and deleted the previout '2018.04.1' branch

[19:38] <AlexDaniel> 👍

[19:40] <Zoffix> oh, it's another bug in ZScript "$rd.build-rakudo :$test, :$jvm, :$moar;"

[19:40] <Zoffix> Wonder if this should warn

[19:41] <Zoffix> m: my $o := class Z { method z (:$a, :$b) { dd [$a, $b ] } }.new; $o.z :$a, :$b

[19:41] <camelia> rakudo-moar 40d887c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3:$a, :$b) { dd [$a, $b ] } }.new; $o.z :7⏏5$a, :$b␤»

[19:41] <Zoffix> m: my $o := class Z { method z (:$a, :$b) { dd [$a, $b ] } }.new; $o.z :a, :b

[19:41] <camelia> rakudo-moar 40d887c8e: OUTPUT: «WARNINGS for <tmp>:␤Useless use of ":b" in sink context (lines 1, 1)␤[Bool::True, Any]␤»

[19:41] <Zoffix> Oh it does..

[19:41] <Zoffix> m: sub foo { my $o := class Z { method z (:$a, :$b) { dd [$a, $b ] } }.new; $o.z :a, :b }; foo

[19:41] <camelia> rakudo-moar 40d887c8e: OUTPUT: «[Bool::True, Any]␤»

[19:41] <Zoffix> But not in this context

[19:43] <Zoffix> Ah, it's right here. It just ends up returning a list

[19:43] <Zoffix> m: sub foo { my $o := class Z { method z (:$a, :$b) { dd [$a, $b ] } }.new; $o.z :a, :b }; dd foo

[19:43] <camelia> rakudo-moar 40d887c8e: OUTPUT: «[Bool::True, Any]␤(Nil, :b)␤»

[19:43] <Zoffix> yeah. Oh well.

[19:47] <Zoffix> $ ./perl6-j -v

[19:47] <Zoffix> This is Rakudo version 2018.04-25-g40d887c built on JVM

[19:47] <Zoffix> finally. Yeah, it still builds

[19:48] <Zoffix> and S32-num/stress.t passes

[20:14] <Zoffix> (tried to repro precomp issue by installing 2018.03 from scratch, then upgrading to master; but no issue occured)

[20:14] <Zoffix> At least if it happens to the user, we can just tell them to blow precomp, so it's not that important to find and fix it before release.

[20:17] <lizmat> Zoffix: seems HEAD currently has borked mi6 again

[20:18] <Zoffix> lizmat: what's the failure?

[20:18] <lizmat> hmmm...lemme double check

[20:19] <Zoffix> And how to reproduce it (I see the module got no tests)

[20:19] <lizmat> it was probably because a previous "mi6 new" failed because of .. dunno

[20:20] <lizmat> but then I saw fresh commits in rakudo, pulled, built then did the mi6 new again

[20:20] <lizmat> and that failed.

[20:20] <lizmat> nuked the dir, tried again, success

[20:21] <Zoffix> ===> Building [FAIL]: HTTP::Tinyish:ver<0.1.0>

[20:21] <Zoffix> Aborting due to build failure: HTTP::Tinyish:ver<0.1.0> (use --force-build to override)

[20:21] <lizmat> FWIW, the previous setting build failed in make install with: No such method 'install' for invocant of type 'ValueObjAt'

[20:21] <Zoffix> full output: https://gist.github.com/zoffixznet/b64e2e5ec30ec8153cc7a2436c6f3e88

[20:21] <lizmat> in block <unit> at tools/build/install-core-dist.pl line 28

[20:22] <lizmat> Zoffix: could you locally revert 0d216befba336b1cd7a0b424 and see if that makes a difference ?

[20:26] <Zoffix> lizmat: nope, fails the same

[20:27] <lizmat> :-(  then I have no idea

[20:27] <Zoffix> I think it's the legacy build system that fails. In the output I see this:

[20:27] <Zoffix> Building with plugin: Zef::Service::Shell::LegacyBuild+{<anon|1>}

[20:27] <Zoffix> Command: /home/cpan/rakudo/install/bin/perl6 -Ilib -e require '/tmp/tmp.gVZtZYofKl/Build.pm'; ::('Build').new.build('/tmp/tmp.gVZtZYofKl') ?? exit(0) !! exit(1);

[20:27] <brrt> lizmat: have you tried the jit-stack-walker branch yet? I know you're on macOS so i'm keen to know if stuff builds correctly

[20:28] <Zoffix> And Build.pm script is this: https://gist.github.com/zoffixznet/4d8baa08c834ed2159fb6a77560906d4

[20:28] <Zoffix> It never returns a successful status

[20:31] <Zoffix> Filed as https://github.com/ugexe/zef/issues/247

[20:33] <Zoffix> And if I edit Build.pm6 to return true and install HTTP::Tinyish and then install App::Mi6, it seems to work fine. `mi6 new Meows` doesn't crash or anything

[20:35] <Zoffix> FWIW that's still on the build with 0d216befba336b1cd7a0b424 reverted

[20:36] * Zoffix unreverts and tries again

[20:38] <Zoffix> shit exploded

[20:38] <Zoffix> No such method 'install' for invocant of type 'Str'

[20:38] <Zoffix> in block <unit> at tools/build/install-core-dist.pl line 28

[20:38] <Zoffix> And tons of maketest failures: https://gist.github.com/zoffixznet/916d83fdcd2e281148a99c3258bd2a19

[20:43] <Zoffix> Second run failed too: https://gist.github.com/zoffixznet/66168f8fd3eb58eef7328fb54b737baa

[20:43] * Zoffix nukes .precomp dirs and bets it'll build now

[20:46] <Zoffix> yup

[20:48] <Geth> ¦ nqp/release/2018.04.1+: 5 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++, (Zoffix Znet)++

[20:48] <Geth> ¦ nqp/release/2018.04.1+: 1e291c8a03 | [MoarVM Bump] Brings 2 commits

[20:48] <Geth> ¦ nqp/release/2018.04.1+: 8d16807f02 | Cover denormals and num value drift bugs

[20:48] <Geth> ¦ nqp/release/2018.04.1+: 619bf688c5 | Use original string num in test desc

[20:48] <Geth> ¦ nqp/release/2018.04.1+: 9e4edf9893 | Test we can handle fancy unicode nums

[20:48] <Geth> ¦ nqp/release/2018.04.1+: 04918ab66a | Implement nqp::numify op

[20:48] <Geth> ¦ nqp/release/2018.04.1+: review: https://github.com/perl6/nqp/compare/afb18b4bb7bd...04918ab66a85

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: cc93bc9ad3 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: [NQP Bump] Brings 5 commits

[20:49] <Geth> ¦ rakudo/release/2018.04.1+:

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: NQP bump brought: https://github.com/perl6/nqp/compare/2018.04...2018.04-5-g04918ab66

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: 04918ab Implement nqp::numify op

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: 9e4edf9 Test we can handle fancy unicode nums

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: 619bf68 Use original string num in test desc

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: 8d16807 Cover denormals and num value drift bugs

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: <…commit message has 5 more lines…>

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: review: https://github.com/rakudo/rakudo/commit/cc93bc9ad3

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: 4e38bc1f84 | (Zoffix Znet)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | 2 files

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: Use new nqp::numify op for Num parsing

[20:49] <Geth> ¦ rakudo/release/2018.04.1+:

[20:49] <lizmat> Zoffix: that smells like the problem I saw, but I didn't need to nuke install, just get a fresh pull

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: - Fixes hang in parsing of nums with huge exponens

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: - Makes parsing of nums 80%

[20:49] <Geth> ¦ rakudo/release/2018.04.1+:

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: - Used for parsing Num literals

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: - Used in &val which is also used by Str.Numeric

[20:49] <Geth> ¦ rakudo/release/2018.04.1+: review: https://github.com/rakudo/rakudo/commit/4e38bc1f84

[20:50] <samcv> i gotta go to bed right now. will be back in the morning CEST time

[20:51] <Zoffix> \o

[20:51] <Zoffix> lizmat: and the pull brought fresh commits?

[20:52] <AlexDaniel> samcv: rest well

[20:52] <lizmat> Zoffix: yes

[20:52] <lizmat> required a reconfigure, so that may have had something to do with it as well

[20:53] <Zoffix> Filed what I know about the issue so far R#1783

[20:53] <synopsebot> R#1783 [open]: https://github.com/rakudo/rakudo/issues/1783 New sporatic explosions likely related to precomp

[20:55] <AlexDaniel> +1 for creating a ticket

[21:01] <Zoffix> Oh, awesome. Reproed

[21:02] * Zoffix tries repro a 3rd time to make sure it's not a fluke

[21:08] <El_Che> it looks it's gonna be a nice dot release :)

[21:09] <Zoffix> nice? It's just fixing a bug

[21:09] <Zoffix> ZofBot: dot releases aren't nice

[21:09] * Zoffix misses zofbot

[21:14] <AlexDaniel> well, point releases are certainly better than main ones :)

[21:14] <AlexDaniel> maybe except for 2017.04.* ones

[21:14] <Zoffix> Wow it's been a year already

[21:14] <Zoffix> time flies

[21:15] <AlexDaniel> indeed

[21:15] <Zoffix> Got the steps to repro the precomp issue, if anyone's able to verify: https://github.com/rakudo/rakudo/issues/1783#issuecomment-385205863

[21:15] <Zoffix> (kinda lengthy; need to sit throuigh 3 build cycles)

[21:17] <lizmat> Zoffix: trying to repro

[21:19] <MasterDuke> same here

[21:23] <Zoffix> Got "No such method 'install' for invocant of type 'ValueObjAt'" as a failure this time

[21:24] <lizmat> yeah, I've seen that one as well

[21:25] <Zoffix> .tell nine the problem I mentioned in earlier bot message now has an Issue with repro instructions for it: https://github.com/rakudo/rakudo/issues/1783#issuecomment-385205863

[21:25] <yoleaux> Zoffix: I'll pass your message to nine.

[21:34] <MasterDuke> final build had lots of test failures, and `make install` died with `Too few positionals passed; expected 2 arguments but got 1   in block <unit> at tools/build/install-core-dist.pl line 17`

[21:35] <lizmat> Zoffix: confirmed, my error is: No such method 'install' for invocant of type 'Str'

[21:35] <lizmat> in block <unit> at tools/build/install-core-dist.pl line 28

[21:35] <lizmat> and many make test errors

[21:37] <Zoffix> Awesome \o/

[21:55] <MasterDuke> https://www.innoq.com/en/blog/native-clojure-and-graalvm/ interesting article re Graal and the JVM

[22:40] <Kaiepi> what the fuck my os couldn't clear /tmp on boot because running make html with perl 6's docs left over 100k files in /tmp

[22:46] <Kaiepi> perl6 -e 'unlink $*CWD.dir.grep(/ \/tmp\/ \w ** 10 /)>>.Str' did the job nicely though

[22:47] <Kaiepi> is this intended or should i make an issue about it?

[22:47] <El_Che> Kaiepi: why are you writing in /tmp?

[22:48] <Kaiepi> what do you mean?

[22:48] <Kaiepi> they were temp files from running make html in doc

[22:48] <El_Che> on some oses /tmp is ram

[22:48] <El_Che> on some disk

[22:49] <El_Che> so not very portable

[22:50] <Kaiepi> htmlify.p6 uses it by default since it doens't specify a dir to put the files in

[22:51] <AlexDaniel> El_Che: alright, so there's a prerelease tar

[22:51] <El_Che> it should be /vat/tmp then (although that would doesn't get cleaned)

[22:51] <Kaiepi> m: say $*TMPDIR

[22:51] <camelia> rakudo-moar 40d887c8e: OUTPUT: «"/tmp".IO␤»

[22:51] <El_Che> dilemmas :)

[22:51] <El_Che> AlexDaniel++

[22:52] <AlexDaniel> El_Che: do I just click restart for all targets in the canary repo?

[22:52] <AlexDaniel> in travis I mean

[22:52] <El_Che> yes

[22:54] <El_Che> AlexDaniel: the images are in the docker hub registry, so runs will be faster (I'll change the .travis.yml tomorrow)

[22:54] <El_Che> it's the LOCAL_BUILD var that must be empty

[22:55] <AlexDaniel> aaaah I did it a bit wrong

[22:55] <AlexDaniel> I forgot

[22:55] <AlexDaniel> okay

[22:55] * AlexDaniel restarts his thing

[22:58] <AlexDaniel> alright, I'll run toaster too

[23:00] <AlexDaniel> ooh… oops, ok

[23:00] <Kaiepi> what about making a tmp dir in the same dir as htmlify.p6?

[23:01] <Kaiepi> idk if it sent or not but /var/tmp and /tmp aren't compatible with windows

[23:03] <Geth> ¦ rakudo/release/2018.04.1+: c317d22e72 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[23:03] <Geth> ¦ rakudo/release/2018.04.1+: Fix nqp version

[23:03] <Geth> ¦ rakudo/release/2018.04.1+:

[23:03] <Geth> ¦ rakudo/release/2018.04.1+: Oops, rebasing too much.

[23:03] <Geth> ¦ rakudo/release/2018.04.1+: review: https://github.com/rakudo/rakudo/commit/c317d22e72

[23:04] <Kaiepi> anyway i'll make an issue about this once i figure out whether make html always does this or if it's just when it gets killed

[23:06] * lizmat gets some sleep

[23:07] <Kaiepi> night
