[00:16] <Geth> ¦ rakudo: e509c1a9fd | (Zoffix Znet)++ | 2 files

[00:16] <Geth> ¦ rakudo: Propagate `--optimize` flag to EVAL code [+ Tests]

[00:16] <Geth> ¦ rakudo:

[00:16] <Geth> ¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1382

[00:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e509c1a9fd

[00:18] <Geth> ¦ rakudo: 376d98800e | (Zoffix Znet)++ | t/05-messages/02-errors.t

[00:18] <Geth> ¦ rakudo: Add clarification on how the test works

[00:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/376d98800e

[01:22] <travis-ci> Rakudo build failed. usev6 'Chain negated operators on MoarVM only

[01:22] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/326997286 https://github.com/rakudo/rakudo/compare/b688d4393555...e820f3091126

[01:22] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[03:47] <Geth> ¦ rakudo: f02606cea4 | (Zoffix Znet)++ | 2 files

[03:48] <Geth> ¦ rakudo: Fix useless useless-use warning with phasers [+Tests]

[03:48] <Geth> ¦ rakudo:

[03:48] <Geth> ¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1319

[03:48] <Geth> ¦ rakudo:

[03:48] <Geth> ¦ rakudo: Since the block's return value is used to decide whether the phaser fires,

[03:48] <Geth> ¦ rakudo: it's never useless, even if sunk. Disable warnings in those cases.

[03:48] <Geth> ¦ rakudo:

[03:48] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[03:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f02606cea4

[04:20] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Don't allow binding into a List, period

[04:20] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327024101 https://github.com/rakudo/rakudo/compare/e820f3091126...eed54caef5fd

[05:12] <travis-ci> Rakudo build passed. Zoffix Znet 'Propagate `--optimize` flag to EVAL code [+ Tests]

[05:12] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327050964 https://github.com/rakudo/rakudo/compare/eed54caef5fd...e509c1a9fdd5

[06:23] <travis-ci> Rakudo build passed. Zoffix Znet 'Add clarification on how the test works'

[06:23] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327051262 https://github.com/rakudo/rakudo/compare/e509c1a9fdd5...376d98800e2d

[07:11] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix useless useless-use warning with phasers [+Tests]

[07:11] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327089777 https://github.com/rakudo/rakudo/compare/376d98800e2d...f02606cea4d4

[09:22] <lizmat> Files=1231, Tests=75919, 344 wallclock secs (14.96 usr  5.44 sys + 2369.56 cusr 245.75 csys = 2635.71 CPU)

[09:22] <yoleaux> 01:14Z <Zoffix> lizmat: you had some interest in the module. The first baby version got released as CoreHackers::Q: https://github.com/zoffixznet/q

[11:19] <Geth> ¦ rakudo: 7230b76514 | (Jonathan Worthington)++ | src/core/Supply.pm

[11:19] <Geth> ¦ rakudo: Slightly speed up adding of `whenever`s

[11:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7230b76514

[11:46] <dogbert2_> m: say Any.skip(*-1) # is this something that should be fixed or should I change the docs?

[11:46] <camelia> rakudo-moar 7230b7651: OUTPUT: «Cannot resolve caller tail(Any: Int); none of these signatures match:␤    (Any:D $: *%_)␤    (Any:D $: $n, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[11:50] <lizmat> feels like a bug to me: Any should be considered a 1 element list in that context

[11:50] <lizmat> so please make an issue

[11:53] <|Tux|> Rakudo version 2017.12-156-g7230b7651 - MoarVM version 2017.12-22-gc2de234c4

[11:53] <|Tux|> csv-test-xs-20      0.425 -  0.443

[11:53] <|Tux|> csv-ip5xs           1.095 -  1.102

[11:53] <|Tux|> test-t --race       1.151 -  1.235

[11:53] <|Tux|> test-t              2.794 -  2.833

[11:53] <|Tux|> test               11.271 - 11.352

[11:53] <|Tux|> csv-parser         12.171 - 12.188

[11:53] <|Tux|> csv-ip5xs-20       12.792 - 12.837

[11:53] <|Tux|> test-t-20 --race   16.922 - 17.859

[11:54] <|Tux|> test-t-20          50.230 - 51.373

[11:54] <dogbert2_> lizmat: coming up ...

[11:55] <dogbert2_> test-t below 2.8, cool

[11:58] <dogbert2_> lizmat: https://github.com/rakudo/rakudo/issues/1384

[12:00] <lizmat> dogbert2_

[12:00] <lizmat> ack

[12:00] <lizmat> :-)

[12:59] <Geth> ¦ rakudo: 773d2b9e7b | (Jonathan Worthington)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[12:59] <Geth> ¦ rakudo: Refactor to bring Block.clone below inline limit

[12:59] <Geth> ¦ rakudo:

[12:59] <Geth> ¦ rakudo: Mostly by moving a rarely needed path out into a separate method.

[12:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/773d2b9e7b

[13:05] <lizmat> jnthn: would there be more places in the Bootstrap that could benefit from this type of modification ?

[13:11] <jnthn> Can't immediately think of any

[13:11] <El_Che> Any?

[13:11] <El_Che> :)

[13:11] <jnthn> Note that the change I put into MoarVM to allow some cross-HLL inlining helps all of them though

[13:11] <lizmat> looks like this nibbles a few msecs of test-t

[13:14] <jnthn> Every little helps :)

[13:27] <jnthn> lizmat: I'm assuming you bumped your MoarVM before measuring also? :)

[13:27] <jnthn> (Since that patch will barely help at all otherwise)

[13:27] <lizmat> ah, no, i didn't

[13:30] <jnthn> ah, so perhaps there will be more improvement :)

[13:53] <Geth> ¦ nqp: 16db266e21 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[13:53] <Geth> ¦ nqp: [MoarVM Bump] Brings 2 commits

[13:53] <Geth> ¦ nqp:

[13:53] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2017.12-22-gc2de234...2017.12.1-24-gdb706bb

[13:53] <Geth> ¦ nqp: db706bb Allow some cross-HLL inlining

[13:53] <Geth> ¦ nqp: ac123bb Refuse to make release with dirty work tree

[13:53] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/16db266e21

[13:53] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.12-22-gc2de234...2017.12.1-24-gdb706bb

[13:53] <Geth> ¦ rakudo: 8c5af9b979 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[13:53] <Geth> ¦ rakudo: [NQP Bump] Brings 5 commits

[13:53] <Geth> ¦ rakudo:

[13:53] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2017.12-44-gec34571...2017.12-49-g16db266

[13:53] <Geth> ¦ rakudo: 16db266 [MoarVM Bump] Brings 2 commits

[13:53] <Geth> ¦ rakudo: 0423d29 [js] Mention that we have some code adapted from iconv-lite

[13:53] <Geth> ¦ rakudo: dd15d19 Add tests for nqp::encoderep and the windows-1252 encoding

[13:53] <Geth> ¦ rakudo: fc728ac [js] Improve encoding support

[13:53] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[13:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8c5af9b979

[13:53] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-44-gec34571...2017.12-49-g16db266

[13:57] <jnthn> Aww, that missed the latest commit :)

[14:08] <travis-ci> NQP build failed. Zoffix Znet '[MoarVM Bump] Brings 2 commits

[14:08] <travis-ci> https://travis-ci.org/perl6/nqp/builds/327238667 https://github.com/perl6/nqp/compare/0423d294b851...16db266e21ce

[14:11] <timotimo> Error while compiling op encoderep (source text: "nqp::encoderep('åfooåbar', 'ascii', 'XXX', $buf8.new)"), no registered operation handler

[14:11] <timotimo> didn't that just get fixed or implemented or something?

[14:13] <timotimo> ah, tests for js were added

[14:37] <Geth> ¦ nqp: 657a9514f6 | pmurias++ | 2 files

[14:37] <Geth> ¦ nqp: [jvm] Implement nqp::encoderep

[14:37] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/657a9514f6

[14:38] <pmurias> timotimo: sorry, forgot to push the commit implementing it on the JVM

[14:38] <timotimo> ah! :)

[15:06] <Geth> ¦ nqp: dfa8a234ca | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[15:06] <Geth> ¦ nqp: [MoarVM Bump] 1e2a3fb Place facts on a `clone` op

[15:06] <Geth> ¦ nqp:

[15:06] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2017.12.1-24-gdb706bb...2017.12.1-25-g1e2a3fb

[15:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/dfa8a234ca

[15:06] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.12.1-24-gdb706bb...2017.12.1-25-g1e2a3fb

[15:06] <Geth> ¦ rakudo: a0486e5481 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[15:06] <Geth> ¦ rakudo: [NQP Bump] Brings 2 commits

[15:06] <Geth> ¦ rakudo:

[15:06] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2017.12-49-g16db266...2017.12-51-gdfa8a23

[15:06] <Geth> ¦ rakudo: dfa8a23 [MoarVM Bump] 1e2a3fb Place facts on a `clone` op

[15:06] <Geth> ¦ rakudo: 657a951 [jvm] Implement nqp::encoderep

[15:06] <Geth> ¦ rakudo:

[15:06] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2017.12.1-24-gdb706bb...2017.12.1-25-g1e2a3fb

[15:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a0486e5481

[15:06] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-49-g16db266...2017.12-51-gdfa8a23

[15:26] <travis-ci> NQP build failed. Zoffix Znet '[MoarVM Bump] 1e2a3fb Place facts on a `clone` op

[15:26] <travis-ci> https://travis-ci.org/perl6/nqp/builds/327268319 https://github.com/perl6/nqp/compare/657a9514f668...dfa8a234ca62

[15:36] <Zoffix> What's the second argument in `wanted` used for? Just an annotation if we ever need to track what wants a thing?

[15:40] <Zoffix> failed nqp is "t/concurrency/03-semaphore.t" flop in one of the runs

[15:55] <jnthn> Grr, will have to try and reproduce that

[15:55] <jnthn> It'll probably turn out to be a faulty test

[16:07] <Geth> ¦ rakudo: fa136be2ca | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[16:07] <Geth> ¦ rakudo: Wantify arglist in postcircumfix:sym<( )>

[16:07] <Geth> ¦ rakudo:

[16:07] <Geth> ¦ rakudo: Fixes 131502: https://rt.perl.org/Public/Bug/Display.html?id=131502

[16:07] <Geth> ¦ rakudo:

[16:07] <Geth> ¦ rakudo: Not 100% sure this is the right place for the want, since ticket

[16:07] <Geth> ¦ rakudo: affects only WhateverCode's code in the args and, say,

[16:07] <Geth> ¦ rakudo: `-> $ {  }(* == 42, -> $a { $a == 70 })` will warn only about

[16:08] <Geth> ¦ rakudo: the `==` in WhateverCode, not the one in the block.

[16:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fa136be2ca

[16:08] <dogbert2_> Zoffix: seems to be test #12 in the file you mentioned

[16:09] <Geth> ¦ roast: 754e377b53 | (Zoffix Znet)++ | S02-types/whatever.t

[16:09] <Geth> ¦ roast: Unfudge now-passing useless-useless warning

[16:09] <Geth> ¦ roast:

[16:09] <Geth> ¦ roast: RT#131502: https://rt.perl.org/Public/Bug/Display.html?id=131502

[16:09] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/fa136be2ca

[16:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/754e377b53

[16:09] <synopsebot> RT#131502 [open]: https://rt.perl.org/Ticket/Display.html?id=131502 [BUG] Incorrect useless use warning when WhateverCode is passed as arg to Callable

[16:14] <Geth> ¦ rakudo: 6e13bfa29b | (Jonathan Worthington)++ | src/core/Array.pm

[16:14] <Geth> ¦ rakudo: Try to factor fast path out of ASSIGN-POS

[16:14] <Geth> ¦ rakudo:

[16:14] <Geth> ¦ rakudo: This gets it much closer to the inline size limit, though still a bit

[16:14] <Geth> ¦ rakudo: over.

[16:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6e13bfa29b

[16:33] <lizmat> jnthn: would getting rid of a stmts block help ?

[16:38] <pmurias> jnthn: do you think \x[FFFFFF] is something that should be valid?

[16:39] <jnthn> lizmat: No

[16:40] <jnthn> lizmat: It doesn't compile into anything

[16:40] <jnthn> It's just a grouping construct

[16:40] <jnthn> pmurias: That's out of range, I'd think

[16:40] <lizmat> ok

[16:40] <jnthn> m: say "\xFFFFFF"

[16:40] <camelia> rakudo-moar 6e13bfa29: OUTPUT: «Error encoding UTF-8 string: could not encode codepoint 16777215 (0xFFFFFF), codepoint out of bounds. Cannot encode higher than 1114111 (0x10FFFF)␤  in block <unit> at <tmp> line 1␤␤»

[16:40] <jnthn> m: my $x = "\xFFFFFF"

[16:40] <camelia> rakudo-moar 6e13bfa29: ( no output )

[16:41] <jnthn> I guess we can represent it internally but never encode it to anything, which is...a bit pointless. :) I'd check with samcv++ though.

[16:41] <samcv> good * jnthn

[16:45] <jnthn> o/ samcv

[16:45] <jnthn> samcv: Don't suppose you know off-hand what the right thing to do with things like \xFFFFFF is?

[16:45] <jnthn> (At present we accept it in a Str but then blow up if ever encoding it)

[16:48] <lizmat> jnthn: re ASSIGN-POS, the only way I see to make that smaller still, is to make vivication also a slow path

[16:48] <jnthn> Yeah, that'd make it about useless, alas

[16:49] <lizmat> well, not necessarily, but a lot less, indeed

[16:49] <lizmat> I mean, @a[0]++ would still go through the ASSIGN-POS path, no ?

[16:49] <jnthn> That goes through AT-POS

[16:49] <lizmat> yeah, right  :-(

[16:50] <jnthn> Which is now very, very, very close but just over the inline limit

[16:50] <jnthn> (Like, a dozen bytes or so)

[16:51] <lizmat> and if we turn the first nqp::assign into a private method call?

[16:51] <lizmat> guess not, eh?

[16:52] <jnthn> No, assign is a VM level op

[16:52] <jnthn> So it's tiny

[16:52] <lizmat> increase the inline limit ?  :-)

[16:53] <jnthn> I guess that's the nuclear option, yeah :)

[16:53] <lizmat> I have no idea what the repercussions of that would be

[16:54] <jnthn> More memory use

[16:54] <jnthn> And so worse cache use

[16:57] <jnthn> I've pondered whether to boost the limit up when we detect we're in a loop though

[16:58] <jnthn> Either way, the tweaks I've got locally plus that earlier push seem to speed up array access a bit

[16:58] <jnthn> Even without the inline

[16:59] <lizmat> yeah, it seems to have a positive effect of test-t, but only a few % though

[17:04] <lizmat> afk&

[17:06] <jnthn> Only converting the Int to an int once seems to also have a positive effect

[17:06] <jnthn> Also got one more spesh tweak

[17:12] <Geth> ¦ rakudo: 86d91f2dc6 | (Jonathan Worthington)++ | src/core/Array.pm

[17:12] <Geth> ¦ rakudo: In ASSIGN-POS, unbox the index just once

[17:12] <Geth> ¦ rakudo:

[17:12] <Geth> ¦ rakudo: Measurements suggests this performs better, which is what would be

[17:12] <Geth> ¦ rakudo: expected.

[17:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/86d91f2dc6

[17:46] <lizmat> m: sub a(*@a) { @a[0]++ }; my @a = ^10; a @a; dd @a  # this should either blow up or just DWIM

[17:46] <camelia> rakudo-moar 86d91f2dc: OUTPUT: «Array @a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]␤»

[17:47] <jnthn> huh

[17:47] <jnthn> It's doing exactly the right thing

[17:47] <jnthn> *@a means slurp and flatten the incoming arguments into a new array @a

[17:48] <jnthn> That it's a new array is a deliberate bit of the design

[17:50] <lizmat> why is it an array ?

[17:50] <lizmat> and not a list ?

[17:50] <lizmat> List rather ?

[17:50] <TimToady> it's meant to work like P5's @_, which can be shifted

[17:51] <lizmat> ok, but why the recont ?

[17:51] <TimToady> @_ is kind of a denerate case of *@a

[17:51] <lizmat> if it's just about shifting, I mean

[17:52] <TimToady> so "a 1..10" still gives mutables?

[17:52] <TimToady> I don't think we thought heavily about it

[17:52] <TimToady> was more like "just make this work like a P5er would expect"

[17:53] <lizmat> if I recall correctly, in P5 you could alter elements in @_ and the changes would be seen outside

[17:53] <TimToady> yes, it could be a mis-impl

[17:53] <jnthn> It's very much not a mis-impl.

[17:53] <jnthn> And, I suspect, quite heavily relied upon.

[17:53] <lizmat> hmmm....

[17:54] <jnthn> It'd need `is raw` to get any existing containers

[17:54] <jnthn> m: sub a(*@a is raw) { @a[0]++ }; my @a = ^10; a @a; dd @a

[17:54] <camelia> rakudo-moar 86d91f2dc: OUTPUT: «Array @a = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9]␤»

[17:54] <lizmat> aaaaahhh nok

[17:54] <lizmat> ok

[17:54] <lizmat> cool, that's what I was looking for

[17:55] <TimToady> > perl -e 'sub foo { @_[0]++ }; foo 1,2,3'

[17:55] <TimToady> Modification of a read-only value attempted at -e line 1.

[17:55] <TimToady> it's raw in p5 by default

[17:55] <TimToady> that's all I meant by "mis-impl"

[17:55] <jnthn> Oh...I thought you meant that it's a copy in the first place

[17:56] * TimToady could have the halves of his brane saying different things this morning :)

[17:56] <jnthn> :)

[17:56] <lizmat> dinner&  # my tummy is also chiming in

[17:56] * jnthn should probably go home and rest his brane a bit

[17:57] <jnthn> bbl

[17:57] * TimToady searches out additional coffee bits

[18:00] <Geth> ¦ rakudo: d30e5b1e32 | (Zoffix Znet)++ | 2 files

[18:00] <Geth> ¦ rakudo: Wantify middle args for notandthen/andthen/orelse

[18:00] <Geth> ¦ rakudo:

[18:00] <Geth> ¦ rakudo: Since these affect the final outcome of the chain, they're

[18:00] <Geth> ¦ rakudo: always wanted.

[18:00] <Geth> ¦ rakudo:

[18:00] <Geth> ¦ rakudo: This should probably be fixed in the place that marks first

[18:00] <Geth> ¦ rakudo: arg as wanted, but I'm failing to find where that occurs.

[18:00] <Geth> ¦ rakudo:

[18:00] <Geth> ¦ rakudo: Fixes RT#131499: https://rt.perl.org/Ticket/Display.html?id=131499

[18:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d30e5b1e32

[18:00] <synopsebot> RT#131499 [new]: https://rt.perl.org/Ticket/Display.html?id=131499 [BUG] Incorrect useless use warning in `andthen`/`notandthen`/`orelse`

[18:02] <travis-ci> Rakudo build canceled. Zoffix Znet 'Wantify arglist in postcircumfix:sym<( )>

[18:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327296199 https://github.com/rakudo/rakudo/compare/a0486e5481e9...fa136be2ca83

[18:02] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[18:06] <TimToady> .tell Zoffix Correct, the 2nd arg to wanted has no function other than helping determining culpability on mis-wantings when debugging.

[18:06] <yoleaux> TimToady: I'll pass your message to Zoffix.

[19:10] * [Coke] waves in passing at TimToady.

[20:38] <Geth> ¦ rakudo: 0be9d55205 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[20:38] <Geth> ¦ rakudo: Comment out leftover debugging statement

[20:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0be9d55205

[21:26] <travis-ci> Rakudo build canceled. Jonathan Worthington 'In ASSIGN-POS, unbox the index just once

[21:26] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327324417 https://github.com/rakudo/rakudo/compare/6e13bfa29bdd...86d91f2dc675

[21:26] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.
