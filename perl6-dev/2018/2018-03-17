[00:03] <Geth> ¦ rakudo: 34889bebc3 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperToIterator.pm6

[00:03] <Geth> ¦ rakudo: Add HyperToIterator.skip-at-least

[00:03] <Geth> ¦ rakudo:

[00:03] <Geth> ¦ rakudo: For slight benefit in the .hyper.foo.skip case.

[00:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/34889bebc3

[00:03] <lizmat> .

[00:03] <yoleaux> 16 Mar 2018 18:33Z <Zoffix> lizmat: is it intentional that a bunch of subs lost their purity in this commit? They do come out faster on HEAD, but I wonder if `is pure` would give even more benefit https://github.com/rakudo/rakudo/commit/cdb45fa5a65f06b543db7939fc51af7b598e0bfb

[00:03] <yoleaux> 16 Mar 2018 18:40Z <Zoffix> lizmat: oh, I think it's: R#1574 . Tho purity won't affect those subs, would it? 'cause method calls won't be folded, only the subs that delegate to methods. Can those `is pure`s go back, do you know?

[00:03] <synopsebot> R#1574 [closed]: https://github.com/rakudo/rakudo/issues/1574 Should we allow "is pure" on proto's in the setting

[00:03] <lizmat> .tell Zoffix no, that was not intentional

[00:03] <yoleaux> lizmat: I'll pass your message to Zoffix.

[00:04] <lizmat> .tell Zoffix not sure what the logic is behind which ones do or don't have "is pure" atm

[00:04] <yoleaux> lizmat: I'll pass your message to Zoffix.

[00:07] <AlexDaniel> lizmat: fwiw https://github.com/perl6/whateverable/issues/24#issuecomment-373876594

[00:16] <Zoffix> .

[00:16] <yoleaux> 00:03Z <lizmat> Zoffix: no, that was not intentional

[00:16] <yoleaux> 00:04Z <lizmat> Zoffix: not sure what the logic is behind which ones do or don't have "is pure" atm

[00:17] <Zoffix> I think it's OK to leave them as is for the release, lest we infect more routines with R#1566 bug.

[00:17] <synopsebot> R#1566 [open]: https://github.com/rakudo/rakudo/issues/1566 [regression] multi built-ins are not assignable to Callable

[00:17] <lizmat> yeah

[00:17] <lizmat> sounds like a plan

[00:21] <lizmat> afk again&

[09:06] <pmurias> what is stopping https://github.com/rakudo/rakudo/blob/master/src/core/Mu.pm6#L113 from showing up in Backtrace.list?

[09:14] <nine> pmurias: it does show up in a simple test: perl6 --ll-exception -e 'class Foo { method BUILD() { die } }.new'

[12:15] <lizmat> Files=1236, Tests=76271, 317 wallclock secs (14.73 usr  5.39 sys + 2169.54 cusr 218.41 csys = 2408.07 CPU)

[12:24] <Geth> ¦ rakudo: 3e8ee99116 | (Elizabeth Mattijsen)++ | src/core/IterationBuffer.pm6

[12:24] <Geth> ¦ rakudo: Give IterationBuffer an .append for IterationBuffers

[12:24] <Geth> ¦ rakudo:

[12:24] <Geth> ¦ rakudo: This should come in handy when re-assembling HyperWorkBatches in the

[12:24] <Geth> ¦ rakudo: .push-all case, and probably some other cases.

[12:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3e8ee99116

[12:35] <Geth> ¦ roast: dogbert17++ created pull request #403: Test rt 12851x

[12:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/403

[12:37] <dogbert17> lizmat: o/ are you trying to speed up [Tux] ccsv tests?

[12:37] <lizmat> not specifically, no

[12:37] <dogbert17> ok

[12:38] <lizmat> trying to speed up any .hyper / .race action

[12:38] <dogbert17> is it going well?

[12:38] <lizmat> depends on how you look at it

[12:38] <dogbert17> :)

[12:39] <lizmat> the bits before and after paralellization become very important

[12:39] <lizmat> because there's only 1 thread doing it

[12:39] <lizmat> so if you want to see better wallclock, that's a point of focus

[12:40] <dogbert17> I see. Do you see any obvious opportunities in the code?

[12:41] <Geth> ¦ roast: 8887624ceb | (Jan-Olof Hendig)++ | S32-str/utf8-c8.t

[12:41] <Geth> ¦ roast: Add tests for RT #128511

[12:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8887624ceb

[12:41] <Geth> ¦ roast: 78b89c9979 | (Jan-Olof Hendig)++ | S32-str/utf8-c8.t

[12:41] <Geth> ¦ roast: Add test for RT #128512

[12:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/78b89c9979

[12:41] <Geth> ¦ roast: d0d46093e5 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S32-str/utf8-c8.t

[12:41] <Geth> ¦ roast: Merge pull request #403 from dogbert17/test-rt-12851x

[12:41] <Geth> ¦ roast:

[12:41] <synopsebot> RT#128511 [open]: https://rt.perl.org/Ticket/Display.html?id=128511 [BUG] utf8-c8 generates spurious NUL

[12:41] <Geth> ¦ roast: Test rt 12851x

[12:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d0d46093e5

[12:41] <synopsebot> RT#128512 [open]: https://rt.perl.org/Ticket/Display.html?id=128512 [BUG] utf8-c8 mangles by NFC

[12:41] <dogbert17> lizmat: thx

[12:41] <lizmat> yw  :-)

[12:42] * dogbert17 will now close two RT's yay :)

[12:56] <lizmat> ok, seems that doing a fast push-all on HyperToIterator is going to be more involved than I thought

[12:56] <lizmat> so I'll keep that for after the release

[12:57] <lizmat> afk until later this evening&

[13:41] <timotimo> hum. passing in a prepared "spare" array to the mergesort functions means we'd always allocate a second array even ifthe array to sort is small enough to not have to mergesort

[13:41] <timotimo> but maybe sinceit's internal we can get away with calling nqp::create on the type and using that

[13:42] <timotimo> though i guess cloning could be fnie

[13:48] <AlexDaniel> releasable6: status

[13:48] <releasable6> AlexDaniel, Next release in ≈5 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[13:48] <releasable6> AlexDaniel, Details: https://gist.github.com/d3e4fb8ca563ce700ede832b432617fb

[14:16] <Geth> ¦ rakudo: 511bec0a2c | (Timo Paulssen)++ | src/core/Rakudo/Sorting.pm6

[14:16] <Geth> ¦ rakudo: make sure MERGESORT-* don't leak low-level types

[14:16] <Geth> ¦ rakudo:

[14:16] <Geth> ¦ rakudo: depending on how many items were in the list, you

[14:16] <Geth> ¦ rakudo: could end up getting a BOOTIntArray instead of an

[14:16] <Geth> ¦ rakudo: intarray, for example with 65 elements.

[14:16] <Geth> ¦ rakudo:

[14:16] <Geth> ¦ rakudo: This was caused by `$A` and `$B` switching places after

[14:16] <Geth> ¦ rakudo: every "round" of mergesort application, and if you

[14:16] <Geth> ¦ rakudo: got the right number of rounds, you'd get `$B` instead,

[14:16] <Geth> ¦ rakudo: which was just a nqp::list_i (or _n or _s).

[14:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/511bec0a2c

[14:27] <timotimo> breakfast time, ideally i'll write a test for roast for this bug, too

[14:27] <timotimo> didn't really find what file has both sort and native arrays

[16:05] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/97c6f9c8

[16:05] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2018.02-95-g53c45c6...2018.02-98-g9716266

[16:05] <AlexDaniel> Geth: ver https://github.com/perl6/nqp/commit/9716266fd8a16c13f54079270271795e4b283e3b

[16:05] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/MoarVM/MoarVM/compare/2018.02-159-g97b9951...2018.02-171-geee5be4

[16:39] <AlexDaniel> jnthn: fwiw if you want https://github.com/rakudo/rakudo/commit/21997b625695 changelogged, please do it: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[16:39] <AlexDaniel> jnthn: I can't come up with a short description :)

[16:52] <jnthn> AlexDaniel: Fix code generation bug affecting private methods calls in roles where the target private method used a role parameter

[16:52] <jnthn> I'm not sure I can get it shorter than that. It was an obscure bug ;)

[16:52] <AlexDaniel> OK

[17:14] <Geth> ¦ roast: 61211a4b9c | usev6++ | 2 files

[17:14] <Geth> ¦ roast: [JVM] Unfudge some passing tests

[17:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/61211a4b9c

[17:55] <AlexDaniel> I get these warnings on rakudo-jvm: https://gist.githubusercontent.com/AlexDaniel/3c8c687809731a5897efc8dcc5646fe7/raw/f5ad61a0daa92bf10e2feaf26ad5ff818fca4e57/gistfile1.txt

[17:57] <AlexDaniel> like, every time I run anything (e.g. perl6-j -e 'say 42')

[17:58] <AlexDaniel> bartolin: ↑ any comments?

[17:58] <bartolin> that is with Java 9, isn't it?

[17:59] <bartolin> I think there is a bug report somewhere, let me look

[17:59] * bartolin is testing with Java 8 only

[18:00] <bartolin> ah, yes, R #1431

[18:00] <AlexDaniel> yes, 9

[18:00] <AlexDaniel> R#1431

[18:00] <synopsebot> R#1431 [open]: https://github.com/rakudo/rakudo/issues/1431 [JVM] illegal reflective access

[18:00] <AlexDaniel> ok, I see

[18:07] <bartolin> I think the warning might be caused by using sun.misc.Unsafe here: https://github.com/rakudo/rakudo/blob/511bec0a2c777886143c2423c2840ca3b69ff968/src/vm/jvm/runtime/org/perl6/rakudo/RakudoContainerSpec.java#L4

[18:07] * bartolin makes a note to install a VM with Java 9

[18:58] <Geth> ¦ rakudo: b75d9b1e14 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[18:58] <Geth> ¦ rakudo: [NQP Bump] Brings 7 commits

[18:58] <Geth> ¦ rakudo:

[18:58] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.02-98-g9716266...2018.02-105-g199dd708b

[18:58] <Geth> ¦ rakudo: 199dd708b [js] Implement getcodelocation

[18:58] <Geth> ¦ rakudo: db6801437 [js] Throw an exception when accessing a missing variable with nqp::atkey

[18:58] <Geth> ¦ rakudo: 00b1f84f3 Remove partially commented out timing debug code

[18:58] <Geth> ¦ rakudo: 23835345a [js] Add $$ prefix to avoid interation over an internal field of a ctx

[18:58] <Geth> ¦ rakudo: 0191550a5 Test reaching the topmost caller with nqp::ctxcaller

[18:58] <Geth> ¦ rakudo: 15dfe66ef [js] Make nqp::ctxcaller return nqp::null when we have no caller

[18:58] <Geth> ¦ rakudo: 002097112 [js] Wrap native file and line values before putting in a hash

[18:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b75d9b1e14

[18:58] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.02-98-g9716266...2018.02-105-g199dd708b

[18:58] <AlexDaniel> so! From my side everything looks great

[18:58] <AlexDaniel> no blockers, CI status is good

[18:59] <AlexDaniel> did a fresh toast of modules, everything is good

[18:59] <AlexDaniel> releasable gets to the last step without any issues

[19:03] <AlexDaniel> changelog is also ready, please feel free to tweak it: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft
