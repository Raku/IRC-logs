[01:05] <Geth> ¦ rakudo: 900c1b598e | (Zoffix Znet)++ | 3 files

[01:05] <Geth> ¦ rakudo: Awesomify and test unit-scope sub error

[01:05] <Geth> ¦ rakudo:

[01:05] <Geth> ¦ rakudo: Fixes #1364

[01:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/900c1b598e

[01:05] <synopsebot> RAKUDO#1364 [open]: https://github.com/rakudo/rakudo/issues/1364 Vague unit-scope error msg for semi-colon at end of a header  [LTA]

[01:08] <Geth> ¦ rakudo: 96a3582c44 | (Zoffix Znet)++ | src/Perl6/Grammar.nqp

[01:08] <Geth> ¦ rakudo: Fix overly-long line

[01:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/96a3582c44

[02:57] <travis-ci> Rakudo build errored. Zoffix Znet 'Awesomify and test unit-scope sub error

[02:57] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325277203 https://github.com/rakudo/rakudo/compare/ffabfdb66889...900c1b598e54

[02:57] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[03:00] <Geth> ¦ rakudo: 5ed59dd8e2 | (Zoffix Znet)++ | src/Perl6/World.nqp

[03:00] <Geth> ¦ rakudo: Document nqp::nulls in coercer finder betterer

[03:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5ed59dd8e2

[03:37] <travis-ci> Rakudo build errored. Zoffix Znet 'Fix overly-long line'

[03:37] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325277813 https://github.com/rakudo/rakudo/compare/900c1b598e54...96a3582c4473

[03:37] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, only t/04-nativecall/01-argless.t test file failed.

[04:34] <travis-ci> Rakudo build failed. Zoffix Znet 'Improve DefiniteHOW coercers

[04:34] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325300302 https://github.com/rakudo/rakudo/compare/96a3582c4473...3947a4c11a80

[04:34] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, only t/05-messages/01-errors.t test file failed.

[04:54] <Geth> ¦ rakudo: 9cf2f99861 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/Repository/Locally.pm

[04:54] <Geth> ¦ rakudo: Fix CURFS/CURI .perl output

[04:54] <Geth> ¦ rakudo:

[04:54] <Geth> ¦ rakudo: CompUnit::Repository::Locally repos -- CompUnit::Repository::FileSystem, CompUnit::Repository::Installation -- take a named parameter instead of a positional (a pre-v6c artifact)

[04:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9cf2f99861

[05:29] <travis-ci> Rakudo build failed. Zoffix Znet 'Document nqp::nulls in coercer finder betterer'

[05:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325300666 https://github.com/rakudo/rakudo/compare/3947a4c11a80...5ed59dd8e2d6

[05:29] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, 2 unique test files failed.

[06:24] <travis-ci> Rakudo build failed. Nick Logan 'Fix CURFS/CURI .perl output

[06:24] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325318132 https://github.com/rakudo/rakudo/compare/5ed59dd8e2d6...9cf2f998618f

[06:24] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, 2 unique test files failed.

[08:26] <[Tux]> Rakudo version 2017.12-103-g9cf2f9986 - MoarVM version 2017.12-20-g571034087

[08:26] <[Tux]> csv-test-xs-20      0.449 -  0.491

[08:27] <[Tux]> csv-ip5xs           1.138 -  1.143

[08:27] <[Tux]> test-t --race       1.309 -  1.380

[08:27] <[Tux]> test-t              3.010 -  3.058

[08:27] <[Tux]> test               12.046 - 12.143

[08:27] <[Tux]> csv-ip5xs-20       13.373 - 13.670

[08:27] <[Tux]> csv-parser         12.547 - 13.796

[08:27] <[Tux]> test-t-20 --race   18.661 - 19.023

[08:27] <[Tux]> test-t-20          53.278 - 53.877

[09:07] <lizmat> Files=1231, Tests=76000, 328 wallclock secs (14.86 usr  5.38 sys + 2268.31 cusr 232.46 csys = 2521.01 CPU)

[10:28] <gfldex> lizmat: are those range checks fast? https://github.com/rakudo/rakudo/blob/master/src/core/DateTime.pm#L69

[10:31] <lizmat> it could probably use a more optimized version in the Dateish role

[10:32] <lizmat> because we can be sure we're dealing with Int's there ?

[10:35] <lizmat> in any case, Range.in-range could probably use to be a multi that has two candidates: one with, and one without a $what

[10:39] <gfldex> m: my $a; for ^1000000 { $a = (0..59).in-range(59.rand(), 'hour') }; say now - BEGIN now;

[10:39] <camelia> rakudo-moar 9cf2f9986: OUTPUT: «8.0017520␤»

[10:39] <gfldex> m: my $a; for ^1000000 { $a = 0 ≤ 59.rand() ≤ 59 }; say now - BEGIN now;

[10:39] <camelia> rakudo-moar 9cf2f9986: OUTPUT: «1.4841637␤»

[10:39] <gfldex> I like 1.4s better :)

[10:44] <lizmat> yup, that's better, but in-range also throws when it is not in range

[10:46] <gfldex> m: my $a; for ^1000000 { $a = 0 ≤ 59.rand() ≤ 59 || Exception.new('ouch‼').throw }; say now - BEGIN now;

[10:46] <camelia> rakudo-moar 9cf2f9986: OUTPUT: «1.47866273␤»

[10:47] <gfldex> m: my $a; for ^1000000 { $a = 0 ≤ 60.rand() ≤ 59 || die('ouch‼') }; say now - BEGIN now;

[10:47] <camelia> rakudo-moar 9cf2f9986: OUTPUT: «ouch‼␤  in block <unit> at <tmp> line 1␤␤»

[10:49] <gfldex> I have a usecase that is very DateTime heavy. Any speedup would be very welcome.

[10:54] <lizmat> macros would have been nice here

[10:55] <lizmat> I would accept a pull request that would transform those .in-range calls to foo < x < bar || bang!

[10:55] <gfldex> I am at home today but will work the next two days. I will see what I can do.

[11:16] <tbrowder> .tell AlexDaniel this is your periodic invitation to kindly review rakudo PR #1339 and its tests in roast PR #371

[11:16] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[11:29] <gfldex> I got a failing spectest in t/spec/S29-os/system.rakudo.moar

[11:34] <lizmat> reliably or a flapper ?

[12:35] <gfldex> always it seams https://gist.github.com/anonymous/dc3893e3440839364d3cc709ab81c091

[12:39] <lizmat> gfldex: it doesn't for me  on MacOS

[12:40] <gfldex> I didn't touch anything!

[12:40] <gfldex> :->

[12:41] <gfldex> Linux vm-debian-jessie 4.9.0-4-amd64 #1 SMP Debian 4.9.51-1 (2017-09-28) x86_64 GNU/Linux

[12:51] <MasterDuke> gfldex: i set the same output when i run the .moar file directly, but if you make the .t file it shows that it passes because that test is todo'ed

[12:51] <MasterDuke> *get

[12:51] <gfldex> odd

[12:52] <MasterDuke> what does `make t/spec/S29-os/system.t` do for you?

[12:54] <gfldex> not ok 33 - LAST phaser gets triggered when using -n command line switch # TODO RT 128398

[12:54] <synopsebot> RT#128398 [open]: https://rt.perl.org/Ticket/Display.html?id=128398 [BUG] LAST does not work with -n in Rakudo

[12:55] <MasterDuke> but no 'Result: PASS' at the end?

[12:56] <gfldex> Result: FAIL

[12:56] <MasterDuke> huh

[12:56] <MasterDuke> that is odd

[12:57] <gfldex> it's a fairly clean VM and rakudo is build as root

[12:57] <lizmat> fwiw, afaik, mine isn't build as root, perhaps that could be it ??

[12:58] * gfldex goes to build rakudo in coward-mode

[13:09] <Zoffix> gfldex: what's the full output of the run?

[13:09] <yoleaux> 4 Jan 2018 16:17Z <tyil> Zoffix: The issue I ran into with zef has a ticket open, in case you're interested in the cause: https://github.com/ugexe/zef/issues/157

[13:10] <Zoffix> huggable: zef no deps :is: Issue with zef reporting empty list of missing deps: https://github.com/ugexe/zef/issues/157

[13:10] <huggable> Zoffix, Added zef no deps as Issue with zef reporting empty list of missing deps: https://github.com/ugexe/zef/issues/157

[13:11] <Zoffix> gfldex: I mean of `make t/spec/S29-os/system.t` or `t/fudgeandrun t/spec/S29-os/system.t`  Your gist doesn't include harness results output

[13:20] <gfldex> as non-root I get different errors.

[13:20] <gfldex> lizmat: are you spectesting on a nfs share?

[13:20] <lizmat> nope

[13:21] <lizmat> it's all happening on my MBP with SSD

[13:21] <gfldex> I am: https://gist.github.com/86940b79472637fcc1a61d9d3195750b

[13:21] <lizmat> perhaps the speed difference of the SSD could be the reason I'm not seeing it ?

[13:21] <gfldex> the vm got more then anough RAM to never touch any disk

[13:22] <Zoffix> gfldex: what's the output of t/fudgeandrun t/spec/S32-io/io-handle.t t/spec/S32-io/io-cathandle.t t/spec/S32-io/open.t ?

[13:23] <gfldex> All tests successful.

[13:23] <Zoffix> :S

[13:23] <gfldex> that's as root on non-nfs

[13:23] <Geth> ¦ rakudo: 36d71a39e8 | (Elizabeth Mattijsen)++ | src/core/DateTime.pm

[13:23] <Geth> ¦ rakudo: Make DateTime creation about 1.6x as fast

[13:23] <Geth> ¦ rakudo:

[13:23] <Geth> ¦ rakudo: - using Positional interface, possibly less pronounced with other inputs

[13:23] <Geth> ¦ rakudo: - if possible, don't use Range.in-range tests for testing whether in range

[13:23] <Geth> ¦ rakudo: - put leap-second check in separate private method

[13:23] <Geth> ¦ rakudo:   - this should increase the chance of new-from-positional to be inlined

[13:23] <Geth> ¦ rakudo: - don't use attribute binding in the signature of SET-SELF

[13:23] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[13:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/36d71a39e8

[13:23] <lizmat> gfldex: ^^^

[13:24] <gfldex> lizmat: tyvm

[13:24] <Zoffix> no idea then

[13:47] <gfldex> that's as non-root on non-nfs https://gist.github.com/anonymous/771af6f11e0adebae64a044aa404c3c0

[13:47] <gfldex> making assumptions about /dev/pts/0 can be tricky

[13:48] <gfldex> rakudo doesn't like it if you `su -l username` it seams

[13:51] <timotimo> lizmat: huh, there must be some way to make binding to private attributes fast in signatures ...

[13:53] <lizmat> timotimo: probably  :-)

[13:53] <lizmat> perhaps there was something else going on

[13:53] <lizmat> it was just empirically faster that way

[13:57] <gfldex> buildin rakudo and spectesting in boring-mode works without FAILs

[13:57] <Geth> ¦ roast: 49ba4076fa | (Zoffix Znet)++ | 2 files

[13:57] <Geth> ¦ roast: Rephrase .t tests

[13:57] <Geth> ¦ roast:

[13:57] <Geth> ¦ roast: Check .open on TTY succeeds as well, as it fails on some systems:

[13:57] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6-dev/2018-01-05#i_15654787

[13:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/49ba4076fa

[14:09] <lizmat> afk&

[14:25] <7JTAC9F9L> Rakudo build failed. Elizabeth Mattijsen 'Make DateTime creation about 1.6x as fast

[14:25] <7JTAC9F9L> https://travis-ci.org/rakudo/rakudo/builds/325440142 https://github.com/rakudo/rakudo/compare/9cf2f998618f...36d71a39e813

[14:33] <Geth> ¦ rakudo/master: 6 commits pushed by (Itsuki Toyota)++, (Zoffix Znet)++

[14:33] <Geth> ¦ rakudo/master: 1d034df86f | Use Int:D instead of Int()

[14:33] <Geth> ¦ rakudo/master: f9f8e4437d | Cast Match objects to Int objects before calling Date.new

[14:33] <Geth> ¦ rakudo/master: fc2a3fd421 | Merge branch 'master' into fix-date-new

[14:33] <Geth> ¦ rakudo/master: dfaa2282b3 | Use Int:D() instead of Int:D

[14:33] <Geth> ¦ rakudo/master: 867d5ed599 | Revert "Cast Match objects to Int objects before calling Date.new"

[14:33] <Geth> ¦ rakudo/master: 038b1ea760 | Disallow :U values in DateTime.new

[14:33] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/36d71a39e8...038b1ea760

[14:33] <Geth> ¦ roast: e1aeb1d690 | (Itsuki Toyota)++ | S32-temporal/Date.t

[14:33] <Geth> ¦ roast: Make sure Date.new(Int, 1, 1) dies

[14:33] <Geth> ¦ roast:

[14:33] <Geth> ¦ roast: Fixes: https://rt.perl.org/Public/Bug/Display.html?id=127016

[14:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e1aeb1d690

[14:33] <Geth> ¦ roast: 287d65038e | (Itsuki Toyota)++ | S32-temporal/Date.t

[14:33] <Geth> ¦ roast: Make sure both Date.new(2010, 12/2, 3) and Date.new('2018', '1', '4') live

[14:33] <Geth> ¦ roast:

[14:33] <Geth> ¦ roast: Fixes RT#127016: https://rt.perl.org/Public/Bug/Display.html?id=127016

[14:33] <Geth> ¦ roast:

[14:34] <Geth> ¦ roast: This fix is a characterization test to make sure it doesn't break the previous behavior.

[14:34] <synopsebot> RT#127016 [new]: https://rt.perl.org/Ticket/Display.html?id=127016 [LHF][BUG] Date can have undefined year

[14:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/287d65038e

[14:34] <Geth> ¦ roast: 1ec04ae356 | (Zoffix Znet)++ (committed using GitHub Web editor) | S32-temporal/Date.t

[14:34] <Geth> ¦ roast: Merge pull request #374 from titsuki/fix-date-new

[14:34] <Geth> ¦ roast:

[14:34] <Geth> ¦ roast: Fix RT#127016

[14:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1ec04ae356

[14:47] <Geth> ¦ rakudo: 8023d21293 | (Zoffix Znet)++ | 2 files

[14:47] <Geth> ¦ rakudo: Remove automated release guide

[14:47] <Geth> ¦ rakudo:

[14:47] <Geth> ¦ rakudo: The described process is no longer in use.

[14:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8023d21293

[14:56] <gfldex> t/spec/S29-os/system.rakudo.moar doesn't like to run as root, nfs is not involved in the FAILs I got

[15:17] <Zoffix> gfldex: that's just a bad test. It's using wrong perl6

[15:30] <gfldex> lizmat: I told andrewshitov that his blog made Rakudo faster. :)

[15:39] <Zoffix> g2g, but will look into it tonight. Filed the problem as S#375

[15:39] <synopsebot> S#375 [open]: https://github.com/perl6/roast/issues/375 Broken tests in S29-os/system.t

[15:39] <Zoffix> |8h S#375

[15:39] <ZofBot> Zoffix, Will remind you on 2018-01-05T18:39:20.483077-05:00 about S#375

[15:53] <travis-ci> Rakudo build failed. Zoffix Znet 'Disallow :U values in DateTime.new

[15:53] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325464363 https://github.com/rakudo/rakudo/compare/36d71a39e813...038b1ea76016

[15:53] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, 2 unique test files failed.

[17:08] <travis-ci> Rakudo build failed. Zoffix Znet 'Remove automated release guide

[17:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325468886 https://github.com/rakudo/rakudo/compare/038b1ea76016...8023d2129317

[17:08] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, only t/02-rakudo/08-slangs.t test file failed.

[17:08] <Zoffix> pinged travisci-status on twitter about ^these

[17:11] <Geth> ¦ roast: 420b3365f1 | (Zoffix Znet)++ | S29-os/system.t

[17:11] <Geth> ¦ roast: Fix run/shell :cwd/:ENV tests

[17:11] <Geth> ¦ roast:

[17:11] <Geth> ¦ roast: Fixes https://github.com/perl6/roast/issues/375

[17:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/420b3365f1

[17:12] <Zoffix> gfldex: all test failrues you reported today should be fixed. ^ that fixes S29-os/system and earlier commit fixed the io-*handle failures

[17:16] <gfldex> Zoffix++

[21:14] <Geth> ¦ rakudo: 7a4743be31 | (Moritz Lenz)++ | src/core/Proc.pm

[21:14] <Geth> ¦ rakudo: #1366: introduce Proc!set-status

[21:14] <Geth> ¦ rakudo:

[21:14] <Geth> ¦ rakudo: the plan is to deprecate the public candidate that sets the status

[21:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7a4743be31

[22:08] <AlexDaniel> greppable6: status\(

[22:08] <greppable6> AlexDaniel, https://gist.github.com/7a5cfd4dc52192dc82fa8a358ab9c336

[22:08] <AlexDaniel> greppable6: \.status\(

[22:08] <greppable6> AlexDaniel, https://gist.github.com/81a59c392e219e4b17cee5f217214aee

[22:15] <lizmat> m: my $a = 42; for ^1000000 { my $b = 42 < $a < 666 }; say now - INIT now

[22:15] <camelia> rakudo-moar 7a4743be3: OUTPUT: «0.54265194␤»

[22:15] <lizmat> m: my $a = 42; for ^1000000 { my $b = 42 < $a && $a < 666 }; say now - INIT now

[22:15] <camelia> rakudo-moar 7a4743be3: OUTPUT: «0.2490039␤»

[22:16] <lizmat> somehow I would think performance of these two constructs should be closer to each other ?

[22:21] <Geth> ¦ rakudo: 5571d7f72b | (Zoffix Znet)++ | 2 files

[22:21] <Geth> ¦ rakudo: Make unit-scope sub error message less presice

[22:21] <Geth> ¦ rakudo:

[22:21] <Geth> ¦ rakudo: Per https://github.com/rakudo/rakudo/issues/1364#issuecomment-355645824

[22:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5571d7f72b

[22:30] <jnthn> lizmat: In theory the first could be faster, even

[22:31] <lizmat> yes, so I'm a bit disappointed  :-)

[22:31] <lizmat> jnthn: should I make an issue ?

[22:32] <jnthn> Could do

[22:37] <lizmat> GH #1368

[22:37] <lizmat> https://github.com/rakudo/rakudo/issues/1368

[22:39] <Geth> ¦ rakudo: b7170f835f | (Elizabeth Mattijsen)++ | src/core/Date.pm

[22:39] <Geth> ¦ rakudo: Make Date.new about 1.6x faster

[22:39] <Geth> ¦ rakudo:

[22:39] <Geth> ¦ rakudo: - just like with DateTime.new earlier today

[22:39] <Geth> ¦ rakudo: - JITting *is* taking place here, so not sure what the difference is

[22:39] <Geth> ¦ rakudo: - replacing 1 <= $a <= 12 by 1 <= $a && $a <= 12 would make it 30% faster still

[22:39] <Geth> ¦ rakudo:   - but am not sure that's a currently botched optimization in Moar or not

[22:39] <Geth> ¦ rakudo:   - so keeping the code like this for now

[22:39] <Geth> ¦ rakudo:   - see GH #1368

[22:39] <synopsebot> RAKUDO#1368 [open]: https://github.com/rakudo/rakudo/issues/1368 "42 < $a < 666" should be faster than "42 < $a && $a < 666", but is 2x as slow

[22:39] <Geth> ¦ rakudo: - also, did not change self === Date to nqp::istype(self.WHAT,Date)

[22:39] <Geth> ¦ rakudo:   - because the effect was only about 0.5%, so maybe for later

[22:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b7170f835f

[22:42] <jnthn> fwiw, I suspect it'll be something in Perl6::Optimizer's handling of chaining

[22:43] <timotimo> yeah, it has some code for chaining

[22:43] <timotimo> i never really tried to understand how the chain depth handling works, someone recently found a bug in it, i think?

[22:43] <timotimo> probably the zoff

[22:46] <jnthn> As I remember it, it was a bail-out to avoid mis-optimization

[22:55] <Zoffix> Yeah, there was some sort of a bug, but the chained version is deliberatelly not constant folded, so that's why the slowdown in the issue

[22:55] <Zoffix> Or rather, why the C1 < C2 && C2 < C3 is faster

[22:56] <Zoffix> deliberately == when I was fixing the bug I know there was code that checked for chain == 2; don't know the reason why

[22:56] <Zoffix> m: my $a = 42; for ^1000000 { my $b = rand < $a < rand }; say now - INIT now

[22:56] <camelia> rakudo-moar b7170f835: OUTPUT: «1.21604896␤»

[22:56] <Geth> ¦ roast: b534478149 | (Elizabeth Mattijsen)++ | S32-exceptions/misc.t

[22:56] <Geth> ¦ roast: Fix OutOfRange test that is too specific

[22:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b534478149

[22:57] <Zoffix> m: my $a = 42; for ^1000000 { my $b = rand < $a && $a < rand }; say now - INIT now

[22:57] <camelia> rakudo-moar b7170f835: OUTPUT: «1.031527␤»

[22:57] <Zoffix> m: my $a = ½; for ^1000000 { my $b = rand < $a && $a < rand }; say now - INIT now

[22:57] <camelia> rakudo-moar b7170f835: OUTPUT: «1.03467780␤»

[22:57] <Zoffix> m: my $a = ½; for ^1000000 { my $b = rand < $a < rand }; say now - INIT now

[22:57] <camelia> rakudo-moar b7170f835: OUTPUT: «1.1789591␤»

[22:57] <Zoffix> m: my $a = rand; for ^1000000 { my $b = rand < $a < rand }; say now - INIT now

[22:57] <camelia> rakudo-moar b7170f835: OUTPUT: «0.75051262␤»

[22:57] <Zoffix> m: my $a = rand; for ^1000000 { my $b = rand < $a && $a < rand }; say now - INIT now

[22:57] <camelia> rakudo-moar b7170f835: OUTPUT: «0.38909410␤»

[22:57] <Zoffix> ok, so then it's more than just constant folding bit

[22:59] <jnthn> I wonder if they're being emitted as calls rather than static calls

[22:59] <Zoffix> looks like it yeah

[22:59] <jnthn> The latter is an opt where we promise it won't change or have closure variants, 'cus it comes from the setting

[23:00] <jnthn> It used to be the case that only static calls could be inlined

[23:00] <jnthn> Since last summer's spesh work, that's not the case

[23:00] <jnthn> However, it's a guard less

[23:00] <jnthn> And a lookup by name less

[23:01] <jnthn> In otherwise tight code, those could add up a lot

[23:02] <Zoffix> Gonna give it a go and try to make it static sometime this weekend, unless someone beats me :)

[23:08] <Geth> ¦ rakudo: f719a471db | (Elizabeth Mattijsen)++ | src/core/Match.pm

[23:08] <Geth> ¦ rakudo: Make sure we don't interpolate hashes

[23:08] <Geth> ¦ rakudo:

[23:08] <Geth> ¦ rakudo: - fixes GH #1367

[23:08] <Geth> ¦ rakudo: - this cannot be a compile time test only

[23:08] <Geth> ¦ rakudo:   - it also needs to be able to handle: my $h := { a => "b" }; say "b" ~~ / $h /

[23:08] <Geth> ¦ rakudo: - a compile time test for %-sigilled vars could be appropriate

[23:08] <synopsebot> RAKUDO#1367 [open]: https://github.com/rakudo/rakudo/issues/1367 Using a hash variable in a regex should give a better error message

[23:08] <Geth> ¦ rakudo:   - then again, it could produce false positives

[23:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f719a471db

[23:09] <travis-ci> Rakudo build failed. Moritz Lenz '#1366: introduce Proc!set-status

[23:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325613262 https://github.com/rakudo/rakudo/compare/8023d2129317...7a4743be31a5

[23:09] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, 2 unique test files failed.

[23:22] <Geth> ¦ rakudo: 00797d07ef | (Elizabeth Mattijsen)++ | src/core/Match.pm

[23:22] <Geth> ¦ rakudo: Don't allocate a nqp::list if it's not necessary

[23:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/00797d07ef
