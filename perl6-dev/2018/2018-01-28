[00:08] <cygx> .tell nine could install-core-dist.pl failing with "No such method 'prefix' for

[00:08] <yoleaux> cygx: I'll pass your message to nine.

[00:09] <cygx> .tell nine ...invocant of type 'Str'" on MinGW be related to your recent commits? (sorry for the broken message...)

[00:09] <yoleaux> cygx: I'll pass your message to nine.

[00:10] <cygx> ~~

[02:33] <Zoffix> New core hacking blog post: "Perl 6 Core Hacking: QASTalicious": https://rakudo.party/post/Perl-6-Core-Hacking-QASTalicious

[03:44] <Zoffix> m: BEGIN CORE::<List> := List.^mixin: role { method bar is nodal { self.map: *.bar } }; class Z { my $.z = "a"; method bar { $.z.=succ } }; List.^methods¬ª.name.grep("bar").say; (Z, Z, (Z, Z))¬ª.bar.say

[03:45] <camelia> rakudo-moar a9a9e1c97: OUTPUT: ¬´()‚ê§(b c (d e))‚ê§¬ª

[03:45] <Zoffix> Is there any compile-time way to modify a core type and if there is, is there a way to detect it?

[03:46] <Zoffix> Thinking that Mu.dispatch:<hyper> can just be resolved in the static optimizer (IMO we should allow ourselves to declare `.dispatch:` methods as internal and assume they're never going to overridden by the user)

[03:47] <Zoffix> (or have the `is not-optimized` trait users overriding very core things could use to tell us they don't want any optimizations that resolve these constructs... Same as we wanted to do something with `$foo++` ops or whatever)

[03:57] <Zoffix> I don't get what this hack does exactly... wouldn't `Mu` always be false and the thruthy branch never executed?: https://github.com/rakudo/rakudo/blob/a9a9e1c97/src/core/metaops.pm#L674

[04:08] <Zoffix> ZOFFLOP: t/spec/MISC/bug-coverage-stress.t (test #2, exit status 1)

[04:24] <Geth> ¬¶ rakudo: 9bc26ec3ce | (Zoffix Znet)++ | src/core/metaops.pm

[04:24] <Geth> ¬¶ rakudo: Remove "hack" in nodemap

[04:24] <Geth> ¬¶ rakudo:

[04:24] <Geth> ¬¶ rakudo: Stresstest is clean and I'm unsure why it was needed.

[04:24] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/9bc26ec3ce

[04:25] <Zoffix> .tell TimToady I removed a statement you labeled as a hack 4 years ago in a836ab7466efcb337. Stresstest came out clean, but perhaps you remember what the hack was meant to solve that isn't covered by stresstest? https://github.com/rakudo/rakudo/commit/9bc26ec3ce

[04:25] <yoleaux> Zoffix: I'll pass your message to TimToady.

[06:05] <Zoffix> Actually, I can't make this assumption. A later compile time augment might modify List and I won't know it without time traveling. Oh well. At least I can install an op that doesn't deal with Captures. Gonna give that a go and see if it does any good.

[09:09] <Geth> ¬¶ rakudo: b6a7d7f64d | (Stefan Seifert)++ | src/core/CompUnit/RepositoryRegistry.pm

[09:09] <Geth> ¬¶ rakudo: Fix "No such method 'prefix'" when there's no HOME directory

[09:09] <Geth> ¬¶ rakudo:

[09:09] <Geth> ¬¶ rakudo: cygx++ for reporting

[09:09] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/b6a7d7f64d

[09:09] <nine> .tell cygx https://github.com/rakudo/rakudo/commit/b6a7d7f64d should take care of it

[09:09] <yoleaux> nine: I'll pass your message to cygx.

[09:09] <yoleaux> 00:08Z <cygx> nine: could install-core-dist.pl failing with "No such method 'prefix' for

[09:09] <yoleaux> 00:09Z <cygx> nine: ...invocant of type 'Str'" on MinGW be related to your recent commits? (sorry for the broken message...)

[10:24] <AlexDaniel> Zoffix++ that was interesting to read

[10:27] <Zoffix> :)

[10:33] <[Tux]> Rakudo version 2018.01-48-gb6a7d7f64 - MoarVM version 2018.01-21-gd3ce626b4

[10:33] <[Tux]> csv-test-xs-20      0.438 -  0.480

[10:33] <[Tux]> csv-ip5xs           0.979 -  1.003

[10:33] <[Tux]> test-t --race       1.133 -  1.144

[10:33] <[Tux]> test-t              2.531 -  2.575

[10:33] <[Tux]> csv-ip5xs-20       10.483 - 10.565

[10:33] <[Tux]> test               10.481 - 10.915

[10:33] <[Tux]> csv-parser         11.277 - 11.539

[10:33] <[Tux]> test-t-20 --race   15.999 - 16.075

[10:33] <[Tux]> test-t-20          45.763 - 46.004

[10:34] <[Tux]> http://tux.nl/Talks/CSV6/images/test-t-d180.png

[10:42] <nine> I don't get why despite a BEGIN PROCESS::<PERL> := "foo"; in src/core/core_epilogue.pm, perl6 -e 'say PROCESS::<PERL>' gives (Any)

[11:28] <nine> What I've found out so far about the error: BEGIN time $str.comb in the setting is ok, but $str.comb(/\d+/) is not

[13:02] <lizmat> nine: re db1e067e3da4cd67  , I'm sure I've tried that before and it didn't work: glad it does now  :-)

[13:04] <nine> lizmat: now that I'm working on $*PERL I'm actually no longer sure that buf8.elems does work. I fear it is just executed on perl6 startup instead of at module load

[13:05] <lizmat> ah  :-(

[13:05] <lizmat> yeah, so in that case it is at most even

[13:05] <lizmat> and if not, extra work at startup  :-(

[13:06] <nine> lizmat: any idea why we cant match any regexes at BEGIN time in the setting?

[13:18] <Geth> ¬¶ rakudo: c6cc673de5 | (Stefan Seifert)++ | 2 files

[13:18] <Geth> ¬¶ rakudo: Fix buf8 punning actually running at INIT time instead of BEGIN

[13:18] <Geth> ¬¶ rakudo:

[13:18] <Geth> ¬¶ rakudo: The setting's mainline is executed at runtime, just like any other comp unit.

[13:18] <Geth> ¬¶ rakudo: Thanks to lizmat++ for the reminder.

[13:18] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/c6cc673de5

[13:18] <nine> lizmat: this really (measurably) does the trick ^^^

[13:18] <nine> Also it gave me the chance to sneak in a typo fix in the comment ;)

[13:25] <tbrowder> .ask AlexDaniel are you going to merge my nqp PR on detabifying or should i close it? my concern is greater divergence from the master branch the longer it goes unmerged.

[13:25] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[14:08] <nine> Oh how I hate not getting any useful error messages :/

[14:24] <moritz> aye

[14:24] <moritz> strace then!

[14:31] <lizmat> Zoffix++  # wow

[14:31] <lizmat> https://rakudo.party/post/Perl-6-Core-Hacking-QASTalicious

[15:23] <AlexDaniel> .

[15:23] <yoleaux> 13:25Z <tbrowder> AlexDaniel: are you going to merge my nqp PR on detabifying or should i close it? my concern is greater divergence from the master branch the longer it goes unmerged.

[15:23] <timotimo> i wonder if we can do a bunch better by lazily generating the WVal alternatives for Want objects as son as we know what we actually want

[15:23] <timotimo> like, if we have a want with an SVal we know the WVal will just be that raw string boxed in a given type object

[15:24] <timotimo> so why not store the type object alongside the raw SVal that's in there anyway

[15:24] <AlexDaniel> tbrowder: I requested changes, the changes are not made yet

[15:24] <AlexDaniel> tbrowder: this is one of the examples where the code is misaligned: https://github.com/perl6/nqp/pull/397/files#diff-381f188f88713bba39d559f95e977efcR624

[15:51] <TimToady> .tell Zoffix removing that hack is probably fine, since my lack of nqp understanding at that point was primarily syntactic

[15:51] <yoleaux> 04:25Z <Zoffix> TimToady: I removed a statement you labeled as a hack 4 years ago in a836ab7466efcb337. Stresstest came out clean, but perhaps you remember what the hack was meant to solve that isn't covered by stresstest? https://github.com/rakudo/rakudo/commit/9bc26ec3ce

[15:51] <yoleaux> TimToady: I'll pass your message to Zoffix.

[15:58] <Geth> ¬¶ rakudo: 8afd791c16 | (Stefan Seifert)++ | src/core/Str.pm

[15:58] <Geth> ¬¶ rakudo: Fix type constraint in Str.split's Seq

[15:58] <Geth> ¬¶ rakudo:

[15:58] <Geth> ¬¶ rakudo: $!chars is the number of characters, hence int, not str.

[15:58] <Geth> ¬¶ rakudo: This is at least one of the reasons why BEGIN time error reporting in the

[15:58] <Geth> ¬¶ rakudo: setting is so broken.

[15:58] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/8afd791c16

[17:17] <tbrowder> AlexDaniel: from your comments I assumed that one place was our complaint. I changed that and added a comment. I assumed you would then comment and reply to my questions.

[17:20] <tbrowder> (s/our/your/) So now I will carefully check all the PR again and fix all the alignment changes I can find.

[17:20] <AlexDaniel> there are just too many of these, sorry if I wasn't clear: https://github.com/perl6/nqp/pull/397/files#diff-9f09e96fe1f3e6e14d365bb4de3b52b4R257 https://github.com/perl6/nqp/pull/397/files#diff-9f09e96fe1f3e6e14d365bb4de3b52b4R1274 https://github.com/perl6/nqp/pull/397/files#diff-6d4aea1a1299d85ee0889f3c3c460158R152 https://github.com/perl6/nqp/pull/397/files#diff-d81f2614ab6f062a387eaf25c2db4f7eR32

[17:21] <tbrowder> s/changes/problems/

[17:21] <AlexDaniel> and here the intent was to have it indented: https://github.com/perl6/nqp/pull/397/files#diff-45c7dd95550cba7575b9dcaaa61f5826R528

[17:33] <moritz> based on https://stackoverflow.com/questions/48488381/perl6-comparison-operator what would you say about a Seq.ACCEPTS that delegates to self.cache.ACCEPTS ?

[21:35] <Geth> ¬¶ nqp: 769cf11e31 | (Elizabeth Mattijsen)++ | tools/build/MOAR_REVISION

[21:35] <Geth> ¬¶ nqp: Get the latest spesh template improvements

[21:35] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/769cf11e31

[21:35] <Geth> ¬¶ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.01-21-gd3ce626...2018.01-31-ge813f06

[21:46] <Zoffix> moritz: yeah, that makes sense. There's a ticket proposing that too RT#131302

[21:46] <synopsebot> RT#131302 [new]: https://rt.perl.org/Ticket/Display.html?id=131302 [LTA] Seq:D ~~ Seq:D uses Any.ACCEPTS

[21:54] <Zoffix> FWIW, I'm currently working on compile-time "resolving" dispatch:<hyper> and dispatch:<var>. Basically just compiling them into blocks that pass the args directly instead of dealing with Captures. I did a trial run with dispatch:<hyper> being rewritten in the optimizer and that made `¬ª.uc` 60% faster and made `¬ª.foo` for a multi with 14 candidates 25x faster. I imagine biggest win would be for

[21:54] <Zoffix> `¬ª.&some-sub` since that hits both the hyper and the var dispatches.

[21:55] <lizmat> ++Zoffix

[21:55] <Geth> ¬¶ rakudo: bb9224666c | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[21:55] <Geth> ¬¶ rakudo: Bump NQP to get the latest spesh templates

[21:55] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/bb9224666c

[21:55] <Geth> ¬¶ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-17-gcd03234...2018.01-19-g769cf11

[21:56] <lizmat> I have a feeling this will be visible in test-t also

[21:57] <lizmat> some weeks ago test-t was at 2.5 for me, now it is at 2.1

[21:57] <lizmat> but perhaps we've already seen the improvements

[21:59] <Zoffix> And currently I think just writing them in the Actions as blocks right away instead of dispatch:<hyper> methodcalls is a better place. Gonna try that now and see how it works out.

[22:00] <MasterDuke> I don‚Äôt know what were/are the big missing templates for test-t

[22:00] <MasterDuke> I could find that out

[22:00] <Zoffix> huggable: csv

[22:00] <huggable> Zoffix, https://github.com/Tux/CSV (see `bench csv` for how to run bench)

[22:00] <Zoffix> huggable: bench csv

[22:00] <huggable> Zoffix, export PATH=`pwd`/install/bin:$PATH; cd CSV; for i in $(seq 1 10000); do echo 'hello,","," ",world,"!"'; done > /tmp/hello.csv; time perl6 -Ilib -MText::CSV test-t.pl </tmp/hello.csv

[22:00] <Zoffix> ^ that's how to  run the test-t

[22:01] <MasterDuke> Thanks

[22:01] <Zoffix> well, the export=PATH isn't needed. That's just for it to find the CSV module when using a local build

[22:09] <gfldex> seams 2018 is becoming a pretty fast year :)

[22:13] <Zoffix> ZOFVM: Files=1287, Tests=153128, 149 wallclock secs (21.05 usr  3.29 sys + 3167.06 cusr 168.14 csys = 3359.54 CPU)

[23:31] <lizmat> good night, #perl6-dev!
