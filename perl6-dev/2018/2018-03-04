[01:36] <Geth> ¦ rakudo: 89f33bbee1 | (Zoffix Znet)++ | 2 files

[01:36] <Geth> ¦ rakudo: Fix REPL breakage from last commit

[01:36] <Geth> ¦ rakudo:

[01:36] <Geth> ¦ rakudo: Need to explicitly stringify DepSpec if we gonna .contains it.

[01:36] <Geth> ¦ rakudo:

[01:36] <Geth> ¦ rakudo: REPL testing routines explicitly request the `none` REPL line

[01:36] <Geth> ¦ rakudo: editor, so the exploding logic that tries to figure out line

[01:36] <Geth> ¦ rakudo: editor to use was never exercised.

[01:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/89f33bbee1

[01:39] <Geth> ¦ rakudo: e9cff7954a | (Zoffix Znet)++ | t/02-rakudo/repl.t

[01:39] <Geth> ¦ rakudo: Explicitly unset REPL env vars for the test

[01:39] <Geth> ¦ rakudo:

[01:39] <Geth> ¦ rakudo: In case testing environment has them set for some reason.

[01:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e9cff7954a

[09:32] <AlexDaniel> please someone more knowledgeable review https://github.com/perl6/doc/commit/9b60680b1c7ffc6eb5e03699b141669eec985674

[10:05] <[Tux]> Rakudo version 2018.02.1-110-ge9cff7954 - MoarVM version 2018.02-22-g9233d85e7

[10:05] <[Tux]> csv-test-xs-20      0.459 -  0.469

[10:05] <[Tux]> csv-ip5xs           0.802 -  0.804

[10:05] <[Tux]> test-t --race       1.056 -  1.079

[10:05] <[Tux]> test-t              2.516 -  2.533

[10:05] <[Tux]> csv-ip5xs-20        7.478 -  7.603

[10:05] <[Tux]> test                9.053 -  9.101

[10:05] <[Tux]> test-t-20 --race   15.666 - 16.368

[10:05] <[Tux]> csv-parser         36.423 - 36.623

[10:05] <[Tux]> test-t-20          45.409 - 45.817

[12:15] <jnthn> AlexDaniel: About https://github.com/perl6/doc/commit/9b60680b1c7ffc6eb5e03699b141669eec985674 - either the question should be refined to contain the words "between modules", or it should note that circular dependencies within a single compilation unit (e.g. file) can be handled fine enough by stubbing

[12:16] <jnthn> I see it's under a modules heading, now I look at the context a bit more, but since it's indexed, people could I guess come to it straight from a search

[12:17] <jnthn> But also, since Perl 6 has no "1 file = 1 class" limitation, in many cases moving various classes inside a compilation unit can be a solution too

[12:21] <AlexDaniel> jnthn: https://github.com/perl6/doc/commit/1ffc90ee81 ?

[12:22] <jnthn> AlexDaniel++

[12:48] <MasterDuke> jnthn: a native int array's AT-POS just returns nqp::atposref_i. it's atposref because it has to be writable, correct?

[12:58] <jnthn> Correct

[13:00] <MasterDuke> thanks, trying to figure out that native array optimization we talked about recently

[14:23] <MasterDuke> m: loop (my int $i = 0; $i < 10_000_000; ++$i) { $ = $i }; say now - INIT now

[14:23] <camelia> rakudo-moar e9cff7954: OUTPUT: «1.94084471␤»

[14:23] <MasterDuke> m: for ^10_000_000 -> int $_ { $ = $_ }; say now - INIT now

[14:23] <camelia> rakudo-moar e9cff7954: OUTPUT: «1.6581478␤»

[14:23] <MasterDuke> m: my int $a; loop (my int $i = 0; $i < 10_000_000; ++$i) { $a = $i }; say $a; say now - INIT now

[14:23] <camelia> rakudo-moar e9cff7954: OUTPUT: «9999999␤0.090344␤»

[14:24] <MasterDuke> m: my int $a; for ^10_000_000 -> int $_ { $a = $_ }; say $a; say now - INIT now

[14:24] <camelia> rakudo-moar e9cff7954: OUTPUT: «9999999␤1.42030021␤»

[14:24] <MasterDuke> in the first case, for is faster, in the second, loop is faster

[14:25] <MasterDuke> m: my $a; for ^10_000_000 -> int $_ { $a = $_ }; say $a; say now - INIT now

[14:25] <camelia> rakudo-moar e9cff7954: OUTPUT: «9999999␤0.862367␤»

[14:25] <MasterDuke> m: my $a; loop (my int $i = 0; $i < 10_000_000; ++$i) { $a = $i }; say $a; say now - INIT now

[14:25] <camelia> rakudo-moar e9cff7954: OUTPUT: «9999999␤0.6786487␤»

[14:26] <MasterDuke> and then if you don't type $a, the for becomes faster and the loop slower

[15:05] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1589: Don't call Regexes in HyperRace's GrepCode

[15:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1589

[15:25] <Zoffix> m: my @has := (^10_000).eager; my @wanted := @has.grep(*.contains: '2').List; my $w = '2'; my $x = '2'; use Test; is-deeply @has.grep({ /<{$w}>/}).List, @wanted

[15:25] <camelia> rakudo-moar e9cff7954: OUTPUT: «ok 1 - ␤»

[15:25] <Zoffix> m: my @has := (^10_000).eager; my @wanted := @has.grep(*.contains: '2').List; my $w = '2'; my $x = '2'; use Test; is-deeply @has.grep({ /<{$w}>/}).List, @wanted

[15:25] <camelia> rakudo-moar e9cff7954: OUTPUT: «ok 1 - ␤»

[15:25] <Zoffix> m: my @has := (^10_000).eager; my @wanted := @has.grep(*.contains: '2').List; my $w = '2'; my $x = '2'; use Test; is-deeply @has.race.grep({ /<{$w}>/}).List, @wanted

[15:25] <camelia> rakudo-moar e9cff7954: OUTPUT: «A worker in a parallel iteration (hyper or race) initiated here:␤  in sub _is_deeply at /home/camelia/rakudo-m-inst-1/share/perl6/sources/C712FE6969F786C9380D643DF17E85D06868219E (Test) line 632␤  in sub is-deeply at /home/camelia/rakudo-m-inst-1/…»

[15:26] <Zoffix> jnthn: ^ is the second one meant to work? If yes, any tips for fixing it? I'm getting the same errors when making .grep(Regex) work

[15:26] <Zoffix> it crashes with "Cannot find method 'Any' on object of type Match" or sometimes gives incorrect grepped results

[15:27] <Zoffix> s/second/last one/;

[15:37] <jnthn> Zoffix: Wonder if it's some kind of tripping over $/ thing

[15:38] <jnthn> m: my @has := (^10_000).eager; my @wanted := @has.grep(*.contains: '2').List; my $w = '2'; my $x = '2'; use Test; is-deeply @has.race.grep({ my $/; /<{$w}>/}).List, @wanted

[15:38] <camelia> rakudo-moar e9cff7954: OUTPUT: «A worker in a parallel iteration (hyper or race) initiated here:␤  in sub _is_deeply at /home/camelia/rakudo-m-inst-1/share/perl6/sources/C712FE6969F786C9380D643DF17E85D06868219E (Test) line 632␤  in sub is-deeply at /home/camelia/rakudo-m-inst-1/…»

[15:39] <jnthn> Though in that case I'd have expected the above evaluation to fix it

[15:39] <jnthn> oh

[15:39] <jnthn> m: my @has := (^10_000).eager; my @wanted := @has.grep(*.contains: '2').List; my $w = '2'; my $x = '2'; use Test; is-deeply @has.race.grep({ my $/; m/<{$w}>/}).List, @wanted

[15:39] <camelia> rakudo-moar e9cff7954: OUTPUT: «A worker in a parallel iteration (hyper or race) initiated here:␤  in sub _is_deeply at /home/camelia/rakudo-m-inst-1/share/perl6/sources/C712FE6969F786C9380D643DF17E85D06868219E (Test) line 632␤  in sub is-deeply at /home/camelia/rakudo-m-inst-1/…»

[15:39] <jnthn> Yeah, it's not that

[15:39] <Zoffix> m: my $x = "2"; await ^100000 .map: { start /<{$x}>/.ACCEPTS: "42" }

[15:39] <jnthn> m forces the evaluation right off

[15:39] <camelia> rakudo-moar e9cff7954: ( no output )

[15:39] <Zoffix> m: my $x = "2"; await ^100000 .map: { start /<{$x}>/.ACCEPTS: "42" }

[15:39] <camelia> rakudo-moar e9cff7954: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    Cannot find method 'Any' on object of type Match␤      in code  at <tmp> line 1␤␤»

[15:41] <jnthn> Ah

[15:41] <jnthn> I wonder if it's a mis-scoping in regex bug?

[15:42] <Zoffix> Ah, yeah, it is

[15:43] * Zoffix goes to fix that

[15:47] <Zoffix> Hm, well, that *is* the problem for my last eval, but I'm not seeing the same for the eval with .race.grep

[15:49] <Zoffix> Guess I'll fix the one and then see if the other one still exists.

[15:50] <Zoffix> Ah, I'm blind. Yeah, there's a miscope in the race one as well

[15:50] <jnthn> Zoffix++ # fixer of scopes

[16:15] <AlexDaniel> oh my :|

[16:15] <yoleaux> 12:52Z <tbrowder> AlexDaniel: your English is as good as most native-English speakers whose articles I read online these days, and better than many!

[16:17] <AlexDaniel> did we have any Inline::Perl5 regression reported lately?

[16:17] <AlexDaniel> does not look so…

[17:01] <AlexDaniel> ah, it's a regression in Inline::Perl5 itself!

[17:01] <AlexDaniel> wheeew…

[17:13] <AlexDaniel> .tell nine plz https://github.com/niner/Inline-Perl5/issues/107 :)

[17:13] <yoleaux> AlexDaniel: I'll pass your message to nine.

[17:22] <Zoffix> m: role Foo {  ::?ROLE.^add_multi_method: 'foo', method (|args) { dd args }; ::?ROLE.^add_multi_method: 'foo', method () { dd "herE" }; }; class :: does Foo  {}.new.foo: :foo

[17:22] <camelia> rakudo-moar e9cff7954: OUTPUT: «"herE"␤»

[17:22] <Zoffix> m: role Foo {  ::?ROLE.^add_multi_method: 'foo', method (|args) { dd args }; ::?ROLE.^add_multi_method: 'foo', method (| ()) { dd "herE" }; }; class :: does Foo  {}.new.foo: :foo

[17:22] <camelia> rakudo-moar e9cff7954: OUTPUT: «\(:foo)␤»

[17:23] <Zoffix> The () candidate that commit added still takes all the named ones and it gets selected first when there are no positionals

[17:28] <AlexDaniel> ahhhh

[17:28] <AlexDaniel> I see

[17:32] <Zoffix> Looks like HEAD also has a single-pos-arg multi that has similar problem

[17:36] <Zoffix> m: role Foo {  ::?ROLE.^add_multi_method: 'foo', method (| ()) { 42 }; ::?ROLE.^add_multi_method: 'foo', method (\arg, | ()) { 42 }; ::?ROLE.^add_multi_method: 'foo', method (|args) { 42 }; }; class :: does Foo  {}.new.foo: :foo

[17:36] <camelia> rakudo-moar e9cff7954: OUTPUT: «Cannot resolve caller foo(<anon|63896928>: :foo); none of these signatures match:␤    (Mu $: | is raw ())␤    (Mu $: \arg, | is raw ())␤  in block <unit> at <tmp> line 1␤␤»

[17:37] <Zoffix> (why weren't the last one added?)

[17:49] <dogbert17> m: for 1 .. 100 {my $a = "a" x 1_000_000; $a ~~ /./; }

[17:49] <camelia> rakudo-moar e9cff7954: ( no output )

[17:50] <dogbert17> any ideas as to why the above snippet eats 500 Megs of ram?

[17:51] <Zoffix> m: say 1_000_000*100*4 / 1024 / 1024

[17:51] <camelia> rakudo-moar e9cff7954: OUTPUT: «381.469727␤»

[17:51] <Zoffix> dunno. Do all those strings get made and used before any of them get a chance to be GCed?

[17:54] <dogbert17> good question, I ran valgrind on it and it seems as if most of the 'lost' memory is allocated in a function called 'collapse_strands()'

[17:54] <Zoffix> that's the routine that unpacks roped strings that Str x int makes

[17:55] <Zoffix> huggable: ropes

[17:55] <huggable> Zoffix, Flatten ropes: use nqp; say nqp::indexingoptimized("a" x 10)

[17:55] <AlexDaniel> any reason why it has to do that?

[17:55] <AlexDaniel> to improve matching perf I guess?

[17:56] <AlexDaniel> it kind of makes sense actually, why would anybody be matching a str replicated 1 million times

[17:56] <Zoffix> this uses same amount of RAM on my box; use nqp; for 1 .. 100 {my $a = nqp::indexingoptimized("a" x 1_000_000); $a ~~ /./; }

[17:56] <dogbert17> what happens with memory usage if you remove the match?

[17:57] <Zoffix> and use nqp; my $a = nqp::indexingoptimized("a" x 1_000_000); for 1..100 { $a ~~ /./; } uses 87MB, while `use nqp; for 1 .. 100 {my $a = nqp::indexingoptimized("a" x 1_000_000); $a ~~ /./; nqp::force_gc}` uses 96MB, which corroborates my hypothesis

[17:57] <Zoffix> removing match still uses 470MB

[17:58] <Zoffix> Well, removing it while keepin nqp::indexingoptimized. I'd guess `for 1 .. 100 {my $a = "a" x 1_000_000; }` uses little RAM 'cause the string never gets de-roped

[17:59] <dogbert17> what if your looping through a large file and doing matches on each row, isn't that a similar idiom

[18:00] <Zoffix> damn... best I can tell all QAST::Blocks are now properly scoped locally, but `my @has := (^10_000).eager; my @wanted := @has.grep(*.contains: "2").List; my $w = "2"; my $x = "2"; use Test; is-deeply @has.race.grep({ /<{$w}>/}).List, @wanted` still explodes

[18:00] <dogbert17> the problem description comes from RT #123974

[18:00] <synopsebot> RT#123974 [new]: https://rt.perl.org/Ticket/Display.html?id=123974 [PERF] Running regex on string defined in a loop eats tons of memory

[18:00] <Zoffix> dogbert17: I guess. The GC would run at some point I'd guess

[18:04] <dogbert17> Zoffix: perhaps

[18:07] <Zoffix> :( `my $x = "2"; await ^100000 .map: { start /<{$x}>/.ACCEPTS: "42" }` is also now scoped right but still crashes the same

[18:13] <Zoffix> m: await ^100000 .map: { start /<{"2"}>/.ACCEPTS: "42" }

[18:13] <camelia> rakudo-moar e9cff7954: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    Cannot find method 'Any' on object of type Match␤      in code  at <tmp> line 1␤␤»

[18:13] <Zoffix> don't even need no symbol access even

[18:15] * Zoffix gives Match.INTERPOLATE_ASSERTION a stare

[18:17] <Geth> ¦ rakudo: fb882d498e | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[18:17] <Geth> ¦ rakudo: Fix cases of mis-scoped QAST::Block of regexes

[18:17] <Geth> ¦ rakudo:

[18:17] <Geth> ¦ rakudo: - Annotate regex's QAST::Block with in_stmt_mod and statement_id

[18:17] <Geth> ¦ rakudo:     that's used by migrator routine to figure out what to migrate

[18:17] <Geth> ¦ rakudo: - Mark QAST::NodeList as a descendable node into the raker that

[18:17] <Geth> ¦ rakudo:     looks for stuff to migrate

[18:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fb882d498e

[18:37] <Geth> ¦ rakudo: 5e462e125d | (Zoffix Znet)++ | src/core/Rakudo/Internals/HyperRaceSharedImpl.pm6

[18:37] <Geth> ¦ rakudo: Fix .grep(Regex) on Hyper/Race Seqs

[18:37] <Geth> ¦ rakudo:

[18:37] <Geth> ¦ rakudo: Regex is a Callable, but we can't just invoke it with any

[18:37] <Geth> ¦ rakudo: object we want and gotta call .ACCEPS, which will set up

[18:37] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[18:37] <Geth> ¦ rakudo: the cursor and invoke the regex with it.

[18:37] <Geth> ¦ rakudo:

[18:37] <Geth> ¦ rakudo: Fix by unifying GrepSM and GrepCode classes. Handling the Regex case

[18:38] <Geth> ¦ rakudo: in GrepCode makes that case 99% the same as GrepSM, so just unify

[18:38] <Geth> ¦ rakudo: them and make the class clone Callables and invoke them directly,

[18:38] <Geth> ¦ rakudo: while Regexes and rest of stuff would get .ACCEPTS calls.

[18:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5e462e125d

[18:39] <Zoffix> Ohhhh

[18:39] <Zoffix> /<{"2"}>/ uses EVAL and EVAL ain't (currently) thread-safe

[18:40] <Zoffix> So that's why it's crashing

[18:40] <Zoffix> Well, at least we fixed the QAST::Block migrations :P

[18:42] <Zoffix> (the ticket for &EVAL threadsafety is R#1391 )

[18:42] <synopsebot> R#1391 [open]: https://github.com/rakudo/rakudo/issues/1391 EVAL is not thread safe

[18:43] <Geth> ¦ roast: 169937bec1 | (Zoffix Znet)++ | S32-list/grep.t

[18:43] <Geth> ¦ roast: Cover .grep(Regex) on Race/Hyper seqs

[18:43] <Geth> ¦ roast:

[18:43] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/5e462e125d

[18:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/169937bec1

[18:51] <Geth> ¦ nqp: usev6++ created pull request #429: [JVM] Let seekfh return offset, not file handle

[18:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/429

[18:54] <jstuder> hey 6devs. I have a moar/nqp/rakudo fix (WIP) for signal enums matching the host system that I was hoping to get some feedback on

[18:54] <jstuder> https://github.com/rakudo/rakudo/issues/1588

[18:57] <jstuder> any feedback is appreciated :)

[18:57] <Zoffix> (that stuff's over my head)

[19:02] <jstuder> just need more exposure to C, I think. Trust me, the stuff you are achieving in Rakudo puts my meager efforts to shame :)

[19:05] <jstuder> but we're all trying to get better and to contribute to a worthwhile project at the same time. That's why we're all here right?

[19:05] <Zoffix> ZofBot: is that why you're here?

[19:05] <ZofBot> Zoffix, think he worked in a bank

[19:06] <jstuder> maybe that's not zofbot's reason then :P

[19:17] <Zoffix> ZOFFLOP: t/spec/S32-list/grep.t (new test 45)

[19:17] <Zoffix> The one that test hypers with regexes that interpolates a shared scalar var :|

[19:18] <Zoffix> doesn't wanna flop when runnin on its own

[19:26] <jnthn> jstuder: Will try and look at that this week (tomorrow if I can); prod me if I forget :)

[19:28] <jstuder> ok will do. Nothing urgent but I just want to know that I'm not going about things the wrong way. Thanks.

[19:30] <timotimo> jstuder: the first MVMROOT for sig_hash isn't right, you only need to root it after it was returned

[19:32] <Zoffix> Ah, *phew* the flop was due to a flawed test :)

[19:32] <timotimo> and in MVM_io_signal_handle we probably have to root a few things in case io_populate_sig_values gets called and causes a GC run, then queue, schedulee, and async_type may become stale pointers

[19:33] <Geth> ¦ roast: e8e8329804 | (Zoffix Znet)++ | S32-list/grep.t

[19:33] <Geth> ¦ roast: Do not assume .race returns stuff in order

[19:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e8e8329804

[19:34] <jstuder> timotimo: as far a rooting goes, does that apply to the other vars in the MVMROOT3 as well? We only want to root after the MVMObject is created?

[19:35] <timotimo> if you initialize the variables to NULL, i believe it would be safe

[19:41] <jstuder> so a best practice would be to initialize MVMCollectable (or what could be considered Collectable) pointers to either their desired values or to NULL before ROOTing so that if GC kicks in it's not trying to free whatever garbage is in memory, am I understanding correctly?

[19:47] <Zoffix> Man t/spec/S10-packages/precompilation.t flopped and now it stuck in failed state in `not ok 47 - precompiled module constants get updated on change`

[19:47] <Zoffix> 'cause I modified &dd and I doubt that affected that test.

[19:47] <Zoffix> Tried running `rm -fr **/.precomp` but it still fails :/

[19:48] * Zoffix runs `touch src/core/Any.pm6` and recompiles

[19:51] <Zoffix> nope, still fails. Weird

[19:52] <Zoffix> Ah, I guess I aborted one run and now one of the files got stuck modifed. This is why it's a good idea not to modify test files in-place during runs :/

[19:52] <travis-ci> Rakudo build failed. Zoffix Znet 'Fix .grep(Regex) on Hyper/Race Seqs

[19:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/348998026 https://github.com/rakudo/rakudo/compare/fb882d498ede...5e462e125df9

[19:53] <Zoffix> https://travis-ci.org/rakudo/rakudo/builds/348998026

[19:53] <Zoffix> *sigh* useless robot

[19:54] <timotimo> jstuder: it's less that it tries to free garbage, it's more that it'll try to figure out what kind of object it is by following a few pointers, which are rather likely invalid, and then invoking a function pointer afterwards

[19:58] <Zoffix> ZOFFLOP: t/spec/S11-modules/require.t

[19:58] <Zoffix> ZOFVM: Files=1290, Tests=153252, 151 wallclock secs (20.41 usr  3.39 sys + 3231.36 cusr 164.81 csys = 3419.97 CPU)

[19:59] <Geth> ¦ roast: c20e38ea2d | usev6++ | S32-encoding/encoder.t

[19:59] <Geth> ¦ roast: [JVM] Fudge failing tests for encode-chars

[19:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c20e38ea2d

[20:00] <Geth> ¦ rakudo: 7773c3d5e4 | (Zoffix Znet)++ | src/core/Any.pm6

[20:00] <Geth> ¦ rakudo: Do not make Failures handled in &dd

[20:00] <Geth> ¦ rakudo:

[20:00] <Geth> ¦ rakudo: Previously this didn't matter much, as .perl of both

[20:00] <Geth> ¦ rakudo: types of Failures was the same, but now that that's fixed, the

[20:00] <Geth> ¦ rakudo: output may make it seem the value given to &dd is an

[20:00] <Geth> ¦ rakudo: already-handled Failure, which isn't the case.

[20:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7773c3d5e4

[20:01] <Geth> ¦ rakudo: b27c548fb6 | (Zoffix Znet)++ | 2 files

[20:01] <Geth> ¦ rakudo: Differentiate precomp NC sub setup markers

[20:01] <Geth> ¦ rakudo:

[20:01] <Geth> ¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1576 R#1576

[20:01] <Geth> ¦ rakudo:

[20:01] <Geth> ¦ rakudo: If a NativeCalled sub used is during precomp, it's marked as

[20:01] <Geth> ¦ rakudo: `$!setup`. However, when it's later used in non-precomp environment,

[20:01] <synopsebot> R#1576 [closed]: https://github.com/rakudo/rakudo/issues/1576 [SEGV] Assigning NativeCall return value to constant segfaults on calling the sub again

[20:01] <Geth> ¦ rakudo: the stuff setup does is not available and so we get a SEGV.

[20:01] <Geth> ¦ rakudo:

[20:01] <Geth> ¦ rakudo: Fix by using a separate marker for $!setup when we're in precomp

[20:01] <Geth> ¦ rakudo: mode so that when we switch to non-precomp mode, we setup again.

[20:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b27c548fb6

[20:01] <Geth> ¦ rakudo: b5100d6a20 | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[20:01] <Geth> ¦ rakudo: Merge pull request #1577 from rakudo/fix-R-1576--native-call-segv

[20:01] <Geth> ¦ rakudo:

[20:02] <Geth> ¦ rakudo: Differentiate precomp NC sub setup markers

[20:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b5100d6a20

[20:02] <jstuder> timotimo: ah i see. Thanks for the advice.

[20:06] <Zoffix> ZOFVM: Files=1290, Tests=153253, 147 wallclock secs (21.13 usr  2.97 sys + 3147.11 cusr 156.99 csys = 3328.20 CPU)

[20:16] <Geth> ¦ roast: a3e2a474f7 | usev6++ | S17-supply/throttle.t

[20:16] <Geth> ¦ roast: [JVM] Skip dying test for Supply.throttle

[20:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a3e2a474f7

[21:01] <travis-ci> Rakudo build passed. Zoffix Znet 'Do not make Failures handled in &dd

[21:01] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/349019721 https://github.com/rakudo/rakudo/compare/5e462e125df9...7773c3d5e4f5

[21:25] <AlexDaniel> .tell jnthn can you install zstd and lrzip on your system? If yes, what version of zstd?

[21:25] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[21:25] <AlexDaniel> .tell jnthn asking because you're still assigned on R#1259, and now I have an easy way for you to run it on your system. As long as you can get zstd and lrzip installed!

[21:25] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[21:25] <synopsebot> R#1259 [open]: https://github.com/rakudo/rakudo/issues/1259 [SEGV][regression] SEGV when running whateverable tests

[21:26] <AlexDaniel> .tell also needs to be linux 64-bit

[21:26] <yoleaux> AlexDaniel: I'll pass your message to also.

[21:28] <travis-ci> Rakudo build failed. Zoffix Znet 'Merge pull request #1577 from rakudo/fix-R-1576--native-call-segv

[21:28] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/349020209 https://github.com/rakudo/rakudo/compare/7773c3d5e4f5...b5100d6a20d2

[23:25] <timotimo> https://wakelift.de/2018/03/05/delays-and-delights/  -  my first TPF grant report post is up now

[23:35] <jnthn> timotimo++

[23:35] <yoleaux> 21:25Z <AlexDaniel> jnthn: can you install zstd and lrzip on your system? If yes, what version of zstd?

[23:35] <yoleaux> 21:25Z <AlexDaniel> jnthn: asking because you're still assigned on R#1259, and now I have an easy way for you to run it on your system. As long as you can get zstd and lrzip installed!

[23:35] <synopsebot> R#1259 [open]: https://github.com/rakudo/rakudo/issues/1259 [SEGV][regression] SEGV when running whateverable tests
