[00:36] <AlexDaniel> releasable6: next

[00:36] <releasable6> AlexDaniel, Next release in 7 days and ≈18 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[00:36] <releasable6> AlexDaniel, Details: https://gist.github.com/77d3cab5f775686253028f27d7e04e0f

[00:37] <AlexDaniel> oh wow, time flies

[00:48] <Geth> ¦ roast/rework-dot-equals-opt: 2e5fb5b7f5 | (Zoffix Znet)++ | S03-operators/inplace.t

[00:48] <Geth> ¦ roast/rework-dot-equals-opt: Localize class used in a test

[00:48] <Geth> ¦ roast/rework-dot-equals-opt: review: https://github.com/perl6/roast/commit/2e5fb5b7f5

[01:05] <Geth> ¦ roast/rework-dot-equals-opt: c932edc5a1 | (Zoffix Znet)++ | S03-operators/inplace.t

[01:05] <Geth> ¦ roast/rework-dot-equals-opt: Test .= inside andthen and relatives

[01:05] <Geth> ¦ roast/rework-dot-equals-opt:

[01:05] <Geth> ¦ roast/rework-dot-equals-opt: Closes https://github.com/rakudo/rakudo/issues/1506

[01:05] <Geth> ¦ roast/rework-dot-equals-opt: Rakudo fix: https://github.com/rakudo/rakudo/commit/2daad12f5897835

[01:05] <Geth> ¦ roast/rework-dot-equals-opt: review: https://github.com/perl6/roast/commit/c932edc5a1

[01:49] <Geth> ¦ roast/rework-dot-equals-opt: cfa9debfd5 | (Zoffix Znet)++ | S03-operators/inplace.t

[01:49] <Geth> ¦ roast/rework-dot-equals-opt: More coverage for .= calls

[01:49] <Geth> ¦ roast/rework-dot-equals-opt: review: https://github.com/perl6/roast/commit/cfa9debfd5

[01:53] <Geth> ¦ rakudo/rework-dot-equals-opt: 01237782fe | (Zoffix Znet)++ | t/packages/Test/Helpers/QAST.pm6

[01:53] <Geth> ¦ rakudo/rework-dot-equals-opt: Implement `qast-contains-callmethod` helper routine

[01:53] <Geth> ¦ rakudo/rework-dot-equals-opt: review: https://github.com/rakudo/rakudo/commit/01237782fe

[02:00] <Geth> ¦ roast/rework-dot-equals-opt: 07da836c33 | (Zoffix Znet)++ | S03-operators/inplace.t

[02:00] <Geth> ¦ roast/rework-dot-equals-opt: More coverage for .= calls

[02:00] <Geth> ¦ roast/rework-dot-equals-opt: review: https://github.com/perl6/roast/commit/07da836c33

[02:01] <Geth> ¦ roast/rework-dot-equals-opt: 804308186a | (Zoffix Znet)++ | S03-operators/inplace.t

[02:01] <Geth> ¦ roast/rework-dot-equals-opt: Improve test routines used

[02:01] <Geth> ¦ roast/rework-dot-equals-opt:

[02:01] <Geth> ¦ roast/rework-dot-equals-opt: By using `isa-ok` the tests would pass even if `.=` portions never

[02:01] <Geth> ¦ roast/rework-dot-equals-opt: ran. Test the variable actually have type objects in 'em now.

[02:01] <Geth> ¦ roast/rework-dot-equals-opt: review: https://github.com/perl6/roast/commit/804308186a

[02:13] <Geth> ¦ rakudo/rework-dot-equals-opt: abea32429b | (Zoffix Znet)++ | 2 files

[02:13] <Geth> ¦ rakudo/rework-dot-equals-opt: Restore .dispatch:<.=> optimization

[02:13] <Geth> ¦ rakudo/rework-dot-equals-opt:

[02:13] <Geth> ¦ rakudo/rework-dot-equals-opt: The original attempt[^1] tried to get rid of `dispatch:<.=>`

[02:13] <Geth> ¦ rakudo/rework-dot-equals-opt: altogether by generated optimized QAST right away, in the Actions.

[02:13] <Geth> ¦ rakudo/rework-dot-equals-opt: That proved to be a flawed approach, as `.=` variants

[02:13] <Geth> ¦ rakudo/rework-dot-equals-opt: (dotty methodcall and infixish op), as well as named arg variants

[02:13] <Geth> ¦ rakudo/rework-dot-equals-opt: (normal and fake-infix adverbs), along with various places where

[02:13] <Geth> ¦ rakudo/rework-dot-equals-opt: <…commit message has 8 more lines…>

[02:13] <Geth> ¦ rakudo/rework-dot-equals-opt: review: https://github.com/rakudo/rakudo/commit/abea32429b

[02:13] <Geth> ¦ rakudo: zoffixznet++ created pull request #1509: Rework dot equals opt

[02:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1509

[02:14] <Geth> ¦ rakudo/master: 4 commits pushed by (Zoffix Znet)++

[02:14] <Geth> ¦ rakudo/master: 2daad12f58 | Revert "QASTify .dispatch:<.=> calls"

[02:14] <Geth> ¦ rakudo/master: 01237782fe | Implement `qast-contains-callmethod` helper routine

[02:14] <Geth> ¦ rakudo/master: abea32429b | Restore .dispatch:<.=> optimization

[02:14] <Geth> ¦ rakudo/master: 300f2f7439 | Merge pull request #1509 from rakudo/rework-dot-equals-opt

[02:14] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/1c894e418d...300f2f7439

[02:14] <Geth> ¦ roast: zoffixznet++ created pull request #388: Rework dot equals opt

[02:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/388

[02:14] <Geth> ¦ roast/master: 5 commits pushed by (Zoffix Znet)++

[02:14] <Geth> ¦ roast/master: 2e5fb5b7f5 | Localize class used in a test

[02:14] <Geth> ¦ roast/master: c932edc5a1 | Test .= inside andthen and relatives

[02:14] <Geth> ¦ roast/master: 07da836c33 | More coverage for .= calls

[02:14] <Geth> ¦ roast/master: 804308186a | Improve test routines used

[02:14] <Geth> ¦ roast/master: ff4270b164 | Merge pull request #388 from perl6/rework-dot-equals-opt

[02:14] <Geth> ¦ roast/master: review: https://github.com/perl6/roast/compare/7bd36fc938...ff4270b164

[02:21] <Geth> ¦ rakudo: 2ba7634ca8 | (Zoffix Znet)++ | t/packages/Test/Helpers/QAST.pm6

[02:21] <Geth> ¦ rakudo: Fix bugglet in `qast-contains-callmethod` recursion

[02:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2ba7634ca8

[02:22] <Geth> ¦ rakudo: 7793f420e4 | (Zoffix Znet)++ | t/08-performance/02-qast-rewrites.t

[02:22] <Geth> ¦ rakudo: Test full QAST for .= opt

[02:22] <Geth> ¦ rakudo:

[02:22] <Geth> ¦ rakudo: Some of the .dispatch:<.=>s can hide in QAST::Blocks

[02:22] <Geth> ¦ rakudo: declarations portion.

[02:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7793f420e4

[02:27] <Geth> ¦ rakudo: FCO++ created pull request #1510: Fix Parameter.usage-name, if the parameter name's second char is a * …

[02:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1510

[02:34] <Geth> ¦ rakudo: 3c73099ce8 | (Fernando Correa de Oliveira)++ | src/core/Parameter.pm

[02:34] <Geth> ¦ rakudo: Fix Parameter.usage-name, if the parameter name's second char is a * or a ! it ignores it

[02:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3c73099ce8

[02:34] <Geth> ¦ rakudo: 07748c4994 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Parameter.pm

[02:34] <Geth> ¦ rakudo: Merge pull request #1510 from FCO/fix-usage-name

[02:34] <Geth> ¦ rakudo:

[02:34] <Geth> ¦ rakudo: Fix Parameter.usage-name, if the parameter name's second char is a * …

[02:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/07748c4994

[02:59] <travis-ci> Rakudo build passed. Zoffix Znet 'Merge pull request #1509 from rakudo/rework-dot-equals-opt

[02:59] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/339735333 https://github.com/rakudo/rakudo/compare/1c894e418d69...300f2f7439e1

[03:30] <Geth> ¦ rakudo: 2cc7b6317e | (Zoffix Znet)++ | src/core/Any-iterable-methods.pm

[03:30] <Geth> ¦ rakudo: Fix Any.tail(Callable) violating Iterator protocol

[03:30] <Geth> ¦ rakudo:

[03:30] <Geth> ¦ rakudo: Fixes RT#131617: https://rt.perl.org/Ticket/Display.html?id=131617

[03:30] <Geth> ¦ rakudo:

[03:30] <Geth> ¦ rakudo: When we .skip-at-least on our iterator, it's possible we skipped

[03:30] <Geth> ¦ rakudo: all the values already. When we then use that same iterator

[03:30] <Geth> ¦ rakudo: to make a new Seq, we violate protocol when that Seq is consumed.

[03:30] <synopsebot> RT#131617 [new]: https://rt.perl.org/Ticket/Display.html?id=131617 [BUG] Any.tail(Callable) violates Iterator protocol

[03:30] <Geth> ¦ rakudo:

[03:30] <Geth> ¦ rakudo: Fix by checking return value of .skip-at-least and returning

[03:30] <Geth> ¦ rakudo: an empty Seq when we skipped all the values.

[03:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2cc7b6317e

[03:31] <Geth> ¦ roast: 3e60598fea | (Zoffix Znet)++ | S32-list/tail.t

[03:31] <Geth> ¦ roast: Test .tail(Callable) does not violate Iterator protocol

[03:31] <Geth> ¦ roast:

[03:31] <Geth> ¦ roast: RT#131617: https://rt.perl.org/Ticket/Display.html?id=131617

[03:31] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/2cc7b6317e

[03:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3e60598fea

[03:32] <travis-ci> Rakudo build passed. Zoffix Znet 'Test full QAST for .= opt

[03:32] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/339736696 https://github.com/rakudo/rakudo/compare/2ba7634ca819...7793f420e4b0

[04:10] <Geth> ¦ rakudo: b2a21fa965 | (Zoffix Znet)++ | src/core/Failure.pm

[04:10] <Geth> ¦ rakudo: Fix .perl of handled Failures

[04:10] <Geth> ¦ rakudo:

[04:10] <Geth> ¦ rakudo: Fixes RT#131496: https://rt.perl.org/Ticket/Display.html?id=131496

[04:10] <Geth> ¦ rakudo:

[04:10] <Geth> ¦ rakudo: Simple put them through the `orelse` call to set the `handled`

[04:10] <Geth> ¦ rakudo: flag, if we need to set it.

[04:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b2a21fa965

[04:10] <synopsebot> RT#131496 [new]: https://rt.perl.org/Ticket/Display.html?id=131496 [BUG] Failure.perl doesn't roundrip `handled` flag

[04:11] <Geth> ¦ roast: 9625f78f3e | (Zoffix Znet)++ | S04-exceptions/fail.t

[04:11] <Geth> ¦ roast: Test .perl of handled Failures

[04:11] <Geth> ¦ roast:

[04:11] <Geth> ¦ roast: RT#131496: https://rt.perl.org/Ticket/Display.html?id=131496

[04:11] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/b2a21fa965

[04:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9625f78f3e

[04:17] <travis-ci> Rakudo build passed. Zoffix Znet 'Merge pull request #1510 from FCO/fix-usage-name

[04:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/339738662 https://github.com/rakudo/rakudo/compare/7793f420e4b0...07748c4994a6

[04:49] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix Any.tail(Callable) violating Iterator protocol

[04:49] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/339747194 https://github.com/rakudo/rakudo/compare/07748c4994a6...2cc7b6317e98

[04:59] <lizmat> S32-str/utf8-c8.t , test 56 is failing reliably for me (on MacOS

[05:00] <lizmat> # at t/spec/S32-str/utf8-c8.t line 195

[05:00] <lizmat> # expected: $(6, 171)

[05:00] <lizmat> #      got: $(6, 37, 65, 66)

[05:15] <Geth> ¦ rakudo: 311ef07fd8 | (Elizabeth Mattijsen)++ | src/core/List.pm

[05:15] <Geth> ¦ rakudo: Unify List.roll/pick invocant specification

[05:15] <Geth> ¦ rakudo:

[05:15] <Geth> ¦ rakudo: One could argue that a List:U should be considered a one-element List though.

[05:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/311ef07fd8

[05:18] <lizmat> sleep&

[13:07] <Geth> ¦ rakudo: ac87ea2ac8 | (Stefan Seifert)++ | src/core/CompUnit/PrecompilationStore/File.pm

[13:07] <Geth> ¦ rakudo: Fix multi-threaded precompilation

[13:07] <Geth> ¦ rakudo:

[13:07] <Geth> ¦ rakudo: The lock file is sufficient to protect the precompilation store from access

[13:07] <Geth> ¦ rakudo: by multiple processes. However if multiple threads trigger

[13:07] <Geth> ¦ rakudo: precompilation they will use the same store object which thinks its

[13:07] <Geth> ¦ rakudo: already sufficiently locked. So multiple writers within the same process

[13:07] <Geth> ¦ rakudo: will access the store concurrently. We cannot rely on the lock file in

[13:07] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[13:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ac87ea2ac8

[13:38] <lizmat> Files=1234, Tests=76203, 305 wallclock secs (14.47 usr  5.34 sys + 2088.72 cusr 209.17 csys = 2317.70 CPU)

[13:48] <Geth> ¦ rakudo: f559c6d8bf | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[13:48] <Geth> ¦ rakudo: Fix issues in constant type declarations

[13:48] <Geth> ¦ rakudo:

[13:48] <Geth> ¦ rakudo: Partially addresses https://github.com/rakudo/rakudo/issues/1504

[13:48] <Geth> ¦ rakudo:

[13:48] <Geth> ¦ rakudo: - Fixes crash with types with `::` in the name

[13:48] <Geth> ¦ rakudo: - Fixes crash with parametarized types like `Array[Numeric]`

[13:48] <Geth> ¦ rakudo: - Changes default type to `Mu` instead of `Any`, to match what we

[13:48] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[13:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f559c6d8bf

[13:48] * teatime announces (expecting little interest/relevence to y'all, but just in case I'm wrong) his intention to volunteer w/ the Debian Rakudo packaging team.

[13:50] <DrForr> teatime++

[14:57] <AlexDaniel> [Coke]: maybe you can find a use for this: https://github.com/perl6/doc/issues/1765#issuecomment-364660372

[16:03] <Zoffix> m: my Numeric constant @foo = 1, 2, 3;

[16:03] <camelia> rakudo-moar f559c6d8b: ( no output )

[16:04] <Zoffix> Having trouble imagining good behaviour for that ^. One one hand, it could typecheck the assigned value is a Positional[Numeric]. However, we allow `.=` op, so then `my Numeric constant @foo = 1, 2, 3` would need to be List[Numeric], but Lists cannot be parametarized (making an Array[Numeric] in this case is too surpising IMO, 'cause it ain't no constant).

[16:05] <Zoffix> I think I'll just make this case throw something along the lines of "Parametarization of {$sigil}-sigiled constants is not supported"

[16:06] <Zoffix> * "so then..." I meant "so then `my Numeric constant @foo .= 1, 2, 3` would need to be" (with the .= op)

[16:21] <AlexDaniel> m: for 1..1000 { $^i %% $_ && put "$_ " for ^$i }

[16:21] <camelia> rakudo-moar f559c6d8b: OUTPUT: «(signal SEGV)1 ␤1 ␤1 ␤2 ␤1 ␤1 ␤2 ␤3 ␤1 ␤1 ␤2 ␤4 ␤1 ␤3 ␤1 ␤2 ␤5 ␤1 ␤1 ␤2 ␤3 ␤4 ␤6 ␤1 ␤1 ␤2 ␤7 ␤1 ␤3 ␤5 ␤1 ␤2 ␤4 ␤8 ␤1 ␤1 ␤2 ␤3 ␤6 ␤9 ␤1 ␤1 ␤2 ␤4 ␤5 ␤10 ␤1 ␤3 …»

[16:24] <Zoffix> m: my constant %h = :{(True) => 42}; %h<foo> = 42; dd %h

[16:24] <camelia> rakudo-moar f559c6d8b: OUTPUT: «:{Bool::True => 42, :foo(42)}␤»

[16:24] <Zoffix> hmm

[16:25] <Zoffix> c: 2017.12 my constant %h = %(:70bar, :42foo); %h<foo> = 42; dd %h

[16:25] <committable6> Zoffix, ¦2017.12: «Hash % = {:bar(70), :foo(42)}␤»

[16:25] <Zoffix> I thought we did some sort of decontainerization or something

[16:26] <Zoffix> m: my constant @h = :70bar, :42foo; dd @h

[16:26] <camelia> rakudo-moar f559c6d8b: OUTPUT: «(:bar(70), :foo(42))␤»

[16:26] <Zoffix> m: my constant @h = [:70bar, :42foo]; dd @h

[16:26] <camelia> rakudo-moar f559c6d8b: OUTPUT: «[:bar(70), :foo(42)]␤»

[16:33] <Zoffix> Ah, k, I see: https://twitter.com/zoffix/status/853669556178563072

[16:34] <Zoffix> I assigned a single pair and thought it ended up an immutable Hash, but it just remained as Pair

[16:35] <Zoffix> Then, I guess the paramaterization thing does make sense.

[16:35] <Zoffix> Except that a `constant` with % or @ sigil could be not a constant at all.

[16:36] <Zoffix> Need to write down the spec for this stuff before implementing anything.

[16:36] * Zoffix &

[18:52] <Geth> ¦ rakudo: 5bd4e27948 | (Zoffix Znet)++ | docs/archive/constants-type-constraints-proposal-2018-02-10.md

[18:52] <Geth> ¦ rakudo: Add constants type constraints proposal

[18:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5bd4e27948

[18:53] <Geth> ¦ rakudo: a66af37f88 | (Zoffix Znet)++ | docs/archive/constants-type-constraints-proposal-2018-02-10.md

[18:53] <Geth> ¦ rakudo: Add TOC

[18:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a66af37f88

[18:54] <Zoffix> .tell jnthn Wrote down a proposal for how I imagine type constraints on constants working, if you wanted to comment. This is basically clarification to 6.c spec rather than anything new: https://github.com/rakudo/rakudo/blob/master/docs/archive/constants-type-constraints-proposal-2018-02-10.md

[18:54] <yoleaux> Zoffix: I'll pass your message to jnthn.

[18:54] <Zoffix> .tell TimToady Wrote down a proposal for how I imagine type constraints on constants working, if you wanted to comment. This is basically clarification to 6.c spec rather than anything new: https://github.com/rakudo/rakudo/blob/master/docs/archive/constants-type-constraints-proposal-2018-02-10.md

[18:54] <yoleaux> Zoffix: I'll pass your message to TimToady.

[18:55] <Zoffix> oopps copy-pasta fail

[18:57] <Geth> ¦ rakudo: c059563742 | (Zoffix Znet)++ | docs/archive/constants-type-constraints-proposal-2018-02-10.md

[18:57] <Geth> ¦ rakudo: Fix editing glitch

[18:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c059563742

[19:21] <Geth> ¦ rakudo: 467d8945b1 | (Zoffix Znet)++ | docs/archive/constants-type-constraints-proposal-2018-02-10.md

[19:21] <Geth> ¦ rakudo: Clarify reasoning for X::ParametricConstant

[19:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/467d8945b1

[19:39] <Geth> ¦ rakudo: 801b1fa8f2 | (Samantha McVey)++ | 8 files

[19:39] <Geth> ¦ rakudo: Fix Unicode prop tests on Windows

[19:39] <Geth> ¦ rakudo:

[19:39] <Geth> ¦ rakudo: Filenames that contain `:` are not allowed on Windows, so use `;`

[19:39] <Geth> ¦ rakudo: instead.

[19:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/801b1fa8f2

[19:52] <Geth> ¦ roast: 85dab99cee | (Zoffix Znet)++ | S03-operators/inplace.t

[19:52] <Geth> ¦ roast: Test .= with constants

[19:52] <Geth> ¦ roast:

[19:52] <Geth> ¦ roast: Part of https://github.com/rakudo/rakudo/issues/1504

[19:52] <Geth> ¦ roast:

[19:52] <Geth> ¦ roast: The fake-infix adverbs don't yet work. Couldn't get the fudger

[19:52] <Geth> ¦ roast: to fudge them so I just commented them out (will work on them

[19:52] <Geth> ¦ roast: very soon anyway)

[19:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/85dab99cee

[20:53] <travis-ci> Rakudo build passed. Samantha McVey 'Fix Unicode prop tests on Windows

[20:53] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/339929257 https://github.com/rakudo/rakudo/compare/467d8945b19c...801b1fa8f213

[20:54] <Geth> ¦ nqp: 8e7201eb64 | (Zoffix Znet)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[20:54] <Geth> ¦ nqp: Fix slurpies in `if` ops; jnthn++ for the tip

[20:54] <Geth> ¦ nqp:

[20:54] <Geth> ¦ nqp: Fixes RT#105872: https://rt.perl.org/Ticket/Display.html?id=105872

[20:54] <Geth> ¦ nqp:

[20:54] <Geth> ¦ nqp: When deciding whether the block needs the args, we check

[20:54] <Geth> ¦ nqp: the arity. However, for slurpies, arity is 0, so the code

[20:55] <Geth> ¦ nqp: think we don't need no args passed.

[20:55] <synopsebot> RT#105872 [open]: https://rt.perl.org/Ticket/Display.html?id=105872 [BUG] 42, 44, 22 -> *@a { say @a.perl }

[20:55] <Geth> ¦ nqp:

[20:55] <Geth> ¦ nqp: Fix by looking at .count if .arity is zero.

[20:55] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8e7201eb64

[20:57] <Geth> ¦ rakudo: dfb6d951d7 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[20:57] <Geth> ¦ rakudo: [NQP Bump] 8e7201e Fix slurpies in `if` ops; j […]

[20:57] <Geth> ¦ rakudo:

[20:57] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.01-55-g96e9bae...2018.01-56-g8e7201e

[20:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dfb6d951d7

[20:57] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-55-g96e9bae...2018.01-56-g8e7201e

[20:58] <Geth> ¦ rakudo: ef1d22f4c1 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[20:58] <Geth> ¦ rakudo: Set count ann to Inf if we got any pos slurpies

[20:58] <Geth> ¦ rakudo:

[20:58] <Geth> ¦ rakudo: We use it to figure out whether we need to pass args to

[20:58] <Geth> ¦ rakudo: `if` ops: https://github.com/perl6/nqp/commit/8e7201eb64

[20:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ef1d22f4c1

[21:03] <Geth> ¦ roast: aa90737df1 | (Zoffix Znet)++ | S04-statements/if.t

[21:03] <Geth> ¦ roast: Test `if` with slurpies on its block

[21:03] <Geth> ¦ roast:

[21:03] <Geth> ¦ roast: RT#105872: https://rt.perl.org/Ticket/Display.html?id=105872

[21:03] <Geth> ¦ roast:

[21:03] <Geth> ¦ roast: Rakudo fix: https://github.com/perl6/nqp/commit/8e7201eb64

[21:03] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/dfb6d951d7

[21:03] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/ef1d22f4c1

[21:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/aa90737df1

[21:27] <dogbert17> m: say "ab" ~~ /^ a ?% (b) $/

[21:27] <camelia> rakudo-moar ef1d22f4c: OUTPUT: «===SORRY!===␤QAST::Block with cuid 1 has not appeared␤»
