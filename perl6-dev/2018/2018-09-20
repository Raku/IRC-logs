[00:06] *** ggoebel_ left
[00:19] *** lizmat left
[00:23] *** lizmat joined
[00:24] *** p6bannerbot sets mode: +v lizmat

[00:28] *** lizmat left
[00:41] <Geth> ¦ roast: 8fdad7f0dc | (Zoffix Znet)++ | S17-procasync/bind-handles.t

[00:41] <Geth> ¦ roast: [v6.d REVIEW] Use standard temp file routines in Proc::Async

[00:41] <Geth> ¦ roast: 

[00:41] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/ebac29a7e

[00:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8fdad7f0dc

[00:45] *** Kaiepi left
[00:47] *** PufferBot joined
[00:47] *** p6bannerbot sets mode: +v PufferBot

[00:57] *** ggoebel_ joined
[00:58] *** p6bannerbot sets mode: +v ggoebel_

[01:00] *** go|dfish left
[01:00] *** mst left
[01:00] *** moritz left
[01:00] *** krunen left
[01:00] *** krunen joined
[01:00] *** moritz joined
[01:00] *** mst joined
[01:00] *** p6bannerbot sets mode: +v mst

[01:01] *** mst left
[01:01] *** mst joined
[01:01] *** livingstone.freenode.net sets mode: +v mst

[01:01] *** p6bannerbot sets mode: +v mst

[01:01] *** go|dfish joined
[01:01] *** p6bannerbot sets mode: +v go|dfish

[01:01] *** p6bannerbot sets mode: +v krunen

[01:01] *** p6bannerbot sets mode: +v moritz

[01:25] <[Coke]> tony-o: but why? if it has to be doing something exactly like core, shouldn't there be a core way to do it so it's not got to be duplicative?

[01:26] <timotimo> we don't really want to specify a json parser and serializer to be in the perl6 language, though?

[01:27] <[Coke]> I would prefer we didn't do that, yes.

[01:31] <timotimo> though we could also just not specify the whole compunit repo format either

[01:31] <timotimo> on the other hand, the meta6.json format is also already json

[01:32] *** MasterDuke left
[01:34] <timotimo> on the third hand, we could perhaps say "there must be some serialization format" and the ecosystem api would offer whatever the implementation likes …

[01:34] <timotimo> ...

[01:37] <timotimo> this is dumb :) :) :)

[01:37] <timotimo> we should invent our own format, designed explicitly for being as dumb as possible, and only to support what we actually need

[01:39] <timotimo> let's take a page out of klingon's design and mix together properties that are as foreign to each other as we possibly can

[01:39] <timotimo> every string begins with a BOM and ends in a particular emoji

[01:40] <timotimo> every new element must be on a new line starting with as many spaces as the file had characters up to that point, as determined by twitter's character counting algorithm

[01:40] <timotimo> the beginning five bytes of the file must be the first five bytes of the sha256 of the entire file

[01:42] <timotimo> array entries are actually written top-to-bottom in the file

[01:52] <geekosaur> ...first system is intercal, second system syndrome still gives you xml >.>

[01:59] *** Ursula21 joined
[02:00] *** Ursula21 left
[02:05] <timotimo> since array elements have to go vertically, files with insufficiently many lines must be padded with at least the first 50 words of "lorem ipsum". typos or wrong words must result in a memory access violation via accessing the address 0x00 + position of first wrong character

[02:18] *** combro2k joined
[02:19] *** combro2k left
[06:13] *** Ipsilon22 joined
[06:15] *** Ipsilon22 left
[06:17] *** robertle joined
[06:18] *** p6bannerbot sets mode: +v robertle

[06:22] *** Guest37021 joined
[06:23] *** Guest37021 left
[06:24] *** patrickb joined
[06:24] *** p6bannerbot sets mode: +v patrickb

[06:38] *** robertle left
[07:26] *** hankache joined
[07:26] *** lizmat joined
[07:27] *** p6bannerbot sets mode: +v hankache

[07:27] *** p6bannerbot sets mode: +v lizmat

[07:44] *** whartung17 joined
[07:45] <nine> Ok, on the JSON discussion: what is keeping us from just swapping out our code with that from JSON::Fast? Looks like the easiest win to me.

[07:45] *** pounard27 joined
[07:47] *** whartung17 left
[07:50] *** [TuxCM] left
[07:50] *** pounard27 left
[07:52] <lizmat> FWIW, I have no special love for the quick parser that I wrote...  so it can be removed at any time afaic

[07:52] <yoleaux> 19 Sep 2018 22:47Z <AlexDaniel> lizmat: I think you should try that parser on these files: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan.json http://ecosystem-api.p6c.org/projects.json

[07:52] <yoleaux> 06:18Z <El_Che> lizmat: You have a comment on your second p5-6 article https://opensource.com/article/18/8/garbage-collection-perl-6

[07:52] <yoleaux> 06:19Z <El_Che> lizmat: And an error in the 3rd (p5: say @bar[1]) https://opensource.com/article/18/8/containers-perl-6

[07:54] <lizmat> .tell El_Che those pseky P6isms keep creeping in  :-(   alas, I cannot correct the artical afaik

[07:54] <yoleaux> lizmat: I'll pass your message to El_Che.

[08:02] <patrickb> What files is the rakudo internal json parser parsing? Exclusively the META6.json files? I bet one could tune JSON::Fast a lot to only serve this file...

[08:05] <nine> patrickb: yes, it's about META6.json files - which can become a lot more complex than most of them are now. Take e.g. https://github.com/niner/Inline-Python/blob/master/META6.json

[08:05] <nine> But anyway, even an "untuned" JSON::Fast is a hell of a lot faster than our current parser.

[08:47] <lizmat> ok, so I got parsing of projects.json down from 2.2 seconds on my machine down to 0.3

[08:47] <lizmat> that's with the new quick-parser installed

[08:48] <lizmat> without it, it goes down to only 1 second or so

[08:48] <nine> cool :)

[08:48] <lizmat> the change would be in zef, specific to parsing the projects.json file

[08:49] <lizmat> so you would benefit from it both on older and newer rakudos

[08:57] *** Thev00d0024 joined
[08:57] *** Thev00d0024 left
[09:12] <lizmat> https://github.com/ugexe/zef/issues/273

[09:14] *** Ven` joined
[09:15] *** p6bannerbot sets mode: +v Ven`

[09:16] <|Tux|> timotimo, look

[09:16] <|Tux|> Rakudo version 2018.08-119-g16ce9c89a - MoarVM version 2018.08-92-g3e94a68f6

[09:16] <|Tux|> csv-test-xs-20      0.425 -  0.426

[09:16] <|Tux|> test-t --race       0.890 -  0.891

[09:16] <|Tux|> csv-ip5xs           0.933 -  0.963

[09:16] <|Tux|> test-t              1.972 -  2.071

[09:16] <|Tux|> csv-ip5xs-20        7.107 -  7.376

[09:16] <|Tux|> test                8.539 -  8.855

[09:17] <|Tux|> test-t-20 --race   11.607 - 11.820

[09:17] <|Tux|> csv-parser         21.499 - 22.109

[09:17] <|Tux|> test-t-20          35.993 - 36.834

[09:17] <|Tux|> 2018-09-14 17:13:45 test-t 2.025

[09:17] <|Tux|> 2018-08-30 17:35:38 test-t 2.015

[09:17] <|Tux|> 2018-09-18 11:13:20 test-t 2.006

[09:17] <|Tux|> 2018-09-20 11:10:24 test-t 1.972

[09:17] <|Tux|> 2018-09-18 11:16:48 test-t 1.971

[09:20] *** [TuxCM] joined
[09:21] *** p6bannerbot sets mode: +v [TuxCM]

[09:22] *** lu_zero19 joined
[09:24] *** lu_zero19 left
[09:48] *** hankache left
[09:54] *** nebuchadnezzar left
[09:54] *** nebuchadnezzar joined
[09:55] *** p6bannerbot sets mode: +v nebuchadnezzar

[09:58] *** |Tux| joined
[09:58] *** p6bannerbot sets mode: +v |Tux|

[10:23] *** Hipikat1 joined
[10:25] *** Hipikat1 left
[10:27] *** Guest32 joined
[10:27] *** p6bannerbot sets mode: +v Guest32

[10:28] *** Guest32 left
[10:32] *** Holo0 joined
[10:35] *** pmurias joined
[10:36] *** p6bannerbot sets mode: +v pmurias

[10:37] *** Holo0 left
[10:43] <AlexDaniel> nine: re “what is keeping us from just swapping out our code” that's exactly my point and I hope that is the plan

[10:45] <AlexDaniel> and it doesn't matter if we then end up hiding to-json/from-json behind serialize/deserialize, or if we end up implementing a quick-from-json or whatever

[11:17] *** rozie3 joined
[11:22] *** rozie3 left
[11:26] *** Ven` left
[11:34] *** TC019 joined
[11:35] *** TC019 left
[11:47] *** c00p3r19 joined
[11:49] <lizmat> https://twitter.com/alteholzDD/status/1042519004718555136  

[11:50] <lizmat> AlexDaniel: the main (and also scalability) issue, is that currently there's a giant JSON file that is growing

[11:50] <lizmat> https://github.com/ugexe/zef/issues/273  # should at least parallelize the parsing of that file

[11:53] <AlexDaniel> lizmat: I disagree with the solution though

[11:53] *** c00p3r19 left
[11:53] <AlexDaniel> lizmat: so, basically there are already two files, not one

[11:53] <AlexDaniel> and zef already parallelizes that

[11:53] <AlexDaniel> so maybe these json files should be split into chunks

[11:54] <AlexDaniel> but not when the file is already there

[11:54] <lizmat> ah?  But how come my solution brings down the parsing of projects.json from 2.3 to .3 ?

[11:54] <AlexDaniel> I mean, we should change the generation of the file, not how it's parsed

[11:54] <lizmat> perhaps

[11:54] <AlexDaniel> lizmat: from 2.2 seconds to 1 second, you're just utilizing more cores

[11:55] <AlexDaniel> and zef will already use at least 2

[11:55] <AlexDaniel> because there are two files

[11:55] <lizmat> so?  if you have more cores it will be faster

[11:55] <lizmat> that's the future reality

[11:56] <lizmat> anyways, people were asking for a quick win: I provided that

[11:56] <AlexDaniel> lizmat: yes, so let's change this: https://github.com/ugexe/Perl6-App--ecogen

[11:56] <AlexDaniel> lizmat: so that it generates multiple proper json files

[11:56] *** nitram23 joined
[11:57] <lizmat> doesn't install for me  :-(

[11:57] <lizmat> looks like faulty hash-order dependent tests

[11:58] *** awwaiid joined
[11:59] <lizmat> ah, no, there really is a problem

[11:59] *** nitram23 left
[11:59] *** p6bannerbot sets mode: +v awwaiid

[12:00] <AlexDaniel> lizmat: fwiw we should keep back compat in mind when changing the generation (i.e. older zef installations should still be able to work)

[12:01] <AlexDaniel> so maybe that's a point against my solution :)

[12:01] <lizmat> yeah, that's why I'm not so sure we should change it

[12:03] <AlexDaniel> well, it just means that there should be one big file and also chunkified ones

[12:13] <AlexDaniel> looking at your ticket, what is “IO.lines”?

[12:13] <AlexDaniel> what does that do again

[12:13] <AlexDaniel> in terms of \r \r\n \n and unicode newlines

[12:15] *** Ven` joined
[12:16] <lizmat> AlexDaniel: lines always auto-chomps unless told otherwise

[12:16] <AlexDaniel> I guess it's fine, it just feels fragile and I'm scared :)

[12:16] <lizmat> reading lines from a file feels fragile ?

[12:16] *** p6bannerbot sets mode: +v Ven`

[12:16] <AlexDaniel> expecting the json to be in some particular format

[12:17] <lizmat> ah, yes, well, if it's not, it should fall back to the grammar based one

[12:18] <AlexDaniel> lizmat: I was just thinking what if a module has “\r” in one of the fields, or something like that, but I guess that will be escaped and there's no problem. Nevermind :)

[12:19] <Geth> ¦ rakudo: abbbd2a5c0 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/JSON.pm6

[12:19] <Geth> ¦ rakudo: Revert "Introducing the ultra-fast braindead JSON parser"

[12:19] <Geth> ¦ rakudo: 

[12:19] <Geth> ¦ rakudo: This reverts commit 16ce9c89ad0ca242906f026a72da5b369f928e55.

[12:19] <Geth> ¦ rakudo: 

[12:19] <Geth> ¦ rakudo: Prevent fragility

[12:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/abbbd2a5c0

[12:20] <Geth> ¦ roast: 44e89c1d4b | (Zoffix Znet)++ | MISC/misc-6.d.t

[12:20] <Geth> ¦ roast: Swap to new group-of test helper

[12:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/44e89c1d4b

[12:22] <lizmat> in any case, I've reverted it, as it broke App::ecogen's tests

[12:23] *** TReK12 joined
[12:23] <AlexDaniel> lizmat: but I agree that splitting the json file is probably a great idea

[12:23] <lizmat> fwiw, I don't think it needs to be split: feels file like it is

[12:24] <lizmat> the only thing that might break it if an included JSON file would have a line consisting of ',' or ']'

[12:24] <lizmat> but the generator can prevent that by generating with an extra space at the start of each included line

[12:27] *** TReK12 left
[12:51] *** Zoffix joined
[12:51] *** p6bannerbot sets mode: +v Zoffix

[12:51] <Zoffix> AlexDaniel: are we still pushing to master or a post-release branch?

[12:51] <Zoffix> ZOFVM: Files=1309, Tests=153185, 156 wallclock secs (22.06 usr  3.31 sys + 3323.82 cusr 170.28 csys = 3519.47 CPU)

[12:52] <AlexDaniel> Zoffix: master

[12:52] <Zoffix> k

[12:52] *** Zoffix left
[12:53] <AlexDaniel> but not “still”, I'll be cutting the release from a release branch instead

[12:53] <AlexDaniel> so changes pushed to master now won't go into the release

[13:00] <Geth> ¦ rakudo: bb88a0324e | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[13:00] <Geth> ¦ rakudo: [6.d] 🧙‍♂️ Cast a spell of silence on $()/@()/%()

[13:00] <Geth> ¦ rakudo: 

[13:00] <Geth> ¦ rakudo: Per 6.d-prep[^1], remove all magick from $()/@()/%() and make them

[13:00] <Geth> ¦ rakudo: mean the same thing as $( )/@( )/%( ) (that is, contextualizers that

[13:00] <Geth> ¦ rakudo: call .item/.list/.hash respectively on an empty list).

[13:00] <Geth> ¦ rakudo: 

[13:00] <Geth> ¦ rakudo: Closes RT#131392 and R#1946

[13:00] <Geth> ¦ rakudo: 

[13:00] <Geth> ¦ rakudo: [1] https://github.com/perl6/6.d-prep/blob/dffa2642419a0f481591b9b64b602bfc4c4eb66b/TODO/FEATURES.md#remove--magicalness-from--and-

[13:00] <Geth> ¦ rakudo: [2] https://rt.perl.org/Public/Bug/Display.html?id=131392

[13:00] <synopsebot> RT#131392 [resolved]: https://rt.perl.org/Ticket/Display.html?id=131392 [@LARRY] Remove magic $/ shortcuts %() and @()

[13:00] <synopsebot> R#1946 [open]: https://github.com/rakudo/rakudo/issues/1946 %(), @(), $() are evil/weird

[13:00] <Geth> ¦ rakudo: [3] https://github.com/rakudo/rakudo/issues/1946

[13:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bb88a0324e

[13:00] *** whaa18 joined
[13:01] <Geth> ¦ roast: 79e86e5f14 | (Zoffix Znet)++ | MISC/misc-6.d.t

[13:01] <Geth> ¦ roast: Spec $()/@()/%() are not magical in 6.d

[13:01] <Geth> ¦ roast: 

[13:01] <Geth> ¦ roast: Per 6.d-prep: https://github.com/perl6/6.d-prep/blob/dffa2642419a0f481591b9b64b602bfc4c4eb66b/TODO/FEATURES.md#remove--magicalness-from--and-

[13:01] <Geth> ¦ roast: POV: https://github.com/rakudo/rakudo/commit/bb88a0324e

[13:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/79e86e5f14

[13:01] <Geth> ¦ roast: dbb3a98661 | (Zoffix Znet)++ | S03-operators/context.t

[13:01] <Geth> ¦ roast: Remove trailing whitespace

[13:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dbb3a98661

[13:02] <Geth> ¦ roast: e37341a973 | (Zoffix Znet)++ | 2 files

[13:02] <Geth> ¦ roast: Remove spec of magick in $()/@() from 6.d spec

[13:02] <Geth> ¦ roast: 

[13:02] <Geth> ¦ roast: Do NOT backport this commit to 6.c spec. These features still

[13:02] <Geth> ¦ roast: exist in 6.c language.

[13:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e37341a973

[13:03] *** whaa18 left
[13:03] <AlexDaniel> nice

[13:03] <AlexDaniel> Zoffix++

[13:04] *** evolarium17 joined
[13:04] *** evolarium17 left
[13:05] <Geth> ¦ 6.d-prep: 435d2203aa | (Zoffix Znet)++ | 2 files

[13:05] <Geth> ¦ 6.d-prep: Mark $()/@()/%() demagicalization as complete

[13:05] <Geth> ¦ 6.d-prep: 

[13:05] <Geth> ¦ 6.d-prep: Propspec: https://github.com/perl6/roast/commit/79e86e5f14

[13:05] <Geth> ¦ 6.d-prep: POV: https://github.com/rakudo/rakudo/commit/bb88a0324e

[13:05] <Geth> ¦ 6.d-prep: Docs: https://github.com/perl6/doc/commit/f55804fc62

[13:05] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/435d2203aa

[13:11] *** buggable left
[13:12] *** buggable joined
[13:12] *** ChanServ sets mode: +v buggable

[13:12] *** p6bannerbot sets mode: +v buggable

[13:43] *** robertle joined
[13:44] *** p6bannerbot sets mode: +v robertle

[14:00] <lizmat> commute to NR.pm&

[14:00] *** lizmat left
[14:09] *** pyrimidine joined
[14:09] *** p6bannerbot sets mode: +v pyrimidine

[14:14] *** lizmat joined
[14:15] *** p6bannerbot sets mode: +v lizmat

[14:20] *** Ven` left
[14:25] *** xcin2 joined
[14:25] *** xcin2 left
[14:40] *** lizmat left
[14:44] *** lizmat joined
[14:45] *** p6bannerbot sets mode: +v lizmat

[14:47] *** Ven` joined
[14:48] *** p6bannerbot sets mode: +v Ven`

[14:58] *** lizmat_ joined
[14:59] <Geth> ¦ rakudo: 58592bd0de | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/JSON.pm6

[14:59] <Geth> ¦ rakudo: We only need the Actions class, no instace

[14:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/58592bd0de

[14:59] *** p6bannerbot sets mode: +v lizmat_

[15:02] *** lizmat left
[15:13] *** lizmat_ left
[15:15] *** lizmat joined
[15:15] *** p6bannerbot sets mode: +v lizmat

[15:15] *** robertle left
[15:17] *** [TuxCM] left
[15:26] <tony-o> lizmat++

[15:27] <Geth> ¦ rakudo: c9432c2072 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/JSON.pm6

[15:27] <Geth> ¦ rakudo: Attempt #2 at making R:I:JSON.from-json faster

[15:27] <Geth> ¦ rakudo: 

[15:27] <Geth> ¦ rakudo: This time the quick version looks at whether the outer part is an

[15:27] <Geth> ¦ rakudo: array, and if so, parses the JSON for outer { } pairs, and then

[15:27] <Geth> ¦ rakudo: let's those be parsed in parallel in batches of 32.

[15:27] <Geth> ¦ rakudo: 

[15:27] <Geth> ¦ rakudo: This makes parsing of the project.json about 2x as fast, *regardless*

[15:27] <Geth> ¦ rakudo: of any special formatting of the JSON.

[15:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c9432c2072

[15:29] *** lizmat left
[15:31] *** sam7 joined
[15:31] *** sam7 left
[15:32] *** patrickb left
[15:37] *** committable6 left
[15:37] *** notable6 left
[15:38] *** coverable6 left
[15:38] *** nativecallable6 left
[15:39] *** shareable6 left
[15:39] *** unicodable6 left
[15:39] *** squashable6 left
[15:39] *** releasable6 left
[15:39] <japhb> lizmat: What made you pick batches of 32?

[15:42] <Geth> ¦ nqp/truffle: 5 commits pushed by (Paweł Murias)++

[15:42] <Geth> ¦ nqp/truffle: a01de2af43 | [truffle] Bootstrap the knowhow attributes too

[15:42] <Geth> ¦ nqp/truffle: 443ee71761 | [truffle] Deserialize a bit more things

[15:42] <Geth> ¦ nqp/truffle: 0bcee932f7 | [truffle] Remove dead attribute

[15:42] <Geth> ¦ nqp/truffle: fb21ef9a62 | [truffle] WIP work on calling method

[15:42] <Geth> ¦ nqp/truffle: 7589a9c047 | [truffle] Method calls can take arguments

[15:42] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/compare/c0231bcad976...7589a9c047b2

[15:43] <AlexDaniel> japhb: doesn't sound like a bad choice. FWIW that's not how many threads you'll get, this number can be anything really

[15:45] <japhb> AlexDaniel: Well IIRC the default batch size for hyper is 64, so I'm curious if lizmat found there was a significant performance difference, or wanted to avoid performance loss if the default changed, or somesuch

[15:45] <AlexDaniel> ah ok

[15:45] <AlexDaniel> IMO both should work just fine

[15:46] *** bisectable6 left
[15:48] *** robertle joined
[15:48] *** lupinedk23 joined
[15:49] *** p6bannerbot sets mode: +v robertle

[15:50] *** lupinedk23 left
[15:55] <AlexDaniel> so what's the logic in that last commit?

[15:55] <AlexDaniel> I fail to understand how could it possibly be valid

[15:55] <AlexDaniel> I mean, correct

[15:56] <AlexDaniel> so it searches for {

[15:56] <AlexDaniel> and checks that it's not \{

[15:57] <AlexDaniel> so what if my name is "Alex{Daniel}" ?

[15:57] <AlexDaniel> is that invalid json or something?

[15:58] <AlexDaniel> m: say to-json %(foo => ‘Alex{Daniel}’)

[15:58] <camelia> rakudo-moar c9432c207: OUTPUT: «{␤  "foo" : "Alex{Daniel}"␤}␤»

[15:59] <AlexDaniel> ok that's obviously not a problem, but

[15:59] <AlexDaniel> m: say to-json %(foo => ‘Alex{Daniel’)

[15:59] <camelia> rakudo-moar c9432c207: OUTPUT: «{␤  "foo" : "Alex{Daniel"␤}␤»

[15:59] <AlexDaniel> that is, right?

[16:03] *** Zoffix joined
[16:03] *** p6bannerbot sets mode: +v Zoffix

[16:05] <Zoffix> Sanity check for R#1493 `my Int:D @a; dd @a[^3]` gives `(Int, Int, Int)` in 6.d. Does that make sense? These values don't pass the type constraint.

[16:05] <synopsebot> R#1493 [open]: https://github.com/rakudo/rakudo/issues/1493 [6.d] .= call on DefiniteHOW tries to create an instance of DefiniteHOW

[16:06] <Zoffix> FWIW currently it gives `(Int:D, Int:D, Int:D)` which doesn't pass type constraint either

[16:06] <Zoffix> Same goes for unset keys in hashes

[16:06] <timotimo> yeah, to me it makes no sense to use that construct without an "is default"

[16:07] <Zoffix> crap and the error with assignment of Nil is LTA in 6.d

[16:07] <Zoffix> $ ./perl6 -e 'use v6.d.PREVIEW; my Int:D @a; @a[3] = Nil'

[16:07] <Zoffix> Type check failed in assignment to @a; expected Int:D but got Int (Int)

[16:08] <Zoffix>   in block <unit> at -e line 1

[16:08] <Zoffix> $ ./perl6 -e 'my Int:D @a; @a[3] = Nil'

[16:08] <Zoffix> Type check failed in assignment to @a; expected type Int:D cannot be itself (perhaps Nil was assigned to a :D which had no default?)

[16:08] <Zoffix>   in block <unit> at -e line 1

[16:10] <Zoffix> looks fairly straightforward to fix that tho

[16:15] <AlexDaniel> .tell lizmat 1 question from japhb and 1 from me: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-09-20#l300

[16:15] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[16:15] <Zoffix> lizmat gets all the questions :)

[16:16] <Zoffix> AlexDaniel: bot ded?

[16:16] <Zoffix> commitagble

[16:16] <AlexDaniel> :barjavel.freenode.net 465 committable6test You are banned from this server- Your irc client seems broken and is flooding lots of channels. Banned for 240 min, if in error, please contact [email@hidden.address] (2018/9/20 15.39)

[16:16] <diakopter> heh

[16:17] <Zoffix> <Zoffix-2016> why don't you make a single bot with many features instead of many bots with a single feature each?

[16:19] <diakopter> the old p6eval bot (written in Perl 5) could reload its modules dynamically when they were updated so it didn't have to disconnect

[16:19] <AlexDaniel> well, very often people want to just say “bisectable: … … …” without trying to figure out what's the right command to trigger what

[16:19] <AlexDaniel> but yeah, things can be improved, I agree

[16:20] <diakopter> bots can respond to something: other than their names

[16:20] <AlexDaniel> diakopter: yeah but how would you know that “something”

[16:20] *** lizmat joined
[16:20] <diakopter> it's programmed in, as in camelia

[16:20] <AlexDaniel> for those who use them often it's not an issue, of course

[16:21] *** p6bannerbot sets mode: +v lizmat

[16:23] *** Ven` left
[16:23] <AlexDaniel> eventually I'll rewrite them to use Matrix::Client or something like that

[16:23] <diakopter> the very meaning of the word "bisectable" is tied to knowledge of the bot's existence :D

[16:26] <lizmat> japhb: without :32batch, project.json parses at 1.06, with it at .93

[16:26] <yoleaux> 16:15Z <AlexDaniel> lizmat: 1 question from japhb and 1 from me: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-09-20#l300

[16:27] <AlexDaniel> btw anyone should feel free to take over whateverable project

[16:27] <AlexDaniel> especially if they want to improve things like this :)

[16:28] <lizmat> AlexDaniel: re "Alex {Daniel}" : it counts the number of matching { } that are not escaped/

[16:29] <AlexDaniel> lizmat: so what if there's a { in a string?

[16:29] <lizmat> once it sees the outer matching }, it produces a chunk

[16:29] <AlexDaniel> unclosed one, for example

[16:29] <lizmat> then it would break and it would fall back to the normal one, serialized

[16:30] <Zoffix> lizmat: what do you think of `my Int:D @a; dd @a[^3]` giving `(Int, Int, Int)`? Is there anything better it could give?

[16:31] <Zoffix> I guess even a `Nil` won't be assignable back to it... hm

[16:31] <Zoffix> m: my Int:D @a; @a = @a[^3]

[16:31] <camelia> rakudo-moar c9432c207: OUTPUT: «Type check failed in assignment to @a; expected type Int:D cannot be itself (perhaps Nil was assigned to a :D which had no default?)␤  in block <unit> at <tmp> line 1␤␤»

[16:32] <Zoffix> m: (my Int:D @values)[3] = 42; say [+] @values

[16:32] <camelia> rakudo-moar c9432c207: OUTPUT: «42␤»

[16:32] <Zoffix> huh

[16:33] <Zoffix> m: dd Int:D + 42

[16:33] <camelia> rakudo-moar c9432c207: OUTPUT: «Invocant of method 'Bridge' must be an object instance of type 'Int', not a type object of type 'Int:D'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[16:33] <Zoffix> How does `[+]` skip the Int:Ds at the head? :S

[16:33] <lizmat> no idea

[16:33] <Zoffix> Ah, it's optimized to call sum

[16:35] <Zoffix> m: (my Int:D @values)[3] = 42; sub infix:<+> { &CORE::infix:<+>(|@_) }; say [+] @values

[16:35] <camelia> rakudo-moar c9432c207: OUTPUT: «Invocant of method 'Bridge' must be an object instance of type 'Int', not a type object of type 'Int:D'.  Did you forget a '.new'?␤  in sub infix:<+> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:36] <lizmat> Zoffix: yeah, we cheat sometimes :-)

[16:42] <Geth> ¦ nqp/truffle: c3247c7ff7 | (Paweł Murias)++ | 2 files

[16:42] <Geth> ¦ nqp/truffle: [truffle] Add missing files

[16:42] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/c3247c7ff7

[16:42] <Geth> ¦ nqp/truffle: 3da3fc0e39 | (Paweł Murias)++ | 2 files

[16:42] <Geth> ¦ nqp/truffle: [truffle] Print out an error when running NYI stuff at runtime

[16:42] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/3da3fc0e39

[16:42] <Geth> ¦ nqp/truffle: 42f0e1b276 | (Paweł Murias)++ | src/vm/jvm/bin/cross-compile.nqp

[16:42] <Geth> ¦ nqp/truffle: [truffle] Add a script to compile to both truffle bytecode and jvm bytecode

[16:42] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/42f0e1b276

[16:49] *** lizmat left
[16:52] *** notable6 joined
[16:52] *** ChanServ sets mode: +v notable6

[16:52] *** statisfiable6 joined
[16:52] *** ChanServ sets mode: +v statisfiable6

[16:53] *** unicodable6 joined
[16:53] *** ChanServ sets mode: +v unicodable6

[16:53] *** lizmat joined
[16:53] *** p6bannerbot sets mode: +v notable6

[16:53] *** p6bannerbot sets mode: +v statisfiable6

[16:53] *** p6bannerbot sets mode: +v unicodable6

[16:54] *** p6bannerbot sets mode: +v lizmat

[16:54] *** lizmat left
[17:01] <Zoffix> m: my Int:D &foo; dd &foo.signature

[17:01] <camelia> rakudo-moar c9432c207: OUTPUT: «No such method 'signature' for invocant of type 'Callable'␤  in block <unit> at <tmp> line 1␤␤»

[17:01] <Zoffix> kinda LTA error

[17:01] <TimToady> that .sum cheating is how we get away with [+] 1..100000000000000000000

[17:02] <Zoffix> yeah

[17:02] <Zoffix> m: my Int:D &foo = sub (--> Int:D) {}; dd &foo.signature

[17:02] <camelia> rakudo-moar c9432c207: OUTPUT: «:( --> Int:D)␤»

[17:02] <Zoffix> m: my Int:D &foo = -> --> Int:D {}; dd &foo.signature

[17:02] <camelia> rakudo-moar c9432c207: OUTPUT: «Type check failed in assignment to &foo; expected Callable[Int:D] but got Block (->  --> Int:D { #`(Bl...)␤  in block <unit> at <tmp> line 1␤␤»

[17:02] <Zoffix> Weird. Why doesn't it like the Block?

[17:03] <Zoffix> m: dd [.^mro, .^roles] given --> Int:D {}

[17:03] <camelia> rakudo-moar c9432c207: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Prefix -- requires an argument, but no valid term found␤at <tmp>:1␤------> 3dd [.^mro, .^roles] given --7⏏5> Int:D {}␤    expecting any of:␤        prefix␤»

[17:03] <Zoffix> m: dd [.^mro, .^roles] given -> --> Int:D {}

[17:03] <camelia> rakudo-moar c9432c207: OUTPUT: «Array element = [(Block, Code, Any, Mu), (Callable,)]␤»

[17:03] <Zoffix> it ain't parametarized

[17:06] *** nativecallable6 joined
[17:06] *** shareable6 joined
[17:06] *** p6bannerbot sets mode: +v nativecallable6

[17:07] *** p6bannerbot sets mode: +v shareable6

[17:09] <Zoffix> R#2296 R#2295

[17:09] <synopsebot> R#2296 [open]: https://github.com/rakudo/rakudo/issues/2296 [LTA] LTA error when calling methods on undefined Callable variable

[17:09] <synopsebot> R#2295 [open]: https://github.com/rakudo/rakudo/issues/2295 [consistency] Blocks don't get parametarized with return type

[17:09] <Zoffix> And now I forgot what I was doing.... :)

[17:16] <Zoffix> m: my Int enum <a b c>; dd a

[17:16] <camelia> rakudo-moar c9432c207: OUTPUT: «::a␤»

[17:16] <Zoffix> m: my Int:D enum <a b c>; dd a

[17:16] <camelia> rakudo-moar c9432c207: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot find method 'mro' on object of type Perl6::Metamodel::DefiniteHOW␤at <tmp>:1␤»

[17:17] <japhb> timotimo: JSON::Fast's t/04-roundtrip.t seems to be a bit loose about numeric types ('Array of Num' and 'Hash of Num' don't have Nums, for instance).

[17:17] <Zoffix> R##2297

[17:17] <Zoffix> R#2297

[17:17] <synopsebot> R#2297 [open]: https://github.com/rakudo/rakudo/issues/2297 Crash when parametarizing enums with DefiniteHOWs

[17:17] *** Zoffix left
[17:20] <timotimo> japhb: yeah, json simply doesn't do that

[17:20] <timotimo> if i'm not misunderstanding

[17:25] *** Keridos3 joined
[17:26] *** Keridos3 left
[17:27] <japhb> timotimo: Right, I'm saying it might be worth specifying what *is* expected for each of our Numeric types, even if we know that e.g. Num will become Rat on roundtrip, at least we can check that this behavior doesn't change from release to release.

[17:29] <japhb> Actually, we should be able to roundtrip at least those two based on presence or absence of exponent in the JSON.

[17:35] *** rodgzilla7 joined
[17:36] <timotimo> hm, then we'll also interpret data from "outside" as rats even when they were floating point values

[17:37] *** rodgzilla7 left
[17:46] *** lizmat joined
[17:47] *** p6bannerbot sets mode: +v lizmat

[17:47] *** lizmat left
[17:48] *** committable6 joined
[17:49] *** Zoffix joined
[17:49] *** p6bannerbot sets mode: +v Zoffix

[17:49] <Zoffix> m: -> Int:D @v { @v[^3] }(my Int:D @)

[17:49] <camelia> rakudo-moar c9432c207: ( no output )

[17:49] <Zoffix> m: -> Int:U @v { @v[^3] }(my Int:U @)

[17:49] <camelia> rakudo-moar c9432c207: OUTPUT: «Parameter '@v' of routine '<anon>' must be a type object of type 'Positional[Int]', not an object instance of type 'Array[Int:U]'.  Did you forget a 'multi'?␤  in block <unit> at <tmp> line 1␤␤»

[17:49] <Zoffix> man, getting sick of all these bugs :(

[17:49] *** bisectable6 joined
[17:49] *** p6bannerbot sets mode: +v committable6

[17:50] * Zoffix squints

[17:50] *** p6bannerbot sets mode: +v bisectable6

[17:50] <Zoffix> Looks like it's interpreting the :U to mean the Positional must be a type object instead of its type being a type object

[17:50] *** releasable6 joined
[17:51] *** p6bannerbot sets mode: +v releasable6

[17:55] *** squashable6 joined
[17:56] *** p6bannerbot sets mode: +v squashable6

[17:56] <Zoffix> R#2298

[17:56] <synopsebot> R#2298 [open]: https://github.com/rakudo/rakudo/issues/2298 :U parametarized@,%,& parameters are incorrectly parametarized

[17:57] <Zoffix> ZofBot: rant about not writing tests for features leading to these sorts of bugs

[17:58] *** Zoffix left
[17:58] <japhb> timotimo: Maybe a way to mark wanting to parse Rat similar to requesting parsing of Inf/-Inf/NaN?

[18:08] *** t3rror23 joined
[18:10] *** lizmat joined
[18:11] *** p6bannerbot sets mode: +v lizmat

[18:12] *** t3rror23 left
[18:15] *** lizmat left
[18:31] *** Zoffix joined
[18:31] *** p6bannerbot sets mode: +v Zoffix

[18:31] <Zoffix> really weird. My change that's meant to impact only 6.d is hanging S10-packages/require-and-use.t because it fails to detect circularity :S https://gist.github.com/zoffixznet/0c6a46a1e658179fded379855fe4412c

[18:32] <Zoffix> The only non-6.d part is this: https://gist.github.com/zoffixznet/0c6a46a1e658179fded379855fe4412c#file-diff-diff-L43-L44

[18:36] *** lizmat joined
[18:36] <Zoffix> (and removing it doesn't fix the issue :S)

[18:37] *** p6bannerbot sets mode: +v lizmat

[18:37] <Zoffix> Wait, is it my changes even? Does  S10-packages/require-and-use.t hang for anyone else?

[18:37] <Zoffix> I see there's a .to-json call like right after the circularity detecting die statement

[18:38] <Zoffix> guess I can just reset and build HEAD

[18:43] <Zoffix> AlexDaniel: looks like during 6.d release, you'll dethrone me for the number of consecutive releases :)

[18:43] * [Coke] wonders how long ago he lost the record.

[18:43] <Zoffix> OK, *phew*, the hang ain't due to my smiley work

[18:44] <AlexDaniel> time flies

[18:44] * Zoffix swats

[18:45] <[Coke]> 2017.01, when zoffix beat me. Well done. :)

[18:46] <Zoffix> :)

[18:47] <AlexDaniel> btw there's a chance that I will be away for a bit in July next year

[18:47] <AlexDaniel> so if there's anyone willing to do some releases they should start preparing mentally :)

[18:51] <Zoffix> hm, stresstest is also now 190s

[18:51] <Zoffix> vs 156s ~8 hours ago

[18:53] <Geth> ¦ rakudo: 1ff9fa32f0 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[18:53] <Geth> ¦ rakudo: Use actual value in `constant` typecheck error

[18:53] <Geth> ¦ rakudo: 

[18:53] <Geth> ¦ rakudo: This way we can report value correctly for :U = 42 messges,

[18:53] <Geth> ¦ rakudo: for example.

[18:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1ff9fa32f0

[18:53] <Zoffix> I wonder if that's all the new language version checking for every damn container :S

[18:53] <Zoffix> or variable/constant rather

[18:53] <Zoffix> and parameters

[18:54] *** lizmat left
[18:56] <Zoffix> hm, nope

[18:56] <Zoffix> a file with 4000 variables get run a bit faster on my HEAD than on 2018.06-289-g38de1e5

[19:00] <Geth> ¦ rakudo: 38b198c992 | (Zoffix Znet)++ | 3 files

[19:00] <Geth> ¦ rakudo: [6.d] Set non-DefiniteHOW default default for DefiniteHOWs

[19:00] <Geth> ¦ rakudo: 

[19:00] <Geth> ¦ rakudo: Per 6.d-prep[^1]: On :U/:D type constrained variables, params, attributes,

[19:00] <Geth> ¦ rakudo: and parametarized Arrays/Hashes, use the base type as the default

[19:00] <Geth> ¦ rakudo: default in 6.d instead of continuing to use the uninitializeable

[19:00] <Geth> ¦ rakudo: DefiniteHOW as the type, which prevents use of `.=` and other constructs.

[19:00] <Geth> ¦ rakudo: 

[19:00] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[19:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/38b198c992

[19:02] <Geth> ¦ roast: 8c8e8f55bb | (Zoffix Znet)++ | MISC/misc-6.d.t

[19:02] <Geth> ¦ roast: Spec DefiniteHOW's default defaults

[19:02] <Geth> ¦ roast: 

[19:02] <Geth> ¦ roast: They are now base types instead of DefiniteHOW typeobjects.

[19:02] <Geth> ¦ roast: 

[19:02] <Geth> ¦ roast: Per 6.d-prep: https://github.com/perl6/6.d-prep/blob/dffa2642419a0f481591b9b64b602bfc4c4eb66b/TODO/FEATURES.md#make-default-defaults-for-definitehows-be-normal-types

[19:02] <Geth> ¦ roast: POV: https://github.com/rakudo/rakudo/commit/38b198c992

[19:02] <Geth> ¦ roast: Enum POV is blocked by R#2297 https://github.com/rakudo/rakudo/issues/2297

[19:02] <synopsebot> R#2297 [open]: https://github.com/rakudo/rakudo/issues/2297 Crash when parametarizing enums with DefiniteHOWs

[19:02] <Geth> ¦ roast: and is not specced.

[19:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8c8e8f55bb

[19:07] <Geth> ¦ 6.d-prep: a0bc5390fc | (Zoffix Znet)++ | 2 files

[19:07] <Geth> ¦ 6.d-prep: Make DefiniteHOW's default defaults as completed

[19:07] <Geth> ¦ 6.d-prep: 

[19:07] <Geth> ¦ 6.d-prep: POV: https://github.com/rakudo/rakudo/commit/38b198c992

[19:07] <Geth> ¦ 6.d-prep: Propspec: https://github.com/perl6/roast/commit/8c8e8f55bb

[19:07] <Geth> ¦ 6.d-prep: Docs: https://github.com/perl6/doc/commit/44ac0f916d

[19:07] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/a0bc5390fc

[19:11] <Zoffix> m: dd from-json '["A", "B"]'

[19:11] <camelia> rakudo-moar c9432c207: OUTPUT: «Array element = []␤»

[19:17] <Zoffix> I think I see it.

[19:18] <Zoffix> ZofBot: ready the sandwich bread!

[19:21] <geekosaur> release the crackin' ?

[19:22] <Geth> ¦ rakudo: zoffixznet assigned to lizmat Issue t/spec/S10-packages/require-and-use.t hangs https://github.com/rakudo/rakudo/issues/2299

[19:25] *** Zoffix left
[19:25] *** travis-ci joined
[19:25] *** p6bannerbot sets mode: +v travis-ci

[19:25] <travis-ci> Rakudo build passed. Zoffix Znet 'Use actual value in `constant` typecheck error

[19:25] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/431171251 https://github.com/rakudo/rakudo/compare/c9432c207211...1ff9fa32f020

[19:25] *** travis-ci left
[19:29] <timotimo> they sell a kitkat knock-off here that they call "crack'n'snack"

[19:42] <Geth> ¦ 6.d-prep: 5ff4072f24 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[19:42] <Geth> ¦ 6.d-prep: Don't set the date for 6.e

[19:42] <Geth> ¦ 6.d-prep: 

[19:42] <Geth> ¦ 6.d-prep: I'm thinking we might go for 2-year cycles instead of 1 year.

[19:42] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/5ff4072f24

[19:44] *** buggable left
[19:44] *** buggable joined
[19:44] *** ChanServ sets mode: +v buggable

[19:45] *** p6bannerbot sets mode: +v buggable

[19:55] *** dogbert17 joined
[19:56] *** p6bannerbot sets mode: +v dogbert17

[19:56] *** travis-ci joined
[19:56] *** p6bannerbot sets mode: +v travis-ci

[19:56] <travis-ci> Rakudo build passed. Zoffix Znet '[6.d] Set non-DefiniteHOW default default for DefiniteHOWs

[19:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/431174180 https://github.com/rakudo/rakudo/compare/1ff9fa32f020...38b198c99285

[19:56] *** travis-ci left
[20:00] *** ario joined
[20:02] *** robertle left
[20:04] *** ario left
[20:18] <Geth> ¦ nqp/truffle: 7bbcb7bcd5 | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/runtime/NQPCodeRef.java

[20:18] <Geth> ¦ nqp/truffle: [truffle] Fix setting of outer in declaration_static blocks

[20:18] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/7bbcb7bcd5

[20:18] <Geth> ¦ nqp/truffle: fc0e8de647 | (Paweł Murias)++ | 2 files

[20:18] <Geth> ¦ nqp/truffle: [truffle] Stub nqp::decont

[20:18] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/fc0e8de647

[20:49] *** Vgr_ joined
[20:51] *** Vgr_ left
[20:57] <japhb> This seems very fishy: https://gist.github.com/japhb/eb81ecc106fb08ff2e08c9be0e988ed4

[20:57] <japhb> Anyone else able to replicate that?  (Same loop taking either 5.8 seconds or 42-45 seconds, seemingly on the flip of a coin.)

[21:17] <jnthn> japhb: That's interesting...

[21:18] <jnthn> japhb: If you MVM_SPESH_DISABLE=1 does it consistently run at the slower time? Ditto for MVM_SPESH_OSR_DISABLE=1

[21:18] <timotimo> did you mean ..._INLINE_...?

[21:20] <jnthn> No :P

[21:20] <jnthn> ...I wondered if I'd typed into google instead of IRC for a moment then, though :P

[21:20] <jnthn> I don't think there's anything to inline by runtime on that one

[21:20] <timotimo> OK

[21:20] <jnthn> I think the static optimizer gets it all

[21:21] <jnthn> OSR is the thing that moves us from an interpreted hot loop to a spesh'd/jit'd one

[21:21] <jnthn> And, I'm guessing, what might be reliably triggering here

[21:22] *** Circlefusion joined
[21:25] <japhb> Trying with MVM_SPESH_DISABLE=1 ...

[21:26] <timotimo> i didn't actually look at the code until right now

[21:26] <timotimo> :S

[21:26] <timotimo> surely that's just the repl being silly? :)

[21:26] *** Circlefusion left
[21:28] <japhb> Yes, consistently slow with MVM_SPESH_DISABLE=1 (after 4 runs).  Now trying with MVM_SPESH_OSR_DISABLE=1 ...

[21:30] <jnthn> m: say "spesh/jit make it {43.1 / 5.81}x as fast"

[21:30] <camelia> rakudo-moar 38b198c99: OUTPUT: «spesh/jit make it 7.418244x as fast␤»

[21:31] <diakopter> to a billion and beyond!

[21:33] <japhb> Yep, consistently slow with MVM_SPESH_OSR_DISABLE=1 as well.  In fact, even slower.  Instead of 42-45 seconds, more like 44-49 seconds (over 5 runs).

[21:35] <jnthn> How about MVM_SPESH_BLOCKING=1 ?

[21:36] <japhb> Giving it a try ...

[21:37] <japhb> Consistently fast, and nice tight clustering too (5.82-5.86 seconds)

[21:37] <timotimo> ooh

[21:38] <timotimo> you remember that time i told you about code being OSR'd, but the check for an OSR'd result was coming back empty?

[21:38] <timotimo> because the callsite wasn't matching up with what was being logged?

[21:38] <timotimo> it could very well be this

[21:40] <diakopter> I sense a big opportunity

[21:41] <jnthn> Yeah, I'm wondering if it is

[21:41] <jnthn> But this is a very nice small example :)

[21:41] <japhb> :-)

[21:41] <jnthn> japhb++

[21:41] <japhb> That was the result of a couple hours of WTH ...?

[21:41] <jnthn> I can't look at it right now, but if you've a moment to make a MoarVM ticket... :)

[21:42] <japhb> Sure, will do.

[21:42] <diakopter> can you bisect to find the lowest 1_000_000_000 at which it happens

[21:45] <diakopter> is it bimodal at 100_000

[21:46] <japhb> diakopter: The loop is fast enough that I had to use a big number to get above the noise floor on my machine.

[21:46] <japhb> (*sufficiently* above the noise floor, I mean)

[21:47] <japhb> Doesn't spesh kick in at loop counts in the low hundreds these days?

[21:48] <japhb> Oh, forgot to link: https://github.com/MoarVM/MoarVM/issues/968

[21:53] <jnthn> japhb: Yes, but it does its work on a background thread

[21:53] <jnthn> During which time such a hot loop will interpret quite a few more iterations

[21:54] <timotimo> at some point we need to put in loop unrolling so that absurdly short loops like these get just a tiny bit faster

[21:55] *** epony left
[22:05] *** epony joined
[22:05] *** p6bannerbot sets mode: +v epony

[22:20] *** pmurias left
[22:22] *** dct joined
[22:22] *** p6bannerbot sets mode: +v dct

[22:28] *** lizmat joined
[22:29] *** p6bannerbot sets mode: +v lizmat

[22:29] <lizmat> .

[22:37] *** realitygaps26 joined
[22:37] *** realitygaps26 left
[23:02] *** MasterDuke joined
[23:02] *** p6bannerbot sets mode: +v MasterDuke

[23:03] *** MasterDuke left
[23:03] *** MasterDuke joined
[23:03] *** herbert.freenode.net sets mode: +v MasterDuke

[23:03] *** p6bannerbot sets mode: +v MasterDuke

