[00:01] <Kaiepi> freebsd stresstest results https://hastebin.com/axogorabal.bash

[00:01] <Kaiepi> forgot to pipe it to a file

[00:03] <Zoffix> t/spec/S17-promise/basic.t is a regular flopper

[00:03] <Kaiepi> btw did i remember to bring up the deadlock in promises i found?

[00:04] <Kaiepi> i don't know if i did or not

[00:04] <Zoffix> The await Promise.new?

[00:04] <Kaiepi> oh

[00:04] <Kaiepi> yeah i did

[00:06] <Zoffix> Well, I saw that mentioned in #perl6. I don't have any opinion on it. Dunno if anyone else saw it. Maybe file a ticket?

[00:06] <AlexDaniel> Zoffix: hey

[00:07] <Kaiepi> i'll fill one

[00:07] <AlexDaniel> it looks like module Crane is broken

[00:07] <AlexDaniel> and that seems to be a regression of today

[00:07] <AlexDaniel> well, between the last time I toasted

[00:07] <Zoffix> What are the failures?

[00:08] <AlexDaniel> https://gist.github.com/AlexDaniel/870b9607f5657c4770fef11c2ac5c46a

[00:08] <AlexDaniel> my brain was about to shut down actually

[00:09] <Zoffix> Well, I'll direct you to this conversation...

[00:09] <Zoffix> AlexDaniel: https://irclog.perlgeek.de/perl6-dev/2018-04-20#i_16072296  It starts with "Feels like adding constrained protos to resolve R#1739 is not the best of ideas"

[00:10] <synopsebot> R#1739 [closed]: https://github.com/rakudo/rakudo/issues/1739 [‚ö† blocker ‚ö†] Unintended consequences of converting routines from `only` to `multi`

[00:10] <Zoffix> :)

[00:10] <AlexDaniel> hehe

[00:10] <Zoffix> AlexDaniel: but basically if we're sticking with out fix for R#1739 then that failure is by design and the user needs to add their own proto, or rename the sub

[00:10] <Zoffix> m: &copy.signature.say

[00:10] <camelia> rakudo-moar a138dcf50: OUTPUT: ¬´(| is raw)‚ê§¬ª

[00:10] <Zoffix> huh

[00:11] <Zoffix> s: &copy

[00:11] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/a138dcf50/src/core/io_operators.pm6#L231

[00:11] <Zoffix> How does it get (| is raw) from it? :S

[00:12] <Zoffix> m: &copy.candidates¬ª.signature.say

[00:12] <camelia> rakudo-moar a138dcf50: OUTPUT: ¬´((| is raw))‚ê§¬ª

[00:13] <Zoffix> oh, restricted stupid bot

[00:13] <Zoffix> e: &copy.candidates¬ª.signature.say

[00:13] <evalable6> Zoffix, rakudo-moar a138dcf50: OUTPUT: ¬´(($from, $to, :$createonly))‚ê§¬ª

[00:14] <Zoffix> e: &copy.signature.say

[00:14] <evalable6> Zoffix, rakudo-moar a138dcf50: OUTPUT: ¬´($, $, *%)‚ê§¬ª

[00:14] <Zoffix> There we go

[00:14] <Zoffix> AlexDaniel: so basically, now all user multies would need to match ^ that proto.

[00:14] <Zoffix> AlexDaniel: and once we add it, there'll also be an error popping up when the user is trying to add a multi that doesn't match the proto.

[00:16] <Zoffix> And that's what the *% is for, so users could stick their arguments, like Crane does, but it wasn't considered that they may wish to omit some positionals.

[00:16] <Zoffix> m: sub copy {}

[00:16] <camelia> rakudo-moar a138dcf50: ( no output )

[00:16] <Zoffix> 6c: sub copy {}

[00:16] <committable6> Zoffix, ¬¶6c (28 commits): ¬´¬ª

[00:16] <Zoffix> IMO that Crane code is iffy and it should've been an `only` sub instead of a multi

[00:17] <Zoffix> Ah, nm, they have many of them

[00:17] <AlexDaniel> fwiw there are 4 other modules that depend on Crane

[00:17] <Zoffix> Well, the fix is simple, just add a proto

[00:17] * AlexDaniel üí§

[00:18] <Zoffix> And the author seems active. Last commit 4 days ago

[00:18] * Zoffix tries to fix and PR the breake

[00:19] <Zoffix> AlexDaniel: is that the only failure other than 4 modules that depend on it?

[00:24] <timotimo> tony-o: pong

[00:29] <Zoffix> .tell AlexDaniel` sent a PR for Crane https://github.com/atweiden/crane/pull/4

[00:29] <yoleaux> Zoffix: I'll pass your message to AlexDaniel`.

[00:43] <AlexDaniel`> Yes

[00:43] <yoleaux> 00:29Z <Zoffix> AlexDaniel`: sent a PR for Crane https://github.com/atweiden/crane/pull/4

[00:44] <AlexDaniel`> There was also something...

[00:45] <AlexDaniel`> ah that's just a flop

[00:45] <Zoffix> like what?

[00:45] <Zoffix> ok

[00:46] <AlexDaniel`> Zoffix++ # thanks

[00:57] <Zoffix> .tell jnthn FWIW, on the more restrictive protos in core thing‚Äîyou said you'll think more about it. We had a regression in Crane because user's own multies took 1 positional arg but all core ones took 2: https://github.com/atweiden/crane/pull/4

[00:57] <yoleaux> Zoffix: I'll pass your message to jnthn.

[01:22] <timotimo> tony-o: i'll actually go to bed now, but i'll read whatever you send me when i get back to the keyboard

[08:31] <[TuxCM]> Any link to a README with a "What do I need to do to run p6-blead without rakudowbrew from scratch"?

[08:31] <[TuxCM]> I got core-dumps in *compiling* Moar

[08:59] <stmuk_> [TuxCM]: https://gist.github.com/stmuk/147c17b8ed41f1bec42e00455d7b0bf2

[09:17] <nine> [TuxCM]: did I get that correctly? The segfaults are gone now?

[09:29] <[TuxCM]> All tests successful.

[09:29] <[TuxCM]> Files=30, Tests=22441, 21 wallclock secs ( 2.50 usr  0.18 sys + 75.15 cusr  2.07 csys = 79.90 CPU)

[09:29] <[TuxCM]> Result: PASS

[09:29] <nine> [TuxCM] oh, how did you resolve the libper6_ops_moar.so issue?

[09:39] <[TuxCM]> Rakudo version 2018.03-262-ga138dcf50 - MoarVM version 2018.03-126-g876aa90ee

[09:39] <[TuxCM]> csv-test-xs-20      0.449 -  0.455

[09:39] <[TuxCM]> csv-ip5xs           0.892 -  0.895

[09:39] <[TuxCM]> test-t --race       1.013 -  1.061

[09:39] <[TuxCM]> test-t              2.510 -  2.552

[09:39] <[TuxCM]> csv-ip5xs-20        8.829 -  8.979

[09:39] <[TuxCM]> test                9.021 -  9.328

[09:39] <[TuxCM]> test-t-20 --race   15.233 - 15.393

[09:39] <[TuxCM]> csv-parser         36.186 - 36.750

[09:39] <[TuxCM]> test-t-20          45.363 - 46.204

[09:39] <[TuxCM]> nine: cd install

[10:46] <AlexDaniel> good * o/

[10:57] <nine> Inline::Python is now officially the first module to use our new build system :)

[11:06] <Kaiepi> sweet

[12:21] <Zoffix> [TuxCM]: https://github.com/zoffixznet/r   Just throw out the "git checkout $(git describe --abbrev=0 --tags) &&" step to make it fetch the latest commit instead of latest release and you can run `update-perl6` any time you want to upgrade to latest

[12:30] <Zoffix> [TuxCM]: made a separate repo that just lists instructions for bleed: https://github.com/zoffixznet/rd

[12:31] <Zoffix> There's also Z-Script, if you want to re-build a lot after making some changes

[12:31] <Zoffix> huggable: zscript

[12:31] <huggable> Zoffix, Helper script for Rakudo Perl 6 core development: https://github.com/zoffixznet/z

[14:54] <Zoffix> m: say (Instant.from-posix: .posix + .second % 1, .second >= 60) - (.posix + .second % 1) with DateTime.new: '1964-01-22T01:42:56.925148Z'

[14:54] <camelia> rakudo-moar a138dcf50: OUTPUT: ¬´Instant:10‚ê§¬ª

[14:55] <Zoffix> wonde if that's to blame somewhere in .later :\

[15:00] <Zoffix> Hm, if I use `self.new: catastrophe.later(seconds => $s).Instant, :timezone(catastrophe.timezone), :$formatter` I get the precision error, but if I use `self.new: catastrophe.Instant + $s, :timezone(catastrophe.timezone),  :$formatter` then it disappears

[15:07] <Zoffix> Filed ungolfed version as R#1760

[15:07] <synopsebot> R#1760 [open]: https://github.com/rakudo/rakudo/issues/1760 Potential precision bug in DateTime/Instant

[15:12] <Zoffix> Oh, wrong chat.

[15:24] <nine> Zoffix: is ecosystem/server/updatelist.pl the script that creates project.json for zef? And will commits to that automatically be picked up by whatever is running it?

[15:25] <Zoffix> nine: yes and yes

[15:25] <Zoffix> nine: this is the URL for the generated file: http://ecosystem-api.p6c.org/projects.json

[15:27] <Zoffix> Cron job is run at: 8,28,48 * * * * bash update.sh > update.log 2>&1

[15:28] <Zoffix> And this is the update.sh it runs: https://gist.github.com/zoffixznet/ce0fbf08f869cb2f1ce96b40c5f3a7ad

[15:29] <Zoffix> (I see a run running right now, so whenever it finishes, I'd expect http://ecosystem-api.p6c.org/projects1.json to be a non-404 no more)

[15:32] <Zoffix> Can't use string ("1") as an ARRAY ref while "strict refs" in use at server/updatelist.pl line 127.

[15:33] <Zoffix> nine: but it created the file before dying with that: http://ecosystem-api.p6c.org/projects1.json

[15:34] <nine> Zoffix: just pushed a fix

[15:35] <nine> Testing this is non-trivial on a train's Wifi. Better than on the airplane where I wrote it though...

[15:40] <Zoffix> nine: I did a manual run and now it completed successfully

[15:40] <Zoffix> And http://ecosystem-api.p6c.org/projects.json and http://ecosystem-api.p6c.org/projects1.json should now show what it produces

[15:44] <nine> Awesome! I just confirmed that an old zef is now able to install Inline::Python even though it uses the S22 build system. Backwards compatibility FTW!

[15:45] <nine> This means that I can now start sending pull requests for getting rid of Build.pm

[15:49] <Zoffix> sweet

[16:47] <Geth> ¬¶ rakudo: zoffixznet self-assigned DateTime.later .Int'ifies fractional seconds https://github.com/rakudo/rakudo/issues/1762

[16:48] <Geth> ¬¶ rakudo/post-release-2018.04: 29 commits pushed by (Ben Davies)++, (Tobias Leich)++, (Zoffix Znet)++, (Elizabeth Mattijsen)++, (Aleks-Daniel Jakimenko-Aleksejev)++, (Stefan Seifert)++, (Jonathan Worthington)++

[16:48] <Geth> ¬¶ rakudo/post-release-2018.04: review: https://github.com/rakudo/rakudo/compare/6e8dc6f13275...df0b95df3458

[16:48] <Geth> ¬¶ roast/post-release-2018.04: 10 commits pushed by (Zoffix Znet)++

[16:48] <Geth> ¬¶ roast/post-release-2018.04: review: https://github.com/perl6/roast/compare/5bfe416140f2...3a0e202c13da

[17:10] <Zoffix> ZOFFLOP: t/spec/S11-modules/require.t

[17:15] <Geth> ¬¶ rakudo/post-release-2018.04: 656ff77b96 | (Zoffix Znet)++ | src/core/DateTime.pm6

[17:15] <Geth> ¬¶ rakudo/post-release-2018.04: Do not .Int `second` units in DateTime.later/.earlier

[17:15] <Geth> ¬¶ rakudo/post-release-2018.04:

[17:15] <Geth> ¬¶ rakudo/post-release-2018.04: Fixes R#1760 https://github.com/rakudo/rakudo/issues/1760

[17:15] <Geth> ¬¶ rakudo/post-release-2018.04: Fixes R#1762 https://github.com/rakudo/rakudo/issues/1762

[17:15] <Geth> ¬¶ rakudo/post-release-2018.04:

[17:15] <Geth> ¬¶ rakudo/post-release-2018.04: Unlike other units, there's no ambiguity in fractional seconds,

[17:15] <synopsebot> R#1760 [open]: https://github.com/rakudo/rakudo/issues/1760 Potential precision bug in DateTime/Instant

[17:15] <synopsebot> R#1762 [open]: https://github.com/rakudo/rakudo/issues/1762 DateTime.later .Int'ifies fractional seconds

[17:15] <Geth> ¬¶ rakudo/post-release-2018.04: so don't .Int them to allow user to .later/.earlier a date by

[17:15] <Geth> ¬¶ rakudo/post-release-2018.04: sub-seconds.

[17:15] <Geth> ¬¶ rakudo/post-release-2018.04: review: https://github.com/rakudo/rakudo/commit/656ff77b96

[17:16] <Geth> ¬¶ roast/post-release-2018.04: 7c3bf500ed | (Zoffix Znet)++ | S32-temporal/DateTime.t

[17:16] <Geth> ¬¶ roast/post-release-2018.04: Test DateTime.later/.earlier can handle sub-second units

[17:16] <Geth> ¬¶ roast/post-release-2018.04:

[17:16] <Geth> ¬¶ roast/post-release-2018.04: Closes https://github.com/rakudo/rakudo/issues/1760 R#1760

[17:16] <Geth> ¬¶ roast/post-release-2018.04: Closes https://github.com/rakudo/rakudo/issues/1762 R#1762

[17:16] <Geth> ¬¶ roast/post-release-2018.04: Rakudo fix: https://github.com/rakudo/rakudo/commit/656ff77b96

[17:16] <Geth> ¬¶ roast/post-release-2018.04: review: https://github.com/perl6/roast/commit/7c3bf500ed

[18:31] <Geth> ¬¶ rakudo: d4a6b92f39 | (Zoffix Znet)++ (committed using GitHub Web editor) | README.md

[18:31] <Geth> ¬¶ rakudo: Direct users to rakudo.org bugs page for info on bug reporting

[18:31] <Geth> ¬¶ rakudo:

[18:31] <Geth> ¬¶ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1598

[18:31] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/d4a6b92f39

[18:32] <Zoffix> I find GitHub is in some ways suckier for ticket searching than https://fail.rakudo.party/ because all tickets aren't on the same page

[18:38] <AlexDaniel> yes

[18:38] <AlexDaniel> I noticed that too

[18:39] <AlexDaniel> but I still think that github tickets should be listed on fail.rakudo.party

[18:39] <Zoffix> Patches welcome :P

[18:39] <AlexDaniel> ticket in question: https://github.com/zoffixznet/r6/issues/11

[18:43] <AlexDaniel> why do websites like to paginate so heavily?

[18:43] <AlexDaniel> 25 per page, whyh

[18:43] <AlexDaniel> ?

[18:44] <Zoffix> can show more ads

[18:44] <Zoffix> GitHub.. dunno, less load on the system?

[18:47] <AlexDaniel> through api you can't get more than a 100 it seems: https://api.github.com/repos/rakudo/rakudo/issues?state=open&per_page=150

[18:48] <AlexDaniel> (if you're not logged in it's even less I think)

[19:26] <Zoffix> # expected: DateTime.new(2014,12,11,12,32,23.137494802474976)

[19:26] <Zoffix> #      got: DateTime.new(2014,12,11,12,32,23.137495)

[19:26] <AlexDaniel> that's pretty close

[19:27] <Zoffix> Still precision loss somewhere in DateTime/Instant routines :/ since they're Rats, I'd expect all operations to be exact

[19:30] <Zoffix> m: my \t = 1220735354.9501421; use Test; is-deeply DateTime.new($t), DateTime.new(DateTime.new($t).Instant)

[19:30] <camelia> rakudo-moar d4a6b92f3: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$t' is not declared‚ê§at <tmp>:1‚ê§------> 0301421; use Test; is-deeply DateTime.new(7‚èè5$t), DateTime.new(DateTime.new($t).Insta‚ê§¬ª

[19:30] <Zoffix> m: my \t = 1220735354.9501421; use Test; is-deeply DateTime.new(t), DateTime.new(DateTime.new(t).Instant)

[19:30] <camelia> rakudo-moar d4a6b92f3: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[19:31] <Zoffix> Oh, I forgot to stick a .Rat on t in my code :S  (strangely, do have a memory of doing so)

[19:31] <Zoffix> I mean, I gen it with 1524424977.922727.rand; but it needs to be 1524424977.922727.rand.Rat;

[19:32] <Zoffix> .oO( or does it )

[19:32] <Zoffix> m: my \t = 1220735354.9501421e0; use Test; is-deeply DateTime.new(t), DateTime.new(DateTime.new(t).Instant)

[19:32] <camelia> rakudo-moar d4a6b92f3: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§# expected: DateTime.new(2008,9,6,21,9,14.950142)‚ê§#      got: DateTime.new(2008,9,6,21,9,14.95014214515686)‚ê§¬ª

[19:33] <Zoffix> This likely needs to convert it to .Rat first: https://github.com/rakudo/rakudo/blob/master/src/core/DateTime.pm6#L145

[19:35] <Zoffix> not really sure

[19:36] <Zoffix> m: say DateTime.new(0e0).second.^name

[19:36] <camelia> rakudo-moar d4a6b92f3: OUTPUT: ¬´Num‚ê§¬ª

[19:36] <Zoffix> m: say DateTime.new(0.0).second.^name

[19:36] <camelia> rakudo-moar d4a6b92f3: OUTPUT: ¬´Rat‚ê§¬ª

[19:36] <Zoffix> Now I'm more sure...

[19:37] <AlexDaniel> speaking of jvm, does it even build for anyone?

[19:37] * AlexDaniel tries again

[19:40] <Zoffix> Filed as R#1763

[19:41] <synopsebot> R#1763 [open]: https://github.com/rakudo/rakudo/issues/1763 [consistency] DateTime.new(Numeric) does not normalize type

[19:41] <AlexDaniel> I am getting this: https://gist.github.com/AlexDaniel/a3ff8848f785bb1e8a02da21e93cdcd3

[19:42] <AlexDaniel> bartolin: ‚Üë is this normal?

[19:42] <AlexDaniel> definitely does not look so

[20:05] * AlexDaniel bisects

[20:05] <bartolin> AlexDaniel: no, that's not too good. I saw it earlier today, too. I'm pretty sure it happens since https://github.com/rakudo/rakudo/commit/4b5d36f3a8

[20:05] <yoleaux> 3 Apr 2018 23:32Z <Zoffix> bartolin: FWIW, this commit used 309 as scale (citing perf loss concerns), but I imagine 17 is good enough, as doubles have at most 18 significant figures. Looking at openjdk's impl of BigInteger.divide, there's even a fast path when scale is < 18. Perhaps something to investigate, to improve perf? https://github.com/perl6/nqp/commit/b9f195cf8df62153cd1cfaa7698a586650695165

[20:05] <yoleaux> 3 Apr 2018 23:33Z <Zoffix> bartolin: err, I meant BigDecimal.divide's impl

[20:06] * bartolin didn't have much time recently

[20:07] <bartolin> it looks like for some reasons the proto is called.

[20:09] <bartolin> it's not only trait_mod:<does>: I changed that back to use (|) as its signature and then a similiar error surfaced for one of the other changed protos

[20:23] <AlexDaniel> yea it's definitely that commit

[20:25] <lizmat> FWIW, such a sweeping change feels meh just before a release :-(

[20:26] <lizmat> I assume Zoffix had a good reason to do that now

[20:27] <AlexDaniel> well, it resolved a blocker actually

[20:27] <AlexDaniel> but maybe we should rethink something

[20:28] <AlexDaniel> I'm not ok with breaking jvm build actually‚Ä¶

[20:29] <AlexDaniel> I know it's not in the best shape in general, but not building at all is a bit too much IMO

[20:31] <Zoffix> Well, I wanted to resolve the blocker by teaching the things that care about .count to handle multies.

[20:31] <Zoffix> But that was turned down in favour of more restrictive protos.

[20:31] <bartolin> I think there is still something fishy with nqp::multicacheadd on the jvm backend -- and this could very well be the reason for the explosion. I tried to fix something in that area not too long ago, but there is at least one problem left: https://rt.perl.org/Ticket/Display.html?id=126702

[20:31] <Zoffix> I'm also -1 on restrictive protos. In general, not just this close to release.

[20:32] <Zoffix> We already had Crane regress due to the change.

[20:33] <AlexDaniel> (that was resolved with a PR to Crane)

[20:33] <Zoffix> e: say &trait_mod:<does> ~~ Callable; say &trait_mod:<does>.signature; .say for &trait_mod:<does>.candidates¬ª.signature

[20:33] <evalable6> Zoffix, rakudo-moar d4a6b92f3: OUTPUT: ¬´True‚ê§(Mu, Mu, *%)‚ê§(Mu:U $doee, Mu:U $role)‚ê§(Variable:D $v, Mu:U $role)‚ê§¬ª

[20:38] <Zoffix> As for JVM breakage. Well, what's the long-term plan for JVM? There's a million fudges for it in roast, so I'm guessing it's not usable and it seems no one's actively working on it; just bartolin and psch doing occasional "resurrection" and fudging even more tests.

[20:39] <Zoffix> We could revert working more commits and stick even more #if conditionals, to make it "build" (but still not work right) so all that effort is just equivalent to sweeping problems under the rug IMO.

[20:40] <AlexDaniel> I think it's somewhat usable, although I haven't heard of anyone actually using it for anything

[20:40] <Zoffix> s/more/moar/;

[20:40] <AlexDaniel> except for newcomers who just keep asking about it

[20:46] <Zoffix> ( FWIW 4b5d36f3a8 is well-covered with tests https://github.com/rakudo/rakudo/blob/master/t/02-rakudo/12-proto-arity-count.t )

[20:48] <bartolin> well, I like the general idea of supporting different backends. I'm not actively using the jvm backend myself, I'm just trying to help to keep it alive, hoping that some greater mind will jump in at some point.

[20:50] <bartolin> I might be wrong, but I think the majority of fudged tests (for the jvm) are related to unicode stuff or are caused by one or more bugs leading to those infamous UnwindExceptions. Otherwise a lot of features are working ...

[20:52] <pmurias> Zoffix: the biggest argument for keeping the jvm backend alive is that graal/truffle has a ton of promise and having something working to steal stuff from makes it more viable

[20:54] <pmurias> I'm seriously doubtful that the current JVM bytecode emitting approach has a future

[20:55] <Zoffix> But it's not kept fully alive. We just stick `#if jvm -> use old buggy codepath` into rakudo or just fudge failing spectests.

[20:55] <Zoffix> Not all all the time, but often enough.

[20:56] <bartolin> true enough :/

[20:56] <Zoffix> I guess what I'm saying is this isn't the first time a commit I made broke something on JVM and someone suggested it should be fixed/fudged/reverted and if JVM doesn't have the future, then why waste time fixing/fudging/reverting

[20:57] <bartolin> I'd be interested to hear jnthn's opinion on that. He invested a lot of time in the jvm backend, too. (not only back in 2013 or 2014)

[20:58] <AlexDaniel> jnthn: ping ‚Üë

[20:58] <timotimo> rakudo-jvm is potentially also the only way into some devs's hearts

[20:58] <timotimo> well, into their manager's hearts i suppose

[20:58] <AlexDaniel> that's correct, yes

[20:59] <AlexDaniel> but if it barely works‚Ä¶ ü§∑

[20:59] <Zoffix> It's also slow AF. If people say MoarVM is slow... heh, let 'em try out JVM

[21:02] <pmurias> Zoffix: graal/truffle has a large chance of being fast (possibly AF)

[21:03] <Zoffix> pmurias: and who's working on that graal/truffle?

[21:03] <Zoffix> On the backend for it

[21:05] <pmurias> Zoffix: nobody yet, I could volunteer some time jump start it if there are others interested but I don't want to start yet another thing when I'm the only dev

[21:05] <Zoffix> I can reword my statement: "Why waste time on something that apparently doesn't have a future, only to be able to "steal stuff from"‚Äîproviding that stuff is working in the first place‚Äîin the event that in some future time someone might want to work on some other backend"

[21:06] <Zoffix> I also don't fully understand what you mean. The existing code would still remain in the repo's history, so you could still "steal stuff" from it without having to fudge things all the time.

[21:06] <timotimo> it'd be harder if it keeps bitrotting without people regularly looking after it

[21:07] <Zoffix> I wouldn't call fudging spectests and rewriting rakudo's code to avoid JVM bugs "looking after it", but whatever.

[21:08] <timotimo> i'ven't got a good idea for treating the jvm backend right

[21:09] <Zoffix> Were TPF funds ever used to sponsor JVM backend development?

[21:10] <Zoffix> Or any other sponsor's?

[21:13] <lizmat> Zoffix: not afaik

[21:23] <pmurias> Zoffix: copying over stuff from something that doesn't work is harder

[21:29] <pmurias> Zoffix: also reviving the JVM backend will be hard

[21:30] <AlexDaniel> any volunteers for reviving it right now?

[21:31] <pmurias> is it know what's broken? I can add some missing nqp:: op or fix some minor bugs

[21:33] <AlexDaniel> some discussion here: https://irclog.perlgeek.de/perl6-dev/2018-04-22#i_16078190

[21:36] <pmurias> AlexDaniel: if that commit is causing this bug I could look into it (not today)

[21:37] <AlexDaniel> when? :)

[21:40] <pmurias> AlexDaniel: I don't want to make any promises that I won't keep but Tuesday seems likely (will be travelling on Monday)

[21:42] <Zoffix> I don't think it's that commit that causes the bug, but rather it exposes it.

[22:07] * lizmat goes away to get some sleep

[22:12] <AlexDaniel> lizmat++ :)

[22:33] <MasterDuke> i don't know enough to start it myself, but if someone got graal/truffle integration started i would be interested in helping out

[22:40] <Zoffix> ZofBot: help

[22:40] <ZofBot> Zoffix, com/scriptkitties/perl6-dist-helper/pull/35 what about blockers? dogbert11: yeah, these are still up currently jnthn said he'll try to look at #1573 but #1566 needs some love R#1573 ##1566 R#1573 #1566 AlexDaniel: Yeah, there's that and another spesh bug I want to hunt tomorrow sounds great! Beastie

[22:40] <synopsebot> R#1573 [closed]: https://github.com/rakudo/rakudo/issues/1573 [regression][‚ö† blocker ‚ö†] Regression causing previously working script to fail

[22:40] <Zoffix> hm

[22:40] <AlexDaniel> ZofBot: that's old

[22:40] <ZofBot> AlexDaniel, He told us to sit down on the far side of the table and he sat down on the other side

[22:40] <Zoffix> For some reason earlier plugins in the list don't match :/

[22:45] <Zoffix> this is kinda weird

[22:45] <Zoffix> I have a file calls this: https://github.com/zoffixznet/perl6-Games-TauStation-DateTime/blob/master/lib/Games/TauStation/DateTime.pm6

[22:46] <Zoffix> But inside of it is `unit class GCT`.. And in my meta I have `"GCT": "the file"` in provides... And I can't -MGCT with -Ilib when developing, yet it works when module is installed, and I can't -MGames::TauStation::DateTime when module is installed, but I can when I'm developing, with -Ilib

[22:47] <Zoffix> s/calls/called/;

[22:48] * Zoffix wraps it up in module Games::TauStation::DateTime just in case

[23:20] <AlexDaniel> jnthn: there was a discussion about jvm backend today: https://irclog.perlgeek.de/perl6-dev/2018-04-22#i_16078492

[23:21] <AlexDaniel> (starting from here: https://irclog.perlgeek.de/perl6-dev/2018-04-22#i_16078190 )

[23:21] <AlexDaniel> in case you missed it

[23:21] <jnthn> Yeah, I saw, I'm too tired to participate.

[23:21] <jnthn> Though TPF has in a sense funded JVM work in that I've taken care of keeping JVM working when I've done major changes funding through that work.

[23:22] <jnthn> s/funding/funded/

[23:23] <MasterDuke> is there any good way to profile the jvm compiling the setting? or, is it known what parts are the slowest? any LHF perf-wise?

[23:24] <jnthn> Could use VisualVM

[23:24] <jnthn> Which comes with the JVM as standard, I think.

[23:24] <MasterDuke> huh, never heard of it

[23:24] <jnthn> https://docs.oracle.com/javase/8/docs/technotes/guides/visualvm/profiler.html

[23:25] <jnthn> I used it when I was working more intensively on the JVM stuff in the past

[23:25] <jnthn> Sleep time for me; 'night

[23:39] <tony-o> timotimo: i was looking at the possibility of using the moarvm coverage flags as a way to do test coverage

[23:39] <tony-o> it seemed to me that it wasn't reporting lines hit, but whenever a function was called (and not necessarily returned from)

[23:40] <MasterDuke> tony-o: it definitely does lines, but optimizations may throw it off

[23:41] <Zoffix> Yeah, there's a slightly dated article on generating test coverage: https://rakudo.party/post/Perl-6-Core-Hacking-Can-Has-Moar-Cover

[23:41] <Zoffix> You need to disable optimizations and even then it's not very perfect.

[23:42] <Zoffix> (well, the article is about coverage of core, but I think it can be tweaked to show coverage of any script)

[23:46] <timotimo> it doesn't report what lines definitely exist, either

[23:46] <timotimo> you need to moar --dump the bytecode files for that :(

[23:47] <timotimo> gnite!

[23:47] <Zoffix> \o

[23:47] <Zoffix> ZofBot: gct 198.17/0:0

[23:47] <ZofBot> Zoffix, 2018-04-25T01:42:29.925148Z; which is 2 days, 1 hour, 54 minutes, and 42 seconds from now

[23:48] <Zoffix> ZofBot: gct D/8:0

[23:48] <ZofBot> Zoffix, 2018-04-23T01:43:14.773074Z; which is 1 hour, 55 minutes, and 11 seconds from now

[23:48] <Zoffix> Nice :)

[23:48] <Zoffix> moritz: ^ takes those via /msg too, if you ever need 'em
