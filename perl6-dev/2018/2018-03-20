[00:03] <samcv> jnthn: any chance you can look at my rakudo PR https://github.com/rakudo/rakudo/pull/1617 you were the one who last edited those files

[00:15] <jnthn> samcv: reviewed

[01:30] <Geth> ¦ rakudo: 6458811a89 | (Samantha McVey)++ | 4 files

[01:30] <Geth> ¦ rakudo: Add strict, replacement options for IO::Handle, Str.encode & other fixes

[01:30] <Geth> ¦ rakudo:

[01:30] <Geth> ¦ rakudo: * Combine Encoding::Encoder::Builtin::Replacement and Encoding::Encoder::Builtin

[01:30] <Geth> ¦ rakudo:   into one class. They were essentially duplicated, and we can achieve the same

[01:30] <Geth> ¦ rakudo:   goal without adding any additional overhead.

[01:30] <Geth> ¦ rakudo:

[01:30] <Geth> ¦ rakudo: * Encoding.decoder:  make sure :!replacement does not attempt to use a

[01:30] <Geth> ¦ rakudo: <…commit message has 12 more lines…>

[01:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6458811a89

[01:31] <Geth> ¦ rakudo: c9c5f34130 | (Samantha McVey)++ | src/core/Rakudo/Internals.pm6

[01:31] <Geth> ¦ rakudo: Fix bug mapping windows1252/windows1251 without a dash

[01:31] <Geth> ¦ rakudo:

[01:31] <Geth> ¦ rakudo: This bug did not result in any regression, since we did not accept

[01:31] <Geth> ¦ rakudo: windows-1252 or windows-1251 without the dash until very recently. By

[01:31] <Geth> ¦ rakudo: accident windows1252 was mapping to windows-1251 and windows1251 was

[01:31] <Geth> ¦ rakudo: mapping to windows-1252.

[01:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c9c5f34130

[01:31] <Geth> ¦ rakudo: 3420b67b67 | (Samantha McVey)++ (committed using GitHub Web editor) | 5 files

[01:31] <Geth> ¦ rakudo: Merge pull request #1617 from samcv/encoder

[01:31] <Geth> ¦ rakudo:

[01:31] <Geth> ¦ rakudo: Add strict, replacement options for IO::Handle, Str.encode & other fixes

[01:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3420b67b67

[07:45] <Geth> ¦ nqp: 68164ca223 | (Stefan Seifert)++ | t/concurrency/03-semaphore.t

[07:45] <Geth> ¦ nqp: Hopefully fix flapping semaphore test

[07:45] <Geth> ¦ nqp:

[07:45] <Geth> ¦ nqp: There was a race condition on the $released variable. $t6 released the

[07:45] <Geth> ¦ nqp: semaphore and only then set the $released variable to 1. It's possible that

[07:45] <Geth> ¦ nqp: $t5 ackquired the semaphore and checked the $released variable between this

[07:45] <Geth> ¦ nqp: release and set. So the test would fail because $released was still 0.

[07:45] <Geth> ¦ nqp: First set the variable and then release the semaphore to fix the race.

[07:45] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/68164ca223

[07:46] <nine> .ask jnthn do you concur with the reasoning? https://github.com/perl6/nqp/commit/68164ca223

[07:46] <yoleaux> nine: I'll pass your message to jnthn.

[08:07] <travis-ci> NQP build passed. Stefan Seifert 'Hopefully fix flapping semaphore test

[08:07] <travis-ci> https://travis-ci.org/perl6/nqp/builds/355731684 https://github.com/perl6/nqp/compare/a2f66567052e...68164ca22305

[08:30] <lizmat> Files=1236, Tests=76153, 316 wallclock secs (14.95 usr  5.35 sys + 2172.34 cusr 216.08 csys = 2408.72 CPU)

[09:40] <Geth> ¦ nqp: 200e4cf4ed | (Stefan Seifert)++ | t/concurrency/01-thread.t

[09:40] <Geth> ¦ nqp: Fix concurrency failure in threadyield sibling test

[09:40] <Geth> ¦ nqp:

[09:40] <Geth> ¦ nqp: Pushing onto an array is not an atomic operation. The array's storage may have

[09:40] <Geth> ¦ nqp: to be expanded first before the new element can be added. Thus a simple check

[09:40] <Geth> ¦ nqp: for nqp::elems(@a) is not enough to ensure that the push is already done. We

[09:40] <Geth> ¦ nqp: also have to check for the actual end result before we may continue. Otherwise

[09:40] <Geth> ¦ nqp: two push operations may run concurrently and one of the updates may be lost.

[09:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/200e4cf4ed

[09:44] <Geth> ¦ rakudo: 34b294d2e1 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperToIterator.pm6

[09:44] <Geth> ¦ rakudo: Give HyperToIterator its own push-all

[09:44] <Geth> ¦ rakudo:

[09:44] <Geth> ¦ rakudo: Should help a bit in the my @a = foo.hyper.bar case.

[09:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/34b294d2e1

[09:44] <Geth> ¦ rakudo: ae0cbc3020 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperToIterator.pm6

[09:44] <Geth> ¦ rakudo: Fix issue with HyperToIterator.skip-at-least

[09:44] <Geth> ¦ rakudo:

[09:44] <Geth> ¦ rakudo: The $!current-items may already have items that we need to skip.  So

[09:44] <Geth> ¦ rakudo: get any new items *after* we have skipped any from the current items.

[09:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ae0cbc3020

[09:48] <Geth> ¦ nqp: 66be87d6df | (Stefan Seifert)++ | t/concurrency/01-thread.t

[09:48] <Geth> ¦ nqp: Fix potential "test run out of order" in 01-thread.t

[09:48] <Geth> ¦ nqp:

[09:48] <Geth> ¦ nqp: Without synchronization, it may happen that two ok() run concurrently and

[09:48] <Geth> ¦ nqp: confuse the test count with one ok() coming in between the update of the global

[09:48] <Geth> ¦ nqp: test counter and the actual print of the test result.

[09:48] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/66be87d6df

[09:49] <nine> Ah concurrency. Always fun.

[11:24] <|Tux|> Rakudo version 2018.03-17-gae0cbc302 - MoarVM version 2018.03-3-g2bd691551

[11:24] <|Tux|> csv-test-xs-20      0.449 -  0.463

[11:24] <|Tux|> csv-ip5xs           0.820 -  0.821

[11:24] <|Tux|> test-t --race       1.054 -  1.058

[11:24] <|Tux|> test-t              2.568 -  2.580

[11:24] <|Tux|> csv-ip5xs-20        7.770 -  7.807

[11:24] <|Tux|> test                8.368 -  9.004

[11:24] <|Tux|> test-t-20 --race   15.992 - 16.790

[11:24] <|Tux|> csv-parser         36.465 - 37.118

[11:24] <|Tux|> test-t-20          46.132 - 46.536

[11:44] <Geth> ¦ nqp: 8f10cb746b | (Stefan Seifert)++ | t/concurrency/01-thread.t

[11:44] <Geth> ¦ nqp: Fix brown paper bag bug in commit 66be87d6df893a6849d07312f8f125610ebfd7f2

[11:44] <Geth> ¦ nqp:

[11:44] <Geth> ¦ nqp: Of course we are only done after we are actually done printing the test

[11:44] <Geth> ¦ nqp: result...

[11:44] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8f10cb746b

[11:50] <Geth> ¦ rakudo: ec5416a9a3 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperToIterator.pm6

[11:50] <Geth> ¦ rakudo: Replace HyperToIterator.push-all by push-exactly

[11:50] <Geth> ¦ rakudo:

[11:50] <Geth> ¦ rakudo: The difference between the two is just one int condition and one int assignment

[11:50] <Geth> ¦ rakudo: per HyperWorkBatch, which is neatly shown in the diff of this commit.

[11:50] <Geth> ¦ rakudo: The extra work, at least currently, completely gets lost in the noise.

[11:50] <Geth> ¦ rakudo:

[11:50] <Geth> ¦ rakudo: Also fix superfluous check and return value in skip-at-least: we only exit the

[11:50] <Geth> ¦ rakudo: loop through -return- anyway.

[11:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ec5416a9a3

[12:57] <Geth> ¦ specs: 690bf9b60e | (Zoffix Znet)++ (committed using GitHub Web editor) | html/perl-with-historical-message.css

[12:57] <Geth> ¦ specs: Show line number anchors on hover

[12:57] <Geth> ¦ specs:

[12:57] <Geth> ¦ specs: for easy linkage

[12:57] <Geth> ¦ specs: review: https://github.com/perl6/specs/commit/690bf9b60e

[13:06] <lizmat> I have a hard time understanding whether this is correct or not:

[13:06] <lizmat> m: dd [[2, 3], [4, [5, 6]]]».produce(&[+])

[13:06] <camelia> rakudo-moar ec5416a9a: OUTPUT: «[[(2,).Seq, (3,).Seq], [(4,).Seq, [(5,).Seq, (6,).Seq]]]␤»

[13:15] <Zoffix> lizmat: yeah, looks right. The hyper discends into iterables, so you're calling .produce(&[+]) on each of those 5 numbers individually

[13:16] <Zoffix> oh

[13:16] <jnthn> Hm, but maybe produce should be nodal?

[13:16] <Zoffix> well, except for the last one. Doesn't descending stops with content

[13:16] <Zoffix> conts I meant

[13:16] <Zoffix> m: dd [5, 6].produce(&[+])

[13:16] <camelia> rakudo-moar ec5416a9a: OUTPUT: «(5, 11).Seq␤»

[13:17] <Zoffix> m: dd [4, [5, 6]].produce(&[+])

[13:17] <camelia> rakudo-moar ec5416a9a: OUTPUT: «(4, 6).Seq␤»

[13:18] <Zoffix> m: say [[2, 3], [4, [5, [1, 2, 3], 6]]]».&{.elems}'

[13:18] <camelia> rakudo-moar ec5416a9a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3, 3], [4, [5, [1, 2, 3], 6]]]».&{.elems}7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤     …»

[13:18] <Zoffix> m: say [[2, 3], [4, [5, [1, 2, 3], 6]]]».&{.elems}

[13:18] <camelia> rakudo-moar ec5416a9a: OUTPUT: «[[1 1] [1 [1 [1 1 1] 1]]]␤»

[13:18] <Zoffix> guess not :S

[13:20] <Zoffix> m: dd [[2, 3], [4, [5, 6]]].map: *.produce(&[+])

[13:20] <camelia> rakudo-moar ec5416a9a: OUTPUT: «((2, 5).Seq, (4, 6).Seq).Seq␤»

[13:20] <Zoffix> m: List.^lookup("produce").^mixin: role { method nodal {} }; dd [[2, 3], [4, [5, 6]]]».produce(&[+])

[13:20] <camelia> rakudo-moar ec5416a9a: OUTPUT: «((2, 5).Seq, (4, 6).Seq)␤»

[13:24] <Zoffix> e: List.^methods(:all).grep(!*.can: "nodal").sort(*.name)».say

[13:24] <evalable6> Zoffix, rakudo-moar ec5416a9a: OUTPUT: «ACCEPTS␤ACCEPTS␤ACCEPTS␤ASSIGN-POS␤BIND-POS␤BIND-POS␤BUILDALL␤BUILDALL␤BUILD_LEAST_DERIVED…»

[13:24] <evalable6> Zoffix, Full output: https://gist.github.com/c28a66d953666e2e6c0b1f1d5e04d2f2

[13:27] <lizmat> jnthn Zoffix: well, that's the thing: produce currently has a proto *not* marked "is nodal", and a candidate that *is*

[13:27] <lizmat> I was streamlining it so that the proto would have the nodal (like we do in most cases)

[13:28] <lizmat> and then I had 2 test started failing

[13:28] <lizmat> *tests

[13:28] <Zoffix> Yeah, +1 on reduce/produce being nodal, seem to be the only ones in that list that are kinda like outliers (and maybe .head/.tail too, since .AT-POS is?)

[13:29] <Zoffix> m: say List.^lookup("produce").candidates.map: ?*.can: "nodal"

[13:29] <camelia> rakudo-moar ec5416a9a: OUTPUT: «(True)␤»

[13:29] <Zoffix> m: say List.^lookup("produce").can: "nodal"

[13:29] <camelia> rakudo-moar ec5416a9a: OUTPUT: «()␤»

[13:30] <Zoffix> It's the whole mixing in a trait goes into that particular routine and not proto thing again.

[13:31] <Zoffix> There are two branchs with trial works RT132710-traits-warn-on-non-proto and RT132710-traits-from-all-multies  IIRC niether works well

[13:31] <lizmat> jnthn: so you agree the result should be: ((2, 5).Seq, (4, 6).Seq) ?

[13:31] <synopsebot> RT#132710 [open]: https://rt.perl.org/Ticket/Display.html?id=132710 [LTA] Warning message for duplicated tighter trait

[13:32] <lizmat> fwiw, that's the result I get if I make it an "only" method with an "is nodal"

[13:32] <Zoffix> "Both ideas are crap and don't quite work out." yeah, looks like there are problems with both

[13:33] <Zoffix> The test descriptions in ./S03-metaops/hyper.t seem to be reversed. They say "blah blah is nodal" but tests that they're not nodal.

[13:34] <Zoffix> (or is it our impl that's inverted?)

[13:35] <lizmat> not sure, the tests were written by TimToady in Oct 2015

[13:36] <lizmat> commit 7ea9ae0fb1752729b

[13:36] <Zoffix> Oh I can't read. I was looking at original data, not the tested result...

[13:38] <Zoffix> lizmat: but yeah, for produce and reduce, the test is testing they're nodal, but the result it's testing with shows it NOT being nodal. Looks like a copy-pasta error with copying produced result from the code.

[13:38] <lizmat> yeah, that's my feeling as well

[13:42] <Zoffix> lizmat: oh and .flat too

[13:42] <jnthn> lizmat: Not sure, don't have the spare time to think about it properly at the moment

[13:42] <lizmat> yeah, it's confusing

[13:42] <lizmat> I'll just commit and see what TimToady thinks of it  :-)

[13:43] <Geth> ¦ nqp: 32fc3e8f17 | (Stefan Seifert)++ | t/concurrency/01-thread.t

[13:43] <Geth> ¦ nqp: Port fix for threadyield sibling test to parent-child test

[13:43] <Geth> ¦ nqp:

[13:43] <Geth> ¦ nqp: The threadyield parent-child test is structured similarily to the faulty

[13:43] <Geth> ¦ nqp: sibling test, thus the same fix applies.

[13:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/32fc3e8f17

[13:43] <nine> Kinda odd that the sibling test failed so often while the same issue in the parent-child test was really hard to reproduce.

[13:45] <Geth> ¦ rakudo: 08eb465f9f | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm6

[13:45] <Geth> ¦ rakudo: Make .produce/.reduce nodal the correct way

[13:45] <Geth> ¦ rakudo:

[13:45] <Geth> ¦ rakudo: The intent seems to be that they should be nodal, but they way this

[13:45] <Geth> ¦ rakudo: was implemented, hid the "is nodal" functionality.

[13:45] <Geth> ¦ rakudo:

[13:45] <Geth> ¦ rakudo: Simplify the actually working candidate to not need a temporary variable

[13:45] <Geth> ¦ rakudo: or an -if- statement: if the lookup for the reducer fails, a Failure will

[13:45] <Geth> ¦ rakudo: <…commit message has 11 more lines…>

[13:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/08eb465f9f

[13:53] <lizmat> GH #1633

[13:53] <lizmat> GH R#1633

[13:53] <synopsebot> R#1633 [open]: https://github.com/rakudo/rakudo/issues/1633 Nodality of .produce / .reduce

[14:21] <lizmat> m: dd ^10 .race.hyper  # why isn't this a RaceSeq?  If the order of produced values is already indeterminate, why change it to a HyperSeq?

[14:21] <camelia> rakudo-moar 08eb465f9: OUTPUT: «HyperSeq.new(configuration => HyperConfiguration.new(batch => 64, degree => 4))␤»

[14:24] <jnthn> Because .race and .hyper set the processing mode for the operations that *follow* them

[14:25] <jnthn> They don't themselves do anything

[14:25] <lizmat> yeah, I got that

[14:25] <lizmat> but what is the point of using hyper mode when the data given is already in an indeterminate order ?

[14:26] <jnthn> Because the next thing will be a sort. Or will produce Slips. Or will map and then flatten.

[14:27] <lizmat> but wouldn't those end hyper processing anyway, aka produce a serial Seq ?

[14:27] <jnthn> Well, I'd expect RaceSeq sort to just call .hyper.sort

[14:27] <lizmat> I seem to missing something in this discussion  :-)

[14:28] <jnthn> The other two cases - how could we know?

[14:28] <lizmat> .hyper.sort would produce a Seq, right ?

[14:28] <jnthn> No

[14:29] <jnthn> I mean, it does *now*

[14:29] <jnthn> That's because we didn't yet implement all the various operations on HyperSeq/RaceSeq

[14:29] <lizmat> I'm not sure how it could ever *not* produce a Seq

[14:29] <lizmat> .hyper.sort that is

[14:29] <lizmat> I seem to missing something in this discussion  :-)

[14:30] <lizmat> fwiw, I'm looking at implementing various ops on HyperSeq/RaceSeq  :-)

[14:30] <jnthn> It should produce a HyperSeq, so operations beyond that point are parallelized

[14:30] <jnthn> Note that it may also sort batches in parallel and then merge them

[14:31] <lizmat> ok, so the .hyper is contagious in that sense

[14:31] <jnthn> Yes

[14:31] <lizmat> even though the result of .hyper.sort is essentially a Seq

[14:31] <lizmat> I mean, the .sort would have to finish before it can start batching again

[14:31] <jnthn> Well, in the "we have to see all the values before we can produce the first batch of result values" sense

[14:32] <lizmat> right

[14:32] <jnthn> Not really, if you're doing a merge sort then the final merge can produce batches as soon as it's got that many elements merged

[14:32] <jnthn> And downstream processing of those can get on with the job

[14:33] <lizmat> ah, ok, *that*'s what I was missing  :-)

[14:48] <Geth> ¦ rakudo: 7af3b648da | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperWorkStage.pm6

[14:48] <Geth> ¦ rakudo: Make a HyperBatcher responsible for its own sequencing

[14:48] <Geth> ¦ rakudo:

[14:48] <Geth> ¦ rakudo: Some HyperBatchers may not need a sequence number as part of the Batcher.

[14:48] <Geth> ¦ rakudo: Having it in a role, and currently not being able to use writable native

[14:48] <Geth> ¦ rakudo: int attributes from a role, made the sequence number fetching appear quite

[14:48] <Geth> ¦ rakudo: high in profiles.  This was fixed a while ago in the default HyperIteratorBatcher

[14:48] <Geth> ¦ rakudo: by giving it its own native int sequence number.

[14:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7af3b648da

[14:52] <lizmat> jnthn: re Rakudo::Internals::HyperIteratorBatcher, I don't really see why that shouldn't be a class, rather than a role

[14:54] <lizmat> it doesn't define any additional interface either

[14:55] <jnthn> Hmm, it does HyperBatcher?

[14:55] <jnthn> m: say Rakudo::Internals::HyperIteratorBatcher.^roles

[14:55] <camelia> rakudo-moar 08eb465f9: OUTPUT: «((HyperBatcher) (HyperWorkStage))␤»

[14:55] <jnthn> Hah, yes

[14:55] <jnthn> I'm not sure why it's a role either. HyperBatcher is the abstraction

[14:56] <lizmat> that's what I thought :-)

[14:56] <jnthn> (And exists so we can implement alternate, optimized, batchers for arrays/ranges etc.)

[14:56] <lizmat> that's what I was looking at  :-)

[14:56] <jnthn> Could just be copy-pasta :)

[14:56] <lizmat> yeah, looks like

[15:21] <Geth> ¦ rakudo: 8e1366e7a9 | (Elizabeth Mattijsen)++ | 2 files

[15:21] <Geth> ¦ rakudo: Fix apparent copy-pasta

[15:21] <Geth> ¦ rakudo:

[15:21] <Geth> ¦ rakudo: The HyperIteratorBatcher is a consumer of the HyperBatcher role, but

[15:21] <Geth> ¦ rakudo: does not itself need to be a role, or so it seems.

[15:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8e1366e7a9

[15:21] <lizmat> afk for a few hours&

[15:33] <[Coke]> Build Failure on ports-10.6_i386_legacy: MoarVM, libatomic_ops, nqp, rakudo

[15:34] <[Coke]> not sure if we have any os x 10.6 users in the house. (I'm on at least 10.12 everywhere)

[15:34] <[Coke]> ... and 10.5

[16:25] <Geth> ¦ specs: cde208bde0 | (Zoffix Znet)++ (committed using GitHub Web editor) | html/perl-with-historical-message.css

[16:25] <Geth> ¦ specs: Tweak line number shower

[16:25] <Geth> ¦ specs: review: https://github.com/perl6/specs/commit/cde208bde0

[17:39] <Geth> ¦ rakudo: 6ca3920edc | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/packages/Test/Helpers.pm6

[17:39] <Geth> ¦ rakudo: Be more patient in doesn't-hang (by default)

[17:39] <Geth> ¦ rakudo:

[17:39] <Geth> ¦ rakudo: 1.5s may be too low on some systems, especially under load. This

[17:39] <Geth> ¦ rakudo: number will only affect things that hang, so we can set it very high

[17:39] <Geth> ¦ rakudo: (because normally tests should pass).

[17:39] <Geth> ¦ rakudo:

[17:39] <Geth> ¦ rakudo: See #1257.

[17:39] <synopsebot> RAKUDO#1257 [open]: https://github.com/rakudo/rakudo/issues/1257 [regression][severe] Rakudo 2017.10 fails to build on Debian big endian systems

[17:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6ca3920edc

[17:51] <Geth> ¦ rakudo: df85388d3f | (Zoffix Znet)++ (committed using GitHub Web editor) | t/packages/Test/Helpers.pm6

[17:51] <Geth> ¦ rakudo: Sync `doesn't-hang` helper with latest roast version

[17:51] <Geth> ¦ rakudo:

[17:51] <Geth> ¦ rakudo: - Add diag info about re-scaling timing on failure

[17:51] <Geth> ¦ rakudo: - Absolutify executable path (IIRC that fixes some errors)

[17:51] <Geth> ¦ rakudo: - Rescale with larger multiplier for JVM

[17:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/df85388d3f

[19:57] <Geth> ¦ nqp: eba3922cbd | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/io/FileHandle.java

[19:57] <Geth> ¦ nqp: [JVM] Remove some special cases for .open modes

[19:57] <Geth> ¦ nqp:

[19:57] <Geth> ¦ nqp: Some combinations of arguments to .open that didn't work to well

[19:57] <Geth> ¦ nqp: with Java's StandardOpenOptions have been removed from roast with

[19:57] <Geth> ¦ nqp: https://github.com/perl6/roast/commit/37aa7c3d7f. So some recently

[19:57] <Geth> ¦ nqp: added special cases for resolveOpenMode are no longer necessary.

[19:57] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/eba3922cbd

[21:10] <Geth> ¦ rakudo: 9532e9c327 | (Elizabeth Mattijsen)++ | 2 files

[21:10] <Geth> ¦ rakudo: Move parameter checking to HyperConfiguration.new

[21:10] <Geth> ¦ rakudo:

[21:10] <Geth> ¦ rakudo: Whether :batch and :degree are valid or not, is really best checked

[21:10] <Geth> ¦ rakudo: inside the HyperConfiguration class itself.  Initially I moved the

[21:10] <Geth> ¦ rakudo: Iterable!valid-hyper-race to HyperConfiguration, but then it felt

[21:10] <Geth> ¦ rakudo: contrived.  So bit the bullet and moved the check to a TWEAK submethod.

[21:10] <Geth> ¦ rakudo:

[21:10] <Geth> ¦ rakudo: This should make it easier to create .hyper / .race methods in other

[21:10] <Geth> ¦ rakudo: classes, such as Range, Array, List, etc.

[21:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9532e9c327

[21:54] <dogbert11> t/spec/S03-metaops/hyper.t fails two tests atm

[22:20] <lizmat> dogbert11: yes, see GH R#1633

[22:20] <synopsebot> R#1633 [open]: https://github.com/rakudo/rakudo/issues/1633 Nodality of .produce / .reduce

[23:30] <Geth> ¦ rakudo/js: 934 commits pushed by (Tom Browder)++, (Elizabeth Mattijsen)++, (Jonathan Worthington)++, (Daniel Green)++, (Aleks-Daniel Jakimenko-Aleksejev)++, (Samantha McVey)++, usev6++, (Nick Logan)++, (Zoffix Znet)++, (Alex Chen)++, lizmat++, (Moritz Lenz)++, (Timo Paulssen)++, (Martin Barth)++, (Fernando Correa)++, (Fernando Correa de Oliveira)++, TimToady++, (Tim Smith)++, (Ben Davies)++, (Jeremy Studer)++, MasterDuke17++, (Itsuki Toyota

[23:30] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/compare/945fdd6ee90f...750befd5e64b
