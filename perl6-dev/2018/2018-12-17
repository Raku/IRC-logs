[00:17] *** dct left
[00:34] *** thundergnat left
[01:27] *** lizmat left
[01:33] *** lucasb left
[02:10] *** AlexDani` joined
[02:11] *** p6bannerbot sets mode: +v AlexDani`

[02:15] *** AlexDaniel left
[02:18] <Geth> ¦ roast/cur-candidates: 4317fb4039 | (Nick Logan)++ | S11-repository/cur-candidates.t

[02:18] <Geth> ¦ roast/cur-candidates: Add basic tests for .files and .run-script

[02:18] <Geth> ¦ roast/cur-candidates: review: https://github.com/perl6/roast/commit/4317fb4039

[02:48] *** AlexDani` is now known as AlexDaniel

[03:17] *** ufobat_ joined
[03:18] *** p6bannerbot sets mode: +v ufobat_

[03:21] *** ufobat___ left
[04:40] <Geth> ¦ rakudo: e2e5cc53c7 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/PrecompilationRepository.pm6

[04:40] <Geth> ¦ rakudo: Use absolute path when spawning $*EXECUTABLE

[04:40] <Geth> ¦ rakudo: 

[04:40] <Geth> ¦ rakudo: perl6 might have been invoked as e.g. 'install/bin/perl6', which is what $*EXECUTABLE would stringify to. But if the cwd gets changed at run time then the command for precompiling would fail.

[04:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e2e5cc53c7

[05:03] *** cognomin_ joined
[05:04] *** p6bannerbot sets mode: +v cognomin_

[05:06] *** cognominal left
[06:54] *** reportable6 left
[06:55] *** reportable6 joined
[06:55] *** ChanServ sets mode: +v reportable6

[06:56] *** p6bannerbot sets mode: +v reportable6

[07:58] *** dct joined
[07:58] *** p6bannerbot sets mode: +v dct

[08:10] *** dct left
[08:57] *** lizmat joined
[08:57] *** p6bannerbot sets mode: +v lizmat

[09:49] <jnthn> mornfall: Why would on-close not be a right way?

[09:50] <jnthn> I mean, if using a supply block then the `CLOSE` phaser is probably more natural

[09:50] <mornfall> jnthn: no idea, but apparently it has to do with multiple taps... can you look at the PR?

[09:51] <mornfall> https://github.com/rakudo/rakudo/pull/2529

[09:51] <jnthn> Which PR?

[09:52] <jnthn> Oh, I see

[09:52] <jnthn> Yeah, `on-close` is per tap, the resource here is not being created per tap, which is a problem

[09:53] <jnthn> I'd rewrite it using the `Supply.on-demand` method so it does one nqp::watchfile per tapping, and then it'll be fine.

[09:53] <jnthn> There's generally an expectation that each tapping is a new subscription/resource.

[09:54] <jnthn> So it's not the on-close that's wrong, so much as everything else there :)

[09:54] <mornfall> okay, i can have a look at that, presumably it's not urgent

[09:55] <jnthn> Only if it's urgent for something else you're doing ;)

[10:01] *** brrt joined
[10:08] *** brrt left
[10:18] *** Tux__ is now known as |Tux|

[10:19] <|Tux|> Rakudo version 2018.11-76-ge2e5cc53c - MoarVM version 2018.11-38-gfa3411007

[10:19] <|Tux|> csv-test-xs-20      0.431 -  0.433

[10:19] <|Tux|> test-t --race       0.770 -  0.775

[10:19] <|Tux|> csv-ip5xs           0.924 -  0.935

[10:19] <|Tux|> test-t              1.727 -  1.730

[10:19] <|Tux|> csv-ip5xs-20        7.152 -  7.238

[10:19] <|Tux|> test                6.969 -  7.277

[10:19] <|Tux|> test-t-20 --race    9.190 -  9.426

[10:19] <|Tux|> csv-parser         21.662 - 21.948

[10:19] <|Tux|> test-t-20          29.724 - 30.706

[10:40] <Ulti> snap my tests take 1.71s to run :D

[10:41] <Ulti> it can also take that long to just do `say ""` at the moment on my machne so its probably running really quite fast

[10:42] *** dogbert2_ left
[10:43] <lizmat> .tell nine https://stackoverflow.com/questions/53812672/obtaining-the-qast-of-a-perl-6-file-from-another-program

[10:43] <yoleaux> lizmat: I'll pass your message to nine.

[11:54] *** dogbert2_ joined
[11:55] *** p6bannerbot sets mode: +v dogbert2_

[11:58] *** lucasb joined
[11:58] *** p6bannerbot sets mode: +v lucasb

[13:58] <lizmat> notable6: weekly

[13:58] <notable6> lizmat, No notes for “weekly”

[13:58] <lizmat> wow

[14:43] <Geth> ¦ rakudo: 631940c7be | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[14:43] <Geth> ¦ rakudo: Make all read/write-int offsets uint

[14:43] <Geth> ¦ rakudo: 

[14:43] <Geth> ¦ rakudo: This has no runtime meaning yet, but it possibly could in the future.  For

[14:43] <Geth> ¦ rakudo: now it just shows intent.

[14:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/631940c7be

[14:56] <Geth> ¦ rakudo: 38afa2d6f0 | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[14:56] <Geth> ¦ rakudo: Some more type tightening

[14:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/38afa2d6f0

[16:27] <lizmat> m: blob8.new(255).read-int8(0,1)   # one of the weirder error messages I've ever seen

[16:27] <camelia> rakudo-moar 38afa2d6f: OUTPUT: «Lexical with name '$offset' has a different type in this frame␤  in block <unit> at <tmp> line 1␤␤»

[16:28] <lizmat> m: sub a(uint $foo, Endian $) { }; a 0, 1  # golf

[16:28] <camelia> rakudo-moar 38afa2d6f: OUTPUT: «Lexical with name '$foo' has a different type in this frame␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:29] <lizmat> m: sub a(uint $foo, Bool $) { }; a 0, 1  # further golf

[16:29] <camelia> rakudo-moar 38afa2d6f: OUTPUT: «Lexical with name '$foo' has a different type in this frame␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:29] <lizmat> m: sub a(int $foo, Bool $) { }; a 0, 1  # seems to be related to the use of "uint"

[16:29] <camelia> rakudo-moar 38afa2d6f: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Bool but got Int (1)␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:34] <Geth> ¦ rakudo: lizmat self-assigned Custom multi infix:<~> not working as expected https://github.com/rakudo/rakudo/issues/2548

[16:38] <Geth> ¦ rakudo: 848932df2b | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[16:38] <Geth> ¦ rakudo: Change offsets back to int

[16:38] <Geth> ¦ rakudo: 

[16:38] <Geth> ¦ rakudo: Weird error occurs when specifying the endianness as an integer if the

[16:38] <Geth> ¦ rakudo: first parameter is a "uint".

[16:38] <Geth> ¦ rakudo: 

[16:38] <Geth> ¦ rakudo:     sub a(uint $foo, Bool $) { }; a 0, 1

[16:38] <Geth> ¦ rakudo:     # Lexical with name '$foo' has a different type in this frame

[16:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/848932df2b

[16:46] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/12/17/2018-51-principally-designed/

[16:55] <lizmat> moritz: ^^

[17:09] <nine> Very odd indeed

[17:09] <yoleaux> 10:43Z <lizmat> nine: https://stackoverflow.com/questions/53812672/obtaining-the-qast-of-a-perl-6-file-from-another-program

[17:33] <Geth> ¦ roast: d91dcd8512 | (Elizabeth Mattijsen)++ | S03-buf/write-num.t

[17:33] <Geth> ¦ roast: First batch of buf8.writenum32/64 tests

[17:33] <Geth> ¦ roast: 

[17:33] <Geth> ¦ roast: They mostly fail  :-(

[17:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d91dcd8512

[17:34] <lizmat> nine: ^^^   I would almost come to the point of removing read-num/write-num from the release as they're severely broken

[17:35] <lizmat> m: my $b = buf8.new; $b.write-num64(0,1e0); say $b.read-num64(0)  # this does not round-trip

[17:35] <camelia> rakudo-moar 848932df2: OUTPUT: «4.6071824188000174e+18␤»

[17:39] <jnthn> Given we're managing to assemble bytecode with nums in, I'd guess its' something about read-num64 that's wrong.

[17:39] <jnthn> m: my $b = buf8.new; $b.write-num64(0,1e0); dd $b

[17:39] <camelia> rakudo-moar 848932df2: OUTPUT: «Buf[uint8] $b = Buf[uint8].new(0,0,0,0,0,0,240,63)␤»

[17:42] <jnthn> Yeah, those seem correct

[17:49] <lizmat> m: my $b = buf8.new; $b.write-num32(0,1e0); dd $b  # jnthn, does that look ok to you >

[17:49] <camelia> rakudo-moar 848932df2: OUTPUT: «Buf[uint8] $b = Buf[uint8].new(0,0,0,0,0,0,240,63)␤»

[17:50] <jnthn> Yes.

[17:50] <lizmat> m: my $b = buf8.new; $b.write-num32(0,1e0); dd $b  # jnthn, does that look ok to you?  looks like it's writing 64bit ?

[17:50] <camelia> rakudo-moar 848932df2: OUTPUT: «Buf[uint8] $b = Buf[uint8].new(0,0,0,0,0,0,240,63)␤»

[17:50] <jnthn> It's the read that's the problem and I can kind of see why

[17:50] <jnthn> Oh

[17:50] <jnthn> Yeah, actually the 32-bit num writing doesn't seem to be implemented on either side

[17:50] <lizmat> ah, ok, well that explains then  :-)

[17:50] <jnthn> I can at least fix the 64-bit one to round-trip though :)

[17:51] <lizmat> that would be nice  :-)

[17:52] <jnthn> I wonder if endianness matters for floating point...

[17:53] * lizmat has no idea

[18:04] <AlexDaniel> reportable6: 2018-12-10T00:00:00Z 2018-12-17T00:00:00Z

[18:04] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[18:04] <AlexDaniel> lizmat: maybe this can be added for completeness ↓

[18:04] <AlexDaniel> although I'm not sure how empty it is too!

[18:05] <reportable6> AlexDaniel, https://gist.github.com/b2e6e94e44296220e8825cd456b4d767

[18:05] <AlexDaniel> that's a lot of stuff :)

[18:09] <AlexDaniel> Kaiepi: https://github.com/rakudo/rakudo/issues/2520#issuecomment-447941959

[18:12] <lizmat> AlexDaniel: added, thanks!

[18:12] <Kaiepi> commented AlexDaniel 

[18:14] <AlexDaniel> oh.

[18:14] <AlexDaniel> Kaiepi: if it no longer happens then personally I don't care! :)

[18:14] <jnthn> lizmat: Running spectest, but think I've got it at least a bit better for 64-bit read and 32-bit read/write

[18:15] <lizmat> jnthn: the read-num/write-num tests are not part of t/spectest.data yet, you will need to run them manually

[18:15] <jnthn> I'll leave that to you :)

[18:15] <lizmat> oki

[18:16] <jnthn> https://github.com/MoarVM/MoarVM/commit/987269ea9f

[18:16] <jnthn> I'm off home, just thought I'd have a poke before I go. :)

[18:16] <AlexDaniel> samcv: alright then, we're ready. I'll give Blin another chance to find something (should be ready in ≈1 hour then), but otherwise there are no blockers left

[18:17] <AlexDaniel> wait did that moarvm commit just land on master? :)

[18:17] <jnthn> Sure

[18:17] <AlexDaniel> “This might need tweaking for big endian platforms”?

[18:17] <jnthn> It's touching stuff that didn't exist in the last release :)

[18:17] <jnthn> So there's no way it can be a regression.

[18:19] <AlexDaniel> alright

[18:19] <Geth> ¦ nqp: 6e229d8d2f | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[18:19] <Geth> ¦ nqp: [MoarVM Bump] 987269ea9 Get readnum working, t […]

[18:19] <Geth> ¦ nqp: 

[18:19] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.11-38-gfa34110...2018.11-39-g987269ea9

[18:19] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6e229d8d2f

[18:19] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.11-38-gfa34110...2018.11-39-g987269ea9

[18:19] <Geth> ¦ rakudo: eb31db95b6 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[18:19] <Geth> ¦ rakudo: [NQP Bump] 6e229d8d2 [MoarVM Bump] 987269ea9 G […]

[18:19] <Geth> ¦ rakudo: 

[18:19] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.11-57-g2fb17c58b...2018.11-58-g6e229d8d2

[18:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eb31db95b6

[18:19] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.11-57-g2fb17c58b...2018.11-58-g6e229d8d2

[18:20] <lizmat> AlexDaniel++

[18:21] <lucasb> .oO( How big are those endians anyway?! )

[18:21] <timotimo> would you rather fight a hundred small endian chickens or one really big endian chicken?

[18:21] <timotimo> er

[18:21] <jnthn> oh, right, chicken...I was meant to go for dinner :)

[18:21] <timotimo> would you rather fight a hundred little endian chickens or one really big endian chicken?

[18:22] <jnthn> bbl

[18:22] <lizmat> .oO( big endian chickens give larger eggs )

[18:27] <Geth> ¦ roast: 77da1465dd | (Elizabeth Mattijsen)++ | S03-buf/read-num.t

[18:27] <Geth> ¦ roast: Remove now unnecessary try's

[18:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/77da1465dd

[18:27] <lizmat> jnthn++ looking good!

[18:35] <Geth> ¦ rakudo: e96b7ffed4 | (Elizabeth Mattijsen)++ | t/spectest.data

[18:35] <Geth> ¦ rakudo: Run read-num/write-num tests also

[18:35] <Geth> ¦ rakudo: 

[18:35] <Geth> ¦ rakudo: As they are clean now

[18:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e96b7ffed4

[18:49] <nine> Ah, of course. C is just too magical. We need a real low level language :)

[18:50] <nine> lizmat: btw. still working on the writeint fix I promised on Saturday. Fighting with a regression on Big Endian machines.

[18:50] <nine> Good thing I got a PowerPC VM running, so I can debug such things

[18:57] <AlexDaniel> nine: awesome

[18:57] <AlexDaniel> nine: just to clarify, everything is fine on HEAD, right?

[19:18] <nine> AlexDaniel: writeint/writeuint don't behave correctly in an error condition. But nothing bad

[20:02] <AlexDaniel> samcv: yeah, Blin is clean

[20:25] <AlexDaniel> mmm hooold on…

[20:26] * AlexDaniel checks r-j again after pulling…

[20:27] <AlexDaniel> not that it matters to moar, but still :)

[20:43] <lizmat> AlexDaniel: ah, perhaps we need to guard the read/write-int methods with a #if ?

[20:52] <AlexDaniel> lizmat: here's the error: https://gist.github.com/AlexDaniel/1f7cb74974691b620dcdb1d33cf0db68

[20:52] <lizmat> yeah, that needs a guard  :-(

[20:52] <lizmat> gimme a mo

[20:58] <Geth> ¦ rakudo: e7b61aff7b | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[20:58] <Geth> ¦ rakudo: Implement read-int/write-int and friends only on MoarVM

[20:58] <Geth> ¦ rakudo: 

[20:58] <Geth> ¦ rakudo: As the underlying nqp:: ops don't exist yet on other backends

[20:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e7b61aff7b

[20:58] <lizmat> AlexDaniel: ^^^

[20:59] <AlexDaniel> lizmat: thanks, testing

[20:59] <lizmat> it should not die on that error anymore

[21:13] <japhb> .tell jnthn I can install IO::Socket::Async::SSL on mildly older Rakudos (such as 2018.10-191-ga0cb89a72), but on a current build it hangs during testing.

[21:13] <yoleaux> japhb: I'll pass your message to jnthn.

[21:15] <AlexDaniel> lizmat: yeah, it's good!

[21:21] <AlexDaniel> japhb: hmm can't reproduce

[21:22] <AlexDaniel> ahhhh maybe I can

[21:25] *** ufobat_ left
[21:26] <AlexDaniel> ok I don't know :) Its tests are weird

[21:26] *** ufobat_ joined
[21:26] *** p6bannerbot sets mode: +v ufobat_

[21:27] <AlexDaniel> in Blin, it's in this list of modules “These seem to hang and leave some processes behind”

[21:27] <AlexDaniel> so I guess that was the case for a long time

[21:28] *** lucasb left
[21:33] *** ufobat_ left
[21:45] <timotimo> AlexDaniel: have you considered cgroups for blin? %)

[21:48] <AlexDaniel> timotimo: sure but someone needs to do it…

[21:48] <Geth> ¦ nqp: 355847eca1 | (Stefan Seifert)++ | t/moar/13-writeint.t

[21:48] <Geth> ¦ nqp: Add tests for writeint of negative numbers

[21:48] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/355847eca1

[21:49] <nine> The regression was about writing negative 16 bit numbers.

[21:49] <timotimo> of course, as always :)

[21:49] <lizmat> hmmm... why didn't the rakudo write-int16 tests not pick that up ?

[21:50] <nine> lizmat: do those tests involve endian switching?

[21:50] <lizmat> yup all sorts of endians: native big little and no endian specified

[21:51] <lizmat> when did this happen ?

[21:52] <nine> It's possible that I didn't run these tests. The regression was in the unpushed fix for the bug you reported on Saturday

[21:52] <nine> In the PowerPC VM I build and run only NQP. Don't have the patience for building rakudo :)

[21:52] <lizmat> ah, ok, so I shouldn't worry about the tests missing cases ?

[21:52] *** dct joined
[21:52] *** p6bannerbot sets mode: +v dct

[21:53] <lizmat> fwiw, I'm playing around with a generic read-bits functionality

[21:55] <nine> tests are probably fine, yes

[21:55] <jnthn> .

[21:55] <yoleaux> 21:13Z <japhb> jnthn: I can install IO::Socket::Async::SSL on mildly older Rakudos (such as 2018.10-191-ga0cb89a72), but on a current build it hangs during testing.

[21:55] <jnthn> I can repro this too :/

[22:00] <jnthn> Is there any way to use bissectable to hunt this?

[22:02] <timotimo> if not bisectable, then at least blin, right?

[22:02] <timotimo> or is blin for bisecting the module only?

[22:03] <jnthn> Dunno.

[22:03] <jnthn> I'm now trying to do a build from just before the last change in that commit range to IO::Socket::Async, which is the first most likely candidate to suspect in recent commits

[22:03] <jnthn> (Between the one mentioned as working)

[22:04] <timotimo> you can definitely use whateverables builds

[22:05] <timotimo> shareable6: HEAD~5

[22:05] <shareable6> timotimo, https://whateverable.6lang.org/HEAD~5

[22:08] <AlexDaniel> timotimo: yeah you can use blin, if of course you uncomment that line that skips this module…

[22:09] <AlexDaniel> but if it hangs then I'm not sure if it's going to behave well

[22:10] <jnthn> Darn it, for the commit I picked, I built the NQP_REVISION and MOAR_REVISION it suggested at that Rakudo commit, and all tests fail with Unhandled exception in code scheduled on thread 6

[22:10] <jnthn> Too many positionals passed; expected 6 arguments but got 7

[22:10] <jnthn> That's as much patience as I have this evening to look in to it.

[22:10] <timotimo> can you tell us the commit? i can perhaps continue where you stopped?

[22:11] <timotimo> though for the moment there's a cat on my lap that just five minutes ago demanded access

[22:11] <jnthn> timotimo: I just picked one, 2fd90b1eccdb, which was before the merge commit that changed IO::Socket::Async

[22:20] <jnthn> OK, I suspected it may be a4db91394f but reverting that doesn't help

[22:21] <jnthn> (Had to do a MoarVM revert also to go with it, but even with that, still the hang)

[22:21] <jnthn> Out of time for now...but at least we know what it isn't. I don't have any other commits that look likely candidates, so bissect is probably the best thing for it.

[22:45] <timotimo> OK, the cat had enough, and i'm full of hair everywhere

[22:45] <AlexDaniel> ===> Install [FAIL] for OpenSSL:ver<0.1.21>:auth<github:sergot>: No installing backend available

[22:45] <AlexDaniel> hmm what does that mean…

[22:46] <timotimo> zef too old? :D

[23:07] *** go|dfish left
[23:12] *** go|dfish joined
[23:12] *** p6bannerbot sets mode: +v go|dfish

[23:20] *** dct left
[23:39] <AlexDaniel> yeah that went away after upgrading zef

[23:47] <timotimo> cool.

[23:47] <timotimo> do we have something like a role i can just mix into an object and have every method call done to it written to the console? kind of like grammar::tracer?

