[00:48] *** leont left
[01:15] *** fake_space_whale joined
[01:16] *** p6bannerbot sets mode: +v fake_space_whale

[01:35] *** ggoebel left
[01:47] *** ggoebel joined
[01:48] *** p6bannerbot sets mode: +v ggoebel

[02:06] <Geth> Â¦ roast: 246481f488 | (Zoffix Znet)++ | 30 files

[02:06] <Geth> Â¦ roast: Add missing plans to subtests

[02:06] <Geth> Â¦ roast: 

[02:06] <Geth> Â¦ roast: Closes https://github.com/perl6/roast/issues/485 S#485

[02:06] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/246481f488

[02:06] <synopsebot> S#485 [open]: https://github.com/perl6/roast/issues/485 [6.d review] Add plans to subtests that are missing them

[02:38] *** PufferBot left
[03:32] *** ufobat___ joined
[03:33] *** p6bannerbot sets mode: +v ufobat___

[03:36] *** ufobat_ left
[04:11] *** fake_space_whale left
[04:26] *** fake_space_whale joined
[04:26] *** p6bannerbot sets mode: +v fake_space_whale

[05:19] *** lizmat left
[05:22] *** lizmat joined
[05:22] *** p6bannerbot sets mode: +v lizmat

[05:33] *** leont joined
[05:33] *** p6bannerbot sets mode: +v leont

[06:18] *** AlexDaniel` left
[06:20] *** AlexDaniel` joined
[06:20] *** p6bannerbot sets mode: +v AlexDaniel`

[06:26] *** leont left
[06:36] *** fake_space_whale left
[06:40] *** AlexDaniel` left
[06:47] *** AlexDaniel` joined
[06:47] *** p6bannerbot sets mode: +v AlexDaniel`

[06:57] *** dct joined
[06:57] *** p6bannerbot sets mode: +v dct

[07:06] *** fake_space_whale joined
[07:07] *** p6bannerbot sets mode: +v fake_space_whale

[07:14] *** dct left
[07:31] *** [TuxCM] joined
[07:31] *** p6bannerbot sets mode: +v [TuxCM]

[07:36] *** lizmat left
[08:01] *** fake_space_whale left
[08:03] *** robertle joined
[08:04] *** p6bannerbot sets mode: +v robertle

[08:38] *** ufobat___ is now known as ufobat

[08:51] *** AlexDaniel` left
[08:57] *** mryan joined
[08:57] *** p6bannerbot sets mode: +v mryan

[09:02] *** AlexDaniel` joined
[09:02] *** p6bannerbot sets mode: +v AlexDaniel`

[09:03] *** mryan left
[09:09] *** dogbert17 left
[09:17] <Geth> Â¦ rakudo: b685036b94 | (Tom Browder)++ (committed using GitHub Web editor) | docs/rakudo-nqp-and-pod-notes.md

[09:17] <Geth> Â¦ rakudo: add a new trap, reword another

[09:17] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b685036b94

[09:33] <Geth> Â¦ rakudo: 1c1527f426 | (Tom Browder)++ (committed using GitHub Web editor) | docs/rakudo-nqp-and-pod-notes.md

[09:33] <Geth> Â¦ rakudo: correct example

[09:33] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c1527f426

[09:42] *** lizmat joined
[09:42] *** p6bannerbot sets mode: +v lizmat

[09:58] *** robertle left
[10:11] <tbrowder___> .ask [Coke] do you know dates for TPC::NA 2019?

[10:11] <yoleaux> tbrowder___: I'll pass your message to [Coke].

[11:46] *** cog left
[12:06] *** robertle joined
[12:07] *** p6bannerbot sets mode: +v robertle

[12:18] *** cog joined
[12:19] *** p6bannerbot sets mode: +v cog

[12:25] *** cog left
[12:26] *** cognominal-p6 joined
[12:27] *** p6bannerbot sets mode: +v cognominal-p6

[13:17] <jnthn> Hmm, startup time seems to have gotten worse sometime recently

[13:18] <timotimo> wow, yeah, 0.2s instead of the usual 0.1s is what i'm seeing

[13:22] <timotimo> "perf report" shows MVM_string_ascii_encode_substr at a surprisingly high place

[13:22] <timotimo> i put a breakpoint and got some very long strings that look a bit like base64 perhaps

[13:23] <jnthn> o.O

[13:23] <timotimo>    at <unknown>:1  (/home/timo/perl6/install/share/nqp/lib/QRegex.moarvm:<dependencies+deserialize>)

[13:24] <timotimo> const_s, then some invoke, then deserialize

[13:24] <timotimo> didn't we kick out base64 strings as blobs?

[13:25] <jnthn> Yes

[13:25] <jnthn> Hmm, there's MoarVM commit e92f6572e58f99b8

[13:26] <timotimo> i believe nine explained what's going on there on IRC around the time of the commit, but i'd expect it's been rebased a few times

[13:26] <timotimo> so you can't find it by id any more, should still be findable based on the comment

[13:27] <jnthn> Well, the code in NQP does this:

[13:27] <jnthn>                 nqp::isnull_s($serialized)

[13:27] <jnthn>                     ?? QAST::Op.new( :op('null_s') )

[13:27] <jnthn>                     !! QAST::SVal.new( :value($serialized) ),

[13:28] <jnthn> That is, checks if there's no base64'd stuff, and if there is, uses the string, otherwise uses null so it will find it in the bytecode file

[13:29] <jnthn> I'm wondering if the change that's in MoarVM HEAD works out OK with the changes in some NQP branch that switches the code-gen over to the new mechanism, but with NQP master results in it doing this less efficient serialization

[13:29] <jnthn> In which case I guess that work is close to merge anyway, so "wait a bit" might be a reasonable answer.

[13:30] <timotimo> right

[13:31] <Geth> Â¦ rakudo/more-local-lowering: 071854b224 | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[13:31] <Geth> Â¦ rakudo/more-local-lowering: Remove dead code

[13:31] <Geth> Â¦ rakudo/more-local-lowering: review: https://github.com/rakudo/rakudo/commit/071854b224

[13:31] <Geth> Â¦ rakudo/more-local-lowering: f4be43c83a | (Jonathan Worthington)++ | 2 files

[13:31] <Geth> Â¦ rakudo/more-local-lowering: Work towards more aggressive lexical lowering

[13:31] <Geth> Â¦ rakudo/more-local-lowering: 

[13:31] <Geth> Â¦ rakudo/more-local-lowering: This starts us down the path of turning "normal" variables into

[13:32] <Geth> Â¦ rakudo/more-local-lowering: locals, which will not only be a little faster for lookup, but give

[13:32] <Geth> Â¦ rakudo/more-local-lowering: dynamic optimizers a good bit more to work with too. It will also

[13:32] <Geth> Â¦ rakudo/more-local-lowering: enable more block flattening.

[13:32] <Geth> Â¦ rakudo/more-local-lowering: 

[13:32] <Geth> Â¦ rakudo/more-local-lowering: This gets the transformation essentially working, however there's

[13:32] <Geth> Â¦ rakudo/more-local-lowering: quite a bit of spectest fallout that needs to be investigated yet

[13:32] <Geth> Â¦ rakudo/more-local-lowering: (most likely with just a few root causes).

[13:32] <Geth> Â¦ rakudo/more-local-lowering: review: https://github.com/rakudo/rakudo/commit/f4be43c83a

[13:32] <jnthn> Just a rebase :)

[13:32] <timotimo> how old was that code? i don't even remember seeing it the last time

[13:33] <jnthn> I started working on it..hmm, earlier this month?

[13:35] <nine> IOW ancient

[13:37] <nine> Oh, that base64 stuff was not exactly intentional. A later commit in my branch makes it obsolete anyway. I'll have a look probably tomorrow.

[13:39] <jnthn> nine++

[13:39] <nine> Unfortunately I lost a day because my desktop wouldn't start anymore. Spent hours tinkering with the hardware and only the very last thing I tried before sending the mainboard off to a 4 week long warranty replacement trip brought it back to life - clearing the CMOS

[13:40] <jnthn> Wow

[13:40] <timotimo> oh wow

[13:40] <jnthn> 1 day is better than 4 weeks, at least...

[13:40] <timotimo> is that the same thing that lets you b0rk an efi bios by putting something in some register even though the spec allows for it? that's like 2 years old at the very least

[13:40] <nine> Thing just wouldn't turn on anymore. Not even a flicker of one of the LEDs or any movement of a fan.

[13:41] <timotimo> have you ever had a POST card? like that would output the state somehow?

[13:41] <nine> Thing is...I didn't do anything :) Turned it off in the morning and when I came back from work it was bricked

[13:41] <nine> The mainboard has it even integrated :) But not even that would turn on

[13:41] <timotimo> wow

[13:41] <jnthn> It's been years since I sent a postcard...

[13:42] <timotimo> try it again, i'm sure people would be delighted to receive one :)

[13:42] <timotimo> "oh how quaint. ol' jonathan has always been into this retro technology"

[13:45] <jnthn> oh ffs

[13:45] <jnthn> sub throws-like($code, $ex_type, $reason?, *%matcher) is export {

[13:45] <jnthn> ...

[13:46] <jnthn> EVAL $code, context => CALLER::CALLER::CALLER::CALLER::;

[13:46] <jnthn> Now consider this test:

[13:46] <jnthn>     my $baz of Int;

[13:46] <jnthn>     throws-like q[$baz = 'xyz'], X::TypeCheck::Assignment, 'of Int restricts to integers';

[13:46] <jnthn> So, Test.pm6 is using something unsupported.

[13:47] <jnthn> I bet this is why so many spectests blow up with the new opt

[13:47] <timotimo> hah

[13:47] <timotimo> should it put a my $context := CALLER::<enough times>::; at the very start of throws-like perhaps?

[13:48] <jnthn> throws-like is from a completely different compilation unit

[13:48] <timotimo> well, yeah, but what about inner blocks?

[13:48] <timotimo> oh, they aren't even considered for CALLER, right?

[13:48] <jnthn> They are but the compiler sees use of CALLER:: and disables all block inlining opts

[13:49] <jnthn> Lexical use of CALLER:: is fine, we can see it 

[13:49] <timotimo> oh, so it's about actually the caller's layout

[13:50] *** lizmat left
[13:50] <jnthn> The lexical to local lowering opt means that the $baz there goes away

[13:50] <jnthn> It doesn't exist as a lexical any more

[13:51] <timotimo> oh!

[13:51] <timotimo> that's what's happening

[13:51] <timotimo> jeez

[13:51] <jnthn> Things are spec'd so as to make alright

[13:51] <jnthn> *make this

[13:51] <jnthn> But Test.pm6 is using a non-spec feature

[13:52] <timotimo> context of EVAL?

[13:52] <jnthn> Yes

[13:53] *** lizmat joined
[13:53] *** p6bannerbot sets mode: +v lizmat

[13:54] <timotimo> i'm not entirely sure why that uses a string instead of a curly block

[13:54] <timotimo> to prevent the optimizer from complaining early?

[13:54] <jnthn> yeah, I guess

[13:54] <jnthn> But it could do the EVAL in the curly block

[13:55] <timotimo> not a bad idea i think

[13:55] <jnthn> As a hack, I've stuck throws-like into the list of poison calls to see how many spectests still fail

[13:55] <jnthn> Plenty do, so there's obviously more I need to fix

[13:56] <timotimo> that doesn't sound fun :|

[13:57] <jnthn> Why do you think I put off working on this until I really need it to make PEA worthwhile? :P

[13:57] <timotimo> it all makes sense

[13:58] <timotimo> m: say .substr(*-3) ~ .substr(*-6, 3) ~ "t" given "implementor"

[13:58] <camelia> rakudo-moar 266af373d: OUTPUT: Â«tormentâ¤Â»

[13:58] <timotimo> m: say .substr(*-3) ~ .substr(*-6, 3) ~ .substr(*-3, 1) given "implementor"

[13:58] <camelia> rakudo-moar 266af373d: OUTPUT: Â«tormentâ¤Â»

[13:58] *** Zoffix joined
[13:58] *** p6bannerbot sets mode: +v Zoffix

[13:59] <Zoffix> jnthn: FWIW, there's been a ticket about throws-like for ages: RT#128419

[13:59] <synopsebot> RT#128419 [new]: https://rt.perl.org/Ticket/Display.html?id=128419 [BUG] throws-like uses :context CALLER:: that will break soon

[13:59] <jnthn> Hah. D'oh. :)

[13:59] <jnthn> I wonder how widely the string form of throws-like is used in the ecosystem...

[14:00] <Zoffix> greppable6: throws-like\s+['"qï½¢]

[14:00] <greppable6> Zoffix, 4 lines, 3 modules: https://gist.github.com/fbe76050ecc9b8f3075e8a7115d127d6

[14:00] <jnthn> One person. :P

[14:01] <Zoffix> AlexDaniel: why does greppable put `git@github` stuff in? In makes links unclickable.

[14:02] <timotimo> could be based on the meta6

[14:02] <timotimo> hm, no

[14:02] <timotimo>     "source-url"    : "git://github.com/sergot/datetime-parse.git"

[14:02] <timotimo> that's not a ssh-style url

[14:07] *** Zoffix left
[14:13] <[Tux]> Sorry

[14:13] <[Tux]> Rakudo version 2018.10-26-g1c1527f42 - MoarVM version 2018.10-25-gfb57d40b8

[14:13] <[Tux]> csv-test-xs-20      0.436 -  0.448

[14:13] <[Tux]> test-t --race       0.964 -  1.009

[14:13] <[Tux]> csv-ip5xs           1.076 -  1.088

[14:13] <[Tux]> test-t              1.980 -  2.071

[14:13] <[Tux]> csv-ip5xs-20        7.792 -  7.924

[14:13] <[Tux]> test                8.228 -  8.392

[14:13] <[Tux]> test-t-20 --race   10.668 - 10.803

[14:13] <[Tux]> csv-parser         20.728 - 22.597

[14:13] <[Tux]> test-t-20          30.868 - 32.112

[14:14] <Geth> Â¦ rakudo/more-local-lowering: 853330d7aa | (Jonathan Worthington)++ | src/Perl6/World.nqp

[14:14] <Geth> Â¦ rakudo/more-local-lowering: Mark our-decls in `our ($a, $b)` form too

[14:14] <Geth> Â¦ rakudo/more-local-lowering: 

[14:14] <Geth> Â¦ rakudo/more-local-lowering: So they won't be mangled by the optimizer.

[14:14] <Geth> Â¦ rakudo/more-local-lowering: review: https://github.com/rakudo/rakudo/commit/853330d7aa

[14:20] <Geth> Â¦ rakudo/more-local-lowering: bc88e438c1 | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[14:20] <Geth> Â¦ rakudo/more-local-lowering: Can't lower if `:($a, $b) := $capture` is used

[14:20] <Geth> Â¦ rakudo/more-local-lowering: 

[14:20] <Geth> Â¦ rakudo/more-local-lowering: Since that uses the signature binder, which needs the real lexicals to

[14:20] <Geth> Â¦ rakudo/more-local-lowering: bind in to. (In the future, when we're smarter, we might be able to just

[14:20] <Geth> Â¦ rakudo/more-local-lowering: compile the destructuring rather than interpreting it in the binder,

[14:20] <Geth> Â¦ rakudo/more-local-lowering: which would get us back to allowing lowering again.)

[14:20] <Geth> Â¦ rakudo/more-local-lowering: review: https://github.com/rakudo/rakudo/commit/bc88e438c1

[14:21] <timotimo> good on you for finding all these rude causes

[14:21] <jnthn> Those fixed quite a few of the failures

[14:22] <jnthn> There's a whole bunch of I/O ones that fail

[14:22] <jnthn> All looking similar

[14:24] <jnthn> oh, interesting

[14:24] <jnthn> my $fh will leave {.close} = open make-temp-file :content<meows>;

[14:24] <jnthn> I guess things with variable traits applied will indeed need some special handling.

[14:34] *** klapperl joined
[14:35] *** p6bannerbot sets mode: +v klapperl

[14:35] *** klapperl_ left
[14:39] *** klapperl_ joined
[14:40] *** p6bannerbot sets mode: +v klapperl_

[14:41] *** klapperl left
[14:41] *** leont joined
[14:42] *** p6bannerbot sets mode: +v leont

[14:49] <Geth> Â¦ rakudo/more-local-lowering: f2d7269935 | (Jonathan Worthington)++ | 4 files

[14:49] <Geth> Â¦ rakudo/more-local-lowering: Don't lower lexicals used by traits

[14:49] <Geth> Â¦ rakudo/more-local-lowering: 

[14:49] <Geth> Â¦ rakudo/more-local-lowering: Otherwise, we break things like `my $x will leave { .close }` style

[14:49] <Geth> Â¦ rakudo/more-local-lowering: constructs.

[14:49] <Geth> Â¦ rakudo/more-local-lowering: review: https://github.com/rakudo/rakudo/commit/f2d7269935

[14:52] <jnthn> With those fixed, plus the throws-like hack, I'm now down to 3 spectests with complaints

[14:52] <timotimo> very good

[14:52] <jnthn> (throws-like hack kept locally)

[14:54] <AlexDaniel> Zoffix: it used to work before, I'm not sureâ¦ hmm

[14:57] <AlexDaniel> Zoffix: because perl6-all-modules changed: https://github.com/moritz/perl6-all-modules/blob/master/github/git@github.com:sergot/http-useragent/lib/HTTP/UserAgent.pm6

[14:57] <AlexDaniel> https://github.com/moritz/perl6-all-modules/tree/master/github

[14:58] <AlexDaniel> :S

[14:58] <AlexDaniel> moritz: â any idea?

[15:02] <moritz> AlexDaniel: about what? is there something wrong?

[15:10] <timotimo> why everything is called [email@hidden.address]
[15:11] <moritz> ah, likely a programming error

[15:12] <lizmat> m: my %m is Map = a => { b => 42 }; dd %m; %m<a><b> = 666; dd %m  # feels to me that should die

[15:12] <camelia> rakudo-moar 266af373d: OUTPUT: Â«Map.new((:a({:b(42)})))â¤Map.new((:a({:b(666)})))â¤Â»

[15:12] <timotimo> deep immutability is Really Hardâ¢

[15:12] <jnthn> But Map doesn't promise that :)

[15:12] <lizmat> well, atm this is perhaps also a syntax thing

[15:12] <jnthn> And { b => 42 } is quite clearly a mutable Hash

[15:13] <timotimo> right

[15:13] <timotimo> do we want syntax for a map literal? like we do for object hashes?

[15:13] <lizmat> but we don't have syntax for a Map

[15:13] <lizmat> well, perhaps we do ?

[15:13] <moritz> Map.new

[15:13] <jnthn> m: my %m is Map = a => Map(b => 42); dd %m; %m<a><b> = 666; dd %m

[15:13] <camelia> rakudo-moar 266af373d: OUTPUT: Â«Cannot coerce to Map with named argumentsâ¤  in block <unit> at <tmp> line 1â¤â¤Â»

[15:13] <jnthn> m: my %m is Map = a => Map((b => 42)); dd %m; %m<a><b> = 666; dd %m

[15:13] <camelia> rakudo-moar 266af373d: OUTPUT: Â«Map.new((:a(Map.new((:b(42))))))â¤Cannot change key 'b' in an immutable Mapâ¤  in block <unit> at <tmp> line 1â¤â¤Â»

[15:13] <jnthn> m: my %m is Map = a => (b => 42).Map; dd %m; %m<a><b> = 666; dd %m

[15:13] <camelia> rakudo-moar 266af373d: OUTPUT: Â«Map.new((:a(Map.new((:b(42))))))â¤Cannot change key 'b' in an immutable Mapâ¤  in block <unit> at <tmp> line 1â¤â¤Â»

[15:14] <lizmat> yeah, I realize I can do that...

[15:14] <lizmat> still, for initializing multi-level Map's, that's sorta LTA

[15:14] <moritz> timotimo, AlexDaniel: fix forthcoming

[15:16] <lizmat> I guess this looks like module space and a "is immutable" trait :-)

[15:19] <timotimo> immumap

[15:19] <lizmat> it would also do arrays: https://modules.perl6.org/dist/Tuple:cpan:ELIZABETH

[15:21] <lizmat> hmmm... bad news: a violation of contract:

[15:21] <lizmat> m: my %m is Map = a => { b => 42 }; dd %m.WHICH; %m<a><b> = 666; dd %m.WHICH

[15:21] <camelia> rakudo-moar 266af373d: OUTPUT: Â«ValueObjAt.new("Map|48F9E6CA8891782BD4CA62AB57C97BE3FED940B2")â¤ValueObjAt.new("Map|29DFBC4D51E71664D7DF9C4CDB232F3E227A9CE9")â¤Â»

[15:21] <lizmat> a changing value type  :-(

[15:23] <timotimo> probably difficult to make that work properly

[15:23] *** fake_space_whale joined
[15:24] <timotimo> only create a ValueObjAt if it's been constructed from only ValueObjAt instances

[15:24] <timotimo> as soon as one thing no matter how deep in the hierarchy goes in that isn't a ValueObjAt, "infect" the tree upwards and have it result in an ObjAt instead?

[15:24] *** p6bannerbot sets mode: +v fake_space_whale

[15:26] <lizmat> yeah, yuk  :-(

[15:27] <nine> rakudo startup performance should be restored with latest moar

[15:28] <timotimo> glad to hear it :)

[15:36] <lizmat> jnthn: are we fine with Map sometimes being a value type, and sometimes not, depending on contents ?

[15:37] <AlexDaniel> moritz: cool, thanks!

[15:48] <Geth> Â¦ rakudo: 4e0a1c2432 | (Elizabeth Mattijsen)++ | src/core/Map.pm6

[15:48] <Geth> Â¦ rakudo: Map.WHICH only value type if all its elements are

[15:48] <Geth> Â¦ rakudo: 

[15:48] <Geth> Â¦ rakudo: As soon as a value is encountered that is not a ValueObjAt, revert to

[15:48] <Geth> Â¦ rakudo: Mu::WHICH.  Fixed R#2447

[15:48] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4e0a1c2432

[15:48] <synopsebot> R#2447 [open]: https://github.com/rakudo/rakudo/issues/2447 Map can have a changing ValueObjAt

[15:52] <jnthn> lizmat: I'm not so keen on that

[15:53] <jnthn> Though may be even less keen on alternatives :P

[15:54] <lizmat> well, *if* we're going to do this, then we could also do it for List.WHICH

[15:54] <jnthn> I don't think a type changing its value nature based on content is right

[15:54] <lizmat> which would solve a lot of issues for some people  and remove one of the reasons for the existence of Tuple

[15:55] <jnthn> It feels rather too unpredictable

[15:55] <lizmat> true

[15:55] <jnthn> Plus it's actually OK to have a value type refer to things that are reference types and just care about their object identity

[15:55] <lizmat> perhaps we need a fully immutable Tuple type, and a fully immutable Dict type ?

[15:55] <jnthn> For example, storing tuples of two objects

[15:56] <lizmat> why would that be ok ?

[15:57] <lizmat> if you change one of the objects, shouldn't that change the WHICH of the tuple ?

[16:00] <jnthn> No

[16:00] <jnthn> Not if the objects are reference types

[16:00] <jnthn> Imagine my objects are nodes and I want to have a set of arrows between them

[16:01] <Geth> Â¦ nqp: 21b7d3c506 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[16:01] <Geth> Â¦ nqp: [MoarVM Bump] Brings 8 commits

[16:01] <Geth> Â¦ nqp: 

[16:01] <Geth> Â¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.10-18-g950fb0e1f...2018.10-26-g318e1ec55

[16:01] <Geth> Â¦ nqp: 318e1ec55 Revert "Have nqp::serialize always return the serialized data"

[16:01] <Geth> Â¦ nqp: fb57d40b8 Fix some format directives

[16:01] <Geth> Â¦ nqp: add43502e prof: log parent thread id in thread creation

[16:01] <Geth> Â¦ nqp: acb5000bf call node's first entry time should be relative

[16:01] <Geth> Â¦ nqp: 5e142f46a expose a thread's start time

[16:01] <Geth> Â¦ nqp: 3eadf7653 expose first entry time in profiler data

[16:01] <Geth> Â¦ nqp: 543f53aad store time of "first ever entry" of call nodes

[16:01] <Geth> Â¦ nqp: a4d4c95d4 factor out profile call node creation

[16:01] <Geth> Â¦ nqp: review: https://github.com/perl6/nqp/commit/21b7d3c506

[16:01] <Geth> Â¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.10-18-g950fb0e1f...2018.10-26-g318e1ec55

[16:01] <Geth> Â¦ rakudo: b8176dc5bf | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[16:01] <Geth> Â¦ rakudo: [NQP Bump] Brings 18 commits

[16:01] <Geth> Â¦ rakudo: 

[16:01] <Geth> Â¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.10...2018.10-18-g21b7d3c50

[16:01] <Geth> Â¦ rakudo: 21b7d3c50 [MoarVM Bump] Brings 8 commits

[16:01] <Geth> Â¦ rakudo: 18df0daf0 throw out silly debug print

[16:01] <Geth> Â¦ rakudo: 8d4d1e756 expose thread's parent thread id in profile

[16:01] <Geth> Â¦ rakudo: 85187cee2 make sure to stringify thread start time

[16:01] <Geth> Â¦ rakudo: <â¦commit message has 14 more linesâ¦>

[16:01] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b8176dc5bf

[16:01] <Geth> Â¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.10...2018.10-18-g21b7d3c50

[16:02] <AlexDaniel> Zoffix: hmmm these bumps look a bit wrong to me

[16:02] <AlexDaniel> some pre-release commits there

[16:03] <AlexDaniel> the description I mean, the bumps themselves are ok

[16:04] <lizmat> jnthn: should (1, 42) be a value type?   (1,my $ = 42) ?  (1,Node.new()) ?

[16:04] <jnthn> lizmat: Given we don't consider List to be one, then no

[16:05] <jnthn> That's entirely what I'm arguing :)

[16:05] <jnthn> If we had a Tuple type, then the answer for all the above would be "yes" if those we made as tuples instead.

[16:05] <lizmat> ok, how about Map (which we *do* consider to be a value type atm)

[16:06] <jnthn> I'm not convinced it should be one, tbh

[16:06] <lizmat> dindins&

[16:17] *** Zoffix joined
[16:17] *** p6bannerbot sets mode: +v Zoffix

[16:17] <Zoffix> AlexDaniel: like which commits?

[16:18] <Zoffix> AlexDaniel: it uses git log --oneline "$before...$after"

[16:21] <AlexDaniel> hmm maybe you're right

[16:22] <AlexDaniel> ok let's see

[16:22] * Zoffix g2g

[16:22] <AlexDaniel> https://github.com/rakudo/rakudo/commit/b8176dc5bfe65af2487a8a68af299f08b1c37fe8#diff-b782d9d013ace2e25a5985d00ef80ccf

[16:22] *** Zoffix left
[16:22] <AlexDaniel> so it should be commits after 2018.10, right?

[16:23] <AlexDaniel> O_o

[16:23] <AlexDaniel> OK nevermind I was looking at an old bump

[16:23] <AlexDaniel> haha

[16:29] *** robertle left
[16:47] *** [TuxCM] left
[16:52] *** travis-ci joined
[16:52] *** p6bannerbot sets mode: +v travis-ci

[16:52] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Map.WHICH only value type if all its elements are

[16:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/448406297 https://github.com/rakudo/rakudo/compare/1c1527f42609...4e0a1c243210

[16:52] *** travis-ci left
[16:52] <buggable> [travis build above] â  Did not recognize some failures. Check results manually.

[17:05] *** robertle joined
[17:06] *** p6bannerbot sets mode: +v robertle

[17:11] *** cognominal-p6 left
[17:20] <lizmat> m: my %m is Map = a => (my $ = 42); %m<a> = 67   # jnthn, do you think this is correct ?

[17:20] <camelia> rakudo-moar 266af373d: OUTPUT: Â«Cannot change key 'a' in an immutable Mapâ¤  in block <unit> at <tmp> line 1â¤â¤Â»

[17:32] <timotimo> i got rid of moarperf's silly requirement for the user to sometimes click "load this data" buttons

[17:40] <japhb> timotimo++

[17:40] <timotimo> i still have an ungodly combination of pure react with setState and react/redux

[17:41] <japhb> The devil is in the details, I suppose

[17:48] *** ufobat left
[17:52] <Geth> Â¦ rakudo: 052067fd13 | (Elizabeth Mattijsen)++ | src/core/Map.pm6

[17:52] <Geth> Â¦ rakudo: Alternate way to fix R#2447

[17:52] <Geth> Â¦ rakudo: 

[17:52] <Geth> Â¦ rakudo: Always use the .WHICH of objects in the map to create the value type .WHICH.

[17:52] <Geth> Â¦ rakudo: Since the .WHICH is supposed to be immutable for an object even if it is not

[17:52] <Geth> Â¦ rakudo: a value type, this can create a stable .WHICH for a Map, even though it still

[17:52] <Geth> Â¦ rakudo: be mutable at a deeper level.

[17:52] <synopsebot> R#2447 [open]: https://github.com/rakudo/rakudo/issues/2447 Map can have a changing ValueObjAt

[17:52] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/052067fd13

[17:52] <timotimo> do you do anything with react?

[17:56] <Geth> Â¦ roast: 49795d8724 | (Elizabeth Mattijsen)++ | S32-hash/map.t

[17:56] <Geth> Â¦ roast: Add test for R#2447

[17:56] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/49795d8724

[17:56] <synopsebot> R#2447 [closed]: https://github.com/rakudo/rakudo/issues/2447 Map can have a changing ValueObjAt

[18:12] <timotimo>     method digit ($/) { @!numbers[*-1] ~= $/.ord.&[+](2358).chr }

[18:12] <timotimo> ^- does the language page on grammars really need to write it this concisely?

[18:12] <timotimo> like, .&[+] is pretty advanced, and probably not easy to find in the docs themselves

[18:13] <lizmat> yeah, I guess that's one of those cases where people were trying to show off  :-)

[18:14] <timotimo> yeah

[18:15] <timotimo> BBL

[18:46] *** j3nnn1 joined
[18:46] *** p6bannerbot sets mode: +v j3nnn1

[19:49] <lizmat> m: class Axe { has $.x = 666 }; say Axe.new.perl   # shouldn't that need to be "Axe.new" ?

[19:49] <camelia> rakudo-moar 266af373d: OUTPUT: Â«Axe.new(x => 666)â¤Â»

[19:49] <lizmat> aka, shouldn't the default .perl look at the value and if it is eqv to the default, not show the parameter ?

[19:50] <lizmat> or is that taking it too far?

[19:51] *** AlexDaniel left
[19:51] *** AlexDaniel joined
[19:51] *** p6bannerbot sets mode: +v AlexDaniel

[19:51] <Geth> Â¦ star/2018.10: fba8e2c456 | (Steve Mynott)++ | 3 files

[19:51] <Geth> Â¦ star/2018.10: remove panda-stub #118

[19:51] <Geth> Â¦ star/2018.10: review: https://github.com/rakudo/star/commit/fba8e2c456

[19:52] *** AlexDaniel left
[19:53] <Geth> Â¦ star/2018.10: 6fe562ca06 | (Steve Mynott)++ | ports/win32/panda.bat

[19:53] <Geth> Â¦ star/2018.10: remove window's panda.bat

[19:53] <Geth> Â¦ star/2018.10: review: https://github.com/rakudo/star/commit/6fe562ca06

[20:01] <Geth> Â¦ star/2018.10: 68ff8e6bc5 | (Steve Mynott)++ | docs/announce/2018.10.md

[20:01] <Geth> Â¦ star/2018.10: import draft announce

[20:01] <Geth> Â¦ star/2018.10: review: https://github.com/rakudo/star/commit/68ff8e6bc5

[20:03] <lizmat> ++stmuk_ 

[20:07] *** AlexDaniel joined
[20:07] *** p6bannerbot sets mode: +v AlexDaniel

[20:07] *** cognominal-p6 joined
[20:08] *** p6bannerbot sets mode: +v cognominal-p6

[20:15] *** cognominal-p6 left
[20:15] *** cognominal-p6 joined
[20:16] *** p6bannerbot sets mode: +v cognominal-p6

[20:35] *** cognominal-p6 left
[20:44] *** ufobat joined
[20:45] *** p6bannerbot sets mode: +v ufobat

[20:58] <ufobat> does anyone still has an idea regarding https://stackoverflow.com/questions/53062118/basic-authentication-in-perl6-with-cro because it just doesn't work on my box :(

[20:58] <ufobat> oups wrong channel

[21:02] *** AlexDaniel left
[21:03] *** AlexDaniel joined
[21:03] *** p6bannerbot sets mode: +v AlexDaniel

[21:22] *** AlexDaniel left
[21:22] *** AlexDaniel joined
[21:22] *** p6bannerbot sets mode: +v AlexDaniel

[21:28] *** robertle left
[22:06] <samcv> .tell Zoffix I will update it soonish. on vacation atm, but should have some time to do it in the next few days

[22:06] <yoleaux> 29 Oct 2018 10:49Z <Zoffix> samcv: would you be able to changelog log 6.d Unicode-related changes and collation stuff? It's over my head and I don't know how to document it all properly: https://github.com/perl6/6.d-prep/blob/master/ChangeLog.md

[22:06] <yoleaux> samcv: I'll pass your message to Zoffix.

[22:15] *** ufobat left
[22:28] *** dct joined
[22:28] *** p6bannerbot sets mode: +v dct

[22:44] *** MasterDuke joined
[22:44] *** p6bannerbot sets mode: +v MasterDuke

[22:45] *** MasterDuke left
[22:45] *** MasterDuke joined
[22:45] *** herbert.freenode.net sets mode: +v MasterDuke

[22:45] *** p6bannerbot sets mode: +v MasterDuke

[22:48] *** cognominal-p6 joined
[22:48] *** p6bannerbot sets mode: +v cognominal-p6

[22:58] *** fake_space_whale left
[23:28] *** dct left
