[01:16] *** |Tux| left
[01:16] *** |Tux| joined
[01:50] *** astj joined
[01:50] *** p6bannerbot sets mode: +v astj

[01:59] *** astj left
[01:59] *** astj joined
[02:00] *** p6bannerbot sets mode: +v astj

[02:47] *** greppable6 joined
[02:47] *** p6bannerbot sets mode: +v greppable6

[03:08] <Geth> ¦ rakudo: FCO++ created pull request #2172: Fix the error of using  on

[03:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2172

[03:15] *** MasterDuke left
[03:44] *** astj left
[03:45] *** astj joined
[03:45] *** p6bannerbot sets mode: +v astj

[06:06] *** batman4221 joined
[06:06] *** batman4221 left
[07:03] <[Tux]> Rakudo version 2018.06-308-g0ac427612 - MoarVM version 2018.06-331-g2c74b672c

[07:03] <[Tux]> csv-test-xs-20      0.436 -  0.464

[07:03] <[Tux]> test-t --race       0.975 -  1.035

[07:03] <[Tux]> csv-ip5xs           1.123 -  1.183

[07:03] <[Tux]> test-t              2.328 -  2.527

[07:03] <[Tux]> csv-ip5xs-20        8.321 -  8.577

[07:03] <[Tux]> test                9.981 - 11.125

[07:03] <[Tux]> test-t-20 --race   13.325 - 13.998

[07:04] <[Tux]> csv-parser         24.459 - 24.953

[07:04] <[Tux]> test-t-20          42.593 - 42.706

[07:06] *** Maple__0 joined
[07:06] *** Maple__0 left
[07:11] *** iamtakingiteasy joined
[07:11] *** iamtakingiteasy left
[07:20] *** yano26 joined
[07:20] *** yano26 left
[07:22] *** fkz joined
[07:22] *** fkz left
[07:22] *** chek joined
[07:22] *** chek left
[07:31] *** EvilWerezombie19 joined
[07:31] *** EvilWerezombie19 left
[07:46] *** ccallahan23 joined
[07:46] *** ccallahan23 left
[08:21] *** ExtraCrispy left
[09:03] <Geth> ¦ rakudo: eb8c5f5cc2 | (Fernando Correa de Oliveira)++ | src/Perl6/Metamodel/MROBasedTypeChecking.nqp

[09:03] <Geth> ¦ rakudo: Fix the error of using  on

[09:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eb8c5f5cc2

[09:03] <Geth> ¦ rakudo: 1ab07c771c | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/MROBasedTypeChecking.nqp

[09:03] <Geth> ¦ rakudo: Merge pull request #2172 from FCO/master

[09:03] <Geth> ¦ rakudo: 

[09:03] <Geth> ¦ rakudo: Fix the error of using  on

[09:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1ab07c771c

[09:04] *** ForexTrader joined
[09:04] *** ForexTrader left
[09:49] *** Zoffix joined
[09:49] *** p6bannerbot sets mode: +v Zoffix

[09:50] *** Zoffix left
[10:02] *** Zoffix joined
[10:02] *** p6bannerbot sets mode: +v Zoffix

[10:02] <Zoffix> uh-oh. Tried to do bumps, but even make test got like a gazillion failures :(

[10:03] <Zoffix> Ah ok

[10:03] <Zoffix> "Cannot resolve caller isa(Perl6::Metamodel::ClassHOW: Int, Int); none of these signatures match"

[10:03] * Zoffix tries a revert

[10:05] *** travis-ci joined
[10:05] *** travis-ci left
[10:08] <Zoffix> SmokeMachine: c'mon bruh. You got a commit bit. You should know to `make spectest` your commits :P

[10:11] <Zoffix> ZOFVM: Files=1302, Tests=152956, 172 wallclock secs (23.31 usr  3.41 sys + 3734.15 cusr 184.62 csys = 3945.49 CPU)

[10:12] <Geth> ¦ nqp: a53d313ee0 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[10:12] <Geth> ¦ nqp: [MoarVM Bump] Brings 2 commits

[10:12] <Geth> ¦ nqp: 

[10:12] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.06-329-g21ea40f...2018.06-331-g2c74b67

[10:12] <Geth> ¦ nqp: 2c74b67 Merge pull request #925 from xelak6/master

[10:12] <Geth> ¦ nqp: bf13bb3 Use the pointer dereference instead of the pointer.

[10:12] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a53d313ee0

[10:12] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-329-g21ea40f...2018.06-331-g2c74b67

[10:12] <Geth> ¦ rakudo: 01dac1e21c | (Zoffix Znet)++ | tools/build/NQP_REVISION

[10:12] <Geth> ¦ rakudo: [NQP Bump] Brings 3 commits

[10:12] <Geth> ¦ rakudo: 

[10:12] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.06-129-ge597564...2018.06-132-ga53d313

[10:12] <Geth> ¦ rakudo: a53d313 [MoarVM Bump] Brings 2 commits

[10:12] <Geth> ¦ rakudo: 9ec4192 Test _nd ops

[10:12] <Geth> ¦ rakudo: 16745ae [js] Impelement _nd ops

[10:12] <Geth> ¦ rakudo: 

[10:12] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.06-329-g21ea40f...2018.06-331-g2c74b67

[10:12] <Geth> ¦ rakudo: 2c74b67 Merge pull request #925 from xelak6/master

[10:12] <Geth> ¦ rakudo: bf13bb3 Use the pointer dereference instead of the pointer.

[10:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/01dac1e21c

[10:12] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-129-ge597564...2018.06-132-ga53d313

[10:12] <Geth> ¦ rakudo: e0a27ce371 | (Zoffix Znet)++ | src/Perl6/Metamodel/MROBasedTypeChecking.nqp

[10:12] <Geth> ¦ rakudo: Revert "Fix the error of using  on"

[10:12] <Geth> ¦ rakudo: 

[10:12] <Geth> ¦ rakudo: This reverts commit eb8c5f5cc2a674ed56fe248be24a48d8159ebb95.

[10:12] <Geth> ¦ rakudo: 

[10:12] <Geth> ¦ rakudo: This doesn't pass even make test

[10:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e0a27ce371

[10:14] <lizmat> Zoffix++

[10:14] <lizmat> *sigh*

[10:16] * lizmat shouldn't merge stuff when not fully awake yet

[10:16] * Zoffix would've merged it too :)

[10:16] *** Zoffix_ left
[10:17] <SmokeMachine> Zoffix: I’m sorry about that... I was doing so many things at the same time... that will not happen again...

[10:17] <Zoffix> Happens sometimes :)

[10:25] *** MasterDuke joined
[10:25] *** p6bannerbot sets mode: +v MasterDuke

[10:31] *** |Tux| left
[10:31] *** |Tux| joined
[10:33] *** |Tux| left
[10:33] *** |Tux| joined
[10:40] *** TimToady left
[10:42] *** astj left
[10:46] *** astj joined
[10:46] *** p6bannerbot sets mode: +v astj

[10:46] *** TimToady joined
[10:47] *** p6bannerbot sets mode: +v TimToady

[10:51] *** astj left
[11:26] *** yoleaux joined
[11:26] *** p6bannerbot sets mode: +v yoleaux

[11:26] *** Zoffix left
[11:33] *** pmurias joined
[11:33] *** p6bannerbot sets mode: +v pmurias

[11:53] *** travis-ci joined
[11:53] *** travis-ci left
[12:25] <lizmat> so did anyone come up with a solution for https://www.reddit.com/r/dailyprogrammer_ideas/comments/908jk6/longest_letterdropping_word_ladder/ ?

[12:29] *** Zoffix joined
[12:29] *** p6bannerbot sets mode: +v Zoffix

[12:29] <Zoffix> lizmat: yeah: perl6 -e 'my %words is Set = lines; %words{"gnash".comb.combinations».join}:k.say' < enable1.txt

[12:29] <Zoffix> :)

[12:31] <Zoffix> Or I guess perl6 -e 'my %words is Set = lines; for "gnash" { %words{.comb.combinations(.chars-1)».join}:k.say }' < enable1.txt

[12:31] <Zoffix> Since you gotta drop 1 letter only

[12:32] *** shreyansh_k25 joined
[12:32] *** shreyansh_k25 left
[12:46] <lizmat> Zoffix: yeah, but it was not about 'gnash' but finding the longest possible

[12:48] <Zoffix> lizmat: ah

[12:49] <Zoffix> And print all the chains

[12:50] <Ulti> if you have a tree of all one letter changes to real words from longest to shortest word its a breadth first search of that tree to find the longest one

[12:50] <Zoffix> "completes in <0.5s on my i7" yeah... A dream to be had for us :)

[12:50] <Ulti> this was actually a problem set in my undergrad

[12:50] <Zoffix> lizmat: then this... but it doesn't complete in my 0.5s :P https://gist.github.com/zoffixznet/b569b3f4a337c3c554b22b3fbdc69e90

[12:51] <Zoffix> Man, these challenges feel like such a waste.

[12:52] <lizmat> well, true, but sometimes they point to some approaches that maybe useful

[12:54] * Zoffix didn't have the patience to wait for the program to complete

[12:54] <Zoffix> I *think* it works tho

[12:54] * Zoffix posts it as an answer :P

[12:54] <Zoffix> ZofBot: #YOLO

[12:54] *** Zoffix left
[13:02] <timotimo> SmokeMachine: i don't think it's reasonable to expect a HOW to behave like a regular object, as it's responsible for handling how objects behave, but our interface for HOWs require passing an actual object first, so that we can also implement prototype-style object systems if we want

[13:05] <SmokeMachine> timotimo: what do you mean by prototype-style? Another thing is: how can I know that a class is a HOW? shouldn't it implement some kind of a role? like a Metamodel role or something like that?

[13:06] <lizmat> Zoffix: I have a solution that runs in ~ 8 seconds, including the bonus

[13:06] <timotimo> where individual objects handle methods and stuff

[13:07] <MasterDuke> geekosaur: was that you about halfway down this thread https://groups.google.com/forum/#!topic/net.unix-wizards/hJMojje7xTo ? a friend randomly sent me that link saying it was an interesting discussion, and then one of those names looked familar from the perl6-users list

[13:08] <pmurias> SmokeMachine: in prototype-style OO an object instance can inherit stuff not from a class but an other object *instance*

[13:09] <Ulti> does .combinations define any order to how the combinations are produced?

[13:10] <SmokeMachine> pmurias: is, like js... but how could that help with the `isa` problem?

[13:10] * Ulti rtfms

[13:11] <pmurias> SmokeMachine: the object model in js doesn't help with anything other then implementing js in a week :)

[13:12] *** j3nnn1 joined
[13:12] *** p6bannerbot sets mode: +v j3nnn1

[13:12] <pmurias> SmokeMachine: what'ss the `isa` problem?

[13:13] <SmokeMachine> m: 42.HOW.isa(Metamodel::ClassHOW)

[13:13] <camelia> rakudo-moar e0a27ce37: OUTPUT: «Too few positionals passed; expected 3 arguments but got 2␤  in block <unit> at <tmp> line 1␤␤»

[13:13] <timotimo> that isa-ok on two HOW instances tries to call a HOW's .isa but neglects to pass an instance

[13:13] <SmokeMachine> pmurias: ^^

[13:13] <Ulti> hmm the docs dont really say much about what you can expect with regard to order, but the synopses do

[13:15] <SmokeMachine> i was trying to do something like `multi isa(Metamodel::ClassHOW: \type) { self.isa: self, type }` on `Any`...

[13:18] <pmurias> SmokeMachine: it seems like there is a name conflict between Mu.isa and Metamodel::ClassHOW.isa

[13:18] <Geth> ¦ nqp/truffle: 1f04e6eb02 | (Paweł Murias)++ | src/vm/jvm/Truffle.nqp

[13:18] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::indexingoptimized

[13:18] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/1f04e6eb02

[13:18] <Geth> ¦ nqp/truffle: 853b0c92e3 | (Paweł Murias)++ | 5 files

[13:18] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::pow_i, nqp::bitneg_i, nqp::bitshiftl_i, nqp::bitshiftr_i

[13:18] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/853b0c92e3

[13:20] <SmokeMachine> pmurias: not only that... `Metamodel::MROBasedTypeChecking`'s `isa` gets that first too...

[13:21] <SmokeMachine> and that one is where the "Too few positionals passed" is thrown...

[13:34] <pmurias> SmokeMachine: how is that conflict causing problems for you?

[13:35] *** skids joined
[13:35] *** p6bannerbot sets mode: +v skids

[13:36] *** pmurias left
[13:38] *** pmurias joined
[13:38] *** diakopter left
[13:38] *** p6bannerbot sets mode: +v pmurias

[13:45] <Geth> ¦ nqp/truffle: 68f6b54bf4 | (Paweł Murias)++ | 3 files

[13:45] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::ord

[13:45] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/68f6b54bf4

[13:58] <lizmat> Zoffix: my finished LDWL solution, comments welcome: https://gist.github.com/lizmat/8fff372998ed43d8d33ec38165bed290

[14:04] <Geth> ¦ nqp/truffle: 252b698ece | (Paweł Murias)++ | 2 files

[14:04] <Geth> ¦ nqp/truffle: [truffle] Fix nqp::uc, nqp::lc

[14:04] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/252b698ece

[14:11] *** lizmat left
[14:13] *** diakopter joined
[14:13] *** p6bannerbot sets mode: +v diakopter

[14:13] *** ChanServ sets mode: -v diakopter

[14:16] <Geth> ¦ nqp: 20b2eb71f7 | MasterDuke17++ (committed using GitHub Web editor) | docs/ops.markdown

[14:16] <Geth> ¦ nqp: Add pow_i to docs

[14:16] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/20b2eb71f7

[14:16] *** lizmat joined
[14:16] *** p6bannerbot sets mode: +v lizmat

[14:21] *** lizmat left
[14:21] *** diakopter left
[14:21] *** diakopter joined
[14:21] *** p6bannerbot sets mode: +v diakopter

[14:23] *** lizmat joined
[14:23] *** p6bannerbot sets mode: +v lizmat

[14:32] <Geth> ¦ nqp/truffle: 78dfbfc7ac | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/control/NQPIfNode.java

[14:32] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::unless with else

[14:32] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/78dfbfc7ac

[14:32] <Geth> ¦ nqp/truffle: bb86b286b5 | (Paweł Murias)++ | src/vm/jvm/Truffle.nqp

[14:32] <Geth> ¦ nqp/truffle: [truffle] Remove duplicated definition

[14:32] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/bb86b286b5

[14:32] <Geth> ¦ nqp/truffle: 1a5af13400 | (Paweł Murias)++ | 4 files

[14:32] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::index and nqp::rindex

[14:32] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/1a5af13400

[14:37] *** grumble joined
[14:38] *** p6bannerbot sets mode: +v grumble

[14:38] *** ChanServ sets mode: -v grumble

[14:38] <Geth> ¦ nqp/truffle: 10bed0641b | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/expression/NQPDivIntNode.java

[14:38] <Geth> ¦ nqp/truffle: [truffle] Fix nqp::div_i

[14:38] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/10bed0641b

[14:38] *** grumble left
[14:40] *** squashable6 left
[14:41] *** squashable6 joined
[14:41] *** p6bannerbot sets mode: +v squashable6

[14:42] *** squashable6 left
[14:42] *** squashable6 joined
[14:43] *** p6bannerbot sets mode: +v squashable6

[14:46] <lizmat> Zoffix: https://www.reddit.com/r/dailyprogrammer_ideas/comments/908jk6/longest_letterdropping_word_ladder/e3jebyy/

[14:47] <lizmat> and that concludes that fun for today :-)

[15:03] <geekosaur> MasterDuke, egads, that's ancient >.>

[15:07] <tbrowder_> shouldn’t that word-ladder problem be on the rosetta code site?

[15:15] *** |Tux| left
[15:15] *** |Tux| joined
[15:17] <tyil> |Tux|: hi

[15:18] <lizmat> Zoffix: shouldn't p6bannerbot have +v'd |Tux| ?

[15:20] *** ExtraCrispy joined
[15:20] *** p6bannerbot sets mode: +v ExtraCrispy

[15:21] *** Zoffix joined
[15:21] *** p6bannerbot sets mode: +v Zoffix

[15:22] <MasterDuke> geekosaur: yeah, haven't found out why/how he came across it

[15:22] *** ChanServ sets mode: +o Zoffix

[15:22] *** Zoffix sets mode: +v |Tux|

[15:23] *** Zoffix sets mode: +v p6bannerbot

[15:24] <|Tux|> Rakudo version 2018.06-312-ge0a27ce37 - MoarVM version 2018.06-331-g2c74b672c

[15:24] <|Tux|> csv-test-xs-20      0.449 -  0.456

[15:24] <|Tux|> test-t --race       0.939 -  0.953

[15:24] <|Tux|> csv-ip5xs           0.964 -  1.108

[15:24] <|Tux|> test-t              2.175 -  2.197

[15:24] <|Tux|> csv-ip5xs-20        7.489 -  7.717

[15:24] <|Tux|> test                9.757 - 10.014

[15:24] <|Tux|> test-t-20 --race   12.235 - 12.373

[15:24] <|Tux|> csv-parser         23.940 - 25.170

[15:24] <|Tux|> test-t-20          39.050 - 39.577

[15:24] <|Tux|> 2018-07-30 10:46:58 test-t 2.210

[15:24] <|Tux|> 2018-07-13 08:21:27 test-t 2.207

[15:24] <|Tux|> 2018-07-17 13:19:48 test-t 2.203

[15:24] <|Tux|> 2018-08-03 16:57:31 test-t 2.197

[15:24] <|Tux|> 2018-08-03 17:01:13 test-t 2.175

[15:24] <|Tux|> \o/

[15:24] <lizmat> whee  <2.2

[15:25] <timotimo> oh wow

[15:32] <Ulti> I've seen similar improvements for my tests recently too :)

[15:33] <Zoffix> buggable: speed

[15:34] <buggable> Zoffix, ↑▆▇▅↑▆▆▆█▄▃▅▅▅▆▇▆▄▅▄▆▄▃▂▂▅▅▃▅▅▃▄▃▄▃▆▃▃▂▂▂▃▆▄▃▅▄▃▁▁ dates: 2018-07-14–2018-08-03; range: 12.235s–18.257s; speed: 21% faster (widths: 9/3)

[15:34] *** pmurias left
[15:35] <Zoffix> w00t

[15:35] <Ulti> hah thats a super nice feature

[15:36] <Ulti> I'll have to profile the script I tried yesterday though, as it was a huge fail... so there might be an issue in Rakudo with long strings

[15:37] <Ulti> something that I would expect even a super slow lang to spend maybe minutes on had gone nowhere after a whole day and had used 3.5GB of RAM for a file that uncompressed was ~100MB

[15:38] <Ulti> does --profile dump something out even if you ctrl+c ?

[15:38] <MasterDuke> Ulti: is the code available somewhere?

[15:39] <Ulti> yeah I can make it available and link to a test file

[15:39] <MasterDuke> cool

[15:39] <Ulti> Im using a couple of modules that make how I was doing it super silly

[15:42] <Ulti> MasterDuke: https://gist.github.com/MattOates/b983d9cb97886861b5c10f89715f9431

[15:43] <Ulti> could literally be a bug in my code, but I was seeing the output I expected it just got to the point it had stopped doing anything

[15:43] <Ulti> it didn't move beyond one file and stopped writing output but didnt look like it had finished at all

[15:45] *** ExtraCrispy left
[15:50] *** p6bannerbot left
[15:50] *** p6bannerbot joined
[15:51] *** Zoffix sets mode: +o p6bannerbot

[15:51] <MasterDuke> Ulti: is there a less pathological file to test with?

[15:58] <Ulti> not especially

[15:58] <Ulti> and thats sort of the point

[15:59] <Ulti> chromosome M is the smallest

[15:59] <Ulti> ftp://ftp.ncbi.nlm.nih.gov/genomes/Homo_sapiens/ARCHIVE/BUILD.37.3/CHR_M/hs_ref_GRCh37.p5_chrM.fa.gz

[15:59] <Ulti> but yeah 1 is the biggest 

[16:01] <timotimo> buggable: speed :4

[16:01] <timotimo> how did you get the multiple lines again ..

[16:01] <buggable> timotimo, ↑ ▃ ↑   █      ▄    ▁                              dates: 2018-07-14–2018-08-03

[16:01] <buggable> timotimo, █▇█▃█▇▆▇█  ▂▂▂▇█▇ ▅ █    ▁▂ ▃▁     ▆      ▇  ▃     range: 12.235s–18.257s

[16:01] <buggable> timotimo, ██████████▄██████▇█▅█▆▃  ██▃██▃▇▃▆▁█▃    ▂██▃█▇▂   speed: 21% faster (widths: 9/3)

[16:01] <buggable> timotimo, ███████████████████████▇▅█████████████▅▅▄███████▂▁

[16:02] <timotimo> that's the one

[16:10] *** Zoffix left
[16:13] <MasterDuke> Ulti: strings can only be 4294967295 graphemes long, that might be a problem

[16:42] <Ulti> is there a reason why?

[16:42] <timotimo> we use that int size for that …

[16:44] <Ulti> well thats not exactly the biggest string I can think of :P

[16:44] <Ulti> but yeah for a while now I've been considering just doing my own IO and biosequence types

[16:45] <Ulti> because really I dont even need bytes for these things in RAM more like 2-3bits

[16:45] <lizmat> Ulti: afaik, 1/2/4 bit native arrays have been specced, but alas not implemented

[16:46] <timotimo> that's right

[16:46] <timotimo> wouldn't be terribly hard i don't think?

[16:46] <lizmat> well, some things appear to be easy, like unsigned 64bit natives

[16:46] <Ulti> but more generally thats going to be bad news for P6 as a bioinformatics language

[16:46] <lizmat> but practices makes that more difficult

[16:47] <Ulti> 4GB isnt exactly a huge amount of RAM

[16:47] <Ulti> also that string isnt that long afaik

[16:47] <lizmat> for a while I've been looking at porting P5's 'vec' function, and use that to create an ecosystem version of 1/2/4 bit arrays

[16:48] <Ulti> like id bump the length type to be 64bit maybe though thats kind of awful for short strings

[16:49] <Ulti> but yeah in bioinformatics land single computers with terabytes of RAM being used to operate on single strings that are huge but indexed is not impossible

[16:49] <Ulti> at that point its kind of unlikely anyone would be using Perl of any kind though

[16:51] <lizmat> Ulti: what are typically the operations you want to do on such a large string?  regexes ?

[16:52] <MasterDuke> Ulti: yeah, the file is only 231101742 chars

[16:53] <Ulti> lizmat possibly but far more likely its more just a giant buffer than a "string"

[16:54] <Ulti> when you have something that big the task is assembly

[16:54] <Ulti> so taking all the little tiny 150-250 long reads you have from a sequencing machine and attempting to construct the full chromosome from it

[16:54] <lizmat> well, the idea is that Perl 6 should optimize the hot paths down to assembly

[16:54] <Ulti> which is not a common task

[16:54] <MasterDuke> however, i extracted just the first 11 lines and tried with those, but i'm getting "malformed utf-8"

[16:55] <Ulti> though increasingly for human at least people are now assembling routinely, especially for cancer genomes

[16:55] <Ulti> MasterDuke: oh nice

[16:55] <Ulti> I didnt get that

[16:55] <timotimo> you did decompress it first right? :P

[16:56] <MasterDuke> oh, wait. ha. i did, but then overwrote it

[16:57] <timotimo> typical timotimo

[17:09] *** buggable left
[17:09] *** buggable joined
[17:09] *** ChanServ sets mode: +v buggable

[17:09] *** p6bannerbot sets mode: +v buggable

[17:33] *** stmuk_ joined
[17:34] *** p6bannerbot sets mode: +v stmuk_

[17:35] *** stmuk left
[17:52] <MasterDuke> Ulti: so far the main slowdown seems to be IO::String

[17:59] <MasterDuke> and Compress::Zlib

[17:59] <MasterDuke> if i extract the text file and the just slup it and count the lines, that only takes 8s

[18:00] *** lizmat left
[18:00] <MasterDuke> i tried using IO::String on the extracted file, but killed it after 6m

[18:02] <MasterDuke> and i tried to just gzslurp the compressed file and then count the lines (not using IO::String) and killed it after 7m

[18:06] *** lizmat joined
[18:07] *** p6bannerbot sets mode: +v lizmat

[18:16] <MasterDuke> wow, a --profile of reading just a 500 line file with IO::String and then calling .lines on it is 2.4mb

[18:22] <lizmat> probably changing the gather / take combo into a real iterator, would help a lot already

[18:33] <MasterDuke> lizmat: you're talking about IO::String?

[18:36] <MasterDuke> oh yeah, creating the IO::String doesn't take any time, but calling .lines on is slow

[18:36] <lizmat> yeah, .lines

[18:38] <lizmat> I wonder if Str.lines couldn't just work there?

[18:38] <MasterDuke> well, it's calling self.get

[18:49] <MasterDuke> lizmat: are you going to make IO::String faster?

[18:49] * MasterDuke hopes so, lizmat++ will do a better job

[18:52] <lizmat> I have been tempted...

[18:53] <lizmat> I think the main issue is that the underlying storage is a single string

[18:53] <lizmat> whereas the most standard use of IO::String would probably be line oriented

[18:54] <lizmat> so I would probably rewrite it so that the underlying storage would be a native array of strings

[18:54] <lizmat> and then handle the complexities of tell / seek from there

[18:55] <lizmat> and make the .Str representation a .join on the elements

[18:55] <lizmat> as far as I understand, nqp::join doesn't collapse the strands

[18:55] <lizmat> nqp::join('') that is

[18:56] <MasterDuke> yeah, i think it just creates new strands

[18:57] <MasterDuke> even with a delimiter

[18:58] <timotimo> i believe that's correct

[19:06] *** Zoffix joined
[19:06] *** p6bannerbot sets mode: +v Zoffix

[19:06] <Zoffix> BTW, has anyone tried using the new .READ/.WRITE/.EOF IO::Handle's inheritance interface for IO::String?

[19:07] <Zoffix> Don't know if it'll be faster (since you'll probably gonna be encoding a string just to decode it back again on the way out), but it'll surely be smaller

[19:07] <Zoffix> in lines of code

[19:10] <Zoffix> ( this stuff https://docs.perl6.org/type/IO::Handle#Creating_Custom_Handles )

[19:16] <Zoffix> m: say 7.4856/.1794

[19:16] <camelia> rakudo-moar e0a27ce37: OUTPUT: «41.725753␤»

[19:16] <Zoffix> Makes .lines 41x faster

[19:17] <Zoffix> With this impl: https://gist.github.com/zoffixznet/588fac94d26f6aa77d9941f4e64c1d1c

[19:17] <Zoffix> Needs to make `.open` work and I haven't checked what else would be needed to have the exact same funcionality

[19:18] <MasterDuke> nice. if no-one else gets around to it i'll take a look at that, but it won't be for a little while yet

[19:19] <Zoffix> Tho, do note those methods are really fresh (existed for 25 days) and not in any release yet. They were named .write-internal/.read-internal/.eof-internal in earlier rakudos for some number of releases

[19:20] <Zoffix> since 2017.06

[19:21] <Zoffix> There was also this bug that would mess up with .encoding setting up the encoder: https://github.com/rakudo/rakudo/commit/edf81bfef27793a2f4afd66df90597e7303c8e5b#diff-643d13cf2103efb8cb6557ced0d5d022

[19:21] <Zoffix> e: IO::Handle.new.encoding.say

[19:21] <evalable6> Zoffix, rakudo-moar e0a27ce37: OUTPUT: «utf8␤»

[19:22] <Zoffix> You need to do self.encoding: 'utf-8' (basically different than ^ that default) to avoid that bug

[19:23] *** Zoffix left
[20:36] *** cognominal-p6 joined
[20:36] *** p6bannerbot sets mode: +v cognominal-p6

[20:59] *** skids left
[21:24] <lizmat> m: sub a(Array[Pair] @a) { }; a [a => 42]   # do we actually have a way to accept only arrays with Pair's in them?

[21:24] <camelia> rakudo-moar e0a27ce37: OUTPUT: «Type check failed in binding to parameter '@a'; expected Positional[Array[Pair]] but got Array ($[:a(42)])␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:24] <lizmat> m: sub a(Pair @a) { }; a [a => 42]   # do we actually have a way to accept only arrays with Pair's in them?

[21:24] <camelia> rakudo-moar e0a27ce37: OUTPUT: «Type check failed in binding to parameter '@a'; expected Positional[Pair] but got Array ($[:a(42)])␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:29] <lizmat> afk&

[22:40] *** skids joined
[22:40] *** p6bannerbot sets mode: +v skids

[22:57] *** skids left
[23:37] *** Evel-Knievel26 joined
[23:37] *** Evel-Knievel26 left
