[00:01] <AlexDaniel> any chance of a golf? :)

[00:07] <japhb> AlexDaniel: OK, previous rev got much farther, it passed testing of IO::Path::ChildSecure, but died later in the install sequence at another module I usually never have problems with:

[00:08] <japhb> ===> Testing: Pod::To::HTML:ver<0.3.22>

[00:08] <japhb> # Failed test at t/060-table.t line 92

[00:08] <japhb> # Looks like you failed 1 test of 4

[00:08] <AlexDaniel> Pod::To::HTML? why are you installing it?

[00:09] <AlexDaniel> so what's going on exactly?

[00:09] <japhb> AlexDaniel: Checking ....

[00:10] <japhb> Appears to be a dependency of a dependency, checking which one

[00:12] <japhb> App::Mi6 -> Pod::To::Markdown -> Pod::To::HTML

[00:15] <AlexDaniel> so I should be testing App::Mi6, right?

[00:15] <japhb> AlexDaniel: yeah

[00:16] *** lizmat left
[00:17] <japhb> Generally I find cro and App::Mi6 to have "interesting" dependency trees, in that they catch compiler regressions ... which is part of why I attempt to install them always in my rebuild script, before marking a new build as "safe to put in PATH"

[00:20] <japhb> The last totally clean rebuild I've managed was 2018.09 (the actually release), but I've been AFK a lot since then, so I would not be surprised if I just got unlucky with builds.  Still, it feels like the failure modes post-2018.09 have been more variable and more common than I'm used to.

[00:21] <AlexDaniel> japhb: can you file a ticket?

[00:22] <japhb> AlexDaniel: Against Rakudo, I'm guessing?

[00:22] <AlexDaniel> yeah

[00:23] * japhb wonders how to frame the problem

[00:24] <AlexDaniel> ‚Äúon 2018.09 I was able to install X Y Z, on HEAD(‚Ä¶) these modules fail‚Äù

[00:25] <japhb> I build a couple dozen modules, the list hasn't changed in quite a while, and now I can't get through the entire list on any rev I've tried.  But the failing module changes from rev to rev, so it's not like "this is the one that you can use as a canary and know your fix is correct"

[00:25] * japhb is trying to avoid a ticket that he himself would close as unactionable

[00:26] <AlexDaniel> this can't be closed, it's a blocker

[00:26] <AlexDaniel> until we figure out what's wrong exactly

[00:29] <japhb> AlexDaniel: What's the state of full-ecosystem toasting?  Does that only happen during pre-release?  Are those modules installed in any sort of sequence, or independently each on a fresh Rakudo tree?  Are any of the modules considered automatic hard blockers at this point if they won't install cleanly?

[00:29] <japhb> AlexDaniel: OK, fair enough.

[00:31] <AlexDaniel> japhb: oh that's a lot of questions. Yes I test the whole ecosystem before the release. Previously it was done with Toaster, this release hopefully with a new tool. Toaster attempts to install them independently (sort of), new tool installs every module just once (unless it fails, then there are more attempts and bisection). Any module that used to work on the previous release and doesn't work on HEAD is a blocker unless there's some

[00:31] <AlexDaniel> good reasoning why it should be that way

[00:32] <AlexDaniel> japhb: by the way, App::Mi6 is installed cleanly on HEAD with all of its dependencies

[00:33] <AlexDaniel> and IO::Path::ChildSecure still bisects to 3b453c575de14efd3abfa4f49c82a059ddccc3cd, I did many runs and the result is always the same

[00:33] <AlexDaniel> so on 3b453c575^ it was installable and starting with 3b453c575 it no longer is

[00:34] <AlexDaniel> but maybe the whole 3b453c575 revision is busted, I'm not sure

[00:35] <AlexDaniel> japhb: feel free to ask more :)

[00:35] <japhb> Yeah, I'm wondering if I should write myself a ratchet that tries to keep moving forward on "safe revs", trying every single one and tracking them.

[00:36] <AlexDaniel> no need, my tool tests HEAD and previous release, if there's any need it bisects

[00:36] <AlexDaniel> I mean if there's any issue with any module

[00:36] <AlexDaniel> it also does multiple runs to deflap some modules, and stuff like that

[00:37] <AlexDaniel> so testing every single one is a waste of CO‚ÇÇ I think :)

[00:37] <AlexDaniel> but hey, I can't be telling people not to write tools

[00:37] <AlexDaniel> so go for it if you feel like

[00:38] <japhb> AlexDaniel: No, I meant, so that every time I report a similar problem, I can always report "... and this is the latest rev that managed to install *all* my modules"

[00:40] <AlexDaniel> japhb: IMO that's a bit LTA as some problems are sometimes introduced and then fixed, so last revision when all modules were installable can potentially be a waste of time when trying to figure out what went wrong exactly

[00:41] <AlexDaniel> japhb: BUT if you made a ticket like that, I'd be able to give you the result from bisectable for every failing module

[00:41] <AlexDaniel> in like, a few minutes

[00:41] <AlexDaniel> so it's very useful and LTA at the same time :)

[00:42] <AlexDaniel> japhb: and then, my new tool is vaporware, cuz‚Ä¶ eh uh‚Ä¶ just because‚Ä¶ time I guess

[00:43] <AlexDaniel> it does generate pretty graphs though: https://gist.github.com/AlexDaniel/d7b789eefb34db31ee14f16dadd9a3ad :)

[00:45] <AlexDaniel> heh, which way the arrows should go‚Ä¶ For dependencies, sure, but I'm more interested in error propagation, so I might as well flip them

[00:55] <japhb> OK, submitted.  It stills feel like a crappy bug report, but hopefully it will help.

[00:55] <japhb> R#2345

[00:55] <synopsebot> R#2345 [open]: https://github.com/rakudo/rakudo/issues/2345 Post-2018.09 module install failures

[00:57] <Kaiepi> i think S32-io/IO-Socket-Async might need a little reworking

[00:57] <japhb> Is there a git command for "next rev after A along branch B"?

[00:57] <Kaiepi> it's an awful fragile test

[00:58] <geekosaur> japhb, not directly, because git doesnt' really think that way. goig backwards is trivial, forward is harder because "branch" is more of a structure users impose on its more free-form structure

[01:01] <geekosaur> (in particular, there can be multiple paths from a given HEAD back to a particular commit if there have been "octopus merges")

[01:03] <japhb> geekosaur: nodnod.  I was thinking of doing something like `git rev-list B ^A |tail -1`, but that falls prey to merging in an ancient branch, as for example just happened with the js merge

[01:03] <geekosaur> yep

[01:03] <AlexDaniel> octopus merges! That's exactly what I wanted to read about right now :)

[01:04] <japhb> In some sense, I want to only see the commits that moved the branch tip, so maybe git ref-log?

[01:04] * japhb goes to RTFM

[01:06] <geekosaur> as long as it still exists, sure

[01:06] <geekosaur> (reflog gets gc-d periodically)

[01:07] <geekosaur> (not to mention that it can leave you wondering fi the correct reading is ref-log or re-flog)

[01:11] <japhb> Heh

[01:13] <AlexDaniel> hehe http://lkml.iu.edu/hypermail/linux/kernel/1603.2/01926.html

[01:15] <japhb> Oooh, `git rev-list --oneline --reverse --ancestry-path 2018.09..master` gives a promising list ... --ancestry-path might be the thing that DWIMs.

[01:15] <AlexDaniel> committable: 2018.09,HEAD https://gist.github.com/AlexDaniel/46dc4ea85530f9a5cb558a8b340c8f44

[01:15] <committable6> AlexDaniel, Using file ‚Äúfoo.p6‚Äù as a main file, other files are placed in ‚Äúsandbox/‚Äù

[01:15] <committable6> AlexDaniel, https://gist.github.com/20c7cfdd261ef519e5207b346d83b522

[01:15] <AlexDaniel> bisect: old=2018.09 https://gist.github.com/AlexDaniel/46dc4ea85530f9a5cb558a8b340c8f44

[01:16] <bisectable6> AlexDaniel, Using file ‚Äúfoo.p6‚Äù as a main file, other files are placed in ‚Äúsandbox/‚Äù

[01:16] <bisectable6> AlexDaniel, Bisecting by exit code (old=2018.09 new=8bb34ff). Old exit code: 0

[01:16] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/a883f01d0bc3ffb143084ef0438a6b89

[01:16] <bisectable6> AlexDaniel, (2018-08-13) https://github.com/rakudo/rakudo/commit/2558ffa9be0224e1c719ffc82d4d342180057028

[01:16] <AlexDaniel> ‚Ä¶ merge commit?

[01:17] <AlexDaniel> c: 1a95d05,d8d51d0 https://gist.github.com/AlexDaniel/46dc4ea85530f9a5cb558a8b340c8f44

[01:17] <committable6> AlexDaniel, Using file ‚Äúfoo.p6‚Äù as a main file, other files are placed in ‚Äúsandbox/‚Äù

[01:17] <committable6> AlexDaniel, ¬¶1a95d05,d8d51d0: ¬´¬ª

[01:17] <AlexDaniel> both parents are fine

[01:17] <AlexDaniel> c: 2558ffa9be https://gist.github.com/AlexDaniel/46dc4ea85530f9a5cb558a8b340c8f44

[01:17] <committable6> AlexDaniel, Using file ‚Äúfoo.p6‚Äù as a main file, other files are placed in ‚Äúsandbox/‚Äù

[01:17] <committable6> AlexDaniel, https://gist.github.com/55f7a618c9a2d190fa2c249cb8927a2e

[01:18] <AlexDaniel> busted after the merge o_O

[02:28] <Geth> ¬¶ roast: 77f67b5b02 | (Zoffix Znet)++ | 2 files

[02:28] <Geth> ¬¶ roast: [v6.d REVIEW] Appendicize Range.new with wrong args

[02:28] <Geth> ¬¶ roast: 

[02:28] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/6ac1f272f

[02:28] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/77f67b5b02

[03:08] <Kaiepi> is there a way to only update rakudo files that have been changed instead of having to rebuild the entire package?

[03:13] <MasterDuke> Kaiepi: usually not. if you're talking about the .pm6 files that make it up, most of them are concatenated together and then compiled as one giant file because it's faster

[03:14] <MasterDuke> i think the ext ops and some stuff can be re-built independently, but i don't know exactly what (i just rebuild everything when i make a change)

[03:16] <Kaiepi> damn

[03:49] *** MasterDuke left
[05:15] *** ufobat_ joined
[05:15] *** p6bannerbot sets mode: +v ufobat_

[05:23] <Kaiepi> perl6 -Mnqp <file> is a godsend for catching some errors before running make on rakudo

[05:46] <Kaiepi> why in the absolute fuck does ListenSocket keep thinking $socket-host and $socket-port are undefined Promises when they're clearly defined in SocketListenerTappable?  https://hastebin.com/uladicerez.rb

[05:46] *** AlexDani` joined
[05:47] *** p6bannerbot sets mode: +v AlexDani`

[05:51] *** AlexDaniel left
[06:07] *** brrt joined
[06:08] *** p6bannerbot sets mode: +v brrt

[06:11] <japhb> .tell AlexDaniel` I've got a decent draft of my ratchet-rakudo script running.  I'm going to leave it looping overnight, and see how far it gets.

[06:11] <yoleaux> japhb: I'll pass your message to AlexDaniel`.

[06:12] *** fake_space_whale left
[06:44] *** patrickb joined
[06:44] *** p6bannerbot sets mode: +v patrickb

[07:04] *** brrt left
[07:35] *** Kaiepi left
[07:39] *** Kaiepi joined
[07:40] *** p6bannerbot sets mode: +v Kaiepi

[08:26] *** Ven` joined
[08:27] *** p6bannerbot sets mode: +v Ven`

[08:39] *** Ven` left
[08:40] *** Ven` joined
[08:41] *** p6bannerbot sets mode: +v Ven`

[08:46] *** lizmat joined
[08:46] *** p6bannerbot sets mode: +v lizmat

[08:48] <Geth> ¬¶ nqp: f58e37bee3 | tison++ | src/vm/jvm/runtime/org/perl6/nqp/io/AsyncFileHandle.java

[08:48] <Geth> ¬¶ nqp: [jvm] code clean

[08:48] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/f58e37bee3

[08:50] *** pmurias left
[08:50] *** pmurias joined
[08:50] *** p6bannerbot sets mode: +v pmurias

[09:04] <lizmat> m: my $a; my $b; 42 ?? $a !! $b = 666; dd $a, $b   # TIL

[09:04] <camelia> rakudo-moar 8bb34ff07: OUTPUT: ¬´Int $a = 666‚ê§Any $b = Any‚ê§¬ª

[09:21] <jnthn> First class Scalar strikes again :)

[09:21] <yoleaux> 7 Oct 2018 23:29Z <timotimo> jnthn: i'm not sure i understand "there's still lots more to be had. which is a good job, since ..."; like, the "a good job" part?

[09:22] <jnthn> .tell timotimo https://www.collinsdictionary.com/dictionary/english/its-a-good-job

[09:22] <yoleaux> jnthn: I'll pass your message to timotimo.

[09:38] *** robertle joined
[09:39] *** p6bannerbot sets mode: +v robertle

[09:39] <lizmat> reportable6: 2018-10-01T00:00:00Z 2018-10-08T00:00:00Z

[09:39] <reportable6> lizmat, Couldn't find a snapshot for 2018-10-08T00:00:00Z (try ÔΩ¢listÔΩ£ command to see what's available).

[09:40] <lizmat> reportable6: list

[09:40] <reportable6> lizmat, https://gist.github.com/06ab1033709d8336207c4c1bf62b7894

[09:41] <lizmat> notable6: weekly

[09:41] <notable6> lizmat, 8 notes: https://gist.github.com/482b148bce9008812b86b3615ae39a7f

[09:48] <lizmat> idea: how about using the "use precompilation" in scripts to indicate the user wants the script to be precompiled ?

[10:00] <|Tux|> Rakudo version 2018.09-371-g8bb34ff07 - MoarVM version 2018.09-124-g588873f7a

[10:00] <|Tux|> csv-test-xs-20      0.429 -  0.430

[10:00] <|Tux|> test-t --race       0.811 -  0.816

[10:00] <|Tux|> csv-ip5xs           0.914 -  0.971

[10:00] <|Tux|> test-t              1.699 -  1.726

[10:00] <|Tux|> csv-ip5xs-20        7.585 -  7.615

[10:00] <|Tux|> test                7.947 -  8.027

[10:00] <|Tux|> test-t-20 --race   10.733 - 11.258

[10:00] <|Tux|> csv-parser         21.560 - 21.652

[10:00] <|Tux|> test-t-20          29.673 - 29.695

[10:39] *** pmurias left
[10:40] *** pmurias joined
[10:40] *** p6bannerbot sets mode: +v pmurias

[10:43] *** pmurias left
[10:45] *** pmurias joined
[10:45] *** p6bannerbot sets mode: +v pmurias

[10:53] <lizmat> Files=1255, Tests=75814, 340 wallclock secs (15.77 usr  5.32 sys + 2375.93 cusr 245.55 csys = 2642.57 CPU)

[10:56] <tbrowder__> hi, folks

[10:57] <nine> lizmat: we would only know that we should have been loading the precompiled version when we are already compiling the script ;)

[10:57] <tbrowder__> need some advice again ref pod in rakudo nqp grammar

[10:58] <lizmat> nine: true, but once encountered, we could save a precomped version, or not?

[10:59] <lizmat> and at script startup, we could see if there is a precomped version, whether the SHA matches, and then run that ?

[10:59] <nine> If we can precompile scripts and load them at startup, why would we ever not want to do that?

[11:00] <lizmat> because sometimes you're just working with a throwaway script?

[11:00] <lizmat> and only when you're sure you about it, add the "use precompilationn

[11:00] <lizmat> "?

[11:00] <tbrowder__> situation is i need to extract some info from pod_configuration about presence or absence of a specific key/value that affects whether to take one content grammar alternation or not.

[11:01] <nine> Sounds like a lot of work just to save a couple of kilobytes for precompiled files. It also requires users to actually know about this rather obscure pragma

[11:02] <lizmat> so why don't we just precompile all of our scripts right now ?

[11:02] <lizmat> is it just a matter of NYI ?

[11:02] <nine> pretty much

[11:02] <tbrowder__> it seems i can stringify pod_configuration reliably so i can call a function to extract info into a hash i then read in the grammar.

[11:03] <nine> It's not entirely straight forward as the assumption that we will compile something runs rather deep in rakudo. But there's nothing against it in principle

[11:03] <Geth> ¬¶ roast: f11042b937 | (Elizabeth Mattijsen)++ | S11-modules/export.t

[11:03] <Geth> ¬¶ roast: Unfudge now passing tests

[11:03] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/f11042b937

[11:04] <nine> tbrowder__: so no more advice necessary?

[11:04] <tbrowder__> i can see successful info flow through the hash generation but the passed hash seems to lose the data. the hash is passed as a return

[11:05] <tbrowder__> from the sub. maybe i should pass the hash around as an arg instead?

[11:07] <tbrowder__> or i could, inside grammar, define a special var to carry that info in pod_configuration match

[11:09] <tbrowder__> problem with 2nd op is the weeds of coloncircumfix grammar

[11:10] <tbrowder__> thoughts please? i will attempt using hash as sub arg but wonder why hash return wouldn‚Äôt work

[11:11] <tbrowder__> btw, i‚Äôm using %h instead of $h and wonder how that affects things

[11:13] <lizmat> that should only make a difference if you're iterating over it, no ?

[11:13] *** pmurias left
[11:15] <tbrowder__> i do iterate over it in debugging, but %h seems to work fine in nqp examples on perl6/nqp

[11:15] *** pmurias joined
[11:15] *** p6bannerbot sets mode: +v pmurias

[11:15] <lizmat> yeah, I'm not 100% sure of the semantics in nqp

[11:17] <tbrowder__> unless someone has a better idea, i‚Äôm going to try using hash in sub args. thnx for ‚Äúlistening‚Äù!

[11:20] <lizmat> yw  :-)

[11:24] *** brrt joined
[11:25] *** p6bannerbot sets mode: +v brrt

[11:43] *** epony left
[11:49] *** ZzZombo joined
[11:49] *** p6bannerbot sets mode: +v ZzZombo

[11:59] <Geth> ¬¶ rakudo: 688cbac1ef | (Elizabeth Mattijsen)++ | src/core/IO/Spec.pm6

[11:59] <Geth> ¬¶ rakudo: Initialize lookup at setting compile time, instead of each startup

[11:59] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/688cbac1ef

[11:59] <Geth> ¬¶ rakudo: 92735770f1 | (Elizabeth Mattijsen)++ | src/core/Exception.pm6

[11:59] <Geth> ¬¶ rakudo: Initialize Perl 5 var lookup at setting compile time

[11:59] <Geth> ¬¶ rakudo: 

[11:59] <Geth> ¬¶ rakudo: And not at every startup

[11:59] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/92735770f1

[12:05] *** pmurias left
[12:11] *** pmurias joined
[12:11] *** p6bannerbot sets mode: +v pmurias

[12:12] <tbrowder__> just another thought: the hash may munged due to an error of odd number of elements, sounds like good rabbit to chase...

[12:26] *** epony joined
[12:26] *** p6bannerbot sets mode: +v epony

[12:29] *** fake_space_whale joined
[12:30] *** p6bannerbot sets mode: +v fake_space_whale

[12:45] *** epony left
[12:47] <lizmat> .ask jnthn the difference between my $a := 42 and my \a = 42 appears to be one less QAST::Var(lexical $a :decl(var))

[12:47] <yoleaux> lizmat: I'll pass your message to jnthn.

[12:47] <lizmat> .ask jnthn is that something to pursue in the core setting, to get rid of those QAST::Var's ?

[12:47] <yoleaux> lizmat: I'll pass your message to jnthn.

[13:12] <lizmat> bisectable6: my %h := Hash[Int].new; %h<a> = "b"

[13:12] <bisectable6> lizmat, On both starting points (old=2015.12 new=9273577) the exit code is 0 and the output is identical as well

[13:12] <bisectable6> lizmat, Output on both points: ¬´¬ª

[13:13] <lizmat> m: my %h := Hash[Int].new; %h<a> = "b"

[13:13] <camelia> rakudo-moar 92735770f: ( no output )

[13:13] *** AlexDani` is now known as AlexDaniel

[13:13] <lizmat> hmmm this appears to have been broken like forever :-(

[13:14] <lizmat> m: my Int %h; %h<a> = "b"  # expected output

[13:14] <camelia> rakudo-moar 92735770f: OUTPUT: ¬´Type check failed in assignment to %h; expected Int but got Str ("b")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:18] <AlexDaniel> reportable6: ehhhh you're hanging again?

[13:18] <reportable6> AlexDaniel, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Reportable

[13:18] *** reportable6 left
[13:18] *** reportable6 joined
[13:19] <AlexDaniel> last one on 2018-10-07T06:00:00Z ‚Ä¶ almost

[13:19] *** p6bannerbot sets mode: +v reportable6

[13:19] <AlexDaniel> that will do I think

[13:19] <AlexDaniel> reportable6: 2018-10-01T00:00:00Z 2018-10-07T06:00:00Z

[13:19] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[13:20] <reportable6> AlexDaniel, https://gist.github.com/5cac3a9e6fc01e2ea46d7d772f43a7ff

[13:21] <AlexDaniel> lizmat: that one is close enough ‚Üë

[13:22] <AlexDaniel> just 18 hours off, and changes during these 18 hours will be shown in the next one

[13:25] <lizmat> AlexDaniel++  :-)

[13:28] *** epony joined
[13:28] *** p6bannerbot sets mode: +v epony

[13:39] *** pmurias left
[13:40] *** pmurias joined
[13:40] *** p6bannerbot sets mode: +v pmurias

[14:01] <brrt> maybe we should have an attribute on nativecall to mark calls blocking or nonblocking

[14:03] <jnthn> brrt: why, ooc?

[14:03] <jnthn> Skip the "mark blocked for GC" thing?

[14:03] <brrt> indeed

[14:03] <brrt> that might be a nice optimization 

[14:03] <timotimo> if you know it's a very fast function?

[14:03] <brrt> right

[14:03] <brrt> or an async one

[14:04] <brrt> i'd prefer the default to be blocking, still

[14:04] <timotimo> well, since it's about when it returns on the C level, there's no difference between very fast and async :)

[14:04] <brrt> :-)

[14:04] <jnthn> Yeah, I think going on statistics for that is pushing our luck :)

[14:04] <jnthn> Probably a trait is right

[14:04] <jnthn> And yes, current, safer, semantics as the default, and opt in to the speedier thing when you know it's safe

[14:05] <brrt> I'm imagining a future postmortem saying

[14:05] <timotimo> what would be non-safe? wouldn't it just block other threads until the function is done?

[14:05] <brrt> 'the engineer who added the 'nonblocking' a attribute had only run a benchmark on his local machine'

[14:06] <brrt> that could be fairly bad though

[14:06] <timotimo> surely it'd be a DIHWIDT thing

[14:06] <brrt> DIHWIDT?

[14:06] <timotimo> doctor, it hurts when i do that

[14:06] <brrt> haha, yes

[14:07] <brrt> but the default should probably be to have people not do that

[14:08] <timotimo> right, that's a good default IMO

[14:15] <japhb> AlexDaniel: So my ratchet-rakudo script is still trucking along.  The last successful build of Rakudo and all my modules was 2018.09-24-g75cf8be72 and it's currently working on 2018.09-60-gcc2fcc9af .

[14:15] <AlexDaniel> japhb: yeah, well, js branch merge is the problem

[14:15] <AlexDaniel> so I don't know how well these revisions represent things

[14:16] <AlexDaniel> but we will see

[14:32] *** Ven` left
[14:34] <patrickb> I think it hasn't been linked here: http://blogs.perl.org/users/pawel_murias/2018/10/rakudojs-update---it-has-been-merged-into-master-plus-6pad-unveiling.html

[14:35] <timotimo> yay

[14:38] *** pmurias left
[14:39] *** Ven` joined
[14:39] *** pmurias joined
[14:39] *** p6bannerbot sets mode: +v pmurias

[14:40] *** p6bannerbot sets mode: +v Ven`

[14:41] <AlexDaniel> pmurias++ # awesome

[14:51] <lizmat> m: sub a(--> Mu) { }; dd a   # intriguing error

[14:51] <camelia> rakudo-moar 92735770f: OUTPUT: ¬´Nil‚ê§¬ª

[14:51] <jnthn> How so?

[14:52] <jnthn> Mu is a type check, Nil is the default value of an empty sub, and Nil ~~ Mu

[14:53] <lizmat> ah, duh...  :-)

[14:53] <pmurias> hmm, should rakudo.js be required to support int64?

[14:56] <pmurias> I could emulate int64 with BigInts but the problem is that if I treat js as a 32bit backend, add_i etc. will be 32bit

[15:02] <Kaiepi> can someone take a look at https://github.com/perl6/nqp/pull/505/commits/9d15b5ad3810f9e233dbe8dd90dd88a4342213b9 ? i'm not very experienced with java and i'm not sure if there's a better way of implementing the new op

[15:03] *** brrt left
[15:05] *** Ven` left
[15:06] *** SyrupThinker joined
[15:07] *** p6bannerbot sets mode: +v SyrupThinker

[15:09] <SyrupThinker> Hi. I found a simple bug in rakudo and have a one char fix for it. Should I open a GitHub report or just provide it here?

[15:10] <Kaiepi> make a pullreq

[15:10] <timotimo> i mean, it'd surely be fine to find someone who'd immediately commit it for you if you don't want to go through the song and dance

[15:11] <pmurias> Kaiepi: why are use using this.attribute instead of attribute

[15:11] <pmurias> ?

[15:11] <SyrupThinker> That was more my reasoning, because it really is one char

[15:11] <Kaiepi> i don't need to?

[15:11] <Kaiepi> i thought i did since i'm used to javascript

[15:13] <timotimo> you can turn it into a shell one-liner that edits the file with sed or ed, "git add"s it, git commit -m's it with a nice message and GIT_AUTHOR set ... :)

[15:13] <SyrupThinker> Alright :)

[15:13] <diakopter> just say the diff :)

[15:14] <diakopter> what's the character

[15:14] <SyrupThinker> Nah, that was so nice I'll do the PR. Its 2 -> 3

[15:14] <diakopter> oooooo off by 1ish

[15:16] *** pmurias left
[15:17] *** pmurias joined
[15:17] *** p6bannerbot sets mode: +v pmurias

[15:22] *** Ven` joined
[15:22] *** pmurias_ joined
[15:22] *** p6bannerbot sets mode: +v pmurias_

[15:23] *** p6bannerbot sets mode: +v Ven`

[15:23] *** pmurias left
[15:24] *** epony left
[15:29] *** MasterDuke joined
[15:29] *** p6bannerbot sets mode: +v MasterDuke

[15:30] *** MasterDuke left
[15:30] *** MasterDuke joined
[15:30] *** herbert.freenode.net sets mode: +v MasterDuke

[15:30] *** p6bannerbot sets mode: +v MasterDuke

[15:32] *** ExtraCrispy joined
[15:32] *** p6bannerbot sets mode: +v ExtraCrispy

[15:41] *** ExtraCrispy left
[15:43] *** ExtraCrispy joined
[15:43] *** p6bannerbot sets mode: +v ExtraCrispy

[15:45] *** patrickb left
[15:49] <pmurias_> Kaiepi: Foo(Bar attribute) {this.attribute = attribute;} is commonly used in constructors but when you don't need this. usually

[15:50] <Kaiepi> oh

[16:02] *** pmurias_ is now known as pmurias

[16:03] <pmurias> jnthn: do you think adding nqp::add_i64, etc. and a new value for nqp::objprimspec for int64 a sane plan to emulate 64bit ints on 32bit backends?

[16:03] <pmurias> s/a/is a/

[16:03] *** robertle left
[16:04] <jnthn> Hmm...not especially, the assumption had been that calculations would be done at full width

[16:04] <jnthn> Though if native full width is 32-bit I guess that's trickier...

[16:05] <jnthn> Wonder if add_i on such platforms can infer it from considering the argument types

[16:05] <Geth> ¬¶ rakudo: SyrupThinker++ created pull request #2350: Use the correct ContainerDescriptor for Shaped3Array

[16:05] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/2350

[16:12] <pmurias> jnthn: well if we add two 32bit ints we might want a 64bit result :/

[16:12] <AlexDaniel> SyrupThinker: can you also PR some tests in roast? https://github.com/perl6/roast/

[16:13] <pmurias> my int $x; my int $y; my int64 $a = $x + $y;

[16:13] <pmurias> jnthn: ^^ like this

[16:17] <AlexDaniel> timotimo: I disagree, btw. Going through song and dance is a better idea because it unsures we'll end up with a test in roast

[16:17] <AlexDaniel> creating a ticket first never hurts

[16:18] <AlexDaniel> ensures*

[16:19] <pmurias> jnthn: nqp::objprimspec would stay the same on 64bit backends, the plan is that if I stopped the int multis from getting choosen for int64 on the js backend I could add my own js specific int64 multis

[16:19] <jnthn> pmurias: We don't actually dispatch by native integer size, though :)

[16:19] *** brrt joined
[16:20] <AlexDaniel> 6c: my @a[1;1;1];

[16:20] <pmurias> jnthn: yep, that's why int64s won't be considered native integers on the js backend

[16:20] <committable6> AlexDaniel, ¬¶6c (33 commits): ¬´¬ª

[16:20] *** p6bannerbot sets mode: +v brrt

[16:20] <AlexDaniel> SyrupThinker: ‚Üë by the way, it doesn't fail?

[16:20] <pmurias> jnthn: that would be the change the primspec for them part

[16:23] <pmurias> jnthn: so conceptually the would be considered "unnaturally spacious integer like things"

[16:23] <jnthn> pmurias: I don't quite see how it'd work, but feel free to experiment a bit of course.

[16:23] <jnthn> (It's probably possible.)

[16:23] <pmurias> seems a bit crazy but I don't have anything saner in mind

[16:24] <jnthn> How bad is to treat "don't have int64" as a JS backend limitation?

[16:24] <pmurias> not sure, there are a tons of other much more important things in terms of stuff that users will want

[16:25] <jnthn> (I agree making int 32-bit on JS is the sensible thing)

[16:25] <jnthn> Yeah, given we have bigint support, it doesn't feel like the most pressing thing

[16:25] <jnthn> Though -Ofun of course :)

[16:26] <jnthn> Well, except to me it doesn't sound like a fun problem at all :D

[16:26] <pmurias> I'm mostly tackling that right now because that's one of the few remaining things that I had in my list of things that need to pass in the grant proposal :/

[16:26] <jnthn> Ah

[16:28] <pmurias> (it wasn't explicitly written in but one of the tests in that category tests postfix:<++> on int64)

[16:29] <pmurias> bbl&

[16:33] <SyrupThinker> AlexDaniel: I have run the tests and it passed

[16:34] <AlexDaniel> SyrupThinker: yes, but I'm talking about *new* tests for that issue

[16:40] <SyrupThinker> Oh, I misunderstood the question. I didn't have a font for the arrow.

[16:44] <SyrupThinker> 6c: my @a[1;1;1]; say @a;

[16:45] <committable6> SyrupThinker, https://gist.github.com/c8622301f6c06806dff5ee2b85c4d846

[16:46] <SyrupThinker> AlexDaniel: ^

[16:47] <AlexDaniel> I see

[16:48] <AlexDaniel> I think this would be the right file for the test: https://github.com/perl6/roast/blob/master/S02-types/multi_dimensional_array.t

[16:49] <AlexDaniel> by the way

[16:49] <AlexDaniel> bisect: my @a[1;1;1]; say @a;

[16:49] <bisectable6> AlexDaniel, Bisecting by exit code (old=2015.12 new=9273577). Old exit code: 0

[16:49] <AlexDaniel> just out of curiosity

[16:49] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/5a58bf44515d3457e6d6b2408cbccd21

[16:49] <bisectable6> AlexDaniel, (2018-07-09) https://github.com/rakudo/rakudo/commit/52f1b89df74d29e755b0624ca462b9108c3fa57d

[16:50] <AlexDaniel> c: 52f1b89df7^,52f1b89df7 my @a[1;1;1]; say @a;

[16:50] <committable6> AlexDaniel, ¬¶52f1b89df7^: ¬´[[[(Any)]]]‚ê§¬ª ¬¶52f1b89: ¬´Too many positionals passed; expected 5 arguments but got 6‚ê§  in block <unit> at /tmp/sIrM7zr8qv line 1‚ê§‚ê§ ¬´exit code = 1¬ª¬ª

[16:53] <AlexDaniel> not exactly the one, but doesn't matter

[17:10] <Geth> ¬¶ rakudo: 9acbf00041 | (Elizabeth Mattijsen)++ | 2 files

[17:10] <Geth> ¬¶ rakudo: Make sure that Hash[Int].new gets the correct descriptor

[17:10] <Geth> ¬¶ rakudo: 

[17:10] <Geth> ¬¶ rakudo: According to a bisect, this issue has existed since at least Christmas.

[17:10] <Geth> ¬¶ rakudo: The problem was that Hash.new would do nothing about a descriptor.  Before

[17:10] <Geth> ¬¶ rakudo: the scalar refactor, that meant that the descriptor was nqp::null.  After

[17:10] <Geth> ¬¶ rakudo: that refactor, it has a default descriptor, but still not the right thing.

[17:10] <Geth> ¬¶ rakudo: Apparently, when you say "my Int %h", the correct descriptor is codegenned

[17:10] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 6 more lines‚Ä¶>

[17:10] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/9acbf00041

[17:10] <lizmat> will add tests after dinner&

[17:11] *** Ven` left
[17:12] <SyrupThinker> AlexDaniel: There is a block that is currently skipped.

[17:12] <SyrupThinker> One of the tests still fails.

[17:12] <SyrupThinker> Should I just unskip it?

[17:12] *** patrickb joined
[17:13] *** p6bannerbot sets mode: +v patrickb

[17:15] <AlexDaniel> SyrupThinker: oh! Nice find. So the first block seems to be working now. `is(@md.elems, 4, ‚Ä¶` test indeed fails, but I think it's wrong

[17:15] <AlexDaniel> SyrupThinker: so yes, you can unskip the first skip and fix that last test

[17:16] <AlexDaniel> SyrupThinker: also I've sent you an invite to perl6 org on github, you can accept it here: https://github.com/orgs/perl6

[17:16] <AlexDaniel> SyrupThinker: so that you have more access to do things :)

[17:18] <AlexDaniel> if you wish, of course. PRs are fine too

[17:18] <SyrupThinker> Cool thanks. You thinks its wrong, would I check the apocalypses or something to figure that one out?

[17:19] <AlexDaniel> we can cheat

[17:19] <AlexDaniel> m: my @md[2;2]; say @md.elems

[17:19] <camelia> rakudo-moar 92735770f: OUTPUT: ¬´2‚ê§¬ª

[17:19] <AlexDaniel> jnthn: ^ is it right?

[17:33] <AlexDaniel> SyrupThinker: anyway, change it to 2 for now. We had this behavior since 2015.11, may as well test it

[17:33] <SyrupThinker> https://github.com/perl6/roast/blob/f11042b93790302a3c1d792168546bd66b0204bb/S02-types/array.t#L149-L159

[17:34] <SyrupThinker> Should I throw this one out on the way is that as a trait still planned?

[17:34] <SyrupThinker> *or*

[17:35] <AlexDaniel> SyrupThinker: I'd leave it, you can also file some tickets (e.g. on https://github.com/rakudo/rakudo/issues ) to clarify the fate of these tests

[17:35] <AlexDaniel> though you can file them in roast too https://github.com/perl6/roast/

[17:43] *** epony joined
[17:43] *** p6bannerbot sets mode: +v epony

[18:02] <patrickb> Hi everyone!

[18:02] <patrickb> Is there a way to retrieve the current file (aka $?FILE) dynamically?

[18:04] <timotimo> patrickb: try callframe(0) or 1 perhaps?

[18:05] <patrickb> I'm especially interested in doing this in ModuleLoader.pm6

[18:05] <patrickb> timotimo: Giving it a try...

[18:07] *** brrt left
[18:10] <patrickb> timotimo: Nope, they are also compile time. :-(

[18:10] <timotimo> i'm not entirely sure what the difference would be

[18:11] <patrickb> when you move the file (including .precomp) it'll still return the old file path

[18:11] <patrickb> it's compiled into the precomp file

[18:11] <patrickb> I'm still looking into the relocatable p6 thing.

[18:12] <patrickb> And I'm in search for a way to determine the installation path at runtime.

[18:12] <timotimo> oh

[18:13] <timotimo> yeah, i'm not sure there's a way to get that unless you're changing ModuleLoader itself to store it away somewhere

[18:14] <patrickb> But storing it away doesn't help. I need the actual path at runtime.

[18:15] <patrickb> My first idea was to add an op to the backends that returns that path (Determined by looking at the executable path). But that requires the backend to know where the frontends are installed relative to itself.

[18:16] <patrickb> So now I think it'll be better to let nqp and rakudo determine their install locations themselves.

[18:17] <patrickb> So I need a reliable way to determine the path of a file in the installation dir.

[18:20] <timotimo> a hairy problem for sure

[18:20] <timotimo> i'll be afk for a bit

[18:20] <patrickb> Is it possible there currently is no reliable way to do that atm?

[18:20] <patrickb> So one would need to implement it first?

[18:21] <patrickb> btw $?FILE and callframe(0).file currently both return the full path.

[18:22] <patrickb> And they seem to be compile time. That makes rakudo builds non reproducible. Is that on purpose?

[18:32] <patrickb> Ugh. loads of roast tests depend on $?FILE being a full path. :-(

[18:38] <patrickb> Am I missing the point here or does $?FILE prevent perl6 to be relocatable? (Since $?FILE is by definition compile time and "use lib $?FILE.IO...." seems to be an often used pattern there is no easy way out.)

[18:39] <lizmat> patrickb: I think it's really hysterical raisins

[18:40] <lizmat> and it *should* be fixed, adaik

[18:40] <lizmat> *afaik

[18:40] <lizmat> m: my Int %h; %h<a> := "b"; dd %h  # should this be allowed or not ?

[18:40] <camelia> rakudo-moar 9acbf0004: OUTPUT: ¬´Hash[Int] %h = (my Int % = :a("b"))‚ê§¬ª

[18:40] <lizmat> jnthn moritz masak ^^

[18:41] <patrickb> lizmat: What do you mean with "hysterical raisins"?

[18:42] <lizmat> historical reasons

[18:42] <patrickb> OK.

[18:42] <lizmat> aka it just went that way because relocatability was not on enough people's radar

[18:42] <patrickb> :-(

[18:42] <lizmat> or simply deemed not important enough (yet)

[18:43] <lizmat> this is also complicated by the fact that Perl 6 doesn't have the concept of a "current working dir" at the OS level

[18:45] <patrickb> lizmat: Might it be possible there actually currently is no way to determine the current files path at runtime?

[18:45] <lizmat> you mean, as a script?

[18:47] <lizmat> m: dd $*EXECUTABLE

[18:47] <camelia> rakudo-moar 9acbf0004: OUTPUT: ¬´IO::Path.new("./rakudo-m-inst/bin/perl6-m", :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))‚ê§¬ª

[18:47] <patrickb> Something that lets me deduce where perl6 is installed at runtime. ;-)

[18:47] <lizmat> m: dd $*PROGRAM

[18:47] <camelia> rakudo-moar 9acbf0004: OUTPUT: ¬´IO::Path.new("<tmp>", :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))‚ê§¬ª

[18:49] <lizmat> patrickb: you probably want $*PROGRAM or $*PROGRAM-NAME

[18:52] <patrickb> lizmat: I'm testing a little

[18:54] <patrickb> $*EXECUTABLE depends on the moar --execname parameter. That could actually work...

[18:55] *** ggoebel left
[19:05] <jnthn> AlexDaniel: Yes, .elems gives you the first dimension

[19:05] <jnthn> (By design)

[19:06] <jnthn> lizmat: We tend to enforce that on binding

[19:06] <jnthn> lizmat: I'd guess there's no BIND-KEY in the TypedHash role

[19:06] <lizmat> yeah, that's what I thought

[19:06] <lizmat> there is

[19:06] <lizmat> it's just not getting called

[19:07] * lizmat investigates further

[19:07] <jnthn> Hm, odd

[19:07] *** ggoebel joined
[19:07] <lizmat> yeah

[19:08] *** p6bannerbot sets mode: +v ggoebel

[19:09] <Geth> ¬¶ rakudo: 39086fedab | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[19:09] <Geth> ¬¶ rakudo: Hash.of/name/default/dynamic can only be called on instances

[19:09] <Geth> ¬¶ rakudo: 

[19:09] <Geth> ¬¶ rakudo: And since a Hash nowadays *always* has a descriptor, we can remove the

[19:09] <Geth> ¬¶ rakudo: check for that.

[19:09] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/39086fedab

[19:10] <lizmat> jnthn: BIND-KEY in Hash is a multi, and the role mixes in an only

[19:10] <lizmat> I guess that's the source of the problem

[19:12] <lizmat> aha,  it *is* missing for the Hash[Int] case

[19:15] *** MasterDuke left
[19:25] <patrickb> lizmat: $*EXECUTABLE is currently populated by $0 in the startup script. That's basically whatever the user called the script with. Symlinks already make it break.

[19:27] <lizmat> :-(

[19:28] * patrickb is looking in roast whether that is specced...

[19:28] *** MasterDuke joined
[19:28] *** p6bannerbot sets mode: +v MasterDuke

[19:29] *** MasterDuke left
[19:29] *** MasterDuke joined
[19:29] *** herbert.freenode.net sets mode: +v MasterDuke

[19:29] *** p6bannerbot sets mode: +v MasterDuke

[19:31] <patrickb> I guess $*EXECUTABLE should stay the way it is. I see its usefulness.

[19:31] <patrickb> Which means $*EXECUTABLE is also off my list.

[19:32] <MasterDuke> patrickb: would it make sense to create a new variable?

[19:32] <patrickb> I dunno. Maybe.

[19:34] <MasterDuke> pmurias: i saw you did a bunch of truffle work a little while ago, what's the next thing that needs working on?

[19:34] <patrickb> As far as I can see the frontend currently has no way to retrieve a files location reliably. $*EXECUTABLE also fails. Any more ideas?

[19:34] * patrickb suspects there won't be any

[19:35] *** AlexDaniel left
[19:35] <patrickb> So I'd need to create some mechanism to help with this.

[19:35] *** AlexDaniel joined
[19:36] *** p6bannerbot sets mode: +v AlexDaniel

[19:36] <patrickb> A $*FILE as the runtime sibling to $?FILE should work.

[19:37] <patrickb> Next question: What should that return in a lib that has been precompiled? And what should it return in a whatever.moarvm file that was called directly?

[19:38] <patrickb> My intuition is: precomp should be completely transparent, thus in the first case it should return the libs source file. The second case should return the path of the whatever.moarvm file.

[19:39] <patrickb> nine: I think you might have an opinion on the above. I'd like to hear it.

[19:41] <patrickb> (If $*FILE actually happens, one could think about getting rid of $?FILE, but that's a different story)

[19:41] <MasterDuke> patrickb: i'd recommend asking ugexe also, seems like something he might also have an opinion on

[19:42] <patrickb> ugexe: I think you might have an opinion on the above. I'd like to hear it.

[19:50] <nine> patrickb: precomp files are sort of relocatable. At least when they are stored in one of the named repositories (perl, vendor, site, home). Then paths should be stored relative to that repo.

[19:51] <patrickb> nine: What do you think about a $*FILE variable that returns the current files path?

[19:52] *** pmurias left
[19:52] <patrickb> I'm not sure this idea is in general compatible with the way modules are handled in p6.

[19:53] <nine> FWIW I use "use lib $*PROGRAM.parent.child('lib')" and the like in my scripts

[19:53] <patrickb> I think to remember the module loading system is designed to allow modules to come from all sorts of sources (zip file, stream, whatever). What should $*FILE return in such a case?

[19:54] <nine> So what's the use case you're aiming at?

[19:54] <patrickb> I'm in search of a way to make perl6 itself relocatable.

[19:54] <patrickb> So I need a way for rakudo (and nqp) to determine their install locations at runtime.

[19:55] <lizmat> m: my Int %h{Any} = a => Nil;   # jnthn, we agree that this *should* work, right ?

[19:55] <camelia> rakudo-moar 39086feda: OUTPUT: ¬´Type check failed in binding to parameter 'x'; expected Int but got Nil (Nil)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:57] <nine> How do other scripting languages solve this?

[19:58] <patrickb> Good question.

[19:58] *** pmurias joined
[19:58] *** p6bannerbot sets mode: +v pmurias

[19:59] * patrickb has a look at python

[20:00] <patrickb> nine: FWIW my first idea was to add an op to moar that returns the install path and determine that based on the moar executable location. But that's assuming that moar knows where the frontends are installed. Thus I started looking into how the frontends could determine their install location themself.

[20:01] <MasterDuke> lizmat: isn't that error kind of LTA either way? why does it mention some random parameter?

[20:01] <Geth> ¬¶ roast: SyrupThinker++ created pull request #483: Shaped array test improvements

[20:01] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/pull/483

[20:01] <pmurias> MasterDuke: the bit more complex thing that comes to my mind (but more interesting) is to deserialize the P6opaque repr data

[20:01] <lizmat> MasterDuke: indeed, that's what I'm trying to MMA  (make more awesome)

[20:02] <pmurias> MasterDuke: also the composing thing that would create the object shape

[20:02] <MasterDuke> lizmat++

[20:03] <pmurias> MasterDuke: https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/object/dsl/Layout.html and https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/object/DynamicObject.html contain most of the info for the support truffle provides for objects

[20:04] <Geth> ¬¶ rakudo: ea71041424 | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[20:04] <Geth> ¬¶ rakudo: Make sure we also typecheck on Hash[Int].new<a> := "b"

[20:04] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/ea71041424

[20:04] <Geth> ¬¶ rakudo: 560e94ef25 | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[20:04] <Geth> ¬¶ rakudo: Make binding on a typed Hash a bit more awesome

[20:04] <Geth> ¬¶ rakudo: 

[20:04] <Geth> ¬¶ rakudo: Since we are typechecking on the 2nd parameter of BIND-KEY, the name

[20:04] <nine> Does NQP support class stubs?

[20:04] <Geth> ¬¶ rakudo: of the parameter leaks out.  Change the name to make it less obvious

[20:04] <Geth> ¬¶ rakudo: that it is actually the name of a parameter

[20:04] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/560e94ef25

[20:04] <MasterDuke> pmurias: hm, sounds not blindingly simple

[20:04] <lizmat> nqp: class Foo { }

[20:04] <camelia> nqp-moarvm: ( no output )

[20:05] <lizmat> nine ^^^

[20:05] <pmurias> MasterDuke: something simpler would be nqp::for

[20:05] <pmurias> MasterDuke: something still simpler would be nqp::isstr ;)

[20:06] <pmurias> MasterDuke: that would be the hard/medium/easy tasks :)

[20:06] <MasterDuke> pmurias++

[20:06] <nine> nqp: class Foo { }; sub foo(Foo $f) { }; class Foo { has $!foo; }; foo(Foo.new)

[20:06] <camelia> nqp-moarvm: OUTPUT: ¬´Lexical 'Foo' already declared‚ê§   at gen/moar/stage2/QAST.nqp:4842  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/QAST.moarvm:register_lexical)‚ê§ from gen/moar/stage2/QAST.nqp:4823  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/QAST.moarvm:add_lexical)‚ê§ from ‚Ä¶¬ª

[20:07] <Geth> ¬¶ roast: 28301d7c5d | (Elizabeth Mattijsen)++ | 2 files

[20:07] <Geth> ¬¶ roast: Add tests for R#2348

[20:07] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/28301d7c5d

[20:07] <synopsebot> R#2348 [open]: https://github.com/rakudo/rakudo/issues/2348 The type constraint on Hash[Type] doesn't work

[20:08] <pmurias> MasterDuke: I plan to return to the truffle backends but I want to still finish up some things on the js backend

[20:08] <MasterDuke> pmurias: btw, i noticed that add_simple_op (or one of the similar functions) takes its arguments in different orders across the different backends

[20:08] <MasterDuke> i may try to make them consistent

[20:09] <MasterDuke> pmurias: no worries, i also have several irons all in the fire and just work on whatever one strikes my fancy at the moment

[20:10] <pmurias> MasterDuke: truffle and js have the same order

[20:11] <pmurias> longer term the js backend needs some drastic performance improvements but I need to think over how they will look and hype myself up

[20:12] <timotimo> nine: i think we have .sibling(a) instead of .parent.child(a)

[20:18] <MasterDuke> pmurias: i might also be thinking of map_classlib_core_op for the JVM backend

[20:18] *** pmurias left
[20:24] *** pmurias joined
[20:24] *** p6bannerbot sets mode: +v pmurias

[20:32] <CIAvash> lizmat: thanks for the quick fix

[20:32] <lizmat> CIAvash: took a little figuring out what the problem was and how to best fix it :-)

[20:42] <Geth> ¬¶ roast: d395f0dc63 | (Valentin Anger)++ | S02-types/multi_dimensional_array.t

[20:42] <Geth> ¬¶ roast: Enable the 'real multi-dimensional arrays' tests

[20:42] <Geth> ¬¶ roast: 

[20:42] <Geth> ¬¶ roast: The .elems test has been updated in accordance to the discussion in

[20:42] <Geth> ¬¶ roast: https://github.com/rakudo/rakudo/issues/2351

[20:42] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/d395f0dc63

[20:42] <Geth> ¬¶ roast: 95f608298b | (Valentin Anger)++ | S02-types/multi_dimensional_array.t

[20:42] <Geth> ¬¶ roast: Add a test for 1 to n dimensional shaped arrays

[20:42] <Geth> ¬¶ roast: 

[20:42] <Geth> ¬¶ roast: Considering the bugs:

[20:42] <Geth> ¬¶ roast: https://github.com/rakudo/rakudo/pull/2350

[20:42] <Geth> ¬¶ roast: https://github.com/rakudo/rakudo/issues/2352

[20:42] <Geth> ¬¶ roast: 

[20:42] <Geth> ¬¶ roast: there need to be tests that are done for higher

[20:42] <Geth> ¬¶ roast: dimensions than what is usually used to make sure that

[20:42] <Geth> ¬¶ roast: these cases are also supported.

[20:42] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/95f608298b

[20:42] <Geth> ¬¶ roast: df1cabbc8a | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S02-types/multi_dimensional_array.t

[20:43] <Geth> ¬¶ roast: Merge pull request #483 from SyrupThinker/shaped_array_test_improvements

[20:43] <Geth> ¬¶ roast: 

[20:43] <Geth> ¬¶ roast: Shaped array test improvements

[20:43] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/df1cabbc8a

[20:49] <Geth> ¬¶ rakudo: f61ba41a28 | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[20:49] <Geth> ¬¶ rakudo: Allow Nil to be assigned to object Hashes

[20:49] <Geth> ¬¶ rakudo: 

[20:49] <Geth> ¬¶ rakudo: - don't let the typecheck on ASSIGN-KEY do the work

[20:49] <Geth> ¬¶ rakudo: - let the actual assignment do the type check for better diagnostics

[20:49] <Geth> ¬¶ rakudo: - also allows Nil to be assigned

[20:49] <Geth> ¬¶ rakudo: - also assignment of existing key 20% faster

[20:49] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/f61ba41a28

[21:08] <Geth> ¬¶ rakudo: a2e78ec8eb | (Valentin Anger)++ | src/core/Shaped3Array.pm6

[21:08] <Geth> ¬¶ rakudo: Use the correct ContainerDescriptor for Shaped3Array

[21:08] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/a2e78ec8eb

[21:08] <Geth> ¬¶ rakudo: a6b43a5ea2 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | src/core/Shaped3Array.pm6

[21:08] <Geth> ¬¶ rakudo: Merge pull request #2350 from SyrupThinker/master

[21:08] <Geth> ¬¶ rakudo: 

[21:08] <Geth> ¬¶ rakudo: Use the correct ContainerDescriptor for Shaped3Array

[21:08] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/a6b43a5ea2

[21:13] <Geth> ¬¶ rakudo: 605bcb391f | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[21:13] <Geth> ¬¶ rakudo: Allow assignment of Nil to type constrained hashes

[21:13] <Geth> ¬¶ rakudo: 

[21:13] <Geth> ¬¶ rakudo: Also simplify the code, making it a few percent faster as well.

[21:13] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/605bcb391f

[21:13] *** travis-ci joined
[21:13] *** p6bannerbot sets mode: +v travis-ci

[21:13] <travis-ci> Rakudo build canceled. Aleks-Daniel Jakimenko-Aleksejev 'Merge pull request #2350 from SyrupThinker/master

[21:13] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/438841795 https://github.com/rakudo/rakudo/compare/f61ba41a286c...a6b43a5ea25a

[21:13] *** travis-ci left
[21:13] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[21:17] <Geth> ¬¶ roast: e8a337b257 | (Elizabeth Mattijsen)++ | S11-modules/export.t

[21:17] <Geth> ¬¶ roast: Revert "Unfudge now passing tests"

[21:17] <Geth> ¬¶ roast: 

[21:17] <Geth> ¬¶ roast: This reverts commit f11042b93790302a3c1d792168546bd66b0204bb.

[21:17] <Geth> ¬¶ roast: 

[21:17] <Geth> ¬¶ roast: Alas, it is a flapper  :-(

[21:17] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/e8a337b257

[21:17] <Geth> ¬¶ roast: 6742124fbf | (Elizabeth Mattijsen)++ | S12-introspection/WHAT.t

[21:17] <Geth> ¬¶ roast: Unfudge now passing tests

[21:17] <Geth> ¬¶ roast: 

[21:17] <Geth> ¬¶ roast: Apparently R#2348 fixed these

[21:17] <synopsebot> R#2348 [closed]: https://github.com/rakudo/rakudo/issues/2348 The type constraint on Hash[Type] doesn't work

[21:17] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/6742124fbf

[21:23] *** patrickb left
[21:45] *** pmurias left
[21:47] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/10/08/2018-41-merged-the-js/

[21:47] *** pmurias joined
[21:47] *** p6bannerbot sets mode: +v pmurias

[21:59] <Geth> ¬¶ rakudo: 7e86d4e30b | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[21:59] <Geth> ¬¶ rakudo: Allow Nil as value in initialization of object hash

[21:59] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/7e86d4e30b

[22:01] *** Ven` joined
[22:02] *** p6bannerbot sets mode: +v Ven`

[22:06] * [Coke] has an error building the js backend.

[22:06] *** Ven` left
[22:08] <[Coke]> https://gist.github.com/coke/5aed40ab099575c940820791103b4238

[22:08] *** ExtraCrispy left
[22:08] *** ExtraCrispy joined
[22:08] *** p6bannerbot sets mode: +v ExtraCrispy

[22:17] * [Coke] opened https://github.com/rakudo/rakudo/issues/2353 to track

[22:20] <jnthn> lizmat: (Nil) yeah, we should, alas :)

[22:35] *** jsimonet left
[22:44] *** jsimonet joined
[22:45] *** p6bannerbot sets mode: +v jsimonet

[22:45] <jnthn> lizmat: "wit regards to" *with

[22:48] *** Ven` joined
[22:49] *** p6bannerbot sets mode: +v Ven`

[22:51] <jnthn> lizmat++ # weekly

[22:53] *** Ven` left
[22:55] <japhb> OK, my ratchet-rakudo loop completed.  Last passing revision was: 75cf8be723b6e48710d24e553fdff48978f49329 pass # 2018.09-24-g75cf8be72

[22:55] <japhb> Every revision it tested after that one FAILed.

[22:58] <AlexDaniel> japhb: ok, now, what's the failing module on that revision?

[22:58] <japhb> AlexDaniel: Thankfully I saved all the build logs, lemme check.  :-)

[22:59] *** jsimonet left
[22:59] <japhb> (I assume you mean the first one that FAILed)

[22:59] <japhb> 43919c6b84e91e7b7da4444167bb5f72d6bc2e5f FAIL # 2018.09-25-g43919c6b8

[23:00] <japhb> ===> Testing: Cro::HTTP:ver<0.7.6.1>

[23:00] <japhb> # Failed test 'Concurrent client works'

[23:00] <japhb> # at t/http-client.t line 462

[23:00] <japhb> # expected: '5'

[23:00] <japhb> #      got: '0'

[23:00] <japhb> # Looks like you failed 1 test of 76

[23:01] <AlexDaniel> japhb: I mean modules that are failing on that rakudo revision

[23:01] <AlexDaniel> so that Cro thing, is it flapping or not?

[23:01] <japhb> No modules fail on 2018.09-24-g75cf8be72, that's the last one that succeeded all the way through.

[23:02] <japhb> Checking flapping

[23:06] *** jsimonet joined
[23:07] *** p6bannerbot sets mode: +v jsimonet

[23:12] <japhb> That error was consistent from 2018.09-25 to 2018.09-66, with the exception of 2018.09-53 which has a Nativecall failure, then has Unicode errors from 2018.09-67 through 2018.09-72, then there's a big gap for the js merge at -352, which fails to even build moar through -357, then unicode errors again from -358 through -366, then a small gap, then IO::Path::ChildSecure errors from -370 to -373 (the last 

[23:12] <japhb> one built)

[23:36] *** travis-ci joined
[23:36] *** p6bannerbot sets mode: +v travis-ci

[23:36] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Allow Nil as value in initialization of object hash'

[23:36] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/438862850 https://github.com/rakudo/rakudo/compare/605bcb391f75...7e86d4e30bdd

[23:36] *** travis-ci left
