[00:04] *** entonian left
[00:43] <Geth> ¦ rakudo/car-grant-constants: 60447c6267 | (Zoffix Znet)++ | src/core/Map.pm6

[00:43] <Geth> ¦ rakudo/car-grant-constants: [CaR Grant] Make Map.list return a List instead of Seq

[00:43] <Geth> ¦ rakudo/car-grant-constants: 

[00:43] <Geth> ¦ rakudo/car-grant-constants: Partially fixes R#1344 https://github.com/rakudo/rakudo/issues/1344

[00:43] <Geth> ¦ rakudo/car-grant-constants: 

[00:43] <Geth> ¦ rakudo/car-grant-constants: Since (per discussion on the Issue) a Seq is not a "list", the

[00:43] <Geth> ¦ rakudo/car-grant-constants: .list/.cache methods need to return a Positional. This commit is

[00:43] <synopsebot_> R#1344 [open]: https://github.com/rakudo/rakudo/issues/1344 [@LARRY] What is a "list"?

[00:43] <Geth> ¦ rakudo/car-grant-constants: required for the grant to have proper coersion+typecheck

[00:43] <Geth> ¦ rakudo/car-grant-constants: on `@`-sigilled constants. The rest of the Issue still requires

[00:43] <Geth> ¦ rakudo/car-grant-constants: filling in the gaps in positional slurpy semantics

[00:43] <Geth> ¦ rakudo/car-grant-constants: ( R#1355 https://github.com/rakudo/rakudo/issues/1355 )

[00:43] <synopsebot_> R#1355 [open]: https://github.com/rakudo/rakudo/issues/1355 +@a/+a slurpies produce inconsistent results

[00:43] <Geth> ¦ rakudo/car-grant-constants: review: https://github.com/rakudo/rakudo/commit/60447c6267

[00:44] <Geth> ¦ roast/car-grant-constants: 1ccc16134e | (Zoffix Znet)++ | S02-types/hash.t

[00:44] <Geth> ¦ roast/car-grant-constants: [CaR Grant] Spec Map/Hash.list/.cache return a List

[00:44] <Geth> ¦ roast/car-grant-constants: 

[00:44] <Geth> ¦ roast/car-grant-constants: R#1344 https://github.com/rakudo/rakudo/issues/1344

[00:44] <Geth> ¦ roast/car-grant-constants: Rakudo fix: https://github.com/rakudo/rakudo/commit/60447c6267

[00:44] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/1ccc16134e

[00:51] <lizmat> dinner&

[01:02] <Geth> ¦ roast/car-grant-constants: 30ce60e070 | (Zoffix Znet)++ | S04-declarations/constant-6.d.t

[01:02] <Geth> ¦ roast/car-grant-constants: [CaR Grant] Expand spec of @-sigilled constants

[01:02] <Geth> ¦ roast/car-grant-constants: 

[01:02] <Geth> ¦ roast/car-grant-constants: - Spec throwage on attempts to parametarize

[01:02] <Geth> ¦ roast/car-grant-constants: - Spec coercion

[01:02] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/30ce60e070

[01:08] *** Kaiepi left
[01:09] *** ufobat_ left
[01:25] *** llfourn joined
[01:25] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1928: Issue 1891: Add role to Signal for custom zero logic

[01:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1928

[01:45] *** Kaiepi joined
[02:23] <hoelzro> bisectable6: old=2014.09 my $foobar; say "$foobar"; CONTROL { exit 0 if $_ ~~ /foobar/; exit 1}

[02:23] <bisectable6> hoelzro, Bisecting by output (old=2014.09 new=b34d523) because on both starting points the exit code is 0

[02:23] <bisectable6> hoelzro, bisect log: https://gist.github.com/56395b053810b96629274bf08692c47c

[02:23] <bisectable6> hoelzro, (2015-01-12) https://github.com/rakudo/rakudo/commit/0a99f9f6f0b7b8d6877968f15d5d89b59e4e1e8d

[02:23] <hoelzro> bisectable6: old=2014.09 my $foobar; say "$foobar";

[02:23] <bisectable6> hoelzro, Bisecting by output (old=2014.09 new=b34d523) because on both starting points the exit code is 0

[02:24] <bisectable6> hoelzro, bisect log: https://gist.github.com/7f7ac288f3f6c2dc044066ad9c6c6b39

[02:24] <bisectable6> hoelzro, (2015-04-30) https://github.com/rakudo/rakudo/commit/64b0d48a75f4817590c651626b14ec241a0472bb

[02:29] <Zoffix> /o\

[02:29] <Zoffix> Any:U.hash returns an empty list

[02:30] <Zoffix> which means `constant %foo = class {}` would silently create `%foo` which is an empty `Map`

[02:30] <Zoffix> s/list/hash/;

[02:31] <Zoffix> Also, inconsistency: .list returns a List, while .hash returns a Hash. 

[02:32] <Zoffix> (inconsistency being: when we have a choice to return whatever, we're returning an immutable ancestor in one case and mutable subclass in the other)

[02:42] *** Kaiepi left
[02:46] *** perlpilot left
[02:52] <Zoffix> "@rustlang doc comment system is the best I have seen. Makes you look like you a professional or something."  https://twitter.com/jackmott42/status/1008138655037304832

[02:53] <Zoffix> And looks like it's just a simple special comment where you type markdown. The real awesomeness lies in the HTML generator

[02:53] <Zoffix> I bet we could do a better thing. We already have supperiour markup, just need to make a better HTML generator for it :)

[02:54] <Zoffix> (and yeah, I said Markdown > Pod6 in the past, but in this case linkage the L<> can do is more valuable, giving Pod6 an edge)

[02:55] <Zoffix> crap meant to type that in #perl6 to snag a potential volunteer....

[02:55] <Zoffix> Oh well :)

[03:08] *** Zoffix left
[03:12] <Geth> ¦ roast/car-grant-constants: ce969de416 | (Zoffix Znet)++ | S04-declarations/constant-6.d.t

[03:12] <Geth> ¦ roast/car-grant-constants: [CaR Grant] Expand spec %-sigiled constants

[03:12] <Geth> ¦ roast/car-grant-constants: 

[03:12] <Geth> ¦ roast/car-grant-constants: - Spec coersion

[03:12] <Geth> ¦ roast/car-grant-constants: - Spec throwage on parametarization

[03:12] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/ce969de416

[03:17] *** Kaiepi joined
[03:35] *** Kaiepi left
[03:36] *** Kaiepi joined
[04:32] *** ZofBot joined
[04:32] *** ChanServ sets mode: +v ZofBot

[04:39] *** ZofBot left
[04:39] *** ZofBot joined
[04:39] *** ChanServ sets mode: +v ZofBot

[04:54] <Geth> ¦ roast/car-grant-constants: 49a6c5ebbe | (Zoffix Znet)++ | S04-declarations/constant-6.d.t

[04:54] <Geth> ¦ roast/car-grant-constants: [CaR Grant] Fix ups for new constant tests

[04:54] <Geth> ¦ roast/car-grant-constants: 

[04:54] <Geth> ¦ roast/car-grant-constants: Formatting/missing `constant` declarators

[04:54] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/49a6c5ebbe

[04:54] *** Zoffix joined
[04:55] <Zoffix> Yeah it was on mine. I remember you saying it

[04:55] <Zoffix> nm

[05:45] *** Kaiepi left
[05:49] *** PufferBot joined
[06:36] <Zoffix> What was the nqp op to see if a thing is a native type?

[06:37] <Zoffix> nqp::objprimspec

[07:23] *** [TuxCM] joined
[07:40] <[TuxCM]> Rakudo version 2018.05-91-gb34d5231e - MoarVM version 2018.05-125-gbbf38a97b

[07:40] <yoleaux> 16 Jun 2018 21:08Z <nine> [TuxCM]: Even with Inline::Perl5 0.35?

[07:40] <[TuxCM]> csv-test-xs-20      0.442 -  0.460

[07:40] <[TuxCM]> csv-ip5xs           0.881 -  0.893

[07:40] <[TuxCM]> test-t --race       0.972 -  1.026

[07:40] <[TuxCM]> test-t              2.302 -  2.388

[07:40] <[TuxCM]> csv-ip5xs-20        7.150 -  7.214

[07:40] <[TuxCM]> test                8.547 -  8.607

[07:40] <[TuxCM]> test-t-20 --race   13.699 - 13.890

[07:40] <[TuxCM]> csv-parser         23.596 - 23.726

[07:40] <[TuxCM]> test-t-20          40.094 - 40.642

[07:41] <[TuxCM]> zef update, so probably, yes

[08:02] *** [TuxCM] left
[08:37] *** [TuxCM] joined
[08:48] *** [TuxCM] left
[08:50] *** dct joined
[09:24] *** ufobat_ joined
[09:40] *** dct left
[09:46] *** pmurias joined
[09:47] <pmurias> jnthn: do you import nqp-j into IntelliJ when working on it? (I'm giving IntelliJ a try)

[12:28] *** AlexDaniel left
[12:31] <tbrowder_> m: say “\x[a2]”

[12:31] <camelia> rakudo-moar b34d5231e: OUTPUT: «¢␤»

[12:33] <tbrowder_> can anyone please explain what that character is being used as a variable (with a $ sigil) for in src/Perl6/*.nqp? also,

[12:34] <tbrowder_> “that character” is the CENT SIGN

[12:35] <tbrowder_> also, where is it defined?

[12:35] <tbrowder_> thanks

[12:48] *** [TuxCM] joined
[13:02] <timotimo> it's short for $/.CURSOR

[13:02] <timotimo> but since match and cursor have been merged, i think it's not necessary any more?

[13:09] <jnthn> pmurias: No; the tweaks I've been doing of late are pretty tiny, thugh I probably would if I had to write any real amount of code. :)

[13:38] *** dct joined
[13:54] *** dct left
[13:56] *** AlexDaniel joined
[14:10] *** AlexDaniel left
[14:39] *** lizmat left
[14:48] *** lizmat joined
[14:53] *** lizmat left
[14:53] *** lizmat joined
[15:16] <tbrowder_> timotimo: thanks.

[15:18] *** skids joined
[15:33] *** dct joined
[15:41] *** dct left
[15:54] *** MasterDuke left
[16:02] *** MasterDuke joined
[16:13] *** AlexDaniel joined
[16:22] <AlexDaniel> Is there any solution to R#1891 that is better than R#1928 ?

[16:22] <synopsebot_> R#1891 [open]: https://github.com/rakudo/rakudo/issues/1891 [regression][⚠ blocker ⚠] Signal(0) gives FreeBSD signals on Linux

[16:22] <synopsebot_> R#1928 [open]: https://github.com/rakudo/rakudo/pull/1928 Issue 1891: Add role to Signal for custom zero logic

[16:28] <geekosaur> if it works...

[16:29] <geekosaur> I could argue that "foreign" signals should be a different enum, which causes its elements to be (subclasses of?) Failure

[16:37] <Geth> ¦ rakudo: 5603771fda | (Jeremy Studer)++ | 2 files

[16:37] <Geth> ¦ rakudo: Add role to Signal for custom zero logic

[16:37] <Geth> ¦ rakudo: 

[16:37] <Geth> ¦ rakudo: We want to be able to take advantage of the powerful functionality of

[16:37] <Geth> ¦ rakudo: Enumerations, but also implement custom logic in the class. Enter

[16:37] <Geth> ¦ rakudo: roles.

[16:37] <Geth> ¦ rakudo: 

[16:37] <Geth> ¦ rakudo: Add a role to the Signal class (created via enum keyword earlier in the

[16:37] <Geth> ¦ rakudo: unit) to implement custom handling of zero values (to the type object

[16:37] <Geth> ¦ rakudo: acting as a sub). jnthn++ for role suggestion.

[16:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5603771fda

[16:37] <Geth> ¦ rakudo: bfcfa5da2a | (Jeremy Studer)++ | src/core/signals.pm6

[16:37] <Geth> ¦ rakudo: Allow types coercable to Int in Signally role

[16:37] <Geth> ¦ rakudo: 

[16:37] <Geth> ¦ rakudo: AlexDaniel++ for pointing this out

[16:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bfcfa5da2a

[16:37] <Geth> ¦ rakudo: 5a6ff4073d | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | 2 files

[16:37] <Geth> ¦ rakudo: Merge pull request #1928 from jstuder-gh/signally_role_zero_logic

[16:37] <Geth> ¦ rakudo: 

[16:37] <Geth> ¦ rakudo: Issue 1891: Add role to Signal for custom zero logic

[16:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5a6ff4073d

[16:48] *** AlexDaniel left
[16:48] *** AlexDaniel joined
[17:02] *** MasterDuke left
[17:11] *** MasterDuke joined
[17:39] *** dct joined
[18:06] <Zoffix> m: my int constant PICK_CHAIN_BY_NAME = 0; multi foo (int) { say "in" }; foo PICK_CHAIN_BY_NAME

[18:06] <camelia> rakudo-moar 5a6ff4073: OUTPUT: «Cannot resolve caller foo(Int); none of these signatures match:␤    (int)␤  in block <unit> at <tmp> line 1␤␤»

[18:07] <Zoffix> Looks like some perf improvement in PseudoStash will occur soon, 'cause it got a bunch of `my int constant` but we currently ignore the type so those ain't native ATM

[18:08] <Zoffix> m: my $a := 4; my $b := 8; { for ^10000_000 { my $ = $a +| $b; Nil; }; say now - ENTER now }

[18:08] <camelia> rakudo-moar 5a6ff4073: OUTPUT: «1.2266776␤»

[18:08] <Zoffix> m: my int $a = 4; my int $b = 8; { for ^10000_000 { my $ = $a +| $b; Nil; }; say now - ENTER now }

[18:08] <camelia> rakudo-moar 5a6ff4073: OUTPUT: «0.69476671␤»

[18:09] <Zoffix> 10M... guess no observable improvement will be seen :)

[18:11] <Geth> ¦ rakudo: zoffixznet self-assigned Native-typed constants NYI https://github.com/rakudo/rakudo/issues/1932

[18:18] *** dct left
[18:20] <timotimo> just made a random SDL2_raw example 2.5x faster by replacing a "state $counter" inside a routine with a "my int $counter" outside of it

[18:22] <Zoffix> cool... but that's no longer `state`?

[18:23] <timotimo> it's equivalent in this case

[18:23] <timotimo> because the outside is actually the program's mainline

[18:27] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1933: Issue 1891 Continued: Add special case for Inf in Signally CALL-ME

[18:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1933

[18:32] <timotimo> another 2x improvement in another script

[18:33] * Zoffix stares at https://github.com/perl6/roast/blob/6.c-errata/S04-declarations/constant.t#L149-L150

[18:34] <Zoffix> It clearly *doesn't* work :P

[18:34] <Zoffix> m: my Num constant baz = 42;

[18:34] <camelia> rakudo-moar 5a6ff4073: ( no output )

[18:34] <Zoffix> $ ./perl6 -e 'my Num constant baz = 42;'

[18:34] <Zoffix> ===SORRY!=== Error while compiling -e

[18:34] <Zoffix> Type check failed in constant declaration of baz; expected Num but got Int (Int)

[18:35] <Geth> ¦ roast/car-grant-constants: ae2eb4a16e | (Zoffix Znet)++ | S04-declarations/constant.t

[18:35] <Geth> ¦ roast/car-grant-constants: Remove traling whitespace

[18:35] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/ae2eb4a16e

[18:38] <Geth> ¦ roast/car-grant-constants: df4acccf94 | (Zoffix Znet)++ | S04-declarations/constant.t

[18:38] <Geth> ¦ roast/car-grant-constants: [CaR Grant] Fix incorrect typed constant test

[18:38] <Geth> ¦ roast/car-grant-constants: 

[18:38] <Geth> ¦ roast/car-grant-constants: The test declares a constant of type `Num` but tries to

[18:38] <Geth> ¦ roast/car-grant-constants: assign a value of type `Int` to it. The only reason this test

[18:38] <Geth> ¦ roast/car-grant-constants: didn't explode in the past was because type constraints on

[18:38] <Geth> ¦ roast/car-grant-constants: constants weren't plugged into anything and were entirely ignored.

[18:38] <Geth> ¦ roast/car-grant-constants: 

[18:38] <Geth> ¦ roast/car-grant-constants: Fix test by using correct type of the value. Extra 6.d tests

[18:38] <Geth> ¦ roast/car-grant-constants: in S04-declarations/constant-6.d.t (master branch) also test

[18:38] <Geth> ¦ roast/car-grant-constants: the typecheck failure when types do not match.

[18:38] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/df4acccf94

[18:38] <Zoffix> |7d cherry-pick to 6.c-errata: https://github.com/perl6/roast/commit/df4acccf94

[18:38] <ZofBot> Zoffix, Will remind you on 2018-06-24T14:38:31.544734-04:00 about cherry-pick to 6.c-errata: https://github.com/perl6/roast/commit/df4acccf94

[18:39] <Geth> ¦ rakudo/home-precomp-with-fix: 4e782f6b75 | (Rob Hoelz)++ | src/core/CompUnit/RepositoryRegistry.pm6

[18:39] <Geth> ¦ rakudo/home-precomp-with-fix: Prepend inst# to home when setting up repositories

[18:39] <Geth> ¦ rakudo/home-precomp-with-fix: 

[18:39] <Geth> ¦ rakudo/home-precomp-with-fix: The keys to the $repos hash are in the form of inst#/path/to/repo (among

[18:39] <Geth> ¦ rakudo/home-precomp-with-fix: others), but $home was just the path before this change, causing all

[18:39] <Geth> ¦ rakudo/home-precomp-with-fix: nqp::atkey($repos, $home) calls to come back as null

[18:39] <Geth> ¦ rakudo/home-precomp-with-fix: review: https://github.com/rakudo/rakudo/commit/4e782f6b75

[18:39] <Geth> ¦ rakudo: hoelzro++ created pull request #1934: Prepend inst# to home when setting up repositories

[18:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1934

[18:42] <Geth> ¦ rakudo/car-grant-constants: 0e2a7d93cb | (Zoffix Znet)++ | src/Perl6/World.nqp

[18:42] <Geth> ¦ rakudo/car-grant-constants: Make safely_stringify routine safer

[18:42] <Geth> ¦ rakudo/car-grant-constants: 

[18:42] <Geth> ¦ rakudo/car-grant-constants: Right now it doesn't check whether the Int/Str/List objects

[18:42] <Geth> ¦ rakudo/car-grant-constants: are actually instances before trying to unbox them or peek at their

[18:42] <Geth> ¦ rakudo/car-grant-constants: attributes, which causes explosions if the exception being

[18:42] <Geth> ¦ rakudo/car-grant-constants: stringified has one of those types objects as a value.

[18:42] <Geth> ¦ rakudo/car-grant-constants: 

[18:42] <Geth> ¦ rakudo/car-grant-constants: Fix by printing '(Int)'/'(Str)'/'(List)' if the things are

[18:42] <Geth> ¦ rakudo/car-grant-constants: type objects and aren't instances.

[18:42] <Geth> ¦ rakudo/car-grant-constants: review: https://github.com/rakudo/rakudo/commit/0e2a7d93cb

[18:44] <samcv> REPL seems broken on jvm

[18:44] <Zoffix> What's the error?

[18:45] <samcv> unless more recent changes have happened since a few days ago at least

[18:45] <samcv> no error

[18:45] <samcv> i type: "my $foo = 10" press enter and then it does nothing

[18:45] <Zoffix> I think I pushed a change like 1 or 2 days ago

[18:46] <Zoffix> Oh, that went into post-rlease branch tho

[18:48] <AlexDaniel> m: multi sub foo(Int() $x) { say ‘hmmm’ }; say foo Inf

[18:48] <camelia> rakudo-moar 5a6ff4073: OUTPUT: «hmmm␤True␤»

[18:48] <AlexDaniel> m: multi sub foo(Int() $x) { say $x }; say foo Inf

[18:48] <camelia> rakudo-moar 5a6ff4073: OUTPUT: «Cannot convert Inf to Int: ␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:48] <AlexDaniel> is that right?

[18:49] <Zoffix> m: say Inf.Int.^name

[18:49] <camelia> rakudo-moar 5a6ff4073: OUTPUT: «Failure␤»

[18:49] <geekosaur> Inf is a floating point thing, isn't it? out of range for Int

[18:50] <AlexDaniel> yes but it goes into that candidate

[18:50] <Zoffix> AlexDaniel: more or less yeah. It's just we currently don't check the coerced value is of the right type, so it fails to detect that it got a Failure and not an Int

[18:50] <Geth> ¦ nqp: 2ac63b49f2 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[18:50] <Geth> ¦ nqp: Bump MoarVM to get native int lexpad fixes

[18:50] <Geth> ¦ nqp: 

[18:50] <Geth> ¦ nqp: Changes: 2018.05-124-g4eda279b5..2018.05-131-g9fb02c950

[18:50] <Geth> ¦ nqp: 44f17cea3 Fix a comment in MVMContext

[18:50] <Geth> ¦ nqp: 1085a51e0 Allow MVMContext atkey to work on all sizes of native ints

[18:50] <Geth> ¦ nqp: 9c48a675f Add support for all native int types to getlexref_ni

[18:50] <Geth> ¦ nqp: d8b729d8e Add new atkey_u op

[18:50] <Geth> ¦ nqp: ccb84367d Add support for all native int's in lexprimspec

[18:50] <Geth> ¦ nqp: bbf38a97b Flesh out compare-oplist-interp-order.sh a bit more

[18:50] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2ac63b49f2

[18:50] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.05-124-g4eda279b5...2018.05-131-g9fb02c950

[18:51] <Geth> ¦ nqp: 0d7af14e99 | (Samantha McVey)++ | 12 files

[18:51] <Geth> ¦ nqp: Fix Unhandled lexical type error w/ native int's and Rakudo REPL

[18:51] <Geth> ¦ nqp: 

[18:51] <Geth> ¦ nqp: Implement the new atkey_u op so we can properly get these native

[18:51] <Geth> ¦ nqp: types from the lexical pad.

[18:51] <Geth> ¦ nqp: 

[18:51] <Geth> ¦ nqp: Also update stage3 .moarvm files.

[18:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0d7af14e99

[18:53] <Geth> ¦ nqp: ec508f9548 | (Samantha McVey)++ | docs/ops.markdown

[18:53] <Geth> ¦ nqp: Add documentation on atkey_u newly added op

[18:53] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ec508f9548

[18:54] <Geth> ¦ rakudo: 8921cea954 | (Samantha McVey)++ | tools/build/NQP_REVISION

[18:54] <Geth> ¦ rakudo: Bump NQP/Moar to get native int lexpad fixes

[18:54] <Geth> ¦ rakudo: 

[18:54] <Geth> ¦ rakudo: Changes: 2018.05-83-gc8519b79d..2018.05-86-gec508f954

[18:54] <Geth> ¦ rakudo: ec508f954 Add documentation on atkey_u newly added op

[18:54] <Geth> ¦ rakudo: 0d7af14e9 Fix Unhandled lexical type error w/ native int's and Rakudo REPL

[18:54] <Geth> ¦ rakudo: 2ac63b49f Bump MoarVM to get native int lexpad fixes

[18:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8921cea954

[18:54] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.05-83-gc8519b79d...2018.05-86-gec508f954

[18:55] <samcv> so now native int's work properly in repl without giving Unhandled lexical type 'int8' in lexprimspec for '$foo'

[18:55] <Zoffix> samcv++

[18:55] <samcv> though for uint's it now gives a new error

[18:55] <samcv> No such method 'perl' for invocant of type 'Perl6::Compiler'

[18:56] <samcv> doing: `my uint $foo = 10` then after that just typing `$foo` and pressing enter

[18:56] <Zoffix> AlexDaniel: RT#132980

[18:56] <synopsebot_> RT#132980 [open]: https://rt.perl.org/Ticket/Display.html?id=132980 Coercion type apparently does not check the actual type of the coerced value

[18:58] <samcv> not sure where to go about trying to find that issue though

[18:58] <samcv> how can i trace where that exception comes from?

[18:58] <samcv> and i think it must be handled in the repl somewhere i guess?

[19:11] <Geth> ¦ roast/car-grant-constants: 943b0dce43 | (Zoffix Znet)++ | S04-declarations/constant-6.d.t

[19:11] <Geth> ¦ roast/car-grant-constants: [CaR Grant] Remove X::ParametricConstant dummy

[19:11] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/943b0dce43

[19:12] <samcv> ah looks like things are perfectly fixed but they are much better for int's

[19:12] <Geth> ¦ roast/car-grant-constants: 50772172f5 | (Zoffix Znet)++ | S04-declarations/constant-6.d.t

[19:12] <Geth> ¦ roast/car-grant-constants: [CaR Grant] Fudge newly failing new tests

[19:12] <Geth> ¦ roast/car-grant-constants: 

[19:12] <Geth> ¦ roast/car-grant-constants: Typecheck is now implement, but coercion isn't so tests

[19:12] <Geth> ¦ roast/car-grant-constants: fail to compile due to typecheck failure

[19:12] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/50772172f5

[19:12] <samcv> doing 'my int8 $t = -4', '$t', '$t = 4' i get Cannot find method 'qast' on object of type NQPMu

[19:14] *** travis-ci joined
[19:14] <travis-ci> NQP build passed. Samantha McVey 'Add documentation on atkey_u newly added op'

[19:14] <travis-ci> https://travis-ci.org/perl6/nqp/builds/393373899 https://github.com/perl6/nqp/compare/0d7af14e9928...ec508f9548ea

[19:14] *** travis-ci left
[19:23] * [Coke] waves from the lobby of the TPC hotel.

[19:23] <yoleaux> 02:40Z <Zoffix> [Coke]: FYI it appears TPF's grant commenting page is losing some comments and it's been happening for possibly ~3m http://colabti.org/irclogger/irclogger_log/perl6?date=2018-06-17#l54

[19:25] * samcv waves back

[19:35] *** dct joined
[19:43] <samcv> ok the problem now seems to be it loses the value

[19:44] <samcv> `my uint $foo = 10`, `say $foo` => 0

[19:44] <samcv> (on repl)

[19:49] <Geth> ¦ roast/car-grant-constants: fd20de7ae2 | (Zoffix Znet)++ | S04-declarations/constant-6.d.t

[19:49] <Geth> ¦ roast/car-grant-constants: [CaR Grant] Fix up test class name clashes

[19:49] <Geth> ¦ roast/car-grant-constants: 

[19:49] <Geth> ¦ roast/car-grant-constants: http://colabti.org/irclogger/irclogger_log/perl6?date=2018-06-17#l633

[19:49] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/fd20de7ae2

[20:01] *** dct left
[20:18] <Geth> ¦ roast/car-grant-constants: f403cf56ec | (Zoffix Znet)++ | S04-declarations/constant-6.d.t

[20:18] <Geth> ¦ roast/car-grant-constants: [CaR Grant] Remove all fudges / fix plans

[20:18] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/f403cf56ec

[20:22] <Geth> ¦ rakudo/car-grant-constants: b6cd61228b | (Zoffix Znet)++ | src/core/Exception.pm6

[20:22] <Geth> ¦ rakudo/car-grant-constants: [CaR Grant] Implement X::ParametricConstant exception

[20:22] <Geth> ¦ rakudo/car-grant-constants: 

[20:22] <Geth> ¦ rakudo/car-grant-constants: Thrown when user attempts to parametarize %/@/& constants

[20:22] <Geth> ¦ rakudo/car-grant-constants: using `my Bar constant @foo` syntax. As discussed[^1] in the Work

[20:22] <Geth> ¦ rakudo/car-grant-constants: Proposal, allowing this syntax creates a lot of varying

[20:22] <Geth> ¦ rakudo/car-grant-constants: behaviour such as `constant @foo .= new: 1, 2, 3` creating

[20:22] <Geth> ¦ rakudo/car-grant-constants: a `List`, yet `my Int constant @foo .= new: 1,2, 3` would have

[20:22] <Geth> ¦ rakudo/car-grant-constants: <…commit message has 6 more lines…>

[20:22] <Geth> ¦ rakudo/car-grant-constants: review: https://github.com/rakudo/rakudo/commit/b6cd61228b

[20:25] *** ufobat_ left
[20:30] <samcv> maybe jnthn would know more. getting Cannot find method 'qast' on object of type NQPMu too

[20:39] *** pmurias left
[20:44] <Zoffix> mf

[20:44] <Geth> ¦ rakudo: 7e5a862e54 | (Jeremy Studer)++ | src/core/signals.pm6

[20:44] <Geth> ¦ rakudo: Add special case for Inf in Signal CALL-ME

[20:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7e5a862e54

[20:44] <Geth> ¦ rakudo: cd8d0445ef | (Jeremy Studer)++ | src/core/signals.pm6

[20:44] <Geth> ¦ rakudo: Rm Inf candidate and alter Int() candidate logic

[20:44] <Geth> ¦ rakudo: 

[20:44] <Geth> ¦ rakudo: The Inf was blowing up due to returning Failure on attempted coercion

[20:44] <Geth> ¦ rakudo: and then using it in a comparison.

[20:44] <Geth> ¦ rakudo: 

[20:44] <Geth> ¦ rakudo: AlexDaniel++ for the explanation and for suggestion on how to alter the

[20:44] <Geth> ¦ rakudo: method. See comments

[20:44] <Geth> ¦ rakudo: [here](https://github.com/rakudo/rakudo/pull/1933#issuecomment-397898977)

[20:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cd8d0445ef

[20:44] <Geth> ¦ rakudo: 61878c3e07 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | src/core/signals.pm6

[20:44] <Geth> ¦ rakudo: Merge pull request #1933 from jstuder-gh/signally_role_zero_logic

[20:45] <Geth> ¦ rakudo: 

[20:45] <Geth> ¦ rakudo: Issue 1891 Continued: Add special case for Inf in Signally CALL-ME

[20:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/61878c3e07

[20:45] <Zoffix> there's one 6.c-errata test that blocks the coercive behaviour of Associative constants... sorta

[20:45] <Zoffix> m: use Test; throws-like 'constant %hash = "nothash"', X::TypeCheck

[20:45] <camelia> rakudo-moar 8921cea95: OUTPUT: «    1..2␤    ok 1 - 'constant %hash = "nothash"' died␤    ok 2 - right exception type (X::TypeCheck)␤ok 1 - did we throws-like X::TypeCheck?␤»

[20:45] <Zoffix> $ ./perl6 -e 'use Test; throws-like ｢constant %hash = "nothash"｣, X::TypeCheck'

[20:45] <Zoffix> # Got:      X::Hash::Store::OddNumber

[20:46] <Zoffix> m: try EVAL '"notahash".Map'; say $!.^name

[20:46] <camelia> rakudo-moar 8921cea95: OUTPUT: «X::Hash::Store::OddNumber␤»

[20:47] <Zoffix> AlexDaniel: what do you think? Can this be changed? The changed behaviour in that particular test is just the type of the exception, but the larger implication of the behaviour change is that `constant %foo = :42foo, :100bar` used to throw but now it works

[20:48] <Zoffix> And the sucky implication is this:

[20:48] <Zoffix> m: class Foo {}; constant %foo = Foo

[20:48] <camelia> rakudo-moar 8921cea95: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Type check failed in constant declaration of %foo; expected Associative but got Foo (Foo)␤at <tmp>:1␤------> 3class Foo {}; constant %foo = Foo7⏏5<EOL>␤»

[20:49] <Zoffix> Now that silently succeeds and %foo is an empty Map, because Any:U.Map returns that

[20:50] <Zoffix> m: class Foo { method Map { Map.new: (:42foo, :70bar) } }; constant %foo = Foo

[20:50] <camelia> rakudo-moar 8921cea95: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Type check failed in constant declaration of %foo; expected Associative but got Foo (Foo)␤at <tmp>:1␤------> 3:42foo, :70bar) } }; constant %foo = Foo7⏏5<EOL>␤»

[20:50] <Zoffix> This works now tho

[20:51] <Zoffix> And another pro-change argument is that before CaR grant, the @-sigilled constants actually always called .cache, so if we're blocking the change, then we have this inconsistency that @-sigils coerce but %-sigils don't

[20:53] <Zoffix> And another pro-change argument is that Constants Work Proposal and CaR Grant both discussed the coercive behaviour and in ~4 months no one objected.

[20:54] *** robertle left
[20:56] <AlexDaniel> Zoffix: well, with v6.d in mind, is there any possibility to have both behaviors depending on which language version is used?

[20:57] <Zoffix> should be

[21:00] <Zoffix> Obligatory reminder about R#1289

[21:00] <synopsebot_> R#1289 [open]: https://github.com/rakudo/rakudo/issues/1289 [6.d][severe] [6.d BLOCKER] Implement a Way to Know Caller's Language

[21:05] <AlexDaniel> Zoffix: I mean, it makes sense, but we should really try not to make changes like this, I think

[21:06] <AlexDaniel> previous behavior wasn't blatantly wrong, and there's a spectest…

[21:07] <AlexDaniel> so for me it's a bit hard to justify the change

[21:07] <AlexDaniel> withing v6.c I mean, for v6.d go crazy with it :)

[21:07] <AlexDaniel> within*

[21:08] <Zoffix> mhm

[21:10] *** perlpilot joined
[21:53] <Geth> ¦ rakudo/car-grant-constants: 4dcf5929d3 | (Zoffix Znet)++ | 2 files

[21:53] <Geth> ¦ rakudo/car-grant-constants: Implement $*W.lang-ver-before method

[21:53] <Geth> ¦ rakudo/car-grant-constants: 

[21:53] <Geth> ¦ rakudo/car-grant-constants: Tells you whether the current language version is before

[21:53] <Geth> ¦ rakudo/car-grant-constants: the given version letter. For use where language-specific behaviour

[21:53] <Geth> ¦ rakudo/car-grant-constants: needs to be implemented.

[21:53] <Geth> ¦ rakudo/car-grant-constants: 

[21:53] <Geth> ¦ rakudo/car-grant-constants:     $*W.lang-ver-before('d')

[21:53] <Geth> ¦ rakudo/car-grant-constants:         ?? nqp::say('Bruh, your lang is too old')

[21:53] <Geth> ¦ rakudo/car-grant-constants:         !! nqp::say('6.d or above. You get a new feature!')

[21:53] <Geth> ¦ rakudo/car-grant-constants: review: https://github.com/rakudo/rakudo/commit/4dcf5929d3

[21:58] <Zoffix> AlexDaniel: what about generic stuff like this:

[21:58] <Zoffix> m: my Int(Any) constant z = "42"

[21:58] <camelia> rakudo-moar 61878c3e0: ( no output )

[21:59] <Zoffix> There ain't no spectests covering it, but now it'll be fatal

[21:59] <Zoffix> m: my Int(Any) $z = "42"

[21:59] <camelia> rakudo-moar 61878c3e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Coercion Int(Any) is insufficiently type-like to qualify a variable␤at <tmp>:1␤------> 3my Int(Any) $z7⏏5 = "42"␤    expecting any of:␤        constraint␤»

[21:59] <Zoffix> Like that ^

[22:00] <Zoffix> AlexDaniel: well, actually since it's a constant it'll probably be possible to just coerce the stuff, but still, in the past all of this type stuff was entirely ignored

[22:00] <Zoffix> m: my Int(Date) constant z = "42"; dd z

[22:00] <camelia> rakudo-moar 61878c3e0: OUTPUT: «"42"␤»

[22:01] <Geth> ¦ rakudo/car-grant-constants: a1f544ad42 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[22:01] <Geth> ¦ rakudo/car-grant-constants: [CaR Grant] Implement basic typecheck and coercers on constants

[22:01] <Geth> ¦ rakudo/car-grant-constants: 

[22:01] <Geth> ¦ rakudo/car-grant-constants: - Implement typechecking on &- and $- sigilled, sigilles, and

[22:01] <Geth> ¦ rakudo/car-grant-constants:     backslash-sigilles constants

[22:01] <Geth> ¦ rakudo/car-grant-constants: - Throw X::ParametricConstant on attempts to specify parametarized

[22:01] <Geth> ¦ rakudo/car-grant-constants:     @-, %-, and &- constants (using `my Int constant @foo` and

[22:01] <Geth> ¦ rakudo/car-grant-constants:     similar syntax only; `constant @foo = Array[Int].new` is still

[22:01] <Geth> ¦ rakudo/car-grant-constants: <…commit message has 8 more lines…>

[22:01] <Geth> ¦ rakudo/car-grant-constants: review: https://github.com/rakudo/rakudo/commit/a1f544ad42

[22:02] <Geth> ¦ roast/car-grant-constants: 86e2e20e07 | (Zoffix Znet)++ | S04-declarations/constant-6.d.t

[22:02] <Geth> ¦ roast/car-grant-constants: [CaR Grant] 6.d-fy relevant parts

[22:02] <Geth> ¦ roast/car-grant-constants: 

[22:02] <Geth> ¦ roast/car-grant-constants: Coercers on %-sigilled constants are actually blocked by one

[22:02] <Geth> ¦ roast/car-grant-constants: spectest and so need to go into 6.d language.

[22:02] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/86e2e20e07

[22:03] <AlexDaniel> Zoffix: yeah :( not enough spectests

[22:04] <AlexDaniel> it depends

[22:04] <AlexDaniel> I guess we can try changing it, and see what pops out of toaster

[22:04] <Zoffix> ok

[22:05] <Geth> ¦ rakudo/post-release-2018.06: 10 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++, (Jeremy Studer)++, (Samantha McVey)++, (Zoffix Znet)++

[22:05] <Geth> ¦ rakudo/post-release-2018.06: review: https://github.com/rakudo/rakudo/compare/24467ed6c093...2871cd9e1a41

[22:06] <Geth> ¦ rakudo/car-grant-constants: 17 commits pushed by (Jeremy Studer)++, (Zoffix Znet)++, (Aleks-Daniel Jakimenko-Aleksejev)++, (Elizabeth Mattijsen)++, (Samantha McVey)++

[22:06] <Geth> ¦ rakudo/car-grant-constants: review: https://github.com/rakudo/rakudo/compare/a1f544ad42d5...40bf22e9c02e

[22:06] *** Kaiepi joined
[22:06] <Geth> ¦ roast/car-grant-constants: 5 commits pushed by (JJ Merelo)++, (Zoffix Znet)++, (Tom Browder)++, (Jeremy Studer)++

[22:06] <Geth> ¦ roast/car-grant-constants: d018d25d69 | dd → say since dd is rakudo specific

[22:06] <Geth> ¦ roast/car-grant-constants: 9430c1be93 | Merge pull request #434 from JJ/master

[22:06] <Geth> ¦ roast/car-grant-constants: b033033707 | add new and and improve old pod non-breaking space tests (#435)

[22:06] <Geth> ¦ roast/car-grant-constants: 9dc848d559 | Test Slurpy Positional params with .assuming

[22:06] <Geth> ¦ roast/car-grant-constants: 9b49847029 | Merge branch 'post-release-2018.06' into car-grant-constants

[22:06] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/compare/86e2e20e075b...9b4984702943

[22:14] *** Kaiepi left
[22:14] <Zoffix> ZOFVM: Files=1295, Tests=153418, 155 wallclock secs (21.78 usr  3.46 sys + 3285.70 cusr 178.72 csys = 3489.66 CPU)

[22:15] *** Kaiepi joined
[22:15] <Geth> ¦ rakudo: zoffixznet++ created pull request #1935: Implement typecheck and auto-coercers on constants

[22:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1935

[22:15] <Geth> ¦ rakudo/post-release-2018.06: 9 commits pushed by (Zoffix Znet)++

[22:15] <Geth> ¦ rakudo/post-release-2018.06: 4854c05c02 | [CaR Grant] Add S04-declarations/constant-6.d.t to list of tests

[22:15] <Geth> ¦ rakudo/post-release-2018.06: c49a6ed1f5 | Merge branch 'master' into car-grant-constants

[22:15] <Geth> ¦ rakudo/post-release-2018.06: 60447c6267 | [CaR Grant] Make Map.list return a List instead of Seq

[22:15] <Geth> ¦ rakudo/post-release-2018.06: 0e2a7d93cb | Make safely_stringify routine safer

[22:15] <Geth> ¦ rakudo/post-release-2018.06: b6cd61228b | [CaR Grant] Implement X::ParametricConstant exception

[22:15] <Geth> ¦ rakudo/post-release-2018.06: 4dcf5929d3 | Implement $*W.lang-ver-before method

[22:15] <Geth> ¦ rakudo/post-release-2018.06: a1f544ad42 | [CaR Grant] Implement basic typecheck and coercers on constants

[22:15] <Geth> ¦ rakudo/post-release-2018.06: 40bf22e9c0 | Merge branch 'post-release-2018.06' into car-grant-constants

[22:15] <Geth> ¦ rakudo/post-release-2018.06: 1dea303424 | Merge pull request #1935 from rakudo/car-grant-constants

[22:15] <Geth> ¦ rakudo/post-release-2018.06: review: https://github.com/rakudo/rakudo/compare/2871cd9e1a41...1dea303424fa

[22:15] <Geth> ¦ roast: zoffixznet++ created pull request #437: Spec typecheck and auto-coercive behaviour for constants

[22:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/437

[22:15] <Geth> ¦ roast/post-release-2018.06: 20 commits pushed by (Zoffix Znet)++

[22:15] <Geth> ¦ roast/post-release-2018.06: review: https://github.com/perl6/roast/compare/9dc848d559d0...fe12b2b6ecaa

[22:27] *** perlpilot left
[22:49] <[Coke]> Zoffix: are you saying comments are not making it through, or comments are showing up and then disappearing.

[22:50] <Zoffix> [Coke]: not making it through, it seems

[22:50] <[Coke]> I don't see anything in the moderation queue.

[22:51] <[Coke]> Most of the spam-moderated stuff is chinese text selling nikes.

[22:52] <[Coke]> very rarely a human comment will get stuck there.

[22:52] <Zoffix> ¯\_(ツ)_/¯

[22:52] <[Coke]> I don't know if there's a "so spammy it's deleted" variant of moderation; can't imagine that's true if I still hae to blacklist 50 comments a month selling sneakers.

[22:53] <[Coke]> so, I believe you! but I can't see it.

[22:53] <Zoffix> ok :)

[23:00] <Kaiepi> would being able to get the file descriptor for IO::Socket::Async connections be desirable?

[23:02] <Kaiepi> also, trying to get it for IO::Socket::INET connections on my system gives me -1 when it probably shouldn't be

[23:13] <Zoffix> [Coke]: ok, try number 2 :) "Your comment has been received and held for approval by the blog owner."

[23:14] <Zoffix> [Coke]: the page you see after submitting a comment looks messed up BTW: https://i.imgur.com/hnbCMiT.png

[23:14] <[Coke]> Yes. that is a known bug that will eventually be fixed by getting rid of mt

[23:14] <[Coke]> Sorry. :(

[23:15] <[Coke]> ok, checking to see the queue.

[23:15] <Zoffix> k

[23:15] <[Coke]> it was there, should be published. (takes a few minutes to propogate)

[23:15] <Zoffix> cooll

[23:19] <Zoffix>  /j #perl6

[23:29] *** lizmat left
[23:34] <MasterDuke> [Coke]: fyi, i also just submitted a comment

[23:46] *** lizmat joined
