[00:05] <japhb> jnthn: My mind immediately riffed on putting the world back together again, and I had an image of you with a bottle of Gorilla Glue except s/Gorilla/Camelia/

[02:02] *** ufobat___ joined
[02:05] *** ufobat_ left
[02:44] *** MasterDuke_ joined
[02:45] *** MasterDuke left
[02:59] *** ufobat_ joined
[03:02] *** ufobat___ left
[03:10] *** lizmat left
[03:27] *** MasterDuke_ is now known as MasterDuke

[03:52] *** MasterDuke left
[05:56] <Geth> ¬¶ nqp: 339c39d203 | (Samantha McVey)++ | src/vm/moar/QAST/QASTCompilerMAST.nqp

[05:56] <Geth> ¬¶ nqp: Add the coerce_us op to QASTCOMpilerMAST for coercions

[05:56] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/339c39d203

[06:24] *** lizmat joined
[06:28] <samcv> m: my uint $foo = 18446744073709551615; say $foo

[06:28] <camelia> rakudo-moar c441d8d8b: OUTPUT: ¬´-1‚ê§¬ª

[06:31] <samcv> it seems to be treating it as an int

[06:31] <samcv> m: my $var = 18446744073709551610; my uint $foo = $var; say $var

[06:31] <camelia> rakudo-moar c441d8d8b: OUTPUT: ¬´Cannot unbox 64 bit wide bigint into native integer‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:29] *** [Coke] left
[07:29] *** [Coke] joined
[08:01] <Geth> ¬¶ roast: 3e4710b02e | (Samantha McVey)++ | S03-operators/bit.t

[08:01] <Geth> ¬¶ roast: Test that bitwise string ops maintain normalization

[08:01] <Geth> ¬¶ roast: 

[08:01] <Geth> ¬¶ roast: This adds tests for MoarVM/MoarVM#867. I fixed this in MoarVM recently

[08:01] <Geth> ¬¶ roast: and had already added tests to make sure that synthetics were handled

[08:01] <Geth> ¬¶ roast: properly and the bitwise ops operated on a codepoint basis.

[08:01] <Geth> ¬¶ roast: 

[08:01] <Geth> ¬¶ roast: I constructed codepoints which result in a codepoint that is normalized

[08:01] <Geth> ¬¶ roast: to multiple codepoints: for example 2940 +& 2910 = 2908. But

[08:01] <Geth> ¬¶ roast: 2908.chr.ords will give (2849, 2876). Test AND, OR and XOR string ops.

[08:01] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/3e4710b02e

[08:01] <samcv> cool. got that dealt with

[08:08] *** Geth joined
[08:08] *** ChanServ sets mode: +v Geth

[08:08] *** synopsebot joined
[08:08] *** ChanServ sets mode: +v synopsebot

[08:12] *** lizmat left
[09:21] *** pmurias joined
[11:21] <jnthn> samcv++

[11:21] <yoleaux> 10:39Z <atroxaper> jnthn: Hi, I made a feedback about debugger in the commaide https://commaide.com/subscriber/feedback/2. Please take a look. Maybe you know a workaround for now :)

[11:54] <AlexDaniel> samcv: can you update https://stackoverflow.com/a/44104556/2698019 to mention that %() is not an empty hash? :)

[12:02] <samcv> m: say %().WHAT; say %() eqv {}

[12:02] <camelia> rakudo-moar c441d8d8b: OUTPUT: ¬´(Hash)‚ê§True‚ê§¬ª

[12:04] <samcv> m: dd %()

[12:04] <camelia> rakudo-moar c441d8d8b: OUTPUT: ¬´Hash % = {}‚ê§¬ª

[12:04] <samcv> it's not?

[12:04] <samcv> i did see that github conversation but how is it not empty now that i'm testing it

[12:05] <timotimo> m: "foo" ~~ /<ident>/; say %().perl

[12:05] <camelia> rakudo-moar c441d8d8b: OUTPUT: ¬´Map.new((:ident(Match.new(pos => 3, from => 0, list => (), orig => "foo", hash => Map.new(()), made => Any))))‚ê§¬ª

[12:05] <timotimo> samcv: ^

[12:05] <samcv> ah ok that's it

[12:05] <timotimo> it's extra trap-ish because it's eqv to {} if your $/ doesn't have anything

[12:05] <samcv> were we proposing to change it for 6.d or 6.e?

[12:06] <timotimo> i expect deprecate in .d, remove in .e, maybe re-introduce in .f? or maybe switch over in .e already

[12:06] <samcv> also is it specced?

[12:06] <timotimo> it's specced to do that, yes

[12:07] <timotimo> i haven't actually participated in the %() discussion yet, fwiw

[12:07] <timotimo> so my .e/.f thing was more speculation than knowledg

[12:34] <AlexDaniel> samcv: yeah, deprecation in v6.d is a safe bet

[12:34] <AlexDaniel> don't know when we will be able to reintroduce it properly though

[12:35] <AlexDaniel> in fact, somewhere deep inside I wish for unicode brackets for creating hashes‚Ä¶

[12:59] *** MasterDuke joined
[13:26] <MasterDuke> anyone have a suggestion for speeding up has_attribute https://github.com/perl6/nqp/blob/master/src/how/RoleToClassApplier.nqp#L8-L14 ?

[13:30] <MasterDuke> for a 3mb script that's 191k lines long (most of which is a hash literal) and takes over 2m just to parse, the top function in a --profile-compile by exclusive time is has_attribute in gen/moar/stage2/nqpmo.nqp

[13:31] <timotimo> can you check what calls that?

[13:33] <MasterDuke> the only thing is the apply method in the same file (at line 55)

[13:35] <MasterDuke> however, there is also a src/Perl6/Metamodel/RoleToClassApplier.nqp that looks very similar (haven't checked if actually identical yet)

[13:38] <timotimo> it sounds like we're missing a mixin cache or something

[13:39] <MasterDuke> i haven't tried dumping the count of @attributes yet, but it is just doing a linear scan to see if the $target exists

[13:41] <dogbert17> I'm a bit sceptical towards this test code, is this really a good way to force a GC?? https://github.com/perl6/roast/blob/master/S12-construction/destruction.t#L35

[13:47] *** perlpilot joined
[14:11] *** [TuxCM] joined
[14:16] *** lizmat joined
[14:31] <MasterDuke> ugh, printing to stderr in nqp is incredibly annoying

[14:31] <MasterDuke> `nqp::writefh(nqp::getstderr(), nqp::encode('Class attributes count = ' ~ +@attributes, 'utf8', nqp::create(nqp::newtype(nqp::knowhow(), 'VMArray'))));` complains `encode requires a native int array`

[14:40] <timotimo> that's why there is a "note" sub, no?

[14:40] <timotimo> nqp: note("test")

[14:40] <camelia> nqp-moarvm: OUTPUT: ¬´test‚ê§¬ª

[14:40] <timotimo> could of course be you can't use that from where you are

[14:40] <timotimo> in which case, yeah, that's a bit wordy

[14:42] <MasterDuke> note() causes `Cannot invoke this object (REPR: Null; VMNull)`

[14:43] <timotimo> yeah, sounds like you don't have that sub available at that location

[14:43] <MasterDuke> i'm in src/how/RoleToClassApplier.nqp

[14:43] <timotimo> hm, that's strange

[14:43] <timotimo> i'd expect you could use that there

[14:44] <MasterDuke> i wish i could. i still haven't figured out how to output to stderr otherwise

[14:44] <timotimo> i think you've got the right way there

[14:47] <MasterDuke> well, changing `nqp::create(nqp::newtype(nqp::knowhow(), 'VMArray'))` into `nqp::list_i()` now complains `write_fhb requires a native array of uint8 or int8`

[14:47] <timotimo> yep

[14:47] <timotimo> oh

[14:47] <timotimo> somehow i totally missed that you also pasted an error with that up there

[14:48] <MasterDuke> yeah

[14:48] <timotimo> check t/nqp/082-decode.t

[14:50] <MasterDuke> so wordy...

[14:54] <MasterDuke> huh. copied stuff in from t/nqp/082-decode.t and still getting `encode requires a native int array`

[14:55] <timotimo> can i see what you did?

[14:57] <MasterDuke> https://gist.github.com/MasterDuke17/3c2faefd2795acb618e5f826d359aefa

[14:58] <timotimo> does it explode because you have create_buf twice?

[14:58] <timotimo> also $buf8 twice

[15:00] <timotimo> um, the sub has_attribute seems to be b0rked by copy-paste or something

[15:00] <timotimo> it doesn't have a {

[15:02] *** perlpilot left
[15:02] <MasterDuke> oops, that was just a copy/paste problem

[15:03] <MasterDuke> but create_buf is declared as my inside each of the other methods

[15:03] <MasterDuke> the indenting is off, so it does look odd

[15:03] <timotimo> OK

[15:04] <timotimo> the error doesn't say what it got, right? only what it wanted?

[15:04] <MasterDuke> correct

[15:04] <timotimo> i'd go into gdb and see what the debug name of the object is

[15:04] <timotimo> i.e. STABLE(obj)->debugname or debug_name, i can never remember which

[15:05] <timotimo> we do have a function that gets it for you, though

[15:05] <MasterDuke> huh. those errors are only thrown when `if (!elem_size)`

[15:05] <MasterDuke> if moarvm

[15:07] <timotimo> OK, can you output buf_rd->slot_type?

[15:07] <timotimo> or maybe buf_rd is null?

[15:08] <MasterDuke> 'value has been optimized out'. recompiling...

[15:08] <timotimo> of course :(

[15:10] <MasterDuke> (gdb) p buf_rd->slot_type $1 = 0 '\000'

[15:10] <MasterDuke> output was `$1 = 0 '\000'`

[15:12] <timotimo> that's an object array, i think

[15:12] <timotimo> indeed

[15:12] <timotimo> the question is: why

[15:12] <geekosaur> is it me, or should 0 be reserved there? might catch bugs instead of having them manifest as misinterpretation of e.g. object arrays

[15:14] <timotimo> MasterDuke: could you check if uint8 is perhaps NQPMu in create_buf?

[15:15] <MasterDuke> fwiw, i get the same error with int8

[15:16] <MasterDuke> i added `say(nqp::istype($type, NQPMu));` as the first line of create_buf, but it dies with `Cannot invoke this object (REPR: Null; VMNull)`

[15:16] <timotimo> you can't get a slot type of 0 if you pass in an int :\

[15:16] <timotimo> that's because of "say" i bet

[15:16] <timotimo> here's what you can do

[15:16] <timotimo> put nqp::tan(1); before that line, and disable the jit

[15:16] <MasterDuke> geekosaur: might be a good idea, not sure of implications

[15:16] <timotimo> put a breakpoint into interp.c for the tan function

[15:17] <timotimo> and from there set a breakpoint in VMArray.c's compose function

[15:20] <timotimo> but my suspicion is indeed that we're being bit, once again, by any name that's not defined giving you NQPMu :|

[15:22] <MasterDuke> huh, the breakpoint at tan isn't getting hit

[15:23] <timotimo> you put it in interp.c on line 769?

[15:23] <MasterDuke> i just did `b tan`, but i just did it in interp.c and now it worked

[15:23] <MasterDuke> and now broken at compose

[15:24] <MasterDuke> *now i'm

[15:24] <MasterDuke> src/6model/reprs/VMArray.c:1164

[15:24] <timotimo> you'll be interested in seeing what it does inside spec_to_repr_data, i'd say. but single-step to see if it reaches that at all

[15:27] <timotimo> or maybe just inspect what "type" comes to be

[15:28] <MasterDuke> where?

[15:28] <timotimo> inside compose itself

[15:28] <timotimo> after it grabs it out of the hash

[15:28] <timotimo> line 1171 has the type in it, for example

[15:28] <MasterDuke> is there a way to continue to a specific line?

[15:28] <MasterDuke> 'cause single stepping is taking forever

[15:28] <timotimo> yeah, but i don't know the command

[15:30] <MasterDuke> $1 = (MVMObject *) 0x5555557b4e30

[15:30] <timotimo> what's the debugname?

[15:30] <MasterDuke> $2 = 0x5555557c4770 "VMNull"

[15:30] <timotimo> aha!

[15:31] <timotimo> and this definitely is the one time we're in create_buf?

[15:31] <timotimo> though it shouldn't reach line 1171 if that's the case, because MVM_is_null should give true there

[15:31] <MasterDuke> yeah, i moved it out a scope, so there's only one create_buf now

[15:32] <timotimo> looks like you'll also need to compose your own uint8 right there

[15:32] <timotimo> my native uint8  is repr('P6int') is nativesize( 8) is unsigned { }

[15:33] <MasterDuke> `Cannot call method 'new_type' on a null object`

[15:34] <timotimo> ...?!

[15:34] <timotimo> how is all of this even

[15:36] <MasterDuke> and all because i want to print out the length of an array to stderr...

[15:37] <timotimo> here's my super hacky recommendation

[15:37] <timotimo> nqp::isprime(+@attributes), breakpoint in gdb

[15:37] <timotimo> you can give a breakpoint commands

[15:38] <timotimo> ah, damn, that's a big int op

[15:38] <MasterDuke> why not tan_n again?

[15:39] <MasterDuke> or would it be simpler to just open a file to write to?

[15:39] <timotimo> tan_n wants a num, but i guess it'll happily coerce for you

[15:39] <timotimo> but for opening a file and writing, you'll still need to have a buf8

[15:39] <timotimo> but yeah, use tan_n

[15:39] <MasterDuke> ah, right

[15:41] <timotimo> anyway

[15:42] <timotimo> if you have breakpoint 5, "commands 5", then one per line: "print GET_REG(cur_op, 2).n64)", "c", "end"

[15:42] <timotimo> "set pagination off"

[15:42] <timotimo> then it'll print every argument passed to tan

[15:43] <MasterDuke> k. building rakudo now

[15:44] <timotimo> i'm sorry this is so terrible :\

[15:45] <timotimo> ... we could have used the debugserver for this

[15:45] <MasterDuke> ooooh

[15:46] <MasterDuke> easier?

[15:46] <timotimo> probably a bit

[15:46] <timotimo> it doesn't yet have support for "whenever it hits this breakpoint, run that command"

[15:47] <MasterDuke> rakudo just built, now to try compiling that pm6 in gdb...

[15:49] <timotimo> BBIAB

[15:49] <Geth> ¬¶ rakudo: zoffixznet self-assigned Improve empty hash creation performance with {} https://github.com/rakudo/rakudo/issues/1951

[15:56] <MasterDuke> huh. the results are not very helpful

[15:57] <MasterDuke> only 8 prints, with the largest value being 2

[15:57] <MasterDuke> then `===SORRY!=== Frame 2 local access out of range`

[16:00] <MasterDuke> so i wonder if that profile i created was incorrect/corrupted or something

[16:01] <MasterDuke> the one that told me has_attribute was expensive

[16:05] <MasterDuke> heh. a perf recording of compiling this .pm6 is 8gb 

[16:06] <MasterDuke> hm. gc_mark as the most expensive at 12.8%

[16:37] <MasterDuke> a new --profile-compile say nullterm_alt is the most expensive

[16:57] <MasterDuke> i'm not sure these profiles can be trusted, they're all kind of different

[17:08] <Geth> ¬¶ roast: dogbert17++ created pull request #438: Add test for RT #133016

[17:08] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/pull/438

[17:08] <synopsebot> RT#133016 [open]: https://rt.perl.org/Ticket/Display.html?id=133016 Wrong set difference of Bag and List

[17:14] <Geth> ¬¶ rakudo: zoffixznet self-unassigned Improve empty hash creation performance with {} https://github.com/rakudo/rakudo/issues/1951

[17:22] *** evalable6 left
[17:23] *** evalable6 joined
[17:33] *** perlpilot joined
[17:34] <MasterDuke> well, a couple in a row have said https://github.com/perl6/nqp/blob/master/src/vm/moar/QAST/QASTOperationsMAST.nqp#L1439 is the most expensive

[18:01] <pmurias> MasterDuke: re note not working in role that's a known bug in nqp

[18:02] <pmurias> MasterDuke: you could try to copy&paste note

[18:23] <MasterDuke> pmurias: i did try that, think i got the 'cannot invoke object (repr VMNull)' or whatever that error is

[18:28] <MasterDuke> timotimo: why do operand indexes have to be <= 32768?

[18:29] <timotimo> that's the max of a signed 16bit integer, right?

[18:30] <timotimo> m: say 2 ** 15

[18:30] <camelia> rakudo-moar c441d8d8b: OUTPUT: ¬´32768‚ê§¬ª

[18:30] <MasterDuke> yeah. but MAS_Local.index is actually an MVMint64

[18:30] <timotimo> may i ask what you'd need more than that for? :D

[18:30] <timotimo> register arguments in the bytecode are actually 16bit, though

[18:30] <japhb> MasterDuke: Aren't they represented by 16-bit shorts in the opcode stream?

[18:31] <MasterDuke> i guess this `write_int16(ws->bytecode_seg, ws->bytecode_pos, (unsigned short)l->index);` is why that check is made

[18:31] <MasterDuke> i'm still trying to compile that .pm6 with the large hash literal

[18:31] <timotimo> we could get a tiny amount of memory savings by making that a 16bit int in the MAST::Local class maybe

[18:32] <MasterDuke> and the compile dies with `===SORRY!=== Frame 2 local access out of range`

[18:34] <MasterDuke> works if i shorten the file from 191k lines to 50k

[18:34] <MasterDuke> 100k was still too big

[18:36] <timotimo> the code it generates is probably pretty crappy then

[18:37] <timotimo> maybe it tries to put all objects that go into the hash into a single argument list

[18:38] <MasterDuke> you want to see the file?

[18:40] <MasterDuke> ok, the shorter version that does actually compile and produce a profile says `method MATCH()` from NQPMatch is the most expensive. that's more expected

[18:40] <timotimo> mhm

[18:40] <MasterDuke> it's only 6.1% though

[18:41] <timotimo> i'd say "give me the MAST dump" but it's so hard to read compared to moar --dump of the corresponding .moar file

[18:43] <MasterDuke> you want the moar --dump?

[18:43] <timotimo> if that's possible.. :)

[18:46] *** lizmat left
[18:46] <MasterDuke> https://gist.github.com/MasterDuke17/d31f8366a8fae2bde932f13c666c0ba4

[18:47] <timotimo> huh

[18:47] <MasterDuke> that's from the 50k line version that does actually compile

[18:48] <timotimo> oh, the obvious result would be to just have a wval

[18:48] <timotimo> so what we really need is to see how exactly that object is being created by the parser

[18:48] <timotimo> sorry for the misdirection

[18:49] <MasterDuke> how do we see that?

[18:49] <timotimo> hm, but the "local access out of range" thing, that comes from code

[18:49] <timotimo> i'm confused

[18:49] <timotimo> but for now i'll go to the kitchen and cook something

[18:55] <MasterDuke> pmurias: for the truffle branch, does every nqp:: op need an implementation?

[18:56] <pmurias> MasterDuke: yes

[18:57] <pmurias> MasterDuke: the plan is to steal most of them from the JVM backend

[19:02] <pmurias> MasterDuke: do you want to implement some ops? ;)

[19:05] * pmurias is working on getting variables working on nqp-truffle atm

[19:07] <Geth> ¬¶ roast: 702d866999 | (Jan-Olof Hendig)++ | S03-operators/set_difference.t

[19:07] <Geth> ¬¶ roast: Add test for RT #133016

[19:07] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/702d866999

[19:07] <Geth> ¬¶ roast: 2288d4a3c5 | dogbert17++ (committed using GitHub Web editor) | S03-operators/set_difference.t

[19:07] <Geth> ¬¶ roast: Merge pull request #438 from dogbert17/test-rt-133016

[19:07] <Geth> ¬¶ roast: 

[19:07] <Geth> ¬¶ roast: Add test for RT #133016

[19:07] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/2288d4a3c5

[19:07] <synopsebot> RT#133016 [open]: https://rt.perl.org/Ticket/Display.html?id=133016 Wrong set difference of Bag and List

[19:19] <pmurias> MasterDuke: once the variables and then the type coercions are in place a lot of the nqp::ops can be implemented in a pretty unstructured order

[19:23] <MasterDuke> pmurias: i am definitely curious/interested

[19:26] <MasterDuke> i may experiment with some of the simpler ops

[19:29] <pmurias> MasterDuke: if you have any question/suggestion I'll happily answer them, as building something that people can get involved with is somethink I haven't figured out (but would be great to learn it this time)

[19:59] *** MasterDuke left
[20:03] *** [Tux] joined
[20:18] *** Kaiepi left
[20:18] *** Kaiepi joined
[20:29] *** MasterDuke joined
[21:57] *** ufobat_ left
[22:02] *** MasterDuke left
[22:08] *** pmurias left
[22:09] *** PufferBot left
[22:10] *** Kaiepi left
[22:11] *** Kaiepi joined
[22:17] *** Kaiepi left
[22:17] *** Kaiepi joined
[22:18] *** Kaiepi left
[22:19] *** Kaiepi joined
[22:45] <Geth> ¬¶ nqp: edf38476fa | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[22:45] <Geth> ¬¶ nqp: Get MoarVM with negated object literal spesh guard

[22:45] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/edf38476fa

[22:45] <Geth> ¬¶ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06...2018.06-9-gb3ce4f6

[22:45] <Geth> ¬¶ nqp: 2c223f096b | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[22:45] <Geth> ¬¶ nqp: Map new spesh plugin object literal non-match op

[22:45] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/2c223f096b

[22:45] <Geth> ¬¶ nqp: 50bb7de4da | (Jonathan Worthington)++ | t/moar/52-pluggable-spesh.t

[22:45] <Geth> ¬¶ nqp: Test spesh plugin object literal non-match op

[22:45] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/50bb7de4da

[22:48] *** MasterDuke joined
[23:40] *** MasterDuke left
[23:48] *** MasterDuke joined
