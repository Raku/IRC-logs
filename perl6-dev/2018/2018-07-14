[00:43] *** fake_space_whale joined
[01:39] *** j3nnn1 left
[02:00] *** timotimo left
[02:07] *** timotimo joined
[02:14] *** fake_space_whale left
[02:54] *** benjikun joined
[03:28] <MasterDuke> .tell pmurias my first attempt at implementing while ( https://gist.github.com/MasterDuke17/573d960c76c917c95508be9ec64769a1 ) dies with `java.lang.VerifyError: Bad type on operand stack. 'java/lang/String' (current frame, stack[0]) is not assignable to 'org/perl6/nqp/sixmodel/SixModelObject'`. now to go see if i can find how ruby does it

[03:28] <yoleaux> MasterDuke: I'll pass your message to pmurias.

[04:28] *** skids left
[05:51] <AlexDaniel> so I'm looking through the remaining module failures and I stumbled upon this

[05:52] <AlexDaniel> so Native::Packing was failing on HEAD and the author did this tweak to fix it:

[05:52] <AlexDaniel> https://github.com/p6-pdf/Native-Packing-p6/commit/23dcfc761d0c0c0b0032d7cb8dce1e32ce387794

[05:52] <AlexDaniel> why?

[05:54] <AlexDaniel> “Cannot call method 'sink' on a null object” I mean that's not good

[05:59] <AlexDaniel> alright, bisecting…

[06:00] *** MasterDuke left
[06:03] <AlexDaniel> c: 6d271667c9^,6d271667c9 https://gist.github.com/AlexDaniel/429d377f298703708adb1b9a7e5cb801

[06:03] <committable6> AlexDaniel, Using file “basic.p6” as a main file, other files are placed in “sandbox/”

[06:03] <committable6> AlexDaniel, https://gist.github.com/7323bce1f8b6c0c876515db56c30a81a

[06:03] <AlexDaniel> (2018-07-09) https://github.com/rakudo/rakudo/commit/6d271667c9ac2c787e7e20b6170046ccfbd7d7e9

[06:23] <Geth> ¦ 6.d-prep: 76b448d105 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[06:23] <Geth> ¦ 6.d-prep: TODO: Rename `RAKUDO_EXCEPTIONS_HANDLER` to `PERL6_EXCEPTIONS_HANDLER`

[06:23] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/76b448d105

[06:25] *** robertle joined
[06:33] <Geth> ¦ roast: 8379dd2c73 | (Zoffix Znet)++ | S06-signature/types.t

[06:33] <Geth> ¦ roast: [v6.d REVIEW] Loosen up param concreteness error tests

[06:33] <Geth> ¦ roast: 

[06:33] <Geth> ¦ roast: Just test what the ticket is about rather than speccing all

[06:33] <Geth> ¦ roast: those various attributes and their values.

[06:33] <Geth> ¦ roast: 

[06:33] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/c0feebdbb

[06:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8379dd2c73

[06:34] <Geth> ¦ roast: 0d1ead70ed | (Zoffix Znet)++ | S04-declarations/multiple.t

[06:34] <Geth> ¦ roast: Remove trailing whitespace

[06:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0d1ead70ed

[06:35] <Geth> ¦ roast: 4be1438f24 | (Zoffix Znet)++ | S04-declarations/multiple.t

[06:35] <Geth> ¦ roast: [v6.d REVIEW] loosen exact error message content test

[06:35] <Geth> ¦ roast: 

[06:35] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/44779aca0

[06:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4be1438f24

[06:36] <Geth> ¦ roast: d1ca998777 | (Zoffix Znet)++ | S04-declarations/multiple.t

[06:36] <Geth> ¦ roast: [v6.d REVIEW] simplify test matcher

[06:36] <Geth> ¦ roast: 

[06:36] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/3c94da414

[06:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d1ca998777

[06:39] <Geth> ¦ rakudo: db5cc06335 | (Zoffix Znet)++ | t/05-messages/03-errors.t

[06:39] <Geth> ¦ rakudo: [v6.d REVIEW] move error content test from spec

[06:39] <Geth> ¦ rakudo: 

[06:39] <Geth> ¦ rakudo: Orig: https://github.com/perl6/roast/commit/3fc7019d3

[06:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/db5cc06335

[06:40] <Geth> ¦ roast: 76610d4535 | (Zoffix Znet)++ | S04-statements/while.t

[06:40] <Geth> ¦ roast: [v6.d REVIEW] move error content test from spec

[06:40] <Geth> ¦ roast: 

[06:40] <Geth> ¦ roast: Moved to: https://github.com/rakudo/rakudo/commit/db5cc06335

[06:40] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/3fc7019d3

[06:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/76610d4535

[06:55] *** committable6 left
[06:55] *** bisectable6 left
[06:55] *** committable6 joined
[06:55] *** ChanServ sets mode: +v committable6

[06:56] *** bisectable6 joined
[06:56] *** evalable6 joined
[06:56] *** ChanServ sets mode: +v evalable6

[07:11] <AlexDaniel> alright, only 2 modules left in R#2047

[07:11] <synopsebot> R#2047 [open]: https://github.com/rakudo/rakudo/issues/2047 [⚠ blocker ⚠] [WIP] Rescalar merge & other toaster-related stuff

[07:13] *** lizmat joined
[07:19] *** lizmat left
[07:23] *** lizmat joined
[07:28] *** ufobat_ joined
[07:35] *** lizmat left
[07:47] *** pmurias joined
[07:58] *** lizmat joined
[08:00] <Geth> ¦ nqp/truffle: 0d726f8b05 | (Paweł Murias)++ | 2 files

[08:00] <Geth> ¦ nqp/truffle: [truffle] Get loop implementation by MasterDuke++ to run the first loop in

[08:00] <Geth> ¦ nqp/truffle: 

[08:00] <Geth> ¦ nqp/truffle: t/nqp/014-while.t

[08:00] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/0d726f8b05

[08:00] <pmurias> .tell MasterDuke I'm away on a camp till Sunday

[08:00] <yoleaux> 03:28Z <MasterDuke> pmurias: my first attempt at implementing while ( https://gist.github.com/MasterDuke17/573d960c76c917c95508be9ec64769a1 ) dies with `java.lang.VerifyError: Bad type on operand stack. 'java/lang/String' (current frame, stack[0]) is not assignable to 'org/perl6/nqp/sixmodel/SixModelObject'`. now to go see if i can find how ruby does it

[08:00] <yoleaux> pmurias: I'll pass your message to MasterDuke.

[08:01] <pmurias> .tell MasterDuke I hooked you loop in

[08:01] <yoleaux> pmurias: I'll pass your message to MasterDuke.

[08:14] <lizmat> Files=1242, Tests=76342, 326 wallclock secs (15.71 usr  5.69 sys + 2271.66 cusr 230.98 csys = 2524.04 CPU)

[08:14] <yoleaux> 13 Jul 2018 22:24Z <jnthn> lizmat: It's a conextualizer, so so long as it returns something Hashish it's all good.

[08:14] <yoleaux> 13 Jul 2018 22:24Z <jnthn> lizmat: Uh...Hash-ish :P

[08:24] <[Tux]> Rakudo version 2018.06-176-gdb5cc0633 - MoarVM version 2018.06-218-g00d5a0611

[08:24] <[Tux]> csv-test-xs-20      0.432 -  0.451

[08:24] <[Tux]> test-t --race       1.010 -  1.037

[08:24] <[Tux]> csv-ip5xs           1.127 -  1.259

[08:24] <[Tux]> test-t              2.308 -  2.319

[08:24] <[Tux]> csv-ip5xs-20        8.773 -  8.916

[08:24] <[Tux]> test                9.488 -  9.635

[08:24] <[Tux]> test-t-20 --race   14.982 - 16.471

[08:24] <[Tux]> csv-parser         25.062 - 25.087

[08:24] <[Tux]> test-t-20          39.886 - 40.982

[08:34] <AlexDaniel> releasable6: status

[08:34] <releasable6> AlexDaniel, Next release in ≈7 days and ≈10 hours. 9 blockers. 0 out of 176 commits logged

[08:34] <releasable6> AlexDaniel, Details: https://gist.github.com/05f3191d79c62b74a87b2f803b7691aa

[08:37] <AlexDaniel> releasable6: status

[08:37] <releasable6> AlexDaniel, Next release in ≈7 days and ≈10 hours. 8 blockers. 0 out of 176 commits logged

[08:37] <releasable6> AlexDaniel, Details: https://gist.github.com/0f5a23aa30c6bb44bacdaba89cb8f429

[08:45] <AlexDaniel> I haven't thought about it enough, but as I see it, having rescalar stuff in the release is not an option this month. For example, a lot of modules depend on XML module and the PR for it is not even merged yet. Even if it gets merged soon, we need to give some time for users to update it. Moreover there are many low bus factor blockers with no guaranteed ETA. I think the best solution is to cut this release from a commit older than

[08:45] <AlexDaniel> rescalar branch merge.

[08:46] <lizmat> I say we give jnthn a few more days: if necessary, I would suggest postponing the release by a week or so

[08:46] <AlexDaniel> another option is to do some reverts but that's just painful and not worth it IMO. I think it's much easier to start a release branch and cherry-pick anything new that we absolutely want in this release

[08:46] <lizmat> we want this Rakudo Star to be good *and* fast :-)

[08:47] <AlexDaniel> we can surely talk about it a few days later, no problem with that. But broken modules will remain an issue

[08:48] <lizmat> agree that broken modules should be fixed before release

[08:49] <AlexDaniel> and then? An alert saying that users should run `zef upgrade`?

[08:50] <AlexDaniel> it's still marked BETA, but I'm not sure what kind of issues this implies

[08:53] <AlexDaniel> lizmat: just to make sure we understand each other, the problem is following: say someone was using 2018.06 and everything was working fine, they install 2018.07 (without upgrading modules) and stuff stops working

[08:53] <lizmat> isn't that what we have P6alerts for?

[08:54] <stmuk> if you branched a release branch you could always delete it if master is ready ... seems a sensible option to me

[08:54] <stmuk> just leaves more options open

[08:54] <lizmat> true, if the release manager wants to go the extra mile wrt that, ++ to the release manager

[08:54] <AlexDaniel> the solution is `zef install XML` or `zef upgrade`, but don't we want to let people naturally upgrade their stuff? A little bit of time can do.

[08:56] <lizmat> AlexDaniel: if we don't have the rescalar branch in 2018.07, wouldn't the same problem exist with 2018.08 wrt breaking of modules ?

[08:56] <lizmat> because we fixed a number of bugs, and modules where depending on the buggy behaviour ?

[08:56] <Geth> ¦ rakudo: c567af7364 | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[08:56] <Geth> ¦ rakudo: Simplify Hash.Map coercion

[08:56] <Geth> ¦ rakudo: 

[08:56] <Geth> ¦ rakudo: Since we have optimized my %m is Map = %h, this is now trivial to do

[08:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c567af7364

[08:57] <AlexDaniel> lizmat: correct, it's not perfect, but giving it at least a month can make a big difference I believe

[08:57] <AlexDaniel> Also, these blockers are just the things that I managed to dig up from toaster, it's possible that there are more issues

[08:57] <AlexDaniel> I mean issues that we don't see yet… so rushing rescalar merge into this release means that the Star release may end up being fast but buggy :)

[08:58] <lizmat> yeah, we don't want that, I agree  :-)

[08:58] <stmuk> AlexDaniel++

[08:59] <AlexDaniel> I'm still open for other solutions, and we'll see where more clearly a few days later I guess

[08:59] <lizmat> yeah, I think so

[08:59] <AlexDaniel> s/where//

[09:02] <lizmat> another datapoint on the "MoarVM oops: Spesh: failed:

[09:02] <lizmat> my %h; %h<a> = 768 for ^328   # does this

[09:02] <lizmat> my %h; %h<a> = 768 for ^327   # is ok with --profile

[09:03] <lizmat> and again, Bool and find_method the top 2

[09:04] *** llfourn left
[09:04] <lizmat> correction: no, that was an old profile  :-)

[09:04] <lizmat> the profile appears correct for 327

[09:04] <stmuk> I wonder if it builds on windows .. the appveyor says no

[09:04] <lizmat> but *all* of the blocks are red

[09:04] <lizmat> so nothing got speshed or jitted yet

[09:05] <lizmat> jnthn: ^^

[09:07] *** llfourn joined
[09:10] <AlexDaniel> stmuk: that's a very good point :)

[09:12] *** pmurias left
[09:16] <stmuk> I'll try it later

[09:20] <AlexDaniel> stmuk: R#2070

[09:20] <synopsebot> R#2070 [open]: https://github.com/rakudo/rakudo/issues/2070 [regression][⚠ blocker ⚠] AppVeyor status and building on Windows

[09:50] <Geth> ¦ rakudo: 7848cdb484 | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[09:50] <Geth> ¦ rakudo: Copy Hash.STORE logic to Object Hash for now

[09:50] <Geth> ¦ rakudo: 

[09:50] <Geth> ¦ rakudo: While work is being done on the normal Hash.STORE

[09:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7848cdb484

[09:50] *** ufobat_ left
[10:32] <dogbert11> ZOFFLOP: t/spec/S15-nfg/concat-stable.t - MoarVM Panic

[10:50] <AlexDaniel> dogbert11: ticket it

[10:51] <AlexDaniel> dogbert11: try running it in a loop maybe to reproduce?

[10:57] *** mst left
[10:57] *** mst joined
[11:15] <dogbert11> AlexDaniel: I'll wait a bit before reporting, there might be a problem in the GC error detection logic, see #moarvm

[11:53] *** MasterDuke joined
[12:10] *** ufobat_ joined
[12:52] *** pmurias joined
[12:58] <MasterDuke> pmurias: cool. looks like i was kind of close for the NQPWhileNode.java implementation. what i added in Truffle.nqp was a bit different though, that's probably where my main problem was

[12:58] <yoleaux> 08:00Z <pmurias> MasterDuke: I'm away on a camp till Sunday

[12:58] <yoleaux> 08:01Z <pmurias> MasterDuke: I hooked you loop in

[13:09] <Geth> ¦ rakudo: 9dce633188 | (Zoffix Znet)++ | t/05-messages/03-errors.t

[13:09] <Geth> ¦ rakudo: [v6.d REVIEW] Move error text test from roast

[13:09] <Geth> ¦ rakudo: 

[13:09] <Geth> ¦ rakudo: Orig: https://github.com/perl6/roast/commit/35fac4d1b

[13:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9dce633188

[13:10] *** Zoffix joined
[13:14] <Zoffix> AlexDaniel: +1 on using a release branch without the recent rescallar/spesh plugin stuff. For wanting this Rakudo Star to be good and fast, I'm reminded of https://rakudo.party/post/The-Failure-Point-of-a-Release#thefuture with "We rushed some work, due to lengthy Rakudo Star release cycles" listed as #1

[13:15] <Zoffix> Also, my build on Windows just failed, but the errors suggest jnthn++'s fix fixes them

[13:15] * Zoffix does the bumps

[13:18] <Geth> ¦ roast: 9a981d0b26 | (Zoffix Znet)++ | integration/error-reporting.t

[13:18] <Geth> ¦ roast: [v6.d REVIEW] Move error text test out of roast

[13:18] <Geth> ¦ roast: 

[13:18] <Geth> ¦ roast: Moved to: https://github.com/rakudo/rakudo/commit/9dce633188

[13:18] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/35fac4d1b

[13:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9a981d0b26

[13:21] <jnthn> fwiw, I've not been rushing with rescalar stuff at all. I merged it when it passed stresstest and after successfully trying it with a few modules.

[13:21] <yoleaux> 08:17Z <lizmat> jnthn: does something Hash-ish need to mutable or not

[13:21] <jnthn> .tell lizmat No

[13:21] <yoleaux> jnthn: I'll pass your message to lizmat.

[13:23] <Geth> ¦ 6.d-prep: 5dea16f88c | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[13:23] <Geth> ¦ 6.d-prep: Roast TODO: Add Missing `plan`s in substests

[13:23] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/5dea16f88c

[13:23] <jnthn> More generally: that this is a Rakudo Star release is not much of a consideration for much of what I'm doing. I've got a window of time where I can work with very few other distractions on a bunch of difficult problems that I've put off working on for quite a while.

[13:24] <jnthn> I'm doing the things that need doing when I have the chance to do them. That this happens to be around the time of the Star release is mostly an unhelpful coincidence, from my perspective. :)

[13:28] <Zoffix> Just got 3 stresstest failures, one of which is a SEGV after the bumps

[13:28] * Zoffix restresstests

[13:28] <Zoffix> (failed files: https://gist.github.com/zoffixznet/ab47d85b17f36db48637f64fdec9f2f2 )

[13:29] <Zoffix> *from first run

[13:33] *** benjikun2 joined
[13:33] <Zoffix> No SEGV this time, but the other two failures remain: https://gist.github.com/zoffixznet/a1c2d6ed83795b04015d142c23861cbd

[13:33] <pmurias> MasterDuke: I just changed how the condition was checked, the hooking into Truffle.nqp was causing problems

[13:33] * Zoffix reverts the bumps to see if those existed before the bumps

[13:34] <pmurias> MasterDuke: you can always use --target=tast to see, the stuff the will be turned into truffle nodes

[13:35] *** benjikun left
[13:43] <Zoffix> they are

[13:43] * Zoffix bumps

[13:46] *** skids joined
[13:47] <Zoffix> Filed failures on R#2071

[13:47] <synopsebot> R#2071 [open]: https://github.com/rakudo/rakudo/issues/2071 [⚠ blocker ⚠] Stresstest failures on v2018.06.179.g.9.dce.63318

[13:47] <Zoffix> The t/spec/S17-promise/lock-async-stress2.t segfaulted twice. Once with bumps in and once on current rakudo HEAD without any bumps

[13:48] <Zoffix> (well, it said "Non-zero exit status: 11", but I believe that means it segfaulted)

[13:49] <Zoffix> *wait status

[13:49] <jnthn> Yeah, sounds like. Will look at the ticket, once I've got through some of the others. :-)

[13:50] <Geth> ¦ nqp/truffle: 16281107c7 | (Paweł Murias)++ | src/vm/jvm/Truffle.nqp

[13:50] <Geth> ¦ nqp/truffle: [truffle] For now compile nqp::callstatic as nqp::call

[13:50] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/16281107c7

[13:50] <jnthn> Be back eveningish :)

[13:55] <Zoffix> m: dd <abc xyz>.classify( *.contains: any 'a'..'f' )

[13:55] <camelia> rakudo-moar 9dce63318: OUTPUT: «(my Any %{Any} = Bool::False => $["abc", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz"], Bool::True => $["abc"])␤»

[13:55] <Zoffix> Should that actually duplicate all the things like that?

[13:56] <Zoffix> proptested in https://github.com/perl6/roast/commit/15eced771

[13:56] <Zoffix> m: dd <bcdef xyz>.classify( *.contains: any 'a'..'f' )

[13:56] <camelia> rakudo-moar 9dce63318: OUTPUT: «(my Any %{Any} = Bool::False => $["bcdef", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz"], Bool::True => $["bcdef"])␤»

[13:57] <Zoffix> and bcdef is in both truthy and falsy branches :S

[13:57] <Zoffix> m: dd <bcdef xyz>.classify({.contains: any 'a'..'f' })

[13:57] <camelia> rakudo-moar 9dce63318: OUTPUT: «(my Any %{Any} = Bool::False => $["bcdef", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz"], Bool::True => $["bcdef"])␤»

[13:58] <timotimo> it'd be surprising if it'd "so" it for you, because your results can very well be something non-booly

[13:58] <timotimo> i'd say tell people to explicitly "so" it if they don't want the same semantics as assignment would have

[13:58] <Zoffix> ah it returns a category to shove the stuff into. OK

[13:58] <timotimo> that's right

[13:59] <timotimo> warrants a mention in the docs, perhaps an entry in the traps document but i'm not so convinced of that

[13:59] <Zoffix> How come there are only 2 "bcdef" but a whole bunch of "xyz"s?

[14:00] <Zoffix> m: dd <bcdef xyz>.classify({.contains: any 'a'..'o' })

[14:00] <camelia> rakudo-moar 9dce63318: OUTPUT: «(my Any %{Any} = Bool::False => $["bcdef", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz"], Bool::True => $["bcdef"])␤»

[14:00] <timotimo> any short-circuits, right? but only when you so it?

[14:00] <Zoffix> Ah. OK

[14:00] <timotimo> needs to be keyed as Mu

[14:01] <timotimo> do we have a :into named arg or do we Hash:U.classify for that?

[14:01] <timotimo> m: (my %foo{Mu}).classify(<bcdef xyz>, {.contains: any 'a'..'o'}).perl.say

[14:01] <camelia> rakudo-moar 9dce63318: OUTPUT: «Cannot resolve caller classify(Hash[Any,Mu]: List, Block); none of these signatures match:␤    ($: *%_)␤    ($: Whatever, *%_)␤    ($: $test, :$into!, :&as, *%_)␤    ($: $test, :&as, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[14:01] <timotimo> not like that, no

[14:01] <timotimo> it has "into"

[14:01] <timotimo> m: dd <bcdef xyz>.classify({.contains: any 'a'..'o' }, into => my %foo{Mu})

[14:01] <camelia> rakudo-moar 9dce63318: OUTPUT: «Hash[Any,Mu] %foo = (my Any %{Mu} = Bool::False => $["bcdef", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz", "xyz"], Bool::True => $["bcdef"])␤»

[14:01] <timotimo> hm, no

[14:01] <Zoffix> does it though? It's not documented

[14:02] <timotimo> the "into" arg?

[14:02] <Zoffix> Yes

[14:02] <Zoffix> Oh ok, it's documented, but not listed in the shown signatures

[14:02] <timotimo> every day a little improvement to the docs ...

[14:04] <Zoffix> D#2175

[14:04] <synopsebot> D#2175 [open]: https://github.com/perl6/doc/issues/2175 [docs][good first issue] .classify docs lack `:as` and `:into` args in shown signatures

[14:05] <Geth> ¦ nqp: 6c3c3c31d7 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[14:05] <Geth> ¦ nqp: [MoarVM Bump] Brings 17 commits

[14:05] <Geth> ¦ nqp: 

[14:05] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.06-203-g1b1edfe...2018.06-220-gd4d8ff4

[14:05] <Geth> ¦ nqp: d4d8ff4 Mark functions used in Perl 6 extops MVM_PUBLIC

[14:05] <Geth> ¦ nqp: 3e91dc6 Fix MVM_GC_DEBUG worklist check for NULL STable

[14:05] <Geth> ¦ nqp: 00d5a06 Merge branch 'new-deopt-point-algo'

[14:05] <Geth> ¦ nqp: 8821a35 Move speshresolve handling into optimize phase

[14:05] <Geth> ¦ nqp: <…commit message has 13 more lines…>

[14:05] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6c3c3c31d7

[14:05] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-203-g1b1edfe...2018.06-220-gd4d8ff4

[14:05] <Geth> ¦ rakudo: 5cf0afce02 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[14:05] <Geth> ¦ rakudo: [NQP Bump] 6c3c3c3 [MoarVM Bump] Brings 17 commits

[14:05] <Geth> ¦ rakudo: 

[14:05] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.06-50-gb1e80f0...2018.06-51-g6c3c3c3

[14:05] <Geth> ¦ rakudo: 

[14:05] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.06-203-g1b1edfe...2018.06-220-gd4d8ff4

[14:05] <Geth> ¦ rakudo: d4d8ff4 Mark functions used in Perl 6 extops MVM_PUBLIC

[14:05] <Geth> ¦ rakudo: 3e91dc6 Fix MVM_GC_DEBUG worklist check for NULL STable

[14:05] <Geth> ¦ rakudo: <…commit message has 15 more lines…>

[14:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5cf0afce02

[14:05] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-50-gb1e80f0...2018.06-51-g6c3c3c3

[14:06] <MasterDuke> pmurias: i just realized typed variable declarations aren't supported yet (e.g., `my int $a`). heh, that explains many of the `Confused at ...` errors i've been getting

[14:13] *** MasterDuke left
[14:16] <dogbert11> Zoffix: do you still have access to a 32 bit machine?

[14:16] *** MasterDuke joined
[14:25] <Zoffix> dogbert11: kinda... it'd require two remote desktop sessions and one ssh to get to. Why?

[14:29] <dogbert11> Zoffix: because I think the build is busted on 32 bit (it is on my machine). Just wanted to ask you if you can build your latest bump there.

[14:45] <Zoffix> dogbert11: yup: "Cannot invoke this object (REPR: P6opaque; QAST::Block)"

[14:48] <Zoffix> R#2072

[14:48] <synopsebot> R#2072 [open]: https://github.com/rakudo/rakudo/issues/2072 Can't build on 32-bit Debian

[14:55] <pmurias> MasterDuke: we need to compile with a full setting to get 'my int $a' to parse

[14:56] <dogbert11> Zoffix: many thanks

[14:58] <AlexDaniel> thanks to you both :)

[14:59] <AlexDaniel> I could have noticed that with canary also, but that typically happens much closer to the release

[15:00] <Geth> ¦ nqp/truffle: a0454b35c9 | (Paweł Murias)++ | 7 files

[15:00] <Geth> ¦ nqp/truffle: [truffle] Implement 'local' scoped variables

[15:00] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/a0454b35c9

[15:00] <Geth> ¦ nqp/truffle: 58d2d82400 | (Paweł Murias)++ | nqp-truffle.nqp

[15:00] <Geth> ¦ nqp/truffle: [truffle] Enable the optimizer

[15:00] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/58d2d82400

[15:00] <Geth> ¦ nqp/truffle: a167db98ae | (Paweł Murias)++ | 2 files

[15:00] <Geth> ¦ nqp/truffle: [truffle] Compile with the JVM setting

[15:00] <Geth> ¦ nqp/truffle: 

[15:00] <Geth> ¦ nqp/truffle: We need to swith to using a one dual compiled that we can load at some point

[15:00] <Geth> ¦ nqp/truffle: Before we can deserialize we use a placeholder for QAST::WVal.

[15:00] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/a167db98ae

[15:00] <pmurias> MasterDuke: ^^ that should get 'my int $a' to parse

[15:00] <pmurias> MasterDuke: but we still need to cross-compile our own setting and implement native vars

[15:00] <pmurias> at some point

[15:01] <dogbert11> AlexDaniel: added info wrt to the offending commit

[15:02] <MasterDuke> pmurias++

[15:24] *** benjikun joined
[15:25] *** benjikun2 left
[15:39] *** fake_space_whale joined
[15:42] <AlexDaniel> zostay: hello? :)

[15:46] *** Zoffix left
[16:15] <Geth> ¦ roast: 7dc829e0fb | (Zoffix Znet)++ | S32-list/classify.t

[16:15] <Geth> ¦ roast: [v6.d REVIEW] Fix classify Junction matcher tests

[16:15] <Geth> ¦ roast: 

[16:15] <Geth> ¦ roast: Current tests assume implementation-specific Junction

[16:15] <Geth> ¦ roast: shortcircuiting behaviour.

[16:15] <Geth> ¦ roast: 

[16:15] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/15eced771

[16:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7dc829e0fb

[16:17] <lizmat> m: my Int %h; %h.BIND-KEY(%h,a,my Str $ = "foo")  # DIHWIDT or worth an issue ?

[16:17] <yoleaux> 13:21Z <jnthn> lizmat: No

[16:17] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[16:18] <lizmat> m: my Int %h; %h.BIND-KEY(%h,a,my Str $ = "foo")

[16:18] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[16:18] <lizmat> hmmm... I get a different error...

[16:19] <timotimo> lizmat: what's a supposed to be?

[16:20] <lizmat> well, you're trying to bind a Str container into an Int hash

[16:20] <lizmat> m: my Int %h; %h.BIND-KEY(%h,"a",my Str $ = "foo")

[16:20] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «Cannot resolve caller BIND-KEY(Hash[Int]: Hash[Int], Str, Str); none of these signatures match:␤    (Hash:D: \key, Mu \bindval, *%_)␤    (Hash:D: Str:D \key, Mu \bindval, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[16:20] <timotimo> aha

[16:21] <lizmat> ok, I actually still get a different error, let me get the bumped version

[16:21] <timotimo> so you think it should give an error related to the type for the hash not fitting?

[16:21] <lizmat> well, that's the question, should it ?

[16:22] *** ExtraCrispy left
[16:25] <lizmat> m: my Int %h; %h.BIND-KEY("a",my Str $ = "foo")   # this should be the actual code

[16:25] <camelia> rakudo-moar 5cf0afce0: ( no output )

[16:26] <lizmat> m: my Int %h; %h.BIND-KEY("a",my Str $ = "foo"); dd %h

[16:26] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «Hash[Int] %h = (my Int % = :a("foo"))␤»

[16:26] <Geth> ¦ roast: 2f4912528d | (Zoffix Znet)++ | S32-list/roll.t

[16:26] <Geth> ¦ roast: [v6.d REVIEW] On failure, dump actual numbers in Range.rand test

[16:26] <Geth> ¦ roast: 

[16:26] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/6cf152219

[16:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2f4912528d

[16:32] <Geth> ¦ roast: e922542b21 | (Zoffix Znet)++ | S26-documentation/09-configuration.t

[16:32] <Geth> ¦ roast: [v6.d REVIEW] Use appropriater test subs for pod config test

[16:32] <Geth> ¦ roast: 

[16:32] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/6f059e853

[16:32] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e922542b21

[16:37] *** Zoffix joined
[16:38] <Zoffix> I'm having trouble finding any explicit tests in roast that spec slipping of args into calls

[16:39] <Zoffix> There's a couple in S02-types/flattening.t but that seems to be it :S

[16:42] <Geth> ¦ roast: 15a73c7f18 | (Zoffix Znet)++ | 2 files

[16:42] <Geth> ¦ roast: [v6.d REVIEW] Fix bad "dir | say" test

[16:42] <Geth> ¦ roast: 

[16:42] <Geth> ¦ roast: The test specs behaviour that IMo should not be specced at all

[16:42] <Geth> ¦ roast: and that is that `say` without parens throws a P5ism error.

[16:42] <Geth> ¦ roast: 

[16:42] <Geth> ¦ roast: However, reading the OP on the ticket this test is meant to cover,

[16:42] <Geth> ¦ roast: we can clearly see the original crash was due to slipping of a Bool

[16:42] <Geth> ¦ roast: into argument lists and nothing to do with neither `say` nor `dir`.

[16:42] <Geth> ¦ roast: 

[16:43] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/1c1d01eaf

[16:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/15a73c7f18

[16:43] <Zoffix> Man, 2016-Zoffix was a real n00b to have written that test :)

[16:45] <zostay> No I haven't looked at it yet. I'm going on a date now. See you later.

[16:48] <Zoffix> ZofBot: are people with dates even allowed to be in this channel?

[16:48] <Zoffix> Filed S#451

[16:48] <synopsebot> S#451 [open]: https://github.com/perl6/roast/issues/451 [underspecced] Slipping into argument lists appears to be underspecced

[16:50] <MasterDuke> what do you have against Mediterranean fruit?

[16:50] <Zoffix> :)

[17:07] *** Ven`` joined
[17:15] *** AlexDani` joined
[17:19] *** Ven`` left
[17:20] *** AlexDaniel left
[17:32] *** skids left
[18:10] <TimToady> that depends on whether you've used MONKEY...

[18:11] <TimToady> (and, of course, whether there are nazis wandering around in your movie)

[18:22] <MasterDuke> last crusade is a great movie

[18:47] *** pmurias left
[19:05] *** Zoffix left
[19:33] *** Zoffix joined
[19:33] <Zoffix> The way RT#129160 was fixed is questionable IMO

[19:33] <synopsebot> RT#129160 [resolved]: https://rt.perl.org/Ticket/Display.html?id=129160 [RFC] enum key for optional positional does not work

[19:33] <Zoffix> m: enum A <b c d>; sub (b) {}(A)

[19:33] <camelia> rakudo-moar 5cf0afce0: ( no output )

[19:34] <Zoffix> if you specify a particular value of an enum, it now accepts a type object of the enum

[19:35] <Zoffix> m: enum A <b c d>; for b, A { say $_ ~~ Mu:D; say $_ ~~ Mu:U }

[19:35] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «True␤False␤False␤True␤»

[19:35] <Zoffix> the name of the enum is a typeobject and its value is an instance.

[19:36] <Zoffix> so OP behaviour in the ticket makes sense. It might be an LTA error, but other than that it looks fine to me

[19:37] <Zoffix> m: enum A ('a', b => 2, c => 2); sub (c \v) { say v eqv c }(A)

[19:37] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «False␤»

[19:39] <Zoffix> .ask TimToady RT#129160 quotes you as "please rakudobug that". Did you mean to rakudobug for better error or do we really want to accept a typeobject of the enum when a specific value was specified as a type constraint, which doesn't even `eqv` to each other: https://rt.perl.org/Ticket/Display.html?id=129160

[19:39] <yoleaux> Zoffix: I'll pass your message to TimToady.

[19:39] <synopsebot> RT#129160 [resolved]: https://rt.perl.org/Ticket/Display.html?id=129160 [RFC] enum key for optional positional does not work

[19:46] <Zoffix> .tell TimToady I filed that as R#2073 https://github.com/rakudo/rakudo/issues/2073

[19:46] <yoleaux> Zoffix: I'll pass your message to TimToady.

[19:46] <synopsebot> R#2073 [open]: https://github.com/rakudo/rakudo/issues/2073 [6.d review][@LARRY] Bad propspec: Enum's :D accepts Enum's :U

[19:49] <Zoffix> .oO(forbid enum's :Ds to be used as type constrants using the same syntax as regular types entirely)

[19:50] <Zoffix> There's almost no point in them being used that way. Other than to spec a variable to one type and then you'd be able to change its value in only one place, without changing the name of the variable

[19:58] <TimToady> I was referring to the fact that calling the function with no argument whatsover should treat the argument as optional, and shouldn't be even getting to any sort of type check, let alone an error message

[19:58] <yoleaux> 19:39Z <Zoffix> TimToady: RT#129160 quotes you as "please rakudobug that". Did you mean to rakudobug for better error or do we really want to accept a typeobject of the enum when a specific value was specified as a type constraint, which doesn't even `eqv` to each other: https://rt.perl.org/Ticket/Display.html?id=129160

[19:58] <yoleaux> 19:46Z <Zoffix> TimToady: I filed that as R#2073 https://github.com/rakudo/rakudo/issues/2073

[19:58] <synopsebot> RT#129160 [resolved]: https://rt.perl.org/Ticket/Display.html?id=129160 [RFC] enum key for optional positional does not work

[19:58] <synopsebot> R#2073 [open]: https://github.com/rakudo/rakudo/issues/2073 [6.d review][@LARRY] Bad propspec: Enum's :D accepts Enum's :U

[20:00] <TimToady> otoh, setting the parameter to the Foo type object is approproiate for an optional parameter

[20:02] <Zoffix> TimToady: but it's not a type object. It's basically an alias for a value

[20:02] <Zoffix> m: use nqp; dd nqp::isconcrete(Broken)

[20:02] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «1␤»

[20:03] <Zoffix> And you can't have an optional :D variable with other types either

[20:03] <Zoffix> m: sub (Int:D $x?) {}

[20:03] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «WARNINGS for <tmp>:␤Useless use of anonymous sub, did you forget to provide a name? (line 1)␤»

[20:03] <Zoffix> m: sub (Int:D $x?) {}()

[20:03] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «Parameter '$x' of routine '<anon>' must be an object instance of type 'Int', not a type object of type 'Int'.  Did you forget a '.new'?␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:03] <Zoffix> same sort of error

[20:04] <Zoffix> nqp::isconcrete tests if it's a typeobject or an instance (1 => instance). 

[20:04] <Zoffix> m: say Broken ~~ Mu:D

[20:04] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «True␤»

[20:04] <TimToady> well, :D is obviously not possible to enforce on an optional parameter

[20:04] <Zoffix> m: say Broken ~~ Mu:U

[20:04] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «False␤»

[20:04] <TimToady> so at least the error message is wrongish

[20:04] <Zoffix> But -> Broken $x? {}() should just stick Broken into $x?

[20:05] <Zoffix> m: enum A <b c>; -> b $x? {}()

[20:05] <camelia> rakudo-moar 5cf0afce0: ( no output )

[20:05] <Zoffix> m: enum A <b c>; -> b $x? {dd $x}()

[20:05] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «A␤»

[20:05] <Zoffix> m: enum A <b c>; -> b $x = b {dd $x}()

[20:05] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «A::b␤»

[20:06] <Zoffix> so the second to last case above is to change to the last case and get an A::b in it instead of A and ACCEPTS would be tossed

[20:06] <Zoffix> (ACCEPTS of enum's :D accepting its :U I mean, which is what makes it work right now)

[20:07] <Zoffix> cause many values fit Int:D and we can't pick one, but only Broken would fit into `Broken` type constraint, so we can stick it there

[20:08] <TimToady> I suspect any :D or constraint that implies :D should disallow ? and make people pick a default that works within the type invariant

[20:08] <Zoffix> OK

[20:09] <TimToady> maybe just the current-ish message with a (can you really use ? there) or some such

[20:09] <TimToady> otoh if we can detect the problem at compile time, we should probably carp sooner

[20:11] <TimToady> or maybe we can have a more general error of the Can-you-really-undefine-this? sort

[20:11] * TimToady a bit distracted at the moment, so ignore any non-sensical thing's he sez

[20:11] <Zoffix> :)

[20:11] <TimToady> *things

[20:11] *** MasterDuke_ joined
[20:12] <TimToady> (or types) :)

[20:12] *** MasterDuke left
[20:12] <MasterDuke_> is t/spec/S04-phasers/in-loop.t failing for anyone else?

[20:12] <MasterDuke_> `not ok 14 - POST should not see outer $_`

[20:13] *** MasterDuke_ is now known as MasterDuke

[20:14] <Zoffix> MasterDuke: yes, R#2071

[20:14] <synopsebot> R#2071 [open]: https://github.com/rakudo/rakudo/issues/2071 [⚠ blocker ⚠] Stresstest failures on v2018.06.179.g.9.dce.63318

[20:15] <MasterDuke> ah, ok, thanks

[20:23] *** Zoffix left
[20:26] <dogbert11> m: use Test; my @a = []; for ^10 { POST @a.push($_); 42 }; is @a, [42, 42, 42, 42, 42, 42, 42, 42, 42, 42], "POST should not see outer $_" # MasterDuke

[20:26] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <un…»

[20:26] <dogbert11> the failing test

[20:31] <dogbert11> bisect: my @a = []; for ^10 { POST @a.push($_); 42 }; say @a

[20:31] <bisectable6> dogbert11, Bisecting by output (old=2015.12 new=5cf0afc) because on both starting points the exit code is 0

[20:31] <bisectable6> dogbert11, bisect log: https://gist.github.com/1aa7752cf805e25aca6c117de84a4f27

[20:31] <bisectable6> dogbert11, (2017-09-04) https://github.com/rakudo/rakudo/commit/4b02b8aadcb47072bc87fb8be8069177b74cd59d

[20:32] <dogbert11> nah

[20:32] <dogbert11> bisect HEAD, 2018.06: my @a = []; for ^10 { POST @a.push($_); 42 }; say @a

[20:33] <dogbert11> sigh, I always seem to forget the syntax

[20:34] <dogbert11> bisect: 2018.06,HEAD my @a = []; for ^10 { POST @a.push($_); 42 }; say @a

[20:34] <bisectable6> dogbert11, Using old=2018.06 new=HEAD in an attempt to DWIM

[20:34] <bisectable6> dogbert11, Bisecting by output (old=2018.06 new=5cf0afc) because on both starting points the exit code is 0

[20:34] <bisectable6> dogbert11, bisect log: https://gist.github.com/ab73647663c2c0726d09a444c4f230ea

[20:34] <bisectable6> dogbert11, (2018-07-13) https://github.com/rakudo/rakudo/commit/359ac12d9753fc87d2a50dcb06bf387acd4f3de3

[20:36] <AlexDani`> c: 359ac12d9^,359ac12d9 my @a = []; for ^10 { POST @a.push($_); 42 }; say @a

[20:36] <committable6> AlexDani`, https://gist.github.com/fcbcb27be381cbff23cc5ea598790149

[20:36] *** AlexDani` is now known as AlexDaniel

[20:36] <AlexDaniel> MuMuMuMuMuMuMu

[20:38] <AlexDaniel> dogbert11: I guess it's time to plug some actual AI into it :)

[20:39] <dogbert11> a neural network :)

[20:39] <AlexDaniel> dogbert11: what is that issue btw?

[20:39] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/359ac12d9753fc87d2a50dcb06bf387acd4f3de3

[20:39] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2018.06-43-g668be5c...2018.06-50-gb1e80f0

[20:39] <AlexDaniel> Geth: ver https://github.com/perl6/nqp/commit/b1e80f0331432babf4c8fedd0284db3e6803fee0

[20:39] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-141-gcae4731...2018.06-203-g1b1edfe

[20:40] <dogbert11> AlexDaniel: "is t/spec/S04-phasers/in-loop.t failing for anyone else? "

[20:43] <AlexDaniel> dogbert11: left a comment for you: https://github.com/rakudo/rakudo/issues/2071#issuecomment-405048694

[20:43] <AlexDaniel> although it's not that helpful I guess

[20:44] <dogbert11> thx, I suspect that most/all of the other errors, when running a stresstest, is due to a different problem

[20:50] *** MasterDuke left
[20:52] *** MasterDuke joined
[20:53] <MasterDuke> .ask pmurias *@ doesn't seem to work in signatures with Truffle. e.g. `'sub foo(*@f) { say(nqp::elems(@f)) }; foo(1, 2, 3)'` dies with `java.lang.RuntimeException: Can only call elems on arrays or hashes` (with a yet-to-be-pushed commit to make elems support NQPList). where would i look to fix that?

[20:53] <yoleaux> MasterDuke: I'll pass your message to pmurias.

[20:54] *** benjikun2 joined
[20:58] *** benjikun left
[20:58] *** AlexDaniel left
[20:58] *** AlexDaniel joined
[21:11] <AlexDaniel> whew, well

[21:11] <AlexDaniel> I'm done with R#2047

[21:11] <synopsebot> R#2047 [closed]: https://github.com/rakudo/rakudo/issues/2047 [⚠ blocker ⚠] Rescalar merge & other toaster-related stuff

[21:22] <Geth> ¦ nqp/truffle: 9f21e57ee2 | (Daniel Green)++ | 2 files

[21:22] <Geth> ¦ nqp/truffle: [truffle] Correct the class these extend

[21:22] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/9f21e57ee2

[21:22] <Geth> ¦ nqp/truffle: 8914496e91 | (Daniel Green)++ | 2 files

[21:22] <Geth> ¦ nqp/truffle: [truffle] Implement elems + other ops for NQPList

[21:22] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/8914496e91

[21:22] <Geth> ¦ nqp/truffle: c0b74e7f5a | (Daniel Green)++ | 2 files

[21:22] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::join

[21:22] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/c0b74e7f5a

[21:27] *** benjikun2 left
[21:29] *** lizmat left
[21:32] *** lizmat joined
[22:01] *** robertle left
[22:26] *** stmuk_ joined
[22:27] *** fake_space_whale left
[22:28] *** stmuk left
[22:53] *** ufobat_ left
