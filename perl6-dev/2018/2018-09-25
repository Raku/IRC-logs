[00:07] *** Zoffix joined
[00:07] *** p6bannerbot sets mode: +v Zoffix

[00:07] <Zoffix> ZOFVM: Files=1310, Tests=153194, 150 wallclock secs (21.55 usr  3.11 sys + 3179.34 cusr 168.19 csys = 3372.19 CPU)

[00:07] <Zoffix> possibly the lowest ZOFVM time I've seen :)

[00:16] <Geth> ¦ nqp: 58011e6a9c | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[00:16] <Geth> ¦ nqp: [MoarVM Bump] Brings 2 commits

[00:16] <Geth> ¦ nqp: 

[00:16] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.09-83-gdb11d5f...2018.09-85-gad3a80c

[00:16] <Geth> ¦ nqp: ad3a80c Fix coredump with mul_I -> div_I ops

[00:16] <Geth> ¦ nqp: 08675c0 spesh comments: de-typed guards, lex_known, spesh plugins

[00:16] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/58011e6a9c

[00:16] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.09-83-gdb11d5f...2018.09-85-gad3a80c

[00:16] <Geth> ¦ rakudo: b96f60ff71 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[00:16] <Geth> ¦ rakudo: [NQP Bump] 58011e6 [MoarVM Bump] Brings 2 commits

[00:16] <Geth> ¦ rakudo: 

[00:16] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.09-2-gdec8bd7...2018.09-3-g58011e6

[00:16] <Geth> ¦ rakudo: 

[00:16] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.09-83-gdb11d5f...2018.09-85-gad3a80c

[00:16] <Geth> ¦ rakudo: ad3a80c Fix coredump with mul_I -> div_I ops

[00:16] <Geth> ¦ rakudo: 08675c0 spesh comments: de-typed guards, lex_known, spesh plugins

[00:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b96f60ff71

[00:16] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.09-2-gdec8bd7...2018.09-3-g58011e6

[00:17] *** ZofBot joined
[00:17] *** ChanServ sets mode: +v ZofBot

[00:17] *** fsadfdsgsd joined
[00:17] *** p6bannerbot sets mode: +v fsadfdsgsd

[00:17] <fsadfdsgsd> Zoffix: test

[00:17] *** ZofBot left
[00:20] <Geth> ¦ roast: 22c59edd71 | (Zoffix Znet)++ | MISC/bug-coverage.t

[00:20] <Geth> ¦ roast: Cover coredump in math

[00:20] <Geth> ¦ roast: 

[00:20] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/2280 R#2280

[00:20] <Geth> ¦ roast: MVM Fix: https://github.com/MoarVM/MoarVM/commit/ad3a80cb6e615b191b741a311616e00a4a2d3f12

[00:20] <synopsebot> R#2280 [open]: https://github.com/rakudo/rakudo/issues/2280 [math][regression] Core dump when dividing some Rats with denominator 2**30 by -2

[00:20] <Geth> ¦ roast: NQP Bump: https://github.com/perl6/nqp/commit/58011e6a9c

[00:20] <Geth> ¦ roast: Rak Bump: https://github.com/rakudo/rakudo/commit/b96f60ff71

[00:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/22c59edd71

[00:22] <MasterDuke> Zoffix++

[00:22] *** ZofBot joined
[00:22] *** ChanServ sets mode: +v ZofBot

[00:22] <fsadfdsgsd> Zoffix: test

[00:23] *** p6bannerbot sets mode: +v ZofBot

[00:23] *** ZofBot left
[00:23] *** ZofBot joined
[00:23] *** ChanServ sets mode: +v ZofBot

[00:23] <fsadfdsgsd> Zoffix: test

[00:24] <Zoffix> grr

[00:24] *** ZofBot left
[00:24] <Zoffix> (Twitter killed API the bot used to use... trying to fix my spy)

[00:25] *** plankers joined
[00:26] *** plankers left
[00:28] *** ZofBot joined
[00:28] *** ChanServ sets mode: +v ZofBot

[00:29] *** ZofBot left
[00:29] *** Zoffix is now known as ZofBot

[00:29] *** ZofBot is now known as ZofBot_

[00:29] *** ZofBot_ is now known as Zoffix

[00:29] *** ZofBot joined
[00:29] *** ChanServ sets mode: +v ZofBot

[00:29] *** p6bannerbot sets mode: +v ZofBot

[00:29] <fsadfdsgsd> Zoffix: test

[00:29] *** Zoffix left
[00:29] *** fsadfdsgsd left
[01:02] *** edgars_ joined
[01:02] *** edgars_ left
[01:19] *** fake_space_whale joined
[01:20] *** p6bannerbot sets mode: +v fake_space_whale

[01:45] *** kcnickerson11 joined
[01:53] *** kcnickerson11 left
[02:06] *** ZzZombo joined
[02:06] *** p6bannerbot sets mode: +v ZzZombo

[02:53] *** ZzZombo left
[02:54] *** Remy^19 joined
[02:56] *** gothos4 joined
[02:57] *** gothos4 left
[02:59] *** Remy^19 left
[03:04] *** ZzZombo joined
[03:04] *** p6bannerbot sets mode: +v ZzZombo

[03:32] *** epony joined
[03:32] *** p6bannerbot sets mode: +v epony

[04:01] *** stmuk joined
[04:02] *** p6bannerbot sets mode: +v stmuk

[04:38] *** stmuk_ joined
[04:38] *** p6bannerbot sets mode: +v stmuk_

[04:40] *** stmuk left
[05:27] *** mun_ joined
[05:31] *** mun_ left
[05:39] *** Ven` joined
[05:40] *** p6bannerbot sets mode: +v Ven`

[05:44] *** Ven` left
[05:57] *** fake_space_whale left
[06:10] *** fake_space_whale joined
[06:11] *** p6bannerbot sets mode: +v fake_space_whale

[06:15] *** xniega27 joined
[06:16] *** xniega27 left
[06:19] *** fake_space_whale left
[06:39] *** robertle joined
[06:40] *** p6bannerbot sets mode: +v robertle

[06:50] *** patrickb joined
[06:50] *** p6bannerbot sets mode: +v patrickb

[07:16] *** lizmat joined
[07:16] *** p6bannerbot sets mode: +v lizmat

[07:21] *** tardyp25 joined
[07:23] <lizmat> Files=1254, Tests=76139, 339 wallclock secs (15.58 usr  5.33 sys + 2363.97 cusr 255.54 csys = 2640.42 CPU)

[07:24] *** tardyp25 left
[07:37] *** dequeues joined
[07:38] *** p6bannerbot sets mode: +v dequeues

[07:39] *** dequeues left
[07:54] *** robertle left
[07:57] *** brrt joined
[07:58] *** p6bannerbot sets mode: +v brrt

[08:13] *** applegal29 joined
[08:14] *** applegal29 left
[08:15] *** Ven` joined
[08:16] *** p6bannerbot sets mode: +v Ven`

[08:17] *** lizmat left
[08:19] *** robertle joined
[08:19] *** p6bannerbot sets mode: +v robertle

[08:20] *** epony left
[08:29] <Geth> ¦ nqp/truffle: 8ca4e9fdd8 | (Paweł Murias)++ | 11 files

[08:29] <Geth> ¦ nqp/truffle: [truffle] Add a @Global annotation to remove boilerplate

[08:29] <Geth> ¦ nqp/truffle: 

[08:29] <Geth> ¦ nqp/truffle: Inject things from the GlobalContext into deserializers

[08:29] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/8ca4e9fdd8

[08:35] *** lizmat joined
[08:35] *** p6bannerbot sets mode: +v lizmat

[08:39] *** pmurias joined
[08:39] *** p6bannerbot sets mode: +v pmurias

[08:42] *** epony joined
[08:42] *** p6bannerbot sets mode: +v epony

[08:53] *** paradoxspiral20 joined
[08:57] *** paradoxspiral20 left
[09:16] *** xace joined
[09:17] *** xace left
[09:28] *** pmurias left
[09:32] *** pmurias joined
[09:32] *** p6bannerbot sets mode: +v pmurias

[09:50] *** brrt left
[09:56] *** ZzZombo left
[10:17] <|Tux|> Rakudo version 2018.09-31-gb96f60ff7 - MoarVM version 2018.09-85-gad3a80cb6

[10:17] <|Tux|> csv-test-xs-20      0.422 -  0.425

[10:17] <|Tux|> test-t --race       0.791 -  0.846

[10:17] <|Tux|> csv-ip5xs           0.936 -  0.966

[10:17] <|Tux|> test-t              1.832 -  1.906

[10:17] <|Tux|> csv-ip5xs-20        7.299 -  7.463

[10:17] <|Tux|> test                7.908 -  8.796

[10:17] <|Tux|> test-t-20 --race   10.923 - 11.953

[10:17] <|Tux|> csv-parser         21.104 - 21.480

[10:17] *** ethfci_ joined
[10:17] <|Tux|> test-t-20          31.568 - 32.424

[10:17] <|Tux|> 2018-09-24 15:53:41 test-t 1.997

[10:17] <|Tux|> 2018-09-20 11:10:24 test-t 1.972

[10:17] <|Tux|> 2018-09-18 11:16:48 test-t 1.971

[10:17] <|Tux|> 2018-09-25 12:05:14 test-t 1.906

[10:17] <|Tux|> 2018-09-25 12:08:28 test-t 1.832

[10:17] * |Tux| whistles

[10:17] <|Tux|> pompomtiepom

[10:18] *** ethfci_ left
[10:18] <tyil> noice

[10:19] * lizmat is disappointed...  I was betting on below 1.8

[10:19] <lizmat> still, not bad  :-)

[10:19] <lizmat> --race below .8 as well  :-)

[10:20] <lizmat> m: say 1971 / 1832

[10:20] <camelia> rakudo-moar b96f60ff7: OUTPUT: «1.075873␤»

[10:20] <|Tux|> tyil that is a nice combination of noise and nice. #januskop

[10:21] <tyil> |Tux|: its a certain way of pronouncing "nice", no intent to call the output noise :)

[10:22] *** wraeth14 joined
[10:25] <AlexDaniel> .

[10:25] <yoleaux> 06:08Z <jmerelo> AlexDaniel: I would be interested.

[10:26] *** wraeth14 left
[10:59] *** brrt joined
[11:00] *** p6bannerbot sets mode: +v brrt

[11:38] *** ZzZombo joined
[11:38] *** p6bannerbot sets mode: +v ZzZombo

[11:42] *** ZzZombo_ joined
[11:42] *** p6bannerbot sets mode: +v ZzZombo_

[11:43] *** pcdummy7 joined
[11:43] *** ZzZombo left
[11:43] *** ZzZombo_ is now known as ZzZombo

[11:49] *** pcdummy7 left
[11:51] *** davic26 joined
[11:52] *** p6bannerbot sets mode: +v davic26

[11:56] *** davic26 left
[12:03] *** Ven` left
[12:04] *** Ven` joined
[12:05] *** p6bannerbot sets mode: +v Ven`

[12:32] <jnthn> lizmat: I think the degree of benefit varies between machines; probably CPU cache size counts for a reasonable bit.

[12:32] <yoleaux> 21 Sep 2018 15:13Z <Zoffix> jnthn: FYI: I took a crack at sunk `start`. https://github.com/rakudo/rakudo/commit/6ee5f75778  spec: https://github.com/perl6/roast/commit/7a426fb4a3 docs: https://github.com/perl6/6.d-prep/commit/c4016d2d79  `sub { start die }(); sleep ⅓` doesn't die which sucks, but I don't know how to make that work. Also I didn't use any `uncaught_handler` mentioned in 6.d-prep. Dunno if it's good or bad.

[12:32] <yoleaux> 21 Sep 2018 18:25Z <Zoffix> jnthn: oops, gave wrong link to docs commit. It's https://github.com/perl6/doc/commit/df0b71d8d6

[12:32] <yoleaux> 21 Sep 2018 22:15Z <lizmat> jnthn: what are your feelings to adding a sub ord(str $s) { nqp::ord($s) } candidate ?  Looks like it makes it 1.8x as fast

[12:32] <yoleaux> 21 Sep 2018 22:16Z <lizmat> jnthn: also: I would like to add a "pos" parameter to ord(), so we can pass that on directly to nqp::ordat

[12:36] <jnthn> .tell Zoffix I was originally thinking of doing it by tweaking the call to Promise.start to pass some extra named arg that'd then cause it to set up the handler. About uncaught_handler, that's a property of a Scheduler; thus, we'd respect the scheduler-level handler that was set (if any).

[12:36] <yoleaux> jnthn: I'll pass your message to Zoffix.

[12:37] <jnthn> .tell Zoffix Or alternatively a `start-foo` method (never found a good "foo" word yet; "unsupervised" isn't quite it...)

[12:37] <yoleaux> jnthn: I'll pass your message to Zoffix.

[12:38] <jnthn> .tell Zoffix Anyway, we already look up the scheduler inside of .start so we have it handy in there, plus it's less QAST generation required :)

[12:38] <yoleaux> jnthn: I'll pass your message to Zoffix.

[12:39] <jnthn> m: say ord("")

[12:39] <camelia> rakudo-moar b96f60ff7: OUTPUT: «Nil␤»

[12:40] <jnthn> .tell lizmat How did you get the speedup, and are you sure it's not 'cus the empty string check is missing? :) I'm a bit concerned about ord with a position because what are the units?

[12:40] <yoleaux> jnthn: I'll pass your message to lizmat.

[12:48] <lizmat> .

[12:48] <yoleaux> 12:40Z <jnthn> lizmat: How did you get the speedup, and are you sure it's not 'cus the empty string check is missing? :) I'm a bit concerned about ord with a position because what are the units?

[12:48] <lizmat> jnthn: yeah that could well be: share your concern about units in 'ord'

[12:49] *** orionstein19 joined
[12:50] *** p6bannerbot sets mode: +v orionstein19

[12:52] *** orionstein19 left
[12:58] <brrt> jnthn: any idea how I can get myself into a state wherein MVMInstance->threads points to an out-of-date pointer

[13:01] <brrt> (that ought to be forwarded but isn't)

[13:08] *** sab110- joined
[13:09] *** sab110- left
[13:18] <jnthn> brrt: I'm pretty sure there's a mutex you better hold if you're dealing with it... :)

[13:18] <yoleaux> 12:46Z <Zoffix> jnthn: feel free to revert my start-in-sink work. It just a fun experiment. I won't shed tears seeing it gone

[13:26] <dogbert11> jnthn: have you forgotten to merge https://github.com/rakudo/rakudo/commit/5f55d762725df426c267641fcea38b6432b610a8 or am I just totally confused?

[13:27] <jnthn> lizmat: ord is a codepoint level operation

[13:28] <jnthn> lizmat: I think ordat takes a grapheme index; I'm not sure if this is generally very sane as a think to expose

[13:28] <jnthn> *thing

[13:28] <lizmat> yeah, I realized that after I asked the question  :-)

[13:29] *** iclon13 joined
[13:29] *** iclon13 left
[13:34] <Geth> ¦ nqp: 89c8de7987 | (Paweł Murias)++ | src/vm/js/nqp-runtime/runtime.js

[13:34] <Geth> ¦ nqp: [js] Accept modules in the libpath for relative loading

[13:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/89c8de7987

[13:34] <Geth> ¦ nqp: 5d11d7d1f5 | (Paweł Murias)++ | 2 files

[13:34] <Geth> ¦ nqp: [js] Bump package.json versions to what we released

[13:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5d11d7d1f5

[13:34] <Geth> ¦ nqp: 3794970971 | (Paweł Murias)++ | src/vm/js/nqp-runtime/runtime.js

[13:34] <Geth> ¦ nqp: [js] Make perl6-runtime loading work better in the browser

[13:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3794970971

[13:57] <brrt> hmm, thing is, I think the gc is holding that mutex...

[14:06] <jnthn> dogbert11: Didn't forget, just didn't get around to it

[14:13] <jnthn> oh, it looks like somebody else might have done it?

[14:16] <jnthn> Hmm, odd, it doesn't apply cleanly...

[14:20] <jnthn> Yeah, somebody seems to have folded that change into another change

[14:21] <jnthn> oh, not quite...hmm

[14:22] <jnthn> oh...I see

[14:25] * dogbert11 is confused :)

[14:26] <jnthn> So was I; so it turns out there was a refactor around that code that did something my change did :)

[14:26] <jnthn> Anyway, fixed/merged and verified it speeds up new a tad and spectesting now

[14:26] <dogbert11> coool

[14:31] <Geth> ¦ rakudo: 464a86b185 | (Jonathan Worthington)++ | src/Perl6/World.nqp

[14:31] <Geth> ¦ rakudo: Use a simple atkey in generated BUILDALL

[14:31] <Geth> ¦ rakudo: 

[14:31] <Geth> ¦ rakudo: We're already using the existskey op, so may as well go the whole hog

[14:31] <Geth> ¦ rakudo: and have simpler, faster code here.

[14:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/464a86b185

[14:43] <lizmat> argh: should have noticed that when I did that refactor

[14:43] <jnthn> :)

[14:44] <jnthn> Spesh is making quite a meal of .new calls...so hpoeful I can get some more speedups in this area.

[14:44] *** bs33817 joined
[14:45] * diakopter giggles at "quite a meal"

[14:45] *** p6bannerbot sets mode: +v bs33817

[14:46] <jnthn> Anyone who knows Perl 5 as well as Perl 6: are the two in https://gist.github.com/jnthn/67e390cbb7abde1c77bb2ef28684240c a reasonably fair comparison?

[14:47] *** bs33817 left
[14:47] <|Tux|> why not $total += …?

[14:48] <|Tux|> otherwise, I'd say yes, quite comparable

[14:49] <jnthn> Dunno, but it's the same in both :)

[14:49] <|Tux|> as a perl5 author, I would replace the for with a while to prevent range allocation in older perls

[14:50] <jnthn> Yeah, I'm going for "the thing the typical developer without knowledge of performance tricks might write" :)

[14:50] *** brrt left
[14:51] <jnthn> Anyway, reason I asked for a check is that I was expecting Rakudo to run this code quite a lot slower than Perl 5. Turns out it's 0.96 (Perl 5) vs 1.43 (Perl 6), which is a factor of about 1.4

[14:52] <|Tux|> which perl5?

[14:52] <jnthn> Whatever my systme as

[14:52] <jnthn> 5.22

[14:52] <jnthn> *system has

[14:52] <jnthn> That's a bit newer than I expected :)

[14:53] *** Zoffix joined
[14:53] *** p6bannerbot sets mode: +v Zoffix

[14:54] <Zoffix> jnthn: I doubt many Perl 5 programmers would write it like that tho. They'd use Moo/Mew/Mojo::Base/Class::Accessors (forget the exact name for the last one)

[14:54] <Zoffix> So I'd argue that bench gives Perl 5 too much leaway :)

[14:55] <jnthn> Zoffix: I've seen plenty like that in the wild. :-)

[14:56] <jnthn> But yes, point taken.

[14:56] <|Tux|> jnthn, I'd change «package MAIN;» to «package main;»

[14:57] <jnthn> haha...apparently I speak Perl 5 with a thick Perl 6 dialect by now :)

[14:57] <jnthn> Thanks :)

[14:57] <jnthn> Makes no significant difference to the time, though :)

[14:57] <Zoffix> jnthn: cpanm -vn Mojolicious; Then https://gist.github.com/zoffixznet/cef32c330d22befaf94303149f649a47

[14:57] <Zoffix> Is it slower/faster?

[14:57] <|Tux|> my perl5.28.0 is about 1.88 times faster than perl6

[14:58] <Zoffix> I guess I can measure myself on HEAD-ish commit

[14:58] <|Tux|> this was the perl6 checkout I used for the timings this morning

[14:59] <dogbert11> |Tux| then you missed out on an opt jnthn merged a few minutes ago

[14:59] <jnthn> Zoffix: Around 1.12s

[14:59] <jnthn> So, between the two

[14:59] <jnthn> Though easier for me to beat ("on my machine") :P

[14:59] <|Tux|> I'll pull

[15:00] <Zoffix> I get Perl 5 2.11x as fast than P6 with 2018.08-125-g38b198c and 5.26

[15:00] <Zoffix> (with Mojo::Base version of p5 script)

[15:00] *** argusbr joined
[15:01] <jnthn> Maybe 5.26 has some nice speedups :)

[15:01] *** argusbr left
[15:02] <dogbert11> Zoffix: and with 2018.09-32-g464a86b18 ?

[15:02] <jnthn> Zoffix: Ohh...I misread the date, that means you don't have the postrelease-opts merge in MoarVM, I guess

[15:02] <Zoffix> Right

[15:03] <jnthn> And that'll make a difference :)

[15:03] <Zoffix> dogbert11: don't have anything that recent and g2g too :)

[15:03] *** travis-ci joined
[15:03] *** p6bannerbot sets mode: +v travis-ci

[15:03] <travis-ci> Rakudo build failed. Jonathan Worthington 'Use a simple atkey in generated BUILDALL

[15:03] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/432983869 https://github.com/rakudo/rakudo/compare/b96f60ff71ab...464a86b185fa

[15:03] *** travis-ci left
[15:03] *** Zoffix left
[15:03] <jnthn> Anyway, thanks all :)

[15:03] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[15:03] * jnthn goes to figure out why spesh is doing LTA things on this code

[15:11] <|Tux|> Rakudo version 2018.09-32-g464a86b18 - MoarVM version 2018.09-85-gad3a80cb6

[15:11] <|Tux|> csv-test-xs-20      0.423 -  0.431

[15:11] <|Tux|> test-t --race       0.822 -  0.831

[15:11] <|Tux|> csv-ip5xs           0.945 -  0.963

[15:11] <|Tux|> test-t              1.770 -  1.824

[15:11] <|Tux|> test                7.672 -  8.718

[15:11] <|Tux|> csv-ip5xs-20        7.412 -  7.695

[15:11] <|Tux|> test-t-20 --race   11.835 - 12.080

[15:11] <|Tux|> csv-parser         20.819 - 21.081

[15:11] <|Tux|> test-t-20          30.061 - 31.339

[15:11] <diakopter> lizmat: u were right

[15:12] <jnthn> Hm, is 1.770 a new low again? :)

[15:12] <|Tux|> yep

[15:12] <diakopter> lizmat predicted 0.8

[15:13] <dogbert11> very impressive numbers

[15:14] <|Tux|> my perl5.28.0 is 1.72715 x faster than this perl6

[15:14] <|Tux|> on those two o.pl examples

[15:15] <|Tux|> my perl5.22.0 is 1.52656 x faster than this perl6

[15:16] <|Tux|> I ran all tests 4 times

[15:18] <|Tux|> my perl5.10.1 is 1.06242 x faster than this perl6 ← that should be an easy target then

[15:25] *** Zoffix joined
[15:25] *** p6bannerbot sets mode: +v Zoffix

[15:25] <Zoffix> With HEAD rakudo, I get P5 1.27x as fast as P6

[15:28] *** fake_space_whale joined
[15:29] *** p6bannerbot sets mode: +v fake_space_whale

[15:30] *** robertle left
[15:31] *** patrickb left
[15:32] <Geth> ¦ tap-harness6: 5009aed9bc | (Leon Timmermans)++ | META6.json

[15:32] <Geth> ¦ tap-harness6: Bump version to 0.0.4 for coloring

[15:32] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/5009aed9bc

[15:32] *** lizmat left
[15:35] <|Tux|> perl6            0.00       0.00      18.47       0.22  1.0000

[15:35] <|Tux|> perl5.8.8        0.00       0.00      18.95       0.02  1.0260

[15:35] <|Tux|> perl5.10.1       0.00       0.00      17.31       0.01  0.9372

[15:35] <|Tux|> perl5.12.2       0.00       0.00      14.98       0.00  0.8110

[15:35] <|Tux|> perl5.14.1       0.00       0.00      14.69       0.03  0.7953

[15:35] <|Tux|> perl5.16.2       0.00       0.01      16.15       0.02  0.8744

[15:35] <|Tux|> perl5.18.2       0.00       0.00      13.52       0.01  0.7320

[15:35] <|Tux|> perl5.20.0       0.00       0.00      13.56       0.01  0.7342

[15:35] <|Tux|> perl5.22.0       0.00       0.00      12.07       0.00  0.6535

[15:35] <|Tux|> perl5.24.1       0.00       0.00      10.66       0.01  0.5772

[15:35] <|Tux|> perl5.26.2       0.01       0.00       9.96       0.01  0.5393

[15:35] <|Tux|> perl5.28.0       0.00       0.00      10.57       0.01  0.5723

[15:36] <|Tux|> so, on o.pl perl6 is already faster than perl5.8.8 :)

[15:36] * |Tux| applies grains of salt

[15:36] <Zoffix> :D

[15:37] <Zoffix> <Marketing> Perl 6 is faster than Perl 5 at object creation!!!

[15:39] <jnthn> Well, give me a chance to make this more indisputably true :P

[15:39] <Zoffix> jnthn++

[15:40] <|Tux|> script is still there, I can run it again

[15:40] <jnthn> m: say 1.22 / 1.43

[15:40] <camelia> rakudo-moar 464a86b18: OUTPUT: «0.853147␤»

[15:40] <jnthn> Already found 15% off it, provided the change survives spectest etc.

[15:41] <Zoffix> \o/

[15:41] *** Zoffix left
[15:50] *** Ven` left
[15:55] * |Tux| commutes

[15:58] *** Ven` joined
[15:58] *** fake_space_whale left
[15:59] *** p6bannerbot sets mode: +v Ven`

[16:01] *** brrt joined
[16:02] *** p6bannerbot sets mode: +v brrt

[16:07] *** lizmat joined
[16:07] *** p6bannerbot sets mode: +v lizmat

[16:09] *** Ven` left
[16:34] *** robertle joined
[16:35] *** p6bannerbot sets mode: +v robertle

[16:57] *** flyback3 joined
[16:58] *** p6bannerbot sets mode: +v flyback3

[17:00] *** flyback3 left
[17:24] <jnthn> Darn...about 2% off equality. Though guess that means I'm handily beating the Mojo::Base one :P

[17:28] <Geth> ¦ rakudo: f989b26282 | (Jonathan Worthington)++ | src/vm/moar/ops/perl6_ops.c

[17:28] <Geth> ¦ rakudo: Don't use _DECONTED spesh fact

[17:28] <Geth> ¦ rakudo: 

[17:28] <Geth> ¦ rakudo: It's going away in an upcoming MoarVM change.

[17:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f989b26282

[17:28] <Geth> ¦ rakudo: 74ca05f284 | (Jonathan Worthington)++ | src/core/Mu.pm6

[17:28] <Geth> ¦ rakudo: Don't use nqp::usecapture in `new`

[17:28] <Geth> ¦ rakudo: 

[17:28] <Geth> ¦ rakudo: It prevents argument optimization, which in turn prevents lots of

[17:28] <Geth> ¦ rakudo: specializations that might take place in the normal path of `new`

[17:28] <Geth> ¦ rakudo: where `bless` is not overloaded (which will be nearly all the time).

[17:28] <Geth> ¦ rakudo: With this change, plus upcoming MoarVM changes, a specialized `new`

[17:28] <Geth> ¦ rakudo: will be possible to inline.

[17:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/74ca05f284

[17:28] <Geth> ¦ rakudo: 2fd8ffe56a | (Jonathan Worthington)++ | src/Perl6/World.nqp

[17:28] <Geth> ¦ rakudo: Avoid repeated hash access in BUILDALL

[17:28] <Geth> ¦ rakudo: 

[17:28] <Geth> ¦ rakudo: We never have an nqp::null at Perl 6 level, so it's reliable to use

[17:28] <Geth> ¦ rakudo: null testing here, getting us down to a single hash lookup.

[17:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2fd8ffe56a

[17:38] <Geth> ¦ nqp: fd17098d60 | (Bart Wiegmans)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[17:38] <Geth> ¦ nqp: Add 'fork' opcode for MoarVM

[17:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fd17098d60

[17:45] *** brrt left
[17:47] <pmurias> jnthn: comparing to Perl 5 OO frameworks doesn't seem fair ;)

[17:48] <pmurias> OTOH they are a baseline of super slow but still acceptable to someone ;)

[17:48] <jnthn> pmurias: My original benchmark uses no framework :)

[17:48] *** Zoffix joined
[17:48] *** p6bannerbot sets mode: +v Zoffix

[17:48] <Zoffix> pmurias: why? Who the hell writes manual attribute accesses these days?

[17:49] <jnthn> And at least for the example considered, the framework overhead wasn't much

[17:49] <jnthn> (The one Zoffix++ provided, I mean)

[17:49] <Zoffix> jnthn: confirming: P5 with M::B is now slower! And P6 version is now 1.04x as fast

[17:50] <jnthn> :)

[17:50] <Zoffix> jnthn++

[17:50] <jnthn> Still quite a bit more optimization to be had, but higher hanging fruit than today. :)

[17:51] <Zoffix> jnthn: BTW, people keep asking: why were special operators made for atomicint instead of compiler automagically converting, say, postfix:<++> on atomicint to an atomic operation?

[17:53] <dogbert11> huh, some of my bencharks see a massive improvement

[17:56] <jnthn> Zoffix: Because atomic operations should stand out in the code, and because in Perl 6 we give different semantics different operators (== vs eq for example) and an atomic increment seems sufficiently different.

[17:56] <Zoffix> Thanks.

[17:56] <jnthn> Zoffix: Oh...

[17:56] <jnthn> Zoffix: But you *can't* write an overload on native types also :P

[17:57] <Zoffix> yeah :)

[17:57] <jnthn> But still, even if we found some way to make that happen for the container case, I think the two previous reasons will still stand :)

[17:57] <Zoffix> Also, it'd be easy to make a mistake to assume something like *= would also be atomic, just because += is

[17:58] <jnthn> Atomic ops are usually used in high performance code; having things that cause a memory barrier stand out is also worthwhile.

[17:58] <jnthn> Dinner time; I'm done for today, so if anyone wants to bump, feel free :)

[17:58] <jnthn> o/

[17:58] <Zoffix> \o

[17:59] <Zoffix> I'll bump

[18:00] <dogbert11> jnthn+++ some of my programs are more than twice as fast!!!

[18:01] <dogbert11> it seems to have been one of the MoarVM changes which accomplished that

[18:02] <Zoffix> woo :)

[18:02] *** travis-ci joined
[18:02] *** p6bannerbot sets mode: +v travis-ci

[18:02] <travis-ci> Rakudo build passed. Jonathan Worthington 'Avoid repeated hash access in BUILDALL

[18:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/433066505 https://github.com/rakudo/rakudo/compare/464a86b185fa...2fd8ffe56ad1

[18:02] *** travis-ci left
[18:02] <Geth> ¦ rakudo/js: 7865d36c29 | (Paweł Murias)++ | src/vm/js/perl6-runtime/package.json

[18:02] <Geth> ¦ rakudo/js: [js] Update perl6-runtime version

[18:02] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/7865d36c29

[18:02] <[Coke]> yay

[18:10] <Geth> ¦ nqp: 3ac7f23e54 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[18:10] <Geth> ¦ nqp: [MoarVM Bump] Brings 5 commits

[18:10] <Geth> ¦ nqp: 

[18:10] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.09-85-gad3a80c...2018.09-90-gb5eb48c

[18:10] <Geth> ¦ nqp: b5eb48c [fork] Fix corruption in threads list

[18:10] <Geth> ¦ nqp: 8501e2e Fix off-by-one in multi cache spesh lookup

[18:10] <Geth> ¦ nqp: 5103e9f Simplify/improve optimization of decont

[18:10] <Geth> ¦ nqp: 196fa22 Optimize eqaddr into a constant if possible

[18:10] <Geth> ¦ nqp: 3893a6c Perform parameter logging at entry time

[18:10] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3ac7f23e54

[18:10] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.09-85-gad3a80c...2018.09-90-gb5eb48c

[18:10] <Geth> ¦ rakudo: ace87cb5d9 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[18:11] <Geth> ¦ rakudo: [NQP Bump] Brings 5 commits

[18:11] <Geth> ¦ rakudo: 

[18:11] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.09-3-g58011e6...2018.09-8-g3ac7f23

[18:11] <Geth> ¦ rakudo: 3ac7f23 [MoarVM Bump] Brings 5 commits

[18:11] <Geth> ¦ rakudo: fd17098 Add 'fork' opcode for MoarVM

[18:11] <Geth> ¦ rakudo: 3794970 [js] Make perl6-runtime loading work better in the browser

[18:11] <Geth> ¦ rakudo: 5d11d7d [js] Bump package.json versions to what we released

[18:11] <Geth> ¦ rakudo: <…commit message has 8 more lines…>

[18:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ace87cb5d9

[18:11] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.09-3-g58011e6...2018.09-8-g3ac7f23

[18:11] <Zoffix> ZOFVM: Files=1310, Tests=153195, 152 wallclock secs (21.78 usr  3.48 sys + 3228.48 cusr 170.28 csys = 3424.02 CPU)

[18:14] <Zoffix> Files=1310, Tests=153195, 148 wallclock secs (21.69 usr  3.32 sys + 3165.78 cusr 159.03 csys = 3349.82 CPU)

[18:14] <Zoffix> ZOFVM: Files=1310, Tests=153195, 148 wallclock secs (21.69 usr  3.32 sys + 3165.78 cusr 159.03 csys = 3349.82 CPU)

[18:17] <Zoffix> ZOFVM: Files=1310, Tests=153195, 149 wallclock secs (22.06 usr  3.30 sys + 3191.77 cusr 160.82 csys = 3377.95 CPU)

[18:17] *** Zoffix left
[18:19] * japhb can't wait to see the *next* test-t run.  :-)

[18:19] <japhb> jnthn++  # Excellent improvements today!

[18:21] * [Coke] tries to run pmurias' in-browser example and is foiled by his corporate security. bah

[18:21] *** AlexDaniel joined
[18:21] *** p6bannerbot sets mode: +v AlexDaniel

[18:24] <pmurias> [Coke]: anything resonable we should do avoid corporate security from cracking down on rakudo.js?

[18:26] <pmurias> [Coke]: or is npm install something the problematic part

[18:26] <[Coke]> it's the npm install, and then the cert handshakes.

[18:26] <[Coke]> I'm sure it's eventually fixable, but it means I'll test this out on the home machine first. :)

[18:27] <[Coke]> (totally not your fault/problem)

[18:30] <[Tux]> perl6           13.99       0.22  1.0000

[18:30] <[Tux]> perl5.8.8       18.98       0.02  1.3371

[18:30] <[Tux]> perl5.10.1      17.35       0.01  1.2217

[18:30] <[Tux]> perl5.12.2      15.19       0.01  1.0697

[18:30] <[Tux]> perl5.14.1      14.71       0.00  1.0352

[18:30] <[Tux]> perl5.16.2      16.70       0.01  1.1759

[18:30] <[Tux]> perl5.18.2      14.29       0.01  1.0063

[18:30] <[Tux]> perl5.20.0      14.13       0.02  0.9958

[18:30] <[Tux]> perl5.22.0      12.26       0.01  0.8635

[18:30] <[Tux]> perl5.24.1      10.69       0.02  0.7537

[18:30] <[Tux]> perl5.26.2      10.29       0.02  0.7255

[18:30] <[Tux]> perl5.28.0      10.69       0.02  0.7537

[18:31] <[Tux]> jnthn, proud?

[18:32] <lizmat> [Tux]: what benchmark is this ?

[18:33] *** AlexDaniel left
[18:33] *** AlexDaniel joined
[18:33] *** p6bannerbot sets mode: +v AlexDaniel

[18:33] <[Tux]> https://gist.github.com/jnthn/67e390cbb7abde1c77bb2ef28684240c

[18:34] <lizmat> ah, ok

[18:36] *** undersightable6 joined
[18:36] *** ChanServ sets mode: +v undersightable6

[18:36] *** reportable6 joined
[18:37] *** p6bannerbot sets mode: +v undersightable6

[18:37] *** p6bannerbot sets mode: +v reportable6

[18:38] <lizmat> [Tux]: if I run that p6 benchmark, I see 1.3 seconds wallclock, not 13 ?

[18:38] <lizmat> perhaps it should be 10_000_000 ?

[18:38] <lizmat> hmmm... that runs at 10.5 for me

[18:41] <lizmat> the perl 5 version at 10M runs in 11.3  for me (5.20.0)

[18:41] <[Tux]> https://tux.nl/Files/o-time.pl

[18:42] <[Tux]> 1.3 * 10 = 13, right? :)

[18:42] <lizmat> yeah, but the 10M runs in 10.5 / 11.3 for me

[18:43] <AlexDaniel> uplifting stuff found by dogbert11++

[18:43] <AlexDaniel> c: ace87cb5d9^,ace87cb5d9^,ace87cb5d9,ace87cb5d9 https://gist.githubusercontent.com/AlexDaniel/227c34f20d638d0b339947c744d05bc8/raw/5c4c35e03f4216e965ca9dcf519aa593570a2e8b/gistfile1.p6

[18:43] <committable6> AlexDaniel, Successfully fetched the code from the provided URL

[18:44] <committable6> AlexDaniel, ¦ace87cb5d9^: «3.3762329␤» ¦ace87cb5d9^: «3.4930701␤» ¦ace87cb: «0.7826624␤» ¦ace87cb: «0.8347201␤»

[18:44] <AlexDaniel> R#2210

[18:44] <synopsebot> R#2210 [open]: https://github.com/rakudo/rakudo/issues/2210 [perf][regression][severe] Series of perf regressions on 2018-07-09

[18:44] <AlexDaniel> that's this bump: https://github.com/rakudo/rakudo/commit/ace87cb5d99c4a80b6d093cd92c73d5b952f1093

[18:45] <AlexDaniel> so that's more than 4x as fast

[18:46] <AlexDaniel> although only 2.6x as fast when compared to rakudo 2018.06

[18:46] <dogbert11> so the perf regression is fixed and then some

[18:48] <lizmat> using native ints for the attributes and the total in jnthn's benchmark, makes it go from 10.5 to 8.0 for me

[18:48] <dogbert11> it will be very interesting to se [Tux] next run tomorrow

[18:48] <lizmat> and I think that is a totally valid thing to do

[18:48] <lizmat> which would make Perl 6 faster than *all* of the Perl 5 versions tested

[18:50] <Geth> ¦ rakudo: AlexDaniel unassigned from jnthn Issue Series of perf regressions on 2018-07-09 https://github.com/rakudo/rakudo/issues/2210

[18:52] <[Tux]> lizmat, I did that too (Int's), but that is unfair

[18:52] <lizmat> [Tux]: why ?

[18:53] <lizmat> Perl 5's IV's are basically native ints 

[18:54] <[Tux]> <jnthn> Yeah, I'm going for "the thing the typical developer without knowledge of performance tricks might write" :)

[18:54] <[Tux]> that's why

[18:54] <lizmat> ok, I guess we need a pragma  :-)

[18:55] <lizmat> that automatically changes my Int $a to my int $a  :-)

[19:00] <pyrimidine> lizmat: So, if I'm reading the above correctly, the new benchmarks are saying that (using [Tux]'s gist) that we're about even with perl 5.20?

[19:01] <lizmat> yes

[19:01] <pyrimidine> Um, wow, that's very impressive! jnthn++

[19:01] <lizmat> for that particular benchmark, yes

[19:01] <pyrimidine> true, but that's a great data point :)

[19:02] * pyrimidine slinks back off to the world of bioinformatics...

[19:15] <pmurias> is the nqp::if stuff in the setting faster then if blocks?

[19:18] <pmurias> I should think that over tommorow when I'm less tired

[19:18] <lizmat> pmurias: it might not be anymore  :-)

[19:19] <jnthn> lizmat: Don't think we need a pragma if we can keep narrowing the difference. :)

[19:19] <jnthn> Wow, seems I've improved more than I expected today :)

[19:22] <lizmat> yeah...  :-)

[19:22] <samcv> jnthn: i've been thinking of how to do the byte order mark. and i've come up with a workable i think solution that shouldn't slow things down in other cases

[19:22] <lizmat> looking good !

[19:22] <jnthn> samcv: Yeah, it's tricky...what did you come up with?

[19:23] <samcv> so i'm thinking we will add more data to moarvm's filehandle's so we can have a BOM y/n setting. and each write it will check if that variable is set. and only then will it check if the handle is seekable and if .tell is at 0

[19:23] <samcv> and in that case it'll write out a BOM before then writing the buffer it was originally asked to do

[19:23] <samcv> though it has the issue of what if you did .write and were explicitly writing binary data to a utf16 filehandle..

[19:23] <samcv> but otherwise works

[19:24] <[Tux]> if you change the yes/no indicator to an int, you kan keep the type of the bom

[19:24] <jnthn> samcv: Hm, but we carefully detangled encoding from I/O handles...I'm not keen to entangle that again

[19:24] <[Tux]> https://github.com/Tux/Text-CSV_XS/blob/master/doc/CSV_XS.md#bom

[19:25] <jnthn> samcv: What was the problem with writing a BOM at file open time, ooc? That seemed like a reasonable solution, provided there was a way to ask not to.

[19:25] *** AlexDaniel left
[19:25] *** AlexDaniel joined
[19:25] *** p6bannerbot sets mode: +v AlexDaniel

[19:25] <samcv> well. what if you open a file and then seek?

[19:26] <samcv> then it will write data without being asked to

[19:26] <samcv> though that could be doable i suppose, and just that be a caveat... but. perl 5 doesn't write the BOM until you write any data

[19:27] <jnthn> Can we not just stick self!write-bom() if $!bom-write-needed; into `write` and see if it has any measurable effects?

[19:28] <jnthn> I mean, after JIT it can't be *that* much more expensive than having the branch in the C code.

[19:29] <jnthn> walk, bbs

[19:29] <samcv> yeah i guess i can try that too

[19:29] <jnthn> (Agree with your point on seek, though)

[19:30] <samcv> i very much don't want a non-destructive operation to become destructive. as it could cause issues with people assuming an open won't destroy their file

[19:30] <samcv> ttysoon

[19:41] *** AlexDaniel left
[19:53] *** patrickb joined
[19:54] *** p6bannerbot sets mode: +v patrickb

[19:54] <pmurias> lizmat: using regular Perl 6 instead of the lovecraftian Lisp/Perl hybrid would be a huge readability/writability win

[19:55] <pmurias> lizmat: I'll investigate that more tommorow ;)

[19:55] <lizmat> pmurias: I'm really looking forward to the day that we can rip out all of the lovecraftian abominations I have put in

[19:56] <lizmat> but only if performance does not suffer (too much, anyway)

[20:16] *** gfldex joined
[20:17] *** p6bannerbot sets mode: +v gfldex

[20:20] <Geth> ¦ rakudo: dfd6450d74 | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[20:20] <Geth> ¦ rakudo: Make 1...10 and 10...1 about 75x as fast

[20:20] <Geth> ¦ rakudo: 

[20:20] <Geth> ¦ rakudo: for 1...10_000_000 and 10_000_000...1 respectively

[20:20] <Geth> ¦ rakudo: 

[20:20] <Geth> ¦ rakudo: Bypass the whole SEQUENCE mechanism by optimizing internally to 1..10

[20:20] <Geth> ¦ rakudo: and (1..10).reverse and profit from those optimizations.

[20:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dfd6450d74

[20:21] <lizmat> seemed like a nice day for YABO  (Yet Another Big Optimization)

[20:23] <patrickb> Hi everyone!

[20:24] *** kou10 joined
[20:24] *** POGtastic joined
[20:24] <lizmat> patrickb o/

[20:25] *** p6bannerbot sets mode: +v kou10

[20:25] *** kou10 left
[20:25] *** p6bannerbot sets mode: +v POGtastic

[20:26] *** POGtastic left
[20:28] <lizmat> jnthn timotimo : sub make now consists of: nqp::bindattr(nqp::decont(nqp::getlexcaller('$/')),Match,'$!made',made)

[20:29] <lizmat> I was thinking of having the static optimizer change that to nqp::bindattr($/,Match,'$!made',made)

[20:29] <lizmat> which would save a staticcall and a getlexcaller

[20:30] <lizmat> which would make parsing grammars with actions perhaps a bit faster, like R:I:JSON atm

[20:37] <Geth> ¦ rakudo: 5a974cb9ee | (Elizabeth Mattijsen)++ | 6 files

[20:37] <Geth> ¦ rakudo: Clean up some trailing whitespace

[20:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5a974cb9ee

[20:41] *** patrickb left
[20:48] *** robertle left
[20:52] <lizmat> jnthn timotimo nvm: hacking it manually into R:I:JSON doesn't show any gain

[20:53] <lizmat> if there is any, it disappears in the noise

[20:57] *** HappyLoaf29 joined
[20:58] *** p6bannerbot sets mode: +v HappyLoaf29

[21:01] *** HappyLoaf29 left
[21:04] * jnthn back

[21:04] <jnthn> Forgot I had homework to do :)

[21:05] <jnthn> samcv: tbh, I'd only considered doing it for :w, which I figure is for new files or replacing existing ones. :)

[21:05] <jnthn> samcv: I think the "fist write" is the way to go

[21:05] <jnthn> *first

[21:05] <jnthn> samcv: I'd do it in Rakudo's handle class and if it's too much slowdown we try and figure out how to solve that. Maybe it'll just be noise though among the I/O itself.

[21:09] <samcv> ok :)

[21:10] <samcv> also, if you do .write should it not do the BOM then. only on print/say?

[21:10] <jnthn> Oh, right. :)

[21:10] <jnthn> Yes, indeed.

[21:10] <samcv> also i don't think it checks position each write?

[21:11] <samcv> so in this case we'd have to check if it was utf16, and then after check check the tell i guess

[21:11] <samcv> but hopefully only one condition is needed for 99% of cases

[21:11] <jnthn> I'd just have an attribute if we should consider writing a bom on the next print/say

[21:11] <samcv> also is writing different endianess the right thing to do on different endianess machines

[21:12] <samcv> i am not completely sure

[21:12] <jnthn> We can clear that on seek I guess

[21:12] <jnthn> Hmm, dunno what precedent is there. My intuition would be to write native endian if not given more specific instructions.

[21:13] <jnthn> But I/O doesn't always follow intuition... :)

[21:13] <jnthn> At least, not mine :)

[21:13] <samcv> :)

[21:13] <samcv> i mean this seems to work alright how i have it. i *think* it works on big endian though i need to actually check that

[21:14] <samcv> if we "string".encode('utf16be/le') and it encodes to a DIFFERENT endianess than the host machine, you will get a buffer which has swapped endianess. so Buf.gist will show different numbers from what the unicode codepoints are

[21:14] <samcv> and then when we write to disk we don't have to do anything fancy

[21:16] <samcv> though it does result in different output in .gist on different endianess machines, but i think that's OK, unless others think differently

[21:22] <jnthn> I sometimes wonder if buf shoulda just always been bytes... :)

[21:35] *** MasterDuke joined
[21:35] *** p6bannerbot sets mode: +v MasterDuke

[21:36] *** MasterDuke left
[21:36] *** MasterDuke joined
[21:36] *** herbert.freenode.net sets mode: +v MasterDuke

[21:36] *** p6bannerbot sets mode: +v MasterDuke

[21:39] <MasterDuke> lizmat: while you're working on Ranges and such, any further thoughts on https://github.com/rakudo/rakudo/pull/2228 ? fwiw, i'm also in the middle of getting a patch to work that re-writes `for ^$a` into `while(...)` for Int (i.e., non-native) variables

[21:39] *** e4xit0 joined
[21:40] *** p6bannerbot sets mode: +v e4xit0

[21:43] *** e4xit0 left
[21:44] *** pmurias left
[21:47] *** dyc324 joined
[21:48] *** p6bannerbot sets mode: +v dyc324

[21:48] *** dyc324 left
[21:52] *** DarkUranium24 joined
[21:52] *** p6bannerbot sets mode: +v DarkUranium24

[21:53] *** DarkUranium24 left
[21:57] *** perlawhirl3 joined
[21:58] *** p6bannerbot sets mode: +v perlawhirl3

[21:58] *** perlawhirl3 left
[22:04] *** pmurias joined
[22:04] *** p6bannerbot sets mode: +v pmurias

[22:12] *** fakeful joined
[22:13] *** p6bannerbot sets mode: +v fakeful

[22:13] *** fakeful left
[22:14] *** clavi19 joined
[22:14] *** p6bannerbot sets mode: +v clavi19

[22:17] *** clavi19 left
[22:26] *** ilmostro14 joined
[22:27] *** p6bannerbot sets mode: +v ilmostro14

[22:28] *** engblom22 joined
[22:29] *** engblom22 left
[22:29] *** ilmostro14 left
[22:47] *** benoliver99927 joined
[22:47] *** bamtan22 joined
[22:48] *** p6bannerbot sets mode: +v benoliver99927

[22:48] *** p6bannerbot sets mode: +v bamtan22

[22:49] *** benoliver99927 left
[22:52] *** bamtan22 left
[22:53] *** gema27 joined
[22:53] *** gema27 left
[22:54] *** pmurias left
[23:09] <japhb> jnthn, samcv: FWIW, my idea was to skip the check per write, and just do the need-BOM check at handle open time -- in Perl 6 open() code, not MoarVM or NQP code -- and only write the BOM at open time on :w (open for write with truncate, which is an explicitly mutating operation) with encoding set to one of the two encodings that needs a BOM.

[23:10] <japhb> Any other case, including opening it binary and .write'ing an encoded buffer, if you want a BOM, you have to do it yourself.

[23:17] <samcv> that is attractive. though i still don't like having the file being altered by just an open operation

[23:18] *** saul10 joined
[23:19] *** p6bannerbot sets mode: +v saul10

[23:20] *** saul10 left
[23:22] <japhb> samcv: But open for truncate already mutates it at open time.

[23:27] *** sph22 joined
[23:27] *** p6bannerbot sets mode: +v sph22

[23:31] *** sph22 left
[23:34] *** pwcjr4 joined
[23:34] *** pwcjr4 left
[23:38] *** Gohla21 joined
[23:39] *** p6bannerbot sets mode: +v Gohla21

[23:41] *** Gohla21 left
[23:44] *** Guest64100 joined
[23:45] *** p6bannerbot sets mode: +v Guest64100

[23:48] *** Guest64100 left
[23:51] *** danlentz16 joined
[23:51] *** danlentz16 left
