[00:27] <lizmat> boarding&

[00:35] <Kaiepi> boarding&

[00:35] <Kaiepi> ?

[00:37] <MasterDuke> i believe she's flying home from orlando

[00:46] <Kaiepi> ah

[01:08] <Geth> ¦ 6.d-prep: 433f7d7d1f | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[01:08] <Geth> ¦ 6.d-prep: List remaining tasks of R#1523 as part of 6.d TODO

[01:08] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/433f7d7d1f

[01:08] <synopsebot> R#1523 [open]: https://github.com/rakudo/rakudo/issues/1523 [testneeded] .subst/.subst-mutate should always return a List when :g is specified

[02:07] <Geth> ¦ rakudo: 829ea8e37e | (Zoffix Znet)++ | src/core/Str.pm

[02:07] <Geth> ¦ rakudo: Make Str.match(:x) constistently return a non-Slip List

[02:07] <Geth> ¦ rakudo:

[02:07] <Geth> ¦ rakudo: All the other multi-match-object return variants (e.g. :g) return

[02:07] <Geth> ¦ rakudo: an empty List, but `:x` returns an `Empty`. Make that consistent.

[02:07] <Geth> ¦ rakudo:

[02:07] <Geth> ¦ rakudo: This patch makes `:x` return an empty List as well. Unsure if

[02:07] <Geth> ¦ rakudo: `Empty` is a better choice here—I just went for the consistent

[02:07] <Geth> ¦ rakudo: option with least impact.

[02:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/829ea8e37e

[02:10] <Geth> ¦ rakudo: e0d39321e1 | (Zoffix Znet)++ | src/core/Str.pm

[02:10] <Geth> ¦ rakudo: Fix return of multi-match options of Str.subst-mutate

[02:10] <Geth> ¦ rakudo:

[02:10] <Geth> ¦ rakudo: Currently only `:g` option returns a list of matches, however

[02:10] <Geth> ¦ rakudo: other combinations (when used with `.match`) also return multiple

[02:10] <Geth> ¦ rakudo: Match objects, such as `:x` or the `:nth`, `:th`, `:st`, `:nd`,

[02:10] <Geth> ¦ rakudo: and `:rd` options set to Iterable values.

[02:10] <Geth> ¦ rakudo:

[02:10] <Geth> ¦ rakudo: Fix by just returning what `.match` gives us.

[02:10] <Geth> ¦ rakudo:

[02:10] <Geth> ¦ rakudo: Also addreses R#1523 https://github.com/rakudo/rakudo/issues/1523

[02:10] <synopsebot> R#1523 [open]: https://github.com/rakudo/rakudo/issues/1523 [testneeded] .subst/.subst-mutate should always return a List when :g is specified

[02:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e0d39321e1

[02:11] <Geth> ¦ roast: c537763529 | (Zoffix Znet)++ | S05-substitution/subst.t

[02:11] <Geth> ¦ roast: Test multi-match .subst-mutate return

[02:11] <Geth> ¦ roast:

[02:11] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/e0d39321e1

[02:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c537763529

[02:13] <Geth> ¦ roast: 8c358cfc87 | (Zoffix Znet)++ | S05-substitution/subst.t

[02:13] <Geth> ¦ roast: Test non-matching .subst-mutate returns empty List…

[02:13] <Geth> ¦ roast:

[02:13] <Geth> ¦ roast: …when used with multi-match-producing options.

[02:13] <Geth> ¦ roast:

[02:13] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1523

[02:13] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/77794a28aa

[02:13] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/e0d39321e1

[02:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8c358cfc87

[02:16] <tbrowder> what’s the protocol here for adding tests that are offered for review. how long should i wait before merging them myself?

[03:20] <AlexDaniel> bisectable6: uptime

[03:20] <bisectable6> AlexDaniel, 8 hours, 55 minutes, and 1 second, 212.214844MiB maxrss. This is Rakudo version 2018.01-191-g555db42a3 built on MoarVM version 2018.01-89-ga01cdb449 implementing Perl 6.c.

[03:22] <AlexDaniel> dogbert11: 236→212 MiB in 5 hours, that looks surprisingly right. Yes, it's so much better now.

[03:24] <AlexDaniel> tbrowder: it depends on how obvious the change is

[03:25] <AlexDaniel> there's no protocol besides “patience is a virtue” :)

[03:26] <AlexDaniel> tbrowder: if you're talking about NQP#412, then according to CI the test failed on rakudo-jvm

[03:26] <synopsebot> NQP#412 [open]: https://github.com/perl6/nqp/pull/412 add a test for stderr in spawnprocasync

[03:27] <AlexDaniel> and therefore can't be merged

[03:27] <AlexDaniel> (yet)

[08:16] <AlexDaniel> bisectable6: uptime

[08:16] <bisectable6> AlexDaniel, 13 hours, 50 minutes, and 55 seconds, 212.214844MiB maxrss. This is Rakudo version 2018.01-191-g555db42a3 built on MoarVM version 2018.01-89-ga01cdb449 implementing Perl 6.c.

[08:16] <AlexDaniel> this is so awesome

[08:17] <AlexDaniel> still 6G of free RAM after 13 hours, swap is empty

[08:17] <AlexDaniel> OK that may not sound that impressive, but I've been struggling with this issue for… um… a few months I think?

[10:08] <jnthn> AlexDaniel`: ooh, so leak gone? :)

[10:34] <tbrowder> AlexDaniel: sounds like congrats are in order!

[10:48] <tbrowder> ok, the days of ignoring failing tests on the jvm are over, so i’ll try to get a jvm lab working...

[10:52] <DrForr> jnthn: Is .cro.yml meant to be a place to store application-level settings, or is it just for the `cro' binary?

[10:55] <DrForr> I.E. if I had something like a "supported list of languages" should that go in .cro.yml or am I better off reading it from some other file?

[10:56] <DrForr> If you haven't thought about it, that's fine too, I can always put it one place and move it elsewhere when the decision is made.

[10:57] <jnthn> DrForr: .cro.yml is meant to be a purely development-time artefact; when we start creating a Dockerfile in the project stubs, we'll actually put that into the .dockerignore

[10:57] <jnthn> (e.g. it's not intended to go off to production)

[10:58] <DrForr> Thanks. Were you intending something like config/{dev,stg,prod}.yml for this?

[10:59] <jnthn> I'd encourage taking configuration in via the environment

[10:59] <DrForr> (what Dancer does, for comparison)

[10:59] <jnthn> To the degree there's a suggested way, that's the Cro one

[10:59] <jnthn> You *can* put stuff to be injected into the environment: https://github.com/croservices/cro/blob/master/docs/cro-yml.md#environment

[11:00] <jnthn> uh, http://cro.services/docs/cro-yml#Environment is nicer :)

[11:00] <DrForr> I see there's an env: [] block there; I just wasn't sure of the intent.

[11:00] <jnthn> Again, the intention being that you put your development settings into .cro.yml

[11:00] <jnthn> And arrange something to put them there for production use

[11:01] <jnthn> For example, if deploying services with Kubernetes it has a whole bunch of stuff for putting config into the environment, from secrets stores for example

[11:01] <jnthn> But anything can set up env-vars, including a startup script :)

[11:04] <DrForr> What I see o that page is stuff that you don't necessarily want in a filesystem anyone can snoop.

[11:05] <jnthn> The k8s secret store? Yes, the secrets store is only for, well, secret stuff. There's other simpler mechanisms for non-secrets. :)

[11:05] <jnthn> If you do want a configuration file, that's fine, but I'd still suggest injecting the path to it using an env var

[11:06] <DrForr> Ah, the *path* to it, gotcha.

[11:06] <jnthn> btw, there's also a #cro, since this maybe isn't entirely on topic for #perl6-dev :)

[11:13] <Geth> ¦ roast: c4211535c6 | (Zoffix Znet)++ | S32-num/real-bridge.t

[11:13] <Geth> ¦ roast: Remove trailing whitespace

[11:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c4211535c6

[11:16] <DrForr> TT

[11:18] <Geth> ¦ roast: b5425a0a74 | (Zoffix Znet)++ | S32-num/real-bridge.t

[11:18] <Geth> ¦ roast: Cover .Bridge on core types

[11:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b5425a0a74

[11:43] <DrForr> jnthn: Over on #perl6 someone wants to sponsor a hackathon.

[12:12] <timotimo> .o( and since our env vars are utf8-c8, you can even inject binary data via env vars )

[12:22] <tbrowder> hm, compiling nqp for jvnis real slow, prob need to bump X* env var

[12:24] <tbrowder> anyone have suggestion for min memory settng for jvm compile? i’m currently at 500Mb

[12:24] <tbrowder> on a 4Gb host

[12:27] <tbrowder> i have JAVA_ARGS=-Xms512m -Xmx512m

[13:00] <dogbert11> tbrowder: try increasing -Xmx

[13:04] <tbrowder> dogbert11: i bumped all up to 3Gb and that helped a lot. thanks%

[13:06] <tbrowder> any hints on debugging tests that pass moar but fail jvm?

[13:22] <dogbert11> tbrowder: sorry, I don't I'm afraid

[14:27] <|Tux|> Rakudo version 2018.01-196-ge0d39321e - MoarVM version 2018.01-91-g1c79ca35d

[14:27] <|Tux|> csv-test-xs-20      0.456 -  0.469

[14:27] <|Tux|> csv-ip5xs           0.806 -  0.818

[14:27] <|Tux|> test-t --race       1.055 -  1.076

[14:27] <|Tux|> test-t              2.537 -  2.544

[14:27] <|Tux|> csv-ip5xs-20        7.520 -  7.959

[14:27] <|Tux|> test                9.135 -  9.395

[14:27] <|Tux|> csv-parser         11.293 - 11.712

[14:27] <|Tux|> test-t-20 --race   15.585 - 16.144

[14:27] <|Tux|> test-t-20          45.126 - 45.295

[14:39] <tbrowder> .ask Zoffix i am having jvm test failures (but not moarvm) when i test spawnprocasync to capture stderr. did you try it on yr jvm run_command or do you know if it should work without special handlng?

[14:39] <yoleaux> tbrowder: I'll pass your message to Zoffix.

[15:02] <Zoffix> .

[15:02] <yoleaux> 14:39Z <tbrowder> Zoffix: i am having jvm test failures (but not moarvm) when i test spawnprocasync to capture stderr. did you try it on yr jvm run_command or do you know if it should work without special handlng?

[15:03] <Zoffix> tbrowder: I don't know. I don't use JVM backend, but IIRC Proc::Async works on it, so I'd expect swanprocasync to work just fine as well.

[15:03] <tbrowder> i just noted that was js, not jvm, sorry

[15:04] <tbrowder> stdout works fine, prob is stderr

[15:04] <tbrowder> thanks

[15:11] <AlexDaniel> bisectable6: uptime

[15:11] <bisectable6> AlexDaniel, 20 hours, 46 minutes, and 14 seconds, 216.15625MiB maxrss. This is Rakudo version 2018.01-191-g555db42a3 built on MoarVM version 2018.01-89-ga01cdb449 implementing Perl 6.c.

[15:11] <AlexDaniel> dogbert11: ↑ I'm so happy :)

[15:16] <Zoffix> haha

[15:16] <Zoffix> bisectable6: uptime

[15:16] <bisectable6> Zoffix, 12 seconds, 191.972656MiB maxrss. This is Rakudo version 2018.01-191-g555db42a3 built on MoarVM version 2018.01-89-ga01cdb449 implementing Perl 6.c.

[15:17] <Zoffix> I was trying to give it some work to do, to see if memory would grow, but it crashed on the second attempt to bisect `bisectable6: $*PERL.compiler.version > 2017.12 and die `

[15:17] <dogbert11> Zoffix: already bored with Fallout 4?

[15:19] <Zoffix> dogbert11: no, I'm currently away from the gaming box :)

[15:19] <dogbert11> AlexDaniel: as for the SEGV's, you could try running your bots with the JIT disabled, at least for the time being, until the bug is fixed

[15:27] <AlexDaniel`> Zoffix: yeah, segv-ed I think :(

[16:49] <Geth> ¦ nqp: 1c211d3bd8 | (Tom Browder)++ (committed using GitHub Web editor) | docs/ops.markdown

[16:49] <Geth> ¦ nqp: remove description of 'shell' and 'spawn' subs which are no longer available in nqp

[16:49] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1c211d3bd8

[17:07] <travis-ci> NQP build failed. Tom Browder 'remove description of 'shell' and 'spawn' subs which are no longer available in nqp'

[17:07] <travis-ci> https://travis-ci.org/perl6/nqp/builds/341524453 https://github.com/perl6/nqp/compare/70d1359b1b53...1c211d3bd848

[18:18] <Geth> ¦ rakudo: 1dc1f038f1 | (Zoffix Znet)++ | 3 files

[18:18] <Geth> ¦ rakudo: Fix .Numeric/.Real on :U numerics (and .Real on :D allomorphs)

[18:18] <Geth> ¦ rakudo:

[18:18] <Geth> ¦ rakudo: We go through Mu.Real/.Numeric which default to Int type.

[18:18] <Geth> ¦ rakudo:

[18:18] <Geth> ¦ rakudo: Fix by implementing methods that return types that match the

[18:18] <Geth> ¦ rakudo: Numeric the methods are called on (or the numeric portion of the

[18:18] <Geth> ¦ rakudo: allomorphs, for allomorphs).

[18:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1dc1f038f1

[18:19] <Geth> ¦ roast: f2d745f1a8 | (Zoffix Znet)++ | S02-literals/allomorphic.t

[18:19] <Geth> ¦ roast: Spec .Numeric.Real on :U numerics (and :D allomorphs)

[18:19] <Geth> ¦ roast:

[18:19] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/1dc1f038f1

[18:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f2d745f1a8

[18:39] <pmurias> the semaphore test seems to be failing on travis

[18:39] <Geth> ¦ nqp/master: 4 commits pushed by pmurias++

[18:39] <Geth> ¦ nqp/master: 8a9f73b999 | [js] Stop monkey patching String, wrap nqp strings in objects

[18:39] <Geth> ¦ nqp/master: ce918d5041 | Test getting native attributes with nqp::getattr

[18:39] <Geth> ¦ nqp/master: 7ba7de1bcc | Test iterating over lexpads

[18:39] <Geth> ¦ nqp/master: 2e1ce4f2bb | Test nqp::iterate with lowlevel lists

[18:39] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/1c211d3bd8...2e1ce4f2bb

[18:43] <geekosaur> that'll make timotimo feel a bit better, maybe. (tried to speed up testing by using a second core, triggered the semaphore failure, backed off in confusion)

[18:56] <travis-ci> NQP build failed. pmurias 'Test nqp::iterate with lowlevel lists'

[18:56] <travis-ci> https://travis-ci.org/perl6/nqp/builds/341568814 https://github.com/perl6/nqp/compare/1c211d3bd848...2e1ce4f2bbd3

[19:05] <travis-ci> Rakudo build failed. Zoffix Znet 'Fix .Numeric/.Real on :U numerics (and .Real on :D allomorphs)

[19:05] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/341560593 https://github.com/rakudo/rakudo/compare/e0d39321e127...1dc1f038f1df

[19:05] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/02-rakudo/repl.t test file failed.

[19:12] <AlexDaniel> ev

[19:12] <AlexDaniel> evalable6: uptime

[19:12] <evalable6> AlexDaniel, 4 hours, 18 minutes, and 12 seconds, 240.285156MiB maxrss. This is Rakudo version 2018.01-191-g555db42a3 built on MoarVM version 2018.01-89-ga01cdb449 implementing Perl 6.c.

[19:12] <AlexDaniel> squashable6: uptime

[19:12] <squashable6> AlexDaniel, 19 hours, 13 minutes, and 30 seconds, 229.796875MiB maxrss. This is Rakudo version 2018.01-191-g555db42a3 built on MoarVM version 2018.01-89-ga01cdb449 implementing Perl 6.c.

[19:13] <AlexDaniel> jnthn: yes! Definitely

[19:13] <AlexDaniel> jnthn++

[19:14] <AlexDaniel> well, next problem is this issue with segvs… but maybe disabling the JIT is a reasonable workaround for now

[19:35] <Geth> ¦ nqp: tbrowder++ created pull request #413: add a test for stderr in spawnprocasync

[19:35] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/413

[20:22] <lucasb> looks like https://github.com/perl6/nqp/commit/1c211d3bd8 removed the wrong heading. removed the file/directory one instead of the external commands

[20:29] <Geth> ¦ nqp: b52d2000d0 | (Tom Browder)++ (committed using GitHub Web editor) | t/nqp/059-nqpop.t

[20:29] <Geth> ¦ nqp: correct no. of tests

[20:29] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b52d2000d0

[20:36] <tbrowder> lucasb: i made the mistake and will  fix it, ok?

[20:38] <lucasb> ok :)

[20:44] <Geth> ¦ nqp: 6b12bab53e | (Tom Browder)++ (committed using GitHub Web editor) | docs/ops.markdown

[20:44] <Geth> ¦ nqp: restore correct comment for the opcode group

[20:44] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6b12bab53e

[20:48] <Geth> ¦ nqp: tbrowder++ created pull request #414: add a test for stderr in spawnprocasync

[20:48] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/414

[20:48] <travis-ci> NQP build passed. Tom Browder 'correct no. of tests'

[20:48] <travis-ci> https://travis-ci.org/perl6/nqp/builds/341610848 https://github.com/perl6/nqp/compare/2e1ce4f2bbd3...b52d2000d0e9

[20:49] <tbrowder> lucasb

[20:50] <tbrowder> lucasb: i think that commit 6b12bab53e fixed it

[20:51] <lucasb> tbrowder: thanks!

[20:52] <tbrowder> sorry 'bout that!

[20:52] <lucasb> no problem

[21:00] <travis-ci> NQP build passed. Tom Browder 'restore correct comment for the opcode group'

[21:00] <travis-ci> https://travis-ci.org/perl6/nqp/builds/341616554 https://github.com/perl6/nqp/compare/b52d2000d0e9...6b12bab53ee1

[21:58] <lucasb> I added a new comment to https://github.com/perl6/6.d-prep/issues/4

[21:58] <lucasb> I tried to make some points. Let me know if none of them makes sense :) I just don't know how to argue...

[22:04] <AlexDaniel> m: my str $x; dd $x

[22:04] <camelia> rakudo-moar 1dc1f038f: OUTPUT: «""␤»

[22:06] <AlexDaniel> m: my num @x; dd @x[5]

[22:06] <camelia> rakudo-moar 1dc1f038f: OUTPUT: «0e0␤»

[22:06] <AlexDaniel> hehehe

[23:31] <Geth> ¦ rakudo: e930e2537f | (Timo Paulssen)++ | 2 files

[23:31] <Geth> ¦ rakudo: teach X::Syntax::Number::LiteralType about natives

[23:31] <Geth> ¦ rakudo:

[23:31] <Geth> ¦ rakudo: until now `my num $foo = 1` was a somewhat cryptic

[23:31] <Geth> ¦ rakudo: low-level run-time error ("cannot unbox"). Now it's

[23:31] <Geth> ¦ rakudo: a compile-time error of type

[23:31] <Geth> ¦ rakudo: X::Syntax::Number::LiteralType just like

[23:31] <Geth> ¦ rakudo: `my Num $foo = 1` has already been.

[23:31] <Geth> ¦ rakudo:

[23:31] <Geth> ¦ rakudo: If changing this from a runtime to a compile-time

[23:31] <Geth> ¦ rakudo: error is seen as a problem, I can insert a run-time

[23:31] <Geth> ¦ rakudo: throw of this specific exception instead before release.

[23:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e930e2537f

[23:32] <timotimo> AlexDaniel: you may have an opinion about this

[23:34] <AlexDaniel> timotimo: I think this is totally OK, as long as it doesn't break any errata tests

[23:34] <AlexDaniel> if it does I can think again :)

[23:36] <timotimo> i haven't run spectest yet, and also not the errata suite

[23:43] <Geth> ¦ rakudo: 63a1d25ac6 | (Timo Paulssen)++ | src/Perl6/Optimizer.nqp

[23:43] <Geth> ¦ rakudo: missed the case where Rat was assigned to int

[23:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/63a1d25ac6

[23:44] <Geth> ¦ roast: d3a3957ab1 | (Timo Paulssen)++ | S02-types/type.t

[23:44] <Geth> ¦ roast: test X::Syntax::Number::LiteralType for natives

[23:44] <Geth> ¦ roast:

[23:44] <Geth> ¦ roast: used to be a low-level run-time exception on rakudo.

[23:44] <Geth> ¦ roast: now it's a compile-time object exception.

[23:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d3a3957ab1

[23:48] <timotimo> hm, is there a make target for the errata tests? if not, there should be ...

[23:54] <timotimo> regular spectest succeeds at least

[23:55] <timotimo> running 6.c-errata now
