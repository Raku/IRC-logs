[00:14] *** lgtaube left
[00:15] *** lgtaube joined
[00:15] *** p6bannerbot sets mode: +v lgtaube

[01:29] *** lizmat left
[02:37] *** Ven`` left
[03:37] *** Ven`` joined
[03:38] *** p6bannerbot sets mode: +v Ven``

[05:07] <Geth> ¦ rakudo: 32d480aba0 | (Nick Logan)++ (committed using GitHub Web editor) | 7 files

[05:07] <Geth> ¦ rakudo: Add $?DISTRIBUTION (#2574)

[05:07] <Geth> ¦ rakudo: 

[05:07] <Geth> ¦ rakudo: Add a variable to give module authors a way to access *any* file in their distribution as well as the distribution meta data.

[05:07] <Geth> ¦ rakudo: 

[05:07] <Geth> ¦ rakudo: It might seem like `$?FILE` can provide everything required, but some `CompUnit::Repository` may not have an e.g. on-disk representation of the files listed in the meta data -- this allows IO access using the file names as listed in the meta data regardless of the `CompUnit::Repository` that loaded it.

[05:07] <Geth> ¦ rakudo: 

[05:07] <Geth> ¦ rakudo: Some uses:

[05:08] <Geth> ¦ rakudo: 

[05:08] <Geth> ¦ rakudo: * `say "Version: " ~ $?DISTRIBUTION.meta<ver>`

[05:08] <Geth> ¦ rakudo: * `$?DISTRIBUTION.content('lib/Any/Module/In/Distribution.pm6').open.slurp(:close)`

[05:08] <Geth> ¦ rakudo: * `$?DISTRIBUTION.content('resources/libraries/p5helper').open.slurp(:close)` ( similar to `%?RESOURCES<libraries/p5helper>.IO.open.slurp(:close)` )

[05:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/32d480aba0

[05:08] <Geth> ¦ roast: facfda41ea | (Nick Logan)++ | 7 files

[05:08] <Geth> ¦ roast: Add tests for $?DISTRIBUTION

[05:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/facfda41ea

[05:08] *** Ven`` left
[07:22] *** dct joined
[07:22] *** p6bannerbot sets mode: +v dct

[09:32] *** lizmat joined
[09:32] *** p6bannerbot sets mode: +v lizmat

[09:32] <lizmat> Files=1262, Tests=87957, 368 wallclock secs (19.82 usr  5.90 sys + 2631.95 cusr 220.48 csys = 2878.15 CPU)

[09:32] <yoleaux> 09:27Z <jmerelo> lizmat: is there some info about the next Perl Toolchain Summit? Because I'd like to propose a few topics and/or attend...

[09:32] <yoleaux> 09:29Z <jmerelo> lizmat: (and maybe propose a venue)

[09:33] <lizmat> .tell jmerelo the channel to ask this question on is #pts on irc.perl.org

[09:33] <yoleaux> lizmat: I'll pass your message to jmerelo.

[10:26] <[Tux]> Rakudo version 2018.12-84-g32d480aba - MoarVM version 2018.12-12-g77ac5ef61

[10:26] <[Tux]> csv-test-xs-20      0.433 -  0.441

[10:26] <[Tux]> test-t --race       0.844 -  0.861

[10:26] <[Tux]> csv-ip5xs           0.959 -  0.965

[10:26] <[Tux]> test-t              1.841 -  1.993

[10:26] <[Tux]> test                6.882 -  8.170

[10:26] <[Tux]> csv-ip5xs-20        7.133 -  7.356

[10:27] <[Tux]> test-t-20 --race   10.836 - 11.155

[10:27] <[Tux]> csv-parser         24.459 - 25.233

[10:27] <[Tux]> test-t-20          32.326 - 32.793

[10:31] *** lizmat_ joined
[10:31] *** p6bannerbot sets mode: +v lizmat_

[10:35] *** lizmat left
[10:39] *** lizmat_ is now known as lizmat

[10:57] *** dogbert2_ joined
[10:57] *** p6bannerbot sets mode: +v dogbert2_

[11:14] <AlexDaniel> robertle++ # uploading rakudo package on 31st :)

[11:23] <robertle> I totally don't understand these build failures, it is almost as if the boxes on which I can build are different from the auto-builders...

[11:29] *** Ven`` joined
[11:30] *** p6bannerbot sets mode: +v Ven``

[11:45] *** lizmat_ joined
[11:45] *** p6bannerbot sets mode: +v lizmat_

[11:46] <AlexDaniel> robertle: also it feels like we didn't have these issues previously?

[11:47] <AlexDaniel> I wonder if it's something that changed in rakudo or if it's the machines themselves that are now for some reason different?

[11:48] *** lizmat left
[12:44] *** lizmat_ is now known as lizmat

[12:48] <lizmat> m: dd Array.shape

[12:48] <camelia> rakudo-moar 32d480aba: OUTPUT: «(*,)␤»

[12:48] <lizmat> should that work on a type object??   ^^^

[13:20] <lizmat> m: role A { multi method a() { 42 }; multi method a() { 42 } }; dd A.a

[13:20] <camelia> rakudo-moar 32d480aba: OUTPUT: «42␤»

[13:20] <lizmat> m: role A { multi method a() { 42 }; multi method a(--> Int:D) { 42 } }; dd A.a

[13:20] <camelia> rakudo-moar 32d480aba: OUTPUT: «Ambiguous call to 'a(A: )'; these signatures all match:␤:(A: *%_)␤:(A: *%_ --> Int:D)␤  in block <unit> at <tmp> line 1␤␤»

[13:21] <lizmat> feels to me both should be giving the ambiguous call error ?

[13:21] <nine> robertle: spesh bugs can be sensitive to timing since spesh runs in a separate thread

[13:23] <timotimo> you can use MVM_SPESH_BLOCKING to prevent timing sensitivity from being a problem

[13:23] <timotimo> instead of shoving work off to another thread and going on with its life, it'll wait for the other thread to finish that particular piece of work

[13:32] <timotimo> i like using it when i run benchmarks

[13:44] <Geth> ¦ rakudo: 26c0e620a8 | (Elizabeth Mattijsen)++ | 5 files

[13:44] <Geth> ¦ rakudo: Provide some return types to Arrays

[13:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/26c0e620a8

[15:00] *** Ven` joined
[15:01] *** p6bannerbot sets mode: +v Ven`

[15:23] <Geth> ¦ rakudo: d248d47e79 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm6

[15:23] <Geth> ¦ rakudo: Introduce R:I:ImplementationDetail role

[15:23] <Geth> ¦ rakudo: 

[15:23] <Geth> ¦ rakudo: Classes marked with this role can not be instantiated with .new, and will

[15:23] <Geth> ¦ rakudo: stringify to a message indicating that they're a Rakudo specific implementation

[15:23] <Geth> ¦ rakudo: detail.

[15:23] <Geth> ¦ rakudo: 

[15:23] <Geth> ¦ rakudo: Inspired by R#2575

[15:23] <synopsebot> R#2575 [closed]: https://github.com/rakudo/rakudo/issues/2575 How foreign is ForeignCode?

[15:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d248d47e79

[15:23] <Geth> ¦ rakudo: 588037f065 | (Elizabeth Mattijsen)++ | src/core/ForeignCode.pm6

[15:23] <Geth> ¦ rakudo: Mark Foreigncode class as Rakudo implementation detail

[15:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/588037f065

[15:23] <Geth> ¦ rakudo: 467394b8e3 | (Elizabeth Mattijsen)++ | src/core/Dateish.pm6

[15:23] <Geth> ¦ rakudo: Make IS-LEAP-YEAR calculation ab out 2x as fast

[15:23] <Geth> ¦ rakudo: 

[15:23] <Geth> ¦ rakudo: By using a native int for year: I doubt we can reliably state whether a year

[15:23] <Geth> ¦ rakudo: is a leap year by the time we run out of int precision.

[15:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/467394b8e3

[15:29] <Geth> ¦ nqp/master: 4 commits pushed by (Paweł Murias)++

[15:29] <Geth> ¦ nqp/master: 628e82707e | [js] Add nqp::const::BINARY_ENDIAN_NATIVE

[15:29] <Geth> ¦ nqp/master: e11d06807c | [js] Add missing await

[15:29] <Geth> ¦ nqp/master: 5589c31203 | [js] Stub nqp::gethostname in the browser

[15:29] <Geth> ¦ nqp/master: 82bcd0b2c9 | [js] Make binding and getting attributes throw an exception

[15:29] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/db66f21ac111...82bcd0b2c960

[15:29] <Geth> ¦ nqp: 13b31bfa9a | (Paweł Murias)++ | t/nqp/058-attrs.t

[15:29] <Geth> ¦ nqp: Test that using attributes on type objects throws exceptions

[15:29] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/13b31bfa9a

[15:35] <Geth> ¦ nqp: e8b82fdb10 | (Paweł Murias)++ | docs/ops.markdown

[15:35] <Geth> ¦ nqp: Document BINARY_ENDIAN_NATIVE flag

[15:35] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e8b82fdb10

[16:13] <Geth> ¦ rakudo: 0368fe95be | (Elizabeth Mattijsen)++ | src/core/Str.pm6

[16:13] <Geth> ¦ rakudo: infix:<~> can also return junctions

[16:13] <Geth> ¦ rakudo: 

[16:13] <Geth> ¦ rakudo: Fixes R#2568

[16:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0368fe95be

[16:13] <synopsebot> R#2568 [open]: https://github.com/rakudo/rakudo/issues/2568 Junction concat infix:<~> should be Cool

[16:24] * lizmat wonders where infix:<~> is actually testes

[16:24] <lizmat> *tested

[16:24] <lizmat> " ~ " occurs in 236 test files

[16:25] *** Ven` left
[16:35] <moritz> S15-nfg/concat-stable.t S15-nfg/concatenation.t

[16:35] <moritz> S03-operators/misc.t # the ASCII case

[16:50] <lizmat> moritz++

[16:58] <Geth> ¦ roast: dbd19e9b39 | (Elizabeth Mattijsen)++ | S03-operators/misc.t

[16:58] <Geth> ¦ roast: tests added with R#2568

[16:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dbd19e9b39

[16:58] <synopsebot> R#2568 [open]: https://github.com/rakudo/rakudo/issues/2568 [testneeded] Junction concat infix:<~> should be Cool

[17:09] <Geth> ¦ roast: 4cbeca811f | (Elizabeth Mattijsen)++ | S01-perl-5-integration/isms.t

[17:09] <Geth> ¦ roast: Add tests for R#2556

[17:09] <Geth> ¦ roast: 

[17:09] <Geth> ¦ roast: Is also the first "use isms" test.  There'll be more to follow, but this

[17:09] <Geth> ¦ roast: will allow R#2556 to be closed.

[17:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4cbeca811f

[17:09] <synopsebot> R#2556 [open]: https://github.com/rakudo/rakudo/issues/2556 [testneeded] Should =~ be a warning rather than an error?

[17:10] <Geth> ¦ rakudo: c9fe9463e6 | (Elizabeth Mattijsen)++ | t/spectest.data

[17:10] <Geth> ¦ rakudo: Run "use isms" tests

[17:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c9fe9463e6

[17:36] <AlexDaniel> lizmat: what about https://github.com/rakudo/rakudo/issues/1356#issuecomment-420647471 ?

[17:36] <AlexDaniel> I find “isms” really weird :)

[17:40] *** Ven`` left
[18:26] *** Ven`` joined
[18:27] *** p6bannerbot sets mode: +v Ven``

[18:38] <lizmat> AlexDaniel: well, it's been documented since June, and it's been in 2 R* releases

[18:38] <lizmat> I'm a bit reluctant to change it (again) now, as I want to use it in my P5 modules...

[18:39] <lizmat> which I now more or less can, because it is in 2 R* releases

[18:39] <AlexDaniel> lizmat: yeah but maybe we can have an alias?

[18:41] <lizmat> I'm neutral on that, perhaps jnthn has a better opinion on that

[18:41] <lizmat> just to be clear: I wanted something that would allow some p5isms to be valid if needed, e.g. in conjunction with P5 modules

[18:42] <lizmat> hence I called it "use p5isms" originally, which Zoffix then suggested we'd generalize

[18:43] <lizmat> the $a=~$b case is different in that it is, in and of itself, valid Perl 6 code

[19:19] *** Ven`` left
[19:31] <lizmat> is it me, or is -I. currently broken ?

[19:32] <lizmat> given a Foo.pm6 in the current dir, "perl6 -I. -e 'use Foo'" fails for me with:

[19:32] <lizmat> ===SORRY!===

[19:32] <lizmat> Cannot resolve caller new(IO::Path:U: Any:U, :CWD(Str)); none of these signatures match:

[19:33] <lizmat> if the module doesn't exist, it fails properly

[19:34] <lizmat> if it is in another directory, it all works ok: seems to be limited to using "-I.", at least for me

[20:05] <lizmat> ugexe pointed out I probably had a META6.json file in the dir of -I , and he was right

[21:06] <Geth> ¦ rakudo: 04dd52f9fc | (Elizabeth Mattijsen)++ | src/core/Exception.pm6

[21:06] <Geth> ¦ rakudo: Add "addendum" to X::Method::NotFound

[21:06] <Geth> ¦ rakudo: 

[21:06] <Geth> ¦ rakudo: So we can give better error messages for specific cases.

[21:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/04dd52f9fc

[21:06] <Geth> ¦ rakudo: b6c8f5ed19 | (Elizabeth Mattijsen)++ | src/core/Pair.pm6

[21:06] <Geth> ¦ rakudo: Add specific info for Foo ~~ (10 => Bar)

[21:06] <Geth> ¦ rakudo: 

[21:06] <Geth> ¦ rakudo: In response to R#2512

[21:06] <synopsebot> R#2512 [open]: https://github.com/rakudo/rakudo/issues/2512 Smartmatch with Any and Pair tries to call a non-existent method on Any

[21:06] <Geth> ¦ rakudo: 

[21:06] <Geth> ¦ rakudo:     $ perl6 -e 'Any ~~ (10 => "ten")'

[21:06] <Geth> ¦ rakudo:     No such method '10' for invocant of type 'Any'

[21:06] <Geth> ¦ rakudo:     Did you try to smartmatch against a Pair specifically?  If so,

[21:06] <Geth> ¦ rakudo:     then the key of the Pair should be a valid method name, not '10'

[21:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b6c8f5ed19

[21:22] <Geth> ¦ rakudo: a6d8858e41 | (Elizabeth Mattijsen)++ | src/core/Exception.pm6

[21:22] <Geth> ¦ rakudo: Make X::TypeCheck::Assignment not barf on strange $got values

[21:22] <Geth> ¦ rakudo: 

[21:22] <Geth> ¦ rakudo: Makes the error mentioned in R#2503 slightly less LTA.

[21:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a6d8858e41

[21:22] <synopsebot> R#2503 [open]: https://github.com/rakudo/rakudo/issues/2503 Can't assign Nil to an attribute from a role

[21:59] <gfldex> m: my int @a = 1,2,3; say @a[1].WHAT;

[21:59] <camelia> rakudo-moar a6d8858e4: OUTPUT: «(Int)␤»

[21:59] <gfldex> is there a way to provide int literals?

[22:00] <gfldex> or am I literally stuck with Int? :->

[22:04] <lizmat> gfldex: what do you mean with int literals?  what is your desired output ?

[22:06] <gfldex> lizmat: I would like to get (int) on @[1].WHAT.

[22:06] <lizmat> aahhh... ok

[22:08] <lizmat> that would sorta require for .WHAT to become a real method, which it isn't

[22:11] <lizmat> I guess the basic issue is that even if a routine has --> int in its signature

[22:11] <lizmat> what comes out of the sub, is hllized:

[22:11] <lizmat> m: sub a(--> int) { my int $a = 42 }; use nqp; dd nqp::objprimspec(a)   # should be 1

[22:11] <camelia> rakudo-moar a6d8858e4: OUTPUT: «0␤»

[22:12] <lizmat> afk for some r+r for the last 48 minutes of the year&

