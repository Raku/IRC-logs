[00:01] *** MasterDuke left
[00:11] <pmurias> timotimo: re non serializable variable, I don't think there is a good way to do that withough adding special magic to the sixmodel in the backends

[00:12] <pmurias> timotimo: if I remember correctly I think state variables don't get serialized so you could abuse that

[00:12] <timotimo> nah, that won't work easily for what i want

[00:13] <timotimo> but yeah, the compose protocol for p6opaque could get a key for "attribute name that isn't supposed to participate in serialization"

[00:13] <timotimo> is probably enough for my purpose to have only a single one, even

[00:23] <timotimo> https://wakelift.de/2018/11/10/rakudo-perl-6-performance-analysis-tooling-progress-report/ - lol i blogged a second time!

[00:26] *** MasterDuke joined
[00:26] *** p6bannerbot sets mode: +v MasterDuke

[00:26] *** MasterDuke left
[00:26] *** MasterDuke joined
[00:26] *** herbert.freenode.net sets mode: +v MasterDuke

[00:26] *** p6bannerbot sets mode: +v MasterDuke

[00:28] *** j3nnn1 left
[00:40] *** pmurias left
[00:50] *** SyrupThinker left
[01:35] *** MasterDuke left
[01:57] *** MasterDuke joined
[01:57] *** p6bannerbot sets mode: +v MasterDuke

[02:04] *** MasterDuke left
[02:04] *** MasterDuke joined
[02:04] *** herbert.freenode.net sets mode: +v MasterDuke

[02:04] *** p6bannerbot sets mode: +v MasterDuke

[02:14] *** delon joined
[02:14] *** p6bannerbot sets mode: +v delon

[03:02] *** entonian joined
[03:03] *** p6bannerbot sets mode: +v entonian

[03:04] *** entonian left
[05:38] *** delon left
[07:57] <lizmat> Files=1255, Tests=76374, 345 wallclock secs (15.97 usr  5.40 sys + 2437.26 cusr 226.39 csys = 2685.02 CPU)

[08:42] *** AlexDaniel left
[10:27] *** AlexDaniel joined
[10:27] *** p6bannerbot sets mode: +v AlexDaniel

[10:43] *** pmurias joined
[10:43] *** p6bannerbot sets mode: +v pmurias

[10:59] *** pmurias left
[11:00] *** pmurias joined
[11:00] *** p6bannerbot sets mode: +v pmurias

[13:21] <Geth> ¦ rakudo: c50cf82afc | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[13:21] <Geth> ¦ rakudo: An initial stab at handling <<op=>> faster

[13:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c50cf82afc

[13:34] *** AlexDaniel left
[14:05] <b2gills> timotimo: It was difficult trying to figure out which color was supposed to be associated with which verb (promoted,kept,freed) in the combined graphs. Perhaps adding a colored "\c[full block]" would help.

[14:44] *** AlexDaniel joined
[14:44] *** p6bannerbot sets mode: +v AlexDaniel

[14:48] *** MasterDuke left
[15:13] <SqrtNegInf> m: my @A = [[1], [2, 3]]; my @B = @A »*» 0; @B[0][0] = 42;

[15:13] <camelia> rakudo-moar c50cf82af: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[15:14] <SqrtNegInf> m: my @A = [[1], [2, 3]]; my @B = @A; @B[0][0] = 42;

[15:14] <camelia> rakudo-moar c50cf82af: ( no output )

[15:19] <AlexDaniel> m: sqrt -∞

[15:19] <camelia> rakudo-moar c50cf82af: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "sqrt -∞" in expression "sqrt -∞" in sink context (line 1)␤»

[15:19] <AlexDaniel> m: say sqrt -∞

[15:19] <camelia> rakudo-moar c50cf82af: OUTPUT: «NaN␤»

[15:22] <SqrtNegInf> m: say (-∞+0i)**½

[15:22] <camelia> rakudo-moar c50cf82af: OUTPUT: «Inf+Inf\i␤»

[15:23] <SqrtNegInf> That aside, a recently created bug with hypers, open an issue about it?

[15:32] <lizmat> SqrtNegInf: please do

[15:33] <lizmat> I'm probably to blame

[15:36] <lizmat> bisectable6: my @A = [[1], [2, 3]]; my @b = @A »*» 0; @b[0][0] = 42;

[15:36] <bisectable6> lizmat, Bisecting by exit code (old=2015.12 new=c50cf82). Old exit code: 0

[15:37] <bisectable6> lizmat, bisect log: https://gist.github.com/34f90a4531e87fac2332ecb9b3a4370f

[15:37] <bisectable6> lizmat, There are 6 candidates for the first “new” revision. See the log for more details

[15:38] <lizmat> yeah, definitely my fault

[15:40] <SqrtNegInf> Opened issue, https://github.com/rakudo/rakudo/issues/2480

[15:48] <lizmat> SqrtNegInf: working on it

[15:49] <Geth> ¦ rakudo: lizmat self-assigned Array built with hyper operations becomes immutable https://github.com/rakudo/rakudo/issues/2480

[16:07] <lizmat> bisectable6: my Int @A = [1,2,3]; my @b := @A >>+>> 0; @b[0] = "foo"; say @b

[16:07] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=c50cf82) because on both starting points the exit code is 1

[16:07] <lizmat> I guess that error has been there all along...

[16:07] <bisectable6> lizmat, bisect log: https://gist.github.com/71908c67bb9e9b4f5aac0ffaa4980aa3

[16:07] <bisectable6> lizmat, (2016-02-18) https://github.com/rakudo/rakudo/commit/9983c2c8434ed81c532a5706996f284283b48d0a

[16:08] <lizmat> that's a weird bisect

[16:08] <AlexDaniel> c: 9983c2c8^,9983c2c8 my Int @A = [1,2,3]; my @b := @A >>+>> 0; @b[0] = "foo"; say @b

[16:08] <committable6> AlexDaniel, https://gist.github.com/fecf57dfb541c071ca56287361fb2cb5

[16:09] <AlexDaniel> c: old=2018.10 my Int @A = [1,2,3]; my @b := @A >>+>> 0; @b[0] = "foo"; say @b

[16:09] <committable6> AlexDaniel, ENV variable old is not supported

[16:09] <AlexDaniel> bisect: old=2018.10 my Int @A = [1,2,3]; my @b := @A >>+>> 0; @b[0] = "foo"; say @b

[16:09] <bisectable6> AlexDaniel, Bisecting by output (old=2018.10 new=c50cf82) because on both starting points the exit code is 1

[16:09] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/3597e375b042d737da6beccf4c4c62cc

[16:09] <bisectable6> AlexDaniel, There are 6 candidates for the first “new” revision. See the log for more details

[16:10] <benjikun> What's weird about this?

[16:11] <benjikun> the immutable value one?

[16:11] <lizmat> yeah, that commit doesn't even come near any meta ops

[16:11] <benjikun> hmmm

[16:11] <AlexDaniel> generally it will find the first change

[16:12] <AlexDaniel> “Bisecting by output” meaning any change to the error message is “new”

[16:12] <AlexDaniel> you can see here what changed exactly: https://gist.github.com/fecf57dfb541c071ca56287361fb2cb5

[16:13] <AlexDaniel> so the bisect result is correct, but yeah, that is becoming a problem somewhat. 2015.12 is too old to bisect blindly

[16:13] <lizmat> yeah... I guess

[16:13] <AlexDaniel> I'm hoping to reset it to 2018.11 if that has v6.d

[16:13] <AlexDaniel> by default I mean

[16:13] <AlexDaniel> I mean, change it

[16:13] <SqrtNegInf> That bug showed up just yesterday in a program that's run without errors for over two years (in daily smoke-testing)

[16:13] <lizmat> anyways, I think I found a solution for the original R#2480

[16:13] <synopsebot> R#2480 [open]: https://github.com/rakudo/rakudo/issues/2480 [⚠ blocker ⚠] Array built with hyper operations becomes immutable

[16:14] <lizmat> SqrtNegInf: well, there was no spectest for it, so creating a roast PR would be greatly appreciated

[16:15] <SqrtNegInf> Will do

[16:15] <lizmat> SqrtNegInf++

[16:16] <AlexDaniel> fwiw to bisect without surprises: first run `6c: code here` to see what is going on across releases, then bisect with `bisect: old=…,new=… code` with starting points of your interest, then double check with `c: commit^,commit code`

[16:17] <AlexDaniel> arguably the last step should be done automatically…

[16:18] <benjikun> SqrtNegInf: that chemical structure regular expressions thing you made is cool

[16:23] <SqrtNegInf> Upside: done for $work, so paid for doing interesting stuff.  Downside: done in Fortran, because Chemistry.

[16:24] <Geth> ¦ rakudo: 1a2b39dc1a | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[16:24] <Geth> ¦ rakudo: Make sure we containerize arrays in @a <<+>> 0

[16:24] <Geth> ¦ rakudo: 

[16:24] <Geth> ¦ rakudo: Arrays were created, but without containers.  Fixes R#2840.  This **also**

[16:24] <Geth> ¦ rakudo: fixes the case where the original array was typed: the type *and* its

[16:24] <Geth> ¦ rakudo: associated descriptor are cloned.

[16:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1a2b39dc1a

[16:25] <lizmat> SqrtNegInf: ^^^  if you could also add tests for:

[16:25] <lizmat> m: my Int @a = ^10; my @b := @a <<+>> 0; @b[0] = "foo"; dd @b

[16:25] <camelia> rakudo-moar c50cf82af: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[16:25] <benjikun> your job must be cool

[16:29] <SqrtNegInf> lizmat: Got it

[16:31] <SqrtNegInf> benjikun: Among nerdly types, perhaps.  But it also gives me a super-power, making Eyes Glaze Over in milliseconds.

[16:33] <benjikun> well, your work certainly seems respectable from my eyes :)

[16:51] <Geth> ¦ rakudo: 307a98bdb6 | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[16:51] <Geth> ¦ rakudo: We should always .STORE unless it's a List itself

[16:51] <Geth> ¦ rakudo: 

[16:51] <Geth> ¦ rakudo: Simplify the check for that

[16:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/307a98bdb6

[16:52] <lizmat> AlexDaniel: should or shouldn't I remove the blocker label on R#2840 ?

[16:54] <AlexDaniel> lizmat: if you tested it manually and you think that it is fixed, then yes, you can remove the label

[16:54] <lizmat> AlexDaniel: done

[16:54] <AlexDaniel> lizmat++

[17:01] *** MasterDuke joined
[17:01] *** p6bannerbot sets mode: +v MasterDuke

[17:01] *** MasterDuke left
[17:01] *** MasterDuke joined
[17:01] *** herbert.freenode.net sets mode: +v MasterDuke

[17:01] *** p6bannerbot sets mode: +v MasterDuke

[17:22] <japhb> SqrtNegInf: What is the chemistry thing that benjikun is referring to?

[17:26] *** travis-ci joined
[17:26] *** p6bannerbot sets mode: +v travis-ci

[17:26] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make sure we containerize arrays in @a <<+>> 0

[17:26] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/453308574 https://github.com/rakudo/rakudo/compare/c50cf82afc67...1a2b39dc1a9b

[17:26] *** travis-ci left
[17:26] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[17:40] <benjikun> japhb: https://github.com/SqrtNegInf/SMARTS here it is

[17:41] <Geth> ¦ rakudo: jmaslak++ created pull request #2481: Remove redundant smartmatch usage in IO::Socket::Async

[17:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2481

[18:01] *** ExtraCrispy left
[18:31] <[Tux]> Rakudo version 2018.10-103-gc50cf82af - MoarVM version 2018.10-74-g2fdde4a21

[18:31] <[Tux]> csv-test-xs-20      0.429 -  0.439

[18:31] <[Tux]> test-t --race       0.855 -  0.933

[18:31] <[Tux]> csv-ip5xs           0.930 -  0.947

[18:31] <[Tux]> test-t              1.895 -  1.956

[18:31] <[Tux]> csv-ip5xs-20        7.326 -  7.358

[18:31] <[Tux]> test                7.729 -  8.733

[18:31] <[Tux]> test-t-20 --race   12.379 - 13.564

[18:31] <[Tux]> csv-parser         24.746 - 25.457

[18:31] <[Tux]> test-t-20          33.086 - 33.514

[20:06] *** delon joined
[20:07] *** p6bannerbot sets mode: +v delon

[20:17] <dogbert11> m: say 10 <<*<< (1 .. 4)

[20:17] <camelia> rakudo-moar 307a98bdb: OUTPUT: «Cannot modify an immutable Range (1..4)␤  in block <unit> at <tmp> line 1␤␤»

[20:19] <timotimo> yeah, that's not right

[20:19] <timotimo> good catch

[20:19] <dogbert11> I ran spectest :)

[20:20] <timotimo> d'oh

[20:22] <dogbert11> was spectesting the stuff nine++ just fixed

[21:35] <Geth> ¦ rakudo: 5522ee90a0 | (Joelle Maslak)++ | src/core/IO/Socket/Async.pm6

[21:35] <Geth> ¦ rakudo: Remove redundant smartmatch usage in IO::Socket::Async

[21:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5522ee90a0

[21:35] <Geth> ¦ rakudo: 76d2fde4ba | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/core/IO/Socket/Async.pm6

[21:35] <Geth> ¦ rakudo: Merge pull request #2481 from jmaslak/Async-Port-Constraint-Optimize

[21:35] <Geth> ¦ rakudo: 

[21:35] <Geth> ¦ rakudo: Remove redundant smartmatch usage in IO::Socket::Async

[21:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/76d2fde4ba

[21:54] <Geth> ¦ rakudo: 843118ea34 | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[21:54] <Geth> ¦ rakudo: Revert "We should always .STORE unless it's a List itself"

[21:54] <Geth> ¦ rakudo: 

[21:54] <Geth> ¦ rakudo: This reverts commit 307a98bdb6d824c893127bdb8d64b4b9577f8835.

[21:54] <Geth> ¦ rakudo: 

[21:54] <Geth> ¦ rakudo: Turns out Ranges are also Positional.  So until we have a candidate that

[21:54] <Geth> ¦ rakudo: handles Ranges, we should revert to the original condition.  dogbert++

[21:54] <Geth> ¦ rakudo: for spotting.

[21:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/843118ea34

[21:54] <lizmat> dogbert11 timotimo ^^^

[21:55] <lizmat> afk again&

[22:25] <dogbert11> lizmat++

[22:58] *** pmurias left
[23:34] *** travis-ci joined
[23:34] *** p6bannerbot sets mode: +v travis-ci

[23:34] <travis-ci> Rakudo build failed. Jonathan Worthington 'Merge pull request #2481 from jmaslak/Async-Port-Constraint-Optimize

[23:34] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/453388148 https://github.com/rakudo/rakudo/compare/307a98bdb6d8...76d2fde4ba53

[23:34] *** travis-ci left
[23:34] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

