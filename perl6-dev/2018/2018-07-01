[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 2 ballots submitted by 2 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 10! Congratulations to samcv, nine! You win a roll of duck tape!

[00:02] *** BenGoldberg joined
[00:06] *** stmuk joined
[00:08] *** stmuk_ left
[01:14] *** perlpilot joined
[02:07] *** perlpilot left
[02:43] *** microfed left
[03:33] *** p6lert left
[03:33] *** Undercover left
[03:33] *** dalek joined
[03:33] *** ChanServ sets mode: +v dalek

[03:33] *** Geth joined
[03:33] *** ChanServ sets mode: +v Geth

[03:33] *** p6lert joined
[03:33] *** synopsebot joined
[03:33] *** ChanServ sets mode: +v synopsebot

[03:33] *** SourceBaby left
[03:34] *** SourceBaby joined
[03:34] *** ChanServ sets mode: +v SourceBaby

[03:34] *** Undercover joined
[03:34] *** ChanServ sets mode: +v Undercover

[04:50] *** Zoffix joined
[04:50] <Zoffix> Is this the right MoarVM build command when built with auto-genned MoarVM? perl Configure.pl --prefix=../../install/bin & gmake & gmake install

[04:50] <Zoffix> I'm making changes to code, but they don't show up

[04:51] <geekosaur> I would distrust that prefix; make it an absolute path

[04:52] <geekosaur> otherwise you;'re in trouble if it uses it from a subdirectory

[04:52] <Zoffix> oh no /bin part

[04:53] <Zoffix> Looks like the vast majority of Windows roast failure is due to busted `Test::Util::is_run`

[04:59] <Zoffix> no, not the /bin part -_-

[04:59] * Zoffix tries with absolute path

[05:03] <Zoffix> no love

[05:04] <Zoffix> Now I remember why our Windows support lagging… deving on Windows sucks :)

[05:05] <Zoffix> looks like the cause was stuck background moar.exe processess that were silently preventing from rebuilt moar.exe from being copied

[05:22] *** Kaiepi left
[05:23] *** Kaiepi joined
[05:47] <Zoffix> :S messing with spawn_setup() that spawns a process breaks `use lib ...` weird

[05:49] <Zoffix> oh, but only with t\fudgeandrun 

[06:15] *** BenGoldberg left
[09:36] *** robertle joined
[09:59] *** lizmat left
[10:09] <[TuxCM]> Rakudo version 2018.06-46-g64bdb3dd7 - MoarVM version 2018.06-34-g411f73fdc

[10:09] <[TuxCM]> csv-test-xs-20      0.444 -  0.465

[10:09] <[TuxCM]> csv-ip5xs           0.887 -  0.913

[10:09] <[TuxCM]> test-t --race       1.030 -  1.044

[10:09] <[TuxCM]> test-t              2.320 -  2.413

[10:09] <[TuxCM]> csv-ip5xs-20        7.317 -  7.490

[10:09] <[TuxCM]> test                8.906 -  9.732

[10:09] <[TuxCM]> test-t-20 --race   14.345 - 14.443

[10:09] <[TuxCM]> csv-parser         24.421 - 24.879

[10:09] <[TuxCM]> test-t-20          41.537 - 41.799

[10:29] *** Ven`` joined
[10:33] *** Ven`` left
[10:44] *** lizmat joined
[12:02] *** pmurias joined
[12:12] <lizmat> Perl 5.28 ahead of Perl 6: https://metacpan.org/pod/distribution/perl/pod/perldelta.pod#Mixed-Unicode-scripts-are-now-detectable

[12:14] <lizmat> perhaps we should have some regex attribute and a Str.script method that would give the script of the string if all characters are of the same script, and Nil if they are different ?

[13:04] <pmurias> lizmat: by regex attribute you mean adverb?

[13:04] <lizmat> argh

[13:04] <lizmat> yes, of course  :-)

[13:06] <pmurias> lizmat: wouldn't something like <samescript \d+> work?

[13:07] <lizmat> I guess  :-)

[13:48] <Geth> ¦ rakudo: e0e221d44e | (Elizabeth Mattijsen)++ | src/core/Cool.pm6

[13:48] <Geth> ¦ rakudo: Naive implementation of uniscript(Str:D)

[13:48] <Geth> ¦ rakudo: 

[13:48] <Geth> ¦ rakudo: Inspired by the work of Karl Williamson on Perl 5 as described in:

[13:48] <Geth> ¦ rakudo: 

[13:48] <Geth> ¦ rakudo:   https://metacpan.org/pod/distribution/perl/pod/perldelta.pod#Mixed-Unicode-scripts-are-now-detectable

[13:48] <Geth> ¦ rakudo: 

[13:48] <Geth> ¦ rakudo: this is a prototype of the basic functionality needed to create this Perl 5

[13:48] <Geth> ¦ rakudo: <…commit message has 11 more lines…>

[13:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e0e221d44e

[14:00] <Geth> ¦ nqp/truffle: 4 commits pushed by (Paweł Murias)++

[14:00] <Geth> ¦ nqp/truffle: 106d4d74a6 | [truffle] Run passing test

[14:00] <Geth> ¦ nqp/truffle: 7d11c30724 | [truffle] Factor out the boolification logic

[14:00] <Geth> ¦ nqp/truffle: fb5ebf0b75 | [truffle] Fix return types in generated code

[14:00] <Geth> ¦ nqp/truffle: 31aa6642fb | [truffle] Implement nqp::istrue and nqp::falsey

[14:00] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/compare/aeeb3af724e0...31aa6642fb24

[14:16] *** brrt joined
[14:27] *** lizmat left
[15:15] *** lizmat joined
[15:37] <[TuxCM]> if $o.WHAT gives "(Array of Hash)  [{…}]", what is the cheapest way to check if $o is of that type?

[15:38] <[TuxCM]> given $o { when Array-ofHash { … }} sounds like not the right way :)

[15:39] <[TuxCM]> if $o ~~ Array && $o[0] ~~ Hash ?

[15:39] <lizmat> m:  'my Hash @a; dd @a ~~ Array && @a.of ~~ Hash

[15:39] <camelia> rakudo-moar e0e221d44: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3Hash @a; dd @a ~~ Array && @a.of ~~ Hash7⏏5<EOL>␤    expecting …»

[15:40] <lizmat> m:  my Hash @a; dd @a ~~ Array && @a.of ~~ Hash

[15:40] <camelia> rakudo-moar e0e221d44: OUTPUT: «Bool::True␤»

[16:10] <[TuxCM]> my $full-aoh = [{:bar("1"),:baz("2"),:foo("3")},{:bar("2"),:baz("a b"),:foo("")}];

[16:11] <[TuxCM]> How can I build a loop or other construct so that keys $full-aoh is *always* < bar baz foo > (sorted)

[16:20] <Geth> ¦ rakudo: lizmat assigned to masak Issue Should we allow identifiers with different scripts? https://github.com/rakudo/rakudo/issues/2003

[16:20] <Geth> ¦ rakudo: lizmat assigned to moritz Issue Should we allow identifiers with different scripts? https://github.com/rakudo/rakudo/issues/2003

[16:20] <Geth> ¦ rakudo: lizmat assigned to coke Issue Should we allow identifiers with different scripts? https://github.com/rakudo/rakudo/issues/2003

[16:20] <Geth> ¦ rakudo: lizmat assigned to niner Issue Should we allow identifiers with different scripts? https://github.com/rakudo/rakudo/issues/2003

[16:20] <Geth> ¦ rakudo: lizmat assigned to pmichaud Issue Should we allow identifiers with different scripts? https://github.com/rakudo/rakudo/issues/2003

[16:20] <Geth> ¦ rakudo: lizmat assigned to jnthn Issue Should we allow identifiers with different scripts? https://github.com/rakudo/rakudo/issues/2003

[16:20] <Geth> ¦ rakudo: lizmat assigned to TimToady Issue Should we allow identifiers with different scripts? https://github.com/rakudo/rakudo/issues/2003

[16:20] <Geth> ¦ rakudo: lizmat assigned to ugexe Issue Should we allow identifiers with different scripts? https://github.com/rakudo/rakudo/issues/2003

[16:40] <AlexDaniel> m: uniscript ‘f’

[16:40] <camelia> rakudo-moar e0e221d44: ( no output )

[16:40] <AlexDaniel> m: say uniscript ‘f’

[16:40] <camelia> rakudo-moar e0e221d44: OUTPUT: «Ll␤»

[16:41] <AlexDaniel> unidump: f

[16:41] <unicodable6> AlexDaniel, https://gist.github.com/39949ee5f2d3c596bd3aa475fe36ce65

[16:41] <AlexDaniel> unidump: after

[16:41] <unicodable6> AlexDaniel, https://gist.github.com/c6046915280199325f36bbc5f22f0ed1

[16:42] <AlexDaniel> unidump: аfter

[16:42] <unicodable6> AlexDaniel, https://gist.github.com/52130fb00556452cc884762813031b9b

[16:43] <lizmat> hmmm...

[16:45] <lizmat> oops, forgot to include "Script"

[16:47] <Geth> ¦ rakudo: 105f4db380 | (Elizabeth Mattijsen)++ | src/core/Cool.pm6

[16:47] <Geth> ¦ rakudo: Should look at the "Script" property, not the general one

[16:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/105f4db380

[16:47] <lizmat> really afk&

[16:56] *** brrt left
[16:58] *** microfed joined
[17:00] <b2gills> m: my  \A′ = uniscript 'A′'; say A′;

[17:00] <camelia> rakudo-moar 105f4db38: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Term definition requires an initializer␤at <tmp>:1␤------> 3my  \A7⏏5′ = uniscript 'A′'; say A′;␤»

[17:01] <b2gills> m: my \Aʹ = uniscript 'Aʹ'; say Aʹ; # wrong prime

[17:01] <camelia> rakudo-moar 105f4db38: OUTPUT: «Latin␤»

[17:01] <b2gills> I mean the first one was the wrong prime

[17:04] *** ExtraCrispy left
[17:09] <AlexDaniel> m: say uniscript ‘after’

[17:09] <camelia> rakudo-moar 105f4db38: OUTPUT: «Latin␤»

[17:09] <AlexDaniel> m: say uniscript ‘𝚊fter’

[17:09] <camelia> rakudo-moar 105f4db38: OUTPUT: «Latin␤»

[17:18] <AlexDaniel> samcv: looking for a comment from you on R#2003 :)

[17:18] <synopsebot> R#2003 [open]: https://github.com/rakudo/rakudo/issues/2003 Should we allow identifiers with different scripts?

[17:18] *** Zoffix left
[17:19] <AlexDaniel> as I see it, any time a variable is declared it can be matched against other variables based on confusables db

[17:19] <AlexDaniel> so if there are two variables that look alike, then it can be a compile-time error

[17:20] <AlexDaniel> well, same for subs and other stuff

[17:20] <samcv> yeah we could do that

[17:20] <AlexDaniel> not only this will not ban identifiers with characters from different scripts

[17:20] <samcv> that'd be better than just not allow multiple scripts in the same variable :\

[17:21] <AlexDaniel> but it will also help with confusables within ascii range, like hello and heIIo and stuff like that

[17:21] <samcv> what if you want to use english and your native language? since programming uses english in most cases, so like my $NOUN-var so let's say the noun is in your own language but then you end it with something in english

[17:21] <samcv> due to english being the language for most named constructs in languages

[17:21] <samcv> etc

[17:22] <AlexDaniel> I wonder how many existing modules or scripts will stop compiling after the change :)

[17:22] <AlexDaniel> but we can tweak the detection to our liking

[17:23] <AlexDaniel> for example, maybe identifiers that are very short can be exempt from these checks

[17:23] <AlexDaniel> or something like that

[17:23] <samcv> i will comment in a sec. i just woke up btw

[17:25] <AlexDaniel> I actually think that “You have two variables that look alike” is a reasonable thing even without malicious stuff in mind

[17:26] <AlexDaniel> if you have two variable names that are indeed, well, confusable, why?

[17:26] <samcv> well most likely it was an accident

[17:26] <samcv> heh

[17:27] <samcv> i mean should it be an error or a warning. because it's a warning now when you have one variable shadow another

[17:27] <AlexDaniel> we can start with a warning, although Zoffix++ doesn't like those :)

[17:37] <Geth> ¦ rakudo: JJ++ created pull request #2004: Some typos and updating of variable names

[17:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2004

[17:41] *** robertle left
[17:46] <Geth> ¦ rakudo: 54368f1fa0 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | docs/module_management.md

[17:46] <Geth> ¦ rakudo: Some typos and updating of variable names

[17:46] <Geth> ¦ rakudo: 

[17:46] <Geth> ¦ rakudo: In fact, this would contribute towards solving #1941. It's really helping me, at least.

[17:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/54368f1fa0

[17:46] <synopsebot> RAKUDO#1941 [open]: https://github.com/rakudo/rakudo/issues/1941 Document Rakudo-specific classes to support Perl 6 documentation

[17:46] <Geth> ¦ rakudo: 82866b72b4 | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/module_management.md

[17:46] <Geth> ¦ rakudo: Merge pull request #2004 from JJ/patch-1

[17:46] <Geth> ¦ rakudo: 

[17:46] <Geth> ¦ rakudo: Some typos and updating of variable names

[17:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/82866b72b4

[17:56] *** robertle joined
[18:17] *** stephane_ joined
[18:19] *** cog left
[18:25] *** cog joined
[18:26] *** stephane_ left
[18:29] <AlexDaniel> lizmat++ I like that ticket :)

[18:32] <Geth> ¦ rakudo: zoffixznet self-assigned [RFC] Implement `:handle-win-shell` arg to `run`, `shell`, and `Proc::Async.new` https://github.com/rakudo/rakudo/issues/2005

[18:38] *** brrt joined
[18:41] *** microfed left
[18:41] *** Kaiepi left
[18:56] <pmurias> having hello and heIIo should be allowed

[18:57] <AlexDaniel> pmurias: because?

[18:58] <pmurias> because banning them is a stylistic decision

[18:58] <pmurias> they aren't confusable for some people

[18:58] <pmurias> who use a different font

[18:59] <AlexDaniel> so in other words you're saying that R#2003 is not an issue?

[18:59] <synopsebot> R#2003 [open]: https://github.com/rakudo/rakudo/issues/2003 Should we allow identifiers with different scripts?

[19:01] <pmurias> AlexDaniel: I'm not competent enough in unicode to have a strong opinion on banning characters that look *exactly* the same

[19:01] <AlexDaniel> there's no such thing as “look exactly the same”

[19:01] <AlexDaniel> any font can have any rendering of any character, l can be rendered as a cow

[19:02] <AlexDaniel> so if you say l and I are not confusable in my font, and therefore are OK, then same statement can be applied to any pair of characters

[19:03] <AlexDaniel> moreover, unicode tends not to introduce characters that look exactly the same, even if the proposed character has different semantics

[19:03] <AlexDaniel> now there are exceptions of course

[19:04] <pmurias> a style checker could (or maybe should) complain about such things

[19:04] <AlexDaniel> but generally different characters will look different, it's humans who are confused by similarly-looking shapes

[19:05] <pmurias> but generally rakudo allows stuff that's valid Perl 6 but not the best idea

[19:05] <pmurias> for example we compile unindented source code

[19:05] <AlexDaniel> I found the example here very compelling: https://github.com/rakudo/rakudo/issues/2003#issuecomment-401619383

[19:07] <AlexDaniel> so it's not about something that's not the best idea, it's about people trying to sneak stuff in with malicious intent

[19:07] <pmurias> IMHO if your font is confusing for ASCII characters it sucks and you shouldn't use it for programming

[19:07] <tbrowder_> speaking of humans, i wish we could get rid of non-ascii chars as variables in rakudo code, e.g. \c[CENT SIGN]

[19:08] <AlexDaniel> tbrowder_: $¢ is no longer needed I think

[19:10] <AlexDaniel> pmurias: I can say the same about non-ascii characters, or maybe even about some subset of commonly used non-ascii chars

[19:10] <tbrowder_> i think timotimo or nine said so. can i do a pr removing it if all works well?

[19:10] <AlexDaniel> and it doesn't matter, as my awesome font will not help someone to review a PR that has garbage in it

[19:10] <AlexDaniel> tbrowder_: sure

[19:11] <tbrowder_> yep, garbage in text is my problem, too. thnx

[19:12] <AlexDaniel> a-hem, I was talking about maliciously crafted stuff :)

[19:12] <AlexDaniel> not unicode characters in general :)

[19:13] <tbrowder_> well, malicious or not, i still haven’t cured seeing all the funny-font chars in all the editors and tools tha i use.

[19:15] <tbrowder_>  unicode (non-ascii) is wonderful for people language, but, imo, not  for computer programs.

[19:16] <moritz> but it'll mostly be people that read the program

[19:16] <geekosaur> if this is coming down to "but I don't do alien line noise that isn't the characters I grew up with" then we have a problem: who said your character set is the only legal one? but this is working around unicode running into a political problem, places demanding they get their own characters even when they duplicate existing ones

[19:16] <tbrowder_> you know what i mean :)

[19:16] <geekosaur> yes, I do know what you mean

[19:17] <geekosaur> that someone should have declared United States ASCII as the only legal character set

[19:17] <geekosaur> because it's what you know and therefore "standard" and "proper"

[19:19] <pmurias> geekosaur: banning non-ascii variables names seems like a good perl6critic policy, the compiler shouldn't do it

[19:20] <geekosaur> maybe. I'd call that local policy, not something that should be enshrined in either the compiler or a general checker

[19:22] <AlexDaniel> banning ascii quotes also seems like a good idea to me :)

[19:22] * AlexDaniel brings popcorn

[19:23] <AlexDaniel> anyway, I think the riased issue in R#2003 is irrelevant to all that

[19:23] <synopsebot> R#2003 [open]: https://github.com/rakudo/rakudo/issues/2003 Should we allow identifiers with different scripts?

[19:23] <AlexDaniel> raised*

[19:25] <brrt> then there's the simpler argument that a limited number of characters is handy because there's only so many buttons that can be placed in convenient ways for computer entry, and given that (almost) everybody already has a keyboard that outputs ascii...

[19:25] <brrt> i mean, culture is arbitrary, sure, but sometimes aribtrary is acceptable

[19:29] <AlexDaniel> and over 50% of perl 6 users can type non-ascii stuff

[19:30] <AlexDaniel> so “acceptable” is fine, but there's also “better” :)

[19:32] <samcv> AlexDaniel: interested what you think of my proposal https://github.com/rakudo/rakudo/issues/2003#issuecomment-401627848

[19:50] <brrt> is that the same set of non-ascii stuff, though

[19:53] <samcv> brrt: hmm?

[19:57] <AlexDaniel> samcv: what if there's no ascii lookalike?

[19:57] <samcv> then ignore it

[19:58] <AlexDaniel> samcv: then script that only uses non-ascii variable names is vulnerable to malicious PRs?

[19:58] <samcv> yes

[19:58] <AlexDaniel> isn't it LTA?

[19:58] <samcv> note: i'm not saying this is the end-all-be-all of this issue. this is a good starting point

[19:58] <notable6> samcv, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Notable

[19:59] <samcv> and easier to implement. otherwise we have to convert all of the variable names to some confusable-normalized form and compare all of them

[20:00] <samcv> sure it's LTA, but only using ascii variable names you will be protected. and we can address the other issue later if needed

[20:01] <lizmat> samcv: do you have any opinion about http://unicode.org/reports/tr39/ ?

[20:02] <AlexDaniel> samcv: I think it's tricky, because there are sometimes multiple ascii confusables for a character

[20:02] <AlexDaniel> samcv: like I and l

[20:03] <samcv> AlexDaniel: well that will cause false positives. and that is over the top

[20:03] <samcv> i don't think *most* people are worried about that

[20:03] <AlexDaniel> samcv: I mean there's a problem with step 2 :)

[20:03] <AlexDaniel> “If it contains any non-ascii characters we replace these non-ascii characters with their ascii lookalikes”

[20:04] <samcv> so if it looks like more than one ascii character?

[20:04] <AlexDaniel> It looks like even ascii characters should be replaced to a “normalized” to one form

[20:05] <samcv> AlexDaniel: i'll have to see if there's any unicode characters that are confusable for multiple ascii's

[20:05] <samcv> give me a few mins

[20:05] <AlexDaniel> any l-like character

[20:05] <AlexDaniel> https://unicode.org/cldr/utility/confusables.jsp?a=%E2%84%93&r=None

[20:06] <AlexDaniel> can be deconfused to 1 I l |

[20:06] <AlexDaniel> | we can throw away, that's fine

[20:06] <AlexDaniel> but we're still left with three 1 I l

[20:06] <samcv> well yeah. let me come up with a list

[20:07] <AlexDaniel> also

[20:07] <AlexDaniel> confusables are not just 1-to-1 replacements

[20:07] <AlexDaniel> m is confusable with rn

[20:08] <AlexDaniel> for a fixed-width font that's probably not an issue, but I'm not entirely sure

[20:08] <AlexDaniel> because even with a fixed-width font there are fullwidth characters

[20:08] <AlexDaniel> so maybe some halfwidth+halfwidth can be confused with some fullwidth char

[20:17] <AlexDaniel> well, if we only care about ascii, then maybe all that doesn't matter…

[20:25] <Geth> ¦ nqp/truffle: 91547a32dd | (Paweł Murias)++ | 4 files

[20:25] <Geth> ¦ nqp/truffle: [truffle] Add some type coercions

[20:25] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/91547a32dd

[20:25] <Geth> ¦ nqp/truffle: f6cb25369c | (Paweł Murias)++ | 4 files

[20:25] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::list

[20:25] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/f6cb25369c

[20:25] <Geth> ¦ nqp/truffle: 3b6bba5128 | (Paweł Murias)++ | 20 files

[20:25] <Geth> ¦ nqp/truffle: [truffle] Implement a bunch of comparision ops

[20:25] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/3b6bba5128

[20:27] <samcv> AlexDaniel: in their confusables.txt there's only:

[20:27] <samcv> 2113 ;	006C ;	MA	# ( ℓ → l ) SCRIPT SMALL L → LATIN SMALL LETTER L	# 

[20:27] <samcv> fyi

[20:28] <AlexDaniel> and that's it?

[20:28] <samcv> at least as of version 8

[20:28] <samcv> let me check newer :P

[20:28] <samcv> no that's it

[20:37] <samcv> AlexDaniel: here's the list https://gist.github.com/samcv/851f0f8a8fa5effbcfeeccd8cbae56ce

[20:38] <AlexDaniel> samcv: I don't understand… so ℓ is confusable with l but not with anything else in this list? 𝚰𝘭І𝖨𝐥ﺍﺎ𝔩ℐℑ𐊊Ⲓ𐌉ℓ𝜤Ɩ𝞘Ι𝚕𝟏∣اＩ𝗅𝕀1𝙄𝓁𐌠𝐼𞸀𞺀׀𝑰ǀӀᛁ𝟭𝕴Iߊｌ𝛪ⵏ𝝞𝕝𝟣ו𞣇𝙡𝓘𝗜𝟙𝑙ןⅠ𝘐١𝒍𝖑￨𝐈l۱ꓲ𖼨𝙸𝟷𝓵|ⅼ⏽𝗹

[20:38] *** ggoebel left
[20:39] *** brrt left
[20:39] <samcv> i guess this is backwards what i wanted to do. i want to find things that map to multiple different ascii

[20:39] <AlexDaniel> ah

[20:39] <samcv> but still iteresting

[20:39] <AlexDaniel> but it should still include I, no?

[20:41] <samcv> AlexDaniel: ah i see now

[20:41] <samcv> l is confusable with I

[20:41] <samcv> so transitively it does

[21:04] <samcv> AlexDaniel: ok i got what we wanted

[21:04] <samcv> AlexDaniel: https://gist.github.com/f501c4d0716ec49454d814bf663ddbe1

[21:06] <AlexDaniel> samcv: nice. So really it's just 0O and lI1 if we're talking about ascii range

[21:07] *** robertle left
[21:07] <samcv> i mean a lot of them become lookalikes transitively

[21:08] <samcv> though i mean there's not too many in this list. it is only for 1->1 mappings that map to an ascii

[21:09] <samcv> AlexDaniel: should i exclude ascii->ascii confusables? only non-ascii to ascii confusable?

[21:09] <AlexDaniel> I don't know

[21:09] <samcv> (still transitive, just the list won't include ascii->ascii confusables).

[21:10] <samcv> though the list can stay the same for now because it's useful to see

[21:10] <AlexDaniel> how many visible variables do we have typically?

[21:10] <AlexDaniel> do we really need this lookup to be super efficient?

[21:11] <AlexDaniel> I mean, we can even narrow down the search by using variable length

[21:12] <samcv> also i wouldn't say 𝕴 looks like a 1

[21:12] <AlexDaniel> or, ok, identifier length if we're speaking generally

[21:12] <samcv> well or an l or an i or a |

[21:12] <samcv> how does length factor into this?

[21:13] <samcv> also for things that are transitive like i and l and 1 and | those can all be mapped to the same ascii

[21:13] <samcv> for comparing

[21:13] <AlexDaniel> samcv: well, if you're declaring a sub named “very-very-long-sub-name”, then even if our confusable detector is really slow, it doesn't matter

[21:13] <samcv> ah

[21:13] <samcv> only compare ones with the same length

[21:13] <AlexDaniel> for example, yeah

[21:14] <AlexDaniel> that would ignore multichar confusables, but maybe that's fine

[21:14] <AlexDaniel> I don't know, I'm just brainstorming

[21:14] <samcv> yeah

[21:15] <samcv> idk we can maybe include ones like 𝙄 being confusible for I?

[21:15] <AlexDaniel> or even if we have thousands of variables with the same length, we can still come up with something that has a better O()

[21:16] <AlexDaniel> for example, for every identifier generate it's confusable hash

[21:16] <AlexDaniel> so that hola and h0Ia has the same hash

[21:16] <samcv> yeah

[21:16] <AlexDaniel> and then we can look it up almost instantly, no need for ascii-oriented optimizations

[21:17] <AlexDaniel> s/it's/its/ – I don't understand how I keep making this mistake :)

[21:17] <samcv> ｢'｣ is confusable with ｢｣ :P

[21:19] <AlexDaniel> huh?

[21:20] <samcv> i was making a joke. that ' is confusable with empty string

[21:20] <samcv> it's vs its

[21:21] <AlexDaniel> ah yeah… well “it's” is indeed confusable with “its” :)

[21:22] <AlexDaniel> maybe it's muscle memory because “it's” is more common

[21:27] <AlexDaniel> samcv: ok, but seriously, if we get confusables db into rakudo, we can also assign a confusable id for every character… then use that id to generate a confusable hash for any string. And boom, efficient lookup for confusables

[21:28] <AlexDaniel> if we make that available to users also, then it could be another great selling point

[21:28] <AlexDaniel> among other unicode features in perl 6

[21:37] <AlexDaniel> samcv: I can't find aа in the list

[21:37] <AlexDaniel> u: aа

[21:37] <unicodable6> AlexDaniel, U+0061 LATIN SMALL LETTER A [Ll] (a)

[21:37] <unicodable6> AlexDaniel, U+0430 CYRILLIC SMALL LETTER A [Ll] (а)

[21:37] <AlexDaniel> samcv: in the gist I mean

[21:38] <samcv> hmm let me see

[21:38] <AlexDaniel> samcv: also maybe

[21:38] <AlexDaniel> u: yу

[21:38] <unicodable6> AlexDaniel, U+0079 LATIN SMALL LETTER Y [Ll] (y)

[21:38] <unicodable6> AlexDaniel, U+0443 CYRILLIC SMALL LETTER U [Ll] (у)

[21:45] <samcv> AlexDaniel: ok it's fixed

[21:45] <AlexDaniel> samcv: why does it say foo foo foo2 foo foo2?

[21:46] <samcv> refresh. i fixed it

[21:48] <AlexDaniel> ah right, it was a list of things confusable with ascii characters that have more than one ascii confusable

[21:48] <samcv> yeah. now it has all of them

[21:49] <AlexDaniel> but that's probably identical to this table: https://unicode.org/cldr/utility/confusables.jsp?a=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&r=None

[21:50] <AlexDaniel> maybe throw in ' and - in there

[21:50] <AlexDaniel> https://unicode.org/cldr/utility/confusables.jsp?a=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%27-&r=None

[21:59] *** MasterDuke joined
[22:02] <Geth> ¦ nqp/truffle: a5f75c6308 | (Daniel Green)++ | 2 files

[22:02] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::tclc

[22:02] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/a5f75c6308

[22:47] <Geth> ¦ rakudo: zoffixznet++ created pull request #2006: Fix typo "immediatelly" → "immediately"

[22:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2006

[22:47] <Geth> ¦ rakudo: e2e4218142 | (Tobias Boege)++ | 2 files

[22:47] <Geth> ¦ rakudo: Fix typo "immediatelly" → "immediately"

[22:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e2e4218142

[22:47] <Geth> ¦ rakudo: 4bdb9787de | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[22:47] <Geth> ¦ rakudo: Merge pull request #2006 from taboege/typo-immediately

[22:47] <Geth> ¦ rakudo: 

[22:47] <Geth> ¦ rakudo: Fix typo "immediatelly" → "immediately"

[22:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4bdb9787de

[23:20] *** pmurias left
[23:41] *** MasterDuke left
