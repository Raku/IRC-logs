[00:24] *** stmuk_ joined
[00:25] *** stmuk left
[01:51] *** stmuk joined
[01:53] *** stmuk_ left
[01:57] *** committable6 joined
[01:57] *** ChanServ sets mode: +v committable6

[02:16] *** a3f_ joined
[02:16] *** bartolin_ joined
[02:17] *** literal_ joined
[02:17] *** klapperl_ joined
[02:19] *** timo joined
[02:19] *** benchable6 left
[02:19] *** statisfiable6 left
[02:19] *** bisectable6 left
[02:19] *** nativecallable6 left
[02:19] *** greppable6 left
[02:19] *** releasable6 left
[02:19] *** jdv79 left
[02:19] *** scovit left
[02:19] *** krunen left
[02:19] *** awwaiid left
[02:19] *** btyler joined
[02:19] *** a3f left
[02:19] *** gfldex left
[02:19] *** moritz left
[02:19] *** literal left
[02:19] *** klapperl left
[02:19] *** btyler_ left
[02:19] *** Brock joined
[02:19] *** krunen_ joined
[02:20] *** krunen_ is now known as krunen

[02:20] *** scovit joined
[02:20] *** btyler left
[02:20] *** b2gills joined
[02:20] *** lizmat left
[02:22] *** jdv79 joined
[02:23] *** btyler joined
[02:23] *** moritz joined
[02:24] *** gfldex joined
[02:47] *** literal_ is now known as literal

[02:57] *** bisectable6 joined
[02:57] *** greppable6 joined
[02:57] *** statisfiable6 joined
[04:11] *** yoleaux joined
[04:54] *** ufobat_ joined
[04:54] *** brrt joined
[05:05] *** stmuk left
[05:05] *** stmuk_ joined
[05:27] *** benchable6 joined
[05:46] *** stmuk joined
[05:49] *** stmuk_ left
[06:34] <[Tux]> Hmmm

[06:34] <[Tux]> Rakudo version 2018.06-140-g68ed6f2d8 - MoarVM version 2018.06-141-gcae4731e2

[06:34] <[Tux]> csv-test-xs-20      0.454 -  0.455

[06:34] <[Tux]> csv-ip5xs           1.009 -  1.016

[06:34] <[Tux]> test-t --race       1.047 -  1.064

[06:34] <[Tux]> test-t              2.504 -  2.531

[06:34] <[Tux]> csv-ip5xs-20        9.024 -  9.066

[06:34] <[Tux]> test                9.399 -  9.535

[06:34] *** go|dfish left
[06:34] <[Tux]> test-t-20 --race   15.615 - 16.675

[06:34] <[Tux]> csv-parser         25.700 - 31.313

[06:34] <[Tux]> test-t-20          44.322 - 44.464

[06:41] *** go|dfish joined
[07:27] *** lizmat joined
[07:27] <lizmat> Files=1242, Tests=76404, 326 wallclock secs (15.52 usr  5.21 sys + 2272.74 cusr 226.07 csys = 2519.54 CPU)

[08:22] *** Kaiepi joined
[08:35] *** [TuxCM] joined
[08:36] *** Ven` joined
[09:02] *** brrt left
[09:05] *** Ven` left
[09:15] *** Ven` joined
[09:51] <Geth> ¬¶ rakudo: 4ef8433aa2 | (Elizabeth Mattijsen)++ | src/core/Junction.pm6

[09:51] <Geth> ¬¶ rakudo: Fix thinko in swapping junction in Junction ~ Junction

[09:51] <Geth> ¬¶ rakudo: 

[09:51] <Geth> ¬¶ rakudo: As spotted in

[09:51] <Geth> ¬¶ rakudo:   https://stackoverflow.com/questions/51254830/double-junction-arguments-swapping-sides

[09:51] <Geth> ¬¶ rakudo: 

[09:51] <Geth> ¬¶ rakudo: Since the joining is done from the left, we shouldn't swap the eigenstates

[09:51] <Geth> ¬¶ rakudo: as well.  Feels that there should be a better solution, but I cannot think

[09:51] <Geth> ¬¶ rakudo: of it now.

[09:51] <Geth> ¬¶ rakudo: 

[09:51] <Geth> ¬¶ rakudo: Fixes R#2042

[09:51] <synopsebot> R#2042 [open]: https://github.com/rakudo/rakudo/issues/2042 Double junction arguments swapping sides

[09:51] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/4ef8433aa2

[10:02] <Geth> ¬¶ roast: 8cfdd2f814 | (Elizabeth Mattijsen)++ | S03-junctions/misc.t

[10:02] <Geth> ¬¶ roast: Add tests for R#2042

[10:02] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/8cfdd2f814

[10:02] <synopsebot> R#2042 [open]: https://github.com/rakudo/rakudo/issues/2042 Double junction arguments swapping sides

[10:14] *** MasterDuke left
[10:29] <lizmat> m: my $a := { say "foo" }; $a.sink   # should this or shouldn't this work?  re R#2040

[10:29] <camelia> rakudo-moar 4ef8433aa: ( no output )

[10:29] <synopsebot> R#2040 [open]: https://github.com/rakudo/rakudo/issues/2040 no warning for Callable in sink context

[10:29] <jnthn> Seems to work fine to me (that is, does nothing)

[10:30] <jnthn> If you're looking to add the warning, that'd be a compiler one

[10:30] <jnthn> m: 2

[10:30] <camelia> rakudo-moar 4ef8433aa: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 2 in sink context (line 1)‚ê§¬ª

[10:30] <jnthn> Same place that comes from

[10:30] <lizmat> ok

[10:31] * lizmat has been living under the misapprehension that bare blocks got executed because they were sunk

[10:31] *** erterzeruetu joined
[10:31] <lizmat> but I guess that's only conceptually so

[10:33] *** erterzeruetu left
[10:38] <lizmat> jnthn: sadly, no backtrace for that worry  :-(

[10:39] *** releasable6 joined
[10:40] <lizmat> I guess it's in the optimizer

[10:40] <jnthn> Believe so

[10:41] <jnthn> Backtrace would be quite useless to users since it'd point to compiler internals. :P

[10:41] <lizmat> I meant: also with --ll-exception 

[10:58] *** Zoffix joined
[11:05] <Zoffix> New blog post: "Cancellation of Perl 6 Constants and Rationals Grant": http://blogs.perl.org/users/zoffix_znet/2018/07/cancellation-of-perl-6-constants-and-rationals-grant.html

[11:06] <Ven`> Zoffix++

[11:07] <Ven`> It's sad that won't happen, but recognizing it is still a good thing...

[11:07] <Zoffix> :)

[11:10] <Ven`> Zoffix: the quizlet thing you mentioned in a tweet, is it similar to a SRS app?

[11:10] <Ven`> I've been interested in getting a programming deck for some languages but was never sure how to approach it

[11:22] <Zoffix> Ven`: dunno what SRS app is. Here's one of the decks for the Quizlet: https://quizlet.com/79497572/my-first-french-words-with-ch-flash-cards/ there are several options for studying the words, including matching games. And if you go to "Learn" module https://quizlet.com/79497572/learn there are options (bottom left) for selecting what type of exercises you get shown. So I select "multiple choice" and

[11:22] <Zoffix> "written questions", where you have to type the answer, spelling it correctly. So it starts showing you the words, until you get them all right. And it has an algo for training you the words that you mess up, like switching to multiple choice if you mess up spelling to many times, or comming back a bit later to the words you messed up. In 1 months I went from 0 French to being good enough to go to "Level

[11:22] <Zoffix> 2", and I can largely thank this "learn" quizlet thing... And I was thinking the same type of concept can be applied to learning Perl 6 language and instead of matching French to English, you'd be matching, say, methods to the args they take or something :)

[11:23] *** Ven` left
[11:25] <stephane_> putain, merde alors, c'est pas de la daube :)

[11:27] <Zoffix> ZofBot: Je suit Napoleon!

[11:33] <lizmat> suis?

[11:36] <Zoffix> hehe yeah :)

[11:36] * Zoffix climbs back down to "Level 1" French :P

[11:36] *** Zoffix left
[11:37] <stephane_> learn to swear and you can fake being french :)

[11:37] <lizmat> soif

[11:40] <stephane_> If you want parisain slang from 50 years ago, there is the very funny https://www.amazon.fr/m%C3%A9thode-%C3%A0-Mimile-Largot-peine/dp/225300104X that aped foreign language methods

[11:40] <stephane_> * parisian

[11:42] <stephane_> Problem with slang is it changes very fast. But putain, merde and con are keepers. I will shut with French slang when I will see more Perl 6 ones :)

[11:43] <lizmat> m: my constant &merde = &warn; merde "mille sabords"

[11:43] <camelia> rakudo-moar 4ef8433aa: OUTPUT: ¬´mille sabords‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª

[11:45] <stephane_> lizmat, Capitaine Haddock language is its onwl linguistic field. https://fr.wikipedia.org/wiki/Vocabulaire_du_capitaine_Haddock

[11:46] <lizmat> stephane_: which is where I got "mille sabords" from  :-)

[11:46] <stephane_> * own

[11:49] *** pmurias joined
[11:56] *** brrt joined
[11:56] *** Ven` joined
[12:07] *** AlexDaniel left
[12:17] *** llfourn joined
[12:35] <Geth> ¬¶ rakudo: jkramer++ created pull request #2043: Allow directories as destinations for IO::Path.copy/move.

[12:35] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/2043

[12:47] <scovit> jkramer: what about link and symlink, GNU coreutils allows for a directory target also for them

[12:48] *** benjikun joined
[12:49] *** benjikun2 left
[12:54] <jkramer> scovit: You mean linking to directories/creating links in directories? Or copying/moving links?

[12:55] <jkramer> The ticket didn't say anything about that, I just implemented what was asked for in https://github.com/rakudo/rakudo/issues/1453 :)

[12:55] <scovit> jkramer I meant what if I what to create a link to file in a target directory?

[12:56] <scovit> it seems to me in the same spirit as your patch

[12:56] <jkramer> Oh you meant the routines link/symlink

[12:56] <scovit> lep

[12:56] <scovit> s/l/y/

[12:59] <jkramer> Yeah true, might add that there too. But I think I'll wait for feedback about the implementation in the PR for a bit before going on so I don't have to re-do/change it all if my code is BS :)

[12:59] <scovit> Right, don't know what others think. On top of that, GNU ln have a single argument "signature" where target is implicitly "."; but I am not sure Perl6 aims to the same level of DWIMmy

[13:01] <jkramer> Hmm probably not, I think guessing '.' as destination by default would be a bit weird and might be a pitfall.

[13:02] <jkramer> I mean it's relatively obvious what you mean if you use a directory as destination, but if you omit it altogether that should cause an error IMO.

[13:04] <scovit> yes I would agree, default to '.' is far more obvious in a shell than in a scripting language (and not sure Perl 6 is a scripting language either)

[13:05] <jkramer> Yup, in a shell the current directory is something the user is usually aware of. In coding (any language except shell scripting maybe) not so much.

[13:08] <scovit> regarding your patch, python accepts directory as a destination, java doesn't

[13:11] <scovit> I am a bit surprised about python: I am going to say something bizarre, but I thought that that language was created and pushed by persons that get paid by "line of code"

[13:11] <scovit> in that case adding directories as destinations does not fit the philosophy since it saves a line of code

[13:12] <timo> will probably have to be $*CWD instead of "." in order to work properly

[13:48] *** Kaiepi left
[13:48] *** Kaiepi joined
[14:03] *** skids joined
[14:31] *** Kaiepi left
[14:32] *** Kaiepi joined
[14:47] *** [TuxCM] left
[14:49] <Geth> ¬¶ rakudo: 6c62be6244 | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[14:49] <Geth> ¬¶ rakudo: DRY: Add "in sink context" only once

[14:49] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/6c62be6244

[15:19] *** brrt left
[15:28] *** pmurias left
[15:28] *** pmurias joined
[15:31] <Geth> ¬¶ rakudo: d6c0539507 | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[15:31] <Geth> ¬¶ rakudo: Warn on definition of anonymous sub in sink context

[15:31] <Geth> ¬¶ rakudo: 

[15:31] <Geth> ¬¶ rakudo: Also make sure strings are surrounded by quotes for similar "foo" message.

[15:31] <Geth> ¬¶ rakudo: 

[15:31] <Geth> ¬¶ rakudo: In response to R#2040.

[15:31] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/d6c0539507

[15:31] <synopsebot> R#2040 [open]: https://github.com/rakudo/rakudo/issues/2040 no warning for Callable in sink context

[15:34] <jkramer> Where would I find the implementation of +<?

[15:35] <timo> s: &infix:['+<'], \(1,2)

[15:35] <SourceBaby> timo, Sauce is at https://github.com/rakudo/rakudo/blob/6c62be624/src/core/Int.pm6#L430

[15:35] <timo> there it is

[15:36] <jkramer> Nice, thanks!

[15:36] <timo> the actual implementation lives inside moarvm

[15:36] <timo> at least for the moarvm backend

[15:38] <jkramer> And how would I go about finding that? :)

[15:38] <timo> look in interp.c

[15:40] <jkramer> Got it, thanks

[15:42] <timo> there's additional implementations for the JIT, but that's probably not interesting for you right now?

[15:43] <jkramer> Probably not, just digging into some issue I found interesting and wanted to look at the implementation https://github.com/rakudo/rakudo/issues/1707

[15:45] <timo> ah, interesting

[15:45] <jkramer> Turns out that x +< -y == x for all y that are multiples of 64

[15:45] *** j3nnn1 joined
[15:45] <jkramer> And since apparently this is an i64 in moar I thought there might be some rotating going on instead of shifting

[15:46] <timo> maybe it's undefined behaviour or something

[15:55] <jkramer> Hmm I think that's too deep into the guts for me right now, I'll just leave a comment for whoever is going to debug this :)

[16:00] *** brrt joined
[16:09] *** [TuxCM] joined
[16:31] <samcv> releasable6: status

[16:31] <releasable6> samcv, Next release in ‚âà11 days and ‚âà2 hours. 3 blockers. 0 out of 143 commits logged

[16:31] <releasable6> samcv, Details: https://gist.github.com/5ef9c489a851403b9a956d6099396b9a

[16:39] *** robertle left
[16:46] *** travis-ci joined
[16:46] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Warn on definition of anonymous sub in sink context

[16:46] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/402269807 https://github.com/rakudo/rakudo/compare/6c62be624475...d6c0539507d5

[16:46] *** travis-ci left
[16:46] <buggable> [travis build above] ‚ò† All failures are due to: failed make test (6 failures). Across all jobs, only t/05-messages/10-warnings.t test file failed.

[17:02] <Geth> ¬¶ rakudo: 08a54212ec | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[17:02] <Geth> ¬¶ rakudo: Restore check that was accidentally removed

[17:02] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/08a54212ec

[17:02] *** Kaiepi left
[17:02] *** Kaiepi joined
[17:10] <Geth> ¬¶ nqp/truffle: 0daebf15ba | (Pawe≈Ç Murias)++ | 7 files

[17:10] <Geth> ¬¶ nqp/truffle: [truffle] Add a --target=bytecode to write the TAST in a binary form instead of running it

[17:10] <Geth> ¬¶ nqp/truffle: 

[17:10] <Geth> ¬¶ nqp/truffle: Add nqp::runtrufflebytecode('bytecodefile.truffle6') to run it

[17:10] <Geth> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/0daebf15ba

[17:12] *** brrt left
[17:34] <Geth> ¬¶ nqp/truffle: d842cdce13 | (Pawe≈Ç Murias)++ | 3 files

[17:34] <Geth> ¬¶ nqp/truffle: [truffle] Prefix file with our bytecode with a magic string

[17:34] <Geth> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/d842cdce13

[17:40] *** benjikun2 joined
[17:41] *** Ven` left
[17:42] *** benjikun left
[18:02] *** travis-ci joined
[18:02] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Restore check that was accidentally removed'

[18:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/402310442 https://github.com/rakudo/rakudo/compare/d6c0539507d5...08a54212ec7f

[18:02] *** travis-ci left
[18:03] *** AlexDaniel joined
[18:37] *** Kaiepi left
[18:39] *** Kaiepi joined
[19:21] *** timo is now known as timotimo

[19:26] <[Tux]> lizmat, yt?

[19:31] *** pmurias left
[19:36] *** pmurias joined
[19:41] <[Tux]> Q: a class' method sink is executed when the result is not STORE'd (void context). Can I do something similar with a method or a sub?

[19:42] <[Tux]> $a = foo(42); vs foo(42) of $a = $o.foo(42) vs $o.foo(42);

[19:45] *** buggable joined
[19:45] *** ChanServ sets mode: +v buggable

[19:47] <geekosaur> only if the value (first) or object (second) has a sink method

[19:48] <[Tux]> I cannot assing a SINK phaser to a method or a sub?

[19:49] <samcv> m: say (44032,4520).chrs eq 44033.chr

[19:49] <camelia> rakudo-moar 08a54212e: OUTPUT: ¬´True‚ê§¬ª

[19:51] <timotimo> sinking is about values, not about functions

[19:52] *** Zoffix joined
[19:52] <Zoffix> buggable: speed

[19:52] <buggable> Zoffix, ‚ñÉ‚ñÑ‚ñÇ‚ñÇ‚ñÉ‚ñÑ‚ñÑ‚ñÇ‚ñÉ‚ñÑ‚ñÉ‚ñÖ‚ñÇ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÅ‚ñÉ‚Üë‚Üë‚ñÉ‚ñÖ‚ñÇ‚ñÉ‚ñá‚ñÑ‚ñÉ‚ñÖ‚ñÉ‚ñÉ‚ñà‚ñà‚ñÑ‚ñÉ‚ñÑ‚ñÖ‚ñÑ‚ñá‚ñÜ‚ñÑ‚ñÖ‚ñÑ‚ñÑ‚ñÑ‚ñÉ‚ñÑ‚ñÜ‚ñà dates: 2018-06-16‚Äì2018-07-10; range: 13.407s‚Äì18.073s; speed: 10% slower (widths: 9/3)

[19:52] <Zoffix> Weird the bot says we got slower, eh?

[19:53] <[Tux]> we did, at least that is what I saw today

[19:54] <Zoffix> buggable: speed 1000

[19:55] <Zoffix> stupid robot

[19:57] <[Tux]> http://tux.nl/Talks/CSV6/speed4.html#horizontal

[19:58] <[Tux]> afk

[19:59] <Zoffix> Looks like even tho it got slower based on that period, it's still in the around the same mean value that it was at for the past few months.

[20:00] <Zoffix> And at the start of june it got faster, and now slower again

[20:00] <Zoffix> .oO( we need a more comprehensive bench :) )

[20:00] *** Zoffix left
[20:11] *** Kaiepi left
[20:11] *** Kaiepi joined
[20:13] *** Kaiepi left
[20:13] *** Kaiepi joined
[20:15] <samcv> should be bumping unicode version very shortly

[20:15] <samcv> yeah a more comprehensive bench would be good

[20:16] <samcv> i made this almost 40% faster though https://gist.github.com/samcv/9a65a586ea21b20def8efe4aaaab55de 

[20:16] <samcv> from 2.0 to about 1.3 secs

[20:17] <samcv> (tests binding a million keys in a hash, then deleting every other key, then adding those deleted ones back

[20:17] <samcv> well actually i think i got it backwards. and it doesn't quite do that, but regardless

[20:21] <samcv> python does it in 0.56 seconds https://gist.github.com/bad6b9ccc8c2facac0e600b4c7285421

[20:22] <samcv> i think i'll add all language versions to the same gist

[20:28] <Geth> ¬¶ nqp/truffle: 100d712756 | (Pawe≈Ç Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/TruffleCompiler.java

[20:28] <Geth> ¬¶ nqp/truffle: [truffle] Remove unneeded imports

[20:28] <Geth> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/100d712756

[20:28] <Geth> ¬¶ nqp/truffle: 8759193a8a | (Pawe≈Ç Murias)++ | 2 files

[20:28] <Geth> ¬¶ nqp/truffle: [truffle] Rename NQPStmts to NQPStmtsNode

[20:28] <Geth> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/8759193a8a

[20:28] <Geth> ¬¶ nqp/truffle: e45afbf8a8 | (Pawe≈Ç Murias)++ | 6 files

[20:28] <Geth> ¬¶ nqp/truffle: [truffle] Migrate bytecode running code to a separate class

[20:28] <Geth> ¬¶ nqp/truffle: 

[20:28] <Geth> ¬¶ nqp/truffle: This is preparation for packing up the bytecode runner without the old JVM backend

[20:28] <Geth> ¬¶ nqp/truffle: with SubstrateVM

[20:28] <Geth> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/e45afbf8a8

[20:31] <samcv> ah well nqp takes 5.0 seconds. but well i still sped things up by about 40% even though i messed up the script so as not to do everything i had thought

[20:37] <DrForr> Informal poll: Is it more reasonable to search for libraries just on /lib, /usr/ucb/lib &c rather than relying on 'uname -a'? The former is probably more robust, but slower on startup.

[20:39] *** brrt joined
[20:49] <lizmat> what information are you trying to glean from uname -a ?

[20:52] <DrForr> Well, it's actually not useful as I realized while typing in the main channel because users can upgrade their libreadline package independently of the installation, so searching a list of directory paths seems the only sensible way to find the current readline library.

[21:02] *** skids left
[21:28] <timotimo> samcv: fun, it uses nums internally for something

[21:33] <timotimo> but still, it's mostly GC bound

[21:38] <samcv> timotimo: yeah. i made it much faster by making the HASH_ITER thing faster. but i think it's maybe because it has to do every single element in the hash

[21:38] <samcv> which takes a long time

[21:38] <timotimo> i'm trying to figure out what it uses smart_numify for

[21:39] <samcv> timotimo: that's only using like 0.24% self and 0.695% inclusive though

[21:40] <timotimo> it shouldn't be using floating point math for anything :)

[21:40] <samcv> ah

[21:41] <samcv> but it doesn't seem to be calling any other functions realy from MVMHash_gc_mark

[21:41] <samcv> that i can see at least

[21:41] <timotimo> that makes sense to me

[21:41] <timotimo> gc_mark functions put a bunch of stuff into the work queue and return to the work loop

[21:41] <samcv> i think i ran it on -Og and still didn't see anything show up

[21:42] <samcv> hm

[21:42] <timotimo> worklist_add is most probably inlined, or even a macro

[21:42] <timotimo> yup, it's a macro

[21:42] <samcv> yeah macro

[21:42] <timotimo> there's a slow path for when the worklist needs to be grown

[21:48] *** pmurias left
[21:50] *** pmurias joined
[21:52] <timotimo> thanks to your code, btw, i added some pieces to the profiler's allocation logger

[21:52] <timotimo> coerce_ns and coerce_is and smrt_strify were missing

[21:54] *** MasterDuke joined
[22:03] <samcv> timotimo: oh hm. i didn't know things had to be added?

[22:06] <timotimo> neither did i

[22:10] <MasterDuke> pmurias: how difficult do you think adding for loops to the truffle backend will be?

[22:10] <timotimo> but i did a --profile and saw it showed barely any allocations

[22:10] <timotimo> when in fact it stringifies a lot of ints

[22:28] <pmurias> MasterDuke: if we turn the optimizer on for loops are optimized into while loops

[22:29] <pmurias> MasterDuke: also it seems that Truffle has speciall support to have the loops run faster: https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/nodes/LoopNode.html

[22:31] <pmurias> MasterDuke: a for loop shouldn't be super difficult, it should be like a regular loop with some fiddling to pass in an argument to the block

[22:36] *** benji__ joined
[22:36] *** pmurias left
[22:37] *** pmurias joined
[22:38] *** pmurias left
[22:39] *** benjikun2 left
[22:42] <MasterDuke> pmurias: hm, maybe i'm missing something. i don't think any type of loop is supported right now, correct?

[22:43] <MasterDuke> timotimo: how did you do the adding? is there a way to figure out if anything else needs to be added?

[22:44] <timotimo> there's a big switch/case in profiler/instrument.c that has all instructions in them that can allocate

[22:46] <MasterDuke> ah

[22:52] <Geth> ¬¶ nqp/truffle: 4 commits pushed by Unknown++

[22:52] <Geth> ¬¶ nqp/truffle: 26e527ec57 | [truffle] Implement nqp::iscclass

[22:52] <Geth> ¬¶ nqp/truffle: 102cf04250 | [truffle] Implement nqp::<findcclass findnotcclass>

[22:52] <Geth> ¬¶ nqp/truffle: 1ea2c67f68 | [truffle] Implement nqp::<escape flip>

[22:52] <Geth> ¬¶ nqp/truffle: fe01241fd5 | [truffle] Add recently implemented ops

[22:52] <Geth> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/compare/e45afbf8a89a...fe01241fd56f

[22:54] <Geth> ¬¶ 6.d-prep: c800e850b9 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[22:54] <Geth> ¬¶ 6.d-prep: Add note about sticking [v6.d REVIEW] into review commits

[22:54] <Geth> ¬¶ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/c800e850b9

[22:55] <Geth> ¬¶ 6.d-prep: 620b41e051 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[22:55] <Geth> ¬¶ 6.d-prep: Fix wording

[22:55] <Geth> ¬¶ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/620b41e051

[22:57] <Geth> ¬¶ roast: 7992cf1316 | (Zoffix Znet)++ | S32-hash/exists-adverb.t

[22:57] <Geth> ¬¶ roast: [v6.d REVIEW] Test actual return value in multi dim :exists

[22:57] <Geth> ¬¶ roast: 

[22:57] <Geth> ¬¶ roast: Instead of only its type.

[22:57] <Geth> ¬¶ roast: 

[22:57] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/e0d318a7d

[22:57] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/7992cf1316

[23:00] *** brrt left
[23:01] <MasterDuke> samcv: i think a good grant proposal could crafted around automated benchmarking added to travis and appveyor. e.g., a collection of benchmarks like https://github.com/japhb/perl6-bench + [TuxCM]'s + Ulti's + rindolf's

[23:02] <Geth> ¬¶ roast: d75a21b990 | (Zoffix Znet)++ | S03-metaops/reverse.t

[23:02] <Geth> ¬¶ roast: [v6.d REVIEW] Use more robust R, tests

[23:02] <Geth> ¬¶ roast: 

[23:02] <Geth> ¬¶ roast: Test actual data structure instead of its stringified version.

[23:02] <Geth> ¬¶ roast: 

[23:02] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/be9417e12

[23:02] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/d75a21b990

[23:11] <japhb> MasterDuke, samcv: There's no reason perl6-bench couldn't easily absorb the others.  The one thing that would be a useful would be a standard step for generating/downloading large data sets, for things that want to test against e.g. a hundred megs of JSON files.

[23:12] <japhb> Other than that, it was already designed to be expanded over time.

[23:12] <japhb> Mind you, it probably has some functionality and defaults that we'd want to tune these days -- compatibility with pre-Christmas Perl 6 implementations is probably not really useful anymore, for instance.

[23:13] <japhb> I welcome PRs and/or co-maintainers.

[23:14] <Geth> ¬¶ roast: f8d30729c2 | (Zoffix Znet)++ | S02-types/bool.t

[23:14] <Geth> ¬¶ roast: [v6.d REVIEW] Improve Bool numification tests

[23:14] <Geth> ¬¶ roast: 

[23:14] <Geth> ¬¶ roast: - Remove duplicate tests

[23:14] <Geth> ¬¶ roast: - Use proper test routines that test type and value

[23:14] <Geth> ¬¶ roast: 

[23:14] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/df6530715

[23:14] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/f8d30729c2

[23:18] <MasterDuke> japhb: it's on my list of things i'd like to work on, but all the standard disclaimers apply (limited time, etc)

[23:19] <japhb> Sure!  I'm happy to answer questions if you have any.  More contributors ~~ Goodness.

[23:20] <timotimo> i feel kind of a little bad for not touching perl6-bench in years

[23:22] <japhb> Not like I've done a ton of work on it during that time ... we all have our @time-conflicts

[23:25] <Geth> ¬¶ roast: 894a56c87b | (Zoffix Znet)++ | S32-exceptions/misc.t

[23:25] <Geth> ¬¶ roast: [v6.d REVIEW] Fix up X::Bind throwage tests

[23:25] <Geth> ¬¶ roast: 

[23:25] <Geth> ¬¶ roast: - Remove duplicate tests

[23:25] <Geth> ¬¶ roast: - Stuff the tests into eval; a sufficiently smart compiler can

[23:25] <Geth> ¬¶ roast:     detect those errors at compile time

[23:25] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/894a56c87b

[23:25] <Geth> ¬¶ roast: 78ef7fc08b | (Zoffix Znet)++ | S02-types/bool.t

[23:25] <Geth> ¬¶ roast: Fix wrong plan

[23:25] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/78ef7fc08b

[23:43] *** lizmat left
[23:44] <DrForr> Updated Readline to automatically walk directories. It won't do it recursively yet, I'll add that later.

