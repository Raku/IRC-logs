[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 3 ballots submitted by 2 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 10! Congratulations to [Coke]! You win a roll of duck tape!

[06:03] <nine> [  129s] t/concurrency/01-thread.t            (Wstat: 11 Tests: 22 Failed: 0)

[06:03] <nine> [  129s]   Non-zero wait status: 11

[06:03] <nine> [  129s]   Parse errors: Bad plan.  You planned 24 tests but ran 22.

[06:24] <nine> Flappers in spec tests are bad enough. Flappers in other tests prevent packaging.

[06:25] <geekosaur> segfaults not so nice...

[06:32] <nine> [   96s] t/concurrency/03-semaphore.t         (Wstat: 0 Tests: 12 Failed: 1)

[06:32] <nine> [   96s]   Failed test:  12

[07:45] * moritz purges some spam from the clogs

[08:01] <[Tux]> Rakudo version 2018.01-66-g72948e847 - MoarVM version 2018.01-49-g783a4f07c

[08:01] <[Tux]> csv-test-xs-20      0.443 -  0.496

[08:01] <[Tux]> csv-ip5xs           0.984 -  1.077

[08:01] <[Tux]> test-t --race       1.088 -  1.089

[08:01] <[Tux]> test-t              2.560 -  2.564

[08:01] <[Tux]> test                9.137 -  9.320

[08:01] <[Tux]> csv-ip5xs-20       10.408 - 10.756

[08:01] <[Tux]> csv-parser         11.601 - 11.714

[08:01] <[Tux]> test-t-20 --race   16.542 - 16.602

[08:01] <[Tux]> test-t-20          45.228 - 45.501

[09:23] <AlexDaniel> squashable6: next

[09:23] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 1 day and ≈0 hours (2018-02-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[09:39] <AlexDaniel> reportable6: 2018-01-22T00:00:00Z 2018-01-29T00:00:00Z

[09:39] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[09:39] <reportable6> AlexDaniel, RT before…

[09:39] <AlexDaniel> omg no debug output please…

[09:39] <AlexDaniel> xD

[09:39] <reportable6> AlexDaniel, after the loop…

[09:39] <AlexDaniel> ahahah

[09:40] <reportable6> AlexDaniel, GH before…

[09:40] <reportable6> AlexDaniel, RT after…

[09:40] <reportable6> AlexDaniel, GH after…

[09:40] <reportable6> AlexDaniel, https://gist.github.com/bbb46f169273ef2b2dc02f81cef18f63

[09:40] <gfldex> caring bot is caring!

[09:41] * AlexDaniel sake kill:reportable

[09:42] <AlexDaniel> ehhh… spam ticket

[09:42] <AlexDaniel> reportable6: 2018-01-22T00:00:00Z 2018-01-29T00:00:00Z

[09:42] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[09:43] <reportable6> AlexDaniel, https://gist.github.com/9e45d55567a1b78bf20654cf34c48446

[09:45] <AlexDaniel> oh, we can do monthly too

[09:46] <AlexDaniel> reportable6: 2018-01-01T00:00:00Z 2018-02-01T00:00:00Z

[09:46] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[09:46] <AlexDaniel> reportable6: 2018-01-01T00:00:00Z 2018-02-01T00:00:00Z

[09:46] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[09:47] <reportable6> AlexDaniel, https://gist.github.com/b259dfe4df4b04b8984595fe5e0ac470

[09:48] <AlexDaniel> soo, that's about ≈3 closed tickets per day?

[16:41] <Geth> ¦ rakudo: cde0cabfd3 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[16:41] <Geth> ¦ rakudo: Fix broken indentation of code

[16:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cde0cabfd3

[16:51] <Geth> ¦ rakudo: 7fe23136da | (Zoffix Znet)++ | 2 files

[16:51] <Geth> ¦ rakudo: QASTify .dispatch:<.=> calls

[16:51] <Geth> ¦ rakudo:

[16:51] <Geth> ¦ rakudo: Perf boost depends on number of candidates for method used:

[16:52] <Geth> ¦ rakudo: - 63x faster for (Any $).=self

[16:52] <Geth> ¦ rakudo: - 49x faster for (Int $).=new: $

[16:52] <Geth> ¦ rakudo: - 39x faster for 14-candidate call

[16:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7fe23136da

[16:52] <Geth> ¦ roast: ca6787d9e5 | (Zoffix Znet)++ | integration/weird-errors.t

[16:52] <Geth> ¦ roast: Adjust wrong-ish exception bug cover test

[16:52] <Geth> ¦ roast:

[16:52] <Geth> ¦ roast: The bug it covers is for an internal exception produced by 2011's

[16:52] <Geth> ¦ roast: compiler. Despite the exception thrown being an X::Method::NotFound,

[16:52] <Geth> ¦ roast: it contains wrong properties, such as an empty method name.

[16:52] <Geth> ¦ roast:

[16:52] <Geth> ¦ roast: After work done to simply `.=` method call to not go through

[16:52] <Geth> ¦ roast: <…commit message has 7 more lines…>

[16:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ca6787d9e5

[16:53] <Zoffix> .tell AlexDaniel this would need to be cherry-picked to 6.c unless we make BOOTSTRAP's exceptions typed (unsure how hard that is). The new exception is textually more correct, but isn't typed. https://github.com/perl6/roast/commit/ca6787d9e5

[16:53] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[16:54] <Geth> ¦ roast: f95e42261f | (Zoffix Znet)++ | S03-operators/inplace.t

[16:54] <Geth> ¦ roast: Cover .= optimization

[16:54] <Geth> ¦ roast:

[16:54] <Geth> ¦ roast: Covers cases seen broken during opt work:

[16:54] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/7fe23136da

[16:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f95e42261f

[16:59] <AlexDaniel> Zoffix: thanks

[16:59] <yoleaux> 16:53Z <Zoffix> AlexDaniel: this would need to be cherry-picked to 6.c unless we make BOOTSTRAP's exceptions typed (unsure how hard that is). The new exception is textually more correct, but isn't typed. https://github.com/perl6/roast/commit/ca6787d9e5

[17:00] * AlexDaniel todoed

[17:00] * AlexDaniel runs away

[20:47] <pmurias> samcv: this table: http://unicode.org/reports/tr29/#Table_Combining_Char_Sequences_and_Grapheme_Clusters is bogus right?

[20:48] <samcv> bogus?

[20:48] <samcv> not sure what you mean by that. but i find table 3.1.1 more helpful

[20:49] <pmurias> samcv: what I mean is that it describe different clustering then 3.1.1

[20:49] <pmurias> * describes

[20:49] <samcv> yeah look at 3.1.1 that table is confusing

[20:50] <pmurias> samcv: I'm trying to descripe the clustering rules as a regular expression and it turns out an implementation of 1b that assumes Grapheme_Extend as Extend doesn't pass the tests

[20:50] <samcv> not sure if it's bogus... but i'd just not look at it

[20:50] <samcv> pmurias: yeah i was about to show you the MoarVM code

[20:51] <samcv> here's our code that determines if we should break or not break https://github.com/MoarVM/MoarVM/blob/master/src/strings/normalize.c#L526-L640

[20:54] <samcv> pmurias: but you want Grapheme_Cluster_Break=Extend

[20:54] <samcv> https://github.com/MoarVM/MoarVM/blob/master/src/strings/normalize.c#L615

[20:54] <samcv> pmurias: hopefully node has that property?

[21:01] <pmurias> samcv: I'm processing the UCD files myself anyway so I can extract them myself

[21:01] <samcv> ah ok

[21:39] <Geth> ¦ rakudo: 7c1f0b416d | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[21:39] <Geth> ¦ rakudo: Fix crashes with compile time evalution of Whatever curry

[21:39] <Geth> ¦ rakudo:

[21:39] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1465

[21:39] <Geth> ¦ rakudo:

[21:39] <Geth> ¦ rakudo: When we compile_in_context, we rake the .ann('outer')s to find all

[21:39] <Geth> ¦ rakudo: the good bits. However, Whatever curries don't get that annotation

[21:39] <Geth> ¦ rakudo: and so the raking stops prematurely. This causes any curry that

[21:39] <Geth> ¦ rakudo: tries to access some core symbols (like subroutines) executed

[21:39] <Geth> ¦ rakudo: during being time explode.

[21:39] <Geth> ¦ rakudo:

[21:39] <Geth> ¦ rakudo: Fix by adding annotation of setting the outer to the current pad.

[21:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7c1f0b416d

[21:40] <Geth> ¦ roast: d1d34c2971 | (Zoffix Znet)++ | S02-types/whatever.t

[21:40] <Geth> ¦ roast: Cover explosions in compile time whatevercurries

[21:40] <Geth> ¦ roast:

[21:40] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1465

[21:40] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/7c1f0b416d

[21:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d1d34c2971

[22:07] <moritz> Zoffix++

[22:24] <Geth> ¦ rakudo: 92c6a29afc | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[22:24] <Geth> ¦ rakudo: Add temp path maker routines to test helpers

[22:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/92c6a29afc

[22:30] <Geth> ¦ nqp: 15eb895bd6 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[22:30] <Geth> ¦ nqp: [MoarVM Bump] Brings 4 commits

[22:30] <Geth> ¦ nqp:

[22:30] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.01-49-g783a4f0...2018.01-53-g7fdc6aa

[22:30] <Geth> ¦ nqp: 7fdc6aa Fix SEGV when opening MVM_*_LOG files; dogbert17++

[22:30] <Geth> ¦ nqp: dd72e1f Disable box_i template for the time being

[22:30] <Geth> ¦ nqp: 7434f5e Add CHECK_RETURN guard node

[22:30] <Geth> ¦ nqp: 9a2d346 Add NOOP expr operator

[22:30] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/15eb895bd6

[22:30] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.01-49-g783a4f0...2018.01-53-g7fdc6aa

[22:30] <Geth> ¦ rakudo: bececb7b75 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[22:30] <Geth> ¦ rakudo: [NQP Bump] Brings 11 commits

[22:30] <Geth> ¦ rakudo:

[22:30] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.01-20-gaaf5b78...2018.01-31-g15eb895

[22:30] <Geth> ¦ rakudo: 15eb895 [MoarVM Bump] Brings 4 commits

[22:30] <Geth> ¦ rakudo: 8aea6d7 Test encoding and decoding as utf8-c8

[22:31] <Geth> ¦ rakudo: 4bffb46 [js] Implement encoding as utf8-c8

[22:31] <Geth> ¦ rakudo: 5f7fc96 [js] Decoding as utf8-c8

[22:31] <Geth> ¦ rakudo: <…commit message has 13 more lines…>

[22:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bececb7b75

[22:31] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-20-gaaf5b78...2018.01-31-g15eb895

[22:31] <Geth> ¦ rakudo: a5c21acb52 | (Zoffix Znet)++ | t/05-messages/moar/01-errors.t

[22:31] <Geth> ¦ rakudo: Test no SEGV when setting bad MVM_*_LOG files

[22:31] <Geth> ¦ rakudo:

[22:31] <Geth> ¦ rakudo: Closes https://github.com/rakudo/rakudo/issues/1451

[22:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a5c21acb52

[22:47] <travis-ci> NQP build passed. Zoffix Znet '[MoarVM Bump] Brings 4 commits

[22:47] <travis-ci> https://travis-ci.org/perl6/nqp/builds/336322170 https://github.com/perl6/nqp/compare/8aea6d7d687f...15eb895bd6e3

[23:27] <lizmat> do we actually have a HLL way to find out if something is a container?

[23:28] <lizmat> the only way I've been able to find is: foo.VAR.^name eq 'Scalar'

[23:28] <lizmat> whereas in nqp, that would just be an nqp::iscont(foo)

[23:32] <jnthn> At the very least, foo.VAR.isa(Scalar) would be more robust :)

[23:33] <samcv> adding another encoding to moarvm. windows-1251 for cyrillic text. and fixing some bugs in our windows-1252 impl

[23:33] <jnthn> samcv++

[23:33] <samcv> m:  0x2122.chr.encode: 'windows-1252' # this will work shortly

[23:33] <camelia> rakudo-moar a5c21acb5: OUTPUT: «Error encoding Windows-1252 string: could not encode codepoint 8482␤  in block <unit> at <tmp> line 1␤␤»

[23:34] <samcv> though i've added windows-1251 to moarvm's code. and to rakudo. but now i'm getting equal requires a concrete string but got null

[23:37] <samcv> ah i think i fixed it

[23:38] <samcv> nice. i got it :)

[23:39] <Zoffix> m: use nqp; my (@a, $b, %c, &d); for $@a, $b, $%c, &d, @a, $b<>, %c, &d<> -> \v { say [v<> =:= v ?? "deconted" !! "conted", nqp::iscont(v) ?? "conted" !! "deconted" ] }

[23:39] <camelia> rakudo-moar a5c21acb5: OUTPUT: «[conted conted]␤[conted conted]␤[conted conted]␤[conted conted]␤[deconted deconted]␤[deconted deconted]␤[deconted deconted]␤[deconted deconted]␤»

[23:40] <Zoffix> Another way (I think)

[23:40] <samcv> it's converting back and forth properly with cyrillic text \o/ woo

[23:40] <Zoffix> \

[23:40] <Zoffix> \o/

[23:43] <samcv> exciting

[23:45] <Zoffix> m: use nqp; my $z := Proxy.new: :STORE{$^a, $^b}, :FETCH{;}; my $y := class { method ZEN-KEY {}; }; my (@a, $b, %c, &d); for $y, $z, $@a, $b, $%c, &d, $z<>, @a, $b<>, %c, &d<> -> \v { say v<> =:= v ?? "D" !! "C", nqp::iscont(v) ?? "C" !! "D", v.VAR.isa(Scalar) ?? "C" !! "D" }

[23:45] <camelia> rakudo-moar a5c21acb5: OUTPUT: «CDD␤CCD␤CCC␤CCC␤CCC␤CCC␤DDD␤DDD␤DDD␤DDD␤DDD␤»

[23:45] <Zoffix> Fails with custom classes, so nevermind...

[23:45] <Zoffix> looks like VAR.isa fails for Proxy

[23:46] <samcv> apparently 1.5% of the web is encoded in windows-1251 cyrillic encoding

[23:46] <samcv> and is the most used web encoding we didn't support. next used after that is Shift JIS at 0.8%

[23:47] <samcv> though that will be more work since it's 1 or byte encoding instead of just 1 byte

[23:48] <Zoffix> m: use nqp; my $z := Proxy.new: :STORE{$^a, $^b}, :FETCH{;}; dd $z.VAR

[23:48] <camelia> rakudo-moar a5c21acb5: OUTPUT: «Invocant of method 'perlseen' must be an object instance of type 'Mu', not a type object of type 'Nil'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[23:49] <Zoffix> m: use nqp; my $z := Proxy.new: :STORE{$^a, $^b}, :FETCH{;}; my $y := class { method ZEN-KEY {}; }; my (@a, $b, %c, &d); for $y, $z, $@a, $b, $%c, &d, $z<>, @a, $b<>, %c, &d<> -> \v { say v<> =:= v ?? "D" !! "C", nqp::iscont(v) ?? "C" !! "D", v.VAR ~~ Scalar|Proxy ?? "C" !! "D" }

[23:49] <camelia> rakudo-moar a5c21acb5: OUTPUT: «CDD␤CCC␤CCC␤CCC␤CCC␤CCC␤DDD␤DDD␤DDD␤DDD␤DDD␤»

[23:49] <Zoffix> win

[23:49] <Zoffix> huggable: HLL iscont :is: say $v.VAR ~~ Scalar|Proxy ?? "conted" !! "deconted"

[23:49] <huggable> Zoffix, Added HLL iscont as say $v.VAR ~~ Scalar|Proxy ?? "conted" !! "deconted"

[23:57] <lizmat> perhaps we should have a Mu.itemized(\a) { nqp::p6bool(nqp::iscont(a)) }  ?

[23:58] <lizmat> dinner&
