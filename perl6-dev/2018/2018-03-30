[00:08] <Kaiepi> writing an update to the repl to make it so you have to press ctrl+c/ctrl+d twice to exit

[00:09] <Kaiepi> i've made way too many typos like that and like to be able to clear the line easily

[00:10] <Kaiepi> starting to work out how the language works bit by bit \o/

[00:32] <timotimo> if you want repl, but not as bad, maybe the jupyter kernel might be better

[00:32] <timotimo> haven't tried it in a whole while though

[02:38] <Geth> ¦ nqp: ab5dec0978 | (Jeremy Studer)++ | src/QRegex/P6Regex/Actions.nqp

[02:38] <Geth> ¦ nqp: Fix bug with iteration of empty character class

[02:38] <Geth> ¦ nqp:

[02:38] <Geth> ¦ nqp: Check that there is at least one character class before applying the

[02:38] <Geth> ¦ nqp: regex nodes.

[02:38] <Geth> ¦ nqp:

[02:38] <Geth> ¦ nqp: When compiling the 'conj' regex node, it expects to be able to shift

[02:38] <Geth> ¦ nqp: off at least one child node and iterates past the end as a result.

[02:38] <Geth> ¦ nqp:

[02:38] <Geth> ¦ nqp: Fixes [Rakudo Issue #1622](https://github.com/rakudo/rakudo/issues/1622)

[02:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ab5dec0978

[02:52] <Kaiepi> hm, i have getting using ^C twice to exit the repl to almost work, but the tests for it hang

[03:15] <Kaiepi> fixed that, but broke some other tests

[03:34] <Kaiepi> ah ok, the tests weren't accounting for "Press ^D again to exit Rakudo" to end up in stdout

[05:35] <samcv> i've gotten it to 4.3s down from 12s :)

[05:35] <samcv> written in such a way the compiler can vectorize it (eliminating all branches in the loop completely)

[05:36] <samcv> and scanning all of the 32 bit string buffer at once instead of checking each one at the same time as assigning to the new buffer

[06:05] <Kaiepi> nice

[06:22] <samcv> and for  my $str = 'abcdcdecdce♥'; for ^20000 { $str = 'whathere' ~ $str; $str ~~ /z/; }; say now - INIT now;

[06:22] <samcv> i get 1.25s now versus 4.64s before

[06:38] <[Tux]> Rakudo version 2018.03-129-g7572983a4 - MoarVM version 2018.03-35-gafdcad424

[06:38] <[Tux]> csv-test-xs-20      0.439 -  0.460

[06:38] <[Tux]> csv-ip5xs           0.909 -  0.914

[06:38] <[Tux]> test-t --race       1.019 -  1.037

[06:38] <[Tux]> test-t              2.451 -  2.542

[06:39] <[Tux]> csv-ip5xs-20        8.767 -  8.788

[06:39] <[Tux]> test                9.114 -  9.303

[06:39] <[Tux]> test-t-20 --race   15.757 - 16.008

[06:39] <[Tux]> csv-parser         37.484 - 37.802

[06:39] <[Tux]> test-t-20          43.508 - 44.531

[06:43] <Geth> ¦ roast: 0c2cc72729 | usev6++ | 2 files

[06:43] <Geth> ¦ roast: [JVM] Fudge two newly failing tests (R#1671)

[06:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0c2cc72729

[06:43] <synopsebot> R#1671 [open]: https://github.com/rakudo/rakudo/issues/1671 [JVM] [JVM] Calling .perl on Sequence produced by chained .grep after .grep, :k gives wrong result

[07:42] <Geth> ¦ nqp: Kaiepi++ created pull request #434: Allow NativeCall support for wchar_t

[07:42] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/434

[07:45] <Geth> ¦ rakudo: Kaiepi++ created pull request #1672: Implement NativeCall support for wchar_t

[07:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1672

[07:50] <lizmat> Files=1238, Tests=74617, 308 wallclock secs (14.52 usr  4.95 sys + 2117.17 cusr 204.24 csys = 2340.88 CPU)

[08:14] <Geth> ¦ rakudo: 53c02d8505 | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp

[08:14] <Geth> ¦ rakudo: We only need a single decont for 'once'

[08:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/53c02d8505

[08:21] <Geth> ¦ rakudo: 022954d74e | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm6

[08:21] <Geth> ¦ rakudo: Fix for GH R#1671

[08:21] <Geth> ¦ rakudo:

[08:21] <Geth> ¦ rakudo: Apparently, the JVM needs the boxing to prevent it from taking an alias

[08:21] <Geth> ¦ rakudo: and thus producing the final value each time.

[08:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/022954d74e

[08:21] <synopsebot> R#1671 [open]: https://github.com/rakudo/rakudo/issues/1671 [JVM] [JVM] Calling .perl on Sequence produced by chained .grep after .grep, :k gives wrong result

[09:29] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix for GH R#1671

[09:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/360185565 https://github.com/rakudo/rakudo/compare/53c02d85051b...022954d74e02

[09:29] <synopsebot> R#1671 [open]: https://github.com/rakudo/rakudo/issues/1671 [JVM] [JVM] Calling .perl on Sequence produced by chained .grep after .grep, :k gives wrong result

[09:29] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/04-nativecall/13-cpp-mangling.t test file failed.

[09:48] <Geth> ¦ rakudo: b9906ab10d | usev6++ | src/core/Any-iterable-methods.pm6

[09:48] <Geth> ¦ rakudo: Add back a nqp::p6box_i() for grep :kv, too

[09:48] <Geth> ¦ rakudo:

[09:48] <Geth> ¦ rakudo: Fixes the second part of GH R#1671 (same fix as in 022954d74e).

[09:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b9906ab10d

[09:48] <synopsebot> R#1671 [closed]: https://github.com/rakudo/rakudo/issues/1671 [JVM] [JVM] Calling .perl on Sequence produced by chained .grep after .grep, :k gives wrong result

[09:49] <Geth> ¦ roast: 9f65f3485a | usev6++ | 2 files

[09:49] <Geth> ¦ roast: Revert "[JVM] Fudge two newly failing tests (R#1671)"

[09:49] <Geth> ¦ roast:

[09:49] <Geth> ¦ roast: This works again, lizmat++.

[09:49] <Geth> ¦ roast:

[09:49] <Geth> ¦ roast: This reverts commit 0c2cc727292ca3c319994e30aa68030268e579c3.

[09:49] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9f65f3485a

[09:50] <lizmat> Cool  :-)

[10:22] <Geth> ¦ rakudo: b22421e7e9 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm6

[10:22] <Geth> ¦ rakudo: Split off to-millis(,True) into to-millis-allow-zero

[10:22] <Geth> ¦ rakudo:

[10:22] <Geth> ¦ rakudo: This speeds up cueing of start { } blocks a bit and saves one Scalar allocation

[10:22] <Geth> ¦ rakudo: per cue.  First part of more refactoring on ThreadPoolScheduler.cue, which

[10:22] <Geth> ¦ rakudo: currently takes 6.5% of CPU on 'await do for ^100000 { start { } }'

[10:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b22421e7e9

[10:31] <travis-ci> Rakudo build passed. usev6 'Add back a nqp::p6box_i() for grep :kv, too

[10:31] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/360207798 https://github.com/rakudo/rakudo/compare/022954d74e02...b9906ab10d22

[11:13] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Split off to-millis(,True) into to-millis-allow-zero

[11:13] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/360216361 https://github.com/rakudo/rakudo/compare/b9906ab10d22...b22421e7e9e9

[12:47] <Geth> ¦ roast/6.c-errata: 7dbc84c323 | (Zoffix Znet)++ | packages/Test/Util.pm

[12:47] <Geth> ¦ roast/6.c-errata: Sync Test::Utils package with master

[12:47] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/7dbc84c323

[12:56] <Geth> ¦ nqp: 0d344c2f5c | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[12:56] <Geth> ¦ nqp: [MoarVM Bump] Brings 21 commits

[12:56] <Geth> ¦ nqp:

[12:56] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.03-35-gafdcad4...2018.03-56-g85fc758

[12:56] <Geth> ¦ nqp: 85fc758 Missing write barrier enforcement in CStruct

[12:56] <Geth> ¦ nqp: ce38e35 Fix missing GC mark of deserializer contexts list

[12:56] <Geth> ¦ nqp: df4c94c Spot use of an item already put in a gen2 freelist

[12:57] <Geth> ¦ nqp: 6ba2d8d Simplify rooting by using MVMROOT2

[12:57] <Geth> ¦ nqp: <…commit message has 17 more lines…>

[12:57] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0d344c2f5c

[12:57] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.03-35-gafdcad4...2018.03-56-g85fc758

[12:57] <Geth> ¦ rakudo: 20495f097e | (Zoffix Znet)++ | tools/build/NQP_REVISION

[12:57] <Geth> ¦ rakudo: [NQP Bump] Brings 2 commits

[12:57] <Geth> ¦ rakudo:

[12:57] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.03-40-gb73a9b6...2018.03-42-g0d344c2

[12:57] <Geth> ¦ rakudo: 0d344c2 [MoarVM Bump] Brings 21 commits

[12:57] <Geth> ¦ rakudo: ab5dec0 Fix bug with iteration of empty character class

[12:57] <Geth> ¦ rakudo:

[12:57] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.03-35-gafdcad4...2018.03-56-g85fc758

[12:57] <Geth> ¦ rakudo: <…commit message has 21 more lines…>

[12:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/20495f097e

[12:57] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.03-40-gb73a9b6...2018.03-42-g0d344c2

[14:21] <nine> make.nqp now checks the exit status of commands (unless explicitly requested not to), only builds targets when actually needed, handles recursive macros correctly in all cases rakudo needs, no longer hides the output of commands, supports @echo and is still only 288 LOC

[14:21] <nine> https://gist.github.com/niner/a959cb893820446bfb7177392d4c16cb

[14:22] <jnthn> Wow :D

[14:22] <jnthn> Does it do parallel building too? ;)

[14:22] <nine> And it may even work on Windows :D

[14:23] <nine> No parallel building...yet. I've given it some thought though.

[14:23] <jnthn> There's not much of it to exploit in the Rakudo build anyway, tbh

[14:24] <nine> No, I usually don't bother to even type -j for rakudo

[14:28] <jnthn> Darn it. Just re-engineered Supplier::Preserving internals figuring they were to thank for the S17-supply/syntax.t occasional hang. The symptoms fitted and there was a problem. But...it seems not to actually help that problem.

[15:54] <timotimo> parallel builds are still good if you build moar and jvm backends at the same time

[15:58] <nine> With a small fix for macros in targets it now builds nqp. That'd be extreme bootstrapping ;)

[15:58] <timotimo> awesome!

[15:58] <timotimo> i remember talking about this very thing at the austrian (or was is the swiss?) perl workshop

[15:59] <timotimo> having our own bootstrapped make system

[15:59] <timotimo> nqp helpfully already includes a bootstrapped nqp :D

[16:01] <Kaiepi> i wonder if ccache would work for builds

[16:01] <nine> Much usage of perl in nqp's build could be replaced by nqp.

[16:01] <Kaiepi> at least for moar

[16:01] <nine> Turns out, NQP is not that bad a language to build such tools :)

[16:02] <timotimo> it probably can, Kaiepi, but we have a moar.h that includes every include we have, so every time a .h file changes, everything would miss the cache again :(

[16:02] <Kaiepi> ah

[16:05] <Geth> ¦ nqp/nqpmake: 18035e5cde | (Stefan Seifert)++ | tools/make.nqp

[16:05] <Geth> ¦ nqp/nqpmake: Add a basic implementation of make to the build tools

[16:05] <Geth> ¦ nqp/nqpmake: review: https://github.com/perl6/nqp/commit/18035e5cde

[16:05] <nine> Not sure if we'd ever want to use such a thing for anything but I don't know where else to put the code...

[16:20] <timotimo> <3

[16:47] <jnthn> Well...uh...I've managed to not solve the S17-supply/syntax.t bug, but instead reworked Supplier::Preserving sufficiently that it now seems to happen reliably :P

[16:47] <jnthn> I think I know where the problem is

[16:47] <jnthn> (Down in the scary continuation juggling done by `whenever` in the case of a sync subscription)

[16:47] <jnthn> It makes an ordering assumption that isn't upheld here

[16:48] <jnthn> So far as I can tell, anyway

[16:49] <jnthn> Bah, after saying it's now a reliable failure, it fails to fail

[17:03] <Geth> ¦ rakudo/supplier-preserving-refactor: 0562248f61 | (Jonathan Worthington)++ | src/core/Supply.pm6

[17:03] <Geth> ¦ rakudo/supplier-preserving-refactor: Refine Supplier::Preserving semantics

[17:03] <Geth> ¦ rakudo/supplier-preserving-refactor:

[17:03] <Geth> ¦ rakudo/supplier-preserving-refactor: Of note, make sure it never tries to do message sending while holding

[17:03] <Geth> ¦ rakudo/supplier-preserving-refactor: a real lock, since that prevents any kind of downstream `await` taking

[17:04] <Geth> ¦ rakudo/supplier-preserving-refactor: advantage of the 6.d.PREVIEW non-blocking `await` semantics.

[17:04] <Geth> ¦ rakudo/supplier-preserving-refactor:

[17:04] <Geth> ¦ rakudo/supplier-preserving-refactor: These changes were done as part of looking into a hang in the spectest

[17:04] <Geth> ¦ rakudo/supplier-preserving-refactor: <…commit message has 5 more lines…>

[17:04] <Geth> ¦ rakudo/supplier-preserving-refactor: review: https://github.com/rakudo/rakudo/commit/0562248f61

[17:08] * jnthn gives up on it for today

[17:08] <jnthn> At least I solved one nasty segv bug... :)

[17:35] <AlexDaniel> squashable6: next

[17:35] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 6 days and ≈16 hours (2018-04-07 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[17:41] <AlexDaniel> jnthn: I have some good news to you I think

[17:42] <AlexDaniel> I think this is now resolved: https://github.com/rakudo/rakudo/issues/1259

[17:42] <jnthn> Hurrah

[17:42] <jnthn> Then it was the same bug as the one you more recently reported

[17:43] <AlexDaniel> I'd have to update rakudo on the server to be able to tell with 100% certainty, so let's do a bot kaboom…

[17:43] <jnthn> :)

[17:43] * jnthn wanders home...bbl

[18:05] <AlexDaniel> https://github.com/rakudo/rakudo/issues/1660#issuecomment-377584146

[18:05] <AlexDaniel> \o/

[18:05] <AlexDaniel> this is so great!

[18:08] <AlexDaniel> according to whateverable#24 I think it's now segfault-free

[18:09] <AlexDaniel> with only these issues remaining: https://github.com/rakudo/rakudo/issues/1501 https://github.com/rakudo/rakudo/issues/1595 https://github.com/MoarVM/MoarVM/issues/680

[18:09] <AlexDaniel> (these are not segfaults ofc)

[18:10] <AlexDaniel> MasterDuke: \o/

[18:12] <AlexDaniel> \o\

[18:12] <AlexDaniel> /o/

[18:22] <dogbert17> bisect: uptime

[18:22] <bisectable6> dogbert17, 32 minutes and 56 seconds, 202.203125MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[19:31] <Geth> ¦ rakudo: kbucheli++ created pull request #1673: use tmpdir for precompliation/REPL history if home directory is readonly

[19:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1673

[19:55] <Geth> ¦ rakudo: ac5cf2bb01 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm6

[19:55] <Geth> ¦ rakudo: Make ThreadPoolScheduler.cue a multi

[19:55] <Geth> ¦ rakudo:

[19:55] <Geth> ¦ rakudo: The "cue" method takes *many* named parameters, which causes a lot of

[19:55] <Geth> ¦ rakudo: overhead.  Whereas the most common use, namely in from "start { ... }"

[19:55] <Geth> ¦ rakudo: only uses *one* named parameter.  Making it a multi with one required

[19:55] <Geth> ¦ rakudo: named parameter in each candidate, makes the most common call to .cue

[19:55] <Geth> ¦ rakudo: about 5x as fast with 25% fewer allocations.  This makes something like

[19:55] <Geth> ¦ rakudo:

[19:55] <Geth> ¦ rakudo:   await do for ^100000 { start { } }

[19:55] <Geth> ¦ rakudo:

[19:55] <Geth> ¦ rakudo: go from 2.6 seconds wallclock to 2.1 seconds wallclock.

[19:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ac5cf2bb01

[19:59] <jnthn> lizmat++

[20:26] <AlexDaniel> wait what

[20:26] <AlexDaniel> ???

[20:26] <evalable6> AlexDaniel, rakudo-moar ac5cf2bb0: OUTPUT: «Stub code executed␤  in block <unit> at /tmp/GI4BngbxUm line 1␤»

[20:26] <AlexDaniel> ? that's a bug?

[20:26] <AlexDaniel> not in evalable

[20:27] <AlexDaniel> evalable looks at the exit code

[20:27] <AlexDaniel> and in this case it is 0

[20:27] <AlexDaniel> why?

[20:27] <AlexDaniel> 6c: ???

[20:27] <committable6> AlexDaniel, https://gist.github.com/dea4377871e547f291c09a4d3c3330e3

[20:27] <AlexDaniel> all: ???

[20:28] <committable6> AlexDaniel, https://gist.github.com/fe17342e5e38ca9c01ba449311c61b4e

[20:29] <AlexDaniel> m: say ???; say 42

[20:29] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: «Stub code executed␤0␤42␤  in block <unit> at <tmp> line 1␤»

[20:29] <AlexDaniel> oh

[20:29] <AlexDaniel> m: ???; say 42

[20:29] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: «Stub code executed␤42␤  in block <unit> at <tmp> line 1␤»

[20:29] <AlexDaniel> ooooh…

[20:30] <AlexDaniel> so it's something about sinking ???

[20:37] <AlexDaniel> m: my $x = ???; say $x

[20:37] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: «Stub code executed␤0␤  in block <unit> at <tmp> line 1␤»

[20:37] <AlexDaniel> what is 0?

[21:10] <timotimo> s: &term:<???>

[21:10] <SourceBaby> timotimo, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Undeclared routine:␤    term:<???> used at line 6. Did you mean 'term:<now>'?␤␤

[21:10] <timotimo> hm, it's probably directly in the grammar
