[00:07] <Geth> ¦ rakudo: Kaiepi++ created pull request #1609: Fix Metamodel shortname assignments

[00:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1609

[00:38] <MasterDuke> jnthn: around?

[00:45] <jnthn> MasterDuke: Going to bed right now, I'm afraid

[00:45] <jnthn> Will be about tomorrow

[00:46] <MasterDuke> k, think i figured things out anyway

[00:46] <MasterDuke> later...

[00:47] <jnthn> 'night o/

[01:05] <Geth> ¦ roast: Kaiepi++ created pull request #400: Implement Metamodel shortname tests

[01:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/400

[01:21] <Geth> ¦ rakudo: ce08683fbf | (Ben Davies)++ | src/Perl6/Metamodel/Naming.nqp

[01:21] <Geth> ¦ rakudo: Fix Metamodel shortname assignments

[01:21] <Geth> ¦ rakudo:

[01:21] <Geth> ¦ rakudo: Fixes #1606

[01:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ce08683fbf

[01:21] <Geth> ¦ rakudo: 470b38e186 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/Naming.nqp

[01:21] <Geth> ¦ rakudo: Merge pull request #1609 from Kaiepi/metamodel

[01:21] <synopsebot> RAKUDO#1606 [closed]: https://github.com/rakudo/rakudo/issues/1606 [LHF] Wrong output of in CArray.^shortname

[01:21] <Geth> ¦ rakudo:

[01:21] <Geth> ¦ rakudo: Fix Metamodel shortname assignments

[01:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/470b38e186

[01:22] <Geth> ¦ roast: 862ed15a49 | (Ben Davies)++ | S02-names-vars/names.t

[01:22] <Geth> ¦ roast: Implement Metamodel shortname tests

[01:22] <Geth> ¦ roast:

[01:22] <Geth> ¦ roast: See https://github.com/rakudo/rakudo/issues/1606

[01:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/862ed15a49

[01:22] <Geth> ¦ roast: 2018ca5be6 | (Zoffix Znet)++ (committed using GitHub Web editor) | S02-names-vars/names.t

[01:22] <Geth> ¦ roast: Merge pull request #400 from Kaiepi/metamodel

[01:22] <Geth> ¦ roast:

[01:22] <Geth> ¦ roast: Implement Metamodel shortname tests

[01:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2018ca5be6

[01:55] <Kaiepi> PufferBot, help

[01:55] <PufferBot> Kaiepi, address me with "build", "test", or "spectest" to test building Rakudo, running tests, and running Roast's suite respectively on openbsd. Address me with "all" to attempt to run all three sequentially.

[01:55] <Kaiepi> PufferBot, spectest

[01:55] <PufferBot> [openbsd] Running Roast test suite... (this will take a while)

[02:01] <Kaiepi> on top of making it able to run roast, i think i'll make it so it will upload the entire output if builds or tests fail to hastebin, since i can't grep all the useful information to send when that happens

[02:05] <PufferBot> [openbsd] | t/spec/S03-operators/bit.rakudo.moar                            (Wstat: 1280 Tests: 54 Failed: 5)

[02:05] <PufferBot> [openbsd] | t/spec/S32-io/IO-Socket-Async.t                                 (Wstat: 256 Tests: 17 Failed: 0)

[02:05] <PufferBot> [openbsd] | t/spec/S32-io/open.rakudo.moar                                  (Wstat: 512 Tests: 52 Failed: 2)

[02:05] <PufferBot> [openbsd] Roast tests failed.

[02:06] <Kaiepi> the IO-Socket-Async tests fail because my network doesn't support ipv6 atm, but i'm not sure about the others

[02:08] <Zoffix> Kaiepi: are you using IRC::Client for your bot? There's a copy-pasteable example of using :filters to pastebin large output here: https://rakudo.party/post/IRC-Client-Perl-6-Multi-Server-IRC-Module#watchyourmouth (last few lines in code examples)

[02:08] <Zoffix> eco: Pastebin::Gist

[02:08] <buggable> Zoffix, Pastebin::Gist 'Use https://gist.github.com/ as a pastebin': https://github.com/zoffixznet/perl6-Pastebin-Gist

[02:08] <Zoffix> And you can use that module instead of Pastebin::Shadowcat

[02:09] <Kaiepi> yeah, i am

[02:09] <Zoffix> AlexDaniel should also have this feature already implemented somewhere in https://github.com/perl6/whateverable

[02:39] <travis-ci> Rakudo build failed. Zoffix Znet 'Merge pull request #1609 from Kaiepi/metamodel

[02:39] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/352139546 https://github.com/rakudo/rakudo/compare/2a3947816f83...470b38e18622

[02:39] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/04-nativecall/09-nativecast.t test file failed.

[02:42] <Kaiepi> ?

[03:01] <Kaiepi> PufferBot, build

[03:01] <PufferBot> [openbsd] Building Rakudo...

[03:03] <PufferBot> [openbsd] Build successful!

[03:08] <Kaiepi> PufferBot, test

[03:08] <PufferBot> [openbsd] The current branch has uncommitted changes. Please tell Kaiepi to commit or reset any changes made.

[03:08] <Kaiepi> PufferBot, test

[03:08] <PufferBot> [openbsd] Testing Rakudo...

[03:09] <PufferBot> [openbsd] Tests passed!

[03:09] <Kaiepi> weird

[04:01] <Kaiepi> PufferBot, spectest

[04:01] <PufferBot> [openbsd] Running Roast test suite... (this will take a while)

[04:14] <Kaiepi> shit, typo prevented the output from getting uploaded

[04:52] <Kaiepi> alright this should upload the output now

[04:52] <Kaiepi> PufferBot, spectest

[04:52] <PufferBot> [openbsd] Running Roast test suite... (this will take a while)

[05:03] <PufferBot> [openbsd] | t/spec/S02-lexical-conventions/finish-pod.t                     (Wstat: 65280 Tests: 0 Failed: 0)

[05:03] <PufferBot> [openbsd] | t/spec/S03-operators/bit.rakudo.moar                            (Wstat: 1280 Tests: 54 Failed: 5)

[05:03] <PufferBot> [openbsd] | t/spec/S32-io/IO-Socket-Async.t                                 (Wstat: 256 Tests: 17 Failed: 0)

[05:03] <PufferBot> [openbsd] | t/spec/S32-io/open.rakudo.moar                                  (Wstat: 512 Tests: 52 Failed: 2)

[05:03] <PufferBot> [openbsd] Roast tests failed. See the output at http://fpaste.scsys.co.uk/575866

[05:20] <Kaiepi> whoops, forgot to change t/spec/S02-lexical-conventions/finish-pod.t back from when i was testing

[08:32] <AlexDaniel> weekly: dogbert++ worked on old rakudo tickets, closing 7 and marking 22 with `testneeded`

[08:32] <notable6> AlexDaniel, Noted!

[08:33] <AlexDaniel> hmmm reportable is showing new→open instead of new→testneeded :S

[08:54] <AlexDaniel> weekly: reportable: https://gist.github.com/fc1121feadf9daa523743e9412a048b6

[08:54] <notable6> AlexDaniel, Noted!

[09:05] <AlexDaniel> (already fixed that reportable issue mentioned above)

[10:25] <dogbert2_> AlexDaniel: the "is showing new→open instead of new→testneeded" is probably my fault, I have a tendency to change 'new' to 'open'. Perhaps I should refrain from doing that.

[11:47] <Geth> ¦ rakudo/master: 5 commits pushed by (Daniel Green)++, (Elizabeth Mattijsen)++

[11:47] <Geth> ¦ rakudo/master: 48c46fa784 | Make 2-elem infix:<,> special cases more generic

[11:47] <Geth> ¦ rakudo/master: 9007935736 | Extract infix:<,> Slip handling to a common sub

[11:47] <Geth> ¦ rakudo/master: ddf0007855 | Remove now non-applicable comments

[11:47] <Geth> ¦ rakudo/master: d5a148c07c | Clean up infix:<,> multis

[11:47] <Geth> ¦ rakudo/master: 52e66ad30c | Merge pull request #1608 from MasterDuke17/make_2_elem_infix_comma_special_cases_more_generic

[11:47] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/470b38e18622...52e66ad30c05

[11:58] <AlexDaniel> dogbert2_: it happens automatically when you write a message

[11:58] <AlexDaniel> so whether you change that or not shouldn't matter

[11:58] <AlexDaniel> … I think…

[11:58] <AlexDaniel> anyway it's already fixed so you can continue doing whatever you want! ♥

[12:12] <Geth> ¦ nqp: 12d2482d45 | usev6++ | src/vm/jvm/QAST/Compiler.nqp

[12:12] <Geth> ¦ nqp: [JVM] Use sub needs_cond_passed for repeated tests

[12:12] <Geth> ¦ nqp:

[12:12] <Geth> ¦ nqp: That's what we do for MoarVM, too.

[12:12] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/12d2482d45

[12:12] <Geth> ¦ nqp: 868bd54ff8 | usev6++ | src/vm/jvm/QAST/Compiler.nqp

[12:12] <Geth> ¦ nqp: [JVM] Fix slurpies in conditional ops

[12:12] <Geth> ¦ nqp:

[12:12] <Geth> ¦ nqp: This mirrors the fix for MoarVM, that offers some explanation, also:

[12:12] <Geth> ¦ nqp: https://github.com/perl6/nqp/commit/8e7201eb64

[12:12] <Geth> ¦ nqp:

[12:12] <Geth> ¦ nqp: Fixes RT #105872.

[12:12] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/868bd54ff8

[12:12] <synopsebot> RT#105872 [resolved]: https://rt.perl.org/Ticket/Display.html?id=105872 [BUG] 42, 44, 22 -> *@a { say @a.perl }

[12:31] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Merge pull request #1608 from MasterDuke17/make_2_elem_infix_comma_special_cases_more_generic

[12:31] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/352292045 https://github.com/rakudo/rakudo/compare/470b38e18622...52e66ad30c05

[12:38] <dogbert2_> lizmat: are you around?

[12:55] <lizmat> sorta

[12:56] <dogbert2_> lizmat: time for a question?

[12:56] <lizmat> sure

[12:56] <dogbert2_> cool, could you try the code example in RT #127030 in order to see if it works on your Mac?

[12:57] <synopsebot> RT#127030 [open]: https://rt.perl.org/Ticket/Display.html?id=127030 [BUG] await start { qx/../ } doesn't wait

[12:58] <lizmat> say (await start { qx/echo foo/ }).perl  ?

[12:58] <dogbert2_> yes

[12:58] <lizmat> $ 6 'say (await start { qx/echo foo/ }).perl'

[12:58] <lizmat> "foo\n"

[12:58] <dogbert2_> which means that it works :-)

[12:59] <lizmat> okidoki  :-)

[12:59] <dogbert2_> many thanks

[13:14] <jnthn> That probably got fixed when Proc (and so qx, run, etc.) were re-implemented in terms of Proc::Async

[13:19] <dogbert2_> jnthn: thx, we had some problems bisecting this with the bot

[13:36] <[Coke]> AlexDaniel: we don't have one yet

[13:43] <dogbert2_> lizmat: another question, is RT #122137 still relevant?

[13:43] <synopsebot> RT#122137 [open]: https://rt.perl.org/Ticket/Display.html?id=122137 Type object seem to bind in item or push

[13:45] <lizmat> looks to me it can be closed

[13:45] <lizmat> m: my @a; my $c = Int; @a.push($c); $c = Str; dd @a

[13:45] <camelia> rakudo-moar 52e66ad30: OUTPUT: «Array @a = [Int]␤»

[13:46] <dogbert2_> lizmat: thx, I'll close it unless you change your mind :-)

[13:46] <lizmat> m: my @a; my $c = Int; @a.push: $($c,1); $c = Str; dd @a # maybe not

[13:46] <camelia> rakudo-moar 52e66ad30: OUTPUT: «Array @a = [(Str, 1),]␤»

[13:47] <dogbert2_> perhaps the issue just need an update ...

[13:47] <lizmat> m: my $c = Int; my $b := ($c,); $c = Str; dd $b

[13:47] <camelia> rakudo-moar 52e66ad30: OUTPUT: «(Str,)␤»

[13:47] <lizmat> seems to be in the List creation

[13:47] <lizmat> hmmm

[13:47] <lizmat> but that is correct

[13:48] <lizmat> in List creation, we don't decont

[13:48] <lizmat> in Array creation, we recont

[13:48] <lizmat> m: my $c = Int; my $b := [$c,]; $c = Str; dd $b

[13:48] <camelia> rakudo-moar 52e66ad30: OUTPUT: «[Int]␤»

[13:49] <lizmat> so yes, it can be closed

[13:51] <lizmat> timotimo jnthn : could --profile interfere with JITting >

[13:51] <lizmat> ?

[13:54] <dogbert2_> lizmat: thx, closed

[14:11] <lizmat> hmmm.,..  looking at a --profile of 'for ^1000000 { my $b = a => 42 }', it appears that:

[14:11] <lizmat> 1. a => 42 is not constant folded

[14:11] <lizmat> 2. that it calls Pair.new directly, rather than infix:«=>»

[14:12] <lizmat> which I think is wrong in case someone would want to add an infix:«=>» candidate

[14:14] <lizmat> m: sub infix:«=>»(Str:D,Int:D) { "foo" }; dd ("a" => 42)

[14:14] <camelia> rakudo-moar 52e66ad30: OUTPUT: «"foo"␤»

[14:14] <lizmat> m: sub infix:«=>»(Str:D,Int:D) { "foo" }; dd (a => 42)

[14:14] <camelia> rakudo-moar 52e66ad30: OUTPUT: «:a(42)␤»

[14:15] * [Coke] wonders what a bare a is in that case.

[14:15] <lizmat> Str:D

[14:16] <lizmat> m: dd (a => 42).value

[14:16] <camelia> rakudo-moar 52e66ad30: OUTPUT: «42␤»

[14:16] <lizmat> m: dd (a => 42).key   # duh

[14:16] <camelia> rakudo-moar 52e66ad30: OUTPUT: «"a"␤»

[14:18] <lizmat> oddly enough, using a => 42 as a named parameter, *does* constant fold apparently

[14:26] <dogbert2_> m: multi infix:<+>(Real, Pair $ where {.value === True}) { 42 }; say 1 + :a

[14:26] <camelia> rakudo-moar 52e66ad30: OUTPUT: «===SORRY!===␤Circularity detected in multi sub types for &infix:<+>␤»

[14:42] <Zoffix> Looks like that's 'cause `a => 42` compiles to Pair.new, while when it's in an arglist it compiles to QAST::SpecialArg

[14:42] <Zoffix> m: sub infix:«=>» (|) {say "my pair"}; a => 42

[14:42] <camelia> rakudo-moar 52e66ad30: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "a => 42" in sink context (line 1)␤»

[14:43] <lizmat> I would argue that a => 42 compiles to Pair.new is wrong

[14:43] <lizmat> 1: it should probably constant fold

[14:44] <lizmat> 2: it should call infix:«=>»

[14:44] <Zoffix> +1

[14:45] <lizmat> looking into that now

[14:46] <Zoffix> cool

[14:50] <timotimo> a => 1 in a call shouldn't cause a call to &infix:«=>» because it's syntactically Something Else

[14:50] <timotimo> but "a" => 1 definitely should

[14:52] <lizmat> hmmm...

[14:52] <dogbert2_> Zoffix, lizmat: Rt #131574

[14:53] <synopsebot> RT#131574 [new]: https://rt.perl.org/Ticket/Display.html?id=131574 [BUG] Incorrect circularity detection with infix:<+>

[15:04] <lizmat> hmmm.. both 'foo( a => 42)' and '$b = a => 42' are handled by "fatarrow" and I don't seem to be able to find a way to distinguish the two cases :-(

[15:15] <dogbert2_> ZOFFLOP: t/spec/S10-packages/basic.rakudo.moar tests #47-48 # ok ?

[15:19] <MasterDuke> oh, i had a flop the other day with t/spec/S17-supply/stable.t

[15:46] <lizmat> hmmm.. given a QAST::Op, how can I determine its :name parameter ?

[15:46] <Zoffix> lizmat: .name method

[15:47] <lizmat> that's what I though, but apparently not or there is something else going on  :-)

[15:47] <Zoffix> m: use QAST:from<NQP>; my $o := QAST::Op.new: :op<meows>, :name<foos>; say $o.op; say $o.name

[15:47] <camelia> rakudo-moar 52e66ad30: OUTPUT: «meows␤foos␤»

[15:48] <lizmat> yeah :-(

[15:49] <lizmat> ok, maybe some fresh air will help&

[15:59] <japhb> lizmat: Stand in the middle of a grove of trees for extra oxygen content?  ;-)

[18:26] <Kaiepi> m: my int $a := int.Range.max; say $a +> 16

[18:26] <camelia> rakudo-moar 52e66ad30: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot bind to natively typed variable '$a'; use assignment instead␤at <tmp>:1␤------> 3my int $a := int.Range.max7⏏5; say $a +> 16␤»

[18:26] <Kaiepi> m: my int $a = int.Range.max; say $a +> 16

[18:26] <camelia> rakudo-moar 52e66ad30: OUTPUT: «140737488355327␤»

[18:26] <Kaiepi> m: my Int $a = int.Range.max; say $a +> 16

[18:26] <camelia> rakudo-moar 52e66ad30: OUTPUT: «140737488355327␤»

[18:28] <Kaiepi> m: my int $a = int.Range.min; say $a +> 64

[18:28] <camelia> rakudo-moar 52e66ad30: OUTPUT: «-9223372036854775808␤»

[18:28] <Kaiepi> m: my Int $a = int.Range.min; say $a +> 64

[18:28] <camelia> rakudo-moar 52e66ad30: OUTPUT: «-1␤»

[18:28] <Kaiepi> ok so it's not just me that the roast tests for that fail for

[18:29] <geekosaur> I think there's an open bug for that one

[18:30] <Zoffix> Kaiepi: aren't they fudged?

[18:30] <Zoffix> How are you running the tests?

[18:30] <Kaiepi> they fail with both make spectest and running them manually with perl6

[18:32] <Zoffix> Kaiepi: if you're running manually with perl6 by using `perl6 t/spec/S03-operators/bit.t` then yeah, it'll fail, because fudge doesn't get applied. You need to use `t/fudgeandrun t/spec/S03-operators/bit.t` don't know why they'd show up failing with `make spectest`

[18:32] <Zoffix> Ahh.

[18:33] <Zoffix> Kaiepi: are you using a fork? Perhaps it's not up to date with latest of stuff from origin?

[18:33] <Zoffix> ~4-10 days ago bitshift changes were made and more tests in that group were fudged.

[18:33] <Zoffix> git pull --rebase https://github.com/perl6/roast/

[18:34] <Kaiepi> ohh, that's it

[18:34] <Zoffix> \o/

[18:35] <samcv> Zoffix: is the result from nqp::getcomp('perl6').language_version in some special variable or do i need to query it myself

[18:35] <samcv> to see what version is being run

[18:35] <samcv> or does it only working during compilation?

[18:36] <Zoffix> samcv: it works only during compilation and nqp::getcomp('perl6').language_version is all I know of, but I don't know much about this area.

[18:36] <samcv> well as long as it works inside a method and returns the version that will work for me

[18:37] <Zoffix> If it's for a core method, then it'd just be whatever version core was compiled in.

[18:39] <Zoffix> s: Perl, 'version', \()

[18:39] <SourceBaby> Zoffix, Something's wrong: ␤ERR: Could not find candidate that can do \()␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 29␤  in block <unit> at -e line 6␤␤

[18:39] <Zoffix> s: Perl, 'version'

[18:39] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/52e66ad30/src/core/Perl.pm6#L1

[18:39] <Zoffix> just does `Version.new(nqp::p6box_s(nqp::getcomp('perl6').language_version()))`

[18:41] <[Coke]> https://github.com/rakudo/rakudo/blob/52e66ad30/src/core/Perl.pm6#L16-L21 - that list used to be if def'd because the parrot list was different. Can we collapse it back down to a single path now? (does js change the picture?)

[18:42] <Zoffix> Yeah, looks identical

[18:43] <Geth> ¦ rakudo: 71012beb59 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Perl.pm6

[18:43] <Geth> ¦ rakudo: Merge duplicate `if`/`endif`ed content

[18:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/71012beb59

[18:50] <Zoffix> Kaiepi: FWIW, I see you're a member of perl6 github org and you should have a commit bit to roast repo. So you don't need to use a fork. Just use the master and commit what you can directly and what you can't commit in a branch and PR

[18:51] <Kaiepi> alright

[18:53] <samcv> there doesn't seem much documentation of how to use Encoding::Encoder object to use replacements in docs.perl6.org

[18:56] <lizmat> notable6: weekly

[18:56] <notable6> lizmat, 3 notes: https://gist.github.com/0b1ae482bc7e6127974f232c36657862

[18:56] <samcv> or if anybody is using that feature or if it's specced hm.

[18:57] <Kaiepi> m: my \PATH = '.tmp'; my $fh = open PATH, :truncate, :create; say $fh; $fh.close if defined $fh

[18:57] <camelia> rakudo-moar 71012beb5: OUTPUT: «open is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub open at src/RESTRICTED.setting line 9␤  in block <unit> at <tmp> line 1␤␤»

[18:57] <samcv> i would like to have a unified method of decoding/encoding with/without replacement and with/without strict/permissive decoding/encoding. but since there's no documentation on it, people may not be using it yet

[18:59] <samcv> plus the fact there is Encoding::Encoder for replacements and without replacements. which seems unneeded. and i was ENcoding::Decoder object which didn't need two different classes one for replacement and one without

[18:59] <samcv> greppable6: Encoding::Encoder

[19:00] <greppable6> samcv, 1 lines, 1 modules: https://gist.github.com/a1820fd73a164df388b3a5e7a6d58547

[19:01] <samcv> and i'm not seeing any spectest coverage

[19:07] <samcv> releasable6: status

[19:07] <releasable6> samcv, Next release in 4 days and ≈23 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[19:07] <releasable6> samcv, Details: https://gist.github.com/636141c434c991c83e6e281b0ad1b654

[19:10] * mst blinks

[19:11] <mst> for some reason I read that as Encoding::Foobar

[19:11] <mst> and thought "yes, it always is when I try"

[19:13] <Geth> ¦ rakudo: samcv++ created pull request #1611: Add support to Encoding::Decoder and Buf.decode to use replacements

[19:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1611

[19:14] <samcv> hmm something happened with that PR

[19:14] <[Coke]> there are a LOT of commits on that PR.

[19:14] <[Coke]> ah, too slow.

[19:15] <samcv> oops what have i done

[19:15] <samcv> i think i wrote over my branch

[19:15] <samcv> oh well that's fine

[19:16] <samcv> though not sure where those comments came from.....

[19:19] <samcv> oh it's going into nom... oops

[19:19] <samcv> not sure how that happned

[19:23] <samcv> `git remote set-head origin master` fixd it :)

[19:23] <samcv> so now shouldn't ever have that happen again

[19:34] <travis-ci> Rakudo build failed. Zoffix Znet 'Merge duplicate `if`/`endif`ed content'

[19:34] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/352485546 https://github.com/rakudo/rakudo/compare/52e66ad30c05...71012beb59bb

[19:34] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/04-nativecall/09-nativecast.t test file failed.

[20:12] <lizmat> notable6: weekly

[20:12] <notable6> lizmat, 3 notes: https://gist.github.com/b5dc27c1c26f13ef2446f58fdab58d7b

[20:12] <lizmat> notable6: clear weekly

[20:12] <notable6> lizmat, Moved existing notes to “weekly_2018-03-12T20:12:08Z”

[21:15] <Kaiepi> the tests in t/spec/S32-io/open.t that were failing on my system were failing because opening files with :truncate and :create only works if the file is opened as wo or rw

[21:15] <Kaiepi> is this something that should be fixed from rakudo or from roast?

[21:29] <Kaiepi> i have a fix worked out for rakudo, but i'm not sure if making it possible to write to files opened like this is a side effect that could break stuff or not

[21:30] <Zoffix> Kaiepi: what kind of fix?

[21:31] <Zoffix> To make the tests pass I mean?

[21:31] <Zoffix> I think I'm just gonna throw them out. It doesn't make sense for something you opened in "read only" mode to be created and especially truncated

[21:32] <Zoffix> The fix would be to throw on such use

[21:33] <Kaiepi> what i wrote was to make the file open with rw instead of ro if :truncate and :create are passed, but i didn't think it was quite right

[21:36] <geekosaur> Zoffix is right, those should throw on ro

[21:38] <bartolin> fwiw, I just added a workaround for the JVM backend to make the tests for opening a file with :truncate and :create pass: https://github.com/perl6/nqp/commit/a90c01152f. We can can remove that workaround, it the test is removed.

[21:39] <Zoffix> Oh, i was wondering why I couldn't repro that on camelia anymore :)

[21:39] <bartolin> Well, the nqp version hasn't been bumped, yet.

[21:40] <Zoffix> I mean repro the throwage

[21:40] <Zoffix> r: say "/tmp/zxczxsdzdasdsadsdasdasdsads".IO.open: :truncate, :create;

[21:40] <camelia> rakudo-moar 71012beb5, rakudo-jvm a92950fb4: OUTPUT: «IO::Handle<"/tmp/zxczxsdzdasdsadsdasdasdsads".IO>(opened)␤»

[21:42] <Zoffix> R#1614

[21:42] <synopsebot> R#1614 [open]: https://github.com/rakudo/rakudo/issues/1614 .open with :truncate/:create violates "read only" default open mode

[21:42] <bartolin> hmm, a92950fb4 is quite old. It throws for me locally on 2a3947816f

[21:43] <Geth> ¦ roast: 24822cf173 | (Zoffix Znet)++ (committed using GitHub Web editor) | S32-io/open.t

[21:43] <Geth> ¦ roast: Throw out questionable proptests

[21:43] <Geth> ¦ roast:

[21:43] <Geth> ¦ roast: - They fail on JVM and apparently on MoarVM on some OSes too:

[21:43] <Geth> ¦ roast:     https://irclog.perlgeek.de/perl6-dev/2018-03-12#i_15913886

[21:43] <Geth> ¦ roast: - The implied mode is "read only", which doesn't jive much with creation

[21:43] <Geth> ¦ roast:   and especially with trucation. Filed as https://github.com/rakudo/rakudo/issues/1614

[21:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/24822cf173

[21:43] <Geth> ¦ roast: 9a417ad619 | (Zoffix Znet)++ (committed using GitHub Web editor) | S32-io/open.t

[21:43] <Geth> ¦ roast: Adjust plan

[21:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9a417ad619

[21:46] <Zoffix> .seen cygx

[21:46] <yoleaux> I saw cygx 17 Feb 2018 13:22Z in #perl6: <cygx> Xliff: I left a comment on that gist

[21:46] <bartolin> just for the records: on the JVM those options are translated to StandardOpenOption CREATE and TRUNCATE_EXISTING. Both are just ignored when a file is opened only for reading: https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html#open-java.nio.file.Path-java.util.Set-java.nio.file.attribute.FileAttribute...-

[21:46] <Zoffix> .tell cygx I think you designed .open() modes. Would you like to add any comments on https://github.com/rakudo/rakudo/issues/1614 ?

[21:46] <yoleaux> Zoffix: I'll pass your message to cygx.

[21:47] * Zoffix &

[22:15] <Geth> ¦ rakudo: 0d796fb0da | (Samantha McVey)++ | src/core/Buf.pm6

[22:15] <Geth> ¦ rakudo: Add support for replacement and strict setting with Buf.decode

[22:15] <Geth> ¦ rakudo:

[22:15] <Geth> ¦ rakudo: Allows the user to set a replacement that is used when encountering an

[22:15] <Geth> ¦ rakudo: undecodable character. Allows setting strict to throw (or replace if a

[22:15] <Geth> ¦ rakudo: replacement is provided) on an undecodable character.

[22:15] <Geth> ¦ rakudo:

[22:15] <Geth> ¦ rakudo: Replacement support currently only working with windows-1252 and

[22:15] <Geth> ¦ rakudo: windows-1251 at the moment.

[22:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0d796fb0da

[22:15] <Geth> ¦ rakudo: ea92f550af | (Samantha McVey)++ | 2 files

[22:15] <Geth> ¦ rakudo: Add support to Encoding::Decoder to use replacements

[22:15] <Geth> ¦ rakudo:

[22:15] <Geth> ¦ rakudo: This also makes sure we setup decodestream on MoarVM to explicitly

[22:15] <Geth> ¦ rakudo: use permissive decoding, so that is set properly when my decodestream

[22:15] <Geth> ¦ rakudo: patch lands in MoarVM.

[22:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ea92f550af

[22:15] <Geth> ¦ rakudo: 015d5a191d | (Samantha McVey)++ (committed using GitHub Web editor) | 2 files

[22:15] <Geth> ¦ rakudo: Merge pull request #1611 from samcv/decodestream

[22:15] <Geth> ¦ rakudo:

[22:15] <Geth> ¦ rakudo: Add support to Encoding::Decoder and Buf.decode to use replacements

[22:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/015d5a191d

[22:22] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/03/12/2018-11-lockless-gems/

[22:24] <Geth> ¦ rakudo: Kaiepi++ created pull request #1615: Throw when opening read-only files with truncate and create flags

[22:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1615

[23:01] <travis-ci> Rakudo build passed. Samantha McVey 'Merge pull request #1611 from samcv/decodestream

[23:01] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/352574108 https://github.com/rakudo/rakudo/compare/71012beb59bb...015d5a191d72

[23:24] <AlexDaniel> notable6: weekly

[23:24] <notable6> AlexDaniel, No notes for “weekly”

[23:24] <AlexDaniel> notable6: weekly clear

[23:24] <notable6> AlexDaniel, No notes for “weekly”

[23:24] <AlexDaniel> notable6: clear weekly

[23:24] <notable6> AlexDaniel, No notes for “weekly”

[23:24] <AlexDaniel> weekly: clear

[23:24] <notable6> AlexDaniel, No notes for “weekly”

[23:25] <AlexDaniel> lizmat: ↑ note that all variants work now, no need to worry :)
