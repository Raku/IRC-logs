[00:00] *** TimToady left
[00:20] *** TimToady joined
[00:53] *** Kaiepi joined
[02:48] *** lizmat left
[03:09] <Geth> ¦ roast/car-grant-constants: 6637791976 | (Zoffix Znet)++ | S04-declarations/constant-6.d.t

[03:09] <Geth> ¦ roast/car-grant-constants: [CaR Grant] Spec Positional and Associative constants

[03:09] <Geth> ¦ roast/car-grant-constants: review: https://github.com/perl6/roast/commit/6637791976

[03:10] *** Kaiepi left
[03:10] <Geth> ¦ rakudo/car-grant-constants: 4854c05c02 | (Zoffix Znet)++ | t/spectest.data

[03:10] <Geth> ¦ rakudo/car-grant-constants: [CaR Grant] Add S04-declarations/constant-6.d.t to list of tests

[03:10] <Geth> ¦ rakudo/car-grant-constants: review: https://github.com/rakudo/rakudo/commit/4854c05c02

[03:11] *** Kaiepi joined
[03:18] *** lizmat joined
[03:23] *** lizmat left
[03:55] <Geth> ¦ nqp: 6e925d82a0 | 陈梓立++ (committed using GitHub Web editor) | src/QRegex/P6Regex/Optimizer.nqp

[03:55] <Geth> ¦ nqp: Flatten nested condition

[03:55] <Geth> ¦ nqp: 

[03:55] <Geth> ¦ nqp: For improving readability

[03:55] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6e925d82a0

[03:55] <Tison> nqp: sub f($x) { return if $x }

[03:55] <camelia> nqp-moarvm: OUTPUT: «Unable to parse expression in blockoid; couldn't find final '}'  at line 2, near "return if "␤   at gen/moar/stage2/NQPHLL.nqp:701  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQPHLL.nqp:708  (/home/camelia/rakudo-…»

[03:55] <Tison> nqp: sub f($x) { return 42 if $x }

[03:55] <camelia> nqp-moarvm: ( no output )

[03:57] <Tison> ^^ we do not support `return <nothing> if` in NQP, is it ok to impl it? surely we have alternations

[04:05] *** skids joined
[04:20] <Tison> nqp: sub f($x) { return -4 } say(f(42))

[04:20] <camelia> nqp-moarvm: OUTPUT: «Confused at line 2, near "sub f($x) "␤   at gen/moar/stage2/NQPHLL.nqp:701  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQP.nqp:921  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/nqp.moarvm:comp_unit)␤ from gen/mo…»

[04:20] <Tison> nqp: sub f($x) { return -4 }; say(f(42));

[04:20] <camelia> nqp-moarvm: OUTPUT: «-4␤»

[04:20] <Tison> nqp: sub f($x) { return    -4 }; say(f(42));

[04:20] <camelia> nqp-moarvm: OUTPUT: «␤»

[04:21] <Tison> we assume between `return` and `<EXPR>` there is exactly ONE \s in fact

[04:30] <Geth> ¦ nqp: 049f5a6841 | 陈梓立++ (committed using GitHub Web editor) | src/NQP/Grammar.nqp

[04:30] <Geth> ¦ nqp: Update Grammar.nqp

[04:30] <Geth> ¦ nqp: 

[04:30] <Geth> ¦ nqp: 1. Remove unless `\s` to make grammar more clear (sure we use `rule`,

[04:30] <Geth> ¦ nqp:     it's done by how `rule` works)

[04:30] <Geth> ¦ nqp: 

[04:30] <Geth> ¦ nqp: 2. Enable `return   -42` works as `return -42`, that is, we don't assume 

[04:30] <Geth> ¦ nqp:    there is exact ONE \s between `return` and `<EXPR>`, the same on `make`

[04:30] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/049f5a6841

[04:35] *** AlexDaniel left
[04:53] *** Tison left
[05:01] *** Tison joined
[05:20] *** skids left
[05:36] *** AlexDaniel joined
[05:54] <Tison> If anyone can help to look at this problem

[05:54] <Tison> https://gist.github.com/W4anD0eR96/6d3c75f81ee36d7586d9be96b54dc71c

[05:55] <Tison> I get lost how QAST nested

[05:56] <Tison> I think the problem is I cannot simply use `:node($/)`, but don't know how to deal with it

[05:57] *** Kaiepi left
[05:57] *** Kaypie joined
[06:22] *** [Tux] left
[06:37] *** Merfont joined
[06:39] *** Kaypie left
[06:53] *** [Tux] joined
[06:54] *** Tison left
[07:07] *** robertle joined
[07:17] *** Tison joined
[07:24] *** lizmat joined
[07:24] *** Tison left
[07:28] <AlexDaniel> weekly: 29000 commits in rakudo repository (hopefully)

[07:28] <notable6> AlexDaniel, Noted!

[07:29] *** Tison joined
[08:01] *** Merfont left
[08:02] *** PufferBot joined
[08:03] *** Kaiepi joined
[08:11] <lizmat> .

[08:39] *** brrt joined
[08:40] <Tison> hello lizmat

[08:40] <Tison> could you plz take a look at this QAST::Op relative stuff

[08:41] <Tison> https://gist.github.com/W4anD0eR96/6d3c75f81ee36d7586d9be96b54dc71c

[08:41] <Tison> I think the problem is I cannot simply use `:node($/)`, but don't know how to deal with it

[08:44] *** AlexDaniel left
[09:02] <brrt> good *

[09:09] <[Tux]> Rakudo version 2018.05-54-g148d7c56a - MoarVM version 2018.05-80-gc58dadb1a

[09:09] <[Tux]> csv-test-xs-20      0.449 -  0.474

[09:09] <[Tux]> csv-ip5xs           0.840 -  0.848

[09:09] <[Tux]> test-t --race       0.951 -  0.992

[09:09] <[Tux]> test-t              2.250 -  2.280

[09:09] <[Tux]> csv-ip5xs-20        8.221 -  8.751

[09:09] <[Tux]> test                8.570 -  9.032

[09:09] <[Tux]> test-t-20 --race   14.232 - 16.187

[09:09] <[Tux]> csv-parser         24.134 - 24.866

[09:09] <[Tux]> test-t-20          39.959 - 43.816

[09:09] <[Tux]> 2018-05-08 09:54:19 test-t 2.268

[09:09] <[Tux]> 2018-06-06 09:41:06 test-t 2.251

[09:09] <[Tux]> 2018-06-06 09:37:28 test-t 2.251

[09:09] <[Tux]> 2018-06-08 11:06:31 test-t 2.250

[09:09] <[Tux]> 2018-05-07 18:35:13 test-t 2.227

[09:09] <[Tux]> :) :)

[09:13] <brrt> is that good?

[09:14] <brrt> oh, i guess it is

[09:14] <brrt> although i'm not sure

[09:23] <lizmat> Tison: I think moritz timotimo Zoffix are more experienced in QAST matters than me

[09:37] <[Tux]> 2.25 is almost the fastest run ever

[09:43] <brrt> :-)

[09:48] <Geth> ¦ rakudo: 95aa77c944 | (Elizabeth Mattijsen)++ | t/01-sanity/56-use-isms.t

[09:48] <Geth> ¦ rakudo: Add tests for 'use isms <Perl5>'

[09:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/95aa77c944

[09:56] <Tison> ok

[10:18] *** brrt left
[10:47] *** Zoffix joined
[10:47] <Zoffix> Tison: I don't get. What's the problem with that QAST?

[10:47] <yoleaux> 7 Jun 2018 15:33Z <raiph> Zoffix: Thanks for ^^^ post. "There are some limitations to it (e.g. methods on classes)" Isn't that a pretty big hole in the cheese? Might Rakudo theoretically one day (say, 5 years from now given corporate funding) be able to load `:ver` / `:auth` / `:api` versioned cores, compiling a compunit with its matching core to sharply reduce the siz

[10:49] <Zoffix> Tison: :node($/) just adds a reference to where in the code that stuff is. Mostly for error reporting.

[10:49] <Zoffix> m: 0.32423423432432423

[10:49] <camelia> rakudo-moar 95aa77c94: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant rational 0.32423423432432423 in sink context (line 1)␤»

[10:49] <Zoffix> ^ like here

[10:50] *** AlexDaniel joined
[10:51] <Zoffix> Tison: it's not where how - QAST::Op(callmethod new) is added. It's added to that tree elsewhere, and I'm assuming it still expects the top level node to be an ACCEPTS call, so it just pushes to it, hence the nesting issue 

[10:51] <Zoffix> Tison: also, why `isnull` call?

[10:52] *** travis-ci joined
[10:52] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Add tests for 'use isms <Perl5>''

[10:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/389646090 https://github.com/rakudo/rakudo/compare/148d7c56af91...95aa77c94459

[10:52] *** travis-ci left
[10:52] <buggable> [travis build above] ☠ All failures are due to: failed make test (4 failures). Across all jobs, only t/05-messages/02-errors.t test file failed.

[10:54] <Zoffix> That only detect nulls, like nqp::null

[10:54] <Tison> is calling `isfalse` ok?

[10:56] <Zoffix> I think it should be nqp::p6bool(nqp::isfalse()), otherwise you'd be getting `1` instead of `True`

[10:56] <Zoffix> QAST::Op.new: :op<p6bool>, QAST::Op.new: :op<isfalse>, ...

[10:56] <Tison> I got error message "Arg count 3 doesn't equal required operand count 2 for op 'isfalse'", so I dump the ast, thinking that `- QAST::Op(callmethod new) ` should get one more nest level

[10:57] *** brrt joined
[10:58] <Tison> I am working on NQP, so `isfalse` is enough, also there is no `p6bool`

[10:58] <Zoffix> Tison: oh, is this for NQP? Then it don't need p6bool 

[11:00] <Tison> Right. The nesting issue, I think `QAST::Op.new(  :op<isfalse>,  QAST::Op.new( :op<callmethod>,  ...)` should apply nqp::isfalse on the result of callmethod, but actually it reports "Arg count 3 doesn't equal required operand count 2 for op 'isfalse'

[11:00] <Zoffix> Tison: that's because the child node (callmethod new) is the child of isfalse instead of being the child of callmethod ACCEPTS

[11:01] <Zoffix> Tison: :node($/) does NOT add the children. That's just the annotation. They children are pushed elsewhere, presumable in EXPR method

[11:01] <Tison> well..

[11:06] <Tison> then how to get the correct nesting, say (callmethod new) becomes the child of (callmethod ACCEPTS)

[11:07] <Zoffix> Tison: dunno, find where the children are added and see if you can tell it to add them differently to this node

[11:07] <Zoffix> For finding where, I just add debug prints, conditioned  on an env var: https://perl6.party/post/Perl-6-Core-Hacking-QASTalicious#extradebugging

[11:07] <Tison> ok

[11:09] <Zoffix> For telling it to add them differently, depending on what it is, you could add an annotation and then at the place where kids are added, check if it exists (.has_ann I think it is, or just get its value, .ann: "the-name"): https://gist.github.com/zoffixznet/c2ac523a91871be5b663d3277e3bdb13

[11:10] <Zoffix> That's if there's no easy way to figure out the right place to add kids without the annotation.

[11:11] <Zoffix> It might not be method EXPR, but just stuff where EXPR things are looked at directly, like $<EXPR>  though I don't see anything kid-pushing in src/NQP/Actions.nqp.... Maybe it's not with EXPR :/

[11:11] *** Zoffix left
[11:14] <Geth> ¦ rakudo/spesh-plugins: 51ff83c7ca | (Jonathan Worthington)++ | 3 files

[11:14] <Geth> ¦ rakudo/spesh-plugins: Use a MoarVM spesh plugin for private method calls

[11:14] <Geth> ¦ rakudo/spesh-plugins: 

[11:14] <Geth> ¦ rakudo/spesh-plugins: For those that we can resolve trivially already because the call is

[11:14] <Geth> ¦ rakudo/spesh-plugins: in a class, we simply do so. However, private method calls in roles

[11:14] <Geth> ¦ rakudo/spesh-plugins: have so far been greatly slower, due to a lack of caching and since

[11:14] <Geth> ¦ rakudo/spesh-plugins: the specializer had no idea how to optimize them even if it could.

[11:14] <Geth> ¦ rakudo/spesh-plugins: 

[11:15] <Geth> ¦ rakudo/spesh-plugins: <…commit message has 18 more lines…>

[11:15] <Geth> ¦ rakudo/spesh-plugins: review: https://github.com/rakudo/rakudo/commit/51ff83c7ca

[11:24] *** PufferBot left
[11:25] *** Kaiepi left
[11:26] *** lizmat left
[11:33] <Tison> ok

[11:35] <Tison> we need a meta-op/build-in-function or special judge of !~~, the problem is we claim !~~ as infix, thus it can only take ONE QAST::Node

[11:37] <Tison> by meta-op, I means a new token deal with negate logic like how we do it in rakudo, but it makes things quite different

[11:37] <Tison> I intend not to make weird special judge to make !~~ "just run"

[11:38] <Tison> and add a new function like NOT_ACCEPTS seems unreasonable

[11:40] *** AlexDaniel left
[11:46] <Tison> to conclude, if we decide to add metaop support on NQP, then let's design and do it, for now I will make a PR add a new function NOT_ACCEPTS to meet it, and listen to contributors

[11:51] <Geth> ¦ nqp/NOT_ACCEPTS: e9bb509501 | 陈梓立++ | 4 files

[11:51] <Geth> ¦ nqp/NOT_ACCEPTS: [Impl] !~~by adding NOT_ACCEPTS method

[11:51] <Geth> ¦ nqp/NOT_ACCEPTS: review: https://github.com/perl6/nqp/commit/e9bb509501

[11:52] <Geth> ¦ nqp/NOT_ACCEPTS: c351d4349b | Tison++ | 4 files

[11:52] <Geth> ¦ nqp/NOT_ACCEPTS: [Impl] !~~by adding NOT_ACCEPTS method

[11:52] <Geth> ¦ nqp/NOT_ACCEPTS: review: https://github.com/perl6/nqp/commit/c351d4349b

[11:59] <Geth> ¦ nqp: W4anD0eR96++ created pull request #462: [Impl] !~~by adding NOT_ACCEPTS method

[11:59] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/462

[12:53] *** AlexDaniel joined
[13:11] <AlexDaniel> releasable6: next

[13:11] <releasable6> AlexDaniel, Next release in ≈8 days and ≈5 hours. 4 blockers. 0 out of 55 commits logged

[13:11] <releasable6> AlexDaniel, Details: https://gist.github.com/9c20995f08767acbb6fa29595f1ed880

[13:25] *** AlexDani` joined
[13:27] *** AlexDaniel left
[13:34] *** cognominal joined
[14:00] <Geth> ¦ rakudo/spesh-plugins: f6f43d58e3 | (Jonathan Worthington)++ | 2 files

[14:00] <Geth> ¦ rakudo/spesh-plugins: Use a spesh plugin for $foo.Qual::Ified::meth()

[14:00] <Geth> ¦ rakudo/spesh-plugins: 

[14:00] <Geth> ¦ rakudo/spesh-plugins: This lets us optimize away the method resolution after the first time,

[14:00] <Geth> ¦ rakudo/spesh-plugins: which since it has to search in the role structure was quite costly.

[14:00] <Geth> ¦ rakudo/spesh-plugins: The "is the invocant a Qual::Ified" check also gets subsumed by the

[14:00] <Geth> ¦ rakudo/spesh-plugins: guard.

[14:00] <Geth> ¦ rakudo/spesh-plugins: 

[14:00] <Geth> ¦ rakudo/spesh-plugins: <…commit message has 21 more lines…>

[14:00] <Geth> ¦ rakudo/spesh-plugins: review: https://github.com/rakudo/rakudo/commit/f6f43d58e3

[14:01] *** skids joined
[14:50] <Geth> ¦ rakudo/spesh-plugins: c6a61f563b | (Jonathan Worthington)++ | 2 files

[14:50] <Geth> ¦ rakudo/spesh-plugins: Use a spesh plugin to optimize .?

[14:50] <Geth> ¦ rakudo/spesh-plugins: 

[14:50] <Geth> ¦ rakudo/spesh-plugins: I explored a couple of different cases. In the first, the program was

[14:50] <Geth> ¦ rakudo/spesh-plugins: written with .?, but in its actual usage the types that showed up were

[14:50] <Geth> ¦ rakudo/spesh-plugins: mostly monomorphic:

[14:50] <Geth> ¦ rakudo/spesh-plugins: 

[14:50] <Geth> ¦ rakudo/spesh-plugins:     class C {

[14:50] <Geth> ¦ rakudo/spesh-plugins: <…commit message has 26 more lines…>

[14:50] <Geth> ¦ rakudo/spesh-plugins: review: https://github.com/rakudo/rakudo/commit/c6a61f563b

[15:09] *** brrt left
[15:47] *** Kaiepi joined
[15:51] <Geth> ¦ nqp/pluggable-spesh: f40aa05993 | (Jonathan Worthington)++ | t/moar/52-pluggable-spesh.t

[15:51] <Geth> ¦ nqp/pluggable-spesh: Add test for recursive spesh plugin setup

[15:51] <Geth> ¦ nqp/pluggable-spesh: review: https://github.com/perl6/nqp/commit/f40aa05993

[15:53] <Geth> ¦ nqp: fde7549c20 | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[15:53] <Geth> ¦ nqp: Bump MOAR_REVISION

[15:53] <Geth> ¦ nqp: 

[15:53] <Geth> ¦ nqp: Mainly to get a version of MoarVM with spesh plugin support.

[15:53] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fde7549c20

[15:53] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.05-57-g89dee3be3...2018.05-107-g7ea08c9

[15:59] <Geth> ¦ nqp/pluggable-spesh: 7dd83be2b2 | (Jonathan Worthington)++ | t/moar/52-pluggable-spesh.t

[15:59] <Geth> ¦ nqp/pluggable-spesh: Add test for recursive spesh plugin setup

[15:59] <Geth> ¦ nqp/pluggable-spesh: review: https://github.com/perl6/nqp/commit/7dd83be2b2

[16:00] <jnthn> grr

[16:00] <Geth> ¦ nqp/pluggable-spesh: f8766f3395 | (Jonathan Worthington)++ | t/moar/52-pluggable-spesh.t

[16:00] <Geth> ¦ nqp/pluggable-spesh: Add test for recursive spesh plugin setup

[16:00] <Geth> ¦ nqp/pluggable-spesh: review: https://github.com/perl6/nqp/commit/f8766f3395

[16:01] <Geth> ¦ nqp/master: 14 commits pushed by (Jonathan Worthington)++

[16:01] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/fde7549c20a4...5f8cf42526ee

[16:03] *** lizmat joined
[16:08] <jnthn> Hmmm...I'm seeing a couple of sprintf related test failures

[16:09] <jnthn> I saw them before I did any of today's work, mind, and just figured my master was behind. But seems not.

[16:11] <Geth> ¦ rakudo/master: 5 commits pushed by (Jonathan Worthington)++

[16:11] <Geth> ¦ rakudo/master: 51ff83c7ca | Use a MoarVM spesh plugin for private method calls

[16:11] <Geth> ¦ rakudo/master: f6f43d58e3 | Use a spesh plugin for $foo.Qual::Ified::meth()

[16:11] <Geth> ¦ rakudo/master: c6a61f563b | Use a spesh plugin to optimize .?

[16:11] <Geth> ¦ rakudo/master: 192083f65a | Bump NQP_REVISION for spesh plugin support

[16:11] <Geth> ¦ rakudo/master: c5d14062ab | Merge branch 'spesh-plugins'

[16:11] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/95aa77c94459...c5d14062abb2

[16:11] <Geth> ¦ rakudo/master: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.05-34-gfce77e06d...2018.05-57-g5f8cf42

[16:12] *** cognominal left
[16:13] *** robertle left
[16:16] *** Kaiepi left
[16:16] <jnthn> We've a week to see what the ecosystem makes of those

[16:17] <jnthn> Next week I'll start re-working Scalar and assignment in a branch

[16:17] <jnthn> That will not merge until after the upcoming release

[16:56] *** brrt joined
[17:08] *** travis-ci joined
[17:08] <travis-ci> Rakudo build failed. Jonathan Worthington 'Merge branch 'spesh-plugins''

[17:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/389799035 https://github.com/rakudo/rakudo/compare/95aa77c94459...c5d14062abb2

[17:08] *** travis-ci left
[17:08] <buggable> [travis build above] ☠ All failures are due to: failed make test (6 failures). Across all jobs, only t/05-messages/02-errors.t test file failed.

[17:28] <gfldex> jnthn: I'm getting the same failed tests then travis

[17:48] *** robertle joined
[17:49] *** robertle left
[18:04] *** brrt left
[18:06] <tbrowder_> hi, #perl6-dev

[18:07] <tbrowder_> are there any jetbrains intellij open source licenses available here for commiters?

[18:09] <jnthn> gfldex: Yup, same as I got. Travis also agrees with me that they were there before my commits today: https://travis-ci.org/rakudo/rakudo/builds/389646090

[18:10] <jnthn> Ah, and the ones that fail there reveal that it was bleed of NQP that came with breakage

[18:12] <jnthn> And at least one commit in NQP HEAD is wrong

[18:13] <jnthn> https://github.com/perl6/nqp/commit/049f5a6841be9a613b592403227b1c6fa3b6cd2b assumes that <.ws> will always match \s

[18:13] <jnthn> But it won't, it's happy enough if there's just <!ww>

[18:17] *** Kaiepi joined
[18:19] <samcv> jnthn: i'm going to put everything in interp.c in the right order

[18:19] <samcv> there's many that are out of order

[18:19] <samcv> and adding a tool to check that they are in the right order

[18:20] <samcv> also i'd think that if we put the DEPRECATED ones in the order that their numbers are it would be able to optimize/compile faster

[18:20] <samcv> atm they're all at the bottom

[18:20] *** lizmat left
[18:21] <samcv> either that or i'd put them all under `default:`

[18:23] <MasterDuke> samcv: if you reorder interp.c could you also do core_templates.expr at the same time? it was recently reordered to match interp.c

[18:23] <samcv> ok

[18:29] <samcv> MasterDuke: how critical is it, or is it just nice to have?

[18:30] <MasterDuke> samcv: nice to have, but since i just did the manual work of getting it in order...

[18:31] <samcv> ok :) just wondered though

[18:34] <dogbert17> m: sprintf("%d-%s", 42) # something for AlexDaniel perhaps

[18:34] <camelia> rakudo-moar c5d14062a: OUTPUT: «This representation (P6int) cannot unbox to a native num (for type BOOTInt)␤  in block <unit> at <tmp> line 1␤␤»

[18:58] <timotimo> samcv: could you also do graph.h? it contains multiple switches, so an automated tool for that purpose would need to deal with more than one at once

[18:58] <timotimo> hm, actually, graph.c also contains chunks where multiple ops are used for the same code block

[18:58] <timotimo> not sure how that would be best for the compiler

[19:04] <samcv> ok so interestingly clang compiles faster on O1 if i put all deprecated stuff at the end

[19:06] <AlexDani`> dogbert17: me?

[19:06] *** AlexDani` is now known as AlexDaniel

[19:12] <samcv> how do i learn how to make expr jit templates

[19:13] <jnthn> samcv: I'd generally not been worrying about it as I didn't yet see any evidence of a C compiler that wasn't smart enough to do the jump table anyway and that also didn't support computed goto

[19:13] <jnthn> samcv: For the those that do supported computed goto I guess it doesn't matter all that much :)

[19:14] <jnthn> samcv: The win might simply be because the deprecated ones aren't called, and shuffling them out of the way makes for a better icache hit rate

[19:14] <samcv> well having the deprecated all last does make compiling faster at least :P

[19:14] <samcv> well compile time

[19:14] <jnthn> Oh, I thought you meant the compiled output was faster... :-)

[19:17] <jnthn> shopping &

[19:22] <MasterDuke> samcv: https://github.com/MoarVM/MoarVM/blob/master/docs/jit/overview.org

[19:48] *** Kaiepi left
[19:48] *** Kaiepi joined
[19:49] *** dct joined
[20:07] <dogbert17> AlexDaniel: yes, you are our bot expert :)

[20:08] <dogbert17> bisect: sprintf("%d-%s", 42)

[20:08] <bisectable6> dogbert17, Bisecting by output (old=2015.12 new=c5d1406) because on both starting points the exit code is 1

[20:08] <bisectable6> dogbert17, bisect log: https://gist.github.com/a27809b697f4a555c1072cfec66b8842

[20:08] <bisectable6> dogbert17, (2017-09-28) https://github.com/rakudo/rakudo/commit/6824e19282e19a0953fc64faf14445600d9b24e6

[20:09] <AlexDaniel> no-no

[20:09] <AlexDaniel> bisect: old=2018.05 sprintf("%d-%s", 42)

[20:09] <bisectable6> AlexDaniel, Bisecting by output (old=2018.05 new=c5d1406) because on both starting points the exit code is 1

[20:09] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/e9dd42cf94dcd71667092be38a0893da

[20:09] <bisectable6> AlexDaniel, (2018-06-08) https://github.com/rakudo/rakudo/commit/192083f65a2637c16d1c41972e70a14acf41d2a2

[20:09] <dogbert17> you see, we need you :)

[20:09] <AlexDaniel> c: 192083f65^,192083f65 sprintf("%d-%s", 42)

[20:09] <committable6> AlexDaniel, https://gist.github.com/4f2e7066ff7bf34e54ca700038057781

[20:09] <AlexDaniel> that's the one

[20:10] <AlexDaniel> c: 2015.12,192083f65^,192083f65,HEAD

[20:10] <committable6> AlexDaniel, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Committable

[20:10] <AlexDaniel> c: 2015.12,192083f65^,192083f65,HEAD sprintf("%d-%s", 42)

[20:10] <committable6> AlexDaniel, https://gist.github.com/18e1ce4640a2b11e8e53f382f2b2ace5

[20:10] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/192083f65a2637c16d1c41972e70a14acf41d2a2

[20:10] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2018.05-34-gfce77e06d...2018.05-57-g5f8cf42

[20:10] <dogbert17> so, an nqp fix although almost certainly not one of jnthn's fixes

[20:12] <AlexDaniel> e: run <perl6 --ll-exception -e>, ‘sprintf("%d-%s", 42)’

[20:12] <evalable6> AlexDaniel, rakudo-moar c5d14062a: OUTPUT: «(exit code 1) This representation (P6int) cannot unbox to a native num (for type BOOTInt)␤…»

[20:12] <evalable6> AlexDaniel, Full output: https://gist.github.com/9ee24a43be78e42679858da5df641969

[20:12] <AlexDaniel> would be cool if these were links…

[20:16] <timotimo> agreed :)

[20:19] <dogbert17> there are a few commits to choose from, hmm

[21:12] *** skids left
[21:12] *** AlexDaniel left
[21:13] *** AlexDaniel joined
[21:58] <Geth> ¦ nqp: jstuder-gh++ created pull request #464: Fix issue with building nqp-js on Windows

[21:58] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/464

[21:58] *** lizmat joined
[22:18] <Geth> ¦ nqp: jstuder-gh++ created pull request #465: Modify signals available to getsignals on WIN32

[22:18] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/465

[22:48] <MasterDuke> anyone else getting a fail in t/spec/S16-filehandles/io.t?

[22:49] <MasterDuke> `not ok 113 - .printf()`, so i assume it's the same reason as the sprintf fails

[22:50] *** Kaiepi left
[22:55] <jnthn> MasterDuke: Yes, see a little earlier here for a bit of analysis as to what likely regressed it

[22:56] *** skids joined
[22:57] <MasterDuke> jnthn: k. btw, would you expect your recent spesh plugin merged to have sped up stage parse of the setting?

[23:21] *** AlexDaniel left
[23:22] *** AlexDaniel joined
[23:28] <timotimo> do we have a spesh plugin for resolving action class methods?

[23:39] <jnthn> MasterDuke: No

[23:39] <jnthn> timotimo: No, but those are normal/boring dispatches, I think :)

[23:39] <jnthn> Or at least, can be if we make the regex methods contain the calls 

[23:39] <timotimo> ah, you changed them to the other method resolution op at some point in the last weeks iirc

[23:41] <timotimo> but that probably landed half an age ago when it comes to parsing performance

[23:44] <jnthn> However...

[23:44] <jnthn> If we can get an NFA to tell us what it scanned

[23:44] <jnthn> And if we know that a subrule call was fully declarative

[23:44] <timotimo> that'd be nice

[23:44] <timotimo> what would that be, a percent or two?

[23:45] <jnthn> Then that implies it was transitively declarative

[23:45] <jnthn> You could use a spesh plugin to determine and cache the absence of any action methods for all the dependent rules

[23:45] <timotimo> ooh

[23:45] <timotimo> there are a couple of those in rakudo's grammar

[23:45] <jnthn> Meaning it'd be possible to elide the subgraph

[23:45] <jnthn> Yeah

[23:45] <jnthn> I've no guesses on how much it'd help :)

[23:45] <timotimo> hm, ws isn't declarative, though, so not that one

[23:46] <MasterDuke> what do you mean declarative?

[23:46] <timotimo> doesn't cause the declarative prefix of the calling rule to be "interrupted"

[23:47] <jnthn> MasterDuke: I'm using "fully declarative" to describe a rule whose entire match is in the subset of the regex language that compiles into an NFA - or put another way, the LTM declarative prefix is actually the entire rule

[23:48] <MasterDuke> is that the same as no backtracking?

[23:48] <timotimo> no, that's different

[23:56] <jnthn> Things like embeded code blocks are also non-declarative, for example

[23:57] *** cognominal joined
[23:57] <jnthn> Also, sequential alternations (||) are

