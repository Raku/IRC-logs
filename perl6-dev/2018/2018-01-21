[01:46] <[Coke]> tbrowder: how did you send in the cla?

[01:46] <yoleaux> 20 Jan 2018 14:23Z <tbrowder> [Coke]: can please check on my CLA application? (Thomas M. Browder, Jr.; aka Tom Browder)

[06:54] <Geth> ¦ roast/6.c-errata: 12bf2b8ae0 | (Zoffix Znet)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S32-num/rat.t

[06:54] <Geth> ¦ roast/6.c-errata: Use correcter tests for Num.Rat conversions

[06:54] <Geth> ¦ roast/6.c-errata:

[06:54] <Geth> ¦ roast/6.c-errata: The test descriptions say `==` is being checked, but the `is` routine

[06:54] <Geth> ¦ roast/6.c-errata: is actually testing Str views of Rats and Nums. Change to `cmp-ok` with

[06:54] <Geth> ¦ roast/6.c-errata: `==` as comparator, since IEEE-style zero-denominator Rats are explosive

[06:54] <Geth> ¦ roast/6.c-errata: in Str views, while non-explosive in Num views, so they will match here.

[06:54] <Geth> ¦ roast/6.c-errata:

[06:54] <Geth> ¦ roast/6.c-errata: <…commit message has 16 more lines…>

[06:54] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/12bf2b8ae0

[06:55] <AlexDaniel> .tell Zoffix Awesome, thanks. Committed the change to 6.c-errata.

[06:55] <yoleaux> 20 Jan 2018 23:57Z <Zoffix> AlexDaniel: https://irclog.perlgeek.de/perl6-dev/2018-01-20#i_15716502

[06:55] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[07:00] <Geth> ¦ rakudo: c52f323ece | (Aleks-Daniel Jakimenko-Aleksejev)++ | Configure.pl

[07:00] <Geth> ¦ rakudo: Revert "Ensure Configure.pl uses gmake for builds on BSDs"

[07:01] <Geth> ¦ rakudo:

[07:01] <Geth> ¦ rakudo: This reverts commit 4f865671685c6d53b53dfacf4beb9e5faf8aecf8.

[07:01] <Geth> ¦ rakudo:

[07:01] <Geth> ¦ rakudo: See rakudo/rakudo#1420

[07:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c52f323ece

[07:01] <synopsebot> RAKUDO#1420 [open]: https://github.com/rakudo/rakudo/issues/1420 [regression][⚠ blocker ⚠] FreeBSD issues

[07:02] <Geth> ¦ nqp: 9222147e47 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[07:02] <Geth> ¦ nqp: [MoarVM Bump] Brings 3 commits

[07:02] <Geth> ¦ nqp:

[07:02] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2017.12.1-59-g85b2c5f82...2017.12.1-62-ga04d1099b

[07:02] <Geth> ¦ nqp: a04d1099b Revert "Try to use egcc when compiling on OpenBSD"

[07:02] <Geth> ¦ nqp: 9df7c1645 Merge pull request #784 from MasterDuke17/fix_parse_jitgraph

[07:02] <Geth> ¦ nqp: c602235ef Un-bitrot tools/parse_jitgraph.p6

[07:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9222147e47

[07:02] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.12.1-59-g85b2c5f82...2017.12.1-62-ga04d1099b

[07:02] <Geth> ¦ rakudo: c6f05001fe | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[07:02] <Geth> ¦ rakudo: [NQP Bump] 9222147e4 [MoarVM Bump] Brings 3 co […]

[07:02] <Geth> ¦ rakudo:

[07:02] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2017.12-79-g4d3db7f00...2017.12-80-g9222147e4

[07:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c6f05001fe

[07:02] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-79-g4d3db7f00...2017.12-80-g9222147e4

[08:20] <AlexDaniel> .tell lizmat https://github.com/rakudo/rakudo/issues/1425#issuecomment-359231728

[08:20] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[08:26] <AlexDaniel> .tell lizmat btw, I'm looking at this commit https://github.com/rakudo/rakudo/commit/5c228333 but failing to see what changed practically (NaN..NaN).roll(2) still hangs for me. Is everything alright there?

[08:26] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[09:39] <Geth> ¦ rakudo/post-release: 5793e6fe87 | (Zoffix Znet)++ | 2 files

[09:39] <Geth> ¦ rakudo/post-release: Put IO grant work into "archive" dir

[09:39] <Geth> ¦ rakudo/post-release: review: https://github.com/rakudo/rakudo/commit/5793e6fe87

[11:08] <lizmat> .

[11:08] <yoleaux> 08:20Z <AlexDaniel> lizmat: https://github.com/rakudo/rakudo/issues/1425#issuecomment-359231728

[11:08] <yoleaux> 08:26Z <AlexDaniel> lizmat: btw, I'm looking at this commit https://github.com/rakudo/rakudo/commit/5c228333 but failing to see what changed practically (NaN..NaN).roll(2) still hangs for me. Is everything alright there?

[11:08] <lizmat> m: say (NaN..NaN).elems

[11:09] <camelia> rakudo-moar c6f05001f: OUTPUT: «(timeout)»

[11:12] <lizmat> Files=1232, Tests=76104, 326 wallclock secs (14.93 usr  5.45 sys + 2257.27 cusr 232.09 csys = 2509.74 CPU)

[11:18] <tbrowder> .tell [Coke] I sent the CLA via snail mail (USPS) to the address on the form.

[11:18] <yoleaux> tbrowder: I'll pass your message to [Coke].

[11:52] <stmuk> I'm seeing some roast failures .. should I be testing against errata at this point?

[12:02] <pmurias> samcv: I have looked into https://rt.perl.org/Public/Bug/Display.html?id=132233

[12:03] <pmurias> samcv: the bug with that is that a ligature is a single grapheme while the letters it's composed of are 2 graphemes

[12:04] <pmurias> samcv: as such we can't use eqatim and then advancing by the length of the ligature (or for that matter the stuff it's composed of)

[12:06] <pmurias> samcv: one fix would be to make eqat* ops return the length of the stuff that's matched

[12:10] <lizmat> 0 no match, > 0 number of codepoints or graphemes or bytes ?

[12:24] <pmurias> lizmat: not sure, maybe using -1 for no match would be more sane

[12:25] <lizmat> wouldn't that be the same as 0 ?

[12:25] <lizmat> aka false ?

[12:25] * lizmat worked for a long time on a system where < 0 was true and >= 0 was false

[12:26] <pmurias> what about using a "" needle?

[12:26] <lizmat> the advantage was that you could $cond ?? minusone !! zero !! one !! two (pseudocode)

[12:27] <lizmat> what does a "" needle with eqat mean ?

[12:27] <lizmat> I know it has meaning for split, but for eqat ?

[12:28] <pmurias> does $haystack have an empty string needle at position $pos?

[12:29] <lizmat> you mean it's the end of the string ?

[12:32] <pmurias> nqp::eqat("xfoobar", "foo", 1) is currently 1

[12:33] <pmurias> lizmat: nqp::eqat with a "" needle return 0 if the position is inside the string

[12:33] <pmurias> (currently)

[12:33] <lizmat> ah, hmmm...

[12:33] <lizmat> and if it is not ?

[12:34] <pmurias> sorry meant 1

[12:34] <pmurias> it returns 0 if it's not inside the string

[12:35] <pmurias> nqp::eqat checks for $needle being a substring of $haystack starting at $pos

[12:35] <samcv> pmurias: yeah i had thought about returning the length of what has been matched

[12:35] <lizmat> m: use nqp; say nqp::eqat("foo","",3)  # with a strange definition of "inside string" :-)

[12:35] <camelia> rakudo-moar c6f05001f: OUTPUT: «1␤»

[12:35] <samcv> and i think one of the functions in moarvm internally returns that

[12:36] * pmurias has to leave visit grandparents

[12:36] <samcv> but i need to go to bed

[12:36] <samcv> but yeah i'd thought about returning the length as well. also i'm not sure where the code is that causes the bug

[12:36] <pmurias> m: use nqp:; say nqp::eqat("foo, "", 4)

[12:36] <camelia> rakudo-moar c6f05001f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3use nqp7⏏5:; say nqp::eqat("foo, "", 4)␤»

[12:36] <samcv> if you know where it is, can you reply to the bug with info on where it is?

[12:36] <pmurias> m: use nqp; say nqp::eqat("foo, "", 4)

[12:36] <camelia> rakudo-moar c6f05001f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3use nqp; say nqp::eqat("foo, "7⏏5", 4)␤    expecting any of:␤…»

[12:36] <pmurias> m: use nqp; say nqp::eqat("foo", "", 4)

[12:36] <pmurias> samcv: ok

[12:36] <samcv> since it's only a bug for interpolated thinges

[12:37] <camelia> rakudo-moar c6f05001f: OUTPUT: «0␤»

[12:37] <pmurias> I have the exact place, will post once I come back

[12:47] <[Tux]> Rakudo version 2017.12-277-gc6f05001f - MoarVM version 2017.12.1-62-ga04d1099b

[12:47] <[Tux]> csv-test-xs-20      0.424 -  0.437

[12:47] <[Tux]> csv-ip5xs           1.132 -  1.148

[12:47] <[Tux]> test-t --race       1.154 -  1.164

[12:47] <[Tux]> test-t              2.768 -  2.779

[12:47] <[Tux]> test               11.072 - 11.120

[12:47] <[Tux]> csv-parser         12.277 - 12.428

[12:47] <[Tux]> csv-ip5xs-20       12.602 - 13.093

[12:47] <[Tux]> test-t-20 --race   17.357 - 18.455

[12:47] <[Tux]> test-t-20          49.042 - 49.394

[13:02] <AlexDaniel> stmuk: “I'm seeing some roast failures .. should I be testing against errata at this point?” both should be green ideally

[13:02] <AlexDaniel> there's one know failure in v6.c-errata which is not fixed yet

[13:02] <AlexDaniel> everything else was fine last time I checked

[13:03] <AlexDaniel> (but note that releasable still won't let it through if at least something is failing)

[13:06] <AlexDaniel> stmuk: “I was enable to build” – sorry, “able” or “unable”?

[13:07] <stmuk> enable

[13:07] <stmuk> not only were the BSD changes broken but unneeded

[13:08] <stmuk> and the reverts fixed them

[13:08] <AlexDaniel> OK, good!

[13:10] <Geth> ¦ rakudo: 55cb8f3d61 | (Elizabeth Mattijsen)++ | src/core/Range.pm

[13:10] <Geth> ¦ rakudo: Fix Ranges with NaN hanging

[13:10] <Geth> ¦ rakudo:

[13:10] <Geth> ¦ rakudo: Affected were any methods that would call .elems, since .elems was

[13:10] <Geth> ¦ rakudo: hanging.  Methods such as .pick / .roll etc.

[13:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/55cb8f3d61

[13:10] <lizmat> AlexDaniel: ^^^

[13:11] <AlexDaniel> stmuk: thanks!

[13:12] <AlexDaniel> lizmat: great! Thanks. What about https://github.com/rakudo/rakudo/issues/1425#issuecomment-359231728 ?

[13:12] <AlexDaniel> lizmat: like, do we have to revert 729caa8f1 also or not?

[13:13] <lizmat> I already commented on https://github.com/rakudo/rakudo/commit/729caa8f17f4cb94c90e0da547a5c3978a14ff16 that it should also be reverted :-)

[13:13] <lizmat> I guess I put the comment at the wrong place  :-)

[13:13] <lizmat> sorry

[13:18] <AlexDaniel> hmmmm…

[13:18] <lizmat> ?

[13:19] <lizmat> guess I was not awake yet: saw your question, looked at the issues, followed link to commit and commented

[13:19] <AlexDaniel> lizmat: actually, I think it was “autoreverted” in my previous revert

[13:19] <lizmat> without going back to the issue

[13:20] <lizmat> ok, then we should be good right ?

[13:20] <AlexDaniel> yea

[13:20] <AlexDaniel> yeah, looks right

[13:21] <lizmat> TimToady: wouldn't you say that Tuple is basically an immutable subclass of IterationBuffer?

[13:25] <AlexDaniel> lizmat: ok, now about https://github.com/perl6/roast/commit/904ae98f034e705e6e090748de115a2468a6bc97 which I assume was the result of https://github.com/rakudo/rakudo/commit/202459ce

[13:25] <AlexDaniel> lizmat: what's the current status of this? Do we go with changing the tests in errata or doing something with that rakudo commit?

[13:26] * lizmat looks

[13:28] <lizmat> yeah, I think we need to change that test in 6.c-errata as well

[13:28] <lizmat> the checks in 6.c were too specific

[13:29] <lizmat> shall I change them?

[13:32] * lizmat changes them

[13:34] <Geth> ¦ roast/6.c-errata: b688d39d49 | (Elizabeth Mattijsen)++ | S02-types/WHICH.t

[13:34] <Geth> ¦ roast/6.c-errata: Handle existence of ValueObjAt in 6.c

[13:34] <Geth> ¦ roast/6.c-errata:

[13:34] <Geth> ¦ roast/6.c-errata: Basically redo of https://github.com/perl6/roast/commit/904ae98f034e7

[13:34] <Geth> ¦ roast/6.c-errata:

[13:34] <Geth> ¦ roast/6.c-errata: Please revert if not appropriate after all.

[13:34] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/b688d39d49

[13:42] <AlexDaniel> OK

[13:42] <AlexDaniel> thanks

[14:23] <AlexDaniel> jnthn: here?

[14:24] <AlexDaniel> jnthn: anyway, your dangling whenever compile-time check causes a problem here: https://github.com/ufobat/HTTP-Server-Ogre/blob/f96382986ebc8704654baf034cd8c25f597f28a7/lib/HTTP/Server/Ogre/Http2Protocol.pm6#L30

[14:24] <jnthn> AlexDaniel: Sort of :)

[14:24] <AlexDaniel> which, if I get it right, is then used here: https://github.com/ufobat/HTTP-Server-Ogre/blob/245824329d2abe90e10ebd99a0512b533dd12c18/lib/HTTP/Server/Ogre.pm6#L92-L106

[14:25] <AlexDaniel> any thoughts on this?

[14:25] <jnthn> Ah, somebody did rely on it.

[14:25] <jnthn> I actually thought it already did check that. There were no spectests ever covering such a thing.

[14:26] <jnthn> huh, the code in there looks like it's largely copied from Cro

[14:27] <jnthn> Anyway, if we can't do that check, then we can't have any of the opts originally intended (but only very recently intended) for supply/react blocks

[14:28] <jnthn> s:2nd/intended/implemented/

[14:30] <AlexDaniel> that's the only module that is currently failing because of that

[14:32] <jnthn> OK. Then I think we can consider it as having relied on a bug.

[14:33] <jnthn> Was this somehow missed in the last toaster run?

[14:34] <jnthn> Clearly the change was merged by then, because I fixed a regression that run showed up

[14:36] <stmuk> 07a-tables.t, 07b-tables.t, 07c-tables.t are absent but present in spectest.data.6.c

[14:36] <AlexDaniel> it was missed, yes. I shrugged it off because I see this in the output right now: https://gist.github.com/AlexDaniel/08946e584ea4f62de0c16762cb6d3be7

[14:36] <stmuk> absent from the roast errata branch I mean

[14:36] <AlexDaniel> and so far I have no idea what that means :)

[14:40] <jnthn> It's odd, there is a META6.json in the repo at least

[14:40] <timotimo> maybe a CATCH that's too broad caught a different exception and thought the file was missing

[14:40] <jnthn> Ah, could be

[14:40] <jnthn> Dunno

[14:41] <AlexDaniel> I can't get that error locally. At least, didn't get enough hands on it yet to do it

[14:41] <jnthn> Anyway, summary is that many of the opts that went in rely on the "no whenever outside of supply/react" check in order to be safe.

[14:42] <jnthn> Reverting the check thus implies we'd have to revert a whole bunch of other things

[14:42] <jnthn> It may be possible to require a `use v6.d.PREVIEW;`

[14:43] <jnthn> And only call the optimized paths in those cases, and thus only enforce the check in that case too

[14:45] <Geth> ¦ rakudo: 5cbd55281b | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/spectest.data.6.c

[14:45] <Geth> ¦ rakudo: 07a/b/c-tables.t files are not part of 6.c-errata

[14:45] <Geth> ¦ rakudo:

[14:45] <Geth> ¦ rakudo: If I got it right, this is the file for the errata tests. It was

[14:45] <Geth> ¦ rakudo: edited by accident I assume.

[14:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5cbd55281b

[14:45] <AlexDaniel> stmuk: thanks! This ↑ should resolve it I think

[14:57] <AlexDaniel> jnthn: uhhh… I don't know. I get the point about optimizations, but using whenever like this does indeed look rather innocent to break it like that

[14:57] <AlexDaniel> so I'll let that sink while I do something else…

[14:58] <jnthn> AlexDaniel: It was always intended, and only ever tested/documented, that whenever had to be textually inside of a react/whenever

[14:59] <jnthn> Yes, it's a pity that wasn't enforced prior to now

[15:00] <jnthn> I could live with it being put behind 6.d.PREVIEW.

[15:02] <jnthn> uh, inside of a react/supply, I meant above

[15:06] * jnthn afk for a while

[15:08] <AlexDaniel> I'll be away for an hour or two so I created this ticket for others to comment on: https://github.com/rakudo/rakudo/issues/1428

[15:08] <AlexDaniel> if somebody wants to :)

[15:17] * AlexDaniel afk for a bit

[15:17] * AlexDaniel afk for a byte*

[15:44] <stmuk> I'm seeing the missing META6.json warning but can't reproduce

[15:44] <stmuk> it's a recent addition to zef

[15:51] <AlexDaniel> ah

[15:51] <AlexDaniel> 9 days ago

[15:51] <AlexDaniel> so at least it's not a rakudo regression causing this message to pop up

[15:51] <AlexDaniel> good

[15:59] <stmuk> https://github.com/ugexe/zef/issues/225

[17:20] <stmuk> its just a harmless warning I was confused by the log message

[18:11] <Geth> ¦ nqp: jstuder-gh++ created pull request #395: Don't die if QAST parent doesn't have dump_extra_node_info method

[18:11] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/395

[18:36] <DrForr> hurr, test failed in Cro:Tools::CroFile.

[18:38] <DrForr> Might be permissions - I'll just force install and see if something works.

[20:21] <mst> DrForr: or, the CroBar approach

[20:29] <travis-ci> Rakudo build passed. Aleks-Daniel Jakimenko-Aleksejev '07a/b/c-tables.t files are not part of 6.c-errata

[20:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/331470683 https://github.com/rakudo/rakudo/compare/55cb8f3d61be...5cbd55281b9c

[20:34] <DrForr> mst: Yeah. At the moment I'm bringing my poor VM to its knees building Angular.

[21:11] <timotimo> mst: *snrk*

[21:45] <jnthn> I've long wondered what I'll end up using the CroBar pun for... :P

[21:45] <lizmat> hehe...

[21:45] <lizmat> ok, so I want to call gethostname() with NativeCall

[21:45] <lizmat> and I'm too lazy to look up the exact incantation

[21:45] <jnthn> I've so far resisted putting "Now that's something to Cro about" in our release announces :P

[21:46] <jnthn> nativecallable6: int gethostname(char *name, size_t len)

[21:46] <nativecallable6> jnthn, No! It wasn't me! It was the one-armed man! Backtrace: https://gist.github.com/33b6540a144645ffdbc0ae5efc3328e2

[21:46] <pmurias> samcv: I'll attempt to change eqat* ops myself as this doesn't seem to be too hard

[21:47] <jnthn> Come on dude, that's a soft one

[21:47] <pmurias> samcv: the bug occurs without interpolation too, it's just that the tests aren't good enough

[21:47] <jnthn> sub getnostname(Str $name, size_t $len --> int32) is native {*} # or something

[21:47] <lizmat> jnthn++

[21:48] <jnthn> You may have to `use NativeCall :types` to get size_t, I forget

[21:48] <lizmat> looking good so far  :-)

[22:08] <lizmat> hmm... nor working  :-(

[22:09] <lizmat> anyways, did we ever think about having an API that would allow the functionality that $#foo offers in Perl 5

[22:09] <lizmat> a .set_elems(42) if you will ?

[22:11] <jnthn> .end does that as an r-value

[22:11] <lizmat> yeah, but I need it as a left value ?

[22:11] <lizmat> in perl 5 $#foo is a left value

[22:15] <jnthn> Don't think there's anything for that. Though, perhaps given we have sized arrays, I've not yet felt a need.

[22:15] <jnthn> Buf.allocate exists for doing an initial size from the start

[22:22] <samcv> .ask pmurias where does it fail? can you show/tell me? thanks!

[22:23] <samcv> .tell pmurias where does it fail? can you show/tell me? thanks!

[22:23] <samcv> yoleaux: help

[22:23] <geekosaur> yoleaux only lived once?

[22:33] <lizmat> jnthn: it also as Buf.reallocate

[22:33] <lizmat> but really what I think is missing, is something like .set-elems

[22:33] <lizmat> the fact that reallocate is actually calling nqp::setelems sorta gives that idea  :-)

[22:36] <jnthn> I'd rather we have consistent names across Buf/Array

[22:39] <jnthn> (And so allocate/reallocate on Array also)

[22:40] <jnthn> Though it'll be a bit...interesting...to implement in the case that the Array has a $!todo

[22:45] <lizmat> it would force a reify, just like .elems

[22:45] <lizmat> and if it's lazy, it will fail ?

[23:26] <Zoffix> jnthn: are you still around? What did you say needs to be done on here: https://github.com/rakudo/rakudo/issues/1428#issuecomment-359277998

[23:34] <Zoffix> Guess not :) Oh well

[23:42] <jnthn> Zoffix: For a little bit

[23:42] <jnthn> And only half paying attention :P

[23:43] <jnthn> Oh...uh...I think we read lizmat's comment the opposite way :)

[23:43] <lizmat> sorry I wasn't more clear

[23:44] <jnthn> I'm now not quite sure how I read it :P

[23:44] <jnthn> Probably "in the way that makes the most work for me possible" :P

[23:44] <Zoffix> :D

[23:44] <lizmat> and I was trying to keep it simple  :-)

[23:45] <jnthn> Yeah, now I read it again, I think you are advocating "do nothing, make the module fix it"?

[23:48] <lizmat> jnthn: yes

[23:49] * lizmat calls it a nigh&

[23:49] <lizmat> t

[23:51] <jnthn> o/
