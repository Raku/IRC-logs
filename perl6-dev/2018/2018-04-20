[01:07] <Geth> ¬¶ nqp: jstuder-gh++ created pull request #436: Expose Moar 'slice' op in NQP

[01:07] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/436

[06:02] <[TuxCM]> Rakudo version 2018.03-242-gb0cc35434 - MoarVM version 2018.03-124-gdeaffb2de

[06:02] <[TuxCM]> csv-test-xs-20      0.450 -  0.457

[06:02] <[TuxCM]> csv-ip5xs           0.897 -  0.912

[06:02] <[TuxCM]> test-t --race       1.020 -  1.057

[06:02] <[TuxCM]> test-t              2.474 -  2.502

[06:02] <[TuxCM]> csv-ip5xs-20        8.738 -  8.832

[06:02] <[TuxCM]> test                9.375 -  9.416

[06:02] <[TuxCM]> test-t-20 --race   14.946 - 15.389

[06:02] <[TuxCM]> csv-parser         35.657 - 36.709

[06:02] <[TuxCM]> test-t-20          43.878 - 43.956

[06:02] <[TuxCM]> nine, will you mail me the new(er) instructions? (if you did, I missed them)

[07:34] <lizmat> Files=1239, Tests=76306, 321 wallclock secs (15.80 usr  5.65 sys + 2216.73 cusr 222.93 csys = 2461.11 CPU)

[07:39] <nine> [TuxCM]: https://gist.github.com/niner/fc6d15e881c5a3ba6df33a7d03175e6d

[08:29] <Geth> ¬¶ rakudo: f6756bb4d9 | (Stefan Seifert)++ | lib/NativeCall.pm6

[08:29] <Geth> ¬¶ rakudo: Replace manual dispatch with proper multis for guess_library_name

[08:29] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/f6756bb4d9

[08:39] <samcv> nine++

[08:59] <[TuxCM]> Rakudo version 2018.03-242-gb0cc35434 - MoarVM version 2018.03-124-gdeaffb2de

[08:59] <[TuxCM]> csv-test-xs-20      0.439 -  0.450

[08:59] <[TuxCM]> csv-ip5xs           0.871 -  0.888

[08:59] <[TuxCM]> test-t --race       1.016 -  1.024

[08:59] <[TuxCM]> test-t              2.425 -  2.437

[08:59] <[TuxCM]> csv-ip5xs-20        8.673 -  8.713

[09:00] <[TuxCM]> test                8.892 -  9.400

[09:00] <[TuxCM]> test-t-20 --race   15.423 - 15.550

[09:00] <[TuxCM]> csv-parser         35.903 - 37.013

[09:00] <[TuxCM]> test-t-20          44.091 - 44.760

[09:00] <[TuxCM]> First repor on direct built perl6. (leaving rakudobrew)

[10:17] <Geth> ¬¶ nqp/nqpmake: 7c1a8b9906 | (Stefan Seifert)++ | 2 files

[10:17] <Geth> ¬¶ nqp/nqpmake: Fix build not noticing change in dependency

[10:17] <Geth> ¬¶ nqp/nqpmake: review: https://github.com/perl6/nqp/commit/7c1a8b9906

[10:42] <Geth> ¬¶ nqp/nqpmake: be9a658768 | (Stefan Seifert)++ | 2 files

[10:42] <Geth> ¬¶ nqp/nqpmake: Notice changes in non-target source files (AKA the common case)

[10:42] <Geth> ¬¶ nqp/nqpmake: review: https://github.com/perl6/nqp/commit/be9a658768

[11:52] <lizmat> after looking at https://metacpan.org/pod/List::UtilsBy#weighted_shuffle_by , why don't we have a MixHash.grab again ?

[12:04] <MasterDuke> lizmat: a little while ago i was running this: perl6 -Msnapper -e 'for ^1_000 { (^100).race(batch=>1).map({ $_ }).List }'

[12:04] <MasterDuke> and the result didn't appear to be sorted by any of the columns. think it would make sense to sort by wallclock by default?

[12:05] <lizmat> then you wouldn't know in which period the changes occurred ?

[12:06] <MasterDuke> "in which period"? i don't understand

[12:06] <MasterDuke> what changes?

[12:12] <lizmat> the report shows the changes for each period

[12:12] <lizmat> in the case of wallclock, it's the number of microseconds passed

[12:13] <lizmat> in the case of max-rss it's the amount of memory extra allocated

[12:14] <MasterDuke> ah, they're not running totals

[12:14] <lizmat> util% is a bit weird in that case, I'll admit, but that's just basically CPU's used / wallclock

[12:14] <lizmat> nope

[12:14] <lizmat> the last line, those are totals (except util% again)

[12:15] <MasterDuke> hm, any idea why /usr/bin/time give a rather bigger number for maxrss?

[12:15] <lizmat> since when does /usr/bin/time give maxrss info ?

[12:16] <MasterDuke> time (the shell builtin doesn't), but /usr/bin/time always has

[12:17] <MasterDuke> s/doesn't\)/) doesn't/

[12:17] <lizmat> not on MacOS  :-(

[12:18] <lizmat> so I have no idea...  perhaps the overhead of "time" itself?

[12:19] <MasterDuke> heh, i doubt time has 80mb overhead

[12:19] <MasterDuke> btw, looks like 'brew install gnu-time' will give you a 'gtime' binary

[12:21] <MasterDuke> fwiw, running `/usr/bin/time /usr/bin/time echo 1` shows 2mb maxrss

[12:28] <MasterDuke> `/usr/bin/time ./install/bin/perl6-m -Msnapper -e ''` shows 16756 total maxrss in the snapper report, but 91448 maxrss from time

[12:29] <MasterDuke> looks like maybe snapper isn't picking up (or just needs to compensate for somehow) the initial startup ram cost

[12:29] <lizmat> snapper only shows differences

[12:29] <lizmat> check the Initial/Final Size: in the header

[12:29] <lizmat> does that match your expectation ?

[12:31] <MasterDuke> ah, that's a lot closer

[12:31] * lizmat has to go on another sad commute

[12:31] <lizmat> will probably be offline quite a bit the coming days

[12:31] <lizmat> &

[12:32] <MasterDuke> that sucks, condolences

[12:33] <MasterDuke> maybe i'll try to make the docs a little more explicit that the values in the columns are just differences

[12:44] <samcv> .tell lizmat i think it was MixHash or one of the similar types i'd been wanting a .grab for a while

[12:44] <yoleaux> samcv: I'll pass your message to lizmat.

[13:10] <dogbert2_> releasable:next

[13:10] <releasable6> dogbert2_, Next release in ‚âà1 day and ‚âà5 hours. 3 blockers. 224 out of 243 commits logged

[13:10] <releasable6> dogbert2_, Details: https://gist.github.com/65af7fd7517a0adcc999d5b9ff879967

[13:10] <dogbert2_> releasable: uptime

[13:10] <releasable6> dogbert2_, 14 hours, 16 minutes, and 2 seconds, 305.304688MiB maxrss. This is Rakudo version 2018.03-242-gb0cc35434 built on MoarVM version 2018.03-124-gdeaffb2de implementing Perl 6.c.

[13:15] <AlexDaniel> shareable6: uptime

[13:15] <shareable6> AlexDaniel, 14 hours, 20 minutes, and 37 seconds, 376.820313MiB maxrss. This is Rakudo version 2018.03-242-gb0cc35434 built on MoarVM version 2018.03-124-gdeaffb2de implementing Perl 6.c.

[13:33] <[Coke]> so, I don't have a native windows box, but I had a virtual box setup where I could build rakudo a few months ago. If I dust that off, is there something in particular that needs testing on the windows side?

[13:41] <[Coke]> . o O ( building on windows now )

[13:45] <[Coke]> makefile is borked; I have to explicitly type "nmake all" now instead of just "nmake"

[13:48] <timotimo> [Coke]: it's about time for nqpmake!

[14:00] <Zoffix> [Coke]: FWIW, I built without trouble on Win10 with Strawberry Perl toolkit a week or two ago

[14:00] <Zoffix> huggable: rakudo win

[14:00] <huggable> Zoffix, perl Configure.pl --gen-moar --gen-nqp --backends=moar & gmake & gmake test & gmake install

[14:00] <Zoffix> ^ using that set of commands

[14:18] <[Coke]> I'm using  MS Visual Studio

[14:20] <timotimo> MV Sisual Studio

[14:21] <timotimo> St V Sisual Mudio

[14:48] <stmuk_> maybe something gnu make specific has sneaked in?

[17:42] <timotimo> AlexDaniel: you think a patch to switch $$/^^, $/^, ¬´/¬ª inside a <?after> around ought to make it into this release? given it's the LP6 release and all?

[17:44] <AlexDaniel> timotimo: I think it can go in if you feel good about patch itself

[17:44] <AlexDaniel> I'm going to run toaster again tonight, so if something is wrong I hope we'll catch it

[17:44] <timotimo> let me make sure that spectests are on my side here

[17:49] <Zoffix> timotimo: is it LP6 release tho? How do you figure?

[17:49] <timotimo> i thought LP6 is going to come out Real Soon Now?

[17:50] <timotimo> you think we'll release an Emergency Star when the book hits shelves?

[17:52] <Zoffix> huggable: star

[17:52] <huggable> Zoffix, Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[17:52] <timotimo> anyway, stresstest is happy with the patch it seems like

[17:52] <Zoffix> I think there'll be time for another release.

[17:52] <timotimo> OK, it'll go into a post-release branch, then

[17:52] <Zoffix> It's Real Soon, but Real Soon compared to the 2+ years it took

[17:52] <AlexDaniel> ok

[17:52] <Zoffix> In the last LP6 supporter update, it says "Things are going well. I've gone through the entire book and there are only some minor to do items left. My editor at O'Reilly has started reading through it and I'm hoping to be done in a matter of weeks. There are still many things to polish at this point. Once I turn it in I'll take some time to explain the roughly three month process that happens after that. "

[17:53] <Zoffix> So looks like there's still 3m after polishing.

[17:53] <Zoffix> This was sent on Apr 2nd

[17:53] <timotimo> ooh

[17:53] <timotimo> that's good

[17:54] <timotimo> t/spec/S05-mass/rx.rakudo.moar                                  (Wstat: 0 Tests: 755 Failed: 0)

[17:54] <timotimo> TODO passed:   157

[17:54] <timotimo> t/spec/S05-metasyntax/lookaround.rakudo.moar                    (Wstat: 0 Tests: 14 Failed: 0)

[17:54] <timotimo> TODO passed:   11-14

[17:54] <Zoffix> m: say Date.new('2018-07-28') - Date.today

[17:54] <camelia> rakudo-moar f6756bb4d: OUTPUT: ¬´99‚ê§¬ª

[17:54] <Zoffix> roughly 100 days until next-next Star

[17:55] <timotimo> ok 157 - lookbehind <after> # TODO anchors and after RT #124898

[17:55] <synopsebot> RT#124898 [new]: https://rt.perl.org/Ticket/Display.html?id=124898 [REGEX] S05-mass/rx.t line:503 reason: 'anchors and after'

[17:55] <timotimo> that title ...

[17:55] <timotimo> ok 11 - ^^ in <?after ...> # TODO RT #131964

[17:56] <synopsebot> RT#131964 [new]: https://rt.perl.org/Ticket/Display.html?id=131964 [REGEX] Anchors ^, ^^, $, $$, ¬´, ¬ª confused in <?after>

[17:56] <timotimo> so yeah, we already have tickets for this behaviour, and todo'd spectests. i'll say this patch is a good patch.

[17:59] <Geth> ¬¶ nqp/fix_anchors_in_after_regex_assertion: e60f1d8fd9 | (Timo Paulssen)++ | src/QRegex/P6Regex/Actions.nqp

[17:59] <Geth> ¬¶ nqp/fix_anchors_in_after_regex_assertion: switch around a few anchor types inside <after>

[17:59] <Geth> ¬¶ nqp/fix_anchors_in_after_regex_assertion:

[17:59] <Geth> ¬¶ nqp/fix_anchors_in_after_regex_assertion: since <after> is implemented as "flipping" the AST of

[17:59] <Geth> ¬¶ nqp/fix_anchors_in_after_regex_assertion: the regex and matching it against a flipped version of

[17:59] <Geth> ¬¶ nqp/fix_anchors_in_after_regex_assertion: the target string, a "right word boundary" has to become

[17:59] <Geth> ¬¶ nqp/fix_anchors_in_after_regex_assertion: a "left word boundary", same for ^^/$$ and ^/$

[17:59] <Geth> ¬¶ nqp/fix_anchors_in_after_regex_assertion: review: https://github.com/perl6/nqp/commit/e60f1d8fd9

[17:59] <timotimo> there we go.

[18:24] <[Coke]> finally got back to running the stresstest on windows again; first few tests seem very slow, cpu utilization at 1%; guessing one of the stresstest files is just borked on windows, falling back to spectest

[18:26] <Zoffix> Might be one of network nests. Windows got like 1s delay before retrying/failking things or something and the test assumes it'll retry/fail automagically and fast

[18:26] <[Coke]> yah, I'll go back and look at those individually. I just wanted to make sure I had a run; still don't know what the "drop support for windows" was about earlier today, just trying to avoid that.

[18:28] * Zoffix nods

[18:30] <[Coke]> ... I totally should be making sure the p6 stuff I'm using for $DAYJOB on my mac works in this VM.

[18:34] * AlexDaniel afk for a nap

[19:00] <releasable6> Next release in ‚âà23 hours. 3 blockers. Please log your changes in the ChangeLog

[19:18] <Kaiepi> shit i won't have the changes to rakudobot needed done in time for the next release

[19:19] <Kaiepi> there's a lot of refactoring i need to do since it's kinda hacky atm

[19:20] <Kaiepi> for now, just run build and test and i'll deal with stresstest manually

[19:22] <Kaiepi> do the docs have a style guide?

[19:38] <Zoffix> Yup, there's a bunch of .md files in root of repo

[19:38] <Kaiepi> perfect

[19:38] <Zoffix> STYLE/EXAMPLES/CONTRIBUTING IIRC

[19:44] <Kaiepi> STYLE and EXAMPLES are missing for me

[19:44] <Zoffix> Kaiepi: looks like those got moved: https://github.com/perl6/doc/tree/master/writing-docs

[19:47] <Kaiepi> ah

[19:48] <Kaiepi> what i was wondering about was how headers should be capitalized

[19:48] <Kaiepi> i've seen "Foo bar baz" and "Foo Bar Baz" in the same pages before

[19:49] <Zoffix> Just do whatever looks better and then you can open an Issue to ask what the better version is: https://github.com/perl6/doc/issues/new

[19:49] <Zoffix> Or just make it all consistent and add to Style Guide :P

[19:49] * Zoffix &

[19:51] <Kaiepi> i think i'll ask for some input before making it all consistent

[19:56] <Kaiepi> btw thoughts on a page for learning perl6 as a nodejs once i'm more familiar with the language

[19:56] <Kaiepi> s/nodejs/\0 user/

[20:14] <mst> can't do any harm AFAICS

[20:35] <Kaiepi> i think it'd be helpful since stuff like classes and anything async behave completely differently between the two

[20:36] <Kaiepi> well

[20:38] <Kaiepi> "classes" in node's case

[20:39] <Kaiepi> but stuff like getters/setters and es6's decorators proposal can be done in perl6 fairly easily

[20:40] <Kaiepi> speaking of which is trait_mod useful for Variable, Attribute, etc. outside of rakudo's code?

[20:41] <jnthn> Yeah, you can write custom ones :)

[20:41] <yoleaux> 18:23Z <Zoffix> jnthn: is this a sane thing to do? Making custom ops work globally: `CORE::<&infix:<+>>.add_dispatchee: multi infix:<+> (O \a, O \o) { ‚Ä¶ }`   .add_dispatchee ain't in the spec, wondering if it can be added?

[20:41] <Kaiepi> you can/

[20:41] <Kaiepi> s/\///

[20:41] <jnthn> Sure, I've done it in multiple of my modules :)

[20:41] <Kaiepi> oh!

[20:41] <Kaiepi> can you link some examples?

[20:42] <Kaiepi> i've only figured out how to work with Routine with it

[20:43] <jnthn> Bunch of parameter ones here: https://github.com/croservices/cro-http/blob/master/lib/Cro/HTTP/Router.pm6#L28

[20:44] <jnthn> Trying to remember about attributes...h

[20:45] <Kaiepi> ohh, i didn't think about using roles with it

[20:48] <jnthn> Hm, can't find an attribute one off hand.

[20:48] <jnthn> And method ones you already know about :)

[20:49] <Kaiepi> yep, i'm using one for a refactor i'm writing

[20:59] <timotimo> .o( rakudoboot )

[21:21] <Zoffix> Feels like adding constrained protos to resolve R#1739 is not the best of ideas. (1) It blocks off user's multies that use more positionals (if they define their own proto, they have to make it shuttle stuff to core ops). (2) it's very fragile, both in terms that we in core and users in their code need to remember to provide proper protos AND to ensure the protos match all the available candidates so none

[21:21] <synopsebot> R#1739 [open]: https://github.com/rakudo/rakudo/issues/1739 [‚ö† blocker ‚ö†] Unintended consequences of converting routines from `only` to `multi`

[21:21] <Zoffix> are blocked off by the proto's sig.

[21:22] <Zoffix> Basically, we're making it so the system depends on some manual step that isn't correlated to the .sort or whatever choosing which form to call. And requiring that step means bugs.

[21:24] <Zoffix> I think we should make the stuff that checks .count to go through candidates and figure out what the largest count is based on that. And that's a perf loss, but we can add some "apparent-count" method or something calling which makes the dispatchers return the cached value of the largest count of its multies (non-dispatchers would return their actual .count) and that cached value would be updated when

[21:24] <Zoffix> .add_dispatchee is called to add a candidate (I'm assuming that's how candidates are added; haven't actually looked)

[21:25] <Zoffix> .oO( maybe I should actually comment that on the issue... )

[21:30] <jnthn> If doing so, please supply examples of why (1) is a concrete problem.

[21:32] <Zoffix> Just more work, both for the user and for the computer (currently slurpies aren't cached, so it'd be slower if you do a capture arg and shuttle it to core op). Also, it's kinda non-obvious that you can do it

[21:33] <jnthn> Yes, but that's still abstract. I mean, I went through a bunch of the built-ins and tried to imagine when extending them with an extra positional could be a sensible API design choice and didn't come up with anything much.

[21:35] <jnthn> One thing we could do relatively easily already is, when a multi is declared whose signature won't meet the proto signature, to complain about it at compile time.

[21:35] <jnthn> Which would make it decidedly obvious.

[21:40] <Zoffix> m: say &words

[21:40] <camelia> rakudo-moar f6756bb4d: OUTPUT: ¬´sub words (| is raw) { #`(Sub|60887576) ... }‚ê§¬ª

[21:40] <Zoffix> OK.

[21:41] <Zoffix> I'm gonna stick the protos then some time later tonight

[21:41] <Zoffix> Change (|) to more specific protos I mean

[21:41] <jnthn> OK. I'll think of your comment some more also.

[21:41] <jnthn> Though a bit tired to think straight right now.

[23:05] <Geth> ¬¶ rakudo: 27565bf8e8 | (Zoffix Znet)++ | lib/NativeCall.pm6

[23:05] <Geth> ¬¶ rakudo: Micro-optimize guess_library_name()

[23:05] <Geth> ¬¶ rakudo:

[23:05] <Geth> ¬¶ rakudo: Per comments on https://github.com/rakudo/rakudo/commit/f6756bb4d9b8b43a55a613a1a2fc85a8c6d379c0#commitcomment-28677139

[23:05] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/27565bf8e8

[23:07] <Geth> ¬¶ rakudo: zoffixznet self-assigned Unintended consequences of converting routines from `only` to `multi` https://github.com/rakudo/rakudo/issues/1739

[23:12] <Zoffix> $ G 'proto ' src/core | grep -v method | wc -l

[23:12] <Zoffix> 352

[23:12] <Zoffix> daum.. .that gonna take awhile

[23:22] <Geth> ¬¶ rakudo: a0cbdbd8ed | (Zoffix Znet)++ | src/core/List.pm6

[23:22] <Geth> ¬¶ rakudo: Remove trailing whitespace

[23:22] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/a0cbdbd8ed

[23:22] <Geth> ¬¶ rakudo: 4f848967c8 | (Zoffix Znet)++ | 4 files

[23:22] <Geth> ¬¶ rakudo: Add "sub" to proto/multi for consistency

[23:22] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/4f848967c8

[23:43] <Zoffix> uh-oh

[23:45] <Zoffix> ah, nm, just a bug in my code. For a second I thought I found mis-scoped case of `for`+`without`

[23:56] <Zoffix> m: say 155/349

[23:56] <camelia> rakudo-moar 4f848967c: OUTPUT: ¬´0.444126‚ê§¬ª

[23:57] <Zoffix> 44% of our multi subs ain't got a restrictive proto

[23:59] <Geth> ¬¶ rakudo: 20ccaccad7 | (Zoffix Znet)++ | t/02-rakudo/12-proto-arity-count.t

[23:59] <Geth> ¬¶ rakudo: Add fudged tests for restrictive protos

[23:59] <Geth> ¬¶ rakudo:

[23:59] <Geth> ¬¶ rakudo: Covers currently-existing, public multis as part problem in

[23:59] <Geth> ¬¶ rakudo: https://github.com/rakudo/rakudo/issues/1739

[23:59] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/20ccaccad7
