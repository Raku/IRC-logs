[00:46] <Geth> ¦ rakudo: d93f805389 | (Zoffix Znet)++ | tools/lib/NQP/Configure.pm

[00:46] <Geth> ¦ rakudo: Fetch tags too to avoid potental missing tags

[00:46] <Geth> ¦ rakudo:

[00:46] <Geth> ¦ rakudo: As here: https://irclog.perlgeek.de/perl6/2018-01-11#i_15676712

[00:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d93f805389

[00:46] <Geth> ¦ nqp: fb5848819b | (Zoffix Znet)++ | tools/lib/NQP/Configure.pm

[00:46] <Geth> ¦ nqp: Fetch tags too to avoid potental missing tags

[00:46] <Geth> ¦ nqp:

[00:46] <Geth> ¦ nqp: As here: https://irclog.perlgeek.de/perl6/2018-01-11#i_15676712

[00:46] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fb5848819b

[01:02] <travis-ci> NQP build failed. Zoffix Znet 'Fetch tags too to avoid potental missing tags

[01:02] <travis-ci> https://travis-ci.org/perl6/nqp/builds/327486698 https://github.com/perl6/nqp/compare/dfa8a234ca62...fb5848819b86

[01:29] <Geth> ¦ rakudo: c6b7012a9c | (Zoffix Znet)++ | 2 files

[01:29] <Geth> ¦ rakudo: Fix spurious warnings with colonpaired longnames

[01:29] <Geth> ¦ rakudo:

[01:29] <Geth> ¦ rakudo: Fixes RT#131305: https://rt.perl.org/Ticket/Display.html?id=131305

[01:29] <Geth> ¦ rakudo:

[01:29] <Geth> ¦ rakudo: With a simple colonpair, like `infix:<+>` we have the value right

[01:29] <Geth> ¦ rakudo: away and don't get warnings, but with things like `postfix:<[ ]>`

[01:29] <Geth> ¦ rakudo: the value has a complex value that we compile-time compile when

[01:29] <synopsebot> RT#131305 [new]: https://rt.perl.org/Ticket/Display.html?id=131305 Useless Useless Use Warning when invoking colonpaired routines

[01:29] <Geth> ¦ rakudo: <…commit message has 10 more lines…>

[01:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c6b7012a9c

[02:06] <travis-ci> Rakudo build canceled. Zoffix Znet 'Comment out leftover debugging statement'

[02:06] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327402532 https://github.com/rakudo/rakudo/compare/d30e5b1e3274...0be9d55205d4

[02:07] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[03:48] <Geth> ¦ rakudo: 0dc4f7318f | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[03:48] <Geth> ¦ rakudo: Use faster nqp::elems instead of + on QAST nodes

[03:48] <Geth> ¦ rakudo:

[03:48] <Geth> ¦ rakudo: Bench shows it being 20% faster. There are more opportunities for

[03:48] <Geth> ¦ rakudo: this change in Rakudo, but converting all I found caused an

[03:48] <Geth> ¦ rakudo: explosion I had trouble locating the cause of, so doing it partially.

[03:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0dc4f7318f

[03:48] <Geth> ¦ nqp: 6b9d226f0c | (Zoffix Znet)++ | 18 files

[03:48] <Geth> ¦ nqp: Use faster nqp::elems instead of + on QAST nodes

[03:48] <Geth> ¦ nqp:

[03:48] <Geth> ¦ nqp: Bench shows it being about 20% faster

[03:48] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6b9d226f0c

[03:49] <Geth> ¦ rakudo: b6004362bf | (Zoffix Znet)++ | tools/build/NQP_REVISION

[03:49] <Geth> ¦ rakudo: [NQP Bump] Brings 3 commits

[03:49] <Geth> ¦ rakudo:

[03:49] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2017.12-51-gdfa8a23...2017.12-54-g6b9d226f0

[03:49] <Geth> ¦ rakudo: 6b9d226f0 Use faster nqp::elems instead of + on QAST nodes

[03:49] <Geth> ¦ rakudo: f760f56f1 Remove trailing whitespace

[03:49] <Geth> ¦ rakudo: fb5848819 Fetch tags too to avoid potental missing tags

[03:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b6004362bf

[03:49] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-51-gdfa8a23...2017.12-54-g6b9d226f0

[03:59] <travis-ci> Rakudo build canceled. Zoffix Znet 'Fetch tags too to avoid potental missing tags

[03:59] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327486625 https://github.com/rakudo/rakudo/compare/0be9d55205d4...d93f80538934

[03:59] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[06:06] <travis-ci> Rakudo build passed. Zoffix Znet 'Remove trailing whitespace'

[06:06] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327514299 https://github.com/rakudo/rakudo/compare/c6b7012a9c61...8265efe8b8f5

[07:15] <travis-ci> Rakudo build failed. Zoffix Znet 'Use faster nqp::elems instead of + on QAST nodes

[07:15] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327524245 https://github.com/rakudo/rakudo/compare/8265efe8b8f5...0dc4f7318f6a

[07:15] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[08:17] <[Tux]> I plan to do a distribution update of my workstation this weekend from openSUSE Leap 42.2 to 42.3. I do not think it will have any influence on the timings, but it might

[08:29] <[Tux]> Rakudo version 2017.12-169-gb6004362b - MoarVM version 2017.12.1-26-g65098f05b

[08:29] <[Tux]> csv-test-xs-20      0.450 -  0.476

[08:29] <[Tux]> test-t --race       1.146 -  1.173

[08:29] <[Tux]> csv-ip5xs           1.096 -  1.172

[08:29] <[Tux]> test-t              2.865 -  2.870

[08:29] <[Tux]> test               11.372 - 11.556

[08:29] <[Tux]> csv-parser         12.617 - 12.719

[08:29] <[Tux]> csv-ip5xs-20       12.795 - 12.842

[08:29] <[Tux]> test-t-20 --race   18.009 - 18.023

[08:29] <[Tux]> test-t-20          50.993 - 52.320

[08:48] <travis-ci> Rakudo build failed. Zoffix Znet '[NQP Bump] Brings 3 commits

[08:48] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327524372 https://github.com/rakudo/rakudo/compare/0dc4f7318f6a...b6004362bf82

[08:48] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[08:55] <lizmat> good *, #perl6-dev

[08:55] <lizmat> on http://modules.perl6.org/search/ , is there a way to show only core modules?

[08:56] <lizmat> if not, maybe core modules should have "core" tag ?

[09:01] <DrForr> That almost seems important enough to be its own (optional) flag in META6.json or friends.

[09:02] <lizmat> but *is* there a META6.json file for those ?

[09:02] <lizmat> if so, where does that live ?

[09:03] <DrForr> Aah, so I fail at knowing... right.

[09:05] <DrForr> That does sound similar to dual-life modules in p5, but the circumstances are clearly different. Dual-life modules exist in core *and* CPAN, perl6 core modules aren't yet broken out onto CPAN.

[09:06] <DrForr> Which leads me to the inevitable reminder to get what I have into CPAN over the weekend or similar.

[09:10] <lizmat> using App::Mi6 it's trivial  :-)

[09:24] <DrForr> Duly noted, and installing when I get home.

[09:32] <lizmat> Files=1231, Tests=76004, 330 wallclock secs (14.77 usr  5.40 sys + 2272.39 cusr 232.07 csys = 2524.63 CPU)

[09:40] <lizmat> afk&

[12:51] <Zoffix> lizmat: use from:core  http://modules.perl6.org/search/?q=from%3Acore

[12:51] <tbrowder> .tell AlexDaniel success!! tidying up and adding some new tests...will ping when ready again for a review.

[12:51] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[12:51] <Zoffix> hm, looks like http://modules.perl6.org/help doesn't list that one

[12:52] <lizmat> Zoffix: also, Telemetry appears to be missing, how do I add that ?

[12:52] <lizmat> and snapper for that matter

[12:53] <Zoffix> lizmat: they need to be listed in this hash: https://github.com/perl6/modules.perl6.org/blob/master/lib/ModulesPerl6/Model/CoreModules.pm#L8-L22

[12:54] <lizmat> ok, will add them

[13:21] <AlexDaniel`> .

[13:21] <AlexDaniel`> ... Ah...

[13:23] <lizmat> m: my $a = <2.2>; dd $a; $a++  # this should work, shouldn't it ?

[13:23] <camelia> rakudo-moar b6004362b: OUTPUT: «RatStr $a = RatStr.new(2.2, "2.2")␤Type check failed in binding to parameter '$r'; expected Rat but got Int (16)␤  in block <unit> at <tmp> line 1␤␤»

[13:24] <lizmat> m: my $a = 2.2; dd $a; $a++; dd $a  # this does

[13:24] <camelia> rakudo-moar b6004362b: OUTPUT: «Rat $a = 2.2␤Rat $a = 3.2␤»

[13:25] <lizmat> m: my $a = <2.2>; dd $a; $a += 1; dd $a  # and this does

[13:25] <camelia> rakudo-moar b6004362b: OUTPUT: «RatStr $a = RatStr.new(2.2, "2.2")␤Rat $a = 3.2␤»

[13:27] <lizmat> RatStr seems to be the only one with this problem, NumStr, IntStr and ComplexStr are all ok

[13:30] <Zoffix> s: &postfix:<++>, \(<2.2>)

[13:30] <SourceBaby> Zoffix, Something's wrong: ␤ERR: Could not find candidate that can do \(RatStr.new(2.2, "2.2"))␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 37␤  in block <unit> at -e line 6␤␤

[13:30] <Zoffix> s: &postfix:<++>, \(my $ = <2.2>)

[13:30] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/b6004362b/src/core/Any.pm#L512

[13:31] <Zoffix> s: <2.2>, 'succ', \()

[13:31] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/b6004362b/src/core/Rational.pm#L202

[13:31] <lizmat> GH #1387

[13:34] <Zoffix> m: my $x = <2e0>; dd $x; $x++; dd $x

[13:34] <camelia> rakudo-moar b6004362b: OUTPUT: «NumStr $x = NumStr.new(2e0, "2e0")␤Num $x = 3e0␤»

[13:34] <Zoffix> All allomorphs are affected looks like; it's just RatStr is the only one to explode.

[14:16] <[Coke]> .ask zoffix do you have an LC_COLLATE variable set? your comment on doc's 287bd033 indicates you're using sort -u (which is what I use), but when I do it, I end up not collating, just sorting by codepoint.

[14:16] <yoleaux> [Coke]: I'll pass your message to zoffix.

[14:16] <[Coke]> .tell zoffix (like your sort order better, want to keep it when I resort in the future)

[14:16] <yoleaux> [Coke]: I'll pass your message to zoffix.

[14:19] <AlexDaniel> .

[14:19] <yoleaux> 12:51Z <tbrowder> AlexDaniel: success!! tidying up and adding some new tests...will ping when ready again for a review.

[14:45] <Zoffix> .

[14:45] <yoleaux> 14:16Z <[Coke]> Zoffix: do you have an LC_COLLATE variable set? your comment on doc's 287bd033 indicates you're using sort -u (which is what I use), but when I do it, I end up not collating, just sorting by codepoint.

[14:45] <yoleaux> 14:16Z <[Coke]> Zoffix: (like your sort order better, want to keep it when I resort in the future)

[14:45] <Zoffix> [Coke]: I don't have LC_COLLATE set

[14:47] <Zoffix> [Coke]: here's my entire env: https://gist.github.com/zoffixznet/2b52b3be0e07f70a39ee8936c020b4bd

[14:48] <Zoffix> $ sort --version

[14:48] <Zoffix> sort (GNU coreutils) 8.21

[14:54] <lizmat> afk&

[15:20] <dogbert2_> hmm, is github having problems, I get a page with a unicorn

[15:21] <MasterDuke> dogbert2_: same here

[15:21] <dogbert2_> what a meltdown :)

[15:55] <[Coke]> .tell zoffix thanks, it's probably the sort binary itself then.

[15:55] <yoleaux> [Coke]: I'll pass your message to zoffix.

[16:03] <geekosaur> $LANG is set, this will set $LC_COLLATE implicitly

[16:04] <geekosaur> and most unicode locales have a default collation that, among other things, case-folds

[16:18] <[Coke]> geekosaur: my LANG is set to the same thing.

[16:19] <[Coke]> but my sort version is "2.3-Apple (99)"

[16:21] <Geth> ¦ rakudo: 631875fcdf | (Zoffix Znet)++ | src/core/allomorphs.pm

[16:21] <Geth> ¦ rakudo: Fix RatStr .succ/.pred explosion

[16:21] <Geth> ¦ rakudo:

[16:21] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1387

[16:21] <Geth> ¦ rakudo:

[16:21] <Geth> ¦ rakudo: The methods use Rational's candidates, which create a new object

[16:21] <Geth> ¦ rakudo: using `self.new`, expecting it to take a numerator and denominator,

[16:21] <Geth> ¦ rakudo: but `self` is a RatStr, not a Rat.

[16:21] <Geth> ¦ rakudo: <…commit message has 7 more lines…>

[16:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/631875fcdf

[16:22] <timotimo> ooh, fascinating

[16:22] <Geth> ¦ roast: 4e1bcfccc6 | (Zoffix Znet)++ | S02-literals/allomorphic.t

[16:22] <Geth> ¦ roast: Test .succ/.pred on allomorphs

[16:22] <Geth> ¦ roast:

[16:22] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1387

[16:22] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/631875fcdf

[16:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4e1bcfccc6

[16:57] <Geth> ¦ nqp: a620559a78 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[16:57] <Geth> ¦ nqp: [MoarVM Bump] Brings 5 commits

[16:57] <Geth> ¦ nqp:

[16:57] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2017.12.1-25-g1e2a3fb...2017.12.1-30-ged7c1234

[16:57] <Geth> ¦ nqp: ed7c1234 Optimize not_i when its input is a known value

[16:57] <Geth> ¦ nqp: 671bf1db Add some missing fact dependencies

[16:57] <Geth> ¦ nqp: 38a7f577 Remove bogus comment and known value fact tweak

[16:57] <Geth> ¦ nqp: c1da6f96 Make instruction deletion within dead BBs a no-op

[16:57] <Geth> ¦ nqp: 65098f05 Make log facts tolerate the odd outlier

[16:57] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a620559a78

[16:57] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.12.1-25-g1e2a3fb...2017.12.1-30-ged7c1234

[16:57] <Geth> ¦ rakudo: 31b3b77318 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[16:57] <Geth> ¦ rakudo: [NQP Bump] a620559a7 [MoarVM Bump] Brings 5 co […]

[16:57] <Geth> ¦ rakudo:

[16:57] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2017.12-54-g6b9d226f0...2017.12-55-ga620559a7

[16:57] <Geth> ¦ rakudo:

[16:57] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2017.12.1-25-g1e2a3fb...2017.12.1-30-ged7c1234

[16:57] <Geth> ¦ rakudo: ed7c1234 Optimize not_i when its input is a known value

[16:57] <Geth> ¦ rakudo: 671bf1db Add some missing fact dependencies

[16:57] <Geth> ¦ rakudo: 38a7f577 Remove bogus comment and known value fact tweak

[16:57] <Geth> ¦ rakudo: c1da6f96 Make instruction deletion within dead BBs a no-op

[16:57] <Geth> ¦ rakudo: 65098f05 Make log facts tolerate the odd outlier

[16:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/31b3b77318

[16:57] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-54-g6b9d226f0...2017.12-55-ga620559a7

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: 55e56393d7 | (Jonathan Worthington)++ | 2 files

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: Compile time error for misplaced whenever

[17:05] <Geth> ¦ rakudo/supply-syntax-opts:

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: I thought we already were doing this, but: make it a compile time

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: error to have a `whenever` block that is not lexically within a

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: `supply` or `react` block. Hopefully nobody was relying on this not

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: being an error; if they are, we can ban it in 6.d, and conditionally

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: do the opts that rely on it only for 6.d also. However, it seems

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: highly unlikely.

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/55e56393d7

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: d41acccd5e | (Jonathan Worthington)++ | 2 files

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: Optimize `supply emit <arg>`

[17:05] <Geth> ¦ rakudo/supply-syntax-opts:

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: This is a convenient way of getting a Supply that will simply emit a

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: single argument and then be done (or quit if the process of producing

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: the argument throws an exception). Given the program `my $s = supply

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: emit 42; for ^100_000 { react whenever $s {  } }`, this results in it

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: running in 78% of the time it would without this optimization.

[17:05] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/d41acccd5e

[18:12] <Kaiepi> sorry for the newby question and compile moarvm, nqp, and rakudo?

[18:14] <Kaiepi> i want to script this but working out how to build them in the right order

[18:15] <timotimo> there's a script for you!

[18:15] <timotimo> https://github.com/zoffixznet/z - i think this is the one

[18:16] <Kaiepi> perfect you're a lifesaver

[18:17] <timotimo> other than that it's not very difficult. just got to run Configure.pl with the same --prefix in moarvm, then nqp, then rakudo. and after Configure.pl in each of those folders you'll have to make install, so the next configure script can find what you've built

[18:21] <Kaiepi> yeah, just the order was confusing a bit

[18:21] <Kaiepi> remembering which prefis is which

[18:21] <timotimo> the prefixes should be the same or it won't work :)

[18:23] <Kaiepi> hm

[18:23] <Kaiepi> what was the order?

[18:23] <Kaiepi> nvm read

[18:23] <Kaiepi> i was doing nqp first, not moar

[18:34] <timotimo> you can build nqp without moar, but then you'll have to use either jvm or js as backend (or both)

[18:35] <Kaiepi> i need to check if the jdk plays nicely with it

[18:38] <timotimo> rakudo on jvm is known to have problems :(

[18:38] <timotimo> and rakudo on js doesn't pass the whole perl6 spec test suite yet

[18:38] <Kaiepi> idr what happened on freebsd but the install failed

[18:38] <timotimo> oh, freebsd

[18:39] <Kaiepi> i'm on openbsd now

[18:39] <timotimo> i wonder if some security feature is being too restrictive, like, we ask for executable stack because of our nativecall stuff

[18:40] <Kaiepi> the most annoying thing i dealt with was tweaking /etc/login.conf to let me compile stuff without giving up

[18:41] <timotimo> huh?

[18:42] <Kaiepi> its default max-prox, open file limit , proc count, file

[18:42] <Kaiepi> they were preeetty modest with the limits

[18:43] <Kaiepi> thank god i wasn't building the userland discovering

[18:43] <Kaiepi> *discovering that

[18:48] <timotimo> open files, yeah, that's fun

[18:48] <timotimo> we have multiple open files for every thread the user code starts, and we start out with two threads already

[20:57] <Geth> ¦ rakudo: 70c57c3a92 | usev6++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[20:57] <Geth> ¦ rakudo: [jvm] Hide unimplemented op captureinnerlex

[20:57] <Geth> ¦ rakudo:

[20:57] <Geth> ¦ rakudo: The code refactoring in 773d2b9e7b exposed nqp::captureinnerlex for all

[20:57] <Geth> ¦ rakudo: backends -- even though the new method !clone_phasers is called on MoarVM

[20:57] <Geth> ¦ rakudo: only.

[20:57] <Geth> ¦ rakudo:

[20:57] <Geth> ¦ rakudo: Fixes the JVM build.

[20:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/70c57c3a92

[21:06] <lizmat> bartolin++

[21:34] <Geth> ¦ rakudo: ac2e50c855 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[21:34] <Geth> ¦ rakudo: NO MONKEY BUSINESS!! 🙈🙉🙊

[21:34] <Geth> ¦ rakudo:

[21:34] <Geth> ¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1386

[21:34] <Geth> ¦ rakudo:

[21:34] <Geth> ¦ rakudo: Not adding any tests.

[21:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ac2e50c855

[22:31] <lizmat> .tell Zoffix http://modules.perl6.org/search/?q=List%3A%3AUtil shows List::Util 2x, did I do something wrong ?

[22:31] <yoleaux> lizmat: I'll pass your message to Zoffix.

[22:37] <Zoffix> lizmat: nope, and the duplicate is gone now. It's a bug on the site. See #2 on this issue: https://github.com/perl6/modules.perl6.org/issues/95

[22:38] <lizmat> ok  *phew*

[23:37] <travis-ci> Rakudo build passed. Zoffix Znet '[NQP Bump] a620559a7 [MoarVM Bump] Brings 5 co […]

[23:37] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327767945 https://github.com/rakudo/rakudo/compare/631875fcdfbb...31b3b7731804
