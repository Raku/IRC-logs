[00:45] <travis-ci> Rakudo build failed. Zoffix Znet 'Remove :$CWD param in IO::Path.dir

[00:45] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/324308633 https://github.com/rakudo/rakudo/compare/00b7832a9950...b3e73b64a28f

[00:45] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, 2 unique test files failed.

[01:18] <tbrowder> .tell AlexDaniel Happy New Year! check out my new commits on rakudo PR #1339 and roast PR #371.

[01:18] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[03:00] <Zoffix> Man. Got this code https://gist.github.com/zoffixznet/5ab4bf5bcafbcdf11193387a44b6de8d that dies with Cannot find method 'base_type' on object of type Perl6::Metamodel::ClassHOW

[03:00] <Zoffix> at gen/moar/BOOTSTRAP.nqp:1604

[03:01] <Zoffix> I just don't get how.... it's checked for being DefiniteHOW first :S

[03:33] <Zoffix> nqp: say(nqp::istype(42, blahblahblah))

[03:33] <camelia> nqp-moarvm: OUTPUT: «0␤»

[03:34] <Zoffix> I see

[03:34] <Zoffix> And the real type is Perl6::Metamodel::DefiniteHOW

[03:44] <Geth> ¦ rakudo/smiley-coercers2: 8dcf9dac13 | (Zoffix Znet)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[03:44] <Geth> ¦ rakudo/smiley-coercers2: Coerce to base_type of DefiniteHOWs

[03:44] <Geth> ¦ rakudo/smiley-coercers2: review: https://github.com/rakudo/rakudo/commit/8dcf9dac13

[03:44] <Zoffix> m: -> Int(Str) { dd $x }("x" but role { method Int { "x" } })

[03:44] <camelia> rakudo-moar b3e73b64a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3-> Int(Str) { dd 7⏏5$x }("x" but role { method Int { "x" } }␤»

[03:45] <Zoffix> m: -> Int(Str) $x { dd $x }("x" but role { method Int { "x" } })

[03:45] <camelia> rakudo-moar b3e73b64a: OUTPUT: «"x"␤»

[03:45] <Zoffix> So we don't do typecheck that result is what we want. I wonder how much slower stuff will get if that's implemented :|

[03:47] <Zoffix> I guess there's one way to find out :)

[03:47] <Zoffix> ZofBot: #YOLO amirite?

[03:47] <ZofBot> Zoffix, 736 00:57Z <japhb> [Tux]: Where is the historical file for your newly-expanded suite of CSV perf tests? I'm thinking of expanding the buggable speed grapher to graph any of them

[03:47] <Zoffix> releasable6: next

[03:47] <releasable6> Zoffix, Next release in 17 days and ≈15 hours. No blockers. Unknown changelog format

[03:50] <Zoffix> Also what was that thing we talked about where the target type can implement the method to coerce?

[03:50] <Zoffix> Oh just a new?

[03:51] <Zoffix> m: class Foos { has $.z; method new (Int $x) { self.bless: :z($x) } }; -> Foos() $x { dd $x }(42)

[03:51] <camelia> rakudo-moar b3e73b64a: OUTPUT: «No such method 'Foos' for invocant of type 'Int'. Did you mean any of these?␤    Bool␤    acos␤    cos␤    does␤␤  in block <unit> at <tmp> line 1␤␤»

[03:52] <Zoffix> So that'd try to call .Foos and if that fails, then try to call Foos.new(arg) and use that if that succeeds

[03:52] <Zoffix> Gonna implement that and the typechecking of the resultant type

[03:58] <Geth> ¦ rakudo: a177fa99cb | (Zoffix Znet)++ | 4 files

[03:58] <Geth> ¦ rakudo: Parse DefiniteHOWs as target type in coercers

[03:58] <Geth> ¦ rakudo:

[03:58] <Geth> ¦ rakudo: We parse type smileys with <colonpair>s, which makes Int:D(Cool)

[03:58] <Geth> ¦ rakudo: appear as Int with colonpair :D(Cool). We only care about the keys

[03:58] <Geth> ¦ rakudo: of those colonpairs, so we end up thinking it's just a plain

[03:58] <Geth> ¦ rakudo: DefiniteHOW without any coercer bits.

[03:58] <Geth> ¦ rakudo:

[03:58] <Geth> ¦ rakudo: Fix by gutting the type-smiley Pair objects for WVals and using

[03:58] <Geth> ¦ rakudo: them to make coercers. Originally tried to fix this by making

[03:58] <Geth> ¦ rakudo: a separate type-smiley token, which works for parameters, but

[03:58] <Geth> ¦ rakudo: conflicts with colonpair longnames in term:<name>s.

[03:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a177fa99cb

[03:58] <Geth> ¦ rakudo: 8dcf9dac13 | (Zoffix Znet)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[03:58] <Geth> ¦ rakudo: Coerce to base_type of DefiniteHOWs

[03:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8dcf9dac13

[03:58] <Geth> ¦ rakudo: fc99d5e1cd | (Zoffix Znet)++ | 5 files

[03:58] <Geth> ¦ rakudo: Merge branch 'smiley-coercers2'

[03:58] <Geth> ¦ rakudo:

[03:59] <Geth> ¦ rakudo: - Fixes parsing bugs where `Foo:D(Bar)` got parsed as just a DefiniteHOW,

[03:59] <Geth> ¦ rakudo:     completely ignoring stuff in parentheses

[03:59] <Geth> ¦ rakudo: - `Foo:D(Bar)` is now a definite-how coercer that accepts a `Bar` and

[03:59] <Geth> ¦ rakudo:     coerces to `Foo`. The definiteness check on the resultant type

[03:59] <Geth> ¦ rakudo:     is not yet performed

[03:59] <Geth> ¦ rakudo: - Now throws X::MultipleTypeSmiley on stuff like `Foo:D:U:D:D:D` that

[03:59] <Geth> ¦ rakudo:     previously parsed without issues

[03:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fc99d5e1cd

[03:59] * Zoffix forgot --no-ff thing on merge

[04:03] <Geth> ¦ roast: 7327b52b82 | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[04:03] <Geth> ¦ roast: Unfudge now-passing test

[04:03] <Geth> ¦ roast:

[04:03] <Geth> ¦ roast: RT#126433:  https://rt.perl.org/Ticket/Display.html?id=126433

[04:03] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/fc99d5e1cd

[04:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7327b52b82

[04:03] <synopsebot> RT#126433 [open]: https://rt.perl.org/Ticket/Display.html?id=126433 Parameter coercion with type smiley doesn't work

[04:08] <Zoffix> .tell jnthn made `Foo:D(Bar)` coercers work, if you wanted to sanity check: https://github.com/rakudo/rakudo/commit/fc99d5e1cd#diff-a81a8247fe9a4f902ab6f14a3314ccc2R1599  FYI: next gonna implement type-checking of result after coersion + trying to do `Target.new: Original` coersion if `Original.Target` fails

[04:08] <yoleaux> Zoffix: I'll pass your message to jnthn.

[04:49] <travis-ci> Rakudo build failed. Zoffix Znet 'Merge branch 'smiley-coercers2'

[04:49] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/324445853 https://github.com/rakudo/rakudo/compare/b3e73b64a28f...fc99d5e1cd4a

[04:49] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, only t/05-messages/01-errors.t test file failed.

[07:36] <[Tux]> ZofBot, japhb, http://tux.nl/Talks/CSV6/speed-all.log

[07:36] <ZofBot> [Tux], i got 28% inlined btw, how much did you get? Same with that op i get 98

[07:50] <[Tux]> Rakudo version 2017.12-93-gfc99d5e1c - MoarVM version 2017.12-19-g40a79ee83

[07:50] <[Tux]> csv-test-xs-20      0.447 -  0.456

[07:50] <[Tux]> csv-ip5xs           1.206 -  1.215

[07:50] <[Tux]> test-t --race       1.304 -  1.348

[07:50] <[Tux]> test-t              3.024 -  3.183

[07:50] <[Tux]> test               12.342 - 12.558

[07:50] <[Tux]> csv-parser         13.298 - 14.564

[07:50] <[Tux]> csv-ip5xs-20       14.400 - 14.947

[07:50] <[Tux]> test-t-20 --race   20.676 - 20.722

[07:50] <[Tux]> test-t-20          55.459 - 56.823

[08:51] <Geth> ¦ rakudo: titsuki++ created pull request #1359: Fix RT#127051

[08:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1359

[08:52] <synopsebot> RT#127051 [new]: https://rt.perl.org/Ticket/Display.html?id=127051 [LHF] error for 1/1.WHAT

[09:30] <Geth> ¦ rakudo: 9910b39319 | (Itsuki Toyota)++ | src/core/Rat.pm

[09:30] <Geth> ¦ rakudo: Add smileys to make sure that rational calculation only uses instances not type objects

[09:30] <Geth> ¦ rakudo:

[09:30] <Geth> ¦ rakudo: Fixes RT#127051: https://rt.perl.org/Public/Bug/Display.html?id=127051

[09:30] <Geth> ¦ rakudo:

[09:30] <Geth> ¦ rakudo: This fix keeps both DIVIDE_NUMBERS and DON'T_DIVIDE_NUMBERS from accepting type object and makes the exception handling more proper.

[09:30] <Geth> ¦ rakudo: For example, multi sub infix:</>(Int:D \a, Int:D \b) can detect the denominator of 1/1.WHAT is a type object and cause an exception before calling DIVIDE_NUMBERS.

[09:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9910b39319

[09:31] <synopsebot> RT#127051 [new]: https://rt.perl.org/Ticket/Display.html?id=127051 [LHF] error for 1/1.WHAT

[09:31] <Geth> ¦ rakudo: 9adc58c3cb | (Itsuki Toyota)++ | t/05-messages/02-errors.t

[09:31] <Geth> ¦ rakudo: Add tests for exception handling of rational calculation

[09:31] <Geth> ¦ rakudo:

[09:31] <Geth> ¦ rakudo: Fixes RT#127051: https://rt.perl.org/Public/Bug/Display.html?id=127051

[09:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9adc58c3cb

[09:31] <Geth> ¦ rakudo: 6373961a54 | lizmat++ (committed using GitHub Web editor) | 2 files

[09:31] <Geth> ¦ rakudo: Merge pull request #1359 from titsuki/fix-rat-LTA

[09:31] <Geth> ¦ rakudo:

[09:31] <Geth> ¦ rakudo: Fix RT#127051

[09:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6373961a54

[10:33] <travis-ci> Rakudo build errored. lizmat 'Merge pull request #1359 from titsuki/fix-rat-LTA

[10:33] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/324507089 https://github.com/rakudo/rakudo/compare/fc99d5e1cd4a...6373961a5485

[10:34] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, 4 unique test files failed.

[14:19] <Geth> ¦ rakudo: f8d8481c99 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/BOOTSTRAP.nqp

[14:19] <Geth> ¦ rakudo: Fix typos in comment

[14:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f8d8481c99

[15:43] <[Coke]> Zoffix++ # working on 6.d stuff

[15:50] <travis-ci> Rakudo build errored. Zoffix Znet 'Fix typos in comment'

[15:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/324596352 https://github.com/rakudo/rakudo/compare/6373961a5485...f8d8481c995c

[15:50] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, 3 unique test files failed.

[16:20] <|Tux|> Box was relatively busy this morning, so here we go again ...

[16:20] <|Tux|> Rakudo version 2017.12-97-gf8d8481c9 - MoarVM version 2017.12-19-g40a79ee83

[16:20] <|Tux|> csv-test-xs-20      0.452 -  0.472

[16:20] <|Tux|> csv-ip5xs           1.103 -  1.113

[16:20] <|Tux|> test-t --race       1.144 -  1.151

[16:20] <|Tux|> test-t              2.858 -  2.875

[16:20] <|Tux|> test               11.391 - 11.524

[16:20] <|Tux|> csv-parser         12.375 - 12.480

[16:20] <|Tux|> csv-ip5xs-20       12.941 - 13.408

[16:20] <|Tux|> test-t-20 --race   17.832 - 18.274

[16:20] <|Tux|> test-t-20          51.689 - 52.245

[17:22] <Zoffix> Weird. Thought this was the business end of the coercion stuff: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/BOOTSTRAP.nqp#L381-L395

[17:23] <Zoffix> But I made changes to it and nothing happened and I see the error message on failed coercion doesn't match that code either

[17:23] <Zoffix> m: class Bar { }; -> Int(Bar) $x {dd $x}(Bar)

[17:23] <camelia> rakudo-moar f8d8481c9: OUTPUT: «No such method 'Int' for invocant of type 'Bar'␤  in block <unit> at <tmp> line 1␤␤»

[17:55] <timotimo> there's quite possibly also coercion implemented in the signature lowerer, Zoffix

[17:55] <timotimo> that's a piece of code that replaces a call into the slow binder with custom code generated for exactly the signature the sub has

[18:06] <Zoffix> timotimo: where is it at? Somewhere in Actions/Grammar?

[18:06] <AlexDaniel> squashable6: next

[18:06] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 1 day and ≈15 hours (2018-01-06 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[18:07] <Zoffix> "src/Perl6/Actions.nqp:    sub lower_signature" guess that is it

[18:07] <timotimo> have to look

[18:07] <timotimo> ah, yes that one

[18:07] <Zoffix> Thanks.

[18:11] <Zoffix> aye, see the coersion bits up in there :) timotimo++

[18:15] <Zoffix> What would make it go through unlowered path? 'cause I need to test it too

[18:16] <timotimo> hm, maybe put a named argument with a hundred aliases in

[18:17] <Zoffix> timotimo++ # :foo(:ber(:$moo))  did the trick

[18:17] <timotimo> neat

[20:25] <lizmat> m: enum (a => { $^b < 42 }); dd a # shouldn't this work ?

[20:25] <camelia> rakudo-moar f8d8481c9: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot auto-generate a proto method for 'Int' in the setting␤at <tmp>:1␤»

[20:25] <lizmat> pretty LTA error message BTW

[20:26] <jnthn> I dunno what you want it to do. Pretty sure that error is a heuristic for CORE.setting developers that rewrites some real error, though, apparently not always helpfully

[20:27] <jnthn> Oh, maybe enum with Block values?

[20:27] <lizmat> right

[20:27] <lizmat> a simple dispatch table in enums

[23:23] <Zoffix> m: class Target {}; class Source { method Target { Target.new } };  -> Target:D(Source:U) {}( Source )

[23:23] <camelia> rakudo-moar f8d8481c9: OUTPUT: «Parameter '<anon>' of routine '<anon>' must be an object instance of type 'Source:U', not a type object of type 'Source'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[23:23] <Zoffix> That should work, right?

[23:24] <Zoffix> "this" -> coercers with :U source and :D target or viceversa

[23:36] <timotimo> tbh, i'd use a type capture for the :D → :U case

[23:37] <Zoffix> timotimo: what's a type capture?

[23:38] <Zoffix> the ::T thing?

[23:39] * Zoffix doesn't follow

[23:56] <Zoffix> ¯\_(ツ)_/¯

[23:56] <Zoffix> ZofBot: the humans aren't answering. We're on our own!

[23:56] <ZofBot> Zoffix, jeffbots

[23:56] <Zoffix> Ssssh! The jeffbots are a secret!

[23:56] <Zoffix> k, well, I'll spec the :D/:U thing as a todo and will rip out before 6.d if it's not reasonable to implement it
