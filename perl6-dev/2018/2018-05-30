[00:04] *** d4l3k_ joined
[00:06] *** jsimonet left
[00:06] *** dalek left
[00:06] *** d4l3k_ is now known as dalek

[00:06] *** Geth left
[00:06] *** ZofBot left
[00:06] *** synopsebot left
[00:08] *** greppable6 left
[00:08] *** greppable6 joined
[00:14] *** jsimonet joined
[00:32] *** skids left
[00:35] *** skids1 joined
[00:37] *** AlexDaniel`` left
[00:37] *** CIAvash[m] left
[00:38] *** ilmari[m] left
[00:38] *** tadzik left
[00:38] *** ChanServ sets mode: +v dalek

[00:40] *** greppable6 left
[00:40] *** greppable6 joined
[00:41] *** squashable6 left
[00:41] *** benchable6 left
[00:41] *** coverable6 left
[00:41] *** undersightable6 left
[01:04] *** tadzik joined
[01:04] *** BenGoldberg joined
[01:27] *** shareable6 joined
[01:31] *** shareable6 left
[01:37] *** ilmari[m] joined
[01:37] *** AlexDaniel`` joined
[01:37] *** CIAvash[m] joined
[01:38] *** coverable6 joined
[01:38] *** benchable6 joined
[01:38] *** squashable6 joined
[01:40] <AlexDaniel> Oh! GitHub finally added comment edit history!

[01:40] <AlexDaniel> yey

[01:45] *** ilbot3 left
[01:47] *** shareable6 joined
[01:54] *** shareable6 left
[01:58] *** ilbot3 joined
[01:58] *** ChanServ sets mode: +v ilbot3

[02:13] <samcv> AlexDaniel: is that only viewable for admin or something or what?

[02:49] <samcv> i should be able to speed up the NFA i believe

[02:52] <samcv> it seems to request the same graphemes again and again using get_graphem_at_nocheck which is something i remedied with the knuth morris pratt implementation by making a caching grapheme iterator. that saves the last returned grapheme and returns it if it's asked for again. then if the next one is asked for it grabs the next from the iterator

[02:52] <samcv> if a grapheme not the current or the next one is asked for, it resets the grapheme iterator

[02:53] <samcv> instead of making a new grapheme iterator each time we call it in case it's a strand

[03:04] *** ExtraCrispy left
[03:06] <MasterDuke> ooo, that should help with parsing, right?

[03:06] <samcv> yeah

[03:07] *** ExtraCrispy joined
[03:07] <MasterDuke> nice

[03:07] *** shareable6 joined
[03:11] *** shareable6 left
[03:22] *** buggable left
[03:22] *** huggable left
[03:22] *** ZofBot joined
[03:22] *** ChanServ sets mode: +v ZofBot

[03:22] *** huggable joined
[03:22] *** ChanServ sets mode: +v huggable

[03:22] *** buggable joined
[03:22] *** ChanServ sets mode: +v buggable

[03:23] *** p6lert left
[03:23] *** p6lert joined
[03:23] *** SourceBaby joined
[03:23] *** ChanServ sets mode: +v SourceBaby

[03:23] *** Undercover joined
[03:23] *** ChanServ sets mode: +v Undercover

[03:32] *** shareable6 joined
[03:33] *** shareable6 left
[03:33] *** shareable6 joined
[03:35] *** shareable6 left
[03:37] *** shareable6 joined
[03:39] <AlexDaniel> samcv: I think it's only available for new edits

[03:39] *** shareable6 left
[03:39] *** shareable6 joined
[03:42] *** shareable6 left
[03:42] *** shareable6 joined
[03:46] *** shareable6 left
[03:57] *** shareable6 joined
[03:59] <AlexDaniel> .tell jmerelo I looked at shareable issue and it seems like it can only serve one file, then it just hangs or something like that (some time later the watchdog will restart it and it'll be able to serve another file, but it takes time for the watchdog to kick in). Looks very similar to R#1595

[03:59] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[03:59] <AlexDaniel> .tell jmerelo I'll have to figure something out for this before the squashathon :S

[03:59] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[04:03] <AlexDaniel> .tell jmerelo the workaround mentioned in https://github.com/perl6/whateverable/issues/24#issuecomment-371292860 is in place, but it doesn't help for some reason. Moreover, bots have some restrictions to which paths they can write, and *that* is what affects it, I think.

[04:03] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[04:03] <AlexDaniel> actually let me try something‚Ä¶

[04:03] *** shareable6 left
[04:03] *** shareable6 joined
[04:05] *** shareable6 left
[04:08] <AlexDaniel> .tell jmerelo oh actually, I think I ‚Äú‚Äúfixed‚Äù‚Äù it. Now every service will use an existing precomp file instead of generating a new one on the fly‚Ä¶ that fixes shareable ü§¶ No idea how that can possibly help, but it works now

[04:08] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[05:13] *** MasterDuke left
[05:55] *** skids1 left
[06:25] *** brrt joined
[06:30] *** BenGoldberg left
[06:34] <[Tux]> I cannot build

[07:10] *** gfldex left
[07:17] *** gfldex joined
[07:57] <nine> m: my $foo := my method foo(::T $) {}; say $foo.signature.params[0].is_generic;

[07:57] <camelia> rakudo-moar 0180dfa67: OUTPUT: ¬´False‚ê§¬ª

[07:57] <nine> This ^^^ doesn't look right to me?

[07:58] *** shareable6 joined
[08:02] *** llfourn_ joined
[08:03] *** llfourn left
[08:47] *** brrt left
[08:49] <lizmat> Files=1239, Tests=76369, 320 wallclock secs (15.57 usr  5.54 sys + 2217.54 cusr 223.77 csys = 2462.42 CPU)

[08:51] <lizmat> hmmm... last rakudo build fail were caused by " Unable to locate package gcc-6" ??

[08:51] <El_Che> we all moved to 7

[08:52] <lizmat> so what do we need to change to make the error go away ?

[08:52] <El_Che> don't look for analogies on the version numbers :)

[08:52] <El_Che> lizmat: make it more generic

[08:53] <lizmat> I've never made anything wrt Travis

[08:53] <El_Che> some OS releases will use 5, 6 or 7

[08:53] <El_Che> ah travis rund ubuntu 14.04

[09:00] <El_Che> lizmat: add build-essential pkg to travis

[09:01] <El_Che> lizmat: https://github.com/perl6/rakudo-pkg-canary/blob/master/docker/Dockerfile-ubuntu-amd64-14.04

[09:01] <El_Che> there are the pkgs needed to build rakudo on ubuntu 14.04

[09:02] <El_Che> build-essential git wget

[09:03] <lizmat> so I'm unsure what you expect of me now

[09:08] <El_Che> nothing much, I don't know what's the problem is besides you're missing gcc

[09:08] <El_Che> what's failing, the rakudo CI?

[09:10] *** undersightable6 joined
[09:13] <lizmat> https://travis-ci.org/rakudo/rakudo/builds/385397733    # yup

[09:13] <buggable> [travis build above] ‚úì All failures are due to: missing build log (2 failures).

[09:18] <El_Che> lizmat: I don't have rights on that CI setup, but i thing it just needs to be restarted

[09:18] <El_Che> a temporarely ppa or network problem maybe?

[09:18] <lizmat> ok, we'll find out when the next commit to rakudo happens  :-)

[09:20] <El_Che> there is a button on the right side of each run te restart it manually

[09:28] <lizmat> restarted...

[09:29] <El_Che> <thumbs up>

[09:38] *** travis-ci joined
[09:38] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Bump NQP to get the latest NQP / Moar / JVM goodies'

[09:38] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/385397733 https://github.com/rakudo/rakudo/compare/0666f6a86428...0180dfa673d6

[09:38] *** travis-ci left
[09:38] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[09:38] <lizmat> :-(

[09:38] <lizmat> that's something else though

[09:39] <lizmat> dies in core setting compilation ??

[09:40] * lizmat tries a completely fresh build

[09:55] <lizmat> builds, make test, make spectest ok 

[09:56] *** travis-ci joined
[09:56] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Bump NQP to get the latest NQP / Moar / JVM goodies'

[09:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/385397733 https://github.com/rakudo/rakudo/compare/0666f6a86428...0180dfa673d6

[09:56] *** travis-ci left
[09:56] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[10:00] <lizmat> I wonder if this is related to Jeremy Studer's work on signals

[10:05] <lizmat> either that, or it can't make a compilation ID

[10:27] <lizmat> hmmm... seems we lost Geth ??

[10:35] *** brrt joined
[10:43] <AlexDaniel> squashable6: next

[10:43] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 1 day and ‚âà23 hours (2018-06-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[11:19] *** travis-ci joined
[11:19] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Attempt to find out why Travis fails on some version of Ubuntu'

[11:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/385621255 https://github.com/rakudo/rakudo/compare/0180dfa673d6...16d3d6f64839

[11:19] *** travis-ci left
[11:20] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[11:27] * lizmat has pushed a revert and gives up on finding out WTF is wrong with the Travis build

[11:37] <[Tux]> https://gist.github.com/Tux/3b46b30a80fea87e55968b83319c5655 ‚Üê does that ring any bells? All precomp folders have been removed before build

[11:48] <timotimo> mhhh a failure to report a compile-time exception results in an exception

[11:57] <nine> I can repro it here

[11:58] <timotimo> cool

[11:58] <timotimo> we can hook up the debugserver to that

[11:59] <timotimo> that would likely let us figure out at least where we are in the input file

[11:59] <nine> What do I have to do?

[12:00] <timotimo> OK, so first you'd install MoarVM::Remote onto a perl6 that is installed and working

[12:00] <timotimo> because obviously if the core setting isn't compiled that will hardly fly :)

[12:01] <nine> 2018.04.1 new enough?

[12:01] <timotimo> then you'd call moar with --debug=port=1234 and --debug-suspend and launch moar-remote with the port as first argument

[12:01] <timotimo> i don't think moar-remote requires a very new rakudo

[12:01] <timotimo> only the moar that you pass --debug-port and such must be new enough, which it has to be anyway to build an up-to-date core setting

[12:04] <nine> ===SORRY!===

[12:04] <nine> last without loop construct

[12:04] <nine> ===> Testing [FAIL]: MoarVM::Remote:ver<0.0.1>

[12:05] <timotimo> oh, try with --/test then

[12:05] <timotimo> the tests will try to run against the moar being used to install it, which is not what we want here

[12:05] <timotimo> also, maybe a bug

[12:11] <timotimo> when moar-remote is connected, we should be able to:   bp "src/Perl6/World.nqp" 5079 1 1

[12:11] <timotimo> and then:  resume

[12:15] <nine> timotimo: moar-remote is missing in the META6.json and is therefore not installed

[12:15] *** travis-ci joined
[12:15] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Revert "Attempt to find out why Travis fails on some version of Ubuntu"

[12:15] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/385642328 https://github.com/rakudo/rakudo/compare/16d3d6f64839...b0890f2111fc

[12:15] *** travis-ci left
[12:15] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[12:16] <nine> timotimo: err....the git repo doesn't even contain a moar-remote?

[12:16] <El_Che> lizmat: I just launched a ubuntu 14.04 container, added the ppa (add-apt-repository ppa:ubuntu-toolchain-r/test) and installed gcc-6 without problems

[12:17] <El_Che> lizmat: # which gcc-6 \n /usr/bin/gcc-6

[12:17] <El_Che> I dunno how the ppa magic works

[12:17] <lizmat> El_Che: that particular error appeared to be a flapper, the next build work fine

[12:18] <El_Che> ah ok

[12:18] <lizmat> what we're looking at now is another error that prohibits building the core setting

[12:18] <lizmat> except I can't repro it  :-(

[12:18] <lizmat> although I suspect nine's merging of the signals stuff in nqp to be related

[12:19] <lizmat> but that's just a hunch

[12:19] <El_Che> you can't make an omelet without breaking core, they say

[12:24] <timotimo> oh, sorry

[12:24] <timotimo> what you need is App::MoarVM::Debug, nine 

[12:24] *** brrt left
[12:33] <nine> timotimo: ===> Install [FAIL] for App::MoarVM::Debug:ver<0.0.1>: ===SORRY!===

[12:33] <nine> Missing serialize REPR function for REPR VMException (BOOTException

[12:33] <timotimo> huh, let me try it with your rakudo version, too

[12:33] <timotimo> you said 2018.04.1?

[12:34] <nine> yes

[12:34] <nine> Because that's easily available as package for openSUSE

[12:39] <timotimo> ah, it thinks the module is already installed

[12:40] <timotimo> damn, it used the wrong perl6 it looks like

[12:40] <timotimo> ~/build/stable_perl6/install/share/perl6/site/bin/zef install --force-install --/test App::MoarVM::Debug

[12:40] <timotimo> 1 bin/ script [moar-remote] installed to:

[12:40] <timotimo> /home/timo/perl6/install/share/perl6/site/bin

[12:40] <timotimo> why, though?

[12:40] <timotimo> that's the wrong prefix :<

[12:42] <lizmat> .tell Zoffix re your last tweet: I would stick "@*ARGS.List.perl.say" in a script called "qw"  :-)

[12:42] <yoleaux> lizmat: I'll pass your message to Zoffix.

[12:45] <timotimo> No candidate found for 'moar-remote' that match your criteria.

[12:45] <timotimo> Did you perhaps mean one of these?

[12:45] <timotimo> (empty table)

[12:50] *** BeastieBot left
[12:50] <timotimo> nine: i can't get that running at the moment; can you get a newer perl6 to run moar-remote?

[12:55] <nine> Build is fixed by merging the getsignals PR there, too.

[12:56] <nine> I just didn't realize that the change to nqp was not backwards incompatible

[12:56] <timotimo> that's the fix for CORE.setting actually?

[12:57] <nine> yes

[12:58] <nine> In case that's not clear: the fixing PR is now merged. Apparently geth is just down

[12:59] <timotimo> OK

[12:59] <timotimo> maybe we'll get the moar remote working the next time we find a problem

[13:02] <lizmat> and now the master build of rakudo is broken: but that is easily fixable

[13:03] * lizmat just pushed an NQP version bump

[13:06] *** brrt joined
[13:07] * [Coke] gets a lot of compiler warnings in src/debug/debugserver if anyone wants 'em

[13:12] <brrt> yes, we do wants them

[13:13] <brrt> always

[13:18] <[Coke]> rebuilding so I can capture them, will gist them shortly.

[13:20] <[Coke]> https://gist.githubusercontent.com/coke/2c98f47e8a4f6145a3a582db4dc0930f/raw/b588dda5de71f1a8f901fefc37fdba489782010e/make.out

[13:22] <timotimo> that filename m)

[13:24] <[Coke]> it's... fine.

[13:47] *** travis-ci joined
[13:47] <travis-ci> Rakudo build failed. niner 'Merge pull request #1601 from jstuder-gh/sig_hash_2

[13:47] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/385676395 https://github.com/rakudo/rakudo/compare/b0890f2111fc...b0a54f92ff32

[13:47] *** travis-ci left
[13:47] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[13:51] <lizmat> that's probably before the NQP bump

[13:53] *** AlexDaniel left
[13:53] *** AlexDaniel joined
[14:42] *** travis-ci joined
[14:42] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Bump NQP to get master to build again'

[14:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/385680451 https://github.com/rakudo/rakudo/compare/b0a54f92ff32...189c5a8a3470

[14:42] *** travis-ci left
[15:03] *** committable6 joined
[15:50] *** Tison joined
[15:55] *** synopsebot joined
[15:55] *** ChanServ sets mode: +v synopsebot

[15:55] *** Geth joined
[15:55] *** ChanServ sets mode: +v Geth

[16:01] *** tadzik left
[16:01] *** Guest55637 joined
[16:15] *** skids joined
[16:27] *** brrt left
[16:38] <nine> m: my $foo := my method foo(::T $) {}; say $foo.signature.params[0].is_generic;

[16:38] <camelia> rakudo-moar 189c5a8a3: OUTPUT: ¬´False‚ê§¬ª

[16:38] <nine> So why isn't this param recognized as generic?

[17:16] *** samcv left
[17:22] *** samcv joined
[17:36] *** Tison left
[17:43] *** ExtraCrispy left
[17:48] <AlexDaniel> squashable6: status

[17:48] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 1 day and ‚âà16 hours (2018-06-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[17:54] <Geth> ¬¶ rakudo: skids++ created pull request #1884: Correct param name with signature constraint (fixes rt#132209)

[17:54] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/1884

[17:54] <synopsebot> RT#132209 [new]: https://rt.perl.org/Ticket/Display.html?id=132209 Crash when type-constraining by a named param by signature

[18:24] <Geth> ¬¶ rakudo: ee48f19103 | usev6++ | t/spectest.data

[18:24] <Geth> ¬¶ rakudo: [JVM] Run some more test files for Proc::Async

[18:24] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/ee48f19103

[18:37] <lizmat> #132209

[18:41] <Geth> ¬¶ rakudo: tbrowder++ created pull request #1885: More clean up of whitespace handling.

[18:41] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/1885

[18:42] <Geth> ¬¶ rakudo: e776ded7f2 | (Tom Browder)++ | src/Perl6/Pod.nqp

[18:42] <Geth> ¬¶ rakudo: More clean up of whitespace handling.

[18:42] <Geth> ¬¶ rakudo: 

[18:42] <Geth> ¬¶ rakudo: Related changes:

[18:42] <Geth> ¬¶ rakudo: 

[18:42] <Geth> ¬¶ rakudo: + add new sub trim-string (replaces sub trim_right)

[18:42] <Geth> ¬¶ rakudo: + improve and sub normalize_text (reduced redundant code)

[18:42] <Geth> ¬¶ rakudo: + improve unicode documentation

[18:42] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 7 more lines‚Ä¶>

[18:42] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/e776ded7f2

[18:42] <Geth> ¬¶ rakudo: 7183ac105b | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/Pod.nqp

[18:42] <Geth> ¬¶ rakudo: Merge pull request #1885 from tbrowder/nbsp-clean

[18:43] <Geth> ¬¶ rakudo: 

[18:43] <Geth> ¬¶ rakudo: More clean up of whitespace handling.

[18:43] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/7183ac105b

[18:59] <Geth> ¬¶ rakudo: 9472fdfd97 | (Elizabeth Mattijsen)++ | 3 files

[18:59] <Geth> ¬¶ rakudo: Move pack/unpack support to lib/experimental

[18:59] <Geth> ¬¶ rakudo: 

[18:59] <Geth> ¬¶ rakudo: Well, as much as possible:

[18:59] <Geth> ¬¶ rakudo: - needed to leave an 'unpack' stub in Buf

[18:59] <Geth> ¬¶ rakudo: - needed to catch "pack" in Grammar.explain_mystery

[18:59] <Geth> ¬¶ rakudo: - but using pack() without 'use experimental :pack' is now a compile error

[18:59] <Geth> ¬¶ rakudo: - made the .moarvm about 40K smaller (about .3%)

[18:59] <Geth> ¬¶ rakudo: - personally I see this as a step towards completely removing pack/unpack

[18:59] <Geth> ¬¶ rakudo: - but it could also make it easier to work on pack/unpack

[18:59] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/9472fdfd97

[19:08] <lizmat> m: module A:api<perl5> { }

[19:08] <camelia> rakudo-moar 7183ac105: OUTPUT: ¬´===SORRY!===‚ê§Unexpected named argument 'api' passed‚ê§¬ª

[19:09] <lizmat> hmmm... I thought we supported :api already ?

[19:09] <lizmat> nine ugexe ^^^ ?

[19:12] <nine> lizmat: we do in module management, i.e. when you declare it in META6.json and add it to use statements

[19:12] <lizmat> ah,  but not in the naming itself (yet) I assume ?

[19:13] <lizmat> nine: I was thinking to add :api<perl5> to all CPAN Butterfly plan modules

[19:14] <lizmat> because we currently have at least one conflict: http://modules.perl6.org/search/?q=Memoize

[19:14] <lizmat> if you do "zef install Memoize" you get mine (not sure why), instead of azawawi's one

[19:15] <lizmat> they are completely different implementations, fwiw

[19:57] <nine> lizmat: your module has a version. 0.0.1 is probably treated as higher than just *

[19:58] <lizmat> yeah, I guess so  :-)

[20:02] <Geth> ¬¶ rakudo: affc218f89 | (Elizabeth Mattijsen)++ | 7 files

[20:02] <Geth> ¬¶ rakudo: Allow for :api<something>

[20:02] <Geth> ¬¶ rakudo: 

[20:02] <Geth> ¬¶ rakudo: In all of the places where :auth was allowed (such as module / class /

[20:02] <Geth> ¬¶ rakudo: role), one can now also specify :api.  Primary use is to allow for

[20:02] <Geth> ¬¶ rakudo: introspection and ability to feed this into the Perl 6 toolchain.

[20:02] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/affc218f89

[20:09] <nine> This is what's currently blocking me:

[20:09] <nine> m: my $class := Metamodel::ClassHOW.new_type(:name<Foo>); my $proto := my proto method foo(|) {*}; my $meth := my method () {say self.defined}; $proto.add_dispatchee($meth.instantiate_generic(Metamodel::DefiniteHOW.new_type(:base_type($class), :definite(1)))); $class.^add_method("foo", $proto); $class.^compose; $class.foo;

[20:09] <camelia> rakudo-moar 9472fdfd9: OUTPUT: ¬´False‚ê§¬ª

[20:10] <nine> Err....rather this:

[20:10] <nine> m: my $class := Metamodel::ClassHOW.new_type(:name<Foo>); my $proto := my proto method foo(|) {*}; my $meth := my method (::T $:) {say self.defined}; $proto.add_dispatchee($meth.instantiate_generic({T => Metamodel::DefiniteHOW.new_type(:base_type($class), :definite(1))})); $class.^add_method("foo", $proto); $class.^compose; $class.foo;

[20:10] <camelia> rakudo-moar 9472fdfd9: OUTPUT: ¬´False‚ê§¬ª

[20:10] <nine> From my understanding, this should throw some dispatch error, because the method's signature should end up (Foo:D $:) but it gets called on the class

[20:13] <lizmat> nine: perhaps make it an issue so more eyes can look at it?

[20:21] <nine> Yeah, should probably do that

[20:21] <El_Che> lizmat: tbrowder_ just add memoize to the most wanted modules: https://github.com/perl6/perl6-most-wanted/pull/20/files

[20:22] <El_Che> lizmat: it looks like your p5 module does that

[20:22] <lizmat> yeah, it does

[20:22] <lizmat> except for the INSTALL feature

[20:22] <nine> The good news is that even with this little snag, performance is only 10 % worse than master

[20:23] <lizmat> nine: ?

[20:23] *** klapperl left
[20:23] <El_Che> tbrowder_: ^---

[20:24] <lizmat> El_Che tbrowder_ but I added CACHE => 'MULTI' to get an in-memory cache that is threadsafe (but slower)

[20:25] <nine> lizmat: I'm giving Inline::Perl5 a real meta class for the wrapper classes. Instead of Inline::Perl5::Object instances that do weird things, you'll get proper Foo objects with introspection and all. And I can replace some real ugly hacks like this one with proper code: https://github.com/niner/Inline-Perl5/blob/master/lib/Inline/Perl5/Object.pm6#L32

[20:25] <lizmat> ah, the infamous FALLBACK pattern  :-)

[20:26] <nine> Well, a "FALLBACK that creates a new role containing the requested method and mixing that role into the object" pattern ;)

[20:28] <El_Che> nine: that is impressive

[20:30] <nine> El_Che: well I like this much much more: https://github.com/niner/Inline-Perl5/blob/new_meta_model/lib/Inline/Perl5/ClassHOW.pm6

[20:31] <El_Che> I like your reference to Jung :)

[20:32] <lizmat> El_Che: ?

[20:32] <nine> The archetype thing? That's jnthn++'s :)

[20:32] <El_Che> my $archetypes

[20:33] <El_Che> lizmat: https://en.wikipedia.org/wiki/Jungian_archetypes

[20:33] <El_Che> "archetypes are highly developed elements of the collective unconscious."

[20:33] <El_Che> that's a good match :)

[20:34] <lizmat> yeah, jnthn can be punny like that  :-)

[20:34] <El_Che> it much apreciated. I love seeing stuff like that in code

[20:34] <El_Che> it's

[20:39] <nine> Well, I can give those methods a Any:D constraint, trading a little type safety for some performance. I can't see how someone would call a method on a different type by accident anyway...

[20:40] <lizmat> nine: typechecking occurs always, afaik, so adding a type should not have a performance difference

[20:40] <lizmat> again, afaik  :-)

[20:41] <nine> lizmat: the performance difference comes from not having to check self.defined in the method. MMD can do that faster for me

[20:42] <lizmat> wouldn't nqp::isconcrete be faster still ?

[20:42] <nine> Can't do that in a module

[20:48] <lizmat> you don't want to do a "use nqp" ?

[20:49] <nine> It'd be cheating. And we don't make any guarantees about nqp, so I shouldn't rely on it. Wouldn't be a good role model

[20:51] <El_Che> nine: I would normally agree, but Inline code seems very special

[20:52] <nine> I much rather find and learn about better performing Perl 6 code and improve MoarVM to execute it faster than take the nqp shortcut

[20:53] <lizmat> nine: well, in my opinion, Inline::Perl5 is almost a core module, as it is already having its tentacles deep into the core

[20:53] <lizmat> or am I wrong ?

[20:54] <lizmat> but I do get your point  :-)

[20:54] <nine> The only Inline::Perl5 related code in core is the very self contained CompUnit::Repository::Perl5 for auto loading and an EVAL multi candidate.

[20:55] <nine> All other changes to rakudo or MoarVM I did for Inline::Perl5 help other NativeCall users, too

[20:55] <lizmat> and we're thankful for that :-)

[20:59] *** dct joined
[21:01] <jnthn> nine++ for not taking the nqp:: shortcut outside of the Rakudo repo :)

[21:03] <El_Che> the self control of nine is legendary :)

[21:10] <nine> One day I will find a way around the *%_ performance penalty...

[21:12] <lizmat> https://github.com/rakudo/rakudo/issues/1887   # what about 'use p5isms'

[21:13] *** travis-ci joined
[21:13] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Move pack/unpack support to lib/experimental

[21:13] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/385841632 https://github.com/rakudo/rakudo/compare/7183ac105bd7...9472fdfd9735

[21:13] *** travis-ci left
[21:13] <nine> Holy cow! %_.elems ?? is sooo much faster than %_ ??

[21:14] <buggable> [travis build above] ‚ò† All failures are due to: failed make test (6 failures). Across all jobs, only t/02-rakudo/12-proto-arity-count.t test file failed.

[21:16] <Geth> ¬¶ rakudo: edc6ac6b26 | (Elizabeth Mattijsen)++ | t/02-rakudo/12-proto-arity-count.t

[21:16] <Geth> ¬¶ rakudo: Oops, '&pack' is no longer with us unless used

[21:16] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/edc6ac6b26

[21:18] *** dct left
[21:20] *** dct joined
[21:21] <lizmat>  nine: do you mean as opposed to %h.Bool ?

[21:22] <lizmat> or as 'if %h' ?

[21:22] <nine> %_ ?? essentially compiles to %_.Bool ??, so yes

[21:23] <timotimo> is it faster to do .elems?

[21:23] <lizmat> I don't see much of a difference, and if I look at Map.Bool and Map.elems, the difference is minimal

[21:24] <nine> Much faster in my case because it doesn't have to go through the Mu.Bool proto and allows for inlining Map.elems

[21:24] <lizmat> hmmm...

[21:24] <lizmat> will have to look at that tomorrow...

[21:24] <lizmat> afk&

[21:40] *** klapperl joined
[22:08] *** travis-ci joined
[22:08] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Allow for :api<something>

[22:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/385866776 https://github.com/rakudo/rakudo/compare/9472fdfd9735...affc218f895a

[22:08] *** travis-ci left
[22:09] <buggable> [travis build above] ‚ò† All failures are due to: failed make test (6 failures). Across all jobs, only t/02-rakudo/12-proto-arity-count.t test file failed.

[22:15] <tbrowder_> .ask lizmat you, and others, have done lots of nqp optimizations and shown how certain ops (or op combos) versus another for the same result are faster. do you have a list of those that we could put in a doc in nqp/docs? has anyone searched the code base to see if there are places where the faster op might be used? i can‚Äôt think of a specific example, but something like ‚Äú@arr.push($item)‚Äù is slower or faster than

[22:15] <tbrowder_> ‚Äúnqp::push(@arr, $item)‚Äù.

[22:15] <yoleaux> tbrowder_: I'll pass your message to lizmat.

[23:16] *** travis-ci joined
[23:16] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Oops, '&pack' is no longer with us unless used'

[23:16] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/385898590 https://github.com/rakudo/rakudo/compare/affc218f895a...edc6ac6b26e0

[23:16] *** travis-ci left
[23:44] *** j3nnn1 left
