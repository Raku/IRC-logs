[00:21] *** fake_space_whale joined
[00:31] <Geth> ¦ rakudo: 2e90c6607f | (Joelle Maslak)++ | 2 files

[00:31] <Geth> ¦ rakudo: Github Issue #2110 - improve err for obs positionals w/ quantifiers

[00:31] <Geth> ¦ rakudo: 

[00:31] <Geth> ¦ rakudo: Example: /\1+/ would previously give two messages, one about \1

[00:31] <Geth> ¦ rakudo: being obs and "quantifier quantifies nothing".

[00:31] <Geth> ¦ rakudo: 

[00:31] <Geth> ¦ rakudo: Now the new behavior will just be to report the unrecognized backslash

[00:31] <synopsebot> RAKUDO#2110 [open]: https://github.com/rakudo/rakudo/issues/2110 [GAO][easy to resolve][good first issue] Confusing error message for \1+ in regex

[00:32] <Geth> ¦ rakudo: sequence and offer a suggestion.

[00:32] <Geth> ¦ rakudo: 

[00:32] <Geth> ¦ rakudo: Thanks zoffixznet for determining what needed to be done and providing

[00:32] <Geth> ¦ rakudo: some of the code.

[00:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2e90c6607f

[00:32] <Geth> ¦ rakudo: c65c8fa828 | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[00:32] <Geth> ¦ rakudo: Merge pull request #2117 from jmaslak/github_2110

[00:32] <Geth> ¦ rakudo: 

[00:32] <Geth> ¦ rakudo: Improve err for obs positionals w/ quantifiers

[00:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c65c8fa828

[00:34] <Geth> ¦ rakudo: 0357454693 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Grammar.nqp

[00:34] <Geth> ¦ rakudo: Be sure we stringify Match object

[00:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0357454693

[00:48] <Geth> ¦ rakudo: 4494a24952 | (Zoffix Znet)++ | t/05-messages/03-errors.t

[00:48] <Geth> ¦ rakudo: Test backslash errors are not confusing

[00:48] <Geth> ¦ rakudo: 

[00:48] <Geth> ¦ rakudo: Closes https://github.com/rakudo/rakudo/issues/2110 R#2110

[00:48] <Geth> ¦ rakudo: Rakudo fix: https://github.com/rakudo/rakudo/pull/2117

[00:48] <Geth> ¦ rakudo:             https://github.com/rakudo/rakudo/commit/0357454693550

[00:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4494a24952

[00:48] <synopsebot> R#2110 [open]: https://github.com/rakudo/rakudo/issues/2110 [GAO][easy to resolve][good first issue] Confusing error message for \1+ in regex

[00:50] *** travis-ci joined
[00:50] <travis-ci> Rakudo build canceled. Zoffix Znet 'Be sure we stringify Match object'

[00:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/406953117 https://github.com/rakudo/rakudo/compare/c65c8fa82889...035745469355

[00:50] *** travis-ci left
[00:50] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[00:59] *** lizmat left
[01:54] *** stmuk_ joined
[01:57] *** stmuk joined
[01:59] *** stmuk_ left
[03:24] <MasterDuke> .tell pmurias i don't have time to research this tonight, but `'my $a; my $i := 1; while $i++ < 9_700_000 { $a := ~(($i - 1) / $i) }; say($a);'` dies when run with truffle, but 9_600_000 is ok

[03:24] <yoleaux> MasterDuke: I'll pass your message to pmurias.

[03:25] <MasterDuke> .tell pmurias the error is `[truffle] opt fail         WhileRepeatingNode@3486117b<OSR>                            |Reason org.graalvm.compiler.core.common.PermanentBailoutException: Too deep inlining, probably caused by recursive inlining. == Inlined methods ordered by inlining frequency: java.lang.Class.getCanonicalName() [977] ... <lots more classes>`

[03:25] <yoleaux> MasterDuke: I'll pass your message to pmurias.

[03:29] <MasterDuke> .ask jnthn at https://github.com/perl6/nqp/blob/master/docs/ops.markdown#-asynchronous-operations there's a note `[As of 2014.04, these are very new and subject to revision and additions.]`. are the docs correct and complete enough now such that the caveat can be removed?

[03:29] <yoleaux> MasterDuke: I'll pass your message to jnthn.

[05:12] *** stmuk_ joined
[05:15] *** stmuk left
[05:38] *** fake_space_whale left
[06:43] *** MasterDuke left
[06:43] *** robertle joined
[08:08] *** lizmat joined
[08:08] <lizmat> good *, #perl6-dev!

[08:08] <lizmat> Files=1246, Tests=76402, 380 wallclock secs (16.29 usr  5.62 sys + 2676.96 cusr 253.34 csys = 2952.21 CPU)

[08:44] *** brrt joined
[09:22] <jnthn> lizmat: About https://github.com/rakudo/rakudo/issues/2111 I'm suspecting that's a behavior change of some sort in the getlexcaller op or whatever the unpack method is using

[09:23] <lizmat> yeah, I was just looking at the code and figured exactly that

[09:23] <lizmat> it's using getlexcaller

[09:23] <lizmat> so, should I use something else there now ?

[09:23] <jnthn> No, we should try to figure out why it stopped working

[09:24] <jnthn> It may be a genuine regression

[09:24] <lizmat> ok, then I'll assign it to you ?

[09:24] <lizmat> ah, it's already assigned to you  :-)

[09:25] <lizmat> maybe it just happened to work before when it shouldn't have  :-)

[09:26] <jnthn> That's also possible

[09:29] <Geth> ¦ rakudo: 8607f68238 | (Jonathan Worthington)++ | src/vm/moar/spesh-plugins.nqp

[09:29] <Geth> ¦ rakudo: Add bug compatibility unfix for returning Proxy

[09:29] <Geth> ¦ rakudo: 

[09:29] <Geth> ¦ rakudo: Due to a bug in the handling of return values, a Proxy could escape

[09:29] <Geth> ¦ rakudo: from a routine that was not marked `is rw`. This was fixed by the

[09:29] <Geth> ¦ rakudo: recent spesh plugins work. However, fixing it breaks modules that

[09:29] <Geth> ¦ rakudo: depended on the bug, of which there are several. So, for now, bring

[09:29] <Geth> ¦ rakudo: the bug back.

[09:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8607f68238

[09:46] *** brrt left
[10:26] <Geth> ¦ nqp: eda1a54b20 | (Elizabeth Mattijsen)++ | tools/build/MOAR_REVISION

[10:26] <Geth> ¦ nqp: Bump MoarVM for getlexcaller fix

[10:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/eda1a54b20

[10:26] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-304-g4d22fb9e7...2018.06-310-gba906c4

[10:35] *** brrt joined
[10:40] *** travis-ci joined
[10:40] <travis-ci> NQP build passed. Elizabeth Mattijsen 'Bump MoarVM for getlexcaller fix'

[10:40] <travis-ci> https://travis-ci.org/perl6/nqp/builds/407078117 https://github.com/perl6/nqp/compare/8db2b040d1f1...eda1a54b20ce

[10:40] *** travis-ci left
[10:43] <Geth> ¦ rakudo: AlexDaniel unassigned from jnthn Issue Backward compatibility for returning Proxy without `is rw` https://github.com/rakudo/rakudo/issues/2113

[10:44] <Geth> ¦ rakudo: AlexDaniel self-assigned Backward compatibility for returning Proxy without `is rw` https://github.com/rakudo/rakudo/issues/2113

[10:52] *** Ven`` joined
[10:52] *** Ven`` left
[11:00] <Geth> ¦ rakudo: 2d16e12c3e | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[11:00] <Geth> ¦ rakudo: Bump NQP to get lexcaller fix

[11:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2d16e12c3e

[11:00] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-65-g25dec5da9...2018.06-69-geda1a54

[11:00] <Geth> ¦ roast: 3129a4a708 | (Elizabeth Mattijsen)++ | S32-exceptions/misc2.t

[11:00] <Geth> ¦ roast: Add test for R#2111

[11:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3129a4a708

[11:00] <synopsebot> R#2111 [open]: https://github.com/rakudo/rakudo/issues/2111 [regression] `please 'use experimental :pack'` even if code does exactly that

[11:03] *** Ven`` joined
[11:03] <jnthn> lizmat++ # test

[11:12] <Geth> ¦ rakudo: AlexDaniel assigned to timo Issue Allow IO::Socket::Async to listen to a system-defined (unspecified) port https://github.com/rakudo/rakudo/issues/2091

[11:13] <AlexDaniel> timotimo: ↑ :)

[11:19] <timotimo> ah, didn't see a ticket for it

[11:29] <Geth> ¦ roast: 9d7241417c | (Timo Paulssen)++ | S32-io/IO-Socket-Async.t

[11:29] <Geth> ¦ roast: tests for binding to port 0

[11:29] <Geth> ¦ roast: 

[11:29] <Geth> ¦ roast: i.e. asking the OS to allocate a port for us.

[11:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9d7241417c

[11:34] *** pmurias joined
[11:34] <pmurias> .tell MasterDuke does it happen with HEAD or only after you do some changes?

[11:34] <yoleaux> 03:24Z <MasterDuke> pmurias: i don't have time to research this tonight, but `'my $a; my $i := 1; while $i++ < 9_700_000 { $a := ~(($i - 1) / $i) }; say($a);'` dies when run with truffle, but 9_600_000 is ok

[11:34] <yoleaux> pmurias: I'll pass your message to MasterDuke.

[11:34] <yoleaux> 03:25Z <MasterDuke> pmurias: the error is `[truffle] opt fail         WhileRepeatingNode@3486117b<OSR>                            |Reason org.graalvm.compiler.core.common.PermanentBailoutException: Too deep inlining, probably caused by recursive inlining. == Inlined methods ordered by inlining frequency: java.lang.Class.getCanonicalName() [977] ... <lots more classes>`

[11:41] *** brrt left
[11:42] <AlexDaniel> error: short SHA1 5ec2c96 is ambiguous

[11:42] <AlexDaniel> hint: The candidates are:

[11:42] <AlexDaniel> hint:   5ec2c96ec commit 2018-07-04 - Fix "diag "foo"|"bar"

[11:42] <AlexDaniel> hint:   5ec2c96f8 commit 2010-03-08 - Re-enable subset.t, which passes some tests alpha never passed. :-)

[11:42] <AlexDaniel> :)

[11:45] <AlexDaniel> releasable6: status

[11:45] <releasable6> AlexDaniel, Next release will happen when it's ready. 4 blockers. 77 out of 240 commits logged (⚠ 2 warnings)

[11:45] <releasable6> AlexDaniel, Details: https://gist.github.com/b5428204c51c24a7ee95dca08b2da24a

[11:48] <AlexDaniel> releasable6: status

[11:48] <releasable6> AlexDaniel, Next release will happen when it's ready. 4 blockers. 77 out of 240 commits logged (⚠ 2 warnings)

[11:49] <releasable6> AlexDaniel, Details: https://gist.github.com/b1a8de1646fb9e1f46cf6e1e80f1825b

[11:49] <AlexDaniel> releasable6: status

[11:49] <releasable6> AlexDaniel, Next release will happen when it's ready. 4 blockers. 78 out of 240 commits logged

[11:49] <releasable6> AlexDaniel, Details: https://gist.github.com/28ce0ba85d31cf0474721f9eee10e6d0

[12:09] *** Ven`` left
[12:10] *** Ven`` joined
[12:30] *** Ven`` left
[12:36] *** Ven`` joined
[12:38] *** lizmat left
[12:38] <pmurias> .tell MasterDuke it seems the instanceof chains really suck performance wise

[12:38] <yoleaux> pmurias: I'll pass your message to MasterDuke.

[12:39] <pmurias> .tell MasterDuke I'll investigate doing our coercions the proper truffle way

[12:39] <yoleaux> pmurias: I'll pass your message to MasterDuke.

[12:39] <Geth> ¦ nqp/truffle: bbe17843ef | (Paweł Murias)++ | 4 files

[12:39] <Geth> ¦ nqp/truffle: [truffle] Move reflection behind a @TruffleBoundary

[12:39] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/bbe17843ef

[12:47] *** dogbert2 joined
[12:52] *** Ven`` left
[12:55] *** j3nnn1 joined
[13:04] *** Ven`` joined
[13:23] *** Ven`` left
[13:29] *** skids joined
[13:30] *** stmuk joined
[13:31] *** pmurias left
[13:31] *** pmurias joined
[13:31] *** stmuk_ left
[13:34] *** Ven`` joined
[13:40] <Geth> ¦ nqp: caf545127b | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[13:40] <Geth> ¦ nqp: [MoarVM Bump] Brings 0 commit

[13:40] <Geth> ¦ nqp: 

[13:40] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.06-310-gba906c4...2018.06-310-gba906c429

[13:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/caf545127b

[13:40] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-310-gba906c4...2018.06-310-gba906c429

[13:40] <Geth> ¦ rakudo: c47e3681c0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[13:40] <Geth> ¦ rakudo: [NQP Bump] caf545127 [MoarVM Bump] Brings 0 commit

[13:40] <Geth> ¦ rakudo: 

[13:40] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.06-69-geda1a54...2018.06-70-gcaf545127

[13:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c47e3681c0

[13:40] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-69-geda1a54...2018.06-70-gcaf545127

[13:41] <AlexDaniel> “[MoarVM Bump] Brings 0 commit”

[13:41] <AlexDaniel> so much progress

[13:41] <AlexDaniel> :)

[13:48] *** lizmat joined
[13:55] <Geth> ¦ nqp: 15c9774719 | 陈梓立++ (committed using GitHub Web editor) | t/nqp/019-file-ops.t

[13:55] <Geth> ¦ nqp: unfudge test, co #274 (#485)

[13:55] <Geth> ¦ nqp: 

[13:55] <Geth> ¦ nqp: This test has been unfudged before but it causes some wired issue. I trigger Travis CI and test on several macOS machine and seems `lstat_time` works properly on MoarVM backend. no reason to fudge it.

[13:55] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/15c9774719

[13:55] <synopsebot> NQP#274 [open]: https://github.com/perl6/nqp/issues/274 t/nqp/19-file-ops.t failure in pre-2016.01

[13:57] *** Zoffix joined
[13:57] <Zoffix> AlexDaniel: I think this fixes that: https://github.com/zoffixznet/z/commit/ed4e3d7ba00bdc2718c3c07b6ea28971e47cbdcf

[13:57] <Zoffix> So pull in latest changes.

[13:57] <Zoffix> Also, I vaguelly recall the zero-commit bump was causing some issues last time

[13:59] <Zoffix> Hm, maybe not: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-04-28#l242

[13:59] *** Ven`` left
[14:00] <Zoffix> yeah, don't see any mentions of issues. nm

[14:22] <AlexDaniel> Zoffix: thanks

[14:22] <AlexDaniel> pulled :)

[14:56] <gfldex> do we have banchmarks on windows? I'm asking becaus of https://www.phoronix.com/scan.php?page=article&item=ryzen-2700x-winlin&num=6

[14:58] *** fake_space_whale joined
[15:00] <Zoffix> None that I'm aware of

[15:01] *** ExtraCrispy joined
[15:13] *** pmurias left
[15:22] *** hoelzro joined
[15:33] <samcv> "Can't locate Digest/SHA.pm in @INC" when trying to compile nqp (this is during compilation, not detected beforehand)

[15:33] <samcv> gonna open a nqp issue

[15:34] <Zoffix> huggable: Digest::SHA

[15:34] <huggable> Zoffix, Digest::SHA is core, but centos/redhat/fedora have broken the packaging. You need to install the 'perl-core' package to get a complete perl instlalation: sudo dnf install perl-core

[15:34] <Zoffix> samcv: ^

[15:34] <samcv> yes

[15:34] <Zoffix> Probably can improve NQP build system to display a message 

[15:34] <samcv> but it should tell you in Configure.pl

[15:34] <samcv> instead of failing partway through build

[15:34] <Zoffix> :)

[15:42] *** pmurias joined
[15:48] *** robertle left
[16:00] *** lizmat left
[16:03] *** lizmat joined
[16:08] *** bisectable6 joined
[16:15] *** lizmat left
[16:16] *** lizmat joined
[16:19] *** nativecallable6 joined
[16:19] *** benchable6 joined
[16:19] *** squashable6 joined
[16:21] <Geth> ¦ rakudo: AlexDaniel self-assigned [WIP] Rescalar merge & other toaster-related stuff №2 (2018.07 prep) https://github.com/rakudo/rakudo/issues/2121

[16:25] *** fake_space_whale left
[16:31] <Zoffix> greppa[TAB][TAB][TAB]

[16:31] <Zoffix> AlexDaniel: no bot?

[16:33] *** dogbert17 joined
[16:35] *** greppable6 joined
[16:35] <AlexDaniel> Zoffix: yeah, pinged out somehow. It's back now.

[16:35] <Zoffix> AlexDaniel++

[16:36] <Zoffix> greppable6: m\:P5

[16:36] <greppable6> Zoffix, Found nothing!

[16:36] *** diakopter joined
[16:36] <Zoffix> *cough* bullshit *cough*

[16:36] <AlexDaniel> greppable6: m:P5

[16:36] <Zoffix> greppable6: \:P5

[16:36] <greppable6> AlexDaniel, Found nothing!

[16:36] <greppable6> Zoffix, 6 lines, 3 modules: https://gist.github.com/f62ed593b3e99650c33beeaee07658ae

[16:36] <Zoffix> \o/

[16:37] <AlexDaniel> Zoffix: note that it is using perl6-all-modules which is known not to include a large amount of modules…

[16:37] <AlexDaniel> https://github.com/moritz/perl6-all-modules

[16:37] <AlexDaniel> there's no ticket though

[16:37] <Zoffix> ah ok

[16:38] <AlexDaniel> filed something here: https://github.com/moritz/perl6-all-modules/issues/2

[16:38] * diakopter wonders what truffle is

[16:39] <Zoffix> diakopter: https://en.wikipedia.org/wiki/GraalVM#Truffle

[16:40] <Zoffix> another backend for rakudo

[16:40] <Zoffix> err, I meant the truffle branch is another backend for rakudo to work on tap of Truffle

[16:40] <Zoffix> s/tap/top/;

[16:40] <diakopter> ah, neat

[16:58] *** Zoffix left
[17:19] * lizmat wonders why FIRST doesn't have a runtime value

[17:20] <lizmat> Feels wrong to use "once" for that

[17:20] *** yoleaux joined
[17:21] <lizmat> use case: given 2 list, produce a list in the order of the first of elements in the second

[17:21] <lizmat>    @a.grep: * (elem) FIRST @b.Set

[17:22] <lizmat>    @a.grep: * (elem) once @b.Set   # not as nice

[17:26] *** Zoffix joined
[17:27] <Zoffix> pmurias: what/how is your plan for QAST::Block migrator? R#2120 has a migration problem, which makes it gazillion's bug of the migratopr

[17:27] <synopsebot> R#2120 [open]: https://github.com/rakudo/rakudo/issues/2120 [regression][⚠ blocker ⚠] Segfault while indexing with infinite Seq

[17:32] <Zoffix> I guess it's not the time to redesign it, 2 days after the scheduled release date :P but still, the current migrator is very fragile

[17:38] *** statisfiable6 joined
[18:10] *** stmuk_ joined
[18:10] <Zoffix> looks like it's the whatever currier that doesn't migrate them in this case

[18:10] * Zoffix blushes

[18:10] <Zoffix> Even `{;}() + *` has a bug in it :}

[18:12] *** stmuk left
[18:20] *** Zoffix left
[18:29] *** pmurias left
[18:30] *** pmurias joined
[18:36] <Geth> ¦ rakudo: zoffixznet self-assigned Segfault while indexing with infinite Seq https://github.com/rakudo/rakudo/issues/2120

[18:41] *** Ven`` joined
[18:42] <AlexDaniel> lizmat: can you take a look at this module? https://github.com/zostay/p6-Hash-MultiValue

[18:42] <AlexDaniel> basically it fails with:

[18:42] <AlexDaniel> # expected: 'Hash::MultiValue.from-pairs(:a(7), :b(8), :b(9), :c(10), :d(6), :e(11), :e(12), :f(13))'

[18:42] <AlexDaniel> #      got: 'Hash::MultiValue.from-pairs($(:a(7)), $(:b(8)), $(:b(9)), $(:c(10)), $(:d(6)), $(:e(11)), $(:e(12)), $(:f(13)))'

[18:42] <AlexDaniel> and I bisected it to (2018-06-30) https://github.com/rakudo/rakudo/commit/3cbf25e0f53d25092d7e5a47c6fc05d7f52d4d7d

[18:42] <AlexDaniel> IMO a module shouldn't be checking the output of .perl, but still

[18:43] <lizmat> indeed, I would classify this as a test failure

[18:43] <lizmat> I'll see if I can PR a fix

[18:43] <AlexDaniel> lizmat: thanks!

[18:46] *** dct joined
[18:55] *** pmurias left
[18:55] <lizmat> notable6: weekly

[18:55] <notable6> lizmat, 6 notes: https://gist.github.com/6fe86e11abca395043b2ebcc4b0652e5

[18:56] <lizmat> notable6: weekly reset

[18:56] <notable6> lizmat, Moved existing notes to “weekly_2018-07-23T18:56:49Z”

[19:00] *** Ven`` left
[19:00] <AlexDaniel> lizmat: reportable: https://gist.github.com/c2a3cd956b4b4621b13b30fca27574d7

[19:00] <lizmat> AlexDaniel++

[19:00] <AlexDaniel> wooo we are going to reach 2000 tickets soon… :)

[19:01] <timotimo> welcome to the new commillenium

[19:02] <AlexDaniel> buglennium?

[19:04] <timotimo> let's celebrate it with either a bugstravaganza or failurepalooza

[19:06] <Geth> ¦ rakudo: b5a7439838 | (Elizabeth Mattijsen)++ | src/core/Pair.pm6

[19:06] <Geth> ¦ rakudo: Revert "Give Pair its own .item"

[19:06] <Geth> ¦ rakudo: 

[19:06] <Geth> ¦ rakudo: This reverts commit 3cbf25e0f53d25092d7e5a47c6fc05d7f52d4d7d.

[19:06] <Geth> ¦ rakudo: 

[19:06] <Geth> ¦ rakudo: This is no longer needed to fix QuantHash roundtripping, but it *does*

[19:06] <Geth> ¦ rakudo: break (testing) modules in the ecosystem right now.  So, if we would need

[19:06] <Geth> ¦ rakudo: this in the future, lift it at least to the next release, or to 6.d.

[19:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b5a7439838

[19:06] <lizmat> AlexDaniel: ^^^ that should fix the issue with Hash::MultiValue

[19:08] <lizmat> AlexDaniel: also adapted ChangeLog draft accordingly

[19:17] <Geth> ¦ rakudo: 85495890d4 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[19:17] <Geth> ¦ rakudo: Fix misscoping of blocks in whatever curries

[19:17] <Geth> ¦ rakudo: 

[19:17] <Geth> ¦ rakudo: Fixes R#2120 https://github.com/rakudo/rakudo/issues/2120

[19:17] <Geth> ¦ rakudo: 

[19:17] <Geth> ¦ rakudo: The migrator in whatever currier is too naive and in the branch

[19:17] <Geth> ¦ rakudo: that handles block args assumed QAST::WVal of code would just be

[19:17] <synopsebot> R#2120 [open]: https://github.com/rakudo/rakudo/issues/2120 [QAST][regression][⚠ blocker ⚠] Segfault while indexing with infinite Seq

[19:17] <Geth> ¦ rakudo: the kid. However, it can also be a kid of the kid, placed in some

[19:17] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[19:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/85495890d4

[19:17] <Geth> ¦ roast: 3f1fea0d39 | (Zoffix Znet)++ | MISC/bug-coverage-stress.t

[19:17] <Geth> ¦ roast: Cover SEGV in curries + with

[19:17] <Geth> ¦ roast: 

[19:17] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/2120 R#2120

[19:17] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/85495890d4

[19:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3f1fea0d39

[19:18] *** dct left
[19:24] <AlexDaniel> lizmat: thanks!

[19:54] <AlexDaniel> Zoffix++

[20:00] *** pmurias joined
[20:01] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/07/23/2018-30-triplicate-guts/

[20:12] *** Ven`` joined
[20:18] *** benjikun joined
[20:31] *** lizmat left
[20:33] *** lizmat joined
[20:34] *** MasterDuke joined
[20:38] *** Ven` joined
[20:39] <pmurias> MasterDuke: I'm turning the instanceof chains into proper truffle specialization as being slower than the old JVM backend is not acceptable ;)

[20:40] *** Ven`` left
[20:48] <MasterDuke> pmurias: heh, it's definitly not setting any speed records right now

[20:48] <yoleaux> 11:34Z <pmurias> MasterDuke: does it happen with HEAD or only after you do some changes?

[20:48] <yoleaux> 12:38Z <pmurias> MasterDuke: it seems the instanceof chains really suck performance wise

[20:48] <yoleaux> 12:39Z <pmurias> MasterDuke: I'll investigate doing our coercions the proper truffle way

[20:50] *** Ven` left
[20:53] *** MasterDuke left
[20:53] *** MasterDuke joined
[20:54] <MasterDuke> pmurias: but yeah, instanceof is never fast in java. at least that's my understanding

[21:00] *** x[LGWs4x4i]uG2N0 joined
[21:06] *** Kaiepi left
[21:06] <MasterDuke> pmurias: what's involved in doing them the right way?

[21:08] <Geth> ¦ nqp/truffle: 00a3f8fa8d | (Paweł Murias)++ | 3 files

[21:08] <Geth> ¦ nqp/truffle: [truffle] Use @Specialization instead of a instanceof chain in smart-numify

[21:08] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/00a3f8fa8d

[21:08] <pmurias> MasterDuke: you have seen the One VM to Rule Them All, One VM to Bind Them slides/talk?

[21:09] <MasterDuke> i think maybe the slides, but not the talk

[21:11] <MasterDuke> pmurias: btw, shouldn't smart-numify create a num, not an int?

[21:12] *** skids left
[21:14] <pmurias> MasterDuke: it creates a num

[21:14] <pmurias> MasterDuke: you mean the (long) value cast?

[21:18] <MasterDuke> pmurias: ignore me, i completely missread the last commit

[21:24] <pmurias> anyway the big slow down was cause by me doing the num to str coercion hastily and sloppily :(

[21:24] <pmurias> (I'm working on fixing that)

[21:34] <Geth> ¦ nqp/truffle: 233e552b8f | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/expression/NQPSmartNumifyNode.java

[21:34] <Geth> ¦ nqp/truffle: [truffle] Add missing specialization

[21:34] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/233e552b8f

[21:34] <Geth> ¦ nqp/truffle: a2b6c5a651 | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/runtime/Coercions.java

[21:34] <Geth> ¦ nqp/truffle: [truffle] Speed up num to str coercion

[21:34] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/a2b6c5a651

[21:46] *** dct joined
[21:47] <MasterDuke> pmurias: that code i was running last night is now much faster. it's now 8s for truffle (6.5s for regular jvm)

[21:47] <MasterDuke> according to `time`

[21:49] <jnthn> MasterDuke: If you have the number (or can get it handily), what is it for Moar, ooc?

[21:50] <MasterDuke> jnthn: 3.2s

[21:52] <MasterDuke> using nqp::time_n to measure it i get 4.6s for truffle, 3.7s for jvm, and 3.1s for moar

[21:52] <MasterDuke> this is what i was running: 'my $s := nqp::time_n(); my $a; my $i := 1; while $i++ < 9_700_000 { $a := ~(($i - 1) / $i) }; say($a); say(nqp::time_n() - $s)'

[21:53] <timotimo> this being nqp code, i'm sure it does a whole lot of back and forth between int and num

[21:54] <timotimo> sadly, we can't time such code in rakudo yet. on truffle i mean

[21:54] <Geth> ¦ nqp/truffle: adc52fd12b | (Daniel Green)++ | 3 files

[21:54] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::time_(i|n)

[21:54] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/adc52fd12b

[21:55] <MasterDuke> yeah, i have no idea how to profile the java part of truffle nqp

[21:57] *** Ven`` joined
[22:00] *** Ven`` left
[22:17] *** pmurias left
[22:20] *** pmurias joined
[22:23] *** MasterDuke left
[22:27] <pmurias> timotimo: a benchmark on rakudo would be a lot more informative, as storing native types in untyped variables is not very representative

[22:28] <timotimo> the nqp code is also without type annotations though?

[22:32] *** MasterDuke joined
[22:38] <pmurias> timotimo: the benchmark code doesn't have any but nqp has int/num/str annotations

[22:38] <timotimo> so would it be a difference between rakudo code and nqp code?

[22:39] <pmurias> rakudo has bignums

[22:41] *** ExtraCrispy left
[22:41] <timotimo> that's fair, but at least it won't num/int all the time

[22:48] *** dct left
[22:52] *** dct joined
[22:53] <MasterDuke> making $a a str and $i an int changes the times to 1.9s moar, 3.3.s jvm, and 4.75s truffle

[22:53] <timotimo> that's nice

[22:54] <MasterDuke> looks like moar gets faster, the others might just be noise

[22:56] <pmurias> the int/num/str types are currently ignored on truffle 

[22:56] <timotimo> and that is with rakudo doing Rat calc

[22:56] <timotimo> well, barely any calc to speak of, but still ...

[22:58] <timotimo> i still had a moar with --optimize=0, but it's taken *ages* already

[22:58] <timotimo> 2 minutes until i killed it

[22:58] <timotimo> what's going on here? o_O

[23:00] <pmurias> MasterDuke: it's interesting that moving the ~$a stringification out of the loop makes a gigantic difference

[23:01] <timotimo> MasterDuke: how in the heck is it running in a few seconds when on my machine it takes minutes? :o

[23:02] <timotimo> but yeah, wow, taking the stringification out makes it hella faster

[23:02] <pmurias> OTOH it's pretty obvious thats doing string stuff is a lot slower then numbery stuff

[23:02] <timotimo> ah dangit

[23:03] *** Kaiepi joined
[23:03] <timotimo> it's doing the thing with "infinitely spesh logging code that should have OSR'd already" again

[23:03] <timotimo> that'd make it slow, yeah

[23:04] <pmurias> timotimo: for that silly nqp loop?

[23:04] <MasterDuke> fwiw, i wasn't really trying to do anything in particular fast, just do enough work to get a sense of the relative speed of the different backends

[23:04] <timotimo> heh.

[23:04] <timotimo> Rational.pm's Str method has 76.4% inclusive time in a --profile

[23:05] <timotimo> it's loads faster if you replace - 1 with - 1e0

[23:06] <MasterDuke> but yeah, taking the stringification out of the loop gives me .07s for moar, .15s for jvm, and .4s for truffle

[23:06] <timotimo> is this nqp or rakudo now?

[23:07] <MasterDuke> this has all been nqp

[23:07] <MasterDuke> 1e0 doesn't seem to make a noticeable difference to any backend

[23:07] <timotimo> OK, nqp is loads faster

[23:08] <timotimo> OK, in nqp it's just a single frame that's running 99.99% of the run time

[23:09] <pmurias> I'll optimize the condition checking in while (so it's not a instanceof chain) and I'll implement native types and will see how it runs

[23:09] <pmurias> but it's way to late for this today &

[23:09] *** pmurias left
[23:09] <timotimo> 13.82496428489685 on rakudo

[23:11] <timotimo> oh, that's with num rather than rat

[23:12] <timotimo> fascinating

[23:13] <timotimo> the constant Int object that postfix:<++> uses actually requires a wval_wide because the index is too big to fit a small wval instruction

[23:17] <timotimo> i'm looking at some suboptimal bytecode and perhaps there's an optimization opportunity

[23:19] <MasterDuke> oooh, exciting

[23:32] <timotimo> hell yeah

[23:32] <timotimo> the code looks a little bit better now!

[23:33] *** dct left
[23:37] <MasterDuke> noticeable difference in timing?

[23:40] <timotimo> i should check that ...

[23:50] <timotimo> m: say 4.79 / 6.61

[23:50] <camelia> rakudo-moar 85495890d: OUTPUT: «0.72466␤»

[23:50] <timotimo> i call that noticeable

[23:50] <timotimo> MasterDuke: ^

[23:50] <MasterDuke> nice! timotimo++

[23:50] <timotimo> this is with "while $i++ < 50_000_000 {}" i.e. an empty loop body

[23:52] <timotimo> i spotted this in the result of using the "assign" spesh plugin with "assign-scalar-no-whence-no-typecheck"

[23:53] <timotimo> now this is kind of strange?

[23:53] <timotimo> ++$i is actually a whole lot slower than $i++

[23:53] <MasterDuke> hasn't it been that way for a while?

[23:55] <timotimo> i thought it was the other way around

[23:56] <timotimo> the good news is, that the patch i have makes the difference much less pronounced

[23:58] <MasterDuke> for me, in rakudo, ++$i is slower than $i++. but if $i is a native int, ++$i is faster

[23:58] <timotimo> what about older rakudo releases?

