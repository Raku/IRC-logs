[00:01] *** leont left
[00:09] *** Kaiepi left
[00:09] *** leont joined
[00:10] *** p6bannerbot sets mode: +v leont

[00:11] *** Kaiepi joined
[00:12] *** p6bannerbot sets mode: +v Kaiepi

[00:21] *** leont left
[00:32] *** Kaypie joined
[00:32] *** Kaiepi left
[00:33] *** p6bannerbot sets mode: +v Kaypie

[00:37] <AlexDaniel> fresh results from Blin: https://gist.github.com/AlexDaniel/d8020ef6ab7cb900407a477fa87a196f

[00:38] <AlexDaniel> TL;DR all modules with `use v…` already have a PR with a fix pending

[00:39] <AlexDaniel> releasable6: status

[00:39] <releasable6> AlexDaniel, Next release will happen when it's ready. 2 blockers. 80 out of 168 commits logged (⚠ 1 warnings)

[00:39] <releasable6> AlexDaniel, Details: https://gist.github.com/31edad3d2f02e100d48ab2f63fbc8e96

[00:39] <AlexDaniel> except modules mentioned in these two blockers, these have a different issue

[00:46] <AlexDaniel> so yeah, I guess we figure out what to do with the blockers and we're good to go

[00:47] <AlexDaniel> (hopefully)

[00:56] *** Kaypie left
[00:56] *** Kaypie joined
[00:57] *** p6bannerbot sets mode: +v Kaypie

[02:13] *** statisfiable6 left
[02:13] *** notable6 left
[02:13] *** unicodable6 left
[02:13] *** releasable6 left
[02:13] *** bisectable6 left
[02:13] *** nativecallable6 left
[02:13] *** squashable6 left
[02:13] *** undersightable6 left
[02:13] *** bloatable6 left
[02:13] *** committable6 left
[02:13] *** greppable6 left
[02:13] *** reportable6 left
[02:13] *** shareable6 left
[02:13] *** coverable6 left
[02:13] *** evalable6 left
[02:13] *** quotable6 left
[02:13] *** benchable6 left
[02:14] *** notable6 joined
[02:14] *** ChanServ sets mode: +v notable6

[02:14] *** benchable6 joined
[02:14] *** coverable6 joined
[02:14] *** p6bannerbot sets mode: +v notable6

[02:15] *** releasable6 joined
[02:15] *** p6bannerbot sets mode: +v benchable6

[02:15] *** reportable6 joined
[02:15] *** ChanServ sets mode: +v reportable6

[02:15] *** p6bannerbot sets mode: +v coverable6

[02:15] *** p6bannerbot sets mode: +v releasable6

[02:15] *** undersightable6 joined
[02:15] *** bisectable6 joined
[02:16] *** p6bannerbot sets mode: +v reportable6

[02:16] *** evalable6 joined
[02:16] *** ChanServ sets mode: +v evalable6

[02:16] *** p6bannerbot sets mode: +v undersightable6

[02:16] *** p6bannerbot sets mode: +v bisectable6

[02:17] *** p6bannerbot sets mode: +v evalable6

[02:17] *** unicodable6 joined
[02:17] *** statisfiable6 joined
[02:17] *** ChanServ sets mode: +v statisfiable6

[02:17] *** greppable6 joined
[02:17] *** bloatable6 joined
[02:17] *** ChanServ sets mode: +v bloatable6

[02:17] *** committable6 joined
[02:17] *** ChanServ sets mode: +v committable6

[02:17] *** shareable6 joined
[02:17] *** p6bannerbot sets mode: +v unicodable6

[02:17] *** p6bannerbot sets mode: +v statisfiable6

[02:18] *** p6bannerbot sets mode: +v greppable6

[02:18] *** quotable6 joined
[02:18] *** nativecallable6 joined
[02:18] *** p6bannerbot sets mode: +v bloatable6

[02:18] *** squashable6 joined
[02:18] *** ChanServ sets mode: +v squashable6

[02:18] *** p6bannerbot sets mode: +v committable6

[02:18] *** p6bannerbot sets mode: +v shareable6

[02:19] *** lizmat left
[02:19] *** p6bannerbot sets mode: +v quotable6

[02:19] *** p6bannerbot sets mode: +v nativecallable6

[02:19] *** p6bannerbot sets mode: +v squashable6

[02:20] *** MasterDuke left
[02:29] *** Kaypie left
[02:30] *** Kaypie joined
[02:31] *** p6bannerbot sets mode: +v Kaypie

[02:58] *** SqrtNegInf left
[03:06] *** ufobat_ joined
[03:07] *** p6bannerbot sets mode: +v ufobat_

[03:10] *** ufobat___ left
[03:20] *** Kaypie left
[03:21] *** Kaypie joined
[03:21] *** p6bannerbot sets mode: +v Kaypie

[03:46] *** discoD joined
[03:47] *** p6bannerbot sets mode: +v discoD

[07:31] *** discoD left
[08:00] *** lizmat joined
[08:00] *** p6bannerbot sets mode: +v lizmat

[08:05] *** robertle joined
[08:05] *** p6bannerbot sets mode: +v robertle

[08:21] *** Kaypie left
[08:21] *** Kaypie joined
[08:22] *** p6bannerbot sets mode: +v Kaypie

[08:56] *** Kaypie left
[08:58] *** Kaiepi joined
[08:58] *** p6bannerbot sets mode: +v Kaiepi

[09:32] <|Tux|>  Rakudo version 2018.10-168-g8854bbd3f - MoarVM version 2018.10-82-g9468b7f75

[09:32] <|Tux|> csv-test-xs-20      0.426 -  0.428

[09:32] <|Tux|> test-t --race       0.799 -  0.826

[09:32] <|Tux|> csv-ip5xs           0.889 -  0.897

[09:32] <|Tux|> test-t              1.713 -  1.759

[09:32] <|Tux|> csv-ip5xs-20        6.966 -  7.025

[09:32] <|Tux|> test                7.819 -  7.908

[09:32] <|Tux|> test-t-20 --race   10.097 - 10.283

[09:32] <|Tux|> csv-parser         21.046 - 21.550

[09:32] <|Tux|> test-t-20          29.395 - 29.929

[09:33] *** nine left
[09:35] *** nine joined
[09:35] *** p6bannerbot sets mode: +v nine

[09:46] *** nine left
[09:49] *** nine joined
[09:50] *** p6bannerbot sets mode: +v nine

[09:52] *** camelia joined
[09:53] *** p6bannerbot sets mode: +v camelia

[09:56] <nine> Turns out, my server was running in the rescue system all day after I had to fix an ssh issue. Needed to reboot it using Hetzner's admin panel to deactivate the rescue system. Since the rescue system is based on KVM itself, one cannot run VMs in there.

[09:56] <nine> m: say "I'm alive"

[09:56] <camelia> rakudo-moar 50f0fce9b: OUTPUT: «I'm alive␤»

[10:04] <lizmat> nine++   # whee!

[10:07] *** AlexDani` joined
[10:08] *** p6bannerbot sets mode: +v AlexDani`

[10:11] <Geth> ¦ rakudo: 72b896c8ee | (Stefan Seifert)++ | t/08-performance/99-misc.t

[10:11] <Geth> ¦ rakudo: Make running timing based tests optional - for slow build servers

[10:11] <Geth> ¦ rakudo: 

[10:11] <Geth> ¦ rakudo: On a build farm like the OpenBuildService, individual VMs may be a lot slower

[10:11] <Geth> ¦ rakudo: than typical developer's machines. Measuring elapsed time to find performance

[10:11] <Geth> ¦ rakudo: regressions gives unreliable results there, so make it possible to skip such

[10:11] <Geth> ¦ rakudo: tests by setting RAKUDO_SKIP_TIMING_TESTS=1 in the environment.

[10:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/72b896c8ee

[10:12] *** AlexDaniel left
[10:27] *** brrt joined
[10:28] *** p6bannerbot sets mode: +v brrt

[10:50] *** AlexDani` is now known as AlexDaniel

[11:19] *** lucasb joined
[11:20] *** p6bannerbot sets mode: +v lucasb

[11:46] *** Kaiepi left
[12:08] <lucasb> m: proto f(Int-->Str) {*}; multi f(|) { 10 }; say f(20)

[12:08] <camelia> rakudo-moar 72b896c8e: OUTPUT: «10␤»

[12:09] <lucasb> ^^ proto's argument type is checked, but not its return type?

[12:09] <AlexDaniel> releasable6: status

[12:09] <releasable6> AlexDaniel, Next release will happen when it's ready. 2 blockers. 80 out of 169 commits logged (⚠ 1 warnings)

[12:09] <releasable6> AlexDaniel, Details: https://gist.github.com/fbe477c4834cbc6046fb6600618e4b92

[12:11] <Geth> ¦ nqp: 601bccf0ae | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[12:11] <Geth> ¦ nqp: [MoarVM Bump] Brings 8 commits

[12:11] <Geth> ¦ nqp: 

[12:11] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.10-82-g9468b7f...2018.10-90-g0939a10cd

[12:11] <Geth> ¦ nqp: 0939a10cd Merge branch 'exprjit_09_20_18'

[12:11] <Geth> ¦ nqp: 7a110b711 Add hllboolfor exprjit template

[12:11] <Geth> ¦ nqp: 9b2ab1690 Add radix_I exprjit template

[12:11] <Geth> ¦ nqp: 0accc8ce7 Add coerce_* exprjit templates

[12:11] <Geth> ¦ nqp: 5167d1026 Add extend_{u,i}* exprjit templates

[12:11] <Geth> ¦ nqp: 43c5cd4aa Add mul exprjit op to documentation

[12:11] <Geth> ¦ nqp: 0c2b13a23 Add exprjit integer multiplication op

[12:11] <Geth> ¦ nqp: d40bac9f0 Use arithmetic right shift in JIT of brshift_i

[12:11] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/601bccf0ae

[12:11] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.10-82-g9468b7f...2018.10-90-g0939a10cd

[12:11] <Geth> ¦ rakudo: 0dc6efd631 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[12:11] <Geth> ¦ rakudo: [NQP Bump] 601bccf0a [MoarVM Bump] Brings 8 co […]

[12:11] <Geth> ¦ rakudo: 

[12:11] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.10-118-gedd5b11...2018.10-119-g601bccf0a

[12:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0dc6efd631

[12:11] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.10-118-gedd5b11...2018.10-119-g601bccf0a

[12:24] *** j3nnn1 joined
[12:24] *** p6bannerbot sets mode: +v j3nnn1

[12:38] *** leont joined
[12:39] *** p6bannerbot sets mode: +v leont

[12:50] *** leont left
[13:02] *** brrt left
[13:10] <jnthn> lucasb: Actually the proto is never really called beyond the first invocation when it's an onlystar proto

[13:17] <lucasb> so a return type constraint in a proto will never have any effect?

[13:18] <lucasb> I guess it still can be used as documentation? so a warning "Return type constraint in proto is ineffective" would not be desired, right?

[13:19] <jnthn> No, that'd just be noise

[13:19] <lucasb> so I guess if I want the typesafety I have to distribute the return type constraint to all multis

[13:25] *** Ven`` joined
[13:26] *** p6bannerbot sets mode: +v Ven``

[13:28] *** brrt joined
[13:29] *** p6bannerbot sets mode: +v brrt

[13:45] *** Ven`` left
[13:47] <lizmat> m: my %a{Any} = a => 42; dd %a <<+=>> 3   # writing tests++

[13:47] <camelia> rakudo-moar 0dc6efd63: OUTPUT: «Cannot modify an immutable Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[13:47] <lizmat> bisectable6: old=2018.10 my %a{Any} = a => 42; dd %a <<+=>> 3

[13:47] <bisectable6> lizmat, Bisecting by exit code (old=2018.10 new=0dc6efd). Old exit code: 0

[13:47] <bisectable6> lizmat, bisect log: https://gist.github.com/376a7ea5cac53632cf164eabd10cd395

[13:47] <bisectable6> lizmat, (2018-11-16) https://github.com/rakudo/rakudo/commit/cae9847e46056635e896388228772d4a4c846fc5

[13:48] <lizmat> m: my %a{Any} = a => 42; $_ = 3 for %a.values # underlying issue

[13:48] <camelia> rakudo-moar 0dc6efd63: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[13:59] *** brrt left
[14:17] <Geth> ¦ rakudo: a728bb2d9e | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[14:17] <Geth> ¦ rakudo: Make .values on object hashes return containers

[14:17] <Geth> ¦ rakudo: 

[14:17] <Geth> ¦ rakudo: Spotted while writing tests for hyper metaops

[14:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a728bb2d9e

[14:51] *** SqrtNegInf joined
[14:52] *** p6bannerbot sets mode: +v SqrtNegInf

[14:54] <Geth> ¦ roast: 6b2e75ea87 | (Elizabeth Mattijsen)++ | S03-metaops/infix.t

[14:54] <Geth> ¦ roast: Add more exhaustive infix metaop tests

[14:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6b2e75ea87

[14:55] *** Ven`` joined
[14:55] *** p6bannerbot sets mode: +v Ven``

[15:49] *** Ven`` left
[15:54] *** Ven`` joined
[15:55] *** p6bannerbot sets mode: +v Ven``

[15:59] *** lucasb left
[16:24] *** robertle left
[17:11] *** robertle joined
[17:12] *** p6bannerbot sets mode: +v robertle

[17:26] *** lucasb joined
[17:27] *** p6bannerbot sets mode: +v lucasb

[17:41] *** Ven`` left
[17:52] *** leont joined
[17:52] *** p6bannerbot sets mode: +v leont

[17:58] *** Ven`` joined
[17:59] *** p6bannerbot sets mode: +v Ven``

[18:04] *** Ven`` left
[19:12] *** sena_kun joined
[19:12] *** p6bannerbot sets mode: +v sena_kun

[19:33] <lizmat> m: dd &[+=].name; dd METAOP_ASSIGN(&[+]).name  # somehow the &[+=] path does not go through METAOP_ASSIGN  :-(

[19:33] <camelia> rakudo-moar a728bb2d9: OUTPUT: «"infix:<+=>"␤"infix:<+> + \{assigning}"␤»

[19:45] <timotimo> perhaps the static optimizer got to it first

[19:45] <timotimo> it's very probable, indeed

[19:45] <timotimo> lizmat: ^

[19:46] <lizmat> no, it is in fact very mundane: Grammar does a set_name without looking if it already has a name

[19:46] <timotimo> oh

[19:46] <timotimo> glad to hear that though

[19:47] <lizmat> so that fix appears to be easy, checking now

[19:49] <lizmat> yup, spectesting now

[19:55] *** Ven`` joined
[19:56] *** p6bannerbot sets mode: +v Ven``

[19:59] *** Ven`` left
[20:00] <Geth> ¦ rakudo: e7ce194a77 | (Elizabeth Mattijsen)++ | src/Perl6/Grammar.nqp

[20:00] <Geth> ¦ rakudo: Don't set name of metaop if it already has a name

[20:00] <Geth> ¦ rakudo: 

[20:00] <Geth> ¦ rakudo: The code path for '&[+=]' does use METAOP_ASSIGN, but then overwrote the

[20:00] <Geth> ¦ rakudo: carefully crafted name with something of its own devise.  Now only sets the

[20:00] <Geth> ¦ rakudo: name if it doesn't have a name yet.  Ensures metaops will use the fast path

[20:00] <Geth> ¦ rakudo: for += like ops.

[20:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e7ce194a77

[20:06] <lizmat> m: my %a = "a".."e" Z=> 1..5; dd %a >>+=<< 3   # shouldn't this need to die ?

[20:06] <camelia> rakudo-moar a728bb2d9: OUTPUT: «Lists on either side of non-dwimmy hyperop of infix:<+> + {assigning} are not of the same length while recursing␤left: 5 elements, right: 1 elements␤  in block <unit> at <tmp> line 1␤␤»

[20:06] <lizmat> ah, it does

[20:06] * lizmat looks at what she borked locally

[20:29] <lizmat> m: use nqp; my %h is BagHash = a => 25; my $s := %h.values; say nqp::iscont($s[0])  # BagHash.values returns Proxy objects, this works fine

[20:29] <camelia> rakudo-moar e7ce194a7: OUTPUT: «1␤»

[20:30] <lizmat> m: use nqp; my %h is BagHash = a => 25; my $s := %h.values; say $s.elems; say nqp::iscont($s[0])  # but put a .elems in there, and the container is gone

[20:30] <camelia> rakudo-moar e7ce194a7: OUTPUT: «1␤0␤»

[20:30] <timotimo> ha, that's weird

[20:30] <timotimo> m: use nqp; my %h is BagHash = a => 25; my $s := %h.values; say $s.elems; say $s[0]

[20:30] <camelia> rakudo-moar e7ce194a7: OUTPUT: «1␤25␤»

[20:31] <timotimo> does .elems cause it to .cache? is that what does it?

[20:31] <lizmat> m: my %h is BagHash = a => 25; my $s := %h.values; $s[0] = 42

[20:31] <camelia> rakudo-moar e7ce194a7: ( no output )

[20:31] <timotimo> m: use nqp; my %h is BagHash = a => 25; my $s := %h.values; say $s.cache; say nqp::iscont($s[0])

[20:31] <camelia> rakudo-moar e7ce194a7: OUTPUT: «(25)␤1␤»

[20:31] <lizmat> m: my %h is BagHash = a => 25; my $s := %h.values; $s.elems;; $s[0] = 42

[20:31] <camelia> rakudo-moar e7ce194a7: OUTPUT: «Cannot modify an immutable Int (25)␤  in block <unit> at <tmp> line 1␤␤»

[20:31] <timotimo> no, that's not it

[20:31] <lizmat> I think it's the .cache that Seq.elems does under the hood

[20:32] <timotimo> but i just tried .cache and it didn't change that time?

[20:33] <timotimo> did i do it wrong?

[20:33] <lizmat> m: my %h is BagHash = a => 25; my $s := %h.values; $s.cache;; $s[0] = 42

[20:33] <camelia> rakudo-moar e7ce194a7: ( no output )

[20:33] <lizmat> hmm

[20:33] <timotimo> m: use nqp; my %h is BagHash = a => 25; my $s := %h.values; say $s.count-only; say nqp::iscont($s[0])

[20:33] <lizmat> m: my %h is BagHash = a => 25; my $s := %h.values; $s.cache.elems; $s[0] = 42

[20:33] <camelia> rakudo-moar e7ce194a7: OUTPUT: «No such method 'count-only' for invocant of type 'Seq'␤  in block <unit> at <tmp> line 1␤␤»

[20:33] <camelia> rakudo-moar e7ce194a7: OUTPUT: «Cannot modify an immutable Int (25)␤  in block <unit> at <tmp> line 1␤␤»

[20:33] <timotimo> oops

[20:33] <lizmat> doing elems on the cache vivifies

[20:35] <lizmat> an alternative would be to make .values having a PredictiveIterator

[20:36] <lizmat> but that's only feasible if a nqp::iterator(hash) can tell me how many values it already has done, because keeping count in that code would cause a significant overhead

[20:38] <timotimo> right

[20:38] *** robertle left
[20:38] <timotimo> that wouldn't be hard, you know :)

[20:38] <lizmat> yeah, but out of my pay level atm

[20:39] <lizmat> meanwhile, it looks like List.from-iterator is to blame for losing the proxyness

[20:40] <timotimo> if you're asking for me to do it, i'd probably do it

[20:42] <lizmat> well..  that would be nice and fix the problem I have

[20:43] <lizmat> but in a way that's a workaround, the deeper issue is that it shouldn't make a difference if .elems gets called on a Seq or not

[20:44] <timotimo> true

[20:44] <lizmat> m: my %h is BagHash = a => 25; my $s := %h.values; $s.elems; $s[0] = 42  # BagHash.values returns Proxy objects

[20:44] <camelia> rakudo-moar e7ce194a7: OUTPUT: «Cannot modify an immutable Int (25)␤  in block <unit> at <tmp> line 1␤␤»

[20:44] <lizmat> m: my %h  = a => 25; my $s := %h.values; $s.elems; $s[0] = 42  # hashes return just containers

[20:44] <camelia> rakudo-moar e7ce194a7: ( no output )

[20:45] <lizmat> I'm going to make an issue for it... should really be preparing for trip to London tomorrow

[20:47] <lizmat> m: my %h is BagHash = a => 25; say %h.values[0].VAR.^name

[20:47] <camelia> rakudo-moar e7ce194a7: OUTPUT: «Proxy␤»

[20:47] <lizmat> m: my %h = a => 25; say %h.values[0].VAR.^name

[20:47] <camelia> rakudo-moar e7ce194a7: OUTPUT: «Scalar␤»

[21:13] *** brrt joined
[21:14] *** p6bannerbot sets mode: +v brrt

[21:24] <Geth> ¦ roast: ac08d5ca52 | (Elizabeth Mattijsen)++ | S03-metaops/infix.t

[21:24] <Geth> ¦ roast: Add a bunch of infix metaop tests on QuantHashes

[21:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ac08d5ca52

[21:27] *** discoD joined
[21:28] *** p6bannerbot sets mode: +v discoD

[22:00] *** dogbert21 joined
[22:00] *** p6bannerbot sets mode: +v dogbert21

[22:02] *** dogbert2_ left
[22:18] *** lucasb left
[22:22] *** discoD left
[22:37] *** brrt left
[23:17] *** sena_kun left
[23:31] *** j3nnn1 left
