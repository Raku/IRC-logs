[00:09] <MasterDuke> b2gills: none here with master/master/master on Arch Linux. what OS, etc are you using?

[00:11] <b2gills> I wrote a shell script which uses NQP_REVISION and MOAR_REVISION, so it should be the latest pull

[00:19] <b2gills> s/pull/bump/

[00:20] <b2gills> Ubuntu 16.04.4 LTS

[00:38] <MasterDuke> hm, i think i once found a problem with an older gcc. what version of that do you have?

[00:40] <MasterDuke> also, i know nothing about nativecall, so i'd say just make an issue and tag nine in it

[00:55] <b2gills> I just blew away /opt/rakudo … and I only have `moar`  `nqp` &  `nqp-m` in /opt/rakudo/bin.

[00:55] <b2gills> So I was apparently using an old revision

[00:58] <b2gills> Makefile:568: recipe for target 'm-coretest5' failed

[00:58] <b2gills> Makefile:620: recipe for target 'm-install' failed

[00:59] <b2gills> gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9)

[01:00] <b2gills> GNU Make 4.1

[01:10] <Kaiepi> what is Block in nqp?

[01:11] <timotimo> Block, like a class in the hierarchy of Routine and such?

[01:12] <Kaiepi> i'm guessing so

[01:12] <Kaiepi> i can't figure out how to use stuff like nqp::for

[01:12] <timotimo> you're writing actual nqp code for the nqp compiler to consume?

[01:12] <Kaiepi> though i probably don't really need to use it

[01:12] <Kaiepi> no, that's why i say that

[01:15] <Kaiepi> also when do i need to use nqp::decont?

[01:16] <timotimo> whenever you get a container in and you want to do stuff with the value in it instead, which is almost always

[01:21] <timotimo> in perl6 code, you get deconts code-genned everywhere, and moarvm is good at removing them when they are unnecessary

[01:21] <timotimo> because deconting something that isn't a container is a no-op

[01:22] <Kaiepi> how do you tell if something has a container?

[01:23] <timotimo> nqp::iscont :)

[01:23] <timotimo> m: use nqp; say nqp::iscont(my $foo); say nqp::iscont(my \blop = 1)

[01:23] <camelia> rakudo-moar 29b092c94: OUTPUT: «1␤0␤»

[01:23] <Kaiepi> ohh

[01:24] <Kaiepi> so sigils give vars containers?

[01:24] <timotimo> yup

[01:24] <Kaiepi> what about self in class methods?

[01:24] <timotimo> iscont is also what different parts of the code decide whether to iterate something or not

[01:25] <timotimo> not sure, you can try it out :)

[01:25] <MasterDuke> m: use nqp; say nqp::iscont(my $foo := 1);

[01:25] <camelia> rakudo-moar 29b092c94: OUTPUT: «0␤»

[01:25] <timotimo> right, binding replaces containers

[01:26] <timotimo> assigning goes into containers

[01:27] <Kaiepi> ohh

[01:27] <Kaiepi> ok now it makes more sense

[01:27] <Kaiepi> thanks

[01:37] <b2gills> make install fails with `./perl6-m tools/build/install-core-dist.pl /opt/rakudo/share/perl6␤Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at tools/build/install-core-dist.pl line 17`

[01:40] <Geth> ¦ roast: 432a5531bb | MasterDuke17++ | S02-types/array.t

[01:40] <Geth> ¦ roast: Test reification (or not) of zen/whatever slices

[01:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/432a5531bb

[01:54] <Zoffix> Kaiepi: self is always deconted. One exception (both to self and what iscont gives) is Proxy containers which remain conted (since deconting them would just fetch the value and discard the likely-important Proxy)

[01:54] <Kaiepi> ah

[01:54] <Zoffix> huggable: HLL iscont

[01:54] <huggable> Zoffix, say $v.VAR ~~ Scalar|Proxy ?? "conted" !! "deconted"

[01:54] <Zoffix> ^ the non-NQP way to check if something's is conted

[01:54] <Zoffix> huggable: decont

[01:54] <huggable> Zoffix, Article on containers and decont: https://perl6advent.wordpress.com/2017/12/02/#theoneandonly

[01:54] <Zoffix> ^ decent article on containers

[02:22] <Zoffix> "./libmoar.so: undefined reference to `MVM_getrandom'" :S

[02:22] <timotimo> need to Configure.pl again

[02:22] <Zoffix> That's on my 32-bit box

[02:22] <Zoffix> Ah. Thanks

[02:39] <Geth> ¦ nqp/nummy-num: b46ca01ca1 | (Zoffix Znet)++ | t/nqp/115-nums.t

[02:39] <Geth> ¦ nqp/nummy-num: Use original string num in test desc

[02:39] <Geth> ¦ nqp/nummy-num:

[02:39] <Geth> ¦ nqp/nummy-num: For easier debugging of failures

[02:39] <Geth> ¦ nqp/nummy-num: review: https://github.com/perl6/nqp/commit/b46ca01ca1

[02:44] <Geth> ¦ nqp/nummy-num: eb50ac8e7e | (Zoffix Znet)++ | t/nqp/115-nums.t

[02:44] <Geth> ¦ nqp/nummy-num: Test we can handle fancy unicode nums

[02:44] <Geth> ¦ nqp/nummy-num: review: https://github.com/perl6/nqp/commit/eb50ac8e7e

[03:05] <Geth> ¦ nqp: zoffixznet++ created pull request #438: Nummy num

[03:05] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/438

[03:05] <Geth> ¦ nqp/master: 4 commits pushed by (Zoffix Znet)++

[03:05] <Geth> ¦ nqp/master: a4688c751b | Cover denormals and num value drift bugs

[03:05] <Geth> ¦ nqp/master: b46ca01ca1 | Use original string num in test desc

[03:05] <Geth> ¦ nqp/master: eb50ac8e7e | Test we can handle fancy unicode nums

[03:05] <Geth> ¦ nqp/master: 26dae9460c | Merge pull request #438 from perl6/nummy-num

[03:05] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/d0b1b68bd614...26dae9460c94

[03:09] <Zoffix> uhhh.. ."Could not execute (./perl6-m t/spec/S10-packages/precompilation.rakudo.moar): open3: exec of ./perl6-m t/spec/S10-packages/precompilation.rakudo.moar failed: No such file or directory at /home/cpan/perl5/perlbrew/perls/perl-5.24.0/lib/5.24.0/TAP/Parser/Iterator/Process.pm line 165."

[03:11] <Zoffix> oh, nm, I think it was a residual process hanging about after I killed z-script initiated stresstest

[03:11] <Zoffix> s/think/fairly sure/;

[03:14] <Zoffix> t/02-rakudo/03-cmp-ok.t                                       (Wstat: 512 Tests: 6 Failed: 2)

[03:14] <Zoffix> Failed tests:  1, 6

[03:14] <Zoffix> Non-zero exit status: 2

[03:14] <Zoffix> t/08-performance/02-qast-rewrites.t                           (Wstat: 1024 Tests: 5 Failed: 4)

[03:14] <Zoffix> Failed tests:  1-3, 5

[03:14] <Zoffix> Non-zero exit status: 4

[03:14] <Zoffix> t/02-rakudo/repl.t                                            (Wstat: 256 Tests: 42 Failed: 1)

[03:14] <Zoffix> Failed test:  35

[03:14] <Zoffix> Non-zero exit status: 1

[03:17] <Zoffix> sparkling clean the second time... Weird that such a burst of sporadic failures occured :/

[03:25] <travis-ci> NQP build failed. Zoffix Znet 'Merge pull request #438 from perl6/nummy-num

[03:25] <travis-ci> https://travis-ci.org/perl6/nqp/builds/371853211 https://github.com/perl6/nqp/compare/d0b1b68bd614...26dae9460c94

[03:25] * Zoffix blows everything out and re-tries the bumps

[03:38] <Zoffix> ZOFFLOP: t/spec/S11-modules/require.t

[03:42] <Zoffix> ZOFFLOP: t/spec/S07-hyperrace/basics.t t/spec/S10-packages/basic.t

[03:42] <Geth> ¦ nqp: aec1b1fd7d | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[03:42] <Geth> ¦ nqp: [MoarVM Bump] Brings 13 commits

[03:42] <Geth> ¦ nqp:

[03:42] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.04-19-g1b78b04...2018.04-32-g517e26f

[03:42] <Geth> ¦ nqp: 517e26f Merge pull request #850 from MoarVM/nummy-num

[03:42] <Geth> ¦ nqp: c6c0bab Fix denormals and precision issues in num parser

[03:42] <Geth> ¦ nqp: c6aba84 don't use %b in format string

[03:42] <Geth> ¦ nqp: 7349b42 have to use FSA consistently for this field

[03:42] <Geth> ¦ nqp: <…commit message has 9 more lines…>

[03:42] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/aec1b1fd7d

[03:42] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.04-19-g1b78b04...2018.04-32-g517e26f

[03:42] <Geth> ¦ rakudo: 3d6e25c680 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[03:42] <Geth> ¦ rakudo: [NQP Bump] Brings 5 commits

[03:42] <Geth> ¦ rakudo:

[03:42] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.04-4-gd0b1b68...2018.04-9-gaec1b1f

[03:42] <Geth> ¦ rakudo: aec1b1f [MoarVM Bump] Brings 13 commits

[03:42] <Geth> ¦ rakudo: 26dae94 Merge pull request #438 from perl6/nummy-num

[03:42] <Geth> ¦ rakudo: eb50ac8 Test we can handle fancy unicode nums

[03:43] <Geth> ¦ rakudo: b46ca01 Use original string num in test desc

[03:43] <Geth> ¦ rakudo: <…commit message has 16 more lines…>

[03:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3d6e25c680

[03:43] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.04-4-gd0b1b68...2018.04-9-gaec1b1f

[04:05] <Zoffix> .tell AlexDaniel` the nqp num issues are fully fixed now. I did check on my 32-bit box and both the original failing tests and then new NQP num tests were fine.

[04:05] <yoleaux> Zoffix: I'll pass your message to AlexDaniel`.

[06:56] <stmuk> Zoffix++

[09:56] <[Tux]> Rakudo version 2018.04-17-g3d6e25c68 - MoarVM version 2018.04-32-g517e26f04

[09:56] <[Tux]> csv-test-xs-20      0.423 -  0.447

[09:56] <[Tux]> csv-ip5xs           0.885 -  0.906

[09:56] <[Tux]> test-t --race       1.012 -  1.047

[09:56] <[Tux]> test-t              2.507 -  2.541

[09:56] <[Tux]> csv-ip5xs-20        8.722 -  9.094

[09:56] <[Tux]> test                9.675 -  9.739

[09:56] <[Tux]> test-t-20 --race   15.996 - 16.352

[09:56] <[Tux]> csv-parser         37.105 - 38.971

[09:56] <[Tux]> test-t-20          44.698 - 45.365

[10:36] <AlexDaniel> .

[10:36] <AlexDaniel`> .

[10:36] <yoleaux> 01:50Z <Zoffix> AlexDaniel`: https://gist.github.com/zoffixznet/3c6e0260c9941a5f75fec10be2acaaf6

[10:36] <yoleaux> 04:05Z <Zoffix> AlexDaniel`: the nqp num issues are fully fixed now. I did check on my 32-bit box and both the original failing tests and then new NQP num tests were fine.

[10:40] <dogbert2_> No such method 'install' for invocant of type 'Str'

[10:40] <dogbert2_> in block <unit> at tools/build/install-core-dist.pl line 28

[10:40] <dogbert2_> wazzup with this?

[10:40] <AlexDaniel> Zoffix: but you still think that we should just fudge these tests?

[10:41] <AlexDaniel> or “fully fixed” means fully fixed and we can ship it?

[10:41] <jnthn> dogbert2_: Thing that was a bug introduced by a commit in Rakudo that was already reverted

[10:46] <jnthn> *Think

[10:52] <Zoffix> AlexDaniel: https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect

[10:53] <Zoffix> I don't know. It works and passes stresstests on my 64bit and 32bit boxes.

[10:53] <Zoffix> But I don't know C so for all I know I wrote a bunch of crap there and it'll explode the second you release a point release :P

[10:54] <Geth> ¦ nqp: 4d8503982c | (Tobias Leich)++ | tools/build/MOAR_REVISION

[10:54] <Geth> ¦ nqp: Bump moar for inlined fixed sized CArray support

[10:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4d8503982c

[10:54] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.04-32-g517e26f...2018.04-34-g25f165a

[10:55] <Zoffix> new num nqp tests pass on win10 too

[10:56] <Geth> ¦ rakudo: dbc527d46a | (Tobias Leich)++ | tools/build/NQP_REVISION

[10:56] <Geth> ¦ rakudo: Bump nqp/moar for inlined fixed sized CArray support

[10:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dbc527d46a

[10:56] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.04-9-gaec1b1f...2018.04-10-g4d85039

[10:57] <Geth> ¦ rakudo: 4c3807c5fb | (Tobias Leich)++ | 4 files

[10:57] <Geth> ¦ rakudo: Support shapes for HAS scoped attributes

[10:57] <Geth> ¦ rakudo:

[10:57] <Geth> ¦ rakudo: The shape declaration on an attributes was parsed correctly since a while,

[10:57] <Geth> ¦ rakudo: but now this information is passed to the repr composition. The following

[10:57] <Geth> ¦ rakudo: is now supported fo CStructs and CPPStructs:

[10:57] <Geth> ¦ rakudo:

[10:57] <Geth> ¦ rakudo: use NativeCall;

[10:57] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[10:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4c3807c5fb

[10:57] <Geth> ¦ rakudo: 7847768cad | (Tobias Leich)++ | src/Perl6/Actions.nqp

[10:57] <Geth> ¦ rakudo: Mark the CArray dimension as nut sunk

[10:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7847768cad

[10:58] <FROGGS> I hope I didn't break anything

[10:59] <Zoffix> AlexDaniel: also, I'm fairly sure the test failures are not a new bug but rather the old bug (failure to choose closest representable num) exposed because our stringification got more precision. Also, I'm not aware of that bug affecting anything on rakudo level.

[10:59] <Zoffix> AlexDaniel: so yeah, I think the test should be fudged for release and the fix left out of it.

[11:00] <AlexDaniel> alright… that kinda makes sense, but then I barely woke up

[11:03] <Zoffix> But other than that yeah, by “fully fixed” I mean the bug is fixed and is covered by tests.

[11:09] <dogbert2_> jnthn: thx

[11:14] <travis-ci> NQP build failed. Tobias Leich 'Bump moar for inlined fixed sized CArray support'

[11:14] <travis-ci> https://travis-ci.org/perl6/nqp/builds/371974446 https://github.com/perl6/nqp/compare/aec1b1fd7d1c...4d8503982c1c

[11:19] <FROGGS> I guess the just reported failures of t/nqp/106-unicodenames.t and t/nqp/115-nums.t are to be expected on jvm?

[11:20] <FROGGS> because, what I did can surely have no impact on that

[11:21] <AlexDaniel> that's correct, yes

[11:21] <AlexDaniel> but what's exactly failing in 115-nums.t? :)

[11:22] * Zoffix guesses value drift

[11:22] <Zoffix> FWIW 115-nums.t is a new test file I added last night that covers denormals and value drift in parsing/stringification of nums

[11:23] <FROGGS> I see

[11:56] <Zoffix> .tell pmurias I think package-lock.json is something with JS backend innit? Would you know how to fix this Issue? https://github.com/perl6/nqp/issues/437

[11:56] <yoleaux> Zoffix: I'll pass your message to pmurias.

[11:57] <Zoffix> Oh, k, "Only users who have been granted access to vulnerability alerts for this repository can see this message."

[12:11] <Zoffix> Oh, I was wrong, it fails 'cause "not ok 7 - denormal 5e-324 is recognized and is not 0 (Uni)"

[12:11] <AlexDaniel> I guess it's just a matter of using a newer version of that package

[12:11] <Zoffix> j: say ೫e-೩೨೪

[12:11] <camelia> rakudo-jvm 7847768ca: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'೫' is not a valid number␤at <tmp>:1␤------> 3say ೫7⏏5e-೩೨೪␤»

[12:11] <Zoffix> m: say ೫e-೩೨೪

[12:11] <camelia> rakudo-moar 7847768ca: OUTPUT: «5e-324␤»

[12:12] <Zoffix> j: say ೫

[12:12] <camelia> rakudo-jvm 7847768ca: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'೫' is not a valid number␤at <tmp>:1␤------> 3say ೫7⏏5<EOL>␤»

[12:13] <AlexDaniel> or maybe not, because there's no point release for that security issue…

[12:13] <AlexDaniel> and you'd have to upgrade to a newer major version

[12:22] <Geth> ¦ nqp: d36869cc27 | (Zoffix Znet)++ | 2 files

[12:22] <Geth> ¦ nqp: Fudge newly-added Unicodey tests on JVM

[12:22] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d36869cc27

[12:40] <travis-ci> NQP build passed. Zoffix Znet 'Fudge newly-added Unicodey tests on JVM'

[12:40] <travis-ci> https://travis-ci.org/perl6/nqp/builds/372006759 https://github.com/perl6/nqp/compare/4d8503982c1c...d36869cc2742

[13:03] <dogbert2_> ZOFFLOP: t/spec/S11-modules/require.t

[13:07] <dogbert2_> when I run the above script separately I sometimes get the following:

[13:08] <dogbert2_> ok 13 - can load Fancy::Utilities at run time

[13:08] <dogbert2_> Use of uninitialized value $repo-id of type Any in string context.

[13:08] <dogbert2_> Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.

[13:08] <dogbert2_> in any statement_control at blib/Perl6/Grammar.moarvm line 1

[13:08] <dogbert2_> if I run it again the message above is gone !

[13:22] <brrt> dear #perl6-dev. i would very much appreciate it if someone (who is on linux, or maybe macOS), can checkout the branch `jit-stack-walker` on MoarVM and run a benchmark against master

[13:24] <brrt> for me, spectest passes

[14:15] <b2gills> So my weird problems seem to have disappeared after `git clean -dxf` and removing every remnant from previous builds I could think of (/opt/rakudo/*;~/.perl6/precomp)

[16:01] <lizmat> Files=1239, Tests=76311, 318 wallclock secs (15.71 usr  5.37 sys + 2198.79 cusr 220.31 csys = 2440.18 CPU)

[16:17] <AlexDaniel> Alright, so to me it makes sense just to fudge tests that are not passing on i386 for the point release. This way there's no need to hunt for potential new bugs and no need for moarvm point release. Especially so given that we've not seen any user-facing issues, and that the underlying bug probably existed before

[16:17] <AlexDaniel> if anyone disagrees, please speak up :)

[16:22] <AlexDaniel> and btw, from now on we'll notice this kind of issues on i386 before the release, thanks to El_Che++

[16:25] * AlexDaniel deletes all branches that have no commits ahead of master…

[16:27] <Zoffix> +1

[16:29] <AlexDaniel> to be honest I feel like deleting all branches that are 10k+ commits behind

[16:32] <Zoffix> ZOFFLOP: t/spec/S12-class/literal.t

[16:35] <Zoffix> ZOFFLOP: t/spec/S10-packages/basic.t

[16:35] <AlexDaniel> Alright, this month I'll bother all of you about these stale branches

[16:37] <El_Che> AlexDaniel: do the canary work as intended?

[16:37] <El_Che> does?

[16:38] <AlexDaniel> El_Che: no, but we will see when I'll get the point release preready

[16:38] <AlexDaniel> El_Che: I mean, I don't know yet :)

[16:38] <AlexDaniel> I've been trying to cut a virtual release from master but failed because of issues with File::Which

[16:39] <El_Che> AlexDaniel: we know it passes regular releases until 2018.03, so everything failing after that... :)

[16:40] <AlexDaniel> El_Che: but 2018.04 is failing only on i386 right?

[16:40] <El_Che> yes

[16:40] <AlexDaniel> so I guess it works then

[16:40] <AlexDaniel> anyway we'll see tonight

[16:42] <El_Che> looking forward to the dot releases. A lot of changes to my pkg repo wainting on a branch: repos for debs and rpms, support for Ubuntu 18.04 amd64/i386, script to set PATH for newbies, support for Linux on Windows for all packages exect alpine (it does not work there yet) instead of only Ubuntu

[16:42] <El_Che> now I am reading it, it sounds like a merge nightmare, but travis passes :)

[16:42] <El_Che> more simple readme as well

[16:45] <Geth> ¦ nqp/pluggable-spesh: 6eb28874bf | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[16:45] <Geth> ¦ nqp/pluggable-spesh: Compile MoarVM spesh plugin API ops

[16:45] <Geth> ¦ nqp/pluggable-spesh: review: https://github.com/perl6/nqp/commit/6eb28874bf

[16:45] <Geth> ¦ nqp/pluggable-spesh: 1d063fd2e5 | (Jonathan Worthington)++ | t/moar/52-pluggable-spesh.t

[16:45] <Geth> ¦ nqp/pluggable-spesh: Add proposed spesh plugin API test

[16:45] <Geth> ¦ nqp/pluggable-spesh: review: https://github.com/perl6/nqp/commit/1d063fd2e5

[16:47] <El_Che> works JIT on arm?

[16:48] <jnthn> El_Che: No

[16:48] <jnthn> Though spesh works, so you still get quickened bytecode, just interpreted still

[16:49] <El_Che> so, are arm packages relevant?

[16:49] <jnthn> Why not? Just because you don't get machine code compilation doesn't mean it isn't still overall useful. :)

[16:50] <Zoffix> El_Che: 32-bit also doesn't have JIT. It's just slow as hell, but everything still works

[16:51] <El_Che> Zoffix: 32 bit is probably a 64-machine (VM?) with little ram

[16:51] <El_Che> arm has slow preocessors and little ram mostly :)

[16:55] <Zoffix> ZOFVM: Files=1294, Tests=153324, 152 wallclock secs (21.22 usr  3.51 sys + 3224.19 cusr 175.40 csys = 3424.32 CPU)

[16:55] <Zoffix> ZOFSPECTESTVM: Files=1239, Tests=76311, 109 wallclock secs (14.99 usr  2.94 sys + 2196.37 cusr 151.92 csys = 2366.22 CPU)

[16:55] <Zoffix> Jit-WalkerVM: Files=1239, Tests=76202, 112 wallclock secs (14.96 usr 3.13 sys + 2251.03 cusr 150.77 csys = 2419.89 CPU)

[16:55] <Zoffix> Jit-WalkerSPECTESTVM: Files=1294, Tests=153215, 152 wallclock secs (21.16 usr 3.67 sys + 3221.38 cusr 170.73 csys = 3416.94 CPU)

[16:55] <Zoffix> Jit-Walker also has a ton of test failuers: https://gist.github.com/zoffixznet/75048cc6e196bce866df2c961312ef0c

[16:57] * jnthn bbl

[16:57] <Zoffix> System info: https://gist.github.com/zoffixznet/c5b859cfd959024bccd8a633ab152849

[16:58] <Zoffix> .tell brrt Luke Jit Walker results: https://irclog.perlgeek.de/perl6-dev/2018-04-27#i_16103228

[16:58] <yoleaux> Zoffix: I'll pass your message to brrt.

[17:28] <lizmat> m: sub int($a) { $a.Int }; say int(42.3)  # probably a case of DIHWIDT

[17:28] <camelia> rakudo-moar 7847768ca: OUTPUT: «Cannot invoke this object (REPR: P6int; int)␤  in block <unit> at <tmp> line 1␤␤»

[17:34] <Geth> ¦ rakudo: Kaiepi++ created pull request #1779: Implement NativeCall CArray.allocate method

[17:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1779

[18:00] <Kaiepi> note to self: don't put fixes #issuenum in the commit message when you force push all the time in pullreqs

[18:01] <Kaiepi> actually wait, do people push new changes in pullreqs in separate commits here?

[18:20] <AlexDaniel> Kaiepi: I'm +1 on force-fixing commits in pull requests so that the history is clean

[18:29] <Kaiepi> same

[18:32] <Kaiepi> they're useful for pullreqs making huge changes, but that's the only time i can think of where i'd use them

[18:32] <Kaiepi> i just need to fix issues from the pullreq message, not the commit so i don't spam issues

[18:39] <AlexDaniel> IMO that's not a big problem…

[20:25] <lizmat> m: sub rand($a) {}; rand(42)   # taking the Perl 5 safeties a little bit too far, IMO

[20:25] <camelia> rakudo-moar 7847768ca: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of rand(N); in Perl 6 please use N.rand for Num or (^N).pick for Int result␤at <tmp>:1␤------> 3sub rand($a) {}; rand7⏏5(42)   # taking the Perl 5 safeties a li␤»

[20:52] <AlexDaniel> lizmat: most of them are this way

[20:53] <AlexDaniel> (with false positives getting in your way when you are not even thinking about perl 5)

[20:53] <timotimo> huh, why doesn't it have a check for "is rand from the setting here?"?

[20:53] <timotimo> probably just an oversight?

[20:55] <lizmat> it's in the grammar, can we check for existence of subs there already ?

[20:56] <lizmat> would have to add the code gen for it as well then, I think

[20:56] <timotimo> hm, we probably can, but i'm not sure

[20:56] <timotimo> what do you mean "add the code gen"?

[21:07] <lizmat> looks to me the code gen only supports the parameterless case

[21:07] <timotimo> oh, so it's a term?

[21:07] <lizmat> yes

[21:07] <timotimo> well,t hen

[21:07] <timotimo> defining a sub doesn't override that, does it?

[21:08] <lizmat> m: sub now($a) { $a }; say now(42);  # it does

[21:08] <camelia> rakudo-moar 7847768ca: OUTPUT: «42␤»

[21:08] <timotimo> aha!

[21:08] <timotimo> but that at least explains why the code wouldn't find it?

[21:08] <timotimo> actually, i'm not sure about that

[21:08] <timotimo> i might need to take something for my headache :|

[21:09] <lizmat> get an early night, maybe ?

[21:09] <timotimo> that often leads me to have even worse headaches :)

[21:11] <lizmat> this sorta reminds me of needing to have a coffee at 11pm to be able to sleep

[21:11] <El_Che> timotimo: take something and go to bed

[21:11] <lizmat> not a healthy lifestyle

[21:11] <El_Che> sleeping with headache doesn't work for me eaither

[21:20] <Kaiepi> i get cluster headaches and nothing works besides prescriptions

[21:21] <Kaiepi> idk how to help

[21:21] <timotimo> i've not got it nearly as bad as that

[21:21] <AlexDaniel> Well, I guess this is relevant: https://github.com/AlexDaniel/orgsleep

[21:22] <AlexDaniel> speaking of which, looking at the graph I think I have a problem of some sort

[21:23] <AlexDaniel> some people recommended melatonin pills, but maybe I should go straight to a doctor

[21:27] <El_Che> AlexDaniel: I woudn't self-medicate

[21:40] <stmuk> melatonin is quite effective as a sleep aid sometimes

[21:56] <tony-o> timotimo: check it out https://i.imgur.com/XiM7WBa.png

[21:56] <timotimo> oh yeah! that's pretty :)

[21:56] <lizmat> tony-o: any chance of a blog post from you re PTS ?

[21:56] <tony-o> test = dotted, build dashed

[21:57] <tony-o> lizmat: yes, i will write one up

[21:57] <tony-o> how soon do you need?

[21:57] <lizmat> ++tony-o

[21:57] <lizmat> well, before Monday would be nice, so I can put it in the P6weekly

[21:57] <timotimo> what i've been wondering is: if there's one node that has many, many more incoming edges, maybe just mark nodes that would point to it in some way to get the potential mess under control :)

[21:58] <tony-o> like Test?

[21:58] <tony-o> working on it lizmat

[21:58] <timotimo> yeah, like that

[21:59] <tony-o> hmm, what would that look like?

[21:59] <timotimo> i mean, with "record" shape you can turn nodes into essentially tables, but i'd assume viewers would get confused

[21:59] <timotimo> one way i could imagine it would be to color all of those nodes one color, then have a "stand-in" on the side connected to the many-incoming-edges node to show what the color means

[21:59] <timotimo> this is everything but well-thought-out fwiw

[22:00] <tony-o> haha

[22:00] <tony-o> yea i'm trying to picture that

[22:00] <timotimo> another way would be to have a subgraph with a visible boundary, but i think only dot can handle that

[22:01] <timotimo> i believe neato would still put stuff in there that doesn't belong, or just generally mess that up :)

[22:01] <AlexDaniel> neato is not going to look good though

[22:01] <AlexDaniel> not as good as this at least

[22:01] <timotimo> you think? i believe neato looks better than dot, often

[22:03] <AlexDaniel> ok it may look ok, but it'd be hard to read :)

[22:03] <timotimo> mhm

[22:03] <timotimo> wait, i think i might have been using dot almost all the time and just got a little confused

[22:04] <tony-o> i want to code 'Test' out of the thing anyway

[22:04] <timotimo> mhm

[22:17] <tony-o> much cleaner without Test

[22:18] <tony-o> https://i.imgur.com/LDNJaxV.png

[22:18] <timotimo> yes, i like it

[22:19] <tony-o> changes to the tree/dot maker are pushed to uxmal

[22:23] <lizmat> https://docs.perl6.org/routine/seek  # documents IO::Handle.seek to return True

[22:23] <lizmat> however, it appears to return Mu

[22:39] <Geth> ¦ rakudo: 24a907747b | (Elizabeth Mattijsen)++ | src/core/IO/Handle.pm6

[22:39] <Geth> ¦ rakudo: IO::Handle.seek is documented as returning True

[22:39] <Geth> ¦ rakudo:

[22:39] <Geth> ¦ rakudo: It was however returning Mu.  No tests were hurt during this modification.

[22:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/24a907747b

[22:51] <Geth> ¦ nqp/release/2018.04.1: 593121d34d | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/hll/06-sprintf.t

[22:51] <Geth> ¦ nqp/release/2018.04.1: Fudge num precision tests that are failing on i386

[22:51] <Geth> ¦ nqp/release/2018.04.1:

[22:51] <Geth> ¦ nqp/release/2018.04.1: There are no known effects of this bug on rakudo level, and the bug

[22:51] <Geth> ¦ nqp/release/2018.04.1: itself is fairly old and merely got exposed recently because the

[22:51] <Geth> ¦ nqp/release/2018.04.1: stringification got more precision. Proper fix is in the works, but

[22:51] <Geth> ¦ nqp/release/2018.04.1: for now these tests can simply be skipped.

[22:51] <Geth> ¦ nqp/release/2018.04.1: review: https://github.com/perl6/nqp/commit/593121d34d

[23:27] <MasterDuke> would there be any serious downside to building the linux version of rakudo star with `--debug=3`?

[23:35] <AlexDaniel> performance?

[23:35] <MasterDuke> i don't notice that it makes much of a difference

[23:35] <Geth> ¦ rakudo/release/2018.04.1: 50f15dd88d | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[23:35] <Geth> ¦ rakudo/release/2018.04.1: [NQP Bump] Fudge num precision tests

[23:35] <Geth> ¦ rakudo/release/2018.04.1:

[23:35] <Geth> ¦ rakudo/release/2018.04.1: NQP bump brought: https://github.com/perl6/nqp/commit/593121d34

[23:35] <Geth> ¦ rakudo/release/2018.04.1: review: https://github.com/rakudo/rakudo/commit/50f15dd88d

[23:35] <Geth> ¦ rakudo/release/2018.04.1: 6c3941e9c7 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 3 files

[23:35] <Geth> ¦ rakudo/release/2018.04.1: Log all changes (+ announcement)

[23:35] <Geth> ¦ rakudo/release/2018.04.1:

[23:35] <Geth> ¦ rakudo/release/2018.04.1: Also an entry in the release_guide.pod

[23:35] <Geth> ¦ rakudo/release/2018.04.1: review: https://github.com/rakudo/rakudo/commit/6c3941e9c7

[23:35] <MasterDuke> turning of optimization definitely does, but not really debug

[23:36] <MasterDuke> *off

[23:37] <AlexDaniel> btw everyone is welcome to read what I wrote there ↑ and do corrections

[23:40] <AlexDaniel> the actual release will happen many hours later though, releasable is still crunching and I'll have to power-cycle my body for a few hours

[23:40] <AlexDaniel> Zoffix: yes? :)

[23:41] <Zoffix> Nope nothing.

[23:41] <Zoffix> Left my pen in here... There it is!

[23:45] * AlexDaniel waves sadly

[23:57] <Zoffix> AlexDaniel: I found something weird

[23:57] <Zoffix> c: 2017.12,HEAD say 1e10000; say now - BEGIN now

[23:57] <committable6> Zoffix, ¦2017.12: «Inf␤0.0179175␤» ¦HEAD(24a9077): «Inf␤0.0138853␤»

[23:57] <Zoffix> c: 2017.12,HEAD say 1e10000000; say now - BEGIN now

[23:57] <committable6> Zoffix, ¦2017.12: «Inf␤0.05390729␤» ¦HEAD(24a9077): ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[23:57] <Zoffix> c: 2017.12,HEAD say 1e100000; say now - BEGIN now

[23:57] <committable6> Zoffix, ¦2017.12: «Inf␤0.0318292␤» ¦HEAD(24a9077): «Inf␤0.03483203␤»

[23:57] <Zoffix> c: 2017.12,HEAD say 1e1000000; say now - BEGIN now

[23:57] <committable6> Zoffix, ¦2017.12: «Inf␤0.048287␤» ¦HEAD(24a9077): «Inf␤0.0294888␤»

[23:58] <Zoffix> c: 2017.12,HEAD say 1e10000000; say now - BEGIN now

[23:58] <committable6> Zoffix, ¦2017.12: «Inf␤0.0660409␤» ¦HEAD(24a9077): ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[23:58] <Zoffix> aw, shit, I know what it's doing.

[23:58] <Zoffix> it's making a bigint with 10000000 zeros
