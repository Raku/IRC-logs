[00:08] *** Kaiepi left
[00:08] *** Kaiepi joined
[00:09] *** p6bannerbot sets mode: +v Kaiepi

[00:29] *** travis-ci joined
[00:29] *** p6bannerbot sets mode: +v travis-ci

[00:29] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Final fixes to make metaops work on QuantHashes'

[00:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/455233104 https://github.com/rakudo/rakudo/compare/800d8fbbb2de...c3f03e677603

[00:29] *** travis-ci left
[00:29] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[03:13] *** ufobat___ joined
[03:14] *** p6bannerbot sets mode: +v ufobat___

[03:17] *** ufobat_ left
[04:13] *** MasterDuke left
[05:46] *** robertle left
[05:58] *** zostay left
[05:59] *** zostay joined
[05:59] *** huggable left
[05:59] *** p6bannerbot left
[06:03] *** lizmat left
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:36] <[Tux]> Rakudo version 2018.10-135-gc3f03e677 - MoarVM version 2018.10-77-g6236eb5de

[07:36] <[Tux]> csv-test-xs-20      0.426 -  0.433

[07:36] <[Tux]> test-t --race       0.869 -  0.881

[07:36] <[Tux]> csv-ip5xs           0.921 -  0.925

[07:36] <[Tux]> test-t              1.871 -  1.905

[07:36] <[Tux]> csv-ip5xs-20        7.205 -  7.314

[07:36] <[Tux]> test                7.594 -  8.459

[07:36] <[Tux]> test-t-20 --race   10.818 - 10.934

[07:36] <[Tux]> csv-parser         23.293 - 23.631

[07:36] <[Tux]> test-t-20          33.114 - 33.247

[07:44] *** AlexDani` joined
[07:48] *** AlexDaniel left
[08:41] *** lizmat joined
[08:49] *** robertle joined
[10:09] *** AlexDani` is now known as AlexDaniel

[10:18] *** AlexDaniel left
[10:18] *** AlexDaniel joined
[10:21] *** ChanServ sets mode: +vvvv robertle lizmat AlexDaniel zostay

[10:24] *** timewasteable6 joined
[10:24] *** ChanServ sets mode: +o timewasteable6

[11:38] <Geth_> ¦ rakudo: 1ed2b098eb | (Elizabeth Mattijsen)++ | src/core/metaops.pm6

[11:38] <Geth_> ¦ rakudo: Cache METAOP_ASSIGN ops

[11:38] <Geth_> ¦ rakudo: 

[11:38] <Geth_> ¦ rakudo: Not to specifically to make it faster, but to be able to assign a name

[11:38] <Geth_> ¦ rakudo: to the generated block without incurring a runtime penalty for that.

[11:38] <Geth_> ¦ rakudo: The name will allow metaoperators to introspect and optimize >>+=>> with

[11:38] <Geth_> ¦ rakudo: about a factor of 2.

[11:38] <Geth_> ¦ rakudo: 

[11:38] <Geth_> ¦ rakudo: Pushed as a separate commit for bisecting.

[11:38] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1ed2b098eb

[11:53] <AlexDaniel> Zoffix: if you can bring banbot back to life that'd be nice (currently running my own instance)

[12:18] <dogbert17> what is timewastable?

[12:19] <lizmat> dogbert17: an instance of p6bannerbot for now

[12:20] <dogbert17> ah I see

[12:27] <dogbert17> lizmat: btw, how was the Grindelwald movie?

[12:28] <lizmat> if you see the two of them in a row, as we did, it's a lot less than the first, story wise

[12:28] <lizmat> if you're in for the magic: plenty of that  :-)

[12:29] <dogbert17> CGI effect galore then :)

[12:29] <dogbert17> *effects

[12:29] *** brrt joined
[12:30] <lizmat> dogbert17: indeed   :-)

[12:30] *** timewasteable6 sets mode: +v brrt

[12:32] <dogbert17> lizmat: are you aware that t/05-messages/10-warnings.t is complaining?

[12:33] <lizmat> am now, and looking at it

[12:34] <dogbert17> that was hyper quick :)

[12:37] <lizmat> I guess I need to look at the [R~] generating code

[12:37] <lizmat> that should give a name as well

[12:37] <lizmat> argh

[12:40] <lizmat> guess I can't key the cache on the name

[12:55] <Geth_> ¦ rakudo: 21434dda43 | (Elizabeth Mattijsen)++ | src/core/metaops.pm6

[12:55] <Geth_> ¦ rakudo: Correctly handle META_ASSIGN ops that don't have a name

[12:55] <Geth_> ¦ rakudo: 

[12:55] <Geth_> ¦ rakudo: Because they were generated, e.g. [R~] -> [R~]=  dogbert++ for spotting

[12:55] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/21434dda43

[13:04] *** brrt left
[13:09] <lizmat> AlexDaniel: I guess that Travis is not getting on the channel anymore either?

[13:15] <AlexDaniel> lizmat: oh, I think you're right

[13:16] <lizmat> .ask samcv given a hash that has no changes in keys, will it always produce the same order in keys / values or can a second call to .keys produce a different order?

[13:16] <yoleaux> lizmat: I'll pass your message to samcv.

[13:16] <AlexDaniel> although

[13:16] <AlexDaniel> https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-11-15#l3

[13:16] <lizmat> but Cache METAOP_ASSIGN ops also broke Travis

[13:17] <lizmat> and I didn't see that here ?

[13:17] <AlexDaniel> yeah, weird. I don't know

[13:43] <dogbert17> AlexDaniel: is it possible for the bots to figure out when M#720 was fixed?

[13:43] <synopsebot_> M#720 [open]: https://github.com/MoarVM/MoarVM/issues/720 Oops inline fix_coderef NYI triggered with --profile

[13:52] <lizmat> FWIW, I've seen t/spec/S06-advanced/callframe.rakudo.moar fail with register type mismatch error

[13:56] *** Kaiepi left
[13:56] *** Kaiepi joined
[13:57] *** timewasteable6 sets mode: +v Kaiepi

[13:58] *** travis-ci joined
[13:58] *** timewasteable6 sets mode: +v travis-ci

[13:58] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Correctly handle META_ASSIGN ops that don't have a name

[13:58] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/455481502 https://github.com/rakudo/rakudo/compare/1ed2b098ebba...21434dda43c8

[13:58] *** travis-ci left
[13:58] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[13:58] <lizmat> again, a single job failed, restarted

[13:58] <AlexDaniel> c: HEAD chdir ‘sandbox’; run <perl6 --profile -e>, ｢say + ^100 .grep( *.indices("7") == 2 )｣

[13:58] <committable6> AlexDaniel, ¦HEAD(21434dd): «1␤Writing profiler output to profile-1542290336.7779298.html␤»

[13:59] <AlexDaniel> c: 2017.06 chdir ‘sandbox’; run <perl6 --profile -e>, ｢say + ^100 .grep( *.indices("7") == 2 )｣

[13:59] <committable6> AlexDaniel, ¦2017.06: «1␤Writing profiler output to profile-1542290343.84511.html␤»

[13:59] <AlexDaniel> c: 2017.10 chdir ‘sandbox’; run <perl6 --profile -e>, ｢say + ^100 .grep( *.indices("7") == 2 )｣

[13:59] <committable6> AlexDaniel, ¦2017.10: «1␤Writing profiler output to profile-1542290352.65888.html␤»

[13:59] <AlexDaniel> c: 2017.12 chdir ‘sandbox’; run <perl6 --profile -e>, ｢say + ^100 .grep( *.indices("7") == 2 )｣

[13:59] <committable6> AlexDaniel, ¦2017.12: «1␤Writing profiler output to profile-1542290356.16514.html␤»

[13:59] <AlexDaniel> c: 2017.09 chdir ‘sandbox’; run <perl6 --profile -e>, ｢say + ^100 .grep( *.indices("7") == 2 )｣

[13:59] <committable6> AlexDaniel, ¦2017.09: «1␤Writing profiler output to profile-1542290359.05335.html␤»

[13:59] <AlexDaniel> 6c: chdir ‘sandbox’; run <perl6 --profile -e>, ｢say + ^100 .grep( *.indices("7") == 2 )｣

[13:59] <AlexDaniel> dogbert17: sure, as long as we can figure out when it was *not* ok

[13:59] <committable6> AlexDaniel, https://gist.github.com/1851fb2824fb31f348b7dd5ed62580bf

[14:00] <AlexDaniel> dogbert17: is it this? https://gist.github.com/Whateverable/1851fb2824fb31f348b7dd5ed62580bf#file-result-L79

[14:08] *** travis-ci joined
[14:08] *** timewasteable6 sets mode: +v travis-ci

[14:08] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Correctly handle META_ASSIGN ops that don't have a name

[14:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/455481502 https://github.com/rakudo/rakudo/compare/1ed2b098ebba...21434dda43c8

[14:08] *** travis-ci left
[14:10] <lizmat> ok 20 - Exploring call frames until no code object does not crash

[14:10] <lizmat> MoarVM panic: Register types do not match between value and node

[14:10] <lizmat> this appears to only happen under load when running t/spec/S06-advanced/callframe.rakudo.moar repeatedly

[14:11] <lizmat> so it seems to crash in the test for R#1781

[14:11] <synopsebot_> R#1781 [closed]: https://github.com/rakudo/rakudo/issues/1781 callframe info changes inside multi sub

[14:14] <dogbert17> AlexDaniel: yes

[14:15] <dogbert17> lizmat: M#992

[14:15] <synopsebot_> M#992 [open]: https://github.com/MoarVM/MoarVM/issues/992 [⚠ blocker ⚠] MVM_panic in t/02-rakudo/12-proto-arity-count.t

[14:15] <AlexDaniel> bisect: old=2017.08 chdir ‘sandbox’; run <perl6 --profile -e>, ｢say + ^100 .grep( *.indices("7") == 2 )｣

[14:15] <bisectable6> AlexDaniel, Bisecting by exit code (old=2017.08 new=21434dd). Old exit code: 1

[14:16] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/5adf73baea94e9d757fd1d1d33b0b7db

[14:16] <bisectable6> AlexDaniel, (2017-09-04) https://github.com/rakudo/rakudo/commit/13b6a33c20f7deb78f22c16d90113ff9f0843a50

[14:17] <AlexDaniel> mmm no that's not it

[14:19] <dogbert17> was hoping we could get rid of it :)

[14:23] <Geth_> ¦ rakudo: 234e298bf7 | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[14:23] <Geth_> ¦ rakudo: Make metaops with assigning ops between 1.3x and 1.7x as fast

[14:23] <Geth_> ¦ rakudo: 

[14:23] <Geth_> ¦ rakudo: If the left hand side of a meta op is a mutable structure, and we know

[14:23] <Geth_> ¦ rakudo: that the op does an assignment, we don't have to build any result structure

[14:23] <Geth_> ¦ rakudo: as the result is the same as the left hand side then.  This allows for quite

[14:23] <Geth_> ¦ rakudo: some savings.

[14:24] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/234e298bf7

[14:24] <AlexDaniel> dogbert17: I dn't think it is resolved

[14:24] <AlexDaniel> don't*

[14:25] <lizmat> makes @a >>+<< 1 only 2x as slow as $_ += 1 for @a

[14:26] <timotimo> wait, doesn't that have to be @a >>+>> 1?

[14:26] <yoleaux> 14:03Z <thundergnat> timotimo: Ah! I was stuck in Perl5 mode and expected a failed open to set $! That ought to go into traps at least. Thanks!

[14:26] <yoleaux> 14:08Z <thundergnat> timotimo: In particular, these paragraphs are misleading (pertaining to failed open): https://github.com/perl6/doc/blob/master/doc/Language/5to6-perlvar.pod6#L542

[14:26] <timotimo> er

[14:26] <lizmat> timotimo: ah, duh,. yeah

[14:26] <timotimo> also +=

[14:26] <lizmat> makes @a >>+>> 1 only 2x as slow as $_ += 1 for @a

[14:26] <timotimo> typos abound :)

[14:26] <lizmat> makes @a >>+=->> 1 only 2x as slow as $_ += 1 for @a

[14:26] <AlexDaniel> dogbert17: ah no, maybe it is…

[14:27] <lizmat> yt][;jkhdasl;kjghlkdahgeuygfqew,hvsc  :-)

[14:27] <lizmat> time for me to get some afk&

[14:28] <AlexDaniel> bisect: old=2017.08 chdir ‘sandbox’; for ^20 { exit 42 if run(:out, <perl6 --profile -e>, ｢say + ^100 .grep( *.indices("7") == 2 )｣).out.slurp-rest.contains: ‘oops’ }

[14:28] <AlexDaniel> ok that's gonna work better

[14:28] <bisectable6> AlexDaniel, Bisecting by output (old=2017.08 new=21434dd) because on both starting points the exit code is 0

[14:28] <AlexDaniel> nooooooooooo

[14:29] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/c27e67c95b4874010d63fc2dba2aafec

[14:29] <bisectable6> AlexDaniel, (2017-08-21) https://github.com/rakudo/rakudo/commit/5db5b1dbfa0b625130573574e2409972387e9f75

[14:29] <AlexDaniel> bisect: old=2017.08 chdir ‘sandbox’; for ^20 { exit 42 if run(:out, <perl6 --profile -e>, ｢say + ^100 .grep( *.indices("7") == 2 )｣).err.slurp-rest.contains: ‘oops’ }

[14:29] <bisectable6> AlexDaniel, Bisecting by output (old=2017.08 new=234e298) because on both starting points the exit code is 1

[14:29] <AlexDaniel> bisect: old=2017.08 chdir ‘sandbox’; for ^20 { exit 42 if run(:err, <perl6 --profile -e>, ｢say + ^100 .grep( *.indices("7") == 2 )｣).err.slurp-rest.contains: ‘oops’ }

[14:30] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/026c61932cc0346bee2cffdcaafbee0c

[14:30] <bisectable6> AlexDaniel, (2018-01-01) https://github.com/rakudo/rakudo/commit/53a8508000124b8f6bca5c3eab389a4d6c7e57d8

[14:30] <bisectable6> AlexDaniel, Bisecting by exit code (old=2017.08 new=234e298). Old exit code: 42

[14:30] <AlexDaniel> OK now that's a good sign

[14:30] <dogbert17> things are looking up

[14:31] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/cb53d2c60e772a72a77f14613e95ee76

[14:31] <bisectable6> AlexDaniel, (2017-09-13) https://github.com/rakudo/rakudo/commit/7f0367b795162462d6eb3bccfadff349c423bc9a

[14:31] <AlexDaniel> o_o

[14:35] <dogbert17> that can't be the right one

[14:36] <AlexDaniel> yeah, I'm progressing slowly on #whateverable to avoid bot spam here

[14:38] <dogbert17> ok

[14:54] *** Kaiepi left
[14:54] *** Kaiepi joined
[14:55] *** timewasteable6 sets mode: +v Kaiepi

[15:03] <AlexDaniel> https://github.com/rakudo/rakudo/commit/752bb8b381a06dd4d49247d36369fffa3327a641

[15:03] <AlexDaniel> https://github.com/rakudo/rakudo/commit/1d03e9419fb921d9494b153c584ef5f33a17066f

[15:03] <AlexDaniel> dogbert17: so it disappeared after these two

[15:04] <AlexDaniel> and I don't know what it means for that ticket

[15:04] <AlexDaniel> we can probably close it as “can't reproduce anymore” but the underlying issue is probably still there

[15:05] <dogbert17> will you close it or should I?

[15:13] *** |Tux| left
[15:14] <AlexDaniel> dogbert17: I left a comment: https://github.com/MoarVM/MoarVM/issues/720#issuecomment-439074470

[15:15] <AlexDaniel> I don't know if closing it is just closing our eyes on the issue

[15:24] *** |Tux| joined
[16:27] *** brrt joined
[16:27] *** timewasteable6 sets mode: +v brrt

[16:35] *** Zoffix joined
[16:35] *** timewasteable6 sets mode: +v Zoffix

[16:35] *** ChanServ sets mode: +o Zoffix

[16:35] *** p6bannerbot joined
[16:35] *** timewasteable6 sets mode: +v p6bannerbot

[16:35] *** ChanServ sets mode: +o p6bannerbot

[16:36] *** Zoffix sets mode: +vv |Tux| timewasteable6

[16:37] *** Zoffix left
[16:37] *** buggable left
[16:37] *** buggable joined
[16:37] *** ChanServ sets mode: +v buggable

[16:37] *** huggable joined
[16:37] *** ChanServ sets mode: +v huggable

[16:37] *** ZofBot left
[16:37] *** ZofBot joined
[16:37] *** ChanServ sets mode: +v ZofBot

[16:37] *** timewasteable6 sets mode: +v ZofBot

[16:37] *** p6bannerbot sets mode: +v ZofBot

[16:38] *** SourceBaby joined
[16:38] *** ChanServ sets mode: +v SourceBaby

[16:38] *** timewasteable6 sets mode: +v buggable

[16:38] *** p6bannerbot sets mode: +v buggable

[16:38] *** timewasteable6 sets mode: +v huggable

[16:38] *** p6bannerbot sets mode: +v huggable

[16:38] *** timewasteable6 sets mode: +v SourceBaby

[16:38] *** p6bannerbot sets mode: +v SourceBaby

[16:40] <nine> lizmat: it crashes _after_ the test for R#1781, i.e. at the end of the program which is consistent with my suspicion that we try to JIT compile something when we're already shutting down

[16:40] <synopsebot_> R#1781 [closed]: https://github.com/rakudo/rakudo/issues/1781 callframe info changes inside multi sub

[17:06] <samcv> .

[17:06] <yoleaux> 13:16Z <lizmat> samcv: given a hash that has no changes in keys, will it always produce the same order in keys / values or can a second call to .keys produce a different order?

[17:06] <samcv> lizmat, a second call will make the same order

[17:06] <samcv> if no key has been added

[17:09] *** pmurias joined
[17:09] *** p6bannerbot sets mode: +v pmurias

[17:09] *** timewasteable6 sets mode: +v pmurias

[17:13] *** timewasteable6 left
[17:13] <AlexDaniel> Zoffix: thank you!

[17:26] *** robertle_ joined
[17:27] *** p6bannerbot sets mode: +v robertle_

[17:32] *** travis-ci joined
[17:32] *** p6bannerbot sets mode: +v travis-ci

[17:32] <travis-ci> NQP build failed. Paweł Murias '[js] Use jsbi instead of BigInt in most places

[17:32] <travis-ci> https://travis-ci.org/perl6/nqp/builds/455602348 https://github.com/perl6/nqp/compare/c899f4a0842b...861f8d573d19

[17:32] *** travis-ci left
[17:41] <pmurias> what's the procedure to bump MoarVM for nqp?

[17:42] <pmurias> it seems like we are failing a test because it depends on a MoarVM with a fixed bug?

[17:43] <Geth_> ¦ nqp: 115212ed85 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[17:43] <Geth_> ¦ nqp: [MoarVM Bump] Brings 2 commits

[17:43] <Geth_> ¦ nqp: 

[17:43] <Geth_> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.10-75-g1bf132125...2018.10-77-g6236eb5de

[17:43] <Geth_> ¦ nqp: 6236eb5de it's important to use these facts, or else crashes

[17:43] <Geth_> ¦ nqp: 950011e14 Make sure nqp::serializetobuffer always returns a buffer

[17:43] <Geth_> ¦ nqp: review: https://github.com/perl6/nqp/commit/115212ed85

[17:43] <Geth_> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.10-75-g1bf132125...2018.10-77-g6236eb5de

[17:43] <Geth_> ¦ rakudo: 4d8d897b94 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[17:43] <Geth_> ¦ rakudo: [NQP Bump] Brings 5 commits

[17:43] <Geth_> ¦ rakudo: 

[17:43] <Geth_> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.10-108-g08c0de331...2018.10-113-g115212ed8

[17:43] <Geth_> ¦ rakudo: 115212ed8 [MoarVM Bump] Brings 2 commits

[17:43] <Geth_> ¦ rakudo: 861f8d573 [js] Use jsbi instead of BigInt in most places

[17:44] <Geth_> ¦ rakudo: c899f4a08 [js] Fix nqp::serializetobuf

[17:44] <Geth_> ¦ rakudo: 846b8fcf2 [jvm] Implement nqp::serializetobuf

[17:44] <Geth_> ¦ rakudo: 19653bf34 Basic test for nqp::serializetobuf

[17:44] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4d8d897b94

[17:44] <Geth_> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.10-108-g08c0de331...2018.10-113-g115212ed8

[17:44] <AlexDaniel> pmurias: the easiest way is to use z script: https://github.com/zoffixznet/z

[17:44] <AlexDaniel> otherwise you just run `git describe` and put the output into appropriate files

[17:54] *** pmurias left
[17:55] *** pmurias joined
[17:55] *** p6bannerbot sets mode: +v pmurias

[17:59] *** travis-ci joined
[17:59] *** p6bannerbot sets mode: +v travis-ci

[17:59] <travis-ci> NQP build passed. Aleks-Daniel Jakimenko-Aleksejev '[MoarVM Bump] Brings 2 commits

[17:59] <travis-ci> https://travis-ci.org/perl6/nqp/builds/455612960 https://github.com/perl6/nqp/compare/861f8d573d19...115212ed85bc

[17:59] *** travis-ci left
[18:11] *** brrt left
[18:12] *** brrt joined
[18:13] *** p6bannerbot sets mode: +v brrt

[18:19] *** Geth_ left
[18:19] *** p6lert_ left
[18:19] *** Geth joined
[18:19] *** ChanServ sets mode: +v Geth

[18:19] *** synopsebot_ left
[18:19] *** p6lert joined
[18:19] *** synopsebot joined
[18:19] *** ChanServ sets mode: +v synopsebot

[18:19] *** p6bannerbot sets mode: +v Geth

[18:19] *** p6bannerbot sets mode: +v p6lert

[18:20] *** p6bannerbot sets mode: +v synopsebot

[18:27] <Geth> ¦ rakudo: 6fe278941a | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm6

[18:27] <Geth> ¦ rakudo: Introducing R:I.AssociativeIterableKeys

[18:27] <Geth> ¦ rakudo: 

[18:27] <Geth> ¦ rakudo: An iterator that takes an Associative (or anything else that supports

[18:27] <Geth> ¦ rakudo: AT-KEY) and an Iterable, and creates an Iterator of the values of these

[18:27] <Geth> ¦ rakudo: keys in the Associative.

[18:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6fe278941a

[18:27] <Geth> ¦ rakudo: b83179f057 | (Elizabeth Mattijsen)++ | src/core/hash_slice.pm6

[18:27] <Geth> ¦ rakudo: Make hash slices without adverbs about 5x as fast

[18:27] <Geth> ¦ rakudo: 

[18:27] <Geth> ¦ rakudo: By using the new R:I.AssociativeIterableKeys iterator.

[18:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b83179f057

[18:40] <lizmat> that should be noticeable in some applications  :-)   ^^

[19:24] <lizmat> hmmm... is there a way that a single candidate for the same number of iterations, use 181ms vs 27ms ?

[19:37] *** brrt left
[19:49] *** travis-ci joined
[19:49] *** p6bannerbot sets mode: +v travis-ci

[19:49] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make hash slices without adverbs about 5x as fast

[19:49] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/455629501 https://github.com/rakudo/rakudo/compare/4d8d897b94b6...b83179f0571b

[19:49] *** travis-ci left
[19:49] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[19:49] <lizmat> again, only one job failed, restarted

[19:58] <nine> What failures are these?

[20:02] * lizmat didn't look

[20:02] <lizmat> it's all green nonw

[20:02] <lizmat> I assume one of the flappers

[20:05] <lizmat> nine: I think you're assumption may be true

[20:05] <lizmat> I'v added another test to S06-advanced/callframe.t

[20:05] <lizmat> and ran it while spectesting in another window:

[20:05] <lizmat> ok 22 - we've been good

[20:05] <lizmat> MoarVM panic: Register types do not match between value and node

[20:06] <lizmat> so, it cam through the test, and the test after that, and *then* crashed

[20:07] <lizmat> *came

[20:11] <nine> OTOH the error occurs before we reach the end of MVM_interp_run

[20:15] <nine> Furthermore, while it finishes all tests, it doesn't print the FUDGED! message at the end

[20:16] <nine> Well it was a nice theory

[20:32] <lizmat> hmmm... good point  :-(

[20:34] <Geth> ¦ rakudo: e8285c0127 | (Elizabeth Mattijsen)++ | src/core/metaops.pm6

[20:34] <Geth> ¦ rakudo: We need to cache on name

[20:34] <Geth> ¦ rakudo: 

[20:34] <Geth> ¦ rakudo: nqp::objectid is different for each call (not sure why), so that meant

[20:34] <Geth> ¦ rakudo: that the cache was filled with stale data.  Now, if an op requests an

[20:34] <Geth> ¦ rakudo: META_ASSIGN, and it has no name, then it will take a slower path very

[20:34] <Geth> ¦ rakudo: close to what it originally was.  If it *does* have a name, then it will

[20:34] <Geth> ¦ rakudo: be cached on the name of the original op.

[20:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e8285c0127

[20:47] <timotimo> do we want to limit the size of the cache?

[20:52] <lizmat> how many different metaop-assign ops would one use in a program ?

[20:52] <timotimo> dunno, but it'd still not be great to have unlimited growth of caches like that :)

[20:54] <lizmat> true, and actually I am considering priming them for += ~= -=

[20:54] <lizmat> but I'll check first how much that would help  :-)

[20:55] <lizmat> the advantage of priming them would be that we could literally use the op, so "+" instead of "op"

[20:55] <lizmat> that *should* optimize better, shouldn't it ?

[20:56] <timotimo> i'm not entirely sure how you mean that

[20:57] <lizmat> -> \a, \b { a + b } should optimize better than -> \a, \b { a op b }

[20:57] <timotimo> you mean if op is a value closed over?

[20:57] <lizmat> where op is a parameter to the sub returning that block

[20:57] <lizmat> yup

[20:58] <timotimo> hm, actually, i think if we're lucky with the inlining, it can actually inline at least one instance of those ops 

[20:58] <timotimo> but yeah, having a sub specifically for the op in question gives us a different cuid, which will have its own set of spesh candidates and everything

[20:58] <lizmat> so you're saying it doesn't improve things.

[20:59] <timotimo> not entirely sure which of the effects is stronger

[21:00] <lizmat> ah, ok, I see...

[21:01] <timotimo> there's also the question of whether we can generate the exact right ops at compile time, or if that already happens

[21:01] <lizmat> well, I'm looking at why infix:<+> in one case takes (187.64ms) to do 26K invocations

[21:01] <timotimo> if you use the profiler, it could very well be the profiling overhead is too strong to accurately measure

[21:02] <lizmat> and in another situation takes (29.38ms) for the same 26K invocations

[21:02] <timotimo> oh, wow, that's quite a difference

[21:02] <lizmat> yeah... and that difference accounts for the difference I see *without* running the profiler

[21:03] <timotimo> OK

[21:03] <lizmat> basically the difference between %h >>+<< %h and %h >>+=<< %h

[21:03] <lizmat> the latter should be cheaper as we don't need to build a result: the left hand side in that case *is* the result

[21:04] <lizmat> but it's not :-(

[21:04] *** ZzZombo left
[21:05] *** ZzZombo joined
[21:05] *** p6bannerbot sets mode: +v ZzZombo

[21:20] <lizmat> timotimo: I think it's an artefact of it being called from a closed over "op"

[22:12] <Geth> ¦ rakudo: 32ab0d30cb | (Elizabeth Mattijsen)++ | src/core/Hyper.pm6

[22:12] <Geth> ¦ rakudo: Abstract final handling of %h >>op<< %h

[22:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/32ab0d30cb

[22:12] <Geth> ¦ rakudo: 90ac0940aa | (Elizabeth Mattijsen)++ | src/core/metaops.pm6

[22:12] <Geth> ¦ rakudo: Refactor METAOP_ASSIGN_NEW

[22:12] <Geth> ¦ rakudo: 

[22:12] <Geth> ¦ rakudo: It now takes the name and the op, making things simpler and allows it to

[22:12] <Geth> ¦ rakudo: also be used for priming.

[22:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/90ac0940aa

[22:13] *** [Tux] left
[22:17] *** robertle_ left
[22:38] <lizmat> jnthn timotimo: is there a technical reason not to have a built-in &infix:<+=> (and friends) ?

[22:39] <lizmat> if we would have that, we could probably also get rid of  the += rewriting optimization in the static optimizer

[22:39] <lizmat> which seems, with the current optimizations, like a lot of codegen bloat

[22:40] <jnthn> It'd mean that anyone who did and override of + had to also add one for that, no?

[22:46] <lizmat> if it would be: sub infix:<+=>(\a,\b) { a = (a.DEFINITE ?? a !! 0) + b }

[22:46] <lizmat> then it would still refer to whatever the infix:<+> is at moment of execution, no?

[22:46] <jnthn> No

[22:46] <jnthn> It'd refer to the + in the lexical scope where that sub was written

[22:47] <lizmat> but if that would be at the same scope as the systems infix:<+>, then there wouldn't be an issue, would there be?

[22:48] <jnthn> But what if the user's code had its own candidates too?

[22:48] *** MasterDuke joined
[22:48] *** p6bannerbot sets mode: +v MasterDuke

[22:48] *** MasterDuke left
[22:48] *** MasterDuke joined
[22:48] *** herbert.freenode.net sets mode: +v MasterDuke

[22:48] *** p6bannerbot sets mode: +v MasterDuke

[22:48] <lizmat> jnthn: but don't we have that issue already with the METAOP_ASSIGN code returning a Block ?

[22:49] <lizmat> that closes over the op ?

[22:49] <jnthn> I thought that worked by passing in the current op?

[22:50] <lizmat> aaah... ok... 

[22:50] <lizmat> hmmm...

[22:50] <lizmat> ok, maybe I've been looking at an X/Y problem

[22:51] <lizmat> given an op, I would like to know if the op is of a type that does assignment: aka += would be true, + would be false

[22:51] <lizmat> my idea was to add the name to the generated blocks with the closed over ops

[22:51] <lizmat> and then look if the name of an op ends in "=>"

[22:52] <jnthn> In order to do what?

[22:52] <lizmat> in meta ops, don't build a return result if the op was +=

[22:53] <lizmat> as the return result will be the left hand side of the meta-op

[22:53] <lizmat> makes something like %h >>+=<< %h about 25% faster

[22:54] <jnthn> Ah, I see. Interesting.

[22:54] <jnthn> Hmmmm...

[23:01] <lizmat> ok, I see now that the caching is a potential source of issues...

[23:02] <lizmat> going to revert that until we have a better idea on how to find out if an op is a METAOP_ASSIGN or not

[23:06] <lizmat> so how can I quickly introspect if a given block was generated by METAOP_ASSIGN ?

[23:11] <Geth> ¦ rakudo: f7007ac0e6 | (Elizabeth Mattijsen)++ | src/core/metaops.pm6

[23:11] <Geth> ¦ rakudo: Remove METAO_ASSIGN caching

[23:11] <Geth> ¦ rakudo: 

[23:11] <Geth> ¦ rakudo: As discussed on #perl6-dev just now, it may cache a block that has a

[23:11] <Geth> ¦ rakudo: incorrect version of the op, even though the name is the same.

[23:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f7007ac0e6

[23:14] *** [Tux] joined
[23:15] *** p6bannerbot sets mode: +v [Tux]

[23:15] *** pmurias left
[23:42] *** lizmat left
