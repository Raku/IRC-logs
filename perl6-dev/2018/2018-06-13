[00:03] *** j3nnn1 left
[00:10] *** AlexDaniel`` joined
[00:10] *** CIAvash[m] joined
[00:27] *** AlexDaniel left
[00:27] *** AlexDaniel joined
[00:41] *** cognominal left
[02:49] *** shareable6 joined
[04:19] *** MasterDuke left
[05:22] *** squashable6 joined
[05:51] *** skids left
[06:28] *** robertle joined
[06:28] *** brrt joined
[06:58] *** [TuxCM] left
[07:05] *** AlexDaniel left
[07:08] *** [TuxCM] joined
[07:18] *** [TuxCM] left
[07:38] *** brrt left
[08:03] *** lizmat left
[08:11] *** lizmat joined
[08:26] *** cognominal joined
[08:52] *** AlexDaniel joined
[08:55] *** robertle left
[08:59] * AlexDaniel looks at https://github.com/rakudo/rakudo/commit/472f6e48

[09:00] <AlexDaniel> oh, I guess that's why there are many toaster failures with a bunch of stuff about DEPRECATED?

[09:00] <AlexDaniel> will check later today‚Ä¶

[09:01] <AlexDaniel> or maybe https://github.com/rakudo/rakudo/commit/89a4cf0d

[09:17] *** AlexDaniel`` left
[09:17] *** AlexDaniel`` joined
[09:17] <lizmat> yeah, DEPRECATED as a sub was not really meant to be public  :-(

[09:18] <lizmat> or memory is playing tricks on me

[09:18] <lizmat> if it was supposed to be, I case we could add a shim to R:I:DEPRECATED

[09:18] <lizmat> at least for the release

[09:19] <jnthn> Anything people can discover/use, they will :)

[09:19] <yoleaux> 12 Jun 2018 18:26Z <bartolin_> jnthn: fwiw, I increased Xmx (and Xms) in Makefile to 3GB and was able to build rakudo on the jvm backend with HEAD of your rescalar branch. spectest is currently running. With the original value for Xmx it didn't finish stage classpath (I only tried once, though).

[09:19] <yoleaux> 12 Jun 2018 18:29Z <Zoffix> jnthn: FYI: `[Coke] ok, finally got a copy of MasterDuke's CLA, so we're clear to give him the rakudo commit bit.`: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-06-12#l191

[09:29] *** scovit left
[09:32] *** brrt joined
[09:44] *** robertle joined
[09:51] *** brrt left
[09:53] <Geth> ¬¶ rakudo: 874ead515d | (Elizabeth Mattijsen)++ | src/core/Deprecations.pm6

[09:53] <Geth> ¬¶ rakudo: Re-instate DEPRECATED as a global sub for now

[09:53] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/874ead515d

[09:53] <lizmat> AlexDaniel: ^^^ hope that helps with the burned toast

[09:54] <AlexDaniel> cool, thanks

[10:02] <lizmat> m: END say "ended"; LEAVE say "left"; exit   # not sure this is a bug or a feature

[10:02] <camelia> rakudo-moar f2b503785: OUTPUT: ¬´ended‚ê§¬ª

[10:03] <lizmat> jnthn ^^^

[10:04] <jnthn> exit means exit

[10:04] <moritz> m: END say "ended"; LEAVE say "left";

[10:04] <camelia> rakudo-moar f2b503785: OUTPUT: ¬´left‚ê§ended‚ê§¬ª

[10:04] <lizmat> yeah, just noticed it's documented as such: exit does prevent the LEAVE phaser to be executed.

[10:05] <jnthn> We do run `END` blocks, but it doesn't throw an exception and unwind the stack

[10:05] <jnthn> That'd arguably be surprising too, and then we'd get in to "does it cause all the other threads to unwind their stacks"

[10:11] <lizmat> yeah, I realize why it is the way it is.  It's just that if we state "LEAVE is reliably called whenever a scope is exited" is maybe technically true

[10:12] <lizmat> but not conceptually in the minds of many

[10:12] <lizmat> I guess we need to document this better: use "die" if you want LEAVE blocks to execute, using "exit" will not

[10:13] <lizmat> but I guess the docs already say that 

[10:13] <lizmat> ok, I will shut up now  :-)

[10:17] *** brrt joined
[10:19] <timotimo> will we mark DEPRECATED as deprecated in user code?

[10:20] <lizmat> timotimo: yeah, was considering that  :-)

[10:21] <lizmat> but it's a bit tricky, as calling it would call itself  :-)

[10:23] <timotimo> so we'll need to have two versions? :)

[10:26] <lizmat> yeah, I don't think it's worth the effort

[10:35] *** llfourn joined
[10:41] <jnthn> I guess the real DEPRECATED would be in Rakudo::Internals and then the sub DEPRECATED just forwards to that

[10:42] <jnthn> And then we can mark it deprecated I guess :)

[11:04] <jnthn> .tell zoffix Commit access granted :)

[11:04] <yoleaux> jnthn: I'll pass your message to zoffix.

[11:05] <jnthn> .tell MasterDuke I've granted you push access to the Rakudo repo; please let me know if any problems :)

[11:05] <yoleaux> jnthn: I'll pass your message to MasterDuke.

[11:07] <AlexDaniel> o yey

[11:07] <AlexDaniel> üôå

[11:07] <AlexDaniel> welcome, MasterDuke! ‚ô•

[11:08] <Geth> ¬¶ nqp: 6a27f87d2d | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[11:08] <Geth> ¬¶ nqp: Bump MOAR_REVISION for new atomic ops

[11:08] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/6a27f87d2d

[11:08] <Geth> ¬¶ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.05-121-g6302ca74e...2018.05-123-ge485ab3

[11:08] <Geth> ¬¶ nqp: 11cf77d330 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[11:08] <Geth> ¬¶ nqp: Map two new atomic ops for MoarVM backend

[11:08] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/11cf77d330

[11:09] <Geth> ¬¶ rakudo/rescalar: 11 commits pushed by (Jonathan Worthington)++

[11:09] <Geth> ¬¶ rakudo/rescalar: review: https://github.com/rakudo/rakudo/compare/c25f309e994c...2721c3b86d13

[11:09] <Geth> ¬¶ rakudo/rescalar: edc3935998 | (Jonathan Worthington)++ | 2 files

[11:09] <Geth> ¬¶ rakudo/rescalar: Move Scalar CAS internals to NQP

[11:09] <Geth> ¬¶ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/edc3935998

[11:10] <jnthn> lunch &

[11:56] *** AlexDaniel left
[12:06] <stmuk>    

[12:10] *** |Tux| left
[12:10] *** |Tux| joined
[12:19] * jnthn back

[12:26] <tbrowder_> MasterDuke++

[12:31] <tbrowder_> folks, please consider (and vote) on my rakudo PR #1916.

[12:32] <tbrowder_> lizmat is for it and Zoffix is not (and he has a strong argument against it).

[12:38] <timotimo> R#1916

[12:38] <synopsebot_> R#1916 [open]: https://github.com/rakudo/rakudo/pull/1916 Ease maintenance of Actions.nqp, Grammar.nqp

[12:42] <Geth> ¬¶ rakudo/rescalar: 752819868e | (Jonathan Worthington)++ | 2 files

[12:42] <Geth> ¬¶ rakudo/rescalar: Move Scalar atomic store to NQP code

[12:42] <Geth> ¬¶ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/752819868e

[12:42] <Geth> ¬¶ rakudo/rescalar: 645b1b63c6 | (Jonathan Worthington)++ | 2 files

[12:42] <Geth> ¬¶ rakudo/rescalar: Eliminate a bunch of now-dead C code in the extops

[12:42] <Geth> ¬¶ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/645b1b63c6

[12:44] *** scovit joined
[12:56] <jnthn> Hm, wondering if we can get rid of non-rw ContainerDescriptor

[12:56] <jnthn> That is, it being null is what conveys a readonly Scalar

[12:59] <lizmat> that seems like a nice opt, but how many readonly scalars do we have ?

[12:59] <jnthn> All the ones that wrap sub parameters

[12:59] <lizmat> I guess when we do a for @a -> $foo { } 

[12:59] <jnthn> Or block parameters

[12:59] <lizmat> ah, yes, ok

[12:59] <jnthn> Also .item

[13:00] <lizmat> right, so that feels like a very nice opt

[13:00] <jnthn> In theory, yes. In practice, no descriptor passed to p6scalarfromdesc currently results in it sticking a default rw descriptor in there

[13:00] <jnthn> So I'll need to hunt down where that's happening

[13:01] <jnthn> I so far just removed all the places that we created an ro descriptor

[13:01] <jnthn> To see what happens

[13:02] <jnthn> And the answer is a relatively small number of spectest failures, so it feels like it's probably possible with some compensating tweaks

[13:02] *** AlexDaniel joined
[13:24] <jnthn> m: sub foo(Int $x is copy) { $x = 'foo' }; my $y = 42; foo($y)

[13:24] <camelia> rakudo-moar 874ead515: OUTPUT: ¬´Type check failed in assignment to $x; expected Int but got Str ("foo")‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:25] <jnthn> ah, ok

[13:25] <jnthn> Thoguht that might have a type check bug, but then realized I forgot a detail of the code I removed :)

[13:27] <jnthn> Language lesson time; bbiab

[13:38] *** AlexDaniel left
[13:39] *** skids joined
[13:40] *** AlexDaniel joined
[14:51] *** brrt left
[15:08] <jnthn> grmbl, latest version of the "no descriptor = ro" change still has some spectest failures

[15:09] <jnthn> Who'd have thought refactoring the most-used data structure in the language would be tricky... :)

[15:12] <japhb> .oO( "Who knew?  No one knew.  No one could have predicted!" )

[15:18] *** robertle left
[15:22] <jnthn> Argh

[15:23] <jnthn> m: sub foo($x) { $x = 42 }; foo(10)

[15:23] <camelia> rakudo-moar 874ead515: OUTPUT: ¬´Cannot assign to a readonly variable ($x) or a value‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:23] <jnthn> m: sub foo(Int $x) { $x = 42 }; foo(10)

[15:23] <camelia> rakudo-moar 874ead515: OUTPUT: ¬´Cannot assign to an immutable value‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:24] <jnthn> So at least one failure is because in some cases (but certainly not reliably) we have the varname available thorugh the descriptor

[15:36] <jnthn> m: sub foo(Mu $a) { say $a.isa(Scalar) }; my $x; foo($x.VAR)

[15:36] <camelia> rakudo-moar 874ead515: OUTPUT: ¬´True‚ê§¬ª

[15:52] <jnthn> Hurrah, got it down to that one test, whihc I think I can argue is overly-expectant (not to mention that such a check could ideally happen at compile time anyway)

[15:53] <jnthn> This isn't doing the switch to using lack of descriptor as indicating ro yet, just eliminating all the places I could find that create an ro descriptor

[15:57] <timotimo> so if they don't create an ro descriptor, what do they do? a shared ro descriptor?

[15:58] <jnthn> Null descriptor

[15:58] *** brrt joined
[15:59] <timotimo> ah, so no ro descriptor where-ever possible, otherwise the ro descriptor stays?

[16:01] <Geth> ¬¶ rakudo/rescalar: 35ecc99016 | (Jonathan Worthington)++ | 2 files

[16:01] <Geth> ¬¶ rakudo/rescalar: Don't create readonly container descriptors

[16:01] <Geth> ¬¶ rakudo/rescalar: 

[16:01] <Geth> ¬¶ rakudo/rescalar: This way, we'll be able to use the container descriptor's presence as

[16:01] <Geth> ¬¶ rakudo/rescalar: a means to indicate rw-ness, which is a simplification over checking

[16:01] <Geth> ¬¶ rakudo/rescalar: both that *and* then checking the rw flag. This simplification will

[16:01] <Geth> ¬¶ rakudo/rescalar: also aid us in moving what started out as the Rakudo Scalar container

[16:01] <Geth> ¬¶ rakudo/rescalar: spec into the MoarVM core, since then it won't need to be coupled to

[16:01] <Geth> ¬¶ rakudo/rescalar: <‚Ä¶commit message has 11 more lines‚Ä¶>

[16:01] <Geth> ¬¶ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/35ecc99016

[16:01] <jnthn> timotimo: No, it's going way. The above commit should mean we never create one.

[16:01] <jnthn> *away

[16:02] <jnthn> Just seperating out the interesting part of the refactor from the (hopefully) grunt work that now follows

[16:03] <timotimo> oh, OK!

[16:03] <jnthn> I'm also quite happy to be getting rid of C code that made assumptions about the layout of P6opaque :)

[16:03] <timotimo> oh, yes

[16:05] <jnthn> When we move it into MoarVM, we can do it by just configuring the attribute holding the value to fetch and the attribute to null-check for rwness

[16:07] <jnthn> BTW, this also opens the door to us implementing a kind of container that has storage, but lets you do some custom logic on STORE

[16:08] <jnthn> Which'd handle some use cases of Proxy without having the costly many-FETCH thing happen

[16:09] <timotimo> nice.

[16:13] <Geth> ¬¶ rakudo/rescalar: 2e78e6b2b6 | (Jonathan Worthington)++ | 2 files

[16:13] <Geth> ¬¶ rakudo/rescalar: Start switching to null descriptor to meaning ro

[16:13] <Geth> ¬¶ rakudo/rescalar: 

[16:13] <Geth> ¬¶ rakudo/rescalar: This updates the code behind the `isrwcont` and various other things

[16:13] <Geth> ¬¶ rakudo/rescalar: inside of the VM that care about rw-ness (such as the multi cache) to

[16:13] <Geth> ¬¶ rakudo/rescalar: just use the presence or absence of a container descriptor to decide

[16:13] <Geth> ¬¶ rakudo/rescalar: rw or not for Scalar.

[16:13] <Geth> ¬¶ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/2e78e6b2b6

[16:15] <jnthn> No extra regressions from that part

[16:21] <Geth> ¬¶ rakudo/rescalar: 968b73dfa0 | (Jonathan Worthington)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[16:21] <Geth> ¬¶ rakudo/rescalar: Stop checking the ContainerDesciptor rw flag

[16:21] <Geth> ¬¶ rakudo/rescalar: 

[16:21] <Geth> ¬¶ rakudo/rescalar: The assignment logic now also simply uses the absence of the

[16:21] <Geth> ¬¶ rakudo/rescalar: descriptor to mean it is writable.

[16:21] <Geth> ¬¶ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/968b73dfa0

[16:23] *** robertle joined
[16:24] <timotimo> "35 additions and 53 deletions" :)

[16:25] <ilmari> shouldn't that be s/ab/pre/?

[16:25] <jnthn> ilmari: oops, yes

[16:26] <timotimo> that's for abpre ski

[16:27] *** huggable joined
[16:27] *** ChanServ sets mode: +v huggable

[16:28] *** lizmat left
[16:34] <jnthn> Seems I've now got rid of the rw flag entirely, thus shrinking ContainerDescriptor too

[16:34] *** j3nnn1 joined
[16:34] *** AlexDaniel left
[16:37] <Geth> ¬¶ rakudo/rescalar: c002ff1e30 | (Jonathan Worthington)++ | 5 files

[16:37] <Geth> ¬¶ rakudo/rescalar: Remove now-unused `rw` from ContainerDescriptor

[16:37] <Geth> ¬¶ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/c002ff1e30

[16:44] <jnthn> Next up will be to get the JVM fixed up for these changes

[16:44] <jnthn> *JVM backend

[16:45] <jnthn> And then I can dig in to the elimination of $!whence

[16:45] <jnthn> And then spesh plugins :)

[16:46] *** ggoebel left
[16:49] <brrt> jnthn++

[17:05] *** cognominal left
[17:05] *** ggoebel joined
[17:11] *** lizmat joined
[17:13] <lizmat> weekly: https://news.ycombinator.com/item?id=17303557

[17:13] <notable6> lizmat, Noted!

[17:26] <Geth> ¬¶ rakudo/pod-slang-tbrowder: 94 commits pushed by 14 authors

[17:26] <Geth> ¬¶ rakudo/pod-slang-tbrowder: review: https://github.com/rakudo/rakudo/compare/faaa2f2499de...874ead515dfe

[17:28] *** PufferBot left
[17:31] *** Zoffix joined
[17:38] <Zoffix> New blog post: "A Call to Action: Polish Perl 6 First Steps Experience": https://rakudo.party/post/A-Call-To-Action--Polish-Perl-6-First-Steps-Experience

[17:42] <lizmat> Zoffix++

[17:42] <lizmat> weekly: https://rakudo.party/post/A-Call-To-Action--Polish-Perl-6-First-Steps-Experience

[17:42] <notable6> lizmat, Noted!

[17:43] <jnthn> .oO( Why Polish? Why not Czech? :P )

[17:44] <lizmat> I guess Zoffix wants us to Czech it out ?

[17:44] <Zoffix> :)

[17:49] <timotimo> #CzechALook

[17:56] *** cognominal joined
[17:57] *** Zoffix left
[17:58] <jnthn> Zoffix++ # good initiative :)

[17:58] <jnthn> Maybe I'll suffer a look at the Windows build :)

[17:58] <jnthn> And see if I can do anything

[18:00] <timotimo> i was able to build a 32bit one using appveyor + RDP, but for some reason i had to cut out the mathematical symbols for pi and e

[18:00] <jnthn> o.O

[18:00] <timotimo> the parser would complain if i left them in

[18:00] <timotimo> also, it was just a regular rakudo build, not a rakudo star build or msi

[18:03] <geekosaur> if it needs to bootstrap using the older version, the old parser wasn't handling unicode in the setting yet?

[18:03] <timotimo> no, that was the core setting, that's always the current parser

[18:28] *** AlexDaniel joined
[18:41] *** dogbert17 joined
[18:42] <dogbert17> timotimo: shouldn't https://github.com/rakudo/rakudo/issues/1886 be labeled 'testneeded' ?

[18:51] <lizmat> dogbert17: label added

[18:53] <dogbert17> lizmat++

[18:54] <timotimo> thank you

[18:58] *** brrt left
[19:08] <lizmat> https://stackoverflow.com/questions/50844569/how-do-i-export-a-leave-phaser-to-the-outer-scope-of-a-use-statement

[19:08] <lizmat> afk for a bit&

[19:32] <jnthn> Pretty sure there's no way to do that, or at leaest if there is it's an epic unsupported hack :)

[19:36] *** dct joined
[19:45] *** robertle left
[19:48] *** Zoffix joined
[19:48] <Zoffix> DID SOMEONE SAY AN EPIC HACK!?

[19:48] <lizmat> jnthn: is there a reason to not make something like that possible somehow ?

[19:49] <jnthn> lizmat: I sorta wonder if it's in macro-like teritory :)

[19:49] <lizmat> oh, that it definitely is

[19:49] <Zoffix> m: BEGIN '/tmp/20180713'.IO.mkdir.add('Foo.pm6').spurt: ÔΩ¢sub EXPORT { $*W.add_phaser: $*LANG, 'LEAVE', { say 'meow' }; {} }ÔΩ£; use lib </tmp/20180713>; { use Foo; say "cat says" }; { use Foo; say "dog says" }; { use Foo; say "chicken says" }

[19:49] <camelia> rakudo-moar 874ead515: OUTPUT: ¬´cat says‚ê§meow‚ê§dog says‚ê§meow‚ê§chicken says‚ê§meow‚ê§¬ª

[19:50] <timotimo> that situation is very similar to the "stand back, i know regular expressions" comic

[19:50] <geekosaur> also fits "unsupported", I suspect :p

[19:50] <lizmat> actually, if that works  :-)

[19:51] <Zoffix> Yeah, that's totally unsuppoorted

[19:51] <Zoffix> :D

[19:52] <lizmat> hmmm... setting $/ to $*LANG works ?

[19:53] <Zoffix> m: BEGIN say $*LANG.^name

[19:53] <camelia> rakudo-moar 874ead515: OUTPUT: ¬´Perl6::Grammar‚ê§¬ª

[19:54] <Zoffix> yeah, 'cause IIRC $/ would be Perl6::Grammar object and $*LANG is that object. Dunno if it's actually needed there, it's prolly used just for :node annotations

[19:55] * lizmat is going to run with that :-)

[19:57] <gfldex> is $*W speced?

[19:59] <Zoffix> gfldex: nope

[20:03] *** Zoffix left
[20:15] <lizmat> wee, Zoffix++  It works   :)

[20:18] <lizmat> argh no  :-(

[20:19] <lizmat> whee, it does  :-)

[20:20] <lizmat> fg

[20:20] <geekosaur> No jiush job.

[20:20] <geekosaur> ...

[20:20] <geekosaur> such

[20:20] <geekosaur> way to wreck it >.>

[20:23] <timotimo> fg: there are no suitable jobs

[20:24] <AlexDaniel> bash: fg: current: no such job

[20:24] <AlexDaniel> NEED MORE COLONS

[20:26] * geekosaur just went with ancient csh :p

[20:26] <timotimo> mine's fish

[20:26] <geekosaur> and then botched it anyway because fingers, what fingers

[21:05] *** cognominal left
[21:10] *** MasterDuke joined
[21:10] *** cognominal joined
[21:42] *** skids left
[22:35] *** dct left
[22:38] *** lizmat left
[22:53] *** lizmat joined
[23:18] *** skids joined
[23:26] *** j3nnn1 left
