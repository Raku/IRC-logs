[00:06] *** AlexDaniel left
[00:08] *** AlexDaniel joined
[00:08] *** p6bannerbot sets mode: +v AlexDaniel

[00:09] <[Coke]> Yes. still need to act on my end, apologies.

[00:09] <MasterDuke> timotimo: heh, i just got back to my computer, found it in gdb at a breakpoint, and couldn't remembered why that was

[00:10] *** MasterDuke_ joined
[00:10] *** p6bannerbot sets mode: +v MasterDuke_

[00:13] *** MasterDuke left
[00:14] *** MasterDuke_ is now known as MasterDuke

[00:14] *** MasterDuke left
[00:14] *** MasterDuke joined
[00:14] *** herbert.freenode.net sets mode: +v MasterDuke

[00:14] *** p6bannerbot sets mode: +v MasterDuke

[00:15] *** lizmat left
[00:18] <MasterDuke> timotimo: do you remember why you were suggesting gdb? i assume it was something to do with my `Cannot invoke this object (REPR: P6opaque; NQPMu)` error

[00:19] <timotimo> right

[00:19] <timotimo> to hopefully figure out where the null came from

[00:19] <MasterDuke> ah, that would be helpful

[00:22] <MasterDuke> i tried dumping bytecode, that just caused an error in gdb

[00:23] <timotimo> ugh, yeah

[00:23] <timotimo> it's sometimes rather hard to get calling code from inside gdb to work; there's a fiddlyness that i have not a clue how to figure out properly

[00:24] <timotimo> you can write python code that uses the gdb python API to do some cool stuff, but ... when i wrote the "heap analyzer" it was surprisingly slow

[00:24] <timotimo> and using the API correctly is also very fiddly

[00:25] <MasterDuke> hm, anything i can just print out that'll be helpful?

[00:25] <timotimo> hmm

[00:25] <timotimo> well, it'd be awesome if we could use the debugserver stuff from inside gdb

[00:26] <timotimo> but i'm not sure if we can "stop some threads but not others" in gdb?

[00:27] <MasterDuke> timotimo: like this? http://sourceware.org/gdb/onlinedocs/gdb/Non_002dStop-Mode.html#Non_002dStop-Mode

[00:27] <timotimo> whoa

[00:28] <timotimo> amazing

[00:28] <timotimo> OK, but there's a little problem - easy to solve, but a stumbling block none-the-less

[00:29] <MasterDuke> oh?

[00:29] <timotimo> well, the debugserver won't touch a thread that hasn't reported itself as successfully interrupted

[00:29] <timotimo> which it won't when gdb interrupts it

[00:29] <timotimo> but i think it's enough to just write the tc's gc_status (or what it's called) to the right value

[00:30] <timotimo> so maybe this is even a way to go!

[00:31] <MasterDuke> cool. what do i need to do?

[00:33] <timotimo> one sec

[00:34] <MasterDuke> sure

[00:35] <timotimo> going through the debugserver signaling and state management code

[00:35] <timotimo> that was a bit hairy to get right already in the first place ;)

[00:35] <timotimo> and now it's been months

[00:36] <timotimo> so normally the debugserver sets the gc_status to have the MVMSuspendState_SUSPEND_REQUEST

[00:36] <timotimo> that causes the "check if we should gc" and "mark thread blocked" pieces of code to react to that suspend request

[00:37] <timotimo> and we call MVM_gc_mark_thread_blocked, possibly just to set the right values?

[00:38] <timotimo> OK, then the gc_status has to be set to MVMGCStatus_UNABLE | MVMSuspendState_SUSPENDED

[00:38] <timotimo> when that's set, the debugserver will dare do stuff

[00:38] <timotimo> but if you continue running the thread that has these values set, it will probably get quite a bit confused

[00:39] <timotimo> whether you connect to the debugservre before or after doesn't matter, i don't think

[00:41] <MasterDuke> sadly i'm going to need a refresher on how to use the debugserver

[00:42] <timotimo> https://github.com/edumentab/p6-app-moarvm-debug - part of the beta use instructions should help you

[00:42] <timotimo> i might go to bed rather soon

[00:42] <timotimo> though you can skip steps 7 through 9

[00:45] <MasterDuke> ok, so gdb the build command with a --debug-port and --debug-suspend added>

[00:45] <MasterDuke> ?

[00:45] <timotimo> right

[00:46] <MasterDuke> run until my nqp::asec breakpoint, then what?

[00:47] <timotimo> right, only that thread is stopped now?

[00:47] <timotimo> oh, this is breaking during building rakudo?

[00:47] <timotimo> in that case you'll want to have a separate perl6 so you can run the debugger client

[00:48] <MasterDuke> i have a system perl6

[00:49] <timotimo> good

[00:50] <timotimo> you'll want to have App::MoarVM::Debugger installed

[00:50] <timotimo> er

[00:50] <timotimo> App::MoarVM::Debug

[00:56] <timotimo> important to know that most commands take an argument for which thread to apply to

[00:56] <timotimo> but you can use "assume thread X" to no longer have to write those out

[00:56] <timotimo> that makes things nicer usually

[00:56] <timotimo> "all lex THREADNUM" is a good thing to start

[00:56] <timotimo> oh

[00:56] <timotimo> what i haven't been considering

[00:57] <timotimo> the debugserver doesn't do locals, and in nqp code, a whole lot of things are lowered to locals

[00:57] <timotimo> things being lexicals

[00:58] <MasterDuke> `===SORRY!=== Missing serialize REPR function for REPR VMException (BOOTException)`, maybe my system perl6 is too old?

[00:58] <timotimo> oh, you may have to disable tests in zef when trying to install the debugger or its library

[00:59] <MasterDuke> 2018.03

[00:59] <MasterDuke> i didn't actually install anything, just running with a bunch of -I

[00:59] <timotimo> oh, i think that ought to work

[00:59] <timotimo> do you have Terminal::ANSIColor, too?

[00:59] <timotimo> perhaps the conditional loading of that is b0rken

[01:04] <MasterDuke> ah, that fixed it

[01:04] <MasterDuke> `Connecting to MoarVM remote on localhost port 9999 success!`

[01:04] <timotimo> filed an issue

[01:05] <MasterDuke> hm, but my gdb session doesn't seem to be doing anything

[01:05] <timotimo> "help" is a good command to try in the repl

[01:05] <timotimo> right, there is no integration between the debugserver and gdb

[01:06] <MasterDuke> well, i mean it doesn't seem to have actually started building rakudo

[01:07] <timotimo> oh, haha

[01:07] <MasterDuke> oh, do i need to send a `resume` or something like that from the debug server?

[01:07] <timotimo> --debug-suspend means it starts suspended

[01:07] <timotimo> so you'll ... yes

[01:07] <timotimo> sorry about that

[01:07] <MasterDuke> heh, now it's going

[01:08] <MasterDuke> though the debug server printed a "False"

[01:11] <timotimo> probably meaningless debug prints left over

[01:11] <timotimo> yes, indeed, it prints out the return value of $remote.resume

[01:11] <timotimo> which is a "did it work" response

[01:12] <timotimo> https://github.com/MoarVM/MoarVM/blob/master/docs/debug-server-protocol.md - since the moar-remote isn't a terribly thick layer on top of the debug protocol, this document could help you get an intuition of what you can do

[01:12] <timotimo> you'll only need to look at the Message Types section

[01:13] <timotimo> there's two env vars that'll let you get a lot more verbosity out of the debugserver on the moarvm side of things, MDS_PROTOCOL and MDS_NETWORK, MDS stands for Moar Debug Spam

[01:13] <timotimo> the network one is very spammy and not very useful

[01:13] <timotimo> i'll head to bed; i hope you can figure something out

[01:13] <MasterDuke> do the thread numbers in the debug server map to the thread numbers gdb says?

[01:13] <timotimo> umm

[01:14] <timotimo> i think they map to something inside the tc or maybe the thread object

[01:14] <MasterDuke> ah, ok

[01:14] <timotimo> check debugserver.c 's function send_thread_info

[01:15] <timotimo> right, i can see that the id it sends belongs to the MVMThread object

[01:15] <timotimo> which you can reach from the tc, too

[01:15] <timotimo> tc->thread_object

[01:15] <timotimo> no

[01:15] <timotimo> tc->thread_obj

[01:16] <timotimo> good night, good luck!

[01:21] <MasterDuke> thanks, later...

[03:23] <MasterDuke> timotimo: i got distracted and didn't get to do much debugging, but this seems to say that `$op` is fine

[03:24] <MasterDuke> Frame 1 - optimize_for_range (gen/moar/Perl6-Optimizer.nqp:2278) - handle: 86

[03:24] <MasterDuke>     55 Perl6::Optimizer self                   concrete

[03:24] <MasterDuke>     88 QAST::Op         $callee                concrete

[03:24] <MasterDuke>     89 QAST::Op         $op                    concrete

[03:25] <MasterDuke> hm, well maybe it can be concrete and an NQPMu at the same time...

[03:29] <MasterDuke> timotimo: some info about 89 https://gist.github.com/MasterDuke17/91c585ccea88401789d7275994973fc6

[04:22] *** MasterDuke left
[05:53] *** [Tux] left
[06:07] *** [Tux] joined
[06:07] *** p6bannerbot sets mode: +v [Tux]

[06:20] *** patrickb joined
[06:20] *** p6bannerbot sets mode: +v patrickb

[06:20] *** brrt joined
[06:21] *** p6bannerbot sets mode: +v brrt

[06:44] *** jsimonet left
[07:47] *** lizmat joined
[07:48] *** p6bannerbot sets mode: +v lizmat

[07:48] <lizmat> Files=1251, Tests=76080, 340 wallclock secs (15.69 usr  5.46 sys + 2389.12 cusr 229.34 csys = 2639.61 CPU)

[07:57] <brrt> \o

[08:28] *** Ven` joined
[08:29] *** p6bannerbot sets mode: +v Ven`

[08:30] *** robertle joined
[08:31] *** p6bannerbot sets mode: +v robertle

[08:40] *** Ven` left
[08:42] *** Ven` joined
[08:43] *** p6bannerbot sets mode: +v Ven`

[08:55] <|Tux|> MoarVM oops: Unsupported unsigned cast 8 -> 4

[08:58] <|Tux|> Rakudo version 2018.08-84-g78bebc7ae - MoarVM version 2018.08-47-g891d5c02e

[08:58] <|Tux|> csv-test-xs-20      0.424 -  0.444

[08:58] <|Tux|> test-t --race       0.897 -  0.922

[08:58] <|Tux|> test-t              2.085 -  2.164

[08:58] <|Tux|> test                8.630 -  8.990

[08:58] <|Tux|> test-t-20 --race   11.923 - 12.378

[08:58] <|Tux|> csv-parser         22.018 - 22.405

[08:58] <|Tux|> test-t-20          36.587 - 37.303

[08:59] <|Tux|> Those unsupported casts are all in Inline::Perl5. I however have to make a remark there. It might not be new

[09:00] <brrt> oh, huh, that's weird

[09:00] <|Tux|> I upgraded my openSUSE from 42.3 to 15.0 (their versioning schedule sucks), and installed a complete new perl-5.28.0

[09:00] <brrt> Tux, that's fairly sure my fault

[09:00] <|Tux|> Biggest change from previous perl (5.26.2) is that I now built it with -Duseshrplib

[09:08] <brrt> |Tux| fix coming up...

[09:12] <|Tux|> :)

[09:13] * |Tux| is already relieved that the timings didn't go awry after the system update

[09:14] <brrt> we may want a version bump after this version

[09:15] *** yoleaux left
[09:26] *** brrt left
[09:36] *** Ven` left
[09:41] *** brrt joined
[09:42] *** p6bannerbot sets mode: +v brrt

[10:30] <Geth> ¦ nqp: 02214c556f | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[10:30] <Geth> ¦ nqp: [MoarVM Bump] Brings 11 commits

[10:30] <Geth> ¦ nqp: 

[10:30] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.08-46-gfb8976a...2018.08-57-g8c6088d

[10:30] <Geth> ¦ nqp: 8c6088d [JIT] Be more strict about what is or isn't a reference

[10:30] <Geth> ¦ nqp: 5fcef04 Merge remote-tracking branch 'jstuder/exprjit_09_05_18'

[10:30] <Geth> ¦ nqp: 722f093 [JIT] Add down-cast operations to cast_unsigned_load_addr

[10:30] <Geth> ¦ nqp: 985bf64 Fix error in objprimunsigned template

[10:30] <Geth> ¦ nqp: <…commit message has 7 more lines…>

[10:30] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/02214c556f

[10:30] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.08-46-gfb8976a...2018.08-57-g8c6088d

[10:30] <Geth> ¦ rakudo: 0a2d8321cc | (Zoffix Znet)++ | tools/build/NQP_REVISION

[10:30] <Geth> ¦ rakudo: [NQP Bump] Brings 2 commits

[10:30] <Geth> ¦ rakudo: 

[10:30] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.08-47-g31c92db...2018.08-49-g02214c5

[10:30] <Geth> ¦ rakudo: 02214c5 [MoarVM Bump] Brings 11 commits

[10:30] <Geth> ¦ rakudo: ae3f01a [js] Partial shiftjs support

[10:30] <Geth> ¦ rakudo: 

[10:30] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.08-46-gfb8976a...2018.08-57-g8c6088d

[10:30] <Geth> ¦ rakudo: <…commit message has 11 more lines…>

[10:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0a2d8321cc

[10:30] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.08-47-g31c92db...2018.08-49-g02214c5

[11:10] *** yoleaux joined
[11:11] *** p6bannerbot sets mode: +v yoleaux

[11:17] <Geth> ¦ roast: 1baf86664e | (Zoffix Znet)++ | S03-operators/div.t

[11:17] <Geth> ¦ roast: [v6.d REVIEW] Test actual return type of `div`

[11:17] <Geth> ¦ roast: 

[11:17] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/7cf152404

[11:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1baf86664e

[11:27] <Geth> ¦ roast: 3631536b36 | (Zoffix Znet)++ | S03-operators/div.t

[11:27] <Geth> ¦ roast: [v6.d REVIEW] Precisify div tests

[11:27] <Geth> ¦ roast: 

[11:27] <Geth> ¦ roast: - Test actual return values for Rats

[11:27] <Geth> ¦ roast: - Fully test returned failures and .handle them to avoid warnings

[11:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3631536b36

[11:43] *** Ven` joined
[11:44] *** p6bannerbot sets mode: +v Ven`

[11:51] *** ZzZombo left
[12:03] *** brrt left
[12:06] <Geth> ¦ nqp: a880396e09 | (Paweł Murias)++ | src/vm/js/nqp-runtime/dbcs-codec.js

[12:06] <Geth> ¦ nqp: [js] Support replacing/throw exception when decoding/encoding windows-932

[12:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a880396e09

[12:06] <Geth> ¦ nqp: f652b66c65 | (Paweł Murias)++ | t/nqp/082-decode.t

[12:06] <Geth> ¦ nqp: Test encoding windows-932

[12:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f652b66c65

[12:12] *** ZzZombo joined
[12:12] *** p6bannerbot sets mode: +v ZzZombo

[12:19] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/09/11/2018-37-a-detour-of-damian/

[12:45] *** brrt joined
[12:46] *** p6bannerbot sets mode: +v brrt

[13:19] *** lucasb joined
[13:20] *** p6bannerbot sets mode: +v lucasb

[13:38] *** Ven` left
[13:39] *** pmurias joined
[13:39] *** p6bannerbot sets mode: +v pmurias

[13:40] *** brrt left
[13:50] *** Ven` joined
[13:50] *** p6bannerbot sets mode: +v Ven`

[14:41] <AlexDaniel> lizmat+++

[14:45] <timotimo> lizmat++

[14:52] <jdv79> lizmat++ # very nice

[14:53] *** undersightable6 left
[14:53] *** undersightable6 joined
[14:53] *** ChanServ sets mode: +v undersightable6

[14:54] *** p6bannerbot sets mode: +v undersightable6

[14:56] *** cognominal-p6 joined
[14:57] *** p6bannerbot sets mode: +v cognominal-p6

[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:10] *** cognominal-p6 left
[15:10] *** cognominal-p6 joined
[15:11] *** p6bannerbot sets mode: +v cognominal-p6

[15:12] *** lizmat left
[15:13] *** lizmat joined
[15:14] *** p6bannerbot sets mode: +v lizmat

[15:30] *** patrickb left
[15:57] <Geth> ¦ rakudo: d970c2b336 | (Elizabeth Mattijsen)++ | src/core/Range.pm6

[15:57] <Geth> ¦ rakudo: Fix Range.reverse.count-only

[15:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d970c2b336

[16:01] <AlexDaniel> greppable6: \.fc

[16:01] <greppable6> AlexDaniel, 16 lines, 9 modules: https://gist.github.com/9a3d18ad34eb89b1989dbc25bb4e6a85

[16:02] *** brrt joined
[16:03] *** p6bannerbot sets mode: +v brrt

[16:28] *** travis-ci joined
[16:28] *** p6bannerbot sets mode: +v travis-ci

[16:28] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fix Range.reverse.count-only'

[16:28] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/427272200 https://github.com/rakudo/rakudo/compare/0a2d8321cc87...d970c2b336b4

[16:28] *** travis-ci left
[16:31] *** Ven` left
[16:38] *** lucasb left
[17:13] *** Zoffix joined
[17:13] *** p6bannerbot sets mode: +v Zoffix

[17:14] <Zoffix> lizmat: what do fixes like d970c2b336 fix? I wanted to write a test, but can't repro broken behaviour

[17:14] <Zoffix> c: HEAD~10,d970c2b336b with ^10 .reverse.iterator { .pull-one xx 10; say .count-only }

[17:14] <committable6> Zoffix, ¦HEAD~10,d970c2b: «0␤»

[17:15] <Zoffix> That's with the assumption that R#2075 is to be resolved that .count/bool-only are illegal to call after receiving IterationEnd

[17:15] <synopsebot> R#2075 [open]: https://github.com/rakudo/rakudo/issues/2075 [6.d review][@LARRY] Meaning of `.bool-only`/`.count-only` after receiving IterationEnd ?

[17:16] <Zoffix> Ah

[17:16] <Zoffix> lizmat: nevermind. It needs to be 11 pulls, not 10, even with R#2075 resolved that way :)

[17:16] <Zoffix> And then I see the bug

[17:16] <Zoffix> well, the bug I wanted to cover

[17:17] *** Zoffix left
[17:22] *** Zoffix joined
[17:22] *** p6bannerbot sets mode: +v Zoffix

[17:22] <Zoffix> Oh, wait no, at 11 pulls you get IterationEnd, and calling .count-bool is illegal

[17:24] <Zoffix> Well, illegal if we resolve 2075 that way, I mean

[17:26] <Zoffix> lizmat: is there a benefit to allowing count-only/bool-only after pulling IterationEnd? I see the downside: the cost of all those extra operations. 

[17:26] <Zoffix> c: HEAD~10 ^10 .reverse.skip(10).elems.say

[17:26] <committable6> Zoffix, ¦HEAD~10: «0␤»

[17:26] <Zoffix> s: ^10 .reverse.skip(10), 'iterator', \()

[17:26] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/d970c2b33/src/core/Seq.pm6#L18

[17:27] <Zoffix> s: ^10 .reverse.skip(10).iterator, 'count-only', \()

[17:27] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/d970c2b33/src/core/Range.pm6#L192

[17:30] <Zoffix> c: HEAD~100 my $i := ^10 .reverse.iterator; $i.pull-one xx 11; Seq.new($i).skip(-5).iterator.elems.say

[17:30] <committable6> Zoffix, ¦HEAD~100: «1␤»

[17:32] <Zoffix> c: HEAD~100 ^10 .reverse.skip(11).skip(-5).elems.say

[17:32] <committable6> Zoffix, ¦HEAD~100: «0␤»

[17:32] <Zoffix> Well, penultimate one is almost a bug (when written right, it gives -1), but you could make an argument that making a new Seq from an exhausted iterator is illegal.

[17:34] <Zoffix> And R#2075 can be rephrased: "Exhauster of the iterator must ensure the iterator is not given for consumtion to anything else"

[17:34] <synopsebot> R#2075 [open]: https://github.com/rakudo/rakudo/issues/2075 [6.d review][@LARRY] Meaning of `.bool-only`/`.count-only` after receiving IterationEnd ?

[17:34] <Zoffix> And making a new seq, calls to .bool-only/.count-only, all fall under that category

[17:34] <Zoffix> And we don't have to do extra work in these methods to keep track of whether the iterator has been exhausted

[17:46] <Geth> ¦ roast: d4a2e89304 | (Zoffix Znet)++ | packages/Test/Util.pm6

[17:46] <Geth> ¦ roast: Remove after-IterationEnd iter opt tests

[17:46] <Geth> ¦ roast: 

[17:46] <Geth> ¦ roast: Don't put contested behaviour into propspec. Removing until

[17:46] <Geth> ¦ roast: R#2075 https://github.com/rakudo/rakudo/issues/2075 is resolved

[17:46] <synopsebot> R#2075 [open]: https://github.com/rakudo/rakudo/issues/2075 [6.d review][@LARRY] Meaning of `.bool-only`/`.count-only` after receiving IterationEnd ?

[17:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d4a2e89304

[17:48] <Geth> ¦ roast: zoffixznet++ created pull request #470: Cover more iterator opt tests

[17:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/470

[17:48] *** brrt left
[17:48] <Geth> ¦ roast: 09f561314f | (Zoffix Znet)++ | MISC/bug-coverage.t

[17:48] <Geth> ¦ roast: Cover more iterator opt tests

[17:48] <Geth> ¦ roast: 

[17:48] <Geth> ¦ roast: Covers bugs fixed by

[17:48] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/64ddacab8f

[17:48] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/9738dfbf21

[17:48] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/d1e80dfe28

[17:48] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/9ff1736761

[17:48] <Geth> ¦ roast: 

[17:48] <Geth> ¦ roast: Merge blocked by R#2075 https://github.com/rakudo/rakudo/issues/2075

[17:48] <Geth> ¦ roast: as some of the opt methods return incorrect values after IterationEnd

[17:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/09f561314f

[17:48] <Geth> ¦ roast: c1c3453746 | (Zoffix Znet)++ (committed using GitHub Web editor) | MISC/bug-coverage.t

[17:48] <Geth> ¦ roast: Merge pull request #470 from perl6/moaaar-iterator-cover

[17:48] <Geth> ¦ roast: 

[17:48] <Geth> ¦ roast: Cover more iterator opt tests

[17:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c1c3453746

[17:51] <AlexDaniel> well, good news is that I'm working on Toaster upgrade

[17:52] <AlexDaniel> and bonus good (or bad?) news is that it requires some refactoring of Whateverable

[17:53] <AlexDaniel> wow Whateverable codebase turned into quite some shite over the time

[17:56] <AlexDaniel> for those wondering what and why, I want it to automatically run bisectable across all 1000+ modules so that I wouldn't have to

[17:57] <Zoffix> 0.o

[17:57] <Zoffix> AlexDaniel++

[17:59] <Geth> ¦ roast: 3d88f34a26 | (Zoffix Znet)++ | MISC/bug-coverage.t

[17:59] <Geth> ¦ roast: Cover more iterator opts

[17:59] <Geth> ¦ roast: 

[17:59] <Geth> ¦ roast: For iterators fixed in commits in this range:

[17:59] <Geth> ¦ roast: https://github.com/rakudo/rakudo/compare/000ac81e606417ea...d970c2b336b43dc25

[17:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3d88f34a26

[18:02] <Zoffix> lizmat++ # weekly

[18:03] *** Zoffix left
[18:45] <Geth> ¦ rakudo: f5ebad98a1 | (Elizabeth Mattijsen)++ | src/core/metaops.pm6

[18:45] <Geth> ¦ rakudo: Remove Predictiveness on 2 iterators

[18:45] <Geth> ¦ rakudo: 

[18:45] <Geth> ¦ rakudo: They appear to warrant further inspection for which I do not have the

[18:45] <Geth> ¦ rakudo: energy at the moment.  Since this is just removing a optimization for

[18:45] <Geth> ¦ rakudo: probably very few real-life cases, I think this is fine for now.

[18:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f5ebad98a1

[18:47] <lizmat> So I just came up with the following idea: create a LazyIterator role that has a "method is-lazy(--> True) { }"

[18:48] <lizmat> that would allow us to use typechecking to see if an iterator is lazy or not

[18:48] <lizmat> including MMD

[18:54] *** pmurias left
[19:00] *** ggoebel_ left
[19:10] <b2gills> I think that LazyIterator is good, as long as .is-lazy() is tested in the default case.

[19:12] <lizmat> b2gills: such as ?

[19:13] <b2gills> multi sub foo (LazyIterator) {…};  multi sub foo (Iterator $_){  if .is-lazy() {…} else {…} }

[19:14] <lizmat> ah, ok

[19:14] *** ggoebel_ joined
[19:15] *** p6bannerbot sets mode: +v ggoebel_

[19:15] <lizmat> FWIW, we would have to make sure that LazyIterator's "is-lazy" cannot be overridden by the consuming class

[19:16] <lizmat> role Foo { method bar is unoverridable { } }; class A does Foo { method bar {} }  # boom at compile time

[19:17] <b2gills> Until `is unoverridable` exists, it could be internal only,  or we could just say "don't do that"

[19:19] <b2gills> Perhaps I should have said something when .count-only() was added, because I had the idea then about PredictiveIterator (though I didn't have a good name for it)

[19:20] <lizmat> wish you had, then  :-)

[19:39] *** Ven` joined
[19:40] *** p6bannerbot sets mode: +v Ven`

[19:44] *** Ven` left
[20:12] *** ggoebel_ left
[20:27] *** ggoebel_ joined
[20:28] *** p6bannerbot sets mode: +v ggoebel_

[21:54] <Geth> ¦ rakudo: 57f89278e9 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[21:54] <Geth> ¦ rakudo: Generalize "use isms" handling, add 'use isms <C++>'

[21:54] <Geth> ¦ rakudo: 

[21:54] <Geth> ¦ rakudo: Also allow "use isms" to (de-)activate all known isms.  This does

[21:54] <Geth> ¦ rakudo: *not* yet actually de-activate the "new Foo" logic: this appears to

[21:54] <Geth> ¦ rakudo: be a bit more troublesome.

[21:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/57f89278e9

[21:55] *** Ven` joined
[21:56] *** p6bannerbot sets mode: +v Ven`

[21:59] *** Ven` left
[22:00] <lizmat> sleep&

[22:01] *** Ven` joined
[22:01] *** p6bannerbot sets mode: +v Ven`

[22:05] *** Ven` left
[23:11] *** lizmat left
