[01:07] <Zoffix> Looking at QAST for &META_ASSIGN optimization, looks like `$a op= $b` becomes `$a = op(op(), $b)` when $a is a :U. I assume that's a mistake and gonna change it to just `$a = $b`

[01:09] <TimToady> m: my $a; $a -= 2; say $a

[01:09] <camelia> rakudo-moar ac2e50c85: OUTPUT: «-2␤»

[01:09] <Zoffix> Ah

[01:10] <Zoffix> Right.

[01:10] <Zoffix> (my brain)++ # for mentioning this first so I could find the flaw with the plan without writing any code :)

[01:10] <TimToady> :D

[01:13] <Zoffix> But... how about `$a = op($b)`

[01:13] <Zoffix> m: dd infix:<->(2)

[01:13] <camelia> rakudo-moar ac2e50c85: OUTPUT: «-2␤»

[01:14] <Zoffix> Saves a call

[01:14] * Zoffix tries

[01:16] <Zoffix> And - QAST::Op(callstatic &infix:<+>) without any kids can prolly be constant folded too

[01:16] <Zoffix> m: say &infix:<+>.cando(\()).head.is-pure

[01:16] <camelia> rakudo-moar ac2e50c85: OUTPUT: «No such method 'is-pure' for invocant of type 'Sub'␤  in block <unit> at <tmp> line 1␤␤»

[01:16] <Zoffix> m: say &infix:<+>.is-pure

[01:16] <camelia> rakudo-moar ac2e50c85: OUTPUT: «True␤»

[01:18] <Zoffix> well, it is already, in other contexts

[01:19] <TimToady> m: say infix:<%>(1)

[01:19] <camelia> rakudo-moar ac2e50c85: OUTPUT: «1␤»

[01:19] <TimToady> m: say infix:<%>()

[01:19] <camelia> rakudo-moar ac2e50c85: OUTPUT: «No zero-arg meaning for infix:<%>␤  in block <unit> at <tmp> line 1␤␤»

[01:19] <Zoffix> m: my $a; $a %= 42

[01:19] <camelia> rakudo-moar ac2e50c85: OUTPUT: «No zero-arg meaning for infix:<%>␤  in block <unit> at <tmp> line 1␤␤»

[01:20] <Zoffix> OK. Thanks :)

[01:20] <TimToady> we really want to restrict it to an identity element, and reject it if there isn't one

[01:20] <Zoffix> Got it.

[01:26] <Geth> ¦ roast: c42d861a4b | (Zoffix Znet)++ | S03-operators/assign.t

[01:26] <Geth> ¦ roast: Remove trailing whitespace

[01:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c42d861a4b

[01:27] <Geth> ¦ roast: a497e9151a | (Zoffix Znet)++ | S03-operators/assign.t

[01:27] <Geth> ¦ roast: Cover potential bugs with META_ASSIGN opts

[01:27] <Geth> ¦ roast:

[01:27] <Geth> ¦ roast: Covers discussed buggy proposals with :U opts:

[01:27] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6-dev/2018-01-12#i_15681388

[01:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a497e9151a

[01:28] <Geth> ¦ rakudo: f41d5e870e | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[01:28] <Geth> ¦ rakudo: Comment that META_ASSIGN op-doubling on :U's is by design

[01:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f41d5e870e

[03:16] <Geth> ¦ rakudo: cad66b72d5 | (Zoffix Znet)++ | 2 files

[03:16] <Geth> ¦ rakudo: Fix spurious useless-use warnings in metaop+metaassign op

[03:16] <Geth> ¦ rakudo:

[03:16] <Geth> ¦ rakudo: Fixes RT#131251: https://rt.perl.org/Ticket/Display.html?id=131251

[03:16] <Geth> ¦ rakudo:

[03:16] <Geth> ¦ rakudo: We check if the meta's op has is_pure annotation and cry if

[03:16] <Geth> ¦ rakudo: it does, but the use isn't useless if our meta is a metassign.

[03:16] <Geth> ¦ rakudo:

[03:16] <synopsebot> RT#131251 [open]: https://rt.perl.org/Ticket/Display.html?id=131251 Useless use warning triggered on assignment forms of reverse metaops

[03:16] <Geth> ¦ rakudo: N.B.: the check for metaassign can probably be moved up to the outer

[03:16] <Geth> ¦ rakudo: conditional, but IIUC it'd make it too wide without is-from-core check.

[03:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cad66b72d5

[03:42] <Geth> ¦ rakudo: 992b805576 | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[03:42] <Geth> ¦ rakudo: Fix typo in comment

[03:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/992b805576

[06:37] <Geth> ¦ roast: 01ce74034b | usev6++ | 2 files

[06:37] <Geth> ¦ roast: [jvm] Skip newly failing tests

[06:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/01ce74034b

[07:55] <travis-ci> Rakudo build passed. Zoffix Znet 'NO MONKEY BUSINESS!! 🙈🙉🙊

[07:55] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/327876433 https://github.com/rakudo/rakudo/compare/70c57c3a92f7...ac2e50c855ea

[08:49] <[Tux]> Rakudo version 2017.12-176-g992b80557 - MoarVM version 2017.12.1-32-g56c03d99c

[08:49] <[Tux]> csv-test-xs-20      0.443 -  0.445

[08:49] <[Tux]> csv-ip5xs           1.144 -  1.144

[08:49] <[Tux]> test-t --race       1.146 -  1.165

[08:49] <[Tux]> test-t              2.860 -  2.978

[08:49] <[Tux]> test               11.241 - 11.542

[08:49] <[Tux]> csv-parser         12.681 - 12.775

[08:49] <[Tux]> csv-ip5xs-20       13.602 - 13.689

[08:49] <[Tux]> test-t-20 --race   17.696 - 17.906

[08:49] <[Tux]> test-t-20          52.078 - 53.192

[09:56] <gfldex> i wonder if we should sue intel for messing with our benchmarks :->

[10:04] <DrForr> Shoot the messenger, it always works for companies :/

[10:05] <moritz> sue google for discovering spectre and meltdown? that's the more typical corporate strategy :/

[10:30] <lizmat> Files=1231, Tests=75890, 327 wallclock secs (14.84 usr  5.32 sys + 2260.87 cusr 224.71 csys = 2505.74 CPU)

[10:35] <jnthn> morning o/

[11:07] <Geth> ¦ rakudo/supply-syntax-opts: 38e9eacabd | (Jonathan Worthington)++ | src/core/Supply.pm

[11:07] <Geth> ¦ rakudo/supply-syntax-opts: More binding, not assignment, in Supply internals

[11:07] <Geth> ¦ rakudo/supply-syntax-opts:

[11:07] <Geth> ¦ rakudo/supply-syntax-opts: This saves 4 Scalar allocations per iteration of `my $s = supply emit

[11:07] <Geth> ¦ rakudo/supply-syntax-opts: 42; for ^10_000 { react whenever $s {  } }`, which saves a GC run.

[11:07] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/38e9eacabd

[11:49] <Geth> ¦ rakudo/supply-syntax-opts: 27326e3fb2 | (Jonathan Worthington)++ | src/core/Supply.pm

[11:49] <Geth> ¦ rakudo/supply-syntax-opts: One more Scalar elimination in Supply guts

[11:49] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/27326e3fb2

[11:50] <lizmat> jnthn: is there any reason not to put that bind inside, like add-actiive-tap($tap := $_) ?

[11:51] <jnthn> Keeping the code simple. Also that shouldn't matter much :)

[11:54] <jnthn> YOu'll like the next one

[11:54] <Geth> ¦ rakudo/supply-syntax-opts: 3d3a99efbe | (Jonathan Worthington)++ | src/Perl6/World.nqp

[11:54] <Geth> ¦ rakudo/supply-syntax-opts: Improve first touch of Array/Hash variables

[11:54] <Geth> ¦ rakudo/supply-syntax-opts:

[11:54] <Geth> ¦ rakudo/supply-syntax-opts: The $!reified and $!todo of List and the $!storage of Map are lazily

[11:54] <Geth> ¦ rakudo/supply-syntax-opts: allocated for variable declarations like `my @a`, `has %!h` and so

[11:54] <Geth> ¦ rakudo/supply-syntax-opts: forth. However, the check to see if these fields were initialized

[11:54] <Geth> ¦ rakudo/supply-syntax-opts: would allocate a Scalar due to the default auto-viv behavior of

[11:54] <Geth> ¦ rakudo/supply-syntax-opts: attributes. By binding a Mu there in the prototype container that is

[11:54] <Geth> ¦ rakudo/supply-syntax-opts: <…commit message has 7 more lines…>

[11:54] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/3d3a99efbe

[11:55] <jnthn> That makes every single array and hash variable a little cheaper :)

[11:56] <lizmat> Cool!

[11:56] * lizmat tests

[11:56] <lizmat> is there a reason you're doing this in a branch ?

[12:00] <jnthn> Makes it slightly easier to do comparison of the set of changes before/after with something more real-world :)

[12:00] <jnthn> Plus a bit of isolation

[12:00] <jnthn> I already nearly put in a commit that would have been a nasty regression; only one spectest caught it

[12:01] <jnthn> Oh, also one commit in the branch has potential for fallout, though I doubt there will be any

[12:17] <lizmat> grr... I need a link to a Perl 5 / Perl 6 benchmark in which Perl 6 is faster  :-)

[12:19] * jnthn needs lunch :)

[12:20] <jnthn> The utf-8 million lines one on my blog is faster nowadays

[12:46] <tbrowder> .tell AlexDaniel rakudo PR #1339 is finally ready for another review.

[12:46] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[12:52] <tbrowder> jnthn: any more thoughts on speeding up ASCII handling?

[13:20] <jnthn> tbrowder: Not beyond the mail I sent you some days back about it

[13:21] <jnthn> (In that, sure, we can speed up the ASCII decoder itself a bit, but the costs are elsewhere)

[13:22] <Geth> ¦ rakudo/supply-syntax-opts: d0b2cc10ac | (Jonathan Worthington)++ | src/core/Lock/Async.pm

[13:22] <Geth> ¦ rakudo/supply-syntax-opts: Use a little more binding in Lock::Async

[13:22] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/d0b2cc10ac

[13:25] <Geth> ¦ rakudo/supply-syntax-opts: f04b1d7bf3 | (Jonathan Worthington)++ | src/core/Supply.pm

[13:25] <Geth> ¦ rakudo/supply-syntax-opts: Avoid a closure per call to !run-supply-code

[13:25] <Geth> ¦ rakudo/supply-syntax-opts:

[13:25] <Geth> ¦ rakudo/supply-syntax-opts: Which saves 20,000 of them plus a GC run in `my $s = supply emit 42; for

[13:25] <Geth> ¦ rakudo/supply-syntax-opts: ^10_000 { react whenever $s {  } }`.

[13:25] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/f04b1d7bf3

[13:35] <lizmat> jnthn: the one blog post I could find about that, states that Perl 5 is still faster  :-(

[13:37] <Geth> ¦ rakudo: d7b160c728 | (Zoffix Znet)++ | .gitignore

[13:37] <Geth> ¦ rakudo: Use simpler ignore rule for .precomp

[13:37] <Geth> ¦ rakudo:

[13:37] <Geth> ¦ rakudo: The ** thing doesn't seem to work on my current system

[13:37] <Geth> ¦ rakudo: and just `.precomp` is sufficient to ignore `.precomp` in

[13:37] <Geth> ¦ rakudo: all the dirs.

[13:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d7b160c728

[13:38] <jnthn> lizmat: It was at the time the post was written

[13:38] <jnthn> Then I did the summer spesh work

[13:40] <lizmat> hmmm.. a very hidden mention in http://news.perlfoundation.org/2017/11/perl-6-performance-and-reliabi-4.html

[13:40] <lizmat> I'll use that

[14:04] <Geth> ¦ rakudo/supply-syntax-opts: 7cf3f0b354 | (Jonathan Worthington)++ | src/core/Promise.pm

[14:04] <Geth> ¦ rakudo/supply-syntax-opts: Use an nqp::list for then-list in Promise

[14:04] <Geth> ¦ rakudo/supply-syntax-opts:

[14:04] <Geth> ¦ rakudo/supply-syntax-opts: Since every Promise will have one of these, it's a hot path, and it

[14:04] <Geth> ¦ rakudo/supply-syntax-opts: has little impact on readability to use an nqp::list here instead.

[14:04] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/7cf3f0b354

[14:13] <Geth> ¦ roast: d93d062ef5 | (Zoffix Znet)++ | S06-operator-overloading/prefix.t

[14:13] <Geth> ¦ roast: Skip-fudge bogus(?) tests

[14:13] <Geth> ¦ roast:

[14:13] <Geth> ¦ roast: The tests were added[^1] in Dec 2017 and aren't part of 6.c language.

[14:13] <Geth> ¦ roast: These currently exercise RT#132711 / RT#131099 when RT#132713 is fixed

[14:13] <Geth> ¦ roast: and based on comments on RT#131099 these should likely complain about

[14:13] <Geth> ¦ roast: meaningless associativity rather than work.

[14:13] <Geth> ¦ roast:

[14:13] <Geth> ¦ roast: P.S.: fudger refused to fudge these right, so I fudged manually

[14:13] <synopsebot> RT#132711 [open]: https://rt.perl.org/Ticket/Display.html?id=132711 [LTA] Stupidly using `is assoc` with unary prefix operator has an error message from the deep

[14:13] <Geth> ¦ roast:

[14:13] <synopsebot> RT#131099 [new]: https://rt.perl.org/Ticket/Display.html?id=131099 [LTA] is assoc('list') gives "MVMArray: Can't pop from an empty array"

[14:13] <Geth> ¦ roast: [1] https://github.com/perl6/roast/commit/8cbbf89c9e43a65c544c05c47d9a3715f0f05bf6

[14:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d93d062ef5

[14:13] <synopsebot> RT#132713 [new]: https://rt.perl.org/Ticket/Display.html?id=132713 Order of `is assoc` and precedence traits matter, but should it?

[14:16] <masak> re https://rt.perl.org/Public/Bug/Display.html?id=132711 -- associativity *does* make sense for prefix ops. see S03 for the whole scoop

[14:17] <masak> ...but basically, if you have `!$a!`, where prefix:<!> and postfix:<!> have the same precedence, then those two ops *associate* in the sense of having a left or right associativity

[14:17] <masak> (I happen to know this because 007 has this behavior, which was copied directly from Perl 6)

[14:19] <masak> we basically never run into this, because people generally don't tend to make postfixes bind as tightly as prefixes. (they're usually tighter, modulo the fact that Perl 6 has one termish set of precedences and one list-oppy set.)

[14:20] <masak> but if you ever made a precedence level with both prefixes and postfixes in it, then associativity would totally make sense in the above way.

[14:20] <lizmat> .ask Zoffix on http://modules.perl6.org/search/?q=List%3A%3AUtil the Travis icon has a ? , but on http://modules.perl6.org/dist/List::Util:cpan:ELIZABETH it shows BUILD passing.  Is there some magic I need to perform to have the ? disappear

[14:20] <yoleaux> lizmat: I'll pass your message to Zoffix.

[14:22] <masak> for all intents and purposes, associativity is something that you set on a whole precedence level, not on individual operators. but since precedence levels are not first-class in Perl 6, we set them on ops. having two ops on the same level differ in associativity is pretty nonsensical, though.

[14:23] * masak pastes this into the ticket

[14:24] <masak> bleh, I get an empty page when I hit "Reply" or "Comment" in RT

[14:24] <masak> anyone seen that before?

[14:25] * lizmat has started a https://github.com/lizmat/P5-modules-to-P6-porting-guide

[14:25] <lizmat> comments / PR's welcome

[14:33] <Zoffix> Is &sub.prec<assoc>:delete the same as setting it to left-associate?

[14:33] <yoleaux> 14:20Z <lizmat> Zoffix: on http://modules.perl6.org/search/?q=List%3A%3AUtil the Travis icon has a ? , but on http://modules.perl6.org/dist/List::Util:cpan:ELIZABETH it shows BUILD passing.  Is there some magic I need to perform to have the ? disappear

[14:35] <Zoffix> m: sub infix:<z> is equiv(&[**]) { $^a ** $^b }; say 2 z 4

[14:35] <camelia> rakudo-moar d7b160c72: OUTPUT: «16␤»

[14:35] <Zoffix> m: sub infix:<z> is equiv(&[**]) { $^a ** $^b }; say 2 z 4 z 5

[14:35] <camelia> rakudo-moar d7b160c72: OUTPUT: «1048576␤»

[14:36] <Zoffix> m: sub infix:<z> is equiv(&[**]) is assoc<right> { $^a ** $^b }; say 2 z 4 z 5

[14:36] <camelia> rakudo-moar d7b160c72: OUTPUT: «17976931348623159077293051907890247336179769789423065727343008115773267580550096313270847732240753602112011387987139335765878976881441662249284743063947412437776789342486548527630221960124609411945308295208500576883815068234246288147391311054082723716…»

[14:36] <Zoffix> m: sub infix:<z> is equiv(&[**]) is assoc<right> { $^a ** $^b }; say 2 ** 4 ** 5

[14:36] <camelia> rakudo-moar d7b160c72: OUTPUT: «17976931348623159077293051907890247336179769789423065727343008115773267580550096313270847732240753602112011387987139335765878976881441662249284743063947412437776789342486548527630221960124609411945308295208500576883815068234246288147391311054082723716…»

[14:36] <Zoffix> k, then "yes"

[14:36] <Zoffix> Zoffix-- # breaking `is equiv`

[14:42] <Geth> ¦ rakudo/fix-equiv: 6f5b27ce63 | (Zoffix Znet)++ | src/core/traits.pm

[14:42] <Geth> ¦ rakudo/fix-equiv: Revert "Delete .prec<assoc> in is equiv() trait"

[14:42] <Geth> ¦ rakudo/fix-equiv:

[14:42] <Geth> ¦ rakudo/fix-equiv: This reverts commit f9f0883c6cef3695c5150d336f5e6552e1be4a4c.

[14:42] <Geth> ¦ rakudo/fix-equiv:

[14:42] <Geth> ¦ rakudo/fix-equiv: Per S06 speculations, `is equiv` is supposed to copy assoc.

[14:42] <Geth> ¦ rakudo/fix-equiv: [1] https://design.perl6.org/S06.html

[14:42] <Geth> ¦ rakudo/fix-equiv: review: https://github.com/rakudo/rakudo/commit/6f5b27ce63

[14:44] <Zoffix> In a branch 'cause some spectests explode due to RT#131099 apparently

[14:44] <lizmat> .tell stmuk is the "iniside" in the "title "Perl 6 Iniside Out" of the syndication of Shitov's blog post intentional or a typo ?

[14:44] <yoleaux> lizmat: I'll pass your message to stmuk.

[14:44] <Zoffix> (gonna try to fix on weekend)

[14:44] <synopsebot> RT#131099 [new]: https://rt.perl.org/Ticket/Display.html?id=131099 [LTA] is assoc('list') gives "MVMArray: Can't pop from an empty array"

[14:59] <lizmat> .

[14:59] <lizmat> afk&

[15:02] <Zoffix> masak: FWIW, it would be helpful for those comments to be *on the corresponding tickets*

[15:02] <Zoffix> I noticed them in the log completely by accident when I went to get a URL I needed

[15:06] <Zoffix> masak: added them to https://rt.perl.org/Ticket/Display.html?id=131099#txn-1523563   the empty page... Hmm. Are you sure you're logged in?

[15:15] <masak> Zoffix: I'm logged in. likely my account is misconfigured in some way. or maybe I'm viewing the page wrong.

[15:15] <masak> I recognize this failure mode, but I don't remember how to fix it.

[15:15] <masak> Zoffix: thank you for adding the comments.

[15:26] <Geth> ¦ rakudo/supply-syntax-opts: 40108e1551 | (Jonathan Worthington)++ | 2 files

[15:26] <Geth> ¦ rakudo/supply-syntax-opts: Optimize more cases of private method calls

[15:26] <Geth> ¦ rakudo/supply-syntax-opts:

[15:26] <Geth> ¦ rakudo/supply-syntax-opts: This resolves some more private methods at compile time, meaning that

[15:26] <Geth> ¦ rakudo/supply-syntax-opts: they do not need to be looked up and go through dispatch:<!> at run

[15:26] <Geth> ¦ rakudo/supply-syntax-opts: time.

[15:26] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/40108e1551

[15:27] <jnthn> Hm, that probably makes $c.Foo::bar() faster as well, fwiw

[15:27] <jnthn> By doing a compile-time resolution of Foo

[15:43] <Geth> ¦ rakudo: 5dd9ed100e | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[15:43] <Geth> ¦ rakudo: Second-pass optimize &META_ASSIGN opt

[15:43] <Geth> ¦ rakudo:

[15:43] <Geth> ¦ rakudo: Makes `for ^1000_000 {my $a; $a ~= "b"}` 70% faster.

[15:43] <Geth> ¦ rakudo: In most cases, perf applies only if $a is a :U.

[15:43] <Geth> ¦ rakudo:

[15:43] <Geth> ¦ rakudo: After we code-gen replacement for the op, we end up

[15:43] <Geth> ¦ rakudo: with `op(nqp::p6definite($foo) ?? op() !! $foo, $bar)`.

[15:43] <Geth> ¦ rakudo: <…commit message has 13 more lines…>

[15:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5dd9ed100e

[15:58] <Geth> ¦ rakudo/supply-syntax-opts: 4b51a426e3 | (Jonathan Worthington)++ | src/core/Lock/Async.pm

[15:58] <Geth> ¦ rakudo/supply-syntax-opts: Tune Lock::Async code stucture

[15:58] <Geth> ¦ rakudo/supply-syntax-opts:

[15:58] <Geth> ¦ rakudo/supply-syntax-opts: Smaller private methods allow common-case paths to be inlined. This

[15:58] <Geth> ¦ rakudo/supply-syntax-opts: code structure also needs less closure clones, by moving the dynamic

[15:58] <Geth> ¦ rakudo/supply-syntax-opts: var declarations into the signature of a private. As a further bonus,

[15:58] <Geth> ¦ rakudo/supply-syntax-opts: factoring out a little repetition makes the code slightly shorter.

[15:58] <Geth> ¦ rakudo/supply-syntax-opts: Shaves 4 GC runs off `my $s = supply emit 42; for ^10_000 { react

[15:58] <Geth> ¦ rakudo/supply-syntax-opts: whenever $s {  } }` due to the reduced allocations, and gives a

[15:58] <Geth> ¦ rakudo/supply-syntax-opts: speedup.

[15:58] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/4b51a426e3

[16:20] <Geth> ¦ rakudo/supply-syntax-opts: a9f6d69592 | (Jonathan Worthington)++ | src/core/Lock/Async.pm

[16:20] <Geth> ¦ rakudo/supply-syntax-opts: Factor out a LEAVE block in Lock::Async

[16:20] <Geth> ¦ rakudo/supply-syntax-opts:

[16:20] <Geth> ¦ rakudo/supply-syntax-opts: This is not only less and simpler code, but it also means a few less

[16:20] <Geth> ¦ rakudo/supply-syntax-opts: closure clones too.

[16:20] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/a9f6d69592

[16:32] <|Tux|> Rakudo version 2017.12-178-g5dd9ed100 - MoarVM version 2017.12.1-32-g56c03d99c

[16:32] <|Tux|> csv-test-xs-20      0.450 -  0.460

[16:32] <|Tux|> csv-ip5xs           1.080 -  1.083

[16:32] <|Tux|> test-t --race       1.131 -  1.231

[16:32] <|Tux|> test-t              2.758 -  2.782

[16:32] <|Tux|> test               11.246 - 11.381

[16:32] <|Tux|> csv-parser         12.078 - 12.178

[16:32] <|Tux|> csv-ip5xs-20       12.534 - 12.839

[16:32] <|Tux|> test-t-20 --race   16.725 - 17.173

[16:32] <|Tux|> test-t-20          50.440 - 51.065

[17:28] <jnthn> Goodness, LEAVE is a pig

[17:29] <jnthn> (Performance wise)

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: 27d5a2cb34 | (Jonathan Worthington)++ | src/core/Supply.pm

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: Refactor supply/react code running

[17:29] <Geth> ¦ rakudo/supply-syntax-opts:

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: Rather than blocks that poke into the SupplyState object, just put

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: the logic inside of methods inside of SupplyState. This saves making

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: 3 closures for every single message a Supply processes. Further, a

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: bunch of accessor calls give way to attribute accesses, and further

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: improvements are possible as a result of the code being in a righter

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: place.

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/27d5a2cb34

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: db3953a24a | (Jonathan Worthington)++ | src/core/Promise.pm

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: Save a couple of Scalar allocations per Promise

[17:29] <Geth> ¦ rakudo/supply-syntax-opts: review: https://github.com/rakudo/rakudo/commit/db3953a24a

[17:31] <jnthn> Well, next week

[17:32] * TimToady wonders if the hot path could be inlined at the end of a routine, with a helper invokable that can goto it

[17:33] <jnthn> At the moment it loops through the phasers, checking if there are any on the undo or leave queue, then looping over the post queue and so on

[17:34] <jnthn> Probably there's something along those lines that we can do

[17:35] <jnthn> Certainly, at the closing } of the routine we should know all of the LEAVE phasers and their friends

[17:35] <TimToady> might be worth a code duplication even

[17:36] <jnthn> Yeah

[17:36] <jnthn> Thing is, LEAVE is the only way to get some things correct.

[17:36] <jnthn> (Because of resumable exceptions)

[17:36] <timotimo> indeed

[17:37] <jnthn> So it's used heavily in concurrency guts for unlocking

[17:38] <TimToady> well, invariants are important to enforce

[17:39] <jnthn> Anyway, it's certainly a juicy optimization target :)

[17:50] <timotimo> we need a --fast flag for rakudo that just throws out all checks for invariants :P

[17:57] <TimToady> then we'll make that the default, and make people use a --slow flag when the security flaws emerge :P

[17:57] <jnthn> Worked for speculative execution :P

[17:57] <TimToady> indeed

[17:58] * TimToady still worries about dos attacks on nfg...

[17:59] <TimToady> but yeah, we need to get things into widespread use before we slow them down again :)

[17:59] <jnthn> :)

[18:00] <jnthn> ooh, it's about an hour after when I was going to go home...

[18:00] * TimToady is already home...

[18:00] <jnthn> -Ofun I guess :)

[18:00] * jnthn bbl

[18:00] * TimToady hopes you're not in trouble domestically

[18:01] <jnthn> No, it's not *that* late :)

[18:01] <jnthn> &

[18:14] <Geth> ¦ rakudo/faster-literal-postconstraint: fefb86ba70 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[18:14] <Geth> ¦ rakudo/faster-literal-postconstraint: Preliminary faster literal postconstraint codegen

[18:14] <Geth> ¦ rakudo/faster-literal-postconstraint:

[18:14] <Geth> ¦ rakudo/faster-literal-postconstraint: Makes `sub foo(42) {}; for ^5000_000 {foo 42}` 8.8x faster, but

[18:14] <Geth> ¦ rakudo/faster-literal-postconstraint: currently blows up with subsets.

[18:14] <Geth> ¦ rakudo/faster-literal-postconstraint:

[18:14] <Geth> ¦ rakudo/faster-literal-postconstraint: Stash the work for a later time.

[18:14] <Geth> ¦ rakudo/faster-literal-postconstraint: review: https://github.com/rakudo/rakudo/commit/fefb86ba70

[18:41] <AlexDaniel> releasable6: next

[18:41] <yoleaux> 12:46Z <tbrowder> AlexDaniel: rakudo PR #1339 is finally ready for another review.

[18:41] <releasable6> AlexDaniel, Next release in 8 days and ≈0 hours. No blockers. Unknown changelog format

[19:26] <tbrowder> i just changed Pod.nqp after a good build and apparently got a malformed utf8 char during finger fumble leaving vi.  the build msgs are in gist https://gist.github.com/tbrowder/fcfbe37f7bd98840756586d295c3e397

[19:32] <tbrowder> i have tried various *nix toolos to find the bad char (os, strings, diffuse) but nothing so far. the output from "od -c" was then run through "strings" and i inserted that output it as a comment in the last good Pod.nqp file which compiled successfully!  unless i get some good ideas, i will painfully had enter my changes and keep my fingers crossed.  note this has happened before and the recovery technique was

[19:32] <tbrowder> somewhat the same. i have searched for a good solution for the general problem but have found nothing definitive.  maybe Zoffix can build a good utf8 scrubber tool!

[19:33] <tbrowder> corrections: *nix tools (od, strings, diffuse)...

[20:00] <Geth> ¦ rakudo: 65d4876d88 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[20:00] <Geth> ¦ rakudo: Make constraint checks Num/Int/Str literals 1.1x-10x faster

[20:00] <Geth> ¦ rakudo:

[20:00] <Geth> ¦ rakudo: Str is 1.1x / Int is 7.7x / Num is 10x

[20:00] <Geth> ¦ rakudo:

[20:00] <Geth> ¦ rakudo: When code-genning ParamTypeCheck for Num/Int/Str literals

[20:00] <Geth> ¦ rakudo: in sigs (e.g. `-> 42 {}`), don't go through .ACCEPTS call

[20:00] <Geth> ¦ rakudo: and instead gen pure-nqp-op concreteness and equality check

[20:00] <Geth> ¦ rakudo: (nqp::iseq_I needs an explicit decont too; tho others don't)

[20:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/65d4876d88

[20:01] <Zoffix> ZOFFLOP: hung stresstest (looks like hung on t/spec/S17-promise/nonblocking-await.t)

[20:07] <timotimo> i like that commit, Zoffix :)

[20:11] <Zoffix> yeah... -> $ where 42 {} can likely be made the same

[20:11] * Zoffix &

[20:30] <Geth> ¦ rakudo: 90495b1d9c | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp

[20:30] <Geth> ¦ rakudo: Not sure why CREATE was used, shortcut to nqp::create

[20:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/90495b1d9c

[20:38] <Geth> ¦ rakudo: 79600d6978 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[20:38] <Geth> ¦ rakudo: Warn on xor with sunk args due to bad precedence

[20:38] <Geth> ¦ rakudo:

[20:38] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1389

[20:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/79600d6978

[20:39] <Geth> ¦ roast: dd59c28457 | (Zoffix Znet)++ | S03-operators/short-circuit.t

[20:39] <Geth> ¦ roast: Test xor with sunk args due to bad precedence warns

[20:39] <Geth> ¦ roast:

[20:39] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1389

[20:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dd59c28457

[21:24] <Geth> ¦ rakudo: 0415bb5f74 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[21:24] <Geth> ¦ rakudo: Micro-opt exit_handler

[21:24] <Geth> ¦ rakudo:

[21:24] <Geth> ¦ rakudo: Since many things can go wrong very quickly here, we tread with baby steps.

[21:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0415bb5f74

[21:35] <Geth> ¦ rakudo: b5b6e23b02 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[21:35] <Geth> ¦ rakudo: Micro-optimize exit_handler, part #2

[21:35] <Geth> ¦ rakudo:

[21:35] <Geth> ¦ rakudo: - don't get the KEEPs and UNDOs unless we need them

[21:35] <Geth> ¦ rakudo: - use nqp::eqaddr instead of =:=

[21:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b5b6e23b02

[22:04] <Geth> ¦ rakudo: 421504bd47 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[22:04] <Geth> ¦ rakudo: Micro-optimize exit_handler, part #3

[22:04] <Geth> ¦ rakudo:

[22:04] <Geth> ¦ rakudo: - don't store code object, we only need it once

[22:04] <Geth> ¦ rakudo: - create a fast path for a single LEAVE block

[22:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/421504bd47

[22:04] * lizmat hopes that's what jnthn had in mind ^^^

[22:35] <lizmat> benchmarks shows this only gains about 1% on blocks with a single LEAVE phaser

[22:35] <lizmat> :-(

[22:36] <gfldex> every % counts

[22:55] <lizmat> jnthn: is exit_handler called on all exit of scopes?  or is it only called if there are phasers ?

[22:58] <jnthn> In NQP, =:= compiles directly into nqp::eqaddr, iirc :)

[22:58] <jnthn> lizmat: It's only called on blcks with leave phasers (or their friends)

[22:59] <lizmat> ah, ok, will revert that then for readability

[22:59] <jnthn> I think we need to do something a bit more drastic than micro-opt that code, alas

[22:59] <lizmat> jnthn: ok, that implies that *if* we get there, we don't need to check for existence of the %phasers, right ?

[22:59] <jnthn> Hm, good point :)

[22:59] <jnthn> Yeah, that we should be able to assume

[23:00] <lizmat> running spectest now that should give us 7% improvement on the single LEAVE case

[23:00] <jnthn> Cool

[23:00] <jnthn> I did have a patch that got quite a nice improvement, but it broke spectest

[23:00] <jnthn> I didn't have time to find out why before heading home

[23:01] <lizmat> well, I'm focusing on getting to the single LEAVE case asap

[23:02] <jnthn> Should help

[23:02] <jnthn> Next week I'll probably first work on getting the supply whenever { } case (when there is precisely one whenever block) compiled differently

[23:03] <jnthn> Well, precisely one and it's the final statement

[23:03] <jnthn> In that case, we can make some assumptions

[23:08] <jnthn> https://summerofcode.withgoogle.com/ # time to think about this

[23:31] <lizmat> jnthn: Lexical with name '$fh' does not exist in this frame   <--- does that ring a bell ?

[23:32] <jnthn> Yes, I got that very error today when trying to optimize exit handlers! :)

[23:33] <lizmat> guess I'm tickling it now as well  :-(

[23:35] <jnthn> Yeah, I didn't have any good guesses what was up

[23:36] <lizmat> only seems to appear in conjunction with "will leave"

[23:36] <jnthn> Oh....

[23:36] <lizmat> it loses the variable on which the "will leave" is based

[23:36] <jnthn> Take a look inside of the impl of the will trait

[23:36] <jnthn> I think it has a nqp::ctxcaller chain

[23:37] <jnthn> And maybe we need a level less now

[23:37] * lizmat checks

[23:37] <jnthn> (Yes, it's fragile AF)

[23:37] <lizmat> aha!

[23:38] <lizmat> yup

[23:39] <lizmat> hmmm... guess I need to make an extra scope, because the number of scopes is now different for the single LEAVE and LEAVE + others

[23:40] <jnthn> I've worse news for you

[23:40] <lizmat> noooo  :-)

[23:40] <jnthn> NQP flattens scopes quite aggressively

[23:40] <jnthn> So you can't just count them in the source

[23:40] <jnthn> :)

[23:43] <lizmat> just adding a scope won't work either, right?  because it'll get optimized away, jnthn?

[23:51] <jnthn> Pretty much

[23:53] <timotimo> at least the number of layers isn't susceptible to spesh being on or off

[23:54] <jnthn> True :)

[23:56] <lizmat> work so far: https://gist.github.com/lizmat/ce7b04adff53450c7deaab4051a3045b

[23:57] <lizmat> calling it a day now  :-)

[23:58] <lizmat> fwiw, I used this as benchmark: for ^100000 { LEAVE Nil }

[23:58] <jnthn> lizmat++

[23:59] <tbrowder> jnthn: i tracked down the problem and it wasn’t a malformed utf-8, the culprit was use of an undeclared variable—should that be an LTA msg for nqp?

[23:59] <timotimo> this is the 7% improvement you saw?

[23:59] <lizmat> well, the odd thing is that this last version loses all performance benefits :-(

[23:59] <timotimo> tbrowder: that sounds bizzarre, can you stash the code before and after the undeclared variable problem for us to see?
