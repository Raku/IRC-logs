[00:29] <Geth> ¦ roast: 3f056e33b8 | (Zoffix Znet)++ | docs/announce/6.d.md

[00:29] <Geth> ¦ roast: Add 6.d announcement

[00:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3f056e33b8

[00:31] <Zoffix> holy shit

[00:31] <Zoffix> 2018.09 zoffix@VirtualBox~/R/rakudo/t/spec (6.d)$ G '#?rakudo' . | wc -l

[00:31] <Zoffix> 1873

[00:31] <Zoffix> ain't nobody got time for that

[00:32] <Zoffix> 1302 for '#?rakudo '

[00:33] *** cognominal-p6 joined
[00:33] <Zoffix> I'm leaving them in then. It will be just purely a policy thing: fudged stuff in a spec with no working mostly-usable implementation does not imply that feature was definitely decided to be part of the spec.

[00:34] *** p6bannerbot sets mode: +v cognominal-p6

[00:40] <AlexDaniel> oh wow

[00:40] <AlexDaniel> Zoffix++

[00:40] <Geth> ¦ rakudo: 7a85985d0b | (Zoffix Znet)++ | tools/update-passing-test-data.pl

[00:40] <Geth> ¦ rakudo: Fix shebang

[00:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7a85985d0b

[00:40] <Zoffix> ?

[00:41] <AlexDaniel> Zoffix: it is actually happening, this is so great

[00:42] <Zoffix> I'm leaving files that are in roast but not in Rakudo's t/spectest.data as well, even though we originally wanted to nuke them ('cause no PoV). We already did 6.c with fudges/dead files. We can survive another version.

[00:43] <Zoffix> (there's like a screenful of them and I don't want to blindly nuke them)

[00:45] <Geth> ¦ roast: d694464998 | (Zoffix Znet)++ | README.md

[00:45] <Geth> ¦ roast: Document SAP is not included in releases

[00:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d694464998

[00:46] <Geth> ¦ roast/6.d: 8559d91f4b | (Zoffix Znet)++ | 9 files

[00:46] <Geth> ¦ roast/6.d: Delete appendices for release

[00:46] <Geth> ¦ roast/6.d: review: https://github.com/perl6/roast/commit/8559d91f4b

[00:57] *** cognominal-p6 left
[01:10] <Zoffix> ZOFFLOP: t/spec/S09-typed-arrays/native-int.

[01:11] <Zoffix> Parse errors: Bad plan.  You planned 1652 tests but ran 225.

[01:13] <Geth> ¦ roast/6.d: 6f831af20b | (Zoffix Znet)++ | 1404 files

[01:13] <Geth> ¦ roast/6.d: Switch to explicit `use v6.d` pragma for released spec

[01:13] <Geth> ¦ roast/6.d: review: https://github.com/perl6/roast/commit/6f831af20b

[01:21] *** lizmat left
[01:23] *** dalek left
[01:23] *** dalek joined
[01:23] *** ChanServ sets mode: +v dalek

[01:23] *** dalek left
[01:23] *** dalek joined
[01:23] *** ChanServ sets mode: +v dalek

[01:24] *** p6bannerbot sets mode: +v dalek

[01:24] *** p6bannerbot sets mode: +v dalek

[01:34] <Zoffix> ZOFFLOP: t/spec/S05-mass/properties-script.t

[01:36] <MasterDuke> just got a 'MoarVM panic: Register types do not match between value and node' in t/02-rakudo/12-proto-arity-count.t

[01:41] <Geth> ¦ roast/6.d: 99d64b36ac | (Zoffix Znet)++ | 21 files

[01:41] <Geth> ¦ roast/6.d: Replace new exceptions by Exception

[01:41] <Geth> ¦ roast/6.d: 

[01:41] <Geth> ¦ roast/6.d: As discussed, new exceptions did not receive much thought in

[01:41] <Geth> ¦ roast/6.d: naming and organization, so we'll exclude them from 6.d release

[01:41] <Geth> ¦ roast/6.d: to have a chance to redesign them better if needed.

[01:41] <Geth> ¦ roast/6.d: 

[01:41] <Geth> ¦ roast/6.d: These exceptions were found by doing 6.c-errata/6.d:

[01:41] <Geth> ¦ roast/6.d: <…commit message has 5 more lines…>

[01:41] <Geth> ¦ roast/6.d: review: https://github.com/perl6/roast/commit/99d64b36ac

[01:44] <Geth> ¦ roast: c2c7e1a8f7 | (Zoffix Znet)++ | S24-testing/fails-like.t

[01:44] <Geth> ¦ roast: Use 6.c exception for testing fails-like

[01:44] <Geth> ¦ roast: 

[01:44] <Geth> ¦ roast: 6.d exceptions are being removed from 6.d release

[01:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c2c7e1a8f7

[01:45] <Geth> ¦ roast/6.d: cb6fe96e0c | (Zoffix Znet)++ | S24-testing/fails-like.t

[01:45] <Geth> ¦ roast/6.d: Use 6.c exception for testing fails-like

[01:45] <Geth> ¦ roast/6.d: 

[01:45] <Geth> ¦ roast/6.d: 6.d exceptions are being removed from 6.d release

[01:45] <Geth> ¦ roast/6.d: review: https://github.com/perl6/roast/commit/cb6fe96e0c

[01:45] <Geth> ¦ roast: jmaslak++ created pull request #496: Tests listening on port 0 returns usable tap with whenever

[01:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/496

[01:46] * Zoffix is about to tag 6.d branch

[01:46] <Zoffix> Been awhile since I tagged anything

[01:46] <Zoffix> AlexDaniel: do you want to tag stuff? :)

[01:47] <Zoffix> 1 sec tho, lemme do final changelog/authors corrections form #perl6 and then I'm ready

[01:51] <Geth> ¦ roast: cb3b079a13 | (Zoffix Znet)++ | docs/announce/6.d.md

[01:51] <Geth> ¦ roast: Fix typos and duplicate names

[01:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cb3b079a13

[01:51] <Geth> ¦ roast/6.d: b0c8e4ec64 | (Zoffix Znet)++ | docs/announce/6.d.md

[01:51] <Geth> ¦ roast/6.d: Fix typos and duplicate names

[01:51] <Geth> ¦ roast/6.d: review: https://github.com/perl6/roast/commit/b0c8e4ec64

[01:54] <Zoffix> I guess it's night in Europe and AlexDaniel is sleeping

[01:54] * Zoffix tries to remember how to sign stuff

[01:57] <Zoffix> "error: gpg failed to sign the data" great...

[01:59] <Zoffix> ah, k, no keys on this box thatss why

[02:00] <Zoffix> OK. I'm ready to go.

[02:00] <Zoffix> Signing and finishing off in 10m. Speak now or forever hold your silence :)

[02:24] <Geth> ¦ roast: cbb9d5863a | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/announce/6.d.md

[02:24] <Geth> ¦ roast: Nuke one more dupe name

[02:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cbb9d5863a

[02:24] *** Kaiepi left
[02:24] *** Kaiepi joined
[02:25] <Geth> ¦ roast/6.d: 96cbdabc3b | (Zoffix Znet)++ | docs/announce/6.d.md

[02:25] <Geth> ¦ roast/6.d: Nuke one more dupe name

[02:25] <Geth> ¦ roast/6.d: review: https://github.com/perl6/roast/commit/96cbdabc3b

[02:25] <Zoffix> Kaiepi: so what are you legalizing? P)

[02:25] *** p6bannerbot sets mode: +v Kaiepi

[02:30] *** Kaiepi left
[02:32] <AlexDaniel> Zoffix: I don't have a schedule, unfortunately. It's 04:32 AM and I'm not sleeping

[02:32] <AlexDaniel> there's a graph here: https://github.com/AlexDaniel/orgsleep

[02:32] <Zoffix> AlexDaniel: well, I already figured out how to tag :)

[02:33] <Zoffix> Nice sleepping pattern tho :)

[02:33] <AlexDaniel> when I don't feel like a zombie, yeah… usually I do

[02:33] <AlexDaniel> Zoffix: but what are we tagging exactly?

[02:33] <AlexDaniel> some roast commit?

[02:33] <Zoffix> AlexDaniel: 6.d release in roast

[02:34] <Zoffix> Like, I'm in 6.d branch and I'm gonna run git tag and tag it with `6.d` tag and leave it that way.

[02:34] <Zoffix> That works right?

[02:34] <Zoffix> No merges to master (it has stuff that was removed from release)

[02:35] <AlexDaniel> yeah, totally fine

[02:35] <AlexDaniel> master branch is also somewhat arbitrary, it's just the default branch

[02:36] <AlexDaniel> you can also create tags even if you're not on any branch, and it should work fine I think (although people will probably be a bit surprised)

[02:36] <AlexDaniel> if I understand correctly, the branch will be merged back into master, no?

[02:37] <AlexDaniel> but even if not it's fine too… whatever, just push :)

[02:38] <Zoffix> No, no merges to master

[02:39] <Zoffix> Basically the difference between 6.d branch and master right now is that 6.d branch had APPENDICES and 6.d exceptions removed

[02:39] <Zoffix> and `use v6` was changed to `use v6.d`

[02:40] <Zoffix> god marketing repo is unclonable -_- takes ages

[02:40] <AlexDaniel> ah, ok

[02:40] <AlexDaniel> I see

[02:41] <AlexDaniel> these changes probably need to be mentioned in the release guide, so that we do the same for v6.e

[02:42] <Zoffix> Yeah, I'm gonna mop everything up later in the week

[02:42] <AlexDaniel> :o now both 6.c-errata and 6.d-errata branches need to be tested when doing the release :o

[02:42] <AlexDaniel> which is fine

[02:52] <Zoffix> crap

[02:52] <Zoffix> cpan@perlbuild4~/R/rakudo/t/spec (6.d)$ git push

[02:52] <Zoffix> error: src refspec 6.d matches more than one.

[02:52] <Zoffix> error: failed to push some refs to 'https://github.com/perl6/roast'

[02:52] <Zoffix> AlexDaniel: is that normal?

[02:52] <AlexDaniel> what's the name of the branch?

[02:52] <Zoffix> 6.d

[02:53] <AlexDaniel> I'm pretty sure that has to be 6.d-errata

[02:53] <Zoffix> AlexDaniel: is there an easy way to rename a branch? I've just pushed a 6.d tag

[02:53] <AlexDaniel> just `git checkout -b 6.c-errata`

[02:53] <AlexDaniel> oops 6.d-errata

[02:54] <Zoffix> AlexDaniel: and what happens with 6.d branch?

[02:54] <AlexDaniel> we delete it :)

[02:56] <Zoffix> k, that worked. AlexDaniel++

[02:56] <AlexDaniel> I changed the branch protection rule to *-errata on github

[02:56] <AlexDaniel> so any errata branch is protected automatically

[02:57] <AlexDaniel> kinda cool

[02:59] <AlexDaniel> Zoffix: yeah, that looks normal!

[03:00] <AlexDaniel> geez I still can't believe how fast 6.d happened

[03:01] <AlexDaniel> and tbh amazed how Zoffix++ did it almost single-handedly

[03:03] <Geth> ¦ roast: 3a37f5b713 | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/announce/6.d.md

[03:03] <Geth> ¦ roast: Add brochure link to announcement

[03:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3a37f5b713

[03:04] <Geth> ¦ roast: 4731f5164b | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/announce/6.d.md

[03:04] <Geth> ¦ roast: Oops, wrong brochure link

[03:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4731f5164b

[03:07] <Zoffix> 😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍

[03:07] <Zoffix> Announcing: Raku Perl 6 'Diwali' 6.d Specification Release: http://blogs.perl.org/users/zoffix_znet/2018/11/announce-raku-perl-6-diwali-6d-language-specification-release.html

[03:07] <Zoffix> 😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍

[03:08] *** ufobat___ joined
[03:09] <MasterDuke> Zoffix++

[03:09] *** p6bannerbot sets mode: +v ufobat___

[03:09] *** PufferBot joined
[03:10] *** p6bannerbot sets mode: +v PufferBot

[03:11] <AlexDaniel> “release process will start on 2018-11-17” he-he… yeah, that's more accurate… :X

[03:12] *** ufobat_ left
[03:12] *** Kaiepi joined
[03:13] *** p6bannerbot sets mode: +v Kaiepi

[03:13] <Kaiepi> Zoffix, on other servers my vhost is [email@hidden.address] a reference to a copypasta

[03:17] <Zoffix> I see

[03:21] <Geth> ¦ roast: c5bf699892 | (Zoffix Znet)++ | S32-list/toggle.t

[03:21] <Geth> ¦ roast: Revert "Temporarily remove .toggle tests"

[03:21] <Geth> ¦ roast: 

[03:21] <Geth> ¦ roast: This reverts commit 6879061884baa16b946acb4c41749e22c2215581.

[03:21] <Geth> ¦ roast: 

[03:21] <Geth> ¦ roast: We're past 6.d release and this is fine to go into 6.e propspec

[03:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c5bf699892

[03:52] *** cognominal-p6 joined
[03:53] *** cognominal-p6 left
[03:53] *** cognominal-p6 joined
[03:54] *** p6bannerbot sets mode: +v cognominal-p6

[03:56] *** MasterDuke left
[04:17] *** cognominal-p6 left
[04:34] <Zoffix> MasterDuke: just noticed the same error on docs travis build: R#2477

[04:34] <synopsebot> R#2477 [open]: https://github.com/rakudo/rakudo/issues/2477 MoarVM panic: Register types do not match between value and node

[04:57] *** Zoffix left
[05:43] <Kaiepi> working away on implementing getsockopt/setsockopt support

[05:43] <Kaiepi> i'm starting out by adding a getsockopts op that can be used in rakudo to get an enum of the available socket options similar to how signals work

[05:44] <Kaiepi> s/work/\0s/

[05:45] <Kaiepi> after that it's just a matter of adding getsockopt/setsockopt ops, which should be a bit less annoying to write

[05:46] <Kaiepi> apart from the jvm, it makes things a bit more complicated the way it deals with socket options

[05:48] <Kaiepi> some socket options that'd work with async sockets on moar won't work with them on the jvm, like SO_OOBINLINE

[05:51] *** robertle left
[06:07] *** ufobat___ left
[06:24] <nine> Zoffix: massive congratulations on 6.d! Sometimes really all it needs is someone to just do it :)

[06:38] <Kaiepi> bastille% perl6 -e 'say +SO_OOBINLINE.base: 16'

[06:38] <Kaiepi> 100

[06:38] *** PufferBot left
[06:38] <Kaiepi> \o/ partway there

[07:13] *** cognominal-p6 joined
[07:13] *** p6bannerbot sets mode: +v cognominal-p6

[07:27] *** cognominal-p6 left
[07:27] *** cognominal-p6 joined
[07:28] *** p6bannerbot sets mode: +v cognominal-p6

[07:37] *** cognominal-p6 left
[07:42] <Geth> ¦ nqp: Kaiepi++ created pull request #515: [WIP] Implement getsockopt/setsockopt support

[07:42] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/515

[07:43] *** robertle joined
[07:44] *** p6bannerbot sets mode: +v robertle

[07:45] <Geth> ¦ rakudo: Kaiepi++ created pull request #2478: [WIP] Implement .set-option/.get-option for async and INET sockets

[07:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2478

[08:21] <[Tux]> Rakudo version 2018.10-77-g7a85985d0 - MoarVM version 2018.10-74-g2fdde4a21

[08:21] <[Tux]> csv-test-xs-20      0.435 -  0.436

[08:21] <[Tux]> csv-ip5xs           0.942 -  1.011

[08:21] <[Tux]> test-t --race       0.835 -  1.034

[08:21] <[Tux]> test-t              1.903 -  1.937

[08:21] <[Tux]> csv-ip5xs-20        7.098 -  7.349

[08:21] <[Tux]> test                7.563 -  8.256

[08:21] <[Tux]> test-t-20 --race   10.079 - 12.455

[08:21] <[Tux]> csv-parser         24.462 - 25.407

[08:21] <[Tux]> test-t-20          31.973 - 35.587

[08:21] <[Tux]> I'll do a second run later today

[08:31] *** dct joined
[08:31] *** p6bannerbot sets mode: +v dct

[08:50] *** dct left
[09:01] *** ufobat joined
[09:02] *** p6bannerbot sets mode: +v ufobat

[09:27] *** lizmat joined
[09:27] *** p6bannerbot sets mode: +v lizmat

[10:18] <|Tux|> What is the promoted way to support transparent «my $x = foo(grey => 1);» === «my $x = foo(gray => 1);»

[10:19] <|Tux|> as in attribute aliasses

[10:20] <lizmat> provide a infix:<eqv>(foo:D $a, foo:D $b) { ... }

[10:20] <lizmat> *infix:<===>    # duh

[10:21] <timotimo> i don't think that's what tux means

[10:21] <timotimo> [Tux]: you'll want grey => gray => $gray or :grey(:$gray)

[10:21] <timotimo> i think :grey(:gray($g)) will also work?

[10:22] <|Tux|> will it impose a speed penalty?

[10:23] <|Tux|> and yes, what timotimo suggests

[10:23] <lizmat> I think 2 is still fast pathed, 2+ is definitely much slower

[10:23] <lizmat> which means you're probably better off doing a *%_ and then checking %_<gray> // %_<grey> // %_<g>

[10:23] <timotimo> yeah, we have special ops for the case where it's only 2

[10:25] <|Tux|> so «sub foo(Int $gray); my $x = foo(gray => 1);» → «sub foo(Int :grey($gray); my $x = foo(grey => 1); my $y = foo(gray => 1);» ?

[10:29] <|Tux|> another question, probably to lizmat : to check if my list only contains unique elements, I do «@row.Bag.elems == @row.elems»

[10:30] <lizmat> .unique is probably faster

[10:30] <|Tux|> if that fails, what is the fastest way (or the most perl6-ish way to non-destructively report the duplicates?

[10:30] * |Tux| looks up the docs for unique

[10:31] <lizmat> hmmm.. you only want to know *if* there are any duplicates...  

[10:32] <|Tux|> yes, and *if* there are duplicates, I want to report the duplicates and FAIL. at this point speed is not important anymore

[10:35] <|Tux|> I was thinking about .Bag and grepping where count > 1

[10:36] <lizmat> would you need to know *all* of the doubles?

[10:36] <lizmat> then yes

[10:37] <lizmat> @row.Bag.grep: *.value > 1

[10:37] <|Tux|> yes, I want to know all of the doubles and their count, so Bag is perfect. But I was wondering if there were new tools to get them

[11:02] <|Tux|>         @row.unique.elems == @row.elems or  self!fail (1013, @row.Bag.grep (*.value > 1)

[11:02] <|Tux|>                                             .map({ "{$_.key}({$_.value})"  }).join: ", ");

[11:02] <|Tux|>  

[11:02] <|Tux|> works perfectly

[11:03] *** cognominal-p6 joined
[11:03] *** p6bannerbot sets mode: +v cognominal-p6

[11:04] *** cognominal-p6 left
[11:05] *** cognominal-p6 joined
[11:05] *** p6bannerbot sets mode: +v cognominal-p6

[11:25] <|Tux|> is there a way to see if a parameter is passed at all? (other than setting a bizarre default and checking on it). Where not passed is different from passed with a default undefined

[11:26] <|Tux|> «method foo(Int Bar);» and $a.foo() should be different from $a.foo(Int)

[11:54] <lizmat> [Tux]: multi method foo() { }; multi method foo(Int Bar) { }

[12:06] <|Tux|> that would be undoable with 10+ possible (named) arguments

[12:07] * |Tux| imagines something like «method foo (Int bar) { if $bar.provided { ... } }»

[12:30] <lizmat> [Tux] : if it is about named args, you can still do the perl 5 approach, by just slurping all nameds into a hash and look at them "manually"

[12:31] <|Tux|> that has multiple disadvantages

[12:31] <|Tux|> 1. type checking

[12:31] <|Tux|> 2. default

[12:31] <|Tux|> 3. documentation

[12:31] <|Tux|> 4. program changes

[12:33] <lizmat> how would you do it in Perl 5 ?

[12:34] <|Tux|> not :)

[12:34] <lizmat> ah, ok

[12:34] <|Tux|> I ended up with this:

[12:34] <|Tux|>         if ($key.defined) {

[12:34] <|Tux|>             $out     //= Hash if $out === Any;

[12:35] <lizmat> m: my %h = a => "b"; my Int \a = %h<a>    # perhaps that could be a way ?

[12:35] <camelia> rakudo-moar 7a85985d0: OUTPUT: «Type check failed in binding; expected Int but got Str ("b")␤  in block <unit> at <tmp> line 1␤␤»

[12:35] <lizmat> m: my %h = a => 42; my Int \a = %h<a> 

[12:35] <camelia> rakudo-moar 7a85985d0: ( no output )

[12:35] <lizmat> by binding to a variable, the typecheck is applied

[12:36] <lizmat> m: my %h = a => "b", b => 27; my Int \a = %h<c> // %h<a>   # using alternatives

[12:36] <camelia> rakudo-moar 7a85985d0: OUTPUT: «Type check failed in binding; expected Int but got Str ("b")␤  in block <unit> at <tmp> line 1␤␤»

[12:36] * |Tux| is backporting(forward porting) changes to Text::CSV_XS to Text::CSV

[12:38] <lizmat> m: my %h = a => "b", b => 27; my Int \a = %h<c a>:v.head   # using a slice

[12:38] <camelia> rakudo-moar 7a85985d0: OUTPUT: «Type check failed in binding; expected Int but got Str ("b")␤  in block <unit> at <tmp> line 1␤␤»

[12:39] <Kaiepi> what nqp ops are there that take a list as an argument?

[12:39] <Kaiepi> or a hash

[12:47] <Kaiepi> never mind, found some in the docs

[12:59] <|Tux|> lizmat, pushed. feel free to optimize :P

[13:14] <|Tux|> Rakudo version 2018.10-77-g7a85985d0 - MoarVM version 2018.10-74-g2fdde4a21

[13:14] <|Tux|> csv-test-xs-20      0.430 -  0.432

[13:14] <|Tux|> test-t --race       0.804 -  0.840

[13:14] <|Tux|> csv-ip5xs           0.888 -  0.902

[13:14] <|Tux|> test-t              1.736 -  1.784

[13:14] <|Tux|> csv-ip5xs-20        6.929 -  6.973

[13:14] <|Tux|> test                7.966 -  8.513

[13:14] <|Tux|> test-t-20 --race   10.361 - 10.491

[13:14] <|Tux|> csv-parser         21.344 - 21.610

[13:14] <|Tux|> test-t-20          29.750 - 30.369

[13:48] *** ggoebel left
[14:06] *** cognominal-p6 left
[14:22] <dogbert2_> Hmm, so the 32 bit build is still broken

[14:28] *** tbrowder_ joined
[14:28] *** p6bannerbot sets mode: +v tbrowder_

[14:33] *** tbrowder_ left
[15:49] *** cognominal-p6 joined
[15:50] *** p6bannerbot sets mode: +v cognominal-p6

[15:52] <b2gills> |Tux|: You could probably use `.repeated()` => `if @row.repeated() -> \repeats { self!fail( 1013, repeats.Bag.map({ "{$_.key}({$_.value+1})"  }).join: ", "); }`

[15:53] <|Tux|> isn't repeated about entries being adjacent?

[15:53] <b2gills> m: (0,1,0).repeated.say

[15:53] <camelia> rakudo-moar 7a85985d0: OUTPUT: «(0)␤»

[15:54] <b2gills> .repeated() is the inverse of .unique()

[15:54] <b2gills> not of .squish()

[15:54] * |Tux| just read the docs. Thanks

[15:58] <b2gills> Anyway `if .repeated() {…}` is going to be more performant than `.unique.elems`

[15:58] <b2gills> m: (gather for ^10 { .say;  take 0 }).repeated.Bool

[15:58] <camelia> rakudo-moar 7a85985d0: OUTPUT: «0␤1␤»

[15:59] <b2gills> It might have to be `@row.repeated.cache`

[16:00] <|Tux|> only "problem" is that the syntax you posted isn't supported under Slang::Tuxic

[16:01] <b2gills> I've been trying to think of a way to do something like `andthen` except that .repeated() always returns an instance of Seq

[16:02] <|Tux|>         if (my @dup = @row.repeated) {      self!fail (1013, @dup.Bag.map ({ "{$_.key}({$_.value+1})" }).join: ", "); }

[16:02] <|Tux|>         if (my @dup = @row.repeated) {      self!fail (1013, @dup.Bag.map ({ "{$_.key}({$_.value+1})" }).join: ", "); }

[16:02] <|Tux|> that PASSes. I'll go for that

[16:03] <b2gills> Perhaps Slang::Tuxic needs `if( my $v = … ){…}` to translate to `if … -> $v {…}`

[16:06] <|Tux|> I think FROGGS might say "Patches weelcome" and/or give you commit :)

[16:18] <timotimo> [Tux]: i believe you can use destructuring of a slurpy hash to get type checking and defaults and binding to variables back

[16:19] <|Tux|> lets not overcomplicate :)

[16:20] <|Tux|> my current implementation works for «my $h = csv (in => "file.csv", key => "code")» *and* for «my $h = csv (in => "file.csv", key => [ ":", "code", "color" ]);»

[16:23] *** cognominal-p6 left
[16:40] *** pyrimidine joined
[16:41] *** p6bannerbot sets mode: +v pyrimidine

[16:52] *** cognominal-p6 joined
[16:53] *** p6bannerbot sets mode: +v cognominal-p6

[16:54] *** cognominal-p6 left
[16:54] *** cognominal-p6 joined
[16:55] *** p6bannerbot sets mode: +v cognominal-p6

[17:22] *** lizmat left
[17:43] *** ExtraCrispy joined
[17:43] *** p6bannerbot sets mode: +v ExtraCrispy

[17:58] *** cygx joined
[17:58] *** p6bannerbot sets mode: +v cygx

[18:01] <stmuk_> is IRC safe again?

[18:03] <cygx> still some discussions happening in #perl6 re YAPC Riga

[18:05] <cygx> btw, I would still like to see tighter integration between Perl5 and Perl6 happen

[18:05] <cygx> does anyone have any thoughts on something like this: https://gist.github.com/cygx/de15015296c904f97285233bd1df526c

[18:05] <cygx> nine: would that ^^^ work?

[18:06] <stmuk_> that looks like the old v5!

[18:08] <cygx> no, old v5 actually parsed Perl5 - this would only have to detect blocks (and thus must have some idea about quoting constructs as well)

[18:10] <cygx> also, unless someone comes up with something more sophisticated, as written, access to foreign lexicals would be read-only

[18:14] *** lizmat joined
[18:14] *** p6bannerbot sets mode: +v lizmat

[18:26] *** ExtraCrispy left
[19:10] *** go|dfish left
[19:11] *** go|dfish joined
[19:11] *** p6bannerbot sets mode: +v go|dfish

[19:13] <cygx> .tell nine does this sound viable to you: https://gist.github.com/cygx/de15015296c904f97285233bd1df526c

[19:13] <yoleaux> cygx: I'll pass your message to nine.

[19:13] <cygx> o/

[19:13] *** cygx left
[19:43] <Geth> ¦ rakudo: 8b93ec9f50 | (Elizabeth Mattijsen)++ | 4 files

[19:43] <Geth> ¦ rakudo: Give QuantHashes proper .of / keyof methods

[19:43] <Geth> ¦ rakudo: 

[19:43] <Geth> ¦ rakudo: So that hyper methods may actually properly recognize them.

[19:43] <Geth> ¦ rakudo: 

[19:43] <Geth> ¦ rakudo: Note that properly parameterizing Associative gave rise to all sort of weird

[19:43] <Geth> ¦ rakudo: errors during the building of the setting.  Which is why the local overrides.

[19:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8b93ec9f50

[19:48] *** reportable6 left
[19:49] <nine> .tell cygx I've been thinking about that for years actually :) The trick is to find the end of the v5 block. If you can do that, the rest seems easy. https://metacpan.org/pod/PPR seems to be the best bet for that

[19:49] <yoleaux> nine: I'll pass your message to cygx.

[19:49] *** reportable6 joined
[19:49] *** ChanServ sets mode: +v reportable6

[19:49] *** p6bannerbot sets mode: +v reportable6

[19:51] *** patrickb joined
[19:51] *** p6bannerbot sets mode: +v patrickb

[20:31] *** lgtaube joined
[20:32] *** p6bannerbot sets mode: +v lgtaube

[20:44] <Kaiepi> for implementing getsockopt/setsockopt support, should different vms be able to use different socket options?

[20:44] <Kaiepi> the jvm in particular is lacking a lot of useful options

[20:50] <japhb> Kaiepi: I believe the JVM is similarly impoverished WRT signals and such.  I think we let it be.

[21:17] *** pmurias joined
[21:17] *** p6bannerbot sets mode: +v pmurias

[21:30] *** brrt joined
[21:31] *** patrickb left
[21:31] *** p6bannerbot sets mode: +v brrt

[21:34] <pmurias> if I'm running precompiling and running roast tests in the browser what's the sanest way to handle 'use lib' inside them?

[21:35] <pmurias> my current approach is to just comment them with a preprocessing step and add a -I 

[21:47] *** brrt left
[21:55] *** robertle_ joined
[21:56] *** p6bannerbot sets mode: +v robertle_

[22:06] *** robertle_ left
[22:14] <b2gills> Call to anyone who uses StackOverflow, discussion of adding [raku] as a synonym for [perl6]: https://meta.stackoverflow.com/q/376267/1337

[22:30] * lizmat has answered

[23:16] <AlexDaniel> b2gills: how can the synonym idea work?

[23:16] <AlexDaniel> b2gills: does it mean that two tags will be added to each question, or that either one will work fine?

[23:17] <b2gills> If you try to tag a post with [raku], it will have the [perl6] tag instead

[23:20] <AlexDaniel> “Whenever you see questions being repeatedly tagged with the wrong or incorrect tag -- or multiple tags that mean the same thing -- it's a good idea to propose a tag synonym.”

[23:21] <AlexDaniel> I don't really like the idea of replacing ｢raku｣ with ｢perl6｣, but it seems to be the stackoverflow way to deal with this situation

[23:25] <b2gills> If Raku catches on, it can be swapped

[23:26] <AlexDaniel> yeah

[23:27] <AlexDaniel> b2gills: so what exactly is preventing me or anybody else to click the button to suggest a synonym?

[23:27] <b2gills> The number in the name of Perl6

[23:28] <b2gills> The code behind SO thinks that Perl6 is a version of Perl

[23:28] <b2gills> Trust me, I tried that first.

[23:29] <AlexDaniel> “Version specific synonyms can only be created by moderators”

[23:29] <AlexDaniel> hehehe

[23:30] <AlexDaniel> b2gills: maybe you should add that to your thread

[23:31] <AlexDaniel> that moderator intervention is required because of technical limitations…

[23:36] *** pmurias left
[23:36] <b2gills> I was on meta.SO in the very beginning, that used to be the only way to ask for tag synonyms

[23:39] <jdv79> why can't they just be tagged as both or one or the other?

[23:40] <b2gills> There are rules that have been developed over time. Such an action will not be looked upon favorably.

[23:41] <AlexDaniel> tagging with both means that someone will have to run around and add tags, which is exactly what synonyms are trying to solve

[23:41] <AlexDaniel> and keeping them separate is just wrong, it's all about the same language

[23:49] *** lizmat left
