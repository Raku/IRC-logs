[00:49] <Geth> ¦ star/fix-panda-jvm: 0abaabaf0f | (Zoffix Znet)++ | tools/build/Makefile.in

[00:49] <Geth> ¦ star/fix-panda-jvm: Swap panda to zef for JVM build

[00:49] <Geth> ¦ star/fix-panda-jvm: review: https://github.com/rakudo/star/commit/0abaabaf0f

[00:50] <Geth> ¦ star: zoffixznet++ created pull request #109: Swap panda to zef for JVM build

[00:50] <Geth> ¦ star: review: https://github.com/rakudo/star/pull/109

[01:45] <Geth> ¦ rakudo: ec5edcaec1 | (Zoffix Znet)++ | 2 files

[01:45] <Geth> ¦ rakudo: Fix make test on Windows

[01:45] <Geth> ¦ rakudo:

[01:45] <Geth> ¦ rakudo: It ain't got `strlen` in its standard library, so

[01:45] <Geth> ¦ rakudo: bake our own lib for the test and use that instead.

[01:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ec5edcaec1

[02:55] <Geth> ¦ rakudo/ratlab-fattish-rat: c52a6fb3b2 | (Zoffix Znet)++ | 2 files

[02:55] <Geth> ¦ rakudo/ratlab-fattish-rat: Crude trial impl of MidRat/MidRatStr

[02:55] <Geth> ¦ rakudo/ratlab-fattish-rat: review: https://github.com/rakudo/rakudo/commit/c52a6fb3b2

[02:58] <Geth> ¦ rakudo: 26522e8acd | (Zoffix Znet)++ | docs/archive/2018-03-04--Polishing-Rationals.md

[02:58] <Geth> ¦ rakudo: Publish rev3 of "Polishing Rationals" proposal

[02:58] <Geth> ¦ rakudo:

[02:58] <Geth> ¦ rakudo: - Changes proposal of using RatStr as Rat/FatRat "allomorph"

[02:58] <Geth> ¦ rakudo:     into `MidRat` type that is the actual Rat/FatRat allomorph

[02:58] <Geth> ¦ rakudo:     (and `MidRatStr` being a `MidRat`/`Str` allomorph)

[02:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/26522e8acd

[06:34] <Geth> ¦ roast: ae92e139ab | usev6++ | S32-io/tell.t

[06:34] <Geth> ¦ roast: Fix quoting for fudge message

[06:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ae92e139ab

[07:41] <Geth> ¦ star: 0abaabaf0f | (Zoffix Znet)++ | tools/build/Makefile.in

[07:41] <Geth> ¦ star: Swap panda to zef for JVM build

[07:41] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/0abaabaf0f

[07:41] <Geth> ¦ star: 95fc4c0376 | (Steve Mynott)++ (committed using GitHub Web editor) | tools/build/Makefile.in

[07:42] <Geth> ¦ star: Merge pull request #109 from rakudo/fix-panda-jvm

[07:42] <Geth> ¦ star:

[07:42] <Geth> ¦ star: Swap panda to zef for JVM build

[07:42] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/95fc4c0376

[10:18] <[Tux]> Rakudo version 2018.02.1-136-g26522e8ac - MoarVM version 2018.02-33-ge639691a7

[10:18] <[Tux]> csv-test-xs-20      0.422 -  0.452

[10:18] <[Tux]> csv-ip5xs           0.810 -  0.812

[10:18] <[Tux]> test-t --race       1.077 -  1.081

[10:18] <[Tux]> test-t              2.601 -  2.618

[10:18] <[Tux]> csv-ip5xs-20        7.650 -  7.740

[10:18] <[Tux]> test                9.070 -  9.108

[10:18] <[Tux]> test-t-20 --race   17.057 - 17.649

[10:18] <[Tux]> csv-parser         36.638 - 36.772

[10:18] <[Tux]> test-t-20          45.972 - 47.449

[12:15] <Geth> ¦ star: c830bb063b | (Steve Mynott)++ | tools/build/Makefile.in

[12:15] <Geth> ¦ star: zef-m to zef-j, probably still doesn't work

[12:15] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/c830bb063b

[14:15] <Geth> ¦ rakudo/ratlab-role: 79bf17f53c | (Zoffix Znet)++ | 2 files

[14:15] <Geth> ¦ rakudo/ratlab-role: Stash mix-in-a-role approach as laternative to MidRat

[14:15] <Geth> ¦ rakudo/ratlab-role:

[14:15] <Geth> ¦ rakudo/ratlab-role: Doesn't compile, but I see a problem with it already and

[14:15] <Geth> ¦ rakudo/ratlab-role: giving up on it for now.

[14:15] <Geth> ¦ rakudo/ratlab-role: review: https://github.com/rakudo/rakudo/commit/79bf17f53c

[14:20] <jnthn> m: say Rat(+"1e-8")

[14:20] <camelia> rakudo-moar 26522e8ac: OUTPUT: «0␤»

[14:20] <jnthn> m: say FatRat(+"1e-8")

[14:20] <camelia> rakudo-moar 26522e8ac: OUTPUT: «0␤»

[14:20] <jnthn> Am I wrong to be surprsied that comes out as 0?

[14:21] <jnthn> m: say (+"1e-8").Num

[14:21] <camelia> rakudo-moar 26522e8ac: OUTPUT: «1e-08␤»

[14:21] <jnthn> m: say (+"1.5e-8").Num

[14:21] <camelia> rakudo-moar 26522e8ac: OUTPUT: «1.5e-08␤»

[14:21] <jnthn> m: say (+"1.5e-8").Rat

[14:21] <camelia> rakudo-moar 26522e8ac: OUTPUT: «0␤»

[14:24] <dogbert2> Zoffix: speaking about Rats. It looks as if your commit https://github.com/rakudo/rakudo/commit/f6e25b54ea18ba7bd7d7861537d2439933000cb3 might have fixed RT #116423

[14:24] <synopsebot> RT#116423 [new]: https://rt.perl.org/Ticket/Display.html?id=116423 [BUG] say 1.0000000000000000000000000000001 makes wrong denominator

[14:25] <Zoffix> jnthn: sorta. The default epsilon in Num -> Rat is 1e-6

[14:25] <Zoffix> m: say (+"1.5e-8").Rat: 1e-8

[14:26] <camelia> rakudo-moar 26522e8ac: OUTPUT: «0.000000015␤»

[14:26] <Zoffix> maybe it should be bumped to -15 or whatever the max mantissa in Num is

[14:27] <Zoffix> s: 0e0, 'Rat'

[14:27] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/26522e8ac/src/core/Num.pm6#L46

[14:28] <Zoffix> maybe not... "# However, to find that Rational would take more processing."

[14:30] <Zoffix> m: say 1.0000000000000000000000000000001.denominator.log: 2

[14:30] <camelia> rakudo-moar 26522e8ac: OUTPUT: «102.979770941508␤»

[14:31] <Zoffix> dogbert17: not really, but that's what the "Polishing Rationals" work proposal will address.

[14:31] <dogbert2> aha

[14:31] <jnthn> Zoffix: ah, thanks

[14:32] <dogbert2> m: say 1.0000000000000000000000000000001

[14:32] <camelia> rakudo-moar 26522e8ac: OUTPUT: «1.0000000000000000000000000000001␤»

[14:32] <Zoffix> m: say 1.1111111111111111111111111111111111111111111111111

[14:32] <camelia> rakudo-moar 26522e8ac: OUTPUT: «1.11111111111111110716365146799944341182708740234375␤»

[14:32] <dogbert2> and it all came crashing down :-)

[14:34] <dogbert2> m: sub postfix:{}($a) { say "$a bracey brace" }; 42{}

[14:34] <camelia> rakudo-moar 26522e8ac: OUTPUT: «===SORRY!===␤This type cannot unbox to a native string: P6opaque, Block␤»

[14:35] <Zoffix> m: sub postfix:{}(|) {}

[14:35] <camelia> rakudo-moar 26522e8ac: OUTPUT: «===SORRY!===␤This type cannot unbox to a native string: P6opaque, Block␤»

[14:35] <Zoffix> Locally I get "Internal error: find_var_decl could not find $_"

[14:37] <dogbert2> Zoffix: the message you got is mentioned in RT #114554

[14:37] <synopsebot> RT#114554 [open]: https://rt.perl.org/Ticket/Display.html?id=114554 [BUG] Definition of zero-length postfix operator wrongly allowed in Rakudo

[14:53] <Zoffix> Looks like there's also a bug with colonpaired constants being parsed as categoricals for subs or something

[14:53] <Zoffix> m: constant x:<x>

[14:53] <camelia> rakudo-moar 26522e8ac: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot add tokens of category 'x'␤at <tmp>:1␤------> 3constant x:<x>7⏏5<EOL>␤»

[14:54] <Zoffix> m: constant infix:<z> = *+*; say 4 z 2

[14:54] <camelia> rakudo-moar 26522e8ac: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '&infix:<z>' is not declared␤at <tmp>:1␤------> 3constant infix:<z> = *+*; say 4 7⏏5z 2␤»

[14:54] <Zoffix> m: constant &infix:<z> = *+*; say 4 z 2

[14:54] <camelia> rakudo-moar 26522e8ac: OUTPUT: «6␤»

[14:54] <Zoffix> m: BEGIN my &infix:<z> = *+*; say 4 z 2

[14:54] <camelia> rakudo-moar 26522e8ac: OUTPUT: «6␤»

[14:54] <Zoffix> oh, I guess that's normal then

[14:56] <dogbert2> Zoffix: I'm rummaging through RT looking for issues which can be closed

[14:59] <Zoffix> m: my $z:{:42foo}

[14:59] <camelia> rakudo-moar 26522e8ac: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You can't adverb $z␤at <tmp>:1␤------> 3my $z:{:42foo}7⏏5<EOL>␤»

[14:59] <Zoffix> m: my \z:{:42foo}

[14:59] <camelia> rakudo-moar 26522e8ac: OUTPUT: «===SORRY!===␤Cannot find method 'ast' on object of type NQPMu␤»

[15:01] <Zoffix> added as comment on 114554

[15:17] <dogbert2> jnthn: is stuff like this allowed?  'Thread.start({ say "entering"; require LWP::Simple; say "leaving" })'  i.e. require in a thread?

[15:18] <jnthn> dogbert2: Should be OK

[15:18] <jnthn> Though hmm, one might race on global merging, but we can protect that if it ain't already

[15:19] <dogbert2> cool, then it might be possible to close, if tests are available, RT #126587

[15:19] <synopsebot> RT#126587 [new]: https://rt.perl.org/Ticket/Display.html?id=126587 [SEGV] require inside thread segfault hang

[15:19] <dogbert2> because it seems to work and valgrind does not complain

[19:20] <Geth> ¦ roast: 3222358fe8 | (Zoffix Znet)++ | S12-introspection/meta-class.t

[19:20] <Geth> ¦ roast: Spec failed .^find_method/.^lookup

[19:20] <Geth> ¦ roast:

[19:20] <Geth> ¦ roast: It returns nqp::null, which HLLized to Mu. While that differs from

[19:20] <Geth> ¦ roast: `Nil` we return in many other places to indicate "no value", IMO

[19:20] <Geth> ¦ roast: it's OK to deviate from that convention in lower-level Metamodel

[19:20] <Geth> ¦ roast: code, as we can then rip the benefits of simpler testing of return

[19:20] <Geth> ¦ roast: value (e.g. nqp::isnull(nqp::callmethod(Str.HOW, :name<lookup>, Str, "bar")))

[19:20] <Geth> ¦ roast: We also use nqp::null in a bunch of other Meta methods, like

[19:20] <Geth> ¦ roast: ::Versioning.ver and ::MethodContainer.cache_get

[19:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3222358fe8

[19:24] <Geth> ¦ roast: a8a2cbd17e | (Zoffix Znet)++ | S12-introspection/meta-class.t

[19:24] <Geth> ¦ roast: Revert "Spec failed .^find_method/.^lookup"

[19:24] <Geth> ¦ roast:

[19:24] <Geth> ¦ roast: This reverts commit 3222358fe87c5cd1f66aaedef16ecba36d52dbb2.

[19:24] <Geth> ¦ roast:

[19:24] <Geth> ¦ roast: Just spotted a description in the docs that I like better:

[19:24] <Geth> ¦ roast: "If no method can be found, it returns a VM-specific sentinel

[19:24] <Geth> ¦ roast: value (typically a low-level NULL value)."

[19:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a8a2cbd17e

[19:32] <AlexDaniel> releasable6: status

[19:32] <releasable6> AlexDaniel, Next release in 7 days and ≈23 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[19:33] <Geth> ¦ roast: 931e8d0e17 | (Zoffix Znet)++ | S12-introspection/meta-class.t

[19:33] <Geth> ¦ roast: Vaguelly spec failed .^find_method/.^lookup

[19:33] <Geth> ¦ roast:

[19:33] <Geth> ¦ roast: Spec that one can do a .defined test to check whether

[19:33] <Geth> ¦ roast: anything was found, but be vague about the actual value, to

[19:33] <Geth> ¦ roast: allow impls to use whatever value they get the most benefit from.

[19:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/931e8d0e17

[19:43] <Geth> ¦ nqp: 7bc7ff9b0b | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/io/StandardWriteHandle.java

[19:43] <Geth> ¦ nqp: [JVM] Keep track of bytes written to stdout/err

[19:43] <Geth> ¦ nqp:

[19:43] <Geth> ¦ nqp: Makes test for RT #132254 pass.

[19:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/7bc7ff9b0b

[19:43] <synopsebot> RT#132254 [resolved]: https://rt.perl.org/Ticket/Display.html?id=132254 [WIN32] $*OUT.tell always gives 0

[20:06] <dogbert17> m: 1 + Numeric.new # ho hum

[20:06] <camelia> rakudo-moar 26522e8ac: OUTPUT: «WARNINGS for <tmp>:␤MoarVM panic: Memory allocation failed; could not allocate 83968 bytes␤»

[20:16] <Geth> ¦ roast: 1facfbf4b3 | usev6++ | S05-substitution/subst.t

[20:16] <Geth> ¦ roast: Run test (todo) that doesn't die anymore

[20:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1facfbf4b3

[22:55] <gfldex> jnthn: was it a deliberate choice to have Channel.receive throw instead of returning a Failure?

[22:56] <timotimo> someone could have sent a failure across the channel

[22:59] <gfldex> Undefinedness is hard. Let's go shopping! :->

[23:10] <jnthn> gfldex: Yes

[23:11] <jnthn> Note that for $channel.list { } and whenever $channel { } both handle termination "naturally" by ending the loop.
