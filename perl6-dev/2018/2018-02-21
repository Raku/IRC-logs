[00:01] <timotimo> MasterDuke: it should be possible to use a factor of 100 instead of 10 and get a noticable speedup - it'll be a bit more complicated, though

[00:07] <MasterDuke> timotimo: ah, i think that fast integer printing link you pointed out a while ago said something similar. i'll take another look at what it does

[00:08] <timotimo> right; that one's limited to integers, but that shouldn't stop us :)

[01:20] <MasterDuke> what am i missing? isn't the `while $fract` here https://github.com/rakudo/rakudo/blob/master/src/core/Rational.pm#L102 redundant given the `if $fract` here https://github.com/rakudo/rakudo/blob/master/src/core/Rational.pm#L97 ?

[01:33] <MasterDuke> in a related question, is anyone else seeing a bunch of test and spectest fails at rakudo HEAD?

[01:39] <MasterDuke> ok, looks like that `$fract and` in the while is needed

[01:49] <japhb> Zoffix++  # Good post on versioning

[08:49] <lizmat> Files=1235, Tests=76224, 317 wallclock secs (14.91 usr  5.34 sys + 2170.43 cusr 214.78 csys = 2405.46 CPU)

[08:58] * lizmat hopes nine or ugexe will be able to help at https://stackoverflow.com/questions/48899148/how-can-i-tell-programmatically-if-a-perl-6-module-is-installed

[09:14] <lizmat> m: chop(Nil)

[09:14] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «Cannot resolve caller chop(Nil); none of these signatures match:␤    (Cool:D $s --> Str:D)␤    (Cool:D $s, $n --> Str:D)␤  in block <unit> at <tmp> line 1␤␤»

[09:14] <lizmat> m: chomp(Nil)

[09:14] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «Parameter '$s' of routine 'chomp' must be an object instance of type 'Cool', not a type object of type 'Nil'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[09:15] <lizmat> whar would be the better error message, assuming we want similar error messages for this ?

[10:01] <jnthn> Hm, isn't that just a multi/only difference?

[10:06] <Geth> ¦ nqp: 66f8da23c2 | pmurias++ | 3 files

[10:06] <Geth> ¦ nqp: [js] Implement a basic CStruct

[10:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/66f8da23c2

[10:12] <Geth> ¦ rakudo: cdb45fa5a6 | (Elizabeth Mattijsen)++ | src/core/Cool.pm

[10:12] <Geth> ¦ rakudo: Make sub chomp/flip/index/ord/lc/uc/fc/tc/tclc/indices a multi

[10:12] <Geth> ¦ rakudo:

[10:12] <Geth> ¦ rakudo: sub rindex was already a multi, oddly enough

[10:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cdb45fa5a6

[10:47] <Geth> ¦ rakudo: e3c4db732b | (Elizabeth Mattijsen)++ | src/core/Date.pm

[10:47] <Geth> ¦ rakudo: Fix various sleep() issues

[10:47] <Geth> ¦ rakudo:

[10:47] <Geth> ¦ rakudo: - sleep(*) didn't work

[10:47] <Geth> ¦ rakudo: - sleep-timer(Inf) returned immediately

[10:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e3c4db732b

[12:12] <Zoffix> huggable: module source

[12:12] <huggable> Zoffix, Get installed module's source: https://gist.github.com/niner/06792102587a79940294

[12:12] <Zoffix> lizmat, based on ^ that gist, what the OP got is as simple as it gets. Here's a potential answer, if you wanted to post it: https://gist.github.com/zoffixznet/8a73776b3cd7e3b3df2c02c242dc8763

[12:28] <tbrowder> ping: nqp PRs #414 and #417 are awaiting decisions from the head shed...

[13:57] <tbrowder> i have an rfc filed to remove :caption from the pod %config hash and would like to have it removed in 6.d. is there a branch of rakudo devoted to prep for 6.d so PRs can be made?

[13:57] <tbrowder> likewise for roast?

[15:33] <Geth> ¦ nqp: 2ca86be25c | pmurias++ | src/vm/js/nqp-runtime/reprs.js

[15:33] <Geth> ¦ nqp: [js] Make nqp::bindpos_i return the value it gets when storing into uint array

[15:33] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2ca86be25c

[15:33] <Geth> ¦ nqp: 1aecfc7200 | pmurias++ | src/vm/js/nqp-runtime/ctx.js

[15:33] <Geth> ¦ nqp: [js] Handle the case when an exception is found in an outer no longer caller scope

[15:33] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1aecfc7200

[15:33] <Geth> ¦ nqp: b57d933fdc | pmurias++ | src/vm/js/Operations.nqp

[15:33] <Geth> ¦ nqp: [js] Make nqp::settypecache decont

[15:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b57d933fdc

[17:38] <dogbert17> m: sub double() is rw { my $storage = 0; Proxy.new( FETCH => method () { say "Fetch"; $storage * 2 }, STORE => method ($new) { say "Store"; $storage = $new }, ) }; my $doubled := double(); $doubled = 4; say $doubled;

[17:38] <camelia> rakudo-moar e3c4db732: OUTPUT: «Store␤Fetch␤Fetch␤Fetch␤Fetch␤Fetch␤Fetch␤Fetch␤Fetch␤Fetch␤Fetch␤Fetch␤8␤»

[17:39] <dogbert17> why is FETCH called so many times, I don't get it

[17:48] <[Coke]> 15-year-old: Don't worry about it.

[17:56] <jnthn> dogbert17: Multi-dispatch to say needs the value in the container to see what type it is. Signature binding needs similar. That probably accounts for much of it

[17:56] <jnthn> And .say calls .gist

[17:56] <jnthn> So that's potentially another dispatch and method call that needs the value to see its type

[17:58] <dogbert17> so it's me putting the say in there which skews the results?

[17:59] <jnthn> m: sub double() is rw { my $storage = 0; Proxy.new( FETCH => method () { say "Fetch"; $storage * 2 }, STORE => method ($new) { say "Store"; $storage = $new }, ) }; my $doubled := double(); $doubled = 4; my $copy = $doubled; say $copy

[17:59] <camelia> rakudo-moar e3c4db732: OUTPUT: «Store␤Fetch␤8␤»

[17:59] <jnthn> Yup, looks like :)

[18:00] <dogbert17> shouldn't STORE behave similarly then?

[18:00] <jnthn> Why would it?

[18:00] <jnthn> STORE only happens when assignment happens, which is an explicit operation in the program

[18:00] <jnthn> FETCH happens as often as anything wants the value in the container

[18:01] <jnthn> I sometimes think we want something a bit like Proxy but that only does the STORE half of it

[18:01] <jnthn> That is, custom STORE logic

[18:02] <dogbert17> m: sub double() is rw { my $storage = 0; Proxy.new( FETCH => method () { $i++; $storage * 2 }, STORE => method ($new) { say "Store"; $storage = $new }, ) }; my $doubled := double(); $doubled = 4; say $doubled; say $i;

[18:02] <camelia> rakudo-moar e3c4db732: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$i' is not declared␤at <tmp>:1␤------> 3ge = 0; Proxy.new( FETCH => method () { 7⏏5$i++; $storage * 2 }, STORE => method ($␤»

[18:02] <jnthn> But it's just putting it into a slot

[18:02] <dogbert17> m: my $i =0; sub double() is rw { my $storage = 0; Proxy.new( FETCH => method () { $i++; $storage * 2 }, STORE => method ($new) { say "Store"; $storage = $new }, ) }; my $doubled := double(); $doubled = 4; say $doubled; say $i;

[18:02] <camelia> rakudo-moar e3c4db732: OUTPUT: «Store␤8␤11␤»

[18:02] <dogbert17> remove the 'say' also shows 11 accesses to FETCH

[18:03] <dogbert17> *removing

[18:03] <jnthn> The say is still there?

[18:04] <jnthn> Home time, bbl

[18:04] <dogbert17> nope, removed it and incremented a variable instead

[18:06] <dogbert17> m: my $i = 0; sub double() is rw { my $storage = 0; Proxy.new( FETCH => method () { $i++; $storage * 2 }, STORE => method ($new) { $storage = $new }, ) }; my $doubled := double(); $doubled = 4; say $doubled; say "$i calls to FETCH";

[18:06] <camelia> rakudo-moar e3c4db732: OUTPUT: «8␤11 calls to FETCH␤»

[18:06] <AlexDaniel> tbrowder: fwiw it'd help if you write it like this: NQP#414 NQP#417 (so that the bot generates direct links to these PRs)

[18:06] <synopsebot> NQP#414 [open]: https://github.com/perl6/nqp/pull/414 add a test for stderr in spawnprocasync

[18:06] <synopsebot> NQP#417 [open]: https://github.com/perl6/nqp/pull/417 rename IO sub "spew" to "spurt"

[18:07] <AlexDaniel> tbrowder: as for v6.d, that's not how it works. Rakudo master should support *both: v6.c and v6.d

[18:08] <AlexDaniel> tbrowder: well, at least in theory. See this for more info: https://rakudo.party/post/Perl6-On-Specs-Versioning-Changes-And-Breakage

[18:08] <dogbert17> jnthn: sorry, you meant the 'say $doubled' not the say I had put into FETCH, I get it now

[18:09] <tbrowder> ok, so how is code done for 6.d only?

[18:09] * dogbert17 is a bit dense atm, perhaps due to not having had dinner yet

[18:10] <tbrowder> i’ll try to remember how to refer to prs

[18:10] <AlexDaniel> m: here's a short example: https://github.com/rakudo/rakudo/commit/cd043f2ae4

[18:10] <camelia> rakudo-moar e3c4db732: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3here's a short example: https:7⏏5//github.com/rakudo/rakudo/commit/cd043f␤    expecting any of:␤        colon pair␤»

[18:10] <AlexDaniel> oops

[18:10] <AlexDaniel> tbrowder: ↑

[18:10] <AlexDaniel> didn't mean that to be evaled

[18:10] <AlexDaniel> m: use v6.c; use Test; is_approx 5, 5;

[18:10] <camelia> rakudo-moar e3c4db732: OUTPUT: «ok 1 - ␤»

[18:10] <AlexDaniel> m: use v6.d.PREVIEW; use Test; is_approx 5, 5;

[18:10] <camelia> rakudo-moar e3c4db732: OUTPUT: «ok 1 - ␤»

[18:11] <AlexDaniel> hmmmmmmm…

[18:11] <AlexDaniel> I wonder what I'm doing wrong

[18:12] <AlexDaniel> e: use v6.d.PREVIEW; use Test; is_approx 5, 5;

[18:12] <evalable6> AlexDaniel, rakudo-moar e3c4db732: OUTPUT: «ok 1 - ␤Saw 1 occurrence of deprecated code.␤=============================================…»

[18:12] <evalable6> AlexDaniel, Full output: https://gist.github.com/cd7cddcb82dec95dd2cc3d735ab59c6f

[18:12] <AlexDaniel> using the wrong bot I guess

[19:48] <Zoffix> releasable6: status

[19:48] <releasable6> Zoffix, Next release in 23 days and ≈23 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[19:48] <releasable6> Zoffix, Details: https://gist.github.com/a33615552cdf93b8cef9331bcdc142dc

[19:48] <Zoffix> I think I messed up the whatever currier and it made it into the release :'(

[19:49] <AlexDaniel> Zoffix: what's the bug? How to reproduce?

[19:49] <Zoffix> R #1550

[19:49] <Zoffix> R#1550

[19:49] <synopsebot> R#1550 [open]: https://github.com/rakudo/rakudo/issues/1550 [regression] Segfault in one liner that used to work in 2018.01

[19:51] <AlexDaniel> that's not cool :)

[19:51] <Zoffix> m: my &f = *.self; .say for map 1/*.&f, ^250+1

[19:51] <camelia> rakudo-moar e3c4db732: OUTPUT: «(signal SEGV)1␤»

[19:51] <Zoffix> slightly golfed version

[19:54] <AlexDaniel> I think we can decide what to do with it once there's a fix on the table :)

[19:54] <Zoffix> Yeah. Gonna take a look at it in ~3h

[19:55] <Zoffix> ZofBot: I thought Zoffixes were perfect!

[19:55] <ZofBot> Zoffix, 460 csv-ip5xs 0

[19:55] <Zoffix> That's it. Time for a brain reset.

[19:58] <AlexDaniel> fwiw I don't mind doing a point release. I find it a bit surprising that none of the modules failed because of this, which tells me that we don't have enough modules in the ecosystem :P

[20:01] <Geth> ¦ nqp: bf6067551c | (Tom Browder)++ | 3 files

[20:01] <Geth> ¦ nqp: rename IO sub "spew" to "spurt"

[20:01] <Geth> ¦ nqp:

[20:01] <Geth> ¦ nqp: changes to file "src/core/IO.nqp":

[20:01] <Geth> ¦ nqp: + rename sub "spew" to "spurt" for consistency with

[20:01] <Geth> ¦ nqp:   the rest of Perl

[20:01] <Geth> ¦ nqp:

[20:01] <Geth> ¦ nqp: changes to file "t/nqp/019-file-ops.t":

[20:02] <Geth> ¦ nqp: <…commit message has 8 more lines…>

[20:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/bf6067551c

[20:02] <Geth> ¦ nqp: cb4297b37b | (Jonathan Worthington)++ (committed using GitHub Web editor) | 3 files

[20:02] <Geth> ¦ nqp: Merge pull request #417 from tbrowder/spew2spurt

[20:02] <Geth> ¦ nqp:

[20:02] <Geth> ¦ nqp: rename IO sub "spew" to "spurt"

[20:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cb4297b37b

[20:03] <jnthn> Zoffix: Even if you messed up, it's no excuse for a SEGV...

[20:03] <jnthn> So there's probably some Moar bug too

[20:05] <Zoffix> m: https://gist.github.com/zoffixznet/c03288a8eb515f6aeedc0dc88ff9af5d

[20:05] <camelia> rakudo-moar e3c4db732: OUTPUT: «Usage:␤  <tmp> <raw-brain> ␤»

[20:06] <Zoffix> gah... got burned by running with `perl` :P

[20:06] <Zoffix> Or rather having it in the shebang

[20:07] <Zoffix> ZofBot: how was the procedure?

[20:07] <ZofBot> Zoffix, International donations are gratefully accepted, but we cannot make any statements concerning tax treatment of donations received from outside the United States

[20:27] <dogbert17> if I run Zoffix example on MoarVM master it fails here: https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L5591

[20:29] <Zoffix> dogbert17: how do you find that out?

[20:30] <dogbert17> ./perl6-gdb-m -e 'my &f = *.self; .say for map 1/*.&f, ^250+1'

[20:31] <Zoffix> Yeah and then?

[20:31] <dogbert17> bt

[20:31] <Zoffix> And then? :)

[20:31] <Zoffix> bt just shows me this: https://gist.github.com/zoffixznet/71263c3e531e6fa25fdd256979b298f3

[20:31] <dogbert17> look at the output, I get: #0  MVM_interp_run (tc=0x804c5f8, initial_invoke=0xb7c7c914 <toplevel_initial_invoke>, invoke_data=0x8096cb0) at src/core/interp.c:5591

[20:32] <Zoffix> oh, those I have as ??

[20:32] <dogbert17> you must build MoarVM with debug info

[20:32] <AlexDaniel> Zoffix: have to compile moarvm with debug symbols

[20:33] <AlexDaniel> hmmm I have this in my command history: perl Configure.pl --gen-moar --gen-nqp --backends=moar --moar-option=--debug=3

[20:33] <AlexDaniel> I wonder if it works

[20:33] <dogbert17> perl Configure.pl --debug --no-optimize --prefix=../../install/

[20:33] <Zoffix> Oh, right, I thought I had it turned on, but it was only doing -no-ptim,ze: https://github.com/zoffixznet/z/blob/master/lib/RDev.pm6#L197

[20:34] <dogbert17> an easy mistake to make

[20:34] <AlexDaniel> huggable: breakage

[20:34] <huggable> AlexDaniel, <AlexDaniel> don't worry, all important features are well-covered somewhere! :)

[20:34] <Zoffix> Haha :)

[20:34] <Zoffix> Oh hey, and I said it *about whatever optimizer* didn't I? :)

[20:34] <AlexDaniel> ↑ in this case it was covered by code-golf.io!

[20:35] <Zoffix> *whatever currier I mean

[20:35] <AlexDaniel> https://irclog.perlgeek.de/perl6/2018-02-04#i_15775868

[20:35] <AlexDaniel> xDDD

[20:35] <AlexDaniel> oh my xD

[20:35] <Zoffix> lol yeah, the currier :)

[20:38] <Zoffix> dogbert17: do I need to rebuild rakudo too?  I have it now as ` self!run-moar: «perl Configure.pl "--prefix=$!inst" --no-optimize --debug»;` but still get ?? for first lines

[20:38] <dogbert17> I don't

[20:39] <dogbert17> did your compiled MoarVM end up in the right place?

[20:39] <dogbert17> guess it depends on your setup

[20:40] <Zoffix> dunno, but if I go in manually to do `perl Configure.pl --prefix=/home/zoffix/R/install --debug --no-optimize` it completes right away, 'cause presumably it did everything already

[20:40] <tbrowder> AlexDaniel: i see you approved NQP#414 so that means it's ok for me to do the merge?

[20:40] <synopsebot> NQP#414 [open]: https://github.com/perl6/nqp/pull/414 add a test for stderr in spawnprocasync

[20:41] <Zoffix> and `cat perl6-gdb-m` shows it's calling `/home/zoffix/R/install/bin/moar` :S

[20:43] <dogbert17> Zoffix: what happens if you try this: MVM_JIT_DISABLE=1 ./perl6-gdb-m -e 'my &f = *.self; .say for map 1/*.&f, ^250+1'

[20:44] <Zoffix> dogbert17: yeah, now it shows stuff.

[20:44] <dogbert17> cool

[20:44] <AlexDaniel> tbrowder: I think it's ok, yea

[20:44] <Zoffix> dogbert17: so what does that mean? :)

[20:45] <dogbert17> do you see the same thing as I do or do you see this line: https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L5733

[20:46] <Geth> ¦ nqp/master: 4 commits pushed by (Tom Browder)++

[20:46] <Geth> ¦ nqp/master: 483d840f79 | add a test for stderr in spawnprocasync

[20:46] <Geth> ¦ nqp/master: 6dd80114c8 | made test for stderr more robust\n+defining the output allows testing on a multilingual system

[20:46] <Geth> ¦ nqp/master: dfb89147b9 | differentiate the expected stdout output from that of stderr

[20:46] <Geth> ¦ nqp/master: a850efd058 | Merge pull request #414 from tbrowder/async-stderr

[20:46] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/cb4297b37bf1...a850efd0587f

[20:46] <Zoffix> dogbert17: I see this now: https://gist.github.com/zoffixznet/9d0dab1d21426a04cfa92b27e8d22720

[20:47] <Zoffix> (and without MVM_JIT_DISABLE, I see this: https://gist.github.com/zoffixznet/174c2461d508573a21e2bac915b9d885 )

[20:48] <dogbert17> yeah, suspect that the JIT is innocent so it's a good idea to turn it off

[20:48] <Zoffix> which I guess is different from yours, because mine actually points to code that does make sense to segv

[20:49] <dogbert17> yes, I suspect your location is the right one

[20:49] <Zoffix> dogbert17: but what if the SEGV were only with JIT? Also, how come having JIT enabled doesn't produce the right backtrace?

[20:49] <Zoffix> So this is NULL (probably) `MVMFrame *f = ((MVMCode *)GET_REG(cur_op, 6).o)->body.outer;` and I guess something in whatever currier makes it so a thing has no outer...

[20:50] <dogbert17> try ' p f' in gdb

[20:50] <dogbert17> p f

[20:52] <dogbert17> I get: (gdb) p f

[20:52] <dogbert17> $1 = (MVMFrame *) 0x0

[20:52] <dogbert17> a null pointer, that's rarely a good sign :-)

[20:54] <dogbert17> it's now that jnthn or timotimo should appear and explain what's going on :-)

[20:54] <jnthn> It's assuming that if the interpreted code survives long enough to be JITted, then it didn't have bounds errors on the outer chain

[20:55] <jnthn> There's even a comment saying so, iirc :)

[21:05] <Zoffix> jnthn: so is merely checking it for null the right fix or should it be fixed somewhere earlier in the food chain?

[21:05] * Zoffix relocates

[21:08] <Geth> ¦ rakudo: 62242caafe | pmurias++ | src/core/VM.pm

[21:08] <Geth> ¦ rakudo: Make $?COMPILATION-ID a proper string

[21:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/62242caafe

[21:09] <dogbert17> in order to avoid confusion, caused by me, the crash is here: https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L5733

[21:11] <dogbert17> seems like a MVMFrame object is null

[21:14] <dogbert17> Zoffix, jnthn: it seems as if MVM_SPESH_DISABLE=1 removes/hides the issue

[21:15] <dogbert17> more specifically MVM_SPESH_INLINE_DISABLE=1

[21:23] <jnthn> Zoffix: Well, it means there's a bug in the code-gen, but we should probably do a better job of handling that too

[21:39] <jnthn> Zoffix: And yeah, NULL guarding is probably the right thing

[21:39] <jnthn> Though it's kind of annoying to have to do it on such a common thing (lexical lookup)

[22:04] <MasterDuke> m: my $f = 1; --$f; my int $s = 0; for ^100_000 { ++$s unless $f }; say $s; say now - INIT now

[22:04] <camelia> rakudo-moar 62242caaf: OUTPUT: «100000␤0.0352412␤»

[22:04] <MasterDuke> m: my $f = FatRat.new(1, 1); --$f; my int $s = 0; for ^100_000 { ++$s unless $f }; say $s; say now - INIT now

[22:05] <camelia> rakudo-moar 62242caaf: OUTPUT: «100000␤0.21221936␤»

[22:06] <MasterDuke> the FatRat version goes through Numeric.Bool, which is just `self != 0`

[22:06] <MasterDuke> but that causes a REDUCE-ME call in the FatRat

[22:07] <MasterDuke> any reason Rational couldn't have a .Bool that was just `$!numerator != 0` ?

[22:23] <MasterDuke> huh, that takes only half the time, but why does it still go through Mu.Bool first?

[22:27] <MasterDuke> hm, `nqp::p6bool(nqp::istrue($!numerator) && nqp::istrue($!denominator))` or `$!numerator != 0 && $!denominator != 0` ?

[22:27] <MasterDuke> fwiw, just making it `$!numerator != 0` passes spectest

[22:35] <AlexDaniel> m: say ?NaN.FatRat

[22:35] <camelia> rakudo-moar 62242caaf: OUTPUT: «True␤»

[22:35] <AlexDaniel> m: say NaN.FatRat.nude

[22:35] <camelia> rakudo-moar 62242caaf: OUTPUT: «(0 0)␤»

[22:36] <AlexDaniel> MasterDuke: I think it means that the spec needs some extra tests

[22:37] <AlexDaniel> wait but why is it True

[22:54] <Zoffix> dogbert17: yeah, I commented that on the ticket originally :) But I think the bug is in the currier (some info on ticket)

[22:54] <Zoffix> AlexDaniel: well, NaN is true

[22:55] <AlexDaniel> hm… okay

[22:55] <Zoffix> s: NaN.FatRat, 'Bool', \()

[22:55] <AlexDaniel> but then the numerator != 0 trick is not going to work I guess?

[22:55] <Zoffix> s: NaN.FatRat, 'Bool', \()

[22:55] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/62242caaf/src/core/Numeric.pm#L30

[22:56] <Zoffix> AlexDaniel: "trick"? What trick?

[22:56] <AlexDaniel> Zoffix: https://irclog.perlgeek.de/perl6-dev/2018-02-21#i_15843579

[22:57] <dogbert17> Zoffix: that's what I get for not reading the original bug report :-)

[22:58] <Zoffix> m: say so +"a"

[22:58] <camelia> rakudo-moar 62242caaf: OUTPUT: «False␤»

[22:59] <Zoffix> AlexDaniel: well, it's something to think about... With zero-denominator Rationals, in Num view, they have meaning (all True), in Str or other numeric, they're a Failure, and in Rational they're two separate values.

[23:00] <Zoffix> Seems like them being False is captures the widest range of possibilities, maybe

[23:00] <Zoffix> m: with NaN { .so.say; .Rat.so.say; .Rat.Num.so.say }

[23:00] <camelia> rakudo-moar 62242caaf: OUTPUT: «True␤True␤True␤»

[23:00] <Zoffix> But then ^ that would read True; False; True

[23:01] * Zoffix votes to make zero-denominator Rationals `False`

[23:01] <Zoffix> Though note the trick wouldn't work still: 42/0 would mean `False`, not True

[23:03] * lizmat wonders why $?COMPILATION-ID should be a Str rather than a str ?

[23:13] <Zoffix> Actually, no idea what to vote for. If you think about it in terms of "All numerics that are zero are false; the rest are true" then it makes sense for ZDRs to be True

[23:13] <Zoffix> Filed as R#1552

[23:13] <synopsebot> R#1552 [open]: https://github.com/rakudo/rakudo/issues/1552 [@LARRY][RFC] [@LARRY] Booliness of Zero-Denominator Rationals

[23:13] <Zoffix> .ask TimToady would you like to weigh in on this Issue: https://github.com/rakudo/rakudo/issues/1552 [@LARRY][RFC] [@LARRY] Booliness of Zero-Denominator Rationals

[23:13] <yoleaux> Zoffix: I'll pass your message to TimToady.

[23:14] <AlexDaniel> Zoffix: why [@LARRY] in the title when already using the @LARRY label?

[23:14] <jnthn> m: say so NaN

[23:14] <camelia> rakudo-moar 62242caaf: OUTPUT: «True␤»

[23:14] <Zoffix> Force of habbit

[23:14] <lizmat> jnthn: NaN is not zero and not an empty string, so seems correct ?

[23:14] <jnthn> Zoffix: Is there anything in the floating point spec you're aware of either way on wether NaN should be truthy?

[23:15] <Zoffix> jnthn: no, no idea. I didn't read the whole thing.

[23:15] <Zoffix> huggable: ieee

[23:15] <huggable> Zoffix, https://temp.perl6.party/ieee.pdf

[23:16] <jnthn> lizmat: Arguably yes, though given my num $x is (currently) initializzzzzzzzzzzzed to NaN (though that's under discussion) I did wonder about it :)

[23:16] <jnthn> whoa

[23:16] <jnthn> Guess my keyboard is getting sleepy or something :p

[23:17] <Geth> ¦ nqp: tbrowder++ created pull request #421: add a new built-in sub: run-command

[23:17] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/421

[23:17] <teatime> I imagine it takes a trooper of one to keep up w/ you, jnthn

[23:19] <Zoffix> searching for "true" in that ieee doc didn't turn up anything to answer that question

[23:23] <Zoffix> $ ccc 'printf("NaN is %s\n", 0.0/0.0 ? "True" : "False")'

[23:23] <Zoffix> NaN is True

[23:23] <Zoffix> (that's C)

[23:24] <jnthn> *nod*

[23:24] <jnthn> I think it probably should be

[23:24] <jnthn> And can imagine various numerical algorithms relying on that

[23:24] <jnthn> Well, maybe

[23:28] <lizmat> $ 6 'use MONKEY; EVAL {say 123}'

[23:28] <lizmat> EVAL() in Perl 6 is intended to evaluate strings, did you mean 'try'?

[23:28] <lizmat> a better error message for point #6 in https://perl6.online/2018/02/20/62-the-eval-routine-in-perl-6-part-1/

[23:29] <Zoffix> m: use MONKEY; EVAL {say 123}

[23:29] <camelia> rakudo-moar 62242caaf: OUTPUT: «Constraint type check failed in binding to parameter '$code'; expected anonymous constraint to be met but got -> ;; $_? is raw { #`...␤  in block <unit> at <tmp> line 1␤␤»

[23:30] <jnthn> Huh...wonder why that error

[23:30] <Zoffix> s: &EVAL

[23:30] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/62242caaf/src/core/ForeignCode.pm#L28

[23:30] <lizmat> $code is copy where Blob|Cool

[23:31] <jnthn> Hmm

[23:31] <lizmat> jnthn: is there a specific reason why EVAL doesn't have a "standard" proto sub EVAL(|) {*} ?

[23:31] <jnthn> What proto does it have?

[23:31] <lizmat> proto sub EVAL($code is copy where Blob|Cool|Callable, Str() :$lang = 'perl6', PseudoStash :$context, *%n)

[23:32] <jnthn> Curious

[23:33] <jnthn> huh, EVAL moved to src/core/ForeignCode.pm?

[23:33] <Zoffix> Yeah, for blob

[23:33] <lizmat> apparently Zoffix moved it there last Oct

[23:33] <jnthn> Oh, I see

[23:34] <jnthn> I think that factoring was designed to make sure that we can add extra language EVALs as multi candidates

[23:34] <Zoffix> Yeah, it was in a place too early to Blob and I thought the ForeignCode were an OK place to move it (stubbing Blob was meh, due to all the typing parts it needs)

[23:34] <jnthn> Which was a problem in the past

[23:34] <jnthn> Zoffix: I'd probably have moved it to its own EVAL.pm, but no biggie

[23:35] <lizmat> but making it a "normal" proto now wouldn't prevent other languages, no?

[23:35] <lizmat> in fact, wouldn't it make it easier ?

[23:36] <Zoffix> Looking at code, it's basically done that way to throw X::Eval::NoSuchLang.new(:$lang).throw instead of X::MultiNoMatch

[23:36] <Zoffix> m: try EVAL "x", :lang<ZofCode>; say $!.^name

[23:36] <camelia> rakudo-moar 62242caaf: OUTPUT: «X::Eval::NoSuchLang␤»

[23:36] <jnthn> Right

[23:36] <jnthn> It looks like it's been done quite carefully

[23:36] <lizmat> yeah, but that could be handled by a catch-all candidate, no?

[23:36] <jnthn> To do that and to preference languages with compilers registered through the getcomp interface

[23:36] * Zoffix &

[23:37] <jnthn> lizmat: Perhaps not, in that it's dispatching on the langauge name, which is a tie-breaker dispatch

[23:37] <lizmat> ah, ok, I see

[23:37] <jnthn> lizmat: Not saying it can't be changed, just that I remember this was factored differently in the past

[23:38] <jnthn> lizmat: Along the lines of what you're describing, and there was some problem that led to how it is now :)

[23:38] <jnthn> So at the very least I'd look back in the version control history

[23:38] <lizmat> ok, will do, but not now  :-)

[23:38] <jnthn> yeah, fair enough :-)

[23:38] <Zoffix> AlexDaniel: I lied about fixing R#1550 today. Too tired + just got myself a new fancy guitar amp to play with. Maybe tomorrow or Friday the latest is when I'll take care of it.

[23:38] <lizmat> another 450km under the belt today

[23:38] <synopsebot> R#1550 [open]: https://github.com/rakudo/rakudo/issues/1550 [regression] Segfault in one liner that used to work in 2018.01

[23:39] <AlexDaniel> Zoffix: OK, thanks!

[23:39] <jnthn> lizmat: I sure hope that isn't cycling :)

[23:39] <jnthn> (Or it is, but a typo :P)

[23:39] <lizmat> nonono, car...

[23:40] <lizmat> fetching our stuff from FOSDEM and some visits to friends, families and CD stores  :-)

[23:41] <jnthn> ah, nice :)

[23:44] <lizmat> also feeling much better, and the good sort of tired  :-)

[23:46] <Geth> ¦ rakudo: 5ae1bbe17e | (Elizabeth Mattijsen)++ | src/core/ForeignCode.pm

[23:46] <Geth> ¦ rakudo: Make EVAL { ... } give a better error message

[23:46] <Geth> ¦ rakudo:

[23:46] <Geth> ¦ rakudo: This should probably be caught at compile / optimize time.  Inspired by

[23:46] <Geth> ¦ rakudo: point #6 on https://perl6.online/2018/02/20/62-the-eval-routine-in-perl-6-part-1/

[23:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5ae1bbe17e

[23:46] <lizmat> proof of concept ^^^   will look more into it tomorrow  :-)

[23:46] <lizmat> good night&

[23:47] <jnthn> 'night, lizmat o/
