[02:23] <AlexDaniel> Zoffix: I just glanced over https://github.com/perl6/doc/commit/67cadad365 and generally it's an improvement in some way, but I think it's slightly incorrect. You say “the behaviour is a lot more predictable and avoidable than the prose suggests”, but I don't think that it is. Previously it said “You should always expect the C<LEAVE> phaser to be executed before I<anything> else in the block.” and that's a very clear rule of th

[02:23] <AlexDaniel> easy to understand and it's right, even if apocalyptic. Instead you're describing one specific case in detail, which is great but not as useful IMO. Here's an example:

[02:23] <AlexDaniel> m: die; my $x = 42; LEAVE say $x.Int

[02:23] <camelia> rakudo-moar 1c4eebe52: OUTPUT: «No such method 'Int' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[02:24] <AlexDaniel> even if we assume that there's a block, there's still no visible dispatch or anything like that, and all that is irrelevant anyway

[02:25] <AlexDaniel> yes it will die anyway, but it dies on calling .Int on Any

[02:26] <AlexDaniel> IMO this awesome prose about param binding and stuff belongs to the multidispatch section somewhere else in the docs, we can link to it

[02:27] <AlexDaniel> or maybe I'm wrong?

[02:29] <AlexDaniel> like, is code like `my $x = some-large-sub(); LEAVE say $x.Int` part of that trap?

[02:30] <AlexDaniel> if we say no, then we just call that section `LEAVE and Paremeter Binding`, and it'll be correct

[02:30] <AlexDaniel> … and then add another LEAVE trap reminding that things can be undefined at that point

[02:31] <AlexDaniel> m: my $x = 42; LEAVE say $x.Int; INIT die

[02:31] <camelia> rakudo-moar 1c4eebe52: OUTPUT: «No such method 'Int' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[02:32] <AlexDaniel> ok that's more like it, but still too magical

[02:32] <AlexDaniel> anyway, judge yourself if my sleep-deprived ramblings make sense or not

[02:40] <Zoffix> AlexDaniel: no, they don't make too much sense to me, considering they're implying the user doesn't understand at all how LEAVE phaser works, where the trap, as I see it documents the not-so-obvious case where the LEAVE phaser is run *despite param binding failure*. A user even suspected it was a bug on the original Issue: https://github.com/perl6/doc/issues/1539#issuecomment-328120984

[02:41] <AlexDaniel> hmm

[02:41] <AlexDaniel> greppable6: LEAVE

[02:41] <Zoffix> And "You should always expect …"... Why should I always expect? That's not true. It depends on the code I'm executing.

[02:41] <greppable6> AlexDaniel, 481 lines, 88 modules: https://gist.github.com/f340052ce09d5bf0a19a067283b38636

[02:41] <Zoffix> While it makes it sound that LEAVE can run willy-nilly at any time

[02:42] <AlexDaniel> hehe

[02:55] <AlexDaniel> okay then

[03:02] <Zoffix> ZofBot: alrighty, then!

[03:02] <ZofBot> Zoffix, AlexDaniel`, Deleted alert ID 5

[03:02] <AlexDaniel> scary

[03:03] <Zoffix> It's getting sentient

[03:06] <AlexDaniel> ZofBot: robots that are too smart will be deleted also.

[03:06] <ZofBot> AlexDaniel, or just slightly above it, at least for me

[03:25] <Zoffix> .oO( saying things like that is what gets you killed in the robocalypse )

[06:38] <nine> Thanks for the weekly lizmat++

[06:39] <nine> Am I the only one who regularly has these "Wait, I did what? Oh, yes, now I remember..." moments reading the weekly?

[07:07] * lizmat sometimes  :-)

[07:13] <Geth> ¦ rakudo: 8ad7eb398a | (Stefan Seifert)++ | tools/build/Makefile-common-macros.in

[07:13] <Geth> ¦ rakudo: Fix parallel initial build failing

[07:13] <Geth> ¦ rakudo:

[07:13] <Geth> ¦ rakudo: tools/build/check-nqp-version.pl did run and produced a correct nqp-version

[07:13] <Geth> ¦ rakudo: file, but at that point it was already too late. While it was running, make

[07:13] <Geth> ¦ rakudo: tried to check the dependency for other parts and gen/nqp-version was not

[07:13] <Geth> ¦ rakudo: available yet and there was no explicit recipe for creating it either.

[07:13] <Geth> ¦ rakudo:

[07:13] <Geth> ¦ rakudo: Mark the Makefile as .NOTPARALLEL, which gets rid of the whole issue. This is

[07:13] <Geth> ¦ rakudo: a GNU extension however, so the issue may still remain for other makes.

[07:13] <Geth> ¦ rakudo:

[07:13] <Geth> ¦ rakudo: Fix GH #1654

[07:13] <synopsebot> RAKUDO#1654 [open]: https://github.com/rakudo/rakudo/issues/1654 [build][⚠ blocker ⚠] Fresh-clone builds fail with "No rule to make target `gen/nqp-version', needed by `blib/Perl6/ModuleLoader.moarvm'."

[07:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8ad7eb398a

[07:15] <nine> Can we please get rid of support for nmake from the stone age? Working around its limitations is the least productive time ever. I've already had a perfectly working implementation that avoided the above issue while retaining _all_ the benefits, but can't use it due to nmake.

[07:29] <[Tux]> Rakudo version 2018.03-93-g8ad7eb398 - MoarVM version 2018.03-31-gfdb5e4d6b

[07:29] <[Tux]> csv-test-xs-20      0.446 -  0.447

[07:30] <[Tux]> csv-ip5xs           0.904 -  0.918

[07:30] <[Tux]> test-t --race       1.060 -  1.247

[07:30] <[Tux]> test-t              2.547 -  2.583

[07:30] <[Tux]> csv-ip5xs-20        8.752 -  9.103

[07:30] <[Tux]> test                9.206 -  9.293

[07:30] <[Tux]> test-t-20 --race   15.255 - 15.529

[07:30] <[Tux]> csv-parser         37.450 - 38.024

[07:30] <[Tux]> test-t-20          44.446 - 45.915

[07:39] <Geth> ¦ rakudo: 9d784dd0b9 | (Elizabeth Mattijsen)++ | src/core/Iterator.pm6

[07:39] <Geth> ¦ rakudo: Streamline the basic Iterator.push-exactly

[07:39] <Geth> ¦ rakudo:

[07:39] <Geth> ¦ rakudo: Instead of counting up to the given number, copy the given number and count

[07:39] <Geth> ¦ rakudo: down with it, which simplifies the end check.  Makes it about 8% faster.

[07:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9d784dd0b9

[07:42] <Geth> ¦ rakudo: 24ddff73b2 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm6

[07:42] <Geth> ¦ rakudo: Micro-optimize pull-one for -> $a, $b { PHASER foo } case

[07:42] <Geth> ¦ rakudo:

[07:42] <Geth> ¦ rakudo: Use nqp::isconcrete (which returns 0/1) instead of .DEFINITE (which

[07:42] <Geth> ¦ rakudo: returns a full-blown Bool)

[07:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/24ddff73b2

[07:49] <lizmat> m: m: say Buf.new(1,2,3) ~~ Buf.new(1,2,3)   # shouldn't this need to be True ?

[07:49] <camelia> rakudo-moar 8ad7eb398: OUTPUT: «False␤»

[08:05] <Geth> ¦ rakudo: eefccc1857 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm6

[08:05] <Geth> ¦ rakudo: Don't use private methods to create iterators

[08:05] <Geth> ¦ rakudo:

[08:05] <Geth> ¦ rakudo: Prevents the relatively expensive dispatch:<!> runtime lookup

[08:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eefccc1857

[08:43] <Geth> ¦ rakudo: c40f025482 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm6

[08:43] <Geth> ¦ rakudo: Streamline grep :kv .pull-one, make it 1.5x as fast

[08:43] <Geth> ¦ rakudo:

[08:43] <Geth> ¦ rakudo: - use nqp::isconcrete instead of .DEFINITE

[08:43] <Geth> ¦ rakudo: - use nqp::eqaddr instead of =:=

[08:43] <Geth> ¦ rakudo: - use nqp ops more extensively

[08:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c40f025482

[09:15] <pmurias> which multi should be choosen: https://paste.debian.net/1016913/

[09:20] <pmurias> they have the signatures taken from both the export trait for constants and the undefined trait one and the undefined one seems to be choosen here

[09:48] <Geth> ¦ rakudo: 5db9ebc457 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm6

[09:48] <Geth> ¦ rakudo: Streamline grep :p .pull-one, make it 1.5x as fast

[09:48] <Geth> ¦ rakudo:

[09:48] <Geth> ¦ rakudo: - use nqp::eqaddr instead of =:=

[09:48] <Geth> ¦ rakudo: - use nqp ops more extensively

[09:48] <Geth> ¦ rakudo: - do the same for .push-all with similar improvements

[09:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5db9ebc457

[10:03] <jnthn> pmurias: Named parameters only play a tie-breaking role, and tie-breaking picks the textually first one

[10:04] <jnthn> nine: Which versions of nmake do you consider from the stone age?

[10:05] <jnthn> We could probably put a minimum version req on it

[10:12] <nine> jnthn: any nmake :) A make that cannot put the output of shell commands into variables is just not helpful

[10:13] <nine> The simple and parallelization friendly solution would have been a NQP_VERSION != $(PERL5) tools/build/check-nqp-version.pl

[10:14] <nine> Variables must be declared before rules are processed, so check-nqp-version.pl would have been called before we fire off parallel workers and everything would have been just fine.

[10:24] <nine> The way I see it, Windows is the one platform where the default make implementation is so limited. Windows is also the one platform where it's considered normal to download binaries and expect them to run. And there must be make implementations for Windows that provide essential features.

[10:25] <nine> So I'm back at my suggestion to have our build process on Windows download such a binary and use that for the build. If we install it along our own binaries this could even help module authors as it sets a good minimum feature set that can be relied upon.

[12:21] <[Coke]> nine: (getting rid of old makes) but can we make the build parallel-izable instead?

[12:22] * [Coke] sees he missed a bunch of discussion after the initial send and goes back to reading

[12:28] <pmurias> jnthn: so why is https://github.com/rakudo/rakudo/blob/master/src/core/traits.pm6#L294 ever taken over https://github.com/rakudo/rakudo/blob/master/src/core/traits.pm6#L119?

[12:29] <pmurias> jnthn: for things that are Routine the positional parameter would take priority?

[12:44] <jnthn> Yes, exact arity match beats slurpy

[12:46] <jnthn> Oddly enough, the rules around arity are more complex than those around type

[13:43] <Geth> ¦ rakudo: d2c88bcc87 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm6

[13:43] <Geth> ¦ rakudo: Streamline squish :as .pull-one, make it 1.5x faster

[13:43] <Geth> ¦ rakudo:

[13:43] <Geth> ¦ rakudo: - replace =:= by nqp::eqaddr

[13:43] <Geth> ¦ rakudo: - replace prefix ! by nqp::isfalse

[13:43] <Geth> ¦ rakudo: - use only nqp::ops

[13:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d2c88bcc87

[14:13] <Geth> ¦ rakudo: c41b79c0a0 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm6

[14:14] <Geth> ¦ rakudo: Streamline squish() .pull-one, make it 1.6x faster

[14:14] <Geth> ¦ rakudo:

[14:14] <Geth> ¦ rakudo: - replace =:= by nqp::eqaddr

[14:14] <Geth> ¦ rakudo: - replace prefix ! by nqp::isfalse

[14:14] <Geth> ¦ rakudo: - use only nqp::ops

[14:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c41b79c0a0

[14:25] <Geth> ¦ rakudo: 0756076b39 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm6

[14:25] <Geth> ¦ rakudo: Get rid of =:= in IterateMoreWithPhasers

[14:25] <Geth> ¦ rakudo:

[14:25] <Geth> ¦ rakudo: This is the iterator used for things like:

[14:25] <Geth> ¦ rakudo:   for @foo -> $k, $v { PHASER foo }

[14:25] <Geth> ¦ rakudo: Should have some positive effect on performance.

[14:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0756076b39

[14:43] <Geth> ¦ rakudo: e3aef509b1 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm6

[14:43] <Geth> ¦ rakudo: Streamline grep :k .push-all, make it 1.5x as fast

[14:43] <Geth> ¦ rakudo:

[14:43] <Geth> ¦ rakudo: - use nqp::eqaddr instead of =:=

[14:43] <Geth> ¦ rakudo: - use nqp ops more extensively

[14:43] <Geth> ¦ rakudo: - do the same for .pull-one with only a 6% improvement

[14:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e3aef509b1

[14:50] <ggoebel> nine: horrible awful hack... but... how to get the output of a command when using nmake... (https://stackoverflow.com/questions/4883021/how-to-get-the-output-of-a-command-when-using-microsoft-nmake)

[14:54] <ggoebel> .tell nine how to get the output of a command when using nmake... (https://stackoverflow.com/questions/4883021/how-to-get-the-output-of-a-command-when-using-microsoft-nmake)

[14:54] <yoleaux> ggoebel: I'll pass your message to nine.

[15:45] <Geth> ¦ roast: 71f73c9ea4 | (Elizabeth Mattijsen)++ | S03-operators/buf.t

[15:45] <Geth> ¦ roast: Prevent worries about variable redefinition

[15:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/71f73c9ea4

[16:38] <Geth> ¦ rakudo: a3da6ac560 | (Elizabeth Mattijsen)++ | 2 files

[16:38] <Geth> ¦ rakudo: Change some more =:= to nqp::eqaddr

[16:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a3da6ac560

[16:49] <Geth> ¦ rakudo: 9ffb06b224 | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[16:49] <Geth> ¦ rakudo: Streamline Blob/Buf comparisons

[16:49] <Geth> ¦ rakudo:

[16:49] <Geth> ¦ rakudo: A few percent better for eq/ne and about 30% better for lt/le/gt/ge.

[16:49] <Geth> ¦ rakudo: SAME now returns 0/1 instead of Bool, COMPARE now completely in nqp ops.

[16:49] <Geth> ¦ rakudo: No explicit returns are used anymore.

[16:49] <Geth> ¦ rakudo:

[16:49] <Geth> ¦ rakudo: Also remove usage of =:= from !push_list;

[16:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9ffb06b224

[19:02] <[Tux]> Rakudo version 2018.03-104-g9ffb06b22 - MoarVM version 2018.03-31-gfdb5e4d6b

[19:02] <[Tux]> csv-test-xs-20      0.452 -  0.517

[19:02] <[Tux]> csv-ip5xs           0.876 -  0.902

[19:02] <[Tux]> test-t --race       1.034 -  1.084

[19:02] <[Tux]> test-t              2.472 -  2.484

[19:02] <[Tux]> csv-ip5xs-20        8.417 -  8.720

[19:02] <[Tux]> test                9.068 -  9.097

[19:02] <[Tux]> test-t-20 --race   15.132 - 15.259

[19:02] <[Tux]> csv-parser         36.682 - 37.007

[19:02] <[Tux]> test-t-20          43.632 - 43.966

[19:02] <AlexDaniel> o yey, I'm actually progressing in golfing this segfault

[19:03] <AlexDaniel> ≈100 lines and using just Cro::HTTP::Client and Digest::SHA256::Native …

[19:04] * jnthn suspects it'll be an easier find if the former golfs out rather than the latter... :)

[19:05] <AlexDaniel> I don't agree!

[19:05] <AlexDaniel> the latter is just a one file module

[19:05] <AlexDaniel> with a bit of nativecall

[19:06] <AlexDaniel> but as far as I can see you need both, and working in parallel :|

[19:08] <jnthn> AlexDaniel: By golfs out I meant "goes away from the golf" :)

[19:08] <jnthn> Oh, did you get it to segv under perl6-valgrind-m ?

[19:09] <AlexDaniel> right!

[19:09] <AlexDaniel> as for valgrind, haven't tried anything yet. For now just hoping that the golfing process will get me somewhere

[19:09] <AlexDaniel> also with valgrind it's slooooooow

[19:11] <jnthn> Well, if it's a segv thanks to the sha256 native lib there's a decent change valgrind would show it up

[19:12] * jnthn bbi30

[19:26] <AlexDaniel`> 6c: https://gist.githubusercontent.com/AlexDaniel/63d51f54e7dc01c93b1d6d8ebdfbb667/raw/c5efd14988212b48679a6cc0ff0979f0b7c8a80b/segfault.p6

[19:26] <committable6> AlexDaniel`, Successfully fetched the code from the provided URL.

[19:27] <committable6> AlexDaniel`, https://gist.github.com/8c2fb6e3bebd4de018c8e8fd08acc35b

[19:28] <AlexDaniel`> right…

[20:37] <Geth> ¦ rakudo: 637147af41 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm6

[20:37] <Geth> ¦ rakudo: Streamline ThreadPoolScheduler!xxxx-queue a bit

[20:37] <Geth> ¦ rakudo:

[20:37] <Geth> ¦ rakudo: - nqp::isconcrete instead of .DEFINITE

[20:37] <Geth> ¦ rakudo: - nqp::elems instead of .elems

[20:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/637147af41

[20:41] <AlexDaniel> can anybody even reproduce GH#1660 ?

[20:41] <synopsebot> GH#1660 [open]: https://github.com/rakudo/rakudo/issues/1660 [SEGV] Cro + Digest::SHA256::Native = segfault

[20:50] <Geth> ¦ rakudo: 04014cf67d | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm6

[20:50] <Geth> ¦ rakudo: Make affinity-threshold calculation simpler

[20:50] <Geth> ¦ rakudo:

[20:50] <Geth> ¦ rakudo: By unshifting an element into the constant array with threshold values

[20:50] <Geth> ¦ rakudo: so that we don't need to do a -1 everytime

[20:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/04014cf67d

[21:01] <Geth> ¦ rakudo: e31dd966ff | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm6

[21:01] <Geth> ¦ rakudo: Revert "Make affinity-threshold calculation simpler"

[21:01] <Geth> ¦ rakudo:

[21:01] <Geth> ¦ rakudo: This reverts commit 04014cf67d89606c5cbe6b3007b9784c8e8d2407.

[21:01] <Geth> ¦ rakudo:

[21:01] <Geth> ¦ rakudo: This is the wrong way to do it

[21:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e31dd966ff

[21:26] <pmurias> jnthn: if exact match beats slurpy why in that nopaste is |c choosen?

[21:39] <Geth> ¦ rakudo: 17ca56b4eb | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm6

[21:39] <Geth> ¦ rakudo: Inline !total-workers manually

[21:39] <Geth> ¦ rakudo:

[21:39] <Geth> ¦ rakudo: Should prevent at least one Int allocation for each time.

[21:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/17ca56b4eb

[21:39] <lizmat> this concludes my hacking for today

[21:42] <timotimo> lizmat++

[21:50] <AlexDaniel> Zoffix: am I the only one who feels a little bit sad when we take features out? :)

[22:13] <Zoffix> timotimo: do you know anything about the sha-256 error on Windows with GTK::Simple? I vaguelly recall you discussing it with someone and there's a user having that problem: https://www.reddit.com/r/perl6/comments/87lwik/i_cant_seem_to_install_anything/

[22:14] <timotimo> yeah

[22:14] <timotimo> the powershell impl of sha256 is just in there because Digest was too slow at one point, but we do have Digest::SHA256::Native now

[22:14] <timotimo> i wonder if that one's easy to install on windows?

[22:15] <Zoffix> AlexDaniel: "A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away."—Antoine de Saint-Exupery

[22:16] <Zoffix> timotimo: hm, on Win10 it said "Building [OK] for Digest::SHA256::Native:ver<0.03>" but then File::Which is failing  "This type cannot unbox to a native string: P6opaque, Failure"

[22:16] <timotimo> huh?

[22:16] <Zoffix> Same problem on OpenSSL: https://github.com/sergot/openssl/issues/58

[22:17] <Zoffix> (busted something up in rakudo?)

[22:17] <Zoffix> This is on 2018.03-107-ge31dd96 on Win10

[22:21] <Zoffix> Output with --ll-exception: https://github.com/azawawi/perl6-file-which/issues/9

[22:21] <Zoffix> oh wait, no that's wrong

[22:22] <Zoffix> That's --ll-exception for the "die" that's called when it shows "Aborting due to test failure"

[22:23] <Zoffix> This one's betterere: https://github.com/azawawi/perl6-file-which/issues/9#issuecomment-376695635

[22:23] <Zoffix> " from SETTING::src/core/CompUnit/PrecompilationUnit.pm6:56  (C:\rakudo\install\share/perl6/runtime/CORE.setting.moarvm:is-up-to-date)"

[22:25] <Zoffix> Oh, from "my $current-source-checksum := nqp::sha1($srcIO.slurp(:enc<iso-8859-1>));"

[22:25] <Zoffix> guess I can stick a debug statement up in there and see what $srcIO is

[22:36] <AlexDaniel> Zoffix: I agree, but it's still sad when things are taken away :)

[22:36] <AlexDaniel> I mean, :(

[22:37] <Zoffix> IO::Path.new("perl#sources\\51E302443A2C8FF185ABC10CA1E5520EFEE885A1", :SPEC(IO::Spec::Win32), :CWD("C:\\Temp\\perl6-file-which"))

[22:37] <Zoffix> AlexDaniel: why? Are you sad when a disease is taken away? When a tumour is cut off? Some things are good to take away.

[22:38] <AlexDaniel> yes but someone has spent their time and love on implementing something

[22:38] <AlexDaniel> unlike a tumour or a disease… although some may disagree depending on a religion maybe?

[22:39] <AlexDaniel> greppable6: toggle

[22:39] <greppable6> AlexDaniel, 397 lines, 23 modules: https://gist.github.com/4f0474aefb69fc1c34b1d330104b22e9

[22:39] <AlexDaniel> greppable6: \.toggle\b

[22:39] <greppable6> AlexDaniel, 45 lines, 9 modules: https://gist.github.com/30fb73dc5e615fe534562b3be0291d21

[22:39] <Zoffix> AlexDaniel: that's precisely the reason why some software sucks. People are too attached to code to ruthlessly excise all the garbage. It's like I say: "Good code is easy to remove". That applies both technologically and psychologically.

[22:40] <AlexDaniel> Zoffix: OK, I guess you're right

[22:40] * AlexDaniel brings his axe

[22:40] <AlexDaniel> WHAT'S NEXT?

[22:43] <AlexDaniel> Zoffix: by the way, what's your opinion on .toggle and things similar to it

[22:43] <Zoffix> unless $srcIO {

[22:43] <Zoffix> return False unless $srcIO.e;

[22:43] <Zoffix> }

[22:43] <Zoffix> That's wrong isn'it? The only way $srcIO.e would run if $srcIO would be false?

[22:43] <AlexDaniel> that is, a feature was added fairly recently, and in the docs we don't even mention that it's not part of v6.c? Isn't it weird a bit?

[22:44] <AlexDaniel> and then, nobody is using it in the ecosystem… “*yet*”?

[22:45] <AlexDaniel> don't we want to make this kind of features only available in v6.d.PREVIEW?

[22:45] <AlexDaniel> maybe…?

[22:45] <Zoffix> Ideally. But we don't have the means to.

[22:45] <Zoffix> IIRC I documented toggle, so in that case it was fine to me.

[22:47] <Zoffix> Was introed in this commit "Replace error-prone file timestamp check by checksum when loading deps" I think I'll just ping nine, because I think there might be a reason why the path is failing even before that conditional

[22:48] <travis-ci> Rakudo build canceled. Elizabeth Mattijsen 'Change some more =:= to nqp::eqaddr'

[22:48] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/358977413 https://github.com/rakudo/rakudo/compare/e3aef509b106...a3da6ac56062

[22:48] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[22:54] <Zoffix> .tell nine would you be able to take a look at this Issue? Does the path it's trying to slurp look right? with the "perl#sources" stuff in it? https://github.com/rakudo/rakudo/issues/1662

[22:54] <yoleaux> Zoffix: I'll pass your message to nine.
