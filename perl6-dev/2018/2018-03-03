[01:46] <gfldex> m: sub s(*@a){}; say &s.arity

[01:46] <camelia> rakudo-moar 440fceacc: OUTPUT: «0␤»

[01:47] <gfldex> I wonder if that should return Whatever.

[01:49] <gfldex> or ∞

[02:24] <Zoffix> gfldex: just use .count if you want the maximum number

[02:25] <Zoffix> m: dd [.arity, .count] for -> *@ {}, -> $, $? {}, {;}

[02:25] <camelia> rakudo-moar 440fceacc: OUTPUT: «[0, Inf]␤[1, 2]␤[0, 1]␤»

[03:10] <Geth> ¦ rakudo: b212fc5e20 | (Zoffix Znet)++ | src/core/Cool.pm6

[03:10] <Geth> ¦ rakudo: Remove Cool.path; cfa++ for pointing it out

[03:10] <Geth> ¦ rakudo:

[03:10] <Geth> ¦ rakudo: Looks to be a vestigial leftover from when there were plans for

[03:10] <Geth> ¦ rakudo: qp// and the like. We already have Cool.IO, so there's no point

[03:10] <Geth> ¦ rakudo: for .path. It's unspecced and undocumented.

[03:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b212fc5e20

[04:33] <Geth> ¦ rakudo: 76eff07dd6 | (Zoffix Znet)++ | src/core/Cool.pm6

[04:33] <Geth> ¦ rakudo: Revert "Remove Cool.path; cfa++ for pointing it out"

[04:33] <Geth> ¦ rakudo:

[04:33] <Geth> ¦ rakudo: This reverts commit b212fc5e20b5f4989d2120ec3c10c1f755c2f2be.

[04:33] <Geth> ¦ rakudo:

[04:33] <Geth> ¦ rakudo: zef was using it. Going to push through full deprecation cycle instead.

[04:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/76eff07dd6

[04:35] <Geth> ¦ 6.d-prep: 87d4fbacde | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[04:35] <Geth> ¦ 6.d-prep: List deprecation of Cool.path

[04:35] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/87d4fbacde

[06:22] <Geth> ¦ rakudo: a918028e05 | (Zoffix Znet)++ | docs/archive/2018-03-04--Polishing-Rationals.md

[06:22] <Geth> ¦ rakudo: Add "Polishing Rationals" proposal

[06:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a918028e05

[06:23] <Zoffix> New proposal: "Polishing Rationals": https://github.com/rakudo/rakudo/blob/master/docs/archive/2018-03-04--Polishing-Rationals.md

[06:23] <Zoffix> Fixes a bunch of bugs, and based on my preliminary testing also makes stuff faster

[06:24] <Zoffix> .tell jnthn a proposal for some tweaks to Rationals to fix a number of bugs and the race condition, if you wanted to review: https://github.com/rakudo/rakudo/blob/master/docs/archive/2018-03-04--Polishing-Rationals.md

[06:24] <yoleaux> Zoffix: I'll pass your message to jnthn.

[06:24] <Zoffix> .tell TimToady a proposal for some tweaks to Rationals to fix a number of bugs including the issue of some Rats being >64-bit denominators, if you wanted to review: https://github.com/rakudo/rakudo/blob/master/docs/archive/2018-03-04--Polishing-Rationals.md

[06:24] <yoleaux> Zoffix: I'll pass your message to TimToady.

[06:36] <Zoffix> And I think it'll make things slower to make Rat default to native `uint64` denominator, as there ain't many places where'd you'd work with it in native: ops work in full Int, as you could have a FatRat or an operation that blows the 64-bit limit, so it'd be constantly being boxed up

[16:17] <Zoffix> m: use nqp; my int $n = 10.rand.ceiling; class Foo { has uint64 $.foo  =10 }; my $o := Foo.new; { for ^20_000_000 { nqp::add_I($o.foo, 10, Int); Nil }; say now - ENTER now  }

[16:17] <camelia> rakudo-moar a918028e0: OUTPUT: «1.2885429␤»

[16:17] <Zoffix> m: use nqp; my int $n = 10.rand.ceiling; class Foo { has Int $.foo  =10 }; my $o := Foo.new; { for ^20_000_000 { nqp::add_I($o.foo, 10, Int); Nil }; say now - ENTER now  }

[16:17] <camelia> rakudo-moar a918028e0: OUTPUT: «1.4201100␤»

[16:17] <Zoffix> I think I'll add nativizing Rat denominator to my Rat Polish proposal after all.

[16:41] <Zoffix> m: use nqp; my int $n = 10.rand.ceiling; class Foo { has Int $.foo  =10 }; my $o := Foo.new; { for ^20_000_000 { Nil }; say now - ENTER now  }

[16:41] <camelia> rakudo-moar a918028e0: OUTPUT: «1.0447117␤»

[16:41] <Zoffix> m: use nqp; my int $n = 10.rand.ceiling; class Foo { has Int $.foo  =10 }; my $o := Foo.new; { for ^20_000_000 { Nil }; say now - ENTER now  }

[16:41] <camelia> rakudo-moar a918028e0: OUTPUT: «1.046860␤»

[16:41] <Zoffix> m: use nqp; my int $n = 10.rand.ceiling; class Foo { has Int $.foo  =10 }; my $o := Foo.new; { for ^20_000_000 { Nil }; say now - ENTER now  }

[16:41] <camelia> rakudo-moar a918028e0: OUTPUT: «1.06424856␤»

[16:41] <Zoffix> oops, wc

[16:42] <dogbert17> AlexDaniel: you there?

[16:42] <AlexDaniel> dogbert17: yes, more or less

[16:43] <dogbert17> didn't you have a bot like evalable where I could add env vars?

[16:45] <AlexDaniel> committable yes

[16:45] <dogbert17> does it have any modules installed, like say HTTP::UserAgent?

[16:45] <AlexDaniel> c: MVM_SPESH_DISABLE=1 HEAD say 42

[16:45] <committable6> AlexDaniel, ¦HEAD(a918028): «42␤»

[16:45] <AlexDaniel> no but we can make it work, what are you trying to do?

[16:46] <dogbert17> oneliner to show a bug

[16:46] <dogbert17> this code      use HTTP::UserAgent; my $cl = HTTP::UserAgent.new; loop { my $res = $cl.get("http://rosettacode.org"); }

[16:46] <dogbert17> with MVM_SPESH_NODELAY=1

[16:47] <AlexDaniel> c: MVM_SPESH_NODELAY=1 HEAD https://gist.githubusercontent.com/AlexDaniel/af212a58db97a7580c4aff2449a3da78/raw/46e204c5e65e2a8a60dac8fd9ce2ace1cdc4174a/useragent-thingie.p6

[16:47] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[16:47] <committable6> AlexDaniel, ¦HEAD(a918028): ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[16:47] <AlexDaniel> c: MVM_SPESH_NODELAY=1 HEAD https://gist.githubusercontent.com/AlexDaniel/af212a58db97a7580c4aff2449a3da78/raw/46e204c5e65e2a8a60dac8fd9ce2ace1cdc4174a/useragent-thingie.p6

[16:47] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[16:47] <committable6> AlexDaniel, https://gist.github.com/da931ac542a3daea64cf1e76a67f249e

[16:47] <AlexDaniel> dogbert17: this bug? ↑

[16:48] <dogbert17> yup, aka https://github.com/rakudo/rakudo/issues/1573

[16:48] <AlexDaniel> c: MVM_SPESH_NODELAY=1 2016.01 https://gist.githubusercontent.com/AlexDaniel/af212a58db97a7580c4aff2449a3da78/raw/46e204c5e65e2a8a60dac8fd9ce2ace1cdc4174a/useragent-thingie.p6

[16:48] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[16:48] <dogbert17> my first golf was longer as you can see

[16:48] <committable6> AlexDaniel, ¦2016.01: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[16:48] <AlexDaniel> c: MVM_SPESH_NODELAY=1 2016.01 https://gist.githubusercontent.com/AlexDaniel/af212a58db97a7580c4aff2449a3da78/raw/46e204c5e65e2a8a60dac8fd9ce2ace1cdc4174a/useragent-thingie.p6

[16:48] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[16:48] <committable6> AlexDaniel, ¦2016.01: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[16:49] <AlexDaniel> heh… well…

[16:49] <dogbert17> hmm

[16:49] <AlexDaniel> c: MVM_SPESH_NODELAY=1 2016.01 https://gist.githubusercontent.com/AlexDaniel/af212a58db97a7580c4aff2449a3da78/raw/46e204c5e65e2a8a60dac8fd9ce2ace1cdc4174a/useragent-thingie.p6

[16:49] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[16:49] <committable6> AlexDaniel, ¦2016.01: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[16:49] <dogbert17> the bug is 'relatively' new

[16:49] <AlexDaniel> oh, that's because it works there, right?

[16:49] <AlexDaniel> c: MVM_SPESH_NODELAY=1 2017.12 https://gist.githubusercontent.com/AlexDaniel/af212a58db97a7580c4aff2449a3da78/raw/46e204c5e65e2a8a60dac8fd9ce2ace1cdc4174a/useragent-thingie.p6

[16:49] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[16:49] <committable6> AlexDaniel, https://gist.github.com/efdb2d496f08b9fd2a542af571814e00

[16:49] <dogbert17> could be of interest to jnthn

[16:50] <AlexDaniel> c: MVM_SPESH_NODELAY=1 2017.10 https://gist.githubusercontent.com/AlexDaniel/af212a58db97a7580c4aff2449a3da78/raw/46e204c5e65e2a8a60dac8fd9ce2ace1cdc4174a/useragent-thingie.p6

[16:50] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[16:50] <committable6> AlexDaniel, ¦2017.10: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[16:50] <AlexDaniel> dogbert17: well, you can probably golf it a layer deeper…

[16:51] <dogbert17> possibly

[16:51] <AlexDaniel> so it happened between 2017.11 and 2017.12?

[16:51] <AlexDaniel> was it bisected?

[16:52] <dogbert17> "AlexDaniel: thundergnat: see, I bisected it: https://gist.github.com/Whateverable/5fb5b791011b1d4c80dfed05e797f959"

[16:52] <AlexDaniel> … okay…

[16:52] <dogbert17> I think that was a MoarVM bump

[16:53] <AlexDaniel> dogbert17: ok yes, same result for f78fd7c17^,f78fd7c17 with your golf

[16:53] <AlexDaniel> k

[18:43] <Geth> ¦ rakudo: 207313be5a | (Zoffix Znet)++ | src/core/REPL.pm6

[18:43] <Geth> ¦ rakudo: Do not assume Junction guarantees execution order

[18:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/207313be5a

[20:15] <bartolin> could someone explain to me, what's the purpose of this line: https://github.com/perl6/nqp/blob/41b2f055b1435d1c26608fdd24fcb22baf4b1b39/src/core/IO.nqp#L225

[20:15] <bartolin> Was it added so that the return value of nqp::closefh is not exposed to rakudo?

[20:15] <bartolin> If so, would it make sense to do the same for method seek? https://github.com/perl6/nqp/blob/41b2f055b1435d1c26608fdd24fcb22baf4b1b39/src/core/IO.nqp#L199

[20:17] <bartolin> I'm asking because .seek on a IOHandle returns a BOOTIO object on rakudo-j and Mu on rakudo-m. The former leads to some failing tests in S32-io/seek.t, because method 'sink' is not found for invocant of class 'BOOTIO'

[20:19] <bartolin> ./perl6-j -e 'my $fh = "foo.txt".IO.open; { $fh.seek(0) }; $fh.close'  ## fails with the above error

[20:40] <Zoffix> I plan to submit a TPF grant proposal "Perl 6: Performance and Bugfixing of Rationals and Constraints on Constants". The draft is available at https://temp.perl6.party/Constant-Rat-TPF-Grant.html Let me know your comments.

[20:46] <MasterDuke> Zoffix++ only $1499? i'd double that at least

[20:47] <AlexDaniel> for others: “Performance is one of the bigger downsides of Perl 6” – this is no longer true lately. Reliability is the biggest issue now

[20:47] <AlexDaniel> there's no point having great performance when the damn thing crashes after a few seconds of excercising this available performance

[20:47] <Zoffix> Yeah, I don't think perf is THE biggest issue anymore, but I think it's still "one of the" biggest.

[20:48] <AlexDaniel> or starts leaking badly

[20:48] <AlexDaniel> I get that, the text is fine

[20:48] <MasterDuke> eh, depends what you're doing. look at rindolf's code. doesn't crash, but takes 10m compared to 20s for Perl5, Python, etc

[20:49] <AlexDaniel> what's in rindolf's code again? rosettacode stuff?

[20:49] <AlexDaniel> I think I missed that actually

[20:49] <dogbert17> is this the same Zoffix who was burned out a few days ago

[20:50] <AlexDaniel> so?

[20:50] <jnthn> Zoffix: I'd support that (and yeah, would support it at a higher price too :))

[20:50] <MasterDuke> i think the *ables exercise much more of the code that's tougher to get correct and more likely to crash if buggy (instead of just being slow or give wrong results)

[20:50] <dogbert17> thought he was going for some RaR

[20:50] <Zoffix> dogbert17: well, I think the next grant voting will be like at the end of March and I won't hear of the result by April, so plenty of time still :)

[20:51] <dogbert17> Zoffix++

[20:52] <dogbert17> bisect: uptime

[20:52] <bisectable6> dogbert17, 1 day, 2 hours, 29 minutes, and 56 seconds, 218.488281MiB maxrss. This is Rakudo version 2018.01-209-gf74890550 built on MoarVM version 2018.01-97-g22d2db5e0 implementing Perl 6.c.

[20:52] <AlexDaniel> dogbert17: yes, no longer leaks and also no longer passes its tests :P

[20:52] <dogbert17> the memory problems seem to be a thing of the past no ?

[20:53] <dogbert17> AlexDaniel: details details :-)

[20:54] <dogbert17> did you try the ugly SEGV workaround ?

[20:54] <AlexDaniel> not really, no

[20:57] <AlexDaniel> dogbert17: memory usage for https://github.com/MoarVM/MoarVM/issues/680 climbs up also. It's not really leaking, it's just converging to some unreasonably high goal :)

[20:59] <dogbert17> AlexDaniel: you're on 64 bit right?

[20:59] <AlexDaniel> yes

[21:00] <dogbert17> so my 32 bit system should get roughly half the memory usage then

[21:00] * dogbert17 tests

[21:02] <dogbert17> hmm, last line was: {:data("235.120 kB"), :dirty("0 kB"), :lib("0 kB"), :resident("203.448 kB"), :share("26.796 kB"), :size("264.732 kB"), :text("8 kB")}

[21:03] <AlexDaniel> I think the dot is misleading?

[21:04] <dogbert17> indeed

[21:04] <dogbert17> but didn't it eat gigs on 64-bit initially

[21:04] <AlexDaniel> I think so, yea

[21:06] <dogbert17> I wonder what makes this program 10 times slower than Perl 5

[21:35] <MasterDuke> dogbert17: infix:<%>

[21:37] <MasterDuke> oh, i think you were talking about https://github.com/MoarVM/MoarVM/issues/680, nevermind what i just said
