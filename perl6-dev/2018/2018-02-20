[03:03] <Geth> ¦ rakudo: 31bf3a5907 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[03:03] <Geth> ¦ rakudo: Log all changes (+ announcement)

[03:03] <Geth> ¦ rakudo:

[03:03] <Geth> ¦ rakudo: Deliberately not logged:

[03:03] <Geth> ¦ rakudo:

[03:03] <Geth> ¦ rakudo: 44ff0a2a 494ffb6a b93656d8 42af2a35 01ce5632 07f30e4b 1c649461

[03:03] <Geth> ¦ rakudo: af4d6b46 671c3d60 85ae1d1e 7fe23136 7fa57657 2daad12f ae697080

[03:03] <Geth> ¦ rakudo: e72eb01e d74dac81 c83202db f8c2b55e d74010ba ec23031d d769f0a6

[03:03] <Geth> ¦ rakudo: <…commit message has 13 more lines…>

[03:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/31bf3a5907

[04:15] <samcv> AlexDaniel: MoarVM has been released :)

[05:53] <Geth> ¦ rakudo: d75f4ae5de | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/release_guide.pod

[05:53] <Geth> ¦ rakudo: Actual date, claim next release

[05:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d75f4ae5de

[07:25] <AlexDaniel> gah…

[07:26] * AlexDaniel is waiting for networking on his server to go up again

[07:49] <[Tux]> Rakudo version 2018.01-212-gd75f4ae5d - MoarVM version 2018.01-97-g22d2db5e0

[07:49] <[Tux]> csv-test-xs-20      0.453 -  0.481

[07:49] <[Tux]> csv-ip5xs           0.833 -  0.978

[07:49] <[Tux]> test-t --race       1.121 -  1.218

[07:49] <[Tux]> test-t              2.597 -  2.679

[07:49] <[Tux]> csv-ip5xs-20        7.586 -  8.220

[07:49] <[Tux]> test                9.277 -  9.458

[07:49] <[Tux]> csv-parser         11.953 - 11.978

[07:49] <[Tux]> test-t-20 --race   16.443 - 19.444

[07:49] <[Tux]> test-t-20          47.085 - 50.346

[08:36] <lizmat> Files=1235, Tests=76221, 316 wallclock secs (14.85 usr  5.28 sys + 2168.25 cusr 215.07 csys = 2403.45 CPU)

[08:36] <AlexDaniel> .oO( I hope your data center is burning, I'm not taking any other excuse )

[08:40] <AlexDaniel> yaaaaaaaaaaaaaaay

[08:44] <Geth> ¦ rakudo: c7d2f76567 | (Elizabeth Mattijsen)++ | docs/ChangeLog

[08:44] <Geth> ¦ rakudo: It's $*PERL, not $*Perl

[08:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c7d2f76567

[08:46] <Geth> ¦ rakudo: 21f6fb64c9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/announce/2018.02.md

[08:46] <Geth> ¦ rakudo: Fix announcement also

[08:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/21f6fb64c9

[08:47] <AlexDaniel> heh, edit wars over that line :)

[08:48] <AlexDaniel> ok the release will happen in ≈50 minutes when releasable finishes everything

[08:52] <lizmat> AlexDaniel++

[09:19] <AlexDaniel> quotable6: ZOFFLOP

[09:19] <quotable6> AlexDaniel, OK, working on it! This may take up to three minutes (4506639 messages to process)

[09:20] <quotable6> AlexDaniel, https://gist.github.com/0d693ba0a6323f42bb1c4cad7df55e92

[09:21] <AlexDaniel> hang on S17-supply/syntax.t :S

[09:21] <timotimo> quotable6: source

[09:21] <quotable6> timotimo, https://github.com/perl6/whateverable

[09:53] <Geth> ¦ nqp: e860aa1a91 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[09:53] <Geth> ¦ nqp: [release] Bump MoarVM revision to 2018.02

[09:53] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e860aa1a91

[09:53] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.01-97-g22d2db5...2018.02

[09:53] <Geth> ¦ nqp: febb04d59b | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[09:53] <Geth> ¦ nqp: [release] Bump VERSION to 2018.02

[09:53] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/febb04d59b

[09:54] <Geth> ¦ rakudo: b69bc8b9a9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[09:54] <Geth> ¦ rakudo: [release] Bump NQP revision to 2018.02

[09:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b69bc8b9a9

[09:54] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-109-g5132d42...2018.02

[09:54] <Geth> ¦ rakudo: 1d11fd26d0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[09:54] <Geth> ¦ rakudo: [release] Bump VERSION to 2018.02

[09:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1d11fd26d0

[10:01] <AlexDaniel> \o/

[11:06] <samcv> \o/

[11:07] <timotimo> cool

[11:08] <jnthn> :D

[11:08] <jnthn> Back to breaking things! ;)

[11:10] <timotimo> maybe i'll merge the profiler multithreading enhancements right away, though tbh i haven't checked if it impacts single-threaded profiles negatively in any way

[11:11] <jnthn> Well, at least check it still gives useful results :)

[11:23] <timotimo> i'll do that before any merge

[11:25] <Zoffix> AlexDaniel++ samcv++ # releases

[11:29] <Geth> ¦ rakudo: zoffixznet++ created pull request #1547: Post release

[11:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1547

[11:29] <Geth> ¦ rakudo/master: 5 commits pushed by (Zoffix Znet)++

[11:29] <Geth> ¦ rakudo/master: 8b7385d810 | Optimize Uni.list

[11:29] <Geth> ¦ rakudo/master: ba6b84bd0c | Make Str.perl 43x faster for some chars

[11:29] <Geth> ¦ rakudo/master: 6ac56cc081 | Optimize Str.perl and uniprop(Int, Str)

[11:29] <Geth> ¦ rakudo/master: 4e5c908d4d | Add comment Str!APPLY-MATCHES is used...

[11:29] <Geth> ¦ rakudo/master: 5c35faf0b8 | Merge pull request #1547 from rakudo/post-release

[11:29] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/1d11fd26d0bc...5c35faf0b8a6

[11:29] <Geth> ¦ roast: zoffixznet++ created pull request #389: Post release

[11:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/389

[11:30] <Geth> ¦ roast: d43b90d70c | (Zoffix Znet)++ | S32-str/ords.t

[11:30] <Geth> ¦ roast: Cover Uni.list optimization

[11:30] <Geth> ¦ roast:

[11:30] <Geth> ¦ roast: Covers https://github.com/rakudo/rakudo/commit/8b7385d810

[11:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d43b90d70c

[11:30] <Geth> ¦ roast: e2b662a4aa | (Zoffix Znet)++ | S32-str/ords.t

[11:30] <Geth> ¦ roast: Fix up counter in test description

[11:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e2b662a4aa

[11:30] <Geth> ¦ roast: f364110614 | (Zoffix Znet)++ (committed using GitHub Web editor) | S32-str/ords.t

[11:30] <Geth> ¦ roast: Merge pull request #389 from perl6/post-release

[11:30] <Geth> ¦ roast:

[11:31] <Geth> ¦ roast: Post release

[11:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f364110614

[11:53] <Zoffix> ZOFVM: Files=1289, Tests=153231, 149 wallclock secs (20.05 usr  3.23 sys + 3192.34 cusr 157.45 csys = 3373.07 CPU)

[12:17] <dogbert17> samcv++, AlexDaniel++ release

[12:17] <dogbert17> lizmat++ weekly

[12:18] <dogbert17> ZOFFLOP: t/spec/S32-str/ords.t

[12:32] <Zoffix> dogbert17: what are the failures in ords? And are you sure it's a flopper rather than a solid failure?

[12:33] <Zoffix> I think I wrote the test badly: it assumes .couny-only opt is definitely implemented (and you're seeing failures 'cause you're not on latest rakudo)

[12:34] <Zoffix> |4d fix to not assume .count-only impl https://github.com/perl6/roast/commit/d43b90d70c

[12:34] <ZofBot> Zoffix, Will remind you on 2018-02-24T07:34:59.166033-05:00 about fix to not assume .count-only impl https://github.com/perl6/roast/commit/d43b90d70c

[12:35] <dogbert17> Zoffix. solid failure

[12:36] <dogbert17> 1..17

[12:36] <dogbert17> No such method 'count-only' for invocant of type '<anon|254307192>'

[12:36] <dogbert17> in block  at t/spec/S32-str/ords.t line 39

[12:36] <dogbert17> in block <unit> at t/spec/S32-str/ords.t line 35

[12:36] <Zoffix> ZofBot: called it

[12:36] <ZofBot> Zoffix, We walked on and on, but it was all so new to me that I forgot how tired I was

[12:37] <dogbert17> Zoffix: hold on it seems I'm on rakudo 2018.02 which is not the latest

[12:37] <Zoffix> right

[12:41] <dogbert17> Zoffix: and the error magically disappeared, sorry for the noise

[12:42] <Zoffix> :)

[12:43] <Zoffix> dogbert17: well it wasn't noise. You did find a bug in the test

[12:46] * dogbert17 is building 2018.02 on hir RPi 2 atm, a slow process

[12:59] <Geth> ¦ rakudo: 16b57af549 | (Elizabeth Mattijsen)++ | 4 files

[12:59] <Geth> ¦ rakudo: Make all explicit only subs a multi

[12:59] <Geth> ¦ rakudo:

[12:59] <Geth> ¦ rakudo: Inspired by https://stackoverflow.com/questions/48819031/where-did-my-perl-6-operator-go-after-i-defined-a-more-specific-multi

[12:59] <Geth> ¦ rakudo:

[12:59] <Geth> ¦ rakudo: See also https://github.com/perl6/doc/issues/1783

[12:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/16b57af549

[13:34] <Geth> ¦ rakudo: 55bc053c56 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm

[13:34] <Geth> ¦ rakudo: Make only sub min/min/minmax multi's

[13:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/55bc053c56

[13:40] <Geth> ¦ nqp: c7f7762bb0 | (Jonathan Worthington)++ | 2 files

[13:40] <Geth> ¦ nqp: Map new nqp::tryfindmethod op for MoarVM backend

[13:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c7f7762bb0

[13:40] <Geth> ¦ nqp: c0e7e75b7d | (Jonathan Worthington)++ | 11 files

[13:40] <Geth> ¦ nqp: Update MoarVM bootstrap

[13:40] <Geth> ¦ nqp:

[13:40] <Geth> ¦ nqp: So that we will be able to use nqp::tryfindmethod in Cursor.

[13:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c0e7e75b7d

[13:51] <Geth> ¦ nqp: ce831d0d53 | (Jonathan Worthington)++ | src/vm/jvm/QAST/Compiler.nqp

[13:51] <Geth> ¦ nqp: Add nqp::tryfindmethod on JVM backend

[13:51] <Geth> ¦ nqp:

[13:51] <Geth> ¦ nqp: Which maps to an existing implementation.

[13:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ce831d0d53

[13:51] <Geth> ¦ nqp: 1f75964b86 | (Jonathan Worthington)++ | 10 files

[13:51] <Geth> ¦ nqp: Update JVM backend bootstrap

[13:51] <Geth> ¦ nqp:

[13:51] <Geth> ¦ nqp: So we can use the nqp::tryfindmethod op in NQP code.

[13:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1f75964b86

[13:52] <Geth> ¦ nqp: 96c24117ec | (Jonathan Worthington)++ | src/QRegex/Cursor.nqp

[13:52] <Geth> ¦ nqp: Use nqp::tryfindmethod in Cursor!reduce

[13:52] <Geth> ¦ nqp:

[13:52] <Geth> ¦ nqp: Seems to give a few percent speedup on JSON::Tiny, by avoiding the

[13:52] <Geth> ¦ nqp: need for double lookups.

[13:52] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/96c24117ec

[14:15] <Geth> ¦ rakudo: 182b7ea573 | (Elizabeth Mattijsen)++ | src/core/Any.pm

[14:15] <Geth> ¦ rakudo: Make sub classify / categorize multi's

[14:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/182b7ea573

[14:49] <Geth> ¦ rakudo: 63775474db | (Elizabeth Mattijsen)++ | src/core/array_operators.pm

[14:49] <Geth> ¦ rakudo: Make sub push/append/unshift/prepend/splice multi's

[14:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/63775474db

[14:54] <timotimo> i had an interesting observation over in #whateverable:

[14:54] <timotimo> these two commands

[14:54] <timotimo> time perl6 -npe 'use nqp; INIT $*ARGFILES.nl-in = qq{\0\0}; next unless $_ ~~ /"hello there"/; last if $++ > 10_000' /tmp/\#perl6.cache

[14:54] <timotimo> time perl6 -e '$*ARGFILES.nl-in = qq{\0\0}; for lines() { next unless $_ ~~ /"hello there"/; last if $++ > 10_000; .say }' /tmp/\#perl6.cache

[14:55] <timotimo> on an about 300 megs big file

[14:57] <timotimo> the latter takes about 36 seconds, the former takes about 46 seconds

[14:58] <dogbert17> gah, running the spectest suite on an RPi2 is slooow

[15:00] <timotimo> m: say 48898900 / 73340315

[15:00] <camelia> rakudo-moar 182b7ea57: OUTPUT: «0.666739705␤»

[15:02] <timotimo> that's the difference in frames entered from the overview page

[15:03] <timotimo> and indeed the -npe one does 8147306 calls to CatHandle's nl-in proxy fetch program

[15:04] <timotimo> the other doesn't seem to

[15:04] <Zoffix> Maybe left-over from when we didn't have a CatHandle?

[15:05] * ilmari first read nl-in as a locale name and was wondering who spoke dutch in india

[15:05] <timotimo> the --target=ast just looks like it calls map on &lines, though

[15:05] <dogbert17> isn't Proxy very underoptimized ?

[15:05] <dogbert17> RT #126520

[15:05] <synopsebot> RT#126520 [new]: https://rt.perl.org/Ticket/Display.html?id=126520 [PERF] Proxy objects - frequent FETCHs

[15:09] <timotimo> in total, the proxy parts take about 2.4 seconds out of the whole run

[15:09] <timotimo> (62 seconds because of profiler overhead)

[15:10] <timotimo> so i don't think it's that in particular

[15:11] <dogbert17> so there's something else lurking in the profiler output then

[15:17] <timotimo> the call graph looks kind of drastically different and i don't really understand why

[15:17] <timotimo> my mind is rather foggy right now for some reason

[15:19] <dogbert17> ENOCOFFEE ?

[15:28] <timotimo> since i don't drink coffee ... yeah?

[15:40] <Geth> ¦ rakudo: c2d0d3aced | (Elizabeth Mattijsen)++ | src/core/Buf.pm

[15:40] <Geth> ¦ rakudo: Make sub subbuf-rw a multi

[15:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c2d0d3aced

[15:53] <[Coke]> timotimo: no? coffee? how?

[15:53] <[Coke]> tea, maybe?

[15:53] * [Coke] has had a few coffees this morning, and is on his first coke zero

[15:57] <Zoffix> .oO( cannibalism... )

[16:16] <timotimo> autocannibalism even?

[16:55] <Zoffix> m: print <a b c>.all.perl; print <a b c>.all; say <a b c>.all

[16:55] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «all("a", "b", "c")abca␤b␤c␤»

[16:56] <Zoffix> Wonder if Junction.gist should be more like .perl (Mu.gist is just Mu.perl) and only for print/put to actually junct over it

[16:57] <Zoffix> m: say ().all # especially due to this case not even printing a newline; You'd think a `.gist` would tell you a gist of a thing rather than nothing at all about it

[16:57] <camelia> rakudo-moar c2d0d3ace: ( no output )

[16:58] <Zoffix> m: print <a b c>.all.gist

[16:58] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «all(a, b, c)»

[16:59] <Zoffix> huh...

[17:01] <Zoffix> I see; .say threads through signature on self and and &say threads explicitly by junction.THREAD

[17:01] * Zoffix gonna change it later then

[17:12] <Zoffix> New blog post: "Perl 6: On Specs, Versioning, Changes, and… Breakage": https://rakudo.party/post/Perl6-On-Specs-Versioning-Changes-And-Breakage

[17:21] <timotimo> a propos blog: i'm looking for inspiration for how to get my TPF grant reports onto the 'net

[17:21] <timotimo> i.e. what blogging software and maybe hosting platform

[17:30] <tyil> timotimo: I know samcv posted her reports on a jekyll-based blog

[18:14] <dogbert17> RPi 2 spectests looks reasonably good, two files SEGV's, t/spec/S02-types/native.t and t/spec/S12-attributes/native.t

[18:36] <dogbert17> according to gdb the tests fail here: https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6num.c#L62

[18:43] <dogbert17> and it crashes there when running this line: https://github.com/perl6/roast/blob/master/S12-attributes/native.t#L135

[19:00] <gfldex> Zoffix++ # for cheesy abstractions

[19:30] <samcv> timotimo: yeah i use jekyll based blog. and setup with pygments as the highlighter so I get perl 6 syntax highlighting. tutorial I wrote is here https://cry.nu/tutorials/syntax-highlighting-in-jekyll/

[19:56] <MasterDuke> m: my $N = 2; my @x = FatRat.new(1, 1), -> $x { $x - ($x ** 2 - $N) / (2 * $x) } ... *; my $a = @x[12]; say $a.num; say now - INIT now

[19:56] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «No such method 'num' for invocant of type 'FatRat'. Did you mean any of these?␤    Num␤    sum␤␤  in block <unit> at <tmp> line 1␤␤»

[19:56] <MasterDuke> m: my $N = 2; my @x = FatRat.new(1, 1), -> $x { $x - ($x ** 2 - $N) / (2 * $x) } ... *; my $a = @x[12]; say $a.Num; say now - INIT now

[19:56] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «1.4142135623731␤0.01020226␤»

[19:56] <MasterDuke> m: my $N = 2; my @x = FatRat.new(1, 1), -> $x { $x - ($x ** 2 - $N) / (2 * $x) } ... *; my $a = @x[12]; say $a.chars; say now - INIT now

[19:56] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «1571␤2.44118459␤»

[19:57] <MasterDuke> generating that sequence is pretty fast, but printing large FatRats is very slow

[19:58] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/src/core/Rational.pm#L102-L107 is the slow part

[19:59] <MasterDuke> and it's the `$fract *= 10;` and `$fract -= $_;` in the loop that cause the slowness

[20:00] <MasterDuke> is there another algorithm that doesn't require that repeated multiplication and subtraction?

[20:00] <MasterDuke> Int.gcd is really where all the time is spent

[20:01] <MasterDuke> called by https://github.com/rakudo/rakudo/blob/master/src/core/Rat.pm#L42, which is called by https://github.com/rakudo/rakudo/blob/master/src/core/Rat.pm#L144

[20:02] <MasterDuke> fwiw i re-wrote that loop in all nqp and it wasn't any faster

[20:07] <Geth> ¦ nqp: 218702caec | pmurias++ | 2 files

[20:07] <Geth> ¦ nqp: [js] Implement nqp::tryfindmethod

[20:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/218702caec

[20:07] <Geth> ¦ nqp: d83b1c947c | pmurias++ | t/nqp/090-findmethod.t

[20:07] <Geth> ¦ nqp: Test nqp::tryfindmethod

[20:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d83b1c947c

[20:10] <Geth> ¦ nqp/master: 4 commits pushed by pmurias++

[20:10] <Geth> ¦ nqp/master: 02f9c95e53 | [js] Very basic CUnion repr

[20:10] <Geth> ¦ nqp/master: 17e1a135e5 | [js] Fix uint8, uint16, uint32 in CUnions

[20:10] <Geth> ¦ nqp/master: ac03bc6c6b | [js] Remove workaround for fixed bug

[20:10] <Geth> ¦ nqp/master: 666147ddcc | [js] Implement uint8 and uint16

[20:10] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/d83b1c947cf3...666147ddcccc

[20:53] <MasterDuke> Zoffix++ great post
