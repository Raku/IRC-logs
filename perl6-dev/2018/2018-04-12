[02:55] <Geth> ¦ rakudo/fix-R1723: 664271aba1 | (Zoffix Znet)++ | src/Perl6/World.nqp

[02:55] <Geth> ¦ rakudo/fix-R1723: More fixes for LTA error in corecers

[02:55] <Geth> ¦ rakudo/fix-R1723:

[02:55] <Geth> ¦ rakudo/fix-R1723: - Part of #1723

[02:55] <Geth> ¦ rakudo/fix-R1723: - Now parameters are handled fine but some standalone

[02:55] <Geth> ¦ rakudo/fix-R1723:    coercers are still LTA

[02:55] <Geth> ¦ rakudo/fix-R1723: review: https://github.com/rakudo/rakudo/commit/664271aba1

[07:07] <Geth> ¦ rakudo: 2ae3f484c6 | (Stefan Seifert)++ | 2 files

[07:07] <Geth> ¦ rakudo: Fix build system not noticing change to BOOTSTRAP.nqp

[07:07] <Geth> ¦ rakudo:

[07:07] <Geth> ¦ rakudo: BOOTSTRAP.nqp and EXPORTHOW.nqp are not part of COMMON_BOOTSTRAP_SOURCE and

[07:07] <Geth> ¦ rakudo: thus not part of METAMODEL_SOURCES but we need to run gen-version.pl when

[07:07] <Geth> ¦ rakudo: they are changed.

[07:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2ae3f484c6

[07:07] <nine> lizmat: that one's for you ^^^ :)

[07:13] <[Tux]> Rakudo version 2018.03-223-g72c7c5bf4 - MoarVM version 2018.03-105-gef4e6fe94

[07:13] <[Tux]> csv-test-xs-20      0.437 -  0.459

[07:13] <[Tux]> csv-ip5xs           0.892 -  0.918

[07:13] <[Tux]> test-t --race       1.024 -  1.144

[07:13] <[Tux]> test-t              2.428 -  2.691

[07:13] <[Tux]> csv-ip5xs-20        8.674 -  8.761

[07:13] <[Tux]> test                9.132 -  9.755

[07:13] <[Tux]> test-t-20 --race   15.202 - 16.477

[07:13] <[Tux]> csv-parser         35.754 - 37.181

[07:13] <[Tux]> test-t-20          43.693 - 46.520

[07:25] <brrt> [Tux] - i've partially traced down the spesh failure in t/90_csv.t

[07:25] <[Tux]> brrt++

[07:51] <lizmat> nine++

[08:02] <lizmat> weekly: https://lwn.net/Articles/751286/

[08:02] <notable6> lizmat, Noted!

[09:01] <nine> m: { die "died"; note "back"; CATCH { default { .throw } } }; CATCH { default { .resume } }

[09:01] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «MoarVM panic: Trying to unwind over wrong handler␤»

[09:01] <nine> Is this supposed to work, or am I holding it wrong?

[09:59] <dogbert2> nine: looks a bit like https://github.com/MoarVM/MoarVM/issues/572

[10:05] <nine> I worked around it for now by returning a Failure and have the caller throw that. Apparently my issue is that resuming into a CATCH block is kinda broken

[10:19] <AlexDaniel> releasable6: status

[10:20] <releasable6> AlexDaniel, Next release in ≈9 days and ≈8 hours. 6 blockers. 0 out of 224 commits logged (⚠ 9 warnings)

[10:20] <releasable6> AlexDaniel, Details: https://gist.github.com/3c5361d774b4eea2aeb6cf47bed8e440

[10:34] <timotimo> could you say that perl6 has better backwards compatibility to python2 than python3 does?

[10:47] <lizmat> m: { die "died"; note "back"; CATCH { default { .rethrow } } }; CATCH { default { .resume } }

[10:47] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «MoarVM panic: Trying to unwind over wrong handler␤»

[11:11] <AlexDaniel> committable6: uptime

[11:11] <committable6> AlexDaniel, 2 days, 5 hours, 20 minutes, and 11 seconds, 373.296875MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[11:11] <AlexDaniel> releasable6: uptime

[11:11] <releasable6> AlexDaniel, 2 days, 5 hours, 21 minutes, and 32 seconds, 1556.449219MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[11:11] <AlexDaniel> shareable6: uptime

[11:11] <shareable6> AlexDaniel, 3 days, 3 hours, 39 minutes, and 23 seconds, 585.035156MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[11:25] <AlexDaniel> any volunteers for https://github.com/rakudo/rakudo/issues/1709 ?

[11:25] <AlexDaniel> jnthn timotimo dogbert2 MasterDuke ↑

[11:57] <AlexDaniel> lizmat: I assume you're going to close RT#132281 also?

[11:58] <synopsebot> RT#132281 [new]: https://rt.perl.org/Ticket/Display.html?id=132281 [REGRESSION] .gist of a bag used to say “bag()”, now it says “Bag()” ("blogger".comb.Bag)

[11:59] <lizmat> AlexDaniel: I don't do RT, but please yes (just sent a mail to that effect)

[12:00] <AlexDaniel> Error: access_denied

[12:00] <AlexDaniel> :|

[12:00] <lizmat> yeah, seems like Perl 5 infra is falling apart: search.cpan.org down, can't login to blogs.perl.org  :-(

[12:01] <AlexDaniel> seems to be the github login option only

[12:01] <AlexDaniel> can still login with “google”

[12:01] <ilmari> lizmat: metacpan.org is working just fine

[12:01] <lizmat> ilmari: yes, it is...

[12:02] <lizmat> https://news.ycombinator.com/item?id=16819086  # ilmari

[12:12] <MasterDuke> m: say set("a b", "b c")

[12:12] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «set(a b b c)␤»

[12:13] <MasterDuke> lizmat: ^^^ seems LTA

[12:16] <lizmat> m: say set("a,b", "b,c")   # they're all LTA

[12:16] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «set(a,b b,c)␤»

[12:17] <MasterDuke> true

[12:18] <MasterDuke> btw, is Set.new(...) ever different from (...).Set?

[12:19] <lizmat> not, afaik

[12:20] <MasterDuke> m: say Set.new((a => 42, a=> 42)); say ((a => 42, a=> 42)).Set

[12:20] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «set(a => 42)␤set(a)␤»

[12:21] <MasterDuke> m: say Set.new(a => 42, a=> 42); say (a => 42, a=> 42).Set

[12:21] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «set()␤set(a)␤»

[12:24] <lizmat> MasterDuke: I stand corrected  :-)

[12:25] <lizmat> ah, yes, the coercer uses Pair semantics for all QuantHashes

[12:25] <lizmat> m: dd Set.new( a => 0 ); dd (a => 0).Set

[12:25] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «Set.new()␤Set.new()␤»

[12:25] <lizmat> m: dd Set.new( (a => 0) ); dd (a => 0).Set

[12:25] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «Set.new(:a(0))␤Set.new()␤»

[12:25] <lizmat> m: dd Set.new( (a => 0) ); dd (a => 1).Set

[12:25] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «Set.new(:a(0))␤Set.new("a")␤»

[12:26] <lizmat> m: dd Set.new( (a => 0) ); dd (a => False).Set

[12:26] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «Set.new(:a(0))␤Set.new()␤»

[12:26] <lizmat> m: dd (a => True).Set

[12:26] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «Set.new("a")␤»

[12:27] <MasterDuke> why is Set.new(a => 42, a=> 42) the empty set?

[12:27] <AlexDaniel> it doesn't take named args I guess?

[12:28] <AlexDaniel> m: say Set.new((a => 42, a=> 42))

[12:28] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «set(a => 42)␤»

[12:28] <MasterDuke> ah right, named args vs Pairs again

[12:30] <MasterDuke> m: say Bag.new((a => 42, a=> 42)); say ((a => 42, a=> 42)).Bag

[12:30] <camelia> rakudo-moar 2ae3f484c: OUTPUT: «Bag(a => 42(2))␤Bag(a(84))␤»

[12:35] <MasterDuke> ugh, i can't hold these in my head for some reason

[12:37] <MasterDuke> Setty.perl always uses `Set(Hash)?.new(...)`. Baggy.perl always uses `(...).Bag`. can those be made consistent?

[12:39] <MasterDuke> as shown above, Set.new(...) is not always the same as (...).Set, if you put the same representation for the (...). but maybe Set's .perl just needs to print it differently so (...).Set is correct?

[12:51] <lizmat> MasterDuke: yes, that could actually be a bug  :-)

[12:53] <lizmat> or at least an inconsistency  :-)

[12:58] <MasterDuke> so we need to find some input A where A.(Bag|Set|Mix).perl ne A.(Bag|Set|Mix).perl.EVAL.perl?

[13:04] <lizmat> actually, I don't think you will find it... but please go ahead: always break new things  :-)

[13:08] <MasterDuke> heh, well what do you recommend for a PR?

[13:09] <lizmat> MasterDuke: nothing, I'm spectesting a change to .Set now

[13:09] <MasterDuke> cool

[13:19] <Geth> ¦ rakudo: c0212af9b9 | (Elizabeth Mattijsen)++ | src/core/Setty.pm6

[13:19] <Geth> ¦ rakudo: Make Setty.perl consistent with Baggy/Mixy.perl

[13:19] <Geth> ¦ rakudo:

[13:19] <Geth> ¦ rakudo: Masterduke++ for persistence

[13:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c0212af9b9

[13:43] <dogbert2> m: say bag(<a a a b>) (-) <a a>

[13:43] <camelia> rakudo-moar c0212af9b: OUTPUT: «Bag(a(2), b)␤»

[13:57] <skids> looks like it is only seeing the first elem of the List lhs arg

[13:58] <skids> erm rhs.

[13:58] * skids forgot everything he learned in kindergarten

[14:03] <lizmat> skids

[14:03] <lizmat> I think that's because the rhs is first coerced to a Set

[14:03] <lizmat> and that could be considered a bug with a Bag on the LHS

[14:03] <lizmat> m:  say bag(<a a a b>) (-) <a a>.Bag

[14:03] <camelia> rakudo-moar c0212af9b: OUTPUT: «Bag(a, b)␤»

[14:04] <lizmat> m:  say bag(<a a a b>) (-) <a a>.Set

[14:04] <camelia> rakudo-moar c0212af9b: OUTPUT: «Bag(a(2), b)␤»

[14:04] <lizmat> could you file an issue for this?  or is there one already ?

[14:07] <skids> RT#133016

[14:07] <synopsebot> RT#133016 [open]: https://rt.perl.org/Ticket/Display.html?id=133016 Wrong set difference of Bag and List

[14:08] <skids> Looks like a pasto in multi sub infix:<(-)>(Baggy:D $a, Any:D $b)

[14:09] <skids> Or no, looks like it was intentional.

[14:10] <lizmat> no, I think it's a pasto

[14:10] <skids> The commit message says "Any/Iterable should be coerced to Set, not Bag/Mix"

[14:11] <lizmat> ah... intriguing

[14:11] <lizmat> I think we changed our view about that later

[14:11] <lizmat> yeah, pretty sure about that

[14:12] <lizmat> spectesting

[14:12] <skids> (check Mix too?)

[14:14] <skids> (not noticing the year of the commit, I was about to say... but you just did this :-)

[14:15] <lizmat> skids: Mixys are Baggys, and for comparison, if you coerce something to a Bag, the elements get weight 1

[14:15] <lizmat> which also works for Muxys

[14:15] <lizmat> *Mixys

[14:16] <lizmat> so the Baggy / Any candidate should handle Mixy / Any as well

[14:17] <skids> Oh so unless it's been deleted since a2133dbc6 we have a redundant candidate

[14:18] <lizmat> all set operators have been completely overhauled since then

[14:18] <skids> Ah good.

[14:18] <lizmat> and each set operator now has its own file

[14:18] <lizmat> spectest clean..

[14:20] <Geth> ¦ rakudo: 344a64e987 | (Elizabeth Mattijsen)++ | src/core/set_difference.pm6

[14:20] <Geth> ¦ rakudo: Fix for RT #133016

[14:20] <Geth> ¦ rakudo:

[14:20] <Geth> ¦ rakudo: If we're comparing with a Baggy, we should coerce to a Bag, not a Set.

[14:20] <Geth> ¦ rakudo: skids++ for nudging

[14:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/344a64e987

[14:20] <synopsebot> RT#133016 [open]: https://rt.perl.org/Ticket/Display.html?id=133016 Wrong set difference of Bag and List

[14:22] <lizmat> afk&

[19:34] <Geth> ¦ rakudo: 914218744f | (Elizabeth Mattijsen)++ | 2 files

[19:34] <Geth> ¦ rakudo: Create shortcuts for %h.head

[19:34] <Geth> ¦ rakudo:

[19:34] <Geth> ¦ rakudo: It occurred to me that .head on a Map or Hash with only one key, would

[19:34] <Geth> ¦ rakudo: be a very fast way to get that one key (and its value).

[19:34] <Geth> ¦ rakudo:

[19:34] <Geth> ¦ rakudo: This commit adds specific .head candidates for Map/Hash and typed Hashes

[19:34] <Geth> ¦ rakudo: that are twice as fast as have half of the allocations.  Note that this

[19:34] <Geth> ¦ rakudo: is purely an optimization, no new functionality has been added.

[19:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/914218744f

[20:00] <lizmat> bisectable6: sub a(--> Int:D) {}; dd &a.^name

[20:00] <bisectable6> lizmat, On both starting points (old=2015.12 new=9142187) the exit code is 0 and the output is identical as well

[20:00] <bisectable6> lizmat, Output on both points: «"Sub+\{Callable[Int:D]}"␤»

[20:00] * lizmat never realized that having a "returns" changes the ^name of a sub

[20:01] <lizmat> is that handy / needed / desired ?

[20:01] <lizmat> I guess it is a result of mixing in the "returns" role, but still

[20:13] <Zoffix> m: my Int &foo = sub a(--> Int:D) {}

[20:13] <camelia> rakudo-moar 914218744: ( no output )

[20:13] <Zoffix> m: my Num &foo = sub a(--> Int:D) {}

[20:13] <camelia> rakudo-moar 914218744: OUTPUT: «Type check failed in assignment to &foo; expected Callable[Num] but got Sub+{Callable[Int:D]} (sub a ( --> Int:D) { ...)␤  in block <unit> at <tmp> line 1␤␤»

[20:14] <lizmat> aha, I guess that makes sense

[22:49] <Geth> ¦ rakudo: 08b951c8f3 | (Elizabeth Mattijsen)++ | src/core/array_slice.pm6

[22:49] <Geth> ¦ rakudo: @a[]:v and @a[*]:v should filter out deleted elements

[22:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/08b951c8f3

[22:49] <lizmat> and that concludes my hacking for today

[22:49] <lizmat> good night, #perl6-dev!

[22:51] <timotimo> gnite lizmat :)

[23:10] <MasterDuke> m: my ($a, $b); for (^1_000_000).kv -> $i, $v { $a = $i; $b = $v }; say "$a $b"; say now - INIT now

[23:10] <camelia> rakudo-moar 914218744: OUTPUT: «999999 999999␤2.0947761␤»

[23:11] <MasterDuke> m: my ($a, $b); my $i; for ^1_000_000 -> $v { $a = $i++; $b = $v }; say "$a $b"; say now - INIT now

[23:11] <camelia> rakudo-moar 914218744: OUTPUT: «999999 999999␤0.37265588␤»

[23:11] <MasterDuke> anybody have any ideas for how to make the first one faster?

[23:14] <MasterDuke> 5th by inclusive (and 1st by exclusive) is a sink-all from Any-iterable-methods.pm6

[23:15] <MasterDuke> in the IterateTwoWithoutPhasers class

[23:18] <MasterDuke> `nqp::p6box_i(($!key = nqp::add_i($!key,1)))` why would you do the p6box_i if $!key is a native int?

[23:45] <timotimo> we might want to look into github's graphql based API to see if we can get more data out of github faster without hitting their rate limit
