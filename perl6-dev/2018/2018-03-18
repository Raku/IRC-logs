[03:40] <Geth> ¬¶ star: 86d29b73d8 | (Zoffix Znet)++ (committed using GitHub Web editor) | tools/star/release-guide.pod

[03:40] <Geth> ¬¶ star: Update release guide for new rakudo.org

[03:40] <Geth> ¬¶ star: review: https://github.com/rakudo/star/commit/86d29b73d8

[11:20] <lizmat> Files=1236, Tests=76274, 315 wallclock secs (14.79 usr  5.31 sys + 2166.09 cusr 215.97 csys = 2402.16 CPU)

[11:57] <tyil> with https://github.com/ugexe/zef/issues/233#issuecomment-373969352 in mind, would it be possible to implement semver?

[11:58] <tyil> versions right now apparently don't support it, and it seems like there's no interest to put it in zef, which would be a shame

[13:01] <nine> tyil: I think there's a bit of a misunderstanding here. I'm quite sure ugexe++ is interested in having semver in zef. I also know that he cares for it to be useful which in his eyes it would only be if rakudo behaved in a similar way.

[13:02] <tyil> his first reply surely doesn't come over that way

[13:03] <tyil> disregarding any benefit of supporting it with the notion it only works if every package uses it

[13:05] <nine> tyil: there's no dismissal in general in his answer. He didn't write "doesn't make sense" but wrote "only makes sense" instead - he gave what he sees as the preconditions that have to be met for semver to actually become useful in the Perl 6 world.

[13:06] <tyil> I'm not well versed in the internals of Perl 6, but would it be possible to implement some syntax in the Perl 6 Version object that allows one to use it in the way I describe

[13:06] <tyil> yes, and that precondition is very incorrect

[13:07] <tyil> there's no need to force everyone to semver at all, nor do I even imply that anywhere

[13:07] <tyil> it's a baseless assumption that this is required for it to work

[13:07] <nine> I'd call it debatable :) The requirement for every package to use it may be over the top. Where I'm firmly of the same opinion is that zef and rakudo should treat versions as the same. Otherwise you'd only ever be able to solve half of the problem and not gain anything.

[13:08] <tyil> which is why I ask if its doable to implement this in perl 6 version objects

[13:08] <tyil> it's the only point he makes which is valid

[13:08] <nine> Taking a step back and looking at the larger picture, you can have what you want without any changes to zef or rakudo at all.

[13:09] <tyil> but as I said, I'm not versed in the Perl 6 internals, so I don't know if it can e doable

[13:09] <tyil> I've asked about how to do what I want plenty of times before, yet never gotten an answer

[13:09] <tyil> it just went by, ignored

[13:10] <tyil> if you have the solution, do tell me

[13:10] <nine> There's a difference between ignoring something and simply not having any idea or anything else to contribute. I'm quite sure the latter was usually the case.

[13:11] <nine> What you want is increasing versions in general being treated as improvements but still being able to make a cut in compatibility. Semver's idea is to encode this as convention in the version itself. But in Perl 6 there's another thing that can solve the problem: :api

[13:13] <tyil> this sounds like a workaround, but please go on

[13:13] <tyil> how would I use it to achieve what I want?

[13:13] <nine> Foo:api<2> is incompatible with Foo:api<1> independent of a version number. By increasing :api you can explicitly mark the new version as incompatible (instead of relying on convention) and zef and rakudo will honor this by treating the module as fundamentally different to the older api version. No need for treating versions specially.

[13:14] <nine> So Bar depends on Foo:api<1>:ver<1.2.3+>. We will completely ignore any Foo:api<2>, regardless of its higher version because we know it wouldn't work.

[13:14] <nine> In a sense you could call :api semver's major version.

[13:14] <nine> It's the same concept but written in a more explicit way.

[13:15] <jnthn> Wow, I didn't know about that.

[13:15] <jnthn> nine++

[13:15] <tyil> api is not referenced in the META6.json documentation

[13:15] <tyil> I'll add it later if you don't mind

[13:16] <nine> tyil: please :)

[13:16] <tyil> and describe how it can be used to enforce a semver-like behaviour

[13:16] <tyil> does zef support the api part?

[13:16] <nine> tyil: yes

[13:16] <tyil> I've been told by the creator that I can *only* rely on the things in docs.perl6.org

[13:16] <tyil> since I cannot rely on the actual spec

[13:17] <nine> Disclaimer: since :api is not widely known, I'd not be surprised if there were a couple of bugs in various implementations. OTOH it's simply another part of matching a module's long name, like :auth

[13:18] <tyil> bugs can be resolved

[13:18] <nine> If there are bugs, we will simply fix them, yes.

[13:18] <tyil> but better docs would be the first step in getting it all right

[13:19] <tyil> are there any other things that zef supports but are not in the docs right now?

[13:19] <nine> No idea, sorry :)

[13:24] <MasterDuke> m: my @a = ^100000; my @b; @b = @a[$_, $_+1, $_+2] for ^99997; say @b; say now - INIT now

[13:24] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´[99996 99997 99998]‚ê§3.0243672‚ê§¬ª

[13:24] <MasterDuke> m: my @a = ^100000; my @b; @b = @a[$_], @a[$_+1], @a[$_+2] for ^99997; say @b; say now - INIT now

[13:24] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´[99996 99997 99998]‚ê§0.8848975‚ê§¬ª

[13:24] <AlexDaniel> fwiw check out this doc issue: https://github.com/perl6/doc/issues/764

[13:24] <AlexDaniel> it's about META6.json stuff that is not documented yet

[13:25] <MasterDuke> jnthn, et al.: any suggestions for optimizing that first case i ran (i.e., array slicing)?

[13:25] <nine> I won't be surprised if in the long term :api actually proves to be more useful to the community than :auth.

[13:26] <AlexDaniel> and given that JJ self-assigned that issue, we can resolve it very quickly if someone more knowledgeable  just says what should be there and what it does

[13:26] <MasterDuke> nine: is :api meant to be a number one can compare other numbers against? or just a string one compares for equality?

[13:26] <AlexDaniel> (hint-hint) :)

[13:31] <nine> MasterDuke: I'm not sure. The design documents only talk about "different values": http://design.perl6.org/S11.html#Tie-breaking

[13:32] <nine> Oh boy. Bug indeed. I think, I forgot to actually match on :api

[13:33] <nine> There's all the machinery for supporting it in the META6.json, in the short name lookup files and everything. Just not the actual matching

[13:34] <tyil> nine: would api be a string or an int in the META6.json?

[13:37] <tyil> and is 0 allowed as an api value?

[13:42] <nine> I think....this needs some thinking. E.g. how to upgrade from having no explicitly specified :api to actually using one. Something that can be true for all our ecosystem

[13:43] <tyil> https://github.com/Tyil/perl6-doc/commit/eeae4da112bf73c2e3ea4aae4abd1eb76b9cc10c

[13:44] <tyil> I wonder if it would make sense to split it up in mandatory and optional fields

[15:14] <[Tux]> Rakudo version 2018.02.1-175-gb75d9b1e1 - MoarVM version 2018.02-171-geee5be412

[15:14] <[Tux]> csv-test-xs-20      0.427 -  0.429

[15:14] <[Tux]> csv-ip5xs           0.807 -  0.815

[15:14] <[Tux]> test-t --race       1.064 -  1.075

[15:14] <[Tux]> test-t              2.607 -  2.619

[15:14] <[Tux]> csv-ip5xs-20        7.663 -  7.724

[15:14] <[Tux]> test                8.990 -  9.273

[15:14] <[Tux]> test-t-20 --race   15.940 - 16.204

[15:14] <[Tux]> csv-parser         36.562 - 36.681

[15:14] <[Tux]> test-t-20          45.756 - 46.335

[15:38] <nine> Ok, I've now got a patch for rakudo for properly supporting :api

[15:39] <nine> There's still the open question of whether :api is a Version or a dumb string/number. I'm leaning towards the latter. You will want an exact match as the whole point of :api is that it signifies incompatibility.

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: 32c5c83c6e | (Stefan Seifert)++ | 4 files

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: Support the "api" adverb when loading modules

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03:

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: :api is semver's major version, i.e. it signifies a backards incompatible

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: change. So whenever a module author changes the module's API in a backwards

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: incompatible way (i.e. not just an extension), changing the value of :api

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: gives a signal to the user. This way on the receiving end, one can specify

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: "give me the newest version of the module, but stay in the range that still

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: <‚Ä¶commit message has 5 more lines‚Ä¶>

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: review: https://github.com/rakudo/rakudo/commit/32c5c83c6e

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: 16daf02f7f | (Stefan Seifert)++ | 6 files

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: Make builds reproducible

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03:

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: We replace the compilation timestamp by a hash of the complete source (both

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: the setting and the metamodel), so a recompilation without changes will give

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: the exactly same result.

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: This helps distro packagers as it makes the installation path predictable

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: and removes the requirement to re-build all modules after a re-build of rakudo.

[15:52] <Geth> ¬¶ rakudo/post-release-2018.03: review: https://github.com/rakudo/rakudo/commit/16daf02f7f

[15:57] <Geth> ¬¶ roast/post-release-2018.03: 7d4d402cfa | (Stefan Seifert)++ | S11-repository/curli-install.t

[15:57] <Geth> ¬¶ roast/post-release-2018.03: Test support for :api adverb when loading modules

[15:57] <Geth> ¬¶ roast/post-release-2018.03: review: https://github.com/perl6/roast/commit/7d4d402cfa

[16:35] <japhb> I love this post-release-* convention we seem to have settled on.  Very useful for keeping people unblocked while allowing a release to stabilize.

[16:41] <pmurias> m: say 6.0221409e+23.Rat

[16:41] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´602214089999999939117056‚ê§¬ª

[16:43] <pmurias> m: say 602214090000000000000000.Num

[16:43] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´6.0221409e+23‚ê§¬ª

[16:43] <pmurias> m: say 602214090000000000000000.Num.Rat

[16:43] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´602214090000000006225920‚ê§¬ª

[16:44] <pmurias> it seems that our scientific notation parsing is broken

[16:44] <pmurias> am I correct?

[16:45] <Zoffix> pmurias: there are a couple of bugs in that area... but broken how?

[16:46] <pmurias> by broken I mean buggy

[16:46] <pmurias> a 6.0221408999999994e+23 is read in

[16:46] <Zoffix> m: say 6.0221409e+23; say 602214090000000000000000.Num

[16:46] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´6.0221409e+23‚ê§6.0221409e+23‚ê§¬ª

[16:47] <Geth> ¬¶ rakudo/post-release-2018.03: 7d978fb266 | (Elizabeth Mattijsen)++ | src/core/Array.pm6

[16:47] <Geth> ¬¶ rakudo/post-release-2018.03: Add .append(IterationBuffer) methods to ReificationTargets

[16:47] <Geth> ¬¶ rakudo/post-release-2018.03:

[16:47] <Geth> ¬¶ rakudo/post-release-2018.03: So that we have a better change of .append working in iterators.

[16:47] <Geth> ¬¶ rakudo/post-release-2018.03: review: https://github.com/rakudo/rakudo/commit/7d978fb266

[16:47] <Zoffix> looks fine to me

[16:47] <Zoffix> Buggy how?

[16:47] <pmurias> it seems to be it's also stringified incorrectly

[16:48] <Zoffix> Yeah, it's missing one char of precision.

[16:49] <Zoffix> RT#127184

[16:49] <synopsebot> RT#127184 [open]: https://rt.perl.org/Ticket/Display.html?id=127184 [BUG]  One digit short to correctly stringify a double

[16:49] <Zoffix> I think there was another ticket too

[16:50] <pmurias> Zoffix: we are both missing a char of precision and parsing numbers wrong

[16:50] <pmurias> so the bugs mask themselves

[16:51] <Zoffix> Ah

[16:51] <pmurias> and the reading numbers in wrong bug causes a test fail on the js backend which doesn't stringify numbers incorrectly

[16:51] <pmurias> ./perl6-m -e 'say 6.0221409 * 1e+23'

[16:51] <Zoffix> m: say 602214090000000000000000.Num.FatRat; say 6.0221409e+23.FatRat

[16:51] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´602214090000000006225920‚ê§602214089999999939117056‚ê§¬ª

[16:52] <pmurias> Zoffix: ^^ that's what the grammer does

[16:52] <pmurias> but on say node.js that doesn't give you 6.0221409e+23

[16:52] <Zoffix> I see Num.Rat does a bunch of calculations: https://github.com/rakudo/rakudo/blob/master/src/core/Num.pm6#L46-L91

[16:53] <Zoffix> It probably don't need to do 'em for FatRat and maybe even for Rat either, cause the biggest Int you can get is like 15 chars long, innit? So just pass that to constructors without doing any math.

[16:53] <Zoffix> m: say 1.234567890123456789e0

[16:53] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´1.23456789012346‚ê§¬ª

[16:54] <Zoffix> m: dd chars '1.23456789012346'

[16:54] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´16‚ê§¬ª

[16:54] <Zoffix> m: dd (9x16).Int.log: 2

[16:54] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 3dd (97‚èè5x16).Int.log: 2‚ê§    expecting any of:‚ê§        whitespace‚ê§¬ª

[16:55] <Zoffix> m: dd (9 x 16).Int.log: 2

[16:55] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´53.1508495181978e0‚ê§¬ª

[16:55] <Zoffix> m: say 12345678901234567/10_000_000_000_000_000

[16:55] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´1.2345678901234567‚ê§¬ª

[16:56] <Zoffix> m: say 10_000_000_000_000_000.log: 2

[16:56] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´53.1508495181978‚ê§¬ª

[16:56] <Zoffix> So the largest num can be held inside a Rat pricely. Cause stuff beyond 16+ chars is noise, innit?

[16:59] <pmurias> Zoffix: isn't it 17 according to wikipedia (I'm too tired atm to pass my own judgment ;)

[16:59] <Zoffix> m: dd (9 x 17).Int.log: 2

[16:59] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´56.4727776130852e0‚ê§¬ª

[16:59] <Zoffix> Still fits :)

[17:03] <pmurias> Zoffix: there are some super small nums you can't keep inside a Rat precisly

[17:04] <Zoffix> Looking at https://en.wikipedia.org/wiki/Floating-point_arithmetic  double precision got 60bit mantissa, so the idea is we shove the mantissa into the numerator, and shove a 100000000000 (with enough zeros to divide mantissa to have 1 sigit before the dot), and the rest of the exponent zeros get simply reduced and we end up basically keeping all of the precision

[17:04] <Zoffix> all of the avilable precision that is

[17:04] <Zoffix> pmurias: the "subnormal" stuff? Do we do that for nums?

[17:05] <lizmat> hmm... I would like to import 3e8ee99116e61773f674b into the post-release-2018-03 branch

[17:05] <pmurias> Zoffix: how do you want to represent something smaller than 1/2**64 in a Rat?

[17:05] <lizmat> what would be the git magic for that ?

[17:06] <lizmat> git cherry-pick ?

[17:06] <Zoffix> lizmat: maybe `git cherry-pick 3e8ee99116e61773f674b` while on the post-release-2018.03 branch and then revert it while on master branch?

[17:06] <Zoffix> m: say (1/2**64).Num

[17:06] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´5.42101086242752e-20‚ê§¬ª

[17:06] <lizmat> Zoffix: ok, will do that

[17:07] <Zoffix> pmurias: it'd be 542101086242752/100000000000000

[17:07] <Zoffix> pmurias: I'm saying we can keep full precision available in any Num

[17:07] <Zoffix> And 1/2**64 does lose precision when converted to a Num

[17:09] <Geth> ¬¶ rakudo: 2a0b90f83c | (Elizabeth Mattijsen)++ | src/core/IterationBuffer.pm6

[17:09] <Geth> ¬¶ rakudo: Revert "Give IterationBuffer an .append for IterationBuffers"

[17:09] <Geth> ¬¶ rakudo:

[17:09] <Geth> ¬¶ rakudo: This reverts commit 3e8ee99116e61773f674bf7b5949c321c077ad3b.

[17:09] <Geth> ¬¶ rakudo:

[17:09] <Geth> ¬¶ rakudo: Doing this in the post-release.2018-03 branch

[17:09] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/2a0b90f83c

[17:09] <Geth> ¬¶ rakudo/post-release-2018.03: 228495927c | (Elizabeth Mattijsen)++ | src/core/IterationBuffer.pm6

[17:09] <Geth> ¬¶ rakudo/post-release-2018.03: Give IterationBuffer an .append for IterationBuffers

[17:09] <Geth> ¬¶ rakudo/post-release-2018.03:

[17:09] <Geth> ¬¶ rakudo/post-release-2018.03: This should come in handy when re-assembling HyperWorkBatches in the

[17:09] <Geth> ¬¶ rakudo/post-release-2018.03: .push-all case, and probably some other cases.

[17:09] <Geth> ¬¶ rakudo/post-release-2018.03: review: https://github.com/rakudo/rakudo/commit/228495927c

[17:09] <Zoffix> Well, 542101086242752X/1000000000000000; once we fix the one-missing-digit bug in Num.Str

[17:10] <Zoffix> m: say Rat.new(542101086242752,100000000000000).nude

[17:10] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´(8470329472543 1562500000000)‚ê§¬ª

[17:10] <Zoffix> And we let Rat.new reduce the numerator/denominator instead of doing that in Num.Rat

[17:10] <pmurias> Zoffix: isn't 542101086242752/100000000000000 like ~ 5

[17:11] <Zoffix> m: say 542101086242752/100000000000000 =~= 5.42101086242752e-20

[17:11] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´False‚ê§¬ª

[17:11] <Zoffix> m: say 542101086242752/100000000000000

[17:11] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´5.42101086242752‚ê§¬ª

[17:11] <Zoffix> Oh, shit, right

[17:11] <Zoffix> :D

[17:11] <Zoffix> ZofBot: math is hard. Let's go shopping!

[17:11] <ZofBot> Zoffix, And opened my eyes but couldn‚Äôt see anything at first because there were too many people

[17:14] <Zoffix> Though the idea still stands for Num.FatRat, I think :)

[17:14] <Zoffix> There's even a ticket for that RT#128828

[17:14] <synopsebot> RT#128828 [new]: https://rt.perl.org/Ticket/Display.html?id=128828 [BUG] Num.FatRat coercion is inexact

[17:15] <lizmat> grr I need to cherry-pick lots more  :-

[17:15] <lizmat> (

[17:16] <Zoffix> lizmat: I think AlexDaniel ran full toaster on latest master and all was green

[17:16] <AlexDaniel> yes

[17:16] <Zoffix> on (current HEAD)~1; before that last revert

[17:17] <lizmat> yeah, but what I want to add potentially could break toaster even if spectest is green

[17:17] <lizmat> the area I'm working in is really undertested  :-

[17:17] <lizmat> (

[17:18] <AlexDaniel> it could've been left in there I think

[17:18] <AlexDaniel> but ok

[17:18] <lizmat> any idea of an ETA for the release ?

[17:19] <AlexDaniel> samcv: ‚Üë

[17:24] <Zoffix> m: say 5.42101086242752e+20.Rat.nude

[17:24] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´(542101086242752036864 1)‚ê§¬ª

[17:24] <Zoffix> m: say 5.42101086242752e-20.Rat(1e-21).nude

[17:24] <camelia> rakudo-moar b75d9b1e1: OUTPUT: ¬´(1 18446744073709559808)‚ê§¬ª

[17:24] <Zoffix> .oO( int64 denominator Rats, where negative denominator signifies numerator/denominator should be reversed )

[17:25] <Zoffix> FlipRat :"D

[17:25] <Zoffix> .seen TimToady

[17:25] <yoleaux> I saw TimToady 5 Mar 2018 19:21Z in #perl6-dev: <TimToady> well, that's what the Str part of RatStr was supposed to be

[17:26] * Zoffix is still waiting for TimToady to feedback on MidRat stuff https://github.com/rakudo/rakudo/blob/master/docs/archive/2018-03-04--Polishing-Rationals.md#polishing-rationals

[19:44] <samcv> lizmat: working on the moarvm release now

[19:54] <lizmat> samcv++

[20:06] <AlexDaniel> yay

[20:07] <AlexDaniel> please ping me when it's committed

[20:12] <tyil> nine: I'd go for a simple number (on the "api" field type)

[20:13] <timotimo> i'd say sometimes an actual name is warranted

[20:14] <timotimo> for example, what if you have some functionality that's famously implemented in a python library and a ruby library and your module wants to be exactly what the users of each library are used to; so you'd perhaps have :api<python> and :api<ruby> or names of the modules in question ro what

[20:16] <tyil> "So whenever a module author changes the module's API in a backwards

[20:16] <tyil> incompatible way (i.e. not just an extension), changing the value of :api

[20:16] <tyil> gives a signal to the use

[20:16] <tyil> "

[20:17] <tyil> as far as I can tell the intention is not to specify anything about how it is implementing an interface

[20:18] <lizmat> fwiw, I see the API as an identifier, not a version

[20:18] <lizmat> :api actually

[20:18] <tyil> also, the only reason I want it so I can reasanbly use semver standards

[20:19] <tyil> not to specify I'm going to get a vastly different interface

[20:19] <tyil> that's what module names are already good at

[20:19] <lizmat> so if you just request something with an api string, then the highest version available with that :api should be selected / loaded

[20:21] <AlexDaniel> samcv: really don't want to interrupt you from the release stuff, but can't help myself not to ask this question

[20:21] <AlexDaniel> m: say (0x7FFFFFFF).chr.ord.base(16)'

[20:21] <camelia> rakudo-moar 2a0b90f83: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3say (0x7FFFFFFF).chr.ord.base(16)7‚èè5'‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§       ‚Ä¶¬ª

[20:21] <AlexDaniel> m: say (0x7FFFFFFF).chr.ord.base(16)

[20:21] <camelia> rakudo-moar 2a0b90f83: OUTPUT: ¬´7FFFFFFF‚ê§¬ª

[20:21] <AlexDaniel> how come this is valid?

[20:21] <AlexDaniel> yeah you can't use that in anything that takes utf-8, but why does .chr allow it in the first place?

[20:22] <AlexDaniel> m: say (0x7FFFFFFF+1).chr.ord.base(16)

[20:22] <camelia> rakudo-moar 2a0b90f83: OUTPUT: ¬´chr codepoint 2147483648 (0x80000000) is too large‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:28] <samcv> AlexDaniel: because it's not in utf8

[20:28] <samcv> only when it gets converted to utf8 is it invalid

[20:29] <AlexDaniel> but unicode only has characters up to 0x10FFFF, right? Isn't the encoding irrelevant?

[20:30] <pmurias> what's a difference between :api and an extra name part?

[20:33] <AlexDaniel> unicodable6: U+7FFFFFFF

[20:33] <unicodable6> AlexDaniel, U+7FFFFFFF <unassigned> [] (unencodable character)

[20:33] <AlexDaniel> unidump: U+7FFFFFFF

[20:33] <unicodable6> AlexDaniel, https://gist.github.com/3912777bc21e882b52a65621fbb41745

[20:34] <samcv> AlexDaniel: well so far

[20:34] <samcv> it may be a while but it could happen eventually

[20:34] <AlexDaniel> m: say (0x7FFFFFFF).chr.unival

[20:34] <camelia> rakudo-moar 2a0b90f83: OUTPUT: ¬´0‚ê§¬ª

[20:34] <AlexDaniel> that looks wrong

[20:35] <samcv> m: say (0.chr.unival)

[20:35] <camelia> rakudo-moar 2a0b90f83: OUTPUT: ¬´NaN‚ê§¬ª

[20:35] <AlexDaniel> nvm I'll submit a ticket

[20:35] <samcv> AlexDaniel: yes it does. please file a bug

[20:35] <AlexDaniel> j: say (0.chr.unival)

[20:36] <camelia> rakudo-jvm a92950fb4: OUTPUT: ¬´unival NYI on jvm backend‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:38] <samcv> AlexDaniel: but 0x10FFFF is just the limit due to limitations in utf16 and afaik characters above 0x10FFFF are just unassigned and unlikely to be assigned for the forseeable future. until they run out I suspect

[20:39] <AlexDaniel> R#1625

[20:39] <synopsebot> R#1625 [open]: https://github.com/rakudo/rakudo/issues/1625 [Moar] .unival of characters beyond 0x10FFFF is 0 but should be NaN

[20:39] <AlexDaniel> samcv: yea but then we also have implementation-specific limit of 2147483647

[20:40] <AlexDaniel> why not bring it down to 0x10FFFF and make the implementation consistent with unicode itself

[20:40] <samcv> 2147483647 is much higher than 0x10FFFF

[20:40] <AlexDaniel> say 2147483647 / 0x10FFFF

[20:40] <AlexDaniel> m: say 2147483647 / 0x10FFFF

[20:40] <camelia> rakudo-moar 2a0b90f83: OUTPUT: ¬´1927.53114097‚ê§¬ª

[20:40] <samcv> we're pretty safe :P

[20:41] <AlexDaniel> EVALABLE!! I'LL KILL YOU

[20:41] <AlexDaniel> evalable6: leave your position during working hours again and you're fired

[20:41] <evalable6> AlexDaniel, rakudo-moar 2a0b90f83: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/Irk_IvQjOW‚ê§Undecla‚Ä¶¬ª

[20:41] <evalable6> AlexDaniel, Full output: https://gist.github.com/7e1a0c361e14fdb9cb80d9f1f9b518c7

[22:26] <AlexDaniel> errrr

[22:26] <AlexDaniel> c: 2018.02.1,HEAD :10<1.a>

[22:26] <committable6> AlexDaniel, https://gist.github.com/dd34783a3879c371d82c9da326e85c06

[22:26] <AlexDaniel> this hang is a regression of this release

[22:26] <AlexDaniel> bisect: old=2018.02.1 :10<1.a>

[22:27] <bisectable6> AlexDaniel, Bisecting by exit signal (old=2018.02.1 new=2a0b90f). Old exit signal: 0 (None)

[22:27] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/04773eb61e748182525acbf643d0b82c

[22:27] <bisectable6> AlexDaniel, (2018-02-28) https://github.com/rakudo/rakudo/commit/7835652d54f6538337b694f03e936a4814bec925

[22:28] <AlexDaniel> lizmat: ‚Üë

[22:28] <AlexDaniel> bisect: 7835652d54^,7835652d54 :10<1.a>

[22:28] <bisectable6> AlexDaniel, On both starting points (old=2015.12 new=2a0b90f) the exit code is 1 and the output is identical as well

[22:28] <bisectable6> AlexDaniel, Output on both points: ¬´04===SORRY!04=== Error while compiling /tmp/pzyuVKaFzj‚ê§Confused‚ê§at /tmp/pzyuVKaFzj:1‚ê§------> 03783565208‚èè04d54^,7835652d54 :10<1.a>‚ê§    expecting any of:‚ê§        whitespace‚ê§¬ª

[22:28] <AlexDaniel> oops

[22:28] <AlexDaniel> c: 7835652d54^,7835652d54 :10<1.a>

[22:29] <committable6> AlexDaniel, https://gist.github.com/e7585f093916069f224ed967fe205a20

[22:29] <lizmat> so, which commit is causing the problem?

[22:29] <AlexDaniel> lizmat: (2018-02-28) https://github.com/rakudo/rakudo/commit/7835652d54f6538337b694f03e936a4814bec925

[22:30] <lizmat> that can only mean that it goes awol in the error reproting

[22:30] <AlexDaniel> to anyone who fixes this, please commit to master

[22:31] * lizmat is looking at it

[22:32] <AlexDaniel> there's also Zoffix self-assigned to that issue

[22:33] <lizmat> well, if I don't find it in the next 20 minutes or so, it'll have to be someone else

[22:33] <lizmat> because I need to get up early tomorrow and may not be in a position to look at it before I need to be away for the most of the day

[22:34] <AlexDaniel> fwiw I'm going to bed relatively soon also

[22:34] <Zoffix> Yeah, I marked as assigned, but was planning to stash it until later in the week.

[22:35] * Zoffix starts looking at it too

[22:37] <Zoffix> ah hehe

[22:39] <lizmat> Zoffix: ??

[22:40] <Zoffix> Well, I'm guessing it's infinilooping somewhere in UNBASE, cause there's a condition that shoves it through ":$base<$ch>" syntax again

[22:40] * Zoffix sticks debug prints in

[22:42] <Zoffix> nope :)

[22:43] <lizmat> does it actually get to UNBASE ?

[22:43] <Zoffix> no, I thought it did, but it was just a guess.

[22:43] <Zoffix> lizmat: if you wanna go to bed, then just go, I'll track it down adn fix

[22:46] <lizmat> ok, my reasoning so far:

[22:47] <lizmat> before, it was caught at compile time by the <.malformed: 'radix number'> at Grammar:3696  (I think)

[22:48] <lizmat> now I just verified it doesn't even get there

[22:49] <Zoffix> s: X::Str::Numeric, 'message', \()

[22:49] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/2a0b90f83/src/core/Exception.pm6#L2033

[22:51] * Zoffix dreams of the day when re-compile time won't be nearly 2m :)

[22:54] <Zoffix> got it

[22:55] <Zoffix> c: 2018.01 say [.file, .line] with "1.g".^lookup("substr").cando(\("", 2e0)).head

[22:55] <committable6> Zoffix, ¬¶2018.01: ¬´[SETTING::src/core/Cool.pm 75]‚ê§¬ª

[22:55] <Zoffix> c: HEAD say [.file, .line] with "1.g".^lookup("substr").cando(\("", 2e0)).head

[22:55] <committable6> Zoffix, ¬¶HEAD(2a0b90f): ¬´[SETTING::src/core/Cool.pm6 155]‚ê§¬ª

[22:55] <Zoffix> reaaly

[22:55] <Zoffix> yeah

[22:56] <Zoffix> There only Int candidates in Str.pm, and it's infinitlooping with that Num between Cool and Str

[22:56] <lizmat> ok

[22:57] <lizmat> lemme look at that

[22:58] <lizmat> testing a fix

[23:00] <lizmat> running spectest now

[23:04] <Zoffix> huh

[23:04] <Zoffix> m: :3<111.a11>

[23:04] <camelia> rakudo-moar 2a0b90f83: OUTPUT: ¬´MoarVM panic: Memory allocation failed; could not allocate 90112 bytes‚ê§¬ª

[23:04] <Zoffix> This is already in the spectest :/

[23:04] <Zoffix> in S02-literals/radix.t

[23:05] <lizmat> how come I haven't seen this fail so far then?  or was it just added ?

[23:06] <Zoffix> No, seems old. Doesn't fail in `throws-like` seems

[23:06] <Zoffix> m: use Test; throws-like ':3<111.a11>', X::Str::Numeric

[23:06] <camelia> rakudo-moar 2a0b90f83: OUTPUT: ¬´    1..2‚ê§    ok 1 - ':3<111.a11>' died‚ê§    ok 2 - right exception type (X::Str::Numeric)‚ê§ok 1 - did we throws-like X::Str::Numeric?‚ê§¬ª

[23:06] <lizmat> perhaps the EVAL makes a difference ?

[23:07] <Zoffix> m: try ':3<111.a11>'.EVAL; say $!.^name

[23:07] <camelia> rakudo-moar 2a0b90f83: OUTPUT: ¬´X::Str::Numeric+{X::Comp}‚ê§¬ª

[23:07] <Zoffix> yeah. weird

[23:07] <Geth> ¬¶ rakudo: 15ccfd3331 | (Elizabeth Mattijsen)++ | src/core/Str.pm6

[23:07] <Geth> ¬¶ rakudo: Add missing Str.substr(Any x) candidate

[23:07] <Geth> ¬¶ rakudo:

[23:07] <Geth> ¬¶ rakudo: Fixes #1624, tests needed.

[23:07] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/15ccfd3331

[23:07] <synopsebot> RAKUDO#1624 [open]: https://github.com/rakudo/rakudo/issues/1624 [regression][‚ö† blocker ‚ö†] fp numbers with outside-range chars hang

[23:07] <Zoffix> m: try "\n:3<111.a11>\n".EVAL; say $!.^name

[23:07] <camelia> rakudo-moar 2a0b90f83: OUTPUT: ¬´X::Str::Numeric+{X::Comp}‚ê§¬ª

[23:08] * lizmat calls it a day

[23:08] <lizmat> good night, #perl6-dev!

[23:08] <Zoffix> lizmat++ night \o

[23:09] <AlexDaniel> btw, is substr-rw free of this issue?

[23:10] <AlexDaniel> (whatever it is, haven't looked at the commits yet)

[23:10] <Zoffix> m: say ($ = "x").substr-rw: 1e0

[23:10] <camelia> rakudo-moar 2a0b90f83: OUTPUT: ¬´‚ê§¬ª

[23:10] <Zoffix> yeah, free

[23:11] <AlexDaniel> ok. Well, that was quick. Zoffix++ lizmat++

[23:20] <Geth> ¬¶ roast: 8bfcb7c64a | (Zoffix Znet)++ | S02-literals/radix.t

[23:20] <Geth> ¬¶ roast: Cover hang in rad numbers/substr with Num

[23:20] <Geth> ¬¶ roast:

[23:20] <Geth> ¬¶ roast: Closes https://github.com/rakudo/rakudo/issues/1624 R#1624

[23:20] <Geth> ¬¶ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/15ccfd3331

[23:20] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/8bfcb7c64a

[23:20] <synopsebot> R#1624 [open]: https://github.com/rakudo/rakudo/issues/1624 [regression] fp numbers with outside-range chars hang

[23:20] <Zoffix> ZofBot: teamwork o/\o

[23:20] <ZofBot> Zoffix, ‚Äù And when Mother came into the spare room before went to sleep said, ‚Äú have to go to Swindon to take my level

[23:38] <MasterDuke> m: use nqp; class :: { has $!a; has $!b; method new(\a, \b) { my \rt = nqp::create(self); nqp::bindattr(rt, self, q|$!a|, a); nqp::bindattr(rt, self, q|$!b|, b); rt } }.new($_, $_) for ^1_000_000; say now - INIT now

[23:38] <camelia> rakudo-moar 15ccfd333: OUTPUT: ¬´0.6247775‚ê§¬ª

[23:39] <MasterDuke> m: class :: { has $!a; has $!b }.new(:a($_), :b($_)) for ^1_000_000; say now - INIT now

[23:39] <camelia> rakudo-moar 15ccfd333: OUTPUT: ¬´1.100576‚ê§¬ª

[23:39] <MasterDuke> i wouldn't have guessed the first ^^^ would be that much faster

[23:44] <timotimo> MasterDuke: going through BUILDALL and BUILD perhaps does that?

[23:44] <timotimo> that's why we have so many SET_SELFs in core

[23:44] <MasterDuke> yeah, BUILDALL and Mu's new

[23:45] <timotimo> though we try to compile custom BUILDALL methods
