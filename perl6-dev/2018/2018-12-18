[00:10] <timotimo> ===> Installing: OpenSSL:ver<0.1.21>:auth<github:sergot>

[00:10] <timotimo> aborted

[00:10] <timotimo> No such method 'dist' for invocant of type 'Str'. Did you mean any of these?

[00:10] <timotimo> today's the day of funny error messages

[00:19] <timotimo> jnthn: so, only one test is hanging for me, which is upgrade.t; it's trying to acquire a semaphore that apparently isn't getting released; it's from Awaiter's Awaiter::Blocking await method, the handle the awaiter that's supposed to release the semaphore is subscribed to is a Rakudo::Internals::ReactAwaitHandle

[00:23] <timotimo> it appears to me the debug interface doesn't currently have a way to get from an MVMCode to anything else, like "what is this code for?"

[00:31] <timotimo> it belongs to some block that's directly inside some unnamed compunit's <unit>

[00:35] <timotimo> i think what the debugserver could definitely use - and this can actually be implemented by a client, though it'd surely be faster if implemented on the server - is a way to find all references to an object you have a handle to

[00:36] <timotimo> so i could find the closure that holds the other reference to the semaphore, and the queue it's in - if any

[00:50] <Geth> ¦ rakudo/cherry-pick-for-io-socket-async-fix: 57db1c278b | (Timo Paulssen)++ | src/core/IO/Socket/Async.pm6

[00:50] <Geth> ¦ rakudo/cherry-pick-for-io-socket-async-fix: make rakudo compatible with current moarvm

[00:50] <Geth> ¦ rakudo/cherry-pick-for-io-socket-async-fix: review: https://github.com/rakudo/rakudo/commit/57db1c278b

[00:51] <timotimo> jnthn: ^ you can checkout this commit to be where i'm at, or cherry-pick it to other places

[01:06] <AlexDaniel> timotimo: R#2553 ticket if you want to write something down

[01:06] <synopsebot> R#2553 [open]: https://github.com/rakudo/rakudo/issues/2553 [regression][⚠ blocker ⚠] IO::Socket::Async::SSL hanging on its tests

[05:05] <AlexDaniel> samcv: so there's that one last blocker, once it's closed we're ready to go

[05:24] <samcv> AlexDaniel, awesome

[05:24] <yoleaux> 17 Dec 2018 08:04Z <brrt> samcv: checkout commit https://github.com/MoarVM/MoarVM/commit/66efd5dc802480f935a0a44b5b4f8a1ba4b2e789

[06:12] *** ufobat_ joined
[06:13] *** p6bannerbot sets mode: +v ufobat_

[07:17] <timotimo> i'm getting "address already in use" a couple of times, huh

[10:07] <lizmat> Files=1260, Tests=86402, 341 wallclock secs (18.75 usr  6.06 sys + 2422.78 cusr 213.30 csys = 2660.89 CPU)

[10:49] *** Ulti left
[10:55] *** Ulti joined
[10:56] *** p6bannerbot sets mode: +v Ulti

[10:57] *** cognominal joined
[10:58] *** p6bannerbot sets mode: +v cognominal

[11:00] *** cognomin_ left
[11:21] *** cognomin_ joined
[11:22] *** p6bannerbot sets mode: +v cognomin_

[11:24] *** cognominal left
[12:22] *** lucasb joined
[12:22] *** p6bannerbot sets mode: +v lucasb

[12:59] <|Tux|> Rakudo version 2018.11-82-ge7b61aff7 - MoarVM version 2018.11-41-ge5cddf3d6

[12:59] <|Tux|> csv-test-xs-20      0.427 -  0.430

[12:59] <|Tux|> test-t --race       0.766 -  0.813

[12:59] <|Tux|> csv-ip5xs           0.917 -  0.938

[12:59] <|Tux|> test-t              1.735 -  1.766

[12:59] <|Tux|> test                7.453 -  7.486

[12:59] <|Tux|> csv-ip5xs-20        6.993 -  7.632

[12:59] <|Tux|> test-t-20 --race    9.338 -  9.520

[12:59] <|Tux|> csv-parser         21.598 - 21.831

[12:59] <|Tux|> test-t-20          29.401 - 30.066

[13:04] <timotimo> oh

[13:04] <timotimo> here's a fun twist

[13:05] <timotimo> jnthn: it looks like i made io-socket-ssl b0rk by putting in "last" support for whenever blocks

[13:05] <timotimo> at least that's the first bad commit in my bisect

[13:23] <jnthn> timotimo: oh, interesting...

[13:23] <jnthn> Bit busy at the moment but can check later on today

[16:07] <jnthn> timotimo: Yes, can confirm that if I revert that change, then it works

[16:10] <jnthn> oh wow, the test actually uses `last` in a whenever...

[16:13] <japhb> jnthn: I'm confused.  Are you saying that the test used 'last' before it was supported, and whatever failure mode that had made the test appear to pass, but when 'last' was actually implemented, the test began to fail?

[16:13] <jnthn> japhb: Yes, exactly that.

[16:13] <lizmat> that would be my interpretation 

[16:13] <jnthn> Which matches my surprise the other day that last wasn't implemented. Evidently I used it somewhere.

[16:21] <jnthn> And curiously, just removing the `last` seems to make the test pass

[16:21] <jnthn> I should run this a bunch of times to make sure

[16:22] <lizmat> maybe the last wasn't doing anything before...  :-)

[16:22] <japhb> I guess this begs the question though -- is timotimo's implementation of 'last' in whenever blocks correct?  Does that *also* need to be reverted?

[16:23] <japhb> (with the goal of not releasing a Rakudo with a broken implementation)

[16:23] <jnthn> I reviewed that and didn't immediately see a problem with it

[16:23] <japhb> OK, fair enough.

[16:24] <jnthn> OK, ran 100 times in a row with `last` removed, no hang

[16:30] <jnthn> New release shipped off to CPAN

[16:30] <jnthn> lizmat: Do your new tests cover https://github.com/MoarVM/MoarVM/issues/1020 ?

[16:31] * lizmat looks

[16:32] <lizmat> m: dd blob8.new(0 xx 4).read-num32(0)

[16:32] <camelia> rakudo-moar e7b61aff7: OUTPUT: «0e0␤»

[16:32] <lizmat> yeah, they cover that

[16:32] <jnthn> That's the thingy I fixed yesterday

[16:32] <jnthn> OK, cool

[16:32] <lizmat> m: dd blob8.new(0 xx 3).read-num32(0)

[16:32] <camelia> rakudo-moar e7b61aff7: OUTPUT: «MVMArray: read_buf out of bounds offset 0 start 0 elems 3 count 4␤  in block <unit> at <tmp> line 1␤␤»

[16:33] <lizmat> m: dd blob8.new(0 xx 4).read-num32(1)

[16:33] <camelia> rakudo-moar e7b61aff7: OUTPUT: «MVMArray: read_buf out of bounds offset 1 start 0 elems 4 count 4␤  in block <unit> at <tmp> line 1␤␤»

[17:26] *** SqrtNegInf left
[17:30] <japhb> jnthn: Any idea how long it takes for CPAN to index the new release?

[17:33] <jnthn> japhb: 1-2 hours maybe

[17:33] <jnthn> japhb: I already saw it get mentioned on #perl6

[17:33] <jnthn> But that means it was recognized as uploaded, rather than the index zef uses has it, I think

[17:33] <japhb> Ah, OK

[17:42] *** SqrtNegInf joined
[17:43] *** p6bannerbot sets mode: +v SqrtNegInf

[18:02] <dogbert17> ZOFFLOP: t/spec/S17-supply/return-in-tap.t - Cannot find method 'sink': no method cache and no .^find_method in block <unit> at t/spec/S17-supply/return-in-tap.t line 30

[18:27] <Geth> ¦ rakudo: 79824db536 | (Elizabeth Mattijsen)++ | src/core/Array.pm6

[18:27] <Geth> ¦ rakudo: Add warning for improperly shaped arrays

[18:27] <Geth> ¦ rakudo: 

[18:27] <Geth> ¦ rakudo: In response to R#2554

[18:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/79824db536

[18:27] <synopsebot> R#2554 [open]: https://github.com/rakudo/rakudo/issues/2554 Difference between Int @a and @a[Int]

[19:13] <Geth> ¦ rakudo: 55d08c8fbc | (Elizabeth Mattijsen)++ | src/core/Array.pm6

[19:13] <Geth> ¦ rakudo: Improve warning, make fast path better optimisable

[19:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/55d08c8fbc

[19:18] <lucasb> m: my @a['a']

[19:18] <camelia> rakudo-moar 79824db53: OUTPUT: «P6opaque: get_boxed_ref could not unbox for the representation 'P6bigint' of type Failure␤  in block <unit> at <tmp> line 1␤␤»

[19:35] <lizmat> bisectable6: my @a["a"]

[19:35] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=55d08c8) because on both starting points the exit code is 1

[19:35] <bisectable6> lizmat, bisect log: https://gist.github.com/c103e36b3aa58cf1030827b2a2ad198d

[19:35] <bisectable6> lizmat, (2016-04-09) https://github.com/rakudo/rakudo/commit/1cb2e8d9e71797f576b3ffc01129a196e30a9bad

[19:36] <lizmat> bisectable6: old=2018.10 my @a["a"]

[19:36] <bisectable6> lizmat, On both starting points (old=2018.10 new=55d08c8) the exit code is 1 and the output is identical as well

[19:36] <bisectable6> lizmat, Output on both points: «P6opaque: get_boxed_ref could not unbox for the representation 'P6bigint' of type Failure␤  in block <unit> at /tmp/ikpsQaLqjD line 1␤␤»

[19:36] <lizmat> bisectable6: old=2017.01 my @a["a"]

[19:36] <bisectable6> lizmat, Bisecting by output (old=2017.01 new=55d08c8) because on both starting points the exit code is 1

[19:37] <bisectable6> lizmat, bisect log: https://gist.github.com/0a9be74f54a21c73e6630d1de0f4b816

[19:37] <bisectable6> lizmat, (2018-01-30) https://github.com/rakudo/rakudo/commit/4d2b54ebe8993a4e332a699775c00a9f23af699c

[19:37] <lizmat> bisectable6: old=2018.02 my @a["a"]

[19:37] <bisectable6> lizmat, On both starting points (old=2018.02 new=55d08c8) the exit code is 1 and the output is identical as well

[19:37] <bisectable6> lizmat, Output on both points: «P6opaque: get_boxed_ref could not unbox for the representation 'P6bigint' of type Failure␤  in block <unit> at /tmp/VyPwRdqTjD line 1␤␤»

[19:37] <lizmat> ok, so we have this error for almost a year already

[19:45] <lizmat> bisectable6: old=2018.02 my @a["10"]

[19:45] <bisectable6> lizmat, On both starting points (old=2018.02 new=55d08c8) the exit code is 0 and the output is identical as well

[19:45] <bisectable6> lizmat, Output on both points: «»

[19:46] <lizmat> bisectable6: old=2018.02 my @a["10"; dd @a]

[19:46] <bisectable6> lizmat, On both starting points (old=2018.02 new=55d08c8) the exit code is 1 and the output is identical as well

[19:46] <bisectable6> lizmat, https://gist.github.com/94e805d54148581b07a8bf78d2692eff

[19:46] <lizmat> m: my @a["10"]; dd @a

[19:46] <camelia> rakudo-moar 55d08c8fb: OUTPUT: «Array element = Array.new(:shape("10",), [Any, Any, Any, Any, Any, Any, Any, Any, Any, Any])␤»

[19:58] <Geth> ¦ rakudo: 24c8e172f5 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm6

[19:58] <Geth> ¦ rakudo: Make 'my @a["a"]' a bit more awesome

[19:58] <Geth> ¦ rakudo: 

[19:58] <Geth> ¦ rakudo: Should probably also be checked at compile / optimizer time.

[19:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/24c8e172f5

[19:58] <lizmat> afk for some aquamanning&

[20:01] <[Coke]> oooh, let me know if it's any good

[20:01] <[Coke]> hoping to hit that and spiderverse both this week

[20:29] <masak> heard good things on the twittervine about the latter

[20:32] *** lizmat left
[21:01] *** lizmat joined
[21:01] *** p6bannerbot sets mode: +v lizmat

[21:03] <timotimo> i just came from the cinema where i saw the spiderverse one

[21:03] <timotimo> i enjoyed it a lot

[21:29] *** cognomin_ left
[22:01] *** lucasb left
[22:28] *** pmurias_ joined
[22:28] *** p6bannerbot sets mode: +v pmurias_

[22:29] <pmurias_> a super annoying for me bug that cause a ton of roast fails in rakudo.js-in-browser because it's precompiling tests: https://github.com/rakudo/rakudo/issues/2555

[22:33] <japhb> Gah, it looks like zef still can't see the new IO::Socket::Async::SSL.  That's an annoyingly long lag for bug fixes to be visible, because it makes it hard for people to retest a fix with less than a day of turnaround.  :-(

[22:34] <AlexDaniel> jnthn, timotimo: any news for R#2553 ?

[22:34] <synopsebot> R#2553 [open]: https://github.com/rakudo/rakudo/issues/2553 [regression][⚠ blocker ⚠] IO::Socket::Async::SSL hanging on its tests

[22:49] <AlexDaniel> oh so something was fixed?

[22:49] <AlexDaniel> ahhhh so it's an issue in the module itself

[22:50] <AlexDaniel> I should have backlogged a bit!! :)

[22:51] <AlexDaniel> OK, that's it then!

[22:51] <AlexDaniel> samcv: I think now we're ready for sure, at least I have not heard of any other issues

[22:52] <AlexDaniel> let me know if I missed anything

[22:52] <AlexDaniel> japhb: zef install https://github.com/jnthn/p6-io-socket-async-ssl.git

[22:52] <AlexDaniel> or something like that, should work

[22:53] <jnthn> AlexDaniel: Yeah, I did a new release of the module, then got distracted by something else, and forgot to update the ticket.

[22:53] <AlexDaniel> jnthn: I don't see the new release btw

[22:53] <AlexDaniel> jnthn: at least the version number was not bumped

[22:53] <jnthn> It was reported on #perl6

[22:53] <jnthn> By buggable

[22:53] <AlexDaniel> yea but with the same version zef is probably not going to update?

[22:54] <jnthn> huh, the release script grabs the version number from the META6.json...

[22:54] <jnthn> Unless I forgot to commit the META6.json :/

[22:54] <AlexDaniel> :)

[22:54] <jnthn> *sigh*

[22:54] <jnthn> yes

[22:54] <jnthn> looks like

[22:56] <jnthn> Sometimes the "worse is better" github ecosystem seems better :P

[22:57] <jnthn> New release uploaded 

[23:03] *** go|dfish left
[23:13] <japhb> thx, jnthn 

[23:13] *** go|dfish joined
[23:13] *** p6bannerbot sets mode: +v go|dfish

[23:24] <pmurias_> jnthn: when you have some time please look at https://github.com/rakudo/rakudo/issues/2555

[23:24] *** pmurias_ is now known as pmurias

[23:26] <jnthn> pmurias: Any idea if that's a regression?

[23:27] <pmurias> haven't checked

[23:27] <pmurias> jnthn: not sure how to get our regression checking bot to precompile stuff

[23:28] <pmurias> jnthn: it's shared by all backends but it surfaced in rakudo.js-in-browser mode because it only happens when precompiling

[23:31] <pmurias> jnthn: when serializing a context we check if it's static code is in a sc (if it's not it doesn't get serialized)

[23:32] <pmurias> and the static code outer of the METAOP doesn't have the sc

[23:35] <pmurias> I need to get some sleep as it's pas my bedtime I'm not of much use right now ;)

[23:37] <jnthn> Rest well :)

[23:51] <timotimo> might be interesting to see if the optimizer messes that up, it does have some optimizations for some metaops

[23:53] <timotimo> you can use bisectable with extra scripts and such

[23:53] <timotimo> i forgot what the temp folder is called, but i can search the irclog!

[23:55] *** pmurias left
[23:56] <AlexDaniel> timotimo: ./sandbox/  or /tmp

[23:56] <timotimo> thanks!

[23:57] <timotimo> so

[23:58] <timotimo> bisectable6: BEGIN "sandbox/precompthis.pm6".IO.spurt('sub bug is export { &[!<]; }'); use lib "sandbox"; use precompthis; bug()(9, 9)

[23:58] <bisectable6> timotimo, Bisecting by output (old=2015.12 new=24c8e17) because on both starting points the exit code is 1

[23:59] <bisectable6> timotimo, bisect log: https://gist.github.com/62b46561f060eeae80b02afcfc473b15

[23:59] <bisectable6> timotimo, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[23:59] <bisectable6> timotimo, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ｢bisect: say rand｣)

[23:59] <AlexDaniel> well…

[23:59] <timotimo> ooh

[23:59] <AlexDaniel> c: 2018.01,HEAD BEGIN "sandbox/precompthis.pm6".IO.spurt('sub bug is export { &[!<]; }'); use lib "sandbox"; use precompthis; bug()(9, 9)

[23:59] <timotimo> it's not allowed to precomp there, eh?

[23:59] <committable6> AlexDaniel, ¦2018.01,HEAD(24c8e17): «Cannot invoke this object (REPR: Null; VMNull)␤  in block <unit> at /tmp/R5TCDVY93H line 1␤␤ «exit code = 1»»

[23:59] <AlexDaniel> c: 2017.01,HEAD BEGIN "sandbox/precompthis.pm6".IO.spurt('sub bug is export { &[!<]; }'); use lib "sandbox"; use precompthis; bug()(9, 9)

