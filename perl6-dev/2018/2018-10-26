[00:00] *** lizmat joined
[00:00] *** p6bannerbot sets mode: +v lizmat

[00:06] *** cognominal-p6 left
[00:14] *** leont left
[00:18] *** lizmat left
[00:25] *** commavir_ left
[00:30] *** cognominal-p6 joined
[00:31] *** cognominal-p6 left
[00:31] *** cognominal-p6 joined
[00:32] *** p6bannerbot sets mode: +v cognominal-p6

[00:34] *** commavir joined
[00:35] *** p6bannerbot sets mode: +v commavir

[00:56] *** MasterDuke joined
[00:56] *** p6bannerbot sets mode: +v MasterDuke

[00:56] *** MasterDuke left
[00:56] *** MasterDuke joined
[00:56] *** herbert.freenode.net sets mode: +v MasterDuke

[00:56] *** p6bannerbot sets mode: +v MasterDuke

[01:04] *** fake_space_whale joined
[01:05] *** p6bannerbot sets mode: +v fake_space_whale

[01:07] *** Kaiepi left
[01:07] *** Kaiepi joined
[01:08] *** p6bannerbot sets mode: +v Kaiepi

[01:47] *** Ven` joined
[01:47] *** p6bannerbot sets mode: +v Ven`

[01:50] *** donaldh left
[01:51] *** donaldh_ joined
[01:51] *** Ven` left
[01:51] *** p6bannerbot sets mode: +v donaldh_

[02:10] *** ufobat_ joined
[02:10] *** p6bannerbot sets mode: +v ufobat_

[02:13] *** ufobat left
[02:35] *** j3nnn1 left
[03:04] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: 7549415b8e | (Rob Hoelz)++ | src/Perl6/Actions.nqp

[03:04] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: Offer kinder suggestions for placeholder slurpies

[03:04] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: 

[03:04] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: ...when users try to use them in a method.  *@_ is perfectly acceptable

[03:04] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: as a slurpy parameter name, and is often what the user would want to use

[03:04] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: review: https://github.com/rakudo/rakudo/commit/7549415b8e

[03:33] *** MasterDuke left
[04:38] *** Ven` joined
[04:39] *** p6bannerbot sets mode: +v Ven`

[04:42] *** Ven` left
[05:40] *** Ven` joined
[05:41] *** p6bannerbot sets mode: +v Ven`

[05:45] *** Ven` left
[05:48] *** a3f_ joined
[05:49] *** p6bannerbot sets mode: +v a3f_

[05:50] *** TimToady_ joined
[05:50] *** [Coke]_ joined
[05:50] *** [Coke]_ left
[05:50] *** [Coke]_ joined
[05:51] *** p6bannerbot sets mode: +v [Coke]_

[05:51] *** commavir_ joined
[05:51] *** p6bannerbot sets mode: +v TimToady_

[05:51] *** p6bannerbot sets mode: +v [Coke]_

[05:51] *** p6bannerbot sets mode: +v commavir_

[05:55] *** samcv_ joined
[05:55] *** p6bannerbot sets mode: +v samcv_

[05:55] *** commavir left
[05:55] *** TimToady left
[05:55] *** camelia left
[05:55] *** SqrtNegInf left
[05:55] *** a3f left
[05:55] *** samcv left
[05:55] *** [Coke] left
[06:06] *** camelia joined
[06:06] *** samcv_ is now known as samcv

[06:07] *** p6bannerbot sets mode: +v camelia

[06:28] *** fake_space_whale left
[06:30] *** TimToady_ is now known as TimToady

[06:30] *** TimToady left
[06:30] *** TimToady joined
[06:30] *** livingstone.freenode.net sets mode: +v TimToady

[06:30] *** p6bannerbot sets mode: +v TimToady

[06:33] *** ufobat_ is now known as ufobat

[06:47] *** [Tux] left
[06:53] *** robertle joined
[06:53] *** [Tux] joined
[06:53] *** p6bannerbot sets mode: +v robertle

[06:54] *** p6bannerbot sets mode: +v [Tux]

[08:01] *** Zoffix joined
[08:01] *** p6bannerbot sets mode: +v Zoffix

[08:01] <Zoffix> releasable6: status

[08:01] <releasable6> Zoffix, Next release will happen when it's ready. 1 blocker. 492 out of 511 commits logged

[08:01] <releasable6> Zoffix, Details: https://gist.github.com/e2354ef8af529bf468adb5c5480b5827

[08:01] <Zoffix> Any word/tips for that blocker?

[08:01] * Zoffix is starting to worry a non-6.d Rakudo release will coincide with 6.d language release announcements seeding lots of confusion

[08:07] *** donaldh_ left
[08:07] *** donaldh joined
[08:08] *** p6bannerbot sets mode: +v donaldh

[08:09] *** lizmat joined
[08:09] *** p6bannerbot sets mode: +v lizmat

[08:13] <Zoffix> I guess if 2018.10 Star is being cut, then it certainly will heh :P)

[08:20] *** donaldh left
[08:20] *** donaldh_ joined
[08:21] *** p6bannerbot sets mode: +v donaldh_

[08:24] <lizmat> weekly: https://opensource.com/article/18/10/how-phasers-work-perl-6

[08:24] <notable6> lizmat, Noted!

[08:24] <lizmat> moritz: ^^^ ping

[08:26] <moritz> twweeeeeted

[08:32] <lizmat> moritz++  :)

[08:35] *** robertle left
[08:37] *** robertle joined
[08:38] *** p6bannerbot sets mode: +v robertle

[08:53] <Zoffix> Hm. Changelogging Roast is promising to be interesting… Like, should something like this be logged as "Set/SetHash can be smartmatched against Seq now" https://github.com/perl6/roast/commit/b774bcc5c

[08:54] *** robertle left
[08:54] <Zoffix> I guess I'm gonna largely skip the bug-fix type of tests.

[08:55] <moritz> +1

[08:55] <Zoffix> 'cause this will be for mostly users to know new things they can use now rather than to have a milelong changelog with every minute change in it

[08:56] *** robertle joined
[08:57] *** p6bannerbot sets mode: +v robertle

[09:07] *** pmurias joined
[09:07] *** p6bannerbot sets mode: +v pmurias

[09:09] <pmurias> hmm, I'm working on hooking up loading (precompiled and to be precompiled) modules to parcel and I'm not sure what would be a good model to hook it up to CompUnit::* stuff

[09:11] <pmurias> what I think I want to do is to take a p6 script with some use statements and get back a bunch of compiled code

[09:11] <nine> What's parcel?

[09:11] <pmurias> a js module bundler

[09:12] <pmurias> https://parceljs.org/

[09:13] <pmurias> nine: it takes a bunch of assets (files which are treated differently depending on extensions) and then builds a single .js file + .css + whatever you hook into it

[09:13] <nine> Sounds like the job for a new CompUnit::Repository implementation accompanied by an alternative to CompUnit::PrecompilationStore::File

[09:19] <pmurias> so the new CompUnit::Reposity would record stuff that's being found in other repositories?

[09:21] <pmurias> nine: or did you mean for teaching Rakudo to be able to load stuff from parcel?

[09:26] <nine> Both. An in-memory CompUnit::PrecompilationStore is easy to implement and saves you from having to find the generated precomp files. It will also help with loading precomped code from however parcel manages files.

[09:39] *** cognominal-p6 left
[10:05] <Zoffix> .ask jnthn what do you think of post-poning $_ un-dynamification to 6.e? We're 11 days from 6.d release, so it's cutting it kinda close, with 6.e we get more time to play with it to see if it's a good idea. And putting it under 6.e.PREVIEW also gives us motivation to cut 6.e sonner than in 3-years, like with 6.d :)

[10:05] <yoleaux> Zoffix: I'll pass your message to jnthn.

[10:08] <jnthn> Zoffix: Well, from a 6.d perepsective, "all" we need to do is eliminate tests that expect CALLER::<$_> to work

[10:08] <yoleaux> 10:05Z <Zoffix> jnthn: what do you think of post-poning $_ un-dynamification to 6.e? We're 11 days from 6.d release, so it's cutting it kinda close, with 6.e we get more time to play with it to see if it's a good idea. And putting it under 6.e.PREVIEW also gives us motivation to cut 6.e sonner than in 3-years, like with 6.d :)

[10:08] <jnthn> That's sufficient, I think, to give us the freedom to introduce the change later in the implementation

[10:11] <Zoffix> Alright, I'll look for those

[10:19] *** cognominal-p6 joined
[10:20] *** p6bannerbot sets mode: +v cognominal-p6

[10:22] *** cognominal-p6 left
[10:22] *** cognominal-p6 joined
[10:23] *** p6bannerbot sets mode: +v cognominal-p6

[10:36] *** AlexDaniel left
[10:37] *** leont joined
[10:37] *** p6bannerbot sets mode: +v leont

[10:41] <Geth> ¦ rakudo: zoffixznet++ created pull request #2429: Revert Enum:D ACCEPTSing Enum:U

[10:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2429

[10:41] <Geth> ¦ rakudo: adfa86746c | (Zoffix Znet)++ | src/core/Enumeration.pm6

[10:41] <Geth> ¦ rakudo: Revert Enum:D ACCEPTSing Enum:U

[10:41] <Geth> ¦ rakudo: 

[10:41] <Geth> ¦ rakudo: That's what elements of an enumeration really are, the :D's and

[10:41] <Geth> ¦ rakudo: the enumeration itself is a :U. For :D's to be accepting :U's

[10:41] <Geth> ¦ rakudo: it makes as little sence as an Int:D constraint accepting an `Int`

[10:41] <Geth> ¦ rakudo: 

[10:41] <Geth> ¦ rakudo: This is part of fixing https://github.com/rakudo/rakudo/issues/2073

[10:41] <Geth> ¦ rakudo: A more complete fix might involve banning the use of Enum:D's in

[10:41] <Geth> ¦ rakudo: the same place as other types and instead requiring the use of

[10:41] <Geth> ¦ rakudo: `where` clauses for such use.

[10:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/adfa86746c

[10:41] <Geth> ¦ rakudo: 0383075dd4 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Enumeration.pm6

[10:41] <Geth> ¦ rakudo: Merge pull request #2429 from rakudo/post-release-2018.10

[10:41] <Geth> ¦ rakudo: 

[10:41] <Geth> ¦ rakudo: Revert Enum:D ACCEPTSing Enum:U

[10:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0383075dd4

[10:41] <Geth> ¦ roast: zoffixznet++ created pull request #491: Spec Enum:D does NOT accept Enum:U

[10:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/491

[10:41] <Geth> ¦ roast: 3d279598cd | (Zoffix Znet)++ | S12-enums/misc.t

[10:41] <Geth> ¦ roast: Spec Enum:D does NOT accept Enum:U

[10:42] <Geth> ¦ roast: 

[10:42] <Geth> ¦ roast: Per https://github.com/rakudo/rakudo/issues/2073

[10:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3d279598cd

[10:42] <Geth> ¦ roast: a5d495aa04 | (Zoffix Znet)++ (committed using GitHub Web editor) | S12-enums/misc.t

[10:42] <Geth> ¦ roast: Merge pull request #491 from perl6/post-release-2018.10

[10:42] <Geth> ¦ roast: 

[10:42] <Geth> ¦ roast: Spec Enum:D does NOT accept Enum:U

[10:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a5d495aa04

[10:44] <Geth> ¦ roast: 5485affa47 | (Zoffix Znet)++ | S32-list/seq.t

[10:44] <Geth> ¦ roast: Revert "Test for ZEN-POS on Seq"

[10:44] <Geth> ¦ roast: 

[10:44] <Geth> ¦ roast: This reverts commit 7d23fbc74c6d8e724f4afca7e294b2b58187594a.

[10:44] <Geth> ¦ roast: 

[10:44] <Geth> ¦ roast: This attempt at fixing an inconsistency introes another inconsistency

[10:44] <Geth> ¦ roast: in that `[]` caches but `<>` doesn't and both and especially the

[10:44] <Geth> ¦ roast: latter are likely used as a "decont operator"

[10:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5485affa47

[10:53] <Geth> ¦ rakudo: 2efffc2b43 | (Zoffix Znet)++ | src/core/Sequence.pm6

[10:53] <Geth> ¦ rakudo: Revert "Make .[] cache the Seq. Closes #2383"

[10:53] <Geth> ¦ rakudo: 

[10:53] <Geth> ¦ rakudo: This reverts commit 1954121d619613118784df6c6eb63b186d0361e8.

[10:53] <Geth> ¦ rakudo: 

[10:53] <Geth> ¦ rakudo: This attempt at fixing an inconsistency introes another inconsistency

[10:53] <Geth> ¦ rakudo: in that `[]` caches but `<>` doesn't and both and especially the

[10:53] <synopsebot> RAKUDO#2383 [closed]: https://github.com/rakudo/rakudo/issues/2383 [consistency][testneeded] .[] doesn't cache a Seq

[10:53] <Geth> ¦ rakudo: latter are likely used as a "decont operator"

[10:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2efffc2b43

[10:53] <Geth> ¦ roast: a1a805d0f5 | (Zoffix Znet)++ | S32-list/seq.t

[10:53] <Geth> ¦ roast: Fix plan

[10:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a1a805d0f5

[10:54] <Geth> ¦ roast: f5f9ce0083 | (Zoffix Znet)++ | S32-list/seq.t

[10:54] <Geth> ¦ roast: Spec ZEN slices don't cache Seqs

[10:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f5f9ce0083

[11:01] <pmurias> how should I install my custom CompUnit::Repository?

[11:01] <pmurias> RAKUDO_PRECOMP_WITH?

[11:03] <nine> pmurias: have a look at tools/build/install-core-dist.pl6

[11:03] <nine> tools/install-dist.pl6 may also help

[11:13] *** Zoffix left
[11:13] <Geth> ¦ 6.d-prep: 4c60752276 | (Zoffix Znet)++ | ChangeLog.md

[11:13] <Geth> ¦ 6.d-prep: [CL] Log up to 5c4dafa3ab026a1e08

[11:13] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/4c60752276

[11:30] <lizmat> Zoffix: s/numerious/numerous/ ?

[11:37] *** AlexDaniel joined
[11:37] *** p6bannerbot sets mode: +v AlexDaniel

[11:56] <Geth> ¦ 6.d-prep: 133781348a | (Zoffix Znet)++ (committed using GitHub Web editor) | ChangeLog.md

[11:56] <Geth> ¦ 6.d-prep: Fix typo; lizmat++

[11:56] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/133781348a

[12:07] <Geth> ¦ roast: 84da3210c1 | (Zoffix Znet)++ | S32-list/seq.t

[12:07] <Geth> ¦ roast: Reword ZEN Seq non-cache tests

[12:07] <Geth> ¦ roast: 

[12:07] <Geth> ¦ roast: Explicitly take .iterator instead of implicitly relying

[12:07] <Geth> ¦ roast: on .sink to consume our Seqs pre-testing.

[12:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/84da3210c1

[12:08] <Geth> ¦ rakudo: e0633a0de9 | (Tom Browder)++ (committed using GitHub Web editor) | docs/rakudo-nqp-and-pod-notes.md

[12:08] <Geth> ¦ rakudo: add info, start table

[12:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e0633a0de9

[12:14] *** cognominal-p6 left
[12:16] *** atroxaper joined
[12:17] *** p6bannerbot sets mode: +v atroxaper

[12:26] *** pmurias left
[12:27] *** pmurias joined
[12:27] *** p6bannerbot sets mode: +v pmurias

[12:28] *** cognominal-p6 joined
[12:29] *** p6bannerbot sets mode: +v cognominal-p6

[12:49] *** SqrtNegI_ joined
[12:50] *** p6bannerbot sets mode: +v SqrtNegI_

[12:55] *** cognominal-p6 left
[12:55] *** cognominal-p6 joined
[12:56] *** p6bannerbot sets mode: +v cognominal-p6

[13:00] *** cognominal-p6 left
[14:07] *** cognominal-p6 joined
[14:07] *** cognominal-p6 left
[14:07] *** cognominal-p6 joined
[14:08] *** p6bannerbot sets mode: +v cognominal-p6

[14:31] *** cognominal-p6 left
[14:44] *** lizmat left
[14:51] *** cognominal-p6 joined
[14:52] *** p6bannerbot sets mode: +v cognominal-p6

[14:59] *** fake_space_whale joined
[15:00] *** p6bannerbot sets mode: +v fake_space_whale

[15:04] *** cognominal-p6 left
[15:05] *** cognominal-p6 joined
[15:05] *** p6bannerbot sets mode: +v cognominal-p6

[15:21] *** cognominal-p6 left
[15:26] *** Zoffix joined
[15:26] *** p6bannerbot sets mode: +v Zoffix

[15:26] <|Tux|> Rakudo version 2018.09-515-ge0633a0de - MoarVM version 2018.09-139-g8b4d58c7a

[15:26] <|Tux|> csv-test-xs-20      0.416 -  0.423

[15:26] <|Tux|> test-t --race       0.785 -  0.803

[15:26] <|Tux|> csv-ip5xs           0.927 -  0.927

[15:26] <|Tux|> test-t              1.742 -  1.747

[15:26] <|Tux|> csv-ip5xs-20        7.249 -  7.437

[15:26] <|Tux|> test                8.149 -  8.158

[15:26] <|Tux|> test-t-20 --race   10.498 - 10.854

[15:26] <|Tux|> csv-parser         20.437 - 20.834

[15:26] <|Tux|> test-t-20          28.907 - 29.276

[15:28] <Zoffix> jnthn: are you looking at R#2400 today/this weekend? If not, do you have any tips for what it could be? I did a bit of digging 3 days ago: https://github.com/rakudo/rakudo/issues/2400#issuecomment-432359601

[15:28] <synopsebot> R#2400 [open]: https://github.com/rakudo/rakudo/issues/2400 [fudged tests committed][regression][⚠ blocker ⚠] Module Crane is failing tests on HEAD

[15:29] <jnthn> Zoffix: Been looking at it for last hour or two

[15:29] <Zoffix> \o/

[15:29] <jnthn> It's *really* odd

[15:29] <jnthn> In that even if I instrument the type check failure exception to spit out the .WHICH of the two things it's comparing, they match exactly

[15:30] <Zoffix> weird

[15:30] <jnthn> So now I wonder if it could somehow be the type check cache or something

[15:40] *** cognominal-p6 joined
[15:41] *** p6bannerbot sets mode: +v cognominal-p6

[15:44] *** cognominal-p6 left
[15:44] *** cognominal-p6 joined
[15:45] *** p6bannerbot sets mode: +v cognominal-p6

[15:55] *** robertle left
[15:56] <jnthn> Yeah, confirm that the mro contains something wrong

[16:03] *** fake_space_whale left
[16:16] *** Tux__ joined
[16:16] *** |Tux| left
[16:17] *** p6bannerbot sets mode: +v Tux__

[16:35] <Zoffix> .ask AlexDaniel just wanted to confirm before I do it: am I safe to bump default lang version in Rakudo to 6.d or should I wait until after release?

[16:35] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[16:37] *** patrickb joined
[16:37] *** p6bannerbot sets mode: +v patrickb

[16:43] *** robertle joined
[16:44] *** p6bannerbot sets mode: +v robertle

[16:54] *** AlexDaniel left
[16:55] <jnthn> Still not got to the bottom of it yet. So far it looks like the MRO contains the right thing and the thing Array[Mu] ends up referring to in Foo is the wrong one, but I can't figure out what on earth it is

[16:58] <jnthn> Will give up for today. I left a hacky patch on the issue that works around the problem, but isn't a real solution.

[16:58] <timotimo> dang.

[16:59] * Zoffix feels better about not being able to fix it not :)

[16:59] <Zoffix> s/not/now/;

[17:02] <jnthn> Hmm

[17:02] <jnthn> It seems like we're somehow getting duplicate type objects

[17:03] <jnthn> o.O

[17:03] <timotimo> some kind of repossession issue?

[17:03] <timotimo> shouldn't be, since nothing is modifying the original type objects

[17:03] <timotimo> hum.

[17:03] <jnthn> No, I don't think it's that

[17:04] <jnthn> There is repossession happening because of that set_name but commenting that out changes nothing.

[17:04] <jnthn> (and I verified there's no repossession going on)

[17:05] <timotimo> OK

[17:05] <jnthn> Um, no further repo, once I commented that out

[17:13] <AlexDaniel`> Zoffix: you can do it

[17:13] <jnthn> omg, I found it

[17:13] <AlexDaniel`> \o/

[17:14] * jnthn spectests

[17:14] * AlexDaniel` got on his phone at the right moment :)

[17:16] <Zoffix> OMG \o/

[17:18] <timotimo> whoooo

[17:18] <timotimo> aaaaa

[17:18] <timotimo> hhhhh

[17:18] <samcv> hello

[17:18] <Zoffix> \o

[17:18] <samcv> are people having a party here :)

[17:19] <Zoffix> Yeah :)

[17:19] * Zoffix passes the bong

[17:19] <Zoffix> samcv: looks like the last release blocker just got fixed :)

[17:19] <samcv> \o/

[17:21] <stmuk_> don't bogart that release!

[17:21] <Zoffix> stmuk_: you had a robo message on one of your nicks

[17:22] <Zoffix> stmuk_: I was asking if there were gonna be a 2018.10 R* and if yes, would there also be a 2018.11 R* (that will be a 6.d relase). I need to know what to mention in 6.d announcement, for people to know when to get their 6.d deliverables

[17:22] <Geth> ¦ rakudo: 7b0c5364fe | (Jonathan Worthington)++ | src/Perl6/World.nqp

[17:22] <Geth> ¦ rakudo: Don't unconditionally add parameterizations to SC

[17:22] <Geth> ¦ rakudo: 

[17:22] <Geth> ¦ rakudo: A parameterization of a type may not create a new type, but instead

[17:22] <Geth> ¦ rakudo: return an already produced type. Thus, it may already belong to the

[17:22] <Geth> ¦ rakudo: SC of another compilation unit. Placing it into ours results in a

[17:22] <Geth> ¦ rakudo: duplicate of the object - in this case a type object - existing after

[17:22] <Geth> ¦ rakudo: deserialization.

[17:22] <Geth> ¦ rakudo: <…commit message has 7 more lines…>

[17:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7b0c5364fe

[17:23] <Zoffix> jnthn++

[17:23] <jnthn> That took some finding.

[17:24] <stmuk_> yes to 2018.10 R* but probably not .11 (unless someone else wants to do one)

[17:24] <Zoffix> Noted. Thanks.

[17:25] <jnthn> I should go home, eat, etc. Appreciated if somebody could verify that fixes Crane as well as the golf in the ticket.

[17:25] <jnthn> o/

[17:26] <stmuk_> whats actually happening with 6.d (I'm out of touch)? will .10 still have 6.d-preview and .11 6.d?

[17:26] <timotimo> phew.

[17:28] <Zoffix> stmuk_: I don't think we can just break `use v6.d.PREVIEW` willi-nilli, because there are modules using it (at least one of mine does) and also module authors would want to support at least a couple of recent Rakudo versions, so my thinking is `use v6.d.PREVIEW` on .11 will be equivalent to `use v6.d` which will be equivalent to no `use` at all and `use v6.c` will load 6.c language. Whereas on .10, no

[17:28] <Zoffix> `use` loads `v6.c` and `use v6.d` is a compiler error

[17:28] <Zoffix> m: use v6.d.

[17:28] <Zoffix> m: use v6.d

[17:28] <camelia> rakudo-moar : OUTPUT: «Cannot allocate memory»

[17:28] <Zoffix> shiet

[17:28] <Zoffix> m: use v6.d

[17:28] <camelia> rakudo-moar : OUTPUT: «Cannot allocate memory»

[17:28] <Zoffix> c: HEAD use v6.d

[17:28] <committable6> Zoffix, ¦HEAD(7b0c536): «04===SORRY!04=== Error while compiling /tmp/L5dSE7wCPr␤No compiler available for Perl v6.d␤at /tmp/L5dSE7wCPr:1␤------> 03use v6.d08⏏04<EOL>␤ «exit code = 1»»

[17:30] <Zoffix> m: use v6.d

[17:30] <camelia> rakudo-moar e0633a0de: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No compiler available for Perl v6.d␤at <tmp>:1␤------> 3use v6.d7⏏5<EOL>␤»

[17:30] <Zoffix> on .11 that will work

[17:30] <Zoffix> And well, that'll start working on master in ~6hr, actually.

[17:32] <stmuk_> will "use v6" also default to "use v6.d"?

[17:40] <TimToady> any time you don't specify a dot level it should default to the newest

[17:42] <Zoffix> stmuk_: and the rest of what's happening is 6.d The Spec is being released in some timezone between November 6-7 (the Diwali holiday) and rakudo compiler will follow it's regular release schedule

[17:43] <Zoffix> its too

[17:44] <timotimo> if the release doesn't happen fast enough, we claim a small plot of land to be an independent country and get our own time zone that's more than 24h away from the surrounding territories

[17:44] <Zoffix> Sounds like a plan!

[17:45] <timotimo> time zones are amazing, it's a different time all around the world! for example, in some parts of the U.S, it's still 1950

[17:45] <stmuk_> sea-stead Cameliania!

[17:45] <stmuk_> or whatever The New Alias is :)

[17:46] <TimToady> maybe set up a government-in-exile for a martian colony, since our clocks naturally drift there compared to earthlings

[17:46] <timotimo> that's an old joke, so it's not related to any current politics

[17:50] <TimToady> nah, those parts of the country have moved on from 1950 all the way to 1938 or so

[17:51] <timotimo> it's progress if you turn your head 180 degrees and squint

[17:51] <timotimo> to the side 180 degrees*

[17:54] <TimToady> Is that to the right side or the left side?  --Socrates

[17:56] *** Zoffix left
[17:58] *** stmuk joined
[17:58] <Geth> ¦ roast: cc378eca07 | (Zoffix Znet)++ | MISC/bug-coverage.t

[17:58] <Geth> ¦ roast: Unfudge now-passing test

[17:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cc378eca07

[17:58] *** p6bannerbot sets mode: +v stmuk

[18:00] *** stmuk_ left
[18:34] *** AlexDaniel joined
[18:34] *** p6bannerbot sets mode: +v AlexDaniel

[19:01] *** pmurias left
[19:05] *** pmurias joined
[19:05] *** p6bannerbot sets mode: +v pmurias

[19:16] *** lizmat joined
[19:16] *** p6bannerbot sets mode: +v lizmat

[19:32] *** atroxaper left
[20:13] *** cognominal-p6 left
[20:13] *** cognominal-p6 joined
[20:14] *** p6bannerbot sets mode: +v cognominal-p6

[20:47] *** cognominal-p6 left
[20:47] *** cognominal-p6 joined
[20:48] *** p6bannerbot sets mode: +v cognominal-p6

[20:50] <lizmat> m: my $a = 0; my $b = 42 / $a; dd $b, $b + $b   # not sure this is worth an issue, but it feels wrong

[20:50] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Rat $b = <1/0>␤<0/0>␤»

[20:54] <geekosaur> looks like normalization missed a special case

[20:54] <masak> agree it looks wrong

[21:06] <tbrowder___> rakudo nqp question, please: i notice sometimes dynamic vars values are assigned lika a regular var, and other times the var is assigned via the nqp::*lex* ops. is that a holdover from the early days, or is it something that should be “consistifyed”, or is it imporatant in some way i don’t yet understand? thanks!

[21:09] * lizmat would like to see an answer to that one as well  :-)   jnthn  timotimo ?

[21:11] <timotimo> assigned to or accessed?

[21:11] <lizmat> assigned, apparently

[21:12] <lizmat> "other times the var is assigned via the nqp::*lex* ops"

[21:12] <timotimo> i'd probably need to look at some examples to figure that out

[21:13] *** pmurias left
[21:15] *** pmurias joined
[21:15] *** p6bannerbot sets mode: +v pmurias

[21:19] *** MasterDuke joined
[21:19] *** p6bannerbot sets mode: +v MasterDuke

[21:19] *** MasterDuke left
[21:19] *** MasterDuke joined
[21:19] *** herbert.freenode.net sets mode: +v MasterDuke

[21:19] *** p6bannerbot sets mode: +v MasterDuke

[21:33] <tbrowder___> i notice many (if not all) the cases with regular assignment use :my $*var inside the calling block, so maybe that establishes the calling place so the lexdyne method is not necessary.

[21:33] <timotimo> we often have to do some gymnastics so that we refer not to the just-defined dynamic variable, but to whatever came before it

[21:34] <timotimo> not sure if that's what you're looking at

[21:34] <tbrowder___> eel

[21:38] <tbrowder___> *well, i’m all over the place but zeoring in...the vars i’m interested in are defined in the grammar and affect pod block handling, and most places (but i can’t say all) have the :my construct in the block that wants to change the value during complete contruction of the class associated with the block. and the code child path goes back and forth between grammar, actions, and pod.

[21:39] <tbrowder___> i may need that “just before” value before i finish...

[21:41] <samcv> we shouldn't be using hardly any cpu during a `prompt` right?

[21:42] <timotimo> yeah

[21:42] <timotimo> hopefully we can wait for input without polling

[21:43] <timotimo> there are cases where we get incredible cpu load when doing nothing, like when our process is piped to a pager :(

[21:43] <samcv> hmm that could have happened too

[21:43] <samcv> err actually. no not that. it ran a pager as a launched process

[21:43] <timotimo> can't immediately reproduce, so maybe it got fixed since i last tried

[21:44] <timotimo> though of course when i kill the pager it'll give a nasty exception and error output :)

[21:44] *** Zoffix joined
[21:44] *** p6bannerbot sets mode: +v Zoffix

[21:44] <lizmat> FWF, prompt uses 0 CPU for me

[21:44] <lizmat> *FWIW

[21:45] <Zoffix> lizmat: there's sorta an issue for that already R#1354

[21:45] <synopsebot> R#1354 [open]: https://github.com/rakudo/rakudo/issues/1354 Some operations with zero-denominator Rationals are broken

[21:45] <Zoffix> Basically all the math with ZDRs is broken :)

[21:46] <lizmat> so no need to add another issue then :-)

[21:46] <samcv> not sure what i'm doing but i get two processes each using 33% cpu

[21:46] <tbrowder___> one more question: when an nqp object is used in the $*W.add_constant method, does that create a QAST node? i haven’t tested it yet, but looking at various nqp code it seems like that is what is happening.

[21:46] <samcv> with MoarVM/tools/update-changelog.p6 i noticed yesterday

[21:47] <timotimo> oh? i thought add_constant just makes the object available in the serialization context, so that it can be used inside WVal and such

[21:47] <timotimo> though i don't think you have to do that manually any more?

[21:47] <timotimo> not entirely sure

[21:47] <timotimo> maybe it's also about re-using constant values?

[21:49] <samcv> hmm it seems to be using cpu when not in prompt as well

[21:51] <timotimo> you could "perf record" to get some data of what it's doing, or "perf top" to see what kinds of things are using cpu time

[21:51] <jnthn> tbrowder___: iirc, the op to do a lookup starts in the *caller* frame, not the current one, so some of them do things like `token blah($*foo = nqp::getlexdyn('$*foo')) { }` or whatever and are looking up the caller one.

[21:51] <jnthn> About assigning them, no idea :)

[21:52] <tbrowder___> is serialization step for an object the same as boxing?

[21:52] *** pmurias left
[21:52] <jnthn> No

[21:52] <jnthn> Serialization is about making stuff survive the compilation boundary

[21:53] <samcv> timotimo: on it

[21:53] <jnthn> Boxing is sticking a native value into an object

[21:54] <tbrowder___> then all that stuff happens in compilation i guess

[21:55] <samcv> hmm the kernel is using 27% of cpu time in read_hpet

[21:55] <samcv> not sure if that's related

[21:56] <tbrowder___> timotimo: thanks

[21:56] <tbrowder___> jnthn: thanks

[21:59] <samcv> ok when i use the callgraph i get __clone from libc taking up 60% of the cpu inclusive

[22:00] <jnthn> .oO( What the fork? )

[22:00] <samcv> ok scratch that. so read_put seems to be getting called due to MVM_platform_sleep and MVM_platform_now

[22:00] *** patrickb left
[22:04] <Zoffix> Alright. I'm doing the version bump…

[22:05] <Zoffix> …the language version bump \o/

[22:05] <samcv> \o/

[22:05] *** ufobat left
[22:06] *** ggoebel left
[22:07] <jnthn> Non-blocking `await` and `react` by default! \o/

[22:16] <samcv> jnthn: printf "%f" seems to show it starts sleeping for 0.000000 seconds repeatedly?

[22:18] <jnthn> samcv: Hm, no idea...where's that happening?

[22:18] <samcv> where as in in moarvm? i'm not sure it just has ??? for what the caller of MVM_platform_sleep

[22:20] <jnthn> If gdb you might be able to try p MVM_dump_backtrace(tc)

[22:20] <samcv> ok

[22:20] *** cognominal-p6 left
[22:20] <jnthn> ??? for caller usually means "jitted code"; you can MVM_JIT_DISABLE=1 to get a better backtrace in that case

[22:21] <samcv> yeah

[22:21] <samcv> well it says no tc in current context. what do i do now (trying to do p MVM_dump_backtrace(tc))

[22:22] <samcv> jnthn: with JIT disabled it never sleeps for 0 seconds

[22:23] <samcv> but still uses lots of cpu. no clue why that would be..

[22:24] <jnthn> Maybe `where` and then look for a frame with a tc and then frame n and then try it

[22:27] <samcv> uh still getting no symbol "tc"

[22:27] <samcv> "frame X"; "p MVM_dump_backtrace(tc)" and it says no "tc" in like MVM_io_reaad_bytes

[22:28] <samcv> though that seems to be where it is when i pause it and check

[22:28] <jnthn> Odd. Do you have a build with debug symbols or and --optimize=0?

[22:29] <jnthn> (Sometimes gdb can't recover things properly when there's enough opt)

[22:29] <samcv> ah silly me for some reason i didn't built with debug symbols!

[22:32] <samcv> jnthn: here we go https://gist.github.com/5f00b0c63d09578a7b86527a2b1bd23a

[22:33] <jnthn> Odd, and it's being run at the console (e.g. stdin would be a tty)?

[22:34] <samcv> yah it's on console

[22:34] * Zoffix decides to postpone the bump until tomorrow morning

[22:34] <Zoffix> It's a bit harder than changing a letter, since at some point during parsing we must determine that we must upgrade to 6.d and make any later version switches throw

[22:34] <samcv> and weirdly it starts sleeping for 0.01 secs, then sleeps for 1.504436s and then starts sleeping for 0 s

[22:35] <samcv> but with no jit it sleeps for 0.01s consistently

[22:35] <samcv> both seem to use about the same amount of cpu

[22:35] <jnthn> Hm, but what does ths sleep?

[22:36] <jnthn> It can loop at https://github.com/MoarVM/MoarVM/blob/master/src/io/syncfile.c#L146

[22:36] <jnthn> But only if it's getting back EINTR

[22:40] <samcv> jnthn: that doesnt seem to be where it's looping at L146

[22:40] <samcv> i added a print and am not getting any repeated prints

[22:41] <samcv> or at least. it isn't looping.. or something

[22:41] * jnthn is confused :)

[22:56] <Zoffix> <GeorgeTakei> Ohh, myyy!

[22:58] <samcv> jnthn: does this backtrace make sense? https://gist.github.com/samcv/444a6690a401a50c4bc0fd2f4cf7c389

[22:58] <samcv> i set a breakpoint for MVM_platform_sleep

[22:59] <jnthn> Is that MVM_fixed_size_free really true?

[22:59] * jnthn finds it very unlikely

[22:59] <jnthn> I suspect it's just confused

[23:00] <jnthn> Can you frame 6 and p MVM_dump_backtrace(tc) ?

[23:04] <samcv> ok it seems to be confused i ran it again and it's showing the right order i suppose?

[23:05] <samcv> anyway i get this now https://gist.github.com/c11ec6ec27e322f226cb99de7d9a1245

[23:08] <jnthn> I'm pretty sure it's the fixed_size_free is just confusion, but the 0 looks legit. Hmm.

[23:09] <samcv> yeah it seems very confused. it won't let me print out MVM_dump_backtrace

[23:09] <jnthn> Hm, even at frame 6?

[23:09] <samcv> The program being debugged was signaled while in a function called from GDB.

[23:09] <samcv> GDB remains in the frame where the signal was received

[23:09] <jnthn> oops

[23:09] <jnthn> Hm

[23:09] <samcv> oh it seems to have moved, but i have no output

[23:09] <samcv> and if i continue mvm segfaults

[23:10] <jnthn> I'd wonder if the JIT of sleep is wrong and causing a bogus 0 there but I think you said the JIT being disabled doesn't remove the problem you're seeing?

[23:10] <jnthn> The JIT code looks fairly legit too

[23:10] <jnthn> Oh, though...

[23:10] <samcv> yeah it doesn't remove it. though the bogus 0 is maybe an issue too

[23:11] <samcv> i mean maybe it was worse... it sleeps a LOT when it's trying to sleep 0 seconds again and again

[23:11] <jnthn> sleep takes a dobule

[23:12] <jnthn> *double

[23:12] <samcv> uh seems to be in ThreadPoolSchduler.pm6

[23:12] <samcv> SETTING::src/core/ThreadPoolScheduler.pm6:624 where it's sleeping

[23:12] <samcv> i was able to run it when i disabled JIT

[23:12] <jnthn> And the JIT seems to be indicating the argument is Kališnická

[23:12] <jnthn> hah

[23:13] <Zoffix> :)

[23:13] <jnthn> MVM_JIT_REG_VAL

[23:13] <jnthn> But I think it should be MVM_JIT_REG_VAL_F

[23:13] <jnthn> Here: https://github.com/MoarVM/MoarVM/blob/master/src/jit/graph.c#L3271

[23:14] <jnthn> I think as it stands sleep gets a junk value

[23:15] <samcv> i will try changing that

[23:16] <samcv> well that fixes that issue!

[23:16] <samcv> at least with the bogus sleep times

[23:16] <timotimo> i see the prolem with sleep

[23:16] <Zoffix> Hm.... "Stage parse      : Missing or wrong version of dependency 'gen/moar/Perl6-Grammar.nqp' (from 'gen/moar/CORE.d.setting')"

[23:17] <timotimo> ah, jnthn also finds it

[23:17] <Zoffix> Had that in 6.c setting, but I stuck ! $*COMPILING_CORE_SETTING into the default lang set up and now it dies in 6 setting :(

[23:17] <samcv> hmm maybe i was doing something wrong. because i'm testing again and moarvm is using hardly any cpu now

[23:17] <samcv> \o/

[23:18] <jnthn> \o/

[23:18] <samcv> so that seems to have done it

[23:18] <Zoffix> \o/

[23:18] <samcv> glad we could find this bug and fix it. my laptop's battery life thanks you

[23:20] <Zoffix> $*COMPILING_CORE_SETTING ain't set when doing CORE.d

[23:21] <jnthn> Zoffix: I think it goes on whether --setting=NULL or whatever

[23:22] <Zoffix> Thanks. Found it

[23:22] <jnthn> (Can't remember exactly what we pass)

[23:24] <samcv> cool. fix commited :)

[23:25] <samcv> i'm guessing this should affect other workloads too

[23:26] <jnthn> Indeed...very glad to have that fixed

[23:26] <jnthn> samcv++

[23:26] <samcv> seems to be more responsive too

[23:26] <jnthn> Wonder if that was the cause of an unexplained performance drop-off on one of my customer's heavily threaded apps

[23:27] <jnthn> (Wasn't a big enough drop-off to be a priority to dig into)

[23:27] <timotimo> today i watched the stream from react conf and there's been like five talks already that were valuable to moarperf <3

[23:28] <jnthn> Nice :)

[23:30] <Zoffix> timotimo: maybe that bug we were trying to fix is also fixed?

[23:31] <Zoffix> M#986 R#2395

[23:31] <synopsebot> M#986 [closed]: https://github.com/MoarVM/MoarVM/pull/986 Comment out problematic case in speshing deconting of _n

[23:31] <synopsebot> R#2395 [open]: https://github.com/rakudo/rakudo/issues/2395 [perf] t/spec/S32-io/io-cathandle.t is now 2x-8x slower without precomp

[23:32] <jnthn> ooh, that's entirely possible, if it turned an unjittable into a jittable...

[23:32] <timotimo> hm, not so sure about that

[23:32] <jnthn> (And so rendered the frame with the sleep jittable when it wasn't before)

[23:32] <timotimo> huh, a sleep could have been in there?

[23:32] <Zoffix> It was even around a line of code with `sleep .6` there

[23:32] <timotimo> i did not realize!

[23:33] * jnthn will probably drop by https://reactiveconf.com/ a bit next week, given it's just a tram ride away

[23:33] <Zoffix> "Stage optimize   : Optimizer couldn't find Sub in SETTING"

[23:34] <Zoffix> :) fun

[23:34] <jnthn> W...what? :)

[23:34] <Zoffix> hehe

[23:34] <timotimo> it probably doesn't know to look past the first setting it sees?

[23:34] <timotimo> in find_in_setting?

[23:36] <jnthn> ah, maybe

[23:36] * jnthn goes for rest

[23:36] <jnthn> 'night o/

[23:37] <timotimo> gnite jnthn!

[23:38] <Zoffix> \o

[23:50] *** Zoffix left
