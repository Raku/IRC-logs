[00:06] *** ufobat_ left
[00:22] <kjp> timotimo: Certainly just removing "is required" makes simple applications work again, and indeed that change has already been merged into DBIish.

[00:22] <kjp> You're probably right about this stuff not being used directly by end-users.

[00:23] <kjp> I suspect that it's just $!pc_conn on the assumption that the previous "is required" will catch errors.

[00:23] <kjp> You're pushing my Perl 6 knowledge :-) Will just adding exclamations marks provide all that's required?

[00:24] <timotimo> that will give a generic error message

[00:24] <timotimo> let me write up an example

[00:24] <timotimo> ... actually my keyboard i having some trouble right now

[00:24] <timotimo> i can't write closing curly brace

[00:24] <timotimo> m: class Test { has $!foo; submethod BUILD(:$!foo!) { } }; Test.new

[00:24] <camelia> rakudo-moar aff96baef: OUTPUT: «Required named parameter 'foo' not passed␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:25] <timotimo> but with a die it'll be more helpful

[00:25] <timotimo> m: class Test { has $!foo; submethod BUILD(:$!foo = die "you have to construct a Test with a foo attribute") { } }; Test.new

[00:25] <camelia> rakudo-moar aff96baef: OUTPUT: «you have to construct a Test with a foo attribute␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:26] <kjp> Okay; I'll have a go at that.

[04:49] *** brrt joined
[05:26] *** ufobat_ joined
[05:40] <geekosaur> so fwiw I'm seeing occasional random segfaults and bus errors from perl6 master

[05:40] <geekosaur> rakudo master, sorry

[05:40] <geekosaur> am trying to see if turning off various things makes them go away, but they're too sporadic

[06:37] *** brrt left
[06:49] *** lizmat left
[06:59] *** [TuxCM] left
[07:02] <[Tux]> m: use Inline::Perl5; Inline::Perl5.new.use("Text::CSV_PP")

[07:02] <camelia> rakudo-moar aff96baef: OUTPUT: «===SORRY!===␤Could not find Inline::Perl5 at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    Comp…»

[07:03] *** lizmat joined
[07:04] <[Tux]> For those that like to investigate that: Internal error: inconsistent bind result

[07:05] <[Tux]> Rakudo version 2018.06-193-gaff96baef - MoarVM version 2018.06-223-ga50a0b15b

[07:05] <[Tux]> csv-test-xs-20      0.438 -  0.447

[07:05] <[Tux]> test-t --race       0.989 -  1.010

[07:05] <[Tux]> csv-ip5xs           1.093 -  1.277

[07:05] <[Tux]> test-t              2.360 -  2.398

[07:05] <[Tux]> csv-ip5xs-20        8.610 -  8.839

[07:05] <[Tux]> test                9.523 -  9.682

[07:05] <[Tux]> test-t-20 --race   14.754 - 14.816

[07:06] <[Tux]> csv-parser         25.569 - 25.614

[07:06] <[Tux]> test-t-20          40.351 - 42.948

[07:11] <[Tux]> I have issued the I::P5 case as https://github.com/niner/Inline-Perl5/issues/116

[07:11] *** robertle joined
[07:11] *** stmuk_ joined
[07:13] *** stmuk left
[08:01] <lizmat> Files=1243, Tests=76378, 385 wallclock secs (16.06 usr  5.38 sys + 2467.24 cusr 233.55 csys = 2722.23 CPU)

[08:04] *** pmurias joined
[08:08] *** Ven` joined
[08:12] *** brrt joined
[08:15] <brrt> geekosaur: bus errors may be JIT related

[08:16] <brrt> try running with MVM_SPESH_BLOCKING=1

[09:10] <Geth> ¦ nqp/truffle: 87c2e222d3 | (Paweł Murias)++ | 2 files

[09:10] <Geth> ¦ nqp/truffle: [truffle] Return nqp::null when using a VOID op as an OBJ

[09:10] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/87c2e222d3

[09:10] <Geth> ¦ nqp/truffle: 14fd9f0c3d | (Paweł Murias)++ | 5 files

[09:10] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::shift and nqp::iterator

[09:10] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/14fd9f0c3d

[09:10] <Geth> ¦ nqp/truffle: 8caec7c4f9 | (Paweł Murias)++ | src/vm/jvm/bin/run_tests.pl

[09:10] <Geth> ¦ nqp/truffle: [truffle] Run passing test 15

[09:10] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/8caec7c4f9

[09:19] <Geth> ¦ nqp/truffle: b85595b5cb | (Paweł Murias)++ | 3 files

[09:19] <Geth> ¦ nqp/truffle: [truffle] Implement nqp::atpos, nqp::bindpos.

[09:19] <Geth> ¦ nqp/truffle: 

[09:19] <Geth> ¦ nqp/truffle: Pass test 17

[09:19] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/b85595b5cb

[09:29] <Geth> ¦ nqp/truffle: 78be0c072e | (Paweł Murias)++ | 2 files

[09:29] <Geth> ¦ nqp/truffle: [truffle] Add missing files

[09:29] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/78be0c072e

[09:34] *** dogbert2 joined
[09:34] <Geth> ¦ nqp/truffle: 4 commits pushed by (Paweł Murias)++

[09:34] <Geth> ¦ nqp/truffle: 59796c9ad7 | [truffle] Implement nqp::islist

[09:34] <Geth> ¦ nqp/truffle: bdb178e418 | [truffle] Smart numify list

[09:34] <Geth> ¦ nqp/truffle: 3ed665d389 | [truffle] Implement getting a int/num/str from QAST::Stmts

[09:34] <Geth> ¦ nqp/truffle: db0fe7fcf8 | [truffle] Pass test 38

[09:34] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/compare/78be0c072edf...db0fe7fcf861

[09:59] <jnthn> So the failure in https://github.com/rakudo/rakudo/issues/2056 was, in the immediate, due to an overflow while processing the string heap during bytecode production

[09:59] <jnthn> Which I fixed, but still, that file compiling into something with a string heap of 275,000+ string seems a bit...odd

[10:00] <jnthn> When I look at what those strings are, though, they're all like

[10:00] <jnthn> Int|999408

[10:00] <jnthn> Int|999409

[10:00] <jnthn> Or at least, many of them are. Wonder where on earth that comes from...

[10:01] <jnthn> Ohhh

[10:01] <jnthn> Unicode::PRECIS::Tables builds up some big sets

[10:02] <jnthn> OK, that explains it somewhat, though still I don't understand why it once worked and now not

[10:02] <jnthn> Let alone why it'd bissect to https://github.com/rakudo/rakudo/commit/d3c5381b747169f951db578bebbfd0c5d8165116

[10:08] <AlexDaniel> c: d3c5381b74^,d3c5381b74 https://gist.github.com/AlexDaniel/f5eb6ef4890b27c75b72f6415fc7a639

[10:08] <yoleaux> 15 Jul 2018 22:13Z <tbrowder_> AlexDaniel: please see my doc PR #2177 which implements Phase 2 of my proposed Language doc handling

[10:08] <committable6> AlexDaniel, https://gist.github.com/6290c4ae9bebe88fb2c27249d2f6f606

[10:08] <AlexDaniel> just in case

[10:08] <AlexDaniel> yeah, bisected correctly :)

[10:10] <jnthn> ohh...I wonder

[10:11] <tbrowder_> AlexDaniel: i fixed typo for failing tests and replied to yr msg at PR

[10:14] <jnthn> Yeah, OK, I know why

[10:14] <dogbert2> a bug or a feature

[10:15] <jnthn> Previously, when we assigned to Scalar, we did it in cheating C code

[10:15] <jnthn> Now we do it with nqp::bindattr

[10:15] <jnthn> That includes the serialization context write barrier

[10:15] <jnthn> Which is the thing that tracks when we have changed an object serialized in a different SC

[10:16] <jnthn> In this case, that thing is the our-scoped Scalar

[10:16] <jnthn> Which is exported

[10:18] <jnthn> Since one could probably write a test that would consider the previous behavior a bug, this probably counts as improvement

[10:20] *** robertle_ joined
[10:22] <dogbert2> interesting

[10:23] <dogbert2> so which regression is next on your list?

[10:30] <jnthn> I probably need to look at the others in that issue some more

[10:30] *** Zoffix joined
[10:32] <Zoffix> .tell AlexDaniel don't know if this even have any meaning, but I was trying to install a module with zscript on HEAD-ish commit and zef apparently just bailed out after searching for a module. Re-trying installed it fine: https://gist.github.com/zoffixznet/8d72d3ea90728aa0bd17ac10d3fafd4b

[10:32] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[10:33] <pmurias> MasterDuke: the unused variables in while code are there so that they can be used in the future

[10:33] <yoleaux> 14 Jul 2018 20:53Z <MasterDuke> pmurias: *@ doesn't seem to work in signatures with Truffle. e.g. `'sub foo(*@f) { say(nqp::elems(@f)) }; foo(1, 2, 3)'` dies with `java.lang.RuntimeException: Can only call elems on arrays or hashes` (with a yet-to-be-pushed commit to make elems support NQPList). where would i look to fix that?

[10:33] *** Zoffix left
[10:33] <AlexDaniel> .

[10:33] <yoleaux> 10:32Z <Zoffix> AlexDaniel: don't know if this even have any meaning, but I was trying to install a module with zscript on HEAD-ish commit and zef apparently just bailed out after searching for a module. Re-trying installed it fine: https://gist.github.com/zoffixznet/8d72d3ea90728aa0bd17ac10d3fafd4b

[10:34] <lizmat> Zoffix: http://modules.perl6.org/dist/Readline:cpan:JGOFF still shows version 0.1.1 while at least 0.1.3 has been uploaded to CPAN ?

[10:34] <AlexDaniel> interesting, but maybe zef itself failed to pull a list of modules or something like that?

[10:35] <pmurias> MasterDuke: re *@ in signatures in Truffle.nqp you need to hook the support in the compile_params method

[10:36] <pmurias> MasterDuke: on the java side we need a node that gets slurpy arguments (look into NQPGetPositionalNode for the node that gets a single positional node)

[10:49] <Geth> ¦ nqp: 896f009d2a | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[10:49] <Geth> ¦ nqp: [MoarVM Bump] Brings 4 commits

[10:49] <Geth> ¦ nqp: 

[10:49] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.06-220-gd4d8ff4...2018.06-224-gb7c6afd92

[10:49] <Geth> ¦ nqp: b7c6afd92 Use larger integer time to iterate strings heap

[10:49] <Geth> ¦ nqp: a50a0b15b Make compare-oplist-interp-order.sh more POSIX compliant

[10:49] <Geth> ¦ nqp: 0dd6ce547 Merge pull request #904 from samcv/remove-backref-hash2

[10:49] <Geth> ¦ nqp: e94d3dfdb Remove previous hash handle pointers in hash implementation

[10:49] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/896f009d2a

[10:49] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-220-gd4d8ff4...2018.06-224-gb7c6afd92

[10:49] <Geth> ¦ rakudo: ee9314d02f | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[10:49] <Geth> ¦ rakudo: [NQP Bump] Brings 2 commits

[10:49] <Geth> ¦ rakudo: 

[10:49] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.06-51-g6c3c3c3...2018.06-53-g896f009d2

[10:49] <Geth> ¦ rakudo: 896f009d2 [MoarVM Bump] Brings 4 commits

[10:49] <Geth> ¦ rakudo: 09d75a951 Add some return types to doc signatures

[10:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ee9314d02f

[10:49] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-51-g6c3c3c3...2018.06-53-g896f009d2

[10:50] *** Ven` left
[10:53] <Geth> ¦ roast/handle-6.d: a3194da14b | (Zoffix Znet)++ | S32-io/io-handle.t

[10:53] <Geth> ¦ roast/handle-6.d: Finish spec of IO::Handle.WRITE/.READ/.EOF

[10:53] <Geth> ¦ roast/handle-6.d: review: https://github.com/perl6/roast/commit/a3194da14b

[10:54] <Geth> ¦ rakudo/handle-6.d: 47 commits pushed by (Elizabeth Mattijsen)++, (Daniel Green)++, (Jonathan Worthington)++, (Nick Logan)++, (Zoffix Znet)++, (Aleks-Daniel Jakimenko-Aleksejev)++

[10:54] <Geth> ¦ rakudo/handle-6.d: review: https://github.com/rakudo/rakudo/compare/44ae3789f36a...be78685710d9

[10:56] *** Zoffix joined
[10:57] <Zoffix> lizmat: unsure why but the metafile included in the dist itself still has version set at 0.1.0

[10:57] <lizmat> aha.. ok, that could be the issue.. :)

[10:58] <Zoffix> lizmat: oh, nm, it's updated actually: https://github.com/drforr/perl6-readline/blob/master/META6.json

[10:58] <Zoffix> I was looking at modules.perl6.org

[10:58] <Zoffix> In build log I see it's being processed without errors: http://modules.perl6.org/update.log

[10:59] <Zoffix> Don't have time to look at it right now

[10:59] <Zoffix> |10h invesitage mp6 update breakatge: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-07-16#l110

[10:59] <ZofBot> Zoffix, Will remind you on 2018-07-16T16:59:09.106161-04:00 about invesitage mp6 update breakatge: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-07-16#l110

[10:59] *** Zoffix left
[10:59] * lizmat keeps a note of that link

[11:02] *** brrt left
[11:06] <AlexDaniel> weekly: reportable: https://gist.github.com/04593645cef335360aeb2feb32f21708

[11:06] <notable6> AlexDaniel, Noted!

[11:08] <Geth> ¦ nqp/truffle: 2652a4a122 | (Paweł Murias)++ | src/vm/jvm/Truffle.nqp

[11:08] <Geth> ¦ nqp/truffle: [truffle] Fix ops definitions

[11:08] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/2652a4a122

[11:09] <Geth> ¦ nqp/truffle: 31696e05a6 | (Paweł Murias)++ | src/vm/jvm/bin/run_tests.pl

[11:09] <Geth> ¦ nqp/truffle: [truffle] Stop running a test that doesn't pass

[11:09] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/31696e05a6

[11:14] <jnthn> m: class C { has Int $!x; method m(Mu $!x) { } }; C.new.m('nope')

[11:14] <camelia> rakudo-moar ee9314d02: OUTPUT: «Type check failed in assignment to $!x; expected Int but got Str ("nope")␤  in method m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:14] <jnthn> committable6: 2018.06 class C { has Int $!x; method m(Mu $!x) { } }; C.new.m('nope')

[11:14] <committable6> jnthn, ¦2018.06: «Type check failed in assignment to $!x; expected Int but got Str ("nope")␤  in method m at /tmp/3ew1uL9lvw line 1␤  in block <unit> at /tmp/3ew1uL9lvw line 1␤␤ «exit code = 1»»

[11:16] <jnthn> committable6: class C { has Int $!x; method m(Mu $!x) { } }; C.new.m('nope')

[11:16] <committable6> jnthn, ¦class: «Cannot find this revision (did you mean “Plano”?)»

[11:16] <jnthn> committable6: ALL class C { has Int $!x; method m(Mu $!x) { } }; C.new.m('nope')

[11:17] <committable6> jnthn, https://gist.github.com/57f23f38fb0fd05a9bc2b792bd91ee64

[11:25] *** Ven` joined
[11:33] <timotimo> hum. we don't serialize an object's objectid, do we?

[11:34] <jnthn> Apparently if we serialize a Set we do...

[11:34] <timotimo> i mean, the current implementation doesn't really make it simple to do

[11:34] <timotimo> we put the objectid we got into the string heap, but the object itself won't retain its object id, right?

[11:34] <jnthn> Correct

[11:35] <timotimo> that's probably trouble :)

[11:37] <jnthn> *sigh* The spit regression in https://github.com/rakudo/rakudo/issues/2056 is bizzare

[11:37] <jnthn> lunch &

[11:43] *** klapperl joined
[11:44] *** klapperl_ left
[11:50] <lizmat> jnthn: Set uses .WHICH for the keys, which for non-value types uses nqp::objectid .  Probably stating the bleedingly obvious, but I thought I'd mention it

[12:01] *** brrt joined
[12:08] <samcv> weekly: use siphash on MVM https://github.com/MoarVM/MoarVM/commit/d9a3270aa290c8dd3b547d4deceb5e76dc8c8e47 and reduce the size of each hash entry by 8 bytes https://github.com/MoarVM/MoarVM/commit/e94d3dfdb534a4c2cba8ffeed268977d05c6917f

[12:08] <notable6> samcv, Noted!

[12:31] * jnthn back

[12:39] <brrt> \o jnthn

[12:40] <Geth> ¦ rakudo: ae25c4b061 | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[12:40] <Geth> ¦ rakudo: Avoid a bunch of (caught) exceptions in Optimizer

[12:40] <Geth> ¦ rakudo: 

[12:40] <Geth> ¦ rakudo: This didn't affect correctness, but was a bit noisy when trying to

[12:40] <Geth> ¦ rakudo: debug and look for another more interesting exception being thrown.

[12:40] <Geth> ¦ rakudo: Exceptions are also somewhat costly, and a quick concreteness check

[12:40] <Geth> ¦ rakudo: before we try the `getattr` can save us that.

[12:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ae25c4b061

[12:40] <Geth> ¦ rakudo: 8a76c00c2b | (Jonathan Worthington)++ | src/Perl6/Grammar.nqp

[12:40] <Geth> ¦ rakudo: Never repossess the quote lang cache

[12:40] <Geth> ¦ rakudo: 

[12:40] <Geth> ¦ rakudo: We don't want to go serializing different copies of it into various

[12:40] <Geth> ¦ rakudo: precompilations.

[12:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8a76c00c2b

[12:40] <Geth> ¦ rakudo: abfa1b1591 | (Jonathan Worthington)++ | src/Perl6/Grammar.nqp

[12:40] <Geth> ¦ rakudo: Ensure compilations get a fresh %*SIG_INFO

[12:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/abfa1b1591

[12:50] <jnthn> Hmm, so the spit module that breaks has:

[12:50] <jnthn>     has Spit::Type $!param-of;

[12:50] <jnthn> And then:

[12:51] <jnthn>     method set-param-of(Mu $,Mu $!param-of,Int:D $!param-pos) { }

[12:51] <jnthn> The assignment to the attribute started failing after the assignment changes

[12:51] <jnthn> But, if I go back to a version where it works, and do:

[12:51] <jnthn>     method set-param-of(Mu $,Spit::Type $!param-of,Int:D $!param-pos) { }

[12:51] <jnthn> Then we get a parameter bind error

[12:52] <jnthn> So it's almost as if the type check was being ignored

[12:58] <jnthn> But I can't get it to ignore it in an isolated example

[13:00] <dogbert2> Spit eh :)

[13:02] <Ven`> what's a Spit::Type? An enum?

[13:03] <jnthn> A role

[13:03] <jnthn> This thing is doing a bunch of meta-programming

[13:03] <Ven`> Yeah, it seems. This is my first time seeing a .sp file :P

[13:03] <jnthn> oh..hm

[13:04] <jnthn> And more interestingly, the type being checked against isn't composed yet

[13:06] <jnthn> Urgh. The old Scalar assign implementation has its own implementation of what istype does

[13:07] <jnthn> And I'm guessing there might be a discrepancy between them

[13:16] <jnthn> m: class Unfinished { ... }; class C { has Unfinished $!x; method m(Mu $!x) { } }; BEGIN C.new.m('nope')

[13:16] <camelia> rakudo-moar abfa1b159: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  Died with X::TypeCheck::Assignment␤    in method m at <tmp> line 1␤    in code  at <tmp> line 1␤␤»

[13:16] <jnthn> committable6: 2016.06 class Unfinished { ... }; class C { has Unfinished $!x; method m(Mu $!x) { } }; BEGIN C.new.m('nope')

[13:16] <committable6> jnthn, https://gist.github.com/723d263a757b2f1ff23b9f4ee06b44e3

[13:17] <jnthn> committable6: 2016.06 constant \Unfinished = Metamodel::ClassHOW.new_type(:name<Unfinished>); class C { has Unfinished $!x; method m(Mu $!x) { } }; BEGIN C.new.m('nope')

[13:17] <committable6> jnthn, https://gist.github.com/e8a99efe943b71300497aa6d768af6a2

[13:18] <lizmat> jnthn: after the latest nqp bump t/spec/S06-currying/positional.t segfaults at random places for me

[13:20] <timotimo> i get segfaults there, too

[13:20] <lizmat> same for t/spec/integration/eval-and-threads.t  btw

[13:21] <jnthn> lizmat: Yeah, I saw that too; see #moarvm, looks like it may be hashing changes

[13:21] <timotimo> that as well

[13:21] <lizmat> jnthn: I don't think my versio already has the siphash changes

[13:21] <jnthn> There was a previous hashing change

[13:22] <jnthn> Yeah, that was merged in yesterday

[13:23] <jnthn> And somebody did a bump this morning

[13:23] <jnthn> So that'll be in there

[13:23] <lizmat> ok, yeah, that one is in there, yup

[13:24] <jnthn> It seems there's a discrepancy between nqp::istype and the way that scalar assignment used to do type checking, which had its own similar-but-not-quite-the-same implementation of it

[13:25] <jnthn> Still need to get a reproduction but it looks rather like the assignment one, if it didn't find a way to type check because the type wasn't composed yet, would just let the assignment proceed

[13:25] <jnthn> The nqp::istype used pretty much everywhere else is stricter

[13:25] <timotimo> demonic

[13:25] <lizmat> what is wisdom: make nqp::istype as lenient ?

[13:26] <jnthn> That feels...dubious.

[13:26] <jnthn> Make everything dodgy because one thing used to be?

[13:27] <lizmat> well... then nqp::istype should be able to support uncomposed types ?

[13:27] <lizmat> in a slow path ?

[13:27] <jnthn> Or if you write code to deal with uncomposed types you just have to deal with them as Mu

[13:27] <jnthn> Note the code does this:

[13:28] <jnthn>     method set-param-of(Mu $,Mu $!param-of,Int:D $!param-pos) { }

[13:28] <jnthn> But then this:

[13:28] <jnthn>     has Spit::Type $!param-of;

[13:28] <jnthn> If it had used anything except Mu in the parameter list there, then it would have failed.

[13:29] <lizmat> well, if that's going to be documented like that, I think that's a situation we can live with ?

[13:30] <jnthn> Ouch, changing the default nqp::istype behavior to leninet = instant segv

[13:33] <jnthn> I'm pretty sure we shouldn't do that anyway

[13:41] <jnthn> aha, I might have found a way to work around this in the MOP

[13:43] <Ven`> seems to me like we'd want the type checker to refuse assigning here ;o)

[13:45] <jnthn> OK, I think I have a sensible solution that doesn't feel like a total hack :)

[13:46] <jnthn> We can't *really* figure out all of the available roles until composition time, but we can at least use the set of those we've been directly given

[13:47] <jnthn> Which in this case is enough, and using type information that's actually been provided up to that point

[13:47] <jnthn> Hurrah, that gets another module's tests happy

[13:50] <jnthn> If somebody has said $obj.^add_role(Foo) and then does $obj ~~ Foo, even without composing, it's not reasonable enough for us to say yes

[13:50] <jnthn> So long as they don't expect us to deal in transitive roles until composition time, it's all good.

[13:53] <jnthn> m: my $type = Metamodel::ClassHOW.new_type(); $type.^add_role(Positional); say $type ~~ Positional

[13:53] <camelia> rakudo-moar abfa1b159: OUTPUT: «False␤»

[13:53] <jnthn> That says True with my local changes

[13:55] <lizmat> whee!  :-)

[13:57] *** brrt left
[14:00] <Geth> ¦ rakudo: 38d046fafb | (Jonathan Worthington)++ | src/Perl6/Metamodel/ClassHOW.nqp

[14:00] <Geth> ¦ rakudo: Before composition, typecheck against added roles

[14:00] <Geth> ¦ rakudo: 

[14:00] <Geth> ¦ rakudo: Previously:

[14:00] <Geth> ¦ rakudo: 

[14:00] <Geth> ¦ rakudo:     my $type = Metamodel::ClassHOW.new_type();

[14:00] <Geth> ¦ rakudo:     $type.^add_role(Positional);

[14:00] <Geth> ¦ rakudo:     say $type ~~ Positional;

[14:00] <Geth> ¦ rakudo: <…commit message has 14 more lines…>

[14:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/38d046fafb

[14:01] <Ven`> can you remove a role?

[14:01] <timotimo> before composition it could be done

[14:01] <timotimo> after composition, not so much

[14:01] <Ven`> how do you do that?

[14:02] <jnthn> I don't think there's any way to do it, though timotimo is right in terms of what would be in theory possible to implement.

[14:03] <timotimo> well, you could use getattr and bindattr to get at the array it uses to store the roles

[14:03] <Ven`> Just to make sure `MyType.^add_role(R); R t = MyType.new; MyType.^remove_role_somehow(R); MyType.^compose;`

[14:03] *** MasterDuke left
[14:03] <timotimo> yeah

[14:03] <Ven`> doesn't actually do something quite insane

[14:03] <timotimo> it does do something quite insane. but it'll be your own fault

[14:03] <Ven`> (well it probably works after the commit :P)

[14:03] <Ven`> okay, fair enough :D

[14:04] <timotimo> we will not support something like .^remove_role_somehow, i don't think

[14:04] <timotimo> we also don't support using nativecall to find a routine's bytecode and modifying that

[14:04] <Ven`> wait, I can't get the vm bytecode of a function easily? how unpythonistic :P

[14:05] <timotimo> right, python makes that easy

[14:05] <jnthn> It could be something one can request via the debug protocol :)

[14:05] <timotimo> yeah, i'd like to have that

[14:05] <jnthn> Especially if you can also ask for the specializations :)

[14:05] <timotimo> yes yes yes

[14:06] <Ven`> .oO( Dear Santa, ... )

[14:06] *** skids joined
[14:40] *** ufobat_ left
[15:04] <lizmat> notable6: weekly

[15:04] <notable6> lizmat, 4 notes: https://gist.github.com/a8d3f7b181517f9448061eeeec740d8c

[15:06] <Geth> ¦ nqp: 1ca664ac66 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTCompilerMAST.nqp

[15:06] <Geth> ¦ nqp: Disable the SC write barrier during load

[15:06] <Geth> ¦ nqp: 

[15:06] <Geth> ¦ nqp: The load time of a module is dynamically within the scope of the

[15:06] <Geth> ¦ nqp: compilation of the using module. However, from a user perspective the

[15:06] <Geth> ¦ nqp: module mainline is probably more fittingly seen as a bit of runtime

[15:06] <Geth> ¦ nqp: during compile time.

[15:06] <Geth> ¦ nqp: 

[15:06] <Geth> ¦ nqp: <…commit message has 18 more lines…>

[15:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1ca664ac66

[15:10] *** fake_space_whale joined
[15:51] *** squashable6 left
[15:51] *** squashable6 joined
[16:14] *** Ven` left
[16:19] *** lizmat left
[16:23] *** |Tux| left
[16:24] *** lizmat joined
[16:27] *** fake_space_whale left
[16:28] *** robertle_ left
[16:38] <Geth> ¦ 6.d-prep: c63404fb09 | (Zoffix Znet)++ (committed using GitHub Web editor) | d-docs/New-Features-Policy.md

[16:38] <Geth> ¦ 6.d-prep: Mod trial impl. in ecosystem requirement

[16:38] <Geth> ¦ 6.d-prep: 

[16:38] <Geth> ¦ 6.d-prep: For some features this would be impossible, so require features

[16:38] <Geth> ¦ 6.d-prep: under `experimental` pragma for such cases instead.

[16:38] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/c63404fb09

[16:40] <Geth> ¦ 6.d-prep: fdf468e183 | (Zoffix Znet)++ (committed using GitHub Web editor) | d-docs/New-Features-Policy.md

[16:40] <Geth> ¦ 6.d-prep: Tweak wording for clarity

[16:40] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/fdf468e183

[16:48] *** |Tux| joined
[16:57] *** Zoffix joined
[16:57] <Zoffix> Geth ded? I see new commits in rakudo and nqp in the last 15m that weren't announced, were they?

[16:59] *** Geth left
[16:59] <jnthn> Hm, I saw it announce one by you about 10 minutes ago

[16:59] *** Geth joined
[16:59] *** ChanServ sets mode: +v Geth

[16:59] <jnthn> Oh, but not from the Rakudo/NQP repo

[16:59] <Geth> ¦ rakudo: 980f692ccd | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[16:59] <Geth> ¦ rakudo: [NQP Bump] Brings 2 commits

[16:59] <Geth> ¦ rakudo: 

[16:59] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.06-53-g896f009d2...2018.06-55-g33e22b739

[16:59] <Geth> ¦ rakudo: 33e22b739 [MoarVM Bump] Brings 4 commits

[16:59] <Geth> ¦ rakudo: 1ca664ac6 Disable the SC write barrier during load

[16:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/980f692ccd

[16:59] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-53-g896f009d2...2018.06-55-g33e22b739

[17:00] <Geth> ¦ nqp/truffle: a0454b35c9 | (Paweł Murias)++ | 7 files

[17:00] <Geth> ¦ nqp/truffle: [truffle] Implement 'local' scoped variables

[17:00] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/a0454b35c9

[17:00] <Geth> ¦ nqp/truffle: 58d2d82400 | (Paweł Murias)++ | nqp-truffle.nqp

[17:00] <Geth> ¦ nqp/truffle: [truffle] Enable the optimizer

[17:00] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/58d2d82400

[17:00] <Geth> ¦ nqp/truffle: a167db98ae | (Paweł Murias)++ | 2 files

[17:00] <Geth> ¦ nqp/truffle: [truffle] Compile with the JVM setting

[17:00] <Geth> ¦ nqp/truffle: 

[17:00] <Geth> ¦ nqp/truffle: We need to swith to using a one dual compiled that we can load at some point

[17:00] <Geth> ¦ nqp/truffle: Before we can deserialize we use a placeholder for QAST::WVal.

[17:00] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/a167db98ae

[17:00] <Geth> ¦ nqp: 33e22b739b | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[17:00] <Geth> ¦ nqp: [MoarVM Bump] Brings 4 commits

[17:00] <Geth> ¦ nqp: 

[17:00] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.06-224-gb7c6afd92...2018.06-228-g2f807cd59

[17:00] <Geth> ¦ nqp: 2f807cd59 learn facts from a couple of sp_ ops

[17:00] <Geth> ¦ nqp: 1a4adb0e3 Merge pull request #889 from samcv/siphash

[17:00] <Geth> ¦ nqp: 3049b0420 Mix in the instance pointer into the first hash secret

[17:00] <Geth> ¦ nqp: d9a3270aa Implement SipHash, use as our hashing function w/ 64bit hashvals

[17:00] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/33e22b739b

[17:00] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-224-gb7c6afd92...2018.06-228-g2f807cd59

[17:01] <Zoffix> k

[17:02] *** Zoffix left
[17:03] *** Zoffix joined
[17:04] <Zoffix> lizmat: http://modules.perl6.org/dist/Readline:cpan:JGOFF points to right release now (after I told it to gen new db from scratch). Pretty sure it's dupe-dist bug that's causing the individual URL to a dist to pick among the available dist (based on insert order, I'm guessing): https://github.com/perl6/modules.perl6.org/issues/106

[17:04] <Zoffix> And readline shows up 3 times right now: http://modules.perl6.org/search/?q=readline

[17:07] <Zoffix> .oO( rewrite modules.perl.org using Cro )

[17:07] <Zoffix> Should have the time in 2020 :)

[17:07] *** Zoffix left
[17:37] *** ZofBot left
[17:39] *** ufobat_ joined
[18:06] * DrForr waves.

[18:14] *** ExtraCrispy left
[18:33] *** ufobat_ left
[19:00] <releasable6> Next release in ≈4 days and ≈23 hours. 10 blockers. Please log your changes in the ChangeLog

[19:52] *** ZofBot joined
[19:52] *** ChanServ sets mode: +v ZofBot

[19:56] *** lizmat left
[20:04] <Geth> ¦ rakudo: 9abc10212c | (Elizabeth Mattijsen)++ | src/core/Hash.pm6

[20:04] <Geth> ¦ rakudo: Revert "Copy Hash.STORE logic to Object Hash for now"

[20:04] <Geth> ¦ rakudo: 

[20:04] <Geth> ¦ rakudo: This reverts commit 7848cdb484c3ab096d043b015b5465228db9b3e5.

[20:04] <Geth> ¦ rakudo: 

[20:04] <Geth> ¦ rakudo: The Hash.STORE refactor is probably not going to happen before the 2018.07

[20:04] <Geth> ¦ rakudo: release.  So remove this scaffolding for now.

[20:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9abc10212c

[20:04] *** lizmat joined
[20:05] <Geth> ¦ 6.d-prep: 8d4046e46c | (Zoffix Znet)++ (committed using GitHub Web editor) | ChangeLog.md

[20:05] <Geth> ¦ 6.d-prep: Log some constants changes

[20:05] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/8d4046e46c

[20:07] <geekosaur> brrt, I disabled spesh entirely and still got them. there were segfaults coming from gc after a recent patch though, which seem unrelated.

[20:07] <geekosaur> gleh

[20:07] <geekosaur> .tell brrt I disabled spesh entirely and still got them. there were segfaults coming from gc after a recent patch though, which seem unrelated.

[20:07] <yoleaux> geekosaur: I'll pass your message to brrt.

[20:07] <geekosaur> .tell brrt (unrelated to spesh, that is)

[20:07] <yoleaux> geekosaur: I'll pass your message to brrt.

[20:42] *** pmurias left
[20:42] *** pmurias joined
[21:05] *** MasterDuke joined
[21:06] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/07/16/2018-29-cross-pollination/

[21:11] <lizmat> hmmm... hmmm... Geth seems to have missed at least one commit

[21:15] <MasterDuke> Zoffix: the poster say "of programming of the future". it looked like there was some chat about changing to "of programming in the future"?

[21:15] <lizmat> yeah, I suggested that, but I think both are ok ( but then again, English is not my native language )

[21:19] *** skids left
[21:24] <MasterDuke> "of ... of" works, but as a native speaker i still had to think a little about it

[21:24] <MasterDuke> but that might just be me, a wider poll would be good

[21:26] <geekosaur> "of the future of programming"?

[21:27] <geekosaur> (which is still of ... of but reads a bit more naturally to me, and might be slightly less ambiguous)

[21:35] *** lizmat left
[21:36] *** lizmat joined
[21:51] <Geth> ¦ rakudo: 8a8ce95efa | (Elizabeth Mattijsen)++ | src/core/PseudoStash.pm6

[21:51] <Geth> ¦ rakudo: Make PseudoStash pseudoers hash a native hash

[21:51] <Geth> ¦ rakudo: 

[21:51] <Geth> ¦ rakudo: We won't be calling PseudoStashes so often that the optimizer would take care

[21:51] <Geth> ¦ rakudo: of this.  So do it ourselves.

[21:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8a8ce95efa

[22:00] *** pmurias left
[22:08] <Geth> ¦ rakudo: jnthn self-assigned `Cannot call method 'ACCEPTS' on a null object` in Slang::SQL https://github.com/rakudo/rakudo/issues/2080

[22:12] *** robertle left
[22:31] <Geth> ¦ rakudo: 4766536b41 | (Jonathan Worthington)++ | src/vm/moar/spesh-plugins.nqp

[22:31] <Geth> ¦ rakudo: Re-instate nqp::null -> Mu return mapping

[22:31] <Geth> ¦ rakudo: 

[22:31] <Geth> ¦ rakudo: While we can fix bugs in Rakudo where Perl 6 constructs wrongly produce

[22:31] <Geth> ¦ rakudo: it, we have some slangs that use `nqp::ops`, and our hands are rather

[22:31] <Geth> ¦ rakudo: tied if we're not wanting to break them. Since we're doing this with a

[22:31] <Geth> ¦ rakudo: spesh plugin, the cost is really low anyway (in the best case, it'll be

[22:31] <Geth> ¦ rakudo: free), so we might as well put the mapping back and not break a module

[22:31] <Geth> ¦ rakudo: that was depending on it.

[22:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4766536b41

[23:09] <Geth> ¦ roast/handle-6.d: 61 commits pushed by (Jonathan Worthington)++, (Zoffix Znet)++, (Elizabeth Mattijsen)++, MasterDuke17++

[23:09] <Geth> ¦ roast/handle-6.d: review: https://github.com/perl6/roast/compare/a3194da14bb8...a52b1741ae1a

[23:18] <Geth> ¦ roast/handle-6.d: 3e734149f1 | (Zoffix Znet)++ | 2 files

[23:18] <Geth> ¦ roast/handle-6.d: Create A02-some-day-maybe spec APPENDIX

[23:18] <Geth> ¦ roast/handle-6.d: 

[23:18] <Geth> ¦ roast/handle-6.d: Some things should have reasonably-defined behaviour, but ATM

[23:18] <Geth> ¦ roast/handle-6.d: that behaviour is to just throw X::NYI (e.g. write methods on an

[23:18] <Geth> ¦ roast/handle-6.d: IO::CatHandle). Some day we might come up with good things to do

[23:18] <Geth> ¦ roast/handle-6.d: instead of X::NYI and until that day this APPENDIX will basically

[23:18] <Geth> ¦ roast/handle-6.d: just list such things.

[23:18] <Geth> ¦ roast/handle-6.d: review: https://github.com/perl6/roast/commit/3e734149f1

[23:20] <Geth> ¦ rakudo/handle-6.d: ae9a3628eb | (Zoffix Znet)++ | 2 files

[23:20] <Geth> ¦ rakudo/handle-6.d: Move IO::CatHandle's NYI method to A02 spec APPENDIX

[23:20] <Geth> ¦ rakudo/handle-6.d: 

[23:20] <Geth> ¦ rakudo/handle-6.d: Since we document these, they should really live in a spec, not

[23:20] <Geth> ¦ rakudo/handle-6.d: in an implementation-specific test suite.

[23:20] <Geth> ¦ rakudo/handle-6.d: 

[23:20] <Geth> ¦ rakudo/handle-6.d: Moved to: https://github.com/perl6/roast/commit/3e734149f1

[23:20] <Geth> ¦ rakudo/handle-6.d: review: https://github.com/rakudo/rakudo/commit/ae9a3628eb

[23:24] <Geth> ¦ rakudo/handle-6.d: 9246b03520 | (Zoffix Znet)++ | src/core/IO/CatHandle.pm6

[23:24] <Geth> ¦ rakudo/handle-6.d: Block out .READ/.WRITE/.EOF in IO::CatHandle

[23:24] <Geth> ¦ rakudo/handle-6.d: 

[23:24] <Geth> ¦ rakudo/handle-6.d: Just making them all throw X::NYI ATM and sticking that into

[23:24] <Geth> ¦ rakudo/handle-6.d: SAP (Spec APpendices) until someone comes up with something

[23:24] <Geth> ¦ rakudo/handle-6.d: good for these to do.

[23:24] <Geth> ¦ rakudo/handle-6.d: review: https://github.com/rakudo/rakudo/commit/9246b03520

[23:25] <Geth> ¦ roast/handle-6.d: e0f6f389d5 | (Zoffix Znet)++ | APPENDICES/A02-some-day-maybe/io-cathandle.t

[23:25] <Geth> ¦ roast/handle-6.d: Add .WRITE/.EOF/.READ to SAP (Spec APendices)

[23:25] <Geth> ¦ roast/handle-6.d: 

[23:25] <Geth> ¦ roast/handle-6.d: Rakudo impl: https://github.com/rakudo/rakudo/commit/9246b03520

[23:25] <Geth> ¦ roast/handle-6.d: review: https://github.com/perl6/roast/commit/e0f6f389d5

[23:34] *** Zoffix joined
[23:35] <Zoffix> stresstest failures multiplied: https://gist.github.com/zoffixznet/8cddb31e3c2d7c6fa67fdf354902ffe0

[23:35] <Zoffix> 3 more files fail now

[23:36] <Zoffix> t/spec/S32-num/stress.t looks to be segfaulting now

[23:37] <Zoffix> Yeah, I get either Non-zero wait status: 11 or Non-zero wait status: 7 for these new three

[23:38] <Zoffix> .oO( do I have latest master merged in? )

[23:39] <Geth> ¦ rakudo: zoffixznet++ created pull request #2081: Rename IO::Handle's generic methods to .READ/.WRITE/.EOF

[23:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2081

[23:39] <Geth> ¦ rakudo/master: 7 commits pushed by (Zoffix Znet)++

[23:39] <Geth> ¦ rakudo/master: edf81bfef2 | Check if $!decoder is setup in IO::Handle.encoding…

[23:39] <Geth> ¦ rakudo/master: 03d79975be | Change IO::Handle.*-internal methods to their final names

[23:39] <Geth> ¦ rakudo/master: 44ae3789f3 | Merge branch 'master' into handle-6.d

[23:39] <Geth> ¦ rakudo/master: be78685710 | Merge branch 'master' into handle-6.d

[23:39] <Geth> ¦ rakudo/master: ae9a3628eb | Move IO::CatHandle's NYI method to A02 spec APPENDIX

[23:39] <Geth> ¦ rakudo/master: 9246b03520 | Block out .READ/.WRITE/.EOF in IO::CatHandle

[23:39] <Geth> ¦ rakudo/master: 49363d690e | Merge pull request #2081 from rakudo/handle-6.d

[23:39] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/4766536b412c...49363d690ef4

[23:40] <Geth> ¦ roast: zoffixznet++ created pull request #452: Spec for IO::[Cat]Handle.WRITE/.READ/.EOF methods

[23:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/452

[23:40] <Zoffix> man I see the hook announcement on IRC before the page even managed to load :P

[23:40] <Geth> ¦ roast/master: 6 commits pushed by (Zoffix Znet)++

[23:40] <Geth> ¦ roast/master: 3cefe0dc59 | Start spec of IO::Handle.READ/.WRITE/.EOF

[23:40] <Geth> ¦ roast/master: a3194da14b | Finish spec of IO::Handle.WRITE/.READ/.EOF

[23:40] <Geth> ¦ roast/master: a52b1741ae | Merge branch 'master' into handle-6.d

[23:40] <Geth> ¦ roast/master: 3e734149f1 | Create A02-some-day-maybe spec APPENDIX

[23:40] <Geth> ¦ roast/master: e0f6f389d5 | Add .WRITE/.EOF/.READ to SAP (Spec APendices)

[23:40] <Geth> ¦ roast/master: 14dcd028c1 | Merge pull request #452 from perl6/handle-6.d

[23:40] <Geth> ¦ roast/master: review: https://github.com/perl6/roast/compare/bf9171b4b447...14dcd028c14c

[23:42] <Zoffix> Doc build died: https://travis-ci.org/perl6/doc/jobs/404390772   util/travis-build.sh: line 6:  6775 Segmentation fault      (core dumped) zef --/tap-harness --depsonly install .

[23:43] *** nebuchadnezzar left
[23:44] <Geth> ¦ 6.d-prep: ba720e6462 | (Zoffix Znet)++ | 2 files

[23:44] <Geth> ¦ 6.d-prep: Mark IO::Handle.READ/.WRITE/.EOF as completed

[23:44] <Geth> ¦ 6.d-prep: 

[23:44] <Geth> ¦ 6.d-prep: POVI (Proof-Of-Viability Implementation): https://github.com/rakudo/rakudo/pull/2081

[23:44] <Geth> ¦ 6.d-prep: Spec and SAP: https://github.com/perl6/roast/pull/452

[23:44] <Geth> ¦ 6.d-prep: Docs: https://github.com/perl6/doc/pull/2181

[23:44] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/ba720e6462

[23:44] <Zoffix> w00t

[23:45] <Zoffix> One fewer items on the list \o/

[23:45] <Zoffix> buggable: d

[23:45] <buggable> Zoffix, Diwali is in 113 days, which is 16 weeks, 14 minutes, and 53 seconds. Need to review 31 commits per day (219/week)to complete. Need 8 teaser flyers.

[23:48] *** Ven` joined
[23:48] *** buggable left
[23:48] *** buggable joined
[23:48] *** ChanServ sets mode: +v buggable

[23:48] <Zoffix> buggable: d

[23:48] <buggable> Zoffix, Diwali is in 113 days, which is 16 weeks, 11 minutes, and 24 seconds. Need to review 34 commits per day (240/week)to complete. Need 8 teaser flyers. Still have 9 TODO features costing 81 hours. Still have 2.3 policies to write. Still have ~95% of ChangeLog to do.

[23:48] <Zoffix> 🤘🤘🤘 https://www.youtube.com/watch?v=9jK-NcRmVcw

[23:52] *** Ven` left
[23:54] <Zoffix> heh, 6 failing files on master

[23:55] <Zoffix> ZOFVM: Files=1299, Tests=153365, 165 wallclock secs (21.28 usr  3.31 sys + 3578.31 cusr 166.99 csys = 3769.89 CPU)

[23:55] <Zoffix> updated R#2071 with list of new files

[23:55] <synopsebot> R#2071 [open]: https://github.com/rakudo/rakudo/issues/2071 [⚠ blocker ⚠] Stresstest failures on v2018.06.179.g.9.dce.63318

[23:56] *** Zoffix left
