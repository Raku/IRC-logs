[00:17] <samcv> MoarVM will be released in about 20 or so minutes

[00:24] <AlexDaniel> samcv: fwiw I'll be able to release rakudo in about 8 hours or so after I get some sleep

[00:24] <samcv> ok sounds good

[00:29] <samcv> MoarVM is now released

[07:00] <nine> .tell pmurias The difference between :api and an extra name part is a very explicit and unified way to express "same goal, but incompatible API". Functionally it's the same as having Foo, Foo2 and Foo3. People are hesitant to tuck a number onto a name. So instead they use convention to assign additional semantics to a version number. :api is explicit and has a chance to become ubiquitous

[07:00] <yoleaux> nine: I'll pass your message to pmurias.

[09:39] <AlexDaniel> good morning o/

[09:58] <jnthn> morning o/

[10:01] <nine> Good morning o/

[10:26] <lizmat> afk until much later today&

[10:27] <AlexDaniel> hey, https://alerts.perl6.org is down

[10:42] <Zoffix> It's hack glitching again. ssh'ing into it showed "Last login:" but got stuck... still waiting for terminal

[10:42] <yoleaux> 07:02Z <lookatme> Zoffix: Other guys told me the issue has reported. I will do that in next time :)

[10:42] <Zoffix> Geth: help[

[10:42] <Zoffix> Geth: help

[10:42] <Geth> Zoffix, Source at https://github.com/perl6/geth To add repo, add an 'application/json' webhook on GitHub pointing it to http://hack.p6c.org:8888/?chan=#perl6 and choose 'Send me everything' for events to send | use `ver URL to commit` to fetch version bump changes

[10:44] <Zoffix> s: do { shell "ps aux --sort -rss" }

[10:49] <Zoffix> Back in business: https://alerts.perl6.org/

[10:49] <Zoffix> (power-cycled hack in hypervisor; no idea what was wrong)

[11:18] <Geth> ¦ rakudo: f7b5715557 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[11:18] <Geth> ¦ rakudo: Log all changes (+ announcement)

[11:18] <Geth> ¦ rakudo:

[11:18] <Geth> ¦ rakudo: Deliberately not logged:

[11:18] <Geth> ¦ rakudo: 4e5c908d 5c35faf0 62242caa e17f23f3 832ae591 de3bde13 f9bced0c

[11:18] <Geth> ¦ rakudo: d0455a73 da61c8d1 3dd86f3d 5270471c 2c04b208 084ac02e dc0f06b5

[11:18] <Geth> ¦ rakudo: 6006e2f6 d3a7d7d2 26e34cd1 36caa18a 2a8b17ae 8a10fc17 15b94786

[11:18] <Geth> ¦ rakudo: c3358851 fc643a21 d643c2cc 79a95b49 98e575de b7df58f2 02fc1ffe

[11:18] <Geth> ¦ rakudo: efd0d6c0 b212fc5e 76eff07d a918028e b5100d6a 90303c1e 5feb6bbe

[11:18] <Geth> ¦ rakudo: 8d954027 ada26ca1 3259953e ec9a227b 78ed66c7 e09f2ecc 3fb06bb0

[11:18] <Geth> ¦ rakudo: 26522e8a 2a394781 470b38e1 52e66ad3 71012beb 015d5a19 7b2de29b

[11:18] <Geth> ¦ rakudo: 87815ee4 991af461 97c6f9c8 ab391c24 3e8ee991 b75d9b1e 2a0b90f8

[11:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f7b5715557

[11:18] <Geth> ¦ rakudo: 950b44f83b | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/create-release-announcement.p6

[11:18] <Geth> ¦ rakudo: Fix create-release-announcement.p6 script

[11:18] <Geth> ¦ rakudo:

[11:18] <Geth> ¦ rakudo: It attempted to run `tools/contributors.pl6` but that script was

[11:18] <Geth> ¦ rakudo: renamed to have `.p6` extension. See issue #1627.

[11:18] <synopsebot> RAKUDO#1627 [open]: https://github.com/rakudo/rakudo/issues/1627 [LHF] Missing bits for .pm → .pm6 rename

[11:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/950b44f83b

[11:18] <Geth> ¦ rakudo: 64b0fec966 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/release_guide.pod

[11:18] <Geth> ¦ rakudo: Actual date, claim next release

[11:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/64b0fec966

[11:31] <|Tux|> Rakudo version 2018.02.1-180-g64b0fec96 - MoarVM version 2018.02-171-geee5be412

[11:31] <|Tux|> csv-test-xs-20      0.441 -  0.450

[11:31] <|Tux|> csv-ip5xs           0.797 -  0.804

[11:31] <|Tux|> test-t --race       1.057 -  1.059

[11:31] <|Tux|> test-t              2.568 -  2.580

[11:31] <|Tux|> csv-ip5xs-20        7.388 -  7.464

[11:31] <|Tux|> test                8.993 -  9.172

[11:32] <|Tux|> test-t-20 --race   15.487 - 15.965

[11:32] <|Tux|> csv-parser         36.251 - 37.700

[11:32] <|Tux|> test-t-20          45.290 - 46.350

[11:38] <AlexDaniel> well if it takes just a little bit over 2 seconds I should instruct whateverable to run it on every single revision of the last few years

[11:38] <AlexDaniel> ok it was much slower back then, but still

[12:01] <ilmari> doing back to the start of 2016 it maxes out at 15s

[12:05] <AlexDaniel> say (7058 × 15)÷60÷60 # worst case

[12:05] <evalable6> AlexDaniel, rakudo-moar 64b0fec96: OUTPUT: «29.408333␤»

[12:05] <AlexDaniel> less than two days

[12:05] <AlexDaniel> plus maybe you'll need a few runs on each to denoise it a little

[12:21] <MasterDuke> could do the several runs per commit simultaneously on multiple cores

[12:40] <AlexDaniel> not sure if that's a good idea

[12:41] <AlexDaniel> ah

[12:44] <Geth> ¦ nqp: c7813617af | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[12:44] <Geth> ¦ nqp: [release] Bump MoarVM revision to 2018.03

[12:44] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c7813617af

[12:44] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.02-171-geee5be4...2018.03

[12:44] <Geth> ¦ nqp: b0d57e1302 | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[12:44] <Geth> ¦ nqp: [release] Bump VERSION to 2018.03

[12:44] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b0d57e1302

[12:44] <Geth> ¦ rakudo: 16b6adb28e | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[12:44] <Geth> ¦ rakudo: [release] Bump NQP revision to 2018.03

[12:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/16b6adb28e

[12:44] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.02-105-g199dd708b...2018.03

[12:44] <Geth> ¦ rakudo: f802c63708 | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[12:44] <Geth> ¦ rakudo: [release] Bump VERSION to 2018.03

[12:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f802c63708

[12:48] <Zoffix> w00

[12:48] <Zoffix> t

[12:48] <Zoffix> AlexDaniel: release done, ye?

[12:49] <AlexDaniel> Zoffix: yes

[12:49] <Zoffix> \o/

[12:49] <Zoffix> AlexDaniel++ samcv++

[12:50] <Geth> ¦ rakudo: zoffixznet++ created pull request #1628: Post release 2018.03

[12:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1628

[12:50] <Geth> ¦ rakudo/master: 7 commits pushed by (Zoffix Znet)++, (Stefan Seifert)++, (Elizabeth Mattijsen)++

[12:50] <Geth> ¦ rakudo/master: 18eda3ea69 | Clear up nqp code in IO::Handle.open

[12:50] <Geth> ¦ rakudo/master: 87e43c4aea | Fix infix:<o> identity function

[12:50] <Geth> ¦ rakudo/master: 32c5c83c6e | Support the "api" adverb when loading modules

[12:50] <Geth> ¦ rakudo/master: 16daf02f7f | Make builds reproducible

[12:50] <Geth> ¦ rakudo/master: 7d978fb266 | Add .append(IterationBuffer) methods to ReificationTargets

[12:50] <Geth> ¦ rakudo/master: 228495927c | Give IterationBuffer an .append for IterationBuffers

[12:50] <Geth> ¦ rakudo/master: 19b3e52fd1 | Merge pull request #1628 from rakudo/post-release-2018.03

[12:50] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/f802c6370808...19b3e52fd160

[12:50] <Geth> ¦ roast: zoffixznet++ created pull request #404: Post release 2018.03

[12:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/404

[12:50] <Geth> ¦ roast/master: 5 commits pushed by (Zoffix Znet)++, (Stefan Seifert)++

[12:50] <Geth> ¦ roast/master: 05c07809fb | Do not rely on EVAL's :context in tests

[12:50] <Geth> ¦ roast/master: 37aa7c3d7f | Expand/clarify spec for .open mode arguments

[12:50] <Geth> ¦ roast/master: eacaf276f8 | Test infix:<o>() with Failures

[12:50] <Geth> ¦ roast/master: 7d4d402cfa | Test support for :api adverb when loading modules

[12:50] <Geth> ¦ roast/master: 055e7fbae1 | Merge pull request #404 from perl6/post-release-2018.03

[12:50] <Geth> ¦ roast/master: review: https://github.com/perl6/roast/compare/8bfcb7c64a99...055e7fbae19a

[12:53] <AlexDaniel> p6lert: add severity:low affects:[2018.02 and earlier] In Rakudo 2018.03 Str.comb(Regex) was fixed to return a Seq instead of a List, making Str.comb always return a Seq. Code relying on the specifics of the previous behavior might require some tweaks.

[12:53] <AlexDaniel> oh I know

[12:53] <AlexDaniel`> p6lert: add severity:low affects:[2018.02 and earlier] In Rakudo 2018.03 Str.comb(Regex) was fixed to return a Seq instead of a List, making Str.comb always return a Seq. Code relying on the specifics of the previous behavior might require some tweaks.

[12:53] <p6lert> AlexDaniel`, Added alert ID 5: https://alerts.perl6.org/alert/5

[12:54] <AlexDaniel`> p6lert: delete 5

[12:54] <p6lert> AlexDaniel`, Deleted alert ID 5

[12:54] <Zoffix> why that affects?

[12:54] <AlexDaniel> Zoffix: Heh well. yeah, was going to ask. Should I leave it just empty?

[12:55] <Zoffix> IMO most alerts shouldn't need affects at all.

[12:55] <AlexDaniel> k

[12:55] <Zoffix> Because it's obvious from context.

[12:57] <AlexDaniel> p6lert: add severity:low In Rakudo 2018.03 Str.comb(Regex) was fixed to return a Seq instead of a List, making Str.comb always return a Seq. Code relying on the specifics of the previous behavior might require some tweaks.

[12:57] <p6lert> AlexDaniel, Added alert ID 6: https://alerts.perl6.org/alert/6

[12:57] <AlexDaniel> uh, so it skips the id if you do that!

[12:58] <AlexDaniel> oops! Will not do that again then

[12:58] <Zoffix> What does it matter?

[12:58] <Zoffix> It doesn't skip. It's a unique ID.

[12:58] <AlexDaniel> maybe not, but now it will go #1 #2 #3 #4 #6

[12:58] <Zoffix> Come to think of it, should add some sort of confirmation for deleting alerts. A slip of a finger and wrong alert would be nuked.

[12:59] <Zoffix> AlexDaniel: yeah, but all of them can be deleted and if numbers were reused any context where alert ID were mentioned would contain incorrect information.

[13:00] <AlexDaniel> arguably that alert was in the “staging” area

[13:00] <AlexDaniel> “it'll take 10 minutes for the alert to show up on the main site's page”

[13:00] <AlexDaniel> not a big deal anyway

[13:01] <Zoffix> .oO( OCD )

[13:03] <Zoffix> Well, yeah, but you can still view it via direct URL or direct API by-id query.

[13:04] <Zoffix> And it just uses the auto-increment ID in the database.

[13:04] <Zoffix> Trying to write extra code to by-pass that is silly

[13:12] <Zoffix> m: say permutations $_ with (1,2)

[13:12] <camelia> rakudo-moar 19b3e52fd: OUTPUT: «((0 1) (1 0))␤»

[13:12] <Zoffix> m: say .permutations with (1,2)

[13:12] <camelia> rakudo-moar 19b3e52fd: OUTPUT: «((1 2) (2 1))␤»

[13:12] <Zoffix> s: &permutations, \((1,))

[13:12] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/64b0fec96/src/core/List.pm6#L1549

[13:13] <Zoffix> s: (1,), 'permutations', \()

[13:13] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/64b0fec96/src/core/List.pm6#L1182

[13:14] * Zoffix tries adding a multi to avoid this weirdness

[13:21] <AlexDaniel> “You just made your tenth edit; thank you, and please keep going!”

[13:21] <Zoffix> ?

[13:22] <AlexDaniel> Wikipedia :)

[13:23] <AlexDaniel> 10 edits but 9 releases (including the point release last month)

[13:25] <AlexDaniel> oh my… something is wrong

[13:25] <Zoffix> Soon you'll beat my record :)

[13:25] <Zoffix> Wrong where?

[13:26] <Geth> ¦ rakudo: 96570c5ca0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/release_guide.pod

[13:26] <Geth> ¦ rakudo: Oops. 2018.0𝟯

[13:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/96570c5ca0

[13:26] <AlexDaniel> not a big deal :)

[13:32] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[13:33] <Zoffix> ZOFVM: Files=1290, Tests=153235, 151 wallclock secs (20.84 usr  3.26 sys + 3212.30 cusr 170.06 csys = 3406.46 CPU)

[13:43] <Zoffix> m: say ^3 .combinations: 1..2

[13:43] <camelia> rakudo-moar 96570c5ca: OUTPUT: «((0) (1) (2) (0 1) (0 2) (1 2))␤»

[13:43] <Zoffix> m: say combinations 3, 1..2

[13:43] <camelia> rakudo-moar 96570c5ca: OUTPUT: «((0 1) (0 2) (1 2))␤»

[13:44] <Zoffix> And the rabbithole deepens :(

[13:45] <AlexDaniel> releasable6: next

[13:45] <releasable6> AlexDaniel, Next release in 33 days and ≈5 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[13:45] <releasable6> AlexDaniel, Details: https://gist.github.com/3be2b15cd922ec54798192aabfc500b2

[13:45] <AlexDaniel> 33 days!!

[13:45] <Zoffix> Gonna be a beefy release :)

[13:57] <Zoffix> ZOFVM: Files=1290, Tests=153247, 151 wallclock secs (20.98 usr  3.38 sys + 3209.94 cusr 174.74 csys = 3409.04 CPU)

[14:00] <Zoffix> m: dd ^3 .combinations

[14:00] <camelia> rakudo-moar 96570c5ca: OUTPUT: «((), (0,), (1,), (2,), (0, 1), (0, 2), (1, 2), (0, 1, 2)).Seq␤»

[14:00] <Zoffix> m: dd combinations ^3

[14:00] <camelia> rakudo-moar 96570c5ca: OUTPUT: «Cannot resolve caller combinations(Range); none of these signatures match:␤    ($n, $k)␤  in block <unit> at <tmp> line 1␤␤»

[14:01] <Zoffix> .oO( more like a bear hole )

[14:05] <pmurias> m: use nqp;say(nqp::div_In(nqp::fromstr_I('12' ~ nqp::x('0', 307), Int), nqp::box_i(1, Int)));

[14:05] <camelia> rakudo-moar 96570c5ca: OUTPUT: «Inf␤»

[14:05] <pmurias> BUG: nqp::div_I incorrectly return Infs for super large bignums on MoarVM

[14:05] <pmurias> m: use nqp;say(nqp::div_In(nqp::fromstr_I('12' ~ nqp::x('0', 306), Int), nqp::box_i(1, Int))); # works for a slightly smaller on

[14:05] <camelia> rakudo-moar 96570c5ca: OUTPUT: «Inf␤»

[14:06] <pmurias> m: use nqp;say(nqp::div_In(nqp::fromstr_I('12' ~ nqp::x('0', 305), Int), nqp::box_i(1, Int))); # works for a slightly smaller on

[14:06] <camelia> rakudo-moar 96570c5ca: OUTPUT: «1.2e+306␤»

[14:06] <Zoffix> m: dd ^3 .combinations: 2.2 .. 3.3

[14:06] <camelia> rakudo-moar 96570c5ca: OUTPUT: «This type cannot unbox to a native integer: P6opaque, Rat␤  in block <unit> at <tmp> line 1␤␤»

[14:10] <Zoffix> j: use nqp;say(nqp::div_In(nqp::fromstr_I('12' ~ nqp::x('0', 307), Int), nqp::box_i(1, Int)));

[14:10] <camelia> rakudo-jvm a92950fb4: OUTPUT: «1.2E308␤»

[14:12] <Zoffix> ooohh that one's familiar

[14:13] <Zoffix> RT#130154 RT#130153 RT#130155

[14:13] <synopsebot> RT#130154 [new]: https://rt.perl.org/Ticket/Display.html?id=130154 [BUG] Int/Int gives bogus underflow

[14:13] <synopsebot> RT#130153 [new]: https://rt.perl.org/Ticket/Display.html?id=130153 [9999][BUG] Int**Int yields bogus overflow

[14:13] <synopsebot> RT#130155 [new]: https://rt.perl.org/Ticket/Display.html?id=130155 [BUG] Rat operations give bogus underflow

[14:14] <Zoffix> And there's a closed PR that fixes the issue, but I at the time I didn't understand why, so I cloed it: https://github.com/MoarVM/MoarVM/pull/442/files

[14:23] <pmurias> Zoffix: that fix seems correct, why isn't merged in?

[14:23] <pmurias> (or do you still don't understand why?)

[14:24] <Zoffix> pmurias: still don't understand why

[14:25] <Zoffix> Infact, I forgot all about this, so now I understand it even less then when I created that PR :)

[14:27] <pmurias> I'll try to explain why the fix is correct

[14:28] <pmurias> if we are calling div_In with super big numbers we can't just convert them to doubles as we would get an Inf

[14:29] <pmurias> so the approach is to throw away the same amount of the least significant bits from both of them

[14:30] <pmurias> we currently throw away an amount of bits that's needed for both of them to fit

[14:31] <pmurias> while we need to get the smaller one to fit

[14:33] <pmurias> because currently the smaller one is just shifted down into zero

[14:34] <timotimo> pmurias: i think the floating point parsing thing you found is a known issue, and we even had a C program reproduce the problem

[14:34] <Zoffix> no, that one was for Rats

[14:34] * pmurias now has doubts the Zoffix fix is correct, we need more TDD ;)

[14:35] <Zoffix> m: use nqp; say(nqp::div_In(nqp::fromstr_I("1" ~ nqp::x("0", 1006), Int), nqp::fromstr_I("2" ~ nqp::x("0", 1006), Int)))

[14:35] <camelia> rakudo-moar 96570c5ca: OUTPUT: «0.5␤»

[14:35] <pmurias> timotimo: I have a fix for the parsing thing, it just needs nqp::div_I to work correctly

[14:35] <timotimo> that was rats? huh

[14:36] <Zoffix> pmurias: I don't get how this works tho. What does mp_div_2d do?

[14:37] <Zoffix> nm, found docs. mp_div_2d(a, b) divides a by 2**b

[14:37] <Zoffix> k, now I get it

[14:40] <Zoffix> pmurias: but yeah, it's still not clear to me if the fix is right. Because you're basically dealing with: an Int that's too big, it becomes an Inf when converted to double and you get Inf result; or an Inf that's too small, it becomes zero then reduced, and you get Inf result (through division by zero). So, reasoning that way, it shouldn't matter whether we take a min or a max

[14:40] <Zoffix> Is the 1023 it's checking against wrong?

[14:42] <Zoffix> |5d Check divIn thing https://github.com/MoarVM/MoarVM/pull/442/files

[14:42] <ZofBot> Zoffix, Will remind you on 2018-03-24T10:42:06.579886-04:00 about Check divIn thing https://github.com/MoarVM/MoarVM/pull/442/files

[14:42] <Zoffix> gonna stash it for when I'm more awake

[15:06] * Zoffix spots yet another bug in combinations impl

[15:07] <Zoffix> m: dd <a b c>.combinations: 2..^3.9

[15:07] <camelia> rakudo-moar 96570c5ca: OUTPUT: «(("a", "b"), ("a", "c"), ("b", "c"), ("a", "b", "c")).Seq␤»

[15:08] <Zoffix> or is it.. hm

[15:10] <AlexDaniel> releasable6: 2018-03-12T00:00:00Z 2018-03-19T00:00:00Z

[15:10] <releasable6> AlexDaniel, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Releasable

[15:10] <Zoffix> m: dd <a b c>.combinations: 2.7..^3.6

[15:10] <camelia> rakudo-moar 96570c5ca: OUTPUT: «This type cannot unbox to a native integer: P6opaque, Rat␤  in block <unit> at <tmp> line 1␤␤»

[15:10] <AlexDaniel> reportable6: 2018-03-12T00:00:00Z 2018-03-19T00:00:00Z

[15:10] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[15:10] <Zoffix> m: say eager 2.7..^3.6

[15:10] <camelia> rakudo-moar 96570c5ca: OUTPUT: «(2.7)␤»

[15:11] <reportable6> AlexDaniel, https://gist.github.com/6fe0a5474a8782abac19cb1c02c82568

[15:11] <Zoffix> m: say (eager 2.7..^3.6)».Int

[15:11] <camelia> rakudo-moar 96570c5ca: OUTPUT: «(2)␤»

[15:11] <Zoffix> m: say (eager 2.3..^3.6)».Int

[15:11] <camelia> rakudo-moar 96570c5ca: OUTPUT: «(2 3)␤»

[15:11] <AlexDaniel> there was a person who had “weekly” shortcut implemented for reportable6… and then that person went for vacation

[15:11] <AlexDaniel> and I'm still waiting!

[15:11] <AlexDaniel> :)

[15:13] <AlexDaniel> weekly: reportable: https://gist.github.com/6fe0a5474a8782abac19cb1c02c82568

[15:13] <notable6> AlexDaniel, Noted!

[15:13] <Zoffix> Do we have any other places where we take non-int ranges to mean int things? Do we reify and then intify or do we intify the endpoints and then intify?

[15:14] <Zoffix> wow 60 tickets in a week. Hardcore

[15:14] <Zoffix> m: dd "foo.tar.gz.zip".IO.extension: 2.3..^3.6

[15:14] <camelia> rakudo-moar 96570c5ca: OUTPUT: «Cannot resolve caller extension(IO::Path: Range); none of these signatures match:␤    (IO::Path:D $: *%_)␤    (IO::Path:D $: Int :$parts!, *%_)␤    (IO::Path:D $: Range :$parts!, *%_)␤    (IO::Path:D $: Str $subst, Int :$parts = 1, Str :$joine…»

[15:14] <Zoffix> m: dd "foo.tar.gz.zip".IO.extension: :parts(2.3..^3.6)

[15:14] <camelia> rakudo-moar 96570c5ca: OUTPUT: «"gz.zip"␤»

[15:15] <Zoffix> m: dd "foo.tar.gz.zip".IO.extension: :parts(2.7..^3.6)

[15:15] <camelia> rakudo-moar 96570c5ca: OUTPUT: «"gz.zip"␤»

[15:18] <AlexDaniel> Zoffix: is it? We had 60 tickets **closed** once. “touched” in these reports means a comment, or a tag added, or anything

[15:18] <AlexDaniel> Zoffix: https://gist.github.com/2313f13e789ae400f58ff2f41ef60f4e

[15:18] <Zoffix> m: say "abcdefg" ~~ m:nth(2.7..3.6)/./

[15:18] <camelia> rakudo-moar 96570c5ca: OUTPUT: «(｢b｣)␤»

[15:18] <Zoffix> m: say "abcdefg" ~~ m:nth(2.3..3.6)/./

[15:18] <camelia> rakudo-moar 96570c5ca: OUTPUT: «(｢b｣ ｢c｣)␤»

[15:18] <Zoffix> So we're inconsistent here, though luckily :parts on IO.extension is just a propspec.

[15:19] <AlexDaniel> and once we touched 185 tickets in one week, I think that was when we had rakudo squashathon: https://gist.github.com/49326ba3f95a4f3ee3d1b722e8d48519

[15:20] <AlexDaniel> fwiw all this can be found here: https://github.com/rakudo/rakudo/wiki/Ticket-updates

[15:20] <Zoffix> holy crap

[15:34] <DrForr> o/

[15:37] <Zoffix> \o

[15:39] <Geth> ¦ rakudo: 624b3f0cd1 | (Zoffix Znet)++ | src/core/List.pm6

[15:39] <Geth> ¦ rakudo: Fix explosion in List.combinations: Range

[15:39] <Geth> ¦ rakudo:

[15:39] <Geth> ¦ rakudo: Still needs more work with non-Int Ranges. Will be

[15:39] <Geth> ¦ rakudo: resolved as part of R#1629

[15:39] <Geth> ¦ rakudo: https://github.com/rakudo/rakudo/issues/1629

[15:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/624b3f0cd1

[15:39] <synopsebot> R#1629 [open]: https://github.com/rakudo/rakudo/issues/1629 [audit entire codebase for such issues] [META] Treatment of non-Int ranges as a sequence of Int values

[15:48] <pmurias> Zoffix: the check 1023 is causing the problem

[15:49] <Zoffix> cool.

[15:50] <Geth> ¦ rakudo: 29dcde1026 | (Zoffix Znet)++ | src/core/List.pm6

[15:50] <Geth> ¦ rakudo: Consistify &combinations/&permuations with method forms

[15:50] <Geth> ¦ rakudo:

[15:50] <Geth> ¦ rakudo: In most of the language, subroutine forms are largely a functional

[15:50] <Geth> ¦ rakudo: way to use the method forms. However, with &combinations/&permutations,

[15:50] <Geth> ¦ rakudo: trying to follow that convention produces confusing[^1] results in that

[15:50] <Geth> ¦ rakudo: @list.permuations permutates the list, yet permutations(@list) is

[15:50] <Geth> ¦ rakudo: equivalent to permutations(^@list). If @list contains small integers,

[15:50] <Geth> ¦ rakudo: <…commit message has 11 more lines…>

[15:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/29dcde1026

[15:50] <Geth> ¦ roast: 899d4d7858 | (Zoffix Znet)++ | 2 files

[15:50] <Geth> ¦ roast: Spec &combinations/&permutations to be closer to method forms

[15:50] <Geth> ¦ roast:

[15:50] <Geth> ¦ roast: Rakudo impl and reasoning:

[15:50] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/29dcde1026

[15:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/899d4d7858

[15:58] <pmurias> Zoffix: I don't have an obvious solution to that

[15:58] <Zoffix> :)

[15:59] <Zoffix> I'll give it a go on the weekend, unless someone beats me to it

[16:06] <Geth> ¦ rakudo/scientific-notation-using-div_In: 53c833e0e5 | pmurias++ | src/Perl6/Actions.nqp

[16:06] <Geth> ¦ rakudo/scientific-notation-using-div_In: Parse scientific notation numbers using div_In

[16:06] <Geth> ¦ rakudo/scientific-notation-using-div_In: review: https://github.com/rakudo/rakudo/commit/53c833e0e5

[16:07] <pmurias> Zoffix: if you do you can the moar backend can use the scientific notation parsing fix I'll use on the js backend

[16:08] <Zoffix> |4d23h if you do you can the moar backend can use the scientific notation parsing fix I'll use on the js backend : https://github.com/rakudo/rakudo/commit/53c833e0e5

[16:08] <ZofBot> Zoffix, Will remind you on 2018-03-24T11:08:23.014514-04:00 about if you do you can the moar backend can use the scientific notation parsing fix I'll use on the js backend : https://github.com/rakudo/rakudo/commit/53c833e0e5

[16:08] <Zoffix> noted

[16:10] <Geth> ¦ rakudo/js: 945fdd6ee9 | pmurias++ | src/Perl6/Actions.nqp

[16:10] <Geth> ¦ rakudo/js: Parse scientific notation numbers using div_In

[16:10] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/945fdd6ee9

[17:11] <Geth> ¦ rakudo: cecaacb520 | (Elizabeth Mattijsen)++ | 9 files

[17:11] <Geth> ¦ rakudo: Fix all comment references to .pm files in setting

[17:11] <Geth> ¦ rakudo:

[17:11] <Geth> ¦ rakudo: Fixes GH #1627

[17:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cecaacb520

[17:11] <synopsebot> RAKUDO#1627 [open]: https://github.com/rakudo/rakudo/issues/1627 [LHF] Missing bits for .pm → .pm6 rename

[17:11] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[17:12] <Geth> ¦ rakudo: a0ee718db3 | (Zoffix Znet)++ | src/core/List.pm6

[17:12] <Geth> ¦ rakudo: (no changelog) Fix &combinations(n); b2gills++ for code review

[17:12] <Geth> ¦ rakudo:

[17:12] <Geth> ¦ rakudo: Feature was added in earlier commit[^1], but calls method form

[17:12] <Geth> ¦ rakudo: of combinations instead of passing through the subs again, to

[17:12] <Geth> ¦ rakudo: differentiate between Iterable/Int source. Fix by doing just that.

[17:12] <Geth> ¦ rakudo:

[17:12] <Geth> ¦ rakudo: [1] https://github.com/rakudo/rakudo/commit/29dcde102601074b8a95f5e6ea4cd5b059c7adb6

[17:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a0ee718db3

[17:14] <Geth> ¦ roast: 928b4b9bda | (Zoffix Znet)++ | S32-list/combinations.t

[17:14] <Geth> ¦ roast: Cover &combinations(n)

[17:14] <Geth> ¦ roast:

[17:14] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/a0ee718db3

[17:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/928b4b9bda

[17:29] <japhb> `time perl6 -e ''` seems to be faster (but also more variable) now.  Instead of minimum millisecond times in the 140s, it's now down in the 90's ... but doing it repeatedly shows some in the 160's (which could just be coincidences with local load, this is my workstation, but if replicable may indicate a bimodal startup time distribution).

[17:30] <japhb> .oO( replicalizable )

[18:19] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fix all comment references to .pm files in setting

[18:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/355469981 https://github.com/rakudo/rakudo/compare/29dcde102601...cecaacb52031

[18:56] <samcv> release++

[18:59] <AlexDaniel> yes-yes, (release managers)++ :)

[19:08] <travis-ci> Rakudo build passed. Zoffix Znet '(no changelog) Fix &combinations(n); b2gills++ for code review

[19:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/355470599 https://github.com/rakudo/rakudo/compare/cecaacb52031...a0ee718db34b

[20:22] <Geth> ¦ nqp: a2f6656705 | (Stefan Seifert)++ | 2 files

[20:22] <Geth> ¦ nqp: Make build of NQP modules reproducible

[20:22] <Geth> ¦ nqp:

[20:22] <Geth> ¦ nqp: By replacing timestamps in the compilation unit's id with a counter and in

[20:22] <Geth> ¦ nqp: construction of unique alt_nfs ids with the compilation unit's id, we get

[20:22] <Geth> ¦ nqp: reproducible builds. Simple rebuilds without changes to the source will no

[20:22] <Geth> ¦ nqp: longer lead to "Missing or wrong version of dependency" messages.

[20:22] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a2f6656705

[20:24] <lizmat> Q: is the module for remote debugging already released to CPAN?  If so, what is its name ?

[20:35] <lizmat> notable: weekly

[20:35] <notable6> lizmat, 6 notes: https://gist.github.com/a0e48f297633413d41c32396bfa34475

[20:38] <travis-ci> NQP build failed. Stefan Seifert 'Make build of NQP modules reproducible

[20:38] <travis-ci> https://travis-ci.org/perl6/nqp/builds/355553636 https://github.com/perl6/nqp/compare/b0d57e1302d2...a2f66567052e

[20:42] <lizmat> pmurias: what are "source maps" ?

[20:44] <FROGGS> lizmat: it is a reversal mapping file of a minified/compressed javascript to its original source file

[20:44] <FROGGS> so you can ship a minified version for performance reason, but if you need to debug you get actual line numbers

[20:45] <lizmat> and I guess the minified version is the "precomped" version on the JS backend

[20:48] <FROGGS> not sure... I'd think that precompiling would involve more than just minifying

[20:48] <FROGGS> like bounded serialization and such

[20:48] <lizmat> does Javascript have a non-textual binary representation ?

[20:48] <FROGGS> no

[20:49] <lizmat> but precompiling would produce minified code, I would assume ?

[20:50] <FROGGS> I very much think so, yes

[20:53] <lizmat> is it me, or has Twitter been really silent wrt Perl 6 in the past week ?

[20:54] <FROGGS> I can't tell, I don't have a twitter account

[21:46] <jnthn> lizmat: http://modules.perl6.org/search/?q=MoarVM

[21:47] <lizmat> jnthn++

[21:48] <lizmat> ah, it's only in the ecosystem, not on CPAN ??

[21:49] <jnthn> Yeah, looks like it's been added that way for now

[21:50] <jnthn> Probably makes sense for things at an early stage; lowers the cost of making fixes available.

[21:51] <jnthn> A bunch of my things are still done the github way also, though I'm gradually shuffling them CPANwards when I have other reason to touch them :)

[22:06] <timotimo> i'm to blame for the non-cpanyness of the module

[22:13] <lizmat> timotimo: no worries

[22:30] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/03/19/2018-12-remotely-edument/

[22:34] <timotimo> lizmat: the MSVC stuff was just making sure the debugserver could build on windows, so not really a notable change IMO

[22:34] <lizmat> it was notable work, no ?

[22:35] <lizmat> and we want the debugserver to also run on Windows, right ?

[22:35] <timotimo> it makes it sound like something didn't work on windows before

[22:35] <timotimo> but everything built fine on MSVC before the debugserver was merged

[22:35] <lizmat> ah, ok, I'll refine it to the debugserver

[22:35] <timotimo> also, the debugserver was fixed to work with msvc before the debugserver got merged ;)

[22:36] <lizmat> but it only became visible then, right?

[22:36] <lizmat> I mean sometimes things get merged from weeks ago

[22:37] <lizmat> I always take the time they became visible to the general public as the time to report on them

[22:37] <lizmat> otherwise it gets very confusing, I would think

[22:37] <timotimo> i understand it like this: there were bugs in the debugserver all the time, i fixed almost all of them. should every fix there be reported on? i'd say no

[22:38] <lizmat> "Timo Paulssen worked on further developing / debugging the new remote debugging support."

[22:38] <lizmat> that better ?

[22:39] <timotimo> that sounds a little misleading, because i actually made the remote debugging support completely :)

[22:42] <lizmat> Timo Paulssen created the initial version of the new remote debugging support for MoarVM over the past months, and he continued development / debugging the past week.

[22:42] <lizmat> timotimo: ^^^

[22:42] <timotimo> that sounds pretty clear

[22:43] <lizmat> so updated...

[22:44] <timotimo> thank you kindly

[22:44] <lizmat> yw, timotimo++  # great work!

[22:45] <timotimo> <3

[22:51] * lizmat gets some shuteye!

[23:28] <jnthn> lizmat++ # weekly

[23:34] <pmurias> lizmat: source maps contain the info which line of compile JavaScript is which line of input Perl 6
