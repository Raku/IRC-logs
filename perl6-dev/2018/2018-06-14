[00:53] *** gfldex joined
[02:57] *** BenGoldberg joined
[05:02] <samcv> hmm in nqp: my $foo = 'hi'; die() if !$foo is 8.5x slower than `unless $foo`

[05:20] *** BenGoldberg left
[05:42] *** skids left
[05:48] <nine> jnthn, lizmat, Zoffix: exporting phasers is quite necessary in some situations: https://github.com/niner/Inline-Perl5/blob/master/lib/Inline/Perl5.pm6#L966

[05:48] <nine> It's also how I hope to be able to make Inline::Perl5 users precompilable at some point

[06:22] <lizmat> perhaps if the EXPORT sub exports a key such as 'LEAVE' and its value is a Callable, the exporter should take that as a cue to do an $*W.add_phaser ?

[06:23] <lizmat> with the name returned ?

[06:23] <lizmat> so you could also do a ENTER phaser :-)

[06:23] <lizmat> Files=1239, Tests=76361, 319 wallclock secs (15.65 usr  5.39 sys + 2212.66 cusr 223.27 csys = 2456.97 CPU)

[06:23] <lizmat> breakfast&

[06:24] <nine> lizmat: we could also support EXPORTPHASER in addition to EXPORT and EXPORTHOW

[06:54] *** robertle joined
[07:12] *** AlexDaniel left
[07:13] *** brrt joined
[07:26] *** [TuxCM] joined
[08:00] <[TuxCM]> Rakudo version 2018.05-86-g874ead515 - MoarVM version 2018.05-123-ge485ab338

[08:00] <[TuxCM]> csv-test-xs-20      0.446 -  0.448

[08:00] <[TuxCM]> csv-ip5xs           0.896 -  0.902

[08:00] <[TuxCM]> test-t --race       0.954 -  0.956

[08:00] <[TuxCM]> test-t              2.251 -  2.304

[08:00] <[TuxCM]> csv-ip5xs-20        7.272 -  7.330

[08:00] <[TuxCM]> test                7.741 -  8.642

[08:00] <[TuxCM]> test-t-20 --race   14.138 - 14.609

[08:00] <[TuxCM]> csv-parser         23.370 - 23.499

[08:00] <[TuxCM]> test-t-20          40.174 - 41.167

[08:01] *** ufobat joined
[08:01] <[TuxCM]> plus this: https://gist.github.com/Tux/8fd4d7866d45537847c8860cd2311450

[08:02] <lizmat> when did that happen ?

[08:03] <[TuxCM]> csv-ip5pp now fails

[08:03] <[TuxCM]> no Idea. I'm in Spain. this ran during breakfast

[08:03] <lizmat> nine: ^^^

[08:10] *** [TuxCM] left
[08:41] <lizmat> jnthn: any comments on http://modules.perl6.org/dist/FINALIZER:cpan:ELIZABETH/lib/FINALIZER.pm6 ?

[08:42] <lizmat> I plan to use that a lot in the future, and push its use in the ecosystem (e.g. DBIish)

[09:30] <jnthn> lizmat: Well, it ain't threadsafe for one

[09:31] <jnthn> Also, doesn't it mean that if a module uses it, but the calling program doesn't, then objects registered become impossible to GC until program exit?

[09:31] <jnthn> That'd be *worse* than the current situation

[09:33] <lizmat> jnthn: which part do you not consider to be threadsafe?  the .add_phaser bit ?

[09:34] <lizmat> but yes, any objects registered will not be collectable until program exit

[09:34] <lizmat> unless the user adds some "use FINALIZER" in some inner scope

[09:35] <lizmat> of course, if the user does an explicit $dbh.close, the module should maybe unregister  hmmm

[09:42] *** brrt left
[09:42] <jnthn> Yeah, the action-at-a-distance bothers me a bit. What I'd been more expecting us to do is have some kind of construct like `closing some-operation() -> $handle { ...code here... }`

[09:42] <jnthn> With a better name :)

[09:43] <jnthn> And it would automatically call some method on scope exit

[09:44] <lizmat> well, that could be an ecosystem module (like FINALIZER) if it were able to export a LEAVE phaser, no ?

[09:44] <lizmat> FWIW, the action-at-a-distance is what is intended here

[09:50] <jnthn> I really don't like that if you don't care to use it, but a module you use is using it, then you're in trouble.

[09:50] <jnthn> That's just too intrusive.

[09:50] <jnthn> I'd probably be very reluctant to depend on any module using this as a result

[09:52] <lizmat> if a module would only register *if* there is $*FINALIZER available?

[09:53] <lizmat> because that would imply the user wants finalizations?

[09:53] <jnthn> That'd probably be better

[09:57] <jnthn> Maybe I should also draft up some language-level proposals for this kind of thing.

[10:21] *** brrt joined
[10:23] *** AlexDaniel joined
[10:35] <lizmat> jnthn: that would be cool  :)

[10:37] *** brrt left
[10:41] *** AlexDaniel left
[10:41] *** AlexDaniel joined
[10:47] *** robertle left
[10:49] <AlexDaniel> lizmat: hm, what changed exactly regarding `pack`?

[10:49] <AlexDaniel> lizmat: I see some modules failing because of that, but I don't understand…

[10:50] <AlexDaniel> c: 2018.05 say pack('n', 25)

[10:50] <committable6> AlexDaniel, ¦2018.05: «Use of the 'pack' function is experimental; please 'use experimental :pack'␤  in block <unit> at /tmp/LttlZzQ96t line 1␤␤ «exit code = 1»»

[10:50] <AlexDaniel> c: HEAD say pack('n', 25)

[10:50] <committable6> AlexDaniel, https://gist.github.com/622ec2b7bcabcf1345397b2998b83190

[10:50] <lizmat> I moved pack out the setting into the 'experimental' module

[10:51] <AlexDaniel> so now it's a compile-time error?

[10:52] <AlexDaniel> so, for example, FastCGI module is using pack, but it's tests were fine on 2018.05

[10:52] <AlexDaniel> is it simply because tests simply never reached lines with `pack`?

[11:00] <lizmat> AlexDaniel: are the tests doing 'use experimental :pack' ?

[11:01] <AlexDaniel> no

[11:01] <lizmat> hmm... are they just doing Blob.unpack ?

[11:02] <AlexDaniel> example: https://github.com/supernovus/perl6-fastcgi/blob/d3abc942cba8dead2e3540236a13e36df28f4f29/lib/FastCGI/Protocol.pm6#L244

[11:04] <lizmat> AlexDaniel: I think I have a golf:

[11:04] <lizmat> m: Buf.new(1,2,3).unpack("C3")

[11:04] <camelia> rakudo-moar 874ead515: OUTPUT: «Cannot call method 'defined' on a null object␤  in block <unit> at <tmp> line 1␤␤»

[11:05] <AlexDaniel> well, that's something to be fixed, but still a different issue as far as I can see

[11:05] <AlexDaniel> but I guess these modules simply need `use experimental :pack`

[11:06] <lizmat> yes, they do

[11:06] <lizmat> BTW, testing a fix for above issue

[11:09] <AlexDaniel> “No such method 'generate-samples' for invocant of type 'IntStr'. Did you mean 'generate-samples'?”

[11:10] * AlexDaniel squints

[11:21] <Geth> ¦ rakudo: 2fa08d5e6f | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[11:21] <Geth> ¦ rakudo: Fix problem with Buf.unpack without 'use experimental'

[11:21] <Geth> ¦ rakudo: 

[11:21] <Geth> ¦ rakudo: Apparently, 'with' cannot handle nqp::null values, so this caused a

[11:21] <Geth> ¦ rakudo: "Cannot call method 'defined' on a null object" error rather than

[11:21] <Geth> ¦ rakudo: complain about 'use experimental :pack' not being loaded.

[11:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2fa08d5e6f

[11:22] <lizmat> AlexDaniel: ^^^  should now properly complain if FastCGI didn't to 'use experimental'

[11:22] <AlexDaniel> thanks

[11:22] <AlexDaniel> I'll submit some pull requests to modules

[11:34] <AlexDaniel> ahh I see now

[11:34] * AlexDaniel is blind

[11:35] <AlexDaniel> FastCGI doesn't even have tests, it was failing on installation

[11:35] <AlexDaniel> so that's why

[11:40] <lizmat> afk for a few hours&

[12:32] <Geth> ¦ rakudo/rescalar: a92ce28b62 | (Jonathan Worthington)++ | src/vm/jvm/runtime/org/perl6/rakudo/RakOps.java

[12:32] <Geth> ¦ rakudo/rescalar: Remove dead code in JVM ops file

[12:32] <Geth> ¦ rakudo/rescalar: 

[12:32] <Geth> ¦ rakudo/rescalar: This supported p6scalarfromdesc, which is now done as a desugar.

[12:32] <Geth> ¦ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/a92ce28b62

[12:33] <AlexDaniel> https://github.com/supernovus/perl6-fastcgi/pull/10 https://github.com/samgwise/Net-OSC/pull/4 https://github.com/retupmoca/P6-Net-SOCKS/pull/4

[12:33] <AlexDaniel> that's it

[12:33] <AlexDaniel> Web, Web::App::Ballet, Web::App::MVC depend on FastCGI unfortunately

[12:34] <AlexDaniel> I mean, of course it's fine to depend on FastCGI, it's just that the PR needs to be merged to unburn them :)

[12:35] <Geth> ¦ rakudo/rescalar: 384463ad19 | (Jonathan Worthington)++ | tools/build/Makefile-JVM.in

[12:35] <Geth> ¦ rakudo/rescalar: Bump JVM memory limit to survive setting build

[12:35] <Geth> ¦ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/384463ad19

[12:35] <jnthn> bartolin_++ for suggesting the second of those :)

[12:37] <Geth> ¦ rakudo/rescalar: 1b584e1f3b | (Jonathan Worthington)++ | 2 files

[12:37] <Geth> ¦ rakudo/rescalar: Update JVM backend with the descriptor rw removal

[12:37] <Geth> ¦ rakudo/rescalar: 

[12:37] <Geth> ¦ rakudo/rescalar: The presence of a descriptor now implies rw without any additional

[12:37] <Geth> ¦ rakudo/rescalar: flag checks.

[12:37] <Geth> ¦ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/1b584e1f3b

[12:41] <Geth> ¦ nqp: e1ff93d5aa | (Jonathan Worthington)++ | src/vm/jvm/QAST/Compiler.nqp

[12:41] <Geth> ¦ nqp: Stub new atomic ops on the JVM backend

[12:41] <Geth> ¦ nqp: 

[12:41] <Geth> ¦ nqp: These are not yet implemented, but stubbing them is enough to get the

[12:41] <Geth> ¦ nqp: compilation of Rakudo on JVM in the Scalar refactoring branch to build,

[12:41] <Geth> ¦ nqp: so the simpler parts to update can be handled first.

[12:41] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e1ff93d5aa

[13:12] <Geth> ¦ rakudo/rescalar: e3adaf83d8 | (Jonathan Worthington)++ | 2 files

[13:12] <Geth> ¦ rakudo/rescalar: Switch Scalar container spec to run the NQP code

[13:12] <Geth> ¦ rakudo/rescalar: 

[13:12] <Geth> ¦ rakudo/rescalar: This seems to basically work, although the atomics won't until some

[13:12] <Geth> ¦ rakudo/rescalar: new ops are properly implemented for NQP JVM, and there's also some

[13:12] <Geth> ¦ rakudo/rescalar: kind of regression to hunt down involving `is copy` (which relates to

[13:12] <Geth> ¦ rakudo/rescalar: the descriptor change).

[13:12] <Geth> ¦ rakudo/rescalar: review: https://github.com/rakudo/rakudo/commit/e3adaf83d8

[13:22] *** AlexDaniel left
[13:29] *** robertle joined
[13:52] *** skids joined
[14:36] *** MasterDuke left
[15:27] *** robertle left
[15:33] <Geth> ¦ nqp/nqp-in-the-browser: 11 commits pushed by (Paweł Murias)++

[15:33] <Geth> ¦ nqp/nqp-in-the-browser: review: https://github.com/perl6/nqp/compare/d43fd9059998^...f91f8e2d9533

[15:36] *** perlpilot_ joined
[15:36] *** perlpilot_ is now known as perlpilot

[15:39] <japhb> Well that's an intriguing branch name ....

[15:47] *** ExtraCrispy left
[15:52] *** robertle joined
[15:55] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1921: Issue 1918: Fix for .assuming sub with **@ and +@ params

[15:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1921

[16:00] *** AlexDaniel joined
[16:10] <Geth> ¦ rakudo/post-release-2018.06: 93a8ec6655 | (Jeremy Studer)++ | src/core/Parameter.pm6

[16:10] <Geth> ¦ rakudo/post-release-2018.06: Modify Parameter's positional to rm slurpies

[16:10] <Geth> ¦ rakudo/post-release-2018.06: 

[16:10] <Geth> ¦ rakudo/post-release-2018.06: Add slurpy_lol (**@) and slurpy_onearg (+@) to param types that are not

[16:10] <Geth> ¦ rakudo/post-release-2018.06: considered positional.

[16:10] <Geth> ¦ rakudo/post-release-2018.06: 

[16:10] <Geth> ¦ rakudo/post-release-2018.06: This caused an issue when using '.assuming'. The fact that they were

[16:10] <Geth> ¦ rakudo/post-release-2018.06: considered both positional and slurpy caused them

[16:10] <Geth> ¦ rakudo/post-release-2018.06: <…commit message has 6 more lines…>

[16:10] <Geth> ¦ rakudo/post-release-2018.06: review: https://github.com/rakudo/rakudo/commit/93a8ec6655

[16:10] <Geth> ¦ rakudo/post-release-2018.06: 0ef7109e7e | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Parameter.pm6

[16:10] <Geth> ¦ rakudo/post-release-2018.06: Merge pull request #1921 from jstuder-gh/param_all_slurpies_not_positional

[16:10] <Geth> ¦ rakudo/post-release-2018.06: 

[16:10] <Geth> ¦ rakudo/post-release-2018.06: Issue 1918: Fix for .assuming sub with **@ and +@ params

[16:10] <Geth> ¦ rakudo/post-release-2018.06: review: https://github.com/rakudo/rakudo/commit/0ef7109e7e

[16:32] *** perlpilot left
[17:08] *** sivoais left
[17:10] *** sivoais_ joined
[17:12] *** sivoais_ left
[17:16] *** sivoais joined
[17:19] <AlexDaniel> hm, if I see a comment again saying that toaster is an example of how we introduce many breaking changes, I'll revert back to reviewing the results locally without publishing them

[17:19] <AlexDaniel> or maybe I should do another redundant run on the actual monthly release to show that actually everything is green

[17:20] <AlexDaniel> ( context: https://github.com/perl6/user-experience/issues/23#issuecomment-397371514 )

[17:23] <japhb> AlexDaniel: Yes, you should have separate displays of the most recent monthly (+point release), separate from the "blead" view.  And the blead view should be well-labeled as such, and NOT the default thing new people see.

[17:23] *** [TuxCM] joined
[17:24] <japhb> .ask nine Did Inline::Perl5 intentionally start requiring Moose?  (Noticed it no longer passes testing in my "rebuild the world and install all my favorite modules" script.)

[17:24] <yoleaux> japhb: I'll pass your message to nine.

[17:25] <AlexDaniel> I see. I guess toaster indeed sends a wrong message to anyone who stumbles upon it

[17:26] <AlexDaniel> “16 modules got burnt” – that's a message to the release manager, somewhat irrelevant to anybody else

[17:27] <AlexDaniel> OK I hope I'll have time to work on that after the release

[17:27] <AlexDaniel> there's also a way to make it faster, I think

[17:30] <AlexDaniel> japhb: thanks

[17:48] <japhb> AlexDaniel: My advice is as usual worth what you paid for it.  ;-)

[18:10] *** perlpilot joined
[18:19] <timotimo> "16 modules preventing a rakudo release"

[18:24] <AlexDaniel> quickly changed it to that, yeah

[18:42] *** perlpilot left
[18:46] <nine> japhb: nope

[18:46] <yoleaux> 17:24Z <japhb> nine: Did Inline::Perl5 intentionally start requiring Moose?  (Noticed it no longer passes testing in my "rebuild the world and install all my favorite modules" script.)

[18:47] <AlexDaniel> ugexe makes a good point that people probably upgrade their rakudo without upgrading installed modules

[18:49] <AlexDaniel> which makes me wonder what exactly should be done with modules that rely on buggy or experimental stuff

[18:49] <nine> AlexDaniel: I know I do. Also while I'm usually not far behind in packaging rakudo for openSUSE, I haven't packaged new versions of modules yet.

[18:51] <AlexDaniel> if we say that we should wait before actually introducing a change like that, then how much?

[18:51] <AlexDaniel> and should we wait at all

[18:51] <AlexDaniel> let's take FastCGI and the change to experimental pack as an example

[18:52] <lizmat> AlexDaniel: so what was the problem there in the end ?

[18:53] <AlexDaniel> lizmat: if I understand things correctly, then previously it was a run time error

[18:53] <AlexDaniel> c: 2018.05 if False { say pack('n', 25) }

[18:53] <committable6> AlexDaniel, ¦2018.05: «»

[18:53] <AlexDaniel> now it's compile time

[18:53] <AlexDaniel> c: HEAD if False { say pack('n', 25) }

[18:53] <committable6> AlexDaniel, ¦HEAD(2fa08d5): «04===SORRY!04=== Error while compiling /tmp/knA1bF9zpg␤Use of pack is experimental; please 'use experimental :pack'␤at /tmp/knA1bF9zpg:1␤------> 03if False { say pack('n', 25) }08⏏04<EOL>␤ «exit code = 1»»

[18:53] <AlexDaniel> FastCGI has no tests, so the run time issue was never noticed

[18:53] <lizmat> ah, that, yeah.  I considered that an improvement actually, mentioned it in the commit mesage

[18:54] <lizmat> so I would consider that an issue with FastCGI

[18:54] <lizmat> which apparently has not been working since Christmas 2015

[18:54] <lizmat> (as around then we added the experimentality of pack)

[18:55] <lizmat> installing ok, running no

[18:55] <lizmat> or am I missing something ?

[18:55] <AlexDaniel> that's correct, but now any user who was using FastCGI (or any of 3 modules that depend on it), once their rakudo is upgraded, will see issues (I think?)

[18:56] <AlexDaniel> I'm actually not sure… any users of FastCGI here? :)

[18:56] <lizmat> so when was this pack / unpack run then?  always, or just in some cases before?

[18:56] <lizmat> in any case, I would suggest FastCGI add an "use experimental :pack" asap  :-)

[18:58] <AlexDaniel> actually, I guess you're right, these modules were broken since the moment pack was made experimental

[18:59] <AlexDaniel> then I guess I don't have a good example 🤷

[18:59] <AlexDaniel> :)

[19:00] <AlexDaniel> I think all changes related to hash randomization were with tests

[19:01] <AlexDaniel> so even if users upgraded their rakudo, they wouldn't run module tests without upgrading the modules first

[19:01] <AlexDaniel> so that was also a non-issue

[19:01] <AlexDaniel> same goes for Num precision changes

[20:08] *** skids left
[20:31] <Geth> ¦ nqp/nqp-in-the-browser: a4f1de15a8 | (Paweł Murias)++ | 5 files

[20:31] <Geth> ¦ nqp/nqp-in-the-browser: [js] Disable stuff in the browser in an ugly manner

[20:31] <Geth> ¦ nqp/nqp-in-the-browser: 

[20:31] <Geth> ¦ nqp/nqp-in-the-browser: This allows parcel to bundle nqp::say('Hello World')

[20:31] <Geth> ¦ nqp/nqp-in-the-browser: review: https://github.com/perl6/nqp/commit/a4f1de15a8

[20:58] *** MasterDuke joined
[21:36] *** perlpilot joined
[22:24] *** robertle left
[22:59] *** [TuxCM] left
[23:04] <AlexDaniel> hm, where can I find a repo for https://modules.perl6.org/dist/DBIx::NamedQueries ?

[23:04] <AlexDaniel> fwiw the module is failing this test: https://modules.perl6.org/dist/DBIx::NamedQueries:cpan:MZIESCHA/t/04-query-fails.t#L28

[23:06] *** perlpilot left
[23:08] *** brrt joined
[23:25] <timotimo> is it because the message now gets made longer because of the longer type names?

[23:29] <AlexDaniel> # Expected: Type check failed in binding to parameter '$obj_query'; expected DBIx::NamedQueries::Query but got Queries::Write::Failtest (Queries::Write::Failt...)

[23:29] <AlexDaniel> # Got:      Type check failed in binding to parameter '$obj_query'; expected DBIx::NamedQueries::Query but got Queries::Write::Failtest (Queries::Write::Failtest.new)

[23:29] <AlexDaniel> :)

[23:30] <AlexDaniel> by the way, which commit changed that?

[23:32] * AlexDaniel 💤

[23:35] <timotimo> bisectable6: class ThisName::Is::MuchToo::LongFor::Error::Messages { }; sub foo(Int $a) { }; foo(ThisName::Is::MuchToo::LongFor::Error::Messages.new)

[23:35] <bisectable6> timotimo, Bisecting by output (old=2015.12 new=2fa08d5) because on both starting points the exit code is 1

[23:35] <bisectable6> timotimo, bisect log: https://gist.github.com/de4dd26a3907bd664f28d1ce50616309

[23:35] <bisectable6> timotimo, (2016-02-18) https://github.com/rakudo/rakudo/commit/9983c2c8434ed81c532a5706996f284283b48d0a

[23:35] <timotimo> lizmat++ # making this error message smarter

[23:45] *** brrt left
