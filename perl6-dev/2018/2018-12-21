[00:08] <japhb> I just decided to try it, and it seems to be working, thanks!

[00:17] *** dogbert17 left
[00:19] *** lucasb left
[00:24] <japhb> Yay, finally have first complete Rakudo-and-modules update in a while.

[01:51] <Geth> ¦ rakudo/release-2018.12: 38e12bda79 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[01:51] <Geth> ¦ rakudo/release-2018.12: Log all changes (+ announcement)

[01:51] <Geth> ¦ rakudo/release-2018.12: 

[01:51] <Geth> ¦ rakudo/release-2018.12: Deliberately not logged:

[01:51] <Geth> ¦ rakudo/release-2018.12: 

[01:51] <Geth> ¦ rakudo/release-2018.12: 2dbef993 adda0683 07d95bf9 31317001 e3ab2f9e a63c2ba8 212193cb

[01:51] <Geth> ¦ rakudo/release-2018.12: 543219c9 fd7f8b6d af96fbb4 91fd7cf8 9fe7d643 1d597fa5 9211b464

[01:51] <Geth> ¦ rakudo/release-2018.12: a87c27e4 19238b87 0f3c370a 5f3a955a c00aef29 e747b19a bca05ae5

[01:51] <Geth> ¦ rakudo/release-2018.12: 203487f3 41d2da09 7f3f77d4 848932df eb31db95 e96b7ffe

[01:51] <Geth> ¦ rakudo/release-2018.12: review: https://github.com/rakudo/rakudo/commit/38e12bda79

[01:51] <Geth> ¦ rakudo/release-2018.12: c73faad621 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/release_guide.pod

[01:51] <Geth> ¦ rakudo/release-2018.12: Actual date, claim next release

[01:51] <Geth> ¦ rakudo/release-2018.12: review: https://github.com/rakudo/rakudo/commit/c73faad621

[04:03] <Geth> ¦ rakudo/release-2018.12: 0b61f96927 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/release_guide.pod

[04:03] <Geth> ¦ rakudo/release-2018.12: Fix release date

[04:03] <Geth> ¦ rakudo/release-2018.12: review: https://github.com/rakudo/rakudo/commit/0b61f96927

[04:17] <timotimo> can i change something in there before release?

[04:19] <Geth> ¦ rakudo/release-2018.12: dce81aea03 | timo++ (committed using GitHub Web editor) | docs/ChangeLog

[04:19] <Geth> ¦ rakudo/release-2018.12: add a missing closing `

[04:19] <Geth> ¦ rakudo/release-2018.12: review: https://github.com/rakudo/rakudo/commit/dce81aea03

[04:19] <Geth> ¦ rakudo/release-2018.12: 104c6b6e48 | timo++ (committed using GitHub Web editor) | docs/announce/2018.12.md

[04:19] <Geth> ¦ rakudo/release-2018.12: add a missing closing ` in here as well

[04:19] <Geth> ¦ rakudo/release-2018.12: review: https://github.com/rakudo/rakudo/commit/104c6b6e48

[04:21] *** AlexDaniel left
[04:22] *** AlexDaniel joined
[04:22] *** p6bannerbot sets mode: +v AlexDaniel

[05:08] <AlexDaniel> ===> Install [FAIL] for zef:ver<0.6.0>:auth<github:ugexe>:api<0>: ===SORRY!===

[05:08] <AlexDaniel> Cannot invoke this object (REPR: Null; VMNull)

[05:08] <AlexDaniel>  

[05:08] <AlexDaniel> hmmmmmmmmm

[06:24] <AlexDaniel> interesting, it passed the second time

[06:24] <AlexDaniel> would love to know what went wrong that previous time…

[06:27] *** ufobat_ joined
[06:28] <Geth> ¦ nqp: 8a664f3149 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[06:28] <Geth> ¦ nqp: [release] Bump MoarVM revision to 2018.12

[06:28] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8a664f3149

[06:28] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.11-47-g7b1eacea9...2018.12

[06:28] <Geth> ¦ nqp: 6f0dd0d60a | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[06:28] <Geth> ¦ nqp: [release] Bump VERSION to 2018.12

[06:28] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6f0dd0d60a

[06:28] <Geth> ¦ rakudo/release-2018.12: 4b7cbd7e61 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[06:28] <Geth> ¦ rakudo/release-2018.12: [release] Bump NQP revision to 2018.12

[06:28] <Geth> ¦ rakudo/release-2018.12: review: https://github.com/rakudo/rakudo/commit/4b7cbd7e61

[06:28] <Geth> ¦ rakudo/release-2018.12: eb08bd11eb | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[06:28] <Geth> ¦ rakudo/release-2018.12: [release] Bump VERSION to 2018.12

[06:28] <Geth> ¦ rakudo/release-2018.12: review: https://github.com/rakudo/rakudo/commit/eb08bd11eb

[06:28] *** p6bannerbot sets mode: +v ufobat_

[06:31] <Geth> ¦ rakudo/master: 8 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++, timo++

[06:31] <Geth> ¦ rakudo/master: 38e12bda79 | Log all changes (+ announcement)

[06:31] <Geth> ¦ rakudo/master: c73faad621 | Actual date, claim next release

[06:31] <Geth> ¦ rakudo/master: 0b61f96927 | Fix release date

[06:31] <Geth> ¦ rakudo/master: dce81aea03 | add a missing closing `

[06:31] <Geth> ¦ rakudo/master: 104c6b6e48 | add a missing closing ` in here as well

[06:31] <Geth> ¦ rakudo/master: 4b7cbd7e61 | [release] Bump NQP revision to 2018.12

[06:31] <Geth> ¦ rakudo/master: eb08bd11eb | [release] Bump VERSION to 2018.12

[06:31] <Geth> ¦ rakudo/master: fb4e4f0db0 | Merge branch 'master' into release-2018.12

[06:31] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/d998c1eabfc4...fb4e4f0db04d

[06:31] <Geth> ¦ rakudo/master: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.11-61-gc585cc5f3...2018.12

[06:32] <AlexDaniel> timotimo: thanks for taking a look!

[06:33] <AlexDaniel> somehow I missed your question, but yes, of course!

[06:35] <AlexDaniel> undersightable6: status

[06:35] <undersightable6> AlexDaniel, OK! Working on it…

[06:36] <undersightable6> AlexDaniel, 1 error, 19 warnings: https://gist.github.com/9e3b12fc3296b2aae1f670b6ac7aa384

[06:37] <AlexDaniel> ahhh undersightable6, you silly

[06:38] <AlexDaniel> it didn't pull rakudo yet, and it looks like it never pulls nqp…

[06:42] <AlexDaniel> weekly: (writing this ahead of time in case I forget) Merry Christmas! … or Happy Diwali!? to debian users, rakudo 2018.12 is now in debian unstable (and hopefully debian testing soon), meaning that the next debian release will most likely come with v6.d-capable rakudo

[06:42] <notable6> AlexDaniel, Noted!

[06:42] <AlexDaniel> it should happen unless we introduced more big endian issues…

[07:26] *** robertle joined
[07:26] *** p6bannerbot sets mode: +v robertle

[08:06] *** dct left
[08:12] *** robertle left
[08:14] *** robertle joined
[08:15] *** p6bannerbot sets mode: +v robertle

[08:38] *** robertle left
[09:03] *** epony joined
[09:03] *** p6bannerbot sets mode: +v epony

[10:25] *** robertle joined
[10:25] *** p6bannerbot sets mode: +v robertle

[10:58] *** robertle left
[11:26] *** lizmat joined
[11:26] *** p6bannerbot sets mode: +v lizmat

[11:26] <lizmat> AlexDaniel++  # release!

[11:26] <yoleaux> 20 Dec 2018 18:51Z <japhb> lizmat: Actually, I think `my int $bits = 65; dd 1 +< $bits` ==> 2 is in fact a bug, unless we have decided +< on int has rotation semantics, rather than shift.  Otherwise it should be 0 (all 1 bits have shifted entirely off to the left, rather than reappearing on the right when they exited on the left)

[11:28] <lizmat> .tell japhb i"m not sure it's rotation semantics or masking semantics on the $bits value

[11:28] <yoleaux> lizmat: I'll pass your message to japhb.

[11:53] *** lucasb joined
[11:53] *** p6bannerbot sets mode: +v lucasb

[12:33] <lucasb> Thanks for the release you awesome team o/

[13:00] <Geth> ¦ rakudo: 45a945b5b6 | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[13:00] <Geth> ¦ rakudo: Introducing buf8/blob8.read-(u)bits/write-(u)bits

[13:00] <Geth> ¦ rakudo: 

[13:00] <Geth> ¦ rakudo: Read any sequence of bits from any *bit* position in a buffer for any number

[13:00] <Geth> ¦ rakudo: of *bits*, and interprete the result as a big-endian Int:D or UInt:D.

[13:00] <Geth> ¦ rakudo: 

[13:00] <Geth> ¦ rakudo: Write any Int:D / UInt:D value to any *bit* position in a buffer for any

[13:00] <Geth> ¦ rakudo: number of *bits*.

[13:00] <Geth> ¦ rakudo: 

[13:00] <Geth> ¦ rakudo: Does *not* use any of the new read-/write- methods, so should work on any

[13:00] <Geth> ¦ rakudo: backend that supports nqp::atpos_i and bit-shifting and masking operations.

[13:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/45a945b5b6

[13:01] <Geth> ¦ roast: c2c741668b | (Elizabeth Mattijsen)++ | S03-buf/read-write-bits.t

[13:01] <Geth> ¦ roast: Tests for blob8/buf8.read-(u)bits/write-(u)bits

[13:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c2c741668b

[13:02] <lizmat> ^^^ not added to spectest.data yet because this feature might still get reverted

[13:02] <lizmat> afk&

[13:24] <Geth> ¦ roast: 333581c9a3 | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/release-guide.md

[13:24] <Geth> ¦ roast: List VERSION File in Release Guide

[13:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/333581c9a3

[13:53] *** stmuk joined
[13:54] *** p6bannerbot sets mode: +v stmuk

[13:58] *** stmuk left
[14:43] <dogbert2_> .seen AlexDaniel

[14:43] <yoleaux> I saw AlexDaniel 06:42Z in #perl6-dev: <AlexDaniel> it should happen unless we introduced more big endian issues…

[15:02] *** Ven`` joined
[15:03] *** p6bannerbot sets mode: +v Ven``

[15:40] *** Ven`` left
[16:01] <AlexDaniel> .

[16:03] <dogbert2_> AlexDaniel: do you want a gig?

[16:03] <AlexDaniel> yes!

[16:03] <dogbert2_> ok, can you bisect 'MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 ./perl6 t/spec/S32-list/sort.t'

[16:04] <dogbert2_> problem is probably less than a week old

[16:04] <AlexDaniel> ouch

[16:04] <AlexDaniel> let's see…

[16:04] <dogbert2_> it should SEGV

[16:05] <AlexDaniel> c: HEAD MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 run <perl6 sandbox/roastt/spec/S32-list/sort.t> for ^5

[16:05] <committable6> AlexDaniel, https://gist.github.com/4b74ff2b3bf899c3df9a55353a519b9e

[16:05] <AlexDaniel> oops

[16:05] <AlexDaniel> c: MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 HEAD run <perl6 sandbox/roastt/spec/S32-list/sort.t> for ^5

[16:05] <committable6> AlexDaniel, ¦HEAD(45a945b): «Could not open sandbox/roastt/spec/S32-list/sort.t. Failed to stat file: no such file or directory␤The spawned command 'perl6' exited unsuccessfully (exit code: 1)␤  in block <unit> at /tmp/Z9JQX2zQZL line 1␤␤ «exit code = 1»»

[16:05] <AlexDaniel> c: MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 HEAD run <perl6 sandbox/roast/spec/S32-list/sort.t> for ^5

[16:05] <committable6> AlexDaniel, ¦HEAD(45a945b): «Could not open sandbox/roast/spec/S32-list/sort.t. Failed to stat file: no such file or directory␤The spawned command 'perl6' exited unsuccessfully (exit code: 1)␤  in block <unit> at /tmp/m5nvdDwEia line 1␤␤ «exit code = 1»»

[16:05] <dogbert2_> no roast installed?

[16:05] <AlexDaniel> wrong path…

[16:05] <AlexDaniel> c: MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 HEAD run <perl6 sandbox/roast/S32-list/sort.t> for ^5

[16:06] <dogbert2_> it does not fail on 32 bit systems

[16:06] <committable6> AlexDaniel, https://gist.github.com/e60bb076a9cc9e50747d77752cdbe556

[16:07] <dogbert2_> that didn't give much

[16:07] <dogbert2_> it should SEGV on test #27

[16:07] <AlexDaniel> e: chdir ‘sandbox/roast/’; run <git pull>

[16:07] <evalable6> AlexDaniel, rakudo-moar 45a945b5b: OUTPUT: «From https://github.com/perl6/roast␤   cc378eca0..333581c9a  master             -> origin/…»

[16:07] <evalable6> AlexDaniel, Full output: https://gist.github.com/273bac7089db769a73a65134ab522123

[16:08] <AlexDaniel> c: MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 HEAD run <perl6 sandbox/roast/S32-list/sort.t> for ^10

[16:08] <AlexDaniel> dogbert2_: how often does that happen?

[16:08] <dogbert2_> always for me

[16:08] <committable6> AlexDaniel, https://gist.github.com/b4a8be898ca37d9f91f004af1dfc845e

[16:09] <dogbert2_> nwc10++ got it as well, see #moarvm

[16:09] <dogbert2_> does commitable honor the env vars?

[16:10] <AlexDaniel> dogbert2_: ah there it is

[16:11] <AlexDaniel> if you look closely

[16:11] <AlexDaniel> sometimes it stops on test 26

[16:11] <AlexDaniel> just not always

[16:11] <dogbert2_> yes, for me that implies test #27 :-)

[16:12] <AlexDaniel> c: HEAD %*ENV<MVM_SPESH_NODELAY>=1; %*ENV<MVM_SPESH_BLOCKING>=1; for ^5 { exit 42 if (run <perl6 sandbox/roast/S32-list/sort.t>).signal != 0 }

[16:12] <committable6> AlexDaniel, https://gist.github.com/52002b45571042b451d7ac570549dfb9

[16:12] <AlexDaniel> bisect: old=2018.10 new=HEAD %*ENV<MVM_SPESH_NODELAY>=1; %*ENV<MVM_SPESH_BLOCKING>=1; for ^5 { exit 42 if (run <perl6 sandbox/roast/S32-list/sort.t>).signal != 0 }

[16:13] <bisectable6> AlexDaniel, Bisecting by exit signal (old=2018.10 new=45a945b). Old exit signal: 1 (SIGHUP)

[16:13] <AlexDaniel> that's… not right

[16:13] <AlexDaniel> it timed out on old revision

[16:13] <AlexDaniel> maybe it will give the right answer, but most likely not

[16:15] <dogbert2_> how could it time out

[16:15] <dogbert2_> I 'suspect' that the problem is newer than 2018.10

[16:15] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/d125099465d75d3ff9754f2a00a52f62

[16:15] <bisectable6> AlexDaniel, (2017-07-30) https://github.com/rakudo/rakudo/commit/2d007bf431c173c70bc6f964c5cb8d2da0e5bdae

[16:16] <AlexDaniel> bisect: old=2018.10 new=HEAD %*ENV<MVM_SPESH_NODELAY>=1; %*ENV<MVM_SPESH_BLOCKING>=1; for ^3 { exit 42 if (run <perl6 sandbox/roast/S32-list/sort.t>).signal != 0 }

[16:16] <AlexDaniel> that sounds about right, actually

[16:16] <bisectable6> AlexDaniel, Bisecting by exit code (old=2018.10 new=45a945b). Old exit code: 0

[16:16] <AlexDaniel> dogbert2_: it did 5 runs but the timeout is 10 seconds I think

[16:18] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/1fce2286e6aab1c35692d2b7e0ded1e7

[16:18] <bisectable6> AlexDaniel, (2018-12-11) https://github.com/rakudo/rakudo/commit/d41bc6dd245277c7c0317b7c3dc4246c737078c6

[16:19] <dogbert2_> that commit is immense

[16:20] <AlexDaniel> dogbert2_: https://github.com/rakudo/rakudo/pull/1812/commits

[16:20] <AlexDaniel> bisectable probably got confused on one of the points

[16:20] <AlexDaniel> but

[16:21] <AlexDaniel> c: 6e7893bd3a5,bfff01a55a %*ENV<MVM_SPESH_NODELAY>=1; %*ENV<MVM_SPESH_BLOCKING>=1; for ^5 { exit 42 if (run <perl6 sandbox/roast/S32-list/sort.t>).signal != 0 }

[16:22] <committable6> AlexDaniel, https://gist.github.com/49a48d9ef2745fdd160631e93cebacd7

[16:23] <AlexDaniel> dogbert2_: OK I have to run now, but TL;DR it's the result `cur-candidates` branch merge

[16:24] <AlexDaniel> possibly indirect and the actual issue can be in moar

[16:24] <dogbert2_> AlexDaniel: thx

[16:24] <AlexDaniel> but yes, it appeared yesterday, but the release was cut exactly from the commit before the merge :)

[16:25] <AlexDaniel> so plz file a ticket and mark it as a blocker, we need to fix that for the release in January

[16:25] <dogbert2_> ok, will do when I get home

[16:42] *** lucasb left
[18:19] <[Tux]> Rakudo version 2018.12-37-g45a945b5b - MoarVM version 2018.12

[18:19] <[Tux]> csv-test-xs-20      0.435 -  0.443

[18:19] <[Tux]> test-t --race       0.820 -  0.827

[18:19] <[Tux]> csv-ip5xs           0.942 -  0.960

[18:19] <[Tux]> test-t              1.834 -  1.848

[18:19] <[Tux]> csv-ip5xs-20        6.896 -  7.184

[18:19] <[Tux]> test                7.288 -  7.423

[18:19] <[Tux]> test-t-20 --race    9.511 -  9.557

[18:19] <[Tux]> csv-parser         22.970 - 23.621

[18:19] <[Tux]> test-t-20          30.329 - 30.590

[18:45] <AlexDaniel> it's either 3a68cc9 or d41bc6d

[18:45] <AlexDaniel> https://github.com/rakudo/rakudo/commit/3a68cc9 https://github.com/rakudo/rakudo/commit/d41bc6d

[18:45] <AlexDaniel> weird…

[18:46] <AlexDaniel> ok nvm ignore what I just said

[18:51] *** dogbert17 joined
[18:52] *** p6bannerbot sets mode: +v dogbert17

[18:54] <dogbert17> AlexDaniel: so which commit should I mention in the issue?

[18:59] <AlexDaniel> dogbert17: just mention cur-candidates merge, that's it

[19:02] <timotimo> o/

[19:04] <dogbert17> hi timotimo

[19:05] <AlexDaniel> dogbert17: I don't think that there's a meaningful or helpful bisect result in this case

[19:05] <AlexDaniel> for example, https://github.com/rakudo/rakudo/commit/d41bc6d is bad

[19:05] <AlexDaniel> but both of its parents are good

[19:05] <timotimo>  spesh nodelay is kind of known to be explosive, i'm not entirely sure how best to handle it with regards to priorities

[19:06] <AlexDaniel> timotimo: eh not really? IIRC the majority of roast passes with spesh nodelay

[19:07] <timotimo> wow, when did that happen

[19:07] <timotimo> cool

[19:08] <dogbert17> AlexDaniel, timotimo: https://github.com/MoarVM/MoarVM/issues/1027

[19:10] <AlexDaniel> timotimo: that's why we get these bug reports :)

[19:12] <AlexDaniel> dogbert17: btw is there a superticket with remaining nodelay segfaults?

[19:12] <AlexDaniel> I remember asking for it once, but I don't know what happened after…

[19:13] <dogbert17> I don't think so, most of the time only two tests fail but they're supposed to fail so I ignore them. I can do a run now to see where we stand.

[19:16] <AlexDaniel> these two are really annoying IMO

[19:16] <AlexDaniel> no tests should be supposed to fail…

[19:16] <dogbert17> one test which has a tendency to never complete is when using these flags is S07-slip/slip.t

[19:17] <AlexDaniel> like, it'd be nice to declare it 100% clean and then any failure that appears we can just label as a blocker automatically

[19:17] <dogbert17> s/is//

[19:32] <Geth> ¦ nqp/master: 13 commits pushed by (Paweł Murias)++

[19:32] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/6f0dd0d60a43...33f46c7d0988

[19:35] <lizmat> m: use v6.c; dd blob8.new(255,255).read-uint16(0)   # should this work or not ?  read-uint8 was added in 6.d, and not available before 6.2

[19:35] <camelia> rakudo-moar 45a945b5b: OUTPUT: «65535␤»

[19:35] <lizmat> *6.d

[19:39] <dogbert17> AlexDaniel: looks quite good, ran a stresstest and if we ignore the two 'special cases' only 5 test files had failures

[19:39] <dogbert17> onw of which is t/spec/S32-list/sort.t

[19:40] <AlexDaniel> lizmat: is there even a way to make it not work?

[19:41] <AlexDaniel> R#1289 ?

[19:41] <synopsebot> R#1289 [open]: https://github.com/rakudo/rakudo/issues/1289 [6.e] Implement a Way to Know Caller's Language

[19:41] <lizmat> AlexDaniel: not sure... my question was about correctness or not

[19:41] <dogbert17> the others are MISC/bug-coverage-stress.rakudo.moar (test #2), S02-types/isDEPRECATED.rakudo.moar (tests 8, 10-11, 13). S07-slip/slip.t and S17-procasync/nonexistent.t both hang ...

[19:42] <AlexDaniel> eh, well… usually we say that if it passes v6.c roast then it's OK

[19:42] <AlexDaniel> by that definiton you can add many things and it's “ok”

[19:43] <AlexDaniel> that's LTA but unless R#1289 is resolved I don't think there's much we can do about it

[19:43] <synopsebot> R#1289 [open]: https://github.com/rakudo/rakudo/issues/1289 [6.e] Implement a Way to Know Caller's Language

[19:44] <AlexDaniel> dogbert17: can we have a ticket for each of them and + a superticket with links? Pleeeease :)

[19:54] <Geth> ¦ nqp: da8da3fca7 | (Paweł Murias)++ | src/vm/js/Operations.nqp

[19:54] <Geth> ¦ nqp: [js] Add missing /*await*/ to nqp::chain

[19:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/da8da3fca7

[20:33] *** robertle joined
[20:33] *** p6bannerbot sets mode: +v robertle

[20:39] <japhb> .

[20:39] <yoleaux> 11:28Z <lizmat> japhb: i"m not sure it's rotation semantics or masking semantics on the $bits value

[20:42] <japhb> .tell lizmat That's a decent point, though I'm not sure why we'd use masking semantics on $bits, unless we're trying to emulate a real-world processor that does that.  To me it makes more sense to "mask" the result, so that ($int +< $large) is equivalent to ($Int +< $large) % 2**64, rather than ($Int +< ($large % 64)) % 2**64, which seems semantically needlessly complex 

[20:42] <yoleaux> japhb: I'll pass your message to lizmat.

[20:49] <timotimo> it'll also be interesting for other sizes than 64 ...

[20:57] <lizmat> .

[20:57] <yoleaux> 20:42Z <japhb> lizmat: That's a decent point, though I'm not sure why we'd use masking semantics on $bits, unless we're trying to emulate a real-world processor that does that.  To me it makes more sense to "mask" the result, so that ($int +< $large) is equivalent to ($Int +< $large) % 2**64, rather than ($Int +< ($large % 64)) % 2**64, which seems semantically needlessly complex

[20:58] <lizmat> m: say 1 +< 255 # should this really be a very big number or not ?

[20:58] <camelia> rakudo-moar 45a945b5b: OUTPUT: «57896044618658097711785492504343953926634992332820282019728792003956564819968␤»

[20:59] <timotimo> for an Int, sure

[20:59] <timotimo> you get machine-style operations with native ints and otherwise big ints

[21:00] <Geth> ¦ roast: ec149023f6 | (Elizabeth Mattijsen)++ | S03-buf/read-write-bits.t

[21:00] <Geth> ¦ roast: Add bound checks for read-(u)bits/write-(u)bits

[21:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ec149023f6

[21:03] <lizmat> then I think I don't agree with japhb 

[21:23] <japhb> lizmat: Why not?

[21:35] <lizmat> japhb: if you use a native int to indicate number of bits shift, I can totally see the result being limited to native int size

[21:36] <lizmat> if the number of bits is *not* a native int, all bets are off

[21:36] <lizmat> it's maybe too subtle, but I can live with that  :-)

[21:36] <japhb> lizmat: I'm not sure I understand.  Could you give an example of what you think should happen in each case?

[21:42] <lizmat> m: say (1 +< 65).fmt("%065b")

[21:42] <camelia> rakudo-moar 45a945b5b: OUTPUT: «100000000000000000000000000000000000000000000000000000000000000000␤»

[21:43] <lizmat> m: say (1 +< my int $ = 65).fmt("%065b")'

[21:43] <lizmat> 00000000000000000000000000000000000000000000000000000000000000010

[21:43] <camelia> rakudo-moar 45a945b5b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say (1 +< my int $ = 65).fmt("%065b")7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤   …»

[21:43] <lizmat> m: say (1 +< my int $ = 65).fmt("%065b")

[21:43] <camelia> rakudo-moar 45a945b5b: OUTPUT: «00000000000000000000000000000000000000000000000000000000000000010␤»

[21:45] <lizmat> something screwy going on here:

[21:45] <lizmat> m: say ((1 +< 31 - 1) +< my int $ = 65).fmt("%065b")    # "wraps"

[21:45] <camelia> rakudo-moar 45a945b5b: OUTPUT: «00000000000000000000000000000000011111111111111111111111111111110␤»

[21:46] <lizmat> m: say ((1 +< 32 - 1) +< my int $ = 65).fmt("%065b")  # does not wrap

[21:46] <camelia> rakudo-moar 45a945b5b: OUTPUT: «1111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000␤»

[21:46] <japhb> Yeah, that does seem goofy.

[21:46] <lizmat> so I guess the current semantics are: if both sides of +< are native values, we use masking semantics

[21:47] <lizmat> and that it incorrectly assumes it's no longer native if left hand exceeds 32 bits

[21:47] <japhb> FWIW, I think it only matters what's on the *left* side of +<, as that's the value to shift.

[21:47] <japhb> lizmat: Perhaps that's a smallint bug?

[21:47] <japhb> (At the Moar level, I mean)

[21:48] <lizmat> japhb: well there's several odd things going on:

[21:49] <japhb> As a side note: As soon as I spend a lot of time thinking about shift and rotate, I start wishing I had access to the carry flag.  But that's a WHOLE other discussion.

[21:49] * japhb is listening

[21:50] <lizmat> m: my int $a = 1 +< 63

[21:50] <camelia> rakudo-moar 45a945b5b: OUTPUT: «Cannot unbox 64 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[21:50] <lizmat> m: my uint $a = 1 +< 63

[21:50] <camelia> rakudo-moar 45a945b5b: ( no output )

[21:51] <lizmat> who cares about a signed bit in that case ?

[21:52] <lizmat> (please note I'm slightly distracted doing other stuff in between :-)

[21:52] <japhb> Yeah, if you're shifting bits around, I wouldn't think 1 +< 63 should be a problem, it should just be -(2**63) as the bits show.

