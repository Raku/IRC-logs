[03:35] <Zoffix> What exactly controls whether last line of a `for` loop gets sunk? I thought I saw something somewhere, but failing to find it now.

[03:51] <Zoffix> m: say *,129431.uniname.lc,'s',*

[03:51] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´*crickets*‚ê§¬ª

[03:51] <Zoffix> ZofBot: do you know?

[03:51] <ZofBot> Zoffix, He teased and bullied the other children in a way that is characteristic of the high-grade imbecile

[04:23] <Zoffix> nm, I think I was thinking of something else. The sinkage is done by &unwanted

[04:40] <Zoffix> m: class Foo { method sink { say "sunk" }; method foo { self } }; Foo.foo for ^1

[04:40] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´sunk‚ê§¬ª

[04:40] <Zoffix> m: class Foo { method sink { say "sunk" }; method foo { self } }; sub foo { Foo }; foo for ^1

[04:40] <camelia> rakudo-moar 7c1a6cac7: ( no output )

[04:40] <Zoffix> Wonder if there's a reason return value of subs don't get sunk of it's just an oversight

[04:49] <Zoffix> I guess we're in a for a perf drop.

[04:52] <Zoffix> m: class Foo { method sink { say "sunk" }; method foo { self } }; sub foo { Foo }; foo

[04:52] <camelia> rakudo-moar 7c1a6cac7: ( no output )

[05:46] <Zoffix> The whole "`for` is a .map" thing needs to go, I think

[05:47] <Zoffix> m: sub foo { fail }; my &b = { Failure.new }; ^1 .map: &b; my @stuff = ^1 .map: &b

[05:47] <camelia> rakudo-moar 7c1a6cac7: ( no output )

[05:48] <Zoffix> 'cause that ^ makes sense, but...

[05:48] <Zoffix> hm, maybe there's no but

[05:48] * Zoffix looks more at `&unwanted`

[05:50] <Zoffix> right no but

[05:51] <Zoffix> but some perf loss

[06:12] <AlexDaniel> reportable6: list

[06:12] <reportable6> AlexDaniel, https://gist.github.com/07a5d72ab718643833176fb57703154f

[06:13] <AlexDaniel> reportable6: 2018-02-19T00:00:00Z 2018-02-26T00:00:00Z

[06:13] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[06:14] <AlexDaniel> reportable6: 2018-02-19T00:00:00Z 2018-02-26T00:00:00Z

[06:14] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[06:14] <reportable6> AlexDaniel, https://gist.github.com/600172f8ed3508eacaaa2976e19e46ea

[06:15] <AlexDaniel> :S

[06:15] <Zoffix> ?

[06:16] <AlexDaniel> reportable6: 2018-02-19T00:00:00Z 2018-02-26T00:00:00Z

[06:16] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[06:16] <AlexDaniel> Zoffix:    [new] RT#132911 [SPAM:##] CANADA RESETTLEMENT PROVINCIAL NOMINATION PROGRAMS

[06:16] <synopsebot> RT#132911 [new]: https://rt.perl.org/Ticket/Display.html?id=132911 [SPAM:##] CANADA RESETTLEMENT PROVINCIAL NOMINATION PROGRAMS

[06:16] <AlexDaniel> reportable6: 2018-02-19T00:00:00Z 2018-02-26T00:00:00Z

[06:16] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[06:16] <Zoffix> heh

[06:16] <AlexDaniel> also it segfaults every other run :)

[06:17] <reportable6> AlexDaniel, https://gist.github.com/2138ef220cb045b15f638d61cde51016

[06:17] <AlexDaniel> o much better

[06:17] <AlexDaniel> weekly: reportable: https://gist.github.com/2138ef220cb045b15f638d61cde51016

[06:17] <notable6> AlexDaniel, Noted!

[06:18] <AlexDaniel> notable6: weekly

[06:18] <notable6> AlexDaniel, 2 notes: https://gist.github.com/17fafa0872c943866b29c5e5c858dfc9

[06:19] <Zoffix> oh god...12% perf loss with `sub foo {my $x}; { for ^14000_000 { foo }; say now - ENTER now }`

[06:19] <Zoffix> hm, OTOH that's a pretty big number of iterations

[06:40] <Zoffix> man this stuff is really iffy

[06:41] <Zoffix> m: my @result = gather { for ^2 { my @b = 1 xx 4; take (@b.shift xx 2) xx 2 } }; @result.map(*.eager).eager

[06:41] <camelia> rakudo-moar 7c1a6cac7: ( no output )

[06:41] <Zoffix> One of the tests uses that and with my patch crashes, but....

[06:41] <Zoffix> m: my @result = gather { for ^2 { my @b = 1 xx 4; ((@b.shift xx 2) xx 2).take } }; @result.map(*.eager).eager

[06:41] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´The iterator of this Seq is already in use/consumed by another Seq‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[06:41] <Zoffix> It crashes the same if the method form of .take is used

[06:45] <Zoffix> the patch being the fix for R#1531

[06:45] <synopsebot> R#1531 [open]: https://github.com/rakudo/rakudo/issues/1531 Failure to sink `for` when `Z+=` used as last statement

[06:46] <Zoffix> m: class Foo { method sink { say "sunk" }; method foo { self } }; sub foo { Foo }; foo for ^1 # no sinkage

[06:46] <camelia> rakudo-moar 7c1a6cac7: ( no output )

[06:46] <Zoffix> m: class Foo { method sink { say "sunk" }; method foo { self } }; sub foo { Foo }; Foo.new for ^1 # sinkage

[06:46] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´sunk‚ê§¬ª

[06:47] <Zoffix> m: class Foo { method sink { say "sunk" }; method foo { self } }; sub foo { Foo }; Foo for ^1 # wanting about useless value

[06:47] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant value Foo in sink context (use Nil instead to suppress this warning) (line 1)‚ê§¬ª

[06:47] <Zoffix> Kinda all over the place

[06:51] <Zoffix> m: for ^1 { ^2 .map: *.say }

[06:51] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´0‚ê§1‚ê§¬ª

[06:51] <Zoffix> m: for ^1 { map *.say, ^2 }

[06:52] <camelia> rakudo-moar 7c1a6cac7: ( no output )

[06:52] <Zoffix> Depending on which style you prefer, you get different results.

[07:02] <Geth> ¬¶ roast: a8d6091d73 | (Zoffix Znet)++ | S03-operators/repeat.t

[07:02] <Geth> ¬¶ roast: Fix supporting test code

[07:02] <Geth> ¬¶ roast:

[07:02] <Geth> ¬¶ roast: `take` returns the thing it took, which in this case is the Seq

[07:02] <Geth> ¬¶ roast: object. Since it's a `for` loop and we do the "sink last statement"

[07:02] <Geth> ¬¶ roast: thing in them, that Seq ends up being sunk, which causes throwage

[07:02] <Geth> ¬¶ roast: about already-iterated Seq when we actually try to compare the result.

[07:02] <Geth> ¬¶ roast:

[07:02] <Geth> ¬¶ roast: <‚Ä¶commit message has 7 more lines‚Ä¶>

[07:02] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/a8d6091d73

[07:36] <[Tux]> Rakudo version 2018.02.1-43-g7c1a6cac7 - MoarVM version 2018.02-6-g1849ae6d6

[07:36] <[Tux]> csv-test-xs-20      0.460 -  0.472

[07:36] <[Tux]> csv-ip5xs           0.821 -  0.824

[07:36] <[Tux]> test-t --race       1.125 -  1.172

[07:36] <[Tux]> test-t              2.648 -  2.669

[07:36] <[Tux]> csv-ip5xs-20        7.752 -  7.803

[07:36] <[Tux]> test                9.387 -  9.911

[07:36] <[Tux]> csv-parser         12.645 - 13.551

[07:36] <[Tux]> test-t-20 --race   16.798 - 17.018

[07:36] <[Tux]> test-t-20          46.398 - 47.866

[07:36] <[Tux]> second double run was even slower:

[07:37] <[Tux]> 2.784 -  2.848

[08:52] <timotimo> damn, this "take returns its argument, and that may get sunk" thing doesn't sound like a thing we want

[13:00] <[Coke]> AlexDaniel: when dealing with spam tickets in RT, please hit the "S" button in the upper right hand corner. I am of the impression that this will help track spam so future tickets might not need human intervention (but maybe it just deletes them, I don't know for sure.)

[13:00] <AlexDaniel> [Coke]: I always do

[13:00] <AlexDaniel> but reportable does not track deletions so I have to delete stuff manually from its memory :(

[13:01] * AlexDaniel also deletes spam on https://fail.rakudo.party/

[13:01] <[Coke]> I was looking at https://rt.perl.org/Ticket/Display.html?id=132911 which still had the S button for me in the original grey state, and shows you as deleting it; I was able to hit the S button and turn it red.

[13:02] <AlexDaniel> hmmmmm I did exactly that

[13:02] <[Coke]> refreshing, I see it's still red, but my action isn't in the history. ah well.

[13:02] <AlexDaniel> I think it autodeletes the ticket when you press that button

[13:02] <AlexDaniel> as for why it's not showing red when someone else pressed it ‚Äì I don't know

[13:02] <[Coke]> nevermind me, then. And I'll probably tell you again in 18 months when I've forgotten. :)

[13:04] <AlexDaniel> that's ok! Although in 18 months we might need to reassess the status of the RT and how we use it :)

[13:04] <AlexDaniel> we have ‚âà3 new RT tickets every week

[13:04] <AlexDaniel> (but sometimes none)

[13:05] <AlexDaniel> and ‚âà30 new tickets every week on github

[13:05] <AlexDaniel> wait what‚Ä¶ really?

[13:06] <AlexDaniel> yes :O

[13:06] * AlexDaniel looks at https://github.com/rakudo/rakudo/wiki/Ticket-updates

[17:04] <Zoffix> timotimo: it's actually worse

[17:04] <Zoffix> m: class Foo { method sink { say "sunk" }; method foo { self } }; sub foo { Foo.new }; say @ = gather { foo.take; foo.take; }

[17:04] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´sunk‚ê§sunk‚ê§[Foo.new Foo.new]‚ê§¬ª

[17:05] <Zoffix> The result of the method form of take always gets sunk so my patch to the test suite is rather pointless

[17:05] <Zoffix> m: class Foo { method sink { say "sunk" }; method foo { self } }; sub foo { Foo.new }; say @ = gather { take foo; take foo; }

[17:05] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´sunk‚ê§sunk‚ê§[Foo.new Foo.new]‚ê§¬ª

[17:06] <Zoffix> e: @ = gather { take run "false"; Nil }

[17:06] <evalable6> Zoffix, rakudo-moar 7c1a6cac7: OUTPUT: ¬´(exit code 1) The spawned command 'false' exited unsuccessfully (exit code: 1)‚ê§  in block <unit> at /tmp/wZbyqUfDFT line 1‚ê§‚ê§¬ª

[17:12] <Zoffix> I think if we just stick it into my %nosink on Actions:233, it'll do the trick

[17:14] <Zoffix> This stuff is a house of cards, man. For one, we're just going by routine name, not by whether it's a core routine

[17:14] <Zoffix> m: sub foo { class { method sink { say "sunk" } }.new }; foo

[17:14] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´sunk‚ê§¬ª

[17:14] <Zoffix> m: sub foo { class { method sink { say "sunk" } } }; foo

[17:14] <camelia> rakudo-moar 7c1a6cac7: ( no output )

[17:14] <b2gills> m: class Foo { method sink { say "sunk" }; method foo { self } }; sub foo { Foo.new }; say @ = gather { my $ =  take foo; my $ = take foo; }

[17:14] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´[Foo.new Foo.new]‚ê§¬ª

[17:15] <Zoffix> m: class Foo { method meow { class { method sink { say "sunk" } } } }; Foo.meow for ^1

[17:15] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´sunk‚ê§¬ª

[17:15] <Zoffix> m: class Foo { method push { class { method sink { say "sunk" } } } }; Foo.push for ^1

[17:15] <camelia> rakudo-moar 7c1a6cac7: ( no output )

[17:15] <Zoffix> It just assumes that if name is "push", then it's a core .push routine

[17:16] <b2gills> That's significantly LTA

[17:22] <Zoffix> [Tux]: looks like your box was just hot. The only commits that went in since your last 2.595 time was a whitespace fix and an addition of a method that's not used in core.

[17:22] <Zoffix> s/hot/busy/;

[17:23] <|Tux|> i'll run with the same build, one^Wa few moments ...

[17:27] <Zoffix> well, if there weren't any real commits, there's probably no reason to

[17:31] <Geth> ¬¶ roast: be73087b9b | (Zoffix Znet)++ | S03-operators/repeat.t

[17:31] <Geth> ¬¶ roast: Further fix supporting test code

[17:31] <Geth> ¬¶ roast:

[17:31] <Geth> ¬¶ roast: The problem that original fix[^1] was trying to defensively account for

[17:31] <Geth> ¬¶ roast: actually already exists in `&take` calls that aren't a last statement

[17:31] <Geth> ¬¶ roast: of a `for` loop and the Seq gets sunk, exploding the test.

[17:31] <Geth> ¬¶ roast:

[17:31] <Geth> ¬¶ roast: [1] https://github.com/perl6/roast/commit/a8d6091d730b54829a9873399f79a10

[17:31] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/be73087b9b

[17:31] <Zoffix> And if stresstest is clean, I will have a commit that degrades performance.

[17:32] <timotimo> ;(

[17:34] <|Tux|> Rakudo version 2018.02.1-43-g7c1a6cac7 - MoarVM version 2018.02-6-g1849ae6d6

[17:34] <|Tux|> csv-test-xs-20      0.469 -  0.503

[17:34] <|Tux|> csv-ip5xs           0.800 -  0.821

[17:34] <|Tux|> test-t --race       1.081 -  1.099

[17:34] <|Tux|> test-t              2.547 -  2.585

[17:34] <|Tux|> csv-ip5xs-20        7.374 -  7.480

[17:34] <|Tux|> test                8.948 -  9.124

[17:34] <|Tux|> csv-parser         11.969 - 12.268

[17:34] <|Tux|> test-t-20 --race   16.297 - 16.416

[17:34] <|Tux|> test-t-20          46.263 - 46.886

[17:35] <Zoffix> By about 8%, when measured with `sub foo {my $x}; { for ^14000_000 { foo }; say now - ENTER now }`

[17:36] <timotimo> this is about sinking in for loops?

[17:36] <Zoffix> Yeah

[17:36] <Zoffix> m: sub foo { fail }; for ^1 { foo }

[17:36] <camelia> rakudo-moar 7c1a6cac7: ( no output )

[17:36] <timotimo> i have a sinking feeling

[17:36] <Zoffix> m: my $a; for ^1 { $a Z+= 1 }; say $a

[17:36] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´(Any)‚ê§¬ª

[17:36] <Zoffix> my patch fixes both of those.

[17:37] <Zoffix> ZOFVM: Files=1290, Tests=153242, 167 wallclock secs (23.63 usr  3.32 sys + 3600.45 cusr 184.90 csys = 3812.30 CPU)

[17:37] <Zoffix> man, I don't wanna push it :)

[17:37] <Zoffix> m: say 167/154

[17:37] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´1.084416‚ê§¬ª

[17:37] <Zoffix> yeah, that's my 8% sheesh

[17:39] <Zoffix> So we can save 8% of performance by training our users not to have statements that have to be sunk as last statement of `for` loops.

[17:39] <Zoffix> I mean, that's exactly how you'd expect it to behave if it were the last statement of a .map's block.

[17:39] <Zoffix> I'll PR it instead.

[17:45] <Geth> ¬¶ rakudo/fix-for-sink: 4c5b81fedb | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[17:45] <Geth> ¬¶ rakudo/fix-for-sink: Fix failure to sink last statements of `for` loops

[17:45] <Geth> ¬¶ rakudo/fix-for-sink:

[17:45] <Geth> ¬¶ rakudo/fix-for-sink: Fixes R#1531 https://github.com/rakudo/rakudo/issues/1531

[17:45] <Geth> ¬¶ rakudo/fix-for-sink: Also fixes lack of explosion in `sub foo {fail}; foo for ^1`

[17:45] <Geth> ¬¶ rakudo/fix-for-sink:

[17:45] <Geth> ¬¶ rakudo/fix-for-sink: In `for` loops, users would tend to expect last statement to get

[17:45] <Geth> ¬¶ rakudo/fix-for-sink: sunk, but because our for loops are basically `.map` calls, they

[17:45] <Geth> ¬¶ rakudo/fix-for-sink: <‚Ä¶commit message has 13 more lines‚Ä¶>

[17:45] <Geth> ¬¶ rakudo/fix-for-sink: review: https://github.com/rakudo/rakudo/commit/4c5b81fedb

[17:46] <Geth> ¬¶ rakudo: zoffixznet++ created pull request #1570: Fix failure to sink last statements of `for` loops

[17:46] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/1570

[17:53] <Zoffix> ZOFVM: Files=1290, Tests=153251, 157 wallclock secs (22.02 usr  3.30 sys + 3383.51 cusr 167.23 csys = 3576.06 CPU)

[17:53] <Zoffix> that's second stresstest on the same build

[17:55] <timotimo> that's a bunch faster

[17:57] <Zoffix> Yeah, it's not a good performance measurer because I think it's the time is of just one long test file

[17:57] <Zoffix> and it's taking random amounts of time too

[17:57] <Zoffix> m: sub wone { fail }; sub two { my $x = wone; return $x }(); say "all good"

[17:57] <camelia> rakudo-moar 7c1a6cac7: OUTPUT: ¬´all good‚ê§¬ª

[17:58] <Zoffix> Looks like ^ there's more similar failure-to-sink issues

[18:02] <Zoffix> 159 on master.

[18:02] <Zoffix> well, bug fix > perf

[18:02] * Zoffix merges

[18:04] <Geth> ¬¶ rakudo: 4c5b81fedb | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[18:04] <Geth> ¬¶ rakudo: Fix failure to sink last statements of `for` loops

[18:04] <Geth> ¬¶ rakudo:

[18:04] <Geth> ¬¶ rakudo: Fixes R#1531 https://github.com/rakudo/rakudo/issues/1531

[18:04] <Geth> ¬¶ rakudo: Also fixes lack of explosion in `sub foo {fail}; foo for ^1`

[18:04] <Geth> ¬¶ rakudo:

[18:04] <Geth> ¬¶ rakudo: In `for` loops, users would tend to expect last statement to get

[18:04] <synopsebot> R#1531 [open]: https://github.com/rakudo/rakudo/issues/1531 Failure to sink `for` when `Z+=` used as last statement

[18:04] <Geth> ¬¶ rakudo: sunk, but because our for loops are basically `.map` calls, they

[18:04] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 13 more lines‚Ä¶>

[18:04] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/4c5b81fedb

[18:04] <Geth> ¬¶ rakudo: 8a10fc17a3 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[18:04] <Geth> ¬¶ rakudo: Merge pull request #1570 from rakudo/fix-for-sink

[18:04] <Geth> ¬¶ rakudo:

[18:04] <Geth> ¬¶ rakudo: Fix failure to sink last statements of `for` loops

[18:04] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/8a10fc17a3

[18:04] <Zoffix> ZofBot: YOLO

[18:04] <ZofBot> Zoffix, ) ¬∑ ¬∑ ¬∑ ¬∑ &

[18:05] <Zoffix> might have some ecosystem fallout, with the previously-unsank stuff now sinking

[18:17] <Zoffix> 156s run :)

[18:21] <Geth> ¬¶ roast: 01b59fba66 | (Zoffix Znet)++ | S04-statements/sink.t

[18:21] <Geth> ¬¶ roast: Test sunk for sinks last statement sub calls

[18:21] <Geth> ¬¶ roast:

[18:21] <Geth> ¬¶ roast: Closes https://github.com/rakudo/rakudo/issues/1531 R#1531

[18:21] <Geth> ¬¶ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/4c5b81fedb7434b235

[18:21] <synopsebot> R#1531 [open]: https://github.com/rakudo/rakudo/issues/1531 Failure to sink `for` when `Z+=` used as last statement

[18:21] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/01b59fba66

[18:27] <Zoffix> Damn, it's still broken

[18:27] <Zoffix> m: say sub { sub foo {fail}; foo for ^1 }()

[18:27] <camelia> rakudo-moar 8a10fc17a: OUTPUT: ¬´Nil‚ê§¬ª

[18:27] <Zoffix> the `for` isn't marked as unwanted so the sink never gets put into place

[18:35] <Zoffix> Does QAST::Want as last statement of a QAST::Block ever use more than one alternative? Like, is it able to choose which alternative to use depending on where that block is called?

[18:59] <dogbert17> m: sub mv { for 1 { +"x" }; 42 }()

[18:59] <camelia> rakudo-moar 8a10fc17a: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "+" in expression "+\"x\"" in sink context (line 1)‚ê§Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5x' (indicated by ‚èè)‚ê§  in sub mv at <tmp> line 1‚ê§  in block‚Ä¶¬ª

[19:00] <dogbert17> Zoffix: did your latest changes manage to fix RT #131622 ?

[19:00] <synopsebot> RT#131622 [new]: https://rt.perl.org/Ticket/Display.html?id=131622 [BUG] Failures don't get sunk when last in for loop

[19:01] <Zoffix> yeah

[19:03] <dogbert17> cool

[19:04] <dogbert17> what about RT #132511 ?

[19:04] <synopsebot> RT#132511 [open]: https://rt.perl.org/Ticket/Display.html?id=132511 Binary assignment Z+= fails if it's the last thing in for loop

[19:05] <Zoffix> That references the same SO question my fix was for

[19:06] <dogbert17> Zoffix++ bug squashing

[19:12] <Zoffix> Filed R#1571 ... I think it'd be good to take a harder stare at our wanted/unwanted system.

[19:12] <synopsebot> R#1571 [open]: https://github.com/rakudo/rakudo/issues/1571 Flaws in implied sinkage / `&unwanted` helper

[19:21] <dogbert17> m: sub postfix:<F> (Rat $r --> FatRat) is tighter(&infix:<==>) { FatRat.new: .numerator, .denominator }; say <0/0>F == <1/0>F

[19:21] <camelia> rakudo-moar 8a10fc17a: OUTPUT: ¬´===SORRY!===‚ê§Unknown QAST node type NQPMu‚ê§¬ª

[19:26] <Zoffix> dogbert17: is there a ticket for that last one?

[19:27] <dogbert17> yes

[19:28] <dogbert17> sec

[19:28] <dogbert17> RT #130462

[19:28] <synopsebot> RT#130462 [new]: https://rt.perl.org/Ticket/Display.html?id=130462 [BUG] Unknown QAST node type NQPMu error when using `is tighter`

[19:29] <Zoffix> Ohhhh. It's the same EXPR can of worms as the other `is ...` bugs that mod ops. :(

[19:29] * Zoffix was hoping for a fun QAST bug

[19:29] <dogbert17> I have alternatives

[19:29] <dogbert17> RT #130389

[19:29] <synopsebot> RT#130389 [new]: https://rt.perl.org/Ticket/Display.html?id=130389 [BUG] constant with BEGIN block triggers QAST::Block with cuid 4 has not appeared

[19:30] <dogbert17> m: my @foo; say "abcxyd" ~~ m/@foo=(.)/; say @foo

[19:30] <camelia> rakudo-moar 8a10fc17a: OUTPUT: ¬´===SORRY!===‚ê§QAST::Block with cuid 1 has not appeared‚ê§¬ª

[19:35] <Zoffix> ZOFFLOP: t/spec/S11-modules/require.t

[19:35] <Geth> ¬¶ rakudo: eb06492213 | (Zoffix Znet)++ | src/core/IO/CatHandle.pm

[19:35] <Geth> ¬¶ rakudo: Reword IO::CatHandles.handles to workaround JVM bug

[19:35] <Geth> ¬¶ rakudo:

[19:35] <Geth> ¬¶ rakudo: https://github.com/rakudo/rakudo/commit/d5baa036faafac7e1a3dc9203dcdfb7674151b22#commitcomment-27783688

[19:35] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/eb06492213

[19:37] <Zoffix> On second though... I rather take a nap

[19:37] <Zoffix> :)

[19:39] <dogbert17> powernaps are underrated

[20:13] <Geth> ¬¶ rakudo: 838782b7d7 | (Elizabeth Mattijsen)++ | src/core/List.pm

[20:13] <Geth> ¬¶ rakudo: Make sub list/cache a multi

[20:13] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/838782b7d7

[20:37] <lizmat> notable6: weekly

[20:37] <notable6> lizmat, 2 notes: https://gist.github.com/dcce2ea14513078732c183298c31955e

[20:44] <lizmat> notable6: weekly clear

[20:44] <notable6> lizmat, Noted!

[20:45] <lizmat> notable6: weekly

[20:45] <notable6> lizmat, 3 notes: https://gist.github.com/ab46ac27d2bc9e46490b5d30594403b0

[20:45] <lizmat> notable6: help

[20:45] <notable6> lizmat, Like this: notable6: weekly rakudo is now 10x faster # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Notable

[20:45] <lizmat> notable6: clear weekly

[20:45] <notable6> lizmat, Moved existing notes to ‚Äúweekly_2018-02-26T20:45:39Z‚Äù

[21:50] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/02/26/2018-09-say-cheese-d/

[21:54] <jnthn> lizmat++

[21:55] * jnthn has, for once, prepared his talks multiple days before he gives them

[21:56] <lizmat> :-)

[22:10] <[Coke]> O_o . o O (NO WAY!)

[22:19] <Zoffix> lizmat++ # good weekly

[22:22] <Zoffix> timotimo: RE https://www.nntp.perl.org/group/perl.perl6.users/2018/02/msg4677.html  a few days ago I mentioned that it's a bug (and wanted to fix it, but was sidetracked). `say` is meant to call .gist and Junction.gist does return the `all(...)` string. Also `say` is often used to dump iffy stuff (like type objects) that don't quite stringify and having `say all()` produce absolutely no output kinda

[22:22] <Zoffix> violates its behaviour of producing a "gist" of a thing. So the change to `say` should be reverted and only .put/.print/.printf should thread them

[22:23] <Zoffix> And there are proptests that need to be changed too

[22:25] <Zoffix> c: HEAD~1000 print 1|2

[22:25] <committable6> Zoffix, ¬¶HEAD~1000: ¬´This type cannot unbox to a native string: P6opaque, Junction‚ê§  in block <unit> at /tmp/ud6AM6FR2y line 1‚ê§‚ê§ ¬´exit code = 1¬ª¬ª

[22:25] <Zoffix> 'cause this is what we were actually trying to fix at the time

[22:32] <lizmat> well, but will that fix something like:

[22:32] <lizmat> m: say "a" ~ "b"|"c"

[22:32] <camelia> rakudo-moar 838782b7d: OUTPUT: ¬´ab‚ê§c‚ê§¬ª

[22:32] <lizmat> m: say "a" ~ ("b"|"c")

[22:32] <camelia> rakudo-moar 838782b7d: OUTPUT: ¬´ab‚ê§ac‚ê§¬ª

[22:32] <lizmat> m: say ("a" ~ ("b"|"c")).perl

[22:32] <camelia> rakudo-moar 838782b7d: OUTPUT: ¬´any("ab", "ac")‚ê§¬ª

[22:33] <lizmat> perhaps Junction.gist should just be the same as Junction.perl ?

[22:33] <Zoffix> m: say ("a" ~ ("b"|"c")).gist

[22:33] <camelia> rakudo-moar 838782b7d: OUTPUT: ¬´any(ab, ac)‚ê§¬ª

[22:33] <Zoffix> Right now say(Junction) doesn't use Junction.gist

[22:34] <Zoffix> m: dd "a" ~ ("b"|"c")

[22:34] <camelia> rakudo-moar 838782b7d: OUTPUT: ¬´any("ab", "ac")‚ê§¬ª

[22:34] <lizmat> aah

[22:34] <lizmat> ok

[22:35] <lizmat> still I think this is a bad idea

[22:35] <Zoffix> lizmat: why?

[22:36] <lizmat> m: my $j = any(<a b c>); say "foo$j"  # you want this to thread

[22:36] <camelia> rakudo-moar 838782b7d: OUTPUT: ¬´fooa‚ê§foob‚ê§fooc‚ê§¬ª

[22:36] <lizmat> with your proposal, it would say "any("fooa", "foob", "fooc")"

[22:37] <Zoffix> lizmat: why do I want that to thread? I want the .gist of an object, which in this case is a Junction. If I want to thread and print three strings, I'll use `put`

[22:38] <lizmat> it feels to me that it is magic that saying a Junction won't thread

[22:38] <lizmat> a  bit of a WAT

[22:38] <lizmat> and not a DWIM

[22:39] <lizmat> it makes the use of Junctions inconsistent, is my feeling

[22:39] <lizmat> (gut feeling)

[22:39] <lizmat> if you *know* it's going to be a Junction and you're using "say" for debugging, use dd

[22:40] <Zoffix> The DWIM here is to print the .gist. In fact, the magic here is that Junction threads, since it shouldn't as there is a Mu candidate for say.

[22:40] <lizmat> m: my $j = any(<a b c>); dd "foo$j"

[22:40] <camelia> rakudo-moar 838782b7d: OUTPUT: ¬´any("fooa", "foob", "fooc")‚ê§¬ª

[22:40] <Zoffix> lizmat: but say "prints the gist". In this case it doesn't

[22:41] <lizmat> is there a Mu candidate for say ?

[22:41] <Zoffix> It only benefits the people who abuse `say` and use it instead of using `put`.

[22:41] <Zoffix> m: say Mu

[22:41] <camelia> rakudo-moar 838782b7d: OUTPUT: ¬´(Mu)‚ê§¬ª

[22:41] <Zoffix> m: [any(),any(),any(),any(),].say

[22:41] <camelia> rakudo-moar 838782b7d: OUTPUT: ¬´[any() any() any() any()]‚ê§¬ª

[22:41] <Zoffix> ^ those are actual .gist's of Junction.

[22:41] <Zoffix> m: [any(),any(),any(),any(),]¬ª.say

[22:41] <camelia> rakudo-moar 838782b7d: ( no output )

[22:42] <Zoffix> But ^ if you try to say them individually, you get no output at all, not even newlines. That's a deviation for .say's behaviour.

[22:43] <Zoffix> And I can counter-argue the "you're using "say" for debugging, use dd" with: if you want to thread and print strings, use the string-printing routines, not the .gist printing routine

[22:43] <lizmat> well, let me put it this way: what's the difference between say / put / note ?

[22:43] <lizmat> say / note output .gist, on stdout / stderr respectivly

[22:44] <lizmat> put outputs .Str on stdout

[22:44] <Zoffix> right

[22:44] <lizmat> that's easy to explain

[22:44] <Zoffix> Indeed. But that's not the current behaviour.

[22:44] <lizmat> now, we're only going to special case 'say' wrt to threading, and not "note" and "put" ?

[22:45] <Zoffix> No, we're only going to special-case `put` wrt to threading and make it thread, despite having Mu candidate. For `say` and `note` we'll remove the Junction special-case and let them output .gist of Junctions. Exactly how you described the behaviour above

[22:46] <Zoffix> and print

[22:47] <lizmat> is that @Larry's opinion ?

[22:47] <Zoffix> "<lizmat> say / note output .gist" <-- they don't right now. If I do $junction-object := 1|2; say $junction-object. I'm NOT going to get `put $junction-object.gist`

[22:47] <Zoffix> No one replied when I mentioned this a few days ago. So far the only opinions I heard are mine and yours

[22:51] <lizmat> Zoffix: well, my coverage of the channel is sketchy at best at the moment

[22:52] <Zoffix> m: dd any(42e0).Str; dd any(42e0).gist

[22:52] <camelia> rakudo-moar 838782b7d: OUTPUT: ¬´any("42")‚ê§"any(42)"‚ê§¬ª

[22:53] <lizmat> m: dd any(42e0).Str.^name

[22:53] <Zoffix> And it makes sense if thought this ^ way. Junction.Str (used by `put`) returns a Junction of strings, so if you print them they thread, but Junction.gist (supposed to be used by `say`) returns a single string, so there's no threading in output

[22:53] <camelia> rakudo-moar 838782b7d: OUTPUT: ¬´"Junction"‚ê§¬ª

[22:53] <lizmat> ok, let me sleep on that a bit

[22:54] <lizmat> :-)

[22:54] <lizmat> we have some days for the next release, right ?

[22:54] <Zoffix> Plenty

[22:54] <Zoffix> releasable6: next

[22:54] <releasable6> Zoffix, Next release in 18 days and ‚âà20 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[22:54] <lizmat> ok, then I'm calling it a day now

[22:54] <Zoffix> \o

[22:54] <lizmat> good night, #perl6-dev!

[23:04] <timotimo> Zoffix: OK, should i point that out on that thread?

[23:12] <Zoffix> timotimo: yeah, maybe a good idea to say that this is something that ain't part of 6.c spec and we're still trying to figure out what the actual behaviour should be. Using `put $junction.perl` should give the result they want before and after the changes (put $junction.gist would work right now too; dunno what are the chances of that changing)

[23:16] <AlexDaniel> heh, re https://twitter.com/andrewshitov/status/966039628049416192 ‚Äì there was an idea of making a compiler that does nothing useful except passing roast

[23:26] <Zoffix> Would be nice to have one to see how well roast defines a useful compiler :)

[23:30] <timotimo> agreed

[23:30] <Zoffix> OTOH you can just make a compiler that ignores files and prints "1..1\n1 ok" :)

[23:50] <timotimo> implement it in asm and it'll be blazing fast
