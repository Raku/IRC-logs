[00:21] <psch> Zoffix: my RT email is the same as my github

[00:22] <psch> Zoffix: re the reduce bit: in the grammar it looks easy enough to throw a typed ex; we have an explicit <!> there which could likely be a self.typed_panic

[00:24] <psch> Zoffix: the whole "can't have space" seems to be just an artifact of how infixish is implemented from what i can see right now -- it is kinda late though, and i didn't look too closely

[00:24] <psch> ...nevermind there's a look-ahead that's looking for \S+

[00:24] <psch> the typed_panic might still work...

[00:28] <Zoffix> psch: you should have bugadmin rights now

[00:30] <Zoffix> But do we have the <!> there so that Array constructor would be matching instead? So if you make it typed panic, this would begin to throw: `say [[&({($^a.uc) ~ ($^b.lc)})]], "foo", "BAR", "baz"`

[00:31] <psch> oh duh, of course

[00:31] <psch> ...it *is* late >_>

[00:31] <psch> right, <!> means "stop this rule," not "fail parsing"

[00:32] * Zoffix &

[01:26] <TimToady> hmm, so how come my $*OUT.flush isn't flushing?

[08:09] <lizmat> Files=1233, Tests=76126, 305 wallclock secs (14.75 usr  5.09 sys + 2091.00 cusr 202.29 csys = 2313.13 CPU)

[08:09] <yoleaux> 00:09Z <timotimo> lizmat: almost all the work from that commit was actually done by nine, i assume he's jusf flattened the commits and it somehow kept me as the author?

[08:32] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/01/29/2018-05-mille-plus-modules/

[08:33] <lizmat> (oops, forgot to clickbait)

[09:11] <lizmat> m: LEAVE say now - ENTER now  # whee!

[09:11] <evalable6> lizmat, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) ===SORRY!===␤Cannot reference undeclared local 'enter_result__1'␤»

[09:24] <Zoffix> TimToady: is it the default $*OUT? It's not buffered by default.

[09:26] * Zoffix would've expected `$*OUT.out-buffer = 10000; print "meow"; sleep` to buffer, but it doesn't :/

[09:28] <Zoffix> Ahhh.. The first one isn't buffered. Now I remember

[09:29] <Zoffix> `$*OUT.out-buffer = 10000; print "meow"; print "foos"; $*OUT.flush; sleep` works for me. the `"foos"` gets buffered and flush does flush it

[09:33] <Zoffix> Geth: what was up with that, brother?

[09:33] <Zoffix> ZOFVM: Files=1287, Tests=153130, 143 wallclock secs (20.42 usr  3.15 sys + 3037.94 cusr 154.28 csys = 3215.79 CPU)

[09:34] <Geth> ¦ nqp: aaf5b7865c | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[09:34] <Geth> ¦ nqp: [MoarVM Bump] Brings 18 commits

[09:34] <Geth> ¦ nqp:

[09:34] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.01-31-ge813f06...2018.01-49-g783a4f0

[09:34] <Geth> ¦ nqp: 783a4f0 don't output PHI in expr jit log

[09:34] <Geth> ¦ nqp: 8f194be better error in boxed ref for repr_id mismatch

[09:34] <Geth> ¦ nqp: c437b79 Merge pull request #790 from MasterDuke17/add_even_more_jit_templates

[09:34] <Geth> ¦ nqp: 3055deb Add tiles for binary XOR and NOT

[09:34] <Geth> ¦ nqp: <…commit message has 14 more lines…>

[09:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/aaf5b7865c

[09:34] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.01-31-ge813f06...2018.01-49-g783a4f0

[09:35] <Geth> ¦ rakudo: 4d2b54ebe8 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[09:35] <Geth> ¦ rakudo: [NQP Bump] aaf5b78 [MoarVM Bump] Brings 18 commits

[09:35] <Geth> ¦ rakudo:

[09:35] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.01-19-g769cf11...2018.01-20-gaaf5b78

[09:35] <Geth> ¦ rakudo:

[09:35] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.01-31-ge813f06...2018.01-49-g783a4f0

[09:35] <Geth> ¦ rakudo: 783a4f0 don't output PHI in expr jit log

[09:35] <Geth> ¦ rakudo: 8f194be better error in boxed ref for repr_id mismatch

[09:35] <Geth> ¦ rakudo: <…commit message has 16 more lines…>

[09:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4d2b54ebe8

[09:35] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-19-g769cf11...2018.01-20-gaaf5b78

[09:38] <lizmat> https://github.com/rakudo/rakudo/issues/1455  # LEAVE say now - ENTER now

[09:39] <lizmat> fwiw, these commits don't seem to affect test-t much

[09:40] * Zoffix grabs it

[10:07] <jnthn> About $*OUT and buffering: it's not buffered if we detect that it's a TTY

[10:07] <jnthn> Otherwise it is

[10:10] <Zoffix> jnthn: how come some blocks do this thing where they declare a lexical var and a local param and then bind the param to the lexical. Is that beneficial over than just declaring a lexical param? https://gist.github.com/zoffixznet/8091ec4ee429b875607eb022efe28172#file-p6-p6-L6-L14

[10:11] <Zoffix> That's from a dump of `1 andthen 2 andthen 3`

[10:11] <jnthn> Yes

[10:12] <jnthn> Generally, we want it in a normal register while we enforce all the various checks

[10:12] <jnthn> (type, concreteness, etc.)

[10:13] <jnthn> And only then to bind it into a lexical

[10:13] <Zoffix> Ah. Thanks.

[10:13] <jnthn> Reason being that lexicals are more difficult for something like spesh to reason about

[10:14] <jnthn> Because it has to assume (without doing further, more costly/difficult proofs) they're visible and changeable from something outside of the code it's reasoning about.

[10:14] <Zoffix> Makes sense.

[10:22] <AlexDaniel> squashable6: next

[10:22] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 2 days and ≈23 hours (2018-02-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:39] <Zoffix> nine: camelia seems ded. I see the script is running, but can't ping irc.freenode.net from its box

[10:40] <Zoffix> 13 packets transmitted, 0 received, 100% packet loss, time 12096ms

[10:43] <Zoffix> ZOFFLOP: t/spec/S17-procasync/basic.t (test #39; status code 1)

[10:45] <Geth> ¦ rakudo: 58de239cc9 | (Zoffix Znet)++ | src/Perl6/World.nqp

[10:45] <Geth> ¦ rakudo: Fix crash with ENTER nested inside LEAVE

[10:45] <Geth> ¦ rakudo:

[10:45] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1455

[10:45] <Geth> ¦ rakudo:

[10:45] <Geth> ¦ rakudo: The combination of phasers results in ENTER trying to access an out

[10:45] <Geth> ¦ rakudo: of scope local var. Fix by using a lexical var instead when

[10:45] <Geth> ¦ rakudo: constructing the QAST. The static optimizer lowers it to a local

[10:45] <Geth> ¦ rakudo: for us, whenever that's possible.

[10:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/58de239cc9

[10:47] <Geth> ¦ roast: 8e4f5edff7 | (Zoffix Znet)++ | S04-phasers/enter-leave.t

[10:47] <Geth> ¦ roast: Test nested ENTER/LEAVE does not crash

[10:47] <Geth> ¦ roast:

[10:47] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1455

[10:47] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/58de239cc9

[10:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8e4f5edff7

[10:47] <jnthn> Ah, it was generating a local. Interesting.

[10:47] <Zoffix> :)

[11:22] <dogbert17> m: for ^2 { for ^2 { say "{ (state $a)++ }" } }

[11:22] <evalable6> dogbert17, rakudo-moar 58de239cc: OUTPUT: «0␤0␤0␤0␤»

[11:23] <dogbert17> m: for ^2 { for ^2 { say  (state $a)++  } }

[11:23] <evalable6> dogbert17, rakudo-moar 58de239cc: OUTPUT: «0␤1␤0␤1␤»

[11:43] <|Tux|> Rakudo version 2018.01-58-g58de239cc - MoarVM version 2018.01-49-g783a4f07c

[11:43] <|Tux|> csv-test-xs-20      0.445 -  0.475

[11:43] <Zoffix> m: use nqp; my $out := none True; my $p := 0; if $p == 42 or $out ~~ Failure and not $out.handled {}

[11:43] <evalable6> Zoffix, rakudo-moar 58de239cc: OUTPUT: «(exit code 1) No such method 'handled' for invocant of type 'Bool'␤  in block <unit> at /tmp/0UxH6Z07r2 line 1␤␤»

[11:43] <|Tux|> csv-ip5xs           0.957 -  0.958

[11:44] <|Tux|> test-t --race       1.054 -  1.115

[11:44] <|Tux|> test-t              2.515 -  2.548

[11:44] <|Tux|> test                9.157 -  9.240

[11:44] <|Tux|> csv-ip5xs-20       10.772 - 11.100

[11:44] <|Tux|> csv-parser         11.105 - 11.561

[11:44] <|Tux|> test-t-20 --race   15.294 - 15.426

[11:44] <|Tux|> test-t-20          45.186 - 46.055

[11:44] <Zoffix> I wonder how many bugs in core we have due to that ^ :)

[11:44] <Zoffix> The assumption is a shortcurcuit would happen when condition is false, but the condition is true if a `none` junction is used with a false condition

[11:45] <Zoffix> There's one in REPL.

[11:46] <Zoffix> m: 'meow'.say with none Any

[11:46] <evalable6> Zoffix, rakudo-moar 58de239cc: OUTPUT: «meow␤»

[11:48] <dogbert17> Zoffix: thx for closing RT#127135

[11:48] <synopsebot> RT#127135 [resolved]: https://rt.perl.org/Ticket/Display.html?id=127135 [BUG] Infinite Loop with missing second arg on .subst-mutate 

[11:53] <Zoffix> Filed a code-review issue R#1456

[11:53] <synopsebot> R#1456 [open]: https://github.com/rakudo/rakudo/issues/1456 [META] Review codebase for bugs with `none` Junctions

[12:00] <Zoffix> Was my `where` clause optimizations ripped out? I thought I did something with `-> $foo where Bar {}` but doesn't seem to be applied any more

[12:00] <Zoffix> They were probably buggy when Junctions where involved

[12:01] <Zoffix> Ah, nm, still there: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Optimizer.nqp#L2181-L2222  doesn't seem to be applied when I would've expected it to

[12:04] <Zoffix> Yeah, I fucked it up

[12:04] <Zoffix> c: 2018.01,HEAD my $out := one True; -> $ where Bool|Int { say "in" }($out)

[12:04] <committable6> Zoffix, ¦2018.01: «in␤» ¦HEAD(58de239): «Internal error: inconsistent bind result␤  in block <unit> at /tmp/88QCzhz6Nw line 1␤␤ «exit code = 1»»

[12:05] <Zoffix> (post-release branch)++ :)

[12:09] <Geth> ¦ nqp: 09e59a12ae | pmurias++ | src/vm/js/nqp-runtime/runtime.js

[12:09] <Geth> ¦ nqp: [js] Make matching with :i and :m handle graphemes better

[12:09] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/09e59a12ae

[12:09] <Geth> ¦ nqp: 9bce90bb80 | pmurias++ | src/vm/js/nqp-runtime/unicode-data/NumericValue.trie

[12:09] <Geth> ¦ nqp: Add missing file

[12:09] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9bce90bb80

[12:09] <Geth> ¦ nqp: 84a8a97e10 | pmurias++ | 6 files

[12:09] <Geth> ¦ nqp: [js] Move preprocessed UCD data into a seperate npm module

[12:09] <Geth> ¦ nqp:

[12:09] <Geth> ¦ nqp: Keep less generated stuff in the repo

[12:09] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/84a8a97e10

[12:26] <Geth> ¦ rakudo: 7f07f68fdf | (Zoffix Znet)++ | 2 files

[12:26] <Geth> ¦ rakudo: Fix incorrect routine name in nodemap

[12:26] <Geth> ¦ rakudo:

[12:26] <Geth> ¦ rakudo: When throwing X::Cannot::Lazy

[12:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7f07f68fdf

[12:30] <Geth> ¦ rakudo: 2c36ab2ef9 | (Zoffix Znet)++ | 2 files

[12:30] <Geth> ¦ rakudo: Fix wrong error in REPL with none Junctions

[12:30] <Geth> ¦ rakudo:

[12:30] <Geth> ¦ rakudo: Fixes RT#132780: https://rt.perl.org/Ticket/Display.html?id=132780

[12:30] <Geth> ¦ rakudo:

[12:30] <Geth> ¦ rakudo: When the return of a statement in REPL is a `none` Junction, it'll

[12:30] <Geth> ¦ rakudo: go through the `$out ~~ Failure` and actually result in True when

[12:30] <Geth> ¦ rakudo: none of the objects in the `none` Junction are a Failure, so we

[12:30] <synopsebot> RT#132780 [new]: https://rt.perl.org/Ticket/Display.html?id=132780 Issue with one and none Junctins when passed as parameter

[12:30] <Geth> ¦ rakudo: end up calling .handled on the wrong object (subject of Issue

[12:30] <Geth> ¦ rakudo: https://github.com/rakudo/rakudo/issues/1456 )

[12:30] <Geth> ¦ rakudo:

[12:30] <Geth> ¦ rakudo: Fix by using `nqp::istype` instead that doesn't descend into Junctions.

[12:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2c36ab2ef9

[12:48] <Geth> ¦ nqp/master: 4 commits pushed by pmurias++

[12:48] <Geth> ¦ nqp/master: 2733d59686 | [js] Make radix ops check for Numeric_Type Decimal

[12:48] <Geth> ¦ nqp/master: 1904e7d8eb | Test that radix ops don't take Digit characters

[12:48] <Geth> ¦ nqp/master: 4402a1f000 | [js] Run eslint --fix

[12:48] <Geth> ¦ nqp/master: c14207e44f | [js] Fix remaining eslint errors

[12:48] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/84a8a97e10...c14207e44f

[13:26] <Geth> ¦ roast: 115be05bb9 | (Zoffix Znet)++ | S02-literals/quoting.t

[13:26] <Geth> ¦ roast: Work around highlights explosion in Atom

[13:26] <Geth> ¦ roast:

[13:26] <Geth> ¦ roast: Issue https://github.com/perl6/atom-language-perl6/issues/78

[13:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/115be05bb9

[13:48] <Zoffix> Looking at https://rt.perl.org/Ticket/Display.html?id=127226#ticket-history In `qq` the `\Y would throw; in `q` it would become `Y`. In `Q:b` `\Y` stays as `\Y`, and `\$foo` stays as `\$foo`. But what's the behaviour if we do `Q:b:s`? The `\$foo` would need to become `$foo` to match user's expectations, I think. It seems like "unrecognized backslash sequence" should be a property of `b1` tweak rather than

[13:48] <Zoffix> `qq` quoter (and it'd attain it since it `does` b1)

[13:48] <Zoffix> Currently spectesting that change, to see if there's any failign tests.

[13:51] <Zoffix> so in Q:b `\Y` would throw

[14:05] <Zoffix> ZOFFLOP: t/spec/S10-packages/basic.rakudo.moar (test 83; status 1)

[14:05] <Zoffix> ZOFFLOP: t/spec/S12-attributes/class.t (no plan; status 1)

[14:05] <Zoffix> ZOFFLOP: t/spec/S17-procasync/basic.rakudo.moar (test 39: status 1)

[14:05] <Zoffix> stresstest is clean and it makes sense to me for these to be on :b so I'm pushing :)

[14:23] <dogbert17> Zoffix++

[14:29] <Geth> ¦ rakudo: deffe54b8d | (Zoffix Znet)++ | src/Perl6/Grammar.nqp

[14:29] <Geth> ¦ rakudo: Change semantics of :b quoter tweak

[14:29] <Geth> ¦ rakudo:

[14:29] <Geth> ¦ rakudo: Fixes 127226: https://rt.perl.org/Ticket/Display.html?id=127226

[14:29] <Geth> ¦ rakudo:

[14:29] <Geth> ¦ rakudo: Make it more aggressive and behave like backslashes behave in `qq`

[14:29] <Geth> ¦ rakudo: quoter: throwing on any unrecognized backslash sequences and

[14:29] <Geth> ¦ rakudo: giving the \W itself when an unknown \W is backslashed.

[14:29] <Geth> ¦ rakudo:

[14:29] <Geth> ¦ rakudo: This makes Q:b combined with other tweaks, e.g. :s, behave more

[14:29] <Geth> ¦ rakudo: consistently in that both `Q:b/\$foo/` and `Q:b:s/\$foo/` would

[14:29] <Geth> ¦ rakudo: result in string `$foo`.

[14:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/deffe54b8d

[14:29] <Geth> ¦ roast: 284a97d31d | (Zoffix Znet)++ | S02-literals/quoting.t

[14:29] <Geth> ¦ roast: Spec Q:b more thoroughly

[14:29] <Geth> ¦ roast:

[14:29] <Geth> ¦ roast: RT#127226: https://rt.perl.org/Ticket/Display.html?id=127226

[14:29] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/deffe54b8d

[14:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/284a97d31d

[14:29] <synopsebot> RT#127226 [open]: https://rt.perl.org/Ticket/Display.html?id=127226 QUOTE does not remove backslash with adverb :b

[15:10] <Geth> ¦ roast: 9721b31af4 | (Zoffix Znet)++ | S02-literals/quoting.t

[15:10] <Geth> ¦ roast: Test :b lets one escape delimiters

[15:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9721b31af4

[16:58] <lizmat> travel&

[17:26] <stmuk> http://pl6anet.org/drop/rakudo-star-2018.01.RC0-x86_64%20(JIT).msi

[17:26] <stmuk> macOS build to follow .. I'm trying to persuade virtualsue to do it

[17:27] <stmuk> 32 bit windows msi donations gratefully received :)

[18:30] <nine> ZofBot: camelia is back but I do not have a clue about why it couldn't reach the network. Packets were going out and were properly NATed. They came back but never made it onto the virtual network. They also did not appear in iptables even with LOG targets before any of the rules. I installed (kernel) updates and rebooted the host.

[18:30] <ZofBot> nine, IIRC my CLA approval took around 6 weeks?

[18:30] <nine> Zoffix: camelia is back but I do not have a clue about why it couldn't reach the network. Packets were going out and were properly NATed. They came back but never made it onto the virtual network. They also did not appear in iptables even with LOG targets before any of the rules. I installed (kernel) updates and rebooted the host.

[18:30] <nine> moritz: ^^^

[18:57] <moritz> nine: thanks

[19:02] <TimToady> since rakudo does not yet detect whether stdin is a socket, I'm using NativeCall with recv:

[19:02] <TimToady> my ssize_t sub recv(int32 $sockfd, buf8 $buf, size_t $len, int32 $flags) is native {*}

[19:03] <TimToady> but this seems to leak somehow:

[19:03] <TimToady> whenever Supply.from-list(gather while recv(0,$buf,bufsize,0) -> $bytes { take $buf.subbuf(0,$bytes).decode }) -> $_ is copy { ... }

[19:03] <TimToady> (inside a react)

[19:03] <TimToady> is there anything in there that would imply a .cache?

[19:04] <TimToady> or is there a shorter way to write that?

[19:07] <TimToady> anyway, that whenever seems to grow more than half a gig overnight

[19:07] <TimToady> (processing syslog events from my DSL modem so I can do caller id :)

[19:08] <TimToady> ((which is a really cool way to do it, 'cuz you get your caller id before it even rings the first ring, instead of waiting till after the first ring))

[19:09] <TimToady> also, the corresponding P5 program doesn't leak, and there's nothing in my loop that is saving anything longterm

[19:10] <TimToady> so it's gotta be the whenever leaking, I think

[19:10] <TimToady> (this is running on 2018.01 star, btw)

[19:12] <TimToady> on the $*OUT.flush thing, yes, I know that stderr is unbuffered, and stdout is buffered by default.  I'm complaining that a .flush wasn't overriding the built-in buffering like it should.

[19:12] * AlexDaniel didn't know ZofBot had a CLA approved…

[19:13] <AlexDaniel> quotable6: uptime

[19:13] <quotable6> AlexDaniel, 22 hours, 49 minutes, and 44 seconds, 443.957031MiB maxrss. This is Rakudo version 2018.01-29-ga2499c90f built on MoarVM version 2018.01 implementing Perl 6.c.

[19:13] <TimToady> ZofBot is often delusional...

[19:15] <AlexDaniel> fwiw whateverables are still leaking noticeably

[19:15] <AlexDaniel> but it seems to be a bit better after 2018.01

[19:31] <TimToady> can't seem to reproduce the $*OUT.flush thing in a small test case though, so maybe it was cuz it was running in an older star at the time

[19:37] <jnthn> A .flush does flush the handle's write buffer, so not quite sure what you were observing

[19:38] <jnthn> I wonder if .from-list somehow manages to .cache

[19:39] <jnthn> Don't have a free moment to look right now, alas

[19:50] <TimToady> it's probably not the whenever, now that I monitor the growth more closely

[19:51] <TimToady> it only grows when it's actually processing a packet from the voice daemon, not when it's throwing out the packets it doesn't care about

[19:51] <TimToady> so it's something deeper in my loop that's hanging onto data somehow

[19:52] <TimToady> so nevermind for now

[20:08] <nine> Is there any way to pass an nqp::list to a Perl 6 function without any implicit conversion to List?

[20:13] <jnthn> TimToady: ok

[20:14] <jnthn> nine: No, but you can make an IterationBuffer instead of an nqp::list (both are VMArray REPR, but the former is a Perl 6 type)

[20:16] <nine> jnthn: I can make one but I can't make nqp::split give me one :) So I'll just have to pass a List instead

[20:48] <gfldex> Zoffix++ # for closing my bugreports

[23:16] <Geth> ¦ nqp: tbrowder++ created pull request #403: convert tabs to 4 spaces, correct obvious code misalignment

[23:16] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/403

[23:17] <AlexDaniel> tbrowder: what do you use to review the diffs?

[23:18] <AlexDaniel> stuff is still misaligned and I'm wondering what's preventing you to see that

[23:18] <AlexDaniel> one of the many examples: https://github.com/perl6/nqp/pull/403/files#diff-381f188f88713bba39d559f95e977efcR624

[23:19] <AlexDaniel> at least 5 lines like that

[23:20] <AlexDaniel> if you look at the stuff on github, then I *guess* you should be able to see it?

[23:20] <AlexDaniel> but it depends on what you use view the page I guess

[23:21] <AlexDaniel> to*

[23:23] <AlexDaniel> fwiw if you're using a screen reader or something, let me know and I'll stop assuming that you should be able to see it

[23:26] <tbrowder> well, i can see the few on github, but it’s easy to miss in my emacs editor’s window. i’ll close again and resubmit, without updating master, but referencing the closed pr—sorry.

[23:28] <AlexDaniel> tbrowder: why not --amend it instead?

[23:28] <AlexDaniel> you change the files, then you `git add` them

[23:28] <AlexDaniel> then instead of doing a new commit with ``git commit`` you do ``git commit --amend``

[23:28] <AlexDaniel> and this modifies your last commit

[23:29] <AlexDaniel> when you push that, it won't accept it (because you're rewriting history), so you'll have to ``git push --force``, but that's OK as long as you're not doing that in the actual repo

[23:29] <tbrowder> well, it looks ugly the way...

[23:30] <AlexDaniel> not uglier than creating a new pull request every time you need to change some small detail?

[23:31] <AlexDaniel> also, to review the diff, use something like ``git show`` to see the last commit

[23:31] <AlexDaniel> alternatively, ``git commit --staged`` if you didn't commit something yet

[23:31] <AlexDaniel> (but git added it)

[23:32] <AlexDaniel> if not added and not committed, then just ``git diff`` should do the trick

[23:59] <tbrowder> yep, good ideas, i really don’t know git in depth, obviously. if it’s ok,   git-wise, and dev-wise, could i just make the changes with the web editor?
