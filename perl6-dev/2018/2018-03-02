[00:09] <MasterDuke> jnthn, timotimo: any pointers of a good place to start for generating mbc from nqp?

[00:23] <MasterDuke> huh. is it intentional that --profile-compile and --profile-stage are missing from the rakudo --help output?

[00:40] <MasterDuke> and is running.pod no longer available on the docs site?

[00:53] <MasterDuke> timotimo: `Dynamic Optimization       5705006.99% (599262206ms)`, that number seems a little big

[00:59] <timotimo> hm, yeah, that's probably wrong. gotta check the code later, but first bedtime

[01:00] <MasterDuke> fyi, i was doing a --profile-stage=parse

[01:00] <MasterDuke> i'll gist you the code

[01:00] <timotimo> so just the core setting compilation?

[01:00] <MasterDuke> just some random code

[01:03] <MasterDuke> timotimo: https://gist.github.com/MasterDuke17/9b8fb21de6179a15795378be31d3a311

[01:08] <timotimo> is the only thing weird the dynamic opt percentage?

[01:08] <MasterDuke> seems so

[01:10] <MasterDuke> oh, and it's a big profile, 1.1mb

[01:10] <MasterDuke> if i just do a --profile, it's only 100k

[01:12] <timotimo> huh, yeah, that's strange

[01:12] <timotimo> oh, does it still do the debug output?

[01:12] <timotimo> "taking profile of a thread" or something?

[01:14] <MasterDuke> yeah

[01:14] <timotimo> i reproduce the file size at least

[01:14] <MasterDuke> same debug output as just the --profile

[01:16] <timotimo> mhm, in the --profile-stage one it has a gigantic amount of routines, among other things probably like a hundred in Exception.pm

[01:19] <timotimo> looking forward to seeing what profiler-graphviz thinks

[01:19] <MasterDuke> it almost looks like all the routines in the core setting

[01:20] <timotimo> this will be a fun one to chase down

[01:20] <timotimo> oh, no biggie, just a 15 megabyte svg file

[01:23] <timotimo> ok so ModuleLoader.nqp calls a frame called <load>, which calls <unit-outer> (of CORE.setting), which calls <unit> (also of CORE.setting) which fans out into every single routine in the core setting

[01:23] <timotimo> some of them even have some extra work

[01:24] <timotimo> core/Supply.pm@1748 calls into lines 1751, 1755, 1801, 1894, 2023, 2079, and 2185

[01:24] <timotimo> could be all nested blocks for all i know

[01:24] <timotimo> anyway, bedtime

[01:25] <timotimo> https://hack.p6c.org/~timo/weird.svgz MasterDuke

[01:25] <timotimo> (the beginning is all the way at the bottom left

[01:27] <MasterDuke> cool, later...

[01:41] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1580: Add `--profile-[compile|stage]` to `--help` output

[01:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1580

[01:50] <Geth> ¦ rakudo: d643c2cc5e | (Zoffix Znet)++ | src/core/ThreadPoolScheduler.pm

[01:50] <Geth> ¦ rakudo: Remove trailing whitespace

[01:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d643c2cc5e

[01:55] <Geth> ¦ rakudo: 3b3507396d | MasterDuke17++ | src/Perl6/Compiler.nqp

[01:55] <Geth> ¦ rakudo: Add `--profile-[compile|stage]` to `--help` output

[01:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3b3507396d

[01:55] <Geth> ¦ rakudo: 79a95b49a3 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Compiler.nqp

[01:55] <Geth> ¦ rakudo: Merge pull request #1580 from MasterDuke17/add_stage_and_compile_profiling_options_to_help_output

[01:55] <Geth> ¦ rakudo:

[01:55] <Geth> ¦ rakudo: Add `--profile-[compile|stage]` to `--help` output

[01:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/79a95b49a3

[02:08] <Geth> ¦ rakudo: 4617976d9e | (Zoffix Znet)++ | 2 files

[02:08] <Geth> ¦ rakudo: Nano-optimize supervisor thread sleep

[02:08] <Geth> ¦ rakudo:

[02:08] <Geth> ¦ rakudo: By avoiding .Bridge->.Num calls on SUPERVISION_INTERVAL

[02:08] <Geth> ¦ rakudo: every 100th of a second. Pointless speed-wise, given we're sleeping

[02:08] <Geth> ¦ rakudo: anyway, but it was polluting my Rat usage measurements data

[02:08] <Geth> ¦ rakudo: by spamming .Bridge, .Num calls into the log.

[02:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4617976d9e

[03:07] <japhb> Optimizing background threads has benefits beyond performance.  Scalability, reliability, power/battery use, ... and as you discovered, less noise when debugging.  So I say Zoffix++.  :-)

[06:16] <AlexDaniel> squashable6: next

[06:16] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in ≈3 hours (2018-03-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[11:18] <dogbert21> AlexDaniel: what's the status of https://github.com/MoarVM/MoarVM/issues/680 ? Can it be closed?

[11:20] <AlexDaniel`> Very likely yes. I'll check when I get home

[12:13] <Geth> ¦ rakudo: 85ad0eba3e | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm

[12:13] <Geth> ¦ rakudo: Further nano-optimize threadpool scheduler thread

[12:13] <Geth> ¦ rakudo:

[12:13] <Geth> ¦ rakudo: It struck me that we don't need the overhead of calling the HLL sleep()

[12:13] <Geth> ¦ rakudo: as we know the value that will be used all of the time.  Please note that

[12:13] <Geth> ¦ rakudo: I also tried to feed it a native num variable, but this appeared to have

[12:13] <Geth> ¦ rakudo: a negative effect on longer running parallel executing programs.

[12:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/85ad0eba3e

[12:25] <Geth> ¦ rakudo: 1894eacea4 | (Elizabeth Mattijsen)++ | 3 files

[12:25] <Geth> ¦ rakudo: Move chrs() logic to List.chrs and make chrs() the gateway

[12:25] <Geth> ¦ rakudo:

[12:25] <Geth> ¦ rakudo: So that if you define your own .chrs method on a Foo object for some reason,

[12:25] <Geth> ¦ rakudo: using chrs() will find the Foo.chrs.

[12:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1894eacea4

[12:49] <jnthn> afternoon, #perl6-dev

[12:55] <lizmat> jnthn  o/

[12:56] <Geth> ¦ rakudo: 6117647570 | (Elizabeth Mattijsen)++ | 2 files

[12:56] <Geth> ¦ rakudo: Move ords() logic to Str.ords

[12:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6117647570

[12:56] <lizmat> jnthn: so how was the meeting in Brno ?

[12:56] <dogbert21> o/ jnthn, how's your vacation going?

[12:56] <jnthn> Very nice. :)

[12:56] <jnthn> Gave a copule of talks. Answered lots of questions. :)

[12:57] <jnthn> On the train back home now

[12:57] <dogbert21> and the weather?

[12:58] <jnthn> We walked up to the Brno castle in -10C or so on Wednesday :)

[12:58] <dogbert21> yay

[12:58] <lizmat> brrrrrrrrno

[12:58] <jnthn> Thursday was warmer, but windier, so felt colder

[12:58] <dogbert21> any snow?

[12:58] <jnthn> So I was glad we'd done that on Wednesday

[12:58] <jnthn> A little snow. Saw quite a bit on the train there/back

[12:58] <jnthn> Not much in the city itself

[12:59] <jnthn> Though it was lightly snowing while I was waiting for the train earlier :)

[12:59] <dogbert21> with some luck there's snow in Prague

[13:00] <jnthn> Relatively unlikely

[13:01] <dogbert21> :(

[13:01] <dogbert21> was it a good conference?

[13:02] <jnthn> 'twas a Pm group meeting rather than conf, but yeah, was nice :)

[13:02] <jnthn> Good view over the city from the place where I was speaking too :)

[13:02] <dogbert21> nice

[13:02] <jnthn> And some good food and microbrews afterwards

[13:03] <dogbert21> oh microbrews

[13:03] <jnthn> Yeah, they had a pleasing oatmeal stout :)

[13:04] <dogbert21> mmm

[13:05] * jnthn uploads his holiday hacking to CPAN :)

[13:21] <AlexDaniel> dogbert21: sorry, did you run the example mentioned in the ticket?

[13:22] <AlexDaniel> this is the output, but I'm not sure what to think of it: https://gist.github.com/AlexDaniel/f39a1c4beea666ede2c8722e8f2ab738

[13:31] <lucasb> I tried to make chrs() use an arbitrary .chrs method in a dummy class, but couldn't make it happen

[13:31] <lucasb> besides 'multi sub chrs(*@c --> Str:D) { @c.chrs }', a new multi sub should be defined to catch that case?

[13:31] <lizmat> if you make the class Cool, does it work then?

[13:32] <lucasb> oh, I forgot. let me try

[13:32] <lizmat> https://github.com/rakudo/rakudo/issues/1575   # reason for not putting it in Any (so far)

[13:33] <lucasb> nope, it didn't see to work

[13:34] <lucasb> the intention is for "chrs($myobj)" to call $myobj.chrs, rigth?

[13:34] <lucasb> but will it ever work if that signature (*@c) ?

[13:35] <lucasb> *@c doesn't retain the original type, right?

[13:36] <MasterDuke> jnthn: did you see my question yesterday about nqp -> mbc?

[13:37] <lizmat> lucasb: I guess we need to add a multi then, PR's accepted  :-)

[13:37] <lizmat> going to be afk mostly until late Saturday night

[13:57] <lizmat> afk&

[13:59] <MasterDuke> last night i was running some experiments trying to --profile-compile the rakudo build

[13:59] <MasterDuke> the last release where that was possible was 2017.08

[14:01] <MasterDuke> (and that took about 15m for the build and 105m to write out the 1.2g of profile data (as SQL))

[14:01] <MasterDuke> every release since then (and HEAD) used significantly more ram according to /usr/bin/time

[14:02] <MasterDuke> and wouldn't actually create a profile

[14:04] <MasterDuke> there wasn't any message that it got killed by the os, and /usr/bin/time showed only 40g used (out of 52g in the vm) during some of the ones right after 2017.08

[14:08] <MasterDuke> anybody have any thoughts/suggestions?

[14:47] <dogbert21> perhaps timotimo

[15:28] <Geth> ¦ roast: ad4aef0102 | (Stefan Seifert)++ | 3 files

[15:28] <Geth> ¦ roast: Fix broken todo-ed precomp interning test

[15:28] <Geth> ¦ roast:

[15:28] <Geth> ¦ roast: Don't expect an implementation to load a precompiled file without accompanying

[15:28] <Geth> ¦ roast: source file. Instead, expect precompilation to be done implicitly like so many

[15:28] <Geth> ¦ roast: other tests already do. The only reason why this wasn't done at the same time

[15:28] <Geth> ¦ roast: as for other tests is that this was todo-ed and nobody looked at the failure

[15:28] <Geth> ¦ roast: close enough to notice the breakage till pmurias++ came along.

[15:28] <Geth> ¦ roast: Fixes GH #391

[15:28] <synopsebot> SPEC#391 [open]: https://github.com/perl6/roast/issues/391 Broken todo-ed precomp interning test

[15:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ad4aef0102

[15:34] * timotimo waves from a fresh upgraded fedora 27

[15:34] <jnthn> MasterDuke: My plan was to use that as a concrete test case for a yet-to-be-designed set of binary data ops

[15:36] <timotimo> MasterDuke: does dmesg say it was OOM'd?

[16:11] <MasterDuke> timotimo: nope

[16:12] <timotimo> did it write a core dump?

[16:12] <timotimo> (that'd be a many gigabytes big file, fun!)

[16:12] <MasterDuke> jnthn: ah, so not really something i could start on?

[16:12] <MasterDuke> timotimo: not that either

[16:12] <timotimo> hrmpf

[16:13] <MasterDuke> yeah

[16:14] <jnthn> MasterDuke: Indeed, though I think it'll be something that, once rolling, could be fairly easy to join in with

[16:15] <MasterDuke> cool

[16:17] <MasterDuke> timotimo: i could create you an account on the vm...

[16:17] <timotimo> if it's the bisectable machine, i already have that?

[16:18] <MasterDuke> no, it's a google compute vm

[16:18] <timotimo> ah, hm

[16:18] <timotimo> that way what i do will waste your money :o

[16:18] <MasterDuke> profiling the build now takes way more ram than the whateverable server

[16:19] <MasterDuke> i'm just using the free credit

[16:19] <timotimo> ah

[16:19] <timotimo> one day i should grab the free credit, too

[16:19] <MasterDuke> and at this rate it will expire before i use it up

[16:20] <MasterDuke> so i want to spend it while i can

[16:25] <timotimo> BBL

[16:32] <Geth> ¦ rakudo: 98e575de00 | (Jonathan Worthington)++ | 451 files

[16:32] <Geth> ¦ rakudo: Use .pm6 under src/core/, not .pm

[16:32] <Geth> ¦ rakudo:

[16:32] <Geth> ¦ rakudo: We should really be setting a good example in Rakudo, plus this will be

[16:32] <Geth> ¦ rakudo: easier on everyone whose editor defaults to Perl 6 highlights for .pm6

[16:32] <Geth> ¦ rakudo: and Perl 5 highlights for .pm.

[16:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/98e575de00

[17:01] <AlexDaniel> yay for proper filename extension

[17:02] <AlexDaniel> it's a bit trickier with .pl files though, as someone may be doing some kind of automation with them

[17:02] <AlexDaniel> but still potentially doable

[17:02] <jnthn> Yeah, that way-out-of-hand docs ticket finally prodded me to do it :)

[17:09] <MasterDuke> jnthn: any thoughts on my unsuccessful attempts to --profile-compile the rakudo build? think it might be related to that --profile-stage=parse weirdness i was discussing with timotimo yesterday?

[17:12] <jnthn> MasterDuke: 'fraid I didn't really follow everything here the last few days

[17:12] <jnthn> timotimo probably has more idea of the latest profile-related stuff than I do :)

[17:12] <MasterDuke> https://irclog.perlgeek.de/perl6-dev/2018-03-02#i_15874404 if you're interested

[17:12] <jnthn> Hmm

[17:13] <jnthn> That number is meaningless-ish now, I think

[17:13] <jnthn> In that we always do opt on a background thread

[17:14] <Geth> ¦ rakudo: b7df58f25b | (Aleks-Daniel Jakimenko-Aleksejev)++ | 5 files

[17:14] <Geth> ¦ rakudo: Use .p6 instead of .pl6 for some tools

[17:14] <Geth> ¦ rakudo:

[17:14] <Geth> ¦ rakudo: We should be careful when changing names of these tools because there

[17:14] <Geth> ¦ rakudo: might be some automation that depends on them, but in this case it's

[17:14] <Geth> ¦ rakudo: probably only my own automation that matters, so I'll take the hit.

[17:14] <Geth> ¦ rakudo:

[17:14] <Geth> ¦ rakudo: Consensus for .p6 was reached in perl6/doc#778.

[17:14] <synopsebot> DOC#778 [closed]: https://github.com/perl6/doc/issues/778 [LHF][docs] “Source files generally use the standard .pm extension, and scripts or executables use .pl.”

[17:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b7df58f25b

[17:15] <Geth> ¦ rakudo: 02fc1ffe6a | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/contributors.p6

[17:15] <Geth> ¦ rakudo: Add missing shebang

[17:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/02fc1ffe6a

[17:16] <MasterDuke> but even if it's meaningless, it shouldn't say dynamic optimization took hours longer than the actual compilation+runtime

[17:17] <Geth> ¦ rakudo: efd0d6c051 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[17:17] <Geth> ¦ rakudo: CREDITS.pl6 → CREDITS.p6

[17:17] <Geth> ¦ rakudo:

[17:17] <Geth> ¦ rakudo: Similarly to b7df58f25ba47bd404b19005626b6b0058435ec1.

[17:17] <Geth> ¦ rakudo:

[17:17] <Geth> ¦ rakudo: Seems like this file is not used, so renaming it should be safe.

[17:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/efd0d6c051

[17:18] <AlexDaniel> so there's only install-dist.pl now

[17:18] <AlexDaniel> which is actually a perl 6 script

[17:18] <jnthn> MasterDuke: Yeah, I've never seen it output anything ever than 0 since my spesh refactors

[17:18] <jnthn> MasterDuke: So I've no idea what's going on with it :)

[17:19] <jnthn> AlexDaniel++ # picking up where I left off

[17:19] <jnthn> I had thought about doing the scripts too, but got distracted :)

[17:20] <AlexDaniel> jnthn: actually, there was one script with .p6 extension already, and IIRC it had .pl before I changed it. I just didn't have enough courage to rename the rest

[17:20] <AlexDaniel> there :) https://github.com/rakudo/rakudo/commit/ade7c4660f46a2b12425de24f66665af809826c2

[17:21] <AlexDaniel> arguably switching pl6 to p6 is not that big of a difference

[17:21] <AlexDaniel> it's the .pl → .p6 that mattered

[17:21] <MasterDuke> jnthn: where is the data for that value collected?

[17:25] <AlexDaniel> I filed R#1583 for the last file

[17:25] <synopsebot> R#1583 [open]: https://github.com/rakudo/rakudo/issues/1583 tools/install-dist.pl is a perl 6 script but has Prolog file extension

[17:33] <AlexDaniel> greppable6: install-dist

[17:33] <greppable6> AlexDaniel, 4 lines, 1 modules: https://gist.github.com/5bda741414b36279a2552a0a7a741ebd

[17:34] <jnthn> MasterDuke: I didn't actually think it was any more. It used to be that when we entered/left the specializer we would call some functions in profile/log.c or whatever it's called. But those went away with the spesh refactor, I think

[17:35] <jnthn> (When it was moved to a background thread)

[17:39] <Geth> ¦ roast: 1be2c82018 | (Stefan Seifert)++ | S10-packages/precompilation.t

[17:39] <Geth> ¦ roast: Adapt test count after ad4aef0102e3d7dc2e986bf225c4cd93c301d629

[17:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1be2c82018

[18:22] <Geth> ¦ rakudo: 440fceacc2 | (Zoffix Znet)++ | src/core/Range.pm6

[18:22] <Geth> ¦ rakudo: Remove Range.clone-with-op / Fix bug on ops with subclasses of Range

[18:22] <Geth> ¦ rakudo:

[18:22] <Geth> ¦ rakudo: Addresses R#1582 https://github.com/rakudo/rakudo/issues/1582

[18:22] <Geth> ¦ rakudo: Addresses D#1798 https://github.com/perl6/doc/issues/1798

[18:22] <Geth> ¦ rakudo:

[18:22] <Geth> ¦ rakudo: Also fixes explosion when subclasses/mixedin Range objects were used

[18:22] <synopsebot> R#1582 [open]: https://github.com/rakudo/rakudo/issues/1582 Remove Range.clone-with-op

[18:22] <synopsebot> D#1798 [open]: https://github.com/perl6/doc/issues/1798 [NOTSPECCED][docs] clone-with-op is not documented

[18:22] <Geth> ¦ rakudo: with Range ops. Also fixes propagation of `infinite` attribute, tho

[18:22] <Geth> ¦ rakudo: <…commit message has 10 more lines…>

[18:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/440fceacc2

[18:23] <Geth> ¦ roast: 81d8cc92ed | (Zoffix Znet)++ | S03-operators/range.t

[18:23] <Geth> ¦ roast: Remove trailing whitespace

[18:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/81d8cc92ed

[18:23] <Geth> ¦ roast: 6607795a41 | (Zoffix Znet)++ | S03-operators/range.t

[18:23] <Geth> ¦ roast: Test Range operators with Range subclasses

[18:23] <Geth> ¦ roast:

[18:23] <Geth> ¦ roast: Rakudo fix: https://github.com/perl6/doc/issues/1798

[18:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6607795a41

[18:36] <MasterDuke> timotimo: looks like there's an MVM_profiler_log_spesh_end getting called before MVM_profiler_log_spesh_start, so it's setting the initial spesh_time to `uv_htime() - 0`, which is obviously a large number

[18:37] <jnthn> Hmm

[18:38] <MasterDuke> however, each only are called in one place in worker.c

[18:38] <jnthn> I guess maybe logging how much time the specializer thread spends could be interesting

[18:38] <MasterDuke> if (tc->instance->main_thread->prof_data) MVM_profiler_log_spesh_start(tc);

[18:38] <MasterDuke> timotimo added those a week ago

[18:38] <jnthn> I mean, once we have multi-threaded profiles working well

[18:38] <MasterDuke> yeah, that's what he's been working on

[18:39] <jnthn> ah, ok

[18:39] <MasterDuke> landed a bunch of commits last week

[18:39] <jnthn> I was a bit distracted writing/giving talks and travel/sightseeing :)

[18:40] <MasterDuke> both the _start and _end have that same if and are in a loop

[18:41] <MasterDuke> so i guess somehow that conditional isn't true for the start and is for the end the first time through the loop

[18:43] <jnthn> Hmm

[18:43] <jnthn> if (tc->instance->main_thread->prof_data)

[18:43] <jnthn> MVM_profiler_log_spesh_start(tc);

[18:44] <jnthn> I wonder if there can be issues involving the main thread having finished profiling or not yet started or some such

[18:44] <jnthn> So that condition changes

[18:44] <jnthn> And it maybe logs a start without end or end without start

[18:44] <MasterDuke> it definitely does, i added some fprintfs to _start and _end

[18:45] <MasterDuke> and the very first thing printed was an _end

[18:45] <jnthn> Hm, maybe a check to make sure that we ignore any end when we weren't started :)

[18:46] <MasterDuke> only does it with --profile-compile or --profile-stage

[18:46] <MasterDuke> not --profile

[18:49] <MasterDuke> or should the _start be moved somewhere later in that worker loop such that tc->instance->main_thread->prof_data will definitely be set?

[19:29] <travis-ci> Rakudo build passed. Zoffix Znet 'Remove Range.clone-with-op / Fix bug on ops with subclasses of Range

[19:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/348354899 https://github.com/rakudo/rakudo/compare/efd0d6c05163...440fceacc2e2

[20:16] <tbrowder> Zoffix: you around?

[20:20] <tbrowder> does anyone know if there is a list of current p6 modules showing the current status of travis and appveyor testing?  the cpan list apparently doesn't show current status.

[20:23] <Zoffix> tbrowder: what?

[20:23] <gfldex> tbrowder: modules.perl6.org does know, so there must be a way to get hold of that data

[20:24] <Zoffix> tbrowder: the search page shows travis/appveyor. Don't enter a term and it'll show all modules: http://modules.perl6.org/search

[20:24] <Zoffix> And the data is querable via API: http://modules.perl6.org/search.json

[20:26] <Zoffix> $ perl6 -MWWW -MJSON::Fast -e '"http://modules.perl6.org/search.json".&get.&from-json<dists>.sort(*<name>).map: { "{.<name>}\t\ttravis {.<travis_status>}\t\tappveyor {.<appveyor_status>}".say }'

[20:27] <Zoffix> And `dist_source` key contains source ("cpan", "github", "gitlab")

[20:27] <Zoffix> None of CPAN dists have the data (well they say "not setup", but there's just no info populated by the dist source code):

[20:28] <Zoffix> $ perl6 -MWWW -MJSON::Fast -e '"http://modules.perl6.org/search.json".&get.&from-json<dists>.grep(*<dist_source> eq "cpan").sort(*<name>).map: { "{.<name>}\t\ttravis {.<travis_status>}\t\tappveyor {.<appveyor_status>}".say }

[20:30] <Zoffix> $ perl6 -MWWW -MJSON::Fast -e '"http://modules.perl6.org/search.json".&get.&from-json<dists>.grep(*<dist_source> eq "cpan").sort(*<name>).map: { printf "%50s %-15s %-15s\n", .<name  travis_status  appveyor_status> }' # a bit easier to read

[20:37] <Zoffix> A few days it was mentioned about forgetting to run `make test`. FWIW, Z-Script's `z s` (spectest), `z bs` ("best" test), and `z ss` (stresstest) all run `make test` first.

[20:37] <Zoffix> huggable: z

[20:37] <huggable> Zoffix, Helper script for Rakudo Perl 6 core development: https://github.com/zoffixznet/z

[20:39] <gfldex> tbrowder: please note that travis tests reported as passed may have done so with a rakudo that is months old. As such they may not pass anymore.

[21:02] <[Tux]> Rakudo version 2018.02.1-104-g440fceacc - MoarVM version 2018.02-22-g9233d85e7

[21:02] <[Tux]> csv-test-xs-20      0.496 -  0.500

[21:02] <[Tux]> csv-ip5xs           0.829 -  0.912

[21:02] <[Tux]> test-t --race       1.157 -  1.179

[21:02] <[Tux]> test-t              2.573 -  2.628

[21:02] <[Tux]> csv-ip5xs-20        7.880 -  8.072

[21:02] <[Tux]> test                9.603 -  9.631

[21:02] <[Tux]> test-t-20 --race   15.917 - 17.737

[21:02] <[Tux]> csv-parser         37.490 - 39.699

[21:02] <[Tux]> test-t-20          46.628 - 48.521

[21:24] <japhb> HEAD rakudo breaks JSON::Fast, it looks like:

[21:24] <japhb> ===> Testing: JSON::Fast:ver<0.9.10>

[21:24] <japhb> The iterator of this Seq is already in use/consumed by another Seq

[21:24] <japhb> (you might solve this by adding .cache on usages of the Seq, or

[21:24] <japhb> by assigning the Seq into an array)

[21:24] <japhb> in sub assert-sorted at t/08-sorted-keys.t line 8

[21:24] <japhb> in block <unit> at t/08-sorted-keys.t line 11

[21:24] <japhb> ===> Testing [FAIL]: JSON::Fast:ver<0.9.10>

[21:24] <japhb> Aborting due to test failure: JSON::Fast:ver<0.9.10> (use --force-test to override)

[21:34] <tbrowder> Zoffix: thanks

[21:37] <tbrowder> gfldex: good point, thanks

[21:39] <tbrowder> the reason for my query is that Bailador is having problems with appveyor tests and i think at least some of it is the large number of dependencies, some of which may not be set up or not passing windows tests themselves

[21:45] <timotimo> jnthn: i force a gc collection to collect profile data, so at least at the end it'd be in sync. the start, however, may be a different story :)

[22:03] <MasterDuke> timotimo: https://github.com/MoarVM/MoarVM/pull/812

[22:03] <timotimo> oh you fixed it for me

[22:05] <MasterDuke> well, my fix misses anything that happened the first time through the loop, so maybe there's something better

[22:14] <timotimo> i can't immediately reproduce the test failure in json::fast

[22:14] <timotimo> but maybe i should build newest everything first

[22:29] <Zoffix> timotimo: https://github.com/timo/json_fast/pull/37

[22:29] <timotimo> aha, it's reproduced

[22:30] <Zoffix> .comb was inconsistent in that it returned Seq in all cases but the .comb(Regex:D) one and now it was made consistent and the test tries to call .List and then .sort on that same Seq

[22:30] <timotimo> i see!

[22:32] <timotimo> released

[22:37] <japhb> Thanks guys!

[23:21] <Geth> ¦ nqp: 41b2f055b1 | (Timo Paulssen)++ | src/vm/moar/HLL/Backend.nqp

[23:21] <Geth> ¦ nqp: remove stray debug output from sql profile output

[23:21] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/41b2f055b1

[23:22] <japhb> Timo: Did you bump the version for JSON::Fast?  My rebuild seems to have pulled the old one (0.9.10)

[23:24] <timotimo> i did

[23:24] <jnthn> It's also possible that it was uploaded to CPAN and you're noticing the delay between it being uploaded and it being indexed

[23:25] <timotimo> aye, that takes a bit every time

[23:25] <jnthn> .oO( Is this why the CPAN upload service is called pause? :) )

[23:25] <timotimo> the sql output for the same workload just reached 348 megs

[23:25] <timotimo> er, ww i guess

[23:46] <japhb> jnthn: Any idea how long that delay is?  Minutes?  Hours?  A day?

[23:53] <jnthn> japhb: Feels like ~1 hour to me

[23:53] <jnthn> Maybe ~30 minutes

[23:58] <timotimo> http://modules.perl6.org/update.log

[23:58] <timotimo> japhb: check this, it should show you how long things ought to take

[23:58] <timotimo> almost an hour

[23:59] <timotimo> also, that build log still has 9.10 as the latest :(

[23:59] <timotimo> so the *next* one will get it
