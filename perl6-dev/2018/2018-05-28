[00:00] <MasterDuke> they both could use a lot of work

[00:55] *** Kaiepi left
[00:57] *** Kaiepi joined
[01:03] *** BenGoldberg joined
[01:07] *** PufferBot joined
[01:45] *** ilbot3 left
[01:58] *** ilbot3 joined
[01:58] *** ChanServ sets mode: +v ilbot3

[03:18] *** j3nnn1 joined
[04:55] <AlexDaniel> weekly: reportable: https://gist.github.com/54cc1a530c3cf702f050c22eb54c34dd

[04:55] <notable6> AlexDaniel, Noted!

[04:56] <samcv> jnthn: i think those optimizations to nqp::atpos make it 4% faster

[04:59] <samcv> well it makes this nqp script which does 5 nqp::atpos's 10000000 times. about half the cpu usage is from atpos so i'm estimating it makes atpos 4% faster even though the full script itself is only 2% faster

[05:27] *** j3nnn1 left
[05:54] <tyil> samcv: I've done some work on vim-perl6, but I'm not a maintainer on the project

[05:55] <tyil> I can take a look tomorrow if there's an issue, I have an all-day privacy event today

[05:59] <Geth> ¬¶ rakudo: 740671273e | (Samantha McVey)++ | tools/build/NQP_REVISION

[05:59] <Geth> ¬¶ rakudo: Bump NQP/MoarVM for .words speedup and string bitop fixes

[05:59] <Geth> ¬¶ rakudo: 

[05:59] <Geth> ¬¶ rakudo: Changes: 2018.05-12-gc00142108..2018.05-17-g628d70fa5

[05:59] <Geth> ¬¶ rakudo: 628d70fa5 [JVM] Use peer/socket host/port in async sockets

[05:59] <Geth> ¬¶ rakudo: 67c8b96dd Bump MoarVM for str bitwise op fixes and .words speed impv.

[05:59] <Geth> ¬¶ rakudo: 41a0d017f [js] Implement nqp::getuniname for private-use and surrogate characters

[05:59] <Geth> ¬¶ rakudo: d5f13c037 [js] Fix bug

[06:00] <Geth> ¬¶ rakudo: f08a58269 [js] Handle _ and unicode unary minus in string to number coercions

[06:00] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/740671273e

[06:00] <Geth> ¬¶ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.05-12-gc00142108...2018.05-17-g628d70fa5

[06:07] <nine> ~~

[06:07] <yoleaux> 27 May 2018 22:08Z <lizmat> nine: perhaps "my class Rakudo::Internals::IterationSet is repr('VMHash') { }" could be of help?

[06:07] <yoleaux> 27 May 2018 22:09Z <lizmat> nine: or perhaps we need to generalize this a bit like IterationBuffer

[06:10] <nine> .tell lizmat close, but I'd need that in Inline::Perl5. I have some patches for making the meta model code deal with Perl 6 hashes correctly. But it's kinda unelegant. Also it'd mean that Inline::Perl5 would depend on a not even released rakudo.

[06:10] <yoleaux> nine: I'll pass your message to lizmat.

[06:10] *** BenGoldberg left
[06:20] <Geth> ¬¶ roast: 0a7bd6fe68 | (Samantha McVey)++ | S03-operators/bit.t

[06:20] <Geth> ¬¶ roast: Add tests for string bitwise ops with combining characters

[06:20] <Geth> ¬¶ roast: 

[06:20] <Geth> ¬¶ roast: These are tests for issue MoarVM/MoarVM#867 and ensuring that bitwise

[06:20] <Geth> ¬¶ roast: ops are doing the operations by codepoint.

[06:20] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/0a7bd6fe68

[07:10] *** dct joined
[07:16] *** shareable6 joined
[07:26] <[Tux]> Rakudo version 2018.05-26-g740671273 - MoarVM version 2018.05-28-gfede5cf50

[07:26] <[Tux]> csv-test-xs-20      0.440 -  0.450

[07:26] <[Tux]> csv-ip5xs           0.888 -  0.917

[07:26] <[Tux]> test-t --race       0.983 -  1.018

[07:26] <[Tux]> test-t              2.348 -  2.389

[07:26] <[Tux]> test                8.820 -  9.280

[07:26] <[Tux]> csv-ip5xs-20        8.741 -  9.561

[07:26] <[Tux]> test-t-20 --race   15.480 - 16.464

[07:26] <[Tux]> csv-parser         25.986 - 26.287

[07:26] <[Tux]> test-t-20          43.761 - 44.361

[07:36] *** AlexDani` joined
[07:37] *** AlexDaniel left
[08:23] *** shareable6 left
[08:45] <lizmat> Files=1239, Tests=76355, 318 wallclock secs (15.51 usr  5.63 sys + 2193.64 cusr 218.08 csys = 2432.86 CPU)

[08:45] <yoleaux> 06:10Z <nine> lizmat: close, but I'd need that in Inline::Perl5. I have some patches for making the meta model code deal with Perl 6 hashes correctly. But it's kinda unelegant. Also it'd mean that Inline::Perl5 would depend on a not even released rakudo.

[09:16] *** dct left
[09:19] <lizmat> .tell zoffix https://irclog.perlgeek.de/perl6/2018-05-24#i_16202607  I can't seem to find that module on modules.perl6.org, suggestions?

[09:19] <yoleaux> lizmat: I'll pass your message to zoffix.

[09:24] <lizmat> .tell Zoffix https://irclog.perlgeek.de/perl6/2018-05-24#i_16202607  I can't seem to find that module on modules.perl6.org, suggestions?

[09:24] <yoleaux> lizmat: I'll pass your message to Zoffix.

[09:36] *** robertle joined
[09:38] *** shareable6 joined
[09:38] *** ChanServ sets mode: +v shareable6

[09:53] *** zostay_ joined
[10:01] *** shareable6 left
[10:01] *** [Tux] left
[10:01] *** Undercover left
[10:01] *** SourceBaby left
[10:01] *** zostay_ is now known as zostay

[10:01] *** squashable6 joined
[10:01] *** ChanServ sets mode: +v squashable6

[10:07] *** [Tux] joined
[10:17] *** pmurias joined
[11:00] *** yoleaux joined
[11:20] *** brrt joined
[11:21] <brrt> \o

[11:21] <samcv> \o

[11:22] <brrt> samcv: do you know how the moarvm.org website is generated?

[11:22] <brrt> my exact question is: could we add a docs/ section to that website

[11:23] <samcv> brrt: yes we could

[11:23] <samcv> also the releases page is generated

[11:23] <brrt> that would be fairly cool

[11:24] <samcv> some documents are in markdown, others are in asciidoc (which is nice because it gives us nice table of contents and more advanced features)

[11:27] <brrt> we can maybe convert it all to one format?

[11:28] <brrt> also, I like org-mode :-)

[11:28] <samcv> yeah

[11:32] <brrt> but, i want auto-generated public documentation more than I want to keep using org-mode only

[12:36] *** j3nnn1 joined
[13:45] <lizmat> hmmm.. not sure what to make of https://metacpan.org/pod/release/RSLOVERS/Dot-v1/Dot.pm

[13:50] <brrt> let a thousand flowers bloom?

[13:51] <El_Che> lizmat: we're back to hashes :)

[13:51] <pmurias> lizmat: it feels very javascripty

[13:51] * El_Che remembers Ouside-in objects fondly

[13:52] <El_Che> (actually not really, the code was unreadable)

[13:52] <El_Che> I picked Inside Out object because it was in the PBP book

[13:53] <lizmat> yeah, InsideOut objects always felt like an even bigger hack to me than just blessed hashes

[13:54] <brrt> it's a performance hack

[13:54] <brrt> and not one that is really applicable to perl

[13:55] <El_Che> was it not about protecting the inside of the objects?

[13:55] <brrt> in C/C++ it works well, because you'd maybe do some transformation on 100s of the same attributes of the same objects, and inside-out objects make sure that these attributes are all in the same part of memory

[13:55] <brrt> you could use it for that, but that makes little sense to me, tbh

[14:00] <brrt> perl being perl, what are you really going to do to 'protect' parts of the program from one another

[14:00] <brrt> actually writing good code is a much saner way to use your time

[14:04] <El_Che> brrt: it's useful for poeple coming from other languages that have that

[14:05] <brrt> no, it's not

[14:05] <brrt> (this is my opinion, though)

[14:05] <brrt> actually learning how to write perl in a sane way is a better way to spend your time than trying to fit perl into something that it is not

[14:06] <El_Che> brrt: in an ideal world

[14:06] <El_Che> brrt: in reality everyone takes some luggage from other languages

[14:06] <El_Che> which can be good

[14:06] <brrt> because - provided your program is actually useful and hence likely to be expanded by other people than yourself - *somebody* will break your house-of-cards mental model

[14:07] <brrt> much better to have a mental model that actually corresponds to what the code does

[14:10] <brrt> this is related to a 'baby perl' discussion that was held recently at some $workplace - bunch of folks arguing that no, we should only use the obvious parts of perl, and others saying no, you should learn how to use the language

[14:10] <brrt> doesn't help that perl (5) resources are still writing BS like 'perl array literals are delimited by parentheses'

[14:12] <El_Che> brrt: I agree with you on principle, but I see where the need for some features comes from

[14:23] *** MasterDuke left
[14:26] *** MasterDuke joined
[14:33] *** skids joined
[14:43] <lizmat> m: sub a(Callable:U :$a! is rw) { $a = { say "foo" } }; a a => my &bar; bar() # never thought I would ever use Callable:U in a Signature

[14:43] <camelia> rakudo-moar 740671273: OUTPUT: ¬´foo‚ê§¬ª

[14:50] <lizmat> m: sub a(:&a! is rw) { &a = { say "foo" } }; a a => my &bar; bar()   # cause this is not allowed, why?

[14:50] <camelia> rakudo-moar 740671273: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Can only use 'is rw' on a scalar ('$' sigil) parameter, not '&a'‚ê§at <tmp>:1‚ê§¬ª

[14:52] * geekosaur guesses someone assumed all the other sigils were already r/w containers

[14:54] <lizmat> in case one wonders why I'm doing this: I'm working on porting the Memoize module from perl 5

[15:43] *** brrt left
[15:44] *** shareable6 joined
[16:08] *** robertle left
[16:16] <El_Che> lizmat: one can say that you're consistent :)

[16:16] <lizmat> perhaps also stubborn?

[16:17] <lizmat> actually, doing this I realized why we ripped out "is cached"

[16:17] <lizmat> updating a simple in-memory cache from multiple threads needs locking  :-(

[16:19] <lizmat> or perhaps an approach where each thread has its own cache (perhaps optional)

[16:19] <lizmat> and some flushing logic that would create a single hash for permanent backends

[16:23] <MasterDuke> is 'is cached' gone for good?

[16:24] <lizmat> well, I've not been able to find any code that does anything anymore

[16:25] <lizmat> I guess we need to come up with some roles, and a default case that uses a built-in client of that role

[16:28] *** shareable6 left
[16:36] <Geth> ¬¶ nqp: 8385b98bd5 | (Tom Browder)++ (committed using GitHub Web editor) | docs/using-pod-in-nqp.md

[16:36] <Geth> ¬¶ nqp: update per current nqp

[16:36] <Geth> ¬¶ nqp: 

[16:36] <Geth> ¬¶ nqp: the =begin/=end identifier enforcement was added in commit ???.

[16:36] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/8385b98bd5

[16:55] *** j3nnn1 left
[17:02] *** AlexDani` is now known as AlexDaniel

[17:26] *** shareable6 joined
[17:28] *** brrt joined
[18:00] *** dct joined
[18:12] *** dct left
[18:18] <AlexDaniel> m: use experimental :cached; sub foo($x) is cached { say ‚Äòhello‚Äô; $x }; say foo 42; say foo 42

[18:18] <camelia> rakudo-moar 740671273: OUTPUT: ¬´hello‚ê§42‚ê§42‚ê§¬ª

[18:18] <AlexDaniel> what's gone exactly?

[18:19] *** stmuk_ joined
[18:20] *** stmuk left
[19:07] <lizmat> hmmm...

[19:07] <lizmat> I was looking for the code that handles this the other day, and couldn't find it

[19:07] <lizmat> hmmm...

[19:10] <lizmat> aaaahhh... duh, it lives in lib/experimental.pm6, not in src/core

[19:22] *** shareable6 left
[19:32] *** Ven`` joined
[19:35] *** Ven` joined
[19:35] *** Ven`` left
[19:37] *** brrt left
[19:42] *** Ven` left
[19:59] <Geth> ¬¶ roast: 8ae773213a | usev6++ | S03-operators/bit.t

[19:59] <Geth> ¬¶ roast: [JVM] Fudge newly added tests

[19:59] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/8ae773213a

[19:59] <Geth> ¬¶ roast: 8d29945eb8 | usev6++ | 6 files

[19:59] <Geth> ¬¶ roast: [JVM] Adjust fudging (mostly unfudge passers)

[19:59] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/8d29945eb8

[20:03] *** skids left
[20:16] *** shareable6 joined
[20:25] *** shareable6 left
[20:40] <Geth> ¬¶ rakudo: 0666f6a864 | usev6++ | t/spectest.data

[20:40] <Geth> ¬¶ rakudo: [JVM] Run some more test files (all tests pass)

[20:40] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/0666f6a864

[20:43] <MasterDuke> anybody have any thoughts/comments on https://github.com/rakudo/rakudo/pull/1844 and https://github.com/rakudo/rakudo/pull/1847 ?

[20:46] *** dct joined
[20:49] *** Kaiepi left
[20:54] <lizmat> MasterDuke: just mulling over it

[20:56] <MasterDuke> cool. no hurry, just wanted to throw the occasional mention out

[21:02] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/05/28/2018-22-gdpr-to-you-too/

[21:03] <lizmat> notable6: weekly reset

[21:03] <notable6> lizmat, Moved existing notes to ‚Äúweekly_2018-05-28T21:03:57Z‚Äù

[21:08] <MasterDuke> lizmat: i believe samcv's .lines and .words optimization is mostly (only?) visible for Str.(lines|words)'

[21:09] <timotimo> oh, i think MasterDuke is right

[21:10] <lizmat> ah, hmmm...

[21:10] <lizmat> I guess you're right  :)

[21:12] <lizmat> fixed

[21:12] <lizmat> MasterDuke++ timotimo++

[21:13] <MasterDuke> lizmat++ a machine with the weeklies

[21:14] <AlexDaniel> lizmat++ indeed

[21:14] * AlexDaniel loves weeklies

[21:45] <samcv> MasterDuke: yeah that's probably right? though may not be right

[21:46] <samcv> anything that uses findcclass. so from what others have said IO.lines may not do that?

[22:13] <timotimo> yeah, i'd expect IO.lines to use the separator functionality we have for handles

[22:17] <timotimo> i'd go so far as to claim that that's The Truth

[23:37] *** dct left
[23:56] *** pmurias left
[23:58] *** PufferBot left
