[06:34] <Kaiepi> ok something seems to be very wrong with dns resolution on freebsd since beastiebot can't resolve any ip for irc.freenode.net

[06:34] <Kaiepi> i'll write up an issue for it tomorrow once i find out more about what the problem is

[11:00] <Geth> ¦ rakudo/js: a22bf543ef | pmurias++ | tools/build/gen-js-makefile.nqp

[11:00] <Geth> ¦ rakudo/js: [js] Build CORE setting with a source map

[11:00] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/a22bf543ef

[13:11] <dogbert2_> ZOFFLOP: t/spec/S10-packages/basic.rakudo.moar

[13:14] <dogbert2_> ZOFFLOP fixed, was a local PATH problem

[13:21] <lizmat> Files=1236, Tests=76264, 312 wallclock secs (14.73 usr  5.30 sys + 2142.74 cusr 213.43 csys = 2376.20 CPU)

[13:41] <AlexDaniel> jnthn: you write: “the next MoarVM release will include remote debug support”, yet we are 3 days before the release and it's not merged yet

[13:43] <jnthn> AlexDaniel: Will merge it later on today

[13:43] <AlexDaniel> ok thanks!

[13:43] <jnthn> AlexDaniel: Given all the functionality is enabled by an explicit command line option, I'm pretty comfortable it won't have any impact

[13:44] <jnthn> Uh, impact on "normal" MoarVM usage, I mean

[13:44] <AlexDaniel> yea that I see. But still I'm kind of expecting huge chunks of work to be merged earlier

[14:15] <japhb> AlexDaniel: I would not be surprised if the other shoe drops in a couple weeks, given that jnthn refered to "our next Perl 6 product" coming out around then.

[14:15] <japhb> If that timing is accurate, it's comfortably right between releases.

[15:33] <dogbert2_> bisect: uptime

[15:33] <bisectable6> dogbert2_, 22 hours, 59 minutes, and 24 seconds, 252.300781MiB maxrss. This is Rakudo version 2018.02.1-121-gde30c1621 built on MoarVM version 2018.02-27-g760b0913e implementing Perl 6.c.

[16:07] <timotimo> hey Kaiepi, can you look into endian.h for me? there's a moarvm pull request that introduces usage of some endian conversion functions that are missing at least on mac osx, and this gist here https://gist.github.com/panzi/6856583 has something for BSDs, too.

[16:08] <timotimo> https://github.com/MoarVM/MoarVM/pull/817

[16:34] <Kaiepi> sure

[16:35] <mr_ron> m: class Proxy2 is Proxy {method m {say "proxy2 method m"}}; my $p = Proxy2.new(FETCH => method {3}, STORE => {4.5}); # how to invoke Proxy2 method m ???

[16:35] <camelia> rakudo-moar 5031dab3a: ( no output )

[16:36] <mr_ron> m: class Proxy2 is Proxy {method m {say "proxy2 method m"}}; my $p = Proxy2.new(FETCH => method {3}, STORE => {4.5}); $p.m # container doesn't work - wouldn't expect

[16:36] <camelia> rakudo-moar 5031dab3a: OUTPUT: «No such method 'm' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[16:36] <mr_ron> m: class Proxy2 is Proxy {method m {say "proxy2 method m"}}; my $p = Proxy2.new(FETCH => method {3}, STORE => {4.5}); $p.VAR.m

[16:36] <camelia> rakudo-moar 5031dab3a: OUTPUT: «No such method 'm' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[16:39] <Zoffix> mr_ron: RT#130403

[16:39] <synopsebot> RT#130403 [new]: https://rt.perl.org/Ticket/Display.html?id=130403 [OO] cannot subclass Proxy

[16:40] <Kaiepi> how would i test the debug server?

[16:41] <Kaiepi> timotimo

[16:41] <Zoffix> mr_ron: depending on what you need you could do something like what Proxee does and close over some object when making a Proxy

[16:42] <timotimo> Kaiepi: just compiling would be enough, i expect

[16:42] <Zoffix> m: my $x := do { my $c := class Proxy2 { method m { say "proxy2" } }; Proxy.new: :STORE(-> $, $ {}), :FETCH{ $c.m } }; $x

[16:42] <camelia> rakudo-moar 5031dab3a: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $x in sink context (line 1)␤»

[16:42] <mr_ron> Zoffix: reading through channel log from RT - thanks

[16:42] <Zoffix> m: my $x := do { my $c := class Proxy2 { method m { say "proxy2" } }; Proxy.new: :STORE(-> $, $ {}), :FETCH{ $c.m } }; say $x

[16:42] <camelia> rakudo-moar 5031dab3a: OUTPUT: «proxy2␤proxy2␤proxy2␤proxy2␤proxy2␤proxy2␤proxy2␤proxy2␤proxy2␤proxy2␤proxy2␤True␤»

[16:42] <timotimo> https://travis-ci.org/MoarVM/MoarVM/jobs/353086786#L809 - this is how it fails on mac osx

[16:42] <Zoffix> eco: Proxee

[16:42] <buggable> Zoffix, Proxee 'A more usable Proxy with bells': https://github.com/zoffixznet/perl6-Proxee

[16:43] <timotimo> but actually i need endian switching in just a single place and there it's for basically a constant anyway

[16:43] <timotimo> so i'll just write it by hand

[16:48] <Kaiepi> where do i put portable_endian.h timotimo?

[16:48] <mr_ron> Zoffix: interesting with respect to RT 126198 - chan log from rt you mention has 'the magic of Proxy is hardwired into it's new method'.  https://irclog.perlgeek.de/perl6/2016-12-25#i_13797157

[16:48] <synopsebot> RT#126198 [new]: https://rt.perl.org/Ticket/Display.html?id=126198 [BUG] Defining a Proxy with methods instead of subs leads to surprising results in Rakudo

[16:49] <timotimo> i didn't do anything with it yet, tbh. put it anywhere and add an #include to it near the beginning of debugserver.c

[16:52] <Kaiepi> compiling runs fine

[16:54] <timotimo> i've actually decided against using the standard endian switch function

[16:57] <timotimo> because seriously, including a file more than a hundred lines long might just be overkill to get a function i can write in 7 lines + 3 lines of preprocessor instructions

[16:58] <timotimo> oh, i also need to get stdbool.h in there for platforms like MSVC who don't have it m(

[16:59] <timotimo> except i'll use three lines of #define instead

[17:07] <timotimo> man, these travis mac machines take hours to boot

[17:10] <FROGGS> maybe their owners need to find the right power cords first?

[17:10] <timotimo> :D :D

[17:10] <timotimo> it takes a while to connect to the network because travis can only afford three mac network cable adapters

[17:10] <FROGGS> and looking for the right cord in the floor is problematic because of the scarf, you know

[17:10] <FROGGS> hehe

[17:11] <timotimo> "thunderbolt to gigabit ethernet adapter" "$ 29.00"

[17:19] <timotimo> bleeehhhh, cmp itself is trying to #include <stdbool.h> i don't want to fork the project just to delete this one line

[17:23] <[Coke]> tbrowder's CLA has been received. Need the github ID to complete the sheet, but go ahead and add him. Sorry about the delay, tb.

[17:35] <AlexDaniel> \o/

[17:39] <[Coke]> 18:10 < timotimo> :D :D

[17:40] <[Coke]> 18:10 < timotimo> it takes a while to connect to the network because travis can only afford three mac network cable adapters

[17:40] <[Coke]> whoops, accidental cut and paste from same window. :)

[18:17] <tbrowder_> no problemo!

[18:17] <tbrowder_> just glad it got there!

[20:02] <Geth> ¦ roast: ae728d206a | usev6++ | 3 files

[20:02] <Geth> ¦ roast: [JVM] Unfudge some passing tests

[20:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ae728d206a

[20:22] <Geth> ¦ roast: 28c0297abd | usev6++ | S16-filehandles/filetest.t

[20:22] <Geth> ¦ roast: Adjust code for touching a file

[20:22] <Geth> ¦ roast:

[20:22] <Geth> ¦ roast: We just removed a test for open(:create) as questionable, so

[20:22] <Geth> ¦ roast: we shouldn't use this to touch a file.

[20:22] <Geth> ¦ roast: Compare https://github.com/perl6/roast/commit/24822cf173cfbdbf859efd4121ccebad9a70a5a3

[20:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/28c0297abd

[20:43] <Geth> ¦ roast: 77a8c4916d | usev6++ | S16-io/print.t

[20:43] <Geth> ¦ roast: [JVM] Skip test that uses atomicint

[20:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/77a8c4916d

[20:52] <Geth> ¦ rakudo: 4054ca6832 | (Elizabeth Mattijsen)++ | src/core/Channel.pm6

[20:52] <Geth> ¦ rakudo: Streamline Channel.receive/receive-nil-on-close

[20:52] <Geth> ¦ rakudo:

[20:52] <Geth> ¦ rakudo: There is no difference between these two methods apart from the return

[20:52] <Geth> ¦ rakudo: value when the Channel closes.  Therefore, it was implemented with a

[20:52] <Geth> ¦ rakudo: private method taking a flag.

[20:52] <Geth> ¦ rakudo:

[20:52] <Geth> ¦ rakudo: However, when you use .hyper on something longer running, the profile

[20:52] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[20:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4054ca6832

[20:55] <lizmat> jnthn: I think the real problem is that the batch producer in many cases is not producing batches fast enough

[20:56] <lizmat> which in turn causes fewer workers to be created, because the workers available can handle the load easily

[20:56] <lizmat> so I'm focusing now on making production of batches faster

[20:58] * timotimo is just booking his hotel room for GPW2018

[21:22] <jnthn> lizmat: Hm, but batching is mostly just iterating the underlying data source

[21:23] <jnthn> And I think we fill batches with a push- method on the iterator

[21:23] <lizmat> push-exactly indeed

[21:23] <jnthn> But sure, can see what's possible to tune.

[21:23] <lizmat> the main problem with produce-batch is that it doesn't JIT

[21:24] <jnthn> Hmm

[21:24] <jnthn> Check the bail log, I guess

[21:24] <lizmat> I guess it was the =:= IterationEnd

[21:33] <lizmat> jnthn: is there a deeper reason why CHANNEL_CLOSE / CHANNEL_FAIL are classes rather than Mu.new instances ?

[21:34] <dogbert17> m: say () X+ (1, 2)

[21:34] <camelia> rakudo-moar 4054ca683: OUTPUT: «This type (Scalar) does not support elems␤  in block <unit> at <tmp> line 1␤␤»

[21:35] <jnthn> lizmat: I don't think so; maybe spesh can reason about type stuff a tad easier, the cost of a constant comparison probably comes out at the cost of a guard, so it's likely a wash either way

[21:36] <jnthn> Ohhh

[21:36] <jnthn> And I think FAIL has to be because it carries an exception object, no? :)

[21:36] <gfldex> dogbert17: that error message is a nice example of accidental wisdom :)

[21:36] <jnthn> So it's not just a sentinel

[21:36] <jnthn> CLOSE I think is

[21:37] <jnthn> So perhaps I did 'em both as lexical classes just to be uniform :)

[21:38] <dogbert17> m: say [] X+ [1, 2]

[21:38] <camelia> rakudo-moar 4054ca683: OUTPUT: «()␤»

[21:43] <dogbert17> gfldex: indeed :)

[21:43] <lizmat> hmmm... running a --profile on the same .hypering code, produces wildly differently sized .html files (60MB - 342MB)  # timotimo jnthn

[21:47] <timotimo> probably has to do with massively fluctuating depths of backtraces from resuming continuations

[21:48] <lizmat> guess so... is that issue on the radar ?

[21:48] <timotimo> it's on mine, but i'm not sure i can do anything much :)

[21:48] <lizmat> :-(

[21:55] <timotimo> i haven't checked out the internals of continuations yet

[21:55] <timotimo> that's what i mean

[22:05] <samcv> greppable6: Encoding::Builtin

[22:05] <greppable6> samcv, Found nothing!

[22:05] <samcv> greppable6: Encoding::Encoder

[22:05] <greppable6> samcv, 1 lines, 1 modules: https://gist.github.com/68d75c0dc03fec0daa0dfc8115910fb4

[22:05] <samcv> greppable6: Encoding::Decoder

[22:05] <greppable6> samcv, 1 lines, 1 modules: https://gist.github.com/46abe7ca5984fc0eb1f3023faa34541d

[22:05] <samcv> greppable6: .encoder

[22:06] <greppable6> samcv, 268 lines, 21 modules: https://gist.github.com/31346948763948b55314dbbb8b98a59e

[22:06] <samcv> greppable6: \.encoder

[22:06] <greppable6> samcv, 3 lines, 2 modules: https://gist.github.com/477d55f3219cd990125bd2c37680b1ca

[22:48] <Geth> ¦ rakudo: 87815ee45c | (Zoffix Znet)++ | docs/archive/2018-03-04--Polishing-Rationals.md

[22:48] <Geth> ¦ rakudo: Dial down promised perf imrpovements

[22:48] <Geth> ¦ rakudo:

[22:48] <Geth> ¦ rakudo: Since this'll be part of TPF proposal, better to underpromise

[22:48] <Geth> ¦ rakudo: than to overpromise.

[22:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/87815ee45c

[22:59] <Geth> ¦ rakudo: 598832cc3a | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperPipeline.pm6

[22:59] <Geth> ¦ rakudo: Reduce the number of DYNAMIC calls when hypering

[22:59] <Geth> ¦ rakudo:

[22:59] <Geth> ¦ rakudo: In a profile of '^Inf .hyper.grep( *.is-prime ).skip(9999).head', calls

[22:59] <Geth> ¦ rakudo: to DYNAMIC to 576 CPU msecs.  With this patch it goes down to 0.07 msecs.

[22:59] <Geth> ¦ rakudo: So this should have at least have a positive effect on total CPUY usage

[22:59] <Geth> ¦ rakudo: when hypering.

[22:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/598832cc3a

[23:09] <Geth> ¦ rakudo: eff92f94b4 | (Elizabeth Mattijsen)++ | src/core/Channel.pm6

[23:09] <Geth> ¦ rakudo: Streamline Channel.poll

[23:09] <Geth> ¦ rakudo:

[23:09] <Geth> ¦ rakudo: Makes Channel.poll 2x as fast, which results in 7 msecs CPU less on things

[23:09] <Geth> ¦ rakudo: like say ^Inf .hyper.grep( *.is-prime ).skip(9999).head

[23:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eff92f94b4

[23:10] <timotimo> oh, nice

[23:22] <Geth> ¦ rakudo: 8026cef847 | (Elizabeth Mattijsen)++ | 2 files

[23:22] <Geth> ¦ rakudo: Streamline HyperIteratorBatcher.produce-batch

[23:22] <Geth> ¦ rakudo:

[23:22] <Geth> ¦ rakudo: Also streamline creation of HyperWorkBatch.  This brings down CPU usage of

[23:22] <Geth> ¦ rakudo: .produce-batch from 22 msecs to 6 msecs for something like:

[23:22] <Geth> ¦ rakudo:    say ^Inf .hyper.grep( *.is-prime ).skip(9999).head

[23:22] <Geth> ¦ rakudo: *and* it now gets JITted.  Being able to produce batches faster is important

[23:22] <Geth> ¦ rakudo: because then the scheduler is likely to create more workers, which then

[23:22] <Geth> ¦ rakudo: results in lower wallclock times.

[23:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8026cef847

[23:23] * lizmat calls it a day&

[23:28] <jnthn> lizmat++ :)

[23:32] <Geth> ¦ rakudo: samcv++ created pull request #1617: Add strict, replacement options for IO::Handle, Str.encode & other fixes

[23:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1617

[23:34] <Geth> ¦ nqp: 6282394125 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[23:34] <Geth> ¦ nqp: Bump MoarVM, bringing in debugger and encoding improvements

[23:34] <Geth> ¦ nqp:

[23:34] <Geth> ¦ nqp: Changes: 2018.02-39-g38eb2bd..2018.02-158-g449c7214f

[23:34] <Geth> ¦ nqp: 0c64f6979 install debugserver.h

[23:34] <Geth> ¦ nqp: 12b1d49a6 MSVC has _strtoi64 instead of strtoll

[23:34] <Geth> ¦ nqp: 14edd2af9 mark functions MVM_PUBLIC

[23:34] <Geth> ¦ nqp: f3fa1db5f bump cmp dependency

[23:34] <Geth> ¦ nqp: <…commit message has 113 more lines…>

[23:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6282394125

[23:34] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.02-39-g38eb2bd...2018.02-158-g449c7214f

[23:35] <Geth> ¦ rakudo: ffeff74e18 | (Samantha McVey)++ | tools/build/NQP_REVISION

[23:35] <Geth> ¦ rakudo: Bump Moar/NQP bringing in new debugger and encoding improvements

[23:35] <Geth> ¦ rakudo:

[23:35] <Geth> ¦ rakudo: For full changeset see:

[23:35] <Geth> ¦ rakudo: https://github.com/MoarVM/MoarVM/compare/2018.02-39-g38eb2bd...2018.02-158-g449c7214f

[23:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ffeff74e18

[23:35] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.02-93-gecb7a26...2018.02-94-g628239412

[23:35] <AlexDaniel> yey

[23:44] <timotimo> "commit message has 113 more lines" %)

[23:55] <Geth> ¦ geth: bafe0c6aa4 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/Geth/GitHub/Hooks.pm6

[23:55] <Geth> ¦ geth: Fix silence on merge of large PRs

[23:55] <Geth> ¦ geth:

[23:55] <Geth> ¦ geth: Apparently in those cases p6w.input has a bunch of strings, not Bufs

[23:55] <Geth> ¦ geth: review: https://github.com/perl6/geth/commit/bafe0c6aa4
