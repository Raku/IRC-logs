[00:11] *** lizmat joined
[00:12] *** benjikun joined
[00:16] *** lizmat left
[01:47] *** ggoebel left
[01:54] *** perlpilot joined
[02:02] *** ggoebel joined
[02:45] *** ggoebel left
[02:48] *** perlpilot left
[02:52] *** ufobat_ joined
[02:55] *** ufobat left
[02:59] *** ggoebel joined
[03:56] *** BenGoldberg left
[04:09] *** benjikun left
[04:25] *** skids joined
[05:04] *** skids left
[06:42] *** brrt joined
[06:43] <[Tux]> .tell lizmat ; re test-t/PP, yes: time. When I started the tests took way too long. I started with two tests. There are now *39* tests running is a sequence. Twice. If you want tests added (for whatever reason) just yell

[06:43] <yoleaux> [Tux]: I'll pass your message to lizmat.

[06:43] <brrt> \o

[07:02] *** robertle joined
[07:15] *** lizmat joined
[07:15] <Geth> ¬¶ nqp/truffle: dd16ea0a7a | (Pawe≈Ç Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/expression/NQPCoerceIntToStrNode.java

[07:15] <Geth> ¬¶ nqp/truffle: [truffle] Add missing file

[07:15] <Geth> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/dd16ea0a7a

[07:16] <lizmat> Files=1242, Tests=76407, 320 wallclock secs (15.59 usr  5.34 sys + 2219.84 cusr 219.86 csys = 2460.63 CPU)

[07:16] <yoleaux> 06:43Z <[Tux]> lizmat: ; re test-t/PP, yes: time. When I started the tests took way too long. I started with two tests. There are now *39* tests running is a sequence. Twice. If you want tests added (for whatever reason) just yell

[07:16] <[Tux]> Rakudo version 2018.06-37-g587cd4f9e - MoarVM version 2018.06-34-g411f73fdc

[07:16] <[Tux]> csv-test-xs-20      0.460 -  0.464

[07:16] <[Tux]> csv-ip5xs           0.894 -  0.898

[07:16] <[Tux]> test-t --race       0.966 -  0.974

[07:16] <[Tux]> test-t              2.291 -  2.310

[07:16] <[Tux]> csv-ip5xs-20        7.248 -  7.418

[07:16] <[Tux]> test                8.698 -  8.890

[07:16] <[Tux]> test-t-20 --race   14.046 - 14.427

[07:16] <[Tux]> csv-parser         22.985 - 26.947

[07:16] <[Tux]> test-t-20          40.883 - 41.231

[07:25] <lizmat> weekly: https://docs.google.com/forms/d/e/1FAIpQLSdqrrcxTQWuN1ISAvz3j_XkpCCc2AuQw9uKgAhTivxHBFsweg/viewanalytics

[07:25] <notable6> lizmat, Noted!

[07:26] *** ufobat_ left
[07:26] <lizmat> [Tux]: just for reference, if you could add the results of the Pure Perl 5 version, that would be excellent

[07:28] <[Tux]> you meanto this list as just posted?

[07:29] <lizmat> no, I mean just now, once  :-)   (sorry, not quite awake yet(

[07:29] <lizmat> )

[07:29] <lizmat> )

[07:29] <lizmat> :-)

[07:30] <[Tux]> curl https://tux.nl/Talks/CSV6/speed-all.log | grep test-pp

[07:31] <[Tux]> enough?

[07:31] <lizmat> yup

[07:32] <lizmat> 2018-06-29 08:52:02 csv-test-pp 0.681

[07:32] <lizmat> so, yhe

[07:32] <lizmat> so the test-t --race is only about 1.5x slower than the pure perl 5 version

[07:33] <lizmat> and test-t is about 3x slower than the pure perl 5 version

[07:34] *** pmurias joined
[07:34] <pmurias> MasterDuke: sorry, I forgot to add a file again :(

[07:35] <pmurias> MasterDuke: I have to set up travis to have it complain

[07:42] *** pmurias left
[07:46] *** pmurias joined
[08:12] <lizmat> hmmm...  do we have an easy way to create a sub that will take a thunk (rather than an explicit Callable)?

[08:13] <lizmat> so you could write:  foo DBIish.connect(...)   instead of having to add curlies:   foo { DBIish.connect( ... ) }

[08:14] <lizmat> if not, maybe some parameter trait could do it:

[08:14] <lizmat> sub foo( &code is thunked ) { ... } ?

[08:17] <Geth> ¬¶ nqp: 255b8dd7e7 | ÈôàÊ¢ìÁ´ã++ (committed using GitHub Web editor) | t/nqp/022-optional-args.t

[08:17] <Geth> ¬¶ nqp: Half resolve XXX on optional-args.t

[08:17] <Geth> ¬¶ nqp: 

[08:17] <Geth> ¬¶ nqp: Confused by why NQP complains:

[08:17] <Geth> ¬¶ nqp:   Cannot find method 'defined': no method cache and no .^find_method

[08:17] <Geth> ¬¶ nqp: 

[08:17] <Geth> ¬¶ nqp: Since we have a method called `defined` in NQPMu.

[08:17] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/255b8dd7e7

[08:48] *** [TuxCM] left
[08:58] *** brrt left
[10:00] *** brrt joined
[10:04] <jnthn> lizmat: That's what macros will be fore :)

[10:04] <jnthn> *for

[10:04] <lizmat> yeah, I guess 

[10:04] <jnthn> Or, if you're daring enough to use their experimental form, what they're for now :P

[10:04] <lizmat> hmmm....

[10:06] <lizmat> not a lot of useful documentation about macros  :-(

[10:06] *** brrt left
[10:08] <jnthn> Well yeah, we don't want anyone to use them really :P

[10:08] <jnthn> Since we'll rip the rug out from under them later

[10:08] <lizmat> yeah... well, then I'm not going to provide examples of code to be ripped out

[10:09] <jnthn> Ah, I thought it was for use in a module that you'd be willing to update when needed :)

[10:09] <jnthn> Anyway, I think for now "wrote 2 extra chars" isn't such a hardship :)

[10:10] <jnthn> (e.g. wrap the thing up in curlies)

[10:10] <jnthn> s/wrote/write/ 

[10:12] <lizmat> yeah, it's  now documented and uploaded: http://modules.perl6.org/dist/Object::Trampoline

[10:14] *** [TuxCM] joined
[10:14] <jnthn> ah, I see

[10:14] <lizmat> afk for a bit&

[10:15] <jnthn> I've quite a few times missed a thread-safe `defer { ... }` style thingy that gives back an `Awaitable` but only triggers the work on the first `await`, and in the future simply gives back the completed work

[10:30] *** robertle left
[11:02] <Geth> ¬¶ nqp: 395898aabe | ÈôàÊ¢ìÁ´ã++ (committed using GitHub Web editor) | t/nqp/022-optional-args.t

[11:02] <Geth> ¬¶ nqp: Remove XXX since $y here is int instead of object, thus has no .defined

[11:02] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/395898aabe

[11:07] *** robertle joined
[12:15] <lizmat> weekly: https://github.com/shlomif/perl6-benchmarks

[12:15] <notable6> lizmat, Noted!

[12:16] <lizmat> jnthn: are you saying that trampoline { } does that for you now?  Or am I missing something?

[12:17] *** brrt joined
[12:17] *** ExtraCrispy left
[12:20] *** ExtraCrispy joined
[12:23] <jnthn> lizmat: Yes, I'm saying that writing the { ... } on the caller side isn't really so big of a hardship :)

[12:24] <lizmat> so maybe I should call it "defer" and put it in as a real Perl 6 module, rather than a port ?>

[12:26] <jnthn> Well, could also do that, though it's not identical functionality

[12:27] <jnthn> It seems Object::Trampoline lets you store up method calls that should be run later

[12:27] <jnthn> Which is maybe useful for something also :)

[12:27] <jnthn> So it's more a "in addition to" rather than "instead of"

[12:27] <lizmat> well, it lets you create an ersatz object that will become real as soon as you call any method on it

[12:28] <lizmat> it will only take *one* method call to make it real

[12:28] <jnthn> ah, right

[12:29] <lizmat> but you can stack them in the sense that the code of an ersatz object can contain another ersatz object

[12:29] <lizmat> my $dbh = trampoline { DBIish.connect: ... }

[12:29] <lizmat> my $sth = trampoline { $dbh.prepare: 'select foo from bar' }

[12:29] <lizmat> so as soon as you call $sth.execute, it will both realize $dbh and $sth into their intended state

[12:31] <lizmat> my $awaitable = trampoline { start { work } }   # shouldn't that do what you mean ?

[12:32] <lizmat> so basically "defer" would be "trampoline start { } ?

[12:32] <timotimo> but await won't know that this trampoline should be treated as an awaitable

[12:32] <timotimo> i.e. it won't know what to do when you await it

[12:33] <lizmat> when you await something, it calls a method on the Awaitable, does it not ?>

[12:33] <timotimo> m: say await 1

[12:33] <camelia> rakudo-moar 587cd4f9e: OUTPUT: ¬´Must specify a Promise, Channel, or Supply to await on (got a Int)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:33] <timotimo> m: say await 1 but Awaitable

[12:33] <camelia> rakudo-moar 587cd4f9e: OUTPUT: ¬´Method 'get-await-handle' must be implemented by Int+{Awaitable} because it is required by roles: Awaitable.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:33] <lizmat> so there

[12:33] <lizmat> I think that should work, lemme see

[12:33] <jnthn> lizmat: There's no way to implement it with 6.c await

[12:34] <jnthn> But the point is that it would *not* return a Promise, but rather something else that is Awaitable

[12:34] <jnthn> But yes, you'd then make `get-await-handle` do the interesting thing :)

[12:34] <lizmat> *any* method call will do the right thing, so I think it should work

[12:35] <jnthn> huh?

[12:35] * jnthn is confused :)

[12:36] <timotimo> but await won't do a method call on the trampoline object

[12:36] <timotimo> it'll just complain that it's not a promise, channel, or supply

[12:36] <jnthn> timotimo: In 6.c, yes :)

[12:36] <lizmat> yeah, unfortunately

[12:36] <timotimo> or does the typecheck cause it to become the thing?

[12:36] <jnthn> Ah, I think that's what you're explaining

[12:36] <jnthn> I'm not sure if `defer` is even a really good name for it :)

[12:37] <lizmat> well, that's why I kept the "trampoline" nomer for now

[12:49] *** robertle left
[12:52] *** robertle joined
[12:53] *** robertle left
[13:01] <Geth> ¬¶ rakudo: ea161384d3 | (Elizabeth Mattijsen)++ | src/core/asyncops.pm6

[13:01] <Geth> ¬¶ rakudo: Simplify await()

[13:01] <Geth> ¬¶ rakudo: 

[13:01] <Geth> ¬¶ rakudo: You should do the Awaitable role to be able to await on, not be a

[13:01] <Geth> ¬¶ rakudo: Promise, Channel or Supply per se.

[13:01] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/ea161384d3

[13:02] <lizmat> also cuts about 4K from the setting.moarvm

[13:13] *** [TuxCM] left
[13:18] <ilmari> lizmat: shouldn't the die message in the Any:D version be updated too?

[13:19] <lizmat> yeah, looking at that right now

[13:20] <lizmat> also considering to change s/Awaitable:D/Any:D/ for the functional await() to see if I can make it work with trampoline

[13:21] <jnthn> lizmat: argh no wht

[13:21] <lizmat> jnthn: what ?

[13:21] <lizmat> my commit ?  or what I'm doing afterwards

[13:21] <lizmat> ?

[13:21] <jnthn> Those are meant to be in 6.d

[13:21] <lizmat> the separate candidates ?

[13:22] <jnthn> The use of Awaitable in the `await` candidates

[13:22] <lizmat> came clean through spectests though?

[13:23] <lizmat> ah, you're saying asyncops is only in the d.setting >

[13:23] <lizmat> ?

[13:23] <jnthn> No, I'm saying that the `await` candidates that deal with Awaitable are in the 6.d setting

[13:24] <jnthn> We may get away with it, but I was intentionally keeping only Promise/Supply/Channel as things you can `await` in 6.c to make sure we preserved behavior there

[13:24] <lizmat> ah, ok

[13:25] <jnthn> We probably do get away with it, I guess

[13:25] <lizmat> judging by the spectest we do

[13:25] <lizmat> want me to revert or not?

[13:25] <jnthn> I just had the generalization of `await` to `Awaitable` down as "6.d behavior"

[13:25] <jnthn> I'm sure I had a good reason for that, but I forget what it is now :(

[13:26] <lizmat> I'll revert just in case, it was only because of DRY that I did that

[13:26] <Geth> ¬¶ rakudo: 5a4c95e7b2 | (Elizabeth Mattijsen)++ | src/core/asyncops.pm6

[13:26] <Geth> ¬¶ rakudo: Revert "Simplify await()"

[13:26] <Geth> ¬¶ rakudo: 

[13:26] <Geth> ¬¶ rakudo: This reverts commit ea161384d37b2e80b2a75c532dbb68dbb9492f27.

[13:26] <Geth> ¬¶ rakudo: 

[13:26] <Geth> ¬¶ rakudo: This should stay until 6.d

[13:26] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/5a4c95e7b2

[13:28] <jnthn> ah, ok

[13:28] <jnthn> That feels safer

[13:52] <Geth> ¬¶ rakudo: 84f60adad1 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm6

[13:52] <Geth> ¬¶ rakudo: Bring Baggy.perl inline with Setty.perl

[13:52] <Geth> ¬¶ rakudo: 

[13:52] <Geth> ¬¶ rakudo: Wrt to immutable bag() and mix().  This does not fix the fact that ().Set

[13:52] <Geth> ¬¶ rakudo: ().Bag and ().Mix now return the immutable set() bag() mix() respectively.

[13:52] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/84f60adad1

[14:10] *** travis-ci joined
[14:10] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Simplify await()

[14:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/398236256 https://github.com/rakudo/rakudo/compare/587cd4f9e53e...ea161384d37b

[14:10] *** travis-ci left
[14:10] <buggable> [travis build above] ‚ò† All failures are due to: failed make test (1 failure). Across all jobs, only t/05-messages/01-errors.t test file failed.

[14:23] *** squashable6 joined
[14:24] <lizmat> ok, should ().Set return set() or Set.new ?

[14:24] <lizmat> jnthn: ^^

[14:26] <jnthn> That's a good question. I guess on can never really rely on a coercer call giving a new object though, since it's just identity on something that's already that type.

[14:26] <lizmat> jnthn: same for ().Bag -> bag() or Bag.new ?   and ().Mix -> mix() or Mix.new "

[14:26] <jnthn> *one

[14:27] <lizmat> true

[14:27] <lizmat> m: dd set().Bag

[14:27] <camelia> rakudo-moar 84f60adad: OUTPUT: ¬´bag()‚ê§¬ª

[14:27] <b2gills> s/defer/later/ ??

[14:27] <jnthn> I think .new and .clone can be expected to always produce a new object, but I don't immediately feel that needs to extend to coercers

[14:28] <jnthn> b2gills: Well, it's more like if-needed, but we want one word :)

[14:28] <lizmat> ah, in that case, I need to change the .perl again

[14:28] <lizmat> s/defer/when-needed/

[14:28] <timotimo> procrastinate

[14:32] *** ExtraCrispy left
[14:34] *** ExtraCrispy joined
[14:35] <lizmat> .oO( that's just lazy )

[14:57] *** skids joined
[15:01] <Geth> ¬¶ rakudo: c37c3b5966 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm6

[15:01] <Geth> ¬¶ rakudo: Mark set()/bag()/mix() as pure

[15:01] <Geth> ¬¶ rakudo: 

[15:01] <Geth> ¬¶ rakudo: So that set/bag/mix with literal values can be created once at compile

[15:01] <Geth> ¬¶ rakudo: time, instead of at runtime.

[15:01] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/c37c3b5966

[15:14] <lizmat> m: my %h = a => 1, b => 0; dd Set.new(%h)

[15:14] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´(:b(0),:a(1)).Set‚ê§¬ª

[15:14] <lizmat> m: dd (:b(0),:a(1)).Set

[15:14] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´("a").Set‚ê§¬ª

[15:14] <lizmat> *sigh*

[15:32] <AlexDaniel> lizmat: fwiw rindolf++ http://colabti.org/irclogger/irclogger_log/perl6?date=2018-06-29#l811

[15:32] * lizmat makes a mental note

[15:32] <AlexDaniel> lizmat: I like it because I'm often confused by stuff like 2x faster in commit messages (which then end up in the changelog, because I'm not redoing the measurements)

[15:33] <AlexDaniel> and usually the changelog for a release has a variety of these

[15:33] <lizmat> yup

[15:33] <lizmat> so, if I said 10% faster, I meant 1.1x faster

[15:33] <AlexDaniel> newspeed √∑ oldspeed, and then ‚Äú5.5x as fast‚Äù ‚Äì this is very clean and understandable, I think

[15:33] <lizmat> that's how I always did it

[15:34] <AlexDaniel> 1.1x faster or 1.1x as fast?

[15:34] <AlexDaniel> :)

[15:34] <lizmat> what's the difference ?

[15:34] *** b2gills left
[15:34] <AlexDaniel> ‚Äú ‚Äútwo times faster‚Äù refers to the increase in speed and means that the speed ratio is 3:1, while ‚Äútwo times as fast‚Äù means that the speed ratio is 2:1 ‚Äù

[15:36] <AlexDaniel> ‚Äútwo times faster‚Äù is probably interpreted differently by different people

[15:36] <lizmat> yeah, it was identity for me before just now

[15:36] <lizmat> ok, I meant 10% faster is 1.1x as fast

[15:36] <AlexDaniel> \o/

[15:37] <lizmat> BTW, my calculation is always (newspeed - overhead) / (oldspeed - overhead)

[15:37] <jnthn> I also quite like "runs in 60% of the time it used to", which is also clear

[15:39] *** b2gills joined
[15:58] <AlexDaniel> actually, now I'm confused

[15:58] <AlexDaniel> in our case less time is better‚Ä¶

[15:59] <AlexDaniel> so it should be oldspeed √∑ newspeed, no?‚Ä¶

[15:59] <AlexDaniel> yes

[15:59] <lizmat> whatever, it's all relative  :-)

[16:01] *** eaterof joined
[16:09] *** skids left
[16:09] *** AlexDaniel`` left
[16:09] *** eater left
[16:09] *** [TuxCM] joined
[16:09] *** [TuxCM] left
[16:09] *** eaterof is now known as eater

[16:09] <lizmat> m: use nqp; dd nqp::iscont(Pair.new("a",True).item)   # this feels like it should say 1, right jnthn ?

[16:09] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´0‚ê§¬ª

[16:11] *** [TuxCM] joined
[16:12] *** squashable6 left
[16:14] *** skids joined
[16:14] *** undersightable6 joined
[16:14] *** AlexDaniel`` joined
[16:14] *** kornbluth.freenode.net sets mode: +v undersightable6

[16:15] <jnthn> m: say Pair ~~ Iterable

[16:15] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´False‚ê§¬ª

[16:15] <jnthn> lizmat: No, it's fine

[16:15] *** brrt left
[16:15] <lizmat> is it ?

[16:16] <lizmat> this breaks Set roundtripping if the Set contains pairs

[16:16] <jnthn> Yes, .item can return identity if the thing will not flatten

[16:17] <lizmat> m: my %h = a => 1, b => 0; dd %h.Set

[16:17] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´("a").Set‚ê§¬ª

[16:17] <lizmat> m: my %h = a => 1, b => 0; dd Set.new(%h)

[16:17] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´(:b(0),:a(1)).Set‚ê§¬ª

[16:17] *** benchable6 left
[16:17] <lizmat> m: dd (:b(0),:a(1)).Set

[16:17] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´("a").Set‚ê§¬ª

[16:17] *** Zoffix joined
[16:17] <Zoffix> There's a ticket on that topic R#1862

[16:17] <synopsebot> R#1862 [open]: https://github.com/rakudo/rakudo/issues/1862 [@LARRY] Some objects don't .item'ize even though they probably should

[16:17] *** AlexDaniel`` left
[16:18] <Zoffix> m: dd $_ for $(set <a b c>)

[16:18] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´:a‚ê§:c‚ê§:b‚ê§¬ª

[16:18] *** ilmari[m] left
[16:18] *** CIAvash[m] left
[16:18] <Zoffix> m: dd $_ for my $ = set <a b c>

[16:18] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´Set $ = ("a","b","c").Set‚ê§¬ª

[16:18] <Zoffix> So basically, $() / .item don't actually make `for` iterate over the item as an item.

[16:19] <jnthn> If something decides that it's going to implement .iterator without making itself Iterable, then it's on that type to also implement method item, I'd say

[16:20] <Zoffix> OK

[16:20] <lizmat> testing that for Pair now

[16:49] * jnthn away for a bit

[16:51] <lizmat> m: my @q = :p(1); dd @q[0]

[16:51] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´Pair @q = :p(1)‚ê§¬ª

[16:51] <lizmat> this will become: Pair @q = $(:p(1))

[16:52] <lizmat> and thus breaks 6 spectests  :-(

[16:53] <lizmat> m: 'my %h = a => 1, b => 0; dd Set.new(%h); dd Set.new(%h).perl.EVAL  # how badly do we want to fix this ?

[16:53] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3AL  # how badly do we want to fix this ?7‚èè5<EOL>‚ê§    expecting ‚Ä¶¬ª

[16:53] <lizmat> m: my %h = a => 1, b => 0; dd Set.new(%h); dd Set.new(%h).perl.EVAL  # how badly do we want to fix this ?

[16:53] <camelia> rakudo-moar c37c3b596: OUTPUT: ¬´(:b(0),:a(1)).Set‚ê§("a").Set‚ê§¬ª

[16:54] <lizmat> same for Bag / Mix, btw

[16:58] *** dogbert17 joined
[16:59] *** travis-ci joined
[16:59] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Mark set()/bag()/mix() as pure

[16:59] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/398287011 https://github.com/rakudo/rakudo/compare/84f60adad10f...c37c3b59665f

[16:59] *** travis-ci left
[17:02] <lizmat> afk&

[17:03] *** ilmari[m] joined
[17:08] *** hankache joined
[17:09] *** committable6 joined
[17:09] *** ChanServ sets mode: +v committable6

[17:09] *** bisectable6 joined
[17:09] *** releasable6 joined
[17:09] *** squashable6 joined
[17:14] *** benchable6 joined
[17:14] *** greppable6 joined
[17:17] *** Zoffix left
[17:27] <Geth> ¬¶ rakudo: e23e2f6808 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/speedup.p6

[17:27] <Geth> ¬¶ rakudo: Helper tool for perf improvement descriptions

[17:27] <Geth> ¬¶ rakudo: 

[17:27] <Geth> ¬¶ rakudo: This tool should help us consistify commit messages and changelog

[17:27] <Geth> ¬¶ rakudo: entries. It prints the preferred form (e.g. ‚Äú2x as fast‚Äù) to stdout

[17:27] <Geth> ¬¶ rakudo: and some extra variants are printed to stderr along with formulas that

[17:27] <Geth> ¬¶ rakudo: were used. Note that I'm proposing ‚Äú2x as fast‚Äù variant because it is

[17:27] <Geth> ¬¶ rakudo: very easy to calculate and relatively easy to understand. The script

[17:27] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 6 more lines‚Ä¶>

[17:27] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/e23e2f6808

[17:34] <Geth> ¬¶ rakudo: 0721bfa754 | (Zoffix Znet)++ | tools/speedup.p6

[17:34] <Geth> ¬¶ rakudo: Round the `of the time` measure as well

[17:34] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/0721bfa754

[17:34] *** AlexDaniel`` joined
[17:34] *** CIAvash[m] joined
[17:35] <Geth> ¬¶ nqp/W4anD0eR96-patch-1: 7369239b00 | ÈôàÊ¢ìÁ´ã++ (committed using GitHub Web editor) | src/core/testing.nqp

[17:35] <Geth> ¬¶ nqp/W4anD0eR96-patch-1: Add callback of nqp::spawnprocasync to catch exception

[17:35] <Geth> ¬¶ nqp/W4anD0eR96-patch-1: 

[17:35] <Geth> ¬¶ nqp/W4anD0eR96-patch-1: This will fix #467 , which now throw an exception with

[17:35] <Geth> ¬¶ nqp/W4anD0eR96-patch-1: 

[17:35] <Geth> ¬¶ nqp/W4anD0eR96-patch-1:   no such file or directory

[17:35] <Geth> ¬¶ nqp/W4anD0eR96-patch-1:      at gen/moar/stage2/NQPCORE.setting:1226  (NQPCORE.setting.moarvm:)

[17:35] <Geth> ¬¶ nqp/W4anD0eR96-patch-1: 

[17:35] <Geth> ¬¶ nqp/W4anD0eR96-patch-1: instead of hanging.

[17:36] <Geth> ¬¶ nqp/W4anD0eR96-patch-1: review: https://github.com/perl6/nqp/commit/7369239b00

[17:36] <Geth> ¬¶ nqp: W4anD0eR96++ created pull request #477: Add callback of nqp::spawnprocasync to catch exception

[17:36] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/477

[17:37] *** brrt joined
[17:43] *** lizmat left
[17:44] *** ggoebel left
[17:50] <Geth> ¬¶ nqp/W4anD0eR96-patch-2: 4971fb59a6 | ÈôàÊ¢ìÁ´ã++ (committed using GitHub Web editor) | t/nqp/114-pod-panic.t

[17:50] <Geth> ¬¶ nqp/W4anD0eR96-patch-2: More robust test

[17:50] <Geth> ¬¶ nqp/W4anD0eR96-patch-2: review: https://github.com/perl6/nqp/commit/4971fb59a6

[17:50] <Geth> ¬¶ nqp: W4anD0eR96++ created pull request #478: More robust test

[17:50] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/478

[18:03] *** ggoebel joined
[18:10] *** hankache left
[18:11] *** yoleaux joined
[18:40] *** j3nnn1 joined
[18:51] <tbrowder_> note that 6.d changes are being asked about on #perl6. yesterday i filed a new issue on roast for the 6.d proposed changes.

[19:19] <Geth> ¬¶ 6.d-prep: 638678d548 | (Zoffix Znet)++ (committed using GitHub Web editor) | README.md

[19:19] <Geth> ¬¶ 6.d-prep: Add more notes that this is a core dev doc

[19:19] <Geth> ¬¶ 6.d-prep: 

[19:19] <Geth> ¬¶ 6.d-prep: and not a list of changes for 6.d language

[19:19] <Geth> ¬¶ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/638678d548

[19:21] *** brrt left
[19:28] <Geth> ¬¶ nqp/new-runner-enable-execname: 77c71f547b | ÈôàÊ¢ìÁ´ã++ | 4 files

[19:28] <Geth> ¬¶ nqp/new-runner-enable-execname: Pass --execname to nqp thus nqp::execname() works

[19:28] <Geth> ¬¶ nqp/new-runner-enable-execname: review: https://github.com/perl6/nqp/commit/77c71f547b

[19:28] <Geth> ¬¶ nqp: W4anD0eR96++ created pull request #479: Pass --execname to nqp thus nqp::execname() works

[19:28] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/479

[19:29] <Geth> ¬¶ nqp/W4anD0eR96-patch-2: 4971fb59a6 | ÈôàÊ¢ìÁ´ã++ (committed using GitHub Web editor) | t/nqp/114-pod-panic.t

[19:29] <Geth> ¬¶ nqp/W4anD0eR96-patch-2: More robust test

[19:29] <Geth> ¬¶ nqp/W4anD0eR96-patch-2: review: https://github.com/perl6/nqp/commit/4971fb59a6

[19:33] *** [Tux] joined
[19:55] <MasterDuke> pmurias: ping

[19:55] <yoleaux> 28 Jun 2018 15:45Z <pmurias> MasterDuke: I added the int to str conversion

[19:55] <yoleaux> 28 Jun 2018 15:47Z <pmurias> MasterDuke: your attempt and doing the conversion didn't work is because smart_stringify expects something that returns an object

[19:55] <yoleaux> 28 Jun 2018 15:47Z <pmurias> MasterDuke: btw thank you for contributing

[19:55] <yoleaux> 28 Jun 2018 17:07Z <Zoffix> MasterDuke: just mentioning, in case these opts are JITable and you know how, but on this script from one of our users JIT bails on these: ctxouter, getcodename, setmethcache   https://raw.githubusercontent.com/shlomif/perl6-benchmarks/master/perl6-benchmarks/euler189/euler_189-2.p6

[20:22] *** bartolin_ left
[20:23] <tbrowder_> Zoffix: that doc is clear, i was hoping to see a comment on the roast issue.

[20:24] *** bartolin joined
[20:33] <Geth> ¬¶ nqp/new-runner-enable-execname: 85e6854063 | ÈôàÊ¢ìÁ´ã++ (committed using GitHub Web editor) | tools/build/install-jvm-runner.pl.in

[20:33] <Geth> ¬¶ nqp/new-runner-enable-execname: Update install-jvm-runner.pl.in

[20:33] <Geth> ¬¶ nqp/new-runner-enable-execname: review: https://github.com/perl6/nqp/commit/85e6854063

[20:36] *** Zoffix joined
[20:36] <Zoffix> tbrowder_: sorry, what sort of comment?

[20:36] <Geth> ¬¶ nqp/new-runner-enable-execname: 5689499fab | ÈôàÊ¢ìÁ´ã++ (committed using GitHub Web editor) | t/nqp/114-pod-panic.t

[20:36] <Geth> ¬¶ nqp/new-runner-enable-execname: Update 114-pod-panic.t

[20:36] <Geth> ¬¶ nqp/new-runner-enable-execname: review: https://github.com/perl6/nqp/commit/5689499fab

[20:38] <tbrowder_> instructions say to enter 6d proposals as roast issues. i was hoping for someone to look at my new roast issue GH #441.

[20:40] <Zoffix> tbrowder_: yeah, deprecating sounds good. If there's a way to emit a warning if the language is 6.d, then that'd be great, and it can be removed in 6.e

[20:41] <Zoffix> tbrowder_: the decision on whether to emit a warning would be done during compile time, right? Right when you're parsing the Pod table? Then you can just use $*W.lang-ver-before('d') as a conditional to decide whether to emit the warning. Like in here: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L5020-L5022

[20:42] <Zoffix> (that code changes behaviour based on language, not emits a warning, but it does use that conditional)

[20:44] <tbrowder_> ok, so how should i proceed, work on a pr for 6.d using your suggestions or?

[20:50] <Zoffix> tbrowder_: the change doesn't sound all that controvercial and all you're doing right now is making 6.d lang emit a warning. I'd just go ahead and commit directly.

[21:04] *** brrt joined
[21:08] <tbrowder_> ok, thanks.

[21:19] *** skids left
[21:24] <Geth> ¬¶ nqp: 7369239b00 | ÈôàÊ¢ìÁ´ã++ (committed using GitHub Web editor) | src/core/testing.nqp

[21:24] <Geth> ¬¶ nqp: Add callback of nqp::spawnprocasync to catch exception

[21:24] <Geth> ¬¶ nqp: 

[21:24] <Geth> ¬¶ nqp: This will fix #467 , which now throw an exception with

[21:24] <Geth> ¬¶ nqp: 

[21:24] <Geth> ¬¶ nqp:   no such file or directory

[21:24] <Geth> ¬¶ nqp:      at gen/moar/stage2/NQPCORE.setting:1226  (NQPCORE.setting.moarvm:)

[21:24] <synopsebot> NQP#467 [closed]: https://github.com/perl6/nqp/issues/467 [severe] nqp t/nqp/114-pod-panic.t hangs

[21:24] <Geth> ¬¶ nqp: 

[21:24] <Geth> ¬¶ nqp: instead of hanging.

[21:24] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/7369239b00

[21:24] <Geth> ¬¶ nqp: 67c01fe8fb | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/core/testing.nqp

[21:24] <Geth> ¬¶ nqp: Merge pull request #477 from perl6/W4anD0eR96-patch-1

[21:24] <Geth> ¬¶ nqp: 

[21:24] *** pmurias left
[21:24] <Geth> ¬¶ nqp: Add callback of nqp::spawnprocasync to catch exception

[21:24] *** brrt left
[21:24] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/67c01fe8fb

[21:25] *** pmurias joined
[21:58] *** pmurias left
[21:59] *** pmurias joined
[21:59] *** pmurias left
[22:01] *** lizmat joined
[22:20] <lizmat> hmmm... making Pair Iterable makes the installation process hang

[22:21] <jnthn> I'm not surprised

[22:23] <lizmat> so I figured the basic issue with roundtrippability of Set/Bag/Mix wrt to Pairs, is that the .perl of a Set does not distinguish between a Pair as a key, with a value, and any other key and a value

[22:23] *** MasterDuke left
[22:24] *** MasterDuke joined
[22:25] <lizmat> m: my $b = Pair.new("a",42).Bag; dd $b, $b.total

[22:25] <camelia> rakudo-moar 0721bfa75: OUTPUT: ¬´Bag $b = ("a"=>42).Bag‚ê§42‚ê§¬ª

[22:26] <lizmat> m: Bag.new(Pair.new("a",42)); dd $b, $b.total

[22:26] <camelia> rakudo-moar 0721bfa75: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$b' is not declared‚ê§at <tmp>:1‚ê§------> 3Bag.new(Pair.new("a",42)); dd 7‚èè5$b, $b.total‚ê§¬ª

[22:26] <lizmat> m: my #$b = Bag.new(Pair.new("a",42)); dd $b, $b.total

[22:26] <camelia> rakudo-moar 0721bfa75: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed my‚ê§at <tmp>:1‚ê§------> 3g.new(Pair.new("a",42)); dd $b, $b.total7‚èè5<EOL>‚ê§¬ª

[22:26] <lizmat> m: my $b = Bag.new(Pair.new("a",42)); dd $b, $b.total

[22:26] <camelia> rakudo-moar 0721bfa75: OUTPUT: ¬´Bag $b = (:a(42)).Bag‚ê§1‚ê§¬ª

[22:26] <lizmat> grrr

[22:27] <lizmat> note that the .perl output of both is the same, but the number of "elements" is different

[22:27] *** perlpilot joined
[22:27] <lizmat> well, the .perl is not the same, but when EVALled, it will be the same

[22:31] <lizmat> m: dd ($(:a(42))).Bag  # even if I itemize the Pair, it doesn't work like it should

[22:31] <camelia> rakudo-moar 0721bfa75: OUTPUT: ¬´("a"=>42).Bag‚ê§¬ª

[22:32] <lizmat> and that's because Pair doesn't have its own .item method

[22:33] <lizmat> adding Pair.item and adapting Pair.perl so that it checks for itemness, breaks several spectests :-(

[22:34] <jnthn> Hmm

[22:34] <jnthn> That's still less drastic than breaking the whole build ;)

[22:34] <lizmat> yeah, and I think it's more correct

[22:34] <jnthn> But yeah, we'd have to take a look at what the spectests are

[22:34] <lizmat> you could also argue, come to think of it

[22:35] <lizmat> that the .perl of Bag is too smart

[22:35] <lizmat> but no, because the same problem exists for Set

[22:36] <lizmat> m: dd Set.new(:a(42)=>0); dd Set.new(:a(42)=>0).perl.EVAL

[22:36] <camelia> rakudo-moar 0721bfa75: OUTPUT: ¬´((:a(42)) => 0).Set‚ê§().Set‚ê§¬ª

[22:36] <lizmat> ah, two tests

[22:38] <Geth> ¬¶ rakudo: 3cbf25e0f5 | (Elizabeth Mattijsen)++ | src/core/Pair.pm6

[22:38] <Geth> ¬¶ rakudo: Give Pair its own .item

[22:38] <Geth> ¬¶ rakudo: 

[22:38] <Geth> ¬¶ rakudo: And adapt .perl so that it checks for containerness.  This seems to

[22:38] <Geth> ¬¶ rakudo: be consistent (at least to me), and a prerequisite to problems with

[22:38] <Geth> ¬¶ rakudo: roundtripping QuantHashes.

[22:38] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/3cbf25e0f5

[22:38] <lizmat> grr... fixing problems

[22:38] <lizmat> ah no, 6 tests over 2 files

[22:43] <Geth> ¬¶ roast: 4abf48150f | (Elizabeth Mattijsen)++ | 2 files

[22:43] <Geth> ¬¶ roast: Fix tests wrt to containerness of Pair.perl

[22:43] <Geth> ¬¶ roast: 

[22:43] <Geth> ¬¶ roast: Which was changed in 3cbf25e0f5

[22:43] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/4abf48150f

[22:47] <Geth> ¬¶ roast/6.c-errata: a291e7f024 | (Elizabeth Mattijsen)++ | 2 files

[22:47] <Geth> ¬¶ roast/6.c-errata: Fix tests wrt to containerness of Pair.perl

[22:47] <Geth> ¬¶ roast/6.c-errata: 

[22:47] <Geth> ¬¶ roast/6.c-errata: Which was changed in 3cbf25e0f5

[22:47] <Geth> ¬¶ roast/6.c-errata: review: https://github.com/perl6/roast/commit/a291e7f024

[23:02] <lizmat> argh, I'm too tired for the rest

[23:02] <lizmat> more tomorrow

[23:02] <lizmat> &

[23:06] *** nativecallable6 joined
[23:06] *** statisfiable6 joined
[23:14] *** j3nnn1 left
