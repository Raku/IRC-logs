[01:28] <timotimo> lizmat: ConcBlockingQueue uses locks and blocks, lock-free data structures don't use locks :)

[10:01] <lizmat> timotimo: ah, ok, but then why isn't ConcBlockingQueue a lock-free data structure?

[10:01] <lizmat> inquiring minds need to know  :-)

[10:04] <lizmat> Files=1236, Tests=76246, 320 wallclock secs (14.74 usr  5.32 sys + 2192.84 cusr 217.47 csys = 2430.37 CPU)

[10:09] <samcv> so looks like i will have to wait for allowing different classes in 6.d since the encode/decode stuff is in classes

[10:09] <samcv> though apparently I can have subs that are different in that special file. so would I be able to just create subs for the methods in the classes to call?

[10:10] <samcv> and would that cause it to run different code based on 6.d or 6.c?

[10:18] <lizmat> timotimo: it appears I'm getting debugging output when doing a --profile

[10:19] <lizmat> "going to take a profiler snapshot" "took data from main thread" "skipped a thread" "done taking data"

[10:19] <lizmat> I can live with it, just wanted to let you know

[11:21] <lizmat> jnthn: would it make sense to add a "shift" to Concurrent::Stack and then use that in the ThreadPoolScheduler ?

[11:24] <lizmat> https://www.unicode.org/emoji/charts-11.0/emoji-released.html#1f99c   # too little, too late :-)

[11:40] <Geth> ¦ rakudo: 7835652d54 | (Elizabeth Mattijsen)++ | 4 files

[11:40] <Geth> ¦ rakudo: Make substr() just a front for Str.substr

[11:40] <Geth> ¦ rakudo:

[11:40] <Geth> ¦ rakudo: - allows objects to create their own .substr methods and have substr() see them

[11:40] <Geth> ¦ rakudo: - move all the substr() logic to Str.substr candidates

[11:40] <Geth> ¦ rakudo: - simplify the logic in each candidate for better inlinability

[11:40] <Geth> ¦ rakudo: - makes substr() up to 1.5x faster, and Str.substr() up to 3x faster

[11:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7835652d54

[11:42] <lizmat> I guess having a callsite in the setting explains the substr() improvements

[11:45] <lizmat> on to substr-rw

[12:38] <timotimo> lizmat: you can't block on the concurrent stack, which you often want if you have, for example, the ThreadPoolScheduler with threads waiting for jobs

[12:38] <yoleaux> 07:56Z <brrt> timotimo: the usual suspect for bigger-code in the expr jit is spilling

[12:38] <lizmat> timotimo: ah, yes, of course  :-)

[12:39] <timotimo> "blocking" on a new job getting available in the concurrent stack would be looping and polling with a sleep in the middle - or without, if you're sure you're going to get something soon

[12:39] <timotimo> imagine the ThreadPoolScheduler firing up 8 workers to satisfy one big workload and the rest of the program's life being single-threaded :D

[13:31] <dogbert2_> lizmat: could you try running ./perl6 t/05-messages/03-errors.t? Does it fail for you?

[13:32] <lizmat> indeed it does, looking into it

[13:32] <lizmat> spectest was clean, didn't expect any fallout in "make test"  :-(

[13:33] <dogbert2_> it's easy to forget those tests

[13:33] <lizmat> wonder how difficult it would be to make a target "make test+spectest"

[13:36] <dogbert2_> doesn't sound impossible

[13:36] <lizmat> well, I probably should just add a little discipline to myself  :-)

[13:50] <Geth> ¦ rakudo: b688a6f33c | (Elizabeth Mattijsen)++ | src/core/Str.pm

[13:50] <Geth> ¦ rakudo: Apparently a |c doesn't select the candidate

[13:50] <Geth> ¦ rakudo:

[13:50] <Geth> ¦ rakudo: Fixes error in error reporting in t/05-messages/03-errors.t .

[13:50] <Geth> ¦ rakudo: dogbert++ for spotting

[13:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b688a6f33c

[14:09] <lucasb> Any reason for substr to be in Any instead of Cool?

[14:10] <Geth> ¦ rakudo: 038837f8b2 | (Elizabeth Mattijsen)++ | 4 files

[14:10] <Geth> ¦ rakudo: Make substr-rw() just a front for Str.substr-rw

[14:10] <Geth> ¦ rakudo:

[14:10] <Geth> ¦ rakudo: - objects can create their own .substr-rw methods and have substr-rw() see them

[14:10] <Geth> ¦ rakudo: - move all the substr-rw() logic to Str.substr-rw candidate

[14:10] <Geth> ¦ rakudo: - simplify the logic, eradicate SUBSTR-SANITY helper method

[14:10] <Geth> ¦ rakudo: - makes substr-rw() up to 20% faster, and Str.substr-rw() up to 30% faster

[14:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/038837f8b2

[14:12] <lizmat> lucasb: the whole point of the exercise was so that you can create your own class Foo with a .substr method

[14:12] <lizmat> and that &substr(Foo:D) would also see that

[14:13] <lizmat> since most classes inherit from Any, rather than Cool, it seemed logical to me to put the proto and catcher methods there

[14:14] <lizmat> if we want to enforce that classes should inherit from Cool to be able to use .substr, then we could move them to Cool I guess

[14:14] <lizmat> hmmm...

[14:27] <lizmat> moving the substr proto to Cool tickles a test for RT #124455

[14:27] <synopsebot> RT#124455 [open]: https://rt.perl.org/Ticket/Display.html?id=124455 substr on compact array

[14:29] <lizmat> the test is already todo'd, but I guess we should skip it then

[14:31] <lizmat> m: subbuf

[14:31] <camelia> rakudo-moar b688a6f33: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    subbuf used at line 1␤␤»

[14:31] <lizmat> hmmm

[14:33] <dogbert2_> what happened to jnthn, did he go on vacation?

[14:34] <Geth> ¦ rakudo: aad79f8a98 | (Elizabeth Mattijsen)++ | 2 files

[14:34] <Geth> ¦ rakudo: Move substr/substr-rw catcher methods from Any to Cool

[14:34] <Geth> ¦ rakudo:

[14:34] <Geth> ¦ rakudo: lucasb++, zoffix++ for bringing this up

[14:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/aad79f8a98

[14:35] <lizmat> dogbert2_: by the looks of https://irclog.perlgeek.de/perl6-dev/2018-02-27#i_15865647 , I'd say yes

[14:36] <dogbert2_> cool, perhaps he's having a well deserved beer somewhere :-)

[14:36] <Geth> ¦ roast: b04cf46cae | (Elizabeth Mattijsen)++ | S02-types/compact.t

[14:36] <Geth> ¦ roast: Bogus tests started failing, so skip them instead of todo

[14:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b04cf46cae

[14:37] <Geth> ¦ roast/6.c-errata: 5e5e6ef13f | (Elizabeth Mattijsen)++ | S02-types/compact.t

[14:37] <Geth> ¦ roast/6.c-errata: Bogus tests started failing, so skip them instead of todo

[14:37] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/5e5e6ef13f

[14:39] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Apparently a |c doesn't select the candidate

[14:39] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/347277543 https://github.com/rakudo/rakudo/compare/7835652d54f6...b688a6f33c44

[15:03] <Geth> ¦ rakudo: 6f2cbcf797 | (Elizabeth Mattijsen)++ | src/core/Any.pm

[15:03] <Geth> ¦ rakudo: Remove no longer used helper sub

[15:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6f2cbcf797

[15:17] <Geth> ¦ rakudo: 15b9478642 | (Elizabeth Mattijsen)++ | src/core/atomicops.pm

[15:17] <Geth> ¦ rakudo: Make clearer what works where

[15:17] <Geth> ¦ rakudo:

[15:17] <Geth> ¦ rakudo: Started some refactoring, having missed the fact that only some of the subs

[15:17] <Geth> ¦ rakudo: work on each backend.

[15:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/15b9478642

[15:22] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make substr-rw() just a front for Str.substr-rw

[15:22] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/347285965 https://github.com/rakudo/rakudo/compare/b688a6f33c44...038837f8b292

[15:35] <Geth> ¦ rakudo: c3358851de | (Elizabeth Mattijsen)++ | src/core/atomicops.pm

[15:35] <Geth> ¦ rakudo: Add some more guidance in comments for atomics

[15:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c3358851de

[15:55] <Geth> ¦ rakudo: 51fccdfe8c | (Elizabeth Mattijsen)++ | src/core/atomicops.pm

[15:55] <Geth> ¦ rakudo: Make several atomic subs multi's

[15:55] <Geth> ¦ rakudo:

[15:55] <Geth> ¦ rakudo: - atomic-fetch-inc, postfix:<⚛++>

[15:55] <Geth> ¦ rakudo: - atomic-inc-fetch, prefix:<++⚛>

[15:55] <Geth> ¦ rakudo: - atomic-fetch-dec, postfix:<⚛-->

[15:55] <Geth> ¦ rakudo: - atomic-dec-fetch, prefix:<--⚛>

[15:55] <Geth> ¦ rakudo: - full-barrier

[15:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/51fccdfe8c

[16:02] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Move substr/substr-rw catcher methods from Any to Cool

[16:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/347296195 https://github.com/rakudo/rakudo/compare/038837f8b292...aad79f8a985f

[16:20] <lizmat_> m: nextcallee

[16:20] <camelia> rakudo-moar 51fccdfe8: OUTPUT: «nextsame is not in the dynamic scope of a dispatcher␤  in block <unit> at <tmp> line 1␤␤»

[16:21] <lizmat_> appears to not be in specs,  but is tested in S12-methods/defer-call.t and has no documentation I could find

[16:22] <lizmat_> https://github.com/perl6/doc/issues/1806

[16:25] <Geth> ¦ rakudo: 3a4056bf32 | (Elizabeth Mattijsen)++ | src/core/control.pm

[16:25] <Geth> ¦ rakudo: Make internal RETURN-LIST sub faster for common case

[16:25] <Geth> ¦ rakudo:

[16:25] <Geth> ¦ rakudo: If we're returning / take get a List, then probably it has more than 1

[16:25] <Geth> ¦ rakudo: element in it.

[16:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3a4056bf32

[16:46] <Geth> ¦ rakudo: 474c512c2d | (Elizabeth Mattijsen)++ | src/core/Cool.pm

[16:46] <Geth> ¦ rakudo: Make subs sprintf/printf/samecase/split multi's

[16:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/474c512c2d

[16:58] <Geth> ¦ rakudo: 4f04698f11 | (Elizabeth Mattijsen)++ | src/core/Hash.pm

[16:58] <Geth> ¦ rakudo: Make sub circumfix:<{ }> a multi

[16:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4f04698f11

[17:00] <lizmat_> m: multi sub term:<foo>($a) { "foo" }   # feels to be this should complain about multi-ness and having parameters ?

[17:00] <camelia> rakudo-moar 474c512c2: ( no output )

[17:00] <lizmat_> afk&

[17:14] <Geth> ¦ rakudo: fc643a215c | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/NativeCall.pm6

[17:14] <Geth> ¦ rakudo: Fix typo in comment

[17:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fc643a215c

[17:29] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Add some more guidance in comments for atomics'

[17:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/347324780 https://github.com/rakudo/rakudo/compare/15b947864256...c3358851de13

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: 91e1f222d6 | (Zoffix Znet)++ | 2 files

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: Differentiate precomp NC sub setup markers

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv:

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: Fixes https://github.com/rakudo/rakudo/issues/1576 R#1576

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv:

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: If a NativeCalled sub used is during precomp, it's marked as

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: `$!setup`. However, when it's later used in non-precomp environment,

[17:49] <synopsebot> R#1576 [open]: https://github.com/rakudo/rakudo/issues/1576 [SEGV] Assigning NativeCall return value to constant segfaults on calling the sub again

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: the stuff setup does is not available and so we get a SEGV.

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv:

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: Fix by using a separate marker for $!setup when we're in precomp

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: mode so that when we switch to non-precomp mode, we setup again.

[17:49] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: review: https://github.com/rakudo/rakudo/commit/91e1f222d6

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: 5556e4ff0b | (Zoffix Znet)++ | 2 files

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: Differentiate precomp NC sub setup markers

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv:

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: Fixes https://github.com/rakudo/rakudo/issues/1576 R#1576

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv:

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: If a NativeCalled sub used is during precomp, it's marked as

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: `$!setup`. However, when it's later used in non-precomp environment,

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: the stuff setup does is not available and so we get a SEGV.

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv:

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: Fix by using a separate marker for $!setup when we're in precomp

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: mode so that when we switch to non-precomp mode, we setup again.

[17:51] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: review: https://github.com/rakudo/rakudo/commit/5556e4ff0b

[17:51] <Geth> ¦ rakudo: zoffixznet++ created pull request #1577: Differentiate precomp NC sub setup markers

[17:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1577

[18:10] <[Tux]> Rakudo version 2018.02.1-74-gfc643a215 - MoarVM version 2018.02-22-g9233d85e7

[18:10] <[Tux]> csv-test-xs-20      0.438 -  0.476

[18:10] <[Tux]> csv-ip5xs           0.807 -  0.811

[18:10] <[Tux]> test-t --race       1.068 -  1.092

[18:10] <[Tux]> test-t              2.539 -  2.593

[18:11] <[Tux]> csv-ip5xs-20        7.599 -  7.623

[18:11] <[Tux]> test                9.167 -  9.174

[18:11] <[Tux]> test-t-20 --race   16.771 - 16.989

[18:11] <[Tux]> csv-parser         36.653 - 37.237

[18:11] <[Tux]> test-t-20          46.113 - 47.081

[18:53] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: b27c548fb6 | (Zoffix Znet)++ | 2 files

[18:53] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: Differentiate precomp NC sub setup markers

[18:53] <Geth> ¦ rakudo/fix-R-1576--native-call-segv:

[18:53] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: Fixes https://github.com/rakudo/rakudo/issues/1576 R#1576

[18:53] <Geth> ¦ rakudo/fix-R-1576--native-call-segv:

[18:53] <synopsebot> R#1576 [open]: https://github.com/rakudo/rakudo/issues/1576 [SEGV] Assigning NativeCall return value to constant segfaults on calling the sub again

[18:53] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: If a NativeCalled sub used is during precomp, it's marked as

[18:53] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: `$!setup`. However, when it's later used in non-precomp environment,

[18:53] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: the stuff setup does is not available and so we get a SEGV.

[18:54] <Geth> ¦ rakudo/fix-R-1576--native-call-segv:

[18:54] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: Fix by using a separate marker for $!setup when we're in precomp

[18:54] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: mode so that when we switch to non-precomp mode, we setup again.

[18:54] <Geth> ¦ rakudo/fix-R-1576--native-call-segv: review: https://github.com/rakudo/rakudo/commit/b27c548fb6

[19:36] <Geth> ¦ rakudo/optimize-boolification: 4a31d0daf7 | (Zoffix Znet)++ | src/core/Bool.pm

[19:36] <Geth> ¦ rakudo/optimize-boolification: Optimize boolification methods

[19:36] <Geth> ¦ rakudo/optimize-boolification:

[19:36] <Geth> ¦ rakudo/optimize-boolification: Replace .Bool calls with nqp::p6bool() in Bool.pm (other areas

[19:36] <Geth> ¦ rakudo/optimize-boolification: of the compiler still use the method call, which could be changed too)

[19:36] <Geth> ¦ rakudo/optimize-boolification:

[19:36] <Geth> ¦ rakudo/optimize-boolification: Using `my $x = …; {for ^3000_000 {my $ = ?$x}; say now - ENTER now}` Makes:

[19:36] <Geth> ¦ rakudo/optimize-boolification: - with Num; 9x faster

[19:36] <Geth> ¦ rakudo/optimize-boolification: - with `class {}.new`; 11% faster

[19:36] <Geth> ¦ rakudo/optimize-boolification: - with `class { method Bool { False } }.new` or `but False` of core types; 4.6x SLOWER

[19:36] <Geth> ¦ rakudo/optimize-boolification: - with an unmixed Int or Str, no change

[19:36] <Geth> ¦ rakudo/optimize-boolification: review: https://github.com/rakudo/rakudo/commit/4a31d0daf7

[19:37] <Geth> ¦ rakudo: zoffixznet++ created pull request #1578: Optimize boolification methods

[19:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1578

[20:06] <Geth> ¦ rakudo: 2a42cdbb2e | (Zoffix Znet)++ | src/core/Num.pm

[20:06] <Geth> ¦ rakudo: Make Num.Bool 9x faster

[20:06] <Geth> ¦ rakudo:

[20:06] <Geth> ¦ rakudo: Just use nqp ops to equate self to zero, instead of going

[20:06] <Geth> ¦ rakudo: through Numeric.Bool and trying to != against Int 0, using

[20:06] <Geth> ¦ rakudo: which would involve .Numerics and .Bridges

[20:06] <Geth> ¦ rakudo:

[20:06] <Geth> ¦ rakudo: Closes https://github.com/rakudo/rakudo/pull/1578 R#1578

[20:06] <synopsebot> R#1578 [closed]: https://github.com/rakudo/rakudo/pull/1578 Optimize boolification methods

[20:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2a42cdbb2e

[20:16] <Geth> ¦ roast: 979f3e20f8 | (Zoffix Znet)++ | S02-types/num.t

[20:16] <Geth> ¦ roast: Cover Num.Bool

[20:16] <Geth> ¦ roast:

[20:16] <Geth> ¦ roast: Accidentally introed a hang when working on

[20:16] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/2a42cdbb2e

[20:16] <Geth> ¦ roast: and the only thing that blocked was recent allomorph proptests,

[20:16] <Geth> ¦ roast: so it doesn't look like this is tested anywhere.

[20:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/979f3e20f8

[20:21] <AlexDaniel> bad news: evalable now segfaults on its tests

[20:21] <AlexDaniel> good news: I made it much easier to test locally

[20:21] <AlexDaniel> sooooo I guess everyone will be able to reproduce it now

[20:21] <AlexDaniel> (when I commit it at least)

[20:29] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make sub circumfix:<{ }> a multi'

[20:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/347362835 https://github.com/rakudo/rakudo/compare/474c512c2df8...4f04698f11c5

[20:53] <AlexDaniel> MasterDuke: \o/ https://github.com/perl6/whateverable/issues/122#issuecomment-369378922

[20:53] * AlexDaniel drops to bed

[21:10] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix typo in comment'

[21:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/347371409 https://github.com/rakudo/rakudo/compare/4f04698f11c5...fc643a215cd0

[21:11] <Geth> ¦ nqp: ef12d28506 | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/io/StandardReadHandle.java

[21:11] <Geth> ¦ nqp: [JVM] Fix readfh with stdin

[21:11] <Geth> ¦ nqp:

[21:11] <Geth> ¦ nqp: A return value of -1 from method read on InputStream signals end of file.

[21:11] <Geth> ¦ nqp: Also, the previous implementation didn't leave the while loop for large

[21:11] <Geth> ¦ nqp: inputs, since is.read returns 0 if it's third argument (bytes - offset)

[21:11] <Geth> ¦ nqp: is zero.

[21:11] <Geth> ¦ nqp:

[21:11] <Geth> ¦ nqp: <…commit message has 7 more lines…>

[21:11] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ef12d28506

[21:30] <Geth> ¦ nqp: bd2a8aca59 | usev6++ | docs/ops.markdown

[21:30] <Geth> ¦ nqp: Note that filenofh doesn't really work on the JVM

[21:30] <Geth> ¦ nqp:

[21:30] <Geth> ¦ nqp: It's hard (or impossible) to implement because the JVM hides things

[21:30] <Geth> ¦ nqp: like file descriptors. I tried to fiddle with sun.misc.SharedSecrets,

[21:30] <Geth> ¦ nqp: but to no avail. (But even if there is a way to use SharedSecrets in

[21:30] <Geth> ¦ nqp: combination with NIO, it would break with Java 9.)

[21:30] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/bd2a8aca59

[21:33] <jnthn> lizmat: Because a thread pool wants a queue, not a stack. Unless one has a very interesting idea of fairness. :-)

[21:33] <lizmat> jnthn: yes, there's that also

[21:33] <jnthn> But there's another thing going on here

[21:33] <lizmat> and what timotimo said: blocking for a new element

[21:34] <jnthn> Concurrent::Stack is a lock-free, non-blocking thing.

[21:34] <jnthn> It's possible to make a Concurrent::Queue like that, and I will

[21:34] <jnthn> The best that I'm aware you can do if you need blocking is to have separate head and tail locks

[21:34] <[Coke]> Any devs going to salt lake for TPCus this year?

[21:34] <jnthn> which is what MoarVM already does

[21:34] <[Coke]> (trying to figure out how early/late I should go)

[21:35] <jnthn> As to "why is the queue in the VM", because it's the way we dispatch events from the event loop to the thread pool

[21:35] <lizmat> [Coke]: seems I will at least be giving a 40 minute presentation there, so looks like I will be going :-)

[21:35] <[Coke]> \o/

[21:36] <lizmat> jnthn: seems like a shortcut is possble there ?

[21:36] <jnthn> Where? :)

[21:36] * jnthn isn't sure which of the things he said that is a response to :)

[21:38] <jnthn> If it's about the head/tail locks: we *may* be able to find a way to avoid the tail lock because we don't have a concept of "full" in ConcBlockingQueue. The head lock is required for its condition variable.

[21:38] <bartolin> Speaking of conferences: is anyone going to the German Perl Workshop? (I'm thinking about traveling to Cologne.)

[21:39] <jnthn> Which is how we signal non-empty

[21:39] <jnthn> bartolin: I'll be there for some of it

[21:39] <jnthn> (Thu, Fri, and the Sat hackathon until mid-late afternoon)

[21:39] <bartolin> oh, nice!

[21:40] <jnthn> I should submit my talks :)

[21:40] <lizmat> bartolin: I will be there as well

[21:40] <bartolin> \o/

[21:55] <bartolin> ha, I've now registered for the GPW

[21:56] <lizmat> \o/

[21:59] <lizmat> afk again&

[23:55] <travis-ci> Rakudo build passed. Zoffix Znet 'Make Num.Bool 9x faster

[23:55] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/347444572 https://github.com/rakudo/rakudo/compare/fc643a215cd0...2a42cdbb2e8f

[23:56] <Geth> ¦ rakudo: 423e7cc0de | (Elizabeth Mattijsen)++ | src/core/Junction.pm

[23:56] <Geth> ¦ rakudo: Make subs infix:<|>/infix:<&>/infix:<^> multi's

[23:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/423e7cc0de
