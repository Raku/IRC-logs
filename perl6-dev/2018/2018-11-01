[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 1 ballots submitted by 1 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 5! Congratulations to Ulti! You win a roll of duck tape!

[00:10] *** patrickb left
[00:18] *** cognominal-p6 left
[00:18] *** cognominal-p6 joined
[00:19] *** p6bannerbot sets mode: +v cognominal-p6

[00:48] *** cognominal-p6 left
[01:18] *** ggoebel joined
[01:19] *** p6bannerbot sets mode: +v ggoebel

[01:27] *** fake_space_whale joined
[01:28] *** p6bannerbot sets mode: +v fake_space_whale

[01:46] *** j3nnn1 left
[02:05] *** leont left
[02:23] <Geth> ¦ rakudo: donaldh++ created pull request #2454: Unbust t/*/*.t rule in generated Makefile

[02:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2454

[02:50] *** MasterDuke left
[03:09] <Geth> ¦ rakudo: donaldh++ created pull request #2457: Unbust literal \ in tr///

[03:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2457

[03:13] <Geth> ¦ roast: ccd5a0caf7 | (Donald Hunter)++ | S05-transliteration/trans-tr-lowercase-operator.t

[03:13] <Geth> ¦ roast: Add test for literal \ in tr/// for R#2456

[03:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ccd5a0caf7

[03:13] <synopsebot> R#2456 [open]: https://github.com/rakudo/rakudo/issues/2456 Literal \ broken in tr/// and TR///

[03:44] *** cognominal-p6 joined
[03:45] *** p6bannerbot sets mode: +v cognominal-p6

[03:48] *** lizmat left
[03:56] *** cognominal-p6 left
[03:56] *** cognominal-p6 joined
[03:57] *** p6bannerbot sets mode: +v cognominal-p6

[04:09] *** cognominal-p6 left
[04:55] <Geth> ¦ rakudo: 85107ec0c7 | (Donald Hunter)++ | src/Perl6/Grammar.nqp

[04:55] <Geth> ¦ rakudo: Unbust literal \ in tr///

[04:55] <Geth> ¦ rakudo: 

[04:55] <Geth> ¦ rakudo: This fixes R#2456

[04:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/85107ec0c7

[04:55] <Geth> ¦ rakudo: 549f53e4c9 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | src/Perl6/Grammar.nqp

[04:55] <Geth> ¦ rakudo: Merge pull request #2457 from donaldh/backslash-in-tr

[04:55] <synopsebot> R#2456 [open]: https://github.com/rakudo/rakudo/issues/2456 Literal \ broken in tr/// and TR///

[04:55] <Geth> ¦ rakudo: 

[04:55] <Geth> ¦ rakudo: Unbust literal \ in tr///

[04:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/549f53e4c9

[04:56] <Geth> ¦ rakudo: d2c7e32735 | (Donald Hunter)++ | Configure.pl

[04:56] <Geth> ¦ rakudo: Unbust t/*/*.t rule in generated Makefile

[04:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d2c7e32735

[04:56] <Geth> ¦ rakudo: 0bdf51809b | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | Configure.pl

[04:56] <Geth> ¦ rakudo: Merge pull request #2454 from donaldh/makefile

[04:56] <Geth> ¦ rakudo: 

[04:56] <Geth> ¦ rakudo: Unbust t/*/*.t rule in generated Makefile

[04:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0bdf51809b

[05:00] *** fake_space_whale left
[05:35] *** fake_space_whale joined
[05:35] *** p6bannerbot sets mode: +v fake_space_whale

[05:39] *** fake_space_whale left
[07:05] *** cognominal-p6 joined
[07:06] *** p6bannerbot sets mode: +v cognominal-p6

[07:07] *** cognominal-p6 left
[07:07] *** cognominal-p6 joined
[07:08] *** p6bannerbot sets mode: +v cognominal-p6

[07:30] *** cognominal-p6 left
[07:53] *** dalek left
[08:01] *** cognominal-p6 joined
[08:02] *** p6bannerbot sets mode: +v cognominal-p6

[08:08] *** cognominal-p6 left
[08:09] *** cognominal-p6 joined
[08:10] *** p6bannerbot sets mode: +v cognominal-p6

[08:16] *** Geth left
[08:30] *** ufobat joined
[08:30] *** p6bannerbot sets mode: +v ufobat

[08:39] *** cognominal-p6 left
[08:42] *** lizmat joined
[08:42] *** p6bannerbot sets mode: +v lizmat

[08:42] *** [Tux] left
[08:48] *** cognominal-p6 joined
[08:48] *** p6bannerbot sets mode: +v cognominal-p6

[08:49] *** [Tux] joined
[08:49] *** robertle joined
[08:49] *** p6bannerbot sets mode: +v [Tux]

[08:50] *** p6bannerbot sets mode: +v robertle

[08:54] *** Zoffix left
[08:54] *** cognominal-p6 left
[08:54] *** cognominal-p6 joined
[08:55] *** p6bannerbot sets mode: +v cognominal-p6

[09:36] *** ufobat left
[09:40] <lizmat> Files=1255, Tests=76385, 337 wallclock secs (16.00 usr  5.34 sys + 2370.49 cusr 227.21 csys = 2619.04 CPU)

[10:16] <lizmat> hmmm.  did we lose Geth ?

[10:27] *** ufobat joined
[10:28] *** p6bannerbot sets mode: +v ufobat

[10:31] *** SourceBaby left
[10:31] *** dalek joined
[10:31] *** ChanServ sets mode: +v dalek

[10:31] *** Geth joined
[10:31] *** ChanServ sets mode: +v Geth

[10:31] *** p6lert_ joined
[10:31] *** synopsebot_ joined
[10:31] *** ChanServ sets mode: +v synopsebot_

[10:31] *** p6lert left
[10:31] *** synopsebot left
[10:32] *** SourceBaby joined
[10:32] *** ChanServ sets mode: +v SourceBaby

[10:32] *** p6bannerbot sets mode: +v dalek

[10:32] *** synopsebot_ left
[10:32] *** p6bannerbot sets mode: +v Geth

[10:32] *** p6bannerbot sets mode: +v p6lert_

[10:32] *** p6lert_ left
[10:32] *** synopsebot joined
[10:32] *** ChanServ sets mode: +v synopsebot

[10:32] *** p6lert joined
[10:32] *** p6bannerbot sets mode: +v SourceBaby

[10:33] *** p6bannerbot sets mode: +v synopsebot

[10:33] *** p6bannerbot sets mode: +v p6lert

[10:34] <Geth> ¦ rakudo: cec1f511a8 | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[10:34] <Geth> ¦ rakudo: Set $*FOLDING when attempting to constant fold

[10:34] <Geth> ¦ rakudo: 

[10:34] <Geth> ¦ rakudo: This should help with cases like R#2459

[10:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cec1f511a8

[10:34] <Geth> ¦ rakudo: 7a1a186884 | (Elizabeth Mattijsen)++ | src/core/set_precedes.pm6

[10:34] <Geth> ¦ rakudo: Die when constant folding

[10:34] <synopsebot> R#2459 [open]: https://github.com/rakudo/rakudo/issues/2459 [6.d review] Constant-folder does not see 6.d stuff

[10:34] <Geth> ¦ rakudo: 

[10:34] <Geth> ¦ rakudo: - so that things work out wrt to v6.c / v6.d and deprecation

[10:34] <Geth> ¦ rakudo: - also make sure we get a single deprecation messay for Any (<+) Any

[10:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7a1a186884

[10:34] <Geth> ¦ rakudo: 81474bf9fa | (Elizabeth Mattijsen)++ | src/core.d/operators.pm6

[10:34] <Geth> ¦ rakudo: Expand v6.d removal message

[10:34] <Geth> ¦ rakudo: 

[10:34] <Geth> ¦ rakudo: Mention that it is an option to just run the code in v6.c also.

[10:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/81474bf9fa

[10:35] <Geth> ¦ roast: f4546115f0 | (Zoffix Znet)++ | 2 files

[10:35] <Geth> ¦ roast: SAP coercers in return type constraints

[10:35] <Geth> ¦ roast: 

[10:35] <Geth> ¦ roast: There are problems with this feature[^1] and we might wish

[10:35] <Geth> ¦ roast: to disallow it instead.

[10:35] <Geth> ¦ roast: 

[10:35] <Geth> ¦ roast: [1] https://github.com/rakudo/rakudo/issues/2452

[10:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f4546115f0

[10:35] <Geth> ¦ roast: cce0733489 | (Zoffix Znet)++ | 2 files

[10:35] <Geth> ¦ roast: SAP Array.flat

[10:35] <Geth> ¦ roast: 

[10:35] <Geth> ¦ roast: Until we resolve https://github.com/rakudo/rakudo/issues/2442

[10:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cce0733489

[10:35] <Geth> ¦ roast: 053576ac0f | (Zoffix Znet)++ | APPENDICES/A04-experimental/01-misc.t

[10:35] <Geth> ¦ roast: Add issue links for further discussion on tests

[10:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/053576ac0f

[10:35] <Geth> ¦ roast: 3214ad4a59 | (Zoffix Znet)++ | 3 files

[10:35] <Geth> ¦ roast: SAP $?BIT-using stuff

[10:35] <Geth> ¦ roast: 

[10:35] <Geth> ¦ roast: Until https://github.com/rakudo/rakudo/issues/2367 is fully resolved

[10:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3214ad4a59

[10:35] <Geth> ¦ roast: d3d02978d6 | (Zoffix Znet)++ | 3 files

[10:35] <Geth> ¦ roast: SAP .grab/.pick/.kxxv with undecided semantics

[10:35] <Geth> ¦ roast: 

[10:35] <Geth> ¦ roast: Until https://github.com/rakudo/rakudo/issues/2109 is fixed

[10:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d3d02978d6

[10:50] *** brrt joined
[10:51] *** p6bannerbot sets mode: +v brrt

[11:00] <Geth> ¦ rakudo: 5598f37df5 | (Elizabeth Mattijsen)++ | src/core.d/operators.pm6

[11:00] <Geth> ¦ rakudo: Make alternative stand out a bit more.

[11:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5598f37df5

[11:03] <[Tux]> Rakudo version 2018.10-43-g81474bf9f - MoarVM version 2018.10-27-gcd4f98aff

[11:03] <[Tux]> csv-test-xs-20      0.437 -  0.445

[11:03] <[Tux]> test-t --race       0.839 -  0.892

[11:03] <[Tux]> csv-ip5xs           0.956 -  1.008

[11:03] <[Tux]> test-t              1.858 -  1.901

[11:03] <[Tux]> test                7.629 -  8.751

[11:04] <[Tux]> csv-ip5xs-20        7.763 -  8.191

[11:04] <[Tux]> test-t-20 --race   10.681 - 11.826

[11:04] <[Tux]> csv-parser         22.120 - 23.332

[11:04] <[Tux]> test-t-20          32.511 - 32.596

[11:27] <Geth> ¦ rakudo: 5f1a81e0fa | (Elizabeth Mattijsen)++ | 7 files

[11:27] <Geth> ¦ rakudo: Change some blocks returning True/False to use return value

[11:27] <Geth> ¦ rakudo: 

[11:27] <Geth> ¦ rakudo: In the hopes that these will one day optimize even better, cause it can

[11:27] <Geth> ¦ rakudo: be observed from the code block that the return value is constant (rather

[11:27] <Geth> ¦ rakudo: than monitoring return values as they are being returned).

[11:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5f1a81e0fa

[11:58] <Geth> ¦ nqp/master: 8 commits pushed by (Paweł Murias)++

[11:58] <Geth> ¦ nqp/master: ec5ff32bf5 | [js] Boxing int64 and uint64 when returning them

[11:58] <Geth> ¦ nqp/master: 9709afb995 | [js] Fix bug when passing a int argument to uint64 parameter

[11:58] <Geth> ¦ nqp/master: a8a3aa6ba4 | [js] More uint64 and int64 tweaks

[11:58] <Geth> ¦ nqp/master: 4d4fe8b2c7 | [js] Fix path mangling when loading stuff in the browser

[11:58] <Geth> ¦ nqp/master: 1c96b4ad3b | [js] Make nqp::setbuffersizefh in browser console a noop

[11:58] <Geth> ¦ nqp/master: 59dcb59595 | [js] Add a hack for ctx incorrectly getting serialized

[11:58] <Geth> ¦ nqp/master: 3a732e892c | [js] Throw proper exception instead of throwing because of a bug

[11:58] <Geth> ¦ nqp/master: 128930a37c | [js] Don't convert nqp::assign_i to a bind when it's passed as an argument

[11:58] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/21b7d3c506a0...128930a37ce6

[11:58] *** pmurias joined
[11:58] *** p6bannerbot sets mode: +v pmurias

[12:37] *** leont joined
[12:38] *** p6bannerbot sets mode: +v leont

[12:52] <Geth> ¦ 6.d-prep: 65d4249569 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | ChangeLog.md

[12:52] <Geth> ¦ 6.d-prep: Some elaboration on set operator changes

[12:52] <Geth> ¦ 6.d-prep: 

[12:52] <Geth> ¦ 6.d-prep: @zoffixznet : is this what you were thinking about?  did I miss something?

[12:52] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/65d4249569

[12:52] <lizmat> afk again

[13:08] *** j3nnn1 joined
[13:08] *** p6bannerbot sets mode: +v j3nnn1

[13:10] *** travis-ci joined
[13:10] *** p6bannerbot sets mode: +v travis-ci

[13:10] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Change some blocks returning True/False to use return value

[13:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/449291800 https://github.com/rakudo/rakudo/compare/5598f37df5d3...5f1a81e0fa91

[13:10] *** travis-ci left
[13:10] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[13:13] *** ufobat left
[13:13] *** ggoebel left
[14:05] <Geth> ¦ 6.d-prep: 6fefee0328 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | ChangeLog.md

[14:05] <Geth> ¦ 6.d-prep: Finish sentence

[14:05] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/6fefee0328

[14:58] <tbrowder___> hi, #perl6-dev

[15:06] <tbrowder___> I have been working on some pod NYI code and want to raise an issue that has been discussed before about making pod a slang (sublang?).  I have proposal for moving toward that goal by doing it incrementally and minimizing major disruptions for a code base that is so active.  Essentially, the first step is to move code around in existing Actions.nqp and Grammar.nqp so pod-only code is at the end of the Perl6::Grammar and

[15:06] <tbrowder___> Perl6::Actions block. I'm going to try that now just to make sure there are no internal dependencies involved to cause trouble.  The current state of my proposal is at this gist: <https://gist.github.com/tbrowder/e855755022483a2cd829acb59f3a020e>

[15:18] *** fake_space_whale joined
[15:19] *** brrt left
[15:19] *** p6bannerbot sets mode: +v fake_space_whale

[15:26] <lizmat> tbrowder___: sounds like a plan to me

[15:27] <jnthn> heh, I accidentally used my more aggressive lexical to local lowering branch for my dev work for the last couple of days, and I only just noticed when I Ctrl+C

[15:27] <jnthn> 'd `cro run` and got a weird error (and recognized it as one in a spectest) :)

[15:27] <jnthn> So I guess it can't be all that broken :)

[15:29] <japhb> That seems like a very good sign indeed.  :-)

[15:33] <jnthn> Yeah...then I'll be able to make it happy to lower `$_` when it's 6.d :)

[15:34] <jnthn> Well, and find a solution for the P5blah modules :)

[15:36] <tbrowder___> lizmat: thnx, don't want to surprise anyone or step on any toes :)

[15:37] <Geth> ¦ rakudo/more-local-lowering: 25df092a18 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[15:37] <Geth> ¦ rakudo/more-local-lowering: Make sure %REQUIRE_SYMBOLS doesn't get lowered

[15:37] <Geth> ¦ rakudo/more-local-lowering: review: https://github.com/rakudo/rakudo/commit/25df092a18

[15:38] <lizmat> jnthn: https://twitter.com/jmaslak/status/1056749233355681792

[15:39] <jnthn> yay, that fixed the `cro run` crash too

[15:39] <jnthn> I don't understand *why* :)

[15:40] <jnthn> lizmat: Yes, the fact some people use them is why I want to find a solution that lets us have our opt and keep those going :)

[15:41] <lizmat> so not so blah after all :-)

[15:41] <jnthn> Oh, that wasn't a comment on the modules, just a placeholder name :)

[15:42] <lizmat> some people find judgment in "blah"

[15:42] <japhb> "P5foo"

[15:42] <jnthn> Some people find judgement in anything these days :P

[15:42] <lizmat> that's also true

[15:42] <lizmat> I guess I've been looking at Twitter too much in the past weeks

[15:43] <jnthn> But yeah, I didn't mean it that way; P5foo would indeed have not carried that risk :)

[15:43] <jnthn> So now down to 2 spectests, plus the throws-like thing

[15:44] <japhb> I'm beginning to wonder if it isn't just the mental state of *actively* trying to be sensitive to people that is the greatest value in being careful with language, because changing that head space makes a lot of difference to other attitudes and decisions

[15:49] <jnthn> japhb: It's also a case of actively learning new things that need sensitivity, as well as unlearning attitudes that rubbed of on us but aren't really justified.

[15:49] <jnthn> *off

[15:52] <jnthn> oh...interesting test

[15:52] <jnthn>     sub foo2 (*%p) {

[15:52] <jnthn>         is(%p<a>, 'b', $test);

[15:52] <jnthn>         my %p; #OK

[15:52] <jnthn>     }

[15:52] <jnthn> I guess our redecl might be doing a bit too much there...

[15:58] <japhb> jnthn: Yeah, true

[16:06] *** cognominal-p6 left
[16:07] *** cognominal-p6 joined
[16:08] *** p6bannerbot sets mode: +v cognominal-p6

[16:09] *** ExtraCrispy joined
[16:09] *** p6bannerbot sets mode: +v ExtraCrispy

[16:10] <jnthn> Got a fix for that spectest, but need another run to make sure it doesn't break anything else :)

[16:13] <jnthn> uh...loads more fail, but I'm behind master

[16:14] *** cognominal-p6 left
[16:14] <jnthn> Shoulda thought of that first

[16:14] *** cognominal-p6 joined
[16:15] *** p6bannerbot sets mode: +v cognominal-p6

[16:20] <jnthn> Darn, still two broken things.

[16:29] <jnthn> Well, that's an interesting problem...

[16:30] <jnthn> If you have `sub foo($x is copy) { my $x }` then at the moment we scribble over the descriptor with a new one, and a bunch of other things, when we should I think just warn and go onwards.

[16:32] <jnthn> However, check_default_value_type trips over the fact that `$x` has a constraint type of Any, not Mu

[16:33] <jnthn> Ah, actually it seems %sym<type> ain't set in that case, and that might be part of it

[16:37] <AlexDaniel> grep: use v6.c

[16:37] <AlexDaniel> greppable6: use v6.c

[16:37] <AlexDaniel> hello…

[16:37] <greppable6> AlexDaniel, 1298 lines, 228 modules: https://gist.github.com/d22420b9efba06af3b6930d0bbbf98e8

[16:38] <greppable6> AlexDaniel, 1298 lines, 228 modules: https://gist.github.com/1fc6dccc32b992ad4db96635bb7d97c8

[16:43] <jnthn> Ah goody, one fix seems to deal with both the regressions.

[16:44] <jnthn> oh wtf

[16:45] <jnthn> Grrr...forgot to apply the stashed change after rebase

[16:45] * jnthn builds/tests yet again :)

[16:56] *** ufobat joined
[16:56] *** p6bannerbot sets mode: +v ufobat

[17:02] <Geth> ¦ rakudo/more-local-lowering: 6 commits pushed by (Jonathan Worthington)++

[17:02] <Geth> ¦ rakudo/more-local-lowering: 815f2f7c39 | Remove dead code

[17:02] <Geth> ¦ rakudo/more-local-lowering: 60d52281e1 | Work towards more aggressive lexical lowering

[17:02] <Geth> ¦ rakudo/more-local-lowering: 4b92f7ffac | Mark our-decls in `our ($a, $b)` form too

[17:02] <Geth> ¦ rakudo/more-local-lowering: 9a6e9279f5 | Can't lower if `:($a, $b) := $capture` is used

[17:02] <Geth> ¦ rakudo/more-local-lowering: f3375a63db | Don't lower lexicals used by traits

[17:02] <Geth> ¦ rakudo/more-local-lowering: af24df8c8f | Make sure %REQUIRE_SYMBOLS doesn't get lowered

[17:02] <Geth> ¦ rakudo/more-local-lowering: review: https://github.com/rakudo/rakudo/compare/25df092a185f...af24df8c8fd7

[17:02] <Geth> ¦ rakudo/more-local-lowering: 822dbaadfd | (Jonathan Worthington)++ | src/Perl6/World.nqp

[17:02] <Geth> ¦ rakudo/more-local-lowering: Mark parameter symbols with their type

[17:02] <Geth> ¦ rakudo/more-local-lowering: review: https://github.com/rakudo/rakudo/commit/822dbaadfd

[17:02] <Geth> ¦ rakudo/more-local-lowering: 8524081efc | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[17:02] <Geth> ¦ rakudo/more-local-lowering: Do a lot less work upon a redeclaration

[17:02] <Geth> ¦ rakudo/more-local-lowering: 

[17:02] <Geth> ¦ rakudo/more-local-lowering: The variable is already there, so we don't need to go and do all of

[17:02] <Geth> ¦ rakudo/more-local-lowering: the things we would were it not. This also avoids scribbling over the

[17:02] <Geth> ¦ rakudo/more-local-lowering: things the optimizer uses to tell the difference between a parameter

[17:02] <Geth> ¦ rakudo/more-local-lowering: or declared variable, fixing an issue introduced by the lexical to

[17:02] <Geth> ¦ rakudo/more-local-lowering: local lowering.

[17:02] <Geth> ¦ rakudo/more-local-lowering: review: https://github.com/rakudo/rakudo/commit/8524081efc

[17:04] <jnthn> m: say $CALLER::no-such-var

[17:04] <camelia> rakudo-moar 5f1a81e0f: OUTPUT: «Nil␤»

[17:04] <jnthn> oh, darn

[17:05] <jnthn> We have a test "not ok 5 - vars not declared "is dynamic" are not accessible via $CALLER::

[17:06] <jnthn> And yeah, they still aren't after my work: the leixcal is simply *gone*

[17:06] <jnthn> Unfortunately, not existing doesn't throw, but existing but not being marked `is dynamic` did

[17:07] <jnthn> The immediate fix is to leave the lexical there and not use it but...urgh, loads of memory saving for lexical space lost if we do that.

[17:09] <Geth> ¦ rakudo/more-local-lowering: a25a638da1 | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[17:09] <Geth> ¦ rakudo/more-local-lowering: Don't retain lexicals for contvar lowerings

[17:09] <Geth> ¦ rakudo/more-local-lowering: 

[17:09] <Geth> ¦ rakudo/more-local-lowering: We retain parameter ones so we can use them in forming errors, but

[17:09] <Geth> ¦ rakudo/more-local-lowering: we needn't do that for variable declarations.

[17:09] <Geth> ¦ rakudo/more-local-lowering: review: https://github.com/rakudo/rakudo/commit/a25a638da1

[17:11] <lizmat> jnthn: so you're saying that you'd like to have say $CALLER::no-such-var throw?

[17:12] <lizmat> fwiw, I could live with that  :-)

[17:12] <jnthn> Or just behave as if the thing didn't exist

[17:12] <jnthn> Um, sorry

[17:12] <jnthn> Or to have the "found but not marked dynamic" case behave like the thing doesn't exist

[17:13] <jnthn> So it'd return Nil instead of throwing

[17:13] <lizmat> but perhaps that case should continue searching then

[17:13] <lizmat> or is that what you mean with "doesn't exist"?

[17:13] <jnthn> Hmm

[17:14] <lizmat> the fact that some sub in the stack happens to use a lexical that exists outwards as a dynamic

[17:14] <lizmat> shouldn't prevent an inner scope from finding it

[17:14] <jnthn> Indeed

[17:14] <jnthn> Taken that way, what we have today is a bug

[17:14] <lizmat> indeed

[17:15] <lizmat> given that dynamics typically are uppercase and lexicals lowercase

[17:15] <lizmat> I don't think it will cause much breakage

[17:15] <jnthn> Yeah, I'm not worried about userland impact here

[17:16] <jnthn> We just need to decide what to do with the spectest

[17:16] <jnthn> And perhaps to fix it up more properly and add some more

[17:17] <jnthn> Also there's throws-like

[17:17] <jnthn> Though we can special-case that in the optimizer

[17:19] <japhb> jnthn: Meaning that a user module would not be able to replicate throws-like?

[17:19] <japhb> Or are you special-casing it's technique?

[17:19] <japhb> *its

[17:19] <jnthn> japhb: The EVAL form of it, no. There's been a ticket for a while pointing out that it uses non-spec behavior

[17:19] <japhb> ah, gotcha

[17:20] <jnthn> japhb: An ecosystem grep showed that form of throws-like is barely used in the module (in fact, I think they were all by one author)

[17:20] <jnthn> *module ecosystem

[17:20] <japhb> nodnod

[17:22] <jnthn> 470 more lexical => local lowerings take place in CORE.setting with the new opt

[17:22] <jnthn> And CORE.setting is written in ways that mean it's less likely to have them than most user code.

[17:29] <Geth> ¦ rakudo/more-local-lowering: 0749626d9f | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[17:29] <Geth> ¦ rakudo/more-local-lowering: Include hack for `throws-like` for now

[17:29] <Geth> ¦ rakudo/more-local-lowering: 

[17:29] <Geth> ¦ rakudo/more-local-lowering: It doesn't harm much, and will be easy to discard when the EVAL-abusing

[17:29] <Geth> ¦ rakudo/more-local-lowering: form of `throws-like` goes away.

[17:29] <Geth> ¦ rakudo/more-local-lowering: review: https://github.com/rakudo/rakudo/commit/0749626d9f

[17:34] <Geth> ¦ rakudo: d964e8eac0 | (Elizabeth Mattijsen)++ | src/core/Mu.pm6

[17:34] <Geth> ¦ rakudo: We should decont for nqp::addr on aliases

[17:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d964e8eac0

[17:34] <Geth> ¦ rakudo: fb9a0454c5 | (Elizabeth Mattijsen)++ | src/core/Int.pm6

[17:34] <Geth> ¦ rakudo: Add shortcut for eqv of int / Int

[17:34] <Geth> ¦ rakudo: 

[17:34] <Geth> ¦ rakudo: - makes Int eqv Int about 8x as fast

[17:34] <Geth> ¦ rakudo: - makes int eqv int about 5x as fast

[17:34] <Geth> ¦ rakudo: - can now check allocation free

[17:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fb9a0454c5

[17:34] <Geth> ¦ rakudo: 5120d3d206 | (Elizabeth Mattijsen)++ | src/core/ObjAt.pm6

[17:34] <Geth> ¦ rakudo: Add shortcut for ObjAt eqv ObjAt

[17:34] <Geth> ¦ rakudo: 

[17:35] <Geth> ¦ rakudo: This was one of the cases that broke R#2449.  By shortcutting it, it

[17:35] <synopsebot> R#2449 [open]: https://github.com/rakudo/rakudo/issues/2449 `eqv` with classes that have custom `.new` and no `.perl` is now always True

[17:35] <Geth> ¦ rakudo: is faster, without any allocations and no longer in the way of a better

[17:35] <Geth> ¦ rakudo: solution to R#2449;

[17:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5120d3d206

[17:36] <jnthn> Enough for today. Tomorrow will look at the `start` in sink context thing and play some with lowering $_ to make sure it has the performance value I expect it to.

[17:40] <lizmat> m: say 0 eqv False

[17:40] <camelia> rakudo-moar 5f1a81e0f: OUTPUT: «False␤»

[17:40] <lizmat> arghs, I brokes it

[17:41] <lizmat> m: dd False ~~ Int

[17:41] <camelia> rakudo-moar 5f1a81e0f: OUTPUT: «Bool::True␤»

[17:42] *** ggoebel joined
[17:42] *** p6bannerbot sets mode: +v ggoebel

[17:52] <Geth> ¦ rakudo: 94dd0a411d | (Elizabeth Mattijsen)++ | src/core/Int.pm6

[17:52] <Geth> ¦ rakudo: Ensure that enum eqv enum are also handled correctly

[17:52] <Geth> ¦ rakudo: 

[17:52] <Geth> ¦ rakudo: - because they maybe Ints as well (eg. Bool)

[17:52] <Geth> ¦ rakudo: - makes Int eqv Int 2.8x slower

[17:52] <Geth> ¦ rakudo: - but still almost 3x as fast compared to before fb9a0454c5

[17:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/94dd0a411d

[17:58] <lizmat> m: use nqp; sub a(\a,\b) { dd nqp::eqaddr(nqp::decont(a),nqp::decont(b)) }; my $a = 4671287628120739122; my $b = $a; a $a, $b  # actually surprised this works

[17:58] <camelia> rakudo-moar 5120d3d20: OUTPUT: «1␤»

[18:38] <lizmat> off for some Bohemian Rhapsody &

[18:38] *** travis-ci joined
[18:38] *** p6bannerbot sets mode: +v travis-ci

[18:38] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Add shortcut for ObjAt eqv ObjAt

[18:38] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/449452677 https://github.com/rakudo/rakudo/compare/5f1a81e0fa91...5120d3d20613

[18:38] *** travis-ci left
[18:38] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[19:01] *** brrt joined
[19:12] *** ggoebel left
[19:27] *** ggoebel joined
[19:27] *** p6bannerbot sets mode: +v ggoebel

[19:35] *** travis-ci joined
[19:35] *** p6bannerbot sets mode: +v travis-ci

[19:35] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Ensure that enum eqv enum are also handled correctly

[19:35] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/449464101 https://github.com/rakudo/rakudo/compare/5120d3d20613...94dd0a411d53

[19:35] *** travis-ci left
[19:35] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[19:50] *** brrt left
[19:52] *** ExtraCrispy left
[20:37] *** brrt joined
[20:38] *** p6bannerbot sets mode: +v brrt

[21:02] *** cognominal-p6 left
[21:13] *** dogbert17 left
[21:22] *** brrt left
[21:51] *** pmurias left
[21:52] *** pyrimidine left
[21:54] <Geth> ¦ 6.d-prep: 030dda30da | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | ChangeLog.md

[21:54] <Geth> ¦ 6.d-prep: )o

[21:54] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/030dda30da

[21:55] <AlexDaniel> lizmat: I'm confused by that commit :)

[21:55] <lizmat> afk again&

[22:33] *** ufobat left
[22:42] *** cognominal-p6 joined
[22:43] *** p6bannerbot sets mode: +v cognominal-p6

[22:43] *** ufobat joined
[22:44] *** p6bannerbot sets mode: +v ufobat

[23:13] *** robertle left
[23:13] *** robertle joined
[23:14] *** p6bannerbot sets mode: +v robertle

