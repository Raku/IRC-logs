[00:02] <Geth> ¦ roast: da04da9124 | (Zoffix Znet)++ | S32-hash/map.t

[00:02] <Geth> ¦ roast: [v6.d REVIEW] Don't spec .map error text content

[00:02] <Geth> ¦ roast: 

[00:02] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/ced510140

[00:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/da04da9124

[00:05] <Geth> ¦ roast: 3869a2fa99 | (Zoffix Znet)++ | S32-list/grep.t

[00:05] <Geth> ¦ roast: [v6.d REVIEW] Don't spec exact .grep error text

[00:05] <Geth> ¦ roast: 

[00:05] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/d1a874df5

[00:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3869a2fa99

[00:10] <Geth> ¦ roast: e4f05e1c9b | (Zoffix Znet)++ | S03-operators/ternary.t

[00:10] <Geth> ¦ roast: [v6.d REVIEW] Test op attr in ??!! fiddly error instead of text

[00:10] <Geth> ¦ roast: 

[00:10] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/7ae8030be

[00:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e4f05e1c9b

[00:14] <Geth> ¦ roast: 270e0a66ac | (Zoffix Znet)++ | S02-types/WHICH.t

[00:14] <Geth> ¦ roast: [v6.d REVIEW] Don't spec exact .perl of ObjAt

[00:14] <Geth> ¦ roast: 

[00:14] <Geth> ¦ roast: Since it'll likely go away and also we don't care about exact

[00:14] <Geth> ¦ roast: .perl, only that .EVALing it produces an `eqv` object.

[00:14] <Geth> ¦ roast: 

[00:14] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/8c899ef54

[00:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/270e0a66ac

[00:19] *** buggable left
[00:19] *** buggable joined
[00:19] *** ChanServ sets mode: +v buggable

[00:44] *** fake_space_whale joined
[01:17] *** stmuk joined
[01:19] *** stmuk_ left
[01:20] <Geth> ¦ roast: 8b56e4c257 | (Zoffix Znet)++ | S32-io/io-path-subclasses.t

[01:21] <Geth> ¦ roast: [v6.d REVIEW] Add missed IO::Path::QNX to `-foo`.absolute tests

[01:21] <Geth> ¦ roast: 

[01:21] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/7428736ee

[01:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8b56e4c257

[01:27] <Geth> ¦ roast: 5b53f9560f | (Zoffix Znet)++ | integration/weird-errors.t

[01:27] <Geth> ¦ roast: [v6.d REVIEW] Clarify race-y SEGV tests

[01:27] <Geth> ¦ roast: 

[01:27] <Geth> ¦ roast: That we're only watching for lack of SEGVs, not for

[01:27] <Geth> ¦ roast: lack of race conditions that *are* there.

[01:27] <Geth> ¦ roast: 

[01:27] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/02d698835

[01:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5b53f9560f

[01:31] <Geth> ¦ roast: 5ca4c51b69 | (Zoffix Znet)++ | S09-typed-arrays/arrays.t

[01:31] <Geth> ¦ roast: [v6.d REVIEW] Reword `of` .perl pollution test…

[01:31] <Geth> ¦ roast: 

[01:31] <Geth> ¦ roast: …to avoid speccing exact content of .perl

[01:31] <Geth> ¦ roast: 

[01:31] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/feb0022c7

[01:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5ca4c51b69

[01:36] <Geth> ¦ roast: e0bd70b7ca | (Zoffix Znet)++ | S03-operators/spaceship.t

[01:36] <Geth> ¦ roast: [v6.d REVIEW] Move <=> throwage test into EVAL

[01:36] <Geth> ¦ roast: 

[01:36] <Geth> ¦ roast: Otherwise constant folding will blow up the test file, once

[01:36] <Geth> ¦ roast: R#1992 https://github.com/rakudo/rakudo/issues/1992 is fixed

[01:36] <Geth> ¦ roast: 

[01:36] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/bb4d3ebff

[01:36] <synopsebot> R#1992 [open]: https://github.com/rakudo/rakudo/issues/1992 [perf] Examine codebase for subs that can be `is pure`d

[01:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e0bd70b7ca

[01:40] <Geth> ¦ rakudo: c2db40b781 | (Zoffix Znet)++ | t/05-messages/03-errors.t

[01:40] <Geth> ¦ rakudo: [v6.d REVIEW] Move grammar error text test out of roast

[01:40] <Geth> ¦ rakudo: 

[01:40] <Geth> ¦ rakudo: Orig: https://github.com/perl6/roast/commit/d633c0411

[01:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c2db40b781

[01:41] <Geth> ¦ roast: 346f0431f8 | (Zoffix Znet)++ | S05-grammar/example.t

[01:41] <Geth> ¦ roast: [v6.d REVIEW] Move grammar error text test out of roast

[01:41] <Geth> ¦ roast: 

[01:41] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/d633c0411

[01:41] <Geth> ¦ roast: Moved to: https://github.com/rakudo/rakudo/commit/c2db40b781

[01:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/346f0431f8

[01:50] <Geth> ¦ roast: 50ad9af5b4 | (Zoffix Znet)++ | S10-packages/use-with-class.t

[01:50] <Geth> ¦ roast: [v6.d REVIEW] Improve priv is rw attr package use test

[01:50] <Geth> ¦ roast: 

[01:50] <Geth> ¦ roast: - Use `is_run` helper instead of hand-rolling anything

[01:50] <Geth> ¦ roast: - Explain what `Perl6/World` is and why we want its absence

[01:50] <Geth> ¦ roast: 

[01:50] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/0c7d68f76

[01:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/50ad9af5b4

[01:55] <Geth> ¦ rakudo: f8f4ae3183 | (Zoffix Znet)++ | t/05-messages/03-errors.t

[01:55] <Geth> ¦ rakudo: [v6.d REVIEW] Move rakudo-specific error test from roast

[01:55] <Geth> ¦ rakudo: 

[01:55] <Geth> ¦ rakudo: Orig: https://github.com/perl6/roast/commit/e1704aa62

[01:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f8f4ae3183

[01:55] <Geth> ¦ roast: cc8db7cdfb | (Zoffix Znet)++ | S06-signature/definite-return.t

[01:55] <Geth> ¦ roast: [v6.d REVIEW] Move overly-vague error text test to impl

[01:55] <Geth> ¦ roast: 

[01:55] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/e1704aa62

[01:55] <Geth> ¦ roast: Moved to: https://github.com/rakudo/rakudo/commit/f8f4ae3183

[01:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cc8db7cdfb

[02:12] *** fake_space_whale left
[02:14] <Geth> ¦ roast: 8e3ab47079 | (Zoffix Znet)++ | 2 files

[02:14] <Geth> ¦ roast: Introduce specification APPENDICES

[02:14] <Geth> ¦ roast: 

[02:14] <Geth> ¦ roast: These are advisory tests implementations optionally may

[02:14] <Geth> ¦ roast: choose to follow. Provides the space for tests that are more broad

[02:14] <Geth> ¦ roast: than implementation-specific tests, yet might not be something

[02:14] <Geth> ¦ roast: we mandate all implementations must follow (e.g. overflow tests)

[02:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8e3ab47079

[02:14] <Geth> ¦ roast: 518280aaa8 | (Zoffix Znet)++ | 2 files

[02:14] <Geth> ¦ roast: [v6.d REVIEW] Move Int power overflow tests to APPENDICES

[02:14] <Geth> ¦ roast: 

[02:14] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/c7a560688

[02:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/518280aaa8

[02:46] <Geth> ¦ rakudo: ecbf44fb59 | (Zoffix Znet)++ | t/spectest.data

[02:46] <Geth> ¦ rakudo: Add APPENDICES/A01-limits/overflow.t to list of test files

[02:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ecbf44fb59

[02:54] <Geth> ¦ roast: 3b1a7def99 | (Zoffix Znet)++ | 2 files

[02:54] <Geth> ¦ roast: [v6.d REVIEW] Move overflow throwage tests to APPENDICES

[02:54] <Geth> ¦ roast: 

[02:54] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/7143a330e

[02:54] <Geth> ¦ roast: + more tests from the same file, likely all are proptests

[02:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3b1a7def99

[02:56] <Geth> ¦ roast: 6402f0294c | (Zoffix Znet)++ | packages/RT112626/Class2.pm6

[02:56] <Geth> ¦ roast: [v6.d REVIEW] Fix typo in test class name

[02:56] <Geth> ¦ roast: 

[02:56] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/ebfe979b6

[02:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6402f0294c

[02:57] <synopsebot> RT#112626 [resolved]: https://rt.perl.org/Ticket/Display.html?id=112626 [PRECOMP] Precompiled modules and roles lead to rakudo not recognizing type name

[03:23] *** stmuk_ joined
[03:25] *** stmuk left
[04:44] <Geth> ¦ roast/range-iterator-improvements: ab6ade455b | (Zoffix Znet)++ | S07-iterators/range-iterator.t

[04:44] <Geth> ¦ roast/range-iterator-improvements: [v6.d REVIEW] Rewrite range iterator tests using helper sub

[04:44] <Geth> ¦ roast/range-iterator-improvements: 

[04:44] <Geth> ¦ roast/range-iterator-improvements: - Simplify code by using the iterator helper sub, which tests

[04:44] <Geth> ¦ roast/range-iterator-improvements:     all the values as well as all the optimization methods, if

[04:44] <Geth> ¦ roast/range-iterator-improvements:     they are implemented. It also tests types of the pulled values

[04:44] <Geth> ¦ roast/range-iterator-improvements: - Remove fudges for optional optimization methods. In some of the

[04:44] <Geth> ¦ roast/range-iterator-improvements:     cases they're not even implementable due to precision of Num

[04:44] <Geth> ¦ roast/range-iterator-improvements: <…commit message has 6 more lines…>

[04:44] <Geth> ¦ roast/range-iterator-improvements: review: https://github.com/perl6/roast/commit/ab6ade455b

[04:58] <Geth> ¦ 6.d-prep: 0af773b563 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[04:58] <Geth> ¦ 6.d-prep: TODO: Sort out meaning of `.bool-only`/`.count-only` after receiving IterationEnd

[04:58] <Geth> ¦ 6.d-prep: 

[04:58] <Geth> ¦ 6.d-prep: R#2075 https://github.com/rakudo/rakudo/issues/2075

[04:58] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/0af773b563

[04:58] <synopsebot> R#2075 [open]: https://github.com/rakudo/rakudo/issues/2075 [6.d review] Meaning of `.bool-only`/`.count-only` after receiving IterationEnd ?

[05:05] <Geth> ¦ roast: a60039d639 | (Zoffix Znet)++ | S03-metaops/hyper.t

[05:05] <Geth> ¦ roast: [v6.d REVIEW] Don't spec exact Hash.gist in non-.gist test

[05:05] <Geth> ¦ roast: 

[05:05] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/8b2446dc9

[05:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a60039d639

[05:08] <Geth> ¦ nqp: 09d75a9514 | MasterDuke17++ (committed using GitHub Web editor) | docs/ops.markdown

[05:08] <Geth> ¦ nqp: Add some return types to doc signatures

[05:08] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/09d75a9514

[05:08] <Geth> ¦ nqp/truffle: 3256e5c0ed | (Daniel Green)++ | 16 files

[05:08] <Geth> ¦ nqp/truffle: [truffle] Implement a bunch of file related ops

[05:08] <Geth> ¦ nqp/truffle: 

[05:08] <Geth> ¦ nqp/truffle: nqp::<chdir chmod copy cwd fileexecutable fileislink filereadable

[05:08] <Geth> ¦ nqp/truffle: filewritable link mkdir rename rmdir symlink unlink>

[05:08] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/3256e5c0ed

[05:12] <Geth> ¦ roast: 9d922ec602 | (Zoffix Znet)++ | S03-smartmatch/array-array.t

[05:12] <Geth> ¦ roast: [v6.d REVIEW] Clarify spec of ~~ on list with HyperWhatevers

[05:12] <Geth> ¦ roast: 

[05:12] <Geth> ¦ roast: - We treat Iterable LHS as if it were a list and match up its elements

[05:12] <Geth> ¦ roast: - We do not do the same thing with non-Iterable LHS

[05:12] <Geth> ¦ roast: 

[05:12] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/fdaf1a12a

[05:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9d922ec602

[05:29] <Geth> ¦ rakudo: 0a32c62129 | (Zoffix Znet)++ | t/05-messages/03-errors.t

[05:29] <Geth> ¦ rakudo: [v6.d REVIEW] Move wrong-arg .classify/categorize tests from roast

[05:29] <Geth> ¦ rakudo: 

[05:29] <Geth> ¦ rakudo: These are coverage tests for candidates that throw better-than-usual

[05:29] <Geth> ¦ rakudo: errors but don't actually do any useful work.

[05:29] <Geth> ¦ rakudo: 

[05:29] <Geth> ¦ rakudo: Seems a bad idea to actually spec this behaviour, as we might want

[05:29] <Geth> ¦ rakudo: these to do Useful Things™ in the future instead.

[05:29] <Geth> ¦ rakudo: 

[05:29] <Geth> ¦ rakudo: Orig: https://github.com/perl6/roast/commit/0f4199b1c

[05:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0a32c62129

[05:30] <Geth> ¦ roast: 39dc8b4bd3 | (Zoffix Znet)++ | S29-any/deg-trans.t

[05:30] <Geth> ¦ roast: [v6.d REVIEW] Move wrong-arg .classify/categorize tests from roast

[05:30] <Geth> ¦ roast: 

[05:30] <Geth> ¦ roast: These are coverage tests for candidates that throw better-than-usual

[05:30] <Geth> ¦ roast: errors but don't actually do any useful work.

[05:30] <Geth> ¦ roast: 

[05:30] <Geth> ¦ roast: Seems a bad idea to actually spec this behaviour, as we might want

[05:30] <Geth> ¦ roast: these to do Useful Things™ in the future instead.

[05:30] <Geth> ¦ roast: 

[05:30] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/0f4199b1c

[05:30] <Geth> ¦ roast: Moved to: https://github.com/rakudo/rakudo/commit/0a32c62129

[05:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/39dc8b4bd3

[05:39] <Geth> ¦ roast: 5658270f0a | (Zoffix Znet)++ | S02-lists/tree.t

[05:39] <Geth> ¦ roast: [v6.d REVIEW] Use clearer test description

[05:39] <Geth> ¦ roast: 

[05:39] <Geth> ¦ roast: `...` is an op, so it's confusing to use it here

[05:39] <Geth> ¦ roast: 

[05:39] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/a176e0865

[05:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5658270f0a

[05:47] <Geth> ¦ roast: 7d49a8d7d7 | (Zoffix Znet)++ | S29-any/deg-trans.t

[05:47] <Geth> ¦ roast: [v6.d REVIEW] Remove useless Any:U.*pend/*shift/push/pop tests

[05:47] <Geth> ¦ roast: 

[05:47] <Geth> ¦ roast: I think 2016-Zoffix thought the Any:U candidates from Rakduo's

[05:47] <Geth> ¦ roast: core will get called and those will call the custom methods

[05:47] <Geth> ¦ roast: in these custom classes, but that's a brainfart.

[05:47] <Geth> ¦ roast: 

[05:47] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/e42733254

[05:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7d49a8d7d7

[05:48] <Geth> ¦ roast: 3223cf60e9 | (Zoffix Znet)++ | S02-types/autovivification.t

[05:48] <Geth> ¦ roast: [v6.d REVIEW] Remove useless slips

[05:48] <Geth> ¦ roast: 

[05:48] <Geth> ¦ roast: They're not needed in this context.

[05:48] <Geth> ¦ roast: 

[05:48] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/510b44a6d

[05:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3223cf60e9

[05:58] <Geth> ¦ roast: 306104a1df | (Zoffix Znet)++ | S05-match/perl.t

[05:58] <Geth> ¦ roast: [v6.d REVIEW] Revert "$/.list returns all items even with optional captures in the middle"

[05:58] <Geth> ¦ roast: 

[05:58] <Geth> ¦ roast: This reverts commit 581b553b74873941f9629d7202adf4a79f843fc4.

[05:58] <Geth> ¦ roast: 

[05:58] <Geth> ¦ roast: IMO it should not be a Mu in that hole. Filed as

[05:58] <Geth> ¦ roast: R#2076 https://github.com/rakudo/rakudo/issues/2076

[05:58] <synopsebot> R#2076 [open]: https://github.com/rakudo/rakudo/issues/2076 A hole in $/.list is a Mu, but a hole in @a.List is a Nil

[05:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/306104a1df

[06:07] <Geth> ¦ roast: 7e5f05b9e1 | (Zoffix Znet)++ | S32-str/comb.t

[06:07] <Geth> ¦ roast: [v6.d REVIEW] More thorough test for .comb crash

[06:07] <Geth> ¦ roast: 

[06:07] <Geth> ¦ roast: Don't just test if it lives. Test it also gives right result.

[06:07] <Geth> ¦ roast: 

[06:07] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/92e0197c3

[06:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7e5f05b9e1

[06:09] *** lizmat left
[07:00] *** lizmat joined
[08:48] *** robertle joined
[09:01] *** lizmat left
[09:04] *** ufobat_ joined
[09:24] <[Tux]> https://www.mail-archive.com/python-committers@python.org/msg05628.html

[09:45] <AlexDaniel> heh if we're posting this link every day we can as well put it into /topic xD

[10:11] *** lizmat joined
[10:11] <lizmat> Files=1242, Tests=76394, 378 wallclock secs (15.95 usr  6.03 sys + 2654.78 cusr 257.15 csys = 2933.91 CPU)

[10:11] <lizmat> ^^ most definitely something changed for the worse since yesterday

[10:17] <[Tux]> Rakudo version 2018.06-184-g0a32c6212 - MoarVM version 2018.06-223-ga50a0b15b

[10:17] <[Tux]> csv-test-xs-20      0.460 -  0.478

[10:17] <[Tux]> test-t --race       1.004 -  1.131

[10:17] <[Tux]> csv-ip5xs           1.293 -  1.308

[10:17] <[Tux]> test-t              2.301 -  2.324

[10:17] <[Tux]> csv-ip5xs-20        8.322 -  8.749

[10:17] <[Tux]> test                9.215 -  9.390

[10:17] <[Tux]> test-t-20 --race   14.343 - 18.257

[10:17] <[Tux]> csv-parser         26.122 - 27.132

[10:17] <[Tux]> test-t-20          41.358 - 44.008

[10:29] *** MasterDuke left
[10:38] *** ufobat_ left
[11:08] * lizmat won't work on getting hash initializations faster atm

[11:08] <lizmat> too many weird things happening in spectest

[11:08] <lizmat> and with the slowdown, I don't know what I'm measuring against anymore

[11:09] <lizmat> speedups I've been able to make: 1.2x generally, up to 2.4x as fast for the "my %h = %m" case

[11:10] <lizmat> but that was before the last MoarVM bump  :-(

[11:37] *** ExtraCrispy joined
[11:41] *** Ven`` joined
[11:59] *** MasterDuke joined
[12:07] <jnthn> lizmat: I've no idea why you're being so dramatic about "the slowdown". The upper test-t number has been about the same for the last 3 days (3.322, 3.319, 3.324).

[12:07] <yoleaux> 02:16Z <Zoffix> jnthn: just an FYI: I created the concept of spec APPENDICES that contain optional tests impls can optionally follow (e.g. overflow exceptions when raising an int to a specific huge power): more info in readme: https://github.com/perl6/roast/tree/master/APPENDICES#perl-6-specification-appendices

[12:07] <yoleaux> 02:20Z <Zoffix> jnthn: I mean raising Int, not int https://github.com/perl6/roast/blob/master/APPENDICES/A01-limits/overflow.t

[12:08] <lizmat> jnthn: well, test-t may be a bit slower, but spectest for me went from 326 seconds to 378 

[12:08] <lizmat> m: say 378 / 326

[12:08] <camelia> rakudo-moar 0a32c6212: OUTPUT: «1.159509␤»

[12:08] <lizmat> 1.16x slower

[12:09] <lizmat> I find *that* pretty dramatic  :-(

[12:10] <jnthn> Yes, probably because the spesh thread is doing more work, for reasons I already explained, and we've *long* known that spectest is pretty much the worst case for that.

[12:10] <timotimo> yeah, spec tests is big parts warmup

[12:10] <lizmat> ok, so we have an explanation for that slowdown

[12:10] <timotimo> and when you run one spec test per core already, the more spesh you have running the longer it'll take for the other tests to get to run

[12:10] <lizmat> I thought we didn't, hence my alarmist tone

[12:11] <Geth> ¦ roast: 5ca213313d | MasterDuke17++ (committed using GitHub Web editor) | APPENDICES/README.md

[12:11] <Geth> ¦ roast: Typo fixes

[12:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5ca213313d

[12:11] <jnthn> It's kinda like Zoffix says to people using Rakudo: if you just pick a random dev commit, don't expect consistency. Sames goes with bumping the MoarVM revision.

[12:12] <lizmat> sure, sure... I do understand now, I didn't understand the implication of the spesh thread doing a lot more

[12:13] * lizmat runs another spectest with TEST_JOBS=7 instead of TEST_JOBS=8

[12:13] <jnthn> I do some of the most disruptive stuff in branches, but it doesn't really work to be off in a long-lived branch and then land a ton of stuff at once, since then we've little idea where breakage slipped in.

[12:14] <lizmat> yeah, I agree with that

[12:14] <jnthn> So I'm kind of between a rock and a hard place.

[12:14] <jnthn> "Do nothing" isn't really an option either, given performance seems to be one of the main complaints. :)

[12:14] <timotimo> i like the way you rock

[12:15] <jnthn> Anyway, on getting the spesh thread doing less work again, I think folding the new pass back into the existing facts pass would cut it.

[12:15] <jnthn> Or at least help quite a bit.

[12:16] <lizmat> jnthn: I understand now what the "problem" is

[12:16] <lizmat> I was just making sure a perceived problem would not fall through the cracks

[12:17] <MasterDuke> this is where i think a robust suite of performance tests would be helpful

[12:17] <lizmat> I think things were made worse by the TEST_JOBS=8 overscheduling with the extra busy spesh thread

[12:18] <MasterDuke> maybe we should reduce what the default number it picks is also

[12:18] <lizmat> m: class A is IterationBuffer { }; use nqp; my $l := nqp::create(A); say nqp::elems(A)   # jnthn: anything to be done about that ?

[12:18] <camelia> rakudo-moar 0a32c6212: OUTPUT: «This type (A) does not support elems␤  in block <unit> at <tmp> line 1␤␤»

[12:18] <jnthn> MasterDuke: Yes, though note that most benchmarks run a single process, and the spectest slowdown shows up when one runs a bunch of Perl 6 processes at the same time.

[12:19] <jnthn> MasterDuke: So unless we had a benchmark for that case... :-)

[12:19] <lizmat> jnthn: I guess adding a is repr('VMArray') will do it 

[12:19] <jnthn> lizmat: You'd need to put `is repr('VMArray')` onto the class decl

[12:19] <lizmat> hehe 

[12:20] <jnthn> I'm not sure whether it makes sense to look at whether that trait is "inherited"; representation and type are orthogonal.

[12:20] <MasterDuke> jnthn: yeah, i was thinking it would be good to run it (the benchmark suite, which could include a spectest) on 1,2,4,8,16 core machines

[12:20] <jnthn> MasterDuke: That could certainly be interesting.

[12:20] <lizmat> jnthn: yeah, probably...  not to worry  :-)

[12:23] <MasterDuke> i've suggested setting up such a suite and integrating it into the toolchain would be a good grant proposal, but i'm not sure i have the knowledge, skills, or time to do it myself. anyone is welcome to my idea

[12:25] <jnthn> Yeah, I'd +1 such a grant proposal

[12:25] <MasterDuke> and https://github.com/japhb/perl6-bench would likely be a good starting place

[12:25] <jnthn> Indeed

[12:28] <jnthn> haha...things on the box I had set up to do the daily runs of that are so out of date it still had panda installed but not zef :P

[12:31] <timotimo> find_best_dispatchee spends 4031us in spesh_facts_discover, of which 3552us is deopt usage creation

[12:32] <timotimo> from a random piece of code i ran, that's the longest it ever took

[12:33] <jnthn> Aside from trying to speed it up, another option would be to - for large bodies of code - fall back to a much less precise analysis.

[12:34] <timotimo> to be fair, that is a huge piece of code. do big PHIs make the algorithm sweat?

[12:34] <timotimo> the frame is 8638 bytes big before optimization

[12:34] <timotimo>     Predecessors: 4, 5, 7, 8, 9, 10, 17, 19, 20, 22, 23, 26, 27, 31, 32, 78, 89, 90, 91, 97, 102, 103, 104, 113, 133, 134, 137, 142, 147, 148, 149, 150, 153, 156, 158, 160, 161, 162, 163, 164, 168, 169, 173, 177, 178, 180, 184, 185, 187, 192, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 211, 213, 214, 219, 220, 221, 222, 224, 225, 228, 230, 234, 236, 237, 243, 244, 249, 250, 252, 258, 259, 262, 269,

[12:34] <timotimo> 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 286, 287, 288, 289, 290, 291, 294, 295, 300, 301, 302, 303, 304

[12:35] <timotimo> this should give you an idea of the size of PHI nodes it encounters :P

[12:36] <jnthn> Goodness :)

[12:36] <timotimo> that's frame handlers for you i guess?

[12:36] <jnthn> Though I already made it a lot cheaper in the light of a lot of preds :)

[12:37] <timotimo> right, you put some caching in

[12:37] <timotimo> i remember that

[12:37] <jnthn> Yeah. I wonder how long the unreads list gets.

[12:38] <timotimo> given how slowly i read books and how many recommendations i get, very long. oh, that's not what you meant :D

[12:41] <jnthn> :P

[12:41] <timotimo> tell me where i have to look and i'll log or maybe graph it

[12:42] <jnthn> https://github.com/MoarVM/MoarVM/blob/master/src/spesh/usages.c#L72

[12:45] <timotimo> almost 2k in this frame

[12:46] <jnthn> Wow.

[12:46] <MasterDuke> huh, a --profile of install-core-dist.pl shows 97% of the exclusive time in acquire (SETTING::src/core/Semaphore.pm6:5)

[12:46] <timotimo> 2, 3, 4x 116, 214, 15x 116, 9x 214, 312, ...

[12:47] <timotimo> like a hundred times 214, 1078, 1960 a couple times

[12:48] <timotimo> i take and output the length at the end of the process_bb_for_deopt_usage function

[12:50] <timotimo> only 10x 1960, 4x (in total) 1078, 11x 1568

[12:51] <jnthn> Wonder if there's a different design that'd save having to iterate that list once per BB

[12:53] <jnthn> MasterDuke: fwiw, I've fixed the most immediate issues that meant the https://www.moarvm.org/measurements/perl6-bench/ runs didn't do anything meaningful. Not sure if it'll manage to get through the whole lot of the work yet.

[12:53] <MasterDuke> awesome

[12:53] <jnthn> It takes a long time. :) So will leave it and see how it fails.

[12:53] <jnthn> If it fails :)

[12:55] <MasterDuke> interesting. a perf record of install-core-dist.pl looks a bit different now

[12:56] <MasterDuke> https://gist.github.com/MasterDuke17/e5b200978b5db535510299bc57a4e83a MVM_sc_find_object_idx is now only 4th most expensive at 4%

[12:58] <MasterDuke> process_bb_for_deopt_usage and VM_spesh_usages_remove_unused_deopt are 1st and 2nd with 11% and 10%

[13:01] <MasterDuke> heh, it's 3s faster with MVM_SPESH_DISABLE=1

[13:03] <timotimo> ouch :)

[13:03] <timotimo> i wonder if spesh is keeping the other threads from running GC?

[13:05] <MasterDuke> 3 gcs, 0 full gcs

[13:06] <MasterDuke> 0.2% time spent in gc

[13:07] <MasterDuke> those are for the regular run, not the spesh disable one

[13:08] <MasterDuke> maybe the fact that all the time is spent in acquiring a semaphore that's the problem?

[13:08] <MasterDuke> timotimo: how do i turn on telemeh logging?

[13:09] <timotimo> did you enable telemeh in Configure.pl?

[13:09] <MasterDuke> yeah

[13:10] <timotimo> moar --help should display the right env var

[13:10] <timotimo> i think it's MVM_TELEMETRY_LOG=foo.txt ?

[13:10] <MasterDuke> just looked, yeah

[13:11] <MasterDuke> hm, how does the log work?

[13:12] <MasterDuke> are the values timestamps or elapsed time?

[13:13] <timotimo> the big numbers are "time"

[13:14] <MasterDuke> looks like there's a *_interval_start and then *_interval_stop for "Semaphore.acquire"

[13:14] <timotimo> right, should have matching numbers, too

[13:14] <MasterDuke> so just subtract the first from the second?

[13:14] <timotimo> and divide by the number near the start that tells you how many ticks in a second or so

[13:16] <timotimo> it might say something like "calibration" or so

[13:20] <timotimo> maybe more interesting to compare the total gc time vs the time it takes for the spesh thread to react to the gc request

[13:35] <MasterDuke> 2.023, 12.531, 1.517, 2.519, 3.526, 3.525, 1.519, 1.518, 1.524, 3.029, 1.517, 1.530 # these are the times

[13:35] <timotimo> for what exactly?

[13:35] <MasterDuke> for the semaphore acquire

[13:35] *** Ven`` left
[13:35] <MasterDuke> (2nd - 1st) / calibration

[13:36] <MasterDuke> how would i calculate the other thing you suggested

[13:37] <MasterDuke> (but you can see one 12s wait for a semaphore, that can't be good)

[13:38] <timotimo> it can be good

[13:38] <timotimo> if there's nothing to do, for example

[13:40] *** Ven`` joined
[13:40] <timotimo> you can cross-reference with the spesh log to see if it was just waiting for a log to be sent

[13:42] <MasterDuke> how to do the cross-reference? by time?

[13:42] <timotimo> if you see something that looks like 12 seconds, i guess

[13:43] <MasterDuke> 61712us, 1us, 1506880us

[13:44] <timotimo> that's the "waiting for logs" outputs?

[13:44] <MasterDuke> yeah

[13:44] <timotimo> hm. not sur if that matches up

[13:45] <MasterDuke> fwiw, i had to re-run

[13:45] <MasterDuke> the new run didn't have a 12s sem, but there were a couple 5s

[13:46] <MasterDuke> and a 6s

[13:46] <timotimo> mhm

[13:46] <MasterDuke> btw, what's all that binary output in the spesh log?

[13:46] <timotimo> binary output?

[13:47] <timotimo> i'm not aware of any, except maybe if a "lits(" is in front of it?

[13:49] <MasterDuke> a lot of "^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@"

[13:49] <MasterDuke> according to vim and less. slows them (or maybe my terminal) considerably

[13:49] <MasterDuke> i had to pass --text to grep, otherwise it thought it was a binary file

[13:50] <timotimo> that's null bytes, isn't it?

[13:51] <timotimo> they're not supposed to be there :)

[13:53] <MasterDuke> yep. 'CERTAIN RESULTS 3 =========' then a whole lot of null bytes

[13:54] <timotimo> i wonder if something went wrong trying to print it to the file

[13:54] *** ufobat_ joined
[13:54] <timotimo> like, maybe fprint got back an error and we didn't check it (we have no checks for fprintf anywhere :P)

[13:55] <MasterDuke> 24mb of null bytes

[13:56] <timotimo> wtf

[13:58] <MasterDuke> happens even with MVM_SPESH_LOG by itself, not just when MVM_TELEMETRY_LOG is on also

[13:59] <timotimo> i wonder if strace looks suspicious at all

[13:59] <MasterDuke> anything in particular to look for?

[14:00] <timotimo> hm

[14:00] <MasterDuke> can you repro it?

[14:00] <timotimo> let's see

[14:01] <timotimo> what command was it?

[14:01] <MasterDuke> MVM_SPESH_LOG=s.log ./perl6-m tools/build/install-core-dist.pl /home/dan/Source/perl6/install/share/perl6

[14:02] <MasterDuke> just the last line from a make install in rakudo

[14:02] <timotimo> No writeable path found, /home/time/perl6/install/share/perl6 not writeable

[14:02] <timotimo> huh

[14:02] <MasterDuke> nearly the last line

[14:02] <MasterDuke> that's whatever your --prefix is i think

[14:03] <timotimo> yeah

[14:03] <MasterDuke> oh, you did change it

[14:03] <MasterDuke> oh! this is new. `free(): corrupted unsorted chunks`

[14:03] <timotimo> super weird. valgrind will probably take far too long?

[14:04] <MasterDuke> i'll start it

[14:04] <MasterDuke> gotta afk in a little while anyway

[14:04] <timotimo> mhh

[14:04] <timotimo> that's some really strange behaviour

[14:06] <MasterDuke> for sure

[14:06] *** [TuxCM] left
[14:09] <MasterDuke> huh, i see a couple of those `free(): corrupted unsorted chunks` in gdb, but it didn't break

[14:13] <timotimo> is it running subprocesses per chance?

[14:13] <timotimo> does it do precomp like that?

[14:13] <timotimo> because if so, that'd explain the trouble

[14:13] <MasterDuke> looks like yeah

[14:13] <timotimo> multiple processes would be trying to write to the same spesh log file at the same time

[14:13] <MasterDuke> valgrind didn't say anything

[14:14] <timotimo> you can put a %d into the spesh log and telemetry log filenames

[14:14] <timotimo> that'll get the pid

[14:16] <MasterDuke> wow, 13 spesh logs ], ranging from 3mb to 120mb

[14:17] <timotimo> 13 processes means we'll have 13 warm-ups

[14:18] <MasterDuke> but even the 120mb one didn't have any null bytes

[14:18] <timotimo> yeah

[14:18] <timotimo> makes sense

[14:18] <timotimo> we only got the null bytes from multi-threading interference

[14:19] <timotimo> (is my working hypothesis)

[14:20] <MasterDuke> anyway, afk for a while now

[14:21] *** [TuxCM] joined
[14:31] *** fake_space_whale joined
[14:45] <Geth> ¦ rakudo: 07b4100ce0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/install-dist.pl

[14:45] <Geth> ¦ rakudo: Make install-dist.pl executable

[14:45] <Geth> ¦ rakudo: 

[14:45] <Geth> ¦ rakudo: Noticed it in lintian warnings. I'd say it is especially important

[14:45] <Geth> ¦ rakudo: given that it has .pl extension.

[14:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/07b4100ce0

[14:47] <Geth> ¦ rakudo: 9d8b6600cd | (Aleks-Daniel Jakimenko-Aleksejev)++ | 5 files

[14:47] <Geth> ¦ rakudo: Make all tools executable

[14:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9d8b6600cd

[14:50] <Geth> ¦ rakudo: c5c4ea3888 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 5 files

[14:50] <Geth> ¦ rakudo: Make files in tools/build executable

[14:50] <Geth> ¦ rakudo: 

[14:50] <Geth> ¦ rakudo: Only the ones that have a shebang.

[14:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c5c4ea3888

[14:57] *** reportable6 left
[14:57] *** reportable6 joined
[14:57] *** ChanServ sets mode: +v reportable6

[15:02] <lizmat> http://modules.perl6.org/dist/Tuple:cpan:ELIZABETH  # comments / pull requests welcome

[15:08] <Geth> ¦ rakudo: 59a6f7d25f | (Aleks-Daniel Jakimenko-Aleksejev)++ | 4 files

[15:08] <Geth> ¦ rakudo: create-moar-runner.pl → create-moar-runner.p6

[15:08] <Geth> ¦ rakudo: 

[15:08] <Geth> ¦ rakudo: Please revert if tools outside of this repo depend on the script.

[15:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/59a6f7d25f

[15:12] <Geth> ¦ rakudo: 248ee79cfb | (Aleks-Daniel Jakimenko-Aleksejev)++ | 4 files

[15:12] <Geth> ¦ rakudo: install-core-dist.pl -> install-core-dist.p6

[15:12] <Geth> ¦ rakudo: 

[15:12] <Geth> ¦ rakudo: Please revert if tools outside of this repo depend on the script.

[15:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/248ee79cfb

[15:39] <lizmat> AlexDaniel: make: *** No rule to make target `tools/build/create-moar-runner.pl', needed by `perl6-m'.  Stop.

[15:40] <lizmat> guess I need to do a Configure after these last changes ?

[15:40] <AlexDaniel> yes

[15:43] <lizmat> confirmed a configure solved the issue

[15:43] <lizmat> afk for a bit&

[16:30] *** AlexDaniel left
[16:33] *** AlexDaniel joined
[16:36] *** Ven`` left
[16:38] *** Ven`` joined
[17:04] <Geth> ¦ roast: e5e61d9497 | (Zoffix Znet)++ | S32-array/create.t

[17:04] <Geth> ¦ roast: [v6.d REVIEW] Remove pointless `item` coercer

[17:04] <Geth> ¦ roast: 

[17:04] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/dbb376e50

[17:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e5e61d9497

[17:07] <Geth> ¦ roast: 8db9fe8c68 | (Zoffix Znet)++ | S12-introspection/attributes.t

[17:07] <Geth> ¦ roast: [v6.d REVIEW] Simplify Attribute.gist test

[17:07] <Geth> ¦ roast: 

[17:07] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/1458b47cf

[17:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8db9fe8c68

[17:17] <Geth> ¦ roast: d62bdac450 | (Zoffix Znet)++ | S02-types/baghash.t

[17:17] <Geth> ¦ roast: [v6.d REVIEW] Loosen BagHash.BagHash test

[17:17] <Geth> ¦ roast: 

[17:17] <Geth> ¦ roast: We only need an `eqv` baghash, not the exact same object.

[17:17] <Geth> ¦ roast: 

[17:17] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/d8d8e7f32

[17:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d62bdac450

[17:18] *** travis-ci joined
[17:18] <travis-ci> Rakudo build passed. Aleks-Daniel Jakimenko-Aleksejev 'install-core-dist.pl -> install-core-dist.p6

[17:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/404148904 https://github.com/rakudo/rakudo/compare/59a6f7d25f0d...248ee79cfb3f

[17:18] *** travis-ci left
[17:37] <Geth> ¦ roast: 71aefdf8fb | (Zoffix Znet)++ | S32-list/classify-list.t

[17:37] <Geth> ¦ roast: [v6.d REVIEW] Use regular hashes instead of anon state vars

[17:37] <Geth> ¦ roast: 

[17:37] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/816b913d9

[17:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/71aefdf8fb

[17:48] *** fake_space_whale left
[17:59] <MasterDuke> timotimo: MVM_TELEMETRY_LOG puts the pid in automatically, appended to whatever name you give

[18:00] <MasterDuke> it seems like MVM_SPESH_LOG should do the same

[18:00] *** Ven`` left
[18:24] *** brrt joined
[18:28] *** Ven`` joined
[18:37] <Geth> ¦ roast: b7b4625e4c | (Zoffix Znet)++ | S32-list/categorize-list.t

[18:37] <Geth> ¦ roast: [v6.d REVIEW] Use regular hashes instead of anon state vars

[18:37] <Geth> ¦ roast: 

[18:37] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/29366a201

[18:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b7b4625e4c

[18:40] <Geth> ¦ roast: 57e5a7d463 | (Zoffix Znet)++ | S06-signature/types.t

[18:40] <Geth> ¦ roast: [v6.d REVIEW] Fix up .of tests

[18:40] <Geth> ¦ roast: 

[18:40] <Geth> ¦ roast: Test using =:= op instaed of === and then we can also test

[18:40] <Geth> ¦ roast: Mu type propertly, instead of using its .^name

[18:40] <Geth> ¦ roast: 

[18:40] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/cb31fae88

[18:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/57e5a7d463

[18:41] <b2gills> Zoffix: `%()` is the same as `$/.hash` you want to use `%(   )`

[18:43] <Geth> ¦ roast: 7b568420dc | (Zoffix Znet)++ | S02-types/bool.t

[18:43] <Geth> ¦ roast: [v6.d REVIEW] Fix up/expand booly op cover tests

[18:43] <Geth> ¦ roast: 

[18:43] <Geth> ¦ roast: - Test proper values instead of stringifications

[18:43] <Geth> ¦ roast: - Also test infix:<and> with 1 false arg

[18:43] <Geth> ¦ roast: 

[18:43] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/aec5f6ee5

[18:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7b568420dc

[18:46] <AlexDaniel> b2gills: https://github.com/perl6/doc/issues/2113 :)

[18:51] *** Ven`` left
[18:51] <Geth> ¦ 6.d-prep: f91d35aaf9 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[18:51] <Geth> ¦ 6.d-prep: Note 6.d spec already uses demagical meanings of $/ magicals

[18:51] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/f91d35aaf9

[18:52] <AlexDaniel> Zoffix++ # v6.d work

[18:52] *** Ven`` joined
[18:59] <Geth> ¦ roast: 4da102c275 | (Zoffix Znet)++ | 2 files

[18:59] <Geth> ¦ roast: [v6.d REVIEW] Don't spec stringification of Blob.WHICH

[18:59] <Geth> ¦ roast: 

[18:59] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/e4a190daf

[18:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4da102c275

[19:00] <releasable6> Next release in ≈5 days and ≈23 hours. 10 blockers. Please log your changes in the ChangeLog

[19:01] *** cognominal left
[19:27] *** cognominal joined
[19:27] *** cognominal left
[19:27] *** cognominal joined
[19:32] <MasterDuke> jnthn: https://www.moarvm.org/measurements/perl6-bench/2018-07-15.html does have graphs. however, they say nqp and rakudo are using the nom branch. don't know if it's just the text that's wrong or the actual benchmark

[19:49] *** ufobat_ left
[19:51] *** ufobat_ joined
[19:52] *** brrt left
[19:52] *** brrt joined
[20:07] <Geth> ¦ rakudo: 925c113433 | (Zoffix Znet)++ | 2 files

[20:07] <Geth> ¦ rakudo: Make Proc.command return return an immutable List

[20:07] <Geth> ¦ rakudo: 

[20:07] <Geth> ¦ rakudo: instead of an Array. Since accidentally modifying it might

[20:07] <Geth> ¦ rakudo: result in .command returning a different thing that what is being

[20:07] <Geth> ¦ rakudo: actually executed.

[20:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/925c113433

[20:07] <Geth> ¦ roast: d66c1a3349 | (Zoffix Znet)++ | 2 files

[20:07] <Geth> ¦ roast: [v6.d REVIEW] Fix up spec of Proc.command

[20:07] <Geth> ¦ roast: 

[20:07] <Geth> ¦ roast: - Expect an immutable List rather than a mutable Array

[20:07] <Geth> ¦ roast: - Don't expect for .command to return the same types of args

[20:07] <Geth> ¦ roast:     that were given on initialization, so stringify the IO::Path object

[20:07] <Geth> ¦ roast: 

[20:07] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/8e1a1cc7d

[20:08] <Geth> ¦ roast: Rakudo fix up: https://github.com/rakudo/rakudo/commit/925c113433

[20:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d66c1a3349

[20:08] <Geth> ¦ roast: 1825cb0cb0 | (Zoffix Znet)++ | S29-os/system.t

[20:08] <Geth> ¦ roast: [v6.d REVIEW] Don't rely on throws-like() sinking

[20:08] <Geth> ¦ roast: 

[20:08] <Geth> ¦ roast: And sink for sure inside the block, but returning a Nil from the code.

[20:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1825cb0cb0

[20:10] *** brrt left
[20:14] <Geth> ¦ rakudo: fadc256311 | (Zoffix Znet)++ | t/05-messages/03-errors.t

[20:14] <Geth> ¦ rakudo: [v6.d REVIEW] move Proc::Async.new error test from roast

[20:14] <Geth> ¦ rakudo: 

[20:14] <Geth> ¦ rakudo: Don't spec X::Multi::NoMatch behaviour for args

[20:14] <Geth> ¦ rakudo: that might be in use in the future.

[20:14] <Geth> ¦ rakudo: 

[20:14] <Geth> ¦ rakudo: Orig: https://github.com/perl6/roast/commit/34b31b2fb

[20:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fadc256311

[20:15] <Geth> ¦ roast: 11545cfac8 | (Zoffix Znet)++ | S17-procasync/basic.t

[20:15] <Geth> ¦ roast: [v6.d REVIEW] move Proc::Async.new error test from roast

[20:15] <Geth> ¦ roast: 

[20:15] <Geth> ¦ roast: Don't spec X::Multi::NoMatch behaviour for args

[20:15] <Geth> ¦ roast: that might be in use in the future.

[20:15] <Geth> ¦ roast: 

[20:15] <Geth> ¦ roast: Moved to: https://github.com/rakudo/rakudo/commit/fadc256311

[20:15] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/34b31b2fb

[20:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/11545cfac8

[20:21] <Geth> ¦ roast: 2ec8f96cb1 | (Zoffix Znet)++ | S04-blocks-and-statements/pointy.t

[20:21] <Geth> ¦ roast: [v6.d REVIEW] Use better test for Code.file

[20:21] <Geth> ¦ roast: 

[20:21] <Geth> ¦ roast: So that on failure it shows the actual value received

[20:21] <Geth> ¦ roast: 

[20:21] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/3362fb762

[20:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2ec8f96cb1

[20:52] *** brrt joined
[21:16] <Geth> ¦ roast: bf9171b4b4 | (Zoffix Znet)++ | S32-num/complex.t

[21:16] <Geth> ¦ roast: [v6.d REVIEW] Loosen abs on complex tests

[21:16] <Geth> ¦ roast: 

[21:16] <Geth> ¦ roast: - Use is-approx, since we're dealing with floating point math

[21:16] <Geth> ¦ roast: - Clarify how you get 5e0 from abs(3+4i)

[21:16] <Geth> ¦ roast: 

[21:16] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/2e1428a07

[21:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bf9171b4b4

[21:18] <Geth> ¦ 6.d-prep: 6f84798df9 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[21:18] <Geth> ¦ 6.d-prep: Updated Zoffix's reached review commit

[21:18] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/6f84798df9

[21:20] <Geth> ¦ rakudo: 1ad34320e0 | (Elizabeth Mattijsen)++ | src/core/traits.pm6

[21:20] <Geth> ¦ rakudo: Die on using "is required" on a private attribute

[21:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1ad34320e0

[21:22] *** brrt left
[21:28] <MasterDuke> lizmat: any more thoughts on https://github.com/rakudo/rakudo/pull/1844 ?

[21:29] <lizmat> MasterDuke: ping received, will look at it tomorrow

[21:32] <MasterDuke> cool, thanks

[21:42] *** stmuk joined
[21:44] *** stmuk_ left
[21:54] <jnthn> MasterDuke: Given it was so out of date I had to install zef in place of panda, I'd not be surprised if it's accurate :)

[22:01] <jnthn> MasterDuke: yeah, I found some nom references in the script...changed them to master, we can see if it's any better tomorrow

[22:06] *** robertle left
[22:09] <jnthn> Wonder if that'll get us the history reports too

[22:15] *** Ven`` left
[22:27] <MasterDuke> yeah, i just did s/nom/master/g to get it running on my machine. but i wonder if what's really needed is to add a new compiler (i.e., have a rakudo/nom for historical data and rakudo/master for current)

[22:27] <MasterDuke> don't know how well it handles changing branches

[22:28] <MasterDuke> japhb: ^^^ ?

[22:32] * lizmat calls it a day

[22:37] <jnthn> I think for historical you could specify a tag, not a branch

[22:37] <jnthn> https://github.com/rakudo/rakudo/issues/2069 turns out to be because we would previously catch an nqp::null being returned and then turn it into a Mu as part of the return handling

[22:37] <jnthn> Which is kinda workaroundy

[22:38] <jnthn> loop has a bug where it evaluates to nqp::null if it's of the form loop (something; blah; blah) { }, but not in loop { } nor loop (; blah; blah) { }

[22:38] <jnthn> I could put the workaround back, but I suspect it's better to try and fix the loop code-gen issue

[22:39] <jnthn> m: sub foo() { while $++ < 3 { say 'hello' } }; say foo()

[22:39] <camelia> rakudo-moar 1ad34320e: OUTPUT: «hello␤hello␤hello␤Nil␤»

[22:44] <MasterDuke> jnthn: btw, did you catch any of the install-core-dist.pl discussion timotimo and i had earlier today? 13s semaphore wait times, 28mb null bytes in spesh log, 9s waits for logs from the log queue, etc...

[22:44] <timotimo> well, waiting long for logs isn't problematic at all

[22:44] <timotimo> that just means barely anything was being logged by the executing threads, i.e. everything was speshed or jitted

[22:45] <MasterDuke> but a profile shows only 55% jitted

[22:47] <MasterDuke> and given that it's 3s faster with spesh disabled, seems like a good benchmarking tool

[23:03] <jnthn> for hecks sake, the whole sink handling stuff is so convoluted I might just put the null -> Mu mapping back in place :P

[23:04] <MasterDuke> heh

[23:04] <timotimo> ouch.

[23:07] <jnthn> ah, think I figured a way

[23:09] <jnthn> yeah, got it

[23:10] <jnthn> We could put the null mapping back but...really we shouldn't have Perl 6 constructs evaluating an an nqp::null

[23:11] <timotimo> not ok 14 - POST should not see outer $_

[23:11] <timotimo> # Failed test 'POST should not see outer $_'

[23:11] <timotimo> # at t/spec/S04-phasers/in-loop.rakudo.moar line 167

[23:11] <timotimo> is this just me?

[23:12] <timotimo> uh oh, a segfault

[23:13] <jnthn> No, not just you in that one

[23:13] <MasterDuke> 'POST should not see outer $_' is a known fail right now

[23:13] <jnthn> Though not seen it segv

[23:14] <timotimo> this file isn't the one that segfaulted

[23:14] <timotimo> t/spec/S06-currying/positional.t segfaulted in MVM_gc_root_add_instance_roots_to_worklist

[23:14] <timotimo> while going through the sc_weakhash

[23:16] <jnthn> eww

[23:20] <timotimo> in MVM_sc_create this time

[23:20] <timotimo> deserialize_sc_deps

[23:20] <timotimo> is there anything particularly special about the hash(es) inside scs?

[23:21] *** kjp joined
[23:23] <kjp> G'day

[23:23] <timotimo>     Not enough positional arguments; needed at least 2

[23:23] <timotimo>       in block  at t/spec/S17-promise/lock-async-stress.t line 11

[23:23] <timotimo> i'm not sure what's causing all this. i'll re-run without my patch i guess

[23:23] <kjp> I'm getting errors running and installing DBIish with current rakudo HEAD complaining about varoiable definitions in classes: "'is required' only works on a public attribute $.pg_conn, not a private $!pg_conn".

[23:24] <kjp> This occurs in all drivers. Is this a deliberate change which requires fixing in DBIish, or a rakudo bug?

[23:24] <MasterDuke> timotimo: that one's been seen before

[23:24] <timotimo> looks like a change that needs fixing in DBIish

[23:25] <kjp> Okay, I'll raise an issue and/or pull request.

[23:25] <timotimo> MasterDuke: i see multiple test files segv-ing

[23:25] <timotimo> kjp: cool, thanks

[23:25] <MasterDuke> timotimo: yeah, Zoffix (i think) created an issue somewhere for t/spec/S17-promise/lock-async-stress.t

[23:26] <MasterDuke> timotimo: https://github.com/rakudo/rakudo/issues/2071

[23:29] <Geth> ¦ rakudo: aff96baefd | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[23:29] <Geth> ¦ rakudo: Make all cases of statementlist `loop` eval to Nil

[23:29] <Geth> ¦ rakudo: 

[23:29] <Geth> ¦ rakudo: Previously, `loop { }` and `loop (; $++ < 3;) { }` would evaluate to

[23:29] <Geth> ¦ rakudo: Nil, but `loop (my $i = 0; $i < 3; $i++) { }` would evaluate to an

[23:29] <Geth> ¦ rakudo: `nqp::null` due to the oversight that is corrected in this commit. This

[23:29] <Geth> ¦ rakudo: bug was made more visible when recent changes to return handling removed

[23:29] <Geth> ¦ rakudo: the `nqp::null` mapping into Mu, resulting in the problem observed in

[23:30] <Geth> ¦ rakudo: issue #2069. Since all other loop cases evaluated to Nil, this created a

[23:30] <synopsebot> RAKUDO#2069 [open]: https://github.com/rakudo/rakudo/issues/2069 [regression][⚠ blocker ⚠] `Cannot call method 'sink' on a null object` when using `loop` in sink context

[23:30] <Geth> ¦ rakudo: discontinuity where one particular case of `loop` would instead evaluate

[23:30] <Geth> ¦ rakudo: to Mu. Therefore, there was already a bug; the recent changes just made

[23:30] <Geth> ¦ rakudo: it problematic in more cases.

[23:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/aff96baefd

[23:37] <timotimo> i get a bunch of segfaults without my patch, and some even overlap, so i assume there's many that don't reliably segfault and it's not my patch that does it

[23:42] <timotimo> the cat is refusing to close the Tap she has on my Supply of BellyRubs

[23:44] * jnthn goes to rest up so he can fix more regressions tomorrow :)

[23:44] <jnthn> 'night

[23:44] <timotimo> gnite jnthn 

[23:46] <timotimo> kjp: how do you feel about adding something to throw errors when these aren't provided? like fou can give a "default value" with "die 'error message'" for those arguments in submethod BUILD

[23:46] <timotimo> not sure if this class is ever constructed by end-users, it probably isn't

[23:47] <timotimo> i wonder what the logic is behind having :$!parent! but not :$!pg_conn for example

[23:47] <timotimo> i.e. one of them is marked required, but the other isn't

[23:47] <timotimo> BBL

