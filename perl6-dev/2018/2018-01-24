[01:01] <samcv> i've merged the UCD changes and going to bump nqp and rakudo now

[01:02] * TimToady wonders if there's any way to persuade rakudo to turn a socket coming in on fd 0 into an IO::Socket::Async automatically...

[01:02] <Geth> ¦ nqp: e2f3776b67 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[01:02] <Geth> ¦ nqp: Bump MoarVM for Unicode property fixes

[01:02] <Geth> ¦ nqp:

[01:02] <Geth> ¦ nqp: Changes: 2017.12.1-62-ga04d1099b..2017.12.1-65-gcd902eb58

[01:02] <Geth> ¦ nqp: 4e5161542 ucd2c.pl: Fix White_Space/space Unicode Property +many other improvements

[01:02] <Geth> ¦ nqp: 21267d80f Implement tile for OR operator

[01:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e2f3776b67

[01:02] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.12.1-62-ga04d1099b...2017.12.1-65-gcd902eb58

[01:05] <TimToady> rakudo should really not be assuming that stdin is always a file or a terminal

[01:11] <timotimo> agreed, rakudo should become much more flexible with regards to that

[01:18] * TimToady is trying to bring up a udp daemon under xinetd, and it suxors

[01:19] <Geth> ¦ nqp: 45d46a9ee4 | (Jeremy Studer)++ | src/QAST/Block.nqp

[01:19] <Geth> ¦ nqp: Fix blocktype display in Block extra node info

[01:19] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/45d46a9ee4

[01:25] <geekosaur> udp and inetd have always been very strange bedfellows

[01:26] <tbrowder> lizmat: my two p5->p6 modules are now showing om

[01:26] <samcv> AlexDaniel: additionally i wrote a test script that tests that all aliases for propeties have the same property code, and it passed all of them. but before my change it fails

[01:27] <tbrowder> on modules.perl6.org/t/CPAN5

[01:27] <samcv> a few of them

[01:30] <samcv> cf, Case_Folding; sc, Script; STerm, Sentence_Terminal; Upper, Uppercase; WSpace, White_Space, space

[01:31] <samcv> thuogh likely only it's the shortened terms which were failing. cf, sc, STerm, Upper and space (plus the White_Space) but other than that only the shortened ones i believe

[02:30] <Geth> ¦ rakudo/post-release: 494ffb6a13 | (Zoffix Znet)++ | src/core/Any-iterable-methods.pm

[02:30] <Geth> ¦ rakudo/post-release: Revert "Fix Any.skip: *-1 crash"

[02:30] <Geth> ¦ rakudo/post-release:

[02:30] <Geth> ¦ rakudo/post-release: This reverts commit 44ff0a2a4c4fa6c250841a4f065136318be87383.

[02:30] <Geth> ¦ rakudo/post-release: .tail(Callable) is not equivalent to .skip(Callable); spectest

[02:30] <Geth> ¦ rakudo/post-release: from master branch catching this was not yet pulled into postrelease

[02:30] <Geth> ¦ rakudo/post-release: branch when this commit was applied, so nothing was caught

[02:30] <Geth> ¦ rakudo/post-release: review: https://github.com/rakudo/rakudo/commit/494ffb6a13

[03:07] <Geth> ¦ rakudo/post-release: 8efba3a897 | (Zoffix Znet)++ | src/core/Any-iterable-methods.pm

[03:07] <Geth> ¦ rakudo/post-release: Alternate fix for Any.skip: Callable

[03:07] <Geth> ¦ rakudo/post-release:

[03:07] <Geth> ¦ rakudo/post-release: Fixes https://github.com/rakudo/rakudo/issues/1384

[03:07] <Geth> ¦ rakudo/post-release: review: https://github.com/rakudo/rakudo/commit/8efba3a897

[03:09] <Geth> ¦ roast/post-release: cca7b90403 | (Zoffix Znet)++ | S32-list/skip.t

[03:09] <Geth> ¦ roast/post-release: Fix/expand Any.skip: Callable test

[03:09] <Geth> ¦ roast/post-release:

[03:09] <Geth> ¦ roast/post-release: We're meant to have some elements since we're meant to leave

[03:09] <Geth> ¦ roast/post-release: *-$n elems from the end.

[03:09] <Geth> ¦ roast/post-release:

[03:09] <Geth> ¦ roast/post-release: https://github.com/rakudo/rakudo/issues/1384

[03:09] <Geth> ¦ roast/post-release: Rakudo fix: https://github.com/rakudo/rakudo/commit/8efba3a897

[03:09] <Geth> ¦ roast/post-release: review: https://github.com/perl6/roast/commit/cca7b90403

[05:48] <Geth> ¦ rakudo: 49dce163e8 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[05:48] <Geth> ¦ rakudo: [NQP Bump] Brings 11 commits

[05:48] <Geth> ¦ rakudo:

[05:48] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2017.12-80-g9222147e4...2017.12-91-g45d46a9ee

[05:48] <Geth> ¦ rakudo: 45d46a9ee Fix blocktype display in Block extra node info

[05:48] <Geth> ¦ rakudo: e2f3776b6 Bump MoarVM for Unicode property fixes

[05:48] <Geth> ¦ rakudo: 91e4a3e32 Merge pull request #396 from tbrowder/master

[05:48] <Geth> ¦ rakudo: 9a89c769c clarify what 'word' is being discussed

[05:48] <Geth> ¦ rakudo: <…commit message has 7 more lines…>

[05:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/49dce163e8

[05:48] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-80-g9222147e4...2017.12-91-g45d46a9ee

[08:05] <[Tux]> Rakudo version 2017.12-288-g49dce163e - MoarVM version 2017.12.1-65-gcd902eb58

[08:05] <[Tux]> csv-test-xs-20      0.464 -  0.488

[08:05] <[Tux]> csv-ip5xs           1.073 -  1.083

[08:05] <[Tux]> test-t --race       1.147 -  1.204

[08:05] <[Tux]> test-t              2.754 -  2.829

[08:05] <[Tux]> test               11.158 - 11.261

[08:05] <[Tux]> csv-parser         11.800 - 11.820

[08:05] <[Tux]> csv-ip5xs-20       11.706 - 12.062

[08:05] <[Tux]> test-t-20 --race   17.244 - 17.277

[08:05] <[Tux]> test-t-20          49.284 - 49.324

[08:44] <AlexDaniel> m: say `foo`

[08:44] <camelia> rakudo-moar 49dce163e: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 `foo`␤Bogus postfix␤at <tmp>:1␤------> 3say 7⏏5`foo`␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤    …»

[08:44] <AlexDaniel> m: `foo`

[08:44] <camelia> rakudo-moar 49dce163e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:1␤------> 3<BOL>7⏏5`foo`␤    expecting any of:␤        prefix␤        term␤»

[08:44] <AlexDaniel> FWIW https://github.com/perl6/doc/issues/1745#issuecomment-360056350

[09:04] <AlexDaniel> “===> Failed to find dependencies: DateTime::Parse” and what is that even about

[09:04] * AlexDaniel attempts to reproduce

[09:10] <AlexDaniel> looks fine here

[09:10] <AlexDaniel> weird

[09:13] <AlexDaniel> when installing DateTime::Parse itself it got “No candidates found matching identity: DateTime::Parse”

[09:13] <AlexDaniel> that's from toaster

[09:14] <AlexDaniel> looks like a fluke but I'm still interested to know what happened there

[09:55] <stmuk> could be a network issue (the iso standard excuse for everything)

[10:13] <jnthn> Comments welcome: http://news.perlfoundation.org/2018/01/grant-extension-request-perl-6-1.html

[10:18] <AlexDaniel> yey!

[10:21] <El_Che> "jnthn is an all round nice guy. Dogs and babies seem to like him. He devides his spare time in saving children in India and cleaning up plastic from the Atlantic Ocean"

[10:22] <jnthn> I...I think the comments are supposed to be on my proposal :P

[10:23] <El_Che> "If he ever proposes, I will be the happiest person on the planet"

[10:23] <El_Che> too much?

[10:23] <AlexDaniel> “… Therefore I fully support this grant extension request”

[10:23] <jnthn> :D

[10:23] <El_Che> that's the magic

[10:26] <AlexDaniel> speaking about off-topic, now github has a convenient button to report spam, abuse and off-topic stuff

[10:27] <AlexDaniel> so not only you can close and edit tickets, you can freaking report them to github :o

[10:31] <El_Che> just commented, waiting moderation

[10:31] <El_Che> (I think I didn't use much profanity)

[10:52] <lizmat> tbrowder++

[10:53] <lizmat> Files=1233, Tests=76106, 339 wallclock secs (15.23 usr  5.16 sys + 2310.61 cusr 236.38 csys = 2567.38 CPU)

[11:21] <lizmat> .tell tbrowder looks to me like your Net::IP::Lite is *not* a port of Net::IP::Lite on CPAN, am I correct ?

[11:23] <yoleaux> lizmat: I'll pass your message to tbrowder.

[11:26] <stmuk> is the release likely to escape today?

[11:37] <lizmat> AlexDaniel` would know  :-)

[11:37] <lizmat> so re: https://github.com/lizmat/P5wantarray/blob/master/lib/P5wantarray.pm6

[11:37] <lizmat> it appears it bombs trying to tell me I'm using the wrong way to set a slang

[11:37] <lizmat> note("Deprecated use of %*LANG\<$name> assignment detected in $tag; module should export syntax using \$*LANG.define_slang(\"$name\",<grammar>,<actions>) instead")

[11:38] <lizmat> however, if I change my assignment to: %*LANG.define_slang('MAIN',Scalar::Grammar,Scalar::Actions);

[11:38] <AlexDaniel`> Yes, very likely

[11:38] <lizmat> I get: Cannot find method 'define_slang': no method cache and no .^find_method

[11:40] <AlexDaniel`> As soon as s.a.m.c.v wakes up and ready we will let it free :)

[11:41] <tbrowder> lizmat: that’s correct, NOT a port of CPAN5 Net::IP::Lite.  given that   it’s a subset of Net::IP, it should probably be renamed. in either event, i guess it doesn’t qualify as a port since it’s a subset. i will remove the tag since it’s misleading.

[11:41] <yoleaux> 11:23Z <lizmat> tbrowder: looks to me like your Net::IP::Lite is *not* a port of Net::IP::Lite on CPAN, am I correct ?

[11:42] <lizmat> tbrowder: rename it to Net::IP, or at least make a copy to Net::IP and work on complete support ?

[11:47] <tbrowder> ok, but is there a way to do a rename other than deprecate the current name and publish under a new name?

[11:48] <lizmat> if there is, I don't know of it :-)

[11:48] <tbrowder> okey dokey

[11:50] <lizmat> .tell DrForr looks like Slang::Roman doesn't install anymore due to test failures

[11:50] <yoleaux> lizmat: I'll pass your message to DrForr.

[11:50] <lizmat> .tell DrForr investigating, will produce a PR when cause is found

[11:50] <yoleaux> lizmat: I'll pass your message to DrForr.

[11:58] <lizmat> hmmm... Slang::Kazu doesn't install for the same reason my P5wantarray fails:

[11:58] <lizmat> New type for Perl6::Grammar must have a matching representation (P6opaque vs Uninstantiable)

[11:59] <lizmat> I wonder if Slang::Tuxic still installs

[12:00] <lizmat> cause if it doesn't, then Text::CSV won't install either

[12:15] <lizmat> .tell DrForr PR sent

[12:15] <yoleaux> lizmat: I'll pass your message to DrForr.

[12:21] <DrForr> Merged - I've been watching in the background.

[12:21] <yoleaux> 11:50Z <lizmat> DrForr: looks like Slang::Roman doesn't install anymore due to test failures

[12:21] <yoleaux> 11:50Z <lizmat> DrForr: investigating, will produce a PR when cause is found

[12:21] <yoleaux> 12:15Z <lizmat> DrForr: PR sent

[12:25] <Zoffix> lizmat: note in that slang error message, the sigil on LANG is different. Also, if you did not mix in core grammar/action, use .refine_slang method instead

[12:25] <Zoffix> huggable: slang

[12:25] <huggable> Zoffix, https://mouq.github.io/slangs.html   Make an op that chains right (uses unsupported feature: slangs): BEGIN { $?LANG.refine_slang('MAIN', role { token infix:sym«smaller» { <sym> <O('prec', 'm=', 'assoc', 'left', 'dba', 'chaining', 'iffy', 1, 'diffy', 1, 'pasttype', 'chain')> } } )}; sub infix:<smaller> { $^a < $^b }; say 1 smaller 2 smaller 3

[12:25] <Zoffix> like that ^

[12:27] <lizmat> Zoffix: thanks, had gotten to that point already, looking at other fails now  :-(

[12:29] <psch> thread cleanup in java is a mess :l

[12:29] <psch> i'm hoping cleaning up circular references between a GlobalContext and its ThreadContexts is enough for the EvalServer, buuut

[12:30] <psch> 'cause yeah, apparently killing the threads spawned by the EvalServer doesn't necessarily clean up everything those threads allocated

[12:35] <psch> humm, actually mark-and-sweep

[12:35] <psch> guess i should instead look closely at the GC roots :s

[13:10] <lizmat> AlexDaniel`: I guess the failing test in S05-mass/properties-general.t is why you're waiting for samcv ?

[13:10] <AlexDaniel> failing test? :O

[13:10] <tbrowder> .tell lizmat just uploaded Net::IP with CPAN5 tag and another, obsolete version of Net::IP::Lite with NO CPAN5 tag.

[13:10] <yoleaux> tbrowder: I'll pass your message to lizmat.

[13:10] <lizmat> tbrowder++

[13:10] <yoleaux> 13:10Z <tbrowder> lizmat: just uploaded Net::IP with CPAN5 tag and another, obsolete version of Net::IP::Lite with NO CPAN5 tag.

[13:11] <lizmat> AlexDaniel: test 615 fails for me consistently

[13:11] <lizmat> m: say "9" ~~ /<:Numeric_Type<Digit>>/

[13:11] <camelia> rakudo-moar 49dce163e: OUTPUT: «Nil␤»

[13:12] <tbrowder> AlexDaniel: i made the change to the nqp detabify PR, but it may need closing and reopening--your call, of course.

[13:13] <AlexDaniel> lizmat: ok, well, I was waiting because I cannot proceed without a moarvm release

[13:13] <lizmat> ah, ok  :-)

[13:13] <AlexDaniel> lizmat: now… regarding that test… How come I only have 606

[13:13] <AlexDaniel> ah

[13:13] <AlexDaniel> I see…

[13:14] <lizmat> my roast is on master, afaics

[13:15] <AlexDaniel> ok that's a problem, thanks for letting me know

[13:43] <AlexDaniel> yeah, I definitely see a failure in t/spec/S05-mass/properties-general.t

[13:43] <AlexDaniel> .tell samcv S05-mass/properties-general.t file has a failing test

[13:43] <yoleaux> AlexDaniel: I'll pass your message to samcv.

[13:58] <lizmat> m: $_ = 42; dd $_.VAR.dynamic  # so far so good

[13:58] <camelia> rakudo-moar 49dce163e: OUTPUT: «Bool::True␤»

[13:59] <lizmat> m: my $a = 42; with $a { dd $_.VAR.dynamic }  # huh ?

[13:59] <camelia> rakudo-moar 49dce163e: OUTPUT: «Bool::False␤»

[13:59] <Zoffix> lizmat: it gets made into a lexical

[14:01] <Zoffix> If you look at --target=ast

[14:01] <lizmat> m: my $a is dynamic; dd $a.VAR.dynamic

[14:01] <camelia> rakudo-moar 49dce163e: OUTPUT: «Bool::True␤»

[14:01] <lizmat> lexical doesn't prevent it from being dynamic

[14:02] <psch> m: my $a is dynamic; with $a { dd $_.VAR.dynamic }

[14:02] <camelia> rakudo-moar 49dce163e: ( no output )

[14:02] <psch> :l

[14:02] <psch> m: my $a is dynamic; $a = 42; with $a { dd $_.VAR.dynamic }

[14:02] <camelia> rakudo-moar 49dce163e: OUTPUT: «Bool::True␤»

[14:02] <lizmat> m: my $a is dynamic = 42; with $a { dd $_.VAR.dynamic }

[14:02] <camelia> rakudo-moar 49dce163e: OUTPUT: «Bool::True␤»

[14:02] <Zoffix> I notice tho `with 42 { .say }` just has lexical $_ param, but `.say with 42` has lexical $_ var, but then also lowered param that's then bound to lexical $_ is that really a win? Wouldn't just binding to $_ straight away be better?

[14:02] <lizmat> the reason I'm asking is this:

[14:03] <lizmat> m: sub a { dd CALLER::<$_> }; my $a = 42; with $a { a }

[14:03] <camelia> rakudo-moar 49dce163e: OUTPUT: «Cannot access '$_' through CALLER, because it is not declared as dynamic␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:04] <Zoffix> m: sub a { dd CALLERS::<$_> }; my $a = 42; with $a { a }

[14:04] <camelia> rakudo-moar 49dce163e: OUTPUT: «Int $a = 42␤»

[14:04] <Zoffix> (why? no idea...)

[14:04] <lizmat> hmmm...indeed

[14:05] <lizmat> m: sub a { dd CALLER::<$_> }; with 42 { a }  # and this works ?

[14:05] <camelia> rakudo-moar 49dce163e: OUTPUT: «42␤»

[14:08] <lizmat> CALLERS it is then

[14:09] <psch> hm, looks like AT-KEY on PseudoStash is actually buggy there?

[14:09] <psch> as in, we only check for REQUIRE_DYNAMIC when we have PRECISE_SCOPE

[14:09] <psch> ...if i can still read nqp that is :X

[14:10] <Zoffix> Ah, then it might be R#1372

[14:10] <synopsebot> R#1372 [open]: https://github.com/rakudo/rakudo/issues/1372 Map instead of Hash from sub EXPORT results in missing error about non-dynamics via CALLER::

[14:10] <psch> around src/core/PseudoStash.pm:203

[14:10] <Zoffix> "I think the problem here is that dynamic is presently a property on a Scalar (or Array or Hash)."

[14:10] <Zoffix> So `with 42` doesn't have a scalar, but `with $a` does

[14:10] <psch> Zoffix: i'm about CALLER vs CALLERS

[14:10] <Zoffix> ah

[14:11] <Zoffix> m: sub a { dd CALLER::<$_> }; my $a := 42; with $a { a }

[14:11] <camelia> rakudo-moar 49dce163e: OUTPUT: «42␤»

[14:11] <psch> PseudoStash.AT-KEY only checks for REQUIRE_DYNAMIC when we have PRECISE_SCOPE, but CALLERS doesn't

[14:11] <Zoffix> m: sub a { use nqp; dd nqp::getlexdyn('$_') }; my $a = 42; with $a { a }

[14:11] <camelia> rakudo-moar 49dce163e: OUTPUT: «Int $a = 42␤»

[14:17] <lizmat> AlexDaniel: it's test *605* that fails consistently

[14:17] <AlexDaniel> lizmat: ok that makes more sense

[14:17] <lizmat> sorry for the confusion :-)

[14:42] <lizmat> afk for Brussels.PM meeting

[14:44] <[Coke]> have fun!

[14:49] <dogbert2> m: say (* + $_)(32) given 10

[14:49] <camelia> rakudo-moar 49dce163e: OUTPUT: «Use of uninitialized value of type Any in numeric context␤32␤  in whatevercode  at <tmp> line 1␤»

[14:53] <psch> m: given 10 { say (* + $_)(32) }

[14:53] <camelia> rakudo-moar 49dce163e: OUTPUT: «42␤»

[14:53] <psch> m: say (* + CALLER:<$_>)(32) given 10

[14:53] <camelia> rakudo-moar 49dce163e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    CALLER:<$_> used at line 1␤␤»

[14:53] <psch> m: say (* + CALLER::<$_>)(32) given 10

[14:53] <camelia> rakudo-moar 49dce163e: OUTPUT: «42␤»

[14:53] <psch> /o\

[14:55] <psch> j: say (* + $_)(32) with 10

[14:55] <camelia> rakudo-jvm a92950fb4: OUTPUT: «Use of uninitialized value of type Any in numeric context␤  in whatevercode  at <tmp> line 1␤32␤»

[15:08] <Zoffix> dogbert17: that's all part of R#1212 I already got a rough fix; just need to make it more robust

[15:08] <synopsebot> R#1212 [open]: https://github.com/rakudo/rakudo/issues/1212 Uninitialized $_ and weird blowage (<a b c>[$_ xx 2] with 1)

[15:10] <dogbert2> Zoffix: cool, I stole the example from RT #126413

[15:10] <synopsebot> RT#126413 [new]: https://rt.perl.org/Ticket/Display.html?id=126413 [BUG] WhateverCode loses topic inside given modifier

[15:10] <dogbert2> I got the impression that you were working on a similar/same problem

[15:10] <Zoffix> Ah, nice. Gonna add it to my monster-kill list :)

[15:10] <dogbert2> :-)

[15:11] <dogbert2> m: say ("{$_}") for <aa bb> # is this something similar ?

[15:11] <camelia> rakudo-moar 49dce163e: OUTPUT: «Use of uninitialized value $_ of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤␤␤  in block  at <tmp> line 1␤Use of uninitialized value $_ of type Any in string context…»

[15:12] <dogbert2> Zoffix: ^^ RT #128054

[15:12] <synopsebot> RT#128054 [open]: https://rt.perl.org/Ticket/Display.html?id=128054 [PARSER] In a string enclosed in parens, a {}-interpolation can't access the topic $_ of a statement modifier

[15:12] <Zoffix> dogbert2: yeah, that too. These 7 tickets is what I currently have: https://github.com/rakudo/rakudo/issues/1212#issuecomment-359869111

[15:12] <Zoffix> (8 if you count the OP Issue)

[15:13] <dogbert2> very cool, do you know what's wrong ?

[15:13] <Zoffix> Blocks in wrong scope.

[15:14] <dogbert2> Is it a Rakudo problem or nqp?

[15:14] <Zoffix> Rakudo.

[15:15] <dogbert2> I guess it will be part of your post-release branch then :-)

[15:15] <Zoffix> Yeah.

[15:16] <dogbert2> m: sub foo($x) { say (* ~ $x)($_) given $x }; foo(1); foo(2)

[15:16] <camelia> rakudo-moar 49dce163e: OUTPUT: «11␤21␤»

[15:17] <dogbert2> RT #126984

[15:17] <synopsebot> RT#126984 [open]: https://rt.perl.org/Ticket/Display.html?id=126984 [BUG] WhateverCode in given doesn't get refreshed when entering surrounding block in Rakudo

[15:17] <dogbert2> perhaps that's something different though

[15:22] <dogbert2> m: sub x { my $ver = .lines.uc with "blazr".IO.open orelse note "meow {.exception.message}" and return 42; "meow$ver" }; dd x

[15:22] <camelia> rakudo-moar 49dce163e: OUTPUT: «No such method 'exception' for invocant of type 'Any'␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:22] <dogbert2> RT #132172

[15:22] <synopsebot> RT#132172 [new]: https://rt.perl.org/Ticket/Display.html?id=132172 [BUG] `orelse` + block in a string gets the wrong $_

[15:24] <dogbert2> Zoffix: is the last two RT's suffers from the same problem you'll be able to close 10 bugs

[15:26] <dogbert2> s/is/if/

[15:27] <Zoffix> Yeah look to be the same

[15:27] <Zoffix> Thanks.

[15:34] <pmurias> when is 6.d planned? (what's the deadline for throwing away not yet specced bad tests :) )

[15:36] <Zoffix> pmurias: oh, I thought I responded, but forgot.... For overflow tests, yeah kinda implementation specific. I think these should go into optional Appendix. Kinda like out error message testing currently in Rakudo's test suite. As in: implementations can adhere to these to be more similar to other implementations, but they can still call themselves Perl 6 even if they don't pass optional Apendixes

[15:37] <pmurias> Zoffix: https://github.com/perl6/roast/commit/7143a330e9 seems a super bad test

[15:38] <Zoffix> pmurias: as for 6.d. It's currently blocked by R#1289 . If that's resolved, I imagine 6.d can happen rather fast, as pretty much everything else I have a good idea how to implement

[15:38] <synopsebot> R#1289 [open]: https://github.com/rakudo/rakudo/issues/1289 [6.d][severe] [6.d BLOCKER] Implement a Way to Know Caller's Language

[15:38] <pmurias> for some large powers we expect hanging, for other bigger ones we expect and exceptions

[15:39] <Zoffix> yeah

[15:40] <psch> m: say $?LANG.WHAT

[15:40] <camelia> rakudo-moar 49dce163e: OUTPUT: «No such method 'gist' for invocant of type 'Perl6::Grammar'. Did you mean any of these?␤    ast␤    isa␤    list␤␤  in block <unit> at <tmp> line 1␤␤»

[15:40] <psch> ...yeah, .gist on .WHAT >_>

[15:40] <psch> hm, but that doesn't really help with 1289 anyway, unless we expand Grammar to have some kind of version info

[15:40] <Zoffix> Like here: https://github.com/perl6/roast/blob/master/S32-num/power.t#L131-L136

[15:41] <Zoffix> R#1289

[15:41] <Zoffix> Ah the blocker.

[15:41] <psch> right

[15:42] <Zoffix> psch: the grammar has version info. It's during runtime that it needs to be available

[15:42] <Zoffix> m: use nqp; dd nqp::getcomp('perl6').language_version

[15:42] <camelia> rakudo-moar 49dce163e: OUTPUT: «"6.c"␤»

[15:42] <psch> plus i imagine "callers language" might eventually not necessarily be Perl6::Grammar but e.g. Perl5::Grammar

[15:42] <psch> e.g. when 'use v5' gets finished

[15:43] <Zoffix> ^ that can't be used, because after we compile with whatever language a method may be called by either 6.d or 6.c caller

[15:44] <pmurias> Most of the time I can port MoarVM specific stuff to the JS (or JVM) but I think that tying our language to what early 2018 MoarVM does is a bad idea

[15:46] <Zoffix> So it could be shoved into a variable of block/comp_unit, but then still a problem exists: (6.c user code calls open "-") -> (6.d-compiled core's &open calls IO::Handle.new(:path<->).open) -> (.open thinks caller is 6.d and uses 6.d semantics, rather than the 6.c semantics user intended)

[15:46] <Zoffix> pmurias: I'm +1 on ripping out tests like you pointed out + string content of error messages out of roast and shoving them somewhere separate

[15:47] <Zoffix> like any tests that expect some limits. maximum RAM/maximum power op size etc

[15:48] <psch> Zoffix: the grammar in $?LANG has version info?

[15:49] <psch> m: use nqp; say nqp::getcomp('perl6') eqv $?LANG

[15:49] <camelia> rakudo-moar 49dce163e: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Any but got Perl6::Compiler (?)␤  in block <unit> at <tmp> line 1␤␤»

[15:49] <Zoffix> Hm. We could shove version into special dyn var stuffed into blocks/comp_unit, except when we're compiling core stuff. Then dynlookup would always reach to place where user would have ability to set version

[15:49] <Zoffix> getcomp gives Perl6::Compiler

[15:49] <psch> hm, maybe i'm wrong tying "language" to "grammar" there anyway

[15:50] <Zoffix> At least currently, we're not making `use v6.blah` lexical. It's comp-unit scoped and from what I can see `nqp::getcomp('perl6').language_version` gives right version then.

[15:50] <Zoffix> m: use v6.d.PREVIEW; dd nqp::getcomp('perl6').language_version

[15:50] <camelia> rakudo-moar 49dce163e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::getcomp, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3e v6.d.PREVIEW; dd nqp::getcomp('perl6')7⏏5.language_version␤»

[15:50] <Zoffix> m: use v6.d.PREVIEW; use nqp; dd nqp::getcomp('perl6').language_version

[15:50] <camelia> rakudo-moar 49dce163e: OUTPUT: «"6.d"␤»

[15:51] <pmurias> Zoffix: re error messages a lot of them seem like places where we might want to use a structured exception

[15:52] <psch> m: use v6.d.PREVIEW; use nqp; dd nqp::getcomp('perl6').language_version; { use v6.c; use nqp; dd nqp::getcomp('perl6').language_version }; # /o\

[15:52] <camelia> rakudo-moar 49dce163e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No compiler available for Perl v6.c␤at <tmp>:1␤------> 3mp('perl6').language_version; { use v6.c7⏏5; use nqp; dd nqp::getcomp('perl6').lang␤»

[15:52] <Zoffix> pmurias: yeah, but there are a lot of tests that test exact text content of what `.message` returns. IMO they should just check the type of the exception and any attributes that are meant to have some sort of objects, but not the exact text, because it can be reworded/clarified/additional info attached to it, etc.

[15:53] <psch> +1 on that

[15:53] <psch> that was kinda the first thing i contributed too, typed exceptions from some parts of Perl6::Grammar heh

[15:53] <Zoffix> :)

[15:54] <psch> though i might've been overzealous with .message with some tests

[15:55] <psch> $ grep -RIn '.message' t/spec | grep -v '.git' | wc -l

[15:55] <psch> 513

[15:55] <psch> hummm

[15:55] <psch> though some of them probably are throws-like with e.g. message => /.../

[15:55] <psch> ...or however the &throws-like interface exactly looks like

[15:56] <psch> and also false positives vOv

[15:56] * Zoffix &

[15:56] * psch stops blabbing

[16:20] <tbrowder> nqp err msg: no registered operation handler for spawn

[16:21] <tbrowder> it’s documented in the opcodes listing.  looking for a test...

[16:23] <tbrowder> no test found except for spawnprocasync

[16:23] <tbrowder> doc error or nqp error?

[16:26] <psch> Proc::Async seems to use it just fine

[16:27] <pmurias> tbrowder: hasn't it been removed?

[16:27] <psch> m: use nqp; nqp::spawnprocasync

[16:27] <camelia> rakudo-moar 49dce163e: OUTPUT: «===SORRY!===␤Arg count 0 doesn't equal required operand count 6 for op 'spawnprocasync'␤»

[16:29] <tbrowder> pmurias: i didn’t see anything in GH nqp issues or PRs, but it may have been.  i’m not real familiar with the code.

[16:30] <pmurias> psch: nqp::spawnprocasync is the thing nqp::spawn and nqp::shell where replaced with

[16:30] <psch> ohh

[16:30] <psch> pmurias: right, apparently i misread tbrowders messages :)

[16:30] <tbrowder> the docs still show spawn and shell

[16:31] <psch> right, so missing docs and tests for spawnprocasync is the bugs

[16:31] <tbrowder> a

[16:31] <psch> and maybe still having tests and docs for shell and spawn is more bugs, i suppose

[16:32] <pmurias> psch: we don't have the tests anymore

[16:32] <pmurias> and I wrote a spawnprocasync test

[16:32] <tbrowder> no, tests are there for spawnprocasynch, just missing docs...i’ll enter bug but i would appreciate the document update...

[16:32] <psch> pmurias++

[16:36] <psch> also my patches to the GlobalContext and EvalServer don't really seem to help with memory usage of the latter...

[16:36] <psch> plus jhat is kinda difficult to handle

[16:36] <psch> and then there's the whole "*well* business apps on the jvm should have between 12 and 16gb of heap anyway"

[16:41] <psch> not instantiating IgnoreNameClassLoader seemed to have done *something* at least, unfortunately this something includes "looping in S29-os-system.t" :/

[16:41] <psch> but yeah, it looks to me like we keep runtime generated classes around indefinitely in memory, probably via class loader references

[16:42] <tbrowder> hm, spawn would sure be handier to use for a simple test of a short prog,

[16:43] <tbrowder> can you show an example of spawnprocasynch for a simple command of “nqp myfile.nqp”? blocking until completion is desired if that is a factor.

[16:45] <tbrowder> my use case is to add an nqp test for a known pod parse failure.

[16:46] <tbrowder> anyone?

[17:02] <jnthn> tbrowder: Do you really need to write it in NQP?

[17:03] <jnthn> Anyway, you'll need a concurrent queue, to set up a completion callback that will be pushed onto that queue, then I guess shift from the queue which will block

[17:03] <jnthn> It's possible, though not convenient :)

[17:14] <tbrowder> well i guess i could add another nqp test file that uses rakudo’s run routine to drive nqp but i don’t think that would make sense.  i think the existing nqp pod test are weak, even for the limited pod allowed.

[17:15] <tbrowder> *tests

[17:15] <psch> oh hm, the loop in S29-os/system.t is expected :o

[17:15] <psch> i suppose i have to rerun spectest then /o\

[17:16] <tbrowder> they don’t test the existing nqp grammar imho.

[17:16] <psch> plus run it again without my changes to see if those do anything :l

[17:29] <DrForr> tbrowder: The tests certainly aren't complete. Feel ree to pick over what I've got in drforr/perl6-Pod-To-HTMLBody if you need better coverage.

[17:32] <tbrowder> DrForr: thanks for the offer!

[17:34] <tbrowder> but the nqp tests can’t use p6.

[17:35] <tbrowder> however, i believe i can use p5!

[17:36] <DrForr> Oh, wrong layer, right.

[17:41] <tbrowder> correct.

[17:45] <pmurias> tbrowder: for an example of nqp::spawnasync look at the tests (or how the js backend call beautify)

[17:47] <jnthn> Oh, there's a best for it? Neat; I shoulda thought of that. pmurias++

[17:47] <tbrowder> thanks, but pretty ugly for me. any objections to using p5 “system”for execing nqp file?

[18:31] <Geth> ¦ nqp/post-release: 0264b23793 | (Zoffix Znet)++ | 2 files

[18:31] <Geth> ¦ nqp/post-release: Easyfy matching Block WVals with their QAST::Blocks…

[18:31] <Geth> ¦ nqp/post-release:

[18:31] <Geth> ¦ nqp/post-release: …when looking through QAST dumps.

[18:31] <Geth> ¦ nqp/post-release:

[18:31] <Geth> ¦ nqp/post-release: - Teach QAST::Node.dump to dump value for statement_id

[18:31] <Geth> ¦ nqp/post-release: - Teach QAST::WVal.dump_extra_node_info to rake for CUID

[18:31] <Geth> ¦ nqp/post-release:     from past_block annotation, if one's present

[18:31] <Geth> ¦ nqp/post-release: review: https://github.com/perl6/nqp/commit/0264b23793

[18:46] <[Coke]> tbrowder: do you have a sentence or two on why you're doing this in nqp & not rakudo?

[18:48] <[Coke]> (I imagine it would be easier in rakudo?)

[19:03] <tbrowder> [Coke] yes: nqp and other low-level code allows simple pod but the allowable pod formats are not fully tested.  it seems to me that that should be tested along with the other tests, thus using nqp (or perl 5). unless there is another way, i would like to test known failure conditions by executing an nqp program with known bad code and test the exec return for failure. we already have pod tests, they just need to

[19:03] <tbrowder> be more robust. my plan is to use nqp to learn how to add a pod slang. i think that is easier than working first with rakudo when i'm trying to learn from scratch--MUCH easier build cycle for one thing.

[19:04] <tbrowder> that is, much easier to build nqp than rakudo.

[19:06] <tbrowder> of course if someone wants to add the p6 pod-slang and let me then putter with it and extend it that would be wonderful!

[19:13] <japhb> AlexDaniel: I'm still catching up in the backlog, so apologies if this is resolved now, but in a local build a few minutes ago, I also got the '===> Failed to find dependencies: DateTime::Parse' error

[19:14] <AlexDaniel> japhb: dammit :)

[19:14] <AlexDaniel> yea it still happens here too

[19:15] <japhb> Unfortunately it's part of a larger "rebuild everything" script, so I'm not sure what got the spurious dependency.  :-(

[19:15] <AlexDaniel> actually, it installed just fine on my computer

[19:15] <AlexDaniel> but it failed in toaster again when I reran everything

[19:15] <AlexDaniel> no idea really

[19:18] <AlexDaniel> japhb: while we're at it, can you try `zef install CSS::Grammar`? :)

[19:18] <japhb> Ah, forgot about `zef rdepends`.  Looks like HTTP::UserAgent and Task::Popular

[19:20] <japhb> AlexDaniel: install of CSS::Grammar succeeded, but that's using a 1-2 day old Rakudo build (though with fully updated zef indexes)

[19:21] <AlexDaniel> can you retry with a new one? It's not a zef issue with CSS::Grammar

[19:21] <AlexDaniel> but what I really don't understand is that it succeeded on both 2017.12 and the very HEAD in toaster

[19:22] <AlexDaniel> but I can't install it…

[19:22] <AlexDaniel> sure, looking at the code now, but what's going on…

[19:23] <AlexDaniel> both CSS::Grammar and JSON::Fast (its dep) were not touched in the last few hours

[19:23] <AlexDaniel> so can't be that

[19:24] * japhb is doing a full rebuild with HTTP::UserAgent commented out of the module install list

[19:26] <dogbert17> AlexDaniel: ===> Testing: CSS::Grammar:ver<0.3.1>:auth<github:p6-css>

[19:26] <dogbert17> ===> Testing [OK] for CSS::Grammar:ver<0.3.1>:auth<github:p6-css>

[19:26] <dogbert17> ===> Installing: CSS::Grammar:ver<0.3.1>:auth<github:p6-css>

[19:26] <AlexDaniel> argh

[19:26] <dogbert17> can try it on my 64 vit vm as well

[19:26] <dogbert17> *bit

[19:27] <AlexDaniel> maybe that looks familiar to somebody?

[19:27] <AlexDaniel> https://gist.githubusercontent.com/AlexDaniel/c8992daf502d1fcaa0c4d60997eceedf/raw/86ef808ea2c819e14f3e5b4006731fbee7a10543/gistfile1.txt

[19:28] <AlexDaniel> I've already tried rm -rf-ing the whole installation

[19:29] <AlexDaniel> aaaaaaaaaaaaaaaah

[19:29] <japhb> Was that a scream or a sigh of relief?

[19:30] <AlexDaniel> relief

[19:30] <AlexDaniel> I nuked ~/.zef

[19:30] <japhb> oh?

[19:30] <AlexDaniel> now it works

[19:30] <AlexDaniel> OK although I still don't understand why that was needed

[19:30] <japhb> I was about to ask if you'd deleted ~/.zef and ~/.perl6/precomp too

[19:32] <japhb> Gah, zef dependency search is S-L-O-W

[19:42] <timotimo> yeah, rather not quite very fast

[19:45] <dogbert17> m: use Test; is "\t \t" ~~ /<:space>+/, " ", "Space chars"

[19:45] <camelia> rakudo-moar 49dce163e: OUTPUT: «not ok 1 - Space chars␤# Failed test 'Space chars'␤# at <tmp> line 1␤# expected: " "␤#      got: Match.new(list => (), made => Any, pos => 3, hash => Map.new(()), orig => "\t \t", from => 0)␤»

[19:45] <japhb> jnthn: Commented (in support, of course) on your grant extension request -- and I just checked, my donation through work to the fund was paid too.

[19:46] <dogbert17> failing test, #605, in S05-mass/properties-general.t

[19:46] <AlexDaniel> dogbert17: yes, known

[19:46] <AlexDaniel> dogbert17: thanks

[19:46] <AlexDaniel> dogbert17: I pinged samcv so I guess she'll take care of that

[19:46] <dogbert17> there's a comment in the file claiming that the test seems wrong

[19:46] <dogbert17> ah, ok :-)

[19:46] <japhb> BTW, anyone here who has company match on donations, and your company uses Benevity for delivering those -- you should now be able to donate directly to the Perl 6 Core Development Fund.  :-)

[19:47] <psch> " " being the desired result seems wrong to me

[19:56] <AlexDaniel> so apart from DateTime::Parse failing under some miraculous conditions, and one test failing obviously, I see no issues

[19:56] * AlexDaniel afk for ≈2 hours

[20:02] <samcv> ok i am awake

[20:02] <yoleaux> 13:43Z <AlexDaniel> samcv: S05-mass/properties-general.t file has a failing test

[20:06] <Geth> ¦ roast: 144670d13b | (Samantha McVey)++ | 2 files

[20:06] <Geth> ¦ roast: Correct <:space> test and add tests for White_Space regression

[20:06] <Geth> ¦ roast:

[20:06] <Geth> ¦ roast: <:space> should match \t, so the test was incorrect as previously

[20:06] <Geth> ¦ roast: written. Also test '1''s White_Space property to make sure it is false.

[20:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/144670d13b

[20:06] <samcv> AlexDaniel: ok test should be correct now

[20:09] <japhb> AlexDaniel: Complete rebuild

[20:09] <japhb> Erg

[20:10] <japhb> AlexDaniel: Complete rebuild without HTTP::UserAgent (and thus the DateTime::Parse dependency) worked fine, as did installing CSS::Grammar on the freshly build Rakudo

[20:10] <AlexDaniel> samcv: then I think we're good

[20:10] <samcv> nice :)

[20:12] <[Coke]> tbrowder: sounds like a reasonable plan.

[20:24] <jnthn> japhb: Thanks for both of those. :-)

[20:27] <MasterDuke> jnthn: what's the link for the grant request?

[20:28] <jnthn> MasterDuke: http://news.perlfoundation.org/2018/01/grant-extension-request-perl-6-1.html

[20:30] <MasterDuke> thanks

[20:31] <samcv> jnthn: nice :)

[20:35] <AlexDaniel> anyway, afk for a bit

[20:35] <AlexDaniel> or a kilobit, but hoping to get the release going when I'm back

[20:36] <AlexDaniel> *wink-wink*

[20:41] <[Coke]> jnthn: I tried to give you a positive comment, but am unable to login at the moment. Uhoh.

[20:43] <AlexDaniel> .oO( give a negative then xD )

[20:44] <AlexDaniel> .oO( anonymously )

[21:52] <tbrowder> [Coke]: thnx

[23:03] <pmurias> jnthn:

[23:03] <pmurias> sorry

[23:04] <jnthn> What for? :P

[23:04] <jnthn> Oh, the highlight :)

[23:27] <psch> well, without my patches spectest got stuck S17-supply/throttle.t for a significant amount of time

[23:28] <psch> +in

[23:29] <psch> i'm guessing those go into post-release or i sit on them until after the release?  or did i miss it happening?

[23:42] <psch> ...curiously i'm also seeing a continuous increase in mem usage with 'say "foo"' as the to-be-eval'd program, which bartolin says in RT#132104 doesn't happen :/

[23:42] <synopsebot> RT#132104 [open]: https://rt.perl.org/Ticket/Display.html?id=132104 [JVM] EvalServer leaks threads and memory when using Proc::Async

[23:43] <psch> my patches do impact the rate of mem usage growth at least vOv
