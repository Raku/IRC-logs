[01:43] <timotimo> m: my $test = Int; my $p = Foo => Bar => $test; $p.value.value = 99; say $test;

[01:43] <camelia> rakudo-moar 6a6470f9d: OUTPUT: «99␤»

[01:43] <timotimo> i wonder what's giving me trouble in my own code

[01:45] <timotimo> haha, i stripped the container with <>, which did what i wanted, but at the wrong time

[01:47] <timotimo> DSLs are fun, i should make them more often

[04:23] <Geth> ¦ roast: 7dd5939eda | (Zoffix Znet)++ | S32-io/IO-Socket-Async.t

[04:23] <Geth> ¦ roast: Remove trailing whitespace

[04:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7dd5939eda

[04:28] <Geth> ¦ rakudo: 7ba50d8647 | (Zoffix Znet)++ | src/core/Buf.pm

[04:28] <Geth> ¦ rakudo: Fix explosions when hypering over Buf

[04:28] <Geth> ¦ rakudo:

[04:28] <Geth> ¦ rakudo: Buf.list returns a Seq, which explodes when we rake its guts

[04:28] <Geth> ¦ rakudo: for List stuff inside &nodemap.

[04:28] <Geth> ¦ rakudo:

[04:28] <Geth> ¦ rakudo: Fix by making it return a List. Part of addressing

[04:28] <Geth> ¦ rakudo: https://github.com/rakudo/rakudo/issues/1344

[04:28] <Geth> ¦ rakudo:

[04:28] <Geth> ¦ rakudo: Bug find: https://irclog.perlgeek.de/perl6/2018-01-07#i_15660359

[04:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7ba50d8647

[04:30] <Geth> ¦ roast: 798783b4f9 | (Zoffix Znet)++ | S32-container/buf.t

[04:30] <Geth> ¦ roast: Test no explosions when hypering Buf

[04:30] <Geth> ¦ roast:

[04:30] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/7ba50d8647

[04:30] <Geth> ¦ roast: Bug find: https://irclog.perlgeek.de/perl6/2018-01-07#i_15660359

[04:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/798783b4f9

[04:43] <Geth> ¦ nqp: 5afa8bc715 | (Zoffix Znet)++ | 6 files

[04:43] <Geth> ¦ nqp: Use faster nqp::istype instead of ~~

[04:43] <Geth> ¦ nqp:

[04:43] <Geth> ¦ nqp: Simple bench shows it 3x faster

[04:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5afa8bc715

[04:56] <travis-ci> NQP build passed. Zoffix Znet 'Use faster nqp::istype instead of ~~

[04:56] <travis-ci> https://travis-ci.org/perl6/nqp/builds/325959585 https://github.com/perl6/nqp/compare/e8dde7f0d00d...5afa8bc715b2

[05:00] <Zoffix> Does "!inlinable" mean inlinable? QAST::OperationsJAST.add_core_op('callstatic', :!inlinable, $call_codegen);

[05:00] <Zoffix> I see it's set on call and callstatic but not on, say callmethod or chain

[05:14] <Zoffix> nope, it sets inlineability to 0

[05:24] <travis-ci> Rakudo build failed. Zoffix Znet 'Fix explosions when hypering over Buf

[05:24] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325957223 https://github.com/rakudo/rakudo/compare/6a6470f9d752...7ba50d8647ac

[05:24] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, 2 unique test files failed.

[05:26] <Geth> ¦ nqp: 41b724c5dd | (Zoffix Znet)++ | 2 files

[05:26] <Geth> ¦ nqp: Remove trailing whitespace

[05:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/41b724c5dd

[05:26] <Geth> ¦ nqp: 4145205863 | (Zoffix Znet)++ | 3 files

[05:26] <Geth> ¦ nqp: Implement nqp::chainstatic op

[05:26] <Geth> ¦ nqp:

[05:26] <Geth> ¦ nqp: chainstatic to chain is what callstatic is to call

[05:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4145205863

[05:31] <travis-ci> NQP build failed. Zoffix Znet 'Implement nqp::chainstatic op

[05:31] <travis-ci> https://travis-ci.org/perl6/nqp/builds/325966893 https://github.com/perl6/nqp/compare/41b724c5dd97...4145205863b2

[05:35] <Zoffix> "Confused at line 457, near "my $chain_"" ... no idea what it's confused about...

[05:37] <Geth> ¦ nqp: 41e36ea844 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[05:37] <Geth> ¦ nqp: [MoarVM Bump] Brings 2 commits

[05:37] <Geth> ¦ nqp:

[05:37] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2017.12-20-g57103408...2017.12-22-gc2de234

[05:37] <Geth> ¦ nqp: c2de234 Merge pull request #776 from dogbert17/fix-typo

[05:37] <Geth> ¦ nqp: 47769a5 Fix typo

[05:37] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/41e36ea844

[05:37] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.12-20-g57103408...2017.12-22-gc2de234

[05:37] <Geth> ¦ rakudo: a3825a4a17 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[05:37] <Geth> ¦ rakudo: [NQP Bump] Brings 4 commits

[05:37] <Geth> ¦ rakudo:

[05:37] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2017.12-24-ge8dde7f0d...2017.12-28-g41e36ea

[05:37] <Geth> ¦ rakudo: 41e36ea [MoarVM Bump] Brings 2 commits

[05:37] <Geth> ¦ rakudo: 4145205 Implement nqp::chainstatic op

[05:37] <Geth> ¦ rakudo: 41b724c Remove trailing whitespace

[05:37] <Geth> ¦ rakudo: 5afa8bc Use faster nqp::istype instead of ~~

[05:37] <Geth> ¦ rakudo:

[05:37] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2017.12-20-g57103408...2017.12-22-gc2de234

[05:37] <Geth> ¦ rakudo: c2de234 Merge pull request #776 from dogbert17/fix-typo

[05:38] <Geth> ¦ rakudo: 47769a5 Fix typo

[05:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a3825a4a17

[05:38] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-24-ge8dde7f0d...2017.12-28-g41e36ea

[05:38] <Zoffix> .oO( need a command what shows what commits a bump would bring before bumping... )

[05:39] <travis-ci> NQP build failed. Zoffix Znet 'Remove trailing whitespace'

[05:39] <travis-ci> https://travis-ci.org/perl6/nqp/builds/325966794 https://github.com/perl6/nqp/compare/5afa8bc715b2...41b724c5dd97

[05:40] <Zoffix> .tell bartolin I added chainstatic on JVM https://github.com/perl6/nqp/commit/4145205863 Travis says it's confused about something but I dunno what it's problem is: https://travis-ci.org/perl6/nqp/jobs/325966896  FWIW I didn't build anything on JVM or JS

[05:40] <Zoffix> no bot; greatp

[05:40] <travis-ci> NQP build failed. Zoffix Znet '[MoarVM Bump] Brings 2 commits

[05:40] <travis-ci> https://travis-ci.org/perl6/nqp/builds/325968684 https://github.com/perl6/nqp/compare/4145205863b2...41e36ea8444d

[05:59] <travis-ci> Rakudo build failed. Zoffix Znet '[NQP Bump] Brings 4 commits

[05:59] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325968690 https://github.com/rakudo/rakudo/compare/7ba50d8647ac...a3825a4a17f7

[05:59] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, 2 unique test files failed.

[07:23] <Geth> ¦ rakudo: b77d87566f | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[07:23] <Geth> ¦ rakudo: Staticalize chain ops when we can

[07:23] <Geth> ¦ rakudo:

[07:23] <Geth> ¦ rakudo: - Makes 2.4x faster chains like 2 < $a < 1337

[07:23] <Geth> ¦ rakudo: - Makes 2 < $a < 1337 run about the same speed as 2 < $a && $a < 1337

[07:23] <Geth> ¦ rakudo:     Phixes https://github.com/rakudo/rakudo/issues/1368

[07:23] <Geth> ¦ rakudo: - With longer chains, the chain version comes out noticeably faster

[07:23] <Geth> ¦ rakudo:     than non-chained version with && ops

[07:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b77d87566f

[07:23] <Zoffix> Man, this was super easy.

[07:23] <Zoffix> Also...

[07:24] <Zoffix> Achievement Unlocked: Create an NQP op

[07:32] <Geth> ¦ rakudo: 6632879618 | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[07:32] <Geth> ¦ rakudo: Move comment closer to code it describes

[07:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6632879618

[07:44] <travis-ci> Rakudo build failed. Zoffix Znet 'Staticalize chain ops when we can

[07:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325984059 https://github.com/rakudo/rakudo/compare/a3825a4a17f7...b77d87566f30

[07:44] <buggable> [travis build above] ☠ All failures are due to: failed make test (3 failures). Across all jobs, 4 unique test files failed.

[07:46] <Geth> ¦ rakudo: 3172ef7f5b | (Zoffix Znet)++ | .travis.yml

[07:46] <Geth> ¦ rakudo: Add verbose `make test` run

[07:46] <Geth> ¦ rakudo:

[07:46] <Geth> ¦ rakudo: To try to get more info on travis's Linux sickness

[07:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3172ef7f5b

[07:57] <Geth> ¦ rakudo: 2bfc882422 | (Zoffix Znet)++ | .travis.yml

[07:57] <Geth> ¦ rakudo: Travis verbose make test tweak

[07:57] <Geth> ¦ rakudo:

[07:57] <Geth> ¦ rakudo: I guess it needs make install first, for ./perl6 to exist

[07:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2bfc882422

[08:10] <Geth> ¦ rakudo: a0634e5fe4 | (Zoffix Znet)++ | .travis.yml

[08:10] <Geth> ¦ rakudo: More travis attempt

[08:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a0634e5fe4

[08:12] <Geth> ¦ rakudo: 99923747ee | (Zoffix Znet)++ | src/core/Any.pm

[08:12] <Geth> ¦ rakudo: Make &dd more resilient to low-level stuff

[08:12] <Geth> ¦ rakudo:

[08:12] <Geth> ¦ rakudo: Stuff like

[08:12] <Geth> ¦ rakudo:    dd nqp::getattr(-> Int(Cool) $ {}.signature.params.head,

[08:12] <Geth> ¦ rakudo:         Parameter, q|$!coerce_method|)

[08:12] <Geth> ¦ rakudo: that crashes because there's no .dispatch:<.?> nor .perl

[08:12] <Geth> ¦ rakudo: methods on this object.

[08:12] <Geth> ¦ rakudo:

[08:12] <Geth> ¦ rakudo: Fix by wrapping those calls into `try` and marking such things

[08:12] <Geth> ¦ rakudo: with "low level" in output.

[08:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/99923747ee

[08:24] <Geth> ¦ rakudo: 880dbfaa13 | (Zoffix Znet)++ | .travis.yml

[08:24] <Geth> ¦ rakudo: One more tweak for travis verbose make test

[08:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/880dbfaa13

[08:25] <Zoffix> so make test fails, but verbose make test succeeds -_-

[08:27] <Geth> ¦ nqp: bff31bf777 | usev6++ | src/vm/jvm/QAST/Compiler.nqp

[08:27] <Geth> ¦ nqp: [jvm] Remove superfluous parenthesis

[08:27] <Geth> ¦ nqp:

[08:27] <Geth> ¦ nqp: Leftover from 4145205863; fixes NQP build.

[08:27] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/bff31bf777

[08:28] <Zoffix> bartolin++

[08:28] <Zoffix> Totally missed my eye

[08:28] <bartolin> also Zoffix++

[08:29] * bartolin will build a r-j with the new chainstatic op later today

[08:35] <travis-ci> Rakudo build errored. Zoffix Znet 'More travis attempt'

[08:35] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325988320 https://github.com/rakudo/rakudo/compare/2bfc88242264...a0634e5fe4b3

[08:35] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[08:41] <travis-ci> NQP build passed. usev6 '[jvm] Remove superfluous parenthesis

[08:41] <travis-ci> https://travis-ci.org/perl6/nqp/builds/325990363 https://github.com/perl6/nqp/compare/41e36ea8444d...bff31bf777f3

[08:50] <Zoffix> k, so travis now does two make tests; one normal and one verbose. And on linux, the non-verbose is still fails in random files, often with errno 9, but verbose always succeeds. Gonna ping Travis again on Monday to see if they know anything. There was some other dude on twitter also having different issues after the New Years drive issue

[09:00] <geekosaur> errno 9, or error 9 reported by make? the latter could be the Travis infrastructure SIGKILL-ing it

[09:02] <Zoffix> Just says "Non-zero wait status: 9" https://travis-ci.org/rakudo/rakudo/jobs/325988321#L1476

[09:07] <geekosaur> that's definitely SIGKILL

[09:07] <geekosaur> it ran out of memory and the OOM killer got it, or there's something wrong with Travis's containers

[09:08] <Zoffix> Ah cool. I'll mention that when I ping Travis

[09:08] <geekosaur> ("wrong" = misconfigured probably; really wrong would probably be illegal instructions or etc.)

[09:38] <travis-ci> Rakudo build errored. Zoffix Znet 'One more tweak for travis verbose make test'

[09:38] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/325990041 https://github.com/rakudo/rakudo/compare/99923747ee74...880dbfaa134b

[09:38] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[10:10] <Geth> ¦ rakudo/segv-coercer-qast: 8d34c4dfaa | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[10:10] <Geth> ¦ rakudo/segv-coercer-qast: Push segv commit

[10:10] <Geth> ¦ rakudo/segv-coercer-qast: review: https://github.com/rakudo/rakudo/commit/8d34c4dfaa

[10:37] <Geth> ¦ nqp: 2666a65cba | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/qast.markdown

[10:37] <Geth> ¦ nqp: Fix markdown error

[10:37] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2666a65cba

[10:54] <travis-ci> NQP build failed. Zoffix Znet 'Fix markdown error'

[10:54] <travis-ci> https://travis-ci.org/perl6/nqp/builds/326009408 https://github.com/perl6/nqp/compare/bff31bf777f3...2666a65cbacb

[10:54] <Zoffix> t/concurrency/03-semaphore.t ........... Failed 1/12 subtests

[10:54] <Zoffix> Seems to flop

[11:13] <pmurias> Zoffix: thanks for implementing chainstatic on js backend ;)

[11:14] <Zoffix> :0

[11:14] <Zoffix> *:)

[11:23] <Zoffix> I think I'm gonna put the alternative-coercer thing, where we try Target.new(Source) if Source.Target() fails, on backburner. using nqp::handle op to try .new keeps segfaulting, but even were it to work, nqp::handle, would make the operation 3x slower. And if you just let it explode, like we do with Source.Target() right now, you get these awful errors: $ ./perl6  -e 'class Foo {}; -> Foo() $x { $x.say

[11:24] <Zoffix> }("42")'

[11:24] <Zoffix> Default constructor for 'Foo' only takes named arguments

[11:27] <Geth> ¦ nqp/master: 9 commits pushed by pmurias++

[11:27] <Geth> ¦ nqp/master: b6be54546a | [js] Disable attribute hints till they are fixed to work with multi-inheritance

[11:27] <Geth> ¦ nqp/master: 8e2c995d87 | [js] Fix int16 and int8 attributes

[11:27] <Geth> ¦ nqp/master: 8f14906a5d | Test attributeref with an int8 attribute

[11:27] <Geth> ¦ nqp/master: 4ae8f4994a | [js] Make nqp::codes work with chars bigger than a UTF16 code unit

[11:27] <Geth> ¦ nqp/master: 1df9595eef | Test nqp::codes with a code point bigger than an UTF16 code unit

[11:27] <Geth> ¦ nqp/master: 13e1839e93 | [js] Make nqp::fc actually fold case rather than lowercase

[11:27] <Geth> ¦ nqp/master: aa093e8a2d | [js] Make split with a '' pattern NFG aware

[11:27] <Geth> ¦ nqp/master: 01d41ce61b | [js] Make nqp::flip NFG aware

[11:27] <Geth> ¦ nqp/master: 53ca7acc8c | [js] Add a bunch of NFG using op variants

[11:27] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/2666a65cba...53ca7acc8c

[11:40] <travis-ci> NQP build failed. pmurias '[js] Add a bunch of NFG using op variants'

[11:40] <travis-ci> https://travis-ci.org/perl6/nqp/builds/326017730 https://github.com/perl6/nqp/compare/2666a65cbacb...53ca7acc8ca1

[11:44] <Geth> ¦ nqp: 247c7a022d | pmurias++ | t/moar/02-qast-references.t

[11:44] <Geth> ¦ nqp: Fix test plan

[11:44] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/247c7a022d

[11:51] <Zoffix> And checking result type of coercion too, not gonna do right now. Just tried this: https://gist.github.com/zoffixznet/6d0a2085bd343535b99f548d15547729  and it made `-> Str(Foo) $x { }(Foo.new)` 8% slower. Just not worth it ATM, as it'd cover 0.0001% of usecases

[11:53] <Zoffix> 7am... time for bed

[11:59] <travis-ci> NQP build passed. pmurias 'Fix test plan'

[11:59] <travis-ci> https://travis-ci.org/perl6/nqp/builds/326021182 https://github.com/perl6/nqp/compare/53ca7acc8ca1...247c7a022d6b

[12:22] <pmurias> do we want to read unassigned windows-1251 characters as unicode control characters with that value?

[12:34] * pmurias doesn't know what's the correct way to handle technology as crappy as windows-1252

[12:34] <pmurias> s/windows-1251/windows-1252/

[12:40] <Geth> ¦ nqp: f6bccf79d8 | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java

[12:40] <Geth> ¦ nqp: [jvm] Look inside containers for parametric type

[12:40] <Geth> ¦ nqp:

[12:40] <Geth> ¦ nqp: Fixes some spectests (cmp. RT #132673).

[12:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f6bccf79d8

[12:40] <synopsebot> RT#132673 [new]: https://rt.perl.org/Ticket/Display.html?id=132673 [JVM] Container has no information about parametric type

[12:53] <Geth> ¦ roast: 0dc257e726 | usev6++ | S02-magicals/KERNEL.t

[12:53] <Geth> ¦ roast: [jvm] Adjust fudging for $*KERNEL.signal

[12:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0dc257e726

[13:06] <[Tux]> Rakudo version 2017.12-133-g880dbfaa1 - MoarVM version 2017.12-22-gc2de234c4

[13:06] <[Tux]> csv-test-xs-20      0.452 -  0.500

[13:06] <[Tux]> csv-ip5xs           1.115 -  1.143

[13:06] <[Tux]> test-t --race       1.224 -  1.249

[13:06] <[Tux]> test-t              2.855 -  2.920

[13:06] <[Tux]> test               11.673 - 11.693

[13:06] <[Tux]> csv-parser         12.870 - 13.750

[13:06] <[Tux]> csv-ip5xs-20       13.256 - 13.873

[13:06] <[Tux]> test-t-20 --race   17.670 - 18.762

[13:06] <[Tux]> test-t-20          52.690 - 53.676

[16:11] <lizmat> https://pythonclock.org  # intriguing concept

[16:18] <pmurias> it's interesting how long will v6.c be supported after v6.d is out

[16:32] <Geth> ¦ rakudo/js: 4accb64148 | pmurias++ | src/core/Str.pm

[16:32] <Geth> ¦ rakudo/js: Make lines work correctly with \r\n on backends that don't implement NFG

[16:32] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/4accb64148

[16:33] <pmurias> bartolin: 4accb64148ee49580cb15caa276909a20997491b - should also fix Str.lines on the JVM backend

[16:49] <pmurias> anyone here has any experience with windows-1252 and opinions how dealing with unassigned characters in it should work?

[16:52] <timotimo> probably should be able to configure a replacement character for the encoder?

[16:53] <timotimo> don't think we support that anywhere yet? perhaps?

[16:56] * pmurias checks

[16:57] <Geth> ¦ rakudo: b400707035 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm

[16:57] <Geth> ¦ rakudo: .head/.tail should take any Callable

[16:57] <Geth> ¦ rakudo:

[16:57] <Geth> ¦ rakudo: This was probably left over from an attempt to assign different semantics

[16:57] <Geth> ¦ rakudo: for WhateverCode in this place.

[16:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b400707035

[16:59] <pmurias> timotimo: we do, but moar just assigned control characters with the same value to the unassigned characters

[17:09] <pmurias> timotimo: so the real question are they something that is so unassigned that we should throw an exception when it's used or it's just something that can be used in an adhoc manner

[17:19] <timotimo> right, when encoding into such a limited format we don't have anything sensible

[17:20] <bartolin> pmurias++  # 4accb64148

[17:35] <Geth> ¦ rakudo/js: 2ce329cada | pmurias++ | 3 files

[17:35] <Geth> ¦ rakudo/js: [js] Use NFG using ops in a bunch of places

[17:35] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/2ce329cada

[17:36] <pmurias> m: say "\x[FFFFFF]"

[17:36] <camelia> rakudo-moar b40070703: OUTPUT: «Error encoding UTF-8 string: could not encode codepoint 16777215 (0xFFFFFF), codepoint out of bounds. Cannot encode higher than 1114111 (0x10FFFF)␤  in block <unit> at <tmp> line 1␤␤»

[17:37] <pmurias> m: my $foo = "\x[FFFFFF]";

[17:37] <camelia> rakudo-moar b40070703: ( no output )

[17:37] <pmurias> do we want to support \x[FFFFFF] in literals?

[17:41] <Geth> ¦ rakudo: dbea11ccde | (Elizabeth Mattijsen)++ | 2 files

[17:41] <Geth> ¦ rakudo: Simplify the ".skip should get a new iterator" issue

[17:41] <Geth> ¦ rakudo:

[17:41] <Geth> ¦ rakudo: A much better fix than 854c10c27e49041c87841 was.

[17:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dbea11ccde

[18:14] <travis-ci> Rakudo build errored. Elizabeth Mattijsen '.head/.tail should take any Callable

[18:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/326086708 https://github.com/rakudo/rakudo/compare/880dbfaa134b...b40070703551

[18:14] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, only t/02-rakudo/08-slangs.t test file failed.

[18:18] <Geth> ¦ rakudo: d034cb582a | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm

[18:18] <Geth> ¦ rakudo: Fix for GH #1349

[18:18] <Geth> ¦ rakudo:

[18:18] <Geth> ¦ rakudo: Also handle .skip(*)

[18:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d034cb582a

[18:18] <synopsebot> RAKUDO#1349 [open]: https://github.com/rakudo/rakudo/issues/1349 Skip using a WhateverCode doesn't work

[18:33] <pmurias> jnthn: is rakudo.moar allowing "\x[FFFFFF]" intended or a bug?

[18:35] <pmurias> it might be something we want to forbid in 6.d

[18:52] <timotimo> releasable6: status

[18:52] <releasable6> timotimo, Next release in 13 days and ≈0 hours. No blockers. Unknown changelog format

[19:08] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Simplify the ".skip should get a new iterator" issue

[19:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/326098237 https://github.com/rakudo/rakudo/compare/b40070703551...dbea11ccdef7

[19:08] <buggable> [travis build above] ☠ All failures are due to: failed make test (3 failures). Across all jobs, 3 unique test files failed.

[19:08] <dogbert17> m: say (1..5).map({$_}).skip(*-3)

[19:08] <camelia> rakudo-moar d034cb582: OUTPUT: «(3 4 5)␤»

[19:08] <dogbert17> .oO

[19:08] <dogbert17> lizmat++

[19:09] <lizmat> m: say 1..5 .skip(*-3)

[19:09] <camelia> rakudo-moar d034cb582: OUTPUT: «Seq objects are not valid endpoints for Ranges␤  in block <unit> at <tmp> line 1␤␤»

[19:09] <lizmat> m: say (1..5) .skip(*-3)

[19:09] <camelia> rakudo-moar d034cb582: OUTPUT: «(3 4 5)␤»

[19:09] <lizmat> no need for .map  :-)

[19:10] <dogbert17> yeah, it was just an example from the docs :-)

[19:10] <dogbert17> so you figured out a nice way to solve this it seems

[19:57] <pmurias> jvm-- # it only supports a single character error replacement while Perl 6 allows a multi character one :(

[20:00] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix for GH #1349

[20:00] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/326106684 https://github.com/rakudo/rakudo/compare/dbea11ccdef7...d034cb582a8d

[20:00] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, only t/04-nativecall/04-pointers.t test file failed.

[20:07] <Geth> ¦ rakudo: b4df753dfc | (Elizabeth Mattijsen)++ | 5 files

[20:07] <Geth> ¦ rakudo: Introducing EmptySeq constant

[20:07] <Geth> ¦ rakudo:

[20:07] <Geth> ¦ rakudo: - The Empty Sequence (we only need one of them)

[20:07] <Geth> ¦ rakudo: - use EmptySeq in setting where possible

[20:07] <Geth> ¦ rakudo:

[20:07] <Geth> ¦ rakudo: Empty sequences in Any-iterable-methods and Str where too soon in the setting.

[20:07] <Geth> ¦ rakudo: Please revert if having an EmptySeq constant is a bad idea.

[20:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b4df753dfc

[20:17] <Geth> ¦ nqp: 5b80052cf4 | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java

[20:17] <Geth> ¦ nqp: [jvm] Remove dead code

[20:17] <Geth> ¦ nqp:

[20:17] <Geth> ¦ nqp: All of those methods have been replaced with a version that

[20:17] <Geth> ¦ nqp: honors ThreadContext.

[20:17] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5b80052cf4

[20:27] <pmurias> bartolin: I'm working on implementing nqp::encoderep on the JVM (and JS)

[20:35] <bartolin> pmurias++ # sounds great (I had to lookup first, what that op does :-)

[20:36] * bartolin will be short of tuits for the next weeks, since he's moving house

[20:39] * lizmat wishes bartolin a lot of strength in the chaos that will develop

[20:40] <timotimo> bartolin: i feel you :S

[20:40] <timotimo> still haven't got a target for the move

[20:41] <bartolin> at least, my target is only a few hundred meters away. but still ... :-)

[20:42] <bartolin> thanks, lizmat

[20:57] <pmurias> bartolin: I hope the new house ends up awesome :)

[21:05] <jnthn> lizmat: Will EmptySeq not introduce a discontinuity on the "can only iterate it once" rule?

[21:05] <lizmat> no, because it has its own "iterator" method that doesn't check

[21:07] <jnthn> m: my \s = Seq.new; for s { }; for s { }

[21:07] <camelia> rakudo-moar b4df753df: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[21:08] <jnthn> m: my \s = ().Seq; for s { }; for s { }

[21:08] <camelia> rakudo-moar b4df753df: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[21:08] <jnthn> m: my \s = EmptySeq; for s { }; for s { }

[21:08] <camelia> rakudo-moar b4df753df: ( no output )

[21:08] <jnthn> That's what I mean

[21:08] <lizmat> ah, so the lack of error is what is the problem ?

[21:09] <lizmat> ok, I'll revert then

[21:10] <lizmat> jnthn: you seemed to expect that Seq.new() would give you an empty Seq

[21:10] <lizmat> shall I implement it like that then ?

[21:10] <lizmat> as a shortcut for Seq.new(Rakudo::Iterator.Empty)

[21:14] <jnthn> No, I don't really think it should give one, I'm just a bit too full of curry and beer to really think :)

[21:14] <jnthn> Well, only the one beer, so I think food coma is the main issue here ;)

[21:14] <jnthn> I'm not outright sure it should be reverted

[21:14] <jnthn> Just pointing out that it results in a Seq that behaves unlike others

[21:15] <jnthn> Which is at least worth pausing to think about a little

[21:15] <jnthn> (My main worry being, will this edge case ever cause somebody's tests to pass by not exploding, when they would not do so on some real data?)

[21:16] <lizmat> yeah, see your point

[21:16] <lizmat> I think your point is valid, so I will rework this to having Seq.new return an empty Seq

[21:17] * jnthn bbiab

[21:17] <lizmat> so we can at least get rid of a lot Seq.new(Rakudo::Iterator.Empty)

[21:17] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Introducing EmptySeq constant

[21:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/326132991 https://github.com/rakudo/rakudo/compare/d034cb582a8d...b4df753dfcd4

[21:17] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. Across all jobs, only t/04-nativecall/01-argless.t test file failed.

[21:48] <pmurias> bartolin: I have started to pass some NFG tests on the js backend by having separate (more expensive) NFG aware ops, I'll experiment with that approach more on the JS backend and if it works out well we might port it to the JVM one

[21:50] <bartolin> \o/

[21:56] <timotimo> hm, try compiling moar's string implementation and ops to js with emscripten for the time being? :D

[22:13] <pmurias> timotimo: making nqp ops NFG aware isn't that hard

[22:13] <pmurias> timotimo: doing it fast is

[22:13] <timotimo> right

[22:14] <timotimo> that's where asm.js comes into play :P

[22:22] <pmurias> asm.js/webasm aren't really built for freely mixing it up with normal js

[22:28] <pmurias> timotimo: nqp.js code performance is what will need to be addressed first (as that slows development and rakudo.js is written in NQP) so I'm super hestitant to slow that with NFG stuff

[23:07] <timotimo> right, that's fair
