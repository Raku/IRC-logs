[00:57] <Geth> ¦ rakudo/udp_receive_hostname_port: 3edec176c0 | (Timo Paulssen)++ | src/core/IO/Socket/Async.pm

[00:57] <Geth> ¦ rakudo/udp_receive_hostname_port: first draft of "datagram"-oriented API for udp sockets

[00:57] <Geth> ¦ rakudo/udp_receive_hostname_port:

[00:57] <Geth> ¦ rakudo/udp_receive_hostname_port: ask the .Supply to give you :datagrams and you'll

[00:57] <Geth> ¦ rakudo/udp_receive_hostname_port: receive instances of IO::Socket::Async::Datagram with

[00:57] <Geth> ¦ rakudo/udp_receive_hostname_port: .data being the string or buffer of data and

[00:57] <Geth> ¦ rakudo/udp_receive_hostname_port: .hostname and .port being the sender's address.

[00:57] <Geth> ¦ rakudo/udp_receive_hostname_port: review: https://github.com/rakudo/rakudo/commit/3edec176c0

[00:58] <timotimo> ^- i'd like feedback on this API. i'll likely rename the ":datagrams" parameter to ":datagram"

[00:58] <timotimo> (requires a moarvm branch of the same name)

[01:37] <Geth> ¦ rakudo/post-release: 0d7c4fe835 | (Zoffix Znet)++ | src/core/Hash.pm

[01:37] <Geth> ¦ rakudo/post-release: Ensure Hash.clone does not lose descriptor

[01:37] <Geth> ¦ rakudo/post-release: review: https://github.com/rakudo/rakudo/commit/0d7c4fe835

[01:49] <Geth> ¦ rakudo/post-release: 8c4c979e35 | (Zoffix Znet)++ | src/core/Rakudo/Internals.pm

[01:49] <Geth> ¦ rakudo/post-release: Fix `let`/`temp` on hashes losing Nils

[01:49] <Geth> ¦ rakudo/post-release:

[01:49] <Geth> ¦ rakudo/post-release: Partially phixes https://github.com/rakudo/rakudo/issues/1432

[01:49] <Geth> ¦ rakudo/post-release: review: https://github.com/rakudo/rakudo/commit/8c4c979e35

[01:49] <Geth> ¦ roast/post-release: 79c8fb7204 | (Zoffix Znet)++ | 2 files

[01:49] <Geth> ¦ roast/post-release: Test `let`/`temp` do not lose Nils

[01:49] <Geth> ¦ roast/post-release:

[01:49] <Geth> ¦ roast/post-release: https://github.com/rakudo/rakudo/issues/1432

[01:49] <Geth> ¦ roast/post-release: review: https://github.com/perl6/roast/commit/79c8fb7204

[02:22] <Geth> ¦ rakudo/post-release: 45560ac9ac | (Zoffix Znet)++ | src/core/Array.pm

[02:22] <Geth> ¦ rakudo/post-release: Fix Array.clone losing descriptor

[02:22] <Geth> ¦ rakudo/post-release:

[02:22] <Geth> ¦ rakudo/post-release: Rip out code from Array.from-iterator original code indirectly

[02:22] <Geth> ¦ rakudo/post-release: uses and make it use cloned descriptor when creating the clone.

[02:22] <Geth> ¦ rakudo/post-release:

[02:22] <Geth> ¦ rakudo/post-release: Phixes: https://github.com/rakudo/rakudo/issues/1435

[02:22] <Geth> ¦ rakudo/post-release: review: https://github.com/rakudo/rakudo/commit/45560ac9ac

[02:23] <Geth> ¦ roast/post-release: 29c95d23a2 | (Zoffix Znet)++ | S12-attributes/clone.t

[02:23] <Geth> ¦ roast/post-release: Remove trailing whitespace

[02:23] <Geth> ¦ roast/post-release: review: https://github.com/perl6/roast/commit/29c95d23a2

[02:24] <Geth> ¦ roast/post-release: 286570e3d9 | (Zoffix Znet)++ | S12-attributes/clone.t

[02:24] <Geth> ¦ roast/post-release: Test Hash/Array.clone do not lose descriptors

[02:24] <Geth> ¦ roast/post-release:

[02:24] <Geth> ¦ roast/post-release: Closes https://github.com/rakudo/rakudo/issues/1435

[02:24] <Geth> ¦ roast/post-release: Rakudo fixes: https://github.com/rakudo/rakudo/commit/0d7c4fe835

[02:24] <Geth> ¦ roast/post-release:               https://github.com/rakudo/rakudo/commit/45560ac9ac

[02:24] <Geth> ¦ roast/post-release: review: https://github.com/perl6/roast/commit/286570e3d9

[02:24] <Geth> ¦ roast/post-release: 311ef616b1 | (Zoffix Znet)++ | 2 files

[02:24] <Geth> ¦ roast/post-release: Unfudge now passing let/temp tests

[02:24] <Geth> ¦ roast/post-release:

[02:24] <Geth> ¦ roast/post-release: Closes https://github.com/rakudo/rakudo/issues/1432

[02:24] <Geth> ¦ roast/post-release: review: https://github.com/perl6/roast/commit/311ef616b1

[02:25] <Geth> ¦ nqp/post-release: 12 commits pushed by (Tom Browder)++, (Elizabeth Mattijsen)++, pmurias++, (Aleks-Daniel Jakimenko-Aleksejev)++, (Zoffix Znet)++

[02:25] <Geth> ¦ nqp/post-release: review: https://github.com/perl6/nqp/compare/7417743ce4...3ce69943cf

[02:25] <Geth> ¦ rakudo/post-release: 32 commits pushed by (Tom Browder)++, (Aleks-Daniel Jakimenko-Aleksejev)++, (Zoffix Znet)++, (Alex Chen)++, (Elizabeth Mattijsen)++

[02:25] <Geth> ¦ rakudo/post-release: review: https://github.com/rakudo/rakudo/compare/45560ac9ac...6f594ceac3

[02:26] <Geth> ¦ roast/post-release: 12 commits pushed by (Tom Browder)++, (Aleks-Daniel Jakimenko-Aleksejev)++, (Jan-Olof Hendig)++, (Zoffix Znet)++

[02:26] <Geth> ¦ roast/post-release: review: https://github.com/perl6/roast/compare/311ef616b1...b037ae173a

[02:32] * AlexDaniel drops to bed

[03:55] <Geth> ¦ nqp: 5167ad24dd | (Jeremy Studer)++ | 2 files

[03:55] <Geth> ¦ nqp: Don't die if parent doesn't have dump method

[03:55] <Geth> ¦ nqp:

[03:55] <Geth> ¦ nqp: The dump_extra_node_info method of the QAST::SpecialArg role would look

[03:55] <Geth> ¦ nqp: up the method of the same name on the immediate parent and invoke it,

[03:55] <Geth> ¦ nqp: dying if that method didn't exist and could not be invoked (on

[03:55] <Geth> ¦ nqp: QAST::Want, for instance). Modifying the behavior so that it checks

[03:56] <Geth> ¦ nqp: whether the there is an invokable method, and if not continue along the

[03:56] <Geth> ¦ nqp: parent chain until one is found or all are exhausted.

[03:56] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5167ad24dd

[04:11] <travis-ci> NQP build failed. Jeremy Studer 'Don't die if parent doesn't have dump method

[04:11] <travis-ci> https://travis-ci.org/perl6/nqp/builds/332129274 https://github.com/perl6/nqp/compare/9222147e47ea...5167ad24ddc8

[08:28] <nine> lizmat: your Perl 6 in production section motivated me to write a blog post :) http://niner.name/blog/production_on_perl_6/index.html

[08:42] <lizmat> nine++

[08:44] <nine> More production stories yet to come. I didn't want to cram everything into a single post

[08:44] <lizmat> cool!

[08:44] <lizmat> keep 'm coming!

[08:44] <lizmat> m: sub undef(\a) { }; undef my $x   # aaaw

[08:44] <camelia> rakudo-moar 0a1641e94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of undef as a value; in Perl 6 please use something more specific:␤      an undefined type object such as Any or Int,␤   :!defined as a matcher,␤        Any:U as a type constraint,␤    Nil as the…»

[08:45] <lizmat> shouldn't it look there is a undef sub ?

[09:06] <Geth> ¦ rakudo: ee901cf3fa | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/ops.markdown

[09:06] <Geth> ¦ rakudo: Fix typo

[09:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ee901cf3fa

[09:16] <lizmat> Files=1233, Tests=76085, 339 wallclock secs (15.19 usr  5.23 sys + 2306.31 cusr 237.87 csys = 2564.60 CPU)

[09:21] <Zoffix> What does nqp::p6capturelex do? I can surmise it's capturing the current lexical symbols, but I don't get what exactly the `p6capturelex(Block.clone)` thing does

[09:21] <Zoffix> m: https://gist.github.com/zoffixznet/beeafcd0f831e3e4d234382a894fc400

[09:21] <camelia> rakudo-moar ee901cf3f: OUTPUT: «4␤42␤1␤42␤»

[09:21] <Zoffix> ^ would've though that to be `4 100 1 42`, with how I imagine p6capturelex working

[09:21] <Zoffix> (and even then, I don't get what the clone is for)

[09:22] <lizmat> jnthn would know

[09:37] <Zoffix> void MVM_frame_capturelex /* Given the specified code object, sets its outer to the current scope. */     k, now I get why clone is needed, but don't get why .outer doesn't get changed in this code:

[09:37] <Zoffix> m: https://gist.github.com/zoffixznet/97f3f29e0e341082805700af21a1f40f

[09:37] <camelia> rakudo-moar ee901cf3f: OUTPUT: «->  { #`(Block|61940520) ... }␤->  { #`(Block|61940520) ... }␤42␤42␤»

[09:52] <El_Che> (just keeping an eye on the release)

[10:02] <Zoffix> m: use nqp; nqp::p6capturelexwhere

[10:02] <camelia> rakudo-moar ee901cf3f: OUTPUT: «===SORRY!===␤No registered operation handler for 'p6capturelexwhere'␤»

[10:02] <Zoffix> and yet there's a bunch of these in BOOTSTRAP; :/

[10:04] <jnthn> Zoffix: p6capturelex is meaningless if you don't call it in the immediate outer scope of the block in question

[10:04] <jnthn> (It'll silently do nothing at the moment, we might in the future make it blow up loudly)

[10:07] <jnthn> Also, I suspect p6capturelex will go away at some point, in favor of a getattr and using the MoarVM capturelex op

[10:07] <jnthn> (As part of the long-term plan to be rid of extops)

[10:08] <Zoffix> jnthn: I don't get what it's for then. Does it just set the outer when none are set yet?

[10:08] <Zoffix> And then what's the clone for then?

[10:08] <jnthn> It just sets the outer

[10:09] <jnthn> The two together result in a closure

[10:10] <jnthn> That's all a closure is: an instance of a Code (or some subclass of it) that refers to an outer scope ("outer frame" in MoarVM terms)

[10:11] <jnthn> In something like for ^5 -> $i { push @a, { $i } } we need to clone that inner block each loop iteration, so it closes over the correct $i, for example

[10:11] <Zoffix> m: 1 andthen <a b c>[$_.self xx 2].say

[10:11] <camelia> rakudo-moar ee901cf3f: OUTPUT: «Use of Nil in string context␤  in block  at <tmp> line 1␤Unable to call postcircumfix [ (Any) ] with a type object␤Indexing requires a defined object␤  in block <unit> at <tmp> line 1␤␤»

[10:11] <Zoffix> Was trying to debug this one.

[10:12] <Zoffix> m: $_ = 2; <a b c>[$_ xx 2].say

[10:12] <camelia> rakudo-moar ee901cf3f: OUTPUT: «(c c)␤»

[10:12] <Zoffix> m: $_ = 2; 1 andthen <a b c>[$_.self xx 2].say

[10:12] <camelia> rakudo-moar ee901cf3f: OUTPUT: «(c c)␤»

[10:13] <jnthn> Those sorts of things are often due to mis-nesting of blocks in the produced QAST

[10:14] <Zoffix> Ah. OK. I'll try to explode that path.

[10:16] <Zoffix> *explore

[10:18] <Zoffix> I think that is it, with what you said about "p6capturelex is meaningless if you don't call it in the immediate outer scope"; cause the QAST setup for the buggy version is more like my gist

[10:18] <Zoffix> jnthn++

[10:24] <Geth> ¦ rakudo: 8bd9fd3f82 | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/ops.markdown

[10:24] <Geth> ¦ rakudo: Document p6capturelex

[10:24] <Geth> ¦ rakudo:

[10:24] <Geth> ¦ rakudo: Per https://irclog.perlgeek.de/perl6-dev/2018-01-23#i_15725556

[10:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8bd9fd3f82

[10:25] <pmurias> I have a dilemma with regards to changing the return values of eqat* ops

[10:26] <pmurias> on one hand if they return 0 when the string doesn't match then they don't work for a "" needle correctly

[10:27] <pmurias> on the other if they return -1, nqp would need to be rebootstrapped as matching literals uses nqp::eqat

[11:26] <Geth> ¦ nqp: 735865df3e | (Tom Browder)++ (committed using GitHub Web editor) | src/HLL/World.nqp

[11:26] <Geth> ¦ nqp: fix spelling

[11:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/735865df3e

[11:33] <Geth> ¦ nqp: 1ea46092d1 | (Tom Browder)++ (committed using GitHub Web editor) | src/HLL/Grammar.nqp

[11:33] <Geth> ¦ nqp: align code

[11:33] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1ea46092d1

[11:42] <travis-ci> NQP build passed. Tom Browder 'fix spelling'

[11:42] <travis-ci> https://travis-ci.org/perl6/nqp/builds/332252928 https://github.com/perl6/nqp/compare/5167ad24ddc8...735865df3ecd

[11:50] <travis-ci> NQP build passed. Tom Browder 'align code'

[11:50] <travis-ci> https://travis-ci.org/perl6/nqp/builds/332254819 https://github.com/perl6/nqp/compare/735865df3ecd...1ea46092d11f

[11:50] <Geth> ¦ nqp: d8f194b28e | (Tom Browder)++ (committed using GitHub Web editor) | src/NQP/Grammar.nqp

[11:50] <Geth> ¦ nqp: align code

[11:50] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d8f194b28e

[11:54] <Geth> ¦ nqp: bbaa5a5eb9 | (Tom Browder)++ (committed using GitHub Web editor) | src/NQP/World.nqp

[11:54] <Geth> ¦ nqp: align code

[11:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/bbaa5a5eb9

[12:06] <travis-ci> NQP build failed. Tom Browder 'align code'

[12:06] <travis-ci> https://travis-ci.org/perl6/nqp/builds/332260871 https://github.com/perl6/nqp/compare/1ea46092d11f...d8f194b28ea6

[12:22] <Geth> ¦ nqp: 86e062e0fb | (Tom Browder)++ (committed using GitHub Web editor) | docs/using-pod-in-nqp.md

[12:22] <Geth> ¦ nqp: document pod use in nqp

[12:22] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/86e062e0fb

[12:24] <tbrowder> looks like tabs in the source...

[12:44] <pmurias> how do I rebootstrap NQP?

[13:05] <timotimo> "make m-bootstrap-files"

[13:05] <timotimo> pmurias: ^

[13:06] <Geth> ¦ rakudo: 7361fe2b6d | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[13:06] <Geth> ¦ rakudo: Fix "say (bag 'a').pick(1)"

[13:06] <Geth> ¦ rakudo:

[13:06] <Geth> ¦ rakudo: Not sure what was going on here, but the idea was that $!todo would not be

[13:06] <Geth> ¦ rakudo: a container, but always bound.  Fixed now by binding the original todo value

[13:06] <Geth> ¦ rakudo: as well.  This feels like magic, and may be indicative of a deeper problem.

[13:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7361fe2b6d

[14:04] <pmurias> hmm, if I want to change the way eqat_s works to make it match the way eqatim will work what's a sane way to do it?

[14:04] <timotimo> add a second op for the time being? :)

[14:10] <Geth> ¦ roast: lefth++ created pull request #379: Add a test for picking a Bag with an argument smaller than the Bag size.

[14:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/379

[14:12] <Geth> ¦ roast: d5c1b77096 | (Dan Zwell)++ (committed by Dan) | S02-types/bag.t

[14:12] <Geth> ¦ roast: Add a test for picking a Bag with an argument smaller than the Bag size.

[14:12] <Geth> ¦ roast:

[14:12] <Geth> ¦ roast: https://github.com/rakudo/rakudo/issues/1438

[14:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d5c1b77096

[14:12] <Geth> ¦ roast: 0047ed7eaf | (Zoffix Znet)++ (committed using GitHub Web editor) | S02-types/bag.t

[14:12] <Geth> ¦ roast: Merge pull request #379 from lefth/test-for-1438

[14:12] <Geth> ¦ roast:

[14:12] <Geth> ¦ roast: Add a test for picking a Bag with an argument smaller than the Bag size.

[14:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0047ed7eaf

[14:43] <lizmat> "obscure companies are using it for trivial tasks?"  I guess it's up from "not being used"  :-)

[14:53] <Geth> ¦ nqp: tbrowder++ created pull request #396: improve formatting

[14:53] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/396

[14:58] <jnthn> Well, >99% of companies in the world are "obscure" (if that means "you haven't heard of them"), and >99% of code that gets written is solving "trivial tasks" (if that means "solving everyday problems").

[15:07] <El_Che> jnthn: I appreciate you don't get discourage by negative comments

[15:08] <[Coke]> core devs I think are self-selected to be slightly immune.

[15:09] <El_Che> [Coke]: Well, most of them are still people

[15:09] <El_Che> (I have my doubts about a few) :)

[15:09] <lizmat> when I first started my own company, my then boss warned me that most companies go bankrupt within a year

[15:09] <[Coke]> Right, I'm just saying that if they're still here, they've already managed to get past some of that.

[15:10] <lizmat> guess which company *did* go bankrupt 1.5 years after I left

[15:10] <[Coke]> lizmat: for me, it was Enron. ;)

[15:10] <[Coke]> lizmat: and now I'm apparently working on GE.

[15:10] * [Coke] guesses it was your bosses' company. :)

[15:11] <lizmat> yup

[15:30] <lizmat> looks like the next indexing of modules.perl6.org will put it past 1000  :-)

[15:35] <timotimo> nice.

[15:36] <timotimo> you see all those pingbacks from random copy-paste blogs on the 'net, lizmat? some bots have picked up on that post getting lots of views from hackernews i guess

[15:42] <lizmat> timotimo: no, didn't look yet and will not for a few hours

[15:43] <timotimo> no worries, i'd consider it spam

[15:47] <lizmat> afk for a few hours&

[15:50] <Geth> ¦ nqp: e86e001435 | (Tom Browder)++ | docs/using-pod-in-nqp.md

[15:50] <Geth> ¦ nqp: improve formatting

[15:50] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e86e001435

[15:50] <Geth> ¦ nqp: 9a89c769cc | (Tom Browder)++ | docs/using-pod-in-nqp.md

[15:50] <Geth> ¦ nqp: clarify what 'word' is being discussed

[15:50] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9a89c769cc

[15:50] <Geth> ¦ nqp: 91e4a3e32b | (Tom Browder)++ (committed using GitHub Web editor) | docs/using-pod-in-nqp.md

[15:50] <Geth> ¦ nqp: Merge pull request #396 from tbrowder/master

[15:50] <Geth> ¦ nqp:

[15:50] <Geth> ¦ nqp: improve formatting

[15:50] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/91e4a3e32b

[16:14] <[Tux]> Rakudo version 2017.12-287-g7361fe2b6 - MoarVM version 2017.12.1-62-ga04d1099b

[16:14] <[Tux]> csv-test-xs-20      0.444 -  0.464

[16:14] <[Tux]> csv-ip5xs           1.141 -  1.156

[16:14] <[Tux]> test-t --race       1.163 -  1.172

[16:14] <[Tux]> test-t              2.840 -  2.978

[16:14] <[Tux]> test               11.250 - 11.879

[16:14] <[Tux]> csv-parser         12.098 - 12.105

[16:14] <[Tux]> csv-ip5xs-20       12.811 - 13.803

[16:14] <[Tux]> test-t-20 --race   17.387 - 17.729

[16:14] <[Tux]> test-t-20          49.810 - 51.634

[16:18] <[Coke]> win 10

[16:18] <buggable> [Coke], Thank you for entering Accidental /win Lottery! The next draw will happen in 1 week, 1 day, 7 hours, 41 minutes, and 20 seconds

[17:23] <jnthn> m: my $(42)

[17:23] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤The () shape syntax in variable declarations is reserved␤at <tmp>:1␤------> 3my $(427⏏5)␤    expecting any of:␤        constraint␤        formal parameter␤»

[17:42] <tbrowder> AlexDaniel: i plan to add a pod slang to nqp as a warm up and learning exercise for doing the same for p6.  if there is any more documentation on doing so than i have found around repos nqp and rakudo i would love to get links. i have looked at jnthn’s slide archives briefly, and i found his presentation in japan given in 2013, but i haven’t had a chance to watch but a few minutes so far. as a starter to the

[17:42] <tbrowder> nqp pod slang, i would like to add a new repo doc file called something like nqp/docs/adding-a-pod-slang.md and document the steps i take.  the new doc i added today is a precursor to that.  i won’t move farther along unless you think the idea is worthwhile.

[17:56] <AlexDaniel> tbrowder: me? But I'm not a specialist in that area at all

[17:56] <AlexDaniel> :)

[17:57] <AlexDaniel> have you had any luck getting supernova to run? For example, does it pass its tests?

[17:58] <Geth> ¦ nqp: tbrowder++ created pull request #397: convert tabs to 4 spaces, correct some obvious code misalignment

[17:58] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/397

[18:01] <tbrowder> supernova runs, but some tests fail (i added all the roast pod tests), i haven't looked into the failures deeply yet.

[18:02] <AlexDaniel> cool

[18:04] <tbrowder> you don't need to be a specialist, you're the current release manager and can try to delegate (or cajole or sweet-talk). i just want my plan to be approved OR shot down by core devs. if the plan is approved, i want my work visible for critique and helpful suggestions .

[18:06] <tbrowder> got to leave for a while...

[18:17] <AlexDaniel> tbrowder: well, at that point whatever gets you closer to the target should work

[18:17] <AlexDaniel> tbrowder: if experimenting with nqp can potentially help you then sure

[18:21] <AlexDaniel> tbrowder: the long-term plan is better pod support in the core, and that is definitely approved

[18:28] <samcv> after Travis finishes testing should be ready to merge my MVM PR that fixes White_Space and as a bonus fixes 'space'

[18:29] <samcv> plus also makes it so that you can use not just 'Foo_Bar' and 'FooBar' and 'foobar' but also 'foo_bar' now will also work for all of the property names

[18:30] <samcv> and then probably may fix one or two properties we may not have tests yet for or just make sure we don't have duplicate items in the properties c hash

[18:31] <samcv> /win totally an accident

[18:31] <samcv> /win 99

[18:31] <buggable> samcv, Thank you for entering Accidental /win Lottery! The next draw will happen in 1 week, 1 day, 5 hours, 28 minutes, and 45 seconds

[18:31] <samcv> /win 99 an accident

[18:31] <samcv> /win 99

[18:31] <buggable> samcv, Thank you for entering Accidental /win Lottery! The next draw will happen in 1 week, 1 day, 5 hours, 28 minutes, and 29 seconds

[18:31] <nine> samcv: cat on the keyboard?

[18:32] <El_Che> maybe the cat has good utf8 symbols shortcuts

[18:32] <samcv> no. trying to test the win lottery

[19:15] <AlexDaniel> huggable: star

[19:15] <huggable> AlexDaniel, Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[22:06] <lizmat> ok, so I'm working on getting scalar / wantarray working some on Perl 6: https://github.com/lizmat/P5wantarray/blob/master/lib/P5wantarray.pm6

[22:06] <lizmat> I cargo-culted some from DrForr's Roman slang

[22:07] <lizmat> and from Perl6/Grammar and Perl6/Actions

[22:07] <lizmat> the idea being that "scalar" would take a blorst

[22:07] <lizmat> and first set a dynamic variable before calling the blorst

[22:08] <lizmat> so that wantarray could return True/False on the value of that dynamic variable

[22:08] <lizmat> the thing is that it dies deeply at: https://github.com/lizmat/P5wantarray/blob/master/lib/P5wantarray.pm6#L29

[22:09] <lizmat> Cannot invoke this object (REPR: Null; VMNull)

[22:10] <lizmat> at gen/moar/stage2/QRegex.nqp:1301  (/Users/liz/Github/rakudo.moar/install/share/nqp/lib/QRegex.moarvm:check_LANG_oopsies)

[22:12] <lizmat> the actual role being mixed in is only a single token:

[22:12] <lizmat> token statement_prefix:sym<scalar> { <sym><.kok> <blorst> }

[22:14] <DrForr> Aroo?

[22:16] <lizmat> que?

[22:16] <DrForr> Heard my nick being taken in vain, but I must off to bed, unfortunately.

[22:17] <lizmat> good night, DrForr!

[22:17] <DrForr> Glad that module could help someone...

[22:57] <lizmat> good night, #perl6-dev!

[23:18] <El_Che> lizmat: isn't wantarray the reason got bad security press?

[23:20] <timotimo> El_Che: that and automagic flattening of arguments that can also become named arguments overwriting earlier named arguments
