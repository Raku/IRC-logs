[00:03] <Geth> ¦ rakudo: 264a1a27eb | (Zoffix Znet)++ | 2 files

[00:03] <Geth> ¦ rakudo: Fix `where` optimization for Junction args

[00:03] <Geth> ¦ rakudo:

[00:03] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1457

[00:03] <Geth> ¦ rakudo:

[00:03] <Geth> ¦ rakudo: Our optimization uses `istype` op, which doesn't thread, so with

[00:03] <Geth> ¦ rakudo: unthreaded params, instead of doing a smartmatch with a Junction,

[00:03] <Geth> ¦ rakudo: we end up doing istype on it and blowing up.

[00:03] <Geth> ¦ rakudo:

[00:03] <Geth> ¦ rakudo: Fix by annotating unthreaded params and using a slightly more

[00:03] <Geth> ¦ rakudo: elaborate optimization for them, where we check if the arg is a

[00:03] <Geth> ¦ rakudo: Junction and use the slower-path ACCEPTS call in those cases.

[00:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/264a1a27eb

[00:04] <Geth> ¦ rakudo: 264a1a27eb | (Zoffix Znet)++ | 2 files

[00:04] <Geth> ¦ rakudo: Fix `where` optimization for Junction args

[00:04] <Geth> ¦ rakudo:

[00:04] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1457

[00:04] <Geth> ¦ rakudo:

[00:04] <Geth> ¦ rakudo: Our optimization uses `istype` op, which doesn't thread, so with

[00:04] <Geth> ¦ rakudo: unthreaded params, instead of doing a smartmatch with a Junction,

[00:04] <Geth> ¦ rakudo: we end up doing istype on it and blowing up.

[00:04] <Geth> ¦ rakudo:

[00:05] <Geth> ¦ rakudo: Fix by annotating unthreaded params and using a slightly more

[00:05] <Geth> ¦ rakudo: elaborate optimization for them, where we check if the arg is a

[00:05] <Geth> ¦ rakudo: Junction and use the slower-path ACCEPTS call in those cases.

[00:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/264a1a27eb

[00:06] <TimToady> seems like a dup notificaation, mebbe we have two

[00:07] <TimToady> geths running?

[00:07] <Geth> ¦ rakudo: 264a1a27eb | (Zoffix Znet)++ | 2 files

[00:07] <Geth> ¦ rakudo: Fix `where` optimization for Junction args

[00:07] <Geth> ¦ rakudo:

[00:07] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1457

[00:07] <Geth> ¦ rakudo:

[00:07] <Geth> ¦ rakudo: Our optimization uses `istype` op, which doesn't thread, so with

[00:07] <Geth> ¦ rakudo: unthreaded params, instead of doing a smartmatch with a Junction,

[00:07] <Geth> ¦ rakudo: we end up doing istype on it and blowing up.

[00:07] <Geth> ¦ rakudo:

[00:07] <Geth> ¦ rakudo: Fix by annotating unthreaded params and using a slightly more

[00:07] <Geth> ¦ rakudo: elaborate optimization for them, where we check if the arg is a

[00:07] <Geth> ¦ rakudo: Junction and use the slower-path ACCEPTS call in those cases.

[00:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/264a1a27eb

[00:07] <TimToady> er...

[00:08] <Geth> ¦ rakudo: 264a1a27eb | (Zoffix Znet)++ | 2 files

[00:08] <Geth> ¦ rakudo: Fix `where` optimization for Junction args

[00:08] <Geth> ¦ rakudo:

[00:08] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1457

[00:08] <Geth> ¦ rakudo:

[00:08] <Geth> ¦ rakudo: Our optimization uses `istype` op, which doesn't thread, so with

[00:08] <Geth> ¦ rakudo: unthreaded params, instead of doing a smartmatch with a Junction,

[00:08] <Geth> ¦ rakudo: we end up doing istype on it and blowing up.

[00:08] <Geth> ¦ rakudo:

[00:08] <Geth> ¦ rakudo: Fix by annotating unthreaded params and using a slightly more

[00:08] <Geth> ¦ rakudo: elaborate optimization for them, where we check if the arg is a

[00:08] <Geth> ¦ rakudo: Junction and use the slower-path ACCEPTS call in those cases.

[00:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/264a1a27eb

[00:09] <TimToady> if 3 times is enemy action, what's 4 times?

[00:09] <Zoffix> .

[00:09] <Zoffix> Was geth printing stuff?

[00:09] <TimToady> 4 times

[00:09] <TimToady> same report

[00:09] <Zoffix> oops sorry. I was looking at the log and nothing was there. I then looked at web hook and it tells it "failed to deliver" due to timeout

[00:10] <Geth> ¦ roast: 8920e85840 | (Zoffix Znet)++ | S02-types/subset.t

[00:10] <Geth> ¦ roast: Cover `where` clauses with Junction args

[00:10] <Geth> ¦ roast:

[00:10] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1457

[00:10] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/264a1a27eb

[00:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8920e85840

[00:11] <TimToady> maybe we should make geth do the multi-colored confettit thing like other spammers so we can ignore it easily :)

[00:11] <Zoffix> :D

[00:12] <TimToady> *fetti

[00:37] <Geth> ¦ rakudo: 6266fd53b9 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Optimizer.nqp

[00:37] <Geth> ¦ rakudo: Fix typo in comment; MasterDuke++

[00:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6266fd53b9

[00:47] <Zoffix> m: use MONKEY; augment class Mu { method test { dd nqp::iscont(self) } };  (Proxy.new: :STORE{$^a, $^b}, :FETCH{Int;}).VAR.test

[00:47] <camelia> rakudo-moar 264a1a27e: OUTPUT: «1␤»

[00:47] <Zoffix> so there *are* cases when `self` is conted..

[00:54] <Zoffix> m: use MONKEY; augment class Mu { method meow(Mu:D) { }; method test(Mu:D) { self.meow } };  (Proxy.new: :STORE{$^a, $^b}, :FETCH{Int;}).VAR.test

[00:54] <camelia> rakudo-moar 6266fd53b: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in method test at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:55] <Zoffix> m: use MONKEY; augment class Mu { method meow(Mu:D:) { }; method test(Mu:D:) { self.meow } };  (Proxy.new: :STORE{$^a, $^b}, :FETCH{Int;}).VAR.test

[00:55] <camelia> rakudo-moar 6266fd53b: OUTPUT: «No such method 'meow' for invocant of type 'Int'. Did you mean any of these?␤    meow␤    new␤␤  in method test at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:55] <Zoffix> hehehe :) It's a :D and not :D :)

[00:55] <Zoffix> ZofBot: quantum :D

[00:55] <ZofBot> Zoffix, She was sitting bolt upright in a chair, staring into space

[01:17] <Geth> ¦ rakudo: 902f45f508 | (Zoffix Znet)++ | src/core/Mu.pm

[01:17] <Geth> ¦ rakudo: Fix crash in Proxy.perl

[01:17] <Geth> ¦ rakudo:

[01:17] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1466

[01:17] <Geth> ¦ rakudo:

[01:17] <Geth> ¦ rakudo: The crash occurs due to `self` of a Proxy-ed object being conted,

[01:17] <Geth> ¦ rakudo: but access to it fetches the value. So we end up entering .perl

[01:17] <Geth> ¦ rakudo: via Mu:D candidate (the Proxy object itself) and then calling

[01:17] <Geth> ¦ rakudo: <…commit message has 8 more lines…>

[01:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/902f45f508

[01:17] <Geth> ¦ roast: 625e80d31b | (Zoffix Znet)++ | S06-routine-modifiers/proxy.t

[01:17] <Geth> ¦ roast: Remove trailing whitespace

[01:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/625e80d31b

[01:19] <Geth> ¦ roast: 6796c19f61 | (Zoffix Znet)++ | S06-routine-modifiers/proxy.t

[01:19] <Geth> ¦ roast: Cover crashes in Proxy.perl

[01:19] <Geth> ¦ roast:

[01:19] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1466

[01:19] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/902f45f508

[01:19] <Geth> ¦ roast:

[01:19] <Geth> ¦ roast: Unsure whether it should give a "Proxy.new: …" value rather than

[01:19] <Geth> ¦ roast: the .perl of the fetched value, so speccing only that the construct

[01:19] <Geth> ¦ roast: doesn't explode.

[01:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6796c19f61

[01:46] <Geth> ¦ nqp: 34671bd59f | (Samantha McVey)++ | tools/build/MOAR_REVISION

[01:46] <Geth> ¦ nqp: Bump MoarVM to get support for windows-1251 (Cyrillic)

[01:46] <Geth> ¦ nqp:

[01:46] <Geth> ¦ nqp: Changes: 2018.01-53-g7fdc6aa..2018.01-55-g823cd43dd

[01:46] <Geth> ¦ nqp: 823cd43dd Add windows-1251 (Cyrillic) decode/encode. Fix bug in windows-1252

[01:46] <Geth> ¦ nqp: 6306b824a Add script to generate Windows-1251 and 1252 codetables

[01:46] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/34671bd59f

[01:46] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.01-53-g7fdc6aa...2018.01-55-g823cd43dd

[01:47] <Geth> ¦ rakudo: c73cb78fba | (Samantha McVey)++ | 2 files

[01:47] <Geth> ¦ rakudo: Add windows-1251 encoding to the list of possible encodings

[01:47] <Geth> ¦ rakudo:

[01:47] <Geth> ¦ rakudo: Also allow windows1251 and windows1252 (without the dash) to work as

[01:47] <Geth> ¦ rakudo: well.

[01:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c73cb78fba

[01:47] <Geth> ¦ rakudo: 4507a56541 | (Samantha McVey)++ | tools/build/NQP_REVISION

[01:47] <Geth> ¦ rakudo: Bump Moar/NQP to get support for windows-1251 (Cyrllic) encoding

[01:47] <Geth> ¦ rakudo:

[01:48] <Geth> ¦ rakudo: MoarVM Changes: 2018.01-53-g7fdc6aa..2018.01-55-g823cd43dd

[01:48] <Geth> ¦ rakudo: 823cd43dd Add windows-1251 (Cyrillic) decode/encode. Fix bug in windows-1252

[01:48] <Geth> ¦ rakudo: 6306b824a Add script to generate Windows-1251 and 1252 codetables

[01:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4507a56541

[01:48] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-31-g15eb895...2018.01-32-g34671bd59

[01:50] <samcv> yay. though there is a bug in windows-1251 and 1252 where it will pass through codepoints which don't exist in that codemap

[01:50] <samcv> but that was a bug before

[01:52] <samcv> m: Buf.new(0x81).decode('windows-1252') # 0x81 doesn't exist for example in this table

[01:52] <camelia> rakudo-moar 4507a5654: ( no output )

[01:52] <samcv> and perl 5 and other decoders will reject it

[02:30] <tbrowder> AlexDaniel: what about NQP PR #401? Any problems with it?

[04:34] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1467: Issue 1341: Elevate statevars to enclosing block when wrapped

[04:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1467

[04:35] <Geth> ¦ roast: jstuder-gh++ created pull request #383: Rakudo Issue 1341: Statevar not reset after do statement prefix

[04:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/383

[06:04] <Geth> ¦ nqp/sha1bin: 46a8d3c4cb | (Stefan Seifert)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[06:04] <Geth> ¦ nqp/sha1bin: Map new sha1bin op

[06:04] <Geth> ¦ nqp/sha1bin: review: https://github.com/perl6/nqp/commit/46a8d3c4cb

[06:06] <Geth> ¦ rakudo/sha1bin: 67a70cff44 | (Stefan Seifert)++ | 5 files

[06:06] <Geth> ¦ rakudo/sha1bin: Use new sha1bin op for added performance

[06:06] <Geth> ¦ rakudo/sha1bin: review: https://github.com/rakudo/rakudo/commit/67a70cff44

[06:17] <Kaiepi> n

[06:18] <Kaiepi> wrong window sorry

[08:41] <nine> Why....do we use the current time at object creation as $!desc of a VM object??

[09:32] <[Tux]> Rakudo version 2018.01-77-g4507a5654 - MoarVM version 2018.01-58-g8a3bcd9a4

[09:32] <[Tux]> csv-test-xs-20      0.442 -  0.451

[09:32] <[Tux]> csv-ip5xs           0.983 -  0.996

[09:32] <[Tux]> test-t --race       1.105 -  1.152

[09:32] <[Tux]> test-t              2.585 -  2.587

[09:32] <[Tux]> test                9.540 -  9.572

[09:32] <[Tux]> csv-ip5xs-20       10.658 - 10.732

[09:32] <[Tux]> csv-parser         12.208 - 12.294

[09:32] <[Tux]> test-t-20 --race   16.426 - 17.351

[09:33] <[Tux]> test-t-20          47.088 - 49.662

[09:37] <Geth> ¦ rakudo: 299e85264b | (Jeremy Studer)++ | src/Perl6/Actions.nqp

[09:37] <Geth> ¦ rakudo: Elevate statevars to enclosing block when wrapped

[09:37] <Geth> ¦ rakudo:

[09:37] <Geth> ¦ rakudo: Previously in blocks following the "do" statement prefix, statevars

[09:37] <Geth> ¦ rakudo: would be seemingly reset after each iteration of the loop.

[09:37] <Geth> ¦ rakudo:

[09:37] <Geth> ¦ rakudo: Given the statement:

[09:37] <Geth> ¦ rakudo:

[09:37] <Geth> ¦ rakudo: <…commit message has 32 more lines…>

[09:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/299e85264b

[09:37] <Geth> ¦ rakudo: 646266ae70 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[09:37] <Geth> ¦ rakudo: Merge pull request #1467 from jstuder-gh/state_deep_cloning

[09:37] <Geth> ¦ rakudo:

[09:37] <Geth> ¦ rakudo: Issue 1341: Elevate statevars to enclosing block when wrapped

[09:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/646266ae70

[09:37] <Geth> ¦ roast: 6788136aa4 | (Jeremy Studer)++ | S04-declarations/state.t

[09:37] <Geth> ¦ roast: Statevar not reset after do statement prefix

[09:37] <Geth> ¦ roast:

[09:37] <Geth> ¦ roast: Test that statevar values in blocks following "do" statement prefix is

[09:37] <Geth> ¦ roast: not reset on each iteration.

[09:37] <Geth> ¦ roast:

[09:37] <Geth> ¦ roast: See [Rakudo Issue 1341](https://github.com/rakudo/rakudo/issues/1341)

[09:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6788136aa4

[09:37] <Geth> ¦ roast: 1f7d29ff4f | (Zoffix Znet)++ (committed using GitHub Web editor) | S04-declarations/state.t

[09:37] <Geth> ¦ roast: Merge pull request #383 from jstuder-gh/state_deep_cloning

[09:37] <Geth> ¦ roast:

[09:37] <Geth> ¦ roast: Rakudo Issue 1341: Statevar not reset after do statement prefix

[09:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1f7d29ff4f

[10:08] <Geth> ¦ rakudo: 86e926c76d | (Stefan Seifert)++ | src/core/VM.pm

[10:08] <Geth> ¦ rakudo: Use a more descriptive desc for $*VM

[10:08] <Geth> ¦ rakudo:

[10:08] <Geth> ¦ rakudo: Using the current date and time is hardly descriptive and costs ~ 10ms

[10:08] <Geth> ¦ rakudo: when loading a native library (which needs $*VM).

[10:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/86e926c76d

[10:15] <travis-ci> Rakudo build failed. Zoffix Znet 'Merge pull request #1467 from jstuder-gh/state_deep_cloning

[10:15] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/336476414 https://github.com/rakudo/rakudo/compare/4507a5654108...646266ae70a6

[10:15] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[10:28] <Zoffix> weird. master of all threee repos build fine on my VM

[10:29] * Zoffix tries `z bump`

[10:37] <Zoffix> .ask samcv did you by chance miss pushing some commits? Travis says current Rakudo build fails to compile, yet master of all repos compiles just fine for me. I tried doing bumps, but there's a bunch of encoding-related failures in t/spec/S16-filehandles/io.t and a crash in t/spec/S32-str/encode.t with "Error encoding Windows-1252 string: could not encode codepoint 129"

[10:37] <yoleaux> Zoffix: I'll pass your message to samcv.

[10:38] <Zoffix> I guess I'll push the bumps, to see if that at least makes travis compile

[10:38] <Geth> ¦ nqp: 99493b06b3 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[10:38] <Geth> ¦ nqp: [MoarVM Bump] Brings 3 commits

[10:38] <Geth> ¦ nqp:

[10:38] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.01-55-g823cd43dd...2018.01-58-g8a3bcd9

[10:38] <Geth> ¦ nqp: 8a3bcd9 Throw on invalid windows-1251/1252 during encode and decode

[10:38] <Geth> ¦ nqp: b389521 Refactor so code is not duped between windows-1251 & 1252

[10:38] <Geth> ¦ nqp: 3bae45b Merge pull request #793 from samcv/windows-1251

[10:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/99493b06b3

[10:38] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.01-55-g823cd43dd... No newline at end of file

[10:38] <Geth> ¦ rakudo: e1a8b1d907 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[10:38] <Geth> ¦ rakudo: [NQP Bump] 99493b0 [MoarVM Bump] Brings 3 commits

[10:38] <Geth> ¦ rakudo:

[10:38] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.01-32-g34671bd59...2018.01-33-g99493b0

[10:38] <Geth> ¦ rakudo:

[10:38] <Geth> ¦ rakudo: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.01-55-g823cd43dd...2018.01-58-g8a3bcd9

[10:38] <Geth> ¦ rakudo: 8a3bcd9 Throw on invalid windows-1251/1252 during encode and decode

[10:38] <Geth> ¦ rakudo: b389521 Refactor so code is not duped between windows-1251 & 1252

[10:38] <Geth> ¦ rakudo: 3bae45b Merge pull request #793 from samcv/windows-1251

[10:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e1a8b1d907

[10:38] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-32-g34671bd59... No newline at end of file

[10:49] <Zoffix> nope, still fails to compile on travis :S

[10:49] <Zoffix> Weird. I guess other suspect would be https://github.com/rakudo/rakudo/commit/646266ae70a6b759637e5a9da6fcf8778840fb1d

[10:49] * Zoffix waits for samcv++'s reply before trying to revert that one

[10:49] <travis-ci> Rakudo build failed. Stefan Seifert 'Use a more descriptive desc for $*VM

[10:49] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/336486153 https://github.com/rakudo/rakudo/compare/646266ae70a6...86e926c76d6b

[10:50] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[10:54] <Geth> ¦ rakudo: Kaiepi++ created pull request #1468: Add more documentation on building MoarVM

[10:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1468

[10:55] <Geth> ¦ rakudo: 66f1690f52 | (Ben Davies)++ | 2 files

[10:55] <Geth> ¦ rakudo: Add more documentation on building MoarVM

[10:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/66f1690f52

[10:55] <Geth> ¦ rakudo: ddda743974 | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[10:55] <Geth> ¦ rakudo: Merge pull request #1468 from Kaiepi/docs

[10:55] <Geth> ¦ rakudo:

[10:55] <Geth> ¦ rakudo: Add more documentation on building MoarVM

[10:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ddda743974

[11:28] <travis-ci> Rakudo build failed. Zoffix Znet '[NQP Bump] 99493b0 [MoarVM Bump] Brings 3 commits

[11:28] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/336496077 https://github.com/rakudo/rakudo/compare/86e926c76d6b...e1a8b1d90758

[11:28] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[11:36] <Geth> ¦ rakudo: d80fc376d2 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[11:36] <Geth> ¦ rakudo: Fix whatever curry with regexes

[11:36] <Geth> ¦ rakudo:

[11:36] <Geth> ¦ rakudo: Fixes RT#131409: https://rt.perl.org/Ticket/Display.html?id=131409

[11:36] <Geth> ¦ rakudo:

[11:36] <Geth> ¦ rakudo: When we curry the QAST, we migrate blocks in chains, but we forget

[11:36] <Geth> ¦ rakudo: to migrate blocks created by constructs inside Regexes.

[11:36] <Geth> ¦ rakudo:

[11:36] <Geth> ¦ rakudo: Fix by adding a migrator to the branch that handles these ops.

[11:36] <synopsebot> RT#131409 [open]: https://rt.perl.org/Ticket/Display.html?id=131409 whatever auto closure fails with smartmatch with regex

[11:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d80fc376d2

[11:36] <Geth> ¦ roast: 323a2b6594 | (Zoffix Znet)++ | S02-types/whatever.t

[11:36] <Geth> ¦ roast: Test whatever regex curries

[11:36] <Geth> ¦ roast:

[11:36] <Geth> ¦ roast: RT#131409: https://rt.perl.org/Ticket/Display.html?id=131409

[11:36] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/d80fc376d2

[11:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/323a2b6594

[12:38] <travis-ci> Rakudo build failed. Zoffix Znet 'Fix whatever curry with regexes

[12:38] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/336515291 https://github.com/rakudo/rakudo/compare/ddda7439747a...d80fc376d201

[12:38] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[15:17] <tbrowder> hi, #perl-dev

[15:21] <tbrowder> did i see something here about nqp::elems being faster than +@array? ii that is a general rule i think there is a fair number of those in the master branch

[15:27] <tbrowder> at least 106 instances with a fast grep

[15:32] <moritz> in rakudo or in the nqp sources?

[15:37] <jnthn> I think the NQP optimizer rewrites many +@foo into nqp::elems(@foo) automatically

[16:02] <Geth> ¦ nqp/master: 9 commits pushed by pmurias++

[16:02] <Geth> ¦ nqp/master: 54b8395e09 | [js] Remove dead code

[16:02] <Geth> ¦ nqp/master: 63320aac8c | [js] Normalize when encoding as utf8-c8

[16:02] <Geth> ¦ nqp/master: 6ae22bd1b0 | [js] Work around for unicode data update

[16:02] <Geth> ¦ nqp/master: 72ece8b4c6 | [js] Make nqp::decodertakeallchars work with utf8-c8

[16:02] <Geth> ¦ nqp/master: c03bf374ab | [js] Turn some uses of the graphemeBreaker modules into use of our homebrew regexp

[16:02] <Geth> ¦ nqp/master: fe37f912e3 | [js] Make NFG aware of our custom utf8-c8 graphemes

[16:02] <Geth> ¦ nqp/master: a1f82ec320 | [js] When rejecting an incomplete UTF-8 sequence try to see if the byte

[16:02] <Geth> ¦ nqp/master: 273850777d | [js] Update dep

[16:02] <Geth> ¦ nqp/master: b348d45cf6 | [js] Check for known encoding in codecs

[16:02] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/99493b06b3...b348d45cf6

[16:21] <travis-ci> NQP build failed. pmurias '[js] Check for known encoding in codecs'

[16:21] <travis-ci> https://travis-ci.org/perl6/nqp/builds/336617768 https://github.com/perl6/nqp/compare/99493b06b3e2...b348d45cf6a3

[16:46] <tbrowder> moritz: 106 in nqp source in nqp repo

[17:14] <pmurias> 17:49 < tbrowder> moritz: 106 in nqp source in nqp repo

[17:14] <pmurias> sorry

[17:15] <pmurias> https://github.com/perl6/roast/commit/74ea399d8e runs $*EXECUTABLE with 'env -'

[17:15] <pmurias> which means that we run $*EXECUTABLE with an empty set of env variables

[17:16] <pmurias> that causes problems for ./perl6-js as it takes node from $PATH

[17:37] <Geth> ¦ roast: f9f5034a1e | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-exceptions/misc.t

[17:37] <Geth> ¦ roast: Tests for RT#125674 (todo-ed)

[17:37] <Geth> ¦ roast:

[17:37] <Geth> ¦ roast: There is a commit¹ with a message that claims that the issue is now

[17:37] <Geth> ¦ roast: resolved, but it does not seem to be the case.

[17:37] <Geth> ¦ roast:

[17:37] <Geth> ¦ roast: ¹ – https://github.com/rakudo/rakudo/commit/5747bc7121

[17:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f9f5034a1e

[17:37] <synopsebot> RT#125674 [new]: https://rt.perl.org/Ticket/Display.html?id=125674 [LTA] error message prints wrong eject position (if True if { };)

[19:08] <pmurias> jnthn: what are your thought about changing 'env -' into 'env' in roast? Is being able to run $*EXECUTABLE with an empty env something that we want to require/use in test?

[19:09] <pmurias> jnthn: Exact line: https://github.com/perl6/roast/commit/74ea399d8e#diff-acee0188756d5d5c3b53a9a5d93544e9R91

[19:10] <pmurias> jnthn: it seems like an accident (as the interface to env is misleading) but it's something that is in 6.c

[19:11] <geekosaur> you probably don't want the tests to be affected by random user environment config (TZ, LANG, LD_LIBRARY_PATH, etc.)

[19:11] <Geth> ¦ rakudo: 95f23a5634 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[19:11] <Geth> ¦ rakudo: Fix crashes with compile time evalution of `where` thunks

[19:11] <Geth> ¦ rakudo:

[19:11] <Geth> ¦ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1465

[19:11] <Geth> ¦ rakudo:

[19:11] <Geth> ¦ rakudo: When we compile_in_context, we rake the .ann('outer')s to find all

[19:11] <Geth> ¦ rakudo: the good bits. However, the `where` thunks don't get that annotation

[19:11] <Geth> ¦ rakudo: and so the raking stops prematurely. This causes the thunk that

[19:11] <Geth> ¦ rakudo: tries to access some core symbols (like Junction ops) executed

[19:11] <Geth> ¦ rakudo: during being time explode.

[19:11] <Geth> ¦ rakudo:

[19:11] <Geth> ¦ rakudo: Fix by adding annotating the thunk with the current pad.

[19:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/95f23a5634

[19:12] <Geth> ¦ roast: 79dff96fc9 | (Zoffix Znet)++ | S02-types/whatever.t

[19:12] <Geth> ¦ roast: Cover crashes in compile-time `where` thunk evaluation

[19:12] <Geth> ¦ roast:

[19:12] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1465

[19:12] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/95f23a5634

[19:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/79dff96fc9

[19:24] <pmurias> geekosaur: the user environment is passed in other cases it's just thrown away in this one

[19:30] <Geth> ¦ roast: 195227f779 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-io/pipe.t

[19:30] <Geth> ¦ roast: Test that large blobs can be piped

[19:30] <Geth> ¦ roast:

[19:30] <Geth> ¦ roast: Closes RT#129882. I am unable to reproduce the hang which is mentioned

[19:30] <Geth> ¦ roast: in the ticket, but this test *is* failing on all builds before 2017.06

[19:30] <Geth> ¦ roast: with “got: '219264'”.

[19:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/195227f779

[19:30] <synopsebot> RT#129882 [open]: https://rt.perl.org/Ticket/Display.html?id=129882 [TESTNEEDED] [CONC] [IO] Proc with `.in.close` and `.out.slurp-rest` in different threads, hangs

[19:34] <Geth> ¦ roast: 72f2c3984c | (Zoffix Znet)++ | MISC/bug-coverage-stress.t

[19:34] <Geth> ¦ roast: Cover serialization crashes with traits + roles

[19:34] <Geth> ¦ roast:

[19:34] <Geth> ¦ roast: RT#127959: https://rt.perl.org/Ticket/Display.html?id=127959

[19:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/72f2c3984c

[19:34] <synopsebot> RT#127959 [open]: https://rt.perl.org/Ticket/Display.html?id=127959 [BUG] Missing serialize REPR function for REPR SCRef | When using a class using a trait that modify metamodel

[19:44] <travis-ci> Rakudo build failed. Zoffix Znet 'Fix crashes with compile time evalution of `where` thunks

[19:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/336691463 https://github.com/rakudo/rakudo/compare/d80fc376d201...95f23a5634d7

[19:44] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[19:50] <Geth> ¦ roast: d266a4401a | (Zoffix Znet)++ | 2 files

[19:50] <Geth> ¦ roast: Cover spesh regression with giant enums in packages

[19:50] <Geth> ¦ roast:

[19:50] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1413

[19:50] <Geth> ¦ roast: MoarVM fix: https://github.com/MoarVM/MoarVM/commit/4733449165

[19:50] <Geth> ¦ roast: MoarVM followup issue: https://github.com/MoarVM/MoarVM/issues/782

[19:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d266a4401a

[19:57] <Geth> ¦ roast: 469ebbc75b | (Zoffix Znet)++ | S02-types/array-shapes.t

[19:57] <Geth> ¦ roast: Test Str can be used as indices of shaped arrays

[19:57] <Geth> ¦ roast:

[19:57] <Geth> ¦ roast: Tests https://github.com/rakudo/rakudo/issues/1297

[19:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/469ebbc75b

[19:58] <Geth> ¦ roast: 85f55e2b23 | (Zoffix Znet)++ | S02-types/array-shapes.t

[19:58] <Geth> ¦ roast: Add test description

[19:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/85f55e2b23

[20:01] <samcv> going to add some roast tests for windows-1251 and windows-1252 now (currently we have tests for neither)

[20:01] <yoleaux> 10:37Z <Zoffix> samcv: did you by chance miss pushing some commits? Travis says current Rakudo build fails to compile, yet master of all repos compiles just fine for me. I tried doing bumps, but there's a bunch of encoding-related failures in t/spec/S16-filehandles/io.t and a crash in t/spec/S32-str/encode.t with "Error encoding Windows-1252 string: could not encode codepoint 129"

[20:02] <samcv> ah the test is wrong then

[20:02] <samcv> since 129 doesn't exist in that encoding

[20:10] <samcv> not sure why we have a test to write unmapped characters to the filehandle that's been set as not having those chars

[20:13] <samcv> every other decoder of windows-1252 will not accept codepoint 129 and will fail to decode. so i think we should act the same

[20:14] <samcv> because previously we could create files which are unreadable by anyone

[20:16] <Geth> ¦ roast/coercers2.0: b77770dc4f | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[20:16] <Geth> ¦ roast/coercers2.0: Fudge anything not already passing

[20:16] <Geth> ¦ roast/coercers2.0: review: https://github.com/perl6/roast/commit/b77770dc4f

[20:16] <samcv> ah and looks like the jvm doesn't pass those tests either from looking at the fudging ZofBot

[20:23] <Geth> ¦ roast: ccc4edb8ed | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[20:23] <Geth> ¦ roast: Start coercer spec sketch

[20:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ccc4edb8ed

[20:23] <Geth> ¦ roast: b77770dc4f | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[20:23] <Geth> ¦ roast: Fudge anything not already passing

[20:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b77770dc4f

[20:23] <Geth> ¦ roast: ee09f13914 | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[20:23] <Geth> ¦ roast: Add sketch of more comprehensive spec of DefiniteHOW coercers

[20:23] <Geth> ¦ roast:

[20:23] <Geth> ¦ roast: This will likely need to be pruned before 6.d is finalized.

[20:23] <Geth> ¦ roast: In particular, the :U ↔ :D coercers look to be just mindless

[20:23] <Geth> ¦ roast: over-engineering with no proper usecase to cater to.

[20:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ee09f13914

[20:24] <Geth> ¦ roast: e2dc8f0c7f | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[20:24] <Geth> ¦ roast: Add Issue number annotation to test

[20:24] <Geth> ¦ roast:

[20:24] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1361

[20:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e2dc8f0c7f

[20:25] <pmurias> samcv: re windows-1252, aren't the tests for being able to read/write unmapped chars in 6.c?

[20:25] <samcv> they may be. but the tests are still wrong unless someone can tell me why we actually want to create unreadable files

[20:26] <pmurias> according to a google the unmapped chars are sometimes used by legacy apps

[20:26] <samcv> hm

[20:26] <pmurias> s/google search/

[20:27] <samcv> i can change it. but i'm building rakudo jvm and seeing how that acts

[20:27] <samcv> at least perl 5 and iconv both don't allow codepoint 129

[20:28] <samcv> with binmode :encoding(windows-1252) on perl5 or just setting the source as windows-1252 on iconv

[20:28] <pmurias> I haven't used windows-1252 myself in the past so I don't have intutions on how it was used in the past

[20:29] <pmurias> it's legacy crap so it's only uses nowdays is to interact with old stuff

[20:31] <samcv> looks like python also throws as an error too

[20:49] <timotimo> i believe python encoders can be configured to do something else

[20:51] <ilmari> m: "\c[128]".encode("windows-1252", :replacement)

[20:51] <camelia> rakudo-moar 95f23a563: ( no output )

[20:51] <ilmari> m: say "\c[128]".encode("windows-1252", :replacement)

[20:51] <camelia> rakudo-moar 95f23a563: OUTPUT: «Blob[uint8]:0x<3f>␤»

[20:52] <ilmari> m: say "\c[128]".encode("windows-1252", :replacement("x"))

[20:52] <camelia> rakudo-moar 95f23a563: OUTPUT: «Blob[uint8]:0x<78>␤»

[20:52] <ilmari> m: say "\c[128]".encode("windows-1252")

[20:52] <camelia> rakudo-moar 95f23a563: OUTPUT: «Error encoding Windows-1252 string: could not encode codepoint 128␤  in block <unit> at <tmp> line 1␤␤»

[21:19] <samcv> pmurias: so jvm throws trying to encode unmapped characters, but it doesn't throw on decode

[21:19] <samcv> do you know what node-js does?

[21:31] <samcv> TimToady: maybe you have some thoughts on this too?

[21:33] <TimToady> .oO(windows-1252-c8)

[21:34] <Geth> ¦ nqp: d32d84d4ba | (Samantha McVey)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java

[21:34] <Geth> ¦ nqp: [jvm] Add windows-1251 as an available encoding

[21:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d32d84d4ba

[21:34] <samcv> TimToady: hahah

[21:35] <samcv> personally, i'd think that we should stick to the standard for windows-1252, but we could add an option to have a less strict version that passes invalid codepoints through. it's easily doable from the moarvm side at least.

[21:36] <samcv> and then jvm rejects encoding invalid, but passes through unmapped codepoints to the respective unicode control characters further complicating things

[21:37] <samcv> i could do the same thing on moarvm, but the question of whether that is a good idea is unsure to me

[21:51] <travis-ci> NQP build passed. Samantha McVey '[jvm] Add windows-1251 as an available encoding'

[21:51] <travis-ci> https://travis-ci.org/perl6/nqp/builds/336739865 https://github.com/perl6/nqp/compare/b348d45cf6a3...d32d84d4ba73

[22:19] <pmurias> samcv: node.js decodes them as unicode replacement characters

[22:19] <pmurias> samcv: I had to write my own windows-1252

[22:19] <samcv> ah

[22:20] <samcv> so what is your opinion? should we just let the user decode/encode invalid files?

[22:20] <samcv> or not?

[22:21] * moritz would rather throw exceptions than silently produce wrong/incomplete answers

[22:23] <Geth> ¦ roast: a7590d6543 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-str/utf8-c8.t

[22:23] <Geth> ¦ roast: Test malformed utf8 filenames roundtripping properly

[22:23] <Geth> ¦ roast:

[22:23] <Geth> ¦ roast: Fixes RT#127671. Please feel free to object these tests (using similar

[22:23] <Geth> ¦ roast: concerns raised in the ticket). However, I still can't see how

[22:23] <Geth> ¦ roast: something in a subdirectory of /tmp can create a problem for any

[22:23] <Geth> ¦ roast: user. To me it sounds like nothing should ever touch or see these

[22:23] <Geth> ¦ roast: files anyway.

[22:23] <synopsebot> RT#127671 [open]: https://rt.perl.org/Ticket/Display.html?id=127671 [EXOTICTEST] ｢dir｣ dies if weird unicode sequences are encountered (dir;)

[22:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a7590d6543

[22:32] <Geth> ¦ roast: 800bc0a1d9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-str/utf8-c8.t

[22:32] <Geth> ¦ roast: Whoops. New bug?

[22:32] <Geth> ¦ roast:

[22:32] <Geth> ¦ roast: Previous commit¹ had a thinko and was attempting to treat a file

[22:32] <Geth> ¦ roast: created in the previous test as a directory. This is now fixed, but it

[22:32] <Geth> ¦ roast: seems like there's another “Malformed UTF-8” issue.

[22:32] <Geth> ¦ roast:

[22:32] <Geth> ¦ roast: ¹ – https://github.com/perl6/roast/commit/a7590d6543e1d29bc935377c727e4d15e38ee713

[22:32] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/800bc0a1d9

[23:04] <Geth> ¦ roast: 104173b332 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-str/utf8-c8.t

[23:04] <Geth> ¦ roast: Use make-temp-dir and make-temp-file

[23:04] <Geth> ¦ roast:

[23:04] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6/2018-02-02#i_15771428

[23:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/104173b332

[23:09] <japhb> samcv, moritz: Being able to recover and work with partially-corrupted files (whether corrupted by previous broken software, by hardware failure, by stray cosmic rays, or by adverse interplanetary weather conditions) is useful.  While strictness is definitely a fair default, there should always be an escape hatch for when your source data is broken and you still need to deal with it anyway.

[23:10] <samcv> japhb: yeah i agree with that

[23:10] <samcv> i think it should be compliant by default and an option to relax it. but having the default be 'anything goes' seems like bad form

[23:11] <japhb> I'm totally fine with compliant by default, relaxed by explicit option.

[23:11] <jnthn> I think we should be able to configure decoders with a replacement char if you want non-explosiveness

[23:12] <japhb> (self-clocking encodings)++  # For this very reason

[23:12] <samcv> jnthn: what if you just want to pass it through?

[23:12] <jnthn> I'm not sure what that'd mean

[23:12] <jnthn> Well, aside from utf8-c8 style stricks

[23:12] <samcv> well what it used to do before. 129.chr will map to 129

[23:12] <jnthn> Which I guess is not utf8 specific

[23:12] <samcv> for windows-1252

[23:12] <samcv> which is not in the charmap but we used to be able to write invalid windows-1252 files

[23:13] <jnthn> D'oh

[23:13] * jnthn wonders if anyone ever wrote one ;)

[23:13] <japhb> jnthn: Yeah, sometimes you want to map all corruption to a single replacement, and sometimes you want to say "reversibly map this to something that will return the same bytes when output again"

[23:13] <jnthn> Yeah, if we support that then it should use the synthetics mechanism utf8-c8 does

[23:13] <japhb> WFM

[23:14] <samcv> jnthn: it doesn't really need to though

[23:14] <jnthn> Because then it's just one special case in our internals

[23:14] <samcv> since 129 exists in unicode

[23:14] <jnthn> samcv: In that particular case, I guess so

[23:14] <japhb> It would be good if we can avoid having to remember too many different special handlings of different encodings.

[23:14] <samcv> i'm fine with changing it so we can either use 1. strict 2. replacement 3. loose (reversible as long as it can be encoded)

[23:15] <japhb> I kinda like the idea of using synthetics as a general solution

[23:15] <japhb> samcv: Yeah, agreed

[23:15] <samcv> though synthetics make sense if we can't map the input to unicode codepoints

[23:15] <jnthn> Yeah. The thing is, Str is a Unicode grapheme-level representation, so it doesn't have any natural notion of "bytes to just cope with"

[23:15] <samcv> but if it can map as an identical codepoint then i don't see an issue with that

[23:16] <jnthn> Beyond the synthetics one we build

[23:17] <samcv> for Shift-JIS synthetics may make sense but for one byte encodings we don't need to use synthetics in this case

[23:18] <japhb> Do either of you have Uni I/O on your 2018 mental roadmap?

[23:20] <samcv> now the other question is do we default to loose currently, and then go to strict by default with 6.d? or do we just go with strict now

[23:23] <jnthn> samcv: I think except that encoding, we've been strict so far in general?

[23:23] <samcv> jnthn: yes

[23:23] <samcv> though we have tests which test that unmappable characters can be decoded and encoded as windows-1252!

[23:24] <jnthn> wat?!

[23:24] <jnthn> grr

[23:24] <samcv> yes

[23:24] <samcv> jnthn: also jvm can read unmapped characters but will not encode them

[23:24] <samcv> at least how we have it currently done on rakudo-j

[23:25] <jnthn> If we do make it strict by default, then we should have implemented the way to ask for loose

[23:26] <samcv> ok

[23:26] <jnthn> So in the (probably unlikely, but still) event we break something, we can say "just add <option>"

[23:27] <jnthn> (Or use it to have a different default, but that might be too much of an abundance of caution)

[23:29] <samcv> jnthn: does gcc/clang detect that when we throw an exception, then code below it is unrecahable and optimized out?

[23:30] <jnthn> Hmm...I think they may be marked with the "does not return" attribute, in which case it could use that

[23:31] <jnthn> Whether it actually does, I'm not sure

[23:32] <jnthn> japhb: Uni I/O - it's not particularly high on mine at the moment. Better support for working with binary data certainly is, however, and maybe some of the Uni I/O bits I could sneak in while doing that. But that still doesn't answer the hard questions, which are "what happens once I have a Uni"

[23:33] <jnthn> (Besides "turn it into a Str")

[23:33] <jnthn> But there's a load of open, and tricky, questions there

[23:33] <jnthn> Not to mention "what happens if I match a Uni against a Regex"

[23:35] <japhb> For me the big value of Uni I/O was "never block on looking for combiners"

[23:35] <jnthn> Ah

[23:35] <japhb> Frankly the option to do that one thing is enough for my particular use cases.

[23:35] <jnthn> And then you're happy to immediately .Str it

[23:36] <japhb> Yup.

[23:36] <jnthn> OK, that's more realistic to expect this year

[23:39] <jnthn> (I'd not quite realized the value that the I/O part alone could have.)

[23:39] <jnthn> (So had it down as "not worth it until we've time to do the harder problem")

[23:44] <japhb> Right, makes sense.

[23:50] <samcv> i'm setting it up for now to have a #define to control wether it's strict or not

[23:50] <samcv> just a constant, so we can just swap that out with a variable to control it instead easily

[23:51] <jnthn> Alright

[23:51] <jnthn> samcv++

[23:54] <samcv> jnthn: am i allowed to change the signature of the decode/encode op to add an option or do i have to make new ops

[23:59] <Geth> ¦ nqp: a860fd3109 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[23:59] <Geth> ¦ nqp: Bump MoarVM to revert throwing on windows-1252/1 decode errors

[23:59] <Geth> ¦ nqp:

[23:59] <Geth> ¦ nqp: Changes: 2018.01-58-g8a3bcd9..2018.01-59-g6da2afe5a

[23:59] <Geth> ¦ nqp: 6da2afe5a Default to not throw on windows-1251/2 decode/encode errors

[23:59] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a860fd3109

[23:59] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.01-58-g8a3bcd9...2018.01-59-g6da2afe5a
