[00:26] <[Coke]> AlexDaniel++ thanks. in the middle of a different docuthing at the moment, but will circle back to that when I can

[00:52] <Geth> ¦ 6.d-prep: ce20847d94 | (Samantha McVey)++ | 2 files

[00:52] <Geth> ¦ 6.d-prep: Update status of Ornate Parenthesis Removal

[00:52] <Geth> ¦ 6.d-prep:

[00:52] <Geth> ¦ 6.d-prep: This has been resolved now.

[00:52] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/ce20847d94

[00:52] <Geth> ¦ 6.d-prep: 3a8c4587fe | (Samantha McVey)++ | TODO/FEATURES.md

[00:52] <Geth> ¦ 6.d-prep: Add proposal for strict encode/decode of one byte encodings

[00:52] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/3a8c4587fe

[01:36] <tbrowder> .tell AlexDaniel see  my updated comment in nqp PR #401. i need expert help to get the nqp::spawnprocasync code in it working.  if that can work, then we can have a good test.

[01:36] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[02:28] <Geth> ¦ rakudo: b3689e63e0 | (Zoffix Znet)++ | t/08-performance/02-qast-rewrites.t

[02:28] <Geth> ¦ rakudo: Cover a couple of `for ...` opts

[02:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b3689e63e0

[02:33] <Geth> ¦ rakudo: 59556c70b4 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[02:33] <Geth> ¦ rakudo: Addititonal fixes to slurpies on `if`

[02:33] <Geth> ¦ rakudo:

[02:33] <Geth> ¦ rakudo: For RT#105872: https://rt.perl.org/Ticket/Display.html?id=105872

[02:33] <Geth> ¦ rakudo:

[02:33] <Geth> ¦ rakudo: In the original fix[^1] we bail out of $count counting if we

[02:33] <Geth> ¦ rakudo: encounter a named arg or named slurpy. However, these seem to

[02:33] <Geth> ¦ rakudo: be allowed before named slurpies, so the `if 42 -> *%, *@a {}`

[02:33] <synopsebot> RT#105872 [resolved]: https://rt.perl.org/Ticket/Display.html?id=105872 [BUG] 42, 44, 22 -> *@a { say @a.perl }

[02:33] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[02:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/59556c70b4

[02:34] <Geth> ¦ roast: 9084d7be1a | (Zoffix Znet)++ | S04-statements/if.t

[02:34] <Geth> ¦ roast: Cover more cases of `if` slurpies

[02:34] <Geth> ¦ roast:

[02:34] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/59556c70b4

[02:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9084d7be1a

[03:07] <Geth> ¦ rakudo: c6b1880b4c | (Zoffix Znet)++ | 8 files

[03:07] <Geth> ¦ rakudo: Use saner filenames for Unicode tests

[03:07] <Geth> ¦ rakudo:

[03:07] <Geth> ¦ rakudo: Closes https://github.com/rakudo/rakudo/issues/1511

[03:07] <Geth> ¦ rakudo:

[03:07] <Geth> ¦ rakudo: Although, previous commit[^1] remove OS-restricted characters,

[03:07] <Geth> ¦ rakudo: the `;` is still a special shell char and makes quoting required

[03:07] <Geth> ¦ rakudo: for these filenames, which I see no reason to require.

[03:07] <Geth> ¦ rakudo:

[03:07] <Geth> ¦ rakudo: [1] https://github.com/rakudo/rakudo/commit/801b1fa8f213fb38a3a7adec6

[03:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c6b1880b4c

[03:12] <Zoffix> dogbert17: is the `m: say "ab" ~~ /^ a ?% (b) $/` thing from some ticket?

[03:12] <Zoffix> I'm assuming it should throw about `?` quantifier being useless on `%`

[03:14] <Zoffix> RT#125618

[03:14] <synopsebot> RT#125618 [new]: https://rt.perl.org/Ticket/Display.html?id=125618 [REGEX] Positional capture of separator on ?% operator causes compiler error

[03:18] <Geth> ¦ nqp: a3f4410709 | (Tom Browder)++ | src/NQP/Grammar.nqp

[03:18] <Geth> ¦ nqp: improve pod panic msg

[03:18] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a3f4410709

[03:18] <Geth> ¦ nqp: 0292b5a0d5 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | src/NQP/Grammar.nqp

[03:18] <Geth> ¦ nqp: Merge pull request #401 from tbrowder/mod-pod-panic-msg

[03:18] <Geth> ¦ nqp:

[03:18] <Geth> ¦ nqp: improve pod panic msg

[03:18] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0292b5a0d5

[03:23] <Zoffix> .ask moritz Currently this crashes `m: say "ab" ~~ /^ a ?% (b) $/`. I was thinking instead of trying to fix it, we should just throw some "Useless use of ? with %" if the `%` thing is used with `??` or `? quantifiers. Does that make sense?

[03:23] <yoleaux> Zoffix: I'll pass your message to moritz.

[03:31] <Zoffix> .tell tbrowder just use the asyncspawn I showed you the other week. You can stick it as a sub here and use it in tests: https://github.com/perl6/nqp/blob/master/src/core/testing.nqp

[03:31] <yoleaux> Zoffix: I'll pass your message to tbrowder.

[04:09] <Zoffix> gosh why is our sprintf code so complex

[04:17] <Zoffix> And looks like the impl is all over the shop. A `"%d"` can take any numeric but `"%f"` can't take an Int

[04:20] <Zoffix> m: dd sprintf "%d", 2i+0

[04:20] <camelia> rakudo-moar c6b1880b4: OUTPUT: «Directive d not applicable for type Complex␤␤»

[04:20] <Zoffix> Surely it *is* applicable:

[04:20] <Zoffix> m: dd sprintf "%d", <0+2i>

[04:20] <camelia> rakudo-moar c6b1880b4: OUTPUT: «Directive d not applicable for type Complex␤␤»

[04:20] <Zoffix> m: dd sprintf "%d", <2+0i>

[04:20] <camelia> rakudo-moar c6b1880b4: OUTPUT: «"2"␤»

[04:22] <Zoffix> m: dd sprintf "%s", class {}.new

[04:22] <camelia> rakudo-moar c6b1880b4: OUTPUT: «"<anon|65689024><66496368>"␤»

[06:39] <Geth> ¦ roast: c37c7010c8 | (Zoffix Znet)++ | S32-exceptions/misc.t

[06:39] <Geth> ¦ roast: Fix overly-specific tests

[06:39] <Geth> ¦ roast:

[06:39] <Geth> ¦ roast: They're not part of 6.c.

[06:39] <Geth> ¦ roast:

[06:39] <Geth> ¦ roast: It's probably overly specific to spec that exceptions must have

[06:39] <Geth> ¦ roast: a precise number of bracktrace frames up in 'em.

[06:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c37c7010c8

[06:40] <Geth> ¦ nqp: 51bc089f03 | (Zoffix Znet)++ | src/HLL/sprintf.nqp

[06:40] <Geth> ¦ nqp: Remove unused variable

[06:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/51bc089f03

[06:42] <Geth> ¦ nqp: 2c51764e93 | (Zoffix Znet)++ | src/HLL/sprintf.nqp

[06:42] <Geth> ¦ nqp: Fix sprintf with type objects

[06:42] <Geth> ¦ nqp:

[06:42] <Geth> ¦ nqp: Fixes RT#132846: https://rt.perl.org/Ticket/Display.html?id=132846

[06:42] <Geth> ¦ nqp:

[06:42] <Geth> ¦ nqp: - For %c, use the same intify() routine we use for other ints

[06:42] <Geth> ¦ nqp: - For floats, add a floatify routine which will go to

[06:42] <Geth> ¦ nqp:     SprintfHandler and ask it to handle floats. It will leave

[06:42] <synopsebot> RT#132846 [new]: https://rt.perl.org/Ticket/Display.html?id=132846 [Bug] Directive d not applicable for type Int

[06:42] <Geth> ¦ nqp:     Numeric:Ds as is, but everything else, it'll try to .Numeric

[06:42] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2c51764e93

[06:43] <Geth> ¦ rakudo: d419afe462 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[06:43] <Geth> ¦ rakudo: [NQP Bump] Brings 4 commits

[06:43] <Geth> ¦ rakudo:

[06:43] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.01-56-g8e7201e...2018.01-60-g2c51764

[06:43] <Geth> ¦ rakudo: 2c51764 Fix sprintf with type objects

[06:43] <Geth> ¦ rakudo: 51bc089 Remove unused variable

[06:43] <Geth> ¦ rakudo: 0292b5a Merge pull request #401 from tbrowder/mod-pod-panic-msg

[06:43] <Geth> ¦ rakudo: a3f4410 improve pod panic msg

[06:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d419afe462

[06:43] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.01-56-g8e7201e...2018.01-60-g2c51764

[06:45] <Geth> ¦ rakudo: 4ac67e7384 | (Zoffix Znet)++ | src/core/Rakudo/Internals.pm

[06:45] <Geth> ¦ rakudo: Improve SprintfHandler

[06:45] <Geth> ¦ rakudo:

[06:45] <Geth> ¦ rakudo: Fixes RT#132846: https://rt.perl.org/Ticket/Display.html?id=132846

[06:45] <Geth> ¦ rakudo:

[06:45] <Geth> ¦ rakudo: - Make :Us go through .Numeric first, since that's the method that

[06:45] <Geth> ¦ rakudo:     does the whole "undef is 0" thing, whereas .Int just coercers

[06:45] <Geth> ¦ rakudo:     to Int and it leaves our Int:U as Int:U

[06:45] <Geth> ¦ rakudo: - Implement float handler: return Numeric:D as-is, for the rest,

[06:45] <Geth> ¦ rakudo:     return result of .Numeric

[06:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4ac67e7384

[06:47] <Geth> ¦ rakudo: 684b99eaa8 | (Zoffix Znet)++ | src/core/Rakudo/Internals.pm

[06:47] <Geth> ¦ rakudo: Fix potential issue in Sprintf exception handler

[06:47] <Geth> ¦ rakudo:

[06:47] <Geth> ¦ rakudo: First, in the code we expect to throw the return value of

[06:47] <Geth> ¦ rakudo: R::I.HANDLE-NQP-SPRINTF-ERRORS, but it already throws. Second,

[06:47] <Geth> ¦ rakudo: if the payload doesn't mention any of the keys, we'll end up

[06:47] <Geth> ¦ rakudo: returning an `Empty` and trying to call `.throw` on it.

[06:47] <Geth> ¦ rakudo:

[06:47] <Geth> ¦ rakudo: Fix by having R::I.HNSE return an Exception object: either the

[06:47] <Geth> ¦ rakudo: updated sprintf exception or the original one, and then we'll throw

[06:48] <Geth> ¦ rakudo: it at the point of call.

[06:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/684b99eaa8

[07:15] <Geth> ¦ roast: 81f0a53452 | (Zoffix Znet)++ | S32-exceptions/misc.t

[07:15] <Geth> ¦ roast: Revert "Fix overly-specific tests"

[07:15] <Geth> ¦ roast:

[07:15] <Geth> ¦ roast: This reverts commit c37c7010c8651322baaecfdd93997c6e5ddf6829.

[07:15] <Geth> ¦ roast: Or maybe they're fine...

[07:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/81f0a53452

[07:20] <travis-ci> Rakudo build failed. Zoffix Znet '[NQP Bump] Brings 4 commits

[07:20] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/340056411 https://github.com/rakudo/rakudo/compare/c6b1880b4cfe...d419afe46206

[07:20] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[07:20] <Geth> ¦ rakudo: 13406517ad | (Zoffix Znet)++ | 2 files

[07:20] <Geth> ¦ rakudo: Fix regression in backtrace raker

[07:20] <Geth> ¦ rakudo:

[07:20] <Geth> ¦ rakudo: Fixes RT#132846: https://rt.perl.org/Ticket/Display.html?id=132846

[07:20] <Geth> ¦ rakudo:

[07:20] <Geth> ¦ rakudo: When we encounter NQP guts in backtraces, we switch into trying to

[07:20] <Geth> ¦ rakudo: see whether we got any more HLL frames afterwards (from things

[07:20] <Geth> ¦ rakudo: like `sprintf` errors). Currently, we look for `.setting` annotation

[07:21] <Geth> ¦ rakudo: file ending, but awhile back we switched these to start with

[07:21] <synopsebot> RT#132846 [new]: https://rt.perl.org/Ticket/Display.html?id=132846 [Bug] Directive d not applicable for type Int

[07:21] <Geth> ¦ rakudo: `SETTING::` instead. Fix by looking for that instead.

[07:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/13406517ad

[07:23] <Geth> ¦ roast: ceed491adb | (Zoffix Znet)++ | S32-str/sprintf.t

[07:23] <Geth> ¦ roast: Test sprintf handling of Str/Numeric type objects

[07:23] <Geth> ¦ roast:

[07:23] <Geth> ¦ roast: RT#132846:  https://rt.perl.org/Ticket/Display.html?id=132846

[07:23] <Geth> ¦ roast: Rakudo fix: https://github.com/perl6/nqp/commit/2c51764e93

[07:23] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/d419afe462

[07:23] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/4ac67e7384

[07:23] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/684b99eaa8

[07:23] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/13406517ad

[07:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ceed491adb

[08:06] <moritz> ZofBot: +1 on outlawing the ? regex quantifier in combination with % for a delimiter

[08:06] <yoleaux> 03:23Z <Zoffix> moritz: Currently this crashes `m: say "ab" ~~ /^ a ?% (b) $/`. I was thinking instead of trying to fix it, we should just throw some "Useless use of ? with %" if the `%` thing is used with `??` or `? quantifiers. Does that make sense?

[08:06] <ZofBot> moritz, ORG #SUPERBOWL IS HAVING A SUPERBOWL WATCH PARTY ON FEB

[08:07] <moritz> how *fascinating*

[08:20] <Geth> ¦ rakudo: 57a1aa7a87 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[08:20] <Geth> ¦ rakudo: Fix unwanted curries with HyperWhatever type object

[08:20] <Geth> ¦ rakudo:

[08:20] <Geth> ¦ rakudo: Fixes RT#128880: https://rt.perl.org/Ticket/Display.html?id=128880

[08:20] <Geth> ¦ rakudo: Phixes R#1489:   https://github.com/rakudo/rakudo/issues/1489

[08:20] <Geth> ¦ rakudo:

[08:20] <Geth> ¦ rakudo: When we're trying to figure out whether to make a curry, we forget

[08:20] <Geth> ¦ rakudo: to check whether the HyperWhatever we encountered is an instance.

[08:20] <synopsebot> RT#128880 [open]: https://rt.perl.org/Ticket/Display.html?id=128880 [BUG] Dead code in HyperWhatever, ｢.new｣ is not supposed to work but it does (HyperWhatever.new)

[08:20] <synopsebot> R#1489 [open]: https://github.com/rakudo/rakudo/issues/1489 Smartmatch with HyperWhatever:U RHS curries instead of type-matching

[08:20] <Geth> ¦ rakudo: Fix by adding that check.

[08:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/57a1aa7a87

[08:22] <Geth> ¦ roast: dbe43e171d | (Zoffix Znet)++ | S02-types/hyperwhatever.t

[08:22] <Geth> ¦ roast: Test we don't curry HyperWhatever:Us

[08:22] <Geth> ¦ roast:

[08:22] <Geth> ¦ roast: RT#128880:  https://rt.perl.org/Ticket/Display.html?id=128880

[08:22] <Geth> ¦ roast: R#1489:     https://github.com/rakudo/rakudo/issues/1489

[08:22] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/57a1aa7a87

[08:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dbe43e171d

[08:22] <Geth> ¦ rakudo: 835bb35081 | (Zoffix Znet)++ | t/spectest.data

[08:22] <Geth> ¦ rakudo: Add S02-types/hyperwhatever.t to list of tests to run

[08:22] <Geth> ¦ rakudo:

[08:22] <Geth> ¦ rakudo: Closes https://github.com/rakudo/rakudo/issues/1489

[08:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/835bb35081

[08:41] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix regression in backtrace raker

[08:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/340061853 https://github.com/rakudo/rakudo/compare/684b99eaa802...13406517ad0f

[09:56] <Zoffix> moritz: heh, so I made the fix but there's a single failing 6.c spec file.... Guess who committed it? :) https://github.com/perl6/roast/commit/aaa71d077431cd0a86be84bd386e1032a12e8697#diff-ae7b47444302486e790af6ee18121fabR16

[09:57] <Zoffix> Just gonna shove the stuff into a branch and let AlexDaniel`++ figure out whether tests can be changed or not.

[09:59] <Geth> ¦ nqp/limit-quant-on-sep-RT125618: ac3d5307f3 | (Zoffix Znet)++ | src/QRegex/P6Regex/Actions.nqp

[09:59] <Geth> ¦ nqp/limit-quant-on-sep-RT125618: Make `?` and `??` quantifiers on `%`/`%%` throw…

[09:59] <Geth> ¦ nqp/limit-quant-on-sep-RT125618:

[09:59] <Geth> ¦ nqp/limit-quant-on-sep-RT125618: …a message that points out they're useless and suggests the user

[09:59] <Geth> ¦ nqp/limit-quant-on-sep-RT125618: may wanted to quote the constructs instead.

[09:59] <Geth> ¦ nqp/limit-quant-on-sep-RT125618:

[09:59] <Geth> ¦ nqp/limit-quant-on-sep-RT125618: Fixes RT#125618: https://rt.perl.org/Ticket/Display.html?id=125618

[09:59] <Geth> ¦ nqp/limit-quant-on-sep-RT125618: review: https://github.com/perl6/nqp/commit/ac3d5307f3

[09:59] <synopsebot> RT#125618 [new]: https://rt.perl.org/Ticket/Display.html?id=125618 [REGEX] Positional capture of separator on ?% operator causes compiler error

[10:00] <Geth> ¦ roast/limit-quant-on-sep-RT125618: f2b07afbba | (Zoffix Znet)++ | S05-metasyntax/regex.t

[10:00] <Geth> ¦ roast/limit-quant-on-sep-RT125618: Test `?` and `??` quantifiers on `%`/`%%` throw

[10:00] <Geth> ¦ roast/limit-quant-on-sep-RT125618:

[10:00] <Geth> ¦ roast/limit-quant-on-sep-RT125618: RT#125618: https://rt.perl.org/Ticket/Display.html?id=125618

[10:00] <Geth> ¦ roast/limit-quant-on-sep-RT125618: NQP Fix:   https://github.com/perl6/nqp/commit/ac3d5307f3

[10:00] <Geth> ¦ roast/limit-quant-on-sep-RT125618: review: https://github.com/perl6/roast/commit/f2b07afbba

[10:00] <moritz> Zoffix: heh

[10:01] <travis-ci> Rakudo build failed. Zoffix Znet 'Add S02-types/hyperwhatever.t to list of tests to run

[10:01] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/340069147 https://github.com/rakudo/rakudo/compare/57a1aa7a870a...835bb350815b

[10:01] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/02-rakudo/repl.t test file failed.

[10:02] <Zoffix> .tell FWIW, there's a potential fix for RT#125618 in branches in https://github.com/perl6/nqp/commit/ac3d5307f3 and https://github.com/perl6/roast/commit/f2b07afbba It's blocked by 2 lines of 6.c tests that indirectly use this combination: https://github.com/perl6/roast/commit/aaa71d077431cd0a86be84bd386e1032a12e8697#diff-ae7b47444302486e790af6ee18121fabR16 leaving it up to you whether to merge it or to

[10:02] <yoleaux> Zoffix: What kind of a name is "FWIW,"?!

[10:02] <Zoffix> delete the branches.

[10:02] <Zoffix> .tell AlexDaniel FWIW, there's a potential fix for RT#125618 in branches in https://github.com/perl6/nqp/commit/ac3d5307f3 and https://github.com/perl6/roast/commit/f2b07afbba It's blocked by 2 lines of 6.c tests that indirectly use this combination: https://github.com/perl6/roast/commit/aaa71d077431cd0a86be84bd386e1032a12e8697#diff-ae7b47444302486e790af6ee18121fabR16 leaving it up to you whether to merge

[10:02] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[10:02] <Zoffix> it or to delete the branches.

[10:02] <Zoffix> .tell AlexDaniel it or to delete the branches.

[10:02] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[10:48] <[Tux]> Rakudo version 2018.01-183-g835bb3508 - MoarVM version 2018.01-82-g296620e86

[10:48] <[Tux]> csv-test-xs-20      0.428 -  0.433

[10:48] <[Tux]> csv-ip5xs           0.809 -  0.864

[10:48] <[Tux]> test-t --race       1.085 -  1.123

[10:49] <[Tux]> test-t              2.648 -  2.656

[10:49] <[Tux]> csv-ip5xs-20        7.575 -  8.046

[10:49] <[Tux]> test                9.209 -  9.533

[10:49] <[Tux]> csv-parser         11.973 - 12.373

[10:49] <[Tux]> test-t-20 --race   18.450 - 18.532

[10:49] <[Tux]> test-t-20          47.964 - 50.267

[10:49] <[Tux]> but I see a lot of fluctuation

[12:15] <Geth> ¦ rakudo: 4b7113fa06 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[12:15] <Geth> ¦ rakudo: Fix thinko from earlier commit

[12:15] <Geth> ¦ rakudo:

[12:15] <Geth> ¦ rakudo: The earlier fix[^1] was meant to continue looking for arifying

[12:15] <Geth> ¦ rakudo: args after nameds, but instead it tossed the entire line, causing

[12:15] <Geth> ¦ rakudo: named being counted for arity.

[12:15] <Geth> ¦ rakudo:

[12:16] <Geth> ¦ rakudo: [1] https://github.com/rakudo/rakudo/commit/59556c70b4f7d153096e7b674c168709c6d70eba

[12:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4b7113fa06

[12:16] <Geth> ¦ rakudo: 00af9ce272 | (Zoffix Znet)++ | t/08-performance/02-qast-rewrites.t

[12:16] <Geth> ¦ rakudo: Cover bug in QAST::Block arity calculation

[12:16] <Geth> ¦ rakudo:

[12:16] <Geth> ¦ rakudo: Covers https://github.com/rakudo/rakudo/commit/4b7113fa06

[12:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/00af9ce272

[12:41] <AlexDaniel> releasable6: next

[12:41] <yoleaux> 10:02Z <Zoffix> AlexDaniel: FWIW, there's a potential fix for RT#125618 in branches in https://github.com/perl6/nqp/commit/ac3d5307f3 and https://github.com/perl6/roast/commit/f2b07afbba It's blocked by 2 lines of 6.c tests that indirectly use this combination: https://github.com/perl6/roast/commit/aaa71d077431cd0a86be84bd386e1032a12e8697#diff-ae7b47444302486e790af6ee18121fabR16 leaving it up to you whether to merge

[12:41] <yoleaux> 10:02Z <Zoffix> AlexDaniel: it or to delete the branches.

[12:41] <releasable6> AlexDaniel, Next release in 6 days and ≈6 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[12:41] <synopsebot> RT#125618 [open]: https://rt.perl.org/Ticket/Display.html?id=125618 [REGEX] Positional capture of separator on ?% operator causes compiler error

[12:41] <releasable6> AlexDaniel, Details: https://gist.github.com/22cf7587f4d6415a0355a25c6c2ecf56

[12:43] <AlexDaniel> let's see…

[12:53] <AlexDaniel> well, it's not useless with %%, as far as I can see

[12:54] <AlexDaniel> m: say ‘af’|‘a’|‘f’ ~~ /a? %% f/

[12:54] <camelia> rakudo-moar 00af9ce27: OUTPUT: «｢af｣␤｢a｣␤｢f｣␤»

[12:55] <AlexDaniel> the equivalent to that is just a?f? though

[12:55] <AlexDaniel> m: say ‘af’|‘a’|‘f’|‘’ ~~ /a? %% f/

[12:55] <camelia> rakudo-moar 00af9ce27: OUTPUT: «｢af｣␤｢a｣␤｢f｣␤｢｣␤»

[12:55] <AlexDaniel> m: say ‘af’|‘a’|‘f’|‘’ ~~ /a?f?/

[12:55] <camelia> rakudo-moar 00af9ce27: OUTPUT: «｢af｣␤｢a｣␤｢f｣␤｢｣␤»

[12:55] <AlexDaniel> hmm

[13:02] <travis-ci> Rakudo build failed. Zoffix Znet 'Fix thinko from earlier commit

[13:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/340111378 https://github.com/rakudo/rakudo/compare/835bb350815b...4b7113fa065f

[13:02] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/04-nativecall/09-nativecast.t test file failed.

[13:17] <Zoffix> AlexDaniel: then just let's delete those branches.

[13:17] <Zoffix> I didn't realize there was any difference that %% brought in those cases, but there is.

[13:18] <Zoffix> m: say ‘af’|‘a’|‘f’ ~~ /a? %% f/

[13:18] <camelia> rakudo-moar 00af9ce27: OUTPUT: «｢af｣␤｢a｣␤｢f｣␤»

[13:18] <Zoffix> In this one

[13:18] <AlexDaniel> okay

[13:18] <Zoffix> + save a couple of CPU ticks with not having to check whether this used was used.

[13:23] <AlexDaniel> Zoffix: done, and left a comment on that ticket. FWIW links to these commits will work for a while, so deleting these branches doesn't really wipe out the information completely

[13:24] <AlexDaniel> (which is good)

[13:29] <Zoffix> cool

[13:31] <AlexDaniel> so using prebuilt rakudo for doc tests only made it faster by 6 minutes, that's not a big difference really…

[13:32] <AlexDaniel> like 25% faster, not really groundbreaking

[13:41] <dogbert17> Zoffix: yeah, it was ticket RT #125618

[13:41] <synopsebot> RT#125618 [open]: https://rt.perl.org/Ticket/Display.html?id=125618 [REGEX] Positional capture of separator on ?% operator causes compiler error

[13:47] <travis-ci> Rakudo build passed. Zoffix Znet 'Cover bug in QAST::Block arity calculation

[13:47] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/340111506 https://github.com/rakudo/rakudo/compare/4b7113fa065f...00af9ce272fc

[15:20] <AlexDaniel> MasterDuke: here?

[15:21] <MasterDuke> for maybe 5 min

[15:22] <AlexDaniel> ah well, nvm then. I have an interesting example that leaks

[15:22] <AlexDaniel> # use Telemetry; use nqp; loop { nqp::force_gc(); say T<max-rss> }

[15:23] <AlexDaniel> but IIRC Telemetry itself shells out to get max-rss, or something like that

[15:23] <AlexDaniel> so maybe that's just the Proc::Async doing its leaky job

[15:24] <AlexDaniel> or maybe I'm mistaking it with Kernel stuff

[15:25] * lizmat has come down bit a bad cold and doesn't really feel up to doing the P6W already

[15:33] <AlexDaniel> weekly: (Juan Julián Merelo Guervós)++ worked hard on the doc repo (a lot of old issues updated or resolved, faster travis test times)

[15:33] <notable6> AlexDaniel, Noted!

[15:34] <AlexDaniel> notable6: weekly

[15:34] <notable6> AlexDaniel, 4 notes: https://gist.github.com/8db62cab3d39a5825441f6a9550ecdc9

[15:37] <AlexDaniel> weekly: Camelia in the wild (check out the top of the Marshall amp on the right hand side): https://www.facebook.com/139508053330390/photos/a.139510073330188.1073741828.139508053330390/182626859018509/?type=3&amp;theater

[15:37] <notable6> AlexDaniel, Noted!

[16:05] <lizmat> AlexDaniel: Telemetry doesn't shell out for max-rss, just depends on what nqp::getrusage gives

[16:05] <AlexDaniel> ah k

[16:06] <AlexDaniel> I was mistaking it with this I think: https://github.com/rakudo/rakudo/blob/master/src/core/Kernel.pm#L14

[16:07] <lizmat> yup, that does  :-)

[16:43] <AlexDaniel> anyway, I created a ticket for that: https://github.com/rakudo/rakudo/issues/1513

[19:42] <dogbert17> bisect: await do for ^10 -> $i { start { "A".match: /(“A”) { say "BOOM: $i) ", $0 if not $0 }/ } }

[19:42] <bisectable6> dogbert17, On both starting points (old=2015.12 new=00af9ce) the exit code is 0 and the output is identical as well

[19:42] <bisectable6> dogbert17, Output on both points: «»

[19:43] <dogbert17> bisect: await do for ^1000 -> $i { start { "A".match: /(“A”) { say "BOOM: $i) ", $0 if not $0 }/ } }

[19:43] <bisectable6> dogbert17, On both starting points (old=2015.12 new=00af9ce) the exit code is 0 and the output is identical as well

[19:43] <bisectable6> dogbert17, Output on both points: «»

[19:47] <AlexDaniel> 6c: await do for ^1000 -> $i { start { "A".match: /(“A”) { say "BOOM: $i) ", $0 if not $0 }/ } }

[19:48] <committable6> AlexDaniel, https://gist.github.com/8ee07c502b5eb301bff987da68f6778f

[19:48] <AlexDaniel> dogbert17: ↑ maybe this gives a better picture

[19:49] <dogbert17> yes, still looks broken

[20:10] <samcv> i'm researching about AutoFDO which could be a way to make MoarVM faster. basically it creates a profile when you run your code (using CPU branch result instructions to return the result of branches) and then you compile it again with this collected data

[20:10] <samcv> and it can optimize based on how code actually executes, rather than just static code analysis

[21:06] <AlexDaniel> MasterDuke++ # https://github.com/sergot/http-useragent/pull/187

[21:06] <AlexDaniel> 1500MiB → 219MiB maxrss is a noticeable improvement I think! :)

[21:08] <jnthn> Not announced yet, but today I got news that http://news.perlfoundation.org/2018/01/grant-extension-request-perl-6-1.html is approved \o/

[21:08] <jnthn> I...might just spend some of the time on hunting memory leaks ;)

[21:09] <MasterDuke> ++jnthn

[21:10] * AlexDaniel fully supports that idea :)

[21:10] <AlexDaniel> benchable6: uptime

[21:10] <benchable6> AlexDaniel, 23 hours, 22 minutes, and 32 seconds, 1140.160156MiB maxrss. This is Rakudo version 2018.01-174-gef1d22f4c built on MoarVM version 2018.01-82-g296620e86 implementing Perl 6.c.

[21:11] <samcv> jnthn++ \o/

[21:11] <AlexDaniel> say 1140 × 16

[21:11] <evalable6> AlexDaniel, rakudo-moar 00af9ce27: OUTPUT: «18240␤»

[21:12] * AlexDaniel does not have that much memory on his server

[21:20] <Geth> ¦ nqp/master: 5 commits pushed by pmurias++

[21:20] <Geth> ¦ nqp/master: 9d664e6d6c | [js] Scan in regexes by graphemes not by bytes

[21:20] <Geth> ¦ nqp/master: 4c8ea814c4 | [js] Strip marks more correctly in weird cases

[21:20] <Geth> ¦ nqp/master: fc524076c4 | [js] Make enumcharlist work better with graphemes

[21:20] <Geth> ¦ nqp/master: 48dcb3f302 | [js] Start taking grapheme boundaries into account more

[21:20] <Geth> ¦ nqp/master: 135154876c | [js] eslint --fix

[21:20] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/2c51764e93...135154876c

[21:22] <japhb> Congratulations ++jnthn!!

[22:51] <tbrowder> Well deserved ++jnthn!

[22:51] <yoleaux> 03:31Z <Zoffix> tbrowder: just use the asyncspawn I showed you the other week. You can stick it as a sub here and use it in tests: https://github.com/perl6/nqp/blob/master/src/core/testing.nqp

[22:53] <tbrowder> Zoffix: i’ll try it, but i have been studying the moar c code it touches and may have lots of questions—be forewarned!

[23:04] <AlexDaniel> reportable6: 2018-02-05T00:00:00Z 2018-02-12T00:00:00Z

[23:04] <reportable6> AlexDaniel, Couldn't find a snapshot for 2018-02-12T00:00:00Z (try ｢list｣ command to see what's available).

[23:04] <AlexDaniel> ah… we're not there *yet*!

[23:21] <dogbert17> Congrats ++jnthn
