[00:56] *** fake_space_whale joined
[01:17] *** Kaiepi left
[01:18] *** Kaiepi joined
[01:20] *** Kaiepi left
[01:20] *** Kaiepi joined
[01:25] <fake_space_whale> When a bug is marked as "testneeded" for rakudo, are those supposed to be tests in rakudo/t for test in roast?

[01:29] <MasterDuke> fake_space_whale: usually roast

[01:29] <fake_space_whale> Thank you

[01:30] <MasterDuke> if it's something about the text of an error message however, that would usually be in rakudo's t/

[01:32] <fake_space_whale> ah, that makes sense

[01:37] *** benjikun left
[01:40] <MasterDuke> oh nice, now my int-as-default nqp passes all its tests

[01:40] <MasterDuke> whoops, but rakudo segfaults before it even gets to the core setting

[01:42] <MasterDuke> wait, now it does, segv hopefully was just random

[02:49] *** |Tux| left
[02:54] *** |Tux| joined
[03:08] *** Kaiepi left
[03:09] *** Kaiepi joined
[03:19] <Geth> ¦ roast: ribbon-otter++ created pull request #456: Add tests for #2143, Distribution::Resource.^mro

[03:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/456

[06:08] *** dct joined
[06:15] *** diakopter left
[06:16] *** fake_space_whale left
[06:30] *** dct left
[06:38] *** robertle joined
[06:43] *** lizmat left
[07:14] *** ufobat___ joined
[08:06] *** lizmat joined
[08:40] *** [TuxCM] joined
[09:29] *** brrt joined
[09:29] <brrt> Zoffix++ nice slides

[09:29] <brrt> regarding the speed-tips, slightly depressing slides as well

[10:18] <Ulti> yeah the .123 vs .123e0 tips are something worth adding to an intro tutorial

[10:20] <Ulti> Im actually optimising a bunch of python numeric code right now with a JIT compiling package called numba and I'm noticing I need to wrap floats in numpy.float64() all over the shop to get the most out of that too

[10:20] <Ulti> so its a general problem even outside of rats and floats

[10:24] *** robertle left
[10:26] <Ulti> hmmm one thing in numba is you decorate a function to say its only going to be using the features that can be handled so simple numeric code etc. is it impossible in Perl 6 to add a trait to a sub/method to say all rats inside should actually be native doubles or something?

[10:26] *** brrt left
[10:27] <Ulti> sub optimised_thing is native_numeric {}

[10:30] <Ulti> by impossible I mean in Perl 6 itself, is there any meta type operation to get at the variables and change their types at the level of a function?

[10:31] *** [TuxCM] left
[10:53] *** brrt joined
[11:15] *** brrt left
[11:15] *** brrt joined
[11:22] <brrt> Ulti: we wanted macro's at some point

[11:22] <brrt> and in a more general sense, what we want is the ability to add 'cleverness' to our compiler

[11:34] <brrt> .tell Zoffix you're welcome back on #moarvm if you fancy

[11:34] <yoleaux> brrt: I'll pass your message to Zoffix.

[11:47] <lizmat> m: my int $max = 10_000_000; for ^$max { }; say now - INIT now

[11:47] <camelia> rakudo-moar 7043559bb: OUTPUT: «0.50097303␤»

[11:48] <lizmat> m: my int $max = 10_000_000; for ^$max -> int $_ { }; say now - INIT now

[11:48] <camelia> rakudo-moar 7043559bb: OUTPUT: «0.1320692␤»

[11:48] <lizmat> timotimo: ^^^

[11:48] <lizmat> so I have a patch that will plug the right signature into the block, but I don't get that optimization still

[11:48] <lizmat> suggestions ?

[12:01] *** [TuxCM] joined
[12:13] *** Zoffix joined
[12:13] <Zoffix> m: my int $max = 10_000_000; for ^$max { .abs }; say now - ENTER now

[12:13] <camelia> rakudo-moar 7043559bb: OUTPUT: «1.8581668␤»

[12:13] <Zoffix> m: my int $max = 10_000_000; for ^$max -> int $_ { .abs }; say now - ENTER now

[12:13] <camelia> rakudo-moar 7043559bb: OUTPUT: «1.766645192␤»

[12:14] <Zoffix> m: my int $max = 10_000_000; for ^$max { .abs; .abs; .abs; }; say now - ENTER now

[12:14] <camelia> rakudo-moar 7043559bb: OUTPUT: «4.26337106␤»

[12:14] <Zoffix> m: my int $max = 10_000_000; for ^$max -> int $_ { .abs; .abs; .abs; }; say now - ENTER now

[12:14] <camelia> rakudo-moar 7043559bb: OUTPUT: «4.95017282␤»

[12:14] <Zoffix> lizmat: ^ that optimization can be detrimental, if you're doing something with $_ that would require boxing.

[12:14] <Zoffix> For the first two evals locally I get 3.8717541 and 6.91530516

[12:16] <lizmat> true, but how often do you do something other than indexing with $_ in a for ^1000 { }  (or anything with $_ at all? )

[12:16] <Zoffix> lizmat: how often? :)

[12:17] <lizmat> well, lemme put it this way: most often when I have code something like for ^1000 { }, it was for doing something 1000 times

[12:17] <Zoffix> You're also changing semantics:

[12:17] <Zoffix> m: multi foo (int) { die "cannot use native stuff" }; multi foo (Int) {}; my int $max = 10_000_000; for ^$max { foo $_ }

[12:17] <camelia> rakudo-moar 7043559bb: ( no output )

[12:17] <lizmat> and when not, $_ would be an index I used

[12:17] *** robertle joined
[12:17] <Zoffix> m: multi foo (int) { die "cannot use native stuff" }; multi foo (Int) {}; my int $max = 10_000_000; for ^$max -> int $_ { foo $_ }

[12:17] <camelia> rakudo-moar 7043559bb: OUTPUT: «cannot use native stuff␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:18] <lizmat> so you're saying I shouldn't do this and advise people to do an explicit -> $_ if they want that optimization to work ?

[12:18] <lizmat> -> int $_

[12:18] <lizmat> rather

[12:20] <[Tux]> Rakudo version 2018.06-281-g7043559bb - MoarVM version 2018.06-329-g21ea40f68

[12:20] <[Tux]> csv-test-xs-20      0.475 -  0.486

[12:20] <[Tux]> test-t --race       0.971 -  0.981

[12:20] <[Tux]> csv-ip5xs           1.054 -  1.250

[12:20] <[Tux]> test-t              2.320 -  2.343

[12:20] <[Tux]> csv-ip5xs-20        7.822 -  8.069

[12:20] <[Tux]> test               10.056 - 10.271

[12:20] <[Tux]> test-t-20 --race   13.297 - 14.804

[12:20] <[Tux]> csv-parser         24.788 - 25.001

[12:20] <[Tux]> test-t-20          41.572 - 42.081

[12:22] <lizmat> m: my int $max = 10_000_000; for ^$max -> int $i { }; say now - INIT now  # another interesting data point

[12:22] <camelia> rakudo-moar 7043559bb: OUTPUT: «1.255137␤»

[12:22] <Zoffix> lizmat: We'd have to document this as "for ^1000 block defaults to $_ is raw signature, but implementations are free to change it to an `int $_` instead, for optimization purposes, which means you'll get different multies called"

[12:22] <lizmat> m: my int $max = 10_000_000; for ^$max -> int $_ { }; say now - INIT now  # the name seems to matter

[12:22] <camelia> rakudo-moar 7043559bb: OUTPUT: «0.1381269␤»

[12:23] <Zoffix> lizmat: and looking at ecosystem grep, I'd eyeball the more common case would be calling methods with $_ not indexing

[12:23] <lizmat> on loops with for ^100 ?

[12:23] <Zoffix> "&hide(3, 15 + $_) for ^5;"

[12:23] <Zoffix> https://gist.github.com/Whateverable/bffe31766e1808e9a406ce32e527bc3f

[12:24] <Zoffix> "for ^5 {$bc.send($_)};"

[12:24] <Zoffix> But my bigger issue is the change in which multi gets called and having this extra magic behaviour in signatures of blocks

[12:25] <lizmat> ok, I'll turn this into an issue then, maybe for 6.d  :-)

[12:25] <Zoffix> *6.e

[12:25] <Zoffix> :)

[12:25] <lizmat> what strikes me atm, is the change in performance between int $_ and int $i

[12:26] <lizmat> well, I'm glad I got the opt going for ^$max as well, so that means I can get rid of a lot of nqp::while loops in the core

[12:26] <Zoffix> lizmat: that's because the `$i` version still has $_ in it as well, doesn't it?

[12:27] <Zoffix> Var (lexical $_ :decl(var))

[12:27] <Zoffix> Op (bind)

[12:27] <Zoffix>     Var (lexical $_) <wanted>

[12:27] <Zoffix>     Op (getlexouter) <wanted>

[12:27] <Zoffix>         SVal ($_) 

[12:28] <lizmat> m: dd (-> int $i { }).signature

[12:28] <camelia> rakudo-moar 7043559bb: OUTPUT: «:(int $i)␤»

[12:28] <lizmat> m: dd (-> int $_ { }).signature

[12:28] <camelia> rakudo-moar 7043559bb: OUTPUT: «:(int $_)␤»

[12:28] <Zoffix> But the $_ is still there in $i case, which is bound to outer $_, whereas in the $_ case, it's just bound to the param

[12:29] <lizmat> m: (-> int $_ { dd MY::.keys })(42)

[12:29] <camelia> rakudo-moar 7043559bb: OUTPUT: «("\$_", "\$*DISPATCHER").Seq␤»

[12:29] <lizmat> m: (-> int $i { dd MY::.keys })(42)

[12:29] <camelia> rakudo-moar 7043559bb: OUTPUT: «("\$*DISPATCHER", "\$i", "\$_").Seq␤»

[12:29] <lizmat> ah., indeed

[12:30] <timotimo> Ulti: at least the 0.123 thing is "easily" solved in the core setting.

[12:35] *** brrt left
[12:36] *** diakopter joined
[12:43] *** Zoffix left
[13:05] *** Zoffix joined
[13:07] <Zoffix> "<Zoffix> *6.e"   FWIW, I meant that our generic "some later language version" designator is now 6.e, not that 6.d is on lock down for any new features or anything.

[13:07] *** Zoffix left
[13:08] <Geth> ¦ rakudo: d69fd2f370 | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[13:08] <Geth> ¦ rakudo: Better document the for ^100 loop optimization

[13:08] <Geth> ¦ rakudo: 

[13:08] <Geth> ¦ rakudo: Basically, use <foo> instead of ('foo'), reduce indentation to 2 instead of

[13:08] <Geth> ¦ rakudo: 4, and add the nqp equivalent of the code being codegenned.

[13:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d69fd2f370

[13:37] *** brrt joined
[14:03] <Geth> ¦ rakudo: 9b07e7bf3d | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[14:03] <Geth> ¦ rakudo: Make the for ^100 loop optimization about 2% faster

[14:03] <Geth> ¦ rakudo: 

[14:03] <Geth> ¦ rakudo: By moving the update of the index to the condition and using a 2 parameter

[14:03] <Geth> ¦ rakudo: nqp::while instead of the 3 parameter one.

[14:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9b07e7bf3d

[14:13] *** skids joined
[14:47] <Geth> ¦ rakudo: 3d9ea6ebf7 | (Elizabeth Mattijsen)++ | 6 files

[14:47] <Geth> ¦ rakudo: Add QuantHash.Setty|Baggy|Mixy coercer methods

[14:47] <Geth> ¦ rakudo: 

[14:47] <Geth> ¦ rakudo: These are basically frontends for coercing to the given object, but

[14:47] <Geth> ¦ rakudo: with maintaining the mutability of the object.  So:

[14:47] <Geth> ¦ rakudo: 

[14:47] <Geth> ¦ rakudo:   say (1,2,3).Set.Baggy;       # Bag(1, 2, 3)

[14:47] <Geth> ¦ rakudo:   say (1,2,3).SetHash.Baggy;   # BagHash(1, 2, 3)

[14:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3d9ea6ebf7

[14:59] *** brrt left
[15:03] *** fake_space_whale joined
[15:28] <Geth> ¦ rakudo: 5c429e4ead | (Zoffix Znet)++ | 2 files

[15:28] <Geth> ¦ rakudo: Make Rationals fully-immutable

[15:28] <Geth> ¦ rakudo: 

[15:28] <Geth> ¦ rakudo: Fixes RT#130774: https://rt.perl.org/Ticket/Display.html?id=130774

[15:28] <Geth> ¦ rakudo: 

[15:28] <Geth> ¦ rakudo: This commit changes the performance landscape of rationals.

[15:28] <Geth> ¦ rakudo: 

[15:29] <Geth> ¦ rakudo: As described in the Work Proposal[^1], the optimization was removed

[15:29] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[15:29] <synopsebot> RT#130774 [resolved]: https://rt.perl.org/Ticket/Display.html?id=130774 [BUG] Rational.REDUCE-ME has a data race

[15:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5c429e4ead

[15:29] <Geth> ¦ rakudo: 3d10a7f1e7 | (Zoffix Znet)++ | src/core/Rat.pm6

[15:29] <Geth> ¦ rakudo: [CaR Grant] Make Rational reduction 43% faster

[15:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3d10a7f1e7

[15:33] *** Kaiepi left
[15:33] *** Kaiepi joined
[15:37] <Geth> ¦ rakudo: 097826ef7b | (Zoffix Znet)++ | src/core/Rational.pm6

[15:37] <Geth> ¦ rakudo: [CaR Grant] Make argless Rational.round 4.7x faster

[15:37] <Geth> ¦ rakudo: 

[15:37] <Geth> ¦ rakudo: It's used by Rational.Str and Rational.base, so should give

[15:37] <Geth> ¦ rakudo: some gravity boost to those as well.

[15:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/097826ef7b

[15:37] <Geth> ¦ rakudo: db66a13848 | (Zoffix Znet)++ | src/core/Rational.pm6

[15:37] <Geth> ¦ rakudo: [CaR Grant] Optimize/fix Rational.new

[15:37] <Geth> ¦ rakudo: 

[15:37] <Geth> ¦ rakudo: - Makes creation of Rationals 19% faster

[15:37] <Geth> ¦ rakudo: - Fixes loss of proper typing of numerator/denominator with the

[15:37] <Geth> ¦ rakudo:     types the role was parametarized with

[15:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/db66a13848

[15:39] <Geth> ¦ roast: 9adbc0694d | (Zoffix Znet)++ | MISC/bug-coverage-stress-6.d.t

[15:39] <Geth> ¦ roast: Cover data race in Rational

[15:39] <Geth> ¦ roast: 

[15:39] <Geth> ¦ roast: Closes RT#130774: https://rt.perl.org/Ticket/Display.html?id=130774

[15:39] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/6dd20588b6dfb75

[15:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9adbc0694d

[15:39] <Geth> ¦ rakudo: 38de1e512e | (Zoffix Znet)++ | t/spectest.data

[15:39] <synopsebot> RT#130774 [resolved]: https://rt.perl.org/Ticket/Display.html?id=130774 [BUG] Rational.REDUCE-ME has a data race

[15:39] <Geth> ¦ rakudo: Add MISC/bug-coverage-stress-6.d.t to list of test files

[15:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/38de1e512e

[15:41] <Geth> ¦ roast: d36e39833b | (Zoffix Znet)++ | S32-num/rat.t

[15:41] <Geth> ¦ roast: [CaR Grant] Spec Rational keeps nu/de in proper types

[15:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d36e39833b

[15:59] *** brrt joined
[16:05] *** Ven`` joined
[16:17] *** fake_space_whale left
[16:24] *** robertle left
[16:48] *** bisectable6 left
[16:49] *** bisectable6 joined
[16:49] *** ChanServ sets mode: +v bisectable6

[17:15] *** robertle joined
[17:38] *** Ven`` left
[17:39] <Geth> ¦ rakudo: d1729da26a | (Zoffix Znet)++ | src/core/Rat.pm6

[17:39] <Geth> ¦ rakudo: Make infix:<**>(Rational, Int) more than 10x as fast

[17:39] <Geth> ¦ rakudo: 

[17:39] <Geth> ¦ rakudo: Makes `<50000123/50000000> ** 50_000` run 10.26x as fast

[17:39] <Geth> ¦ rakudo: Makes `for ^2000 { my $ = (42 / $_) ** $_ }` run 16.72x as fast

[17:39] <Geth> ¦ rakudo: Closes https://github.com/rakudo/rakudo/issues/1955 R#1955

[17:39] <Geth> ¦ rakudo: 

[17:39] <synopsebot> R#1955 [open]: https://github.com/rakudo/rakudo/issues/1955 [perf] Investigate whether $rat**$huge-power can be optimized with math smarts

[17:39] <Geth> ¦ rakudo: Rationals are now[^1] guaranteed to be always in reduced form,

[17:39] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[17:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d1729da26a

[17:47] *** brrt left
[17:56] <timotimo> nice

[17:59] <Geth> ¦ rakudo: f9963bbfad | (Zoffix Znet)++ | src/core/Rat.pm6

[17:59] <Geth> ¦ rakudo: Fix incorrect underflow detection in infix:<**>

[17:59] <Geth> ¦ rakudo: 

[17:59] <Geth> ¦ rakudo: Introed in previous commit[^1].

[17:59] <Geth> ¦ rakudo: Since we negate the power, we'd get an Inf on too large

[17:59] <Geth> ¦ rakudo: power, not 0e0.

[17:59] <Geth> ¦ rakudo: 

[17:59] <Geth> ¦ rakudo: [1] https://github.com/rakudo/rakudo/commit/d1729da26a8a2e869d87549d1cb4c6075d38d55f

[17:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f9963bbfad

[18:19] <Geth> ¦ roast: 89cdc62dbd | (Zoffix Znet)++ | APPENDICES/A01-limits/overflow.t

[18:19] <Geth> ¦ roast: Cover rat-to-large-power failurage in SAP

[18:19] <Geth> ¦ roast: 

[18:19] <Geth> ¦ roast: Rakudo fix:

[18:19] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/d1729da26a8a2e869d87549d1cb4c6075d38d55f

[18:19] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/f9963bbfad3648a7ea09d211e7ad0924338faaf4

[18:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/89cdc62dbd

[18:48] *** travis-ci joined
[18:48] <travis-ci> Rakudo build passed. Zoffix Znet 'Make infix:<**>(Rational, Int) more than 10x as fast

[18:48] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/410442784 https://github.com/rakudo/rakudo/compare/38de1e512e0e...d1729da26a8a

[18:48] *** travis-ci left
[18:56] <Geth> ¦ rakudo: 712d0f0fbd | (Elizabeth Mattijsen)++ | 2 files

[18:56] <Geth> ¦ rakudo: Fix problem in QuantHash.ACCEPTS

[18:56] <Geth> ¦ rakudo: 

[18:56] <Geth> ¦ rakudo: If the invocant or the candidate where a xxxHash type with initially

[18:56] <Geth> ¦ rakudo: some elements, but then all elements removed, would not accept a newly

[18:56] <Geth> ¦ rakudo: created xxxHash object.

[18:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/712d0f0fbd

[18:58] *** ufobat___ left
[19:17] *** dogbert17 joined
[19:18] <dogbert17> ZOFFLOP: t/spec/S17-supply/syntax.t

[19:32] <Geth> ¦ rakudo: 76e5f9c809 | (Elizabeth Mattijsen)++ | 7 files

[19:32] <Geth> ¦ rakudo: Properly add QuantHash.Setty|Baggy|Mixy coercers

[19:32] <Geth> ¦ rakudo: 

[19:32] <Geth> ¦ rakudo: Also cover the :U cases, so Set.Baggy will return a Bag type object

[19:32] <Geth> ¦ rakudo: and SetHash.Baggy will return a BagHash type object.  And also take

[19:32] <Geth> ¦ rakudo: care of the identity cases: Set.Setty -> Set, SetHash.Setty -> SetHash.

[19:32] <Geth> ¦ rakudo: 

[19:32] <Geth> ¦ rakudo: These facilitate some refactoring on the set operators.

[19:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/76e5f9c809

[20:05] <Geth> ¦ rakudo: 3a6c119713 | (Elizabeth Mattijsen)++ | src/core/set_addition.pm6

[20:05] <Geth> ¦ rakudo: Slightly change semantics of (+) on QuantHashes

[20:05] <Geth> ¦ rakudo: 

[20:05] <Geth> ¦ rakudo: If the left-hand side of the (+) (also known as ⊎) is mutable, then the

[20:05] <Geth> ¦ rakudo: resulting QuantHash object will also be mutable.  If it is immutable,

[20:05] <Geth> ¦ rakudo: it will stay immutable as before.

[20:05] <Geth> ¦ rakudo: 

[20:05] <Geth> ¦ rakudo: This should allow us to better optimize things like:

[20:05] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[20:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3a6c119713

[20:06] <Geth> ¦ roast: 53a4002c84 | (Elizabeth Mattijsen)++ | S03-operators/set_addition.t

[20:06] <Geth> ¦ roast: Adapt to slightly changed (+) semantics

[20:06] <Geth> ¦ roast: 

[20:06] <Geth> ¦ roast: As described in https://github.com/rakudo/rakudo/commit/3a6c119713

[20:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/53a4002c84

[20:07] <Geth> ¦ roast: fb86d0aab1 | (Elizabeth Mattijsen)++ | S03-operators/set_addition.t

[20:07] <Geth> ¦ roast: Disable debuggiong helpers

[20:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fb86d0aab1

[20:09] *** pmurias joined
[20:24] *** travis-ci joined
[20:24] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Fix problem in QuantHash.ACCEPTS

[20:24] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/410473621 https://github.com/rakudo/rakudo/compare/f9963bbfad36...712d0f0fbd85

[20:24] *** travis-ci left
[20:24] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[20:25] <lizmat> apt-get failed, so false alarm

[20:29] *** Ven`` joined
[20:52] *** Ven`` left
[20:52] *** pmurias left
[20:53] *** pmurias joined
[20:58] *** Ven`` joined
[21:15] *** skids left
[21:16] *** robertle left
[21:32] *** Ven` joined
[21:35] *** Ven`` left
[21:54] <Geth> ¦ rakudo: b826a07a7e | (Elizabeth Mattijsen)++ | 2 files

[21:54] <Geth> ¦ rakudo: Slightly change semantics of (-) on QuantHashes

[21:54] <Geth> ¦ rakudo: 

[21:54] <Geth> ¦ rakudo: If the left-hand side of the (-) (also known as ∖) is mutable, then the

[21:54] <Geth> ¦ rakudo: resulting QuantHash object will also be mutable.  If it is immutable,

[21:54] <Geth> ¦ rakudo: it will stay immutable as before.

[21:54] <Geth> ¦ rakudo: 

[21:54] <Geth> ¦ rakudo: This should allow us to better optimize things like:

[21:54] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[21:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b826a07a7e

[21:55] <Geth> ¦ roast: e234049a00 | (Elizabeth Mattijsen)++ | S03-operators/set_difference.t

[21:55] <Geth> ¦ roast: Adapt to slightly changed (-) semantics

[21:55] <Geth> ¦ roast: 

[21:55] <Geth> ¦ roast: As described in https://github.com/rakudo/rakudo/commit/b826a07a7e

[21:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e234049a00

[21:58] <lizmat> more tomorrow&

[22:08] *** pmurias left
[22:20] *** gfldex left
[23:02] *** Ven` left
[23:34] *** gfldex joined
