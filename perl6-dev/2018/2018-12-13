[00:08] *** cognominal left
[00:09] *** cognominal joined
[00:10] *** p6bannerbot sets mode: +v cognominal

[00:13] *** cognominal left
[00:39] *** cognominal joined
[00:40] *** p6bannerbot sets mode: +v cognominal

[01:15] *** lizmat left
[01:38] *** cognominal left
[01:39] *** cognominal joined
[01:39] *** p6bannerbot sets mode: +v cognominal

[01:43] *** cognominal left
[01:57] *** cognominal joined
[01:58] *** p6bannerbot sets mode: +v cognominal

[02:01] *** cognominal left
[02:10] *** cognominal joined
[02:11] *** p6bannerbot sets mode: +v cognominal

[02:14] *** cognominal left
[02:16] *** cognominal joined
[02:17] *** p6bannerbot sets mode: +v cognominal

[02:26] *** Kaiepi left
[02:26] *** Kaiepi joined
[02:27] *** p6bannerbot sets mode: +v Kaiepi

[02:49] *** cognominal left
[04:46] *** cognominal joined
[04:47] *** p6bannerbot sets mode: +v cognominal

[05:20] *** cognominal left
[06:01] *** cognominal joined
[06:02] *** p6bannerbot sets mode: +v cognominal

[06:35] *** cognominal left
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:35] *** xlat joined
[07:36] *** p6bannerbot sets mode: +v xlat

[07:44] *** robertle joined
[07:45] *** p6bannerbot sets mode: +v robertle

[07:58] *** robertle left
[07:58] *** ufobat joined
[07:59] *** p6bannerbot sets mode: +v ufobat

[07:59] *** robertle joined
[08:00] *** p6bannerbot sets mode: +v robertle

[08:32] *** robertle left
[08:32] *** cognominal joined
[08:33] *** p6bannerbot sets mode: +v cognominal

[08:42] *** xlatd7 joined
[08:43] *** p6bannerbot sets mode: +v xlatd7

[08:46] *** xlat left
[08:49] *** robertle joined
[08:50] *** p6bannerbot sets mode: +v robertle

[09:05] *** cognominal left
[09:07] *** lizmat joined
[09:07] *** p6bannerbot sets mode: +v lizmat

[09:08] <lizmat> Files=1257, Tests=83401, 341 wallclock secs (15.21 usr  5.49 sys + 2417.15 cusr 214.65 csys = 2652.50 CPU)

[09:11] *** nop1 joined
[09:12] *** p6bannerbot sets mode: +v nop1

[09:15] *** xlatd7 left
[09:19] <Geth> ¦ nqp: d09bbd6754 | (Elizabeth Mattijsen)++ | tools/build/MOAR_REVISION

[09:19] <Geth> ¦ nqp: Bump MoarVM to get nine++'s latest write-int fix

[09:19] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d09bbd6754

[09:19] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.11-32-gc32000b...2018.11-33-gee6ea72

[09:35] <Geth> ¦ rakudo: af96fbb438 | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[09:35] <Geth> ¦ rakudo: Bump NQP for nine++ write-int fixes

[09:35] <Geth> ¦ rakudo: 

[09:35] <Geth> ¦ rakudo: Also gets latest [js] work by Paweł

[09:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/af96fbb438

[09:35] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.11-46-g7e9594a...2018.11-52-gd09bbd6

[09:38] * lizmat just changed the @LARRY label to CONSENSUS

[09:44] *** xlatd7 joined
[09:44] *** nop1 left
[09:44] *** p6bannerbot sets mode: +v xlatd7

[09:56] *** xlatd7 left
[10:03] *** cognominal joined
[10:04] *** p6bannerbot sets mode: +v cognominal

[10:05] <lizmat> m: dd buf8.^find_method("read-int8")(blob8.new(255),0)

[10:05] <camelia> rakudo-moar af96fbb43: OUTPUT: «(signal SEGV)»

[10:08] *** cognominal left
[10:08] *** Tux__ left
[10:13] *** Tux__ joined
[10:14] *** p6bannerbot sets mode: +v Tux__

[10:37] *** cognominal joined
[10:38] *** p6bannerbot sets mode: +v cognominal

[10:47] *** [Tux] left
[10:58] *** [Tux] joined
[10:58] *** p6bannerbot sets mode: +v [Tux]

[11:10] *** cognominal left
[11:26] <[Tux]> Rakudo version 2018.11-53-gaf96fbb43 - MoarVM version 2018.11-33-gee6ea722c

[11:26] <[Tux]> csv-test-xs-20      0.460 -  0.478

[11:26] <[Tux]> test-t --race       0.829 -  0.865

[11:26] <[Tux]> csv-ip5xs           0.998 -  1.058

[11:26] <[Tux]> test-t              1.908 -  1.915

[11:26] <[Tux]> csv-ip5xs-20        8.008 -  8.574

[11:26] <[Tux]> test                8.069 -  9.405

[11:26] <[Tux]> test-t-20 --race    9.928 - 10.627

[11:26] <[Tux]> csv-parser         24.463 - 27.409

[11:27] <[Tux]> test-t-20          33.969 - 36.076

[11:27] <[Tux]> Working home, so that might have an influence, but the system load is low and there is plenty of memory available

[12:03] *** lucasb joined
[12:03] *** p6bannerbot sets mode: +v lucasb

[12:37] *** llfourn left
[13:03] <[Tux]> Phase of the moon? Number of square miles of clouds over random part of Africa? What?

[13:03] <[Tux]> Rakudo version 2018.11-53-gaf96fbb43 - MoarVM version 2018.11-33-gee6ea722c

[13:03] <[Tux]> csv-test-xs-20      0.436 -  0.441

[13:03] <[Tux]> test-t --race       0.808 -  0.904

[13:03] <[Tux]> csv-ip5xs           0.911 -  0.968

[13:03] <[Tux]> test-t              1.759 -  1.877

[13:03] <[Tux]> csv-ip5xs-20        7.168 -  8.144

[13:03] <[Tux]> test                8.389 -  8.756

[13:03] <[Tux]> test-t-20 --race    9.552 -  9.840

[13:03] <[Tux]> csv-parser         22.526 - 24.458

[13:03] <[Tux]> test-t-20          31.877 - 34.504

[13:07] <Geth> ¦ roast: 4a2b127f15 | (Elizabeth Mattijsen)++ | S03-buf/write-int.t

[13:07] <Geth> ¦ roast: First stab at exhaustive testing of buf8.write-intX

[13:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4a2b127f15

[13:07] *** cognominal joined
[13:08] *** p6bannerbot sets mode: +v cognominal

[13:39] *** robertle left
[13:40] *** cognominal left
[14:21] <Geth> ¦ rakudo: 5cc0e02d42 | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[14:21] <Geth> ¦ rakudo: Add buf8.write-uint128

[14:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5cc0e02d42

[14:21] <Geth> ¦ rakudo: fecfb22d70 | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[14:21] <Geth> ¦ rakudo: read/write-int/num should only be called on instances

[14:21] <Geth> ¦ rakudo: 

[14:21] <Geth> ¦ rakudo: As jnthn pointed out in M#2540

[14:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fecfb22d70

[14:23] <jnthn> Note that we should still fix the SEGV at MoarVM leve too

[14:23] <jnthn> *level

[14:25] <Geth> ¦ roast: cf92a15059 | (Elizabeth Mattijsen)++ | S03-buf/write-int.t

[14:25] <Geth> ¦ roast: Add tests for write-uint128

[14:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cf92a15059

[14:37] <Geth> ¦ roast: 88a20c74f3 | (Elizabeth Mattijsen)++ | 3 files

[14:37] <Geth> ¦ roast: Add tests for calling read/write-int/num on type object

[14:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/88a20c74f3

[15:01] <timotimo> do these functions have bounds checks now, btw? they didn't just before it was merged i think

[15:04] <jnthn> m: say 4.25 / 5.31

[15:04] <camelia> rakudo-moar fecfb22d7: OUTPUT: «0.800377␤»

[15:05] *** Ulti_ is now known as Ulti

[15:06] <dogbert2_> jnthn: opt ?

[15:06] <jnthn> Yup

[15:06] <jnthn> If spectest passes :)

[15:07] <dogbert2_> very cool

[15:07] <lizmat> m: blob8.new.read-int8(0)

[15:07] <camelia> rakudo-moar fecfb22d7: OUTPUT: «MVMArray: read_buf out of bounds offset 0 start 0 elems 0 count 1␤  in block <unit> at <tmp> line 1␤␤»

[15:07] <lizmat> timotimo: ^^^ does that answer your question?

[15:11] <Geth> ¦ rakudo: e747b19a79 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[15:11] <Geth> ¦ rakudo: Avoid repeated PseudoStash creation in regexes

[15:11] <Geth> ¦ rakudo: 

[15:11] <Geth> ¦ rakudo: If we do something like:

[15:11] <Geth> ¦ rakudo: 

[15:11] <Geth> ¦ rakudo:         my $r = q|\d+|;

[15:11] <Geth> ¦ rakudo:         "asdf123fdsa321" ~~ /<$r>/ for ^300_000;

[15:11] <Geth> ¦ rakudo: 

[15:11] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[15:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e747b19a79

[15:15] <timotimo> good :)

[15:15] <timotimo> m: blob8.new(1).read-int32()

[15:15] <camelia> rakudo-moar fecfb22d7: OUTPUT: «Too few positionals passed; expected 2 or 3 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[15:15] <timotimo> m: blob8.new(1).read-int32(0)

[15:15] <camelia> rakudo-moar fecfb22d7: OUTPUT: «MVMArray: read_buf out of bounds offset 0 start 0 elems 1 count 4␤  in block <unit> at <tmp> line 1␤␤»

[15:15] <timotimo> m: blob8.new(1).read-int32(-1)

[15:15] <camelia> rakudo-moar fecfb22d7: OUTPUT: «MVMArray: read_buf out of bounds offset -1 start 0 elems 1 count 4␤  in block <unit> at <tmp> line 1␤␤»

[15:19] <lizmat> afk for the rest of today and parts of tomorrow&

[15:19] *** lizmat left
[15:26] *** robertle joined
[15:27] *** p6bannerbot sets mode: +v robertle

[15:35] *** pyrimidine joined
[15:36] *** p6bannerbot sets mode: +v pyrimidine

[15:38] *** cognominal joined
[15:38] *** p6bannerbot sets mode: +v cognominal

[15:56] <Geth> ¦ rakudo: adb85609c8 | (Jonathan Worthington)++ | src/core/Match.pm6

[15:56] <Geth> ¦ rakudo: Bind a lexical to avoid it vivifying into a Scalar

[15:56] <Geth> ¦ rakudo: 

[15:56] <Geth> ¦ rakudo: This saves an allocation per match object creation; not much, but we

[15:56] <Geth> ¦ rakudo: could do with all the help we can get on this area.

[15:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/adb85609c8

[15:56] <Geth> ¦ rakudo: 91fd7cf8b2 | (Jonathan Worthington)++ | src/core/Match.pm6

[15:56] <Geth> ¦ rakudo: Minor cleanup bringing decl and bind together

[15:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/91fd7cf8b2

[15:57] <Geth> ¦ rakudo: f18432ea32 | (Jonathan Worthington)++ | src/core/Regex.pm6

[15:57] <Geth> ¦ rakudo: Don't do method lookups into a variable

[15:57] <Geth> ¦ rakudo: 

[15:57] <Geth> ¦ rakudo: It's more efficient just to quote the name here; then spesh can see

[15:57] <Geth> ¦ rakudo: it's a normal method call and do specialization linking or inlining

[15:57] <Geth> ¦ rakudo: without an extra guard. With the variable, it has to do an extra gurad,

[15:57] <Geth> ¦ rakudo: which is cheap, but not free.

[15:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f18432ea32

[15:57] <Geth> ¦ rakudo: 6c2f3c8346 | (Jonathan Worthington)++ | src/core/Regex.pm6

[15:57] <Geth> ¦ rakudo: Use a single Braid for matches that don't need one

[15:57] <Geth> ¦ rakudo: 

[15:57] <Geth> ¦ rakudo: Simple regex matches simply don't need a Braid at all, so just make

[15:57] <Geth> ¦ rakudo: a single one per time we run Perl 6 and re-use it. It's a percent or

[15:57] <Geth> ¦ rakudo: so off a program doing a simple regex match in a hot loop.

[15:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6c2f3c8346

[16:11] *** cognominal left
[16:13] *** synopsebot joined
[16:13] *** ChanServ sets mode: +v synopsebot

[16:14] *** p6bannerbot sets mode: +v synopsebot

[16:26] *** sivoais joined
[16:26] *** p6bannerbot sets mode: +v sivoais

[16:34] *** dogbert11 left
[16:49] <lucasb> m: (my int $x)++; say $x

[16:49] <camelia> rakudo-moar 6c2f3c834: OUTPUT: «1␤»

[16:49] <lucasb> m: (my int $x = 0)++; say $x

[16:49] <camelia> rakudo-moar 6c2f3c834: OUTPUT: «Cannot resolve caller postfix:<++>(BOOTInt); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤    (Int:D $a is rw)␤␤The following do not match for other reasons:␤    (Bool:D $a is rw)␤    (Bool:U…»

[16:55] <lucasb> ----- :)

[16:55] <lucasb> m: say my int8 $x = 127; say $x++; say $x

[16:55] <camelia> rakudo-moar 6c2f3c834: OUTPUT: «127␤-129␤-128␤»

[16:55] <lucasb> m: say my int16 $x = 32767; say $x++; say $x

[16:55] <camelia> rakudo-moar 6c2f3c834: OUTPUT: «32767␤-32769␤-32768␤»

[16:58] <lucasb> both bugs, right?

[17:07] <jnthn> That's curious indeed

[17:12] <jnthn> (And yeah, look like bugs to me)

[17:19] <AlexDaniel> good news! Only one issue with modules:

[17:19] <AlexDaniel> Crypt::RC4 – Fail, Bisected: dd2af90cca8e1df56e8a770c99471414173215ef

[17:19] <Geth> ¦ rakudo: 62243cd93a | (Jonathan Worthington)++ | src/core/Match.pm6

[17:19] <Geth> ¦ rakudo: Avoid a throw-away cursor per <$rx> interpolation

[17:19] <Geth> ¦ rakudo: 

[17:19] <Geth> ¦ rakudo: This is worth at least 5% on a benchmark doing such interpolations in

[17:19] <Geth> ¦ rakudo: a loop.

[17:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/62243cd93a

[17:20] <AlexDaniel> https://gist.github.com/AlexDaniel/eb6eb7c42244081fcaace4965ec2b2e1

[17:24] <Geth> ¦ rakudo: 01c56b484c | (Jonathan Worthington)++ | src/core/Regex.pm6

[17:24] <Geth> ¦ rakudo: Re-use a "fail cursor" in simple regex matches

[17:24] <Geth> ¦ rakudo: 

[17:24] <Geth> ¦ rakudo: This saves at least 5% off a program doing regex matches in a tight

[17:24] <Geth> ¦ rakudo: loop, like:

[17:24] <Geth> ¦ rakudo: 

[17:24] <Geth> ¦ rakudo:     "asdf123fdsa321" ~~ /\d+/ for ^300_000

[17:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/01c56b484c

[17:28] <jnthn> AlexDaniel: Looking at the error, it's quite possibly just exposing a bug in the module

[17:28] <AlexDaniel> that's correct

[17:30] <jnthn> Well, there's a few regexy speedups, anyways

[17:31] <jnthn> m: say 3.87 / 5.31

[17:31] <camelia> rakudo-moar 6c2f3c834: OUTPUT: «0.728814␤»

[17:32] <jnthn> I've now not only made up for the performance regression in https://github.com/rakudo/rakudo/issues/2537 but made it probably 15% faster than it was before the issue :

[17:32] <jnthn> And got some speedups on regexes generally :)

[17:36] <AlexDaniel> 	    my $sy := $!y < 0 ?? @!state[*+$!y] !! @!state[$!y];

[17:36] <AlexDaniel> I guess that works

[17:37] <AlexDaniel> jnthn: oh wow, nice!

[17:47] <masak> jnthn++

[17:47] <yoleaux> 07:15Z <jmerelo> masak: you're scheduled on the 16th, everything coming up good?

[17:47] <AlexDaniel> OK, PR sent https://github.com/p6-pdf/Crypt-RC4-p6/pull/1/files

[17:47] <masak> .tell jmerelo yup. :)

[17:47] <yoleaux> masak: I'll pass your message to jmerelo.

[17:48] <masak> wow, people are admirably curious about advent post status this year :)

[17:48] <masak> not at all a bad thing, mind you. I might've forgotten. I hadn't, but I might've.

[17:52] <lucasb> R#2541

[17:52] <synopsebot> R#2541 [open]: https://github.com/rakudo/rakudo/issues/2541 Post-incrementing native integers across overflow boundary

[17:54] <lucasb> for the first bug, camelia says postfix:<++>(BOOTInt), but locally I get postfix:<++>(Int)

[17:56] <Geth> ¦ nqp: 3fe871ca16 | (Jonathan Worthington)++ | src/QRegex/Cursor.nqp

[17:56] <Geth> ¦ nqp: Allow a fail cursor to be provided in !cursor_init

[17:56] <Geth> ¦ nqp: 

[17:56] <Geth> ¦ nqp: Which will let us avoid the allocation of one every single time a

[17:56] <Geth> ¦ nqp: regex is applied. (When we're applying simple regexes many times, the

[17:56] <Geth> ¦ nqp: setup cost is a significant factor.)

[17:56] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3fe871ca16

[17:57] *** cognominal joined
[17:57] <jnthn> oops, didn't notice I got an error when pushing that :)

[17:57] *** p6bannerbot sets mode: +v cognominal

[18:01] <b2gills> jnthn: Looking at the past few changes, I'm wondering if where the two latest have `.'!cursor_start_cur'()` if it shouldn't be `.'!cursor_start_fail'()`. (I actually have no idea what it should be)

[18:02] <jnthn> b2gills: No, it's correct; !cursor_start_fail is just an accessor for the very thing we're setting up here :)

[18:02] <b2gills> Ok just checking

[18:03] <AlexDaniel> releasable6: status

[18:03] <releasable6> AlexDaniel, Next release in ≈2 days and ≈0 hours. 4 blockers. 20 out of 62 commits logged (⚠ 2 warnings)

[18:03] <releasable6> AlexDaniel, Details: https://gist.github.com/bb3dd6774b0c7d9af15596c92603a572

[18:04] <lucasb> R#2542

[18:04] <synopsebot> R#2542 [open]: https://github.com/rakudo/rakudo/issues/2542 Cannot assign and increment a native integer in the same expression

[18:04] <AlexDaniel> what's going on in R#2520? Anybody has any idea?

[18:04] <synopsebot> R#2520 [open]: https://github.com/rakudo/rakudo/issues/2520 [⚠ blocker ⚠] Trace traps and double frees when building Rakudo

[18:05] <lucasb> ^^ same thing happens for native 'num's (#2542)

[18:07] *** cognominal left
[18:07] *** cognominal joined
[18:08] *** p6bannerbot sets mode: +v cognominal

[18:10] <jnthn> AlexDaniel: Well, `cur_frame = (MVMFrame *) 0x33` suggests that either we had a totally bogus cur_frame pointer there. How that could happen? No idea, from the info available.

[18:10] <jnthn> I've no idea what influence OpenBSD could have on things to cause such a failure mode either.

[18:11] <Geth> ¦ roast: 6f2f86cb2a | (Brad Gilbert)++ (committed using GitHub Web editor) | S03-buf/read-int.t

[18:11] <Geth> ¦ roast: Fix copy-pasta in test descriptions of read-int.t

[18:11] <Geth> ¦ roast: 

[18:11] <Geth> ¦ roast: The previous change added tests for `read-int` called on type objects.

[18:11] <Geth> ¦ roast: It called the methods with `0` but the descriptions had a `-1` like the tests that followed them.

[18:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6f2f86cb2a

[18:12] <jnthn> It'd be curious to see the stack trace for the non-JIT issue too, but even then, I'm not sure it'd tell me enough to know what the problem is.

[18:14] * jnthn afk

[18:15] *** cognominal left
[18:17] <b2gills> jnthn: OpenBSD writes gibberish into data when it gets freed. So it is probably a use after free bug

[18:20] <b2gills> Or a use before initialization bug.

[18:44] *** cognominal joined
[18:45] *** p6bannerbot sets mode: +v cognominal

[19:16] *** cognominal left
[19:45] *** cognominal joined
[19:45] <Geth> ¦ nqp: 3fe17a6838 | (Stefan Seifert)++ | 6 files

[19:45] <Geth> ¦ nqp: Rebootstrap for correct signature of (read|write)(u?int|num) ops

[19:45] <Geth> ¦ nqp: 

[19:45] <Geth> ¦ nqp: The offset argument was specified as uint when it should have been an int.

[19:45] <Geth> ¦ nqp: Fixing that requires a rebootstrap to avoid bytecode validator errors.

[19:45] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3fe17a6838

[19:46] *** p6bannerbot sets mode: +v cognominal

[19:52] <gfldex> I'm getting segfaults with This is Rakudo version 2018.11-62-g01c56b484 built on MoarVM version 2018.11-33-gee6ea722c

[19:59] <gfldex> The chance to crash is not that high. The script is thread heavy and needs to run a few seconds before it segfaults.

[20:11] *** robertle left
[20:26] <lucasb> gfldex: is it a self-contained script? can you share it?

[20:37] <jnthn> b2gills: I considered that, but then probably ASAN or Valgrind would show such things up, and I think they're clean (though worth checking)

[20:39] <b2gills> Maybe there is a bug in code that doesn't get compiled by ASAN or Valgrind, but gets called by that code.

[21:06] *** cognominal left
[21:06] *** cognominal joined
[21:07] *** p6bannerbot sets mode: +v cognominal

[21:11] *** cognominal left
[21:14] <gfldex> lucasb: sadly not and with coredumps on it wont crash :-/

[21:21] *** llfourn joined
[21:21] *** p6bannerbot sets mode: +v llfourn

[21:42] *** cognominal joined
[21:43] *** p6bannerbot sets mode: +v cognominal

[22:26] *** cognominal left
[22:27] *** cognominal joined
[22:28] *** p6bannerbot sets mode: +v cognominal

[22:32] *** cognominal left
[23:06] *** cognominal joined
[23:07] *** p6bannerbot sets mode: +v cognominal

[23:39] *** cognominal left
