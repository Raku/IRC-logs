[00:00] <MasterDuke> benchable6: 2017.01,2017.06,2018.01,2018.06,HEAD my $i; while $i++ < 5_000_000 {}

[00:00] <benchable6> MasterDuke, starting to benchmark the 5 given commits

[00:00] <benchable6> MasterDuke, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[00:01] <MasterDuke> hm, it should have said the initial times it found...

[00:02] <timotimo> was it too long?

[00:02] <benchable6> MasterDuke, https://gist.github.com/d47662062c49c2d20ea4751cb7f440fb

[00:02] <MasterDuke> oh, right, might only do that if there are less than 5 commits given initially

[00:03] <MasterDuke> benchable6: 2017.01,2017.06,2018.01,2018.06,HEAD my $i; while ++$i < 5_000_000 {}

[00:03] <benchable6> MasterDuke, starting to benchmark the 5 given commits

[00:03] <benchable6> MasterDuke, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[00:04] <benchable6> MasterDuke, https://gist.github.com/1f5f9e4568f25276eb8bb635fcf4db60

[00:05] <MasterDuke> huh, very different looking graph

[00:05] <Geth> ¦ rakudo: jmaslak++ created pull request #2123: Add contributor information

[00:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2123

[00:05] <timotimo> wow.

[00:05] <MasterDuke> back in a bit &

[00:06] <timotimo> i wonder if my patch would bring ++$i back down to what it used to be

[00:06] <timotimo> same for $i++, but there it isn't as dramatic

[00:08] <Geth> ¦ rakudo: 4ee71ece1d | (Joelle Maslak)++ | CREDITS

[00:08] <Geth> ¦ rakudo: Add contributor information

[00:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4ee71ece1d

[00:08] <Geth> ¦ rakudo: 9d1e624ae3 | (Zoffix Znet)++ (committed using GitHub Web editor) | CREDITS

[00:08] <Geth> ¦ rakudo: Merge pull request #2123 from jmaslak/joelle-contributor

[00:08] <Geth> ¦ rakudo: 

[00:08] <Geth> ¦ rakudo: Add contributor information

[00:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9d1e624ae3

[00:24] *** x[LGWs4x4i]uG2N0 left
[00:24] *** reppie joined
[00:30] *** lizmat left
[00:33] *** fake_space_whale joined
[02:21] *** reppie is now known as x[LGWs4x4i]uG2N0

[02:29] <MasterDuke> i'm seeing a consistent fail on t/04-nativecall/02-simple-args.t when MoarVM is built with clang

[02:29] <MasterDuke> not ok 11 - passed uint16 0xFFFE # Failed test 'passed uint16 0xFFFE' # at t/04-nativecall/02-simple-args.t line 72 # expected: '11' #      got: '0'

[02:53] *** benjikun left
[03:09] <zostay> AlexDaniel: re: Hash::MultiValue testing .perl, I'd kind of like .perl to actually output the right sort of thing, how would you recommend testing that instead?

[03:10] <zostay> the reason the test is failing is because .perl being called on Pair is outputting `$(:x(42))` when it previously output just `:x(42)`

[03:16] *** benjikun joined
[04:09] *** undersightable6 joined
[04:23] *** Zoffix joined
[04:24] <Zoffix> zostay: A lot of core .perl isn't specced to return a particular string. The only requirement is it returns a string that you can .EVAL to the equivalent object that you .perl'ed. So the right way to test is `is-deeply $obj.perl.EVAL, $obj`

[04:27] <Zoffix> zostay: and the reason it was putting those as $(:42foo) is because those pairs are containerized and before I believe it was impossible to containerize them or something. In either case, the commit that brought that change was reverted: https://github.com/rakudo/rakudo/commit/b5a7439838

[04:27] <Zoffix> zostay: but you still shouldn't test exact string of .perl

[04:32] <Zoffix> .tell zostay http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-07-24#l40

[04:32] <yoleaux> Zoffix: I'll pass your message to zostay.

[04:33] *** Zoffix left
[04:45] *** Kaiepi left
[06:15] *** fake_space_whale left
[06:18] *** robertle joined
[06:25] *** ufobat joined
[07:02] <[Tux]> Rakudo version 2018.06-245-g9d1e624ae - MoarVM version 2018.06-313-gebf0464e0

[07:02] <[Tux]> csv-test-xs-20      0.431 -  0.451

[07:02] <[Tux]> test-t --race       0.969 -  1.010

[07:02] <[Tux]> csv-ip5xs           1.071 -  1.162

[07:02] <[Tux]> test-t              2.288 -  2.307

[07:02] <[Tux]> csv-ip5xs-20        8.330 -  8.493

[07:02] <[Tux]> test                9.902 - 10.519

[07:02] <[Tux]> test-t-20 --race   12.801 - 13.009

[07:02] <[Tux]> csv-parser         24.607 - 24.960

[07:02] <[Tux]> test-t-20          39.800 - 39.984

[08:35] *** lizmat joined
[08:36] <lizmat> Files=1246, Tests=76415, 380 wallclock secs (16.40 usr  5.67 sys + 2676.40 cusr 255.91 csys = 2954.38 CPU)

[08:51] *** diakopter left
[08:57] *** a3f_ left
[09:39] *** robertle left
[09:41] <Geth> ¦ nqp/truffle: 987a27004b | (Paweł Murias)++ | 2 files

[09:41] <Geth> ¦ nqp/truffle: [truffle] Move deserialization code into the class

[09:41] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/987a27004b

[09:47] *** camelia left
[09:47] *** lizmat left
[09:48] *** camelia joined
[09:50] *** ChanServ sets mode: +v camelia

[10:03] *** Kaiepi joined
[10:04] *** a3f_ joined
[10:05] *** squashable6 left
[10:05] *** squashable6 joined
[10:09] *** pmurias joined
[10:20] <Geth> ¦ nqp/truffle: b64648d873 | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/NQPToBooleanNode.java

[10:20] <Geth> ¦ nqp/truffle: [truffle] Use @Specialization when boolifing stuff

[10:20] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/b64648d873

[10:30] *** squashable6 left
[11:20] *** benjikun left
[11:21] *** benjikun joined
[11:24] <Geth> ¦ nqp/truffle: 0817412c16 | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/NQPNodeWithBoolification.java

[11:24] <Geth> ¦ nqp/truffle: [truffle] Missing part of moving boolification to specialization

[11:24] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/0817412c16

[11:24] <Geth> ¦ nqp/truffle: fef920ced7 | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/expression/NQPSmartStringifyNode.java

[11:24] <Geth> ¦ nqp/truffle: [truffle] Use specialization when smart stringifiying

[11:24] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/fef920ced7

[11:27] <AlexDaniel> zostay: Hash::MultiValue should be fine on HEAD because lizmat++ reverted the commit: https://github.com/rakudo/rakudo/commit/b5a74398386e6dd51949825c38a531ca4345f858

[11:27] <yoleaux> 03:58Z <zostay> AlexDaniel: Something weird is going on in Test::Path::Router... it has a `use Test` at the top, but if I insert a `dd Test::output()` inside a sub, e.g., `sub mapping-is`, I get `Could not find symbol '&output'`... that makes no sense to me

[11:27] <yoleaux> 04:00Z <zostay> AlexDaniel: that test package does some unusual things to cope with the fact that there's no good Test2::API/Test::Builder/thing to build tests that cooperate with each other yet (something I'm looking into along with a bajillion other things)

[11:29] <AlexDaniel> zostay: that being said, yes, you shouldn't be testing .perl :)

[11:30] <AlexDaniel> zostay: you also test .gist, and I think that's fragile too :)

[11:36] <Geth> ¦ nqp: 3a4cbe0423 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[11:36] <Geth> ¦ nqp: [MoarVM Bump] Brings 4 commits

[11:36] <Geth> ¦ nqp: 

[11:36] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.06-310-gba906c429...2018.06-314-g4199a9564

[11:36] <Geth> ¦ nqp: 4199a9564 Enable gc_free of MVMContext

[11:36] <Geth> ¦ nqp: ebf0464e0 be extra careful about prev

[11:36] <Geth> ¦ nqp: 389a3a10f Make sure output of spesh resolve gets optimized, too

[11:36] <Geth> ¦ nqp: f4662285d Don't use 32-bit unaligned reads in SipHash implementation

[11:36] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3a4cbe0423

[11:36] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-310-gba906c429...2018.06-314-g4199a9564

[11:36] <Geth> ¦ rakudo: 9e752718b9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[11:36] <Geth> ¦ rakudo: [NQP Bump] Brings 2 commits

[11:36] <Geth> ¦ rakudo: 

[11:36] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.06-70-gcaf545127...2018.06-72-g3a4cbe042

[11:36] <Geth> ¦ rakudo: 3a4cbe042 [MoarVM Bump] Brings 4 commits

[11:36] <Geth> ¦ rakudo: 15c977471 unfudge test, co #274 (#485)

[11:36] <synopsebot> RAKUDO#274 [closed]: https://github.com/rakudo/rakudo/pull/274 Eliminate a been_tapped race.

[11:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9e752718b9

[11:36] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-70-gcaf545127...2018.06-72-g3a4cbe042

[13:05] *** MasterDuke left
[13:47] *** skids joined
[13:48] *** robertle joined
[13:59] *** diakopter joined
[14:18] <zostay> AlexDaniel: it is fragile, but I still have to have some way of guaranteeing that .perl/.gist output something that makes sense... clearly $(:a(2)), $(:b(3)), ... doesn't make sense and if something changes in Perl such that that becomes the normal outcome of .map(*.perl) on a list of Pair, then I would want to fix that because it is a real bug.

[14:18] <yoleaux> 04:32Z <Zoffix> zostay: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-07-24#l40

[14:20] <zostay> So, I suppose the test I should have is .perl.EVAL and see if the result is the same as the input.

[14:37] *** fake_space_whale joined
[15:19] *** samcv left
[15:34] *** samcv joined
[15:44] *** lizmat joined
[15:56] *** ufobat left
[15:59] *** brrt joined
[16:12] *** Ven`` joined
[16:25] *** robertle left
[16:27] *** fake_space_whale left
[16:38] *** samcv left
[16:40] *** samcv joined
[16:52] *** brrt left
[17:27] *** Ven`` left
[18:09] *** dogbert17 left
[18:29] *** dct joined
[18:31] <lizmat> hmmm... apparently you cannot make a module Array::Foo and precompile it :-(

[18:33] <lizmat> ===SORRY!===

[18:33] <lizmat> Object does not exist in serialization context

[18:34] <lizmat> apparently this is some clash with Array::

[18:34] <lizmat> m: dd Array::

[18:34] <camelia> rakudo-moar 9e752718b: OUTPUT: «{:dim2role((Array::ShapedArray, Array::Shaped1Array, Array::Shaped2Array, Array::Shaped3Array))}␤»

[18:50] <Geth> ¦ rakudo: a71e370bb7 | (Elizabeth Mattijsen)++ | src/core/ShapedNArray.pm6

[18:50] <Geth> ¦ rakudo: Allow Array:: to be used as a top level namespace in modules

[18:50] <Geth> ¦ rakudo: 

[18:50] <Geth> ¦ rakudo: This basically moves the dim2role lookup from compile time to run time.

[18:50] <Geth> ¦ rakudo: For some reason, having this lookup at compile time, caused Array:: to

[18:50] <Geth> ¦ rakudo: be somehow special wrt serialization contexts.

[18:50] <Geth> ¦ rakudo: 

[18:50] <Geth> ¦ rakudo: This removes the error:

[18:50] <Geth> ¦ rakudo: ===SORRY!===

[18:50] <Geth> ¦ rakudo: Object does not exist in serialization context

[18:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a71e370bb7

[19:12] *** ufobat joined
[20:56] *** dct left
[21:06] *** pmurias left
[21:19] *** skids left
[22:52] *** MasterDuke joined
[23:14] *** dct joined
[23:58] *** j3nnn1 left
