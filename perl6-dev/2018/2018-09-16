[00:00] <timotimo> we're not testing. this is serious.

[00:06] <timotimo> i didn't time how much exactly it took while i was profiling, but it's spending like 4 seconds in GC

[00:07] <timotimo> i see it taking a whole load of closures

[00:11] <timotimo> if zef didn't use "exit", the profiler might not get quite as confused

[00:12] <timotimo> MAIN_HELPER MAIN run-script load load load load load <anon>

[00:12] <timotimo> weird %)

[00:13] *** Kaiepi joined
[00:14] *** p6bannerbot sets mode: +v Kaiepi

[00:17] *** lizmat left
[00:17] *** pokk19 joined
[00:20] *** pokk19 left
[00:24] <timotimo> the main moar process calls stat 1163 times, fun.

[00:25] <AlexDaniel> timotimo: that doesn't sound like much?

[00:29] <timotimo> looks like every file gets statted four times, at least the ones under share/perl6/site/dist/

[00:30] <timotimo> it also stats a whole bunch of precomp files

[00:30] <AlexDaniel> isn't it normal?

[00:31] <AlexDaniel> I mean if you run something like zef --help, wouldn't it stat a bunch of stuff also?

[00:31] <AlexDaniel> just to see if zef and all of its modules are precompiled right and stuff like that

[00:33] <timotimo> i don't actually know enough about that

[00:33] <AlexDaniel> but anyway, why calling stat 1000 times is a problem?

[00:34] <AlexDaniel> I expect any 1000 of filesystem operations to take absolutely no time

[00:34] <timotimo> yeah, just like 2 seconds, so it's not our culprit at least

[00:34] <AlexDaniel> and by no time I mean in context of 10 seconds that I see

[00:34] <timotimo> er, 8 seconds?

[00:35] <timotimo> no, those must be msecs

[00:35] <timotimo> . is not thousands separator %)

[00:38] <timotimo> i'd really like to know who calls exit there

[00:39] <samcv> [Tux]: when you're around pm me about utf16 stuff

[00:40] <AlexDaniel> timotimo: https://github.com/ugexe/zef/blob/c07448cd20b61bc9809fed12fb2a8728679bbb32/lib/Zef/CLI.pm6#L183

[00:41] <AlexDaniel> timotimo: you can comment it out

[00:41] <timotimo> TYVM

[00:44] <AlexDaniel> hm, interesting

[00:44] <AlexDaniel> so returning something from MAIN doesn't use that return value as exit code

[00:45] <timotimo> grr, it's still calling exit somehow

[00:45] <timotimo> ah, abort also exits

[00:45] <AlexDaniel> so you have to use `exit` to abruptly end your program just so that you can have the exit code that you need

[00:46] <timotimo> IMO, it shouldn't exit with what you return

[00:46] <timotimo> it should exit 0 if it exits fine and something else if you throw

[00:47] <AlexDaniel> throw what?

[00:47] <AlexDaniel> I want to exit with exit code 5, how?

[00:47] <AlexDaniel> without throwing LEAVE and other cleanup into a dumpster

[00:47] <timotimo> that's when you'd exit 5

[00:47] <AlexDaniel> well that sucks

[00:47] <timotimo> hmm.

[00:47] <timotimo> ISTR some way to give an exception an exit code along with it

[00:48] <timotimo> was that a thing?

[00:48] <timotimo> you can teach exit what to do

[00:48] <timotimo> m: sub test { LEAVE say "exited test"; blorp }; sub blorp { LEAVE say "exited blorp"; exit 5 };  test

[00:48] <camelia> rakudo-moar b1a07f093: ( no output )

[00:48] <timotimo> mhm

[00:49] <AlexDaniel> I mean, someone will probably argue that the solution to this is to have no LEAVE blocks in your MAIN

[00:49] <AlexDaniel> and instead have them somewhere else

[00:49] <timotimo> something is *still* calling exit

[00:50] <AlexDaniel> m: sub real-MAIN-right-here { LEAVE say ‚Äòfoo‚Äô; 2 + 2 }; sub MAIN { real-MAIN-right-here; exit 5 }

[00:50] <camelia> rakudo-moar b1a07f093: OUTPUT: ¬´foo‚ê§¬ª

[00:51] <AlexDaniel> timotimo: are you sure you're using the modified file?

[00:52] <timotimo> i have sensible timings!!

[00:52] <AlexDaniel> \o/

[00:53] <MasterDuke> timotimo: heh, couldn't you use your profiler output to tell you where exit was being called from?

[00:54] <timotimo> i was

[00:54] <timotimo> i see 4 seconds of json parsing

[00:54] <timotimo> if i see it correctly, parsing 150 json documents

[00:54] <AlexDaniel> timotimo: using what? JSON::Fast?

[00:55] <timotimo> no, rakudo's built-in one

[00:55] <timotimo> 700ms of Zef::Identity parsing

[00:55] <AlexDaniel> hm, what are these 150 json files‚Ä¶

[00:56] <AlexDaniel> if it was 1000 I'd understand

[00:57] <timotimo> debugserver should be able to show me

[00:57] <timotimo> but i'd probably like to go to bed now

[00:57] <timotimo> do you want my sql file to look at it with the profiler frontend?

[00:57] <AlexDaniel> I'm going to bed now too

[00:57] <timotimo> SGTM

[00:57] <timotimo> rest well!

[00:57] <AlexDaniel> but

[00:57] <timotimo> you may have to reactivate me tomorrow

[00:57] <AlexDaniel> https://github.com/ugexe/zef/blob/master/lib/Zef/Identity.pm6#L10

[00:58] <AlexDaniel> this just needs to be a .split(‚Äò:‚Äô) or something like that

[00:58] <MasterDuke> timotimo: can you put your sql file somewhere?

[00:59] <timotimo> sure

[00:59] *** shubjero16 joined
[00:59] <timotimo> http://hack.p6c.org/~timo/zefnoop.sqlite3

[00:59] <timotimo> 4dd64cffb0a4d8a8ce789fb015048951056586fe153a8d044964aa8beee191e4  /tmp/zefnoop.sql

[00:59] <timotimo> sha256sum

[00:59] *** shubjero16 left
[00:59] <AlexDaniel> or maybe just optimizing the grammar should do

[01:00] <AlexDaniel> token name { <token>+ }; token token { <-restricted> }; token restricted { < : > }

[01:00] <timotimo> i don't know if it's that grammar or the other one

[01:00] <AlexDaniel> all these hoops to jump through just to match anything but :

[01:00] <timotimo> that is taking time

[01:01] <timotimo> $id !~~ /':ver' | ':auth' | ':api' | ':from'/

[01:01] <timotimo> no clue if that path is taken at all anyway

[01:04] * AlexDaniel üí§

[01:14] *** MasterDuke left
[01:24] *** Virtual-Potato joined
[01:29] *** Virtual-Potato left
[02:01] *** MasterDuke joined
[02:01] *** p6bannerbot sets mode: +v MasterDuke

[02:01] *** MasterDuke left
[02:01] *** MasterDuke joined
[02:01] *** herbert.freenode.net sets mode: +v MasterDuke

[02:01] *** p6bannerbot sets mode: +v MasterDuke

[02:02] *** Kaiepi left
[02:02] *** Kaiepi joined
[02:03] *** p6bannerbot sets mode: +v Kaiepi

[02:48] *** MasterDuke left
[04:02] *** AlexDani` joined
[04:02] *** p6bannerbot sets mode: +v AlexDani`

[05:30] *** hankache joined
[05:31] *** p6bannerbot sets mode: +v hankache

[05:32] *** hankache left
[05:32] *** hankache joined
[05:33] *** p6bannerbot sets mode: +v hankache

[05:56] <samcv> i just posted this https://github.com/MoarVM/MoarVM/issues/966 a request for discussion about how our utf16 works. since it basically has many answered questions since we only supported Str.encode or Buf.decode, and not reading a file handle or writing to one

[05:57] <samcv> maybe i should post it in the perl6 issue tracker too?

[06:23] *** robertle joined
[06:24] *** p6bannerbot sets mode: +v robertle

[07:47] *** vigilant24 joined
[07:48] *** vigilant24 left
[07:48] *** ExtraCrispy joined
[07:49] *** p6bannerbot sets mode: +v ExtraCrispy

[08:01] *** lizmat joined
[08:02] *** p6bannerbot sets mode: +v lizmat

[08:02] <lizmat> Files=1252, Tests=76124, 334 wallclock secs (15.42 usr  5.00 sys + 2366.98 cusr 216.42 csys = 2603.82 CPU)

[08:07] *** hankache left
[08:14] <lizmat> .tell [Tux] https://github.com/MoarVM/MoarVM/issues/966

[08:14] <yoleaux> lizmat: I'll pass your message to [Tux].

[08:41] <Geth> ¬¶ rakudo: a4db33e72b | (Elizabeth Mattijsen)++ | 6 files

[08:41] <Geth> ¬¶ rakudo: Remove EmptySeq, in response to R#2281

[08:41] <Geth> ¬¶ rakudo: 

[08:41] <Geth> ¬¶ rakudo: This actually, surprisingly, reduces the .moarvm file by 2.5K

[08:41] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/a4db33e72b

[08:41] <synopsebot> R#2281 [open]: https://github.com/rakudo/rakudo/issues/2281 [6.d review] Problems with `EmptySeq`

[08:42] *** navs joined
[08:43] *** navs left
[08:45] <Geth> ¬¶ roast: 6360992678 | (Elizabeth Mattijsen)++ | S32-io/io-spec-unix.t

[08:45] <Geth> ¬¶ roast: Unfudge test fudged for R#2281

[08:45] <synopsebot> R#2281 [closed]: https://github.com/rakudo/rakudo/issues/2281 [6.d review] Problems with `EmptySeq`

[08:45] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/6360992678

[09:12] <[Tux]> Rakudo version 2018.08-108-ga4db33e72 - MoarVM version 2018.08-81-gff0fb63a4

[09:12] <[Tux]> csv-test-xs-20      0.426 -  0.432

[09:12] <[Tux]> test-t --race       0.862 -  0.922

[09:12] <[Tux]> csv-ip5xs           0.916 -  0.927

[09:12] <[Tux]> test-t              2.072 -  2.170

[09:12] <yoleaux> 08:14Z <lizmat> [Tux]: https://github.com/MoarVM/MoarVM/issues/966

[09:12] <[Tux]> csv-ip5xs-20        7.158 -  7.630

[09:12] <[Tux]> test                8.855 -  9.024

[09:12] <[Tux]> test-t-20 --race   11.197 - 14.179

[09:12] <[Tux]> csv-parser         23.135 - 24.424

[09:12] <[Tux]> test-t-20          37.081 - 39.067

[09:28] <samcv> o/ [Tux] 

[09:47] *** Kaiepi left
[09:50] *** Kaiepi joined
[09:51] *** p6bannerbot sets mode: +v Kaiepi

[09:52] *** Kaiepi left
[09:53] *** Kaiepi joined
[09:53] *** p6bannerbot sets mode: +v Kaiepi

[09:57] <nine> Oh boy, NQP defaulting to num sucks endlessly...

[09:58] <timotimo> yep

[09:58] <timotimo> did you see the branch to make it default to int?

[09:59] <nine> Yes, some time

[09:59] <nine> So how do I tell it that in @static_lex_values[4 * $i] the index ought to be an int?

[09:59] <nine> Getting MVMArray: atpos expected int register

[09:59] <timotimo> use nqp::atpos instead :x

[10:00] <timotimo> oh

[10:00] <timotimo> or nqp::mul_i(4, $i)

[10:00] <timotimo> or put the in-between into an int variable

[10:00] <nine> the int variable trick doesn't seem to work

[10:00] <timotimo> fucking hell.

[10:01] <nine> mul_i doesn't work

[10:01] <nine> atpos_i is good

[10:26] *** Kaiepi left
[10:27] *** Kaiepi joined
[10:28] *** p6bannerbot sets mode: +v Kaiepi

[10:29] *** Kaiepi left
[10:30] <timotimo> oh, but that's about whether you have an int array or an object array, not about the keys

[10:30] <timotimo> hmm.

[10:32] *** Kaiepi joined
[10:33] *** p6bannerbot sets mode: +v Kaiepi

[10:33] <nine> That's odd, because nqp::atpos does not work

[10:38] <lizmat> you where talking about problems with the index, no?

[10:38] <nine> That's what I assumed

[10:38] <lizmat> if so, nqp::atpos or nqp::atpos_i shouldn't make a difference as the suffix is about the *target*, no

[10:38] <lizmat> /

[10:38] <lizmat> ?

[10:40] <nine> According to my understanding. But maybe the error message is just misleading

[10:48] *** Kaiepi left
[10:49] <timotimo> nqp: my @a := nqp::list_i(1, 2, 3); say(nqp::atpos(@a, 1))

[10:49] <camelia> nqp-moarvm: OUTPUT: ¬´MVMArray: atpos expected int register‚ê§   at <tmp>:1  (<ephemeral file>:<mainline>)‚ê§ from gen/moar/stage2/NQPHLL.nqp:1675  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:eval)‚ê§ from gen/moar/stage2/NQPHLL.nqp:1914  (/home/camelia/rakudo-m-inst-1‚Ä¶¬ª

[10:49] <timotimo> nqp: my @a := nqp::list_i(1, 2, 3); say(nqp::atpos_i(@a, 1))

[10:49] <camelia> nqp-moarvm: OUTPUT: ¬´2‚ê§¬ª

[10:49] <timotimo> this is what i'm refering to

[10:50] <nine> And indeed: @!static_lex_values := nqp::list_i();

[10:51] <timotimo> oh

[10:51] <timotimo> your error message was this exactly

[10:51] <timotimo> m(

[10:51] <timotimo> i've given you the wrong advice completely

[10:52] *** Kaiepi joined
[10:52] *** p6bannerbot sets mode: +v Kaiepi

[10:56] *** AlexDani` is now known as AlexDaniel

[10:56] <nine> Darn...the operands from op_info does not seem to be available in NQP

[10:57] <timotimo> they aren't in that module you include with most of the info?

[10:59] <nine> Ah, I guess that's @MAST::Ops::values

[11:02] <nine> And I guess @MAST::Ops::offsets tells me where in that value list an op's arguments start

[11:04] <lizmat> hmmm... do we have a simple way to tell if something is a container ?

[11:04] <lizmat> *without* using NQP ?

[11:05] <AlexDaniel> timotimo: any news?

[11:05] <lizmat> if not, how about adding a Mu::CONTAINER(\a) { nqp::hllbool(nqp::iscont(a)) } ?

[11:05] <lizmat> or rather:

[11:05] <lizmat> if not, how about adding a Mu.CONTAINER(\SELF:) { nqp::hllbool(nqp::iscont(SELF)) } ?

[11:06] <AlexDaniel> nine: btw have you seen this discussion? Starting around here and going all the way to the next day: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-09-15#l540

[11:07] <lizmat> sub is-container(\it) { it.VAR.^name ne it.^name }   # feels rather hacky and sub-performant

[11:07] <AlexDaniel> TL;DR `time zef --dry --/test --/build install JSON::Fast` takes 10 seconds or maybe a bit less depending on the system

[11:08] <nine> AlexDaniel: no, missed that apparently

[11:11] <nine> 150 JSON files?

[11:11] <AlexDaniel> well, at least 150 calls to from-json I guess

[11:12] <AlexDaniel> that's as far as we managed to get yesterday, I thought maybe you know something :)

[11:12] <nine> Well I was pretty sure that almost all of that waiting time is JSON parsing

[11:13] <AlexDaniel> nine: ok, but what kind of json files?

[11:14] <nine> Personally, I'd probably just store that ecosystem info in an SQLite file. But 150 calls sounds more like it's parsing JSON of installed dists, too

[11:17] *** mgilles joined
[11:20] <Geth> ¬¶ roast: 95bb2232ee | (Zoffix Znet)++ | S16-io/words.t

[11:20] <Geth> ¬¶ roast: [v6.d REVIEW] Precisify :close on words

[11:20] <Geth> ¬¶ roast: 

[11:20] <Geth> ¬¶ roast: - Spec partial consumption of iterator leaves the handle in

[11:20] <Geth> ¬¶ roast:     open state

[11:20] <Geth> ¬¶ roast: - Spec consuming $limit items from iterator closes the handle

[11:20] <Geth> ¬¶ roast:     even before we got IterationEnd

[11:20] <Geth> ¬¶ roast: 

[11:20] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/b0c4a7a37

[11:20] *** mgilles left
[11:20] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/95bb2232ee

[11:21] *** lizmat left
[11:21] <AlexDaniel> hm

[11:21] <AlexDaniel> I don't think parsing json is a problem, but the way it does it is

[11:21] <AlexDaniel> so

[11:22] <AlexDaniel> I see 0.825388s + 0.63321996s for parsing both ecosystem files with JSON::Fast

[11:22] <nine> Not great, but also not terrible

[11:23] <AlexDaniel> if parallelized it'll be under 1 second, not terrible indeed

[11:23] <AlexDaniel> but

[11:23] <AlexDaniel> commenting out `use JSON::Fast`

[11:23] <AlexDaniel> 5.20290931s + 5.636712s

[11:24] *** lizmat joined
[11:24] <AlexDaniel> so Rakudo::Internals::JSON is that bad in terms of speed

[11:25] *** p6bannerbot sets mode: +v lizmat

[11:25] <lizmat> yeah, afaik it's only there for backward compatibility

[11:25] <lizmat> afk&

[11:25] <AlexDaniel> makes me wonder if zef can use JSON::Fast if it's available, and fallback to Rakudo::Internals::JSON

[11:25] <AlexDaniel> I do understand that the two are possibly incompatible, but still‚Ä¶

[11:26] <timotimo> how fast do we figure out if something is installed or not?

[11:26] <timotimo> i.e. how much does it cost to check for JSON::Fast if it isn't there?

[11:27] <AlexDaniel> IIRC relatively fast

[11:27] <timotimo> also, maybe there's a cheap 2x improvement somewhere inside rakudo's json parser

[11:27] <timotimo> for example, a fast path for strings that have no escapes in them

[11:28] <AlexDaniel> timotimo: ah actually, you don't need zef to check that

[11:28] <nine> I sure hope it's pretty damn fast afte all the time I spent optimizing our module loader :)

[11:28] <AlexDaniel> a `require` or something like that will do

[11:28] <timotimo> mhm

[11:28] *** Kaiepi left
[11:29] <timotimo> i'm still on moarvm with --optimize=0, lol

[11:30] <AlexDaniel> timotimo: any reason to hunt for 2x improvements when we can make it more than 6x as fast using JSON::Fast? :)

[11:30] <AlexDaniel> that will only affect the initial zef install when JSON::Fast is not available

[11:30] <timotimo> hmm.

[11:31] <AlexDaniel> once the user installs pretty much‚Ä¶ any module‚Ä¶ then it's guaranteed they'll have JSON::Fast :)

[11:31] <timotimo> i suppose being one of the most depended-on modules, it's not so bad to support it in zef, too, yeah

[11:31] * AlexDaniel looks at https://finanalyst.github.io/ModuleCitation/

[11:32] <timotimo> yeah

[11:32] *** Kaiepi joined
[11:32] <timotimo> feels weird to have made that %)

[11:32] <Geth> ¬¶ roast: ee937b866b | (Zoffix Znet)++ | packages/Test/Util.pm6

[11:32] <Geth> ¬¶ roast: Implement `group-of` helper routine

[11:32] <Geth> ¬¶ roast: 

[11:32] <Geth> ¬¶ roast: - Saves a line of typing when writing subtests

[11:32] <Geth> ¬¶ roast: - Ensures you always have a plan

[11:32] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/ee937b866b

[11:32] *** p6bannerbot sets mode: +v Kaiepi

[11:33] <Geth> ¬¶ roast: fdf1b1f521 | (Zoffix Znet)++ | S16-io/words.t

[11:33] <Geth> ¬¶ roast: Use new group-of helpers

[11:33] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/fdf1b1f521

[11:33] <nine> Speeding up rakudo's JSON parser would also help module installation directly

[11:33] <timotimo> it's also used for other stuff?

[11:34] <nine> rakudo wouldn't have a JSON parser if it wasn't used in rakudo, would it? :)

[11:34] <timotimo> inertia :P

[11:35] <nine> Actually I'm not sure if we parse JSON again during module installation. But it's definitely done for accessing %?RESOURCES

[11:36] <timotimo> so if you want to really slow, have lots of stuff in %?RESOURCES?

[11:36] <timotimo> and access it at run time? :)

[11:36] <AlexDaniel> but then, if over 35% of modules need it in the end, and if rakudo itself needs a json parser‚Ä¶ any reason not to have JSON::Fast in rakudo? :)

[11:36] <nine> Stuff in your META data in general

[11:37] <timotimo> or, you know, try runtime requiring JSON::Fast for inside usage?

[11:49] <Geth> ¬¶ nqp: 7559d37702 | (Tom Browder)++ (committed using GitHub Web editor) | src/HLL/Compiler.nqp

[11:49] <Geth> ¬¶ nqp: fix format

[11:49] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/7559d37702

[11:54] <AlexDaniel> tbrowder__: still looks misaligned to me

[11:54] <AlexDaniel> tbrowder__: https://screenshots.firefox.com/pqRlgDX5fQcAUQVk/github.com

[12:12] <Geth> ¬¶ roast: 40ab9e9f3b | (Zoffix Znet)++ | S16-io/lines.t

[12:12] <Geth> ¬¶ roast: [v6.d REVIEW] Precisify .lines tests

[12:12] <Geth> ¬¶ roast: 

[12:12] <Geth> ¬¶ roast: - Use is-eqv to spec return type properly

[12:12] <Geth> ¬¶ roast: - Spec pulling $limit items from iterator closes the handle

[12:12] <Geth> ¬¶ roast:     (i.e. we don't have to do one more pull for IterationEnd)

[12:12] <Geth> ¬¶ roast: 

[12:12] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/f3d1f6798

[12:12] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/40ab9e9f3b

[12:13] <Geth> ¬¶ roast: 8c89f86825 | (Zoffix Znet)++ | S16-io/words.t

[12:13] <Geth> ¬¶ roast: [v6.d REVIEW] Fix .words test

[12:13] <Geth> ¬¶ roast: 

[12:13] <Geth> ¬¶ roast: In earlier commit[^1], we specced that reading $limit elements

[12:13] <Geth> ¬¶ roast: closes the handle (without pulling once more for IterationEnd),

[12:13] <Geth> ¬¶ roast: however the commit had an error and used incorrect indices.

[12:13] <Geth> ¬¶ roast: 

[12:13] <Geth> ¬¶ roast: Fix to slice only first two items

[12:13] <Geth> ¬¶ roast: 

[12:13] <Geth> ¬¶ roast: [1] https://github.com/perl6/roast/commit/95bb2232ee

[12:13] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/8c89f86825

[12:18] <Geth> ¬¶ roast: c231666dec | (Zoffix Znet)++ | 2 files

[12:18] <Geth> ¬¶ roast: Fudge .lines/.words :close $limit tests

[12:18] <Geth> ¬¶ roast: 

[12:18] <Geth> ¬¶ roast: R#2283 https://github.com/rakudo/rakudo/issues/2283

[12:18] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/c231666dec

[12:18] <synopsebot> R#2283 [open]: https://github.com/rakudo/rakudo/issues/2283 [6.d review][IO] .lines/.words :close closes too late when $limit is specified

[12:18] *** Kaiepi left
[12:21] *** Kaiepi joined
[12:22] *** p6bannerbot sets mode: +v Kaiepi

[12:26] <tbrowder__> AlexDaniel: in web editor it looked ok, after editing, in.

[12:26] <AlexDaniel> the web editor sucks then

[12:27] <tbrowder__> in my chrome browser on ipad the ‚Äúmy‚Äù is hanging out one char to the left

[12:27] <AlexDaniel> the problem is tabs

[12:28] <tbrowder__> yeah, probably, but in orig source or githubs display of it?

[12:28] <AlexDaniel> https://screenshots.firefox.com/SbtlAZIWuM2DTLxx/null

[12:29] <tbrowder__> weird

[12:29] <AlexDaniel> IMO we shouldn't use tabs in the source code

[12:30] <tbrowder__> i agree, i thought xt did something about that

[12:30] <Geth> ¬¶ rakudo: lizmat self-assigned .lines/.words :close closes too late when $limit is specified https://github.com/rakudo/rakudo/issues/2283

[12:30] <AlexDaniel> only in doc repo

[12:31] <tbrowder__> afaik, my emacs fix earlier this year stopped tabs from my code

[12:31] <tbrowder__> i‚Äôll try to remember to not edit code with web editor, sorry

[12:32] <AlexDaniel> tbrowder__: tabs existed before your change

[12:32] <AlexDaniel> it seems like you added some spaces to make it align in the view of the web editor, and the right solution was to remove tabs first and then do that :)

[12:38] *** Kaiepi left
[12:42] *** Kaiepi joined
[12:42] *** p6bannerbot sets mode: +v Kaiepi

[12:49] *** Zoffix joined
[12:49] *** p6bannerbot sets mode: +v Zoffix

[12:50] <Zoffix> Just had a realization: for 6.d release, we'll likely have a Rakudo that passes a lot more tests on *nix than on Windows :/

[12:50] <Zoffix> S#320 (most recent failures are at the bottom)

[12:50] <synopsebot> S#320 [open]: https://github.com/perl6/roast/issues/320 Windows roast failures just before 2017.09 release

[12:51] *** jvoisin26 joined
[12:51] <Zoffix> Tons of IO tests, so I'm guessing lots of those are new IO Grant test that might've been written wrong.

[12:55] *** jvoisin26 left
[13:01] *** Zoffix left
[13:04] <Geth> ¬¶ roast: 5b51298828 | (Zoffix Znet)++ | S02-types/baghash.t

[13:04] <Geth> ¬¶ roast: [v6.d REVIEW] Don't spec BagHash.Str in tests not about that

[13:04] <Geth> ¬¶ roast: 

[13:04] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/8cd62dba8

[13:04] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/5b51298828

[13:12] <Geth> ¬¶ roast: e21d1022d3 | (Zoffix Znet)++ | 2 files

[13:12] <Geth> ¬¶ roast: [v6.d REVIEW] Use more appropriate test routines

[13:12] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/e21d1022d3

[13:22] *** Kaiepi left
[13:22] *** Kaiepi joined
[13:23] *** p6bannerbot sets mode: +v Kaiepi

[13:33] *** pmurias joined
[13:33] *** p6bannerbot sets mode: +v pmurias

[13:49] *** p6bannerbot joined
[13:49] *** ChanServ sets mode: +o p6bannerbot

[14:02] <Geth> ¬¶ roast: 445c3c50dc | (Zoffix Znet)++ | 2 files

[14:02] <Geth> ¬¶ roast: [v6.d REVIEW] Use is-eqv for Seq test in Set[Hash].roll

[14:02] <Geth> ¬¶ roast: 

[14:02] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/c4c10d506

[14:02] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/445c3c50dc

[14:04] <Geth> ¬¶ roast: 539f9bde06 | (Zoffix Znet)++ | 2 files

[14:04] <Geth> ¬¶ roast: [v6.d REVIEW] Appendicise Pair.new tests

[14:04] <Geth> ¬¶ roast: 

[14:04] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/a523aef60

[14:04] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/539f9bde06

[14:08] <Geth> ¬¶ roast: ebd8e2497d | (Zoffix Znet)++ | S16-io/put.t

[14:08] <Geth> ¬¶ roast: [v6.d REVIEW] Improve `put` tests

[14:08] <Geth> ¬¶ roast: 

[14:08] <Geth> ¬¶ roast: Slip the test values into the routines to test the multi-arg

[14:08] <Geth> ¬¶ roast: variants as well.

[14:08] <Geth> ¬¶ roast: 

[14:08] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/4d0f97a92

[14:08] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/ebd8e2497d

[14:24] * AlexDaniel squints at https://github.com/ugexe/zef/blob/846c5ab92cdf6a788abc23b19ce81979b84d8e4a/lib/Zef/Service/Shell/prove.pm6#L32-L34

[14:26] <AlexDaniel> I'm seeing this: zef thinks that the dependency is installed but module tests fail because the dependency is not installed

[14:28] <AlexDaniel>  my $ENV := %*ENV;

[14:28] <AlexDaniel> hmmmm‚Ä¶

[14:28] <AlexDaniel> that will mangle the original %*ENV, right?

[14:29] <nine> yes

[14:30] <AlexDaniel>  whenever $proc.start(:$ENV, :cwd($path)) { $passed = $_.so }

[14:30] <AlexDaniel> ahhhhhhhhhhhhh‚Ä¶

[14:31] <AlexDaniel> I think different :cwd is the issue

[14:34] <AlexDaniel> yes

[14:34] <AlexDaniel> slapping .absolute on my paths fixed it

[14:34] <AlexDaniel> will ticket both issues

[14:40] <AlexDaniel> https://github.com/ugexe/zef/issues/270 https://github.com/ugexe/zef/issues/271

[15:20] *** jonfatino joined
[15:22] *** jonfatino left
[15:59] <AlexDaniel> alright I'm getting somewhere

[16:24] * timotimo slaps roof of :cwd

[16:24] <timotimo> this bad boy can fit so many relative paths in it

[17:20] *** MasterDuke joined
[17:20] *** p6bannerbot sets mode: +v MasterDuke

[17:20] *** MasterDuke left
[17:20] *** MasterDuke joined
[17:20] *** herbert.freenode.net sets mode: +v MasterDuke

[17:20] *** p6bannerbot sets mode: +v MasterDuke

[17:51] <tbrowder__> AlexDaniel: i‚Äôll do that next time (remove tabs first)!

[18:13] <Geth> ¬¶ roast: 1564ef710c | (Zoffix Znet)++ | fudgeandrun

[18:13] <Geth> ¬¶ roast: [v6.d REVIEW] Warn if we don't find local binary

[18:13] <Geth> ¬¶ roast: 

[18:13] <Geth> ¬¶ roast: Otherwise the user might be completely unaware they might be

[18:13] <Geth> ¬¶ roast: roasting with the wrong bindary

[18:13] <Geth> ¬¶ roast: 

[18:13] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/568eb76ae

[18:13] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/1564ef710c

[18:23] *** glepa19 joined
[18:23] <Geth> ¬¶ roast: a767b1cfd1 | (Zoffix Znet)++ | S32-io/io-cathandle.t

[18:23] <Geth> ¬¶ roast: [v6.d REVIEW] Reword IO::CatHandle.lines(0)

[18:23] <Geth> ¬¶ roast: 

[18:23] <Geth> ¬¶ roast: Explicitly say what we expect

[18:23] <Geth> ¬¶ roast: 

[18:23] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/6e8a0be41

[18:23] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/a767b1cfd1

[18:24] <Geth> ¬¶ 6.d-prep: dffa264241 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[18:24] <Geth> ¬¶ 6.d-prep: Update spec review

[18:24] <Geth> ¬¶ 6.d-prep: 

[18:24] <Geth> ¬¶ 6.d-prep: - Update zofglop commit

[18:24] <Geth> ¬¶ 6.d-prep: - List QuantHash ops as weakness

[18:24] <Geth> ¬¶ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/dffa264241

[18:28] *** glepa19 left
[19:14] <Geth> ¬¶ nqp/nqp-mbc: 8d0dda3083 | (Stefan Seifert)++ | mbc.nqp

[19:14] <Geth> ¬¶ nqp/nqp-mbc: Prototype for a mbc writer in nqp

[19:14] <Geth> ¬¶ nqp/nqp-mbc: review: https://github.com/perl6/nqp/commit/8d0dda3083

[19:16] <Geth> ¬¶ roast: f477dbfc7f | (Zoffix Znet)++ | S32-io/pipe.t

[19:16] <Geth> ¬¶ roast: [v6.d REVIEW] Actually test slurp content in bin pipes

[19:16] <Geth> ¬¶ roast: 

[19:16] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/29582e15c

[19:16] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/f477dbfc7f

[19:31] <Geth> ¬¶ nqp/nqp-mbc: a32e1ba794 | (Stefan Seifert)++ | mbc.nqp

[19:31] <Geth> ¬¶ nqp/nqp-mbc: Replace old multi dispatch op writing with type info based infrastructure

[19:31] <Geth> ¬¶ nqp/nqp-mbc: review: https://github.com/perl6/nqp/commit/a32e1ba794

[19:35] *** Kaiepi left
[19:36] *** Kaiepi joined
[19:36] *** p6bannerbot sets mode: +v Kaiepi

[19:40] *** reportable6 joined
[19:40] *** ChanServ sets mode: +v reportable6

[19:41] *** p6bannerbot sets mode: +v reportable6

[19:42] <Geth> ¬¶ roast: 72be9066a6 | (Zoffix Znet)++ | S32-io/io-cathandle.t

[19:42] <Geth> ¬¶ roast: [v6.d REVIEW] Fix copy-pasta in IO::CatHandle.path

[19:42] <Geth> ¬¶ roast: 

[19:42] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/175ba458e

[19:42] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/72be9066a6

[19:54] *** brrt joined
[19:55] *** p6bannerbot sets mode: +v brrt

[20:02] <Geth> ¬¶ roast: e3627013eb | (Zoffix Znet)++ | S32-io/pipe.t

[20:02] <Geth> ¬¶ roast: [v6.d REVIEW] Use more exact test for IO::Pipe.proc

[20:02] <Geth> ¬¶ roast: 

[20:02] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/47c88abe4

[20:02] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/e3627013eb

[20:07] <Geth> ¬¶ roast: 4ff231bbb1 | (Zoffix Znet)++ | S32-io/slurp.t

[20:07] <Geth> ¬¶ roast: [v6.d REVIEW] Don't rely on Buf.gist in &slurp test

[20:07] <Geth> ¬¶ roast: 

[20:07] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/38c61cd32

[20:07] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/4ff231bbb1

[20:11] <Geth> ¬¶ roast: 7d47580eb8 | (Zoffix Znet)++ | S03-metaops/cross.t

[20:11] <Geth> ¬¶ roast: [v6.d REVIEW] Test actual values in `X` with empty RHS

[20:11] <Geth> ¬¶ roast: 

[20:11] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/0faf3c354

[20:11] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/7d47580eb8

[20:12] <Geth> ¬¶ roast: 2bf3198659 | (Zoffix Znet)++ | S03-metaops/cross.t

[20:12] <Geth> ¬¶ roast: Fudge crashing X+ test

[20:12] <Geth> ¬¶ roast: 

[20:12] <Geth> ¬¶ roast: R#2286 https://github.com/rakudo/rakudo/issues/2286

[20:12] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/2bf3198659

[20:12] <synopsebot> R#2286 [open]: https://github.com/rakudo/rakudo/issues/2286 `(1,2) X+ ()` crashes

[20:34] *** brrt left
[21:48] *** Kaiepi left
[21:49] *** Kaiepi joined
[21:49] *** p6bannerbot sets mode: +v Kaiepi

[22:03] *** pmurias left
[22:15] *** ChimkenNugger12 joined
[22:19] *** ChimkenNugger12 left
[22:41] *** Kaiepi left
[22:42] *** Kaiepi joined
[22:42] *** p6bannerbot sets mode: +v Kaiepi

[23:14] <Geth> ¬¶ roast: 2cb8e5f134 | (Zoffix Znet)++ | 2 files

[23:14] <Geth> ¬¶ roast: [v6.d REVIEW] Appendicize Junction.new with wrong args

[23:14] <Geth> ¬¶ roast: 

[23:14] <Geth> ¬¶ roast: Orig: https://github.com/perl6/roast/commit/beea79813

[23:14] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/2cb8e5f134

[23:39] <AlexDaniel> alright!!!

[23:39] <AlexDaniel> it bisected Foo::Regressed to 741ae6f4eda001e5196cd7e156e887e7279cf1d8 :)

[23:39] <AlexDaniel> awesome

[23:43] <AlexDaniel> and Foo::Regressed::Very also

[23:43] <AlexDaniel> cool, so it works

[23:44] <AlexDaniel> it also tests for flappers which is helpful

[23:44] <AlexDaniel> buuut a full run will have to wait for tomorrow as I'm going to bed now

[23:56] <MasterDuke> AlexDaniel++

[23:57] <AlexDaniel> also I haven't decided what kind of output I want

[23:58] <AlexDaniel> initially I was thinking to just use toaster as frontend but this one is a bit different

[23:59] <AlexDaniel> sooo‚Ä¶ graphviz?

[23:59] <AlexDaniel> I have all the info to output a dot file

