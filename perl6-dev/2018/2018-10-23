[00:12] *** Kaiepi left
[00:28] *** Kaiepi joined
[00:29] *** p6bannerbot sets mode: +v Kaiepi

[00:46] *** MasterDuke joined
[00:46] *** p6bannerbot sets mode: +v MasterDuke

[00:46] *** MasterDuke left
[00:46] *** MasterDuke joined
[00:46] *** herbert.freenode.net sets mode: +v MasterDuke

[00:46] *** p6bannerbot sets mode: +v MasterDuke

[01:15] *** fake_space_whale joined
[01:15] *** p6bannerbot sets mode: +v fake_space_whale

[01:32] *** Kaiepi left
[01:33] *** Kaiepi joined
[01:34] *** p6bannerbot sets mode: +v Kaiepi

[01:40] *** j3nnn1 left
[02:13] *** ufobat_ joined
[02:14] *** p6bannerbot sets mode: +v ufobat_

[02:17] *** ufobat left
[03:01] *** Kaiepi left
[03:02] *** Kaiepi joined
[03:02] *** p6bannerbot sets mode: +v Kaiepi

[03:19] *** Kaiepi left
[03:19] *** Kaiepi joined
[03:20] *** p6bannerbot sets mode: +v Kaiepi

[03:54] *** fake_space_whale left
[04:00] *** MasterDuke left
[04:49] *** fake_space_whale joined
[04:49] *** p6bannerbot sets mode: +v fake_space_whale

[05:17] *** fake_space_whale left
[05:39] *** Kaiepi left
[05:39] *** Kaiepi joined
[05:40] *** p6bannerbot sets mode: +v Kaiepi

[06:18] <nine> AlexDaniel: the long name is the full name like Inline::Perl5:version<0.35>:auth<github:niner>

[06:25] *** robertle joined
[06:25] *** p6bannerbot sets mode: +v robertle

[06:57] *** cognominal-p6 left
[07:11] <AlexDaniel> nine: so I only have to update that file whenever I update zef?

[07:11] * AlexDaniel is very confused

[07:11] <AlexDaniel> ( context http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-10-21#l135 )

[07:13] <nine> AlexDaniel: no, you definitely do not touch installed files. Perl 6 explicitly requires installed distributions to be immutable. A long name must refer to one and only one version of a dist's code.

[07:14] <AlexDaniel> nine: ok now it feels like we're talking about something different

[07:14] <AlexDaniel> nine: I'm trying to resolve this: https://github.com/perl6/Blin/issues/2

[07:14] <AlexDaniel> `zef --help` gives a path to the configuration file

[07:15] <AlexDaniel> if I shouldn't touch it, then what can I do?

[07:16] <nine> AlexDaniel: --config-path=[path]    Load a specific Zef config file

[07:17] <AlexDaniel> ahhh, hmm

[07:17] <AlexDaniel> right… well, that totally makes sense

[07:18] <AlexDaniel> nine: d'oh! Heh… thank you!

[07:19] <nine> Glad I could help!

[07:23] *** cognominal-p6 joined
[07:24] *** p6bannerbot sets mode: +v cognominal-p6

[07:41] *** ufobat_ is now known as ufobat

[07:45] *** cognominal-p6 left
[07:45] *** cognominal-p6 joined
[07:46] *** p6bannerbot sets mode: +v cognominal-p6

[07:49] *** cognominal-p6 left
[07:51] *** cognominal-p6 joined
[07:51] *** cognominal-p6 left
[07:52] *** cognominal-p6 joined
[07:52] *** p6bannerbot sets mode: +v cognominal-p6

[08:16] *** lizmat left
[08:32] *** lizmat joined
[08:32] *** p6bannerbot sets mode: +v lizmat

[08:34] *** yoleaux left
[08:39] *** AlexDaniel left
[08:48] <nine> timotimo++ # the profiler is indespensable in getting nqp-mbc merge worthy.

[08:51] <nine> Btw timotimo, answering my own question: the way to avoid the uint -> num -> int -> uint dance I mentioned yesterday feels kina obvious in hind sight: use unbox_u explicitly! NQP just can't know that the $register object boxes an uint already and has to be conservative.

[09:34] <timotimo> nine: that's great to hear! feel free to guide me with feature requests :)

[09:50] <nine> It's odd. I feel like I finally understand (register) type handling in NQP. And that's after spending a month working on the code that's actually implementing it. And the finding is: it's quite primitive! Which also makes it simple and easy to influence.

[09:50] <timotimo> ah, i guess that makes sense

[09:51] <nine> The only thing to keep in mind is, that NQP only knows the types of locals, lexicals and op results. It cannot look into objects or methods.

[09:51] <timotimo> i've touched the optimizer part of nqp for making the amount of num arithmetic decrease

[09:52] <nine> I dare say this also explains why it's so difficult to change NQP's default to int. You'd have to adapt all code paths that may actually need to be able to handle nums.

[09:56] <nine> timotimo: there's a message from the profiler about passing a file name to service.p6. But it doesn't state how to actually do this. It's not obvious to a non-cro-user

[09:57] <timotimo> on my end it's just perl6 -I lib -I ../moar-heapanalyzer/ service.p6 /tmp/magicbox.sql but that's because i develop it

[09:57] <timotimo> but you're right

[09:57] <timotimo> a sub MAIN would be appropriate

[09:58] <nine> I run the profiler with "cro run ." (as told by the README). I'm not even sure how that involves a service.p6 :)

[10:14] <timotimo> hah, that's still the readme from the tutorial repo %)

[10:15] *** cognominal-p6 left
[10:22] *** donaldh joined
[10:23] *** p6bannerbot sets mode: +v donaldh

[10:23] *** cognominal-p6 joined
[10:24] *** p6bannerbot sets mode: +v cognominal-p6

[10:30] *** yoleaux joined
[10:30] *** p6bannerbot sets mode: +v yoleaux

[10:35] *** Kaiepi left
[10:35] *** Kaiepi joined
[10:36] *** p6bannerbot sets mode: +v Kaiepi

[10:42] *** cognominal-p6 left
[10:42] *** cognominal-p6 joined
[10:43] *** p6bannerbot sets mode: +v cognominal-p6

[11:05] *** Kaiepi left
[11:06] *** PufferBot left
[11:08] *** Kaiepi joined
[11:09] *** p6bannerbot sets mode: +v Kaiepi

[11:15] *** Zoffix left
[11:32] *** lizmat left
[11:35] *** lizmat joined
[11:35] *** p6bannerbot sets mode: +v lizmat

[12:09] *** AlexDaniel joined
[12:09] *** p6bannerbot sets mode: +v AlexDaniel

[12:22] *** cognominal-p6 left
[12:30] <timotimo> who wants to investigate why Channel's send method has this code:         nqp::if(

[12:30] <timotimo>           $!closed,

[12:30] <timotimo> which compiles into an attrref instead of attr

[12:30] <timotimo> so it allocates a nativeref every time it's called

[12:39] <lizmat> timotimo: isn't that how all int attributes work ?

[12:40] <lizmat> and the reason they're slow to use in some situations ?

[12:40] <lizmat> timotimo: in any case, there's nothing special about Channel's $!closed in that way

[12:41] <lizmat> use nqp; class A { has int $!a; method a() { $!a ?? 42 !! 666 } }   # shows the same

[12:47] <timotimo> man, that'd be worth something

[12:47] <timotimo> fixing that, i mean

[12:47] <timotimo> AFK, though

[12:53] <lizmat> timotimo: are you implying that it should only ever allocate 1 attributeref, or that it shouldn't allocate any at all?

[12:54] *** MasterDuke joined
[12:55] *** p6bannerbot sets mode: +v MasterDuke

[12:55] <MasterDuke> nine: if you’re interested, https://github.com/MasterDuke17/nqp/tree/default_vars_and_ops_to_int_instead_of_num is my WIP branch to change NQP to use int instead of num

[12:56] <MasterDuke> I haven’t rebased recently, but it built and passed ‘make m-test’

[12:57] <MasterDuke> However, the corresponding Rakudo branch doesn’t yet build

[12:57] <MasterDuke> If you have any comments/suggestions they would be much appreciated

[12:59] <MasterDuke> timotimo: btw, there’s a request for some more info to your answer here https://stackoverflow.com/questions/52830372/storing-intermediate-data-in-a-file-in-perl-6

[13:05] <MasterDuke> SmokeMachine: also, maybe you could comment about your recent fixes here https://stackoverflow.com/questions/52861619/are-typed-signatures-for-stubbed-methods-not-enforced-in-roles-for-perl6

[13:07] *** MasterDuke_ joined
[13:07] <SmokeMachine> I’ll try when I come home... but my problem is my English...

[13:07] <SmokeMachine> MasterDuke: ☝️

[13:07] *** p6bannerbot sets mode: +v MasterDuke_

[13:08] *** MasterDuke_ left
[13:09] *** MasterDuke_ joined
[13:10] *** brrt joined
[13:10] *** p6bannerbot sets mode: +v MasterDuke_

[13:10] *** p6bannerbot sets mode: +v brrt

[13:10] *** MasterDuke_ left
[13:10] *** MasterDuke left
[13:24] *** Kaiepi left
[13:25] *** Kaiepi joined
[13:26] *** p6bannerbot sets mode: +v Kaiepi

[14:11] <timotimo> lizmat: i don't see a need for it to use attributeref at all there. on top of that, it's using bool_I on the object, which is not only doing unneccessarily indirect lookup of the attribute itself, but probably also doesn't boolify the result very efficiently

[14:12] <timotimo> tbh, i'm not quite sure how it's using sp_bool_I on the result of attrref_i anyway?!

[14:12] <lizmat> well, I just tried to replace attributeref by attribute in Actions (line 3365), and that breaks the setting

[14:12] <lizmat> my turn to be afk&

[14:13] <timotimo> i need to investigate more closely.

[14:14] <timotimo> oh, i was mistaken, the bool_I must be from something else

[14:18] *** Ven` joined
[14:19] *** p6bannerbot sets mode: +v Ven`

[14:55] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: 4 commits pushed by (Rob Hoelz)++

[14:55] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: a0183e8734 | Improve error message when using placeholders with methods

[14:55] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: e8a3abce3a | Store AST for placeholder variable in param list

[14:55] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: 04d7763bda | Use the first placeholder AST to report placeholder method errors

[14:55] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: cc936469d6 | Use method name logic for placeholder error

[14:55] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: review: https://github.com/rakudo/rakudo/compare/a0183e873446^...cc936469d6a8

[14:56] <timotimo> it's hoelzro! \o/

[14:58] <Geth> ¦ rakudo: hoelzro++ created pull request #2415: Fix placeholder method error

[14:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2415

[14:59] <hoelzro> o/

[14:59] <hoelzro> that looked like a fun fix to make =)

[14:59] *** pmurias joined
[14:59] *** p6bannerbot sets mode: +v pmurias

[15:00] <pmurias> m: multi y(int $x is rw) { say('good') }; y(my int $x = 42);

[15:00] <yoleaux> 22 Oct 2018 19:46Z <AlexDaniel> pmurias: just wondering, what was the reason to remove --encoding? The commit message doesn't explain why https://github.com/rakudo/rakudo/commit/bea08ec6

[15:00] <camelia> rakudo-moar 64b3dbd79: OUTPUT: «Cannot resolve caller y(Int); none of these signatures match:␤    (int $x is rw)␤  in block <unit> at <tmp> line 1␤␤»

[15:00] <yoleaux> 22 Oct 2018 20:30Z <AlexDaniel> pmurias: ah ok, nevermind: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-10-22#l144

[15:00] <yoleaux> 22 Oct 2018 20:31Z <AlexDaniel> pmurias: how would you like JS backend to be announced in the changelog? Feel free to write as little or as much as you want here: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:00] <pmurias> ^^ is this a bug?

[15:00] *** fake_space_whale joined
[15:01] *** p6bannerbot sets mode: +v fake_space_whale

[15:02] <AlexDaniel> m: multi y(int $x) { say $x }; y(42)

[15:02] <camelia> rakudo-moar 64b3dbd79: OUTPUT: «Cannot resolve caller y(Int); none of these signatures match:␤    (int $x)␤  in block <unit> at <tmp> line 1␤␤»

[15:02] <AlexDaniel> m: sub y(int $x) { say $x }; y(42)

[15:02] <camelia> rakudo-moar 64b3dbd79: OUTPUT: «42␤»

[15:02] <AlexDaniel> what about this?

[15:03] <AlexDaniel> m: sub y(int $x is rw) { say(‘good’) }; y(my int $x = 42);

[15:03] <camelia> rakudo-moar 64b3dbd79: OUTPUT: «Expected a modifiable native int argument for '$x'␤  in sub y at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:04] *** brrt left
[15:04] <AlexDaniel> pmurias: IMO not a bug, 42 is what gets passed

[15:04] <AlexDaniel> but why sub works and multi doesn't, that I don't know

[15:06] <pmurias> m: multi y(int $x is rw) { 'works at compile time' }; say y(my int $x = 42);

[15:06] <camelia> rakudo-moar 64b3dbd79: OUTPUT: «works at compile time␤»

[15:06] <pmurias> AlexDaniel: how it works depends on what's in the sub

[15:06] <AlexDaniel> o_o

[15:07] <pmurias> because the optimizer uses different rules

[15:17] *** cognominal-p6 joined
[15:18] *** p6bannerbot sets mode: +v cognominal-p6

[15:19] *** j3nnn1 joined
[15:19] *** p6bannerbot sets mode: +v j3nnn1

[15:22] *** Kaiepi left
[15:25] *** Kaiepi joined
[15:26] *** donaldh left
[15:26] *** p6bannerbot sets mode: +v Kaiepi

[15:30] <Geth> ¦ rakudo: lizmat self-assigned Signatures does not shows Coercion types when gisted. https://github.com/rakudo/rakudo/issues/2416

[15:39] *** robertle left
[15:41] *** cognominal-p6 left
[15:51] *** Zoffix joined
[15:51] *** p6bannerbot sets mode: +v Zoffix

[15:51] <Zoffix> Does precompilation happen on multiple threads?

[15:52] <nine> no

[15:52] <Zoffix> I don't get how I get this output: https://gist.github.com/zoffixznet/8a46fb785c7f3932b1d1a34a211beb87

[15:53] <Zoffix> 1 printf + conditional with another printf in each branch. Yeah, I get one print of first printf in the output, followed by double print of one of the printf inside the conditional, using different values :S

[15:53] <Zoffix> MVM_6model_parametric_parameterize.1: FOUND [(null)]  

[15:53] <Zoffix> MVM_6model_parametric_parameterize.1: FOUND [Array[Mu]] 

[15:53] <Zoffix> That one. How could it print side by side like that, without a "MVM_6model_parametric_parameterize.1: trying to find for …" in between?

[15:53] <nine> Maybe the spesh thread?

[15:54] <Zoffix> Still same output with `MVM_SPESH_DISABLE=1`. And it's very consistent too. It's always two consequtive "FOUND" messages in the same order.

[15:55] <Zoffix> and same with `MVM_SPESH_BLOCKING=1` set

[15:55] <nine> You could add a MVM_dump_backtrace(tc) there to get the Perl 6 backtrace

[15:55] <Zoffix> cool

[15:57] <Geth> ¦ rakudo: 0243275def | (Elizabeth Mattijsen)++ | src/core/Parameter.pm6

[15:57] <Geth> ¦ rakudo: Add Parameter.coerce_type

[15:57] <Geth> ¦ rakudo: 

[15:57] <Geth> ¦ rakudo: So we can introspect the type we should coerce to.  Also adapt

[15:57] <Geth> ¦ rakudo: Parameter.perl to take the coerce_type into account.

[15:57] <Geth> ¦ rakudo: 

[15:57] <Geth> ¦ rakudo: Fixes R#2416

[15:57] <synopsebot> R#2416 [open]: https://github.com/rakudo/rakudo/issues/2416 Signatures does not shows Coercion types when gisted.

[15:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0243275def

[15:58] <lizmat> this seems to break some tests in t/spec/S06-currying/positional.t that apparently do not expect the coerce_type to appear

[15:58] <lizmat> imo the tests are broken

[16:03] *** fake_space_whale left
[16:07] *** brrt joined
[16:08] *** p6bannerbot sets mode: +v brrt

[16:12] *** pmurias left
[16:13] *** pmurias joined
[16:13] *** p6bannerbot sets mode: +v pmurias

[16:14] *** pmurias left
[16:19] *** pmurias joined
[16:19] *** p6bannerbot sets mode: +v pmurias

[16:22] *** Ven` left
[16:33] *** Ven` joined
[16:34] *** p6bannerbot sets mode: +v Ven`

[16:37] *** denix13 joined
[16:37] *** p6bannerbot sets mode: +v denix13

[16:38] *** Ven` left
[16:45] *** pmurias left
[16:46] *** denix13 left
[16:47] *** pmurias joined
[16:47] *** p6bannerbot sets mode: +v pmurias

[16:52] *** Zoffix left
[16:54] *** cognominal-p6 joined
[16:55] *** p6bannerbot sets mode: +v cognominal-p6

[17:07] *** cognominal-p6 left
[17:07] *** cognominal-p6 joined
[17:08] *** p6bannerbot sets mode: +v cognominal-p6

[17:17] *** robertle joined
[17:18] *** p6bannerbot sets mode: +v robertle

[17:21] *** lizmat left
[17:37] *** cognominal-p6 left
[17:51] *** brrt left
[17:52] *** pmurias left
[17:57] *** pmurias joined
[17:57] *** p6bannerbot sets mode: +v pmurias

[18:01] <pmurias> masak: there is a difference between compile-time (when a modules is compiled) and (load time when it's loaded while compiling something that usesit)

[18:01] <pmurias> * uses it

[18:03] <pmurias> masak: I don't remember the context of the discussion

[18:05] <pmurias> masak: but there are at least three phases: 1) compiling the module itself 2) loading the module from disk and having it affect the compilation of something else 3) actuall runtime

[18:06] <pmurias> masak: all 3 of them can be separated by time and space

[18:23] *** Kaiepi left
[18:23] *** Kaiepi joined
[18:24] *** p6bannerbot sets mode: +v Kaiepi

[19:12] *** Ven` joined
[19:12] *** p6bannerbot sets mode: +v Ven`

[19:16] *** Ven` left
[19:17] <masak> pmurias: thank you for the clarification. that makes sense, and it seems to not be in conflict with what I just discovered about modules.

[19:20] *** brrt joined
[19:21] *** p6bannerbot sets mode: +v brrt

[19:34] *** Zoffix joined
[19:34] *** p6bannerbot sets mode: +v Zoffix

[19:43] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: 27558ef28f | (Rob Hoelz)++ | src/Perl6/Actions.nqp

[19:43] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: Use node instead of ast for placeholder AST name

[19:43] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: 

[19:43] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: Zoffix suggested this is more consistent with the Rakudo codebase

[19:43] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: review: https://github.com/rakudo/rakudo/commit/27558ef28f

[19:43] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: c1bb351224 | (Rob Hoelz)++ | t/05-messages/03-errors.t

[19:43] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: Add test for GH #2320

[19:43] <Geth> ¦ rakudo/gh-2320-placeholder-method-error: review: https://github.com/rakudo/rakudo/commit/c1bb351224

[19:47] *** leont joined
[19:47] *** p6bannerbot sets mode: +v leont

[19:47] *** AlexDaniel left
[19:48] *** AlexDaniel joined
[19:48] *** p6bannerbot sets mode: +v AlexDaniel

[20:02] *** shareable6 left
[20:02] *** shareable6 joined
[20:03] *** p6bannerbot sets mode: +v shareable6

[20:03] *** Kaiepi left
[20:05] *** Kaiepi joined
[20:06] *** p6bannerbot sets mode: +v Kaiepi

[20:12] *** ggoebel joined
[20:13] *** p6bannerbot sets mode: +v ggoebel

[20:33] *** cognominal-p6 joined
[20:34] *** p6bannerbot sets mode: +v cognominal-p6

[20:35] *** ggoebel left
[20:42] *** cognominal-p6 left
[20:42] *** cognominal-p6 joined
[20:43] *** p6bannerbot sets mode: +v cognominal-p6

[20:48] *** robertle left
[20:50] *** ggoebel joined
[20:51] *** p6bannerbot sets mode: +v ggoebel

[20:52] *** ZofBot left
[20:57] *** shareable6 left
[20:57] *** reportable6 left
[20:57] *** committable6 left
[20:57] *** releasable6 left
[20:57] *** bisectable6 left
[20:57] *** committable6 joined
[20:57] *** reportable6 joined
[20:57] *** ChanServ sets mode: +v committable6

[20:57] *** ChanServ sets mode: +v reportable6

[20:57] *** shareable6 joined
[20:57] *** ChanServ sets mode: +v shareable6

[20:57] *** releasable6 joined
[20:57] *** ChanServ sets mode: +v releasable6

[20:57] *** greppable6 left
[20:57] *** bisectable6 joined
[20:57] *** ChanServ sets mode: +v bisectable6

[20:57] *** notable6 left
[20:57] *** greppable6 joined
[20:57] *** ChanServ sets mode: +v greppable6

[20:57] *** notable6 joined
[20:58] *** p6bannerbot sets mode: +v committable6

[20:58] *** p6bannerbot sets mode: +v reportable6

[20:58] *** p6bannerbot sets mode: +v shareable6

[20:58] *** cognominal-p6 left
[20:58] *** p6bannerbot sets mode: +v releasable6

[20:58] *** p6bannerbot sets mode: +v bisectable6

[20:58] *** p6bannerbot sets mode: +v greppable6

[20:58] *** p6bannerbot sets mode: +v notable6

[21:02] <AlexDaniel> ===> Searching for: sake

[21:02] <AlexDaniel> free(): invalid next size (fast)

[21:02] <AlexDaniel> hmmmmm

[21:02] *** cognominal-p6 joined
[21:02] <AlexDaniel> I wonder if we already had that instability previously

[21:03] *** p6bannerbot sets mode: +v cognominal-p6

[21:04] <AlexDaniel> that happened to just one module

[21:07] *** cognominal-p6 left
[21:07] *** cognominal-p6 joined
[21:08] *** p6bannerbot sets mode: +v cognominal-p6

[21:16] *** pmurias left
[21:36] *** brrt left
[22:06] *** Ven` joined
[22:07] *** p6bannerbot sets mode: +v Ven`

[22:10] *** Ven` left
[22:41] *** dct joined
[22:41] *** p6bannerbot sets mode: +v dct

[22:46] *** Ven` joined
[22:46] *** p6bannerbot sets mode: +v Ven`

[22:48] *** fake_space_whale joined
[22:49] *** p6bannerbot sets mode: +v fake_space_whale

[22:51] *** Ven` left
[22:52] *** cognominal-p6 left
[23:37] *** dct left
[23:46] *** MasterDuke joined
[23:46] *** p6bannerbot sets mode: +v MasterDuke

[23:47] *** MasterDuke left
[23:47] *** MasterDuke joined
[23:47] *** herbert.freenode.net sets mode: +v MasterDuke

[23:47] *** p6bannerbot sets mode: +v MasterDuke

