[00:04] *** fake_space_whale joined
[00:41] <MasterDuke> down to one failing test in my default-to-int-not-num nqp branch

[01:00] *** Ven`` left
[01:06] <MasterDuke> although stage optimize of rakudo dies with `Unhandled exception: This type (Scalar) does not support associative operations    at SETTING::src/core/Rakudo/Internals.pm6:735`

[01:13] *** Ven`` joined
[01:53] *** Ven`` left
[01:54] *** Ven`` joined
[02:02] *** Ven`` left
[03:08] *** robertle left
[03:10] *** robertle joined
[05:15] *** fake_space_whale left
[05:26] *** lizmat left
[05:26] *** robertle_ left
[05:36] *** fake_space_whale joined
[05:52] *** fake_space_whale left
[06:41] *** ufobat___ joined
[07:32] *** |Tux| joined
[07:45] *** brrt joined
[07:45] <brrt> \o

[07:52] <brrt> .tell AlexDaniel I've pushed a commit to MoarVM that should resolve the windows problem

[07:52] <yoleaux> brrt: I'll pass your message to AlexDaniel.

[07:58] <brrt> btw, i found this by the advanced technique of reading git log and reverting suspicious commits until I found the guilty commit

[07:58] <brrt> this technique is available to more people than just me

[08:00] <|Tux|> Rakudo version 2018.06-271-g84d45f07f - MoarVM version 2018.06-327-gfbc61e491

[08:00] <|Tux|> csv-test-xs-20      0.426 -  0.465

[08:00] <|Tux|> test-t --race       0.951 -  0.961

[08:00] <|Tux|> csv-ip5xs           1.000 -  1.012

[08:00] <|Tux|> test-t              2.211 -  2.234

[08:00] <|Tux|> csv-ip5xs-20        7.969 -  8.086

[08:00] <|Tux|> test                8.724 - 10.033

[08:00] <|Tux|> test-t-20 --race   12.817 - 13.143

[08:00] <|Tux|> csv-parser         25.075 - 25.205

[08:00] <|Tux|> test-t-20          39.680 - 39.778

[08:55] *** lizmat joined
[08:57] <|Tux|> Rakudo version 2018.06-271-g84d45f07f - MoarVM version 2018.06-327-gfbc61e491

[08:57] <|Tux|> csv-test-xs-20      0.446 -  0.449

[08:57] <|Tux|> test-t --race       0.955 -  0.965

[08:57] <|Tux|> csv-ip5xs           0.974 -  0.995

[08:57] <|Tux|> test-t              2.210 -  2.249

[08:57] <|Tux|> csv-ip5xs-20        7.602 -  7.687

[08:57] <|Tux|> test                9.913 - 10.131

[08:57] <|Tux|> test-t-20 --race   12.677 - 12.707

[08:57] <|Tux|> csv-parser         25.006 - 25.385

[08:57] <|Tux|> test-t-20          39.604 - 39.647

[08:57] <|Tux|> (because I added java12 to http://tux.nl/Talks/CSV6/speed5.html

[09:05] *** brrt left
[09:05] <lizmat> Files=1246, Tests=76391, 383 wallclock secs (16.04 usr  5.38 sys + 2687.37 cusr 259.24 csys = 2968.03 CPU)

[09:12] <Geth> ¦ nqp: 2a3a3f3c83 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[09:12] <Geth> ¦ nqp: [MoarVM Bump] Brings 13 commits

[09:12] <Geth> ¦ nqp: 

[09:12] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.06-314-g4199a9564...2018.06-327-gfbc61e4

[09:12] <Geth> ¦ nqp: fbc61e4 Revert "Implement JIT templates for 10 ops"

[09:12] <Geth> ¦ nqp: 647fcb9 Fix typo that prevented MVM_GC_DEBUGging bindlex

[09:12] <Geth> ¦ nqp: 7467836 Fix compiler warning from last commit

[09:12] <Geth> ¦ nqp: f06a725 Save 3 instructions per 64bits in siphash24() function

[09:12] <Geth> ¦ nqp: <…commit message has 9 more lines…>

[09:12] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2a3a3f3c83

[09:12] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-314-g4199a9564...2018.06-327-gfbc61e4

[09:12] <Geth> ¦ rakudo: 729edb4a49 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[09:12] <Geth> ¦ rakudo: [NQP Bump] Brings 56 commits

[09:12] <Geth> ¦ rakudo: 

[09:12] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.06-72-g3a4cbe042...2018.06-128-g2a3a3f3

[09:12] <Geth> ¦ rakudo: 2a3a3f3 [MoarVM Bump] Brings 13 commits

[09:12] <Geth> ¦ rakudo: 042ffa3 Correct some test descriptions

[09:12] <Geth> ¦ rakudo: 7019401 Sort QAST::VM annotations when dumping them (#491)

[09:12] <Geth> ¦ rakudo: 3fc2378 Fix the backends for nqp::<eqatic eqatim eqaticim>

[09:12] <Geth> ¦ rakudo: <…commit message has 67 more lines…>

[09:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/729edb4a49

[09:12] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-72-g3a4cbe042...2018.06-128-g2a3a3f3

[09:17] <Geth> ¦ roast: 683296bf00 | (Zoffix Znet)++ | 2 files

[09:17] <Geth> ¦ roast: Rename JSON excp. handler test file to more generic one

[09:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/683296bf00

[09:17] <Geth> ¦ rakudo: 1f27a19b48 | (Zoffix Znet)++ | t/spectest.data

[09:17] <Geth> ¦ rakudo: Follow spectest file rename

[09:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1f27a19b48

[09:28] <Geth> ¦ rakudo: c978050399 | (Zoffix Znet)++ | t/05-messages/03-errors.t

[09:28] <Geth> ¦ rakudo: Skip heredoc warning message test on windows

[09:28] <Geth> ¦ rakudo: 

[09:28] <Geth> ¦ rakudo: is-run test routine doesn't quite work on Windows because of RT#132258

[09:28] <Geth> ¦ rakudo: https://rt.perl.org/Ticket/Display.html?id=132258

[09:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c978050399

[09:28] <synopsebot> RT#132258 [new]: https://rt.perl.org/Ticket/Display.html?id=132258 [SECURITY][WINDOWS] `run "perl6" ...` can be made to execute shell commands

[09:38] *** stmuk_ joined
[09:38] <Geth> ¦ star: f28a390364 | (Steve Mynott)++ | 3 files

[09:38] <Geth> ¦ star: bump submodules again, mainly to pull in zef's Build.pm6 to fix p6doc doc deployment

[09:38] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/f28a390364

[09:40] <Geth> ¦ rakudo: ef61ce32e2 | (Zoffix Znet)++ | src/core/Exception.pm6

[09:40] <Geth> ¦ rakudo: Only run THE_END if custom ex. handler gave us False

[09:40] <Geth> ¦ rakudo: 

[09:40] <Geth> ¦ rakudo: If we got True, the default exception handler we run afterwards

[09:40] <Geth> ¦ rakudo: will run THE_END for us.

[09:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ef61ce32e2

[09:40] *** stmuk left
[09:46] <Geth> ¦ star: 7485def206 | (Steve Mynott)++ | Configure.pl

[09:46] <Geth> ¦ star: unattempt windows fix

[09:46] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/7485def206

[10:01] <Geth> ¦ rakudo: lizmat self-assigned Code review wanted: &THE_END with custom exception handlers https://github.com/rakudo/rakudo/issues/2150

[10:15] <stmuk_> lizmat: there should be a rakudo-star-2018.06-RC0 release in time for the weekly

[10:15] <lizmat> stmuk_++

[11:26] <Geth> ¦ star: stmuk self-unassigned Win installer does not set up file associations https://github.com/rakudo/star/issues/115

[11:51] <stmuk_> Geth: sssh

[11:53] <Geth> ¦ nqp: e5975648a6 | (Elizabeth Mattijsen)++ | tools/build/MOAR_REVISION

[11:53] <Geth> ¦ nqp: Bump MoarVM to get extra JIT optimizations

[11:53] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e5975648a6

[11:53] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-327-gfbc61e4...2018.06-329-g21ea40f

[11:54] *** travis-ci joined
[11:54] <travis-ci> Rakudo build passed. Zoffix Znet 'Only run THE_END if custom ex. handler gave us False

[11:54] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/409770249 https://github.com/rakudo/rakudo/compare/c978050399e5...ef61ce32e209

[11:54] *** travis-ci left
[12:03] <stmuk_> http://pl6anet.org/drop/ has source and windows binary for rakudo-star-2018.06-RC0 (Mac binary to follow when ++virtualsue does it)

[12:25] <Geth> ¦ nqp: tbrowder self-assigned need simple examples of using QAST inside nqp programs https://github.com/perl6/nqp/issues/492

[12:25] *** Ven`` joined
[12:26] *** Ven` joined
[12:30] *** Ven`` left
[12:33] *** diakopter joined
[13:00] *** Ven` left
[13:39] *** skids joined
[14:06] *** fake_space_whale joined
[14:35] <AlexDaniel> .

[14:35] <yoleaux> 07:52Z <brrt> AlexDaniel: I've pushed a commit to MoarVM that should resolve the windows problem

[14:36] <AlexDaniel> cool, thanks

[14:42] *** diakopter left
[14:48] <Geth> ¦ rakudo: bb6a6f80bc | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[14:48] <Geth> ¦ rakudo: Bump NQP to get latest JIT optimizations

[14:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bb6a6f80bc

[14:48] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-128-g2a3a3f3...2018.06-129-ge597564

[14:51] <AlexDaniel> weekly: reportable: https://gist.github.com/ea7f276bbc09adff124c7611ae71acca

[14:51] <notable6> AlexDaniel, Noted!

[14:52] *** pmurias joined
[14:52] <lizmat> AlexDaniel++

[14:52] <AlexDaniel> weekly: Rakudo 2018.07 cancelled

[14:52] <notable6> AlexDaniel, Noted!

[14:53] <timotimo> this is the only time that happened in a very long time. i think we can still be somewhat proud

[14:53] <AlexDaniel> weekly: Squashathon this weekend: https://twitter.com/zoffix/status/1022879562387087360

[14:53] <notable6> AlexDaniel, Noted!

[15:00] *** diakopter joined
[15:10] *** Zoffix joined
[15:12] <japhb> AlexDaniel: And I think it may actually be good for our reputation that a large part of the cancelation was that we decided not to leave a major platform behind.

[15:12] <Zoffix> "somewhat" proud? I don't see skipping the release as a negative at all. Quite the opposite: we're not taking risks by releasing something that we don't want to release just because we gotta stick to some made up schedule. 

[15:12] <Zoffix> It's ready when it's ready™.

[15:13] <AlexDaniel> japhb: that wasn't even an option, yes

[15:14] <japhb> Zoffix: Generally I agree with you.  But there is some reputational advantage to be had in displaying a super-regular high-quality release cadence.  Occasionally showing delaying or skipping a release on quality grounds shows prudence.  Doing it too often shows lack of baseline quality, or lack of release cycle maturity.

[15:15] <japhb> s/showing//

[15:16] <japhb> Personally I'm all for erring on the side of release quality, but making sure that we introspect if we delay or cancel too often.

[15:16] *** ExtraCrispy joined
[15:17] <Zoffix> Literally a few lines above it says this haven't happened in a very long time.

[15:18] <AlexDaniel> well, “delays” are somewhat normal though. The release date doesn't have that meaning nowadays

[15:18] <AlexDaniel> .oO( release week? )

[15:19] <japhb> Zoffix: I know that.  I was stating my personal philosophy, not giving anyone a hard time.

[15:19] *** Zoffix left
[15:20] <japhb> AlexDaniel: Actually, I find I have mixed emotions about that.  I like that we're erring on getting it right.  I worry that constantly slipping off our published expectation indicates its time to think about why.

[15:32] <[Coke]> If we really want to cut a release every month on a pre-determined date, we need to change how we're doing releases.

[15:33] <[Coke]> (mainly: don't commit directly to master)

[15:34] <[Coke]> I don't feel strongly enough about monthly super-on-time releases to push for that, though.

[15:34] <AlexDaniel> well, I can start release branches a few days before the release and cut from them

[15:34] <[Coke]> that only mitigates the issue.

[15:35] <[Coke]> could still be a surprise somewhere in master.

[15:35] <[Coke]> (assuming that your build process is only testing a subset of platforms, e.g.)

[15:36] <[Coke]> to be clear, I'm fine with missing the occasional release. Anyone who is going to complain about it and hold it up as an example of how we're screwing up was already not on the team.

[15:36] *** benjikun left
[15:37] <[Coke]> also, thanks again to everyone (AlexDaniel++ in particular) for automating the crap out of this process.

[15:38] <timotimo> not to forget zoffix who kicked off that process :)

[15:38] *** benjikun joined
[15:39] <[Coke]> ofc.

[15:49] <japhb> Yeah, I don't think we're screwing up.  But I do think we can do even better.  In some sense I see the variable release cycle not as a bad thing, but as "not yet as awesome as it could be".  I'm not particular worried about addressing this in the short term, but it feels like something we could look at in the next year or two *usefully* (as in, makes things actually better for the Rakudo devs)

[15:50] <[Coke]> +1

[16:15] <Geth> ¦ rakudo: 45080856b2 | (Zoffix Znet)++ | t/05-messages/03-errors.t

[16:15] <Geth> ¦ rakudo: Test X::OutOfRange .gists given ranges

[16:15] <Geth> ¦ rakudo: 

[16:15] <Geth> ¦ rakudo: Closes https://github.com/rakudo/rakudo/issues/1813 R#1813

[16:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/45080856b2

[16:15] <synopsebot> R#1813 [open]: https://github.com/rakudo/rakudo/issues/1813 [testneeded][tests in rakudo not spec] X::OutOfRange stringyfies instead of gistifies

[16:16] *** Ven`` joined
[16:19] <lizmat> notable6: weekly

[16:19] <notable6> lizmat, 6 notes: https://gist.github.com/3c6bc593f37fc3c3d5caaf7d1561183d

[16:22] *** robertle left
[16:25] *** fake_space_whale left
[16:38] *** Ven`` left
[16:40] *** Ven`` joined
[17:39] *** lizmat left
[17:42] *** Ven`` left
[17:44] *** lizmat joined
[17:48] *** Ven`` joined
[17:57] *** lucasb joined
[18:04] *** Zoffix joined
[18:04] <Zoffix> So we had that debate about whether `num` should default to 0e0... Turns out it already does in params:

[18:04] <Zoffix> m: sub foo (num $x?) { dd $x }()

[18:04] <camelia> rakudo-moar 45080856b: OUTPUT: «0e0␤»

[18:04] *** Ven`` left
[18:05] <Zoffix> and even attributes default to 0e0 :)

[18:11] *** x[LGWs4x4i]uG2N0 left
[18:14] *** x[LGWs4x4i]uG2N0 joined
[18:16] *** dct joined
[18:19] <Geth> ¦ rakudo: f045042d4f | (Zoffix Znet)++ | src/Perl6/World.nqp

[18:19] <Geth> ¦ rakudo: [6.d] Default `num` to 0e0

[18:19] <Geth> ¦ rakudo: 

[18:19] <Geth> ¦ rakudo: - Per 6.d-prep

[18:19] <Geth> ¦ rakudo: - Looks like everthing but `my` variables already defaulted to 0e0,

[18:19] <Geth> ¦ rakudo:     so we could have saved some reels of discussion on this topic

[18:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f045042d4f

[18:20] <Geth> ¦ roast: 2abee09f88 | (Zoffix Znet)++ | MISC/misc-6.d.t

[18:20] <Geth> ¦ roast: Spec `num` defaults to 0e0 in 6.d

[18:20] <Geth> ¦ roast: 

[18:20] <Geth> ¦ roast: POV impl: https://github.com/rakudo/rakudo/commit/f045042d4f

[18:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2abee09f88

[18:21] <lucasb> yay Zoffix++

[18:23] <Geth> ¦ 6.d-prep: ce2ef9460f | (Zoffix Znet)++ | 3 files

[18:23] <Geth> ¦ 6.d-prep: Mark num defaults to 0e0 as completed

[18:23] <Geth> ¦ 6.d-prep: 

[18:23] <Geth> ¦ 6.d-prep: POV Impl: https://github.com/rakudo/rakudo/commit/f045042d4f

[18:23] <Geth> ¦ 6.d-prep: Propspec: https://github.com/perl6/roast/commit/2abee09f88

[18:23] <Geth> ¦ 6.d-prep: Docs:     https://github.com/perl6/doc/commit/33603b1f18

[18:23] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/ce2ef9460f

[18:24] *** Zoffix left
[18:37] *** buggable left
[18:37] *** buggable joined
[18:37] *** ChanServ sets mode: +v buggable

[18:38] *** buggable left
[18:38] *** buggable joined
[18:38] *** ChanServ sets mode: +v buggable

[18:39] *** dct left
[19:08] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/07/30/2018-31-check-out-garbage/

[19:17] <[Coke]> .ask curtispoe if there's a video for the future of 5&6.

[19:17] <yoleaux> [Coke]: I'll pass your message to curtispoe.

[19:29] *** travis-ci joined
[19:29] <travis-ci> Rakudo build failed. Zoffix Znet '[6.d] Default `num` to 0e0

[19:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/409979526 https://github.com/rakudo/rakudo/compare/45080856b23a...f045042d4fa2

[19:29] *** travis-ci left
[19:30] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/02-rakudo/repl.t test file failed.

[19:34] <Geth> ¦ rakudo: f923670210 | (Zoffix Znet)++ (committed using GitHub Web editor) | t/packages/Test/Helpers.pm6

[19:34] <Geth> ¦ rakudo: Make `doesn't-hang` wait longer

[19:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f923670210

[19:34] <Geth> ¦ roast: db9b8bd189 | (Zoffix Znet)++ (committed using GitHub Web editor) | packages/Test/Util.pm

[19:34] <Geth> ¦ roast: Make `doesn't-hang` wait longer

[19:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/db9b8bd189

[19:41] *** Zoffix joined
[19:42] <Zoffix> So 6.d subs are totally additive, just as if you were loading a module?

[19:42] <Zoffix> $ ./perl6 -e 'use v6.d.PREVIEW; say 0e0/0e0'

[19:42] <Zoffix> Ambiguous call to 'infix:</>(Num, Num)'; these signatures all match

[19:42] <Zoffix> I thought it'd replace the 6.c stuff... 

[19:43] <Zoffix> lizmat++ # weeekly

[19:44] <Zoffix> And I'm guessing if I define new versions of infix:</> in 6.d, any place that uses that op in 6.c setting would still get 6.c versions?

[19:44] <Zoffix> The 6.d version switching stuff sure looked a lot more complex in my head :)

[19:48] <Zoffix> yup, 6.c core still uses 6.c versions of the op.

[19:49] <Zoffix> and it's used all over the shop in trig routines.

[19:54] <Geth> ¦ 6.d-prep: 12b28ede2f | (Zoffix Znet)++ | 2 files

[19:54] <Geth> ¦ 6.d-prep: Defer IEEE-fication of / to later versions

[19:54] <Geth> ¦ 6.d-prep: 

[19:54] <Geth> ¦ 6.d-prep: Tried implementing it, but hitting a problem on the same scope

[19:54] <Geth> ¦ 6.d-prep: as R#1289 https://github.com/rakudo/rakudo/issues/1289

[19:54] <Geth> ¦ 6.d-prep: 

[19:54] <Geth> ¦ 6.d-prep: Basically the 6.d verions of the ops are currently loaded as if

[19:54] <synopsebot> R#1289 [open]: https://github.com/rakudo/rakudo/issues/1289 [6.e] Implement a Way to Know Caller's Language

[19:54] <Geth> ¦ 6.d-prep: they were just comming from a module and aren't visible by the

[19:54] <Geth> ¦ 6.d-prep: rest of the 6.c setting. There's a ton of trig and other math

[19:54] <Geth> ¦ 6.d-prep: ops that aren't affected by the change, so I'm deferring it, until

[19:54] <Geth> ¦ 6.d-prep: we figure out R#1289 and get a clearer picture on caller's lang ver.

[19:54] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/12b28ede2f

[19:58] <Zoffix> ZofBot: just push everything to 6.e and we can release 6.d tomorrow! >:}

[19:59] *** Zoffix left
[20:09] <Geth> ¦ rakudo: f43f118ab8 | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[20:09] <Geth> ¦ rakudo: Do the range optimization a bit differently

[20:09] <Geth> ¦ rakudo: 

[20:09] <Geth> ¦ rakudo: Instead of returning the value, return the QAST that is needed.  This

[20:09] <Geth> ¦ rakudo: should allow for some more flexibility and other optimizations.

[20:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f43f118ab8

[20:19] *** ufobat___ left
[20:56] <Geth> ¦ nqp: 16745aee8a | (Paweł Murias)++ | src/vm/js/Operations.nqp

[20:56] <Geth> ¦ nqp: [js] Impelement _nd ops

[20:56] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/16745aee8a

[20:56] <Geth> ¦ nqp: 9ec419223f | (Paweł Murias)++ | t/nqp/067-container.t

[20:56] <Geth> ¦ nqp: Test _nd ops

[20:56] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9ec419223f

[20:59] *** Ven`` joined
[21:15] *** skids left
[21:31] <lucasb> I tried to golf R#2151

[21:31] <synopsebot> R#2151 [open]: https://github.com/rakudo/rakudo/issues/2151 Grammar flickering between working and not working on `:sym` rules

[21:31] <lucasb> arrived at this: https://gist.github.com/lucasbuchala/7d51f0f809c0d8b3397d48fc74f76338

[21:32] <lucasb> someone should golf even more

[21:33] <lucasb> sometimes it matches <end1>, other times it fails to match <end2>

[21:33] <lucasb> (if someone confirm the behavior, please tell :)

[21:34] <AlexDaniel> e: https://gist.github.com/AlexDaniel/8d1a3739b5fa70fb965d88b57db9dff1

[21:34] <evalable6> AlexDaniel, Using file “main.p6” as a main file, other files are placed in “sandbox/”

[21:34] <evalable6> AlexDaniel, rakudo-moar f43f118ab: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /home/bisectable/git/wh…»

[21:34] <evalable6> AlexDaniel, Full output: https://gist.github.com/607b0949c88359f715fdf08b91a92b3c

[21:36] <AlexDaniel> ah I know

[21:36] <AlexDaniel> e: https://gist.github.com/AlexDaniel/8d1a3739b5fa70fb965d88b57db9dff1

[21:36] <evalable6> AlexDaniel, Using file “runner.p6” as a main file, other files are placed in “sandbox/”

[21:36] <evalable6> AlexDaniel, rakudo-moar f43f118ab: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /home/bisectable/git/wh…»

[21:36] <evalable6> AlexDaniel, Full output: https://gist.github.com/0512ae33d7b58402a91be36b30d208ba

[21:36] <AlexDaniel> e: https://gist.github.com/AlexDaniel/8d1a3739b5fa70fb965d88b57db9dff1

[21:36] <evalable6> AlexDaniel, Using file “runner.p6” as a main file, other files are placed in “sandbox/”

[21:36] <evalable6> AlexDaniel, rakudo-moar f43f118ab: OUTPUT: «end1␤»

[21:36] <AlexDaniel> e: https://gist.github.com/AlexDaniel/8d1a3739b5fa70fb965d88b57db9dff1

[21:36] <evalable6> AlexDaniel, Using file “runner.p6” as a main file, other files are placed in “sandbox/”

[21:36] <evalable6> AlexDaniel, rakudo-moar f43f118ab: OUTPUT: «end1␤»

[21:36] <AlexDaniel> e: https://gist.github.com/AlexDaniel/8d1a3739b5fa70fb965d88b57db9dff1

[21:36] <evalable6> AlexDaniel, Using file “runner.p6” as a main file, other files are placed in “sandbox/”

[21:36] <evalable6> AlexDaniel, rakudo-moar f43f118ab: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /home/bisectable/git/wh…»

[21:36] <evalable6> AlexDaniel, Full output: https://gist.github.com/9bef07b1c6141ce3129ce07d3bdbf34c

[21:37] <AlexDaniel> lucasb: so that's the issue?

[21:37] <AlexDaniel> yeah

[21:39] <AlexDaniel> ok it feels like I can't reproduce it on anything earlier than 2018.05

[21:39] <AlexDaniel> let's add a loop there… :)

[21:42] <AlexDaniel> bisect: old=2018.03 https://gist.github.com/AlexDaniel/8d1a3739b5fa70fb965d88b57db9dff1

[21:42] <bisectable6> AlexDaniel, Using file “runner.p6” as a main file, other files are placed in “sandbox/”

[21:42] <bisectable6> AlexDaniel, Bisecting by exit code (old=2018.03 new=f43f118). Old exit code: 0

[21:43] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/4cf4acdc17f97993ea2b366cc0138e38

[21:43] <bisectable6> AlexDaniel, (2018-04-25) https://github.com/rakudo/rakudo/commit/6c1983a97c6800c027fa7a5c4380d6f0a07b9361

[21:43] <AlexDaniel> b2eb9e1e7 Randomly seed a hash secret to mitigate ease of DOS attack

[21:43] <AlexDaniel> that sound related

[21:44] <AlexDaniel> c: 6c1983a97c^,6c1983a97c https://gist.github.com/AlexDaniel/8d1a3739b5fa70fb965d88b57db9dff1

[21:44] <committable6> AlexDaniel, Using file “runner.p6” as a main file, other files are placed in “sandbox/”

[21:44] <committable6> AlexDaniel, https://gist.github.com/36acfe13be2ce080dbd4859abe780b07

[21:44] <lucasb> the commit "For NFAs with many codepoints, use binary search"?

[21:44] <lucasb> ah, hash order you mean

[21:45] <AlexDaniel> maybe, but the fluctuating nature suggests it's hash related

[21:54] *** pmurias left
[21:54] *** pmurias joined
[21:59] <Geth> ¦ rakudo: 7043559bbb | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[21:59] <Geth> ¦ rakudo: Make the for ^$max { } optimization also work

[21:59] <Geth> ¦ rakudo: 

[21:59] <Geth> ¦ rakudo: This codegens the optimized loop also when either end of the range

[21:59] <Geth> ¦ rakudo: specification is a native int *variable*.  This makes for loops like

[21:59] <Geth> ¦ rakudo: this about 1.35x as fast (with only 10% of the call frames):

[21:59] <Geth> ¦ rakudo: 

[21:59] <Geth> ¦ rakudo:    my int $max = 1_000_000;

[21:59] <Geth> ¦ rakudo:    for ^$max { }

[21:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7043559bbb

[22:00] <lizmat> timotimo: ^^^

[22:00] <lizmat> :-)

[22:01] <timotimo> phew, i hope that's very, very robust :)

[22:05] <lizmat> I think it is

[22:06] <lizmat> timotimo: it basically is the same structure, but instead of initialiizing the variables from constants, it can also initialize them from native integers

[22:09] <lizmat> I think I can even make it 2x as fast still if it is possible to tweak the signature of the block to -> int $_ 

[22:09] <lizmat> if it didn't have any signature specified yet

[22:09] *** lucasb left
[22:09] <lizmat> but that's for another day

[22:09] <lizmat> good night, #perl6-dev!

[22:17] *** pmurias left
[22:23] <timotimo> lizmat: that's not safe if $_ gets assigned to within the block, isn't it raw by default?

[22:23] <timotimo> m: for ^100 { $_ = "hi" }

[22:23] <camelia> rakudo-moar 7043559bb: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[22:23] <timotimo> oh, ok

[22:23] <timotimo> that's good, then

[22:30] *** Ven`` left
[22:30] *** go|dfish joined
[22:36] *** Ven`` joined
[22:55] *** Ven`` left
[22:55] *** Ven` joined
[23:02] *** Ven` left
[23:59] <MasterDuke> https://github.com/rakudo/rakudo/issues/1955

