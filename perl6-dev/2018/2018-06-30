[00:11] *** MasterDuke left
[00:51] *** MasterDuke joined
[01:51] <Geth> ¦ nqp/new-runner-enable-execname: 2e65fa1f0d | 陈梓立++ (committed using GitHub Web editor) | t/nqp/114-pod-panic.t

[01:51] <Geth> ¦ nqp/new-runner-enable-execname: Update 114-pod-panic.t

[01:51] <Geth> ¦ nqp/new-runner-enable-execname: review: https://github.com/perl6/nqp/commit/2e65fa1f0d

[02:01] *** MasterDuke left
[02:16] <Geth> ¦ nqp/W4anD0eR96-patch-1: 1c59d2b68c | 陈梓立++ (committed using GitHub Web editor) | t/nqp/022-optional-args.t

[02:16] <Geth> ¦ nqp/W4anD0eR96-patch-1: Test invalid syntax on optional args

[02:16] <Geth> ¦ nqp/W4anD0eR96-patch-1: review: https://github.com/perl6/nqp/commit/1c59d2b68c

[02:16] <Geth> ¦ nqp: W4anD0eR96++ created pull request #480: Test invalid syntax on optional args

[02:16] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/480

[02:17] *** MasterDuke joined
[02:29] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1995: Issue 1975: Fix WIN32 Proc::Async process termination issue 

[02:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1995

[02:30] <MasterDuke> nqp: say(nqp::tc("hello world"))

[02:30] <camelia> nqp-moarvm: OUTPUT: «HELLO WORLD␤»

[02:32] <MasterDuke> nqp: say(nqp::tclc("hello world"))

[02:32] <camelia> nqp-moarvm: OUTPUT: «Hello world␤»

[02:32] <MasterDuke> m: say "hello world".tc

[02:32] <camelia> rakudo-moar 3cbf25e0f: OUTPUT: «Hello world␤»

[02:32] <MasterDuke> m: say "hello world".tclc

[02:32] <camelia> rakudo-moar 3cbf25e0f: OUTPUT: «Hello world␤»

[02:51] *** perlpilot left
[02:54] *** perlpilot joined
[03:19] <AlexDaniel> 6c: say Rat.new(10⁴⁰⁰, 9⁹⁹⁹)

[03:19] <committable6> AlexDaniel, https://gist.github.com/3f3c4f435f5d19d499c48befdf1eefd1

[03:19] <AlexDaniel> ↑ that's an interesting progression

[03:34] *** AlexDaniel left
[03:34] *** AlexDaniel joined
[04:08] <Geth> ¦ nqp: 1c59d2b68c | 陈梓立++ (committed using GitHub Web editor) | t/nqp/022-optional-args.t

[04:08] <Geth> ¦ nqp: Test invalid syntax on optional args

[04:08] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1c59d2b68c

[04:08] <Geth> ¦ nqp: 0d797a89f3 | 陈梓立++ (committed using GitHub Web editor) | t/nqp/022-optional-args.t

[04:08] <Geth> ¦ nqp: Merge pull request #480 from perl6/W4anD0eR96-patch-1

[04:08] <Geth> ¦ nqp: 

[04:08] <Geth> ¦ nqp: Test invalid syntax on optional args

[04:08] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0d797a89f3

[04:10] <Geth> ¦ nqp/new-runner-enable-execname: 7fe69fc6cd | 陈梓立++ (committed using GitHub Web editor) | t/nqp/114-pod-panic.t

[04:10] <Geth> ¦ nqp/new-runner-enable-execname: Update 114-pod-panic.t

[04:10] <Geth> ¦ nqp/new-runner-enable-execname: review: https://github.com/perl6/nqp/commit/7fe69fc6cd

[04:12] <Geth> ¦ nqp/W4anD0eR96-patch-2: 28908b2d5b | 陈梓立++ (committed using GitHub Web editor) | t/nqp/114-pod-panic.t

[04:12] <Geth> ¦ nqp/W4anD0eR96-patch-2: Update 114-pod-panic.t

[04:12] <Geth> ¦ nqp/W4anD0eR96-patch-2: review: https://github.com/perl6/nqp/commit/28908b2d5b

[04:13] <Geth> ¦ rakudo: zoffixznet self-assigned Crazy Rats stringify as 0.00000…000Inf https://github.com/rakudo/rakudo/issues/1996

[04:17] *** AlexDaniel left
[04:17] *** AlexDaniel joined
[04:58] *** perlpilot left
[05:44] <lizmat> Files=1242, Tests=76407, 320 wallclock secs (15.31 usr  5.24 sys + 2225.32 cusr 221.69 csys = 2467.56 CPU)

[06:23] *** CIAvash[m] left
[06:23] *** AlexDaniel`` left
[06:24] *** ilmari[m] left
[06:26] *** benchable6 left
[06:26] *** greppable6 left
[06:26] *** squashable6 left
[06:26] *** bisectable6 left
[06:26] *** releasable6 left
[06:26] *** releasable6 joined
[06:26] *** squashable6 joined
[06:26] *** greppable6 joined
[06:26] *** bisectable6 joined
[06:26] *** benchable6 joined
[06:31] *** lizmat left
[06:54] *** lizmat joined
[07:05] *** MasterDuke left
[07:06] <lizmat> after a night's sleep, I've come to the conclusion that:

[07:07] <lizmat> 1. we cannot have similar .perl for Baggy and Setty

[07:07] <lizmat> 2. that the problem is really in the .perl ification of QuantHashes, *not* in the itemization of Pairs

[07:08] <lizmat> we want the following both to yield the same Bag:

[07:08] <lizmat> (a => 42, b => 666).Bag

[07:08] <lizmat> [a => 42, b => 666].Bag

[07:09] <lizmat> if however we would make the interpretation of Pairs dependent on the itemization, then the latter would change in semantics

[07:09] <lizmat> as the array iterator delivers containers, rather than values

[07:11] <lizmat> so: perlification of Settys will use 'Set.new()', as that will take all values given at "face value" (aka no special handling for Pairs)

[07:12] <lizmat> perlification of Baggys will use ().Bag syntax *and* not special case when the value is one

[07:13] <lizmat> if a Baggy then contains a Pair as a key with value 1, it will be rendered as ":foo => 1" rather than as ":foo"

[07:13] <lizmat> removing the ambiguity between  a => 42 => 1 and a => 42

[07:35] *** stmuk_ joined
[07:35] *** ilmari[m] joined
[07:46] <[TuxCM]> Rakudo version 2018.06-44-g3cbf25e0f - MoarVM version 2018.06-34-g411f73fdc

[07:46] <[TuxCM]> csv-test-xs-20      0.427 -  0.464

[07:46] <[TuxCM]> csv-ip5xs           0.896 -  0.936

[07:46] <[TuxCM]> test-t --race       0.966 -  0.987

[07:46] <[TuxCM]> test-t              2.300 -  2.384

[07:46] <[TuxCM]> csv-ip5xs-20        7.406 -  7.886

[07:46] <[TuxCM]> test                8.650 -  8.799

[07:46] <[TuxCM]> test-t-20 --race   14.309 - 15.343

[07:46] <[TuxCM]> csv-parser         24.259 - 24.894

[07:46] <[TuxCM]> test-t-20          42.268 - 42.331

[08:03] *** AlexDaniel`` joined
[08:03] *** CIAvash[m] joined
[08:13] <Geth> ¦ rakudo: ddf496c72b | (Elizabeth Mattijsen)++ | 2 files

[08:13] <Geth> ¦ rakudo: Fix roundtrippability of QuantHashes

[08:13] <Geth> ¦ rakudo: 

[08:13] <Geth> ¦ rakudo: - Set(|Hash) perlifies as Foo.new(...)

[08:13] <Geth> ¦ rakudo: - Bag(|Hash)|Mix(|Hash) perlifies as (...).Baggy (as coercer)

[08:13] <Geth> ¦ rakudo: - No longer specical case frequency/weight of 1

[08:13] <Geth> ¦ rakudo: 

[08:13] <Geth> ¦ rakudo: This seems inconsistent, but there is a reason for this.

[08:13] <Geth> ¦ rakudo: <…commit message has 22 more lines…>

[08:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ddf496c72b

[10:14] *** pmurias joined
[10:53] *** MasterDuke joined
[10:59] <MasterDuke> pmurias: around?

[11:01] <dogbert17> stupid question of the day. Is Hash.kv known to be slower than using Hash.keys and then retrieving the value using the key?

[11:03] <dogbert17> m: my %colors = ("00" => ["1","2"], "11" => ["0","2"]); for ^1000000 { for %colors.kv -> $k, $v {my $s = "test" ~ $v[1]; }}; say time - INIT time

[11:03] <camelia> rakudo-moar ddf496c72: OUTPUT: «9␤»

[11:03] <dogbert17> m: my %colors = ("00" => ["1","2"], "11" => ["0","2"]); for ^1000000 { for %colors.keys -> $k {my $s = "test" ~ %colors{$k}[1]; }}; say time - INIT time

[11:04] <camelia> rakudo-moar ddf496c72: OUTPUT: «5␤»

[11:05] <lizmat> dogbert17: I am not surprised: the iterator for .kv is much more complex, as it needs to keep state between alternating between key and value

[11:06] <lizmat> iterating over a hash could maybe be faster using .pairs (or nothing, as .pairs is implicit)

[11:06] <lizmat> and then get the .key / .value 

[11:06] <dogbert17> lizmat: thx, so if you're after speed, kv should be avoided in preference of keys or pairs then

[11:07] <lizmat> well, benchmark to be sure, I would say

[11:07] <dogbert17> :)

[11:07] <lizmat> but .kv is simply more complicated, so slower

[11:08] <dogbert17> m: my %colors = ("00" => ["1","2"], "11" => ["0","2"]); for ^1000000 { for %colors.pairs -> $p {my $s = "test" ~ $p.value[1]; }}; say time - INIT time # like this

[11:08] <camelia> rakudo-moar ddf496c72: OUTPUT: «5␤»

[11:09] <dogbert17> if I did that right it runs quite a bit faster than kv

[11:09] <lizmat> dogbert17: s/time/now

[11:09] <dogbert17> oops

[11:09] <dogbert17> m: my %colors = ("00" => ["1","2"], "11" => ["0","2"]); for ^1000000 { for %colors.pairs -> $p {my $s = "test" ~ $p.value[1]; }}; say now - INIT now # like this

[11:09] <camelia> rakudo-moar ddf496c72: OUTPUT: «5.233219␤»

[11:10] <lizmat> yes, otherwise you only get second granularity

[11:10] <dogbert17> m: my %colors = ("00" => ["1","2"], "11" => ["0","2"]); for ^1000000 { for %colors.kv -> $k, $v {my $s = "test" ~ $v[1]; }}; say now - INIT now

[11:10] <camelia> rakudo-moar ddf496c72: OUTPUT: «9.0061334␤»

[11:11] <dogbert17> cool, I'm looking at onw of rindolf's benchmarks where p5 crushes p6. He uses kv a lot there

[11:13] <MasterDuke> pmurias: is the argument to the @Deserializer annotation needed/used for anything?

[11:17] <pmurias> MasterDuke: it's used when building the truffle ast

[11:18] <pmurias> when passing the array structure to nqp::runtruffle the argument is used for the ast name (that's in the first array element)

[11:18] <pmurias> MasterDuke: if the argument is not present it's generated from the class name

[11:19] <MasterDuke> pmurias: not all the annotations had an argument, but that could be ok then?

[11:19] <pmurias> MasterDuke: yes, it's generated by default

[11:20] <pmurias> MasterDuke: so for NQPConcatNode it ends up being "concat"

[11:21] <MasterDuke> pmurias: so it's only needed for the ones with '-' in the name?

[11:22] <MasterDuke> btw, i tried doing chars again, but get `org.perl6.nqp.truffle.MalformedAstException: Expected an AST node that produces a str`

[11:25] <pmurias> MasterDuke: yes, the one with - name are internal ones, for all the ones called after NQP ops I want stuff to be autogenerated

[11:25] <pmurias> MasterDuke: hmm, what are you passing as an argument to chars?

[11:27] <pmurias> MasterDuke: what are you testing you chars on

[11:27] <pmurias> ?

[11:27] <MasterDuke> heh, nm, just spotted my typo. work now

[11:28] <MasterDuke> *works

[11:29] <MasterDuke> pmurias: also, i assume the imports in TruffleCompiler.java for the nodes that now use the Deserializer aren't needed?

[11:29] <MasterDuke> e.g. `import org.perl6.nqp.truffle.nodes.expression.NQPUcNode;`

[11:32] <pmurias> MasterDuke: yes, those are missed leftovers

[11:33] <Geth> ¦ nqp/truffle: c2120c5385 | (Paweł Murias)++ | 2 files

[11:33] <Geth> ¦ nqp/truffle: [truffle] Generate op classes for ops that have _i, _s, etc. suffixes

[11:33] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/c2120c5385

[11:34] <pmurias> MasterDuke: btw too see the generated code (TruffleCompilerGen and stuff that truffle generated) I add a -s generated-stuff-output-dir to the javac call in the Makefile

[11:34] <pmurias> I have to leave for lunch at grandparents place &

[11:35] <MasterDuke> thanks, i'll add the most recent minor changes i made

[11:35] * pmurias fixes rushed last commit 

[11:36] <MasterDuke> pmurias: when you're free, i'd be curious to heard how add_i and such should be done

[11:37] <Geth> ¦ nqp/truffle: 0db8567297 | (Paweł Murias)++ | src/vm/jvm/dsl/org/perl6/nqp/dsl/Processor.java

[11:37] <Geth> ¦ nqp/truffle: [truffle] Fix previous commit

[11:37] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/0db8567297

[11:39] <pmurias> MasterDuke: for the _i ops I think just using the boilerplate generation script and filling the implementation in should work

[11:39] <pmurias> MasterDuke: I just updated the script to handle _i suffixes :)

[11:39] <pmurias> got to run for real &

[12:01] <Geth> ¦ nqp: 4971fb59a6 | 陈梓立++ (committed using GitHub Web editor) | t/nqp/114-pod-panic.t

[12:01] <Geth> ¦ nqp: More robust test

[12:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4971fb59a6

[12:01] <Geth> ¦ nqp: 28908b2d5b | 陈梓立++ (committed using GitHub Web editor) | t/nqp/114-pod-panic.t

[12:01] <Geth> ¦ nqp: Update 114-pod-panic.t

[12:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/28908b2d5b

[12:01] <Geth> ¦ nqp: 2d5d8868c0 | 陈梓立++ (committed using GitHub Web editor) | t/nqp/114-pod-panic.t

[12:01] <Geth> ¦ nqp: Merge pull request #478 from perl6/W4anD0eR96-patch-2

[12:01] <Geth> ¦ nqp: 

[12:01] <Geth> ¦ nqp: More robust test

[12:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2d5d8868c0

[12:17] <Geth> ¦ nqp/truffle: 4 commits pushed by (Daniel Green)++

[12:17] <Geth> ¦ nqp/truffle: 614a894cd0 | [truffle] Add a ';' to generated return statement

[12:17] <Geth> ¦ nqp/truffle: a4cbc60613 | [truffle] Implement nqp::chars

[12:17] <Geth> ¦ nqp/truffle: c79cfa75eb | [truffle] Implement nqp::tc

[12:17] <Geth> ¦ nqp/truffle: aeeb3af724 | [truffle] Remove no longer needed imports

[12:17] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/compare/0db8567297b9...aeeb3af724e0

[12:20] *** [Tux] left
[12:58] *** llfourn left
[13:01] *** llfourn joined
[13:01] *** Zoffix left
[14:02] <Geth> ¦ rakudo: 64bdb3dd7b | (Moritz Lenz)++ | lib/Test.pm6

[14:02] <Geth> ¦ rakudo: Test.pm6: small style improvement

[14:02] <Geth> ¦ rakudo: 

[14:02] <Geth> ¦ rakudo: "until !" better written as "while"

[14:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/64bdb3dd7b

[14:54] <Geth> ¦ nqp: dbee32dc1c | MasterDuke17++ (committed using GitHub Web editor) | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java

[14:54] <Geth> ¦ nqp: Just typo fixes in comments

[14:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/dbee32dc1c

[14:59] *** lizmat left
[15:11] *** Ven`` joined
[15:16] *** MasterDuke left
[15:25] *** Ven`` left
[15:26] *** Ven`` joined
[16:10] *** Ven`` left
[16:11] *** Ven`` joined
[18:11] *** Ven`` left
[18:15] *** Ven`` joined
[18:27] *** Ven`` left
[18:28] *** Ven`` joined
[18:37] *** llfourn left
[18:41] *** llfourn joined
[19:17] *** MasterDuke joined
[19:28] *** Ven`` left
[19:46] *** microfed joined
[21:02] *** pmurias left
[21:07] *** MasterDuke left
[21:10] *** lizmat joined
[21:20] <lizmat> weekly: http://blog.theperlshop.com/2018/06/28/how-viable-is-perl/?utm_source=blogs.perl.org&utm_medium=blog&utm_campaign=cross-post

[21:20] <notable6> lizmat, Noted!

[21:29] *** ggoebel left
[21:45] *** ggoebel joined
[22:14] *** dalek left
[22:22] <samcv> how do i divide a Rat without getting a Num?

[22:29] <AlexDaniel> use FatRat?

[22:30] <samcv> thanks :)

[22:57] *** Ven`` joined
[23:09] *** Ven`` left
[23:27] *** synopsebot left
