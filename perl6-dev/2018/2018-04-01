[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 10 ballots submitted by 7 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 23! Congratulations to raschipi! You win a roll of duck tape!

[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 0 ballots submitted by 0 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 42! Congratulations to Zoffix! You win a can of WD40!

[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 0 ballots submitted by 0 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 42! Congratulations to Zoffix! You win a roll of duck tape!

[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 0 ballots submitted by 0 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 42! Congratulations to Zoffix! You win a roll of duck tape!

[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 0 ballots submitted by 0 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 42! Congratulations to Zoffix! You win a can of WD40!

[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 0 ballots submitted by 0 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 42! Congratulations to Zoffix! You win a can of WD40!

[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 0 ballots submitted by 0 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 42! Congratulations to Zoffix! You win a roll of duck tape!

[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 0 ballots submitted by 0 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 42! Congratulations to Zoffix! You win a roll of duck tape!

[00:01] <Zoffix> wonder what happened with it :/

[00:03] <buggable> And the winning number is 42! Congratulations to Zoffix! You win a roll of duck tape!

[00:03] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 0 ballots submitted by 0 users! DRUM ROLL PLEASE!...

[00:03] <Zoffix> :|

[00:04] <Zoffix> I'd wager latest rakudo got some bug with Promise.in or DateTime :/

[00:05] <Zoffix> well, 2018.02.1

[00:05] <buggable> And the winning number is 42! Congratulations to Zoffix! You win a roll of duck tape!

[00:05] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 0 ballots submitted by 0 users! DRUM ROLL PLEASE!...

[00:06] <buggable> And the winning number is 42! Congratulations to Zoffix! You win a roll of duck tape!

[00:11] <Zoffix> Ah, nm, it's actually a bug fix to Promise.in with negative numbers hanging that was masking a bug I made with date calculation

[00:13] <Zoffix> m: say DateTime.now

[00:13] <camelia> rakudo-moar dc1a3f5a3: OUTPUT: «2018-04-01T02:13:53.402277+02:00␤»

[00:14] <Zoffix> ^ that's still 31st on my server

[00:14] <Zoffix> m: say DateTime.now.later(:month).clone(:0timezone)

[00:14] <camelia> rakudo-moar dc1a3f5a3: OUTPUT: «2018-05-01T02:14:16.996120Z␤»

[00:14] <Zoffix> which makes ^ that 1st of April, instantly triggering the thing :)

[00:14] <Zoffix> c: 2017.07,HEAD await Promise.in(-2).then: { say "meows" }

[00:15] <committable6> Zoffix, ¦2017.07: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»» ¦HEAD(dc1a3f5): «meows␤»

[02:40] <AlexDaniel> reportable6: 2018-03-01T00:00:00Z 2018-04-01T00:00:00Z

[02:40] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[02:41] <reportable6> AlexDaniel, https://gist.github.com/45a2df11156178a841f839d77296f174

[07:07] <Zoffix> April fools!

[07:07] <Zoffix> :)

[09:24] <Geth_> ¦ nqp/nqpmake: 5 commits pushed by (Stefan Seifert)++

[09:24] <Geth_> ¦ nqp/nqpmake: 7a0be3e59a | WIP parallelization

[09:24] <Geth_> ¦ nqp/nqpmake: 8231bf3431 | First step of inverting control flow - pull recipe commands

[09:24] <Geth_> ¦ nqp/nqpmake: 47797c2209 | Finish inversion of control - pull next job

[09:24] <Geth_> ¦ nqp/nqpmake: 61ae1a61b9 | Build 3 jobs in parallel

[09:24] <Geth_> ¦ nqp/nqpmake: 891b0f17d4 | Remove old non-parallel make process

[09:24] <Geth_> ¦ nqp/nqpmake: review: https://github.com/perl6/nqp/compare/dc717a8b7716...891b0f17d448

[09:25] <nine> No April fools joke - a make in NQP supporting parallel build in 355 LOC

[09:26] <nine> Still got a few issues to solve, but all in all it's pretty much there

[09:49] <moritz> nine: can it build NQP? :-)

[09:55] <Geth_> ¦ nqp/nqpmake: bd279a021f | (Stefan Seifert)++ | tools/make.nqp

[09:55] <Geth_> ¦ nqp/nqpmake: Fix error if less than 3 jobs are buildable initially

[09:55] <Geth_> ¦ nqp/nqpmake: review: https://github.com/perl6/nqp/commit/bd279a021f

[09:55] <Geth_> ¦ nqp/nqpmake: cfff514fc3 | (Stefan Seifert)++ | tools/make.nqp

[09:55] <Geth_> ¦ nqp/nqpmake: Fix error in detection of prerequisite updates

[09:55] <Geth_> ¦ nqp/nqpmake: review: https://github.com/perl6/nqp/commit/cfff514fc3

[09:55] <Geth_> ¦ nqp/nqpmake: 800a6ef3c1 | (Stefan Seifert)++ | tools/make.nqp

[09:55] <Geth_> ¦ nqp/nqpmake: Fix hang when we don't need to build a target

[09:55] <Geth_> ¦ nqp/nqpmake: review: https://github.com/perl6/nqp/commit/800a6ef3c1

[09:55] <nine> This takes care of the issues I mentioned.

[09:55] <nine> moritz: it can indeed

[09:56] <moritz> woah

[09:57] <nine> nqp and rakudo but not yet MoarVM as the latter uses GNU extensions in its Makefile and I've yet to add support for those

[10:03] <Geth_> ¦ nqp/nqpmake: 20d1249bda | (Stefan Seifert)++ | tools/make.nqp

[10:03] <Geth_> ¦ nqp/nqpmake: Build first non-special target if no explicit target is given

[10:03] <Geth_> ¦ nqp/nqpmake: review: https://github.com/perl6/nqp/commit/20d1249bda

[10:19] <robertle_> nine: is it free of the weird default rules? that would make it a better make than the real one (in my opinion at least)

[10:20] <robertle_> implicit rules, that is

[11:01] <Kaiepi> i think the new  nqp makefile looks a lot more legible

[11:02] <timotimo> did the makefile itself change, too?

[11:04] <Kaiepi> nah, this looks like it parses and runs them

[11:15] <nine> robertle_: I implemented exactly as much as rakudo and nqp need, so no default rules yet

[11:20] <Kaiepi> can't wait ofor rakudo to get faster to compile

[11:24] <timotimo> oh the plight of the core developer :)

[11:24] <Kaiepi> i've noticed that :3

[11:25] <Kaiepi> nowhere near as bad as llvm but irksome when debugging something minor

[11:27] <timotimo> you can often get around that by prototyping your changes in a smaller file together with tests, if needed you can use "augment" to change existing classes

[11:30] <Kaiepi> i've been doing that a little bit of that for changes to rakudo

[11:30] <Kaiepi> lots of test.c, test.o, libtest.so floating around from nativecall tinkering

[11:31] <Kaiepi> speaking of which

[11:32] <Kaiepi> would a sub to preload symbols from libraries be a good idea to have for other libraries that need them to run?

[11:33] <timotimo> how do you mean?

[11:34] <timotimo> if you mean nativecall, if the libraries are "easy to find", then the dynamic linker would - i assume - find them by themselves when they are needed

[11:35] <Kaiepi> editline needs symbols from ncurses, termcap, and wherever FILE comes from, but i don't have a very good way to load them

[11:36] <Kaiepi> best i can do for now is run some of their subs in an INIT phaser in each module editline's in

[11:37] <Kaiepi> same thing happens to readline on freebsd as well

[11:37] <timotimo> isn't FILE just a #define or typedef?

[11:38] <Kaiepi> i'd need to check, but i think it differs between systems

[11:41] <timotimo> of course it does %)

[11:42] <timotimo> it's not very fun to have to deal with #define things with an FFI

[11:42] <timotimo> because the only way to get at them (if the library doesn't cooperate) is to parse the header files

[11:43] <Kaiepi> yikes

[11:44] <timotimo> well, another way is to ask a C compiler to do that for you

[11:44] <timotimo> buggable: eco gptrixie

[11:44] <buggable> timotimo, App::GPTrixie 'Generate NativeCall code from C headers file': https://github.com/Skarsnik/gptrixie

[11:50] <Kaiepi> that looks really useful

[11:51] <timotimo> it's not easy to set up, though. you need the exact right version of this castxml thing

[11:53] <dogbert17> timotimo: I bleive there might be a bug in your 'dont_gc_in_spesh' branch

[11:53] <dogbert17> *believe

[11:53] <timotimo> cool

[11:54] <dogbert17> several small scripts makes valgrind complain

[11:54] <dogbert17> ==13920== Conditional jump or move depends on uninitialised value(s)

[11:54] <dogbert17> ==13920==    at 0x50AAE83: worker (worker.c:16)

[11:54] <dogbert17> I guess that's here: https://github.com/MoarVM/MoarVM/blob/master/src/spesh/worker.c

[11:55] <dogbert17> does it seem plausible?

[12:01] <dogbert17> timotimo: do you need more info, e.g. example code etc

[12:02] <timotimo> huh? there is no conditional there though?

[12:04] <dogbert17> the next line in the trace is https://github.com/MoarVM/MoarVM/blob/master/src/core/threads.c#L59

[12:05] <timotimo> yeah, that's how the worker gets launched

[12:06] <timotimo> that example code could be interesting

[12:07] <dogbert17> ok, sec

[12:08] <dogbert17> https://gist.github.com/dogbert17/8156ed11b8d321db31543540f81ee24e

[12:12] <timotimo> does it only happen a single time?

[12:12] <dogbert17> yeah

[12:12] <timotimo> only in my branch?

[12:13] <dogbert17> it doesn't happen on HEAD

[12:13] <timotimo> pretty weird.

[12:14] <dogbert17> yes

[12:14] <timotimo> wait, line 16

[12:15] <timotimo> of course, that's an MVMROOT

[12:15] <timotimo> everything inside the { } will be treated as "on line 16"

[12:15] <timotimo> can you throw out the MVMROOT2 line and the corresponding }); and instead put:

[12:15] <dogbert17> the ROOT of all problems :)

[12:15] <timotimo> MVM_gc_temp_root_push(tc, (MVMCollectable**)&updated_static_frames); MVM_gc_temp_root_push(tc, (MVMCollectable**)&previous_static_frames);

[12:16] <timotimo> and at the bottom MVM_gc_temp_root_pop_n(tc, 2)

[12:16] <timotimo> ;

[12:17] <dogbert17> hmm, let me try

[12:17] <tbrowder_> .tell Zoffix i took a quick look at doc build and saw a couple msgs about pod table issues but i can’t duplicate it again

[12:17] <yoleaux> tbrowder_: I'll pass your message to Zoffix.

[12:18] <dogbert17> timotimo: src/spesh/worker.c:16:5: warning: implicit declaration of function ‘MVM_gc_temp_root_push’ [-Wimplicit-function-declaration]

[12:18] <timotimo> oh, switch root and temp around

[12:20] <dogbert17> ./libmoar.so: undefined reference to `MVM_gc_temp_root_push'

[12:20] <dogbert17> I had forgotten a semicolon

[12:21] <timotimo> yeah, has to be root_temp not temp_root

[12:21] <dogbert17> ah

[12:22] <dogbert17> ok, now it builds

[12:23] <dogbert17> now I get: ==20304== Conditional jump or move depends on uninitialised value(s)

[12:23] <dogbert17> ==20304==    at 0x50AAE83: worker (worker.c:45)

[12:23] <dogbert17> so a different line

[12:24] <dogbert17> the 'MVM_spesh_candidate_add' line

[12:25] <dogbert17> eh, I'm full of it :( it's another ' MVMROOT(tc, sl, {'

[12:28] <timotimo> :D

[12:34] <dogbert17> so something fishy is going one here

[12:59] <lizmat> Files=1238, Tests=76257, 307 wallclock secs (14.46 usr  5.24 sys + 2104.57 cusr 201.37 csys = 2325.64 CPU)

[13:11] <Geth_> ¦ nqp: 6b49767ec5 | usev6++ | 2 files

[13:11] <Geth_> ¦ nqp: [JVM] Fix nqp::takedispatcher in non-void context

[13:11] <Geth_> ¦ nqp:

[13:11] <Geth_> ¦ nqp: Fixes https://github.com/perl6/nqp/issues/384

[13:11] <Geth_> ¦ nqp: review: https://github.com/perl6/nqp/commit/6b49767ec5

[13:51] <Geth_> ¦ nqp: 32fd547c10 | (Jeremy Studer)++ | src/vm/moar/profiler/template.html

[13:51] <Geth_> ¦ nqp: Profiler Template: Allocations modal close by btn

[13:51] <Geth_> ¦ nqp:

[13:51] <Geth_> ¦ nqp: Make Allocations modal closable by the corner X and via 'Close' button

[13:51] <Geth_> ¦ nqp: in addition to clicking outside. Small usability improvement.

[13:51] <Geth_> ¦ nqp: review: https://github.com/perl6/nqp/commit/32fd547c10

[15:14] <[Tux]> Rakudo version 2018.03-137-gdc1a3f5a3 - MoarVM version 2018.03-59-gfc1bb3126

[15:14] <[Tux]> csv-test-xs-20      0.451 -  0.465

[15:14] <[Tux]> csv-ip5xs           0.911 -  0.927

[15:14] <[Tux]> test-t --race       1.139 -  1.188

[15:14] <[Tux]> test-t              2.555 -  2.583

[15:14] <[Tux]> csv-ip5xs-20        8.984 -  9.152

[15:14] <[Tux]> test                9.849 - 10.822

[15:14] <[Tux]> test-t-20 --race   17.760 - 18.243

[15:14] <[Tux]> csv-parser         38.444 - 41.819

[15:14] <[Tux]> test-t-20          45.505 - 46.150

[15:25] <dogbert17> anyone seen this before: 'This type (<anon|34>) does not support positional operations'

[15:27] <dogbert17> it shows from time to time when running: ./perl6 --profile --profile-filename=race1.json -e 'say (^400).race(batch=>1, degree=>4).map({$_}).grep(* > 12345).elems'

[15:27] <dogbert17> the example coming from RT #128280

[15:27] <synopsebot> RT#128280 [open]: https://rt.perl.org/Ticket/Display.html?id=128280 [SEGV] core dump while profiling with a '.race'

[15:42] <jstuder> dogbert17: I've seen that error msg on the P6Opaque REPR (https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L1225)

[15:43] <jstuder> it looks like from time to time something calls low-level positional ops on an iterator

[15:45] <dogbert17> jstuder: I think you're right, for one of the crashes I got a backtrace and on top of it was: at SETTING::src/core/Iterator.pm6:69  (./CORE.setting.moarvm:push-until-lazy)

[15:51] <jstuder> yeah, don't understand why it would be performing that op on the iterator itself though

[16:10] <dogbert17> when it fails the call which displays the error msg comes from here: https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L1263

[16:12] <timotimo> have you tried passing --ll-exception to perl6?

[16:14] <dogbert17> timotimo: no but once I got this: https://gist.github.com/dogbert17/d7a1a819afdb724492d424c425f7edab

[16:14] <timotimo> yeah that's one of the iterator objects surely

[16:15] <dogbert17> gdb shows: #1  0x00007ffff7641e7f in push (tc=0x32fbe80, st=0x19e1900, root=0x333f5f8, data=0x333f610, value=..., kind=4) at src/6model/reprs/P6opaque.c:1263

[16:15] <timotimo> and MVM_dump_backtrace?

[16:15] <dogbert17> let's see :)

[16:16] <dogbert17> exactly like the gist

[16:16] <timotimo> mhm

[16:16] <timotimo> well, the debugserver would help here :P

[16:16] <timotimo> i don't have time right now

[16:17] <dogbert17> perhaps later

[16:18] <dogbert17> I've not had the chance to use that new cool feature yet :)

[17:13] <Kaypie> .magikjokku

[17:14] <Kaypie> Auuuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhino

[17:15] <timotimo> accidentally your password?

[17:44] <lizmat> Kaypie: van mij wel hoor  :-)

[17:48] <pmurias> should nqp::eqaddr(Str:U, $Str-U-from-a-different-module) be 1 everywhere?

[17:48] <pmurias> it seems to change depending if the module I'm using it uses Hash[Str:U]

[17:57] <timotimo> we probably should cache those

[17:58] <timotimo> but i imagine unless you explicitly import the one from there you'll get a "custom" one?

[17:58] <pmurias> timotimo: isn't that supposed to be cached by paramaterized type interning?

[17:59] <timotimo> it'd probably only cache Hash[Str:U] if the Str:U exactly matches?

[18:06] <lizmat> .oO( a password starting with "/" is safer in the IRC world :-)

[18:27] <pmurias> timotimo: if Hash[Str:U] is cached Str:U gets cached too

[18:31] <dogbert17> what's the correct way to install App::MoarVM::Debug? zef install doesn't seem to do it

[18:33] <dogbert17> during the test phase I get several 'last without loop construct' and then it fails

[18:35] <dogbert17> to clarify, the error messages comes when testing the dependency MoarVM::Remote:ver<0.0.1>

[18:43] <timotimo> oh, the tests may need some very special setup

[18:43] <timotimo> so try with --/test

[18:44] <dogbert17> will do, thx

[19:47] <Kaiepi> timotimo lizmat my keyboard's on the fritz

[19:48] <Kaiepi> but the aaauuuuhhhhhhhhh it typed out on its own is how i feel about it

[21:41] <Geth_> ¦ rakudo: 32b3ddc7e1 | (Elizabeth Mattijsen)++ | src/core/Order.pm6

[21:41] <Geth_> ¦ rakudo: Micro-optimize ORDER() by about 7%

[21:41] <Geth_> ¦ rakudo:

[21:41] <Geth_> ¦ rakudo: This should help a lot of infix:<cmp> usage.

[21:41] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/32b3ddc7e1

[22:34] <Geth_> ¦ rakudo: jstuder-gh++ created pull request #1680: Rewrite List cmp in NQP for faster execution

[22:34] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1680

[23:29] <Geth_> ¦ rakudo/master: 4 commits pushed by (Jeremy Studer)++, (Elizabeth Mattijsen)++

[23:29] <Geth_> ¦ rakudo/master: 0d7b42fb1a | Rewrite List cmp in NQP for faster execution

[23:29] <Geth_> ¦ rakudo/master: 126d8a843a | Further optimize nqp-ized List cmp operator

[23:29] <Geth_> ¦ rakudo/master: 082f81525c | Add laziness check in slow path

[23:29] <Geth_> ¦ rakudo/master: 7353e055cf | Merge pull request #1680 from jstuder-gh/cmp_list_in_nqp

[23:29] <Geth_> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/32b3ddc7e100...7353e055cfa6

[23:43] <Geth_> ¦ rakudo: 111f67a4bc | (Elizabeth Mattijsen)++ | src/core/Promise.pm6

[23:43] <Geth_> ¦ rakudo: Micro-optimize Promise.vow

[23:43] <Geth_> ¦ rakudo:

[23:43] <Geth_> ¦ rakudo: We can release the lock as soon as the Promise is marked that it has a

[23:43] <Geth_> ¦ rakudo: vow.  We don't actually need to create the vow before releasing the lock.

[23:43] <Geth_> ¦ rakudo: So we don't need a variable to store the vow in.

[23:43] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/111f67a4bc

[23:44] <lizmat> and that concludes my hacking for today&
