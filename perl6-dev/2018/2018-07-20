[00:06] *** eater left
[00:06] *** dogbert2 left
[00:06] *** DrForr left
[00:06] *** perlawhirl left
[00:07] *** eater joined
[00:10] *** ilmari[m] left
[00:15] *** perlawhirl joined
[00:15] *** dogbert2 joined
[00:15] *** DrForr joined
[00:48] *** ilmari[m] joined
[01:14] *** lizmat left
[01:21] *** lizmat joined
[01:35] *** AlexDaniel[m] joined
[01:35] *** tyil[m] joined
[01:35] *** CIAvash[m] joined
[01:42] *** dct left
[01:43] *** dct joined
[01:46] *** Ven`` left
[02:20] *** dct left
[02:47] *** Ven` joined
[02:52] *** Ven` left
[03:00] <releasable6> Next release in ‚âà1 day and ‚âà15 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:41] *** fake_space_whale left
[04:58] *** Ven` joined
[05:02] *** skids joined
[05:03] *** Ven` left
[05:09] *** Kaiepi left
[05:09] *** Kaiepi joined
[05:16] *** skids left
[06:03] *** xi- left
[07:31] *** buggable left
[08:46] *** robertle joined
[09:19] *** robertle left
[09:37] <|Tux|> Rakudo version 2018.06-229-ga5ab50d64 - MoarVM version 2018.06-301-gdad8a39f6

[09:37] <|Tux|> csv-test-xs-20      0.423 -  0.445

[09:37] <|Tux|> test-t --race       0.961 -  0.981

[09:37] <|Tux|> csv-ip5xs           1.000 -  1.025

[09:37] <|Tux|> test-t              2.227 -  2.228

[09:37] <|Tux|> csv-ip5xs-20        8.178 -  8.487

[09:37] <|Tux|> test                9.674 - 10.125

[09:37] <|Tux|> test-t-20 --race   13.937 - 14.541

[09:37] <|Tux|> csv-parser         24.339 - 24.779

[09:37] <|Tux|> test-t-20          40.149 - 40.289

[09:42] *** tyil[m] left
[09:42] *** ilmari[m] left
[09:42] *** AlexDaniel[m] left
[09:43] *** CIAvash[m] left
[09:45] *** benchable6 left
[09:45] *** nativecallable6 left
[09:45] *** statisfiable6 left
[09:45] *** bisectable6 left
[09:46] *** undersightable6 left
[09:46] *** greppable6 left
[09:47] <lizmat> Files=1246, Tests=76402, 379 wallclock secs (16.00 usr  5.73 sys + 2667.98 cusr 255.30 csys = 2945.01 CPU)

[09:49] *** robertle joined
[09:52] *** ilmari[m] joined
[10:30] *** tyil[m] joined
[10:30] *** AlexDaniel[m] joined
[10:30] *** CIAvash[m] joined
[10:43] *** benchable6 joined
[10:43] *** greppable6 joined
[10:43] *** nativecallable6 joined
[10:43] *** undersightable6 joined
[10:45] *** MasterDuke left
[10:51] *** Ven`` joined
[11:17] *** Ven`` left
[11:25] <Geth> ¬¶ rakudo: jkramer++ created pull request #2102: Consistify P6 scripts.

[11:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/2102

[11:25] <jkramer> I did that 4 days ago and linked it to the issue but apparently forgot to als make a PR

[11:26] <jkramer> *also

[11:27] *** yoleaux joined
[11:28] <Geth> ¬¶ rakudo: 906bec8c9d | (Jonas Kramer)++ | 20 files

[11:28] <Geth> ¬¶ rakudo: Consistify P6 scripts.

[11:28] <Geth> ¬¶ rakudo: 

[11:28] <Geth> ¬¶ rakudo: Fixes rakudo/rakudo#2077.

[11:28] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/906bec8c9d

[11:28] <Geth> ¬¶ rakudo: 2e5912c0ae | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 20 files

[11:28] <Geth> ¬¶ rakudo: Merge pull request #2102 from jkramer/issue-2077

[11:28] <synopsebot> RAKUDO#2077 [closed]: https://github.com/rakudo/rakudo/issues/2077 [easy to resolve][good first issue][meta] Extensions, shebangs, executable permissions in tools/ and elsewhere

[11:28] <Geth> ¬¶ rakudo: 

[11:28] <Geth> ¬¶ rakudo: Consistify P6 scripts.

[11:28] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/2e5912c0ae

[11:33] *** pmurias joined
[11:37] <jkramer> AlexDaniel: As per R#1583 there obviously are gonna be issues for some packagers of linux distros, but I'm not sure what to do about it (other than not renaming the file)

[11:37] <synopsebot> R#1583 [open]: https://github.com/rakudo/rakudo/issues/1583 tools/install-dist.pl is a perl¬†6 script but has Prolog file extension

[11:37] <AlexDaniel> jkramer: I dunno https://github.com/rakudo/rakudo/issues/1583#issuecomment-406575218

[11:38] <AlexDaniel> I mean, I can issue an alert

[11:38] <AlexDaniel> here: https://alerts.perl6.org/

[11:39] <AlexDaniel> greppable6: install-dist

[11:39] <greppable6> AlexDaniel, Found nothing!

[11:40] <jkramer> Well it's a really easy fix for packagers I guess, they'll probably notice soon enough ;)

[11:41] <AlexDaniel> it had to be done sooner or later anyway‚Ä¶ :)

[11:41] <AlexDaniel> but yeah, when I created that issue I didn't mean that this particular file should be renamed‚Ä¶ in fact I meant that it should be left unchanged

[11:41] <AlexDaniel> but ok, we'll see how it goes

[11:46] *** lizmat left
[11:47] <jkramer> Regarding nqp, I had a quick look and all the .pl files are P5 scripts, .pl6 files don't exist and the only .p6 file already has the correct shebang, so I guess there's nothing to do there

[11:48] <AlexDaniel> jkramer: alright, please close the issue with this justification then

[11:48] <AlexDaniel> :)

[11:48] *** lizmat joined
[11:49] <AlexDaniel> jkramer: though, is everything executable?

[11:49] <AlexDaniel> and shebangs?

[11:50] <AlexDaniel> if so then great

[11:50] *** ExtraCrispy joined
[11:50] <jkramer> No, I was just about to say that. I could set 755 to some .pl scripts and some of them have different shebangs, like just '# perl', but mostly the have the full #/usr/bin/env perl

[11:51] <jkramer> I'll clean that up a bit, but should I create an issue for that in nqp or just refer to the rakudo issue?

[11:53] <jkramer> With ! of course :)

[11:53] <AlexDaniel> jkramer: whatever works better for you

[12:08] <Geth> ¬¶ nqp: jkramer++ created pull request #486: Set executable flags and shebangs as requested in rakudo/rakudo#2077.

[12:08] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/486

[12:08] <synopsebot> RAKUDO#2077 [open]: https://github.com/rakudo/rakudo/issues/2077 [easy to resolve][good first issue][meta] Extensions, shebangs, executable permissions in tools/ and elsewhere

[12:09] <Geth> ¬¶ nqp: 9dd7485485 | (Jonas Kramer)++ | 13 files

[12:09] <Geth> ¬¶ nqp: Set executable flags and shebangs as requested in rakudo/rakudo#2077.

[12:09] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/9dd7485485

[12:09] <Geth> ¬¶ nqp: bbfb873060 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | 13 files

[12:09] <Geth> ¬¶ nqp: Merge pull request #486 from jkramer/issue-2077

[12:09] <Geth> ¬¶ nqp: 

[12:09] <Geth> ¬¶ nqp: Set executable flags and shebangs as requested in rakudo/rakudo#2077.

[12:09] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/bbfb873060

[12:10] <AlexDaniel> jkramer: there's also https://github.com/MoarVM/MoarVM *wink* *wink* *wink* *wink*

[12:10] <AlexDaniel> :)

[12:21] <jkramer> :D

[12:25] <AlexDaniel> releasable6: status

[12:25] <releasable6> AlexDaniel, Next release in ‚âà1 day and ‚âà6 hours. 4 blockers. 0 out of 231 commits logged (‚ö† 37 warnings)

[12:26] <releasable6> AlexDaniel, Details: https://gist.github.com/0b1916a6a1e9de0b0c38e5dfe707d83e

[12:26] <AlexDaniel> .oO( optimismable )

[12:27] *** travis-ci joined
[12:27] <travis-ci> NQP build errored. Aleks-Daniel Jakimenko-Aleksejev 'Merge pull request #486 from jkramer/issue-2077

[12:27] <travis-ci> https://travis-ci.org/perl6/nqp/builds/406215768 https://github.com/perl6/nqp/compare/acae198dfd0b...bbfb87306052

[12:27] *** travis-ci left
[12:29] <jkramer> Hmm, it built just fine locally

[12:30] <AlexDaniel> ü§∑

[12:30] <AlexDaniel> restarted the job

[12:33] <jkramer> Still builds just fine locally with a fresh clone

[12:35] <jkramer> Huh, now it passed ¬Ø\_(„ÉÑ)_/¬Ø

[12:38] <jkramer> Hmm, lib/MAST/Ops.p6 (in moarvm) says it's generated by tools/update_ops.p6, but tools/update_ops.p6 is writing to Ops.pm not Ops.p6

[12:39] <jkramer> Also in different directory

[12:39] <timotimo> it should build that file, too, though?

[12:39] <timotimo> the p6 one is used in tools, like the spesh grapher

[12:40] <jkramer> Ah lib/MAST/Ops.p6 was touched last time in 2015, I think it's not generated with every build then

[12:40] <timotimo> starting line 60 it writes it

[12:40] <jkramer> Someone probably copied/moved it manually

[12:40] <timotimo> oh, it's Ops.pm that it writes

[12:41] <jkramer> Yes that's what I meant

[12:41] <timotimo> sorry

[12:41] <timotimo> i'm apparently still half asleep

[12:41] <jkramer> Same here :)

[12:42] <jkramer> Anyhow I guess I should not make tools/update_ops.p6 add a shebang to the generated file since it's writing a module, not Ops.p6?

[12:43] <timotimo> yeah, they're not useful to be executed as a program

[12:43] <jkramer> But should Ops.p6 get one? It's not really an executable

[12:43] <jkramer> But then it probably shouldn't be named .p6 :)

[12:43] <timotimo> though something could be made for the case you run it, like ld.so does

[12:47] <jkramer> I'll just not touch it for now :)

[12:48] <jkramer> tools/count-jit-bail-ops.p6 has #!/usr/bin/env perl6-m as shebang, I suppose that's on purpose? Or should it be changed to perl6?

[12:54] <timotimo> could be perl6 instead, yeah

[12:57] <AlexDaniel> eh wow, that was a very perl6tense morning for me :)

[12:57] * AlexDaniel takes a break

[13:01] *** statisfiable6 joined
[13:05] <AlexDaniel> .tell jnthn looking at things now, I find the idea of releasing from HEAD less crazy‚Ä¶ :) There were many fixes, and cherry-picking all that into the release branch is also somewhat risky. So maybe indeed we should take our time to make sure that HEAD is good (instead of spending a similar amount of time to test the release branch). If we go with HEAD, then we do indeed need backcompat for Proxy/is-rw. ‚Äúwhen it's ready‚Äù would then

[13:05] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[13:05] <AlexDaniel> next-week-ish. Let me know what you think

[13:05] <AlexDaniel> .tell jnthn message trimmed: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-07-20#l158

[13:05] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[13:05] <AlexDaniel> samcv: ‚Üë

[13:06] <jnthn> AlexDaniel: Yeah, one thing about many of the MoarVM fixes I've put in is that they became needed because more aggressive inlining exposed them, but some of them actually were potentially possible to trigger before now.

[13:06] <yoleaux> 13:05Z <AlexDaniel> jnthn: looking at things now, I find the idea of releasing from HEAD less crazy‚Ä¶ :) There were many fixes, and cherry-picking all that into the release branch is also somewhat risky. So maybe indeed we should take our time to make sure that HEAD is good (instead of spending a similar amount of time to test the release branch). If we go with HEAD, then we do indeed need backcompat for Proxy/is-rw. ‚Äúwhen it's ready‚Äù 

[13:06] <yoleaux> would then

[13:06] <yoleaux> 13:05Z <AlexDaniel> jnthn: message trimmed: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-07-20#l158

[13:07] <jnthn> AlexDaniel: We just got "lucky enough"#

[13:08] <samcv> are we going to ignore this for now? https://github.com/MoarVM/MoarVM/issues/910

[13:08] <samcv> though i could revert siphash changes, but i still have 120% no clue why that commit could cause that

[13:09] <AlexDaniel> well, ‚Äúlucky enough‚Äù is often actually good enough for users (in practice), so extra disruptions are very unwanted from my perspective

[13:11] <jnthn> Well, also, we don't know to what degree the issues might have cropped up in the darkpan and gone unreported.

[13:11] <timotimo> m: say 4294967296 / 1024 / 1024

[13:11] <camelia> rakudo-moar 2e5912c0a: OUTPUT: ¬´4096‚ê§¬ª

[13:12] <samcv> is this person on freenode btw? https://github.com/0racle

[13:12] <timotimo> i think i've seen them around

[13:12] <timotimo> .seen 0racle

[13:12] <yoleaux> I haven't seen 0racle around.

[13:13] <timotimo> maybe not under that name

[13:13] <samcv> maybe different spelling?

[13:13] <samcv> or different name entirely

[13:13] <AlexDaniel> .seen 0racle

[13:13] <yoleaux> I haven't seen 0racle around.

[13:13] <timotimo> anyway, trying to expand a hash to be 4 gigs big, that seems kind of wrong

[13:13] <timotimo> or is that trying to increase the size of one bucket to 4 gigs?

[13:14] <AlexDaniel> quotable6: 0racle

[13:14] <quotable6> AlexDaniel, OK, working on it! This may take up to three minutes (4582161 messages to process)

[13:14] <samcv> timotimo: it tries to make the size of the bucket pointer array 4GB

[13:14] <samcv> well.

[13:14] <samcv> it's not pointers. but the aray of buckets

[13:14] <jnthn> 4GB is a suspicious number though

[13:15] <jnthn> Like if we underflowed somehow

[13:15] <samcv> and i've confirmed you can build nqp even if we just use uint16's

[13:15] <samcv> jnthn: though that could be true

[13:15] <AlexDaniel> samcv: fwiw I don't think we should be ignoring it. A lot of people try to build on raspberry pi and stuff like that, so breaking that is generally not a wonderful situation :)

[13:15] <quotable6> AlexDaniel, 105 messages (2016-03-23‚åÅ2018-04-07): https://gist.github.com/5a8a70d365aea35a74a2ac2d868ef352

[13:16] <AlexDaniel> perlawhirl: 0racle is you, right?

[13:16] <AlexDaniel> yes

[13:16] <AlexDaniel> samcv: ‚Üë

[13:16] <samcv> though now that i'm looking for underflow i can maybe look harder...

[13:17] <samcv> well then again i didn't add any code except the code that generates siphash hash values... so ignore that. not much to look at anywhere else

[13:18] <samcv> i mean the only code change i made to uthash.h was setting fibonnaci hashing to use 64 bit integers. but that would just cause a segfault if it returned the wrong value

[13:19] <samcv> well the size of pointers on their machine is 8 bytes? so they are on a 64bit machine?

[13:20] <samcv> though i don't see them mention what arch it is

[13:22] <samcv> MVMHashBktNum new_num_bkts = tbl->num_buckets * 2;

[13:23] <samcv> then we do uthash_malloc_zeroed(tc, new_num_bkts * sizeof(struct UT_hash_bucket));

[13:23] <samcv> but i don't see how that could underflow. and tbl->num_buckets is a uint32

[13:23] <samcv> unless we just decided to already have decided to add a crazy number of buckets

[13:40] *** skids joined
[14:09] <timotimo> maybe a "bt all" would have been more enlightening - also asking 0racle to build with --optimize=0

[14:09] <timotimo> maybe after reaching 1g we should increase in half-gigabyte increments instead of doubling

[14:10] <timotimo> is there some kind of possibility that we put everything in one bucket and keep trying to rehash? it must be astronomically unlikely, right?

[14:13] * jnthn thought "maybe let's do something easier on a Friday afternoon"

[14:13] <jnthn> Ended up dealing with continuations :P

[14:14] <Ulti> I tend to do interesting moon shot rather than easier on Fridays

[14:14] <timotimo> ouch

[14:14] <jnthn> I think I might have a solution for the issue timotimo spotted a while back where some uses of the thread pool scheduler end up with a huge pile of invocation records on the call stack though

[14:14] <timotimo> hey, that's cool!

[14:15] <jnthn> I was looking at the t/spec/S17-promise/lock-async-stress.t instability under stress

[14:15] <jnthn> And got a four thousand line stack trace :P

[14:15] <timotimo> :D

[14:16] <jnthn> Anyway, it looks like I can fix it, but in doing so I realized that MoarVM's implementation of the protect flag to continuationcontrol was incorrect

[14:16] <jnthn> So now spectesting that patch together with my Rakudo fix

[14:17] <jnthn> Unsurpsisingly, the lock async stress test runs quite a lot faster now :)

[14:18] <jnthn> Also seems rather less explosive

[14:18] <timotimo> way cool.

[14:18] <jnthn> Though looks like I might have a spectest regression

[14:18] <jnthn> Can't get the lock async one to blow up at all

[14:20] <jnthn> grmbl

[14:20] <jnthn> t/spec/S17-supply/syntax-nonblocking-await.t fails with "No matching continuation reset found", which is exactly the protect bug I thought I just fixed

[14:24] <Geth> ¬¶ nqp/truffle: 5 commits pushed by (Pawe≈Ç Murias)++

[14:24] <Geth> ¬¶ nqp/truffle: 9cfc927353 | [truffle] return the new FrameSlot when adding variables to save code lines

[14:24] <Geth> ¬¶ nqp/truffle: b4e4cfd497 | [truffle] Allow extanding array by assiging past their end

[14:24] <Geth> ¬¶ nqp/truffle: 17a19a5b19 | [truffle] Enable @Deserialize to take long[] arguments

[14:24] <Geth> ¬¶ nqp/truffle: 81aa9a56c7 | [truffle] Implement sub-call(|@flat_positional_args)

[14:24] <Geth> ¬¶ nqp/truffle: dbd2b234d6 | [truffle] Run passing test 037

[14:24] <Geth> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/compare/7854a053dc18...dbd2b234d6ce

[14:44] <jkramer> > No such method 'take-while' for invocant of type 'Array'. Did you mean 'take-while'? √ú

[14:46] <AlexDaniel> jkramer: how did you get that?

[14:47] <jkramer> augmented that method into List instead of Array :) I think there's already an issue for something similar

[14:47] <jkramer> But it's monkey-typing anyway, so probably not an issue for normal users 

[14:48] *** fake_space_whale joined
[14:48] <jkramer> https://github.com/rakudo/rakudo/issues/1758

[14:48] <jnthn> Good news is that I got the massive stack issue fixed without breaking anything.

[14:49] <jkramer> I think this is the same problem, because augmented methods don't get inherited into child classes

[14:49] <jkramer> But it still suggests the method in the parent class, although it can't be used

[14:49] <jnthn> Bad news is that it seems t/spec/S17-promise/lock-async-stress2.t is still unhappy occasionally and with the same kind of failure mode, just not with the 4000 line stack trace :)

[14:52] <jnthn> Yowser, "MoarVM panic: Corrupt multi dispatch cache: cur_node == 0"

[14:53] <jnthn> And the other error it more often crashes with is an argument count error

[14:53] <jnthn> Which I guess could mean it picked the wrong entry out of a messed up multi cache

[14:55] <dogbert11> there's an old, closed, report for t/spec/S17-supply/syntax-nonblocking-await.t where the above dispatch error is mentioned

[14:55] <jnthn> Corrupt multi dispatch cache?

[14:55] <dogbert11> yep, https://github.com/MoarVM/MoarVM/issues/554

[14:58] <Geth> ¬¶ nqp: 25dec5da98 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[14:58] <Geth> ¬¶ nqp: [MoarVM Bump] Brings 32 commits

[14:58] <Geth> ¬¶ nqp: 

[14:58] <Geth> ¬¶ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2018.06-272-g23ea67b...2018.06-304-g4d22fb9e7

[14:58] <Geth> ¬¶ nqp: 4d22fb9e7 Fix protect handling in continuationcontrol

[14:58] <Geth> ¬¶ nqp: 36cd04e57 Merge pull request #912 from jkramer/issue-2077

[14:58] <Geth> ¬¶ nqp: 33363d321 Add +x and shebangs for scripts.

[14:58] <Geth> ¬¶ nqp: dad8a39f6 Remove a line that shouldn't have been added in the last commit

[14:58] <Geth> ¬¶ nqp: <‚Ä¶commit message has 28 more lines‚Ä¶>

[14:58] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/25dec5da98

[14:58] <Geth> ¬¶ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2018.06-272-g23ea67b...2018.06-304-g4d22fb9e7

[14:58] <Geth> ¬¶ rakudo: 683ae67b67 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[14:58] <Geth> ¬¶ rakudo: [NQP Bump] Brings 3 commits

[14:58] <Geth> ¬¶ rakudo: 

[14:59] <Geth> ¬¶ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2018.06-62-gacae198...2018.06-65-g25dec5da9

[14:59] <Geth> ¬¶ rakudo: 25dec5da9 [MoarVM Bump] Brings 32 commits

[14:59] <Geth> ¬¶ rakudo: bbfb87306 Merge pull request #486 from jkramer/issue-2077

[14:59] <Geth> ¬¶ rakudo: 9dd748548 Set executable flags and shebangs as requested in rakudo/rakudo#2077.

[14:59] <synopsebot> RAKUDO#2077 [closed]: https://github.com/rakudo/rakudo/issues/2077 [easy to resolve][good first issue][meta] Extensions, shebangs, executable permissions in tools/ and elsewhere

[14:59] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/683ae67b67

[14:59] <Geth> ¬¶ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.06-62-gacae198...2018.06-65-g25dec5da9

[15:02] <samcv> timotimo: well not at all possible

[15:02] <samcv> about having everything in one bucket. and even if that happens it wouldn't expand.

[15:03] <timotimo> mhm

[15:03] <timotimo> super weird.

[15:04] <samcv> when it expands the buckets, it keeps track of how many excess elements end up in a bucket. so if there's 4 too many items in one bucket, it makes additional things in that bucket not cause an expansion unless it gets some multiple of the normal lengcth

[15:04] <timotimo> mhm

[15:08] <samcv> yeah. it's super weird

[15:08] <jnthn> The other error I see is "Not enough positional arguments; needed at least 2" and it's seemingly about the signature of `proto sub cas($, $, $?, *%) {*}`

[15:13] <Geth> ¬¶ nqp/truffle: 174fb97bf5 | (Pawe≈Ç Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/expression/NQPNanNode.java

[15:13] <Geth> ¬¶ nqp/truffle: [truffle] Fix nqp::nan

[15:13] <Geth> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/174fb97bf5

[15:13] <Geth> ¬¶ nqp/truffle: 97355496be | (Pawe≈Ç Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/NQPNodeWithBoolification.java

[15:13] <Geth> ¬¶ nqp/truffle: [truffle] Boolification of nqp::null

[15:13] <Geth> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/97355496be

[15:13] <Geth> ¬¶ nqp/truffle: 33b9c7910d | (Pawe≈Ç Murias)++ | src/vm/jvm/Truffle.nqp

[15:13] <Geth> ¬¶ nqp/truffle: [truffle] Add &skip and print out the desc description in &ok and &is

[15:13] <Geth> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/33b9c7910d

[15:23] *** pmurias left
[15:28] *** fake_space_whale left
[15:29] *** robertle left
[16:31] *** diakopter joined
[16:37] *** Zoffix joined
[16:38] <Zoffix> m: use MONKEY; augment class List { method z { say 42 } }; Array.^compose; [].z

[16:38] <camelia> rakudo-moar 683ae67b6: OUTPUT: ¬´42‚ê§¬ª

[16:38] <Zoffix> jkramer: ^ you can call .^compose after monkeying for the kid type to get the augmentation from the parent

[16:41] <Geth> ¬¶ rakudo: bf514c1502 | (Jonathan Worthington)++ | src/core/ThreadPoolScheduler.pm6

[16:41] <Geth> ¬¶ rakudo: Avoid building up a huge stack of continuations

[16:41] <Geth> ¬¶ rakudo: 

[16:41] <Geth> ¬¶ rakudo: If we have a continuation to resume, it already has the continuation

[16:41] <Geth> ¬¶ rakudo: entry frame with error handling as part of the stack that is resumed.

[16:41] <Geth> ¬¶ rakudo: If we thus invoke the continuation inside such a frame, and then it

[16:41] <Geth> ¬¶ rakudo: also results in the continuation being taken, we make the stack more

[16:41] <Geth> ¬¶ rakudo: deeply nested each time. Don't do that. Also refactor to avoid taking

[16:41] <Geth> ¬¶ rakudo: a closure holding the continuation, which will make things a little

[16:41] <Geth> ¬¶ rakudo: cheaper.

[16:41] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/bf514c1502

[16:53] <Zoffix> ZOFVM: Files=1301, Tests=153427, 167 wallclock secs (22.42 usr  3.29 sys + 3621.24 cusr 175.14 csys = 3822.09 CPU)

[16:53] *** Zoffix left
[17:12] *** ZofBot left
[17:13] *** huggable left
[17:26] *** ZofBot joined
[17:26] *** ChanServ sets mode: +v ZofBot

[17:28] *** huggable joined
[17:28] *** ChanServ sets mode: +v huggable

[17:32] *** lizmat left
[17:46] <Geth> ¬¶ nqp/unfudge-test: 317c3d137e | ÈôàÊ¢ìÁ´ã++ (committed using GitHub Web editor) | t/nqp/019-file-ops.t

[17:46] <Geth> ¬¶ nqp/unfudge-test: Update 019-file-ops.t

[17:46] <Geth> ¬¶ nqp/unfudge-test: review: https://github.com/perl6/nqp/commit/317c3d137e

[17:55] *** brrt joined
[18:03] <Kaiepi> i'm going to implement being able to get the file descriptors for IO::Socket::Async sockets on top of IO::Socket::INET

[18:04] <Kaiepi> but maybe it'd be a good idea to implement some variation of setsockopt/getsockopt since what i'm trying to do is use setsockopt and send so i can use SO_OOBINLINE because telnet uses it sometimes

[18:04] <Kaiepi> what do you guys think?

[18:10] *** lizmat joined
[18:16] *** AlexDaniel left
[18:18] *** AlexDaniel joined
[18:18] <brrt> My opinion on the matter is not worth that much, since I've never done anything related to the IO code

[18:18] <yoleaux> 16:51Z <jnthn> brrt: If you have a spare moment, please could you take a look at https://github.com/rakudo/rakudo/issues/2070 which shows we still have JIT issues on Windows. I wonder if it's related to that ARG5/ARG6 thing...

[18:18] <brrt> .tell jnthn will do

[18:18] <yoleaux> brrt: I'll pass your message to jnthn.

[18:19] <brrt> re: standard, low-hanging fruit assembly optimizations: note that the expr JIT architecture differs a bit from GCC

[18:20] <brrt> (What I know of GCC archtecture is from second or third hand, so take sufficient grains of salt)

[18:20] <brrt> but I understand that GCC produces naive bytecode first, then uses peephole optimizations to translate it into more efficient forms

[18:21] <brrt> whereas we (try to) select 'optimal' bytecode via a tiling process

[18:22] <brrt> so part of what GCC would do as an optimzier, we do as instruction selection

[18:22] <brrt> there's advantages and disadvantages of both approaches

[18:22] <diakopter> brrt: oh ok

[18:23] <brrt> for one thing, our tiler is constant-time per node

[18:23] <brrt> having said that, I do know that the 'optimality' calculation is probably off

[18:24] <brrt> and, I'm also working on an IR optimizer, which should hopefully help the tiler select better bytecode

[18:25] <brrt> and, having REPR specific expression templates is also a goal

[18:26] <brrt> and there's also some really low-hanging fruit optimizations to be done in the register allocator

[18:27] <brrt> for one thing, all values that derive from constants never need to be spilled to memory; the instruction that loads them can be copied instead

[18:27] *** dogbert17 joined
[18:27] <brrt> there's probably a grants worth of work just picking LHF like that

[18:29] <brrt> also; the theory that expression-jitted repr ops would help, is based on two things: a): if i can replace a (dynamic) call with a static one, good for branch prediction; b): if i can replace a call with inline code, better still, plus there's no call-convention nonsesnse and spill-to-memory necessary

[18:30] <brrt> so it's not so much a better assembly story but more an assembly-in-the-right-place story

[19:11] *** pmurias joined
[19:12] <timotimo> Kaiepi: right now i'm about to put socket name and port into the listen socket support; i assume you'll want to touch that part, too?

[19:12] <timotimo> and yeah, i'd like setsockopt support, too. i don't have a use for it yet, but i know it's necessary in lots of situations

[19:22] <Kaiepi> i'm using setsockopt in my telnet library https://hastebin.com/tigixasaci.pl

[19:25] <Kaiepi> ignore the really stupid msitakes in the connect method, i haven't tested this code yet

[19:28] <timotimo> it'll also be nice for our users to be able to set reuseaddr

[19:31] <timotimo> i do believe $match.to with negative values is how we signal different kinds of failure modes upwards in the grammar engine

[19:33] <timotimo> oh, you're using IO::Socket::INET at the moment? you want to switch to ::Async?

[19:36] <Kaiepi> can't get the file descriptor for sockets with async

[19:36] <Kaiepi> at the moment at least

[19:37] <timotimo> right

[20:23] *** brrt left
[20:58] *** Kaiepi left
[20:59] *** Kaiepi joined
[21:00] *** PufferBot joined
[21:01] *** skids left
[21:13] *** Kaiepi left
[21:14] *** Kaiepi joined
[21:16] *** AlexDaniel[m] left
[21:16] *** tyil[m] left
[21:16] *** ilmari[m] left
[21:17] *** CIAvash[m] left
[21:19] *** benchable6 left
[21:19] *** nativecallable6 left
[21:19] *** nativecallable6 joined
[21:19] *** benchable6 joined
[21:19] *** undersightable6 left
[21:20] *** statisfiable6 left
[22:06] <timotimo> pmurias: what's the benefits of parcel compared to webpack?

[22:08] *** ilmari[m] joined
[22:08] <timotimo> somehow i have a GC run that seems to begin before an earlier gc run has ended

[22:13] <pmurias> timotimo: it's easier to hook Rakudo/NQP into it without having the generated code reparsed

[22:14] <timotimo> OK

[22:15] <pmurias> timotimo: outside of Perl 6 use the zero config approach seems saner

[22:15] <timotimo> mhm

[22:15] <pmurias> the drawback is that parcel seems buggier

[22:16] <timotimo> OK, so i'll keep using webpack for moarperf a while longer

[22:16] <timotimo> hmm, i should change the regrettable background image ...

[22:17] *** statisfiable6 joined
[22:17] <pmurias> timotimo: for regular use both seems to kind of work, neither seems like a super good piece of tech

[22:18] <timotimo> %)

[22:28] *** MasterDuke joined
[22:44] *** AlexDaniel[m] joined
[22:44] *** tyil[m] joined
[22:44] *** CIAvash[m] joined
[22:45] *** bisectable6 joined
[22:55] *** fake_space_whale joined
[23:00] <releasable6> Next release in ‚âà19 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:06] <AlexDaniel> I appreciate your optimism, releasable6

[23:09] *** dct joined
[23:15] <timotimo> that just means i can get That Feature‚Ñ¢ in before the release :P

