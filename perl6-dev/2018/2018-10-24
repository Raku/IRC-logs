[00:00] *** lizmat joined
[00:00] *** p6bannerbot sets mode: +v lizmat

[00:03] *** leont left
[00:12] *** leont joined
[00:13] *** p6bannerbot sets mode: +v leont

[00:37] *** leont left
[00:59] *** j3nnn1 left
[01:01] *** Ven` joined
[01:02] *** p6bannerbot sets mode: +v Ven`

[01:06] *** Ven` left
[01:14] *** Kaiepi left
[01:15] *** Kaiepi joined
[01:15] *** p6bannerbot sets mode: +v Kaiepi

[01:19] *** lizmat left
[01:48] *** cognominal-p6 joined
[01:49] *** p6bannerbot sets mode: +v cognominal-p6

[01:52] *** cognominal-p6 left
[01:52] *** cognominal-p6 joined
[01:53] *** p6bannerbot sets mode: +v cognominal-p6

[02:12] *** ufobat_ joined
[02:12] *** p6bannerbot sets mode: +v ufobat_

[02:13] *** cognominal-p6 left
[02:16] *** ufobat left
[03:38] *** stmuk joined
[03:38] *** p6bannerbot sets mode: +v stmuk

[03:39] *** stmuk_ left
[03:45] *** fake_space_whale left
[04:19] *** Ven` joined
[04:20] *** p6bannerbot sets mode: +v Ven`

[04:24] *** Ven` left
[05:08] *** cognominal-p6 joined
[05:09] *** p6bannerbot sets mode: +v cognominal-p6

[05:25] *** cognominal-p6 left
[05:26] *** cognominal-p6 joined
[05:26] *** p6bannerbot sets mode: +v cognominal-p6

[05:33] *** cognominal-p6 left
[05:33] *** ufobat_ is now known as ufobat

[06:39] *** robertle joined
[06:40] *** p6bannerbot sets mode: +v robertle

[07:30] *** lizmat joined
[07:30] *** p6bannerbot sets mode: +v lizmat

[08:04] *** Ven` joined
[08:05] *** p6bannerbot sets mode: +v Ven`

[08:28] *** cognominal-p6 joined
[08:28] *** cognominal-p6 left
[08:29] *** cognominal-p6 joined
[08:29] *** p6bannerbot sets mode: +v cognominal-p6

[08:35] <Geth> ¦ nqp/nqp-mbc: 2f9fbb1278 | (Stefan Seifert)++ | src/vm/moar/QAST/QASTCompilerMAST.nqp

[08:35] <Geth> ¦ nqp/nqp-mbc: Bring back serialization string heap optimization

[08:35] <Geth> ¦ nqp/nqp-mbc: 

[08:35] <Geth> ¦ nqp/nqp-mbc: With a few tricks MoarVM can use the bytecode file's string heap for strings

[08:35] <Geth> ¦ nqp/nqp-mbc: needed in deserialization, too. This avoids the need for setting up a string

[08:35] <Geth> ¦ nqp/nqp-mbc: list in dependencies+deserialize.

[08:35] <Geth> ¦ nqp/nqp-mbc: review: https://github.com/perl6/nqp/commit/2f9fbb1278

[08:35] <Geth> ¦ nqp/nqp-mbc: 7694fcf901 | (Stefan Seifert)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[08:35] <Geth> ¦ nqp/nqp-mbc: Use unbox_u to get at MAST::Local's $!index to avoid the coercion dance

[08:35] <Geth> ¦ nqp/nqp-mbc: review: https://github.com/perl6/nqp/commit/7694fcf901

[08:52] *** cognominal-p6 left
[09:14] *** dogbert2_ left
[09:32] *** donaldh joined
[09:32] *** p6bannerbot sets mode: +v donaldh

[09:53] *** cognominal-p6 joined
[09:54] *** p6bannerbot sets mode: +v cognominal-p6

[10:07] *** cognominal-p6 left
[10:07] *** cognominal-p6 joined
[10:08] *** p6bannerbot sets mode: +v cognominal-p6

[10:10] *** dogbert2_ joined
[10:11] *** p6bannerbot sets mode: +v dogbert2_

[10:23] *** leont joined
[10:24] *** p6bannerbot sets mode: +v leont

[10:54] *** leont left
[11:19] <dogbert2_> there's a passing TODO in t/05-messages/02-errors.t, test #3

[11:27] <lizmat> dogbert2_: I'm not seeing that  :-(

[11:28] <lizmat> correction: I do

[11:29] <Geth> ¦ rakudo: 18eed380b0 | (Elizabeth Mattijsen)++ | t/05-messages/02-errors.t

[11:29] <Geth> ¦ rakudo: Unfudge passing test, dogbert++

[11:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/18eed380b0

[11:34] *** Ven` left
[11:51] *** Ven` joined
[11:52] *** p6bannerbot sets mode: +v Ven`

[11:58] <Zoffix> There's a 6.c spec `ok Nil.ACCEPTS(Any) == Nil, 'Nil.ACCEPTS always returns Nil';`

[11:58] <Zoffix> But that's a broken test, because it's using `==` operator. Were it to use `===`, it'd fail because that method returns False

[11:59] <Zoffix> And there's a commented out piece of code in rakudo saying actually making it return Nil hangs roast: https://github.com/rakudo/rakudo/blob/master/src/core/Nil.pm6#L12

[12:02] <Geth> ¦ roast: ac1ad09150 | (Zoffix Znet)++ | S02-types/nil.t

[12:02] <Geth> ¦ roast: Correct Nil tests

[12:02] <Geth> ¦ roast: 

[12:02] <Geth> ¦ roast: Don't use `==` for testing for a `Nil`. Correcting these tests

[12:02] <Geth> ¦ roast: shows Nil.ACCEPTS(Any) returns False in rakudo, so fudge that test.

[12:02] <Geth> ¦ roast: 

[12:02] <Geth> ¦ roast: I don't really see the point of making this special behaviour for

[12:02] <Geth> ¦ roast: ACCEPTS. IIRC only regexes return something other then True/False.

[12:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ac1ad09150

[12:06] <Zoffix> I guess it makes sense when you consider Failures are Nilk

[12:07] <Zoffix> R#2419

[12:07] <synopsebot> R#2419 [open]: https://github.com/rakudo/rakudo/issues/2419 Nil.ACCEPTS returns False and flawed spec says it must be Nil

[12:09] <Geth> ¦ roast: bd7bdb82d5 | (Zoffix Znet)++ | S02-types/nil.t

[12:09] <Geth> ¦ roast: Extra test for Nil.FALLBACK with args

[12:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bd7bdb82d5

[12:10] *** pmurias joined
[12:10] *** p6bannerbot sets mode: +v pmurias

[12:12] *** Ven` left
[12:13] *** pmurias left
[12:15] *** pmurias joined
[12:15] *** p6bannerbot sets mode: +v pmurias

[12:16] *** Ven` joined
[12:17] *** p6bannerbot sets mode: +v Ven`

[12:24] <dogbert2_> lizmat, Zoffix: do you have failing tests in t/spec/S06-currying/positional.t ?

[12:24] <dogbert2_> lizmat++ (fixing tests)

[12:24] <Zoffix> 15:58  lizmat  this seems to break some tests in t/spec/S06-currying/positional.t that apparently do not expect the coerce_type to appear

[12:24] <Zoffix> 15:58  lizmat  imo the tests are broken

[12:26] <Geth> ¦ rakudo: 65d4fd7144 | (Elizabeth Mattijsen)++ | src/core/Nil.pm6

[12:26] <Geth> ¦ rakudo: Update reason for commenting out

[12:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/65d4fd7144

[12:34] *** pmurias left
[12:34] *** pmurias joined
[12:34] *** p6bannerbot sets mode: +v pmurias

[12:36] *** donaldh left
[12:41] <tbrowder___> hi all, question on rakudo nqp: is it worthwhile to specify int type for indices? currently such is not consistent, but there is a lot of array indexing scattered throughout, many without explicit typing

[12:43] *** pmurias left
[12:49] *** pmurias joined
[12:49] *** p6bannerbot sets mode: +v pmurias

[12:50] <Zoffix> tbrowder___: theoretically yes, but I when I tried, I got slightly slower results. Someone (diakopter or maybe Ven`) commented about that on one of my NQP commits and said the slower results were due to boxing somewhere.

[12:50] <nine> tbrowder___: yes, it is.

[12:50] * Ven` doesn't recall doing that(?)

[12:51] <nine> Well, it's always a good idea to look at the spesh log. Sometimes we do crazy coercion and boxing dances

[12:51] *** ZofBot joined
[12:51] *** ChanServ sets mode: +v ZofBot

[12:51] *** p6bannerbot sets mode: +v ZofBot

[12:51] <Zoffix> Ven`: then maybe it was someone else

[12:52] <Ven`> At least I'd be surprised, because I'm bad at this low-level stuff.

[12:52] *** Zoffix left
[12:53] <tbrowder___> theoretically, most of the pod code is compile-time during parsing, so wouldn’t boxing/unboxing not apply?

[12:54] <tbrowder___> the indices are typically over arrays of chars

[12:55] <Geth> ¦ rakudo: 45eeab7876 | (Elizabeth Mattijsen)++ | 2 files

[12:55] <Geth> ¦ rakudo: Implement Code.cando

[12:55] <Geth> ¦ rakudo: 

[12:55] <Geth> ¦ rakudo: - which is a very simple smartmatch of the signature with the capture

[12:55] <Geth> ¦ rakudo: - the Routine.cando one is much more complex as it support multi dispatch

[12:55] <Geth> ¦ rakudo: - fixes R#2420

[12:55] <Geth> ¦ rakudo: - also make sure Routine.cando only takes instantiated captures

[12:55] <synopsebot> R#2420 [open]: https://github.com/rakudo/rakudo/issues/2420 [RFC] Some Callables can't do .cando

[12:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/45eeab7876

[13:01] <Geth> ¦ rakudo: a434a187ef | (Tom Browder)++ (committed using GitHub Web editor) | docs/rakudo-nqp-and-pod-notes.md

[13:01] <Geth> ¦ rakudo: add info

[13:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a434a187ef

[13:06] *** brrt joined
[13:07] *** p6bannerbot sets mode: +v brrt

[13:12] <Geth> ¦ rakudo: 69533b5064 | (Elizabeth Mattijsen)++ | src/core/Code.pm6

[13:12] <Geth> ¦ rakudo: Make sure Code.cando has the same return type as Routine.cando

[13:12] <Geth> ¦ rakudo: 

[13:12] <Geth> ¦ rakudo: Even though it will always be either a zero or 1 element list

[13:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/69533b5064

[13:14] *** j3nnn1 joined
[13:14] *** p6bannerbot sets mode: +v j3nnn1

[13:31] <Geth> ¦ roast: 86dc2d14e6 | (Elizabeth Mattijsen)++ | S06-other/introspection.t

[13:31] <Geth> ¦ roast: Added tests for R#2420

[13:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/86dc2d14e6

[13:31] <synopsebot> R#2420 [open]: https://github.com/rakudo/rakudo/issues/2420 [testneeded] Some Callables can't do .cando

[13:52] *** Ven` left
[13:53] *** Ven` joined
[13:54] *** p6bannerbot sets mode: +v Ven`

[13:58] *** pmurias left
[13:59] *** pmurias joined
[13:59] *** p6bannerbot sets mode: +v pmurias

[14:08] <Geth> ¦ rakudo: 4154e7447a | (Tom Browder)++ (committed using GitHub Web editor) | docs/rakudo-nqp-and-pod-notes.md

[14:08] <Geth> ¦ rakudo: add note on pod token .ast handling

[14:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4154e7447a

[14:14] <tbrowder___> another grammar/actions question: would adding classes instead of always using .ast be counterproductive? it would at least be easier IMHO to see the parse flow for persons new to the code.

[14:33] *** Zoffix joined
[14:33] *** p6bannerbot sets mode: +v Zoffix

[14:33] <Zoffix> tbrowder___: I don't understand what you mean

[14:34] *** pmurias left
[14:35] *** pmurias joined
[14:35] *** p6bannerbot sets mode: +v pmurias

[14:35] <Zoffix> Like.. what do you by classes instead of .ast? .ast is just a data store to shuttle stuff between tokens. I don't understand how classes enter the picture to replace that.

[14:36] <Zoffix> *do yo umean

[14:36] *** pmurias left
[14:39] <Zoffix> m: 'bark bark bark'.encode.decode('utf-c8').say

[14:39] <camelia> rakudo-moar 74687ae5c: OUTPUT: «Can not decode a utf-8 buffer as if it were utf-c8␤  in block <unit> at <tmp> line 1␤␤»

[14:39] <Zoffix> Why not? It's just bytes.

[14:40] <samcv> Zoffix: good question. i am not against letting people do that

[14:40] *** pmurias joined
[14:40] *** p6bannerbot sets mode: +v pmurias

[14:43] <Zoffix> TIL that Liskov was a woman

[14:44] <Zoffix> (just 'cause of that Slavik-sounding last name which doesn't have a feminine ending)

[14:45] <Zoffix> s/was/is/;

[14:46] <Zoffix> Filed as R#2421

[14:46] <synopsebot> R#2421 [open]: https://github.com/rakudo/rakudo/issues/2421 [LTA] Cannot decode a buffer of bytes if it was produced by utf8 encode

[14:51] <Zoffix> hm, so .decode: $encoding doesn't use the Encoding::Registry stuff yet, does it?

[14:53] <Zoffix> hm, looks like .slurping an IO::Path also doesn't see that I registerd a new encoding

[14:53] <Zoffix> IO::Handle works. Good 'nuf for now, I guess

[14:56] * Zoffix decides to pick another topic for 6.d teaster

[15:04] *** brrt left
[15:11] <tbrowder___> Zoffix: the problem with ast, for me, is it’s harder to find its format without a lot of searching, but if it were a class instance it would be easier to (1) find its member attributes and (2) use the attributes. That would be at least a bit self-documenting, and the only question for me is how much, if any, is performance affected.

[15:11] <Zoffix> tbrowder___: I've no idea what you mean.

[15:12] <Zoffix> You know there's  a .dump method, on QAST and Match objects?

[15:13] <Zoffix> I've no idea what you mean by "its format"?

[15:15] <Zoffix> Like it's already an introspectable object.

[15:16] <tbrowder___> yes, but the dump method is very tedious, and doesn’t directly help change structure—it merely shows the layout of the object.

[15:19] <tbrowder___> afak, the introspection is done through the dump, and can’t be seen otherwise.

[15:19] <tbrowder___> *afaik

[15:21] *** fake_space_whale joined
[15:22] *** p6bannerbot sets mode: +v fake_space_whale

[15:42] <Zoffix> tbrowder___: are we talking about QAST::Node objects or something else?

[15:43] *** stmuk_ joined
[15:44] *** p6bannerbot sets mode: +v stmuk_

[15:45] *** cognominal-p6 left
[15:45] *** stmuk left
[15:50] *** cognominal-p6 joined
[15:51] *** p6bannerbot sets mode: +v cognominal-p6

[15:59] *** cognominal-p6 left
[15:59] *** cognominal-p6 joined
[16:00] *** p6bannerbot sets mode: +v cognominal-p6

[16:05] <nine> Oh the joy of fixing merge conflicts because of whitespace cleanup :/ https://github.com/perl6/nqp/commit/86362f5c3c211acc09bc0dbdb592d7d3f52637bf

[16:06] <nine> For future reference: please just don't

[16:08] <Zoffix> :)

[16:13] *** robertle left
[16:18] <Zoffix> c: 2015.12,HEAD my @needles = 1, 2, 3, 10, 100; my @haystack = ^1000 .pick: 600; { for ^1000 { my $ = @needles ⊆ @haystack }; say now - ENTER now }

[16:19] <committable6> Zoffix, ¦2015.12: «20.1532034␤» ¦HEAD(74687ae): «0.4214398␤»

[16:19] <Zoffix> https://i.kym-cdn.com/photos/images/newsfeed/000/138/244/funny-barack-michelle-obama-face.jpg?1308706785

[16:20] <Zoffix> 47.82x as fast

[16:24] <japhb> Zoffix wouldn't that potentially give different timings simply as a matter of whether @needles actually is a subset of @haystack, and how quickly that can be determined?  (e.g., what if @haystack has no 1 in it?)

[16:25] <japhb> Since the two different versions would potentially pick different @haystacks I mean.

[16:28] <Zoffix> *sigh*

[16:28] *** Zoffix left
[16:41] <jnthn> Yeah, I was annoyed by that PR doing so called "code quality improvements", which mostly meant `final` clutter, whitespace changes, style changes that aren't better just different...I didn't see a single useful thing in there. Wish I'd not been distracted with other things and could have shot the PR down before it got merged :/

[16:42] <jnthn> Maybe we need a tighter commit policy on NQP, as MoarVM and Rakudo have.

[16:46] <AlexDaniel> nine:  git merge -Xignore-all-space ?

[16:59] <nine> AlexDaniel: how do I do that in a rebase?

[17:00] <AlexDaniel> `git rebase -Xignore-all-space master` ?

[17:00] <AlexDaniel> or whatever the branch is

[17:02] *** Ven` left
[17:02] <AlexDaniel> the behavior of that stuff is somewhat dodgy, but you're reviewing the results anyway, right? :)

[17:09] <tbrowder___> Zoffix: i'm talking about  match objects and their .ast slot. i guess they eventually become QAST objects, but I'm trying to modify things, in rakudo nqp code, that have been "made" but need to be modified before the final class definition is completed.

[17:17] <nine> AlexDaniel: yeah, it's not like I'm merging to master today :)

[17:18] <AlexDaniel> thanks :D

[17:18] <nine> Except for... how are we doing on the release? I would like to merge a couple of preparatory commits to get rid of a couple of bootstrap cycles

[17:18] <AlexDaniel> actually, yeah

[17:19] * AlexDaniel starts release branches

[17:19] <AlexDaniel> feel free to do whatever you want

[17:19] <AlexDaniel> in nqp and rakudo at least

[17:30] <AlexDaniel> lizmat: according to CI (AppVeyor) some tests are failing on Windows after your commits

[17:35] <Geth> ¦ rakudo: fa3dc0ab52 | (Zoffix Znet)++ (committed using GitHub Web editor) | t/05-messages/02-errors.t

[17:35] <Geth> ¦ rakudo: Use valid port number

[17:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fa3dc0ab52

[17:37] *** Zoffix joined
[17:37] *** p6bannerbot sets mode: +v Zoffix

[17:37] <Zoffix> That test looks bogus

[17:46] <Zoffix> AlexDaniel: I don't think the async sock issues are completely fixed. That test is meant to die with "invalid argument", but on my box it dies with "Failed to resolve host name 'localhost' with family 152. Error: 'ai_family not supported'"

[17:47] <Zoffix> hm, or at least it does with my latest version of the test :/

[17:48] <Geth> ¦ nqp/nqp-mbc: 60 commits pushed by (Stefan Seifert)++

[17:48] <Geth> ¦ nqp/nqp-mbc: review: https://github.com/perl6/nqp/compare/7694fcf90186...ddc019c98834

[17:48] <Geth> ¦ rakudo/nqp-mbc: 95de4e2ab4 | (Stefan Seifert)++ | src/vm/moar/Perl6/Ops.nqp

[17:48] <Geth> ¦ rakudo/nqp-mbc: Get rid of MAST

[17:48] <Geth> ¦ rakudo/nqp-mbc: review: https://github.com/rakudo/rakudo/commit/95de4e2ab4

[17:48] <Geth> ¦ rakudo/nqp-mbc: 994fac8612 | (Stefan Seifert)++ | src/vm/moar/Perl6/Ops.nqp

[17:49] <Geth> ¦ rakudo/nqp-mbc: Take the list ouf of MAST::InstructionList

[17:49] <Geth> ¦ rakudo/nqp-mbc: review: https://github.com/rakudo/rakudo/commit/994fac8612

[17:49] <Geth> ¦ rakudo/nqp-mbc: 49304528ef | (Stefan Seifert)++ | src/vm/moar/Perl6/Ops.nqp

[17:49] <Geth> ¦ rakudo/nqp-mbc: Get rid of push_ilist

[17:49] <Geth> ¦ rakudo/nqp-mbc: review: https://github.com/rakudo/rakudo/commit/49304528ef

[17:49] <nine> That was one tough rebase

[17:49] <Zoffix> ah, k, it's just one you get if you go way too high with the port

[17:53] <nine> But rebasing gave me a .5 seconds boost in stage mast :)

[17:54] <nine> Of course I expect the same boost in master...but who knows?

[17:54] <Zoffix> tbrowder___: no, they remain Match objects. .ast methods can contain whatever you need them to contain, which in Rakudo's Grammar/Actions would most often be QAST::Node objects. You can modify them any way you want with positional and operations and assigning to attributes for named args. Also, MoarVM's remote debugger ( App::MoarVM::Debug ) can let you inspect those objects in realtime.

[17:56] <Zoffix> tbrowder___: so basically to me it sounds like you want to have custom classes in places where we already have generic classes in hopes that it'd be easier to use, but IMO having a universal set of operations (positionals/nameds access) is far more useful and easier to use than a billion custom classes. This is especially true later in the food chain, such as static optimizer where you could be combing

[17:56] <Zoffix> over a node that comes from anywhere. It's useful to have them all be QAST::Node than SomeCustomClassWithLongDescThatWeUseForBegingBlocks

[17:58] <Zoffix> hm, looks like the port argument to async sock is overwriting some data in memory:

[17:58] <Zoffix> m: start { sleep 2; exit }; react whenever IO::Socket::Async.listen: "localhost", 2¹⁷-1 { done }

[17:58] <camelia> rakudo-moar fa3dc0ab5: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    invalid argument␤      in block <unit> at <tmp> line 1␤␤»

[17:58] <Zoffix> ^ Looks good

[17:58] <Zoffix> m: start { sleep 2; exit }; react whenever IO::Socket::Async.listen: "localhost", 2¹⁸-1 { done }

[17:58] <camelia> rakudo-moar fa3dc0ab5: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    Failed to resolve host name 'localhost' with family 3. Error: 'ai_family not supported'␤      in block <unit> at <tmp> line 1␤␤»

[17:58] <Zoffix> family 3? Huh?

[17:58] <Zoffix> m: start { sleep 2; exit }; react whenever IO::Socket::Async.listen: "localhost", 2⁶³-1 { done }

[17:58] <camelia> rakudo-moar fa3dc0ab5: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    Failed to resolve host name 'localhost' with family 65535. Error: 'ai_family not supported'␤      in block <unit> at <tmp> line 1␤␤»

[17:58] <timotimo> that's about ipv4, ipx, ipv6, etc

[17:58] <Zoffix> family 65535? lol. 

[17:58] <timotimo> addres family

[17:59] <Zoffix> timotimo: yeah, but I'm not changing family. I'm changing port.

[17:59] <timotimo> oh, that's weird

[18:00] <jnthn> I believe the port is bitwise or'd with the shifted family to pass it down to the VM

[18:00] <jnthn> So if the port number isn't being validated before that happens, those bits will be treated as the family

[18:01] <Zoffix> Ah

[18:02] <Zoffix> R#2423

[18:02] <synopsebot> R#2423 [open]: https://github.com/rakudo/rakudo/issues/2423 [LTA] Bad error with too high port in IO::Socket::Async.listen

[18:03] <tbrowder___> Zoffix: ok, thnx for yr opinion, i'll chug on and tend to documenting to the code in the meantime

[18:06] <Zoffix> tbrowder___: Just .dump the object. It'll show you what set of positional/named operations you need to perform on it to get to the part you want to reach

[18:06] <Zoffix> eco: CoreHackers::Q

[18:06] <buggable> Zoffix, CoreHackers::Q 'Perl 6 QAST Visualizer': http://modules.perl6.org/dist/CoreHackers::Q:github:Zoffix%20Znet

[18:07] <Zoffix> tbrowder___: and that module can make it easier to navigate the dumps from --target=ast/optimize

[18:10] <Geth> ¦ rakudo: 6b43a22cc4 | (Zoffix Znet)++ | t/05-messages/02-errors.t

[18:10] <Geth> ¦ rakudo: Fix/Re-fudge sock error test on Windows

[18:10] <Geth> ¦ rakudo: 

[18:10] <Geth> ¦ rakudo: - The test was overly complicated as the error already occurs

[18:10] <Geth> ¦ rakudo:     just from the first listen

[18:10] <Geth> ¦ rakudo: - On Windows, however, this test just sits there forever,

[18:10] <Geth> ¦ rakudo:     with no response inside the whenever

[18:10] <Geth> ¦ rakudo:     R#2424 https://github.com/rakudo/rakudo/issues/2424

[18:10] <synopsebot> R#2424 [open]: https://github.com/rakudo/rakudo/issues/2424 [Windows] High port in IO::Socket::Async.listen appears to hang on Win32

[18:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6b43a22cc4

[18:11] <Zoffix> AlexDaniel: ^ that fixes the AppVeyor issue. Not quite sure how it was passing in the past, considering it hangs on 2017.07

[18:11] <AlexDaniel> hmmm

[18:13] <Zoffix> Oh, it was todo-ed all along

[18:13] <Zoffix> And now passes on Linux

[18:18] <Geth> ¦ rakudo: 532c12c95a | (Zoffix Znet)++ (committed using GitHub Web editor) | .travis.yml

[18:18] <Geth> ¦ rakudo: Use verbose `make test` on travis

[18:18] <Geth> ¦ rakudo: 

[18:18] <Geth> ¦ rakudo: "Failed test 42" is rarely useful, especially when you can't repro locally.

[18:18] <Geth> ¦ rakudo: Verbose tests will give more info on how the failing test fails

[18:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/532c12c95a

[18:19] *** MasterDuke left
[18:20] <Geth> ¦ rakudo: 54483d1fdb | (Zoffix Znet)++ (committed using GitHub Web editor) | appveyor.yml

[18:20] <Geth> ¦ rakudo: Use verbose `make test` on appveyor

[18:20] <Geth> ¦ rakudo: 

[18:20] <Geth> ¦ rakudo: "Failed test 42" is rarely useful, especially when you can't repro locally.

[18:20] <Geth> ¦ rakudo: Verbose tests will give more info on how the failing test fails

[18:20] <Geth> ¦ rakudo: 

[18:20] <Geth> ¦ rakudo: Not quite sure this syntax is right, but maybe it is.

[18:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/54483d1fdb

[18:21] *** cognominal-p6 left
[18:36] *** donaldh joined
[18:37] *** p6bannerbot sets mode: +v donaldh

[18:43] *** commavir_ joined
[18:44] *** p6bannerbot sets mode: +v commavir_

[18:46] *** dct joined
[18:46] *** p6bannerbot sets mode: +v dct

[18:48] *** travis-ci joined
[18:48] *** p6bannerbot sets mode: +v travis-ci

[18:48] <travis-ci> Rakudo build errored. Zoffix Znet 'Use valid port number'

[18:48] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/445788309 https://github.com/rakudo/rakudo/compare/74687ae5cf13...fa3dc0ab5203

[18:48] *** travis-ci left
[18:48] <buggable> [travis build above] ✓ All failures are due to: timeout (6 failures).

[18:48] *** pmurias left
[18:48] *** ufobat left
[18:48] *** |Tux| left
[18:48] *** b2gills left
[18:48] *** commavir left
[18:48] *** btyler_ left
[18:48] *** pmurias joined
[18:48] *** p6bannerbot sets mode: +v pmurias

[18:50] *** |Tux| joined
[18:51] *** p6bannerbot sets mode: +v |Tux|

[18:51] *** btyler joined
[18:52] *** b2gills joined
[18:52] *** p6bannerbot sets mode: +v btyler

[18:52] *** p6bannerbot sets mode: +v b2gills

[18:54] *** ufobat joined
[18:55] *** Zoffix left
[18:55] *** p6bannerbot sets mode: +v ufobat

[19:02] *** fake_space_whale left
[19:03] *** brrt joined
[19:03] *** p6bannerbot sets mode: +v brrt

[19:07] *** Kaiepi left
[19:08] *** Kaiepi joined
[19:09] *** p6bannerbot sets mode: +v Kaiepi

[19:16] <Geth> ¦ rakudo: 64693a213d | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm6

[19:16] <Geth> ¦ rakudo: Make internal encoding sanity lookup about 6x as fast

[19:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/64693a213d

[19:18] <Geth> ¦ rakudo: lizmat self-assigned Cannot decode a buffer of bytes if it was produced by utf8 encode https://github.com/rakudo/rakudo/issues/2421

[19:23] *** dct left
[19:29] *** AlexDaniel left
[19:30] *** AlexDaniel joined
[19:30] *** p6bannerbot sets mode: +v AlexDaniel

[19:31] *** pmurias left
[19:37] *** pmurias joined
[19:37] *** p6bannerbot sets mode: +v pmurias

[19:40] <Geth> ¦ rakudo: 078b05f646 | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[19:40] <Geth> ¦ rakudo: Make utfX.encoding a bit more declarative

[19:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/078b05f646

[19:48] *** pmurias left
[19:50] *** cognominal-p6 joined
[19:50] *** p6bannerbot sets mode: +v cognominal-p6

[19:53] *** pmurias joined
[19:53] *** p6bannerbot sets mode: +v pmurias

[20:20] *** dct joined
[20:20] *** p6bannerbot sets mode: +v dct

[20:23] *** cognominal-p6 left
[20:24] *** cognominal-p6 joined
[20:24] *** p6bannerbot sets mode: +v cognominal-p6

[20:28] <Geth> ¦ rakudo: 790d4c7ae2 | (Elizabeth Mattijsen)++ | src/core/Buf.pm6

[20:28] <Geth> ¦ rakudo: Remove check on encoding type when decoding utfX

[20:28] <Geth> ¦ rakudo: 

[20:28] <Geth> ¦ rakudo: - basically, let the Blob.decode do the work

[20:28] <Geth> ¦ rakudo: - which, incidentally, adds :replacement and :strict optional nameds

[20:28] <Geth> ¦ rakudo: - in response to R#2421

[20:28] <Geth> ¦ rakudo: - makes the core setting about 3K smaller

[20:28] <synopsebot> R#2421 [open]: https://github.com/rakudo/rakudo/issues/2421 [LTA][RFC] Cannot decode a buffer of bytes if it was produced by utf8 encode

[20:28] <Geth> ¦ rakudo: - no spectests were hurt during this operation

[20:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/790d4c7ae2

[20:30] *** brrt left
[20:37] <Geth> ¦ rakudo: lizmat self-unassigned Cannot decode a buffer of bytes if it was produced by utf8 encode https://github.com/rakudo/rakudo/issues/2421

[20:43] *** travis-ci joined
[20:43] *** p6bannerbot sets mode: +v travis-ci

[20:43] <travis-ci> Rakudo build failed. Zoffix Znet 'Use verbose `make test` on appveyor

[20:43] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/445810085 https://github.com/rakudo/rakudo/compare/532c12c95a5b...54483d1fdb60

[20:43] *** travis-ci left
[20:43] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[20:47] *** dct left
[20:55] *** leont joined
[20:56] *** p6bannerbot sets mode: +v leont

[21:04] *** cognominal-p6 left
[21:05] *** cognominal-p6 joined
[21:06] *** p6bannerbot sets mode: +v cognominal-p6

[21:13] *** travis-ci joined
[21:13] *** p6bannerbot sets mode: +v travis-ci

[21:13] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Remove check on encoding type when decoding utfX

[21:13] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/445868523 https://github.com/rakudo/rakudo/compare/078b05f646ec...790d4c7ae292

[21:13] *** travis-ci left
[21:13] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[21:14] <lizmat> The command "make install" exited with 0.

[21:14] <lizmat> Done. Your build exited with 1.

[21:14] <lizmat> WAT?

[21:17] *** tbrowder___ left
[21:18] *** tbrowder___ joined
[21:18] *** p6bannerbot sets mode: +v tbrowder___

[21:29] <Geth> ¦ rakudo: 5f3da88c65 | (Zoffix Znet)++ | 2 files

[21:29] <Geth> ¦ rakudo: Do verbose test after finalizing install

[21:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5f3da88c65

[21:30] *** pmurias left
[21:32] *** pmurias joined
[21:32] *** p6bannerbot sets mode: +v pmurias

[22:01] *** ggoebel left
[22:09] *** travis-ci joined
[22:09] *** p6bannerbot sets mode: +v travis-ci

[22:09] <travis-ci> Rakudo build passed. Zoffix Znet 'Do verbose test after finalizing install'

[22:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/445894647 https://github.com/rakudo/rakudo/compare/790d4c7ae292...5f3da88c65c1

[22:09] *** travis-ci left
[22:46] *** dct joined
[22:46] *** p6bannerbot sets mode: +v dct

[23:16] *** dct left
[23:25] <Geth> ¦ rakudo: c717b62be9 | (Zoffix Znet)++ | 2 files

[23:25] <Geth> ¦ rakudo: Add missing verbose arg to prove

[23:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c717b62be9

[23:43] *** j3nnn1 left
[23:54] *** leont left
