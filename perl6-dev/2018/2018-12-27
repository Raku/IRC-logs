[01:21] <AlexDaniel> O_o

[01:21] <AlexDaniel> my program just ended with “Floating point exception”

[01:23] <AlexDaniel> m: dd <0/0>

[01:23] <camelia> rakudo-moar 1611795d5: OUTPUT: «<0/0>␤»

[01:23] <AlexDaniel> m: say <0/0>.round

[01:23] <camelia> rakudo-moar 1611795d5: OUTPUT: «(signal FPE)»

[01:23] <AlexDaniel> I mean… yeah… but…

[01:23] <AlexDaniel> 6c: say <0/0>.round

[01:23] <committable6> AlexDaniel, https://gist.github.com/94854a749ae9ccb80884dcdd5df9e3b0

[01:24] <AlexDaniel> bisect: old=2018.06 say <0/0>.round

[01:24] <bisectable6> AlexDaniel, Bisecting by exit signal (old=2018.06 new=1611795). Old exit signal: 0 (None)

[01:24] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/407bb0f73363556c20b381e7e8dc192a

[01:24] <bisectable6> AlexDaniel, (2018-07-31) https://github.com/rakudo/rakudo/commit/097826ef7bd985e4febdb106d7a6fa7dfa4fc5d7

[01:26] <AlexDaniel> R#2569

[01:26] <synopsebot> R#2569 [open]: https://github.com/rakudo/rakudo/issues/2569 [regression][severe] SIGFPE when rounding a 0/0 Rat

[01:43] *** MasterDuke joined
[01:43] *** p6bannerbot sets mode: +v MasterDuke

[01:43] *** MasterDuke left
[01:43] *** MasterDuke joined
[01:43] *** herbert.freenode.net sets mode: +v MasterDuke

[01:43] *** p6bannerbot sets mode: +v MasterDuke

[01:56] *** MasterDuke left
[03:07] *** evalable6 left
[03:11] *** evalable6 joined
[03:11] *** ChanServ sets mode: +v evalable6

[03:12] *** p6bannerbot sets mode: +v evalable6

[03:15] *** lizmat left
[03:26] <Geth> ¦ rakudo: d39e2fc4f8 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/Repository/FileSystem.pm6

[03:26] <Geth> ¦ rakudo: Cache files-prefix

[03:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d39e2fc4f8

[07:32] *** evalable6 left
[07:36] *** evalable6 joined
[07:36] *** ChanServ sets mode: +v evalable6

[07:36] *** p6bannerbot sets mode: +v evalable6

[08:40] *** dogbert11 joined
[08:41] *** p6bannerbot sets mode: +v dogbert11

[08:43] *** dogbert17 left
[09:28] *** lizmat joined
[09:28] *** p6bannerbot sets mode: +v lizmat

[10:24] *** [TuxCM] joined
[10:25] *** p6bannerbot sets mode: +v [TuxCM]

[10:39] <[TuxCM]> Rakudo version 2018.12-48-gd39e2fc4f - MoarVM version 2018.12-8-g45d15efe9

[10:39] <[TuxCM]> csv-test-xs-20      0.427 -  0.432

[10:39] <[TuxCM]> test-t --race       0.812 -  0.818

[10:39] <[TuxCM]> csv-ip5xs           0.949 -  0.971

[10:39] <[TuxCM]> test-t              1.803 -  1.843

[10:39] <[TuxCM]> csv-ip5xs-20        7.139 -  7.163

[10:39] <[TuxCM]> test                7.530 -  7.558

[10:39] <[TuxCM]> test-t-20 --race    9.414 -  9.524

[10:39] <[TuxCM]> csv-parser         21.934 - 22.690

[10:39] <[TuxCM]> test-t-20          29.404 - 30.848

[10:51] *** Tux__ left
[10:53] *** Tux__ joined
[10:54] *** p6bannerbot sets mode: +v Tux__

[10:57] *** [TuxCM] left
[10:57] *** [TuxCM] joined
[10:58] *** |Tux| joined
[10:58] *** Tux__ left
[10:58] *** p6bannerbot sets mode: +v [TuxCM]

[10:58] *** p6bannerbot sets mode: +v |Tux|

[11:01] *** lizmat left
[11:24] *** Tux__ joined
[11:25] *** p6bannerbot sets mode: +v Tux__

[11:25] *** lizmat joined
[11:25] *** p6bannerbot sets mode: +v lizmat

[11:27] *** [TuxCM] left
[11:28] *** [TuxCM] joined
[11:29] *** Tux__ left
[11:29] *** p6bannerbot sets mode: +v [TuxCM]

[11:50] *** Tux__ joined
[11:51] *** p6bannerbot sets mode: +v Tux__

[11:54] *** [TuxCM] left
[11:54] *** [TuxCM] joined
[11:55] *** Tux__ left
[11:55] *** p6bannerbot sets mode: +v [TuxCM]

[12:04] *** llfourn left
[12:22] *** Tux__ joined
[12:22] *** p6bannerbot sets mode: +v Tux__

[12:25] *** [TuxCM] left
[12:52] *** [TuxCM] joined
[12:53] *** p6bannerbot sets mode: +v [TuxCM]

[12:54] <Geth> ¦ rakudo: 11da0fb489 | (Elizabeth Mattijsen)++ | src/core/Rational.pm6

[12:54] <Geth> ¦ rakudo: Fix FPE on Rat.round

[12:54] <Geth> ¦ rakudo: 

[12:54] <Geth> ¦ rakudo: Fixes R#2569, but makes Rat.round 30% slower :-(

[12:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/11da0fb489

[12:54] <synopsebot> R#2569 [open]: https://github.com/rakudo/rakudo/issues/2569 [regression][severe] SIGFPE when rounding a 0/0 Rat

[12:56] *** Tux__ left
[12:56] *** Tux__ joined
[12:57] *** p6bannerbot sets mode: +v Tux__

[12:57] *** [TuxCM] left
[13:22] <Geth> ¦ rakudo: cf0a6eaa24 | (Elizabeth Mattijsen)++ | src/core/Rational.pm6

[13:22] <Geth> ¦ rakudo: Streamline Rational.floor/ceiling/Int

[13:22] <Geth> ¦ rakudo: 

[13:22] <Geth> ¦ rakudo: - use ternaries

[13:22] <Geth> ¦ rakudo: - use Failure.new instead of fail, just returning the Failure directly

[13:22] <Geth> ¦ rakudo: - set return value on signature for possible future optimization possibilities

[13:22] <Geth> ¦ rakudo: - makes them about 10% faster

[13:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cf0a6eaa24

[13:23] *** [TuxCM] joined
[13:24] *** p6bannerbot sets mode: +v [TuxCM]

[13:27] *** Tux__ left
[13:28] *** Tux__ joined
[13:28] *** [TuxCM] left
[13:28] *** p6bannerbot sets mode: +v Tux__

[13:49] *** [TuxCM] joined
[13:50] *** p6bannerbot sets mode: +v [TuxCM]

[13:51] <Geth> ¦ rakudo: 236351adeb | (Elizabeth Mattijsen)++ | src/core/Rational.pm6

[13:51] <Geth> ¦ rakudo: Streamline Rational.Num

[13:51] <Geth> ¦ rakudo: 

[13:51] <Geth> ¦ rakudo: - the Rational attributes are always bound, so no decont necessary

[13:51] <Geth> ¦ rakudo: - the defaults in the attribute definition therefore have no meaning

[13:51] <Geth> ¦ rakudo: - makes Rational.Num about 5% faster

[13:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/236351adeb

[13:53] *** Tux__ left
[13:53] *** Tux__ joined
[13:54] *** [TuxCM] left
[13:54] *** p6bannerbot sets mode: +v Tux__

[14:20] *** [TuxCM] joined
[14:21] *** p6bannerbot sets mode: +v [TuxCM]

[14:24] *** Tux__ left
[14:24] *** Tux__ joined
[14:25] *** [TuxCM] left
[14:25] *** p6bannerbot sets mode: +v Tux__

[14:51] *** [TuxCM] joined
[14:52] *** p6bannerbot sets mode: +v [TuxCM]

[14:55] *** Tux__ left
[14:55] *** Tux__ joined
[14:56] *** p6bannerbot sets mode: +v Tux__

[14:56] *** [TuxCM] left
[14:58] *** committable6 left
[14:59] *** committable6 joined
[14:59] *** benchable6 left
[14:59] *** benchable6 joined
[14:59] *** nativecallable6 left
[14:59] *** p6bannerbot sets mode: +v committable6

[15:00] *** p6bannerbot sets mode: +v benchable6

[15:04] <timotimo> lizmat: can you tell if method round became bigger than the inline limit because of that change?

[15:04] <timotimo> if so, perhaps turning the whole Failure.new stuff into a sub call could be wortwhile

[15:04] <lizmat> I tried that already, didn't make a difference

[15:04] <lizmat> so I didn't  :-)

[15:05] <lizmat> it's the extra check on $!denominator, I think

[15:17] *** Tux__ left
[15:57] *** nativecallable6 joined
[15:58] *** p6bannerbot sets mode: +v nativecallable6

[16:25] *** Ven`` joined
[16:26] *** p6bannerbot sets mode: +v Ven``

[16:48] <lizmat> m: dd <1/-1>   # why isn't this a Rat ?

[16:48] <camelia> rakudo-moar 236351ade: OUTPUT: «RatStr.new(-1.0, "1/-1")␤»

[16:48] <lizmat> m: dd <-1/1>   # this is!

[16:48] <camelia> rakudo-moar 236351ade: OUTPUT: «-1.0␤»

[16:59] *** Ven`` left
[17:00] *** Ven`` joined
[17:01] *** p6bannerbot sets mode: +v Ven``

[17:01] *** Tux__ joined
[17:02] *** p6bannerbot sets mode: +v Tux__

[19:14] *** lucasb joined
[19:14] *** p6bannerbot sets mode: +v lucasb

[19:43] <timotimo> mathematicians decided that i guess?

[20:32] *** llfourn joined
[20:32] *** p6bannerbot sets mode: +v llfourn

[21:11] <lizmat> what do mathematicians have to do with -1/1 vs 1/-1 ?   they're both -1 ?

[21:11] <lizmat> timotimo: feels more like a parsing issue to me

[21:11] <lizmat> deliberate, maybe, but still

[21:11] <AlexDaniel> lizmat: yeah, there was a list somewhere with all the ways < > syntax is broken

[21:11] <lizmat> my feeling is that either both should be RatStr or both should be Rat

[21:12] <timotimo> hm. perhaps the canonical representation of a rat doesn't have to be RatStr anyway

[21:12] <timotimo> m: dd <-2/2>

[21:12] <camelia> rakudo-moar 236351ade: OUTPUT: «-1.0␤»

[21:12] <timotimo> hum.

[21:14] <gfldex> the Rat literal is a construct of convenience and one form not working is not very convenient at all.

[21:14] <timotimo> well, they're both Rat, only one of them is RatStr

[21:14] <gfldex> and since when did mathematicians ever stop us from doing the right thing? :->

[21:15] <lucasb> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L3256

[21:15] <lucasb> <de=.signed-integer> would help?

[21:16] <gfldex> m: sub s(Rat $r){ dd $r }; s(<-1/1>); s(<1/-1>);

[21:16] <camelia> rakudo-moar 236351ade: OUTPUT: «-1.0␤RatStr.new(-1.0, "1/-1")␤»

[21:17] <gfldex> m: sub s(Rat $r){ dd $r.gist, $r.Str }; s(<-1/1>); s(<1/-1>);

[21:17] <camelia> rakudo-moar 236351ade: OUTPUT: «"-1"␤"-1"␤"1/-1"␤"1/-1"␤»

[21:17] <gfldex> is there a notable performance hit for RatStr?

[21:18] <timotimo> haven't checked yet, but i wouldn't assume it's a whole lot

[21:18] <gfldex> m: dd (<1/-1> * 2).WHAT;

[21:18] <camelia> rakudo-moar 236351ade: OUTPUT: «Rat␤»

[21:19] <gfldex> the RatStr doesn't survive for long it seams

[21:19] <AlexDaniel> lizmat: fwiw I think if we want <> syntax to be there, we should create a table or something with a list of inputs and and expected outputs, or something

[21:19] <AlexDaniel> I remember having some good laughs about it with Zoffix

[21:19] <gfldex> It will take more RAM tho. That might become an issue in corner cases.

[21:20] <AlexDaniel> it may be convenient for simple cases, but in more complex (haha) cases it's very unpredictable

[21:21] <AlexDaniel> like, if in the end you have to check what value is created anyway, why not use a more readable syntax

[21:24] <AlexDaniel> m: dd <1>

[21:24] <camelia> rakudo-moar 236351ade: OUTPUT: «IntStr.new(1, "1")␤»

[21:24] <AlexDaniel> m: dd <-1>

[21:24] <camelia> rakudo-moar 236351ade: OUTPUT: «IntStr.new(-1, "-1")␤»

[21:24] <AlexDaniel> m: dd <42.5>

[21:24] <camelia> rakudo-moar 236351ade: OUTPUT: «RatStr.new(42.5, "42.5")␤»

[21:25] <lucasb> https://github.com/rakudo/rakudo/commit/04951905dee0d8787264719474130d8ec60f2cf7

[21:26] <AlexDaniel> > <TimToady> the reasoning is pragmatic; there's good reason to write <1/2> and <1+2i> as literals, and no good reason to write <42>, since you could just write 42 instead

[21:26] <AlexDaniel> https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2016-11-27#l38

[21:26] <lucasb> ^^ he introduced the signed-integer token in that commit

[21:27] <lucasb> made the numerator 'signed-integer' but not the denominator

[21:27] <AlexDaniel> yeah but that's just for parsing

[21:28] <lucasb> I thought it was the issue here

[21:28] <AlexDaniel> <nu=.signed-integer> '/' <de=integer> }

[21:29] <AlexDaniel> lucasb: you're right

[21:29] <lucasb> is there any reason that it isn't "<de=.signed-integer>" ?

[21:30] <lizmat> not that I know of

[21:30] <lucasb> '1/+2' looks strange, but... I guess it's orthogonal :)

[21:30] <lucasb> ah, I guess TimToady thought of that

[21:31] <AlexDaniel> m: .^name.say for <1/2>, <1/2*10>, <1/2*10**10>

[21:31] <camelia> rakudo-moar 236351ade: OUTPUT: «Rat␤Str␤RatStr␤»

[21:32] <lucasb> what?!

[21:32] <lucasb> m: dd <1/2*10**10>

[21:32] <camelia> rakudo-moar 236351ade: OUTPUT: «RatStr.new(0.00000000005, "1/2*10**10")␤»

[21:34] <AlexDaniel> you can put a minus here

[21:34] <AlexDaniel> m: say .^name for <-1/2*10**10>

[21:34] <camelia> rakudo-moar 236351ade: OUTPUT: «RatStr␤»

[21:34] <AlexDaniel> and here and here

[21:34] <AlexDaniel> m: say .^name for <-1/-2*-10**10>

[21:34] <camelia> rakudo-moar 236351ade: OUTPUT: «RatStr␤»

[21:34] <AlexDaniel> but not here

[21:34] <AlexDaniel> m: say .^name for <-1/-2*-10**-10>

[21:34] <camelia> rakudo-moar 236351ade: OUTPUT: «Str␤»

[21:35] <AlexDaniel> although it can be a +

[21:35] <AlexDaniel> m: say .^name for <-1/-2*-10**+10>

[21:35] <camelia> rakudo-moar 236351ade: OUTPUT: «RatStr␤»

[21:37] <japhb> There are surely some bugs there, but I suspect there's a reason <1/-1> is a RatStr instead of a Rat: Because <1/-1> is not in canonical form, thus there's a reason that the original intent should be saved in the Str side of the allotrope.

[21:37] <japhb> Basically, Perl 6 assumes you have a reason for doing things in an odd way, and that there may be meaning to that.

[21:38] <japhb> Just like <42> Creates an allotrope, because the only reason for you to not just write 42 is because you wanted something special.

[21:38] <AlexDaniel> heh canonical form

[21:39] <japhb> Sorry, allo*morph*

[21:39] <SmokeMachine> m: dd <2/4>

[21:39] <camelia> rakudo-moar 236351ade: OUTPUT: «0.5␤»

[21:39] * japhb has spent too much time the last few days explaining all the cool things about carbon

[21:39] <AlexDaniel> I mean, japhb is right, that's the actual intent indeed

[21:40] <AlexDaniel> but IMO we should throw it away and start again with simpler rules

[21:40] <AlexDaniel> m: say WHAT <0xf.8*:2[1,0]**0b11/0o200+2.0e2i>

[21:40] <camelia> rakudo-moar 236351ade: OUTPUT: «(ComplexStr)␤»

[21:40] <AlexDaniel> m: say <0xf.8*:2[1,0]**0b11/0o200+2.0e2i>

[21:40] <camelia> rakudo-moar 236351ade: OUTPUT: «0xf.8*:2[1,0]**0b11/0o200+2.0e2i␤»

[21:41] <AlexDaniel> m: say +<0xf.8*:2[1,0]**0b11/0o200+2.0e2i>

[21:41] <camelia> rakudo-moar 236351ade: OUTPUT: «0.96875+200i␤»

[21:41] <SmokeMachine> 2/4 isnt the canonical form ether, right?

[21:41] <AlexDaniel> SmokeMachine: no, it's right, it gave you a Rat

[21:41] <AlexDaniel> m: say WHAT <2/4>

[21:41] <camelia> rakudo-moar 236351ade: OUTPUT: «(Rat)␤»

[21:42] <SmokeMachine> I mean by what japhb was saying, it should be an RatStr, right?

[21:43] <AlexDaniel> SmokeMachine: no, the idea is that it is a syntax for Rat and Complex literals

[21:43] <AlexDaniel> so in a “canonical form” you'll get a pure Rat or pure Complex

[21:46] <japhb> There's a reason I was willing to write Str.Numeric but considered val() a bit above my pay grade ...

[21:47] <timotimo> are you talking about carbon, the element?

[21:47] <japhb> timotimo: Yes, that's why I fumbled "allomorph" as "allotrope" instead

[21:49] <japhb> "What's the difference between graphite and diamond?"  "Do you want the short answer or the long answer?"  "I've got all the time in the world, Daddy."

[21:49] <AlexDaniel> lizmat: see also R#1827

[21:49] <synopsebot> R#1827 [open]: https://github.com/rakudo/rakudo/issues/1827 <1i> should be a Complex literal, not ComplexStr

[21:57] <AlexDaniel> m: dd <0x_FF.FF>

[21:57] <camelia> rakudo-moar 236351ade: OUTPUT: «RatStr.new(255.99609375, "0x_FF.FF")␤»

[21:58] <AlexDaniel> arguably the rules for getting a plain Rat or Complex are fairly simple

[22:07] *** llfourn left
[22:24] <timotimo> japhb: one of those days i'll watch a five hour lecture on the topic or something :)

[22:29] <japhb> timotimo: Heh.  :-)

[22:48] <Geth> ¦ rakudo: 5c0ac4db9f | (Elizabeth Mattijsen)++ | src/core/Rational.pm6

[22:48] <Geth> ¦ rakudo: Streamline Rational.Str

[22:48] <Geth> ¦ rakudo: 

[22:48] <Geth> ¦ rakudo: - compartmentalize the logic into private methods

[22:48] <Geth> ¦ rakudo: - <42/21> is now about 2.2x as fast

[22:48] <Geth> ¦ rakudo: - <42/17> is now about 1.2x as fast

[22:48] <Geth> ¦ rakudo: - keep comments as much as possible

[22:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5c0ac4db9f

[22:51] <lizmat> afk&

[23:02] *** Ven`` left
[23:05] *** Ven`` joined
[23:06] *** p6bannerbot sets mode: +v Ven``

[23:43] *** lucasb left
[23:51] <Ven``> Am I the only one seeing an issue with https://perl6advent.wordpress.com/2018/12/17/day-17-compiling-our-way-to-happiness/ ?

[23:51] <Ven``> masak

[23:52] <Ven``> Even https://perl6advent.wordpress.com/2015/12/23/day-23-macros-and-secret-agents/ looks a bit weird :o)

[23:54] <Ven``> masak++ # for blogging

