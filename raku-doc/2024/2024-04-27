[08:02] *** sena_kun joined
[08:46] *** sena_kun left
[10:55] <ab5tract> I expect this has been discussed before, but what about having release-targeted documentation? Similar to how many other projects do it, with a dropdown for selecting the relevant release

[10:56] <ab5tract> This would free us from having to inline exceptions like “prior to 2022.10” or “after 2023.03”

[11:38] <patrickb> ab5tract: That's a discussion with a long history. I think there is a problem-solving for this.

[11:46] <ab5tract> I figured so :)

[11:46] <ab5tract> I’ll look it up, thanks!

[11:59] <lizmat> if I remember correctly, the consensus was to put in inline exceptions until we have a better solution

[11:59] <lizmat> and we don't have a better solution yet

[13:34] <[Coke]> release-targeted documention is not feasible with our documentation staffing level.

[13:35] <[Coke]> but it would be nice, and the manual comments at least are saving the information somewhere.

[13:36] <[Coke]> there are doc issues for this, you don't need a PS issue

[13:36] <[Coke]> one moment.

[13:36] <[Coke]> https://github.com/Raku/doc/discussions/4206

[13:38] <[Coke]> Having just tried to re-catch-up there... it's kind of a mess of threads.

[13:38] <[Coke]> If you would rather start a new discussion, I would not object. ;)

[13:38] <[Coke]> er, :)

[14:06] *** sena_kun joined
[15:07] <ab5tract> Wow, that’s so much more complex than what I had imagined.

[15:08] <ab5tract> My approach would be simply to generate docs based on bit tags that are keyed to language releases

[15:09] <ab5tract> s/bit/git/

[15:09] <ab5tract> Generate a new static edition every release

[15:10] <ab5tract> And allow these editions to be selected  with a dropdown (or changing a sub path in the url)

[15:13] <ab5tract> No need to annotate anything about this version or that version outside of deprecations and the like, which are then updated/removed in later documentation versions

[15:13] <ab5tract> As necessary

[15:22] <[Coke]> language release or compiler release?

[15:23] <[Coke]> because the way we do compiler releases, language releases are not fine grained enough.

[15:23] <[Coke]> we'd still need "ok, 6.d works this way, expect before 2023.08, when..."

[15:23] <[Coke]> s/expect/except/

[15:25] <ab5tract> ah, yeah, I meant the monthly releases

[15:26] <ab5tract> fwiw I would like to revisit the whole language release concept as well, but that's for a different time

[15:28] <ab5tract> for sure my proposal only works when keying doc releases to language releases

[15:28] <ab5tract> note that nothing has to have technically changed in the docs between the two tags

[15:29] <ab5tract> the one issue with this is that clarifications and expansions would not be visible in releases prior to their addition

[15:29] <ab5tract> but I think that is a deeply normal way for documentation to work :)

[15:34] <[Coke]> I think compiler release is too fine grained for that, but language release makes sense.

[15:34] <[Coke]> we already have years of "hey this changed in this compiler release" that are NOT reflected in the docs today

[15:34] <[Coke]> so it's not just a matter of changing how we present the docs: we don't *have* those docs.

[15:35] <[Coke]> ... which reminds me, I didn't create the tickets to grab the last few releases of changes for docs.

[15:35] <[Coke]> https://github.com/Raku/doc/labels/checklist

[15:38] <[Coke]> We basically don't have anyone writing docs right now. We have fin*, who is more website/rakudoc, coleman who is infra, and me who is more like a PM with no one to M. :)

[15:38] * [Coke] will resolve to get those missing checklist items in the tracker today.

[15:39] <[Coke]> so, not telling you "no", just explaining why things are the way they are right now

[15:39] <[Coke]> thank you for your interest in docs.

[15:40] <ab5tract> > 5:23 PM <[Coke]> because the way we do compiler releases, language releases are not fine grained enough.

[15:41] <ab5tract> That seems to contradict:

[15:41] <ab5tract> > 5:34 PM <[Coke]> I think compiler release is too fine grained for that, but language release makes sense.

[15:42] <ab5tract> I see the bootstrapping issue you mention but what I propose is more or less the universal standard for documentation

[15:45] <ab5tract> Even if the docs haven’t changed since last point release, you still publish docs for the point release

[15:45] <ab5tract> Everything that came before is already being served by the current docs, so I don’t really see the issue there

[15:45] <ab5tract> Anyway, I will open a ticket to discuss, as you suggested earlier

[15:59] <[Coke]> ab5tract: no, it's the same two things, but the clauses are in a different order.

[16:00] <[Coke]> wait.

[16:01] <[Coke]> re-re-reading. yes. language releases seem like a good scope for "per-release" docs. compiler release seems too much. Not because of the changs in docs, but I as a user also wouldn't expect to have to look at the docs per compiler version

[16:02] <[Coke]> also: what if we missed documenting something for, e.g. 2023.09 - depending on how we do the releaess, a simple tag isn't enough now to go back and fix the docs.

[16:02] <[Coke]> not *just* because of changes in the docs.

[16:20] <ab5tract> the reason you as a user would select a specific compiler release of the docs is because that is the version you are using

[16:20] <ab5tract> The same way I look at Flink docs for 1.15 instead of “latest” or any other version

[16:22] <ab5tract> FWIW, this approach is so straightforward for auto generated docs that I can’t recall ever seeing it _not_ done this way

[16:23] <ab5tract> But we are in a different situation, I agree

[16:37] <coleman> I'm not a fan of selecting versions from a dropdown. I think it's a bad UX and can be a maintenance burden. This is the argument I used when guiding some product teams away from it.

[16:38] <coleman> I think there are exceptions, such as...like... RHEL, where the release number is something you pay a million dollars for and talk on the phone with support about

[16:39] <coleman> However:

[16:40] <coleman> I wouldn't oppose this change but we are not set up for it.

[16:43] <ab5tract> I think having a dropdown is more polite than what many auto-generated docs do, which is force you to edit a version sub-path in the URL (or find the magic index page that links between versions) :)

[16:43] <ab5tract> regarding setup, I hear you

[16:43] <coleman> I think working towards it will have benefits, whatever the web UX looks like. 

[16:44] <coleman> So here on the docs page, we say we don't want to embed docs in the compiler source

[16:44] <coleman> https://github.com/Raku/doc

[16:45] <coleman> I think that should remain the case, but we could explore some automation around updates from Rakudo-> docs

[16:45] <coleman> or from Roast->docs

[16:46] <coleman> Something that retains the open-ness of inviting multiple implementations, but takes advantage of what we have

[16:46] <coleman> The people we have, rather

[16:47] <ab5tract> I would argue that the existence of "As of Rakudo 20XX.YY , this became that" and so forth all throughout the docs already breaks the contract as envisaged in that statement, but I do understand the sentiment

[16:47] <coleman> That is part of my motivation with opening this issue https://github.com/Raku/doc-website/issues/359

[16:48] <coleman> My thinking is, if we can get our pod-parsing code to reliably target a sql schema, we will have a schema that OTHER things can target

[16:48] <ab5tract> that SQLite idea sounds awesome

[16:48] <coleman> So a CI job in Roast or Rakudo could ALSO spit out SQL INSERT statements, and we can load those in

[16:50] <coleman> So we don't have to bikeshed new pod syntax, or have a philosophical debate about where canonical documentation lives, or rather we can keep doing that, but also dump all our stuff into a common database :D

[16:57] <coleman> I think it would be a very Raku/timtoady thing to do: in addition to the static site, the docs site can serve a 10 meg sql file that anyone can download, and we let a 100 flowers bloom

[16:59] <coleman> But back to the original suggestion. I think a good prerequisite to serving versioned docs is proving that we have all that information as structured data in the first place. I'm not convinced we do... maybe we do. But loading a relational DB with a "version" table we can join to a "roles" table is a great way to test that.

[17:00] <coleman> That's a downside of ad hoc inline version info; you might not always be capturing it in an easily parsable way. Things can slip through.

[18:36] <[Coke]> we don't even have it as unstructured data.

[18:37] <[Coke]> not entirely. there are some stabs at it as ab5tract noted with "prior to 2023.xx, this ..."

[18:37] <[Coke]> We should consider what we want the docs to look like when 6.e drops

[18:37] <[Coke]> Having the doc site polished for content for at least 6.d vs. 6.e would be nice.

[23:59] *** sena_kun left
