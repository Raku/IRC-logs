[04:04] *** [Coke]_ joined
[04:06] *** [Coke] left
[10:54] <lizmat> is it correct that a =table with only a header, is codegenned as only having rows ?

[10:54] <lizmat> case in point:

[10:55] <lizmat> =begin table

[10:55] <lizmat> foo    bar

[10:55] <lizmat> ==========

[10:55] <lizmat> =end table

[11:52] <lizmat> what would be a good delimiter to put between two URLs ?

[13:52] <lizmat> [Coke]_ It feels to me that the use of <strong> in https://docs.raku.org/language/pod.html#Indexing_terms is somehow a rendering artefact ?

[15:02] *** [Coke] joined
[15:02] <[Coke]> yes, that shouldn't look like that.

[15:03] <[Coke]> It rendered the B<> as a <strong>, then escaped the strong

[15:04] <[Coke]> the :allow there isn't working as intended, I think.

[15:05] *** [Coke]_ left
[15:07] <lizmat> *phew*   yeah, was wondering if I missed something 

[17:28] <lizmat> hmmm..  I also just noticed that no markup is allowed with declarator pod ?

[17:41] <lizmat> Q: I don't see a way to get more than one element in a leading or trailing Pod::Block::Declarator object, am I missing something?

[17:44] <lizmat> I wonder why it is codegenned as a single element array containing a single element array

[17:44] *** sena_kun joined
[17:46] <lizmat> aka [["foo"],] rather than "foo"

[18:17] <[Coke]> That is an excellent question. My recent work to test the pod in raku/doc ended up just always doing a .join and treating it as text. Some items have arrays, but I think it made everything an array all the time for consistency

[22:31] *** sena_kun left
