[08:59] *** sena_kun joined
[12:57] <lizmat> so I think I'm going to give a stab at documenting RakuAST classes

[13:00] <lizmat> which is 360+ classes

[13:22] <[Coke]> So, we have a place for type docs to go. Wonder if we want a standard header that mentions experimental and links to a top level language page about the AST

[13:22] <[Coke]> also: that's a lot!

[14:25] <patrickb> It might make sense to think about how RakuAST documentation relates to the rest of the docs. I do believe RakuAST could be a good anchor point for the reference documentation of the Raku syntax. AFAIK the syntax is currently mostly documented in language/syntax, but otherwise sprinkled throughout the rest of the docs.

[17:00] <sena_kun> re documenting: I believe we'll get a better effort-to-result ratio if one writes a tutorial like document explaining how to traverse RakuAST themselves, without an effort to document _all_ 350 classes

[17:06] <lizmat> well, I hope that https://dev.to/lizmat/rakuast-for-early-adopters-576n and follow up blog posts will be a good start for a tutorial

[17:19] <Voldenet> imo .AST and .DEPARSE are more useful than docs in getting things done

[17:19] <Voldenet> for people that know raku's syntax at least

[17:20] <lizmat> and don't forget .raku  :-)

[17:23] <Voldenet> for parts that can't use the above, code examples are going to be more useful, I'm not saying to ditch the docs, just that their use would be limited anyway

[17:35] <Voldenet> I'm not a fan of having this big `RakuAST::` trees in the actual code anyway, constant string-based AST generation and minor replacements are going to be easier to read and modify

[17:36] <Voldenet> so: `'if "REPLACE_FIRST" eq "REPLACE_SECOND" { return "REPLACE_THIRD" }'.AST` and then ast traversal with StrLiterals replaced by variables or untrusted input

[21:02] *** sena_kun left
[21:29] *** coleman_ joined
[21:37] *** coleman left
[21:37] *** coleman_ is now known as coleman

