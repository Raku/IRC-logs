[00:10] *** Kaiepi left
[02:06] *** Kaiepi joined
[03:20] *** Kaiepi left
[06:00] *** Kaiepi joined
[08:39] *** sena_kun joined
[09:58] *** lizmat_ joined
[09:59] *** lizmat__ joined
[09:59] <Geth> ¦ doc/document-are: 4 commits pushed by (Elizabeth Mattijsen)++

[09:59] <Geth> ¦ doc/document-are: c8f331765f | Document the .are method

[09:59] <Geth> ¦ doc/document-are: c7375b3ba9 | Tweak, Altai-man++

[09:59] <Geth> ¦ doc/document-are: 8b4d2bfb9a | More sses

[09:59] <Geth> ¦ doc/document-are: deb8e35617 | Fix typo in c<>

[10:00] <Geth> ¦ doc/document-are: review: https://github.com/Raku/doc/compare/c8f331765f46^...deb8e35617e0

[10:01] <Geth> ¦ doc: 7b6f23e869 | (Elizabeth Mattijsen)++ | doc/Language/phasers.pod6

[10:01] <Geth> ¦ doc: Fix typo in c<>

[10:01] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/7b6f23e869

[10:02] *** lizmat__ left
[10:02] *** lizmat left
[10:02] *** lizmat__ joined
[10:03] *** lizmat_ left
[10:09] *** lizmat__ left
[10:09] *** lizmat joined
[10:31] *** sena_kun left
[11:14] *** sena_kun joined
[13:37] *** Altai-man joined
[13:37] *** sena_kun left
[14:23] <lizmat> Q: is the new doc site running using run-time templates?  or is it basically static server-side ?

[14:42] <patrickb> lizmat: It's using cro templates. So runtime, not static anymore.

[14:42] <lizmat> ok, check

[14:42] <lizmat> OOC, could the result of the template running be cached ?

[14:52] <patrickb> I guess so. We might even consider not doing this in the docs software itself, but putting a completely separate http cache in front

[14:53] * lizmat was hoping that could be part of Cro, or a plugin

[14:53] <patrickb> varnish or similar

[15:57] <[Coke]> I would love it if we ended up with a full Raku stack, but using cro is a big win already.

[15:57] <[Coke]> (for eat-our-own-dogfood reasons)

[16:45] <Altai-man> lizmat, it uses run-time templates, but they are compiled

[16:45] <Altai-man> it's not static server-side

[16:45] <Altai-man> lizmat, it's already cached, otherwise it'd be 100x times slower than needed

[16:46] <lizmat> but the caching is done by an man in the middle, right ?

[16:46] <Altai-man> yes

[16:46] <lizmat> ok, understood

[16:46] <Altai-man> wait, no

[16:46] <Altai-man> depending on where is the "middle". :)

[16:47] <lizmat> the first one, from the originating server  :-)

[16:47] <Altai-man> you can lookup implementation, it's pretty short (well, raku), but what it does essentially is just a hash with strings. on each request we check if we have the page there and if yes, just serve the text, but otherwise go the long route.

[16:47] <Altai-man> it's not external caching of some server in front

[16:48] <lizmat> ah?  Interesting...

[16:59] <Altai-man> I think it was the KISSish solution I could think of at that time

[17:00] <Altai-man> https://github.com/Altai-man/docs.raku.org/blob/master/lib/Docky/Routes.pm6#L126-L128 <- like this

[17:00] <lizmat> I see...  :-)

[17:07] <Altai-man> horrible, right? :)

[17:15] <lizmat> possibly: so the cache is in memory only?

[17:20] <Altai-man> yes

[17:21] <Altai-man> on average the app can work for weeks, so it's not a problem

[17:27] <lizmat> the IRClogs server saves the rendered daily and index pages on disk

[17:28] <lizmat> I once had the hope to serve them directly from disk with SendFile in Cro...

[17:28] <lizmat> but that appears to be one bridge too far

[17:50] *** Kaiepi left
[18:12] *** Altai-man left
[18:56] *** sena_kun joined
[19:07] *** Kaiepi joined
[19:52] *** sena_kun left
[19:55] *** sena_kun joined
[20:27] <[Coke]> JSON::Fast to-json :pretty could use a way to stabilize ordering

[20:29] <[Coke]> ah, already exists. nifty

[20:33] <[Coke]> timo++ lizmat++

[20:58] *** sena_kun left
[20:59] *** sena_kun joined
[21:21] <lizmat> timo++   did that

[22:57] *** sena_kun left
[23:56] *** Nemokosch joined
[23:57] <Nemokosch> Hi, so... just a quick reiteration. What do you think of allowing Github Discussions - and possibly rolling them out for multiple Raku repositories

[23:58] <Nemokosch> I can open an issue for it if that's the problem.:P  I just hate to open badly designed issues so it comes with quite a big overhead on my side.

