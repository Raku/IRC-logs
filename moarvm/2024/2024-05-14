[01:35] *** lizmat_ joined
[01:38] *** lizmat left
[02:14] *** MasterDuke joined
[02:23] <MasterDuke> so the two bytecode dumps from t/02-rakudo/reproducible-builds.t have the same number of lines. and the difference doesn't start showing up until the lexicals. but *many* of them are in different frame numbers

[03:26] <MasterDuke> hm. probably unrelated, but something i noticed while investigating stuff. during the build of CORE.c, we do a lot of allocating via MVM_free_at_safepoint. and then in MVM_alloc_safepoint (which frees all the entries) the max size of the list was 22k

[03:29] <MasterDuke> i wonder if it would make sense to statically allocate a giant array of pointers and just assign and increment an index instead of adding to a linked list

[07:39] *** lizmat_ left
[07:39] *** lizmat joined
[08:16] *** sena_kun joined
[09:00] <jnthn> Booleans tend to be quite transient anyway (produced and soon tested, rather than storing loads of them in arrays). An MVMRegister is a union of different types that are maximally 64 bits, and CPU registers are also 64 bits.

[13:05] *** Woodi left
[13:09] *** rypervenche left
[13:19] *** Woodi joined
[13:23] *** rba left
[13:23] *** rba joined
[14:01] <ab5tract> jnthn++ thanks for the explanation, it makes a lot of sense to me

[14:34] <japhb> There *are* uses for byte-boolean arrays that are situationally more efficient than bit-packed or fully-unpacked bools, but I think we just haven't hit them yet.

[20:11] *** rypervenche joined
[22:15] *** sena_kun left
