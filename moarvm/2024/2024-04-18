[00:43] *** MasterDuke joined
[00:55] <MasterDuke> .

[00:55] <tellable6> 2024-04-17T08:25:57Z #moarvm <lizmat> MasterDuke: sorry for the noise

[00:59] <MasterDuke> jnthn, nine, etc: while reducing the string heap might not produce much of a measurable benefit, what about the fact that converting cuuid from an MVMString to and MVMuint64 removes a GCed field from MVMStaticFrame? think that would have a noticeable enough benefit to keep on pursuing this?

[01:24] <MasterDuke> and if so, any suggestions on how to bootstrap/propagate-up-through-nqp-and-rakudo  the change?

[01:28] *** bloatable6_ joined
[01:28] *** unicodable6_ joined
[01:28] *** nativecallable6_ joined
[01:28] *** evalable6_ joined
[01:28] *** squashable6 joined
[01:28] *** coverable6_ joined
[01:28] *** releasable6_ joined
[01:29] *** bloatable6_ left
[01:29] *** unicodable6_ left
[01:29] *** releasable6_ left
[01:29] *** coverable6_ left
[01:29] *** evalable6_ left
[01:29] *** squashable6 left
[01:29] *** nativecallable6_ left
[01:30] *** tellable6_ joined
[01:30] *** committable6_ joined
[01:30] *** shareable6_ joined
[01:30] *** sourceable6_ joined
[01:30] *** statisfiable6 joined
[01:31] *** linkable6_ joined
[01:31] *** nativecallable6_ joined
[01:31] *** quotable6_ joined
[01:31] *** benchable6_ joined
[01:31] *** unicodable6_ joined
[01:31] *** notable6_ joined
[01:32] *** evalable6_ joined
[01:32] *** greppable6_ joined
[01:32] *** squashable6 joined
[01:32] *** bloatable6_ joined
[01:32] *** releasable6_ joined
[01:32] *** coverable6_ joined
[01:32] *** bisectable6_ joined
[01:33] *** reportable6 joined
[01:40] *** evalable6_ left
[01:41] *** evalable6_ joined
[03:58] *** MasterDuke left
[04:25] <Woodi> yesterday I was watching FOSDEM2024 presentation about dashboard using duckdb and for performance reasons they changed strings into ints. they have data, on load to db they convert to enums and use that in queries

[04:26] <Woodi> maybe it is inline::perl which needs to be converted ? :)

[04:58] <Woodi> also: it is start up so everything matters...

[05:00] *** lizmat__ joined
[05:03] *** lizmat left
[05:53] *** lizmat joined
[05:57] *** lizmat__ left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:52] <nine> MasterDuke: still doubt that would bring any measurable benefit. Mind that I could also just be wrong.

[06:52] <tellable6> nine, I'll pass your message to MasterDuke

[06:53] *** lizmat_ joined
[06:53] <nine> Woodi: I'm quite sure they had several orders of magnitudes more strings in that database than we're talking about here :)

[06:56] *** lizmat left
[08:07] <Woodi> sure, but  MVMuint64 cuid_idx = get_vm_string_index(tc, ss, MVM_coerce_i_s(tc, sf->body.cuuid));  or just X x 20k array walking on startup sound bad. and how many pointers dereference and function calls ? just saying: nice to consider...

[08:10] <Woodi> btw. that are strings related to source code and transfered into arryas ?

[08:18] <nine> Again, there is certainly a cost here. I'm just saying that 20K things may sound much to a Raku or Perl programmer, but for C code that's practically nothing. Would it be worth the effort if all it does is save some 0.2ms on startup?

[08:25] <Woodi> nine: hom much is 0.2 ms :)  as Counter-Strike player if it is noticable to eyes then it is worth :)  also as cli user: if makes difference for:  command ENTER ARROWUP ENTER  then worth. but that just my use case :)

[08:25] <nine> Of course I can't tell anyone what to do or not to do. I wouldn't even want to. Just saying that if it were my time, I'd want to see a profile first that gives me some indication that this optimization might be worth it.

[08:27] <Woodi> sure. 'MVMuint64 cuid_idx = get_vm_string_index(tc, ss, MVM_coerce_i_s(tc, sf->body.cuuid));' is that code what we talking about or lines ?

[08:27] <Woodi> s/other lines/

[08:27] <nine> 0.2ms is incidentally about 0.2 % of rakudo -e '' on my machine. So no, you wouldn't notice it at all.

[08:27] <nine> That get_vm_string_index call is from the profiler.

[08:30] *** lizmat_ left
[08:31] <Woodi> ack says  get_vm_string_index  is used  4 times so 0.8ms ? :)

[08:31] *** lizmat joined
[08:32] <Woodi> wait, profiler ? it is compiled in by default ?

[08:34] <Woodi> that arrays are probably actual optimization :)

[08:35] <nine> get_vm_string_index is a static function in src/profiler/heapsnapshot.c. It therefore can only be used within that file and it is only used when the profiler is active

[08:37] <Woodi> and when profiler is used ? it is part of JIT or something or profiled, one time compilation ?

[08:38] <nine> MasterDuke: come to think of it, chances are good that thans to lazy deserialization we won't ever load most of these static frames and their strings. It'll be a rare program that uses everything that is available in the setting. And the things we do load get put into gen2 directly, so they won't be touched by most GC runs.

[08:38] <tellable6> nine, I'll pass your message to MasterDuke

[08:39] <Woodi>  get_vm_string_index  is called twice in  set_static_frame_index  which is part of finalization...

[08:40] <nine> The profiler is only used when you actually run your program with rakudo --profile. And this particular part only if you run with --profile-kind=heap

[08:40] <Woodi> ah, so not very one-line use case...

[08:48] *** sena_kun joined
[09:48] <Woodi> do that warnings are misleading ?  src/disp/inline_cache.c:629:19: warning: array subscript ‘MVMDispInlineCacheEntryPolymorphicDispatchFlattening[0]’ is partly outside array bounds of ‘MVMDispInlineCacheEntry[1]’ [-Warray-bounds]  

[09:51] <nine> Yes, looks bogus

[10:08] <Woodi> hmm, nqp have option  --nqp-home  so I can have  --with-moar=/pkg/moar202403 and  /pkg/nqp202403  ? possibly  /pkg/rakudo202403  too ?  and then files in  /pkg/rakudo202403/bin/  will work ?

[10:11] <nine> There's an NQP_HOME environment variable

[10:11] <Woodi> MVMDispInlineCacheEntryPolymorphicDispatchFlattening   isn't that overengineered ? :) what language need this ?? ;)

[10:11] <Woodi> so add it to ~/.profile ?

[10:43] <Woodi> so what is difference between  --prefix  and  --[nqp|rakudo]_home  options ? Configure.pl says "dir to install files"...

[11:38] <lizmat> patrickb might know

[11:49] <Woodi> looks, in  3rdparty/nqp-configure/lib/NQP/Config.pm  that *_home are opposite to relocatable whatever relocatable means for non os-executables. like "portable executables" maybe - just unpack anywhere and use, maybe ? with env vars possibly...

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:37] <patrickb> prefix is where the installation root dir is during make install (e.g. /usr/local). nqp/rakudo home are the folders where the rakudo/nqp installations are to be found at runtime. (e.g. /usr/local/share/nqp) I don't remember, are there rakudo/nqp_home options of configure.pl?

[12:39] <patrickb> With relocatable installations the raku/nqp executables locate the rakudo and nqp home dirs at runtime, so they are not hard coded.

[12:40] <patrickb> I think with the --rakudo_home var one can override the default path (based on the prefix).

[12:41] <patrickb> It's possible to override the dir at runtime using the env vars.

[12:46] *** lizmat_ joined
[12:49] *** lizmat left
[12:50] *** lizmat_ left
[12:50] *** lizmat joined
[13:28] <Woodi> question is when env vars override, always (configure names *_home static) or with relocable build ? also do *_home override everything from --prefix ?

[13:29] <Woodi> I will try few configurations, maybe separate builds can be packaged nicely

[13:59] *** lizmat_ joined
[14:03] *** lizmat left
[17:32] *** lizmat_ left
[17:32] *** lizmat joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:23] <lizmat> still working on refining MoarVM::Bytecode, and found another interesting pattern

[18:24] <lizmat> many annotations are identical

[18:24] <lizmat> e.g. a stub method such as: method pull-one() { ... }

[18:24] <lizmat> generates three identical annotations

[18:25] <lizmat> all pointing at the same bytecode offset and line number

[18:25] <lizmat> (all annotations of a frame share the same filename anyways, as expected  :-)

[18:45] <nine> Well that string will at least have been interned, so we're only storing it once and just referencing it multiple times.

[18:48] <lizmat> looks like the c setting has 28210 identical annotations, at 12 bytes each -> 338K of memory

[19:09] <lizmat> it's all memory mapped, and I'm pretty sure the annotations are really only used in special occasions, like backtraces and such

[19:11] <lizmat> related: since a frame can only exist in one file (afaik), it's seems a bit wasteful to keep a string index for each statement, pointing to the same file string

[19:11] <lizmat> rather than having a single string index in the frame information itself

[19:12] <lizmat> just like the name of the frame

[19:12] <lizmat> (which I doubt is needed during execution either?)

[19:56] <jnthn> It was done like that for static inlining and macros, fwiw

[19:57] <lizmat> so I guess the name of the frame *is* needed for execution, as its index is part of the frame structure ?

[19:57] <jnthn> But we don't do much at all of the former (only for natively typed things)

[19:57] <jnthn> There's an op for getting the name and I think it is used in some places

[19:58] <jnthn> Can't remember exactly where

[19:58] <lizmat> nqp::getcodename ?

[19:58] <jnthn> Sounds like

[19:59] <lizmat> hmmm  in the Rakudo src I can only find it used for introspection

[20:00] <lizmat> unless FAIL-GOAL is execution?

[20:12] <jnthn> Well, it's called at runtime at least 

[20:12] <jnthn> I think it was used in more places, e.g. action method calls

[20:13] <jnthn> But frame introspection frustrated inlining tehdy

[20:13] <lizmat> tehdy ?

[20:13] <lizmat> terribly?

[20:13] <jnthn> oops! at that time

[20:14] <jnthn> I think nowadays nqp::curcode and the like actually are inlinable

[20:15] <jnthn> But various uses of nqp::getcodename that used to be there probably went away at some point due to that limitation

[22:02] *** lizmat_ joined
[22:06] *** lizmat left
[22:56] *** lizmat joined
[23:00] *** lizmat_ left
[23:31] *** lizmat_ joined
[23:35] *** lizmat left
[23:35] *** lizmat__ joined
[23:38] *** lizmat_ left
[23:38] *** lizmat joined
[23:42] *** lizmat_ joined
[23:42] *** lizmat__ left
[23:45] *** lizmat__ joined
[23:46] *** lizmat left
[23:48] *** lizmat joined
[23:49] *** lizmat_ left
[23:51] *** lizmat_ joined
[23:52] *** lizmat__ left
[23:55] *** sena_kun left
[23:55] *** lizmat left
