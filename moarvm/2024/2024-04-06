[00:16] <Geth> ¦ MoarVM/main: 5b48ae1e53 | (Daniel Green)++ | src/6model/reprs/NFA.c

[00:16] <Geth> ¦ MoarVM/main: Remove some unused code

[00:16] <Geth> ¦ MoarVM/main: 

[00:16] <Geth> ¦ MoarVM/main: Looks like it was missed in 6941cada41a2ae2f32eb6ae179d41053468304f1.

[00:16] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/5b48ae1e53

[00:17] *** MasterDuke joined
[00:26] <Geth> ¦ MoarVM/main: f2220d93d9 | (Daniel Green)++ | src/core/coerce.h

[00:26] <Geth> ¦ MoarVM/main: Increase the size of the int-to-str cache to 65

[00:26] <Geth> ¦ MoarVM/main: 

[00:26] <Geth> ¦ MoarVM/main: This means we will cache 64, which was coerced ~42k times during a

[00:26] <Geth> ¦ MoarVM/main: Rakudo build. A micro-benchmark (`my int $i = 64; my $s; $s = ~$i for

[00:26] <Geth> ¦ MoarVM/main: ^10_000_000; say now - INIT now; say $s`) decreased from ~0.50s to

[00:26] <Geth> ¦ MoarVM/main: ~0.22s.

[00:26] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/f2220d93d9

[00:44] *** japhb left
[00:45] *** japhb joined
[01:31] *** MasterDuke left
[08:54] <Woodi> s/64/65/ is funny :)  make me thinking: do calculating in-memory tables (compile/build time) of every possible conversions for 1..100 (and maybe other things) would speedup something ;)

[08:55] <Woodi> but maybe it's just profiled compilation subset

[09:17] *** lizmat_ joined
[10:19] *** lizmat__ joined
[10:22] *** lizmat_ left
[12:41] *** lizmat_ joined
[12:41] *** lizmat__ left
[13:05] *** lizmat_ left
[13:05] *** lizmat_ joined
[13:10] *** lizmat_ left
[13:11] *** lizmat_ joined
[13:51] *** lizmat_ left
[13:51] *** lizmat_ joined
[14:08] *** lizmat_ left
[17:42] *** MasterDuke joined
[18:03] *** kjp left
[18:15] <MasterDuke> jnthn: since i've only had minimal success speeding up runAlt on the jvm backend, i started looking at the script that gets run during that`+++ Generating  gen/<backend>/ast.nqp` stage

[18:16] <MasterDuke> even for the moarvm backend 90% of the time is spent in run_alt

[18:17] <MasterDuke> parsing ~25k lines in 35 files in 12s

[18:17] <MasterDuke> https://github.com/rakudo/rakudo/blob/main/tools/build/raku-ast-compiler.nqp#L71-L87 is where in the script it spends the most time

[18:18] <MasterDuke> do you have any quick-and-easy suggestions to speed that (the script in its entirety or just that part) up?

[19:32] <nine> lizmat: binding attributes is not atomic after all. Since attribute objects are inlined into their parents when you bind to an attribute, the full object gets copied which leaves a window open for race conditions.

[19:32] <lizmat> argh...

[19:33] <nine> Binding to locals or lexicals is atomic as that's just updating a pointer

[22:13] *** kjp joined
