[00:49] *** vrurg_ joined
[00:49] *** vrurg left
[00:49] *** vrurg_ is now known as vrurg

[02:03] *** epony joined
[05:01] *** epony left
[05:02] *** epony joined
[11:13] *** sena_kun joined
[16:18] *** epony left
[16:20] *** epony joined
[19:21] <Geth> ¦ MoarVM/2024.010: a7a2916b50 | (Justin DeVuyst)++ | 2 files

[19:21] <Geth> ¦ MoarVM/2024.010: Update changelog and version

[19:21] <Geth> ¦ MoarVM/2024.010: review: https://github.com/MoarVM/MoarVM/commit/a7a2916b50

[19:27] <Geth> ¦ MoarVM: jdv++ created pull request #1787: Update changelog and version

[19:27] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1787

[19:27] <Geth> ¦ MoarVM/main: a7a2916b50 | (Justin DeVuyst)++ | 2 files

[19:27] <Geth> ¦ MoarVM/main: Update changelog and version

[19:27] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/a7a2916b50

[19:27] <Geth> ¦ MoarVM/main: 7c58f389d6 | (Justin DeVuyst)++ (committed using GitHub Web editor) | 2 files

[19:27] <Geth> ¦ MoarVM/main: Merge pull request #1787 from MoarVM/2024.010

[19:27] <Geth> ¦ MoarVM/main: 

[19:27] <Geth> ¦ MoarVM/main: Update changelog and version

[19:27] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/7c58f389d6

[22:24] *** kjp left
[22:25] *** japhb_ is now known as japhb

[22:26] *** kjp joined
[23:00] <patrickb> Is there a way to GC unroot an address I've added earlier?

[23:03] <patrickb> I want to put an object into a frame further down the call stack. IIUC I need to root the address the moment I set it. But then how to I unroot it once the frame is popped some time later?

[23:13] *** sena_kun left
[23:19] <patrickb> Technically I could search through the entire call stack on every GC for those objects, but I guess that's slower than rooting when set and unrooting on frame unwind.

[23:29] <patrickb> I have just found MVM_callstack_mark_current_thread. I guess that answers that question.

[23:39] <patrickb> I think it's not technically wrong to GC mark random addresses. But is it bad performance wise? I just noticed that frame->extra->exit_handler_result is unconditionally marked. 

