[06:42] <Woodi> [Coke]: about "in development" status... what is official Moar/Raku status ? stable as v8 ? stable for production use ? beta ? I think it's not clear. "someone's use it in somewhat production" do not count as official statement...

[06:49] <Woodi> btw. other backends: if someone want to start from scratch what is bigger problem to get to passing Raku tests ? vm part is probably standard so grammar part ?

[08:42] *** sena_kun joined
[09:10] *** sena_kun left
[13:14] <Voldenet> some apis (nativecall) are breaking things often, the core is stable

[13:15] <Voldenet> I think this paragraph could specify what things are safe for production use - variables, roles, classes

[13:16] <Voldenet> this can be estimated from amount of issues related to specific parts of the language

[13:48] <[Coke]> Please feel free to suggest an alternate PR. I just wanted to remove the "under development" because it fails to cover the maturity of the product at this point.

[13:49] <[Coke]> I also don't think we want to say "this bits are safe for production" unless the other bits are known to have major problems - I don't think there are bits like that.

[14:12] *** lizmat left
[14:13] <Voldenet> well, only dev branch versions break things often

[14:15] *** lizmat joined
[14:26] <[Coke]> Do they?

[14:26] <[Coke]> and if it's on a branch, it doesn't matter. stability is based on the monthly releases.

[14:34] <Voldenet> That entirely depends on what you consider "often"

[14:36] <Voldenet> > https://github.com/rakudo/rakudo/issues?q=is%3Aissue+nativecall

[14:41] <Voldenet> while problems are resolved quickly, getting random dev version is risky

[14:49] <Voldenet> and it'll break because nativecall needs to cover more cases in the future, like non-pointer structures, changing ownerships of native structures in GC

[14:57] <[Coke]> getting random dev version is not guaranted to be stable.

[14:57] <[Coke]> I know there are some projects where things go into branches first, are vetted there, and only there go to main, but in general, raku core projects are not handled that way

[14:58] <[Coke]> and that isn't a list of "things that a release broke" (I don't think github gives us the ability to say "bug discovered in "release X", unfortunately)

[15:01] <[Coke]> We should probably have a short section in the various readmes that mentions our release and dev cycles so that expectations match what we're doing

[15:04] <Voldenet> hm, I'm not entirely sure if it matters for regular raku devs whether moarvm is stable or not

[15:05] <Voldenet> even if api changes every week, it might even be unnoticable as long as people don't use nqp directly

[15:08] <[Coke]> +1

[15:08] <[Coke]> It's a very small subset of people that might be doing the "triple" builds all the time.

[15:17] <Voldenet> maybe the sentence should be something like "moarvm is an under active development part of stable raku release" or something that'd imply that moar shouldn't be considered stable if used for other purposes than raku

[15:41] <Woodi> but some statement comparable to other projects ? "you can replace Nodejs with it and not see any difference", "as stable as GraalVM"... anything clearly stating: "yes, you can use it in production and it won't break for unproffesional reasons"?

[15:42] <Woodi> "can be used on par with V"?

[15:43] <[Coke]> Closed the PR.

[15:43] <[Coke]> Don't have the spoons to deal with this at the moment.

[15:43] *** [Coke] left
[15:44] <Woodi> IMO Perl5 should be used only as single thread app and without forking and then it is best on the market. Raku have threads so maybe it is better in that area ?

[16:00] <Voldenet> perl5 has threads, stdlib is not the problem

[16:09] <Voldenet> the biggest part of the language is, well, the language, and perl's syntax is a bit outdated

[16:12] <Voldenet> especially compared to perl6, which is the next version of it

[16:13] <Woodi> for me it's other wey around :)  syntax is just syntax and V threads are not for production usage without wizard(s) in house...

[16:15] <Woodi> IMO CPAN beats Common Lisp stack on functionality :)

[16:41] <Voldenet> lisp's use is very limited, lisp has horrible syntax

[16:46] <Voldenet> nodejs is actually a very interesting example in the topic, because memleaks caused by its servers was extremely frequent, but people used node in production anyway

[16:48] <Voldenet> stability is a ladder

[17:47] *** sena_kun joined
[21:35] *** [Coke] joined
[22:28] *** sena_kun left
