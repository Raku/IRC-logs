[00:02] <timo> (this module is only used by tools that want to properly parse the instructions in a spesh dump, which so far i think is only moarvm's tools/graph_spesh.raku)

[00:07] <Geth> ¦ MoarVM/main: 17c62f129b | (Timo Paulssen)++ | tools/graph_spesh.raku

[00:07] <Geth> ¦ MoarVM/main: freshen up graph_spesh.raku

[00:07] <Geth> ¦ MoarVM/main: 

[00:07] <Geth> ¦ MoarVM/main: - deprecated "path" method -> IO

[00:07] <Geth> ¦ MoarVM/main: - support lines with comments, show them in output

[00:07] <Geth> ¦ MoarVM/main: - support uint literals

[00:07] <Geth> ¦ MoarVM/main: - support coderefs to closures

[00:07] <Geth> ¦ MoarVM/main: - support more than one unparsed line

[00:07] <Geth> ¦ MoarVM/main: - mark each FH's Goto block in overview

[00:07] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/17c62f129b

[00:07] <timo> and obviously i've been the only one who used this tool :P

[00:32] <MasterDuke> nice. i always forget about the various scripts/tools in the repos

[00:32] <timo> spesh_goggles (my new project) is going to om nom the majority of graph_spesh.raku

[00:34] <MasterDuke> cool beans

[00:47] <timo>     /* Make a post-inline pass through the graph doing things that are better

[00:47] <timo>      * done after inlinings have taken place. Note that these things must not

[00:47] <timo>      * add new fact dependencies.

[00:47] <timo> .... uh oh? i don't think i've paid attention to this last note? and i'm not sure i understand why it exists? 

[00:52] <timo> 2bab220aff0be5f979218d761b3a9ed9507a445e put this in

[00:55] <MasterDuke> what does it mean to add (or not) a new fact dependency?

[00:56] <timo> be56234ee03f150cf750d88ee98ca0b8b9e8328b might actually have removed the need for the comment in question

[00:56] <timo> when we set a fact in an optimization that requires another fact, the one fact can set the other fact as a dependency

[00:57] <timo> some facts are set by guards created from things we logged during regular execution

[00:57] <timo> if the facts that these guards are giving us are not used for any optimizations, they stay "unused", and then we can throw out the guard instructions

[01:01] <timo> bedtime o/

[01:03] <MasterDuke> later...

[02:10] *** kjp left
[02:11] *** kjp joined
[02:12] *** kjp left
[02:12] *** kjp joined
[02:22] <MasterDuke> when building CORE.c, 9959354 VMArray's are garbage collected with 0 elems

[02:23] <MasterDuke> that seems inefficient, why did we create all those?

[03:23] <MasterDuke> here's an example https://github.com/MoarVM/MoarVM/blob/main/src/6model/reprs/NFA.c#L878-L891

[03:23] <MasterDuke> 378962 times total_fates was 0

[03:24] <MasterDuke> but just returning NULL in that case breaks things

[03:24] <MasterDuke> same with VMNull

[03:28] <MasterDuke> should there be a `tc->instance->array_consts.(int|str|hll)_empty` like there is for strings?

[06:09] *** sugarbeet left
[06:09] *** sugarbeet joined
[06:53] <nine> Arrays are mutable

[07:04] <Geth> ¦ MoarVM/main: 5e52422f43 | (Stefan Seifert)++ | src/io/procops.c

[07:04] <Geth> ¦ MoarVM/main: Add missing MVMROOT to spawn_setup

[07:04] <Geth> ¦ MoarVM/main: 

[07:04] <Geth> ¦ MoarVM/main: MVM_repr_box_int can allocate which can trigger the GC. This would move

[07:04] <Geth> ¦ MoarVM/main: the freshly allocated arr which outdates our pointer.

[07:04] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/5e52422f43

[07:46] *** harrow left
[07:49] *** harrow joined
[07:57] *** evalable6__ joined
[08:01] <timo> we do have a potential mechanism that we can use to cause a violent explosion if any code ever tries to add anything to the "empty array" constant. but do we actually allocate the storage for the VMArray in question?

[08:02] *** evalable6 left
[08:02] <timo> but making the code cope properly with a VMNull returned from nfa_run would also be a good idea so we can leave these allocations out entirely

[08:17] <timo> it requires a rebootstrap :D

[08:22] *** lizmat left
[08:22] *** gfldex left
[08:22] *** ingy left
[08:22] *** coleman left
[08:22] *** JRaspass left
[08:34] *** lizmat joined
[08:34] *** gfldex joined
[08:34] *** ingy joined
[08:34] *** coleman joined
[08:34] *** JRaspass joined
[14:14] *** MasterDuke left
[17:42] *** sena_kun joined
[20:55] *** sena_kun left
[21:03] <timo> m: say 7566820 * 100 / (7566820 + 9483189)

[21:03] <camelia> rakudo-moar 0b4048f26: OUTPUT: «44.380152527␤»

[21:03] <timo> m: say 7557710 * 100 / (7557710 + 9863325)

[21:03] <camelia> rakudo-moar 0b4048f26: OUTPUT: «43.38266928␤»

[21:04] <timo> i put a fprintf with 0 or 1 if the elems of a VMArray had 0 elems at time of gc_free, and when returning VMNull from nfa_run with an empty fates array, these are the numbers i get from core setting compilation

[21:05] <timo> the number starting in 7 is the number of non-empty arrays

[21:07] <lizmat> so most of them remain empy ?

[21:07] <timo> yeah, the biggest source of arrays that end up empty is not the NFA runs

[21:07] <timo> actually, this also includes arrays that have had all their elems popped or shifted out

[21:08] <timo> that's not what i wanted to measure

[21:17] <timo> m: say 9742214 * 100 / (9742214 + 7307728)

[21:17] <camelia> rakudo-moar 1a616bfb1: OUTPUT: «57.13927942␤»

[21:17] <timo> m: say 9734298 * 100 / (9734298 + 7731185)

[21:17] <camelia> rakudo-moar 1a616bfb1: OUTPUT: «55.73449071␤»

[21:20] <timo> now the number with the 9 is when an array had slots allocated, the number with the 7 is when it had no slots allocated, so it was empty at the end and never had anything in it in the first place

[21:21] *** MasterDuke joined
[21:25] <timo> with rr i can take an array at the time it's freed, set a watchpoint for when it was created, and travel back in time to get a stack trace of its creation

[21:26] <MasterDuke> nine, timo: yeah, i was thinking last night about how arrays are containers and that makes this analysis harder. especially since there might be a lot of `while (@a.shift) {}` or `while (@a.pop) {}` throwing my numbers off

[21:29] <timo> thankfully we have not just elems but also sslots

[21:29] <timo> no ssize is the name

[21:31] <MasterDuke> right, i mean to rerun and print that out also...

[21:32] <MasterDuke> 7731257 gc_free of 0 elems and 0 ssize

[21:35] <MasterDuke> so i guess those are the candidates for trying to not even MVM_repr_alloc_init()

[21:37] <MasterDuke> btw. why do we adjust the nursery for bigints and the buffers used in async io, but not for arrays or hashes?

[21:38] <MasterDuke> afk for a while

[21:43] <timo> i guess for hashes we usually also get pressure from MVMObjects we put in? arrays on the other hand can of course be native int arrays and such

