[01:40] <Geth> ¦ MoarVM: ugexe++ created pull request #1875: Do not persist tokens in CI artifacts

[01:40] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1875

[01:52] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1876: Fix format specifiers clang on OSX complains about

[01:52] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1876

[08:34] <Geth> ¦ MoarVM/main: afc8354b0f | (Nick Logan)++ (committed using GitHub Web editor) | .github/workflows/build_release.yml

[08:34] <Geth> ¦ MoarVM/main: Do not persist tokens in CI artifacts

[08:34] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/afc8354b0f

[08:34] <Geth> ¦ MoarVM/main: 4ca3abdaad | (Patrick Böker)++ (committed using GitHub Web editor) | .github/workflows/build_release.yml

[08:34] <Geth> ¦ MoarVM/main: Merge pull request #1875 from ugexe/patch-23

[08:34] <Geth> ¦ MoarVM/main: 

[08:34] <Geth> ¦ MoarVM/main: Do not persist credentials in CI artifacts

[08:34] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/4ca3abdaad

[10:18] *** sena_kun joined
[11:50] *** timo1 is now known as timo

[12:07] <timo> have we ever considered if we should try treating exception handling like an optimizable dispatch?

[12:09] <timo> if we have a code path where the exception handler happens to be the same every time, and we invoke it very often for some reason? like i guess a loop where you "next" often would be such a case, or using "warn" when you never have a custom CONTROL block in use you'd hit the default one every time ... a bare "try" without an explicit handler so it just returns Nil could hit his case too?

[12:10] <timo> we would still have to look upwards in the stack to find the actually relevant exception handler that is responsible, but we'd "just" guard on that i guess

[12:12] <timo> and it would very much have to be good at not duplicating that work in the case we miss, and however we do it must not be slow for the general case

[12:18] <lizmat> I think that's a great idea (if it isn't already implemented :-))

[12:38] <timo> i'm not deeply familiar with exception handling right now

[12:43] <timo> can i just say i o

[12:43] <timo> love the concept of "trampoline" in code

[13:42] <jnthn> It's not optimized like that, but there is some handling that can rewrite control exceptions into gotos

[13:45] <timo> oh, nice to see you jnthn! :)

[13:45] <timo> right, i know about the goto rewrite. that currently only happens when the handler action is goto and the goto target is in the same piece of code, AIUI

[13:46] <timo> and i'm hoping that if the actually invoked handler tends to be monomorphic, it could get inlined and also "become" a goto with a little bit of necessary extra setup and teardown perhaps

[13:47] <timo> perhaps setting up spesh logging for invoked exception handler and seeing what spread of targets we tend to see is a good first step just for investigation purposes

[13:52] <timo> re-reading some 6guts posts made me realize I definitely miss your puns. "That goes in the resumption hole" ehehe

[13:52] <Geth> ¦ MoarVM: patrickbkr++ created pull request #1877: GH Actions: Remove the deprecated macos-12 runner

[13:52] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1877

[14:22] <Geth> ¦ MoarVM/main: 1f5bf40904 | (Patrick Böker)++ | .github/workflows/build_release.yml

[14:22] <Geth> ¦ MoarVM/main: GH Actions: Remove the deprecated macos-12 runner

[14:22] <Geth> ¦ MoarVM/main: 

[14:22] <Geth> ¦ MoarVM/main: Add macos-14. Also for good measurereplace ubuntu-20.04 with ubuntu 24.04.

[14:22] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/1f5bf40904

[14:22] <Geth> ¦ MoarVM/main: 9ed81b24a6 | (Patrick Böker)++ (committed using GitHub Web editor) | .github/workflows/build_release.yml

[14:22] <Geth> ¦ MoarVM/main: Merge pull request #1877 from patrickbkr/no-macos-12-in-ci

[14:22] <Geth> ¦ MoarVM/main: 

[14:22] <Geth> ¦ MoarVM/main: GH Actions: Remove the deprecated macos-12 runner

[14:22] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/9ed81b24a6

[16:38] *** unicodable6 left
[16:38] *** unicodable6 joined
[20:19] <timo> i have only looked further at it now, but running handlers goes via MVM_frame_dispatch with spesh_cand == -1, which does put an invocation log entry already

[20:20] <timo> (that is, if it's an MVM_EX_ACTION_INVOKE handler)

[20:21] <timo> oh, that is a log that the frame got entered, not what it got entered from?

[20:22] <timo> for that i would want a separate MVM_spesh_log_bytecode_target i believe

[20:53] <timo> (and of course it's only useful for cases where the exception-causing op is actually in the frame, not one or more levels down)

[22:54] *** sena_kun left
