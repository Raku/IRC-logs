[00:11] *** mst left
[00:11] *** mst joined
[00:15] *** MasterDuke joined
[00:16] <MasterDuke> very apropro that https://github.com/zherczeg/sljit showed up on HN today

[03:24] *** Nicholas left
[03:24] *** Nicholas joined
[05:51] <timo1> https://gist.github.com/timo/0732287704e9426ea28be6e9aecb12b7 - got a nice surprise / puzzle for you. tell me, what do you see? :D

[07:22] *** ilogger2 left
[07:22] *** ilogger2 joined
[07:55] *** sena_kun joined
[10:31] *** MasterDuke left
[10:41] <Geth> ¦ MoarVM/main: 69368605f3 | (Daniel Green)++ | azure-pipelines.yml

[10:41] <Geth> ¦ MoarVM/main: Update MacOS versions in Azure CI config

[10:41] <Geth> ¦ MoarVM/main: 

[10:41] <Geth> ¦ MoarVM/main: Use newest versions as default and name the older available

[10:41] <Geth> ¦ MoarVM/main: versions.

[10:41] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/69368605f3

[10:41] <Geth> ¦ MoarVM/main: c5cc940132 | MasterDuke17++ (committed using GitHub Web editor) | azure-pipelines.yml

[10:41] <Geth> ¦ MoarVM/main: Merge pull request #1820 from MasterDuke17/update_os_versions_in_azure_ci_config

[10:41] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/c5cc940132

[10:43] *** brrt joined
[10:43] <brrt> \o

[10:43] <lizmat> brrt o/

[10:43] <timo1> hey brrt hey brrt hey brrt check this out: https://gist.github.com/timo/0732287704e9426ea28be6e9aecb12b7

[10:50] <brrt> checking...

[10:51] <brrt> context?

[10:52] <timo1> #1  0x00007ffff763da29 in MVM_frame_dispatch (tc=0x3d932020180, code=<optimized out>, args=..., spesh_cand=<optimized out>) at src/core/frame.c:591

[10:52] <timo1> #2  0x00007ffff58e8837 in parse-thing ()

[10:52] <timo1> #3  0x00007ffff762f783 in MVM_interp_run (tc=<optimized out>, initial_invoke=<optimized out>, initial_invoke@entry=0x7ffff775b4a0 <toplevel_initial_invoke>, 

[10:52] <timo1> do you see what this is? :D

[10:53] <brrt> yes, I see it, we're invoking the trampoline and trying to assign to the return address, but where is the intermediate JIT frame

[10:53] <brrt> oh, you mean, this has the name of the raku function?

[10:53] <timo1> compare this to the sad state before What I Did

[10:53] <timo1> #4  0x00007ffff76699e1 in MVM_gc_allocate_nursery (tc=0x32500020180, size=40) at src/gc/allocation.c:37

[10:53] <timo1> #5  0x00007ffff58e64f6 in ?? ()

[10:53] <timo1> #6  0x0000032500455360 in ?? ()

[10:54] <timo1> (this is obviously not from the same execution)

[10:54] <brrt> ah, I see

[10:54] <brrt> that's very nice

[10:54] <timo1> isn't it! :D

[10:54] <brrt> by the way, why is it a sigint

[10:54] <brrt> how did you do it

[10:54] <brrt> is the sigint intentional?

[10:54] <timo1> i pressed ctrl-c in gdb

[10:54] <brrt> :D

[10:54] <brrt> ah

[10:54] <brrt> gotcha

[10:54] <brrt> so this isn't a bug in the jit trampoline

[10:55] <timo1> correct

[10:55] <brrt> *phew*

[10:55] <timo1> though i'm not 100% sure the "finish" did its thing correctly

[10:55] <timo1> so now that i've lifted the secret i can start explaining

[10:56] <timo1> this uses the "jit reader" functionality in gdb: you tell gdb to "jit-reader-load /home/bla/bla/moar-jit-reader.so"

[10:57] <timo1> and your program has to fill some datastructures and call an empty function that gdb puts a breakpoint in for you automatically

[10:58] <timo1> so like: compiling a jit frame to native code in the region from 0x00007ffff58e8000 to 0x00007ffff58e8000 + 5000 or whatever; then you create a "symbol file" which you are free to put whatever data you like into

[10:59] <timo1> in my case the "symbol file" just has the address of the MVMJitCode struct + line number and file name for convenience

[11:02] <timo1> that + the sizeof the struct and the extra data is put into a jit_code_entry, which then causes gdb to copy the data from the target program into the memory that your jit reader .so file has direct access to, and then you can ask gdb to copy data from other addresses in the target program into your memory, and also for unwinding to get the values of registers in a frame (including what was saved on

[11:02] <timo1> the stack) and to set the values of registers "before your frame" so it can actually unwind

[11:04] <timo1> so what i have to do is get the rbp, the base pointer, from which i can offset to get TC, CU, Work, the previous frame's RIP, RSP, and RBP with some amount of indirection that i struggled to figure out

[11:04] <timo1> i can't call code that runs inside the target process so i can't just MVM_string_utf8_encode_c_string, so i have a crappy half implementation of string encoding that currently can't handle strands :D

[11:15] <brrt> but it's still very nice

[11:15] <brrt> that's been somehthing that we've been thinking about for... years

[11:16] <brrt> awesome work

[11:16] <timo1> SMOP :)

[11:16] <timo1> in order to get perf to be able to sample into and annotate jit frames there's yet another format we have to support :) :) :) 

[11:16] <timo1> i wanted to do the perf thing first but i got Distracted

[11:17] <timo1> as soon as i try to add line number info to the bytecode objects, i run into this:

[11:18] <timo1> ../../gdb/objfiles.h:484: internal-error: sect_index_text not initialized

[11:18] <timo1> A problem internal to GDB has been detected,

[11:18] <timo1> further debugging may prove unreliable.

[11:18] <timo1> ----- Backtrace -----

[11:20] <timo1> the jit reader makes it unnecessary to create a full ELF object for a compiled frame, but it's apparently not quite as battle-tested against inexperienced / bumbling implementors against the API

[11:30] <timo1> if i want to make variable names available, i may actually have to go to full ELF files with DWARF information after all. i don't see a way to do that from the jit-reader API at all

[11:32] <timo1> i also have some code commented out to split the frames by the labels, which are BB boundaries, but then doing "disassemble" gives you only the current BB, and it shows it as the "name" of the function (which is a decision i have to make, i'm free to choose what exactly to call it)

[11:32] <timo1> another thing i tried was to split frames into frame and frame_exit by the position of the exit label, which at least means the "data segment" doesn't show up as part of the disassembly with some "(bad)" instructions and a bunch of less sensible ones

[11:33] <timo1> yet another thing i've been wondering about is how to give gdb a hint what our indirect calls mean; it can already just show it like this:    0x00007ffff58e80c1 <+193>:   call   *0x232d(%rip)        # 0x7ffff58ea3f4 <parse-thing+9204>

[11:33] <timo1> or with the _exit variant it's at least a tiny bit clearer that it's not using call as a strange way to jump around inside the frame itself

[11:34] <timo1> but i can't see a way currently to have gdb look at the content at that address and show immediately the name of the symbol it's going to call

[11:39] *** rypervenche left
[11:41] *** brrt left
[13:05] *** patrickb left
[13:05] *** patrickb joined
[17:37] <timo1> wow yeah the description from that other project i was comparing notes with was actually accurate in terms of the necessary fix, but not what the symptom is when you don't do that thing

[18:24] *** lizmat_ left
[18:24] *** lizmat joined
[18:37] *** nativecallable6 left
[18:38] *** nativecallable6 joined
[18:38] *** harrow left
[18:41] *** sourceable6 left
[18:41] *** sourceable6 joined
[18:44] *** linkable6 left
[18:44] *** linkable6 joined
[18:47] *** greppable6 left
[18:47] *** greppable6 joined
[18:50] *** notable6 left
[18:50] *** notable6 joined
[18:51] *** harrow joined
[23:04] *** sena_kun left
