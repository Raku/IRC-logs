[01:13] *** MasterDuke joined
[07:18] *** lizmat_ joined
[07:19] *** [Coke]_ joined
[07:21] *** [Coke] left
[07:21] *** lizmat left
[07:50] *** sena_kun joined
[08:23] *** sena_kun left
[08:39] *** lizmat_ left
[08:40] *** lizmat joined
[10:16] *** [Coke]_ is now known as [Coke]

[11:28] <Geth> ¦ MoarVM/code_pair_cont_store_uint: 8c0d9780fa | (Timo Paulssen)++ | 3 files

[11:28] <Geth> ¦ MoarVM/code_pair_cont_store_uint: add a dedicated function to store a uint to a code-pair container

[11:28] <Geth> ¦ MoarVM/code_pair_cont_store_uint: review: https://github.com/MoarVM/MoarVM/commit/8c0d9780fa

[11:30] <Geth> ¦ MoarVM/code_pair_cont_store_uint: a8b81517a2 | (Timo Paulssen)++ | 3 files

[11:30] <Geth> ¦ MoarVM/code_pair_cont_store_uint: add a dedicated function to store a uint to a code-pair container

[11:30] <Geth> ¦ MoarVM/code_pair_cont_store_uint: review: https://github.com/MoarVM/MoarVM/commit/a8b81517a2

[11:31] <timo> (forcepush to also remove the fixme comment)

[11:31] <lizmat> OOC, what would be the purpose of that function

[11:37] <Geth> ¦ MoarVM/cpcsu_deb_backport: 4c7cef5513 | (Timo Paulssen)++ | 3 files

[11:37] <Geth> ¦ MoarVM/cpcsu_deb_backport: add a dedicated function to store a uint to a code-pair container

[11:37] <Geth> ¦ MoarVM/cpcsu_deb_backport: review: https://github.com/MoarVM/MoarVM/commit/4c7cef5513

[11:37] <timo> in order to properly invoke a -> uint $blah { } when put into a Proxy or similar as the STORE method

[15:08] *** MasterDuke left
[19:23] *** doomslord joined
[19:24] *** coverable6 left
[19:24] *** coverable6 joined
[19:24] *** doomslord left
[19:26] *** doomslord joined
[19:27] <doomslord> Why the answers to this question are so poor? https://stackoverflow.com/questions/75423841/how-to-return-a-hash-raku-object-from-native-call

[19:27] <tellable6> 2024-08-26T07:56:34Z #raku <librasteve> doomslord: i am sympathetic to your cause, but do you mean ␂<doomslord>␂ If you have only one denominator, Ints ^h^h^h Rats are as good as FatRats ???

[19:28] <doomslord> why there is no easy way to craft a moarvm native object from c code?

[19:29] <timo> NativeCall is an FFI that is not supposed to be tied to a single backend like moarvm, so your nativecall code also works on jvm for example

[19:29] <timo> it might be easiest to pass a bunch of function pointers to raku functions into your C code and invoke them to do your data structure building?

[19:30] <doomslord> That’s a good answer

[19:30] *** rypervenche left
[19:31] <timo> NativeCall is also primarily for binding stuff that already exists, which is unlikely to just be written with moar API in it

[19:32] <timo> with the extops loading mechanism you can extend the capabilities of a nqp or rakudo process with C code, but i'm not sure you can have more than one, and rakudo already uses that for the perl6_ops or what it's called

[19:32] *** rypervenche joined
[19:39] <doomslord> It would be useful, on the other hand, to have an opaque way to reference to raku objects from c code

[19:39] <doomslord> Although that’s a slippery slope to an API

[19:40] <timo> when you hold references to moar objects you have to ensure the GC knows about them so the pointer can be updated when it moves, and it can be visited to keep the object alive. that is tricky.

[19:41] <timo> on the other hand, you can just have a hash from int to object

[19:58] *** doomslord left
[20:00] *** doomslord joined
[20:00] *** doomslord left
[22:18] *** sena_kun joined
[22:34] *** Altai-man joined
[22:38] *** sena_kun left
[23:41] *** Altai-man left
[23:59] <Geth> ¦ MoarVM/code_pair_cont_store_uint: d90d39ba5d | (Timo Paulssen)++ | 3 files

[23:59] <Geth> ¦ MoarVM/code_pair_cont_store_uint: add a dedicated function to store a uint to a code-pair container

[23:59] <Geth> ¦ MoarVM/code_pair_cont_store_uint: review: https://github.com/MoarVM/MoarVM/commit/d90d39ba5d

