[00:00] <Geth> ¦ MoarVM/cpcsu_deb_backport: 1b3becec80 | (Timo Paulssen)++ | 3 files

[00:00] <Geth> ¦ MoarVM/cpcsu_deb_backport: add a dedicated function to store a uint to a code-pair container

[00:00] <Geth> ¦ MoarVM/cpcsu_deb_backport: review: https://github.com/MoarVM/MoarVM/commit/1b3becec80

[00:00] <timo> MasterDuke++ for catching this mistake

[01:29] *** MasterDuke joined
[01:46] <MasterDuke> what do people think about removing repetitions from strands?

[01:46] <tellable6> 2024-09-03T06:07:52Z #raku-dev <ab5tract> MasterDuke: thank you for remind me about pmurias++ truffle work. It seems to have gotten quite a ways before he stopped

[01:49] <MasterDuke> i adding some logging to MVMString's gc_free and during rakudo's build, ~4.5m strings with a storage_type of MVM_STRING_STRAND were freed

[01:50] <MasterDuke> well, that's not quite accurate, i just printed a line for each strand. so ~4.5m strands in something less than that number of strings

[01:50] <MasterDuke> but of those strands, ~4.4m had 0 repetitions

[01:52] <MasterDuke> the next most common at 92k was 1 repetitions, 46k with 2 repetitions, 25k with 3 repetitions, then 4.4k with 4 repetitions

[01:55] <MasterDuke> i wonder if the added size to the MVMStringStrand struct and added complexity to string ops really is worth the cost of making `my str $a = "a" x $n` fast (and small)?

[02:09] <MasterDuke> reran the logging. ~2m strings (of type strand), ~1.8m had 0 repetitions, 47k had 2 reps, 31k had 1 rep, 13k has 3 reps, 12k had 4 reps, 5k had 5 reps

[02:10] <MasterDuke> but the largest string that had any repetitions was only 98 graphemes in total

[02:12] <MasterDuke> oops, largest was 128 graphemes (forgot to add `-n` to my sort call)

[03:54] *** MasterDuke left
[07:49] *** camelia left
[07:50] *** rypervenche left
[07:52] *** rypervenche joined
[08:44] *** camelia joined
[16:01] <Geth> ¦ MoarVM/cpcsu_deb_backport_2022.12: 130f795ba4 | (Timo Paulssen)++ | 3 files

[16:01] <Geth> ¦ MoarVM/cpcsu_deb_backport_2022.12: add a dedicated function to store a uint to a code-pair container

[16:01] <Geth> ¦ MoarVM/cpcsu_deb_backport_2022.12: review: https://github.com/MoarVM/MoarVM/commit/130f795ba4

[16:36] <Geth> ¦ MoarVM/cpcsu_deb_backport_2022.12: 8360e5a90d | (Timo Paulssen)++ | 3 files

[16:36] <Geth> ¦ MoarVM/cpcsu_deb_backport_2022.12: add a dedicated uint store to a code-pair and value_desc container

[16:36] <Geth> ¦ MoarVM/cpcsu_deb_backport_2022.12: review: https://github.com/MoarVM/MoarVM/commit/8360e5a90d

[17:00] <Geth> ¦ MoarVM/cpcsu_deb_backport: 5dc0b80c3d | (Timo Paulssen)++ | src/6model/containers.c

[17:00] <Geth> ¦ MoarVM/cpcsu_deb_backport: also add uint store function to value_desc

[17:00] <Geth> ¦ MoarVM/cpcsu_deb_backport: review: https://github.com/MoarVM/MoarVM/commit/5dc0b80c3d

[17:44] *** sena_kun joined
[21:05] *** kjp left
[22:34] *** sena_kun left
[23:06] *** MasterDuke joined
[23:13] *** kjp joined
