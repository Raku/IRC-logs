[01:21] <timo> stumbled upon an incomplete optimization i made 6 years ago

[01:21] <timo> very minor effect, though. still nice to have.

[01:39] <MasterDuke> one that's already been merged?

[01:54] <timo> yes

[01:55] <MasterDuke> nice. can it be completed?

[02:30] <MasterDuke> timo: should in-situ strings even be added to the GC worklist?

[02:30] <timo> yes

[02:31] <timo> the pointer that points at them still needs to be kept up to date if it moves, and it has to be kept alive in the view of the mark phase

[02:31] <MasterDuke> ah, right

[02:41] <MasterDuke> hm. during a rakudo build, 294154 strings of type MVM_STRING_GRAPHEME_32 and only one graph were garbage collected

[02:42] <MasterDuke> and 20k of 2 chars

[02:42] <MasterDuke> i wonder how/where they were created

[02:47] <MasterDuke> any easy way to find that out>

[02:58] <timo> not really an easy way to find it out i don't think. many breakpoints?

[03:01] <MasterDuke> hm. almost the exact same number are seen in copy_to

[03:02] <MasterDuke> maybe it's worth a check there to turn the destination into an in-situ

[03:28] <MasterDuke> hm, how can i micro-benchmark copy_to?

[03:48] <MasterDuke> doh, looked at the wrong log file. strings aren't copied at all

[03:51] <MasterDuke> it looks like copy_to in MVMString.c is never called when building rakudo? that seems surprising

[05:05] *** jjatria left
[05:05] *** Techcable left
[05:05] *** leont left
[05:05] *** gfldex left
[05:05] *** camelia left
[05:06] *** jjatria joined
[05:06] *** Techcable joined
[05:06] *** leont joined
[05:06] *** gfldex joined
[05:06] *** camelia joined
[05:06] *** Techcable left
[05:06] *** nine left
[05:06] *** coleman left
[05:06] *** JRaspass left
[05:06] *** nine joined
[05:06] *** coleman joined
[05:06] *** JRaspass joined
[05:09] *** Techcable joined
[07:23] <nine> Since strings are immutable, there's little point in copying them, is there?

[07:49] *** sena_kun joined
[08:41] *** sena_kun left
[11:13] *** MasterDuke left
[14:29] <timo> right, i assume it would only happen if you manually nqp::clone a string, or something like that?

[14:31] *** [Coke] left
[14:33] *** [Coke] joined
[21:02] *** harrow left
[21:26] *** sena_kun joined
[21:30] *** harrow joined
[21:45] *** sena_kun left
[22:32] <timo> i finally wrote a tool that takes a speshlog for "before" and a speshlog for "after" and tries with a bit of effort to pair up matching specializations

[22:32] <timo> so you can actually properly diff specializations after you make some kind of change

[22:46] <timo> https://storage.aperture-labs.org/s/sZMSfDj2XNFHHEF

[22:56] <timo> since spesh is nondeterministic, there's still going to be some diffs that put code that is very different against each other

[23:13] *** MasterDuke joined
[23:13] <MasterDuke> nine: huh? i would have thought immutable strings would mean more copying

[23:14] <MasterDuke> timo: i tried nqp::clone with a string last night, but it still didn't trigger copy_to

[23:14] <MasterDuke> timo: also, very cool. i've wanted a spesh log differ forever and never got around to doing anything about it myself

[23:15] <timo> immutable strings involve more creation of string objects because every string operation needs to make a new one, though with strands we don't have to be copying the string contants all the time

[23:16] <MasterDuke> yeah, make a new one and then copy the old one into the new and modify the new

[23:18] <Geth> ¦ MoarVM/turn_guard_into_just_if_possible: abab265d06 | (Timo Paulssen)++ | src/spesh/optimize.c

[23:18] <Geth> ¦ MoarVM/turn_guard_into_just_if_possible: When guarding conc or type and type is known, guard just conc/type

[23:18] <Geth> ¦ MoarVM/turn_guard_into_just_if_possible: 

[23:18] <Geth> ¦ MoarVM/turn_guard_into_just_if_possible: The difference in moar bytecode is very small, but in JITted code

[23:18] <Geth> ¦ MoarVM/turn_guard_into_just_if_possible: it's a bit bigger since the non-"just" variant also jits a spesh

[23:18] <Geth> ¦ MoarVM/turn_guard_into_just_if_possible: slot access first.

[23:18] <Geth> ¦ MoarVM/turn_guard_into_just_if_possible: review: https://github.com/MoarVM/MoarVM/commit/abab265d06

[23:18] <Geth> ¦ MoarVM: timo++ created pull request #1826: When guarding conc or type and type is known, guard just conc/type

[23:18] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1826

[23:23] <Geth> ¦ MoarVM/better_empty_strings: b33806e583 | (Timo Paulssen)++ | 2 files

[23:23] <Geth> ¦ MoarVM/better_empty_strings: latin1.c and ascii.c can return str_consts.empty for 0-length string

[23:23] <Geth> ¦ MoarVM/better_empty_strings: 

[23:23] <Geth> ¦ MoarVM/better_empty_strings: except the very first time when creating the 0-length string constant

[23:23] <Geth> ¦ MoarVM/better_empty_strings: review: https://github.com/MoarVM/MoarVM/commit/b33806e583

[23:25] <Geth> ¦ MoarVM/better_empty_strings: 2a0dc7f171 | (Timo Paulssen)++ | 2 files

[23:25] <Geth> ¦ MoarVM/better_empty_strings: latin1.c and ascii.c can return str_consts.empty for 0-length string

[23:25] <Geth> ¦ MoarVM/better_empty_strings: 

[23:25] <Geth> ¦ MoarVM/better_empty_strings: except the very first time when creating the 0-length string constant

[23:25] <Geth> ¦ MoarVM/better_empty_strings: review: https://github.com/MoarVM/MoarVM/commit/2a0dc7f171

[23:25] <timo> (had it on top of the other branch first)

[23:26] <Geth> ¦ MoarVM: timo++ created pull request #1827: return pre-made empty string constant from latin1 and ascii

[23:26] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1827

[23:26] <MasterDuke> nice

