[03:13] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1871: Add fast path when difference for 8-bit strings

[03:13] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1871

[09:40] *** sena_kun joined
[10:57] <Geth> ¦ MoarVM/main: 492e511f0d | MasterDuke17++ (committed using GitHub Web editor) | src/strings/ops.c

[10:57] <Geth> ¦ MoarVM/main: Add fast path when difference for 8-bit strings

[10:57] <Geth> ¦ MoarVM/main: 

[10:57] <Geth> ¦ MoarVM/main: If we're comparing 8-bit strings and there's a difference, we don't need

[10:57] <Geth> ¦ MoarVM/main: to go through the generic grapheme-iterator path, since we know there

[10:57] <Geth> ¦ MoarVM/main: won't be combining synthetics.

[10:57] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/492e511f0d

[10:57] <timo> hold up

[10:58] <lizmat> hold up?

[10:58] <timo> i was about to comment on this

[10:58] <lizmat> ah, ok  ;-(

[10:58] <lizmat> I took nine's approval, and the code appeared simple enough

[10:58] <timo> 8 bit grapheme storage, i.e. not "only in ascii range", includes synthetics

[10:59] <timo> we can't just say the lower of the synthetic codepoint is the lower one for real

[10:59] <timo> because those are allocated first-come-first-served

[10:59] <Geth> ¦ MoarVM/main: 639e401db3 | (Elizabeth Mattijsen)++ | src/strings/ops.c

[10:59] <Geth> ¦ MoarVM/main: Revert "Add fast path when difference for 8-bit strings"

[10:59] <Geth> ¦ MoarVM/main: 

[10:59] <Geth> ¦ MoarVM/main: This reverts commit 492e511f0df59fadc44c2fb690b3e877a5834f40.

[10:59] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/639e401db3

[10:59] <timo> well, a full revert is maybe a bit much since we didn't bump yet

[11:00] <lizmat> better be safe than sorry, I'd say

[11:00] <timo> we will have to check if either of the two graphemes is a synthetic, in which case we can't do the fast path. we have to see if it's still faster to do it this way when the additional check goes in

[11:00] <lizmat> I was just about to say  :-)

[11:00] <timo> i have to go AFK for a bit so i can't properly create a test case that shows this

[11:01] <lizmat> I'll keep my handz in daz pokkets

[11:01] <timo> but it'd probably look something like "create two buffers of utf8 bytes that are decoded in two different orders after program start which result in a character with lots of combiners on it so it's a synthetic, guaranteed. then compare strings that are less than 8 graphemes long, the same length, and end in one and the other synthetic, respectively"

[11:02] <timo> if my worry is correct, those would give different results based on which synthetic was registered first by decoding the buf

[11:02] <timo> we can't just create the buf from a string in the same program run because then the synthetic grapheme would be registered already at compile time and then depend on where it's seen when reading in the source code

[11:03] <lizmat> .oO( oh what a tangled web we weave :-)

[11:03] <timo> where does that come from btw?

[11:04] <lizmat> https://nosweatshakespeare.com/quotes/famous/oh-what-a-tangled-web-we-weave/

[11:09] <timo> m: my $with_a = Buf8.new(0x41, 0xCD, 0x99, 0xE2, 0x83, 0xB0); my $with_b = Buf8.new(0x42, 0xCD, 0x99, 0xE2, 0x83, 0xB0); say $with_a cmp $with_b

[11:09] <camelia> rakudo-moar dd45859fe: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    Buf8 used at lines 1, 1. Did you mean 'buf8', 'Buf'?␤␤»

[11:09] <timo> m: my $with_a = buf8.new(0x41, 0xCD, 0x99, 0xE2, 0x83, 0xB0); my $with_b = buf8.new(0x42, 0xCD, 0x99, 0xE2, 0x83, 0xB0); say $with_a cmp $with_b

[11:09] <camelia> rakudo-moar dd45859fe: OUTPUT: «Less␤»

[11:09] <timo> forgot to decode

[11:09] <timo> m: my $with_a = buf8.new(0x41, 0xCD, 0x99, 0xE2, 0x83, 0xB0); my $with_b = buf8.new(0x42, 0xCD, 0x99, 0xE2, 0x83, 0xB0); say $with_a.decode cmp $with_b.decode

[11:09] <camelia> rakudo-moar dd45859fe: OUTPUT: «Less␤»

[11:09] <timo> m: my $with_a = buf8.new(0x41, 0xCD, 0x99, 0xE2, 0x83, 0xB0); my $with_b = buf8.new(0x42, 0xCD, 0x99, 0xE2, 0x83, 0xB0); $with_b.decode; $with_a.decode; say $with_a.decode cmp $with_b.decode

[11:09] <camelia> rakudo-moar dd45859fe: OUTPUT: «Less␤»

[11:10] <timo> m: my $with_a = buf8.new(0x41, 0xCD, 0x99, 0xE2, 0x83, 0xB0); my $with_b = buf8.new(0x42, 0xCD, 0x99, 0xE2, 0x83, 0xB0); $with_a.decode; $with_b.decode; say $with_a.decode cmp $with_b.decode

[11:10] <camelia> rakudo-moar dd45859fe: OUTPUT: «Less␤»

[11:10] <timo> ok, with the changes from the PR these all still have to give "Less"

[22:06] *** kjp left
[22:06] *** kjp_ joined
[22:43] *** kjp_ left
[22:43] *** kjp joined
[22:58] *** sena_kun left
