[06:07] <nine> coleman: why Meson btw? Why not e.g. cmake?

[06:46] <Nicholas> I think he mentioned i in the PR, but my experience of cmake is that it's impossible to bootstrap it on less common OSes. It's an albatross

[06:47] <Nicholas> whereas Python is actually portable

[06:47] <Nicholas> if cmake isn't already installed or packaged, 50/50 you're stuffed

[06:55] <Woodi> dropping Perl family for build system will be huge loss for the future... looks cmake with ninja is very fast but cmake part is a mess

[06:58] <Woodi> and builds are not so complicated overall, even Makefile dependency graph is overkill, why not have something working hierarchical/declarative with caches ? partial rebuilds part is what need to be fast ?

[07:00] <Woodi> also tool discovering what to rebuild can be augmented by telling it what to rebuild

[07:02] <nine> I'm not a big fan of cmake either. Have never tried Meson though. Just curious really.

[07:02] <Woodi> they say cmake is standard :)

[07:02] <Woodi> and Bazel is Java - everyone have his own build system :)

[07:11] <Woodi> maybe it is fast total rebuild what devs would like ? ccache is there for C/C++. also git have all info what files changed

[07:12] <Nicholas> I think it was ccache that I couldn't build the current version of. Because it needed cmake. And cmake wouldn't bootstrap on whatever-it-was. So I used the previous version of ccache

[07:12] <Woodi> ccache is older then cmake by decades...

[07:12] <Nicholas> whatever-it-is, I'd be happy if Configure.pl and all our special snowflake could be replaced by something someone else maintains, that's no less portable than what we have

[07:13] <Nicholas> IIRC version 4 changed its build system

[07:13] <Nicholas> it was something like that. The previous version of ccache was perfectly good

[07:14] <Woodi> "CMake 3.15 or newer."...

[07:14] <Nicholas> "perfectly good for what I needed" is what I meant. I have no knowledge of how much of a rats nest the ccache build is

[07:29] <Woodi> I have impression that ccache is very standard Unix tool that just blends into background and is invisible... and it is so old that corner cases are well documented: https://ccache.dev/manual/4.9.1.html#_caveats

[07:33] <Woodi> alternative is https://github.com/mozilla/sccache

[07:35] <Woodi> but actually would be nice to have list of wishes for build system first and then brainstorm solutions :)

[07:38] <Woodi> 0. remove system detection from build script... why not have script that detects is that CC working on HalloWorlds, etc and _do not run_ this script on every rebuild ? :)

[07:40] <Nicholas> good news: I have improved my Wifi

[07:41] <Nicholas> bad news: It's still a long work video call meeting

[08:17] <Woodi> 1. git submodules are meh and security violation sometimes but conceptually clean, complete and usefull... do separate repos would be nicer ? submodules are usually forks with patches...

[08:23] <Woodi> 2. do big projects have "expectations" ? eg. do they automatically know how to plug-in dependency using cmake/meson ? maybe that can be added on top of existing/improved build ?

[08:24] <xiaomiao> cmake only exists because people insist on building stuff on windows

[08:24] <xiaomiao> it's best treated as a leftover from the old times and not encouraged

[08:25] <Woodi> xiaomiao: /me feels old now :)

[08:25] <xiaomiao> Woodi: I am often surprised about the unironic use of such legacy systems

[08:27] <Woodi> xiaomiao: it's what old people know :)  I still didn't finished reading "UNIX administration" by AEleen Fresh ;)

[08:28] <Woodi> but if somethink brings value it should be promoted, few times even...

[08:28] <xiaomiao> Woodi: nah "old" people would use proper tools like ... autotools

[08:29] <xiaomiao> or just a plain Makefile, because most of the time you don't care what cc is set to

[08:30] <Woodi> yep, plain Makefiles pls ;)  but how much ninja could replace it ?

[08:31] <xiaomiao> no ;)

[08:31] <xiaomiao> ninja is just half of the problem space, handwriting ninja files is unpleasant

[08:31] <xiaomiao> so you need something like meson or a makefile to generate that

[08:31] <Woodi> also how much of "build problems" are influenced by: parallel builds, kubernets like infra, TI/CI and other new toys ? what is a must have now ?

[08:31] <xiaomiao> and what problem does it solve? 

[08:32] <xiaomiao> the modern thing is having a makefile that curlbashes into docker

[08:32] <Woodi> but we have grammars ;)

[08:32] <xiaomiao> that way everything is ubuntu 22 ;)\

[08:33] <Woodi> xiaomiao: let's just filter some sudocurl|bash and have better future :)

[08:33] <xiaomiao> you mean curl | sudo tee bash

[08:42] <Woodi> can ninja files be templated for usual case ? how often that files change ? they describe whole project, right ? and are human-readable, simpler then Makefile's, "always parallel". I do not understand what else valuable outer builder like cmake adds...

[08:48] <xiaomiao> cmake adds ... uh, lots of pain? :)

[08:49] <xiaomiao> the ninja format is not designed for 'manual' use, I wouldn't recommend trying to use it directly

[08:51] *** nine left
[08:51] *** nine joined
[08:56] <Voldenet> theoretically build systems separate deps detection from deps usage in the project, I have no idea how it practically is, because I usually hardcode paths

[08:58] <Voldenet> simply using /lib/somelib.so worked for me in so many cases that it never occured to me to complicate this

[08:59] <xiaomiao> you shouldn't try to do that by path directly

[08:59] <xiaomiao> it usually works by accident, some of the time

[09:00] <Voldenet> It usually works a lot of times, but when it doesn't, I can fill correct paths myself

[09:00] <Voldenet> ymmv though, maybe I should use weirder unix distros

[09:01] <Woodi> xiaomiao: but ninja is described as simpler then make and Makefiles are supoused to be write manually :)  also it is designed to be "human-readable" which is also human-writable :)

[09:02] <xiaomiao> Woodi: so is maven ;)

[09:02] <xiaomiao> just because someone writes a sequence of words doesn't make them correct or useful

[09:03] <xiaomiao> Voldenet: well ... you assume dynamic linking

[09:03] <Voldenet> I'm fully aware that it's wrong

[09:04] <Voldenet> but I do adore the simplicity ;>

[09:04] <xiaomiao> Woodi: ninja mostly solves the problem that "make is slow" and that starts becoming human-scale measurable on something the size of the linux kernel, maybe

[09:05] <Voldenet> theoretically cmake isn't horrible either and it's described as "simplifies stuff"

[09:05] <xiaomiao> yeah but it's fractally wrong

[09:06] <xiaomiao> most checks are pattern matching, so they fail randomly when a new compiler outputs a line extra and such unexpected things

[09:06] <Woodi> but ninja recomended usage looks unnecessary self-conflicting and looks like cargo culting

[09:06] <xiaomiao> and debugging it is something I'd prefer not to do so often, it's exhausting

[09:06] <Voldenet> tbh. I've had bad experience simply building cmake projects

[09:07] <Voldenet> otoh perl script is a breeze to debug

[09:07] <xiaomiao> yeah perl is opinionated in just the right ways

[09:08] <xiaomiao> cmake syntax alone is enough to frustrate me

[09:10] <Woodi> Configure.pl was before automake/autoconf ?

[09:11] <Voldenet> …have you ever tried building c projects with ant? Now this is a painful syntax

[09:11] <Woodi> both are all-in-one tools for software distribution ?

[09:12] <xiaomiao> Woodi: configure.pl avoids pulling in a whole "foreign" system like automake

[09:12] <xiaomiao> because that means bootstrapping is now also the problem of somehow bootstrapping automake, which then requires random stuff ...

[09:13] *** sena_kun joined
[09:13] <Voldenet> I never thought configure.pl was supposed to replace autoconf, it was written for codegen iirc

[09:15] <Woodi> but you need to "bootstrap" plain make/Makefile too and that is solved by C compiler presence. so it's not like toolchain bootstrapping

[09:16] <Voldenet> nevermind, I checked again and it does exactly what autoconf

[09:18] <xiaomiao> Woodi: for make files you need some flavour of make - and that roughly depends on a C compiler

[09:18] <Woodi> Voldenet: I think auto* were mimicking Configure.pl becouse it was earlier. and they was meant for distribution and today we need better tools for rebuilding during development. but can be mistaken on this

[09:23] <Woodi> > also how much of "build problems" are influenced by parallel builds, kubernets like infra, TI/CI and other new toys ? what is a must have now ? what you are missing in curent Raku/Perl development process ?

[09:56] *** sena_kun left
[16:18] *** vrurg_ joined
[16:21] *** vrurg left
[18:20] *** sena_kun joined
[18:20] *** vrurg_ is now known as vrurg

[21:31] <coleman> nine: regarding "why not cmake"... I am literally incapable of understanding cmake. :-/ 

[21:32] <coleman> Meson generates out-of-tree ninja files, in another directory, conventionally called "builddir". I will continue to try to get things building as an experiment that lives side-by-side with the perl

[21:33] <coleman> The perl has never failed me, fwiw

[21:46] <coleman> I think having a more widely-used option will help us keep the perl up to date, too

[21:46] <coleman> when one of them breaks we have a reference to another

[22:02] <Geth> ¦ MoarVM: AntonOks++ created pull request #1796: build_release.yml: Add initial build workflow

[22:02] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1796

[23:24] *** sena_kun left
