[08:05] *** ingy left
[08:07] *** ingy joined
[09:12] *** sena_kun joined
[09:18] *** sena_kun left
[10:48] <lizmat> Is there a way to find out whether a global GC cycle has been done, or possibly: find out how many have been done?

[10:48] <lizmat> reason I'm asking:

[10:49] <lizmat> in ParaSeq (https://raku.land/zef:lizmat/ParaSeq) I'm trying to batch an optimum number of values to get the lowest wallclock usage

[10:50] <lizmat> it takes the wallclock of previous batches, and then computes the "right" number of values to match a certain interval (.5 millisecs at the moment)

[10:51] <lizmat> however, a global GC can easily take multiple milliseconds (judging from the stats that ParaSeq keeps)

[10:52] <lizmat> which has a detrimental effect, because it will make it look like the batch of size X got too many values to process, so it will reduce the size of future batches

[10:52] <lizmat> which increases wallclock when it shouldn't

[10:53] <lizmat> so I'd like to adjust the wallclock seen for a batch if it can be determined it had a global GC in it

[10:54] <lizmat> ideally of course, I'd like to see how much CPU a batch has used, but I'm lead to understand that's impossible to find out (generally)

[10:55] <lizmat> FWIW, I hope to make ParaSeq versatile enough so that it can be made to power >>.foo

[10:55] * lizmat hopes she's not rubberducking herself

[11:36] *** leont left
[11:44] *** leont joined
[12:15] *** leont left
[12:17] *** leont joined
[12:57] <Woodi> lizmat: disabling gc when needed ? looks like low level features are needed so maybe some paart of it need to be implemented in moar ?

[12:58] <lizmat> no, I don't want to disable GC

[12:58] <lizmat> I just want to know *when* it did a full GC

[12:58] <Woodi> "to see how much CPU a batch has used": do moar have instructions count like real cpus ? :)

[12:58] <lizmat> so I can account for it when calculating optimum batch sizes

[13:00] <Woodi> I mean: pause gc and do work in beetwin

[13:01] <lizmat> the work it is doing is causing the GC  :-)   so that isn't a solution  :-)

[13:01] <Woodi> hmm, ^Inf :)

[13:02] <lizmat> I have a test case of a 840MB text file, and looking for a string in it

[13:03] <lizmat> and the GC is causing the batch size to decrease significantly

[13:04] <Woodi> I think in gc-based vm's gc's are meta - they should be invisible. so low level coding and co-operating with gc is simplest choice. or having predictible gc

[13:08] <lizmat> I'm willing to cooperate with GC: I just want to know when it ran

[13:40] *** nine left
[13:40] *** nine joined
[13:57] <Woodi> grep shows few things on gc_start :)  but src/profiler/log.c can have some examples ;)

[14:45] <japhb> lizmat: FWIW, I've wanted this for quite a while, because it's damn near impossible to tune for stable animation frame rates if you can't tell what caused a frame time jump

[14:46] <japhb> I wonder if "GC generation number" could be an exposed thing

[14:47] <japhb> Also, it's not clear that GC affects threads equally, so not knowing which threads did more work may be an issue too

[15:12] <Woodi> but leaking implementation details into upper level languages can end badly. vm's are nice and simple when they are black boxes

[15:18] <Woodi> ...clien-server approach ? or syscals :)

[15:48] <lizmat> japhb 

[15:48] <lizmat> japhb: if you run a profile, it knows how many GC runs there have been

[15:48] <lizmat> so the info is in there somewhere

[15:49] <lizmat> also: I think MoarVM's GC is currently "stop the world", so it would affect all threads equally I'd say

[16:59] *** japhb left
[16:59] *** japhb joined
[18:12] *** sena_kun joined
[18:29] <japhb> lizmat: GCs often have a stop the world phase and one or more concurrent phases.  I don't remember how this maps out to MoarVM's GC (it's been too dang long since I looked at it)

[18:31] <lizmat> fwiw, I would be happy if we could find out the *number* of GC runs

[18:31] <lizmat> in a syscall

[20:04] <[Coke]> https://github.com/MoarVM/MoarVM/blob/main/README.markdown?plain=1#L52-L57 - I feel we can use stronger language here.

[20:58] <Geth> ¦ MoarVM/coke/readme: b5d6caf897 | (Will Coleda)++ | README.markdown

[20:58] <Geth> ¦ MoarVM/coke/readme: Remove notes about development, other compilers

[20:58] <Geth> ¦ MoarVM/coke/readme: review: https://github.com/MoarVM/MoarVM/commit/b5d6caf897

[20:59] <Geth> ¦ MoarVM: coke++ created pull request #1815: Remove notes about development, other compilers

[20:59] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1815

[21:54] *** lizmat_ joined
[21:58] *** lizmat left
[22:00] *** lizmat_ left
[22:01] *** lizmat joined
[23:03] *** sena_kun left
