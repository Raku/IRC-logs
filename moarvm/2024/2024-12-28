[01:05] <guifa> Had to take a quick break for dinner (home with family)

[01:15] <timo> maintaining your corporeal form comes before doing open source contributions :)

[01:41] <guifa> hmmm

[01:41] <guifa> whatever I did I managed to get Raku to launch and immediately get a sigkill lol

[01:44] <timo> you restored the ops to what they were before, right? you may need to do a bit more aggressive "make clean" than you might be used to

[02:13] *** harrow left
[02:19] <guifa> phew, I did a fully fresh rebuild in a new location and now it's running.  Time to try readding that syscall entry

[02:28] <guifa> No MoarVM syscall with name 'async_socket_udp'

[02:28] <guifa> d'oh, it was async-socket-udp

[02:28] <guifa> see, I can be just as bad :)

[02:29] <guifa> Argument 0 to MoarVM syscall 'async-socket-udp' has repr ConcBlockingQueue, but should be MVMOSHandle.  

[02:29] <guifa> $!.author++

[02:37] *** harrow joined
[02:41] <guifa> SWEET 

[02:41] <guifa> call successfully transfered

[02:41] <guifa> timo++ for your amazing hand holding today

[02:43] <timo> :+1:

[02:43] <timo> üëç

[02:47] <guifa> now to reshoehorn in multicast 

[03:06] <guifa> biggest Q is if I can actually access the handle in subsequent calls.  I think I can

[03:07] <guifa> close op obvs needs access to it too 

[03:11] <timo> the os handles have a little bit of extra indirection through a few structs, i think they are called "somethingable", like closable and readable and such

[03:12] <timo> i don't think it'll be necessary to have something like multicastable because there's really not many kinds of handles that support that?

[03:12] <timo> so virtualising the implementation there may not be necessary

[04:12] <guifa> oh I intended to do one syscall that just forwards the call to the current one opening up the handle

[04:12] <guifa> and then a second sys call that adds the multicast listeners

[04:13] <guifa> That way, the only thing I'll need to do differently is check for the multicast flag in the original routine so it doesn't bomb on address in use.

[04:14] <guifa> The Raku side will handle converting bind-udp($multicast-address, $port), into effectively bind-udp('0.0.0.0', $port).multicast-subscribe($multicast-address)

[04:23] <timo> OK

[04:26] <guifa> maybe I end up hating the design and go back to a monolith later.  TIMTOWTDI :D

[04:31] <timo> it's normally not a problem for the internals to be slightly or quite different from what the end-user-facing API is. just doing whatever is most convenient for now should be fine

[04:33] <guifa> true.  this is just perfectionist me thinking.  Do we consider syscalls to have the same level of semi-permanance that op calls do?

[04:35] <timo> you mean in terms of like API/ABI stability?

[04:36] <timo> i think of them as less permanent

[04:36] <timo> they don't cause bytecode files to become literally unreadable if their definitions change from one version to another

[04:37] <guifa> yeah, basically what was going through my head

[04:39] <guifa> I'm thinking for now, the fastest way to a workable solution is to duplicate the MVM_io_socket_udp_async .  One stays exactly what we have now and will be called for uni/broadcast (I'll also add a higher level check to reject broadcast for IPv6 since it doesn't exist)

[04:40] <guifa> the other version will become MVM_io_socket_udp_async_multicast and be the test code I had up and running a while back

[04:40] <guifa> the syscall will simply capture the flag and call the appropriate routine

[04:41] <guifa> from a code reuse standpoint I hate it though :)

[10:26] *** sena_kun joined
[10:29] *** sena_kun left
[10:31] *** sena_kun joined
[13:41] *** guifa left
[14:51] <ab5tract> guifa++ # for riding the rabbit hole rocketship on multicast support :)

[18:37] *** committable6 left
[18:37] *** shareable6 left
[18:37] *** quotable6 left
[18:37] *** linkable6 left
[18:37] *** benchable6 left
[18:37] *** bisectable6 left
[18:37] *** releasable6 left
[18:37] *** notable6 left
[18:37] *** evalable6 left
[18:37] *** unicodable6 left
[18:39] *** shareable6 joined
[18:40] *** bloatable6 joined
[18:40] *** greppable6 joined
[18:40] *** unicodable6 joined
[18:40] *** linkable6 joined
[18:40] *** benchable6 joined
[18:40] *** releasable6 joined
[18:40] *** committable6 joined
[18:40] *** bloatable6 left
[18:40] *** committable6 left
[18:40] *** shareable6 left
[18:40] *** greppable6 left
[18:40] *** unicodable6 left
[18:40] *** benchable6 left
[18:40] *** releasable6 left
[18:40] *** linkable6 left
[18:43] *** shareable6 joined
[18:43] *** quotable6 joined
[18:43] *** coverable6 joined
[18:43] *** benchable6 joined
[18:43] *** greppable6 joined
[18:44] *** sourceable6 joined
[18:44] *** notable6 joined
[18:44] *** releasable6 joined
[18:44] *** evalable6 joined
[18:44] *** tellable6 joined
[18:44] *** unicodable6 joined
[18:45] *** bloatable6 joined
[18:45] *** linkable6 joined
[18:45] *** committable6 joined
[18:45] *** nativecallable6 joined
[18:45] *** bisectable6 joined
[20:03] *** MasterDuke joined
[20:04] <MasterDuke> discovered something interesting, the slow moarvm compile time on this mb air is mostly because of the computed goto in interp.c

[20:05] <MasterDuke> if I disable compiling as a computed goto the total compile time halves from ~60s to ~30s

[20:07] <MasterDuke> it appears to be a known problem in clang. I believe it was fixed at some point (at least I don't see it on my linux x86 desktop with clang 18, while this laptop has clang 16)

[20:51] <MasterDuke> not using the computed goto does seem to slightly slow down moarvm. the total time for a rakudo build goes from ~95s to ~100s

[20:52] <timo> yeah, computed goto should have multiple benefits

[20:52] <timo> makes the branch predictor a bit happier

[20:56] <MasterDuke> yeah, I figured, but had no idea what the actual amount of change would be. now I'm curious to try it on my desktop

[21:10] <MasterDuke> approx no difference (using gcc). ~1:35 with, ~1:37 without

[21:11] <MasterDuke> and I had incorrect times for the laptop, it was ~1:10 with, ~1:14 without

[21:24] <MasterDuke> (using clang), ~1:39 with, ~1:43 without

[21:25] <MasterDuke> these were single runs though, so not very statistically significant

[22:44] *** MasterDuke left
[22:52] *** guifa joined
[23:32] *** sena_kun left
[23:49] *** guifa left
