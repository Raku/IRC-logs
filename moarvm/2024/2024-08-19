[00:12] <MasterDuke> these are the diffs, think i should go ahead and PR them?

[00:12] <MasterDuke> https://gist.github.com/MasterDuke17/e0de6ce36cd3e945d7c4f274ed02e4b5

[07:26] *** sena_kun joined
[07:38] *** sena_kun left
[08:56] *** MasterDuke left
[09:44] <timo> does `if !nqp::isnull($fates)` generate different code from `unless nqp::isnull($fates)`? do we do nothing with $fates after the while loop, so that there is no difference between assigning $EMPTY to $fates or using "last" to jump out of the loop?

[09:46] <timo> also, i'm wondering if it would be feasible to reuse one array for the return value of nfa.run over multiple consecutive runs, and if there's any win to be had there

[09:55] <timo> that requires a simple change in the moar portions of the nfa code (switch first argument to read instead of write), then take an array as input, and put new fates in it. but the code in nqp (and maybe something in rakudo) to really take advantage of it would be more tricky

[10:28] <timo> any potential wins may be insignificant, however

[11:10] <nine> I have an rr recording of a segfault because we try to change a VMArray's type to Block when repossessing

[11:13] <nine> But I think that's not useful. This crash is just a result of b0rked precomp files, presumably due to non-reproducible builds.

[11:37] <timo> is there something we're not putting in the hash that makes the precomp file's identity that changed?

[11:38] <timo> could this be related to having to run Configure.pl in moar so that nqp's Configure sees that the revision is new enough?

[11:39] <nine> I think it's rather that we generate some things in random order

[11:40] <nine> i.e. hash randomization

[11:40] <lizmat> fwiw, I taught myself to nuke the install dir every time I run Configure.pl in rakudo

[11:41] <lizmat> not doing that just means a big chance of things mysteriously crashing

[11:41] <timo> this is not simply about serializing hashes into our serialized blobs, right? this is about order of doing stuff inside the compiler being based on randomized hash order?

[11:41] <lizmat> at a later, more inconvenient time

[11:46] <nine> timo: yes

[14:13] *** coleman left
[14:21] *** coleman joined
[14:51] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/08/19/2024-34-steaming-ahead/

[16:40] *** sena_kun joined
[16:50] *** lizmat left
[16:51] *** lizmat joined
[19:08] <lizmat> is there a way to find out if an exception is resumable *before* trying to .resume it ?

[19:17] <ab5tract> I encountered that same scenario recently. Itâ€™s an HLL solution but I ended up with try .resume, with an optional orelse

[19:19] <ab5tract> Though that only applies works if the plan is to .resume it if it can resume

[21:47] *** sena_kun left
[23:01] *** MasterDuke joined
