[00:19] *** MasterDuke joined
[00:20] <MasterDuke> .

[00:20] <tellable6> 2024-04-16T22:20:34Z #moarvm <lizmat> MasterDuke: I haz an idea to make MoarVM get a faster startup, but am scared to do this myself in MoarVM  :-)

[00:20] <MasterDuke> lizmat: i suspect the idea is switching cuiids from strings to ints?

[00:22] <MasterDuke> a quick glance through moarvm doesn't reveal any obvious reason it *has* to be a string

[02:03] *** vrurg_ left
[02:04] *** vrurg joined
[02:08] <MasterDuke> https://github.com/MoarVM/MoarVM/compare/main...MasterDuke17:MoarVM:convert_cuuid_to_int builds MoarVM. however, NQP with no changes dies with `+++ Compiling   gen/moar/stage1/QRegex.moarvm

[02:08] <MasterDuke> Serialization Error: missing static code ref for closure '' (/home/dan/Source/perl6/install/share/nqp/lib/MAST/Ops.nqp:8335)

[02:08] <MasterDuke>    at NQP::src/vm/moar/QAST/QASTCompilerMAST.nqp:878  (src/vm/moar/stage0/QAST.moarvm:serialize_sc)1`

[02:08] <MasterDuke> i'm less sure what modifications NQP needs

[02:09] <japhb> Maybe it was originally intended to allow creating the IDs using a GUID generator and assigning them to compiles that persisted longer?

[02:10] <MasterDuke> dunno. they were strings from the start, but the git commit messages and/or code comments don't really say why string vs int

[02:55] <ugexe> the only thing that immediately sticks out to me is `MVMuint64 cuid_idx = get_vm_string_index(tc, ss, MVM_coerce_i_s(tc, sf->body.cuuid));`

[02:55] <ugexe> string the default value is now 0 instead of null pointer or empty string

[02:55] <ugexe> since the default value^

[02:55] <ugexe> https://github.com/MoarVM/MoarVM/blob/d5dafa9b47d56489e9a2d67b0a24f8ded06c0ff7/src/profiler/heapsnapshot.c#L129-L133

[02:56] <ugexe> which maybe changes the behavior of ^

[02:57] <ugexe> i'm not sure if that'd actually matter though

[04:09] *** MasterDuke left
[05:42] *** vrurg left
[05:42] *** vrurg joined
[07:32] <nine> Inline::Perl5 generates cuids using 128 bit random numbers.

[07:36] <nine> Do we actually know that switching to numbers would make things measurably faster?

[07:55] *** sena_kun joined
[08:23] <lizmat> well, it would mean not needing to walk the string heap for 21K+ entries at startup

[08:23] <lizmat> for 6.c

[08:24] <lizmat> + 1200+ for 6.d

[08:24] <lizmat> + 3000 for 6.e

[08:25] <lizmat> but I guess Inline::Perl5 kills the idea

[08:25] <lizmat> MasterDuke: sorry for the noise

[08:25] <tellable6> lizmat, I'll pass your message to MasterDuke

[09:03] <nine> Question is does that take a noticable time? Strings are prefixed by their length. So all we do when calculating the fast table is read that length, jump to the next string and repeat. Reading 20K memory locations in a dense memory block shouldn't take much time. This walk is pretty cache friendly.

[09:04] <lizmat> that's also roughly 20K * 8 bytes of strings in memory

[09:05] <lizmat> (as most strings are 5 chars, padded to 8 bytes)

[09:06] <nine> If they are accessed. Bytecode files are memory mapped. The kernel will only actually read those parts into memory that are accessed. And it can flush parts from the cache if they are not used anymore (e.g. after the initial scan)

[09:07] <lizmat> but are they flushed?  aren't the cuuids not used as strings during runtime ?

[09:07] <nine> Undoubtedly there is a cost of having these as strings. I'm just very unsure about this being a noticable cost.

[09:08] <nine> I think they are really only used in error and logging messages

[09:15] *** sena_kun left
[09:17] <lizmat> in that case let's forget about that idea for nonw

[09:17] <lizmat> *now

[13:59] *** Util left
[14:11] *** lizmat_ joined
[14:15] *** lizmat left
[14:16] *** lizmat joined
[14:17] *** lizmat__ joined
[14:20] *** lizmat_ left
[14:21] *** lizmat left
[14:21] *** lizmat__ left
[14:21] *** lizmat joined
[15:13] *** lizmat_ joined
[15:16] *** lizmat left
[15:52] *** lizmat joined
[15:55] *** lizmat_ left
[18:01] *** sena_kun joined
[18:30] *** sena_kun left
[18:30] *** sena_kun joined
[18:42] *** Altai-man joined
[18:42] *** sena_kun left
[19:11] *** sena_kun joined
[19:11] *** Altai-man left
[19:34] *** sena_kun left
[19:35] *** sena_kun joined
[20:53] *** sena_kun left
[20:53] *** sena_kun joined
[21:58] *** vrurg left
[22:07] *** vrurg joined
[22:35] *** lizmat_ joined
[22:39] *** lizmat left
[22:49] *** lizmat_ left
[22:49] *** lizmat joined
[23:11] *** sena_kun left
