[00:56] <MasterDuke> timo: can you think of a benchmark where adjusting the nursery might be beneficial?

[02:34] <MasterDuke> it all comes back to nfas

[02:36] <MasterDuke> i added an MVM_dump_backtrace(tc) call to set_size_internal() (which created a 96gb log file when building CORE.c) to see where they were all coming from

[02:36] <MasterDuke>  264002    at NQP::src/vm/moar/QAST/QASTCompilerMAST.nqp:2304  (/home/dan/Source/perl6/install/share/nqp/lib/QAST.moarvm:get_callsite_id_from_args)

[02:36] <MasterDuke>  271489    at NQP::src/QAST/Op.nqp:7  (/home/dan/Source/perl6/install/share/nqp/lib/QASTNode.moarvm:new)

[02:36] <MasterDuke>  350887    at <unknown>:1  (/home/dan/Source/perl6/rakudo/blib/Perl6/Grammar.moarvm:stdstopper)

[02:36] <MasterDuke>  405184    at src/Perl6/Optimizer.nqp:2289  (/home/dan/Source/perl6/rakudo/blib/Perl6/Optimizer.moarvm:do)

[02:36] <MasterDuke>  414458    at src/Perl6/Grammar.nqp:3751  (/home/dan/Source/perl6/rakudo/blib/Perl6/Grammar.moarvm:termish)

[02:36] <MasterDuke>  577503    at NQP::src/vm/moar/QAST/QASTOperationsMAST.nqp:108  (/home/dan/Source/perl6/install/share/nqp/lib/QAST.moarvm:compile_mastop)

[02:36] <MasterDuke>  603694    at NQP::src/QRegex/Cursor.nqp:729  (/home/dan/Source/perl6/install/share/nqp/lib/QRegex.moarvm:!protoregex)

[02:36] <MasterDuke>  825573    at <unknown>:1  (/home/dan/Source/perl6/rakudo/blib/Perl6/Grammar.moarvm:_ws)

[02:36] <MasterDuke> 1439631    at NQP::src/QRegex/NFA.nqp:1044  (/home/dan/Source/perl6/install/share/nqp/lib/QRegex.moarvm:run_alt)

[02:36] <MasterDuke> 1719069    at NQP::src/QRegex/Cursor.nqp:559  (/home/dan/Source/perl6/install/share/nqp/lib/QRegex.moarvm:!cursor_capture)

[07:55] *** sena_kun joined
[08:10] *** sena_kun left
[16:10] <timo> that's every set_size_internal, and not the ones that actually cause a realloc or malloc?

[16:21] *** japhb_ left
[17:09] *** sena_kun joined
[17:27] *** sena_kun left
[17:28] *** sena_kun joined
[18:22] <timo> https://github.com/facebook/zstd/blob/dev/contrib/seekable_format/zstd_seekable_compression_format.md :eyes emoji:

[18:31] <lizmat> any application you're considering?

[18:42] <timo> spesh logs can become pretty lorge

[18:43] <timo> but it's still very useful to be able to skip around the contents very fast when looking for stuff

[18:45] <timo> if the format we spit out isn't easily readable with just the zstd commandline tool, though, that's not attractive. we have a specific format for heap dumps where individual chunks are zstd compressed, but it's not useful to look at it with "less" or so, so there i don't see it as much of a problem

[18:45] <timo> but you often like to grep through a regular spesh log, for instance

[18:47] <timo> it sounds like having a trained dictionary before compression also improves compression speed, so it might be cool to have a zstd dictionary for spesh logs if i add zstd support for spesh logs in the first place

[18:48] <timo> there's a proposed "dictionary inside zstd file" format, but the pull request has been dormant for years, even though it kind of seems like it's ready to go?

[18:50] <timo> otherwise a cheeky `moar --get-zstd-dict foobar.dictfile` could be okay, since the dictionary has to be available inside of moar already for use in compression

[18:51] <timo> 15315 7.4G -rw-r--r--. 1 timo timo 7.4G Aug 14 23:26 /tmp/moar-1212606.speshlog.txt

[18:51] <timo> 15330 8.2G -rw-r--r--. 1 timo timo 8.2G Aug 14 23:33 /tmp/moar-1221195.speshlog.txt

[18:51] <timo> oops that's even a little more than i expected

[19:22] <timo> maybe zstd's "independent chunks" mode is good enough to be somewhat-seekable. i'm benchmarking a whole bunch of different parameters with dictionary and without etc etc for compression ratio and read/write speed

[19:25] <timo> even without using a dictionary, and even with chunking the file into a fresh, unrelated chunk every 2 MB of input data, even with the lowest compresion ratio / highest compression speed, the size reduction is about 13x

[20:05] *** MasterDuke left
[20:51] <timo> Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename

[20:51] <timo> 556632      0     184 MiB      1.47 GiB  8.176   None  /tmp/moar-3008468.speshlog.txt.zst

[20:52] <timo> this is with writing lots of small bits in the middle, sometimes individual lines, as "full" zstd frames, so wasting a lot of potential ratio in order to have simpler code

[22:02] <[Coke]> jj

[22:02] <[Coke]> ww

[22:03] *** sena_kun left
