[01:33] *** Ven joined
[01:38] <samcv> jnthn, I have Prepend marks working now!

[01:38] <samcv> \o/

[01:39] <samcv> almost FULL unicode 9.0 support

[01:53] <samcv> down to 7 failed tests out of 750

[01:53] <samcv> lowest ever!

[02:48] *** ilbot3 joined
[03:13] *** pyrimidine joined
[03:27] *** pyrimidi_ joined
[03:49] *** diakopter joined
[03:50] <diakopter> samcv: good job with the ucd2c.pl work

[03:50] <samcv> thanks

[03:50] <samcv> diakopter, how do i get MVM to print messages to console

[03:50] <samcv> for debugging

[03:50] <samcv> trying to get prepending characters working, when followed by characters that don't pass NFG_QC

[03:54] <diakopter> trying to remember how I used to do it

[03:54] <samcv> atm i'm just having it panic :P

[03:54] <samcv> but would be much more useful if it didn't halt every time

[03:55] <diakopter> oh, with a formatted string?

[03:55] <samcv> and we're going to have to change the value of ready = MVM_unicode_normalizer_process_codepoint_full

[03:55] <samcv> change it so 0 == normal, -1 == prepend and 1 == extend

[03:55] <samcv> diakopter, yeah with anything

[03:55] <samcv> idk what as long as i can print something

[03:55] <samcv> haha

[03:56] <samcv> would be nice if i could dump objects idk

[03:56] <samcv> should also allow us to support 3 character country symbols and such

[03:58] <samcv> err maybe i just have to printf to stderr

[03:58] <diakopter> fprintf(stderr, "fmt string", args);

[03:58] <samcv> kk

[04:04] <mst> samcv: C and "dump objects" don't tend to go very well together

[04:04] <samcv> yes

[04:04] <mst> you can write gdb extensions in python apparently

[04:04] <mst> and now I'm out of my depth

[04:04] * mst backs away slowly

[04:04] * diakopter waves hi to mst

[04:12] *** pyrimidine joined
[04:22] * mst backs away faster

[04:24] *** TimToady joined
[04:31] <diakopter> mst: lolol

[04:37] <samcv> going to write a function that will convert my new return values into what things were expecting before, so i can easily modify the return values to provide more information

[04:37] <samcv> since different cases call for it wanting more information or not, depending on what we're doing

[04:38] <samcv> and testing true/false will totally break

[04:58] *** pyrimidine joined
[04:58] <samcv> plus the functions modify the value of 'ready' anyway

[04:58] <samcv> would be really bad if was in the same variable

[05:11] <samcv> woeooo!

[05:11] <samcv> i did it

[05:11] <samcv> hopefully didn't break anything in the process

[05:12] <samcv> yep didn't break anything! now only failing 5 out of 744 unicode tests. well at least not in this part, i will have to test the other things

[05:21] <samcv> or people changed rakudo so roast didn't pass. updating

[07:02] <samcv> so we pass 100% of the unicode tests but otherwise moarvm is now randomly crashing on execution :P but if it doesn't crash everything works fine. and only crashes before actually running anything

[07:05] <samcv> mst, diakopter help me use perl6-m-gdb

[07:25] <dalek> MoarVM/even-moar-jit: d9e1bf1 | brrt++ | src/jit/ (4 files):

[07:25] <dalek> MoarVM/even-moar-jit: Symbolic declaration of architecture constants

[07:25] <dalek> MoarVM/even-moar-jit:

[07:25] <dalek> MoarVM/even-moar-jit: I apply a bit of macro trickery to declare architecture-specific

[07:25] <dalek> MoarVM/even-moar-jit: constants like the set of available registers, and this limits that

[07:25] <dalek> MoarVM/even-moar-jit: trickery to as few files and as few declarations as possible.

[07:25] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/d9e1bf14b3

[07:53] *** nine joined
[07:55] *** camelia joined
[08:20] *** nine joined
[08:20] *** pyrimidine joined
[08:20] *** camelia joined
[08:27] *** pyrimidi_ joined
[09:31] *** mst joined
[09:37] *** domidumont joined
[09:42] *** domidumont joined
[09:53] *** pyrimidine joined
[10:19] <jnthn> MVM_unicode_normalizer_process_codepoint_full re-using the ready flag as something non-boolean sounds...odd. :)

[10:20] <jnthn> moarning, #moarvm

[10:21] <nwc10> good UGT, jnthn

[10:27] *** pyrimidine joined
[10:30] <jnthn> So, seems I start my year doing Perl 6 / MoarVM things :-)

[10:30] <samcv> hi jnthn

[10:30] <samcv> heh

[10:31] <samcv> is that bad jnthn ?

[10:31] <jnthn> hi, samcv

[10:31] <samcv> designating negative values for special non-breaks

[10:31] <samcv> and positive for the ready one

[10:32] <jnthn> It just feels like the wrong place to handle it

[10:32] <samcv> hm

[10:32] <samcv> where else then?

[10:32] <jnthn> A prepend should be part of a synthetic

[10:32] <samcv> yeah

[10:32] <jnthn> I think we should cope with that at synthetic assembly time

[10:33] <samcv> don't I do that though too

[10:33] <jnthn> Dunno, didn't read the patches yet :)

[10:33] <samcv> oh ok

[10:33] <jnthn> Just about to :)

[10:33] <samcv> sweet

[10:34] <jnthn> Figured I'd get updated builds of everything happening while I do so

[10:34] <samcv> all the PR i've submitted are ready to merge. the bigger changes i have not yet PR

[10:35] <samcv> and both the open pulls (not the [needs rework one]) are separate from each other and pass all spectests

[10:36] *** dogbert17 joined
[10:36] <samcv> (well aside from that <:space> one)

[10:36] <samcv> well it fixes space :) but causes the test to fail. technically

[10:37] <jnthn> Hmm

[10:38] <jnthn> https://github.com/MoarVM/MoarVM/pull/477 seems to have 3 commits in besides the seemingly intended one?

[10:38] <jnthn> Branched from wrong place maybe?

[10:38] <samcv> oh it may

[10:38] <samcv> yeah hah oops

[10:39] <samcv> i think i was thinking you'd accept https://github.com/MoarVM/MoarVM/pull/476 first

[10:39] <samcv> the other one is on top of 475

[10:40] <jnthn> Yeah, looking at 476 at the moment

[10:41] <samcv> also that comment where i said i couldn't get that one thing working. i did get it working

[10:41] <samcv> er wait. idk i have so many branches

[10:42] <samcv> it passes all the spectests except <:space> i know that. so doesn't break anything not already broken

[10:42] <samcv> haha

[10:42] <jnthn> About the normalize.c constants added at the top...where are the values from?

[10:42] <samcv> ah yeah i did fix it. seeing the more recent commits

[10:42] <jnthn> And would it be more robust to have ucd2c.pl spit them out?

[10:42] <samcv> from the unicode_db.c

[10:43] <samcv> they always go in the same order. and yeah it would

[10:43] <samcv> but i was unable to get it done easily :\

[10:43] <samcv> but they are always in the same order

[10:43] <samcv> only will break on next unicode release (maybe) i think it's the order it sees them in the unicode .txt file

[10:45] <jnthn> Hmm

[10:45] <jnthn> Yeah, break on next update is what I'm worrying about

[10:45] <jnthn> I'd really rather we somehow spit them out into unicode_gen.h

[10:46] <samcv> it comes out in like. 7 months i think

[10:47] <samcv> hmm maybe will try more to try and get it to spit it out :\

[10:47] <samcv> i couldn't do it last time

[10:49] <jnthn> In theory they're already in unicode_property_value_keypairs, I'd think?

[10:49] <samcv> yeah

[10:49] <jnthn> heh, yes, even see them in there

[10:49] <jnthn> {"Glue_After_Zwj",352321556}

[10:49] <jnthn> :)

[10:50] <jnthn> That number looks...uh...bigger than the ones you have though :)

[10:50] <samcv> why does that matter?

[10:50] <samcv> what do i have

[10:50] <samcv> or are you looking in the enum number table not tho other one below it

[10:51] *** brrt joined
[10:52] <brrt> note to self: max number of refs in total is items_num * 4; one for each definition + 3 for each potential (maximal) use

[10:55] <brrt> this allows me to compute the necessary buffer size in one go

[10:55] <brrt> on the other hand, doesn't really work for ARGLIST things, since their buffer may be larger

[10:56] <brrt> can be counted separately, of course

[11:00] <jnthn> samcv: Probably different numbers

[11:01] <samcv> but yeah ucd2c.pl only outputs property name's not value's

[11:01] <samcv> i mean i think all the GCB properties have their own bool's but. that's dumb to look them all up separately :P

[11:02] <samcv> may even be able to eventually factor out some of the code that relys on some other ones and potentially calls many lookups to mostly use just that

[11:03] <jnthn> 476 wasn't the one that changed MVM_unicode_normalizer_process_codepoint_full, correct?

[11:03] <samcv> nope

[11:03] <samcv> uh

[11:03] <jnthn> Uh, changed its return value I meant

[11:03] <samcv> you mean the big changes i made

[11:03] <samcv> nope

[11:04] <jnthn> Sorry, wasn't clear

[11:04] <jnthn> OK

[11:04] <samcv> don't have any PR yet that do that, just my own test branch

[11:04] <jnthn> OK, 476 reviewed

[11:05] <jnthn> And yeah, 477 seems to actually have 476 within it

[11:06] <jnthn> But guess I can review the one commit

[11:11] *** zakharyas joined
[11:11] <jnthn> And the additional patch in 477 now also

[11:13] <samcv> yeah 477 would be easy to rebase since they don't really touch the same things

[11:13] <jnthn> Indeed

[11:13] <jnthn> Figured there was no point waiting for that to review it though :)

[11:14] <samcv> Just started at this for a while trying to spot what changed... The answer seems to be "nothing worth changing".

[11:15] <samcv> does this mean change it back?

[11:15] <samcv> or keep it in the changed state

[11:15] <jnthn> I'd rather we didn't commit unneeded whitespace changes

[11:15] <jnthn> I mean, if it's getting rid of trailing whitespace of accidental tabs its fine of course

[11:15] <jnthn> *or

[11:16] <jnthn> So yes, it's a small thing, but I'd appreciate it being changed back

[11:16] * jnthn tends to `git commit -p` so he can easily drop such changes from commits

[11:17] <jnthn> (When they've resulted from tweaking code then realizing it didn't need tweaking but accidentally having changed it somehow)

[11:17] <samcv> ah yeah

[11:17] <samcv> heh

[11:17] <samcv> i had to do a lot of tweaking :P

[11:17] <samcv> very much of that

[11:18] * jnthn <3 the -p flag on various git commands

[11:19] <samcv> i have not used that before. nice!

[11:19] <jnthn> Works on add, commit, checkout, stash and I think a couple of others too

[11:20] <samcv> i always wanted to do that

[11:20] <samcv> heh

[11:20] <samcv> thanks for the tip

[11:20] <jnthn> np :)

[11:22] <dalek> MoarVM/utf8-c8-rewrite: 7a60fdf | jnthn++ | src/strings/utf8_c8.c:

[11:22] <dalek> MoarVM/utf8-c8-rewrite: Update comments describing UTF8-C8.

[11:22] <dalek> MoarVM/utf8-c8-rewrite:

[11:22] <dalek> MoarVM/utf8-c8-rewrite: To match what it *should* be doing.

[11:22] <dalek> MoarVM/utf8-c8-rewrite: review: https://github.com/MoarVM/MoarVM/commit/7a60fdf3b8

[11:22] <dalek> MoarVM/utf8-c8-rewrite: e4ede14 | jnthn++ | src/strings/utf8_c8.c:

[11:22] <dalek> MoarVM/utf8-c8-rewrite: Start re-doing UTF8-C8 non-streaming decode.

[11:22] <dalek> MoarVM/utf8-c8-rewrite:

[11:22] <dalek> MoarVM/utf8-c8-rewrite: We don't try and trick a UTF-8 decoder with its own state model into

[11:22] <dalek> MoarVM/utf8-c8-rewrite: playing along with your scheme; that proved fragile. Instead, just

[11:22] <dalek> MoarVM/utf8-c8-rewrite: have our own decode loop where that need was thought out from the

[11:22] <dalek> MoarVM/utf8-c8-rewrite: very start. Interestingly, this partial re-work that totally ignores

[11:22] <jnthn> (Just a rebase on master)

[11:22] <dalek> MoarVM/utf8-c8-rewrite:

[11:22] <dalek> MoarVM/utf8-c8-rewrite: Spotted by JimmyZ++.

[11:22] <dalek> MoarVM/utf8-c8-rewrite: review: https://github.com/MoarVM/MoarVM/commit/1bbfa5f116

[11:22] <samcv> what you rebased master

[11:23] <samcv> err rebased it based on master

[11:24] <jnthn> No, rebased that branch on top of latest master :)

[11:24] <jnthn> (I was working on it last year before Chrsitmas :))

[11:24] <jnthn> Now to see if I can finish it up :)

[11:24] <samcv> nice

[11:27] <jnthn> At last!! It's snowing \o/

[11:28] <brrt> \o/

[11:33] <nwc10> but will it last until Christmas? :-)

[11:35] <jnthn> Um...I think that'll take some large volcanoes going off to give us a super cold summer :)

[11:35] <samcv> hah

[11:35] <jnthn> So "probably not"

[11:35] <jnthn> Oh, though

[11:35] <jnthn> Potentially "yes"

[11:35] <nwc10> :-)

[11:35] <jnthn> Since Christmas where my wife is from is actually in 4 days time :)

[11:35] <jnthn> And there's more show forecast for the coming days ;)

[11:36] <jnthn> *snow

[11:36] <nwc10> jnthn++ # spotted the trick question

[11:41] <jnthn> This also raises all kinds of questions like "how long should we keep our Christmas tree up"?

[11:41] <brrt> just prior to christmas, I learned that for Russians, it's actually called a new-years tree

[11:42] <nwc10> "until Easter" | "yes, but which?"

[11:43] <jnthn> brrt: Yes, and gifts are given/opened at New Years

[11:43] <jnthn> OK, lunch time :)

[12:05] <samcv> is 'theirs' the HEAD when doing a rebase and 'ours' is what we're currently at?

[12:05] <samcv> i guess that sorta would sorta make some sense. but that's terrible words to use

[12:17] <jnthn> Yes

[12:17] <jnthn> And yes, it's a bit confusing

[12:18] <samcv> jnthn, i've done all but having ucd2c.pl generate the #defs

[12:19] * brrt is just done with lunch

[12:30] * jnthn also :)

[12:31] <jnthn> Plus written some new failing tests for the next thing I need to fix :)

[12:43] <samcv> ok jnthn i think i will just make my own generation of the #def's instead of trying to use the build in one. and so it isn't in the same section as the other one

[12:44] <samcv> (as the property names)

[12:45] <jnthn> samcv: That works for me...should still be more robust than hard-coding :)

[12:59] <jnthn> Oh man, the streaming version of utf8-c8 is tricky

[13:03] <dogbert17> perhaps you should have gone for something simpler :-)

[13:03] <nwc10> Perl 3!

[13:03] <dogbert17> :-)

[13:04] <jnthn> Just figured out how to make it less tricky :)

[13:06] <dogbert17> cool

[13:15] <dogbert17> if you manage to fix the utf-c8 problem there's is a 100% reproducible SEGV hiding in MoarVM issue #412, it even seems to involve GC ..

[13:18] <samcv> jnthn, might as well be good that i am adding this to ucd2c.pl though

[13:18] <samcv> will be nice not having to do str_cmp and look up property values by their strings. int lookup should be faster

[13:22] * dogbert17 is afk for a bit

[13:25] <jnthn> :)

[13:25] <jnthn> samcv++

[13:26] <samcv> tho they are pretty long

[13:26] <samcv> idk can we abbreviate them more

[13:27] <jnthn> Long is OK I figure; they won't be that common

[13:27] <samcv> MVM_UNICODE_PVALUE_GCB_E_MODIFIER

[13:28] <samcv> MVM_UNICODE_PVALUE_GCB_REGIONAL_INDICATOR

[13:28] <samcv> kk

[13:28] <samcv> i mean in the unicode stuff we check ccc and other things often

[13:28] <samcv> but i guess we can just do whatever

[13:28] <samcv> fine with me. will work for me

[13:32] <jnthn> :)

[13:32] <jnthn> heh, so utf8-c8 streaming mode just worked and passed tests first time. Which means I need more tests 'cus I know it's still partly busticated :)

[13:34] <samcv> hah

[13:34] <lizmat> jnthn: check with [Tux] on perl6-dev  :-)

[13:34] <samcv> but it's less broken?

[13:35] <jnthn> Well, it's less broken on small inputs, but I hacked a buffer size just to see if that amount works. :D

[13:35] <jnthn> And cheated in other ways

[13:35] <jnthn> I know what tests need to come next, so it's fine :)

[13:35] <nwc10> jnthn: A week or two back I no-pasted an ASAN failure from running

[13:35] <nwc10> (i-search)`make': nice make -j24

[13:35] <nwc10> er,

[13:35] <samcv> jnthn, so just the things you commented on, and then that PR is good?

[13:35] <samcv> :)

[13:36] <nwc10> no, this: m-spectest6

[13:36] <nwc10> anyway, I got another

[13:36] <jnthn> samcv: Those were the only things I spotted on review, yes

[13:36] <nwc10> which I suspect is the same root cause

[13:36] <nwc10> [just in case your hard problem TODO list was getting too small :-(]

[13:37] <jnthn> Got a paste of it?

[13:38] *** Ven joined
[13:39] <nwc10> http://paste.scsys.co.uk/540454

[13:40] <nwc10> and http://paste.scsys.co.uk/540455

[13:40] <nwc10> Dec 23 and Dec 29 respectively

[13:44] <jnthn> Aha

[13:44] <jnthn> Yes, I know what those are :)

[13:44] <jnthn> dogbert17 filed a MoarVM ticket with the same :)

[13:44] <jnthn> Didn't decide yet how to fix it

[13:45] <nwc10> OK. Known cause is at least good.

[13:45] * jnthn wonders if that could cause corruption leading to the non-SEGV failure mdoe of m-spectest6

[13:51] <brrt> memory corruption :-(

[13:52] <brrt> memory corruption makes you wonder if you should start writing Rust like the smug hipsters are telling you

[13:52] <brrt> so, question;

[13:53] <brrt> are algorithms useful interview questions; should interviewees be allowed to google during interviews

[13:53] <brrt> i have fairly strong opinions on the subject, but i'm wondering what you think

[13:54] <moritz> brrt: algorithm interview questions are useful if the programmer will spend a signficant amount of time implementing such algorithms

[13:55] <brrt> hmmm

[13:55] <moritz> it might make sense to talk about consensus protocols when you're hiring somebody to implement consesus protocols in a distributed system

[13:55] <brrt> alright. can I ask the interviewee for topological sort if he's to implement consensus protocols?

[13:56] <moritz> there's much less value in talking about red-black trees for somebody how mostly implements CRUD web apps or boring CSV -> XML transformations

[13:56] <moritz> brrt: yes, I think that's a reasonable request

[13:57] <brrt> hmmm.... i'm detecting something i'm going to call implicit leveling

[13:57] <brrt> "Sure, CRUD developers don't need to know all that complex stuff, those dear money-making fellows"

[13:57] <moritz> something you can totally talk about is how to structure software, for any kind of software developer

[13:57] <brrt> not saying you mean it that way; just that it's an implicit assumption

[13:58] <brrt> heh, there's something i think i disagree with, too

[13:58] <moritz> there are tasks and positions for different levels, sure

[13:58] <brrt> the tl;dr is that 'how to structure software' is highly dependent on the use / delivery / context of the software

[13:59] <brrt> and it's virtually impossible to have a decent discussiopn that actually recognizes that

[13:59] <moritz> from a lead developer, I'd expect more understanding of algorithms and of architectures, for example

[13:59] <brrt> hmmm

[13:59] <brrt> the counterpoint is

[14:00] <brrt> it's the CRUD developers that write code that is quadratic, oops, and bring down the money-making system

[14:00] <jnthn> I find it interesting to get people to talk about topics they claim to know well.

[14:00] <jnthn> (In interview)

[14:00] <samcv> ok got that done :) now running spectests

[14:00] <brrt> hmmm

[14:00] <brrt> that's actually a really good suggestion, i think

[14:00] <moritz> brrt: that's what you have QA for, ideally

[14:00] <jnthn> Then you can get a sense for how well/deeply they grasp and can discuss topics they've had a chance to research.

[14:00] <moritz> that is, also load testing

[14:00] <moritz> (no, we don't have nearly enough of that ourselves)

[14:00] <brrt> (neither do we)

[14:01] <moritz> jnthn: that sounds like a good idea

[14:01] * jnthn had one person show up for an interview saying they had worked with some framework "since its BETA releases"

[14:01] * brrt wonders how this story will end

[14:01] *** pyrimidine joined
[14:02] <samcv> ^

[14:03] <jnthn> Well, I'd worked with it some too though not so long, so figured I'd start with some easy questions. We were a bit surprised when they struggled with those. o.O

[14:04] <jnthn> (My co-interviewer knew the thing too)

[14:05] <jnthn> On the other hand, other people who came for interview ended up teaching me interesting stuff about their favorite problem domains during the interview. :-)

[14:06] <jnthn> And demonstrated they had dug deeply into it, and so - presumably - would be able to for other problem spaces too.

[14:07] <brrt> i like that strategy a lot

[14:07] <brrt> i'm going to try it out some time :-)

[14:13] <brrt> the other counterpoint is that you could claim that knowledge of algorithms in general is not a very high barrier - especially in this day and age - and that having associative memory of algorithms, techniques and patterns is more valuable than the hypothetical ability to type in a pre-formed porblem

[14:16] *** synopsebot6 joined
[14:17] <moritz> brrt: algorithm knowledge tests bias towards people with formal education. Depending on your position and needs, that might or might not be desirable

[14:17] <samcv> dammit now it's failing 2 tests :(

[14:17] <samcv> <:Greek> and one other script. this has happened before though…

[14:18] <brrt> on the other hand, 'formal education' is as light as 'a few hours of MOOC' these days

[14:19] <brrt> so while i understand that concern, i'm not sure it is as valid now as it was even a few years ago

[14:20] <moritz> I think there are as many approaches to hiring as there are open dev positions :-)

[14:21] <moritz> we tend to ask about prior work, open source if available, and do a quick coding test (20min to 1h, depends) where the candidates an use google

[14:21] <moritz> and bring their own laptop and dev env if they want

[14:23] <samcv> ok i regenerated and everything passed :) :P

[14:23] <jnthn> /o\ :)

[14:23] <brrt> that sounds indeed rather scary

[14:24] <samcv> at least the two tests i tested before. so much ucd2c.pl :( will run a full spectest to be doubly sure

[14:24] <brrt> moritz: I kind of agree.... there's more than one way to do it

[14:24] <samcv> can't trust whenever i run the script it won't cock up something random i never had thought about

[14:32] *** dogbert2 joined
[14:39] <samcv> ok all good jnthn :)

[14:55] <jnthn> Ready for re-review? :)

[14:56] <samcv> yep!

[15:01] <jnthn> OK. Think I'm seeing the light at the end of the tunnel with utf8-c8

[15:02] <brrt> \o/d

[15:04] <samcv> also what is utf8-c8 mean

[15:04] <samcv> different than UTF-8? assume stands for something but nothing online about it

[15:07] <jnthn> samcv: It's the encoding we use for dealing with things like paths

[15:08] <jnthn> The c8 means "clean 8-bit"

[15:08] <jnthn> Essentially, "decode the thing into an NFG string using UTF-8, unless that would affect our ability to round-trip it"

[15:09] <jnthn> So, if the thing isn't valid UTF-8, or if normalization would mangle it, then it uses a range of synthetics to carry the original bytes.

[15:10] <jnthn> Except the version in master didn't properly guard against normalization, and had other issues due to being build atop of an encoder that assumed it was getting valid UTF-8, and got into a bit of a tangle

[15:11] <jnthn> So after a couple of attempts to patch it up, I figured it was time for a clean start.

[15:16] *** pyrimidine joined
[15:18] <samcv> oh jnthn was wondering how to get the length of the strings so i can grapheme iterate

[15:19] <samcv> i didn't change it because i wanted to make sure wouldn't do something horrible and it get the grapheme length instead and mess things up

[15:33] *** Dunearhp joined
[15:36] <jnthn> Is this for the collation stuff?

[15:36] <jnthn> Didn't you want by codepoint there?

[15:36] <samcv> yeah the collation

[15:36] <samcv> not talking about the other one which is fine

[15:36] <samcv> i was asking about how to properly iterate by codepoint and not overrun the string on accident

[15:37] <jnthn> OK, but you said grapheme iterate :)

[15:37] <jnthn> Anyway, we don't store the length of the string in codepoints, but use MVM_string_ci_has_more to check if you're at the end

[15:38] <samcv> ok sounds good

[15:39] <jnthn> There's who sets of functions, those with _ci_ are codepoint iteration (you'll never see a synthetic, you get them as if you were iterating NFC), those with _gi_ are grapheme iteration (you'll get negatives for synthetics)

[15:40] <jnthn> *two sets

[15:40] *** brrt left
[15:59] <timotimo> i'm super sick ATM :(

[16:00] <dogbert2> :( Grippe?

[16:00] <jnthn> timotimo: Aww. :( Sorry to hear that.

[16:00] <jnthn> Hope you'll be feeling better soon.

[16:02] <timotimo> it's gastritis

[16:02] <timotimo> includes the most torturous instance of hiccups i've ever had in my life

[16:02] <jnthn> Well, that's no fun :(

[16:02] <timotimo> no fun, and also no sleep

[16:02] <jnthn> And no sleep is a no-fun multiplier :/

[16:03] <timotimo> definitely

[16:03] <timotimo> but it does seem like i got upwards of 5 hours of sleep today

[16:06] * jnthn spectests with his streaming utf8-c8 rewrite

[16:06] <jnthn> Valgrind is happy with the tests, including the new ones I've added.

[16:07] <dogbert2> timotimo: get well soon

[16:08] <samcv> nice jnthn

[16:08] <timotimo> will try

[16:09] <jnthn> I think "get well soon" has an implied "I hope you'll" on the front rather than a "Sheesh, you'd better"... :-)

[16:10] <timotimo> ;)

[16:10] <timotimo> i don't know how to properly respond ... maybe just "thanks"?

[16:10] <jnthn> :)

[16:11] <dogbert2> have the hiccups stopped?

[16:11] <timotimo> they just resumed

[16:11] <dogbert2> :(

[16:12] <timotimo> they usually last 5 or 6 hours

[16:12] <timotimo> and pauses usually last half an hour, it seems like

[16:14] <dalek> MoarVM/utf8-c8-rewrite: 9720d32 | jnthn++ | src/strings/ (4 files):

[16:14] <dalek> MoarVM/utf8-c8-rewrite: Re-implement UTF8-C8 streaming decode.

[16:14] <dalek> MoarVM/utf8-c8-rewrite: review: https://github.com/MoarVM/MoarVM/commit/9720d3270f

[16:15] <dalek> MoarVM/utf8-c8-rewrite: 4974f97 | jnthn++ | src/strings/utf8_c8.c:

[16:15] <dalek> MoarVM/utf8-c8-rewrite: Remove now-dead code.

[16:15] <dalek> MoarVM/utf8-c8-rewrite: review: https://github.com/MoarVM/MoarVM/commit/4974f97f51

[16:16] <dalek> MoarVM: 7a60fdf | jnthn++ | src/strings/utf8_c8.c:

[16:16] <dalek> MoarVM: Update comments describing UTF8-C8.

[16:16] <dalek> MoarVM:

[16:16] <dalek> MoarVM: To match what it *should* be doing.

[16:16] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7a60fdf3b8

[16:16] <jnthn> There's a merge

[16:17] *** dalek joined
[16:19] <jnthn> samcv: So, I should look now at 476?

[16:19] <samcv> if you haven't look since i updated it yeah

[16:19] <jnthn> no, was busy on the utf8-c8 thing

[16:21] <jnthn> Oh, but if I merge this and bump the revision we start failing something due to the <:space> test?

[16:21] <jnthn> Or you wrote that comment before you re-ran it to get a pass?

[16:23] <jnthn> Anyway, I'm happy with the changes :)

[16:23] <timotimo> quite. samcv++

[16:24] <samcv> just the <:space> test

[16:24] <jnthn> Hmm

[16:24] <samcv> which can't work except when it's actually broken. and space == LF == LF

[16:24] <jnthn> I guess people will notice that...

[16:24] <samcv> err LF == space

[16:24] <samcv> <ws>?

[16:25] <samcv> that works. so does White_Space

[16:25] <jnthn> Well, will notice the fact the spectest fails I meant.

[16:25] <samcv> well i'll todo it

[16:25] <jnthn> OK

[16:25] <samcv> when bumping the version

[16:25] <jnthn> Alright, I'll merge

[16:25] <samcv> yay

[16:25] <jnthn> I want a version bump to get my stuff in too :)

[16:25] <samcv> :)

[16:25] <dalek> MoarVM: 5285ba6 | samcv++ | tools/ucd2c.pl:

[16:25] <dalek> MoarVM: Make sure we generate all values of the Line_Break property

[16:25] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5285ba653b

[16:25] <dalek> MoarVM: 1b779d6 | samcv++ | / (3 files):

[16:25] <dalek> MoarVM: Implement Bidi_Mirroring_Glyph as an integer property

[16:26] <jnthn> samcv++

[16:26] <nwc10> you've really got it in for dalek today

[16:26] *** dalek joined
[16:26] <jnthn> samcv: You going to do version bump, or shall I?

[16:27] <samcv> i can do it. :)

[16:30] <jnthn> Nice

[16:30] <jnthn> Then I can push my new tests and close an RT :)

[16:35] *** travis-ci joined
[16:35] <travis-ci> MoarVM build failed. Jonathan Worthington 'Remove now-dead code.'

[16:35] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/188278351 https://github.com/MoarVM/MoarVM/compare/293bda71beeb...4974f97f5182

[16:35] *** travis-ci left
[16:35] <jnthn> orly?

[16:36] <jnthn> no :)

[16:39] <jnthn> bbiab

[17:18] *** colomon joined
[17:24] *** Ven joined
[17:28] <dalek> MoarVM/even-moar-jit: c188330 | brrt++ | / (4 files):

[17:28] <dalek> MoarVM/even-moar-jit: Make register.c and linear_scan.c compileable

[17:28] <dalek> MoarVM/even-moar-jit:

[17:28] <dalek> MoarVM/even-moar-jit: No need to be sloppy even if it's broken now

[17:28] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/c188330b39

[17:28] <dalek> MoarVM/even-moar-jit: 703083e | brrt++ | src/jit/ (4 files):

[17:28] <dalek> MoarVM/even-moar-jit: Make the separator of register names configurable

[17:28] <dalek> MoarVM/even-moar-jit:

[17:28] <dalek> MoarVM/even-moar-jit: Another way to do it would have been to remove the comma from the list

[17:28] <dalek> MoarVM/even-moar-jit: and embed it in the macro, but that is actually quite fragile, and this

[17:28] <dalek> MoarVM/even-moar-jit: is quite explicit I think.

[17:28] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/703083e7df

[17:32] *** leego joined
[17:35] *** leego joined
[17:40] <nwc10> jnthn: ASAN no longer considers the spectests as worthy of honouring with barfage

[17:40] <nwc10> (that would be a win)

[17:41] <jnthn> Does that mean we're now fully clean?

[17:53] *** tbrowder joined
[17:55] <nwc10> not everything passes

[17:55] <nwc10> but nothing aborts with ASAN

[18:05] *** lizmat joined
[18:12] <jnthn> nwc10: Hm, curious, I get only some passing todos

[18:13] <nwc10> possible parallel testing race conditions

[18:14] <nwc10> t/spec/S19-command-line/repl.rakudo.moar failed this one, but not when I run it again:

[18:14] <nwc10> ok 8 - REPL with -M with non-existent module does not start

[18:14] <nwc10> t/spec/S24-testing/3-output.t still fails:

[18:14] <nwc10> not ok 4 - expected output with passing todo test

[18:14] <nwc10> I've been abducted to read...

[18:44] *** lizmat joined
[19:03] <notviki> nwc10: 3-output.t should nwo pass

[19:04] <notviki> *now

[19:05] <notviki> nwc10: and repl one uses doesn't hang test that waits X amount of time before assuming test hung and failing it. If it often fails on your box you can set ROAST_TIMING_SCALE=2 or higher to make it wait longer

[19:06] <notviki> (3-output.t was broken for 46 minutes today, so you likely tested the broken copy)

[19:31] *** pyrimidine joined
[19:45] *** Ven joined
[20:11] <japhb> .tell brrt Google's philosophy is that baseline SWE (SoftWare Engineer) requirements are the same across all subdisciplines, and then some jobs require additional skills.  But baseline SWE is expected to have algorithms experience, solid coding in at least one language, architectural design skills, and so forth.  Which is why it takes most of a day to interview for it -- and then why we do phone pre-interviews first.  :-)

[20:11] <yoleaux2> japhb: I'll pass your message to brrt.

[20:11] <yoleaux2> 1 Jan 2017 21:33Z <jnthn> japhb: Thanks! Will likely get time to look at it in the next few days.

[20:12] <japhb> jnthn: Ah, excellent, thank you.

[20:13] <notviki> japhb: you work for Google?

[20:20] <geekosaur> (aaaand that's why I chickened out of Google)

[20:23] *** pyrimidine joined
[20:23] <japhb> notviki: Yes.  I'm an SRM (Site Reliability Engineering Manager)

[20:25] <notviki> sounds fancy

[20:25] <japhb> geekosaur: Don't chicken out!  At the very least, you will have a fun day of discussing interesting engineering with a bunch of other good engineers. :-)

[20:25] * japhb shrugs

[20:25] <japhb> Not so much fancy, as "defined specialty"

[20:28] *** kjs_ joined
[20:47] *** kjs_ joined
[20:49] <jnthn> japhb: Already started digging earlier today, fwiw. Left my notes on the ticket.

[20:49] *** zakharyas joined
[20:49] <jnthn> japhb: The trail points into Rakudo or MoarVM though, rather than OO::Monitors specifically.

[21:00] *** Ven joined
[21:21] *** Ven joined
[21:35] *** Ven joined
[21:43] *** kjs_ joined
[21:45] *** dalek joined
