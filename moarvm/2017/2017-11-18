[01:30] *** bisectable6 joined
[01:51] *** Ven joined
[02:24] <timotimo> https://lemire.me/blog/2017/11/16/fast-exact-integer-divisions-using-floating-point-operations/  and  https://github.com/ridiculousfish/libdivide

[02:24] <timotimo> i'm not sure how often we have a division by a known integer number, but maybe we can teach the jit a few division fastpaths?

[02:25] <timotimo> well, step one is surely to turn some divisions into bit shifts

[02:56] *** ilbot3 joined
[08:21] *** domidumont joined
[08:26] *** domidumont joined
[08:56] *** robertle joined
[10:15] *** evalable6 joined
[10:15] *** nativecallable6 joined
[10:15] *** quotable6 joined
[10:15] *** tangible6 joined
[10:15] *** releasable6 joined
[10:15] *** unicodable6 joined
[10:15] *** bloatable6 joined
[10:15] *** benchable6 joined
[10:15] *** committable6 joined
[10:15] *** greppable6 joined
[10:15] *** coverable6 joined
[10:15] *** squashable6 joined
[10:15] *** bisectable6 joined
[10:15] *** statisfiable6 joined
[10:20] *** lizmat joined
[11:02] *** Ven joined
[11:04] *** lizmat joined
[12:07] <nine> Yet another observation: it's probably not a terribly good idea to delete the only instruction of a basic block. This may be a reason why keeping a no_op instead helps (though not the only one).

[12:40] *** nebuchadnezzar joined
[12:42] *** lizmat joined
[13:22] <dogbert17> I guess that tests which fail when using MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 can't be considered as blockers

[13:22] <jnthn> No, if they were we'd not have had a release for a couple of years. :P There's a *lot* less of them now than there were before, though.

[13:23] <jnthn> And most, last I checked, are thanks to stack traces losing frames when inlines happen

[13:23] <dogbert17> indeed, it's hard work finding them :P

[13:23] <jnthn> That's fixable, just a bit tedious

[13:24] <dogbert17> in this case it was in t/spec/S09-typed-arrays/native-num.t

[13:24] <dogbert17> test #247, 'Cannot resolve caller is-approx(Str, Str); none of these signatures match:'

[13:26] <dogbert17> btw, what about brrt's fix from yesterday, will that be included in the release?

[13:27] <jnthn> We can cherry-pick it I guess

[13:27] <jnthn> We should not merge that branch though

[13:27] <jnthn> I don't want my other commit in the releas

[13:27] <jnthn> *release

[13:27] <jnthn> Hm, I wonder if it's on me to do the release this time :)

[13:30] *** lizmat joined
[13:39] <dogbert17> at least there aren't any real blockers this month

[13:40] <dogbert17> unless AlexDaniel manages to dig one up at the last second

[13:57] *** MasterDuke joined
[15:11] <AlexDaniel> yeah, unfortunately toaster didn't manage to finish while I was sleeping, so had to kick it off again

[15:12] <AlexDaniel> but it should be ready soon. Once I see the results I think we'll be good to go

[15:15] <AlexDaniel> jnthn: I was assuming that it's not, but at the same time I haven't heard from samcv yet

[15:19] <timotimo> AlexDaniel: any +/- on the commit i sneaked in last night?

[15:19] <timotimo> or you jnthn? as this is basically your code?

[15:19] <AlexDaniel> timotimo: I've looked at it, but it's hard for me to predict what problems this could possibly cause

[15:20] <timotimo> if any user code decides to return () from the additional-names method, it'll have exploded before and will explode even with the patch attached

[15:20] <timotimo> applied*

[15:20] <AlexDaniel> greppable6: alternative-names

[15:20] <greppable6> AlexDaniel, https://gist.github.com/d47791c04f07a7a629ff46830cd0e43e

[15:21] <timotimo> it'd be cool to have a little summary to go along with the link, like "two lines matched" and "from only one module: doc"

[15:22] <AlexDaniel> https://github.com/perl6/whateverable/issues/259

[15:22] <AlexDaniel> unicodable6 already does something similar, should be very easy to implement

[15:23] <AlexDaniel> unicodable6: infinity

[15:23] <unicodable6> AlexDaniel, U+1AB2 COMBINING INFINITY [Mn] ( ᪲)

[15:23] <unicodable6> AlexDaniel, U+221E INFINITY [Sm] (∞)

[15:23] <unicodable6> AlexDaniel, 5 characters in total: https://gist.github.com/f074033df8c67bd23a8a0f926cb17928

[15:23] <AlexDaniel> well… it doesn't show all of the characters if there are some weird ones :)

[15:23] <timotimo> fair enough

[15:25] <AlexDaniel> timotimo: I think your commit is OK. Thanks for notifying

[15:26] <timotimo> oh, a quick coverage run tells me the register function is not run during actual startup

[15:35] *** zakharyas joined
[15:39] *** zakharyas joined
[16:01] *** MasterDuke joined
[16:08] *** zakharyas1 joined
[18:11] <AlexDaniel> speaking of blockers :) https://github.com/rakudo/rakudo/issues/1254

[18:11] <AlexDaniel> .tell samcv you're probably interested in https://github.com/rakudo/rakudo/issues/1254

[18:11] <yoleaux> AlexDaniel: I'll pass your message to samcv.

[18:11] *** domidumont joined
[18:12] <AlexDaniel> I guess this is the offending commit: https://github.com/MoarVM/MoarVM/commit/e76788819

[18:31] <jnthn> Ah, there be blockers

[18:32] <AlexDaniel> unfortunately I had a busy week and couldn't get my hands on it earlier, sorry for that :)

[18:33] <jnthn> No worries, I was just thinking "oh man, I should make dinner but I should maybe work on cutting the release". Now the latter ain't an option anyway. ;)

[18:44] <jnthn> With luck, samcv++ might have chance to comment/look at that. I fnot I guess we can always revert it, but I dunno if other stuff depends on it...

[18:45] <jnthn> *If not

[18:45] <jnthn> I'll have a bit of time for release tonight, or could do it tomorrow also

[18:49] <AlexDaniel> I think tomorrow is a more realistic bet

[18:50] <ugexe> i'm not sure what will happen with https://github.com/libuv/libuv/issues/1625 - since node already made a release with the regression they might not revert

[18:51] <AlexDaniel> ugexe: oh… I have not seen that

[18:55] <AlexDaniel> ugexe: so, does it mean that we should revert 8b53b1e for now?

[18:55] <AlexDaniel> Well, that's exactly what you said, but do you still think so? :)

[18:56] *** evalable6 joined
[19:08] <AlexDaniel> fwiw I think it's much better to file tickets like this: https://github.com/rakudo/rakudo/issues/1255

[19:09] <AlexDaniel> (instead of hoping that I'll find a comment in a pull request that points to a bug report in a different repo, for an issue that we probably want to handle before the release)

[19:33] <samcv> good * everyone

[19:33] <yoleaux> 18:11Z <AlexDaniel> samcv: you're probably interested in https://github.com/rakudo/rakudo/issues/1254

[19:34] <samcv> that is a weird issue

[19:34] <samcv> time to add another roast test

[19:35] <samcv> AlexDaniel: it's still passing roast right

[19:35] <AlexDaniel> yeah

[19:35] <samcv> never seen this before

[19:35] <AlexDaniel> do I agree that it is weird, the case seems so down to earth that it's really surprising there was no test or something

[19:36] <AlexDaniel> and only *one* ecosystem module is failing because of this

[19:36] <samcv> Cn is unassigned. and i fixed unassigned characters but i would have think that it would have been caught hm. maybe we need tests for every single general category

[19:36] <samcv> i just woke up. will look at it in 30 mins or so

[19:37] <AlexDaniel> samcv: it's alright, take your time

[19:37] <AlexDaniel> samcv: by the way, is it you making the release this time or jnthn?

[19:37] <samcv> i can do the MoarVM release again yeah

[19:38] <AlexDaniel> (some context: https://irclog.perlgeek.de/moarvm/2017-11-18#i_15466864 )

[19:40] <AlexDaniel> jnthn: objections? :)

[19:47] <samcv> AlexDaniel: the reason i think ascii letters must come up Cn is that they have no bitfield row

[19:48] <samcv> but not 100% sure yet

[19:51] <samcv> oh looks like non ascii also show Lu. argh

[19:53] <AlexDaniel> yeah I didn't test much

[19:54] <AlexDaniel> samcv: fwiw Unicode::PRECIS is the module that has failing tests because of this

[19:56] <samcv> this is really weird

[19:56] <samcv> ok so Cn is the default value as it should be. (index 0) and Ll is index 1

[19:56] <samcv> but lowercase letters work but not uppercase

[19:57] <samcv> oh wow. cause "Lu" is totally missing… that's not good

[20:02] <AlexDaniel> u: X

[20:02] <unicodable6> AlexDaniel, U+0021 EXCLAMATION MARK [Po] (!)

[20:02] <unicodable6> AlexDaniel, U+0036 DIGIT SIX [Nd] (6)

[20:02] <AlexDaniel> waaat…

[20:02] <unicodable6> AlexDaniel, 1733 characters in total: https://gist.github.com/6dbffcb19ef6975b15345e9ded3afa36

[20:03] <AlexDaniel> u: aX

[20:03] *** domidumont joined
[20:03] <unicodable6> AlexDaniel, U+2F44 KANGXI RADICAL AXE [So] (⽄)

[20:03] <unicodable6> AlexDaniel, U+A009 YI SYLLABLE AX [Lo] (ꀉ)

[20:03] <unicodable6> AlexDaniel, 56 characters in total: https://gist.github.com/fe5b9e2c80410459104467328b71ca66

[20:03] <AlexDaniel> u: ∞X

[20:03] <unicodable6> AlexDaniel, U+221E INFINITY [Sm] (∞)

[20:03] <unicodable6> AlexDaniel, U+0058 LATIN CAPITAL LETTER X [Lu] (X)

[20:03] <AlexDaniel> I guess unicodable is using some older version

[20:03] <AlexDaniel> unicodable6: uptime

[20:03] <unicodable6> AlexDaniel, 9 hours, 48 minutes, and 44 seconds, 343.48KB maxrss. This is Rakudo version 2017.10-8-g6ac53e427 built on MoarVM version 2017.10 implementing Perl 6.c.

[20:03] <AlexDaniel> yeah

[20:27] *** zakharyas joined
[20:29] <jnthn> samcv++

[20:30] <jnthn> samcv: If you're up for doing the release, that'd be really nice :)

[20:31] <AlexDaniel> jnthn: what are your thoughts on https://github.com/rakudo/rakudo/issues/1255 ?

[20:32] <jnthn> iiuc, we already shipped 2017.10 with that bump in place

[20:32] <AlexDaniel> oh… right.

[20:32] * AlexDaniel completely missed that

[20:33] <samcv> well i think i found what's happening. well not exactly but sort of

[20:33] <jnthn> oh, wait, that may not be the csae

[20:33] <jnthn> *case

[20:33] <jnthn> https://github.com/MoarVM/MoarVM/pull/719

[20:33] <jnthn> It was filed longer ago, then merged 21 days ago, so it wasn't in 2017.10

[20:33] <samcv> i see  $points_by_hex->{0041} ( for 'A') being set and can print it out. but then lower down it is undefined and i'm not sure why

[20:34] <AlexDaniel> I see, that's an old commit but merged recently.

[20:34] <AlexDaniel> jnthn: so it's probably reasonable to revert it for now?

[20:34] <jnthn> Was filed on 8th Oct, on 10th Oct I said OK to merge after upcoming release, which woulda been 2017.10

[20:35] <jnthn> I think so, yes. This effectively means we are blocked from any libuv bumps until this issues is fixed upstream.

[20:35] <AlexDaniel> or we find a workaround, but that's ok

[20:35] <jnthn> Or that, yeah

[20:36] <jnthn> But given there's a good chance it impacts more than just us...

[20:36] * jnthn checks the libuv ticket

[20:36] <AlexDaniel> nobody complained so far

[20:36] <AlexDaniel> at least according to that ticket

[20:36] <japhb> AlexDaniel: I think unicodable6 is off in its units for memory use.  I suspect it's supposed to be MB, not KB.

[20:36] <japhb> (or maybe MiB)

[20:37] <AlexDaniel> japhb: yes, it is. But it is also using nqp::getrusage when it should be using something else (whatever we have now available)

[20:37] <japhb> Telemetry, IIRC

[20:38] <jnthn> I think lizmat discovered that the units getrusage returns aren't consistent across platforms

[20:38] <jnthn> And may well have worked around that in Telemetry

[20:38] <jnthn> AlexDaniel: I'm going to merge the revert from ugexe++

[20:38] <Geth> ¦ MoarVM: 17cbb59876 | (Nick Logan)++ (committed using GitHub Web editor) | 2 files

[20:38] <Geth> ¦ MoarVM: Revert "Use uv_fs_copyfile API"

[20:38] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/17cbb59876

[20:38] <Geth> ¦ MoarVM: 79d6f20057 | (Jonathan Worthington)++ (committed using GitHub Web editor) | 2 files

[20:38] <Geth> ¦ MoarVM: Merge pull request #752 from ugexe/revert-719-uv_fs_copyfile

[20:38] <Geth> ¦ MoarVM:

[20:38] <Geth> ¦ MoarVM: Revert "Use uv_fs_copyfile API"

[20:39] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/79d6f20057

[20:39] <jnthn> That gives some space to figure it out

[20:39] <AlexDaniel> jnthn: good. Thank you

[20:40] <AlexDaniel> japhb: https://github.com/perl6/whateverable/issues/260

[20:43] *** lizmat joined
[20:44] <AlexDaniel> ugexe: so we're good now, right?

[20:44] <AlexDaniel> (with that particular proc issue)

[20:45] <ugexe> yes. i also believe ive just proved the regression exists inside nodejs now too

[20:47] <AlexDaniel> ugexe++

[20:48] <lizmat> japhb: what does "say VM.osname" say for you wrt MB vd KB in Telemetry ?

[20:54] <lizmat> perhaps we need more of a heuristic approach to finding out what the unit is

[21:02] <samcv> ok it seems to be assigning Lu and Cn to the same propvalue

[21:02] *** zakharyas joined
[21:02] <samcv> getting closer to figuring out how to fix this

[21:03] <samcv> and in doing so decided to nuke the $points_by_hex reference hash. since it's stupid to have $points_by_code AND $points_by_hex

[21:23] <japhb> lizmat: I was noticing unicodable6 doing it in channel, not something on my machine

[21:24] <lizmat> japhb: ?? how ?

[21:24] <lizmat> link?

[21:24] <japhb> Hold on a sec

[21:25] <japhb> https://irclog.perlgeek.de/moarvm/2017-11-18#i_15467144

[21:26] <lizmat> yeah, that looks to be off by a factor of 1024  :-)

[21:27] <AlexDaniel> the code is here: https://github.com/perl6/whateverable/blob/61a995c389a838109c9c7cdda62af717be38b870/lib/Whateverable.pm6#L161

[21:27] <lizmat> unicodable6: help

[21:27] <unicodable6> lizmat, Just type any unicode character or part of a character name. Alternatively, you can also provide a code snippet. # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Unicodable

[21:27] <AlexDaniel> but it's pre-telemetry code

[21:28] <lizmat> maybe the problem is in the "KB" :-)

[21:29] <AlexDaniel> c: HEAD use Telemetry; say max-rss, ‘ KB’

[21:29] <committable6> AlexDaniel, ¦HEAD(149ed24): «===SORRY!=== Error while compiling /tmp/w3abLsSZSI␤Undeclared routine:␤    max-rss used at line 1␤ «exit code = 1»»

[21:29] <AlexDaniel> c: HEAD use Telemetry; say T<max-rss>, ‘ KB’

[21:29] <committable6> AlexDaniel, ¦HEAD(149ed24): «451880 KB»

[21:29] <lizmat> m: use nqp; say nqp::atpos_i(nqp::getrusage,4)   # says 69623808 for me

[21:29] <camelia> rakudo-moar 149ed2429: OUTPUT: «76004␤»

[21:30] <AlexDaniel> c: HEAD use nqp; say nqp::atpos_i(nqp::getrusage,4)

[21:30] <committable6> AlexDaniel, ¦HEAD(149ed24): «451964»

[21:30] <AlexDaniel> yeah, it's ‘KB’ that is a problem :)

[21:31] <lizmat> m: use Telemetry; say T<max-rss> # says 85640 for me

[21:31] <camelia> rakudo-moar 14a90e044: OUTPUT: «92964␤»

[21:33] <ugexe> node -e "const cp = require('child_process'); { const bat = cp.spawn('cmd.exe', ['/k', 'dir'], { stdio: 'inherit', detached: false, windowsHide: true }); }" # here is the proof of libuv regression inside the latest nodejs release, which went undetected by all of: libuv tests, nodejs test matrix / system, rakudo tests, rakudo spectests.

[21:34] <AlexDaniel> oh… but to get telemetry I'd need to update rakudo

[21:35] <AlexDaniel> so expect a bot kaboom

[21:36] <mst> ugexe: some bugs just hate everybody at once.

[21:38] *** bloatable6 joined
[21:38] *** quotable6 joined
[21:38] *** tangible6 joined
[21:38] *** bisectable6 joined
[21:38] *** committable6 joined
[21:38] *** nativecallable6 joined
[21:38] *** releasable6 joined
[21:38] *** coverable6 joined
[21:38] *** greppable6 joined
[21:38] *** evalable6 joined
[21:38] *** benchable6 joined
[21:38] *** unicodable6 joined
[21:38] *** statisfiable6 joined
[21:38] *** squashable6 joined
[21:38] <AlexDaniel> unicodable6: uptime

[21:38] <unicodable6> AlexDaniel, 27 seconds, 213.712MB maxrss. This is Rakudo version 2017.10-214-g14a90e044 built on MoarVM version 2017.10-82-ge876f1484 implementing Perl 6.c.

[21:38] <japhb> lizmat: Ah, so Telemetry auto-corrects the getrusage difference?

[21:39] <japhb> AlexDaniel++

[21:39] <japhb> lizmat++

[21:39] <mst> AlexDaniel: may be worth considering sticking ZNC in front of the bothead code like simcop does with perlbot

[21:39] <lizmat> yes, afaik, only MacOS returns bytes rather than Kbytes

[21:40] <AlexDaniel> mst: yes, absolutely. https://github.com/perl6/whateverable/issues/261

[21:41] <samcv> i think i've almost fixed it

[21:41] <mst> also I strongly suspect he'd be happy to answer questions

[21:44] <jnthn> ugexe++ # bug hunting

[21:44] <AlexDaniel> japhb: https://github.com/perl6/whateverable/commit/e9ccebadca :)

[21:46] <mst> samcv: why are you trying to register perl6 as a group? we did that years ago, just tell me what you need

[21:46] <AlexDaniel> mst: I was also thinking about connecting through Matrix, but the current freenode bridge seems to be a bit slow sometimes

[21:46] <samcv> i didn't do anything

[21:46] <japhb> AlexDaniel: is Telemetry correcting to kB or KiB?

[21:46] <mst> somebody's emailed in

[21:47] <mst> samcv: apparently somebody else attempted to send in a group registration and claimed you were part of the plan

[21:47] <samcv> oh ok

[21:48] <AlexDaniel> japhb: … it should be lowercase k, right?

[21:48] <samcv> well i heard something but i didn't submit anything. someone just told me something about perl 6 masks or something

[21:48] <AlexDaniel> ah, but we don't talk about that anymore.

[21:48] <samcv> but i didn't know what was going on

[21:48] <AlexDaniel> japhb: in any case, docs talk about that: https://docs.perl6.org/type/Telemetry#method_max-rss

[21:49] <lizmat> ah, I completely missed that my Telemetry pod was cleaned up!

[21:49] <lizmat> ++ to whoever did that

[21:50] * lizmat will try to update Telemetry doc tomorrow when she's not as tired ad feeling better...

[21:53] <AlexDaniel> japhb: OK. So it is incorrect now, right?

[21:54] <AlexDaniel> japhb: because we take “Kbytes” which I assume is KiB and divide that by 1000…

[21:54] * AlexDaniel hates that with passion

[21:56] <samcv> ok going to run spectest one more time then i'll push the Unicode fixes AlexDaniel

[21:56] *** brrt joined
[22:02] *** samcv joined
[22:03] <japhb> AlexDaniel: Yeah, I would *hope* that getrusage is returning KiB (1024) when it's not returning true bytes as in MacOS ... but certainly taking KiB and dividing by 1000 to get MB is mixing bases.

[22:04] <Geth> ¦ MoarVM: a29bc81b53 | (Samantha McVey)++ | tools/ucd2c.pl

[22:04] <Geth> ¦ MoarVM: unicode: fix uppercase letters not giving Lu for the General_Category

[22:04] <Geth> ¦ MoarVM:

[22:04] <Geth> ¦ MoarVM: ucd2c.pl was trying to set both Cn (Unassigned) and Lu (Letter

[22:04] <Geth> ¦ MoarVM: Uppercase) to the same pvalue code (0). This fixes it so they are not

[22:04] <Geth> ¦ MoarVM: set to the same value.

[22:04] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a29bc81b53

[22:04] <Geth> ¦ MoarVM: 89fae17a6f | (Samantha McVey)++ | 2 files

[22:05] <Geth> ¦ MoarVM: Commit the updated Unicode database

[22:05] <Geth> ¦ MoarVM:

[22:05] <samcv> \o/

[22:05] <Geth> ¦ MoarVM: Generated with the changes from the previous commit's change to ucd2c.pl

[22:05] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/89fae17a6f

[22:05] <AlexDaniel> samcv: \o/

[22:05] <AlexDaniel> samcv: should I bump moar&nqp?

[22:05] <samcv> held off on some other changes i want to make to ucd2c.pl until after the release

[22:05] <AlexDaniel> or is it coming?

[22:05] <samcv> yes please!

[22:05] <AlexDaniel> ok

[22:05] <samcv> then i'll push an added roast test

[22:07] <AlexDaniel> done

[22:07] <samcv> still amazed this wasn't caught in any of our tests!

[22:07] <AlexDaniel> yes :'(

[22:07] <samcv> i guess nothing tested Lu

[22:07] <AlexDaniel> if not for that module, we'd release it like that :D

[22:08] <AlexDaniel> “maybe”, depending on whether I'd run whateverable tests before the release or not

[22:15] <samcv> i mean really i probably need to take a look at my tests i wrote during my grant and finalize some i didn't end up putting in

[22:16] <samcv> and tweak to make sure property values are reachable

[22:17] <AlexDaniel> I was thinking maybe we should be testing whatever perl6 reports for a character against some database that we know is correct

[23:03] *** nativecallable6 joined
[23:03] *** tangible6 joined
[23:03] *** committable6 joined
[23:03] *** quotable6 joined
[23:03] *** greppable6 joined
[23:03] *** benchable6 joined
[23:03] *** releasable6 joined
[23:03] *** evalable6 joined
[23:03] *** bloatable6 joined
[23:03] *** unicodable6 joined
[23:03] *** coverable6 joined
[23:03] *** squashable6 joined
[23:03] *** bisectable6 joined
[23:03] *** statisfiable6 joined
[23:47] *** MasterDuke joined
[23:54] *** Geth joined
