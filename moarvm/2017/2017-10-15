[01:56] *** ilbot3 joined
[02:17] *** ggoebel joined
[03:03] *** bloatable6 joined
[03:03] *** coverable6 joined
[03:03] *** nativecallable6 joined
[03:03] *** quotable6 joined
[03:03] *** evalable6 joined
[03:03] *** bisectable6 joined
[03:03] *** greppable6 joined
[03:03] *** benchable6 joined
[03:03] *** releasable6 joined
[03:03] *** unicodable6 joined
[03:03] *** squashable6 joined
[03:03] *** statisfiable6 joined
[05:55] *** evalable6 joined
[06:05] *** committable6 joined
[06:05] *** committable6_ joined
[06:07] *** committable6 joined
[06:09] *** committable6 joined
[07:12] *** AlexDaniel- joined
[07:33] *** domidumont joined
[07:39] *** domidumont joined
[09:05] *** rba_ joined
[09:16] *** rba joined
[09:31] *** rba_ joined
[09:47] *** rba joined
[10:01] *** rba_ joined
[10:16] *** rba joined
[10:31] *** rba_ joined
[10:46] *** rba joined
[11:02] *** rba_ joined
[11:16] *** rba joined
[11:31] *** rba_ joined
[11:46] *** rba joined
[12:01] *** rba_ joined
[12:10] <Geth> ¦ MoarVM: a9267cb67f | (Timo Paulssen)++ | src/core/interp.c

[12:10] <Geth> ¦ MoarVM: don't allow low-level null from getdynlex

[12:10] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a9267cb67f

[12:11] <timotimo> ^- RT #132300

[12:11] <synopsebot> RT#132300 [new]: https://rt.perl.org/Ticket/Display.html?id=132300 [SEGV] say nqp::getlexdyn('&DEPRECATED')

[12:12] <jnthn> timotimo++

[12:12] <timotimo> i'm going to check the other functions of that type, too

[12:12] <timotimo> there's one that explicitly stores NULL if the result from the function in question was null

[12:13] <jnthn> Stores NULL in a register?

[12:13] <jnthn> We should never do that

[12:14] <timotimo> m: use nqp; say nqp::getlexrel(nqp::ctx(), "nope")

[12:14] <camelia> rakudo-moar d23a9ba9d: OUTPUT: «(signal SEGV)»

[12:14] <timotimo> m: use nqp; say nqp::getlexreldyn(nqp::ctx(), "nope")

[12:14] <camelia> rakudo-moar d23a9ba9d: OUTPUT: «(signal SEGV)»

[12:16] *** rba joined
[12:16] <Geth> ¦ MoarVM: 650e7976f0 | (Timo Paulssen)++ | src/core/interp.c

[12:16] <Geth> ¦ MoarVM: no bare null from getlexrel or getlexreldyn either

[12:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/650e7976f0

[12:16] <timotimo> they could need changes in the jit, too, though

[12:18] <timotimo> interestingly, only getlexdyn has that problem

[12:21] <timotimo> nice. the only two usages of getdynlex check the result for null anyway, so we can just as well move the check to the func that does the work

[12:23] <Geth> ¦ MoarVM: 676723d736 | (Timo Paulssen)++ | 2 files

[12:23] <Geth> ¦ MoarVM: move null check into getdynlex func for benefit of jit

[12:23] <Geth> ¦ MoarVM:

[12:23] <Geth> ¦ MoarVM: the return value was already checked for null by every

[12:23] <Geth> ¦ MoarVM: user except the jit, so just have the function do it.

[12:23] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/676723d736

[12:29] <MasterDuke> btw, this is the link i was looking for earlier http://www.moarvm.org/measurements/perl6-bench/

[12:29] <timotimo> hasn't run in ages

[12:30] <MasterDuke> there was a period where new files weren't being produced at all. they are now, but are empty

[12:30] * dogbert17 stumbles on a SEGV /o\

[12:31] <dogbert17> or more specifically asan barfage, i.e. no SEGV

[12:31] <dogbert17> https://gist.github.com/dogbert17/89a3383f8f401304e60d0510317e1a5a

[12:31] *** rba_ joined
[12:32] <timotimo> wat, accessing a destroyed threadcontext?

[12:32] <MasterDuke> where do the process that creates those benchmarks live?

[12:33] <timotimo> that's japhb's perl6-bench

[12:34] <jnthn> It was just a cron job running perl6-bench and sticking the results somewhere

[12:35] <jnthn> Not sure what broke it

[12:35] <MasterDuke> where's the cron job?

[12:35] <timotimo> jnthn's system

[12:36] <dogbert17> timotimo: if it's any clue the barfage disappears if I refrain from setting MVM_GC_DEBUG=2

[12:36] <timotimo> i wonder why it'd die checking a register assignment, but not actually use whatever's in that?

[12:37] * dogbert17 tries with MVM_GC_DEBUG=1

[12:39] <dogbert17> with MVM_GC_DEBUG set to 1 it fails even earlier !

[12:39] <dogbert17> ok 12 - Threads got different IDs

[12:39] <dogbert17> #0 0xb55d379a in bind_pos /home/dogbert/repos/rakudo/nqp/MoarVM/src/6model/reprs/VMArray.c:387

[12:39] <dogbert17> #1 0xb55bb140 in MVM_repr_bind_pos_o /home/dogbert/repos/rakudo/nqp/MoarVM/src/6model/reprconv.c:232

[12:39] <dogbert17> #2 0xb57646a0 in MVM_spesh_stats_cleanup /home/dogbert/repos/rakudo/nqp/MoarVM/src/spesh/stats.c:645

[12:39] <dogbert17> #3 0xb575c317 in worker /home/dogbert/repos/rakudo/nqp/MoarVM/src/spesh/worker.c:13

[12:39] <dogbert17> heap-use-after-free

[12:40] <timotimo> what :)

[12:41] <dogbert17> bizarre, with MVM_GC_DEBUG=0 the problems disappear

[12:42] <MasterDuke> didn't jnthn fix some bug in debug code recently?

[12:42] <dogbert17> I think so yes

[12:43] <MasterDuke> wonder if the problem is actually in MVM_GC_DEBUG!=0 code

[12:43] <dogbert17> that would be my noobish guesss

[12:45] <dogbert17> guess this should be reported

[12:46] *** rba joined
[12:46] <dogbert17> I am running with a very small nursery, i.e. 32768 * 2

[13:00] <dogbert17> ok, reported as https://github.com/MoarVM/MoarVM/issues/728

[13:01] *** rba_ joined
[13:03] * dogbert17 tries to repair a broken Roland TR-707 instead &

[13:16] *** rba joined
[13:31] *** rba_ joined
[13:46] *** rba joined
[14:02] *** rba_ joined
[14:17] *** rba joined
[14:31] *** rba_ joined
[14:47] *** rba joined
[14:58] *** zakharyas joined
[15:01] *** rba_ joined
[15:47] *** quotable6 joined
[15:47] *** coverable6 joined
[15:47] *** nativecallable6 joined
[15:47] *** evalable6 joined
[15:47] *** bloatable6 joined
[15:47] *** greppable6 joined
[15:47] *** committable6 joined
[15:47] *** unicodable6 joined
[15:47] *** benchable6 joined
[15:47] *** releasable6 joined
[15:47] *** bisectable6 joined
[15:47] *** squashable6 joined
[16:01] *** buggable joined
[16:22] *** domidumont joined
[16:22] *** rba joined
[16:32] *** rba_ joined
[17:45] *** evalable6 joined
[17:45] *** statisfiable6 joined
[18:16] * japhb notices he's been flagged ...

[18:16] <japhb> What's up with perl6-bench?

[18:17] <timotimo> just that we used to have daily results up on moarvm.org, but that has stopped at some point

[18:18] <japhb> Huh.  Bitrot?  I haven't patched it in quite a while, I suppose it could have fallen prey to a deprecation or so.

[18:20] <timotimo> i'd expect it's something not quite right with jnthn's setup

[18:43] *** nebuchadnezzar joined
[18:45] <samcv> timotimo, do you know how long testing takes to run?

[18:50] <timotimo> you mean spectests?

[18:54] <samcv> the things you are citing. perl6-bench

[18:54] <timotimo> oh

[18:55] <timotimo> ironically, the faster your code is, the longer it'll take in total :P

[18:55] <timotimo> i haven't run it in a long time

[18:55] <timotimo> it starts with a tiny piece of work and increases the workload until a threshold is reached

[18:57] <timotimo> perl6-bench has this nice tool that builds versions of rakudo and perl5 and it's all batch-friendly

[20:34] *** MasterDuke joined
[21:57] *** MasterDuke_ joined
[22:31] *** MasterDuke joined
[22:42] <MasterDuke> jnthn: is there an easy way to know if a method gets inlined?

[22:52] <jnthn> MasterDuke: --profile

[22:58] <MasterDuke> `In total, 5316427 call frames were entered and exited by the profiled code. Inlining eliminated the need to create 34691 call frames (that's 0.65%).`

[23:00] <MasterDuke> so i doubt it for the method i'm interested in, but i don't see specific information about inlining in the Routines tab

[23:01] <jnthn> It's in the call stack tab iirc

[23:02] <jnthn> So really it tells you about whether it was inlined at a particular callsite

[23:02] <MasterDuke> ah, so it is. `Calls (Inlined) 	 NaN + (NaN%) `

[23:07] <jnthn> o.O

[23:07] <jnthn> Sleep time o/

[23:53] *** evalable6 joined
