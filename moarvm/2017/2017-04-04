[00:06] <timotimo> looks like incorrect fudging?

[00:07] <timotimo> i.e. it reaches the end, but it doesn't reach the specified amount of tests

[00:07] <timotimo> (file-ops.t)

[00:59] <samcv> yay appveyor

[00:59] <samcv> can we install clang on windows

[01:00] <samcv> well of course we can. will be cool to do coverage there too.

[01:00] <samcv> when i'm feeling really masochistic maybe i'll do that

[01:17] <samcv> "Perl: As Perl developers continue to wait for the arrival of Perl 6, other languages have seized the spotlight. Though some developers still find this language efficient and portable, itâ€™s not without its annoyances. The popularity of Perl is fading fast and, unless Perl 6 is introduced soon, the demand for this technology may die out."

[01:17] <samcv> oh my

[01:23] <[Coke]> .seen samcv

[01:23] <yoleaux2> I saw samcv 01:17Z in #moarvm: <samcv> oh my

[01:23] <samcv> hi

[01:23] <[Coke]> pmsged

[02:20] *** geekosaur joined
[02:26] *** evalable6_ joined
[02:59] *** evalable6 joined
[04:14] *** evalable6 joined
[05:21] *** stmuk joined
[05:53] *** domidumont joined
[05:59] *** domidumont joined
[06:05] *** brrt joined
[06:42] *** brrt joined
[06:52] <brrt> timotimo: the other solution is to install gnu make or bsd make :-P

[06:52] <brrt> or mingw

[07:54] *** zakharyas joined
[08:12] <samcv> oh guys

[08:13] <samcv> i have roast coverage reports now too

[08:52] <brrt> hi samcv

[08:52] <samcv> if you guys curious

[08:53] <samcv> Roast: line based (per file) https://cry.nu/coverage/roast/

[08:53] <samcv> function and file summaries of coverage % https://cry.nu/coverage/roast.html

[08:53] <samcv> really nice, you can see which code doesn't get executed which can sometimes be insightful

[08:54] <samcv> meaning not just code that is not tested, but code that may never execute or maybe was created with conditions in mind that may not actually happen

[08:56] <brrt> huh, that's pretty funny

[08:56] <samcv> funny?

[08:57] <samcv> also for #define's it will show the number of times code USING that thing has been run

[08:57] <samcv> which is pretty mindblowing. but

[08:57] <samcv> i verified it

[08:59] *** dogbert17 joined
[09:13] <samcv> brrt, maybe you will find something interesting

[09:13] <brrt> funny as in interesting :-)

[09:14] <samcv> brrt, https://cry.nu/coverage/roast/coverage/home/samantha/git/MoarVM/src/jit/log.c.html

[09:14] <samcv> maybe should inline that

[09:14] <samcv> 69.1M invocations. one of the highest i've seen

[09:16] <brrt> hmm

[09:16] <brrt> the jit logging needs to be cleaned up anyway

[09:16] <samcv> interesting here https://cry.nu/coverage/roast/coverage/home/samantha/git/MoarVM/src/jit/compile.h.html

[09:16] <samcv> see how it shows the number of uses of that one define

[09:17] <samcv> and the other one has no uses. and i used a grep and it is actually used never

[09:19] <samcv> found (refound?) some functions in normalize.c that used to be used to determine regional codepoints and spacing marks but no longer are needed. so prolly gonna remove the spacing mark one. since it doesn't have much use. and the code inside it is sub-optimial

[09:21] <samcv> err that's in anotherfile. but regardless. heh. found some code in normalize.c that i thought never would get executed/never understood why it was there. and turns out it doesn't execute lol

[09:21] <samcv> or maybe it is needed, idk. just i guess we've never used the function in that situation

[09:34] <timotimo> at first i thought "roast line based per file" meant you had one whole coverage report for every roastfile

[09:41] <timotimo> that'd be a firehose of information; i'd expect we'd have to bucket it for it to make sense

[09:41] <timotimo> like, roast file 01-foo/bar.t covers 10 files at 0%, 7 files at up to 10%, 9 files at up to 20%, ...

[09:42] <samcv> i do timotimo

[09:42] <samcv> but it's not online

[09:42] <timotimo> oh

[09:42] <samcv> i can make it if you want XD

[09:42] <timotimo> is it many gigabytes big? :)

[09:42] <samcv> idk

[09:42] <timotimo> i'm not sure if it'd actually be helpful

[09:43] <samcv> when roast runs it generates them in a directory format similar to roast itself

[09:43] *** dalek joined
[09:43] <samcv> but they are in coverage/t/spec/S05-blah/mything.t.covraw (or whatever the extension is i forget)

[09:43] <samcv> then i merge all of them together in the t/spec folder (so i only get profiles for roast files)

[09:44] <samcv> it takes the 1st command line argument passed to perl6-m so i have lots of weirdly named ones not in any folder

[09:44] <samcv> --help.profraw -IGNOREME.profraw lol

[09:44] <timotimo> ugh :)

[09:45] <samcv> but all the roast ones are nicely in folders exactly how they are in roast

[09:45] <samcv> just ignore the files in ./coverage and only check t/'s files and it's fine

[09:45] <samcv> ThisDoesNotExistAtAll.p6.profraw

[09:45] <samcv> lol.

[09:46] <samcv> i guess that should maybe be included? but that will require some deciding how to do it

[09:46] <samcv> not sure

[09:47] <samcv> well they're 535MB

[09:47] <samcv> the profile files for all the roast tests XD

[09:47] <samcv> they are 416K when processed though

[09:48] <samcv> same as they are always. since it doesn't need much more space to record it running some section of code 100000 times compared to 1 time

[09:48] <timotimo> yeah, i don't think it'd make too much sense to upload the raw ones

[09:48] <samcv> since it's all dependent on the size of MVM's codebase

[09:48] <samcv> yeah, obv

[09:48] <timotimo> right

[09:48] <samcv> but i may eventually allow you to check coverage of specific roast files.

[09:48] <samcv> i mean why not right. go all out

[09:48] <timotimo> these reports should compress really well when you put the same files next to each other in a compressed archive

[09:51] <samcv> gonna try compressing the raw reports :P

[09:51] <samcv> by default it's default.profraw, and file gets replaced each time it's run. i'm not sure if that actually gets added to the old one or not. but it's better to be able to seperate out the test files

[09:52] <samcv> and only merge the ones you know are actually tests, and not like, compiling the compiler

[09:52] <timotimo> do you think it'd be worth trying to have clang on windows? like, we already have that on travis

[09:52] <timotimo> but what we could try is mingw? but i think it's known to not work, at least for the rest of rakudo?

[09:52] <samcv> idk how much effort is it. it must be a normal thing for appveyor? maybe has a tutorial on it?

[09:53] <samcv> well the 500MB raw files compressed to 22MB with XZ compression

[09:53] <samcv> not bad. and showed off my cpu :)

[09:53] <samcv> since xz can be threaded which is neat

[09:54] <timotimo> oh, neat indeed

[09:54] <samcv> we def need better coverage of NativeCall

[09:54] <samcv> hopefully we can use this info to add more tests

[09:55] <samcv> also not sure diff between cover and executed https://cry.nu/coverage/roast.html

[09:56] <samcv> but i think must have to do with possibilities maybe? compared to just line by line

[09:56] <timotimo> perhaps it's how many functions out of this file were ever entered?

[09:56] <samcv> because some lines can execute different ways?

[09:56] <samcv> nah

[09:56] <samcv> could be the regions?

[09:56] <timotimo> that'd be path coverage, then

[09:56] <samcv> instead of lines?

[09:56] <samcv> yeah that's what i *think* it is

[09:56] <timotimo> you mean if one line has multiple coverable pieces?

[09:56] <samcv> yep

[09:56] <timotimo> like if (foo) { puts("lol") } else { puts("nope") }?

[09:56] <timotimo> that'd be three individual pieces

[09:57] <samcv> sure why not lol

[09:57] <samcv> may be easier to see here on nqp tests: https://cry.nu/coverage/report-libmoar.html

[09:57] <samcv> since it shows cover vs live coverage

[09:58] <samcv> for functions

[10:03] <timotimo> i'd dig it if we could highlight the path parts after MoarVM/src/

[10:06] <samcv> yeah

[10:06] <timotimo> should be easy with sed, but there doesn't seem to be an ansi class for like a bright white

[10:06] <samcv> been thinking about building in in /tmp just so it has a shorter path

[10:06] <samcv> it's called bold

[10:06] <timotimo> oh, ok

[10:06] <samcv> ;)

[10:08] <samcv> anyway lovely people it's about my bedtime

[10:08] <samcv> i think i figured out how to fix this page https://cry.nu/coverage/report-moar.html

[10:09] <timotimo> why not just throw out the coverage report for the moar binary?

[10:09] <samcv> to not be a graveyard of files not in that file. and also make sure i don't miss .h files with code in them. will just process with head/tail and cut the output from the file based coverage report and pass it in

[10:09] <samcv> why should we

[10:09] <samcv> i'll probably appand it to the end of the other one

[10:10] <samcv> but in case there later become more files that are used in that binary it could be useful

[10:10] <samcv> or maybe there's a way to combine libmoar and moar.... but idk

[10:10] <jnthn> samcv++ # just glancing the coverage reports, looks pretty great :)

[10:10] <samcv> thanks :)

[10:11] <timotimo> OK

[10:11] *** zakharyas joined
[10:22] *** debugsectable6 joined
[10:26] *** debugsectable6 joined
[10:35] <samcv> ok updated nqp tests. kinda weird its coverage for .h files

[10:35] <samcv> https://cry.nu/coverage/

[10:35] <samcv> err ops. my caching is like. too much caching i think? cause i refresh and i don't see a change

[10:35] <samcv> but it is there if i clear cache

[10:37] <samcv> timotimo, https://cry.nu/coverage/coverage/home/samantha/git/MoarVM/src/6model/reprs/MVMNull.h.html

[10:37] <samcv> interesting

[10:38] <samcv> the inlined stuff shows up by file as well as over the entire everything

[10:40] <timotimo> oooh that's kinda cool

[10:43] <samcv> looks like i don't think i have any cache settings in the headers. maybe chrome being weird

[10:44] <samcv> setting expiry at 30 minutes for that folder anyway though

[10:47] <samcv> night all!

[10:48] <samcv> damn you chrome. just stubbornly not reloading the page when i hit refresh :(

[10:48] <samcv> oh well. should be at least better than before. maybe should set cache age lower. since idc about bandwidth

[10:49] <samcv> well it's at 1m now

[12:19] *** lizmat joined
[15:12] *** zakharyas joined
[15:20] *** zakharyas joined
[15:42] *** SourceBaby joined
[16:08] *** spebern joined
[16:11] *** AlexDaniel joined
[17:02] *** jpg51 joined
[19:16] <samcv> gonna try out clang/llvm svn just in case llvm-cov has any new awesome changes

[19:19] *** lizmat joined
[19:37] *** agentzh joined
[19:40] <timotimo> mhm

[19:40] <timotimo> btw: ohai

[19:40] <lizmat> o/

[19:40] <timotimo> i'm writing a new string parser for json_fast

[19:44] <samcv> hello timotimo

[19:45] <samcv> again?

[19:45] <samcv> gonna be every more faster better?

[19:45] <timotimo> hopefully it'll not explode in its memory usage

[19:48] <timotimo> wow.

[19:52] <timotimo> it's "a bit" faster and uses "a bit" less memory

[19:52] <timotimo> but gives equal results

[19:53] <timotimo> huh, but things break a little

[19:53] <timotimo> why is there an escape sequence for / ?

[19:57] <samcv> uhm

[19:57] <samcv> you can escape any character though right?

[19:59] <timotimo> nope

[20:00] <samcv> that's what the rfc says tho

[20:00] <samcv> " Any character may be escaped"

[20:02] <timotimo> huh?

[20:02] <timotimo> json.org says no, but what is that based on again?

[20:03] <timotimo> that's the ecma standard

[20:04] <timotimo> "\h\e\l\l\o"

[20:04] <timotimo> SyntaxError: Unexpected token h in JSON at position 2

[20:04] <samcv> i was looking at https://tools.ietf.org/html/rfc7159

[20:04] <timotimo> that's one parser

[20:04] <samcv> if you escape every character i will hate you

[20:04] <samcv> but. i think it's valid

[20:05] <timotimo> no, i disagree

[20:05] <samcv> kk. well defer to your better knowledge

[20:05] <timotimo> it says any character may be escaped with a six-letter sequence

[20:05] <timotimo> which is the \uAFFE ones

[20:05] <timotimo> "additionally there are a few two-character escape codes"

[20:05] <timotimo> you were giving me a little bit of a shock there

[20:05] <samcv> also asked this in perl6dev but best way to find out which argument to perl6 executable is the filename?

[20:05] <timotimo> anyway

[20:05] <samcv> is it almost always the last one?

[20:06] <timotimo> wanna guess how much better JSON::Fast is now?

[20:06] <timotimo> here's the baseline:

[20:06] <samcv> but it's not always the last one.

[20:06] <samcv> i'm trying to do coverage for roast

[20:06] <timotimo> 12.58user 0.29system 0:13.04elapsed 98%CPU (0avgtext+0avgdata 991276maxresident)k

[20:06] <timotimo> ^- that's with parsing and then rendering

[20:07] <samcv> compared to what?

[20:07] <timotimo> 12.34user 0.27system 0:12.67elapsed 99%CPU (0avgtext+0avgdata 982916maxresident)k

[20:07] <timotimo> without rendering

[20:07] <timotimo> that's the baseline i'm comparing to

[20:07] <timotimo> i.e. what it was on current master

[20:07] <samcv> yay so less. and maybe less ram?

[20:07] <timotimo> um, no

[20:08] <timotimo> it's bad :P

[20:08] <timotimo> but, but, but

[20:08] <timotimo> wanna guess how good it is now?

[20:08] <samcv> uh

[20:08] <samcv> nope. go ahead ;)

[20:08] <timotimo> 0.31user 0.01system 0:00.33elapsed 98%CPU (0avgtext+0avgdata 87228maxresident)k

[20:08] <samcv> i don't believe you

[20:08] <samcv> fully

[20:08] <timotimo> i didn't believe me, too

[20:10] <timotimo> i just pushed it, feel free to play around with it

[20:10] <timotimo> oh crap

[20:10] <timotimo> what did i do wrong

[20:11] <timotimo> huh, zef says it fails a whole bunch of tests

[20:11] <timotimo> but when i run stuff manually it's fine?

[20:11] <timotimo> and prove also says "all tests successful"

[20:13] <timotimo> wtf, zef, what am i doing wrong?

[20:34] *** agentzh joined
[20:37] <samcv> try uninstalling it first

[20:37] <samcv> to make sure it's not running the old version

[20:37] <samcv> that's installed

[20:38] <samcv> ahhhh llvm failed a test at the very end of compling everyyyything

[20:39] <samcv> hopefully i can salvage the build

[21:03] *** agentzh joined
[21:12] <timotimo> :o

[21:28] *** agentzh joined
[21:44] *** agentzh joined
[21:56] *** agentzh joined
[22:04] *** agentzh joined
[22:14] *** agentzh joined
[22:27] *** agentzh joined
[23:08] *** agentzh joined
[23:24] *** lizmat joined
