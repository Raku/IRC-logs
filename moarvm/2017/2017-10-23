[00:42] *** leedo joined
[01:38] *** TimToady joined
[01:56] *** ilbot3 joined
[05:06] *** brrt joined
[05:08] <brrt> so, adding a 'discard' node prior to the write barrier works

[05:08] <yoleaux> 22 Oct 2017 23:27Z <samcv> brrt: can you add what you would like to the changelog for the expression engine? You'd be the best one to know what should be added to the changelog

[05:09] <brrt> .ask samcv where should i write it? in the repo?

[05:09] <yoleaux> brrt: I'll pass your message to samcv.

[05:12] <brrt> oh, you just edit docs/Changelog

[05:12] <brrt> i will

[05:24] <AlexDaniel`> brrt++

[05:26] <Geth> ¬¶ MoarVM/jit-expr-optimizer: 4 commits pushed by (Bart Wiegmans)++

[05:26] <Geth> ¬¶ MoarVM/jit-expr-optimizer: 56dc3d981e | Add expression tree equivalence function

[05:26] <Geth> ¬¶ MoarVM/jit-expr-optimizer: 544719d686 | [JIT] Simple tree-rewriting optimizer

[05:26] <Geth> ¬¶ MoarVM/jit-expr-optimizer: f3031011f2 | [JIT] Add adhoc template application

[05:26] <Geth> ¬¶ MoarVM/jit-expr-optimizer: 54259d3d37 | [JIT] Optimize multiple loads to a COPY

[05:26] <Geth> ¬¶ MoarVM/jit-expr-optimizer: review: https://github.com/MoarVM/MoarVM/compare/f1d6abf0f6...54259d3d37

[05:27] <brrt> only the last two commits are unique, rest is a rebase

[05:30] <brrt> the tl;dr, we can optimize multiple loads to a copy, and this does seem to lead to less memory traffic

[05:45] *** evalable6 joined
[05:48] <Geth> ¬¶ MoarVM: 1525165e41 | (Bart Wiegmans)++ | docs/ChangeLog

[05:48] <Geth> ¬¶ MoarVM: Rearrange changelog entries for expression JIT

[05:48] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1525165e41

[06:17] *** brrt joined
[06:31] <brrt> adhoc templates is one of those things that i should've done much sooner

[06:48] <nine> brrt: I should have read Practical Lessons in Leadership 10 years ago. Try to beat that ;)

[06:48] <brrt> what kind of book is that

[06:49] <brrt> ‚Ä¶ by art petty and rich petro

[06:49] <brrt> those names though

[06:50] <brrt> also, good morning

[06:51] <nine> It's...exactly what the title says. It's all those things that would have been so useful when I first became a team leader. Anyway, they are still useful now :)

[06:51] <nine> And yes, good morning!

[06:51] <AlexDaniel`> .oO( it's not a name if it's ‚â§10 characters! )

[06:53] <nine> AlexDaniel`: http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/ ;)

[06:57] <AlexDaniel`> there was another similarly good one: http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time

[06:58] <AlexDaniel`> although some of its falsehoods border with total stupidity

[06:58] <AlexDaniel`> like, I really wonder if there are any programmers who don't know about february‚Ä¶ hmm

[07:02] *** domidumont joined
[07:08] *** domidumont joined
[07:29] <brrt> i think that's not about not knowing about it, it's about assuming the issue isn't very problematic

[07:29] <brrt> eh

[07:29] <brrt> the difference doesn't matter, i mean

[07:31] *** rba joined
[07:46] *** committable6 joined
[07:48] *** committable6 joined
[07:49] *** zakharyas joined
[08:06] *** rba joined
[08:14] *** domidumont joined
[08:18] *** zakharyas joined
[08:41] *** rba joined
[09:11] *** domidumont joined
[09:12] *** brrt joined
[10:25] *** greppable6 joined
[10:32] <samcv> brrt, yeah in the repo. thanks!

[10:32] <brrt> :-)

[10:43] * samcv heads back to bed

[10:49] <brrt> sleep well

[10:52] <timotimo> hum.

[11:59] <Geth> ¬¶ MoarVM: 5d2ee22e66 | (Timo Paulssen)++ | src/instrument/crossthreadwrite.c

[11:59] <Geth> ¬¶ MoarVM: don't memcmp where it should strncmp in crossthreadwritelog

[11:59] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5d2ee22e66

[12:06] <lizmat> MoarVM panic: Heap corruption detected: pointer 0x10ea11e50 to past fromspace  # whee!

[12:16] <lizmat> MoarVM panic: Internal error: zeroed target thread ID in work pass

[12:18] <lizmat> MoarVM panic: Heap corruption detected: pointer 0x1032e80a8 to past fromspace

[12:18] <lizmat> just posting results of runs

[12:19] <brrt> hmmm. results of what?

[12:19] <brrt> *runs of what

[12:19] <lizmat> https://github.com/rakudo/rakudo/issues/1202

[12:25] <lizmat> Segmentation fault: 11

[12:32] *** brrt joined
[12:37] <timotimo> is that with the crossthreadwrite log enabled? it might be explosive still

[12:37] <timotimo> (and if you don't MVM_SPESH_BLOCKING it, it's even more explosive)

[12:37] <lizmat> no, this is just running on HEAD

[12:38] <timotimo> urgh

[12:42] *** zakharyas joined
[12:43] *** zakharyas joined
[12:57] *** unicodable6 joined
[13:10] *** brrt joined
[13:32] *** brrt joined
[14:00] *** Zoffix joined
[14:01] *** Zoffix left
[14:01] *** Zoffix joined
[14:06] *** brrt joined
[14:15] *** ggoebel joined
[14:19] *** patrickz joined
[14:33] *** rba_ joined
[14:47] <lizmat> the code of https://github.com/rakudo/rakudo/issues/1202 now usually crashes in MoarVM space (and a lot less than before)

[14:48] <lizmat> it now typicall always is: MoarVM panic: Heap corruption detected: pointer 0x1105d27d0 to past fromspace

[15:07] *** brrt joined
[15:18] <AlexDaniel`> fwiw I tested it here also and sometimes it also hangs

[15:19] <AlexDaniel`> in fact, most of the time it hangs

[15:20] <lizmat> I've just had a hang in S07-hyperrace/race.t, test 29

[15:20] <AlexDaniel`> hmm

[15:20] <lizmat> I ran a sample of the process: https://gist.github.com/lizmat/d22cfb0c67f9866df3f5fe3b7187c15e

[15:20] <lizmat> hope this is of help to somehow with moar gut internals knowledge

[16:00] *** brrt1 joined
[16:02] <AlexDaniel`> fwiw changelog things: ‚Äúseakable‚Äù ‚Üí ‚Äúseekable‚Äù and some lines have tabs

[16:03] <timotimo> we should be able to tease out the exact location where things go wrong by lowering nursery size and crossing fingers

[16:04] *** domidumont joined
[16:20] *** brrt joined
[16:21] *** dogbert17 joined
[16:35] <lizmat> timotimo: see my thoughts on that on #perl6-dev just now

[16:35] <timotimo> does .elems sometimes cause autovivification?

[16:36] <moritz> it shouldn't

[16:36] <moritz> only writing accesses should autovivify

[16:36] <timotimo> i mean for internally-used attributes, not for the list's storage

[16:38] <Zoffix> It can cause reification

[16:38] <lizmat> the thing is that .elems may cause changes in attributes of a List

[16:38] <Zoffix> m: my @l := List.from-iterator: (gather { say "meow"; take 1; }).iterator; say "starting"; @l.elems.say; say "done"

[16:38] <camelia> rakudo-moar 50324bb00: OUTPUT: ¬´starting‚ê§meow‚ê§1‚ê§done‚ê§¬ª

[16:38] <timotimo> Zoffix: at least in the context of the ThreadPoolScheduler i don't think the lists actually have iterators involved in 'em?

[16:38] <lizmat> because .elems may reify

[16:39] <Zoffix> Ah. No idea :)

[16:39] <lizmat> it's not about iterators

[16:39] <lizmat> it's about .elems calling reify-until-lazy

[16:39] <lizmat> and if fully reified, resetting $!todo

[16:44] *** ggoebel joined
[16:50] *** rba joined
[16:50] *** zakharyas joined
[17:08] *** zakharyas joined
[18:53] <Geth> ¬¶ MoarVM: 6e59a07653 | (Samantha McVey)++ | docs/ChangeLog

[18:53] <Geth> ¬¶ MoarVM: Add further entries to ChangeLog

[18:53] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6e59a07653

[19:55] <lizmat> .tell jnthn I wonder whether the difference between .hyper and .race is really whether results are buffered or not

[19:55] <yoleaux> lizmat: I'll pass your message to jnthn.

[19:55] <lizmat> .tell jnthn I could see .race internally working as a Supply, emitting values from several threads as they become available

[19:55] <yoleaux> lizmat: I'll pass your message to jnthn.

[19:57] <lizmat> .tell jnthn instead of .pushing to an IterationBuffer until the end of the batch

[19:57] <yoleaux> lizmat: I'll pass your message to jnthn.

[20:08] <timotimo> lizmat: performance is much better if you submit big batches of data compared to individual pushes (for example to a supply)

[20:09] <lizmat> timotimo: yeah, but if you have a serializer at the end of the chain that does post-processing, you would like the values to appear gradually, rather than in blocks

[20:09] <lizmat> perhaps, not always I guess

[20:11] <timotimo> samcv: i think the "left-over calloc in NFA" is a fix to a feature that's also new in this version; an oversight that was more or less quickly fixed?

[20:11] <samcv> ah ok i can remove it then

[20:11] <timotimo> in fact, it's the commit right before it: 054ad4e and the original work in 3059ba2829

[20:12] <samcv> thanks

[20:12] <timotimo> using FSA in the NFA might be noteworthy, but probably not

[20:12] <timotimo> starting to use FSA in the VMArray impl will have a much bigger impact, for example

[20:12] <timotimo> thanks for doing the release work :)

[21:11] <cognominal> m: say $/.^name

[21:11] <camelia> rakudo-moar e4a5bb17c: OUTPUT: ¬´Nil‚ê§¬ª

[21:12] <cognominal> m:'a' ~~ /a/ say $/.^name; say $/.^role

[21:13] <evalable6> cognominal, rakudo-moar e4a5bb17c: OUTPUT: ¬´(exit code 1) ===SORRY!=== Error while compiling /tmp/cNH0Xg9Mx1‚ê§Two ter‚Ä¶¬ª

[21:13] <evalable6> cognominal, Full output: https://gist.github.com/d7c4524130f2d246ea6dbbeff546f314

[21:13] <cognominal> m:'a' ~~ /a/; say $/.^name; say $/.^role

[21:13] <evalable6> cognominal, rakudo-moar e4a5bb17c: OUTPUT: ¬´(exit code 1) Match‚ê§No such method 'role' for invocant of type 'Perl6::Metamodel::ClassHOW'. Did you mean any of these?‚ê§    none‚ê§    note‚ê§    one‚ê§    roles‚ê§‚ê§  in block <unit> at /tmp/UlHPkcm3Zc line 1‚ê§¬ª

[21:13] <cognominal> m:'a' ~~ /a/; say $/.^name;

[21:13] <evalable6> cognominal, rakudo-moar e4a5bb17c: OUTPUT: ¬´Match¬ª

[21:13] <cognominal> m:'a' ~~ /a/; say $/.^roles;

[21:13] <evalable6> cognominal, rakudo-moar e4a5bb17c: OUTPUT: ¬´(exit code 1) Unexpected named argument 'transitive' passed‚ê§  in block <unit> at /tmp/ZXYhBGq0yJ line 1‚ê§¬ª

[21:14] <cognominal> m:'a' ~~ /a/; say $/.^roles;

[21:14] <evalable6> cognominal, rakudo-moar e4a5bb17c: OUTPUT: ¬´(exit code 1) Unexpected named argument 'transitive' passed‚ê§  in block <unit> at /tmp/vJi3P3aNh7 line 1‚ê§¬ª

[21:16] <cognominal> m: say $/.^roles;

[21:16] <camelia> rakudo-moar e4a5bb17c: OUTPUT: ¬´()‚ê§¬ª

[21:16] <cognominal> m:'a' ~~ /a/; say $/.^roles;

[21:16] <evalable6> cognominal, rakudo-moar e4a5bb17c: OUTPUT: ¬´(exit code 1) Unexpected named argument 'transitive' passed‚ê§  in block <unit> at /tmp/3z9nwNPSjz line 1‚ê§¬ª

[21:38] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/10/23/2017-43-hyper-lands-racing/

[21:54] *** evalable6 joined
[22:59] *** Voldenet joined
