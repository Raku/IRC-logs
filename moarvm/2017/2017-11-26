[00:10] *** nwc10 joined
[01:00] *** lizmat joined
[01:22] *** bloatable6 joined
[02:01] *** lizmat joined
[02:57] *** ilbot3 joined
[03:03] *** lizmat joined
[04:06] *** lizmat joined
[04:34] *** lizmat joined
[06:26] *** lizmat joined
[06:44] *** zakharyas joined
[07:41] *** lizmat joined
[07:45] *** zakharyas joined
[08:18] *** lizmat joined
[08:38] *** domidumont joined
[08:43] *** domidumont joined
[09:33] *** zakharyas joined
[09:45] *** lizmat joined
[09:50] *** nativecallable6 joined
[10:46] *** geospeck joined
[11:13] *** robertle joined
[12:32] *** brrt joined
[13:21] *** domidumont joined
[14:02] *** brrt joined
[14:20] *** markmont joined
[14:20] *** lizmat joined
[14:41] *** leedo joined
[14:41] *** lizmat joined
[14:49] *** markmont joined
[14:57] *** brrt joined
[14:59] *** geospeck joined
[15:04] *** brrt1 joined
[15:12] *** dogbert17 joined
[15:44] *** lizmat joined
[16:13] *** domidumont joined
[16:20] *** krunen joined
[16:22] *** yoleaux joined
[16:22] *** tangible6 joined
[16:42] <Geth> Â¦ MoarVM: e87a74130b | (Stefan Seifert)++ | src/core/nativecall.c

[16:42] <Geth> Â¦ MoarVM: Remove some duplicated code

[16:42] <Geth> Â¦ MoarVM:

[16:42] <Geth> Â¦ MoarVM: This is already done in lines 461 and 463 (before processing argument

[16:42] <Geth> Â¦ MoarVM: processing nodes).

[16:42] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e87a74130b

[16:50] *** releasable6 joined
[16:50] *** unicodable6 joined
[16:50] *** statisfiable6 joined
[17:11] <dogbert17> nine: are you a nativecall expert?

[17:38] <japhb> dogbert17: He constantly claims that he is not, yet he's responsible for both Inline::Perl5 and Inline::Python.  :-)

[17:39] <japhb> Plus of course nativecall JIT optimizations

[17:41] <dogbert17> japhb: I'm wondering about this line, https://github.com/MoarVM/MoarVM/blob/master/src/core/nativecall_dyncall.c#L19

[17:41] <dogbert17> it must be incorrect as a check for 'stdcall' is made on line 13

[17:43] <dogbert17> or, it's correct and line 13 is fishy

[18:02] <japhb> Yep, one of those is wrong, I agree.

[18:04] <japhb> "vectorcall" for the x64 one, maybe?  (Not a windows programmer, just noticed it in the wikipedia article for stdcall)

[18:40] <nine> dogbert17: well that's certainly unreachable code

[18:42] *** markmont joined
[18:55] <nine> Wikipedia tells me that on x86-64 there's only one calling convention in Windows (and UEFI) and one for everything else

[18:56] <dogbert17> nine: do you think the test, on line 19, should be removed?

[19:04] <timotimo> what happened to all the other calling conventions windows has?

[19:07] <nine> Looks to me like this should be more correct: https://gist.github.com/niner/9cf08c0f83a02bc6860c1313ab383ef0

[19:08] <nine> Except for the missing #endif of course

[19:08] <nine> I do have the suspicion however that dyncall ignores the dcMode on x86_64 anyway. It's documentation already says that it will ignore invalid platform/mode combinations.

[19:10] <nine> Also #ifdef __x86_64__ is probably not the proper cross-platform way to check for that architecture

[19:22] <dogbert17> is there a proper cross-palform way?

[19:22] <dogbert17> *platform

[19:25] <nine> Updated the gist with a probably more correct version

[19:25] <nine> Compiles and runs just fine on x86_64 Linux.

[19:25] <nine> But then, so did the previous code :)

[19:26] <dogbert17> sounds promising :)

[19:27] <nine> dogbert17: do you actually see a problem with this code or did you just come across it and noticed the oddity?

[20:33] *** lizmat joined
[21:02] <samcv> i think i may attempt to add proper integer property values to ucd2c.pl because right now it doesn't store it as an enum it just stores it using the full number of bits

[21:32] *** harrow joined
[21:38] *** harrow joined
[21:57] *** AlexDaniel joined
[22:08] <dogbert17> nine: sorry for the late reply, was out eating. I saw no problem but cppcheck did :) On the other hand, there might possibly be a problem but obviously not on Linux, which is what I have.

[22:50] *** Ven joined
