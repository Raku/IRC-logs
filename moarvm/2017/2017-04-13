[01:48] *** ilbot3 joined
[02:53] *** geekosaur joined
[04:53] *** spebern joined
[05:29] *** spebern joined
[05:33] *** brrt joined
[05:34] <brrt> good * #moarvm

[05:34] <samcv> good *

[05:40] <samcv> argh such horrible hacks

[05:40] <samcv> getting my bash script that changes the command line args for perl6 script. converting it to posix shell

[05:40] <samcv> which deosn't have arrays (well other than $@)

[05:41] <samcv> i got it to work though... this is so hacky

[05:41] <geekosaur> wroite it in perl 5 :)

[05:42] <samcv> it saves $@ into a string by using sed

[05:42] <samcv> that might be nicer

[05:42] <samcv> i finally got the posix shell one working though

[05:42] <samcv> but i don't really want the appimage to require perl. i don't think it should have dependencies

[05:42] <samcv> wow. it's actually not going insane

[05:44] <brrt> hmm

[05:44] <brrt> i still think we should have native 'bundling' capability

[05:45] <samcv> native bundling?

[05:45] <samcv> also i think we should have inline::perl5 but shouldn't require perl 5 just to start perl 6

[05:45] <samcv> want to make people want to try perl 6

[05:46] <samcv> this makes me sad https://github.com/samcv/rakudo-appimage/blob/master/perl6-testing#L9

[05:46] <samcv> a little bit inside

[05:47] *** domidumont joined
[05:47] <samcv> finally works with dash. guess dash linked at sh got overwritten on an update and thought i was using it to start out. and then actually used dash and it threw up

[05:47] <samcv> but now it is depressing but functional

[05:47] <brrt> yeah, the ability to compile rakudo into moarvm; and prefereably, rakudo plus libraries plus applications, into moarvm

[05:48] <brrt> that is a bitâ€¦ said yes

[05:48] <brrt> *sad

[05:48] <samcv> somehow only $@ gets to be an array

[05:53] *** domidumont joined
[05:54] <samcv> on bash the new script is 30% slower. but it's 30% faster running the new one with dash

[05:54] <samcv> but it does make me very sad.

[05:55] <samcv> just should add a way to chdir as soon as it starts up. so i don't need any hackery

[06:00] <brrt> oh, that's why you're changing the array

[06:00] <brrt> that explains

[06:01] <brrt> right, so this was a silly bug

[06:01] <brrt> rather than: MVMJItTileLIst *list = tiler->list;

[06:01] <brrt> i had

[06:01] <brrt> MVMJitTileList *list = list;

[06:01] <brrt> while

[06:01] <brrt> list was not defined? that's weird

[06:09] <brrt> so list was defined, but i'm not sure as waht

[06:10] <samcv> hm

[06:16] <brrt> weird stuff

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: 112d5df206 | (Bart Wiegmans)++ | src/jit/tile.c

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: Replace MVM_oops and if with an ASSERT macro

[06:26] <Geth> Â¦ MoarVM/even-moar-jit:

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: Comparable to the use in linear_scan.c, which hides it behind a

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: debugging flag, because they are debugging aids and need not slow down

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: the normal running of the program. I think it's cleaner, too.

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/112d5df206

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: 9ef1a4cf48 | (Bart Wiegmans)++ | 3 files

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: Start splitting basic blocks

[06:26] <Geth> Â¦ MoarVM/even-moar-jit:

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: We'll need to patch up successors, but I think that's best handled in

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: a post-order step, since (especially for ANY and ALL) the block

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: associated to the label is only known after the entire conditional

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: construct has been tiled.

[06:26] <Geth> Â¦ MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/9ef1a4cf48

[06:28] *** domidumont joined
[06:42] *** brrt joined
[06:44] <brrt> i'm wondering if the current â€”asan configuration does work for anybody on os x. it certainly doesn't work for me

[06:44] <brrt> i can fix it but...

[06:44] <brrt> it's historically been weird

[06:45] <brrt> i'm wondering if we can get the clang version

[06:51] <brrt> and if it somehow depends on that

[07:08] <samcv> brrt, does our asan use gcc only atm?

[07:45] <brrt> hmm, no

[07:47] <brrt> no, asan is kind of a weird pseudolibrary thing

[08:33] <samcv> that's what i thought.

[08:33] <samcv> does clang have a similar thing though?

[08:33] <samcv> i'm getting tired of appimages. i think i'm going to try working on coverage reports for mvm done by travis

[08:34] <samcv> and writing bash is making me sad

[08:34] <samcv> bash/sh

[08:35] <nwc10> you can write Perl 5 for Travis instead?

[08:35] <samcv> I probably should

[08:37] <samcv> nwc10, do you know of a module that will echo every perl 5 line while it runs

[08:37] <samcv> .o(or i could write it in perl 6 and have travis DL an appimage)

[08:37] <samcv> hehehehe

[08:37] <samcv> the future is now!

[08:51] <brrt> clang does have address sanitizer, yes

[08:51] <brrt> i'm not sure how the integration works at all

[08:51] <brrt> but the point is

[08:51] <brrt> in some systems, you have to add the flag '-lasan' to 'link' agains ASAN

[08:51] <brrt> in some systems, you have to add '-faddress-sanitizer

[08:52] <brrt> in some systems, you have to add '-fsanitize=address' - i think that's the latest convention

[08:52] <brrt> so it's kind of difficult to make it work for everybody

[08:52] <brrt> fwiw, in an ideal world, a Configure.pl script would *only* figure out LDLIBS, LDFLAGS, CFLAGS etc.

[08:53] <brrt> and all the rest of details could be macro-defined

[08:53] <nwc10> samcv: er no I don't. The regular (ugly) debugger *might* be able to do it

[08:53] <nwc10> I think that the debugger hooks provide enough er, hooks, that someone might have written it on CPAN

[08:54] <nwc10> well d'oh, yes I do: https://metacpan.org/release/Devel-Trace

[09:02] <samcv> somebody who has access to this page https://github.com/MoarVM/MoarVM/settings/keys wil have to help me out

[09:02] <samcv> after i generate a git key for travis they will need to add the pubkey to it

[09:17] <timotimo> right, that's only jnthn i believe

[09:18] <timotimo> samcv: have you considered joining the original pieces of $@ with \0 and splitting on \0 afterwards?

[09:19] <timotimo> i know a bunch of utilities work like that; xargs and find for example?

[09:19] <timotimo> er, rather: they can work like that

[09:19] <samcv> i guess that coldu work

[09:19] <samcv> i really want to figure out where i can put a chdir in perl6 and have it not explode

[09:19] <samcv> i tried a few places and it just was not having it

[09:20] <samcv> well. i didn't try that hard, cause it was hard to find where to put it

[09:21] <timotimo> it most probably has to happen before perl6

[09:21] <timotimo> there is no real chdir in moarvm, it's all emulated by passing paths to all manner of ops

[09:21] <timotimo> so all you have to do is have a $*CWD that you set to the correct value

[09:22] <samcv> hm

[09:22] <timotimo> but it's probably a bit more involved than just that?

[09:22] <samcv> well

[09:22] <samcv> all i need is for it to start out it  a different directory

[09:22] <samcv> so i guess find the code that sets it to whatever path

[09:22] <samcv> cause perl 6 needs to be at its own path, i guess it makes sense if perl 6 doesn't have chdir really

[09:23] <samcv> with how it can't be started in another directory because it doesn't really know

[09:23] <samcv> but starting it inside appimage directory is fine. as long as it uses a different directory as $*CWD

[09:24] <samcv> and using -M with normal perl6 can achieve a chdir. but tthe -M loading a module *before* the script is broken with relative paths

[09:25] <samcv> that's the only thing that's actually broken so far that i've found. that wasn't a side effect of the appimage itself

[10:05] <nine> samcv: since perl6 is a shell script, why not do the cd there?

[10:11] *** dogbert17 joined
[11:15] *** brrt joined
[11:32] *** brrt joined
[12:38] <dogbert17> o/ any debug info experts around? Have a stupid question.

[12:39] <brrt> not sure if i can really help, but ask away

[12:40] <dogbert17> what have I donw wrong if I can't see any source refs in the top frames: https://gist.github.com/dogbert17/7b75552c3ab1ef47b73987d55c67285b

[12:41] <dogbert17> before building MoarVM I did 'perl Configure.pl  --debug=3 --no-optimize --prefix=/home/dogbert/repos/rakudo/install/'

[12:42] * dogbert17 hopes that brrt has the solution

[12:43] <timotimo> i wonder if that has to do with the jit?

[12:43] <dogbert17> am on 32 bit

[12:43] <timotimo> or maybe it's just dyncall not playing nice with gdb and such

[12:44] <dogbert17> There is still one nativecall test, i.e. t/04-nativecall/08-callbacks.t which makes valgrind crazy on 32 bit

[12:44] <timotimo> ah, hmm.

[12:45] <dogbert17> does it complain for you?

[12:46] <timotimo> i don't have 32bit

[12:46] <dogbert17> on 64 bit then :)  './perl6-valgrind-m t/04-nativecall/08-callbacks.t'

[12:49] <brrt> no, it's dyncall in all probablity

[12:49] <brrt> not sure why that doesn't do what you mean

[12:50] <brrt> it looks like a jit, because that's what dyncall does :-)

[12:52] <dogbert17> brrt, timotimo: I have updated the gist, any theories as to where I should look in order to find the problem?

[12:52] <timotimo> don't get much output from that file

[12:53] <timotimo> er

[12:53] <timotimo> it apparently tries to jump to 0x0?

[12:53] <dogbert17> that sounds suspicious :)

[12:54] <timotimo> i could imagine that valgrind and dyncall don't play terribly well together?

[12:54] <timotimo> maybe it crashed because i recompiled at the same time

[12:54] <brrt> o.O

[12:54] <timotimo> recompiled moarvm

[12:54] <dogbert17> could that mean that there is no problem whatsoever or are you referring to its inability to point out the src

[12:55] <timotimo> running it a second time was fine

[12:55] <brrt> are we sure the tests it tries to compile are correct C

[12:55] <brrt> is my basic question

[12:56] <dogbert17> brrt: do you mean https://gist.github.com/dogbert17/c1c44e170319d993ad50c71802173f57

[12:56] <timotimo> i haven't checked :)

[12:57] *** AlexDaniel joined
[12:57] <brrt> yes, that C

[13:18] <Geth> Â¦ MoarVM/telemeh_try: 532ee16f31 | (Timo Paulssen)++ | 17 files

[13:18] <Geth> Â¦ MoarVM/telemeh_try: introduce "telemeh", a high-precision-time low-impact logger

[13:18] <Geth> Â¦ MoarVM/telemeh_try:

[13:18] <Geth> Â¦ MoarVM/telemeh_try: also uses it in a bunch of places that seem interesting

[13:18] <Geth> Â¦ MoarVM/telemeh_try:

[13:18] <Geth> Â¦ MoarVM/telemeh_try: hopefully the impact is very small when it's inactive ...

[13:18] <Geth> Â¦ MoarVM/telemeh_try: review: https://github.com/MoarVM/MoarVM/commit/532ee16f31

[13:18] <timotimo> yo check it.

[13:23] <dogbert17> ok, so I have experimented a bit with 08-callbacks.t

[13:23] <dogbert17> I commented out all tests except 'is CheckReturnsStr(&return_str),       7, 'callback returned a string to C';'

[13:24] <dogbert17> running valgrind still gave me a bunch of invalid reads

[13:25] <dogbert17> then I went into 08-callbacks.c (https://gist.github.com/dogbert17/c1c44e170319d993ad50c71802173f57) and commented out the two lines before 'return 7;' and suddenly the invalid reads disappeared

[13:25] *** domidumont joined
[13:26] <dogbert17> the line 'char *str = cb();' seems to be the one generating the invalid reads but why

[13:30] <brrt> hmmm

[13:30] <dogbert17> what is that line supposed to do?

[13:31] <dogbert17> for fun I put in the following line instead of the two I commented out 'int t = 10000;'. No invalid reads were generated (unsurprisingly I guess)

[13:33] <dogbert17> wait a minute, is there a malloc missing here by any chance?

[13:38] * dogbert17 or am I just spewing out nonsense

[13:45] <brrt> let me look at it a bit better

[13:46] <dogbert17> brrt: thx

[13:46] <brrt> seems like that's nativecall, yes

[13:46] <brrt> it's nativecall which has to 'wrap' our string-decoding function, i think

[13:51] <dogbert17> so there are many things going on under the hood here then

[13:56] *** domidumont joined
[13:56] <brrt> right

[14:29] <Geth> Â¦ MoarVM/telemeh_try: e980958ae2 | (Timo Paulssen)++ | 5 files

[14:29] <Geth> Â¦ MoarVM/telemeh_try: allow dynamic strings in telemeh, use it for nativecall func names

[14:29] <Geth> Â¦ MoarVM/telemeh_try: review: https://github.com/MoarVM/MoarVM/commit/e980958ae2

[14:31] <dogbert17> brrt: running the dyncall test suite, i.e. 'rakudo/nqp/MoarVM/3rdparty/dyncall/test/callback_suite/callback_suite' under valgrind also causes invalid reads !

[14:42] <brrt> hehe

[14:42] <brrt> that's not very surprising no

[15:06] *** Util_ joined
[15:06] *** BinGOs_ joined
[15:31] *** BinGOs joined
[15:32] *** brrt joined
[16:37] <timotimo> https://llvm.moe/ - when is it time for a moarvm book featuring cute anime girls?

[16:38] <Zoffix> Yeah, but do it with cute anime boys... with dog ears

[16:41] <timotimo> that's also acceptable

[16:42] <Zoffix> ^_^

[16:48] <timotimo> LOL, i was wondering why framerate of my shooter example was so low

[16:48] <timotimo> turns out i accidentally ran it via X11 forwarding

[16:49] <TimToady> o_O

[16:53] <jnthn> So, discovery from $dayjob code today is that our fixed size allocator really needs to be better in multi-threaded apps.

[16:56] <jnthn> Should give it a per-thread set of free lists that it can try looking in first

[16:57] <timotimo> i would have given the FSA telemetry output, but i'm afraid it'd just be a firehose of info

[16:58] <jnthn> aye, suspect so

[16:58] <jnthn> perf output seems quite clear though

[16:59] <timotimo> yeah, perf is nice like that :)

[17:04] <dogbert17> anyone know where to report problems with the dyncall package, i.e. rakudo/nqp/MoarVM/3rdparty/dyncall ?

[17:05] <dogbert17> as I wrote to brrt above even their own test suite generates invalid reads/writes under valgrind, at least on 32 bit

[17:15] *** domidumont joined
[17:34] <JimmyZ> dogbert17: I connected them by: http://www.dyncall.org/contact

[17:36] <Zoffix> They have a number you call, but it's very dynamic!

[18:02] <dogbert17> JimmyZ: many thanks

[18:25] *** dalek joined
[18:40] <dogbert17> mail sent to the dyncall team

[20:21] <Geth> Â¦ MoarVM: 24124d268b | (Jonathan Worthington)++ | src/core/threadcontext.h

[20:21] <Geth> Â¦ MoarVM: Remove unused defines.

[20:21] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/24124d268b

[20:21] <Geth> Â¦ MoarVM/better-fsa: 1bb36428fc | (Jonathan Worthington)++ | 3 files

[20:21] <Geth> Â¦ MoarVM/better-fsa: Stub in per-thread FSA data structure.

[20:21] <Geth> Â¦ MoarVM/better-fsa: review: https://github.com/MoarVM/MoarVM/commit/1bb36428fc

[20:51] <timotimo> moar: 3rdparty/libuv/src/unix/core.c:487: uv__close: Assertion `fd > STDERR_FILENO' failed.

[20:51] <timotimo> i wonder how i did this

[20:52] <Geth> Â¦ MoarVM/better-fsa: 4de9d4dddd | (Jonathan Worthington)++ | 4 files

[20:52] <Geth> Â¦ MoarVM/better-fsa: Create and partial destory of thread FSA state.

[20:52] <Geth> Â¦ MoarVM/better-fsa: review: https://github.com/MoarVM/MoarVM/commit/4de9d4dddd

[20:52] <jnthn> o.O

[20:52] <jnthn> That's...impressive :)

[20:53] <jnthn> Didn't see that one before :)

[20:55] <timotimo> writing json

[20:55] <timotimo> Malformed UTF-8 at line 39 col 10

[20:55] <timotimo> ?!? :(

[20:56] <jnthn> Smells like memory corruption

[20:56] <timotimo> worst case, yeah :(

[20:57] <timotimo> i'm trying to spurt a to-json'd thing

[20:57] <timotimo> ah

[20:58] <timotimo> maybe it's because i'm trying to use the json data as the filename?!

[20:59] *** AlexDaniel joined
[21:03] <timotimo> Error detected while processing function <SNR>70_Highlight_Matching_Pair:

[21:03] <timotimo> line   78:

[21:03] <timotimo> E363: pattern uses more memory than 'maxmempattern'

[21:03] <timotimo> (this is vim)

[21:04] <jnthn> What is this, break all the things night? :)

[21:08] <timotimo> it really is, isn't it

[21:08] <samcv> i just woke up

[21:08] <yoleaux> 14:27Z <Zoffix> samcv: Is this good to merge? https://github.com/perl6/nqp/pull/350

[21:08] <samcv> how many things are broken

[21:08] <timotimo> oh, nothing

[21:09] <samcv> omg i thought i had merged that

[21:09] <Zoffix> :)

[21:09] <samcv> good catch

[21:10] <samcv> just gonna restart travis ci and then probably merge it

[21:12] <samcv> and gonna run roast again too just to be double sure

[21:12] <timotimo> it's a royal barbeque

[21:13] <samcv> but yeah it should have def been merged

[21:16] <samcv> also timotimo have you checked out that PR

[21:16] <samcv> i'm removing code that you added

[21:16] <samcv> like 8 months ago

[21:16] <timotimo> i had not

[21:16] <samcv> just make sure i didn't remove anything that we needed to keep

[21:17] <timotimo> nah, that was just some code to make sure that we only lc the haystack once

[21:17] <timotimo> when we use indexic, we don't have to lc anything at all

[21:17] <samcv> ok

[21:17] <timotimo> so that's strictly better

[21:17] <samcv> also is there more code i can remove then?

[21:18] <timotimo> if there's no other mentions of haystacklc, then yes

[21:18] <timotimo> somewhere it requests a register to use for that

[21:18] <samcv> yeah there are not

[21:18] <timotimo> perfect

[21:18] <samcv> ok so i can remove the regalloc line ? https://github.com/perl6/nqp/pull/350/files

[21:19] <timotimo> yeah

[21:19] <samcv> ok and instead of $lit in the op ( ) i just remove it?

[21:20] <samcv> and change the number of arguments?

[21:21] <timotimo> you can't change the number of arguments, i don't think

[21:22] <timotimo> what did it do with $lit anyway?

[21:22] <timotimo> oh, yeah

[21:22] <samcv> ok it passes all roast tests

[21:22] <Geth> Â¦ MoarVM/better-fsa: 0039cdca98 | (Jonathan Worthington)++ | 2 files

[21:22] <Geth> Â¦ MoarVM/better-fsa: Start keeping per-thread FSA free lists.

[21:22] <Geth> Â¦ MoarVM/better-fsa:

[21:22] <Geth> Â¦ MoarVM/better-fsa: Even before any tuning and optimization, this change gets a real-world

[21:22] <Geth> Â¦ MoarVM/better-fsa: multi-threaded application running in 60% of the time it used to.

[21:22] <Geth> Â¦ MoarVM/better-fsa: review: https://github.com/MoarVM/MoarVM/commit/0039cdca98

[21:22] <samcv> so happy you found that Zoffix

[21:22] <timotimo> the $lit was used to hold the needle

[21:23] <timotimo> $node[0] is the SVal we had put as the child of the scan node

[21:23] <timotimo> we generate that if we have code like .*? "foobar"

[21:24] <timotimo> - QAST::Regex(:rxtype(concat) :subtype())

[21:24] <timotimo> - QAST::Regex(:rxtype(scan) :subtype())

[21:24] <timotimo> - foo

[21:24] <timotimo> - QAST::Regex(:rxtype(literal) :subtype())  \"foo\"

[21:24] <timotimo> - foo

[21:24] <timotimo> - QAST::Regex(:rxtype(pass) :subtype())

[21:24] <timotimo> see how the foo also shows up as the child of the scan node?

[21:24] <timotimo> that's the magic optimization that lets us use index instead of trying a literal at every position

[21:25] <jnthn> Will finish up better-fsa tomorrow all being well

[21:25] <timotimo> now if you remove $node[0] completely, you won't have anything to use with the index op for the needle

[21:25] <timotimo> so we need to keep that bit

[21:26] <samcv> ok

[21:26] <jnthn> Handing back the free lists of dead threads to the global one is a lock free operation, and I'm smart enough to know I'm not smart enough to get that right at 11:30pm :)

[21:26] <samcv> so i removed too much?

[21:27] <timotimo> yeah, it'd have searched for a null string in tha tcase, i'd guess

[21:27] <timotimo> does the pr test properly without setting something in $lit?

[21:27] <timotimo> oh, no

[21:28] <timotimo> it would just re-use whatever register it gave back to you

[21:28] <samcv> i haven't tried taking out lit

[21:28] <samcv> but as it stands it passes

[21:28] <timotimo> that must be coincidence

[21:28] <samcv> what is?

[21:28] <timotimo> that it works :D

[21:29] <samcv> oh

[21:29] <samcv> should it not work XD

[21:30] <samcv> also jnthn if i give you a ssh key for travis can you add it under authorized keys, so it can push to the gh-pages branch for coverage reports?-

[21:31] <jnthn> samcv: Um, I can try and find that :-)

[21:31] <timotimo> you know, moarvm.com isn't on gh-pages

[21:31] <samcv> yeah sec

[21:32] <samcv> let me generate

[21:32] <samcv> i will show you where it is though

[21:32] <samcv> not yet...

[21:32] <jnthn> OK :)

[21:32] <timotimo> you were going to give moarvm a github-pages thingie? or where were you going to put things?

[21:32] <samcv> it's only gonna be in the gh-pages branch

[21:32] <samcv> that things will go

[21:32] <timotimo> right

[21:36] <samcv> jnthn, you can get here? https://github.com/MoarVM/MoarVM/settings/keys

[21:37] <jnthn> Yup. Tells me "There are no deploy keys for this repository" :)

[21:38] <samcv> this is the pubkey https://gist.github.com/samcv/b9ccb8535af81c2f3ce5381ff9479e4c

[21:38] <jnthn> Does it need write access?

[21:38] <samcv> just encrypted the private key with travis special utility

[21:39] <samcv> just to gh-pages branch

[21:39] <jnthn> I don't get that granularity, it's all or nothing :)

[21:39] <samcv> ok

[21:39] <jnthn> Added :)

[21:43] <samcv> jnthn, ok now https://github.com/MoarVM/MoarVM/settings

[21:43] <samcv> go to GitHub Pages and choose that we are gonna use the gh-pages branch

[21:44] <jnthn> It doesn't offer me that choice

[21:44] <jnthn> Only master and master /docs

[21:44] <timotimo> probably will have to push it once first

[21:44] <jnthn> Does the branch exist?

[21:44] <samcv> no

[21:45] <samcv> hold on. let me check something

[21:45] <samcv> i think we maybe need to make it

[21:45] <jnthn> I think it's typically created bare

[21:45] <jnthn> Yeah

[21:45] <jnthn> Hm, bare ain't the word

[21:45] <jnthn> naked?

[21:45] <jnthn> no

[21:45] <jnthn> oh

[21:45] <jnthn> orphan maybe?

[21:46] <jnthn> yeah, that's the one :)

[21:46] <samcv> sounds good

[21:46] <samcv> yep

[21:46] <samcv> i didn't do that for appimages repo and just deleted all the files :P

[21:46] <samcv> heh

[21:46] <samcv> but yeah orphan seems to be the best thing to do

[22:08] <jnthn> samcv: Let me know when you'vce created it and I'll do the setup in github config :)

[22:08] <jnthn> I'm about for another 30 minutes or so

[22:08] <samcv> oh i have not

[22:10] <samcv> working on it now

[22:11] <Geth> Â¦ MoarVM/gh-pages: 71cbf731f4 | (Samantha McVey)++ | 0 files

[22:11] <Geth> Â¦ MoarVM/gh-pages: Initial Commit

[22:11] <Geth> Â¦ MoarVM/gh-pages: review: https://github.com/MoarVM/MoarVM/commit/71cbf731f4

[22:11] <samcv> ok done jnthn

[22:12] <samcv> yey

[22:13] <jnthn> :)

[22:14] <jnthn> Seems it picked up on the name gh-pages and did the setup automagically :)

[22:14] <samcv> nice

[22:16] *** lizmat joined
[22:36] <samcv> timotimo, so what needs to be changed with that PR? i still have no clue :P

[22:36] <timotimo> you need to grab the sval($node[0]), that's the needle we were searching for

[22:36] <timotimo> we have to ask the register allocator to give us a string register, then we put the needle in there with const_s, then we pass the register to the indexic op

[22:38] <samcv> nqp::push(@ins, op('const_s', $lit, sval($node[0])));

[22:39] <samcv> so this

[22:39] <samcv> after the `my $lit := $!regalloc.frash_s();` ?

[22:40] <timotimo> yeah, that'd do it

[22:41] <samcv> anybody know how to see what packages are in a apt repo?

[22:41] <samcv> i need to see what packages are in deb http://apt.llvm.org/precise/ llvm-toolchain-precise main

[22:41] <samcv> so i can get llvm-cov instaled on travis

[22:41] <timotimo> hm, can you just surf to it with a web browser?

[22:41] <samcv> nope

[22:42] <samcv> i just need the list of files, so whatever is the file that tells apt-get which packages are availible i need to see that file

[22:42] <samcv> they don't have uh. directory indexing turned on

[22:43] <timotimo> i've got no idea

[22:50] <mst> samcv: why do you need the list of files for that?

[22:50] <samcv> cause i need to know what they're named

[22:50] <samcv> to be able to install them

[22:50] <samcv> ok i found this http://apt-origin.llvm.org/precise/dists/llvm-toolchain-precise/main/binary-amd64/Packages

[22:50] <samcv> after trying to copy the layout of some other debian mirrors

[22:50] <timotimo> ah, nice

[22:50] <mst> argh, I'd forgotten how the sources.list line worked

[22:50] <samcv> looks like i want clang-5.0

[22:51] <mst> I'd got 99% of the way there

[22:51] <mst> but was forgetting sources.list is ${base} ${dist} @types

[22:51] <mst> and had been waffling trying to remember which was ${dist}

[23:33] <samcv> timotimo, so i added that https://github.com/perl6/nqp/pull/350/files

[23:33] <samcv> spectest pass as well. is this ready for merge now?

[23:35] <timotimo> if it's fine that the string in there doesn't have to be changed in any way, then yeah, i think it looks good

[23:41] <samcv> yeah it doesn't

[23:41] <samcv> indexic_s handles it all
