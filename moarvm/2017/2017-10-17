[01:36] *** ggoebel joined
[01:59] *** ilbot3 joined
[02:35] *** AlexDani` joined
[02:52] *** greppable6 joined
[05:35] *** yoleaux joined
[05:35] *** ggoebel joined
[05:44] *** domidumont joined
[05:47] *** lizmat joined
[05:50] *** domidumont joined
[05:56] *** brrt joined
[06:11] <brrt> good * #moarvm

[06:11] <yoleaux> 16 Oct 2017 19:09Z <AlexDaniel`> brrt: Hello. Any news on RT #132269 ?

[06:11] <synopsebot> RT#132269 [new]: https://rt.perl.org/Ticket/Display.html?id=132269 [REGRESSION][BUG] JIT removing loop construct and confusing last()

[06:11] <brrt> .tell AlexDaniel not yet

[06:11] <yoleaux> brrt: I'll pass your message to AlexDaniel.

[06:32] <AlexDaniel> Ok

[06:32] <yoleaux> 06:11Z <brrt> AlexDaniel: not yet

[06:41] *** brrt joined
[06:52] *** brrt joined
[06:53] <brrt> it's a fun one that one

[06:53] <brrt> requires network access, so no easy debugging

[06:53] <brrt> multiple threads, so bisect doesn't quite work

[07:04] *** domidumont joined
[07:04] <brrt> oh, and the exception isn't an adhoc one

[07:08] *** patrickz joined
[07:46] <brrt> good news

[07:47] <brrt> under jit-dump.pl, the bisect works with one frame offset

[07:48] *** rba joined
[07:56] *** domidumont joined
[08:04] *** rba_ joined
[08:05] *** rba__ joined
[08:26] *** robertle joined
[08:28] *** rba joined
[08:33] <brrt> the generated code, that appears to be correct

[08:33] <brrt> i'm a little surprised not to see the idx->const thing take effect yet

[08:36] <brrt> however, i'm also seeing a missing label

[08:36] <brrt> or what i think is a label that's missing

[08:40] *** zakharyas joined
[08:47] <samcv> hey brrt

[08:47] <brrt> the JIT log is unfortunately pretty silent about what it is that we're missing

[08:47] <brrt> hey samcv

[08:50] <samcv> buggable, tags

[08:50] <buggable> samcv, Total: 1629; 6.D: 2; 9999: 9; @LARRY: 28; ANNOYING: 8; BOOTSTRAP: 4; BUG: 592; BUILD: 12; CONC: 44; DOCS: 1; EXOTICTEST: 3; FLAP: 1; GLR: 3; IO: 20; JVM: 48; LHF: 7; LTA: 176; MATH: 5; META: 2; MOAR: 2; MOLD: 233; NATIVECALL: 21; NYI: 57; OO: 13; OPTIMIZER: 8; OSX: 2; PARSER: 5; PERF: 27; POD: 19; PRECOMP: 15; REGEX: 46; REGRESSION:

[08:50] <buggable> samcv, 38; REPL: 6; RFC: 61; RT: 2; SECURITY: 2; SEGV: 28; SINK: 1; SITE: 1; SPESH: 1; STAR: 7; TESTCOMMITTED: 12; TESTNEEDED: 35; TODO: 13; UNI: 27; UNTAGGED: 282; WEIRD: 2; WINDOWS: 4; See http://fail.rakudo.party/ for details

[09:33] *** AlexDani` joined
[09:57] *** rba joined
[09:58] *** releasable6 joined
[10:14] *** rba_ joined
[10:27] *** patrickz joined
[10:49] *** timo joined
[11:01] *** brrt joined
[11:08] *** rba joined
[12:10] <brrt> so, i'm missing a throwish control guard

[12:10] <brrt> now to figure out why i'm missing it

[12:21] *** zakharyas joined
[12:42] *** rba joined
[12:54] *** rba_ joined
[15:06] *** brrt joined
[15:45] <brrt> grr, integration tests

[15:46] <timotimo> did you mean: infuriation tests?

[15:49] <brrt> oh well

[15:49] <brrt> other tests didn't catch this

[15:49] <timotimo> you're talking about the jit frame handler thing?

[15:49] <brrt> i might have a few words to say about how the implementation of Net::HTTP

[15:49] <brrt> well, my basic question is

[15:50] <brrt> how does a deopt_all / deopt_ins get stuck on a set op

[15:50] <ugexe> it was written to work on JVM and pre syncsocket rework + threads, so its workarounds ontop of workarounds

[15:50] <brrt> i can believe that

[15:50] <timotimo> another op might have been deleted and the annotation would have fallen onto the op before or after it

[15:51] <brrt> otoh, it has a loop that calls .recv with a single byte

[15:51] <brrt> not super elegant

[15:51] <ugexe> its the only way to handle that situation without a deadlock waiting on data without knowing the size before hand

[15:51] <ugexe> or at least it was

[15:51] <timotimo> if this is about something happening in spesh, should be able to use the spesh dump-at-every-change thingie for gdb

[15:51] <ugexe> without Connection: close (Net::HTTP needed towork with keep alive)

[15:52] <brrt> nah, this is the expr JIT not handling something it should

[15:52] <brrt> but i want to figure out how

[15:52] <timotimo> hmm, ok

[15:53] <brrt> ugexe, respectfully, that makes no sense to me. recv() in unix should return any bytes it has, not just block until it has N bytes

[15:53] <brrt> if that's not how recv() works  in perl6, it's recv()'s bug

[15:53] <brrt> or perl6-s recv()s bug

[15:54] <brrt> anything else is madness

[15:54] <brrt> on th eother hand

[15:54] <brrt> i'm happy for this madness because how would i have found my bug otherwise

[16:03] <ugexe> it only does that to read the header. the body is read in large chunks

[16:04] <ugexe> the 1 byte-at-a-time is so it can do .lines on binary data to read the header without dealing with \r\n encoding changes that kept happening

[16:05] <ugexe> (in addition to the recv size being too large problem that was probably jvm related)

[16:12] *** rba joined
[16:44] *** robertle joined
[16:49] *** AlexDaniel` joined
[17:15] *** ggoebel joined
[17:34] *** zakharyas joined
[17:55] *** cog_ joined
[19:08] *** brrt joined
[19:09] *** domidumont joined
[19:09] *** Util joined
[19:14] *** zakharyas joined
[19:27] *** patrickz joined
[19:47] <brrt> hmm, bailing on the DEOPT_ONE at the set doesn't actually do what i expected

[20:26] <brrt> as in, it doesn't resolve the problem

[20:30] <brrt> that suggests that the duplicate dynamic label is

[20:59] *** rba joined
[21:35] *** rba joined
[22:31] *** evalable6 joined
[22:58] *** ZofBot joined
[23:43] *** evalable6 joined
