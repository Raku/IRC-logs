[00:01] *** pyrimidine joined
[01:25] *** pyrimidine joined
[01:30] *** gk_-1wm_- joined
[01:30] *** gk_-1wm_- left
[02:48] *** ilbot3 joined
[02:56] *** pyrimidine joined
[05:14] *** nine_ joined
[05:14] *** diakopte1 joined
[05:14] *** sivoais_ joined
[05:15] *** harrow` joined
[05:24] *** sivoais joined
[06:28] *** pyrimidine joined
[06:40] *** pyrimidine joined
[08:21] *** pyrimidine joined
[08:38] *** pyrimidine joined
[10:41] *** pyrimidine joined
[10:46] * dogbert17 marvels at the total silence

[10:49] * dogbert17 is contemplating https://github.com/MoarVM/MoarVM/blob/master/src/strings/decode_stream.c#L68 wondering if we could ever run into a situation where 'ds->bytes_head' is NULL and 'pos' not being equal to zero ...

[11:04] * dogbert17 suspects not

[11:38] <jnthn> I'd hope not, but can always stick an assert in

[12:09] <Geth> ¦ MoarVM: 0d0e2140f5 | (Stefan Seifert)++ | build/probe.pm

[12:09] <Geth> ¦ MoarVM: Yet another attempt at silencing the pthread_yield warnings

[12:09] <Geth> ¦ MoarVM:

[12:09] <Geth> ¦ MoarVM: According to commit d47dec1c1c229e22037b9e2bf8429a1a713b1c80 sched_yield

[12:09] <Geth> ¦ MoarVM: should be used when _POSIX_PRIORITY_SCHEDULING is defined. We lost that

[12:09] <Geth> ¦ MoarVM: with commit ddb1bf9e47715c03209153fa7fe06f6a9cc61bd3.

[12:09] <Geth> ¦ MoarVM:

[12:09] <Geth> ¦ MoarVM: According to sched_yield(2) POSIX systems on which sched_yield() is

[12:09] <Geth> ¦ MoarVM: <…commit message has 5 more lines…>

[12:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0d0e2140f5

[12:09] <Geth> ¦ MoarVM: 979ec4d8e3 | (Jonathan Worthington)++ | build/probe.pm

[12:09] <Geth> ¦ MoarVM: Merge pull request #541 from niner/master

[12:09] <Geth> ¦ MoarVM:

[12:09] <Geth> ¦ MoarVM: Yet another attempt at silencing the pthread_yield warnings

[12:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/979ec4d8e3

[12:09] <Geth> ¦ MoarVM: ab426c1477 | (Daniel Green)++ | src/strings/ops.c

[12:09] <Geth> ¦ MoarVM: Change MVM_string_equal_at_ignore_case to use fc

[12:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ab426c1477

[12:09] <Geth> ¦ MoarVM: 772f60da30 | (Jonathan Worthington)++ | src/strings/ops.c

[12:09] <Geth> ¦ MoarVM: Merge pull request #540 from MasterDuke17/change_MVM_string_equal_at_ignore_case_to_use_fc

[12:09] <Geth> ¦ MoarVM:

[12:09] <Geth> ¦ MoarVM: Change MVM_string_equal_at_ignore_case to use fc

[12:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/772f60da30

[12:31] *** pyrimidine joined
[12:42] *** pyrimidine joined
[13:30] <MasterDuke> what sets the version/commit/tag of libuv to use?

[13:35] <timotimo> that's done through a git submodule

[13:35] <timotimo> i.e. cd into the libuv folder, "git reset --hard some_tag", cd out, git add libuv-folder, git commit -m 'update libuv to some_tag', done

[13:35] <timotimo> otherwise if you --has-libuv, you can use the system-provided one

[13:37] <MasterDuke> timotimo: thanks, thought i'd see what happens when updating to current stable (1.11.0 vs 1.8.0 we're using now)

[13:37] <timotimo> cool!

[13:38] <timotimo> regularly updating libuv should be a thing we do

[13:53] <MasterDuke> nqp built and passed `make m-test`. rakudo built but didn't run t/spec/S11-modules/nested.t, however did a whole bunch of `make t/spec/S11-modules/nested.t` manually and they all passed

[13:53] <MasterDuke> and i think i've seen that test fail before during a `make m-spectest`

[13:55] <MasterDuke> should i PR the update?

[13:57] *** dalek joined
[13:58] <IOninja> I see nested.t flap once in a blue moon.

[13:59] <MasterDuke> https://irclog.perlgeek.de/perl6-dev/2017-02-08#i_14068163

[13:59] <MasterDuke> oh, ha, you beat me to it

[14:01] <MasterDuke> what's a bash invocation to run something in an infinite loop?

[14:01] *** pyrimidine joined
[14:03] <MasterDuke> nm. running `./perl6-valgrind-m t/spec/S11-modules/nested.t` in a loop, maybe something will turn up

[14:08] <dogbert17> for i in {1..500}; do ./perl6-valgrind-m t/spec/S11-modules/nested.t; done

[14:09] <MasterDuke> i have three of them running. nothing so far

[14:11] <dogbert17> IOninja: any other flappers you know about?

[14:37] <MasterDuke> ~430 runs so far, no failures

[14:39] <timotimo> might have to be run as part of the harness for it to blow up

[14:40] <MasterDuke> yeah. does `make <test>` run it under the harness?

[14:40] <timotimo> i don't think it does, but what do i know :)

[14:42] <IOninja> while make t/spec/S11-modules/nested.t; do true; done # runs in a loop until it blows up

[14:43] <IOninja> Yes, make some-test uses the harness. You can see the command run at the start of output: /home/zoffix/perl5/perlbrew/perls/perl-5.24.0/bin/perl t/harness5 --fudge --moar --keep-exit-code --verbosity=1 t/spec/S11-modules/nested.t

[14:44] <MasterDuke> yeah, i'm running a couple those in a loop with valgrind now

[14:44] <IOninja> dogbert17: I frequently see a TODO pass in S17-procasync/kill.t

[14:44] <timotimo> nice

[14:45] <IOninja> dogbert17: also this test is fudged on windows due to flapping there: https://github.com/rakudo/rakudo/blob/nom/t/04-nativecall/20-concurrent.t#L10-L13

[14:45] <IOninja> (dunno if that's still the case tho)

[14:55] <dogbert17> does anyone know the return value of 'nqp::seekfh' ?

[14:56] <timotimo> that op doesn't return anything at the moarvm level

[14:58] <dogbert17> timotimo: interesting in IO::Handle we have this:

[14:58] <dogbert17> proto method seek(|) { * }

[14:58] <dogbert17> multi method seek(IO::Handle:D: Int:D $offset, SeekType:D $whence = SeekFromBeginning) {

[14:58] <dogbert17> nqp::seekfh($!PIO, $offset, +$whence);

[14:58] <dogbert17> }

[14:58] <dogbert17> the docs on the other hand say 'method seek(IO::Handle:D: Int:D $offset, SeekType:D $whence --> True)'

[14:59] <MasterDuke> it doesn't return anything

[14:59] <dogbert17> should one then assume that if seek does not throw then all has gone according to plan?

[15:00] <MasterDuke> src/io/io.h:113:void MVM_io_seek(MVMThreadContext *tc, MVMObject *oshandle, MVMint64 offset, MVMint64 flag);

[15:00] <dogbert17> so how do one know if a seek has succeeded?

[15:01] <MasterDuke> `else MVM_exception_throw_adhoc(tc, "Cannot seek this kind of handle");`

[15:02] <dogbert17> MasterDuke: cool, so it seems as if the docs are in error then

[15:05] <MasterDuke> that's the only explicit error. it doesn't seem to catch if the seek itself failed

[15:07] <MasterDuke> whoops, the function MVM_io_seek calls does

[15:07] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/master/src/io/syncfile.c#L81

[15:12] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #542: Update libuv to v1.11.0

[15:12] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/542

[15:16] <IOninja> dogbert17: you can leave the docs as is. This will be fixed as part of the IO grant and one of the notes I have concerns the current uselessness of .seeks' return value

[15:16] <MasterDuke> man, these three `valgrind make t/spec/S11-modules/nested.t` have been running in a loop for a while now, no errors

[15:22] <dogbert17> IOninja, cool, do you have fixing 'unlink' and 'tell' on your list as well?

[15:23] <IOninja> dogbert17: don't think so. What's broke with them?

[15:23] <dogbert17> I believe that calling 'tell' after opening a file for append returns 0

[15:24] <dogbert17> instead of the 'end of the file'

[15:24] <dogbert17> with unlink, there's some controversy about the order of the args

[15:25] <IOninja> dogbert17: it seems to take just the files to delete tho?

[15:25] <IOninja> confirmed the .tell one; thanks \o/

[15:29] <MasterDuke> IOninja: did you see my comment on https://github.com/rakudo/rakudo/pull/775?

[15:29] <dogbert17> IOninja: wrt unlink, if you get an exception (failed unlink) the error message confuses 'src' and 'dest' if I remember correctly

[15:30] <IOninja> MasterDuke: nope. Now I did and yeah, I will

[15:30] <MasterDuke> IOninja++

[15:30] <IOninja> dogbert17: which src and dest?

[15:31] <IOninja> Do you mean move or rename and not unlink?

[15:32] *** MasterDuke joined
[15:33] <dogbert17> hmm, trying to find the discussion on irclog, you might be right though it could have been move or rename

[15:35] <IOninja> neither of them confuses src and dest in error though

[15:35] <dogbert17> hmm, let me look around a bit :)

[15:42] <MasterDuke> timotimo, jnthn: what's involved with fixing the "overflow to negative" boundary detection mentioned here http://irclog.perlgeek.de/perl6-dev/2016-09-08#i_13173728 ?

[15:42] <dogbert17> IOninja: I believe it was 'link' that I found confusing, a failed link looks like this§:

[15:42] <dogbert17> dogbert@dogbert-VirtualBox ~ $ perl6 -e 'say link("newdata2.txt", "data2.txt")'

[15:42] <dogbert17> Failed to create link called 'data2.txt' on target '/home/dogbert/newdata2.txt': Failed to link file: no such file or directory

[15:43] <dogbert17> the new file I want to create here is newdata2.txt

[15:46] <dogbert17> the docs say 'Create a new link named as $target (or the name of the invocant in the method form) to the existing file named $name.'

[15:47] <IOninja> dogbert17: thanks. Added to my notes. Will fix the issue and the docs.

[15:48] <IOninja> ... and write tests -_- not a single one for `link`

[15:48] <dogbert17> IOninja++

[15:50] <dogbert17> IOninja: you recently commented on RT #123838, someone had added some tests to that case earlier, might possibly come in handy

[15:50] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=123838

[15:51] <IOninja> will look for them, thanks

[16:23] *** zakharyas joined
[16:43] *** pyrimidine joined
[18:27] *** zakharyas joined
[18:33] <TimToady> IOninja: so I guess with RatStr.FatRat we'll just need to tear apart the string part ourownselves; maybe we can decide that at compile time, and maybe not

[18:33] <TimToady> maybe add a third sekrit field that says "here's what you want if you want a FatRat"

[18:43] <IOninja> Alright.

[18:43] *** pyrimidi_ joined
[18:48] *** pyrimidine joined
[19:02] *** pyrimidine joined
[20:44] *** BenGoldberg joined
