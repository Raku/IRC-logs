[00:02] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #647: Remove impossible check

[00:02] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/647

[01:52] *** ilbot3 joined
[03:35] *** pharv_ joined
[05:00] *** pharv_ joined
[05:45] *** brrt joined
[06:02] <brrt> ohai moarvm

[06:03] <nwc10> good *, brrt

[06:05] <brrt> nwc10, any thoughts about the W^X debacle

[06:05] <brrt> (yes, that did keep me up at night)

[06:05] <nwc10> er, none useful.

[06:06] <brrt> shall i explain the issue

[06:06] <brrt> or would that not help :-)

[06:06] <nwc10> I'm sort of aware of what the problem is

[06:06] <nwc10> well, technical, and political

[06:07] <nwc10> and my head is full of trying to work out how to test some work code

[06:07] <brrt> then i won't bother you :-)

[06:14] <brrt> but i will figure out how dlmalloc gives us double-mapped memory

[06:18] *** domidumont joined
[06:25] *** domidumont joined
[06:48] *** brrt joined
[07:13] <samcv> so i implemented Knuth-Morris-Pratt string search

[07:14] <samcv> my $string = 'a' x 100000000 ~ 'b'; nqp::index($string, 'aaaaaaaaaaaaaaaaab', 0);# before 28.0579458s after 2.94111041s

[07:14] <samcv> spectest pass as well ????

[07:15] <samcv> not sure how to name anything though

[07:18] <brrt> â€¦ that's impressive

[07:18] <brrt> samcv++

[07:18] <samcv> idk i have it named knuth_morris_pratt_index now

[07:18] <samcv> static since meant to be used from the other function

[07:19] <brrt> (that's the one in which you build a jump table to seek forward (or backward) when you see a single character, right?)

[07:19] <samcv> uh

[07:20] <brrt> i'm not sure, i'm going of memory :-)

[07:20] <samcv> yeah

[07:21] <samcv> that's how it seems to work

[07:32] <brrt> .ask markmont where, if anywhere, can he find a netbsd 8 vm

[07:32] <yoleaux> brrt: I'll pass your message to markmont.

[07:40] <Geth> Â¦ MoarVM: samcv++ created pull request #648: Implement the Knuth-Morris-Pratt string search algorithm

[07:40] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/648

[07:41] <samcv> if you want to take a look at my implementation ^

[07:54] <brrt> thanks

[08:12] *** zakharyas joined
[08:12] <nine> Oh, 2/3 program committee members of the vm meetup are actually from Linz

[08:12] <yoleaux> 15 Aug 2017 12:28Z <AlexDaniel> nine: OK, thank you!

[08:15] <brrt> (linz?)

[08:15] <brrt> oh, a city

[08:15] <nwc10> where nine lives

[08:23] <samcv> what/when is this vm meetup

[08:51] <lizmat> samcv: http://vmmeetup.github.io/2017/

[08:52] <samcv> cool

[08:56] <jnthn> morning o/

[08:57] <samcv> morning jnthn

[08:59] *** nebuchadnezzar joined
[09:11] <brrt> \o jnthn

[09:11] <brrt> jnhtn, i'm still trying to get netbsd-current installed in a VM

[09:13] <jnthn> That sounds...fun :P

[09:14] <brrt> yes

[09:14] <jnthn> I'm hunting a SEGV

[09:14] <brrt> it is isn't :-P

[09:14] <brrt> aha

[09:14] <brrt> that sounds funner

[09:14] <jnthn> Outdated GC pointer

[09:26] <samcv> jnthn, when you get the time check out my PR implementing knuth-morris-pratt algorithm natively

[09:29] <jnthn> ahh...turns out that between a new thread object being created and it being run, the ->tc it points to isn't yet being marked

[09:29] <jnthn> Because the thread ain't yet running

[09:30] <samcv> what does marked mean?

[09:31] <samcv> GC marked?

[09:31] <samcv> for collection?

[09:31] <jnthn> Yes.

[09:31] <jnthn> Oh...there's already code trying to take care of this situation though

[09:45] <Geth> Â¦ MoarVM/atomics: d00d829b8a | (Jonathan Worthington)++ | src/core/frame.c

[09:45] <Geth> Â¦ MoarVM/atomics: Add GC debug check on frame heap promotion.

[09:45] <Geth> Â¦ MoarVM/atomics:

[09:45] <Geth> Â¦ MoarVM/atomics: To make sure nothing in the promoted chain is in fromspace.

[09:45] <Geth> Â¦ MoarVM/atomics: review: https://github.com/MoarVM/MoarVM/commit/d00d829b8a

[09:45] <Geth> Â¦ MoarVM/atomics: e32eec6a5a | (Jonathan Worthington)++ | src/core/threads.c

[09:45] <Geth> Â¦ MoarVM/atomics: Move thread to starting after running list insert.

[09:45] <Geth> Â¦ MoarVM/atomics:

[09:45] <Geth> Â¦ MoarVM/atomics: There is code to mark the thread contexts of not-yet-started threads

[09:45] <Geth> Â¦ MoarVM/atomics: in the MVMThread REPR's gc_mark function. Once it's in starting state

[09:45] <Geth> Â¦ MoarVM/atomics: it participates in GC "as normal". Recent refactors changed the way

[09:45] <Geth> Â¦ MoarVM/atomics: the insertion into this list is handled, but didn't move the location

[09:45] <Geth> Â¦ MoarVM/atomics: of the thread state update. This moves it to happen only after the

[09:45] <Geth> Â¦ MoarVM/atomics: thread has been placed into the running list, thus avoid a period when

[09:45] <Geth> Â¦ MoarVM/atomics: the thread context would go unmarked.

[09:45] <Geth> Â¦ MoarVM/atomics: review: https://github.com/MoarVM/MoarVM/commit/e32eec6a5a

[09:47] <jnthn> Glad ot catch that one. Alas, it's not the only one.

[09:47] <jnthn> *to

[09:48] <jnthn> And the new check added in d00d829b doesn't trip

[09:48] <jnthn> The problem manifests as a frame with an outdated ->caller

[09:50] <jnthn> Hm, and it seems spesh-sensitive

[09:52] <jnthn> Happens with both JIT and inline disabled

[09:52] <nwc10> does that make it easier to chase down, or harder?

[09:53] <jnthn> Well, I suspect deopt a bit

[09:53] <jnthn> But...uh...inlining is gone

[09:53] <jnthn> So it can't be uninlining

[09:53] <jnthn> Which does create/insert frames

[09:53] <jnthn> Wonder if my runs with spesh fully disabled just got lucky

[09:55] <jnthn> hah, OK, got it to finally happen with spesh disabled

[09:56] <nwc10> oooh, interesting. latent bug

[10:04] <jnthn> Well, it's at least somewhat interseting that this only shows up (so far at least) in my newly added atomic ops tests

[10:13] <jnthn> oh

[10:13] <jnthn> Turns out a gen2 frame points to a fromspace caller

[10:13] <jnthn> How does that even happen?!

[10:15] <jnthn> I guess it could on promotion

[10:15] <jnthn> But that seems to be write-barriering properly anyway

[10:19] <dogbert17_> there are only one SEGV/fromspace bug in MoarVM left that I know of in the main code, i.e. not the atomic branch, and that is https://github.com/MoarVM/MoarVM/issues/554

[10:19] <yoleaux> 15 Aug 2017 23:52Z <MasterDuke> dogbert17_: https://irclog.perlgeek.de/moarvm/2017-08-15#i_15021638 if you're interested

[10:19] <dogbert17_> s/are/is/

[10:20] <geekosaur> "that [you] know of"

[10:20] <geekosaur> it's not the known bugs that are the problem, usually :p

[10:20] <dogbert17_> indeed :)

[10:21] <dogbert17_> currently it SEGV's in  MVM_gc_root_add_frame_registers_to_worklist ...

[10:22] <dogbert17_> it is probably not what jnthn is currently chasing

[10:24] <jnthn> Uh...that's fairly close

[10:27] <dogbert17_> here's more detail: https://gist.github.com/dogbert17/0561c5626a1f9c6ccaf6663428050538

[10:29] <jnthn> Hm, mighta found the missing wb

[10:29] <jnthn> Somewhere I hadn't expected to need it

[10:29] <jnthn> Test seems to be running happily now though

[10:29] <jnthn> Will leave it looping for a bit

[10:30] <jnthn> But got it running wiht spesh etc. turned on now

[10:30] <jnthn> forgot to set the env vars in a new debug session

[10:30] <jnthn> But those made it show up quicker

[10:30] <jnthn> So, looks promising

[10:30] <jnthn> oh wait, argh

[10:30] <jnthn> I forgot to breakpoint MVM_panic :/

[10:31] <jnthn> grr, it hit

[10:31] <dogbert17_> grumble :)

[10:34] <jnthn> Same structure though

[10:34] <jnthn> gen2 frame with fromspace caller

[10:34] <jnthn> This could happen with continuations

[10:36] <jnthn> But again, that is barriering

[10:40] <dogbert17_> now I got the nonblockingawait test to panic instead 'Collectable %p in fromspace accessed', perhaps that is more informative given that we're looking at the same bug

[10:40] <dogbert17_> s/given that/if/

[10:40] <jnthn> oh, interesting...it now doesn't seem to happen with spesh disabled

[10:42] <jnthn> So maybe my patch so far did help that case

[10:42] <jnthn> oh no

[10:42] <jnthn> Was just lucky

[10:42] <jnthn> or "unlucky"

[10:44] <dogbert17_> jnthn: FWIW, I updated https://gist.github.com/dogbert17/0561c5626a1f9c6ccaf6663428050538

[10:47] <jnthn> ohhh

[10:48] <jnthn> Something in continuation was wrong

[10:54] <Geth> Â¦ MoarVM/atomics: f57b35eac9 | (Jonathan Worthington)++ | src/core/continuation.c

[10:54] <Geth> Â¦ MoarVM/atomics: Correct MVM_ASSIGN to barrier the right target.

[10:54] <Geth> Â¦ MoarVM/atomics: review: https://github.com/MoarVM/MoarVM/commit/f57b35eac9

[10:54] <jnthn> Sadly that doesn't fix it, but it needed fixing anyway

[10:54] <dogbert17_> jnthn++

[11:12] <jnthn> Woulda explained it perfectly though :/

[11:17] <brrt> so at least i'm installing netbsd 7.1 now

[11:23] <dogbert17_> jnthn: sorry if I'm leading you astray by postings gist relating to a different bug

[11:24] <jnthn> dogbert17_: Could be related, dunno

[11:24] <jnthn> Also coulda been helped by the fix above

[11:24] <jnthn> Not found anything further on the one I'm hunting yet

[11:24] <jnthn> Added various extra sanity checks but they pass

[11:27] <dogbert17_> ok, could you reload https://gist.github.com/dogbert17/0561c5626a1f9c6ccaf6663428050538 again, time permitting, I believe that I have been more thorough this time

[11:31] <jnthn> Have you tried with f57b35eac9 ?

[11:31] <jnthn> It's not impossible that the fix I did a moment ago mighta dealt with that

[11:32] <jnthn> Well, 40 minutes ago...

[11:32] <jnthn> Lunch now; will continue looking after

[11:37] *** markmont joined
[11:38] <dogbert17_> according to my gdb session (still running btw): (gdb) l continuation.c:151

[11:38] <dogbert17_> 151     MVM_ASSIGN_REF(tc, &(cont->body.root->header), cont->body.root->caller, tc->cur_frame);

[11:39] * dogbert17_ figures that the lunch concept has merit :)

[11:41] * nwc10 wonders which timezone ilmari's stomach is in

[11:45] <markmont> brrt: For instructions on installing NetBSD 8, see https://blog.netbsd.org/tnf/entry/netbsd_8_0_release_process

[11:45] <yoleaux> 07:32Z <brrt> markmont: where, if anywhere, can he find a netbsd 8 vm

[11:46] <markmont> brrt: I set up my own VM on my laptop using those instructions.

[11:48] <markmont> brrt: Also, dlmalloc doesn't have much to do with the double-mapped memory.  That's all handled by closure.c.  dlmalloc is just used to parcel out chunks to the program -- and reclaim them -- from within the double-mapped memory region.

[11:48] <markmont> .tell brrt: https://irclog.perlgeek.de/moarvm/2017-08-16#i_15024158

[11:48] <yoleaux> markmont: What kind of a name is "brrt:"?!

[11:49] <markmont> .tell brrt https://irclog.perlgeek.de/moarvm/2017-08-16#i_15024158

[11:49] <yoleaux> markmont: I'll pass your message to brrt.

[12:18] * jnthn back

[12:18] <jnthn> Sadly, no great ideas of what the bug might be during lunch

[12:19] <Geth> Â¦ MoarVM/atomics: 4eeb82c124 | (Jonathan Worthington)++ | src/core/frame.c

[12:19] <Geth> Â¦ MoarVM/atomics: Correct a comment.

[12:19] <Geth> Â¦ MoarVM/atomics: review: https://github.com/MoarVM/MoarVM/commit/4eeb82c124

[12:29] *** zakharyas joined
[12:51] <dogbert17_> is it enough to check out the atomics branch in MoarVM to get your new stuff running or do I need a Rakudo branch as well?

[12:53] <brrt> markmont: thanks, but i've basically been there, and i don't understand it yet

[12:55] <brrt> but at least i have 7.1 installed

[13:12] <timotimo> dogbert17_: the ops have to at least be mapped through changes in nqp

[13:13] <timotimo> the tests for the ops are potentially in nqp, too. otherwise in rakudo

[13:17] <jnthn> There's atomics branches in both NQP and Rakudo

[13:18] <jnthn> I've got the issue golfed fairly far

[13:18] <jnthn> Still isn't making much sense though :S

[13:18] <jnthn> Though it's looking like something goes bad in new threads

[13:23] <dogbert17_> sounds promising

[13:24] <Geth> Â¦ MoarVM/atomics: 5b3318f1b8 | (Jonathan Worthington)++ | src/core/threads.c

[13:24] <Geth> Â¦ MoarVM/atomics: Root thread object while creating TC.

[13:24] <Geth> Â¦ MoarVM/atomics:

[13:24] <Geth> Â¦ MoarVM/atomics: Just in case that should end up doing GC allocation.

[13:24] <Geth> Â¦ MoarVM/atomics: review: https://github.com/MoarVM/MoarVM/commit/5b3318f1b8

[13:24] <jnthn> That wasn't it, alas

[13:25] <jnthn> language class; bbiab

[13:44] <markmont> brrt: you should be able to boot using http://daily-builds.netbsd.org/pub/NetBSD-daily/netbsd-8/201708131900Z/amd64/installation/cdrom/boot.iso

[13:45] <markmont> bttr: you'll need to configure networking manually in the installer and then point the installer at the install sets at http://daily-builds.netbsd.org/pub/NetBSD-daily/netbsd-8/201708131900Z/amd64/binary/sets/

[13:45] <markmont> More details are at http://daily-builds.netbsd.org/pub/NetBSD-daily/netbsd-8/201708131900Z/amd64/INSTALL.html

[14:06] *** domidumont joined
[14:12] <brrt> aha

[14:14] <timotimo> my face when business insider puts a tweet i wrote in one of their articles:  :/

[14:15] <brrt> did they?

[14:16] <timotimo> yeah, it had almost no impact on the tweet itself :P

[14:16] <timotimo> http://www.businessinsider.de/save-418-saving-the-http-teapot-error-2017-8?r=US&IR=T

[14:16] <timotimo> i wouldn't have known if it weren't for a friend who pointed it out

[14:19] <Zoffix> :o you're internet famous \o/ :D

[14:19] <timotimo> the tweet got fewer impressions than most of my others

[14:19] <Zoffix> lol

[14:21] <timotimo> 302 impressions, 47 engagements

[14:26] <dogbert17_> timotimo: does this provide any useful information? https://gist.github.com/dogbert17/a09452b8044db07b9ec3cc5ed5edea59

[14:30] <timotimo> i haven't spent any time on this problem yet

[14:41] *** TimToady joined
[15:05] * jnthn back

[15:05] *** brrt joined
[15:12] <timotimo> amusing, since the eliminate_pointless_gotos opt never found an inlined block it didn't care about keeping annotations from the last instructions around

[15:15] <timotimo> i made it through code-gen and now the resulting code blows up \o/

[15:16] <jnthn> Hmm, this is so confusing

[15:16] <jnthn> It panics about adding a pointer from fromspace into the worklist

[15:17] <jnthn> But when I compare the pointer myself with the fromspace locations it's OK?!

[15:17] <jnthn> And actually in gen2

[15:17] <jnthn> o.O

[15:17] <dogbert17_> explaining something to others might sometimes make the solution appear :)

[15:18] <timotimo> is one of the tc's fromspace size messed up?

[15:21] <jnthn> No, they look OK

[15:21] <jnthn> It only tests it against current TC anyway

[15:21] <jnthn> There are other threads but this is thread 1 dealing with a frame it owns

[15:23] <timotimo> "there are other threads like this, but this 1 is mine"

[15:25] <timotimo> huh, how did i end up with an invalid sc index

[15:25] <jnthn> Wow, this time I got it blowing up in scan_lexicals

[15:25] <jnthn> Which is just like the one dogbert17_ had

[15:27] <dogbert17_> does it provide any new clues?

[15:36] *** lizmat joined
[15:38] <jnthn> I'm just starting to wonder if two threads are trying to GC the smae thing

[15:38] <jnthn> Or somehow claimed the same thing

[15:40] *** dogbert17 joined
[15:40] <dogbert17> like this? https://gist.github.com/dogbert17/a09452b8044db07b9ec3cc5ed5edea59

[15:41] <brrt> jnthn, markmont: i commented on the PR. I hope I'm being reasonable: https://github.com/MoarVM/MoarVM/pull/643#issuecomment-322812008

[15:42] <jnthn> dogbert17: Looks very similar to that, eys

[15:42] <jnthn> *yes

[15:43] <jnthn> No, the ->gc_work lists look fine

[15:43] <jnthn> It wasn't both stolen and marking itself

[15:46] *** ggoebel joined
[16:03] <timotimo> disabling inlining after one inline has been done gets me a lot further into the nqp build

[16:04] <Geth> Â¦ MoarVM/atomics: 5d346b8dfb | (Jonathan Worthington)++ | src/core/interp.c

[16:04] <Geth> Â¦ MoarVM/atomics: Correct invokewithcapture GC handling.

[16:04] <Geth> Â¦ MoarVM/atomics:

[16:04] <Geth> Â¦ MoarVM/atomics: Make sure we never let the stored capture become outdated, and also

[16:04] <Geth> Â¦ MoarVM/atomics: be sure to write barrier it just in case.

[16:04] <Geth> Â¦ MoarVM/atomics: review: https://github.com/MoarVM/MoarVM/commit/5d346b8dfb

[16:05] <jnthn> That seems to help a good bit

[16:06] <dogbert17> so you found something

[16:25] <jnthn> Yeah

[16:25] <jnthn> Well, can't get the atomics tests exploding any more

[16:28] *** zakharyas joined
[16:36] <timotimo> since handlers are based on bytecode order, i can probably throw out the whole "duplicate handlers inside the inlinee" business?

[16:36] <jnthn> timotimo: yeah, I guess so :)

[16:39] <timotimo> wow, holy wat

[16:39] <timotimo> i have here a PHI that has the same version of its register show up a whole bunch of times

[16:40] <jnthn> o.O

[16:40] <timotimo> it also has a crapton of predecessors

[16:40] <timotimo> is this our "make all blocks in the scope of a handler be predecessors of the target block"?

[16:40] <timotimo> PHI              r29(9),  r29(1),  r29(1),  r29(1),  r29(1),  r29(1),  r29(1),  r29(1),  r29(2),  r29(2),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),

[16:40] <timotimo> r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(3),  r29(4),  r29(4),  r29(6),  r29(6),  r29(6),  r29(6),  r29(6),  r29(6),  r29(6),  r29(7),  r29(8)

[16:41] <jnthn> Maybe

[16:41] <jnthn> Though dunno why it'd dupe PHI nodes entries...

[16:43] * timotimo investigates

[16:43] <jnthn> I mean, the CFG arrows are put in waaaay before we do the dominance and SSA

[16:46] <timotimo> it's already there in the "before" part

[16:47] <jnthn> Yeah, so it's presumably somehting going on when computing SSA

[16:47] <jnthn> Hey, I wonder if we somehow get dupe entries in the pred/succ?

[16:47] * timotimo looks

[16:47] <timotimo> Successors: 130, 131, 129, 163

[16:47] <timotimo> Predeccessors: 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,

[16:47] <timotimo> 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162

[16:47] <timotimo> so no, no duplicates

[16:51] *** robertle joined
[16:58] <timotimo> hm, it really just makes a phi with as many entries as there are pred bbs

[16:59] <dogbert17> jnthn: I'm not 100% certain but it looks like your last commit might have nailed https://github.com/MoarVM/MoarVM/issues/554

[17:00] <jnthn> dogbert17: hmm, nice :)

[17:04] *** zakharyas joined
[17:43] <nwc10> jnthn: ASAN refuses to make any comment on your branch :-(

[18:28] *** ggoebel joined
[18:41] <jnthn> That's...good, no? :)

[18:51] <samcv> you guys have seen this RT right? https://rt.perl.org/Public/Bug/Display.html?id=131857#ticket-history

[18:52] <samcv> Bug #131857 for perl6: [REGRESSION] Aliased named parameters broke in a recent MoarVM commit

[18:52] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131857

[18:52] <samcv> no bug with MVM_SPESH_DISABLE=1

[19:03] <jnthn> Yup

[19:04] <jnthn> Bit of an odd one...

[19:04] <jnthn> Will see if I can figure it out tomorrow

[19:21] <nwc10> jnthn: ish - it does mean that it doesn't offer you a smoking gun

[19:22] <jnthn> nwc10: Ah, but it seemed like my fixes nailed it :)

[19:22] <nwc10> excellent

[19:33] *** ZofBot joined
[20:24] <samcv> jnthn, so with our current string search and how i have knuth-morris-pratt done i use MVM_string_get_grapheme_at_nocheck

[20:28] <samcv> but since KMP never backtracks but sometimes checks the same thing in the haystack. we need a grapheme iterator that you can tell it (iterate forward to this point) or whatever

[20:28] <samcv> is like get_grapheme_at_nocheck except that it can only go forward and is optimized

[21:25] *** markmont joined
[21:36] <jnthn> samcv: So it can skip some graphemes, effectively?

[21:36] <samcv> yes

[21:36] <jnthn> samcv: I think the grapheme iter already has a move to or whatever

[21:36] <samcv> does it?

[21:36] <jnthn> Though I can't remember if it works relatively

[21:36] <samcv> hm

[21:36] <jnthn> I thought so..

[21:37] <jnthn> samcv: https://github.com/MoarVM/MoarVM/blob/master/src/strings/iter.h#L54

[23:29] <samcv> luckiliy the collation algorithm seems to be fairly fast. actually it's faster than `cmp`

[23:29] <samcv> haha

[23:30] <samcv> i was pretty suprised though

[23:30] <samcv> cmp: 0.228676s unicmp: 0.072635 for "\c[173568]" x 10000000 unicmp "\c[173568]" x 10000000;

[23:30] <samcv> suprisingly...

[23:30] <samcv> so i guess that means my code is good :)

[23:31] <samcv> jnthn, thanks for the link to that :)

[23:31] <samcv> wonder how much effect that will have on it

[23:33] <samcv> jnthn, i think the reason unicmp is faster than cmp is because i use codepoint iterators rather than get_grapheme_at_unchecked

[23:33] <samcv> well that's the only thing I can think of

[23:34] <samcv> well also the ring buffer means that it's actually only slightly slower than other methods of sorting strings, going down it very fast until it finds a difference

[23:37] <TimToady> samcv: btw, was very nice to finally meet you in person at TPCiA

[23:37] <samcv> you too :)

[23:38] <samcv> it was really great to meet the community, as it was my first programming conference ever. but i thought it turned out great :-)

[23:39] <TimToady> yes, I remember the very first Perl conference, where a whole bunch of already close friends met each other for the first time, weird feeling...

[23:39] * TimToady hopes all your conferences go as well

[23:39] <jnthn> samcv: Wow, nice! More correct *and* more fast :)

[23:40] <TimToady> .oO(does that mean we should be thinking about slipping it in in place of cmp?)

[23:41] <samcv> well i would have said no if you saked me a month ago

[23:41] <samcv> but since then...

[23:41] <TimToady> something to think about, anyway

[23:41] <samcv> but since then now it's faster

[23:41] <samcv> but i can make cmp faster as well though

[23:41] <TimToady> or maybe cmp isn't fast enoug

[23:42] <samcv> maybe

[23:42] <TimToady> yeah, that :)

[23:42] <TimToady> well, maybe a 6.d decision

[23:42] <jnthn> .oO( Last time I got saked was in a Japanese restaurant... )

[23:42] <TimToady> conceivably there are people depending on current cmp order

[23:42] <jnthn> Making cmp faster is probably good

[23:42] <TimToady> oh, I can do that at home

[23:42] <samcv> maybe i will stop being impressed with my results but i've only been programming as a perl 6 dev for just under a year. so maybe i will get used to it

[23:42] <TimToady> I mean, saked, not cmp

[23:43] <samcv> since before joining the team i had never had the opportunity to do something really important with my coding

[23:43] * jnthn is impressed with samcv++'s results

[23:43] <TimToady> by the time you're my age you'll start hitting some of the mental limits :)

[23:43] <samcv> hah

[23:44] <samcv> it's a weird feeling though. just wondering if it wears off

[23:44] <samcv> but i'm probably also getting better and that's part of it

[23:44] <TimToady> there are plenty of other weird feelings you can explore in this space :)

[23:44] <samcv> but maybe i shuold just see it as feeling of getting better

[23:45] <samcv> but i'm not a very good accessor of my own ability, but when i finish it then it becomes more clear that i was able to do it all along :P

[23:45] <TimToady> me, I'm getting the feeling of losing control over the whole project, but since that already happened to me once with Perl 5, I'm rather enjoying it this time, since it turned out pretty well before :)

[23:45] <samcv> heh

[23:47] *** stmuk_ joined
[23:47] <jnthn> Yeah, I remember the time I could keep track of all the Perl 6 stuff that was going on.

[23:47] * TimToady ducks back out to figure out why !dba isn't called at all from P6-level grammars, even when there's an explicit :dba()

[23:48] <jnthn> Now? No chance. :)

[23:48] <jnthn> I can't even keep track of the bits I'm meant to be doing :P

[23:49] <jnthn> Can't even remember to go to bed. D'oh. :)

[23:49] <jnthn> Well, back tomorrow...shouldn't screw my sleep up too much, a week tomorrow I'll be getting kicked off a sleeper train at 8:30am...

[23:49] <jnthn> o/

[23:49] <samcv> jnthn, i guess that's a good thing? maybe?

[23:49] <samcv> since lots of things are going on?

[23:50] <jnthn> samcv: Oh yes.

[23:50] <jnthn> samcv: I mean, the ecosystem being small enough that I knew all the stuff we had a module for wasn't so preferable ;)

[23:50] <samcv> heh

[23:50] <samcv> yeahâ€¦ that's not a great thing

[23:52] <jnthn> Was quite some years ago. :)

[23:53] <jnthn> Anyways, really sleep o/

[23:53] <samcv> night o/
