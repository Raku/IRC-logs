[01:56] *** ilbot3 joined
[03:40] *** evalable6 joined
[03:40] *** nativecallable6 joined
[03:40] *** greppable6 joined
[03:40] *** quotable6 joined
[03:40] *** bloatable6 joined
[03:40] *** unicodable6 joined
[03:40] *** committable6 joined
[03:40] *** releasable6 joined
[03:40] *** benchable6 joined
[03:40] *** coverable6 joined
[03:40] *** bisectable6 joined
[03:40] *** squashable6 joined
[03:40] *** statisfiable6 joined
[05:23] *** patrickz joined
[06:02] *** domidumont joined
[06:03] *** ggoebel joined
[06:46] *** nativecallable6 joined
[06:46] *** bloatable6 joined
[06:46] *** quotable6 joined
[06:46] *** coverable6 joined
[06:46] *** greppable6 joined
[06:46] *** benchable6 joined
[06:46] *** committable6 joined
[06:46] *** bisectable6 joined
[06:46] *** unicodable6 joined
[06:46] *** evalable6 joined
[06:46] *** releasable6 joined
[06:46] *** squashable6 joined
[06:46] *** statisfiable6 joined
[07:05] <samcv> good * everybody

[07:12] *** domidumont joined
[07:49] <lizmat> samcv o/

[08:11] *** zakharyas joined
[08:15] <samcv> hi :)

[08:33] <moritz> ho

[08:41] *** robertle joined
[08:44] <lizmat> jnthn: trying to grok the performance of 1.contains versus "1".contains versus 1.Str.contains

[08:45] <lizmat> what I see is that "add_to_cache" is being called for every call to Cool.contains

[08:45] <lizmat> (line 2481 in BOOTSTRAP)

[08:45] <lizmat> and that can only happen if @possibles == 1 && pure_type_result

[08:46] <lizmat> so why does it think it can cache, but doesn't cache ?

[08:50] <lizmat> afk for a few hours&

[09:17] <jnthn> lizmat: Wasn't that the flattening args thing?

[10:19] <Zoffix> Yes

[10:19] <Zoffix> <jnthn> It'd be better named try_add_to_cache :) https://irclog.perlgeek.de/perl6-dev/2017-10-09#i_15279031

[10:26] <Zoffix> The 1.contains goes through .contains: |c call which isn't getting cached

[10:29] * ilmari keeps getting confused between samcv here and smcv on another channel

[10:30] <lizmat> Zoffix: indeed

[11:37] <lizmat> jnthn: is there a reason Channel uses classes / nqp::istype for CLOSE/FAIL, rather than using an Mu.new and nqp::eqaddr ?

[11:43] <lizmat> actually, only for CLOSE

[12:05] <jnthn> FAIL 'cus we have to transmit the exception

[12:05] <jnthn> CLOSE for uniformity with FAIL :)

[12:05] <jnthn> It could be a constant

[12:06] <jnthn> Could eqaddr on the type object too :)

[12:09] <lizmat> ah, yes

[12:09] <lizmat> lemme try

[12:11] <dogbert2> jnthn: didn't you fix https://github.com/MoarVM/MoarVM/issues/721 and https://github.com/MoarVM/MoarVM/issues/724 a few days ago?

[12:13] <jnthn> dogbert2: I believe so

[12:25] *** zakharyas joined
[15:06] *** zakharyas joined
[15:08] <timotimo> jnthn: would merging spesh_faster_shutdown be fine for inclusion in our upcoming release?

[15:09] *** zakharyas joined
[15:10] <jnthn> timotimo: Does it actually help?

[15:11] <jnthn> For true global destruction we'd need to do something more sophisticated I think (not that --full-cleanup works in general anyway)

[15:11] <timotimo> it does

[15:11] <jnthn> And for normal exit...we don't tend to have any foreground threads, so the exit goes pretty fast anyway?

[15:11] <timotimo> before i added that the time for perl6 -e '' was mostly 0.1, afterwards it was mostly 0.09

[15:15] <timotimo> i'm not actually sure why it helps :)

[15:15] <timotimo> can't really callgrind it

[15:16] <timotimo> that's also why i asked for others to test it

[16:47] *** domidumont joined
[16:51] *** lizmat joined
[16:52] <timotimo> with the lack of testing and measurement i'd be totally fine with not getting this in the release

[17:14] *** robertle joined
[17:52] *** ilbot3 joined
[17:58] <timotimo> jnthn: it'd be cool if we could get a Promise constructor for "already kept/broken" conditions into this release

[17:59] <timotimo> oops, ww

[18:04] *** coverable6 joined
[18:04] *** bloatable6 joined
[18:04] *** quotable6 joined
[18:04] *** evalable6 joined
[18:11] *** AlexDaniel` joined
[18:32] *** evalable6 joined
[20:14] *** brrt joined
[20:19] <brrt> good * #moarvm

[20:19] <brrt> my double-load-copy-replacement code is broken somehow :-(

[20:22] <brrt> luckily the optimizer isn't merged yet

[20:37] * jnthn suggests merging after the weekend release ;)

[20:43] <AlexDaniel`> by the way, who is doing the moarvm release this time?

[20:44] <AlexDaniel`> jnthn again? I have a feeling that someone else was volunteering

[20:44] <AlexDaniel`> but I don't really remember now

[20:44] <jnthn> I think samcv++ volunteered

[20:51] <jnthn> AlexDaniel`: Do we have any outstanding blockers you're aware of?

[20:51] <AlexDaniel`> jnthn: no

[20:51] <jnthn> Alright. I'm heading away for some vacation on Sunday.

[20:51] <AlexDaniel`> jnthn: brrt++ fixed the JIT issue and that's all I know right now

[20:51] <jnthn> Great. :) brrt++

[20:52] <jnthn> I'll probably have a few hours tomorrow if there's anything. Don't plan to do anything drastic, will write some tests for the stuff I did today though

[20:53] <AlexDaniel`> OK. jnthn++

[20:53] <AlexDaniel`> .tell samcv https://irclog.perlgeek.de/moarvm/2017-10-19#i_15327049

[20:53] <yoleaux> AlexDaniel`: I'll pass your message to samcv.

[21:32] *** xi- joined
[21:37] *** MasterDuke joined
[21:47] *** xi- joined
[21:50] *** xi- joined
[21:56] *** lizmat joined
[22:01] *** ilmari[m] joined
[22:28] *** AlexDaniel joined
