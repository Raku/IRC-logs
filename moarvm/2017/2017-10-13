[00:11] *** Geth_ joined
[00:13] *** Geth_ joined
[00:13] *** Geth_ joined
[00:14] *** Geth_ joined
[00:16] *** Geth_ joined
[01:56] *** ilbot3 joined
[04:31] <ugexe> should calls to getenv() be using wgetenv() on windows in instances when getenv() is expected to contain a path?

[04:34] <ugexe> if so note that there is a uv_os_getenv that can do this

[06:00] *** lizmat joined
[06:02] *** domidumont joined
[06:18] *** rba_ joined
[06:31] *** domidumont joined
[06:40] *** lizmat joined
[06:58] *** Ven joined
[07:40] *** rba joined
[08:12] *** brrt joined
[08:12] *** zakharyas joined
[08:24] *** lizmat joined
[08:33] *** KDr2 joined
[08:54] *** lizmat joined
[08:56] <jnthn> ugexe: I dunno the ins and outs of that, but I think environment handling on Windows was patched a while back to make it do the right thing with regard to encodings and so on (think that's related to why we declare a wmain instead of main function on Windows also).

[09:34] *** Ven joined
[09:44] *** lizmat joined
[09:50] *** ZofBot joined
[10:14] *** lizmat joined
[10:31] *** lizmat joined
[11:15] *** lizmat joined
[11:16] <MasterDuke> `MVMuint64 arg_idx   = arg_match & MVM_MULTICACHE_ARG_IDX_FILTER;` seems like it might be the problem when i try changing MVM_INTERN_ARITY_LIMIT to 16

[11:16] <MasterDuke> MVM_MULTICACHE_ARG_IDX_FILTER is `(2 * MVM_INTERN_ARITY_LIMIT - 1)`

[11:17] *** lizmat_ joined
[11:17] <MasterDuke> and when i get segfaults, arg_idx = 16

[11:18] <MasterDuke> the next line is ` MVMRegister  arg       = args[arg_idx];`, and then it dies on then next line `MVMSTable   *st        = STABLE(arg.o);`

[11:19] *** lizmat__ joined
[11:24] *** lizmat joined
[11:46] *** Ven joined
[12:00] *** ZofBot joined
[12:06] <samcv> MasterDuke, can you check the current PR for join?

[12:06] *** buggable joined
[12:06] <samcv> i updated it yesterday or so

[12:07] <MasterDuke> samcv: will do

[12:09] *** buggable joined
[12:10] *** buggable joined
[12:13] *** [equa] joined
[12:25] *** cog_ joined
[12:29] <MasterDuke> samcv: i find it easier to follow now

[12:30] *** zakharyas joined
[12:31] *** [equa] left
[12:33] *** lizmat joined
[13:27] *** Ven joined
[13:28] *** Ven_ joined
[13:32] <samcv> nice :)

[13:39] *** brrt joined
[13:51] <MasterDuke> what's the website for those moarvm daily benchmarks?

[13:57] *** Ven joined
[13:57] <MasterDuke> .ask jnthn think https://github.com/MoarVM/MoarVM/pull/689 is good now?

[13:57] <yoleaux> MasterDuke: I'll pass your message to jnthn.

[14:33] *** Ven_ joined
[14:39] *** Ven_ joined
[14:50] <Geth_> Â¦ moarvm.org: MasterDuke17++ created pull request #8: Remove period

[14:50] <Geth_> Â¦ moarvm.org: review: https://github.com/MoarVM/moarvm.org/pull/8

[16:10] *** ZofBot joined
[16:19] *** ZofBot joined
[16:47] *** camelia joined
[17:20] <MasterDuke> samcv: have you thought about implementing nqp::eqat(ic|im|icim) for the jvm?

[17:20] <samcv> well jvm doesn't support NFG

[17:21] <MasterDuke> hm. what about js?

[17:21] <samcv> java does support normalization though. apparently

[17:23] <samcv> not sure if it supports Graphpme_Cluster_Break though

[17:23] <MasterDuke> in INTERPOLATE there is an `#?if moar <do eqat* stuff> #?endif #!if !moar <do ordbaseat stuff> #?endif`

[17:23] <samcv> icu does

[17:23] <MasterDuke> but ordbaseat is NYI for jvm, so neither works for it

[17:25] <MasterDuke> might make sense to at least add NYI eqat* ops for jvm?

[17:26] <samcv> MasterDuke, yeah

[17:26] <MasterDuke> oh, and ordbaseat is also NYI for js

[17:27] <MasterDuke> guess i could just change that `$!if !moar` branch to die, since it would just throw NYI exceptions anyway

[17:28] <samcv> i would leave it until it's implemented

[17:29] <MasterDuke> well, couldn't equat* for jvm/js be implemented in terms of ordbaseat once it's implemented?

[17:30] *** domidumont joined
[17:31] <samcv> MasterDuke, tell me which file you're looking at so i can go to it and look

[17:33] <MasterDuke> https://github.com/rakudo/rakudo/blob/nom/src/core/Match.pm#L337

[17:34] <samcv> ok yeah leave that code

[17:36] <MasterDuke> why not just create eqat* for js/jvm that throw NYI like the ordbaseat do now? then i can remove those if/else and the behavior will be exactly the same as it is now

[17:38] <MasterDuke> the #!if !moar code that exists doesn't work for jvm/js anyway, it's just so the compilers don't complain about unknown ops

[17:38] <samcv> i don't want to have to go back and search for that code. let alone remember

[17:39] <MasterDuke> ?

[17:39] <samcv> and if i make nfg a thing on jvm i'll add ordbaseat before adding those ops

[17:40] <samcv> if you delete it. and i implement ordbaseat on jvm. then i'll have to remember to go into the history and find it. which i may not remember, or someone else may not know

[17:40] <samcv> unless you want to comment it out and add a die in there

[17:42] <samcv> but i'd prefer it just be left alone. maybe with a comment above it to say they don't have ordbaseat yet. i will add a comment to it

[17:42] <MasterDuke> i'll add it, i'malready working on a PR for that code

[17:48] <samcv> ok cool

[18:10] *** AlexDaniel- joined
[18:10] <MasterDuke> hm. or implement eqat* in terms of ordbaseat for jvm/js right now. then both will work when ordbaseat is actually implemented and we can remove the if/else

[22:32] <MasterDuke> timotimo: did you see my comments about what happened when i increased MVM_INTERN_ARITY_LIMIT? any suggestions?

[22:33] <timotimo> wasn't able to look into it

[22:35] <MasterDuke> i wasn't able to fix it, so i'm going to PR my INTERPOLATE change as is. if people think my workaround isn't good then i'll look into it more

[22:36] <timotimo> i wonder if i should (just?) merge the FSA valgrind thing

[22:37] <MasterDuke> do it

[22:45] <jnthn> Yowser... https://travis-ci.org/croservices/cro-http/jobs/287751428#L1423

[22:45] <yoleaux> 13:57Z <MasterDuke> jnthn: think https://github.com/MoarVM/MoarVM/pull/689 is good now?

[22:45] <yoleaux> 17:22Z <jdv79> jnthn: I just RT'd the one from a week ago - RT#132287 - not sure how to debug that.  never had to debug something threaded like that before.

[22:45] <yoleaux> 19:14Z <jdv79> jnthn: - looks like the scheduler might have enough worker threads... - https://gist.github.com/anonymous/49f84d38087bf12d70eeeda95696a29b

[22:45] <synopsebot> RT#132287 [open]: https://rt.perl.org/Ticket/Display.html?id=132287 [REGRESSION][CONC] stall/block in async heavy code

[22:46] <timotimo> whoopsie-daysies

[22:47] <jnthn> oh wait, it's actually on the 2017.08 Rakudo

[22:47] <jnthn> Not on HEAD

[22:47] <jnthn> So false-ish alarm

[22:48] <timotimo> oh phew

[22:48] <timotimo> latest is just starting

[22:55] <jnthn> I wonder a tad if somehow there's insufficient affinity workers leading to a deadlock in the one above

[22:56] <timotimo> jdv's? it's possible

[22:56] <timotimo> telemeh outputs which thread acquires which low-level lock; that could maybe shed some light, unless it's using something higher-level locking thing

[22:56] <jnthn> I did consider having the supervisor steal from blocked affinity queues and shove the work into the general queue to try and break any such deadlocks

[22:56] <MasterDuke> doubt it's related, but i just had to hard-reset my desktop because a spectest hung it

[22:57] *** weabot joined
[22:57] <timotimo> that doesn't sond so bad

[22:57] <timotimo> MasterDuke: perhaps ram exhaustion?

[22:57] <jnthn> I couldn't actually create a situation that needed it, though :)

[22:57] <jnthn> But maybe now we have one

[22:57] <MasterDuke> timotimo: doubt it, only had one or two other things open

[22:57] <jnthn> Or it could be something else entirely.

[23:00] <jnthn> PalackÃ©ho

[23:00] <timotimo> annoyingly it's not easy to figure out afterwards

[23:00] <jnthn> d'oh

[23:00] <timotimo> oops, root password leaked

[23:00] <jnthn> haha

[23:01] <jnthn> Just a street name

[23:01] <jnthn> That isn't actually where I expected it to be

[23:01] <timotimo> that cro job came up green on latest

[23:01] <timotimo> oh, already 4 minutes since it finished

[23:01] <jnthn> ah, nice

[23:07] <timotimo> i wonder what kind of tooling you could get to cross the gap between a cro app and whatever js is running on the other side

[23:07] <timotimo> i really need to look for a set of snippets or something for react/redux %)

[23:07] *** ggoebel joined
[23:12] *** weabot joined
[23:15] *** rba joined
[23:16] <timotimo> yes, action type and action creator snippets, that's really useful

[23:31] *** nine joined
[23:32] *** TimToady joined
[23:53] *** timotimo joined
[23:56] <jnthn> sleep &

[23:57] <timotimo> gnite jnthn
