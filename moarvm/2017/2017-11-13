[02:55] *** ilbot3 joined
[03:03] *** MasterDuke joined
[03:08] *** releasable6 joined
[05:38] *** evalable6 joined
[06:17] *** domidumont joined
[06:17] *** domidumont1 joined
[06:25] *** domidumont joined
[06:43] *** geospeck joined
[07:12] *** geospeck joined
[08:00] *** brrt joined
[08:04] *** geospeck joined
[08:04] *** domidumont joined
[08:26] *** zakharyas joined
[08:33] *** zakharyas joined
[08:50] <brrt> good * #moarvm

[08:52] <brrt> i've counted and if i'm packing even a bit loosely, i could easily encode most of the info that currently lives in the expr node info structure into the expr operand itself

[08:52] <brrt> this would save memory, but more importantly, random memory accesses

[08:53] <brrt> if i'm packing tightly then i've got room to spare

[08:57] <nwc10> good *, brrt

[08:57] <nwc10> sounds useful - callgrind would give you numbers, but would take a while to do so :-)

[09:53] <brrt> true

[09:53] <brrt> and the object is to have the optimizer or spesh-relevant info in a separate hash table since it's really sparse

[09:54] <brrt> also, so that during modification i don't immediately have to the info array whenever i'm changing the nodes array

[10:11] *** geospeck joined
[10:36] *** geospeck joined
[11:33] <lizmat> m: sub a() { await start { return } }; a  # hmmm, jnthn ?

[11:33] <camelia> rakudo-moar 5f4b61b12: OUTPUT: «MoarVM panic: Internal error: Unwound entire stack and missed handler␤»

[11:34] <jnthn> Already ticketed somewhere, but yeah, I'd not expect that to work out well

[11:34] <lizmat> jnthn: I was wondering about the significance of "anon sub THREAD-ENTRY()" in Thread.pm

[11:34] <lizmat> 1. why is that a sub and not just a block, and 2. why anon?

[11:35] <jnthn> 1. because it having a name in the backtrace is really useful and maybe even relied upon in the backtrace heuristics, and 2. 'cus we only want the name on the sub, not to install it somewhere

[11:37] <lizmat> ok, so it was not intended to catch any "return" from the started code ?

[11:38] <jnthn> It couldn't

[11:38] <jnthn> return is resolved purely lexically

[11:39] <lizmat> TIL

[11:40] <lizmat> BTW, is "sub a() { await start { return } }; a" worth an Issue ?

[11:41] <jnthn> It's already filed somewhere

[11:41] <lizmat> ack

[11:43] <lizmat> jnthn: is it correct that no code gets executed after https://github.com/rakudo/rakudo/blob/master/src/core/Thread.pm#L31 ever ?

[11:45] *** geospeck joined
[11:47] <jnthn> Not sure I follow

[11:47] <jnthn> I mean, if you put code after it, it'll run

[11:47] <jnthn> But only if the code() returns

[11:47] <jnthn> Which for any thread pool thread, it never will

[11:47] <jnthn> Because they sit in an infinite loop

[11:47] <jnthn> Reading from the work queue

[11:49] <lizmat> ah, duh

[11:50] <lizmat> when I do a start block, it doesn't actually run its own thread, it just adds a task

[11:50] <lizmat> duh

[11:56] <jnthn> :)

[11:58] *** brrt joined
[12:29] *** AlexDaniel joined
[12:57] *** domidumont joined
[13:41] *** greppable6 joined
[13:41] *** domidumont joined
[13:56] *** zakharyas joined
[14:13] *** brrt joined
[14:23] *** greppable6 joined
[14:26] *** brrt joined
[14:32] <dogbert2> hmm, t/spec/S17-promise/stress.t has a tendency to hang when run with MVM_SPESH_BLOCKING=1

[15:18] *** brrt joined
[16:14] *** brrt joined
[16:20] <ugexe> https://github.com/libuv/libuv/issues/1625 - any ideas? we'll be stuck to 1.14.2 (which requires a revert) otherwise

[16:27] *** geospeck joined
[16:38] * brrt looking

[16:39] <brrt> yay, i found a bug in expr_ops

[16:41] <brrt> and the solution is… let's do the nonzero-field trick everywhere

[17:06] *** zakharyas joined
[17:07] <jnthn> hm, not having much luck with https://github.com/MoarVM/MoarVM/issues/749

[17:07] *** domidumont joined
[17:07] <jnthn> Thought I knew what might be going on but...no

[17:07] <jnthn> I can't figure out where there's a moment it's unmarked

[17:09] <jnthn> Will dig more tomorrow

[17:09] <ugexe> oh i may have solved the libuv thing

[17:11] <nwc10> jnthn: that's "ok 62 - CLOSE phaser sees correct outer scope" ?

[17:12] <nwc10> ASAN refuses to make any comment :-(

[17:16] <jnthn> Yeah

[17:16] <jnthn> valgrind reliably triggers

[17:17] <jnthn> Gotta head home now though...will look at it some more in the morning :) o/

[17:17] <nwc10> yes. a fresh head feels like the right pan

[17:17] <nwc10> plan

[17:39] *** brrt joined
[18:17] *** zakharyas joined
[18:23] *** geospeck joined
[18:48] *** TimToady joined
[19:01] *** geospeck joined
[20:21] * lizmat wonders if it isn't time for a MoarVM version bump?

[20:21] <lizmat> (looks like it's 13 commits behind)

[20:21] * Zoffix bumps

[20:22] <jnthn> That's an unlucky number. Let's wait for 14. ;)

[20:22] <lizmat> cool

[20:22] <lizmat> hehe

[20:22] <lizmat> it's at 70, that's already 5x 14  :-)

[20:28] *** releasable6 joined
[20:35] *** patrickz joined
[20:35] *** robertle joined
[20:48] *** AlexDaniel joined
[21:18] <Geth> ¦ MoarVM: ugexe++ created pull request #752: Revert "Use uv_fs_copyfile API"

[21:18] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/752

[21:46] *** zostay_ joined
[21:49] *** BinGOs_ joined
[21:53] *** leedo joined
[21:54] *** unicodable6 joined
[21:56] *** squashable6 joined
[22:07] *** ilmari[m] joined
[22:11] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/11/13/2017-46-spesh-explained/

[22:17] *** MasterDuke joined
[22:21] *** benchable6 joined
[22:21] *** coverable6 joined
[22:22] *** quotable6 joined
[22:22] *** bisectable6 joined
[22:22] *** releasable6 joined
[22:22] *** committable6 joined
[22:22] *** nativecallable6 joined
[22:29] *** squashable6 joined
[22:30] *** Ven joined
[22:39] *** AlexDaniel` joined
[23:16] *** statisfiable6 joined
[23:27] *** statisfiable6 joined
[23:59] <MasterDuke> is MVMStringBody.num_graphs guaranteed to always be correct?
