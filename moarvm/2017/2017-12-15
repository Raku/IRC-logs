[00:19] *** Morfent joined
[00:40] *** TimToady joined
[01:15] *** MasterDuke joined
[03:01] *** ilbot3 joined
[04:05] *** bart___ joined
[04:10] <brrt> good * #moarvm

[04:10] <brrt> good night, for all intents and purposes

[04:10] <brrt> ASAN is complaining loudly of memory leaks in spesh

[04:10] <brrt> which is a pain because that was not what i wanted to research

[04:11] <brrt> patches coming up, obviously

[04:45] <Geth> ¦ MoarVM/memory-leak-fixes: 85ca55f968 | (Bart Wiegmans)++ | 5 files

[04:45] <Geth> ¦ MoarVM/memory-leak-fixes: Fix memory leaks reported by ASAN

[04:45] <Geth> ¦ MoarVM/memory-leak-fixes:

[04:45] <Geth> ¦ MoarVM/memory-leak-fixes: There were memory leaks in:

[04:45] <Geth> ¦ MoarVM/memory-leak-fixes: - the string stream decoder separator specification buffer(s)

[04:45] <Geth> ¦ MoarVM/memory-leak-fixes: - the static frame spesh body statistics buffer

[04:45] <Geth> ¦ MoarVM/memory-leak-fixes: - the spesh plan type stats buffer

[04:45] <Geth> ¦ MoarVM/memory-leak-fixes: - the spesh plan, when the static frame could not be added

[04:45] <Geth> ¦ MoarVM/memory-leak-fixes: review: https://github.com/MoarVM/MoarVM/commit/85ca55f968

[05:20] <brrt> there's another leak in nativecall build of the jit code object, it seems

[05:23] <brrt> but that's a bit more mysterious it seems

[05:24] <Geth> ¦ MoarVM/memory-leak-fixes: 3a772a67c1 | (Bart Wiegmans)++ | src/strings/unicode_ops.c

[05:24] <Geth> ¦ MoarVM/memory-leak-fixes: Another leak in unicode_ops.c

[05:24] <Geth> ¦ MoarVM/memory-leak-fixes:

[05:24] <Geth> ¦ MoarVM/memory-leak-fixes: Would decode string to ascii, which would allocate the result, which

[05:24] <Geth> ¦ MoarVM/memory-leak-fixes: would then not be freed.

[05:24] <Geth> ¦ MoarVM/memory-leak-fixes: review: https://github.com/MoarVM/MoarVM/commit/3a772a67c1

[06:37] *** brrt joined
[06:54] *** domidumont joined
[07:01] *** domidumont joined
[07:15] <brrt> .tell nine we can apparently leak jitcode from MVM_nativecall_buidl

[07:15] <yoleaux> brrt: I'll pass your message to nine.

[07:15] <brrt> i'm not seeing how since i'd think that it be garbage-collected

[07:16] <Geth> ¦ MoarVM: 509315503d | (Bart Wiegmans)++ | src/jit/linear_scan.c

[07:16] <Geth> ¦ MoarVM: [JIT] lets not overengineer linear-scan spill loop

[07:16] <Geth> ¦ MoarVM:

[07:16] <Geth> ¦ MoarVM: The orignal pointer-pointer plus pointer was much simpler, so lets

[07:16] <Geth> ¦ MoarVM: just make it explicit rather than muck about with && to force order

[07:16] <Geth> ¦ MoarVM: and conditionality into assignment.

[07:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/509315503d

[07:36] <Morfent> sorry if this is the wrong place to ask, but would support for locales in moar be something that'd be worth contributing?

[07:39] <moritz> Morfent: I think this is absolutely the right place to ask

[07:40] <moritz> my experience with locales in Perl 5 isn't great, so I'm a bit biased against them, but it's worth waiting for more opinions :-)

[07:40] <Morfent> perfect, thanks

[07:46] *** brrt joined
[09:28] *** zakharyas joined
[09:44] *** Ven` joined
[10:37] *** brrt joined
[11:27] *** Ven` joined
[13:14] *** Ven` joined
[13:34] *** AlexDaniel joined
[14:20] *** Ven` joined
[14:43] <nine> .

[14:43] <yoleaux> 07:15Z <brrt> nine: we can apparently leak jitcode from MVM_nativecall_buidl

[14:43] <brrt> ohai nine

[14:43] <nine> hi brrt

[14:44] <brrt> how are you doing

[14:44] <brrt> i'm not sure how exactly we leak jitocde, and to all extents it seems like we can be leaking expr trees

[14:45] *** Zoffix joined
[14:45] <Zoffix> Reminder: release is in 2 days and we still have 3 release blockers, if anyone can figure out how to fix them: https://github.com/rakudo/rakudo/issues?q=is%3Aissue+is%3Aopen+label%3A%22%E2%9A%A0+blocker+%E2%9A%A0%22

[14:48] *** Zoffix left
[14:56] <lizmat> S01-perl-5-integration/basic.t pretty much segfaults 50+% of the time for the "Passing a Perl 6 coderef to Perl 5" test

[14:56] <brrt> blimey

[14:56] <lizmat> oddly enough, this appears *less* if the system is under load

[14:57] <lizmat> and I haven't been able to get it to crash with MVM_JIT_EXPR_DISABLE=1

[15:00] <nine> brrt: all in all fine, though work right now requires pretty much all my energy. How're you?

[15:01] <nine> brrt: do we leak jit code or jit graphs?

[15:02] <brrt> jitcode

[15:02] <brrt> also jit trees, no jit graphs

[15:02] <brrt> i'm not sure how we leak them

[15:03] <nine> brrt: that is only referenced by the NC body and freed in gc_cleanup

[15:05] *** zakharyas joined
[15:06] <brrt> i k now

[15:07] <brrt> so i'm not sure how the leak happens

[15:09] *** geospeck joined
[16:08] *** brrt joined
[16:14] <brrt> well, i do have a hypothesis though

[16:14] <brrt> this happens mostly in short-lived scripts

[16:15] <brrt> so i think it might happen if the process is shut down before spesh/JIT are done

[16:47] <timotimo> uh oh

[16:48] <timotimo> i can't send data on a tcp socket while i'm waiting for data on another

[16:48] <timotimo> that seems rather ... bad?

[16:48] <nine> brrt: MVM_SPESH_BLOCKING=1 should help confirm that hypothesis

[16:48] <brrt> yeah, it stops the issue from happening

[16:49] <brrt> whcih doesn't *quite* prove there is nothing going on though

[17:01] *** AlexDaniel joined
[17:05] *** domidumont joined
[18:22] <timotimo> any opinions on whether we should split the io lock on tcp sockets into one for reading and one for writing?

[18:25] <lizmat> full duplex seems to be the norm, so a split seems appropriate ?

[18:25] <timotimo> i'm impressed it took that long for someone to stumble over this

[18:27] <lizmat> well, I'm glad someone did stumble  :-)

[18:27] <lizmat> *and* reported it  :-)

[18:31] <timotimo> oh, huh

[18:32] <timotimo> there are operations that are neither read nor write. like close

[18:32] <timotimo> or seek or tell ...

[18:32] <timotimo> ugh, this is kind of hairy

[18:32] <lizmat> seek / tell on sockets ?

[18:33] <lizmat> tcp sockets ?

[18:33] <timotimo> or isatty, or fileno

[18:34] <timotimo> libuv does offer read-write-locks

[18:35] <lizmat> afk&

[18:38] <timotimo> though that may not be the right thing at all.

[18:39] *** geospeck joined
[20:15] *** geospeck joined
[20:30] *** geospeck joined
[20:57] *** committable6 joined
[20:58] *** releasable6 joined
[20:58] *** nativecallable6 joined
[20:58] *** squashable6 joined
[20:58] *** bloatable6 joined
[20:58] *** greppable6 joined
[20:58] *** evalable6 joined
[20:58] *** quotable6 joined
[20:58] *** unicodable6 joined
[20:58] *** bisectable6 joined
[20:58] *** benchable6 joined
[20:58] *** reportable6 joined
[20:58] *** coverable6 joined
[20:58] *** statisfiable6 joined
[20:59] *** dogbert17 joined
[21:02] <dogbert17> thought we'd gotten rid of the 'Must not GC when in the specializer/JIT' but I was wrong

[22:26] *** ggoebel joined
[23:05] *** brrt joined
[23:07] *** synopsebot joined
[23:07] *** Geth joined
[23:10] *** Geth joined
[23:13] *** Geth joined
[23:15] *** MasterDuke joined
