[00:08] *** ggoebel joined
[01:49] *** ilbot3 joined
[06:29] *** domidumont joined
[06:36] *** domidumont joined
[07:14] *** stmuk_ joined
[07:58] *** geekosaur joined
[08:19] *** brrt joined
[08:21] <brrt> good * #moarvm

[08:39] *** praisethemoon joined
[09:13] <timotimo> yo brrt

[09:14] <brrt> \o timotimo

[09:14] <brrt> i'm reasonably confident that a bitmap is the right choice for my set-of-live-ranges-per-block

[09:16] <timotimo> so for each block you'll have as many bits as there are ranges?

[09:18] <brrt> yes

[09:21] <brrt> so with 64 bit pointers, or 32 bit keys, you're going to need a pretty large number of live ranges and a pretty low 'fill' per block to beat the memory usage of the bitmap

[09:21] <brrt> and in terms of compuation efficiency it's no contest

[09:22] <timotimo> mhm

[09:48] *** lizmat joined
[10:37] <Geth> Â¦ MoarVM: 3e4ed6bffe | (Samantha McVey)++ | src/strings/ops.c

[10:37] <Geth> Â¦ MoarVM: Add can_fit_into_8bit funct, put logic used many places into one funct

[10:37] <Geth> Â¦ MoarVM:

[10:37] <Geth> Â¦ MoarVM: There are 7 places we use checks for this within src/strings/ops.c

[10:37] <Geth> Â¦ MoarVM: Writing out the conditionals which sometimes use || and sometimes

[10:37] <Geth> Â¦ MoarVM: use &&. They also sometimes use >= sign and other times > signs.

[10:37] <Geth> Â¦ MoarVM: Make it more consistent for ease of reading and clarity.

[10:37] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3e4ed6bffe

[10:37] <Geth> Â¦ MoarVM: 957759c84b | (Samantha McVey)++ (committed using GitHub Web editor) | src/strings/ops.c

[10:37] <Geth> Â¦ MoarVM: Merge pull request #591 from samcv/master

[10:37] <Geth> Â¦ MoarVM:

[10:37] <Geth> Â¦ MoarVM: Add can_fit_into_8bit funct, put logic used many places into one funct

[10:37] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/957759c84b

[10:37] *** brrt joined
[11:35] *** Ven joined
[11:41] *** Ven_ joined
[12:25] *** Ven_ joined
[12:33] *** Ven joined
[12:50] *** Ven_ joined
[13:04] *** Ven_ joined
[13:15] *** colomon_ joined
[13:17] *** brrt joined
[13:21] *** Ven_ joined
[13:33] *** Ven joined
[13:34] *** lizmat joined
[13:40] *** Ven_ joined
[14:03] *** Ven_ joined
[14:10] *** Ven_ joined
[14:31] *** Ven joined
[14:38] *** Ven_ joined
[14:43] *** ZofBot joined
[14:44] *** Ven_ joined
[14:45] *** ZofBot joined
[14:45] *** Ven_ joined
[14:51] <jnthn> Nice. From scratch MoarVM build on my new machine is 8s. :)

[14:59] <jnthn> And spectest in 106s

[14:59] <jnthn> With TEST_JOBS=16

[15:01] <jnthn> TEST_JOBS=20 shaves a few more seconds off, but not much

[15:02] <jnthn> Though with that a make test of Rakudo (with NativeCall already being precomp'd) takes 2s

[15:03] <jnthn> Heh, with --jobs=20 I can get NQP to spectest in 2s also

[15:03] <jnthn> (hardware improvements)++ :)

[15:27] <MasterDuke_> nice. what is the new hardware?

[15:30] <jnthn> Has a Xeon 6-core (12 virtual) CPU, 32 GB RAM and a fast SSD :)

[15:30] <dogbert17> congrats, nice HW

[15:33] <MasterDuke_> nice. i've gotten kind of spoiled by 20-core (40 virtual) xeons at work and have thought about going the xeon route at home

[15:33] <dogbert17> I thought you're looking into AMD as well

[15:33] <MasterDuke_> but nine's numbers on his new ryzen are also pretty good, and that's a much cheaper option

[15:48] *** lizmat joined
[16:12] *** Ven joined
[16:36] *** Ven_ joined
[17:25] *** praisethemoon_ joined
[18:10] *** AlexDani` joined
[18:11] *** AlexDani` joined
[18:27] *** ZofBot joined
[18:27] *** buggable joined
[18:28] *** Geth joined
[18:42] *** zakharyas joined
[19:17] *** AlexDaniel joined
[19:58] *** geekosaur joined
[20:04] *** praisethemoon joined
