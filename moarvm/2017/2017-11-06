[00:25] *** ggoebel joined
[00:30] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #746: Remove duplicate env variable usage line

[00:30] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/746

[00:37] *** MasterDuke_ joined
[00:47] *** cognominal joined
[01:26] <Geth> ¦ MoarVM: d2a7fe3002 | MasterDuke17++ (committed using GitHub Web editor) | src/main.c

[01:26] <Geth> ¦ MoarVM: Remove duplicate env variable usage line

[01:26] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d2a7fe3002

[01:26] <Geth> ¦ MoarVM: 7f6dfabf20 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/main.c

[01:26] <Geth> ¦ MoarVM: Merge pull request #746 from MasterDuke17/patch-1

[01:26] <Geth> ¦ MoarVM:

[01:26] <Geth> ¦ MoarVM: Remove duplicate env variable usage line

[01:26] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7f6dfabf20

[02:06] *** colomon joined
[02:23] *** colomon joined
[02:28] *** colomon joined
[02:55] *** ilbot3 joined
[03:22] *** colomon joined
[04:03] *** MasterDuke joined
[04:12] *** colomon joined
[06:17] *** evalable6 joined
[06:17] *** eater joined
[06:18] *** unicodable6 joined
[06:18] *** statisfiable6 joined
[06:18] *** bisectable6 joined
[06:18] *** benchable6 joined
[06:18] *** nativecallable6 joined
[06:34] *** evalable6 joined
[06:34] *** releasable6 joined
[06:51] *** bisectable6 joined
[06:51] *** unicodable6 joined
[06:51] *** benchable6 joined
[06:51] *** nativecallable6 joined
[06:51] *** statisfiable6 joined
[07:12] *** colomon joined
[07:12] *** dogbert17 joined
[07:16] *** benchable6 joined
[07:16] *** statisfiable6 joined
[07:16] *** evalable6 joined
[07:18] *** ugexe joined
[07:21] *** statisfiable6 joined
[07:21] *** benchable6 joined
[07:21] *** evalable6 joined
[07:42] *** benchable6 joined
[07:42] *** evalable6 joined
[07:42] *** statisfiable6 joined
[07:50] *** brrt joined
[08:22] *** zakharyas joined
[08:26] <brrt> good * #moarvm

[08:27] <brrt> http://chrisseaton.com/rubytruffle/jokerconf17/ did anyone read this?

[08:27] <brrt> i thought it was pretty cool

[08:27] <brrt> about graal

[08:36] <brrt> so, two more random thoughts

[08:37] <brrt> - i still want to reduce the node size for the expression nodes to 32 bits, and

[08:37] <brrt> - i want to encode the number-of-args in an operator directly in the operator

[08:38] <brrt> so i can use the lower 16 bits as the operator and the upper as the number-of-args and maybe some other flags

[08:38] <brrt> maybe [operator (16), argnum(8), flags(8)]

[09:16] *** AlexDaniel` joined
[09:46] *** ilbot3 joined
[09:55] <jnthn> brrt: Yes, I read that one

[10:05] <nwc10> good *, *

[10:14] *** ilmari[m] joined
[10:16] <jnthn> o/

[10:28] *** robertle joined
[10:41] *** cognominal joined
[10:48] *** Ven joined
[10:53] <dogbert2> jnthn: how's the cold?

[11:08] <jnthn> Clearing up, thanks, though I still feel oddly tired

[12:43] <dogbert2> running   perl6 -e ''  leaves 13 fd's open according to valgrind  # guess that's ok

[12:44] <dogbert2> running   perl6 -e 'await (^5).map({start { say qqx{echo -n foo $_} } })'   leaves 54 fd's open # is that to be expected ?

[12:48] <lizmat> dogbert2: maybe that includes threads ?

[12:49] <lizmat> and the handles for async stdout/stdin/stderr

[12:49] <dogbert2> probably

[12:50] <lizmat> you could try an END { nqp::force_gc } and see if that makes a difference

[12:50] <dogbert2> but shouldn't they be cleaned up at some point or is the OS supposed to do it

[12:50] <ilmari> the OS cleans it up at exit, of course

[12:54] <dogbert2> lizmat: like this ? 'use nqp; await (^5).map({start { say qqx{echo -n foo $_} } }); END { nqp::force_gc }'

[12:54] <ilmari> it's a bunch of pipes and eventpoll and eventfd handles

[12:55] <ilmari> http://paste.scsys.co.uk/565690

[12:55] <lizmat> dogbert2: yeah that looks like it

[12:55] <dogbert2> ilmari: couldn't this become a problem for a more long running, heavily threaded prg

[12:55] <dogbert2> lizmat: Unhandled exception: getexpayload needs a VMException, got P6opaque (X::AdHoc)

[12:56] <lizmat> whee!

[12:56] <dogbert2> :)

[12:56] <lizmat> that happens if you get an exec error in an END block

[12:56] <lizmat> I guess we need some catcher there

[13:00] <dogbert2> lizmat: tried this before 'await (^5).map({start { say qqx{echo -n foo $_} } }); say "test"'  I got the impression that the program hang always came after having written "test"

[13:01] <dogbert2> highly unscientific ofc :)

[13:03] <dogbert2> it's like the code suddenly fails to terminate properly

[13:05] <Zoffix> Wasn't that one golfed down to a nqp proc assync start op?

[13:06] <dogbert2> does anyone happen to know how to get debug symbols for stuff like /lib/i386-linux-gnu/libc.so.6 and /lib/i386-linux-gnu/librt.so.1

[13:06] <dogbert2> Zoffix: did I miss that ?

[13:07] <Zoffix> dogbert2: https://github.com/rakudo/rakudo/issues/1202#issuecomment-339720430

[13:08] <Zoffix> dogbert2: that was found by sticking debug prints and seeing where it hangs and eventually it showed it hangs on nqp::spawnprocasync op

[13:08] <dogbert2> aha, cool

[13:08] * dogbert2 tries the example

[13:08] <dogbert2> the annoying thing, for me at least, is that I only get hangs when I want SEGV's :)

[13:12] <dogbert2> Zoffix: you code hangs after a while like you wrote. If I leave it hanging I find 400+ lines, when running ps auxww, with the text '... [echo] <defunct>'

[13:18] <dogbert2> heh, the code only seems to hang, in fact it continues to run albeit superslow

[13:24] *** SmokeMachine joined
[13:27] *** evalable6 joined
[13:27] *** benchable6 joined
[13:27] *** statisfiable6 joined
[14:00] *** zakharyas joined
[14:37] *** huggable joined
[16:22] *** unicodable6 joined
[16:23] *** Ven joined
[16:58] *** zakharyas joined
[17:32] *** zakharyas joined
[17:40] *** dogbert17 joined
[17:40] <dogbert17> new libuv 1.16 out, https://github.com/libuv/libuv/blob/v1.x/ChangeLog

[17:59] *** Ven joined
[18:04] *** buggable joined
[18:06] <Zoffix> buggable: speed tests

[18:06] <buggable> Zoffix, Known performance tests: I'll, csv, csv-R, csv-c, csv-c-20, csv-cc, csv-easy-pp, csv-easy-pp-pi, csv-easy-xs, csv-easy-xs-20, csv-go, csv-ip5pp, csv-ip5xs, csv-ip5xs-20, csv-ip5xsio, csv-java10, csv-java6, csv-java7, csv-java8, csv-java9, csv-lua, csv-parser, csv-pegex, csv-php, csv-python2, csv-python3, csv-ruby, csv-rust-csvrdr, csv-rust-libcsv, csv-rust-qckrdr, csv-test-pp, csv-test-xs, csv-test-xs-20, csv-xsbc, csv_gram, first, ip5xs, test, te

[18:06] <Zoffix> wc

[18:08] <timotimo> I'll

[18:10] *** buggable joined
[18:12] <Zoffix> That's from rogue entries in the source data :)  "017-10-20 09:00:25 I'll try to remember to run the timings later today. System is rather busy and 3.253"

[18:12] <japhb> timotimo: Message already sent to [Tux] about the rogue lines.  :-)

[18:12] <timotimo> heh.

[18:13] *** buggable joined
[19:49] <samcv> how do i induce crashes

[19:49] <samcv> i tried to get t/spec/S32-str/CollationTest_NON_IGNORABLE-3.t and t/spec/S32-str/encode.t to crash but couldn't even running them on loop

[19:49] <samcv> also tried setting MVM_SPESH_NODELAY=1 and MVM_SPESH_BLOCKING=1 anything else i can do?

[19:50] <samcv> nine, said he saw them under heavy load, but i have 8 threads so i guess i could try to do that but

[19:50] *** cognominal joined
[19:50] <samcv> sounds like a pain is there an easier way

[19:54] <timotimo> you can reduce the size of the nursery in src/gc/collect.h, and you can crank up the memory debug in src/gc/debug.h or what it was

[20:15] *** ggoebel joined
[20:19] <nine> samcv: are you running with MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1?

[20:19] <nine> oh, you did

[20:20] <samcv> yes that's what i said above yeah

[20:20] * nine is just starting to read the backlog

[20:20] *** Ven joined
[21:12] <dogbert17> samcv, nine: https://gist.github.com/dogbert17/f7c4175666417326bb85af8931eba85a

[21:29] <dogbert17> btw, the same valgrind complaint shows up in t/spec/S32-str/CollationTest_NON_IGNORABLE-3.t as well

[21:38] <samcv> dogbert17++

[21:38] <samcv> thank you

[21:38] <dogbert17> hi samcv

[21:38] <MasterDuke> samcv: fwiw, i saw a fail in t/spec/S32-str/CollationTest_NON_IGNORABLE-3.t yesterday during one of my many spectest runs, but didn't try to reproduce

[21:39] <samcv> others have been seeing it but i haven't been able to reproduce locally. but if there's valgrind issue that will make it much easier

[22:00] *** AlexDaniel` joined
[22:03] <samcv> yeah it shows up only with gcc not with clang

[22:09] <Geth> ¦ MoarVM: 11b12a268e | (Samantha McVey)++ | 2 files

[22:09] <Geth> ¦ MoarVM: Fix uninitialized variable access in MVM_unicode_get_property_str

[22:09] <Geth> ¦ MoarVM:

[22:09] <Geth> ¦ MoarVM: With the more recent changes the variable doesn't get set if the

[22:09] <Geth> ¦ MoarVM: codepoint is unknown. Make sure we initialize it so we don't get any

[22:09] <Geth> ¦ MoarVM: segfaults or other issues.

[22:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/11b12a268e

[22:37] *** bisectable6 joined
[22:39] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/11/06/2017-45-uplink-established/

[23:14] *** AlexDaniel` joined
[23:39] *** statisfiable6 joined
[23:39] *** benchable6 joined
[23:39] *** unicodable6 joined
[23:56] *** AlexDaniel` joined
