[00:44] *** squashable6 left
[00:46] *** squashable6 joined
[00:47] *** squashable6 left
[00:50] *** squashable6 joined
[00:54] *** Altai-man_ joined
[00:56] *** sena_kun left
[02:55] *** sena_kun joined
[02:56] *** Altai-man_ left
[04:53] *** committable6 left
[04:53] *** nativecallable6 left
[04:53] *** quotable6 left
[04:53] *** coverable6 left
[04:53] *** unicodable6 left
[04:53] *** squashable6 left
[04:53] *** bloatable6 left
[04:53] *** sourceable6 left
[04:53] *** linkable6 left
[04:53] *** tellable6 left
[04:53] *** notable6_ left
[04:53] *** greppable6 left
[04:53] *** statisfiable6 left
[04:53] *** reportable6 left
[04:53] *** evalable6 left
[04:53] *** shareable6 left
[04:53] *** releasable6 left
[04:53] *** bisectable6 left
[04:53] *** evalable6 joined
[04:53] *** bloatable6 joined
[04:53] *** linkable6 joined
[04:53] *** shareable6 joined
[04:54] *** reportable6 joined
[04:54] *** committable6 joined
[04:54] *** tellable6 joined
[04:54] *** Altai-man_ joined
[04:54] *** statisfiable6 joined
[04:55] *** nativecallable6 joined
[04:55] *** squashable6 joined
[04:55] *** bisectable6 joined
[04:55] *** greppable6 joined
[04:55] *** releasable6 joined
[04:56] *** unicodable6 joined
[04:56] *** quotable6 joined
[04:56] *** notable6 joined
[04:56] *** coverable6 joined
[04:56] *** sourceable6 joined
[04:56] *** sena_kun left
[06:36] <nwc10> good *, #moarvm 

[06:55] *** sena_kun joined
[06:57] *** Altai-man_ left
[07:29] *** zakharyas joined
[07:30] *** zakharyas left
[07:30] *** zakharyas joined
[08:39] *** leont_ joined
[08:39] *** leont joined
[08:54] *** Altai-man_ joined
[08:56] *** sena_kun left
[09:19] <jnthn> good * o/

[09:20] <Altai-man_> o/

[09:21] <Altai-man_> While it's a nice morning, are there any known MoarVM blockers I should know about?

[09:21] <jnthn> Not that I'm aware of. Pretty much everything I've been doing is off in a branch anyway

[09:22] <nwc10> \o

[10:44] *** zakharyas left
[10:55] *** sena_kun joined
[10:57] *** Altai-man_ left
[12:19] <jnthn> So, where was I with the flattening dispatch stuff...

[12:21] <jnthn> Apparently mis-reading output and thinking something didn't work, that does work...

[12:21] <jnthn> Oh, or not

[12:21] <nwc10> work coffee or home coffee today?

[12:22] <moritz> I don't know, but it sounds very flattening :D

[12:29] <jnthn> Home coffee :)

[12:30] <jnthn> Though work coffee soon will gain a new attraction...

[12:30] <jnthn> Getting a proper fitting in place for the air conditioning exhaust tomorrow.

[12:30] <jnthn> Meaning that it should work much better.

[12:31] <jnthn> It was an off-by-one. It's always an off-by-one...

[12:33] <Geth> Â¦ MoarVM/new-disp: 89eeb9725b | (Jonathan Worthington)++ | src/core/callsite.c

[12:33] <Geth> Â¦ MoarVM/new-disp: Fix thinkos in callsite interning

[12:33] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/89eeb9725b

[12:33] <Geth> Â¦ MoarVM/new-disp: df29f4a881 | (Jonathan Worthington)++ | src/disp/inline_cache.c

[12:33] <Geth> Â¦ MoarVM/new-disp: Implement monomorphic flattening dispatch

[12:33] <Geth> Â¦ MoarVM/new-disp: 

[12:33] <Geth> Â¦ MoarVM/new-disp: That is, check if the flattening results in the same shape always, and

[12:33] <Geth> Â¦ MoarVM/new-disp: if so, just run the dispatch program that goes with that shape.

[12:34] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/df29f4a881

[12:34] *** zakharyas joined
[12:54] *** Altai-man_ joined
[12:57] *** sena_kun left
[13:07] <nwc10> still All tests successful

[13:10] <nwc10> jnthn: what was supposed to change in test outout?

[13:11] <jnthn> Nothing in the NQP test; I've got a Rakudo one-liner I'm using to exercise this stuff for now, though surely there's spectests it'll hit too

[13:12] <jnthn> At least, I'd hope that we have spectests for private method dispatch and qualified method dispatch that do flattening.

[13:12] *** vrurg left
[13:12] *** vrurg joined
[13:14] <Geth> Â¦ MoarVM/new-disp: 15e4f9f96b | (Jonathan Worthington)++ | 3 files

[13:14] <Geth> Â¦ MoarVM/new-disp: Do first-level polymorphic flattening dispatch

[13:14] <Geth> Â¦ MoarVM/new-disp: 

[13:14] <Geth> Â¦ MoarVM/new-disp: Also, fix a memory leak spotted in non-flattening polymorphic to

[13:14] <Geth> Â¦ MoarVM/new-disp: polymorphic transitions.

[13:14] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/15e4f9f96b

[13:24] <Geth> Â¦ MoarVM/new-disp: 0026a066e9 | (Jonathan Worthington)++ | src/disp/inline_cache.c

[13:24] <Geth> Â¦ MoarVM/new-disp: Complete polymorphic flattening dispatch handling

[13:24] <Geth> Â¦ MoarVM/new-disp: 

[13:24] <Geth> Â¦ MoarVM/new-disp: At least, for now. We'll have to go a step further once we get to the

[13:24] <Geth> Â¦ MoarVM/new-disp: point of doing something smarter in the megamorphic case.

[13:24] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/0026a066e9

[13:25] <jnthn> And I guess that's flattening done.

[13:25] <jnthn> And the callsite interning improvements

[13:27] * jnthn looks at the todo list

[13:28] <jnthn> So, next is "Teach spesh about dispatch and get it to do the rewrite of a dispatch instruction into guards + linking or inlining."

[13:29] <nwc10> are you sure that's right? Isn't "drink tea" next?

[13:29] <jnthn> Hm, that's a good idea...

[13:30] <nine> Speshing dispatch? Sounds like a minuscule item, hardly worth mentioning...

[13:31] *** lucasb joined
[13:33] <jnthn> How hard could it be?

[13:33] <nine> Not much harder than in-process precompilation :P

[13:36] <jnthn> Hopefully easier... :)

[13:36] <jnthn> At least I in theory know how to do this.

[13:39] <nwc10> jnthn: create an issue; assign it to nine or brrt; step away from the keyboard? :-)

[13:42] <Geth> Â¦ MoarVM/new-disp: 08dcf55427 | (Jonathan Worthington)++ | src/disp/inline_cache.c

[13:42] <Geth> Â¦ MoarVM/new-disp: Add missing inline cache GC marking

[13:42] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/08dcf55427

[13:44] <jnthn> But then nine++ might make *me* a ticket about precompilation ;)

[13:45] <nine> Oh I can do that? :D

[13:45] <jnthn> Oh lovely, the first spesh segfault is in calculating SSA form

[13:47] <nine> Confused by variable argument number obs?

[13:47] <nine> s/obs/ops/

[13:49] <jnthn> Presumably, though I don't immediately spot why timotimo++'s changes to handle this aren't sufficient

[14:22] <nine> jnthn: just omitting the repossession entry for the "Test" stash gets me surprisingly far. I actually only wanted to find out what or how exactly it would explode, but it just doesn't.

[14:22] <nwc10> jnthn: all NQP tests successful. Is this one supposed to be able to get anywhere with Rakduo? (without SPESH)

[14:24] <jnthn> nwc10: Yes, it passes most of Rakudo make test for me, so long as MVM_SPESH_DISABLE=1 is in the environment

[14:25] <jnthn> That has to be on for the whole Rakudo build too

[14:25] <nwc10> OK, trying this (had actually alraedy started)

[14:25] <nwc10> to see if ASAN gets excited

[14:25] <Geth> Â¦ MoarVM/new-disp: ed7865175e | (Jonathan Worthington)++ | src/spesh/graph.c

[14:25] <Geth> Â¦ MoarVM/new-disp: Fix dispatch op info building

[14:25] <Geth> Â¦ MoarVM/new-disp: 

[14:25] <Geth> Â¦ MoarVM/new-disp: A str literal operand is of width 4, not 2, which was why we ended up

[14:25] <Geth> Â¦ MoarVM/new-disp: doing bogus callsite reads. Also remove debug output, now it's seemingly

[14:25] <Geth> Â¦ MoarVM/new-disp: building the right thing.

[14:25] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/ed7865175e

[14:25] <Geth> Â¦ MoarVM/new-disp: 71ebb95b99 | (Jonathan Worthington)++ | src/spesh/graph.c

[14:25] <Geth> Â¦ MoarVM/new-disp: Dispatch instructions should end a basic block

[14:25] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/71ebb95b99

[14:27] <nwc10> Abort. Restart!

[14:33] *** klapperl_ left
[14:50] <timotimo> ooh that's a good catch, i didn't think of different-sized arguments

[14:50] *** greppable6 left
[14:52] *** greppable6 joined
[14:54] *** klapperl joined
[14:55] *** sena_kun joined
[14:56] *** Altai-man_ left
[15:44] <nwc10> jnthn: only reads of NULL pointers from the rakduo tests

[15:44] <nwc10> all 4 seem to be

[15:44] <nwc10>     #0 0x7ff935c8997e in optimize_bb_switch src/spesh/optimize.c:2951

[15:44] <nwc10> ...  SEGV on unknown address 0x000000000028 

[15:45] <jnthn> That'd imply you have spesh enabled? :)

[15:45] <nwc10> oh wait

[15:45] <nwc10> other window

[15:45] <nwc10> yes

[15:47] <nwc10> got: "multi meth disp in new dispatcher NYI\n  in block <unit> at -e line 1\n\n"

[15:47] <nwc10> OK, that one makes sense :-)

[15:48] <nwc10> same again

[15:48] <jnthn> Yup, that's "expected" (in so far as, I really didn't implement that yet)

[15:48] <nwc10> t/02-rakudo/15-gh_1202.t is ASAN but it's ASAN in master

[15:50] <nwc10> unclear why t/05-messages/10-warnings.t

[15:50] <nwc10> is failing but it's not ASAN or SEGV

[16:02] <Geth> Â¦ MoarVM/new-disp: 44791bcf33 | (Jonathan Worthington)++ | 5 files

[16:02] <Geth> Â¦ MoarVM/new-disp: Mark dispatch ops with attrs, stub sp_dispatch_*

[16:02] <Geth> Â¦ MoarVM/new-disp: 

[16:02] <Geth> Â¦ MoarVM/new-disp: These sp_dispatch_* ops will be used when we cannot rewrite the dispatch

[16:02] <Geth> Â¦ MoarVM/new-disp: op into something better.

[16:02] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/44791bcf33

[16:02] <Geth> Â¦ MoarVM/new-disp: 13e702254f | (Jonathan Worthington)++ | 5 files

[16:02] <Geth> Â¦ MoarVM/new-disp: Factor out and fix dispatch op info calculation

[16:02] <Geth> Â¦ MoarVM/new-disp: 

[16:02] <Geth> Â¦ MoarVM/new-disp: It needs to take special care of longer argument sequences too, which

[16:02] <Geth> Â¦ MoarVM/new-disp: would otherwise overrun the buffer for arg info.

[16:02] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/13e702254f

[16:02] <Geth> Â¦ MoarVM/new-disp: 687eefd300 | (Jonathan Worthington)++ | 3 files

[16:02] <Geth> Â¦ MoarVM/new-disp: Analyze dispatch instructions, prepare for opts

[16:02] <Geth> Â¦ MoarVM/new-disp: 

[16:02] <Geth> Â¦ MoarVM/new-disp: This look at the statistics for a given type tuple and decides if the

[16:02] <Geth> Â¦ MoarVM/new-disp: dispatch is never hit, monomorphic, or polymorphic. Note that this is

[16:02] <Geth> Â¦ MoarVM/new-disp: not the same thing as looking at the callsite state, since that is not

[16:02] <Geth> Â¦ MoarVM/new-disp: correlated with particular incoming type tuples. With this, we also know

[16:02] <Geth> Â¦ MoarVM/new-disp: we can't properly handle dispatch, meaning the SEGVs are replaced with

[16:02] <Geth> Â¦ MoarVM/new-disp: panics.

[16:02] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/687eefd300

[16:17] *** MasterDuke joined
[16:18] <MasterDuke> jnthn: it looks like new-disp is about at the point where https://github.com/MoarVM/MoarVM/pull/1286 is relevant?

[16:28] <jnthn> MasterDuke: Yup, *and* if you're up for doing sp_dispatch_* too (once I've done the interpreter ones, of course...) :-)

[16:29] <jnthn> Though those can be another PR

[16:30] <Geth> Â¦ MoarVM/new-disp: 5f61deb194 | (Jonathan Worthington)++ | 2 files

[16:30] <Geth> Â¦ MoarVM/new-disp: Rewrite dispatch_* into sp_dispatch_*

[16:30] <Geth> Â¦ MoarVM/new-disp: 

[16:30] <Geth> Â¦ MoarVM/new-disp: The latter aren't yet implemented, but glancing the spesh log suggests

[16:30] <Geth> Â¦ MoarVM/new-disp: the transformation is either correct or at least somewhat close to

[16:30] <Geth> Â¦ MoarVM/new-disp: correct.

[16:30] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5f61deb194

[16:31] *** leont_ left
[16:33] <jnthn> Also, the plugin guard logging ain't quite right yet, 'cus it thinks that these things are all unhit...

[16:33] <jnthn> But that's not today's problem

[16:45] <Geth> Â¦ MoarVM/new-disp: a063da44fc | (Jonathan Worthington)++ | src/core/interp.c

[16:45] <Geth> Â¦ MoarVM/new-disp: Implement sp_dispatch_* instructions

[16:45] <Geth> Â¦ MoarVM/new-disp: 

[16:45] <Geth> Â¦ MoarVM/new-disp: Which are like dispatch_*, expcet the slot and static frame for the

[16:45] <Geth> Â¦ MoarVM/new-disp: inline cache entry are predetermined.

[16:45] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a063da44fc

[16:54] *** Altai-man_ joined
[16:56] <Geth> Â¦ MoarVM/new-disp: a8bfd1605b | (Jonathan Worthington)++ | 2 files

[16:56] <Geth> Â¦ MoarVM/new-disp: Cope with inlining sp_dispatch_* instructions

[16:56] <Geth> Â¦ MoarVM/new-disp: 

[16:56] <Geth> Â¦ MoarVM/new-disp: They were designed to be possible to inline from the start, so really

[16:56] <Geth> Â¦ MoarVM/new-disp: this is just fixing up a couple of places to not get confused in the

[16:56] <Geth> Â¦ MoarVM/new-disp: various situations presented by inlining.

[16:56] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a8bfd1605b

[16:56] <jnthn> So, now we do alright (not perfectly) at `make test` with spesh enabled

[16:56] <jnthn> Wonder if we get through the build with it enabled...

[16:57] <jnthn> Of course, we're not doing anything really nice yet; this is just about making sure we understand/do enough to survive.

[16:57] *** sena_kun left
[16:59] <jnthn> Hah, yes, I get through `make` of Rakudo (well, it's only CORE.setting onwards that matteres) with spesh enabled

[17:00] <jnthn> That's quite nice

[17:00] <nwc10> woohoo

[17:00] <nwc10> that's going to fail faster (in that it will get to the tests in less elapsed time)

[17:00] <jnthn> Next need to figure out the various explosions (that aren't just NYIs) in make test are

[17:03] <jnthn> Alas, some aren't reliable failures

[17:03] <nwc10> my ASAN hasn't got there yet

[17:04] <nwc10> prod them with valgrind?

[17:04] <nwc10> unlikely to be "your" problem here, but Address Space Layour Randomisation can have some fun effects. Including that it's used to "seed" the parts of the hash randomisation

[17:11] <jnthn> Hm, no luck provoking it with valgrind either, alas

[17:13] *** zakharyas left
[17:16] <jnthn> Time for some rest/dinner, I think.

[17:26] *** zakharyas joined
[17:36] *** zakharyas left
[17:48] <nwc10> Stage optimize   : This representation (MVMCode) does not support attribute storage (for type BOOTCode) at <unknown>:1  (/home/ghdev/Perl/rakudo1/blib/Perl6/Optimizer.moarvm:optimize_call)

[17:49] <nwc10> (the setting. 3 lots of pain in ENV vars, 5 things #defined in headers)

[18:21] *** vrurg left
[18:22] *** vrurg joined
[18:24] <nwc10> OK, that's a spesh thing. Into tests

[18:26] *** vrurg left
[18:31] *** vrurg joined
[18:36] *** vrurg left
[18:55] *** sena_kun joined
[18:57] *** Altai-man_ left
[19:01] *** zakharyas joined
[19:14] *** vrurg joined
[19:46] *** vrurg left
[20:07] *** zakharyas left
[20:46] *** vrurg joined
[20:47] *** patrickb joined
[20:48] *** patrickb left
[20:50] *** vrurg left
[20:54] *** Altai-man_ joined
[20:57] *** sena_kun left
[21:03] *** vrurg joined
[22:25] *** murman joined
[22:26] *** murman left
[22:55] *** sena_kun joined
[22:57] *** Altai-man_ left
[23:00] *** leont left
