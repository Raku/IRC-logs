[01:06] *** konvertex left
[03:15] *** lucasb left
[04:53] *** raku-bridge left
[04:54] *** raku-bridge joined
[04:54] *** raku-bridge left
[04:54] *** raku-bridge joined
[04:54] *** raku-bridge1 joined
[04:54] *** raku-bridge1 left
[04:54] *** raku-bridge1 joined
[04:55] *** Geth_ joined
[04:58] *** raku-bridge left
[04:58] *** raku-bridge1 is now known as raku-bridge

[05:07] *** raku-bridge1 joined
[05:10] *** Geth left
[05:12] *** raku-bridge1 left
[05:24] *** Geth joined
[05:28] *** raku-bridge2 joined
[05:28] *** raku-bridge2 left
[05:28] *** raku-bridge2 joined
[05:33] *** raku-bridge2 left
[05:37] *** raku-bridge3 joined
[05:37] *** raku-bridge3 left
[05:37] *** raku-bridge3 joined
[05:39] *** raku-bridge3 left
[05:40] *** raku-bridge4 joined
[05:40] *** raku-bridge4 left
[05:40] *** raku-bridge4 joined
[06:40] <Geth_> Â¦ MoarVM: 2922f3d1af | (Nicholas Clark)++ | src/6model/containers.c

[06:40] <Geth_> Â¦ MoarVM: mutex_container_registry should be held while reading from container_registry.

[06:40] <Geth_> Â¦ MoarVM: 

[06:40] <Geth_> Â¦ MoarVM: The mutex is held in MVM_6model_add_container_config - the corresponding

[06:40] <Geth_> Â¦ MoarVM: read in MVM_6model_get_container_config should also hold it.

[06:40] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2922f3d1af

[06:41] <nwc10> good *, #moarvm 

[07:29] *** zakharyas joined
[07:33] <nwc10> the fixed size allocator is global (enough) that one can allocate from it in one thread, and free that pointer in another?

[07:48] *** sena_kun joined
[07:57] <nwc10> timotimo: debugserver.c uses HASH_ITER instead of HASH_ITER_FAST. Does that make sense? In that, if you have access to the debug server, do you already "have the keys to the kingdom"?

[07:57] <nwc10> ie, there's no point in attempting to keep the random hash secrets secret

[07:57] <nwc10> can you inject code with the debug server?

[08:06] <MasterDuke> why do we use MVM_string_ascii_encode instead of MVM_string_utf8_encode_C_string to create a string for an error message in some places?

[08:09] *** Altai-man_ joined
[08:12] *** sena_kun left
[09:12] *** leont joined
[09:13] *** konvertex joined
[09:19] <jnthn> morning o/

[09:19] <jnthn> MasterDuke: Maybe in the cases where we know it's an ASCII string?

[09:21] <MasterDuke> that makes sense

[09:21] <jnthn> nwc10: About the FSA: yes, and it even has mitigation for the case where you have a producer/consumer thing that allocates a lot on one thread and threads a lot on another.

[09:25] <nwc10> jnthn: in copy_to in MVMHash.c there's a MVM_gc_write_barrier(). In copy_to in HashAttrStore.c there is not. Is that omission a bug?

[09:26] <nwc10> I'm not sure what the uncitiondional write barrier call is about

[09:26] <nwc10> IIRC the write barrier is to maintain the invariant that gen2 objects can't point to nursery objects (without the GC knowing)

[09:27] <nwc10> and I forget if there's a Fine Manual that I'm supposed to have Read.

[09:27] <MasterDuke> i guess we just declare that REPR names are ascii only?

[09:28] <nwc10> Given how far Unicode is going with combining emojii characters, I think that I'd be fine (ish) with this.

[09:29] <jnthn> MasterDuke: Yes, there's no reason we'd do otherwise

[09:31] <MasterDuke> and the string heap is ascii-only also?

[09:31] <jnthn> nwc10: copy_to is always used as part of a clone operation, so the dest_root would always be in the nursury

[09:32] <jnthn> MasterDuke: No, the string heap can from bytecode files can contain anything

[09:32] <jnthn> nwc10: So the barriering in there is abundance of caution

[09:32] <nwc10> OK. I saw seeming inconsistency and assumed one of them had to be wrong

[09:33] <MasterDuke> jnthn: then https://github.com/MoarVM/MoarVM/blob/master/src/6model/serialization.c#L2164 might not be safe?

[09:34] <nwc10> jnthn: in the nursery unless a "force gen2" is enabled?

[09:35] <jnthn> nwc10: I guess, yes, though quite when we'd be doing a clone is another matter...

[09:35] <jnthn> *doing a clone while in that mode

[09:35] <jnthn> Anyway, the safe thing is to do it, the fast thing that's probably right (and could be asserted) is to not

[09:36] <nwc10> but the macro version of the write barrier avoids the function call if not needed?

[09:36] <jnthn> MasterDuke: Yeah, if we have, for example, a non-ASCII filename, I think we'd be in trouble there

[09:36] <jnthn> nwc10: Correct

[09:36] <jnthn> Well, I think that the function you mentioned is an inline function

[09:36] <jnthn> Rather than a macro

[09:37] <jnthn> MVM_ASSIGN_REF is a macro, I think

[09:37] <jnthn> So...what was I doing on Monday...

[09:37] <jnthn> oh right, sigsegv :)

[09:37] <nwc10> jnthn: sadly not. It's in src/gc/wb.c

[09:38] <MasterDuke> jnthn: ah, that's a filename? then MVM_string_utf8_c8_encode_C_string is probably the right choice?

[09:38] <jnthn> Which bit?

[09:38] <nwc10> I figure that I should make a patch and send it to you for review

[09:38] <jnthn> MasterDuke: yes

[09:38] <nwc10>         MVM_gc_write_barrier(tc, &(dest_root->header), &(key->common.header));

[09:39] <nwc10> and in src/gc/wb.c: void MVM_gc_write_barrier_hit(MVMThreadContext *tc, MVMCollectable *update_root)

[09:39] <jnthn> MVM_STATIC_INLINE void MVM_gc_write_barrier(MVMThreadContext *tc, MVMCollectable *update_root, MVMCollectable *referenced) {

[09:39] <jnthn> Yes, notice the extra _hit

[09:39] <nwc10> oh, dammit yes

[09:39] <nwc10> I didn't

[09:39] <nwc10> thanks

[09:39] <jnthn> :)

[09:39] <nwc10> seems that *everyone's* coffee is better than mine

[09:39] <nwc10> clearly I need to get back to the office, where the coffee is "curated by others"

[09:39] <jnthn> And since I was in there: yes, MVM_ASSIGN_REF is a macro. Actually one defined in different ways depending on GC debugging or not

[09:40] * jnthn just had his first coffee since the weekend

[09:40] <nwc10> (most importantly by Matthias, who is much better at it than me)

[10:10] *** sena_kun joined
[10:12] *** Altai-man_ left
[10:19] <Geth_> Â¦ MoarVM/new-disp: 23c2c70adc | (Jonathan Worthington)++ | 5 files

[10:19] <Geth_> Â¦ MoarVM/new-disp: Uphold GC inter-gen invariant on inline cache

[10:19] <Geth_> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/23c2c70adc

[10:20] <jnthn> Hurrah, that does get rid of the SEGVs in `make test` after switching to using the dispatcher instead of a spesh plugin

[10:21] <jnthn> And with a code-gen fix gets me down to two make test failures

[10:22] <jnthn> grumble, actually those are SEGVs too, but presumably a different one

[10:22] <jnthn> Different indeed.

[10:23] <jnthn> Both 'cus we somehow end up with a NULL inline cache entry

[10:24] <jnthn> (When we should instead be getting an unlinked callsite there)

[10:44] <jnthn> D'oh, I confused myself

[10:44] <jnthn> Forgot to stick in the MVM_SPESH_DISABLE=1 when running it under gdb

[10:45] <jnthn> Turns out the real issue is a panic about soemthing I need to implement :)

[10:46] <jnthn> "Unknown call stack record type in GC marking"...ah, right :)

[10:46] *** lizmat left
[11:02] *** lizmat joined
[11:09] <jnthn> hmm...maybe MVMDispProgramRecordingCapture having both `capture` and `captures` elements wasn't the best bit of naming...

[11:22] <jnthn> Hmm...though I wonder if it might accidentally cause a module to leak its EXPORTHOWs

[11:24] <jnthn> e.g. if I `use OO::Monitors` in a module M, I get `monitor` available. But if something uses M then it does not get monitor (good since we don't want language tweaks to "escape")

[11:24] *** zakharyas left
[11:24] <jnthn> oops, wrong channel

[11:31] <nwc10> that happnd at work too. In that case, it was https://i.imgur.com/i1IwkRL.gifv

[11:31] <nwc10> (safe for work)

[11:32] <Geth_> Â¦ MoarVM/new-disp: cbd0f5ce2d | (Jonathan Worthington)++ | 3 files

[11:32] <Geth_> Â¦ MoarVM/new-disp: Mark dispatch recording callstack frames

[11:32] <Geth_> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/cbd0f5ce2d

[11:33] <jnthn> oops, lunch

[11:34] <nwc10> not *too* bad. ilmari can manage much "better" :-)

[11:35] <Geth_> Â¦ MoarVM: MasterDuke17++ created pull request #1303: Use correct encoding for deserializing strings

[11:35] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1303

[11:53] *** leont left
[12:05] *** leont joined
[12:09] *** Altai-man_ joined
[12:11] *** sena_kun left
[12:14] <nwc10> jnthn: http://paste.scsys.co.uk/589638

[12:14] <nwc10> I think that that'

[12:14] <nwc10> master/master/master and I think that it's  t/spec/S17-promise/nonblocking-await.t

[12:15] <nwc10> (was running 4 tests frmo a shell loop)

[12:15] <nwc10> about to go AFK on a quest for coffee

[12:17] <Geth_> Â¦ MoarVM: 7a799da872 | (Daniel Green)++ | src/6model/reprs/MVMStaticFrame.c

[12:17] <Geth_> Â¦ MoarVM: Copy lexical_names_list when copying a StaticFrame

[12:17] <Geth_> Â¦ MoarVM: 

[12:17] <Geth_> Â¦ MoarVM: Copied frames aren't usually run, but the lexical_names_list should be

[12:17] <Geth_> Â¦ MoarVM: copied for correctness sake.

[12:17] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7a799da872

[12:17] <Geth_> Â¦ MoarVM: aeec50e0ab | (Daniel Green)++ | 3 files

[12:17] <Geth_> Â¦ MoarVM: Simplify counting of lexical_names

[12:17] <Geth_> Â¦ MoarVM: 

[12:17] <Geth_> Â¦ MoarVM: "lexical_names and lexical_names_list are [...] always created at the same

[12:17] <Geth_> Â¦ MoarVM: time, and we can't have duplicate lexical names, and so HASH_CNT() on

[12:17] <Geth_> Â¦ MoarVM: lexical_names should always be the same as num_lexicals, and would be

[12:17] <Geth_> Â¦ MoarVM: cheaper written as that." - nwc10, https://colabti.org/irclogger/irclogger_log/moarvm?date=2020-06-01#l20

[12:17] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/aeec50e0ab

[12:17] <Geth_> Â¦ MoarVM: d510fef9fe | nwc10++ (committed using GitHub Web editor) | 3 files

[12:17] <Geth_> Â¦ MoarVM: Merge pull request #1301 from MasterDuke17/some_staticframe_fixups

[12:17] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d510fef9fe

[12:21] <jnthn> nwc10: Hmm...that's interesting ASAN output...no immediate guesses how it happens, alas

[12:31] *** raku-bridge2 joined
[12:31] *** raku-bridge2 left
[12:31] *** raku-bridge2 joined
[12:31] *** MasterDuke left
[12:31] *** raku-bridge5 joined
[12:31] *** raku-bridge5 left
[12:31] *** raku-bridge5 joined
[12:31] *** lizmat_ joined
[12:32] *** dogbert11 joined
[12:32] *** Kaeipi joined
[12:33] *** nebuchad` joined
[12:36] *** lizmat left
[12:36] *** raku-bridge4 left
[12:36] *** raku-bridge left
[12:36] *** Kaiepi left
[12:36] *** nebuchadnezzar left
[12:36] *** Geth left
[12:36] *** sivoais left
[12:36] *** dogbert17 left
[12:36] *** krunen left
[12:36] *** sivoais joined
[12:36] *** sivoais left
[12:36] *** sivoais joined
[12:37] *** raku-bridge2 is now known as raku-bridge

[12:37] *** krunen joined
[12:37] <Geth_> Â¦ MoarVM/new-disp: 1bfa3309a5 | (Jonathan Worthington)++ | 5 files

[12:37] <Geth_> Â¦ MoarVM/new-disp: GC marking of dispatch run records

[12:37] <Geth_> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1bfa3309a5

[12:39] <jnthn> yay, now the only failure in `make test` with the dispatcher in place of the return value type check plugin is about the profiler being busted

[12:39] <nwc10> There's More Than One Way To Abort It: http://paste.scsys.co.uk/589640

[12:39] <nwc10> slightly different point where it explodes

[12:39] <nwc10> NQP liked your previous commit

[12:40] <nwc10> or at least, ASAN didn't express an opinion

[12:40] <jnthn> Hm, though same subsystem..hm.

[12:41] <nwc10> yes, sorry, wasn't clear. Everything looked to be the same, apart from the top of the stack that actually hits the error

[12:49] *** lizmat_ is now known as lizmat

[13:09] *** nebuchad` is now known as nebuchadnezzar

[13:17] *** zakharyas joined
[13:42] <jnthn> Hm, seems all roads lead to Rome^Wimplementing the attribute read stuff

[13:43] <nwc10> is your beer fridge doing better than mine was?

[13:44] <jnthn> Stocks are good.

[13:44] <nwc10> good. My stocks *were* good (and still are). They just weren't in the right place. (ie some inside)

[13:48] *** MasterDuke joined
[13:49] <jnthn> Turns out that after the discussion of whether it should be nqp::dispfoo(...) or nqp::dxfoo(...) or nqp::dispatcherfoo(...) I was too lazy to make any of them happen so now it's nqp::dispatch('boot-syscall', 'dispatcher-foo', ...) :P

[13:49] <jnthn> OK, this attribute stuff...

[13:50] <nine> lazyness++

[14:06] <nwc10> ooh, a new-disp branch for rakudo. I missed that. Until now.

[14:09] <[Coke]> my beer fridge has never been well stocked, but quarantine isn't helping.

[14:10] *** sena_kun joined
[14:12] *** Altai-man_ left
[14:13] <nwc10> :-(

[14:14] <nwc10> I seem to have gone the other way - on the assumption that I'm not really supposed to go shopping that much, I've stocked up (a bit more than usual) when the good offers appear

[14:14] <nwc10> I didbn't actually *need* more beer on Tuesday, but by some strange chance the supermarket chain I picked was having a beer offer

[14:15] <nwc10> So I bought some for Andrea's mum (to take on Saturday, because I keep helping drink her beer)

[14:15] <nwc10> and it seems that I've had enough of writing work docs, as I declare it beer o'clock, even though it's a bit early for the london.pm (virtual) meeting

[14:16] <nwc10> jnthn: No registered operation handler for 'dispatch'

[14:16] <nwc10> (ie no ASAN)

[14:16] <jnthn> nwc10: Needs new-disp in NQP too

[14:16] <nwc10> er, I thought that I had that

[14:17] <nwc10> mmm, was I up to date enough

[14:17] <nwc10> redo!

[14:17] <nwc10> anyway, have beer, no ASAN

[14:29] *** MasterDuke left
[14:29] <Kaeipi> i'm having trouble getting async dns queries to work without forcing them to be handled synchronously

[14:30] <Kaeipi> uv_getaddrinfo won't do for a number of reasons, so i'm trying to use c-ares atm

[14:30] <jnthn> What doesn't it do, ooc?

[14:31] <jnthn> If there's a Node.js binding of whatever you're using, that's often a good place to look for clues, 'cus it'll also be dealing in libuv

[14:35] <nwc10> jnthn: again:

[14:35] <nwc10> +++ Compiling   blib/Perl6/BOOTSTRAP/v6c.moarvm

[14:35] <nwc10> No registered operation handler for 'dispatch'

[14:35] <nwc10>    at gen/moar/stage2/QAST.nqp:1501  (/home/ghdev/Sandpit/moar1-SAN/share/nqp/lib/QAST.moarvm:compile_op)

[14:35] <nwc10> ...

[14:36] <jnthn> nwc10: That's really odd... In your NQP test output, do you see it run t/moar/53-dispatch.t?

[14:36] <nwc10> um, not sure if I can find the make test output

[14:36] <nwc10> but

[14:36] <nwc10> running it manually, ASAN gets excited

[14:37] <Kaeipi> i find the behaviour of getaddrinfo too inconsistent from platform to platform, and with the jvm in particular it'd be simpler to make the A and AAAA queries and make the complete address info like getaddrinfo does in rakudo instead

[14:37] <nwc10> http://paste.scsys.co.uk/589649

[14:38] <nwc10> commit dc2d111dedf29bd335d2be140f324d6fd21138ca

[14:38] <nwc10> I believe that that is all correct. I have 5 trees on this machine, so there is potential to mess up

[14:40] <nwc10> I have

[14:40] <nwc10> +#define FSA_SIZE_DEBUG 1

[14:40] <nwc10> and also

[14:40] <nwc10> +#define MVM_ARRAY_CONC_DEBUG 1

[14:40] <nwc10> +#define MVM_SPESH_CHECK_DU 1

[14:40] <nwc10> +#define MVM_HASH_THROW_ON_ITER_AFTER_ADD_KEY 1

[14:40] <nwc10> export MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 MVM_SPESH_CHECK_DU=1

[14:40] <jnthn> Ah, trying to build Rakudo with spesh enabled will go very badly at the moment

[14:41] <nwc10> ah OK. I think you'd implied that, but I'd forgotten this.

[14:41] <jnthn> timotimo++ has been looking at that

[14:41] <jnthn> That ASAN barf...hmm

[14:41] <jnthn> Will look at it after getting this attribute thingy done

[14:42] <nwc10> OK, no worries

[14:42] <nwc10> I think it has found it thanks to FSA_SIZE_DEBUG

[14:42] <nwc10> I'm going AFK for a bit

[14:54] <Kaeipi> ah, node takes advantage of the fact that c-ares has a few different ways to get the fd used for a dns query, which plays nicely with uv_poll_t

[15:13] *** raku-bridge5 left
[15:22] *** MasterDuke joined
[15:25] <Geth_> Â¦ MoarVM/new-disp: c75cc472ff | (Jonathan Worthington)++ | 5 files

[15:25] <Geth_> Â¦ MoarVM/new-disp: Implement dispatcher-track-attr recording logic

[15:25] <Geth_> Â¦ MoarVM/new-disp: 

[15:25] <Geth_> Â¦ MoarVM/new-disp: So that we make the required entries in the program record data

[15:25] <Geth_> Â¦ MoarVM/new-disp: structure. They are not yet compiled into a dispatch program, however.

[15:25] <Geth_> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/c75cc472ff

[15:55] <Geth_> Â¦ MoarVM/new-disp: d8a7e1e3b8 | (Jonathan Worthington)++ | 2 files

[15:55] <Geth_> Â¦ MoarVM/new-disp: Compile attribute loads in dispatch programs

[15:55] <Geth_> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/d8a7e1e3b8

[15:59] <Geth_> Â¦ MoarVM/new-disp: efd846e196 | (Jonathan Worthington)++ | src/disp/program.c

[15:59] <Geth_> Â¦ MoarVM/new-disp: Interpret the attribute loading dispatch ops

[15:59] <Geth_> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/efd846e196

[16:08] <jnthn> Will do until we need to guard the attrs...

[16:09] *** Altai-man_ joined
[16:12] *** sena_kun left
[16:16] <timotimo> i've been afk, haven't continued on spesh vs new-disp since last night

[16:29] <jnthn> bah, I will immediately need to do the guarding of atters

[16:29] <jnthn> Well, "immediately" as in "I might be a bit tired to do it right now"

[16:36] <timotimo> what's missing for that, a bit of recording logic and/or an op or two in the interpreter and/or a bit of execution of disp program stuff and/or some logic for tracking the source of data?

[16:38] <jnthn> Just some new ops for doing guards on temporaries instead of arguments, and the compiling into them, really

[16:40] <timotimo> if i don't get distracted again i may be able to implement a bit of that

[16:40] <timotimo> gotta get a rakudo compiled to run update-ops, LOL

[16:40] <timotimo> but i can just turn spesh off for that i guess, or temporarily switch to master moarvm

[16:40] <jnthn> I don't mind doing it; stick to the spesh stuff

[16:41] <jnthn> (I've got all the bits needed to do it in my head, and you have the spesh stuff in yours, so...)

[16:43] <nine> My quick way out to get a working rakudo for update_ops is just sudo zypper in rakudo :)

[16:43] <jnthn> grrr...also ran directly into "Can only use dispatcher-track-attr on a vivified attribute"

[16:45] <jnthn> That's a pain.

[16:46] <timotimo> i think i'm kind of stuck with the spesh stuff tbh

[16:47] <timotimo> oh let's see what happens when i dump a backtrace so i can see what the stack actually looks like, LOL

[17:14] <Geth_> Â¦ MoarVM/new-disp: 64b6fcb1ed | (Jonathan Worthington)++ | 2 files

[17:14] <Geth_> Â¦ MoarVM/new-disp: Implement guarding of tracked attributes also

[17:14] <Geth_> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/64b6fcb1ed

[17:36] <timotimo> cannot work now, cat has my hand again

[17:36] <jnthn> Cats seem quite bad for productivity, despite their numerous other benefits.

[17:39] *** zakharyas left
[17:40] <timotimo> destressing ought to have a pawsitive overall benefit

[17:44] <timotimo> the cat is almost asleep and i laughed just a bit too loudly and she was so surprised

[17:44] <timotimo> daww

[18:10] *** sena_kun joined
[18:12] *** Altai-man_ left
[18:25] * timotimo teaches bytecode dumping about vararg ops

[18:29] <timotimo> m: say Blob.new(0o342, 0o200, 0o257).decode("utf8")

[18:29] <camelia> rakudo-moar 4ba70b7a4: OUTPUT: Â«â¯â¤Â»

[18:29] <timotimo> m: say Blob.new(0o342, 0o200, 0o257).decode("utf8").&uninames

[18:29] <camelia> rakudo-moar 4ba70b7a4: OUTPUT: Â«(NARROW NO-BREAK SPACE)â¤Â»

[18:29] <timotimo> something is wrong with my keyboard or something

[18:29] <nwc10> jnthn: and you were pretty much correct - PEBKAC

[18:30] <nwc10> in that, I had the wrong nqp checkout. (with the "Right" MoarVM checkout)

[18:39] <timotimo> 00144      const_i64_16       loc_5_int, 666

[18:39] <timotimo> 00145      dispatch_o         loc_12_obj, 'wrap-wrap-identity', Callsite_1, loc_5_int

[18:39] <timotimo> 00146      decont             loc_12_obj, loc_12_obj

[19:00] *** zakharyas joined
[19:03] <Geth_> Â¦ MoarVM/new-disp: 9a5cc96603 | (Timo Paulssen)++ | src/core/bytecodedump.c

[19:03] <Geth_> Â¦ MoarVM/new-disp: teach bytecode dump about vararg ops (dispatch_*)

[19:03] <Geth_> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/9a5cc96603

[19:03] <Geth_> Â¦ MoarVM/new-disp: fa4969be7b | (Timo Paulssen)++ | src/core/bytecodedump.c

[19:03] <Geth_> Â¦ MoarVM/new-disp: don't crash when MVM_dump_bytecode on a code-less thread

[19:03] <Geth_> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/fa4969be7b

[19:14] <jnthn> nwc10: Ah, this explains quite a bit

[19:14] <nwc10> indeed :-/

[19:33] <nwc10> now (on go two) I have got past the nqp install

[19:34] <nwc10> SEGV in

[19:34] <nwc10>     #0 0x7f3c7f85bc2d in build_cfg src/spesh/graph.c:660

[19:34] <jnthn> Hm, did the ASAN barf on that test you mentioned before go away?

[19:34] <nwc10> yes, ASAN barfed on that test now that I used the correct checkout

[19:39] *** squashable6 left
[19:40] *** squashable6 joined
[19:44] *** squashable6 left
[19:45] *** squashable6 joined
[20:08] <timotimo> i also get that segv, or at least i think that's the one

[20:09] <timotimo> it's where it gets an out-of-range extop number

[20:09] <timotimo> not sure what exactly i got wrong :)

[20:09] *** Altai-man_ joined
[20:11] <jnthn> timotimo++ for fixing bytecode dumping just in time for me needing it 

[20:11] *** sena_kun left
[20:12] <timotimo> nice

[20:13] <jnthn> Got something really odd going on where one dispatcher ends up producing a null return value even though the bytecode it invokes should never do that

[20:13] <jnthn> Not immediately sure what's to blame

[20:17] <jnthn> aha, it ends up getting a NULL arg into it

[20:25] <Geth_> Â¦ MoarVM/new-disp: f3e3fe2b9c | (Jonathan Worthington)++ | src/disp/program.c

[20:25] <Geth_> Â¦ MoarVM/new-disp: Correct copying of the args tail

[20:25] <Geth_> Â¦ MoarVM/new-disp: 

[20:25] <Geth_> Â¦ MoarVM/new-disp: We need to look at the callsite of the initial args, not that of the

[20:25] <Geth_> Â¦ MoarVM/new-disp: invokable result.

[20:25] <Geth_> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/f3e3fe2b9c

[20:25] <jnthn> Duh, that was a silly one

[20:25] <timotimo> :D

[20:26] <jnthn> And of course my test cases managed to get lucky and not trigger the bug

[20:27] *** zakharyas left
[20:41] <jnthn> And now I seem to have a working decont return value impl using the dispatcher instead of the spesh plugin

[20:41] <jnthn> The most common cases don't need to do an invoke (unlike spesh plugins which assumed you were always going to do one)

[20:42] <jnthn> Though the fact we have got both type check and decont done as two separate dispatchers will have to go away at some point

[20:44] <jnthn> (That is the case 'cus there were two spesh plugins, which is the case 'cus there were two ext ops)

[20:45] <timotimo> is that not necessary to do return vs return-rw?

[20:49] <jnthn> Well, those cases need different handling, but we don't need to do it as one dispatch after another

[20:49] <jnthn> There's probably a neat factoring in terms of delegated dispatch actually

[20:50] <jnthn> The way dispatch programs are recorded and compiled automatically does duplicate read and duplicate guard elimination

[20:50] <jnthn> Up to and including on paths of reads

[20:51] <jnthn> So we could even have one dispatcher delegate to the other and even if it duplicately requests guarding or reading of attributes, the compiled dispatch program will still only do it once.

[20:53] <jnthn> The whole "you can delegate, but you're still writing one dispatch program overall" thing is one of the ideas that's worked out really well in this. I'm not exactly sure at what point I realized it.

[20:55] <timotimo> cool

[21:21] <nwc10> jnthn: now SEGV is

[21:22] <nwc10> ==16736==Hint: address points to the zero page.

[21:22] <nwc10>     #0 0x7fd486b3f308 in build_cfg src/spesh/graph.c:660

[21:22] <nwc10>     #1 0x7fd486b417a4 in MVM_spesh_graph_create src/spesh/graph.c:1342

[21:38] <Geth_> Â¦ MoarVM: softmoth++ created pull request #1304: nativecall: Don't obliterate lib_name in exception text

[21:38] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1304

[21:46] <timotimo> switch (cur_bb->last_ins->info->opcode) {

[21:46] <timotimo> i wonder which one of these breaks

[21:47] <timotimo> could it be something isn't breaking up bbs correctly around dispatch_* ops?

[22:10] *** sena_kun joined
[22:12] *** Altai-man_ left
[22:36] *** chansen_ left
[22:37] *** tbrowder left
[22:38] *** chansen_ joined
[22:38] *** SmokeMachine joined
[22:39] *** tbrowder joined
[23:26] *** sena_kun left
