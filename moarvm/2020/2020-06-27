[00:01] *** sena_kun joined
[00:03] *** Altai-man_ left
[00:47] *** Kaiepi left
[01:35] *** Kaiepi joined
[01:48] *** vrurg left
[01:48] *** vrurg joined
[02:00] *** Altai-man_ joined
[02:03] *** sena_kun left
[03:05] *** lucasb left
[04:02] *** sena_kun joined
[04:04] *** Altai-man_ left
[05:24] *** Kaiepi left
[05:25] *** Kaiepi joined
[06:01] *** Altai-man_ joined
[06:03] *** sena_kun left
[08:02] *** sena_kun joined
[08:04] *** Altai-man_ left
[10:01] *** Altai-man_ joined
[10:03] *** sena_kun left
[11:15] *** Kaiepi left
[11:43] *** Kaiepi joined
[12:02] *** sena_kun joined
[12:04] *** Altai-man_ left
[12:25] *** Kaiepi left
[12:25] *** Kaiepi joined
[14:00] <Geth> ¦ MoarVM/kosher-unicode-names-only: a34e9e4bae | (Nicholas Clark)++ | src/strings/unicode_ops.c

[14:00] <Geth> ¦ MoarVM/kosher-unicode-names-only: Don't add placeholders such as "<control>" to the Unicode names lookup hash.

[14:00] <Geth> ¦ MoarVM/kosher-unicode-names-only: 

[14:00] <Geth> ¦ MoarVM/kosher-unicode-names-only: Including these make no sense - the hash is for a 1->1 mapping of name to

[14:00] <Geth> ¦ MoarVM/kosher-unicode-names-only: codepoint, but for each of these names we have multiple values.

[14:00] <Geth> ¦ MoarVM/kosher-unicode-names-only: 

[14:00] <Geth> ¦ MoarVM/kosher-unicode-names-only: The way our hashes are currently implemented (with "bind"), these duplicate

[14:00] <Geth> ¦ MoarVM/kosher-unicode-names-only: keys are not ignored - we add hundreds of duplicate entries to the same

[14:00] <Geth> ¦ MoarVM/kosher-unicode-names-only: <…commit message has 5 more lines…>

[14:00] <Geth> ¦ MoarVM/kosher-unicode-names-only: review: https://github.com/MoarVM/MoarVM/commit/a34e9e4bae

[14:01] *** Altai-man_ joined
[14:03] *** sena_kun left
[14:05] <Geth> ¦ MoarVM: nwc10++ created pull request #1321: Don't add placeholders such as "<control>" to the Unicode names lookup hash.

[14:05] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1321

[14:12] <timotimo> that makes sense

[14:13] <timotimo> but don't we call them <control-001> and such?

[14:13] <timotimo> m: say uniname("\x03")

[14:13] <camelia> rakudo-moar f1960baa9: OUTPUT: «<control-0003>␤»

[14:17] <nwc10> there's (different) C code to implement that

[14:18] <nwc10> the forwards map code point->name

[14:18] <timotimo> ah

[14:32] *** Geth left
[14:32] *** Geth joined
[14:46] * nwc10 is worried that there is a stupid bug in that pull request

[14:57] <nwc10> I have.

[14:58] <nwc10> The bug is real. The fix is in the wrong place. Meaning also that it is untested.

[16:02] *** sena_kun joined
[16:04] *** Altai-man_ left
[16:23] <nwc10> jnthn: there's a stupid bug in that pull request

[16:23] <nwc10> *And*

[16:24] <nwc10> even fixing it in the place in the C code that I should have

[16:24] <nwc10> is two places in the C code

[16:24] <nwc10> is

[16:24] <nwc10> ...

[16:24] <nwc10> what is it doing? WHat are all these span things, and FATE_*

[16:24] <nwc10> and I think

[16:24] <jnthn> Hm, I suspect trying to store the Unicode databsae compactly, if you mean the code I think you do :)

[16:25] <nwc10> actually that code is the remains of soemthing else, and if I have it right, the entire "extents" thing doesbn't matter any more - it's a linear scan of codepoint_names

[16:25] <nwc10> jnthn: yes, it's storing the *properties* efficiently

[16:25] <nwc10> but the names, they either "no longer need to be stored with this" or possibly "never needed to be stored with this"

[16:26] <nwc10> so I think that the C code in generate_codepoints_by_name can be a lot simpler.

[16:26] <jnthn> I seem to recall *something* about names changed along the way.

[16:26] <nwc10> :-)

[16:26] <jnthn> This wouldn't surprise me.

[16:26] <nwc10> back in 2013?

[16:26] *** zakharyas joined
[16:26] <nwc10> and then

[16:26] <nwc10> I think my "revised fix" is wrong - it manages to get the code that ignores '<' into the correct place

[16:26] <nwc10> in the C

[16:27] <nwc10> but the correct place to ignore '<' is in ucd2c.pl 

[16:27] <nwc10> and never even put it into the C array

[16:28] <nwc10> and I also really don't get why U-0081 is NULL in that array

[16:33] <Geth> ¦ MoarVM/kosher-unicode-names-only: 09dfa207e1 | (Nicholas Clark)++ | 2 files

[16:33] <Geth> ¦ MoarVM/kosher-unicode-names-only: Don't add placeholders such as "<control>" to the Unicode names lookup hash.

[16:33] <Geth> ¦ MoarVM/kosher-unicode-names-only: 

[16:33] <Geth> ¦ MoarVM/kosher-unicode-names-only: Including these make no sense - the hash is for a 1->1 mapping of name to

[16:33] <Geth> ¦ MoarVM/kosher-unicode-names-only: codepoint, but for each of these names we have multiple values.

[16:33] <Geth> ¦ MoarVM/kosher-unicode-names-only: 

[16:33] <Geth> ¦ MoarVM/kosher-unicode-names-only: The way our hashes are currently implemented (with "bind"), these duplicate

[16:33] <Geth> ¦ MoarVM/kosher-unicode-names-only: keys are not ignored - we add hundreds of duplicate entries to the same

[16:33] <Geth> ¦ MoarVM/kosher-unicode-names-only: <…commit message has 5 more lines…>

[16:33] <Geth> ¦ MoarVM/kosher-unicode-names-only: review: https://github.com/MoarVM/MoarVM/commit/09dfa207e1

[18:00] <timotimo> m: say uniparse(uniname("\x02")).raku

[18:00] <camelia> rakudo-moar f1960baa9: OUTPUT: «"\x[2]"␤»

[18:01] *** Altai-man_ joined
[18:01] *** zakharyas left
[18:03] *** sena_kun left
[18:37] <Geth> ¦ MoarVM: 67c8413f5b | (Nicholas Clark)++ | tools/ucd2c.pl

[18:37] <Geth> ¦ MoarVM: ucd2c.pl shells out to rakudo, without checking that it ran correctly.

[18:37] <Geth> ¦ MoarVM: 

[18:37] <Geth> ¦ MoarVM: The error message gets lost in its garrulous output.

[18:37] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/67c8413f5b

[18:37] <nwc10> well, that was part of my problem.

[18:39] <nwc10> OK, with that, Unicode UCD 12.1, Emoji 12 (ie 12.0, not 12.1) I can *almost* rebuild files byte-for-byte perfectly

[18:39] <nwc10> but src/strings/unicode_db.c differs for  uni_seq_722 to uni_seq_733

[18:39] <nwc10> was Emoji_Combining_Sequence

[18:40] <nwc10> now Emoji_Keycap_Sequence

[18:40] <nwc10> and this makes little sense, as those things seem to be the same all the back to emoji-5.0

[18:56] <nwc10> jnthn: yes, it's that code related to $usually

[19:09] <timotimo> dispatch chains haven't been in any of jn's talks, right?

[19:22] <dogbert17> there's some strange code in src/strings/unicode_db.c

[19:23] <dogbert17> what's happening here for example:

[19:23] <dogbert17>   75055         if (block) {

[19:23] <dogbert17>   75056             return block ? Block_enums[num+1] : Block_enums[0];

[19:23] <dogbert17>   75057         }

[20:02] *** sena_kun joined
[20:04] *** Altai-man_ left
[20:14] *** zakharyas joined
[20:19] *** zakharyas1 joined
[20:19] *** zakharyas left
[20:52] <Geth> ¦ MoarVM: cfe6ed8f56 | (Nicholas Clark)++ | 3 files

[20:52] <Geth> ¦ MoarVM: Consistent whitespace for the initialiser for codepoint_bitfield_indexes

[20:52] <Geth> ¦ MoarVM: 

[20:52] <Geth> ¦ MoarVM: Previously the code would vary the amount of whitespace in the comment

[20:52] <Geth> ¦ MoarVM: depending upon whether the code point happened to have a name. This means

[20:52] <Geth> ¦ MoarVM: that unrelated changes would cause this initialiser to dance, creating

[20:52] <Geth> ¦ MoarVM: collateral damage in the git diffs.

[20:52] <Geth> ¦ MoarVM: 

[20:52] <Geth> ¦ MoarVM: <…commit message has 8 more lines…>

[20:52] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cfe6ed8f56

[21:29] *** hoelzro left
[21:29] *** hoelzro joined
[21:30] *** zakharyas1 left
[21:39] <timotimo> jnthn: what do i have to get right to make the guards from the dispatch program deopt correctly? do i copy the "deopt one" annotation? i think that may be what i've had before; a synthetic deopt point only has to be made if there wasn't already a deopt point available for some reason?

[22:01] *** Altai-man_ joined
[22:04] *** sena_kun left
[22:10] *** lucasb joined
[22:21] <timotimo> has there been much exploration of how dispatch chains are like trace jitting, and what that means for systems including them?

[22:50] <jnthn> Well, if we mean tracing the meta level, then yes, both imply something in the whole multi-level language or bind time analysis space

[22:50] <jnthn> It's just that we don't really try to trace them, we just make explicit the operations that should end up in the dispatch program

[22:51] <jnthn> Or seen another way, only the set of dispatch transform/guard related syscalls are traced

[22:51] <jnthn> It's certainly no accident that I called that phase "record". :)

[22:52] <timotimo> ah, yeah, meta-level tracing, not machine code instructions tracing; is that the correct difference?

[22:53] <jnthn> Well, sorta...I mean, the meta-level tracing, so far as I understand how the terminology is used, is about knowing which things are the interpreter and which things are the program.

[22:54] <jnthn> e.g. the program counter is not interesting to trace the increments of

[22:54] <jnthn> If you don't have a meta level and are only tracing the executing bytecode then you don't care about this.

[22:55] <jnthn> For dispatch programs, I figure all the language level and MOP knowledge is meta

[23:01] <timotimo> OK

[23:02] <timotimo> just need to get the deopt of the generated guards correct

[23:03] *** evalable6 left
[23:03] <jnthn> About the deopt question, though: I think you'll probably need synthetic deopt points; I think spesh plugins had the same situation, so I'd see how it was solved there.

[23:03] <timotimo> i stole the functions it used i think :D

[23:04] <timotimo> insert_arg_type_guard

[23:04] *** committable6 left
[23:05] <timotimo> MVM_spesh_plugin_rewrite_resolve is probably the right place to steal from

[23:06] *** committable6 joined
[23:06] <timotimo> that code can steal from the prepargs instruction that sits in front of the spesh plugin invoke

[23:07] <timotimo> steal the deopt annotations, that is

[23:10] <jnthn> I think dispatch probably needs to be both a pre and post deopt point

[23:11] <timotimo> ah i can do that, it only needs an extra flag in the oplist?

[23:14] <jnthn> Think so

[23:14] <jnthn> I think it needs to be all pre/post/all

[23:14] <jnthn> pre for guards ahead of it

[23:15] <jnthn> post for return type guard

[23:15] <jnthn> all for global deopt

[23:16] <timotimo> not sure what "return type guard" means in this case

[23:17] <jnthn> As with invoke: we log and can guard on the return type of a call, and dispatch is (often) a way of making a call

[23:18] <timotimo> ah, ok, so there'll also want to be a guard for that that will come from the spesh log, not from the dispatch program or record

[23:20] <jnthn> Yes

[23:20] <jnthn> iirc that's set as part of the return instruction

[23:20] <jnthn> Well, logged as part of...

[23:20] <timotimo> via "is_caller_logging" right?

[23:20] <timotimo> less via, more "involving"

[23:24] *** evalable6 joined
[23:27] <jnthn> yes

[23:37] *** AlexDaniel left
