[03:25] *** leont left
[05:10] *** squashable6 left
[05:13] *** squashable6 joined
[05:24] *** squashable6 left
[05:25] *** squashable6 joined
[06:21] *** Altai-man joined
[06:46] *** sivoais_ joined
[06:47] *** sivoais left
[06:51] *** frost-lab joined
[07:22] *** sivoais_ left
[07:22] *** sivoais joined
[07:52] *** sivoais left
[07:57] *** sena_kun joined
[07:57] *** patrickb joined
[07:59] *** Altai-man left
[08:03] *** sivoais joined
[08:20] <nwc10> good *, #moarvm 

[08:20] <Geth> ¦ MoarVM/probes: 4 commits pushed by (Nicholas Clark)++

[08:20] <Geth> ¦ MoarVM/probes: b77a7e2206 | Convert substandard_pow() to simple_compile_probe().

[08:20] <Geth> ¦ MoarVM/probes: 1d09cf7c28 | Nothing reads $config->{can_err_decl_after_stmt} so don't set it.

[08:20] <Geth> ¦ MoarVM/probes: 90e1bcb4ca | Fix two thinkos in debug code recently added to the probe substandard_pow().

[08:20] <Geth> ¦ MoarVM/probes: f6f327f085 | Add a probe for log() returning NaN for negative input.

[08:20] <Geth> ¦ MoarVM/probes: review: https://github.com/MoarVM/MoarVM/compare/0c211a359901...f6f327f085b4

[08:20] <nwc10> fixes a thinko in a commit message.

[08:20] <nwc10> and we get to see if some of the failed CI tests are flappy

[10:16] *** leont joined
[10:38] <Geth> ¦ MoarVM/probes: fcc625d6b1 | (Nicholas Clark)++ | 5 files

[10:38] <Geth> ¦ MoarVM/probes: Add a probe for asin() and acos() returning NaN for out of range input.

[10:38] <Geth> ¦ MoarVM/probes: 

[10:38] <Geth> ¦ MoarVM/probes: Similar to commit 5e031c917587f8b3 for pow(), Solaris also seems to show

[10:38] <Geth> ¦ MoarVM/probes: non-POSIX behaviour for asin() and acos(), for the same compilers...

[10:38] <Geth> ¦ MoarVM/probes: 

[10:38] <Geth> ¦ MoarVM/probes: As with the others can *sort of* read the behaviour as conformat:

[10:38] <Geth> ¦ MoarVM/probes:     For finite values of x not in the range [-1,1], a domain error shall

[10:38] <Geth> ¦ MoarVM/probes: <…commit message has 13 more lines…>

[10:38] <Geth> ¦ MoarVM/probes: review: https://github.com/MoarVM/MoarVM/commit/fcc625d6b1

[11:56] *** Altai-man joined
[11:59] *** sena_kun left
[12:03] *** patrickb left
[12:19] *** frost-lab left
[12:29] *** squashable6 left
[12:31] *** squashable6 joined
[12:41] *** patrickb joined
[13:26] *** domidumont joined
[13:47] *** domidumont left
[15:57] *** sena_kun joined
[15:59] *** Altai-man left
[17:01] <nwc10> nine: http://paste.scsys.co.uk/594311

[17:01] <nwc10> ASAN very excited by t/spec/S17-promise/nonblocking-await.t

[17:01] <nwc10> heap-use-after-free in MVM_frame_find_dynamic_using_frame_walker

[17:01] *** domidumont joined
[18:20] *** zakharyas joined
[18:20] *** zakharyas left
[18:31] <nine> nwc10: oh, that's interesting!

[18:31] *** zakharyas joined
[18:32] <nine> is it nicely reproducible?

[18:33] <nine> I think using MVM_fixed_size_free_at_safepoint would be more appropriate here: https://github.com/MoarVM/MoarVM/blob/master/src/core/frame.c#L885

[18:34] <nwc10> I've reproduced it on two machines. Which only differ in debian version

[18:34] <nwc10> but it is with MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 MVM_SPESH_CHECK_DU=1

[18:34] <nwc10> and all the "usual" debugging paranoia:

[18:35] <nwc10> +#define MVM_ARRAY_CONC_DEBUG 1

[18:35] <nwc10> +#define FSA_SIZE_DEBUG 1

[18:35] <nwc10> +#define MVM_GC_DEBUG 1

[18:35] <nwc10> +#define HASH_DEBUG_ITER 1

[18:35] <nwc10> +#define MVM_SPESH_CHECK_DU 1

[18:35] *** domidumont left
[18:37] <nine> Sounds like you're simply slowing it down enough to provoke the race

[18:50] <nine> can reproduce that way

[18:51] <nwc10> good, because I had no idea what to do next. and had (I think mistakenly) assumed that you'd done something recently that caused it to appear

[18:54] <nine> I think the bug is pretty straight forward. The call frame that started the async code returns and when it does so it frees its frame extra. But the async code tries to look up a dynamic (probably $*SCHEDULER or $*PROMISE) and accesses the caller frame's extra even when it's already freed.

[18:56] <nine> What the proper fix is is not so clear though. Seems to do fine with MVM_fixed_size_free_at_safepoint, but there's also a mechanism to keep the frame extra (which contains the dynlex cache) alive.

[18:58] *** zakharyas left
[19:56] *** Altai-man joined
[19:59] *** sena_kun left
[20:06] *** MasterDuke left
[20:16] *** lucasb joined
[20:23] *** MasterDuke joined
[21:50] *** zakharyas joined
[21:50] <Geth> ¦ MoarVM: 22f1038a95 | (Patrick Böker)++ | src/io/procops.c

[21:50] <Geth> ¦ MoarVM: Change `procspawnasync` to explicitly take the program name

[21:50] <Geth> ¦ MoarVM: 

[21:50] <Geth> ¦ MoarVM: As the value passed as program name and arg0 need to be different in some

[21:50] <Geth> ¦ MoarVM: cases (e.g. a space in the program name on Windows) we need to retrieve

[21:50] <Geth> ¦ MoarVM: both separately. Rakudo can then dictate what each value should be.

[21:50] <Geth> ¦ MoarVM: Part of a fix for rakudo/rakudo#4117

[21:50] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/22f1038a95

[21:50] <linkable6> RAKUDO#4117 [open]: https://github.com/rakudo/rakudo/issues/4117 routine run bad works in windows 10

[21:50] <Geth> ¦ MoarVM: 34f9d8c7aa | (Patrick Böker)++ (committed using GitHub Web editor) | src/io/procops.c

[21:50] <Geth> ¦ MoarVM: Merge pull request #1408 from patrickbkr/fix-win-proc-with-space

[21:50] <Geth> ¦ MoarVM: 

[21:50] <Geth> ¦ MoarVM: Change `procspawnasync` to explicitly take the program name

[21:50] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/34f9d8c7aa

[22:06] *** patrickb left
[22:14] *** Altai-man left
[22:23] *** patrickb joined
[22:55] *** travis-ci joined
[22:55] <travis-ci> MoarVM build errored. Patrick Böker 'Merge pull request #1408 from patrickbkr/fix-win-proc-with-space

[22:55] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/752191996 https://github.com/MoarVM/MoarVM/compare/78f4f1d9e9de...34f9d8c7aa2f

[22:55] *** travis-ci left
[22:57] *** patrickb left
[22:59] *** zakharyas left
[23:01] *** patrickb joined
