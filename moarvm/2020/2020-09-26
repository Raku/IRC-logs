[00:04] *** MasterDuke left
[00:50] *** leont left
[01:23] *** ggoebel_ left
[01:23] *** ggoebel__ joined
[02:02] *** lucasb left
[03:59] *** linkable6 left
[03:59] *** evalable6 left
[03:59] *** unicodable6 left
[03:59] *** squashable6 left
[03:59] *** tellable6 left
[03:59] *** nativecallable6 left
[03:59] *** notable6 left
[03:59] *** releasable6 left
[03:59] *** committable6 left
[03:59] *** benchable6 left
[03:59] *** bisectable6 left
[03:59] *** shareable6 left
[03:59] *** bloatable6 left
[03:59] *** coverable6 left
[03:59] *** sourceable6 left
[03:59] *** greppable6 left
[03:59] *** quotable6 left
[03:59] *** statisfiable6 left
[03:59] *** unicodable6 joined
[03:59] *** sourceable6 joined
[04:00] *** evalable6 joined
[04:00] *** coverable6 joined
[04:00] *** nativecallable6 joined
[04:00] *** notable6 joined
[04:00] *** quotable6 joined
[04:00] *** bloatable6 joined
[04:01] *** statisfiable6 joined
[04:01] *** bisectable6 joined
[04:01] *** releasable6 joined
[04:01] *** shareable6 joined
[04:01] *** committable6 joined
[04:01] *** linkable6 joined
[04:01] *** squashable6 joined
[04:01] *** greppable6 joined
[04:02] *** tellable6 joined
[04:02] *** benchable6 joined
[06:07] *** sena_kun joined
[07:30] <nwc10> good *, #moarvm 

[09:10] *** linkable6 left
[09:10] *** evalable6 left
[09:10] *** tellable6 left
[09:10] *** evalable6 joined
[09:11] *** linkable6 joined
[09:12] *** domidumont joined
[09:13] *** tellable6 joined
[09:40] *** Altai-man joined
[09:42] <Geth> Â¦ MoarVM/2020.09: 1eb8851ea8 | Altai-man++ | docs/ChangeLog

[09:42] <Geth> Â¦ MoarVM/2020.09: Update ChangeLog for 2020.09 release

[09:42] <Geth> Â¦ MoarVM/2020.09: review: https://github.com/MoarVM/MoarVM/commit/1eb8851ea8

[09:42] <Geth> Â¦ MoarVM/2020.09: 498de20f94 | Altai-man++ | VERSION

[09:42] <Geth> Â¦ MoarVM/2020.09: Bump VERSION for release

[09:42] <Geth> Â¦ MoarVM/2020.09: review: https://github.com/MoarVM/MoarVM/commit/498de20f94

[09:43] *** sena_kun left
[09:43] <Geth> Â¦ MoarVM: Altai-man++ created pull request #1354: 2020.09 release

[09:43] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1354

[09:54] <Geth> Â¦ MoarVM: 1eb8851ea8 | Altai-man++ | docs/ChangeLog

[09:54] <Geth> Â¦ MoarVM: Update ChangeLog for 2020.09 release

[09:54] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1eb8851ea8

[09:54] <Geth> Â¦ MoarVM: 498de20f94 | Altai-man++ | VERSION

[09:54] <Geth> Â¦ MoarVM: Bump VERSION for release

[09:54] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/498de20f94

[09:54] <Geth> Â¦ MoarVM: 346832e684 | Altai-man++ (committed using GitHub Web editor) | 2 files

[09:54] <Geth> Â¦ MoarVM: Merge pull request #1354 from MoarVM/2020.09

[09:54] <Geth> Â¦ MoarVM: 

[09:54] <Geth> Â¦ MoarVM: 2020.09 release

[09:54] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/346832e684

[10:03] *** leont joined
[10:23] *** MasterDuke joined
[12:34] <jnthn> Altai-man++ # release

[12:41] <Altai-man> Thanks to all the brave MoarVM hackers who made this release possible. \o/

[12:44] *** domidumont left
[12:50] <MasterDuke> Altai-man++

[13:03] * jnthn is timid enough to be mostly working in a branch :)

[13:28] <MasterDuke> jnthn: now that there's been a release, any objection to merging https://github.com/MoarVM/MoarVM/pull/1352 ?

[13:29] <jnthn> MasterDuke: None from me :)

[13:30] <jnthn> I guess you'll take care of the NQP/Rakudo merges and bumps too?

[13:30] <MasterDuke> cool, i'll do that and the accompanying nqp+rakudo ones in a bit

[13:31] <jnthn> MasterDuke++

[13:31] <jnthn> I'll have to review the latest hash patch soon too; now we're post release, it'd be good to also get that in

[13:41] *** sena_kun joined
[13:43] *** Altai-man left
[13:47] <MasterDuke> hm. i'm doing all these gmp changes on a local checkout of tobs++'s branch. but i want to incorporate the changes from my simplification of isprime. guess i'll merge it, and then rebase tobs branch onto master. guess it should rebase cleanly

[13:52] <tobs> MasterDuke: feel free.

[13:55] <tobs> I'm pretty slow on my branch because it turned out to take longer than that one evening last week. Today and tomorrow I'm mostly chained down by extra duties I thought were a good idea to take on a few months back...

[13:56] <tobs> If you want to work away on the GMP building because you have leftover weekend time, that's no problem for me. You can push my branch forward to create an entirely new one.

[13:56] <tobs> Otherwise I'll get back to it in due time.

[13:57] <MasterDuke> tobs: i think it'll mean i can't push changes back to your branch. but that shouldn't really matter, cause most of my changes are actually using gmp. so you can edit your branch as you want and i'll just eventually extract these commits that implement gmp onto a new branch after yours is merge

[13:57] <MasterDuke> *merged

[14:07] <Geth> Â¦ MoarVM: df77d3cf78 | (Daniel Green)++ | 8 files

[14:07] <Geth> Â¦ MoarVM: Simplify and optimize isprime_I

[14:07] <Geth> Â¦ MoarVM: 

[14:07] <Geth> Â¦ MoarVM: Remove the `rounds` option. Rakudo only ever used a single (too large)

[14:07] <Geth> Â¦ MoarVM: value and the op does not appear to be used in the ecosystem. Instead,

[14:07] <Geth> Â¦ MoarVM: hardcode the value passed to the libtommath function to 40, chosen based

[14:07] <Geth> Â¦ MoarVM: on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf

[14:07] <Geth> Â¦ MoarVM: Also, libtommath now returns false for 1, so remove that check in our

[14:07] <Geth> Â¦ MoarVM: <â€¦commit message has 11 more linesâ€¦>

[14:07] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/df77d3cf78

[14:07] <Geth> Â¦ MoarVM: cd8e18280a | MasterDuke17++ (committed using GitHub Web editor) | 8 files

[14:07] <Geth> Â¦ MoarVM: Merge pull request #1352 from MasterDuke17/simplify_and_optimize_isprime

[14:07] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cd8e18280a

[14:13] <timotimo> i really wonder why gmp can be so much faster at that one simple thing; i wonder if it has some sort of optimization to get around storing data in a separate allocation or something?

[14:16] <MasterDuke> which one simple thing?

[14:20] <timotimo> oh, adding 1 to a big-ish number over and over

[14:21] <MasterDuke> oh, right

[14:24] <MasterDuke> 86% of the way through bigintops.c...

[14:27] <timotimo> i seem to remember, perhaps wrongly, that we couldn't use gmp because it does very strange things with error handling?

[14:29] <timotimo> i wonde rwhat i'm confusing it with

[14:30] <MasterDuke> well, i don't know what it does about errors. doesn't return an error value from every function like tommath does

[14:33] <timotimo> "A limb means the part of a multi-precision number that fits in a single machine word. (We chose this word because a limb of the human body is analogous to a digit, only larger, and containing several digits.)"

[14:35] <timotimo> "Since GMP types are implemented as one-element arrays, using a GMP variable as a parameter passes a pointer to the object. Hence the call-by-reference." - perhaps interesting or important detail

[14:43] <timotimo> i can not find anything at all about error reporting in the gmp docs

[14:49] <MasterDuke> guess you don't need to report them if you never make any

[14:49] <timotimo> i guess there are just never any errors

[14:49] <timotimo> yeah

[15:03] <MasterDuke> arg! those relocation/-fPIC errors again. what did i do to fix it?

[15:11] <timotimo> where do you get them?

[15:11] <timotimo> i seem to recall it tells you what wasn't built with -fPIC?

[15:20] *** brrt joined
[15:20] <MasterDuke> it recommends building with -fPIC, but we already are

[15:20] <MasterDuke> i fixed it, switched all references to the .so

[15:20] <MasterDuke> and it built

[15:20] <MasterDuke> time to ship it

[15:21] <MasterDuke> oh hey, nqp built too

[15:22] <MasterDuke> heh. does not pass tests. who's surprised?

[15:23] <MasterDuke> not ok 64 - pow (int, positive)

[15:23] <MasterDuke> #      got: '5970554685064519004265641008828923248442340700473500698131071806779372733915289638628729'

[15:23] <MasterDuke> # expected: '5970554685064519004265641008828923248442340700473500698131071806779372733915289638628729'

[15:24] <MasterDuke> #      got: '0'

[15:24] <MasterDuke> # expected: '0'

[15:25] <timotimo> equality checks dont work?

[15:26] <MasterDuke> #      got: '-1a'

[15:26] <MasterDuke> # expected: '-1A'

[15:30] <MasterDuke> doesn't look like there's a way to change that. might have to patch gmp

[15:32] <MasterDuke> some are just a string comparison, i shouldn't have changed anything about that

[15:38] <MasterDuke> hm. wonder if it's that gmp's function to get the size in a base might be off by +1? so when we alloc the string, it could be 1 too big?

[15:39] <MasterDuke> could strlen the resulting string to get the exact size, but that seem wasteful

[16:50] *** brrt left
[17:43] *** sena_kun left
[17:45] *** sena_kun joined
[18:33] <MasterDuke> well, that works. will leave it for now, maybe will think of a better solution when firing on more cylinders

[18:57] <MasterDuke> hm. i have it passing all nqp tests, except the ones that differ because of the case of hex numbers. i did have to change one test: from `nqp::iseq_n(nqp::div_In(box(1), $huge), 1e-300)` to `nqp::islt_n(nqp::div_In(box(1), $huge), 1e-300)`

[19:01] <MasterDuke> and instead of using https://github.com/MoarVM/MoarVM/blob/master/src/math/bigintops.c#L31-L72 and this algorithm https://github.com/MoarVM/MoarVM/blob/master/src/math/bigintops.c#L1166-L1185 i just converted to gmp floats and used their float division

[19:26] <MasterDuke> ugh. i'm trying to patch gmp so our hex values match, and it looks like it should be a simple change, but i'm not picking it up in moarvm

[19:49] *** zakharyas joined
[19:53] *** zakharyas left
[19:58] *** zakharyas joined
[20:04] <MasterDuke> huh. why can't i step into gmp functions in gdb?

[20:04] <jnthn> Was the so build with debug symbols?

[20:04] <MasterDuke> i think so

[20:05] <jnthn> .oO( this is so confusing... )

[20:05] <MasterDuke> '...with debug_info...'

[20:05] <jnthn> Can you set a breakpoint in them?

[20:06] <MasterDuke> i can make a change, rebuild, and the md5sum of the .so changes. but i don't see my changes reflected in what actually happens

[20:06] <MasterDuke> hm. let me try

[20:07] <MasterDuke> nope

[20:11] <MasterDuke> i rebuilt with --optimize=0, same

[20:12] <MasterDuke> well, the values are the same even if the case is different

[20:12] <MasterDuke> i shall punt on this and look at the actual couple failing tests in rakudo's `make m-test`

[20:13] *** brrt joined
[20:21] <brrt> good * #moarvm

[20:21] *** Kaeipi left
[20:46] <lizmat> brrt o/

[20:49] <brrt> ohai lizmat

[20:51] <brrt> finally autumn right :-)

[20:52] <lizmat> yeah... only cycled 35 km today...  it was cold and windy and had to wear a coat for the first time in a looong time  :-)

[20:52] <MasterDuke> errors in 26 spectest files. i suspect a couple will be fixed if i fix what's wrong with m-test

[20:53] <jnthn> o/ brrt

[20:53] <jnthn> Was raining all day here. And cold enough that I wore a light jacket.

[20:53] <jnthn> MasterDuke: You're already that far with the gmp branch? Wow :)

[20:54] <MasterDuke> it was a lot of mechanical changes

[20:54] <MasterDuke> but now we'll see if all the logic is the same. e.g., replaced tommath func x with gmp func y. theoretically they operate the same...

[20:55] <brrt> \o jnthn

[21:03] *** brrt left
[21:05] <MasterDuke> the problem right now i'm seeing is that the bigint here https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6bigint.c#L113 is zero when it shouldn't be

[21:08] *** sena_kun left
[21:35] *** zakharyas left
[21:44] *** leont left
