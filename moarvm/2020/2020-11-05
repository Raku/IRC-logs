[00:09] *** Altai-man joined
[00:11] *** sena_kun left
[00:25] *** Altai-man left
[01:15] *** lucasb left
[03:47] *** MasterDuke left
[08:09] *** Altai-man joined
[08:52] *** MasterDuke joined
[09:06] *** zakharyas joined
[09:11] <nwc10> good *, #moarvm 

[09:14] *** domidumont joined
[09:39] *** MasterDuke left
[10:44] *** MasterDuke joined
[11:04] *** domidumont left
[11:04] <MasterDuke> timotimo: any further thoughts/suggestions for https://github.com/MoarVM/MoarVM/pull/1376 ? or should i merge as is and someone who knows html/css/etc can prettify the output?

[11:46] *** MasterDuke left
[11:54] *** MasterDuke joined
[12:10] *** sena_kun joined
[12:11] *** Altai-man left
[12:14] *** MasterDuke left
[12:16] *** zakharyas left
[13:08] *** MasterDuke joined
[13:15] <lizmat> does this ring a bell with anyone?

[13:15] <lizmat> Serialization Error: missing static code ref for closure 'run' 

[13:24] <lizmat> seen at https://github.com/lizmat/Text-Flags/runs/1358372678?check_suite_focus=true

[13:24] <lizmat> afk for a few hours&

[13:33] *** zakharyas joined
[13:47] *** lucasb joined
[14:59] <timotimo> MasterDuke: i think stuff in tools/ that isn't used regularly as a necessary part of development, like unicode updates or update_ops, can be merged a bit more leniently

[15:00] <MasterDuke> yeah, i don't mind merging as is.but if you have some easy enhancements i'll do them first

[15:01] <[Coke]> I wouldn't worry about pretty if the functionality is improved, for this tool.

[15:01] <[Coke]> I'd be happy to look at the existing output if you gave me a sample... been a while since I've had done css for money, but could look.

[15:02] <[Coke]> also, some checks on the branch not successful?

[15:02] <MasterDuke> https://github.com/MoarVM/MoarVM/files/5482539/SETTING__src_core_c_Instant_pm6.coverage.html.txt but you need to remove the final '.txt'

[15:03] <MasterDuke> the fails are some random moarvm/nqp problem, completely unrelated to my changes

[15:05] *** MasterDuke left
[15:06] <[Coke]> I think the span hover is fine for now - a more involved solution would be a click to modal, maybe, where you click on "2 more" and get a div instead. But that's a much bigger change (and requires JS)

[15:06] <[Coke]> (for 2 more? span is fine. for 65 more? think we do need the popup eventually)

[15:12] *** MasterDuke joined
[15:12] <MasterDuke> ugh, don't know why my connection keeps dropping

[15:14] *** vrurg_ is now known as vrurg

[15:22] <Geth_> ¦ MoarVM: 6a2284e665 | (Daniel Green)++ | tools/parse_coverage_report.p6

[15:22] <Geth_> ¦ MoarVM: Report the lines that caused coverage

[15:22] <Geth_> ¦ MoarVM: 

[15:22] <Geth_> ¦ MoarVM: This makes the program even more specific to parsing a coverage report

[15:22] <Geth_> ¦ MoarVM: of a Rakudo spectest. But the benefit is you can see what lines in the

[15:22] <Geth_> ¦ MoarVM: tests cover lines in Rakudo. It would probably be better to create a

[15:22] <Geth_> ¦ MoarVM: table, or hoverover/popup (maybe on the line number?), but I don't know

[15:22] <Geth_> ¦ MoarVM: HTML/CSS/JS/etc, so just sticking them at the end of the line.

[15:22] <Geth_> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6a2284e665

[15:22] <Geth_> ¦ MoarVM: aa83051a1d | (Daniel Green)++ | tools/parse_coverage_report.p6

[15:22] <Geth_> ¦ MoarVM: If there are a lot of covering lines, hide them...

[15:22] <Geth_> ¦ MoarVM: 

[15:22] <Geth_> ¦ MoarVM: behind a <span>.

[15:22] <Geth_> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/aa83051a1d

[15:22] <Geth_> ¦ MoarVM: 37e4618f4d | MasterDuke17++ (committed using GitHub Web editor) | tools/parse_coverage_report.p6

[15:22] <Geth_> ¦ MoarVM: Merge pull request #1376 from MasterDuke17/add_file_causing_coverage_to_parse_coverage_report

[15:22] <Geth_> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/37e4618f4d

[15:23] <[Coke]> MasterDuke++

[15:23] <MasterDuke> thanks for looking

[15:24] <MasterDuke> timotimo: if you want to help with something completely unrelated, i was reading https://www.mail-archive.com/perl6-all@perl.org/msg109603.html again recently and just tried to do a completely terrible implementation of doing an nqp::index before a regex with a literal

[15:26] <timotimo> ah, you mean running the index before the regex even runs at all?

[15:28] <MasterDuke> yeah

[15:31] <MasterDuke> https://gist.github.com/MasterDuke17/a124b178451becd1e55dd62dae69d6f9

[15:32] <MasterDuke> building nqp dies with `+++ Compiling   NQPP5QRegex.moarvmThis representation (P6int) does not support attribute storage (for type BOOTInt)   at gen/moar/stage2/QRegex.nqp:1695  (/home/dan/Source/perl6/nqp/QRegex.moarvm:!protoregex) from <unknown>:1  (nqp.moarvm:statement_control)`

[15:33] <MasterDuke> but an nqp-m does get created and trying to run a regex with it dies with `Cannot find method 'MATCH' on 'BOOTInt': no method cache and no .^find_method   at gen/moar/stage2/QRegex.nqp:2258  (/home/dan/Source/perl6/nqp/QRegex.moarvm:parse) from gen/moar/stage2/QRegex.nqp:2351  (/home/dan/Source/perl6/nqp/QRegex.moarvm:ACCEPTS) from <unknown>:1

[15:33] <MasterDuke> (/home/dan/Source/perl6/nqp/NQPCORE.setting.moarvm:ACCEPTS) from -e:1  (<ephemeral file>:<mainline>)`

[15:37] <timotimo> i wonder if having code in this place of the optimizer will get us around the regex initialization at all

[15:37] <timotimo> or if it's too late

[15:38] <timotimo> what does the dump look like from the optimizer?

[15:39] <MasterDuke> gist updated

[15:40] <timotimo> there's no else branch, right?

[15:40] <MasterDuke> right

[15:41] <timotimo> so if the text isn't found, what does it return actually? 0 or something?

[15:42] <MasterDuke> i guess, that's probably where the errors about P6int and such are coming from

[15:42] <MasterDuke> but i wasn't sure what the else should be

[15:42] <timotimo> right, it'll have to return a "failed match" match object

[15:42] <timotimo> so i guess something something !cursor-fail something

[15:44] *** brrt joined
[15:44] <brrt> \o

[15:45] <brrt> with an rpi 400 I might finally get an armv8 machine

[15:56] <MasterDuke> hm, add an else of `- QAST::Op(callmethod !cursor_fail)   - QAST::Var(lexical $/)` (or $¢) dies with `Cannot call method '!cursor_fail' on a null object`

[16:04] <nwc10> o/

[16:06] <timotimo> it's possible that $/ isn't available as a lexical, only in some register, and the regex compiler handles hooking it up to everything?

[16:08] <MasterDuke> so https://gist.github.com/MasterDuke17/a124b178451becd1e55dd62dae69d6f9#file-output-txt-L8-L9 is kind of lying?

[16:08] *** Altai-man joined
[16:10] <MasterDuke> hm, i now have it building, but it's not any faster (and if i manually put the `nqp::index(...) && ` in the example i'm running it is)

[16:11] *** sena_kun left
[16:20] <timotimo> oh i didn't look at the thing right apparently

[16:21] <timotimo> can you update the diff again?

[16:22] <timotimo> and the output as well

[16:23] <MasterDuke> updated to current status

[16:25] <MasterDuke> if i put the `say()`s back i get `Oops!!! Cannot stringify this object of type P6opaque (QAST::Regex)`

[16:26] <MasterDuke> not quite sure what i did to get it to build. may have confused myself

[16:28] <timotimo> »Confused at line 6, near "use QRegex« sounds like the regex engine isn't working right at that point

[16:28] <timotimo> since that's probably the start of the file, and the first file that tries parsing in the first place

[16:29] <MasterDuke> yeah

[16:29] <MasterDuke> notice anything i'm doing obviously wrong?

[16:30] <timotimo> i'd be interested in more context around the regex itself; i'm not sure how a bare Regex node of type fail will work, like is there usually something around it?

[16:32] <MasterDuke> dunno, there aren't many of them manually created in the source

[16:32] <[Coke]> I would use dd instead of say in case something is generating output during the build.

[16:32] <[Coke]> (or at least note)

[16:33] <timotimo> this is nqp code, it doesn't have dd, but it does have note()

[16:34] <MasterDuke> yea, switching to note() doesn't change anything

[16:35] <[Coke]> ah well

[16:37] <timotimo> it occurs to me: do we do the scan-for-literal optimization for stuff like / [initial]+ / at all?

[16:37] <timotimo> it's quite possible i forgot about that case completely

[16:38] <timotimo> oh jesus

[16:38] <MasterDuke> oh?

[16:39] <timotimo> https://gist.github.com/timo/4430620df583760d081e57430eff6c41#file-part-of-nqp-nqp-s-compilation-after-optimization - that looks impressive

[16:39] <timotimo> possibly wrong?

[16:41] <MasterDuke> hm. maybe not?

[16:41] <timotimo> need to look at the source

[16:42] <MasterDuke> https://github.com/Raku/nqp/blob/master/src/NQP/Grammar.nqp#L80

[16:42] <timotimo> this is about pod_comment, right?

[16:44] <timotimo> i don't think it should optimize for any literals here?

[16:44] <MasterDuke> why not?

[16:45] <MasterDuke> oh, because of the alternations and such?

[16:45] <timotimo> yeah

[16:45] <MasterDuke> yeah, if there was a way to only do it for "simple" regexes, at least to start/test that would be good

[16:45] <timotimo> your current optimization logic is "either the string is found somewhere, or it's not a match", right?

[16:46] <MasterDuke> yeah

[16:46] <MasterDuke> maybe only if `$n == 1`?

[16:46] <timotimo> where does n come from?

[16:47] <MasterDuke> `my int $n := nqp::elems(@($node));` at the top of `visit_children()`

[16:47] <timotimo> ah

[16:47] <timotimo> that won't do too much i'm afraid

[16:47] <timotimo> i think it's an optimization that wants to happen only at the very top level maybe?

[16:48] <MasterDuke> ah, only if `$i == something`?

[16:49] <timotimo> more like, not inside of visit_children, since that is run everywhere

[16:50] <MasterDuke> oh, a new branch in the if/else up in `optimize()`?

[16:50] <timotimo> i think that would be a good place to start

[16:51] <timotimo> in order to find if there's a literal you can work with, that'll be a little bit of work for an analysis step

[16:53] <MasterDuke> hm. adding an 'elsif $type eq 'literal' { note($node.dump) }` doesn't ever print

[16:53] <timotimo> this happens before all other optimizations

[16:54] <timotimo> even / Foo / is actually a concat of scan + literal

[16:55] <MasterDuke> hm

[16:55] <MasterDuke> scan + concat + literal actually

[16:57] <MasterDuke> oh, that was at target=ast. it is simplified somewhat at optimize

[16:58] <timotimo> + pass

[16:58] <timotimo> right, at the position you're in in method optimize you'll be seeing the ast output

[16:58] <timotimo> unless you put your optimization at the end of method optimize as a second phase so to speak

[16:58] <timotimo> that may be a good idea

[16:59] <timotimo> since we would want to go through the tree anyway to analyze for literals that appear

[17:00] <MasterDuke> hm. so if at the end it's just scan + literal + pass, turn into the `if index`?

[17:00] <MasterDuke> as the simplest possible implementation

[17:02] <timotimo> right. also, we shouldn't skip optimizing the rest of the regex for the "else" case

[17:03] <MasterDuke> i was just going to introduce a new if before $node is returned

[17:04] <timotimo> probably OK

[17:08] *** squashable6 left
[17:11] *** squashable6 joined
[17:15] <MasterDuke> hm, is there an easy way to tell if more complicated ones are ok? e.g., if it has a literal anywhere, but no subrules

[17:15] <nwc10> nine: someone (well, the boss) has set his work status to "

[17:15] <nwc10> Trump? Biden? pahhh! AMD Ryzen 7 5800X !!!"

[17:24] <Altai-man> .oO ( 5950X )

[17:24] <tellable6> 2020-10-30T13:05:18Z #raku <[Coke]> altai-man (converting docs site) YAY

[17:24] <tellable6> 2020-11-01T21:24:17Z #raku-dev <vrurg> Altai-man Could you please do a blin run on R#4000?

[17:24] <linkable6> R#4000 [open]: https://github.com/rakudo/rakudo/pull/4000 Don't inherit mixin class language revision

[17:24] <Altai-man> Oh, 4 days ago...

[17:25] <timotimo> MasterDuke: not without a little more in-depth analysis i don't think?

[17:39] <timotimo> we're already walking the whole regex tree, or at least the majority of it

[17:40] <timotimo> on the way back down, we could perhaps pass back if there's any lexicals that have to be in the source for a match to be successful

[17:40] <timotimo> and then an alteration would union them, for example

[18:12] *** MasterDuke left
[18:26] *** brrt left
[18:37] <Geth_> ¦ MoarVM/try_fix_missing_pthread_on_windows: 18e6f94e33 | (Timo Paulssen)++ | src/platform/threads.h

[18:37] <Geth_> ¦ MoarVM/try_fix_missing_pthread_on_windows: we need to import pthread on windows to get a type

[18:37] <Geth_> ¦ MoarVM/try_fix_missing_pthread_on_windows: review: https://github.com/MoarVM/MoarVM/commit/18e6f94e33

[18:40] <Geth_> ¦ MoarVM: timo++ created pull request #1377: we need to import pthread on windows to get a type

[18:40] <Geth_> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1377

[18:40] <timotimo> .tell dumarchie please check out if https://github.com/MoarVM/MoarVM/pull/1377 fixes build on MinGW

[18:40] <tellable6> timotimo, I'll pass your message to dumarchie

[18:55] *** brrt joined
[19:02] *** MasterDuke joined
[19:05] <MasterDuke> well, i have something that finds the pattern and makes that `if index + orig regex else fail regex`, but it doesn't work. i.e., a regex that should match isn't

[19:09] <timotimo> i can take a look

[19:09] <timotimo> may be a good idea to make this optimization depend on an environment variable

[19:09] <timotimo> so that you can compile a full nqp first and then test different regexes on the commandline

[19:09] <timotimo> unless you're already doing that?

[19:36] <MasterDuke> https://gist.github.com/MasterDuke17/a124b178451becd1e55dd62dae69d6f9 updated

[19:36] <MasterDuke> good idea

[19:38] <timotimo> can you show the post-optimize qast?

[19:40] <MasterDuke> no, because a fail regext can't be stringified

[19:41] <MasterDuke> gist updated

[19:42] <timotimo> huh?

[19:44] <MasterDuke> hm, i thought that was the reason

[19:44] <MasterDuke> nqp: say(QAST::Regex.new(:rxtype<literal>, "hi").dump)

[19:44] <camelia> nqp-moarvm: OUTPUT: «- QAST::Regex(:rxtype(literal) :subtype()) ␤  - hi␤␤»

[19:44] <MasterDuke> nqp: say(QAST::Regex.new(:rxtype<literal>, :subtype<fail>, "hi").dump)

[19:44] <camelia> nqp-moarvm: OUTPUT: «- QAST::Regex(:rxtype(literal) :subtype(fail)) ␤  - hi␤␤»

[19:45] <MasterDuke> but i guess not

[19:45] <MasterDuke> nqp: say(QAST::Regex.new(:rxtype<literal>, "hi"))

[19:45] <camelia> nqp-moarvm: OUTPUT: «Cannot stringify this object of type P6opaque (QAST::Regex)␤   at gen/moar/stage2/NQPCORE.setting:1075  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPCORE.setting.moarvm:join)␤ from gen/moar/stage2/NQPCORE.setting:1063  (/home/camelia/rakudo-m-inst-2/share…»

[19:45] <MasterDuke> that's the error

[19:46] <MasterDuke> but i get that if i do --target=optimize

[19:47] <timotimo> what the heck

[19:47] <timotimo> maybe rxtype literal isn't right for a subtype fail

[19:48] <timotimo> for example

[19:48] <timotimo>     │   │   │   - QAST::Regex(:rxtype(anchor) :subtype(fail))  <!> 

[19:53] <MasterDuke> changing to that makes --target=optimize succeed

[19:53] <MasterDuke> now to figure out why the match doesn't though

[19:54] <MasterDuke> i guess self isn't what to run index on?

[19:55] *** MasterDuke left
[19:58] *** zakharyas left
[19:59] <timotimo> quite possibly, could try $/.target, but it'd be better if we could somehow properly™ expose the target string's local

[20:09] *** sena_kun joined
[20:10] *** MasterDuke joined
[20:11] *** Altai-man left
[20:22] <MasterDuke> changed the first argument to index to `QAST::Op.new(:op('callmethod'), :name('target'), QAST::Var.new(:name('$/'), :scope('lexical')))` but that dies with `Cannot call method 'target' on a null object`

[20:37] <timotimo> i guess i would ahve to look at the mbc?

[20:42] <MasterDuke> heh. `self` is `9`

[20:43] <timotimo> so an integer?

[20:43] <MasterDuke> looks like

[20:46] <MasterDuke> `$¢` is empty

[21:02] <MasterDuke> everything i've tried is empty. or '9'

[21:03] <MasterDuke> oh, that '9' was the last char of the string i was matching against

[21:03] <MasterDuke> i'm doing `if "123def789" ~~ / "def" / { say("match") } else { say("no match") }`. if i change it to "123def78" then `self` is '8'

[21:04] <MasterDuke> that for sure i don't understand

[21:05] <timotimo> that seems odd, i wonder if the code gen is just completely custom for QRegex and such, and our qast nodes put in there are .. ignored?

[21:05] <timotimo> or treated wrong

[21:09] <timotimo> i'd really need to see the mbc to understand this

[21:12] <MasterDuke> gist updated

[21:14] <timotimo> ok it doesn't seem to have a $_ lexical, and the target string seems to live in the first argument

[21:15] <MasterDuke> i tried printing __lowered_lex_1 and __lowered_lex_2. one was empty, the other was '9'

[21:15] <timotimo> ah, right, we can't easily know which local number they got, right?

[21:16] <timotimo> lowered_lex_1 should be the same as self?

[21:16] <timotimo> at what position did you print __lowered_lex_2?

[21:16] <MasterDuke> same place i printed self

[21:17] <MasterDuke> i just had two say()s

[21:18] <timotimo> can you output the name of the type of self there? do we have DUMP in nqp? i don't think we do

[21:18] <timotimo> m: say 1.DUMP

[21:18] <camelia> rakudo-moar 85847d2f1: OUTPUT: «1␤»

[21:18] <timotimo> m: say [1, 2, "hi"].DUMP

[21:18] <camelia> rakudo-moar 85847d2f1: OUTPUT: «MVMArray: Can't shift from an empty array␤  in block <unit> at <tmp> line 1␤␤»

[21:18] <timotimo> hah

[21:19] <timotimo> +                        QAST::Regex.new( :rxtype<anchor>, :subtype<fail>, <!> )));

[21:19] <timotimo> that looks very wrong? what is <!> in pure nqp code anyway?

[21:19] <timotimo> nqp: say(<!>)

[21:19] <camelia> nqp-moarvm: OUTPUT: «!␤»

[21:19] <timotimo> oh, just a quote of a string

[21:21] <MasterDuke> nqp: say(nqp::reprname("a")) # that?

[21:21] <camelia> nqp-moarvm: OUTPUT: «P6str␤»

[21:22] <timotimo> i think we need to get the how and call its .name? perhaps you can nqp::getdebugname but i'm not sure that exists?

[21:24] *** sena_kun left
[21:24] *** sena_kun joined
[21:26] <[Coke]> it's not documented, anyway.

[21:27] <[Coke]> jvm has "debugnoop", that's it.

[21:27] <MasterDuke> Cannot find method 'HOW' on object of type NQPMatch

[21:28] <MasterDuke> `QAST::Op.new(:op('say'), QAST::Op.new(:op('callmethod'), :name('name'), QAST::Op.new(:op('callmethod'), :name('HOW'), QAST::Var.new(:name('self'), :scope('local')))))`

[21:34] <MasterDuke> ah ha

[21:36] <MasterDuke> heh. ok now i have it working, but it's not faster

[21:38] <[Coke]> is it faster on fail?

[21:38] <MasterDuke> `my $a := 0; my $b := -1; my $s := nqp::time_n; while $b++ < 1_000_000 { $a++ if $b ~~ / 123 / }; say(nqp::sub_n(nqp::time_n, $s)); say($a)` is my test case

[21:38] <[Coke]> I imagine it would have to be slower on success unless you were being clever.

[21:38] <[Coke]> ah

[21:39] <MasterDuke> it only succeeds 4k times

[21:40] <MasterDuke> takes ~3.7s with or without the optimization. but `./nqp-m -e 'my $a := 0; my $b := -1; my $s := nqp::time_n; while $b++ < 1_000_000 { $a++ if nqp::index($b, "123", 0) >= 0 && $b ~~ / 123 / }; say(nqp::sub_n(nqp::time_n, $s)); say($a)'` only takes ~0.17s

[21:41] <[Coke]> maybe you need larger strings/needles before it helps?

[21:42] <MasterDuke> but doing it manually as the example above shows is 20x faster

[21:43] *** rypervenche left
[21:44] <MasterDuke> it does happen outside/before the QAST::Block where it happens with the optimization

[21:44] <timotimo> try nqp::gethow instead of calling .HOW

[21:44] <timotimo> but i guess NQPMatch is the answer we needed

[21:45] <MasterDuke> yeah, i now have `QAST::Op.new(:op('index'), QAST::Op.new(:op('callmethod'), :name('target'), QAST::Var.new(:name('self'), :scope('local'))), QAST::SVal.new(:value($c[1][0])), QAST::IVal.new(:value(0))),`

[21:46] <timotimo> can you attach gdb, break on nqp::index, and dump the stack trace?

[21:46] <timotimo> i would assume the code we're creating from the optimizer is already inside a thing where setup has already happened

[21:46] <timotimo> after all, there is already an NQPMatch, right?

[21:46] <timotimo> well, can't really return a failed match without building an NQPMatch

[21:48] *** brrt left
[21:51] <timotimo> i think we may have to do things a little different in general. like, we might have to annotate the regex block with the dominating literal and check for it when we see the regex be used inside an if or something

[21:52] <MasterDuke> https://gist.github.com/MasterDuke17/a124b178451becd1e55dd62dae69d6f9 updated

[21:52] <timotimo> yeah, the ACCEPTS method calls and the parse method calls are probably where the cost comes from

[21:53] <timotimo> when you write it by hand you're skipping all of that

[21:57] <timotimo> that's not as simple :<

[21:57] <MasterDuke> hm

[21:58] *** brrt joined
[21:58] <timotimo> i don't know the order in which the optimizer encounters the QRegex tree vs the spot where it is mentioned

[21:59] *** rypervenche joined
[22:00] <MasterDuke> you mean we could be screwed if it optimizes if's before the things in the if?

[22:00] <MasterDuke> when we want it to have optimized the regex inside first, then we can pull information out when doing the if?

[22:01] <timotimo> not necessarily screwed, if we can navigate easily from the mention to the contents

[22:03] *** vrurg left
[22:03] *** vrurg_ joined
[22:06] <timotimo> BBL

[22:27] <MasterDuke> off to sleep for me

[23:16] *** brrt left
[23:37] *** sena_kun left
[23:47] *** sena_kun joined
