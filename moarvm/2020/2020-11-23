[02:10] *** vrurg left
[02:10] *** vrurg joined
[04:56] *** coverable6 left
[04:56] *** bloatable6 left
[04:56] *** committable6 left
[04:56] *** linkable6 left
[04:56] *** releasable6 left
[04:56] *** quotable6 left
[04:56] *** notable6 left
[04:56] *** evalable6 left
[04:56] *** greppable6 left
[04:56] *** unicodable6 left
[04:56] *** nativecallable6 left
[04:56] *** sourceable6 left
[04:56] *** tellable6 left
[04:56] *** squashable6 left
[04:56] *** statisfiable6 left
[04:56] *** bisectable6 left
[04:56] *** shareable6 left
[04:56] *** benchable6 left
[04:57] *** greppable6 joined
[04:57] *** shareable6 joined
[04:57] *** benchable6 joined
[04:57] *** evalable6 joined
[04:57] *** notable6 joined
[04:57] *** bisectable6 joined
[04:58] *** sourceable6 joined
[04:58] *** unicodable6 joined
[04:58] *** quotable6 joined
[04:58] *** coverable6 joined
[04:58] *** tellable6 joined
[04:58] *** releasable6 joined
[04:59] *** squashable6 joined
[04:59] *** linkable6 joined
[04:59] *** nativecallable6 joined
[04:59] *** bloatable6 joined
[04:59] *** committable6 joined
[04:59] *** statisfiable6 joined
[06:10] <nwc10> good *, #moarvm 

[07:12] *** samcv left
[07:46] *** sena_kun joined
[08:06] *** domidumont joined
[08:09] *** patrickb joined
[08:11] *** Altai-man joined
[08:13] *** sena_kun left
[08:55] *** zakharyas joined
[09:09] <MasterDuke> interesting, this segv on my use_fsa_for_vmarray branch also has nqp::create and allocate() in the backtrace, same as that segv from the use statements i was just attempting to debug

[10:32] <jnthn> MasterDuke: That's not terribly surprising, in so far as `create` is one of the most common paths into the GC (assuming the crash is in the GC)

[10:34] <MasterDuke> huh. it's just that i haven't seen it much before. guess most of my previous experiences weren't gc-related

[10:44] <MasterDuke> fwiw, i'm getting a `free(): invalid pointer` in MVM_fixed_size_safepoint when running t/spec/S32-io/io-cathandle.rakudo.moar

[11:20] <MasterDuke> hm, but the FSA shouldn't be freeing something that was created by the gc, right?

[11:21] <MasterDuke> doh, nm, that's how freeing at a safepoint is handled

[11:29] *** leont joined
[11:33] <jnthn> Any luck with valgrind/ASAN, since it's potentially a double free?

[11:38] <MasterDuke> you know, i'd completely forgotten about the valgrind run i did https://gist.github.com/MasterDuke17/f10242839daa5b74f389f75acc62fd77

[11:40] <MasterDuke> it goes away with GC_DEBUG=3

[11:40] <jnthn> oh, that's interesting output

[11:40] <jnthn> Did you try the FSA debug thing?

[11:41] <MasterDuke> doh, again...let's give that a run...

[11:41] <jnthn> Because it looks like it is handing pack memory inside of a page (so the initial request was small), but then freeing as if it was an oversized page

[11:41] <jnthn> e.g. the size is being provided incorrectly at freeing time

[11:41] <jnthn> *handing back

[11:41] <MasterDuke> yeah

[11:42] <jnthn> And FSA debug can detect those

[11:42] <jnthn> Could be something like accidentally multiplying wrong at free time, or using the new size instead of the old size when doing the free because of a growth

[11:43] <MasterDuke> hm, insta segv

[11:47] <jnthn> Wow

[11:47] <MasterDuke> oh, the fsa doesn't like to do anything (alloc, free, etc) with a size of 0, right

[11:49] <jnthn> Can't remember

[11:50] <MasterDuke> yep, https://github.com/MoarVM/MoarVM/pull/689/files#diff-d89aecbbb2b8fcf4b95a0ece5cc56f2a13426119928003274d7df753a0dca5cdR107 `arr->body.ssize` was 0

[11:50] <jnthn> Ah

[12:03] <MasterDuke> woohoo, spectest now passes

[12:04] <jnthn> Yay :)

[12:06] <MasterDuke> jnthn: however `my @a; race for (^10_000_000).race(:100batch, :8degree) { @a.push($_) }; say @a.elems; say @a.tail` still segvs. i sort of thought it now *should* just give "wrong" values

[12:08] <jnthn> Well, did the re-org happen to move the ssize and so on into the thing allocated via the FSA?

[12:08] <jnthn> (And the start too, I guess)

[12:09] <MasterDuke> you know, i've forgotten (haven't looked at the early commits recently). but i suspect not

[12:10] <MasterDuke> i think it's just slots that are fsa now

[12:11] <MasterDuke> guess that'll be the next step

[12:11] *** sena_kun joined
[12:13] *** Altai-man left
[12:17] <timotimo> right, putting only the slots in the FSA is not yet enough

[12:36] <MasterDuke> any particular suggestions for the best way to stick the other stuff in?

[12:36] *** zakharyas left
[12:40] <timotimo> not sure if you can automate the transformation

[13:22] <jnthn> I guess it's 2 or 3 items and that they are pointer sized; I guess I'd try and keep the amounts of memory we ask for as powers of 2 (at least up to a certain size)

[13:23] <jnthn> It's a bit annoying

[14:06] *** zakharyas joined
[14:15] <MasterDuke> i assume it'd be too simple to "just" make body a pointer and FSA alloc it? https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/VMArray.h#L41

[14:16] <MasterDuke> (with appropriate changes to how it's accessed of course)

[14:16] <jnthn> Hm, well...maybe but then we have two allocations with the FSA and I think it's easier to reason about the safety if there's one

[14:17] <jnthn> I mean, we want one self-describing piece of memory

[14:19] <nwc10> I think that you can prove the concept with two blocks of memory. But then really it should be optimised to one

[14:19] <nwc10> it also makes the CPU cache performance better

[14:20] <jnthn> In terms of "doesn't segfault" I think it's much harder to prove :)

[14:20] <MasterDuke> you mean for body and slots? well, i think i was thinking of doing it all in one go and adapting the current places that (re)alloc/free slots to instead adjust the whole piece

[14:20] <nwc10> by prove the concept - I meant get the current spectests passing

[14:20] <nwc10> ah OK. If you think all in one go is easer, go for that

[14:20] <jnthn> nwc10: Ah, I see.

[14:33] *** domidumont1 joined
[14:35] *** domidumont left
[16:11] *** Altai-man joined
[16:13] *** sena_kun left
[16:48] *** patrickz joined
[16:49] *** MasterDuke left
[16:50] *** patrickb left
[16:52] *** MasterDuke joined
[17:22] *** patrickz left
[17:57] *** lucasb joined
[18:04] *** domidumont1 left
[18:09] *** patrickb joined
[19:04] *** zakharyas left
[19:37] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/11/23/2020-47-present-release/

[20:11] *** sena_kun joined
[20:13] *** Altai-man left
[20:17] *** zakharyas joined
[21:41] *** MasterDuke left
[21:49] *** sena_kun left
[21:56] *** patrickb left
[21:57] *** zakharyas left
[22:14] *** samcv joined
[22:51] *** Kaeipi joined
[22:51] *** Kaiepi left
[23:08] *** Kaeipi left
[23:11] *** Kaiepi joined
[23:40] *** Kaeipi joined
[23:40] *** Kaiepi left
