[00:02] *** sena_kun joined
[00:03] *** Altai-man_ left
[01:42] <timotimo> i'm not totally up to speed with the whole thing, but what i saw while single-stepping was that tc->cur_frame->caller with its return_address would be an appropriate position to jump to, but instead of the frame's ->caller we're taking a value from a frame on the stack region?

[01:46] <timotimo> ah, a helpfully placed comment says that's to do with lazy deopt

[02:01] *** Altai-man_ joined
[02:01] <timotimo> so the return address that's being used to jump the interpreter into oblivion gets set up by the sp_dispatch_o op?

[02:03] *** sena_kun left
[02:10] <timotimo> i don't get any "marked frame for lazy deopt" output, and it also doesn't go through the orig_kind thing in the callstack frame

[02:25] <timotimo> init-array has the static "allocate on heap" bit set; could that have to do with anything?

[02:36] <timotimo> ok 1 - No SEGV or other crash in recursive init routine on a native array

[02:36] <timotimo> ^- when i disable setting the allocate on heap flag

[02:37] <timotimo> so make of that what you will i guess :)

[02:46] <timotimo> i'm not entirely sure if i can ask to only see crashes rather than cases where there's failing tests?

[02:50] <timotimo> so i wonder if we're somewhere not setting FRAME_PROMOTED when we're heap-allocating-from-the-start rather than promoting after the fact

[02:52] <timotimo> ah, it's got its own type, which is just HEAP_FRAME

[04:02] *** sena_kun joined
[04:03] *** Altai-man_ left
[05:29] *** Kaiepi joined
[05:35] <nwc10> good *, #moarvm 

[05:38] *** Kaiepi left
[05:41] *** Kaiepi joined
[06:01] *** Altai-man_ joined
[06:03] *** sena_kun left
[07:34] <nwc10> what platforms does MoarVM build on currently? In that

[07:41] <nine> I've seen x86_64, x86, PowerPC, aarch64, armv7l and MIPS. I'd guess it would build on s390x if I were to use libffi instead of dyncall. -> https://build.opensuse.org/project/show/home:niner9:rakudo-git

[07:41] <nwc10> "we run on both kinds of OS" https://www.imdb.com/title/tt0080455/quotes/qt0320035

[07:41] <nwc10> which of course can mean "Win32 and Linx"

[07:41] <nwc10> or "RPM based and Deb based"

[07:41] <nwc10> or "Ubuntu and Debian"

[07:42] <nine> Ah, well Linux, OS X, Win32, FreeBSD and OpenBSD at least

[07:42] <nwc10> but, all of those are either "linux with gcc (anything else on linux has to fake gcc well enough" or MSVC

[07:42] <nwc10> so, so far, only gcc, clang and MSVC

[07:43] <nwc10> I think the limiting factor here currently is "what platforms outside of linux, *BSD(*)and Win32" does libuv support

[07:43] <nwc10> [*](macOS diverging from *BSD)(or just jumping the shark)

[07:43] <nine> We also have configuration support for icc, so at least at some point that worked

[07:43] <nwc10> icc lies hard, and claims that it's GCC

[07:43] <nine> libuv and either dyncall or libffi

[07:44] <nwc10> which is really bloody annoying, because it doesn't quite fake it properly in somep laces

[07:44] <nwc10> or did not, when I tried it

[07:44] <nwc10> (some years ago, but I can forsee that they figure they need to lie about being gcc, and hence the problem won't never happen again)

[07:45] <nwc10> "Mozilla (compatible MSIE (compatible (..."

[07:45] <nwc10> I think that one of dyncall and libffi was mature enough that it supports platforms that are as dead as IRIX and Digital Unix

[07:46] <nwc10> I suspect that libuv is the portability blocker

[07:51] <nwc10> also, I'm not sure if I currently have access to any big endian hardware.

[08:02] *** sena_kun joined
[08:03] *** zakharyas joined
[08:03] *** Altai-man_ left
[08:48] <nine> Yep. With libffi we actually build on s390x (big endian) :)

[09:55] <jnthn> Another question is how many folks want to run on those platforms these days.

[09:56] <nwc10> "probably none, but someone else is paying them"

[09:56] <nwc10> but

[09:56] <nwc10> more reaslistically, I'm not sure how much production use there is for some linux platforms

[09:57] <nwc10> and whether it's partly on (say m68k) "because we can"

[10:01] *** Altai-man_ joined
[10:01] <nine> Well, a healthy dose of portability usually improves the quality of software and often enough helps even on the main target. Of course, like with everything one can overdo it...

[10:02] <nwc10> yes, indeed. EBCDIC...

[10:02] <jnthn> Yes, the balance is the interesting part. I mean, clearly we want big endian in the mix.

[10:02] <jnthn> ARM matters

[10:02] <jnthn> etc.

[10:02] <nwc10> specific 2 things I realised where

[10:03] <nwc10> 1) I don't think I currentlty have access to big endian systems

[10:03] *** sena_kun left
[10:03] <nwc10> 2) not sure if libuv builds against any Unix "vendor" C compilers

[10:04] <nwc10> (which are typically on big endian platforms, or at least, the ones on the OSes that started out big endian are usually the most "fun" (ie exacting) for finding the real bugs

[10:09] <nine> I've done my endianness debugging in a VM which is....fine if you do it about once a decade. For testing the Open Build Service is doing fine.

[10:11] <nwc10> I have not tried this, but IIRC that works for endianness and suchlike, but not alignment enforcement. qemu is nt enforcing alignment traps (somewhat by design - to do so would kill performance)

[11:19] *** zakharyas left
[12:02] *** sena_kun joined
[12:02] *** sena_kun left
[12:03] *** sena_kun joined
[12:03] *** Altai-man_ left
[12:25] <jnthn> OK, back to my bug hunting...

[12:26] <nwc10> "have you looked behind the sofa?

[12:26] <nwc10> "

[12:26] <nwc10> one of mine was "forgetting to initialise the pointer" - I doubt that yours are that simple.

[12:30] <jnthn> No, this one might be that I'm mismanaging the segmented stack, but if I am, I'm either too stupid to see where, or I've managed to write code that really looks convincingly correct but isn't :)

[12:31] <jnthn> Also if it's that, I don't understand why specialization is required to trigger it

[12:32] <jnthn> Phew, it seems deopt is *not* involved, though, because the last deopt happens long, long before the SEGV

[12:35] <jnthn> OK, it is probably stack mis-management

[12:36] <jnthn> Because a) if I make the stack segment huge the problem doesn't happen, and b) it's a recursion test

[12:37] <jnthn> I don't know exactly why it only trips up with spesh enabled though

[12:41] *** colomon_ left
[12:47] *** colomon joined
[12:51] *** lucasb joined
[14:00] *** Altai-man_ joined
[14:03] *** sena_kun left
[14:04] <jnthn> OK, this gets interesting. Somehow when the specializer is on, a bunch of things that are stack frame records become heap frame records

[14:04] *** statisfiable6 left
[14:04] *** reportable6 left
[14:04] <jnthn> Those are smaller on the callstack, which impacts the region boundaries

[14:05] <jnthn> However it's already rather odd that it is picking heap frame records over stack frame ones

[14:05] <[Coke]> O_o;

[14:05] <jnthn> I hope I'm reading this diff the right way around :)

[14:06] <jnthn> It appears I am

[14:06] <lizmat> .oO( have you tried rotating it 90 degrees counterclockwise? :-)

[14:07] *** statisfiable6 joined
[14:07] *** reportable6 joined
[14:10] <[Coke]> O

[14:10] <[Coke]> |

[14:10] <[Coke]> o

[14:10] <[Coke]> .-

[14:29] <jnthn> Also, if I disable the mechanism that decides to do direct heap allocations when frames largely end up being promoted, the problem goes away, but I think that's probably just hiding the issue

[14:42] <timotimo> jnthn: when i was debugging i did notice that the problematic frame on the callstack was either made as "the first record on a new stack page" or something nearby is

[14:43] <timotimo> i've wished for a pretty-printer of the callstack when looking at things; jnthn, would that be a thing you'd be interested in?

[14:44] *** zakharyas joined
[14:48] <Geth> ¦ MoarVM/new-disp: 4 commits pushed by (Jonathan Worthington)++

[14:48] <Geth> ¦ MoarVM/new-disp: 9eb15f03cd | Drop two wrong, but unreachable, switch branches

[14:48] <Geth> ¦ MoarVM/new-disp: b5a41b14e8 | Detect oversize callstack allocation requests

[14:48] <Geth> ¦ MoarVM/new-disp: aeff4db36e | Fix various callstack region start handling issues

[14:48] <Geth> ¦ MoarVM/new-disp: 29eac00587 | Don't consider debug server promotions in stats

[14:48] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/compare/cc8634af495c...29eac005873a

[14:49] <jnthn> The third of those seems to be the thing that fixes the problem, but I must admit I don't totally understand whey things go so wrong when they aren't done

[14:49] <jnthn> Also, ASAN sees leaks 

[14:49] <jnthn> Good ASAN

[14:51] <nwc10> there were already leaks

[14:51] <nwc10> I have been ignoring them.

[14:51] <jnthn> Yes, I'm not saying they're new with these patches :)

[14:51] <nwc10> I hope to feel bad about this soon and chase them down

[14:51] <nwc10> others are welcome to beat me

[14:52] <timotimo> ah, well, that looks fix-y

[14:52] <jnthn> grmbl, this doesn't make `make test` lose its hard to repro outside of running `make test` failures

[14:53] <timotimo> i wonder if recording all runs during a "make test" will work

[14:53] <timotimo> actually, rr could actually record the entire process tree

[14:53] <timotimo> but i haven't done much multi-process rr debugging yet

[14:58] <jnthn> urgh, what... :/

[14:58] <timotimo> though of course running it under rr may very well prevent it from actually breaking

[14:58] <jnthn> Loads more SEGV in the spectest run now

[14:58] <jnthn> But not when I run the things on their own

[14:59] <timotimo> ===(     790;140  3/4  0/2   2/45  0/?  0/?  0/? )======================moar: src/6model/sc.c:401: MVM_SC_WB_OBJ: Assertion `!(obj->header.flags & MVM_CF_FORWARDER_VALID)' failed.

[14:59] <timotimo> well, here's a kind of crash i guess

[14:59] <timotimo> MoarVM panic: Heap corruption detected: pointer 0x7f0ff8175420 to past fromspace

[14:59] <timotimo> ummmmmmmm

[15:00] <timotimo> there are actually multiple of these

[15:00] <jnthn> Hm, so why can't I get these to happen

[15:06] <timotimo> haha, if i do nothing special, i get a response of "the target is not responding to interrupt requests." when i ctrl-c

[15:10] <jnthn> aha...got a zeroed owner 

[15:16] <jnthn> With a small nursery it's even more easily reproduced

[15:23] <timotimo> https://gist.github.com/timo/272918577ef5b17b5f66576f295ea55f - pretty fascinating; all processes that got created as part of an rr record

[15:35] <Geth> ¦ MoarVM/new-disp: 1b62bcd597 | (Jonathan Worthington)++ | src/6model/reprs/MVMCapture.c

[15:35] <Geth> ¦ MoarVM/new-disp: Fix assorted MVMCapture GC bugs

[15:35] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1b62bcd597

[16:01] *** sena_kun joined
[16:03] *** Altai-man_ left
[16:08] <Geth> ¦ MoarVM/new-disp: 643053fd52 | (Jonathan Worthington)++ | 4 files

[16:08] <Geth> ¦ MoarVM/new-disp: Fix marking of dispatch program run temporaries

[16:08] <Geth> ¦ MoarVM/new-disp: 

[16:08] <Geth> ¦ MoarVM/new-disp: Also, make the dispatch run record smaller; in the end, we did not need

[16:08] <Geth> ¦ MoarVM/new-disp: to have a full outcome record in it.

[16:08] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/643053fd52

[16:20] <timotimo> do dispatch programs have to be tiny? should we be able to invoke the compiler to build the code object that gets used? :) :)

[16:22] <Geth> ¦ MoarVM/new-disp: 0e4330216a | (Jonathan Worthington)++ | 2 files

[16:22] <Geth> ¦ MoarVM/new-disp: Mark values we track or insert into a capture

[16:22] <Geth> ¦ MoarVM/new-disp: 

[16:22] <Geth> ¦ MoarVM/new-disp: At the point that we allocate the capture or tracking object.

[16:22] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/0e4330216a

[16:23] <timotimo> also, you think dispatch programs and records have a place in the spesh log?

[16:24] <jnthn> I don't think so; they already can be dumped

[16:24] <timotimo> that's fair

[16:25] <jnthn> Those patches help quite a bit with the crashes

[16:25] <timotimo> \o/

[16:27] <timotimo> there's dispatch programs that are simple enough that i should totally be able to generate spesh from it

[16:27] <timotimo> without breaking a sweat

[16:27] <timotimo> Dispatch program (1 temporaries)

[16:27] <timotimo>   Guard arg 0 (type=ObjAt, concrete)

[16:27] <timotimo>   Load argument 0 into temporary 0

[16:27] <timotimo>   Set result object value from temporary a

[16:29] <jnthn> Yup :)

[16:36] <timotimo> "Skip first 0 args of incoming capture; callsite from 0"

[16:36] <timotimo> oof, how do skip 0

[16:36] * timotimo goes back to algorithms & datastructures book

[16:39] <jnthn> :)

[16:40] <timotimo> mhh, i need one mode where it outputs guards and one where it outputs checks and BBs, for when multiple programs are concatenated into one spesh graph

[16:40] <timotimo> though i can do the first part first and leave the second part for later™

[16:40] <timotimo> alternatively, do the second one first and on the else branch sp_dispatch_o instead

[16:42] <timotimo> also, interested in that patch that subtracts 2 from the bytecode addresses that the dispatch ops log at? :)

[16:43] <jnthn> you probably depend on it for the bit you're looking at now, no?

[16:44] <jnthn> 'cus you need to know if it's monomorphic or polymorphic

[16:44] <timotimo> right, it'll otherwise "not dispatched ever" everywhere

[16:45] <jnthn> Anyway, it sounds reasonable enough

[16:45] <timotimo> \o/

[16:45] <jnthn> I'm actually going to have to implement basic multi dispatch stuff to get a good idea of how faily things really are at this rate.

[16:45] <jnthn> 'cus a bunch of the spectests fail over that now

[16:46] <jnthn> Let's see if I've got any more SEGVs though

[16:47] <Geth> ¦ MoarVM/new-disp: 02b9591920 | (Timo Paulssen)++ | src/core/interp.c

[16:47] <Geth> ¦ MoarVM/new-disp: account for opcode length in dispatch log address calc

[16:47] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/02b9591920

[16:48] <Geth> ¦ MoarVM/new-disp: 4cf73c4bc1 | (Jonathan Worthington)++ | 2 files

[16:48] <Geth> ¦ MoarVM/new-disp: Change how chosen dispatch program is put in place

[16:48] <Geth> ¦ MoarVM/new-disp: 

[16:48] <Geth> ¦ MoarVM/new-disp: * Don't need to waste time on it when it's just a value result

[16:48] <Geth> ¦ MoarVM/new-disp: * Do need to have it done ahead of calling a C function, otherwise if we

[16:48] <Geth> ¦ MoarVM/new-disp:   end up doing GC marking as a result of that, chosen_dp would be junk

[16:48] <Geth> ¦ MoarVM/new-disp:   and thus blow up

[16:48] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/4cf73c4bc1

[16:57] <Geth> ¦ MoarVM/new-disp: 2b52b73027 | (Timo Paulssen)++ | src/spesh/disp.c

[16:57] <Geth> ¦ MoarVM/new-disp: fix off-by-one in monomorphic vs polymorphic calc

[16:57] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/2b52b73027

[16:57] <timotimo> another bugfix that was basically free :)

[16:58] <jnthn> Hm, still some GC invariant bustage bug remains

[17:04] <timotimo> looks like the inline cache will want an API that spesh can use to get at the dispatch programs stored inside the PIC at a slot, since checking what kind of struct is used for storage depends on what function pointer is stored as the run_dispatch?

[17:05] <jnthn> Yes

[17:05] <timotimo> should be EZ :)

[17:06] <timotimo> thinking of MVM_INLINE_CACHE_KIND_ + a chunk of the struct name in question

[17:07] <timotimo> but first the api will just return a dp

[17:08] <timotimo> mh, later when flattening becomes part of the spesh codegen, more of the stuff in the structs will be necessary

[17:08] <timotimo> so the api will actually have to return the right kind to cast the struct to

[17:18] <jnthn> Somehow we end up with a frame that has a totally bogus code ref and outer

[17:18] <jnthn> What's really odd is the static code is fine

[17:18] <jnthn> So it was probably fine when it was set up

[17:18] <jnthn> I wonder if this is continuation-y

[17:22] <jnthn> If it is, it ain't obvious

[17:23] <jnthn> Also I suspect 7:30pm on a Friday is not the time to be debugging this :)

[17:24] <nwc10> have you considered giving a keynote instead? :-)

[17:24] <timotimo> where does it blow up? i could give rr another go

[17:24] <timotimo> it'[l be much easier to get a handle on the explosion if i don't have to learn how to handle multi-process recordings

[17:26] <timotimo> we may want to put MVM_PUBLIC in front of some of the new functions we put out

[17:26] <jnthn> t/spec/S17-supply/syntax.t with MVM_SPESH_BLOCKING on and a small nursery (I have 32KB)

[17:27] <jnthn> OK, home time

[17:27] <timotimo> good "travels" :)

[17:27] <jnthn> Yeah, hope I don't get rained on :)

[17:27] <nwc10> I hope that you don't get rained on

[17:28] <nwc10> (snap. there was a massive rain and then hailstorm here)

[17:28] <timotimo> i hope your place of residence cools down soon, if it's anywhere near our local levels of warmth earlier today

[17:45] <nwc10> jnthn: OK, odd, so, problem is that my NQP checkout is on a detached head

[17:46] <nwc10> but I never "loiter" there - I end up either in the MoarVM or the rakudo checkouts

[17:46] <nwc10> and so I didn't raelise

[17:46] <nwc10> I believe that I was missing the last two commits

[17:47] <nwc10> problem no longer exists between keyboard and chair

[17:59] *** zakharyas left
[18:00] *** Altai-man_ joined
[18:03] *** sena_kun left
[18:20] <timotimo> oh, ah, i need not just manipulate_split_version, i should probably use almost a copy of insert_arg_type_guard

[18:20] <timotimo> it also needs the synthetic deopt annotation i imagine

[18:36] <timotimo> oh, interesting, guardjustconc and guardjusttype take sslot even though they don't need one. probably a copy-paste mistake i made long ago

[19:00] <timotimo>       sp_guardconc      r6(7),   r6(5), sslot(1), litui32(4)  # [002] inserted dispatch program guard

[19:03] <timotimo>       sp_dispatch_o     r5(3), lits(raku-rv-decont-6c), callsite(0x7fc574f961c0, 1 arg, 1 pos, nonflattening, interned), sslot(4), litui32(1),   r6(7)

[19:03] <timotimo> ^- there's only a single op implemented yet, and nothing to "undo" when an NYI got encountered, so right now it only rewrites the sp_dispatch_o argument, and the sp_dispatch_o still remains

[19:24] <timotimo> only spent about 30 seconds being confused why i don't see the "set" op i thought i had added to the graph

[19:24] <timotimo> before realizing it was surely tossed out by spesh

[19:39] *** zakharyas joined
[19:57] <timotimo> finally got some codegen beginning to end

[19:58] <timotimo> for programs made up of exactly three different opcodes :)

[19:59] <lizmat> .oO( baby steps )

[20:00] <nwc10> three ops? Decadent. My understanding was that "subtract and branch if less than or equal to zero" alone is Turing complete.

[20:01] <timotimo> absolutely

[20:01] <timotimo> we do torture the implementors on behalf of the users, though

[20:01] <nwc10> but what I did not know was this: https://github.com/jbangert/trapcc

[20:01] <nwc10> "This is a proof by construction that the Intel MMU's fault handling mechanism is Turing complete."

[20:01] *** sena_kun joined
[20:02] <timotimo> whee!

[20:03] *** Altai-man_ left
[20:13] *** MasterDuke joined
[20:16] <MasterDuke> even just mov is turing complete

[20:18] *** patrickb joined
[20:19] <timotimo> "just" mov is perhaps slightly misguided, since mov has such a huge variety of meanings

[20:21] <MasterDuke> true. iirc it was mov-in-the-x86-isa is turing complete, or something like that

[20:28] <timotimo> oh no, all the "Rewritten from a dispatch_* op" comments have disappeared!

[20:28] <timotimo> (because all ops from inside the disp program have been eliminated by the optimization)

[20:28] <timotimo>       sp_bind_o         r5(9), liti16(32),   r7(3)

[20:29] <timotimo>       [Annotation: INS Deopt One (idx 4 -> pc 240; line 1555)]

[20:29] <timotimo>       set               r6(3),   r5(9)

[20:29] <timotimo>       return_o          r6(3)

[20:29] <timotimo> this used to be

[20:30] <timotimo> bindattr_o, then

[20:30] <timotimo>       dispatch_o        r7(4), lits(raku-rv-decont-6c), callsite(0x7fb38caa91c0, 1 arg, 1 pos, nonflattening, interned),   r5(9)

[20:30] <timotimo> then a wval and then

[20:30] *** colomon left
[20:30] <timotimo>       dispatch_o        r6(3), lits(raku-rv-typecheck), callsite(0x2124240, 2 arg, 2 pos, nonflattening, interned),   r7(4),  r5(10)

[20:31] <timotimo> so it actually code-genned and then tossed out two dispatch programs here

[20:31] <MasterDuke> nice, right?

[20:31] <timotimo> the wval was only there to feed the second dispatch program

[20:31] <timotimo> (and of course return_o was also in the before)

[20:33] *** colomon joined
[20:33] *** colomon left
[20:38] <timotimo> just a tiny patch later,

[20:39] <timotimo>       encoderepconf    r12(2),   r2(1),   r8(1),  r10(1),   r7(8),  r11(2)  # [005] Rewritten from a dispatch_o op

[20:39] <timotimo>       return_o         r12(2)

[20:39] <timotimo> comes out of another pair of rv-decont-6c + rv-typecheck

[20:39] <nwc10> you're missing (or not, you can rewind) https://www.youtube.com/watch?v=O-U1lv9SU_w

[20:40] <timotimo> it's running on the side :)

[20:40] <nwc10> I'm playing catchup at 1.5

[20:40] <timotimo> i'll later re-watch the intro i imagine

[20:46] <MasterDuke> i usually watch talks/streams/etc at 1.5x

[20:47] <nwc10> damian was clear that I could watch at 1.75 easily, and 2.0 was bit rushed.

[20:47] <nwc10> was so clear

[20:48] <nwc10> I was surprised

[20:48] <nwc10> but rewind is also awesome.

[21:21] *** zakharyas left
[21:29] <timotimo> aha! looks like the deopt in this translated program is deopting to behind the dispatch op, not in front of it

[21:30] <timotimo> so the set that takes the value and puts it into the register that is to be returned is skipped (because it's part of the dispatch program to be run "in general")

[21:48] <timotimo> i have far too little clue about how to do deopting correct with synthetic stuff, so maybe i'll branch off of jn's branch and ask for his wiseness here

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: c19db6368e | (Timo Paulssen)++ | 2 files

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: API for getting the kind of a DispInlineCacheEntry

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: review: https://github.com/MoarVM/MoarVM/commit/c19db6368e

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: 9ebd381d95 | (Timo Paulssen)++ | 3 files

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: first impl of spesh codegen of disp program

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: 

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: currently the guards deopt to after the dispatch

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: op rather than before, so failing a guard from a

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: return type check (for example Mu from pull-one)

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: will leave you without any value put into the .o

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: register that is to be returned (-> crash)

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: review: https://github.com/MoarVM/MoarVM/commit/9ebd381d95

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: b82d6e327d | (Timo Paulssen)++ | src/spesh/facts.c

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: catch one forgotten op from facts (encoderepconf same as encoderep)

[21:55] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: review: https://github.com/MoarVM/MoarVM/commit/b82d6e327d

[22:01] *** Altai-man_ joined
[22:03] *** sena_kun left
[22:04] <timotimo> i will assume that this means dereference: Deference object attribute at offset 8 in temporary 0

[22:05] <jnthn> That or defenstrate :)

[22:05] <tellable6> 2020-06-26T17:39:29Z #raku <ShimmerFairy> jnthn I couldn't find a problem in the code I tried with Comma months ago, so either the highlighting was a freak error or has since been fixed (or my code changed the problem area since then).

[22:09] <timotimo> anyway, how am i supposed to know if my implementation of the code gen is right if all the ops get deleted immediately after i generate them? :D

[22:10] <jnthn> Write something more morphic :)

[22:10] <timotimo> i'm currently not handling more-than-monomorphic yet :)

[22:20] <timotimo> i put a big fat output in when it sees that and it doesn't trigger in my current example program with nodelay or without

[22:22] *** patrickb left
[22:31] <timotimo> [Inferior 1 (process 5216) exited normally]

[22:31] <timotimo> le gasp

[22:35] <timotimo> segfaults if i remove NODELAY however, which also makes sense

[23:33] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: 4 commits pushed by (Timo Paulssen)++

[23:33] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: f3aab7c55e | use copy_facts when inserting "set" ops

[23:33] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: f6190a46f0 | impl DispOpcodeGuardArgType and GuardArgTypeTypeObject

[23:33] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: af933fc4e6 | correct OpcodeLoadCaptureValue, add debugspam

[23:33] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: 78f3657b87 | impl MVMDispOpcodeSet

[23:33] <Geth> ¦ MoarVM/disp-prog-spesh-codegen: review: https://github.com/MoarVM/MoarVM/compare/b82d6e327de7...78f3657b875c

[23:44] <timotimo> may actually want to put a little env var in to en- or disable the code-gen of dispatch programs

[23:44] <timotimo> since it's a big NYI with no cleanup at the moment :D

