[00:25] *** SmokeMachine left
[00:26] *** SmokeMachine joined
[00:52] *** Kaiepi left
[00:53] *** Kaiepi joined
[01:30] *** rypervenche left
[01:33] *** rypervenche joined
[01:34] *** sena_kun left
[01:49] *** sena_kun joined
[01:54] *** AlexDaniel left
[02:13] *** MasterDuke left
[03:34] *** sena_kun left
[03:34] *** robertle joined
[03:48] *** sena_kun joined
[04:03] *** tobs left
[04:28] *** tobs joined
[05:08] *** Kaiepi left
[05:14] *** squashable6 left
[05:17] *** squashable6 joined
[05:34] *** sena_kun left
[05:47] *** sena_kun joined
[06:19] *** moon-child left
[06:19] *** moon-child joined
[07:33] *** sena_kun left
[07:37] *** domidumont joined
[07:47] *** sena_kun joined
[07:59] <Geth> Â¦ MoarVM: 192f0433c8 | (Daniel Green)++ | 2 files

[07:59] <Geth> Â¦ MoarVM: Make nqp::rand_I respect nqp::srand again

[07:59] <Geth> Â¦ MoarVM:

[07:59] <Geth> Â¦ MoarVM: The upgrade to libtommath v1.2.0 brought along a new version of mp_rand

[07:59] <Geth> Â¦ MoarVM: that uses sources of randomness that aren't seeded with srand. So copy

[07:59] <Geth> Â¦ MoarVM: their mp_rand, but modify to use tinymt64 as the source of randomness.

[07:59] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/192f0433c8

[07:59] <Geth> Â¦ MoarVM: 3c48ebaa95 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files

[07:59] <Geth> Â¦ MoarVM: Merge pull request #1238 from MasterDuke17/make_rand_I_respect_srand_again

[07:59] <Geth> Â¦ MoarVM:

[07:59] <Geth> Â¦ MoarVM: Make nqp::rand_I respect nqp::srand again

[07:59] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3c48ebaa95

[08:09] *** colomon_ left
[08:11] *** colomon_ joined
[08:33] *** zakharyas joined
[08:59] *** MasterDuke joined
[09:05] *** zakharyas left
[09:07] *** domidumont left
[09:07] *** zakharyas joined
[09:24] *** domidumont joined
[09:34] *** sena_kun left
[09:47] *** sena_kun joined
[09:52] *** Kaiepi joined
[09:52] *** Kaiepi left
[09:53] *** Kaiepi joined
[10:23] <jnthn> Hmm, a $dayjob project keeps getting bitten by this segv:

[10:23] <jnthn> Thread 1 "perl6-m" received signal SIGSEGV, Segmentation fault.

[10:23] <jnthn> MVM_spesh_arg_guard_run (tc=tc@entry=0x603d10, ag=0x50088b0, cs=0x7ffff7d06660 <inv_arg_callsite>,  args=0x1d0d070, certain=certain@entry=0x0) at src/spesh/arg_guard.c:411

[10:23] <jnthn> 411	                current_node = IS_CONCRETE(test) && test->st == agn->st

[10:24] <jnthn> (gdb) p test

[10:24] <jnthn> $1 = (MVMObject *) 0x0

[10:24] <jnthn> Wonder where that real NULL sneaks in...

[10:25] <jnthn> We're not in specialized code when it happens

[10:27] <nine> But the NULL could be generated in specialized code?

[10:27] <jnthn> Potentially, yes

[10:28] <jnthn> We're trying to consider an OSR point at the time it blows up

[10:30] *** patrickb joined
[10:30] <jnthn> That looks at the caller's args buffer

[10:31] <jnthn> And deopt wouldn't re-instate that

[10:31] <jnthn> So I wonder if that's what happens...

[10:31] * jnthn turns on deopt logging, though suspects the timing changes may hide the not-always-happening bug...

[10:34] <jnthn> aha, yes

[10:34] <jnthn> In the preceding deopt:

[10:34] <jnthn>     Recreated frame 'pull-one' (cuid '1961')

[10:34] <jnthn> And that's exactly where we are now:

[10:34] <jnthn> (gdb) p MVM_string_utf8_encode_C_string(tc, tc->cur_frame->static_info->body.cuuid)

[10:34] <jnthn> $7 = 0x99a9e90 "1961"

[10:37] * jnthn ponders the best thing to do about this :)

[10:43] <nwc10> early lunch?

[10:50] <jnthn> ah, it seems actually cur_args_callsite is "junk"

[10:50] <jnthn> Not int the dangly pointer sense

[10:50] <jnthn> But in so far as an inline doesn't set it

[10:51] <jnthn> So when we uninline, it could be about whatever non-inlined call the code last did before an OSR, for example

[10:51] <jnthn> Oh, or just whatever non-inlined call normal spesh'd code did

[10:51] <jnthn> Just clearing it in deopt seems to fix things nicely

[10:52] * jnthn spectests the patch

[10:52] <jnthn> $dayjob program flaky test files seem happy now

[11:07] <Geth> Â¦ MoarVM: 4d7c7e1425 | (Jonathan Worthington)++ | src/spesh/deopt.c

[11:07] <Geth> Â¦ MoarVM: Clear callsite of bottom frame when uninlining

[11:07] <Geth> Â¦ MoarVM:

[11:07] <Geth> Â¦ MoarVM: It may carry a current callsite, but this will not be about the code

[11:07] <Geth> Â¦ MoarVM: that was inlined, but rather about some previous non-inlined callee. It

[11:07] <Geth> Â¦ MoarVM: can cause confusion if we later try to look at it in order to do OSR in

[11:07] <Geth> Â¦ MoarVM: an uninlined frame (this doesn't make us able to do it, it just means we

[11:07] <Geth> Â¦ MoarVM: won't do it bogusly or segfault trying, which is what led to this

[11:07] <Geth> Â¦ MoarVM: problem being uncovered).

[11:07] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4d7c7e1425

[11:21] <lizmat> jnthn: is a bump in place, or are you planning more Moar goodies today?

[11:21] <jnthn> Maybe more

[11:22] <jnthn> Not sure it needs a special bump tbh

[11:22] <lizmat> ok, I'll hold

[11:22] <jnthn> I've found precisely one application that tripped it

[11:23] <lizmat> well, in the past days I've had some flappers in 'make spectest'

[11:23] <lizmat> so all is not well, I'd say  :-)

[11:24] <jnthn> At least one of them might have been to do with the (already fixed) s/// thing

[11:25] <lizmat> possibly, yes...  :-)

[11:25] <nine> The rakudo bug I fixed today may have caused issues with concurrently running tests as well

[11:26] <nine> Compilation errors to be precise, i.e. those odd test failures where apprently we didn't even run tests

[11:26] <lizmat> aah!   ok

[11:33] *** sena_kun left
[11:37] *** squashable6 left
[11:38] <Geth> Â¦ MoarVM/derived-specializations: 4 commits pushed by (Jonathan Worthington)++

[11:38] <Geth> Â¦ MoarVM/derived-specializations: e539aa046a | Prepare arg guards for derived specializations

[11:38] <Geth> Â¦ MoarVM/derived-specializations: 3f7d47a24c | Tweak spesh arg guard dumping API

[11:38] <Geth> Â¦ MoarVM/derived-specializations: 4dc2d409d9 | Give spesh dumper handling of derived plan entries

[11:38] <Geth> Â¦ MoarVM/derived-specializations: 22f9ec3639 | Dump "yes" branch of certain result arg guard node

[11:38] <Geth> Â¦ MoarVM/derived-specializations: review: https://github.com/MoarVM/MoarVM/compare/a6d3001daf52...22f9ec36393f

[11:39] <jnthn> Just a rebase

[11:39] *** squashable6 joined
[11:47] *** sena_kun joined
[12:04] *** Kaiepi left
[12:07] *** Kaiepi joined
[12:34] *** lucasb joined
[12:44] *** zakharyas left
[13:04] *** patrickb left
[13:14] *** patrickb joined
[13:33] *** sena_kun left
[13:35] *** tadzik joined
[13:48] *** sena_kun joined
[14:07] *** brrt joined
[14:17] <jnthn> You know, I'm really tempted to try and stop being clever and incrementally add to the guard guard tree, and just rebuild the whole thing every time

[14:17] <jnthn> *arg guard tree

[14:17] <jnthn> We have to copy it anyway 'cus it's immutable for thread safety reasons

[14:17] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 5 commits pushed by (Bart Wiegmans)++

[14:17] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 1896c6c30e | [JIT] Get type object for type-variant opcodes

[14:17] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 6f1eb02f34 | [JIT] Add devirtualization method for REPRs

[14:17] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 636f553bee | [JIT] Make template destructive flag redundant

[14:17] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 012385f46b | [JIT] Remove template destructive flag

[14:17] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 6fbcac87f0 | [JIT] Bugfix - CALLN yields a value

[14:17] <Geth> Â¦ MoarVM/expr-jit-devirtualize: review: https://github.com/MoarVM/MoarVM/compare/ce518ad3d36f...6fbcac87f0fa

[14:18] <brrt> do we add incrementally to the guard tree now?

[14:18] *** zakharyas joined
[14:18] <jnthn> Yes

[14:18] <brrt> hmmm

[14:18] <jnthn> And the code doing so is...uh..."clever"

[14:18] <brrt> yeah, why not drop it and rebuild

[14:18] <brrt> probably a minor inefficiency anyway

[14:18] <jnthn> And I think trying to do it with derived specializations too may be a case of "too clever for me to trust it's right"

[14:19] <brrt> I'm fairly sure it can be done... but do you want to debug it :-P

[14:19] <jnthn> Well, that's what I'm about to have to do, and... :)

[14:20] <Geth> Â¦ MoarVM/derived-specializations: 72c1d55f48 | (Jonathan Worthington)++ | 3 files

[14:20] <Geth> Â¦ MoarVM/derived-specializations: More information in dupe arg guard add error

[14:20] <Geth> Â¦ MoarVM/derived-specializations: review: https://github.com/MoarVM/MoarVM/commit/72c1d55f48

[14:21] <Geth> Â¦ MoarVM: 657b536cf6 | (Elizabeth Mattijsen)++ | 3rdparty/dyncall

[14:21] <Geth> Â¦ MoarVM: Update dyncall submodule

[14:21] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/657b536cf6

[14:24] <jnthn> btw, in an example where I make an array and push 5 different types to it, the time reduction is from 2.87s to 1.45s

[14:24] <jnthn> Which is quite nice

[14:25] <jnthn> So it's worth trying to get this to properly work

[14:26] <jnthn> But yeah, I think I want a new arg guard tree building approach

[14:26] <jnthn> Trouble is, I don't know if we keep the info around to rebuild it

[14:26] <jnthn> In fact, I'm pretty sure we don't

[14:26] <jnthn> So step one is probably doing that

[14:28] <jnthn> Yeah, I guess the candidate needs to carry the type tuple

[14:32] *** zakharyas left
[14:33] *** zakharyas joined
[14:36] <lizmat> MoarVM bumped, was make test and make stresstest clean

[14:42] <jnthn> Uff, yes, just working out the algorithm to get the tree built right when we *do* have all of the information is difficult enough that I'm convinced incremental tweaking and handling all possible orderings we might choose to make specializations in is pretty nuts :)

[14:46] *** MasterDuke left
[14:49] *** brrt left
[15:02] * jnthn finally has a sketch of an algorithm that may just build the right tree

[15:03] <jnthn> Not enough time left at $dayjob today to implement it, alas.

[15:10] <Guest4508> jnthn: have you stopped cherry picking rakudo bugs now?

[15:10] <jnthn> Guest4508: Yeah, I feel "warmed up" enough to pick up one of my MoarVM branches again :)

[15:11] <Guest4508> very cool

[15:11] <jnthn> Working up to continuing with the PEA

[15:12] <jnthn> Perhaps with p6o-setup inbetween, since PEA depends on that

[15:12] <sena_kun> .oO ( p6o-setup? )

[15:13] <Guest4508> moar speed is always welcome :)

[15:13] <jnthn> sena_kun: An alternative approach to object initialization that gets rid of a lot of the auto-viv, which in turn can lead to cheaper JIT output and more success for the EA

[15:13] <jnthn> That said, while I'm doing the arg guards, it'll be somewhat tempting to try and JIT the guard tree also

[15:13] <jnthn> Because evaluating those can be somewhat hot in profiles

[15:33] *** sena_kun left
[15:35] *** brrt joined
[15:47] *** sena_kun joined
[16:25] *** brrt left
[16:36] *** domidumont left
[16:42] *** patrickb left
[17:34] *** sena_kun left
[17:37] <lizmat> datapoint: the dyncall update did not fix the Lock::Async: MoarVM panic: Corrupt multi dispatch cache: cur_node != 0, re-check == 0x0  issue

[17:38] <lizmat> *not*

[17:48] *** sena_kun joined
[17:50] *** dogbert11 left
[18:44] *** zakharyas left
[19:32] *** sena_kun left
[19:48] *** sena_kun joined
[20:05] <jnthn> lizmat: I don't think it was every going to; it's the MacOS build thing that it might have helped.

[20:07] <nwc10> jnthn: ASAN considers derived-specializtions to be very boring and unworthy of comment

[20:09] <jnthn> So far... ;)

[20:19] *** MasterDuke joined
[20:20] <nwc10> jnthn: yes, but, but, "may you live in interesting times" is not something to aspire to.

[20:22] *** zakharyas joined
[20:27] <japhb> ... and yet somehow the plot of all the most interesting movies.

[20:43] *** dogbert17 joined
[21:04] *** brrt joined
[21:12] *** zakharyas left
[21:32] *** sena_kun left
[21:38] <jnthn> nwc10: tbh, the interesting times that ASAN can find are generally less "interesting" than those it cannot...

[21:47] *** sena_kun joined
[22:44] *** brrt left
[23:34] *** sena_kun left
[23:48] *** sena_kun joined
