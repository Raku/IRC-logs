[00:07] *** MuRmAn_27 joined
[00:26] *** discoD left
[00:30] *** MuRmAn_27 left
[00:50] *** sena_kun joined
[00:52] *** Altai-man_ left
[01:12] *** Kaeipi left
[01:12] *** Kaeipi joined
[01:19] *** Altai-man_ joined
[01:21] *** sena_kun left
[01:27] *** farcas1982regreg left
[02:49] *** Kaiepi joined
[02:49] *** Kaeipi left
[03:04] *** Kaiepi left
[03:11] *** Kaiepi joined
[03:20] *** sena_kun joined
[03:21] *** Altai-man_ left
[03:56] *** Util joined
[04:30] *** farcas1982regreg joined
[05:19] *** Altai-man_ joined
[05:22] *** sena_kun left
[06:25] *** Kaiepi left
[06:26] *** Kaiepi joined
[06:27] <nwc10> good *, #moarvm 

[07:16] <jnthn> o/

[07:20] *** sena_kun joined
[07:21] *** Altai-man_ left
[07:28] <nwc10> jnthn: so round here, procurement is having a bit of a 'mare. Beer is no problem, but it seems that SodaStream refil cylinders can't be obtained for love nor money.

[07:31] <moritz> have you tried pure hatred instead of love or money? :D

[07:32] <jnthn> Ooh, that's a curious thing to have a shortage of

[07:38] <jnthn> Hm, it's hard to drink coffee while wearing a mask...

[07:39] <jnthn> (Got workers here doing some kitchen stuff)

[07:39] <nine> straw?

[07:42] <jnthn> Don't have one of those around. I think "go to another room once this test case passes" will be the chosen option :)

[08:18] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/master/src/strings/normalize.c#L81-L84 should really be also setting `body.ssize` to `result_pos * sizeof(MVMCodepoint)`, correct?

[08:29] *** zakharyas joined
[08:49] <MasterDuke> timotimo: hm. https://github.com/MoarVM/MoarVM/pull/689/commits/67691da4f38eb1e8694182f0f448a0d2f76b3cfe is now giving these errors https://gist.github.com/MasterDuke17/77ce7dc65247f748e128789dbc358661

[08:49] <MasterDuke> makes me think some values are off, but i haven't figured out which ones yet

[09:19] *** Altai-man_ joined
[09:21] *** sena_kun left
[11:16] *** MasterDuke left
[11:20] *** sena_kun joined
[11:21] *** Altai-man_ left
[12:10] *** Voldenet joined
[12:10] *** Voldenet left
[12:10] *** Voldenet joined
[12:15] *** patrickb joined
[12:35] *** MasterDuke joined
[13:06] <dogbert17> It seems as if the reduced number of 'Scalar replacements', according to the profiler, in [Tux] canary test are caused by https://github.com/rakudo/rakudo/commit/ae4ba74262b1155ddf57cd2bac1f3aaccfc1e47f 

[13:07] <dogbert17> Does that make any sense or is the profiler, after this commit, not reporting the number of scalar replacements properly?

[13:19] *** Altai-man_ joined
[13:22] *** sena_kun left
[13:23] *** Kaiepi left
[13:39] *** Kaiepi joined
[13:58] <MasterDuke> timotimo: whoops, https://github.com/MoarVM/MoarVM/pull/689/commits/67691da4f38eb1e8694182f0f448a0d2f76b3cfe#diff-60b7c4ce4f16e0e46451e0610dbc21b3R92

[13:58] <MasterDuke> doh, still get the same error after fixing that

[14:04] <timotimo> "We went looking everywhere, but couldnâ€™t find those commits."

[14:19] *** zakharyas left
[14:23] *** zakharyas joined
[14:29] <MasterDuke> i force pushed over. but i had `((MVMArray *)out)->body.ssize     = result_pos * result_pos * sizeof(MVMCodepoint);` instead of `((MVMArray *)out)->body.ssize     = result_pos * sizeof(MVMCodepoint);`

[14:30] <timotimo> haha, oops

[14:31] <MasterDuke> guess i accidentally hit 'p' twice

[14:32] <timotimo> prolly, yeah

[14:32] <timotimo> that's why we really need proper physical units in C

[14:32] <timotimo> the one-dimensional buffer can't be of bÂ²!

[14:33] <timotimo> though in this case, sizeof would return a b and result_pos would be what? probably unitless?

[15:03] <nine> With proper physical units, you would never do result_pos * sizeof(MVMCodepoint) because MVMCodepoint would be the unit of result_pos and they would be inseparably joined in the first place.

[15:03] <nine> Or it's as you said that sizeof(MVMCodepoint) is a number of bytes and result_pos is just a scalar... Then they would indeed not have helped

[15:08] <nine> I think I'm gonna remove all MVMROOTs of MVMCompUnits. There seems to be only one place ever allocating them and it does so in gen2 directly. It's not even possible to clone them.

[15:09] <nine> In exchange, I'm gonna add MVMROOTs to all places handling MVMStaticFrames, because if they come from freshcoderef they may actually still be in the nursery.

[15:11] <jnthn> Sounds reaonable.

[15:11] <nine> Oh, another one of these devious GC violations: MVM_ASSIGN_REF(tc, &(static_frame->common.header), static_frame_body->spesh, MVM_repr_alloc_init(tc, tc->instance->StaticFrameSpesh));

[15:12] <nine> Well, it would be if not for the MVM_gc_allocate_gen2_default_set(tc);

[15:12] <nine> I wonder if there's a good way to mark such false positives

[15:13] <jnthn> I think that was the one where putting it directly into gen2 saved a good number of inter-gen refs

[15:13] <jnthn> (Like, enough there was a measurable win)

[15:20] *** sena_kun joined
[15:21] *** Altai-man_ left
[15:40] <nine> Surprisingly even a static_frame's body.static_code is vulnerable, due to.....freshcoderef

[15:41] <nine> Which means that there's even a but in MVM_frame_invoke: https://github.com/MoarVM/MoarVM/blob/master/src/core/frame.c#L474

[16:17] *** Kaiepi left
[16:18] *** Kaiepi joined
[16:20] *** farcas1982regreg left
[16:36] *** patrickb left
[16:40] <MasterDuke> is this correct? https://github.com/MoarVM/MoarVM/pull/689/files#diff-108ec2b9bd599f70a4c50ef614e0f3a2R111

[16:41] <MasterDuke> or should it be just ssize (i.e., not ssize * repr_data->elem_size)?

[17:15] *** zakharyas left
[17:17] <nine> I'd guess it's correct

[17:19] *** Altai-man_ joined
[17:21] *** sena_kun left
[17:34] *** MasterDuke left
[17:35] *** patrickb joined
[17:53] <nine> It is kinda ironic that I'm on this branch containing 10 fixes to GC issues and now my rakudo build fails with "MoarVM panic: Internal error: invalid thread ID 28351 in GC work pass"

[17:53] <nine> Which is exactly what our Windows builds stumble over

[17:54] <nine> It's even reproducible

[17:55] <[Coke]> I mean, that might be good news that you'd be able to fix it without having a windows box.

[18:09] <nine> Nah, I just forgot a MVM_gc_root_temp_pop before a return

[18:19] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 6 commits pushed by (Stefan Seifert)++

[18:19] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 845e8a3f1b | Fix possible access to fromspace in MVM_frame_vivify_lexical

[18:19] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: a5e1fdd99c | Fix possible access to fromspace in MVM_frame_invoke

[18:19] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 651dc59de5 | Fix possible access to fromspace in MVM_frame_debugserver_move_to_heap

[18:19] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 8a7e56d9c8 | Fix possible access to fromspace in MVM_frame_find_lexical_by_name_outer

[18:19] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 51ab0cb2fa | Fix possible access to fromspace in MVM_frame_lexical_lookup_using_frame_walker

[18:19] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: c48e40b5b7 | Fix possible access to fromspace in MVM_frame_find_dynamic_using_frame_walker

[18:19] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: review: https://github.com/MoarVM/MoarVM/compare/a95e5ac329d2...c48e40b5b730

[18:29] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 62dc6c7f7b | (Stefan Seifert)++ | src/core/frame.c

[18:29] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: Fix possible access to fromspace in MVM_frame_binddynlex

[18:29] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 

[18:29] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: MVM_frame_find_contextual_by_name may cache the result which in turn may trigger

[18:29] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: an allocation of an MVMFrameExtra. Thus we need to root the name and value

[18:29] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: pointers in case they get moved by the GC.

[18:29] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: review: https://github.com/MoarVM/MoarVM/commit/62dc6c7f7b

[18:30] <nine> With that frame.c looks clean

[18:50] <nine> There are so many traps that are so easy to fall into. Both for missing an MVMROOT and for adding one when it actually isn't necessary. Like https://github.com/MoarVM/MoarVM/blob/master/src/core/threads.c#L126

[18:51] <nine> Ordinarily MVM_gc_mark_thread_blocked can enter the GC. But this is the one case when it will definitely not, because child_tc is not yet in the instance's thread list

[18:51] <[Coke]> nine; are you catching unnecessary ones or missing ones right now?

[18:52] <nine> Both. I'm fixing the missing ones and adding comments to the places where I identified false positives.

[18:55] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: a39b63c99b | (Stefan Seifert)++ | src/core/hll.c

[18:55] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: Fix possible access to fromspace in MVM_hll_set_config

[18:55] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 

[18:55] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: MVM_intcache_for may allocate, so better do it while config_hash is still

[18:55] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: MVMROOTed.

[18:55] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: review: https://github.com/MoarVM/MoarVM/commit/a39b63c99b

[19:04] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 9b011b0332 | (Stefan Seifert)++ | src/core/nativecall_dyncall.c

[19:04] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: Fix possible access to fromspace in MVM_nativecall_invoke

[19:04] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 

[19:04] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: If we're calling a C++ constructor the result CPPStruct is allocated during

[19:04] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: processing of the arguments. Thus it may be moved by a GC run triggered by

[19:04] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: MVM_gc_mark_thread_blocked or MVM_gc_mark_thread_unblocked and needs rooting.

[19:04] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: review: https://github.com/MoarVM/MoarVM/commit/9b011b0332

[19:07] *** MasterDuke joined
[19:20] *** sena_kun joined
[19:22] *** Altai-man_ left
[19:24] *** lucasb joined
[19:27] *** vesper left
[19:27] *** vesper11 joined
[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 6038316725 | (Stefan Seifert)++ | src/debug/debugserver.c

[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: Fix possible access to fromspace in MVM_debugserver_notify_unhandled_exception

[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 

[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: request_all_threads_suspend can trigger a GC run via MVM_gc_mark_thread_blocked,

[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: so we need to root the ex pointer.

[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: review: https://github.com/MoarVM/MoarVM/commit/6038316725

[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: fd27422864 | (Stefan Seifert)++ | src/debug/debugserver.c

[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: Fix possible access to fromspace in request_all_threads_resume

[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 

[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: request_thread_resumes may trigger a GC run via MVM_gc_mark_thread_blocked,

[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: so we need to ensure the cur_thread pointer gets updated.

[19:34] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: review: https://github.com/MoarVM/MoarVM/commit/fd27422864

[19:52] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 833339332c | (Stefan Seifert)++ | 4 files

[19:52] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: Fix possible access to fromspace in various async I/O functions

[19:52] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 

[19:52] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: This error got copy&pasted 7 times. A local type casted variable was used but

[19:52] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: not rooted. Since MVM_repr_box_str will allocate and therefore may trigger a GC

[19:52] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: run, the local variable could have become outdated.

[19:52] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: review: https://github.com/MoarVM/MoarVM/commit/833339332c

[20:10] <nine> Could we ever find ourselves with an STable in the nursery that has a not yet deserialized HOW?

[20:11] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: f9ca5cb053 | (Stefan Seifert)++ | src/6model/reprs/Decoder.c

[20:11] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: Fix possible access to fromspace in MVM_decoder_take_bytes

[20:11] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 

[20:11] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: Allocating the result buffer may trigger a GC run during which the decoder

[20:11] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: pointer may become outdated. Move the allocation to after we're done with the

[20:11] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: decoder, as we don't need the result buffer until then anyway.

[20:11] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: review: https://github.com/MoarVM/MoarVM/commit/f9ca5cb053

[20:13] <nine> And could we ever find ourselves with an STable in the nursery that has a not-yet-deserialized method_cache? That seems more unlikely. But if not, why do we MVMROOT st in MVM_serialization_finish_deserialize_method_cache?

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: f3cdc75751 | (Stefan Seifert)++ | src/6model/serialization.c

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: Fix possible access to fromspace in throw_closure_serialization_error

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: We're actually entering the GC unconditionally, so if closure points to the

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: nursery it will get outdated.

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: review: https://github.com/MoarVM/MoarVM/commit/f3cdc75751

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 863e4104f2 | (Stefan Seifert)++ | src/moar.c

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: Fix possible acces to fromspace in MVM_vm_event_subscription_configure

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: 

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: The startup_time string will be accessed after we allocate the number holding

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: the time

[20:27] <Geth> Â¦ MoarVM/gcc_root_checker_plugin: review: https://github.com/MoarVM/MoarVM/commit/863e4104f2

[21:18] *** patrickb left
[21:19] *** Altai-man_ joined
[21:22] *** sena_kun left
[23:20] *** sena_kun joined
[23:21] *** Altai-man_ left
