[00:07] *** patrickz joined
[00:11] *** patrickb left
[00:42] *** sena_kun left
[00:43] *** lucasb left
[00:44] *** patrickz left
[00:57] *** sena_kun joined
[02:01] *** unicodable6 left
[02:01] *** sourceable6 left
[02:01] *** statisfiable6 left
[02:01] *** reportable6 left
[02:01] *** coverable6 left
[02:01] *** notable6 left
[02:01] *** quotable6 left
[02:01] *** bloatable6 left
[02:01] *** benchable6 left
[02:01] *** releasable6 left
[02:01] *** greppable6 left
[02:01] *** squashable6 left
[02:01] *** nativecallable6 left
[02:01] *** bisectable6 left
[02:01] *** shareable6 left
[02:01] *** committable6 left
[02:02] *** reportable6 joined
[02:02] *** bisectable6 joined
[02:02] *** sourceable6 joined
[02:02] *** coverable6 joined
[02:02] *** shareable6 joined
[02:02] *** nativecallable6 joined
[02:03] *** squashable6 joined
[02:03] *** committable6 joined
[02:03] *** notable6 joined
[02:04] *** benchable6 joined
[02:04] *** greppable6 joined
[02:04] *** statisfiable6 joined
[02:04] *** bloatable6 joined
[02:04] *** unicodable6 joined
[02:04] *** quotable6 joined
[02:04] *** releasable6 joined
[02:42] *** sena_kun left
[02:57] *** sena_kun joined
[03:57] *** evalable6 left
[03:57] *** evalable6 joined
[04:42] *** sena_kun left
[04:55] *** sena_kun joined
[05:55] *** sourceable6 left
[05:55] *** coverable6 left
[05:55] *** nativecallable6 left
[05:55] *** quotable6 left
[05:55] *** squashable6 left
[05:55] *** notable6 left
[05:55] *** bloatable6 left
[05:55] *** committable6 left
[05:55] *** releasable6 left
[05:55] *** reportable6 left
[05:55] *** benchable6 left
[05:55] *** shareable6 left
[05:55] *** greppable6 left
[05:55] *** statisfiable6 left
[05:55] *** unicodable6 left
[05:56] *** bisectable6 left
[05:56] *** nativecallable6 joined
[05:56] *** squashable6 joined
[05:56] *** sourceable6 joined
[05:57] *** greppable6 joined
[05:57] *** bisectable6 joined
[05:57] *** notable6 joined
[05:57] *** benchable6 joined
[05:57] *** reportable6 joined
[05:57] *** shareable6 joined
[05:57] *** bloatable6 joined
[05:57] *** statisfiable6 joined
[05:58] *** coverable6 joined
[05:58] *** releasable6 joined
[05:58] *** committable6 joined
[05:59] *** quotable6 joined
[05:59] *** unicodable6 joined
[06:30] *** jeffythedragonsl joined
[06:30] <jeffythedragonsl> hello!

[06:31] <nwc10> Hello

[06:41] *** sena_kun left
[06:51] <jeffythedragonsl> can someone recommend an easy open issue?

[06:53] <nwc10> sorry I can't, as I've not been actively working on MoarVM. Hopefully someone else can, although I suspect most folks are asleep currently.

[06:54] <jeffythedragonsl> haha true

[06:57] *** sena_kun joined
[07:21] *** jeffythedragonsl left
[08:42] *** sena_kun left
[08:56] *** sena_kun joined
[10:41] *** sena_kun left
[10:57] *** sena_kun joined
[12:15] *** camelia left
[12:42] *** sena_kun left
[12:48] *** camelia joined
[12:57] *** sena_kun joined
[13:14] <lizmat> nine: would a Moar bump be ok ?

[13:15] <nine> sure

[13:18] <lizmat> oki

[13:29] *** lucasb joined
[14:13] *** brrt joined
[14:14] <brrt> \o

[14:14] <nwc10> o/

[14:16] <brrt> happy new year #moarvm

[14:42] *** sena_kun left
[14:56] *** sena_kun joined
[15:01] *** brrt left
[16:35] <jnthn> Happy New Year :)

[16:43] *** sena_kun left
[16:57] *** sena_kun joined
[17:00] *** brrt joined
[17:52] *** Altai-man_ joined
[17:52] *** sena_kun left
[18:09] *** brrt left
[18:11] *** domidumont joined
[18:16] *** patrickb joined
[18:21] <nine> jnthn: what optimizer talk did you mean with this comment? https://github.com/rakudo/rakudo/blob/master/src/core.c/Rakudo/Supply.pm6#L452

[18:39] *** domidumont1 joined
[18:40] *** domidumont left
[18:52] <nine> The Supply stuff is a really confusing maze of exceptions and handlers

[18:52] <nine> What's making this harder is that I have no idea when getting or returning an actual NULL in a register is OK and when it is not

[19:10] <nine> Well I guess the answer is "rarely"

[19:38] *** timo joined
[19:38] *** timo is now known as timotimo

[19:52] *** sena_kun joined
[19:53] *** Altai-man_ left
[20:04] *** domidumont1 left
[20:45] *** patrickz joined
[20:46] *** patrickb left
[21:17] *** MasterDuke joined
[21:19] <nine> OMG the solution is so simple!

[21:20] <nine> The JITed version of takehandlerresult simply doesn't match the interpreted one wrt NULL handling

[21:21] <nine> Which...is not that surprising. The code matches 100 % the version introduced in the commit "WIP on Handler support."

[21:21] <MasterDuke> nine++ is on a roll recently

[21:38] <moritz> don't we have some kind JIT validation mode that runs both versions, and throws an exception when they disagree?

[21:39] <nine> moritz: that would be seriously hard to implement

[21:40] <moritz> :-(

[21:46] <Geth> Â¦ MoarVM: e35bd5f0ea | (Stefan Seifert)++ | src/jit/x64/emit.dasc

[21:46] <Geth> Â¦ MoarVM: Fix segfaults caused by JITed takehandlerresult returning NULL

[21:46] <Geth> Â¦ MoarVM:

[21:46] <Geth> Â¦ MoarVM: The interpreter implementation of takehandlerresult returns VMNull if

[21:46] <Geth> Â¦ MoarVM: last_handler_result is NULL. The JITed version didn't and instead put the NULL

[21:46] <Geth> Â¦ MoarVM: into the result register, which caused segfaults later on.

[21:46] <Geth> Â¦ MoarVM: Fix by having the JITed implementation match the interpreter's.

[21:46] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e35bd5f0ea

[21:47] <nine> The sad part is that despite being able to fix this, I do not have the slightest idea how to write a test for this issue

[21:48] <nine> I'm really surprised, this didn't show up much more often

[21:51] *** Altai-man_ joined
[21:53] *** sena_kun left
[22:23] *** MasterDuke left
[22:39] <japhb> nine: I can remember a lot of bugs over the years that have been of the "I can't believe this didn't explode *all the time*" variety.

[22:40] <japhb> It's kindof amazing how "mostly working" does in fact mostly work.

[22:43] <nine> japhb: yeah, I've fixed a few of those my self. Still amazes me every time

[22:57] *** lucasb left
[23:48] <jnthn> nine: I think probably it's because handlers in nqp::handle imply a block being generated, and lexical to local lowering fails to grok that and so thinks it can lower away...probably one or both of $state and &code

[23:52] *** sena_kun joined
[23:54] *** Altai-man_ left
