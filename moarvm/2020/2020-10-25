[00:26] *** Kaiepi left
[00:30] *** Kaiepi joined
[00:30] *** patrickb left
[01:44] *** linkable6 left
[01:44] *** sourceable6 left
[01:44] *** shareable6 left
[01:44] *** evalable6 left
[01:44] *** coverable6 left
[01:44] *** squashable6 left
[01:44] *** committable6 left
[01:44] *** releasable6 left
[01:44] *** notable6 left
[01:44] *** statisfiable6 left
[01:44] *** nativecallable6 left
[01:44] *** bloatable6 left
[01:44] *** unicodable6 left
[01:44] *** greppable6 left
[01:44] *** quotable6 left
[01:44] *** bisectable6 left
[01:44] *** tellable6 left
[01:44] *** benchable6 left
[01:45] *** unicodable6 joined
[01:45] *** evalable6 joined
[01:45] *** releasable6 joined
[01:45] *** committable6 joined
[01:45] *** bloatable6 joined
[01:45] *** coverable6 joined
[01:46] *** nativecallable6 joined
[01:46] *** squashable6 joined
[01:46] *** notable6 joined
[01:46] *** linkable6 joined
[01:46] *** greppable6 joined
[01:46] *** benchable6 joined
[01:47] *** sourceable6 joined
[01:47] *** quotable6 joined
[01:47] *** statisfiable6 joined
[01:47] *** bisectable6 joined
[01:47] *** shareable6 joined
[01:48] *** tellable6 joined
[05:53] *** evalable6 left
[05:53] *** linkable6 left
[05:55] *** linkable6 joined
[05:56] *** evalable6 joined
[06:32] *** harrow left
[06:44] *** sena_kun joined
[06:44] *** harrow joined
[08:08] *** Kaiepi left
[09:21] *** Altai-man joined
[09:23] *** sena_kun left
[09:40] <Geth> ¦ MoarVM/MVM_malloc_etc: 54a5091119 | (Nicholas Clark)++ | 4 files

[09:40] <Geth> ¦ MoarVM/MVM_malloc_etc: Use MVM_{malloc,realloc,calloc,free} consistency.

[09:40] <Geth> ¦ MoarVM/MVM_malloc_etc: 

[09:40] <Geth> ¦ MoarVM/MVM_malloc_etc: All these calls changed to the MVM_* wrappers are on memory blocks where the

[09:40] <Geth> ¦ MoarVM/MVM_malloc_etc: other calls are MVM_* wrappers.

[09:40] <Geth> ¦ MoarVM/MVM_malloc_etc: 

[09:40] <Geth> ¦ MoarVM/MVM_malloc_etc: There are still a few "bare" `malloc`s/`free`s, but these seem to be

[09:40] <Geth> ¦ MoarVM/MVM_malloc_etc: self-contained, or related to memory allocated by `strdup`/`strndup`, which

[09:40] <Geth> ¦ MoarVM/MVM_malloc_etc: is using the platform `malloc` internally.

[09:40] <Geth> ¦ MoarVM/MVM_malloc_etc: review: https://github.com/MoarVM/MoarVM/commit/54a5091119

[09:44] <Geth> ¦ MoarVM: 88722e8ecc | (Ben Davies)++ | src/core/alloc.h

[09:44] <Geth> ¦ MoarVM: Fix zeroing of reallocated memory in MVM_recalloc

[09:44] <Geth> ¦ MoarVM: 

[09:44] <Geth> ¦ MoarVM: This function assumes that the new size of memory to be reallocated is

[09:44] <Geth> ¦ MoarVM: greater than or equal to its old size. Should it be lesser instead, this

[09:44] <Geth> ¦ MoarVM: will attempt to zero memory that is out of bounds, leading to a

[09:44] <Geth> ¦ MoarVM: segfault.  Only attempt to zero reallocated memory if its size has

[09:44] <Geth> ¦ MoarVM: grown.

[09:44] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/88722e8ecc

[09:44] <Geth> ¦ MoarVM: 5c791a4810 | nwc10++ (committed using GitHub Web editor) | src/core/alloc.h

[09:44] <Geth> ¦ MoarVM: Merge pull request #1366 from Kaiepi/mvm-recalloc-zeroing

[09:44] <Geth> ¦ MoarVM: 

[09:44] <Geth> ¦ MoarVM: Fix zeroing of reallocated memory in MVM_recalloc

[09:44] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5c791a4810

[09:46] <nwc10> if I got the instructions correct, "dangerous but awesome" waits until Monday. Whereas that one is more "awesome was dangerous"

[09:46] <Geth> ¦ MoarVM: nwc10++ created pull request #1368: Use MVM_{malloc,realloc,calloc,free} consistency.

[09:46] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1368

[09:54] <Altai-man> Release packages are built, so it's probably safe to release the PRs.

[11:12] <nwc10> Oh Belgium! (Clearly I need peril sensitive sunglasses)

[11:13] <nwc10> either I am massively misunderstanding some nuance of the specs

[11:13] <nwc10> or *they lie*

[11:13] <nwc10> Oracle's own compiler on Solaris is generting assembly consistent with gcc on sparc linux

[11:13] <nwc10> but not Oracle's documented spec

[11:14] <nwc10> and, hah! libffi works fine on sparc64 linux for the test in question

[11:16] <nwc10> the SIGBUG is "Anything you still can’t cope with is therefore your own problem"

[11:47] <nwc10> OK, this is looking like a subtle bug in nativecall

[11:47] <nwc10> I see that there exists

[11:47] <nwc10>        void dcArgShort (DCCallVM* vm, DCshort value);

[11:48] <nwc10> but no corresponding dcArgUshort

[11:48] <nwc10> and on sparc64 the ABI behaviour is different for unsigned and signed shorts

[11:48] <nwc10> (and chars)

[11:48] <nwc10> (and ints don't behave like the documented spec)

[11:49] <nwc10> and you only notice this if your code is sufficiently "simple" (or unlucky) enough to care about the exact bit representation that comes in, in the register used as part of the ABI

[13:22] *** sena_kun joined
[13:24] *** Altai-man left
[15:33] *** Kaiepi joined
[16:29] *** Kaiepi left
[16:32] *** zakharyas joined
[17:21] *** Altai-man joined
[17:22] *** Kaiepi joined
[17:24] *** sena_kun left
[21:22] *** sena_kun joined
[21:24] *** Altai-man left
[21:36] *** zakharyas left
[22:56] *** sena_kun left
