[00:03] *** patrickz joined
[00:07] *** patrickb left
[00:49] *** Kaeipi joined
[00:49] *** Kaiepi left
[01:12] *** Kaeipi left
[01:13] *** Kaeipi joined
[01:14] *** Kaeipi left
[01:15] *** Kaeipi joined
[01:15] *** Kaeipi left
[01:16] *** Kaeipi joined
[01:17] *** Kaeipi left
[01:19] *** Kaiepi joined
[01:20] *** Kaiepi left
[01:21] *** Kaiepi joined
[01:22] *** Kaiepi left
[01:23] *** Kaiepi joined
[01:23] *** Kaiepi left
[01:27] *** Kaiepi joined
[02:50] *** kawaii left
[02:51] *** kawaii joined
[03:20] *** Kaiepi left
[03:21] *** Kaiepi joined
[03:41] *** Kaiepi left
[03:41] *** Kaiepi joined
[06:31] *** sena_kun joined
[07:15] *** Kaeipi joined
[07:15] *** Kaiepi left
[07:29] *** Kaeipi left
[07:30] *** Kaeipi joined
[07:37] *** Kaeipi left
[07:38] *** Kaiepi joined
[07:54] *** Kaiepi left
[07:54] *** Kaiepi joined
[08:01] *** squashable6 left
[08:03] *** Kaiepi left
[08:03] *** squashable6 joined
[08:04] *** Kaiepi joined
[08:08] *** Altai-man joined
[08:10] *** sena_kun left
[10:20] *** domidumont joined
[10:25] *** domidumont left
[10:28] *** domidumont joined
[10:29] *** patrickz left
[12:09] *** sena_kun joined
[12:10] *** Altai-man left
[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 4905967917 | (Nicholas Clark)++ | 4 files

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: Add `MVM_get_running_threads_context` to get the running thread's context

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: Start with a fallback implementation using `uv_key_create`, `uv_key_set` and

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: `uv_key_get`, to eliminate the static variable and make the code thread

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: safe.

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: Use this in `qsort`'s callback, which needs to call functions that take the

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: <â€¦commit message has 10 more linesâ€¦>

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: review: https://github.com/MoarVM/MoarVM/commit/4905967917

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 73862d27d3 | (Nicholas Clark)++ | 2 files

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: Add MVM_THREAD_LOCAL to declare variables with thread local storage

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: If the compiler provides this, it's likely much faster than UV's API, which

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: is (basically) POSIX thread local storage, and requires a function call for

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: each "get". UV appears to rely on Win32 compilers supporting this. All

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: recent gcc and clang versions support it, and seemingly also the vendor

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: compilers on Solaris and AIX.

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: <â€¦commit message has 6 more linesâ€¦>

[13:25] <Geth> Â¦ MoarVM/eliminate-static-race-condition: review: https://github.com/MoarVM/MoarVM/commit/73862d27d3

[13:26] <Geth> Â¦ MoarVM: nwc10++ created pull request #1374: Eliminate static race condition

[13:26] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1374

[13:28] <nwc10> sigh, oops, missed a reword. Sadly it seems that the "much" in "likely much faster" isn't true when you're building shared library code.

[13:29] <nwc10> it *is* for regular code.

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 8f5f92f9cf | (Nicholas Clark)++ | 2 files

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: Add MVM_THREAD_LOCAL to declare variables with thread local storage

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: If the compiler provides this, it's likely faster than UV's API, which is

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: (basically) POSIX thread local storage, and requires a function call for

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: each "get". UV appears to rely on Win32 compilers supporting this. All

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: recent gcc and clang versions support it, and seemingly also the vendor

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: compilers on Solaris and AIX.

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: <â€¦commit message has 6 more linesâ€¦>

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: review: https://github.com/MoarVM/MoarVM/commit/8f5f92f9cf

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 3786fe65b4 | (Nicholas Clark)++ | 3 files

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: A probe for compiler thread local storage support.

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: Not needed on Win32, as UV already exposes it there.

[14:07] <Geth> Â¦ MoarVM/eliminate-static-race-condition: review: https://github.com/MoarVM/MoarVM/commit/3786fe65b4

[15:35] *** Kaiepi left
[15:57] *** Kaiepi joined
[16:01] *** Kaiepi left
[16:08] *** Altai-man joined
[16:08] *** Kaiepi joined
[16:10] *** sena_kun left
[17:32] <Geth> Â¦ MoarVM: 004e4bc77a | (Nicholas Clark)++ | build/probe.pm

[17:32] <Geth> Â¦ MoarVM: The probe for `pthread_setname_np` needs prototypes from <string.h>

[17:32] <Geth> Â¦ MoarVM: 

[17:32] <Geth> Â¦ MoarVM: The compiler warns about this (but still compiles it successfully).

[17:32] <Geth> Â¦ MoarVM: The default for probes is to discard all output, so this is hidden.

[17:32] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/004e4bc77a

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 4cfde6edf1 | (Nicholas Clark)++ | 4 files

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: Add `MVM_get_running_threads_context` to get the running thread's context

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: Start with a fallback implementation using `uv_key_create`, `uv_key_set` and

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: `uv_key_get`, to eliminate the static variable and make the code thread

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: safe.

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: Use this in `qsort`'s callback, which needs to call functions that take the

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: <â€¦commit message has 10 more linesâ€¦>

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: review: https://github.com/MoarVM/MoarVM/commit/4cfde6edf1

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: ac941c0d59 | (Nicholas Clark)++ | 2 files

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: Add MVM_THREAD_LOCAL to declare variables with thread local storage

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: If the compiler provides this, it's likely faster than UV's API, which is

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: (basically) POSIX thread local storage, and requires a function call for

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: each "get". UV appears to rely on Win32 compilers supporting this. All

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: recent gcc and clang versions support it, and seemingly also the vendor

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: compilers on Solaris and AIX.

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: <â€¦commit message has 6 more linesâ€¦>

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: review: https://github.com/MoarVM/MoarVM/commit/ac941c0d59

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 8d68b18f99 | (Nicholas Clark)++ | 3 files

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: A probe for compiler thread local storage support.

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: 

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: Not needed on Win32, as UV already exposes it there.

[18:41] <Geth> Â¦ MoarVM/eliminate-static-race-condition: review: https://github.com/MoarVM/MoarVM/commit/8d68b18f99

[18:55] *** domidumont left
[19:39] <Geth> Â¦ MoarVM/void-prototypes: 1eda12a0a6 | (Nicholas Clark)++ | 5 files

[19:39] <Geth> Â¦ MoarVM/void-prototypes: Use `foo(void)` instead of just `foo()` for functions that take no arguments

[19:39] <Geth> Â¦ MoarVM/void-prototypes: 

[19:39] <Geth> Â¦ MoarVM/void-prototypes: Whilst the two are equivalent in C++, in C the latter is just a declaration

[19:39] <Geth> Â¦ MoarVM/void-prototypes: not a prototype - it specifies the return type but not the parameters,

[19:39] <Geth> Â¦ MoarVM/void-prototypes: meaning that the compiler can't actually check the parameters passed and

[19:39] <Geth> Â¦ MoarVM/void-prototypes: report errors. An explicit `void` makes it a prototype, declaring that the

[19:39] <Geth> Â¦ MoarVM/void-prototypes: function takes no arguments.

[19:39] <Geth> Â¦ MoarVM/void-prototypes: <â€¦commit message has 11 more linesâ€¦>

[19:39] <Geth> Â¦ MoarVM/void-prototypes: review: https://github.com/MoarVM/MoarVM/commit/1eda12a0a6

[19:40] <Geth> Â¦ MoarVM: nwc10++ created pull request #1375: Use `foo(void)` instead of just `foo()` for functions that take no arguments

[19:40] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1375

[20:09] *** sena_kun joined
[20:10] *** Altai-man left
[21:09] <Geth> Â¦ MoarVM: 1eda12a0a6 | (Nicholas Clark)++ | 5 files

[21:09] <Geth> Â¦ MoarVM: Use `foo(void)` instead of just `foo()` for functions that take no arguments

[21:09] <Geth> Â¦ MoarVM: 

[21:09] <Geth> Â¦ MoarVM: Whilst the two are equivalent in C++, in C the latter is just a declaration

[21:09] <Geth> Â¦ MoarVM: not a prototype - it specifies the return type but not the parameters,

[21:09] <Geth> Â¦ MoarVM: meaning that the compiler can't actually check the parameters passed and

[21:09] <Geth> Â¦ MoarVM: report errors. An explicit `void` makes it a prototype, declaring that the

[21:09] <Geth> Â¦ MoarVM: function takes no arguments.

[21:09] <Geth> Â¦ MoarVM: <â€¦commit message has 11 more linesâ€¦>

[21:09] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1eda12a0a6

[22:11] *** sena_kun left
[23:06] *** lizmat_ joined
[23:06] *** lizmat left
[23:06] *** lizmat_ is now known as lizmat

[23:14] *** lizmat_ joined
[23:15] *** lizmat__ joined
[23:17] *** lizmat left
[23:17] *** lizmat__ is now known as lizmat

[23:18] *** lizmat_ left
