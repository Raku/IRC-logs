[00:00] *** konvertex left
[00:02] <jnthn> .tell jnthn When you re-work deopt tomorrow, rather than having to rewrite the whole stack and worry about frame expansions all the way down, you can instead fiddle the frame kind to be a "please deopt me" one, and then the only place deopt has to mess with is the frame on the stack top, which makes your job seriously less awful

[00:02] <tellable6> jnthn, I'll pass that message to your doctor

[00:04] <jnthn> Better cache locality and avoids having to force all the frame to the heap too.

[00:04] <jnthn> 'night

[00:08] *** harrow joined
[01:22] *** dogbert17 left
[02:10] *** squashable6 left
[02:11] *** squashable6 joined
[02:11] *** squashable6 left
[02:13] *** squashable6 joined
[06:17] *** squashable6 left
[06:19] *** squashable6 joined
[06:39] *** patrickb joined
[06:55] *** patrickb left
[07:45] *** Geth left
[07:49] *** Geth joined
[07:50] *** zakharyas joined
[08:43] *** Altai-man_ joined
[09:26] *** konvertex joined
[10:00] <jnthn> morning o/

[10:03] <lizmat> 7 seconds late!  :-)

[10:04] <jnthn> :P

[10:04] <lizmat> but yeah, one of those days where you realize you have to replace a bottom piece of your carefully constructed tower

[10:09] <nwc10> \o

[10:10] <jnthn> Looks like last night me read an OSR paper and got an idea (oddly, not one that appears in the paper) about how to make the deopt changes far less painful

[10:10] <nwc10> "Doctor, doctor, it hurts when I do this" "well, don't do that then" ?

[10:11] <nwc10> but yes, your summary last night seems very elegant

[10:13] *** MasterDuke left
[10:26] *** sena_kun joined
[10:27] *** Altai-man_ left
[10:29] *** MasterDuke joined
[10:41] *** MasterDuke left
[11:03] <jnthn> lunch, bbiab

[11:08] *** japhb left
[11:55] *** AlexDaniel joined
[11:56] *** AlexDaniel left
[11:56] *** AlexDaniel joined
[11:59] *** AlexDaniel left
[12:05] *** MasterDuke joined
[12:19] <jnthn> Mmm, gulaÅ¡

[12:24] *** zakharyas left
[12:25] *** Altai-man_ joined
[12:27] *** sena_kun left
[12:34] <nine> Sounds nice. I think I'm gonna grab some lunch as well :)

[12:41] <jnthn> Why does it segv? Ohh...this looks bad... :)

[12:41] <jnthn> (gdb) p tc->stack_current_region->alloc

[12:41] <jnthn> $7 = 0x7ffff5797080 ""

[12:41] <jnthn> (gdb) p tc->stack_current_region->alloc_limit

[12:41] <jnthn> $8 = 0x7ffff5796010 "

[12:50] <MasterDuke> i'm still not sure why https://gist.github.com/MasterDuke17/c505c33b11a31eddb4d3a153c47f048c segvs in MVM_jit_emit_primitive

[12:52] <timotimo> have we double-checked what each register is mapped to?

[12:54] <timotimo> at the point of segv, what does "x/i $rip" say?

[12:54] <timotimo> or is it %rip?

[13:00] <jnthn> .oO( rest in peace? )

[13:20] <Geth> Â¦ MoarVM/new-disp: b0ce9e9446 | (Jonathan Worthington)++ | 6 files

[13:20] <Geth> Â¦ MoarVM/new-disp: Make all frames have a call stack record

[13:20] <Geth> Â¦ MoarVM/new-disp: 

[13:20] <Geth> Â¦ MoarVM/new-disp: Even those that get heap promoted now leave one behind. For now, this

[13:20] <Geth> Â¦ MoarVM/new-disp: doesn't achieve anything particularly new, aside from cleaning up some

[13:20] <Geth> Â¦ MoarVM/new-disp: aspects of call stack region management. However, it also paves the way

[13:20] <Geth> Â¦ MoarVM/new-disp: for putting disptchers and flattening data on the call stack (and having

[13:20] <Geth> Â¦ MoarVM/new-disp: them automatically get dropped when we return from the things that they

[13:20] <Geth> Â¦ MoarVM/new-disp: <â€¦commit message has 6 more linesâ€¦>

[13:20] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/b0ce9e9446

[13:24] *** zakharyas joined
[13:26] <MasterDuke> timotimo: => 0x7ffff79c2c29 <MVM_jit_emit_primitive+22008>:       mov    (%rax),%rdx

[13:27] <jnthn> heh, with spesh disabled it manages to even build Rakudo

[13:27] <jnthn> I'm a bit spooked 'cus I'm sure continuations should be really broken, but it's probably just about robust enough to survive

[13:28] <nine> MasterDuke: I'm still confused. Is it actually the MVM_jit_emit_primitive function that's segfaulting, or code generated by the JIT?

[13:29] <MasterDuke> gist updated with a gdb backtrace

[13:30] <nine> So it's the compiler that's failing

[13:31] <nine> MasterDuke: just try removing lines from the assembly until it doesn't break anymore

[13:31] <nine> Then you know what it's tripping over

[13:31] <MasterDuke> heh

[13:33] <MasterDuke> dies at `| lea ARG2, MVMDISPINLINECACHE:TMP2->entries[slot];`

[13:33] <MasterDuke> i.e., up until that line is fine

[13:34] <jnthn> Amazingly, Rakudo does - spesh disabled - build and pass much of spectest, even before I fix up continuations...

[13:35] <nine> jnthn: how much are continuations actually used?

[13:35] <jnthn> gather/take, await

[13:35] <jnthn> And the failures I see are largely in list-y and thread-y things

[13:36] <jnthn> For such a deep change I feared more fallout at this point.

[13:36] <jnthn> Granted it probably can get out of sync and get away with it at present.

[13:37] <jnthn> Yeah, almost all explosions are in concurrency tests

[13:37] <jnthn> OK, now for the continuations...

[13:39] <nine> MasterDuke: come to think of it, that line doesn't make that much sense anyway

[13:40] <timotimo> MasterDuke: try "info registers"

[13:40] <nine> MasterDuke: what you're doing there is effectively mov ARG2, TMP2 + offsetof(entries) + slot * 8, i.e. TMP2 + a constant

[13:40] <timotimo> nine: it's AT&T syntax i think

[13:40] <timotimo> MasterDuke: `set disassembly-flavor intel`

[13:40] <nine> Yeah, set disassembly-flavor intel

[13:40] <MasterDuke> i got farther with `| mov TMP3, MVMDISPINLINECACHE:TMP2->entries; | lea ARG2, [TMP3 + slot];`, but still a segv later

[13:41] <MasterDuke> but the segv is in nowhereland

[13:42] <MasterDuke> gist updated

[13:42] <nine> Oh, btw. this thing will blow up on Windows, because there ARG1 == TMP1, so you're overwriting ARG1 after setting it

[13:43] <MasterDuke> "arg", that problem again. well, easy fix

[13:44] <nine> I'd probably just use ARG* even for temporaries, to make it clear

[14:04] <jnthn> heh, pro tip: GC mark the call stack... :)

[14:08] <Geth> Â¦ MoarVM/new-disp: 5819f5a00f | (Jonathan Worthington)++ | 4 files

[14:08] <Geth> Â¦ MoarVM/new-disp: GC mark the callstack, plus assert it's in sync

[14:08] <Geth> Â¦ MoarVM/new-disp: 

[14:08] <Geth> Â¦ MoarVM/new-disp: The assertion revealed the forgotten marking. Now, the assertion only

[14:08] <Geth> Â¦ MoarVM/new-disp: fails in the continuations tests in NQP, which is what it was expected

[14:08] <Geth> Â¦ MoarVM/new-disp: to detect.

[14:08] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5819f5a00f

[14:26] *** sena_kun joined
[14:28] *** Altai-man_ left
[14:29] *** Kaiepi joined
[15:00] <Geth> Â¦ MoarVM/new-disp: 5235e4d503 | (Jonathan Worthington)++ | 2 files

[15:00] <Geth> Â¦ MoarVM/new-disp: Fix a naming inconsistency

[15:00] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5235e4d503

[15:00] <Geth> Â¦ MoarVM/new-disp: b54a047112 | (Jonathan Worthington)++ | 3 files

[15:00] <Geth> Â¦ MoarVM/new-disp: Refactor marking of frames living on call stack

[15:00] <Geth> Â¦ MoarVM/new-disp: 

[15:00] <Geth> Â¦ MoarVM/new-disp: They're now handled as part of the call stack walking, so we don't have

[15:00] <Geth> Â¦ MoarVM/new-disp: to traverse it in two places. This will also ease continuation handling.

[15:00] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/b54a047112

[15:43] *** patrickb joined
[16:25] *** Altai-man_ joined
[16:27] *** sena_kun left
[16:52] *** Altai-man_ left
[16:56] *** MasterDuke left
[17:08] *** MasterDuke joined
[17:12] <MasterDuke> nice, nqp and rakudo now both build, with lego jit bails from sp_getlexstatic_o gone. not sure what the testing situation is though, were they clean at any point?

[17:15] <MasterDuke> looks like the same tests fail with that non-jitted

[17:16] *** sena_kun joined
[17:22] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1286: Lego JIT implementation of sp_getlexstatic_o

[17:22] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1286

[17:26] <MasterDuke> not quite sure what a template for ^^^ would look like

[17:27] *** japhb joined
[17:50] <Geth> Â¦ MoarVM/new-disp: baa27a97c1 | (Jonathan Worthington)++ | 12 files

[17:50] <Geth> Â¦ MoarVM/new-disp: Mostly move continuations to new callstack model

[17:50] <Geth> Â¦ MoarVM/new-disp: 

[17:50] <Geth> Â¦ MoarVM/new-disp: This is required for dispatchers because we shall also needs to save

[17:50] <Geth> Â¦ MoarVM/new-disp: their state when taking a continuation. The new approach is to always

[17:50] <Geth> Â¦ MoarVM/new-disp: have continuations allocate stack frames within a fresh region (so a

[17:50] <Geth> Â¦ MoarVM/new-disp: reset is a region base). This means that we can avoid looking through

[17:50] <Geth> Â¦ MoarVM/new-disp: every frame, and just look through the (much smaller number of) regions

[17:50] <Geth> Â¦ MoarVM/new-disp: <â€¦commit message has 23 more linesâ€¦>

[17:50] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/baa27a97c1

[17:54] <jnthn> Rakudo manages to get through its build with this. Tests are explosive, though with one of the known todo panics. :)

[17:54] <jnthn> Home time.

[17:55] <jnthn> o/

[17:55] <jnthn> (Oh, and also: only with spesh disabled, 'cus I didn't update deopt yet.)

[18:25] *** Altai-man_ joined
[18:25] *** zakharyas left
[18:27] *** sena_kun left
[18:40] *** Kaiepi left
[18:40] *** Kaiepi joined
[18:41] *** Kaiepi left
[18:59] *** Kaiepi joined
[19:05] <nwc10> \o

[19:05] <nwc10> beer!

[19:08] <MasterDuke> this morning i just bottled the stout i'm brewing

[19:18] <nwc10> ooooh

[19:49] *** zakharyas joined
[20:25] *** sena_kun joined
[20:27] *** Altai-man_ left
[20:36] *** zakharyas left
[21:31] *** hoelzro left
[21:42] *** hoelzro joined
[21:44] *** Kaiepi left
[21:47] *** Kaiepi joined
[21:48] *** Kaiepi left
[21:48] *** Kaiepi joined
[22:01] *** dogbert17 joined
[22:01] <dogbert17> I get test failures in t/spec/S32-io/io-cathandle.t

[22:02] <dogbert17> get native descriptor requires an object with REPR MVMOSHandle (got Scalar with REPR P6opaque)

[22:04] <lizmat> https://github.com/rakudo/rakudo/commit/f33ce01c11

[22:04] <lizmat> dogbert17 ^^

[22:05] <lizmat> https://github.com/rakudo/rakudo/commit/61046d7695 probably caused it

[22:25] *** Altai-man_ joined
[22:27] *** sena_kun left
[22:44] *** Altai-man_ left
[23:12] *** squashable6 left
[23:14] *** squashable6 joined
[23:48] *** patrickz joined
[23:52] *** patrickb left
