[00:13] *** Ven`` joined
[00:53] *** konvertex left
[01:03] *** lucasb left
[01:11] *** Ven`` left
[05:12] *** quotable6 left
[05:12] *** bloatable6 left
[05:12] *** notable6 left
[05:12] *** greppable6 left
[05:12] *** shareable6 left
[05:12] *** tellable6 left
[05:12] *** squashable6 left
[05:12] *** bisectable6 left
[05:12] *** releasable6 left
[05:12] *** benchable6 left
[05:12] *** committable6 left
[05:12] *** nativecallable6 left
[05:12] *** sourceable6 left
[05:12] *** coverable6 left
[05:12] *** statisfiable6 left
[05:12] *** evalable6 left
[05:12] *** reportable6 left
[05:12] *** linkable6 left
[05:12] *** unicodable6 left
[05:13] *** tellable6 joined
[05:13] *** bisectable6 joined
[05:13] *** nativecallable6 joined
[05:13] *** releasable6 joined
[05:13] *** reportable6 joined
[05:13] *** linkable6 joined
[05:13] *** statisfiable6 joined
[05:14] *** greppable6 joined
[05:14] *** squashable6 joined
[05:14] *** quotable6 joined
[05:14] *** sourceable6 joined
[05:14] *** bloatable6 joined
[05:14] *** benchable6 joined
[05:14] *** unicodable6 joined
[05:14] *** shareable6 joined
[05:15] *** coverable6 joined
[05:15] *** notable6 joined
[05:15] *** evalable6 joined
[05:15] *** committable6 joined
[06:46] <nwc10> good *, #moarvm

[06:47] <nwc10> bloatable6?

[06:50] <nine> bloatable6: help

[06:50] <bloatable6> nine, Like this: bloatable6: d=compileunits 292dc6a,HEAD # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Bloatable

[06:50] <nwc10> nine: I asked it privately, and then when it refused to tell me, on #whateverable

[06:51] <nwc10> and now I have bookmarked the github project for further inspection

[06:54] *** domidumont joined
[07:24] *** zakharyas joined
[07:39] *** sivoais left
[07:40] *** sivoais joined
[08:14] *** Altai-man_ joined
[08:24] *** konvertex joined
[08:26] *** sena_kun joined
[08:28] *** Altai-man_ left
[09:34] *** Ven`` joined
[10:15] *** Ven`` left
[10:25] *** Altai-man_ joined
[10:28] *** sena_kun left
[11:09] *** zakharyas left
[12:22] *** zakharyas joined
[12:27] *** sena_kun joined
[12:28] *** Altai-man_ left
[13:05] <Kaiepi> when writing ops for objects of a specific repr, should the function called use MVMObject and check the repr itself, or should it take the actual repr type and have the repr check be done from interp.c?

[13:07] <jnthn> That isn't terribly uniform at the moment. Ultimately, though, splitting the unchecked from the checking is a good way to go.

[13:07] <jnthn> A lot of the ops doing these things will eventually go away in favor of the "syscall" dispatch thing speculated in my dispatch work.

[13:08] <Kaiepi> aight

[13:20] <Kaiepi> i'm working on a solution for https://github.com/Raku/problem-solving/issues/111 atm since my grant stuff's blocked. there's a lot of work to do on the backend side of things

[13:21] *** Kaiepi left
[14:26] *** Altai-man_ joined
[14:28] *** sena_kun left
[14:33] <AlexDaniel`> bloatable6: 2019.05,2020.05

[14:34] <bloatable6> AlexDaniel`, https://gist.github.com/1d19eb99c5ceda83c2eca0394824f82d

[14:34] <AlexDaniel`> I wonder if it works

[14:36] <AlexDaniel`> what's [None] ? O_o

[14:36] <timotimo> not sure

[14:51] <MasterDuke> nine: how do you run/use your check-roots.py plugin?

[15:05] <MasterDuke> ugh, the plugin doesn't built with gcc 10

[15:14] <nine> I guess you have figured out already that you need [email@hidden.address]
[15:14] <nine> I only got it to compile with Python 2.7, not Python 3

[15:16] <nine> I've symlinked gcc-c-api and python.so into my MoarVM directory. Then added -fplugin=python.so -fplugin-arg-python-script=tools/check-roots.py to the CFLAGS in the Makefile and run LD_LIBRARY_PATH=. make

[15:16] <MasterDuke> yeah, it's https://github.com/davidmalcolm/gcc-python-plugin/issues/181

[15:17] <nine> At least there seems to be a PR

[15:18] <MasterDuke> yeah, just makes it more annoying to use my system package manager to install it

[15:22] *** zakharyas left
[15:39] <MasterDuke> tried applying a couple of the other PRs to get python 3 working, but it didn't in the end, so just switched to python 2

[15:39] <MasterDuke> but did finally get it working, nine++

[15:40] <nine> woohoo

[16:26] <MasterDuke> huh. my plugin can find paired malloc/free, but doesn't find any mallocs without a free before an MVM_exception_throw_adhoc. and of course i don't remember where i thought i saw one for sure that the plugin should have found...

[16:27] *** sena_kun joined
[16:29] *** Altai-man_ left
[17:26] *** MasterDuke left
[17:46] *** domidumont left
[18:10] *** MasterDuke joined
[18:17] <MasterDuke> wtf? `ins.fn.operand.name` is never 'MVM_exception_throw_adhoc' in src/strings/ops.c, that's not right...

[18:26] *** Altai-man_ joined
[18:28] *** sena_kun left
[18:38] <MasterDuke> there are a bunch of things with names like '_16'. i tried compiling with --optimize=0, but they still happen. any way to not do that?

[18:39] <MasterDuke> i just compiled all of moarvm. printing out every function call the plugin sees and there aren't any MVM_exception_throw_*

[18:58] <timotimo> what do you mean _16? things? is that like C-level stuff?

[18:58] <timotimo> i'm kinda confused :) :)

[18:58] <timotimo> ah is this about your gcc plugin?

[19:04] <timotimo> are we working with python2 or python3?

[19:04] <timotimo> all print invocations are print functions so that points towards python3

[19:07] <timotimo> do we want a Makefile target to build the whole thing with the checker plugin?

[19:08] <MasterDuke> python2. let me gist a diff

[19:09] <timotimo> aw crap now i installed the python3 version of the plugin

[19:09] <MasterDuke> https://gist.github.com/MasterDuke17/eb9c88f8c2967139ff2d6b8dd36aa041

[19:09] <MasterDuke> i don't think the script has any incompatibilities

[19:10] <MasterDuke> but i could only get the python2 version of the plugin to build

[19:10] <timotimo> how do i invoke it for the program?

[19:10] <timotimo> for the codebase*

[19:10] <MasterDuke> https://colabti.org/irclogger/irclogger_log/moarvm?date=2020-05-19#l82

[19:11] <timotimo> ah there it is

[19:13] <timotimo> have you tried the show-gimple or show-ssa or show-callgraph example scripts to see what the stuff looks like on the inside?

[19:14] <timotimo> callgraph is "only" for functions, but perhaps it's good enough for finding if it ever has exception_throw_* anywhere

[19:17] <MasterDuke> nope. i did try undefining MVM_NO_RETURN, but that didn't make a difference

[19:19] <MasterDuke> unmodified generate-callgraph-c.py doesn't show anything useful

[19:20] <timotimo> cc1: error: plugin python should be specified before ‘-fplugin-arg-python-script=tools/show-callgraph.py’ in the command line

[19:20] <timotimo> cc1: error: fail to initialize plugin /usr/lib/gcc/x86_64-redhat-linux/9/plugin/python2.so

[19:20] <timotimo> :( :(

[19:21] <MasterDuke> did you symlink the two .so files?

[19:22] <MasterDuke> and show-callgraph.py doesn't have any MVM_exception_* in the graph

[19:22] <MasterDuke> weird

[19:24] <timotimo> cc1: error: plugin python should be specified before ‘-fplugin-arg-python-script=tools/show-callgraph.py’ in the command line

[19:24] <timotimo> cc1: error: fail to initialize plugin ./python2.so

[19:24] <timotimo> after symlinking both .so files and setting the library path

[19:24] *** zakharyas joined
[19:24] <timotimo> if i use gcc-with-python2 instead of gcc for CC in the makefile it complains that the plugin gets initialized with two different paths

[19:25] <MasterDuke> fwiw, this is how i'm running it. `PYTHONPATH=/home/dan/Source/gcc-python-plugin/ LD_LIBRARY_PATH=. make -j12`

[19:25] <timotimo> gcc -c -fplugin=./python2.so -fplugin-arg-python-script=tools/show-callgraph.py -Wextra -Wall -Wno-unused-parameter -Wno-unused-function -Wno-missing-braces -Werror=pointer-arith -O3 -DNDEBUG -g3  -D_REENTRANT -D_FILE_OFFSET_BITS=64 -fPIC -DDEBUG_HELPERS -DMVM_HEAPSNAPSHOT_FORMAT=3 -march=native -DMVM_TRACING=0 -DMVM_CGOTO=1 -DMVM_RDTSCP=1 -DMVM_BUILD_SHARED -fPIC -I3rdparty/libuv/include

[19:26] <timotimo> -I3rdparty/libuv/src -I3rdparty/libatomicops/src -I3rdparty/libtommath -I3rdparty/dyncall/dynload -I3rdparty/dyncall/dyncall -I3rdparty/dyncall/dyncallback -I3rdparty/sha1 -isystem3rdparty/tinymt -isystem3rdparty/dynasm -isystem3rdparty/cmp -isystem3rdparty -Isrc -o src/strings/ops.o src/strings/ops.c

[19:26] <timotimo> this is the full commandline exactly how make fires it off

[19:26] <MasterDuke> and i added `-fplugin=python.so -fplugin-arg-python-script=show-callgraph.py` to the end of the CFLAGS in the Makefile

[19:26] <timotimo> oh, end?

[19:26] <timotimo> makes no change

[19:30] <MasterDuke> what version of gcc?

[19:31] <timotimo> gcc version 9.2.1 20190827 (Red Hat 9.2.1-1) (GCC) 

[19:32] <MasterDuke> huh. not that old

[19:34] <timotimo> oh

[19:34] <timotimo> i think i know what the problem is

[19:35] <timotimo> the flag had to change to -fplugin-arg-python2-script=...

[19:36] <timotimo> cc1: error: fail to initialize plugin ./python.so

[19:36] <timotimo> is now all that i'm getting

[19:43] <timotimo> aha

[19:43] <timotimo> different version of gcc and gcc-plugin installed

[19:44] <timotimo> the internet claims it's supposed to say "version mismatch between gcc and plugin" or so

[19:46] <MasterDuke> huh

[19:48] <timotimo> no, that's not it

[19:49] <timotimo> gcc-plugin-devel wasn't installed at all, and that's what would give trouble when it's mismatched

[19:49] <timotimo> but that's for when i want to build it myself

[19:49] <timotimo> it is, however, packaged in fedora

[19:51] <MasterDuke> so should be working now?

[19:52] <timotimo> doesn't tho

[19:55] <nine> what does ldd say on python.so?

[19:56] <nine> MasterDuke: the _16 stuff are just temporary variables

[19:56] <MasterDuke> yeah

[19:57] <MasterDuke> but any idea why i don't see MVM_exception_* anywhere?

[19:58] <timotimo> https://gist.github.com/timo/133cca89e863d8f7b9806b862e2c7dd9

[20:01] <nine> MasterDuke: you could try dot = cfg_to_dot(fun.cfg); invoke_dot(dot)

[20:01] <nine> That gives you flow diagrams of the function in question. May help understand the Gimple tree

[20:02] <nine> That's a seriously cool feature

[20:02] <nine> timotimo: it's something I wouldn't be surprised to see from you for our spesh graphs at some point :)

[20:03] <nine> timotimo: have you tried -fplugin=python2.so and running with LD_LIBRARY_PATH=.?

[20:03] <nine> I'm pretty sure I tried and failed with ./python2.so

[20:03] <MasterDuke> nine: gist updated

[20:04] <nine> MasterDuke: except Exception: pass is evil...who knows what kind of errors prevent it from seeing the function calls you're after?

[20:06] <MasterDuke> well, i added it because some ins doesn't have a .fn.operand.name after i commented out your `if isinstance(ins.fn, gcc.AddrExpr):`.

[20:07] <nine> Yeah, because the call could be something else. Which it maybe is in the case of MVM_exception_throw_adhoc

[20:07] <MasterDuke> 'gcc.SsaName' object has no attribute 'operand'

[20:09] <nine> https://gcc-python-plugin.readthedocs.io/en/latest/tree.html#ssa-names

[20:10] <MasterDuke> if i put the if back in and print the ins in an else, i get `D.20777 = _13 (tc, _15)` and `s = _10 (tc, _13);`

[20:10] <timotimo> nine: you mean like kinda like tools/graph_spesh.p6

[20:11] <nine> Haha...of course you already did :)

[20:12] <timotimo> 6 years ago :) :)

[20:12] <timotimo> that's when the first commit landed with that in it

[20:13] <MasterDuke> `_13 = _12->pos_funcs.get_elem_storage_spec;` and `_10 = _9->allocate;`

[20:13] <nine> Ah, yes, repr function pointers

[20:14] <nine> Oh, those could be an additional source for allocations that my plugin doesn't check yet

[20:14] <timotimo> ah, interesting

[20:14] <timotimo> sometimes we have a repr check immediately before the invocation

[20:14] <timotimo> so you can have a map from repr id to which struct

[20:14] <timotimo> though they are all called this_repr :D

[20:15] <timotimo> committer Timo Paulssen <timonator@perpetuum-immobile.de> Wed Mar 22 22:28:48 2017 +0100

[20:15] <timotimo> give this_repr consts more meaningful names

[20:15] <timotimo> i guess not

[20:17] *** timotimo left
[20:17] *** timo joined
[20:18] *** timo is now known as Guest71053

[20:18] *** Guest71053 is now known as timotimo

[20:27] *** sena_kun joined
[20:29] *** Altai-man_ left
[20:36] <MasterDuke> it's not just MVM_exception_*. i did a make clean and then made again (having been compiling without optimizations), printing out everything, but turn_32bit_into_8bit_unchecked wasn't there either

[20:40] *** squashable6 left
[20:42] *** squashable6 joined
[20:43] <timotimo> how do fully inlined functions show up?

[20:46] <MasterDuke> ones marked inline?

[20:47] <timotimo> or static inlino

[20:52] <MasterDuke> siphashfinish_32bits shows up and it's `MVM_STATIC_INLINE uint64_t siphashfinish_32bits (siphash *sh, const uint32_t src) {`

[20:53] <MasterDuke> compiling everything (i.e., after a make clean) give ~1780 unique function names. ctags gives ~2700

[21:34] *** zakharyas left
[21:38] *** konvertex left
[22:26] *** Altai-man_ joined
[22:28] *** sena_kun left
[22:30] <timotimo> looking further into the hllize optimization, and it's not easy to just code-gen what it'd do, because i don't think there's an op that can "skip this work if the hll already matches"

[22:33] <timotimo> hm. looks like whenever the hll is "not the same", it's actually null on the type

[22:36] <MasterDuke> you mean you don't think there's an op to do "skip this work if the hll already matches"? or none of the existing ops could "skip this work if the hll already matches"?

[23:07] *** Altai-man_ left
