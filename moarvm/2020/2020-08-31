[06:23] <nwc10> good *, #moarvm 

[07:50] *** nebuchadnezzar left
[07:52] *** nebuchadnezzar joined
[07:52] *** MasterDuke left
[07:55] *** nebuchadnezzar left
[07:58] *** nebuchadnezzar joined
[08:00] *** vrurg left
[08:00] *** Util left
[08:05] *** vrurg joined
[08:05] *** Util joined
[08:41] *** MasterDuke joined
[08:51] *** zakharyas joined
[09:05] <jnthn> morning o/

[09:05] <tellable6> 2020-08-29T15:26:01Z #raku-dev <tbrowder> jnthn: \o/  cro non-tls reverse proxy success! check http://florida-candidates.us

[09:06] <nwc10> \o

[10:18] *** sena_kun joined
[11:26] *** zakharyas left
[11:45] *** Altai-man joined
[11:48] *** sena_kun left
[12:22] <Geth> Â¦ MoarVM/master: 66 commits pushed by (Nicholas Clark)++, (Jonathan Worthington)++

[12:22] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/c3941772c259...51d399cb5453

[12:23] <nwc10> thanks for all the review feedback

[12:23] <nwc10> I wasn't sure - do we let this stew for a bit *before* bumping NQP's MoarVM revision?

[12:23] <jnthn> nwc10++

[12:23] <jnthn> Probably better to bump and get it tested more, IMO

[12:23] <nwc10> Ooh, I was going to say "I now need to find a Camel to stick go-faster stripes no it"

[12:24] <nwc10> but I think if I raid the childrens' bedrooms I have all the parts needed.

[12:24] <jnthn> lizmat: For the weekly, maybe worth a mention of the new MoarVM hash impl merged :)

[12:24] <lizmat> aaaah... cool

[12:24] <lizmat> so, I guess we need a bump now :-)

[12:25] <jnthn> Victim^WVolunteer to bump successfully obtained. :D

[12:26] *** AlexDaniel joined
[12:26] *** AlexDaniel left
[12:26] *** AlexDaniel joined
[12:26] <lizmat> working on bumping

[12:26] <jnthn> I'm disappointed that google image search for "camel with go faster stripes" doesn't actually seem to find one :P

[12:27] <jnthn> I wonder if one day they'll be able to use ML to synthesize images that don't actually exist yet to match one's search :)

[12:29] <nwc10> Well, I have found Camelia

[12:29] <nwc10> failed to find the roll of go-faster stripes

[12:32] <Altai-man> Wow, sounds awesome. Are there any benches around for people to boast?

[12:33] <nwc10> Altai-man: well, I tried "startup" and "setting compilation"

[12:33] <nwc10> they are measurable.

[12:33] <nwc10> I don't know if we have actual hash benchmarks. They should be more measurable :-)

[12:34] <Altai-man> Well, benchmarks are lies anyway.

[12:35] <Altai-man> A lot of things can be measured, e.g. roast.

[12:35] <nwc10> I have no tea. Or coffee.

[12:35] <Altai-man> nwc10++ # great work

[12:36] *** travis-ci joined
[12:36] <travis-ci> MoarVM build passed. Jonathan Worthington 'Merge branch 'A-better-hash''

[12:36] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/722719060 https://github.com/MoarVM/MoarVM/compare/c3941772c259...51d399cb5453

[12:36] *** travis-ci left
[12:36] <lizmat> core module installation appears to be ~15% faster

[12:37] <Altai-man> lizmat, are you bumping rakudo or should I?

[12:37] <nwc10> OK, Interesting. "Your mileage may vary"

[12:38] <lizmat> Altai-man: am running tests atm, when ok, will bump Rakudo

[12:38] <Altai-man> roger

[12:40] <jnthn> For once Travis bares good news...

[12:40] <jnthn> Or is it bears...

[12:42] <nwc10> Spelling is hard - let's go C coding.

[12:42] <nwc10> gha, I still have no tea/coffee/$other

[12:45] <jnthn> Spelling *English* is hard. Thankfully, not all languages are quite so hard. :)

[12:46] <Altai-man> jnthn, what is easier (by a good measure), in your opinion?

[12:52] <jnthn> On spelling? Czech and Slovak for sure. :)

[12:52] <jnthn> Not much else about them is easier, but the spelling at least is :)

[12:53] <nwc10> vowels rrrrrrrrrrrrrrrrr optional?

[12:54] <jnthn> I never claimed the words were easy to say :P

[12:54] <lizmat> ndd

[12:55] <lizmat> .oO( funny how that was intended as "indeed", but now reads like "undead".  what does that tell about me?  )

[12:56] <Altai-man> See no difference in spectest. Though maybe IDE eats up some of threads' clock-time.

[12:57] <jnthn> IMO Russian spelling is frustratingly close to being much easier, but thanks to needing to know where the stress goes, it's still not so easy.

[12:59] <Altai-man> Speaking Russian without stress sounds like a bold desire to me...

[13:12] <dogbert17> I'd say that spectest is ~10 precent faster now

[13:12] <dogbert17> precent is actually percent :)

[13:13] <Altai-man> eh, how

[13:13] <Altai-man> 117 seconds is my best result, usually it goes around 120 or something. So it should be a bit above 100, right?

[13:21] <dogbert17> I got 205 on my first run after the bump and 195 on the second (TEST_JOBS=10), it used to be closer to 220 before

[13:21] <dogbert17> Stage parse      :  39.767 # is also quite nice

[13:24] <Altai-man> I'm running with TEST_JOBS=24 and see no difference. Parse is 36.091 and it was ~37.5 before, so there is a speedup indeed.

[13:26] *** zakharyas joined
[13:29] <dogbert17> Parse used to be around 42-43s for me recently

[13:51] *** MasterDuke left
[14:00] <timotimo> how's perl6 -e '' memory usage?

[14:04] <dogbert17> ogbert@dogbert-VirtualBox:~/repos/rakudo$ /usr/bin/time ./perl6-m -e ''

[14:04] <dogbert17> 0.08user 0.01system 0:00.08elapsed 121%CPU (0avgtext+0avgdata 88080maxresident)k

[14:05] <timotimo> a before value, too, per chance?

[14:05] <dogbert17> now you're demanding too much :)

[14:06] <dogbert17> let's see

[14:07] <dogbert17> gimme a couple of minutes and I'll rebuild the previous version

[14:08] *** MasterDuke joined
[14:12] <timotimo> 88k is about how much i have, yeah

[14:20] <timotimo> how do i best look at the hashtable entries and metadata so i can see how it's doing?

[14:20] <dogbert17> 0.08user 0.01system 0:00.08elapsed 121%CPU (0avgtext+0avgdata 89092maxresident)k

[14:21] <timotimo> i tend to have to run it like 20 times and calculate the average

[14:21] <MasterDuke> 86k is what i usually get (after the hash merge_

[14:21] <timotimo> since it does fluctuate quite a bit

[14:21] <dogbert17> This is Rakudo version 2020.08.2-32-gfc75105fb built on MoarVM version 2020.08-6-g15a76dcb3

[14:25] *** zakharyas left
[14:43] <nwc10> timotimo: call MVM_str_hash_fsck from gdb

[14:43] <nwc10> er, yes, or, not sure

[15:46] *** sena_kun joined
[15:47] *** Altai-man left
[15:53] *** MasterDuke left
[17:04] *** domidumont joined
[19:12] *** domidumont left
[19:21] *** nebuchadnezzar left
[19:22] *** nebuchadnezzar joined
[19:23] *** zakharyas joined
[19:45] *** Altai-man joined
[19:48] *** sena_kun left
[19:54] <timotimo> prefix_hashes is literally prefix the output with hash signs %)

[19:56] <jnthn> .oO( When I said to build a prefix hash, this wasn't quite what I meant... :D )

[19:57] <timotimo> i like looking at the visualization

[19:59] <timotimo> i don't think there's a way to see what bits from the key are put into the metadata

[20:02] <timotimo> https://paste.centos.org/view/23ec1cf9

[20:02] <timotimo> a random example hash, just one of the first that aren't less than 128 items that shows up in gc_mark during a force_gc

[20:03] <timotimo> it has a few slots that are 0xa or 0xb away from their ideal bucket

[20:06] <nwc10> that's a bit LTA. I wonder if a lower load factor would help a lot

[20:07] <nwc10> also (future work) - the second planned thing is to steal the optimisation frmo the C++ design, where more bits of the hash are in the byte array used for "distance from ideal bucket"

[20:08] <nwc10> which means that the lookup code can reject many entries with just a 1 byte read and compare

[20:08] <nwc10> currently it needs to read things.

[20:08] <nwc10> also, I forget what the average chain lenght of uthash could end up as

[20:08] <nwc10> or, more "typical" chain lenghts

[20:09] <nwc10> because walking that linked list is the same sort of work as walking the array, just with more cache misses thrown in

[20:09] <nwc10> anyway, *load factor* is possibly LTA currently.

[20:09] <lizmat> Extra Edition of the Rakudo Weekly News: https://rakudoweekly.blog/2020/08/31/new-hash-implementation/

[20:10] <nwc10> but only *possibly* - the various folks benchmarking hashmaps in C++ seemed to be happy with high load facters and hence implied long walks

[20:10] <nwc10> thanks for digging into this.

[20:10] <nwc10> I was (somewhat) "it compiles - ship it"

[20:11] <nwc10> (this is not true. It compiles and passes all the pesky tests. Finally.

[20:11] <nwc10> "maybe ship it?"

[20:11] <lizmat> it has been shipped and the sirens are whailing :-)

[20:12] <nwc10> rah. I have found my daft $ork bug. (It did not get shipped yet because it did not pass the "golden result" test)

[20:38] <timotimo> just put my second monitor on my desk again

[20:38] <timotimo> now to go crawling under the table and do some cabling

[20:41] *** zakharyas left
[20:47] *** brrt joined
[20:52] <lizmat> And another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/08/31/2020-35-election-candidacies/

[21:00] <timotimo> my computer froze up :<

[21:15] *** AlexDaniel left
[21:16] *** AlexDaniel joined
[21:17] *** AlexDaniel left
[21:17] *** AlexDaniel joined
[21:20] *** AlexDaniel left
[21:29] <jnthn> lizmat++ # weekly

[21:34] <timotimo> nwc10: oh the distance-from-optimal byte doesn't have any of the hash bits in it yet? neato. that'll be cool.

[21:40] <brrt> lizmat++

[21:45] <timotimo> with round-robin hashing entries in the hash will move, does that mean the little optimizations we've recently put into spesh/jit have to be tossed?

[21:46] <brrt> what little optimizations did you put

[21:52] <timotimo> we did spesh-time lookups of hash entries for some things

[21:52] <brrt> ah

[21:52] <timotimo> under the assumption that some things don't move

[21:52] <brrt> hmm

[21:52] <brrt> then we need to guard against deletions I guess

[21:53] <brrt> and insertions, because insertions would mess with that, too

[22:02] <timotimo> not sure if we're actually pointing at a hash slot per se

[22:02] <timotimo> since it would also have to have been safe against insertions already

[22:02] <brrt> indeed

[22:03] <timotimo> there was a lot of discussion when it was developed, and i didn't pay nearly enough attention to it

[22:05] <[Coke]> https://github.com/MoarVM/MoarVM/issues/1289 - should this be moved to rakudo/rakudo repo?

[22:12] *** brrt left
[22:28] <[Coke]> anyone mind if I close https://github.com/MoarVM/MoarVM/issues/995 for lack of response?

[22:29] <Geth> Â¦ MoarVM: coke self-assigned Error!!! https://github.com/MoarVM/MoarVM/issues/995

[22:30] <Geth> Â¦ MoarVM: coke self-assigned closing of old issues 41, 54, 60, 66, maybe 67 ? https://github.com/MoarVM/MoarVM/issues/681

[22:46] <[Coke]> seen gerd

[22:46] <[Coke]> .seen gerd

[22:46] <tellable6> [Coke], I haven't seen gerd around, did you mean guer?

[23:17] *** Altai-man left
