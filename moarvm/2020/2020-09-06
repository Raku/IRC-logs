[01:21] *** leont left
[03:05] *** releasable6 left
[03:05] *** quotable6 left
[03:05] *** benchable6 left
[03:05] *** coverable6 left
[03:05] *** tellable6 left
[03:05] *** shareable6 left
[03:05] *** bisectable6 left
[03:05] *** bloatable6 left
[03:05] *** greppable6 left
[03:05] *** sourceable6 left
[03:05] *** committable6 left
[03:05] *** squashable6 left
[03:05] *** evalable6 left
[03:05] *** nativecallable6 left
[03:05] *** reportable6 left
[03:05] *** statisfiable6 left
[03:05] *** unicodable6 left
[03:05] *** notable6 left
[03:05] *** linkable6 left
[03:06] *** committable6 joined
[03:06] *** unicodable6 joined
[03:06] *** reportable6 joined
[03:06] *** evalable6 joined
[03:06] *** sourceable6 joined
[03:06] *** quotable6 joined
[03:06] *** squashable6 joined
[03:07] *** coverable6 joined
[03:07] *** shareable6 joined
[03:07] *** greppable6 joined
[03:08] *** benchable6 joined
[03:08] *** tellable6 joined
[03:08] *** linkable6 joined
[03:08] *** notable6 joined
[03:08] *** statisfiable6 joined
[03:08] *** bloatable6 joined
[03:08] *** bisectable6 joined
[03:08] *** releasable6 joined
[03:09] *** nativecallable6 joined
[04:41] *** MasterDuke left
[06:24] *** domidumont joined
[07:03] <nwc10> good (I hope) *, #moarvm 

[07:04] <nwc10> nine: where did you say that P6Opaque memory layout is figured out these days? It's NQP, not C, but where?

[07:04] <nwc10> in that, if I do this:

[07:04] <nwc10> do this in src/6model/reprs/P6opaque.c

[07:04] <nwc10>          if (repr_data->flattened_stables[i] == NULL) {

[07:04] <nwc10> +            align_to(&cur_offset, ALIGNOF(void *));

[07:04] <nwc10>              /* Store position. */

[07:04] <nwc10> which I felt should work, then everything goes wrong (SEGV due to a crazy sc index when reading the stage0 files)

[07:05] <nwc10> ie, what other thing "knows" about storage layouts, and prevents me from changing then in deserialize_repr_data?

[07:20] *** domidumont left
[08:00] *** sena_kun joined
[08:30] *** MasterDuke joined
[08:36] <nine> nwc10: no, memory layout is still in C. Bytecode writing is in NQP

[08:37] <nwc10> aha

[08:38] <nwc10> About 3 minutes ago I spotted that I need to also add align_to(&cur_offset, ALIGNOF(MVMObject *)); into deserialize_stable_size() to be consistent

[08:38] <nwc10> but then everyting just gets wierder

[08:39] <nwc10> oh no, it's back to the same crazy sc_idx

[09:28] <MasterDuke> so, to make MVMSpeshCandidate an MVMCollectable via adding a REPR. rename the existing MVMSpeshCandidate (https://github.com/MoarVM/MoarVM/blob/master/src/spesh/candidate.h#L2) to MVMSpeshCandidateBody and create a new MVMSpeshCandidate that's just an MVMObject header and the MVMSpeshCandidateBody a la MVMSpeshLog

[09:28] <MasterDuke> (https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/MVMSpeshLog.h#L113)?

[09:32] <nine> MasterDuke: yes

[09:36] <MasterDuke> ok. then (almost) everywhere that works with MVMSpeshCandidates change to get and use the MVMSpeshCandidateBody instead?

[09:37] <MasterDuke> those things seem relatively straightforward

[09:38] <MasterDuke> what i'm not sure is about when to be using MVM_repr_alloc_init

[09:42] <nine> You use it instead of MVM_malloc(sizeof(MVMSpeshCandidate)) or MVM_calloc(1, sizeof(MVMSpeshCandidate))

[09:50] <MasterDuke> ok, i'd sort of suspected that, glad i was at least near the right track

[09:57] <MasterDuke> hm. does it need an STable? at first i thought it wouldn't, since it's an implementation detail and not a HLL thing, but MVMSpeshLog has one

[10:05] <nine> MasterDuke: you can look at commit c61236f96e where I turned MVMSpeshPluginState into a collectable

[10:05] <linkable6> (2019-09-28) https://github.com/MoarVM/MoarVM/commit/c61236f96e Fix access to freed memory in resolve_using_guards

[10:07] <nine> Plus commit bb239a91df14218f9fd1ab8130af410f087e8a16 I guess

[10:07] <linkable6> (2019-10-24) https://github.com/MoarVM/MoarVM/commit/bb239a91df Fix MVMSpeshPluginState type defined twice

[10:18] *** leont joined
[10:26] *** harrow left
[10:28] *** camelia left
[10:28] *** Geth left
[10:28] *** Geth joined
[10:29] *** camelia joined
[10:32] *** harrow joined
[11:10] <MasterDuke> nine++ thanks, looks helpful

[11:18] *** Altai-man joined
[11:20] *** sena_kun left
[12:20] *** lizmat_ joined
[12:23] *** lizmat left
[12:30] *** lizmat_ is now known as lizmat

[12:50] *** raku-bridge2 joined
[12:50] *** raku-bridge left
[12:50] *** raku-bridge2 left
[12:50] *** raku-bridge2 joined
[12:51] *** raku-bridge2 is now known as raku-bridge

[14:38] *** zakharyas joined
[15:19] *** sena_kun joined
[15:21] *** Altai-man left
[16:28] <MasterDuke> i assume i MVM_gc_worklist_add anything in the MVMSpeshCandidateBody that is itself an MVMCollectable?

[16:30] <timotimo> well, an MVMCollectable *

[16:30] <timotimo> but yeah

[16:31] <timotimo> you do that in the repr's gc_mark, and optionally you can have an "explain" function that gives names to the pointers for use in a heap snapshot

[16:32] <MasterDuke> and i can do that by looking to see if the MVMFoo struct has `MVMObject common;` as it's first member?

[16:36] <MasterDuke> for `MVMCollectable **spesh_slots;` i would need to mark each element of the array?

[16:41] <timotimo> there's already code that marks spesh slots, that will also want removed

[16:46] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/MVMStaticFrameSpesh.c#L42 ?

[16:47] <MasterDuke> actually, pretty much this whole block will be removed, right? https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/MVMStaticFrameSpesh.c#L30-L46

[16:48] <MasterDuke> and the code in the gc_free

[16:54] <timotimo> ah, yeah, that looks about right

[16:55] <timotimo> candidates become collectables, so marking everything in these objects is now the job of the new repr

[16:55] <timotimo> i'm not sure if the spesh stats and such are still part of the candidate, i would assume so

[17:07] <MasterDuke> i wasn't planning to move anything

[17:08] <timotimo> that's fine

[17:08] <timotimo> i think the stats are per-staticframe rather than per-candidate

[17:09] <MasterDuke> hm. does the whole block get removed? or just changed to call MVM_gc_worklist_add for each candidate?

[17:09] <MasterDuke> i.e., MVM_gc_worklist_add(tc, worklist, &body->spesh_candidates[i])

[17:09] <timotimo> there'd still be the array of pointers to spesh candidates, so they would be added

[17:09] <timotimo> yeah just like that

[17:11] <MasterDuke> but then everything related to body->spesh_candidates in gc_free can be removed?

[17:11] <timotimo> i believe so, yeah

[17:17] <MasterDuke> am i correct in thinking that only the spesh_slots are MVMCollectable here https://github.com/MoarVM/MoarVM/blob/master/src/spesh/candidate.h ?

[17:18] <timotimo> quite possibly, yeah

[17:21] <MasterDuke> doh. i just needed to look at https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/MVMStaticFrameSpesh.c#L30-L46 and see what it was marking...

[17:22] <timotimo> oh, haha

[17:55] *** sena_kun left
[18:20] *** Kaiepi left
[18:20] *** Kaiepi joined
[18:45] *** sena_kun joined
[19:18] *** Altai-man joined
[19:21] *** sena_kun left
[19:36] *** Altai-man left
[19:47] <Geth> Â¦ MoarVM/P6opaque-debug: 1161bc4e0f | (Nicholas Clark)++ | src/6model/reprs/P6opaque.c

[19:47] <Geth> Â¦ MoarVM/P6opaque-debug: Add an option MVM_P6OPAQUE_DEBUG to immediately use body.replace.

[19:47] <Geth> Â¦ MoarVM/P6opaque-debug: 

[19:47] <Geth> Â¦ MoarVM/P6opaque-debug: This stress-tests all the code that handles P6opaque objects.

[19:47] <Geth> Â¦ MoarVM/P6opaque-debug: review: https://github.com/MoarVM/MoarVM/commit/1161bc4e0f

[19:48] <nwc10> If you want some fun, enablign that breaks spesh.

[19:48] <nwc10> with spesh diabled all NQP tests pass

[19:48] <nwc10> but Rakudo setting compilation hits a NULL pointer

[19:48] <nwc10> I'm trying to figure all of this out

[19:48] <nwc10> I am assuming that these are all bugs.

[19:49] <nwc10> but I suspect that I'm going to bed "soon" without any real progress

[19:49] *** brrt joined
[19:50] <nwc10> your nice simple test case is: ../MoarVM/moar --libpath=src/vm/moar/stage0/ src/vm/moar/stage0/nqp.moarvm  -e0

[19:51] <brrt> \o

[19:51] <nwc10> o/

[19:52] <nine> Mmmh 0xFE good value for marking unused memory

[19:53] <nwc10> it was good enough to SEGV

[19:54] <nwc10> AND

[19:54] <nwc10> even better

[19:54] <nwc10> it's good enough to make ASAN very excited on my other branch

[19:54] <nwc10> without needing to fix the actual bugs in spesh

[19:56] <nwc10> (again, my test case there is -e0)

[19:56] <nine> In any case an excellent test :)

[19:56] <nwc10> indeed. I don't have to build nqp. It's much faster that way.

[20:03] <nine> quite explody indeed

[20:05] <nwc10> having now found the static function spesh()

[20:05] <nwc10> (while looking for somethign elsE)

[20:05] <nwc10> I'm going to assume that the spesh bug is in there, because it fails to check for body.replaced

[20:05] <nwc10> but I have not checked this.

[20:06] <nwc10> I'm more interested in the other bug (related to sparc64 alignment)

[20:06] <MasterDuke> src/6model/reprs/MVMSpeshCandidate.h:39:22: error: field â€˜deopt_peaâ€™ has incomplete type   39 |     MVMSpeshPEADeopt deopt_pea;

[20:07] <MasterDuke> MVMSpeshPEADeopt is declared in src/types.h though...

[20:19] <nine> nwc10: turns out, MoarVM is a bit smarter than we give it credit for. It knows that an object can only have a body.replaced if the type is a mixin type. So to be not as explody, you need to set st->is_mixin_type in P6opaque's initialize

[20:20] <nwc10> aha.

[20:20] <nwc10> I shall test that tomorrow

[20:20] <nine> or probably in type_object_for

[20:20] <nwc10> I have my other bug turned into an assertion failure that makes sense

[20:20] <nine> since that is where we allocate the STable

[20:21] <nine> Oh, it gets more complicated, since that field is serialized, meaning it's in the stage0 files as well

[20:23] <nine> So better just override it in the two places in spesh() where it's read

[20:25] <nwc10> OK, thanks.

[20:25] <nwc10> I have found my (actual other) bug

[20:26] <nwc10> and I have just realised that I really need to go to bed as tomorrow is school, which means the whole house has to get up early

[20:28] <nine> NQP build and make test succeed with MVM_SPESH_BLOCKING

[20:31] <nine> But rakudo's build explodes with MVM_SPESH_BLOCKING!

[20:43] <timotimo> nwc10: i do believe we rely on p6opaque not being replaced immediately after creation

[20:43] <timotimo> in spesh, that is

[20:44] <timotimo> oh, nine already found it

[20:50] *** zakharyas left
[20:55] *** brrt left
