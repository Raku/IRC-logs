[00:45] *** sena_kun left
[01:01] *** sena_kun joined
[01:01] *** lucasb left
[02:34] *** unicodable6 left
[02:34] *** bloatable6 left
[02:34] *** committable6 left
[02:34] *** sourceable6 left
[02:34] *** squashable6 left
[02:34] *** statisfiable6 left
[02:34] *** reportable6 left
[02:34] *** greppable6 left
[02:34] *** releasable6 left
[02:34] *** notable6 left
[02:34] *** coverable6 left
[02:34] *** nativecallable6 left
[02:34] *** benchable6 left
[02:34] *** quotable6 left
[02:34] *** bisectable6 left
[02:34] *** shareable6 left
[02:35] *** bisectable6 joined
[02:35] *** notable6 joined
[02:35] *** greppable6 joined
[02:35] *** squashable6 joined
[02:36] *** benchable6 joined
[02:36] *** reportable6 joined
[02:36] *** shareable6 joined
[02:36] *** quotable6 joined
[02:36] *** statisfiable6 joined
[02:36] *** coverable6 joined
[02:36] *** nativecallable6 joined
[02:37] *** committable6 joined
[02:37] *** sourceable6 joined
[02:37] *** releasable6 joined
[02:37] *** bloatable6 joined
[02:37] *** unicodable6 joined
[02:45] *** sena_kun left
[02:59] *** sena_kun joined
[04:44] *** sena_kun left
[05:00] *** sena_kun joined
[06:45] *** sena_kun left
[06:59] *** sena_kun joined
[08:00] *** domidumont joined
[08:01] *** domidumont left
[08:45] *** sena_kun left
[09:01] *** sena_kun joined
[10:44] *** sena_kun left
[10:58] *** sena_kun joined
[12:45] *** sena_kun left
[12:58] *** sena_kun joined
[13:48] *** domidumont joined
[14:06] *** domidumont left
[14:45] *** sena_kun left
[14:59] *** sena_kun joined
[15:01] *** lucasb joined
[16:29] *** Kaiepi left
[16:30] *** Kaiepi joined
[16:42] <MasterDuke> wow, just `perl6 -e ''` calls MVM_string_latin1_decode 41008 times, which means at least that many mallocs

[16:46] *** sena_kun left
[16:50] <MasterDuke> total of 308760 bytes

[16:59] *** sena_kun joined
[17:09] <MasterDuke> a bunch of the strings read via MVM_serialization_read_str() (when doing `perl6 -e ''`) are repeated up to 5k times. are they de-duplicated at all when serialized?

[17:10] *** domidumont joined
[17:11] <MasterDuke> zstd compress ./blib/CORE.c.setting.moarvm from 15m to 3.2m. think it would be faster to compress it with zstd and decompress when reading?

[17:15] <MasterDuke> e.g., 5465 instances of '#', 2499 instances of 'Raku'

[17:16] *** brrt joined
[17:52] *** brrt left
[18:40] <japhb> MasterDuke: IIRC MoarVM files were (at least originally) intended to be mmap-friendly.  I guess part of your question boils down to the extent to which that is still true and how much of the file gets mapped in anyway.

[18:45] *** sena_kun left
[19:00] *** sena_kun joined
[20:10] *** evalable6 left
[20:13] *** evalable6 joined
[20:17] *** domidumont left
[20:45] *** sena_kun left
[20:57] <timotimo> strings are deduplicated in serialization, and the string heap is also supposed to give the same string object back each time one is accessed, so it could be interesting to find out what exactly is happening there

[20:58] <timotimo> i once put in a little bit of time trying to have strings actually use the memory inside the string heap, but it was a bit too fiddly i think?

[20:58] *** sena_kun joined
[21:01] <timotimo> MVM_serialization_read_str will grab the string from the string heap if it's already there, so any latin1_decode should be unique strings, though we don't dedupe strings across multiple comp units

[21:03] <timotimo> ho-hum. i wonder how often a frame's cuuid is actually accessed

[21:04] <timotimo> static frame's cuuid, i should say

[21:08] *** Kaiepi left
[21:08] *** Kaiepi joined
[21:11] <timotimo> perhaps the name is also only ever needed when a stack trace is printed

[21:18] <timotimo> it'll be a drop in the ocean at best, of course

[21:23] *** zakharyas joined
[21:39] *** Kaiepi left
[21:40] *** Kaiepi joined
[21:54] *** Ven`` joined
[22:46] *** sena_kun left
[22:47] *** zakharyas left
[22:59] *** sena_kun joined
[23:02] *** Ven`` left
[23:02] *** Ven``_ joined
[23:04] *** Ven``_ left
