[01:06] *** konvertex left
[02:58] *** pamplemousse left
[03:13] *** pamplemousse joined
[03:17] *** pamplemousse left
[06:41] *** farcas1982regreg left
[07:34] *** zakharyas joined
[08:05] *** MasterDuke joined
[08:06] *** Altai-man_ joined
[08:17] *** sena_kun joined
[08:19] *** Altai-man_ left
[10:16] *** Altai-man_ joined
[10:19] *** sena_kun left
[10:31] *** farcas1982regreg joined
[11:00] *** konvertex joined
[12:17] *** sena_kun joined
[12:19] *** Altai-man_ left
[12:36] *** pamplemousse joined
[13:11] <timotimo> i wonder how common hllizing is in common workloads, and if we should see if hllize could be split into a bunch of ops that could partially be simplified or specialized

[13:12] <timotimo> like, if hllizing a BOOTArray into an Array means craeting an Array and binding a clone into its $!reified, the escape analysis could conceivably work with that

[14:11] *** pamplemousse left
[14:12] *** pamplemousse joined
[14:16] *** Altai-man_ joined
[14:17] *** pamplemousse left
[14:19] *** sena_kun left
[14:43] *** pamplemousse joined
[15:02] *** pamplemousse left
[15:03] *** pamplemousse joined
[15:07] *** pamplemousse left
[15:29] <MasterDuke> timotimo: more than https://github.com/MoarVM/MoarVM/blob/master/src/spesh/optimize.c#L565-L579 does?

[15:31] <timotimo> yes

[15:31] <timotimo> that's for when hllize has to do nothing at all

[15:32] <nine> MasterDuke: Escape analysis could detect that the HLL array does not escape and only it's $!reified is really used. So we could forgoe allocating that Array in the first place

[15:32] <nine> But for that it must know that hllize will just allocate an Array and bind into it's $!reified

[15:33] *** zakharyas left
[15:35] *** pamplemousse joined
[15:41] <MasterDuke> timotimo: https://gist.github.com/MasterDuke17/3e02eef0ef51985cb61c953222346d78 when compiling CORE.c

[15:43] <timotimo> does it actually invoke these frames?

[15:44] <timotimo> int, num, str should be easy to spesh into equivalent bytecode

[15:46] <timotimo> src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[15:46] <timotimo> 3786:    'foreign_transform_array', -> $farray {

[15:46] <timotimo> 3791:    'foreign_transform_hash', -> $hash {

[15:46] <timotimo> 3796:    'foreign_transform_code', -> $code {

[15:46] <MasterDuke> how would i know? i just stuck fprintfs in https://github.com/MoarVM/MoarVM/blob/master/src/core/hll.c#L181-L267

[15:47] <timotimo> did you put them directly after the "case" lines?

[15:48] <timotimo> would be interesting to see a number for the if and the else branches respectively

[15:49] <MasterDuke> yeah

[15:49] <timotimo> we can probably turn the hllize - if we know the hll role and the hll's transformation functions at spesh time - into invokes, and have the rest of spesh continue the optimization into inlining

[15:53] <MasterDuke> gist updated

[15:54] <timotimo> mhm

[15:55] <timotimo> could be worth just special case hash here

[15:56] <MasterDuke> the current spesh optimization is for the more common case, right? "belongs to current HLL"

[15:56] <MasterDuke> *most

[15:56] <timotimo> yes

[15:56] <MasterDuke> but hash is right behind

[15:56] <timotimo> almost 50/50

[15:59] <timotimo> want to output the hll role for "belongs to current HLL"?

[16:00] <timotimo> perhaps also the null one at the top?

[16:03] *** sena_kun joined
[16:04] <MasterDuke> gist updated

[16:05] <MasterDuke> 0 is MVM_HLL_ROLE_NONE, 5 is MVM_HLL_ROLE_HASH

[16:05] *** Altai-man_ left
[16:06] <timotimo>    1814 obj HLL role is default

[16:06] <timotimo> should be easy to optimize, too

[16:06] <timotimo> if isnt already

[16:08] <MasterDuke> that's just another conditional || to https://github.com/MoarVM/MoarVM/blob/master/src/spesh/optimize.c#L572-L573 , right?

[16:10] <timotimo> oh, if it's HLL_ROLE_NONE, it outputs default, but also if it's in current HLL

[16:10] <timotimo> if it's default, what hll role value is it actually? is there anything other than the keys that are in the switch/case and _NONE?

[16:12] <timotimo> also, a run with SPESH_DISABLE could be interesting to compare how many hlls are successfully prevented by spesh already

[16:15] <MasterDuke> all defaults are 0

[16:15] <timotimo> ok, in that case the hllize optimization already gets those

[16:15] <timotimo> in theory

[16:16] <timotimo> all the calls that remain must be from non-speshed code, or code where the type wasn't known etc

[16:17] <MasterDuke> gist updated

[16:19] <timotimo> ok the success rate of hllize to nothing for role being 0 is not overwhelming

[16:20] <timotimo>    1814 obj HLL role is default   to      3739 obj HLL role is default, actually is 0

[16:20] <timotimo> not so bad, but rare in general

[16:22] <timotimo> cat has my hand again so typing is slooooow

[16:31] <MasterDuke> i've gotten lost. is there an easy addition to the current optimization?

[16:31] <timotimo> no, i think the one i was suggesting was basically already there

[17:14] *** farcas1982regreg left
[17:45] *** squashable6 left
[17:45] *** squashable6 joined
[18:03] *** zakharyas joined
[18:04] *** Altai-man_ joined
[18:07] *** sena_kun left
[19:40] *** MasterDuke left
[19:42] *** lucasb joined
[20:05] *** sena_kun joined
[20:07] *** Altai-man_ left
[20:38] *** zakharyas left
[21:50] *** sena_kun left
[21:59] *** Kaiepi left
[22:11] *** MasterDuke joined
[22:48] <Geth> Â¦ MoarVM: scovit++ created pull request #1285: Setup inlined CStruct assigned during construction

[22:48] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1285

