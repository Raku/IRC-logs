[00:04] *** leont left
[02:49] *** benchable6 left
[02:49] *** squashable6 left
[02:49] *** evalable6 left
[02:49] *** unicodable6 left
[02:49] *** quotable6 left
[02:49] *** bisectable6 left
[02:49] *** linkable6 left
[02:49] *** notable6 left
[02:49] *** statisfiable6 left
[02:49] *** nativecallable6 left
[02:49] *** sourceable6 left
[02:49] *** committable6 left
[02:49] *** coverable6 left
[02:49] *** shareable6 left
[02:49] *** tellable6 left
[02:49] *** releasable6 left
[02:49] *** greppable6 left
[02:49] *** bloatable6 left
[02:49] *** lucasb left
[02:49] *** releasable6 joined
[02:49] *** bloatable6 joined
[02:49] *** shareable6 joined
[02:49] *** bisectable6 joined
[02:49] *** unicodable6 joined
[02:50] *** linkable6 joined
[02:50] *** squashable6 joined
[02:50] *** sourceable6 joined
[02:50] *** coverable6 joined
[02:50] *** notable6 joined
[02:51] *** greppable6 joined
[02:51] *** committable6 joined
[02:51] *** statisfiable6 joined
[02:51] *** quotable6 joined
[02:51] *** benchable6 joined
[02:51] *** tellable6 joined
[02:51] *** evalable6 joined
[02:52] *** nativecallable6 joined
[04:01] *** vrurg left
[04:01] *** vrurg joined
[09:04] *** sena_kun joined
[10:40] *** leont joined
[10:56] <MasterDuke> nice, arch just updated their rr package to 5.4.0, i now have zen support

[12:10] *** Altai-man joined
[12:12] *** sena_kun left
[12:18] <nine> \o/

[13:33] *** leont left
[15:07] *** lucasb joined
[15:47] *** patrickb joined
[16:01] *** patrickb left
[16:11] *** sena_kun joined
[16:13] *** Altai-man left
[16:18] <nine> Oh boy.... serialization is done with gen2 default allocation, but none of the places that throw exceptions actually clear that flag. Not a big issue if the program exits soon anyway, but it is when you actually want to gracefully handle them.

[16:34] <MasterDuke> how many places to throw? easy to find at least?

[16:43] *** zakharyas joined
[16:47] <timotimo> possibly a lot of them

[16:47] <timotimo> but we already have a mechanism to clear out temporary roots when we're going back to the interpreter with an exception

[16:47] <timotimo> that could be a good place to do this

[16:53] <nine> A bunch...it's harder for the functions in sc.c, because it's not always clear that they are only used when the flag is set

[16:57] <nine> Yes, yes, yes!

[16:57] <MasterDuke> saved the cheerleader? saved the world?

[16:58] <nine> maybe this time for real :)

[16:58] * nine is off to get some exercise

[16:58] <timotimo> good luck

[17:01] <MasterDuke> timotimo: i've been rebasing my use_fsa_for_vmarray PR. my understanding is that using the fsa can prevent segfaults on concurrent access (though won't prevent e.g., (over|lost)writes). however, for that to be true, all reallocs and frees will have to be `*_at_safepoint`, correct?

[17:02] <timotimo> yeah, that's right

[17:03] <MasterDuke> k, thanks

[17:08] *** Geth_ joined
[17:10] *** Geth left
[17:18] *** MasterDuke left
[18:50] *** domidumont joined
[18:54] *** domidumont left
[19:16] <nwc10> nine: https://github.com/MoarVM/MoarVM/pull/1374 fixes an ugly thing in the serialisation code, but I doubt that you (or anyone) is actually tripping up over it

[19:16] *** MasterDuke joined
[19:20] *** mtj_ left
[20:10] *** Altai-man joined
[20:12] *** sena_kun left
[21:08] <MasterDuke> if a string has 0 graphs, could it have >0 codepoints?

[21:10] <jnthn> No

[21:12] <MasterDuke> thanks. then if s->body.num_graphs == 0 here https://github.com/MoarVM/MoarVM/blob/master/src/strings/normalize.c#L154 is there a good way to bail out early?

[21:14] <jnthn> Not sure about bail out in so far as the bit of setup is at the end

[21:14] <jnthn> But you could wrap a lot of the stuff there into an `if`

[21:14] <jnthn> oh actually

[21:15] <jnthn> The array memory is zeroed anyway I guess so maybe you do get away wiht it

[21:15] <MasterDuke> k

[21:16] <MasterDuke> btw, glad to see you're back, hope the time off was good

[21:18] <jnthn> Will be not diving into things too deep too quickly, but yeah, I'm feeling at least a bit better than I was.

[21:18] * lizmat is very glad to hear that

[21:19] * MasterDuke slowly hides https://github.com/MoarVM/MoarVM/pull/1344 behind my back

[21:19] <jnthn> Oh goodness, I already spent at least half a day debugging that without luck...

[21:20] <MasterDuke> heh, yeah...

[21:20] <jnthn> No doubt you've spent much longer

[21:20] <MasterDuke> and yeah

[21:23] <MasterDuke> if you want something a bit lighter, https://github.com/rakudo/rakudo/pull/4026 is right up your alley

[21:26] <MasterDuke> but feel free to punt, i just happen to be looking through my various open PRs seeing if they need any attention

[21:33] *** zakharyas left
[21:34] <jnthn> MasterDuke: Ah, yes, can look...I guess that will want stealing into rakuast, except that there we just analyze and produce good QAST in the first place, rather than produce it and then optimize...well, in theory :)

[21:34] <jnthn> afk for a bit

[21:35] <MasterDuke> cool, thanks again

[21:37] <MasterDuke> for anybody. i'm on my use_fsa_for_vmarray branch and i'm seeing an invalid free during a spectest (t/spec/S32-io/io-cathandle.rakudo.moar). valgrind says allocated by MVM_fixed_size_alloc, freed by MVM_fixed_size_safepoint (after some gc stuff)

[21:39] * MasterDuke wonders if this is the sort of thing i should be using my newly available rr for...

[21:41] <MasterDuke> or will that still be annoying because of the gc?

[21:42] <nine> rr is your new best friend...trust me on that

[21:52] <timotimo> MasterDuke: have you checked if putting in very special objects into the given/when will break? like derived types with custom Numeric implementations or whatever?

[21:52] <MasterDuke> nope

[21:53] <timotimo> may be interesting, and also for new tests to be added to roast

[22:01] <MasterDuke> m: class MyInt is Int { method Numeric { self + 1 } }; my MyInt $a .= new(3); given $a { when 3 { say "three" }; when 4 { say "four" }; default { say "default" } }   # something like this?

[22:01] <camelia> rakudo-moar 85847d2f1: OUTPUT: «four␤»

[22:03] <MasterDuke> m: class MyInt is Int { method Numeric { "MyInt == " ~ (self + 1).Str  } }; my MyInt $a .= new(3); given $a { when 3 { say "three" }; when 4 { say "four" }; default { say "default" } }     # this give 'default' on my branch

[22:03] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5MyInt == 4' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[22:25] *** Altai-man left
[22:31] <timotimo> tbh returning something that does not do Numeric from the Numeric method isn't a ting you should do

[22:34] <MasterDuke> well yeah, so should it die? or just not match like with my PR?

[22:35] <MasterDuke> the first example with just `self + 1` works just fine on both master and my branch

[22:36] <timotimo> what about strings with a Numeric method?

[22:40] <MasterDuke> m: class MyStr is Str { method Numeric { self.chars } }; my MyStr $a .= new(:value("abc")); given $a { when 3 { say "three" }; when 4 { say "four" }; default { say "default" } }

[22:40] <camelia> rakudo-moar 85847d2f1: OUTPUT: «three␤»

[22:40] <MasterDuke> same on my branch

[22:43] <timotimo> OK, that's good at least

[22:44] <MasterDuke> m: my Int $a .= new(3); my Str $b .= new("b")   #  is the difference deliberate?

[22:44] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Default constructor for 'Str' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[22:45] <timotimo> probably easier to apply a role with "but"

[22:45] <MasterDuke> ?

[22:45] <timotimo> i think Int.new is relatively new? it came with the feature to allow getting a new object with the same value as another?

[22:46] <MasterDuke> right

[22:46] <timotimo> committable6: say Int.new(5)

[22:46] <committable6> timotimo, Seems like you forgot to specify a revision (will use “v6.c” instead of “say”)

[22:46] <MasterDuke> should Str get the same?

[22:46] <committable6> timotimo, ¦v6.c (48 commits): «5␤»

[22:46] <timotimo> above my pay grade :) :)

[22:46] <timotimo> oh, hm, okay

[22:46] <MasterDuke> committable6: say Str.new("a")

[22:46] <committable6> MasterDuke, Seems like you forgot to specify a revision (will use “v6.c” instead of “say”)

[22:47] <committable6> MasterDuke, ¦v6.c (48 commits): «Default constructor for 'Str' only takes named arguments␤  in block <unit> at /tmp/p0FydDL9ql line 1␤␤ «exit code = 1»»

[22:47] <MasterDuke> m: my Num $n .= new(1e0)

[22:47] <camelia> rakudo-moar 85847d2f1: ( no output )

[22:48] <MasterDuke> m: my Rat $r .= new(1, 2); my Rat $s .= new(1/2)

[22:48] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Type check failed in binding to parameter 'nu'; expected Int but got Rat (0.5)␤  in block <unit> at <tmp> line 1␤␤»

[22:54] <MasterDuke> anyway, off to sleep. later...

[22:58] <timotimo> good night! thanks for your hard work :)

[23:00] <timotimo> i'll have to think on whether the one thing that behaves differently would be a problem, but it's kind of unspecified already, and when you're Doing It Wrong already ... hm.

