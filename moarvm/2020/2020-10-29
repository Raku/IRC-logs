[01:04] <[Coke]> nine++

[01:59] *** SmokeMachine left
[02:01] *** SmokeMachine joined
[04:22] *** Kaiepi joined
[05:38] *** MasterDuke left
[06:30] *** Kaiepi left
[06:31] *** Kaiepi joined
[06:33] *** Kaiepi left
[06:38] *** Util left
[06:50] *** Kaiepi joined
[09:59] *** sourceable6 left
[09:59] *** coverable6 left
[09:59] *** benchable6 left
[09:59] *** nativecallable6 left
[09:59] *** committable6 left
[09:59] *** evalable6 left
[09:59] *** tellable6 left
[09:59] *** unicodable6 left
[09:59] *** statisfiable6 left
[09:59] *** shareable6 left
[09:59] *** quotable6 left
[09:59] *** releasable6 left
[09:59] *** squashable6 left
[09:59] *** bisectable6 left
[09:59] *** linkable6 left
[09:59] *** bloatable6 left
[09:59] *** greppable6 left
[09:59] *** notable6 left
[09:59] *** linkable6 joined
[10:00] *** bisectable6 joined
[10:00] *** releasable6 joined
[10:00] *** tellable6 joined
[10:00] *** bloatable6 joined
[10:00] *** squashable6 joined
[10:01] *** quotable6 joined
[10:01] *** coverable6 joined
[10:01] *** notable6 joined
[10:02] *** greppable6 joined
[10:02] *** unicodable6 joined
[10:02] *** evalable6 joined
[10:02] *** benchable6 joined
[10:02] *** committable6 joined
[10:02] *** sourceable6 joined
[10:02] *** nativecallable6 joined
[10:02] *** shareable6 joined
[10:02] *** statisfiable6 joined
[10:04] <nwc10> good *able6, #moarvm

[13:21] *** vrurg left
[13:26] *** vrurg joined
[13:50] *** domidumont joined
[14:12] <[Coke]> any volunteers to document the *invoke* ops that nqp exposes from MoarVM?

[14:13] <[Coke]> (there are 9 with 'native' in the opcode name)

[14:13] <[Coke]> if someone wrote up a gist, I'd be happy to reformat and get into the docs file.

[14:16] <[Coke]> buildnativecall initnativecall nativecall nativecallcast nativecallglobal nativecallinvoke nativecallrefresh nativecallsizeof nativeinvoke

[14:17] <[Coke]> (this is technically an nqp issue, but many opcodes are just passthrough and moarvm is most likely to have the experts to discuss)

[15:02] *** lucasb joined
[15:04] *** vrurg left
[15:27] *** vrurg joined
[15:53] <[Coke]> (there's also some osr & spesh opcodes that need docs)

[15:55] <[Coke]> looks like osrpoint is a direct invocation of MVM_spesh_osr_poll_for_result

[15:55] <[Coke]> could someone give me a sentence on that for nqp users?

[15:55] <[Coke]> (and, should it be considered Internal?)

[15:56] <[Coke]> (looks like it's only used in nqp loop body generation, not in rakudo

[16:28] <timotimo> no idea how moar would react if someone just put osrpoints in random spots

[16:29] <[Coke]> nqp: nqp::osrpoint; nqp::say('eek');

[16:29] <camelia> nqp-moarvm: OUTPUT: ¬´No registered operation handler for 'osrpoint'‚ê§   at gen/moar/stage2/QAST.nqp:1504  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/QAST.moarvm:compile_op)‚ê§ from gen/moar/stage2/QAST.nqp:6174  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/QAST.moarvm:compile_nod‚Ä¶¬ª

[16:29] <[Coke]> oh.

[16:29] <[Coke]> well, that simplifies the docs. :)

[16:30] <[Coke]> must have missed that one the last culling.

[16:31] <[Coke]> timotimo++

[16:34] <timotimo> nativecallglobal gets you the value of "a symbol" in the ldsym and such sense; when you load a library that has some global variables, this is how you get at 'em

[16:35] <timotimo> nativecallsizeof gives you the number of bytes something's size would be, for differestly sized integers, nums, but also structs and such

[16:36] <timotimo> nativecallrefresh will read the values from the objects over on the C side and recreates the objects on the p6 side, that's how things like pointers from one struct to another would work i think?

[16:37] <timotimo> nativecallcast takes a native object of one type and reinterprets it as another type, like turning a Pointer[AStruct] to a Pointer[AnotherStruct]

[17:53] <nine> buildnativecall connects a routine with a native function. The routine must have an attribute with NativeCall REPR as a box target. buildnativecall needs the name of the native library, the name of the symbol representing the native function, the calling convention, argument information and a hash with type information for the return type. It returns 1 if the call can be JITed and 0 otherwise.

[17:58] <nine> The call convention will usually be an empty string. arg_info is an array containing a hash for each parameter. The hashes contain the typeobj, rw, type (type code) and optionally a free_str flag for Str parameters and a similar structure in callback_args for callback parameters for Callable parameters

[17:59] <nine> The return_hash has similar keys with typeobj, type and free_str and a couple of fields that aren't actually related to the return type, but are there because it was the easiest place to extend: they are entry_point, resolve_lib_name and resolve_lib_name_arg.

[18:01] <nine> resolve_lib_name is optional and contains a code object. This gets called with resolve_lib_name_arg to resolve this name to the actual name or path of the library to be loaded. This is used for relocatability of repositories and native libraries they contain (it keeps the absolute paths out of precomp files)

[18:05] *** domidumont left
[18:06] <nine> nativecall is the most high level op (actually just sugar) for actually calling native code. It takes a return type, the HLL sub itself and an array containing the arguments and returns the result.

[18:07] <nine> nativecallinvoke is the corresponding low level ops with a similar interface. The difference is mostly that it needs deconted values in the argument array.

[18:16] <nine> nativeinvoke must only be used for call sites where buildnativecall returned 1 (JITable). It works much more like a standard invoke op in that it expects arguments in the arg buffer (via prepargs/arg_[inso])

[19:35] *** vesper11 left
[20:15] <samcv> sorry took a while to handle it. But reviewed and commented on thundergnat's MoarVM, Rakudo, roast PR for Unicode 13

[20:18] <samcv> looks like a mostly uneventful update aside from a new script and CJK ideograph extension. though thundergnat mentioned in his Rakudo PR about grapheme changes, so need clarification on that. I'm guessing it's just some characters changed their Grapheme cluster break or other properties, and no logical changes to how graphemes are segmented

[21:01] <[Coke]> timotimo++ nine++

[21:01] <[Coke]> I'll steal those and put them into doc form. Thanks!

[21:02] <[Coke]> samcv++ review

[21:14] *** vesper11 joined
[21:35] *** vesper joined
[21:36] *** vesper11 left
[21:40] <Geth> ¬¶ MoarVM/debugserver_invoke_code_support: de38edbb4c | (Timo Paulssen)++ | 2 files

[21:40] <Geth> ¬¶ MoarVM/debugserver_invoke_code_support: debugserver: Implement parsing "arguments" array for invoke

[21:40] <Geth> ¬¶ MoarVM/debugserver_invoke_code_support: 

[21:40] <Geth> ¬¶ MoarVM/debugserver_invoke_code_support: string arguments and named arguments are currently NYI, and

[21:40] <Geth> ¬¶ MoarVM/debugserver_invoke_code_support: the invoke command only does a few sanity checks before aborting.

[21:40] <Geth> ¬¶ MoarVM/debugserver_invoke_code_support: review: https://github.com/MoarVM/MoarVM/commit/de38edbb4c

[22:19] <[Coke]> nine,timotimo: thank you, about to push a doc patch. Any notes for 'initnativecall' or 'nativeinvoke' (moar only)

[22:19] <[Coke]> (er, former is all 3, latter is moar only)

[22:20] <[Coke]> ... shit. I meant to ++ you in the commti!

[22:20] <[Coke]> nine++ timotimo++

