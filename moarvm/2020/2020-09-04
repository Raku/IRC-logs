[01:18] *** Kaeipi joined
[01:20] *** Kaeipi left
[01:21] *** Kaeipi joined
[01:22] *** Merfont joined
[01:22] *** Kaeipi left
[01:22] *** Kaiepi left
[01:22] *** Merfont left
[01:36] *** lucasb left
[03:26] *** nativecallable6 left
[03:26] *** sourceable6 left
[03:26] *** bisectable6 left
[03:26] *** greppable6 left
[03:26] *** reportable6 left
[03:26] *** benchable6 left
[03:26] *** releasable6 left
[03:26] *** statisfiable6 left
[03:26] *** squashable6 left
[03:26] *** notable6 left
[03:26] *** tellable6 left
[03:26] *** coverable6 left
[03:26] *** quotable6 left
[03:26] *** bloatable6 left
[03:26] *** committable6 left
[03:26] *** shareable6 left
[03:26] *** unicodable6 left
[03:26] *** evalable6 left
[03:26] *** linkable6 left
[03:26] *** reportable6 joined
[03:26] *** evalable6 joined
[03:26] *** linkable6 joined
[03:26] *** coverable6 joined
[03:26] *** bisectable6 joined
[03:27] *** nativecallable6 joined
[03:27] *** shareable6 joined
[03:28] *** unicodable6 joined
[03:28] *** greppable6 joined
[03:28] *** squashable6 joined
[03:28] *** nwc10 left
[03:28] *** committable6 joined
[03:28] *** quotable6 joined
[03:28] *** benchable6 joined
[03:28] *** tellable6 joined
[03:28] *** sourceable6 joined
[03:28] *** releasable6 joined
[03:28] *** notable6 joined
[03:29] *** statisfiable6 joined
[03:29] *** bloatable6 joined
[03:29] *** nwc10 joined
[05:23] *** Kaiepi joined
[07:13] <nwc10> good *, #moarvm 

[08:05] *** domidumont joined
[08:09] *** brrt joined
[08:11] <brrt> \o

[08:12] <nwc10> o/

[08:16] *** MasterDuke joined
[08:21] <nine> \o/

[08:43] *** Altai-man joined
[08:51] *** leont joined
[09:12] <jnthn> morning o/

[09:12] <brrt> \o

[09:14] *** MasterDuke left
[09:15] <timotimo> mohrning

[09:22] * nwc10 is still working through that long page about the webkit JIT.

[09:23] <timotimo> it's really really long

[09:24] <nwc10> But so far the "money quote" was that they discovered that the cost of OSR from a failed specialisation was sufficiently high that they should actually only do them if the stats collector estimates that the probabily of success is 1.0

[09:25] <timotimo> i already found a few bits interesting: making diamond optimization for when feedback suggests it's worth it, duplicating code paths between some branches if they are very small, ... and i forgot what else i was going to mention

[09:25] <nwc10> I don't know enough of the details of spesh, JITs etc to know that that is itneresting.

[09:26] <nwc10> the "p(1) or don't bother" was my level :-)

[09:26] <timotimo> ah, when feedback suggests a loop hasn't finished running, that's pretty much the only situation at which something will be "optimized again" or something?

[09:26] <timotimo> i stumbled upon that a few times in the past

[09:26] <timotimo> having a frame with two long loops, so that OSR kicks in on the first loop, and the second loop has no information what-so-ever, so doesn't get optimized much

[09:28] <timotimo> there was also a point about not being able to know anything about any registers when entering the middle of some code

[09:33] <timotimo> and yeah, i feel that

[09:33] <timotimo> we currently give the 0th block a path to all the osr points or something like that?

[09:34] <timotimo> so in many spots we have blocks where a PHI gets created with version 0 of some register, about which nothing is known

[09:35] <timotimo> which is essentially how we express this problem in our SSA structure

[09:42] <brrt> nwc10: which page is that

[09:42] <brrt> I think I have seen a page like that ages ago but I'm not sure it's the same one

[09:42] <nwc10> somewhere in https://webkit.org/blog/10308/speculation-in-javascriptcore/

[09:42] <brrt> thank you

[09:43] <nwc10> brrt: MasterDuke told #moarvm about it yesterday

[09:43] <brrt> well, I'm sure I haven't seen that one before

[09:43] <brrt> also, .... the cost of OSR depends a lot on the runtime architecture

[09:43] <nwc10> don't forget to eat lunch - it's quite long.

[09:43] <brrt> heh

[09:43] <brrt> good point. I was about to go get lunch

[09:55] *** brrt left
[09:58] *** MasterDuke joined
[10:00] <MasterDuke> yeah, it was a thought-provoking read. it (and coincidentally seeing all those deopts when investigating that zen vs whatever slice issue) is what prompted my question about if we ever undo speshializations

[10:03] <jnthn> Well, deopt kinda is the undoing; the thing we don't do is use the number of deopts to mark a specialization as "don't use this again"

[10:04] <jnthn> At the moment we'd only really be able to mark it up such way too, since short of a GC-time pass over all callstacks, including those in continuations, there's no way of knowing if a specialization's generated code and metadata can be freed up.

[10:04] <jnthn> Making a specialization a collectable object would be a way to tackle that

[10:05] <MasterDuke> how much work/how difficult would that be?

[10:05] <timotimo> instrumentation has a similar fun

[10:16] <jnthn> MasterDuke: Which bit? :)

[10:16] <MasterDuke> timotimo: any inspired thoughts about whatever slice? or even regular thoughts?

[10:16] <jnthn> The refactor to hold specializations in a GC-able is...probably not too bad.

[10:17] <MasterDuke> and that's a likely requirement to marking them as not to use?

[10:17] <timotimo> i'm not entirely sure which part wants rewritten; probably the part that thinks it has to consecutively AT-POS the range in order to get consecutive elements

[10:18] <jnthn> MasterDuke: Depends. If you want to re-specialize based on new stats, yes, because otherwise you end up with a memory leak of the old specializations. If you just want to mark them as "do not use" but not produce replacements, it's OK

[10:19] <MasterDuke> well, re-specialize seems like a good end goal

[10:20] <MasterDuke> so not sure how much gain it would be to do the work of just marking them not to use

[10:20] <MasterDuke> before making them collectable

[10:21] <MasterDuke> timotimo: hmm, i hadn't really looked that far back in the callstack

[10:23] <jnthn> MasterDuke: Also, from a "need to learn the data structures involved" point of view, doing the refactor to collectable first is probably better

[10:23] <jnthn> It's kinda being thrown in the middle end rather than the deep end :)

[10:25] <MasterDuke> well, if nobody beats me to it (and please please don't hold back if anybody else feels inspired) i may give that a try

[10:26] <timotimo> this will want to be similar to a weakhash, right?

[10:26] <jnthn> I don't think it need to be weak at all

[10:26] <MasterDuke> but i suspect i'll need a bit of a pointer as to where/how to start (...and jnthn et al. all of a sudden stop logging into irc)

[10:27] <timotimo> something will have to hold on to all specializations so we can dispatch to them, right?

[10:27] <timotimo> so if a whole code object dies, the specializations will die with it

[10:27] <jnthn> Yes, that's already the case today

[10:27] <jnthn> The thing we want to achieve here is making individual specializations deathable while the code object remains alive.

[10:27] <timotimo> but i think what we were looking for is tossing out a specialization that only ever results in deopt immediately, or something?

[10:28] <jnthn> At the moment there's an MVMSpeshCandidate struct

[10:28] <jnthn> We'd need to make that an MVMCollectable, probably via adding a REPR

[10:28] <jnthn> And then going through every place that holds one (e.g. the spesh_cand pointer on an MVMFrame) and marking it

[10:28] <jnthn> And then moving the freeing logic into that REPR's gc_free

[10:29] <jnthn> The idea here being that we can remove a spesh candidate from the list of those on a code object

[10:29] <jnthn> But have it not actually die until every piece of code that is running that specialization - even if suspended in a continuation - has gone away

[10:29] <timotimo> ah

[10:29] <timotimo> that's so obvious, that i should have thought of it

[10:30] <jnthn> Anyway, +1 to doing this as a pre-req for doing the trickier bit of throwing them out if they deopt too much

[10:30] <jnthn> I suspect the tricky part there is partly the threading/communication

[10:30] <jnthn> (We need the decision making to be done by the spesh thread)

[10:30] <jnthn> But maybe the way to deal with that is just to write spesh log entries about deopts

[10:31] <timotimo> right, also tossing out the candidates from the spesh guard tree?

[10:31] <MasterDuke> sounds like an even better project for any wild timotimos lurking around than for /me

[10:31] <jnthn> timotimo: Well, you'd probably toss them from the candidate list and then rebuild the tree

[10:31] <jnthn> We never edit the tree any more, always rebuild it

[10:32] <timotimo> true

[10:32] <jnthn> Once I added derived specializations, the code for editing it became so complex I couldn't reason about it any more.

[10:32] <timotimo> that turned out messy :)

[10:32] <timotimo> yeah

[10:33] <jnthn> I didn't ever get to a working version; I reached the point where I realized that even if I got it to work then a) it probably would be somehow wrong, and b) I'd probably not be smart enough to debug it.

[10:35] <jnthn> MasterDuke: going on stuff you've done before, I think the refactor to collectable bit would be within reach (and a useful learning experience, if you want to get more into working on spesh stuff)

[10:38] <MasterDuke> yeah, i'll give it a try if nobody does end up beating me to it. i just don't have quite as much free time as of recently (and what i do have is more broken up), so serious about don't wait on me

[10:41] <jnthn> *nod*

[10:41] <jnthn> I think my hands are full for a while yet with dispatcher and rakuast :)

[10:43] *** brrt joined
[10:43] <brrt> ok lunch was had

[11:46] *** sena_kun joined
[11:48] *** Altai-man left
[12:21] *** AlexDaniel` left
[12:29] *** AlexDaniel` joined
[13:18] *** zakharyas joined
[14:05] *** vrurg_ is now known as vrurg

[14:14] *** zakharyas left
[15:06] *** camelia left
[15:07] *** camelia joined
[15:09] <nine> m: 'say "back on openSUSE 15.2"'

[15:09] <camelia> rakudo-moar 49f3d433c: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "say \"back on openSUSE 15.2\"" in sink context (line 1)␤»

[15:09] <nine> m: say "back on openSUSE 15.2"

[15:09] <camelia> rakudo-moar 49f3d433c: OUTPUT: «back on openSUSE 15.2␤»

[15:32] <brrt> huh

[15:36] <nine> MasterDuke: just go for it! It's an area you're obviously interested in so you will have fun and learn a ton. In my book there shouldn't be any other factors to consider

[15:42] *** MasterDuke left
[15:45] *** Altai-man joined
[15:48] *** sena_kun left
[16:08] *** MasterDuke joined
[16:52] * [Coke] thought brrt said lunch was *bad* was sad for a moment

[16:53] <brrt> haha

[16:53] <brrt> no

[16:53] <brrt> lunch was not bad

[17:01] <[Coke]> one big pandemic change for me, eat at home a lot more these days. Not sure if bad or good.

[17:09] *** brrt left
[17:18] <nine> [Coke]: depends on how well you cook I guess ;)

[17:54] *** Kaiepi left
[17:55] *** Kaiepi joined
[18:34] *** domidumont left
[19:01] <nwc10> .seen froggs

[19:01] <tellable6> nwc10, I saw froggs 2019-09-15T13:29:14Z in #perl6: <FROGGS> uhhh, that sounds awesome

[19:01] * nwc10 is curious about commit 0ae47f3fbc55a307c3ebf323d4252399744ee745

[19:02] <nwc10> relates to s390

[19:12] <nwc10> So, if you apply the same hack as s390 has, you can build on sparc32 and sparc64

[19:13] <nwc10> oh, and you also need to hack libtomath for sparc32, because you need to end up in the `define MP_32BIT` clause

[19:46] *** sena_kun joined
[19:48] *** Altai-man left
[23:31] *** sena_kun left
[23:51] *** leont left
