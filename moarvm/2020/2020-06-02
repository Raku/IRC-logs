[00:37] *** lucasb left
[01:10] *** rypervenche left
[01:10] *** konvertex left
[01:13] *** rypervenche joined
[05:14] <nwc10> good *, #moarvm 

[05:24] *** Util left
[05:58] *** Util joined
[07:27] *** zakharyas joined
[07:30] *** TimToady_ left
[07:33] *** TimToady joined
[07:56] *** sena_kun joined
[08:09] *** Altai-man_ joined
[08:12] *** sena_kun left
[09:03] <jnthn> morning o/

[09:03] <nwc10> \o

[09:37] *** konvertex joined
[09:40] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1301: Some staticframe fixups

[09:40] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1301

[09:41] <MasterDuke> nwc10: ^^^ tried to add you as a reviewer, but you're not in the org anymore?

[10:10] *** sena_kun joined
[10:12] *** Altai-man_ left
[10:21] <MasterDuke> .tell patrickb https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=4&view=logs&j=ee7db279-a103-5493-6d63-ceb0f3ef9a1a&t=cb078571-dc3b-569b-0c11-562793918090&l=21 not sure how it got that commit hash? it's not from my PR or MoarVM

[10:21] <tellable6> MasterDuke, I'll pass your message to patrickb

[10:28] <Geth> ¦ MoarVM/new-disp: ceb20a4112 | (Jonathan Worthington)++ | src/core/interp.c

[10:28] <Geth> ¦ MoarVM/new-disp: Update some capture ops to know about MVMCapture

[10:28] <Geth> ¦ MoarVM/new-disp: 

[10:28] <Geth> ¦ MoarVM/new-disp: Which will eventually completely replace MVMCallCapture.

[10:28] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/ceb20a4112

[10:36] <Geth> ¦ MoarVM/new-disp: 8f8d6765e0 | (Jonathan Worthington)++ | 3 files

[10:36] <Geth> ¦ MoarVM/new-disp: Generalize boot-constant to all arg kinds

[10:36] <Geth> ¦ MoarVM/new-disp: 

[10:36] <Geth> ¦ MoarVM/new-disp: No reason we can't have a constant integer or string result of a

[10:36] <Geth> ¦ MoarVM/new-disp: dispatch plugin.

[10:36] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8f8d6765e0

[10:54] <Geth> ¦ MoarVM/new-disp: fb1ebe9a08 | (Jonathan Worthington)++ | 3 files

[10:54] <Geth> ¦ MoarVM/new-disp: Fix dispatch callback so we can be race safe

[10:54] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/fb1ebe9a08

[11:11] <Geth> ¦ MoarVM/new-disp: da968a028b | (Jonathan Worthington)++ | 5 files

[11:11] <Geth> ¦ MoarVM/new-disp: Prepare dispatch plumbing for other transitions

[11:11] <Geth> ¦ MoarVM/new-disp: 

[11:11] <Geth> ¦ MoarVM/new-disp: Store in the dispatch recording record the record that we initially

[11:11] <Geth> ¦ MoarVM/new-disp: saw, and then pass it along to the transition function, which is now

[11:11] <Geth> ¦ MoarVM/new-disp: generalized a little in preparation for handling the polymorphic case.

[11:11] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/da968a028b

[11:13] <jnthn> Ah, darn, seems I shoulda made sure the ID was retained too...

[11:13] <jnthn> lunch &

[11:56] *** MasterDuke left
[12:07] *** zakharyas left
[12:09] *** Altai-man_ joined
[12:12] *** sena_kun left
[12:37] *** MasterDuke joined
[13:01] <Geth> ¦ MoarVM/new-disp: 9a6b145290 | (Jonathan Worthington)++ | 5 files

[13:01] <Geth> ¦ MoarVM/new-disp: Implement polymorphic dispatch

[13:01] <Geth> ¦ MoarVM/new-disp: 

[13:01] <Geth> ¦ MoarVM/new-disp: Where we stack up a number of dispatch programs at a callsite.

[13:01] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/9a6b145290

[13:04] <[Coke]> jnthn: you have 'thorugh' in a comment, should be 'through'. https://github.com/MoarVM/MoarVM/commit/9a6b145290#diff-3bcc5ffd3b994571f3c93f9e8713004aR102

[13:05] *** zakharyas joined
[13:06] <Geth> ¦ MoarVM/new-disp: 61bee36ff3 | (Jonathan Worthington)++ | src/disp/inline_cache.c

[13:06] <Geth> ¦ MoarVM/new-disp: Fix typo; Coke++

[13:06] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/61bee36ff3

[13:09] <MasterDuke> i was trying to get a python program that used clang+hunspell to find and spellcheck all comments, but i could never get it working

[13:10] <[Coke]> Could probably re-purpose the xt/aspell.t test from Raku/doc

[13:10] <[Coke]> I could give it a shot if you like.

[13:10] <jnthn> nwc10: Hmm...no SEGV for me in stage optimize of Rakudo...though I didn't ASAN it.

[13:12] <MasterDuke> [Coke]: go ahead, i kind of lost steam on that task

[13:15] <MasterDuke> could probably use ctags to generate a whitelist of type names, function names, etc

[13:22] <[Coke]> MasterDuke: any pointers on how to use ctags?

[13:30] <MasterDuke> [Coke]: i'd start with something like `ctags -R -x src/*` in the moarvm directory

[13:31] <[Coke]> illegal option -- R is not a good start. :)

[13:32] <MasterDuke> huh. --recurse?

[13:32] <[Coke]> I'll see if macports has a version.

[13:32] <[Coke]> I can't even do -v or --version to see what's what. lovely. :)

[13:33] <MasterDuke> the -x gives you a human readable version

[13:34] <MasterDuke> there are also some options for limiting to certain things you could play around with, e.g., `--c-types=f` for just functions

[13:34] <MasterDuke> but the default will probably get you 95% there

[13:37] <Geth> ¦ MoarVM/new-disp: 316063d6d6 | (Jonathan Worthington)++ | src/disp/program.c

[13:37] <Geth> ¦ MoarVM/new-disp: Finish not-object-literal guards

[13:37] <Geth> ¦ MoarVM/new-disp: 

[13:37] <Geth> ¦ MoarVM/new-disp: These exist mostly for handling of bottom values, notably Nil in Raku.

[13:37] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/316063d6d6

[13:42] <jnthn> Phew.

[13:42] <jnthn> That's all the kinds of guards implemented and test covered.

[13:49] <Geth> ¦ MoarVM/new-disp: 8d636adb41 | (Jonathan Worthington)++ | src/disp/program.h

[13:49] <Geth> ¦ MoarVM/new-disp: Remove a TODO about num_ops field

[13:49] <Geth> ¦ MoarVM/new-disp: 

[13:49] <Geth> ¦ MoarVM/new-disp: We could maybe get away with it, but we're a bit more robust knowing it.

[13:49] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8d636adb41

[14:03] <jnthn> Looks like I might be able to switch one Rakudo dispatch plugin over already. The rest after this will need attribute fetch/guard and to do the pre-flattening thing

[14:10] *** sena_kun joined
[14:11] *** Altai-man_ left
[14:12] *** MasterDuke left
[14:26] <timotimo> exciting

[14:32] <jnthn> Will probably do those bits before I get to the spesh wiring, fwiw

[14:33] <timotimo> you're saying there is perhaps a chance for me to get the spesh codegen in before you get to that? :)

[14:34] <jnthn> Perhaps so. The plan there is to make a spesh log entry with the index of the dispatch program (0 for monomorphic cases) that was picked

[14:34] <jnthn> So we can then correlate it with the args etc. like we do other invocations today

[14:34] <timotimo> ah, yes

[14:34] <jnthn> (Much like how spesh plugins work too, actually)

[14:35] <timotimo> so we'll be able to see when one guard almost always is the right one and only codegen that one

[14:49] <jnthn> Yup

[14:49] <jnthn> Though if it's really polymorphic we can think about emitting a branching structure.

[14:52] <jnthn> language class, bbiab

[14:57] *** lucasb joined
[15:12] *** zakharyas1 joined
[15:15] *** zakharyas left
[15:53] *** MasterDuke joined
[16:09] *** Altai-man_ joined
[16:11] * jnthn back

[16:11] *** sena_kun left
[16:14] <timotimo> i didn't do anything in the mean time, lol

[16:14] <timotimo> but i did try out the code and found some ways for things to crash

[16:14] <timotimo> one is that the new call stack regions aren't understood by the GC yet, and rarely you can hit one

[16:14] <timotimo> i couldn't reproduce inside gdb just yet, so don't know which number was hit, and when/where

[16:15] <timotimo> build_cfg in spesh also seems to not understand the varargs yet maybe?

[16:16] <timotimo> so i'll just look into that last one for now

[16:20] <jnthn> Yeah, it needs to learn about dispatch, I think

[16:20] <jnthn> The call stack regions are marked but they should panic and say the mark is NYI so far

[16:20] <jnthn> If they're doing segv that's unexpected, the "please implement me" panic is expected

[16:20] <jnthn> I just wanted to test case that hits it before I implement it

[16:24] <timotimo> yes, right, it's an nyi panic

[16:25] <jnthn> OK, "good" :)

[16:26] <timotimo> until now we had varargs special-cased for PHI already by building fake info entries

[16:26] <timotimo> we may want to do the same thing for dispatch ops

[16:27] <Geth> ¦ MoarVM/new-disp: 8fb1269775 | (Jonathan Worthington)++ | src/6model/bootstrap.c

[16:27] <Geth> ¦ MoarVM/new-disp: Add missing setup of BOOTCapture and BOOTTracked

[16:27] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8fb1269775

[16:27] <jnthn> Maybe, yes

[16:29] <jnthn> OK, yay, with that I can make it into a (very incomplete) return value dispatcher, which I can now fill out

[16:35] <timotimo> i'm allowed the "blah = { .foo = 1, .bar = 2 }" (or whatever) syntax as well? :3

[16:35] <timotimo> oh, is that only for initialization, not when i've got a pointer that i spesh_alloc'd for example?

[16:36] <timotimo> memcpy could be nicer here anyway

[16:39] *** mst left
[16:39] *** BinGOs left
[16:49] <jnthn> Well, got part of the return value type check plugin going

[16:49] <jnthn> then boom segv

[16:49] <jnthn> Oh, I didn't disable spesh

[16:49] <jnthn> Wonder if it'll be in there

[16:50] <jnthn> (it'll not have a clue what to do, so... :))

[16:50] <jnthn> haha, yes, in spesh graph

[16:51] *** MasterDuke left
[16:54] <jnthn> With spesh disabled it gets through `make` in Rakudo with the spesh plugin swapped out for an (incomplete) dispatcher doing return value type checking

[16:57] <nine> That sounds like a major mile stone :)

[17:00] <jnthn> Encouraging at the very least. :)

[17:01] <jnthn> I note the identity case with dispatchers is a bit nicer, 'cus we don't need an identity sub any more, we just tell it to make a result by picking a value out of the capture

[17:02] <jnthn> Which means there's no bytecode-level invoke (and so no MVMFrame) in the happy path there any more even pre-spesh (and spesh will be able to avoid dealing with inlining the identity frame too)

[17:03] <jnthn> Not that inlining the identity function is a huge job, but it's still a job, and it still bloats up the inlines table

[17:07] <timotimo> hum, isn't a prepargs op supposed to come right before a dispatch op?

[17:08] <timotimo> (gdb) print ins_flat[ins_idx][0].info[0]

[17:08] <timotimo> $22 = {opcode = 825, name = 0x7ffff7a5d043 "dispatch_v", num_operands = 2, pure = 0 '\000', 

[17:08] <jnthn> No

[17:08] <timotimo> (gdb) print ins_flat[ins_idx -1][0].info[0]

[17:08] <timotimo> $23 = {opcode = 597, name = 0x7ffff7a5c53f "const_i64_16", num_operands = 2, pure = 1 '\001', 

[17:08] <jnthn> dispatch is a standalone instruction

[17:08] <timotimo> isn't? d'oh

[17:08] <jnthn> It contains the callsite index

[17:09] <timotimo> oooh, that's how it works

[17:09] <jnthn> So you look up the callsite by the index in the dispatch instruction

[17:09] <timotimo> wow i am not smart :) :)

[17:09] <jnthn> ;)

[17:09] <timotimo> i only saw that the validator looks at -2 for the callsite index

[17:09] <jnthn> That's a bit self-harsh...it is a departure from every other invoke-y thing in MoarVM to date :)

[17:10] <jnthn> I do wonder how much of a saving we'll get when interpreting from the fact that a call with 2 args will be 1 interp instruction dispatch instead of 4... 

[17:12] <timotimo> aye

[17:12] <jnthn> Another nice little thing: the spesh plugin approach would make a closure each time when it had to take the slow-path on return.

[17:12] <jnthn> Now it can just shuffle an extra argument into the capture

[17:14] <jnthn> That's a triple win. 1. less memory for all those closures. 2. lower cost of lookup of the things it needs to work on. 3. things that are constants are far more obvious to spesh.

[17:23] <timotimo> why are MVMCallsiteFlags values for obj, int, num, str individual bits rather than being masked like for op info flags

[17:27] <jnthn> Less pressure on the bits, maybe 

[17:29] <timotimo> umm, huh

[17:29] <timotimo> ah, right

[17:29] <timotimo> we don't support lexical arguments to dispatch_*

[17:30] <jnthn> Lexical arguemnts?

[17:30] <timotimo> so i don't need a bit in callsite for "is it a lexical"

[17:30] <jnthn> Ah, no, they have to be loaded into a register first :)

[17:30] <timotimo> so they're either literal or register

[17:30] <jnthn> Well, actually...

[17:30] <jnthn> *everything* is register

[17:30] <jnthn> Even literals

[17:30] <jnthn> There's no direct argconst equivalent

[17:31] <jnthn> The literal bit just a hint to the dispatch mechanism that the argument may be considered a constant

[17:31] <jnthn> So it can not emit a literal value guard

[17:31] <jnthn> It does anyway for objects at the moment, mind

[17:31] <jnthn> 'cus the bytecode validator isn't smart enough to prove it was a wval

[17:32] <timotimo> ah, interesting, ok

[17:33] <jnthn> Hmm, "Unknown dispatch program op 20" :)

[17:33] <jnthn> Ohhh...I think I know what I forgot to implement

[17:33] <jnthn> But I also want some dinner :)

[17:35] <timotimo> i have to afk a little bit as well

[17:43] *** squashable6 left
[17:46] <nine> How can this nested block's frame https://github.com/rakudo/rakudo/blob/master/src/core.c/Variable.pm6#L56 have a tc->cur_frame->outer->outer that doesn't appear in the tc->cur_frame->caller chain?

[17:46] *** squashable6 joined
[17:47] <nine> Because that's what happens: in the caller chain, a lexical gets initialized (often an argument) but some nested block (i.e. a closure) looks in the appropriate outer, finds a different frame there and doesn't find a value for that variable.

[17:55] *** zakharyas1 left
[18:10] *** sena_kun joined
[18:12] *** Altai-man_ left
[18:36] <timotimo> nine: something about how we put exception blocks on top of a call stack?

[19:11] *** AlexDaniel left
[19:41] <nine> timotimo: my suspicion runs more in the other direction. The call stack is a pure runtime thing that can hardly go wrong. The frame that called this frame will be there. But how does a frame get its outer? That's more likely some compiler influenced thing that in many cases won't show up when its wrong as not all code even accesses the outers

[19:47] *** zakharyas joined
[19:49] <timotimo> hmm

[19:49] <timotimo> the outer is static, except when forceouterctx hapens maybe?

[19:58] <nine> Also it's not just exceptions. Another case was a closure passed to grep

[20:09] *** Altai-man_ joined
[20:12] *** sena_kun left
[20:14] <timotimo> ok

[20:21] <jnthn> nine: Not an effort of autoclose, maybe?

[20:21] <jnthn> (Disclaimer: brain full of dispatcher stuff, so haven't looked closely...)

[20:30] <timotimo> ok so i see a bunch of op info structs being built during make_cfg

[20:31] <timotimo> then my loop runs another ~150 repetitions and then it crashes while trying to validate an ext op record that is a bit out of range

[20:32] <nine> I've traced tc->cur_frame->outer's origin back through several garbage collections to a clone call on the block. The source of the clone is a frame created by capturelex

[20:32] <timotimo>       dispatch_v      lits(bad-dupe), callsite(0x1704310, 1 arg, 1 pos, nonflattening, interned)  # [008] JIT: bailed completely because of <dispatch_v>

[20:32] <nine> That happens in https://gist.github.com/niner/5148f4e6f7e52d06bee203be3bd2ae6e

[20:33] <timotimo> ii wonder if it's grabbing the op info from the opcode - at least in log dumping

[20:34] <timotimo> hm, no, it's grabbing ins->info->num_arguments

[20:35] <timotimo> ah of course

[20:36] <timotimo>       const_i64_16      r8(1), liti16(42)

[20:36] <timotimo>       [Annotation: 13 (unknown)]

[20:36] <timotimo>       dispatch_v      lits(bad-dupe), callsite(0xbe7720, 1 arg, 1 pos, nonflattening, interned),   r8(1)  # [008] JIT: bailed completely because of <dispatch_v>

[20:39] <jnthn> looks like progress

[20:44] <Geth> ¦ MoarVM/new-disp: 9f0f25d3cd | (Timo Paulssen)++ | src/spesh/graph.c

[20:44] <Geth> ¦ MoarVM/new-disp: invent MVMOpInfo struct for dispatch_* var-args ops

[20:44] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/9f0f25d3cd

[20:45] <timotimo> it still crashes with that out-of-range opcode, but i'm not sure why

[20:46] <nine> Either my ack foo is failing, or we actually don't generate any blocks with blocktype 'immediate_static', ever.

[20:48] <Geth> ¦ MoarVM/new-disp: 653702ecd6 | (Jonathan Worthington)++ | 2 files

[20:48] <Geth> ¦ MoarVM/new-disp: Interpret MVMDispOpcodeCopyArgsTail

[20:48] <Geth> ¦ MoarVM/new-disp: 

[20:48] <Geth> ¦ MoarVM/new-disp: Which turned out to need the callsite, so the setting up of the callsite

[20:48] <Geth> ¦ MoarVM/new-disp: now goes with the arg setup ops, which makes more sense anyway since now

[20:48] <Geth> ¦ MoarVM/new-disp: all population of MVMArgs is done in a single op rather than being

[20:48] <Geth> ¦ MoarVM/new-disp: spread over a couple.

[20:48] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/653702ecd6

[20:49] <jnthn> nine: I can believe that is the case

[20:53] <nine> Yeah, looks like it. So it must be 'declaration_static'

[20:54] *** zakharyas left
[20:54] *** Altai-man_ left
[21:01] <timotimo> looking into a spesh log struct and function for dispatch program choice

[21:04] <timotimo> the "plugin" piece of the spesh log struct could be usable for this? uint32 bytecode_offset, uint16 guard_index

[21:05] <Geth> ¦ MoarVM/new-disp: e8cd627dcc | (Jonathan Worthington)++ | 3 files

[21:05] <Geth> ¦ MoarVM/new-disp: Add GC marking of dispatch programs

[21:05] <Geth> ¦ MoarVM/new-disp: 

[21:05] <Geth> ¦ MoarVM/new-disp: As well as detecting any inline cache entries we may have forgotten

[21:05] <Geth> ¦ MoarVM/new-disp: about.

[21:05] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/e8cd627dcc

[21:05] <jnthn> Yes, that may well work

[21:06] <jnthn> Just make sure the bytecode offset calculation exactly matches the way used for the inline cache lookup

[21:06] <jnthn> So that we can dig up the correct inline cache entry later

[21:12] <timotimo> yeah i was just about to steal the bytecode offset logic from spesh plugin resolve, where it's passed in from interp.c or the jit

[21:12] <timotimo> or as a literal from spesh i guess

[21:15] <timotimo> the cat now has her feet sprawled out above my keyboard again

[21:18] <jnthn> An amount of `make test` now passes with using dispatch instead of spesh plugin for return values. There's a couple of segvs that I think I can guess what are, a code-gen bug responsible for probably most of them, and then that I didn't yet implement coercion handling of return types in the dispatcher version.

[21:18] <jnthn> Actaully a majority of make test

[21:19] <jnthn> Think I'll go rest a little now

[21:24] <[Coke]> jnthn++

[21:53] *** AlexDaniel joined
[21:53] *** AlexDaniel left
[21:53] *** AlexDaniel joined
[21:53] *** MasterDuke joined
[21:59] *** MasterDuke left
[22:18] *** MasterDuke joined
[23:33] *** leont left
[23:34] *** lucasb left
[23:41] <timotimo> https://gist.github.com/timo/ae05d4ac8a0727b70c46c51e571cd716 - dispatch results landing in the spesh log and being incorporated into the stats - though currently it makes no difference between spesh plugin and disp program at all. that is probably not an issue, though, since we wouldn't have a dispatch and a spesh plugin on the same address?

[23:56] <Geth> ¦ MoarVM/new-disp: 28fdfe3b41 | (Timo Paulssen)++ | 7 files

[23:56] <Geth> ¦ MoarVM/new-disp: log dispatch resolution and incorporate into stats

[23:56] <Geth> ¦ MoarVM/new-disp: 

[23:56] <Geth> ¦ MoarVM/new-disp: currently looks exactly like a spesh plugin guard index in

[23:56] <Geth> ¦ MoarVM/new-disp: the stats, but there shouldn't be a conflict, i don't think.

[23:56] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/28fdfe3b41

