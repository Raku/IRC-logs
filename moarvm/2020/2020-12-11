[00:32] *** frost-lab joined
[01:30] *** lucasb left
[01:37] *** klapperl_ joined
[01:39] *** klapperl left
[01:40] *** MasterDuke left
[03:07] *** evalable6 left
[03:07] *** linkable6 left
[03:07] *** tellable6 left
[03:07] *** tellable6 joined
[03:10] *** linkable6 joined
[03:10] *** evalable6 joined
[03:28] *** leont left
[05:29] *** evalable6 left
[05:29] *** linkable6 left
[05:31] *** linkable6 joined
[05:32] *** evalable6 joined
[05:34] *** leedo left
[05:34] *** leedo joined
[06:36] <nwc10> good *, #moarvm 

[07:40] *** patrickb joined
[07:52] *** sena_kun joined
[07:54] *** domidumont joined
[09:03] *** zakharyas joined
[09:07] *** Altai-man joined
[09:10] *** sena_kun left
[09:50] *** lizmat_ joined
[09:53] *** lizmat left
[10:26] <jnthn> o/

[10:27] <nwc10> \o

[10:49] *** lizmat_ is now known as lizmat

[11:06] *** zakharyas left
[11:10] *** zakharyas joined
[11:13] *** squashable6 left
[11:14] *** squashable6 joined
[11:59] *** leont joined
[12:26] *** Altai-man left
[12:26] *** Altai-man joined
[12:27] *** squashable6 left
[12:30] *** squashable6 joined
[12:52] *** frost-lab left
[13:08] *** sena_kun joined
[13:10] *** Altai-man left
[14:30] *** zakharyas left
[15:01] <lizmat> looks like nqp::splce needs some love: https://github.com/rakudo/rakudo/issues/4075#issuecomment-743239062

[15:36] <lizmat> re: https://github.com/rakudo/rakudo/issues/4102

[15:37] <lizmat> looking at src/strings/windows1251.c

[15:37] <lizmat> it looks like it is just missing some conversion tables / mappers to get support for all of the other windowsxxxx encodings, right ?

[15:37] <lizmat> which could almost be automated, given a good data source ?

[16:11] <jnthn> For the windows ones? Not sure, it really depends if they are all 8-bit width, which I don't know off hand

[16:11] <jnthn> The policy question is if we want to ship them all in core

[16:18] <lizmat> afaik they're all 8-bit

[16:18] <lizmat> so relatively simple

[16:18] <lizmat> or would you rather have it in HLL ?

[16:20] <jnthn> Well, for the Windows ones, each one will add probably something like half a kb

[16:20] <jnthn> And it seems like there's a dozen or so, not hundreds

[16:20] <jnthn> So it's not really a big issue

[16:21] <jnthn> Assuming we maybe refactor things so that they mostly just re-use code and have a different table

[16:21] <jnthn> But some, especially the Chinese/Japanese ones, will be far more data and far more involved, I expect

[16:23] <jnthn> I guess it's nice if these things Just Work out of the box

[16:23] <jnthn> And it's not like we are minimal about much else :)

[16:38] <lizmat> indeed  :-)

[16:39] <lizmat> I was also wondering about the:

[16:39] <lizmat>     switch (codepoint) {

[16:39] <lizmat>         case 160: return 160;

[16:39] <lizmat> structure: I guess that's the optimal way of doing that rather then indexing into an array ?

[16:40] <jnthn> Depends if there's ranges that overlap

[16:40] <jnthn> Well, and also, hard to know without profiling :)

[16:40] <lizmat> could be compilers do that for you, but looks like 160 .. 255 just return self

[16:40] <leont> Encodings vary greatly in difficulty of implementing, but the 8 bit ones should be trivial

[16:40] <jnthn> But it's possible it's a little more cache friendly and code size friendly if there's a lot of overlap

[16:41] <jnthn> I wonder also if the code in there is genreated

[16:41] <jnthn> *generated

[16:41] <lizmat> would be nice then if the generator left a clue  :-)

[16:41] <leont> Encode.pm in perl generates most of it's conversion tables AFAIK, it may be possible to re-use those tables

[16:42] <lizmat> .oO( interesting module to port to raku )

[16:43] <leont> https://github.com/Perl/perl5/tree/blead/cpan/Encode/ucm

[16:47] <leont> It's probably mainly a matter of replacing enc2xs with a enc2nqp

[16:54] <leont> Apparently UCM files are a unicode consortium thingie, even better

[16:56] <leont> There's also a competing xml format, because of course -_-

[17:07] *** Altai-man joined
[17:10] *** sena_kun left
[17:10] *** MasterDuke joined
[17:14] *** zakharyas joined
[17:36] *** domidumont left
[17:36] <Geth> Â¦ MoarVM: 70cefcfffc | (Nicholas Clark)++ | src/math/bigintops.c

[17:36] <Geth> Â¦ MoarVM: Minimally exact bigint/bigint => num conversion, including rounding.

[17:36] <Geth> Â¦ MoarVM: 

[17:36] <Geth> Â¦ MoarVM: Given that Rakudo parses decimal constants such as 0.01 as `Rat`s (ie

[17:36] <Geth> Â¦ MoarVM: represents them internally as (1 / 100), and persists with this exact

[17:36] <Geth> Â¦ MoarVM: representation as long as possible), this effectively means that the MoarVM

[17:36] <Geth> Â¦ MoarVM: operator that converts `Rat`s to `Num`s implements Rakudo's decimal =>

[17:36] <Geth> Â¦ MoarVM: binary floating point conversion.

[17:36] <Geth> Â¦ MoarVM: <â€¦commit message has 161 more linesâ€¦>

[17:37] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/70cefcfffc

[17:37] <Geth> Â¦ MoarVM: 82a34e25a8 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/math/bigintops.c

[17:37] <Geth> Â¦ MoarVM: Merge pull request #1384 from MoarVM/bigint_div_num-IEEE-rounding

[17:37] <Geth> Â¦ MoarVM: 

[17:37] <Geth> Â¦ MoarVM: Minimally exact bigint/bigint => num conversion, including rounding.

[17:37] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/82a34e25a8

[17:46] <timotimo> tib: can you check if there's a big difference between .starts-with($n) with $n being 123 and .starts-with($s) with $s being "123"? i.e. not coercing to string for every check

[18:57] *** zakharyas left
[19:09] *** zakharyas joined
[19:59] <MasterDuke> timotimo: there are some questions/comments on https://github.com/MoarVM/MoarVM/pull/1399 that i think you could help out with

[20:39] *** Kaiepi left
[20:39] *** Kaiepi joined
[20:45] <tib> timotimo : I canâ€™t check at the moment.

[21:08] *** sena_kun joined
[21:09] *** Altai-man left
[21:29] *** zakharyas left
[21:51] *** MasterDuke left
[22:10] *** sena_kun left
[22:26] *** patrickb left
[22:26] *** Geth left
[22:26] *** Geth joined
