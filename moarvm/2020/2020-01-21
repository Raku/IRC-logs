[00:44] *** patrickb left
[01:46] <timotimo> i think i've reached a point where things work

[01:56] <timotimo> m: my @before = 14930632, 55096, 123560; my @after = 1, 2, 3; say "savings individually: ", (@before Z- @after), " summed: ", ([+] @before Z- @after), " percentages: ", (@before Z/ @after Z* 100)

[01:56] <camelia> rakudo-moar fc8bfc2e8: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Only identical operators may be list associative; since 'Z/' and 'Z*' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> , " percentages: ", (@before Z/ @…»

[01:56] <timotimo> m: my @before = 14930632, 55096, 123560; my @after = 1, 2, 3; say "savings individually: ", (@before Z- @after), " summed: ", ([+] @before Z- @after), " percentages: ", ((@before Z/ @after) Z* 100)

[01:56] <camelia> rakudo-moar fc8bfc2e8: OUTPUT: «savings individually: (14930631 55094 123557) summed: 15109282 percentages: (1493063200)␤»

[01:56] <timotimo> don't get too excited, that's just test data

[01:56] <timotimo> m: my @before = 14930632, 55096, 123560; my @after = 1, 2, 3; say "savings individually: ", (@before Z- @after), " summed: ", ([+] @before Z- @after), " percentages: ", ((@before Z/ @after) X* 100)

[01:56] <camelia> rakudo-moar fc8bfc2e8: OUTPUT: «savings individually: (14930631 55094 123557) summed: 15109282 percentages: (1493063200 2754800 4118666.666667)␤»

[01:56] <timotimo> m: my @before = 14930632, 55096, 123560; my @after = 1, 2, 3; say "savings individually: ", (@before Z- @after), " summed: ", ([+] @before Z- @after), " percentages: ", ((@after Z/ @before) X* 100)

[01:56] <camelia> rakudo-moar fc8bfc2e8: OUTPUT: «savings individually: (14930631 55094 123557) summed: 15109282 percentages: (0.0000067 0.00363 0.002428)␤»

[01:56] <timotimo> just need the real data now

[01:56] <timotimo> m: my @before = 14930632, 55096, 123560; my @after = 14726520, 54336, 122304; say "savings individually: ", (@before Z- @after), " summed: ", ([+] @before Z- @after), " percentages: ", ((@after Z/ @before) X* 100)

[01:56] <camelia> rakudo-moar fc8bfc2e8: OUTPUT: «savings individually: (204112 760 1256) summed: 206128 percentages: (98.63293128 98.62059 98.98349)␤»

[01:56] <timotimo> 1.4% on core.c and core.d, but only 1.01% on core.e

[01:56] <timotimo> that is size reduction

[01:56] <timotimo> yes that is 206 kbyte saved from the setting precomp files

[01:58] <timotimo> a visualization of entropy for CORE.c.setting before my changes: https://i.imgur.com/TSTDsGd.png

[01:59] <timotimo> and after my changes: https://i.imgur.com/UZawlZ7.png

[02:01] <timotimo> since the bytes are arranged in a hilbert curve, you'll see that the frames section got a bit shorter because the big magenta squiggly squares on the left somewhat near the top don't snake past the middle line towards the right

[02:01] <timotimo> i *think* the stuff i tossed out was mostly in the uppermost left corner?

[02:02] <timotimo> the colors in general have shifted a little because the distribution of byte values has changed

[02:50] <timotimo> it looks like doing the exact same thing for lexical variables can save some more space

[07:15] *** domidumont joined
[07:32] <nine> one step at a time :)

[09:25] *** sena_kun joined
[09:28] *** zakharyas joined
[09:59] *** zakharyas left
[10:27] <timotimo> working on the second step now :)

[10:34] *** Altai-man_ joined
[10:36] *** zakharyas joined
[10:36] *** sena_kun left
[11:04] <nine> samcv: can you please do a point release (2020.01.1)? sena_kun++ would like that as a base for the 2020.01 rakudo release. I've completed steps 1-5 of the release guide already.

[11:16] *** squashable6 left
[11:19] *** squashable6 joined
[11:34] <timotimo> serialization wrangling is hard when you don't know if it's the writing or the reading end that's wrong ...

[11:39] <timotimo> i might have fixed the last bug

[11:44] <timotimo> m: my @before = 14930632, 55096, 123560; my @after = 14652680, 54128, 121696; say "savings individually: ", (@before Z- @after), " summed: ", ([+] @before Z- @after), " percentages: ", ((@after Z/ @before) X* 100)

[11:44] <camelia> rakudo-moar e3cbd32c6: OUTPUT: «savings individually: (277952 968 1864) summed: 280784 percentages: (98.138378 98.243067 98.491421)␤»

[11:44] <timotimo> that's comparing before i started with what it's at now

[11:44] <nwc10> timotimo: have you considered writing a JIT instead? That might be easier :-0)

[11:45] <timotimo> 1.8% instead of 1.4% for core.c, 1.7% instead of 1.38% on core.d and 1.5% instead of 1% on core.e

[11:45] <timotimo> who wants that?

[11:46] <nwc10> not sure which "that"? I'd like it all, and a pony. But I'd be happy with 1.8% savings in size

[11:46] <nwc10> er, sorry, "I want it all". The impolite tone is important, I believe.

[11:47] <timotimo> ha

[11:47] <timotimo> i'd have liked a little more savings tbh

[11:49] <timotimo> https://i.imgur.com/SU0VXp6.png

[11:49] <timotimo> that's the third binvis image

[11:49] <timotimo> for my latest change, that is

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: 62bfd1cea6 | (Timo Paulssen)++ | 2 files

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: "Compress" serialization of local variable types

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization:

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: Object registers are overwhelmingly common, and

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: this very simple scheme saves a bunch of space

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: already, without being too complicated.

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: review: https://github.com/MoarVM/MoarVM/commit/62bfd1cea6

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: b0e24a7644 | (Timo Paulssen)++ | src/core/bytecode.c

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: drop redundant "if" clause

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: review: https://github.com/MoarVM/MoarVM/commit/b0e24a7644

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: 153d4e80d1 | (Timo Paulssen)++ | 2 files

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: "Compress" types of lexical variables

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization:

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: same method as before, but this commit also

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: switches the order of lexical names and lexical

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: types; now all names come first, then all types.

[11:54] <Geth> ¦ MoarVM/compressed_lex_loc_types_serialization: review: https://github.com/MoarVM/MoarVM/commit/153d4e80d1

[11:59] *** zakharyas left
[12:28] *** lucasb joined
[12:33] *** MasterDuke left
[12:34] *** sena_kun joined
[12:36] *** Altai-man_ left
[12:55] <timotimo> haha, oh no

[12:56] <timotimo> there's a regex in core that does time parsing, it appears in the string heap, and it has lots and lots of spaces :D

[13:04] *** zakharyas joined
[13:08] <lizmat> yeah, I've been meaning to get rid of that

[13:10] <timotimo> it's barely a blip, though

[13:10] <lizmat> perhaps it makes sense to squash extraneous spaces ?

[13:12] <timotimo> for storage in the string heap, or manually in the source code, or for storing the source of a regex in its object?

[13:17] <timotimo> dumb question

[13:17] <timotimo> how do i format an nqp-level native integer (or boxed integer) to a base 16 string?

[13:18] <lizmat> there's nqp::base_I

[13:19] <lizmat> I guess you need to upgrade to I first ?

[13:19] <timotimo> mhh

[13:20] <lizmat> nqp::base_I(nqp::p6box_i($a),16)

[13:22] <timotimo> not sure i'll have p6box_i available at that position

[13:25] <lizmat> box_i(foo,Int) ?

[13:26] <timotimo> i stole from sprintf's intify and just created a bare $knowhow for this purpose

[13:27] <timotimo> OK, cuids are now base 27

[13:28] <timotimo> hm, should be 37 actually

[13:28] <lizmat> I thought we only supported upto 36 ?

[13:28] <timotimo> oops

[13:28] <timotimo> i wouldn't mind adding lowercase letters as well, but up to that point uppercase and lowercase were equal

[13:28] <timotimo> like A through F for base 16

[13:29] <timotimo> this'll make the core setting shrink yet a tiny bit more

[13:30] <lizmat> why is shrinking the core setting important ?

[13:31] <timotimo> makes me feel good

[13:31] <lizmat> aaah...  ok  :-)

[13:32] <sena_kun> lizmat, lower footprint?

[13:32] <lizmat> yeah, but it is my understanding that the setting is loaded lazily anyway ?

[13:33] <timotimo> it's a major contributor to package size and also ram usage for empty program (if you count shared memory)

[13:33] <timotimo> well, the setting is memory-mapped, that's true

[13:33] <timotimo> some things are read and turned into other stuff, like the string heap is read and turned into string objects - lazily, but still.

[13:34] <timotimo> also, the serialized blob is lazily turned into all the objects we have

[13:35] <timotimo> m: my @before = 14652680, 54128, 121696; my @after = 14625888, 54088, 121672; say "savings individually: ", (@before Z- @after), " summed: ", ([+] @before Z- @after), " percentages: ", ((@after Z/ @before) X* 100)

[13:35] <camelia> rakudo-moar 11a8d57f6: OUTPUT: «savings individually: (26792 40 24) summed: 26856 percentages: (99.8171529 99.926101 99.980279)␤»

[13:35] <timotimo> oh wow

[13:36] <timotimo> that's barely worth a thing for the non-c settings

[13:36] <timotimo> m: say 26792 / 1024

[13:36] <camelia> rakudo-moar 11a8d57f6: OUTPUT: «26.164063␤»

[13:38] <timotimo> the string heap is interesting because there's this "fast table" that's generated by quickly skipping through loads of strings; the exact performance implications of making some already-short strings shorter i'm not exactly sure about

[13:39] <timotimo> less memory traffic is good

[13:40] <timotimo> i'm not sure if the cuid strings are actually ever deserialized in regular rakudo operation

[13:42] <timotimo> looks like with my base-36 cuids the values go up to D6I in core.c.setting

[13:42] <timotimo> m: say :36<D6I>

[13:42] <camelia> rakudo-moar 11a8d57f6: OUTPUT: «17082␤»

[13:43] <timotimo> pleasant amount of shortening

[13:47] <timotimo> though the "only numbers" cuids are already a good step up from "cuuid.{full unix timestamp at sub-milisecond precision}" we had a long long time ago

[14:23] *** zakharyas left
[14:26] *** zakharyas joined
[14:34] *** Altai-man_ joined
[14:36] *** sena_kun left
[14:50] *** brrt joined
[14:50] <brrt> \o

[14:50] <tellable6> 2020-01-20T21:59:36Z #raku-dev <patrickb> brrt: Would you be willing to mentor again? Might a follow up project of last years GSoC be a good project idea?

[15:12] *** squashable6 left
[15:14] *** squashable6 joined
[15:34] <nwc10> o/

[15:39] <brrt> \o nwc10

[15:39] <brrt> did anybody see, by any chance, the MIR compiler proposal/plan fly by

[15:40] <jnthn> No?

[15:40] <jnthn> Link?

[15:41] * nwc10 did

[15:42] <brrt> https://developers.redhat.com/blog/2020/01/20/mir-a-lightweight-jit-compiler-project/

[15:42] <brrt> jnthn: it's sort of on the same level as GNU Lightning, and CraneLift, and ... I guess the expression IR

[15:42] <brrt> with the difference that the expression IR is mildly more clever for some of the things we do a lot

[15:43] * brrt is back in an hour or 2

[15:48] *** brrt left
[16:02] <nine> brrt: I posted the link yesterday :)

[16:02] <tellable6> nine, I'll pass your message to brrt

[16:02] <nine> brrt: mere minutes before you joined the channel

[16:02] <tellable6> nine, I'll pass your message to brrt

[16:26] *** domidumont left
[16:35] *** sena_kun joined
[16:36] *** Altai-man_ left
[16:40] *** domidumont joined
[16:40] *** domidumont left
[16:44] *** domidumont joined
[16:59] *** brrt joined
[18:00] *** patrickb joined
[18:15] *** brrt left
[18:33] *** zakharyas left
[18:34] *** Altai-man_ joined
[18:37] *** sena_kun left
[18:58] *** squashable6 left
[18:59] *** squashable6 joined
[19:25] *** brrt joined
[19:39] *** MasterDuke joined
[19:56] *** domidumont left
[20:07] *** zakharyas joined
[20:16] *** squashable6 left
[20:18] *** squashable6 joined
[20:34] *** sena_kun joined
[20:35] *** Ven`` joined
[20:37] *** Altai-man_ left
[20:57] *** patrickb left
[21:01] *** zakharyas left
[21:24] *** brrt left
[21:32] <samcv> hey nine I just got home. see you wanted a point release?

[21:33] <sena_kun> samcv, o/

[21:33] <sena_kun> samcv, yes, having one would be awesome. :)

[21:33] <sena_kun> (though I am not nine, of course)

[21:35] <samcv> sena_kun, from master?

[21:36] <sena_kun> samcv, lemme see... yes, it's good

[21:36] <sena_kun> samcv, sorry for doing it twice, I'll try to do better next time.

[21:43] <samcv> ok. give me a bit

[21:57] <samcv> sena_kun, i just got home and it's pretty late. i probably won't get to release until tomorrow.

[21:57] <sena_kun> samcv, ok, thanks for notifying. take your time and have a good rest. :)

[22:25] *** Ven`` left
[22:34] *** Altai-man_ joined
[22:37] *** sena_kun left
[22:46] *** Altai-man_ left
