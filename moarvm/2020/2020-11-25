[01:37] *** coverable6 left
[01:37] *** greppable6 left
[01:37] *** statisfiable6 left
[01:37] *** quotable6 left
[01:37] *** benchable6 left
[01:37] *** unicodable6 left
[01:37] *** committable6 left
[01:37] *** tellable6 left
[01:37] *** notable6 left
[01:37] *** sourceable6 left
[01:37] *** squashable6 left
[01:37] *** bisectable6 left
[01:37] *** nativecallable6 left
[01:37] *** shareable6 left
[01:37] *** linkable6 left
[01:37] *** evalable6 left
[01:37] *** bloatable6 left
[01:37] *** releasable6 left
[01:37] *** benchable6 joined
[01:38] *** coverable6 joined
[01:38] *** sourceable6 joined
[01:38] *** unicodable6 joined
[01:38] *** bloatable6 joined
[01:38] *** quotable6 joined
[01:38] *** evalable6 joined
[01:38] *** statisfiable6 joined
[01:38] *** tellable6 joined
[01:39] *** nativecallable6 joined
[01:39] *** greppable6 joined
[01:39] *** committable6 joined
[01:39] *** squashable6 joined
[01:39] *** shareable6 joined
[01:40] *** linkable6 joined
[01:40] *** notable6 joined
[01:40] *** bisectable6 joined
[01:40] *** releasable6 joined
[03:27] *** squashable6 left
[03:28] *** squashable6 joined
[04:13] *** Kaeipi joined
[04:16] *** Kaiepi left
[07:30] *** sena_kun joined
[07:41] *** travis-ci joined
[07:41] <travis-ci> MoarVM build errored. Jonathan Worthington 'Merge pull request #1331 from Kaiepi/lego-jit-rv

[07:41] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/745737411 https://github.com/MoarVM/MoarVM/compare/bc219078d861...bfce05394d8a

[07:41] *** travis-ci left
[07:43] <nwc10> "There was an error in the .travis.yml file from which we could not recover." "Unfortunately, we do not know much about this error."

[07:50] *** domidumont joined
[08:11] *** Altai-man joined
[08:13] *** sena_kun left
[09:28] *** zakharyas joined
[10:26] <jnthn> wat :)

[10:26] <jnthn> I thought we used azure pipelines instead of travis now?

[10:32] <Altai-man> jnthn, we are not strong enough to disable travis's life preserving system yet...

[10:45] *** leont joined
[12:12] *** sena_kun joined
[12:14] *** Altai-man left
[12:15] <nine> It's hard to let go...

[12:19] *** zakharyas left
[13:24] *** mtj_ joined
[13:32] *** raku-bridge left
[13:32] *** raku-bridge joined
[13:32] *** raku-bridge left
[13:32] *** raku-bridge joined
[13:53] *** zakharyas joined
[14:43] *** MasterDuke joined
[14:54] *** lucasb joined
[15:47] *** patrickb joined
[16:11] *** Altai-man joined
[16:14] *** sena_kun left
[16:17] *** raku-bridge left
[16:17] *** raku-bridge joined
[16:17] *** raku-bridge left
[16:17] *** raku-bridge joined
[16:20] *** domidumont left
[16:24] *** domidumont joined
[16:54] *** patrickb left
[17:21] *** domidumont left
[18:13] *** leont left
[18:13] *** leont joined
[18:58] *** zakharyas left
[20:12] *** sena_kun joined
[20:13] *** Altai-man left
[20:31] *** sena_kun left
[20:34] *** patrickb joined
[20:42] *** zakharyas joined
[21:03] <vrurg> Can somebody help me with https://github.com/rakudo/rakudo/issues/4056? I'm trying to find a way to obtain the current code object or its signature instance without using getcodeobj, curcode, or any other non-inlinable.

[21:12] <timotimo> the signature or parameter objects are not constant and known at compile time when you're in the code in question?

[21:13] <vrurg> Not if they're generic. Then I need their instantiations.

[21:13] <vrurg> Basically, it's the only case when I need them.

[21:15] <timotimo> i'm not sure i follow, but could getlexperinvtype be the key here?

[21:17] <timotimo> when the parameter is generic, only the constraint is unknown, right?

[21:17] <timotimo> but you also only need the parameter itself to get what the constraint is?

[21:18] <vrurg> timotimo: Not necessarily. T(Str), for example. Or with https://github.com/rakudo/rakudo/pull/4058 `my subset RS of T` also works.

[21:20] <vrurg> Also, there is a problem with in-signature type captures `sub foo(::T, T $b)` which is also better be resolved via instantiating the second parameter because T could be a nominalizable, wrapped around a role parameter.

[21:21] <timotimo> what do you mean by "instantiating"?

[21:21] <vrurg> instantiate_generic

[21:22] <timotimo> wouldn't we at the time of the code being called already have a fully ungenerified type in T?

[21:22] <timotimo> oh, you can pass Literally A Type rather than an instance of a type

[21:22] <timotimo> that's how T could end up a coercive type

[21:23] <vrurg> Not the type captures in the signature. It would be more correct for me to say that `sub foo(::T, T:D() $b)` is the only thing which needs to be handled.

[21:24] <vrurg> And your case too, right. Some kind of code factory would need it.

[21:26] <vrurg> Anyway, ungenerefication is a minor problem. But handling a coercion passed in via a generic is a pure run-time thing where I need the actual Parameter instance to know the final type of it.

[21:27] <timotimo> i still don't entirely understand what object or data you're trying to get via curcode and friends

[21:27] <vrurg> And the only way I currently see to do it is by fetching the current code object, then signature, then pull the parameter out of the signature.

[21:27] <timotimo> do we create new Parameter instances when a role gets instantiated with a different type parameter?

[21:28] <vrurg> Yes.

[21:29] <timotimo> m: role A[T] { method test(::A, A $b) { } }; class One does A[Int] { }; class Two does A[Str] { }; say .^lookup("test").signature.parameters[0].WHICH for (One, Two);

[21:29] <camelia> rakudo-moar e46a1da29: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'T' in parameter declaration.␤at <tmp>:1␤------> 3role A[T7⏏5] { method test(::A, A $b) { } }; class ␤»

[21:29] <timotimo> m: role A[::T] { method test(::A, A $b) { } }; class One does A[Int] { }; class Two does A[Str] { }; say .^lookup("test").signature.parameters[0].WHICH for (One, Two);

[21:29] <camelia> rakudo-moar e46a1da29: OUTPUT: «No such method 'parameters' for invocant of type 'Signature'␤  in block <unit> at <tmp> line 1␤␤»

[21:29] <timotimo> m: role A[::T] { method test(::A, A $b) { } }; class One does A[Int] { }; class Two does A[Str] { }; say .^lookup("test").signature.params[0].WHICH for (One, Two);

[21:29] <camelia> rakudo-moar e46a1da29: OUTPUT: «Parameter|60411096␤Parameter|60437256␤»

[21:29] <timotimo> ok, i didn't know that

[21:30] <timotimo> so when we go creating these things, couldn't we do a little bit more code-gen so we don't have to do the run-time code object lookup later on?

[21:31] <timotimo> we're currently working on lower_signature?

[21:31] <vrurg> I certainly do work on it. :)

[21:32] <timotimo> does the perf regression come from lower_signature now creating lookups of parameters via getcodeobj and friends?

[21:32] <vrurg> In first place it comes from nqp::getcodeobj(nqp::ctxcode(nqp::ctx))

[21:33] <vrurg> Could be nqp::curcode, which I found later, but that would change nothing as it's non-inlinable too.

[21:33] <jnthn> non-inlinable, but a lot cheaper

[21:33] <timotimo> i could have gotten all of this by reading your comment on that one issue ...

[21:34] <jnthn> I'm not sure I get the new problem though. A parameter holds a type, if you instantiate the parameter it's instantiating the generic type?

[21:34] <jnthn> So you can obtain the generic type from the parameter and instantiate that?

[21:34] <jnthn> (e.g. grab it at compile time out of Parameter)

[21:35] <vrurg> jnthn: it does. The problem is to handle cases like `class C does R[Int(Str)]`, or even more complex cases like `subset S of Int(Str); class C does R[S:D]`

[21:36] <vrurg> Not to mentions that role code can also play with the type parameter by defining its own nominalizables.

[21:37] <vrurg> And then use those in signatures.

[21:37] <jnthn> Yeah, I'd expect it to be quite hard to come up with a design to do those efficiently

[21:38] <timotimo> at role instantiation time, build (or select) a piece of code that Does The Thing and have the generic code for the method's signature binding call into a per-role-instantiation-and-per-method stashed code object?

[21:38] <vrurg> But since profiling done by dogbert17 shows the the biggest slowdown comes from extra context allocations, if code produced by lower_signature can be inlined the penalty for using generics could be significantly reduced.

[21:38] <jnthn> I didn't look at how the low levels of the coercion changes we done

[21:38] <timotimo> hm. i guess that's almost the same as grabbing the Parameter object

[21:39] <jnthn> *were

[21:39] <jnthn> (yet)

[21:39] <jnthn> But my rough expectation was that we'd need a form of istype for cases where we coerce

[21:40] <timotimo> hm. we can get the role parameter with getlexperinvtype, we can quite possibly have a very cheap check if that's a simple type or one that requires extra work, and put a call to a sub or method that handles complex stuff by getting the code object and such

[21:40] <jnthn> Perhaps so, yes

[21:41] <timotimo> that way the curcode call (though it'd haev to be callercode i guess) isn't in the actual code

[21:41] <vrurg> jnthn: The case of plain coercion is as simple as `unless istype { bind( $param_var, $param_type.HOW.coerce($value) ) }`

[21:41] <timotimo> and inlining can happen again

[21:41] <jnthn> Only if you know it's a coercion type up front

[21:42] <jnthn> Whereas in this case we don't really

[21:42] <vrurg> timotimo: it's not callercode because we currently talk about current call signature binding.

[21:43] <jnthn> But if we have `T $x` as a parameter type then we know it's a type parameter at the point we compile, and that we can look up `T` lexically and be done

[21:43] <timotimo> well, if we want the curcode call to happen after an invocation ...

[21:43] <jnthn> In general, we know which more complex pieces more complex types have

[21:43] <jnthn> oops, which generic pieces

[21:43] <jnthn> We may lack a way to query that today

[21:44] <jnthn> But we could calculate the set of things are needed in the type environment

[21:44] <jnthn> And look them up and form the hash

[21:44] <jnthn> And pass it in to instantiate

[21:44] <vrurg> jnthn: if a role defines `my subset S of T` and then `method foo(S:D $a)` – it's only a job for runtime to resolve.

[21:44] <jnthn> What is generic here? I don't think we've ever allowed a subset to refine a generic type

[21:45] <vrurg> T, traditionally, is the generic.

[21:45] <timotimo> i think vrurg has a patch that makes that possible

[21:45] <vrurg> timotimo is right, https://github.com/rakudo/rakudo/pull/4058 implements subsets over generics.

[21:45] <jnthn> Right, but we've never considered soemthing being inside of a generic role as being subject to the outer genericity

[21:46] <jnthn> It's a major design change and if we do it should not just be considered for subset types

[21:47] <jnthn> It's probably very intimately connected to the problem of type declarations in a quasi

[21:48] <vrurg> jnthn: Actually, the PR is more about making nominalizables more transparent at MOP level. The subset S in my example will have S.HOW.archetypes.generic set, no matter how deep the T is buried inside of.

[21:48] <vrurg> *of it

[21:49] <vrurg> Same about the definite, so `S:D.HOW.archetypes.generic` would also be true.

[21:49] <jnthn> Hm, making that transitive makes some sense, but I guess then every mention of the type has to having it instantiated?

[21:50] <jnthn> s/having/have/

[21:50] <vrurg> SubsetHOW now have instantiate_generic, as well as CoercionHOW and DefiniteHOW.

[21:51] <jnthn> OK

[21:51] <vrurg> Pardon, definite doesn't have it, but neither it needs it.

[21:52] <jnthn> So far as the current perf problem goes, I'm afraid this is just the dispatcher thing all over again. We can't do these kinds of changes without having how to compile/run it efficiently as a design consideration.

[21:53] <timotimo> oh, huh, does dispatcher chains have an easy solution for this?

[21:53] <jnthn> I don't have the bandwidth to worry about this until new-disp and rakuast are done.

[21:53] *** Geth_ left
[21:53] <vrurg> As a matter of fact, I didn't want to go that deep initially, expecting all of it to be redone with RakuAST. But...

[21:54] <jnthn> Maybe yes, though I was hoping to keep MOP changes implied by RakuAST minimal, because it's already a heck of a job.

[21:55] <vrurg> Actually, to reduce the pain I caused, it feels to me that if we can inject some kind of a local-scoped variable which gets bound to the code object being invoked then the biggest problem of extra context allocations would be eliminated.

[21:55] *** Geth joined
[21:55] <jnthn> It may be possible to make curcode possible to inline

[21:55] <jnthn> Which would also maybe help for now?

[21:56] <vrurg> jnthn: My changes doesn't bind to QAST in neither way. I'm just trying to utilze them in the signature binding.

[21:56] <vrurg> jnthn: I think, that'd be a lot of help.

[21:56] <vrurg> Though we won't know until try. 

[21:56] <jnthn> Well yes, but signatures are only really efficient when we compile them, so alas any change to signature binding will involve twiddling with lower_signature

[21:57] <jnthn> yeah, it looks like the current code object is even stuck in a register so we can turn it into a set when we inline. Wow.

[21:57] <jnthn> Gotta be afk for a bit

[21:57] <vrurg> I'm somewhat worried about the size of the code generated by lower_signature. But perhaps a method call would be cheaper than using context.

[21:58] <vrurg> Ok, I'm need to go to. Looking forward for a verdict. :)

[21:59] <vrurg> *go too

[22:06] *** zakharyas left
[22:20] *** MasterDuke left
[23:04] <vrurg> jnthn: thanks for the curcode advise. It alone reduced the slowdown from 20-30% to 14-20%.

[23:05] <jnthn> vrurg: Yeah, nqp::ctx is really quite costly

[23:06] *** patrickb left
