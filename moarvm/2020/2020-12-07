[00:04] <MasterDuke> heh, looks like the first thing it found is right

[00:04] <MasterDuke> use after free https://github.com/MoarVM/MoarVM/blob/master/src/core/threadcontext.c#L55

[00:26] *** lucasb left
[03:24] *** leont left
[03:34] *** vesper11 left
[03:35] *** vesper11 joined
[04:36] *** vesper joined
[04:37] *** vesper11 left
[06:17] *** MasterDuke left
[06:42] <bartolin> thanks, lizmat! (I just noticed that I asked in the wrong channel yesterday. I thought I was in raku-dev ...)

[07:38] *** domidumont joined
[07:47] *** patrickb joined
[07:54] *** patrickb left
[08:14] *** MasterDuke joined
[08:52] <nine> timotimo: might be, yes

[09:01] *** zakharyas joined
[09:31] <nwc10> good *, #moarvm

[10:02] *** frost-lab joined
[10:12] <MasterDuke> morning. looks like the clang analyzer correctly found some other problems (unfortunately, all the true positives so far have been my fault...)

[10:13] <jnthn> morning o/

[10:13] <nwc10> \o

[10:14] <nwc10> jnthn: yes, (1 left shift (8 minus 5)) minus 1 is 7. I think that the comment could be clearer

[10:44] <timotimo> MasterDuke: right, i think that wants to use "parent" instead of tc

[10:44] <MasterDuke> hm, i just changed it to an MVM_panic

[10:45] <MasterDuke> think throwing with parent is better?

[10:45] <timotimo> it'll be a strange, possibly pathologic, situation when this error occurs, but i'm not sure if this is the right place to panic just yet

[10:46] <MasterDuke> heh, easy fix

[10:47] <MasterDuke> btw, it thinks https://github.com/MoarVM/MoarVM/blob/master/src/profiler/heapsnapshot.c#L1005 could leak result_buffer_insert_pos, is that correct?

[10:47] *** domidumont1 joined
[10:49] *** domidumont left
[11:11] <timotimo> looks right, i think a free before the return (and braces of course) would fix it

[11:14] <MasterDuke> looks like some are needed before the panics also

[11:33] *** domidumont1 left
[11:47] *** domidumont joined
[11:48] *** domidumont left
[11:54] *** domidumont joined
[12:06] *** domidumont left
[12:26] *** domidumont joined
[12:35] <Geth> Â¦ MoarVM/master: 25 commits pushed by (Nicholas Clark)++

[12:35] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/51cc76c16a49...6294b666f683

[12:43] *** domidumont left
[12:59] *** zakharyas left
[13:05] <lizmat> nwc10: could you describe in one or more paragraphs what you did ?  for the weekly?

[13:10] *** domidumont joined
[13:10] <MasterDuke> these lines https://github.com/MoarVM/MoarVM/blame/master/src/jit/dump.c#L76-L82 don't do anything it seems since `ptr` is never used later. which makes the `char *ptr` introduced on the previous line useless. https://github.com/MoarVM/MoarVM/commit/01aa8f4546db42dea87c84d00c4605bbb7fcbd57 introduces it, but i don't see why

[13:20] <MasterDuke> nm, the sprintfs to ptr write to node_label. clang analyzer got confused and so did i at first

[13:20] <MasterDuke> timotimo: in https://github.com/MoarVM/MoarVM/commit/9d8000c7731c811a42643c52fedd3f8c4e950dde it looks like there's a stray `return` that's still there

[13:21] <nwc10> lizmat: "or more' - last time "or more" was rather too much :-)

[13:21] <lizmat> well... I don't think so, I thought it was worth an extra RWN edition  :-)

[13:22] <nwc10> OK, so the "second'" part of the answer (first part not yet written or bailed out on) is that there are about 400 lines of comments at 

[13:22] <nwc10> https://github.com/MoarVM/MoarVM/blob/master/src/core/str_hash_table.h

[13:25] <lizmat> hmmm.. that feels it needs a place in a docs/hash-implementation.md ?

[13:26] <lizmat> which I could do :-)

[13:26] <jnthn> Dunno, the explanation being together with the code implementing it is maybe more likely to help those working on it?

[13:28] <lizmat> true, but having it hidden in the code, is not inducive to getting more people wanting to work on it?

[13:28] <nwc10> I hadn't considered a separate document.

[13:28] <nwc10> However, it seemed a more natural place to me at the time that I wrote it

[13:28] <nwc10> and I'm not sure how much "work" it still needs

[13:39] *** leont joined
[13:49] *** lucasb joined
[14:01] <nwc10> lizmat: mailed. Briefly AFK to make tea

[14:01] <lizmat> nwc10++

[14:16] *** zakharyas joined
[14:35] *** Kaiepi left
[14:37] *** Kaiepi joined
[14:39] *** frost-lab left
[15:38] *** cog left
[15:39] *** cog joined
[15:53] <nine> nwc10: is there any good way to get at the address of a hash slot in gdb? I'd like to trace back, where a method got added to a method cache.

[18:18] *** domidumont left
[18:54] *** zakharyas left
[18:55] <nwc10> nince: OK, so I haven't tried this, but as the obvious answer seemms to be "call MVM_str_hash_fetch_nocheck" I assume that that isn't possible because it's an inline function?

[18:55] <nwc10> nine^

[19:11] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/12/07/2020-49-shaped-shaping-up/

[19:57] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1399: Fix some simple things the clang static analyzer found

[19:57] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1399

[20:41] <jnthn> wow, busy week; lizmat++

[20:48] *** zakharyas joined
[21:03] <nine> What I know so far (so that I don't forget): It breaks when multiple threads create the same mixin type concurrently. Once the type is in the cache, we're fine. The no such attribute error comes from bind_attribute being called with a class_handle from one of the losing threads, i.e. one of the types that doesn't end up in the cache.

[21:04] <nine> The class_handle is from $?CLASS in the the role method's outer, i.e. the closure created during specialization.

[21:04] <nine> Somehow that ends up in the winner's STable's method_cache

[21:32] <dogbert17> nine: have you tried tsan to see if it comes up with anything?

[21:34] <nine> no

[21:35] <nine> It's too consistent in its failure mode to be something like general memory corruption

[21:35] <nine> With rr record -h --num-cores=16 --num-cpu-ticks=10 it's nicely reproducible

[21:37] <dogbert17> so you're not looking for a data race then?

[21:46] <nine> Feels more like some piece of global state that we shouldn't have

[21:46] <nine> Well, I'll find out more tomorrow

[21:46] <nine> good night!

[22:09] *** Kaiepi left
[22:10] *** Kaiepi joined
[22:25] <dogbert17> ++nine

[22:27] *** zakharyas left
