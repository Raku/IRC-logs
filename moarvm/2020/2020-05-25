[02:04] *** klapperl_ joined
[02:05] *** klapperl left
[03:01] *** leedo left
[03:03] *** leedo joined
[06:19] <nwc10> good *, #moarvm 

[06:25] *** klapperl_ left
[06:57] *** domidumont joined
[07:53] *** Kaiepi left
[07:57] *** Kaiepi joined
[08:08] <MasterDuke> am i correct in assuming you can do a hash bind of an entry, and then fill in the entries members?  or do they have to be populated first?

[08:08] <nwc10> either order works with UTHash

[08:09] <MasterDuke> good, thanks

[08:17] *** Altai-man_ joined
[08:27] *** sena_kun joined
[08:29] *** Altai-man_ left
[08:42] *** klapperl joined
[10:16] *** Kaeipi joined
[10:16] *** Kaiepi left
[10:26] *** Altai-man_ joined
[10:29] *** sena_kun left
[11:19] *** konvertex joined
[11:52] *** Geth left
[11:52] *** Geth joined
[12:27] *** sena_kun joined
[12:29] *** Altai-man_ left
[13:00] <jnthn> So...that pesky segv from Friday...

[13:03] <jnthn> nwc10: Interesting that http://paste.scsys.co.uk/589021 blows up after test 6 with ASAN, but valgrind...uh, hmm, exists with segfault instead of reporting a memory error...wat

[13:03] <jnthn> And not until after test 14.

[13:06] <jnthn> Also On My Machine ASAN also only blows up after 14

[13:06] <jnthn> Though the trace is useful

[13:18] <jnthn> goodness, something is very busted...

[13:38] <MasterDuke> if anyone is interested, https://gist.github.com/MasterDuke17/7844a9712990384ee9f14cc6f6bc4e4e  is the segv i get on my branch that adds lots of frees before throws. the repl errors on master with `Unhandled lexical type 'num32' in lexprimspec` (the test is todo'ed), but doesn't segv

[13:43] *** Merfont joined
[13:44] <Geth> ¦ MoarVM/new-disp: 5676b70c85 | (Jonathan Worthington)++ | 3 files

[13:44] <Geth> ¦ MoarVM/new-disp: Fix bytecode/C function/bytecode dispatch sandwich

[13:44] <Geth> ¦ MoarVM/new-disp: 

[13:44] <Geth> ¦ MoarVM/new-disp: Need to make sure we properly track when we thunked, so that we don't

[13:44] <Geth> ¦ MoarVM/new-disp: scribble over the invoked frame with a place we thought we were

[13:44] <Geth> ¦ MoarVM/new-disp: returning to.

[13:44] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5676b70c85

[13:45] <MasterDuke> well, that turns out to have been easy to diagnose and fix. don't know why i missed it earlier (got sidetracked thinking it was that change in container.c), but i was freeing something that hadn't been alloced

[13:46] *** Kaeipi left
[13:50] <jnthn> OK, now I need to go for the guards, I guess...

[13:51] <MasterDuke> and everything tests clean. wonder if i remember where in the list of stuff the plugin found i was

[13:57] <nwc10> jnthn: All tests successful.

[14:06] <MasterDuke> oh, maybe i was at the end except for the MVM_HASH_(BIND|GET) stuff (which is now taken care of) and the MVM_ASSIGN_REF stuff (which was decided isn't needed)

[14:08] <jnthn> nwc10: yay

[14:08] <jnthn> Updates around https://gist.github.com/jnthn/e81634dec57acdea87fcb2b92c722959#guarding and in capture transformation to reflect latest design tweaks

[14:08] <jnthn> Now to implement the guarding bits

[14:23] <nwc10> got a SEGV in "Stage optimize" for the setting

[14:26] *** Altai-man_ joined
[14:29] *** sena_kun left
[14:54] *** Merfont left
[14:57] *** Kaiepi joined
[15:08] <Geth> ¦ MoarVM/new-disp: 1e45dfb999 | (Jonathan Worthington)++ | 11 files

[15:08] <Geth> ¦ MoarVM/new-disp: Bring in tracked values in dispatchers

[15:08] <Geth> ¦ MoarVM/new-disp: 

[15:08] <Geth> ¦ MoarVM/new-disp: These will cover values from incoming argument captures, but also later

[15:08] <Geth> ¦ MoarVM/new-disp: from read attributes, so we get a safe and uniform interface for doing

[15:08] <Geth> ¦ MoarVM/new-disp: guards. For now, we can just insert such an arg into another capture.

[15:08] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1e45dfb999

[15:18] <Geth> ¦ MoarVM/new-disp: 85d0608404 | (Jonathan Worthington)++ | src/disp/syscall.c

[15:18] <Geth> ¦ MoarVM/new-disp: Tweak name of insert literal obj arg, add str too

[15:18] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/85d0608404

[15:36] *** domidumont left
[15:40] <Geth> ¦ MoarVM/new-disp: ab7ed52a42 | (Jonathan Worthington)++ | 3 files

[15:40] <Geth> ¦ MoarVM/new-disp: Stub in all dispatcher guard syscalls

[15:40] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/ab7ed52a42

[15:57] *** domidumont joined
[16:19] *** domidumont left
[16:27] *** sena_kun joined
[16:29] *** Altai-man_ left
[16:44] <Geth> ¦ MoarVM/new-disp: 8a623816ce | (Jonathan Worthington)++ | 2 files

[16:44] <Geth> ¦ MoarVM/new-disp: Sketch out data structures for dispatch recording

[16:44] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8a623816ce

[16:45] <nwc10> jnthn: still a SEGV in core setting - "==16923==Hint: address points to the zero page.

[16:45] <nwc10> "

[16:45] <nwc10>     #0 0x7f7f5bb5ef74 in MVM_frame_unwind_to src/core/frame.c:1310

[16:45] <nwc10> ...

[16:46] <jnthn> nwc10: Will care later.

[16:46] <nwc10> OK :-)

[16:46] <nwc10> that's why I didn't go fine the nopaste URL

[16:47] <jnthn> I want to revist a few things in that area anyway, but would rather get some progress in on the dispatch stuff rather than shave another yak :)

[16:48] <jnthn> I mean, they have to be shaved eventually, but... :)

[16:51] <Geth> ¦ MoarVM/new-disp: 379b01942d | (Jonathan Worthington)++ | src/disp/program.h

[16:51] <Geth> ¦ MoarVM/new-disp: Model multi-level capture derivations too

[16:51] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/379b01942d

[16:51] <jnthn> Glad to have figured out that data structure design; back to the next steps being a SMOP again.

[16:58] <jnthn> dinner &

[16:59] <timotimo> /* The index involved in the inert or drop. */  -  the dispatch programs are inert? :)

[17:19] <nine> timotimo: well for now ;)

[17:21] <timotimo> keep poking it with a stick until it moves

[17:22] <nine> I'd think poking with a keyboard would be more promising

[18:27] *** Altai-man_ joined
[18:29] *** sena_kun left
[19:54] *** zakharyas joined
[20:28] *** sena_kun joined
[20:29] *** Altai-man_ left
[21:04] *** zakharyas left
[21:18] <MasterDuke> how easy would it be to create a dummy STable to attach a REPR_data to, just for the purpose of calling gc_free_repr_data() with it?

[21:59] <jnthn> Why would that be needed?

[22:00] <jnthn> When does repr data preceed the type existing?

[22:00] <MasterDuke> when it's being composed

[22:02] <MasterDuke> e.g., https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L876

[22:03] <MasterDuke> i just added a free_repr_data() that's a virtual copy of gc_free_repr_data() but just takes an MVMP6opaqueREPRData

[22:04] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1291 will be updated soon if you're curious

[22:05] *** patrickb joined
[22:27] *** Altai-man_ joined
[22:29] *** sena_kun left
[22:47] *** patrickb left
[23:08] <MasterDuke> updated, think it's ready to be looked at

[23:23] *** MasterDuke left
