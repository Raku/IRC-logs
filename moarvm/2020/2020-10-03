[00:11] *** nativecallable6 left
[00:11] *** bloatable6 left
[00:11] *** statisfiable6 left
[00:11] *** benchable6 left
[00:11] *** committable6 left
[00:11] *** evalable6 left
[00:11] *** releasable6 left
[00:11] *** coverable6 left
[00:11] *** notable6 left
[00:11] *** shareable6 left
[00:11] *** linkable6 left
[00:11] *** quotable6 left
[00:11] *** unicodable6 left
[00:11] *** tellable6 left
[00:11] *** squashable6 left
[00:11] *** sourceable6 left
[00:11] *** greppable6 left
[00:11] *** bisectable6 left
[00:12] *** greppable6 joined
[00:12] *** bloatable6 joined
[00:12] *** tellable6 joined
[00:12] *** committable6 joined
[00:12] *** shareable6 joined
[00:12] *** evalable6 joined
[00:12] *** sourceable6 joined
[00:12] *** releasable6 joined
[00:12] *** notable6 joined
[00:12] *** coverable6 joined
[00:13] *** benchable6 joined
[00:13] *** unicodable6 joined
[00:13] *** statisfiable6 joined
[00:14] *** linkable6 joined
[00:14] *** bisectable6 joined
[00:14] *** quotable6 joined
[00:14] *** squashable6 joined
[00:14] *** nativecallable6 joined
[01:49] *** leont left
[05:48] <nine> moon-child: those errors are hard and a single core dump most likely won't be enough. Can you post code somewhere that reproduces this issue (even if only sometimes)?

[06:23] <moon-child> nine: https://github.com/moon-chilled/SEProxy/blob/master/seproxy.p6

[06:23] <moon-child> it's quite innocuous (though not very well written)

[06:24] <moon-child> another thing: I was using mvm from a few months ago; just updated it.  Might that be the issue?

[06:24] <moon-child> another thing: I'm on freebsd

[06:30] *** Altai-man joined
[09:10] <nine> Yes, a newer MoarVM may already have a fix (as well as new bugs...)

[09:11] <nwc10> good *, #moarvm 

[09:15] *** MasterDuke joined
[09:30] *** domidumont joined
[09:40] <nine> good weekend!

[09:42] *** sena_kun joined
[09:43] *** Altai-man left
[09:53] <timotimo> good *9

[10:09] <MasterDuke> rainy weekend here

[10:10] <nwc10> currently sunny, but wind threatened

[11:12] *** leont joined
[13:35] *** raku-bridge left
[13:36] *** raku-bridge joined
[13:36] *** raku-bridge left
[13:36] *** raku-bridge joined
[13:41] *** Altai-man joined
[13:43] *** sena_kun left
[13:59] *** dogbert17 joined
[14:03] <dogbert17> m: say "Hi #moarvm"

[14:03] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Hi #moarvm␤»

[14:04] <dogbert17> does anyone know if the following debugserver function is in fact used? https://github.com/MoarVM/MoarVM/blob/master/src/debug/debugserver.c#L146

[14:05] <dogbert17> timotimo ^^

[14:08] <dogbert17> my reason for asking is that it seems as if the last parameter, i.e. 'MVMuint32 *file_idx' has not been properly initialized

[14:09] <dogbert17> see https://github.com/MoarVM/MoarVM/blob/master/src/instrument/line_coverage.c#L61 and line 22 in the same file

[14:24] <MasterDuke> how could i end up in this branch (assuming the `|| 1` wasn't in the if)? i.e., how can i call `%` with two bigints that have smallint values?

[14:39] <dogbert17> MasterDuke: what branch?

[14:39] *** zakharyas joined
[14:40] <MasterDuke> oh, ha. https://github.com/MoarVM/MoarVM/blob/master/src/math/bigintops.c#L543-L545

[14:47] <dogbert17> I'm note sure I understand. Do you want to use the else branch if the two operands are small?

[14:48] <MasterDuke> yeah. it's currently disabled by the `1 ||` because the standard c `%` operator doesn't work for us, but i want to try and create a working smallint version

[14:49] <MasterDuke> but i can't seem to get to the function at all without having actually big bigints

[14:54] <dogbert17> is it the size of a number which makes a bigint big?

[14:56] *** brrt joined
[14:58] <dogbert17> hello brrt

[14:58] <brrt> hi dogbert17

[15:04] <dogbert17> MasterDuke: does commit 8e9761efb3e give any clues?

[15:06] <dogbert17> brrt: are local variable, which are not explicitly initializes, undefined in c?

[15:07] <dogbert17> *variables

[15:07] <nine> yes

[15:07] <dogbert17> nine: any comment wrt to the stuff I wrote here an hour ago, have I misunderstood what's going on?

[15:10] *** zakharyas1 joined
[15:12] *** zakharyas left
[15:14] *** leont left
[15:15] <brrt> dogbert17: yes, undefined

[15:15] <brrt> in practice, without optimization, garbage values;

[15:15] <brrt> under influence of optimization pretty unpredictable

[15:16] <brrt> I think some compilers default to setting to zero

[15:16] <brrt> but don't rely on it

[15:17] <dogbert17> brrt and nine: thank you

[15:31] <dogbert17> MasterDuke: seems as if MVM_bigint_mod is bypassed if the numbers are small

[15:31] <MasterDuke> yeah

[15:35] <MasterDuke> but is that always going to be the case? if it's guaranteed never to happen, we can simplify. if it's just some combination of optimizations, codegen, etc that means we haven't been able to trigger it in practice, it has to stay

[15:37] <MasterDuke> i tried stuff like `my Int $a = 2**66 + 5; my Int $b = 2**67 + 3; say ($a - 2**66) % ($b - 2**67)`, but no dice

[15:38] <MasterDuke> i can if i call nqp::mod_I directly, but why isn't it being codegenned?

[15:44] <moritz> sounds like to be able to know for certain you don't need the bigint variant, you must know the value of the operands. If you know that at compile time, you can just constant-fold it away

[15:51] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/src/core.c/Int.pm6#L375-L392

[15:52] <dogbert17> mod_i vs mod_I

[15:53] <MasterDuke> that can probably be simplified if i get a working small bigint version. might be faster then without all the extra hll code

[15:56] <brrt> mind that mod_i is not a very fast opcode because the underlying idiv is a slow, slow, slow operation

[15:56] <brrt> (presumably because of this, everybody optimizes it away; presumably because of that, intel/amd get away with not optimizing)

[15:57] <brrt> bbiab

[15:57] *** brrt left
[16:38] *** codesections joined
[17:12] *** colomon_ joined
[17:13] *** raku-bridge left
[17:24] *** domidumont left
[17:42] *** sena_kun joined
[17:44] *** Altai-man left
[18:04] *** brrt joined
[18:20] <brrt> \o

[18:20] <nwc10> o/

[19:19] <brrt> One of the things that stuck to me when I read the long javascript article that MasterDuke shared some time ago...

[19:19] <brrt> Their interpreter is written in assembly (with macros, and 'machine independent', so far as possible)

[19:19] <brrt> luajit has the same thing

[19:20] <brrt> and ... truth be told it's really a good idea

[19:31] *** codesections left
[19:32] *** brrt left
[19:39] *** codesections joined
[19:40] *** patrickb joined
[20:04] *** patrickb left
[20:12] *** patrickb joined
[20:12] *** patrickb left
[21:38] *** sena_kun left
[21:58] *** zakharyas1 left
[22:24] <timotimo> have you had any look at jitter? http://ageinghacker.net/git/cgit.cgi/jitter

[22:24] <timotimo> it looked like it has a few cool tricks up its sleeve

[22:30] <timotimo> there was a presentation about it, i saw it on video, but i'm not sure where i found the link

[22:30] <timotimo> http://ageinghacker.net/talks/jitter-slides--saiu--ghm2017--2017-08-25.pdf or perhaps i have really only seen the slides?

[22:31] <timotimo> andhallucinated the video

[22:32] <moon-child> timotimo: I've heard of it.  I hear it's not actually that fast, though.  And (iirc) it wouldn't let you do type specialization or anything like that

[22:33] <timotimo> oh,hm

[22:33] <timotimo> we get a lot of our speed even if jit fails from type specialization

[22:35] <timotimo> the developer of gnu poke uses jitter, maybe that'sa good place to ask,if not where-ever jitterusershang out

[23:12] <MasterDuke> yep. https://github.com/rakudo/rakudo/blob/master/src/core.c/Int.pm6#L375-L392 is now just `nqp::if(b, nqp::mod_I(nqp::decont(a),nqp::decont(b),Int),Failure.new(X::Numeric::DivideByZero.new(:using<%>, :numerator(a))))` and `my $a; for ^1_000_000 { $a = $_ % ($_ + 2) }; say now - INIT now; say $a` goes from 0.16s to 0.088s. passes a spectest

[23:16] <timotimo> oh my

[23:16] <timotimo> that is from switching libtommath for gmp?

[23:17] <timotimo> hum.does $_ % ($_ + 2) alwaysresult in $_? maybenot for negatives

[23:18] <timotimo> oh, or is thatfrom putting a "no big integer needed" path in there by having it inside the implementation of mod_I?

[23:18] <timotimo> could you look at numbers above 2 ** 32?

[23:18] <timotimo> because those would be handle-able by mod_i,but will have a realbigint formod_I

