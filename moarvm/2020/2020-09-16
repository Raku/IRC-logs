[00:41] *** lucasb left
[02:07] *** MasterDuke left
[04:44] <nwc10> good *, #moarvm 

[05:58] *** leont left
[06:22] *** sena_kun joined
[07:02] *** sena_kun left
[07:06] *** sena_kun joined
[07:15] <nwc10> .tell brrt o/

[07:15] <tellable6> nwc10, I'll pass your message to brrt

[07:24] *** Altai-man joined
[07:26] *** sena_kun left
[07:51] *** zakharyas joined
[07:51] *** MasterDuke joined
[08:22] *** domidumont joined
[09:45] *** MasterDuke left
[10:04] <timotimo> https://github.com/erlang/otp/pull/2745 - erlang otp jit based on ASMJIT with interesting tidbits like "We also considered using dynasm, but found the tooling that comes with asmjit to be better." and that it only eliminates dispatch overhead and specializing on argument types, and doing it at load-time

[10:04] <timotimo> i assume erlang "beam instructions" are sufficiently statically optimizable in this way

[10:25] *** MasterDuke joined
[11:01] *** MasterDuke left
[11:12] *** timotimo left
[11:13] *** timo joined
[11:14] *** timo is now known as Guest97478

[11:14] *** zakharyas left
[11:15] *** Guest97478 is now known as timotimo

[11:25] *** sena_kun joined
[11:27] *** Altai-man left
[11:59] *** MasterDuke joined
[12:15] *** leont joined
[13:00] *** rypervenche left
[13:04] *** rypervenche joined
[13:45] *** zakharyas joined
[13:52] <Geth> Â¦ MoarVM/optimize-boxed-float-boolification: 50d3311c75 | (Jonathan Worthington)++ | 8 files

[13:52] <Geth> Â¦ MoarVM/optimize-boxed-float-boolification: Better specialize boolification of boxed Num

[13:52] <Geth> Â¦ MoarVM/optimize-boxed-float-boolification: 

[13:52] <Geth> Â¦ MoarVM/optimize-boxed-float-boolification: Previously this wasn't specialized at all, and so fell back on the

[13:52] <Geth> Â¦ MoarVM/optimize-boxed-float-boolification: late-bound `istrue` instruction. Now it optimizes into an unbox and a

[13:52] <Geth> Â¦ MoarVM/optimize-boxed-float-boolification: truth test on the unboxed float, which in turn can be JIT-compiled into

[13:52] <Geth> Â¦ MoarVM/optimize-boxed-float-boolification: a relatively short sequence of instructions.

[13:52] <Geth> Â¦ MoarVM/optimize-boxed-float-boolification: review: https://github.com/MoarVM/MoarVM/commit/50d3311c75

[13:52] <Geth> Â¦ MoarVM: jnthn++ created pull request #1346: Better specialize boolification of boxed Num

[13:52] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1346

[14:09] <timotimo> assumedly you ran into some code that hits this often enough to matter for performance? :)

[14:11] <timotimo> always love seeing a factor or before/after numbers :)

[14:12] <MasterDuke> https://github.com/rakudo/rakudo/issues/3910

[14:20] <MasterDuke> https://gist.github.com/Whateverable/dd3eb829782403543b22b6e594cc3371 has some maybe-relevant timings

[14:33] <timotimo> ah, a nice speedup, indeed

[14:33] <Geth> Â¦ MoarVM: 322c2e0b4e | (Nicholas Clark)++ | src/core/str_hash_table.h

[14:33] <Geth> Â¦ MoarVM: Comments and ASCII diagrams explaining the hash structure.

[14:33] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/322c2e0b4e

[14:34] <nwc10> the hash structure "this week".

[14:34] <nwc10> there's a plan for post release.

[14:35] <nwc10> to merge the allocations.

[14:36] <timotimo> ah, so the "metadata and other stuff" and key, value, etc go in one big block?

[14:37] *** MasterDuke left
[14:37] <nwc10> yes.

[14:37] <nwc10> I have the test code working. Now I just need to port it over.

[14:38] <jnthn> Another halving of the number of allocations. :)

[14:38] <nwc10> The bit I'm wondering about (and this can happen later) is whether to use the FSA. Beacuse for the initial hash sizes the total size needed fits inside the FSA

[14:39] <nwc10> And I don't know how frequently we create "small" hashes

[14:39] <nwc10> versus hashes that grow beyond 32 entries.

[14:39] <nwc10> in Perl 5 land, there are often lots of small hashes, because hashes are also objects. (And symbol tables, but they usually have many entries)

[14:39] <jnthn> My guess would be that a lot of hashes are small

[14:39] <jnthn> But...yes, that

[14:40] <nwc10> I guess I can test it and see what the max RSS is with the FSA and without. Or just wonder about the complexity.

[14:40] <timotimo> i could always dump stats for yall

[14:40] <nwc10> anyway, it's not yet (re)written

[14:40] <nwc10> if that's easy (in advance) that would be cool. but actually, no rush. It can be done "later".

[14:41] <nwc10> currently I am considering beer.

[14:41] <timotimo> just need to know where to do that :)

[14:41] <timotimo> like, end of stage parse perhaps?

[14:42] <nwc10> yes, I guess so

[14:43] <timotimo> let me get all newest commits maybe

[14:43] *** MasterDuke joined
[14:43] <timotimo> ah, just the comment changed

[14:49] <jnthn> Core setting compilation is probably quite a skrewed benchmark though, in that due to it doing a load of parsing, that will produce a lot more match objects and thus small hashes than the average program probably does

[14:49] <jnthn> *skewed

[14:49] <timotimo> true

[14:49] <timotimo> qast nodes also have hashes on them in many cases

[14:53] <jnthn> many many many many :)

[14:54] <jnthn> The RakuAST-based compiler basically doesn't use annotations on QAST nodes, so we'll save those at least :)

[14:57] <timotimo> very good

[14:58] <jnthn> Alas, it only passes a little over 200 spectest files (in full, others partially), so there's a bit of work to go on it yet...

[14:58] <timotimo> quite

[14:59] <timotimo> got any plan in particular to handle nqp:: ops in compile-time code? can't really just literally call an nqp op from nqp code without compilation

[15:00] <jnthn> Will probably just punt those to the compiler.

[15:00] <timotimo> there could of course be a class that has methods for a bunch of the nqp ops and we just call methods on that

[15:00] <jnthn> It's not like we want to encourage writing nqp::ops anyway

[15:01] <timotimo> the stuff in the core setting, tho :)

[15:01] <jnthn> Yes, but how much at BEGIN time? :)

[15:01] <timotimo> the specific instance that makes me ask is one of the first trait mods that uses an nqp op

[15:02] <timotimo> but i didn't verify how often that is actually called, though

[15:03] <timotimo> trait_mod:<is>($child, $parent) uses nqp::can

[15:03] <timotimo> is DEPRECATED, is required, and is default do

[15:04] <timotimo> is tighter, is looser, is equiv, is preq, is export

[15:06] <timotimo> but we did all that for performance optimization, who knows if we'll revert a lot of the "uglification" when RakuAST gets good at generating optimal code from idiomatic raku code

[15:12] *** zakharyas left
[15:24] *** Altai-man joined
[15:27] *** sena_kun left
[15:33] <timotimo> ooh, i looked only at a minor collection, that's why there's only a couple of hashes, lol

[15:36] *** nebuchadnezzar left
[15:37] <timotimo> https://gist.github.com/timo/44d925390cbd143b30f0b8a02ebfc54e

[15:37] *** Guest65602 joined
[15:37] <timotimo> minor and major in two files

[15:40] <[Coke]> nwc10: "whereas what actually do"

[15:46] <nwc10> ooh, a typo?

[15:48] <timotimo> ("1 6" => 56, "4 6" => 39, "3 6" => 33, "2 6" => 27, "0 0" => 23, "9 12" => 7, "11 12" => 6, "7 12" => 5, "766 768" => 4, "6 6" => 3, "3379 6144" => 1, "78 96" => 1, "36 48" => 1, "6408 12288" => 1).Seq

[15:48] <timotimo> that took way too long LOL

[15:49] <timotimo> this is how many items in use, space, how many items big the storage is

[15:49] <timotimo> well, cur_items and max_items

[15:49] <timotimo> didn't look if max_items is including or excluding the extra at the end, but probably not, since there's 11/12 in there?

[15:56] <timotimo> that is one hella big hash, tho

[16:00] <timotimo> https://gist.github.com/timo/44d925390cbd143b30f0b8a02ebfc54e (same url as before) has the fsck output for the very big hash

[16:01] <timotimo> oh, ummm

[16:01] <timotimo> firefox is unhappy about the gist page being so huge it seems like

[16:01] <timotimo> https://gist.githubusercontent.com/timo/44d925390cbd143b30f0b8a02ebfc54e/raw/1d99b9fe166dc07e995b7cb93ab9a868ef7dce6a/huge_hash_contents.txt

[16:01] <jnthn> String constant table?

[16:01] <jnthn> For unique strings during compilation?

[16:02] <timotimo> quite possibly, yeah

[16:02] <timotimo> since it also contains filenames like SETTING::...

[16:05] <timotimo> i'll output the smaller one, too

[16:08] <timotimo> https://gist.githubusercontent.com/timo/fa67feb9edd77e50c26f78e5d73dcc2b/raw/1323d837f98ba60dd1bc2de565f0408b01587d69/gistfile1.txt - this is the smoler one

[16:08] <timotimo> it's ... literally numbers

[16:09] <timotimo> do we have a string numification cache of this size?

[16:09] *** Guest65602 is now known as nebuchadnezzar`

[16:11] *** nebuchadnezzar` is now known as nebuchadnezzar

[16:14] <timotimo> ah, the values are MAST::Frame objects, or at least one is

[16:17] <timotimo> nwc10: do you think it'd be a bad idea to offer an fsck flag that casts entries to MVMHashEntry and outputs the debug_name of the st the value has?

[16:18] <timotimo> not all str_hash_table store MVMHashEntry, of course

[16:18] <timotimo> but if you're calling the fsck function, you would know that

[16:20] * timotimo implements and will ask for forgiveness later

[16:31] *** domidumont left
[16:50] <timotimo> when do we build one central "dump a smol representation of this object, whatever it may be" function

[16:52] <timotimo>   1   1 51b22accc4f020 ( 5) 0x1e96e80 False object (BOOTHash)

[16:52] <timotimo>   2   2 4eb0d297c22c16 ( 4) 0x1e95b30 Code object (BOOTHash)

[16:52] <timotimo>   3   2 b99a6291b74b79 (18) 0x5a7e100 PredictiveIterator object (BOOTHash)

[16:52] <timotimo> [...]

[16:52] <timotimo> recursion, tho ... :D

[16:55] <timotimo> MVM_dump_whatsthis

[17:11] *** MasterDuke left
[17:19] <timotimo>   1

[17:19] <timotimo> NQPRoutine.new(#`(from NQPRoutine) $!do, $!signature, $!dispatchees, $!dispatch_cache, $!dispatch_order, $!clone_callback, $!onlystar=0)

[17:19] <timotimo>   2   1 1059557ceb465b9 ( 2) 0x5e25e0 at object (NQPRoutine)

[17:19] <timotimo> NQPRoutine.new(#`(from NQPRoutine) $!do, $!signature, $!dispatchees, $!dispatch_cache, $!dispatch_order, $!clone_callback, $!onlystar=0)

[17:19] <timotimo>   3   1 1eee78eba121738 ( 4) 0x5e0ab0 made object (NQPRoutine)

[17:19] <timotimo> NQPRegex.new(#`(from NQPRegex) $!do, $!caps=RegexCaptures.new(#`(from RegexCaptures) @!pos-capture-counts, @!named-capture-names, @!named-capture-counts, $!onlyname='', $!flags=1), $!nfa, %!alt_nfas, $!generic_nfa, @!nested_codes, $!clone_callback)

[17:20] <timotimo>  5F   1 2fdde68b8b96f419 (22) 0x6723b0 quote_escape:sym<misc> object (NQPRegex)

[17:20] <timotimo> doesn't recurse too deeply apparently? %)

[17:28] *** Altai-man left
[17:31] *** Altai-man joined
[17:33] <timotimo> MAST::Lexical.new(#`(from MAST::Lexical) $!index=165, $!frames_out=0)

[17:33] <timotimo> 1A2   1 d15135b8edc5a72a ( 4) 0x273efd0 Pair object (MAST::Lexical)

[17:33] <timotimo> MAST::Lexical.new(#`(from MAST::Lexical) $!index=78, $!frames_out=0)

[17:33] <timotimo> 1A3   1 d1afe9cc80bbc303 ( 4) 0x1e95d40 Slip object (MAST::Lexical)

[17:33] <timotimo> for some reason i find this interesting %)

[17:34] *** Altai-man left
[17:34] <timotimo> (though of course having the "extra info" above the line it refers to is confusing)

[17:38] <timotimo> oarVM::StringHeap.new(#`(from MoarVM::StringHeap) $!strings, $!strings-count=6404, @!orig-strings, %!strings), $!callsites=MoarVM::Callsites.new(#`(from MoarVM::Callsites) $!callsites, %!callsites, $!string-heap=MoarVM::StringHeap.new(#`(from MoarVM::StringHeap) $!strings, $!strings-count=6404, @!orig-strings, %!strings), $!latin1decoder), $!annotations, $!compunit=MAST::CompUnit.new(#`(from

[17:38] <timotimo> MAST::CompUnit) @!frames, $!hll='Raku', $!mainline_frame=MAST::Frame.new(#`(from MAST::Frame) $!cuuid='6154', $!name='', @!lexical_types, @!lexical_names, @!local_types, $!outer=(MAST::Node), %!lexical_map, %!debug_map, @!debug_map_idxs, $!flags=65536, $!frame_idx=-1, @!static_lex_values, $!code_obj_sc_dep_idx=0, $!code_obj_sc_idx=0, $!writer=MoarVM::BytecodeWriter.new(#`(from

[17:38] <timotimo> MoarVM::BytecodeWriter) $!mbc, $!string-heap=MoarVM::StringHeap.new(#`(from MoarVM::StringHeap) $!strings, $!strings-count=6404, @!orig-strings, %!strings), $!callsites=MoarVM::Callsites.new(#`(from MoarVM::Callsites) $!callsites, %!callsites, $!string-heap=MoarVM::StringHeap.new(#`(from MoarVM::StringHeap) $!strings, $!strings-count=6404, @!orig-strings, %!strings), $!latin1decoder),

[17:38] <timotimo> $!annotations, $!compunit=MAST::CompUnit.new(#`(from MAST::CompUnit) @!frames, $!hll='Raku', $!mainline_frame=MAST::Frame.new(#`(from MAST::Frame) $!cuuid='6154', $!name='', @!lexical_types, @!lexical_names, @!local_types, $!outer=(MAST::Node), %!lexical_map, %!debug_map, @!debug_map_idxs, $!flags=65536, $!frame_idx=-1, @!static_lex_values, $!code_obj_sc_dep_idx=0, $!code_obj_sc_idx=0,

[17:38] <timotimo> $!writer=MoarVM::BytecodeWriter.new(#`(from MoarVM::BytecodeWriter) $!mbc, $!string-heap=MoarVM::StringHeap.new(#`(from MoarVM::StringHeap) $!strings, $!strings-count=6404, @!orig-strings, %!strings), $!callsites=MoarVM::Callsites.new(#`(from MoarVM::Callsites) $!callsites, %!callsites, $!string-heap=MoarVM::StringHeap.new(#`(from MoarVM::StringHeap) $!strings, $!strings-count=6404, @!orig-strings,

[17:38] <timotimo> %!strings), $!latin1decoder), $!annotations, $!compunit=MAST::CompUnit.new(#`(from MAST::CompUnit) @!frames, $!hll='Raku', $!mainline_frame=MAST::Frame.new(#`(from MAST::Frame) $!cuuid='6154', $!name='', @!lexical_types, @!lexical_names, @!local_types, $!outer=(MAST::Node), %!lexical_map, %!debug_map, @!debug_map_idxs, $!flags=65536, $!frame_idx=-1, @!static_lex_values, $!code_obj_sc_dep_idx=0,

[17:38] <timotimo> $!code_obj_sc_idx=0, $!writer=MoarVM::BytecodeWriter.new(#`(from MoarVM::BytecodeWriter) $!mbc, $!string-heap=MoarVM::StringHeap.new(#`(from MoarVM::StringHeap) $!strings, $!strings-count=6404, @!orig-strings, %!strings), $!callsites=MoarVM::Callsites.new(#`(from MoarVM::Callsites) $!callsites, %!callsites, $!string-heap=MoarVM::StringHeap.new(#`(from MoarVM::StringHeap) $!strings,

[17:38] <timotimo> $!strings-count=6404, @!orig-strings, %!strings), $!latin1decoder), $!annotations, $!compunit=MAST::CompUnit.new(#`(from MAST::CompUnit) @!frames, $!hll='Raku', $!mainline_frame=MAST::Frame.new(#`(from MAST::Frame) $!cuuid='6154', $!name='', @!lexical_types, @!lexical_names, @!local_types, $!outer=(MAST::Node), %!lexical_map, %!debug_map, @!debug_map_idxs, $!flags=65536, $!frame_idx=-1,

[17:38] <timotimo> @!static_lex_values, $!code_obj_sc_dep_idx=0, $!code_obj_sc_idx=0, $!writer=MoarVM::BytecodeWriter.new(#`(from MoarVM::BytecodeWriter) $!mbc, $!string-heap=MoarVM::StringHeap.new(#`(from MoarVM::StringHeap) $!strings, $!strings-count=6404, @!orig-strings, %!strings), $!callsites=MoarVM::Callsites.new(#`(from MoarVM::Callsites) $!callsites, %!callsites, $!string-heap=MoarVM::StringHeap.new(#`(from

[17:38] <timotimo> MoarVM::StringHeap) $!strings, $!strings-count=6404, @!orig-strings, %!strings), $!latin1decoder), $!annotations, $!compunit=MAST::CompUnit.new(#`(from MAST::CompUnit) @!frames, $!hll='Raku', $!mainline_frame=MAST::Frame.new(#`(from MAST::Frame) $!cuuid='6154', $!name='', @!lexical_types, @!lexical_names, @!local_types, $!outer=(MAST::Node), %!lexical_map, %!debug_map, @!debug_map_idxs,

[17:38] <timotimo> $!flags=65536, $!frame_idx=-1, @!static_lex_values, $!code_obj_sc_dep_idx=0, $!code_obj_sc_idx=0, $!writer=MoarVM::BytecodeWriter.new(#`(from MoarVM::BytecodeWriter

[17:38] <timotimo> oh yikes, sorry about the many lines %)

[17:38] <timotimo> just thought that's frickin funny

[17:39] <timotimo> looks infinite-recursive

[17:47] *** patrickb joined
[17:57] <timotimo> would want something like a seen hash, though tbh it'd already be a big help if it knew what's on the stack already and avoided going back into that

[18:13] <timotimo> ah, yes, every MAST::Frame has an $!outer

[18:15] <timotimo> and a link to the compunit, which has a link to its mainline frame

[18:16] <timotimo> $!outer=(MAST::Node), %!lexical_map, %!debug_map, @!debug_map_idxs, $!flags=65536, $!frame_idx=-1, @!static_lex_values, $!code_obj_sc_dep_idx=0, $!code_obj_sc_idx=0, $!writer=(same as 3 outside), $!compunit=(same as 2 outside), $!string-heap=MoarVM::StringHeap.new [...]

[18:16] <timotimo> still rather difficult to spot what's what in that huge string without newlines and such

[18:21] *** zakharyas joined
[18:37] *** colomon_ joined
[18:40] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/755860503376560199/image.png

[18:40] <timotimo> ^- colored parenthesis

[18:40] <timotimo> with random words, made to look vaguely like the output of dump_p6opaque

[18:43] <nwc10> n der Schweiz, Ãsterreich und SÃ¼dtirol wird das Wort âSchmandâ nicht verwendet; das entsprechende Produkt ist Sauerrahm -- ahah

[18:43] <nwc10> so that's another of those words they teach me that isn't actually German.

[18:44] <timotimo> :)

[18:45] <timotimo> but doesn't that sound more like it's more german than A/CH?

[18:45] <nwc10> I meant that Sauerrahm is the not-German word. Like seemingly every other food word

[18:46] *** raku-bridge joined
[18:46] *** raku-bridge left
[18:46] *** raku-bridge joined
[18:46] <raku-bridge> <timotimo> test

[18:46] <timotimo> ooh

[18:46] <timotimo> that's how you meant it, ok!

[18:48] <nwc10> Quite often I ask "is this word Vienese dialect, Austrian, or something Germans would also understand?" and sometimes the answer round here is "don't know" (usually between the last two). This isn't totally helpful :-)

[18:48] <nwc10> Obviously I just speak English :-)

[18:48] <timotimo> i recall a site for either A or CH that has a "usage map"

[18:53] <patrickb> timotimo: Did you notice https://github.com/MoarVM/MoarVM/issues/1345 ?

[18:53] <timotimo> aw crap

[18:54] *** donaldh joined
[18:55] <timotimo> didn't i put an include in there just so we have pthread_t there?

[18:57] <timotimo> what is a dentiloquist %)

[18:57] <timotimo> why is this word :D

[19:03] <timotimo> nwc10: you think dump p6opaque should do newlines and indentation?

[19:03] *** zakharyas left
[19:05] <nwc10> do newlines and indentation make it clearer to read?

[19:05] *** raku-bridge left
[19:05] *** raku-bridge joined
[19:09] *** Geth left
[19:10] <nwc10> good *, raku-bridge

[19:10] <nwc10> or should that be good *able? :-)

[19:13] <timotimo> well, i hope it would

[19:13] <timotimo> probably easier to read than with colored parenthesis

[19:27] <timotimo> nwc10: https://gist.github.com/timo/00112498d970eac338db38459689b840

[19:29] <nwc10> I find that quite readable.

[19:29] <timotimo> not sure why it crashes tho :)

[19:31] <timotimo> ah, a null string

[19:34] <timotimo> hm, i think i'm actually hitting an exception being thrown and that's how it escapes back into the interp

[19:41] <timotimo> same gist now has a beautiful braid to look at

[19:57] <nine>  timotimo: I have some local changes to improve that dumper and fix that endless recursion

[19:58] <nine> and that segfault

[19:58] <nine> Sorry, should have pushed it long ago

[20:00] <nine> did so now: https://github.com/MoarVM/MoarVM/commit/1fdfdf59cf8db033d5e45c14a1d73e8bded61d2a

[20:01] <timotimo> ah, a vector of "seen" values

[20:01] <timotimo> yeah that's good

[20:01] <timotimo> no indentation?

[20:07] <timotimo> i'm thinking, with the newline-ified output, why not give a little copy-paste-able code snippet to get at individual objects and do something with them ... or something like that

[20:08] <timotimo> nine: how would you feel about a dumper that dumps a lot more than just p6opaque?

[20:08] <timotimo> the p6opaque dumper can of course already dump strings and ints, but only if they are attributes of a class

[20:10] <timotimo> perhaps at least the right cast + address for individual things

[20:10] <timotimo> so you can with one copy-paste get at some object's Body and print it

[20:27] *** MasterDuke joined
[20:29] *** MasterDuke left
[20:32] *** patrickb left
[20:49] <timotimo> kind of makes me want an ansi escape code that tells the terminal "when this text is clicked, copy-paste the highlighted text and press enter" or something :D

[20:50] <timotimo> kind of like the clickable URL thingies that recently made the rounds

[20:51] <[Coke]> oh, that's not dangerous. :P

[20:51] <timotimo> never!

[21:05] *** Geth joined
[21:13] *** MasterDuke joined
[21:29] <nine> Oh, I'd love a general MVMObject dumper

[22:32] *** donaldh left
[22:32] *** donaldh joined
[22:37] *** donaldh left
[23:08] *** donaldh joined
[23:15] *** donaldh left
[23:32] <timotimo> https://gist.github.com/timo/ff8e61022d0c1ea028a7f3b3d39ca4c0 - nine, do you think the "already seen" impl looks sane?

[23:35] <timotimo> i've merged your seen vector and my indentation

