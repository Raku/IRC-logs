[01:07] *** AlexDani` joined
[01:08] *** AlexDaniel left
[02:20] *** elcaro_ is now known as elcaro

[03:11] *** MasterDuke left
[03:55] *** [Coke]_ joined
[03:55] *** [Coke]_ left
[03:55] *** [Coke]_ joined
[03:57] *** Geth left
[03:57] *** Geth joined
[03:58] *** [Coke] left
[04:26] *** [Coke]_ left
[04:35] *** [Coke] joined
[04:35] *** [Coke] left
[04:35] *** [Coke] joined
[05:28] *** squashable6 left
[05:31] *** squashable6 joined
[06:18] <nwc10> good *, #moarvm 

[06:44] *** domidumont joined
[06:53] *** Altai-man joined
[07:19] *** sena_kun joined
[07:21] *** Altai-man left
[08:02] *** zakharyas joined
[08:12] *** domidumont left
[08:16] *** domidumont joined
[09:52] <jnthn> o/

[10:02] <nwc10> \o

[10:07] *** Kaiepi left
[10:09] *** Kaiepi joined
[11:18] *** Kaiepi left
[11:18] *** Altai-man joined
[11:21] *** sena_kun left
[11:26] *** Kaiepi joined
[11:31] *** zakharyas left
[11:37] *** Kaiepi left
[11:39] *** leont joined
[12:32] *** zakharyas joined
[12:48] *** dogbert17 left
[13:10] *** brrt joined
[13:41] *** mst joined
[13:41] *** ChanServ sets mode: +o mst

[15:19] *** sena_kun joined
[15:21] *** Altai-man left
[15:56] *** Kaiepi joined
[16:04] *** Kaiepi left
[17:03] *** MasterDuke joined
[17:14] *** brrt left
[17:42] *** zakharyas left
[18:30] *** Kaiepi joined
[19:18] <MasterDuke> ok. anyone up for helping me (fair warning it's gonna be a heavy lift on your end) figure out what to MVM_ASSIGN_REF to get https://github.com/MoarVM/MoarVM/pull/1344 not segfaulting when building nqp?

[19:18] *** Altai-man joined
[19:21] *** sena_kun left
[19:25] *** Altai-man left
[19:42] <MasterDuke> heh. i have an MVM_ASSIGN_REF expression that compiles, but same segv when building nqp

[19:44] <MasterDuke> oh, now i have something that gets farther in the nqp build

[19:45] <MasterDuke> an actual `Try to enter NULL jitcode` exception instead of a segv

[19:46] <MasterDuke> the moarvm backtrace is not helpful

[20:18] <MasterDuke> does this look close? `for (MVMuint32 i = 0; i < spesh->body.num_spesh_candidates; i++) MVM_ASSIGN_REF(tc, &(spesh->common.header), spesh->body.spesh_candidates[i], new_candidate_list[i]);`

[20:19] <jnthn> Is it the correct way around?

[20:19] <jnthn> I'd have thought you'd be assigning into the new candidate list?

[20:20] <jnthn> But if this is just copying the existing candidates into the new candidate list then it's not needed at all, I think, since those were already pointed to by the spesh holding object

[20:20] <MasterDuke> dunno, that's my interpretation of https://colabti.org/irclogger/irclogger_log/moarvm?date=2020-09-08#l144

[20:21] <jnthn> You'll need to do it with the new candidate, just not the existing ones

[20:21] <jnthn> Is the PR up to date? I can glance it

[20:21] <timotimo> i thought it was necessary so that the pointers in the array also get updated if necessary

[20:21] <nine> MasterDuke: frames have a spesh_cand pointer. Where is that put onto the GC's worklist?

[20:22] <MasterDuke> it doesn't have the MVM_ASSIGN_REF i was just experimenting wiht

[20:22] <MasterDuke> up to date otherwise

[20:23] <MasterDuke> nine: i don't think it is...

[20:24] <MasterDuke> there's this https://github.com/MoarVM/MoarVM/pull/1344/files#diff-ea09739cd0cd4d057f63f170d89ff1d2R33

[20:25] <nine> Have a look at MVM_gc_root_add_frame_roots_to_worklist

[20:25] <jnthn> MasterDuke: This line:

[20:25] <jnthn> new_candidate_list[spesh->body.num_spesh_candidates] = candidate;

[20:26] <jnthn> Is the one that needs the MVM_ASSIGN_REF

[20:26] <MasterDuke> i just changed to only having this: `MVM_ASSIGN_REF(tc, &(spesh->common.header), spesh->body.spesh_candidates[spesh->body.num_spesh_candidates], new_candidate_list[spesh->body.num_spesh_candidates]);`

[20:26] <MasterDuke> same segv

[20:27] <MasterDuke> but looking at MVM_gc_root_add_frame_roots_to_worklist now

[20:29] <MasterDuke> adding `MVM_gc_worklist_add(tc, worklist, &cur_frame->spesh_cand);` here https://github.com/MoarVM/MoarVM/blob/master/src/gc/roots.c#L419 didn't change anything

[20:30] <jnthn> MVM_ASSIGN_REF(tc, &(spesh->common.header), new_candidate_list[spesh->body.num_spesh_candidates], candidate);

[20:30] <jnthn> Is probably fine

[20:32] <MasterDuke> ah. the addition to MVM_gc_root_add_frame_roots_to_worklist plus that change to the MVM_ASSIGN_REF gets farther

[20:32] <MasterDuke> MoarVM panic: Internal error: zeroed target thread ID in work pas

[20:32] *** domidumont left
[20:33] *** brrt joined
[20:33] *** domidumont joined
[20:33] *** domidumont left
[20:34] <jnthn> Do you have the MVM_GC_DEBUG turned on?

[20:34] <MasterDuke> oh! it actually finishes if i remove the '-j12' from my make call

[20:35] <timotimo> nqp can't be compiled with that many things in parallel :D

[20:35] <MasterDuke> which i've never had to do before

[20:35] <jnthn> 'cus often it catches those zeroed target corruptions earlier - at the point something adds to the worilist

[20:35] <jnthn> haha...worklist :)

[20:35] <jnthn> Though we are woried about it :P

[20:35] <MasterDuke> jnthn: no, it's currently 0, i'll try again with it set to 1

[20:35] <jnthn> OK. With luck it'll panic at the point where the thing is added, which could be informative

[20:36] <MasterDuke> i am building moarvm with `--debug=3 --optimize=0`

[20:37] <jnthn> Good; that means you'll get a useful stack trace out of gdb when (if) it panics :)

[20:37] <jnthn> afk for a bit

[20:38] <MasterDuke> of course now nqp builds even with -j12...

[20:41] <MasterDuke> but rakudo panics

[20:42] <MasterDuke> at https://github.com/MoarVM/MoarVM/pull/1344/files#diff-b26a3689b87415a1c76692b9a43a02d7R45 `for (i = 0; i < candidate->num_spesh_slots; i++) { MVM_gc_worklist_add(tc, worklist, &(candidate->spesh_slots[i])); }`

[20:44] <MasterDuke> hm. `num_spesh_slots = 4152756840`

[20:46] <timotimo> is that fefefefefe?

[20:47] *** AlexDani` left
[20:48] <MasterDuke> m: say 0xfefefefefe

[20:48] <camelia> rakudo-moar 85847d2f1: OUTPUT: «1095199817470␤»

[20:48] <MasterDuke> m: say 0xfefefefe

[20:48] <camelia> rakudo-moar 85847d2f1: OUTPUT: «4278124286␤»

[20:48] <timotimo> m: say 0xfe, 0xfefe, 0xfefefe, 0xfefefefe, 0xfefefefefe

[20:48] <camelia> rakudo-moar 85847d2f1: OUTPUT: «254652781671142242781242861095199817470␤»

[20:48] <timotimo> m: say (0xfe, 0xfefe, 0xfefefe, 0xfefefefe, 0xfefefefefe).join(", ")

[20:48] <camelia> rakudo-moar 85847d2f1: OUTPUT: «254, 65278, 16711422, 4278124286, 1095199817470␤»

[20:48] <timotimo> ok, not quite, but almost

[20:48] <timotimo> m: say 4152756840.base(16)

[20:48] <camelia> rakudo-moar 85847d2f1: OUTPUT: «F7860A68␤»

[20:49] <timotimo> certainly not a correct value for the amount of spesh slots

[20:50] <MasterDuke> seems one, maybe two more than expected, yeah

[20:52] <brrt> timotimo: what's the significance of fefefefe

[20:53] <timotimo> in one of the gc debug modes we overwrite the old nursery with that using memset

[20:53] <timotimo> and maybe other things we free?

[20:55] <brrt> that makes sense

[20:58] *** MasterDuke left
[21:13] *** MasterDuke joined
[21:17] <MasterDuke> PR updated with current state. it builds nqp, but panics when building rakudo

[21:26] *** mst left
[22:01] *** [Coke] left
[22:04] *** [Coke] joined
[22:04] *** [Coke] left
[22:04] *** [Coke] joined
[22:29] *** brrt left
[23:43] *** colomon__ left
[23:45] *** colomon joined
[23:46] *** colomon left
[23:57] *** mst joined
[23:57] *** ChanServ sets mode: +o mst

