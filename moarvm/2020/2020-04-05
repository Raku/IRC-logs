[01:22] *** sena_kun joined
[01:23] *** Altai-man_ left
[03:08] *** linkable6 left
[03:08] *** evalable6 left
[03:10] *** evalable6 joined
[03:11] *** linkable6 joined
[03:21] *** Altai-man_ joined
[03:23] *** sena_kun left
[05:22] *** sena_kun joined
[05:23] *** Altai-man_ left
[07:21] *** Altai-man_ joined
[07:23] *** sena_kun left
[08:35] *** Geth_ joined
[08:35] *** Geth left
[09:05] *** Voldenet joined
[09:05] *** Voldenet left
[09:05] *** Voldenet joined
[09:22] *** sena_kun joined
[09:24] *** Altai-man_ left
[09:27] <nwc10> good *, #moarvm

[10:46] <timotimo> heyo nwc10 

[11:20] *** Kaiepi left
[11:21] *** Altai-man_ joined
[11:24] *** sena_kun left
[11:25] *** Kaiepi joined
[12:11] *** Kaiepi left
[12:13] *** Kaiepi joined
[12:21] *** brrt joined
[12:21] <brrt> ohai #moarvm

[12:21] <Altai-man_> Anyone around to explain me what can I use to catch why https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L2529 fails in my very non-golfable code?

[12:21] <Altai-man_> brrt, o/

[12:21] <brrt> hi Altai-man_

[12:22] <brrt> I could tell you I'd like to take a look, but I'm fairly sure I wouldn't be able to help much

[12:23] <Altai-man_> I'd borrow help even from a cat hand. :)

[12:24] <brrt> show me the code pls

[12:25] <Altai-man_> brrt, would you hesitate if it requires doing some clonning?

[12:26] <Altai-man_> Because there are a lot of code in different repos, but the error is 100% reliable. :S

[12:26] <Altai-man_> the instructions are at https://github.com/rakudo/rakudo/issues/3579

[12:26] <brrt> Altai-man_: I'm sorry, that is likely to take more time than I have today

[12:27] <Altai-man_> brrt, then never mind me, sorry for taking it.

[12:27] <brrt> no problem at all :-)

[12:27] <brrt> I mean, it's always okay to ask, and on another day I might be able to help you

[12:38] <Altai-man_> Golfed it down to only require cro and golfed file, https://github.com/rakudo/rakudo/issues/3579

[12:39] <brrt> Altai-man_++

[12:56] <Altai-man_> m: use nqp; my $code = start { my $c := nqp::getcomp('Raku'); my $g := nqp::findmethod($c,'parsegrammar')($c); my $actions := nqp::findmethod($c,'parseactions')($c); $g.parse('', :p(0), :$actions); }; await $code;

[12:56] <camelia> rakudo-moar c588323e5: OUTPUT: ¬´An operation first awaited:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Died with the exception:‚ê§    existskey requires a concrete object (got a NQPMu type object instead)‚ê§      in block  at <tmp> line 1‚ê§‚ê§¬ª

[12:56] <Altai-man_> m: use nqp; my $code = { my $c := nqp::getcomp('Raku'); my $g := nqp::findmethod($c,'parsegrammar')($c); my $actions := nqp::findmethod($c,'parseactions')($c); $g.parse('', :p(0), :$actions); }; say $code;

[12:56] <camelia> rakudo-moar c588323e5: OUTPUT: ¬´-> ;; $_? is raw = OUTER::<$_> { #`(Block|68023728) ... }‚ê§¬ª

[12:56] <Altai-man_> 210 characters golf without extra dependencies is what I got. \o/

[12:57] <brrt> that's not so bad

[12:57] <MasterDuke> Altai-man_++

[12:58] <Altai-man_> But now I have no idea where to look next.

[13:09] <timotimo> i've made a whole trip through the stages of grief regarding vectorization in moarvm

[13:22] *** sena_kun joined
[13:23] <brrt> tell us timotimo

[13:24] *** Altai-man_ left
[13:26] <timotimo> well, i started with my old branch that introduced a vectorapply op that does simple things like elementwise add or multiply two integer or num arrays

[13:27] <timotimo> next up, loop fusing was really important to me, so that we can @a >>+<< @b >>*>> 5 in one go instead of two

[13:28] <timotimo> but building a huge .c file with implementations of like sixty different formulas with type combinations of different-sized ints and nums would suck; it'd likely result in a humongous object file, and be much generating to do

[13:28] <timotimo> but dynasm can emit mmx and sse ops

[13:29] <timotimo> for that we'd need a tiny IR that nqp can toss at moarvm, which then compiles a piece of runnable code to apply to a bunch of VMArrays

[13:29] <timotimo> to build something completely new sounds like a really bad idea

[13:29] <timotimo> so i looked into orc, which i saw the last time i was on this topic, but didn't look any closer

[13:30] <timotimo> it has both a text-based asm-like input format of its own, as well as a set of C functions you can call to put a program in their IR together

[13:30] <timotimo> and then it generates the stuff at run-time if you want, or you use orcc to compile stuff ahead-of-time into .c files or whatever

[13:31] <timotimo> but i think that doesn't have an optimizer of its own

[13:31] <timotimo> so i looked into what llvm has in terms of vectorization stuff

[13:31] <timotimo> let's just say "it's a lot"

[13:32] <timotimo> so yeah

[13:32] <timotimo> i'll just do nothing instead

[13:33] <timotimo> the first step in this whole process is to pick apart and put together formulas that use many hypers, rather than immediately executing them

[13:33] <timotimo> and when we have that, we can just as well start by writing out loop-fused and perhaps even tiled nqp code

[13:33] <timotimo> so it doesn't have to go indirectly through, for example, self.infix and such, which may not be inlined

[13:38] *** brrt left
[13:41] <Geth_> ¬¶ MoarVM: MasterDuke17++ created pull request #1267: Let encode take a preallocated buffer

[13:41] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1267

[13:48] *** Altai-man_ joined
[13:51] *** sena_kun left
[14:17] <MasterDuke> timotimo: any idea how to further debug or fix that profiler problem?

[14:33] <nine> timotimo: reads like you've taken on a humongous task and made some decent progress on the initial research

[14:43] * timotimo flails helplessly

[15:03] *** colomon___ joined
[15:05] *** colomon_ left
[15:27] <MasterDuke> there are a whole ton of bind_key's when building rakudo, and the vast majority of them end up taking the slow path in alloc_from_global. any idea why that would be (i.e., why they would have failed to take from the free list)?

[15:49] *** sena_kun joined
[15:51] *** Altai-man_ left
[17:15] <jnthn> MasterDuke: Empty free list?

[17:15] <jnthn> A lot of the hashes will almost certainly live for a long time because they're part of the QAST tree 

[17:19] <sena_kun> jnthn, around for taking a peek at a bug or just chillin'?

[17:31] <jnthn> sena_kun: Mostly chilling. Hoping to receive dinner soon... :)

[17:32] <sena_kun> jnthn, enjoy it, nine++ provided a workaround for this bizarre ticket. :)

[17:32] <jnthn> Is it the existskey one? :)

[17:33] <sena_kun> yeah

[17:34] <sena_kun> At least I've exercised in golfing and grepping rakudo sources. :)

[17:48] *** Altai-man_ joined
[17:50] *** sena_kun left
[18:40] <MasterDuke> jnthn: bind_key calls the fsa here https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/MVMHash.c#L103 and a large number of the calls end up here https://github.com/MoarVM/MoarVM/blob/master/src/core/fixedsizealloc.c#L174

[19:01] *** patrickb joined
[19:33] *** vrurg left
[19:33] *** vrurg_ joined
[19:36] *** vrurg_ left
[19:39] *** vrurg joined
[19:49] *** sena_kun joined
[19:50] *** Altai-man_ left
[19:52] *** vrurg_ joined
[19:53] *** vrurg left
[19:57] *** colomon___ left
[19:58] *** colomon joined
[20:00] <nine> Oh, we have VALGRIND_MEMPOOL_ALLOC annotations in place already? Those can be used by heaptrack by just adding a #include <heaptrack_api.h>

[20:03] *** patrickb left
[20:09] <MasterDuke> just tried that, not sure what would/should be different about the output, seems pretty similar

[20:14] <timotimo> oh, really

[20:14] <MasterDuke> you know, it's not just most, but heaptrack is showing *all* calls from bind_key going through `alloc_slow_path`

[20:14] <timotimo> did you also turn on valgrind support using Configure.pl?

[20:14] <MasterDuke> --valgrind

[20:15] <timotimo> also, it's possible that the defines for valgrind support trample the heaptrack api stuff

[20:15] <timotimo> wait, those are only defines if valgrind support is off maybe?

[20:15] <nine> Oh wait, there's #ifdef HEAPTRACK_DEFINE_VALGRIND_MACROS

[20:15] <nine> https://phabricator.kde.org/source/heaptrack/browse/master/src/track/heaptrack_api.h$158

[20:16] *** patrickb joined
[20:16] <nine> So you also need to define that to get the heaptrack integration via valgrind macros

[20:21] <MasterDuke> hm, i added `#define HEAPTRACK_DEFINE_VALGRIND_MACROS; #include "heaptrack_api.h"` to src/core/fixedsizealloc.c, but it still doesn't seem to have changed much

[20:22] <MasterDuke> oh wait

[20:24] <MasterDuke> before had 26.6m calls to allocation functions and 4.2m temp allocations. after had 43.9 calls to allocation functions and 3.5m temp allocations

[20:26] <MasterDuke> oh, and after has more entries in peak contributions, most memory allocations, etc

[20:26] <MasterDuke> so looks like it does help out some

[20:28] *** vrurg_ left
[20:29] *** vrurg joined
[20:37] <timotimo> pasting stuff into the godbolt compiler explorer is tricky when everything uses MVMObject and MVMThreadContext

[20:40] <MasterDuke> does it let you add any .h's?

[20:47] <timotimo> not sure if it allows me to add multiple files at once

[20:49] <MasterDuke> cat them all into one?

[20:54] <timotimo> uargh :) :)

[20:55] <timotimo> anyway. no vector ops being used in this one loop i'm just looking at. huh.

[20:56] <timotimo> perhaps i'd have to put in a check that the addresses of the arrays are aligned sufficiently

[20:57] <MasterDuke> just writing some "plain C" loops? or using liborc?

[20:58] *** zakharyas joined
[21:01] <timotimo> plain C

[21:01] <timotimo> stolen from my vectorization branch

[21:01] <timotimo> i see the big checks for proper pointer alignment that chloekek (iirc) mentioned the other day

[21:01] <timotimo> oh, OK, i think i see what's wrong

[21:02] <timotimo> the pieces are so far apart in the assembly that i just didn't see it

[21:02] <timotimo> i don't see a way to go from a line in the assembler to a line in the editor or vice versa

[21:02] <timotimo> all i see is when you hover one it'll highlight on the other side, but only in the part you've scrolled to, not in the minimap

[21:02] <timotimo> d'oh

[21:02] <timotimo> right-click -> scroll to source is one way

[21:03] *** zakharyas left
[21:41] *** patrickb left
[21:48] *** Altai-man_ joined
[21:50] *** sena_kun left
[23:49] *** sena_kun joined
[23:50] *** Altai-man_ left
