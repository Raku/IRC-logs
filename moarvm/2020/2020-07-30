[00:12] *** sena_kun joined
[00:14] *** Altai-man_ left
[02:11] *** Altai-man_ joined
[02:13] *** sena_kun left
[03:49] *** evalable6 left
[03:49] *** linkable6 left
[03:51] *** evalable6 joined
[03:52] *** linkable6 joined
[04:12] *** sena_kun joined
[04:14] *** Altai-man_ left
[04:30] *** lucasb left
[05:57] <nwc10> good *, #moarvm 

[06:11] *** Altai-man_ joined
[06:14] *** sena_kun left
[07:16] *** leont joined
[07:52] *** brrt joined
[07:56] *** zakharyas joined
[08:06] * nwc10 had hoped someone else would try it (the branch)

[08:06] <nwc10> good *, leont 

[08:12] *** sena_kun joined
[08:13] *** Altai-man_ left
[08:52] <leont> Hi nwc10 :-)

[09:15] *** patrickb joined
[10:00] <nwc10> This is MoarVM version 2014.08-108-g93d47dd

[10:00] <nwc10> that's a bit old.

[10:05] <nine> I'd call it a pretty young MoarVM

[10:05] <nwc10> I built a new one

[10:11] *** Altai-man_ joined
[10:13] *** sena_kun left
[10:14] <nwc10> * nom

[10:14] <nwc10> Oh, that will be my problem...

[10:27] *** zakharyas left
[10:53] * dogbert17 checks out 'XXX-A-Better-Hash' ...

[10:57] <nwc10> it *is* safe for work. that's not what the XXX was about. It was more "FIXME-before-merging"

[11:00] <dogbert17> :-)

[11:03] <dogbert17> no errors found during a normal stresstest run

[12:12] *** sena_kun joined
[12:14] *** Altai-man_ left
[12:34] *** raku-bridge left
[12:35] *** raku-bridge joined
[12:35] *** raku-bridge left
[12:35] *** raku-bridge joined
[12:35] *** zakharyas joined
[12:59] *** patrickb left
[13:20] *** domidumont joined
[13:54] <nwc10> OK, so it builds and works on big endian PPC64 and PPC32

[13:55] <dogbert17> nwc10: I have tried your branch on my RPi 4 and spectest was happy

[13:56] <nwc10> I tried it on mine, and it doesn't fail any new tests

[13:56] <nwc10> but we seem to be making x86_64 assumptions about floating point

[13:56] <nwc10> (thanks)

[13:56] <dogbert17> yes, one test always fails on my RPi, i.e. t/spec/S02-types/num.t

[13:57] <dogbert17> have tried to break the branch on my PC so far without success :)

[13:58] <nwc10> IIRC they break on an x86  built

[13:58] <nwc10> build

[13:58] <nwc10> I did that with -m32 a while back - real x86 VMs are too slow

[13:58] <dogbert17> I have a 32bit Linux VM

[13:59] <nwc10> my mail is on a friend's 32 bit linux VM

[13:59] <nwc10> IIRC it's single core

[13:59] <dogbert17> it isn't what I have used while testing though

[13:59] <nwc10> "my" machine, with 24 x86_64 cores, building -m32, is 24 cores of x86

[13:59] <dogbert17> 24 cores, impressive

[14:00] <nwc10> apparently it's going to be replaced. It's a former production server, and it's 10 years old.

[14:00] <nwc10> so it must have been good when it was new

[14:00] <dogbert17> it was probably expensive as hell when it was bought

[14:01] <nwc10> this was my assumption too, but it predates me

[14:03] <dogbert17> asan is happy with your branch as well

[14:12] *** Altai-man_ joined
[14:12] <nwc10> ooh, this one is a bit less old: This is MoarVM version 2015.12-31-ge2d6f75

[14:14] *** sena_kun left
[14:23] <brrt> 2015? :-o

[14:23] *** dogbert11 joined
[14:25] <nwc10> yes, I figure that checkout dates from when I looked into the big endian stuff. As a bit of an encore from bending my brain into getting MoarVM working on ARM (32 bit, that is) without breaking x86_64 or x86

[14:25] <nwc10> the fun being C compiler alignement rules

[14:25] <nwc10> and how (nine reminds me) Mast was generated in a different way

[14:26] *** dogbert17 left
[14:26] <nwc10> "bit less old" probably means that logged into the machine when it was new-ish, and just tried thing sout

[14:36] <nwc10> oh, we don't built on sparc64 (no AO_fetch_compare_and_swap)

[14:37] <nwc10> and not on sparc32 - this one is more wierd:

[14:37] <nwc10> 3rdparty/libtommath/tommath.h:80:1: error: unable to emulate 'TI'

[14:37] <nwc10>    80 | typedef unsigned long        private_mp_word __attribute__((mode(TI)));

[14:37] <nwc10>       | ^~~~~~~

[14:38] <nwc10> that's a bother. sparc is excellent for hating code with bad alignment assumptions.

[14:38] *** dogbert11 left
[15:49] *** brrt left
[15:50] *** brrt joined
[16:05] *** brrt left
[16:12] *** sena_kun joined
[16:14] *** Altai-man_ left
[16:25] *** squashable6 left
[16:27] *** squashable6 joined
[16:41] *** Kaeipi joined
[16:41] *** dogbert17 joined
[16:44] *** Kaiepi left
[16:45] *** Kaeipi left
[16:47] *** Kaiepi joined
[16:48] *** Kaiepi left
[16:56] *** brrt joined
[17:06] *** brrt left
[17:42] *** domidumont left
[17:43] *** domidumont joined
[17:43] *** domidumont left
[17:48] *** zakharyas left
[18:12] *** Altai-man_ joined
[18:14] *** sena_kun left
[18:19] *** AlexDaniel joined
[18:20] *** AlexDaniel left
[18:20] *** AlexDaniel joined
[18:34] *** MasterDuke joined
[18:36] *** AlexDaniel left
[19:22] *** squashable6 left
[19:23] *** squashable6 joined
[19:48] *** Ven`` joined
[20:13] *** sena_kun joined
[20:14] *** Altai-man_ left
[20:33] <dogbert17> XXX-A-Better-Hash does improve performance, at least during the parsing stage and spectest and probably elsewhere as well, very nice

[20:35] <nwc10> :-)

[20:36] <nwc10> with dumbbench I measured a 2% speedup in 'say "Hello world"' but that's probably not a great claim to advertise

[20:44] <dogbert17> I got the rakudo parse stage down to under 39 seconds, that's a first for me

[20:45] <dogbert17> is is usually around 41+ seconds

[20:46] <dogbert17> s/is/it/

[20:48] *** Kaiepi joined
[20:57] *** Ven`` left
[21:10] *** Ven`` joined
[22:09] <MasterDuke> nwc10: src/6model/reprs/MVMHash.c: In function ‘MVMHash_gc_mark’:src/gc/worklist.h:93:23: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]   93 |     if (*item && !( (*(MVMCollectable**)item)->flags & MVM_CF_SECOND_GEN)) { \src/6model/reprs/MVMHash.c:66:13: note: in expansion of macro

[22:09] <MasterDuke> ‘MVM_gc_worklist_add_no_include_gen2_nocheck’   66 |             MVM_gc_worklist_add_no_include_gen2_nocheck(tc, worklist, &current->hash_handle.key);

[22:12] *** Altai-man_ joined
[22:14] *** sena_kun left
[22:35] *** Ven`` left
[22:54] *** leont left
