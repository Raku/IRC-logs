[01:47] *** Kaiepi left
[05:28] *** tobs joined
[06:36] *** MasterDuke left
[08:04] <nwc10> good *, #moarvm 

[08:25] *** sena_kun joined
[08:47] <nwc10> I'm not so sure about the good part. I'm having flashbacks to ARM porting

[08:49] *** domidumont joined
[09:00] *** domidumont left
[09:43] *** leont joined
[10:37] *** Kaiepi joined
[11:23] <timotimo> you can't spell moarvm without ARM

[11:29] <lizmat> .oO( waiting for the video: ARM.mov }

[11:45] *** Altai-man joined
[11:48] *** sena_kun left
[13:02] *** domidumont joined
[14:20] *** MasterDuke joined
[15:46] *** sena_kun joined
[15:48] *** Altai-man left
[16:46] <Kaiepi> it took a couple days to figure out exactly how to get this to work in combination with the I/O event loop, but i got cancellable, async DNS queries with LDNS working

[16:47] <Kaiepi> hopefully WinDNS works out ok too...

[16:50] <timotimo> Kaiepi++

[16:55] <moritz> Kaiepi++

[17:14] <timotimo>       Call::Name ???

[17:14] <timotimo> hmmm

[17:14] <timotimo> (oh, unicode don't work in my irc client at the mo)

[17:14] <timotimo> there's a little anchor emoji

[17:15] <jnthn> Which means it's sjunk :)

[17:15] <jnthn> *sunk

[17:15] <timotimo> :D

[17:15] <timotimo> do we want some attributes of these nodes to be part of the dump? it's quite bare at the moment

[17:23] *** zakharyas joined
[17:24] <timotimo> i hope we can come up with something good for "this has multiple roles, and the roles can all contribute something to the dump result"

[17:31] <timotimo> changing stuff in Raku/ast/ seems to give trouble unless you "make clean"

[17:47] *** zakharyas1 joined
[17:49] *** zakharyas left
[18:05] <nwc10> oooh, I have a slightly hacked up sparc32 build that fails the same tests as ppc32

[18:05] <nwc10> ie, grr, some of our tests are naughty and assume 64-bit things

[18:06] <nwc10> and some assume little endian things

[18:06] <nwc10> spectests

[18:06] <nwc10> I will educate these tests (at some point)

[18:07] <nwc10> we make a few alignment assumptions about "it's OK to load 32 bit values at 16 bit offets"

[18:07] <nwc10> and clearly a *lot* of 64 is OK at 32

[18:07] <nwc10> (can't yet get sparc64 to play)

[18:08] <nwc10> hacked, because it seems that both libtomath and dyncall can't cope with a build with -m32 on a sparcv9 system

[18:08] <nwc10> and I've not yet worked out what is buggy - them, or gcc in how it declares things.

[18:56] <Geth> ¦ MoarVM/sparc: 92ef5d7f8e | (Nicholas Clark)++ | 5 files

[18:56] <Geth> ¦ MoarVM/sparc: sparc32 does not support unaligned 32 bit reads or writes.

[18:56] <Geth> ¦ MoarVM/sparc: 

[18:56] <Geth> ¦ MoarVM/sparc: Our bytecode is 2-byte aligned, but we need to read 4-byte values. sparc will

[18:56] <Geth> ¦ MoarVM/sparc: SIGBUG if asked to perform a misaligned read.

[18:56] <Geth> ¦ MoarVM/sparc: 

[18:56] <Geth> ¦ MoarVM/sparc: We also need to add the same hack as s390 to get a definition of

[18:56] <Geth> ¦ MoarVM/sparc: AO_fetch_compare_and_swap_full

[18:56] <Geth> ¦ MoarVM/sparc: <…commit message has 9 more lines…>

[18:56] <Geth> ¦ MoarVM/sparc: review: https://github.com/MoarVM/MoarVM/commit/92ef5d7f8e

[18:56] <nwc10> SIGBUG. oops :-)

[18:56] <Geth> ¦ MoarVM/sparc: 87ad486f30 | (Nicholas Clark)++ | 5 files

[18:56] <Geth> ¦ MoarVM/sparc: sparc32 does not support unaligned 32 bit reads or writes.

[18:56] <Geth> ¦ MoarVM/sparc: 

[18:56] <Geth> ¦ MoarVM/sparc: Our bytecode is 2-byte aligned, but we need to read 4-byte values. sparc will

[18:56] <Geth> ¦ MoarVM/sparc: SIGBUS if asked to perform a misaligned read.

[18:56] <Geth> ¦ MoarVM/sparc: 

[18:56] <Geth> ¦ MoarVM/sparc: We also need to add the same hack as s390 to get a definition of

[18:56] <Geth> ¦ MoarVM/sparc: AO_fetch_compare_and_swap_full

[18:56] <Geth> ¦ MoarVM/sparc: <…commit message has 9 more lines…>

[18:56] <Geth> ¦ MoarVM/sparc: review: https://github.com/MoarVM/MoarVM/commit/87ad486f30

[18:58] *** sena_kun left
[19:16] *** domidumont left
[20:03] <nwc10> Question. For this:

[20:03] <nwc10> class MoarVM::Handler { has int32 $!start_offset; has int32 $!end_offset; has int32 $!category_mask; has $!action;

[20:03] <nwc10> oh thanks irssi

[20:03] <nwc10> class MoarVM::Handler {

[20:04] <nwc10>     has int32 $!start_offset;

[20:04] <nwc10>     has int32 $!end_offset;

[20:04] <nwc10>     has int32 $!category_mask;

[20:04] <nwc10>     has $!action;

[20:05] <nwc10> what has decided that for the P6Opaque, it's fine for the MVMObject that is $!action to be at offset 20?

[20:05] <nwc10> when ALIGNOF(MVMObject *) is 8

[20:05] <nwc10> ie, why aren't we padded to 24?

[20:05] <timotimo> dunno, the algorithm for that is in P6Opaque.c in the compose function it hink?

[20:08] <nwc10> well, it seems to start with:

[20:08] <nwc10> align        = ALIGNOF(void *);

[20:08] <nwc10> which is looking good.

[20:09] <nwc10> so I'm failing (so far) to see how it gets less strict

[20:09] <timotimo> honestly ... gdb and single-step or lots-of-printf

[20:09] <nwc10> I should to go bed and restart with a fresh head

[20:09] <nwc10> but if it *is* flashbacks to ARM (5 or 6 years ago)

[20:10] <timotimo> and at some point we'll jit on arm, too

[20:10] <nwc10> then it will be something about sizeof(the object header) being a multiple of 8 bytes, or off-by-4

[20:10] <nwc10> and the variant where the opaque object body is referenced via a pointer instead of directly inlined

[20:10] <nwc10> being "the other"

[20:11] <timotimo> ooh, i didn't consider the object header

[20:11] <nwc10> what we have currently is very carefully bodged

[20:11] <timotimo> especially fun since we also have actual_data, which will not live at an offset dictated by an object header

[20:11] <nwc10> so that the alignment of the object header is correct on x64_64, i386 and arm

[20:11] <nwc10> er, is "correct" enough that the two ways of storing somethign - opaques I think - has the same alignment

[20:12] <nwc10> and all other platforms don't care as much

[20:14] <nwc10> (so far)

[20:14] <nwc10> (gdb) print sizeof(struct MVMP6opaque)

[20:14] <nwc10> $3 = 32

[20:14] <nwc10> mmm, that looks safe

[20:15] <timotimo> ah, that's essentially the offset of the data we have in the actual struct?

[20:16] <nwc10> I think I understand the question, and if so, the offset (on sparc64, and probably all 64 bit platforms) is 32 byts in

[20:16] <nwc10> or, if you have been indirected using

[20:16] <nwc10> void *replaced

[20:16] <nwc10> 0 bytes in.

[20:16] <nwc10> which is good.

[20:16] <nwc10> because malloc damn well ought to be aligning on 16 bytes.

[20:18] <timotimo> it should

[20:18] <timotimo> ok, that does sound good

[20:19] <timotimo> it's exploding somewhere at runtime trying to access the $!action pointer in that class?

[20:19] <timotimo> i really gotta get in the kitchen make dinner damn

[20:19] <nwc10> yes, do this

[20:19] <nwc10> I need to go AFK too

[20:19] <nwc10> on sparc64 it explodes because of MVM_ASSIGN_REF

[20:20] <nwc10> because it's doing a pointer read or write (I forget which) at not-8-byte-aligned

[20:20] <timotimo> ah

[20:20] <nwc10> but I think that the source of this not-8-byte-aligned is deserialize_repr_data

[20:20] <timotimo> it could in theory also be the header bit it sets?

[20:20] <nwc10> "header bit" - I don't understand this question

[20:21] <nwc10> and I am also stoping you eating

[20:21] <timotimo> ah, it doesn't set a bit; it does the inter-generational pointer thing?

[20:21] <nwc10> I think that I'm explaining it badly, and probably this is all better tomorrow

[20:22] <nwc10> I believe that we're composing pointers to objects at 4 byte alignment

[20:22] <timotimo> well, i'm glad you have a sparc machine to play with :)

[20:22] <nwc10> but the first place that the sparc64 machine realises this is much later in MVM_ASSIGN_REF

[20:23] <timotimo> has looking at the disassembly, or reducing the optimization amount, been any help?

[20:23] <nwc10> it's this lot: https://cfarm.tetaneutral.net/machines/list/

[20:23] <timotimo> i imagine valgrind would also have something to say

[20:23] <timotimo> or perhaps rather use asan

[20:23] <timotimo> but it should be a thing these libs do, right?

[20:23] <timotimo> but yes, i should actually go towards cooking, darn

[20:24] <nwc10> valgrind doesn't do sparc

[20:24] <nwc10> (seems to do *everything* else, including s390x/linux)

[20:24] <timotimo> i don't even know what s390x is :) :)

[20:24] <nwc10> IIRC it's IBM mainframes

[20:25] <lizmat> yeah

[20:25] <nwc10> but ASCII

[20:25] <timotimo> rather than ebcdic, right?

[20:25] <nwc10> yes, rather than EBCDIC

[20:25] <nwc10> which is a very rude word

[20:25] <timotimo> is ebcdic also 8 bit characters?

[20:25] <nwc10> yes. but oh my

[20:25] <timotimo> i wonder what exactly you have to do to support ebcdic

[20:25] <nwc10> and *then* once you are fine with 'J' - 'I' being > 1

[20:26] <nwc10> and '0' > 'A'

[20:26] <nwc10> and the other fun and games

[20:26] <nwc10> you get to UTF-EBCDIC

[20:26] <timotimo> oh lord

[20:26] <nwc10> and, dammit, '~' having three different values dependig on the code page

[20:34] <nwc10> OK, this is nuts (and probably a bug) - `clang -m32` works

[20:34] <nwc10> but as soon as I add -O it bombs out with an error in a header

[20:35] <nwc10> (specifically /usr/include/bits/stdio-ldbl.h which seems to relate to using <stdio.h> but clang is forcing sizeof(long double) to be 8)

[20:35] <nwc10> if I understand the comments correctly

[20:35] <nwc10> (have not played with all the command line options to see what clang is defining to do daft things with long doubles)

[20:36] <nwc10> (but I do remmeber stupidity years ago on gcc compiler farm machines where some (sparc64 again I think) were set up with long doubles being 12 bytes, and others with long doubles being 16)

[20:36] <nwc10> everything is hateful.

[20:36] <nwc10> I should go to bed :-)

[20:40] <lizmat> sleep well!

[21:05] *** zakharyas1 left
[21:10] <timotimo> phew, the payload has been delivered to the furnace

[21:11] <timotimo> dang, that took me half an hour already?

