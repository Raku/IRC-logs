[00:03] *** sena_kun joined
[00:04] *** Altai-man_ left
[00:26] *** AlexDaniel left
[01:18] *** Merfont left
[02:01] *** Altai-man_ joined
[02:04] *** sena_kun left
[02:28] <Geth> Â¦ MoarVM: 0racle++ created pull request #1324: Revert "Declare loop var before loop"

[02:28] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1324

[03:40] *** lembark56 joined
[03:45] *** lembark56 left
[03:46] *** lembark87 joined
[03:46] *** lembark87 left
[03:47] *** lembark joined
[03:48] <lembark> Sorry about that...

[03:48] <tellable6> 2020-06-30T19:10:17Z #raku <MasterDuke> lembark i've had success before using heaptrack to find leaks in moarvm. a regular profile or heap snapshot will give you information at the raku level

[03:48] <lembark> Excellent.

[03:48] <lembark> I'm trying to convince people to use Raku for ETL and my experience dealing with nr.gz is making me look stupid :-)

[03:49] <lembark> Getting heaptrack now...

[03:54] <lembark> I'm not running KDE. Checking the website, there doesn't seem to be a tarball.

[03:55] <lembark> Q:  How do I install the thing w/o KDE?

[03:55] <lembark> Q: Is there any way to really force Rakudo to do garbage collection (before I blame this on a leak)?

[03:58] *** Merfont joined
[03:59] <lembark> Found it: cloned from githup.

[04:02] *** sena_kun joined
[04:04] *** Altai-man_ left
[04:16] <Voldenet> lembark: use nqp; nqp::force_gc()

[04:26] <nwc10> good *, #moarvm 

[04:58] <nwc10> jnthn: I think it might be possible to acchieve (most of) what you wanted for naight threads by using a memory layout of [entry, entry, entry, ... ] [control structure] [metadata, metadata, medadata, ..., sentinel]

[04:58] <nwc10> and the public hash point is just a char * pointing to the control structure

[04:58] <timotimo> what is a naight thread?

[04:58] <nwc10> and it sits in the middle because it has (potentinally) less alignment restriction than the entries

[04:59] <nwc10> timotimo: me mistyping naughty

[04:59] <nwc10> he meant other threads still accessing hashes that they aren't really supposed to be any more (so data races)

[04:59] <nwc10> that currently can SEGV

[04:59] <nwc10> keep the old block around, free it at a safe point

[04:59] <timotimo> ah

[04:59] <nwc10> public hash pointer is just

[04:59] <nwc10> we do lose the ability to lazily allocate storage

[05:00] <nwc10> but it has the interesting side effect that

[05:00] <nwc10> if you (first) convert all the fixed strings in the Unicode table from discrete char * constants in the C sorce, to a generated big array of chars and offests into that array

[05:00] <nwc10> one could completely pre-build the hash tables and link it

[05:00] <nwc10> oh, and also

[05:00] <nwc10> copying a hash is memcyp

[05:00] <nwc10> memcpy()

[05:01] <nwc10> which could be interesting in MVMHash.c

[05:01] <nwc10> (assuming that all the entries are "dumb" and don't need pointers fixing or similar)

[05:19] <timotimo> hrmpf.

[05:24] <timotimo> i think i might have found the the right spot to plop a fact propagation to make read-u?int\d+ methods of Buf jitted more often

[05:30] <nwc10> cool. (I hope)

[05:32] <timotimo> found another little nice thing to do

[05:41] <timotimo> new-disp gave callsites a flag "has a literal in this argument slot"

[05:42] <timotimo> some parts of spesh got confused by that and thought the expected types weren't matching, thinking "literal int" being a type that's neither obj/str/num nor int

[05:43] <timotimo> stumbled over this while looking around for other places [read|write]u?int\d+ were present

[05:43] <timotimo> this would have given us a little performance regression in compilation (the parts that write the mbc, specifically) when comparing master and new-disp

[05:48] <timotimo> just looking over the post-spesh of write_frame from the MAST compiler

[06:01] *** Altai-man_ joined
[06:04] *** sena_kun left
[06:07] <timotimo> who wants to optimize our truncation and extension stuff :)

[06:09] <nwc10> not me. already knee deep in hashes

[06:09] <timotimo> grab $!bytecode_offset with sp_p6oget_i32, box it, decont with sp_p6oget_i64, trunc_u32 it, extend_u32 it (i.e. make it 64bit again) and then use it in writeuint as offset

[06:10] <nwc10> that all sounds a bit LTA

[06:10] <timotimo> :D

[06:11] <timotimo> now these operations are relatively cheap (except boxing, which pushes the nursery allocation pointer ahead just a little)

[06:11] <timotimo> but if more or less none of them had to be done ... that would be nicer :)

[06:17] <timotimo> spesh logs really are huge, huh ...

[06:19] <timotimo> my latest changes may also be a miniscule speedup on master

[06:19] <timotimo> switching between new-disp and master takes a bit, though, so too lazy to try

[06:20] <timotimo> is it finally time to write that messagepack format for spesh logs

[06:26] *** MasterDuke joined
[06:27] <timotimo> but a concatenation of messagepack "documents" isn't really a format you can skip through very quickly

[06:29] <timotimo> i guess the structure of heap snapshot format 3 could be reused; it has these nice little table-of-content bits that let you skip backwards from the end of the file

[06:30] <timotimo> the TOC is relatively small, so you can even spit out the entirety of your outermost TOC whenever you're done writing a batch of stuff

[06:30] <timotimo> so at any point (when it's not currently writing to the file, that is) you're free to disrupt the process and the file will still be readable

[06:31] <timotimo> if the content inside the blobs is zstd-compressed, that can also allow reading from the start, since it has its own way to signal "end of data"

[06:33] <timotimo> also, if you zstd compress it, you don't even need to think about splitting strings out of the data body

[06:34] <timotimo> like, replacing opcode names with their numbers

[06:34] <timotimo> (if you do that, you better put a full table of all opcodes somewhere)

[06:36] <Geth> Â¦ MoarVM: efa8ac2fd4 | (Joshua Yeshouroun)++ | src/core/interp.c

[06:36] <Geth> Â¦ MoarVM: Revert "Declare loop var before loop"

[06:36] <Geth> Â¦ MoarVM: 

[06:36] <Geth> Â¦ MoarVM: This reverts commit fc092556b9c5a16970b9f92e25e87dc3e3027642.

[06:36] <Geth> Â¦ MoarVM: 

[06:36] <Geth> Â¦ MoarVM: Now that we are enforcing `-std=gnu99` (23dfde9) this is no longer

[06:36] <Geth> Â¦ MoarVM: required.

[06:36] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/efa8ac2fd4

[06:36] <Geth> Â¦ MoarVM: 82ebd0ed69 | niner++ (committed using GitHub Web editor) | src/core/interp.c

[06:36] <Geth> Â¦ MoarVM: Merge pull request #1324 from 0racle/master

[06:36] <Geth> Â¦ MoarVM: 

[06:36] <Geth> Â¦ MoarVM: Revert "Declare loop var before loop"

[06:36] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/82ebd0ed69

[06:43] <MasterDuke> .tell lembark if you have a relatively recent Rakudo, there's `VM.request-garbage-collection` (which just calls nqp::force_gc. also, if you're using heaptrack to look for leaks, be sure to run rakudo with the `--full-cleanup` flag. otherwise moarvm deliberately doesn't free some stuff when it exits and it throws off the heaptrack numbers

[06:43] <tellable6> MasterDuke, I'll pass your message to lembark

[06:50] <timotimo> i do believe that's what lembark's already using

[06:51] <timotimo> and the program is reaching a very big RSS is the problem as i understand it

[07:11] <MasterDuke> already using what?

[07:12] <timotimo> request-garbage-collection

[07:13] <MasterDuke> yeah, he's trying to find the leak. --full-cleanup was really the only important part of that message

[07:14] <MasterDuke> i looked at his github page to try and find some code to repro with, but i didn't see anything that looked relevant

[07:14] <timotimo> urgggghhh i really don't actually feel like building a version of MVM_spesh_dump that spits out msgpack

[07:16] <MasterDuke> nice blog post btw

[07:17] <timotimo> thanks :)

[07:25] <Geth> Â¦ MoarVM/new-disp: 5 commits pushed by (Timo Paulssen)++

[07:25] <Geth> Â¦ MoarVM/new-disp: 9a810b3cc0 | propagate facts in set elimination in one more case

[07:25] <Geth> Â¦ MoarVM/new-disp: 0f7cad109b | when turning return to box in inline, give known type flag

[07:25] <Geth> Â¦ MoarVM/new-disp: b8997eb03f | teach spesh dump about literal flag in callsites

[07:25] <Geth> Â¦ MoarVM/new-disp: 69aab230a2 | teach args spesh about literal callsite flags

[07:25] <Geth> Â¦ MoarVM/new-disp: b5260c2241 | in spesh, optimize bitwise int math if values are known

[07:25] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/compare/f8cef2ff69be...b5260c224151

[07:27] <timotimo> to make the read/write uint ops jitted again also needs an optimization that handles coerce_ui and coerce_iu, at least on known values

[07:28] <timotimo> i *think* these are actually basically no-op, but i wouldn't dare just turn them into "set" in production when it turns out there's a condition under which it's not literally just assignment

[07:28] <timotimo> BBL

[07:53] *** zakharyas joined
[08:02] *** sena_kun joined
[08:04] *** Altai-man_ left
[08:38] <nwc10> jnthn: but following on from comment previously, even a "1 block" memory layout does not protect against data races during insertion or deletion

[08:49] <nwc10> jnthn: although one neat trick I think might help is to keep the hash-block around, but set a bit in it for "this is garbage" and then have the hash lookup code check for that bit, and if set, "oops" the VM

[08:49] <nwc10> ie "die early die often" with a backtrace

[08:49] <nwc10> (at some level)

[09:23] <MasterDuke> nwc10: the idea isn't to prevent data races, but just not segfault

[09:24] <nwc10> the data races will cause SEGVs

[09:24] <nwc10> it's data races at the level of C pointer s

[09:25] <MasterDuke> timotimo: does https://github.com/MoarVM/MoarVM/commit/b5260c224151780c833657924f751957258113c9 depend on something in new-disp?

[09:27] <MasterDuke> ah. well, i think the idea in general is that we're not preventing data races at the raku level. i.e., you can modify a hash from two threads and we won't guarantee that it does what you want/think, but at least it won't segfault

[09:33] <nwc10> yes, that guarantee is sane

[09:34] <jnthn> nwc10: What are the pointers involved here? Are there interior pointers within the memory block?

[09:34] <nwc10> but we can't implement that guarnantee with (only) adding "and save the block of memory and only free it at a safepoint"

[09:34] <jnthn> Which get stored?

[09:34] <nwc10> jnthn: well for a regular MVMHash it's a pointer to the MVMString*key and the MVMString* value

[09:35] <nwc10> but, you only know if the memory locations where those pointers (would be) stored are valid to read

[09:35] <nwc10> if the metadata byte for them is set correctly

[09:35] <nwc10> and the metadata byte gets updated in a different write from the actual hash entry

[09:36] <nwc10> and during insert and delete, metadata is getting bulk updated

[09:36] <nwc10> before the entries get moved around (in bulk)

[09:36] <nwc10> you can't not do this

[09:38] <jnthn> OK, but if the memory was zeroed, then you know you're reading a pointer to an MVMString* or MVMObject* and those are both GC-managed

[09:39] <nwc10> I think that this discussion is sort of going sideways

[09:39] <jnthn> e.g. So you actually can read them and follow them, even if they were "deleted", safely, at least until the next GC run.

[09:39] <nwc10> it will be easier to see what is possible with code

[09:39] <nwc10> I think we're talking cross purposes

[09:39] <jnthn> Perhaps so. Will have to take a closer look.

[09:40] <nwc10> look for the memmove() calls

[09:40] <jnthn> fwiw, I don't actually care about the safety for anything except the MVMHash case, because all the other uses are VM internal, and we can protect those ourselves.

[09:41] <nwc10> but if we have fast (enough) atomic compare-and-swap

[09:41] <nwc10> argh

[09:41] <nwc10> no, that won't work

[09:41] <nwc10> I'll shut up and make the current lan work

[09:42] <jnthn> :)

[09:43] <nwc10> "the perfect is the enemy of the good"

[09:43] <nwc10> and (it's not clear here) the test version of this is named "MVP" for "Minimum Viable Product"

[09:43] <nwc10> because that *is* the plan :-)

[09:50] *** MasterDuke left
[10:01] *** Altai-man_ joined
[10:02] <nwc10> releasable6: help

[10:02] <releasable6> nwc10, status | status link # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Releasable

[10:02] <nwc10> releasable6: status

[10:02] <releasable6> nwc10, Next release in â15 days and â8 hours. There are no known blockers. Changelog for this release was not started yet

[10:03] <releasable6> nwc10, Details: https://gist.github.com/f468164059e707623456e51060b2cd8b

[10:03] <nwc10> and what is tracking the /win lottery these days?

[10:03] <nwc10>  /win a brand new dustbin

[10:04] <nwc10>  /win 6

[10:04] <nwc10> oh. nothing :-(

[10:04] *** sena_kun left
[10:35] *** lembark left
[10:50] *** MasterDuke joined
[11:08] *** zakharyas left
[11:56] <nine> timotimo: coerce_iu and coerce_ui already share the same JIT implementation and it's exactly the same code as set. 

[12:02] *** sena_kun joined
[12:04] *** Altai-man_ left
[14:02] *** Altai-man_ joined
[14:04] *** sena_kun left
[14:38] *** zakharyas joined
[16:03] *** sena_kun joined
[16:05] *** Altai-man_ left
[16:55] *** AlexDaniel joined
[16:55] *** AlexDaniel left
[16:55] *** AlexDaniel joined
[17:07] <samcv> nwc10, what part of ucd2c.pl do you want to change? Also I'd recommend not rewriting it completely and only iteratively

[17:22] <nwc10> samcv: *I* don't. (I fixed the few small bits that were really not working

[17:23] <nwc10> lizmat was teasing me, or whateer, into doing just what you are suggesting

[17:23] <nwc10> but I was rather busy trying to do hashes

[17:23] <lizmat> I suggested a Raku version, is what I suggested ?

[17:24] <nwc10> inded

[17:24] <nwc10> indeed

[17:24] <nwc10> and I think that it's the right thing to do

[17:24] <nwc10> but I'd happily like it to be SEP

[17:30] <lizmat> SEP?

[17:30] <[Coke]> someone else's problem

[17:36] <lizmat> ah, duh -)

[18:02] *** Altai-man_ joined
[18:04] *** sena_kun left
[18:14] *** vrurg_ joined
[19:04] <timotimo> nine: wonderful! so then spesh can literally just turn it into set :) :)

[19:21] *** zakharyas left
[19:44] *** vrurg_ is now known as vrurg

[19:46] <Geth> Â¦ MoarVM/new-disp: 6b768846e7 | (Timo Paulssen)++ | src/spesh/optimize.c

[19:46] <Geth> Â¦ MoarVM/new-disp: "optimize" coerce_iu and _ui by turning it into a "set"

[19:46] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/6b768846e7

[19:46] <Geth> Â¦ MoarVM/new-disp: 0cb67d7aeb | (Timo Paulssen)++ | src/6model/reprs/P6opaque.c

[19:46] <Geth> Â¦ MoarVM/new-disp: unbox_i/decont_i on P6opaque may be constant-folded

[19:46] <Geth> Â¦ MoarVM/new-disp: 

[19:46] <Geth> Â¦ MoarVM/new-disp: if the value is known, like when it's an enum or something.

[19:46] <Geth> Â¦ MoarVM/new-disp: 

[19:46] <Geth> Â¦ MoarVM/new-disp: This works only because boxing is create-like, not assign-

[19:46] <Geth> Â¦ MoarVM/new-disp: like which means you can't box a different value into an

[19:46] <Geth> Â¦ MoarVM/new-disp: existing object, because you would get a new, distinct

[19:46] <Geth> Â¦ MoarVM/new-disp: <â¦commit message has 10 more linesâ¦>

[19:46] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/0cb67d7aeb

[19:46] <Geth> Â¦ MoarVM/new-disp: 054974fa99 | (Timo Paulssen)++ | src/6model/reprs/P6opaque.c

[19:46] <Geth> Â¦ MoarVM/new-disp: add spesh comments for unbox_n and unbox_s being optimized

[19:46] <Geth> Â¦ MoarVM/new-disp: 

[19:46] <Geth> Â¦ MoarVM/new-disp: (on p6opaque objects)

[19:46] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/054974fa99

[19:47] <timotimo> if i cherry-pick some of these changes, does that make rebasing annoying for jnthn later on?

[19:51] *** zakharyas joined
[19:54] <MasterDuke> good question. not sure

[20:02] *** sena_kun joined
[20:05] *** Altai-man_ left
[20:19] <nine> timotimo: probably not much

[20:20] <nine> easiest way is rebase -i and just kick them out

[20:20] <timotimo> ah, of course

[20:24] <timotimo> nine: what do you think should be the logic for when a trunc is followed by or follows an extend and such

[20:28] <timotimo> https://gist.github.com/timo/d4fb520d1abf292527d1667e6411e361 - if you want to have a look what i'm talking about

[20:29] <timotimo> for example in BB 16

[20:30] <timotimo> and r14(10) already comes from a box_i that comes from a p6oget_i32

[20:33] <timotimo> teaching the exprjit about these ops may already toss out some of this

[20:33] <timotimo> i wonder why B20 and B21 aren't merged; we probably never merge inlined and non-inlined blocks together

[20:54] <timotimo> that is one huge frame

[20:55] <timotimo> Frame size: 6848 bytes (2318 from inlined frames)

[20:55] <timotimo> Specialization took 12989us (total 21702us)

[20:55] <timotimo> JIT was successful and compilation took 8205us

[20:55] <timotimo>     Bytecode size: 26594 byte

[20:57] <MasterDuke> damn

[20:58] <MasterDuke> oh, wait. us. ok, not quite as long as i first thought

[20:58] <timotimo> ha

[20:58] <timotimo> yeah

[21:16] *** leont_ left
[21:37] *** zakharyas left
[22:02] *** Altai-man_ joined
[22:04] *** sena_kun left
[22:41] <Geth> Â¦ MoarVM/master: 4 commits pushed by (Timo Paulssen)++

[22:41] <Geth> Â¦ MoarVM/master: bf4de7bc90 | in spesh, optimize bitwise int math if values are known

[22:41] <Geth> Â¦ MoarVM/master: 0a7ab6d050 | "optimize" coerce_iu and _ui by turning it into a "set"

[22:41] <Geth> Â¦ MoarVM/master: 780b12afb8 | unbox_i/decont_i on P6opaque may be constant-folded

[22:41] <Geth> Â¦ MoarVM/master: 187b4564e2 | add spesh comments for unbox_n and unbox_s being optimized

[22:41] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/82ebd0ed69dc...187b4564e222

[22:41] <timotimo> haven't actually spectested it yet

[23:15] <timotimo> exclamation

[23:16] <timotimo> success!

