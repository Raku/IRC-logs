[03:52] *** lucasb left
[05:10] *** Kaiepi left
[05:41] *** MasterDuke left
[06:37] *** nebuchadnezzar joined
[07:35] *** Altai-man joined
[07:56] *** Altai-man left
[07:56] *** Altai-man joined
[08:08] *** sena_kun joined
[08:10] *** Altai-man left
[09:22] *** zakharyas joined
[09:58] *** domidumont joined
[10:33] *** Geth joined
[11:34] *** Kaiepi joined
[11:35] *** Kaiepi left
[11:37] *** Kaiepi joined
[11:38] <nine> So, I've decided to abandon the existing attempts to get interning of parametrics to work. There's just not enough duct tape in the world to hold resolve_param_interns together. It will inevitable run into problems where objects created during the process keep pointing to non-interned parametrics.

[11:40] <nine> The second attempt did not fare better either. Instead of resolving parametric interns during MVM_serialization_deserialize I've tried to make it more recursive by plugging it into deserialize_stable and deserialize_object instead, i.e. when we actually deserialize those objects.

[11:41] <nine> The theory was that this way we can actually traverse the tree of objects and stables in correct order to have all necessary interning done when trying to resolve an intern (i.e. all it's parameters and the types they point at are resolved already).

[11:42] <nine> This attempt died as well because deserialization is not really done recursively either but with a work loop and queues for objects and stables. So when I try to resolve an interned object, it's possible that the parametric type's stable is actually not yet resolved but still in that queue.

[11:44] <nine> The reason for this being an iterative process with stubs instead of a simpler recursive implementation is that we actually can have loops, and indeed the simplest example is type objects themselves. They point at their STable and the STable has a WHAT pointer which points back at the type object.

[11:46] *** Kaiepi left
[11:47] *** Kaiepi joined
[11:48] *** Kaiepi left
[11:55] *** zakharyas left
[12:07] *** Altai-man joined
[12:08] *** Kaiepi joined
[12:10] *** sena_kun left
[12:50] <Altai-man> nine++ # very brave and admirable efforts

[14:08] <lizmat> nine: sorry to hear abandoning after so much effort

[14:08] * lizmat knows how that feels

[14:08] <lizmat> nine: so are you saying that deserialization should be a recursive process ?

[14:10] <timotimo> i think the conclusion was that it can't be done without implementing something just like what we have now to get around the reference loop trouble?

[15:19] *** domidumont left
[15:36] <nine> How on earth has this copy pasta survived for 6 years?! https://github.com/MoarVM/MoarVM/blob/master/src/6model/serialization.c#L2338

[15:47] <timotimo> huh, was that an actual bug?

[15:48] <nine> absolutely

[15:48] <nine> Should read MVMint32   orig_contexts_data_offset = reader->contexts_data_offset;

[16:08] *** sena_kun joined
[16:10] *** Altai-man left
[16:27] <lizmat> he...  my record for finding a bug in production code is 10+ years  :-)

[16:27] <lizmat> it was an off-by-one

[16:36] *** Kaiepi left
[16:37] *** sena_kun left
[18:29] *** patrickb joined
[19:35] <nwc10> .tell brrt https://blog.pyston.org/2020/10/28/pyston-v2-20-faster-python/

[19:35] <tellable6> nwc10, I'll pass your message to brrt

[20:01] <nine> Btw. rr finally works on Ryzen! https://github.com/mozilla/rr/wiki/Zen

[20:02] <nwc10> Woohoo!

[20:02] <nwc10> or is that !oohoW

[20:02] <nwc10> \o/

[20:02] <nwc10> ooh, I can't type backwards.

[20:02] *** vesper left
[20:21] *** vesper11 joined
[20:27] *** vesper joined
[20:30] *** vesper11 left
[20:31] *** MasterDuke joined
[20:48] *** vesper11 joined
[20:48] *** vesper left
[21:12] <[Coke]> ¡ooɥooM

[21:59] *** timotimo left
[21:59] *** sivoais joined
[21:59] *** timotimo joined
[22:01] <nine> All tests successful.

[22:01] <nine> And ===> Testing [OK] for MagickWand:ver<0.1.0>:auth<github:azawawi>

[22:02] <nine> So this is it! The recursive attempt actually wasn't that bad after all. I just plugged into the wrong layer. That and of course the countless smaller mistakes I tend to make when working on something like this.

[22:10] <japhb> nine: Wait, so you actually have parametric interning fully fixed now (at least locally)?

[22:10] <japhb> Or do you mean you just made another step forward

[22:10] <japhb> ?

[22:11] <nine> ===> Testing [OK] for PDF::Tags:ver<0.0.3>:auth<github:pdf-raku>:api<PDF.1.7>

[22:12] <nine> ===> Testing [OK] for Uzu:ver<0.3.6>

[22:13] <nine> I dare say it's fixed for good :) Those are the 3 modules that my previous implementation (of which is almost nothing left) broke

[22:14] <nine> Will PR the fix tomorrow

[22:23] *** patrickb left
[22:27] <timotimo> absolute wow, my friend

[23:16] <japhb> Yeah, huge nine++, that was some serious dedication!

[23:17] *** Kaiepi joined
[23:32] *** Kaiepi left
