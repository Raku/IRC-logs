[00:02] *** lucasb left
[01:05] *** Kaiepi left
[01:06] *** Kaiepi joined
[01:33] *** sena_kun joined
[01:35] *** Altai-man_ left
[02:20] *** Kaiepi left
[02:20] *** Kaiepi joined
[02:21] *** squashable6 left
[02:23] *** squashable6 joined
[03:32] *** Altai-man_ joined
[03:34] *** sena_kun left
[05:33] *** sena_kun joined
[05:35] *** Altai-man_ left
[07:32] *** Altai-man_ joined
[07:34] *** sena_kun left
[08:18] <nwc10> jnthn: Rakduo setting build for your branch wedges in the same way - CPU bound in MVM_spesh_arg_guard_run_types

[08:45] *** zakharyas joined
[08:52] *** zakharyas left
[08:54] *** zakharyas joined
[09:08] *** robertle left
[09:22] <timotimo> does the new spesh arg code perhaps generate infinite loops in very rare cases? it's not supposed to be able to, i believe? but maybe it happens anyway :)

[09:26] <nwc10> timotimo: maybe, but only in his branch

[09:33] *** sena_kun joined
[09:35] *** Altai-man_ left
[09:50] <nwc10> jnthn / timotimo - the ASAN excitement I saw and no-pasted last night (with the profiler) *only* happens on jnthn's branch

[09:50] <nwc10> on, HEAD^ on his branch

[09:53] <nwc10> whilst for HEAD, ie origin/derived-specializations 5e7e701615a9b88d9567c49725306f97d822f266 First attempt at derived specializations

[09:53] <nwc10> Both one of NQP's tests and the core setting end up in a 100% CPU loop

[10:17] <jnthn> Hmm, wonder why I got through the NQP build/tests without that...

[10:19] <nwc10> I have 6 things more annoying:

[10:19] <nwc10> +#define MVM_ARRAY_CONC_DEBUG 1

[10:19] <nwc10> +#define FSA_SIZE_DEBUG 1

[10:19] <nwc10> +#define MVM_SPESH_CHECK_DU 1

[10:19] <nwc10> ooh, that one?

[10:19] <nwc10> MVM_SPESH_BLOCKING=1

[10:19] <nwc10> MVM_SPESH_NODELAY=1

[10:19] <nwc10> MVM_SPESH_GUARD_DEBUG=1

[10:19] <nwc10> oh wait, that lot

[10:20] <nwc10> anyway, I shall now retry but with less silly buggers

[10:20] <jnthn> Ah, probably the spesh ones

[10:20] <jnthn> A hang where you mention is nice

[10:20] <jnthn> Because it'll tell me exactly which guard tree is broken

[10:21] <nwc10> the profiler ASAN barf is real, but clearly the whole branch isn't quite good yet, so it might go away again as a side effect of another bug fix

[10:21] <jnthn> Yeah, malformed arg guard trees could cause much trouble

[10:23] <jnthn> yay, repro'd the hang

[10:23] <nwc10> \o/

[10:27] <jnthn> lolwut

[10:27] <jnthn> The entire guard three is:

[10:27] <jnthn> 0: CALLSITE 0x7ffff7c64580 | Y: 1, N: 0

[10:27] <jnthn> 1: LOAD ARG 0 | Y: 2

[10:27] <jnthn> 2: STABLE CONC NQPClassHOW | Y: 3, N: 0

[10:27] <jnthn> 3: LOAD ARG 1 | Y: 4

[10:27] <jnthn> 4: LOAD ARG 2 | Y: 5

[10:27] <jnthn> There is no 5

[10:28] <nwc10> The 5 is a lie!

[10:28] <jnthn> And if it goes looking for one, that'll be memory corruption I guess :)

[10:36] <Geth> Â¦ MoarVM/derived-specializations: d3edc2be60 | (Jonathan Worthington)++ | src/spesh/arg_guard.c

[10:36] <Geth> Â¦ MoarVM/derived-specializations: Assert no guard tree buffer overrun

[10:36] <Geth> Â¦ MoarVM/derived-specializations: review: https://github.com/MoarVM/MoarVM/commit/d3edc2be60

[10:37] <timotimo> you're probably lucky that whatever's at position 5 has y and n both zeroed out?

[10:47] <Geth> Â¦ MoarVM/derived-specializations: 72c9673b4e | (Jonathan Worthington)++ | src/spesh/arg_guard.c

[10:47] <Geth> Â¦ MoarVM/derived-specializations: Don't create pointless load nodes in derived spesh

[10:47] <Geth> Â¦ MoarVM/derived-specializations:

[10:47] <Geth> Â¦ MoarVM/derived-specializations: If we aren't going to check against an argument, there is no need to

[10:47] <Geth> Â¦ MoarVM/derived-specializations: load it.

[10:47] <Geth> Â¦ MoarVM/derived-specializations: review: https://github.com/MoarVM/MoarVM/commit/72c9673b4e

[10:47] <jnthn> That also led to us creating more nodes that we expected

[10:47] <jnthn> NQP is now clean for me under the blocking/nodelay

[10:47] <jnthn> Currently running CORE.setting build under that too

[10:48] <jnthn> Which is taking quite a while, given I've an unoptimized debug build too...

[10:51] <jnthn> It builds :)

[10:51] <jnthn> Let's see what the tests have to say...

[10:54] <jnthn> There are issues.

[10:54] <nwc10> drink!

[10:56] <jnthn> umm

[10:56] <jnthn> moar: src/jit/x64/tiles.dasc:675: MVM_jit_tile_sub_load_idx: Assertion `out != in1' failed.

[10:56] <jnthn> Aborted (core dumped)

[10:56] <jnthn> That is...uh...pretty distant from what I've been working on

[10:57] <jnthn> paging Dr brrt...

[10:57] <nwc10> \o

[10:58] <jnthn> That assertion failure is the error on everything so far. Hm.

[11:04] <jnthn> 2 failures with the expr JIT disabled

[11:17] <nwc10> jnthn: actually, do you want a Mr brrt? Because I think you need a surgeon to fix the JIT

[11:21] <jnthn> grr, I think I need to reorder the commits, so that I can have the out of bounds fixes but not the derived specialization bit

[11:23] <jnthn> .oO( thankfully, we have git! )

[11:24] <jnthn> OK, there are still failures there, but at least now I can first debug the thing that should not have caused behavior changes

[11:25] <jnthn> Um, well, the one that was "just a refacotr", at least

[11:31] <jnthn> OK, the only failure I get on `make test` without the derived specializations patch with the blocking/no delay flag is t/02-rakudo/99-misc.t

[11:31] <jnthn> That's with the expr JIT disabled

[11:31] <nwc10> the profiler?

[11:32] <nwc10> all the subtests of test 3?

[11:32] *** Altai-man_ joined
[11:32] <jnthn> Yes, got "MoarVM oops: Spesh: get_osr_deopt_index failed\"

[11:33] <jnthn> There's extra failures with the expression JIT enabled, but I wonder if they're new in my branch...

[11:34] *** sena_kun left
[11:38] <jnthn> hah, yes, the expr jit failures are indeed on master too

[11:38] <nwc10> odd, why do they fail for you but not me?

[11:38] <jnthn> I don't know. You have assertions enabled, I assume?

[11:38] <nwc10> I believe so because I hit the one you added

[11:39] <jnthn> I'm running `MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 make test`

[11:39] <jnthn> Not diff

[11:40] <jnthn> *no

[11:41] <jnthn> Very odd

[11:41] <nwc10> indeed

[11:42] <jnthn> Anyway, I guess I'll look at the profiler one first

[11:42] <jnthn> I can sort of guess what it might be...

[11:44] <jnthn> ah, yes...

[11:59] <Geth> Â¦ MoarVM/derived-specializations: 91efac0991 | (Jonathan Worthington)++ | 6 files

[11:59] <Geth> Â¦ MoarVM/derived-specializations: Fix candidate discarding on instrumentation

[11:59] <Geth> Â¦ MoarVM/derived-specializations:

[11:59] <Geth> Â¦ MoarVM/derived-specializations: Previously it was enough to simply throw away the arg guard, since we

[11:59] <Geth> Â¦ MoarVM/derived-specializations: added to it. Now that we rebuild it from the candidate list each time,

[11:59] <Geth> Â¦ MoarVM/derived-specializations: we need to keep track of which spesh candidates we discarded, so that we

[11:59] <Geth> Â¦ MoarVM/derived-specializations: do not include them in it again.

[11:59] <Geth> Â¦ MoarVM/derived-specializations: review: https://github.com/MoarVM/MoarVM/commit/91efac0991

[12:00] <jnthn> That fixes the profiler regression

[12:00] <jnthn> And gets me to equivalence with master so long as the patch that actually uses derived specializations isn't in place

[12:00] <jnthn> So now I "just" have to debug that one :)

[12:03] <jnthn> Only two failures (so long as I disable expr JIT)

[12:03] <jnthn> (in make test, spectest can run while I lunch...)

[12:57] <jnthn> There are failures.

[13:00] <jnthn> Odd, they all look like "wrong number of arguments" style errors...

[13:04] <Geth> Â¦ MoarVM/derived-specializations: 2042d9b9d2 | (Jonathan Worthington)++ | 3 files

[13:04] <Geth> Â¦ MoarVM/derived-specializations: Remove unused certain result arg guard node

[13:04] <Geth> Â¦ MoarVM/derived-specializations:

[13:04] <Geth> Â¦ MoarVM/derived-specializations: We now distribute these throughout the tree.

[13:04] <Geth> Â¦ MoarVM/derived-specializations: review: https://github.com/MoarVM/MoarVM/commit/2042d9b9d2

[13:09] <jnthn> ooh, when I spesh dump the problematic case, I get "Too many levels of inlining popped"

[13:10] <jnthn> Aha, and disabling inlining makes things oK

[13:11] <jnthn> This will be...interesting.

[13:16] *** squashable6 left
[13:17] *** squashable6 joined
[13:17] *** squashable6 left
[13:20] *** squashable6 joined
[13:21] *** zakharyas left
[13:33] *** sena_kun joined
[13:35] *** Altai-man_ left
[13:36] *** MasterDuke left
[13:39] <jnthn> It does an inline. The caller's type information leads to a branch elimination inside of the inlinee. That renders some basic blocks unreachable. Those basic blocks in turn contained inlines. The start inline annotation gets deleted, but the end one, 'cus it lives at the start of a surviving basic block ('cus that's how they are placed) survives.

[13:39] <jnthn> What I don't yet know is if this is the cause of the real problem, or just a dumping problem that's hiding me getting to the real one.

[13:56] *** lucasb joined
[13:56] *** squashable6 left
[13:58] *** squashable6 joined
[13:58] <Geth> Â¦ MoarVM/derived-specializations: 39a7d006a9 | (Jonathan Worthington)++ | src/spesh/dead_bb_elimination.c

[13:58] <Geth> Â¦ MoarVM/derived-specializations: Clean up stay inline end annotations

[13:58] <Geth> Â¦ MoarVM/derived-specializations:

[13:58] <Geth> Â¦ MoarVM/derived-specializations: We could end up with them after dead basic block elimination. At a

[13:58] <Geth> Â¦ MoarVM/derived-specializations: minimum they just broke dumping, but they could potentially cause other

[13:58] <Geth> Â¦ MoarVM/derived-specializations: kinds of confusion too.

[13:58] <Geth> Â¦ MoarVM/derived-specializations: review: https://github.com/MoarVM/MoarVM/commit/39a7d006a9

[13:59] <jnthn> Good news: I fixed it. Bad news: that's not the actual problem.

[14:24] *** dogbert17 joined
[14:26] *** zakharyas joined
[14:38] <jnthn> urgh, I see it

[14:38] <jnthn> Also a fairly general problem, just one we didn't run into before, or not enough to casue trouble.

[14:39] <jnthn> Basically:

[14:40] <jnthn> 1. Planner determines that things are fairly polymorphic in a particular arg, so it'll make a derived specialization

[14:41] <jnthn> 2. But (for whatever reason, maybe not a good one) something in the optimizer decides it's going to stick a guard on something we decont out of the arg anyway.

[14:41] <jnthn> 3. Now there's a deopt point in the middle of args binding.

[14:41] <jnthn> 4. We can't cope with that

[14:42] *** zakharyas left
[14:43] *** zakharyas joined
[14:44] <jnthn> Probably we can prevent 3 from being allowed to happen. But 2 suggests something's interesting with the stats (I may have cheated somewhat here...)

[14:44] <jnthn> And we can probably lessen the impact of ruling out 3 by a code-gen tweak

[14:45] <jnthn> (Though may not need to)

[14:50] <jnthn> Ah, it's less bad: we only can't *inline* things that have a deopt during args binding

[15:00] <Geth> Â¦ MoarVM/derived-specializations: 02104e30c9 | (Jonathan Worthington)++ | src/spesh/inline.c

[15:00] <Geth> Â¦ MoarVM/derived-specializations: Refuse to inline with arg op after deopt op

[15:00] <Geth> Â¦ MoarVM/derived-specializations:

[15:00] <Geth> Â¦ MoarVM/derived-specializations: We cannot restore the args buffer and parameter context properly when we

[15:00] <Geth> Â¦ MoarVM/derived-specializations: uninline such a frame, which can then cause a crash after the deopt. In

[15:00] <Geth> Â¦ MoarVM/derived-specializations: theory this has long been a possible problem, however the new derived

[15:00] <Geth> Â¦ MoarVM/derived-specializations: specializations make it more likely to happen - though possibly only

[15:00] <Geth> Â¦ MoarVM/derived-specializations: because we are making poor decisions about what to guard on.

[15:01] <Geth> Â¦ MoarVM/derived-specializations: review: https://github.com/MoarVM/MoarVM/commit/02104e30c9

[15:20] <jnthn> OK, spectest now looks a bit better

[15:21] <jnthn> And a lot of my remaining failure is 'cus my Rakudo master is some way behind HEAD, it seems...

[15:25] <dogbert17> perhaps you're done

[15:32] *** Altai-man_ joined
[15:34] *** sena_kun left
[15:38] <jnthn> Alas, no

[15:38] <jnthn> At least one failure remains

[15:38] <jnthn> Almost through the spectest with nodelay/blocking and will know exactly how many soon

[15:40] <jnthn> A few failures, including a hang in S17-procasync/nonexistent.t

[15:40] <jnthn> That said, I didn't do such a run against master

[15:41] <jnthn> Which I'll do before any more hutning

[15:41] <jnthn> *hunting

[15:41] <jnthn> Got some other things I need to work on today, so that'll be all for now.

[15:42] <dogbert17> jnthn++

[15:53] <jnthn> Looks like all but one are there on master also...

[15:55] <Geth> Â¦ MoarVM/derived-specializations: d9e38edb81 | (Jonathan Worthington)++ | src/spesh/inline.c

[15:55] <Geth> Â¦ MoarVM/derived-specializations: One more possible argument handling instruction

[15:55] <Geth> Â¦ MoarVM/derived-specializations:

[15:55] <Geth> Â¦ MoarVM/derived-specializations: Which needs deopt handling too.

[15:55] <Geth> Â¦ MoarVM/derived-specializations: review: https://github.com/MoarVM/MoarVM/commit/d9e38edb81

[17:15] *** brrt joined
[17:15] <brrt> \o

[17:15] <brrt> I hear there's jit trouble

[17:16] <brrt> jnthn: what's the expr JIT failure?

[17:16] <brrt> oh, I see it

[17:16] <brrt> damn

[17:16] <brrt> how do I trigger?

[17:27] <jnthn> brrt: Rakudo's `make test` with `MVM_SPESH_NODELAY=1 MVM_SPECH_BLOCKING=1` on `master` did it for me

[17:33] *** sena_kun joined
[17:35] *** Altai-man_ left
[17:37] *** domidumont joined
[17:38] *** domidumont left
[17:50] <brrt> ok, I'll try it

[17:54] <nine> I actually get that error in a lot of test files when running make test on a debug build with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1

[17:54] <nine> 13 core dumps for a make test run

[17:55] <jnthn> Yeah, I had something in that range. Discovered when stressing my derived spesh branch, then I discovered it was on master too

[17:55] <nine> The tile it stumbles over is {emit = 0x7f80ce55643f <MVM_jit_tile_sub_load_idx>, node = 201, op = MVM_JIT_SUB, num_refs = 3, refs = {35, 63, 45, 0}, args = {8, 8, 0, 0, 0, 0}, values = "\001\001\002\006", register_spec = "\001\001\001\001", size = 8 '\b', debug_name = 0x7f80ce8f7a18 "(sub reg (load (idx reg reg $scale) $size))"}

[18:05] <nine> 2019.11 looks fine

[18:06] <brrt> hmmm

[18:12] <nine> In fact even 2020.01.1 looks good

[18:13] <nine> oh damn, forgot to turn on debugging again

[18:23] *** MasterDuke joined
[18:30] <nine> This is odd... it works with MoarVM on master, nqp master and rakudo 2020.01, but not anymore with rakudo on master

[18:43] *** squashable6 left
[18:44] *** squashable6 joined
[18:52] *** brrt left
[19:03] *** zakharyas left
[19:04] <nine> Trouble seems to have started with this commit: https://github.com/rakudo/rakudo/commit/495ddcc1ffcb9d652e555608cb60b2cc166a916e

[19:11] <nine> I'm pretty sure the commit itself is innocent, but it may show the code that causes the JIT to trip up

[19:21] *** Kaiepi left
[19:27] *** Kaiepi joined
[19:32] *** Altai-man_ joined
[19:35] *** sena_kun left
[20:18] <lizmat> fwiw, I found other odd things with nqp::bindattr_i in the core setting, not outside of it

[20:18] <lizmat> so that may be related

[20:37] *** zakharyas joined
[20:43] *** AlexDaniel joined
[20:43] *** AlexDaniel left
[20:43] *** AlexDaniel joined
[21:33] *** sena_kun joined
[21:34] *** brrt joined
[21:35] *** Altai-man_ left
[21:49] *** zakharyas left
[22:54] *** brrt left
[23:32] *** Altai-man_ joined
[23:35] *** sena_kun left
[23:46] *** lucasb left
