[01:00] *** Kaeipi left
[01:34] *** sena_kun joined
[01:36] *** Altai-man_ left
[03:00] *** Kaiepi joined
[03:33] *** Altai-man_ joined
[03:36] *** sena_kun left
[04:42] *** greppable6 left
[04:42] *** sourceable6 left
[04:42] *** bloatable6 left
[04:42] *** tellable6 left
[04:42] *** notable6 left
[04:42] *** unicodable6 left
[04:42] *** releasable6 left
[04:42] *** shareable6 left
[04:42] *** benchable6 left
[04:42] *** committable6 left
[04:42] *** statisfiable6 left
[04:42] *** evalable6 left
[04:42] *** reportable6 left
[04:42] *** quotable6 left
[04:42] *** nativecallable6 left
[04:42] *** squashable6 left
[04:42] *** bisectable6 left
[04:42] *** linkable6 left
[04:42] *** coverable6 left
[04:42] *** sourceable6 joined
[04:42] *** statisfiable6 joined
[04:42] *** greppable6 joined
[04:42] *** releasable6 joined
[04:43] *** benchable6 joined
[04:43] *** notable6 joined
[04:43] *** coverable6 joined
[04:43] *** squashable6 joined
[04:43] *** nativecallable6 joined
[04:44] *** reportable6 joined
[04:44] *** bloatable6 joined
[04:44] *** shareable6 joined
[04:44] *** bisectable6 joined
[04:44] *** linkable6 joined
[04:44] *** quotable6 joined
[04:44] *** committable6 joined
[04:45] *** evalable6 joined
[04:45] *** tellable6 joined
[04:45] *** unicodable6 joined
[05:34] *** sena_kun joined
[05:36] *** Altai-man_ left
[07:33] *** Altai-man_ joined
[07:36] *** sena_kun left
[07:57] *** domidumont joined
[07:58] *** domidumont left
[08:31] *** zakharyas joined
[08:56] *** domidumont joined
[09:02] *** zakharyas left
[09:03] *** zakharyas joined
[09:05] *** Altai-man_ left
[09:06] *** sena_kun joined
[09:09] *** sena_kun left
[09:09] *** Altai-man_ joined
[09:21] <Altai-man_> https://github.com/MoarVM/MoarVM/issues/1246

[09:35] *** sena_kun joined
[09:36] *** Altai-man_ left
[10:48] *** domidumont left
[11:34] *** Altai-man_ joined
[11:37] *** sena_kun left
[12:26] *** zakharyas left
[13:27] *** lucasb joined
[13:36] *** Altai-man_ left
[13:42] *** sena_kun joined
[14:32] *** MasterDuke left
[15:34] *** Altai-man_ joined
[15:36] *** zakharyas joined
[15:36] *** sena_kun left
[16:36] *** Guest1277 left
[16:44] *** zakharyas left
[17:29] *** patrickb joined
[17:31] *** tadzik left
[17:33] *** tadzik joined
[17:35] *** sena_kun joined
[17:37] *** Altai-man_ left
[17:39] <sena_kun> anyone around with knowing how to write C carefully to help with dyncall?

[18:08] *** domidumont joined
[18:37] *** domidumont left
[18:39] *** domidumont joined
[18:49] *** domidumont left
[18:49] <Voldenet> I'd help, but I have no idea to code carefully ;/

[18:53] *** domidumont joined
[18:55] *** sena_kun1 joined
[18:56] *** sena_kun1 left
[18:56] *** MasterDuke joined
[18:57] *** Altai-man_ joined
[18:58] *** sena_kun left
[19:35] *** sena_kun joined
[19:36] <Voldenet> maybe that's a silly question, but does anything actually use dlGetLibraryPath(NULL, …) except https://github.com/MoarVM/dyncall/blob/b3aa7/test/dynload_plain/dynload_plain.c#L158 ?

[19:36] *** Altai-man_ left
[19:38] <sena_kun> not really, but something can use dynload_plain and... well, it was decided it's better to wait a response from official maintainer.

[19:40] *** domidumont left
[19:42] <Voldenet> otherwise I'm not sure how to test it in context of compiling moarvm, it might be better to run test/dynload_plain.c instead

[19:44] <nine> The constants involved in the offending code seem to be totally undocumented and the whole thing is highly platform dependent. I'd just not dare to fix it myself.

[20:40] <Voldenet> to fix this probably `#if (defined(RTLD_DI_LINKMAP) || defined(OS_SunOS)) && !defined(DL_USE_GLIBC_ITER_PHDR)` should have RTLD_SELF added as a requirement

[20:41] <Voldenet> because there's "else" section for environments that support nothing ;)

[21:28] *** patrickb left
[21:34] *** Altai-man_ joined
[21:36] *** sena_kun left
[21:37] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/02/24/2020-08-altered-noise/

[21:39] <jnthn> \o/

[21:44] <jnthn> lizmat++ # wow, busy week

[22:12] <MasterDuke> brrt: how would we create templates for a lot of the sp_* ops? the interp code and lego jitted versions have loops in them

[22:12] <tellable6> MasterDuke, I'll pass your message to brrt

[22:12] <jnthn> MasterDuke: Which ones, ooc?

[22:13] <jnthn> I don't think many of 'em have loops... Conditionals maybe

[22:13] <MasterDuke> sp_getlex_o was the one i was just looking at

[22:14] <jnthn> How does it do the non-specialized getlex?

[22:14] <MasterDuke> dunno, there is no getlex_o

[22:16] <MasterDuke> but the regular getlex template is just `(template: getlex (copy $1))`

[22:17] <MasterDuke> and the other getlex_(ni|nn|ns|no) just call MVM_frame_find_lexical_by_name

[22:17] <MasterDuke> *other templaes

[22:17] <MasterDuke> **templates

[22:21] <MasterDuke> fwiw, a spesh log i was just looking at had these as the reason for the next most frequent expr jit bails: sp_bindlex_os, sp_getvt_o, sp_getvc_o, sp_fastbox_i_ic, getattr_o, sp_getlex_ins, sp_get_i64, sp_fastbox_bi_ic, assign, sp_bindlex_in, bindattr_o

[22:22] <jnthn> I suspect sp_getvt_o, sp_getvc_o and sp_get_i64 are the easiest of them

[22:22] <jnthn> Well, the last one is in theory trivial

[22:23] <jnthn> Others a bit less so

[22:23] <MasterDuke> heh, i was just looking at sp_get_i64 and i'm not sure how to do that somewhat complicated cast in a template

[22:23] <MasterDuke> but maybe it's not needed

[22:25] <MasterDuke> i've seen sp_fastbox_i_ic in a bunch of spesh logs

[23:22] <Voldenet> i've kind of fixed the musl issue in dyncall, maybe everything will work now ¯\_(ツ)_/¯

[23:35] *** sena_kun joined
[23:37] *** Altai-man_ left
[23:56] <sena_kun> Voldenet, wrote another email to the maintainer(s) and asked for a review, thanks for your efforts.

