[00:16] *** Kaeipi left
[00:16] *** Kaeipi joined
[00:33] *** Kaeipi left
[00:34] *** Kaeipi joined
[00:50] *** leont left
[02:01] *** lucasb left
[04:01] *** squashable6 left
[04:03] *** squashable6 joined
[04:37] *** raku-bridge1 joined
[04:37] *** raku-bridge1 left
[04:37] *** raku-bridge1 joined
[04:38] *** raku-bridge left
[04:39] *** raku-bridge1 is now known as raku-bridge

[06:15] *** sena_kun joined
[07:07] *** Kaeipi left
[07:17] *** Kaiepi joined
[07:29] *** Kaiepi left
[07:30] *** Kaiepi joined
[07:35] *** domidumont joined
[08:10] *** Altai-man joined
[08:13] *** sena_kun left
[08:38] *** zakharyas joined
[08:53] *** domidumont left
[08:54] <nine> MasterDuke: still no joy. Even on those precise commits now, I just can't get it to segfault. I don't even get an error. It seems to work just fine.

[08:54] <tellable6> nine, I'll pass your message to MasterDuke

[08:57] *** domidumont joined
[09:24] *** domidumont left
[09:38] *** Kaiepi left
[09:39] *** domidumont joined
[09:46] *** domidumont1 joined
[09:48] *** domidumont left
[09:50] <timotimo> hm. so would the WHICH of an Int have to be human-readable? because if we didn't render it in base10, but in whatever we like that's faster, that could be a good improvement on some workloads that check ints against presence in a hash or set

[09:56] <nine> I don't think WHICH is meant to be human-readable

[09:59] *** domidumont1 left
[10:02] *** domidumont joined
[10:20] <jnthn> No, it doesn't need to be

[10:23] <nine> Actually it doesn't even have to be a string. We expect an ObjAt. We assume that to be unboxable to a string in some places but I guess that's not strictly required

[10:40] *** Kaiepi joined
[10:42] <lizmat> Stiil, I'm pretty sure Int.WHICH will be inlined

[10:43] <lizmat> if it would be possible to dispatch on *exact* type versus type match, it could be made even simpler

[10:43] <nine> It will probably be inlined, yes. But avoiding stringification altogether would be even nicer

[10:44] <lizmat> Int:D:X: would match an *exact* Int:D, not a subtype ?

[10:44] <lizmat> Int:U:X: would match the Int type object and not a subtype of Int

[10:44] <jnthn> I don't think ObjAt should be string based really

[10:45] <nine> lizmat: why is type matching a problem?

[10:45] <jnthn> lizmat: If it's on the invocant, then submethod :)

[10:45] <lizmat> hmmmm....

[10:45] <lizmat> intriguiing

[10:46] <lizmat> jnthn: if not a str, then what ?

[10:48] <nine> WHICH is used for defining equality of objects. An equality test includes same type and same WHICH value. So the ObjAt implementation may actually depend on the type.

[10:49] <lizmat> can you have a submethod Foo *and* a multi method Foo in the same class?

[10:49] <lizmat> if not, how would I handle subclasses inside the class ?

[10:49] <jnthn> lizmat: No, you can't, so it's only useful in some cases

[10:49] <timotimo> anyway, yeah, i was refering entirely to the amount of cpu time spent inside moarvm when turning an int into a string

[10:50] <jnthn> It's not realy designed for that :)

[10:50] <lizmat> jnthn: ok, so not useful in the Int.WHICH case then

[10:50] <lizmat> nqp::tostr_I(self) is pretty fast, is it not?

[10:50] <timotimo> i don't know if stringifying to base 16 is alredy a lot faster than 10

[10:51] <lizmat> ah, like that...

[10:51] <timotimo> let me dig out the collatz code again

[10:53] <lizmat> timotimo: looks like there is no difference in base_I(foo,16) and tostr_I(foo)

[10:54] <nine> But there could be

[10:54] <nine> An optimized base 16 stringification must be faster than an optimized base 10 stringification

[10:55] <lizmat> yeah, looks like it *does* make a difference with --optimize=0

[10:55] <timotimo> whoops that froze my computer for a little bit ...

[10:55] <lizmat> so maybe my benchmark is just measuring the loop

[10:55] <timotimo> try measuring it in nqp land

[10:56] <jnthn> If you don't use the result then it may be optimized out :)

[10:57] <lizmat> yeah... :-)

[10:58] <lizmat> he... I just made a selfi   :-)

[10:59] <lizmat> (vim artefact of insertion after "self"  :-)

[10:59] <timotimo>    0.91%  perl6            libmoar.so          [.] MVM_coerce_i_s

[10:59] <timotimo> hmm

[11:00] <timotimo> did i misremember?

[11:00] <timotimo>   42.20%  perl6            libmoar.so          [.] MVMHash_gc_mark

[11:04] <nine> Do we miss an HASH_ITER_FAST equivalent

[11:04] <nine> ?

[11:04] <nine> Looks like gc_mark could benefit from hash iteration where we know that the hash cannot be modified during the iteration

[11:06] <lizmat> there are plenty of situations in the settings where we know the hash cannot be modified during iteration

[11:07] <lizmat> if there's some flag that can be set... tell me  :-)

[11:07] <lizmat> or an nqp::hash_fixed op  :-)

[11:14] <timotimo> inside gc_mark it's also impossible for a hash to be modified during the iteration

[11:14] <nine> oh, how_

[11:14] <nine> _

[11:15] <timotimo> hm?

[11:15] <nine> How can that hash be modified during gc_mark?

[11:16] <timotimo> it can not

[11:17] <nine> oh, "impossible" not "possible"

[11:17] <timotimo> need more coffee? :)

[11:17] <nine> apparently :)

[11:17] <timotimo> also, it's not that great of an idea to have such a short particle invert the meaning of a word

[11:18] <lizmat> yeah, it's anormal

[11:19] <timotimo> and amoral

[11:19] <lizmat> TIL anormal is not english  :-)

[11:19] <nwc10> abnormal

[11:19] <lizmat> yeah, that  :-)

[11:19] <nwc10> no, don't ask me which of (maybe 10) negation prefixes is the right one for any given word

[11:19] <lizmat> I was thinking of a shorter negation prefix  :-)

[11:20] <lizmat> works in Dutch and German  :-)

[11:20] <nwc10> atonal is the negation of tonal

[11:20] <lizmat> :-)

[11:20] <nwc10> achromatic

[11:20] <lizmat> .oO( ouch! )

[11:21] <jnthn> The number of negating prefixes in English is one of those "how does anyone ever learn this" moments :)

[11:21] <lizmat> nwc10: it's not all black and white  :-)

[11:22] <timotimo> black and ablack

[11:22] <jnthn> For all its horrors, Czech is at least simple in this regard :)

[11:22] <jnthn> .oO( Nice waterbed you have there... )

[11:22] <nwc10> immoral illogical irrational insane

[11:23] <nwc10> and yes, amoral and immoral are different things :-)

[11:25] <lizmat> re base_I vs tostr_I: https://github.com/rakudo/rakudo/commit/69f3e959b5

[11:30] <timotimo> whoa, orders of magnitude faster?

[11:32] <timotimo> have we mentioned flammable and inflammable yet?

[11:33] <timotimo> can has measurements for base_I and tostr_I? :3

[11:34] <lizmat> ah, I guess I had one 0 less in one of the benchmarks :-(

[11:35] <lizmat> yeah, it's more like a few %  :-(

[11:35] <timotimo> d'oh

[11:35] <lizmat> meh

[11:36] <nine> well faster is faster...

[11:37] <Geth_> Â¦ MoarVM/thread_local-doh: ec50786290 | (Nicholas Clark)++ | 3 files

[11:37] <Geth_> Â¦ MoarVM/thread_local-doh: D'oh! We need to set MVM_running_threads_context.

[11:37] <Geth_> Â¦ MoarVM/thread_local-doh: 

[11:37] <Geth_> Â¦ MoarVM/thread_local-doh: Add `MVM_set_running_threads_context` which sets the value to be returned

[11:37] <Geth_> Â¦ MoarVM/thread_local-doh: from `MVM_get_running_threads_context`. This fixes a bug that I introduced

[11:37] <Geth_> Â¦ MoarVM/thread_local-doh: in commits 4cfde6edf15b0bc0 and ac941c0d59286528. It was not spotted because

[11:37] <Geth_> Â¦ MoarVM/thread_local-doh: the only place that currently calls `MVM_get_running_threads_context` doesn't

[11:37] <Geth_> Â¦ MoarVM/thread_local-doh: ever actually need the value.

[11:37] <Geth_> Â¦ MoarVM/thread_local-doh: review: https://github.com/MoarVM/MoarVM/commit/ec50786290

[11:37] <nine> Since the resulting strings will be shorter, string comparison will be a bit faster, too

[11:37] <timotimo> we do fastpath comparison with the cached hash values though

[11:37] <Geth_> Â¦ MoarVM: nwc10++ created pull request #1389: D'oh! We need to set MVM_running_threads_context.

[11:37] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1389

[11:39] <timotimo> we do mp_radix_size for Int in non-10 bases

[11:39] <timotimo> er

[11:39] <timotimo> more exactly, for small bigints we do, otherwise it all goes through libtommath

[11:44] <timotimo> no mp_radix_size is just for calculating how big the number would be in the given base

[11:44] <timotimo> mp_to_radix is the function that does the actual stringification

[11:45] <timotimo> that doesn't seem to have a very optimized implementation for any specific bases

[11:46] <timotimo> but also, we can use base 64 for WHICH if we want

[11:46] <timotimo> it will at least do fewer divisions of the number

[12:06] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: 998ea76a17 | (Nicholas Clark)++ | src/core/exceptions.c

[12:06] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: Calling `MVM_exception_throw_adhoc` in the spesh worker should be an oops.

[12:06] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: 

[12:06] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: Similarly no exceptions should be thrown in the event loop thread.

[12:06] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: 

[12:06] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: Also report these two special threads in `MVM_oops`, and treat a NULL

[12:06] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: thread context pointer in oops as a bug worthy of a panic.

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: 

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: (Previously it would have "panic"ed because it would have crash due to the

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: NULL pointer dereference. This way, we give slightly better diagnostics.)

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: review: https://github.com/MoarVM/MoarVM/commit/998ea76a17

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: fa9b6659a1 | (Nicholas Clark)++ | src/core/exceptions.c

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: Use simpler stdio calls in exceptions.c where possible.

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: 

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: fputc('\n', stderr) is simpler than fprintf(...) or fwrite(...)

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: Because `fputs` is not varargs, the caller has a simpler ABI than `fprintf`

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: on some architectures (eg x86_64).

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: 

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: (Well, that's the theory anyway. In practice, it seems that a new enough gcc

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: optimises simple cases of either into calls to `fwrite`.)

[12:07] <Geth_> Â¦ MoarVM/exception-in-spesh-should-oops: review: https://github.com/MoarVM/MoarVM/commit/fa9b6659a1

[12:10] <timotimo> nwc10: so is str_hash_first + !str_hash_at_end + str_hash_next_nocheck already the fastest we can do?

[12:10] <timotimo> can we be any faster by knowing the number of entries up front? i imagine not

[12:11] <timotimo> wow github went a little wild and shows me five copies of lizmat's comment on the commit

[12:12] *** sena_kun joined
[12:12] <Geth_> Â¦ MoarVM: nwc10++ created pull request #1390: Exceptions in spesh should oops

[12:12] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1390

[12:13] *** Altai-man left
[12:14] <nwc10> I think it is. And end is 0, so that's a fast chcek

[12:14] <timotimo> OK

[12:14] <timotimo> we iterate backwards through the hash storage?

[12:14] <nwc10> yes.

[12:15] <timotimo> can we prefetch the whole body?

[12:15] <nwc10> ask your CPU :-)

[12:15] <nwc10> in that, (a) I don't exactly know how to do this, and certainly not portable

[12:15] <nwc10> and (b) wouldn't the CPU spot this after a while

[12:17] <timotimo> don't know actually

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: 0c3a38fad8 | (Nicholas Clark)++ | 8 files

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: Move MVM_{set,get}_running_threads_context to threadcontext.h

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: 

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: As this now includes "platform/threads.h" remove that include from several

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: C source files.

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: review: https://github.com/MoarVM/MoarVM/commit/0c3a38fad8

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: 34e0686435 | (Nicholas Clark)++ | 2 files

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: Simplify and inline `MVM_nativecall_find_thread_context`

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: 

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: Use `MVM_get_running_threads_context` to get the thread context directly,

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: instead of needing to take a mutex and iterate over the linked list of

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: threads.

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: 

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: As the function is only used in one place, and is now much smaller, convert

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: it to an inline function, which means moving it into the header file.

[12:19] <Geth_> Â¦ MoarVM/thread_local-nativecall: review: https://github.com/MoarVM/MoarVM/commit/34e0686435

[12:19] <timotimo> https://gcc.gnu.org/projects/prefetch.html - looking at this page now

[12:21] <nwc10> I'm not quite sure how to open this sentance, but right now the hash code on master isn't the finished product, so it's a bit awkward if we think we want to go patch *it*

[12:21] <timotimo> OK, no prob :)

[12:21] <nwc10> there are two pull requests (sort-of) patiently waiting for review

[12:23] <Geth_> Â¦ MoarVM: nwc10++ created pull request #1391: Implement MVM_nativecall_find_thread_context using MVM_get_running_threads_context

[12:23] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1391

[12:27] <nwc10> and the version in the PRs uses a single block of memory, so likely it is already more cache (and maybe prefetch) friendly than what is in master

[12:34] *** leont joined
[12:46] <timotimo> i wish i had the brain capacity to review them

[12:46] <timotimo> i seem to recall they are rather big?

[12:52] <nwc10> if you squash them, yes. But not if you don't. (How contrary) :-)

[12:52] <nwc10> sequence of smaller commits. But yes, quite a lot

[12:53] *** zakharyas left
[14:17] <Geth_> Â¦ MoarVM: ec50786290 | (Nicholas Clark)++ | 3 files

[14:17] <Geth_> Â¦ MoarVM: D'oh! We need to set MVM_running_threads_context.

[14:17] <Geth_> Â¦ MoarVM: 

[14:17] <Geth_> Â¦ MoarVM: Add `MVM_set_running_threads_context` which sets the value to be returned

[14:17] <Geth_> Â¦ MoarVM: from `MVM_get_running_threads_context`. This fixes a bug that I introduced

[14:17] <Geth_> Â¦ MoarVM: in commits 4cfde6edf15b0bc0 and ac941c0d59286528. It was not spotted because

[14:17] <Geth_> Â¦ MoarVM: the only place that currently calls `MVM_get_running_threads_context` doesn't

[14:17] <Geth_> Â¦ MoarVM: ever actually need the value.

[14:17] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ec50786290

[14:18] <nwc10> you've seen that already. That's a fast forward of master

[14:18] *** MasterDuke joined
[14:23] <MasterDuke> nine: odd. i actually don't get the segv on my use_fsa_for_vmarray branch, but i get it every time on master

[14:23] <tellable6> 2020-11-24T08:54:45Z #moarvm <nine> MasterDuke: still no joy. Even on those precise commits now, I just can't get it to segfault. I don't even get an error. It seems to work just fine.

[14:23] <MasterDuke> but if you're trying to chase it down i could send an rr recording

[14:31] <timotimo> mhh, invoking code from the debugserver crashes when it had been suspended when it came out of "sleep", i assume since sleep isn't :invokish

[14:40] <MasterDuke> re converting strings to integers, i know gmp is much faster than tommath, but i think i was mainly testing with biggish integers, don't remember if i checked  more normal sized ones. it has some optimizations for bases that are powers of 2

[14:47] <sena_kun> Was migration to gmp blocked by something?

[14:47] <MasterDuke> uh, am i crazy? i see nqp::base_I($i, 16) as being 10x slower than nqp::base_I($i, 10)

[14:49] <MasterDuke> sena_kun: yeah, i can't get it to build a libgmp.a, it fails during linking. the conversion of the MoarVM source code is done (well, except for catching up to some recent fixes nwc10++ made)

[14:50] <MasterDuke> no reply yet to https://gmplib.org/list-archives/gmp-discuss/2020-November/006587.html

[14:50] <sena_kun> :/

[14:51] <MasterDuke> i can run by using my system libgmp, and it passes spectest, it's just building that's a blocker

[14:51] <MasterDuke> m: use nqp; my $a; my $s = now; for ^10_000_000 -> Int $i { $a = nqp::base_I($i, 16) }; say now - $s; say $a

[14:51] <camelia> rakudo-moar ce45754dc: OUTPUT: Â«5.85934862â¤98967Fâ¤Â»

[14:52] <MasterDuke> m: use nqp; my $a; my $s = now; for ^10_000_000 -> Int $i { $a = nqp::base_I($i, 10) }; say now - $s; say $a

[14:52] <camelia> rakudo-moar ce45754dc: OUTPUT: Â«1.66136848â¤9999999â¤Â»

[14:52] <MasterDuke> m: use nqp; my $a; my $s = now; for ^10_000_000 -> Int $i { $a = nqp::tostr_I($i) }; say now - $s; say $a

[14:52] <camelia> rakudo-moar ce45754dc: OUTPUT: Â«1.6944929â¤9999999â¤Â»

[14:54] <MasterDuke> lizmat: you benched base_I as faster than tostr_I?

[14:55] <timotimo> m: use nqp; my $a; my $s = now; for ^10_000_000 -> Int $i { $a = nqp::base_I($i,16) }; say now - $s; say $a

[14:55] <camelia> rakudo-moar ce45754dc: OUTPUT: Â«5.748907â¤98967Fâ¤Â»

[14:55] <timotimo> huh. odd

[14:55] <MasterDuke> we currently have a fast path for base-10

[14:56] <timotimo> ah

[14:56] <timotimo> dang.

[14:59] <MasterDuke> oh wait, maybe that's just for small bigints converting to base 10

[15:02] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/master/src/math/bigintops.c#L1076-L1078 yep, otherwise everything uses mp_to_radix

[15:02] <timotimo> yes

[15:05] <MasterDuke> but i'm pretty sure tommath doesn't have any optimizations/fast paths for different bases, it's all just division by the base. so why in the world is 16 slower?

[15:07] <MasterDuke> oh, because those are mostly small bigints

[15:08] *** zakharyas joined
[15:09] <MasterDuke> yeah, all the time is spent in coerce_i_s compared to mp_clear+mp_div_2d+mp_div_d+mp_set_u64

[15:12] <MasterDuke> m: use nqp; my $a; my $s = now; for 10_000_000_000..10_001_000_000 -> Int $i { $a = nqp::base_I($i, 10) }; say now - $s; say $a

[15:12] <camelia> rakudo-moar ce45754dc: OUTPUT: Â«3.91260929â¤10001000000â¤Â»

[15:12] <MasterDuke> m: use nqp; my $a; my $s = now; for 10_000_000_000..10_001_000_000 -> Int $i { $a = nqp::base_I($i, 16) }; say now - $s; say $a

[15:12] <camelia> rakudo-moar ce45754dc: OUTPUT: Â«2.7878906â¤2541B2640â¤Â»

[15:12] <MasterDuke> results as expected with not-small bigints

[15:16] <timotimo> m: use nqp; my $a; my $s = now; for 10_000_000_000..10_001_000_000 -> Int $i { $a  = nqp::base_I($i, 64) }; say now - $s; say $a

[15:16] <camelia> rakudo-moar ce45754dc: OUTPUT: Â«2.66220716â¤9K6oP0â¤Â»

[15:22] <MasterDuke> but that does mean that tostr_I (i.e., base-10) will be faster for most of our uses of WHICH, right?

[15:58] *** MasterDuke left
[16:11] *** Altai-man joined
[16:11] *** MasterDuke joined
[16:13] *** sena_kun left
[16:44] *** zakharyas left
[16:45] *** zakharyas joined
[18:02] *** domidumont left
[18:16] *** domidumont joined
[18:20] *** domidumont left
[18:51] *** zakharyas left
[20:12] *** sena_kun joined
[20:13] *** Altai-man left
[20:30] <MasterDuke> this comment https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/ConcBlockingQueue.h#L8-L12 seems relevant to what i was planning to do with MVMArrayBody. do we want those characteristics for arrays?

[20:43] *** zakharyas joined
[20:51] *** zakharyas1 joined
[20:51] *** zakharyas left
[21:00] *** MasterDuke left
[21:21] *** Kaiepi left
[21:22] *** MasterDuke joined
[21:22] *** Kaiepi joined
[21:23] <Geth_> Â¦ MoarVM: 0c3a38fad8 | (Nicholas Clark)++ | 8 files

[21:23] <Geth_> Â¦ MoarVM: Move MVM_{set,get}_running_threads_context to threadcontext.h

[21:23] <Geth_> Â¦ MoarVM: 

[21:23] <Geth_> Â¦ MoarVM: As this now includes "platform/threads.h" remove that include from several

[21:23] <Geth_> Â¦ MoarVM: C source files.

[21:23] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0c3a38fad8

[21:23] <Geth_> Â¦ MoarVM: 34e0686435 | (Nicholas Clark)++ | 2 files

[21:23] <Geth_> Â¦ MoarVM: Simplify and inline `MVM_nativecall_find_thread_context`

[21:23] <Geth_> Â¦ MoarVM: 

[21:23] <Geth_> Â¦ MoarVM: Use `MVM_get_running_threads_context` to get the thread context directly,

[21:23] <Geth_> Â¦ MoarVM: instead of needing to take a mutex and iterate over the linked list of

[21:23] <Geth_> Â¦ MoarVM: threads.

[21:23] <Geth_> Â¦ MoarVM: 

[21:23] <Geth_> Â¦ MoarVM: As the function is only used in one place, and is now much smaller, convert

[21:24] <Geth_> Â¦ MoarVM: it to an inline function, which means moving it into the header file.

[21:24] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/34e0686435

[21:24] <Geth_> Â¦ MoarVM: bc219078d8 | (Jonathan Worthington)++ (committed using GitHub Web editor) | 9 files

[21:24] <Geth_> Â¦ MoarVM: Merge pull request #1391 from MoarVM/thread_local-nativecall

[21:24] <Geth_> Â¦ MoarVM: 

[21:24] <Geth_> Â¦ MoarVM: Implement MVM_nativecall_find_thread_context using MVM_get_running_threads_context

[21:24] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bc219078d8

[21:30] <Geth_> Â¦ MoarVM: 3838247ea7 | (Ben Davies)++ | src/jit/x64/emit.dasc

[21:30] <Geth_> Â¦ MoarVM: Add word and byte-sized return value macros to the lego JIT

[21:30] <Geth_> Â¦ MoarVM: 

[21:30] <Geth_> Â¦ MoarVM: This makes it so shorthand exists for any size of return value.

[21:30] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3838247ea7

[21:30] <Geth_> Â¦ MoarVM: bfce05394d | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/jit/x64/emit.dasc

[21:30] <Geth_> Â¦ MoarVM: Merge pull request #1331 from Kaiepi/lego-jit-rv

[21:30] <Geth_> Â¦ MoarVM: 

[21:30] <Geth_> Â¦ MoarVM: Add word and byte-sized return value macros to the lego JIT

[21:30] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bfce05394d

[21:31] *** sena_kun left
[21:33] *** zakharyas1 left
[21:36] <jnthn> MasterDuke: The motivation is a little more involved there, but at least partly the same, yes

[21:59] <MasterDuke> ok, good. i was comparing with MVMHash because i remembered nwc10's comments about it being two chunks currently, but planned for one, and it looked a bit different. wanted to make sure what i was planning would work ok

[22:31] *** MasterDuke left
[23:22] *** travis-ci joined
[23:22] <travis-ci> MoarVM build errored. Nicholas Clark 'D'oh! We need to set MVM_running_threads_context.

[23:22] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/745645098 https://github.com/MoarVM/MoarVM/compare/aaa1af7724f1...ec507862902e

[23:22] *** travis-ci left
[23:38] *** leont left
