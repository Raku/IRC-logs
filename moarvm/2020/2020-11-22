[01:24] *** evalable6 left
[01:24] *** linkable6 left
[01:26] *** linkable6 joined
[01:27] *** evalable6 joined
[01:34] *** lucasb left
[03:09] *** raku-bridge left
[03:09] *** raku-bridge joined
[04:33] *** evalable6 left
[04:33] *** coverable6 left
[04:33] *** linkable6 left
[04:33] *** tellable6 left
[04:33] *** unicodable6 left
[04:33] *** bloatable6 left
[04:33] *** quotable6 left
[04:33] *** squashable6 left
[04:33] *** bisectable6 left
[04:33] *** shareable6 left
[04:33] *** notable6 left
[04:33] *** committable6 left
[04:33] *** releasable6 left
[04:33] *** nativecallable6 left
[04:33] *** greppable6 left
[04:33] *** sourceable6 left
[04:33] *** benchable6 left
[04:33] *** statisfiable6 left
[04:34] *** bloatable6 joined
[04:34] *** releasable6 joined
[04:34] *** linkable6 joined
[04:35] *** tellable6 joined
[04:35] *** notable6 joined
[04:35] *** statisfiable6 joined
[04:35] *** shareable6 joined
[04:35] *** evalable6 joined
[04:35] *** coverable6 joined
[04:35] *** quotable6 joined
[04:36] *** committable6 joined
[04:36] *** sourceable6 joined
[04:36] *** nativecallable6 joined
[04:36] *** bisectable6 joined
[04:36] *** greppable6 joined
[04:36] *** benchable6 joined
[04:37] *** unicodable6 joined
[04:37] *** squashable6 joined
[09:35] *** sena_kun joined
[09:42] * nwc10 wonders - if rr is the debugging tool of choice for pirates, what do ninjas use?

[09:43] <moritz> constant vigilance

[09:44] <moon-child> I wonder, is r2 the sequel to rr?

[09:47] <moritz> shouldn't the sequel to rr be called rt?

[09:48] <moon-child> m: say 'rr'.succ

[09:48] <camelia> rakudo-moar 96285afb6: OUTPUT: ¬´rs‚ê§¬ª

[09:49] <moon-child> it's confirmed: time to rewrite it in rust‚Ñ¢

[10:59] *** patrickb joined
[12:10] *** Altai-man joined
[12:12] *** sena_kun left
[13:12] *** patrickb left
[14:43] *** domidumont joined
[15:04] <nine> Looks like I'm now trapped in a perpetual loop of fix one case, break another :(

[15:27] *** MasterDuke left
[15:29] *** MasterDuke joined
[16:10] *** zakharyas joined
[16:12] *** sena_kun joined
[16:13] *** Altai-man left
[16:45] *** MasterDuke left
[18:00] <nwc10> Anyone can anser, but I suspect...

[18:00] <nwc10> nine: If I have a testcase, where I

[18:01] <nwc10> 1) delete .precomp

[18:01] <nwc10> 2) run it - behaviour A

[18:01] <nwc10> 3) run it again - behaviour B

[18:01] <nwc10> what does this tell me?

[18:01] <nwc10> oh, sigh, stranger

[18:02] <nwc10> I think it's just sometimes A, sometimes B

[18:02] <nwc10> I guess I need to remember how to turn off address space layout randomisation

[18:02] <nwc10> this one is strange

[18:04] <nwc10> yes, it is. smoetimes A, sometimes B

[18:04] <nwc10> basically, run t/spec/S09-multidim/assign.t with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1

[18:05] <nwc10> (fortunately it doesn't seem to be the JIT - fun still happens with MVM_JIT_DISABLE=1 too)

[18:28] <lizmat> is behaviour A "test pass" and B "some tests fail" ?

[18:29] <nwc10> one particular test fails in the bad case

[18:30] <nwc10> this test fails, because the exception is not thrown:

[18:30] <nwc10> dies-ok { my @a[2;2] = <a b>, <c d e> }, 'Cannot assign to many items at first dimension';

[18:35] <lizmat> RAKU_TEST_DIE_ON_FAIL=1 rt 'dies-ok { my @a[2;2] = <a b>, <c d e> } for ^10000   

[18:35] <lizmat> looks like being a golf for it

[18:36] <lizmat> it fails after 315 to about ~800 attempts

[18:36] <lizmat> for me at least

[18:36] <lizmat> s/rt/raku -MTest -e/

[18:37] <lizmat> after it failed once, it does not recover it seems

[18:38] <lizmat> taking the `my @a[2;2]` out of the loop, does not fix it

[18:38] <lizmat> it just appears to increase the number of iterations to make it fail

[18:39] <lizmat> making the array a native shaped array, does not appear to change the failure or the failure rate

[18:41] <nwc10> from sitting inside gdb, the failure (to fail) seems to be because the value that is being assigned to @a is 2 lists of 2 elements (not a list of 2, and a list of 3)

[18:41] <nwc10> but I can't figure out why the wrong thing is there

[18:41] <nwc10> "sometimes"

[18:42] <lizmat> different golf:

[18:42] <lizmat> my @a[2;2]; die unless dies-ok { @a = <a b>, <c d e f> } for ^10000; LEAVE dd @a

[18:43] <lizmat> or perhaps:

[18:43] <lizmat> my @a[2;2]; die @a.raku unless dies-ok { @a = <a b>, <c d e f> } for ^10000

[18:43] <nine> sounds like spesh?

[18:44] <nwc10> well, I can only make it fail with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1

[18:44] <nine> what does it do with MVM_SPESH_DISABLE=1?

[18:44] <nwc10> which most definately is spesh

[18:44] <nwc10> it has never failed for me without MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 so MVM_SPESH_DISABLE=1 isn't going to chagne that

[18:44] <nine> tools/jit-bisect.pl has a --spesh mode

[18:44] <lizmat> doesn't die with MVM_SPESH_DISABLE=1 for me

[18:45] <nwc10> nine: it's not a reliable fail. How does one bisect that?

[18:45] <nwc10> *this* is my problem. If I can get a reliable testcase. or even one that happens often enough that I can cut it down, I'd be happier

[18:45] <nwc10> lizmat: what is rt?

[18:46] <lizmat> rt is an alias I have for raku -MTest -e

[18:46] <nwc10> nine: I already hash hash randomisation disabled.

[18:46] <nwc10> aha

[18:46] <lizmat> dies after ~ 20 iterations for me with MVM_SPESH_BLOCKING=1

[18:47] <lizmat> actually, looks like it *always* breaks at the 22nd iteration that way

[18:47] <nine> sounds quite reproducible then :)

[18:48] <lizmat> with MVM_SPESH_NODELAY=1 it taks about 4500 iterations before it breaks

[18:48] <lizmat> *takes

[18:48] <nwc10> OK. Thanks

[18:48] <nwc10> right. That now seems to be something that relibly fails

[18:48] <nwc10> what happened was

[18:49] <nwc10> I decided that I was annoyed that various spectests always fail with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1

[18:49] <nwc10> so decided to fix it

[18:50] <nwc10> https://github.com/MoarVM/MoarVM/pull/1386 fixes two

[18:51] <nwc10> https://github.com/MoarVM/MoarVM/issues/1387 because I can't fix that one

[18:52] <nwc10> oh, and https://github.com/MoarVM/MoarVM/pull/1384 beacuse the spectests fail on every 32 bit platform.

[18:54] <nwc10> it's spesh but not the JIT. fails with MVM_JIT_DISABLE=1

[18:55] <nwc10> sweet, yes, totally portable fail. <-- that window

[18:56] <nwc10> has a ppc32 build, and it fails there.

[18:56] <nwc10> no nasty grubby assembler here.

[18:57] <lizmat> fwiw, I can't get it to fail on 1dim shaped array

[18:57] <lizmat> 3dim array fails in a way similar to the 2dim shaped array

[19:00] <nwc10> nine: it might have a spesh mode, but it seems to have no documentation

[19:07] <lizmat> my guess is something is awry with nqp::atposnd

[19:08] <lizmat> in fact: the code in src/core.c/Array/Shaped is using the nqp op to throw the exception *after* it figured it has too many vakues

[19:08] <lizmat> *values

[19:10] <lizmat> hmmm.. maybe the problem is, is that it doesn't get there...

[19:13] <lizmat> hmmm.. indeed:

[19:13] <lizmat> use nqp; my int @i = 1,2; my int @a[2;2]; dies-ok { nqp::atposnd(@a,@i) } for ^10000

[19:13] <lizmat> doesn't fail for me at all

[19:16] <nwc10> confirm that it doesn't get there - breakpoint set with gdb isn't reached, the exception is not thrown, the test then fails

[19:21] <lizmat> so either $pulled has become IterationEnd when it shouldn't have, or an index is not updated, or the iterator has become lazy all of a sudden

[19:23] *** Altai-man joined
[19:25] *** sena_kun left
[19:34] *** domidumont left
[19:35] <nwc10> OK, I have it running...

[19:40] <nwc10> SPESH Broken frame: 3942.

[19:40] <nwc10> SPESH Acquiring log: spesh-3942.txt

[19:40] <nwc10> well, it says someting abuot Spesh of 'meta_methods' (cuid: 125, file: gen/moar/Metamodel.nqp:1041)

[19:40] <nwc10> but I don't know how the rest of that file works.

[19:42] <Geth_> ¬¶ MoarVM: 9fbcdb4de6 | (Nicholas Clark)++ | src/6model/reprs/P6opaque.c

[19:42] <Geth_> ¬¶ MoarVM: P6opaque's `spesh` must handle P6bigint values inline, as some are too big.

[19:42] <Geth_> ¬¶ MoarVM: 

[19:42] <Geth_> ¬¶ MoarVM: P6opaque's `spesh` will attempt to take a concrete P6bigint known value and

[19:42] <Geth_> ¬¶ MoarVM: convert it to a `MVM_OP_const_i64`. This doesn't work if big integer's value

[19:42] <Geth_> ¬¶ MoarVM: is to large than an MVMint64.

[19:42] <Geth_> ¬¶ MoarVM: 

[19:42] <Geth_> ¬¶ MoarVM: Previously the code was not considering this corner case. It was calling

[19:42] <Geth_> ¬¶ MoarVM: <‚Ä¶commit message has 12 more lines‚Ä¶>

[19:42] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9fbcdb4de6

[19:42] <Geth_> ¬¶ MoarVM: d607387c34 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/6model/reprs/P6opaque.c

[19:42] <Geth_> ¬¶ MoarVM: Merge pull request #1386 from MoarVM/P6opaque-spesh-must-inline-bigint-value-lookup

[19:42] <Geth_> ¬¶ MoarVM: 

[19:43] <Geth_> ¬¶ MoarVM: P6opaque's `spesh` must handle P6bigint values inline, as some are too big

[19:43] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d607387c34

[19:43] <nwc10> good *, jnthn 

[19:43] <jnthn> o/

[19:43] <nwc10> \o

[19:43] <jnthn> Just had a spare moment waiting for dinner to be delivered and figured I'd knock at least one PR off the review queue :)

[19:44] <nwc10> OK, I really don't know how to figure out what spesh-3942.txt is telling me.

[19:45] <nwc10> ha, found the file. It's in rakduo.

[19:45] <nwc10> And the culprit method is just this:

[19:45] <nwc10>     # Get the meta-methods in order of declaration.

[19:45] <nwc10>     method meta_methods($obj) {

[19:45] <nwc10>         @!meta_methods

[19:45] <nwc10>     }

[19:46] <Geth_> ¬¶ MoarVM/master: 9 commits pushed by (Nicholas Clark)++, (Jonathan Worthington)++

[19:46] <Geth_> ¬¶ MoarVM/master: 5f1712cb17 | MVM_box_{int,num,str,unit} all should MVMROOT the local variable `box`.

[19:46] <Geth_> ¬¶ MoarVM/master: 741e6acd29 | MVM_box_{int,num,str,uint} mostly duplicate MVM_repr_box_{int,num,str,uint}

[19:46] <Geth_> ¬¶ MoarVM/master: 868de8cc7f | Use MVM_repr_box_{int,num,str,uint} directly in interp.c

[19:46] <Geth_> ¬¶ MoarVM/master: 9b9de0aba4 | graph.c now calls MVM_repr_box_{int,num,str} directly.

[19:46] <Geth_> ¬¶ MoarVM/master: 60b47f62ef | The template JIT now calls {MVM_repr_box_int,str} directly.

[19:46] <Geth_> ¬¶ MoarVM/master: 175525cef6 | Replace `MVM_unbox_str` with `MVM_repr_get_str` and eliminate the former.

[19:46] <Geth_> ¬¶ MoarVM/master: c2f3e04b19 | Remove vestigial definitions of the macro STR_WITH_LEN()

[19:46] <Geth_> ¬¶ MoarVM/master: 01c0950d4f | Add `box_u` to both JITs and `unbox_i` to the template JIT.

[19:46] <Geth_> ¬¶ MoarVM/master: 96bd704455 | Merge pull request #1378 from MoarVM/MVMROOT-in-box-foo

[19:46] <Geth_> ¬¶ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/d607387c3474...96bd704455b3

[19:50] *** MasterDuke joined
[19:53] *** raku-bridge left
[19:53] *** raku-bridge joined
[19:53] *** raku-bridge left
[19:53] *** raku-bridge joined
[19:56] <Geth_> ¬¶ MoarVM/master: 4 commits pushed by (Nicholas Clark)++, (Jonathan Worthington)++

[19:56] <Geth_> ¬¶ MoarVM/master: 4cfde6edf1 | Add `MVM_get_running_threads_context` to get the running thread's context

[19:56] <Geth_> ¬¶ MoarVM/master: ac941c0d59 | Add MVM_THREAD_LOCAL to declare variables with thread local storage

[19:56] <Geth_> ¬¶ MoarVM/master: 8d68b18f99 | A probe for compiler thread local storage support.

[19:56] <Geth_> ¬¶ MoarVM/master: aaa1af7724 | Merge pull request #1374 from MoarVM/eliminate-static-race-condition

[19:56] <Geth_> ¬¶ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/96bd704455b3...aaa1af7724f1

[19:56] <nwc10> as best I could tell that was the only static variable

[19:57] <jnthn> nwc10: Dinner is arriving, so will be away for a bit. I left a comment in the reivew of that PR about something that could also probably be simplified thanks to your work.

[19:57] <jnthn> I should probably have filed an issue, but later (well, I just need to remember...) :)

[19:57] <nwc10> OK, mail arrived

[19:57] <jnthn> bbl o/

[19:58] <nwc10> enjoy food

[20:07] *** patrickb joined
[20:11] *** sena_kun joined
[20:13] *** Altai-man left
[20:22] *** tib left
[20:22] *** camelia left
[20:25] *** tib joined
[20:25] *** camelia joined
[20:32] <vrurg> Can somebody help me with parameter binding a bit? I'm working on making this gist work: https://gist.github.com/vrurg/caeac11d7a2cb5f2c87d910a2df96c30. Basically, everything works, the subset gets instantiated correctly, as introspection shows. But when method foo is called I get 'inconsistent bind error' and it looks like moar internally still typechecks against uninstantiated subset. 

[20:34] <vrurg> Can I do something about it or is it moar specifics?

[20:56] *** travis-ci joined
[20:56] <travis-ci> MoarVM build passed. Jonathan Worthington 'Merge pull request #1374 from MoarVM/eliminate-static-race-condition

[20:56] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/745269145 https://github.com/MoarVM/MoarVM/compare/96bd704455b3...aaa1af7724f1

[20:56] *** travis-ci left
[21:09] <jnthn> vrurg: Probably you need to tweak the way signatures are lowered (lower_signature or some such in Actions)

[21:09] *** sena_kun left
[21:10] <jnthn> You'll need to teach it to not enforce the type check if the value is undefined (e.g. fix up the code-gen for that)

[21:10] <vrurg> jnthn: done already. I don't see it invoked though after all.

[21:10] <jnthn> Try dumping the bytecode to make sure it looks right 

[21:11] <jnthn> (e.g. it's doing a isconcrete and then not doing the istype or whatever)

[21:11] <jnthn> Oh, or maybe it's about the constraint type checks, which are emitted separately from the nominal ones

[21:11] <jnthn> Nominal ones happen before the symbol is bound, constraint ones after

[21:11] <jnthn> I guess it's the latter

[21:12] <jnthn> But again, can be worth checking it only does them conditionally

[21:12] *** patrickb left
[21:15] <vrurg> Somehow I forgot to check the AST. But at least you re-assured me that binding wouldn't bypass what lower_signature prdouces. So, it's now clear where to look at.

[21:15] <vrurg> jnthn: BTW, glad to see you again!

[21:16] <jnthn> No, other than unboxing for native types, the VM doesn't enforce any parameter type checks

[21:16] <jnthn> So it'll all be in lower_signature

[21:16] <vrurg> Oh, my... At least it was so nice of me to inject debug printing into a generic branch of a condition and expect it to fire for a nominal one...

[21:19] <vrurg> jnthn: Some of your help might be needed, if you have a spare minute. In the big rework of coercions I touched handling of generics in lower_signature. But to work at runtime the code needs to have access to the signature object. The only way I found is through ctxcode/getcodeobject which breaks inlining. If you have any idea how to help this situation I'd highly appreciate it.

[22:10] *** zakharyas left
[23:07] *** leont joined
[23:49] *** leont left
