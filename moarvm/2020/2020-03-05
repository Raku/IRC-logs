[01:03] *** MasterDuke left
[01:22] *** sena_kun joined
[01:24] *** Altai-man_ left
[01:53] *** tobs left
[02:05] *** tobs joined
[02:27] *** leont left
[03:21] *** Altai-man_ joined
[03:24] *** sena_kun left
[05:23] *** sena_kun joined
[05:24] *** Altai-man_ left
[06:03] *** lizmat left
[06:40] *** ZzZombo left
[06:42] *** ZzZombo joined
[06:48] *** ZzZombo left
[06:50] *** ZzZombo joined
[07:09] *** lizmat joined
[07:21] *** Altai-man_ joined
[07:24] *** sena_kun left
[07:26] *** ZzZombo left
[07:29] *** ZzZombo joined
[07:36] *** lizmat left
[07:54] *** ZzZombo left
[07:54] *** ZzZombo joined
[08:06] *** lizmat joined
[08:52] *** lizmat left
[08:53] *** zakharyas joined
[09:01] *** lizmat joined
[09:07] *** rypervenche left
[09:07] *** rba[m] left
[09:07] *** Kaiepi left
[09:07] *** unicodable6 left
[09:07] *** greppable6 left
[09:07] *** sourceable6 left
[09:07] *** nativecallable6 left
[09:07] *** shareable6 left
[09:07] *** bloatable6 left
[09:07] *** committable6 left
[09:07] *** coverable6 left
[09:07] *** mtj_ left
[09:22] *** sena_kun joined
[09:24] *** Altai-man_ left
[09:39] *** lizmat left
[09:43] *** rypervenche joined
[09:43] *** rba[m] joined
[09:43] *** Kaiepi joined
[09:43] *** unicodable6 joined
[09:43] *** greppable6 joined
[09:43] *** nativecallable6 joined
[09:43] *** sourceable6 joined
[09:43] *** shareable6 joined
[09:43] *** bloatable6 joined
[09:43] *** committable6 joined
[09:43] *** coverable6 joined
[09:43] *** mtj_ joined
[09:56] *** lizmat joined
[11:21] *** Altai-man_ joined
[11:24] *** sena_kun left
[11:39] *** lizmat left
[12:16] *** leont joined
[12:20] *** lizmat joined
[12:49] *** zakharyas left
[12:50] *** ZzZombo_ joined
[12:53] *** ZzZombo left
[12:53] *** ZzZombo_ is now known as ZzZombo

[13:22] *** sena_kun joined
[13:24] *** Altai-man_ left
[14:16] *** lucasb joined
[14:27] *** zakharyas joined
[14:59] *** regreg joined
[14:59] <regreg> hello

[14:59] <regreg> does moarvm have some intrinsic performance limitations?

[15:00] <regreg> based on ISA limitations

[15:15] <regreg> does moarvm have autoinlining?

[15:17] <sena_kun> regreg, I think a lot of core devs are busy with GPW, so you might need to wait a bit to get answers.

[15:21] *** Altai-man_ joined
[15:24] *** sena_kun left
[15:24] <regreg> what is GPW?

[15:25] <leont> German Perl Workshop

[15:25] <regreg> ah

[15:25] <leont> It's from yesterday until tomorrow

[15:25] <Guest1277> Are any videos from GPW available yet?

[15:26] <regreg> cool

[15:26] <regreg> i'm trying to implement a CAS

[15:26] <regreg> i guess raku is a good choice right?

[15:26] <regreg> never coded in raku before

[15:27] <leont> Content addressed store?

[15:27] <regreg> no, Computer Algebra System

[15:28] <regreg> i'm somewhat familiar with LISP and CLOS

[15:28] <leont> That makes more sense

[15:49] <timotimo> regreg: moarvm does inlining as well as on-stack-replacement for hot loops, it also jit-compiles code to x86_64 assembly instructions during runtime

[15:50] <timotimo> anything moar can't do for you you can probably do with NativeCall and something written in C/fortran/pascal/rust/nim/whatever

[16:00] <timotimo> regreg: all that said, i'm not sure what you're refering to with the intrinsic performance limitations; like some overheads you can't get rid of for example?

[16:01] <regreg> timotimo, right inherent overhead

[16:01] <regreg> like not being able to allocate on stack

[16:03] <timotimo> allocating on stack is a thing moarvm is learning to do at the moment; we're approaching it from the angle of "partial escape analysis" + "scalar replacement"

[16:03] <timotimo> i.e. objects can be stack-allocated even if they sometimes escape, and an object that is treated this way turns into a bunch of simple local variables in the mean time

[16:04] <timotimo> you can't go wrong with watching a few of jnthn's talks, or reading his slides; you can find the slides on https://jnthn.net/slides.html - you'll want to scroll down to the "archive"

[16:04] <timotimo> the "perl 6 performance update" from the perlcon 2019 might be especially interesting

[16:04] <regreg> thanks for the links

[16:05] <timotimo> YW

[16:06] <regreg> there is a difference between implementation details

[16:06] <regreg> and inherent limitations that are probably never going to be fixed

[16:07] <regreg> i'm more interested in the second category

[16:19] *** AmazingPudding is now known as DrEeevil

[16:23] *** lizmat left
[16:26] <timotimo> we don't have tail-call optimization, and i think we've decided against getting that at some point?

[16:51] *** [Coke] joined
[17:05] <regreg> i'm ok with that, i'm not a big fan of recursivity anyway

[17:22] *** sena_kun joined
[17:24] *** Altai-man_ left
[17:33] *** leont left
[17:49] *** leont joined
[17:53] *** MasterDuke joined
[18:18] *** sivoais left
[18:27] *** sivoais joined
[18:55] *** zakharyas left
[19:10] *** MasterDuke left
[19:21] *** Altai-man_ joined
[19:24] *** sena_kun left
[20:10] *** zakharyas joined
[20:24] *** MasterDuke joined
[20:58] *** regreg left
[21:09] *** regreg joined
[21:23] *** sena_kun joined
[21:24] *** Altai-man_ left
[21:27] *** zakharyas left
[21:50] <MasterDuke> nice. https://github.com/libtom/libtommath/pull/478 was just merged, so next time we update libtommath we'll get a more correct expmod

[22:30] *** lizmat joined
[22:56] *** lucasb left
[23:08] *** MasterDuke left
[23:22] *** Altai-man_ joined
[23:25] *** sena_kun left
