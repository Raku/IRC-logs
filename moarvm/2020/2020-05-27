[00:04] *** konvertex left
[00:11] <moon-child> discoD: thank you!!

[00:20] <discoD> happy to help. I've got one more for arrays (needs more testing), then all the nativecall bugs I've experienced will be squashed

[00:25] <moon-child> Perhaps I'll take another crack at a raku embedding api once that's merged

[00:36] <discoD> That'd be nice. I've wished for it a few times. 

[00:38] <moon-child> the main difficulty is that the global namespace isn't dynamic, so you have to decide ahead of time all of what you want to expose

[00:39] <moon-child> or use weird hacks like the repl does

[00:42] <moon-child> (also, I think there's a bug in mvm with shared state; when I tried to start up multiple mvm instances, I got a crash.  But the overhead of an instance is high enough that you'd probably want everything on one instance anyway)

[00:43] <discoD> you mean if you link libmoar and start 2 instances it chokes?

[00:43] <moon-child> yeah

[00:43] <moon-child> that might also be resolved, though; it was a while ago

[00:44] <discoD> i see. I've never tried it. I do have dreams about standalone executables, but I haven't tried that yet either

[00:46] *** lucasb left
[00:49] <moon-child> standalone executables would be cool.  Can't you kinda get that with the jvm backend, though?

[00:51] <discoD> dunno, I've never used it, but maybe I should take a look. I want it because no antivirus would catch it, so I could write undetectable payloads in raku. 

[00:52] <moon-child> ...oh

[00:52] <discoD> for pentesting 

[00:52] <moon-child> I mean, you can do that with something like lua

[00:52] <moon-child> statically link it, embed source code in binary

[00:55] <discoD> sure, there's always a way around av, but I don't know lua very well.

[00:57] <discoD> my only experience with it involves nmap, wireshark, and the syntax highlighter in my text editor. life without good regular expressions is hard

[03:16] *** sourceable6 left
[03:16] *** statisfiable6 left
[03:16] *** bloatable6 left
[03:16] *** linkable6 left
[03:16] *** benchable6 left
[03:16] *** shareable6 left
[03:16] *** quotable6 left
[03:16] *** squashable6 left
[03:16] *** unicodable6 left
[03:16] *** greppable6 left
[03:16] *** tellable6 left
[03:16] *** releasable6 left
[03:16] *** coverable6 left
[03:16] *** nativecallable6 left
[03:16] *** notable6 left
[03:16] *** reportable6 left
[03:16] *** bisectable6 left
[03:16] *** committable6 left
[03:16] *** evalable6 left
[03:17] *** squashable6 joined
[03:17] *** coverable6 joined
[03:17] *** sourceable6 joined
[03:17] *** evalable6 joined
[03:18] *** notable6 joined
[03:18] *** benchable6 joined
[03:18] *** committable6 joined
[03:18] *** linkable6 joined
[03:18] *** statisfiable6 joined
[03:18] *** bloatable6 joined
[03:18] *** reportable6 joined
[03:18] *** releasable6 joined
[03:18] *** greppable6 joined
[03:18] *** quotable6 joined
[03:18] *** shareable6 joined
[03:19] *** bisectable6 joined
[03:19] *** nativecallable6 joined
[03:19] *** unicodable6 joined
[03:19] *** tellable6 joined
[06:28] <nwc10> good *able6, #moarvm 

[06:50] *** domidumont joined
[07:39] *** zakharyas joined
[07:48] *** Altai-man_ joined
[08:01] <MasterDuke> discoD: there was a GSoC project last year to enable creating standalone executables

[08:01] <MasterDuke> i think they got to the point of being able to do so for scripts, but not if it used any modules

[08:03] <MasterDuke> https://6ring.github.io/?pamplemousse

[08:12] *** tbrowder__ joined
[08:19] *** konvertex joined
[08:20] *** tbrowder left
[08:20] *** tbrowder__ is now known as tbrowder

[08:23] *** camelia left
[08:24] *** camelia joined
[08:27] *** sena_kun joined
[08:29] *** Altai-man_ left
[10:27] *** Altai-man_ joined
[10:29] *** sena_kun left
[11:00] *** squashable6 left
[11:03] *** squashable6 joined
[11:42] *** ggoebel joined
[11:44] <ggoebel> discoD: I'm pretty sure pamplemouse got to the point of creating a standalone executable for a script with 1 module.

[11:48] <ggoebel> I think when they stopped they were butting up against the right way to include >1 module in the standalone executable. Nine recently shared his thoughts on that... https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-04-29#l42

[11:49] *** ggoebel left
[12:26] *** zakharyas left
[12:28] *** sena_kun joined
[12:29] *** Altai-man_ left
[12:54] *** pamplemousse joined
[13:00] *** pamplemousse left
[14:15] *** zakharyas joined
[14:27] *** Altai-man_ joined
[14:29] *** sena_kun left
[16:27] *** sena_kun joined
[16:29] *** Altai-man_ left
[17:21] *** patrickb joined
[17:50] *** domidumont left
[17:52] *** zakharyas left
[18:27] *** Altai-man_ joined
[18:29] *** sena_kun left
[18:50] *** patrickb left
[18:51] *** rypervenche left
[18:53] *** rypervenche joined
[19:08] *** zakharyas joined
[19:43] *** lucasb joined
[19:56] *** Kaeipi joined
[19:57] *** Kaiepi left
[20:09] <discoD> Thanks for the links. I'll take a look.

[20:09] <discoD> I'm fuzzing string decoders because I'm going stir-crazy. Is there a way to get at the chinese decoders(gb2312,gb18030) from raku, or is that NYI?

[20:15] *** patrickb joined
[20:18] *** patrickb left
[20:21] <discoD> nevermind

[20:27] *** sena_kun joined
[20:29] *** Altai-man_ left
[20:48] *** zakharyas left
[21:27] <timotimo> if you can, i'd really recommend doing fuzzing with the function directly, completely without rakudo or even nqp

[22:00] <discoD> i'd prefer that too. I tried fuzzing in memory with PIN a few weeks ago, but I could never wrangle all the background threads, and restoring state always crashed. 

[22:02] <discoD> i'll look at starting a vm instance manually and go from there. i want the gc to run, because that's where most bugs would manifest

[22:10] *** MasterDuke left
[22:11] <timotimo> you can force a GC run, too

[22:27] *** Altai-man_ joined
[22:29] *** sena_kun left
[22:54] *** Kaiepi joined
[22:55] *** Kaeipi left
[23:59] *** Altai-man_ left
