[01:48] *** evalable6 left
[01:50] *** evalable6 joined
[01:51] *** Altai-man_ joined
[01:54] *** sena_kun left
[02:54] *** evalable6 left
[02:55] *** evalable6 joined
[03:52] *** sena_kun joined
[03:54] *** Altai-man_ left
[05:51] *** Altai-man_ joined
[05:54] *** sena_kun left
[07:13] *** releasable6 left
[07:13] *** bloatable6 left
[07:13] *** benchable6 left
[07:13] *** unicodable6 left
[07:13] *** notable6 left
[07:13] *** committable6 left
[07:13] *** shareable6 left
[07:13] *** quotable6 left
[07:13] *** nativecallable6 left
[07:13] *** sourceable6 left
[07:13] *** bisectable6 left
[07:13] *** statisfiable6 left
[07:13] *** reportable6 left
[07:13] *** squashable6 left
[07:13] *** greppable6 left
[07:13] *** coverable6 left
[07:14] *** committable6 joined
[07:14] *** unicodable6 joined
[07:14] *** bloatable6 joined
[07:14] *** reportable6 joined
[07:15] *** coverable6 joined
[07:15] *** notable6 joined
[07:15] *** statisfiable6 joined
[07:15] *** quotable6 joined
[07:15] *** shareable6 joined
[07:15] *** benchable6 joined
[07:15] *** greppable6 joined
[07:16] *** squashable6 joined
[07:16] *** sourceable6 joined
[07:16] *** nativecallable6 joined
[07:16] *** releasable6 joined
[07:16] *** bisectable6 joined
[07:53] *** sena_kun joined
[07:54] *** Altai-man_ left
[09:52] *** Altai-man_ joined
[09:54] *** sena_kun left
[11:53] *** sena_kun joined
[11:54] *** Altai-man_ left
[12:17] <lizmat> what would be required to create a CCLASS_NEWLINE like nqp::const for the 'Canonical_Combining_Class" property ?

[12:18] <lizmat> so that one could easily see if any characters in a string have that property ?

[12:22] <nine> Looks like not much. Just adding the new constant, and implementing the test in MVM_string_grapheme_is_cclass

[12:40] <lizmat> hmmm...

[12:41] <lizmat> actually, that's a property that returns strings, I just realized

[12:41] <lizmat> so I'd want to check if it returns "0"

[12:41] <lizmat> but that should be easy, no ?

[12:43] <lizmat> looking at making Str.raku about 2x as fast

[13:48] <nine> timotimo: is the profiler's heap analyzer already meant to be used? If yes, you need to push your model additions to p6-app-moarvm-heapanalyzer.

[13:53] *** Altai-man_ joined
[13:54] *** sena_kun left
[14:04] <nine> Seems like the plain old moarvm-ha doesn't work anymore either :/

[14:04] <nine> expected the collectables header at 0xD957A1A6, but got "3\0\0\0" instead.

[14:10] *** AlexDaniel left
[15:53] *** sena_kun joined
[15:55] *** Altai-man_ left
[16:09] *** domidumont joined
[16:39] <samcv> lizmat, yes that would be pretty easy

[16:41] <samcv> lizmat, so you are trying to check if a string contains "\n" as fast as possible? why doesn't index work?

[16:42] <timotimo> nine: sorry, you'll need to grab the heapanalyzer from my github account, or set the moarvm heap snapshot format version number with a define

[16:42] <samcv> ah. you want to check a canonical combining class? which specific property for what reason do you want to check?

[16:50] <samcv> a nqp::index except it works with a propcode and propval would make sense to implement

[16:52] <nine> timotimo: both format 2 and 3 need changes in p6-app-moarvm-heapanalyzer.

[16:53] <nine> timotimo: is there a special branch? I did look in your github account, but only found commits from 2016 for the heapanalyzer

[16:59] <timotimo> oh, was i working in a branch? that might be the case

[16:59] <timotimo> i'm on nqp-ops-makes-stuff-faster at that moment

[17:00] <timotimo> sorry about the mess

[17:13] *** vesper left
[17:14] *** vesper11 joined
[17:45] *** kiwi_7 joined
[17:48] *** robertle left
[17:52] *** Altai-man_ joined
[17:55] *** sena_kun left
[17:58] *** patrickb joined
[18:10] <lizmat> samcv: the goal was to speed up Str.raku (formerly known as Str.perl)

[18:10] <lizmat> there's a whole loop for looking up special cases.  Which could be evaded if we had a fast way of making sure there are no special cases in a string

[18:35] <lizmat> samcv: on second thought: it propably doesn't make any sense anyway, because we need to check for specific exceptions anyway

[19:10] *** kiwi_7 left
[19:10] *** raiph joined
[19:52] *** patrickb left
[19:53] *** sena_kun joined
[19:54] *** Altai-man_ left
[20:09] *** zakharyas joined
[20:44] *** domidumont left
[20:51] *** zakharyas left
[21:00] *** raiph left
[21:52] *** Altai-man_ joined
[21:54] *** sena_kun left
[22:08] <samcv> lizmat, the fact uniprop-int does not return 0 for "0" is a bug. not sure how much impact it has on things, though it was on my bucket list

[22:13] *** raiph joined
[22:28] *** AlexDaniel joined
[22:28] *** AlexDaniel left
[22:28] *** AlexDaniel joined
[22:46] <lizmat> it was using uniprop-str

[23:01] <samcv> lizmat, yeah i looked at the code. thanks for making it faster though :)

[23:01] *** raiph left
[23:02] *** raiph joined
[23:53] *** sena_kun joined
[23:55] *** Altai-man_ left
