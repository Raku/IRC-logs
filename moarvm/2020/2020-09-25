[00:46] *** leont left
[01:19] <timotimo> should we be kicking out deopt points when an op is replaced with one that can't actually deopt?

[01:23] *** ggoebel joined
[01:25] *** ggoebel_ joined
[01:27] *** ggoebel left
[01:37] *** squashable6 left
[01:38] *** squashable6 joined
[02:23] *** AlexDani` joined
[02:27] *** AlexDaniel left
[02:44] *** AlexDani` is now known as AlexDaniel

[02:44] *** AlexDaniel left
[02:44] *** AlexDaniel joined
[03:56] *** Kaiepi left
[03:56] *** Kaiepi joined
[04:29] *** Kaiepi left
[04:29] *** Kaiepi joined
[04:48] *** Kaiepi left
[04:48] *** Kaiepi joined
[05:13] *** Kaeipi joined
[05:14] *** Kaiepi left
[05:15] <nwc10> good *, #moarvm 

[05:27] *** squashable6 left
[05:30] *** squashable6 joined
[06:43] *** domidumont joined
[06:55] *** MasterDuke joined
[07:12] *** raku-bridge left
[07:13] *** raku-bridge joined
[07:13] *** raku-bridge left
[07:13] *** raku-bridge joined
[07:34] *** Altai-man joined
[07:54] *** zakharyas joined
[07:55] *** zakharyas1 joined
[07:58] *** zakharyas left
[09:01] *** lizmat_ joined
[09:03] *** lizmat__ joined
[09:04] *** lizmat left
[09:04] *** lizmat___ joined
[09:07] *** lizmat_ left
[09:07] *** lizmat__ left
[09:08] *** lizmat___ is now known as lizmat

[09:23] <jnthn> morning o/

[09:23] <jnthn> timotimo: I don't think there's any value in removing them from the linked list of annotations; anything that wants to know if there's a real chance of deopt can check the property on the op at the point it wishes to know that

[09:24] <jnthn> timotimo: There is some value if we can somehow compress the deopt table though

[09:24] <jnthn> Because at the moment it can have quite a few unused entries in

[09:26] <nwc10> \o

[09:31] * jnthn goes to make coffee, discovers he already made one, just left it on the machine

[09:31] <nwc10> did you get bonus flavour?

[09:31] <MasterDuke> +1-1 for past jnthn

[09:32] <jnthn> nwc10: Pretty sure not

[09:33] <jnthn> It tastes normal, anyway :)

[09:33] <nwc10> good

[09:37] <MasterDuke> nwc10: seems like you know more about building gmp than i do. any idea why i'm getting `/usr/bin/ld: 3rdparty/gmp/libgmp.a(bdiv_q_1.o): warning: relocation against `__gmp_binvert_limb_table' in read-only section `.text'/usr/bin/ld: 3rdparty/gmp/libgmp.a(bdiv_q_1.o): relocation R_X86_64_PC32 against symbol `__gmp_binvert_limb_table' can not be used

[09:37] <MasterDuke> when making a shared object; recompile with -fPIC/usr/bin/ld: final link failed: bad value`

[09:38] <MasterDuke> but it looks like both it and moarvm are in fact being complied with -fPIC

[09:39] <MasterDuke> oh, and this is only after actually putting some gmp function calls in bigintops.c. otherwise it builds fine

[09:40] <nwc10> er.

[09:40] <nwc10> no, I don't know about that one. That's far more a generic "something about linking, ELF formats, and PIC" sort of error

[09:40] *** sena_kun joined
[09:41] <MasterDuke> heh. you also probably know more about any/all of those subjects than i do

[09:42] <nwc10> what I do know (and this is fun from up to 20 years ago) was that x86 is very lax. And it turns out that it is quite happy to link libraries compiled without -fPIC to code which is, and then made into a shared object

[09:42] <nwc10> and this was really painful when people were trying to port to ARM, because ARM could not (at least not the 32 bit instruction set, easily)

[09:42] <nwc10> so eventually the ARM toolchain folks came up with a hack that would work

[09:42] <nwc10> then

[09:42] *** Altai-man left
[09:43] <nwc10> along comes amd64 with a similar restrction

[09:43] <nwc10> amd64 is "big" enough that all the projects were forced to fix their build flags

[09:43] <nwc10> rather than things work around it

[09:43] <nwc10> so

[09:43] <nwc10> the possible problem here might be as simple as "we need to build that nested gmp with -fPIC"

[09:44] <nwc10> even though it "looks" like we wanted to build a static library

[09:44] <MasterDuke> i did think to check, and it looks like the Makefile in 3rdparty/gmp does have -fPIC

[10:21] *** Kaeipi left
[10:21] *** Merfont joined
[10:41] *** leont joined
[10:50] *** zakharyas1 left
[11:03] <MasterDuke> this is more annoying than i'd hoped. nothing i've tried has changed anything

[12:43] *** ChanServ sets mode: +o jnthn

[12:43] *** jnthn sets mode: +b AlexDan*!*@*

[12:43] *** AlexDaniel was kicked by jnthn (AlexDaniel))
[12:43] *** jnthn sets mode: -o jnthn

[13:09] *** pamplemousse joined
[13:10] <timotimo> jnthn: i was assuming all the "set" and "getspeshslot" operations were left in the code because of deopt points making them artificially "needed"

[13:13] <jnthn> timotimo: No, see https://github.com/MoarVM/MoarVM/blob/master/src/spesh/usages.c#L361

[13:14] <jnthn> However, I had pondered that the getspeshslot case could set up a table of spesh slots to write into registers pre deopt so we can kick them out

[13:14] <timotimo> heck yeah

[13:15] <timotimo> i was also thinking the materialization mechanism should be useful for this

[13:19] <timotimo> hum. there's also some two-argument PHIs left in there

[13:20] <timotimo> it's possible that those trip us up

[13:20] <timotimo> but they also shouldn't exist in the first place, and last time i tried to make one-argument PHI nodes go away, stuff broke in all kinds of places

[13:25] <jnthn> Yeah, I realized it would be quite possible to do that at the time I was working on PEA

[13:27] <MasterDuke> tobs: ping

[13:40] *** Altai-man joined
[13:43] *** sena_kun left
[13:43] <MasterDuke> hm. i sort of get things to build if i use the libgmp.so instead of .a

[13:43] *** lucasb joined
[13:48] <MasterDuke> heh. looks like my attempt to init a gmp bigint by pointing it at the tommath bigints array of digits works

[13:50] <MasterDuke> huh. but breaks when the number gets too big...

[13:52] <jnthn> I'm a tiny bit surprised it works at all, if you mean what I think you mean :)

[13:54] <MasterDuke> `mpz_t gmp; mpz_init(gmp); mpz_import(gmp, ia->used, 1, sizeof(ia->dp[0]), 0, 0, ia->dp);`

[13:55] <MasterDuke> dirty hack? check. easy way to try some gmp vs tommath comparisons? also check

[13:55] <timotimo> just gotta make sure you don't free the data twice

[13:56] <MasterDuke> i like to live dangerously and not free it at all

[13:56] <timotimo> brilliant

[13:56] <timotimo> RAM is cheap

[13:57] <MasterDuke> as i learned from watching the first half of mc hammer: behind the music, "the money never runs out"

[13:57] <jnthn> Going by the names, the folks who came up with the fast primality testing algo are from the part of the world I'm living in :)

[13:57] <timotimo> the one for 32bit and 64bit integers? using the hash map and a smaller amount of directed test rounds?

[13:57] <MasterDuke> Comenius University, Bratislava, Slovakia

[13:58] *** zakharyas joined
[13:59] <jnthn> hah, I even know how the building looks :)

[13:59] <jnthn> I used to live 5 minutes walk from it

[14:00] <jnthn> Well, or at least one part of it, maybe it has multiple locations

[14:00] <MasterDuke> `say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now` with moarvm/rakudo master took ~26s. using gmp's mpz_probab_prime_p (with 100 rounds) takes ~0.14s

[14:00] <jnthn> o.O

[14:00] <jnthn> And...gives the same results? :)

[14:00] <MasterDuke> heh. yep

[14:00] <jnthn> Wow

[14:01] <MasterDuke> yeah. gmp is fast

[14:01] <timotimo> huh

[14:01] <timotimo> but why

[14:01] <MasterDuke> hand-optimized assembly for my cpu

[14:01] <jnthn> That's still a hell of a speedup

[14:02] <MasterDuke> and i think some differences in the composition of algorithms

[14:02] <jnthn> Yeah, that feels to me like there's something algorithmic going on too

[14:03] <MasterDuke> AlexDaniel pointed out a comment in the tommath implementation that if you set a define it'll do something faster, but maybe less precise and i don't think we set that define

[14:03] <MasterDuke> haven't tested that difference

[14:17] <tobs> MasterDuke: so it's better (read: working at all) when we build and install a shared library?

[14:17] <tobs> (I'm still at work for some time, so can't really update any PRs to that effect)

[14:18] <MasterDuke> yeah. i just changed the references to libgmp.a in MoarVM's Makefile to libgmp.so (and copied them to the same place libgmp.a was copied to)

[14:20] <Geth> ¦ MoarVM: 25c70bfe01 | (Nicholas Clark)++ | 5 files

[14:20] <Geth> ¦ MoarVM: Hash tables must also resize if the max probe distance is hit on an empty slot.

[14:20] <Geth> ¦ MoarVM: 

[14:20] <Geth> ¦ MoarVM: Not just for the case of max probe distance being hit during the move

[14:20] <Geth> ¦ MoarVM: operation to open up a slot to maintain the Robin Hood invariant.

[14:21] <Geth> ¦ MoarVM: 

[14:21] <Geth> ¦ MoarVM: This is a bug, but it's extremely unlikely that anyone would hit it. It would

[14:21] <Geth> ¦ MoarVM: take either extremely pathological data, or an extremely large data set with

[14:21] <Geth> ¦ MoarVM: <…commit message has 6 more lines…>

[14:21] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/25c70bfe01

[14:21] <tobs> The .so needs to be installed anyway, so that `cp .libs/libgmp.a .` hack in the build rule should go away. (Just leaving a note about that in the hive-mind :-) )

[14:22] <MasterDuke> k

[14:30] <MasterDuke> afk for a little bit, will be back later

[14:34] <Geth> ¦ MoarVM/new-disp: 87b32ba5da | (Jonathan Worthington)++ | 3 files

[14:34] <Geth> ¦ MoarVM/new-disp: Move dispatch program cleanup out of transition

[14:34] <Geth> ¦ MoarVM/new-disp: 

[14:34] <Geth> ¦ MoarVM/new-disp: Avoids a bunch of repetition, but more importantly means that we can

[14:34] <Geth> ¦ MoarVM/new-disp: choose when we're going to free it, which we'll need a bit more control

[14:34] <Geth> ¦ MoarVM/new-disp: over for the sake of resumption.

[14:34] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/87b32ba5da

[14:42] *** zakharyas1 joined
[14:42] *** Merfont left
[14:42] *** Kaiepi joined
[14:45] *** zakharyas left
[14:51] *** Kaeipi joined
[14:51] *** Kaiepi left
[14:54] *** pamplemousse left
[15:17] <Geth> ¦ MoarVM/new-disp: 06d5443893 | (Jonathan Worthington)++ | 8 files

[15:17] <Geth> ¦ MoarVM/new-disp: Basic invocation of a dispatch resume callback

[15:17] <Geth> ¦ MoarVM/new-disp: 

[15:17] <Geth> ¦ MoarVM/new-disp: Such that we find the current resumable dispatch we're running on the

[15:17] <Geth> ¦ MoarVM/new-disp: stack and invoke the resume callback, which should then be able to do

[15:17] <Geth> ¦ MoarVM/new-disp: further dispatcher delegations and build up a dispatch program for the

[15:17] <Geth> ¦ MoarVM/new-disp: resumption.

[15:17] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/06d5443893

[15:21] <jnthn> That seems to basically work, except we can't get the the args of the initial dispatch, which we require in order to do the resume

[15:21] <jnthn> Well, and then all the other missing pieces :)

[15:25] <timotimo> first the missing pieces, then all the other missing pieces

[15:27] <jnthn> Pretty much

[15:28] <jnthn> The tricky balancing act of trying to keep the stuff in the VM general, but also make sure it can know enough that we optimize things well

[15:30] <timotimo> yeah

[15:32] *** pamplemousse_ joined
[15:37] *** pamplemousse__ joined
[15:40] *** pamplemousse_ left
[16:59] *** domidumont left
[17:41] *** sena_kun joined
[17:43] *** Altai-man left
[18:18] *** zakharyas1 left
[18:25] <MasterDuke> hm. because `mpz_t i` is actually a one-element array of a struct, compared to `mp_int i` actually being an instance of the struct, where there's `mp_int *i` i can just use `mpz_t i`, correct?

[18:35] <MasterDuke> ok, ignore that question

[18:36] <MasterDuke> new question. gmp doesn't seem to have the concept of a negative 0. is that going to be a problem?

[19:07] *** zakharyas joined
[19:23] *** pamplemousse__ left
[20:08] <jnthn> MasterDuke: I don't believe so; Raku doesn't distinguish those

[20:09] <jnthn> m: say -0

[20:09] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0␤»

[20:09] <jnthn> m: say -0 === 0

[20:09] <camelia> rakudo-moar 85847d2f1: OUTPUT: «True␤»

[20:09] <jnthn> m: say -0e0 === 0e0

[20:09] <camelia> rakudo-moar 85847d2f1: OUTPUT: «False␤»

[20:09] <jnthn> I can't think of why you'd want a negative zero in integer math anyway. 

[20:18] <MasterDuke> cool, makes things easier

[20:18] <jnthn> Yes, we might get a simplification out of not having to deal with that

[20:23] <MasterDuke> ugh. all this special handling for bit ops is annoying. much of it might go away, but figuring that out...

[20:23] *** evalable6 left
[20:23] *** linkable6 left
[20:25] *** evalable6 joined
[20:25] *** linkable6 joined
[20:26] <timotimo> yeah, having to fake up two's complement, yay

[20:27] <nwc10> do you mean that? Negative zero would imply one's complement (or sign and magnitude)

[20:28] <timotimo> i meant for implementing bitwise ops

[20:28] <nwc10> ah OK. I suspect I'm confused and should go to bed

[20:31] <MasterDuke> tommath is not two's-complement for bitops, so there's a bunch of stuff we do. gmp is, so hopefully it should end up simpler

[20:34] *** zakharyas left
[20:38] <MasterDuke> and just to make the whole project simpler, tommath always has the dest argument as the last one, but gmp has it as the first one...

[20:40] <jnthn> I confused the heck out of myself earlier this month by reading assembler output in the style that puts the destination last but not realizing it :)

[20:44] <sena_kun> Ouch, this sounds pretty unusual to do.

[20:49] <jnthn> There's (as I roughly understand it) two common styles for x86/x64 at least

[20:49] <jnthn> The one I like reading, and the one that confuses me every time :)

[20:55] <MasterDuke> timotimo: know why you did this? https://github.com/MoarVM/MoarVM/commit/aab5cdaca8ab979d2ff640132aff8699b427a8ad

[20:55] <timotimo> probably about how it reacts to negative numbers

[20:56] <jnthn> I'm perhaps misremembering, but isn't C's one undefiend on negative numbers?

[20:57] <jnthn> ah, not quite, I guess, but https://stackoverflow.com/questions/11720656/modulo-operation-with-negative-numbers

[20:57] <MasterDuke> do we want negative numbers back

[20:57] <MasterDuke> ?

[20:57] <timotimo> why, who took them?

[20:58] <jnthn> Oh, no, I was close; according to the bit of spec referenced in https://stackoverflow.com/questions/11630321/why-does-c-output-negative-numbers-when-using-modulo it's implementation defined

[20:58] <jnthn> If both are negative

[20:58] <jnthn> There'll be spectests about this, I'd hope

[20:59] <MasterDuke> well, i think tommath and gmp are the same, both always give positives

[21:00] <jnthn> haha

[21:00] <jnthn> > Back in the day, someone designing the x86 instruction set decided it was right and good to round integer division toward zero rather than round down. (May the fleas of a thousand camels nest in his mother's beard.)

[21:00] <jnthn> That's a curse I'd not heard before :)

[21:01] <jnthn> Anyway, yes, looks like the C modulo operator is "here be dragons", though we could maybe do a sign check and then sue it

[21:01] <jnthn> *use

[21:02] <jnthn> If tommath and gmp do the same, then great.

[21:03] <MasterDuke> cool, gmp has an fdiv that 'rounds q down towards -infinity, and r will have the same sign as d. The f stands for “floor”.'

[21:03] <timotimo> do dragons normally react to being sued?

[21:04] <MasterDuke> which may simplify things, based on https://github.com/MoarVM/MoarVM/blob/master/src/math/bigintops.c#L597-L599

[21:04] <jnthn> timotimo: Their lawyers get fired...literally

[21:05] <timotimo> must be hard to be a dragonslawyer

[21:05] <jnthn> :D

[21:05] <timotimo> hm, is there a reason why you sometimes say lawyer and sometimes attourney?

[21:05] <timotimo> is that british vs american?

[21:06] <MasterDuke> don't think so. british is barrister

[21:06] <timotimo> ah because they are "on the bar"

[21:06] <MasterDuke> i think lawyer and attorney are pretty much the same in american

[21:08] <jnthn> I think lawyer is germanic and attorney is romance

[21:09] <MasterDuke> but barrister, soliciter, and lawyer have different meanings in british, aiui

[21:09] <jnthn> I believe so, yes, though don't ask me what they are :)

[21:10] <jnthn> Czech has pravnik and advokat which are synonyms, the former derived from the Czech word for law and the other one feeling loan-ish

[21:10] <jnthn> From somewhere.

[21:10] <jnthn> Ah, Latin apparently

[21:12] <jnthn> I'd never quite put together "barrister" and "on the bar" :)

[21:12] <jnthn> One of those "how didn't I see it" moments

[21:12] <MasterDuke> if i never have to find out the difference during my time here i'll be happy

[21:13] <jnthn> I got curious, and https://www.hg.org/legal-articles/concept-and-differences-between-a-lawyer-a-solicitor-and-a-barrister-in-uk-18875 

[21:13] <jnthn> game time, bbl

[21:28] <MasterDuke> ugh. only 34% through bigintops.c. also time to take a break and lose at quake champions

[21:32] <timotimo> IMPRESSIVE

[21:34] <MasterDuke> wish i got that more often...

[21:35] <timotimo> that's headshots with the railgun, right?

[21:36] <timotimo> i haven't played very much quake

[21:36] <MasterDuke> two consecutive railgun hits

[21:36] <MasterDuke> at least it is in quake champions. don't remember the previous quakes

[21:37] <timotimo> ah

[21:43] *** sena_kun left
[21:46] <timotimo> time for me to retire now / and become a duck

[21:52] <MasterDuke> float?

[23:10] *** dogbert17 left
[23:11] *** harrow` joined
[23:13] *** harrow left
[23:27] *** reportable6 left
