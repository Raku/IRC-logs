[00:38] *** nativecallable6 left
[00:38] *** statisfiable6 left
[00:38] *** quotable6 left
[00:38] *** tellable6 left
[00:38] *** greppable6 left
[00:38] *** bloatable6 left
[00:38] *** releasable6 left
[00:38] *** squashable6 left
[00:38] *** benchable6 left
[00:38] *** committable6 left
[00:38] *** evalable6 left
[00:38] *** sourceable6 left
[00:38] *** linkable6 left
[00:38] *** unicodable6 left
[00:38] *** notable6 left
[00:38] *** coverable6 left
[00:38] *** reportable6 left
[00:38] *** bisectable6 left
[00:38] *** shareable6 left
[00:38] *** shareable6 joined
[00:39] *** benchable6 joined
[00:39] *** statisfiable6 joined
[00:39] *** greppable6 joined
[00:39] *** nativecallable6 joined
[00:40] *** sourceable6 joined
[00:40] *** squashable6 joined
[00:40] *** bisectable6 joined
[00:40] *** bloatable6 joined
[00:40] *** coverable6 joined
[00:40] *** reportable6 joined
[00:40] *** linkable6 joined
[00:40] *** committable6 joined
[00:40] *** unicodable6 joined
[00:41] *** releasable6 joined
[00:41] *** notable6 joined
[00:41] *** tellable6 joined
[00:41] *** evalable6 joined
[00:41] *** quotable6 joined
[02:35] *** releasable6 left
[02:35] *** bloatable6 left
[02:35] *** unicodable6 left
[02:35] *** tellable6 left
[02:35] *** nativecallable6 left
[02:35] *** benchable6 left
[02:35] *** evalable6 left
[02:35] *** bisectable6 left
[02:35] *** notable6 left
[02:35] *** coverable6 left
[02:35] *** statisfiable6 left
[02:35] *** quotable6 left
[02:35] *** sourceable6 left
[02:35] *** linkable6 left
[02:35] *** reportable6 left
[02:35] *** committable6 left
[02:35] *** shareable6 left
[02:35] *** greppable6 left
[02:35] *** squashable6 left
[02:35] *** greppable6 joined
[02:35] *** nativecallable6 joined
[02:35] *** releasable6 joined
[02:36] *** shareable6 joined
[02:36] *** bisectable6 joined
[02:36] *** notable6 joined
[02:36] *** coverable6 joined
[02:36] *** evalable6 joined
[02:36] *** tellable6 joined
[02:36] *** quotable6 joined
[02:36] *** sourceable6 joined
[02:37] *** committable6 joined
[02:37] *** benchable6 joined
[02:37] *** bloatable6 joined
[02:37] *** reportable6 joined
[02:37] *** statisfiable6 joined
[02:37] *** squashable6 joined
[02:38] *** unicodable6 joined
[02:38] *** linkable6 joined
[04:09] *** notable6 left
[04:09] *** benchable6 left
[04:09] *** linkable6 left
[04:09] *** sourceable6 left
[04:09] *** greppable6 left
[04:09] *** quotable6 left
[04:09] *** committable6 left
[04:09] *** evalable6 left
[04:09] *** shareable6 left
[04:09] *** bisectable6 left
[04:09] *** tellable6 left
[04:09] *** bloatable6 left
[04:09] *** unicodable6 left
[04:09] *** reportable6 left
[04:09] *** statisfiable6 left
[04:09] *** nativecallable6 left
[04:09] *** greppable6 joined
[04:09] *** reportable6 joined
[04:10] *** evalable6 joined
[04:10] *** quotable6 joined
[04:10] *** bisectable6 joined
[04:11] *** shareable6 joined
[04:11] *** nativecallable6 joined
[04:11] *** statisfiable6 joined
[04:11] *** sourceable6 joined
[04:11] *** bloatable6 joined
[04:11] *** notable6 joined
[04:12] *** committable6 joined
[04:12] *** linkable6 joined
[04:12] *** tellable6 joined
[04:12] *** benchable6 joined
[04:12] *** unicodable6 joined
[04:43] *** MasterDuke left
[06:32] <nwc10> good *, #moarvm 

[06:33] <nine> good #moarvm, *

[06:34] <nwc10> children dispatched to schools(s)

[06:34] <nwc10> I wonder how many super-spreader events we get this morning... :-(

[07:03] *** Altai-man joined
[07:19] *** sena_kun joined
[07:21] *** Altai-man left
[07:34] *** zakharyas joined
[08:33] *** brrt joined
[08:40] <nwc10> good *, brrt

[08:46] <brrt> good * nwc10

[09:05] <jnthn> morning o/

[09:19] <nwc10> \o

[09:19] *** Kaiepi left
[09:21] *** Kaeipi joined
[09:28] *** Kaeipi left
[09:29] *** Kaiepi joined
[10:06] *** Kaeipi joined
[10:07] *** Kaiepi left
[10:10] *** Kaeipi left
[10:20] *** MasterDuke joined
[11:06] *** brrt left
[11:09] *** zakharyas left
[11:18] *** Altai-man joined
[11:20] *** sena_kun left
[11:21] *** brrt joined
[11:36] *** brrt left
[12:16] *** domidumont joined
[12:19] *** zakharyas joined
[12:30] *** Kaeipi joined
[12:59] <lizmat> nwc10: ugexe just posted on #raku-dev

[12:59] <lizmat> m: say $*KERNEL.arch

[12:59] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´x86_64‚ê§¬ª

[12:59] <lizmat> could that be of help?   Should probably live in the config as well, I guess  :-)

[13:03] <nwc10> that shows up in the -V output. Seems that it can be more reliable than the value of $*VM.config.<osvers>. (But still doesn't distinguish between 32 and 64 bit ABIs)

[13:56] *** domidumont left
[13:56] *** domidumont joined
[14:01] *** domidumont left
[14:20] <Geth> ¬¶ MoarVM/sparc: 0772199939 | (Nicholas Clark)++ | src/6model/reprs/P6opaque.c

[14:20] <Geth> ¬¶ MoarVM/sparc: Correctly align object references (ie pointers) in P6opaque object bodies.

[14:20] <Geth> ¬¶ MoarVM/sparc: 

[14:20] <Geth> ¬¶ MoarVM/sparc: Previously these were written at whatever offset the composer happened to be

[14:20] <Geth> ¬¶ MoarVM/sparc: at, which meant that some were only 4-byte aligned. On systems with 8-byte

[14:20] <Geth> ¬¶ MoarVM/sparc: pointers which care strictly about alignment, these leads to SIGBUS.

[14:20] <Geth> ¬¶ MoarVM/sparc: 

[14:20] <Geth> ¬¶ MoarVM/sparc: This is sufficient to get MoarVM, NQP and most Rakudo tests working on

[14:20] <Geth> ¬¶ MoarVM/sparc: sparc64.

[14:20] <Geth> ¬¶ MoarVM/sparc: review: https://github.com/MoarVM/MoarVM/commit/0772199939

[14:20] <nwc10> With that we build on "4.19.0"

[14:21] <nwc10> "4.9.0" is what my Raspberry Pi reports. Sometimes $*VM.config.<osvers> is pretty much useless.

[14:22] <nine> isn't that simply the kernel version?

[14:23] <nwc10> mmm yes, possibly it is. And I guess that Fedora name their kernels as advertisments: 3.10.0-957.27.2.el7.ppc64

[14:26] <nine> My guess: that's kernel 3.10.0 with 957 distro patches, spec file version 27, build number 2, build target el7 and architecture ppc64

[14:26] <nwc10> 957 distro patches -- you're paying for something....

[14:27] <nine> Sounds realistic for security updates since the ancient version 3.10.0

[14:42] <Geth> ¬¶ MoarVM: nwc10++ created pull request #1343: sparc64 support

[14:42] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1343

[14:42] <nwc10> hey, github auto-suggested you. I have no idea why :-)

[15:19] *** sena_kun joined
[15:20] *** Altai-man left
[15:43] *** domidumont joined
[15:49] <nine> Maybe because I've looked at the sparc32 commit before

[15:49] <nwc10> it's stalking you

[16:04] *** domidumont left
[16:06] *** domidumont joined
[16:14] <[Coke]> Reminder: Voting for RSC is open.

[16:48] *** lizmat left
[16:49] *** lizmat joined
[16:50] *** zakharyas left
[17:12] <nine> nwc10: I guess at least some of your test failures are due to an outdated rakudo

[17:12] <nine> nwc10: remember that make spectest will do a git pull in t/spec before running those tests

[17:17] <nwc10> yes but they only have the duration of the build, because usually I pull the lot just before I start

[17:17] <nine> # Failed test 'sorting method list does not segfault'

[17:18] <nine> There was a PR I merged over the weekend that changed our behavior here and we adapted the spec tests to it

[17:27] <nine> The segfault in rakudo's build on P6opaque-debug boils down to: don't try to mix into a Scalar

[17:28] *** brrt joined
[18:01] <nine> Ok, this is definitely a bug: MVM_p6opaque_get_bigint_offset needs to bail if st->is_mixin_type

[18:12] *** zakharyas joined
[18:18] <brrt> good *

[18:39] *** domidumont left
[19:18] *** Altai-man joined
[19:20] *** sena_kun left
[19:26] <MasterDuke> i'm getting errors because of `create_stub_boot_type(tc, MVM_REPR_ID_MVMSpeshCandidate, SpeshCandidate, 0, MVM_BOOL_MODE_NOT_TYPE_OBJECT);` and `meta_objectifier(tc, SpeshCandidate, "SpeshCandidate");`, but i just copied what had been done for MVMSpeshPluginState

[19:26] <MasterDuke> 'error: ‚ÄòMVMInstance‚Äô has no member named ‚ÄòSpeshCandidate‚Äô'

[19:27] <nwc10> nine: shouldn't setting st->is_mixin_type = 1 in type_object_for in src/6model/reprs/P6opaque.c be enough to "force" the correct invariants that spesh and the JIT "know" about - that if body->replaced is non-NULL that flag also must be non-zero

[19:27] <nwc10> meanwhile I am resting sparc64 and ppc64 with to-be-sure to-be-sure master

[19:27] <nwc10> I think I am guilty of PEBKAC

[19:40] <MasterDuke> if i comment out the create_stub_boot_type and meta_objectifier i added, instead i get `src/6model/reprs.c: In function ‚ÄòMVM_repr_initialize_registry‚Äô:src/6model/reprs.c:229:34: warning: implicit declaration of function ‚ÄòMVMSpeshCandidate_initialize‚Äô; did you mean ‚ÄòMVMSpeshPluginState_initialize‚Äô? [-Wimplicit-function-declaration]  229

[19:40] <MasterDuke> |         const MVMREPROps *repr = MVM##name##_initialize(tc);    \      |                                  ^~~src/6model/reprs.c:291:5: note: in expansion of macro ‚Äòregister_core_repr‚Äô  291 |     register_core_repr(SpeshCandidate);`

[19:41] <MasterDuke> ugh, that looked pretty when pasted

[19:41] <MasterDuke> but i do have an `MVMSpeshCandidate_initialize`

[19:43] <nine> nwc10: well that in MVM_p6opaque_get_bigint_offset is definitely a bug. sp_bool_I would blindly take that offset and add it to the object pointer, not caring about a replaced body. The easy solution is to not spesh a bool_I to sp_bool_I on mixins

[19:44] <MasterDuke> my current diff https://gist.github.com/MasterDuke17/5541873da1f7ebfd201652d7a6d1ddda ...

[19:45] <nwc10> oh yes. I see

[19:45] <nwc10> return sizeof(MVMObject) + repr_data->attribute_offsets[slot];

[20:07] <dogbert17> setting this flag (https://github.com/MoarVM/MoarVM/blob/master/src/core/frame.c#L7) to 1 and trying to build rakudo outputs a massive amount of messages like this:

[20:07] <dogbert17> Inconsistent spesh preselection of '!cursor_fail' (90): got 1, not 2

[20:07] <dogbert17>    at <unknown>:1  (<ephemeral file>:)

[20:07] <dogbert17>  from gen/moar/stage2/QRegex.nqp:2258  (/home/dogbert/repos/rakudo/install/share/nqp/lib/QRegex.moarvm:parse)

[20:08] <dogbert17> is it something to worry about?

[20:11] <jnthn> MasterDuke: I don't see a change to instance.h; did you add a field there?

[20:11] <jnthn> Or am I just missing that addition?

[20:11] <jnthn> If not, that could be the issue

[20:12] <MasterDuke> no. but i thought i looked and some other reprs didn't have a field

[20:14] <MasterDuke> and i don't see why an instance would need a speshcandidate?

[20:15] <MasterDuke> i may have just copied too much from the commit nine++ gave as inspiration https://github.com/MoarVM/MoarVM/commit/c61236f96e

[20:15] <Geth> ¬¶ MoarVM/P6opaque-debug: 45c1341aae | (Stefan Seifert)++ | src/6model/reprs/P6opaque.c

[20:15] <Geth> ¬¶ MoarVM/P6opaque-debug: Fix potential outdated reads and segfaults on mixed into bigints

[20:15] <Geth> ¬¶ MoarVM/P6opaque-debug: 

[20:15] <Geth> ¬¶ MoarVM/P6opaque-debug: For mixin types the P6opaque's body is replaced, so we must not just take an

[20:15] <Geth> ¬¶ MoarVM/P6opaque-debug: offset and add it to the objects base address (like sp_bool_I does). Better

[20:15] <Geth> ¬¶ MoarVM/P6opaque-debug: leave those ops unspeshed.

[20:15] <Geth> ¬¶ MoarVM/P6opaque-debug: review: https://github.com/MoarVM/MoarVM/commit/45c1341aae

[20:18] <jnthn> MasterDuke: It's to hold the type object, which you need in order to create an instance of it

[20:18] <MasterDuke> ah ha! type objects

[20:18] <MasterDuke> oh, jinx

[20:19] <MasterDuke> i was looking at https://github.com/MoarVM/MoarVM/blob/master/src/core/instance.h#L290 and didn't think i needed something like that, not at something like https://github.com/MoarVM/MoarVM/blob/master/src/core/instance.h#L438

[20:23] <MasterDuke> nice. i still get the `warning: implicit declaration of function ‚ÄòMVMSpeshCandidate_initialize‚Äô`, but moarvm builds now

[20:23] <MasterDuke> nqp does not

[20:27] <MasterDuke> well, the warning was just because i forgot to add it to the .h

[20:32] <MasterDuke> hm, is this still allowed now that i've made it a repr? https://github.com/MoarVM/MoarVM/blob/master/src/spesh/candidate.c#L167-L179

[20:45] <jnthn> Think it's OK; it looks like its a list of pointers to spesh candidates

[20:46] <jnthn> And "all" that's changed is that the pointers are to GC-managed objects now

[20:46] <jnthn> However, the second gen check/barrier below may become redundant

[20:48] <MasterDuke> yeah, really wasn't sure about those. and i do create the new candidate that's added to the list via MVM_repr_alloc_init instead of calloc, so hopefully good there

[20:48] <MasterDuke> the segfault in nqp is in the new gc_mark

[20:49] *** Altai-man left
[20:49] <jnthn> Well, if you're getting to the new GC mark that's at least something :)

[20:50] <MasterDuke> `MVM_gc_worklist_add(tc, worklist, &(candidate->inlines[i]));` how do i know that the `void *data` passed to gc_mark is the/a MVMSpeshCandidateBody instead of a/the MVMSpeshCandidate?

[20:51] <jnthn> Well, not sure you can by inspection, but that's what the gc_mark always gets passed

[20:52] <jnthn> That line looks dubious to me, though

[20:52] <MasterDuke> oh?

[20:52] <jnthn> I think that points to an MVMSpeshInline 

[20:52] <jnthn> Which includes some GC-able things to mark, but is not itself a GC-able thing

[20:52] <jnthn> (And doesn't need to be)

[20:53] <MasterDuke> ha. i adapted it from https://gist.github.com/MasterDuke17/5541873da1f7ebfd201652d7a6d1ddda#file-mvmspeshcandidate-patch-L133 but it looks like i lost the trailing `.sf`

[20:54] <jnthn> It should be...yes, exactly :-)

[20:54] <jnthn> I was just finding that to point you at :)

[20:55] <MasterDuke> new segv in unmanaged_size. how accurate does that have to be?

[20:56] <MasterDuke> oh, guess there won't always be a jitcode, can't just blindly dereference its size

[21:00] *** zakharyas left
[21:02] <MasterDuke> heh. `Try to enter NULL jitcode`, yeah that might cause a problem

[21:15] <brrt> how did that happen

[21:15] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/09/07/2020-36-election-time-again/

[21:16] <MasterDuke> brrt: i think i've missed a few places where i need to change `spesh_candidate->jitcode` to `spesh_candidate->body.jitcode`

[21:21] *** Kaeipi left
[21:22] <brrt> ah

[21:22] <brrt> lizmat++

[21:28] *** Kaiepi joined
[21:29] *** brrt left
[21:56] *** pamplemousse joined
[22:07] *** pamplemousse left
[22:10] *** pamplemousse joined
[22:24] *** pamplemousse left
[22:28] <MasterDuke> would this still be correct after my change? https://github.com/MoarVM/MoarVM/blob/master/src/jit/x64/emit.dasc#L3560-L3567

[22:50] <Geth> ¬¶ MoarVM: MasterDuke17++ created pull request #1344: WIP convert MVMSpeshCandidate to a REPR

[22:50] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1344

[23:00] *** leont left
[23:00] <MasterDuke> ^^^ so people can easily see the current diff

[23:00] <MasterDuke> off to sleep

[23:23] *** lizmat left
[23:23] *** lizmat joined
