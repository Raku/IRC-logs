[00:05] *** konvertex left
[01:03] *** lucasb left
[02:48] *** linkable6 left
[02:48] *** evalable6 left
[02:50] *** linkable6 joined
[02:51] *** evalable6 joined
[03:39] *** discoD left
[06:41] <nwc10> good *, #moarvm

[06:45] <timotimo> hi

[06:50] *** domidumont joined
[07:31] *** MasterDuke joined
[07:41] *** zakharyas joined
[09:22] <jnthn> o/

[09:26] <nwc10> \o

[09:40] *** konvertex joined
[09:44] *** Altai-man_ joined
[09:46] <Geth> ¦ MoarVM/new-disp: e7b738fae2 | (Jonathan Worthington)++ | 2 files

[09:46] <Geth> ¦ MoarVM/new-disp: Move initial capture into recording state

[09:46] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/e7b738fae2

[10:27] <nwc10> jnthn: NQP is happy. SEGVs in optimize in the Rakudo core setting build - same place as before (I think) and I know that that's not yet interesting to you.

[10:28] *** sena_kun joined
[10:30] *** Altai-man_ left
[10:42] *** squashable6 left
[10:44] *** squashable6 joined
[10:46] <Geth> ¦ MoarVM/new-disp: 77317336d3 | (Jonathan Worthington)++ | 3 files

[10:46] <Geth> ¦ MoarVM/new-disp: Start recording capture transformations in a tree

[10:46] <Geth> ¦ MoarVM/new-disp: 

[10:46] <Geth> ¦ MoarVM/new-disp: And provide a means to get the path through the tree to a given capture

[10:46] <Geth> ¦ MoarVM/new-disp: too.

[10:46] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/77317336d3

[10:46] <jnthn> This one is a bit more interesting :)

[11:07] *** MasterDuke left
[11:09] <Geth> ¦ MoarVM/new-disp: d6716950dd | (Jonathan Worthington)++ | src/disp/program.c

[11:09] <Geth> ¦ MoarVM/new-disp: Add debug dumping of dispatch recording captures

[11:09] <Geth> ¦ MoarVM/new-disp: 

[11:09] <Geth> ¦ MoarVM/new-disp: To see that what is happening is sensible (which, so far, it is).

[11:09] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/d6716950dd

[11:42] *** zakharyas left
[12:27] *** Altai-man_ joined
[12:30] *** sena_kun left
[12:51] *** zakharyas joined
[12:52] <Geth> ¦ MoarVM/new-disp: 89d2dbbe99 | (Jonathan Worthington)++ | src/disp/program.c

[12:52] <Geth> ¦ MoarVM/new-disp: Dump dispatch outcome too

[12:52] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/89d2dbbe99

[12:52] <Geth> ¦ MoarVM/new-disp: a70b9d211a | (Jonathan Worthington)++ | src/disp/program.c

[12:52] <Geth> ¦ MoarVM/new-disp: Start recording literal values used in dispatch

[12:52] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a70b9d211a

[12:52] <Geth> ¦ MoarVM/new-disp: fda0676e1a | (Jonathan Worthington)++ | src/disp/program.c

[12:52] <Geth> ¦ MoarVM/new-disp: Add dumping of values in dispatch record

[12:52] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/fda0676e1a

[12:56] *** brrt joined
[13:04] *** MasterDuke joined
[13:34] <Geth> ¦ MoarVM/new-disp: a247a5f6bb | (Jonathan Worthington)++ | 2 files

[13:34] <Geth> ¦ MoarVM/new-disp: Track values used from initial arguments

[13:34] <Geth> ¦ MoarVM/new-disp: 

[13:34] <Geth> ¦ MoarVM/new-disp: This is a little tricky. When we have derived captures and inserted and

[13:34] <Geth> ¦ MoarVM/new-disp: dropped arguments, the indices need to be resolved back to those of the

[13:34] <Geth> ¦ MoarVM/new-disp: initial argument capture (or discovered to be an inserted argument, in

[13:34] <Geth> ¦ MoarVM/new-disp: which case we already know the value's source). We make value entries to

[13:34] <Geth> ¦ MoarVM/new-disp: indicate their usage also (and this is where we shall attach guards).

[13:34] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a247a5f6bb

[13:39] *** MasterDuke left
[13:45] <Geth> ¦ MoarVM/new-disp: b2d89d0e06 | (Jonathan Worthington)++ | src/disp/program.c

[13:45] <Geth> ¦ MoarVM/new-disp: Properly resolve tracked values in insert arg

[13:45] <Geth> ¦ MoarVM/new-disp: 

[13:45] <Geth> ¦ MoarVM/new-disp: So that we now set the correct value index.

[13:45] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/b2d89d0e06

[13:57] *** MasterDuke joined
[14:28] *** sena_kun joined
[14:29] *** Altai-man_ left
[14:31] <Geth> ¦ MoarVM/new-disp: 79ec298952 | (Jonathan Worthington)++ | 3 files

[14:31] <Geth> ¦ MoarVM/new-disp: Check syscall args and add guards for them

[14:31] <Geth> ¦ MoarVM/new-disp: 

[14:31] <Geth> ¦ MoarVM/new-disp: Along with dumping of guarding requirements, so we can see that they are

[14:31] <Geth> ¦ MoarVM/new-disp: getting guarded as expected.

[14:31] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/79ec298952

[14:31] <jnthn> Yay, guards.

[14:32] <nwc10> jnthn: previous pushes all passed NQP's tests

[14:32] <nwc10> will wait for that SEGV in Rakudo before trying this one

[14:32] <jnthn> nwc10: Question: are you on the new-disp branch of NQP? I've just realized that you should be seeing two failures in t/moar/53-dispatch.t

[14:33] <nwc10> yes, I thought that I was

[14:33] <nwc10> OK, but am I on today's?

[14:34] <nwc10> commit d39df6de9b31b819dfe9f14a30b039a702c86910 (HEAD -> new-disp, origin/new-disp)

[14:34] <nwc10> yes.

[14:34] <nwc10> or I'm doing something daft

[14:38] <jnthn> OK, so...now I need to re-work how we represent outcomes a little bit

[14:38] *** MasterDuke left
[14:38] <jnthn> And then it's back to design work on how we'll represent dispatch programs for actually executing them.

[14:40] <jnthn> Then integrating it with spesh

[14:40] <jnthn> And by that point, I can have a go at replacing some of the Rakudo spesh plugins with the new dispatch mechanism

[14:57] <timotimo> https://www.lspace.org/ftp/images/bookcovers/us/guards-guards-1.jpg

[14:58] <[Coke]> heh

[15:20] <Geth> ¦ MoarVM/new-disp: 1ff7b66e9a | (Jonathan Worthington)++ | 3 files

[15:20] <Geth> ¦ MoarVM/new-disp: Properly track outcomes in the recording

[15:20] <Geth> ¦ MoarVM/new-disp: 

[15:20] <Geth> ¦ MoarVM/new-disp: So we can understand it in terms of the captures and values in the

[15:20] <Geth> ¦ MoarVM/new-disp: recording.

[15:20] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1ff7b66e9a

[15:20] <jnthn> Turns out the way we represented outcomes in general was fine, just that we need a bit of *extra* info in the record phase.

[15:58] *** domidumont left
[16:13] *** brrt left
[16:16] *** Geth left
[16:27] *** Altai-man_ joined
[16:28] *** Geth joined
[16:29] *** sena_kun left
[16:48] *** MasterDuke joined
[17:18] *** domidumont joined
[17:27] <Geth> ¦ MoarVM/new-disp: 882ac57fa7 | (Jonathan Worthington)++ | 2 files

[17:27] <Geth> ¦ MoarVM/new-disp: Sketch out data structure of dispatch program

[17:27] <Geth> ¦ MoarVM/new-disp: 

[17:27] <Geth> ¦ MoarVM/new-disp: This is the compiled form that we'll actually interpret, and turn into

[17:27] <Geth> ¦ MoarVM/new-disp: guard instructions and other bytecode instructions to further optimize

[17:27] <Geth> ¦ MoarVM/new-disp: in the case of spesh.

[17:27] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/882ac57fa7

[17:28] <jnthn> Now I "just" need to turn the recording data structure into this...

[17:28] <jnthn> ...and write the interpreter...

[17:34] *** zakharyas left
[17:44] <Altai-man_> jnthn++

[18:24] <timotimo> i have experience writing interpreters for little domain-specific bytecode formats

[18:24] <timotimo> jnthn: did you already start, or should i rough out an initial version for you?

[18:25] *** hankache joined
[18:28] *** sena_kun joined
[18:30] *** Altai-man_ left
[18:39] <jnthn> timotimo: Didn't start on the interp; feel free to have a go if the format is clear enough. It's not so much bytecode as a (hopefully decently compact) struct

[18:39] <tellable6> 2020-05-28T18:33:05Z #raku <melezhik> jnthn RakuDist test fails for Spreadsheet::XLSX

[18:39] <timotimo> if it's a struct it's more like the guard tree we already had in spesh i assume?

[18:40] <jnthn> Yeah

[18:40] <jnthn> If a guard fails, then we just say "nope"

[18:40] <jnthn> For now, at least

[18:40] <jnthn> It's not a tree for now, far more like the spesh plugin linear thing

[18:40] <jnthn> The input is an MVMArgs

[18:51] *** hankache left
[18:51] *** lucasb joined
[18:58] <timotimo> i'll have a look soon :)

[19:03] *** zakharyas joined
[19:25] *** domidumont left
[20:21] *** sena_kun left
[20:21] *** sena_kun joined
[20:24] *** brrt joined
[20:27] *** Altai-man_ joined
[20:28] *** konvertex left
[20:29] *** sena_kun left
[20:37] *** zakharyas left
[21:07] *** brrt left
[22:28] *** sena_kun joined
[22:29] *** Altai-man_ left
[22:42] <Geth> ¦ MoarVM/new-disp: 7583f7f3c4 | (Jonathan Worthington)++ | 4 files

[22:42] <Geth> ¦ MoarVM/new-disp: Compile guards into dispatch program

[22:42] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/7583f7f3c4

[22:43] <jnthn> timotimo: Couple of new ops in there too

[22:45] <timotimo> whee

[22:45] <timotimo> i didn't have a look yet actually :o

[22:45] <timotimo> except the structs, i looked at the structs

[22:47] <jnthn> .oO( they know what is what but they don't know what is what they just struct )

[22:53] *** sena_kun left
[22:59] <timotimo> jnthn: the value_index_constant function would fall through the cases if the value doesn't match, but i think all the comparisons result in the same actual code

[22:59] <timotimo> like, comparing a pointer vs comparing a 64bit integer vs a 64bit double etc

[23:02] <timotimo> you could reuse a double that just so happens to equal an int, but it's probably a bad idea to accept a pointer that the GC may later move as literal value for an integer

[23:09] <jnthn> timotimo: oops, yes

[23:09] <timotimo> if you want i'll commit and push *shrug* :)

[23:10] <jnthn> Go ahead :)

[23:12] <Geth> ¦ MoarVM/new-disp: 08e2d7fe8f | (Timo Paulssen)++ | src/disp/program.c

[23:12] <Geth> ¦ MoarVM/new-disp: Don't fallthrough different types in value_index_constant func

[23:12] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/08e2d7fe8f

[23:13] <timotimo> the programs being created in the one test file in nqp are pretty simple, that's not bad :D

[23:13] <timotimo> as long as they're mostly just "check the concreteness of like two parameters" i don't even have to implement a mark function for programs

[23:40] *** lucasb left
[23:41] <timotimo> jnthn: the "run program" function would take an MVMArgs, would it literally write to that struct, or return a new MVMArgs object alongside the result somehow?

[23:44] <timotimo> src/disp/program.c:831:36: error: stray ‘\257’ in program

[23:44] <timotimo>   831 | #define GET_ARG MVMRegister val =��args->source[args->map[op->arg_guard.arg_idx]]

[23:44] <timotimo> whoopsie

[23:47] <Geth> ¦ MoarVM/new-disp: 5dad1e4774 | (Timo Paulssen)++ | 2 files

[23:47] <Geth> ¦ MoarVM/new-disp: rough initial version of "run program against Args object"

[23:47] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5dad1e4774

[23:48] <timotimo> anyway, here's a simple interpreter that you can build upon

[23:48] <timotimo> if you want me to, i'll also stub in the ops that aren't yet handled by dump_program (i haven't seen any in the output from dump_program yet)

[23:50] <timotimo> ah, yes, they aren't "compiled" yet

