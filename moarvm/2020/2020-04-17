[01:00] *** dogbert17 left
[01:27] *** lucasb left
[04:40] *** statisfiable6 left
[04:40] *** sourceable6 left
[04:40] *** linkable6 left
[04:40] *** evalable6 left
[04:40] *** bisectable6 left
[04:40] *** tellable6 left
[04:40] *** unicodable6 left
[04:40] *** quotable6 left
[04:40] *** squashable6 left
[04:40] *** committable6 left
[04:40] *** notable6 left
[04:40] *** releasable6 left
[04:40] *** shareable6 left
[04:40] *** benchable6 left
[04:40] *** nativecallable6 left
[04:40] *** greppable6 left
[04:40] *** bloatable6 left
[04:40] *** coverable6 left
[04:40] *** reportable6 left
[04:40] *** nativecallable6 joined
[04:41] *** quotable6 joined
[04:41] *** squashable6 joined
[04:41] *** benchable6 joined
[04:41] *** linkable6 joined
[04:41] *** shareable6 joined
[04:41] *** evalable6 joined
[04:41] *** notable6 joined
[04:42] *** statisfiable6 joined
[04:42] *** bloatable6 joined
[04:42] *** sourceable6 joined
[04:42] *** committable6 joined
[04:42] *** reportable6 joined
[04:42] *** greppable6 joined
[04:42] *** releasable6 joined
[04:43] *** bisectable6 joined
[04:43] *** unicodable6 joined
[04:43] *** coverable6 joined
[04:43] *** tellable6 joined
[04:52] *** discoD left
[06:02] *** farcas1982regreg joined
[06:09] *** AlexDaniel left
[06:22] *** MasterDuke joined
[06:48] <nwc10> good *, #moarvm 

[07:31] *** farcas1982regreg left
[07:37] *** patrickb joined
[07:52] *** zakharyas joined
[08:17] <nine> dogbert17: I think my heap profiler segfault is related to yours. It's also about a gen2 object that got at least part of it overwritten

[08:17] <tellable6> nine, I'll pass your message to dogbert17

[08:41] <nine> It tries to process a string from a comp unit's string heap. The string itself is already freed from gen2, but the comp unit itself isn't

[08:56] <nine> The string gets freed _after_ getting added to the comp unit's strings list, both of which seems to happen within the same GC run.

[08:57] <nwc10> nine: so you're making progress on debugging your crazy problem?

[08:57] <MasterDuke> huh, the branchlut2 code at https://github.com/miloyip/itoa-benchmark is actually a little slower than the naive version. wonder if that's just one my architecture...

[08:58] <MasterDuke> when i use it in our MVM_coerce_i_s that is

[09:04] <nine> nwc10: indeed. It's starting to make sense. The heap profiler creates a snapshot as part of gc_finish. It gets the file name for a static frame from a bytecode annotation. That file name obviously lives in the comp unit's string heap and gets added to the comp unit's list of deserialized strings.

[09:04] <nine> Those strings get allocated in gen2 by default, because comp units usually are long lived and so are their strings (and maybe other reasons).

[09:05] <nine> But, we're currently in gc_finish. And only after the heap snapshot gets taken do we free the unmarked objects. This includes our newly born string, as it wasn't alive yet in the marking phase

[09:06] <MasterDuke> heh. just saved 100m instructions off my benchmark, but still 100m more than the naive version

[09:10] *** sena_kun joined
[09:13] *** Altai-man_ joined
[09:16] *** sena_kun left
[09:22] <MasterDuke> am i imagining things or is 64 way bigger than needed here https://github.com/MoarVM/MoarVM/blob/master/src/core/coerce.c#L204 ? the worker code uses 20 https://github.com/MoarVM/MoarVM/blob/master/src/core/coerce.c#L176

[09:27] <MasterDuke> m: say (2**63 - 1).chars

[09:27] <camelia> rakudo-moar 717b3266d: OUTPUT: ¬´19‚ê§¬ª

[09:57] <Geth_> ¬¶ MoarVM: 1aa555fe1d | (Stefan Seifert)++ | src/profiler/heapsnapshot.c

[09:57] <Geth_> ¬¶ MoarVM: Fix segfault caused by freed comp unit strings when profiling

[09:57] <Geth_> ¬¶ MoarVM: 

[09:57] <Geth_> ¬¶ MoarVM: The heap profiler creates a snapshot as part of gc_finish. It gets the file

[09:57] <Geth_> ¬¶ MoarVM: name for a static frame from a bytecode annotation. That file name obviously

[09:57] <Geth_> ¬¶ MoarVM: lives in the comp unit's string heap and gets added to the comp unit's list of

[09:57] <Geth_> ¬¶ MoarVM: deserialized strings. Those strings get allocated in gen2 by default, because

[09:57] <Geth_> ¬¶ MoarVM: comp units usually are long lived and so are their strings (and maybe other

[09:57] <Geth_> ¬¶ MoarVM: <‚Ä¶commit message has 5 more lines‚Ä¶>

[09:57] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1aa555fe1d

[10:01] <nine> dogbert17: please give your profiler issue another try with https://github.com/MoarVM/MoarVM/commit/1aa555fe1d

[10:01] <tellable6> nine, I'll pass your message to dogbert17

[10:09] *** zakharyas left
[10:09] *** zakharyas1 joined
[10:14] <lizmat> nine++

[10:24] *** dogbert17 joined
[10:28] <dogbert17> nine: ok, let me know if there's anything I can do to help

[10:28] <tellable6> 2020-04-17T08:17:27Z #moarvm <nine> dogbert17: I think my heap profiler segfault is related to yours. It's also about a gen2 object that got at least part of it overwritten

[10:28] <tellable6> 2020-04-17T10:01:13Z #moarvm <nine> dogbert17: please give your profiler issue another try with https://github.com/MoarVM/MoarVM/commit/1aa555fe1d

[10:38] *** MasterDuke left
[10:39] * dogbert17 starts testing the fix from nine++

[10:43] <dogbert17> nine: perhaps there are more bugs (or I messed up): https://gist.github.com/dogbert17/e08f50c7a98e3b1f935e229d547e0199

[10:46] <nine> Well there could be similar bugs

[10:47] *** AlexDaniel joined
[10:47] *** MasterDuke joined
[10:48] *** AlexDaniel left
[10:48] *** AlexDaniel joined
[10:56] *** patrickb left
[10:57] <timotimo> nine: nice find!

[10:59] <nine> dogbert17: can you apply this patch and run it with a break point on the fprintf? https://gist.github.com/niner/176100dec8a726a9cb48870c4ca0b88a

[10:59] <nine> That should tell us whether it's a similar bug or something different

[11:15] *** sena_kun joined
[11:17] *** Altai-man_ left
[11:19] *** camelia left
[11:26] *** camelia joined
[11:35] <dogbert17> nine: will do

[11:36] * dogbert17 makes some coffee

[11:36] <Geth_> ¬¶ MoarVM: ca6534d202 | (Stefan Seifert)++ | 2 files

[11:36] <Geth_> ¬¶ MoarVM: Fix deadlock when trying to report an unsupported NativeCall return type

[11:36] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ca6534d202

[11:36] <nine> Mmmmmh...coffee

[11:40] * nwc10 was thinking about coffee too.

[11:41] * lizmat would love to have a cuppa, but alas can't cope with the cafeine anymore  :-(

[11:41] * MasterDuke is just finishing the after lunch beer. will probably need an after beer coffee soon

[11:42] * lizmat resorts to a muckefuk

[11:42] <nine> lizmat: there's pretty decent decaf nowadays

[11:43] <dogbert17> nine: am I supposed to apply your patch with 'git apply <diff-file>' ?

[11:43] <nine> or patch -p1

[11:43] <jnthn> Think I already had enough cups of coffee today...

[11:44] <nine> I switched to coffee in the morning and black tea in the afternoon

[11:45] <Geth_> ¬¶ MoarVM: MasterDuke17++ created pull request #1272: Use smaller buffer for native int to str coercion

[11:45] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1272

[11:45] <dogbert17> git apply fails with 'fatal: corrupt patch at line 66' with is after the last line in your gist

[11:46] <dogbert17> s/with/which/

[11:46] <jnthn> nine: Normally chamomile (is that how you spell it in English) or mint tea for me, but yeah, that's about what I do.

[11:46] <jnthn> OK, I have the rest of the (working) day for MoarVM/Raku stuff :)

[11:47] <lizmat> whee!

[11:47] <nine> dogbert17: try adding a line with just a space at the end of the diff file. May have gotten lost in copy&pasting

[11:47] <dogbert17> nine: thx

[11:48] <nwc10> jnthn: is the beer fridge ready to celebrate success?

[11:48] <nine> If everything else fails you can just do those changes manually.

[11:51] <MasterDuke> jnthn, nine, et al.: while everyone is here, any thoughts on https://github.com/Raku/nqp/pull/612 ? is the change desired? and if so, how's the actual PR?

[11:51] <jnthn> nwc10: Beer fridge is at home and I am not. :) But yes, there's beer there. :)

[11:52] <jnthn> Even has a Tsarina Esra and a Yeti to choose from...

[11:54] <jnthn> MasterDuke: Hm, that has append semantics on an existing buffer?

[11:54] <MasterDuke> the hobgoblin imperial ruby ale i just had was pretty good. but i'll admit i was surprised at how minimal the selection of good craft beers is here in england (at least in the supermarkets i've been to). i've been told there's a good beer store nearby, but i only found out about it right before the lockdown...

[11:55] <MasterDuke> jnthn: yeah, it requires https://github.com/MoarVM/MoarVM/pull/1267 . but that part could easily be removed if undesired by itself

[11:55] <jnthn> The craft beer store here is doing delivery during lockdown, so I put in an order.

[11:55] <dogbert17> nine: for some odd reason it doesn't seem to hit the fprintf line you added?

[11:55] <jnthn> MasterDuke: Yes, the MoarVM bit is what I was looking at

[11:55] <jnthn> I guess it's quite useful

[11:56] <nine> dogbert17: that would indicate, that it's a different type of bug than the one I fixed

[12:00] * dogbert17 takes a short break in order to watch the daily human malware press conference

[12:37] <Geth_> ¬¶ MoarVM: 6546027a1c | (Jonathan Worthington)++ | src/core/exceptions.c

[12:37] <Geth_> ¬¶ MoarVM: Improve handling of errors in native callbacks

[12:37] <Geth_> ¬¶ MoarVM: 

[12:37] <Geth_> ¬¶ MoarVM: There's native code on the callstack, and we can't expect to end up in a

[12:37] <Geth_> ¬¶ MoarVM: consistent state if we just try and unwind over it via `longjmp`- even

[12:37] <Geth_> ¬¶ MoarVM: were that safely possible for the VM itself, which I don't know it is.

[12:37] <Geth_> ¬¶ MoarVM: Thus, termination is appropriate. However, the way we did that so far

[12:38] <Geth_> ¬¶ MoarVM: was a panic about stack unwinding, which provides no useful information

[12:38] <Geth_> ¬¶ MoarVM: <‚Ä¶commit message has 5 more lines‚Ä¶>

[12:38] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6546027a1c

[12:52] <Geth_> ¬¶ MoarVM: 05c290522d | (Daniel Green)++ | src/strings/ops.c

[12:52] <Geth_> ¬¶ MoarVM: Allow nqp::encode() to take a preallocated buffer

[12:52] <Geth_> ¬¶ MoarVM: 

[12:52] <Geth_> ¬¶ MoarVM: Previously it would throw. Now if you give it a preallocated buffer it

[12:52] <Geth_> ¬¶ MoarVM: will just append to the end of it. This could be useful when you want to

[12:52] <Geth_> ¬¶ MoarVM: code a bunch of stuff into one big buffer since you won't have to create

[12:52] <Geth_> ¬¶ MoarVM: a bunch of temporary buffers and splice them all together (e.g., when

[12:52] <Geth_> ¬¶ MoarVM: creating the string heap in NQP).

[12:52] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/05c290522d

[12:52] <Geth_> ¬¶ MoarVM: 0ce4cbe94f | (Daniel Green)++ | lib/MAST/Nodes.nqp

[12:52] <Geth_> ¬¶ MoarVM: Simplify write_s since encode can append to a buf

[12:52] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0ce4cbe94f

[12:52] <Geth_> ¬¶ MoarVM: ab3f19251c | (Jonathan Worthington)++ (committed using GitHub Web editor) | 2 files

[12:52] <Geth_> ¬¶ MoarVM: Merge pull request #1267 from MasterDuke17/let_encode_take_a_preallocated_buffer

[12:53] <Geth_> ¬¶ MoarVM: 

[12:53] <Geth_> ¬¶ MoarVM: Let encode take a preallocated buffer

[12:53] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ab3f19251c

[12:54] <lizmat> hmmm... all of this tastes like in need of a bump ?

[12:55] <jnthn> Well, if we want to merge the NQP part of MasterDuke++'s work then we need to bump NQP to the latest MoarVM first.

[12:55] <jnthn> Just looking at that now

[12:56] <jnthn> MasterDuke: Travis seems unhappy with the PR

[12:56] <jnthn> Is that just the missing MoarVM change?

[12:57] <jnthn> Re-running them having merged the MoarVM git.

[12:57] <jnthn> *bit

[12:57] <MasterDuke> yeah, "encode requires an empty array"

[13:00] <dogbert17> nine: this looks a bit suspicious https://github.com/MoarVM/MoarVM/blob/master/src/gc/roots.c#L218

[13:01] <dogbert17> there are plenty of tests above that worklist is not null which seems to imply that it CAN be null

[13:08] <dogbert17> heh, worklist is actually set to NULL by the calling code

[13:11] <dogbert17> like so: https://github.com/MoarVM/MoarVM/blob/master/src/profiler/heapsnapshot.c#L681

[13:14] *** Altai-man_ joined
[13:15] <jnthn> MasterDuke: Yeah, it passes on MoarVM master now, so we should just do a bump in NQP and then can merge it'

[13:17] *** sena_kun left
[13:19] <nine> dogbert17: yeah that looks like it could be it

[13:22] <dogbert17> nine: is the proper fix to add a test around line 218 or is something else supposed to be done if worklist is NULL

[13:23] <nine> dogbert17: adding that test should be fine. There doesn't seem to be a describe function we could call instead

[13:24] * lizmat lost what should be merged / bumped in what order

[13:24] <nine> Though this probably means that we're missing information about those spesh plugin guards in the heap profile

[13:27] <dogbert17> will that cause problems?

[13:36] <dogbert17> well, the SEGV seems to be gone

[13:37] <nine> I don't think so. At worst it will just miss some memory usage or shortest paths. Much less of an issue than segfaults...

[13:37] <nine> I'd say commit that change, take your winnings and proceed with what you actually wanted to use the profiler for :)

[13:40] <nine> Btw. I can only recommend reviewing open PRs to all developers regardless of current experience level. The reviews I've done today were both in areas where I had almost no prior exposure and now I have. And as a bonus I found an actual issue with one of them and maybe a way to improve the other one.

[13:42] <nine> It can never hurt to take a look and if you're not a 100 % sure, you can still leave your feedback and leave the actual merging to more experienced or more daring developers :)

[13:50] <dogbert17> nine: will do :)

[14:02] *** greppable6 left
[14:33] *** greppable6 joined
[15:15] *** sena_kun joined
[15:16] *** Altai-man_ left
[15:25] <Geth_> ¬¶ MoarVM: dogbert17++ created pull request #1273: Fix SEGV in MVM_spesh_plugin_guard_list_mark

[15:25] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1273

[15:33] <Geth_> ¬¶ MoarVM: bceb3398a2 | (Daniel Green)++ | src/core/coerce.c

[15:33] <Geth_> ¬¶ MoarVM: Use smaller buffer for native int to str coercion

[15:33] <Geth_> ¬¶ MoarVM: 

[15:33] <Geth_> ¬¶ MoarVM: There can only be up to 20 chars, and the actual worker functions only

[15:33] <Geth_> ¬¶ MoarVM: use 20 char arrays also.

[15:33] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bceb3398a2

[15:33] <Geth_> ¬¶ MoarVM: bb27aeb111 | (Daniel Green)++ | src/core/coerce.c

[15:34] <Geth_> ¬¶ MoarVM: Don't null-terminate string when stringifying int

[15:34] <Geth_> ¬¶ MoarVM: 

[15:34] <Geth_> ¬¶ MoarVM: MoarVM doesn't use null-terminated strings, so this is unneeded.

[15:34] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bb27aeb111

[15:34] <Geth_> ¬¶ MoarVM: 57592e616d | niner++ (committed using GitHub Web editor) | src/core/coerce.c

[15:34] <Geth_> ¬¶ MoarVM: Merge pull request #1272 from MasterDuke17/use_smaller_buffer_for_native_int_to_str_coercion

[15:34] <Geth_> ¬¶ MoarVM: 

[15:34] <Geth_> ¬¶ MoarVM: Use smaller buffer for native int to str coercion

[15:34] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/57592e616d

[15:58] <MasterDuke> nine++

[15:58] <MasterDuke> so much merging going on. anybody have thoughts about https://github.com/MoarVM/MoarVM/pull/1270 ?

[16:09] <dogbert17> nine, I believe that I managed to change the incorrect sentence

[16:10] <nine> dogbert17: now it's 3 commits?https://github.com/MoarVM/MoarVM/pull/1273/commits

[16:11] <dogbert17> uh oh, i did a git commit --amend. How do I fix this mess?

[16:11] <nine> You can cherry-pick a258dca4e3997eed3c3fc6da7300d59b25465a63 into your master branch and submit a PR from that

[16:12] <dogbert17> a new PR then

[16:18] <Geth_> ¬¶ MoarVM: dogbert17++ created pull request #1274: Fix SEGV in MVM_spesh_plugin_guard_list_mark

[16:18] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1274

[16:23] <Geth_> ¬¶ MoarVM: dcbdb571a2 | (Jan-Olof Hendig)++ | src/gc/roots.c

[16:23] <Geth_> ¬¶ MoarVM: Fix SEGV in MVM_spesh_plugin_guard_list_mark

[16:23] <Geth_> ¬¶ MoarVM: 

[16:23] <Geth_> ¬¶ MoarVM: MVM_gc_root_add_tc_roots_to_worklist contains several tests checking

[16:23] <Geth_> ¬¶ MoarVM: that the worklist parameter is not NULL. Unfortunately one call, to

[16:23] <Geth_> ¬¶ MoarVM: MVM_spesh_plugin_guard_list_mark, had slipped through the cracks.

[16:23] <Geth_> ¬¶ MoarVM: This could lead to a SEGV when running the heap profiler since it

[16:23] <Geth_> ¬¶ MoarVM: can call MVM_gc_root_add_tc_roots_to_worklist with a NULL worklist

[16:23] <Geth_> ¬¶ MoarVM: which in turn was used when calling MVM_spesh_plugin_guard_list_mark.

[16:23] <Geth_> ¬¶ MoarVM: Fixed by adding a check which ensures that worklist is not NULL

[16:23] <Geth_> ¬¶ MoarVM: before calling MVM_spesh_plugin_guard_list_mark.

[16:23] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/dcbdb571a2

[16:23] <Geth_> ¬¶ MoarVM: 60850e772d | niner++ (committed using GitHub Web editor) | src/gc/roots.c

[16:23] <Geth_> ¬¶ MoarVM: Merge pull request #1274 from dogbert17/fix-heap-prof-segv

[16:23] <Geth_> ¬¶ MoarVM: 

[16:23] <Geth_> ¬¶ MoarVM: Fix SEGV in MVM_spesh_plugin_guard_list_mark

[16:23] <Geth_> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/60850e772d

[16:24] <nine> MasterDuke: I don't think you'll get more useful feedback on https://github.com/MoarVM/MoarVM/pull/1270

[16:24] <nine> MasterDuke: let's just merge it and see how it fares.

[16:52] <timotimo> yeah it's probably fine

[16:52] <timotimo> hm. are sp_ ops really going in there?

[16:53] <timotimo> i think the instrumentation happens before spesh runs?

[16:54] <jnthn> Yes, I think so too

[16:54] <jnthn> I don't think it's reinstrumetned after

[16:54] <jnthn> I'm making quite a bit of progress on the dispatcher design, by the way.

[16:55] <jnthn> Been thinking about it on and other for the last couple of weeks, but only today has it started to feel like it's falling into place.

[16:59] <MasterDuke> timotimo: there were some pre-existing sp_* ops, so i added some more. are you saying they don't make sense? or something else?

[17:00] <timotimo> i'd have to look into that more closely

[17:00] <timotimo> until then it'd be barely negative

[17:00] <MasterDuke> negative?

[17:00] <timotimo> well, adding more cases to the switch that never get hit

[17:01] <timotimo> is just maximum-*shrug*

[17:01] <MasterDuke> ok. well, i'll just merge as is then and a subsequent cleanup can get them all

[17:02] <Geth_> ¬¶ MoarVM/master: 5 commits pushed by (Daniel Green)++, MasterDuke17++

[17:02] <Geth_> ¬¶ MoarVM/master: 4dc99b55d7 | Add more ops to be profiled for allocations

[17:02] <Geth_> ¬¶ MoarVM/master: 1c392b4e4e | Causes MVM_panic when profiling adding multi infix

[17:02] <Geth_> ¬¶ MoarVM/master: 3758e9a826 | Causes segv when prof-comp install-core-dist.raku

[17:02] <Geth_> ¬¶ MoarVM/master: 5c9510c322 | Caused MVM_panic when prof-comp CORE.e

[17:02] <Geth_> ¬¶ MoarVM/master: 4ddc33f3d7 | Merge pull request #1270 from MasterDuke17/add_more_ops_for_allocation_profiling

[17:02] <Geth_> ¬¶ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/60850e772da9...4ddc33f3d748

[17:05] *** zakharyas1 left
[17:07] *** zakharyas joined
[17:14] *** Altai-man_ joined
[17:17] *** sena_kun left
[18:18] *** zakharyas left
[19:15] *** sena_kun joined
[19:17] *** Altai-man_ left
[19:36] *** dogbert17 left
[21:14] *** Altai-man_ joined
[21:17] *** sena_kun left
[23:15] *** sena_kun joined
[23:17] *** Altai-man_ left
