[01:08] *** FROGGS_ joined
[03:02] *** btyler joined
[06:35] *** FROGGS joined
[06:57] <FROGGS> so it looks like it is showed in here: lh.frame->work[lh.handler->block_reg].o

[06:57] <FROGGS> I guess I can put my label in -> work also?

[06:57] <FROGGS> /* The temporary work space for this frame. After a call is over, this

[06:57] <FROGGS> * can be freed up. Must be NULLed out when this happens. */

[06:57] <FROGGS> MVMRegister *work;

[06:58] <FROGGS> I guess I am safe to put something in there

[06:59] <jnthn> yes

[06:59] <jnthn> teaching, bbl

[06:59] <FROGGS> o7

[06:59] <jnthn> but I note this may help elegantly solve the mapiter variable label issue efficiently too

[07:00] <FROGGS> nice :o)

[07:00] <FROGGS> (very nice indeed)

[07:01] *** lue joined
[07:15] *** zakharyas joined
[08:39] * jnthn wondered for a while if o7 was a curious form of o/ or one of those German things like "n8" where if you sounded out the number 7 in German with an "o" before it, you get a word :P

[08:39] <jnthn> I'm pretty sure the answer to the second propositon is n1 though :P

[08:42] <nwc10> jnthn: 3rd patch I no-pasted to convert reprconv.h macros to functions does seem to reliably slightly improve setting build times.

[08:42] <nwc10> (on "my" machine")

[08:43] <nwc10> I'm a bit surprised. I didn't check the generated code, but I assume that it's causing some epxressions not to be evaluated twice

[08:45] <nwc10> on "my" machine, for 1 version of 1 compiler

[08:49] <jnthn> nwc10: ooh

[08:49] <jnthn> OK. Can't apply it right nwo, though.

[08:51] <jnthn> (at teaching)

[08:55] <nwc10> jnthn: I suggest also benchmarking it

[09:07] <FROGGS> jnthn: o7 was like a military greeting :o)

[09:10] *** lue joined
[10:36] <jnthn> nwc10: ok

[10:37] <jnthn> Also need to bug-hunt some more tonight...

[10:37] <jnthn> To see what bast Panda.

[10:42] <nwc10> are you at home tonight? So have the services of both your laptop and desktop?

[10:45] <jnthn> yeah

[10:45] <jnthn> here I have just the teaching machine

[10:46] <jnthn> Thing is, my laptop these days is...very like my desktop

[10:46] <jnthn> A 64-bit Windows install on an i7

[10:46] <nwc10> so, 2 to benchmark with :-)

[10:46] <jnthn> Just difference in number of cores.

[10:46] <nwc10> (was more thinking that 1 can be busy benchmarking, while the other attends to the human)

[10:46] <jnthn> Oh :)

[10:46] <nwc10> hopefully the teaching machine is not running XP

[10:47] <jnthn> win7

[10:47] <jnthn> I'm only glad it's not using win8

[10:47] <jnthn> Last win8 machine I encountered, I got bored of trying to use it before I actaully got anything done on it :)

[10:49] <nwc10> deskops - have core*s*. laptops - have core*s*. tablets - yes, core*s*. Phones, guess what?

[10:49] <jnthn> My iPhone has 2, I think :)

[10:50] <jnthn> If I was hardcore, I could use my multicore to play metalcore :P

[10:55] <nwc10> ho ho, I don't think that my hack was the best:

[10:55] <nwc10> Stage mast       : 44313.938

[10:55] <nwc10> but it did eventually finish and pass

[10:56] <nwc10> 22.25h

[10:57] <jnthn> o.O

[12:49] *** woolfy1 left
[13:46] *** btyler joined
[13:58] *** FROGGS joined
[14:23] *** daxim joined
[14:48] *** sergot_ joined
[15:42] *** btyler joined
[15:47] <nwc10> jnthn: which were the MAST structures that I was having fun with previously (for alignment)

[15:47] <nwc10> the ones that are written to from NQP code by treating them as instances P6Opaque

[15:48] <nwc10> but are actually read by the C code as some sort of C structure for a different class

[15:51] <nwc10> aha, most things in nodes_moar.h

[15:54] <jnthn> Yes, there.

[15:54] *** btyler joined
[15:54] <nwc10> OK, so the fun and games is because the size of the 6model object header changed

[15:55] <nwc10> such that sizeof(MVMP6opaque) % 8  is now 4

[15:55] <nwc10> was 0 before

[15:55] <jnthn> ah

[15:55] <nwc10> so alignment is being worked out differently in two places in P6opaque.c

[15:56] <nwc10> I've figured this out, not proven it :-)

[15:56] <nwc10> going to sit with a beer to think about it

[15:56] <nwc10> about how to fix it to be robust

[15:56] <jnthn> beer++

[16:04] *** lue joined
[16:48] *** lue joined
[17:00] *** jnap joined
[17:28] *** jnap1 joined
[19:21] <jnthn> Time to see if I can work out the panda breakage again...

[19:29] <TimToady> someone should buy nwc10++ a really fast version of that cpu :)

[19:29] <TimToady> and overclock it in liquid nitrogen or so

[19:30] <[Coke]> liquid beertrogen.

[19:42] <TimToady> splitting the atom?

[20:19] *** jnap joined
[21:35] <dalek> MoarVM: 2360aaa | jnthn++ | src/ (4 files):

[21:35] <dalek> MoarVM: Include SC identifiers in bytecode dump.

[21:35] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2360aaa747

[21:39] <jnthn> The seeming cause of the issue I'm seeing is that in the pre-comp of JSON::Tiny I have

[21:39] <jnthn> 01766   wval         loc_34_obj, 3, 138

[21:39] <jnthn> 01767   setlexvalue  loc_33_obj, '&to-json', loc_34_obj, 0

[21:40] <jnthn> But that is a routine declared in the file

[21:40] <jnthn> So the first wval arg should be 0

[21:49] <FROGGS> so is this the offending line? https://github.com/moritz/json/blob/master/lib/JSON/Tiny.pm#L34

[21:49] <FROGGS> or is it the proto with 'is export' ?

[21:49] <jnthn> It explodes at 21

[21:50] <jnthn> Because the above thing shoved a Metamodel::PackageHOW into the lexical slot instead of the actual to-json routine

[21:50] <jnthn> And the clone thus tries to clone the meta-object and explodes

[22:01] <timotimo> why would it do that :o

[22:02] <jnthn> No darn clue :(

[22:03] <FROGGS> gnight

[22:04] <jnthn> wait, what...

[22:04] <jnthn> It compiles here JSON::Tiny before it compiles JSON::Tiny::Actions

[22:05] <jnthn> How on earth does that even work...

[22:17] *** benabik joined
[22:49] *** woolfy joined
[22:50] *** lizmat joined
[22:54] *** benabik joined
