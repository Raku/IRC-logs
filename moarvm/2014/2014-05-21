[00:34] *** hoelzro joined
[01:52] *** FROGGS_ joined
[05:51] *** woolfy joined
[06:11] *** lizmat joined
[06:41] *** FROGGS joined
[07:08] *** lizmat joined
[07:11] *** zakharyas joined
[07:16] *** brrt joined
[07:36] *** brrt joined
[08:35] *** donaldh joined
[09:00] *** brrt joined
[09:29] *** brrt left
[09:36] <dalek> MoarVM/loop_labels: 0215c7d | (Tobias Leich)++ | lib/MAST/Nodes.nqp:

[09:36] <dalek> MoarVM/loop_labels: align naming of attrs of MAST::HandlerScope to MVM_HandlerScope

[09:36] <dalek> MoarVM/loop_labels: review: https://github.com/MoarVM/MoarVM/commit/0215c7d367

[10:05] *** mj41 joined
[10:13] *** lizmat joined
[10:26] *** donaldh joined
[10:37] <dalek> MoarVM: 17b40b8 | jonathan++ | src/core/interp.c:

[10:37] <dalek> MoarVM: Extra NULL checks in spesh guard ops.

[10:37] <dalek> MoarVM:

[10:37] <dalek> MoarVM: In theory we never get a real NULL here, only ever a (safe) VMNull.

[10:37] <dalek> MoarVM: But there are places that don't make that transformation for us yet,

[10:37] <dalek> MoarVM: so for now be very careful.

[10:37] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/17b40b8911

[10:40] *** lizmat_ joined
[11:43] *** odc joined
[11:47] *** lizmat_ joined
[11:48] *** lizmat_ joined
[12:17] *** LLamaRider joined
[12:22] *** mj41 joined
[12:24] *** btyler joined
[13:21] *** cognominal joined
[13:33] *** jnap joined
[13:34] <dalek> MoarVM: e9d625d | jonathan++ | docs/ChangeLog:

[13:34] <dalek> MoarVM: Add ChangeLog for 2014.05.

[13:34] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e9d625ded2

[13:34] <jnthn> We did some work :)

[13:34] <FROGGS> hehe

[13:34] <FROGGS> that is a lot :o)

[13:37] *** cognominal joined
[13:40] <timotimo> + Ops to for 32/16 bit 64 int literals and isnonnull, plus use in compiler

[13:40] <timotimo> that's pretty awkwardly formulated, or i have a brainfart?

[13:40] <timotimo> + turn islist/... into either isnonnull or a literal 0.

[13:40] <timotimo> is a duplicate of:

[13:40] <jnthn> timotimo: Just patch it ;)

[13:40] <timotimo> + Optimize islist/isnum/... in spesh

[13:40] <timotimo> i guess i will :)

[13:42] <timotimo> fixing now

[13:44] <dalek> MoarVM: 209d041 | timo++ | docs/ChangeLog:

[13:44] <dalek> MoarVM: unawkward sentences and dedupe a change

[13:44] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/209d0412f9

[13:49] *** jnap joined
[14:11] <jnthn> I'll likely cut release later on today

[14:11] <jnthn> So it's done in good time

[14:11] <nwc10> jnthn: you'd prefer to hold off on the struct re-ordering patches?

[14:12] <jnthn> nwc10: How risky are they?

[14:12] <nwc10> I didn't think that *they* were risky.

[14:12] <jnthn> OK

[14:12] <nwc10> if they build for you on Win32 (64 and 32) I think everything we know is good is (pretty much) covered

[14:12] <jnthn> That was my cut feeling too

[14:12] <jnthn> *gut

[14:13] <nwc10> the other things I'd like to do, they are more risky.

[14:13] <nwc10> so not "This Week" :-)

[14:18] <jnthn> applied them all locally

[14:18] <jnthn> building and testing now

[14:21] <nwc10> cool thanks

[14:24] <nwc10> oh, curious, compare "Architecture" on https://packages.debian.org/jessie/rakudo https://packages.debian.org/jessie/nqp and https://packages.debian.org/jessie/parrot

[14:26] <jnthn> Curious indeed

[14:26] <nwc10> parrot additionally builds on "mips", "powerpc" and "s390x"

[14:26] <jnthn> mips, powerpc and s390x missing for Rakudo/NQP comapred to Parrot

[14:26] <jnthn> We know MoarVM builds Rakuod on PowerPC

[14:27] <jnthn> *Rakudo

[14:36] <dalek> MoarVM: c6be74d | nicholas++ | src/6model/reprs/MVMCompUnit.h:

[14:36] <dalek> MoarVM: Re-order members of MVMCompUnitBody to avoid alignment holes.

[14:36] <dalek> MoarVM:

[14:36] <dalek> MoarVM: Saves 4 bytes on ARM and x86, 32 bytes on x86_64.

[14:36] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c6be74dc99

[14:36] <jnthn> nwc10: Applied them, thanks

[14:37] *** dalek joined
[14:37] <nwc10> cool, thanks

[14:37] <tadzik> hmm, shouldn't MVMuint32 go after all the 64bit fields, preferably?

[14:38] <tadzik> well, after the pointers, which may be 32 or 64

[14:38] *** brrt joined
[14:38] <nwc10> maybe, but find me a platform with holes now :-)

[14:38] <tadzik> ah, there are two 32s in a row

[14:38] <tadzik> nevermind then :)

[14:38] <tadzik> I was thinking about num_frames in the first diff

[14:39] <tadzik> but it has MVMuint32  data_size; just above it in the code

[14:39] <tadzik> so no holes :)

[14:39] <tadzik> wow, that's a lot of patches

[14:39] <tadzik> nwc10++

[14:45] <brrt> \o #moarvm

[14:45] <FROGGS> hi brother

[14:45] <jnthn> brrt \o/

[14:45] <FROGGS> err

[14:45] <FROGGS> hi brrt

[14:45] <brrt> :-)

[14:45] <FROGGS> :o)

[14:45] *** btyler joined
[14:45] <brrt> hows things here? i've seen lots of talk of nwc10's patches

[14:46] <jnthn> They got in :)

[14:46] <jnthn> Things are fine

[14:46] <brrt> then i'll pull and check out

[14:46] <jnthn> Release 2014.05 within next 24 hours

[14:47] <brrt> i think dynasm has explicit support for struct access, i should check that out

[14:47] <brrt> oh, nice

[14:47] <brrt> (time flies /so/ fast, and moarvm goes /so/ fast too)

[14:47] <jnthn> How many releases until JIT? :D

[14:48] <brrt> well.... optimistic me thinks that 2014.07 should be doable?

[14:48] * jnthn hopes so :)

[14:48] <brrt> based on the following characteristics:

[14:48] <brrt> dynasm is really awesome (i'm cooking on another post concerning dynamic labels, dynamic registers, struct access)

[14:49] <brrt> moarvm bytecode set is ... acceptably large (haven't counted, but there doesn't seem to be hundreds of them)

[14:50] <brrt> moarvm bytecode set can also be conceptually be divided between machine-like instructions and function-call-like-instructions

[14:51] <brrt> and i'm planning to use that distinction to good effect (i.e. instruction selection / register allocation algorithms can 'ignore' function-call like operations

[14:51] <jnthn> brrt: Yes, I had imagined we'd compile many of them into function calls to the functions the ops themselves call

[14:52] <brrt> thats what i had imagined

[14:52] <brrt> i had also imagined a 'cheat code' :-)

[14:52] <jnthn> brrt: And if there are any ops with a big body that ain't interesting to JIT, we can move their logic to a function.

[14:52] <jnthn> which'll shrink the interp too :)

[14:52] <brrt> i.e. compile interp.c to asm using gcc (with intel syntax) -> text-transform all labels into dynasm instructions -> compile -> profit

[14:53] <brrt> that seems like a plan too

[14:53] <brrt> (which was actually my goal for 'core-ified' moarvm bytecode in my original proposal)

[14:55] <brrt> (:o empathy just cleared my entire chat window for no reason)

[14:55] <jnthn> I feel your pain, man... :P

[14:56] <FROGGS> hehe

[14:56] <brrt> OT: i like it as a a casual chat client (good gnome offline / online support) but this was... weird

[14:58] <FROGGS> I have sometimes problems with my old icq profile in empathy, I do not see recent messages

[14:59] <brrt> do you still use icq?

[15:02] <jnthn> brrt: No...

[15:02] <jnthn> gotta go, bbl

[15:02] <brrt> :-)

[15:12] <FROGGS> brrt: only because of one person, so the message count is quite low :o)

[15:13] <brrt> i see

[15:13] <brrt> but missing a message would be annoying

[15:13] <brrt> is icq peer-to-peer? who still runs that :-o

[15:14] <FROGGS> no idea...

[15:15] <FROGGS> I see the tooltip of the message, and empathy is also highlighted in my starter, so I sort of see that there must be something :o)

[15:15] <FROGGS> bbiab

[15:17] *** btyler joined
[15:19] <brrt> oh, bbl = be back later

[15:19] <brrt> that, too

[15:35] *** FROGGS joined
[15:48] *** mj41 joined
[16:04] *** btyler joined
[16:27] *** FROGGS[mobile] joined
[17:08] *** vendethiel joined
[17:25] *** mj41 joined
[17:55] *** brrt joined
[17:56] *** btyler joined
[18:43] <dalek> MoarVM: ce948e1 | (Tobias Leich)++ | / (6 files):

[18:43] <dalek> MoarVM: make exception handlers aware of labels

[18:43] <dalek> MoarVM:

[18:43] <dalek> MoarVM: Frame handlers have now a register which can hold a label in case we have a

[18:43] <dalek> MoarVM: labeled loop. When an exception is thrown and the category is MVM_EX_CAT_LABELED,

[18:43] <dalek> MoarVM: we check for object identity of the thrown payload and the label in the register.

[18:43] <dalek> MoarVM: That means we will have handlers for e.g. 'redo', and this handler will care

[18:43] <dalek> MoarVM: about 'redo' exceptions without a label, and also will care if the label fits.

[18:43] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ce948e19b8

[18:45] *** btyler joined
[18:45] *** mj41 joined
[19:11] *** mj41 joined
[21:25] *** btyler joined
[21:29] *** donaldh_ joined
[21:35] *** lizmat joined
[21:44] <timotimo> so, cgoto is done with env CGOTO=1 make?

[22:25] *** dalek joined
[22:28] *** lee__ joined
[22:29] *** retupmoc1 joined
[22:31] *** brother joined
[22:32] *** JimmyZ_ joined
[22:34] *** donaldh__ joined
[22:36] *** __sri joined
[22:37] *** hoelzro_ joined
[22:43] *** lizmat joined
[22:47] *** btyler joined
[22:47] *** lizmat joined
[22:47] <jnthn> timotimo: Argument to make, I think

[23:04] <timotimo> oh, darn

[23:05] *** woolfy joined
[23:13] *** colomon joined
