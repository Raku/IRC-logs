[00:05] *** eternaleye joined
[02:40] *** woosley joined
[03:03] *** FROGGS joined
[07:19] *** brrt joined
[07:27] *** woosley joined
[08:09] *** zakharyas joined
[10:51] <brrt> hi #moarvm

[10:52] <nwc10> hi brrt

[10:53] <brrt> hi nwc10

[10:53] <brrt> anybody seen my pull request? :-)

[11:56] *** woolfy1 joined
[12:31] *** colomon joined
[13:12] *** colomon joined
[14:04] *** btyler joined
[14:17] *** jnap joined
[14:26] *** zakharyas joined
[14:37] *** FROGGS joined
[14:44] <dalek> MoarVM: c5f3b53 | (David Warring [email@hidden.address] | src/core/interp.c:

[14:44] <dalek> MoarVM: check for invalid code points (jvm port)

[14:44] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c5f3b5378b

[14:44] <dalek> MoarVM: 24ff37d | jonathan++ | src/core/interp.c:

[14:44] <dalek> MoarVM: Merge pull request #80 from dwarring/master

[14:44] <dalek> MoarVM:

[14:44] <dalek> MoarVM: chr() check for invalid code points (jvm port)

[14:44] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/24ff37da6d

[14:50] *** zakharyas joined
[14:51] *** jnap joined
[14:55] * jnthn has trouble figuring out if brrt++'s pull request is correct at first glance...

[14:56] <jnthn> I mean, https://github.com/MoarVM/MoarVM/blob/master/src/gc/roots.c#L249 does a similar compaction job with a lot less code.

[14:56] <jnthn> And is much more obviously correct to me.

[14:57] <jnthn> I think the patch is doing the same 2-finger approach, it's just less clear.

[15:07] * JimmyZ agrees

[15:27] *** jnap1 joined
[15:33] *** cognominal joined
[15:35] *** brrt joined
[15:43] <JimmyZ> jnthn: Is this useful? https://gist.github.com/zhuomingliang/9742792

[15:44] <lizmat> jnthn is just boarding his flight... will be offline for a few hours, afaik

[15:47] <brrt> jimmyz - i'm not really sure that is correct

[15:48] <brrt> oh, wait, read it wrong

[15:48] <brrt> no matter

[15:55] <JimmyZ> :)

[15:55] <brrt> anyway, on the ticket i described an ever better way to compact arrays

[15:56] <brrt> start seeking nonenmpty elements at the ent

[15:56] <brrt> end

[15:56] <brrt> (and empty elements at the beginning)

[15:56] <brrt> you'll be done when nonempty < empty

[15:57] <JimmyZ> Is it better Time Complexity?

[15:57] <JimmyZ> good night

[15:59] <brrt> identical time complexity

[15:59] <brrt> average running time is what i expect to be less

[15:59] <brrt> good night, by the way :-)

[15:59] <brrt> basically, if the array of n elements is filled to X%

[16:01] <brrt> the algorithm that jnthn posted will do (1+x)*n incremeents and x*n swaps

[16:02] <brrt> in the algorithm i propose.. it kind of depends on how much the list is 'weighed' to the right

[16:02] <brrt> .. but as far as i can see it can only do x*n swaps and n increment / decrements

[16:02] <brrt> which is ever so slightly cheaper :-)

[16:13] <cognominal> we need to implement multithreaded concurrent jnthns

[16:19] <brrt> as long as they communicate by message passing

[16:31] *** brrt left
[18:23] <tadzik> is there a way to produce a statically linked moarvm?

[18:24] <tadzik> OH WOW

[18:25] <tadzik> I .tar.xz-ed the moarvm+rakudo bundle, now it takes 2.2MB instead of 22

[18:25] <tadzik> when I use gzip it's 4.2 MB

[18:28] *** btyler joined
[18:40] <FROGGS> nice!

[18:40] <tadzik> I wonder which files gain the most

[18:40] <tadzik> "gain"

[18:41] *** zakharyas joined
[18:59] <nwc10> tadzik: I think that it is possible to build a static MoarVM, but then there's no way to link in the extra ops Rakudo compiles.

[18:59] <nwc10> it's not as flexible as perl 5 (yet)

[19:00] <tadzik> ah

[19:00] <tadzik> well, I can always bundle libmoar.so and adjust LD_LIBRARY_PATH or something

[19:12] <FROGGS> tadzik: IMO when you preload that lib, you don't need LD_LIBRARY_PATH

[19:13] <FROGGS> there is a LD_PRELOAD_LIBS IIRC, and that was kinda helpful on bsd or osx

[19:34] *** btyler joined
[19:35] *** jnap joined
[20:42] <tadzik> oh, nice

[20:55] *** brrt joined
[21:23] *** cognominal joined
[21:29] *** jnap1 joined
[21:50] *** brrt left
[22:46] *** colomon joined
