[00:03] <jnthn> OK. We can hun the problems with linenoise, or readline, later

[00:03] <FROGGS> yeah

[00:04] <dalek> MoarVM: b63301e | jnthn++ | src/core/interp.c:

[00:04] <dalek> MoarVM: Workaround for readline interactive bug.

[00:04] <dalek> MoarVM:

[00:04] <dalek> MoarVM: On some platforms, it spews endless prompts and never reads a line.

[00:04] <dalek> MoarVM: This avoids the issue by turning it into a normal readline, which does

[00:04] <dalek> MoarVM: lose the readline stuff, but is better than no REPL at all.

[00:04] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b63301e4ef

[00:05] <diakopter> jnthn: I thought we had some custom patches on dyncall (and libuv for that matter)

[00:05] <jnthn> diakopter: None on libuv

[00:05] <jnthn> diakopter: Maybe some on dyncall

[00:06] <jnthn> Well, certianly we have dyncall ones now

[00:06] <jnthn> I put in the patch from Andy, but I did it on top of their latest

[00:06] <jnthn> Sadly, their latest breaks stuff for us.

[00:06] <diakopter> I thought we had lots and lots of mods

[00:06] <jnthn> It's probably not a big deal to fix, but I don't have time for it now.

[00:06] <jnthn> Well, we have lots and lots of build patches at least :)

[00:15] <FROGGS> spectest looks good I think

[00:17] <jnthn> Same here

[00:18] <jnthn> OK, anything else to go into MoarVM pre-release?

[00:18] <timotimo> hohum.

[00:18] <timotimo> seccomp forbids the use of sbrk if you don't supply a filter

[00:19] <jnthn> Hm :)

[00:20] <timotimo> now i need to get the documentation for seccomp filters %)

[00:20] <FROGGS> I dunno... I'd look into fixing this tomorrow when I got to it

[00:25] <jnthn> FROGGS: "this"?

[00:25] <timotimo> libseccom looks easy enough

[00:25] <FROGGS> things*

[00:26] <FROGGS> <-- tired

[00:30] <dalek> MoarVM: 6fabfa2 | Jonathan++ | tools/release.sh:

[00:30] <dalek> MoarVM: Add initial release script by moritz++.

[00:30] <dalek> MoarVM:

[00:30] <dalek> MoarVM: With a small tweak.

[00:30] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6fabfa2d6d

[00:31] <timotimo> er, what is exec >MANIFEST supposed to mean? o_O

[00:31] <timotimo> wait

[00:31] <timotimo> that redirects the output of the current shell into a file?

[00:32] <jnthn> I didn't write it :P

[00:32] <jnthn> moritz++ did :)

[00:32] <jnthn> But yes, I presume that's what it does :)

[00:32] <timotimo> holy fucking shit

[00:32] <timotimo> that's awesome

[00:32] <timotimo> perl6 needs this.

[00:32] <timotimo> :P

[00:32] <timotimo> (i know it already does)

[00:38] <dalek> MoarVM: 8ba3c28 | jnthn++ | Configure.pl:

[00:38] <dalek> MoarVM: Don't try to update submodules if no .git.

[00:38] <dalek> MoarVM:

[00:38] <dalek> MoarVM: Otherwise, Configure will explode in a release.

[00:38] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8ba3c28e68

[00:48] <jnthn> http://jnthn.net/MoarVM/MoarVM-2014.01-rc1.tar.gz

[00:48] <jnthn> Please try to download and Configure and make ^

[00:52] <btyler> build failure: https://gist.github.com/kanatohodets/b49fd88fc5fb70a2426b

[00:52] *** benabik joined
[00:52] <lee__> i see the same on OS X

[00:53] <btyler> (I'm also on OSX)

[00:53] <lee__> should libdyncall_s.a be omitted from the tarball?

[00:54] <jnthn> um...that's build output...

[00:54] <diakopter> well if the clean misses it..

[00:55] <jnthn> Well, but it shouldn't really happen

[00:55] <jnthn> 'cus it does git ls-files to make the manifest...

[00:56] <lee__> https://gist.github.com/leedo/666a43f884612ca4db7c

[00:56] <lee__> thats freshly extracted

[00:58] <jnthn> How on earth...

[00:59] <jnthn> They don't show up in the MANIFEST file, though?

[01:02] <lee__> hmm nope

[01:02] <jnthn> I agree they're in the .tar.gz

[01:03] <lee__> must be something with that tar command

[01:05] <jnthn> Yeah

[01:06] <jnthn> perl -pe "s{^}{MoarVM-$VERSION/}" MANIFEST | tar zc -T - -f MoarVM-$VERSION.tar.gz

[01:06] <jnthn> The first bit piped into tar doesn't mention the .a files

[01:11] <jnthn> ohh

[01:11] <jnthn> We're ending up with the entire directories of the submodules in the MANIFEST

[01:20] *** jnap joined
[01:20] <timotimo> hm. here's something i don't understand

[01:20] <timotimo> i can nqp::getcomp the compiler and register my extops

[01:20] <timotimo> how do i then go ahead and use these in the future in the same process?

[01:21] <timotimo> can i have a .nqp file compiled to .moarvm that does the registration, use ThatModule from the other code file and immediately use the nqp::myextop calls?

[01:22] <timotimo> or how would i get that to work?

[01:23] <timotimo> er, i was mistaken, i don't have to use getcomp to do that

[01:23] <timotimo> just use MASTNodes and then MAST::ExtOpRegistry.register_extop(...)

[01:25] <jnthn> Well, but then you still need to map nqp:: ops to them

[01:26] <jnthn> New RC coming up

[01:27] <jnthn> bah, shoulda known something was up when the tarball was a couple of megs

[01:27] <jnthn> up

[01:27] <jnthn> 18 megs

[01:27] <jnthn> Now it's a couple of megs

[01:28] <timotimo> hm. how do i go about mapping the nqp ops then? :\

[01:28] <timotimo> ah, for *that* i need the getcomp

[01:29] <jnthn> See how Perl6::Ops does it

[01:29] <timotimo> that's where i'm looking now. i just didn't look far enough down

[01:29] <timotimo> does it make sense to supply "nqp" as the hll in the first field?

[01:30] <jnthn> If you will call the ops from NQP, yes

[01:30] <jnthn> You can also add them globally

[01:30] <jnthn> add_core_op

[01:30] <jnthn> Maybe not so sociable :)

[01:31] <timotimo> hehe.

[01:31] <timotimo> i used "add_hll_moarop_mapping", was that wrong?

[01:31] <timotimo> ah, for that i don't supply the hll

[01:31] <timotimo> that actually sounds nice.

[01:32] <timotimo> but i do want add_core_moarop_mapping

[01:34] <jnthn> yes, that's the one

[01:37] <timotimo> how long are you going to stay online today?

[01:37] <timotimo> i'm getting ever closer to an actually executable *thing*

[01:37] <timotimo> this excites me :)

[01:37] <timotimo> it does feel a bit boilerplatey to me

[01:38] <jnthn> http://jnthn.net/MoarVM/MoarVM-2014.01-rc2.tar.gz

[01:38] <timotimo> i have stuff i want to do in C. i wrap that in moarvm extops that i register from c land

[01:38] <timotimo> then i register the ops with the QAST compiler

[01:38] <timotimo> and then i register the ops with the operations

[01:38] *** jnap joined
[01:38] <jnthn> btyler, FROGGS, timotimo: Try RC2 if you have a moment.

[01:39] <jnthn> timotimo: tbh, adding these things isn't really a very common thing to do.

[01:39] <jnthn> timotimo: And keeping nqp and VMs at something of a distance is what means we can have one codebase and run on JVM/MoarVM/Parrot

[01:40] <timotimo> that's true, yeah

[01:40] <timotimo> i'll try rc2 real quick

[01:40] <dalek> MoarVM: 517f0c2 | Jonathan++ | tools/release.sh:

[01:40] <dalek> MoarVM: Don't include submodule directories in MANIFEST

[01:40] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/517f0c21fb

[01:40] <dalek> MoarVM: 516ceab | Jonathan++ | build/setup.pm:

[01:40] <dalek> MoarVM: Remove submodule-related git references in Makefile

[01:40] <dalek> MoarVM:

[01:40] <dalek> MoarVM: While the clean instruction is perhaps helpful in some sense, it is

[01:40] <dalek> MoarVM: not good for in a release, where there's no Git repo.

[01:40] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/516ceab9b1

[01:41] <timotimo> jnthn: how about shipping a few "hello moarvm!" .moarvm files with moarvm? :)

[01:42] <timotimo> something braindead simple, that says "hello!" or something

[01:42] <timotimo> i don't know how to make such a thing without dependencies on nqp, though

[01:43] <timotimo> jnthn: it seems to build fine :)

[01:44] <timotimo> jnthn: how does i debugs "failed to load library './secmoar_ops.so'"? :(

[01:44] <dalek> MoarVM: 5d8f31e | Jonathan++ | build/Makefile.in:

[01:44] <dalek> MoarVM: Update make release target.

[01:44] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5d8f31ee38

[01:45] <timotimo> huh, it seems like it's trying to load MASTOps.moarvm

[01:45] <timotimo> but i don't see that file anywhere

[01:45] <timotimo> ah, ../nqp/MASTOps.moarvm

[01:45] <jnthn> That file should be installed...

[01:45] <jnthn> I'm not sure about the library loading issue, but maybe look at how Rakudo does it

[01:45] <jnthn> We put the ops file in a dynext directory...wonder if that's significant.

[01:46] <diakopter> what's sec for

[01:46] <timotimo> gee, i hope not

[01:46] <timotimo> diakopter: SECURE :)

[01:47] <timotimo> (it uses seccomp to prevent malicious stuff from happening)

[01:47] <diakopter> seccomp is the thing from the nsa?

[01:48] <dalek> MoarVM: 9656fbd | jnthn++ | README.markdown:

[01:48] <dalek> MoarVM: Tweak a number in the README.

[01:48] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9656fbda4d

[01:48] <jnthn> 'cus we know they're good at security... :)

[01:50] <diakopter> selinux?

[01:51] <timotimo> diakopter: no, seccomp

[01:51] <btyler> jnthn: RC2 builds, tried using the release as a --prefix for nqp but it died on some path problem; I wiped out my existing MoarVM install/ dir and copied the release install/ into its place, nqp built and nqp-m fails 5 tests (related to file-ops, which I think is normal?)

[01:51] <timotimo> jnthn: how do you feel about letting me add another little commit before we cut the commit?

[01:51] <btyler> so seems good, I think

[01:51] <timotimo> cut the release*

[01:52] <timotimo> jnthn: i'd really like to put a fast path into the concat that uses memcpy instead of a for loop with get_codepoint_at if both strings have the same format

[01:52] <timotimo> because now, anything that concatenates is basically horridly slow

[01:52] <timotimo> and most things on the repl will be printed using concatenation

[01:53] <diakopter> theyre not that slow on windows

[01:53] <diakopter> bc it's much more optimized

[01:53] <timotimo> right. but it's unbearable on linux

[01:54] <timotimo> and people will want to look at our first release

[01:54] <timotimo> and if it does silly things like that, they'll say "wtf are they smoking?"

[01:54] <jnthn> btyler: Sounds good.

[01:55] <diakopter> timotimo: I'm not sure any more people will say that than already have for 13 years

[01:55] <timotimo> hm

[01:55] <jnthn> True :)

[01:55] <jnthn> Also, this is *not* a distribution release

[01:56] <jnthn> It's the first Rakudo release that has some level of Moar support

[01:56] <diakopter> not to mention there are plenty of other reasons to say that :)

[01:56] <jnthn> There's a number of reasons not to trust it too much yet.

[01:56] <timotimo> we won't publish moar support with this month's rakudo compiler?

[01:56] <jnthn> We will

[01:56] <jnthn> But that's a compiler release

[01:57] <jnthn> It's distribution releases (Rakudo Star) that are explicitly end-user targetted.

[01:57] <jnthn> And come with promises like "yes, it runs Panda", "yes, it has the debugger", "yes, you can use NativeCall", etc.

[01:58] <diakopter> I've never understood how compiler users are less of end users than distribution users

[01:58] <timotimo> what's the difference between _STRAND_DEPTH and STRAND_DEPTH?

[01:58] <diakopter> one is lvalue

[01:58] <diakopter> I think

[01:58] <timotimo> ah, that makes sense

[01:59] <timotimo> strand_depth is supposed to be 0 if it's not a rope, eh?

[02:00] <diakopter> well it's never read in that case I think

[02:00] <diakopter> or maybe it means something else

[02:00] <diakopter> see MVMString.h

[02:00] <timotimo> fair enough

[02:00] <timotimo> the compare_offset minus the offset is the length of the strand's piece, right?

[02:01] <diakopter> don't remember exactly

[02:01] <diakopter> driving on the highway

[02:02] <diakopter> (kidding) :) but not in front of my computer

[02:03] <timotimo> whoops. i think i just outputted a 8-bit utf8 encoded string into a bunch of int64 slots m)

[02:03] <timotimo> nope, MVMCodepoint32

[02:03] <timotimo> but still wrong

[02:04] <timotimo> ah well, let's do it right. after the release.

[02:05] <timotimo> i wonder what not_gerd is up to these days

[02:05] <timotimo> haven't seen him in a long while

[02:06] <dalek> MoarVM: 87b2029 | jnthn++ | docs/release_guide.md:

[02:06] <dalek> MoarVM: First stab at a release guide.

[02:06] <dalek> MoarVM:

[02:06] <dalek> MoarVM: To make sure the bus number can be more than 1 here.

[02:06] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/87b2029252

[02:08] <timotimo> jnthn: --prefix=install is apparently the default

[02:11] <jnthn> timotimo: OK. I'll leave it in there in case we change that.

[02:14] * timotimo is unsure how to debug the failed to load library thing :(

[02:19] <timotimo> getting the output of __dlerror after the library comes back NULL from dyncall would be excellent

[02:19] <timotimo> $1 = 0x18108a0 "./secmoar_ops.so: undefined symbol: seccomp_load" ← now i know that it didn't find this symbol ... i linked it in with ld, but i probably would have to link it in statically or something

[02:20] <timotimo> yay, i had to move the -lfoobar from cc to ld

[02:20] <timotimo> obviously

[02:21] <timotimo> huh.

[02:21] <timotimo> https://gist.github.com/timo/e01bdb2252a683fd9e9d

[02:22] <timotimo> (updated with secmoar_sandbox.nqp and the build script)

[02:23] <timotimo> ah!

[02:23] <timotimo> --output= instead of -o

[02:23] <timotimo> interesting.

[02:25] <diakopter> timotimo: do you havea  way to contact not_gerd?

[02:27] <timotimo> i don't think so

[02:27] <diakopter> he's in your country; just linear search

[02:27] <timotimo> good idea

[02:27] <timotimo> so ... i have an op named nqp::smclientcreate and moar seems to think it wants 4 arguments, but i'm pretty sure i gave it 3 everywhere

[02:27] <timotimo> MVM_ext_register_extop(tc, "smclientcreate",  secmoarclientcreate, 3, s_secmoarclientcreate);

[02:27] <timotimo> this is in C

[02:27] <timotimo> static MVMuint8 s_secmoarclientcreate[] = { MVM_operand_int64 | MVM_operand_write_reg, MVM_operand_obj | MVM_operand_read_reg, MVM_operand_obj | MVM_operand_read_reg, MVM_operand_obj | MVM_operand_read_reg };

[02:28] <timotimo> as is this

[02:28] <timotimo> MAST::ExtOpRegistry.register_extop('smclientcreate', MVM_operand_int64 +| MVM_operand_write_reg, MVM_operand_obj   +| MVM_operand_read_reg, MVM_operand_obj   +| MVM_operand_read_reg, MVM_operand_obj   +| MVM_operand_read_reg);

[02:28] <timotimo> and this is in nqp

[02:28] <timotimo> $ops.add_core_moarop_mapping('smclientcreate', 'smclientcreate');

[02:28] <timotimo> as is this

[02:28] <timotimo> so ... huh?

[02:28] <diakopter> well there's 4 there in teh first C line

[02:28] <timotimo> there is?

[02:28] <diakopter> counting the first (output) one

[02:29] <timotimo> oh? so i have to supply the variable i want the return value to be put into as the first argument in nqp, too?

[02:29] <timotimo> is the 3 there correct in the C code?

[02:29] <diakopter> no

[02:30] <timotimo> OK

[02:30] <timotimo> that has to be 4, yes?

[02:31] <timotimo> so, how do i make it work? :\

[02:31] <timotimo> i can't supply my variable there, because it'll say "cannot accept void register"

[02:31] <timotimo> huh, half past 3 already?!

[02:31] <timotimo> i better get some sleep.

[02:34] <diakopter> :)

[02:37] <timotimo> don't think you're off the hook just yet!

[02:41] <jnthn> Tiem for some sleep &

[02:41] <diakopter> 'n

[02:44] *** benabik joined
[04:24] <benabik> Hm.  19-file-ops.t failures 36-40: reading a{ line till {CR,CRLF,LF,EOF},n empty line}

[05:50] *** jnap joined
[07:33] <FROGGS> benabik: that is kinda expected, jnthn had to change the way we detect newlines

[07:34] <FROGGS> but I dunno if this will affect rakudo, I guess not

[07:59] *** jnap joined
[08:09] *** Mouq joined
[08:22] *** FROGGS joined
[08:32] *** odc joined
[09:00] *** jnap joined
[10:01] *** jnap joined
[10:02] *** Mouq joined
[10:15] <jnthn> MoarVM 2014.01 is tagged, and release is here: http://jnthn.net/MoarVM/MoarVM-2014.01.tar.gz

[10:16] <hoelzro> \o/

[10:16] <FROGGS> I am testing it (again) after current p-spectest

[10:17] <nwc10> good UGT jnthn

[10:20] <FROGGS> jnthn: what do we do about this? t/spec/S06-advanced/callframe.rakudo.parrot ..................... Failed 1/9 subtests

[10:20] <jnthn> FROGGS: I dunno, why's it fail?

[10:21] <FROGGS> not ok 2 - callframe().line

[10:21] <FROGGS> #      got: '14'

[10:21] <FROGGS> # expected: '15'

[10:21] <FROGGS> almost looks like the test is off

[10:21] <jnthn> What do other backends think?

[10:22] <FROGGS> jnthn: all think the same

[10:22] * FROGGS is looking at the test file now

[10:22] <jnthn> What does a human thing? :)

[10:22] <jnthn> *think

[10:23] <FROGGS> 14  sub f() {

[10:23] <FROGGS> 15      is callframe().line, $baseline + 5, 'callframe().line';

[10:23] <FROGGS> what do you think?

[10:23] <FROGGS> 14, right?

[10:24] <jnthn> Hmm

[10:24] <jnthn> Well, but I think it's meant to be the line where callframe is?

[10:25] <FROGGS> yeah, I see

[10:25] <FROGGS> I duplicated that test line, and the second invocation succeeds

[10:25] <jnthn> Odd...

[10:25] <FROGGS> even

[10:25] <jnthn> Was one of the commits that fixed line number related things on Moar to blame?

[10:26] <FROGGS> I will check

[10:30] <FROGGS> I think there only are two related commits... trying something with one of them

[10:32] <FROGGS> nr: say callframe().line

[10:32] <camelia> rakudo-parrot c5ca99, rakudo-jvm c5ca99, rakudo-moar c5ca99, niecza v24-109-g48a8de3: OUTPUT«1␤»

[10:32] <FROGGS> nr: ␤␤␤sub foo {␤say callframe().line␤}␤

[10:32] <camelia> rakudo-parrot c5ca99, rakudo-jvm c5ca99, rakudo-moar c5ca99: ( no output )

[10:32] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«Potential difficulties:␤  &foo is declared but not used at /tmp/tmpfile line 1:␤------> [32msub foo [33m⏏[31m{[0m␤␤»

[10:32] <FROGGS> nr: ␤␤␤sub foo {␤say callframe().line␤}␤foo

[10:32] <camelia> rakudo-parrot c5ca99, rakudo-jvm c5ca99, rakudo-moar c5ca99, niecza v24-109-g48a8de3: OUTPUT«2␤»

[10:33] <FROGGS> nr: ␤␤␤sub foo {␤␤␤␤say callframe().line␤}␤foo

[10:33] <camelia> rakudo-parrot c5ca99, rakudo-jvm c5ca99, rakudo-moar c5ca99, niecza v24-109-g48a8de3: OUTPUT«5␤»

[10:53] <FROGGS> umm, wait

[10:53] <FROGGS> the fudged script gets a line stripped

[10:54] <FROGGS> jnthn: it is just this commit: https://github.com/perl6/roast/commit/de89abdf7f821036e28c9cc346d18833dbaea330

[10:54] <FROGGS> we need to adjust our expectations :o)

[10:57] <FROGGS> yeah, niecza gets it wrong too of course... fixing it

[11:01] *** jnap joined
[11:31] <timotimo> i still don't understand what i'm doing wrong when trying to register my extops with mast

[11:31] <timotimo> smclientcreate is set to have 4 arguments, one of which is a write register, so i *should* be fine passing 3 arguments and using the return value, no?

[11:32] <jnthn> timotimo: Yes, the nqp:: op mapping should do the "write register is result" thing for you

[11:32] <jnthn> timotimo: Presumably you made the write register the first operand?

[11:32] <timotimo> where should i look if it fails?

[11:32] <timotimo> yes, i did

[11:33] <timotimo> OH DUH

[11:33] <jnthn> Well, how does it fail?

[11:33] <jnthn> You can always do --target=mast

[11:33] <jnthn> Or failing that,--target=mbc --output=x.moarvm and then moar --dump x.moarvm

[11:33] <timotimo> forgot to put $ before the MVM_operand_foo numbers

[11:33] <jnthn> oops

[11:34] <FROGGS> yeah, $$ is what you need

[11:34] <FROGGS> babe

[11:35] <timotimo> :)

[11:48] <timotimo> #2  MVM_string_utf8_encode_substr (tc=0x603430, str=0x7ffff65e2cf8, output_size=0x0, start=start@entry=0,  length=11258999068426240) at src/strings/utf8.c:291

[11:48] <timotimo> 291	    memset(result, 0, sizeof(MVMint32) * length + 2);

[11:48] <timotimo> (gdb) print length

[11:48] <timotimo> $18 = 11258999068426240

[11:48] <timotimo> seems legit.

[11:50] <jnthn> long string is long

[11:50] *** Mouq joined
[11:51] <timotimo> it's supposedly "-e"

[11:52] <timotimo> its flags is 0, meaning STR_TYPE_UINT32

[11:52] <timotimo> its codes = 0, doesn't that mean its length is 0?

[11:52] <timotimo> ah, whoa

[11:52] <timotimo> graphs = 18014398509481984,

[11:52] <timotimo> how did that happen?

[11:53] <nwc10> r: printf "%016X", 18014398509481984

[11:53] <camelia> rakudo-parrot c5ca99, rakudo-jvm c5ca99, rakudo-moar c5ca99: OUTPUT«0040000000000000»

[11:54] <moritz> a single bit set

[11:54] <timotimo> huh.

[11:55] <timotimo> it may not be a MVMString

[11:55] <timotimo> what do i have to cast the .st.WHAT to to get the right structure?

[11:58] <timotimo> i have to .get_str on it %)

[11:59] <timotimo> SecMoar: couldn't create a socket pair: Success  ←  oh how i love errno :)

[12:00] <timotimo> ah! "On success, zero is returned."

[12:00] <jnthn> hehe

[12:01] <timotimo> hm. i have a BOOTIO, but it seems like i'm supposed to have an MVMOSHandle

[12:02] <timotimo> in general, how do i find my way to these? i should probably pass the class with the nqp op, right?

[12:02] *** jnap joined
[12:03] <jnthn> timotimo: You're confusing type and REPR

[12:03] <jnthn> BOOTIO is a type based on the MVMOSHandle REPR.

[12:04] <timotimo> ah, huh.

[12:04] <jnthn> What're you trying to do?

[12:04] <timotimo> i have a file descriptor in a C struct and i'd like to expose that as a handle to nqp/perl6 land via an op

[12:04] <timotimo> oh, huh

[12:04] <timotimo> i apparently forgot to even set the fd itself

[12:08] <jnthn> Not sure how to get from fd to a thingy that'll work out with the various IO ops; I guess see libuv docs to see if they have a way...or see how getstdin and the like do it

[12:12] <timotimo> sure

[12:17] <timotimo> it would appear that i'll have to use libuv's pipe mechanism instead of the one unix gives me

[12:17] <timotimo> which is a tad annoying, as i'm bound to linux anyway

[12:18] <timotimo> oh well. on unix, it's a unix domain socket rather than a normal pipe

[12:18] <timotimo> that's kind of annoying

[12:18] <timotimo> but at least the uv_pipe has a built-in notion of passing file descriptors, so that's already nicer than a regular socketpair

[12:21] <timotimo> but apparently uv_pipe_open is what i need

[12:31] <timotimo> jnthn: so i'm creating my handle with MVMOSHandle    * const result = (MVMOSHandle *)MVM_repr_alloc_init(tc, tc->instance->boot_types.BOOTIO); and returning that as the object register like this: GET_REG(tc, 0).o = (MVMObject *)result;

[12:31] <timotimo> shouldn't that give me an object with the MVMOSHandle REPR?

[12:45] <jnthn> timotimo: Yes, it should

[12:45] <timotimo> time to debug i guess

[12:46] <jnthn> Those two lines look correct, so maybe the issue is elsewhere

[12:46] <jnthn> I mean, I guess you are populating the object in some way before returning it?

[12:48] <timotimo> yes

[12:54] <timotimo> yeah, the repr is apparently type 7 rather than 8

[12:54] <timotimo> the other way around.

[12:54] <timotimo> apparently that's a P6int

[12:54] <timotimo> d'oh

[12:54] <timotimo> i'm an idiot

[13:03] *** jnap joined
[13:38] *** Mouq joined
[13:45] <timotimo> strings confuse me.

[13:46] <timotimo> the string's content seems to be correct, but the graphs number is totally off

[13:46] <FROGGS> my cats enjoy 'em

[13:46] <FROGGS> timotimo: so what level is it correct? at byte level?

[13:47] <timotimo> yes, i'm casting the individual int32s to char and letting them be printed out

[13:47] <timotimo> in gdb

[13:47] <timotimo> and the string is what i expect it to be and it's even null terminated

[13:50] <jnthn> The NUM_GRAPHS(...) should be the number of 32 bit things

[14:04] *** jnap joined
[15:04] *** jnap joined
[15:27] *** Mouq joined
[16:00] *** FROGGS joined
[17:15] *** Mouq joined
[17:24] *** guest1338 joined
[17:56] *** FROGGS[mobile] joined
[19:02] *** woolfy joined
[19:03] *** Mouq joined
[19:27] *** tgt joined
[19:57] *** tgt joined
[20:01] <FROGGS> r: say "\c[ARMENIAN DRAM SIGN]".ord

[20:01] <camelia> rakudo-moar bbbebb: OUTPUT«1423␤»

[20:01] <camelia> ..rakudo-parrot bbbebb, rakudo-jvm bbbebb: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Unrecognized character name ARMENIAN DRAM SIGN␤at /tmp/tmpfile:1␤------> [32msay "\c[ARMENIAN DRAM SIGN[33m⏏[31m]".ord[0m␤»

[20:02] <timotimo> \o/

[20:02] <FROGGS> r: say 0x058F

[20:03] <camelia> rakudo-parrot bbbebb, rakudo-jvm bbbebb, rakudo-moar bbbebb: OUTPUT«1423␤»

[20:03] <FROGGS> yay :o)

[20:03] <FROGGS> (our own stuff)++

[20:14] *** Mouq joined
[20:36] *** odc joined
[21:26] *** ggoebel1112 joined
[22:13] *** japhb joined
[22:24] *** woolfy1 joined
[23:05] *** tgt joined
[23:14] *** dalek joined
[23:48] <dalek> MoarVM: 6e85b9c | jnthn++ | src/core/coerce.c:

[23:48] <dalek> MoarVM: Increase precision in num => str coercion.

[23:48] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6e85b9c98a
