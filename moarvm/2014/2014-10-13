[00:01] *** colomon joined
[00:13] *** cognome joined
[00:16] *** cognome joined
[00:17] *** cognome_ joined
[00:44] *** cognome joined
[00:45] *** cognome_ joined
[01:01] *** lizmat_ joined
[01:18] *** camelia joined
[01:46] *** cognome joined
[02:01] *** colomon joined
[02:13] *** colomon joined
[02:17] *** JimmyZ joined
[02:19] <JimmyZ> Hello, what is callsite intern?

[02:33] *** colomon joined
[02:46] *** cognome joined
[02:50] *** mlilenium_ joined
[02:50] *** mlilenium_ left
[03:03] *** JimmyZ_ joined
[03:46] *** cognome joined
[03:54] *** cognome joined
[04:45] *** ggoebel1111118 joined
[04:46] *** cognome joined
[05:46] *** cognome joined
[06:28] *** JimmyZ_ joined
[06:34] <nine> TimToady: sudo cpupower frequency-set -g performance # gives stabler benchmark numbers

[06:35] <JimmyZ> cpupower doesn't exist on ubuntu ...

[06:37] <JimmyZ> ok, installing it.

[06:38] <nine> An alternative would be: sudo cpufreq-set -g performance

[06:44] <JimmyZ> hmm , I didnt' see -g performance in the man page :(

[06:46] *** cognome joined
[06:54] <timotimo> JimmyZ: we only generate (or look for?) spesh candidates when we invoke something if the callsite has been interned

[06:54] <timotimo> interning means we stash the callsite in our interning array and have made sure that the pointer points to the interned callsite rather than the one we may have just created

[06:57] <timotimo> okay, so stuff for today:

[06:58] <timotimo> - look more closely at how we spesh decont and maybe turn deconts on known container types into a direct pointer lookup

[06:58] <timotimo> - look more closely at assign and maybe turn assign into assignunchecked and perhaps even into a direct pointer assignment

[06:59] <timotimo> oh, also: a decont on a code-ish container type (the proxies) could become an invoke directly and then we could inline the little piece of code it has in BOOTSTRAP.nqp

[07:01] *** Ven joined
[07:02] <JimmyZ> other quesiont:  I see calliste is intened after deserialization, can we intern the callsite before serialization? :0

[07:03] <JimmyZ> that is, seriallize the interned calliste :P

[07:05] <timotimo> - run some proper tests to see if (or why not) the invocations from all over our c code get treated by spesh at all

[07:06] *** zakharyas joined
[07:13] *** kjs_ joined
[07:46] *** cognome joined
[08:04] *** _sri joined
[08:07] *** _sri joined
[08:23] *** lizmat joined
[08:36] *** woolfy joined
[08:46] *** cognome joined
[09:08] *** FROGGS joined
[09:09] *** Ven joined
[09:27] *** kjs_ joined
[09:46] *** cognome joined
[09:53] *** cognome joined
[10:13] *** flaviusb joined
[10:32] <timotimo> guess what was wrong with my trigonometry?

[10:32] <timotimo> i was using the atan function to implement the atan2 op

[10:33] <jnthn> It's broken 'cos you comitted a sin

[10:33] <tadzik> *g*

[10:33] <dalek> MoarVM: eb73c5e | (Timo Paulssen)++ | src/jit/graph.c:

[10:33] <dalek> MoarVM: atan is a very poor implementation for atan2.

[10:33] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/eb73c5e72a

[10:34] <tadzik> even the argument list is different :D

[10:34] <tadzik> gotta love gotos

[10:47] <timotimo> wtf.

[10:47] <timotimo> what, argument list?

[10:47] <timotimo> OH FFS

[10:47] <timotimo> thank you

[10:48] <tadzik> :)

[10:48] <tadzik> well, you already fixed it anyway, I think?

[10:49] <timotimo> something else is wrong, too

[10:50] <timotimo> why is this still wrong >:(

[10:50] <timotimo> ah doh

[10:50] <timotimo> no, damn, i ah'd too quickly

[10:53] <dalek> MoarVM: a71fb99 | (Timo Paulssen)++ | src/jit/graph.c:

[10:53] <dalek> MoarVM: atan2 actually takes two arguments.

[10:53] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a71fb99f98

[10:53] <timotimo> this is still wrong :(

[10:53] <timotimo> tadzik: tell me what i'm doing wrong :(

[10:54] <timotimo> i'm staring at the code and can't see what is wrong

[10:54] <tadzik> I woke up at 5 today, I can't help anyone with anything :)

[10:55] <timotimo> :|

[11:34] *** kjs_ joined
[11:40] <dalek> MoarVM: ca1f3b2 | (Timo Paulssen)++ | src/jit/graph.c:

[11:40] <dalek> MoarVM: fix atan2 op; ven++ for tracking this down

[11:40] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ca1f3b26ea

[11:41] <timotimo> how the fucking fuck can this fix it?

[11:42] <Ven> \o/ I fixed it.

[11:51] <dalek> MoarVM: 641391a | (Timo Paulssen)++ | src/jit/graph.c:

[11:51] <dalek> MoarVM: Revert "fix atan2 op; ven++ for tracking this down"

[11:51] <dalek> MoarVM:

[11:51] <dalek> MoarVM: This reverts commit ca1f3b26eaf465880a122d66a43efc5c921d000a.

[11:51] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/641391adc6

[12:04] <timotimo> something must have been in a weird state before i committed ca1f3b2

[12:04] <timotimo> because that commit was apparently not necessary

[12:04] *** brrt joined
[12:12] *** JimmyZ joined
[12:23] *** jnthn joined
[12:24] *** nine joined
[12:37] *** brrt joined
[12:43] *** daxim joined
[12:55] <dalek> MoarVM: 256554b | (Timo Paulssen)++ | src/jit/graph.c:

[12:55] <dalek> MoarVM: fix atan2 and friends for real this time; jnthn++ and nwc10++

[12:55] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/256554b8a2

[12:56] * jnthn tries building that

[13:04] *** kjs_ joined
[13:17] <brrt> yeah, that's a good idea timotimo :-)

[13:17] <brrt> that should work a bit better

[13:21] <dalek> MoarVM: 03ac9a7 | (Tobias Leich)++ | src/io/syncfile.c:

[13:21] <dalek> MoarVM: implement set_separator for syncfiles

[13:21] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/03ac9a70f6

[13:30] <nwc10> timotimo++ # fixed

[13:35] <timotimo> "a bit"? %)

[13:35] <timotimo> i think it only passed the spec tests on my machine because the right input arguments happened to have been put onto the "floating point stack"-like thing before by other ops (like unbox_n or something)

[13:37] <brrt> that happens often

[13:37] <brrt> that can be a really annoying way to mask bugs

[13:37] <brrt> in fact

[13:37] <brrt> i have a blog post about just that

[13:38] <timotimo> oh damn

[13:38] <timotimo> i seem to recall reading that

[13:41] <brrt> :-)

[13:41] <timotimo> it's especially annoying because the day before i tried to build neg_n

[13:41] <timotimo> and had to use the special movsd or whatever instruction

[13:41] <timotimo> (also, it didn't work out)

[13:41] <brrt> no, neg_n is hard

[13:42] <JimmyZ> looks like some ops which calls MVMROOT is a bit hard to jit, except wrapping them to function?

[13:43] * JimmyZ hopes we can jit the MVMROOT too :P

[13:44] <brrt> hmmm

[13:44] <brrt> let me think about that for a bit

[13:44] <JimmyZ> i.e: add_I etc..

[13:45] *** kjs_ joined
[13:45] <brrt> but yeah... in the general case wrapping-to-function is not going to cost you /that/ much

[13:45] <JimmyZ> these ops avoids a MVROOT, by using REGS, since gc updates REGS address.

[13:47] <brrt> yeah, i don't think they need a MVMROOT

[13:49] <brrt> hmm

[13:50] <brrt> basically, this is for stack-variables mostly

[13:50] <brrt> i don't really do that often

[14:05] *** kjs_ joined
[14:10] *** lizmat joined
[15:29] *** brrt joined
[15:40] *** woolfy left
[16:00] *** woolfy joined
[16:00] *** woolfy left
[16:00] *** lizmat joined
[16:01] *** kjs_ joined
[16:28] *** cognome joined
[20:46] *** FROGGS joined
[20:48] *** Ven joined
[21:02] <timotimo> we could block sigterm with sigprocmask and check for sigterm in the "main thread" and get an actually useful stack trace like people who come from python are used to.

[21:03] <timotimo> except signal(SIGTERM) doesn't wrok

[21:03] <timotimo> work

[21:28] *** brrt joined
[21:44] <brrt> ok, numeric negation is just xor with the highest possible byte

[22:06] *** camelia joined
[23:13] <dalek> MoarVM: e75de84 | (Bart Wiegmans)++ | src/jit/ (2 files):

[23:13] <dalek> MoarVM: Add numeric negation

[23:13] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e75de84f84

[23:13] *** brrt left
[23:38] *** cognome joined
