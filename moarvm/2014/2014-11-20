[00:27] *** vendethiel joined
[00:58] *** vendethiel joined
[01:39] *** zakharyas joined
[02:03] *** vendethiel joined
[02:50] *** jimmy_ joined
[02:50] *** vendethiel joined
[03:35] *** vendethiel joined
[04:48] *** vendethiel joined
[05:15] *** vendethiel joined
[05:41] *** vendethiel joined
[06:27] *** vendethiel joined
[06:38] *** kjs_ joined
[07:45] *** FROGGS joined
[07:58] *** zakharyas joined
[08:03] *** vendethiel joined
[08:55] <nwc10> "All tests successful." - ASAN still doesn't spot anything

[08:55] <FROGGS> I'd like to get these OSX failures nailed down :/

[08:57] <JimmyZ> FROGGS: https://github.com/MoarVM/MoarVM/commit/33970c6dfdddb5f1d3d667bf1e294ee8f09185d0#diff-0cb6ca157d7b79b7d7e5ace869130f8cR879

[08:59] <FROGGS> JimmyZ: I replied today via phone... did you get my message?

[09:01] <JimmyZ> FROGGS: I didn't see it anywhere

[09:01] <FROGGS> JimmyZ: k... I said that reverting it is fine by me, in exchange that you'd take a look at issue #154 :o)

[09:03] <FROGGS> my gut feeling is that the string allocated here: https://github.com/MoarVM/MoarVM/blob/master/src/strings/ops.c#L826

[09:04] * JimmyZ doesn't have OSX :(

[09:05] <FROGGS> causes trouble when we do not use it because of: https://github.com/MoarVM/MoarVM/blob/master/src/strings/ops.c#L883

[09:06] <FROGGS> JimmyZ: but you have brains! :D

[09:07] <JimmyZ> FROGGS: it's not a problem with allocating unused MVMString.

[09:07] <FROGGS> but it is about trying to free that union

[09:08] <FROGGS> maybe clang+osx needs special treatment when it comes to unions?

[09:08] <FROGGS> ... or onions

[09:11] <JimmyZ> and I don't think the bt give me any info :(. I think it's about GC movement which causes *any pointing to wrong place :P

[09:14] <FROGGS> hmmm

[09:14] <FROGGS> but any points to memory managed by C

[09:18] <JimmyZ> FROGGS: yeah, but GC maybe move its address to wrong place, something like off-by-one on OSX

[09:19] <JimmyZ> MVM_gc_allocate_object allocates zero memory be default

[09:19] <JimmyZ> *zeroed

[09:22] <FROGGS> yes yes, I know now :o)

[09:23] <lizmat> The MoarVM build is filled with warnings... maybe that can be a source of inspiration ?

[09:23] * JimmyZ saw some warnings with NFC.c

[09:24] <JimmyZ> *NFA.c

[09:34] <lizmat> afk for a few hours&

[09:47] <FROGGS> JimmyZ: these warnings are about debug message printing only AFAIK... but wants fixing anyway

[09:47] <FROGGS> lizmat: would be nice if you could provide a build log then :o)

[09:47] <JimmyZ> yeah, I didn't see any other warnings :P

[09:48] *** vendethiel joined
[10:15] *** dalek joined
[11:01] *** vendethiel joined
[11:32] <lizmat> FROGGS: here you go: a copy of a new build log on OS X: https://gist.github.com/lizmat/862c5a8868a916122c42

[11:34] <lizmat> it's only 5.6K lines and 370K bytes

[11:58] *** vendethiel joined
[12:22] *** vendethiel joined
[13:14] *** vendethiel joined
[13:56] *** brrt joined
[14:11] <dalek> MoarVM: 2508b40 | (Elizabeth Mattijsen)++ | src/core/frame.c:

[14:11] <dalek> MoarVM: Fix warnings

[14:11] <dalek> MoarVM:

[14:11] <dalek> MoarVM: "using the result of an assignment as a condition without parentheses" on OS X

[14:11] <dalek> MoarVM: (clang)

[14:11] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2508b40bd5

[14:27] *** hoelzro joined
[14:34] *** JimmyZ joined
[14:34] <dalek> MoarVM: 6cd9478 | (Elizabeth Mattijsen)++ | src/ (4 files):

[14:34] <dalek> MoarVM: Fix "'&&' within '||'" warnings on OS X (clang)

[14:34] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6cd9478aec

[14:46] <dalek> MoarVM: 85b1a50 | (Elizabeth Mattijsen)++ | src/6model/serialization.c:

[14:46] <dalek> MoarVM: Fix suspect warning on OS X (clang)

[14:46] <dalek> MoarVM:

[14:46] <dalek> MoarVM: type specifier missing, defaults to 'int'.  Since all of the similar functions

[14:46] <dalek> MoarVM: where void as well, I made this one also void (instead of the default int).

[14:46] <dalek> MoarVM: This also fixed the related "control reaches end of non-void function" warning.

[14:46] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/85b1a50f4a

[14:50] <brrt> lizmat++

[14:50] <brrt> now if you could speed up clang in the first place.. :-P

[14:50] <lizmat> I would much rather prefer a stable rakudo on OS X  :-(

[14:53] <brrt> isn't it?

[14:53] <brrt> hmmm

[14:53] *** kjs_ joined
[15:00] <[Coke]> brrt: not for a month now.

[15:01] <[Coke]> lots of segfaults (jit) and invalid memory usage errors (nonjit)

[15:01] <brrt> ok, that's odd

[15:01] <brrt> in spectests?

[15:01] <[Coke]> one of the latest tickets has a backtrace on a memory issue.

[15:01] <[Coke]> brrt: yes.

[15:01] <brrt> ok

[15:01] <brrt> let me see if i can repeat that a bit

[15:01] <brrt> things are rarely memory issues though

[15:02] <[Coke]> brrt: Just telling you what rakudo is telling us. :)

[15:03] <brrt> :-) i know, just telling you my gut feeling

[15:03] <brrt> memory issues are fairly rare

[15:03] <[Coke]> note that the backtrace I have there, I only got when running under the test_summary test harness. (was definitely coming from rakudo, though, not the perl5 harness)

[15:11] <dalek> MoarVM: 910a06c | (Elizabeth Mattijsen)++ | src/mast/driver.c:

[15:11] <dalek> MoarVM: fix another assignment in condition warning

[15:11] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/910a06cca9

[15:12] <lizmat> timotimo: looking at src/spesh/optimize.c, line 310

[15:12] <lizmat> if ((safety_cur->info->operands[0] & MVM_operand_rw_mask == MVM_operand_write_reg)

[15:13] <lizmat> I think we need parens here (suggestion by clang)

[15:13] <lizmat> clang is doing the == before the &

[15:14] <lizmat> brrt: don't you agree?

[15:16] <brrt> lett me see

[15:16] <jnthn> Not jut in Clang, it's that way in the C standard... http://en.cppreference.com/w/c/language/operator_precedence

[15:16] <brrt> wait

[15:16] <brrt> that seems... wrong

[15:16] <brrt> i /think/ we should have two &'s there

[15:16] <jnthn> No, & is right; it's a bitmask

[15:17] <lizmat> from the wording of the wording of the variables, I think we just need parens

[15:17] <brrt> but a == b isn't guaranteed to set 1

[15:17] <brrt> or is it

[15:17] <lizmat> that's why I think there's () missing

[15:17] <lizmat> feels to me it should first mask, and then compare

[15:18] <jnthn> lizmat: Yes, that's the intent. Mask then compare.

[15:18] <jnthn> lizmat: So I think the code is wrong.

[15:18] <lizmat> ok, that's one bug fixed then...

[15:18] * lizmat goes to test effect on rakudo

[15:25] <lizmat> still flaky spectest  :-(

[15:25] *** zakharyas joined
[15:27] <dalek> MoarVM: 018a260 | (Elizabeth Mattijsen)++ | src/spesh/optimize.c:

[15:27] <dalek> MoarVM: First mask bitmap, then compare

[15:27] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/018a260f38

[15:29] <lizmat> src/spesh/inline.c:96 gives "add explicit braces to avoid dangling else" warning

[15:30] <lizmat> not sure what to make of that...

[15:37] <dalek> MoarVM: 434de0c | (Elizabeth Mattijsen)++ | src/spesh/inline.c:

[15:37] <dalek> MoarVM: Fix dangling else (hopefully the right way)

[15:37] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/434de0c265

[15:38] * brrt is running spectests

[15:38] <brrt> hmmm

[15:39] <lizmat> ?

[15:39] <brrt> for so far as these are clang issues, i could test them at home

[15:39] <brrt> my mac-access is limited to $work

[15:39] <lizmat> that would be great...

[15:39] <brrt> :-)

[15:39] <lizmat> I mean, the noise of the clang build is deafening, drowning out any other squeaks

[15:39] * brrt agrees

[15:40] <brrt> which is why i always build with gcc ;-)

[15:42] <brrt> otherwise... i'd fear to think what could possibly be so mac-os-x specific that moar would be sensitive for

[15:46] <dalek> MoarVM: cf39e6c | jimmy++ | src/strings/ops.c:

[15:46] <dalek> MoarVM: Revert "attempt to fix a non-alloc+free #154"

[15:46] <dalek> MoarVM:

[15:46] <dalek> MoarVM: This reverts commit 33970c6dfdddb5f1d3d667bf1e294ee8f09185d0.

[15:46] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cf39e6c885

[15:46] <dalek> MoarVM: c8b0b97 | jimmy++ | src/gc/debug.h:

[15:46] <dalek> MoarVM: remove an unused semicolon

[15:46] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c8b0b979fa

[15:53] <jnthn> sleep &

[15:53] <lizmat> gnight jnthn !

[15:54] <brrt> tests are flaky indeed

[15:54] <brrt> sleep well jnthn :-)

[15:55] <JimmyZ> good night too

[16:14] <lizmat> implicit declaration of function 'MVM_panic'

[16:14] <lizmat> guess we forgot to include a .h somewhere ?

[16:17] *** FROGGS[mobile] joined
[16:18] <dalek> MoarVM: 4f1ba61 | (Elizabeth Mattijsen)++ | src/platform/posix/mmap.c:

[16:18] <dalek> MoarVM: Add missing include

[16:18] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4f1ba61af2

[16:28] <dalek> MoarVM: 8f4d53f | (Elizabeth Mattijsen)++ | src/jit/graph.c:

[16:28] <dalek> MoarVM: Fix another assignment as condition warning

[16:28] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8f4d53f5af

[16:36] *** vendethiel joined
[16:36] <dalek> MoarVM: 933a2a2 | (Elizabeth Mattijsen)++ | tools/ucd2c.pl:

[16:36] <dalek> MoarVM: Fix a *lot* of warnings in strings/unicode.c

[16:36] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/933a2a22a8

[16:47] *** FROGGS joined
[16:59] <[Coke]> no love on the daily run, though it predates a bunch of the warnings commits.

[17:03] <[Coke]> sounds like brrt was able to reproduce some flakiness, that's good.

[17:12] <[Coke]> lizmat: btw, I'm not running the spec tests in parallel.

[17:12] <[Coke]> and I'm still seeing the fails. (I'm using test_summary, which is currently single-threaded)

[17:12] <lizmat> ah?  and still flakiness?

[17:12] <lizmat> hmmm.... lemme try that as well

[17:13] <[Coke]> but same thing; fails only when running through a harness; run by hand, most of the time ok.

[17:13] <[Coke]> I ended up making it reproducable by making a single line spectest.data, and always using test summary to launch.

[17:13] <lizmat> does anybody know how and when to run tools/ucd2c.pl ?

[17:14] <lizmat> [Coke]: is there a difference between "make spectest" and "make t/spec/foo.t" ?

[17:14] <lizmat> wrt to harnessing ?

[17:16] <[Coke]> I never use make .../foo.t, I unno off the top of my head.

[17:16] <[Coke]> (if I'm running a single file, I almost always use prove -v -e t/fudgeandrun t/spec/foo.t

[17:19] <[Coke]> looking at the makefile, looks like make *.t uses the harness, yes.

[17:19] <lizmat> I *rarely* get an error testing like that

[17:20] <[Coke]> right. any of the memory issues, if you run it by itself, it's fine.

[17:20] <lizmat> fwiw, in the past weeks I also got errors *in* the perl5 harness

[17:20] <[Coke]> I suspect *some* kind of memory pressure, but I have 16G, not sure that's really teh issue.

[17:20] <lizmat> only twice, but still

[17:20] * lizmat has 16G as well

[17:20] <lizmat> maybe we haz 2much

[17:33] <[Coke]> OHNOES

[17:37] <lizmat> [Coke]: datapoint with TEST_JOBS=1: only 1 flapper

[17:37] <lizmat> but not none  :-(

[17:51] *** FROGGS_ joined
[18:47] *** vendethiel joined
[22:13] *** kjs_ joined
[23:00] *** kjs_ joined
[23:08] *** kjs_ joined
[23:33] *** vendethiel joined
