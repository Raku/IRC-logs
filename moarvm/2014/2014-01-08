[00:00] <jnthn> diakopter: I lied, I'm stubbing another piece... :)

[00:01] <jnthn> .oO( approaching the balmer peak backwards... )

[00:15] <dalek> MoarVM: 5315ec6 | jnthn++ | src/6model/reprs/MVMContext.c:

[00:15] <dalek> MoarVM: MVMContext refs frames, so mark it as such.

[00:15] <dalek> MoarVM:

[00:15] <dalek> MoarVM: Could fail to mark things we need to if it's the only frame referent

[00:15] <dalek> MoarVM: and it gets promoted to gen2.

[00:15] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5315ec64cb

[00:15] <dalek> MoarVM: 84a0004 | jnthn++ | / (5 files):

[00:15] <dalek> MoarVM: Add MVMContinuation REPR.

[00:15] <dalek> MoarVM:

[00:15] <dalek> MoarVM: Just references the top frame; this may well be all we need it to do.

[00:15] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/84a000439f

[00:15] <dalek> MoarVM: 653a53a | jnthn++ | src/ (3 files):

[00:15] <dalek> MoarVM: Bootstrap a BOOTContinuation.

[00:15] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/653a53a7a1

[00:33] *** lizmat joined
[00:47] <diakopter> jnthn: heh.

[00:49] <dalek> MoarVM: b039b34 | jnthn++ | / (5 files):

[00:49] <dalek> MoarVM: Partial continuation reset implementation.

[00:49] <dalek> MoarVM:

[00:49] <dalek> MoarVM: Does not yet persist/clear the tag, just runs the specified block.

[00:49] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b039b34e0a

[00:49] <diakopter> jnthn: is a null tag allowed?

[00:49] <jnthn> yeah

[00:50] <diakopter> ok

[00:50] <jnthn> And it seems if you control with a null tag, it means "nearest"

[00:50] * [Coke] wonders how jnthn is still awake!

[00:50] * diakopter too

[00:50] <jnthn> [Coke]: Curry! Imperial stouts!

[00:50] <diakopter> [Coke]: maybe he's actually asleep, but still coding

[00:50] <diakopter> and chatting

[00:51] <jnthn> diakopter: afaict from the tests, we can only ever have one tag per frame...did you figure the same?

[00:51] <diakopter> from the tests yeah

[00:51] <jnthn> Well, I can't see how you could get it otherwise...

[00:52] <diakopter> if you reset/control from the same frame..

[00:52] <jnthn> Since we invoke a block inside the rest...

[00:52] <jnthn> *reset

[00:52] <jnthn> But...the tag isn't valid after the reset, no?

[00:53] <jnthn> oh, wait...

[00:54] <diakopter> nqp-jvm: nqp::continuationreset(0,{1}); nqp::continuationcontrol(nqp::null,nqp::null,nqp::null)

[00:54] <camelia> nqp-jvm: OUTPUT«java.lang.NullPointerException␤  in  (/tmp/JMOZkWlStD:1)␤  in  (gen/jvm/stage2/NQPHLL.nqp:1100)␤  in eval (gen/jvm/stage2/NQPHLL.nqp:1086)␤  in evalfiles (gen/jvm/stage2/NQPHLL.nqp:1292)␤  in command_eval (gen/jvm/stage2/NQPHLL.nqp:1196)␤  in command_line…»

[00:54] <diakopter> well, there's that

[00:55] <jnthn> But every control is in the static dynamic scope of a reset in the tests, afaict.

[00:56] <diakopter> nqp-jvm: nqp::continuationreset(0,{1}); nqp::continuationcontrol(4,3,{2})

[00:56] <camelia> nqp-jvm: OUTPUT«Exception in thread "main" java.lang.RuntimeException: control operator crossed continuation barrier␤   at org.perl6.nqp.runtime.ExceptionHandling.dieInternal(ExceptionHandling.java:48)␤      at org.perl6.nqp.runtime.ExceptionHandling.dieInternal(ExceptionHandling.java:…»

[00:57] <diakopter> should catch that one

[00:57] <diakopter> (also the null pointer)

[00:59] * diakopter waits for jnthn to sleep 300000

[01:04] <jnthn> diakopter: Yeah, gonna get some rest now :)

[01:04] <diakopter> any pushes to apear?

[01:04] <jnthn> Nope :)

[01:05] <jnthn> I'm pretty sure MVMContinuation also needs a resume_addr in it, though :)

[01:06] <diakopter> a bytecode pointer?

[01:06] <diakopter> or frame?

[01:06] <jnthn> Frame is already there

[01:07] <jnthn> Bytecode pointer

[01:07] <diakopter> how to set the thing to clear the tag

[01:07] <jnthn> special_return, special_return_data, and set the flag to mark the special return data.

[01:07] <jnthn> And clear it in the callback.

[01:10] <jnthn> Happy hacking. :) o/

[01:12] <diakopter> o/

[01:18] <[Coke]> ok, new daily run is going to grab everything once up front, so no more last minute moar commits. :)

[01:59] *** ssutch_ joined
[02:01] <dalek> MoarVM: 166595c | jimmy++ | src/ (2 files):

[02:01] <dalek> MoarVM: free filename

[02:01] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/166595c4d0

[02:04] *** jnap joined
[02:08] <diakopter> JimmyZ++

[02:11] *** sorear joined
[02:30] *** jnap joined
[02:57] *** FROGGS[mobile] joined
[04:20] *** cognominal joined
[04:22] *** jnap joined
[05:10] *** FROGGS joined
[05:23] *** jnap joined
[07:02] *** FROGGS[mobile] joined
[07:15] *** cognominal joined
[07:24] *** jnap joined
[07:52] *** FROGGS joined
[08:25] *** jnap joined
[08:26] *** FROGGS[mobile] joined
[08:35] <FROGGS> I can build rakudo using -O3 again, but I get the following after compiling the setting:

[08:35] <FROGGS> ./perl6-m --target=mbc --output=lib/Test.moarvm lib/Test.pm

[08:35] <FROGGS> Cannot find method 'at_key': no method cache and no .^find_method

[08:37] <FROGGS> here is the bt: https://gist.github.com/FROGGS/ec70de48a665888135cf

[08:55] *** odc joined
[09:26] *** jnap joined
[09:56] <nwc10> slow testing is slow.

[09:56] <nwc10> still not quite sure why one thing blew up with SIGBUS, but ran it overnight in gdb to find out why and it didn't

[09:56] <nwc10> not sure if that's "I'm running in gb"

[09:56] *** FROGGS[mobile] joined
[09:57] <nwc10> or simply that I updated the moar binary underneath the previous one, and actually Linux doesn't like that

[10:16] <FROGGS> nwc10: I had that too the it worked fine under gdb but segfaulted otherwise

[10:18] <nwc10> this was SIGBUS. That's unusual. Usually means that the C stack is exhausted

[10:26] *** jnap joined
[10:28] <jnthn> oh hai o/

[10:28] <FROGGS> hai jnthn

[10:28] <FROGGS> I hope you got some sleep :/

[10:30] <jnthn> Some. Worked out better than the night before, at least...

[10:31] <jnthn> diakopter: Can I steal back the continuation bit now? :)

[11:03] <diakopter> yah

[11:03] <diakopter> (he says to the past) :)

[11:27] *** jnap joined
[12:28] *** jnap joined
[13:13] *** V_S_C joined
[13:24] <[Coke]> jnthn: you'll be happy today.

[13:25] <jnthn> [Coke]: oh? :)

[13:25] <[Coke]> did a run overnight to test changes to the daily test suite.

[13:26] <[Coke]> (which should make it run slightly faster)

[13:26] <[Coke]> (and caught some changes to rakudo.moar)

[13:29] *** jnap joined
[13:31] <jnthn> Did we come to some conclusion on the 01-qregex.t failure in NQP?

[13:31] <jnthn> iiuc, "Unicode changed"

[13:32] <jnthn> Does this suggest the test should also change to match latest?

[13:38] <diakopter> it's hard to be more black and white than non-whitespace versus whitespace

[13:38] <diakopter> (I say this not knowing whether the character has any markings)

[13:39] <nwc10> gah. the filesystem on the machine hosting my e-mail has hung

[13:39] <nwc10> in that, ssh connections onwards from it are still trucking

[13:44] <FROGGS> jnthn: about the qregex fail, I asked about that here on channel...

[13:44] <FROGGS> jnthn: the fix would be to strip that from a \s+ test, but this vowel separator still got matched by \h, and I don't know if that is right or not

[13:46] <dalek> MoarVM: 110400d | (Tobias Leich)++ | src/6model/reprs/P6 (2 files):

[13:46] <dalek> MoarVM: strip redundent checks for int/num bit size, jnthn++

[13:46] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/110400d55d

[13:47] <diakopter> FROGGS: re "right" it'll be hard to "fix" that if it's wrong, since all the unicode stuff is completely autogenerated from spec.

[13:47] <diakopter> well.

[13:47] <diakopter> need to be careful with each of those last 4 words

[13:48] <diakopter> "completely" "autogenerated" "from" "spec"

[13:48] <diakopter> thar I fixed it

[13:49] <masak> :P

[13:49] <diakopter> "careful"

[13:49] <diakopter> "4"

[13:50] <masak> "words"

[13:50] <masak> "fixed"

[13:50] <diakopter> *gigglefit*

[13:50] <FROGGS> diakopter: I just want to get an answer to my question before I make tests pass that might are not supposed to

[13:50] * masak beats diakopter repeatedly with a goose feather

[13:50] <diakopter> hopefully not a planet-sized goose feather

[13:51] * FROGGS .oO( ... 6 geese a laying ... )

[13:51] <masak> it's not even goose-sized!

[13:51] <diakopter> 5 golden eggs

[13:52] <FROGGS> :o)

[14:01] <[Coke]> I think the tests need to know which version of unicode we're working with.

[14:02] <[Coke]> does perl 6 have a setting somewhere that indicates which unicode we mean?

[14:02] <[Coke]> (could then key the tests off that.)

[14:11] <FROGGS> [Coke]: I believe that this is either specced or was at loast discussed some day on #perl6

[14:11] <FROGGS> I think TimToady++ even wanted to let the user choose the unicode version

[14:13] <[Coke]> I don't know about choose, but at least figure out what they've got.

[14:13] <jnthn> I can imagine doing something like this in spectest, but the NQP tests exist to check you have a working NQP rather than checking if it has exhaustive unicode support..

[14:14] <[Coke]> jnthn: mmm.

[14:16] <FROGGS> the situation is still that we fail tests in nqp and in roast about MVS not being whitespace anymore and I don't know if it is correct to only adjust the failing test

[14:22] <jnthn> in roast - not sure. In NQP, I don't think our whitespace matching tests are trying all the possible whitespace chars. They're just trying a handful to see if things seem reasonably correct. If one of the handfull we'd picked was not MVS, we'd not have the issue.

[14:23] <jnthn> So for the purposes of the NQP tests, just not using this character, which is unstable over Unicode versions, seems fair enough.

[14:24] <FROGGS> k

[14:28] <nwc10> jesse wanted Perl 5 to offer the choice of Unicode version based on the Perl (5) version it was delivering

[14:28] <nwc10> but the internals of Perl 5 are so not set up to offer more than one Unicode variant

[14:28] <nwc10> let alone the SMOP that we don't even have *one* working bug free

[14:28] <nwc10> Perl 6 stands a much better chance of this

[14:29] <nwc10> but, walk before attempting running

[14:29] <diakopter> nwc10: ok, but bug-free is just something without a bug tracker or submission form

[14:30] <diakopter> actually it can have a submission form :)

[14:31] <jnthn> That doesn't mean it's bug free, it's just bug report free. :P

[14:32] <nwc10> you didn't ask for advice, but here goes...

[14:32] <nwc10> track current Unicode only, until 1.0

[14:33] <nwc10> then, if it's level 3 conformant (or whatever the maxed out is called), and only then consider whether it's viable to spread out and offer more than one.

[14:33] <FROGGS> I don't have an application where I'd need to choose a unicode version, but I guess this could become interesting within the next decade or so

[14:33] <diakopter> I was making the point that there aren't any bugs until there are bug reports, and there are always spurious ug reports

[14:33] <nwc10> and manybe by then the Unicode consortium will have worked out what /(s)(s)/i is supposed to capture

[14:33] <jnthn> nwc10: +1

[14:33] * FROGGS reports a diakopter spello report :P

[14:34] * diakopter files a rug beport

[14:35] <diakopter> nwc10: sgtm

[14:37] <FROGGS> bbiab

[14:39] *** jnap joined
[15:41] <dalek> MoarVM: 4120d32 | jnthn++ | src/ (8 files):

[15:41] <dalek> MoarVM: First crack at continuationcontrol.

[15:41] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4120d322fc

[15:42] <[Coke]> moarvm already running!

[15:43] *** FROGGS joined
[15:46] *** grondilu joined
[16:11] <dalek> MoarVM: accb7ba | jnthn++ | src/ (5 files):

[16:11] <dalek> MoarVM: First crack at continuationinvoke.

[16:11] <dalek> MoarVM:

[16:11] <dalek> MoarVM: Works for a single invocation of the continuation.

[16:11] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/accb7baa45

[16:11] <jnthn> Pass 8 out of 22 so far.

[16:11] <diakopter> :)

[16:14] <diakopter> jnthn: the root is just a cache?

[16:14] <diakopter> er, shortcut?

[16:15] <jnthn> diakopter: Mostly so we can tweak caller appropriately on it.

[16:17] <diakopter> jnthn: I can't remember what we decided on whether a frame could be resumed on a different thread from its original

[16:17] <jnthn> diakopter: For what I'm doing right now, no, but we can revisit it.

[16:18] <jnthn> Walk first, then run... :)

[16:18] <diakopter> mostly I meant b/c I didn't see a check in there for that yet

[16:18] <jnthn> Aye

[16:19] <diakopter> I just noticed every time you alter tc->cur_frame you don't decrement the refcount, implying you're assuing you'll definiteliy switch back to it eventually.. but what if you don't

[16:20] <jnthn> We'll leak

[16:20] <diakopter> decrement the refcount of what was there before I mean

[16:20] <jnthn> Yeah, that needs doing

[16:20] <diakopter> I think it's safe to do that, since you're incrementing it when you refer to it from the the continuation object

[16:21] <jnthn> Trying to figure out why the second invocation doesn't work out at the moment...

[16:21] <diakopter> frame marked return?

[16:21] <diakopter> returned?

[16:22] <jnthn> Oh, maybe something along those lines...

[16:22] <diakopter> I was hoping that stab in the dark was approximately close...

[16:24] <jnthn> heh, cute bug :)

[16:24] <diakopter> doodlebug?

[16:26] <jnthn> If we're really lucky, it's an easy fix.

[16:33] <jnthn> ah, it isn't that simple, though a quick workaround to check it is what you suggsted gets us passing 1..18

[16:34] <diakopter> \o/

[16:38] <FROGGS> hmmm, I still got that:

[16:38] <FROGGS> ./perl6-m --target=mbc --output=lib/Test.moarvm lib/Test.pm

[16:38] <FROGGS> Cannot find method 'at_key': no method cache and no .^find_method

[16:38] <FROGGS> is that expected?

[16:38] <diakopter> did you realclean and reconfigure?

[16:38] <FROGGS> reconfigure yes, realclean no

[16:40] <FROGGS> I am going to try -O1

[16:42] <dalek> MoarVM: 69396d3 | jnthn++ | src/core/ (3 files):

[16:42] <dalek> MoarVM: Unbust re-use of continuations.

[16:42] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/69396d3d91

[16:43] <jnthn> OK, 4 tests to go. Probably the hardest 4 by an order of magnitude...

[16:43] <FROGGS> only 4?

[16:45] <jnthn> There's 22 continuation tests, we pass 18 so far

[16:45] <diakopter> jnthn: did you see I added it to t\moar in nqp?

[16:51] <FROGGS> hmm, now it builds again

[16:52] <diakopter> yeah :( should've asked you to save a copy of the whole tree to do a diff

[16:52] <diakopter> so we can identify the missing makefile dependencies

[16:55] <FROGGS> I don't think there is a diff in makefile deps

[16:58] <diakopter> I mean in the generated files

[16:58] <diakopter> there must've been a diff somewhere

[16:59] <FROGGS> hmmm

[16:59] <FROGGS> either that or moar does weird stuff at runtime using -O3

[17:06] <dalek> MoarVM: 77a07de | jnthn++ | src/core/continuation.c:

[17:06] <dalek> MoarVM: Be more careful from frame refcounts; diakopter++.

[17:06] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/77a07dee8c

[17:19] <dalek> MoarVM: ac9b2aa | jnthn++ | src/core/continuation.c:

[17:19] <dalek> MoarVM: Fix off-by-one in root frame.

[17:19] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ac9b2aa405

[17:20] <jnthn> OK, so at this point 19 blows up 'cus continuationclone is NYI

[17:20] <jnthn> And n-queens callcc example fails for an unknown reason (just gets wrong answer)

[17:21] <jnthn> But the final two tests ("gather example works" and "take from handler works") pass

[17:21] <FROGGS> yay! :o)

[17:22] <jnthn> I'll get the callcc one is broken 'cus I didn't get protect right yet, and it's the only thing that depends on it.

[17:22] <jnthn> *bet

[17:31] <diakopter> remind me what protect is

[17:31] <jnthn> Leaves reset in place, so the handler can replace the continuation

[17:38] <FROGGS> I still don't get it:

[17:38] <FROGGS> perl6-m -e 'use Test; nok 0 ~~ 1, ""'  # ok 1 -

[17:38] <FROGGS> perl6-m -e 'use Test; nok 0 ~~ 1, "a"' # not ok 1 - a

[17:38] <FROGGS> brb

[17:39] <timotimo> diakopter: were you able to find out why the unicode tests are all failing?

[17:40] <diakopter> I didn't know any were failing

[17:40] <diakopter> timotimo: since I upgraded it to 6.3?

[17:40] <jnthn> diakopter: Lots of char prop tests in Rakudo on Moar fail, but nothing worked at all before you did the upgrade, etc. :)

[17:41] <jnthn> diakopter: But there's lots of passing tests to be had if you fancy looking into it.

[17:41] <timotimo> ah, ok

[17:41] <timotimo> but yeah, after the upgrade i believe.

[17:41] <diakopter> timotimo: I also added the thing where it uses the u1name if the main name is blank or <control>

[17:43] <diakopter> (which is more than perl5, which doesn't use the u1name if the main name is blank, but does if it's <control>)

[17:43] <diakopter> nwc10: ^

[17:43] <diakopter> (but I noticed there were some with u1names but blank main names)

[17:43] <diakopter> (inexplicably)

[17:58] <timotimo> so, what can the continuation implementation do so far?

[17:59] <timotimo> or rather: what do i have to run to play with something/anything?

[18:03] <dalek> MoarVM: 490df17 | jnthn++ | src/core/ (5 files):

[18:03] <dalek> MoarVM: First pass at continuationclone.

[18:03] <dalek> MoarVM:

[18:03] <dalek> MoarVM: Doesn't pass the test that depends on it yet, sadly.

[18:03] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/490df17769

[18:05] <jnthn> timotimo: Just grab, configure and build latest Moar and NQP, and do make test

[18:05] <jnthn> You should see that t\moar/01-continuations.t fails 19 and 20, but passes the rest of the file

[18:06] *** V_S_C joined
[18:06] <timotimo> all right

[18:09] <V_S_C> I just built nqp-cc

[18:09] <V_S_C> Should I put the make test/nqptest results in a gist or someplace?

[18:09] <timotimo> t/moar/01-continuations.t ............. Failed 2/22 subtests   - \o/

[18:10] <timotimo> nqp-cc isn't necessary any more, it's not been touched in a long time

[18:10] <timotimo> no clue if it's still going to work

[18:12] <V_S_C> I just followed the readme on github

[18:12] <timotimo> oh, let me go over the readme and fix the outdatedness

[18:12] <timotimo> the moar port has moved crazy fast

[18:13] <V_S_C> & made adjustments for Win64 on my own whenever I got stuck

[18:13] <timotimo> er, what repository and branch are you on?

[18:13] <V_S_C> okay, how do I use moar?

[18:13] <timotimo> oh, it's in moarvm, not in nqp

[18:13] <timotimo> duh :)

[18:13] <V_S_C> default master, I guess

[18:13] <timotimo> grab yourself a checkout of nqp and perl Configure.pm --backend=moar --prefix=the_same_prefix_you_used_in_moarvm_configure

[18:14] <V_S_C> okies :) thnx

[18:14] <timotimo> if you want to have a rakudo, too, check out the moar-support branch

[18:14] <FROGGS> V_S_C: the best thing you can do is to get rakudo, checkout moar-support branch, and do: perl Configure.pl --backend=moar --gen-nqp=master --gen-moar=master

[18:15] <V_S_C> yes I'll do that.

[18:15] <timotimo> should i remove the nqp-cc folder from git at the same time as updating the readme?

[18:15] <timotimo> i'd strike the whole nqp-cc section from the readme

[18:15] <FROGGS> this will build rakudo, nqp and moar

[18:15] <timotimo> and if you need the nqp-cc you can always grab it from the history

[18:18] <jnthn> timotimo: Yes, we can toss the nqp-cc directory now too

[18:18] <jnthn> timotimo: Its useful life has expired.

[18:18] <[Coke]> r: say 26576 / 28453

[18:18] <camelia> rakudo-parrot 8a486a, rakudo-jvm 8a486a: OUTPUT«0.934032␤»

[18:18] <V_S_C> FROGGS: I'll do it & be back with update. thnx. :)

[18:19] *** V_S_C left
[18:20] * [Coke] kicks off the 'borts run.

[18:21] * [Coke] uploads http://feather.perl6.nl/~coke/moar.out for folks until the daily run completes.

[18:25] <dalek> MoarVM: 8561e23 | (Timo Paulssen)++ | / (173 files):

[18:25] <dalek> MoarVM: toss the nqp-cc and update the REAMDE.

[18:25] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8561e2362f

[18:27] *** jnap joined
[18:27] <[Coke]> Ah. looks like "Killed" is actually more common that I thought. Fixing the script...

[18:34] * timotimo puts a die into the GatherIter implementation to get a number of tests that rely on GatherIter and are currently using the cheating implementation

[18:38] <timotimo> that just causes tests to infiniloop

[18:41] * timotimo grabs cokes ulimit'd perl6-m

[18:43] <[Coke]> \o/

[18:49] <timotimo> hum. the time limit doesn't seem to want to kill this test run

[18:52] <FROGGS> jnthn: can you give a hint where I could start looking into this?

[18:52] <FROGGS> perl6-m -e 'sub ok(*@a) { say @a.perl }; ok (0 ~~ 1), "1"' # Array.new("1", "1")

[18:52] <FROGGS> perl6-m -e 'sub ok(*@a) { say @a.perl }; ok (0 ~~ 1), "0"' # Array.new("0", "0")

[18:54] <FROGGS> hmm, that smart match result should print False btw

[18:57] <[Coke]> timotimo: something os specific, meb?

[18:57] <[Coke]> FROGGS: https://gist.github.com/coke/8250608 updated.

[18:57] <benabik> FROGGS: Well, it also seems to be giving you a string instead of a boolean.

[18:57] <[Coke]> largest cause of test failures appears to be "slowness". :)

[18:58] <FROGGS> benabik: exactly, odd is that 0 ~~ 1 alone gives a boolean

[18:58] <FROGGS> [Coke]: thank you!

[18:58] <benabik> FROGGS: Looks like a binder problem to me.

[18:58] <FROGGS> that was my guess too

[18:58] <benabik> FROGGS: Still get it using distinct vars instead of a slurpy array?

[18:59] <FROGGS> benabik: it is the same with two vars

[19:00] <benabik> That is not the answer I expected, I will admit.

[19:00] <FROGGS> :o)

[19:01] <[Coke]> one of the Infiloops is just: '$*VM.perl'

[19:01] <FROGGS> I guess the way we construct the ast for a smartmatch brings this up

[19:01] <FROGGS> (my problem, not the infiniloop)

[19:02] <timotimo> i can see somet,hing

[19:02] <timotimo> there's a $cur_pos_arg that doesn't seem to get ++'d anywhere

[19:03] <timotimo> oh, wrong

[19:03] <FROGGS> ohh

[19:03] <FROGGS> :/

[19:03] <timotimo> that's only if there's a |capture parameter

[19:03] <FROGGS> timotimo: where are you looking ooc?

[19:03] <[Coke]> here's another infiloop:

[19:04] <[Coke]> 'my @a=(1..Inf); @a[1..10002] = @a[9..10010]'

[19:05] <timotimo> Perl6/Metamodel/BOOTSTRAP.nqp

[19:09] <[Coke]> r: my @a=(1..Inf); @a[1..10002] = @a[9..10010];

[19:09] <camelia> rakudo-jvm 8a486a: ( no output )

[19:09] <camelia> ..rakudo-parrot 8a486a: OUTPUT«(timeout)»

[19:10] <[Coke]> go jvm!

[19:11] <[Coke]> so that's just a delay. I guess I should consider opening up the timer a bit for moarvm.

[19:14] <[Coke]> (done, will let it go for 3m instead of 1.5 on tomorrow's run)

[19:39] *** ssutch joined
[19:42] <jnthn> Turns out that gather/take using the continuations doesn't quite work out...

[19:44] * jnthn finally got it down to a small test case

[19:54] <FROGGS> humm, locallifetime breaks it

[20:01] <FROGGS> haha!

[20:01] <FROGGS> a single letter!

[20:02] <jnthn> FROGGS: Hm, I thought we didn't do anything with locallifetime on Moar so far...

[20:02] <FROGGS> a bloody single letter!

[20:02] <jnthn> FROGGS: What'd you find?

[20:02] <FROGGS> jnthn: and that kinda is the problem

[20:02] <jnthn> I think I figured out the continuations bug :)

[20:02] <FROGGS> for the smart match, we give it a qast::stmt, and two other vars, one is the result var

[20:02] <FROGGS> for parrot and more we just hand over the stmt to .as_mast

[20:03] <FROGGS> should be a QAST::Stmts instead, ehh? :o)

[20:03] <FROGGS> either that, or .as_mast should do something better with a QAST::Stmt

[20:04] <jnthn> Well, QAST::Stmt is a hint about temporaries and their lifetime.

[20:04] <FROGGS> but but...

[20:04] <FROGGS> is it supposed to return a value?

[20:04] <jnthn> Yes

[20:04] <FROGGS> meh

[20:04] <FROGGS> :(

[20:04] <jnthn> ooh, I just got gather.t to pass

[20:05] <FROGGS> \o/

[20:05] <FROGGS> jnthn++

[20:05] <jnthn> well, with the one skip that is skipped on every backend.

[20:05] * FROGGS takes a look at .as_mast

[20:05] <jnthn> Well, lemme try a spectest before we get too excited... :)

[20:05] <FROGGS> sure

[20:06] <[Coke]> jnthn++

[20:10] <dalek> MoarVM: 14b36bd | jnthn++ | src/ (3 files):

[20:10] <dalek> MoarVM: Fix interaction of continuations and handlers.

[20:10] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/14b36bd962

[20:10] <FROGGS> a spectest within five minutes?

[20:11] <jnthn> no, the spectest is for pushing the Rakudo switch to use continuations for gather/take

[22:19] <jnthn> nwc10: Don't suppose you had a moment to dig up the OSX patch?

[22:19] <nwc10> no, sorry, somewhat chaotic still

[22:19] <jnthn> ok, np

[22:20] <nwc10> and in bed but really should be asleep

[23:06] *** cognominal joined
[23:09] <[Coke]> rakudo.moar,2014-01-08,93.40%,9a340b1,26576,1750,603,1440,30368,28495,

[23:13] *** ssutch joined
[23:29] *** krunen joined
