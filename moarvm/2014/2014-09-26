[00:59] *** FROGGS_ joined
[02:00] *** FROGGS__ joined
[02:11] *** vendethiel joined
[04:14] *** colomon joined
[05:38] *** ggoebel2 joined
[06:28] *** d4l3k_ joined
[06:59] *** brrt joined
[07:06] *** FROGGS joined
[08:31] *** kjs_ joined
[08:33] *** daxim joined
[09:02] *** kjs_ joined
[10:19] *** brrt left
[11:13] *** colomon joined
[12:32] *** lue joined
[12:50] *** cognome joined
[13:41] <jnthn> evening, #moarvm

[13:41] <timotimo> hello jnthn!

[13:43] <FROGGS> hello jnthn!

[13:44] *** cognome joined
[13:45] <timotimo> jnthn: did you comment on brrt's idea on making calling/frame allocation "optimistic by default"?

[13:46] <jnthn> "Too soon" is my gut feeling on that

[13:46] <jnthn> I think we should not consider it until after getting rid of the current remaining pesky inline bug(s?), and figuring out how escape analysis will be.

[13:47] <timotimo> OK

[13:47] <timotimo> i just had no intuition on how big the impact would be and how much effort it'd take to implement

[13:48] <jnthn> Mostly I'm just wanting to make sure we take care of stability along with performance.

[13:48] <nwc10> jnthn++

[13:48] <PerlJam> in the profiler output for routines, does "entries" mean how many times it was called?

[13:48] <jnthn> PerlJam: Yes, with a caveat.

[13:48] <nwc10> stability matters

[13:49] <jnthn> PerlJam: Well, 2. First off, it includes calls that were inlined (but I think it tells you the percentage there)

[13:50] <jnthn> PerlJam: Second, continuations being taken count as stack frames being left, and continuations being invoked count as stack frames being re-entered.

[13:50] <jnthn> PerlJam: This means the timings are accurate (good), but may distort the counts (less bad than bogus timing data).

[13:51] <PerlJam> ok

[13:51] <jnthn> Anyway, I've seen a few too many SIGSEGV and malloc errors for my liking of late, and I'm keen for us to squelch those.

[13:53] <jnthn> It's maybe not as fun as performance work, but "does everything fast, including segfault" isn't really a reputation I want. :)

[13:53] <PerlJam> jnthn++ indeed

[13:53] <nwc10> me too (to see them squelched), although I'm not really sure I'm part of the "we" which will do the hard work to acchieve this

[13:53] <nwc10> nah.

[13:54] <nwc10> not a great repuation

[13:55] <timotimo> i'm way too short-sighted to consider stability over performance. i'm a bad, bad engineer :)

[13:56] <nwc10> performance gives you enough marketing to attract folks to try it out

[13:57] <nwc10> lack of stability kills your ability to retain them

[13:57] <PerlJam> timotimo: Are you a parrot contributor?

[13:57] <nwc10> ultimately what matters is having an ecosystem

[13:57] * PerlJam ducks

[13:57] <nwc10> and you only get that by growinging it over time

[13:57] <nwc10> meaning that you need to retain enough users that they build re-usable stuff

[13:57] <timotimo> i didn't realize parrot was more performant than it was stable ...

[13:58] <nwc10> chromatic did a fantastic job of fixing instabilities

[13:58] <PerlJam> timotimo: it probably isn't, but that's the type of design decision that led it to where it is today IMHO

[13:58] <nwc10> no-one ever thanked him enough for that

[13:58] <jnthn> I don't think instability was really Parrot's issue

[13:59] <jnthn> Or at least, there were far more significant ones.

[14:00] <jnthn> nwc10: Yes, that's probably the main reason why stability was better than many other aspects.

[14:00] <FROGGS> our current problems are certainly not Parrot's faults

[14:00] <FROGGS> I have no proof of any regression caused by upgrading parrot

[14:01] <FROGGS> though we might discover bugs that exist for years now that we fiddle with rakudo's guts moar and moar

[14:03] <jnthn> FROGGS: I don't think anybody was suggesting they were.

[14:04] <timotimo> hmm

[14:04] <jnthn> Anyway, my point was that performance isn't the only goal we should be keeping in mind. :)

[14:04] <FROGGS> just wanted to state that parrot is actually pretty stable...

[14:05] <FROGGS> jnthn: that's why I try to unbreak stuff from time to time :o)

[14:05] <jnthn> FROGGS: Yes, which I appreciate. :-)

[14:05] <FROGGS> :o)

[14:06] <jnthn> FROGGS: Though at some point we may want to try and figure out how much of our userbase uses each backend.

[14:07] * FROGGS somehow fears that moment...

[14:07] <FROGGS> but I can't explain why

[14:09] <PerlJam> perhaps the fear stems from just identifying the userbase?  :)

[14:09] <FROGGS> *g*

[14:36] * [Coke] ponders porting GD to p6 via nativecall.

[14:36] <[Coke]> "ok, we have 5 people using parrot, and 20 using moar."

[14:37] <[Coke]> "also, I may have rounded up slightly"

[14:44] <timotimo> %)

[14:44] <timotimo> don't we have a gd nativecall module on the ecosystem already?

[14:44] <timotimo> if so, you can probably get a jump start with that

[14:48] <[Coke]> that's nice! now to pick a bigger one and see if that magically appears!

[14:50] <FROGGS> :P

[14:50] <timotimo> :D

[14:51] <[Coke]> S26 has sample pod6 that is rendered as:

[14:51] <[Coke]> B<=begin pod>

[14:53] <[Coke]> Compiling lib/NativeCall.pm6 to mbc

[14:53] <[Coke]> ===SORRY!===

[14:53] <[Coke]> No registered operation handler for 'nativecallglobal'

[14:53] <[Coke]> build stage failed for NativeCall: Failed building lib/NativeCall.pm6

[14:53] <[Coke]> ^^ panda install GD pulls in nativecall which dies.

[14:53] <timotimo> yeah, too new nativecall for not new enough rakudo

[14:53] <[Coke]> roger.

[14:55] <FROGGS> [Coke]: you can checkout 2014.08 in zavolaj

[14:57] <[Coke]> using panda?

[14:57] <FROGGS> no :/

[14:59] *** brrt joined
[15:35] *** kjs_ joined
[15:49] <japhb> FROGGS: Weren't you working on versioning support in Panda some time ago?  Or am I dreaming that?

[15:53] <japhb> jnthn: Two thumbs way up for a stability push.  The performance improvements have been enough that right now my biggest blocker to evangelism is crashes (from both r-m and r-j) when doing threading/async stuff.  I don't want Rakudo to get a black eye on what I consider one of its strongest selling points.  But I also don't have a background debugging threading in a VM ....  :-/

[15:55] <jnthn> japhb: Much of what's needed for such debugging is a good bit of patience and persistence...and thus it needs a lot of free and undisturbed time.

[15:56] <jnthn> japhb: Which I've not really had much of recenlty.

[15:57] <japhb> Nodnod, totally understood.  $day_job and all that.  Me too.

[15:57] *** FROGGS joined
[15:58] <jnthn> Yeah. But I'm a copule of working days of being finished with the current very-energy-consuming assignment :)

[15:58] <jnthn> *off

[15:59] <timotimo> sounds good :)

[16:00] <timotimo> jnthn: would we ever end up inlining something like the argument to a map call into the map routine's body?

[16:00] <timotimo> in spesh, i mean

[16:00] <jnthn> timotimo: map doesn't do anything really

[16:01] <jnthn> timotimo: It makes a MapIter and returns it

[16:01] <jnthn> So that's not where you'd end up inlining.

[16:01] <jnthn> At the moment spesh can't do a whole lot with map, sadly.

[16:01] <jnthn> Inlinability will, I magine, be once of the design forces on the GLR we discuss in Salzburg :)

[16:02] <timotimo> that'd be pretty cool

[16:02] <jnthn> *imagine, *one

[16:21] <japhb> When are you meeting in Salzburg?

[16:22] <japhb> (Happy to hear energy-consuming assignment is nearing the end.  Hope it was a great success.  :-)

[16:25] <nwc10> japhb: http://act.useperl.at/apw2014/schedule?day=2014-10-12 and http://act.useperl.at/apw2014/schedule?day=2014-10-13

[16:29] <FROGGS> japhb: correct, which is still in a branch and/or on my disk

[16:29] <japhb> Does no good sitting there on your disk!  :-)

[16:30] <FROGGS> japhb: I can already fetch stuff from cpan and/or github with my version of panda, there is just a small issue:

[16:30] <FROGGS> it does not work on windows, and it does not work on 32bit machines

[16:30] <japhb> nwc10: Thanks

[16:31] <FROGGS> because it needs like ten more dependencies like gzip support and HTTP::UserAgent, and these are not yet portable

[16:31] <[Coke]> ufo is segfaulting

[16:31] <japhb> HTTP::UserAgent isn't portable?  That seems like an odd thing to be platform-dependent

[16:31] <japhb> Oh, because of SSL?

[16:32] <FROGGS> for example, yes

[16:32] <japhb> hmmm

[16:32] <FROGGS> so... to fix all these things we have to get NativeCall wokring reliable on x86, and we may need pure Perl 6 version of gzip

[16:32] * [Coke] opens a ufo ticket.

[16:34] * japhb adds to his resource wishlist: 32-bit VMs for those who no longer have access to earlier hardware

[16:35] <FROGGS> japhb: when I think about it... Compress::Zlib might be the only blocker right now

[16:36] <FROGGS> japhb: virtual machines also do

[16:36] <japhb> Who owns that one?

[16:36] <japhb> "virtual machines also do"?

[16:38] <FROGGS> hmm?

[16:38] <FROGGS> I wanted to say that you don't need a 32bit hardware when you can have a virtualbox

[16:43] <[Coke]> any idea where to find "load_ext" under $*VM these days?

[16:44] * [Coke] has a horrible idea:

[16:44] <[Coke]> r: say $*VM.config<load_ext>

[16:45] <camelia> rakudo-moar 85c4c0: OUTPUT«(Any)␤»

[16:45] <camelia> ..rakudo-parrot 85c4c0: OUTPUT«(timeout)»

[16:45] <camelia> ..rakudo-jvm 85c4c0: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[16:45] <[Coke]> does that work under parrot?

[16:45] <FROGGS> what is load_ext meant to be?

[16:45] <moritz> .so vs .dll, iirc

[16:46] <FROGGS> m: say $*VM.precomp-ext

[16:46] <camelia> rakudo-moar 85c4c0: OUTPUT«moarvm␤»

[16:46] <FROGGS> in case it is this...

[16:46] <FROGGS> for dll extension I'd look at NativeCall

[16:47] <[Coke]> ... oh. yah, nativecall makes this obsolete now, I think. thanks.

[16:48] <FROGGS> Bitte :o)

[16:48] <[Coke]> FROGGS++

[16:54] <[Coke]> yay, GD fixed.

[16:55] <[Coke]> looks like someone else submitted a patch for one of the issues back on Jun 10

[16:55] <[Coke]> we should probably change the modules version to point elsewhere, I guess.

[16:56] <[Coke]> or talk it about it, anyway

[16:56] <[Coke]> ... also, this was probably all meant for #perl6

[16:59] *** vendethiel joined
[17:04] <FROGGS> [Coke]: yes, I've got two other PR's open for mrhdias

[17:10] *** colomon joined
[17:52] *** colomon joined
[18:11] <[Coke]> Do we have a cabal that can rule on "do we take a fork as the main repo in modules" ?

[18:12] <japhb> [Coke]: Didn't TimToady have some rules he wanted to follow regarding setting default auth[or[ity]?]?

[18:18] <timotimo> [Coke]: everyone with access to the perl6/ecosystem repository can do that

[18:20] <japhb> timotimo: If I'm reading his question correctly, it was more of a "What's the Right Thing in terms of community practice?" rather than "Who has ACL permissions to make the change?"

[18:21] <timotimo> oh

[18:39] *** FROGGS_ joined
[18:56] <[Coke]> japhb++ yes.

[18:56] <[Coke]> I would say no response on an ecosystem module since June == "ok to point to a fork."

[19:06] <FROGGS> +1

[19:07] <FROGGS> [Coke]: I've opened two PR on 27th February

[19:07] <FROGGS> https://github.com/mrhdias/perl6-IUP/pulls and https://github.com/mrhdias/perl6-Imlib2/pulls

[19:58] *** Ven joined
[19:59] *** colomon joined
[20:14] *** njmurphy joined
[21:16] *** Ven joined
[22:47] <dalek> MoarVM: 2949416 | (Geoffrey Broadwell)++ | docs/moar.pod:

[22:47] <dalek> MoarVM: Another typo fix

[22:47] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2949416369

[23:38] *** nebuchadnezzar joined
