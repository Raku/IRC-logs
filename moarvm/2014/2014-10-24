[00:12] *** daxim joined
[02:48] *** colomon joined
[04:46] *** ggoebel111111110 joined
[05:50] *** avuserow joined
[06:13] *** garyaj joined
[07:00] *** PerlJam joined
[07:00] *** retupmoca joined
[07:00] *** odc joined
[07:00] *** leedo joined
[07:00] *** nine_ joined
[07:10] *** btyler_ joined
[07:32] *** nine_ joined
[07:32] *** leedo joined
[07:32] *** retupmoca joined
[07:32] *** btyler_ joined
[07:37] *** PerlJam joined
[07:37] *** odc joined
[07:37] *** FROGGS joined
[07:40] *** retupmoca joined
[07:40] *** leedo joined
[07:40] *** nine_ joined
[08:33] *** zakharyas joined
[09:06] *** kjs_ joined
[09:48] *** brrt joined
[09:49] <brrt> please somebody remind me to blog for moar one of these days (after the weekend)

[09:53] *** avuserow joined
[09:53] *** ggoebel111111110 joined
[09:53] *** japhb joined
[09:53] *** cxreg joined
[09:53] *** lue joined
[09:56] *** retupmoca joined
[09:56] *** leedo joined
[09:56] *** nine_ joined
[09:56] *** cxreg joined
[09:58] *** nebuchadnezzar joined
[09:58] *** [Coke] joined
[12:12] *** JimmyZ joined
[12:30] <JimmyZ> masak: ping?

[12:34] <masak> JimmyZ: pong

[12:35] *** kjs_ joined
[13:49] <[Coke]> seen in today's moar non-jit run:

[13:49] <[Coke]> S32-hash/delete-adverb.t...........................moar(34011,0x7fff7bce2310) malloc: *** error for object 0x7f8954e56840: pointer being freed was not allocated

[13:49] <[Coke]> *** set a breakpoint in malloc_error_break to debug

[13:49] <[Coke]> sh: line 1: 34011 Abort trap: 6           nice -20 ./perl6-m t/spec/S32-hash/del

[13:49] <[Coke]> OSX.

[13:56] <[Coke]> Looks like that's the only fail on non-jit, but it cost 131 tests.

[14:15] <brrt> [Coke] - are there jit-specific fails?

[14:15] <brrt> i kind of need to know about them :-)

[14:15] <brrt> also [Coke]++ for testing

[14:15] <timotimo> brrt: how much have you looked at nativecall_invoke yet?

[14:16] <timotimo> i'm asking just because i'd like to begin turning native call invocations into jitted stuff by using the jgb_append_call_c function

[14:17] <brrt> i have not looked at it at all

[14:17] <timotimo> OK

[14:17] <brrt> where... is that stuff

[14:17] <brrt> :-)

[14:17] <timotimo> so i'm not going to be trampling on previous work without knowing :)

[14:17] <brrt> is that a new op?

[14:17] <timotimo> nativecall.c is in core/ i think

[14:17] <brrt> oh

[14:17] <brrt> i'll look

[14:18] <timotimo> it's called nativecallinvoke actually

[14:18] <timotimo> i think it'll be enough if i just look at it and ask specific questions directly, so you can focus on other stuff

[14:23] <[Coke]> brrt: the JIT-specific failures are here when they are posted:

[14:23] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/log/rakudo.moar-jit_summary.out

[14:23] <brrt> thanks

[14:23] <brrt> timotimo: good idea :-)

[14:24] <[Coke]> today? no failures on JIT. non-JIT is the problem.

[14:24] <brrt> [Coke] - this is on which platform?

[14:24] <brrt> hmm

[14:24] <brrt> seems like flappiness

[14:24] <brrt> JIT is rather unlikely to do something right that was done wrong by the interpreter

[14:24] <[Coke]> (but yesterday, S32-hash/delete-adverb.t had the failure non-jit had today; sounds like a flapper)

[14:24] <brrt> yeah i agree

[14:24] <[Coke]> brrt: right now is OS X. historically, it was linux.

[14:25] <timotimo> brrt: have you considered building fast-paths for big integer arithmetic in the cases where both operands are stored as "small big ints"?

[14:25] * timotimo is AFK for a bit

[14:25] <brrt> considered, yes, but i don't know if you can prove that they will always be fast paths

[14:25] <brrt> and you're going to end up testing-and-jumping for the case they are not

[14:26] <brrt> i can do that, and it will probably help a bit, but I don't know if the JIT is the right level for it

[14:26] <brrt> (of course the JIT should do it one day or another)

[14:26] <brrt> s/day/way/

[14:27] <brrt> I'm going to see if i can repeat those tests. we don't nearly have enough os-x based devs :-)

[14:30] <brrt> clang-is-so-damn-slow

[14:32] *** lizmat joined
[14:48] <timotimo> brrt: yeah, i expect that you'd have to test-and-branch

[14:49] <brrt> hmmm

[14:49] <brrt> i'll be able to work on this in a week or so (hopefully)

[14:50] <timotimo> neat (even though arguments would be more pressing or something like that)

[15:02] <brrt> :-)

[15:02] <brrt> yeah i know i know

[15:02] <brrt> :-)

[15:02] <timotimo> sorry for nagging you about that all the time :P

[15:03] *** odc left
[15:04] <kjs_> re Mac OS devs: is there a “press this once” button to run tests? I’m happy to test now and again, but no time to develop

[15:04] <timotimo> a simple script could be built using rakudobrew for building a fresh rakudo and then run the spec tests

[15:05] <brrt> aye

[15:05] <brrt> rakudobrew would be a good place to put that

[15:05] <timotimo> ah, yes

[15:05] <timotimo> rakudobrew test moar

[15:05] <timotimo> OSLT

[15:06] <brrt> get to it

[15:06] <timotimo> and then we could have a reporter

[15:06] <brrt> or 'well volunteered'

[15:06] <brrt> :-)

[15:06] <brrt> i'm going to weekend

[15:06] <timotimo> haha

[15:06] <timotimo> have fun brrt

[15:25] * TimToady wonders if it would make more sense in some cases to just attempt the op and then branch on overflow, if it can be detected

[15:26] <timotimo> we'd still have to check if the storage type is a "proper" bigint already or if it's a smallbigint

[15:35] <JimmyZ> Isn't life simpler if there is Int class and BigInt Class :P

[15:37] <TimToady> not for the user

[15:37] <JimmyZ> aye

[15:38] <timotimo> wouldn't it be easier to have a regular string that does the stringy stuff and a unicode string type that you use when you want to do unicody stuff? :P

[15:38] * timotimo AFK

[15:39] <TimToady> in any case, the design of P6 assumes that people will write int64 or so when they want raw speed

[15:41] * JimmyZ agrees it

[15:41] <TimToady> or have some pragma that says "use Int int64;"

[15:41] <JimmyZ> constant Int = int64 :P

[15:41] <TimToady> we'll need jnthn's N refactor first

[15:42] <TimToady> "constant Int" will not necessarily switch the policy of using big integers for intermediate results

[15:43] <JimmyZ> I saw constant utf8 = Blob[...] in the core setting

[15:44] <TimToady> though I suppose we could say that if you redefined Int to be a native type, it magically assumes that you want that for intermediate results as well

[15:45] <TimToady> but it might be wise to have a separate declaration for such semantic bending

[15:46] <TimToady> then there's the folks who will want "constant Int = num"

[15:46] <JimmyZ> yeah, I saw constant buf8 = Buf[uint8]; there

[15:47] <TimToady> .oO(constant Int = complex)

[15:47] <JimmyZ> :P

[15:49] <TimToady> some people may actually think they want constant Num = Complex

[15:50] <TimToady> though it's probably sufficient to redefine sqrt to always return complex

[15:50] <[Coke]> we need something like smolder to record test runs.

[15:51] * [Coke] is reminded to get back to trying to get spectest runs into jenkins.

[15:53] <JimmyZ> Good night ...

[15:54] *** lue joined
[16:04] *** Guest1419 joined
[16:26] *** FROGGS joined
[16:55] *** colomon joined
[17:36] *** kjs_ joined
[17:51] *** FROGGS joined
[21:26] *** woolfy1 joined
[21:27] *** lizmat_ joined
[22:43] *** japhb joined
[22:43] *** avuserow joined
[22:46] <dalek> MoarVM/closefhi: 8d9f84a | (Tobias Leich)++ | / (14 files):

[22:46] <dalek> MoarVM/closefhi: implement nqp::closefhi which retuns the exit code of a pipe

[22:46] <dalek> MoarVM/closefhi:

[22:46] <dalek> MoarVM/closefhi: nqp::openpipe returns a file handle one can read from, but since such an

[22:46] <dalek> MoarVM/closefhi: opened pipe is actually a spawned process we also need its exit code to

[22:46] <dalek> MoarVM/closefhi: know if it run cleanly. Use nqp::closefhi on such a file handle if you

[22:46] <dalek> MoarVM/closefhi: are interested in the exit code, nqp::closefh if you are not.

[22:46] <dalek> MoarVM/closefhi: review: https://github.com/MoarVM/MoarVM/commit/8d9f84a818

[22:48] *** ggoebel111111110 joined
