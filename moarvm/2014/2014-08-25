[01:20] *** FROGGS_ joined
[05:57] *** avuserow joined
[06:24] *** avuserow joined
[06:55] *** lizmat_ joined
[06:57] *** woolfy joined
[07:11] <sergot> o/

[07:33] <FROGGS> o/

[07:39] *** woolfy1 joined
[07:54] *** kjs_ joined
[08:04] *** brrt joined
[08:06] <brrt> ok, interesting bug by tgt

[08:06] <brrt> it's not sensitive to JIT-ting, so that is a thing

[08:08] <timotimo> something about handlers not getting merged properly perhaps?

[08:13] <brrt> ehm.... d'you think?

[08:14] <brrt> i think it has something to do with the magic $_ lexical

[08:14] <brrt> (duh)

[08:14] <brrt> i mean to say

[08:14] <brrt> i don't know how default {} is actually implemented

[08:26] <timotimo> --target=ast and --target=optimize are your friends

[08:26] * timotimo will be afk for a long bit

[08:27] <brrt> oh, yes

[08:27] <brrt> and the spesh log of course :-)

[08:32] <brrt> in other, better news, /me finally had an epiphany on how to use the SSA form to aid with register assignment and allocation

[08:32] <brrt> also known as 'why phi nodes are cool'

[08:49] <timotimo> sounds good :)

[08:52] <brrt> basically, phi nodes form the constraints from which values can come? i think that's the way i'd like to put it, and i'm not sure that i'm correct about it

[08:53] <brrt> but that means that if you can ensure that both the 'sides' of the phi node use the same register for the same value, you can keep the value in a CPU register

[08:54] <brrt> so that seems like a tractable problem

[08:54] <brrt> has jnthn landed ok, btw?

[08:58] <lismat> I think jnthn should be somewhere on the ground now

[08:58] <lismat> his flight left from Sofia 14 hours ago or so

[08:59] * brrt wonders if there is a way we could set spesh logging only for the actual script and not for the compiler

[08:59] <brrt> hmm yeah

[08:59] <lismat> even for a lexical scope would be nice

[08:59] <lismat> would help in the profiler as well

[08:59] <brrt> did you know he had to fly with an actual propeller plane for the last pace of his journey?

[09:00] <lismat> wouldn't be surprised....  turboprops are very efficient, though loud

[09:00] <brrt> hmm yeah, but i'm not about to design a DSL for logging options on a monday morning :-)

[09:00] <brrt> hmm

[09:00] <brrt> i hadn't thought of them as efficient

[09:00] <brrt> i thought of them as 'scary'

[09:00] <lismat> in the late 80's I used to take a turboprop for the last 200 km from Chicago to Champaign Urbane

[09:01] <brrt> you're still in sofia, though, right?

[09:01] <lismat> most of those planes can fly *without* engines

[09:01] <lismat> yup, still in Sofia

[09:01] <lismat> plane leaves in ~ 18 hours

[09:01] <lismat> not sure how many of those we'll be sleeping

[09:02] <brrt> or should i say СОФИА

[09:02] <brrt> :-)

[09:02] <lismat> we're with 13 people now in our room... :-)

[09:02] <brrt> 13 people? all perl folks?

[09:02] <timotimo> brrt: maybe we could introduce ops like speshlogenter and speshlogexit and have them control when spesh should start loggin and when it should stop

[09:03] <timotimo> (well, the stopping part is probably not that important)

[09:03] <timotimo> that way we'll cut a good chunk of the startup specialization

[09:03] <brrt> hmm

[09:03] <brrt> yeah, i'd still suspect some times you want those logging

[09:03] <timotimo> in that case you just don't supply the flag that turns that on

[09:03] <timotimo> it'd be similar to --profile

[09:03] <brrt> virtualbox y u always one release behind the kernel

[09:04] <brrt> hmm

[09:04] <brrt> anyway, not designing a DSL for logging on a monday morning just yet

[09:04] <brrt> just thinking it'd be cool

[09:04] <timotimo> yeah :)

[09:05] <timotimo> it'd be nice if the spesh log would output at least the first line number annotation

[09:05] <timotimo> so that corellating stuff to code would be easier if you have a big pile of speshlog to search through and you get 100 different '' named entries :)

[09:05] <brrt> that is not so simple to acquire fwiw

[09:05] * brrt nods

[09:05] <brrt> anyway, afk for a bit

[09:06] <timotimo> OK

[09:06] *** brrt left
[09:19] *** kjs_ joined
[09:23] <lismat> tell brrt yes, all perl folks

[09:25] <lismat> having a programmatic spesh on/off switch could also be useful once we have official releases

[09:25] <lismat> and it turns out an official release has a bug, and the only way around it would be to switch off spesh

[09:25] <lismat> but then the program would run a lot slower

[09:25] <lismat> being able to switch spesh off selectively could then be a good workaround for some class of problems

[09:28] *** zakharyas joined
[09:28] <timotimo> we were actually talking only about spesh log output so far

[09:40] *** kjs_ joined
[09:45] *** woolfy joined
[09:52] *** zakharyas1 joined
[09:54] *** zakharyas joined
[10:02] *** ggoebel11111117 joined
[10:18] *** kjs_ left
[10:26] *** Ven joined
[10:55] *** kjs_ joined
[10:55] <kjs_> 6

[11:08] *** woolfy joined
[11:27] *** Ven joined
[12:15] *** Ven joined
[12:28] *** kjs_ joined
[12:31] *** jnap joined
[12:36] *** lizmat joined
[13:20] *** mj41 joined
[13:23] <mj41> Hi. Very nicely done  http://www.brendangregg.com/Perf/linux_observability_tools.png ( http://www.brendangregg.com/linuxperf.html ).

[13:24] <cognome> I don't know if there exists the same for modern versions of Solaris.

[14:24] *** woosley joined
[14:30] *** flussenc1 joined
[14:31] *** Juerd_ joined
[14:31] *** lee__ joined
[14:32] *** bcode joined
[14:35] *** flussence joined
[14:35] *** synopsebot joined
[14:37] <[Coke]> ... I should ask the guy I know who works on oracle/sun HA stuff if we can get a test login somewhere. :|

[14:49] *** bcode_ joined
[14:51] *** synopsebot joined
[15:17] *** brrt joined
[15:19] <brrt> timotimo: i'm fine with extending programmatic control to speshing

[15:22] <brrt> but... i'm wondering about how to do that exactly

[15:22] <brrt> i'm not sure if perl6 has some standard interface to the compiler

[15:22] <brrt> (it should have, if you ask me. python has it.)

[15:24] <brrt> lizmat: how'd your talk go?

[15:24] <brrt> same question to jnthn, if he's here

[15:26] <nwc10> hopefully jnthn is in bed, because that would mean that he's finished travelling

[15:27] <brrt> we could also implement a not-speshed trait, i think, which would default to nop on other platforms than moarvm

[16:30] <brrt> yay, new wingolog: http://wingolog.org/archives/2014/08/25/revisiting-common-subexpression-elimination-in-guile

[16:30] *** mj41 joined
[16:50] *** zakharyas joined
[16:53] <brrt> i'm all alone here and not sufficiently motivated to do real bugfixing :-(

[16:54] <lizmat> hi brrt

[16:54] <brrt> hi brrt :-)

[16:54] <brrt> how'd your talk go

[16:54] <lizmat> back again from errands and afk and stuff

[16:54] <brrt> hi lizmat

[16:54] <brrt> oh i'm dumb

[16:54] <lizmat> my talk was *way* too shirt

[16:54] <lizmat> *short rather

[16:55] <lizmat> so it also was a Q&A for about 20 mins

[16:55] <lizmat> and then I let them go for an early lunch

[16:55] <brrt> :-)

[16:55] <brrt> any idea when the videos will be posted?

[16:56] <lizmat> matter of weeks

[16:56] <brrt> i see

[16:56] <brrt> did you get to see jnthn's talk?

[16:57] <lizmat> yes...

[16:57] <brrt> how was it?

[16:57] <lizmat> it was very nice to see it making thumbnails and uploading them all at the same time

[16:57] <brrt> oh, yes, i recall now

[16:57] <lizmat> although I feel we need a better way for throttling work load

[16:57] <brrt> hmm

[16:58] <lizmat> perhaps some sugar...

[16:58] <brrt> is the code online somewhere that i could see?

[16:58] <lizmat> the slides are not posted yet, afaik

[16:58] <brrt> ugh, github has changed again

[16:59] *** tgt joined
[17:00] <brrt> i'm with timotimo basically that the spesh log could really use file and line number annotations

[17:00] <brrt> so that will be my first project tonight

[17:01] <lizmat> ++brrt

[17:01] <lizmat> afk mostly again&

[17:02] <brrt> yeah, dinner &

[17:02] <brrt> have fun in sofia :-)

[17:03] *** brrt left
[17:05] *** lizmat_ joined
[17:46] *** brrt joined
[17:46] <timotimo> brrt: jnthn actually posted the slides: http://jnthn.net/papers/2014-yapceu-async.pdf

[17:49] <brrt> ooh very nice

[17:52] *** Ven joined
[18:05] <cognome> jnthn++

[18:11] *** Ven joined
[18:12] *** zakharyas joined
[18:18] <[Coke]> running under a high load on OS X, t/spec/S03-operators/subscript-adverbs.t died with no TAP output

[18:19] <[Coke]> runs fine standalone.

[18:29] <brrt> hmm? that's weird

[18:29] <brrt> maybe malloc failed and we died

[18:29] <brrt> i can imagine that happening

[18:31] * lizmat suspects .WHICH breakage

[18:34] <brrt> hmm what's .WHICH ?

[18:34] <brrt> oh

[18:34] <brrt> i know

[18:36] <lizmat> hehe...  that what is now partially an address...

[18:45] *** kjs_ joined
[18:47] <brrt> oh, that thingy

[18:47] <brrt> i recall that discussion

[18:47] <brrt> that is ... a pain

[18:47] <brrt> there may be some nice ways arround it, though

[18:48] * brrt bbiab

[18:49] *** zakharyas1 joined
[19:10] *** kjs_ joined
[19:14] *** woolfy joined
[19:41] *** Ven joined
[19:52] *** kjs_ joined
[20:01] *** woolfy left
[20:08] *** kjs__ joined
[20:08] *** zakharyas joined
[20:10] *** brrt joined
[20:17] *** bcode joined
[20:49] <dalek> MoarVM: a246bbd | (Bart Wiegmans)++ | src/spesh/dump.c:

[20:49] <dalek> MoarVM: Add filename to spesh log

[20:49] <dalek> MoarVM:

[20:49] <dalek> MoarVM: This allows us to correlate spesh frames with source code

[20:49] <dalek> MoarVM: hopefully a bit easier

[20:49] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a246bbd726

[20:54] <dalek> MoarVM: 2966c01 | (Bart Wiegmans)++ | src/spesh/dump.c:

[20:54] <dalek> MoarVM: Don't leak memory when dumping the filename info

[20:54] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2966c01cc1

[20:55] *** brrt left
[21:11] <tgt> m: Int but False

[21:11] <camelia> rakudo-moar c793d8: OUTPUT«(signal )»

[21:43] *** jnap joined
[21:53] <lizmat> tgt: confirmed locally

[21:54] <lizmat> r: Int but False

[21:54] <camelia> rakudo-{parrot,jvm} c793d8: ( no output )

[21:54] <camelia> ..rakudo-moar c793d8: OUTPUT«(signal )»

[21:54] <tgt> m: Int.clone()

[21:54] <camelia> rakudo-moar c793d8: OUTPUT«(signal )»

[21:55] <lizmat> $ MVM_SPESH_DISABLE=1 6 'Int but False'

[21:55] <lizmat> Segmentation fault: 11

[21:55] <lizmat> so appears to not be spesh related

[22:02] <tgt> Where are nqp:: ops implemented? Specifically looking for nqp::clone

[22:02] *** daxim_ joined
[22:02] <hoelzro> tgt: you can find the mappings in the nqp repo

[22:02] <hoelzro> src/vm/moar/QASTMoarMappings or something

[22:02] * hoelzro looks

[22:02] *** kjs_ joined
[22:03] <hoelzro> src/vm/moar/QAST/QASTOperationsMAST.nqp

[22:03] <hoelzro> QAST::MASTOperations.add_core_moarop_mapping('clone', 'clone', :decont(0));

[22:03] <hoelzro> so it binds directly to the Moar clone instruction (which it pretty typical)

[22:05] *** tgt_ joined
[22:06] *** ggoebel11111118 joined
[22:06] <hoelzro> and Moar ops are impld' in src/core/interp.c

[22:06] <hoelzro> clone starts on line 2558

[22:07] <tgt_> Thanks hoelzro

[22:07] <hoelzro> np

[22:08] <tgt_> So does that correspond to MVM_OP_clone? Or some other clone?

[22:08] <hoelzro> I believe that's it

[22:08] <hoelzro> I've just gotten used to searching for OP(clone) in src/core/interp.c

[22:16] <tgt_> Well, that's not something I can understand without spending some time with moarvm.

[22:16] *** btyler joined
[22:17] <hoelzro> it takes a bit of time, yes =)

[22:17] <hoelzro> but that's where you start

[22:17] <tgt_> :)

[22:18] <tgt_> Any suggestion about where to start? Are there docs?

[22:18] <hoelzro> I think there are some in the repo

[22:18] <hoelzro> I'm a beginner with Moar myself

[22:26] <tgt_> Yup, found them. Thanks.

[22:26] <tgt_> Is there a way to get perl6-m to print a stacktrace?

[22:27] <hoelzro> tgt_: a native stack trace, or a Moar one?

[22:28] <tgt_> Uh. What do you mean?

[22:32] *** tgt joined
