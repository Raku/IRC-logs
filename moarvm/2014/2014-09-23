[01:05] *** FROGGS_ joined
[03:20] *** bcode joined
[05:55] *** camelia joined
[06:18] *** colomon joined
[07:04] *** zakharyas joined
[07:05] *** FROGGS joined
[07:18] *** kjs__ joined
[08:13] *** kjs__ joined
[08:20] *** brrt joined
[08:50] *** kjs__ joined
[10:29] <jnthn> RPA wasn't sparse by default. The big thing QRPA manages better is shift, which it turns out is important in the current list model (not to mention various common idioms folks might write)

[10:57] *** itz_ joined
[11:25] <timotimo> is the sparseness thing very problematic?

[11:30] *** leont joined
[11:53] *** itz joined
[11:58] *** itz_ joined
[12:14] *** brrt joined
[12:24] <[Coke]> not unless we want to support sparse arrays, I imagine.

[12:35] *** ggoebel joined
[14:12] *** vendethiel- joined
[14:12] *** itz joined
[14:19] *** vendethiel joined
[14:30] <hoelzro> FROGGS: I tried debugging the ModuleLoader a bit (regarding that lazy deserialization issue I found), but that didn't reveal much

[14:30] <FROGGS> :/

[14:30] <FROGGS> that's sad

[14:30] <hoelzro> and I don't understand MoarVM well enough to be able to make sense of jnthn's commit =/

[14:31] <jnthn> hoelzro: I understand my commit, kinda...but I struggle a little more on why it changed things the way you're seeing.

[14:31] <hoelzro> I'm wondering if it would be ok if we added an env var that turned off lazy deserialization for now

[14:31] <hoelzro> =(

[14:31] <hoelzro> then we're doomed!

[14:32] <hoelzro> DOOOOOOMED

[14:32] *** FROGGS[mobile] joined
[14:32] <hoelzro> while we're doomed, anyone mind if I add such a flag?

[14:32] <hoelzro> (assuming I can figure out how)

[14:32] <tadzik> FROGGS: come back, it's not that bad!

[14:34] <FROGGS[mobile]> *g*

[14:36] <jnthn> hoelzro: What is odd about it is that if anything is repossessed, we already should not be trying to lazily deserialize those things

[14:36] <jnthn> hoelzro: As in, I put in code that should be handling the case that appears problematic...

[14:37] <hoelzro> eesh

[14:38] <hoelzro> it's almost like when the second module is loaded, the WHO for Example is being replaced by a clean slate

[14:38] <hoelzro> but I've checked, and that remains the same

[14:39] <hoelzro> but I'm wondering if some structure deeper down that does the actual containing within the WHO is being replaced

[14:39] <jnthn> If you put in such a flag, then one thing to try is what resolve_repossessions gets with and without it in the Perl 6 module loader

[14:43] <hoelzro> alright

[14:43] <hoelzro> I guess the silver lining here is I get to learn how module loading works =P

[14:44] <jnthn> Thankfully, module loading is mostly quite boring compared to the serializer :)

[14:44] <jnthn> There were some notes on it in the internals course, iirc

[14:45] <hoelzro> I should review those, then

[14:55] *** FROGGS joined
[17:33] *** FROGGS joined
[17:48] *** brrt joined
[17:55] *** kjs_ joined
[18:29] *** dalek joined
[19:38] <nwc10> jnthn: flapping ASAN barfage for t/spec/S17-procasync/print.rakudo.moar -- http://paste.scsys.co.uk/425134

[19:38] <nwc10> not sure when this started, or how to golf it

[19:40] <lizmat> nwc10: maybe as soon as I wrote the test?  which is not too long ago?

[19:40] <nwc10> lizmat: that would be a reasonable answer. :-/

[19:41] <nwc10> I'm afraid that I don't have anything useful to add, and that I'm about to disappear off to bed

[19:41] <lizmat> well, I think the barfage is correct, as that test flaps as hell

[19:41] <lizmat> so I wouldn't be surprised if the ASAN flapping is in sync

[19:42] <lizmat> good night, nwc10!

[20:09] *** brrt joined
[20:13] *** kjs_ joined
[20:18] *** brrt joined
[20:29] *** Ven joined
[21:48] *** kjs_ joined
[21:59] *** brrt joined
[22:04] *** brrt left
[22:13] *** kjs_ joined
[22:31] *** kjs_ joined
