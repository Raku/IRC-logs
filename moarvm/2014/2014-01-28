[02:16] *** colomon joined
[03:44] *** cognominal joined
[04:32] *** jnap joined
[04:43] *** krunen joined
[07:11] *** FROGGS joined
[08:20] *** sorear joined
[08:21] *** woolfy joined
[08:57] *** odc joined
[10:01] *** FROGGS joined
[11:58] *** krunen joined
[12:00] *** FROGGS joined
[14:26] *** jnap joined
[15:21] *** frankbutt joined
[15:21] *** frankbutt left
[15:51] *** krunen joined
[16:50] *** FROGGS joined
[17:24] *** FROGGS joined
[18:13] *** tgt joined
[18:16] *** benabik joined
[18:41] *** jnap joined
[19:30] <diakopter> nwc10: patch looks good to me

[19:32] <FROGGS> nwc++

[19:32] <FROGGS> nwc10++

[19:46] <timotimo> so who has measured the speedup?

[19:48] <nwc10> me, just once and once, on a multi user machine, for the setting

[19:49] <nwc10> specifically, not the spectests

[19:49] <nwc10> and not startup time

[19:50] <timotimo> right.

[19:50] <timotimo> so nobody did it properly

[19:50] <timotimo> let me do it, then :)

[19:53] * timotimo builds all the backends for nqp

[19:55] *** tgt joined
[20:02] <timotimo> first timing with your patch: Stage parse      :  44.563 Stage mast       :  20.349

[20:03] <nwc10> I'm assuming that the setting compilation has an awful lot of gen2. Atypically high

[20:03] <nwc10> so will be the best-case win

[20:03] <timotimo> maybe.

[20:03] <timotimo> i'll run spectests afterwards

[20:04] <timotimo> Stage parse      :  44.670 Stage mast       :  20.307

[20:05] <timotimo> one more, then i'll undo the patch and run those again

[20:05] <timotimo> actually, i should probably directly run a spectest

[20:05] <timotimo> since that won't need any extra recompilation

[20:06] <timotimo> Stage parse      :  44.742 Stage mast       :  20.439

[20:08] <timotimo> unfortunately the spectests still take a while :P

[20:09] <timotimo> ah, i already reached S32

[20:09] <timotimo> there's kind of a double hump there :P

[20:10] <timotimo> TEST_JOBS=4 make m-spectest  771,24s user 30,92s system 373% cpu 3:34,72 total

[20:10] <timotimo> unfortunately i didn't get the maxresidentk for some reason :o

[20:10] <nwc10> I doubt that that will change

[20:10] <timotimo> Files=777, Tests=29654, 205 wallclock secs ( 4.97 usr  0.78 sys + 762.92 cusr 28.87 csys = 797.54 CPU)

[20:11] <timotimo> ISTR that was quite a bit more the last time i tried

[20:11] <timotimo> doing a second run nw.

[20:11] <timotimo> and then i'll do measurements without your patch

[20:14] <timotimo> Files=777, Tests=29654, 206 wallclock secs ( 4.94 usr  0.76 sys + 763.32 cusr 29.49 csys = 798.51 CPU)

[20:15] <timotimo> TEST_JOBS=4 make m-spectest  770,69s user 31,34s system 377% cpu 3:32,50 total

[20:15] <timotimo> so that's not very unstable

[20:16] <nwc10> is sometimes slower for me, but I don't know what else is running on the machine

[20:16] <nwc10> seems nothing now I look again

[20:16] <timotimo> Stage parse      :  44.971  Stage mast       :  20.451

[20:17] <nwc10> OK, I got better than that :-(

[20:17] <nwc10> but it *is* in the right direction.

[20:17] <timotimo> that's slower than both my previous measurements for stage parse, but no change for stage mast

[20:17] <timotimo> i suppose things in stage mast will die very young?

[20:17] <nwc10> I don't know enough to be sure

[20:18] <timotimo> Stage parse      :  44.775  Stage mast       :  20.669

[20:18] <nwc10> I'm also building with -Og, so not maxing out gcc's optmiser, so I might get better speedups than real optimsed runs

[20:18] <timotimo> i'm using -O1

[20:19] <timotimo> Stage parse      :  45.013  Stage mast       :  20.571

[20:19] <timotimo> so it's a little bit better, but not much

[20:20] <nwc10> OK. :-/

[20:20] <nwc10> but it's in the right direction.

[20:25] <timotimo> Files=777, Tests=29654, 205 wallclock secs ( 4.97 usr  0.77 sys + 761.93 cusr 29.87 csys = 797.54 CPU)

[20:25] <timotimo> TEST_JOBS=4 make m-spectest  771,09s user 31,94s system 358% cpu 3:44,21 total

[20:25] <timotimo> i see much less cpu percentage

[20:25] <timotimo> but more time all in all?

[20:25] <timotimo> i'll have to re-run that at least once.

[20:28] <timotimo> er, wait

[20:28] <timotimo> i looked the wrong way around of course

[20:28] <timotimo> your change gave a noticable win, actually

[20:29] <timotimo> better cpu utilisation and 12 seconds less run time

[20:29] <timotimo> second run coming up

[20:29] <nwc10> let's hope that the second run agrees

[20:29] <timotimo> Files=777, Tests=29654, 205 wallclock secs ( 4.94 usr  0.72 sys + 761.93 cusr 29.62 csys = 797.21 CPU)

[20:29] <timotimo> TEST_JOBS=4 make m-spectest  769,11s user 31,57s system 377% cpu 3:32,16 total

[20:30] <timotimo> so the wallclock seconds seem to be the same

[20:36] <timotimo> nwc10: still, good catch!

[20:37] <timotimo> 0.19user 0.03system 0:00.23elapsed 98%CPU (0avgtext+0avgdata 97668maxresident)k ‚Üê without patch

[20:37] <timotimo> (perl6-m -e 'say 1')

[20:37] <timotimo> 0.20user 0.02system 0:00.22elapsed 98%CPU (0avgtext+0avgdata 97892maxresident)k

[20:37] <timotimo> with your patch

[20:38] <timotimo> unfortunately it's very noisy at that level, so i'd say there's no change there

[20:38] <diakopter> heh

[20:41] *** FROGGS joined
[20:41] <timotimo> well, the startup time being way too small is a *good* problem to have :D

[21:27] <dalek> MoarVM/small_big_ints: 482343c | (Timo Paulssen)++ | src/math/smallbigintsupport. (2 files):

[21:27] <dalek> MoarVM/small_big_ints: use MVMObject in smallbigintsupport.

[21:27] <dalek> MoarVM/small_big_ints: review: https://github.com/MoarVM/MoarVM/commit/482343cc70

[21:27] <dalek> MoarVM/small_big_ints: cc17337 | (Timo Paulssen)++ | src/ (4 files):

[21:27] <dalek> MoarVM/small_big_ints: saner (but still not very sane) bigint coercion in ops

[21:27] <dalek> MoarVM/small_big_ints: review: https://github.com/MoarVM/MoarVM/commit/cc17337794

[21:36] <dalek> MoarVM/small_big_ints: 449ad14 | (Timo Paulssen)++ | src/math/bigintops.c:

[21:36] <dalek> MoarVM/small_big_ints: this may be wrong, but it gets us further

[21:36] <dalek> MoarVM/small_big_ints:

[21:36] <dalek> MoarVM/small_big_ints: i think i'll have to get the data back into

[21:36] <dalek> MoarVM/small_big_ints: the bigint object at some point?

[21:36] <dalek> MoarVM/small_big_ints: review: https://github.com/MoarVM/MoarVM/commit/449ad14a0f

[21:36] <timotimo> i think i need another rethink of this :p

[21:48] <hoelzro> hehe, small big ints...

[21:48] <timotimo> you're not the first ... :)

[23:23] *** tgt joined
[23:40] *** lizmat joined
[23:52] *** benabik joined
