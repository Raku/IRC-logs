[02:02] *** jnap joined
[02:32] *** FROGGS_ joined
[02:45] *** jnap joined
[03:34] *** jnap joined
[09:10] *** colomon joined
[09:55] *** tgt joined
[12:23] *** mj41 joined
[12:37] *** FROGGS joined
[15:25] *** benabik joined
[16:41] *** shipwright joined
[19:23] *** tgt joined
[19:25] *** pmurias joined
[20:08] <FROGGS> jnthn: there seems to be a bug that triggers "Cannot invoke null object"

[20:08] <FROGGS> it happens when doing the following

[20:09] <FROGGS> 1) module Foo has a my scoped hash with an element and an our sub that just return the value of that element by key

[20:09] <FROGGS> 2) module Bar uses Foo

[20:09] <FROGGS> 3) you use Bar

[20:10] <FROGGS> the problem only appears when the modules are precompiled

[20:11] <FROGGS> and when it is about a hash, a my scoped variable just works fine

[20:12] <FROGGS> ohh, an array exposes this bug also, when return element 0 for example

[20:12] <FROGGS> here code is NULL: MVMObject * MVM_frame_find_invokee(MVMThreadContext *tc, MVMObject *code, MVMCallsite **tweak_cs)

[20:14] <FROGGS> the problem seems to be within the precompiled module Bar

[20:15] <FROGGS> ahh, I forgot to mention, Bar call that our scopes sub

[20:16] <FROGGS> and now I wonder what it is about...

[20:16] <FROGGS> is the invoke_o where the second arg is NULL about call the our scoped sub? or is that something within that sub?

[20:17] <FROGGS> like calling atkey/atpos

[20:23] <FROGGS> okay, it seems to be about atkey/atpos, because return the array just works

[20:25] <FROGGS> hmmm, using nqp::atkey instead doing it perl6ish works...

[20:32] *** tgt joined
[20:35] *** benabik joined
[21:39] *** tgt joined
