[01:49] *** rurban_ joined
[03:23] *** ggoebel11119 joined
[07:40] *** lizmat joined
[07:40] *** woolfy joined
[08:07] *** woolfy left
[08:13] *** brrt joined
[08:35] *** cognominal joined
[09:42] *** brrt joined
[10:44] *** brrt joined
[10:47] *** vendethiel joined
[11:21] <dalek> MoarVM: 695fdf9 | jnthn++ | src/ (5 files):

[11:21] <dalek> MoarVM: Improve the VM exit strategy.

[11:21] <dalek> MoarVM:

[11:21] <dalek> MoarVM: It now doesn't try to do all the cleanup work by default, instead

[11:21] <dalek> MoarVM: leaving it to the OS, which can no doubt do it faster. There is now

[11:21] <dalek> MoarVM: a --full-cleanup flag for requesting full cleanup, however. In either

[11:21] <dalek> MoarVM: case, special effort to gracefully join foreground threads is made,

[11:21] <dalek> MoarVM: so "Thread.start({ sleep 1; say 'bye' }); say 'hi'" in Perl 6 will now

[11:21] <dalek> MoarVM: output hi\nbye\n reliably (and passing :app_lifetime will not show the

[11:21] <dalek> MoarVM: bye\n, and seems to exit cleanly too provided --full-cleanup isn't

[11:21] <dalek> MoarVM: passed).

[11:21] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/695fdf9a3d

[11:53] *** lizmat joined
[12:49] *** woolfy joined
[13:05] *** brrt left
[13:13] *** benabik joined
[13:26] *** vendethiel joined
[14:46] <dalek> MoarVM: 9a61eb6 | jnthn++ | src/core/interp.c:

[14:46] <dalek> MoarVM: Unbreak CGOTO compilation.

[14:46] <dalek> MoarVM:

[14:46] <dalek> MoarVM: It can't cope with ops in oplist but having no stub in interp.c.

[14:46] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9a61eb6547

[14:59] *** colomon joined
[15:50] *** brrt joined
[16:10] *** benabik joined
[17:05] *** benabik joined
[17:38] <dalek> MoarVM: c7c18ec | jnthn++ | src/ (4 files):

[17:38] <dalek> MoarVM: Correctly handle temp roots stack in callbacks.

[17:38] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c7c18ec5c2

[18:16] *** brrt left
[18:53] *** zakharyas joined
[19:21] *** btyler joined
[19:51] *** zakharyas joined
[20:24] *** zakharyas1 joined
[20:27] *** colomon joined
[20:52] *** zakharyas1 joined
[20:58] *** timo joined
[21:14] *** zakharyas joined
[21:56] *** masak joined
[22:06] *** zakharyas joined
[22:08] *** woolfy joined
[22:29] <retupmoca> jnthn: how do I see if an MVMObject is a perl6 role?

[22:29] <retupmoca> (I...think that's what I need?)

[22:30] <retupmoca> I'm looking for a TypedArray role I think

[22:31] <jnthn> With difficulty in C land...

[22:31] <jnthn> You can tell if it's a type object at least.

[22:32] <jnthn> (See flags)

[22:32] *** benabik joined
[22:32] <jnthn> Can also see the REPR name (will likely be P6opaque)

[22:33] <retupmoca> yeah, I found the REPR name

[22:33] <retupmoca> P6opaque

[22:34] <jnthn> One other trick is taking the "static" off dump_backtrace and then inserting a call to it in some interesting place to see where you are code-wise.

[23:08] <retupmoca> jnthn: how is repossession of something like TypedArray[Str] supposed to work? The typed role doesn't exist until something uses TypedArray

[23:08] <retupmoca> and I think that's why it's breaking

[23:10] <retupmoca> man, perl6 at the C level is confusing
