[00:00] *** lizmat joined
[00:53] *** colomon joined
[01:30] *** lizmat joined
[01:36] *** vendethiel joined
[02:26] *** vendethiel joined
[02:45] <dalek> MoarVM: 05b25a6 | (Rob Hoelz)++ | src/6model/serialization.c:

[02:45] <dalek> MoarVM: Eagerly deserialize stables/objects

[02:45] <dalek> MoarVM:

[02:45] <dalek> MoarVM: There was a problem (RT #122773, GH #142) when diamond relationships

[02:45] <dalek> MoarVM: between precompiled modules happened in a program, where parts of

[02:45] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122773

[02:45] <dalek> MoarVM: a namespace could mysteriously disappear.  Until the root cause of

[02:45] <dalek> MoarVM: this problem is found, let's just eagerly deserialize all stables

[02:45] <dalek> MoarVM: and objects in a serialization context

[02:45] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/05b25a6359

[07:48] *** FROGGS joined
[07:49] *** brrt joined
[08:32] <brrt> \o

[09:13] *** kjs_ joined
[10:17] *** kjs_ joined
[10:23] *** daxim joined
[10:29] *** kjs_ joined
[10:30] <lizmat> hoelzro: seems your diamond fix now makes one test in t/spec/S10-packages/precompilation.t fail: 7

[10:30] <lizmat> nor does it make the todo pass :-(

[10:30] <lizmat> not ok 7 - Diamond relationship

[10:30] <lizmat> not ok 8 - precompile exported cached sub# TODO RT #122896

[10:30] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122896

[10:38] <moritz> tests++

[10:49] <FROGGS> lizmat: did we already bump the moar+nqp revision? and/or are you using moar HEAD?

[10:52] <lizmat> ah, good point  :-)

[10:52] <lizmat> hmmm... then maybe it is timotimo's change that breaks that test

[10:52] <lizmat> (not using HEAD)

[10:53] <lizmat> I just read hoelzro's commit, and saw a new error with the word "diamond" in it

[10:53] <lizmat> *also in it

[10:53] <lizmat> and just linked the two without further thinking

[10:54] <lizmat> will check without timotimo's patch

[10:56] <lizmat> not timotimo's patch

[11:05] <lizmat> doesn't appear to be just a simple commit breaking this test  :-(

[11:05] * lizmat gives up for now

[11:12] <FROGGS> lizmat:

[11:12] <FROGGS> perl6 t/spec/S10-packages/precompilation.t

[11:12] <FROGGS> # error: /bin/sh: 1: ./perl6: not found

[11:12] <FROGGS> not ok 7 - Diamond relationship

[11:12] <FROGGS> but:

[11:12] <FROGGS> perl6-m t/spec/S10-packages/precompilation.t

[11:12] <FROGGS> ok 7 - Diamond relationship

[11:12] <FROGGS> and test 8 segfaults here

[11:14] <FROGGS> (but it is todo'd, which should work out)

[11:17] <FROGGS> Test::Util uses $*EXECUTABLE_NAME when it should use $*EXECUTABLE

[11:50] *** bcode joined
[12:02] *** woolfy1 joined
[12:52] *** woolfy1 left
[12:59] <hoelzro> the spectests passed for me last night

[12:59] <hoelzro> I did, however, neglect to bump the moar revision in NQP

[13:01] <nwc10> I'm getting everything passing at master/master/nom

[13:02] <lizmat> and what about timing?   master/master seems 15% slower in spectest, probably due to raw startup time going up from .21 to .34

[13:03] <lizmat> feels to me some laziness was sacrificed, resulting in much larger startup time

[13:05] *** woolfy joined
[13:15] <FROGGS> yes, the patch to moarvm did exactly that, remove a (buggy) laziness

[13:17] <hoelzro> exactly

[13:17] <hoelzro> Moar is now a little less lazy and a little slower to start up, at the cost of loading precompiled modules correctly

[13:25] <lizmat> and there was me worrying about adding an extra .01 to startup time :-(

[13:28] <hoelzro> if the underlying problem could be figured out, we could restore the laziness

[13:28] <hoelzro> I don't think the problem itself is in the deserialization code, though

[13:33] <timotimo> at first i thought what's wrong with my patch must be that it doesn't know about decont, but decont should never survive after a boxing instruction

[14:15] *** daxim joined
[14:41] *** JimmyZ joined
[14:41] <JimmyZ> hello timotimo

[15:25] *** TimToady joined
[15:25] *** FROGGS joined
[15:46] <timotimo> hey

[15:52] *** zakharyas joined
[17:25] *** oetiker_ joined
[17:26] *** oetiker joined
[17:50] *** FROGGS_ joined
[18:18] *** daxim joined
[18:33] *** kjs_ joined
[19:23] *** kjs_ joined
[20:20] *** kjs_ joined
[21:12] *** kjs_ joined
[21:37] *** colomon joined
[21:50] *** kjs_ joined
[22:37] *** colomon joined
[23:18] *** kjs_ joined
[23:18] *** xiaomiao joined
[23:24] <timotimo> does somebody want to sit down with me and look deeper into improving spesh (or maybe code-gen) related to boxing/unboxing?

[23:28] <timotimo> hmm. this may want speshing that goes beyond BB borders in order to handle inlining things that return p6bools that are then immediately if_o'd

[23:29] <timotimo> (and our first step in that case is to turn the if_o into an unbox_i and if_i)

[23:31] <timotimo> unbox_i on a p6bool could actually turn into an eqaddr or what have we

[23:33] <timotimo> hm. except ... do we allow our bool objects to be cloned?

[23:34] <timotimo> well, i suppose you can mix into True and False instances?

[23:34] <timotimo> well. turning the unbox_i into some sp_* op would make it a tiny bit less expensive

[23:34] <timotimo> but i'd rather get rid of this altogether

[23:34] <timotimo> (since i don't remember how exactly to change the code so that it doesn't even generate a p6bool in the first place)

[23:36] <timotimo> i want a prettier spesh log analysis tool

[23:41] *** xiaomiao joined
