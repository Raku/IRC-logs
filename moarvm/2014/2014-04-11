[00:11] <retupmoca> https://github.com/MoarVM/MoarVM/pull/90 please :)

[00:20] *** woolfy left
[02:59] <masak> I think I dare merge that one.

[02:59] <masak> it looks like an unproblematic improvement.

[02:59] <masak> retupmoca: tests still pass after that one?

[03:00] <dalek> MoarVM: 69dbec5 | (Andrew Egeler)++ | src/io/fileops.c:

[03:00] <dalek> MoarVM: When readline/linenoise see EOF, mark handle eof

[03:00] <dalek> MoarVM:

[03:00] <dalek> MoarVM: This lets you use ^D to exit the rakudo/nqp REPL.

[03:00] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/69dbec5d7c

[03:00] <dalek> MoarVM: 5393d34 | (Carl MÃ¤sak)++ | src/io/fileops.c:

[03:00] <dalek> MoarVM: Merge pull request #90 from retupmoca/master

[03:00] <dalek> MoarVM:

[03:00] <dalek> MoarVM: When readline/linenoise see EOF, mark handle eof

[03:00] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5393d3465c

[03:01] * masak went ahead and merged

[03:21] <retupmoca> masak++

[04:37] <retupmoca> o.O apparently my patch is causing a failure in S06-other/main-usage.t - I'd assumed that was unrelated, and just one of the tests that always fail

[04:37] <retupmoca> but if I run that test myself with a .pl file, everything works

[04:38] * retupmoca is confused

[04:38] <retupmoca> but either way, retupmoca--

[04:50] <retupmoca> I don't understand these function signatures (for is_run). It looks to me like main-usage.t is wrong (line 157 should be moved after line 160, for example)

[04:51] <retupmoca> doing that makes the test pass, and actually matches the is_run parameters to my eyes, but I'll let someone smarter than me take a look at it first

[04:54] <retupmoca> I don't understand why the args can come before the expected values, because is_run has %expected as positional, and args is a slurpy hash

[05:08] <retupmoca> ok, now it's passing sometimes, but not all the time

[05:13] <retupmoca> I give up. I don't even know if MVM_file_readline_interactive_fh is being called during these tests

[05:13] <retupmoca> pretty sure my patch caused this weirdness, though

[05:13] * retupmoca goes to bed

[07:13] *** Ven_ joined
[07:28] *** zakharyas joined
[07:30] <masak> I'll let someone else have a look at it too, rather than just going ahead and knee-jerk reverting.

[07:31] <masak> hehe, guess this puts us in the "forgiveness" part of the workflow... :)

[07:37] *** lizmat joined
[07:47] <nwc10> jnthn: are you the last person left writing PIR? In that, most the Parrot activity I've seen in recent months seems to be in other parts of the codebase (or their build system)

[07:47] *** woolfy joined
[08:15] <jnthn> I'm rather doubtful the patch's code path is invoked in the test in question.

[08:20] *** woolfy left
[08:24] <masak> oh phew

[08:24] <masak> :)

[08:24] <masak> it seemed an innocuous patch to apply.

[08:25] <jnthn> nwc10: Well, I was writing code to generate PIR... :)

[08:25] <jnthn> nwc10: I don't really plan to repeat the experience if I can avoid it ;)

[08:25] <nwc10> you don't say

[08:29] <timotimo> with the removal of the scanning for the callsite's arg names i seem to be able to build an nqp

[08:34] <timotimo> and a rakudo

[08:34] <timotimo> very nice.

[08:37] <timotimo> (not using it in the specializer so far, but i probably *could* do that next up

[08:42] <timotimo> which would at least give me a bit of a "yay" factor to this project a bit earlier to keep me going :P )

[08:53] <jnthn> You know you'll have to get interning to handle callsites first too, yes? :)

[08:53] <jnthn> ah, callsites with nameds I mean

[08:53] <timotimo> i do?

[08:53] <timotimo> the specializer will only ever touch interned callsites?

[08:54] <jnthn> Yes.

[08:54] <timotimo> ah

[08:54] <jnthn> That's really important.

[08:54] <timotimo> i guess i'll have to do that then :)

[08:54] <timotimo> that also means it'll never touch flattened stuff, eh?

[08:54] <jnthn> Correct

[08:55] <jnthn> Which is sane.

[08:55] <jnthn> For at least the medium-term.

[08:55] <timotimo> aye

[08:55] <timotimo> in the long term we may be able to do some cool stuff with inlining there

[08:55] <jnthn> yeah

[08:56] <timotimo> for example, we should be able to generate some really tight code for foo(|%bar) given sub foo(*%bar)

[08:56] <jnthn> Yeah, exactly

[08:57] <timotimo> hm, i'm wondering why we can't do that earlier yet

[08:57] <timotimo> well, for subs it's much easier of course

[08:57] <timotimo> the piece of code that lowers binding could do that probably

[08:57] <jnthn> umm

[08:57] <jnthn> Only if inlining.

[08:57] <timotimo> oh

[08:57] <jnthn> And that happens in the optimizer.

[08:57] <timotimo> right, the receiving part needs to know about it too

[08:58] <jnthn> It'll want to be Moar-level otherwise.

[08:58] <jnthn> Yes.

[09:01] <timotimo> i need to hold back a lot today, wrist's kind of hurtin'

[09:02] <jnthn> Yes, take care of those...

[09:09] <timotimo> i wonder if we should use the new rc-forest-fire in p6bench

[09:10] <timotimo> now the p6 version has a different algorithm than the p5 version and the nqp version

[09:10] <timotimo> so that would probably want ported

[09:10] <jnthn> timotimo: Well, I'd fix the .bless(*) in it

[09:10] <jnthn> timotimo: But if you change the algo then it makes it worthless to compare with historical data.

[09:10] <timotimo> yes

[09:11] <jnthn> I'd leave it.

[09:11] <timotimo> we could have rc-forest-fire-2

[09:11] <jnthn> True :)

[09:11] <timotimo> the bless(*) is only called once during the whole program, though

[09:12] <timotimo> doesn't mean i won't fix it

[09:12] <timotimo> just means it doesn't impact performance

[09:12] <jnthn> Oh, I thought it was hotter than that

[09:12] <jnthn> Fair enough

[09:12] <jnthn> Still nice to kill the dep warning.

[09:13] <timotimo> yes

[09:13] <timotimo> warnings don't show during test runs, so i didn't notice it yet

[09:14] <jnthn> Oh, I ran it manually here to get a profile. :)

[10:12] *** woosley left
[10:40] *** brrt joined
[11:34] *** brrt joined
[11:45] <retupmoca> I get to keep my ^D handling! \o/ (0100 local and lack of sleep do not make for a debug session that makes any sense :P)

[11:54] <JimmyZ> brrt timotimo : http://irclog.perlgeek.de/perl6/2014-04-10#i_8567933 # I think you may be interested too.

[12:01] <brrt> will read

[12:20] <brrt> it is, on the other hand, not very convincing

[12:20] <brrt> (i.e. the speed boost)

[12:24] *** lee_ joined
[12:46] * brrt is in the process of trying out new wm's for the netbook i'm working on

[12:46] <brrt> anybody has a good idea?

[13:13] <tadzik> i3

[13:44] <brrt> didn't work too well just now

[13:45] <brrt> i'm now using lxde

[13:45] <brrt> which is ok i guess

[13:54] <lee_> i always liked ion3, but it is abandoned now

[13:59] *** btyler joined
[14:11] *** jnap joined
[14:23] *** jnap1 joined
[14:54] *** odc joined
[14:56] <dalek> MoarVM/named_to_positional: b50df7a | (Timo Paulssen)++ | src/ (2 files):

[14:56] <dalek> MoarVM/named_to_positional: less debug spam

[14:56] <dalek> MoarVM/named_to_positional: review: https://github.com/MoarVM/MoarVM/commit/b50df7a15d

[14:56] <dalek> MoarVM/named_to_positional: 27fd8cd | (Timo Paulssen)++ | src/gc/roots.c:

[14:56] <dalek> MoarVM/named_to_positional: only need to scan arg_name for the flattened case

[14:56] <dalek> MoarVM/named_to_positional: review: https://github.com/MoarVM/MoarVM/commit/27fd8cd93d

[15:35] *** daxim_ joined
[15:55] <japhb> timotimo: Just finished reading the backlog here (but am a couple days back in #perl6, so if you discussed this there, I apologize) -- what is "the new rc-forest-fire" that you are suggesting?

[15:55] <jnthn> japhb: Somebody (TimToady?) worked out an alternative forest fire impl that runs faster.

[15:56] <timotimo> Larry wall improved the forest fire code by a whole lot on Rosetta code

[15:56] <jnthn> japhb: Good for RC, but better to keep the current one in the benchmark suite, imo

[15:56] <jnthn> japhb: Though maybe add second impl as an extra benchmark

[15:57] <timotimo> The secret was to introduce a new state for the trees, which indicates that nearby tree is burning, and then treating the state array as mutable

[15:58] <dalek> MoarVM: f7ddc7e | jnthn++ | src/core/interp.c:

[15:58] <dalek> MoarVM: Set hint for invokespec and multispec.

[15:58] <dalek> MoarVM:

[15:58] <dalek> MoarVM: Means the attribute lookups go a good amount faster.

[15:58] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f7ddc7e74b

[16:04] <japhb> timotimo, jnthn: Oh interesting.  OK, will his optimizations make sense translated to NQP and Perl 5 as well?  Because if so, I agree with making a new set of "rc-forest-fire-opt" (or somesuch) that compares matching algorithm.

[16:06] *** dalek joined
[16:06] <timotimo> I think it will for NQP and most probably also for Perl 5

[17:44] *** zakharyas joined
[18:17] *** colomon joined
[21:03] <retupmoca> jnthn, timotimo: I think I found a spesh bug

[21:03] <retupmoca> perl6 t/spec/S06-other/main-usage.rakudo.moar # fails one test

[21:03] <retupmoca> MVM_SPESH_DISABLE=1 perl6 t/spec/S06-other/main-usage.rakudo.moar # all pass

[21:07] <retupmoca> it still doesn't happen exactly the same way every time (I had one run with 2 failing tests), but I have yet to see a failure with MVM_SPESH_DISABLE

[21:08] <jnthn> nwc10++ mentioned to me he got ASAN trips in some spectests; it wouldn't surprise me if they're related

[21:08] <jnthn> (I've got a stack trace also, to study.)

[22:32] *** lizmat joined
[22:36] *** woolfy joined
[23:02] *** woolfy1 joined
[23:47] *** woolfy1 left
