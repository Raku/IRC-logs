[00:03] <[Coke]> updated https://gist.github.com/coke/8250608

[00:03] <diakopter> I'm trying to run a spectest file individually but I can't because it can't find Test

[00:04] <diakopter> (I guess because rakudo's nmake install isn't completing)

[00:17] <diakopter> (anyone have any tips?) :)

[00:29] <diakopter> ergh.

[00:29] <diakopter> talk about wheel-spinning

[00:42] *** colomon joined
[00:48] <diakopter> how do I fudge things for just the moar backend?

[01:11] * diakopter updates moar's UCD to 6.3

[01:15] <dalek> MoarVM: d2bcf56 | diakopter++ | / (3 files):

[01:15] <dalek> MoarVM: update UCD to 6.3 and add u1names when needed

[01:15] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d2bcf56f22

[01:16] <diakopter> [Coke]: that should fix at least one of the unicode things :)

[01:29] *** colomon joined
[01:34] *** jnap joined
[01:46] * [Coke] will do a rebuild and test some.

[01:47] * diakopter hopes it doesn't break stuff

[01:47] <[Coke]> moar: 73.40%

[01:47] <[Coke]> (today's run, not just now)

[01:47] <diakopter> is that better than it was?

[01:52] <[Coke]> slightly. Go to: https://github.com/coke/perl6-roast-data/blob/master/perl6_pass_rates.csv - put "moar" in the search box. (just above line 1)

[01:52] <[Coke]> it was 73.33%  - slight improvement over a day.

[01:58] <diakopter> ooo

[02:03] *** colomon joined
[02:05] <timotimo> diakopter: oh, you added the missing strings to the unicode database?

[02:06] <diakopter> yah

[02:07] * timotimo will build the stuff

[02:07] <timotimo> oh

[02:07] <timotimo> you checked in a version of the unicode database that adds a \r to every line ending

[02:08] <diakopter> gah

[02:08] <timotimo> would you mind re-making that commit with non-wrong line endings so it doesn't show up as 100% removed, 100% added?

[02:08] <diakopter> I'm not the right person to do that

[02:08] <diakopter> since I've never force pushed or modified a commit

[02:08] <timotimo> i can do it for you

[02:09] <diakopter> but regardless, that file will be almost totally changed anyway

[02:10] <timotimo> is it ok if i show up as the committer and you as the author?

[02:10] <diakopter> yes :P

[02:10] <timotimo> |  3 files changed, 17366 insertions(+), 17321 deletions(-)

[02:10] <timotimo> |    3 files changed, 34432 insertions(+), 34387 deletions(-)

[02:10] <timotimo> which one is yours, which one is mine? :)

[02:10] <diakopter> do the .h also

[02:11] <[Coke]> should I kill my test run and wait for the new commit?

[02:11] <diakopter> (plz)

[02:11] <timotimo> ERROR: Permission to MoarVM/MoarVM.git denied to timo.

[02:11] <timotimo> :(

[02:11] <timotimo> [Coke]: no, it only does whitespace changes

[02:11] <diakopter> I emailed jnthn to add you a week ago but he didn't reply yet; he's on vacation from Overlord Inbox ;)

[02:12] <timotimo> i suspect i'm only not allowed to force-push

[02:12] <diakopter> oh

[02:13] <timotimo> nope

[02:13] <timotimo> i also can't push a new branch

[02:13] <diakopter> well go ahead and push it; we'll erase the history of that file at some point anyway

[02:13] <diakopter> we already did it before

[02:15] <timotimo> hm. should i push it to a new fork on github? %)

[02:15] <timotimo> i already have one

[02:15] <timotimo> this way you at least have the commit

[02:16] <diakopter> why does Moar's Configure.pl tell me --no-optimize is not a valid option but the help output says it is

[02:36] *** colomon joined
[03:28] *** colomon joined
[04:00] *** colomon joined
[09:20] *** V_S_C joined
[09:23] <FROGGS> [Coke]: is this always the one from the last run? http://feather.perl6.nl/~coke/moar.out

[11:18] *** V_S_C joined
[11:22] <V_S_C> I got moar built on Windows. but not nqp/Parrot.

[11:23] <V_S_C> Where should I look next to try nqp/moar?

[13:26] <masak> argh! can't we just .gitignore all of 3rdparty/dyncall ?

[13:27] <masak> hm... that doesn't seem to actually help... :/

[13:31] <arnsholt> What's the problem?

[13:32] <arnsholt> We bundle dyncall, so ignoring the whole thing seems a mite excessive =)

[14:13] *** hoelzro joined
[14:13] *** harrow joined
[14:19] *** colomon joined
[14:20] <masak> arnsholt: the immediate problem is that it keeps showing up in my status. despite not being dirty from my point of view.

[14:21] <masak> arnsholt: the reason I can't .gitignore it is that it's a submodule, or something like a submodule.

[14:56] *** ggoebel118 joined
[15:38] <masak> ./moar: error while loading shared libraries: libmoar.so: cannot open shared object file: No such file or directory

[15:38] <masak> this is from a freshly cloned, Configure.pl'd and make'd MoarVM.

[15:38] <masak> libmoar.so is in the current directory.

[15:39] <masak> ah, oh.

[15:39] <masak> 'make install' fixed it.

[15:39] <masak> I think 'make' alone ought to work, though.

[15:39] <masak> can I submit an issue about this?

[15:48] <arnsholt> masak: It's weird that dyncall is weird about being changed or not. IIRC it's just a pile of files included in our repository

[16:18] <masak> 3rdparty/dyncall is a submodule. I just checked.

[16:18] <masak> probably building it causes it to be changed, though.

[16:18] <masak> modified:   3rdparty/dyncall (untracked content)

[16:19] <masak> meaning there are generated files that aren't properly .gitignored inside of the submodule.

[16:19] <masak> if I descend into 3rdparty/dyncall and 'git clean -f', the thing doesn't show up in our status anymore.

[16:20] <masak> so probably such a step can be added to the build process.

[16:22] <dalek> MoarVM: 41db275 | masak++ | .gitignore:

[16:22] <dalek> MoarVM: ignore generated install/ directory

[16:22] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/41db275467

[16:40] <masak> ok, I want to append ' && git clean -f' to line 431 in the Makefile. but the Makefile is generated. do I need to change build/Makefile.in ?

[16:41] <FROGGS> yes

[16:42] <masak> I checked, and the corresponding line in that file (line 425) only says '$(CMD)@dcrule@ $(NOOUT)'

[16:42] <masak> and I don't know where to find @dcrule@

[16:42] <FROGGS> dcrule if in %config in Configure.pl or the build perl 5 module

[16:42] <FROGGS> s/if/is/

[16:42] <FROGGS> it is a key in that hash

[16:43] <masak> aha.

[16:43] <masak> but I don't find it in either of those. odd.

[16:43] <FROGGS> hmmm

[16:43] <masak> 'git grep' only turns up the occurrence in build/Makefile.in .

[16:44] <FROGGS> but it is even put in the generated config.c file... so it must be a key in that hash

[16:45] <FROGGS> see MoarVM/build/setup.pm:375:            rule

[16:46] <masak> oki

[16:46] <masak> ah.

[16:46] <masak> so... I'll just try adding it there.

[16:46] <FROGGS> and the other appearances for other platforms/compiler

[16:46] * masak .oO( OCD-driven development )

[16:47] <masak> oh, indeed.

[16:47] <masak> I count three locations.

[16:49] <FROGGS> three for dyncall, nod

[16:52] <masak> doesn't seem to make a difference :/

[16:52] <masak> that is, I changed it in build/setup.pm, but the change doesn't propagate to the generated Makefile

[16:53] <FROGGS> you did it for all three?

[16:53] <masak> oh!

[16:53] <masak> it's on L41 too.

[16:53] <masak> that's probably the one used.

[16:53] <masak> yep.

[16:54] <FROGGS> ohh, take a look:

[16:54] <FROGGS> MoarVM/build/auto.pm:15:                $defaults->{-thirdparty}->{dc}->{rule} =

[16:54] <FROGGS> /home/froggs/dev/MoarVM/build/auto.pm:33:                $defaults->{-thirdparty}->{dc}->{rule} =

[16:56] <masak> work'd! \o/

[16:57] <[Coke]> FROGGS: no, feather is for one offs. the latest "official" is on github/coke/perl6-roast-data

[16:57] <FROGGS> [Coke]: k, thx

[16:57] <dalek> MoarVM: 16deab9 | masak++ | build/setup.pm:

[16:57] <dalek> MoarVM: clean up after building dyncall

[16:57] <dalek> MoarVM:

[16:57] <dalek> MoarVM: Otherwise, 3rdparty/dyncall shows up as "changed (untracked content)" in moar's

[16:57] <dalek> MoarVM: 'git status'.

[16:57] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/16deab9e12

[16:58] <masak> my janitorial work here is done.

[16:59] <[Coke]> I never did finish a second run last night. internet kept dropping connection, and I was too lazy to do it right.

[17:10] <[Coke]> today's daily run is already running, will just use that.

[17:10] <timotimo> masak++

[17:10] <timotimo> that has been very mildly annoying me as well

[17:15] *** V_S_C joined
[17:23] *** colomon joined
[17:53] *** cognominal joined
[17:54] <nwc10> FROGGS: in 428cd37093, doesn't env_str also need to be set to NULL ?

[17:59] <nwc10> jnthn: There is still some sort of mark bug as I'm getting tc->cur_frame->caller->caller->params.args[1].o ending up in fromspace

[18:00] <nwc10> and tc->cur_frame->caller->caller->cur_args_callsite is non-NULL

[18:01] <nwc10> this is somewhere in line 148 of 99-test-basic.t in Rakudo, which is

[18:01] <nwc10> is_deeply $deeply, $deeply;

[18:01] <nwc10> there is a very long chain of callers. I gave up pasting ->caller in gdb trying to work out how deep it was

[19:01] <[Coke]> r: say 22311 - 20883 ; # moar improvement

[19:01] <camelia> rakudo-parrot e5268b, rakudo-jvm e5268b: OUTPUT«1428␤»

[19:29] *** moritz_ joined
[19:31] *** chipdude joined
[19:32] *** cxreg2 joined
[19:38] <diakopter> \o/

[19:43] <dalek> MoarVM: 43c8856 | (Tobias Leich)++ | src/io/procops.c:

[19:43] <dalek> MoarVM: set env_str to NULL because we root it, nwc10++

[19:43] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/43c8856e7a

[19:53] *** harrow` joined
[20:02] *** colomon joined
[20:02] *** tadzik1 joined
[20:02] *** [Coke]_ joined
[20:20] <timotimo> what does that fix, FROGGS? :)

[20:20] <FROGGS> a potential wrong rooting I think

[20:20] <timotimo> oh, just potential? :(

[20:20] <timotimo> i'm longing for more implemented stuff on moar :)

[20:21] <timotimo> but i suppose i'll have to wait for jnthn to make the continuation passing tsuff work

[20:21] <FROGGS> the question is: what could we do?

[20:21] <timotimo> dunno

[20:21] <timotimo> i'm going to drive my car back and forth through the city now

[20:24] *** brother| joined
[20:26] *** lue joined
[20:31] *** chipdude joined
[20:35] *** sorear_ joined
[20:38] *** retupmoca joined
[20:38] *** timotimo joined
[20:38] *** lee__ joined
[21:01] *** krunen joined
[21:05] <masak> src/moar.h L53: '/* Headers for APIs for various other data structures and APIs. */'

[21:05] <masak> should be s/for APIs//, no?

[21:08] <moritz_> aye

[21:23] * masak fixes

[21:27] <dalek> MoarVM: 8eaa45c | masak++ | src/moar.h:

[21:27] <dalek> MoarVM: improve comment

[21:27] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8eaa45c1a9

[21:54] <masak> my attempts so far with reducing MoarVM to something that I can instrument its GC through have resulted in me being able to segfault the VM consistently.

[21:54] <masak> it's fun to delete code, though.

[22:02] <FROGGS> >.<

[22:11] *** benabik joined
[22:20] <masak> (trying this by paring moar down to just a GC. the segfault probably means I removed something the GC needed.)

[22:23] <masak> nope. seems it segfaults even without that stuff removed.

[22:23] <masak> that means I can go to bed posting a very simply question:

[22:24] <masak> why does MVM_gc_allocate(instance->main_thread, 100); immediately after MVM_vm_create_instance() segfault?

[22:24] <timotimo> i have no idea what you're hoping to do with a moarvm without the vm but with the gc

[22:25] <masak> timotimo: I want to allocate objects, cause GC runs to trigger, and observe the effects.

[22:26] <timotimo> ah

[22:26] <timotimo> so replacing the whole run loop with your own

[22:26] <masak> yes.

[22:27] <masak> (I would keep the original runloop, but I don't believe it will have the control/reach I want.)

[22:27] <masak> ooh, I managed to trigger 'Unhandled exception: Could not map file 'input.moarvm' into memory: FIXME'

[22:27] <masak> (by providing ./moar with an empty input file)

[22:32] <masak> anyway,

[22:32] <masak> 'night, #moarvm

[23:28] <[Coke]> biggest moar failure is now:

[23:28] <[Coke]> Cannot call method 'dispatch:<.^>' on a null object

[23:36] <[Coke]> Here's one way to get that: '(1 | 3) < 3'

[23:37] <timotimo> that would be junctions not being implemented

[23:37] <timotimo> i wonder how hard that is.

[23:38] <timotimo> wait. not quite

[23:38] <timotimo> there's one piece of junction autothreading implemented

[23:49] *** colomon joined
[23:50] <timotimo> inside the bootstrap, the find_best_dispatcher method apparently knows how to autothread

[23:56] <jnthn> Well, the 'dispatch:<.^>' thing is really about backtrace generation failing I guess...
