[06:23] *** woolfy joined
[07:20] *** woolfy joined
[07:23] *** woolfy left
[07:24] *** woolfy1 joined
[07:24] *** woolfy1 left
[07:59] *** lizmat joined
[08:08] *** FROGGS joined
[08:29] *** vendethiel joined
[08:33] *** woolfy joined
[08:38] *** brrt joined
[10:00] <dalek> MoarVM: 7785f67 | nicholas++ | src/6model/sc.h:

[10:00] <dalek> MoarVM: Merge the bodies of MVM_sc_get_{obj,stable}_sc and *_set_*

[10:00] <dalek> MoarVM:

[10:00] <dalek> MoarVM: The two *_get_* functions call MVM_sc_get_collectable_sc, and the two

[10:00] <dalek> MoarVM: *_set_* functions call MVM_sc_set_collectable_sc.

[10:01] *** dalek joined
[10:03] <nwc10> :-)

[10:05] <FROGGS> nwc10++ # killing dalek

[10:06] <nwc10> ammo doesn't kill bots, people kill bots

[10:06] <nwc10> so

[10:06] <nwc10> jnthn++

[10:07] <jnthn> I let the patch restore the thing I took out 'cus it SEGV'd the Panda build on Linux

[10:07] <jnthn> It still does.

[10:09] <nwc10> :-/

[10:11] <nwc10> jnthn: I'm still playing with the 24:8 split - right now it seems to be slower

[10:12] <nwc10> which is wrong! as it should reduce memory allocation by about 256K

[10:12] <nwc10> so going to look at the generated code

[10:12] <dalek> MoarVM: 4befa95 | jnthn++ | src/6model/serialization.c:

[10:12] <dalek> MoarVM: Back out index-setting in deserialize again.

[10:12] <dalek> MoarVM:

[10:12] <dalek> MoarVM: This breaks the Panda build on some platforms.

[10:12] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4befa95214

[10:12] <nwc10> but also planning to use pahole to find all the gaps in structures, and where possible re-order to reduce memory usage

[10:13] <nwc10> and see if (a) that doesn't look crazy stupid unmaintainable

[10:13] <nwc10> (b) helps

[10:13] <nwc10> second-order thing - pahole neatly points out cache lines

[10:13] * jnthn hopes for a hole lot of little improvements from it :)

[10:13] <nwc10> and one structure has a bunch of mutexes which are close enough together that some share cache lines

[10:14] * nwc10 groans

[10:14] <jnthn> ugh, yes

[10:14] <nwc10> reply pun failure

[10:47] *** brrt joined
[11:19] * masak .oO( https://soundcloud.com/pomdeterrific/pomdeter-call-me-a-hole )

[11:20] <jnthn> .oO( you're a hole )

[12:19] *** brrt joined
[12:45] <dalek> MoarVM: 9dacb45 | jonathan++ | src/ (2 files):

[12:45] <dalek> MoarVM: Specialize getattr_[ins] on P6opaque.

[12:45] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9dacb4595a

[12:47] <jnthn> With that, time spent in get_attribute in CORE.setting is done from 4.23% down to 3.96%

[12:47] <jnthn> Now for the object case...

[13:27] *** brrt joined
[13:28] *** woolfy1 joined
[13:51] *** btyler joined
[14:05] <btyler> jnthn: not sure if this is helpful information, but Moar at 4befa95 was ok with panda prior to rebuilding nqp and rakudo

[14:07] <jnthn> btyler: Yeah, decided we'll put that off

[14:07] <jnthn> btyler: Until after next release

[14:09] <btyler> jnthn: alrighty, sounds good

[14:25] *** zakharyas joined
[14:28] <dalek> MoarVM: b31ac96 | (Tobias Leich)++ | src/math/bigintops.c:

[14:28] <dalek> MoarVM: a bigint is big when it does not fit in

[14:28] <dalek> MoarVM:

[14:28] <dalek> MoarVM: On 64bit platforms the DIGIT_BIT is 60, so when we want to store something bigger, we need a

[14:28] <dalek> MoarVM: bigint. The condition before this patch was always false.

[14:28] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b31ac9626a

[14:30] *** ggoebel111115 joined
[15:15] <masak> nwc10++ # speeding up moar by aligning bits

[15:47] <dalek> MoarVM: 187eedf | jonathan++ | src/ (2 files):

[15:47] <dalek> MoarVM: Optimize object attribute accesses in spesh.

[15:47] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/187eedf467

[15:48] <jnthn> Used to spend 4.23% of CORE.setting build in get_attribute; now it's 1.85%.

[15:48] <jnthn> And think there's some more win to be had yet.

[15:52] <tadzik> :o

[15:52] <tadzik> jnthn++

[16:02] *** lizmat joined
[16:03] *** woolfy joined
[16:07] *** tgt joined
[16:13] <brrt> plz checkout my blog again :-) http://brrt-to-the-future.blogspot.nl/2014/05/moarvm-as-machine.html

[16:14] <jnthn> ooh, new post

[16:14] *** FROGGS joined
[16:15] <brrt> yes, new post

[16:15] <brrt> :-)

[16:15] * brrt dinner

[16:15] <moritz> brrt++

[16:15] *** brrt left
[16:15] <moritz> brrt: iirc one of the reasons for making moarvm a stack machine is that it makes some codegen easier

[16:15] <moritz> ... to slow

[16:15] <masak> ironic that the blog post requires a JavaScript VM to read ;)

[16:16] <moritz> aye, blogspot--

[16:16] <jnthn> uh, moarvam ain't a stack machine

[16:16] <moritz> s/stack/register/

[16:16] <moritz> argl

[16:17] <tadzik> br<TAB><TAB>

[16:17] <moritz> 18:15 -!- brrt [~bart@195-241-164-190.ip.telfort.nl] has left #moarvm []

[16:17] <tadzik> yeah

[16:17] <tadzik> is there a .tell bot here?

[16:18] <tadzik> no. Oh well, I'll wait :)

[16:20] <lizmat> .tell

[16:20] <lizmat> :-(

[16:26] <masak> brrt++ # nice post

[16:27] <jnthn> One other reason cheap deopt is desirable is it makes it uncostly to speculate lots

[16:39] <dalek> MoarVM: ef5657e | jonathan++ | src/ (2 files):

[16:39] <dalek> MoarVM: Spesh indirect form of attr ops with known names.

[16:39] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ef5657e713

[16:40] *** woolfy left
[17:10] *** lizmat joined
[17:10] *** colomon joined
[17:34] <nwc10> jnthn: I can haz SEGVs

[17:35] <nwc10> eg ./perl6-m t/spec/S05-transliteration/with-closure.rakudo.moar

[17:35] <nwc10> goes away with export MVM_SPESH_DISABLE=1

[17:55] *** brrt joined
[17:58] * brrt is back

[17:58] <brrt> did is say moarvm is a stack machine?

[17:58] <brrt> :-o

[18:01] <brrt> tadzik?

[18:29] <tadzik> brrt: oh

[18:29] <tadzik> freqeently in your blog post :)

[18:29] <brrt> hi :-)

[18:29] <brrt> really? that is embarassing

[18:29] <brrt> where

[18:29] <tadzik> it's a hyperlink

[18:30] <tadzik> somewhere at the beginning iirc

[18:31] <tadzik> also, I really liked it :)

[18:32] <brrt> thanks :-)

[18:32] <brrt> oh i've found it

[18:39] <nwc10> jnthn: 4 spectests SEGV with spesh. Probably all the same bug.http://paste.scsys.co.uk/377252

[18:45] <nwc10> jnthn: culprit is ef5657e713e8c7a92753614cf1ea9e2bbcf3e0e5 --    Spesh indirect form of attr ops with known names.

[18:49] <nwc10> jnthn: may not be obvious from that nopaste - 4 failures are t/spec/S05-transliteration/with-closure.rakudo.moar t/spec/S05-transliteration/trans.rakudo.moar t/spec/integration/advent2009-day09.t t/spec/integration/real-strings.t

[20:12] * brrt is off

[20:12] *** brrt left
[20:29] <timotimo> brrt: if you read this in the backlog, you may want to change the wording of the sentence about add_i to indicate that the first operand is the target, as is the case with all operations i can think of right nw

[22:03] *** lizmat joined
[22:14] *** camelia joined
[22:18] *** lizmat joined
[22:19] *** sergot_ joined
[22:19] *** nwc10_ joined
[22:19] *** dalek joined
[22:19] *** cognominal joined
[22:19] *** Util joined
[22:19] *** tadzik joined
[22:19] *** 64MAAITRZ joined
[22:19] *** TimToady joined
[22:19] *** tokuhirom joined
[22:19] *** harrow joined
[22:19] *** flussence joined
[22:19] *** rurban_ joined
[22:19] *** timotimo joined
[22:19] *** bcode joined
[22:19] *** bonsaikitten joined
[22:19] *** zacts joined
[22:19] *** 17SAADFTQ joined
[22:19] *** nwc10 joined
[22:20] *** zacts_ joined
[22:21] *** FROGGS joined
[22:24] *** woolfy joined
[23:01] *** lizmat joined
[23:08] *** woolfy joined
[23:11] *** woolfy joined
[23:12] *** woolfy joined
[23:21] *** xiaomiao joined
[23:27] *** woolfy joined
[23:47] *** woolfy left
