[01:28] *** FROGGS joined
[02:08] *** xiaomiao joined
[02:38] *** lizmat joined
[02:42] *** woolfy joined
[02:53] *** dalek joined
[03:21] *** oetiker joined
[03:47] *** FROGGS joined
[07:11] *** zakharyas joined
[07:22] *** brrt joined
[07:48] <brrt> \o #moarvm

[08:11] *** FROGGS joined
[08:39] <jnthn> brrt: Reasons for malloc/memcpy'ing it make some sense.

[08:59] *** brrt joined
[09:00] *** brrt left
[09:03] *** brrt joined
[10:32] <brrt> ugh, segfaults

[10:52] <brrt> damn segfaults

[10:54] <brrt> oh....

[10:54] <brrt> ret

[10:55] <brrt> *ahum*

[10:57] <brrt> oh, now i'm over to bus errors

[10:57] <brrt> much amaze

[10:58] <FROGGS> ó.ò

[11:00] <brrt> *ahem*

[11:00] <brrt> turns out storing floating points in the place of your former stack base pointer isn't a good idea :-D

[11:00] <FROGGS> ohhh

[11:01] <FROGGS> well, even I can agree on that point :o)

[11:01] <brrt> thats just one of them, though

[11:02] <brrt> hmm

[11:02] <brrt> ok, now it works for the example code

[11:02] <brrt> by the way, i think i should make a test library of jittable fragments in moar-jit

[11:03] <FROGGS> nice :o)

[11:03] <FROGGS> brrt: that would be nqp code, right?

[11:03] <FROGGS> then nqp/t/jit/* would be the right place for it

[11:03] <brrt> yes, although i could probably compile them to moarvm bytecode

[11:04] <brrt> hmm, i could do that, yes

[11:04] <brrt> my original plan was to make a directory under moarvm and hard-compile the moarvm bytecode fragments

[11:04] <FROGGS> nah

[11:04] <brrt> much like the dynasm fragments are precompiled

[11:05] <brrt> well, if you say so :-)

[11:05] <FROGGS> we already have feature/backend specific subdirs in nqp/t :o)

[11:08] <brrt> i'm fine with every solution

[11:08] <brrt> as long as its black

[11:09] <FROGGS> sure

[11:09] * FROGGS goes off to paint everything black

[11:09] <brrt> hmm

[11:09] <brrt> ls

[11:10] <brrt> wrong window :-)

[11:10] <FROGGS> np :o)

[11:11] <brrt> oh, i've seen where my segfault comes from

[11:11] <brrt> movabs r10, 0x0; call r10

[11:11] <brrt> doesn't seem right, does it

[11:12] *** lizmat joined
[11:13] <brrt> (its equivalent to int (*fp)(int, int) = NULL; fp();)

[11:13] *** odc joined
[11:13] *** woolfy joined
[11:18] <brrt> and.. now it works

[11:24] <dalek> MoarVM/moar-jit: 3df5f80 | (Bart Wiegmans)++ | / (6 files):

[11:24] <dalek> MoarVM/moar-jit: Support floating point passing and returning

[11:24] <dalek> MoarVM/moar-jit: review: https://github.com/MoarVM/MoarVM/commit/3df5f80b66

[11:25] * brrt wonders if there is a way to have git ignore the dynasm output files in the diff log

[11:25] <brrt> anyway, gotta run, see you in a bit

[12:16] *** woolfy left
[12:22] *** jnap joined
[12:32] *** lizmat joined
[12:58] *** ggoebel111116 joined
[12:59] *** lizmat joined
[13:02] *** nebuchadnezzar joined
[13:07] *** brrt joined
[13:48] *** btyler joined
[13:57] *** lizmat joined
[14:08] *** lizmat joined
[14:40] *** brrt joined
[14:55] <timotimo> oh yay, floats can be passed and returned

[14:55] <timotimo> that's a good step

[14:56] <brrt> :-)

[14:56] <brrt> now working on further arithmetic

[15:08] <jnthn> :)

[15:08] <timotimo> and then some future arithmetic?

[15:08] <jnthn> hotel &

[15:41] <dalek> MoarVM/moar-jit: ac1d715 | (Bart Wiegmans)++ | / (5 files):

[15:41] <dalek> MoarVM/moar-jit: More arithmetic, including floating-point ops.

[15:41] <dalek> MoarVM/moar-jit: review: https://github.com/MoarVM/MoarVM/commit/ac1d715e06

[15:43] <timotimo> those diffs are teh huge >_<

[15:50] *** cognominal joined
[15:57] <jnthn> It's brrt's secret plan to overtake me for lines committed in Moar :P

[16:02] <timotimo> oooh clever :)

[16:10] <brrt> :-D

[16:10] <brrt> timotimo - i think that's because dynasm rebuilds the whole file and this file is committed with the rest

[16:10] <timotimo> yes, of course

[16:11] <brrt> its not 'fair' to count those lines :-)

[16:11] <timotimo> hah.

[16:11] <timotimo> of course not

[16:17] <lee__> brrt: with js files github will collapse .min.js diffs

[16:21] <brrt> hmmm....

[16:21] <brrt> but i can hardly call my c file output .min.js just to please github

[16:22] <brrt> my real secret plan is to take all credit for spesh-related speedups

[16:22] <brrt> muhahaah

[16:46] <jnthn> :P

[16:46] <jnthn> .oO( does he get all the blame for the speshbugs too? :P )

[16:49] <brrt> well, can't have one without the other

[16:50] <brrt> i think.. the next thing is the sp_guard* ops

[16:50] <brrt> also

[16:50] <brrt> what does wval do?

[16:53] <brrt> (bbiab)

[16:53] <timotimo> it grabs an object from a SC iirc

[17:03] <jnthn> Yup.

[17:03] <jnthn> And if the object is in gen2, can just reference it directly.

[17:40] *** brrt joined
[17:43] *** lizmat joined
[18:00] *** btyler joined
[18:02] *** brrt left
[18:04] *** FROGGS joined
[18:53] *** lizmat joined
[19:04] *** lizmat joined
[19:07] <dalek> MoarVM: 722c847 | (Tobias Leich)++ | / (3 files):

[19:07] <dalek> MoarVM: auto detect computed goto support

[19:07] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/722c8470a7

[19:11] <jnthn> Cute :)

[19:12] <FROGGS> :o)

[19:12] <FROGGS> timotimo: I'm sorry but I could not resist

[19:13] * jnthn is glad somebody did it :)

[19:14] <FROGGS> you don't like build toolchains, do you :o)

[19:14] <FROGGS> hmmm, stage parse took 57s with cgoto

[19:14] <FROGGS> but my battery is low so it is perhaps just that

[19:15] <FROGGS> last time I checked it was a bit faster, and that was like three weeks ago

[19:15] *** lizmat joined
[19:16] <timotimo> yays

[19:17] <FROGGS> timotimo: would be nice when you could test the impact on stage parse... I have no power cable where atm :/

[19:18] <FROGGS> here*

[19:18] <timotimo> last time i looked it was an improvement

[19:18] <timotimo> my computer is kinda busy showing SGDQ :)

[19:21] <FROGGS> *g*

[19:21] <FROGGS> np, I didn't meant *now* btw

[19:22] <timotimo> okay

[19:24] *** vendethiel joined
[19:48] *** lizmat joined
[19:48] *** odc joined
[19:51] *** lizmat joined
[19:52] *** woolfy joined
[19:53] *** woolfy1 joined
[20:48] <hoelzro> MVM_exception_throw_adhoc(tc, "Named argument '%s' already used", MVM_string_utf8_encode_C_string(tc, name)); // <- won't this cause a memory leak?

[21:16] *** hoelzro joined
[21:34] *** oetiker joined
[23:27] *** vendethiel- joined
