[00:22] *** ilbot3 joined
[02:04] *** btyler joined
[05:26] *** JimmyZ_ joined
[07:20] *** FROGGS joined
[09:28] *** zakharyas joined
[09:32] *** donaldh joined
[10:10] *** daxim joined
[10:29] *** donaldh joined
[11:57] *** oetiker joined
[12:05] *** oetiker joined
[12:08] *** ingy joined
[12:18] *** jnap joined
[12:44] *** lizmat joined
[13:07] *** btyler joined
[13:30] *** colomon joined
[13:49] *** btyler joined
[13:51] <sergot> Hey!

[13:51] <sergot> I have been working on Bug #121530 https://rt.perl.org/Public/Bug/Display.html?id=121530

[13:51] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121530

[13:52] <sergot> I figured out that:

[13:52] <sergot> both phaser are added correctly

[13:52] <sergot> http://paste.ubuntu.com/7497002/

[13:52] <sergot> It starts the first one and exit on die.

[13:52] <sergot> so I did this: (FROGGS++)

[13:53] <sergot> -                        :moar(QAST::Op.new( :op('null') ))

[13:53] <sergot> +                        :moar(QAST::Op.new( :op('resume'), QAST::Op.new( :op('exception') ) ))

[13:53] <sergot> rakudo/src/Perl6/Actions.nqp:1537

[13:53] <sergot> So we resume on the exception, and it prints 21, as we want.

[13:53] <FROGGS> still not 100% correct :o)

[13:54] <sergot> that's right

[13:54] <sergot> so...

[13:54] <sergot> It doesn't work properly.

[13:54] <sergot> It actually doesn't die at die(). It goes further:

[13:54] <sergot> $ perl6 -e 'my $s; try { LEAVE { $s ~= 1 }; LEAVE { $s ~= 2; die "foo"; say "yyyy" } }; say $s;'

[13:54] <sergot> yyyy

[13:54] <FROGGS> we still need to exit from the phaser where the exception happens

[13:54] <sergot> 2

[13:54] <sergot> 21

[13:54] <sergot> not '2'

[13:54] <sergot> Could you give me some advices?

[13:55] <FROGGS> yeah, we should not print 'yyyy' for example

[13:55] <sergot> What should I do now? :)

[13:55] <sergot> true :)

[13:55] <FROGGS> I'm not sure

[13:57] <timotimo> it's very nice that you're tackling something so tricky

[13:58] <sergot> FROGGS++ helped me a lot

[14:47] <sergot> any ideas? :)

[14:57] *** dalek joined
[15:43] <[Coke]> I am running a version of moar that if you run this command in the REPL about a dozen times, it crashes.

[15:43] <[Coke]> code: (9 X- 1 X- 2,3,6).sort.uniq

[15:44] <[Coke]> crash: ===SORRY!===

[15:44] <[Coke]> Spesh: failed to fix up handlers (-1, 110, 110)

[15:44] <[Coke]> version: 2014.05-37-g04fe6d7

[15:46] <FROGGS> [Coke]: same here

[15:50] <[Coke]> the code run seems to not matter so much

[15:51] <[Coke]> m: (1080 X/ 2,3,4,5 X/ 4,5 X/ 2,3,4,5).sort.uniq.grep({$_.narrow ~~ Int})

[15:51] <camelia> rakudo-moar 851811: ( no output )

[15:51] <[Coke]> m: (1080 X/ 2,3,4,5 X/ 4,5 X/ 2,3,4,5).sort.uniq.grep({$_.narrow ~~ Int}).saty

[15:51] <camelia> rakudo-moar 851811: OUTPUT«No such method 'saty' for invocant of type 'List'␤  in block  at /tmp/HMZGNlkbfF:1␤␤»

[15:51] <[Coke]> m: (1080 X/ 2,3,4,5 X/ 4,5 X/ 2,3,4,5).sort.uniq.grep({$_.narrow ~~ Int}).say

[15:51] <camelia> rakudo-moar 851811: OUTPUT«18 24 27 30 36 45 54␤»

[15:51] <[Coke]> m: (1080 X/ 2,3,4,5 X/ 4,5 X/ 2,3,4,5).sort.uniq.grep(* ~~ Int).say

[15:52] <camelia> rakudo-moar 851811: OUTPUT«␤»

[15:52] <[Coke]> ^^ why aren't those identical? (last 2)

[15:55] <[Coke]> m: (1080 X/ 2,3,4,5 X/ 4,5 X/ 2,3,4,5).sort.uniq.grep(*.narrow ~~ Int).say

[15:55] <camelia> rakudo-moar 851811: OUTPUT«␤»

[15:55] <[Coke]> Sorry, "the last two with .narrow" :)

[16:16] *** oetiker joined
[16:35] *** oetiker joined
[16:56] *** oetiker joined
[17:19] *** colomon joined
[19:30] *** zakharyas joined
[20:50] *** zakharyas1 joined
[22:41] *** cognominal joined
[22:48] *** cognominal joined
