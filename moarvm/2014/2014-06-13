[00:22] <timotimo> i'm quite glad that spesh is going to be very good at these pseudo-getter-setters we have all ove rnqp

[00:23] <timotimo> and they should also easily be inlinable most of the time

[00:23] <timotimo> which is even nicer :)

[00:51] <timotimo> moarvm gets a segfault in scan_registes on a few spectests with my nqp and rakudo branches for lazy evaluated hashes

[00:59] <timotimo> oh, i was on the inline branch

[01:00] <timotimo> amazing that it lasted until the spectests :)

[02:33] *** btyler joined
[05:48] <dalek> MoarVM/moar-jit: fde55e3 | (Bart Wiegmans)++ | src/jit/jit.c:

[05:48] <dalek> MoarVM/moar-jit: Use malloc/free for dasm globals

[05:48] <dalek> MoarVM/moar-jit:

[05:48] <dalek> MoarVM/moar-jit: This will hopefully fix the build for windows.

[05:48] <dalek> MoarVM/moar-jit: Note that I windows calling conventions are different

[05:48] <dalek> MoarVM/moar-jit: from Linux or any other system, so I'll need to modify

[05:48] <dalek> MoarVM/moar-jit: emit_call_c for it to work.

[05:48] <dalek> MoarVM/moar-jit: review: https://github.com/MoarVM/MoarVM/commit/fde55e3862

[05:55] <nwc10> jnthn: works on "my" apart from t/spec/S02-lexical-conventions/comments.rakudo.moar t/spec/S02-names/identifier.t t/spec/S04-statements/do.rakudo.moar t/spec/S05-metasyntax/litvar.t t/spec/S05-transliteration/trans.rakudo.moar t/spec/S17-lowlevel/lock.rakudo.moar t/spec/integration/advent2010-day21.t t/spec/integration/advent2012-day10.t

[05:55] <nwc10> I think one of those isn't an inlining error

[05:57] <nwc10> jnthn: http://paste.scsys.co.uk/393986 is output from ASAN

[05:57] * nwc10 hasn't been paying attention - it has gained stack backtraces

[06:21] *** lizmat joined
[06:28] *** woolfy joined
[06:51] *** woolfy left
[07:07] *** zakharyas joined
[07:07] <nwc10> no, GOD is real unless declared integer. Er, all of the above are real (new) regressions, apart from t/spec/S17-lowlevel/lock.rakudo.moar

[07:24] *** woosley left
[07:24] *** FROGGS joined
[07:53] *** brrt joined
[08:14] <jnthn> nwc10: Thanks for the output

[08:15] <nwc10> valgrind output coming soon

[08:16] <brrt> \o #moarvm

[08:16] <brrt> jnthn - had a chance to test moar-jit on windows again by any chance?

[08:17] <brrt> crashes, right :-)

[08:17] <jnthn> Not yet :)

[08:18] <jnthn> Was just trying to figure out why half my attempts to connect to anything hit timeouts or DNS res fails...

[08:18] <brrt> hmm

[08:19] <brrt> maybe somebody is ddos'ing your isp

[08:19] <jnthn> Well, it's been going on since yesterday

[08:19] <nwc10> jnthn: much valgrind output: http://paste.scsys.co.uk/394048

[08:20] <nwc10> Have only skimmed it, but 2 or 3 bugs reoccur

[08:20] <jnthn> I was thinking it was somewhere ISP-wards, until I got a couple of timeouts looking at my router's info page. Which suggested it was more local ;)

[08:20] *** lizmat joined
[08:20] <nwc10> jnthn: I'd have strong words with your sysadmin :-)

[08:20] <jnthn> Restarting that rather overheated box sat under my desk seems to have helped :)

[08:20] <brrt> nice :-)

[08:20] <brrt> maybe not put it under your desk

[08:21] <nwc10> jnthn: not sure why my firefox thinks that this line:

[08:21] <nwc10> ok 11 - embedded comment with #`᚛᚜

[08:21] <jnthn> Hmm

[08:21] <nwc10> deseved a Unicode replacement character

[08:21] <jnthn> brrt: Well, it's got a decent bit of airflow down there...

[08:22] <brrt> fair enough, i don't know your setup :-)

[08:22] * brrt is a bit crossed with the whole windows-x64 vs at&t-x64 affair

[08:22] <jnthn> brrt: Now jit.c compiles

[08:22] <brrt> awesome

[08:23] <jnthn> mmap.c

[08:23] <jnthn> src\platform\win32\mmap.c(21) : error C2065: 'MVM_PAGE_NOACCESS' : undeclared identifier

[08:23] <jnthn> NMAKE : fatal error U1077: '"C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\BIN\amd64\cl.EXE"' : return code '0x2'

[08:23] <jnthn> Stop.

[08:23] <brrt> what

[08:23] <brrt> oh

[08:23] <brrt> i see

[08:25] <brrt> it should be just PAGE_NOACCESS, i'm fixing it :-)

[08:26] <dalek> MoarVM/moar-jit: c63bb87 | (Bart Wiegmans)++ | src/platform/win32/mmap.c:

[08:26] <dalek> MoarVM/moar-jit: Constant name typo for win32

[08:26] <dalek> MoarVM/moar-jit: review: https://github.com/MoarVM/MoarVM/commit/c63bb87247

[08:26] * brrt should look up cross compilation for win64

[08:28] <brrt> mingw64 ought to be able to do it? or is that the other way arround

[08:30] <brrt> or maybe a vm

[08:34] <jnthn> I'd go for a VM

[08:34] <jnthn> Yes, that patch helped

[08:35] <brrt> \o/

[08:35] <brrt> does it crash? :-D

[08:35] <nwc10> does it blend? :-)

[08:35] <brrt> i dunno

[08:35] <brrt> :-p

[08:36] <brrt> officially i have a license for win8 on this machine, so all i have to do is get it off the HDD

[08:36] <jnthn> brrt: You got that script that I can use to test it?

[08:37] * jnthn has to rebuild NQP

[08:37] <brrt> its called foo.nqp and it ought to be checked in

[08:37] <brrt> yes, or i have to merge master, whichever is easier

[08:42] <jnthn> SEGV

[08:43] <jnthn> Last line wsa "Emit constant arg 0"

[08:43] <brrt> hmmmm

[08:43] <brrt> thats not necessarily what i'd expect

[08:43] <brrt> oh, no, that is what i expect

[08:43] <brrt> all is well

[08:43] <brrt> :-)

[08:44] <brrt> hmmm

[08:44] <brrt> or maybe not

[08:44] <brrt> i think you should see 'loop iteration 14' before that

[08:44] <brrt> if not, there is a bug in jit.c

[08:45] <brrt> if so, there is a bug - but a known one - in argument-passing in x86_64.dasc

[08:45] <jnthn> No, don't see that.

[08:45] <brrt> which i'll be renaming to emit_x86_64.dasc

[08:45] <brrt> ok, i'd be very happy with debug output of any sorts :-)

[08:45] * jnthn should just have done a debug build in the first place...

[08:46] <jnthn> Eww, heavy rain.

[08:48] <brrt> rain in sweden?

[08:49] <jnthn> Apparently :)

[08:49] <jnthn> It wasn't exactly forecast...

[08:49] <brrt> it's still sunny here

[08:50] <jnthn> Wow. It's really hammering down.

[08:50] <brrt> well, think of the weather when it will be over, fresh air, wet grass

[08:58] <jnthn> Well;, bother... :(

[08:58] <jnthn> The build with debug symbols works o.O

[08:58] <brrt> what

[08:58] <nwc10> debugging builds cause all variables to be initialised to 0?

[08:58] <brrt> :-o

[08:58] <brrt> it still shouldn't work

[08:59] <jnthn> Return value: 4

[08:59] <jnthn> Loop nr: 99

[08:59] <jnthn> OH HAI

[08:59] <jnthn> Return value: 4

[08:59] <jnthn> Loop nr: 100

[08:59] <jnthn> OH HAI

[08:59] <jnthn> Return value: 4

[08:59] <jnthn> That's how it ends

[09:00] <brrt> oh

[09:00] <brrt> hmmm

[09:00] <brrt> then the jit compiler doesn't run at all

[09:00] <jnthn> oh

[09:00] <jnthn> yeah, I didn't compile with --enable-jit when I did the debug build

[09:00] <jnthn> duh!

[09:00] <brrt> because the jit compiler can't process say() just yet

[09:01] <jnthn> Take 3... :)

[09:01] <brrt> defiicits-as-features ftw :-D

[09:01] <brrt> good luck :-)

[09:03] <jnthn> yeah, crashes :)

[09:05] <brrt> ok, last line?

[09:05] <brrt> :-)

[09:06] * brrt should be able to make a vhd from his hdd but hopes he doesn't have to re-install the hdd to do so

[09:06] <jnthn> brrt: It's a null pointer access on the line dasm_encode(&state, memory);

[09:07] <brrt> ok... that means its probably an issue with memory

[09:07] <brrt> because if the &state was null it'd crash earlier

[09:07] <jnthn> yeah, that's my guess

[09:07] <jnthn> verifying; need to get it to d a non-optimized or it can't tell me what's in memory.

[09:08] <jnthn> yeah, memroy is NULL

[09:08] <jnthn> no pochemu...

[09:09] <jnthn> I'm guessing we're misusing VirtualAlloc somehow.

[09:10] <brrt> hmmm

[09:11] <brrt> i think so too, but no idea why

[09:12] <brrt> http://msdn.microsoft.com/en-us/library/windows/desktop/aa366887%28v=vs.85%29.aspx says this should be ok

[09:12] <lizmat> the documentation is always right  :-)

[09:13] <jnthn> ERROR_INVALID_PARAMETER

[09:13] <brrt> hmmmm

[09:13] <brrt> page mode is wrong?

[09:13] <dalek> MoarVM/moar-jit: d85aa31 | jnthn++ | src/platform/win32/mmap.c:

[09:13] <dalek> MoarVM/moar-jit: Panic if VirtualAlloc fails.

[09:13] <dalek> MoarVM/moar-jit:

[09:13] <dalek> MoarVM/moar-jit: So the error doesn't end up with a NULL pointer use elsewhere.

[09:13] <dalek> MoarVM/moar-jit: review: https://github.com/MoarVM/MoarVM/commit/d85aa3110a

[09:14] <jnthn> That's my guess

[09:15] <brrt> oh, i see

[09:15] <brrt> page_mode arg should be prot_mode

[09:15] <brrt> can you see if that helps?

[09:16] <jnthn> oh, duh

[09:16] <jnthn> yeah, jsut saw that

[09:18] <jnthn> yeah, helps

[09:18] <jnthn> now:

[09:18] <jnthn> Return value: 4

[09:18] <jnthn> Loop nr: 14

[09:18] <jnthn> Return value: 0

[09:18] <jnthn> Loop nr: 15

[09:18] <jnthn> And my debugger is very confused

[09:18] <jnthn> I'm guessing the stack got corrupted ;)

[09:19] <jnthn> At least, I'm pretty sure "4" isn't a valid stack frame location :)

[09:19] <brrt> no

[09:19] <brrt> but i expect so

[09:19] <brrt> good

[09:19] <jnthn> ok :)

[09:20] <dalek> MoarVM/moar-jit: 0bdfcc5 | jnthn++ | src/platform/win32/mmap.c:

[09:20] <dalek> MoarVM/moar-jit: Use correct variable for protection flags.

[09:20] <dalek> MoarVM/moar-jit: review: https://github.com/MoarVM/MoarVM/commit/0bdfcc501b

[09:20] * brrt is working on the remapping of registers for win64 sensitivity

[09:20] <jnthn> Let me know if you want moar testing again at some point :)

[09:20] <brrt> i will

[09:27] <dalek> MoarVM/inline: 8752a80 | jnthn++ | src/spesh/inline.c:

[09:27] <dalek> MoarVM/inline: Try to avoid looking at uninitialized memory.

[09:27] <dalek> MoarVM/inline:

[09:27] <dalek> MoarVM/inline: Hopefully fixes a Valgrind error reported by nwc10++.

[09:27] <dalek> MoarVM/inline: review: https://github.com/MoarVM/MoarVM/commit/8752a809d7

[09:28] *** FROGGS joined
[09:29] <nwc10> MOAR testing...

[09:30] <brrt> nwc10++ for all the testing

[09:32] <jnthn> That's only one of them. Also I should do some $dayjob things and tonight we have an open evening I should go along to. :) So I may not get to the others until rather later, or if there's enough free beer at $event then tomorrow. :)

[09:32] <nwc10> is event's free beer likely to be good?

[09:32] <jnthn> Um

[09:32] <jnthn> Not sure

[09:33] <jnthn> I know there's something good in the office fridge... :)

[09:33] <nwc10> there's something good in *our* office fridge, but it's for this evening, elsewhere

[09:34] <jnthn> Office admin: "What beer should we get for the evening team meetup?" Us: "IPAs...imperial stouts..." :)

[09:34] <jnthn> And we didn't drink all the things. So I think there's some nice stuff left from then :)

[09:34] <nwc10> http://www.westons-cider.co.uk/products/wyld-wood/

[09:34] * jnthn hasn't really had cider in quite a while...

[09:35] <nwc10> jnthn: is "what sort of beer do you like?" one of the pre-interviewing screening questions?

[09:35] <nwc10> the Austrians don't really seem to understand cider (yet), despite growing apples

[09:35] *** donaldh joined
[09:35] <nwc10> and no-one in Frankfurt has figured out that you can ship apfelwein here and flog it

[09:36] * brrt 's favorite beer: http://www.latrappetrappist.com/en-en/trappist-beers/la-trappe-witte-trappist/

[09:37] <nwc10> and it seems that outside of the UK, Carlsberg think that it's just fine to produce Somersby in that well known cider making country, Croatia.

[09:37] <nwc10> :-(

[09:37] <jnthn> brrt: ooh, not bad...I prefer the La Trappe Tripel, though... :)

[09:38] <jnthn> huh, there's a la trappe oak aged?!

[09:38] <brrt> it seems so

[09:38] <jnthn> Where can I buy this stuff :D

[09:39] * xiaomiao prefers Rochefort

[09:39] <xiaomiao> but good beer is good, so I'm not going to complain :)

[09:39] <jnthn> xiaomiao: ooh, which Rochefort?

[09:39] * jnthn likes 10 best :)

[09:39] <xiaomiao> jnthn: depends on my mood, the 10 is sometimes a bit heavy

[09:39] <xiaomiao> limits me to two beers an evening

[09:40] <xiaomiao> the 6 is a lot more social-compatible ;)

[09:40] <jnthn> True :)

[09:40] <brrt> i have no idea, 'witte trappist' can't be bought in most dutch shops at all :-(

[09:40] <jnthn> Yeah. I can get the quadrupel la trappe ordered at systemet here in Sweden, it seems, but no sign of the oak aged

[09:41] <jnthn> ooh, I can order witte trappist too :)

[09:41] <xiaomiao> I'm a bit sad that the Cantillon is no longer distributed by the local distributors

[09:41] <xiaomiao> that's a weird Kriek :)

[09:42] <jnthn> Gee, they sell a 750ml bottle of the La Trappe Quadrupel. That's either a long evening, or for sharing. :)

[09:42] <brrt> its a nice, light white beer, and if you're having it then i'm having it

[09:42] <brrt> sharing :-)

[09:44] <jnthn> :)

[09:44] * jnthn figures he should stop looking at the beer shop site and hack on scary thing instead.

[09:45] <nwc10> only until the tests start running...

[09:45] <jnthn> Oh, by scary thing I menat my little $dayjob project :)

[09:46] * brrt would have wanted scary $dayjob project when he had a $dayjob

[09:46] <brrt> anyway, can i ask one more thing?

[09:47] <jnthn> Sure

[09:48] <jnthn> .oO( So long as it's not, "so what the heck are you doing with IQbservable<T> at $dayjob anyway"... :) )

[09:49] <brrt> it turns out that there are no less than 6 general-purpose callee-saved registers in both windows and SysV x64 call conventions

[09:49] <brrt> (and that i've been overwriting them unwittingly)

[09:50] <brrt> anyway, i think it'd be a good idea to move special-purpose moarvm variables (like, register work base pointer, register arg base pointer) to those registers

[09:50] <jnthn> Yeah, makes sense.

[09:50] <brrt> totally unscientifically i also know that most compilers most of the time do not use the r12-15 registers

[09:51] <jnthn> If we've a load of free registers, then spesh_slots is worth having in one too

[09:51] <jnthn> At least, if you see an instruction where we'll look at it.

[09:52] <brrt> hmmm

[09:52] <brrt> 6 slots

[09:52] <brrt> but i do have to save 'm on stack on entry

[09:52] <jnthn> Yeah

[09:52] <jnthn> That's why I said "where we'll look at it" :)

[09:52] <jnthn> Oh, though...

[09:52] <jnthn> Anything that's in a spesh slot and in gen2 doesn't need looking up

[09:53] <jnthn> Can just shove the static memory address right into the machine code.

[09:53] <brrt> yes

[09:54] <brrt> although i'm ambiguous between static memory addresses in machine code and a possible 'data' segment in the output

[09:54] <brrt> if the latter would be possible, it might save some instructions

[09:54] <brrt> or not

[09:54] <brrt> i don't know

[09:54] <jnthn> :)

[09:56] <brrt> anyway, its a bit of puzzle work but i'll get there :-)

[09:58] <nwc10> jnthn: for later, ASAN results:  8752a809d7083b5b7

[09:58] <nwc10> er

[09:58] <nwc10> http://paste.scsys.co.uk/394090

[10:10] <brrt> &lunch, i'll be offline this evening, too

[10:10] <brrt> this afternoon, i mean

[10:11] *** brrt left
[10:34] *** donaldh joined
[10:42] <nwc10> jnthn: for later, valgrind results: 8752a809d7083b5b7

[10:42] <nwc10> bother.

[10:42] <nwc10> http://paste.scsys.co.uk/394108

[10:42] <nwc10> do you think I can do that a third time? :-)

[12:01] *** cognominal joined
[12:21] *** jnap joined
[13:19] *** woolfy joined
[13:37] <timotimo> it seems like the lazy hashes for qast nodes thing reduced the speed of core setting compilation by about half a second

[13:44] <lizmat> that feels like noise to me, fwiw

[13:44] <nwc10> are you able to measure a difference in memory use?

[13:44] <timotimo> i took three before and three after measurements

[13:44] <timotimo> yes, 11 mb less

[13:44] <timotimo> out of ~760mb

[13:44] <nwc10> so that's not noise :-)

[13:44] <timotimo> that part isn't, no.

[13:45] <timotimo> there's still things that break; i'll have to look closer at that

[13:45] <lizmat> and CPU usage, was that down?

[13:45] <lizmat> or up?

[13:45] <timotimo> didn't look at that

[13:48] <timotimo> and i rebooted to get new kernel and gpu drivers

[13:48] <timotimo> and i didn't save the stuff

[13:57] <FROGGS> timotimo: you removed the 'method hash is associative_delegate' or what it is called?

[13:58] <timotimo> has %!annotations is associative_delegate

[13:58] <timotimo> yes, i removed that

[13:58] <FROGGS> ahh, yes

[13:58] <FROGGS> timotimo++

[14:04] *** btyler joined
[14:11] <timotimo> hold you ++es for a moment; nqp currently only builds on moar :)

[14:11] <timotimo> and p5 regexes are bust, too

[14:14] <FROGGS> who needs p5 regexes anyway :P

[14:14] <FROGGS> and you mix in a role where we need to store informations?

[14:17] <timotimo> yes

[14:17] <timotimo> and the "hash" method seems to not be used at all so far

[14:17] <timotimo> so i could just kick that

[14:19] <timotimo> i don't understand why parrot gets a NPMCA in get_bool in this particular method

[14:19] <FROGGS> can you paste your diff and the backtrace?

[14:20] <timotimo> and the jvm has a NullPointerException

[14:20] <timotimo> the branches are called "qast_lazy_annotations" in nqp

[14:21] <timotimo> https://gist.github.com/timo/3a9cf0472c0f84642dac

[14:21] <timotimo> the line numbers are probably bogus, though

[14:22] <timotimo> -                $ast := $ast.ann('sink') if nqp::defined($ast.ann('sink'));

[14:22] <timotimo> +                $ast := $ast.ann('sink') if $ast.has_ann('sink');

[14:22] <timotimo> this is the only local patch i have and it doesn't change the problem

[14:23] <FROGGS> and that $ast has that method has_ann?

[14:24] <FROGGS> ohh

[14:24] <FROGGS> now I see how you do it :o)

[14:25] <timotimo> aye :)

[14:25] <timotimo> the only thing that's not straightforard in this branch is finding where $foo<...> refers to an annotation rather than to an actual hash

[14:28] <FROGGS> *nod*

[14:34] *** lizmat_ joined
[14:34] <timotimo> will you try to reproduce an fix? :)

[14:34] <FROGGS> I don't see why it NPEsses...

[14:35] <FROGGS> can do that in at bit...

[14:36] <FROGGS> a*

[14:37] *** brrt joined
[14:44] <timotimo> that'd be swell! :)

[14:47] <FROGGS> spiffy!

[14:47] <lizmat> FROGGS:: are you still working on the CompUnitRepo::Local stuff, or can I do there whatever I want!

[14:47] <lizmat> :-)

[14:48] <FROGGS> hehe

[14:48] <FROGGS> I'm not sure you can do whatever you want... but no, I am not working on that bit atm

[14:50] <dalek> MoarVM/moar-jit: f533b40 | (Bart Wiegmans)++ | src/ (5 files):

[14:50] <dalek> MoarVM/moar-jit: Use abstracted registers for variable access.

[14:50] <dalek> MoarVM/moar-jit:

[14:50] <dalek> MoarVM/moar-jit: This will allow us to work more easily with the ABI

[14:50] <dalek> MoarVM/moar-jit: differences between Win64 and the rest of the world.

[14:50] <dalek> MoarVM/moar-jit: Also using callee-save registers for special interpreter

[14:50] <dalek> MoarVM/moar-jit: variables such as our work register base. This makes

[14:50] <dalek> MoarVM/moar-jit: entry and exit somewhat more expensive but callouts

[14:50] <dalek> MoarVM/moar-jit: from JIT to C are cheaper.

[14:50] <dalek> MoarVM/moar-jit: review: https://github.com/MoarVM/MoarVM/commit/f533b4012b

[14:52] <brrt> now i'll have to figure out how luajit passes arguments to dynasm

[14:53] <FROGGS> and then? celebrate? :o)

[14:54] <lizmat> FROGGS: ok, I will take care of the CURLies then  :-)

[14:55] <brrt> i.e. the luajit sources use if/else statements to discriminate between win64 / x86 / rest

[14:55] <brrt> and i need to figure out how they do that

[14:55] <brrt> and yes, then celebrate

[14:55] <FROGGS> yeah, I'm taking care of fetching MIRRORED.BY and p6dists.json.gz... the CUR's are working good enough for me atm

[14:56] <FROGGS> :o)

[14:57] <brrt> btw, have i said sufficient nasty things about the whole register-argument-passing things yet?

[14:57] <brrt> i know /one/ good thing about it

[14:57] <brrt> which is that the threadcontext argument passed to all functions doesn't actually have to be copied

[14:58] <timotimo> that's helpful

[14:58] <brrt> i.e. it can - in principle - stay in rdi / rcx

[14:58] <brrt> FOREVER

[14:58] <timotimo> dun dun DUUUUUUUUN

[14:58] <brrt> as long as nobody else wants that argument, that is

[14:59] <timotimo> i don't want to haev that argument with you

[14:59] <brrt> (that means it is probably more efficient to pass it to every function than to have functions that don't take it as an argument)

[14:59] <brrt> not that sort of argument

[14:59] <brrt> i mean parameter

[15:00] <brrt> :-)

[15:14] <brrt> ugh, minor isssue, dynasm will build different things for windows and linux

[15:14] <brrt> which is annoying

[15:14] <brrt> because

[15:14] <brrt> i want the output c file to be checked in

[15:14] <brrt> so that regular folks don't have to have lua installed

[15:15] <brrt> or

[15:15] <FROGGS> well, then check several in, and Configure.pl picks the correct one and copies it

[15:15] <brrt> i may have a solution

[15:15] <brrt> thats my solution :-)

[15:15] <FROGGS> :o)

[15:18] <FROGGS> gorram it... perl6-p is so annoyingly slow

[15:19] <timotimo> if only we hadn't started work on moarvm, we wouldn't be complaining about perl6-p and -j being too slow :P

[15:19] <FROGGS> *g*

[15:19] <FROGGS> true

[15:20] <brrt> they'd be complaining that perl6 is slow, per se :-p

[15:20] <timotimo> heh.

[15:20] <brrt> as they did, in fact

[15:20] <brrt> hmm

[15:21] <timotimo> except after we started focusing on performance more, people started saying "how can you be working on performance if 6.0.0 isn't even finished?"

[15:21] <timotimo> and before that they said "this is unusably slow!"

[15:21] <FROGGS> they always have excuses for not using it :o)

[15:22] <timotimo> more than just "not using", though

[15:22] <FROGGS> or just for ranting

[15:22] <brrt> nobody uses any language before anybody makes any money with it

[15:22] <brrt> i.e. who used ruby before 37 signals got rich?

[15:22] <timotimo> still wondering if maybe i should build a json parser that is faster than grammar-based by doing dirty tricks?

[15:22] <brrt> 'enthusiasts'. exactl

[15:22] <brrt> that, or speed up grammars :o)

[15:23] <timotimo> well, having the inlining work will be very good for that purpose

[15:23] <brrt> anyway, i'm pondering the 'correct' route for the dasm generation a bit more, because i don't want to bubble the polymorphism up too far

[15:24] <timotimo> i don't know how to interpret that statement

[15:25] <brrt> i need to hack the makefile to have dynasm output the correct .c file for both supported architectures

[15:26] <brrt> basically, i have one file, foo.dasc, and i want to output foo-win64.dasc and foo-posix.dasc, or something like that

[15:27] <brrt> thats possible right? but with hardcoding

[15:27] <brrt> i have 'm softcoded now

[15:28] <brrt> maybe 'this is easy with hardcoding' is the right answer, anyway

[15:28] <timotimo> that seems doable; the configure.pl knows what to do, no?

[15:28] <brrt> yes

[15:28] <brrt> i'll get there, dinner first :-)

[15:28] *** brrt left
[16:19] *** FROGGS joined
[16:22] *** woolfy left
[17:24] *** mann joined
[17:30] <mann> I'm new to IRC, is this the channel i should be in for RVM help?

[17:30] *** jnap1 joined
[17:32] <btyler> mann: this is moarvm, a virtual machine for perl6. are you looking for R(uby) V(ersion) M(anager) in #rvm?

[17:33] <mann> I am. When i try and join that channel though it spits back to me that I'm not identified with services.

[17:34] <mann> i only get that message with #rvm not with this moarvm channel or ruby-lang channel.

[17:34] <mann> not sure what i'm doing incorrectly

[17:35] <FROGGS> mann, I can join #rvm without problems

[17:36] <FROGGS> but... perhaps they allow only ppl who have registered their nickname?

[17:36] <FROGGS> (I have)

[17:38] <mann> frogg, i followed the instrctions to register my name and it seemed to work. butnot sure why it not being accepted for #rvm. I'll go back and try again. thanks for the guidance frogg and btyler

[17:40] <FROGGS> you're welcome

[17:40] <mann> frogg, here is the specific message i get..#rvm :Cannot join channel (+r) - you need to be identified with services

[17:41] <FROGGS> mann: see https://freenode.net/faq.shtml#plusr

[17:41] <mann> FROGGS, will do. thanks.

[17:46] <mann> FROGGS, that helped me realize that IRC sends an email to email address that i need to then paste a snippet into the irc client to finish the registration. now i can get into #rvm. kudos.

[17:47] <FROGGS> :o)

[17:50] <japhb_> Only on a perl6-community channel would I see someone so kindly help a newbie attempting to go somehwere else ...

[17:50] <japhb_> FROGGS++

[18:02] *** mann left
[18:18] <[Coke]> *++

[18:54] *** krunen joined
[19:05] <rurban_> do you know something about unicode whitespace changes lately? parrot with icu 5.2 cannot parse some character names anymore: https://github.com/rurban/roast/commit/f4b33dcd8d3ca9379fdc5ee331c606649e1de52e

[19:05] <rurban_> "LINE FEED (LF)"

[19:05] <rurban_> "CARRIAGE RETURN (CR)"

[19:05] <rurban_> "NULL"

[19:05] <rurban_> "NEXT LINE (NEL)"

[19:05] <rurban_> "CHARACTER TABULATION"

[19:07] <FROGGS> MoarVM/UNIDATA/UnicodeData.txt:11:000A;<control>;Cc;0;B;;;;;N;LINE FEED (LF);;;;

[19:07] <FROGGS> that is Unicode 6.3 btw

[19:07] <FROGGS> so, MoarVM looks up that name there also, icu perhaps does not

[19:08] <FROGGS> (or we have to query it differently)

[19:09] <rurban_> http://unicode-search.net/unicode-namesearch.pl?term=LINE+FEED+%28LF%29&.submit=Submit says "LINE FEED (LF)" is deprecated

[19:10] <rurban_> But it doesn't tell me the canonical name for it

[19:14] <rurban_> Yes, I've got the same in my perl5 UnicodeData.txt line. A parrot problem

[20:00] *** cognominal__ joined
[21:01] <dalek> MoarVM/moar-jit: 700c96b | (Bart Wiegmans)++ | / (6 files):

[21:01] <dalek> MoarVM/moar-jit: Add support for win32-x64 ABI

[21:01] <dalek> MoarVM/moar-jit:

[21:01] <dalek> MoarVM/moar-jit: This means some hardcoding, but the building part

[21:01] <dalek> MoarVM/moar-jit: seems to wok. I don't know if the changes to the

[21:01] <dalek> MoarVM/moar-jit: actually work, that would require actual testing :-)

[21:01] <dalek> MoarVM/moar-jit: review: https://github.com/MoarVM/MoarVM/commit/700c96b74f

[21:09] <jnthn> evening, #moarvm

[21:10] <timotimo> hi there jnthn

[21:10] <FROGGS> hi jnthn

[21:11] <jnthn> 2 year we're-at-this-office party actually had nice beer \o/

[21:11] <FROGGS> \o/

[21:14] * [Coke] cannot remember the last time he had officebier

[23:06] *** FROGGS joined
[23:49] *** oetiker joined
