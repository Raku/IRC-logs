[00:00] <[Coke]> jnthn: should I start my build over now? ;)

[00:02] * [Coke] is not

[00:05] *** harrow joined
[00:35] *** jnap joined
[02:02] *** jnap joined
[02:18] <[Coke]> another moar run: 25824 passes.

[02:19] <[Coke]> r: say 25824 / 28346

[02:19] <camelia> rakudo-parrot 5669b2, rakudo-jvm 5669b2: OUTPUT«0.911028␤»

[02:19] <[Coke]> "that escalated quickly"

[02:20] <[Coke]> down to 58 tests aborting.

[02:28] <japhb_> 91.1% ?!  Holy cow!

[02:29] <diakopter> well in terms of total coverage of the synopses it's probably much lower ;)

[03:07] <lue> And there's still the issue of not being able to install r-m outside the repo...

[03:07] <lue> s/install/install and use/

[03:43] *** cognominal joined
[04:15] *** cognominal joined
[04:24] *** jnap joined
[05:17] *** lue joined
[05:24] *** jnap joined
[05:30] *** ggoebel1111 joined
[05:33] *** dagurval_ joined
[05:34] *** woolfy1 joined
[05:35] *** nwc10_ joined
[05:36] *** arnsholt joined
[05:36] *** FROGGS joined
[05:36] *** cognominal joined
[05:37] *** benabik joined
[05:37] *** camelia joined
[05:48] *** nwc10 joined
[05:49] *** jnthn joined
[05:49] *** benabik_ joined
[06:25] *** FROGGS[mobile] joined
[06:25] *** jnap joined
[07:26] *** jnap joined
[07:57] <nwc10> jnthn: lots-of-GC run has reached tests

[08:27] *** jnap joined
[08:34] *** odc joined
[08:42] *** FROGGS joined
[09:15] <masak> \o/

[09:27] *** jnap joined
[10:12] *** eternaleye joined
[10:26] *** FROGGS[mobile] joined
[10:28] *** jnap joined
[10:30] <jnthn> We're on course to pass 90%?!

[10:30] <jnthn> Whoa...

[10:31] <jnthn> I'd hoped the Jan release would manage at least 75%... :)

[10:31] <moritz> still plenty of time to botch it until then :-)

[10:32] <jnthn> :P

[10:33] <jnthn> OK, new goal can be "at least 95%" :P

[10:34] <jnthn> Also, should really resolve the OSX build, and make "make install" work, as lue mentions.

[10:34] <FROGGS> and the "use from outside"

[10:35] <jnthn> Well, that's part of make "make install" work...it's not a very good install if it doesn't work from outside the install directory :P

[10:35] <jnthn> Or build directory, or whatever.

[10:35] <FROGGS> you are pedantic :P

[10:40] * moritz recompiles moar-support on his $work machine, after two weeks of absence

[10:56] <masak> jnthn: is "make `make` work without `make install`" also on the todo list? :)

[10:56] <masak> jnthn: as in, ./moar doesn't find libmoar.so unless `make install` has been run, for some reason.

[10:58] <jnthn> masak: Works fine for me...

[10:59] <jnthn> masak: And didn't hear anybody else mention that...

[10:59] <jnthn> masak: Wait...are we talking about MoarVM itself or Rakudo?

[11:02] <masak> MoarVM itself.

[11:02] <jnthn> oh...

[11:02] <jnthn> Well, also works for me, so... :)

[11:03] * jnthn leaves that to Linux folks :)

[11:03] * FROGGS is not even listening... *lalalalaalaa*

[11:05] <jnthn> bah :P

[11:07] <jnthn> So, is there anybody here who knows enough about OSX linking to fix that side of things? :)

[11:08] <masak> FROGGS: http://tvtropes.org/pmwiki/pmwiki.php/Main/IgnoringBySinging :)

[11:11] <FROGGS> good that somebody put all that information in a wiki :o)

[11:12] <masak> serious warning: that wiki is *big*, and very very interesting.

[11:12] <jnthn> .oO( unless you never watch TV, then you wonder...what the heck... :) )

[11:14] <masak> jnthn: it also covers movies, books, commercials, news, comics, radio, tabletop games, theater, and video games.

[11:14] <jnthn> o.O

[11:29] *** jnap joined
[11:30] <dalek> MoarVM: c63263f | jnthn++ | src/6model/reprs/MVMCode. (2 files):

[11:30] <dalek> MoarVM: Preparations for supporting state variables.

[11:30] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c63263f44a

[11:43] <dalek> MoarVM: e022908 | jnthn++ | src/core/frame.c:

[11:43] <dalek> MoarVM: Implement state variable save/restore.

[11:43] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e022908a00

[11:45] <[Coke]> https://gist.github.com/coke/8250608/ is updated. the lower segfault count before was probably due to the shorter time limit I ran the tests under, so they probably reported as Killed on the last round.

[11:54] <[Coke]> http://feather.perl6.nl/~coke/moar.out updated with last night's off-schedule run.

[11:56] <[Coke]> diakopter: you did the last unicode fix: lots of failures in S05-mass/properties-block.t and S05-mass/properties-derived.rakudo.moar

[11:57] <[Coke]> 291 fails with "Don't match.*related"

[11:59] <[Coke]> r: say 291 / 2363 # percent those fails of total

[11:59] <camelia> rakudo-parrot 5669b2, rakudo-jvm 5669b2: OUTPUT«0.123149␤»

[12:01] <dalek> MoarVM: 02dbfc3 | jnthn++ | src/core/frame. (2 files):

[12:01] <dalek> MoarVM: Add flag for state init, and space for HLL flags.

[12:01] <dalek> MoarVM:

[12:01] <dalek> MoarVM: The latter will be used by Rakudo for flagging PRE, FIRST, etc.

[12:01] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/02dbfc3bbb

[12:05] <[Coke]> morning jnthn++

[12:06] <jnthn> o/ [Coke]

[12:07] <jnthn> Thanks for latest report. seems S03-junctions/autothreading.t was regressed on...think I know why

[12:07] <jnthn> (We did pass it at one point...)

[12:30] *** jnap joined
[12:46] <dalek> MoarVM: be4fdfa | jnthn++ | / (6 files):

[12:46] <dalek> MoarVM: Stub continuation ops.

[12:46] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/be4fdfa804

[12:47] <FROGGS> p: say "föö".encode("ISO-8859-1").WHAT # jnthn, this thing should have a slot_type of MVM_ARRAY_I8, right?

[12:47] <camelia> rakudo-parrot 5669b2: OUTPUT«(Blob[uint8])␤»

[12:47] <jnthn> FROGGS: Well, or U8...

[12:47] <FROGGS> because slot_type is 2, which is MVM_ARRAY_I64

[12:47] <jnthn> Oh...fail

[12:47] * FROGGS .oO( there is no U in Team America )

[12:48] <FROGGS> where would that wants fixing?

[12:48] <jnthn> Depends what's wrong, really...

[12:49] <jnthn> It could actually be that P6int doesn't yet pay attention to the size passed to it as part of repr composition...

[12:49] <FROGGS> my native uint8 is repr('P6int') is Int is nativesize(8) is unsigned { }

[12:49] <FROGGS> hmm

[12:51] <FROGGS> P6int always does this at line 44: spec.bits            = sizeof(MVMint64) * 8;

[12:52] <jnthn> Ah, then yeah, that's what is missing, I guess.

[12:52] <jnthn> Take a look at the Parrot or JVM impls of P6int for inspiration.

[12:55] <FROGGS> yeah, currently doing that :o)

[13:30] *** jnap joined
[13:42] <arnsholt> FROGGS: The P6int code make sense to you? I think I implemented parts of the Parrot one at least

[13:42] <FROGGS> arnsholt: sort of

[13:43] <FROGGS> currently I try to understand why its compose function is not get called

[13:45] <arnsholt> That's odd. That's pretty much only NQP code I think, and there's lots of stuff that'll break if REPR compose doesn't work

[13:45] <FROGGS> https://gist.github.com/FROGGS/04f5ffded5f1515f236d

[13:46] <jnthn> FROGGS: Sure looks like it should be called...

[13:46] <jnthn> FROGGS: It's certainly being put into the REPR table?

[13:47] <jnthn> FROGGS: Oh...when are you expecting it to be called?

[13:47] <jnthn> FROGGS: compose is called in REPR compilation

[13:47] <jnthn> FROGGS: The repr data then is serialized/deserialized

[13:47] <jnthn> See the patch I did for VMArray yesterday on this topic.

[13:47] <FROGGS> I dunno, when I run: perl6-m -e 'my int8 $x' ?

[13:47] <FROGGS> k

[13:47] <jnthn> No, compose happens during setting compilation.

[13:47] <jnthn> If you do that I bet you'll see your debug prints.

[13:48] <FROGGS> ohh

[13:48] <jnthn> So, serialize_repr_data is needed, I think

[13:48] <[Coke]> I posted https://gist.github.com/coke/8250608/#file-moarborts-p5 , which is the script I'm using to generate the failure categorizations. Hopefully it won't need to be around too long to be cleaned up.

[13:48] <jnthn> And corresponding deserialize

[13:49] <jnthn> [Coke]: Hopefully. Been eating my way through some of the errors in the latest one :)

[13:49] <jnthn> [Coke]: How long until today's run starts? :)

[13:49] <[Coke]> host machine says 13:49, run scheduled to start at 14:30

[13:50] <jnthn> k :)

[13:50] <[Coke]> and you've already fixed a few since last intraday run

[13:50] <jnthn> yes :)

[13:50] <jnthn> In the 100s, hopefully

[13:52] <[Coke]> looks like moar stat might be dying on missing stuff rather than returning fales.

[13:52] <[Coke]> *False

[13:52] <[Coke]> t/spec/S16-filehandles/filetest.rakudo.moar

[13:52] <[Coke]> er.

[13:53] <[Coke]> ok 'doesnotexist'.IO !~~ :r, "~~:r returns false on non-existent directories";

[13:53] <[Coke]> looks like ~~:d worked, though.

[13:57] <FROGGS> jnthn: was it intentional that lines 828 and 835 are identical? https://github.com/MoarVM/MoarVM/commit/565df082160f930b2b917bca641e22c40f1de980#diff-d1e9ca9323ca986d50d1be8243601d42R828

[14:00] <jnthn> FROGGS: oops...no

[14:00] <jnthn> 835 can go

[14:00] <FROGGS> k

[14:00] <jnthn> FROGGS++

[14:02] <dalek> MoarVM: cd5d7bd | (Tobias Leich)++ | src/6model/reprs/MVMArray.c:

[14:02] <dalek> MoarVM: remove duplicate ASSIGN_REF

[14:02] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cd5d7bd57a

[14:07] <FROGGS> brb &

[14:12] *** jnap joined
[14:24] *** FROGGS joined
[14:38] <nwc10> jnthn: GC torture passed all NQP tests

[14:38] <nwc10> has SEGVd in Rakudo build, so must be a(nother) fromspace read, but not yet figured out what

[14:39] <nwc10> I forget whether I lobbed a kludge-like "not ideal at all" patch to IRC to the list for OS X. I stole what Perl 5 does.

[14:41] <diakopter> stealer++

[14:43] <jnthn> nwc10: (torture) yay

[14:44] <jnthn> nwc10: If the OS X patch makes things workier I'll happily take it...

[14:45] <nwc10> I haven't actually had lunch yet :-)

[14:45] * jnthn only just did... :)

[14:45] <nwc10> OK, technically, I've had half a lunch, at the hospital, before we made our escape.

[14:45] <FROGGS> O.o

[14:46] * FROGGS hopes everybody is well

[14:48] <nwc10> we think that they are

[14:50] <dalek> MoarVM: f6d723a | jnthn++ | src/core/hll. (2 files):

[14:50] <dalek> MoarVM: Store HLL exit handler.

[14:50] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f6d723a72e

[14:50] <dalek> MoarVM: d96afd4 | jnthn++ | / (6 files):

[14:50] <dalek> MoarVM: Add has_exit_handler to frame; bytecode updates.

[14:50] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d96afd4862

[14:51] * [Coke] notes that the niecza run is still only at S04-statements/return.t

[14:51] <[Coke]> (still some time before rm starts.)

[14:52] <jnthn> [Coke]: You snapshotted the Moar etc. you'll run with by now, though? :)

[14:53] <jnthn> [Coke]: Or it builds at the start of the run?

[14:53] <jnthn> s/builds/checks out/

[14:53] <[Coke]> it grabs spec at the beginning once, then grabs each repo as it does that repo. pugs/niecza/r.m/r.p/r.j

[14:53] <[Coke]> I'm lazy, this keeps things self contained.

[14:54] <jnthn> k :)

[14:54] <[Coke]> ugh, feels like -20ºC out.

[14:55] <jnthn> Wow. That's properly cold. :)

[14:55] <diakopter> it's 0C here

[14:55] <diakopter> in the daytime!

[14:55] <[Coke]> temps will hit positive C again on Friday.

[14:56] <jnthn> diakopter: lame :P

[15:13] <FROGGS> yay, sized P6ints compile now! (at least nqp)

[15:14] <jnthn> yay

[15:18] <FROGGS> jnthn: makes sense to do that with nums too, right?

[15:18] <jnthn> FROGGS: aye

[15:19] *** jnap joined
[15:24] <FROGGS> hmpf, it compiles fine, but does not work :o(

[15:27] <FROGGS> I inserted debug stuff now in compose and reconfigure rakudo

[15:29] <FROGGS> ahh, I see it

[15:29] <jnthn> Man, this exit handler stuff is fiddly...

[15:34] <FROGGS> in compose() I am looking for a key "int" in that info hash, and that seems to be wrong...

[15:35] <FROGGS> it seems to be "integer" in parrot...

[15:36] <jnthn> The repr compose protocol is spec'd in some doc in docs/ in NQP

[15:36] <FROGGS> you rtfm'd me?

[15:36] <FROGGS> :P

[15:37] <diakopter> wtfm, too ;)

[15:37] <jnthn> :P

[15:37] <FROGGS> cool, there is stuff

[15:37] <jnthn> I think the section is actually called "integer" on all backends, anyways...

[15:39] <dalek> MoarVM: becf861 | jnthn++ | lib/MAST/Nodes.nqp:

[15:39] <dalek> MoarVM: Add missing has_exit_handler method.

[15:39] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/becf861ff7

[15:39] <dalek> MoarVM: a2d2be3 | jnthn++ | src/core/exceptions.c:

[15:39] <dalek> MoarVM: Refactor in preparation for exit handler support.

[15:39] <dalek> MoarVM:

[15:39] <dalek> MoarVM: Factors all the unwind logic out, and ensures we do it after all the

[15:39] <dalek> MoarVM: other cleanup work, so that we're ready to head back into the interp

[15:39] <dalek> MoarVM: if we need to run a LEAVE, etc.

[15:39] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a2d2be33d8

[15:39] <dalek> MoarVM: f3f3e38 | jnthn++ | src/core/ (3 files):

[15:39] <dalek> MoarVM: Bring all unwind logic into frame.c.

[15:39] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f3f3e38c60

[15:44] *** ggoebel1111 joined
[15:45] *** jnap joined
[16:15] <timotimo> oooh so many failing unicode tests

[16:16] <diakopter> there are?

[16:16] <timotimo> yup

[16:16] <diakopter> listed where

[16:16] <timotimo> http://feather.perl6.nl/~coke/moar.out

[16:17] <FROGGS> wth is going on... I do reader->read_int(...), and the thing I get looks like 1 when printf'd, but does not equal to 1 O.o

[16:18] <timotimo> it must be 1 in a different base or something!

[16:18] <timotimo> (the last time i had something like that, there was a decont missing, but that's probably not the case here)

[16:18] <diakopter> wat.. "maximum recursion depth exceeded"

[16:18] <diakopter> since when do we have a maximum recursion depth

[16:18] <jnthn> We...don't...

[16:18] <FROGGS> timotimo: no it is a MVMint64

[16:19] <timotimo> diakopter: it's probably a fudge

[16:19] <FROGGS> the optimizer does that, no?

[16:19] <diakopter> oh

[16:21] <diakopter> RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN

[16:26] <FROGGS> ahh, had to rebuild nqp...

[16:45] <dalek> MoarVM: 4199be9 | jnthn++ | src/core/frame.c:

[16:45] <dalek> MoarVM: Implement firing exit handler in return case.

[16:45] <dalek> MoarVM:

[16:45] <dalek> MoarVM: Exception unwind case still to come.

[16:45] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4199be93a8

[16:48] <jnthn> ...and I still didn't do the hard bit. :)

[16:48] <diakopter> ?

[16:48] <diakopter> exception unwind?

[16:49] <jnthn> Well, running block exit handlers during the unwind.

[16:49] <diakopter> I saw a note about running exit handlers during continuation control

[16:49] <diakopter> when do those run

[16:49] <jnthn> Hmm :)

[16:49] <jnthn> As you unwind the stack.

[16:50] <diakopter> but the frame can be re-entered

[16:50] <diakopter> so they're just suspended

[16:50] <jnthn> For a CATCH handler, the exception runs on the stack top

[16:50] <jnthn> Right, for taking a continuation we just suspend, not unwind.

[16:50] <jnthn> I think even on JVM we get that right though

[16:50] <diakopter> so do we need to queue up all un-controlled continuations to be exited at shutdown?

[16:50] <jnthn> Oh, hmm...

[16:50] <jnthn> I hadn't imagined doing that, no.

[16:51] <jnthn> I mean, if you do a gather/take and you exit the program before you've taken all you can (maybe 'cus there's an infinite number of things), I don't think the LEAVE in the gather is spec'd to trigger.

[16:51] <jnthn> Though it's an interesting edge case...

[16:52] <FROGGS> umm, Cannot invoke null object  in nqp

[16:52] <FROGGS> :(

[16:52] <jnthn> Congrats!

[16:52] <jnthn> :(

[16:52] <diakopter> the purist in me (ok, me) wants leave to guarantee to be run

[16:52] <diakopter> or something to be guaranteed to run

[16:53] <jnthn> Trying to get that to work will be all kinds of ugly...

[16:53] <diakopter> ok

[16:53] <jnthn> I'd leave it for now...maybe the spec will some day say we must run such things...but I kinda hope not :)

[16:54] <FROGGS> jnthn: I don't think that is due to my changes

[16:55] <jnthn> FROGGS: Make sure it ain't that you pulled down e.g. my NQP change but not my MoarVM one...

[16:55] <FROGGS> I pulled both

[16:56] <jnthn> How'd you get the error?

[16:56] <FROGGS> I am compiling against NQP HEAD now

[16:56] <FROGGS> just a reconfigure+make in nqp

[16:56] <FROGGS> jnthn: it explodes using MoarVM HEAD too

[16:56] <jnthn> ah, wtf...

[16:56] <jnthn> make test passed

[16:57] <FROGGS> you get it too?

[16:57] <jnthn> yeah...

[16:57] <jnthn> wtf.

[16:57] <FROGGS> k, so I don't have to paste a gist :o)

[16:57] <FROGGS> brb, dinner &

[16:58] <benabik> Woo, me too.

[16:59] <jnthn> Hm...it things that an NQP block has an exit handler. That should never happen...

[17:01] <jnthn> argh, I know why

[17:06] <dalek> MoarVM: 9274511 | jnthn++ | / (3 files):

[17:06] <dalek> MoarVM: Unbust NQP stage1 build.

[17:06] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/927451144f

[17:06] <jnthn> Sorry 'bout that. Was one of those annoying ones where make test passed

[17:06] <jnthn> And once you had a stage2 built you were never gonna see the error in make test.

[17:11] <FROGGS> np :o)

[17:16] <[Coke]> r: say 26217 - 24356 # moar increase.

[17:16] <camelia> rakudo-parrot 5669b2, rakudo-jvm 5669b2: OUTPUT«1861␤»

[17:16] <[Coke]> (from yesterday, not from last night)

[17:16] <jnthn> That's today's gain over yesterday? :)

[17:16] <jnthn> Nice :)

[17:17] <[Coke]> r: say 26217 - 258224 # from last night

[17:17] <camelia> rakudo-parrot 5669b2, rakudo-jvm 5669b2: OUTPUT«-232007␤»

[17:17] <[Coke]> r: say 26217 - 25824 # from last night

[17:17] <camelia> rakudo-parrot 5669b2, rakudo-jvm 5669b2: OUTPUT«393␤»

[17:18] <[Coke]> r: say 26217 / 28453 # assuming jvm doesn't move.

[17:18] <camelia> rakudo-parrot 5669b2, rakudo-jvm 5669b2: OUTPUT«0.921414␤»

[17:18] <jnthn> o.O

[17:18] <jnthn> Still over 2000 tests to go :)

[17:20] <[Coke]> 1934 failures remain, says test_summary

[17:34] <FROGGS> I'll push stuff in a bit when it passes my tests...

[17:38] <dalek> MoarVM: a433d81 | jnthn++ | src/core/frame. (2 files):

[17:38] <dalek> MoarVM: Mostly-complete LEAVE/unwind interaction.

[17:38] <dalek> MoarVM:

[17:38] <dalek> MoarVM: One case still to go; needs careful consideration or we get a GC bug,

[17:38] <dalek> MoarVM: so for now just die on it.

[17:38] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a433d81786

[17:40] <dalek> MoarVM: a6e9956 | (Tobias Leich)++ | src/io/fileops.c:

[17:40] <dalek> MoarVM: don't use (wrong) magic numbers when we have constants

[17:40] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a6e9956526

[17:41] <dalek> MoarVM: bb7fd7e | (Tobias Leich)++ | src/ (6 files):

[17:41] <dalek> MoarVM: support sized ints and nums

[17:41] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bb7fd7e711

[17:41] <FROGGS> this requires a reconfigure of nqp/rakudo

[17:45] *** japhb__ joined
[17:46] <diakopter> FROGGS: what are the static things in P6num.c

[17:46] <diakopter> static MVMString *str_float = NULL;

[17:46] *** hoelzro_ joined
[17:46] <diakopter> long term we can't have that since we could have multiple instances per process

[17:46] <FROGGS> strings, used as keys in a hash

[17:47] <FROGGS> diakopter: it is always the literal string "float"

[17:47] <diakopter> right, but GCs from both instances can't be competing to store stuff there and update pointers

[17:48] <[Coke]> https://gist.github.com/coke/8250608/ updated with today's run

[17:48] <diakopter> hm I don't see continuation in that output

[17:48] <benabik> I'm pretty sure that has to be rooted.

[17:49] <diakopter> yes, it must be rooted, but hang it off of instance instead of static global

[17:49] <FROGGS> it is rooted

[17:49] <[Coke]> still some segfaults and some slow files.

[17:49] <FROGGS> diakopter: you might be right, I just took that piece from the other REPRs, all do it that way

[17:50] <diakopter> yeah; they all should hang the stuff off the thing on instance that stores constants like that :)

[17:51] <[Coke]> S03-metaops/hyper.rakudo.moar is probably the biggest single failure. (99 tests, one file)

[17:51] <[Coke]> do recent encoding comimts fix S16-filehandles/io.rakudo.moar and S32-io/slurp.t

[17:51] <[Coke]> ?

[17:51] <FROGGS> [Coke]: yes

[17:51] <FROGGS> only four failing tests

[17:51] <diakopter> though not a priority until we need multiple instances per process, such as when we get an instance api that can share SC sources in memory and so run the test suite all in one process

[17:51] <FROGGS> in S16-filehandles/io.rakudo.moar

[17:52] <FROGGS> ohh, 5 in that test file

[17:52] <FROGGS> two tests fail in S32-io/slurp.t

[17:52] *** rurban joined
[17:53] <FROGGS> I am looking now at: not ok 39 - we got four lines from the file

[17:53] <FROGGS> #      got: '1001'

[17:53] <FROGGS> # expected: '4'

[17:56] *** eternaleye_ joined
[18:00] <TimToady> diakopter: every time you say "instance" I have to translate that in my head to "interpreter"

[18:00] <TimToady> "instance" is heavily overloaded in CS...

[18:01] <diakopter> okay. except in moar, each thread has "an interpreter [loop]"

[18:01] <diakopter> (and multiple threads per process)

[18:02] <diakopter> (by definition of threads, sorry)

[18:03] <TimToady> so when you say "instance" do you mean "thread", or do you mean what GLOBAL hangs off of?

[18:03] <diakopter> MVMThreadContext->instance (MVMInstance)

[18:03] <TimToady> as in, a PROCESS can have a GLOBAL for each interpreter

[18:05] <diakopter> ahh I don't know how PROCESS relates when we could have multiple instances... definitely multiple GLOBALs though

[18:06] <benabik> I get a test failure on nqp-m... t/qregex/01-qregex.t: not ok 355 - unicode whitespace (\s)

[18:06] *** ssutch joined
[18:08] * TimToady thinks "instance" is kinda like "length"; one always wants to know "instance of what?"

[18:08] <TimToady> in CS literature, "instance" mostly just means what you get back from a constructor

[18:09] <diakopter> an instance is a collection of threads that all share the same GC system

[18:10] <TimToady> and I'm just saying that's using a very generic term for something very specific; not necessarily recommending it be changed, but it will cause confusion

[18:11] <diakopter> I'll use MVMInstance in the future, since that's the struct

[18:11] <TimToady> one is allowed to create technical terms, but sometimes it's better to coin something new than to overload an existing term like that

[18:11] <TimToady> is all I'm sayin'

[18:12] <TimToady> mostly just trying to understand

[18:12] <TimToady> and to vicariously misunderstand on behalf of others :)

[18:13] <FROGGS> benabik: I think that this is due to the recent unicode 6.3 update

[18:13] <benabik> Hm.  I've also been seeing a failure there in Parrot since I updated ICU.  Perhaps that's also the problem there?

[18:14] <diakopter> .oO( it's not very Uni if there's more than one of them over time... )

[18:21] <FROGGS> maybe the test needs updating? I dunno

[19:01] <FROGGS> I am about to push this, any objections? https://gist.github.com/FROGGS/f4cfeccf4c2910609225

[19:03] <FROGGS> before we cached if we hit eof when reading a string (except for reading a line), and I thought this cached eof is sort of weird

[19:04] <FROGGS> what if you are watching a file which grows? it would still think it reached eof

[19:04] <FROGGS> so now it would compare the filesize to the position of the cursor

[19:12] * grondilu tried http://rosettacode.org/wiki/Hickerson_series_of_almost_integers#Perl_6 on perl6-moar.  It actually works, but it's painfully slow :/

[19:20] * grondilu notices TimToady's edit on http://rosettacode.org/wiki/Quaternion_type

[19:21] <grondilu> TimToady: ^Have you considered putting quaternions in the core?

[19:22] <dalek> MoarVM: 4dc63a9 | (Tobias Leich)++ | src/ (3 files):

[19:22] <dalek> MoarVM: replace a cached eof with an actual check

[19:22] <dalek> MoarVM:

[19:22] <dalek> MoarVM: In some of the reading functions we cached a hit of eof, for example

[19:22] <dalek> MoarVM: when a read returned zero bytes. This is problematic in readline, so

[19:22] <dalek> MoarVM: instead we now store the filename and compare the current position

[19:22] <dalek> MoarVM: within the file to the filesize. This will help us when files get

[19:22] <dalek> MoarVM: written to while we read from it.

[19:22] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4dc63a9806

[19:23] * grondilu realises he's not on #perl6 :o)

[19:24] *** PerlJam joined
[19:35] <FROGGS> okay, the thing that breaks the unicode test is \x180e, which is not considered whitespace anymore

[19:35] <FROGGS> r: say "\x180e" ~~ /\s/

[19:35] <camelia> rakudo-parrot 8a486a, rakudo-jvm 8a486a: OUTPUT«｢᠎｣␤␤»

[19:36] <FROGGS> where is that char-name method again? :o)

[19:36] <benabik> .u U+180e

[19:37] <FROGGS> yoleaux did that, no?

[19:37] <benabik> Man, I hate when bots go away

[19:37] <diakopter> also people

[19:38] <benabik> U+180e is Mongolian Vowel Separator (MVS) according to Wikipedia.

[19:39] <FROGGS> benabik: thank you

[19:40] <diakopter> I'm sure someone made that test aware that that one changes/d

[19:40] <diakopter> er, I speculate, I mean

[19:46] <FROGGS> umm, VMS does match as whitespace anymore but \h matches?

[19:50] <FROGGS> http://www.unicode.org/L2/L2013/13004-vowel-sep-change.pdf

[19:51] <FROGGS> even when reading the above I just don't know if \h should still math VMS

[19:51] <FROGGS> err, MVS

[19:54] <benabik> FROGGS: I would assume it wouldn't?  Or at the least it should match ZERO WIDTH NON-JOINER

[19:56] <FROGGS> nqp-m: say("\x180e" ~~ /\s/) # I guess this is too old here

[19:56] <camelia> nqp-moarvm: OUTPUT«᠎␤»

[19:56] <FROGGS> nqp-m: say(?("\x180e" ~~ /\s/)) # I guess this is too old here

[19:56] <camelia> nqp-moarvm: OUTPUT«1␤»

[20:15] <FROGGS> timotimo: do you already had the chance to look at the reduce.t fails?

[20:31] <timotimo> no :(

[20:33] <FROGGS> np, I just wanted to ask, so I can have a look into it :o)

[21:39] <FROGGS> I golfed the reduce.t:

[21:40] <FROGGS> perl6-m -e 'say &infix:<^^>( |["Bob", ""] )' # Nil

[21:40] <FROGGS> perl6-p -e 'say &infix:<^^>( |["Bob", ""] )' # Bob

[21:40] <FROGGS> perl6-m -e 'say &infix:<^^>(   "Bob", ""  )' # Bob

[21:42] <FROGGS> this might be it: https://gist.github.com/FROGGS/afd0661ffa20d2461244

[21:42] <FROGGS> in the failing case the list is not yet reified

[21:48] <FROGGS> I leave that for somebody who knows a bit about signature binding and stuff :o)

[22:21] *** FROGGS[mobile] joined
[22:28] *** colomon joined
[22:50] <FROGGS> wow, that is kinda weird:

[22:50] <FROGGS> perl6-m -e 'use Test; nok "t".IO ~~ :f, "";'  # ok 1 -

[22:50] <FROGGS> perl6-m -e 'use Test; nok "t".IO ~~ :f, "a";' # not ok 1 - a

[22:55] <dalek> MoarVM: 0a28c87 | (Tobias Leich)++ | src/io/fileops.c:

[22:55] <dalek> MoarVM: let is_x/r/w happily ignore non-existing files

[22:55] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0a28c87104

[23:21] <jnthn> Weird indeed.

[23:30] <diakopter> jnthn: should I still work on ::cont* tonight? or did you start it?

[23:32] <jnthn> FROGGS: In bb7fd7e711 checking the valid set of bit sizes in get_storage_spec is redundant, since the only places it can be set are compose and deserialize_repr_data, which are already checked.

[23:33] <jnthn> diakopter: Only did what's committed so far

[23:33] <jnthn> I'm working on mapping the nqp:: ops to those stubs, so the test file will compile, though...of course, it'll fail immediately

[23:36] <jnthn> diakopter: But will sleep soonish
