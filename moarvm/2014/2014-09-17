[01:14] *** avuserow joined
[01:16] *** FROGGS_ joined
[01:47] *** daxim__ joined
[01:51] *** ilbot3 joined
[01:54] *** Juerd joined
[01:54] *** go|dfish joined
[01:54] *** itz joined
[01:54] *** TimToady joined
[01:54] *** leedo joined
[01:54] *** moritz joined
[01:55] *** go|dfish joined
[03:31] *** vendethiel- joined
[03:36] *** vendethiel joined
[03:48] <timotimo> given sufficient jnthntime, rakudo-jvm could become a whole deal faster right from the start, i believe

[03:52] <timotimo> so many cool new things we learnt in rakudo-moar that can apply to jvm as well

[03:53] <timotimo> (but tbh i'd prefer jnthn time spent on moarvm :P)

[05:15] *** itz joined
[06:16] *** FROGGS_ joined
[06:23] <FROGGS_> timotimo: I'd also vote for 'make one thing awesome first, then the other(s)'

[06:23] <FROGGS_> timotimo: but also, we have to unbust the other backends way faster that we did in the past

[06:24] <FROGGS_> it is pain in the ass to bisect codebases that are broken for 30+ commits in a row

[06:31] <FROGGS_> perhaps we should run travis on parrot and jvm also, in case it won't timeout

[06:35] <timotimo> what's the maximum time we're allowed to keep a travis-ci instance working?

[06:35] <FROGGS_> I dunno

[06:38] <FROGGS_> hmmm, perhaps there is no limit?

[07:10] <timotimo> that would be good for us

[07:18] *** BinGOs joined
[07:19] *** zakharyas joined
[07:53] *** brrt joined
[07:57] <sergot> mo/rning

[08:59] *** cognome joined
[10:46] *** cognome joined
[11:58] *** colomon joined
[12:57] <jnthn> Yeah, there's plenty of room for JVM improvements. :)

[12:57] <jnthn> (Rakudo on JVM, that is.)

[14:15] *** cognome joined
[14:25] *** FROGGS joined
[14:58] <[Coke]> someone doing a moarvm release for the rakudo release?

[14:58] <jnthn> Rakudo release is tomorrow, yes?

[14:58] <[Coke]> aye

[14:58] <[Coke]> ... and, crap, I have a meeting.

[14:59] <[Coke]> ~~

[15:03] *** leont joined
[15:25] <leont> jnthn: so in async_read for example, an array is created, rooted in one of the if blocks, and then pushed to the work queue

[15:25] <leont> What keeps it alive when not rooted?

[15:26] <jnthn> The work queue is also a GC-able object

[15:26] <jnthn> And it is rooted (from MVMInstnace iirc)

[15:26] <jnthn> So its being in the queue keeps it alive.

[15:27] <leont> Yes, but it's only pushed to the queue at the end

[15:28] <FROGGS> does something allocate in between?

[15:28] <jnthn> Right, but nothing can cause us to enter GC when we're outside of the MVMROOT

[15:28] <leont> Ah, I see

[15:28] <jnthn> We only ever enter the GC at certain "safe points"

[15:28] <jnthn> An allocation request is one such point

[15:28] <jnthn> In C code, in fact, that's pretty much the only one.

[15:29] <jnthn> The only other way you end up there is that back branches in the interpreter check if some other thread requested we join a GC

[15:29] <jnthn> Which is between instructions and thus also a natural safe point.

[15:31] <leont> Is that also why the array is allocated before the Task is looked up? The task could otherwise move?

[15:31] <jnthn> Yes

[15:32] <jnthn> It's certainly the case that code is often written...strategically...so as to minimize the need for MVMROOT, when clarity doesn't suffer as a result. :)

[15:32] <jnthn> Generally, the less bits we need to do in C, the better.

[15:33] * jnthn hopes the amount of C code in MoarVM will shrink rather than grow over time :)

[15:33] <FROGGS> shrink, really?

[15:33] <FROGGS> that sounds unlikely :o)

[15:34] <jnthn> Well, if you can JIT native calls really well... :)

[15:34] <jnthn> And JIT other things just as well...

[15:34] <jnthn> Opens up some options.

[15:34] <FROGGS> true

[15:34] <jnthn> But that's for the future, not for Rght Now. :)

[15:35] <FROGGS> nwc10: have already tested MoarVM on 64bit PowerPC?

[15:38] *** ggoebel11111111 joined
[15:43] <dalek> MoarVM: 71ed8bf | jonathan++ | docs/ChangeLog:

[15:43] <dalek> MoarVM: ChangeLog entries for 2014.09.

[15:43] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/71ed8bf735

[15:48] <jnthn> Please review ^^ :)

[15:48] <dalek> MoarVM: e71e022 | jonathan++ | README.markdown:

[15:48] <dalek> MoarVM: Minor README updates.

[15:48] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e71e022763

[15:48] <dalek> MoarVM: c42968a | jonathan++ | VERSION:

[15:48] <dalek> MoarVM: Bump VERSION, as part of release preparation.

[15:48] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c42968aa0c

[15:49] <jnthn> I'll do the actual cutting of the relesae tomorrow.

[17:00] *** BinGOs joined
[17:02] *** cognome joined
[17:02] *** btyler joined
[17:03] *** btyler joined
[17:03] *** cognome joined
[17:03] *** ChanServ joined
[17:03] *** retupmoca joined
[17:03] *** Util joined
[17:03] *** diakopter joined
[17:03] *** sergot joined
[17:03] *** lue joined
[17:03] *** masak joined
[17:03] *** cxreg joined
[17:03] *** tadzik joined
[17:03] *** PerlJam joined
[17:03] *** [Coke] joined
[17:03] *** avar joined
[17:03] *** nine joined
[17:03] *** jnthn joined
[17:03] *** dalek joined
[17:03] *** carlin joined
[17:03] *** synopsebot joined
[17:03] *** jlaire joined
[17:03] *** nwc10 joined
[17:03] *** ingy joined
[17:03] *** oetiker joined
[17:03] *** pmichaud joined
[17:03] *** timotimo joined
[17:03] *** odc joined
[17:03] *** danaj joined
[17:03] *** harrow joined
[17:03] *** ashleyde1 joined
[17:03] *** japhb joined
[17:03] *** betterwo1ld joined
[17:03] *** _sri joined
[17:03] *** nebuchadnezzar joined
[17:03] *** brother joined
[17:03] *** hoelzro joined
[17:03] *** bcode joined
[17:03] *** woolfy joined
[17:03] *** flussence joined
[17:03] *** camelia joined
[17:03] *** avuserow joined
[17:03] *** Juerd joined
[17:03] *** TimToady joined
[17:03] *** leedo joined
[17:03] *** moritz joined
[17:03] *** go|dfish joined
[17:03] *** vendethiel joined
[17:03] *** itz joined
[17:03] *** colomon joined
[17:03] *** FROGGS joined
[17:03] *** leont joined
[17:03] *** BinGOs joined
[17:10] *** zakharyas joined
[17:13] <[Coke]> jnthn: any worries about committing in the meantime?

[17:57] <timotimo> oh, this release date kind of took my by surprise

[18:03] <nwc10> FROGGS: it SEGVs t/nativecall/01-basic.t

[18:03] <nwc10> which I think is to do with bad assumptions about something being 32 bit when it's actually 64

[18:03] <nwc10> (but I've not been digging)

[18:03] <FROGGS> nwc10: ahh, so it at least builds :o)

[18:03] <FROGGS> nwc10: I had guesses that we only ever tried 32bit PowerPC

[18:03] <nwc10> slightly more than "at least"

[18:04] <FROGGS> :o)

[18:04] <FROGGS> true

[18:04] <nwc10> I don't know if anyone has tried 32 bit PowerPC

[18:04] <nwc10> (this is MoarVM + NQP + Rakudo)

[18:04] <nwc10> not sure if with the relevant compiler and linker flags this system can be persauded to build 32 bit

[18:08] <FROGGS> and it is also unlikely that I'll be able to obtain a 32bit blade once I got my bladecenter

[18:12] <nwc10> FROGGS: as for the spectest: Result: PASS

[18:12] <FROGGS> very very nice

[18:13] <FROGGS> I'm eager to see it by myself :o)

[18:55] *** Ven joined
[19:42] *** Ven joined
[20:24] *** kjs_ joined
[20:48] *** flussence joined
[20:48] *** Ven joined
[21:37] *** colomon joined
