[00:01] *** lastofthe joined
[00:38] *** lastofthe joined
[01:54] *** FROGGS_ joined
[02:18] *** itz_ joined
[02:26] *** JimmyZ joined
[02:36] *** lastofthe joined
[02:38] * lastofthe watches CFLAGS leak from his moarvm checkout to his rakudo checkout

[02:39] <lastofthe> I'm used to localizing compiler warnings to single files, not across repositories :)

[04:26] *** itz joined
[06:06] *** FROGGS[mobile] joined
[07:23] *** woolfy left
[08:02] <FROGGS> lastofthe: rakudo compiles ext_ops and need the MoarVM flags (it also include MoarVM header files)

[08:59] *** brrt joined
[09:10] <brrt> \o

[09:17] <jnthn> o/ brrt

[09:17] <brrt> \o jnthn

[09:17] <brrt> still in china?

[09:17] <jnthn> brrt: Yes.

[09:17] <brrt> also, do chinese have their day off on sunday, like we do?

[09:18] <jnthn> Yeah, no work on Sat/Sun for me.

[09:18] <brrt> that is.. interesting, in historical perspective :-)

[09:19] <brrt> how is it?

[09:21] <jnthn> Work stuff is all fine. Finding plenty of tasty things to eat. It's really quite hot, however.

[09:21] <brrt> oh, i see

[09:21] <brrt> i was complaining about 26 deg C here

[09:22] <brrt> when are you coming back?

[09:26] <jnthn> I'm here the rest of September, then coming back. So, another few weeks here.

[09:26] <jnthn> Today the forecast said it was 34 C, but with the humidity felt like 40. Having been outside, I'd tend to agree :)

[09:29] <brrt> :-) i hope they do have airconditioning

[09:30] <jnthn> Yes. :)

[09:31] <jnthn> In the hotel. In malls. In the subway. At work. In taxis. :)

[09:35] <brrt> that's something :-)

[09:36] <brrt> hmm, i'm wondering if you can advice me on the (posssible) JITting of the param_* ops

[09:38] <brrt> basically, i've argued that as-is is impossible

[09:38] <brrt> or 'not feasible given the differences between win64 and posix abi's'

[09:39] <jnthn> Right, 'cus of the struct returning.

[09:39] <brrt> i noticed that within each of them, there is significant dispatching to mediate between desired type and given type

[09:39] <brrt> i can't help but think that is suboptimal

[09:40] <jnthn> Well, we do at least know what the desired type is...

[09:40] <jnthn> So yeah, switching on that could be avoided if we're doing it

[09:42] <brrt> ok. what about the required flag? not having it is a): cheaper to call b): unifies the behavior of optional and required parameters, i.e. the optional parameters jump and the required parameters throw

[09:42] <brrt> maybe i should just make a branch for it

[09:43] <jnthn> I don't see that it has to be done the flag way it is at present.

[09:44] <jnthn> Could lose that if there's a better way.

[09:48] <brrt> ok :-) thanks

[09:48] <brrt> i'll go puzzle on it

[09:48] <brrt> have to be writing a proposal for the time being, though

[09:49] <jnthn> :)

[09:49] <jnthn> Hope all is well with the course so far?

[09:50] <brrt> yeah, just very busy, lots of overlapping duties :-)

[09:54] * brrt bbiab

[10:11] <dalek> MoarVM: 8bcc260 | jonathan++ | src/gc/orchestrate.c:

[10:11] <dalek> MoarVM: Remove an unused variable; timotimo++.

[10:11] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8bcc2600cf

[10:11] <dalek> MoarVM: 2eee415 | jonathan++ | src/ (7 files):

[10:11] <dalek> MoarVM: Add objects needing finalization to finalize list.

[10:11] <dalek> MoarVM:

[10:11] <dalek> MoarVM: Not using it for anything yet; this just makes sure objects with types

[10:11] <dalek> MoarVM: that have opted in to finalization reliably end up on the finalize

[10:11] <dalek> MoarVM: list of their allocating thread.

[10:11] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2eee415110

[10:34] <dalek> MoarVM: 415e39c | jonathan++ | src/core/hll. (2 files):

[10:34] <dalek> MoarVM: Allow per-HLL finalize handler installation.

[10:34] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/415e39c507

[11:20] *** brrt joined
[11:21] <brrt> oh, lots of gc activity, nice

[11:22] <brrt> by the way, if i'm implementing something to deal with force_gc (a backend feature that was requested on #perl6), should i enter from MVM_gc_enter_from_allocator?

[11:22] <jnthn> Yes

[11:23] <brrt> will that deal correctly with the case when another thread has already started a collection (i.e. can it race?)

[11:24] <brrt> oh i see

[11:24] <brrt> it will

[11:24] <jnthn> Yeah

[11:24] <jnthn> It's just the one that is called if you're triggering a GC run, as opposted to being told you shoud join an already triggered one.

[11:25] <brrt> ok. what happens if i don't add arguments to an op in the oplist?

[11:26] <brrt> (nothing, ok)

[11:27] <jnthn> brrt: It's fine; there are a number of ops like that, such as noop and osrpoint

[11:27] <brrt> i see :-)

[11:41] <jnthn> dinner &

[12:01] *** FROGGS_ joined
[12:16] *** ggoebel1111113 joined
[12:23] *** Ven joined
[13:53] <dalek> MoarVM: c52ac9d | (Bart Wiegmans)++ | / (6 files):

[13:53] <dalek> MoarVM: Add force_gc instruction

[13:53] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c52ac9d46f

[14:13] <timotimo> while falling asleep (or rather: trying to), i had a few random ideas go back and forth through my head

[14:13] <timotimo> 1) with the spesh framework we could build a coverage report tool and not only do line coverage, but also branch coverage and path coverage

[14:14] <timotimo> 2) if we had something like =SECTION in pod be taken into account by the code-gen and set something like $?SECTION (in addition to $?FILE), we could have errors in the core setting point to the file the code comes from

[14:15] <timotimo> 3) this idea has already decayed in my memory a fair bit, but something about finding out if we are in a git repository, if it's on github and then building a link to the github website for a given file and line number

[14:16] <JimmyZ> src/gc/finalize.c:24:36: warning: assignment from incompatible pointer type [enabled by default]

[14:17] <JimmyZ> tc->finalize[tc->num_finalize] = obj;

[14:17] <JimmyZ> new warning under gcc

[14:17] <jnthn> Hmm

[14:17] <jnthn> I'll add a cast or some crap

[14:17] <jnthn> hm, or maybe the collection type it's going into wants to chagne, in fact...

[14:20] *** brrt joined
[14:20] <dalek> MoarVM: 3ba1d01 | jonathan++ | src/core/threadcontext.h:

[14:20] <dalek> MoarVM: Hopefully fix a warning.

[14:20] <dalek> MoarVM:

[14:20] <dalek> MoarVM: Reported by JimmyZ++.

[14:20] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3ba1d0190b

[14:22] <JimmyZ> it fixed!

[14:23] <brrt> \o/

[15:07] *** JimmyZ_ joined
[15:35] <brrt> domestic happiness is.. when your SO finally removes the dust from his/her laptop, thereby silencing the fan

[16:01] <brrt> i'll be studying again :-)

[16:01] * brrt afk

[16:01] *** brrt left
[16:01] <dalek> MoarVM: b477a17 | jonathan++ | src/gc/ (3 files):

[16:01] <dalek> MoarVM: Start detecting objects needing finalize.

[16:01] <dalek> MoarVM:

[16:01] <dalek> MoarVM: We don't do anything with them yet once we've detected they need to be

[16:01] <dalek> MoarVM: finalized, but this seems to get the detection of that case working.

[16:01] <jnthn> Happy studying :)

[16:01] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b477a17c57

[16:04] *** lizmat joined
[16:09] *** synopsebot joined
[16:12] *** leedo joined
[16:27] *** woolfy joined
[16:35] <dalek> MoarVM: d94c91a | jonathan++ | src/ (4 files):

[16:35] <dalek> MoarVM: Collect to-finalize objects into finalizing list.

[16:35] <dalek> MoarVM:

[16:35] <dalek> MoarVM: This will later be used in order to pass them off to the finalize

[16:35] <dalek> MoarVM: handler in high level code.

[16:35] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d94c91ae49

[16:38] <jnthn> And I'll do that piece tomorrow. :)

[16:39] <timotimo> are you going to bed now?

[16:39] <lizmat> jnthn++

[16:39] <timotimo> mh, will be afk for a bit

[16:40] <lizmat> question: what signature should I use to get an unboxed string (native?) to call that candidate?

[16:41] <lizmat> jnthn: use case: .chomp on a native str would not need to do an extra boxing/ unboxing

[16:42] <lizmat> dinner&

[16:55] <jnthn> lizmat: Calling a method *always* happens on a boxed object

[16:56] <jnthn> lizmat: So it'd need to be a sub chomp(str $chompee) { ... }

[16:56] *** colomon joined
[17:04] <jnthn> Anyway, yes, sleep time her enow... :) 'night

[17:04] <timotimo> gnite jnthn :)

[17:22] *** zakharyas joined
[19:08] <japhb> Dang it!  Can someone please tell brrt to STAY ONLINE long enough for me to reply to him?  He keeps PM'ing me with a mysterious request, and then going offline before I can respond to him, so I have no idea what he needs.  :-/

[19:08] <FROGGS_> japhb: he backlogs

[19:10] <japhb> FROGGS: But he's PMing (presumably for good reason), so I can't respond in channel.

[19:10] <japhb> (But yes, hopefully he'll see the above remark.  :-)

[19:10] <FROGGS> japhb: I mean, he will read this here, so he'll know to stay up longer :o)

[19:11] <FROGGS> japhb: maybe you should chat via email or so

[19:11] <japhb> The problem is, he tends to go off IRC immediately upon doing something else, so even in his prime hours I often can't reach him.

[19:11] <japhb> Yeah, I was thinking the same.

[19:12] *** cognome joined
[19:13] <japhb> brrt:  I'm gjb at either my current or previous employer (google.com or sonic.net).

[20:21] *** cognome joined
[21:17] *** avar joined
[21:21] *** betterworld joined
[22:05] *** avuserow joined
[22:17] *** betterworld joined
[22:22] *** nine joined
[23:12] *** dalek joined
