[00:17] *** benabik joined
[00:56] *** FROGGS joined
[01:20] *** flussenc1 joined
[01:21] *** dagurval_ joined
[01:21] *** cxreg2 joined
[01:21] *** TimToady_ joined
[01:39] *** flussence joined
[01:41] *** btyler joined
[01:49] *** ilbot3 joined
[03:33] *** lizmat_ joined
[03:35] *** lizmat__ joined
[05:13] *** cxreg joined
[06:49] *** lizmat joined
[07:13] *** zakharyas joined
[07:14] *** Ven joined
[07:21] *** brrt joined
[08:04] *** brrt joined
[09:11] *** brrt joined
[09:37] <nwc10> PyPy's second call for donations for STM is interesting: http://pypy.org/tmdonate2.html

[09:37] <nwc10> The current solution depends on having a huge address space available. Porting to any 32-bit architecture would quickly run into the limitation of a 2GB or 4GB of address space

[09:37] <nwc10> and it's actually only for x86-64 Linux currently, using clang features

[09:38] <nwc10> nowt wrong with that, but I was a bit surprised to discover how non-general it was

[10:22] *** brrt joined
[10:41] *** brrt left
[13:23] <moritz> nwc10: also, when you need a huge address space, running under ulimit will be impossible

[13:58] *** btyler joined
[15:54] *** jnap joined
[16:22] *** rurban_ joined
[16:43] <jnthn> I've been running/doing all my dev with spesh of late, and it feels fairly stable (as in, not seen it cause regressions). Think it's probably time to merge. :)

[16:44] <jnthn> So we get the daily runs and other feedback ahead of the monthly.

[16:44] <jnthn> Can continue to do other experimental stuff in branch(es).

[16:49] * jnthn has a merge done locally

[16:51] *** dalek joined
[17:02] <dalek> Heuristic branch merge: pushed 130 commits to MoarVM by jnthn

[17:26] <timotimo> i like the sound of that

[17:26] <jnthn> Merged it

[17:26] <jnthn> I'm working on multispec now.

[17:27] <timotimo> i saw a few commits land :)

[17:27] <jnthn> Though will get some nom soon.

[17:27] <timotimo> made me a bit giddy with anticipation

[17:27] <timotimo> i'm going to cook some noodles here now as well

[17:28] <jnthn> :)

[17:33] <cognominal> what is multispec?

[17:34] <jnthn> cognominal: Mechanism for avoiding calling onlystar protos.

[17:37] <cognominal> bypassing them when possible?

[17:38] <jnthn> Right

[17:39] <nwc10> jnthn: works on "my" machine

[17:39] <jnthn> Basically, when we can find the palce to go directly in the cache.

[17:39] <nwc10> (build with address sanitizer)

[17:39] *** rurban_ joined
[17:39] <nwc10> s/build/built/

[17:39] <jnthn> nwc10: yay

[17:47] <timotimo> what other specs do we have besides boolification spec?

[17:48] <jnthn> invocation

[17:48] <jnthn> container

[17:48] <timotimo> ah, right

[17:48] <jnthn> They all hang of the stable, meaning if you know the type you know what they're gonna be.

[17:48] <timotimo> yup, i remember that part

[17:50] <jnthn> *off

[17:58] <jnthn> hm, think my is_thunk thingy works out on Moar.

[17:59] * jnthn spectests while going to fetch nom

[17:59] <benabik> stable isnâ€™t very stable if you keep changing it.

[18:08] *** FROGGS joined
[18:10] <TimToady> you just have to wait until it's Christmas, when the stable will contain all the usual animals

[18:23] <cognominal> with jnthn, we already got one of the mages if this word is a cognate of magician.

[18:25] <cognominal> ho, you say Magi in english

[18:40] <timotimo> i don't know what "is_thunk" does :(

[19:06] <dalek> MoarVM: 06f139e | jnthn++ | / (6 files):

[19:06] <dalek> MoarVM: Add a way to flag a frame as a "thunk".

[19:06] <dalek> MoarVM:

[19:06] <dalek> MoarVM: This will allow us to ignore it in certain situations when considering

[19:06] <dalek> MoarVM: caller and outer chains.

[19:06] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/06f139ed5a

[19:08] <timotimo> ah

[19:13] <timotimo> now i know \o/

[19:14] <benabik> Now you just need red and blue lasers.

[19:14] <dalek> MoarVM: 8e0419f | jnthn++ | / (6 files):

[19:14] <dalek> MoarVM: Add ctx[outer|caller]skipthunks ops.

[19:14] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8e0419f2a5

[20:20] <nwc10> jnthn: multispec works on "my" machine

[20:21] <jnthn> nice

[20:21] <jnthn> I'm now...uh...remembering how to PIR :/

[20:39] <dalek> MoarVM/named_to_positional: b80ddf0 | (Timo Paulssen)++ | src/ (7 files):

[20:39] <dalek> MoarVM/named_to_positional: WIP nameds in the callsite

[20:39] <dalek> MoarVM/named_to_positional: review: https://github.com/MoarVM/MoarVM/commit/b80ddf0dc0

[20:39] <jnthn> You can build all of Rakudo and NQP on Moar in less time than it takes to build CORE.setting on Parrot...

[20:39] <timotimo> https://gist.github.com/timo/1ebefa958416fa947096 <- got a hot tip for me, jnthn?

[20:39] <jnthn> ah shit...

[20:40] <jnthn> it hangs loading CORE.setting :/

[20:40] <timotimo> d'oh :(

[20:40] <jnthn> *sigh*

[20:40] *** jnap1 joined
[20:50] <jnthn> ah, think I found it...

[20:53] <jnthn> timotimo: Not really got much hints looking at the bt...

[20:54] <jnthn> callsites[i]->arg_name = malloc((nameds / 2) * sizeof(MVMString));

[20:54] <jnthn> Should be MVMString * there

[20:54] <timotimo> oh!

[20:54] <timotimo> right, because it's MVMString **

[20:54] <jnthn> callsites[i]->arg_name

[20:54] <jnthn> Wanna plural it I guess

[20:54] <timotimo> but MVMString is bigger than MVMString*, so it's not completely wrong

[20:54] <timotimo> yeah, good idea

[20:54] <jnthn> callsites[i]->arg_name = 0;

[20:54] <jnthn> s/0/NULL/

[20:55] <jnthn> MVM_gc_worklist_add(tc, worklist, frame->cur_args_callsite->arg_name[i]);

[20:55] <jnthn> Missing &

[20:55] <jnthn> But...you don't need to scan those.

[20:55] <timotimo> oh?

[20:56] <jnthn> They are anchored thanks to being in the string heap

[20:56] <timotimo> oh!

[20:56] <timotimo> that's good!

[20:56] <jnthn> You will need to do it for flattening case, though

[20:56] <jnthn> Just like we scan ->args separately for that case.

[20:56] <jnthn> But the issue in

[20:56] <jnthn> MVM_gc_worklist_add(tc, worklist, frame->cur_args_callsite->arg_name[i]);

[20:57] <jnthn> Is that we add the *address* of a collectable to the worklist

[20:57] <jnthn> MVM_gc_worklist_add(tc, worklist, &frame->cur_args_callsite->arg_name[i]);

[20:57] <jnthn> Would be correct.

[20:57] <jnthn> So that's why you get the segfault.

[20:58] <timotimo> flattening case, i don't think i have anything for that yet, yes?

[20:59] <jnthn> don't see it :)

[21:11] *** btyler joined
[22:06] *** JimmyZ joined
[22:07] *** woosley joined
[22:19] *** colomon joined
[22:47] *** dalek joined
[22:49] *** dalek joined
[23:05] *** lizmat joined
[23:08] *** lizmat joined
[23:08] *** woolfy joined
[23:23] <dalek> MoarVM: 994bd40 | jnthn++ | src/core/exceptions.c:

[23:23] <dalek> MoarVM: Make backtrace generation ignore thunks.

[23:23] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/994bd403ce

[23:38] *** lizmat joined
[23:38] *** woolfy joined
