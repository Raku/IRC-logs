[03:53] *** japhb joined
[04:20] *** japhb joined
[04:51] *** japhb joined
[05:18] *** japhb joined
[06:19] *** domidumont joined
[06:24] *** nebuchadnezzar joined
[07:23] *** zakharyas joined
[12:07] <nebuchadnezzar> hello

[12:15] <timotimo> o/

[12:22] *** TheLemonMan joined
[12:37] <nebuchadnezzar> if I rebuild moarvm from dyncall to libffi, should I rebuild nqp and rakudo ?

[12:38] <timotimo> no need

[12:38] <nebuchadnezzar> great, thanks

[12:39] *** zakharyas joined
[12:43] *** TheLemonMan left
[15:12] *** jnthn joined
[16:26] *** domidumont joined
[17:24] <dalek> MoarVM/even-moar-jit: 7da475f | brrt++ | src/jit/linear_scan.c:

[17:24] <dalek> MoarVM/even-moar-jit: Treat the different copy/phi nodes separately

[17:24] <dalek> MoarVM/even-moar-jit:

[17:24] <dalek> MoarVM/even-moar-jit: They were treated as the same, but because they are subtly

[17:24] <dalek> MoarVM/even-moar-jit: different, they are best treated differently

[17:24] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/7da475fb3c

[17:24] <dalek> MoarVM/even-moar-jit: f24555a | brrt++ | src/jit/ (2 files):

[17:24] <dalek> MoarVM/even-moar-jit: Change some types and format strings to make clang happy

[17:24] <dalek> MoarVM/even-moar-jit:

[17:24] <dalek> MoarVM/even-moar-jit: Contrary to my expectations, MVMint8 != char

[17:24] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/f24555a7d2

[17:24] <dalek> MoarVM/even-moar-jit: b308641 | brrt++ | / (3 files):

[17:24] <dalek> MoarVM/even-moar-jit: Implement MVM_JIT_IF and MVM_JIT_EITHER via tiling

[17:24] <dalek> MoarVM/even-moar-jit:

[17:29] <timotimo> is that a rebase or new commits?

[17:39] *** brrt joined
[17:39] <brrt> that's new commits

[17:39] <brrt> i finally had a seat on the train :-)

[17:40] <timotimo> cool!

[17:40] <timotimo> yay for trains

[17:40] <timotimo> with seats on them

[17:40] <timotimo> but not actually *on*

[17:43] <brrt> haha

[17:45] * brrt is going to get icecream

[17:45] <timotimo> yay!

[18:22] *** FROGGS joined
[19:01] *** domidumont joined
[19:16] *** BinGOs_ joined
[19:16] *** TimToady joined
[19:23] *** moritz joined
[19:23] *** nebuchadnezzar joined
[19:23] *** btyler joined
[19:23] *** stmuk_ joined
[19:23] *** lizmat joined
[19:23] *** domidumont joined
[19:23] *** pyrimidine joined
[19:23] *** harrow joined
[19:23] *** FROGGS joined
[19:23] *** Util_ joined
[19:23] *** [Coke] joined
[19:23] *** krunen_ joined
[19:23] *** ggoebel joined
[19:23] *** arnsholt joined
[19:23] *** zostay joined
[19:23] *** JimmyZ joined
[19:23] *** avar joined
[19:23] *** geekosaur joined
[19:23] *** sivoais joined
[19:23] *** ilmari joined
[19:23] *** ChanServ joined
[19:23] *** synopsebot6 joined
[19:23] *** nwc10 joined
[19:23] *** jnthn joined
[19:23] *** dalek joined
[19:23] *** mst joined
[19:23] *** camelia joined
[19:23] *** konobi joined
[19:23] *** krunen joined
[19:23] *** _longines joined
[19:23] *** leego joined
[19:23] *** hoelzro joined
[19:23] *** timotimo joined
[19:23] *** japhb joined
[19:23] *** mtj_ joined
[19:23] *** nine joined
[19:25] *** BinGOs joined
[19:50] *** zakharyas joined
[21:14] *** Ven_ joined
[21:22] *** Ven_ joined
[21:29] *** ilbot3 joined
[21:30] *** BinGOs joined
[21:33] *** TimToady joined
[21:36] *** Ven_ joined
[22:27] *** Zoffix joined
[22:49] <Zoffix> How would you go about this: we have a function that recurses and there's a case to trigger a segfault by recursing to deep?

[22:49] <Zoffix> m: 7 ~ "\x[308]" x 110_000

[22:49] <camelia> rakudo-moar 626a22: OUTPUT«(signal SEGV)»

[22:49] <Zoffix> This is recursing in twiddle_trie_node() that eventually gets a stackoverflow

[22:50] <timotimo> if we used the C stack, you could run your stack into your heap, but that's not a SEGV usually

[22:50] <timotimo> oh

[22:50] <timotimo> that is the C stack

[22:50] <timotimo> so maybe that's it

[22:51] <Zoffix> So to fix it we need to "run stack into heap"?

[22:52] <timotimo> oh, no, that's how it explodes

[22:52] <Zoffix> oh

[22:52] <timotimo> there's one big area of memory. at one end lives the heap, at the other lives the stack

[22:52] <timotimo> both grow towards each other

[22:52] <timotimo> well, in the realm of virtual memory it's all a bit more interesting

[22:52] <timotimo> but when your stack reaches your heap and you try to put more stuff on the stack ... boom

[22:53] <Zoffix> K, I think I'll leave this for now and try something easier :)

[22:53] <Zoffix> That was this ticket: https://rt.perl.org/Ticket/Display.html?id=129227#ticket-history

[22:55] <timotimo> since the algorithm to change this trie is based on traversing it down and then up, and the nodes of the trie don't have an "up" pointer (i haven't looked, but i guess this is the case), we'd have to introduce our own data structure to facilitate "going up"

[22:56] <timotimo> essentially, we'd make the same thing the stack was, but hopefully a bit more memory efficient, and swap-out-able

[22:56] <timotimo> i need to go to bed

[22:57] <timotimo> toodles

[22:59] <Zoffix> night

[23:04] <konobi> madvise?

[23:05] <konobi> mmm... not what i was thinking of
