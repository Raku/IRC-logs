[02:46] *** colomon joined
[03:10] *** colomon joined
[03:21] *** colomon joined
[05:51] *** Ven joined
[06:50] *** geekosaur joined
[06:51] *** geekosaur joined
[08:09] *** Ven joined
[08:32] *** konobi joined
[08:32] <konobi> was just reading some papers and came across this... https://www.cs.utexas.edu/users/mckinley/papers/cronies-oopsla-2004.pdf

[09:08] *** vendethiel joined
[09:16] *** Ven joined
[10:57] *** leont joined
[11:42] <jnthn> konobi: Hm, interesting one. Thanks :)

[11:42] * jnthn hadn't seen it before

[12:00] *** masak_ joined
[12:01] *** [Coke]_ joined
[12:12] *** JimmyZ joined
[12:48] *** colomon joined
[13:15] *** colomon joined
[13:18] *** Ven joined
[13:20] *** colomon joined
[13:31] <timotimo> this age-based heuristic would have made the split "benchmark" do much less nursery collections, i'd think

[13:43] <timotimo> hm, except that's probably something that ran 100% inside the C code, so we would have had to annotate the C code with the coalloc thing manually

[14:28] *** domidumont joined
[14:33] *** domidumont joined
[14:35] *** brrt joined
[15:23] <jnthn> For those who don't pick it up elsewhere: https://6guts.wordpress.com/2016/04/30/refactoring-and-torture/ is about MoarVM :)

[15:41] <lizmat> jnthn++

[16:00] <lizmat> jnthn: btw, why 13K, why not 4K for instance ?

[16:17] <jnthn> lizmat: A prime to try and bust missing things that happen in patterns.

[16:17] <jnthn> lizmat: Lots of stuff happens in powers of 2, so triggering GC at different points in such cycles is good.

[16:18] <lizmat> ok, the blog post didn't make that clear (to me, at least :-)

[16:18] <jnthn> lizmat: Besides that, it's mostly a trade-off. The lower you go, the longer it takes. But also if you go really low then you miss out on the nice "is it in fromspace" heuristics.

[16:18] <jnthn> Because stuff ends up in gen2

[16:19] <mst> I sort of went "ooh, a non-regular value, that was clever"

[16:19] <mst> lizmat: the fact it was a prime was what clued me in, but then again I used to be rather fond of number theory, so I'm not expecting that to've helped everybody else

[16:20] <jnthn> lizmat: Yeah, I didn't really go into why that number

[16:20] <lizmat> eh, but 13K is not a prime  :-)

[16:20] <jnthn> Hah, true that :P

[16:20] <jnthn> 13 is though :)

[16:22] <lizmat> m: say 13001.is-prime

[16:22] <camelia> rakudo-moar d7698f: OUTPUT«True␤»

[16:22] <lizmat> :-)

[16:22] <lizmat> close  :-)

[16:22] <jnthn> ;)

[16:22] <jnthn> I've got an 11500 byte nursery one running now, and I set it off 3 hours ago and it's still working on CORE.setting :)

[16:23] <jnthn> If I automate this I'm inclined to have it pick numbers differently each time.

[16:23] <jnthn> And note which ones it picked to allow reproduction.

[16:23] <lizmat> yeah, sounds like a plan

[16:23] <lizmat> specially like the comment: (In the future, we'll make this adaptive rather than a constant.)

[16:25] <jnthn> :)

[16:25] <arnsholt> Whee, new 6guts post! \o/

[16:26] <jnthn> Seems we're getting hungry here...guess I'll make some dinner :)

[16:26] <jnthn> o/

[16:26] <lizmat> same here, afk&

[16:34] *** geekosaur joined
[17:23] *** Ven joined
[18:16] *** brrt joined
[18:20] <dalek> MoarVM/reframe-jit: e1bcdc4 | brrt++ | src/core/ (4 files):

[18:20] <dalek> MoarVM/reframe-jit: Make frames identifiable using a sequence number

[18:20] <dalek> MoarVM/reframe-jit:

[18:20] <dalek> MoarVM/reframe-jit: Because frames can now be garbage-collected, they can be moved, and

[18:20] <dalek> MoarVM/reframe-jit: the identity check used in the JIT will no longer work. Thus, we'd

[18:20] <brrt> freenode is not so lenient to dalek

[18:20] <brrt> but ehm

[18:20] <brrt> the last commit kind of fixes jit-on-reframe

[18:21] *** dalek joined
[18:21] <brrt> sorry dalek

[18:23] <timotimo> "kind of" :)

[18:23] <brrt> well, ok, it fixes it, as far as i know :-)

[18:24] <brrt> is ther e a rakudo branch for reframe?

[18:24] <timotimo> i think there's one, yeah

[18:24] <brrt> cool

[18:25] <brrt> aaargh :-( cannot invoke this object

[18:26] <brrt> possibly a JIT bug

[18:27] <brrt> hmmm

[18:28] <brrt> be back later

[18:28] <timotimo> hm, that sounds like a place where a debug_name could help

[18:28] * timotimo greps for stuff

[18:29] <timotimo> yup

[18:45] <dalek> MoarVM: cbb6af9 | timotimo++ | src/6model/6model.c:

[18:45] <dalek> MoarVM: Default invoke handler shall output the debug name

[18:45] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cbb6af942b

[18:45] <dalek> MoarVM: 2f6c8c7 | timotimo++ | src/core/frame.c:

[18:45] <dalek> MoarVM: invalid register kind in getdynlex shall output the kind number

[18:45] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2f6c8c7902

[18:45] <dalek> MoarVM: 9af346f | timotimo++ | src/6model/6model.c:

[18:45] <dalek> MoarVM: cannot find method on what object? debug_name knows!

[18:45] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9af346f793

[18:45] <dalek> MoarVM: 1ba147e | timotimo++ | src/core/frame.c:

[18:45] <dalek> MoarVM: cannot invoke this object will tell debug_name now.

[18:45] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1ba147e2e3

[18:48] <arnsholt> timotimo++ # debugging help!

[19:13] <timotimo> i'm glad travis doesn't complain :P

[19:28] *** Ven joined
[21:14] *** zakharyas joined
