[01:16] *** vendethiel joined
[01:38] *** dalek joined
[02:25] *** vendethiel joined
[05:16] *** _longines joined
[06:21] *** mojca joined
[07:25] *** domidumont joined
[07:29] *** domidumont joined
[07:52] *** FROGGS joined
[08:21] *** mojca joined
[08:23] *** zakharyas joined
[08:54] *** vendethiel joined
[09:33] *** mojca joined
[10:20] *** vendethiel joined
[12:50] *** domidumont joined
[12:51] *** domidumont joined
[13:08] *** brrt joined
[13:08] <brrt> \o

[13:09] <timotimo> o/

[13:12] <brrt> i fixed the json-fast bug fwiw :-)

[13:12] <brrt> and somewhat-fixed the double-labelling bug

[13:13] <jnthn> brrt++

[13:14] <timotimo> i like the sound of that. so that's what the last commit was about?

[13:19] <brrt> aye

[13:19] <brrt> i'm still under the impression i'm not getting something about how to write a register allocator

[13:27] <jnthn> brrt: I'd probably try and find something I could nab from the literature :)

[13:30] <brrt> hmm, yeah, the thing is

[13:30] <brrt> the literature has steps, of which i don't fully understand the purpose

[13:31] <brrt> like discovering lifetime holes

[13:31] <brrt> why do that

[13:31] <brrt> (and processes things in reverse order. why do that, too?)

[13:32] <jnthn> Reverse order is normally 'cus it's doing some kind of backward-propagating data flow analysis or so

[13:33] <brrt> this from the article which claims that data flow analysis is not necessary due to register allocation on SSA form

[13:34] <jnthn> Link?

[13:34] <brrt> i'm pondering writing a prototype in a language that is not C

[13:34] <brrt> lemessee

[13:34] <brrt> http://www.christianwimmer.at/Publications/Wimmer10a/Wimmer10a.pdf

[13:38] <jnthn> "Lifetime holes occur because the control flow graph is reduced to"

[13:38] <jnthn> a list of blocks before register allocation

[13:39] <brrt> same in the expression compiler

[13:40] <jnthn> The block order has a

[13:40] <jnthn> high impact on the quality and speed of linear scan:

[13:40] <jnthn> ...I'm suspecting then that picking that order is part of the "fun"

[13:41] <brrt> hmmm

[13:41] <brrt> oh, great

[13:41] <brrt> however

[13:42] <brrt> we're not dealing with loops (yet)

[13:51] *** colomon joined
[14:11] <brrt> it looks like a good strategy, dunnit?

[14:12] <jnthn> I only had chance to scan through the paper very quickly (doing $dayjob stuffs) but it seems like a decent fix.

[14:12] <jnthn> *fit

[14:19] *** vendethiel joined
[14:28] *** FROGGS joined
[14:28] <brrt> yeah. i want to keep complexity to a minimum

[15:16] *** vendethiel joined
[15:21] *** brrt joined
[15:50] *** vendethiel joined
[17:15] *** FROGGS joined
[17:56] *** vendethiel joined
[18:31] *** mojca joined
[18:40] *** domidumont joined
[19:02] *** vendethiel joined
[20:01] <dalek> MoarVM/east_asian_width: 200d39b | (Matthew Wilson)++ | tools/ucd2c.pl:

[20:01] <dalek> MoarVM/east_asian_width: add East_Asian_Width property

[20:01] <dalek> MoarVM/east_asian_width: review: https://github.com/MoarVM/MoarVM/commit/200d39b666

[20:03] <diakopter> GitHub Desktop--)--)--)--)--

[20:06] <timotimo> huh?

[20:06] <diakopter> --

[20:07] <timotimo> what's bad about it?

[20:07] <timotimo> last time i tried it it seemed pretty neat

[20:14] <diakopter> it's neat

[20:14] <diakopter> I'm sure for some high percentage of users

[20:15] <diakopter> but yes, I'm grousing about being that user who has a poor experience ;)

[20:45] *** geekosaur joined
[21:08] <timotimo> heh.

[21:08] <timotimo> well, at least it also gives you a powershell link with all git commands readily accessible on windows

[21:08] <timotimo> i suppose a mac user wouldn't be impressed by that

[21:30] *** Ven joined
[22:06] *** synopsebot6 joined
[22:07] *** synopsebot6 joined
[22:22] *** synopsebot6 joined
[22:22] *** synopsebot6 joined
[22:28] *** synopsebot6 joined
[23:31] *** vendethiel joined
