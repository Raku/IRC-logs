[01:56] *** tokuhirom joined
[03:51] *** tokuhirom joined
[05:24] *** tokuhirom joined
[05:53] *** dalek joined
[07:02] *** domidumont joined
[07:06] *** domidumont joined
[09:01] *** cognominal joined
[09:25] *** tokuhirom joined
[09:55] *** cognominal joined
[10:54] *** pyrimidine joined
[12:30] *** Ven joined
[12:45] *** domidumont joined
[14:17] *** Ven joined
[15:24] *** tokuhirom joined
[15:55] *** _longines joined
[17:05] *** domidumont joined
[18:06] *** TimToady joined
[19:25] *** tokuhirom joined
[20:00] <dalek> MoarVM/even-moar-jit: 40add84 | brrt++ | src/jit/ (4 files):

[20:00] <dalek> MoarVM/even-moar-jit: Take register allocation out of code generation

[20:00] <dalek> MoarVM/even-moar-jit:

[20:00] <dalek> MoarVM/even-moar-jit: Trying to do online (i.e. without lookahead) register allocation

[20:00] <dalek> MoarVM/even-moar-jit: was a poor idea (complex, ineffiicent, incorrect results). So it

[20:00] <dalek> MoarVM/even-moar-jit: is moved to a separate step, and will be developed more further.

[20:00] <dalek> MoarVM/even-moar-jit:

[20:00] <dalek> MoarVM/even-moar-jit: As a result, allocating 'scratch' registers in tiles must be

[20:00] <dalek> MoarVM/even-moar-jit: removed as well.

[20:00] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/40add84363

[20:00] <dalek> MoarVM/even-moar-jit: c9bf2fc | brrt++ | src/jit/ (2 files):

[20:00] <dalek> MoarVM/even-moar-jit: Remove register locking logic

[20:00] <dalek> MoarVM/even-moar-jit:

[20:00] <dalek> MoarVM/even-moar-jit: Because we can't allocate scratch registers anyway, this is no

[20:00] *** brrt joined
[20:07] <brrt> so, that is at least a bit of progress; my hypothesis is that by slowly moving bits into their right places, i can start working on a real, more complex and correct, allocator

[20:11] <brrt> i.e. kill all the dumb decisions and simplify things first, then build it out

[20:34] <timotimo> neat

[20:54] <jnthn> brrt++

[21:02] <TimToady> we prefer convergence on a correct solution even it gives the appearance of divergence occasionally :)

[21:24] <timotimo> i just finished the paper on mementos, btw

[21:27] *** tokuhirom joined
[21:28] <timotimo> it doesn't give implementation advice, though. like for how the memento map should look, or the allocation site data structure, really

[21:28] <timotimo> they also have static frames be movable by the GC, which forced v8 to get a "zombie" state in which static frames survive an additional collection to keep heap integrity

[21:30] *** TimToady joined
[21:45] <jnthn> Yes, most papers leave the reader with some amount of figuring out to do in terms of the details :-)

[21:54] <timotimo> aye

[23:23] *** tokuhirom joined
