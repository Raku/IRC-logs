[00:19] *** nebuchad` joined
[00:19] *** dalek joined
[01:22] *** vendethiel joined
[02:48] *** ilbot3 joined
[07:37] *** domidumont joined
[08:19] *** zakharyas joined
[09:22] <jnthn> moarning o/

[11:52] *** domidumont joined
[12:25] <[Coke]> hio

[12:40] <dalek> MoarVM: a4c0a84 | jnthn++ | src/jit/emit_x64.dasc:

[12:40] <dalek> MoarVM: Fix JIT code generation bug in nqp::exception.

[12:40] <dalek> MoarVM:

[12:40] <dalek> MoarVM: It did a dereference to many, thus ending up reading the wrong thing.

[12:40] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a4c0a84492

[12:52] *** vendethiel joined
[13:32] *** vendethiel- joined
[13:45] <dalek> MoarVM: e998e2e | jnthn++ | src/6model/reprs/ConcBlockingQueue.c:

[13:45] <dalek> MoarVM: Add missing rooting of value pushed to conc queue.

[13:45] <dalek> MoarVM:

[13:45] <dalek> MoarVM: Fixes an occasional crash resulting from an outdated pointer being

[13:45] <dalek> MoarVM: left in the queue if we got unlucky with when GC runs took place.

[13:45] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e998e2e5b0

[13:45] <dalek> MoarVM: ec45ae2 | jnthn++ | build/Makefile.in:

[13:45] <dalek> MoarVM: Add src/gc/debug.h dependency to Makefile.

[13:45] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ec45ae2355

[14:30] *** lizmat joined
[14:54] *** synopsebot6 joined
[15:04] <timotimo> now this is certainly strange ...

[15:04] <timotimo> deserialize_sc_deps was callocing something, then gc_collect_free_nursery_uncopied freed it, then MVM_sc_get_object (via MVM_interp_run) stumbled upon a piece of its insides

[15:04] <timotimo> but that's inside gc_global_destruction, so that's probably okay

[15:14] <jnthn> Hm, that suggests global des isn't syncing up all threads properly

[15:16] <timotimo> clearly

[15:17] <timotimo> if one's still in MVM_interp_run, and another is in gc_global_thermonuclear_war, that's bad

[15:18] <timotimo> but i can't get earlier failures under valgrind to show up

[15:18] <timotimo> even though just running it gives me more kinds of failure than i can shake a stick at

[15:25] *** dogbert17_ joined
[15:27] <dogbert17_> timotimo: are you fighting the same problems which shows up in RT #129832 ?

[15:27] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129832

[15:28] <timotimo> ah

[15:28] <timotimo> that bug is just "multiple threads will explode when --full-cleanup is passed"

[15:29] <dogbert17_> aha, so slightly different then

[15:29] <timotimo> no, it's pretty much the same thing

[15:30] <timotimo> the title is misleading, of course

[15:30] <dogbert17_> what should it say?

[15:31] <timotimo> something something --full-cleanup something threads something unsynchronized something, maybe?

[15:31] <dogbert17_> :-)

[15:31] <timotimo> the thing is

[15:31] <timotimo> it's not that the test "sometimes generates invalid reads under valgrind"

[15:31] <timotimo> it's "sometimes does invalid things when run with --full-cleanup"

[15:31] <dogbert17_> ah, I see

[15:32] <timotimo> but "under valgrind" implies "--full-cleanup"; the important thing is the full cleanup, not valgrind

[15:33] <dogbert17_> I see, dunno if I can change the title though

[15:35] <dogbert17_> there's one other test (not in roast) which generates invalid reads but I haven't been able to 'trick' nine into fixing it yet :-)

[15:35] <timotimo> i think i can

[15:36] <timotimo> Ticket 129832: Subject changed from '[BUG] t/spec/S17-supply/start.t sometimes generates invalid reads under valgrind' to '[BUG] t/spec/S17-supply/start.t can cause invalid reads from unsynchronized --full-cleanup instance teardown'

[15:37] <timotimo> does that sound sane?

[15:37] <dogbert17_> sure

[15:40] *** MasterDuke_ joined
[15:41] <MasterDuke_> timotimo: i noticed you mentioned something about MVM_exception_backtrace_line(). if you compare it and MVM_exception_backtrace(), they have similar but not identical ways of getting the filename

[15:42] <MasterDuke_> MVM_exception_backtrace_line: MVMString *filename = cur_frame->static_info->body.cu->body.filename;

[15:42] <MasterDuke_> MVM_exception_backtrace: filename_str = fshi >= 0 && fshi < cur_frame->static_info->body.cu->body.num_strings ? MVM_cu_string(tc, cur_frame->static_info->body.cu, fshi) : cur_frame->static_info->body.cu->body.filename;

[15:43] <MasterDuke_> are those differences legit?

[15:44] <timotimo> it should probably be the second both times?

[15:44] <timotimo> it's possible that the file name hasn't yet been decoded

[15:44] <timotimo> there's some code in moar so that we don't have to go and decode every string in the string heap on startup

[15:48] <MasterDuke_> could that have caused the segfault you got?

[15:48] <timotimo> yeah. but at that point the interpreter was already dying

[15:49] <timotimo> i closed the terminal that had the output

[15:49] <MasterDuke_> rule 2 - the double tap

[16:03] *** vendethiel joined
[16:39] *** FROGGS joined
[16:44] <FROGGS> o/

[16:45] <domidumont> \o

[17:37] *** zakharyas joined
[17:41] <FROGGS> slow mips*el is slow :o(

[18:19] *** brrt joined
[18:31] *** zakharyas joined
[18:43] *** lizmat joined
[19:56] <FROGGS> help: https://github.com/ivmai/libatomic_ops/issues/19#issuecomment-257673959

[20:08] <FROGGS> brrt? any hints?

[20:08] <FROGGS> it is about this: https://github.com/ivmai/libatomic_ops/blob/master/src/atomic_ops/sysdeps/gcc/s390.h#L44

[20:20] *** zakharyas joined
[20:25] <FROGGS> http://xkcd.com/371/

[20:27] <jnthn> Hmmm :)

[20:29] <jnthn> Well, I guess we can take wild guesses :P

[20:33] <FROGGS> thing is... I'd probably have to study CS and read a lot about this architecture just to understand the few lines to copy...

[20:35] <jnthn> I think I understand what it's saying in the manual, but the wording is a bit confusing

[20:35] * FROGGS laughs about http://xkcd.com/234/

[20:35] <FROGGS> jnthn: what manual?

[20:37] <jnthn> The PDF referenced at the top of the .c file you linked :)

[20:37] * FROGGS looks

[20:40] <jnthn> FROGGS: Ummm....will this even compile? https://gist.github.com/jnthn/9cc24984158fb26eb8c8ffa7d89bd3ed

[20:44] <FROGGS> test.c:18:3: error: output operand constraint lacks '='

[20:44] <FROGGS> : "cc", "memory");

[20:44] <FROGGS> ^

[20:45] <jnthn> haha

[20:45] <jnthn> so much for that :)

[20:45] <FROGGS> :o)

[20:45] <jnthn> afk for a bit

[20:46] <jnthn> but basically what we need to do I *think* is just the cs or csg instruction

[20:46] <jnthn> And retval should be what's in the second register that op takes

[20:46] <jnthn> so far as I understand the docs ;)

[20:46] <FROGGS> hmmm

[21:34] *** ggoebel joined
[23:55] *** lizmat joined
