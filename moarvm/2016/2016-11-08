[01:14] *** dogbert17_ joined
[13:06] *** ilbot3 joined
[13:14] <brrt> ohai ilbot3

[13:28] *** zakharyas joined
[13:42] *** domidumont joined
[13:55] *** FROGGS joined
[13:55] <FROGGS> o/

[13:55] <lizmat> FROGGS o\

[13:56] <brrt> \o FROGGS, lizmat

[13:57] <jnthn> o/ eveyrone :)

[13:57] <yoleaux2> 09:11Z <lizmat> jnthn: is there a specific reason why we have the $!shape attribute on shaped arrays?  Why not determine that ad-hoc from nqp::dimensions, just like with native shaped arrays ?

[13:57] <yoleaux2> 13:54Z <lizmat> jnthn: is there a reason to not mixin the $!descriptor for TypedArrays only, and leave it off for Arrays ?

[13:57] <jnthn> *everyone

[13:57] <nwc10> good *, *

[13:57] <lizmat> jnthn  nwc10 brrt o/

[13:57] <brrt> good wildcards indeed

[13:57] <jnthn> lizmat: Yes, as soon as we get to jagged arrays we'll not be able to infer it from nqp::dimensions :)

[13:57] <lizmat> ok, and the other question ?

[13:58] <jnthn> m: my @a; say @a.name

[13:58] <camelia> rakudo-moar c00061: OUTPUT«@a␤»

[13:58] <jnthn> That comes from the descriptor, no?

[13:59] <lizmat> eh... ah

[13:59] <lizmat> eh

[13:59] <lizmat> ah, indeed

[13:59] <jnthn> Teletubbies...say...eh ah!

[13:59] <lizmat> I guess the default/dynamic flags are more important though  :-)

[14:00] <jnthn> I think also it carries the default too :)

[14:00] <lizmat> yeah

[14:00] <jnthn> So it'll get rather involved when we do/don't need it

[14:00] <lizmat> yeah, gotcha

[14:00] <jnthn> Which feels a bit much to just save a pointer :)

[14:00] <lizmat> well, it would be a pointer on a data structure that is used all over the place

[14:01] <lizmat> but yeah, got my questions answered  :-)

[14:01] <lizmat> jnthn: what is the meaning of nqp::knowhow without parameters?

[14:02] <lizmat> looking at the difference between adding shape to an Array and a nativearray

[14:02] <lizmat> the nqp::knowhow seems disconnected from anything related to it, and it's not documented in https://github.com/perl6/nqp/blob/master/docs/ops.markdown

[14:02] <lizmat> trying to fix the global deopt for every shaped array

[14:04] <jnthn> It gets the root meta-object that all overs are based upon

[14:05] <lizmat> basically a whatever meta object

[14:05] <jnthn> Yeah. If you look at NQP's MOP, then all its metaobjects are knowhow Blah { }

[14:05] <lizmat> ok

[14:06] <lizmat> so basically I think the problem is that set-shape is mixin in the shaped role on the instance, rather than the class

[14:06] <jnthn> There's no inheritance or role composition at that level, which is why Rakudo's rather more sophisticated MOP is implemented in terms of NQP's MOP :)

[14:07] <lizmat> jnthn: that would cause a global deopt for each shaped array, right ?

[14:07] <jnthn> A mixin is always a global deopt, yes

[14:08] <lizmat> right, so if I do it to a class, it gets cached, and the deopt only happens once

[14:08] <lizmat> possibly at compile time

[14:10] <jnthn> Well, you don't really mix in to a class

[14:10] <jnthn> It's an immutable operation

[14:10] <jnthn> That is, you get back a new class

[14:10] <jnthn> So yes, no deopt, and then you're just making instances of that

[14:10] <lizmat> ok, gotcha

[14:33] *** domidumont joined
[14:47] <lizmat> afk&

[14:59] *** dalek joined
[17:06] *** zakharyas joined
[17:19] *** zakharyas joined
[17:39] *** FROGGS joined
[17:56] *** domidumont joined
[19:54] *** vendethiel joined
[22:08] *** zakharyas joined
[22:11] *** lizmat joined
[23:16] *** geekosaur joined
[23:39] *** geekosaur joined
