[00:03] *** synopsebot6 joined
[00:17] *** synopsebot6 joined
[00:36] *** synopsebot6 joined
[00:54] *** synopsebot6 joined
[00:56] *** harrow joined
[01:13] *** synopsebot6 joined
[01:32] *** synopsebot6 joined
[01:50] *** synopsebot6 joined
[02:00] *** colomon joined
[02:05] *** colomon joined
[02:09] *** synopsebot6 joined
[02:28] *** synopsebot6 joined
[02:41] *** vendethiel joined
[02:48] *** ilbot3 joined
[03:05] *** synopsebot6 joined
[03:14] *** colomon joined
[03:24] *** synopsebot6 joined
[03:42] *** synopsebot6 joined
[04:01] *** synopsebot6 joined
[04:05] *** colomon joined
[04:20] *** synopsebot6 joined
[04:38] *** synopsebot6 joined
[04:55] *** orbus joined
[04:57] *** synopsebot6 joined
[05:16] *** synopsebot6 joined
[05:34] *** synopsebot6 joined
[05:53] *** synopsebot6 joined
[06:12] *** synopsebot6 joined
[06:30] *** synopsebot6 joined
[06:49] *** synopsebot6 joined
[06:54] *** japhb joined
[07:08] *** synopsebot6 joined
[07:23] *** FROGGS joined
[07:26] *** synopsebot6 joined
[07:27] *** vendethiel joined
[07:45] *** synopsebot6 joined
[07:54] *** Ven joined
[07:58] *** Ven_ joined
[07:59] *** vendethiel joined
[08:04] *** synopsebot6 joined
[08:13] *** ilbot3 joined
[08:17] *** moritz joined
[08:22] *** synopsebot6 joined
[08:30] *** zakharyas joined
[08:41] *** synopsebot6 joined
[08:41] *** vendethiel joined
[09:23] *** dalek joined
[09:52] *** hoelzro joined
[09:52] *** flussence joined
[09:52] *** timotimo joined
[09:52] *** BinGOs joined
[09:53] *** nebuchadnezzar joined
[09:53] *** geekosaur joined
[09:55] *** orbus joined
[10:05] *** ilbot3 joined
[10:08] *** colomon joined
[10:20] <FROGGS> jnthn: the current model how shapes on arrays work is not enough for CArrays inlined in CStructs

[10:20] <FROGGS> jnthn: the shape information must be present at the time the CStruct is composed

[10:21] <FROGGS> ohh, bbi1h

[10:31] <jnthn> FROGGS: Yeah, the current model was designed with the other problem in mind (making my @x[$len] working).

[10:31] <jnthn> Which is rather more common

[10:31] <jnthn> I think we should be able to find an extension that works out

[10:49] *** ggoebel16 joined
[10:50] *** konobi joined
[10:50] *** arnsholt joined
[10:50] *** flussence joined
[10:51] *** mtj_ joined
[10:52] *** dalek joined
[10:52] *** masak joined
[10:52] *** mst joined
[11:04] *** BinGOs joined
[11:04] *** timotimo joined
[11:04] *** mst joined
[11:04] *** FROGGS joined
[11:04] *** diakopter joined
[11:06] *** lizmat joined
[11:06] *** harrow joined
[11:14] *** vendethiel joined
[11:23] <FROGGS> jnthn: yes, I already made my-scoped CArrays work fwiw

[11:24] <jnthn> It's only really a problem for HAS though, not has?

[11:25] <jnthn> In that has is a pointer to a CArray?

[11:25] <FROGGS> aye

[11:25] <jnthn> OK, good. :)

[11:25] <FROGGS> has is unproblematic like my

[11:25] <jnthn> Then we understanding the problem the same :)

[11:25] <FROGGS> :o)

[11:25] <jnthn> *understand

[11:27] <nwc10> groupthink!

[11:28] <FROGGS> so I guess I'd need to tweak $*W.container_type_info, to pass the $shape along to $*W.parameterize_type_with_args or so

[11:28] <jnthn> In general though we don't want to do that...

[11:29] <jnthn> I'm a bit more inclined to stick a shape property on Attribute...somehow...and for HAS mandate that it is a compile time known value

[11:30] <FROGGS> hmmmm

[11:30] <jnthn> Which is a tad special-casey, but HAS kinda is anyway...

[11:30] <jnthn> And it'll let us do decent error reporting

[11:31] <FROGGS> I see

[11:32] <jnthn> I think you'll need to pass the shape down through the REPR composition protocol in this case.

[11:33] <jnthn> m: class A { HAS $.a }

[11:33] <camelia> rakudo-moar 5d7f65: OUTPUT«===SORRY!=== Error while compiling /tmp/qAJewBedua␤Variable $.a used where no 'self' is available␤at /tmp/qAJewBedua:1␤------> class A { HAS $.a⏏ }␤    expecting any of:␤        argument list␤        term␤»

[11:33] <jnthn> oh, it's a NativeCall thing

[11:33] <jnthn> m: use NativeCall; class A { HAS $.a }

[11:33] <camelia> rakudo-moar 5d7f65: OUTPUT«===SORRY!===␤Can only use HAS-scoped attributes in classes with repr CStruct, CPPStruct and CUnion, not P6opaque␤»

[11:33] <jnthn> m: use NativeCall; class A is repr('CStruct') { HAS A $.a }

[11:33] <camelia> rakudo-moar 5d7f65: OUTPUT«(signal SEGV)»

[11:33] <jnthn> wowser!

[11:33] <FROGGS> /o\

[11:33] <jnthn> heh, that makes no sense though :)

[11:33] <jnthn> "Sure, inline yourself flatly into yourself!"

[11:34] <jnthn> m: use NativeCall; class A is repr('CStruct') { has int32 $.x; }; class B is repr('CStruct') { HAS A $.a }

[11:34] <camelia> rakudo-moar 5d7f65: ( no output )

[11:34] <FROGGS> that could be the base of an awesome compression algorithm :o)

[11:34] <jnthn> m: use NativeCall; class A is repr('CStruct') { has int32 $.x; }; class B is repr('CStruct') { HAS A $.a }; B.^attributes.say

[11:34] <camelia> rakudo-moar 5d7f65: OUTPUT«(A $!a)␤»

[11:34] <jnthn> m: use NativeCall; class A is repr('CStruct') { has int32 $.x; }; class B is repr('CStruct') { HAS A $.a }; say B.^attributes.^methods>>.name

[11:34] <camelia> rakudo-moar 5d7f65: OUTPUT«(from-iterator from-slurpy from-slurpy-onearg from-slurpy-flat new to from sum fmt BIND-POS reification-target iterator Seq sink STORE eager Capture FLATTENABLE_LIST FLATTENABLE_HASH Supply CALL-ME is-lazy pick roll reverse rotate rotor combinations permut…»

[11:35] <jnthn> m: use NativeCall; class A is repr('CStruct') { has int32 $.x; }; class B is repr('CStruct') { HAS A $.a }; say B.^attributes.^methods(:local)>>.name

[11:35] <camelia> rakudo-moar 5d7f65: OUTPUT«(from-iterator from-slurpy from-slurpy-onearg from-slurpy-flat new to from sum fmt BIND-POS reification-target iterator Seq sink STORE eager Capture FLATTENABLE_LIST FLATTENABLE_HASH Supply CALL-ME is-lazy pick roll reverse rotate rotor combinations permut…»

[11:35] <jnthn> hmm

[11:35] <jnthn> oh duh

[11:35] <jnthn> m: use NativeCall; class A is repr('CStruct') { has int32 $.x; }; class B is repr('CStruct') { HAS A $.a }; say B.^attributes[0].^methods(:local)>>.name

[11:35] <camelia> rakudo-moar 5d7f65: OUTPUT«(<anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> compose apply_handles get_value set_value container readonly package inlined WHY set_why Str gist)␤»

[11:35] <jnthn> Ah, inlined

[11:35] <jnthn> But yeah, we want to somehow get the shape available in there...

[11:36] <jnthn> But now I see that HAS is special-cased in NativeCall, I can see why that's a bit of fun :)

[11:36] * FROGGS nods

[11:40] *** japhb joined
[11:40] *** khagan joined
[11:41] *** lizmat joined
[11:41] *** TimToady joined
[11:42] *** cognominal joined
[11:50] *** moritz joined
[11:50] *** orbus joined
[11:50] *** pochi joined
[11:51] *** leedo joined
[11:54] *** masak joined
[11:55] *** nwc10 joined
[11:59] *** ashleydev joined
[11:59] *** cognominal joined
[11:59] *** _longines joined
[12:00] *** pyrimidine joined
[12:06] *** vendethiel joined
[12:25] *** lnx joined
[12:25] *** flussence joined
[12:25] *** retupmoca joined
[12:25] *** arnsholt joined
[12:25] *** dalek joined
[12:26] *** camelia joined
[12:32] *** hoelzro_ joined
[12:32] *** ilmari_ joined
[12:32] *** zakharyas1 joined
[12:32] *** nine joined
[12:32] *** ingy joined
[12:32] *** geekosaur joined
[12:32] *** jnthn joined
[12:34] *** tadzik joined
[12:39] *** khagan joined
[12:45] *** sivoais joined
[12:50] *** vendethiel joined
[12:53] *** Ven joined
[13:18] *** vendethiel joined
[13:55] *** vendethiel joined
[14:01] *** Ven joined
[14:09] *** [Coke] joined
[14:39] *** tony-o joined
[14:54] *** Ven joined
[15:21] *** dalek joined
[15:28] *** virtualsue joined
[15:44] *** mst joined
[16:20] *** hoelzro joined
[16:38] *** hoelzro joined
[16:39] *** TimToady joined
[17:02] *** Util joined
[17:05] *** vendethiel joined
[17:21] *** flussence joined
[17:39] *** flussence joined
[17:39] *** dalek joined
[17:41] *** ilmari joined
[17:43] *** hoelzro joined
[18:01] *** FROGGS joined
[19:02] <lizmat> looks interesting perhaps for multidim natives?  https://blogs.apache.org/foundation/entry/the_apache_software_foundation_announces87

[19:03] <lizmat> "Arrow's cross platform and cross system strengths will enable Python and R to become first-class languages across the entire Big Data stack"

[19:03] <lizmat> spot the missing language  :-)

[19:04] <TimToady> Intercal?

[19:05] <timotimo> malbogle

[19:08] <FROGGS> jnthn: I've got a working implementation of fixed sized CArrays now (inlined and standalone)

[19:09] <FROGGS> there might be an issue because I do not handle alignment yet though

[19:09] <timotimo> oooooooooooooooooooooooooooh

[19:09] <FROGGS> the box2d library is a good test candidate btw

[19:09] <timotimo> <3

[19:40] *** kjs_ joined
[20:45] *** Ven joined
[21:37] *** kjs_ joined
[22:01] *** cognominal joined
[22:28] *** Ven joined
[23:55] <dalek> Heuristic branch merge: pushed 42 commits to MoarVM/even-moar-jit by bdw
