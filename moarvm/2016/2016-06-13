[06:23] *** rurban_ joined
[06:30] *** domidumont joined
[06:35] *** domidumont joined
[07:03] *** domidumont joined
[07:07] *** cognominal joined
[07:17] *** zakharyas joined
[07:26] *** zakharyas joined
[07:33] *** zakharyas joined
[09:03] *** zakharyas joined
[09:27] *** edehont joined
[10:14] *** ggoebel116 joined
[11:22] *** brrt joined
[11:28] <brrt> good * #moarvm

[11:28] <brrt> jnthn++ very nice writeup

[11:28] <jnthn> o/ brrt

[11:29] <nwc10> good UGT heresy, #moarvm

[11:31] <brrt> :-)

[11:31] <brrt> maaaybe i can start writing the tile editor today

[11:31] <brrt> and when i have that, i kind of know how to complete the register allocator

[11:35] <lizmat> ++brrt  :-)

[11:35] <jnthn> nice :)

[11:35] * jnthn is in meetings today, alas

[11:41] *** cognominal joined
[11:51] <brrt> has to happen, unfortunately

[11:51] * nwc10 hopes meetings have coffee

[11:51] <jnthn> Well, I'm joining them on Skype, so I can have what coffee I want :)

[11:58] <nwc10> https://encrypted.google.com/search?q=coffee+stout

[11:59] <nwc10> (or cut to the chase, ie Kahlúa)

[12:28] *** brrt joined
[13:09] <timotimo> oh, tile editor? sounds like a user interface design thing :)

[13:18] *** zakharyas joined
[13:34] *** domidumont joined
[13:49] <brrt> no, it's a structure for delaying the modification of the tile list

[13:50] <brrt> which, among other niceties, ensures that ranges don't get shifted while the list is being processed

[13:50] <timotimo> oh

[13:50] <timotimo> nice

[13:51] <brrt> it's a copy of the 'insertionset' idea from the b3 compiler backend

[13:52] <brrt> only, i originally had planned a (rather elegant if i say so myself?) plan wherein i'd store pairs of before-after invariants

[13:53] <brrt> the 'do-before-this' invariant is very powerful, of course, but it'd be most useful in the case of arglist processing

[13:53] <brrt> and that is easier to deal with in other ways

[13:56] <timotimo> hm, k

[13:57] *** rurban_ joined
[14:38] *** edehont joined
[14:52] *** dalek joined
[14:58] <timotimo> there's a comment about the latest jnthn-report on reddit that seems to think the class jnthn wrote up "just uses a scalar" to store the value

[14:58] <timotimo> https://www.reddit.com/r/perl/comments/4nt4yl/grinding_out_performance_improvements/

[15:02] <psch> i like "it doesn't say who wrote this" when the about page is clear that only one persons posts there anyway

[15:03] <jnthn> Well, Perl 6 attribute storage is done in terms of the P6opaque representation, which doesn't have a Perl 5 equivalent.

[15:04] <jnthn> Trying to emulate it as a Scalar is sorta cute but, as noted, prevents storage of anything more than one attribute.

[15:05] <jnthn> And mixins. :)

[15:05] <psch> ref bless OO in perl5 can do mixins?

[15:06] <jnthn> psch: If you blessed a Scalar though, you can't then go and tack on additional storage?

[15:06] <jnthn> Which means you can only mix in stateless things.

[15:07] <psch> jnthn: uh, i was just wondering if it's generally possible.  all i know of perl5 core OO is skimming perlootut (i think?) a few years back :S

[15:07] <jnthn> psch: iirc you can rebless a reference into a new package, which would be enough

[15:09] <psch> http://showmetheco.de/articles/2014/12/mixins-in-perl.html is something i found with google, which seems to really miss the point of mixins

[15:09] <psch> although i suppose if all objects are inside-out it's perfectly sensible to do it like that..? :/

[15:09] <jnthn> But anyway, the point was to show that we're in the same ballpark for the code a typical programmer would likely write.

[15:09] <psch> right :)

[15:09] <moritz> .oO( why do I want to read "show me the taco" into that domain name? )

[15:10] <jnthn> moritz: hah, wow :)

[15:10] <timotimo> how much more expensive would it be to go via a rw accessor?

[15:10] <jnthn> timotimo: Why would we do that?

[15:11] <timotimo> to make it more fair vs the perl5 code :)

[15:11] <jnthn> Huh?

[15:11] <jnthn> I don't go via an accessor in the Perl 5 code?

[15:11] <timotimo> just spitballin'

[15:11] <jnthn> I access the state directly

[15:11] <timotimo> but it's hash-backed, so it's not direct

[15:11] <timotimo> but ... what do i know about perl5 :)

[15:13] <jnthn> Sure, but it's not a method call either :)

[15:13] <timotimo> right

[15:43] *** TimToady joined
[16:41] *** cognominal joined
[17:32] *** cognominal joined
[17:40] *** domidumont joined
[17:49] *** domidumont joined
[17:54] *** harrow joined
[18:11] *** rurban_ joined
[18:23] *** FROGGS joined
[18:23] *** vendethiel joined
[18:24] <FROGGS> o/

[18:28] <nwc10> \o

[18:33] *** sivoais joined
[19:01] *** cognominal joined
[19:31] *** brrt joined
[19:36] <brrt> ouch, much negativity on reddit

[19:37] <FROGGS> I just wont read it

[19:38] <brrt> good idea

[19:46] <nwc10> about jnthn's bloggage?

[19:46] <nwc10> (I'm also not gong to read it. There are a lot more folks with opinions above their competance.

[19:47] <nwc10> Sadly evidence of Dunning–Kruger keeps reappearing)

[19:58] <jnthn> Nothing especially negative

[19:59] <jnthn> Just a bit of missing the point and stating the obvious (e.g. "gee, you folks seem under-resourced" :P )

[19:59] <brrt> hmm, maybe you're right, and maybe i overreacted

[19:59] <brrt> yes, we are. come help :-)

[20:22] <FROGGS> the comments are quite nice actually

[20:34] <dalek> MoarVM/even-moar-jit: f0c9a86 | brrt++ | src/jit/register.c:

[20:34] <dalek> MoarVM/even-moar-jit: Add tilelist editing functionality

[20:34] <dalek> MoarVM/even-moar-jit:

[20:34] <dalek> MoarVM/even-moar-jit: This will allow inserting tiles in the linear list with a fixed cost

[20:34] <dalek> MoarVM/even-moar-jit: per tile and without upsetting ranges prior to the edit.

[20:34] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/f0c9a866d7

[22:18] *** cognominal joined
[23:21] *** cognominal joined
