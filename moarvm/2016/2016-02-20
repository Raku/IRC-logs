[00:07] *** synopsebot6 joined
[00:27] *** synopsebot6 joined
[00:47] *** synopsebot6 joined
[01:07] *** synopsebot6 joined
[01:27] *** synopsebot6 joined
[01:47] *** synopsebot6 joined
[02:07] *** synopsebot6 joined
[02:27] *** synopsebot6 joined
[02:48] *** ilbot3 joined
[03:06] *** synopsebot6 joined
[03:26] *** synopsebot6 joined
[03:46] *** synopsebot6 joined
[04:06] *** synopsebot6 joined
[04:26] *** synopsebot6 joined
[04:39] <diakopter> jnthn: whoa

[04:40] <diakopter> ohh, just introduced 3 days ago

[04:46] *** synopsebot6 joined
[05:06] *** synopsebot6 joined
[05:26] *** synopsebot6 joined
[05:46] *** synopsebot6 joined
[06:06] *** synopsebot6 joined
[06:26] *** synopsebot6 joined
[06:46] *** synopsebot6 joined
[07:06] *** synopsebot6 joined
[07:26] *** synopsebot6 joined
[07:46] *** synopsebot6 joined
[08:06] *** synopsebot6 joined
[08:10] *** FROGGS joined
[08:26] *** synopsebot6 joined
[08:46] *** synopsebot6 joined
[09:06] *** synopsebot6 joined
[09:26] *** synopsebot6 joined
[09:46] *** synopsebot6 joined
[10:06] *** synopsebot6 joined
[10:18] <FROGGS> o/

[10:26] *** synopsebot6 joined
[10:31] <lizmat> FROGGS  o/

[10:32] <lizmat> synopsebot6's lifetime is 20 minutes ?

[10:46] *** synopsebot6 joined
[10:56] *** avar joined
[11:06] *** synopsebot6 joined
[11:25] *** lizmat joined
[11:26] *** synopsebot6 joined
[11:46] *** synopsebot6 joined
[12:06] *** synopsebot6 joined
[12:26] *** synopsebot6 joined
[12:46] *** synopsebot6 joined
[13:03] *** colomon_ joined
[13:06] *** synopsebot6 joined
[13:26] *** synopsebot6 joined
[13:46] *** synopsebot6 joined
[14:06] *** synopsebot6 joined
[14:09] <nwc10> orbus: (gdb) #0  validate_literal_operand (val=val@entry=0xffbff650, flags=56) at src/core/validation.c:248

[14:10] <nwc10> would seem to be the GET_UI32() macro here:

[14:10] <nwc10> case MVM_operand_str: {

[14:10] <nwc10> MVMuint32 index = GET_UI32(val->cur_op, 0);

[14:10] <nwc10> MVMuint32 count = val->cu->body.orig_strings;

[14:10] * nwc10 wonders - is the value of the pointer val->cur_op only 2-byte aligned?

[14:11] <nwc10> GET_UI32 is defined like this:

[14:11] <nwc10> #define GET_UI32(pc, idx)   *((MVMuint32 *)(pc + idx))

[14:11] <nwc10> my hunch is that (pc + idx) is 2 byte aligned, and all the platforms we've built on so far can load 4 byte values from 2 byte alignment without complaining

[14:26] *** synopsebot6 joined
[14:28] *** vendethiel joined
[14:44] *** Ven joined
[14:46] *** synopsebot6 joined
[14:58] *** colomon joined
[15:06] *** synopsebot6 joined
[15:14] <jnthn> Yes, 4-byte things in the bytecode stream can only safely be considered 2-byte alignee

[15:14] <jnthn> *aligned

[15:15] <nwc10> ah OK, rightho

[15:16] <nwc10> so seems like some more compile-time alignment checks, and runtime memcpy-or-not stuff is needed

[15:18] <jnthn> Seems so

[15:26] *** synopsebot6 joined
[15:32] *** vendethiel joined
[15:38] <dalek> MoarVM: a0869ee | jnthn++ | docs/ChangeLog:

[15:38] <dalek> MoarVM: ChangeLog for 2016.02.

[15:38] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a0869ee561

[15:38] <dalek> MoarVM: e4a316a | jnthn++ | VERSION:

[15:38] <dalek> MoarVM: Bump VERSION.

[15:38] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e4a316a281

[15:39] <nwc10> although it looks like all our memcpy-or-not stuff is spelled "memcpy" and we assume that the compiler optmisers is smart

[15:45] * jnthn grumbles about waking up full of cold

[15:46] *** synopsebot6 joined
[15:47] <jnthn> http://www.moarvm.org/releases/MoarVM-2016.02.tar.gz

[15:48] <jnthn> Tagged too

[15:49] *** Ven joined
[15:59] *** colomon joined
[16:06] *** synopsebot6 joined
[16:06] <dalek> moarvm.org: 1bbc6df | jnthn++ | / (3 files):

[16:06] <dalek> moarvm.org: Update the website for latest releases.

[16:06] <dalek> moarvm.org: review: https://github.com/MoarVM/moarvm.org/commit/1bbc6df206

[16:26] *** synopsebot6 joined
[16:46] *** synopsebot6 joined
[17:30] *** Ven joined
[18:09] *** vendethiel joined
[18:25] <orbus> nwc10: makes sense - no idea how to fix it though

[18:26] <orbus> even on x86, I know unaligned access is a performance hit, so it seems like a solution would of benefit even on platforms that aren't as picky as sparc

[20:07] *** mst joined
[21:55] *** vendethiel joined
[22:38] *** vendethiel joined
