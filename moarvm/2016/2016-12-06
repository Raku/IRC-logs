[00:07] *** TimToady joined
[01:59] *** pyrimidine joined
[02:48] *** ilbot3 joined
[03:21] *** pyrimidine joined
[04:51] *** TimToady joined
[04:57] *** pyrimidine joined
[05:30] *** pyrimidine joined
[06:08] *** pyrimidine joined
[06:11] *** pyrimidine joined
[06:19] *** domidumont joined
[06:26] *** domidumont joined
[07:05] *** domidumont joined
[07:30] *** pyrimidine joined
[07:37] *** pyrimidine joined
[07:51] *** pyrimidine joined
[08:25] *** zakharyas joined
[08:45] *** pyrimidine joined
[08:57] *** pyrimidine joined
[09:55] *** pyrimidine joined
[11:16] *** pyrimidine joined
[11:30] *** pyrimidine joined
[11:30] *** pyrimidine joined
[11:35] *** yoleaux2 joined
[11:37] *** yoleaux2 joined
[11:46] *** brrt joined
[11:52] <brrt> \o

[11:57] <lizmat> brrt o/

[11:58] <brrt> \o lizmat

[11:58] <brrt> I'm preparing my blog post for the 11th...

[11:59] <brrt> it's about how the new JIT will allow (relatively) easy extension points

[11:59] <brrt> but, i'm not sure about the 'level'  I should keep it?

[12:00] <lizmat> brrt: good question,

[12:01] <lizmat> perhaps you could relate it to the original application?  http://news.perlfoundation.org/2015/04/perl-6-hague-grant-application.html

[12:02] <brrt> i would be terribly embarassed by the original schedule, though

[12:02] <brrt> but, yes

[12:05] <nine> brrt: speaking of... do we approach the time when others can join the JIT fun?

[12:05] <brrt> hmm... let me be clear about the deliverables before that

[12:06] <brrt> it needs the integration of the linear scan register allocator

[12:06] <brrt> which needs the implementation of a generalised register specification per tile, and the remoal of tile templates

[12:06] <brrt> those are... comparatively simple things to do, but they have the potential to break things

[12:07] <lizmat> perhaps people can help by writing tests ?

[12:07] <brrt> it also needs the implementation of function-calls in the new register allocator (given that most arguments to most functions are stashed in registers)

[12:08] <brrt> actually... that is something that's been on my mind as well.

[12:08] <brrt> I'd like to have a script that takes a given expression tree, compiles the code, executes it, and compares the result against a given value

[12:08] <brrt> this is not conceptually hard

[12:09] <brrt> it is a bit of hacking, though

[12:10] <brrt> but if we had that, the whole JIT could be tested much more easily and thoroughly than can be done now

[12:11] <brrt> once the new register allocator is merged, I can start working on a way to have REPRs insert specialized templates. none of that is conceptually difficult

[12:11] <brrt> in fact, I could start on that now, but it doesn't make much sense to do so, as the subset of things we can compile correctly is still quite small

[12:19] <nine> It appears to be that even-moar-jit is a bit outdated with regards to master and needs a bit of a rebase.

[12:20] <brrt> yes, it is

[12:20] <brrt> well, I typically just merge master explicitly

[12:30] <dalek> MoarVM/even-moar-jit: b205d51 | brrt++ | / (3 files):

[12:30] <dalek> MoarVM/even-moar-jit: Register assignment should also cover synthetics

[12:30] <dalek> MoarVM/even-moar-jit:

[12:30] <dalek> MoarVM/even-moar-jit: Synthetics ought to follow the convention of values, in that

[12:30] <dalek> MoarVM/even-moar-jit: value 0 is always a definition, and value 1 is always a use.

[12:30] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/b205d51f70

[12:34] <dalek> Heuristic branch merge: pushed 59 commits to MoarVM/even-moar-jit by bdw

[12:34] <brrt> and, there we go :-) updated

[12:39] <nine> Generating src/gen/config.h ............................ FAIL unknown configuration key 'jit_arch'

[12:40] <brrt> hey, hmmm

[13:18] *** pyrimidine joined
[13:57] <dalek> MoarVM/even-moar-jit: 78d7088 | brrt++ | Configure.pl:

[13:57] <dalek> MoarVM/even-moar-jit: Fix broken merge on Configure.pl

[13:57] <dalek> MoarVM/even-moar-jit:

[13:57] <dalek> MoarVM/even-moar-jit: We need some extra definitions in the even-moar-jit branch,

[13:57] <dalek> MoarVM/even-moar-jit: so let's make sure they are added.

[13:57] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/78d70881de

[13:57] <brrt> nine++ for seeing it :-)

[13:59] <nine> brrt++ for the fix!

[13:59] <nine> The branch still doesn't seem to be up to date however? Noticable through the outdated VERSION

[14:00] <brrt> really? hmmm

[14:01] <brrt> that's weird

[14:01] <brrt> i thought VERSION was autogenerated

[14:01] <nine> git log VERSION suggests otherwise

[14:01] <brrt> aha

[14:02] <brrt> damnit, I know what I've done wrong, in all probability

[14:02] <nine> Also when I git merge master, it does do quite a lot and generates conflicts

[14:02] <brrt> unuh

[14:02] <brrt> uhuh

[14:02] <brrt> should've merged with origin/master

[14:04] <nine> Oh your local master was out of date?

[14:04] <nine> Seems like I can fix those merge conflicts

[14:04] <brrt> no worries, already busy

[14:05] <brrt> yeah

[14:06] <nine> Correct answer would have been: "ok, cool, have fun! I'll continue with the hard bits then"

[14:06] <brrt> btw, even-moar-jit really requires its' own dynasm, though

[14:06] <brrt> hehehe

[14:12] <brrt> btw, magit <3

[14:12] <dalek> Heuristic branch merge: pushed 200 commits to MoarVM/even-moar-jit by bdw

[14:13] <nine> src/jit/graph.c:1723:31: error: ‘jgb’ undeclared (first use in this function)

[14:13] <nine> That's pretty much exactly as far as I've gotten, too ;)

[14:13] <nine> I take it jgb is now just jg?

[14:18] <brrt> yes

[14:18] <brrt> used to have a builder there, but stopped making sense

[14:18] <brrt> the 'b' is for builder :-)

[14:18] <dalek> MoarVM/even-moar-jit: 3e31ed3 | brrt++ | src/jit/graph.c:

[14:18] <dalek> MoarVM/even-moar-jit: Merge: JGB to JG refactor

[14:18] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/3e31ed3aff

[14:21] <nine> Perfect! Builds now and NQP is happy with the version

[14:23] <brrt> :-)

[14:24] <nine> I guess a segfault during rakudo SETTING compilation is to be expected?

[14:26] <nine> Lovely 58239 lines backtrace

[14:27] <jnthn> Of...C frames or Moar frames? o.O

[14:28] <nine> C frames

[14:29] <nine> Endless recursion of MVM_frame_find_invokee/MVM_exception_throw_adhoc/MVM_exception_throw_adhoc_free_va/run_handler

[14:29] <nine> Origin is probably in JITed code as there are a bunch of frames without source information. And it's the even-moar-jit branch, so blaming the JIT seems obvious ;)

[14:33] <brrt> ah damn

[14:34] <brrt> :-(

[14:34] <brrt> but, yes, that is probably the issue

[14:34] <brrt> sensitive to MVM_JIT_EXPR_DISABLE=1?

[14:37] <brrt> jnthn: interested in merging the extract-spesh-alloc branch, btw?

[14:38] <jnthn> brrt: I'll try and remember to take a look at that tomorrow

[14:39] <jnthn> Well this is weird

[14:39] <nine> brrt: yes, it is

[14:39] <jnthn> I have a program that does either run or Proc::Async and doesn't set any handles up, so they are inherited

[14:40] <jnthn> Which seems to work just fine in a golfed example

[14:40] <jnthn> But in my application, it goes and loses half (or more) of the keystrokes I type on stdin o.O

[14:43] <jnthn> oh, lol, I was accidentally running another process at the same time that also inherited stdin, just carelessly rather than intentionally

[14:44] <jnthn> I guess they were competing for the keystrokes or something :P

[14:45] <nine> With disabled jit, rakudo's build is successful

[14:45] <timotimo> disabled jit or disabled expr jit?

[14:45] <yoleaux2> 11:38Z <babydrop> timotimo: I think it's just zoffix (RE: wordpress account for weekly perms)

[14:46] <nine> timotimo: expr jit

[14:51] <brrt> darn

[14:51] <brrt> well, i'll figure out why that happens eventually

[14:52] <brrt> i have the jit bisecter now

[15:11] *** FROGGS joined
[15:52] *** pyrimidine joined
[16:10] <dalek> MoarVM/even-moar-jit: 81375ef | brrt++ | / (2 files):

[16:10] <dalek> MoarVM/even-moar-jit: Enable running jit-bisect with a single command

[16:10] <dalek> MoarVM/even-moar-jit:

[16:10] <dalek> MoarVM/even-moar-jit: Thus allowing me to debug the breakage of CORE.setting

[16:10] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/81375efbc7

[16:36] *** pyrimidine joined
[16:45] *** lizmat joined
[17:15] *** pyrimidine joined
[17:33] *** domidumont joined
[18:01] *** lizmat joined
[18:05] *** pyrimidine joined
[18:30] *** pyrimidine joined
[18:34] *** pyrimidine joined
[18:57] *** pyrimidine joined
[19:35] *** nine joined
[19:36] *** avar joined
[19:37] *** domidumont joined
[19:40] *** edehont joined
[19:48] *** domidumont joined
[20:13] *** pyrimidine joined
[20:32] *** Ven joined
[20:34] *** Ven_ joined
[20:35] *** Ven_ joined
[20:47] *** pyrimidine joined
[21:29] *** pyrimidine joined
[21:43] <jnthn> Report on an interesting interaction between GCs and containerization: https://engineering.linkedin.com/blog/2016/11/application-pauses-when-running-jvm-inside-linux-control-groups

[22:38] *** pyrimidine joined
[23:17] *** pyrimidine joined
[23:21] *** pyrimidine joined
