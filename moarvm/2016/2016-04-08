[00:58] *** vendethiel- joined
[00:59] *** Unavowed joined
[01:42] *** vendethiel joined
[01:48] *** ilbot3 joined
[05:35] *** skids joined
[05:38] <skids> Dropping by just to point out PR#357 / rakudo RT#109586 / tommath issue #56.  Might have crypto implications (?)

[05:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=109586

[05:38] <skids> Must get to bed.

[05:58] *** skids left
[06:02] *** geekosaur joined
[06:05] *** domidumont joined
[06:23] *** domidumont joined
[06:25] *** domidumont joined
[06:35] *** geekosaur joined
[06:36] *** geekosaur joined
[06:37] *** geekosaur joined
[07:43] *** zakharyas joined
[07:54] *** domidumont joined
[08:11] *** zakharyas joined
[10:15] *** vendethiel- joined
[10:53] <timotimo> diakopter: http://hack.p6c.org/~timo/minimized_dumponly_hangs.tar.gz - 4.3 megabytes (compressed) of .moarvm files that cause hangs when loading them with --dump

[11:52] <timotimo> watching the minimization is so fascinating

[11:52] <timotimo> it throws out ~99% of all bytes that used to have some value and replaces them with a "0"

[11:52] <timotimo> and then hexdumping them gives you lots and lots of 0s in the right column and some holes in between

[11:53] <timotimo> that's quite a visual experience, which is probably why they chose that particular value

[12:35] <jnthn> OK, I have Perl 6 / Moar time for the rest of the day \o/

[12:37] <jnthn> m: my $s = Buf.new([255, 254, 72, 0, 101, 0]).decode("utf-16"); say $s.perl

[12:37] <camelia> rakudo-moar dc9552: OUTPUT«"He\0"␤»

[12:37] <timotimo> that doesn't look right, does it?

[12:37] <jnthn> Indeed :)

[12:37] <jnthn> We got a PR to fix it :)

[12:37] <timotimo> nice!

[12:38] <jnthn> m: use Test; is Buf.new([255, 254, 72, 0, 101, 0]).decode("utf-16"), 'He', 'utf-16 BOM handled ok'

[12:38] <camelia> rakudo-moar dc9552: OUTPUT«not ok 1 - utf-16 BOM handled ok␤␤# Failed test 'utf-16 BOM handled ok'␤# at /tmp/voKnj34jgt line 1␤# expected: 'He'␤#      got: 'He␀'␤»

[12:38] <dalek> MoarVM: 45bf04c | (David Warring)++ | src/strings/utf16.c:

[12:38] <dalek> MoarVM: adjust byte count when UTF-16 BOM marker consumed

[12:38] <dalek> MoarVM:

[12:38] <dalek> MoarVM: Something I noticed in Rakudo, when experimenting with

[12:38] <dalek> MoarVM: UTF-16 BOM markers. For example:

[12:38] <dalek> MoarVM:

[12:38] <dalek> MoarVM:     % perl6 -e'my $s = Buf.new([255, 254, 72, 0, 101, 0]).decode("utf-16"); say $s.perl'

[12:38] <dalek> MoarVM:     "He\0"

[12:38] <dalek> MoarVM:

[12:38] <dalek> MoarVM: The 2-byte "\xFF\FE" BOM marker is consumed, but the byte count hasn't been adjusted, so

[12:38] <dalek> MoarVM: it's running past the end of the string.

[12:38] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/45bf04cee0

[13:18] <moritz> dwarring++

[13:18] <moritz> ... or whatever his nickname is :-)

[13:18] <jnthn> :)

[13:59] <timotimo> i went through the contents of "minimized_dumponly_hangs.tar.gz" and the only one that actually crashes at all is one that reads beyond the serialized blob when getting a frames' locals set up. so that'd also be handled whenever i get that range check code working

[14:57] *** zakharyas joined
[15:16] *** ggoebel17 joined
[16:00] *** domidumont joined
[18:12] *** FROGGS joined
[18:28] *** vendethiel joined
[22:07] <dalek> Heuristic branch merge: pushed 26 commits to MoarVM/cache_sc_idx by diakopter

[22:12] <diakopter> bug: when doing a strawberry build, rakudo tries to run nmake instead of gmake (and it fails)

[22:13] <diakopter> also, it does this: Missing or wrong version of dependency 'gen\moar\stage2\QRegex.nqp' (from 'gen/moar/m-ModuleLoader.nqp') at <unknown>:1  (blib/Perl6/ModuleLoader.moarvm:<dependencies+deserialize>)
