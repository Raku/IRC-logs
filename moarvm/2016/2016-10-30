[01:27] *** flaviusb joined
[01:51] *** FROGGS joined
[09:53] *** domidumont joined
[10:22] <dalek> MoarVM: f5d97c3 | FROGGS++ | Configure.pl:

[10:22] <dalek> MoarVM: dont build dyncall if --has-libffi is supplied, fixes #436

[10:22] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f5d97c303d

[10:49] *** kjs_ joined
[11:59] *** kjs_ joined
[12:29] <FROGGS> ./libmoar.so: undefined reference to `AO_fetch_compare_and_swap_full'

[12:29] <FROGGS> collect2: error: ld returned 1 exit status

[12:29] <FROGGS> on s390x...

[12:32] <jnthn> FROGGS: My memory is hazy, but I think libatomicops is typically just macros on most platforms (and so maybe not linked in), but maybe it's defined as a function on s390x? Dunno though.

[12:33] <jnthn> https://github.com/ivmai/libatomic_ops/blob/master/src/atomic_ops/sysdeps/gcc/s390.h#L44

[12:34] <jnthn> Seems that actually it may be really missing

[12:36] <FROGGS> jnthn: I'm using the lobatomic-ops debian package btw

[13:21] <FROGGS> I think that's part of the problem: https://github.com/ivmai/libatomic_ops/blob/master/src/atomic_ops.h#L366-L377

[13:21] <FROGGS> AO_HAVE_compare_and_swap_full *is* defined, just not one above, which we are using

[13:22] <FROGGS> err, the one below is the one we are using

[13:24] * FROGGS recompiles after applying a patch

[13:42] <FROGGS> ohh

[13:42] <FROGGS> src/moar.h:207:5: warning: implicit declaration of function 'AO_fetch_compare_and_swap_emulation' [-Wimplicit-function-declaration]

[13:42] <FROGGS> AO_fetch_compare_and_swap_emulation(addr, old, newval)

[13:42] <FROGGS> ^

[13:42] <FROGGS> src/moar.h:207:5: note: in definition of macro 'AO_fetch_compare_and_swap_full'

[13:42] <FROGGS> AO_fetch_compare_and_swap_emulation(addr, old, newval)

[13:42] <FROGGS> that means it doesnt load the library right...

[13:47] <FROGGS> LDLIBS    = -lffi -ltommath -latomic_ops -luv -lm -lpthread -lrt -ldl

[13:48] <FROGGS> # ls -l /usr/lib/s390x-linux-gnu/libatomic_ops.a

[13:48] <FROGGS> -rw-r--r-- 1 root root 4368 Oct 25 13:26 /usr/lib/s390x-linux-gnu/libatomic_ops.a

[13:48] <FROGGS> I was under the impression that -latomic_ops would pick up this static lib?

[13:55] *** domidumont joined
[15:08] *** zakharyas joined
[15:31] <diakopter> FROGGS: well is there a guard against loading the header twice?

[16:05] <FROGGS> diakopter: no...

[16:06] <FROGGS> diakopter: and after nqp and rakudo is build I try to protect it from loading twice...

[17:17] *** FROGGS_ joined
[17:50] *** domidumont joined
[17:55] *** domidumont joined
[18:17] *** leego joined
[18:29] *** kjs_ joined
[18:51] <FROGGS_> ewww, a lot of nativecall tests are failing on s390x :o(

[18:52] <lizmat> endian issues ?

[18:55] <FROGGS_> don't know yet

[18:55] <FROGGS_> but we have other big endian machines where make test passes

[20:10] *** kjs_ joined
[20:12] *** zakharyas joined
[20:22] *** MasterDuke joined
[20:38] <MasterDuke> in my playing around with backtraces, i added some printfs to MVM_exception_backtrace, https://github.com/MoarVM/MoarVM/blob/master/src/core/exceptions.c#L362. i'm printing out filename_str and line_number (and also the "value" variable with each)

[20:39] <MasterDuke> however, filename_str and its "value" variable are always empty, while line_number has a value (that i can see in the Perl 6 backtrack output) but its associated "value" variable is also always empty

[20:42] *** zakharyas1 joined
[20:47] <dalek> MoarVM: 48c2482 | FROGGS++ | src/core/nativecall_libffi.c:

[20:47] <dalek> MoarVM: handle libffi return type more corrent

[20:47] <dalek> MoarVM:

[20:47] <dalek> MoarVM: Again, see https://github.com/libffi/libffi/issues/286

[20:47] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/48c24822d0

[20:49] <FROGGS_> correct*

[20:49] <FROGGS_> damn it

[20:52] <japhb> FROGGS_: 'correctly', I think

[20:53] <MasterDuke> i also added some printfs to MVM_exception_backtrace_line, but they weren't showing up at all, but those i do see if i add --ll-exception

[20:53] <MasterDuke> and those are populated with the values i see in the Perl 6 backtrace

[20:54] <FROGGS_> MasterDuke: I think I've observed the same in the past... but I cannot help you right now

[20:56] <FROGGS_> MasterDuke: so you're thinking that you printf wrong in MVM_exception_backtrace?

[20:56] <MasterDuke> no worries

[20:56] <MasterDuke> printf("MVM_exception_backtrace: filename_str = %s, value = %s\n", filename_str, value);

[20:57] <MasterDuke> hmm, filename_str is a MVMString, but value is an MVMObject, might need to do something with it

[20:58] <FROGGS_> MVMString      *filename_str;

[20:58] <FROGGS_> you cannot print that

[20:58] <FROGGS_> MVM_string_utf8_encode_C_string(tc, filename_str)

[20:59] <MasterDuke> ah, thanks

[21:00] <FROGGS_> ohh, and value just seems to be a temporary var that holds the same

[21:00] <MasterDuke> FROGGS_++, now there's stuff printed

[21:01] <FROGGS_> \o/

[21:15] *** kjs_ joined
[21:43] *** leego joined
[21:57] <FROGGS_> phew, s390x is fine now...

[21:59] *** leego joined
[22:00] <FROGGS_> ohh, wait, have to push that libatomic_ops patch... well, will do that tomorrow

[22:18] *** leego joined
[22:20] *** leego joined
[22:40] *** leego joined
