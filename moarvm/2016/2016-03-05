[02:48] *** ilbot3 joined
[04:43] *** vendethiel joined
[07:50] *** domidumont joined
[07:55] *** domidumont joined
[08:47] *** lizmat joined
[08:59] <nwc10> jnthn: http://paste.scsys.co.uk/506958 -- fails a testâ€½ :-) origin/lazy-strings doesn't even *build* under ASAN (just a NULL pointer)

[09:19] *** FROGGS joined
[10:17] *** vendethiel joined
[12:04] *** kjs_ joined
[12:35] *** kjs_ joined
[13:42] *** domidumont joined
[14:00] *** kjs_ joined
[14:17] *** Ven joined
[14:29] <jnthn> nwc10: When I get a test fail in a ready-built NQP, I tend to assume the chances of NQP building aren't great :)

[14:29] <jnthn> (So didn't try it...)

[14:46] <nwc10> ah right

[14:47] <jnthn> It may be the JIT thing that I just didn't get to yet

[14:55] <nwc10> seesm to be. just passed all NQP tests after building/testing with MVM_SPESH_DISABLE=1

[14:55] <jnthn> What about MVM_JIT_DISABLE=1?

[14:57] <nwc10> er, didn't find that first in shell history

[14:58] <nwc10> and also should I stop the rakudo build?

[14:58] <nwc10> and also might be abducted by "Being socialable (TM)"

[15:01] <jnthn> Yeah, I need to get to the kitchen shortly too :)

[15:02] <jnthn> No worries, I don't think I'll have any problems reproducing the issue here :)

[15:02] *** dalek joined
[15:03] *** synopsebot6 joined
[15:13] *** psch joined
[15:36] <nwc10> with MVM_JIT_DISABLE=1 NQP builds and tests

[16:05] <nwc10> and Rakudo gets to the end of the spectest with nothing strange

[16:07] *** [Coke] joined
[16:08] *** lizmat joined
[16:09] <nwc10> http://paste.scsys.co.uk/507024 -- valgrind output makes it look like a plain old NULL pointer dereference

[16:10] <nwc10> it's in MVM code, called from JIT generated code

[16:10] <nwc10> which I think is pretty much what you thought

[16:23] *** lizmat joined
[16:27] *** kjs_ joined
[16:34] *** Ven joined
[16:39] <timotimo> hmm "Being So Scalable"

[16:41] *** lizmat joined
[16:50] *** lizmat joined
[17:03] *** lizmat joined
[17:23] *** lizmat joined
[17:28] *** lizmat_ joined
[17:45] *** Util joined
[17:45] *** lizmat joined
[18:12] *** vendethiel- joined
[18:46] <timotimo> hm

[18:47] <timotimo> so if i have a one-line patch for moarvm that makes nqp build and test on lazy-strings ...

[18:47] <timotimo> should i push that? :)

[18:49] <dalek> MoarVM/lazy-strings: a501a41 | timotimo++ | src/jit/emit_x64.dasc:

[18:49] <dalek> MoarVM/lazy-strings: force sp_findmeth to decode strings in the CU

[18:49] <dalek> MoarVM/lazy-strings:

[18:49] <dalek> MoarVM/lazy-strings: makes nqp build&test and rakudo build.

[18:49] <dalek> MoarVM/lazy-strings: review: https://github.com/MoarVM/MoarVM/commit/a501a41e37

[18:50] <timotimo> we may want to actually use the return value of cu_string there, though

[18:50] <timotimo> but this makes things work already

[18:51] <timotimo> hm. is Stage parse      :  48.131

[18:51] <timotimo> kind of much faster than usually?

[18:56] <timotimo> nope, not much faster

[19:36] *** kjs_ joined
[19:52] <timotimo> i made a particle system for sdl2. it ends up taking a gigantic amount of IntLexRef and NumPosRef :(

[19:53] <timotimo> with the maximum particle count set to 1000 i get only about 30 fps average :|

[19:53] <timotimo> hm, but there's also lots of Num objects being allocated by Bridge

[19:53] <timotimo> and * and +

[19:53] <timotimo> i can potentially fix those

[19:57] *** zakharyas joined
[19:58] <timotimo> cool. i'm up to 51 median, 35 in the 5th percentile and 257 in the 95th percentile

[20:00] <timotimo> i guess the very high frame speeds come from having only few particles alive

[20:15] <nwc10> jnthn: works on "my" machine (to spectest)

[21:04] *** pyrimidi_ joined
[21:11] <timotimo> nwc10: what does? the whole thing with jit disabled? how about with my latest commit and jit & spesh re-enabled?

[21:12] <nwc10> oh, yes, it's your commit on what started as his branch

[21:12] <nwc10> oarVM/lazy-strings

[21:12] <nwc10> ^M

[21:13] <nwc10> ie MoarVM commit a501a41e37e4

[21:13] <timotimo> cool

[21:36] *** kjs_ joined
[22:40] *** geekosaur joined
[22:45] *** Ven joined
[23:13] *** kjs_ joined
[23:35] <timotimo> huh, somehow i got find_best_dispatchee back into my code

[23:41] *** cognominal joined
