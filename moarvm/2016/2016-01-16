[00:42] *** kjs_ joined
[01:09] *** raiph joined
[01:10] <raiph> fyi http://stackoverflow.com/questions/34781571/why-does-moarvm-complain-about-built-for-archive-which-is-not-the-architecture

[01:40] <geekosaur> you might run lipo -detailed_info against the archive

[01:40] <geekosaur> to see what it says

[01:41] <geekosaur> but: there si a case macports has seen where someone had the wrong dev tools on their system and ended up with archives that had the correct objects in them but no symbol table. ld erroneously reports this as "which is not the architecture being linked"

[01:43] <geekosaur> if lipo confirms that the archive has the right arch objects in it, see if "otool -S" produces output. if it doesn't, then look for extra (incorrect) versions of ar, ranlib, and/or ld. (also check that Configure.pl is finding the ones it should be)

[01:45] <geekosaur> (the specific case we saw was someone had installed the iOS dev kit incorrectly and some things were finding the ARM cross-dev versions of ar and ranlib)

[01:46] <geekosaur> ...actually just ranlib was the wrong one

[01:47] <geekosaur> but you can also see this if building 64-bit objects and then somehow have a 32-bit-only ranlib or ar sitting around; ar will build valid archives without a symbol table, ranlib won't add a symbol table

[01:47] <geekosaur> ...ld will report the wrong thing

[01:56] <geekosaur> and that 32-bit thing can happen pretty easily if this is a system upgraded from Tiger or Leopard because xcode 4 and later do not remove earlier 32-bit xcode that lived under /Developer

[01:56] <geekosaur> and random stuff will use the old /Developer 32-bit versions :/

[01:56] <geekosaur> (or Snow Leopard for that matter, although its /Developer is more likely to at least be 64 bit capable)

[09:20] *** domidumont joined
[09:26] *** domidumont joined
[10:30] *** kjs_ joined
[10:46] *** FROGGS joined
[11:39] *** leont joined
[11:40] *** kjs_ joined
[12:08] *** FROGGS_ joined
[12:31] *** vendethiel- joined
[13:27] *** brrt joined
[13:32] <brrt> good * #moarvm

[13:33] <brrt> hmmm

[13:33] <brrt> looks like we're going to need moar developers

[13:35] <timotimo> hey brrt

[13:35] <brrt> hey timotimo

[13:35] <timotimo> is it because i'm slacking off?

[13:35] <brrt> no

[13:35] <brrt> it is because perl6 comes into the hand of more people, who find more bugs

[13:36] <brrt> and our issue queue gets more issues

[13:39] *** FROGGS__ joined
[13:42] <brrt> did you read, understand, comment on my tiler linearisation doc perchance?

[13:44] *** FROGGS_ joined
[13:51] <timotimo> i started reading it, but was too tired to commit to following it

[13:52] <brrt> hhmmm...

[13:52] <brrt> do you think i'm making things too complicated?

[13:55] <brrt> timotimo: you can help me out if you help me choose

[13:56] <brrt> i'm going to spend 20 minutes explaining the basics of asm to an audience of high-level language programmers

[13:56] <brrt> at fosdem

[13:56] <brrt> i want to treat syntax, compiling, linking, registers, memory, loops

[13:56] <brrt> so, i'm thinking, what would be a good example

[13:57] <timotimo> oh

[13:58] <timotimo> recursive fibonacci or factorial?

[13:59] <dalek> MoarVM/fix-illumos-build: 8a1f3c9 | brrt++ | / (4 files):

[13:59] <dalek> MoarVM/fix-illumos-build: Add illumos build target, minilua-specific flags

[13:59] <dalek> MoarVM/fix-illumos-build:

[13:59] <dalek> MoarVM/fix-illumos-build: Minilua is only a build-time dependency and the only thing we want

[13:59] <dalek> MoarVM/fix-illumos-build: from it is to run (correctly). So it doesn't need MoarVM ldlibs,

[13:59] <dalek> MoarVM/fix-illumos-build: cflags, or ldflags (and on solaris/sunstudio, it requires another

[13:59] <dalek> MoarVM/fix-illumos-build: compiler, too, but I'm not going to fix that in this commit).

[13:59] <dalek> MoarVM/fix-illumos-build:

[13:59] <dalek> MoarVM/fix-illumos-build: A more general flaw of the MoarVM configure system is that it

[13:59] <dalek> MoarVM/fix-illumos-build: conflates the OS with its common compiler, which leads to problems

[13:59] <dalek> MoarVM/fix-illumos-build: like issue #306 (fixed here).

[13:59] <dalek> MoarVM/fix-illumos-build: review: https://github.com/MoarVM/MoarVM/commit/8a1f3c915c

[13:59] <brrt> hmmm

[13:59] <brrt> possibly

[14:00] <brrt> i was thinking something fun like rot13

[14:00] <brrt> or roman numerals

[14:01] <brrt> (i have an implementation of that, its just two loops deep, has allocation, stack use etc... not ideal)

[14:01] <brrt> for teaching purposes

[14:02] <brrt> rot13 might be fun

[14:03] <brrt> or base64, or do you think that's too complex too?

[14:03] <brrt> base64 probably is fairly complex

[14:08] *** kjs_ joined
[14:08] <timotimo> hm. i haven't implemented base64 myself yet

[14:08] <brrt> oh, its simple enough

[14:09] <brrt> read bytes, take 6 bits at a time as an index, output to buffer

[14:09] * brrt wonders if that can be simd-ed

[14:09] <brrt> probably not, though

[14:10] <brrt> but all the stuff you need to do around it (overflow checks etc), that's no fun

[14:10] <timotimo> mhm

[14:11] <brrt> i think i'll try rot13

[14:11] <brrt> it's easy and fun

[14:13] * brrt brb

[14:14] <timotimo> yeah, should be good

[14:49] *** brrt joined
[15:01] *** FROGGS joined
[15:43] *** zakharyas joined
[16:37] *** TimToady joined
[18:53] *** Peter__R joined
[19:11] *** kjs_ joined
[19:13] *** kjs_ joined
[19:15] *** kjs_ joined
[19:20] *** vendethiel joined
[19:45] *** vendethiel joined
[20:09] *** kjs_ joined
[20:10] *** domidumont joined
[20:15] *** leont joined
[20:34] *** kjs_ joined
[22:00] *** kjs_ joined
[23:30] *** kjs_ joined
