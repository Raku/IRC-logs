[02:29] *** tony-o joined
[02:29] <tony-o> moar(63281,0x700003cbc000) malloc: *** error for object 0x7fdd4e6765b0: pointer being freed was not allocated

[02:29] <tony-o> *** set a breakpoint in malloc_error_break to debug

[02:35] <tony-o> hey all.  i'm going to dig into that more but i believe it's coming from Proc::Async - if that's already a known thing please let me know otherwise i'll dig further into that

[02:48] *** ilbot3 joined
[03:38] *** ilmari joined
[03:40] *** geekosaur joined
[03:46] *** ilmari joined
[06:26] *** domidumont joined
[06:58] *** domidumont joined
[07:02] *** domidumont joined
[08:04] *** geekosaur joined
[08:24] *** zakharyas joined
[09:40] <timotimo> tony-o: well, that's just memory corruption. could be caused from anything at all. run it with valgrind or with a moarvm built with --asan to figure out more

[09:42] <timotimo> or if it's very new, i could have f'ed up the code that sets strings to "do not free this" when they are set to share memory with compunits

[09:42] <timotimo> i thought i made sure it's fine, though

[09:48] *** geekosaur joined
[10:27] <timotimo> tony-o: anything i can help you with? code i can try out or something?

[10:49] *** zakharyas joined
[12:34] <brrt> \o

[12:34] <nwc10> o/

[13:10] <brrt> how are things? we are a release further again, I see

[13:38] <lizmat> brrt: indeed

[13:40] <brrt> time flies...

[13:42] <jnthn> Indeed, couldn't believe it was our 35th release already o.O

[13:43] <brrt> :-o

[13:43] <brrt> almost 3 years?

[13:44] <jnthn> Yeah

[14:06] *** domidumont joined
[14:22] <timotimo> i put in my branches and directly afterwards someone complains about a non-malloced pointer getting free()'d

[14:22] <timotimo> this is making me uneasy :)

[14:23] <timotimo> other things making me uneasy: a tiny splinter of what i believe to be glass being stuck in my foot

[14:33] <brrt> that sucks, yes

[14:33] <timotimo> it doesn't seem to stick out, and i can't seem to figure out which way it went :|

[14:35] <brrt> hhmmm

[14:36] <tony-o> timotimo: i'm getting it with overwatch - i was in a hurry yesterday but i'm just sitting down to see if i can reproduce

[14:37] <timotimo> i played overwatch a bit on the free weekend ... i don't think i'll get it, though ... :P

[14:37] <tony-o> haha, how was it?

[14:37] <timotimo> it was mildly fun

[14:38] <jnthn> tony-o: Are you using Proc::Async with binary or char streams? My $dayjob project is tripping over something that I think I narrowed down to a long-standing phaser scoping bug :/

[14:39] <jnthn> (The phaser in question being the LAST one inside of the whenever in the bin => chars supply thingy)

[14:39] <tony-o> jnthn: https://github.com/tony-o/perl6-overwatch/blob/master/lib/overwatch.pm6#L106

[14:40] <tony-o> it's using char streams

[14:40] <jnthn> Yeah, could be that we're seeing the same kind of issue then

[14:40] <jnthn> I'll see if I can look into it tomorrow or so

[14:40] <tony-o> what day job do you have that is using perl6?  is it being used in production environments now?

[14:41] * tony-o crawls out of his cave

[14:42] <jnthn> A team at $dayjob will be starting on a new project from Jan which I'll very likely be architect on, and I wanted to explore the problem domain a decent bit beforehand. And there's various places stuff will want to be done concurrency.

[14:42] <jnthn> *concurrently

[14:43] <jnthn> So I've been working on a prototype.

[14:43] <jnthn> Of course, prototypes have a history of escaping :P

[14:43] <tony-o> nice

[14:43] <tony-o> haha

[14:43] <jnthn> Though I suspect it won't happen in this case.

[14:43] <jnthn> Though I suspected that before and was wrong so... :P

[14:44] <timotimo> \prototype

[14:45] <tony-o> i should try to find a gig using perl6 rather than node

[14:45] <timotimo> don't worry, soon we'll have perl6 code running on node, too :P

[14:45] <tony-o> excellent, the bay area isn't huge on perl

[14:59] *** zakharyas joined
[15:33] *** FROGGS joined
[15:48] <brrt> the bay area has a culture all of its own

[15:49] <FROGGS> o/

[15:49] <yoleaux2> 21 Nov 2016 22:58Z <|Tux|> FROGGS: http://hpux.connect.org.uk only ships 32bit objects :( :( - I will install libffi by hand

[15:59] * [Coke] has been using perl 6 for getting-stuff-done work at $dayjob, very nice.

[16:01] <FROGGS> did so too just lately :o)

[16:18] *** zakharyas joined
[17:02] *** domidumont joined
[18:02] *** vendethiel joined
[18:22] *** zakharyas joined
[20:11] *** TimToady joined
[20:37] *** pyrimidine joined
[21:03] *** zakharyas joined
[21:34] <[Coke]> anyone have instructions on how to regen the unicode_db? trying to find how to put the files into UNIDATA/ that the tool expects.

[21:34] <diakopter> I did it

[21:34] <diakopter> (originally)

[21:35] <diakopter> [Coke]: you unzip it from http://unicode.org/Public/zipped/

[21:35] <[Coke]> trying to track down if we're including the information http://unicode.org/reports/tr14/#DescriptionOfProperties, but I think having the UNIDATA/ files would be very helpful answering that question.

[21:36] <[Coke]> diakopter: awesome, thanks.

[21:36] <diakopter> is the latest built from 8.0?

[21:36] <diakopter> might as well put that link in the generation script

[21:37] <[Coke]> diakopter: no, we're on 9 already

[21:37] <diakopter> oh cool

[21:37] <[Coke]> jnthn++

[21:41] <jnthn> Yeah, you still just unzip it into UNIDATA in your MoarVM build directory, nothing's changed there.

[21:47] *** domidumont joined
[21:58] <[Coke]> jnthn: it's just not written down anywhere - if you don't mind, I'll throw a comment into the p5 script.

[21:59] <[Coke]> also, I think we're not processing LineBreak.txt, which is making dmaestro sad.

[22:00] <[Coke]> (it says that 0x2014 is a B2 (Break_Both), but we're not processing that yet, I don't think.

[22:00] <diakopter> a couple of the files actually duplicate values from the other property files, or did at one point

[22:00] <diakopter> they might have de-duped it

[22:01] <[Coke]> I don't see that particular bit of info elsewhere, but am just n00b.

[22:02] <diakopter> can you still query a property directly? did you try asking it about Break_Both

[22:03] <dalek> MoarVM: c2af75c | coke++ | tools/ucd2c.pl:

[22:03] <dalek> MoarVM: Add comment about where to find UNIDATA

[22:03] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c2af75c5ac

[22:04] <[Coke]> m: "\C[EM DASH].uniprop('Line_Break');

[22:04] <camelia> rakudo-moar 689da7: OUTPUT«===SORRY!===␤Unrecognized backslash sequence: '\C'␤at <tmp>:1␤------> "\⏏C[EM DASH].uniprop('Line_Break');␤Unable to parse expression in double quotes; couldn't find final '"' ␤at <tmp>:1␤------> "\C[EM DASH].uniprop('Line_Brea…»

[22:04] <[Coke]> m: say "\c[EM DASH]".uniprop('Line_Break');

[22:04] <camelia> rakudo-moar 689da7: OUTPUT«BK␤»

[22:05] <[Coke]> m: say "\c[EM DASH]".uniprop('Break_Both');

[22:05] <camelia> rakudo-moar 689da7: OUTPUT«BK␤»

[22:05] <[Coke]> Break_Both ~~ B2

[22:06] <diakopter> [Coke]: https://github.com/MoarVM/MoarVM/blob/master/tools/ucd2c.pl#L1580

[22:06] <diakopter> looks like it needs B2 added

[22:06] <diakopter> actually it needs several added

[22:07] <[Coke]> AH. I was looking for the name of the file, didn't realize it was not a literal.

[22:08] <diakopter> heh, there are only 3 characters with B2

[22:08] <[Coke]> there's a list at the top of the LineBreak file, I assume we could just pull all of them?

[22:09] <diakopter> I think so, but some of those have some interpreted meaning

[22:10] <diakopter> for instance, I don't think it's currently handling ID and XX correctly as defaults

[22:11] <[Coke]> Heading out now, thanks.

[23:15] *** pyrimidine joined
[23:46] *** pyrimidine joined
[23:56] *** pyrimidine joined
