[03:20] * masak read that as "party-initialized callsites"

[03:24] *** TimToady joined
[03:25] *** vendethiel joined
[05:39] *** vendethiel joined
[06:23] *** xiaomiao joined
[07:23] *** vendethiel joined
[07:29] *** FROGGS joined
[07:50] *** vendethiel joined
[08:11] *** domidumont joined
[08:17] *** domidumont joined
[08:25] *** zakharyas joined
[09:58] *** leont joined
[10:07] <timotimo> it didn't really look like the benchmarks improved between yesterday and today (with regards to how well rakudo is doing)

[10:08] <timotimo> i tried to look out for the hash optimizations lizmat put in, but they weren't obvious

[10:08] <timotimo> jnthn: you don't keep the timings .json files around, do you?

[10:35] <jnthn> um...they may be somewhere...don't copy them anywhere yet

[10:47] <timotimo> normally you get multiple ones by virtue of extracting individual commit ids and getting one folder per build-folder as well as one folder (or json file?) per thingie

[10:47] <timotimo> but since you just build over "master" every time, that'll not happen, i expect

[10:48] <timotimo> but i do think the json files gobble up more and more info the more they are "used"

[10:48] <timotimo> http://rr-project.org/  -  did i see this link here or somewhere else?

[10:49] <timotimo> wow, liz says your optimizations and memory-leak-plugging for moarvm "could have dramatical memory savings for some applications"

[10:49] <timotimo> i didn't realize it was this big of a deal

[10:53] <jnthn> timotimo: There was a serious I/O leak that could affect programs that did many slurps.

[10:55] <jnthn> Rest ranged from "minor leak" down to "missing cleanup at shutdown"

[10:58] <timotimo> ah, i see!

[12:07] *** domidumont joined
[12:43] *** cognominal joined
[13:43] *** zakharyas joined
[13:57] *** brrt joined
[14:08] <brrt> good *

[14:08] <brrt> hey timotimo, that rr thing, looks really cool :-)

[14:10] <timotimo> i wonder how unhappy things like a GC collection make that

[14:18] <brrt> hmm

[14:18] <brrt> isn't gc pretty deterministic?

[14:18] <brrt> i mean, most JIT crashes are pretty deterministic

[14:19] <brrt> you run over a threshold after a certain allocations, and that typically always happens

[14:24] <timotimo> well, i just mean it has to track all this data so that reversing/replaying works properly, no?

[14:24] <timotimo> i actually have no clue how this thing works :)

[14:24] <brrt> neither do i

[14:25] <brrt> my suspicion:

[14:25] <brrt> - copy all disk io

[14:25] <timotimo> i just mean the semi-space copying gc will cause a lot of churn

[14:25] <brrt> - set timestamps and random seeds to known values

[14:26] <brrt> yeah, but why would you have to do that?

[14:26] <timotimo> no clue :)

[14:26] <timotimo> as i said, i know nothing

[14:26] <brrt> if it would have to copy all your computations, then that would become too expensive

[14:26] <brrt> neither do i :-)

[14:26] <timotimo> mhm

[14:26] <brrt> but it looks cool

[14:51] *** camelia joined
[15:43] *** domidumont joined
[18:27] *** leont joined
[18:52] <timotimo> i'm thinking about perhaps adding some benchmarks to perl6-bench that stress nativecall

[18:53] <timotimo> maybe just one for some function that takes no arguments and returns an int, and one for some function that takes like ten arguments or so?

[19:28] *** vendethiel joined
[20:36] <jnthn> timotimo: Could do, yeah

[21:07] <japhb> timotimo: +1

[21:10] <timotimo> i'm definitely not going to be able to write the perl5 equivalent of that

[21:10] <timotimo> and i'm not sure it'd be easy to write the same thing for nqp?

[21:11] <japhb> timotimo: By "perl5 equivalent" do you mean old-school XS or something like FFI or P5NCI?

[21:12] <timotimo> hopefully something modern

[21:12] * japhb isn't even sure what's used most often by new perl5 projects these days ....

[21:22] *** patrickz joined
[21:50] *** leont joined
[23:15] *** leont joined
[23:47] *** vendethiel joined
[23:51] *** cognominal joined
