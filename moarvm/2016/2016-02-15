[00:18] *** brrt joined
[02:11] *** vendethiel joined
[02:51] *** vendethiel joined
[05:00] *** colomon_ joined
[07:03] *** Util joined
[07:03] *** lnx joined
[07:04] *** xiaomiao joined
[07:04] *** japhb joined
[07:17] *** FROGGS joined
[08:03] <FROGGS> m: say 32618.fmt('%#b')

[08:03] <camelia> rakudo-moar 585619: OUTPUT«0b111111101101010␤»

[08:03] <FROGGS> m: say 32560.fmt('%#b')

[08:03] <camelia> rakudo-moar 585619: OUTPUT«0b111111100110000␤»

[08:04] <FROGGS> m: say 32736.fmt('%#b')

[08:04] <camelia> rakudo-moar 585619: OUTPUT«0b111111111100000␤»

[08:13] <FROGGS> ohh noes

[08:13] <FROGGS> just found a stupid bug

[08:13] <FROGGS> /o\

[08:15] <FROGGS> this adds a field to the C{PP}Struct|CUnion reprs, and does *not* (de)serialize that added field: https://github.com/MoarVM/MoarVM/commit/e8c92d51#diff-4f4f34456f1328b0db4d51f3b24330ccR47

[08:21] <FROGGS> jnthn: what do I need to do besides adding that field to the repr datas? Do I need to bump the serialization format? I guess so, but I'd need some pointers I guess

[08:21] <FROGGS> I guess I need to make it conditional, do not read that field if the ser format is old, read otherwise, and always write the new field

[08:30] <nwc10> FROGGS: 7a045725c9daf4ffca6d8f6a08469f8ac4b92e7d is an example of a commit where we've changed this sort of thing

[08:32] <FROGGS> ohh

[08:32] <FROGGS> nwc10++ # thank you

[09:07] *** zakharyas joined
[09:28] *** pyrimidi_ joined
[09:39] <jnthn> FROGGS: Yeah, if you're adding a field you need to bump so you know whether to read it or not

[09:46] <dalek> MoarVM: 38d9a8b | FROGGS++ | src/6model/ (4 files):

[09:46] <dalek> MoarVM: fix bug for inlined structures in strutures in nativecall code

[09:46] <dalek> MoarVM:

[09:46] <dalek> MoarVM: An inlined structure loaded from another precompiled compilation unit

[09:46] <dalek> MoarVM: errornously reported a wrong alignment, which caused a size increase

[09:46] <dalek> MoarVM: and probably a field misalignment in the outer structure.

[09:46] <dalek> MoarVM: This was caused by not serializing and deserializing the alignment

[09:46] <dalek> MoarVM: information to disk when precompiling a compilation unit.

[09:46] <dalek> MoarVM:

[09:46] <dalek> MoarVM: This patch bumps the serialization format version to 17.

[09:46] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/38d9a8b38b

[09:57] <jnthn> FROGGS: Looks good

[09:58] <nwc10> Stage parse      : 303.109

[09:58] <nwc10> "are we nearly there yet?"

[09:59] <jnthn> Such slow..

[09:59] <jnthn> ASAN?

[09:59] <nwc10> aye

[10:00] <nwc10> it's like carrying a 20kg rucksac - you get used to it, and then suddenly everything is faster (or "instant diet") when you turn it off/take it off

[10:12] *** vendethiel joined
[11:41] *** vendethiel joined
[12:24] *** leont joined
[13:30] *** vendethiel joined
[14:20] *** pyrimidine joined
[14:20] *** vendethiel joined
[14:23] *** donaldh joined
[15:19] *** donaldh joined
[15:19] *** leont joined
[16:24] <timotimo> https://github.com/nael8r/How-To-Write-An-LLVM-Register-Allocator/blob/master/HowToWriteAnLLVMRegisterAllocator.rst - huh, that's curious

[17:45] *** vendethiel joined
[17:57] *** donaldh joined
[18:33] *** vendethiel joined
[18:33] *** FROGGS joined
[18:35] <FROGGS> o/

[18:36] <lizmat> FROGGS o/

[18:48] *** brrt joined
[19:32] <dalek> MoarVM: f2ae11b | FROGGS++ | src/6model/reprs/C (2 files):

[19:32] <dalek> MoarVM: fix structure size calculation when other structures are inlined

[19:32] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f2ae11b588

[19:33] <jnthn> FROGGS++

[20:35] *** cognominal joined
[20:56] <dalek> MoarVM: 16634eb | jnthn++ | src/6model/serialization.c:

[20:56] <dalek> MoarVM: Fix missing cleanup in serialization.

[20:56] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/16634eb8d9

[21:05] <jnthn> Whee, I may have got us a clean sheet on `nqp -e "1"` (when Moar is run with --full-cleanup)

[21:06] <jnthn> Without busting other stuff.

[21:13] <hoelzro> \o/

[21:13] <hoelzro> jnthn++

[21:19] <dalek> MoarVM: 263415c | jnthn++ | src/io/syncstream.c:

[21:19] <dalek> MoarVM: More properly clean up handles on GC.

[21:19] <dalek> MoarVM:

[21:19] <dalek> MoarVM: Including standard handles, which we leaked. Simply adding in a close

[21:19] <dalek> MoarVM: and free led to a SEGV, because the event loop has to be run before

[21:19] <dalek> MoarVM: it was really save to free the handle. So, this is now done also. It

[21:19] <dalek> MoarVM: will need some further revision in the future, but is good enough to

[21:19] <dalek> MoarVM: get us a clean sheet with --full-cleanup on most NQP tests.

[21:19] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/263415c32b

[21:47] <jnthn> Now for a daily run of the NQP tests under valgrind leak check

[22:14] *** colomon joined
[22:38] <jnthn> Not that many leaks left. MVM_proc_shell does leak

[22:38] <jnthn> FROGGS / hoelzro  ^^ one of you might be able to figure that one out :)

[22:39] <jnthn> It's the MVM_calloc call at MVM_proc_shell (procops.c:171)

[22:40] <hoelzro> hmm

[22:40] <hoelzro> could it be that the GC is running before the process exits, so libuv is trying to do something with the handle after it's been free()d?

[22:41] *** flaviusb joined
[22:43] <jnthn> hoelzro: It's not a memory *error*, it's a memory *leak*.

[22:43] <jnthn> We never free the memory allocated by that calloc

[22:43] <jnthn> with --full-cleanup the GC does collect everything at process exit.

[22:43] <hoelzro> sorry, I was confused by your commit message's mention of SEGV

[22:44] <jnthn> Ah, that was just explaining why the curious-looking uv_run in the patch was there. :)

[22:44] <hoelzro> ah =)

[22:45] <jnthn> 86-pipes.t is rather leaky also

[22:46] <jnthn> Only 3 leaks in t/nqp/*.t and all are I/O or process related. :)

[22:47] <jnthn> t/hll is clean

[23:09] <timotimo> .o( haha, the pipes are leaky )

[23:11] <jnthn> :P

[23:11] <jnthn> Was going to see if it'd finish valgrinding qregex.t before sleep...but I think sleep may come first

[23:16] *** colomon joined
[23:21] <timotimo> is the benchmark run going to happen on its own after that?

[23:22] <jnthn> Well, need to get the script to shove its output somehwere useful and cron job it on the other machine rather than my local one

[23:23] <timotimo> ah, i see

[23:24] <jnthn> But the script seems to work

[23:24] <timotimo> i'm really looking forward to the new grant application getting accepted

[23:24] <timotimo> (i expect the chance to get it accepted lies in the 99.9% - 100% range :) )

[23:25] <jnthn> Only got one comment so far, but it was at least positive. :)

[23:25] <timotimo> don't forget the moderation on that

[23:25] <jnthn> ah, right :)

[23:25] <timotimo> we didn't update moarvm.org yet for 2016.01

[23:25] <jnthn> oops

[23:26] * jnthn will try and remember tomorrow

[23:26] <jnthn> Though it'll be 2016.02 time soon... :)

[23:26] <timotimo> aye

[23:29] <timotimo> http://subtlepatterns.com/?s=dark - moarvm.org could get one of these nice background patterns

[23:30] <jnthn> :)

[23:30] <jnthn> OK, qregex results tomorrow...I should be resting

[23:30] <jnthn> o/
