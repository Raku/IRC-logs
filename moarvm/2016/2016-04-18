[01:07] *** vendethiel joined
[01:17] *** geekosaur joined
[02:36] *** vendethiel joined
[06:13] <nwc10> smmn jnthn

[06:26] <nine_> nwc10 is taking the "no vovel rule" wrt jnthn quite seriously

[06:28] <moritz> did you mean "nwc10 s tkng th "n vwl rl" wrt jnthn qt srsly"? :-)

[06:29] <nine_> f crs

[06:30] <nwc10> (gd mrng #mrvm)

[06:30] <nwc10> hsnt wrkd - stll n jnthn :-(

[06:46] *** domidumont joined
[06:51] *** domidumont joined
[06:59] * masak .oO( gd mrng vtnm )

[07:03] *** zakharyas joined
[07:24] <moritz> gd mrning msk

[07:27] *** leont joined
[07:33] *** leont joined
[08:02] *** brrt joined
[08:08] * jnthn ywwwns

[08:08] * brrt waves

[09:05] *** domidumont joined
[10:10] <masak> jnthn: did you know that in Swedish, "y" is a vowel?

[10:10] <masak> not half a one like in English

[10:11] <jnthn> masak: Ystad!

[10:11] <jnthn> I think I did know that :)

[10:12] <masak> ...and if you mispronounce "Ystad" with a short "y" sound, it means "curdled" (as in cheese) instead of the name of a city :P

[10:12] <jnthn> fwiw, the MoarVM release process is 1) easy, and 2) documented in docs/relesae_guide

[10:13] <jnthn> The only step only I can do at present is actually upload the release

[10:13] <masak> jnthn: how many distinct people have cut a MoarVM release?

[10:13] <jnthn> But everything else is do-able but people with a commit bit

[10:13] <jnthn> masak: Not enough! :P

[10:13] <jnthn> I'm pretty sure some folks have done the bulk of the work and I just uploaded the result, though.

[10:33] <nwc10> cym

[10:33] <nwc10> arse

[10:33] <nwc10> cwm

[10:34] <nwc10> w is a vowel in Welsh, and Welsh loanwords

[10:34] <jnthn> What is the world cwming to...

[10:35] <nwc10> oh, apparently Welsh doesn't just need ŵ

[10:36] <nwc10> but also ẃ ẅ and ẁ

[10:36] <nwc10> (says one page, but not another)

[10:38] <jnthn> The only Welsh word I know is cwrw :P

[10:38] <nwc10> I didn't know *that* one, but I guessed

[10:42] <jnthn> http://blogs.perl.org/users/yuki_kimoto/2016/04/i-think-sub-signatures-dont-need-arguments-count-checking.html is entertaining in so far as MoarVM has for probably close to 2 years been able to completely optimize away arity checks on most hot-paths...

[10:43] <jnthn> ...so dynamic languages aren't doomed to have to do that as a runtime check.

[10:43] <jnthn> At least, not post-optimization

[10:43] <nine_> Also giving Javascript and PHP as examples for "good" "natural" behavior is...intriguing

[10:43] <moritz> also, the arguments in there are pretty weak

[10:45] <moritz> I think most users of programming languages that got this one right would agree that argument checking is just essential to getting good feedback from the compiler

[10:45] <moritz> or the runtime, whatever

[11:00] *** domidumont joined
[11:02] *** brrt joined
[11:04] <jnthn> Sure, the lang design side of the argument also strikes me as weak, but lang design is always something folks can debate. The perf bit is a decades-out-of-date view though. :)

[11:04] *** diakopte1 joined
[11:04] *** arnsholt_ joined
[11:04] *** japhb_ joined
[11:05] *** ggoebel114 joined
[11:07] *** colomon joined
[11:30] *** retupmoc_ joined
[11:37] <psch> maybe i'm just getting hung up on bad english, but it seems to me that the blog author doesn't really have any argument except "it should be slower but i don't want to measure"..?

[11:38] <psch> ah, no, there's "other dynamic language do it too" as well

[12:00] *** avar joined
[13:02] *** colomon joined
[13:06] *** domidumont joined
[13:09] *** vendethiel joined
[14:02] <[Coke]> I could have done the moarvm release, btw, but I have no idea if what's on master was good to release. the actual bits of commiting and pressing buttons, sure, that part's easy.

[14:02] <[Coke]> Maybe we can plan for someone aside from jnthn to do May's release of Moar, JIC.

[14:06] *** colomon joined
[14:08] <jnthn> Aye. I can cut a Moar release this evening.

[14:11] <[Coke]> that'd be great. I'll do the nqp/rakudo by wednesday at the latest.

[14:18] *** colomon joined
[14:19] <brrt> i'm wondering how a linear scan register allocation algorithm can deal with pre-coloring

[14:20] <brrt> and with 'dead ranges', i.e. a range were everything must be spilled...

[14:23] *** domidumont joined
[14:24] <brrt> hmmmm

[14:28] *** colomon joined
[14:31] <timotimo> when you have a range where everything must be spilled, just break up the whole algorithm into two pieces of data?

[14:32] *** vendethiel joined
[14:48] <timotimo> jnthn: how do we feel about reverting the "set up VMNulls everywhere" code until we find something that's more efficient?

[14:49] <jnthn> Well, it fixes quite a few SEGVs?

[14:49] <jnthn> And we're talking "several percent"?

[14:56] <timotimo> you said it was costly; i didn't do a precise measurement yet, but perf showed those instructions were hot in that function

[14:56] <timotimo> i'm not yet very good at reading perf, though

[14:57] <timotimo> and it only fixes segvs if you run moar on fuzzed bytecodes

[14:57] <jnthn> m: my $x := $x; say $x

[14:57] <camelia> rakudo-moar 1aabef: OUTPUT«===SORRY!=== Error while compiling /tmp/KOuXFsHcVu␤Cannot use variable $x in declaration to initialize itself␤at /tmp/KOuXFsHcVu:1␤------> my $x := $⏏x; say $x␤    expecting any of:␤        term␤»

[14:57] <timotimo> afl-fuzz is very good at finding instructions, rewiring one of the object operands to point at an object register that hasn't been written to yet, and saying "ha, i crashed it!"

[14:57] <jnthn> Hm, there was some case a bit like that in RT that SEGV'd that I figured it'd also fix

[14:58] <jnthn> But we have had crashes in the past resulting from such things, anyway

[14:58] <jnthn> I'd rather keep it and work out how to fix things efficiently later.

[14:58] <timotimo> if you say it ain't that bad, we'll leave it in for this month's release

[14:58] <timotimo> it's likely that people would notice a performance impact, but unlikely they'd stumble upon the segfaults; at least i thought so until you said we actually had this kind of segfault happen in the wild already

[14:59] <jnthn> Well, I didn't notice any notable increase in the Tux Test::CSV numbers

[14:59] <jnthn> Which is a good canary for real world code

[14:59] <jnthn> I'd be much more worried if I saw a big jump there

[14:59] <jnthn> We might check the daily benchmark runs also

[15:00] <timotimo> ah, of course! you have those! why did i already forget about them?

[15:01] <nine_> timotimo: This may come as a shock to you, but there is a possibility, that you are actually human ;)

[15:01] <timotimo> darn, all the effort i put into making sure i'm not human gone to waste :(

[15:02] <jnthn> .oO( botornot )

[15:04] <timotimo> did someone inject some botox into me while i was sleeping?

[15:14] <moritz> if you have to ask.. probabl yes :-)

[15:19] <timotimo> that'd explain why i'm not a bot, then

[15:19] <timotimo> because clearly that's what botox does

[15:42] *** leont joined
[16:38] <jnthn> Ugh, tired

[16:38] <jnthn> Will rest a little then cut the release

[17:05] *** vendethiel joined
[17:09] <dalek> MoarVM: 46feef2 | jnthn++ | docs/ChangeLog:

[17:09] <dalek> MoarVM: ChangeLog for 2016.04.

[17:09] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/46feef2f18

[17:10] <dalek> MoarVM: 0d03bb6 | jnthn++ | VERSION:

[17:10] <dalek> MoarVM: Bump VERSION.

[17:10] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0d03bb60e4

[17:11] *** leont joined
[17:15] <japhb_> That was a quick rest!

[17:16] <timotimo> powernap, perhaps

[17:16] <japhb> pernaps

[17:17] <japhb> On my desktop, that's only different by a couple *pixels*

[17:18] <jnthn> http://www.moarvm.org/releases/MoarVM-2016.04.tar.gz

[17:18] <jnthn> [Coke]: ^^ :)

[17:18] <jnthn> Website can wait until after more rest :)

[17:35] * leont is still observing weird Proc::Async related ordering issues in TAP::Harness occasionally. Figuring out if it is my code, rakudo or moar that's causing it it tricky :-/

[17:35] <leont> Though things have gotten a lot better

[17:35] <timotimo> yeah, i bet!

[17:35] <timotimo> that's good to hear

[18:15] <hoelzro> leont: ordering issue?

[18:15] <hoelzro> I encountered something like that some time ago

[18:16] <leont> It seems I'm getting my result in the wrong order, but I don't know why. I just know I sometimes get errors suggesting my output was misordered, or even weirder errors

[18:16] <hoelzro> lemme see if I can dig up that RT I filed

[18:17] <hoelzro> ah, here it is: https://rt.perl.org/Ticket/Display.html?id=126425

[18:21] <leont> No, my issue is dealing with output from stdout

[18:22] <[Coke]> jnthn: Danke.

[18:22] *** domidumont joined
[18:24] <hoelzro> ah ok

[18:38] <leont> Also, I have no idea how «while ($!grammar.subparse($!buffer)) -> $match { $!buffer.=substr($match.to);» could give me «Start argument to substr out of range. Is: 6, should be in 0..5» errors :-/

[18:39] <leont> I'd almost suspect the .act it's in isn't serialized properly, but that doesn't sound likely does it

[18:54] *** FROGGS joined
[18:55] *** Ven joined
[19:25] *** vendethiel joined
[19:27] <dalek> moarvm.org: b6f6332 | jnthn++ | / (4 files):

[19:27] <dalek> moarvm.org: Update for 2016.04 release.

[19:27] <dalek> moarvm.org: review: https://github.com/MoarVM/moarvm.org/commit/b6f6332bd1

[20:56] *** lizmat joined
[22:05] *** vendethiel joined
[22:16] *** geekosaur joined
[22:31] *** colomon joined
