[01:48] *** ilbot3 joined
[05:49] *** brrt joined
[06:09] *** brrt joined
[06:17] *** domidumont joined
[06:21] *** domidumont joined
[06:25] <brrt> good *

[06:25] <brrt> yesterday when i couldn't sleep i figured out a solution to my issue

[06:25] <brrt> i'm not sure if you are going to laugh or cry, because it is the same solution as the others

[06:25] <brrt> nevertheless

[06:26] <brrt> it does have the twin advantages of being robust (well, a bit more robust anyway) and simple

[06:27] <brrt> we do assign a ordering number to the tiles-that-are-to-be-inserted

[06:27] <brrt> however, we do this explicitly

[06:28] <brrt> and with just relative meaning

[06:28] <brrt> e.g.

[06:28] <brrt> suppose we find that we must spill a register to load a value

[06:28] <brrt> we must do three things

[06:28] <brrt> a): find the register

[06:29] <brrt> b): find a place in the bytecode stream to spill it (by default just after its creation)

[06:29] <brrt> c): find a place in the bytecode strema to insert the load (by default just before its use)

[06:30] <brrt> if the place of b) and c) is the same, first insert the spill, and assign it relative order nr $x; then insert the load, and assign it relative order nr $x + 1

[06:31] <brrt> this way i can always ensure that pairs of inserted tiles have a relative order, and they also have a relative order to tiles that are already present in the bytecode stream

[06:31] <brrt> bytecode stream ~~ tile list, in this case

[06:31] <brrt> so yes, i'm faced with difficulty, and i just pick another integer

[06:32] <brrt> in this case, explicit integers are better than implicit

[07:05] *** brrt joined
[07:36] *** ilbot3 joined
[07:54] *** lizmat joined
[07:59] <brrt> \o lizmat

[09:05] *** FROGGS joined
[09:21] *** brrt joined
[13:42] *** domidumont joined
[13:56] *** brrt joined
[14:02] *** zakharyas joined
[14:18] *** domidumont joined
[15:15] *** domidumont joined
[19:05] *** zakharyas joined
[19:11] *** zakharyas joined
