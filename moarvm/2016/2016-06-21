[00:13] *** stmuk joined
[01:48] *** ilbot3 joined
[02:22] *** lizmat joined
[06:12] *** domidumont joined
[06:17] *** domidumont joined
[07:46] <nwc10> http://ianozsvald.com/2016/06/20/results-for-which-version-of-python-2vs3-do-london-data-scientists-use/ -- interesting. if you read it, please read the "Bias" bit at the end

[08:00] <moritz> if I'd start a new python project, it'd certainly be in 3.4+

[08:01] <moritz> but legacy, legacy, legacy

[08:01] <nwc10> me too*. and yes, legacy

[08:01] <nwc10> * I wanted something not-perl to validate XML I generated. But I found a command-line thing that seemed to be C, that was already installed

[08:23] *** rurban_ joined
[08:34] *** cognominal joined
[09:03] <arnsholt> Yeah, Python 3 is a lot nicer

[09:03] <arnsholt> When I looked at the differences in semantics and such between 2 and 3 when I started Snake, I basically looked at old-style vs. new-style classes and went NOPE!

[09:03] <arnsholt> All of the nopes, in fact

[09:04] <timotimo> yeah, never do old-style classes

[09:05] <arnsholt> Yeah, I wanted to do something moderatly clever in a Python 2 project, involving descriptors and couldn't figure out why the descriptors weren't called

[09:05] <arnsholt> Then I realized: it's old-style unless you explicitly inherit from object

[10:54] *** domidumont joined
[11:36] *** domidumont joined
[11:46] *** brrt joined
[11:46] <brrt> nwc10: interesting

[11:47] <brrt> otoh, descriptors are such a dumb design

[11:47] <timotimo> what's that again?

[11:48] <brrt> its...

[11:48] <brrt> an object

[11:48] <brrt> which takes the place of an attribute on another object

[11:48] <brrt> and which has three methods: get,set,delete

[11:48] <timotimo> oh

[11:48] <brrt> e.g.

[11:49] <moritz> a layer of indirection over an attribute

[11:49] <moritz> much like returning a Proxy in Perl 6

[11:49] <moritz> python makes heavy use of them

[11:49] <brrt> class Foo(object): bar = descriptor(); f = foo(); f.bar = 3; (calls f.bar.__setitem__(f.bar, f, 3)

[11:50] <brrt> perl6 has containers, which (imho) is more sane

[11:50] <timotimo> we also have NativeRefs which basically are those descriptors :P

[11:50] <timotimo> those that are such a dumb design

[11:50] <brrt> not sure i agree

[11:50] <moritz> the weird thing in python land (IMHO) is that from the outside, you have to know if something is an attribute or a method

[11:50] <timotimo> maybe :)

[11:51] <brrt> that what moritz says

[11:51] <moritz> but if you access it as an attribute, there might still be a method hidden behind it (trhough such a descriptor)

[11:51] <timotimo> right

[11:51] <timotimo> NativeRef works in terms of assign and decont

[11:51] <brrt> on the inside, you somehow have to store something in the object hash, without conflicts pretty please

[11:51] <brrt> on the inside, you don't necessarily know what 'name' your attribute has

[11:52] <timotimo> hm

[11:52] <brrt> i'm very confident that descriptor are the wrong way to approach the question of 'magic attributes'

[11:52] <timotimo> magibutes

[11:53] <brrt> but yeah, proxies are also like that

[11:53] <timotimo> proxies don't let you set a name without mixing in an anon role with a .^name on it, eh?

[11:54] <brrt> except that you probably create a proxy per object (or per invocation), whereas the descriptor is a class-global instance

[11:55] <timotimo> ah, yeah, the proxy needs to close over the instance you want to access

[11:56] *** lizmat joined
[11:59] <brrt> \o lizmat

[12:00] <lizmat> brrt o/

[12:03] <timotimo> <o

[12:05] <jnthn> o/ lizmat

[12:05] <jnthn> Enjoying YAPC?

[12:05] <jnthn> Or TPC as I heard it's now called...there's one less FAQ :)

[12:06] <nine> New FAQ: "What happened to "YAPC"?"

[12:06] <brrt> and will we be calling it TPC::EU next year?

[12:08] <jnthn> And if it's TPC::EU, will the UK be allowed to host it again? :P

[12:09] <moritz> well, Kiev wasn't really "EU" either :-)

[12:10] <brrt> we'll host it in switzerland or norway

[12:10] <moritz> in both!

[12:10] <jnthn> Goodness, the beer prices... :P

[12:10] <moritz> Poland, maybe? :-)

[12:10] <moritz> closer to me, cheaper to eat and drink

[12:11] <brrt> we can also do YAMC for a moarvm conference

[12:12] <timotimo> yam yam

[12:12] * jnthn doesn't mention how nice it'd be to have it in Prague at some point, 'cus he knows that's a case of "well volunteered" :P

[12:12] <brrt> which is just us 5 or 10 guys hanging out

[12:12] <brrt> prague is an excellent idea

[12:12] <brrt> it's settled then

[12:12] <timotimo> i need to offer brrt hugs

[12:12] <brrt> YAMC::EU 2016 in prague

[12:12] <timotimo> this year, already?

[12:13] <timotimo> we only have have a year to plan it, absolute-maximum

[12:13] <brrt> :-D

[12:14] <moritz> well, a smaller conference needs less planning

[12:14] <moritz> also, please spell it MOARCONF

[12:15] <brrt> awesome

[12:16] <nine> +1 for MOARCONF

[12:16] <timotimo> COANF

[12:16] <jnthn> heh, a MOARCONF would be fun

[12:21] <lizmat> jnthn: sorry, was a way for a bit having breakfast

[12:22] <lizmat> TPC is nice, hope the videos of yesterday will be up today

[12:22] <lizmat> the guys were working on it last night already

[12:23] <lizmat> MOARCONF is an excellent idea, BTW

[12:23] <lizmat> perhaps after Alpine Workshop ?

[12:23] <nwc10> I assume it's more likely to be a Moar Unconference (come hackathon)

[12:23] <lizmat> or maybe *at* the Alpine Workshop ?

[12:25] <timotimo> i'm not sure we want to pull in the whole UN for this

[12:27] <brrt> when is the APW?

[12:32] <brrt> 2-3 september

[12:32] <brrt> hmmmm

[12:35] <brrt> oh well, i can always try to get free time for that :-)

[13:28] *** lizmat joined
[14:08] *** domidumont joined
[14:46] *** rurban_ joined
[16:01] *** cognominal joined
[16:59] *** domidumont joined
[17:30] *** lizmat joined
[18:57] *** FROGGS joined
[19:01] *** lizmat joined
[19:32] *** mst___ joined
[19:32] *** japhb joined
[20:05] *** lizmat joined
[20:10] *** lizmat joined
[20:38] *** cognominal joined
[21:45] *** lizmat joined
