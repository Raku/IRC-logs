[02:33] *** colomon joined
[02:47] *** ilbot3 joined
[02:50] *** colomon joined
[03:12] *** vendethiel joined
[04:15] *** colomon joined
[06:53] *** colomon_ joined
[07:02] *** domidumont joined
[07:06] *** domidumont joined
[07:24] *** FROGGS joined
[07:54] *** zakharyas joined
[09:48] *** leont joined
[12:54] *** virtualsue joined
[13:06] *** brrt joined
[13:16] *** pochi joined
[13:18] *** stmuk__ joined
[13:20] *** Peter_R joined
[14:08] <hoelzro> o/ #moarvm

[14:09] <hoelzro> has anyone run into a situation where turning tracing on only results in a handful of Op 159 (getcode) prints?

[14:09] <hoelzro> I'm tracing "my $sum = 0; for ^10 { $sum += $_ }" and all I see are two Op 159

[14:13] <JimmyZ> m: my $sum = 0; for ^10 { $sum += $_ }

[14:13] <camelia> rakudo-moar 988a78: ( no output )

[14:14] <JimmyZ> spesh log ? or trace macro in interp.c?

[14:28] <hoelzro> the latter

[14:28] <hoelzro> MVM_TRACE

[14:31] <brrt> no idea...

[14:32] <JimmyZ> hoelzro: I know

[14:33] <JimmyZ> you should turn off CGOTO

[14:33] <hoelzro> what's that?

[14:35] <JimmyZ> how do you enble TRACE?

[14:36] <JimmyZ> make tracing?

[14:36] <hoelzro> by stupidingly editing interp.c by hand =/

[14:36] <JimmyZ> you should type `make tracing`

[14:37] * hoelzro tries

[14:39] <hoelzro> there we go

[14:39] <hoelzro> thanks JimmyZ!

[15:25] *** brrt joined
[16:00] <hoelzro> diakopter: yesterday you mentioned a branch that had some deserialization fixes; which branch is it?

[16:32] <diakopter> hoelzro: cache_sc_idx

[16:32] <hoelzro> diakopter: thanks!

[16:32] <diakopter> but it fails on windows last time we checked

[16:32] <hoelzro> oh, that's fine with me =) I just want to see if it fixes a bug I'm battling

[16:33] <diakopter> it just fixes caching during bootstrapping and makes spectesting loads faster

[16:34] <diakopter> hoelzro: feel free to merge master into it

[16:35] <diakopter> nm I did it

[16:35] <dalek> Heuristic branch merge: pushed 140 commits to MoarVM/cache_sc_idx by diakopter

[16:36] <diakopter> hoelzro: see updated https://github.com/MoarVM/MoarVM/compare/cache_sc_idx

[16:36] <hoelzro> thanks =)

[17:09] *** Peter_R joined
[17:19] *** Peter_R joined
[17:21] *** domidumont joined
[17:26] *** camelia joined
[17:36] *** FROGGS joined
[18:08] <diakopter> hoelzro: anything?

[18:12] *** ilbot3 joined
[18:20] <lizmat> http://www.dagolden.com/index.php/2589/perl-5-and-perl-6-are-mortal-enemies/   # food for thought

[18:51] *** vendethiel joined
[19:07] <hoelzro> diakopter: my bug sadly still occurs =(

[19:11] <hoelzro> if anyone's curious; https://rt.perl.org/Ticket/Display.html?id=127089

[19:53] <nwc10> gosh. I'd forgotten how fast a Raspberry Pi v2 is

[19:53] <nwc10> it's about half the speed of x86_64 with ASAN

[19:53] <nwc10> (on one core)(ie the setting)

[20:03] * diakopter should try it on the Zero

[20:04] <diakopter> hoelzro: that's interesting

[20:04] <nwc10> "might take longer". And I think you'll need to configure (more) swap as I think it peaked at over .75G of RAM

[20:05] <hoelzro> diakopter: what's more interesting is calling .map in item context fixes it

[20:05] * hoelzro has to add that to the ticket

[20:08] <diakopter> m: https://gist.github.com/diakopter/7981dc5b1d0ff7598e53

[20:08] <camelia> rakudo-moar ed6ec7: OUTPUT«before␤after␤»

[20:08] <diakopter> hoelzro: what am I doing wrong? ^

[20:08] <hoelzro> diakopter: the sub has to be from another module

[20:10] <diakopter> oh

[20:11] <hoelzro> I'll add that to the ticket too

[20:38] *** leont joined
[21:19] *** domidumont joined
[21:26] *** thzre joined
[21:51] <hoelzro> the plot thickens: I think it's just map

[22:00] <hoelzro> hmm, note() does it too

[22:32] <diakopter> hoelzro: sounds like it's sink context

[22:33] <diakopter> hoelzro: probably TimToady could diagnose it

[22:34] <hoelzro> diakopter: sink context and list

[22:34] <hoelzro> it also depends on what's in the block

[22:34] <hoelzro> <...>.map({ $_ }) is fine

[22:34] <hoelzro> <...>.map({ $_ ~ 'suffix' }) is not

[22:34] <hoelzro> neither is .map({ $_ + 1 })

[22:34] <diakopter> o_O

[22:35] <hoelzro> using note() and no map is also broken

[22:35] <hoelzro> it's...a very interesting bug =)

[22:36] <diakopter> it might be something else also, but I feel strongly that it's an overeager optimization from a missing want or WANT

[22:47] <hoelzro> it might be bisect-o-clock when I get home

[22:48] <hoelzro> see if this ever worked

[22:48] * hoelzro relies too heavily on bisect for P6 work

[23:03] * lizmat decides to stash the setup-repositories work

[23:04] <lizmat> it only gave about 8 msecs improvement, at the expense of not so nice code

[23:04] <lizmat> :-(

[23:05] <hoelzro> lizmat++ # trying things

[23:05] <lizmat> I thought the same code was also run at bare startup, but it wasn't

[23:06] <lizmat> 8 msecs at a bare startup, I would quickly take

[23:10] <timotimo> hmm

[23:10] <timotimo> i would also take that, yeah

[23:10] <timotimo> given a startup is currently like 100 msecs

[23:11] <timotimo> hm, or 90

[23:14] <lizmat> more like 110 for me, atm

[23:14] <timotimo> mhm

[23:15] <diakopter> time perl -e 'print 1' # 2 ms

[23:16] <lizmat> diakopter: try that with -MMoose  :-)

[23:17] <diakopter> yeah, I submitted a pull request to Moose that halves its startup time, but it was rejected for mostly bad reasons

[23:18] <timotimo> i'm glad it got rejected, so perl6 looks better in comparison ... :P

[23:18] <diakopter> well :P

[23:20] <timotimo> i'm hopeful we'll at least halve the bare startup time over the next half year

[23:20] <diakopter> I'm quite hopeful it's doable

[23:21] <timotimo> and it's likely that our ram usage on bare startup can also go down a good chunk

[23:21] <timotimo> i don't actually know how we'll achieve that, though

[23:21] <diakopter> what's the ram usage now

[23:27] <timotimo> timo@schmetterling /p/a/ibm> time perl6 -e ''

[23:27] <timotimo> 0.08user 0.01system 0:00.09elapsed 100%CPU (0avgtext+0avgdata 65144maxresident)k

[23:27] <timotimo> in other words "very bad" :)

[23:29] *** pochi_ joined
[23:30] <timotimo> i meant to build a separate setting that has a few classes missing to see how the ram usage does down from that

[23:30] <timotimo> to get a little measurement of how good lazy deserialization works
