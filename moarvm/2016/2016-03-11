[02:29] *** vendethiel joined
[06:02] *** dalek joined
[07:04] *** domidumont joined
[07:09] *** domidumont joined
[07:21] *** dalek joined
[07:54] *** dalek joined
[08:30] *** kjs_ joined
[08:32] *** geekosaur joined
[08:41] *** zakharyas joined
[09:13] *** brrt joined
[09:18] <brrt> good *

[09:20] <moritz> \o brrt

[09:21] <brrt> \o moritz

[09:21] <brrt> GPW done yet?

[09:21] <moritz> no, still running

[09:21] <moritz> and tomorrow is hackathon

[09:21] <moritz> http://act.yapc.eu/gpw2016/wiki?node=Hackathon several p6 wolks have signed up

[09:23] <brrt> cool

[09:23] * brrt should look up whoever thomas mann really was

[09:28] <moritz> a giant of German literature

[09:28] <moritz> contemporary

[09:28] <moritz> kinda

[09:28] <moritz> erm, no, died 1955

[09:29] <moritz> Nobel Prize winner

[09:30] <brrt> i see his name on lots of streets

[09:30] <brrt> so that explains

[09:30] <jnthn> But how many verbs could be stack up at the end of a sentence? :)

[09:31] <brrt> they're germans, you have to be tolerant about grammar

[09:31] <brrt> :-P

[10:00] <brrt> damnit

[10:00] <brrt> the break is not as predictable as i had assumed

[10:04] <jnthn> "the break"?

[10:07] *** FROGGS joined
[10:13] <brrt> json-fast breaks under the expr jit

[10:13] <brrt> i already see the problem

[10:13] <brrt> or, i think i do

[10:13] <brrt> can i temporarily shut off precompilation?

[10:14] <jnthn> "no precompilation;" at the top of the script

[10:15] <brrt> hmm

[10:15] <brrt> env var maybe

[10:15] <brrt> ?

[10:32] <brrt> hmm, oh well

[10:37] <brrt> hmmm

[10:38] <brrt> tis as i expected

[10:38] <brrt> not handling frame handler labels correctly

[10:38] <brrt> annoying

[10:38] <jnthn> ah..."fun"

[10:39] <brrt> not really

[10:40] <brrt> i can't make as strong claims about the ordering of labels etc

[10:40] <jnthn> Ah, and the order can matter

[10:41] <brrt> it's actually the end of multiple frame handler blocks

[10:41] <brrt> that explains the sequence of dynamic control labels

[10:42] <brrt> why would a getlex have a deopt_one annotation

[10:43] <jnthn> brrt: Anything we can insert a guard after gets one

[10:44] <brrt> but we're not doing anything with that it seems

[10:45] <brrt> except for on actual guards

[10:45] <FROGGS> jnthn: when I pass an &foo to a nativecall function... how do I know it is callable? I only see it as a P6Opaque

[10:45] <jnthn> "know" in what sense?

[10:46] <moritz> ~~ Callable?

[10:46] <jnthn> See the isinvokable op's implementation for one answer though...

[10:46] <FROGGS> moritz: does C have smartmatch now? :o)

[10:46] * brrt thinks inspecting the REPR is the answer

[10:48] <moritz> FROGGS: I misread "nativecall function" as a funtion within NativeCall.pm, I think

[10:48] <FROGGS> yeah

[10:49] <jnthn> Why do you want to check, ooc?

[10:49] <FROGGS> I'm attempting at making function pointers work btw

[10:49] <jnthn> In structs?

[10:49] <FROGGS> src/core/nativecall.c:496 P6opaque invokable=1 \o/

[10:49] <FROGGS> jnthn: no, currently like this:

[10:50] <FROGGS> sub ForeignFunction() returns int32 is native('./19-function-pointers') { * }

[10:50] <FROGGS> sub ReturnFunctionPointer() returns Pointer is native('./19-function-pointers') { * }

[10:50] <FROGGS> my $ptr = ReturnFunctionPointer();

[10:50] <FROGGS> nativecast(&ForeignFunction, $ptr);

[10:50] <jnthn> ah

[10:50] <FROGGS> dunno if that concept can work out though

[10:50] <FROGGS> but I'll try and learn something

[10:51] <FROGGS> (I'm doing this now because the inlined+sized arrays in Structs are a bit too big for me currently)

[11:00] <FROGGS> so I think I need to duplicate the logic of MVM_nativecall_build...

[11:01] <FROGGS> or, hmmm

[11:13] * brrt is kind of annoyed at the uselessness of smart-grid literature

[11:17] <brrt> long story short, i need a trip back to the drawing table to deal with many-labeled things correctly

[11:18] <moritz> and here I though you meant smart enegery transport grids (which is what I associate with "smart grid") :-)

[11:18] <jnthn> You've got the power!

[11:19] <brrt> yeah, i menat that too, i'm looking into the topic for my second thesis

[11:21] <moritz> ah

[11:22] <brrt> (to be pedantic, 'smart power transmission' != 'smart grid'; the former is about using power lines cleverly, the second is about matching load and generation in a distributed fashion)

[11:23] <brrt> whereby matching means both 'managing distributed generatorion, dispatchable loads, and storage

[11:25] <FROGGS> lol, it works /o\

[11:25] <brrt> and the uselessness is in that smart grid literature is always a): some guy from a compsci background that wants to play with distributed systems, b):some guy from a utility that wants to have permission to shed loads whenever he feels like it, c): an economist who wants to talk about price signals

[11:25] <FROGGS> is it some sort of record to implement function pointers within 45 minutes (the hacky way) ?

[11:26] <brrt> not bad :-)

[11:27] <FROGGS> :o)

[11:27] <brrt> and none of these things comes near solving the central problem, which is, how do we ensure that distributed generators and consumers _collaborate_. </rant>

[11:30] <jnthn> FROGGS++

[11:31] <moritz> brrt: sounds very much like something my father in law would say (who has been building dams for power plants and pump storage stations for 35 years or so)

[11:31] <FROGGS> problem is that I somehow need to return a fresh/copied function from nativecast...

[11:31] <brrt> that's a cool job moritz :-)

[11:31] <FROGGS> currently it messes with the original function definition, which is the "target type" of the cast

[11:32] <jnthn> FROGGS: A straight clone should do it, I think

[11:32] <FROGGS> nqp::clone in NC.pm?

[11:33] <moritz> brrt: ... except when it takes you to Teheran during the first Gulf war, for example :/

[11:33] <moritz> but in general, yes

[11:33] <brrt> was iran involved in that?

[11:33] <moritz> that was between Iran and Iraq, yes

[11:33] <moritz> (unless I miscounted the Gulf wars, but that's the one I'm talking about)

[11:34] <FROGGS> jnthn: \o/

[11:35] * brrt thought it was between iraq and kuwait

[11:35] <brrt> but i'm not all that familiar with it

[11:35] <moritz> oh

[11:35] <brrt> well, my familiarity extends to 'desert strike'

[11:36] <moritz> https://en.wikipedia.org/wiki/Iran%E2%80%93Iraq_War that's the one I meant

[11:36] <brrt> a lot of countries against iraq, anyway

[11:37] <brrt> anyway,, lunch &

[11:37] <jnthn> .oO( Sad dam Hussein )

[11:41] <FROGGS> if I want to change the signature of an op... shall I add a new one these days?

[11:41] <FROGGS> I need to pass an extra arg

[11:42] <jnthn> Which op?

[11:42] <FROGGS> nativecallbuild

[11:42] <jnthn> Why does it need an extra arg, when it already takes a hash describing what to do?

[11:43] <FROGGS> ahh, of course

[11:43] <FROGGS> I looked at that already but only spotted the arg_info hash

[12:24] *** kjs_ joined
[13:01] *** geekosaur joined
[14:06] <dalek> MoarVM: c20b5a3 | (Simon Ruderich)++ | src/io/sync (2 files):

[14:06] <dalek> MoarVM: syncpipe: implement .native_descriptor introspection

[14:06] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c20b5a3e21

[14:06] <dalek> MoarVM: ef19050 | jnthn++ | src/io/sync (2 files):

[14:06] <dalek> MoarVM: Merge pull request #345 from rudis/master

[14:06] <dalek> MoarVM:

[14:06] <dalek> MoarVM: syncpipe: implement .native_descriptor introspection

[14:06] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ef19050198

[14:20] <dalek> MoarVM: ada3752 | FROGGS++ | src/ (3 files):

[14:20] <dalek> MoarVM: handle C function entry point in nativecall_build when supplied

[14:20] <dalek> MoarVM:

[14:20] <dalek> MoarVM: With this we can now let a Perl 6 native subroutine use a given

[14:20] <dalek> MoarVM: memory address of a C function.

[14:20] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ada3752a81

[14:35] *** FROGGS[mobile] joined
[15:00] *** brrt joined
[16:06] *** cognominal joined
[16:36] *** FROGGS joined
[16:44] *** FROGGS_ joined
[16:49] *** FROGGS__ joined
[17:22] <timotimo> FROGGS: i find it strange to have the target of the nativecast be an actually defined sub that has an "is native" on it; have you considered just taking a Signature instead?

[17:22] <timotimo> because if you "is native('some library')" for a function pointer target, that confuses me, because that function isn't actually likely to be defined in that native library

[17:23] <FROGGS> hmmm

[17:23] <FROGGS> good point I guess

[17:41] *** FROGGS[mobile] joined
[18:05] *** domidumont joined
[18:43] <lizmat> unicode 9.0 summary of changes (draft): http://unicode.org/versions/Unicode9.0.0/

[18:53] <[Coke]> we don't say what version of unicode we support programmatically, do we/

[18:53] <[Coke]> ?

[18:54] <timotimo> that would be an interesting little tidbit to have

[19:08] <FROGGS[mobile]> more "interesting" would be a "use unicode:ver(v6.3)"

[19:25] <lizmat> isn't that somewhere in $*VM ?

[19:29] * [Coke] wonders why $*VM is of type VM and not something Hashy.

[19:29] <lizmat> [Coke]: it does Systemic, and that was one of TimToady's inventions

[19:30] <lizmat> the AT-KEY interface was actually deprecated before 6.c

[19:30] <[Coke]> unfortunately, it means you can't .keys it.

[19:30] <[Coke]> or introspect it, that I can fight with from the REPL.

[19:31] <lizmat> m: dd VM.^attributes>>.name   # [Coke]  ??

[19:31] <camelia> rakudo-moar b703d6: OUTPUT«("\$!config", "\$!prefix", "\$!precomp-ext", "\$!precomp-target", "\$!precomp-dir", "\$!name", "\$!auth", "\$!version", "\$!signature", "\$!desc")␤»

[19:32] <lizmat> m: dd VM.^methods>>.name

[19:32] <camelia> rakudo-moar b703d6: OUTPUT«("BUILD", "platform-library-name", "Str", "gist", "config", "prefix", "precomp-ext", "precomp-target", "precomp-dir", "name", "auth", "version", "signature", "desc")␤»

[19:32] <[Coke]> lizmat: thanks. I never would have thought to try that.

[20:48] *** cognominal joined
[20:49] *** cognominal joined
[20:54] <jnthn> The UAX #29 changes will impact NFG

[20:55] <jnthn> There's some RTs already asking about emoji with regard to NFG

[20:56] <jnthn> My answer was going to be "we define NFG by UAX #29".

[20:56] <jnthn> But seems UAX #29 is going to make the changes that the RTs ask for.

[20:56] <jnthn> So, that's nice.

[20:56] <jnthn> My answer is still that I guess, but it's more like "we'll fix this as part of updating to Unicode 9"

[20:58] <jnthn> Other than that, doesn't look like it'll be anything outside of what our scripts handle already.

[20:58] <jnthn> *script handles

[21:12] <timotimo> do we want to support reverting to older versions of the unicode standard in lexical environments?

[21:13] <jnthn> No

[21:13] <jnthn> Well, I don't :P

[21:13] <jnthn> Maybe somebody has a really good use case

[21:14] <jnthn> But I've yet to hear one besides "we can show it off" :P

[21:14] <jnthn> And the infrastructure to do it would be quite annoying.

[21:14] <jnthn> (Shipping older Unicode DBs, lazily loading them, etc.)

[21:15] <timotimo> ensuring the behavior of a script doesn't change when updating to a newer rakudo :)

[21:16] <jnthn> I'd think the Unicode stability policy covers most of the important bases though

[21:16] <timotimo> good

[21:16] <jnthn> They've constrainted themselves a good bit in what they can change.

[21:25] *** colomon joined
[21:52] *** mojca joined
