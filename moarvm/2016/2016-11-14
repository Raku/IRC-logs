[06:19] *** domidumont joined
[06:22] *** domidumont joined
[06:30] <JimmyZ> hmm, seems that call mkdir and then call readdir will get a error

[06:30] <JimmyZ> rm -rf test && ./perl6-m -e 'use nqp; nqp::mkdir("test", 0o777) unless "test".IO.e; my $io := nqp::opendir("test"); say nqp::nextfiledir($io);'

[06:30] <JimmyZ> Failed to read dirhandle: 2

[06:32] <JimmyZ> this only happens when make an un-existed dir and then read it

[06:45] <dalek> MoarVM: a94e744 | (Jimmy Zhuo)++ | src/io/dirops.c:

[06:45] <dalek> MoarVM: fixed readdir, so it won't check old errno

[06:45] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a94e744b44

[06:52] <dalek> MoarVM/even-moar-jit: a70f9fb | brrt++ | src/jit/linear_scan.c:

[06:52] <dalek> MoarVM/even-moar-jit: Implement register assignment

[06:52] <dalek> MoarVM/even-moar-jit:

[06:52] <dalek> MoarVM/even-moar-jit: This almost enables the use of the linear scan algorithm.

[06:52] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/a70f9fb496

[07:10] *** brrt joined
[07:16] <brrt> \o

[07:17] <JimmyZ> o/

[07:17] <brrt> reproting on progress: going well, but I've still got problems with (referencing) pseudotiles

[07:17] <brrt> because everything is accessed by index

[07:23] *** domidumont joined
[07:36] *** domidumont joined
[07:40] *** domidumont joined
[07:53] <brrt> i'll get into more detail on that later, have to run now

[08:14] *** domidumont joined
[08:22] *** zakharyas joined
[09:34] *** domidumont joined
[09:41] *** domidumont joined
[10:04] *** domidumont joined
[11:04] *** domidumont joined
[12:02] <dalek> MoarVM: 20c8591 | FROGGS++ | src/platform/posix/time.c:

[12:02] <dalek> MoarVM: work around clock_gettime issue on OSX (#438)

[12:02] <dalek> MoarVM:

[12:02] <dalek> MoarVM: This resolves issue #437. Tested on pre- and post OSX 10.12 / Xcode 8.

[12:02] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/20c8591ad7

[13:26] *** domidumont joined
[13:35] *** domidumont joined
[14:04] *** domidumont joined
[14:14] *** domidumont joined
[14:15] <stmuk> FROGGS++

[14:16] <stmuk> apple--

[14:41] *** _longines joined
[16:37] *** FROGGS joined
[16:37] <FROGGS> o/

[17:04] *** japhb joined
[17:56] *** lizmat joined
[17:58] <FROGGS> btw, I've got now access to an AIX@powerpc machine now

[17:58] <FROGGS> though, libatomic-ops and dyncall dont support it

[17:58] <FROGGS> and libffi isnt installed

[18:01] <timotimo> oof

[18:05] <FROGGS> what do we actually need libatomic-ops for?

[18:06] <timotimo> MVM_ADD, MVM_CAS

[18:06] <FROGGS> which means?

[18:06] <timotimo> well, CAS is Compare-And-Swap

[18:07] <jnthn> Atomic operations and memory barriers, in short.

[18:07] <jnthn> Providing access to CPU primitives that we use to implement various concurrent data structures.

[18:16] <FROGGS> hmmm, thanks :o)

[18:18] *** pyrimidine joined
[18:25] <lizmat> jnthn: any thoughts on the parse-base addition as a sub ?

[18:41] *** pyrimidine joined
[18:45] *** zakharyas joined
[18:48] *** pyrimidine joined
[18:48] *** domidumont joined
[18:52] * timotimo first read that as "parse-based addition" and was quite confused

[18:56] <FROGGS> was able to build libffi on aix... with some hacks :S

[18:58] <lizmat> timotimo: well, I thought we weren't supposed to just add built-in subs in 6.c ?

[18:58] <lizmat> or exposed classes?

[18:59] <lizmat> we were going to use a "6.d" setting for this, weren't we ?

[18:59] *** vendethiel joined
[18:59] <lizmat> I mean, personally I would be fine with adding stuff and call it 6.d at some point in the (near) future

[19:00] <timotimo> right, i suppose it'd have to be unavailable if you "use v6.c"

[19:00] *** pyrimidine joined
[19:00] <[Coke]> wrong channel?

[19:00] <lizmat> [Coke]: perhaps

[19:09] <FROGGS> not bad, not bad:

[19:09] <FROGGS> compiling src/core/loadbytecode.o

[19:09] <FROGGS> compiling src/math/num.o

[19:09] <FROGGS> src/math/num.c:9:1: error: initializer element is not constant

[19:09] *** pyrimidine joined
[19:10] <jnthn> lizmat: Will try and catch up with perl6-dev once I'm done cooking/eating dinner :)

[19:11] <jnthn> But yeah, we could do with the 6.d setting added

[19:11] <jnthn> nine++ did have a branch that did it, iirc

[19:12] <jnthn> And while it's arguable we just don't have the userbase size to worry a lot about it at the moment, we should get into the habbit and figure out the quirks/issues before that point.

[19:15] *** pyrimidine joined
[19:17] <timotimo> jnthn: would you spend a minute looking at the multidimarray_view branch - it'd probably be enough to look at flat_index and the struct - and tell me if it's a sane direction to go in?

[19:31] <FROGGS> uhhh, moarvm compiles further...

[19:32] <nine> The branch is called language_versions

[19:43] <FROGGS> compiling 3rdparty/libuv/src/unix/linux-core.o

[19:43] <FROGGS> 3rdparty/libuv/src/unix/linux-core.c:33:23: fatal error: sys/prctl.h: No such file or directory

[19:43] <FROGGS> compilation terminated.

[19:43] * FROGGS cries

[19:43] *** domidumont joined
[19:55] * FROGGS uncries

[20:23] <TimToady> m: say v6.d after v6.d.a

[20:23] <camelia> rakudo-moar c196af: OUTPUT«True␤»

[20:27] <lizmat> TimToady: so that's wrong, right ?

[20:28] <TimToady> no, that's correct

[20:28] <TimToady> alphas come before .0, .1, .2...

[20:29] <lizmat> because 6.d would give you the latest 6.d ?

[20:30] <TimToady> 6.d is supposed to be short for 6.d.0+ I thought

[20:31] <TimToady> if we changed that, it has fled my brane

[20:32] <TimToady> which happens frequently enough :)

[20:34] *** ggoebel joined
[20:43] <TimToady> I guess smartmatching is a little more forgiving

[21:12] <jnthn> Certainly as I recollect it, the idea was we'd have 6.d.ALPHA or 6.d.a or such to be our "get a preview of what 6.d will be"

[21:13] <jnthn> So when we introduce the 6.d setting, for now you'll use 6.d.a to get at it.

[21:13] * jnthn makes an attempt to backlog #perl6-dev :)

[21:16] *** pyrimidine joined
[21:25] *** pyrimidine joined
[21:37] *** pyrimidine joined
[21:43] *** pyrimidine joined
[21:51] <japhb> timotimo: re: API for ndarray-view: Perl 5 had a particularly powerful one called PDL (pdl.perl.org).  It does pretty cool things like allowing you to do a multidimensional slice, swap coordinates, etc. extremely cheaply.

[21:54] <timotimo> japhb: yeah, i'm hoping what i'm implementing can let you do that, too

[21:54] <timotimo> though how am i supposed to know if it's cheap until i implement it fully and we look at jitting all the ndarray stuff0

[21:55] <timotimo> if i'm not mistaken, my implementation will allow to go from any amount of dimensions to any other (as long as the number of values doesn't exceed the target array)

[21:55] <jnthn> timotimo: will take a look later this week...really tired today :(

[21:55] <timotimo> it'll allow any dimension to be mapped to any target dimension, and to map it forwards, backwards, or with full-integer steps in either dierction

[21:56] <timotimo> and also it'll allow you to access an array of 64bit ints as many more 8bit ints, for example

[21:56] <timotimo> your move, PDL

[23:46] *** yfkj joined
[23:47] <yfkj> timotimo: are you implementing it column-major order ?

[23:47] <yfkj> it's the order of Fortran, R, OpenGL and MATLAB

[23:49] <timotimo> ndarrays have already been implemented with C order, i believe

[23:49] <timotimo> but using views you can store your array in column-major order and have a C-style view onto the data

[23:51] <yfkj> mainly thinking that having OpenGL, ATLAS, LAPACK binding would be cool ;)
