[01:23] *** geekosaur joined
[05:54] *** nwc10 joined
[06:26] *** FROGGS joined
[06:33] *** domidumont joined
[06:49] *** geekosaur joined
[06:58] <brrt> good hi #moarvm

[06:59] <FROGGS> hi brrt

[07:16] <domidumont> hi FROGGS, good catch with sigemptyset, I'll test that asap :-)

[07:37] <FROGGS> morning domidumont

[08:08] *** zakharyas joined
[08:38] <domidumont> FROGGS: your patch works, but SigCgt is still funky on arm64 (SigCgt: fffffffff781feff) compared to amd64 (SigCgt: 0000000180010000). I'll check that later

[08:39] <FROGGS> m: say 0xfffffffff781feff.fmt('%064b')

[08:39] <camelia> rakudo-moar 74d0e3: OUTPUT«1111111111111111111111111111111111110111100000011111111011111111␤»

[08:40] <FROGGS> m: say 0x0000000180010000.fmt('%064b')

[08:40] <camelia> rakudo-moar 74d0e3: OUTPUT«0000000000000000000000000000000110000000000000010000000000000000␤»

[08:40] <FROGGS> little bit strange, yes

[08:40] <FROGGS> though I dont know enough if this is correct for arm or not

[08:40] <FROGGS> to tell*

[08:42] <domidumont> Each bit set represents a signal that should be trapped and handled by libuv. I would be very surprised to have much different results when moar is doing a similar job (handling a spawned process)

[08:46] *** quester joined
[08:54] *** quester left
[09:04] *** geekosaur joined
[10:42] *** brrt left
[12:18] *** ggoebel joined
[13:17] <nine> jnthn++ # That "chars requires a concrete string, but got null" is an open issue with the Inline::Perl5 tests. I'm glad I've not sunk more time into that :)

[13:18] <jnthn> Oh, it's fixed those too? :)

[13:21] <nine> Since it only appeared off and on, it's hard to confirm. But everything fits. I am using callframe in Inline::Perl5. And it only happend in a test that looped.

[13:22] <[Coke]> btw, I finished the spellchecking of the perl6 docs. jnthn++

[13:26] <jnthn> Nice :)

[13:26] <jnthn> Glad to have nailed that one

[13:26] <jnthn> Well, nailed-ish.

[13:29] *** FROGGS joined
[13:30] <FROGGS> o/

[13:37] *** brrt joined
[13:42] <jnthn> o/ FROGGS

[14:14] <nine> jnthn: definitely looks good! :)

[14:24] <jnthn> \o/

[14:43] <timotimo> mhh, a tasty nail-dish

[14:55] <japhb> [Coke]++  # Massive spellchecking effort

[14:58] <[Coke]> np

[16:15] *** lizmat joined
[16:20] *** domidumont joined
[16:25] *** domidumont joined
[17:32] *** Ven_ joined
[17:41] *** Ven__ joined
[17:56] *** Ven_ joined
[18:03] *** FROGGS joined
[18:31] <FROGGS> o/

[18:35] <diakopter> o/

[18:36] <timotimo> o/

[18:44] <nwc10> if we keep doing that, at what point does the channel capsise?

[18:45] <moritz> o/

[18:45] * moritz is willing to find out

[18:45] <diakopter> o_

[18:46] <moritz> German has a wonderful verb "durchketern"

[18:46] <nwc10> I don't know that one

[18:46] <nwc10> through chain?

[18:46] <moritz> it's not only capsizing, but capsizing so hard that the mast points downwards

[18:46] <nwc10> or would that have two Ts?

[18:49] <diakopter> "turn turtle"

[18:49] <moritz> *durchkentern

[18:49] <moritz> argl

[18:50] <moritz> nwc10: yes, chain = kette, two Ts

[18:54] <diakopter> .w turn_turtle

[18:54] <yoleaux2> diakopter: Sorry, that command (.w) crashed.

[18:54] <moritz> muhahaha

[18:55] <diakopter> https://en.wiktionary.org/wiki/turn_turtle

[19:59] *** zakharyas joined
[20:55] *** dalek joined
[20:55] *** synopsebot6 joined
[20:58] *** Ven_ joined
[21:10] *** ilbot3 joined
[21:16] *** [Coke] joined
[21:43] *** lizmat joined
[22:19] *** stmuk_ joined
[23:00] *** Util joined
