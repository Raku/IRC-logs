[00:16] *** pamplemousse_ joined
[00:18] *** pamplemousse left
[00:40] *** pamplemousse_ left
[01:15] <ugexe> i wonder if these were ever checked... https://github.com/MoarVM/MoarVM/blob/a601746d691fdb19b8be889a793274eb62d5f2d9/src/jit/core_templates.expr#L2044-L2056

[01:15] <ugexe> not a whole-lot to check

[01:47] *** ggoebel left
[02:12] *** AlexDani` joined
[02:16] *** AlexDaniel left
[06:03] *** domidumont joined
[06:09] *** AlexDani` is now known as AlexDaniel

[06:09] *** AlexDaniel left
[06:09] *** AlexDaniel joined
[06:11] *** domidumont left
[06:12] *** domidumont joined
[06:46] *** domidumont left
[06:49] *** AlexDaniel left
[06:51] *** domidumont joined
[07:07] *** domidumont left
[07:08] *** domidumont joined
[07:56] *** brrt joined
[08:18] *** brrt left
[08:20] *** sena_kun joined
[09:01] *** leont joined
[09:37] *** AlexDaniel joined
[10:07] *** domidumont left
[10:15] *** AlexDaniel left
[10:21] *** domidumont joined
[10:22] *** domidumont left
[10:48] *** leont left
[11:17] *** sena_kun left
[11:17] *** sena_kun joined
[11:20] *** sena_kun left
[11:31] *** brrt joined
[11:34] *** dogbert11 joined
[11:49] *** ggoebel joined
[11:54] *** pamplemousse joined
[11:54] <pamplemousse> \o

[12:02] *** domidumont joined
[12:12] *** AlexDaniel joined
[12:14] *** domidumont1 joined
[12:18] *** domidumont left
[12:25] <timotimo> o/

[12:25] <pamplemousse> \o timotimo

[12:35] *** AlexDaniel left
[12:44] <pamplemousse> I was able to get "hello world" working out of an ELF file! Still a bit of a hack, but it's getting there

[12:45] <pamplemousse> I've written up what I did here: https://yakshavingcream.blogspot.com/2019/06/hello-world.html

[12:49] <timotimo> oh, nice

[12:54] <brrt> \o

[12:54] <pamplemousse> o/

[12:55] <timotimo> interesting. right now it's going via "system" to the perl6 command, but maybe it'l possible to steal the majority from the perl6 repo's src/vm/moar/runner/main.c

[12:55] *** ggoebel left
[12:55] <timotimo> and then dynamically or statically linking libmoar.so

[12:56] <timotimo> perhaps grabbing all the pieces of mbc that belong to the startup process, including ModuleLoader for example, into separate sections in the ELF file and teaching moar to look there for specific paths?

[12:56] <timotimo> maybe it's still too early for that

[12:56] <brrt> pamplemousse++ nice post

[12:59] <timotimo> oh, here's perhaps an interesting point: you can set MVM_COVERAGE_LOG=/dev/stderr (or some filename) when executing an nqp or perl6 or whatever; that will print every line as soon as it's encountered for the first time. that can hopefully give you a good look at what pieces of code participate in the startup procedure

[12:59] <pamplemousse> That's really useful, thank you

[13:02] <pamplemousse> Right now I'm working on isolating the startup stuff to see if I can get the MBC for that, tack it on at the beginning of whatever program I'm actually trying to run, and see if that works.

[13:02] <pamplemousse> brrt: Thanks!

[13:03] <pamplemousse> Maybe that will be more complicated than I'm thinking it will be though

[13:03] <timotimo> i'm not yet entirely following, but i.ll be AFK for a while first anyway

[13:04] <timotimo> good post indeed, tho

[13:05] <pamplemousse> Thanks!

[13:06] <brrt> pamplemousse: I kind of expect you'll hit some complication, but i think that'll be the gist of it

[13:06] <brrt> one thing that MoarVM has to do, I think, is bootstrap the object system

[13:06] <brrt> jnthn knows more about that than I do

[13:08] <pamplemousse> Is there somewhere you know of that I could read about that?

[13:11] <brrt> hmmm

[13:12] <brrt> I thought it'd be possible to compile a simple nqp file ...

[13:14] <brrt> I'm actually not quite sure

[13:15] <brrt> That's digging into compiler internals that I don't know all that well

[13:15] <brrt> aha, turns out that saying this:

[13:15] <brrt> nqp-m --target=mbc  ~/Code/Scratch/hello-world.nqp  --output=hello-world.moarvm

[13:15] <brrt> works,

[13:15] <brrt> and

[13:15] <brrt> nqp-m --target=mbc  ~/Code/Scratch/hello-world.nqp  --output=hello-world.moarvm

[13:15] <brrt> this does not

[13:16] <brrt> and then you can run 'MVM_COVERAGE_LOG=/dev/stderr moar hello-world.moarvm' with that

[13:17] <pamplemousse> I think those are the same? The two lines that work and don't work?

[13:17] <brrt> order of arguments

[13:18] <jnthn> Well, bootstrapping the object model is part of creating a MoarVM instance

[13:18] <jnthn> I figure any generated executable would make a call to that

[13:18] <jnthn> I figure the goal is to create a standalone executable with all the things bundled into it?

[13:18] <brrt> ultimately, that'd be awesome

[13:18] <pamplemousse> brrt: They're in the same order?

[13:19] <brrt> pamplemousse: I'm an idiot

[13:19] <jnthn> brrt: What's the immediate goal?

[13:20] <pamplemousse> jnthn: That's the ultimate goal, but right now I'm aiming for an executable which contains the program itself and can run and call out to libraries on the system that its being run on.

[13:20] <brrt> jnthn: some kind of executable, but it doesn't have to be all-in-one at the start

[13:20] <pamplemousse> Similar to .NET Core's framework dependent executable

[13:20] <brrt> right

[13:21] <brrt> what would be very nice, if it could embed the precompiled libraries as well

[13:21] <brrt> this would help a bunch in startup time

[13:21] <brrt> since the OS loader could map them all in memory at once, without having to look them up from disk

[13:22] <brrt> (it is my theory that one of the main reasons that JVM startup is slow, is that java class loading is hostile to efficient loading strategies)

[13:23] <brrt> ideally, this would be a tool to have 'fast-start' perl6 applications

[13:24] <brrt> I think that if we can wrap the moar bytecode in a (linkable) elf, and the dependencies as well, then fully static linking is a matter of tooling

[13:24] <brrt> but that's also just a theory

[13:26] <jnthn> So for now you'd just include the entrypoint MoarVM bytecode and then it loads all of the others from disk, as per usual?

[13:27] <jnthn> (Disclaimer: didn't yet read the latest post :))

[13:27] <pamplemousse> That's the thought.

[13:28] <brrt> if you can get the library paths to be set up correctly, then I think that ought to work

[13:28] <jnthn> Yeah, indeed

[13:29] <brrt> which you could probably embed into the ELF as well? the trick would then be to initialize moar correctly

[13:29] <timotimo> do you know how python.exe allows you to just concatenate a .zip file to the end of it and it'll load modules from inside there?

[13:30] <timotimo> at least i think that's a thing that exists or existed

[13:31] <jnthn> brrt: Yeah, pretty much. I guess one easy way to Proof Of Concept this is just to generate a C file with the bytecode in a byte array and doing the appropriate initialization logic

[13:31] <jnthn> timotimo: That's cute

[13:31] <brrt> yeah, that's a nice hack

[13:32] <pamplemousse> Huh, that's neat

[13:45] <pamplemousse> timotimo: Not sure how similar this is, but there's xar, which was Facebook making a similar thing that was initially intended to work for multiple languages: https://github.com/facebookincubator/xar

[13:45] <pamplemousse> It's interesting

[13:49] <timotimo> when i considered building tat kind of thing myself, i think i ran into ,how the hell am i going to fopen the current process's file portably?!"

[13:50] <timotimo> hm, ok, xar requires squashfs and fuse, that's not portable either

[13:51] *** lucasb joined
[14:29] *** domidumont joined
[14:31] *** domidumont1 left
[14:33] *** lizmat joined
[14:44] *** brrt left
[14:48] *** domidumont left
[14:48] *** domidumont joined
[14:50] *** lizmat_ joined
[14:52] *** lizmat left
[14:54] *** AlexDaniel joined
[15:17] *** domidumont left
[15:23] <Kaiepi> does --no-jit disable just the legojit or both jits?

[15:24] <timotimo> should disable both

[15:24] <timotimo> i'm not sure we have a configure flag to disable the expr jit at compile time

[15:24] <timotimo> we do have that env var for run time, though

[15:27] <Kaiepi> would it be a good idea to add configuration flags to disable each individually? the legojit in particular is problematic on openbsd because it requires fstab to be configured to have W^X enabled

[15:28] <Kaiepi> at least i think

[15:32] *** leont joined
[15:34] <jnthn> Kaiepi: The expr JIT builds on the legojit

[15:34] <Kaiepi> oh

[15:36] *** lizmat_ left
[15:40] <Woodi> I read somewhere that on openbsd /usr/local have W^X disabled by default

[15:41] <Kaiepi> 111ad17933e39c09.h /usr/local ffs rw,wxallowed,nodev 1 2

[15:41] <Kaiepi> looks like you're right

[15:44] <jnthn> "ffs"? :)

[15:45] <Kaiepi> lmao

[15:45] <Kaiepi> that's on all the lines except for swap

[15:57] *** BinGOs_ joined
[16:04] <dogbert11> anyone up for a valgrind gist?

[16:06] <dogbert11> https://gist.github.com/dogbert17/74e32577f8f79b368e3785fd7d4e0008 # problem in decode_stream.c

[16:09] <timotimo> hm, so cur_sep_pos was 0 when it hit that line?

[16:11] <dogbert11> I guess so

[16:11] <dogbert11> I can try to verify

[16:12] *** BinGOs_ is now known as BinGOs

[16:12] <timotimo> if sep_graphemes was size 0, then graph_length in decode_stream_sep_from_strings was 0, too?

[16:13] * dogbert11 investigates ...

[16:13] *** BinGOs left
[16:13] *** BinGOs joined
[16:13] <timotimo> num_seps is checked to be less than or equal to 0xFFF, but 0 would be okay it seems like, except maybe the rest of the code gets surprised by that?

[16:13] <timotimo> i mean, if there are no separators, why would that code even run

[16:13] <timotimo> oh

[16:13] <timotimo> did someone set "" as the separator and expecting that to mean /\n\n+/ perhaps?

[16:17] <dogbert11> timotimo: I added the offending code block to the gist

[16:22] <timotimo>     $fh.nl-in = "";

[16:22] <timotimo> is that the one?

[16:22] <timotimo> both blocks have that one line

[16:25] <dogbert11> it's the second block, the one with eol => $*OUT.nl-out

[16:30] <dogbert11> timotimo: in gdb now and cur_sep_pos is indeed zero

[16:32] <dogbert11> graph_length is also zero

[16:37] <Kaiepi> am i crazy or is use_last_packet getting leaked here? https://hastebin.com/ewudumikiw.php

[16:38] <Kaiepi> i can't check, valgrind doesn't run on my os

[16:43] <timotimo> Kaiepi: could very well be that libuv handles that particular data

[16:43] <timotimo> it also has "allocate something for me pls" callbacks for example

[16:43] <timotimo> maybe that's related

[16:44] <Kaiepi> libuv isn't being used here, this is in src/io/syncsocket.c

[16:53] *** benchable6 joined
[16:55] *** greppable6 joined
[16:55] *** reportable6 joined
[16:57] *** nativecallable6 joined
[16:57] *** squashable6 joined
[18:00] *** domidumont joined
[18:03] *** sena_kun joined
[18:20] *** domidumont left
[18:48] *** pamplemousse left
[19:01] <dogbert11> timotimo: still around?

[19:09] <dogbert11> .tell timotimo shouldn't there be a 'mp_neg(i, i);' after this line? https://github.com/MoarVM/MoarVM/blob/master/src/math/bigintops.c#L190

[19:09] <yoleaux> dogbert11: I'll pass your message to timotimo.

[19:25] <timotimo> oh snap. that could very well be, yeah

[19:25] <yoleaux> 19:09Z <dogbert11> timotimo: shouldn't there be a 'mp_neg(i, i);' after this line? https://github.com/MoarVM/MoarVM/blob/master/src/math/bigintops.c#L190

[19:34] <MasterDuke> Kaiepi: do you have some code i could run in valgrind to check if there's a leak?

[19:35] <Kaiepi> gimme a sec

[19:39] <Kaiepi> MasterDuke, this *should* work but i can't test atm https://hastebin.com/bimukuwuje.rb

[19:43] *** leont left
[19:44] <MasterDuke> Kaiepi: i changed the `loop` to `for ^100` so it would run for a more deterministic amount of time https://hastebin.com/oxidivafoj.coffeescript

[19:44] *** pamplemousse joined
[19:44] *** sena_kun left
[19:46] <MasterDuke> with --full-cleanup https://hastebin.com/cowitebuxu.coffeescript

[19:51] *** ggoebel joined
[19:52] <MasterDuke> if anyone is interested, https://gist.github.com/MasterDuke17/e2e32f880e871351eb9d035b8a866426 is what valgrind shows as leaking for `perl6 --full-cleanup -e ''`

[19:54] <Kaiepi> i forgot about my vps lmao

[19:55] <Kaiepi> i'll check and see if freeing it does anything or not

[20:01] *** brrt joined
[20:05] <Kaiepi> freeing it leaves ~3MB less memory allocated on my system

[20:05] <Kaiepi> looks like a leak

[20:11] <Geth> ¦ MoarVM: Kaiepi++ created pull request #1125: Fix memory leak in socket_read_bytes

[20:11] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1125

[20:15] <timotimo> shows how widespread usage of IO::Socket::Async is compared to IO::Socket::INET )%

[20:15] <timotimo> %)

[20:16] <ugexe> it would surprise me if IO::Socket::Async was used significantly more than IO::Socket::INET

[20:16] <ugexe> you couldnt even use SSL with ::Async till 1 or 2 years ago

[20:20] <timotimo> .o( but cro! )

[20:20] *** lucasb left
[20:28] *** lizmat joined
[20:52] *** lizmat left
[22:14] *** AlexDaniel left
[22:36] *** brrt left
[22:40] *** pamplemousse_ joined
[22:43] *** pamplemousse left
[22:47] *** ggoebel left
[22:56] *** lizmat joined
