[00:04] *** Kaiepi left
[00:04] *** Kaiepi joined
[00:10] *** anatofuz left
[00:11] *** anatofuz joined
[00:15] *** anatofuz left
[00:45] *** anatofuz joined
[00:48] *** anatofuz left
[00:48] *** anatofuz joined
[02:35] *** AlexDani` joined
[02:39] *** AlexDaniel left
[02:45] *** AlexDani` is now known as AlexDaniel

[02:45] *** AlexDaniel left
[02:45] *** AlexDaniel joined
[02:52] *** anatofuz left
[02:53] *** anatofuz joined
[02:57] *** anatofuz left
[02:58] *** anatofuz joined
[03:08] *** AlexDaniel left
[04:39] *** anatofuz left
[04:39] *** anatofuz joined
[04:40] *** anatofuz left
[04:40] *** anatofuz joined
[04:43] *** anatofuz left
[04:44] *** anatofuz joined
[04:46] *** sena_kun joined
[04:48] *** anatofuz left
[04:59] *** anatofuz joined
[05:12] *** robertle left
[05:34] *** sena_kun left
[05:35] *** anatofuz left
[05:37] *** anatofuz joined
[05:55] *** brrt joined
[06:19] *** domidumont joined
[06:22] *** anatofuz left
[06:25] *** anatofuz joined
[06:26] *** brrt left
[06:45] *** brrt joined
[07:12] *** robertle joined
[07:27] *** brrt left
[07:40] *** anatofuz left
[07:55] *** zakharyas joined
[07:55] *** anatofuz joined
[08:15] *** sena_kun joined
[10:06] *** anatofuz left
[10:07] *** anatofuz joined
[10:07] *** anatofuz left
[10:07] *** anatofuz joined
[10:22] *** anatofuz left
[10:23] *** anatofuz joined
[10:27] *** anatofuz left
[10:47] *** brrt joined
[10:50] <brrt> \o

[10:52] <nwc10> o/

[10:56] <brrt> I'll try to debug what's going wrong in the qregex test case today. I think I have a decent theory on why annotations with distinct deopt target addresses end up on the same guard, and it'd be annotation movement as we delete opcodes

[10:56] <brrt> I'm not entirely sure whether I want to pursue that further

[11:08] <brrt> ... the qregex test case inlines 15 frames or so :-o

[11:08] <brrt> you'd be surprised the regex engine is still slow after all this

[11:10] <brrt> hmm. the qregex has an inlinee graph, that has two annotations with different target addresses

[11:10] <brrt> so maybe it is worth addressing after all

[11:10] <timotimo> wanna share the spesh graph before/after + inlines of that one?

[11:11] <brrt> uh....

[11:11] <brrt> sure

[11:14] <brrt> https://gist.github.com/bdw/0f898d754f8f0d3e592e922ce605dea1

[11:14] <timotimo> just so i can be proud of spesh

[11:15] <brrt> the change I'm doing, is moving the sp_guard* ops from having the deopt_target as argument, to the deopt_idx as argument

[11:15] <timotimo> oh no the browser tab is hanging

[11:15] * brrt has recently started using firefox again and has had this problem relatively fewer

[11:15] <brrt> less often, I should say

[11:16] <nine> So....why _is_ the regex engine still slow?

[11:17] <timotimo> in some cases we're comparing the perl6 regex engine against specialized methods in other languages

[11:17] <timotimo> like in the /^foo/ vs .starts-with("foo") case

[11:18] <brrt> nine: of the top of my had,

[11:18] <brrt> - a bunch of other languages defer to PCRE, and PCRE is ancient, crufty, low-level and fast, and we're competing with a HLL implementation

[11:18] <brrt> *head

[11:19] <brrt> - we have a string implementation that is not necessarily the most suitable for a regex implementation (it is relatively expensive to just pick one character or to iterate over all because we have abstracted access)

[11:20] <brrt> - our regex engine allows in general, arbitrary code to run (the benefit of having the HLL implementation)

[11:20] <nwc10> oh, also, at $ork, it turned out that for the $ork regexs and $ork data, PCRE was about 7 times as fast as re2

[11:20] <nwc10> not that that matters *that* much to *this* discussion

[11:20] * brrt has been reading re2 a bunch and was impressed by the quality of code

[11:21] <nwc10> I didn't go into the code. I only read the headers and wrote enough of a wrapper to use it

[11:22] <nwc10> But all the work stuff is internal, so "constant time bounded" constraints aren't *that* important to us becase

[11:22] <timotimo> we were going to have guards on the storage type of strings in spesh in order to make grapheme access faster

[11:22] <nwc10> 1) we don't have lots of nasty people trying to DOS us

[11:22] <timotimo> and we're already turning stranded strings into arrayed strings

[11:22] <nwc10> 2) anyone in the office who does accidentally do something slow won't be able to save it, because the system will time out before it gets to render the "Save" button on the page :-)

[11:22] <nwc10> it's self-selecting

[11:23] <timotimo> haha! :D

[11:24] <brrt> then it's not really a bug of course :-)

[11:24] <brrt> it's a feature

[11:28] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 8 commits pushed by (Bart Wiegmans)++

[11:28] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 001cefdcb2 | [JIT] Get type object for type-variant opcodes

[11:28] <Geth> Â¦ MoarVM/expr-jit-devirtualize: b05a3009e3 | [JIT] Add devirtualization method for REPRs

[11:28] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 6ee508612d | [JIT] Make template destructive flag redundant

[11:28] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 198b75aaae | [JIT] Remove template destructive flag

[11:28] <Geth> Â¦ MoarVM/expr-jit-devirtualize: e19d55a7bf | [JIT] Bugfix - CALLN yields a value

[11:28] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 1b54ba0795 | [Spesh] Make deopt use index rather than target address

[11:28] <brrt> rebase coming up

[11:28] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 3e8afd7be2 | [Tools] Spesh bisect should learn about PEA

[11:28] <Geth> Â¦ MoarVM/expr-jit-devirtualize: d9039a8335 | [Spesh] Update deopt idx if we clone the deopt annotation

[11:28] <Geth> Â¦ MoarVM/expr-jit-devirtualize: review: https://github.com/MoarVM/MoarVM/compare/5b63fa723cf0...d9039a83352d

[11:29] *** zakharyas left
[11:38] <brrt> git bisect conclusively proves I screwed up during the deopt_idx refactor :-(

[11:38] <timotimo> oh no

[11:45] <brrt> but how...

[12:32] <timotimo> https://cdn.discordapp.com/attachments/614415704443191301/621684486417022976/unknown.png

[12:33] <timotimo> moarperf showing highscores of heap snapshot stuff

[12:34] <jnthn> timotimo: That shows growth in numbers of certain things on the heap?

[12:41] <timotimo> aye

[12:41] <timotimo> which type or frame is which line is available information, just not presented just yet

[12:42] <timotimo> also, obviously there ought to be color differences

[12:42] <timotimo> and now you can up the number of lines displayed at the same time, too

[12:45] *** reportable6 left
[12:50] *** reportable6 joined
[12:52] <timotimo> not finding a way to give the charts a background color :\

[12:54] <timotimo> when adding a CartesianGrid component i can get it, then i can - if i want - make it just not draw any lines

[12:55] <timotimo> how do i colors

[13:02] <jnthn> hot pink all the things!

[13:04] *** anatofuz joined
[13:06] <timotimo> https://cdn.discordapp.com/attachments/614415704443191301/621693030629507092/unknown.png - tooltips show the names and exact "scores"

[13:07] <timotimo> the "select a snapshot" widget is super terrible; it's literally just a very long list of all the snapshots with a "Request" button

[13:07] <timotimo> makes for a lot of scrolling

[13:17] <timotimo> https://cdn.discordapp.com/attachments/614415704443191301/621695612252979210/VID_20190912_151504.mp4 - tooltips working just great

[13:33] *** zakharyas joined
[13:54] <timotimo> unfortunately, reading the highscores of 200 snapshots actually takes a little while :\

[13:57] *** anatofuz left
[13:59] <timotimo> gotta make it output partial data in regular intervals at some point

[14:26] <timotimo> cool, by asking it to read the size of the segment instead of the size that zstd recommends for one input read blop it got almost 3x faster per piece

[14:35] <timotimo> still too slow tho

[14:45] *** brrt left
[14:55] <timotimo> about 2 Ã— 0.3s for each snapshot to decompress the highscore stuff :\

[14:56] <timotimo> i'd really like a 10x improvement for all the zstd decompress code; there's loads of overhead

[15:03] <timotimo> HOLY SHIT

[15:08] <timotimo> i wanted 10x, i got at least 10x more than i asked for

[15:08] <lizmat> that sounds pretty cool

[15:09] <timotimo> only inside of Compress::Zstd

[15:09] <timotimo> for decompressing

[15:11] *** domidumont left
[15:31] <timotimo> now if only the memory usage wouldn't go up so high when parsing whole snapshots even when "forget" is called on them

[15:33] <lizmat> anyone interested in a repeatable: MoarVM panic: Heap corruption detected: pointer 0x7fc440134d10 to past fromspace ?

[15:34] <timotimo> it can go on the pile %)

[15:34] <lizmat> ok... then I'll just fix the underlying issue  :-)

[15:38] <Guest15407> lizmat: give it to nine

[15:38] <lizmat> too late

[15:39] <Guest15407> nooooo

[15:39] <Guest15407> :)

[15:49] <japhb> timotimo: Am I reading that right?  You found some way to make the decompression 100x faster for your use case?

[15:49] <timotimo> only because it was extremely slow

[15:50] <tadzik> :)

[15:50] <tadzik> only becuase you are extremely humble!

[15:51] <timotimo> https://github.com/timo/Compress-Zstd/commit/5ec0ba3e2c1fd4615ff803245e1eb44a798c4017

[15:51] <japhb> timotimo: Also, if you want something that grows and shrinks in memory usage -- try https://github.com/ab5tract/Terminal-Print/blob/master/examples/attacks.p6  (and if you need one that is more aggressive in multithreading than that one, I've got a private copy that will do that too).

[15:51] <timotimo> no it was literally extremely slow

[15:51] <timotimo> oh yes!

[15:51] <timotimo> that's lovely

[15:51] <tadzik> ah, lowlevelness :)

[15:52] <timotimo> MoarVM panic: heap snapshot found a non-string in get_vm_string_index

[15:52] <timotimo> DAMN IT

[15:52] <timotimo> well, at least it happens not only in my GTK program

[15:53] <japhb> timotimo: Actually, I'm curious which part of the high-level code was slowing it down.  I have a sneaking suspicion it was the .Array coercion.

[15:54] <timotimo> you can try it yourself, the buffer was a CArray, $foo was a "my int @blah"

[15:56] <japhb> $foo?

[15:57] <timotimo> er, the thing being .append-ed into

[16:33] *** robertle_ joined
[16:44] *** lucasb joined
[17:29] <Kaiepi> timotimo, by how much am i supposed to reduce the nursery size in src/gc/collect.h?

[17:30] <timotimo> depends on how long you want to wait

[17:30] <timotimo> 2 kilobytes?

[17:39] <timotimo> jnthn: would be glad if you could merge this pull request: https://github.com/jnthn/p6-concurrent-progress/pull/1

[17:39] <timotimo> moarperf depends on it

[17:45] *** AlexDaniel joined
[17:45] *** AlexDaniel left
[17:45] *** AlexDaniel joined
[17:46] *** zakharyas left
[19:01] <Kaiepi> testing async sockets with MVM_GC_DEBUG defined to 3 came up with a bunch of small mistakes, good thing it didn't end up being merged as is

[19:02] <timotimo> \o/

[19:16] <Kaiepi> what does "Invalid owner in item added to GC worklist" mean? i think i worked out how you fix it, but idk why what i'm doing works

[19:16] <dogbert17> .seen nine

[19:16] <tellable6> dogbert17, I saw nine 2019-09-12T11:16:22Z in #moarvm: <nine> So....why _is_ the regex engine still slow?

[19:17] <timotimo> Kaiepi: could be memory corruption, perhaps rooted something that's not an MVMCollectable

[19:18] <timotimo> dogbert17: want to proofread my blog post? :)

[19:18] <timotimo> http://wakelift.de/p/3b104399-50d2-4792-b9dd-b2494e074e96/

[19:18] <Kaiepi> in one case i was rooting an MVMAsyncTask when idt i was supposed to be

[19:18] <dogbert17> timotimo: sure

[19:19] <timotimo> rooting uninitialized variables is also bad

[19:24] <MasterDuke> timotimo: nice post

[19:25] <dogbert17> timotimo: I think the blog post looks good

[19:29] <dogbert17> timotimo: I suspect there's a bug in https://github.com/MoarVM/MoarVM/blob/master/src/io/procops.c#L468

[19:31] <dogbert17> I get I SEGV which sort of points towards this function

[19:32] <MasterDuke> would anything from http://thume.ca/2019/07/29/shenanigans-with-hash-tables/ be useful/relevant for moarvm?

[19:40] *** zakharyas joined
[19:47] *** Kaiepi left
[19:53] *** Kaiepi joined
[20:04] *** Kaiepi left
[20:04] *** Kaiepi joined
[20:15] <Kaiepi> test script works now, time to see which roots i can get rid of

[20:34] *** zakharyas left
[20:39] *** robertle_ left
[20:45] *** sena_kun left
[20:47] <Kaiepi> so i have a function that's called from within an MVMROOT that roots one of the same objects it's rooting, but if i try to get rid of it i get a bus error. why is that?

[21:01] <Geth> Â¦ MoarVM/expr-jit-invoke: 6b047c325f | (Bart Wiegmans)++ | 4 files

[21:01] <Geth> Â¦ MoarVM/expr-jit-invoke: [JIT] Implement invoke sequence in expr JIT

[21:01] <Geth> Â¦ MoarVM/expr-jit-invoke: review: https://github.com/MoarVM/MoarVM/commit/6b047c325f

[21:01] <Geth> Â¦ MoarVM/expr-jit-invoke: fc5dc1d12c | (Bart Wiegmans)++ | src/jit/graph.c

[21:01] <Geth> Â¦ MoarVM/expr-jit-invoke: [JIT] Eliminate special consume_invoke opcode

[21:01] <Geth> Â¦ MoarVM/expr-jit-invoke:

[21:01] <Geth> Â¦ MoarVM/expr-jit-invoke: Except for nativecall_invoke, we no longer need this part of the

[21:01] <Geth> Â¦ MoarVM/expr-jit-invoke: legacy JIT.

[21:01] <Geth> Â¦ MoarVM/expr-jit-invoke: review: https://github.com/MoarVM/MoarVM/commit/fc5dc1d12c

[21:02] <Geth> Â¦ MoarVM/expr-jit-invoke: fb2f81801a | (Bart Wiegmans)++ | 7 files

[21:02] <Geth> Â¦ MoarVM/expr-jit-invoke: [JIT] WIP on nativeinvoke in the expression JIT

[21:02] <Geth> Â¦ MoarVM/expr-jit-invoke: review: https://github.com/MoarVM/MoarVM/commit/fb2f81801a

[21:06] <Geth> Â¦ MoarVM/jit-expr-optimizer: 4 commits pushed by (Bart Wiegmans)++

[21:06] <Geth> Â¦ MoarVM/jit-expr-optimizer: 7f88aceb91 | [JIT] Simple tree-rewriting optimizer

[21:06] <Geth> Â¦ MoarVM/jit-expr-optimizer: 3a1dabc383 | [JIT] Optimize multiple loads to a COPY

[21:06] <Geth> Â¦ MoarVM/jit-expr-optimizer: d1273a7522 | Optimize ADD of CONST to ADDR

[21:06] <Geth> Â¦ MoarVM/jit-expr-optimizer: b814ddbd2c | Eliminate COPY of CONST

[21:06] <Geth> Â¦ MoarVM/jit-expr-optimizer: review: https://github.com/MoarVM/MoarVM/compare/99570152d0f8...b814ddbd2cca

[21:11] *** dogbert17 left
[21:13] <Kaiepi> one side effect of fixing the gc-related stuff for async sockets seems to be that their performance is much more stable (at least with the script i'm testing with)

[21:15] <Kaiepi> now it binds and connects at a consistent rate, rather than randomly stopping like before

[21:17] <MasterDuke> nice

[21:21] <jnthn> timotimo: Commented on the PR. BTW, where is the latest heap snapshot format documented, and is it relatively stable now?

[21:26] *** AlexDaniel left
[21:26] *** AlexDaniel joined
[21:27] *** AlexDaniel left
[21:27] *** AlexDaniel joined
[21:27] *** anatofuz joined
[21:39] *** brrt joined
[21:40] <brrt> I think i've solved the qregex regression in the deopt branch

[21:46] <timotimo> jnthn: the format has different "sections", two of which contain json so they're "extensible", the others are all long lists of integers (in their native format, did not bother putting in endian-switching yet, but definitely should), those are zstd-compressed, and then there's the TOCs, which are two levels nested at the moment; i think the format will stay stable for a while, and in one of the json blobs

[21:46] <timotimo> there's a "subversion" field that i shall be using

[21:46] <timotimo> i'll write up a proper specification for you :)

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 2db874c0b2 | (Bart Wiegmans)++ | src/jit/graph.c

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize: [JIT] Use correct deopt index for guard opcodes

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize:

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize: Due to annotation migration (I think) we can have multiple deopt

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize: annotations on the same opcode, even a guard opcode, and they don't

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize: even always have to point to the same deopt target. But we should use

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize: the deopt target that was chosen when the guard was introduced, which

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize: is just the one that's the opcode argument.

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize:

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize: Indeed, that's mostly the point of this set of patches.

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize: This fixes the NQP qregex testcase.

[21:46] <Geth> Â¦ MoarVM/expr-jit-devirtualize: review: https://github.com/MoarVM/MoarVM/commit/2db874c0b2

[21:47] <timotimo> brrt: well done!

[21:49] <brrt> :-)

[21:49] <brrt> we may want to look at annotation migration at some point

[21:52] <timotimo> there's also the possibility to merge deopt targets by going backwards through any operations that don't have any side-effects

[21:58] <brrt> hmm

[22:10] *** anatofuz left
[22:14] <jnthn> timotimo: Thanks, would love to have a proper spec.

[22:14] <jnthn> I Have Plans. :)

[22:15] <brrt> .seen pamplemousse

[22:15] <tellable6> brrt, I saw pamplemousse 2019-09-04T13:09:36Z in #moarvm: <pamplemousse> Hi timotimo

[22:15] <jnthn> brrt++ # deopt

[22:16] <brrt> jnthn: I hope to have them in the expression JIT tomorrow... but I kind of need sleep now :-)

[22:16] *** brrt left
[22:24] *** lucasb left
[22:33] *** anatofuz joined
[23:31] *** anatofuz left
[23:31] *** anatofuz joined
[23:32] *** anatofuz left
[23:37] *** anatofuz joined
[23:41] *** anatofuz left
[23:41] *** anatofuz joined
