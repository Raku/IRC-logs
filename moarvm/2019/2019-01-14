[00:14] *** Ven`` joined
[00:15] *** lizmat left
[00:15] *** p6bannerbot sets mode: +v Ven``

[00:20] *** lizmat joined
[00:20] *** p6bannerbot sets mode: +v lizmat

[01:05] *** Ven`` left
[04:49] *** MasterDuke left
[06:38] *** domidumont joined
[06:38] *** p6bannerbot sets mode: +v domidumont

[07:05] *** domidumont left
[07:32] *** domidumont joined
[07:32] *** p6bannerbot sets mode: +v domidumont

[07:45] *** brrt joined
[07:46] *** p6bannerbot sets mode: +v brrt

[08:19] <brrt> good moarning

[08:19] <nwc10> good *, brrt

[10:26] <jnthn> o/

[10:26] <nwc10> \o

[10:26] <nwc10> The P in pea stands for "Partial"?

[10:38] <jnthn> Yes

[10:48] <lizmat> .oO( I thought it stood for Pea, in the great GNU tradition :-)

[10:57] <jnthn> nwc10: I'll submit a talk about it for GPW, which I guess you'll be at? :)

[10:59] <nwc10> I plan to be

[11:06] <nine> jnthn: the nqp::neverrepossess you added in https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L65 is not enough. The cache gets serialized anyway and the MVM_CF_NEVER_REPOSSESS on the object doesn't survive serialization/deserialization.

[11:06] *** domidumont left
[11:06] <nine> jnthn: this causes references to CompUnit::Repository::Staging to end up in the installed Inline::Perl5::Parent when they shouldn't. That's why we end up with missing dependencies when loading Inline::Perl5 from an RPM package

[11:07] <nine> References to CompUnit::Repository::Staging's SC to be precise

[11:16] <jnthn> nine: Well, it's enough in the sense that it avoids the repossessions it was aimed to eliminate, but yes, I can see that it'd not be enough for avoiding the cache being serialized in the first place.

[11:16] <jnthn> Which is indeed desirable.

[11:16] <jnthn> Though I kind of wonder how that's happening anyway

[11:17] <jnthn> Also, if a lexical is the wrong way to hold that cache

[11:17] <jnthn> Especially given it's not threadsafe in the light of multiple concurrent evaluations

[11:18] * jnthn wonders if we should hang it off $*W or something

[11:18] <jnthn> Or make it a dynamic in TOP or comp_unit, perhaps

[11:19] <jnthn> That probably means nothing closes over it, so we don't have the issue

[11:22] *** robertle_ joined
[11:23] *** p6bannerbot sets mode: +v robertle_

[11:23] <nine> I'm gonna give that a try and see how it affects performance. Putting it into an attribute on STD costs ~ 10s in settings compilation

[11:27] <jnthn> Attributes in a curosr are per cursor

[11:27] <jnthn> So that won't help at all

[11:31] *** domidumont joined
[11:32] *** p6bannerbot sets mode: +v domidumont

[12:35] *** Ven`` joined
[12:36] *** p6bannerbot sets mode: +v Ven``

[12:42] *** domidumont left
[12:53] *** MasterDuke joined
[12:53] *** p6bannerbot sets mode: +v MasterDuke

[12:54] *** MasterDuke left
[12:54] *** MasterDuke joined
[12:54] *** herbert.freenode.net sets mode: +v MasterDuke

[12:54] *** p6bannerbot sets mode: +v MasterDuke

[12:57] *** domidumont joined
[12:57] *** p6bannerbot sets mode: +v domidumont

[13:10] <MasterDuke> brrt: is there any reason (eq|le|lt|ge|gt)_n templates shouldn't just be the same as the *_i variants?

[13:13] *** brrt left
[13:14] <MasterDuke> or do they and coerce_(in|ni) need that floating point support you've been working on?

[13:15] *** zakharyas joined
[13:16] *** p6bannerbot sets mode: +v zakharyas

[14:01] *** Ven`` left
[14:09] *** brrt joined
[14:10] *** p6bannerbot sets mode: +v brrt

[14:18] *** Ven`` joined
[14:19] *** p6bannerbot sets mode: +v Ven``

[15:00] *** domidumont left
[15:08] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/01/14/2019-02-is-it-spring/

[15:09] *** domidumont joined
[15:10] *** p6bannerbot sets mode: +v domidumont

[15:11] <brrt> lizmat++

[15:19] <MasterDuke> brrt: btw, did you catch my question earlier?

[15:29] <brrt> probably not

[15:31] <nine> MasterDuke: I'm quite sure at least coerce_(in|ni) will need float support

[15:32] <nine> Really the same for (eq|le|lt|ge|gt)_n

[15:35] *** Ven`` left
[15:40] <MasterDuke> nine: i added (eq|le|lt|ge|gt)_n as copies of *_i and nothing crashed (unlike my attempts at coerce_(in|ni)), but i haven't run a spectest yet

[15:50] <brrt> MasterDuke: what was your question?

[15:51] <MasterDuke> is there any reason (eq|le|lt|ge|gt)_n templates shouldn't just be the same as the *_i variants?

[15:51] <MasterDuke> or do they and coerce_(in|ni) need that floating point support you've been working on?

[15:51] <brrt> ehm.....

[15:51] <brrt> that is a good question....

[16:00] <nine> MasterDuke: have you tested the semantics?

[16:00] <brrt> so I don't know if you did so wittingly, but I've been looking at generic/polymorphic opcodes in the expr JIT

[16:01] <brrt> the tl;dr - if you do that *today*, it totally will not work

[16:05] *** brrt left
[16:10] <MasterDuke> brrt: fwiw, only two spectest fails, t/spec/S32-io/io-path-extension.t and t/spec/S05-metasyntax/regex.t

[16:22] *** brrt joined
[16:23] *** p6bannerbot sets mode: +v brrt

[16:24] <brrt> MasterDuke: so semantically, a (lt num num) is very different from (lt int int)

[16:24] <brrt> in the current implementation, you'd only compile the latter, not the former

[16:24] <brrt> in the jit-expr-float branch, you'd compile the first, but it doesn't work because the tiler doesn't think a 'num' is a value that warrants a register

[16:25] <brrt> (and that's true because I'm still figuring out how to get a correct, simple implementation of the idea of 'register class'

[16:28] <brrt> arguably, the register class is the full set of registers that may be allocated for a value

[16:28] <brrt> hmm, that gives me an idea

[16:30] *** domidumont left
[16:31] <brrt> okay, so, if the rule of genericity is this:

[16:31] <brrt> - an operand that is generic on its input can be generic on its output

[16:31] <brrt> - if an operator has two generic operands, they must be equal

[16:32] <brrt> - no operator can be monomorphic on input and polymorphic on output

[16:32] <brrt> then. the whole group of comparison and arithmetic operators can legally be generic

[16:32] <MasterDuke> that sounds nice

[16:42] <brrt> it is pretty nice :-)

[17:02] *** brrt left
[17:06] <nine> jnthn: hanging the cache off $*W fixes my issue and does well WRT performance :)

[17:07] *** domidumont joined
[17:07] *** zakharyas left
[17:08] *** p6bannerbot sets mode: +v domidumont

[17:16] *** patrickb joined
[17:17] *** p6bannerbot sets mode: +v patrickb

[18:01] *** robertle_ left
[18:01] *** AlexDaniel left
[18:45] *** AlexDaniel joined
[18:45] *** p6bannerbot sets mode: +v AlexDaniel

[18:46] *** ChanServ sets mode: +o AlexDaniel

[18:46] *** AlexDaniel sets mode: -m
 
[18:46] *** ChanServ sets mode: -o AlexDaniel

[19:22] *** brrt joined
[19:22] *** p6bannerbot sets mode: +v brrt

[19:46] *** domidumont left
[19:58] <jnthn> nine: Cool :)

[20:01] *** patrickb left
[20:01] <jnthn> D'oh, water pipe just down the road burst...

[20:01] <brrt> oops

[20:02] <lizmat> jnthn: do you agree that something like "my %h is Set[Int]" should just work ?

[20:04] <nwc10> jnthn: impending tea crisis?

[20:07] <jnthn> nwc10: Yeah but I can drink beer instead :)

[20:07] <jnthn> lizmat: Um...maybe but there's a syntactic curiosity there.

[20:08] <lizmat> ah?

[20:08] <jnthn> We parse a circumfix after the name

[20:08] <lizmat> right

[20:08] <jnthn> I can't quite remember how we pass those off to the trait_mod

[20:08] <lizmat> well, I'm looking at that code now

[20:08] <lizmat> well, trying to make sense of it  :-)

[20:09] <jnthn> But I think if Set is a type then you'll get it as an extra argument and then call call .^parameterize(|@stuff)

[20:09] <jnthn> And then it can work

[20:09] <nwc10> jnthn: beer fridge for the win!

[20:09] <lizmat> jnthn: *that* part is already working

[20:09] <lizmat> it's the syntax "is Set[Int]" that is crashing

[20:09] <jnthn> lizmat: Right, so then it is in theory just wiring the [Int] into the call to .^parameterize

[20:09] <lizmat> m: my %s is Set[Int]

[20:09] <camelia> rakudo-moar bcc8054a4: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Can't use unknown trait 'is ' in a variable declaration.␤at <tmp>:1␤------> my %s is Set[Int]⏏<EOL>␤    expecting any of:␤        TypeObject␤        default␤        dynamic␤      …»

[20:10] <lizmat> huh?

[20:10] <jnthn> Right, I bet you need an extra multi candidate receiving a third rgument

[20:10] <lizmat> ah... hmmm...

[20:10] <jnthn> multi trait_mod:<is>(Variable:D $v, Mu:U $type, @params) { } or so

[20:10] <lizmat> ack... will check

[20:30] *** brrt left
[20:59] *** brrt joined
[21:00] *** p6bannerbot sets mode: +v brrt

[21:04] *** d4l3k_ joined
[21:05] <brrt> anyone here has plans to go to FOSDEM this year?

[21:05] *** p6bannerbot sets mode: +v d4l3k_

[21:07] <lizmat> woolfy and /me will be there at the Perl booth

[21:07] <brrt> cool :-)

[21:11] *** wictory[m] left
[21:11] *** d4l3k_ is now known as dalek

[21:13] *** wictory[m] joined
[21:13] *** p6bannerbot sets mode: +v wictory[m]

[21:34] <brrt> https://brrt-to-the-future.blogspot.com/2019/01/a-short-posts-about-types-and.html

[21:35] <brrt> for whom it may concern, or interest

[21:42] *** brrt left
[22:45] <lizmat> .tell jnthn I created the candidate to handle "my %s is Set[Int]", but I have **no** clue as to how to get the parameterized set into position

[22:45] <yoleaux> lizmat: I'll pass your message to jnthn.

[22:50] * lizmat gives up for now

[23:27] *** Geth joined
[23:28] *** p6bannerbot sets mode: +v Geth

