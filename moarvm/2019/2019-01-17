[00:59] *** undersightable6 left
[00:59] *** undersightable6 joined
[00:59] *** benchable6 left
[00:59] *** reportable6 left
[00:59] *** coverable6 left
[00:59] *** reportable6 joined
[00:59] *** benchable6 joined
[01:00] *** p6bannerbot sets mode: +v undersightable6

[01:00] *** p6bannerbot sets mode: +v reportable6

[01:00] *** p6bannerbot sets mode: +v benchable6

[02:01] *** coverable6 joined
[02:02] *** p6bannerbot sets mode: +v coverable6

[02:15] *** AlexDani` joined
[02:16] *** p6bannerbot sets mode: +v AlexDani`

[02:19] *** AlexDaniel left
[02:27] *** AlexDani` is now known as AlexDaniel

[02:35] *** Kaiepi left
[02:35] *** squashable6 left
[02:36] *** Kaiepi joined
[02:37] *** p6bannerbot sets mode: +v Kaiepi

[02:40] *** btyler_ joined
[02:40] *** AlexDani` joined
[02:40] *** p6bannerbot sets mode: +v btyler_

[02:41] *** p6bannerbot sets mode: +v AlexDani`

[02:42] *** masak_ joined
[02:43] *** p6bannerbot sets mode: +v masak_

[02:44] *** samcv_ joined
[02:44] *** p6bannerbot sets mode: +v samcv_

[02:45] *** dogbert11 joined
[02:46] *** p6bannerbot sets mode: +v dogbert11

[02:46] *** AlexDaniel left
[02:46] *** reportable6 left
[02:46] *** benchable6 left
[02:46] *** undersightable6 left
[02:46] *** bisectable6 left
[02:46] *** evalable6 left
[02:46] *** dogbert17 left
[02:46] *** quotable6 left
[02:46] *** committable6 left
[02:46] *** masak left
[02:46] *** samcv left
[02:46] *** btyler left
[02:49] *** MasterDuke joined
[02:49] *** p6bannerbot sets mode: +v MasterDuke

[02:49] *** MasterDuke left
[02:49] *** MasterDuke joined
[02:49] *** herbert.freenode.net sets mode: +v MasterDuke

[02:49] *** p6bannerbot sets mode: +v MasterDuke

[02:54] *** timotimo joined
[02:54] *** p6bannerbot sets mode: +v timotimo

[03:03] <MasterDuke> timotimo: every once in a while i get distracted by trying to figure out why tools/build/install-core-dist.p6 takes so long. a profile just shows lots of ThreadScheduler stuff and a perf report doesn't seem particularly helpful

[03:04] <MasterDuke> i assume it's all the pre-compiling it does. would nine++'s (planned i think) work on precompiling in-process or something like that help?

[03:04] <timotimo> yeah, it's most probably running subprocesses

[03:04] <MasterDuke> or is there any better way to figure out what's going on?

[03:04] <timotimo> there'd have to be something that passes --profile flags to the subprocesses to really see what's going on at all

[03:06] <MasterDuke> think that'd be easy to hack in temporarliy just to get some profiles of this?

[03:06] <timotimo> i'd at least suggest trying that

[03:07] <timotimo> i don't recall if putting a %d in the filename for the profile will cause it to put the PID in the filename there

[03:07] <timotimo> that might be important so that it doesn't b0rk

[03:07] <MasterDuke> ah, good call

[03:11] *** evalable6 joined
[03:11] *** p6bannerbot sets mode: +v evalable6

[03:16] *** evalable6 left
[03:16] *** evalable6 joined
[03:17] *** p6bannerbot sets mode: +v evalable6

[03:36] *** bisectable6 joined
[03:37] *** p6bannerbot sets mode: +v bisectable6

[03:39] *** benchable6 joined
[03:40] *** squashable6 joined
[03:40] *** p6bannerbot sets mode: +v benchable6

[03:40] *** committable6 joined
[03:41] *** p6bannerbot sets mode: +v squashable6

[03:41] *** p6bannerbot sets mode: +v committable6

[03:42] *** quotable6 joined
[03:42] *** reportable6 joined
[03:43] *** p6bannerbot sets mode: +v quotable6

[03:43] *** p6bannerbot sets mode: +v reportable6

[03:46] *** undersightable6 joined
[03:47] *** p6bannerbot sets mode: +v undersightable6

[03:56] *** lizmat left
[05:39] *** robertle joined
[05:40] *** p6bannerbot sets mode: +v robertle

[06:30] *** domidumont joined
[06:31] *** p6bannerbot sets mode: +v domidumont

[06:39] *** domidumont left
[07:02] *** domidumont joined
[07:03] *** p6bannerbot sets mode: +v domidumont

[08:08] *** samcv_ is now known as samcv

[08:58] *** lizmat joined
[08:58] *** p6bannerbot sets mode: +v lizmat

[09:48] *** zakharyas joined
[09:49] *** p6bannerbot sets mode: +v zakharyas

[10:00] *** brrt joined
[10:01] *** Kaiepi left
[10:01] *** p6bannerbot sets mode: +v brrt

[10:01] *** Kaiepi joined
[10:02] *** p6bannerbot sets mode: +v Kaiepi

[10:56] *** domidumont left
[11:05] *** brrt left
[11:47] *** brrt joined
[11:48] *** p6bannerbot sets mode: +v brrt

[11:51] <brrt> \o

[12:05] <nwc10> o/

[12:10] <timotimo> \o

[12:11] <brrt> everybody's here again :-)

[12:15] <jnthn> .oO( I'm nobody :D )

[12:15] <brrt> I knew you were lurking here

[12:16] <brrt> okay, I'm also still waiting for nine, lizmat, samcv, MasterDuke, etc.

[12:16] * lizmat delurks

[12:56] *** domidumont joined
[12:56] *** p6bannerbot sets mode: +v domidumont

[13:11] <brrt> I should probably try and get something useful to do.

[13:18] <samcv> hello

[13:22] <brrt> ohai samcv

[13:22] <brrt> I've decided I like bitmaps

[13:24] <brrt> Especially for the problem of register allocation

[13:27] <jnthn> I like bitmaps and I cannot lie...you other hacker's can't deny...that when a hash walks in with a wasteful malloc race and a cache miss in your face

[13:38] <brrt> You'd get stalls

[13:39] <brrt> of course, there are dialects that have more registers than 8-byte bitmap can describe

[13:39] <brrt> but not so many

[13:44] *** lucasb joined
[13:44] *** p6bannerbot sets mode: +v lucasb

[13:47] *** masak_ is now known as masak

[13:57] <brrt> oh hey, my newly defined register scheme actually compiles...

[13:58] <nwc10> "ship it!"

[13:58] <brrt> and segfaults

[13:58] <nwc10> (thank you for the pause that was just long enough)

[13:58] <brrt> .oO( If it compiles, it works! So way we all )

[14:12] <brrt> hmm, I have an idea of what's going wrong though

[14:19] *** AlexDani` is now known as AlexDaniel

[14:24] <AlexDaniel> releasable6: status

[14:24] <releasable6> AlexDaniel, Next release in ≈2 days and ≈4 hours. 5 blockers. 109 out of 230 commits logged (⚠ 41 warnings)

[14:24] <releasable6> AlexDaniel, Details: https://gist.github.com/84c8f83acb9ee5888a215a8850f4639c

[14:46] *** lizmat left
[14:50] <Geth> ¦ MoarVM/jit-2op-form: 349bea26b5 | (Bart Wiegmans)++ | 5 files

[14:50] <Geth> ¦ MoarVM/jit-2op-form: [JIT] Reorganize JIT register definitions

[14:50] <Geth> ¦ MoarVM/jit-2op-form:

[14:50] <Geth> ¦ MoarVM/jit-2op-form: - All registers are defined as integers

[14:50] <Geth> ¦ MoarVM/jit-2op-form: - All sets of registers are bitmaps

[14:50] <Geth> ¦ MoarVM/jit-2op-form: - Registers are either reserved, available, or spare

[14:50] <Geth> ¦ MoarVM/jit-2op-form: - A register class is a distinct range of registers (and is

[14:50] <Geth> ¦ MoarVM/jit-2op-form:   implemented as a bitmap mask)

[14:50] <Geth> ¦ MoarVM/jit-2op-form:

[14:50] <Geth> ¦ MoarVM/jit-2op-form: I removed the __COMMA__ hack because it wasn't such a terribly great

[14:50] <Geth> ¦ MoarVM/jit-2op-form: idea anyway.

[14:50] <Geth> ¦ MoarVM/jit-2op-form: review: https://github.com/MoarVM/MoarVM/commit/349bea26b5

[14:57] <dogbert11> jnthn: are you on a blocker hunt?

[14:58] <jnthn> I've just written up notes on one of them

[14:58] <jnthn> https://github.com/rakudo/rakudo/issues/2564 I don't really know where to look next for it

[14:59] <jnthn> Two of the others look platform specific

[14:59] <dogbert11> 2564 is strange, trying to make it fail with asan enabled has so far proved fruitless :(

[15:01] <jnthn> 2606 looks rather more possible to do something about

[15:02] <dogbert11> cool, any theories about what's going on there?

[15:02] <jnthn> Not yet, but running it with massif

[15:04] <dogbert11> That will perhaps uncover what might be going on

[15:08] <jnthn> Indeed, plugin gone wild

[15:08] <dogbert11> a wild plugin :)

[15:12] <jnthn> I'm going to put in an upper limit for the size of the guard set, so bugs like this don't end up running so wild on memory

[15:12] <jnthn> And then a mode to dump stack traces if it happens

[15:15] <dogbert11> so you know what happens but not (yet) why?

[15:23] <Geth> ¦ MoarVM: 7fc6be1082 | (Jonathan Worthington)++ | src/spesh/plugin.c

[15:23] <Geth> ¦ MoarVM: Add a limit on spesh plugin guard set size

[15:23] <Geth> ¦ MoarVM:

[15:23] <Geth> ¦ MoarVM: Above a certain size, it's both likely to be a spesh plugin bug, but

[15:23] <Geth> ¦ MoarVM: also likely to not be an optimization at all, so better to just run

[15:23] <Geth> ¦ MoarVM: the plugin each time. Add a mode (off by default) where we dump the

[15:23] <Geth> ¦ MoarVM: stack trace of the location where we were trying to add way too many

[15:23] <Geth> ¦ MoarVM: guards to the set, to help with tracking down such bugs.

[15:23] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7fc6be1082

[15:24] <jnthn> Yeah. Well, this fix will at least get us to not nom epic amounts of memory

[15:25] <jnthn> Too many plugin guards added; probable spesh plugin bug

[15:25] <jnthn>    at SETTING::src/core/control.pm6:62  (./CORE.setting.moarvm:take)

[15:25] <jnthn> Curious

[15:27] <jnthn> Especially as I can't see what in there would be using a plugin...

[15:28] <dogbert11> a mystery then

[15:28] <jnthn> ah, decontrv

[15:32] *** AlexDaniel` left
[15:33] *** wictory[m] left
[15:37] *** wictory[m] joined
[15:37] *** p6bannerbot sets mode: +v wictory[m]

[15:41] *** AlexDaniel` joined
[15:41] *** p6bannerbot sets mode: +v AlexDaniel`

[15:43] <dogbert11> hmm, the valgrind option when building MoarVM seems to have bitrotted unless I'm doing something wrong :(

[15:44] <brrt> decontrv, clearly

[15:44] <jnthn> The plugin seems to be doing the right thing, though. It's just adding one type guard.

[16:00] <jnthn> Ah...but we also get an inlining of a spesh plugin too..hmm

[16:06] <jnthn> Yeah, it's something to do with that inlined one

[16:18] <jnthn> D'oh, think I found it

[16:23] * brrt eagerly awaits the patch

[16:24] *** domidumont left
[16:28] <Geth> ¦ MoarVM: 58caebf4f2 | (Jonathan Worthington)++ | src/spesh/plugin.c

[16:28] <Geth> ¦ MoarVM: Use correct static frame in plugin resolution

[16:28] <Geth> ¦ MoarVM:

[16:28] <Geth> ¦ MoarVM: When we inline a speshresolve that needs late-bound lookups, we include

[16:28] <Geth> ¦ MoarVM: the static frame, meaning that we can then inline it. However, part of

[16:29] <Geth> ¦ MoarVM: the spesh plugin handling code just read the static frame of the frame

[16:29] <Geth> ¦ MoarVM: currently on the callstack, rather than using the one it was provided

[16:29] <Geth> ¦ MoarVM: with. If the plugin got new guards, they were resolved in the provided

[16:29] <Geth> ¦ MoarVM: static frame, but the new ones would be stored in the incorrect

[16:29] <Geth> ¦ MoarVM: (currently executing) static frame. This would lead to repeated addition

[16:29] <Geth> ¦ MoarVM: of the same guard to the wrong place, since it would be missed every

[16:29] <Geth> ¦ MoarVM: time.

[16:29] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/58caebf4f2

[16:37] <Geth> ¦ MoarVM/pea: 35 commits pushed by (Jonathan Worthington)++, (Carl Masak)++

[16:37] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/compare/624a114916ed...c5a63376373b

[16:37] <jnthn> Rebase time :)

[16:37] <jnthn> Let's see what my next task in here is...

[16:55] *** brrt left
[16:56] <Geth> ¦ MoarVM/pea: db0c8a7c97 | (Jonathan Worthington)++ | src/spesh/deopt.c

[16:56] <Geth> ¦ MoarVM/pea: Implement deopt materialization of native attrs

[16:56] <Geth> ¦ MoarVM/pea:

[16:56] <Geth> ¦ MoarVM/pea: So that we can materialize scalar-replaced objects during deopt that

[16:56] <Geth> ¦ MoarVM/pea: have native attributes.

[16:56] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/db0c8a7c97

[17:10] <jnthn> m: say 0.38 / 0.49

[17:10] <camelia> rakudo-moar 5d7079774: OUTPUT: «0.77551␤»

[17:15] <jnthn> Those numbers are about https://github.com/japhb/perl6-bench/blob/master/perl6/rc-mandelbrot

[17:15] <jnthn> Best time with PEA / without PEA

[17:16] <dogbert11> impressive improvement

[17:17] <jnthn> This isn't even especially *good* PEA :)

[17:17] <jnthn> It's the simplest that could possibly do a few useful things

[17:17] <dogbert11> so it will get even better then

[17:58] *** zakharyas left
[18:17] <Geth> ¦ MoarVM/pea: 83a35e95b7 | (Jonathan Worthington)++ | src/spesh/deopt.c

[18:17] <Geth> ¦ MoarVM/pea: Remove unused variable

[18:17] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/83a35e95b7

[18:19] *** domidumont joined
[18:20] *** p6bannerbot sets mode: +v domidumont

[18:21] *** brrt joined
[18:21] *** p6bannerbot sets mode: +v brrt

[18:39] <nine> jnthn: I got the compute_allocation_strategy segfault too and there I see the same bogus sc_forward_u that I posted on the ticket: {forwarder = 0xffffffff00000016, sc = {sc_idx = 22, idx = 4294967295}, st = 0xffffffff00000016}

[18:39] <yoleaux> 16 Jan 2019 21:42Z <japhb> nine: Will Inline::Python support python3?  Or will you EOL it next year?

[18:40] <nine> .tell japhb if there's interest, I can certainly port. The changes are not that many

[18:40] <yoleaux> nine: I'll pass your message to japhb.

[18:40] <nine> jnthn: note however that that's the header of an STable. Does that make a difference?

[19:09] <jnthn> nine: STables start with MVMCollectable also

[19:09] <jnthn> So yes, that part is the same

[19:14] <nine> So 2 very different back traces with segfaults on dereferencing a NULL REPR_data of a CStruct type where sc_forward_u is bogus with exactly the same value: 0xffffffff00000016

[19:31] <nine> With a nursery of 8K and gc debugging 2 I get a reliable Collectable in fromspace accessed of a CArray with forwarder = 0xffffffff00000016

[19:31] <nine> Well with that value in the CArray's st

[19:32] *** domidumont left
[19:34] <nine> Another oddity: the faulty object has both the MVM_CF_SECOND_GEN and the MVM_CF_REF_FROM_GEN2 flags set. Don't those flags contradict each other?

[19:42] <nine> jnthn: you did an interesting GC related commit in CUnion. Doesn't the same apply to CStruct? https://github.com/MoarVM/MoarVM/commit/6733e927ceb1aeff0daf23a58c43730cb2c38d77

[20:06] <japhb> .tell nine Yes, there's interest from me at least.  :-)

[20:06] <yoleaux> 18:40Z <nine> japhb: if there's interest, I can certainly port. The changes are not that many

[20:06] <yoleaux> japhb: I'll pass your message to nine.

[20:14] <jnthn> nine: ooh, maybe yes...

[20:14] *** MasterDuke left
[20:14] <jnthn> Though I thought I'd checked some of the others at the time...but it was a whlie ago

[20:15] <jnthn> nine: I noticed that too, but no: it just means, I think, that the object was born in the nursery, was referenced by a GEN2 object, and then got promoted. Promotion doesn't clear the flag, but the flag is used solely to decide to do early promotion to gen2

[20:18] <nine> I'd be highly surprised if the patch wasn't necessary as the CStruct code is virtually identical to the CUnion one

[20:18] <yoleaux> 20:06Z <japhb> nine: Yes, there's interest from me at least.  :-)

[20:24] <jnthn> If that's all it needs, I'd be delighted :)

[20:36] <nine> If only this bug was a little easier to reproduce

[20:37] *** brrt left
[20:44] *** lucasb left
[20:51] <nine> With the patch I now sometimes get a weird segfault in return_o in this later test: throws-like 'class EmptyCStructTest is repr<CStruct> { };', Exception, message => { m/'no attributes'/ };

[23:14] *** lizmat joined
[23:14] *** p6bannerbot sets mode: +v lizmat

[23:53] *** Kaypie joined
[23:54] *** p6bannerbot sets mode: +v Kaypie

[23:54] *** Kaiepi left
[23:54] *** Kaypie left
[23:55] *** Kaiepi joined
[23:56] *** p6bannerbot sets mode: +v Kaiepi

