[00:03] *** patrickz joined
[00:06] *** patrickb left
[00:24] *** Kaiepi left
[00:25] *** Kaiepi joined
[00:40] *** patrickz left
[01:01] *** ZzZombo joined
[02:23] *** lucasb left
[04:16] <colomon> Is there any current-ish Raku literate programming module?  Perl6::Literate claims to not be very serious and is years out of date, the better one that README references doesn’t look like it’s been touched in a decade…

[05:40] *** ZzZombo_ joined
[05:42] *** ZzZombo__ joined
[05:42] *** ZzZombo__ left
[05:43] *** ZzZombo left
[05:43] *** ZzZombo__ joined
[05:45] *** ZzZombo_ left
[06:09] *** ZzZombo__ is now known as ZzZombo

[07:02] *** domidumont joined
[07:11] *** domidumont left
[07:35] *** domidumont joined
[08:08] *** Kaiepi left
[08:16] *** Kaiepi joined
[08:20] *** patrickb joined
[08:22] <nine> jnthn: what you described was the original bug. I could easily see that in rr which showed me that deopt was clearing spesh_cand and effective_spesh_slots. This time the current frame never had those.

[08:22] <tellable6> 2019-12-11T23:54:00Z #raku-dev <patrickb> nine Never mind.

[08:22] <tellable6> hey nine, you have a message: https://gist.github.com/7610b6a070da795fabf80fcddb1948a9

[08:30] *** zakharyas joined
[09:48] *** sena_kun joined
[10:11] *** zakharyas left
[10:22] *** zakharyas joined
[10:54] *** sena_kun left
[11:08] *** sena_kun joined
[11:15] *** domidumont left
[12:12] *** zakharyas left
[12:50] *** domidumont joined
[12:51] *** domidumont left
[12:51] *** domidumont joined
[12:54] *** sena_kun left
[13:09] *** sena_kun joined
[13:41] *** zakharyas joined
[14:06] *** lucasb joined
[14:54] *** sena_kun left
[15:08] *** sena_kun joined
[15:15] *** nine left
[15:16] *** nine joined
[15:19] *** camelia joined
[15:57] *** domidumont left
[15:59] *** domidumont joined
[16:16] *** patrickb left
[16:22] *** zakharyas left
[16:23] *** zakharyas joined
[16:31] *** domidumont left
[16:43] *** ZzZombo_ joined
[16:44] *** ZzZombo left
[16:44] *** ZzZombo_ is now known as ZzZombo

[16:48] *** robertle joined
[16:53] *** sena_kun left
[16:59] *** ZzZombo left
[17:00] *** ZzZombo joined
[17:08] *** sena_kun joined
[18:19] *** domidumont joined
[18:29] *** domidumont left
[18:34] *** domidumont joined
[18:39] *** zakharyas left
[18:42] *** patrickb joined
[18:54] *** sena_kun left
[19:09] *** sena_kun joined
[19:14] *** domidumont left
[19:37] *** domidumont joined
[19:50] *** domidumont left
[20:42] *** robertle left
[20:44] <nine> Oh, the frame got moved by the GC! That's why the watch point for its spesh_cand doesn't trigger in reverse-cont

[20:46] <nine> And yes, it's deopt all again. So it seems like I need to do similar fixes for JIT compiled frames as I've already done for interpreted ones

[20:55] *** sena_kun left
[20:59] <nine> So, how does this work in the first place when we're in a JIT compiled frame and we invoked something and that causes a deopt all. How does the JIT compiled code know to exit to the interp?

[21:08] *** sena_kun joined
[21:26] <nine> Well, a deoptall on an inactive frame may only happen during an invoke which already has a lot of special handling in the JIT. Handling which nativecallinvoke lacks.

[21:28] <nine> So I guess what's needed is for the JIT to generate code that after a nativecallinvoke checks if the frame actually still has a spesh_cand and exit to the interp if not, i.e. a somewhat manual deopt.

[21:31] <nine> I really wonder if the same issue exists with nativeinvoke_o. It should

[21:36] <nine> I still don't know how exactly the JIT returns to the interpreter after a deopt in an invoke. But at least I have an idea on what's missing, even if I don't know yet how exactly that needs to look like.

[21:48] *** sena_kun left
[23:08] *** vrurg left
[23:08] *** vrurg joined
