[01:00] *** MasterDuke joined
[01:00] *** MasterDuke left
[01:00] *** MasterDuke joined
[01:06] *** sena_kun left
[02:25] *** BeaconAlumna left
[03:42] *** Kaiepi left
[03:46] *** Kaiepi joined
[03:58] *** Kaiepi left
[04:04] *** Kaiepi joined
[04:38] *** Woodi joined
[04:58] *** Kaiepi left
[04:59] *** Kaiepi joined
[05:11] *** Kaiepi left
[05:17] *** Kaiepi joined
[05:23] *** Kaiepi left
[05:23] *** Kaiepi joined
[06:11] *** Kaiepi left
[06:21] *** Kaiepi joined
[06:22] *** domidumont joined
[07:07] *** patrickb joined
[07:57] *** zakharyas joined
[07:58] *** Kaiepi left
[08:01] *** Kaiepi joined
[08:08] *** sena_kun joined
[08:18] *** brrt joined
[08:27] *** Kaiepi left
[08:28] *** Kaiepi joined
[09:01] *** zakharyas left
[09:16] <jnthn> o/

[09:16] <timotimo> \o

[09:16] <timotimo> i'll reboot my machine after having installed what seems like a few months worth of updates

[09:20] <timotimo> and we're back

[09:21] <jnthn> :)

[09:21] <jnthn> I can replicate the "tests are alright without the JIT" here on my office machine too. Hmm.

[09:23] <jnthn> ooh, the plot thickens

[09:23] <jnthn> Think it's OK with the expression JIT disabled too

[09:24] <timotimo> so the exprjit is missing some update for recent changes perhaps?

[09:24] <jnthn> ooh, I *did* an expr jit change

[09:24] <jnthn> I musta screwed it up

[09:25] <jnthn>  (template: sp_p6oget_o

[09:25] <jnthn> -  (let: (($val (load (add (^p6obody $1) $2) ptr_sz)))

[09:25] <jnthn> -    (if (nz $val)

[09:25] <jnthn> -      $val

[09:25] <jnthn> -      (^vmnull))))

[09:25] <jnthn> +  (load (add (^p6obody $1) $2) ptr_sz))

[09:25] <jnthn> Basically, wanted to remove the null check

[09:26] <timotimo> i mean it doesn't look wrong to me

[09:26] <jnthn> Trying with that reverted

[09:27] <jnthn> ah, still failures

[09:28] <jnthn> That was the only expression JIT change in my branch

[09:29] <timotimo> odd. perhaps there's some assumption somewhere else that's now being violated

[09:29] <timotimo> you can try the jit bisecting tool

[09:29] <jnthn> Yeah, feels like it

[09:47] * jnthn waits for the bisect tool's verdict :)

[09:50] <jnthn> OK, it found it (apparently), what output do I get?

[09:51] *** brrt left
[09:51] <jnthn> ah, there's a file wiht the frame/bb number :)

[09:53] <timotimo> if i remember correctly it also gives you a diff between the jit versions? or maybe you have to objdump and diff it yourself? it's been quite a while

[09:54] *** domidumont left
[09:54] <jnthn> Not sure, and I'm a tad dubious about the results, since I think maybe the test is affected by hash randomization

[09:55] <timotimo> ah damn

[09:55] <timotimo> we don't happen to have a way to turn hash randomization off at build time?

[09:56] <jnthn> Not a good one, I don't think

[09:56] <jnthn> I can hack it in though

[10:04] <jnthn> OK, it came out the same anyway

[10:14] <jnthn> grrr, I really don't get what's going on here :S

[10:14] <jnthn> You'd think disabling expr jit templates to cut out more of the block that's broken would help, but it doesn't at all

[10:14] <timotimo> we could try waiting for brrt

[10:15] <jnthn> Yeah, I think I'll see if brrt++ can help

[10:15] <jnthn> And in the meantime just disable expr jit for running tests :)

[10:15] <timotimo> aye

[10:15] <jnthn> What I want to do next is rebase my more-pea onto this branch

[10:15] <timotimo> in the future: write a confprog that turns off expr jit for just that one frame that's broken ;) ;)

[10:15] <timotimo> oh yes!

[10:15] <jnthn> And see if things work as nicely as I hope

[10:16] <jnthn> I may first rebase this branch on master, though

[10:16] <timotimo> good call

[10:16] <jnthn> oh, it's already up to date

[10:16] <jnthn> oh, it's the Rakudo one that isn't, OK :)

[10:16] *** Kaiepi left
[10:25] <Geth> ¦ MoarVM/more-pea: 47 commits pushed by (Jonathan Worthington)++

[10:25] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/compare/625910cf9cb4...7fa889604707

[10:26] <Geth> ¦ MoarVM/more-pea: f558d3dd2a | (Jonathan Worthington)++ | src/spesh/pea.c

[10:26] <Geth> ¦ MoarVM/more-pea: Recognize sp_bind_o_nowb in PEA

[10:26] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/f558d3dd2a

[10:39] <Geth> ¦ MoarVM: Kaiepi++ created pull request #1114: Implement freemem and totalmem ops

[10:39] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1114

[10:40] *** Kaiepi joined
[11:36] *** Kaiepi left
[11:37] *** Kaiepi joined
[11:39] *** domidumont joined
[11:45] *** Kaiepi left
[11:50] *** ggoebel left
[11:51] *** Kaiepi joined
[11:59] *** Kaiepi left
[12:00] *** Kaiepi joined
[12:28] *** BinGOs left
[12:28] *** BinGOs joined
[12:35] <Geth> ¦ MoarVM/p6o-setup: 4fddd3a298 | (Jonathan Worthington)++ | src/6model/reprs/P6opaque.c

[12:35] <Geth> ¦ MoarVM/p6o-setup: Set facts on generated object registers

[12:35] <Geth> ¦ MoarVM/p6o-setup:

[12:35] <Geth> ¦ MoarVM/p6o-setup: To improve the optimizations that can then be performed on them.

[12:35] <Geth> ¦ MoarVM/p6o-setup: review: https://github.com/MoarVM/MoarVM/commit/4fddd3a298

[12:35] <Geth> ¦ MoarVM/p6o-setup: a700e01c15 | (Jonathan Worthington)++ | src/6model/reprs/P6opaque.c

[12:35] <Geth> ¦ MoarVM/p6o-setup: Re-use spesh slots in P6opaque opts

[12:35] <Geth> ¦ MoarVM/p6o-setup:

[12:36] <Geth> ¦ MoarVM/p6o-setup: None of these need a distinctive slot of their own. Avoids quite a lot

[12:36] <Geth> ¦ MoarVM/p6o-setup: of duplicate slots.

[12:36] <Geth> ¦ MoarVM/p6o-setup: review: https://github.com/MoarVM/MoarVM/commit/a700e01c15

[12:36] <Geth> ¦ MoarVM/p6o-setup: be9811cb99 | (Jonathan Worthington)++ | src/6model/reprs/P6opaque.c

[12:36] <Geth> ¦ MoarVM/p6o-setup: Don't emit setup for vivify-on-access attributes

[12:36] <Geth> ¦ MoarVM/p6o-setup: review: https://github.com/MoarVM/MoarVM/commit/be9811cb99

[12:36] <jnthn> Turns out more-pea was missing some rather important facts :)

[12:37] <timotimo> adding facts seems really easy to miss :)

[12:37] *** Kaiepi left
[12:38] *** Kaypie joined
[12:39] *** Kaypie left
[12:40] *** Kaypie joined
[12:45] <Geth> ¦ MoarVM/more-pea: 48 commits pushed by (Jonathan Worthington)++

[12:45] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/compare/f558d3dd2ab0...f426992e087d

[12:45] <jnthn> Another rebase, to get the facts

[12:46] <jnthn> Now it explodes very loudly because...when I put in materialization I didn't check for if any of the attributes were also objects that need materialization :)

[12:46] <jnthn> Which was on my todo list, I just didn't have an example that reproduced it

[13:01] *** brrt joined
[13:01] <brrt> \o

[13:02] <brrt> jnthn: can haz JITbug?

[13:04] <jnthn> brrt: Yes; you need the p6o-setup branches in MoarVM and Rakudo. Spectest with MVM_SPESH_BLOCKING=1 (and perhaps with a small nursery to provoke more crashes).

[13:04] <jnthn> There's crashes, and they vanish with MVM_JIT_EXPR_DISABLE=1

[13:05] <jnthn> It looks like use of outdated pointer or missing wb

[13:05] <brrt> hmmm

[13:05] <brrt> Ok, I'll build and see what happens

[13:06] <jnthn> Ah, and moar with --debug to get assertions checked, since it's often triggering an assertion failure

[13:06] * brrt virtually always compiles moar with --debug

[13:06] <brrt> I have no idea how fast moar really is :-p

[13:08] <jnthn> Well, if it were fast enough already we'd not be doing all this work ;)

[13:13] <brrt> If it was fast enough, we'd still have bugs to fix :-P

[13:14] <brrt> have I told the plan of the linear IR refactor already?

[13:14] <timotimo> i've seen a post about it on the tpf blog

[13:15] <brrt> yes, that thing

[13:15] <brrt> :o I can't configure NQP?

[13:16] <brrt> "Can't locate object method "note" via package "NQP::Config::NQP" at /home/bart/Code/nqp/tools/lib/NQP/Config/NQP.pm line 35."

[13:17] <jnthn> git submoduloe update?

[13:38] <Kaypie> ^ this on nqp and rakudo

[13:39] <Kaypie> then make distclean and ./Configure.pl again

[13:39] <Kaypie> oh i'm late

[13:43] *** AlexDaniel joined
[13:45] <Geth> ¦ MoarVM/more-pea: 87d0e6fe28 | (Jonathan Worthington)++ | src/spesh/pea.c

[13:45] <Geth> ¦ MoarVM/more-pea: Materialize implicated objects

[13:45] <Geth> ¦ MoarVM/more-pea:

[13:45] <Geth> ¦ MoarVM/more-pea: When we have an object that we materialize, it may have attributes that

[13:45] <Geth> ¦ MoarVM/more-pea: are also objects we need to materialize. Do that.

[13:45] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/87d0e6fe28

[13:46] <jnthn> Darn, still segv...

[13:53] <jnthn> Grr, what on earth has it done..

[14:02] <jnthn> Hm, maybe lost an alias while eliminating a guard.

[14:06] <timotimo> because the guard was from rx to ry?

[14:14] <brrt> oh, that's the thing

[14:25] <Geth> ¦ MoarVM/more-pea: 9ba8e10733 | (Jonathan Worthington)++ | src/spesh/pea.c

[14:25] <Geth> ¦ MoarVM/more-pea: Track aliasing by a settified guard

[14:25] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/9ba8e10733

[14:26] <jnthn> Darn, and now it's correct it doesn't successfully deal with the scalar containers...

[14:27] <jnthn> PEA: considering frame 'new' (348)

[14:27] <jnthn> PEA: replacement of Scalar impossible due to PHI

[14:28] <timotimo> ;(

[14:34] <jnthn> Huh, the PHI is due to an introduced frame handler coming out of nowhere o.O

[14:36] <jnthn> oh, there's the inline boundary marker, hmm

[14:46] <jnthn> m: say 2147483648.base(2)

[14:46] <camelia> rakudo-moar a643b8be1: OUTPUT: «10000000000000000000000000000000␤»

[14:46] <jnthn> m: say 2147483648.base(2).chars

[14:46] <camelia> rakudo-moar a643b8be1: OUTPUT: «32␤»

[14:59] <timotimo> is that how much faster some code got? :) :)

[15:00] <jnthn> No, just checking it really works as a bit mask :P

[15:00] <timotimo> ah

[15:01] <jnthn> Tssk, so the PHI that it grumbles about doesn't even exist by the final output;

[15:01] <jnthn> Tssk, so the PHI that it grumbles about doesn't even exist by the final output

[15:01] <jnthn> oops, up key + edit isn't an IRC thing :P

[15:02] <timotimo> :)

[15:14] <Geth> ¦ MoarVM/more-pea: 5a2151a431 | (Jonathan Worthington)++ | src/spesh/optimize.c

[15:14] <Geth> ¦ MoarVM/more-pea: Eliminate dead instructions before PEA

[15:14] <Geth> ¦ MoarVM/more-pea:

[15:14] <Geth> ¦ MoarVM/more-pea: Since otherwise we can end up with dead PHIs and other things that cause

[15:14] <Geth> ¦ MoarVM/more-pea: PEA to bail out.

[15:14] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/5a2151a431

[15:14] <Geth> ¦ MoarVM/more-pea: c01456cd92 | (Jonathan Worthington)++ | src/spesh/pea.c

[15:14] <Geth> ¦ MoarVM/more-pea: Report register blocking PEA

[15:14] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/c01456cd92

[15:15] <jnthn> Ah, back to segv :P

[15:17] *** brrt left
[15:32] <dogbert17> jnthn: are you working on two MoarVM branches at the same time or have you merged them?

[15:34] <timotimo> i believe more-pea was rebased on top of p6o-setup maybe?

[15:34] <Geth> ¦ MoarVM/more-pea: 432b05334b | (Jonathan Worthington)++ | src/spesh/pea.c

[15:34] <Geth> ¦ MoarVM/more-pea: When guard is on eliminated allocation, delete it

[15:34] <Geth> ¦ MoarVM/more-pea:

[15:34] <Geth> ¦ MoarVM/more-pea: Instead of turning it into a zombie `set`.

[15:34] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/432b05334b

[15:34] <jnthn> dogbert17: p6o-setup is probably an expr jit bug away from mergability, whereas more-pea is quite a bit further off :)

[15:35] <jnthn> OK, hurrah, finally, it eliminates the scalar allocations in the Point object

[15:38] <dogbert17> that sounds very promising

[15:39] <jnthn> Well, both eliminates them and doesn't explode :)

[15:45] <jnthn> So now in the point benchmark, per iteration, it elimiantes the Point object itself, both Scalar containers of its attributes, the Hash wrapper (but not the VM-level hash inside of it) and two intermediate Int objects

[15:45] <jnthn> Spectest is very explosive, alas.

[15:46] <dogbert17> BOOM

[15:48] <jnthn> Ah, actually not so awful

[16:18] *** Kaypie is now known as Kaiepi

[16:20] <jnthn> Hm, I guess the EA can do everything that box/unbox pair elimination can do, and having that in a post-inline pass after PEA also means PEA doesn't get to see decompositions that it would work with

[16:20] <jnthn> So probably that logic can go away

[16:27] <jnthn> Bit of a refactor though...bit tired to dig into that right now

[16:28] <Geth> ¦ MoarVM/more-pea: 4c41ad121c | (Jonathan Worthington)++ | src/spesh/pea.c

[16:28] <Geth> ¦ MoarVM/more-pea: Correct a comment; sena_kun++

[16:28] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/4c41ad121c

[16:30] <dogbert17> jnthn: perhaps it's time for a cold beverage?

[16:31] *** patrickb left
[16:31] <jnthn> This is odd...Think so :)

[16:32] <jnthn> Ah, I see what it's doing

[16:32] <jnthn> But yeah, later

[16:43] <jnthn> Cool...

[16:43] <jnthn> Silly complex number program: my $total-re = 0; for ^10_000_000 { my $x = 5 + 2i; my $y = 10 + 3i; my $z = $x * $x + $y; $total-re = $total-re + $z.re }

[16:43] <jnthn> 3.2s without PEA

[16:44] <jnthn> 0.81s with PEA

[16:44] <jnthn> m: say 0.81 / 3.2

[16:44] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.253125␤»

[16:44] <jnthn> And it doesn't seem to be dealing with Num allocations yet, so there's more to win

[16:45] <jnthn> oh, no, I guess complex uses native num :)

[16:45] <jnthn> So not

[16:47] <jnthn> But it eliminates all 3 scalars in the loop ($xy, $y, $z), two Complex allocations, and gets rid of 5 guards.

[16:50] <sena_kun> https://gist.github.com/Altai-man/307a095d3e05265cf470238a243bd8af <- is it a correct transcription?

[16:50] <sena_kun> ah, nope

[16:51] <sena_kun> fixed an operator

[16:52] <sena_kun> cannot run the perl6 version to compare times though. :P

[16:53] <sena_kun> m: say 3.12 / 8.54

[16:53] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.36534␤»

[16:53] <jnthn> sena_kun: Yes, that looks right

[16:53] <sena_kun> even on 2019.03 perl 6 is faster for me, though, 3~ seconds vs 8.5.

[16:54] <jnthn> I tried a Perl 5 one but it's still running...I musta got something wrong in this

[16:55] <jnthn> Huh, just 100,000 iterations takes 6.35s

[16:55] <sena_kun> in 5?

[16:56] <jnthn> Yes

[16:56] <sena_kun> ooc, can you run py gist above on your machine?

[16:56] <jnthn> use Math::Complex; my $total_re = 0; for (1..100_000) { my $x = 5 + 2*i; my $y = 10 + 3*i; my $z = $x * $x + $y; $total_re = $total_re + $z->Re }; say $total_re

[16:57] <jnthn> 6.36s here

[16:58] <jnthn> m: say 0.81 / 6.36

[16:58] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.127358␤»

[16:58] <jnthn> m: say 6.36 / 0.81

[16:58] <camelia> rakudo-moar a643b8be1: OUTPUT: «7.851852␤»

[16:59] <sena_kun> this is a win. :)

[16:59] <jnthn> I guess Python is a more fair thing to compare against than Perl 5, given it's built in rather than a module.

[17:03] <jnthn> Ah, the python one actually is 5.71s if you transcribe it a tad better

[17:03] <jnthn> Can do x = complex(5, 2)

[17:04] <jnthn> Ruby has them built in too, and it clocks in at 7.69s

[17:04] <sena_kun> still not beats a 3.12 on vanilla 03.

[17:05] <jnthn> Indeed, I wasn't expecting that

[17:09] <jnthn> Found a faster way to write it in Perl 5, which gets it down to 2.1s for the 100,000 iterations

[17:13] <jnthn> 3m27s for the ten million iterations

[17:18] <jnthn> dinner &

[17:29] *** robertle joined
[17:31] *** patrickb joined
[17:33] *** brrt joined
[18:18] *** Kaiepi left
[18:18] *** Kaiepi joined
[18:20] *** domidumont left
[18:24] *** MasterDuke left
[18:29] *** MasterDuke joined
[18:29] *** MasterDuke left
[18:29] *** MasterDuke joined
[18:33] <timotimo> wow

[19:04] <MasterDuke> timotimo: any opinion on https://github.com/MoarVM/MoarVM/pull/1111 ? ok as is? if so, wait until after the next release to merge?

[19:08] *** squashable6 left
[19:11] *** squashable6 joined
[19:16] <timotimo> i'm not actually sure if the results are totally correct

[19:16] <timotimo> i mean i don't see why the code would be wrong, either. not that i have spent a lot of time looking at it

[19:17] *** brrt left
[19:18] <MasterDuke> i haven't found out a good way to do any sort of deterministic before/after comparison

[19:18] <timotimo> yeah :(

[20:11] *** robertle left
[20:25] *** brrt joined
[20:28] <brrt> jnthn: haven't had the chance to debug it yet

[20:34] <jnthn> brrt: No worries, it may well be smart to merge that after this month's release anyway :) So if it takes some days to get around to it, no worries.

[21:33] *** AlexDaniel left
[21:44] *** AlexDaniel joined
[22:11] *** brrt left
[22:21] *** AlexDaniel left
[22:39] *** patrickb left
[23:57] *** sena_kun left
