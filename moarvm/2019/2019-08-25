[08:10] <Geth> Â¦ MoarVM/master: 4 commits pushed by ZhongnianTao++, (Samantha McVey)++

[08:10] <Geth> Â¦ MoarVM/master: 986f340384 | Add GB18030 encode, decode and decodestream support

[08:10] <Geth> Â¦ MoarVM/master: 8211189c4d | Add the reference of GB18030

[08:10] <Geth> Â¦ MoarVM/master: d13db417b5 | Update format changes

[08:10] <Geth> Â¦ MoarVM/master: ae5a385e88 | Merge pull request #1160 from ZhongnianTao/master

[08:10] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/3e715b424e3e...ae5a385e88d9

[13:20] *** lucasb joined
[13:55] <Geth> Â¦ MoarVM: d24f6952b3 | (Deven T. Corzine)++ | 3rdparty/dyncall

[13:55] <Geth> Â¦ MoarVM: Use updated dyncall library with "execstack" fix.

[13:55] <Geth> Â¦ MoarVM:

[13:55] <Geth> Â¦ MoarVM: The following bugs relate to the "execstack" flag being set on MoarVM,

[13:55] <Geth> Â¦ MoarVM: even though executable stacks weren't actually needed:

[13:55] <Geth> Â¦ MoarVM:

[13:55] <Geth> Â¦ MoarVM:      https://github.com/MoarVM/MoarVM/issues/470

[13:55] <Geth> Â¦ MoarVM:      https://github.com/MoarVM/MoarVM/issues/794

[13:55] <Geth> Â¦ MoarVM: <â€¦commit message has 18 more linesâ€¦>

[13:55] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d24f6952b3

[13:55] <Geth> Â¦ MoarVM: e54cf70d18 | (Jonathan Worthington)++ (committed using GitHub Web editor) | 3rdparty/dyncall

[13:55] <Geth> Â¦ MoarVM: Merge pull request #1157 from deven/execstack

[13:55] <Geth> Â¦ MoarVM:

[13:55] <Geth> Â¦ MoarVM: Use updated dyncall library with "execstack" fix.

[13:55] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e54cf70d18

[13:55] *** Kaiepi left
[14:46] *** brrt joined
[15:32] <brrt> \o

[15:41] <Geth> Â¦ MoarVM: samcv assigned to ZhongnianTao Issue gb2313 clang warnings https://github.com/MoarVM/MoarVM/issues/1163

[15:41] <Geth> Â¦ MoarVM: samcv self-assigned gb2313 clang warnings https://github.com/MoarVM/MoarVM/issues/1163

[15:53] *** Kaiepi joined
[16:18] *** brrt left
[16:20] <nwc10> o/

[16:35] <dogbert17> hi nwc10

[16:35] <dogbert17> not very much happening here atm it seems

[16:44] <dogbert17> interesting, two, seemingly unrelated, bug reports crashes in the exact same place

[16:45] <dogbert17> M#3114 and M#3115

[16:48] <dogbert17> hmm

[16:51] *** brrt joined
[17:00] *** pamplemousse joined
[17:22] *** bisectable6 left
[17:22] *** evalable6 left
[17:23] *** pamplemousse left
[17:23] *** bisectable6 joined
[17:26] *** evalable6 joined
[17:29] *** committable6 left
[17:30] *** chloekek joined
[17:31] *** committable6 joined
[17:48] *** domidumont joined
[18:23] *** brrt left
[18:26] <Kaiepi> there's this weird bug in the code i'm working on that doesn't seem to be related to what i'm doing

[18:27] <Kaiepi> you can initialize an async udp socket just fine and create an MVMOSHandle repr for it, but when you try passing it to MVM_io_socket_async_write_bytes_to, it ends up with a zeroed out struct instead

[18:28] <Kaiepi> i'm pretty sure i'm not overwriting it myself

[18:32] <timotimo> have you ever tried rr?

[18:33] <timotimo> it's possible that you're forgetting to mark the pointer to the MVMOSHandle

[18:33] <timotimo> and the GC is clearing out the memory where the struct used to live

[18:33] <timotimo> and the pointer you're following is out of date

[18:33] <timotimo> just a theory

[18:46] *** bisectable6 left
[18:51] *** bisectable6 joined
[18:51] <Kaiepi> rr timotimo?

[18:52] <timotimo> yeah, it lets you play your program execution backwards

[18:52] <timotimo> which is a good combination with watchpoints

[18:52] <timotimo> but i guess if your situation is easy to reproduce, you don't have to debug backwards

[18:53] <timotimo> you can just set the watchpoint as soon as the MVMOSHandle is created i guess

[19:44] *** pamplemousse joined
[20:40] *** domidumont left
[20:51] <dogbert17> .seen timotimo

[20:51] <tellable6> dogbert17, I saw timotimo 2019-08-25T20:12:01Z in #perl6: <timotimo> *shruuuuug*

[20:53] *** AlexDaniel left
[20:54] *** AlexDaniel joined
[20:54] *** AlexDaniel left
[20:54] *** AlexDaniel joined
[21:11] <dogbert17> any c-hackers around?

[21:23] <AlexDaniel> dogbert17: ehhhâ€¦ what's the question?

[21:46] <dogbert17> a stupid question really. Look at this function https://github.com/MoarVM/MoarVM/blob/master/src/spesh/inline.c#L191

[21:47] <dogbert17> the function is supposed to return an MVMint32 but the last line is 'return (MVMuint32)result;'. Why?

[21:49] * AlexDaniel squints

[21:49] <jnthn> dogbert17: Hm, that return type should probably be MVMuint32; there's even code there to ensrue it can't be negative.

[21:49] <dogbert17> aha

[21:50] <dogbert17> I just reported that I belive there's a bug in the commit which introduced that function. Perhaps the return type is the problem.

[21:50] <dogbert17> *believe

[21:51] <AlexDaniel> looking at what calls it, it's uint throughout, so yeah, seems like a typo

[21:52] <dogbert17> AlexDaniel: I suspect that this commit, https://github.com/MoarVM/MoarVM/commit/50c76e211f2702ee2868ec718a03b9022c21f13b, is 'partly' responsble for M#3114

[21:53] <AlexDaniel> dogbert17: nah I doubt the return type is the cause

[21:53] <jnthn> dogbert17: Unfortunately, only in so far as it permits more inlining.

[21:53] <jnthn> dogbert17: Meaning it just exposed something that could have happened differently anyway.

[21:54] <jnthn> releasable6: status

[21:54] <releasable6> jnthn, Next release in â‰ˆ26 days and â‰ˆ21 hours. R6 is down. At least 7 blockers. Unknown changelog format

[21:54] <releasable6> jnthn, Details: https://gist.github.com/9d95b02ac7e8659e7187f068bd103f8b

[21:54] <jnthn> Ah, no immediate stress to hunt it down :)

[21:54] <AlexDaniel> jnthn: we were aiming at 1st of September, but I don't know if that's happening

[21:54] <dogbert17> ok, still I'm quite certain that the commit introduced a SEGV

[21:55] <AlexDaniel> well, it's unlikely to happen, because I don't feel like doing release prep this weekâ€¦

[21:56] <jnthn> Ah, and this issue is already in the blocker list

[21:56] <jnthn> So I can find it when glancing at those

[21:56] <dogbert17> that's AlexDaniels fault :-)

[21:56] <jnthn> It's convenient, it's one less thing I have to separately remember :)

[21:56] <AlexDaniel> yeah, I marked it, because pure perl6 code causing a segfault is a big no-no in my book

[21:57] <AlexDaniel> especially at the size of that gist

[21:57] <AlexDaniel> but I didn't know at the time it was a regression that we missed :)

[21:59] <AlexDaniel> at some point I used to write scripts with segfaults in mind, i.e. a loop that simply restarts everything and the program picks up the work from where it was dropped on the floor

[21:59] <dogbert17> the SEGV happens here: https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L3988

[22:00] <AlexDaniel> I don't do that anymore because rakudo no longer does that as often

[22:00] <dogbert17> it's definitely getting very hard to find bugs in MoarVM :)

[22:01] <AlexDaniel> actually, pretty much never for scripts that I haveâ€¦ but that gist by jmerelo is really bad :D

[22:02] <dogbert17> there's another SEGV that fails on the exact same line

[22:03] <AlexDaniel> dogbert17: well, previously bugs used to find me :) Stuff like this ticket: https://github.com/perl6/whateverable/issues/24

[22:04] <AlexDaniel> in 3 days it'll be one year with no updates on that ticket, i.e. no new issues

[22:04] <AlexDaniel> bisectable6: uptime

[22:04] <bisectable6> AlexDaniel, 3 hours, 18 minutes, and 6 seconds, 218.886719MiB maxrss. This is Rakudo version 2019.07.1-94-gd1f9d2848 built on MoarVM version 2019.07.1-50-gb614a7b4d implementing Perl 6.d.

[22:04] <AlexDaniel> and that's on almost the latest rakudo version :)

[22:07] <AlexDaniel> dogbert17: btw we should point some static program analyzer on moarvm's code

[22:07] <AlexDaniel> dogbert17: I'd expect it to find issues like the one you mentioned

[22:08] <dogbert17> I run cppcheck from time to time

[22:08] <MasterDuke> AlexDaniel: one (some?) are already run, but not everybody has access to the output

[22:08] <AlexDaniel> MasterDuke: I see

[22:08] <MasterDuke> i don't remember which one it is. coverity maybe? i think timotimo knows

[22:09] <dogbert17> it's coverity

[22:09] <timotimo> yes

[22:09] <timotimo> https://scan.coverity.com/projects/paultcochrane-moarvm?tab=overview

[22:10] <MasterDuke> what's the one that occasionally does free scans on FOSS software and posts writups? something like viva64 maybe? or does it start with a 'p'?

[22:10] <AlexDaniel> looks like you can also get pvs-studio for one year: https://www.viva64.com/en/open-source-license/

[22:10] <MasterDuke> ah, that's what i was thinking of

[22:10] <AlexDaniel> MasterDuke: that's pvs-studio

[22:12] <dogbert17> it looks as if the last scan was done in May last year ...

[22:12] *** chloekek left
[22:14] <MasterDuke> while people are around, https://github.com/MoarVM/MoarVM/pull/1162 is pretty simple, anyone mind if i merge it?

[22:17] <AlexDaniel> MasterDuke: this stuff makes me wonder why it wasn't done before

[22:17] <AlexDaniel> MasterDuke: also, if you merge now I'll bump right away

[22:17] <AlexDaniel> :)

[22:17] <Geth> Â¦ MoarVM: 10404ee5a8 | (Daniel Green)++ | src/jit/graph.c

[22:17] <Geth> Â¦ MoarVM: Jit some num ops

[22:17] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/10404ee5a8

[22:17] <Geth> Â¦ MoarVM: a9b44444dd | MasterDuke17++ (committed using GitHub Web editor) | src/jit/graph.c

[22:17] <Geth> Â¦ MoarVM: Merge pull request #1162 from MasterDuke17/jit_some_num_ops

[22:17] <Geth> Â¦ MoarVM:

[22:17] <Geth> Â¦ MoarVM: Jit some num ops

[22:17] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a9b44444dd

[22:18] <MasterDuke> yeah, i was a little surprised

[22:18] <AlexDaniel> wow, what a sha

[22:19] <jnthn> Just glanced over it; it was indeed an easier review than I expected. :)

[22:19] <jnthn> rest time o/

[22:34] *** pamplemousse left
[23:09] *** lucasb left
[23:52] *** Kaiepi left
