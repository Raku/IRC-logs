[01:04] *** evalable6 joined
[01:05] *** p6bannerbot sets mode: +v evalable6

[03:53] * japhb just donated to the Perl 6 Core Development Fund earmarked for MoarVM & Rakudo work.  Hopefully there are still some active grants, or will be more soon.  :-)

[05:06] <AlexDaniel> japhb++

[05:08] <AlexDaniel> yeah, there was this exciting proposal recently: http://news.perlfoundation.org/2018/12/grant-proposal-improve-perl-6-.html

[05:09] <AlexDaniel> I'm kinda hoping that Kaiepi will do the same wonderful things to networking that samcv did for unicode support :)

[05:30] *** Ven`` joined
[05:30] *** p6bannerbot sets mode: +v Ven``

[05:36] *** Ven`` left
[12:21] *** leont joined
[12:21] *** p6bannerbot sets mode: +v leont

[14:01] *** Ven`` joined
[14:01] *** p6bannerbot sets mode: +v Ven``

[14:03] *** domidumont joined
[14:04] *** p6bannerbot sets mode: +v domidumont

[14:19] <timotimo> so jnthn, i've looked briefly into why sub a(--> int) { 42 } being called in a for loop is slower than without the type annotation, and i think perhaps it has something to do with the fact that the log shows only one empty type tuple for the calling frame; i thought the return type was also supposed to be logged, but perhaps some intersection of native return and sinking is causing trouble?! in any case,

[14:19] <timotimo> slowness comes from 2x sp_speshresolve being left in the specialized version of a

[14:19] <timotimo> an idea what i should look into?

[14:19] <timotimo> the performance regression was bisected to a moarvm bump that has the "log return types in the caller's frame" change to spesh logging

[14:23] <jnthn> timotimo: Yes, I'd already mentioned it was due to unresolved spesh plugins on the ticket. And that is in turn because it's making a certain specialization, not an observed type one. Question is why it's doing that.

[14:24] <timotimo> d'oh, that makes sense

[14:25] <timotimo> i managed to miss the reply on the ticket :|

[14:27] <jnthn> I guess if there are only 3 MoarVM commits in the bump, working out which one did it should be easy enough

[14:27] *** Ven`` left
[14:28] <timotimo> well, "don't do worthless type specializations" sounds a lot like "this could be why it does a certain specialization only"

[14:28] <timotimo> so, some ops not having :specializable could be a thing

[14:29] * timotimo has a quick look

[14:30] <jnthn> afk for a bit, probably going to rest today and get back into things from tomorrow :)

[14:30] <timotimo> well, speshresolve is the one obvious one but it's already marked specializable

[14:30] <timotimo> so there are definitely specializable ops in there

[14:31] <timotimo> aha

[14:31] <timotimo> "the body contains no specializable instructions", eh?

[14:32] *** Ven`` joined
[14:32] *** p6bannerbot sets mode: +v Ven``

[14:44] <timotimo> i have a thought

[14:45] <timotimo> speshresolve is part of a sequence, and the check for a spesh-able instruction doesn't seem to be triggered for those

[15:04] <Geth> Â¦ MoarVM: 473324ee38 | (Timo Paulssen)++ | src/core/validation.c

[15:04] <Geth> Â¦ MoarVM: Notice Specializable Instructions Everywhere In Bytecode

[15:04] <Geth> Â¦ MoarVM:

[15:04] <Geth> Â¦ MoarVM: otherwise extremely simple frames will end up not

[15:04] <Geth> Â¦ MoarVM: getting their spesh plugins specialized, for example

[15:04] <Geth> Â¦ MoarVM:

[15:04] <Geth> Â¦ MoarVM:     sub a(--> Int:D) { 42 }; for ^100_000 { a }

[15:04] <Geth> Â¦ MoarVM:

[15:04] <Geth> Â¦ MoarVM: Fixes rakudo/rakudo#2573

[15:04] <synopsebot> RAKUDO#2573 [closed]: https://github.com/rakudo/rakudo/issues/2573 [audit entire codebase for such issues][consistency] Adding a return type slows execution down

[15:04] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/473324ee38

[15:08] <timotimo> funny that this would only ever really show differences in frames so small they could mostly only be part of microbenchmarks :D

[15:17] <jnthn> And even there, zero-parameter frames are somewhat unusual :)

[15:17] <jnthn> timotimo++

[15:19] *** domidumont left
[15:20] *** domidumont joined
[15:20] *** p6bannerbot sets mode: +v domidumont

[15:21] <dogbert11> under what circumstances, if any, can you expect to get the following message: continuationinvoke expects an MVMContinuation

[15:22] *** domidumont left
[15:22] <dogbert11> the triggering code is located here: https://github.com/MoarVM/MoarVM/blob/master/src/core/continuation.c#L150

[15:24] <dogbert11> I get it when running https://github.com/perl6/roast/blob/master/MISC/bug-coverage-stress-6.d.t on an RPi 2

[15:25] <timotimo> were you able to get the actual REPR and debug_name of the object it got?

[15:26] <dogbert11> yes, it was a 5, I believe that is P6Opaque

[15:27] <dogbert11> it doesn't happen every time

[15:28] <timotimo> "a 5"? :)

[15:28] <timotimo> like the integer 5?

[15:28] <dogbert11> like this: (gdb) p REPR(cont)->ID

[15:28] <dogbert11> $1 = 5

[15:29] <dogbert11> the expected value is 27

[15:30] <timotimo> oh

[15:30] <timotimo> well, REPR(cont)->name could also be good :)

[15:30] <dogbert11> aha, good to know

[15:30] <timotimo> and MVM_6model_get_debug_name(cont) is also good

[15:30] <timotimo> and perhaps it's a container and you can look into it with MVM_dump_p6opaque

[15:31] <timotimo> (which sometimes crashes)

[15:31] <dogbert11> aha, let me connect my RPi 2 again and retest

[15:34] <dogbert11> I must be missing something here: (gdb) p MVM_dump_p6opaque(cont)

[15:34] <dogbert11> Too few arguments in function call.

[15:35] <timotimo> may need tc first

[15:35] <dogbert11> yeah, thx: Scalar.new(#`(from Scalar) $!descriptor=ContainerDescriptor.new(#`(from ContainerDescriptor) $!of=(Mu), $!name='$continuation', $!default=(Any), $!dynamic=0), $!value=(Any))

[15:35] <timotimo> ok, so if this output is to be believed, it has nothing in it

[15:36] <dogbert11> which is suspecious

[15:36] <dogbert11> bad spelling, sigh

[15:37] <dogbert11> would running with --ll-exception help

[15:37] <timotimo> suspeshious

[15:37] <timotimo> probably not, you'll usually get the same from MVM_dump_backtrace

[15:39] *** lucasb joined
[15:39] *** p6bannerbot sets mode: +v lucasb

[15:40] <dogbert11> timotimo: https://gist.github.com/dogbert17/fccc667f6b7dd390802acd293c28f16a

[15:41] <timotimo> it'd be more helpful if we could figure out where this value came from

[15:41] <timotimo> which is hard without something like rr

[15:41] <timotimo> does rr run on a raspi2?

[15:41] <dogbert11> don't know although I suspect that it doesn't

[15:42] <dogbert11> I guess it would be better if I managed to replicate this under Linux but as of yet I haven't been able to

[15:43] *** domidumont joined
[15:44] *** p6bannerbot sets mode: +v domidumont

[15:44] <timotimo> true

[15:46] *** robertle joined
[15:47] *** p6bannerbot sets mode: +v robertle

[15:50] <dogbert11> doesn't fail on Linux. It's getting really hard to find bugs in MoarVM but I guess that's a good thing :)

[16:12] *** leont left
[17:07] *** Ven` joined
[17:08] *** p6bannerbot sets mode: +v Ven`

[17:13] *** Ven` left
[17:49] *** lucasb left
[18:50] *** zakharyas joined
[18:51] *** p6bannerbot sets mode: +v zakharyas

[19:04] *** leont joined
[19:04] *** p6bannerbot sets mode: +v leont

[19:08] *** lizmat left
[20:12] *** domidumont left
[20:25] *** Kaiepi joined
[20:25] *** p6bannerbot sets mode: +v Kaiepi

[20:34] *** Kaiepi left
[20:35] *** Kaiepi joined
[20:36] *** p6bannerbot sets mode: +v Kaiepi

[20:47] *** lizmat joined
[20:47] *** p6bannerbot sets mode: +v lizmat

[21:09] *** zakharyas left
[22:29] *** Ven`` left
