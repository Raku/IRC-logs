[00:05] <Geth> Â¦ MoarVM: ugexe++ created pull request #1082: Add fileno_fh legojit and exprjit template

[00:05] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1082

[00:08] <timotimo> ah i found the cause of the 0% jittage

[00:15] <Geth> Â¦ MoarVM: 38252329ed | (Timo Paulssen)++ | src/profiler/heapsnapshot.c

[00:15] <Geth> Â¦ MoarVM: Heapsnapshot: properly handle empty debug name

[00:15] <Geth> Â¦ MoarVM:

[00:15] <Geth> Â¦ MoarVM: the code was expecting empty debug names to

[00:15] <Geth> Â¦ MoarVM: be returned as null pointers, but the debug

[00:15] <Geth> Â¦ MoarVM: name API returns those as empty strings instead

[00:15] <Geth> Â¦ MoarVM: so that no null pointer checks are necessary.

[00:15] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/38252329ed

[00:15] <Geth> Â¦ MoarVM: bacfcf96e2 | (Timo Paulssen)++ | src/6model/reprs/CStruct.c

[00:15] <Geth> Â¦ MoarVM: Heapsnapshot: Calculate CStruct unmanaged size

[00:15] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bacfcf96e2

[00:15] <Geth> Â¦ MoarVM: 3934160407 | (Timo Paulssen)++ | src/jit/core_templates.expr

[00:15] <Geth> Â¦ MoarVM: exprjit/profiler: fix enters not showing up as jitted

[00:15] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3934160407

[00:16] <timotimo> MasterDuke: ^- that snuck through, i should probably have noticed that sooner :)

[00:17] <timotimo> ah, dang, it had just made it into the release

[00:30] *** Kaiepi left
[00:30] *** Kaiepi joined
[01:34] *** lucasb left
[01:40] <Geth> Â¦ MoarVM: ugexe++ created pull request #1083: Add decodeconf legojit

[01:40] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1083

[02:05] <Geth> Â¦ MoarVM: ugexe++ created pull request #1084: Add istty_fh legojit

[02:05] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1084

[02:23] <ugexe> fwiw i can create one PR if requested. i didnt originally plan on going through this many

[03:20] <ugexe> i jitted backtrace and backtrace strings, but then using `from-json` (which usually generates 1 deprecation) generates 2 deprecations if i call from-json 10000 times instead of 1000

[03:21] <ugexe> Block <unit> (from unknown) seen at:

[03:21] <ugexe> Sub from-json (from GLOBAL) seen at:

[03:22] <ugexe> both with the same message: "Please use JSON::Fast, JSON::Tiny or JSON::Pretty from https://modules.perl6.org/ instead."

[03:28] <ugexe> ah i take it back, that happens even without that change

[03:29] <ugexe> still, wonder what causes that

[03:45] <MasterDuke> timotimo++ MasterDuke--

[03:50] <Geth> Â¦ MoarVM: ugexe++ created pull request #1085: Add backtrace and backtracestrings lego and exprjit template

[03:50] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1085

[05:49] *** notable6 left
[05:49] *** unicodable6 left
[05:49] *** statisfiable6 left
[05:49] *** evalable6 left
[05:49] *** bisectable6 left
[05:49] *** benchable6 left
[05:49] *** greppable6 left
[05:49] *** committable6 left
[05:49] *** undersightable6 left
[05:49] *** releasable6 left
[05:49] *** nativecallable6 left
[05:49] *** bloatable6 left
[05:49] *** squashable6 left
[05:49] *** reportable6 left
[05:49] *** quotable6 left
[05:49] *** coverable6 left
[05:49] *** shareable6 left
[05:49] *** committable6 joined
[05:49] *** releasable6 joined
[05:49] *** bisectable6 joined
[05:50] *** greppable6 joined
[05:50] *** benchable6 joined
[05:50] *** unicodable6 joined
[05:50] *** squashable6 joined
[05:50] *** notable6 joined
[05:50] *** evalable6 joined
[05:50] *** coverable6 joined
[05:51] *** shareable6 joined
[05:52] *** undersightable6 joined
[05:52] *** quotable6 joined
[05:52] *** bloatable6 joined
[05:53] *** statisfiable6 joined
[05:53] *** nativecallable6 joined
[05:54] *** reportable6 joined
[09:33] *** zakharyas joined
[10:17] *** zakharyas left
[12:17] *** Kaiepi left
[12:18] *** Kaiepi joined
[12:21] *** tadzik left
[12:27] *** tadzik joined
[13:31] *** lucasb joined
[15:27] *** Kaiepi left
[15:27] *** Kaiepi joined
[15:36] <dogbert17> it's possible to make t/04-nativecall/06-struct.t crash ~100% of the time if the nursery is made smaller

[15:37] <dogbert17> perhaps something for nine? https://gist.github.com/dogbert17/390209116dbc0ef3efd5755659ccc38e

[15:41] <timotimo> that's the "CArray embedded in CStruct will cause an incorrect free" thing

[15:42] <timotimo> you can tell by looking at what frees and what allocated; CArray tries to free, CStruct did the allocation of the pointer that's 4 bytes past the beginning

[15:43] <dogbert17> a known problem?

[15:44] <timotimo> aye

[15:44] <timotimo> i should really have started on this much earlier

[15:45] <timotimo> well, that makes it sound like i've actually already started on it

[15:45] <dogbert17> :)

[15:46] <dogbert17> is it an easy or difficult fix?

[15:48] <timotimo> well, a simple fix shouldn't be all that hard, but it'd be great to have something Very Good instead

[15:49] <dogbert17> and that is Very Hard I presume

[15:52] <timotimo> implementing it would probably still be easy. just not coming up with what the right way is :)

[16:02] <dogbert17> sounds a bit like finding a good name to a variable or method, sometimes that can be incredibly difficult

[16:08] <timotimo> aye

[16:09] <timotimo> i like how the :$foo shortcut sometimes makes it trivial to come up with "the right name" for a thing in your code

[16:09] <timotimo> because you can more easily pass it that way

[16:29] *** scovit_ left
[16:30] *** scovit joined
[17:00] *** patrickb joined
[18:39] *** domidumont joined
[20:19] *** domidumont left
[23:01] *** lucasb left
