[02:30] *** lucasb left
[04:38] *** pamplemousse joined
[06:41] *** domidumont joined
[06:45] <pamplemousse> I've posted a progress update on the linker: https://yakshavingcream.blogspot.com/2019/07/flags-and-syscalls-and-modules-oh-my.html

[06:45] <pamplemousse> Now, to generate and run the executable, all you have to do is perl6 --compile=foo foo.pl6; ./foo

[07:02] <moritz> that's pretty cool!

[07:07] *** pamplemousse left
[07:37] *** patrickb joined
[07:44] *** zakharyas joined
[08:15] *** nebuchadnezzar left
[08:15] *** nebuchadnezzar joined
[09:03] *** AlexDaniel left
[09:10] <Geth> ¦ MoarVM: ZhongnianTao++ created pull request #1147: Add gb2312 encode, decode, and decodestream support

[09:10] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1147

[09:17] <patrickb> Whoot!

[09:45] <jnthn> Wow, lots of cool GSoC things :)

[10:31] *** Kaiepi left
[10:50] *** sena_kun joined
[10:52] <timotimo> o/

[10:53] <timotimo> i kind of wish we could get away with pointing the perl6 -b at the bytecode in memory without having to write to a file first, but i have *no* clue how to do that right, or at all

[10:54] <timotimo> other than that, this is very exciting!

[10:59] <timotimo> i wonder if linking a library into the elf file will make "is native(Str)" work immediately? i.e. no need to extract the library to a file, no need to find the right filename? since the symbols are already in the elf that's being loaded? or is that different because we're feeding the bytecode to the perl6 binary with -b and that makes all the difference?

[11:15] *** cygx joined
[11:18] <cygx> timotimo: when I did my experiment of having a standalone nqp executable, I did it via a 'virtual file' registry

[11:18] <cygx> cf https://github.com/cygx/MoarVM/commit/2acfa3040251c049f68cbca2071987c87536fadc

[11:18] <cygx> never got it to work with the Rakudo setting, though

[11:19] <timotimo> mhh, that doesn't look bad actually

[11:19] <timotimo> but yeah somehow the core setting is really fiddly and i have no idea why?

[11:32] *** brrt joined
[11:32] <brrt> \o

[11:32] <brrt> timotimo: that is, in fact, one of the reasons I think an ELF-packed binary is so interesting

[11:34] *** zakharyas left
[11:35] <brrt> cygx: that looks pretty cool, but I (think) you could also use cu_from_bytes....

[11:35] <timotimo> well, now. maybe not back then ...

[11:37] <cygx> brrt: it does - the registry is there to translate from file names requested by the NQP module loader to buffers compiled into the executable

[11:40] <brrt> NQP module loader is different from the CU repo?

[11:40] <brrt> I see

[11:41] <cygx> the NQP module loader just looks for .moarvm files in the appropriate location

[11:41] <cygx> I hooked into that lookup at the moarvm level

[11:41] <cygx> seemed like the easiest approach at the time

[11:43] <brrt> I see

[11:43] <brrt> well, either way might work

[11:46] <brrt> I think pamplemousse++ has taken this both further and in a different direction than I had anticipated

[11:46] <brrt> and that's actually awesome...

[11:46] <brrt> because there's more than one way to do it :-D

[11:56] <timotimo> i wonder if we'll want to have -b as a short option available for the perl6 command

[11:56] <timotimo> also, it'd be fantastic if someone™ could put in support for multiple -e blocks. in fact, maybe this is the right spot to put -E

[11:56] <timotimo> i.e. -E means "this is a code block, but the stuff after it isn't arguments to the user's code, it's more perl6 arguments"

[12:17] <cygx> while we're making wishes, this might be something I'd like to have eventually: https://gist.github.com/cygx/ae6735ae9fb89633370787064c88b769

[12:18] <timotimo> yeah

[12:21] *** pamplemousse joined
[12:33] *** ggoebel joined
[12:34] <ggoebel> timotimo: regarding perl6 -b ... -I wonder if memfd_create could be used to write bytecode to memory and pass a file descriptor?

[12:35] *** AlexDaniel joined
[12:37] <brrt> pamplemousse++ very nice post

[12:37] <timotimo> possibly; for an early experiment you can try using /proc/self/fd/<num here> as the filename for -b to see if the file descriptor you get from memfd_create works right

[12:38] <timotimo> oh btw, we also have pl6anet.org, which is a place that pulls RSS feeds from a whole bunch of perl6 blogs together

[12:38] <timotimo> another good place to see what's being posted on all the blogs we have

[12:39] <pamplemousse> Nifty, good to know :)

[12:46] *** sena_kun left
[13:00] *** brrt left
[13:09] *** Kaiepi joined
[13:26] *** sena_kun joined
[13:32] *** pamplemousse left
[13:47] *** zakharyas joined
[13:51] *** brrt joined
[13:55] *** brrt left
[15:00] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/07/22/2019-29-released/

[15:15] *** sena_kun left
[15:55] *** patrickb left
[15:59] *** domidumont left
[16:07] <samcv> lizmat, my mentee has a blog post and PR now, though the blog post is not super detailed. i think due to less familiarity with english

[16:07] <samcv> so i may give that to you to post once he gets back to me about if he wants it posted (guessing answer will be yes)

[16:10] *** patrickb joined
[16:18] <lizmat> samcv: it will be in next week's P6W then, but yeah, all GSOC reports are very welcome!

[16:25] *** zakharyas left
[16:30] <Kaiepi> do i need a blog for grant work updates?

[16:37] <timotimo> not necessary, you can just have your grant manager post stuff you write per email to the perlfoundation blog

[16:52] *** pamplemousse joined
[17:07] <pamplemousse> lizmat++ #p6weekly

[17:09] *** domidumont joined
[17:27] *** patrickb left
[17:28] *** robertle joined
[17:30] *** patrickb joined
[17:38] <Geth> ¦ MoarVM: Altai-man++ created pull request #1148: Init debug socket for Windows

[17:38] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1148

[17:38] *** domidumont left
[17:54] <timotimo> definitely a candidate for the point release ^

[18:22] *** sena_kun joined
[19:18] *** sena_kun left
[19:19] *** sena_kun joined
[19:20] *** sena_kun left
[19:21] *** sena_kun joined
[19:28] *** sena_kun left
[20:02] <samcv> hmm why don't i see travis anymore on MVM pull requests

[20:02] <Geth> ¦ MoarVM: 7a0b5874e2 | Altai-man++ (committed using GitHub Web editor) | src/debug/debugserver.c

[20:02] <Geth> ¦ MoarVM: Init debug socket for Windows

[20:02] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7a0b5874e2

[20:02] <Geth> ¦ MoarVM: 682fbf4ea8 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/debug/debugserver.c

[20:02] <Geth> ¦ MoarVM: Merge pull request #1148 from Altai-man/patch-1

[20:02] <Geth> ¦ MoarVM:

[20:02] <Geth> ¦ MoarVM: Init debug socket for Windows

[20:02] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/682fbf4ea8

[20:03] <Geth> ¦ MoarVM/master: 7 commits pushed by ZhongnianTao++, (Samantha McVey)++

[20:03] <Geth> ¦ MoarVM/master: 73f28d386b | Add GB2312 encode, decode and decodestream support

[20:03] <Geth> ¦ MoarVM/master: 9213f2f02e | Fix duplicate includes

[20:03] <Geth> ¦ MoarVM/master: 75f1c965f5 | Fixed an overflow problem

[20:03] <Geth> ¦ MoarVM/master: 563ae540f5 | Decrease code complexity

[20:03] <Geth> ¦ MoarVM/master: fc56c02c5f | Use a decode_handler function for decodestream

[20:03] <Geth> ¦ MoarVM/master: 9e6abe4654 | Use a decode_handler function for decodestream

[20:03] <Geth> ¦ MoarVM/master: 6c59a76f97 | Merge pull request #1147 from ZhongnianTao/master

[20:03] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/682fbf4ea80e...6c59a76f978c

[20:03] <Geth> ¦ MoarVM: 87948fe782 | (Ben Davies)++ | Configure.pl

[20:03] <Geth> ¦ MoarVM: Only use -fno-ret-protector with Clang on OpenBSD if the JIT is enabled

[20:03] <Geth> ¦ MoarVM:

[20:03] <Geth> ¦ MoarVM: This flag is only needed to make the legojit work, every other part of

[20:03] <Geth> ¦ MoarVM: MoarVM works fine with RETGUARD enabled.

[20:03] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/87948fe782

[20:03] <Geth> ¦ MoarVM: d605648fe0 | (Jonathan Worthington)++ (committed using GitHub Web editor) | Configure.pl

[20:03] <Geth> ¦ MoarVM: Merge pull request #1146 from Kaiepi/openbsd

[20:03] <Geth> ¦ MoarVM:

[20:03] <Geth> ¦ MoarVM: Only use -fno-ret-protector with Clang on OpenBSD if the JIT is enabled

[20:03] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d605648fe0

[20:21] *** TimToady left
[20:25] *** pamplemousse left
[20:30] <Geth> ¦ MoarVM/2019.07.1: 8 commits pushed by (Ben Davies)++, (Stefan Seifert)++, (Jonathan Worthington)++, (Timo Paulssen)++, Altai-man++, (Samantha McVey)++

[20:30] <Geth> ¦ MoarVM/2019.07.1: e99af058bc | Fix pointer arithmetic in inlined CArrays in CStruct/CPPStruct REPRs

[20:30] <Geth> ¦ MoarVM/2019.07.1: 2501678a30 | Fix Configure.pl failing when --prefix /usr is passed

[20:30] <Geth> ¦ MoarVM/2019.07.1: 536cff8b9f | Put limits on local and inline counts for inlining

[20:30] <Geth> ¦ MoarVM/2019.07.1: 8f4997b367 | Fix dealloc profile logging

[20:30] <Geth> ¦ MoarVM/2019.07.1: df22633018 | confprog: add band_i, bor_i, bxor_i ops

[20:30] <Geth> ¦ MoarVM/2019.07.1: cfead8e2d9 | Only use -fno-ret-protector with Clang on OpenBSD if the JIT is enabled

[20:30] <Geth> ¦ MoarVM/2019.07.1: 052966bb8f | Init debug socket for Windows

[20:30] <Geth> ¦ MoarVM/2019.07.1: 81e30b4bc5 | Bump version for point release

[20:30] <Geth> ¦ MoarVM/2019.07.1: review: https://github.com/MoarVM/MoarVM/compare/e99af058bc40^...81e30b4bc562

[20:36] *** TimToady joined
[20:48] *** cygx left
[20:50] *** pamplemousse_ joined
[20:54] *** chloekek joined
[21:14] <AlexDaniel> samcv: nice! Leave it like this for a bit, I'll double check some things tomorrow

[21:15] *** robertle left
[21:17] *** lucasb joined
[21:21] *** AlexDaniel left
[21:22] *** pamplemousse_ left
[21:26] *** AlexDaniel joined
[22:08] *** patrickb left
[22:18] <samcv> AlexDaniel, +1

[22:20] *** ggoebel left
[22:25] *** pamplemousse_ joined
[22:27] *** patrickb joined
[22:28] *** chloekek left
[22:29] <samcv> before the second evaluation deadline i'm going to get a better blog posting from my mentee. I slacked a bit by not requiring formal blog posts, but he was making progress and i was somewhat busy :). Happy with how things are going overall though

[22:30] <jnthn> samcv: Was glad to see a PR on that today. Somebody filed a Cro issue last week or so mentioning about the missing encoding support. :)

[22:44] <patrickb> Hey! I'm currently struggling to figure out which header files I need to include on windows (using the Windows API). Locally stuff builds, but AppVeyor CI complains about not finding processthreadsapi.h and unkown BOOL.

[22:45] <patrickb> Any clues on how to check what is needed without many change-push-CI-check cycles?

[22:45] <AlexDaniel> (everyone who makes rakudo better on Windows)++

[22:46] <patrickb> I'm working on the perl6 runner programs.

[22:47] <jnthn> patrickb: I don't know off-hand, but are you locally and appveyor using the same toolchain?

[22:48] <jnthn> For example, if it's using the Visual Studio toolchain and you have mingw or something... In which case trying to build with whatever appveyor is would at least shorten the cycle

[22:48] <patrickb> both using the cl compiler

[22:49] <patrickb> I have 2019 and don't know what AppVeyor uses...

[22:49] <patrickb> Not true. 2017 is what I use

[23:00] <jnthn> Link to appveyor output?

[23:05] <patrickb> I have proceeded two more iterations by now.

[23:05] <patrickb> https://ci.appveyor.com/project/rakudo/rakudo/builds/26165729/job/n27q8wm43d101bb5

[23:06] <patrickb> That's the current one

[23:06] <patrickb> still in progress

[23:07] <patrickb> Got to testing. I guess I got through.

[23:08] <jnthn> Yeah, was gonna say, don't see the error you mentioned :)

[23:27] *** patrickb left
