[01:03] *** squashable6 left
[01:05] *** squashable6 joined
[01:12] *** squashable6 left
[01:14] *** squashable6 joined
[01:36] *** vrurg joined
[04:41] *** statisfiable6 left
[04:41] *** bloatable6 left
[04:41] *** unicodable6 left
[04:41] *** releasable6 left
[04:41] *** reportable6 left
[04:41] *** benchable6 left
[04:41] *** quotable6 left
[04:41] *** greppable6 left
[04:41] *** committable6 left
[04:41] *** squashable6 left
[04:41] *** coverable6 left
[04:41] *** nativecallable6 left
[04:41] *** shareable6 left
[04:41] *** notable6 left
[04:42] *** notable6 joined
[04:42] *** committable6 joined
[04:42] *** reportable6 joined
[04:43] *** evalable6 joined
[04:43] *** tellable6 joined
[04:43] *** releasable6 joined
[04:43] *** unicodable6 joined
[04:43] *** greppable6 joined
[04:43] *** quotable6 joined
[04:43] *** nativecallable6 joined
[04:44] *** benchable6 joined
[04:44] *** shareable6 joined
[04:44] *** squashable6 joined
[04:44] *** statisfiable6 joined
[04:44] *** coverable6 joined
[04:44] *** bloatable6 joined
[07:06] *** sena_kun joined
[09:05] *** robertle_ joined
[09:07] *** Altai-man_ joined
[09:09] *** sena_kun left
[10:06] *** patrickb joined
[10:31] *** vesper11 joined
[11:08] *** sena_kun joined
[11:10] *** Altai-man_ left
[13:07] *** Altai-man_ joined
[13:09] *** sena_kun left
[13:25] *** robertle_ left
[13:26] *** robertle_ joined
[14:03] *** AlexDaniel` joined
[14:11] *** lucasb joined
[15:08] *** sena_kun joined
[15:09] *** Altai-man_ left
[16:05] *** robertle_ left
[16:38] *** patrickb left
[17:07] *** Altai-man_ joined
[17:09] *** sena_kun left
[17:44] *** MasterDuke left
[17:50] <lucasb> moar? :)

[18:06] *** Altai-man_ left
[18:10] *** sena_kun joined
[18:11] *** sena_kun left
[18:14] *** patrickb joined
[18:29] *** sena_kun joined
[18:31] *** sena_kun left
[18:35] *** sena_kun joined
[18:36] *** sena_kun left
[18:43] *** vrurg left
[18:44] *** vrurg joined
[18:58] *** vrurg left
[18:58] *** vrurg joined
[19:23] *** squashable6 left
[19:25] *** squashable6 joined
[20:20] *** brrt joined
[20:24] <brrt> \o

[20:25] <brrt> (this is an invitation to spam me with jitbreakage)

[20:29] <brrt> no jitbreakage? hmmm

[20:42] *** MasterDuke joined
[21:10] <dogbert17> brrt: I'm not certain I have any atm

[21:11] <brrt> hehe

[21:11] <brrt> that's good

[21:15] <MasterDuke> but if you have any ideas of how to jit param_rn2_*...

[21:15] <brrt> ok, I'll explain the difficulty there

[21:16] <brrt> - on the one side, they tend to be evidence that we weren't able to sufficiently spesh this method.... and it's (so far) proven more worthwhile to figure out why that is, than to JIT them. that's also because...

[21:17] <brrt> - they rely on the interpreters' somwehat arcane logic for making sure that when the callee expects a native int, it gets a native int, even if e.g. the caller passed a string

[21:19] <brrt> N years in, I'm not super convinced that was a good design choice. It's not a bad one per se, and it fits the perl community's preference for TIMTWTDI, but if we had, say, exposed only object passing to the compiler, and implemented native value passing strictly as a specialization, I wonder if we'd have a better, simpler system

[21:19] <dogbert17> brrt: is this function work in progress? https://github.com/MoarVM/MoarVM/blob/master/src/6model/containers.c#L387

[21:19] <brrt> (either that, or if we had passed it to the caller's side, where I think it belongs logically)

[21:20] <MasterDuke> hm. any idea what's blocking them being speshed then?

[21:20] <brrt> dogbert17: idk, I didn't write them

[21:20] <dogbert17> aha

[21:21] <brrt> MasterDuke: they return a struct that holds a union of the result value, and whether or not it was present, and that's then used to dispatch to either an exception or a branch (for the _op_, _on_ variants)

[21:21] <dogbert17> it seems to be timotimo

[21:22] <dogbert17> or possibly one of his cats :)

[21:22] <brrt> and struct returning tends to differ a bit between compilers... or at least, it isn't as obviously well-specified as scalar

[21:23] <brrt> I think the common pattern is to have the lower bits on rax, and the upper bits in rcx

[21:23] <brrt> If I could find some evidence that this was actually what was specified and guaranteed, then I could move forward with implementing it. but I haven't found that evidence

[21:24] <MasterDuke> huh

[21:36] <dogbert17> There are a few places in the codebase where the result of uv_mutex_init isn't checked. Couldn't that be a problem?

[21:38] <brrt> I think it might. Can we handle the problem if it is?

[21:38] <brrt> (and if not, can we move the uv_mutex_init to a place where we can handle the problem?)

[21:38] *** patrickb left
[21:38] <dogbert17> where the return value is checked we abort

[21:38] <brrt> hmmm

[21:38] <brrt> that sucks

[21:39] <brrt> I think we should abort for internal errors only

[21:39] <dogbert17> aha, here's an example where we check: https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/ConcBlockingQueue.c#L27

[21:39] <brrt> yeah, that seems correct

[21:40] <brrt> constructing an object is not an obvious place to throw, but it is definitely not outside the realm of the possible

[21:40] <brrt> and an adhoc exception can be caught

[21:40] <brrt> an abort() cannot

[21:40] <dogbert17> my bad, I shouldn't have written abort

[21:41] <dogbert17> here's an example of not checking: https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/MVMCompUnit.c#L28

[21:42] <brrt> interestingly, we can't throw there

[21:43] <brrt> because it'd interfere with the temp-roots popping

[22:24] *** Kaiepi left
[22:24] *** Kaeipi joined
[23:09] *** brrt left
[23:51] *** lucasb left
