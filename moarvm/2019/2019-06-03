[00:39] *** sena_kun left
[00:54] *** ggoebel joined
[04:03] *** ggoebel left
[04:42] *** MasterDuke left
[05:14] *** robertle left
[05:44] *** domidumont joined
[05:50] *** domidumont left
[06:18] *** patrickb joined
[06:23] *** domidumont joined
[07:36] *** Woodi left
[07:36] *** Woodi joined
[07:41] *** nativecallable6 left
[07:41] *** undersightable6 left
[07:41] *** releasable6 left
[07:41] *** reportable6 left
[07:41] *** yoleaux left
[07:45] *** Geth left
[07:46] *** Geth joined
[07:47] *** kawaii left
[07:47] *** eater left
[07:50] *** Geth left
[07:51] *** Geth joined
[07:52] *** kawaii joined
[07:52] *** eater joined
[07:53] *** nativecallable6 joined
[07:53] *** releasable6 joined
[07:53] *** undersightable6 joined
[07:53] *** reportable6 joined
[07:53] *** yoleaux joined
[08:54] *** BinGOs left
[09:05] *** BinGOs joined
[10:22] *** zakharyas joined
[10:22] *** domidumont left
[11:21] <nwc10> good *, #moarvm

[11:32] *** zakharyas left
[11:57] *** pamplemousse joined
[11:58] <pamplemousse> \o

[11:59] <timotimo> o/

[12:20] *** domidumont joined
[12:25] *** domidumont1 joined
[12:28] *** domidumont left
[12:34] *** domidumont joined
[12:37] *** domidumont1 left
[12:42] *** kawaii left
[12:45] *** kawaii joined
[12:50] *** patrickb left
[12:52] *** patrickb joined
[13:00] *** patrickb left
[13:08] *** patrickb joined
[14:06] *** sena_kun joined
[14:17] *** patrickb left
[14:21] *** harrow joined
[14:35] *** pamplemousse left
[15:00] *** pamplemousse joined
[15:20] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/06/03/2019-22-when-steroids-are-a-given/

[15:33] <pamplemousse> Out of curiosity, is there anything in the compiler or maybe done during the configuration script that would store the endianness, the operating system, and the architecture of the system? If so, how can I access that information? If it's not being stored somewhere, I can definitely find it, but if there isn't a need to reinvent the wheel, I figure a solution that uses the already found information would be better.

[15:36] <jnthn> pamplemousse: Yes; if the info you want is in `nqp --show-config` then it's available

[15:36] *** robertle_ left
[15:36] <jnthn> I forget exactly how, but you can chase it down from how that option is implemented

[15:37] <pamplemousse> jnthn: Thanks! I'll take a look at it.

[17:07] *** robertle joined
[17:22] *** pamplemousse_ joined
[17:25] *** pamplemousse left
[17:41] *** domidumont left
[17:44] *** pamplemousse_ is now known as pamplemousse

[17:45] <pamplemousse> Unfortunately, that info wasn't included in 'nqp --show-config'

[18:04] *** AlexDaniel joined
[18:06] <pamplemousse> I can find it another way though! Thank you again for the suggestion

[20:15] *** nativecallable6 left
[20:15] *** undersightable6 left
[20:15] *** releasable6 left
[20:15] *** reportable6 left
[20:15] *** yoleaux left
[20:22] *** patrickb joined
[20:23] <patrickb> o/

[20:23] <patrickb> Any chance to get M#1108 merged today?

[20:23] <synopsebot> M#1108 [open]: https://github.com/MoarVM/MoarVM/pull/1108 Default to doing a non-relocatable build

[20:42] <lizmat> patrickb: perhaps jnthn is still around

[20:46] *** patrickb left
[20:53] *** patrickb joined
[20:56] <jnthn> patrickb: Did the defaulting to a relocatable one appear in a release previously, ooc?

[20:58] <jnthn> Left a comment on it also

[20:59] <jnthn> I guess we even if that flag did appear in one release, it's not that likely much will have come to depend on it...

[21:00] *** patrickb left
[21:01] *** pamplemousse left
[21:02] *** pamplemousse joined
[21:06] *** nativecallable6 joined
[21:06] *** pamplemousse left
[21:07] *** pamplemousse joined
[21:08] *** reportable6 joined
[21:08] *** releasable6 joined
[21:09] *** undersightable6 joined
[21:14] *** patrickb joined
[21:15] <patrickb> jnthn: There was a MoarVM release, but no Rakudo release.

[21:15] <patrickb> That's why I'd like to get the change in before 2019.06, so we don't change the behavior in a rakudo release, where it really matters.

[21:25] <patrickb> jnthn: Good point about the silent override. I changed the PR accordingly.

[21:29] *** pamplemousse left
[21:41] <Geth> ¦ MoarVM: b5172363be | (Patrick Böker)++ | Configure.pl

[21:41] <Geth> ¦ MoarVM: Default to doing a non-relocatable build

[21:41] <Geth> ¦ MoarVM:

[21:41] <Geth> ¦ MoarVM: Non relocatability is the more common case with less caveats.

[21:41] <Geth> ¦ MoarVM: Remove the --no-relocatable config, add --relocatable instead.

[21:41] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b5172363be

[21:41] <Geth> ¦ MoarVM: 5f29b094f0 | (Patrick Böker)++ | Configure.pl

[21:41] <Geth> ¦ MoarVM: Fail when being requested to do a relocatable build and we can't

[21:41] <Geth> ¦ MoarVM:

[21:41] <Geth> ¦ MoarVM: That's the case on AIX and OpenBSD at the moment.

[21:41] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5f29b094f0

[21:41] <Geth> ¦ MoarVM: e865f43df0 | (Jonathan Worthington)++ (committed using GitHub Web editor) | Configure.pl

[21:41] <Geth> ¦ MoarVM: Merge pull request #1108 from patzim/no-no-reloc

[21:41] <Geth> ¦ MoarVM:

[21:41] <Geth> ¦ MoarVM: Default to doing a non-relocatable build

[21:41] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e865f43df0

[21:41] <patrickb> Thanks!

[21:53] *** travis-ci joined
[21:53] <travis-ci> MoarVM build failed. Jonathan Worthington 'Merge pull request #1108 from patzim/no-no-reloc

[21:53] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/540964784 https://github.com/MoarVM/MoarVM/compare/c20f896f146e...e865f43df0ae

[21:53] *** travis-ci left
[22:04] *** yoleaux joined
[22:29] *** MasterDuke joined
[22:29] *** MasterDuke left
[22:29] *** MasterDuke joined
[22:42] <MasterDuke> timotimo: how much of an effect do you think removing the profiling overhead would have on the resulting profile?

[22:52] *** patrickb left
[22:53] <timotimo> the more very small routines there are, the stronger the effect would be, i guess

[22:55] <timotimo> well, the very small routines would also have to be called a lot, of course

[22:56] <timotimo> but tbh "identity" is by far the worst offender, and that ought to be fixed by spesh making it completely disappear and throwing out the enter/leave stuff as well

[23:00] <MasterDuke> timotimo: yeah, i was expecting a big difference in identity, but i'm not seeing it (big difference)

[23:00] <MasterDuke> did you look at the most recent patch? does it look reasonable?

[23:02] <timotimo> "last active 2 days ago", that's the right one?

[23:04] <MasterDuke> yep

[23:04] <timotimo> what kinds of values do you get in the profiling overhead variable?

[23:05] <MasterDuke> i think it was something like 170

[23:10] <timotimo> that doesn't seem like much

[23:10] <timotimo> that's not off by a thousand, is it?

[23:11] <timotimo> i.e. microseconds vs milliseconds or something?

[23:12] <MasterDuke> i don't think so. i do a thousand iterations, then divide the time they all took by a thousand

[23:15] <timotimo> i wonder if the C compiler does any silly optimizations inside that loop

[23:18] <MasterDuke> guess i could add an fprintf or something just to see if that makes a difference

[23:19] <timotimo> well, it's allowed to reorder instructions across function boundaries i'd expect, after inlining, that is

[23:20] <timotimo> how exactly do you check to see if it made a difference?

[23:20] <MasterDuke> if the number is much much higher?

[23:20] <timotimo> what number?

[23:20] <MasterDuke> overhead

[23:21] <timotimo> oh, i was refering to the whole thing, not just the e - s part

[23:21] <timotimo> like, in the final profile

[23:21] <MasterDuke> oh, what in the final profile?

[23:22] <timotimo> yeah

[23:23] <MasterDuke> ah, you mean how exactly do i see if removing the overhead makes a difference?

[23:23] <timotimo> that's it

[23:23] <MasterDuke> i was just eyeballing it. nothing seemed to change much. identity in particular had a pretty similar number

[23:24] <MasterDuke> i don't know of a way to get deterministic profiling results

[23:24] <timotimo> ok, so looking at the routines list to see if its inclusive/exclusive times change

[23:24] <MasterDuke> hm...maybe if i did a profile while running under callgrind it would be more deterministic?

[23:24] <MasterDuke> yeah

[23:32] <MasterDuke> huh, the profiles under callgrind are vastly different

[23:33] <MasterDuke> but not in any way that makes sense

[23:33] <timotimo> may be a good idea to turn spesh off or at least set it to blocking

[23:33] <timotimo> since valgrind emulates a single-core cpu

[23:33] <MasterDuke> yeah, just realized i forgot to do that

[23:37] <MasterDuke> now not so wildly different, in fact, not very different at all...

[23:42] <MasterDuke> timotimo: hm, should i really be leaving this else branch untouched? https://github.com/MoarVM/MoarVM/blob/master/src/profiler/instrument.c#L411-L414

[23:44] <MasterDuke> making it `box_i(tcpds->tc, (pcn->total_time - (pcn->total_entries * tcpds->tc->instance->profiling_overhead)) / 1000));` puts some crazy numbers in the exclusive column (identity is 368934881474152.5ms for instance)

[23:48] <timotimo> that'd be an underflow

[23:48] <timotimo> identity wouldn't have any successors

[23:48] <timotimo> but the time spent doing enter and exit isn't 100% on the caller or the callee side

[23:50] <MasterDuke> hm, so what should i do instead?

[23:56] *** sena_kun left
