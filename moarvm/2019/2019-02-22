[01:54] *** Kaiepi joined
[02:00] *** Kaiepi left
[02:26] *** AlexDani` joined
[02:28] *** AlexDaniel left
[03:13] *** MasterDuke joined
[03:13] *** MasterDuke left
[03:13] *** MasterDuke joined
[03:57] *** Kaiepi joined
[09:27] *** avar joined
[09:27] *** avar left
[09:27] *** avar joined
[10:15] *** harrow left
[10:23] *** harrow joined
[11:36] *** Kaiepi left
[12:25] *** lucasb joined
[12:35] *** dogbert2_ left
[13:26] <jnthn> Curious. I've got some code (huge $dayjob app) that explodes under --profile, inside of jumplist, which crazy input/num_labels. And when I dump the current frame's bytecode there's no jumplist in there at all

[13:26] <timotimo> sometimes dump_bytecode does get a tiny bit confused

[13:26] <timotimo> as to what it's finding

[13:27] <timotimo> like almost all my debug helpers, it's not absolutely precise

[13:27] <timotimo> i should start calling them â€˜debug "help"ersâ€™

[13:27] <lizmat> jnthn: i can sorta understand some mechanics behind that

[13:27] <jnthn> There's no spesh_cand, so in this case it seems likely that it's dumping the tc->cur_frame

[13:28] <timotimo> it's not 100% unlikely to have been a mis-aligned jump?

[13:28] <jnthn> Maybe that

[13:28] <jnthn> I wonder if we did a deopt just or something

[13:29] <jnthn> The crash is actually in CORE.setting code, for the thread pool scheduler

[13:29] <jnthn> Which I'd have thought many apps would hit

[13:31] <jnthn> This does seem to happen reliably every time

[13:31] <jnthn> Though taking forever to get to the crash point with deopt logs on

[13:31] <jnthn> Plus non-optimized build

[13:32] *** Kaiepi joined
[13:34] <timotimo> i may sound like a broken record by now, but you could try "rr record" for this :)

[13:34] <timotimo> oh!

[13:34] <timotimo> a brroken record!

[13:35] <jnthn> I had trouble getting it to ever work for me :(

[13:36] <jnthn> Oh, with MVM_SPESH_DISABLE=1 it doesn't segv

[13:37] <jnthn> So some profiler/spesh interaction perhaps

[13:37] <jnthn> Can disable both JIT and inlining and it still explodes

[13:38] <timotimo> there's a few cases still where the profiler can crash things; i think it's moarperf that gives me "invalid thread id in work pass"

[13:40] *** dogbert2_ joined
[13:40] <jnthn> MVM_SPESH_OSR_DISABLE=1 gets rid of the segv

[13:41] <jnthn> Oh, but then after some requests...

[13:41] <jnthn> Unhandled exception: Too many positionals passed; expected 0 arguments but got 1

[13:41] <jnthn>    at SETTING::src/core/ThreadPoolScheduler.pm6:860  (/home/jnthn/dev/MoarVM/install/share/perl6/runtime/CORE.setting.moarvm:)

[13:41] <jnthn> I think that was around the area it segv'd in before too

[13:51] <Geth> Â¦ MoarVM: 75d5bc6e03 | (Jonathan Worthington)++ | src/spesh/inline.c

[13:51] <Geth> Â¦ MoarVM: Fix memory leak in inlining

[13:51] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/75d5bc6e03

[13:51] <jnthn> At least ASAN found me that :)

[13:52] <jnthn> Alas, it has no more clues

[13:53] <jnthn> I won't look any further for now; just wanted to see if it was an easy fix, but it looks like "no"

[13:53] *** Kaiepi left
[14:36] <nine> Speaking of easy fixes.... any ideas for #2706? At least for fixes easier than getting to 100 % JIT coverage? :)

[14:51] *** AlexDani` is now known as AlexDaniel

[15:52] *** Kaiepi joined
[16:48] <Geth> Â¦ MoarVM/more-pea: b06ab8d908 | (Jonathan Worthington)++ | src/spesh/pea.c

[16:48] <Geth> Â¦ MoarVM/more-pea: Don't let proven guards block EA

[16:48] <Geth> Â¦ MoarVM/more-pea:

[16:48] <Geth> Â¦ MoarVM/more-pea: If a guard is going to go away if analysis succeeds, then don't let it

[16:48] <Geth> Â¦ MoarVM/more-pea: block further analysis of this object. This will be mostly applicable

[16:48] <Geth> Â¦ MoarVM/more-pea: when we start to scalar replace objects referenced by other replaced

[16:48] <Geth> Â¦ MoarVM/more-pea: objects.

[16:48] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/b06ab8d908

[16:48] <Geth> Â¦ MoarVM/more-pea: a9f0aa39ab | (Jonathan Worthington)++ | src/spesh/pea.c

[16:48] <Geth> Â¦ MoarVM/more-pea: Better fact propagation on tracked set/PHI

[16:48] <Geth> Â¦ MoarVM/more-pea:

[16:48] <Geth> Â¦ MoarVM/more-pea: Sometimes they're missing from the previous phase.

[16:48] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/a9f0aa39ab

[16:48] <Geth> Â¦ MoarVM/more-pea: b06ab8d908 | (Jonathan Worthington)++ | src/spesh/pea.c

[16:48] <Geth> Â¦ MoarVM/more-pea: Don't let proven guards block EA

[16:48] <Geth> Â¦ MoarVM/more-pea:

[16:48] <Geth> Â¦ MoarVM/more-pea: If a guard is going to go away if analysis succeeds, then don't let it

[16:49] <Geth> Â¦ MoarVM/more-pea: block further analysis of this object. This will be mostly applicable

[16:49] <Geth> Â¦ MoarVM/more-pea: when we start to scalar replace objects referenced by other replaced

[16:49] <Geth> Â¦ MoarVM/more-pea: objects.

[16:49] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/b06ab8d908

[16:49] <jnthn> huh, twice? :)

[16:49] <Geth> Â¦ MoarVM/more-pea: a9f0aa39ab | (Jonathan Worthington)++ | src/spesh/pea.c

[16:49] <Geth> Â¦ MoarVM/more-pea: Better fact propagation on tracked set/PHI

[16:49] <Geth> Â¦ MoarVM/more-pea:

[16:49] <Geth> Â¦ MoarVM/more-pea: Sometimes they're missing from the previous phase.

[16:49] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/a9f0aa39ab

[16:49] <Geth> Â¦ MoarVM/more-pea: 073331ce95 | (Jonathan Worthington)++ | src/spesh/pea.c

[16:49] <Geth> Â¦ MoarVM/more-pea: First steps towards transitive scalar replacement

[16:49] <Geth> Â¦ MoarVM/more-pea:

[16:49] <Geth> Â¦ MoarVM/more-pea: So far, in a program like:

[16:49] <Geth> Â¦ MoarVM/more-pea:

[16:49] <Geth> Â¦ MoarVM/more-pea:     my $x = 0e0;

[16:49] <Geth> Â¦ MoarVM/more-pea:     my $y = 4e2;

[16:49] <Geth> Â¦ MoarVM/more-pea:     for ^10_000_000 {

[16:49] <Geth> Â¦ MoarVM/more-pea: <â€¦commit message has 20 more linesâ€¦>

[16:49] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/073331ce95

[16:50] <jnthn> That last commit is the interesting one; the other two just break out some prep work to make it effective

[16:50] <jnthn> nine: Umm...what needs JITting for this to work out?

[16:50] <jnthn> nine: Can we only produce the specialized nativecall bodies if JIT is available, or is it not that simple

[16:54] <jnthn> Of course, 'cus of the things it doesn't do, it's utterly broken on non-toy programs still. :)

[16:58] <nwc10> jnthn: meaning it can't even bootstrap NQP yet?

[16:59] <jnthn> Haven't tried; if I do, I end up with no NQP :P

[16:59] <jnthn> (Without switching commit)

[16:59] <nine> jnthn: we already do that. The problem is with a JIT compiled nativeinvoke_o instructions. As with normal invocations, the JIT won't generate any code for arg_i instructions as spesh already knows in what WORK registers we can find the values. So optimize_getarg will replace the getarg_i with a simple set with the WORK register as the source. But sometimes the JIT compiler actually bails.

[17:00] <nine> Now we end up with arg_i instructions still there, but the getarg_i (for reading back rw values) already being removed.

[17:00] <nine> What optimize_getarg would need is to know whether JIT compilation of the frame will succeed or not, before we try to actually compile.

[17:03] <nine> Worse, at that point we don't even know the final look of the code we're trying to JIT compile yet. Further optimizations may very well remove impendiments, most notably those getarg_i instructions...

[17:03] <jnthn> Why can't the JIT of getarg transform getarg_i instead of doing it in the optimize phase?

[17:04] <nine> That may be the way out. Too bad we're losing set elimination that way

[17:04] <jnthn> I'm a bit confused about how this works. I'd kinda expected native rw things would be being passed native refs...

[17:05] <jnthn> And we'd perhaps dig an appropriate location out of those

[17:06] <nine> And maybe that's the real issue? Me actually not having a clue about how this native ref stuff works and instead building something that works...mostly

[17:07] <jnthn> A native ref is a safe reference to a native lexical, attribute, or array element, that holds the stuff to keep the target object alive and do the lookup within it

[17:08] <jnthn> The problem we will still have, though, is on width: if you declare a `my int $x` and pass it to a `int16 $foo is rw` is that allowed today?

[17:09] <nine> jnthn: this is the code for assembling the native sub body QAST: https://github.com/rakudo/rakudo/blob/master/lib/NativeCall.pm6#L330

[17:09] <nine> Probably explains what I do better than me trying to describe :)

[17:11] <nine> A sucky part is that we need to turn type objects into default values for parameters

[17:14] <jnthn> ah, I see...

[17:14] <jnthn>                 @assigns.push: QAST::Op.new(

[17:14] <jnthn>                     :op<assign>,

[17:14] <jnthn>                     QAST::Var.new(:scope<lexicalref>, :name($name)),

[17:14] <jnthn>                     QAST::Op.new(:op<getarg_i>, QAST::IVal.new(:value($args - 1))),

[17:14] <jnthn> That answers what I was wondering about

[17:15] <nine> So is there a way without a getarg_i?

[17:16] <jnthn> I can see why this is painful; we've not really considered the args buffer as being something you ever touch post-call...

[17:18] <jnthn> I wonder if we can introduce a argrw_i and argrw_n, that may only be used together with a nativeinvoke (check it in bytecode validation)

[17:18] <jnthn> Though...urgh

[17:18] <jnthn> That'll be SSA-horrid

[17:21] <jnthn> I think maybe move it to the JIT, keep track of what registers were used for the args, and then if getarg updates the same one, then eliminate it, otherwise make it into a set

[17:21] <jnthn> Where by "the same one" I mean "unversioned"

[17:22] <jnthn> Which if the code-gen is careful might also avoid the sets

[17:22] <jnthn> On the other hand...

[17:22] <jnthn> Maybe don't worry about the set elimination, and once this gets expr-JITted then maybe we can clean it up in the expr-JIT optimizer?

[17:24] <nine> Yeah, that's probably a good plan. I'd rather lose set elimination than inlining. Sets are only so expensive anyway. The real benefit will come once we can get rid of the native ref itself for inlined calls

[17:24] <jnthn> Indeed

[17:25] <jnthn> Wonder if I should handle that in the EA

[17:25] <jnthn> It's probably a fairly natural fit

[17:25] <jnthn> Oh, hmm...maybe not :)

[17:33] <jnthn> I guess the answer is "yes for positional and attribute ones, maybe we need to think through lexical ones a bit more"

[17:54] *** Kaiepi left
[18:06] <Geth> Â¦ MoarVM/more-pea: b585349d50 | (Jonathan Worthington)++ | 2 files

[18:06] <Geth> Â¦ MoarVM/more-pea: Deal with transitive escapes

[18:06] <Geth> Â¦ MoarVM/more-pea:

[18:06] <Geth> Â¦ MoarVM/more-pea: If object O1 is referenced by object O2, then make sure if O2 escapes

[18:06] <Geth> Â¦ MoarVM/more-pea: after we've considered O1's assignment into it, then O1 escapes too.

[18:06] <Geth> Â¦ MoarVM/more-pea: We'll revisit this when doing handling of partial escapes.

[18:06] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/b585349d50

[18:06] <jnthn> NQP builds/tests and Rakudo builds/tests with that, surprisingly enough

[18:06] <jnthn> I'm sure it's still not quite right in its deopt handling though

[18:07] <jnthn> Though I'm out of brane for that.

[18:12] <jnthn> Amazingly, it passes spectest with MVM_SPESH_BLOCKING=1 too

[18:12] <jnthn> So I'll have to look harder for a failing case

[18:15] <jnthn> Maybe NODELAY will find me one

[18:19] <jnthn> I think the materialization algo needs to become two-pass: first create all the objects and shove them in registers, and then write all of their attributes

[18:20] <jnthn> Then if we get the deopt materializations table right, so that it has entries for the replacement registers holding the trasitively escaped objects, it should all just work

[18:20] *** patrickb joined
[18:21] <jnthn> And this way we don't need any special handling of the transitive stuff in deopt beyond that (e.g. it doesn't have to care, jsut chug through the work)

[18:22] <jnthn> Annoyingly, spectest on NODELAY is also looking quote good; only two fails so far are the line numbers etc. ones busted by inlining

[18:22] <jnthn> So I probably have to work out a synthetic case

[18:22] <jnthn> Or blin :P

[18:26] <jnthn> OK, enough for now :) o/

[19:28] *** MasterDuke left
[19:50] *** Kaiepi joined
[21:40] <patrickb> o/

[21:41] <patrickb> Is it important for the moar executable to work without being installed? (Called in the installation directory?)

[21:42] <patrickb> I ask because in my relocatable branch that is not the case when moar is build relocatable, because it searches for libmoar.so in EXEC_PATH/../lib/libmoar.so

[21:43] <patrickb> I could build two executables: moar and moar-reloc and only copy moar-reloc during make install. Would that be acceptable?

[22:06] <timotimo> that ought to be fine. i don't think we ever use moar during build before it'd be installed

[22:06] <timotimo> (however, at one point we'll want to be able to build moar + nqp + rakudo before installing any one of them)

[22:19] <patrickb> hm...

[22:20] <timotimo> we've been hoping to get that for years, it wouldn't be a problem to have to wait for another year :)

[22:20] <timotimo> especially if we get relocateable rakudo for that

[22:31] <patrickb> Kaiepi: I got an OpenBSD VM running on my end and tried building and running moar.

[22:32] <Kaiepi> ok

[22:32] <patrickb> Kaiepi: The reloc branch worked out of the box.

[22:32] <Kaiepi> hm

[22:32] <Kaiepi> lemme try building it again

[22:32] <patrickb> Did you try to run the moar executable in the build directory or did you 'make install' and run the moar from there?

[22:32] <Kaiepi> make install

[22:33] <patrickb> hm. Then I'm sort of out of clues on what might be wrong...

[22:33] <patrickb> I do still have the OpenBSD VM running though ;-)

[22:34] <Kaiepi> ld.so: moar: can't load library 'libmoar.so'

[22:34] <Kaiepi> are you running -stable or -current?

[22:35] <patrickb> I downloaded the 6.4 ISO.

[22:35] <Kaiepi> -stable then

[22:35] <Kaiepi> what happens when you pkg_add libtommath and pass --has-libtommath to Configure.pl?

[22:36] <patrickb> will try

[22:36] <patrickb> can you do a `objdump -x moar` again?

[22:36] <patrickb> over here the dynamic section lists: "NEEDED      libmoar.so" and "RPATH       $ORIGIN/../lib"

[22:37] <Kaiepi> RUNPATH $ORIGIN/../lib and NEEDED libmoar.so are there

[22:39] <patrickb> and libmoar.so actually is located in ../lib relative to the executable, right?

[22:39] <patrickb> Did you compile with clang or gcc

[22:39] <patrickb> it picked clang on my system...

[22:40] <Kaiepi> i tried both

[22:40] <Kaiepi> libmoar.so isn't in lib

[22:40] <patrickb> huh?

[22:40] <patrickb> ok

[22:41] <Kaiepi> oh wait

[22:41] <Kaiepi> i'm forgetting it installs to /install when there's no prefix

[22:41] <Kaiepi> it's there

[22:41] <Kaiepi> yeah it works

[22:41] <patrickb> and you called the moar executable from that folder?

[22:42] <patrickb> it did?

[22:42] <Kaiepi> i wasn't earlier, i was calling it from the main folder

[22:42] <patrickb> Ah, that's what I thought.

[22:42] <patrickb> So it's working. Great!

[22:43] <patrickb> (Whoot! Now only finishing up mac and we are good to go!)

[22:43] <Kaiepi> :)

[22:43] <patrickb> Thank you!

[22:54] *** lucasb left
[23:07] *** Kaiepi left
[23:40] *** manchicken joined
[23:48] *** manchicken left
[23:52] *** manchicken joined
[23:59] *** manchicken left
