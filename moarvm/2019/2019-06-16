[00:46] *** lucasb left
[03:09] *** reportable6 left
[03:09] *** notable6 left
[03:09] *** benchable6 left
[03:09] *** bisectable6 left
[03:09] *** unicodable6 left
[03:09] *** nativecallable6 left
[03:09] *** shareable6 left
[03:09] *** squashable6 left
[03:09] *** coverable6 left
[03:09] *** undersightable6 left
[03:09] *** releasable6 left
[03:09] *** greppable6 left
[03:09] *** quotable6 left
[03:09] *** bloatable6 left
[03:09] *** statisfiable6 left
[03:09] *** evalable6 left
[03:09] *** committable6 left
[03:09] *** benchable6 joined
[03:10] *** shareable6 joined
[03:10] *** committable6 joined
[03:10] *** bloatable6 joined
[03:10] *** nativecallable6 joined
[03:10] *** undersightable6 joined
[03:10] *** statisfiable6 joined
[03:11] *** greppable6 joined
[03:11] *** notable6 joined
[03:11] *** unicodable6 joined
[03:12] *** releasable6 joined
[03:12] *** coverable6 joined
[03:12] *** squashable6 joined
[03:12] *** quotable6 joined
[03:12] *** reportable6 joined
[03:13] *** bisectable6 joined
[03:14] *** evalable6 joined
[05:50] *** robertle left
[08:09] *** sena_kun joined
[10:57] <lizmat> mornfall: you can use .tell to leave a message to pamplemousse

[10:59] <timotimo> maybe a comment on the blog post?

[10:59] <mornfall> lizmat: didn't think of that... i hoped their mentor might be around and relay the stuff if relevant

[10:59] <timotimo> iirc brrt's the mentor in question?

[11:00] <lizmat> mornfall: that could well happen, but .tell or leaving a comment in the post would ensure it doesn't fall through the cracks  :-)

[11:04] <mornfall> .tell pamplemousse feel free to poke me if you are interested in ELF executables that run stuff that's not machine code without mucking with _start (and dealing with the unportability of that)

[11:04] <yoleaux> mornfall: I'll pass your message to pamplemousse.

[11:33] <timotimo> i want an early version of confprog to land in rakudo for the upcoming release

[12:04] *** AlexDaniel left
[12:47] *** zakharyas joined
[14:04] *** zakharyas left
[14:38] *** AlexDaniel joined
[16:42] *** lucasb joined
[17:20] *** domidumont joined
[18:37] *** domidumont left
[18:46] *** ggoebel joined
[18:51] *** ggoebel left
[19:12] *** lucasb left
[19:48] *** pamplemousse joined
[19:50] *** brrt joined
[19:51] <brrt> \o

[19:51] <pamplemousse> o/

[19:51] <yoleaux> 11:04Z <mornfall> pamplemousse: feel free to poke me if you are interested in ELF executables that run stuff that's not machine code without mucking with _start (and dealing with the unportability of that)

[19:51] <brrt> .tell pamplemousse great post, very interesting

[19:51] <yoleaux> brrt: I'll pass your message to pamplemousse.

[19:52] <brrt> and ehm.... not sure I communicated this totally clearly, but I figured this would be a hard job, with no sure path to scucess

[19:52] <brrt> but everything you do learn is of course hugely helpful

[19:53] <brrt> but if I understand it correctly, you can pack an MBC in an ELF, but MoarVM isn't quite a loader yet, correct?

[19:54] <pamplemousse> brrt: Thanks! And yeah, I kind of figured it would take a bit of rooting around before figuring out the right approach.

[19:54] <yoleaux> 19:51Z <brrt> pamplemousse: great post, very interesting

[19:55] <pamplemousse> Yep! I can make an ELF executable that is recognized as one and is potentially executable, but haven't figured out a way to get it to actually execute the MBC.

[19:57] <pamplemousse> mornfall: Thank you so much for your feedback! If there's a way to write an ELF executable that runs something other than machine code without mucking around with _start, I would vastly prefer to do it that way

[20:01] <brrt> pamplemousse: I know that guile scheme also has ELF as a binary format

[20:02] <mornfall> pamplemousse: hello

[20:04] <mornfall> pamplemousse: you probably know that elf executables have sections and segments

[20:05] <mornfall> pamplemousse: it's not hard to take an executable and a data file and turn the data into a section of the elf file

[20:06] <pamplemousse> mornfall: Okay, I'll take a look into that.

[20:07] <mornfall> pamplemousse: the easiest way to do that (for fast prototyping, at least) is objcopy: objcopy --remove-section .moarvm --add-section .moarvm=bytcode.bin --set-section-flags=[noload,]readonly elf_executable

[20:07] <mornfall> now your choices depend on whether moarvm is available as a shared library or not

[20:08] <mornfall> if there's no moarvm .so, the dirty way to do it is this: write a C program that figures out its own location, find the offset/size of the .moarvm section, dump it into a file in /tmp and exec moarvm ... that's not the way you want to do it 'for real' but it'd probably work

[20:09] <mornfall> if there's an .so, you would make the section loadable (so it would show up as a segment in the executable that's loaded into memory), then just point moarvm at the location in memory that .moarvm got loaded at

[20:10] <mornfall> (i mean, in the latter case, you write a C program that just invokes dynamically linked moarvm as a library function)

[20:11] <brrt> MoarVM is typically compiled to a .so

[20:11] <brrt> libmoar.so

[20:11] <mornfall> good, that should make it fairly easy to make a nice production-ready 'packer' that links to moar dynamically

[20:12] <mornfall> (i know moar is not huge, but including it with every executable is still probably not what you want?)

[20:12] <brrt> idk actually... there's arguments either way

[20:13] <mornfall> well, it's really just a flip-of-a-switch thing with the above approach... you either link with -static or you don't (as long as you have both libmoar.so and libmoar.a)

[20:14] <brrt> but I guess for every application which you'd like to distribute as a binary, you could ship moar.so

[20:15] <pamplemousse> We could have both as options. I could see reasons why both of those would be useful

[20:16] <mornfall> should be easy to provide a switch for it to the user

[20:16] <nine> Do we even have a way to run precompiled scripts yet?

[20:17] <brrt> not yet

[20:17] <brrt> well, you could for nqp probably

[20:18] <mornfall> isn't that what `moar program.moarvm` does?

[20:18] <nine> I'd guess even nqp has some startup code that's still geared towards compiling something first

[20:19] <brrt> MoarVM by itself, isn't

[20:19] <nine> mornfall: you usually do not start Perl 6 or even NQP programs with `moar whatever.pl6` :) There's a reason for using `perl6` or `nqp`

[20:20] <mornfall> nine: sure, but .pl6 is not precompiled

[20:20] <brrt> nine: what's blocking perl6 precompilation, ooc?

[20:23] <mornfall> pamplemousse: (from a quick look, you would want to replace MVM_cu_map_from_file in the standard moarvm main() sequence, invoked in MVM_vm_run_file() to get a MVMCompUnit from something that's already loaded in memory)

[20:24] <mornfall> MVM_cu_from_bytes looks like the thing to use if you can figure out the address and size of your .moarvm elf section

[20:25] <nine> brrt: perl6's startup initializes stuff that's gonna be needed by the script. This startup code is also written around the assumption that we are gonna compile something that we're later going to execute. One would need to extract the initialization part and compile that into the script itself to be able to run it.

[20:27] <nine> It's nothing super complicated, it's just that noone has done it yet. Except that IIRC pmurias gave it a try. I'm not sure what the results were though.

[20:27] <nine> In any case, this is what I'd tackle first, just so I had some useful .mbc in the first place to put into an ELF file

[20:29] <mornfall> (again, a quick and dirty path to results would be objcopy --change-setion-vma .moarvm=0xNNNN where NNNN is something that doesn't conflict with the rest of the file and that can be hardcoded into the loader; then write the size of the bytecode into a separate section on a separate address, or something along those lines)

[20:31] <mornfall> (there's another even quicker and even dirtier way to do an elf loader: just dump the .moarvm file into a C string literal and run the compiler on it)

[20:32] <nine> Nowadays a part of the needed initialization is even compiled into the perl6 binary: figuring out the library search and repository paths

[20:33] <brrt> right. So that doesn't sound impossible, but it does sound a bit hard

[20:33] <brrt> well

[20:33] <mornfall> (eventually, i would try to converge on a solution where the loader doesn't use hardcoded addresses, but instead the packer uses an ld linkscript to tie a symbol to the start/end addresses of the .moarvm section)

[20:33] <pamplemousse> I'll try the quick and dirty approach first I think (thank you mornfall for all your help), and then see if I can make it nicer once I have something that works. Once that's working, I'll look into extracting out the initialization parts of perl6's start up (thank you nine)

[20:34] <pamplemousse> I'm AFK for a bit but I'll be back soon

[20:36] <nine> An important part of initialization is loading the SETTING. That's usually done by Perl6::Grammar

[20:37] <brrt> a start could be a perl6 'initializer' that'd load the setting without the grammar?

[20:37] <mornfall> i *think* this http://sprunge.us/wWQXQZ might be perl5 code to turn arbitrary data into C string literals *hides behind a rock*

[20:38] <brrt> anybody have any idea how to get the PID of a process invoked with 'system'

[21:06] *** sena_kun left
[21:23] *** brrt left
[21:25] *** brrt joined
[22:00] <brrt> yay, (some) floating point support now works...

[23:03] *** brrt left
