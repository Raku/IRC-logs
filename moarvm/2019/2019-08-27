[00:22] <Geth> ¦ MoarVM/mvmeventsubscribe: c0523a1077 | (Timo Paulssen)++ | 11 files

[00:22] <Geth> ¦ MoarVM/mvmeventsubscribe: Introducing VM Event Subscription

[00:22] <Geth> ¦ MoarVM/mvmeventsubscribe:

[00:22] <Geth> ¦ MoarVM/mvmeventsubscribe: nqp::vmeventsubscribe lets you set a ConcurrentBlockingQueue

[00:22] <Geth> ¦ MoarVM/mvmeventsubscribe: that will receive events from the VM internals.

[00:22] <Geth> ¦ MoarVM/mvmeventsubscribe:

[00:22] <Geth> ¦ MoarVM/mvmeventsubscribe: Currently, you can only configure it with nqp::hash("gcevent", type)

[00:22] <Geth> ¦ MoarVM/mvmeventsubscribe: where type is a int64 array, or null to unsubscribe from this kind

[00:22] <Geth> ¦ MoarVM/mvmeventsubscribe: <…commit message has 9 more lines…>

[00:22] <timotimo> oops my hand slipped on the keyboard

[00:22] <Geth> ¦ MoarVM/mvmeventsubscribe: review: https://github.com/MoarVM/MoarVM/commit/c0523a1077

[00:40] *** evalable6 left
[00:43] *** lucasb left
[00:44] *** evalable6 joined
[00:47] <Geth> ¦ MoarVM/mvmeventsubscribe: 4 commits pushed by (Timo Paulssen)++

[00:47] <Geth> ¦ MoarVM/mvmeventsubscribe: 773e7b0ebd | sure would be great to GC mark these pointers!

[00:47] <Geth> ¦ MoarVM/mvmeventsubscribe: a516197f0b | VMString is the string type, not BOOTString (that's a box)

[00:47] <Geth> ¦ MoarVM/mvmeventsubscribe: e7ce21015a | more detail in hash key type mismatch error

[00:47] <Geth> ¦ MoarVM/mvmeventsubscribe: 123b747dc9 | more detail in vmeventsubscribe gcevent type mismatch error

[00:47] <Geth> ¦ MoarVM/mvmeventsubscribe: review: https://github.com/MoarVM/MoarVM/compare/c0523a107713...123b747dc981

[00:47] <timotimo> https://gist.github.com/timo/b1986b4b91cff00e980266e279a14c6d - japhb, check it out!

[00:58] <timotimo> that'll want to be implemented in Telemetry as well, of course

[00:58] <timotimo> so that it'll just show "number of GCs since last snapshot" and such

[01:21] <japhb> timotimo: Excellent!

[01:22] <japhb> jnthn: Full GC runs would make sense to me.  I like the idea of getting Log::Timeline support for that.  (Which would probably get me using Log::Timeline more.  :-) )

[01:23] * japhb can't wait for PEA and nativeref lowering improvements

[01:26] <timotimo> very looking forward to if you can figure stuff out using this little feature

[01:26] <timotimo> also, i wonder if the "start of gc" should have "start of VM" subtracted from it

[01:33] <japhb> timotimo: That makes sense.  Helps to compare runs that way.

[01:44] <Geth> ¦ MoarVM/mvmeventsubscribe: 465bb2dccb | (Timo Paulssen)++ | src/moar.c

[01:44] <Geth> ¦ MoarVM/mvmeventsubscribe: don't forget to unlock before returning

[01:44] <Geth> ¦ MoarVM/mvmeventsubscribe: review: https://github.com/MoarVM/MoarVM/commit/465bb2dccb

[01:50] *** zakharyas joined
[01:59] <Geth> ¦ MoarVM/mvmeventsubscribe: 795d523739 | (Timo Paulssen)++ | 3 files

[01:59] <Geth> ¦ MoarVM/mvmeventsubscribe: vmevent: subtract vm startup time from gc start time

[01:59] <Geth> ¦ MoarVM/mvmeventsubscribe: review: https://github.com/MoarVM/MoarVM/commit/795d523739

[01:59] <timotimo> may also want to divide the numbers by 1000 before sending them off

[01:59] <timotimo> because other places, like the profiler, divide the values from uv_hrtime by 1000

[02:21] *** Kaiepi joined
[02:44] *** robertle_ joined
[02:47] *** robertle left
[04:54] *** robertle joined
[04:57] *** robertle_ left
[05:54] <nine> timotimo: notification about GC happening could make DESTROY related tests more reliable. When we detect that a GC happened but DESTROY was not called, there's obviously an issue while even with nqp::force_gc we cannot be sure that the GC actually ran.

[05:54] <nwc10> good *, nine

[06:25] *** robertle left
[06:31] *** patrickb joined
[06:48] *** domidumont joined
[07:08] *** patrickb left
[08:17] *** zakharyas left
[08:27] *** zakharyas joined
[08:36] *** sena_kun joined
[08:39] *** zakharyas left
[08:49] <jnthn> timotimo++ # ooh, will look forward to playing with that :)

[09:32] *** brrt joined
[09:32] <brrt> \o

[09:37] <nwc10> o/

[09:51] * brrt is in the process of creating the dumbest ever List::Util replacement

[09:51] <brrt> nwc10: I kind of forgot how to do the exporter dance in perl5

[09:51] <nwc10> from memory, so might have errors

[09:51] <nwc10> use parent 'exporter';

[09:52] <nwc10> our @EXPORT_OK = qw(func func2 func3);

[09:54] <brrt> thanks :-)

[09:57] <moritz> or "use Exporter qw(import);"

[10:00] <brrt> :-)

[10:00] <brrt> yeah, that's shorter still

[10:00] <brrt> ok

[10:00] <brrt> worlds worst List::Util reimplementation, comping up...

[10:01] <nwc10> you still need the @EXPORT_OK

[10:01] <nwc10> and also you don't need to re-implement *all* of List::Util, just the bits not in 5.mumble

[10:01] <nwc10> where 5.mumble is the minimum perl 5 version "we" feel like depending on

[10:02] <nwc10> Anyone on anything earlier than 5.8.4 is likely doomed

[10:02] <brrt> https://gist.github.com/bdw/2c89f23227fca648dfb1d7a1348e43ad

[10:02] <brrt>  

[10:04] <brrt> aargh, it doesn't actually work :-(

[10:04] <brrt> the '$a' refers to the $a in the package...

[10:07] <brrt> this presumably works via the XS :-(

[10:10] <brrt> hmm, maybe it's simpler just to rewrite the code

[10:28] *** domidumont left
[10:31] <Geth> ¦ MoarVM: d79e7d5afc | (Bart Wiegmans)++ | tools/expr-template-compiler.pl

[10:31] <Geth> ¦ MoarVM: [JIT] Revert template compiler back to v5.10

[10:31] <Geth> ¦ MoarVM:

[10:31] <Geth> ¦ MoarVM: List::Util subroutines pairgrep, pairkeys, and pairvalues aren't in

[10:31] <Geth> ¦ MoarVM: perl 5.10 yet, so I reimpleneted the functionality in basic perl.

[10:31] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d79e7d5afc

[10:31] <brrt> moritz++ for the find

[10:46] <dogbert17> brrt++

[10:46] *** brrt left
[10:49] *** travis-ci joined
[10:49] <travis-ci> MoarVM build passed. Bart Wiegmans '[JIT] Revert template compiler back to v5.10

[10:49] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/577277190 https://github.com/MoarVM/MoarVM/compare/1a8988c099d1...d79e7d5afc1a

[10:49] *** travis-ci left
[10:55] *** brrt joined
[11:08] <dogbert17> hi brrt, btw, timotimo uploaded new coverity scan results for MoarVM yesterday. There were some JIT related complaints although I guess they could be false positives

[11:24] <brrt> yeah, I saw them

[11:24] <brrt> thanks

[11:24] <brrt> the missing break was a false positive

[11:24] <brrt> any idea how to silence that?

[11:32] <dogbert17> I believe that coverity supports some annotations that might help

[11:46] <dogbert17> https://community.synopsys.com/s/article/how-to-add-code-annotation-I-do-not-know-which-name-should-exist-with-coverity

[12:00] *** domidumont joined
[12:21] *** patrickb joined
[12:22] <timotimo> jnthn: should there also be a SpeshLog event that contains string data from the speshlog as an int8 buffer or so?

[12:30] *** Kaiepi left
[12:30] <jnthn> timotimo: Hmm....well, only if you opt in to that, I think. It'll be quite a slowdown to produce, but maybe very useful

[12:30] *** Kaiepi joined
[12:31] <timotimo> of course it's an opt-in thing

[12:31] <timotimo> i'm thinking passing the data as int8 instead of Str will make it a little cheaper to ignore the stuff you're not interested in

[12:32] <timotimo> though to be fair, our utf8 parsing isn't slow

[12:32] <jnthn> I think spesh info by default just wants to be like start time, end time, file, line, was it jitted, inline count, and similar overview info

[12:32] <jnthn> And getting the spesh log is an extra option

[12:32] <timotimo> for sure

[12:34] <timotimo> what else can you think of?

[12:34] <timotimo> apart from spesh, i mean

[12:34] <timotimo> like, should "loading bytecode" be an observable event?

[12:45] *** lucasb joined
[12:46] <jnthn> Perhaps yes. Also I did wonder about opening/closing of handles, so you can see if you forgot to close some file handle.

[12:51] <brrt> observability, yay

[13:02] <timotimo> if we have "loading bytecode", perhaps we should have a more precise "created compunit" vs "gc'd compunit" event so you'd be able to see when your program creates more and more code with eval that never gets freed

[13:02] <timotimo> just spitballing here

[13:06] <timotimo> damn it, now i remember than while i was falling asleep i seemed to recall some bug i had been working on at some point but probably forgot about

[13:07] <timotimo> hm, it could have been the one where a task id for an asynctask gets used twice by two different task kinds

[13:12] <sena_kun> timotimo, want a ssh? :)

[13:12] <timotimo> oh, you were whomst had the bug?

[13:12] <sena_kun> yeah

[13:13] <timotimo> refresh my memory, what module or code did that involve?

[13:14] <sena_kun> cro(cro-ldap), most of the time its ok, but once in a while it dies with non-AsyncTask (of type %s) fetched from eventloop active work list, and sometimes with just "incorrect number of arguments passed, wanted N but passed 7+/-"

[13:15] <timotimo> OK, that helps

[13:15] <sena_kun> we had an ssh session where you was able to record it with rr

[13:16] <sena_kun> s/you was/you were/

[13:16] <timotimo> it occurs to me that getting the gc start time from "start of VM" is helpful to compare across runs, but if, say, a whateverable bot were to put something like "last major GC was n seconds ago" in its uptime command, it'd have to associate the gc times with absolute time manually whenever it receives the notification on the queue or so

[13:18] <timotimo> just pushing the absolute time first, and then the time-since-start-of-vm would be very cheap, though

[13:20] <timotimo> also, i should be writing directly to the VMArray storage buffer rather than calling MVM_repr_push over and over, since the type's REPR ID is already forced to be VMArray anyway, and the slot type is also fixed

[13:20] <timotimo> so going via virtual function calls is basically 100% waste

[13:20] <timotimo> not much cost to speak of in total, but the lower the overhead, the better i reckon

[13:27] <brrt> timotimo: JIT compile it?

[13:27] <brrt> :-P

[13:28] <timotimo> that's basically what i'm doing, it's just that i'm doing it by hand :)

[13:28] <timotimo> and ahead of time

[13:28] <timotimo> but it's not like "ahead of time" is the opposite of "just in time" or anything

[13:30] <timotimo> will also turn "MVM_repr_alloc_init" into "MVM_repr_alloc" since VMArray doesn't have an init function

[13:37] <brrt> the opposite of 'just in time' is 'too late'

[13:39] <timotimo> ha

[14:03] <dogbert17> todays stupid question, is there a break statement missing here? https://github.com/MoarVM/MoarVM/blob/master/src/spesh/pea.c#L630

[14:04] <jnthn> dogbert17: Yes

[14:05] <dogbert17> should I make a PR real quick?

[14:06] * dogbert17 does so unless someone beats me to it

[14:07] <jnthn> Yes, go for it

[14:16] <Geth> ¦ MoarVM: dogbert17++ created pull request #1165: Add missing break statement

[14:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1165

[14:18] *** sena_kun left
[14:24] <timotimo> jnthn: how do you feel about a transformation for "object is created but never read from or written to, but deopt desires it" to "drop it and materialize it out of thin air during deopt"?

[14:29] <timotimo> this still happens a bunch in situations where there's no named parameters passed to a speshed frame; oftentimes the named arguments hash gets created as an empty hash but never touched in the code

[14:29] <Geth> ¦ MoarVM: 269b73ee04 | (Jan-Olof Hendig)++ | src/spesh/pea.c

[14:29] <Geth> ¦ MoarVM: Add missing break statement

[14:29] <Geth> ¦ MoarVM:

[14:29] <Geth> ¦ MoarVM: Discovered by Coverity and confirmed as legit by jnthn++

[14:29] <Geth> ¦ MoarVM: Spectested without errors

[14:29] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/269b73ee04

[14:29] <Geth> ¦ MoarVM: 127d7839f6 | niner++ (committed using GitHub Web editor) | src/spesh/pea.c

[14:29] <Geth> ¦ MoarVM: Merge pull request #1165 from dogbert17/fix-missing-break

[14:29] <Geth> ¦ MoarVM:

[14:29] <Geth> ¦ MoarVM: Add missing break statement

[14:29] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/127d7839f6

[14:30] <dogbert17> heh, is nine home from his vacation?

[15:06] *** patrickb left
[15:34] *** Kaiepi left
[15:34] *** nativecallable6 left
[15:34] *** committable6 left
[15:34] *** evalable6 left
[15:34] *** reportable6_ left
[15:34] *** bisectable6 left
[15:34] *** unicodable6_ left
[15:34] *** notable6 left
[15:34] *** releasable6 left
[15:34] *** benchable6 left
[15:34] *** greppable6 left
[15:34] *** tellable6 left
[15:34] *** squashable6 left
[15:34] *** statisfiable6 left
[15:34] *** coverable6 left
[15:34] *** shareable6 left
[15:34] *** quotable6 left
[15:34] *** Kaiepi joined
[15:35] *** squashable6 joined
[15:35] *** statisfiable6 joined
[15:35] *** bisectable6 joined
[15:35] *** greppable6 joined
[15:36] *** benchable6 joined
[15:36] *** nativecallable6 joined
[15:36] *** quotable6 joined
[15:36] *** evalable6 joined
[15:36] *** bloatable6 joined
[15:37] *** releasable6 joined
[15:37] *** tellable6 joined
[15:37] *** committable6 joined
[15:38] *** notable6 joined
[15:38] *** unicodable6 joined
[15:38] *** shareable6 joined
[15:39] *** coverable6 joined
[15:39] *** reportable6 joined
[16:12] *** MasterDuke joined
[16:23] *** robertle joined
[16:23] <brrt> timotimo: no idea what jnthn said, but I think that transformation is a very good idea

[16:25] <timotimo> he hasn't had the opportunity to react yet

[16:25] <jnthn> Ah, missed it. But I think PEA already does it :)

[16:25] <brrt> so, I'm totally unaware of stuff...

[16:25] <jnthn> Or at least, the more-pea branch

[16:26] <brrt> but I'd like a design where a deopt-check would go to a branch, rather than just drop out, and then a deopt-to operator would actually be the one that dropped to the interpreter

[16:26] <timotimo> ah, great!

[16:26] <timotimo> i should be playing around with more-pea

[16:27] <timotimo> i agree with brrt, that'd give me the opportunity to more easily log deopt reasons for the profiler

[16:27] * brrt wonders whether to call the next branch garden-pea or chick-pea

[16:27] <timotimo> deopt could be pushed to a subscription queue thingie fwiw

[16:27] <timotimo> though the traffic there could be immense

[16:27] <timotimo> worse if the code that reacts to the data deopts :D

[16:31] <brrt> timotimo: limited buffer, with overflow = skip

[16:31] <brrt> ?

[16:31] <brrt> (actually, drop)

[16:31] <timotimo> ConcurrentBlockingQueue doesn't really support limited buffers, though?

[16:32] <timotimo> maybe with the internal "get me the current approximate length of this queue" non-api it could work

[16:51] *** pamplemousse joined
[16:58] *** chloekek joined
[17:04] *** brrt left
[17:07] *** brrt joined
[17:26] *** domidumont left
[17:28] <Kaiepi> timotimo, i took a look at how async tcp sockets deal with the gc to see if async udp sockets really weren't marking the handle that keeps getting zeroed out since those actually work and... it's pretty well exactly the same, i don't see how that's happening

[17:28] <Kaiepi> i didn't have to touch any code dealing with the gc

[17:29] *** Ven`` joined
[17:31] <Kaiepi> though i might have to, async udp writes could potentially take a lot longer than before

[17:34] *** pamplemousse left
[17:37] <Kaiepi> i'll probably need to make it possible to connect udp sockets once i properly start work on async networking to make up for it

[17:41] <Kaiepi> maybe i'll pullreq what i have now as a wip to see if anyone can figure out why the handle's getting zeroed out like that

[17:49] *** brrt left
[18:27] *** chloekek left
[18:42] * timotimo makes the sql output a little less wasteful by using "insert into table values (a), (b), (c), ...;" syntax

[18:43] <timotimo> instead of repeating the "insert into table values" part over and over

[18:43] *** brrt joined
[18:45] <MasterDuke> nice

[18:51] <MasterDuke> timotimo: for your mvmeventsubscribe branch, does the new op need to be jitted? otherwise won't it give more pessimistic numbers (compared to running regular jitted, non-event-queue-substribing code) than it could?

[18:52] <timotimo> it's supposed to be called only a few times during the life of a program

[18:53] <timotimo> and definitely not in hot code :)

[18:59] <timotimo> if someone is a dummy like me and puts it in their mainline code, they gotta get surprised, sure

[18:59] <timotimo> but the op is supposed to disappear into an API that rakudo offers anyway

[19:00] <MasterDuke> ah, ok

[19:01] <timotimo> if it ends up causing jit bails, we can jit it

[19:01] <timotimo> i mean we can jit it immediately

[19:05] <MasterDuke> is there any coordination between spesh inlining decisions and jitting? is it needed? i.e., would it sometimes make sense to not inline something because an op inside it would cause the larger combined block to bail?

[19:05] *** Kaiepi left
[19:06] <timotimo> there is no coordination yet, and theoretically every op could be jitted :P

[19:06] *** Kaiepi joined
[19:06] <brrt> and ought to be

[19:07] <MasterDuke> well, some haven't been yet because it's tricky, right?

[19:10] <timotimo> there's a spooky newline that appers in the profiler output

[19:11] <timotimo> ah

[19:11] <timotimo> well, food time!

[19:18] <MasterDuke> e.g, ctxouter, getcurhllsym

[19:22] *** sena_kun joined
[19:23] *** sena_kun left
[19:30] <Geth> ¦ MoarVM: Kaiepi++ created pull request #1166: [WIP] [IP6NS Grant] Improve hostname resolution

[19:30] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1166

[19:33] <Geth> ¦ MoarVM: rbnx++ created pull request #1167: Improve MVM_bithacks_next_greater_pow2 function

[19:33] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1167

[19:45] *** Ven`` left
[19:45] *** Ven`` joined
[19:53] <Kaiepi> waaaiiit a minute

[19:57] <Kaiepi> i wonder if making MVM_io_async_socket_udp create the MVMOSHandle earlier than right before passing it to rakudo and mark it would fix the issue

[20:09] *** brrt left
[20:17] <timotimo> when i "alter table" inside of a transaction, all following inserts that leave out the value in question will get the "new" default, right?

[20:17] <Kaiepi> ...nope

[20:18] <Kaiepi> @ myself, not you

[20:18] <timotimo> ah, ok

[20:23] <Kaiepi> but trying it was enlightening because i forgot to null out the udp handle's data, which originally contained the SocketSetupInfo struct, allowing me to look at what the handle originally looked like

[20:24] <Kaiepi> the MVMOSHandle's body's data is still null, even though i think i do assign it to what it's supposed to be...?

[20:27] *** chloekek joined
[20:29] <timotimo> ah, i can't "alter table" in sqlite to set a default value for a column

[20:35] <timotimo> but maybe i can set the default value for a column to come from a select clause

[20:35] <Geth> ¦ MoarVM: rbnx++ created pull request #1168: change MVM_VECTOR growth factor from 2 to 1.5

[20:35] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1168

[20:44] <timotimo> whyyyy syntax error me :(

[20:51] *** Ven`` left
[21:02] *** pamplemousse joined
[21:08] <MasterDuke> timotimo: i thought sqlite doesn't support alter table at all

[21:09] <timotimo> yeah, it only allows adding columns or something

[21:09] <timotimo> but i'm past that

[21:09] <timotimo> right now it's not letting my insert statements through

[21:09] <timotimo> want to take a look?

[21:10] <Kaiepi> what are some other parts of moarvm besides src/io/asyncsocket.c and src/io/asyncsocketudp.c that deal with both async stuff with libuv and the gc?

[21:10] <timotimo> https://gist.githubusercontent.com/timo/16d5bbf794c6637240a1686cd861b4df/raw/dbcd6bde55bf7ddb11b04bb53ecd8ce800a9c136/gistfile1.txt

[21:12] <Kaiepi> ah, src/io/procops.c does

[21:12] <MasterDuke> timotimo: `INSERT INTO deallocations VALUES (337,3,1287,1,0,0),  (408,3,1287,3,1,0));`, extra closing paren at the end, right?

[21:12] <timotimo> oh

[21:13] <timotimo> but the syntax error comes much earier

[21:13] <timotimo> rebuilding ...

[21:16] <MasterDuke> same with an `insert into gcs...`

[21:17] <timotimo> i see a lone ); in a line of its own, too

[21:17] <MasterDuke> and maybe types, but i can't keep the structure in my head with those json_objects()

[21:19] <timotimo> i should get a big nqp program so i don't have to rebuild rakudo all the time

[21:23] <timotimo> i think i got the last one now

[21:24] <timotimo> wanna help me measure how much space is saved? :)

[21:25] <MasterDuke> sure

[21:26] <timotimo> huh

[21:27] <timotimo> perl6 -ne 'state $saved = 0; state $prefixlen = 0; if /"INSERT INTO" .* "VALUES"/ { $prefixlen = $/.Str.chars }; if *.starts-with("  ") { $saved += $prefixlen }; END { say "saved { $saved / 1024 } bytes" };' < /tmp/shmup.sql

[21:27] *** pamplemousse_ joined
[21:28] <timotimo> i wonder why it spits out some "use of uninitialized * in numeric context" there

[21:28] <timotimo> ah, that's why

[21:28] <timotimo> perl6 -ne 'state $saved = 0; state $prefixlen = 0; if /"INSERT INTO" .* "VALUES"/ { $prefixlen = $/.Str.chars }; if .starts-with("  ") { $saved += $prefixlen }; END { say "saved { $saved / 1024 } bytes" };' < /tmp/shmup.sql

[21:28] <timotimo> saved 841.169922 bytes

[21:28] <timotimo> kbytes*

[21:29] <timotimo> not bad at all

[21:29] <MasterDuke> heh. don'thave a profile from before and after to compare size on disk?

[21:29] <MasterDuke> but yeah, nice

[21:29] <timotimo> can't really do that

[21:30] <timotimo> i'd need a 100% predictable program

[21:30] <timotimo> but i also would like multiple threads to be involved

[21:30] <timotimo> next step will be to maybe go through the entire call graph twice, once for calls, once for allocations

[21:30] <timotimo> that'll save a bunch more

[21:30] <MasterDuke> the allocations/calls section has lots of interleaving, if any of that could be reduced it would help a lot

[21:30] <MasterDuke> jinx

[21:30] <timotimo> :)

[21:31] <timotimo> i want to give the gcs table a default value for the thread number to be pulled from a different table so that i can just say "all gc entries from now on shall be for thread n"

[21:31] <timotimo> that'll save like 3 to 4 bytes per gc run

[21:34] <MasterDuke> save in the data structure the profiler builds in memory, or in the profile file written out?

[21:35] <timotimo> profile file

[21:35] <timotimo> the thread id is already not in the individual entries, it's known by where in the datastructure they live

[21:36] <MasterDuke> ah

[21:37] *** tobs left
[21:44] <timotimo> 127422207 2.3M -rw-r--r--. 1 timo timo 2.3M Aug 27 23:44 /tmp/shmup.sql

[21:44] <timotimo> saved 4491.818359 bytes

[21:44] <timotimo> (kbytes)

[21:46] <timotimo> ah, the value is incorrect

[21:49] <timotimo> 127422207 2.1M -rw-r--r--. 1 timo timo 2.1M Aug 27 23:49 /tmp/shmup.sql

[21:49] <timotimo> saved 1424.177734 kibibytes

[21:49] *** pamplemousse_ left
[21:50] <timotimo> the sql is even wronger than beofre, great

[21:51] <MasterDuke> heh

[21:53] <timotimo> such long compilation times :|

[21:55] *** chloekek left
[21:56] *** tobs joined
[22:05] <timotimo> OK, it saves almost 1.5 megabytes on a 2.1 megabytes sql file

[22:05] <timotimo> that's super good

[22:08] <MasterDuke> damn, that is good

[22:08] <timotimo> 55kb on addition could be saved by making the extra lines indented with only one space, or 110kb if the indentation goes away completely

[22:08] <timotimo> which is maybe what i'll do

[22:26] <timotimo> welp, there's a PR now

[22:28] <MasterDuke> any reason not to merge it?

[22:30] <timotimo> not really i don't think

[22:31] <timotimo> merged

[22:31] <MasterDuke> cool

[22:48] <Geth> ¦ MoarVM: vrurg++ created pull request #1169: Separate includes from submodules from system-wide includes

[22:48] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1169

[22:54] <Geth> ¦ MoarVM: 3faf1985d2 | (Timo Paulssen)++ | 13 files

[22:54] <Geth> ¦ MoarVM: Introduce vmevent, "VM Event Subscription"

[22:54] <Geth> ¦ MoarVM:

[22:54] <Geth> ¦ MoarVM: Lets a ConcBlockingQueue be configured to receive

[22:54] <Geth> ¦ MoarVM: a set of events from inside the VM.

[22:54] <Geth> ¦ MoarVM:

[22:54] <Geth> ¦ MoarVM: Currently there's only "gcevent", which gives you

[22:54] <Geth> ¦ MoarVM: an object in the queue every time the GC runs. It's

[22:54] <Geth> ¦ MoarVM: <…commit message has 6 more lines…>

[22:54] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3faf1985d2

[23:01] <Geth> ¦ MoarVM: 2bcb911d32 | (Vadim Belman)++ | 2 files

[23:01] <Geth> ¦ MoarVM: Separate includes from submodules from system-wide includes

[23:01] <Geth> ¦ MoarVM:

[23:01] <Geth> ¦ MoarVM: Currently configuration variable cincludes contains `-I` flags for both

[23:01] <Geth> ¦ MoarVM: includes from `3rdparty` for for those found with `pkg-config`. This is

[23:01] <Geth> ¦ MoarVM: not correct as `cincludes` can be used by `NQP` and `Rakudo` for their

[23:01] <Geth> ¦ MoarVM: C compilations. An example of a situation when this is necessary is

[23:01] <Geth> ¦ MoarVM: rakudo/rakudo#3136 where `ffi.h` cannot be found even though `moar` is

[23:01] <synopsebot> RAKUDO#3136 [open]: https://github.com/rakudo/rakudo/issues/3136 [BLOCKER][MoarVM][build] Rakudo 2019.07.1 fails to build on Gentoo Linux (no libffi-headers)

[23:01] <Geth> ¦ MoarVM: being compiled with it.

[23:01] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2bcb911d32

[23:01] <Geth> ¦ MoarVM: eb0cbca6ce | (Vadim Belman)++ | build/Makefile.in

[23:01] <Geth> ¦ MoarVM: Replace tabs with spaces for proper indentation

[23:01] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/eb0cbca6ce

[23:01] <Geth> ¦ MoarVM: a37504d124 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | 2 files

[23:01] <Geth> ¦ MoarVM: Merge pull request #1169 from vrurg/rakudo_3136

[23:01] <Geth> ¦ MoarVM:

[23:01] <Geth> ¦ MoarVM: Separate includes from submodules from system-wide includes

[23:01] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a37504d124

[23:07] <Kaiepi> ugh, i still can't tell what async udp sockets are doing wrong with the gc

[23:11] <timotimo> i'd say show off your code, but at the same time i've gotta go to bed very soon

[23:21] *** pamplemousse left
[23:25] <Kaiepi> timotimo, i made a pullreq for it as is atm https://github.com/MoarVM/MoarVM/pull/1166

[23:27] <timotimo> if i am to debug this, a one-liner that gets to the problem would be great, but i won't be able to do anything right now

[23:35] <Kaiepi> perl6 -e 'my $s = IO::Socket::Async.bind-udp: "127.0.0.1", 8000; my $t = $s.Supply.tap({ .print }); my $c = IO::Socket::Async.udp; my $t2 = $c.Supply.tap({ .print }); await $c.print-to: "127.0.0.1", 8000'

[23:35] <Kaiepi> that's what i've been using timotimo

