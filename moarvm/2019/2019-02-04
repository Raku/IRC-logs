[00:00] *** nebuchadnezzar left
[00:08] *** nebuchadnezzar joined
[06:12] *** robertle left
[06:37] *** domidumont joined
[07:19] *** domidumont left
[07:26] <nwc10> good *, #moarvm

[08:00] *** domidumont joined
[08:29] *** zakharyas joined
[11:18] *** brrt joined
[11:18] <brrt> \o #moarvm

[11:19] <nwc10> o/

[11:24] <brrt> ohai nwc10

[11:36] * brrt grumbles about how register allocation is a hateful, messy problem

[11:37] <brrt> If I had only sufficient time, I'd rip out the whole thing *again*

[11:47] <brrt> I mean, I only now find a potential bug...

[12:26] *** zakharyas left
[12:52] *** lucasb joined
[13:01] *** brrt left
[14:10] *** zakharyas joined
[16:01] *** lucasb left
[16:33] *** domidumont left
[16:34] *** Kaiepi joined
[16:43] *** zakharyas left
[17:33] *** robertle joined
[17:35] *** domidumont joined
[17:36] <timotimo> oh damn today's the soft deadline for gsoc projects

[17:36] <timotimo> can i really mentor a project?

[17:56] *** Kaiepi left
[17:56] <MasterDuke> timotimo: i don't actually know what is required, but you've been very helpful with all my questions

[17:56] *** Kaiepi joined
[17:58] <timotimo> but if i suggest a project, i'll be on the hook for whether it makes sense, is the proper size, is doable for a beginner, is useful to have ...

[17:59] <MasterDuke> heh, i got around that by stating up front i wouldn't be able to mentor

[18:02] *** brrt joined
[18:12] *** brrt left
[18:22] *** brrt joined
[18:27] *** patrickb joined
[18:33] <Kaiepi> same MasterDuke

[18:33] <Kaiepi> timotimo, what about support for wide strings?

[18:33] <Kaiepi> i tried implementing that a while ago but couldn't manage to work out how to fully do it

[18:34] <brrt> timotimo: what project would you like to mentor?

[18:42] <brrt> luajit code is dense...

[18:44] <brrt> yay, I can compile nqp with floating point register support

[18:47] <timotimo> brrt: maybe integrating rakudo-moar with godot, maybe an interactive online tutorial a la go playground with things like generating images and showing them in the browser directly

[18:48] *** patrickb left
[18:50] <brrt> hmm.... I think integrating with godot is kind of interesting

[18:50] <brrt> anyway, you can always suggest it

[18:54] <Geth> Â¦ MoarVM/jit-expr-float: 068130a68b | (Bart Wiegmans)++ | 10 files

[18:54] <Geth> Â¦ MoarVM/jit-expr-float: [JIT] Floating point support in the register allocator

[18:54] <Geth> Â¦ MoarVM/jit-expr-float:

[18:54] <Geth> Â¦ MoarVM/jit-expr-float: This is still fairly brittle and will not work with generic register

[18:54] <Geth> Â¦ MoarVM/jit-expr-float: requirements. But it seems to work decently so far, with NQP compiling

[18:55] <Geth> Â¦ MoarVM/jit-expr-float: succesfully.

[18:55] <Geth> Â¦ MoarVM/jit-expr-float: review: https://github.com/MoarVM/MoarVM/commit/068130a68b

[18:55] <Geth> Â¦ MoarVM/jit-expr-float: 15 commits pushed by (Bart Wiegmans)++

[18:55] <Geth> Â¦ MoarVM/jit-expr-float: review: https://github.com/MoarVM/MoarVM/compare/068130a68b81...60f4092d945a

[18:55] <brrt> brittle as hell, but it works, I think

[18:56] <jnthn> Fist make it work, I guess... :)

[18:56] <jnthn> Um, first :)

[18:58] <timotimo> ohai jnthn :)

[18:59] <jnthn> o/

[18:59] * jnthn is sort of back

[18:59] <brrt> ohai jnthn

[18:59] <brrt> welcome back

[18:59] <jnthn> Rather tired, but that's nothing a good night's sleep won't fix :)

[18:59] <brrt> where'd you go?

[19:01] <jnthn> Jesenik and Ostrava, for a couple of nights each :)

[19:02] <jnthn> There was snow, which made me happy. And some nice food too. :)

[19:03] <brrt> :-)

[19:04] <timotimo> \o/

[19:04] <timotimo> you can also eat snow!

[19:08] *** brrt left
[19:10] * timotimo writes documentation for someone else's module

[19:11] *** patrickb joined
[19:15] <MasterDuke> hm, it goes into https://github.com/perl6/nqp/blob/master/src/QRegex/Cursor.nqp#L664 for postcircumfix again (and again...)

[19:15] <MasterDuke> is the self not the same maybe...

[19:20] <timotimo> oh

[19:20] <timotimo> i can imagine the cursor would be a different one all the time

[19:20] <timotimo> but i don't know how the HOW implements cache_get

[19:20] <timotimo> hopefully via the parse_shared

[19:24] <MasterDuke> https://github.com/perl6/nqp/blob/master/src/how/NQPClassHOW.nqp#L709-L712

[19:25] <MasterDuke> timotimo: i don't see a parse_shared anywhere

[19:27] <timotimo> ah, it's ParseShared

[19:30] <MasterDuke> but ClassHOW wouldn't know about ParseShared, right?

[19:31] <timotimo> i'd expect GrammarHOW or so to be involved

[19:31] <timotimo> hm

[19:31] <timotimo> doesn't exist, eh?

[19:32] <MasterDuke> doesn't look like it

[19:32] <timotimo> aha

[19:32] <timotimo> NQPClassHOW has it

[19:33] <MasterDuke> has what?

[19:35] <timotimo> cache_get and cache_add

[19:35] <MasterDuke> right

[19:47] <MasterDuke> hm, so what happens if i instead use $!shared, which is a ParseShared as the cache?

[19:48] <timotimo> well, with cache_get, the self shouldn't matter, right?

[19:49] <timotimo> oh

[19:49] <timotimo> maybe mixing in the operator actually causes the type to change, because mixins, you know?

[19:49] <timotimo> that would mean that the cache actually doesn't get carried over

[19:49] <MasterDuke> oh, you're right, since it's self.HOW. but yes, invalidated because of the mixin

[19:50] <MasterDuke> hm, create a new cache? or is there a way to transfer/copy the cache on mixin?

[19:53] <MasterDuke> timotimo: heh, https://github.com/perl6/nqp/blob/master/src/how/NQPClassHOW.nqp#L747-L748

[19:53] <timotimo> i'm not sure what the proper fix is :(

[19:58] <MasterDuke> i wonder if there's a way to tell what NFA don't need to be invalided and those could be copied to the new cache right away

[20:05] *** domidumont left
[20:06] *** patrickb left
[20:27] <MasterDuke> jnthn: are you back enough for a question about cached NFA invalidation because of type mixins?

[20:27] <MasterDuke> after all, isn't cache invalidation famously one of the easy problems of CS?

[20:28] <timotimo> totally

[20:32] <MasterDuke> timotimo: btw, speaking of caching, didn't you have something in the works to make nqp::getenvhash() cache its rv?

[20:33] <timotimo> it already does i believe

[20:34] <timotimo> what i had was constant folding values from the envhash at spesh time

[20:36] <MasterDuke> ah. becuase i added a bunch of `<...> if nqp::existskey(nqp::getenvhash(),'<my made up env var>')` for debugging in QRegex/Cursor.nqp, but it does noticeably slow down building rakudo

[20:36] <timotimo> mhhh

[20:37] <timotimo> the branch should still exist but i think it needs to be adapted to the new definition-usage API spesh got now

[20:37] <timotimo> and it was a little fiddly anyway

[20:38] <MasterDuke> oh, the type name `Perl6::Grammar+{Postcircumfix}` is the same for all those cache misses

[20:38] <MasterDuke> nm, it does seem to change. now it's `Perl6::Grammar+{Postcircumfix}+{stop}`

[20:39] <MasterDuke> and now `Perl6::Grammar+{Postcircumfix}+{stop}+{stop}`

[20:40] <MasterDuke> but it does look like it tries to look up the same name once and fail

[20:40] <MasterDuke> i.e., i see two failed attempts for the same name, then to failed attempts for the next version of the same name

[20:41] <MasterDuke> that i can't explain

[20:50] *** brrt joined
[20:55] <jnthn> MasterDuke: Maybe sort of... :)

[20:55] <jnthn> MasterDuke: I do know that the invalidation there is extremely coarse

[20:57] <MasterDuke> i'm not sure where the problem is best solved, timotimo++ and i have sort of been working our way up/back, and that cache invalidation seems like it might be where we've ended up so far

[20:57] <MasterDuke> the backstory is that i was looking at https://rt.perl.org/Public/Bug/Display.html?id=128760 again

[20:57] <MasterDuke> so went and read https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2016-07-23#l106

[20:58] <MasterDuke> and now i'm not sure if i've slipped into the second issue mentioned

[20:59] <MasterDuke> or am still working on the first

[20:59] <jnthn> Solving the second needs assembling a directed graph of what uses what

[21:00] <jnthn> So that when we produce a new token, we can then use the graph to work out what other things will be invalidated

[21:00] <jnthn> The first problem is in theory easier

[21:01] <jnthn> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L4427

[21:02] <jnthn> I'm guessing this condition fails bogusly?

[21:02] <MasterDuke> i think so, we were looking there a day or two ago, but i don't remember exactly what we found

[21:03] <MasterDuke> https://colabti.org/irclogger/irclogger_log/moarvm?date=2019-02-03#l90

[21:04] <MasterDuke> "MasterDuke 	ah. add_categorical is being called four times, but after the first it doesn't get past this: if nqp::can(self, $canname) { return 1; }"

[21:04] <jnthn> Hm, but if it doesn't get past that, do we still have the first problem?

[21:04] <MasterDuke> that sounds like it isn't failing

[21:05] <MasterDuke> well, the example still behaves exactly the same as in the ticket

[21:12] <jnthn> Hmm

[21:12] <jnthn> As in, it takes a long time for each operator?

[21:13] <MasterDuke> yep

[21:14] <MasterDuke> about 2s per

[21:17] <jnthn> Odd. I wonder what it is doing per operator to cause that...

[21:21] <MasterDuke> well, it runs this line https://github.com/perl6/nqp/blob/master/src/QRegex/Cursor.nqp#L665 29 times for `postcircumfix:sym<â¦‹ â¦Œ>`

[21:22] <MasterDuke> to be exact, !protoregex_nfa() is run 29 times for that (not 100% certain they're all from that line)

[21:51] <MasterDuke> it doesn't seem to take any longer per operator the more there are, so i don't think it's redoing everything with each new one

[21:54] *** robertle left
[21:57] <jnthn> MasterDuke: Hm, I'm confused; you said "about 2s per" operator, but then "it doesn't seem to take any longer per operator" :)

[21:57] <jnthn> (I'm also tired and probably missing something)

[21:58] <jnthn> bbiab

[22:04] <MasterDuke> any *extra* longer per operator. i.e., not .5s for the first, 1s for the second, 2s for the third, 4s for the fourth

[22:09] <MasterDuke> it doesn't *seem* like factorial or exponential growth in processing time with each added operator, just linear growth

[22:23] *** brrt left
[22:26] <Geth> Â¦ MoarVM: ffontaine++ created pull request #1045: Configure.pl: fix cross-compilation

[22:26] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1045

[22:44] <jnthn> MasterDuke: Ah, I see

[22:45] <jnthn> MasterDuke: And is it per operator or per instance of the same operator with different multi candidates?

[22:50] <timotimo> our testing so far has been for &postcircumfix:<[ ]> multiple times in a row i believe

[23:09] <MasterDuke> jnthn: same with a mix of type of operators and different terms (e.g., `multi postcircumfix:Â« â¦‹ â¦Œ Â»`, `multi postcircumfix:Â« | | Â»`, `multi infix:Â«qwertyÂ»`, and `multi postfix:Â«asdfÂ»`)

[23:35] <MasterDuke> also doesn't matter their their multi or not

[23:38] <jnthn> Yeah, in theory the nqp::can check should prevent the multi case repeatedly triggering the operator generation...

[23:40] <MasterDuke> *if they're

[23:43] <MasterDuke> jnthn: any thoughts on how to figure out why that isn't happening?

[23:46] <jnthn> MasterDuke: Dunno, could we instrument where the mixin stuff takes place and dump a stack trace there?

[23:46] <MasterDuke> jnthn: here? https://github.com/perl6/nqp/blob/master/src/how/NQPClassHOW.nqp#L731

[23:48] <jnthn> MasterDuke: Yeah

[23:48] <jnthn> There'll be loads of hits on named parameters too I guess, but maybe you could filter on the name of the type being mixed in to

[23:52] <MasterDuke> building rakudo now...

[23:56] <MasterDuke> huh, my breakpoint only hit once

[23:56] <MasterDuke> `nqp::sech_n(1.0) if nqp::existskey(nqp::getenvhash(),'NQP_OPT_DEB') && self.name($obj) eq 'Perl6::Grammar';`

[23:56] <MasterDuke> and gdb complained when trying to print a backtrace

[23:57] <jnthn> Missing or optimize-busted debug symbols?

[23:58] <jnthn> (You can recompile MoarVM with --debug=3 --optimize=0 if so without having to build Rakudo again)

[23:58] <MasterDuke> https://gist.github.com/MasterDuke17/07de146b1b38456a7dfdae5eea18983e

[23:59] <MasterDuke> i pretty much always have moar built with --debug=3, but i don't touch --optimize

[23:59] <MasterDuke> maybe cosh isn't a great thing to try and break on?

