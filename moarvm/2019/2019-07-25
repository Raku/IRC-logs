[00:34] *** Kaiepi left
[00:34] *** Kaypie joined
[00:53] *** Kaypie left
[00:53] *** Kaypie joined
[01:19] *** ggoebel joined
[01:24] <ggoebel> (delurk) lizmat: my initial reaction was surprise that lists can contain containers... I would expect them to contain immutable values. Wasn't that part of the design decision behind the Great List Refactor (https://perl6advent.wordpress.com/2015/12/14/day-15-2015-the-year-of-the-great-list-refactor/)?

[01:35] *** ggoebel left
[02:14] *** pamplemousse left
[02:21] *** klapperl_ joined
[02:21] *** klapperl left
[02:29] *** Kaypie left
[02:29] *** Kaypie joined
[02:33] *** Kaypie left
[02:34] *** Kaypie joined
[06:30] *** patrickb joined
[06:50] <lizmat> ggoebel: that was my initial reaction as well but observe:

[06:50] <lizmat> m: my ($a,$b) = 3,4; dd $a, $b

[06:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Int $a = 3␤Int $b = 4␤»

[06:50] <lizmat> how would that work if a List would *not* be able to have containers ?

[06:51] *** domidumont joined
[07:06] *** robertle joined
[07:53] *** zakharyas joined
[08:33] *** robertle left
[09:26] <jnthn> Well, yes, since list assignment relies on that, and it'd be weird if the data structure involved in list assignment was not, well, List, then I don't think List can play that role. We're putting too much expectation on one type.

[09:26] <yoleaux> 08:02Z <lizmat> jnthn: would it make sense to fix thread safety of state variables / once blocks by using an atomic int increment to signal initialization on the MoarVM backend?

[09:26] *** patrickb left
[09:35] <jnthn> .tell lizmat It wouldn't help much, since the issue is ultimately that one thread sees it's the first into the state block and runs the state initializer (which is what a `once` block is treated as, effectively), and then the second thread would (correctly) see it's not the first thing, so just sail on through and read the (so far uninitialized) state variable.

[09:35] <yoleaux> jnthn: I'll pass your message to lizmat.

[09:38] *** patrickb joined
[10:29] <timotimo> we could have the state variable go from 0 to 1 if a thread is initializing the value and from 1 to 2 if the thread is done, and if the value is 1, we busyloop or something

[10:37] <jnthn> busylooping is horrible, though :)

[10:38] <jnthn> Sort of related, I often want something that's like `start`, but that doesn't actually run the code block until the first `await`.

[10:39] <timotimo> so like liz' "slack"?

[10:39] <jnthn> Link?

[10:40] <jnthn> I think I'd like a different name, though. "slack" makes me think of excessive memory use :P

[10:41] <timotimo> https://modules.perl6.org/dist/Object::Delayed:cpan:ELIZABETH

[10:41] <timotimo> that's the one

[10:56] <Guest37021> what does the following message mean? 'Invalid owner in item added to GC worklist'

[10:56] <timotimo> the field "owner" in the header doesn't have a valid value

[10:57] <timotimo> i.e. potentially memory corruption; i'm not sure if the owner spot is shared with the forwarder or something

[10:57] <jnthn> No, it's not; it just means some kind of memory corruption

[10:57] <timotimo> OK

[10:57] <timotimo> hm. the owner shouldn't change over the lifetime of an object, right?

[10:58] <timotimo> could try to put in a valgrind client request to mark those bytes as invalid after they've been initialized

[11:04] <Guest37021> I was thinking of continuing to look for GC related probs. I don't think there are many left (famous last words)

[11:05] <Guest37021> this message shows up when running t/spec/S32-io/out-buffering.t with as small nursery

[11:05] <Guest37021> the other problem, with t/spec/S32-io/socket-recv-vs-read.t, was fixed by timotimo++ yesterday

[11:41] *** MasterDuke joined
[12:06] *** MasterDuke left
[12:06] *** zakharyas left
[13:02] <Guest37021> timotimo: this is what I have atm - https://gist.github.com/dogbert17/c0523756b4afed613aa61d1e1cf5888f

[13:12] <timotimo> Guest37021: can you output the i and num_roots locals in the gc_root_add_temps_to_worklist frame?

[13:13] <Guest37021> sure, gimme a couple of minutes, I managed to close gdb

[13:19] *** brrt joined
[13:24] <Guest37021> reproducing this error is a slow process, I shouldn't have closed gdb, grrr

[13:26] *** Voldenet left
[13:26] <timotimo> oh well :(

[13:27] <timotimo> of course rr wouldn't run on your computer :<

[13:31] *** lucasb joined
[13:32] *** Voldenet joined
[13:32] *** Voldenet left
[13:32] *** Voldenet joined
[13:33] <brrt> good *

[13:36] *** robertle joined
[13:37] <Guest37021> hello brrt

[13:38] <brrt> hi Guest37021

[13:38] <brrt> isn't it time for you to get a nick, or *is* that your nick ;-)

[13:38] <Guest37021> aka Dogbert17 :-)

[13:38] <brrt> ah, I see

[13:38] *** ggoebel joined
[13:39] <Guest37021> are you don with your fp work?

[13:39] <Guest37021> *done

[13:48] *** AlexDaniel left
[13:48] *** AlexDaniel joined
[13:48] *** ggoebel left
[13:53] <brrt> yeah, I think FP is done. We should get it merged still, though

[13:53] <brrt> timotimo has asked me to look at adding devirt support

[13:53] <brrt> and I've basically been looking into a way to do that elegantly

[13:54] <Guest37021> have you come up with a clever solution?

[13:56] <brrt> I think so

[13:57] <timotimo> cool

[13:57] <timotimo> it ought to allow more optimizations than just devirt

[14:01] *** brrt left
[14:04] *** brrt joined
[14:20] *** zakharyas joined
[14:27] *** patrickb left
[14:27] <Guest37021> timotimo: finally, num_roots = 2 and i = 0

[14:28] <timotimo> ok, so the earliest root is the wrong one, eh?

[14:28] <timotimo> could you go up the stack and look what was the first thing pushed onto it?

[14:31] *** brrt left
[14:31] *** brrt joined
[14:31] <Guest37021> which frame do you suggest - https://gist.github.com/dogbert17/c0523756b4afed613aa61d1e1cf5888f

[14:36] <timotimo> hm, could it be in MVM_platform_uname, the result variable?

[14:36] <timotimo> you should be able to compare "&result" with the first entry in the temp roots array

[14:36] <timotimo> ah

[14:36] <timotimo> that needs to be nulled at the start of the function

[14:37] <timotimo> please try that as a patch; in src/platform/sys.c have "MVMObject *result = NULL"

[14:37] <timotimo> otherwise an uninitialized pointer (which may fall onto a pointer from an earlier function) will be fed to the GC

[14:38] <timotimo> um, also, pretty sure the variables sysname, release, version, and machine shouldn't be unrooted like that either

[14:38] <Guest37021> interesting

[14:38] <timotimo> putting the corresponding MVM_repr_bind_pos_s right after the MVM_string_utf8_decode would probably be enough

[14:38] <timotimo> but of course that's mixing declaration and code

[14:39] <Guest37021> the compiler has a tendency to dislike that i think

[14:39] <timotimo> yeah

[14:39] <timotimo> can just put empty declarations at the start of the block

[14:39] <timotimo> then have assignment, bindpos, assignment, bindpos, ...

[14:39] *** Kaypie left
[14:41] *** Kaiepi joined
[14:41] <Guest37021> timotimo: like this then - MVMObject    *result = NULL;

[14:42] <Guest37021> ah you wrote that above :)

[14:43] <timotimo> that's the first step

[14:43] <Guest37021> I can give it a go

[14:44] <ugexe> impossible. i wrote that code therefore it must be perfect.

[14:44] <Guest37021> :-)

[14:44] <timotimo> the code is perfect, it's just the rest of moarvm that's wrong

[14:48] <timotimo> is there a gcc annotation that we can put onto temp_root_push that warns if an undefined value is pointed at?

[14:48] <timotimo> actually, not all instances of that pattern are dangerous

[14:49] <timotimo> only if there's a function that can allocate that is called before the variable is actually assigned to

[14:49] <timotimo> so MVMObject *result; MVMROOT(result, { result = blah }); would be fine

[14:50] <Guest37021> does that mean that the code is perfect :)

[14:51] <Guest37021> or is a MVMroot missing

[14:51] <ugexe> result does not need to be rooted. the original PR passed in *result as a 2nd parameter, but I created a new PR that removed that parameter and created the result inside the function.

[14:52] <ugexe> https://github.com/ugexe/MoarVM/blob/05e2d4222ea47363bea4da8b522b98073bca78b8/src/platform/sys.c#L15-L31 (the original PR code)

[14:52] <Guest37021> timotimo, ugexe: now I got this - https://gist.github.com/dogbert17/09a85e830fb3d42d7cdca35bfa8bb902

[14:53] <timotimo> how do you mean result doesn't have to be rooted?

[14:53] <timotimo> Guest37021: what does your patch look like?

[14:53] <Guest37021> I only did the NULL assignment

[14:54] <Guest37021> of *result

[14:54] <timotimo> yeah, that's not enough

[14:54] <timotimo> after each of the utf8_decode calls, all variables before that get potentially invalidated

[14:54] <timotimo> except for result

[14:55] <timotimo> the original code that ugexe pasted also didn't have a problem, because it didn't assign the results of utf8_decode into variables

[14:55] <ugexe> that had other problems

[14:55] <Guest37021> uh oh

[14:56] <timotimo> what were those?

[14:56] <ugexe> https://github.com/MoarVM/MoarVM/pull/1037#discussion_r254714185

[14:56] <timotimo> ah

[14:56] <ugexe> well, maybe that doesn't apply because result isn't a parameter anymore?

[14:56] <timotimo> correct

[14:57] *** pamplemousse joined
[14:59] <timotimo> hm

[14:59] <timotimo> i think i might have misunderstood what jnthn said

[14:59] <timotimo> we can take the very big hammer that is "volatile" for this purpose perhaps

[14:59] <timotimo> hm

[15:00] <timotimo> is this about sequence points...

[15:00] <timotimo> well, splitting it into two lines is fine

[15:00] <timotimo> just needs to make sure the bind_pos comes right after the decode

[15:00] <timotimo> rather than all the decodes followed by all the bind_pos calls

[15:02] <timotimo> third option is to stack MVMROOTs four levels deep

[15:06] <Guest37021> will you make those changes?

[15:06] <timotimo> i can do that

[15:06] *** domidumont left
[15:07] <Guest37021> jnthn has been silent so he probably agrees with you :)

[15:08] <ugexe> stacking MVMROOTs just like the good ol days

[15:09] <timotimo> whoa, a game i remember playing as a child (released 1997) was open-sourced and i just stumbled upon it again

[15:11] <Geth> ¦ MoarVM: 2911ec7e40 | (Timo Paulssen)++ | src/platform/sys.c

[15:11] <Geth> ¦ MoarVM: Fix GC rooting in MVM_platform_uname

[15:11] <Geth> ¦ MoarVM:

[15:11] <Geth> ¦ MoarVM: dogbert17++ for finding the crashes,

[15:11] <Geth> ¦ MoarVM: ugexe++ for pointing out the reason behind

[15:11] <Geth> ¦ MoarVM: splitting decode and bind_pos calls

[15:11] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2911ec7e40

[15:12] <Guest37021> ugexe: wrt R#3080, FWIW the deadlock vanishes if the golf is run with MVM_SPESH_INLINE_DISABLE=1

[15:12] <synopsebot> R#3080 [open]: https://github.com/rakudo/rakudo/issues/3080 Deadlock when using multiple CATCH + rethrow

[15:12] <Guest37021> timotimo++

[15:14] <timotimo> needs a very unlucky user to reproduce this crash in the wild, but of course it's best not to have it in there at all

[15:19] <Guest37021> we also have the get_lex crash to look into

[15:20] * Guest37021 relocates &

[15:31] *** chloekek joined
[15:43] *** robertle left
[16:36] *** pamplemousse left
[16:45] *** robertle joined
[17:01] *** brrt left
[17:15] *** sena_kun joined
[17:16] <AlexDaniel> samcv: everything looks fine to me, let's release

[17:29] *** pamplemousse joined
[17:38] *** pamplemousse_ joined
[17:40] *** pamplemousse left
[17:41] *** pamplemousse_ is now known as pamplemousse

[17:44] *** chloekek left
[18:20] *** AlexDaniel left
[18:22] *** pamplemousse_ joined
[18:24] *** pamplemousse left
[18:24] *** pamplemousse_ is now known as pamplemousse

[18:32] *** zakharyas left
[18:36] *** AlexDaniel joined
[18:58] <lucasb> timotimo: ooc, which game? :)

[18:59] <timotimo> http://www.blupi.org/

[19:00] <lucasb> cool, I didn't know it

[19:01] *** pamplemousse_ joined
[19:03] *** pamplemousse left
[19:18] <samcv> AlexDaniel, is everything that needs to be in the MVM release repo cherry-picked?

[19:18] <timotimo> the one for uname up there could also go in

[19:22] <AlexDaniel> timotimo: don't know anything about blupi, but I enjoyed CoLoBoT at the time

[19:31] <AlexDaniel> samcv: this one was mentioned but is not cherry-picked https://github.com/MoarVM/MoarVM/commit/ab7bac5ad1

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: cb5787aa99 | (Stefan Seifert)++ (committed by Samantha McVey) | src/core/interp.c

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: Fix possible memory corruption in bindkey_*

[19:31] <Geth> ¦ MoarVM/release-2019.07.1:

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: bindkey reads the target object from a register, calls the bind_key repr

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: function and then calls MVM_SC_WB_OBJ with the object. The repr function

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: however may allocate and thus trigger a GC run which may move the target

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: object. In that case we'd end up calling MVM_SC_WB_OBJ on the outdated

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: copy of the object.

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: Fix by reading it fresh from the register as those get updated automatically

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: by the GC.

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: review: https://github.com/MoarVM/MoarVM/commit/cb5787aa99

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: 7360ee5dbd | (Timo Paulssen)++ (committed by Samantha McVey) | src/platform/sys.c

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: Fix GC rooting in MVM_platform_uname

[19:31] <Geth> ¦ MoarVM/release-2019.07.1:

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: dogbert17++ for finding the crashes,

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: ugexe++ for pointing out the reason behind

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: splitting decode and bind_pos calls

[19:31] <Geth> ¦ MoarVM/release-2019.07.1: review: https://github.com/MoarVM/MoarVM/commit/7360ee5dbd

[19:32] <AlexDaniel> samcv: also https://github.com/MoarVM/MoarVM/commit/c3c9d7dfac

[19:32] <AlexDaniel> samcv: see the list here https://github.com/rakudo/rakudo/issues/3067

[19:32] <Geth> ¦ MoarVM/release-2019.07.1: 36cb624e5c | (Jonathan Worthington)++ (committed by Samantha McVey) | src/core/frame.c

[19:32] <Geth> ¦ MoarVM/release-2019.07.1: Avoid various races in profile/coverage//debug

[19:32] <Geth> ¦ MoarVM/release-2019.07.1:

[19:32] <Geth> ¦ MoarVM/release-2019.07.1: We could attempt to duplicately instrument code when multiple threads

[19:32] <Geth> ¦ MoarVM/release-2019.07.1: started to execute it around the same time, which could lead to crashes,

[19:32] <Geth> ¦ MoarVM/release-2019.07.1: since it was assumed that would only happen once. Do it under lock, so

[19:32] <Geth> ¦ MoarVM/release-2019.07.1: as to prevent such issues.

[19:32] <Geth> ¦ MoarVM/release-2019.07.1: review: https://github.com/MoarVM/MoarVM/commit/36cb624e5c

[19:36] <AlexDaniel> samcv: I think currently c3c9d7d and e07c0f2 are missing

[19:38] <Geth> ¦ MoarVM/release-2019.07.1: 79d211893f | (Jonathan Worthington)++ (committed by Samantha McVey) | src/core/frame.c

[19:38] <Geth> ¦ MoarVM/release-2019.07.1: Bump level until after instrumenting

[19:38] <Geth> ¦ MoarVM/release-2019.07.1:

[19:38] <Geth> ¦ MoarVM/release-2019.07.1: Rather than before, which can lead to various races. This fixes a whole

[19:38] <Geth> ¦ MoarVM/release-2019.07.1: range of different problems in both debugging and profiling of apps that

[19:38] <Geth> ¦ MoarVM/release-2019.07.1: are multi-threaded.

[19:38] <Geth> ¦ MoarVM/release-2019.07.1: review: https://github.com/MoarVM/MoarVM/commit/79d211893f

[19:38] <Geth> ¦ MoarVM/release-2019.07.1: 1c2747724d | (Timo Paulssen)++ (committed by Samantha McVey) | src/profiler/configuration.c

[19:38] <Geth> ¦ MoarVM/release-2019.07.1: confprog: don't return null from filename()

[19:38] <Geth> ¦ MoarVM/release-2019.07.1: review: https://github.com/MoarVM/MoarVM/commit/1c2747724d

[19:50] *** pamplemousse_ is now known as pamplemousse

[20:10] *** MasterDuke joined
[20:17] <MasterDuke> ordered my new parts. ryzen 7 3700x, 32gb pc3200 ddr4, msi x570-a pro. motherboard was on backorder though, so probably won't get them for a little while

[20:17] *** TimToady left
[20:17] *** TimToady joined
[20:22] <dogbert17> MasterDuke: very cool

[20:23] <dogbert17> setting the nursery to 8k actually manages to crash a few tests

[20:31] <MasterDuke> new crashes?

[20:36] <dogbert17> yes, at least I haven't seen them before

[20:36] <dogbert17> e.g. t/spec/S17-channel/subscription-drain-in-react.t

[20:42] <dogbert17> here's what it looks like - https://gist.github.com/dogbert17/13643f76b945d0bd9890ca289ef8df4b

[20:46] <MasterDuke> don't think i've seen that one before either

[20:49] <dogbert17> owner is set to 44058952, that feels a bit high

[21:04] *** Kaiepi left
[21:17] *** Kaiepi joined
[21:30] *** MasterDuke left
[21:41] <timotimo> in an rr replay you could hardware watchpoint that value and reverse-continue until it gets overwritten

[21:42] <dogbert17> haha

[21:51] <timotimo> https://www.myfonts.com/fonts/tabular-type-foundry/comic-code/

[22:08] *** sena_kun left
[23:01] *** pamplemousse left
[23:11] *** lucasb left
