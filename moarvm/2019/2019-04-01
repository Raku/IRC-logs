[04:14] *** AlexDani` joined
[04:18] *** AlexDaniel left
[06:09] *** domidumont joined
[06:57] *** robertle joined
[07:38] *** zakharyas joined
[08:33] *** AlexDani` left
[08:34] *** AlexDani` joined
[09:29] *** domidumont left
[10:14] *** domidumont joined
[10:27] *** AlexDani` is now known as AlexDaniel

[10:27] *** AlexDaniel left
[10:27] *** AlexDaniel joined
[11:31] *** zakharyas left
[11:45] *** discord61 joined
[11:45] *** discord61 left
[11:45] *** discord61 joined
[11:46] *** discord6 left
[11:47] *** discord61 is now known as discord6

[11:55] *** domidumont left
[11:56] *** domidumont joined
[12:01] *** brrt` joined
[12:36] <brrt`> \o

[12:36] *** brrt` is now known as brrt

[12:36] <brrt> so I've decided I'm going to start a full rewrite of the JIT.

[12:36] <brrt> In Rust.

[12:40] <lizmat> yet another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/04/01/2019-13-no-jokes-today/

[12:42] <timotimo> brrt: i might rewrite the debugger protocol to just be perl6 code that you have to evaluate to get the data structure composed

[12:43] <brrt>  .oO( Not sure if kidding ... )

[12:44] <timotimo> it's like JSONP

[12:44] <timotimo> so ... JSONP6 i guess?

[12:46] <brrt> lol

[12:47] <brrt> honestly though..... an interpreter that would be just a bit more tuned to the needs of the JIT... that'd be nice

[12:48] <brrt> fewer functions calls

[12:49] <nwc10> brrt: is MoarVM structured well enough that one could write the JIT in NQP?

[12:50] <timotimo> then we'd have to port dynasm to nqp, too?

[12:50] <timotimo> well, that or minilua in nqp

[12:50] <nwc10> thanks, that's an answer

[12:51] <brrt> well, or output x86 bytecode in nqp

[12:52] <brrt> nwc10: it's a difficult question, actually

[12:52] <brrt> could it be made to work? surely

[12:52] <brrt> would it be reliable? probably not

[12:52] <nwc10> ah OK. that ("reliable") is an excellent reason

[12:52] <nwc10> I was thinking "is it easier in the long run?" and it seems to be "no" (where "In the long run we are all dead")

[12:53] <brrt> and the reason why is that (imo) MoarVM inherited too much.... perlishness, parroticness, or so

[12:53] <brrt> too much damn C code

[12:53] <brrt> and C is just a little too high level

[12:53] <brrt> so one of the advantages of the expr JIT, for instance, is that we can refer symbolically to field offsets and struct sizes

[12:54] <brrt> and the C compiler fixes them up for us

[12:54] <brrt> and at the same time, I have all sorts of little support hacks to be sure we don't trip up a GC invariant

[12:55] <brrt> If I had to design the VM today, with what I've learned, I'd probably make it so that at least a write barrier would be cheaper

[12:55] <brrt> and I"d probably do that with some form of pointer tagging

[12:56] <brrt> .... and, I'd design it so that regular function calls would be cheaper

[12:56] <brrt> which is hard to do

[12:57] <brrt> but nevertheless possible, because you can always JIT something for the match between a callsite and a callee

[12:58] <brrt> which is already kind of what we do

[13:00] <brrt> more importantly, I'd start by implementing measurements

[13:01] <timotimo> measurements? what kind are you thinking of?

[13:01] <brrt> (all of this, by the way, is not at all a critique of MoarVM..... it's more a what-would-I-do-with-infinite-time-and-resources)

[13:01] <jnthn> Indeed; MoarVM has largely been "what can we afford to do". :)

[13:02] <brrt> well, I'm assuming that a calling convention that reuses the C stack would perform better than our current implementation, which uses a heap-allocated stack

[13:02] <brrt> but I don't know that

[13:02] <jnthn> Well, then you get into recursion depth limits and have more fun with continuations :)

[13:03] <jnthn> Setting up our callframes is certainly too costly, though, and that's quite visible now many other things are fairly fast.

[13:03] <nwc10> it has been said (forget by whom) that one of the good bits of the Perl 5 (hence Perl 1) VM design was that Perl subroutine calls don't recurse on the C stack

[13:03] <timotimo> inlining gives us a calling convention where data is partially passed in registers :)

[13:03] *** zakharyas joined
[13:03] <nwc10> implication is that you can't bust the C stack (as a SEGV type "unfortunate surprise") from recursing deeply in the language

[13:03] <nwc10> it does break the assumptions of dtrace

[13:04] <brrt> sure.

[13:04] <brrt> on the other hand, C stacks are large these days

[13:04] <timotimo> except when you create threads :D

[13:04] <brrt> really?

[13:04] <timotimo> on alpine, that is

[13:04] <brrt> oh

[13:05] <timotimo> we had that problem when spesh would crash

[13:05] <brrt> weird

[13:05] <nwc10> large, but IIRC still no portable way to know when you've exhausted it

[13:05] <timotimo> we were able to greatly reduce the size of frames that are left on the stack when spesh recurses

[13:08] <brrt> nwc10: true, true

[13:09] <brrt> well, alternatively, you can go so far as allocate your own stack frames via mmap

[13:09] <brrt> not sure how far you should take such a thing

[13:11] <timotimo> so brrt what did you mean by measurements?

[13:11] <brrt> and the other question is... for whom is the perl6 VM?

[13:12] <brrt> timotimo: basically, detailed knowledge of how the internals perform

[13:12] <timotimo> sounds like you want to put Tracy into moarvm

[13:13] <timotimo> *hint hint*

[13:13] <brrt> hehe

[13:13] <brrt> what's Tracy?

[13:15] <timotimo> it's good, it's fast, it has a snazzy GUI

[13:15] <timotimo> basically telemeh, except good, and maintained by someone else

[13:17] <brrt> well, it is also a first name, so it's not really very googleable

[13:17] <timotimo> hold on

[13:17] <timotimo> https://bitbucket.org/wolfpld/tracy/

[13:17] <brrt> oh, and bloody *tests*. I'm kicking myself for not adding tests to the MoarVM JIT yet

[13:18] <timotimo> aye

[13:18] <nwc10> ooh, runs on both kinds of CPU, x86 and ARM :-)

[13:18] <timotimo> lol

[13:18] <brrt> btw, there's been zero interest in the jit-testing proposal so far

[13:18] <brrt> so I'm going to probably do that in some weekend

[13:19] <brrt> .oO( Sure bitbucket, I care so much about your api's )

[13:19] <timotimo> yeah

[13:19] <nwc10> off topic - best use of "bloody" seen recently: https://me.me/i/all-of-parliament-maam-yes-007-the-bloody-lot-please-4c6c67d9fec440549ebe2e13e28f0c5b

[13:19] <timotimo> that is a really annoying popup

[13:20] <brrt> it is cool, yes

[13:21] <timotimo> i wanted to look into putting tracy into moarvm last week but i'd have to do some build system changes, since it's a C++ project with an optional C API

[13:22] <timotimo> and i've still got so much other stuff to do that i'd already started, some of which would be paid for :)

[13:22] <timotimo> not trying to say "you have too much free time, you do it for me"

[13:24] <brrt> I have too little free time :-(

[13:24] <timotimo> ;(

[13:24] <brrt> don't we all

[14:10] *** domidumont1 joined
[14:13] *** domidumont left
[14:34] *** lucasb joined
[15:24] *** robertle left
[15:39] *** brrt left
[15:59] *** zakharyas left
[16:37] *** domidumont joined
[16:40] *** domidumont1 left
[17:11] *** robertle joined
[17:25] *** domidumont left
[19:32] *** AlexDaniel left
[20:44] *** brrt joined
[21:20] *** robertle left
[21:24] *** lucasb left
[21:47] *** brrt left
[22:45] *** dogbert17 left
[22:54] *** dogbert17 joined
[23:56] *** samcv left
[23:59] *** samcv joined
