[01:20] *** AlexDaniel left
[01:30] *** AlexDaniel joined
[03:16] *** coverable6 left
[03:16] *** greppable6 left
[03:16] *** unicodable6 left
[03:16] *** releasable6 left
[03:16] *** bloatable6 left
[03:16] *** reportable6 left
[03:16] *** committable6 left
[03:16] *** quotable6 left
[03:16] *** nativecallable6 left
[03:16] *** benchable6 left
[03:16] *** notable6 left
[03:16] *** evalable6 left
[03:16] *** squashable6 left
[03:16] *** statisfiable6 left
[03:16] *** bisectable6 left
[03:16] *** shareable6 left
[03:16] *** undersightable6 left
[03:16] *** committable6 joined
[03:16] *** greppable6 joined
[03:17] *** nativecallable6 joined
[03:17] *** evalable6 joined
[03:17] *** notable6 joined
[03:17] *** undersightable6 joined
[03:17] *** bisectable6 joined
[03:18] *** unicodable6 joined
[03:19] *** shareable6 joined
[03:19] *** quotable6 joined
[03:19] *** benchable6 joined
[03:19] *** reportable6 joined
[03:19] *** squashable6 joined
[03:20] *** statisfiable6 joined
[03:20] *** bloatable6 joined
[03:20] *** releasable6 joined
[03:20] *** coverable6 joined
[04:26] *** mtj_ left
[07:20] *** mtj_ joined
[07:46] *** domidumont joined
[10:25] *** camelia joined
[10:36] *** camelia left
[10:36] *** camelia joined
[11:16] *** AlexDani` joined
[11:16] *** AlexDani` left
[11:16] *** samcv left
[11:16] *** samcv joined
[11:17] *** AlexDani` joined
[11:17] *** AlexDaniel left
[11:58] *** camelia left
[12:01] *** camelia joined
[12:29] *** dalek left
[12:31] *** camelia left
[12:55] *** AlexDani` is now known as AlexDaniel

[12:55] *** AlexDaniel left
[12:55] *** AlexDaniel joined
[13:01] *** AlexDani` joined
[13:03] *** AlexDaniel left
[13:05] *** AlexDani` left
[13:06] *** AlexDani` joined
[13:15] *** AlexDani` is now known as AlexDaniel

[13:15] *** AlexDaniel left
[13:15] *** AlexDaniel joined
[13:32] *** Geth left
[14:48] <timotimo> so, i've been wondering

[14:48] <timotimo> if all the CBlah reprs get a "owner-of-the-memory" pointer

[14:48] <timotimo> should it always ask the owner for the most up-to-date pointer?

[14:48] <timotimo> so that a CStruct inside of a CArray that gets resized will immediately work?

[14:49] <timotimo> i'm not actually sure it wouldn't already immediately work, tbh

[14:49] <timotimo> but this also applies to things that are nativecast

[14:50] <timotimo> m: use NativeCall; my $initial = CArray[uint8].new(1, 2, 3, 4); my $casted = nativecast(CArray[uint16], $initial); $casted.say; $initial.push($_) for 10..14; $casted.say

[14:50] <evalable6> timotimo, rakudo-moar adba017f7: OUTPUT: «(exit code 1) WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, y…»

[14:50] <evalable6> timotimo, Full output: https://gist.github.com/2c439cbcbf23df58f66bdded9bc8d17b

[14:51] <timotimo> right

[14:51] <timotimo> what

[14:51] <timotimo> m: use NativeCall; my $initial = CArray[uint8].new(1, 2, 3, 4); my $casted = nativecast(CArray[uint16], $initial); $casted.say; $initial[$initial.elems] = $_ for 10..14; $casted.say

[14:51] <evalable6> timotimo, rakudo-moar adba017f7: OUTPUT: «NativeCall::Types::CArray[uint16].new␤NativeCall::Types::CArray[uint16].new␤»

[14:51] <timotimo> m: use NativeCall; my $initial = CArray[uint8].new(1, 2, 3, 4); my $casted = nativecast(CArray[uint16], $initial); $casted[^2].say; $initial[$initial.elems] = 10 + $_ for 0..14; $casted[^2].say

[14:51] <evalable6> timotimo, rakudo-moar adba017f7: OUTPUT: «(513 1027)␤(-3616 1712)␤»

[14:52] <timotimo> m: use NativeCall; my $initial = CArray[uint8].new(1, 2, 3, 4); my $casted = nativecast(CArray[uint16], $initial); $casted[^2].say; $initial[$initial.elems] = 10 + $_ for 0..1024; $casted[^2].say

[14:52] <evalable6> timotimo, rakudo-moar adba017f7: OUTPUT: «(513 1027)␤(-13456 17870)␤»

[14:52] <timotimo> i didn't expect the data to be overwritten this quickly, but whatevs

[14:55] <timotimo> it shows the potential issue

[14:55] <timotimo> might of course say "if you're doing that, you're in trouble anyway, you'd also be in trouble in C"

[14:55] <timotimo> but in C it's a lot less tiresome to just have casts of the original array/pointer whereever you use it

[16:02] *** domidumont left
[16:03] *** domidumont joined
[16:20] *** AlexDaniel left
[16:21] *** AlexDaniel joined
[16:30] *** synopsebot left
[16:30] *** dalek joined
[16:30] *** synopsebot joined
[16:30] *** Geth joined
[16:30] *** p6lert_ joined
[16:30] *** p6lert left
[16:45] *** evalable6 left
[16:46] *** evalable6 joined
[16:52] <ugexe> time perl6 -e 'for 1..10000 { my $meta = from-json($*CWD.add("META6.json").slurp); $meta<version>; }'

[16:53] <ugexe> in 2019.03.1 that takes 1m45s

[16:53] <ugexe> blead it takes 18s

[16:57] <timotimo> is that the json-fast performance improvements?

[17:03] <ugexe> yeah

[17:05] <timotimo> sweet

[17:05] <timotimo> i mean it could be more

[17:05] <timotimo> i mean more faster

[17:06] <ugexe> it used to be that CURI read meta6.json for every installed module on startup (pre v6.c), and having 100 modules installed meant perl6 -e '' would take like 10 seconds

[17:08] <timotimo> ouch

[17:44] *** lucasb joined
[17:52] *** zakharyas joined
[18:07] *** AlexDaniel left
[18:17] *** AlexDaniel joined
[19:48] *** zakharyas left
[19:49] *** domidumont left
[21:03] *** lucasb left
[21:56] *** squashable6 left
[22:00] *** squashable6 joined
[23:43] <timotimo> i wonder if we should go through gen2 size classes in parallel

