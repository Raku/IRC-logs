[00:06] *** Kaiepi joined
[00:34] *** sivoais left
[00:34] *** sivoais joined
[02:26] *** squashable6 left
[02:30] *** squashable6 joined
[05:40] *** Woodi left
[05:41] *** domidumont joined
[05:59] *** squashable6 left
[06:02] *** squashable6 joined
[06:05] *** Elronnd joined
[06:18] *** brrt joined
[06:23] *** Woodi joined
[07:08] *** robertle joined
[07:10] *** lizmat joined
[07:20] *** lizmat left
[08:25] *** zakharyas joined
[08:45] <brrt> \o

[09:11] <nwc10> o/

[09:13] <brrt> our memmem.h header isn't really acting like a proper header

[09:23] *** domidumont1 joined
[09:23] *** brrt left
[09:26] *** domidumont left
[09:31] <jnthn> So while looking at the profile of a Rat benchmark, I spotted some easy wins (provided spectest agrees) in our bigint stuff

[09:47] *** brrt joined
[09:49] <Geth> Â¦ MoarVM: c5545770ca | (Jonathan Worthington)++ | src/math/bigintops.c

[09:49] <Geth> Â¦ MoarVM: Use mp_set_int when we know we have a 32-bit int

[09:49] <Geth> Â¦ MoarVM:

[09:49] <Geth> Â¦ MoarVM: It's quite a lot cheaper.

[09:49] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c5545770ca

[09:49] <Geth> Â¦ MoarVM: aad6fdc0bd | (Jonathan Worthington)++ | 3 files

[09:49] <Geth> Â¦ MoarVM: Greatly reduce allocation churn on bigint ops

[09:49] <Geth> Â¦ MoarVM:

[09:49] <Geth> Â¦ MoarVM: When we get an operation where we have a big integer and a small big

[09:49] <Geth> Â¦ MoarVM: integer, we have to upgrade the small one to do the operation. We used

[09:49] <Geth> Â¦ MoarVM: to `malloc` and `mp_init` a fresh `mp_int` to use every time, and then

[09:49] <Geth> Â¦ MoarVM: `mp_clear` and `free` it at the end. We can get rid of this cost by

[09:49] <Geth> Â¦ MoarVM: holding a few `mp_int` objects on the `ThreadContext` and re-using them

[09:49] <Geth> Â¦ MoarVM: for all of these operations. This shaves around a third off a Rat

[09:49] <Geth> Â¦ MoarVM: addition benchmark.

[09:49] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/aad6fdc0bd

[10:01] <Geth> Â¦ MoarVM/more-pea: 38 commits pushed by (Jonathan Worthington)++

[10:01] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/compare/e61f028ed6cb...e991f9c14d5d

[10:17] <timotimo> whoa

[10:17] *** sena_kun joined
[10:26] *** klapperl left
[10:33] *** klapperl joined
[10:37] <jnthn> Might have found another 15% off that improved time too

[10:38] <brrt> :-o

[10:39] <jnthn> And that's before further improvements in the EA to devirt some more bigint operations :)

[10:40] <brrt> apparently, memmem segv's if it's argument is null

[10:41] <brrt> ... I think if the argument to MVM_VECTOR_CONTAINS is NULL, and MVM_VECTOR_SIZE is 0, then we should not crash

[10:41] <timotimo> yeah

[10:42] <brrt> which is what happens now

[10:42] <brrt> but in my patch it does crash

[10:42] <brrt> oh, hang on, I see the problem

[10:47] <Geth> Â¦ MoarVM: 2fe2f588fd | (Jonathan Worthington)++ | src/math/bigintops.c

[10:47] <Geth> Â¦ MoarVM: Use a cheaper way to force_bigint

[10:47] <Geth> Â¦ MoarVM:

[10:47] <Geth> Â¦ MoarVM: This does rely on mp_digit being at least 32-bit, but we rely on that

[10:47] <Geth> Â¦ MoarVM: elsewhere in multiple other places already. Gives ~15% off a Rat

[10:47] <Geth> Â¦ MoarVM: addition benchmark.

[10:47] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2fe2f588fd

[10:48] <Geth> Â¦ MoarVM/more-pea: 38 commits pushed by (Jonathan Worthington)++

[10:48] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/compare/e991f9c14d5d...7832709e8988

[10:48] <brrt> - problem nr. 1: I used MVM_VECTOR_ELEM_SIZE for the haystack size, rather than MVM_VECTOR_SIZE

[10:49] <jnthn> oops :)

[10:52] <brrt> - problem nr. 2: memmem will treat the needle as a pointer to the data it'll compare, whereas the current implementation was looking for the needle-as-value (with ==)

[10:53] <brrt> so I need to pass &t rather than t

[10:57] <timotimo> hm. are you sure that memmem is the right thing for MVM_VECTOR_CONTAINS though? since it'll advance by 1 byte during search, if i'm not mistaken?

[10:57] <brrt> jnthn: https://gist.github.com/bdw/993188860117efd91fd951f454ffaa1d

[10:58] <brrt> timotimo: is that so.... well... what's the alternative?

[10:58] <brrt> I thought memmem was optimized and stuff

[10:58] <timotimo> it is optimized!

[10:58] <brrt> but idk how :-D

[10:58] <timotimo> we do have memmem32, which is a memmem that goes by 4 bytes instead of 1 bytes

[10:59] <brrt> hmm

[10:59] <brrt> I'll leave that for you to discuss

[10:59] <timotimo> the thing is

[10:59] * brrt is listening

[11:00] <timotimo> the optimization of memmem relies on the needle being able to mismatch at a given position in an "interesting" way

[11:00] <timotimo> i.e. if you have a needle "bbbbbbbb" and a haystack of "aaaaaaaaaaaabbbbbbbb" you can look at the 8th byte, see that it's a, and know that the match can't be at position 8 or earlier at all

[11:01] <timotimo> but - unless i'm misunderstanding what VECTOR_CONTAINS is supposed to do - you're supposed to get back the index of an element

[11:01] <brrt>  ok.... well.. is there a default, library optimized, version of 'find this exact match at these offsets'

[11:01] <timotimo> those don't overlap AFAIK?

[11:01] *** zakharyas left
[11:01] <brrt> no, MVM_VECTOR_SEARCH is supposed to return a pointer

[11:02] <timotimo> right, a pointer to an element

[11:02] <brrt> ok, my understanding is wrong, then

[11:02] <brrt> because I need to search only the boundaries

[11:02] <timotimo> and since VECTOR_SEARCH is passing MVM_VECTOR_ELEM_SIZE, it can't be used to search for two consecutive elements either

[11:02] <brrt> I think that's normal, though

[11:03] <brrt> but what I don't want, is a half-item

[11:03] <brrt> so memmem is, indeed, not what I want

[11:03] <timotimo> that's just a peculiarity of the API we have

[11:03] <timotimo> i mean the API you're offering

[11:03] <timotimo> maximum shrug ;)

[11:03] <brrt> :-)

[11:03] <timotimo> i don't think you can get much faster than what the compiler turns MVM_VECTOR_CONTAINS into. that said

[11:04] <timotimo> the previous version of MVM_VECTOR_CONTAINS uses ==, does that work properly with structs in all cases?

[11:04] <timotimo> does it compile to something memcmp-like?

[11:04] <timotimo> i sometimes get confused as to what you're allowed to do with structs when it comes to assignment and comparison

[11:08] *** brrt left
[11:10] <jnthn> lunch; bbl

[11:54] * jnthn back

[11:59] <timotimo> can't wait to see where that "another 15%" could be from

[12:00] <Kaiepi> the stuff that gets discussed here always seems like arcane wizardry

[12:00] <timotimo> you can tell by the fact that i'm a part of it that this is all completely learnable

[12:00] <Kaiepi> lol

[12:01] <Kaiepi> i haven't really looked into moarvm much outside of bsd compatibility

[12:03] <jnthn> timotimo: It was from the "use a cheaper way to force_bigint"

[12:03] <timotimo> oh, i see

[12:03] <timotimo> yeah, the commit message even mentions the 15% figure again

[12:05] <jnthn> grmbl, I was going to make us devirt/avoid boxing with gcd_I, but turns out I've discovered a case where we're too conservative in BB merging...

[12:05] <jnthn> And so refuse to do things that would be safe enough

[12:16] <timotimo> aaw

[12:17] <timotimo> but that also means when that is fixed, other optimizations might be able to step in in other, similar situations?

[12:17] <timotimo> along with exprjit boundaries being disappered

[12:17] <jnthn> Yeah

[12:17] <jnthn> Hmmmm.

[12:17] <jnthn> Implemented what I thought would be a solution and it does something awful.

[12:23] *** Guest5089 joined
[12:29] <jnthn> (It was 'cus I did something silly.)

[12:37] *** zakharyas joined
[12:49] <Guest5089> hmm, SEGV in several spectests

[12:52] *** brrt joined
[12:52] <Guest5089> perhaps that's what jnthn is grumbling about above

[12:54] <Guest5089> disappears with MVM_JIT_DISABLE=1

[12:54] <timotimo> you're on the more-pea branch?

[12:54] <Guest5089> master

[12:54] <timotimo> oh

[12:54] <timotimo> this actually landed on master

[12:55] <Guest5089> do you think that was a mistake?

[12:55] <timotimo> i don't think so, but if it segfaults, that's not so good

[12:57] <Guest5089> Thread 1 "moar" received signal SIGSEGV, Segmentation fault.

[12:57] <jnthn> The bigint stuff went into master, since it's not related to PEA

[12:57] <Guest5089> 0x00007ffff766e1cd in force_bigint (tc=0x557e4360, body=0x555556f65e80, idx=1) at src/math/bigintops.c:170

[12:58] <brrt> timotimo: I think you're allowed to use '==' on structs

[12:58] <timotimo> that's cool

[12:58] <timotimo> so it surely even ignores padding bytes?

[12:58] <Guest5089> jnthn: try running t/spec/S32-temporal/DateTime.t

[12:59] <brrt> not sure if it does ignore padding bytes, no

[12:59] <jnthn> Guest5089: I had clean spectest

[12:59] <jnthn> Distracted with some other things for now

[12:59] <Guest5089> that's odd, perhaps something is wrong with my install, hmm

[13:00] <timotimo> can you find what exact access makes the thing go asplode?

[13:00] <Guest5089> sec

[13:00] <timotimo> i have a dirty moarvm locally, so rebuilding would be quite a hassle

[13:00] <timotimo> actually, i might have to go afk for a bit soon

[13:01] <Guest5089> timotimo: https://gist.github.com/dogbert17/83ae92220492d15cea1dce873328c3bb

[13:05] <timotimo> huh, how does that segfault?

[13:05] *** MasterDuke left
[13:05] <timotimo> the tc seems odd

[13:06] <Guest5089> indeed

[13:07] <timotimo> i mean, it's the jit, so the stack gets a little screwed up

[13:07] <timotimo> but still

[13:07] <Guest5089> (gdb) p *tc

[13:07] <Guest5089> Cannot access memory at address 0x557e4360

[13:08] <brrt> that does $r14 say

[13:10] <Guest5089> sigh, valgrind seems to hide the problem

[13:11] <Guest5089> (gdb) p $r14

[13:11] <Guest5089> $1 = 93824994348208

[13:11] <timotimo> m: say 93824994348208.base(16)

[13:11] <camelia> rakudo-moar a643b8be1: OUTPUT: Â«555555758CB0â¤Â»

[13:11] <timotimo> that's the proper tc pointer

[13:13] <jnthn>         /* Call the bigint comparison function. */

[13:13] <jnthn>         | mov ARG1, tc;

[13:13] <jnthn>         | mov ARG2, WORK[reg_b];

[13:13] <jnthn>         | mov ARG3, WORK[reg_c];

[13:13] <jnthn> Should that tc not be TC ?

[13:13] <jnthn> e.g. the register holding it?

[13:15] <jnthn> brrt: Can you spot anything silly in https://gist.github.com/jnthn/faa05a408bd94321a623d197740f4da0 ?

[13:16] <timotimo> you're working directly with eax, ecx, edx?

[13:17] <jnthn> Yeah. 'cus cdq and div work on specific registers

[13:17] <timotimo> ah

[13:17] <jnthn> TMP3 and TMP4 are r8 and r9, so no conflicts there

[13:17] <timotimo> of course they do

[13:18] <timotimo> right, TMP1 and TMP2 are rcx and rdx

[13:18] <jnthn> Yeah, ain't using those :)

[13:18] <timotimo> OK, that's fine at least

[13:18] <timotimo> i assume the code above the last hunk is also fine, since calling MVM_bigint_fallback_mul probably already worked fine?

[13:19] <timotimo> i wonder if | jo >1 is fine without braces around it

[13:19] <jnthn> ~Yeah

[13:19] <timotimo> good

[13:19] <timotimo> good to hear dynasm does The Right Thing there

[13:19] <timotimo> with regards to amount of statements

[13:20] <jnthn> Wrapping it in braces doesn't help. no

[13:20] <timotimo> OK

[13:20] <jnthn> The erorr is utterly strange

[13:20] <timotimo> i've seen worse back when i didn't know about floating point registers in the calling convention :P

[13:21] <jnthn> Cannot invoke null object

[13:21] <jnthn>    at SETTING::src/core/Rat.pm6:49  (/home/jnthn/dev/MoarVM/install/bin/../share/perl6/runtime/CORE.setting.moarvm:DIVIDE_NUMBERS)

[13:21] <jnthn>  from SETTING::src/core/Rat.pm6:133  (/home/jnthn/dev/MoarVM/install/bin/../share/perl6/runtime/CORE.setting.moarvm:infix:<+>)

[13:21] <timotimo> where sometimes it just so happened to have the right value in the register regardless

[13:21] <timotimo> does turning off the exprjit make a difference btw?

[13:21] <jnthn> No

[13:23] <timotimo> OK

[13:30] <timotimo> just to make sure there are no gremlins; make clean everywhere? rakudo does have some extops, but i don't think they access MVMThreadContext fields directly

[13:34] <brrt> jnthn: will look

[13:34] <jnthn> I've been putting jmp >1 at various places (that is, esape to the fallback)

[13:35] <brrt> why `xor eax, edx`

[13:36] <brrt> and, it may be the case that the '4:' label is reused somewhere?

[13:37] <jnthn> brrt: Technique taken from https://helloacm.com/optimized-abs-function-in-assembly/

[13:37] <jnthn> Do labels have to be numbers, or can they be names?

[13:37] <jnthn> But yeah, I've been putting in a jmp >1 in various places (e.g. escape to the slow path)

[13:37] <brrt> global labels can be names

[13:38] <brrt> what I typically do is put an 'int 3' and step through

[13:38] <brrt> but that works in lldb, not in gdb

[13:38] <jnthn> And if I put it before the jnz >4 all is well

[13:38] <jnthn> If put it after the jnz >4 (e.g. when we should have fallen out of the loop) I get the error

[13:38] <jnthn> How do the label numbers actually work?

[13:38] <brrt> luajitish.

[13:39] <brrt> but to be more precise, there's a 10-item array of offsets that are computed in one of the three dynasm phases

[13:39] <brrt> and updated

[13:39] <jnthn> If I use the label 5 instead of 4 I get a SEGV

[13:40] <brrt> Yes, I think I made label 5 special

[13:40] <jnthn> 6 also segvs

[13:40] <timotimo> 4 non-special labels should be enough for anybody

[13:40] <jnthn> 7 too :P

[13:40] <jnthn> Well, 4 is busted also ;)

[13:40] <timotimo> d'oh :)

[13:41] <brrt> hmm

[13:41] <jnthn> Just differently

[13:41] <brrt> :-D

[13:41] <jnthn> But yeah, it seems to be something about the labels

[13:41] <brrt> actually, I think label 4 should be safe to use

[13:41] <brrt> oh, hang on

[13:41] <brrt> this is a loop backwards, isn't it

[13:41] <jnthn> I don't have to do anything special 'cus it's a back branch, do I?

[13:41] <jnthn> Yes

[13:42] <brrt> yes, you do

[13:42] <brrt> no, I think label 4 should be

[13:42] <brrt> https://corsix.github.io/dynasm-doc/instructions.html

[13:42] <brrt> under 'Jump Targets'

[13:43] <brrt> a backwards jump is spelled 'jmp <4'

[13:43] <jnthn> oh!

[13:43] <brrt> there's a mechanical (i'm going to avoid callit it 'sane') reason for that

[13:43] <jnthn> And there we have it

[13:44] <jnthn> Thanks, brrt :)

[13:44] <jnthn> Thanks timotimo for ideas also :)

[13:44] <brrt> :-)

[13:44] <timotimo> glad to see it was figured out :)

[13:45] <jnthn> The devirt of that is worth something; I didn't do the div_I yet so it's materializing it sharpish

[13:53] <Geth> Â¦ MoarVM/more-pea: f7c7db200a | (Jonathan Worthington)++ | src/spesh/pea.c

[13:53] <Geth> Â¦ MoarVM/more-pea: Avoid some spurious PEA bailouts

[13:53] <Geth> Â¦ MoarVM/more-pea:

[13:53] <Geth> Â¦ MoarVM/more-pea: When we reach a merge point in the graph, if the allocation was only

[13:53] <Geth> Â¦ MoarVM/more-pea: seen on one side and not the other, then it cannot possibly need a

[13:53] <Geth> Â¦ MoarVM/more-pea: materialization on the side where it wasn't yet created. We don't

[13:53] <Geth> Â¦ MoarVM/more-pea: insert such materializations yet, but rather bail out; still, fixing

[13:53] <Geth> Â¦ MoarVM/more-pea: this means we bail out in some cases where we didn't need to do so.

[13:53] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/f7c7db200a

[13:54] <jnthn> That was the thing that I needed to do so we even attempted gcd_I devirt :)

[13:55] <jnthn> Now, dare I attempt div_I... :)

[14:04] <jnthn> hah, it won't help yet, for reasons

[14:05] <Geth> Â¦ MoarVM/more-pea: 0e2be43fc8 | (Jonathan Worthington)++ | src/spesh/facts.c

[14:05] <Geth> Â¦ MoarVM/more-pea: A couple more facts

[14:05] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/0e2be43fc8

[14:30] *** domidumont joined
[14:33] *** domidumont1 left
[14:36] *** mornfall left
[14:37] *** mornfall joined
[14:38] *** lizmat joined
[14:40] *** lizmat_ joined
[14:43] *** lizmat left
[14:47] *** lizmat_ left
[14:49] *** robertle left
[14:58] *** brrt left
[15:23] *** domidumont left
[15:55] *** zakharyas left
[15:55] <Geth> Â¦ MoarVM/more-pea: 5eff90b3ce | (Jonathan Worthington)++ | 10 files

[15:55] <Geth> Â¦ MoarVM/more-pea: Devirtualization and EA for further bigint ops

[15:55] <Geth> Â¦ MoarVM/more-pea:

[15:55] <Geth> Â¦ MoarVM/more-pea: * gcd_I, with the nice tight GCD algorithm inlined direclty into the

[15:55] <Geth> Â¦ MoarVM/more-pea:   machine code

[15:55] <Geth> Â¦ MoarVM/more-pea: * cmp_I, eq_I, ne_I, lt_I, le_I, gt_i, and ge_I

[15:55] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/5eff90b3ce

[16:27] *** lizmat joined
[16:27] <jnthn> I think we do Rat + in about half the time we did before I started on this bigint EA work, plus my early bigint opts.

[16:27] <jnthn> *earlier

[16:28] <jnthn> And not finished yet :)

[16:28] <jnthn> Though we do have a slight problem in that I was hoping entire Rat objects would go away, not just the calcs inside them

[16:28] <jnthn> But it all goes rather awkwardly because of the Num failover

[16:29] <jnthn> Or at least, that's what'll block it later

[16:29] *** lizmat left
[16:29] <jnthn> Still, if we can eliminate all the intermediate allocations during the calc, we're a long way ahead.

[16:30] *** lizmat joined
[16:55] *** robertle joined
[16:56] *** domidumont joined
[17:09] <Geth> Â¦ MoarVM/more-pea: da088863a4 | (Jonathan Worthington)++ | 10 files

[17:09] <Geth> Â¦ MoarVM/more-pea: Devirtualize and EA for neg_I, abs_I

[17:09] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/da088863a4

[17:09] <Geth> Â¦ MoarVM/more-pea: 201e8e6b0b | (Jonathan Worthington)++ | src/spesh/pea.c

[17:09] <Geth> Â¦ MoarVM/more-pea: Log which bigint ops were optimized in EA

[17:09] <Geth> Â¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/201e8e6b0b

[17:11] <jnthn> I guess the only common ops left to go are div and mod

[17:11] <jnthn> But not today :)

[17:13] *** domidumont left
[17:39] <Geth> Â¦ MoarVM: 248e2980af | (Jonathan Worthington)++ | src/jit/x64/emit.dasc

[17:39] <Geth> Â¦ MoarVM: Fix wrong argument in JIT of cmp_I

[17:39] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/248e2980af

[17:39] <jnthn> That should fix the SEGV that was reported earlier

[17:40] <jnthn> It's been wrong for ages, and nobody noticed until today when I used the tc argument :P

[17:43] <jnthn> m: say 306 / 491

[17:43] <camelia> rakudo-moar a643b8be1: OUTPUT: Â«0.623218â¤Â»

[17:43] <jnthn> Quite a lot less GC runs in that Rat benchmark now also :)

[17:45] <timotimo> very nice

[17:48] <jnthn> Next week I'll take a look at inserting materializations at merge points that require them, and also at fixing up the representation we produce to get rid of the broken SSA issues

[17:49] <jnthn> And probably put in div_I and mod_I devirt/EA too, though if anyone wants to steal that part (or indeed any of the remaning operators) then go ahead. :)

[17:49] <jnthn> Note that the branch isn't in a very good state in terms of stuff working :)

[17:49] <jnthn> I'm getting towards the point where I've done the features I want in it, and then the focus will switch to fixing it up and preparing for merge.

[17:50] <jnthn> There's at least one problem with deopt left.

[17:50] *** zakharyas joined
[17:53] <jnthn> Off to rest :) o/

[18:56] *** zakharyas left
[19:31] *** lizmat left
[19:41] *** scovit left
[19:48] *** scovit joined
[22:20] *** MasterDuke joined
[22:20] *** MasterDuke left
[22:20] *** MasterDuke joined
[23:50] *** Elronnd left
