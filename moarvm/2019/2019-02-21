[00:16] *** patrickb left
[01:11] *** MasterDuke joined
[01:12] *** MasterDuke left
[01:12] *** MasterDuke joined
[02:01] <MasterDuke> samcv, timotimo: if we get here https://github.com/MoarVM/MoarVM/blob/master/src/strings/utf8.c#L437, would it be possible to include any of the buffer (last couple bytes maybe) in the error message?

[02:04] <timotimo> it is possible. would you like to include the "wrong" bytes?

[02:05] <MasterDuke> probably, and maybe a couple before it goes "wrong" so one can easily find where that is

[02:05] <timotimo> you can try MVM_exception_throw_adhoc_free(tc, "Malformed UTF-8 - near bytes %02x %02x %02x", { buffer, NULL }, buffer[pos - 2], buffer[pos - 1], buffer[pos]); or something similar

[02:06] <timotimo> can also output the pos, though if that's the streaming decoder, the number may not correspond to something the user could use

[02:08] <MasterDuke> cool

[02:10] *** lizmat left
[02:10] <MasterDuke> i'm on a random kick to add context to any moarvm exceptions where it would make sense

[02:11] <timotimo> cool

[02:11] <timotimo> you know

[02:11] <MasterDuke> oh, any possibility the buffer could be less than three bytes big?

[02:11] <timotimo> yeah, possible

[02:13] <timotimo> there's a whole lot of exceptions (including checks) like "is this object's REPRID the right one? if not throw an exception" and I think they could be turned into a function - maybe an inline one, though the error path shouldn't be taken often, so maybe it should be a function or actually a macro and a function?! with an MVM_UNLIKELY for the check

[02:14] <timotimo> optional, of course

[02:15] <MasterDuke> i haven't seen any of those yet (just started working my way up from the bottom of my git grep results), but i'll give that a shot when i see them

[02:15] <timotimo> many of them in interp.c

[02:34] <MasterDuke> what's the difference between PRId64 and PRIi64?

[02:36] <timotimo> #define PRId64    "lld"

[02:36] <timotimo> #define PRIi64    "lli"

[02:37] <timotimo> the man page for sprintf doesn't explain a/the difference

[02:38] <MasterDuke> we only have 12 uses of PRIi64, but 43 of PRId64

[02:39] <MasterDuke> related question, what should i use for size_t?

[02:40] <timotimo> good question :o

[02:42] <timotimo> stackoverflow says "cast to unsigned long and use the macro for that"

[02:43] <MasterDuke> do we keep to C89 or C99?

[02:43] <timotimo> C89 aka "what msvc definitely can do"

[02:44] <MasterDuke> right, ugh

[02:44] <timotimo> even though possibly everything else we have has more C99 in it than msvc does

[02:52] <MasterDuke> a comment on that answer says it can break for 64-bit windows

[02:53] <timotimo> oh my god

[02:53] <timotimo> well then

[02:53] <timotimo> cast to uint64_t i guess?!

[02:54] <MasterDuke> that's the next comment, and then the one after *that* says uint64_t is C99

[02:56] <MasterDuke> final comment says "It [cast to unsigned long] will only fail if the numerical value being printed exceeds ulong_max. [...]"

[02:58] <MasterDuke> i'm going to go with cast to unsigned long and will accept suggestions on the PR

[03:04] <timotimo> OK, OK, use MVMuint64 :)

[03:08] <MasterDuke> serious suggestion?

[03:29] <timotimo> well, it ought to at least work

[03:35] <MasterDuke> oh, btw, i don't think you can inline the thing you pass to MVM_exception_throw_adhoc_free like that

[03:45] <timotimo> oh

[03:45] <timotimo> in that case i'll just have to pretend i meant it to be pseudocode all along!

[03:47] <timotimo> found another way to break things with nativecall, the JIT, and "is rw" arguments. this time an int64 argument was coming back 0 even though it should have had a value

[03:49] <MasterDuke> sounds related to the other thing

[03:52] <timotimo> it's probably the same thing, yeah

[06:33] *** nebuchadnezzar joined
[07:48] *** lizmat joined
[08:09] <nine> Considering that there are numerous options to compile C99 code on Windows nowadays, including options to do so in Visual Studio, I seriously wonder if sticking to C89 is worth the pain and developer time.

[08:38] *** Kaiepi left
[10:50] *** Kaiepi joined
[11:04] <dogbert2_> hello, is everyone still suffering from cold/flu ?

[12:19] * lizmat sorta recovered from that, only to bust up her knee again

[12:20] <lizmat> which is just very tiring

[12:33] *** lucasb joined
[12:56] <dogbert2_> lizmat: sorry about that. Is it a bicycle related injury?

[12:57] <lizmat> well, the original source of the problem is indeed a bicycle accident in 1981

[12:57] <lizmat> that made my left knee damaged and ~30 years "older" than my right knee

[12:58] <lizmat> which makes my left knee 92 years old now, so you get the picture...  :-)

[12:58] <lizmat> last Saturday I went cycling and did something wrong with my knee after about 7km

[12:59] <lizmat> instead of calling it a day, I stubbornly decided it wasn't all that bad and continued cycling for another 18km

[12:59] <lizmat> :-(

[13:00] <lizmat> it's slowly getting better again... needs rest

[13:08] <dogbert2_> perhaps some relaxing hacking :)

[13:11] <lizmat> yup

[13:12] <dogbert2_> opts or bugfixes?

[13:12] <lizmat> alas, not a lot of time for Perl 6 atm, having to update ~24 year Perl 5 old code from mod_perl to psgi

[13:13] <lizmat> it's *really* weird to look at your own code that originated about 24 years ago

[13:15] <lizmat> those were different days  :-)

[13:15] <lizmat> meanwhile if there is a blocker that I could help fix, please let me know

[13:16] <lizmat> afaik, all current  blockers are above my level of capabilities

[13:27] <dogbert2_> it would seem as if everyone capable of fixing the blockers are down with either a cold or the flu atm

[13:27] <lizmat> yeah, life sucks  :-)

[13:28] <dogbert2_> indeed :)

[15:17] *** lizmat left
[17:15] *** leedo left
[17:41] *** leedo joined
[19:42] <nine> r23 from the spesh log should be tc->cur_frame->work[23] shouldn't it?

[19:45] <timotimo> i believe so

[19:48] <nine> I may have a piece of the #2706 puzzle

[19:53] <nine> We may have an issue with rw args to native calls, when the JIT fails to compile the call graph the nativeinvoke_o is in.

[19:54] <nine> Happens for example because we're missing the case for MVM_OP_getlexref_u8.

[19:55] <nine> optimize_getarg works on the assumption that the JIT compiler will not emit any code for the corresponding arg_* ops for a nativeinvoke and instead the values will be taken from the WORK register.

[19:56] <nine> But in our case, the JIT bails and the arg_i is still there. So the address of the arg buffer is passed to the native function and this is where the set value ends up in.

[19:57] <nine> But optimize_getarg has turned the getarg_i op into a set from the WORK register, ignoring the value in the arg buffer.

[19:58] <nine> In other words: we handle the interpreted version and the speshed + JIT compiled version but not the only speshed version

[20:05] <nine> So the obvious solution is to just improve the JITs coverage of our ops to 100 %

[20:37] <timotimo> oh damn, that's a good analysis

[20:46] *** lizmat joined
[20:48] *** Kaiepi left
[20:58] *** lizmat left
[21:01] *** lizmat joined
[21:12] *** lizmat left
[21:32] *** lucasb left
[22:42] *** MasterDuke left
[22:43] *** Kaiepi joined
[23:57] *** Kaiepi left
[23:59] *** lizmat joined
