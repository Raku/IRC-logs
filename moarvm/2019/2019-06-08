[00:49] <Geth> ¦ MoarVM: kazcw++ created pull request #1116: fix rakudo/rakudo#2965

[00:49] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1116

[00:49] <synopsebot> RAKUDO#2965 [open]: https://github.com/rakudo/rakudo/issues/2965 I can't HAS stub?

[01:13] *** evalable6 left
[01:16] *** evalable6 joined
[03:36] *** Kaiepi left
[03:38] *** Kaiepi joined
[03:42] *** Kaiepi left
[03:42] *** Kaiepi joined
[03:47] *** Kaiepi left
[03:51] *** Kaiepi joined
[06:43] *** notable6 left
[06:43] *** nativecallable6 left
[06:43] *** coverable6 left
[06:43] *** evalable6 left
[06:43] *** benchable6 left
[06:43] *** undersightable6 left
[06:43] *** unicodable6 left
[06:43] *** quotable6 left
[06:43] *** reportable6 left
[06:43] *** releasable6 left
[06:43] *** squashable6 left
[06:43] *** greppable6 left
[06:43] *** bisectable6 left
[06:43] *** bloatable6 left
[06:43] *** statisfiable6 left
[06:43] *** committable6 left
[06:43] *** shareable6 left
[06:44] *** releasable6 joined
[06:44] *** nativecallable6 joined
[06:44] *** quotable6 joined
[06:44] *** statisfiable6 joined
[06:45] *** shareable6 joined
[06:45] *** greppable6 joined
[06:45] *** coverable6 joined
[06:45] *** squashable6 joined
[06:46] *** undersightable6 joined
[06:46] *** reportable6 joined
[06:46] *** bloatable6 joined
[06:47] *** committable6 joined
[06:47] *** notable6 joined
[06:47] *** unicodable6 joined
[06:47] *** benchable6 joined
[06:47] *** evalable6 joined
[06:48] *** bisectable6 joined
[07:19] *** robertle joined
[07:39] *** domidumont joined
[08:59] *** sena_kun joined
[09:08] *** brrt joined
[09:31] *** brrt left
[12:18] *** brrt joined
[12:47] *** brrt left
[13:28] *** lucasb joined
[13:35] *** pamplemousse joined
[13:54] *** pamplemousse left
[14:04] *** domidumont left
[14:27] *** brrt joined
[14:36] <brrt> ]\o

[14:39] <jnthn> o/ brrt

[14:40] <brrt> ohai jnthn

[14:40] <brrt> I didn't get to bugfixing yet

[14:42] <brrt> can't even compile moar

[14:45] <jnthn> Oh?

[14:51] <timotimo> try reinstalling the OS

[15:14] <Guest12727> o/

[15:15] <Guest12727> brrt: is moar causing you trouble?

[15:22] <Guest12727> jnthn, brrt: I've tried to debug the expr jit problem (in an amateurish way)

[15:22] <Guest12727> all roads seems to lead towards this template: https://github.com/MoarVM/MoarVM/blob/master/src/jit/core_templates.expr#L746

[15:54] *** brrt left
[16:09] *** domidumont joined
[16:18] <Geth> ¦ MoarVM: kazcw++ created pull request #1117: fix warning in Configure in non-relocatable builds

[16:18] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1117

[17:07] *** brrt joined
[17:08] <Guest12727> o/ brrt

[17:17] <Geth> ¦ MoarVM: Kaiepi++ created pull request #1118: Fix miscellaneous compiler flag passing on OpenBSD

[17:17] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1118

[17:18] <Kaiepi> reaaalllly should've checked the makefile when i made the original commit to see if anything was wrong

[17:18] *** lucasb left
[17:19] <brrt> \o Guest12727

[17:19] <brrt> interesting

[17:19] <brrt> I meant to say, I can't compile rakudo, not moar

[17:19] <brrt> moar compiles just fine

[17:19] <Kaiepi> it's the moar runner right?

[17:20] <Kaiepi> do you have NQP_HOME/PERL6_HOME configured? if so, that's probably why

[17:20] <Kaiepi> i have a pullreq up to fix that since i ran into that a few days ago

[17:20] <Guest12727> brrt: I tried 'bisecting' by removing templates

[17:20] <Kaiepi> oh my bad i didn't read up

[17:21] <Guest12727> removing the linked template makes hte spectest pass on jnthn's branches

[17:21] <jnthn> brrt: If you're trying to compile my p6o-setup MoarVM branch: you need the Rakudo branch of the same name, otherwise it won't build

[17:21] * Guest12727 dogbert17 in disguise

[17:22] <jnthn> If you do have that, I've no idea, in that I've built that combo on multiple machines :)

[17:22] <jnthn> dinner, bbl

[17:28] <timotimo> i imagine making the exprjit disengage whenever it sees a "create" can prevent many other ops from being considered

[17:34] <Guest12727> I guess that's a possibility

[17:47] *** brrt left
[18:33] *** brrt joined
[18:54] *** domidumont left
[21:01] <brrt> ok, now I have rakudo working

[21:01] <brrt> in the p6o-setup branch

[21:01] <brrt> lets see if i can reproduce failures

[21:02] <dogbert17> yay

[21:03] <dogbert17> you should also double check that you have the following commit methinks: https://github.com/rakudo/rakudo/commit/bd2ceefd5cb4ee9f0cd43b332fdffdc78dcfc645

[21:06] <brrt> ehm, is that in p6o-setup?

[21:08] <dogbert17> I don't think so

[21:09] *** sena_kun left
[21:12] <ugexe> github has still not answered my plea to open sponsorship up to jnthn :/

[21:13] <ugexe> reini urban got in already though

[21:15] <brrt> t/spec/S03-sequence/basic.t is one that appears to fail

[21:15] <brrt> what kind of sponsorship, ugexe?

[21:15] <ugexe> the max amount (at least for reini) was a whopping $6/month though, so not gonna bring in any real money without sheer numbers

[21:16] <ugexe> its just a thing github added to let people give you money

[21:16] <ugexe> https://github.com/rurban/ see this profile

[21:16] <ugexe> click "Sponsor" to see the options

[21:17] <dogbert17> brrt: yes, that's one

[21:18] <brrt> ok, awesome

[21:31] <brrt> dogbert17: anything I can do to make that more repeatable...

[21:31] <brrt> as i, not solely crashing in rakudo spectest

[21:38] <dogbert17> I can't get it to crash every time but making the nursery smaller definitely helps

[21:38] <brrt> let's try that

[21:39] <dogbert17> I set it to (16384 * 2), don't know what numbers jnthn used though

[21:41] <brrt> yep, that does the trick

[21:41] <dogbert17> one interesting, at least to me, thing is that if moarvm is built with --no-optimize the fail is a broken assertion otherwise it's a SEGV

[21:42] <dogbert17> i.e. moar: src/6model/sc.c:401: MVM_SC_WB_OBJ: Assertion `!(obj->header.flags & MVM_CF_FORWARDER_VALID)' failed.

[21:47] <brrt> yep

[21:47] <brrt> as it should be

[21:53] <dogbert17> interesting, I thought it was controlled by the debug option --debug

[21:57] <brrt> I think with optimize, some of those things may be eliminated

[21:57] <brrt> idk actually

[21:58] <brrt> hm, the output of jit-bisect looks fairly innocuous

[22:02] <dogbert17> oops, I guess that's not what you were hoping for?

[22:03] <brrt> appears to depend on inlining

[22:03] <brrt> no

[22:03] <brrt> I want somethin that looks guilty :-P

[22:04] <dogbert17> :)

[22:25] *** Kaiepi left
[22:30] *** Kaiepi joined
[22:34] <jnthn> Ah, I shoulda mentioned that small nursery helping tease it out, yes

[22:34] <jnthn> Alas, setting GC_DEBUG doesn't help give a better clue

[22:35] <jnthn> And yes, the bissect output confused me too

[22:36] <brrt> yes, the bisect is useless

[22:40] <brrt> now.. I get a block that points to sp_fastcreate, but no indication that the expr JIT ran on that block

[22:41] <jnthn> I thought hash rand mgiht be to blame, but then forced (in moar.c) the random values to be 0 and still got a confusing result

[22:43] <brrt> fastcreate theory can be eliminated;

[22:43] <brrt> oh, and appears to be inline sensitive?

[22:43] <brrt> at least in this case

[22:44] <dogbert17> and the create template?

[22:45] <brrt> yeah, that fixes it

[22:45] <Kaiepi> openbsd has malloc_conceal and calloc_conceal functions, which call mmap with MAP_CONCEAL and epxlicitly discard the memory allocated on free

[22:45] <Kaiepi> is there anywhere this would be useful?

[22:45] <dogbert17> but it doesn't give any clues I guess

[22:46] <brrt> well, it kind of does...

[22:46] <dogbert17> that sounds promising

[22:48] <Kaiepi> mainly malloc_conceal and calloc_conceal would be used for memory that should be hidden from coredumps

[22:49] <brrt> intersting

[22:49] <brrt> ok, I have one theory on why 'create' could fail with a small nursery

[22:50] <brrt> - template allocates a value

[22:51] <brrt> ..., hang on.

[22:52] <dogbert17> oh, the suspense ...

[22:54] * timotimo is shivering in antici...

[22:55] <brrt> Or maybe the rain...

[22:55] <brrt> anyway

[22:56] <brrt> in the create template, we first allocate an object, then initialize, then assign to memory

[22:56] <brrt> intialize is a function call.

[22:56] <brrt> it will cause the $obj value to be spilled to memory

[22:56] <brrt> Normally, when we spill a value, we mark it as an object for the garbage collector

[22:58] <brrt> However, because '$obj' isn't associated with a register (and the template is 'destructive'), we never assign a type to it, so we don't mark its temporary storage space as object space

[22:58] <brrt> so the GC will not visit it, nor update the pointer

[22:58] <brrt> the fix is, if correct, simple

[23:00] <brrt> we simply change the order of the 'store' and the call to initialize

[23:00] <brrt> as an added bonus, we no longer have to spill and preserve '$obj'

[23:00] <brrt> yep, that seems to work....

[23:01] <jnthn> Ah, that fits very well, because slow-path `create` is now more likely to allocate on initialize (however, other things also could before)

[23:02] <brrt> jnthn: can I push a fix to the p6o-setup branch?

[23:02] <brrt> maybe better to master...

[23:04] <timotimo> huh. has this always been a problem?

[23:05] <brrt> yes

[23:05] <jnthn> brrt: I don't mind, but it's maybe better to master, in that not sure when to merge my branch

[23:05] <jnthn> I've some upcoming trip, and don't want to be on the hook to fix a release blocker bug :)

[23:09] <Geth> ¦ MoarVM: kazcw++ created pull request #1119: enforce wb in get_attribute of C reprs

[23:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1119

[23:09] <Geth> ¦ MoarVM: b55658b99f | (Bart Wiegmans)++ | src/jit/core_templates.expr

[23:09] <Geth> ¦ MoarVM: [JIT] Template for 'create' should store first then initialize

[23:09] <Geth> ¦ MoarVM:

[23:09] <Geth> ¦ MoarVM: If we call 'initialize' before storing '$obj' to memory, the '$obj' is

[23:09] <Geth> ¦ MoarVM: treated as an (anonymous) temporary value, and its location when

[23:09] <Geth> ¦ MoarVM: spilled to memory is not marked as an object.

[23:09] <Geth> ¦ MoarVM: If GC is then activated betwen the 'allocate' and the 'initialize'

[23:09] <Geth> ¦ MoarVM: calls, the (spilled) value of $obj will be pointing to the old

[23:09] <Geth> ¦ MoarVM: <…commit message has 8 more lines…>

[23:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b55658b99f

[23:09] <brrt> and so I remove the cause... (but not the symptom?)

[23:09] <timotimo> gasp

[23:09] <timotimo> y'all see that PR?

[23:12] <brrt> did

[23:12] <brrt> I'm inclined to believe it

[23:14] <timotimo> i can't believe somebody found out how to fix the gumbo thing

[23:14] <timotimo> that is so good

[23:15] <timotimo> i don't think i saw kazcw before a week or two ago and there's been a few good-looking PRs already

[23:27] <brrt> what's the gumbo thing?

[23:29] * brrt sleep &

[23:29] *** brrt left
[23:32] <timotimo> gumbo is an xml parser library in C and skarsnik has had an open ticket for like three years that it sometimes crashes

[23:38] *** travis-ci joined
[23:38] <travis-ci> MoarVM build passed. Bart Wiegmans '[JIT] Template for 'create' should store first then initialize

[23:38] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/543259464 https://github.com/MoarVM/MoarVM/compare/e865f43df0ae...b55658b99f71

[23:38] *** travis-ci left
