[00:10] *** anatofuz joined
[00:23] *** anatofuz left
[00:41] *** lucasb left
[00:53] *** anatofuz joined
[01:45] *** anatofuz left
[01:46] *** anatofuz joined
[03:24] *** anatofuz left
[03:27] *** anatofuz joined
[03:32] *** anatofuz left
[04:03] *** anatofuz joined
[05:44] *** anatofuz left
[05:45] *** anatofuz joined
[06:17] *** anatofuz left
[06:19] *** anatofuz joined
[06:22] *** anatofuz left
[06:22] *** anatofuz joined
[07:33] *** domidumont joined
[07:35] <nine> MasterDuke: well I didn't find any easy wins anymore.

[07:56] *** sena_kun joined
[08:22] *** domidumont left
[08:59] *** anatofuz left
[09:40] <nine> Oh, t/06-telemetry/01-basic.t also has some tight timeouts!

[09:44] <nine> So I'm down to t/05-messages/10-warnings.t and t/02-rakudo/repl.t

[10:55] <AlexDaniel> again, it would be awesome to have a list of test files with tight timeouts

[11:34] <nine> Well, are they actually tight? Note that I'm running in conditions where make test takes about 5 days instead of half a minute.

[11:39] <lizmat> hmmm.. building moar gives me new warnings, I think:

[11:39] <lizmat> src/strings/utf8.c:173:13: warning: loop not vectorized: the optimizer was

[11:39] <lizmat>       unable to perform the requested transformation; the transformation might

[11:39] <lizmat>       be disabled or specified as part of an unsupported transformation ordering

[11:39] <lizmat>       [-Wpass-failed=transform-warning]

[11:54] <dogbert17> five days to run make test! You must have made more changes than just MVMGC_DEBUG=3 ?

[11:57] <Geth_> ¦ MoarVM/gc_torture: 9d468afcaf | (Stefan Seifert)++ | 7 files

[11:57] <Geth_> ¦ MoarVM/gc_torture: Run the GC on every allocation and keep objects in the nursery for 32 GC runs

[11:57] <Geth_> ¦ MoarVM/gc_torture: review: https://github.com/MoarVM/MoarVM/commit/9d468afcaf

[11:57] <nine> dogbert17: yes that ^^^

[11:58] <nine> dogbert17: turned out that running GC all the time also promotes objects to gen2 very quickly and then they won't be moved again. So GC_DEBUG=3 missed cases where that happened before the object was passed to code with missing MVMROOT

[12:10] <dogbert17> nine: I might have to try that branch just for fun :)

[12:10] *** lucasb joined
[12:14] <nine> Well it made me prefer gdb --args perl6 ... over perl6-gdb-m ... because the latter will take a couple of minutes just to show the additional help text ;)

[12:17] <timotimo> d'oh :D

[12:18] <timotimo> we should be using --optimize=off for the help text display code :D

[12:28] <dogbert17> hm, I can't see that branch

[12:35] <timotimo> oh yeah, Geth_ is actually from another dimension, reporting what happens there to our dimension over here

[12:35] <timotimo> hence the _

[12:35] <timotimo> you'll have to git_ pull to get that branch

[12:40] *** anatofuz joined
[12:44] <dogbert17> could it really be so easy ...

[12:44] <dogbert17> and timotimo was right again :)

[12:47] <dogbert17> haha, this branch make valgrind look like a speed demon :)

[12:54] <nine> dogbert17: pro tip: run it _with_ valgrind to get those extra days where you don't have to worry about missing any output ;)

[12:55] <dogbert17> I got 'Unhandled exception: This representation (VMIter) does not support associative access (for type BOOTIter)' when trying to run t/05-messages/10-warnings.t

[12:55] <dogbert17> I guess I made some kind of mistake

[12:58] <nine> You probably need to recompile the perl6-m executable

[12:59] <nine> The branch is based on fix_spesh_plugin_guard_set_threading_issue which adds fields to MVMInstance and MVMThreadContext

[13:00] <nine> May also need to recompile dynext/*

[13:01] <dogbert17> won't the recompilation take hours

[13:02] <nine> Probably much longer :) Turn off GC_DEBUG and reduce MVM_KEEP_FROMSPACES for the recompilation and change them back later

[13:02] <dogbert17> ok, will give it a go

[13:03] <dogbert17> +++ Compiling blib/Perl6/Metamodel.moarvm

[13:03] <dogbert17> Segmentation fault (core dumped)

[13:03] <nine> Actually I have no idea how long a rakudo compile would take. I'd guess at least a week. A month wouldn't surprise me at all as there will be loads and loads of objects around that take their time getting to gen2

[13:04] <nine> did you do a full make clean?

[13:05] <dogbert17> no, opps

[13:05] <dogbert17> now things are looking better ...

[13:18] <dogbert17> nah, can't get it working, it SEGV's in nqp while building rakudo

[13:21] <nine> Could be that nqp needs a recompile, too, since nqp-m is also a binary.

[13:22] <nine> Sorry, don't remember what exactly I had to do. For obvious reasons I tried to do it as rarely as possible

[13:24] <dogbert17> I can understand that :)

[14:21] *** anatofuz left
[14:23] *** anatofuz joined
[14:58] *** anatofuz left
[15:11] *** anatofuz joined
[15:15] *** anatofuz left
[15:58] *** Kaiepi left
[16:58] *** cinch left
[18:29] *** evalable6 left
[18:34] *** evalable6 joined
[19:49] *** AlexDaniel left
[19:49] *** AlexDaniel joined
[19:50] *** AlexDaniel left
[19:50] *** AlexDaniel joined
[20:05] *** sena_kun left
[20:56] *** Kaiepi joined
[22:46] *** anatofuz joined
[23:03] *** anatofuz left
[23:04] *** anatofuz joined
[23:32] *** anatofuz left
[23:56] *** anatofuz joined
