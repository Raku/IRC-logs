[00:33] <AlexDaniel> timotimo: fwiw

[00:33] <AlexDaniel> http://valgrind.org/docs/manual/ms-manual.html

[02:26] *** dalek left
[02:49] *** Geth left
[05:01] <ugexe> how come the various uses of uv_fs_t req ( such as https://github.com/MoarVM/MoarVM/blob/a5dd7652d4ca0ff67aac5c7809958e030abcbacf/src/io/fileops.c#L125 ) don't call seem to leak memory despite never calling uv_fs_req_cleanup(&req) ( http://docs.libuv.org/en/v1.x/fs.html#c.uv_fs_req_cleanup ) ?

[05:01] <ugexe> s/dont call seem/dont seem/

[08:21] *** dalek joined
[08:21] *** synopsebot left
[08:21] *** p6lert_ left
[08:21] *** p6lert joined
[08:21] *** synopsebot_ joined
[08:21] *** Geth joined
[10:32] <timotimo> hm. so why would this thread clear uncopied from the nursery, but not have logged a gc start?

[10:32] <timotimo> oh, does that happen when a different thread takes over work for a blocked thread?

[10:32] <timotimo> that could be it

[10:37] <timotimo> yeah

[10:45] <timotimo> FWIW, adding a "how often was this type copied to the gen2" stat is a rather simple addition

[10:47] <timotimo> now let's get that data into the output

[13:07] <Geth> Â¦ MoarVM: Kaiepi++ created pull request #1088: Remove unnecessary (void *) cast in MVM_free_zero

[13:07] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1088

[14:52] *** zakharyas joined
[14:58] *** lucasb joined
[15:13] <timotimo> lizmat: what kind of stats could you think of?

[15:15] <lizmat> number of gc's, number of full collections, # call frames, inlined call frames, deopts, global deopts, OSR's, micro seconds spend in GC

[15:15] <lizmat> interpreted frames

[15:15] <timotimo> oh, that's not fun

[15:16] <lizmat> well, let's start with the fun ones then ?

[15:16] <timotimo> we code-gen "entry"/"exit" opcodes right in the code to get that information when the profiler is on

[15:16] <lizmat> ok, so that would only work with profiling

[15:16] <timotimo> those ops also have to create the whole call graph and such, which the simple stats version doesn't have to do

[15:17] <timotimo> but i'm not entirely sure if it can be done any easier

[15:17] <timotimo> deopts and osr's on the other hand is easier to do

[15:17] <lizmat> perhaps --profile should be split into two functions: one for codegenninng the entry/exit opcodes, and one for generating the HTML at the end ?

[15:17] <lizmat> --profile would do both, like before

[15:18] <timotimo> those parts are pretty far apart already

[15:18] <lizmat> --telemetry would just do the codegenning part ?

[15:18] <timotimo> oh btw, how would you feel about giving the Telemetry module a sub or method to cause a heap snapshot to be taken?

[15:19] <lizmat> would be great

[15:19] <timotimo> you can already implement it "easily" - unless a profiler is currently running i guess - by just turning profiling on and off again immediately

[15:19] <lizmat> together with something like snapper, would allow you to do this without touching the program itself

[15:19] <timotimo> yeah

[15:20] <timotimo> the regular heap snapshot profiler is "reactive", i.e. it kicks in the moment a gc happens

[15:20] <timotimo> if you have it in telemetry, it will have to force a GC to happen, because that's how the heap snapshot profiler actually works

[15:20] <timotimo> i'm also considering implementing an extremely light-weight heap snapshot mode which completely skips all the graph-y data and only outputs summaries

[15:21] <lizmat> that would also be helpful, I think

[15:21] <timotimo> those summaries will also end up in the regular heap snapshot file format as text "comments" that the heap snapshot analyzer will parse out and present

[15:21] <timotimo> so the most typical workloads can be extremely fast

[15:32] *** TimToady left
[16:23] *** domidumont joined
[16:54] <timotimo> wow, fascinating

[16:54] <timotimo> my code is trying to call .HOW on an object it gets - which is a SpeshLog object - and it does a null pointer access because the STable doesn't have a HOW_sc set

[17:08] <timotimo> ... how do i memory ...

[17:37] <MasterDuke> my grandmother's line is that as she gets older her memory gets worse, but her forgettory gets better

[17:39] <timotimo> in this case it was more about only accessing memory locations that are actually valid

[17:40] <timotimo> grumble grumble

[17:40] <timotimo> attaching the debugger to this nqp program makes it explode in a segfaulty way

[17:40] <MasterDuke> timotimo: have you seen https://www.phoronix.com/scan.php?page=news_item&px=LLVM-Clang-9.0-Time-Trace ? not directly useful to us i assume, but maybe some stuff to take inspiration from

[17:43] <timotimo> ah, interesting

[18:24] *** domidumont left
[18:55] <AlexDaniel> here's a very weird ticket: https://github.com/rakudo/rakudo/issues/2805

[18:55] <timotimo> if spesh_nodelay makes it bork, it could surely be a spesh optimization bug

[18:56] <MasterDuke> seems like some of the people in this channel could have a relevant comment here https://news.ycombinator.com/item?id=19535564

[18:56] <Geth> Â¦ MoarVM: 4900b7a212 | (Timo Paulssen)++ | src/6model/6model.c

[18:56] <Geth> Â¦ MoarVM: guard 6model_get_how against null pointers

[18:56] <Geth> Â¦ MoarVM:

[18:56] <Geth> Â¦ MoarVM: MVMSpeshLog is one example where this happens.

[18:56] <Geth> Â¦ MoarVM: Extremely unlikely to appear in user code, but

[18:56] <Geth> Â¦ MoarVM: it does in the profiler (what with being

[18:56] <Geth> Â¦ MoarVM: deallocated and everything)

[18:56] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4900b7a212

[18:56] <Geth> Â¦ MoarVM: 95094ae2e6 | (Timo Paulssen)++ | 7 files

[18:56] <Geth> Â¦ MoarVM: profiler: count objects being deallocated

[18:56] <Geth> Â¦ MoarVM:

[18:56] <Geth> Â¦ MoarVM: split this statistic into "deleted while in

[18:56] <Geth> Â¦ MoarVM: nursery and not seen before", "deleted while

[18:56] <Geth> Â¦ MoarVM: in nursery, but seen in a previous GC run",

[18:56] <Geth> Â¦ MoarVM: and "deleted while in the gen 2".

[18:57] <Geth> Â¦ MoarVM:

[18:57] <Geth> Â¦ MoarVM: Also, the stats are per-GC-run.

[18:57] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/95094ae2e6

[18:57] <Geth> Â¦ MoarVM: 3a4a47284d | (Timo Paulssen)++ | src/profiler/instrument.c

[18:57] <Geth> Â¦ MoarVM: make this code a little prettier

[18:57] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3a4a47284d

[19:00] <MasterDuke> timotimo++

[19:17] *** zakharyas left
[20:04] *** robertle left
[20:48] *** brrt joined
[20:48] <brrt> \o

[20:49] <brrt> MasterDuke: interesting link, thank you

[21:03] *** brrt` joined
[21:05] *** brrt left
[21:13] *** brrt` left
[22:02] *** brrt` joined
[22:18] *** brrt` left
[23:28] *** lucasb left
