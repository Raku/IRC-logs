[08:22] *** domidumont joined
[09:09] *** domidumont left
[09:13] *** lizmat joined
[09:19] *** patrickb joined
[09:24] *** lizmat left
[09:47] *** patrickb left
[10:33] *** lizmat joined
[10:57] *** lizmat left
[11:41] *** lucasb joined
[14:09] *** dogbert17 left
[15:11] *** lucasb left
[15:30] <timotimo> hm, now that the release has been skipped, should we merge some "merge after release" stuff, or is the next release too soon for that again?

[15:52] <MasterDuke> any reason not to merge https://github.com/MoarVM/MoarVM/pull/1040 before my intifying branches?

[16:17] *** Bastinkie joined
[16:17] *** Bastinkie left
[16:41] *** zakharyas joined
[16:50] *** brrt joined
[16:50] <brrt> \o

[17:06] <nwc10> o/

[17:13] <brrt> ohai nwc10

[17:13] <brrt> today, shall we be finally getting floating point support?

[17:13] <timotimo> whoa

[17:13] <timotimo> i can't handle the suspense

[17:14] <brrt> well, neither can I

[17:14] <brrt> 'will it compiel

[17:14] <brrt> *compile'

[17:14] <brrt> is the question

[17:17] <timotimo> i hope so :)

[17:21] <brrt> i bet I have a little more work to do before it is so

[17:29] <MasterDuke> brrt: cool, that's what's needed before we can create all those *_n templates, right?

[17:29] <brrt> yes

[17:29] <brrt> and matter of fact, I'll probably be doing that in your place

[17:29] <brrt> just to test that everything works as expected

[17:33] <timotimo> m: BEGIN say $*LANG.^find_method("TOP").^methods

[17:33] <camelia> rakudo-moar 92ebc333a: OUTPUT: «{!set_name => The 'ForeignCode' class is a Rakudo-specific␤implementation detail and has no serviceable parts inside, add_dispatchee => The 'ForeignCode' class is a Rakudo-specific␤implementation detail and has no serviceable parts inside, clone =…»

[17:35] <timotimo> i'm looking to grab an NFA object from "userspace" in perl6 code

[17:35] <timotimo> so i don't have to recompile rakudo to get stuff in the optimizer do stuff for me :)

[17:37] <MasterDuke> brrt: nice

[17:39] <timotimo> so it turns out in some random NFAs i see something like this:

[17:39] <timotimo> 27:

[17:39] <timotimo>  28 CODEPOINT S

[17:39] <timotimo>  13 CODEPOINT (

[17:39] <timotimo>  13 CODEPOINT [

[17:40] <timotimo>  13 CODEPOINT <

[17:40] <timotimo>  42 CODEPOINT <

[17:40] <timotimo>  13 CODEPOINT «

[17:40] <timotimo>  13 CHARLIST {

[17:41] <timotimo> i'm not entirely sure if charlist of one single char is less performant than a codepoint node, but surely having 5 codepoint entries would be less performant than having one charlist entry with all five chars in them?

[17:46] <timotimo> it'll use MVM_string_index_of_grapheme

[17:46] <timotimo> i wonder if we can get any improvement by sorting the graphemes by base codepoint for example

[17:47] <timotimo> so we could in theory binary search

[17:47] <timotimo> though tbh these strings are probably usually rather short

[17:49] *** brrt left
[17:52] <timotimo> also, of course combining codepoints mustn't go into a string for that optimization

[18:34] <MasterDuke> timotimo: sounds like you've got some ideas

[18:35] <timotimo> they could reduce the number of edges by a few, but i don't think the added overhead of that optimization will be made up by that change

[18:38] <MasterDuke> ah, too bad

[18:40] *** Ven`` joined
[18:42] <MasterDuke> timotimo: in my last comment on https://rt.perl.org/Public/Bug/Display.html?id=128760 i mention logically redundant work. i don't remember what that is though, any idea?

[18:44] <timotimo> https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2016-07-23#l106 - this gives a bit of info; it's that the same parts of the NFA get run through the optimizer multiple times

[18:44] <timotimo> at least that's my interpretation

[18:44] <MasterDuke> heh, was just looking there myself

[18:46] <MasterDuke> how can we tell when we "re-compute the grammar for the very same postcircumfix" ?

[18:48] <timotimo> that's the code in question having the same definition multiple times

[18:48] <timotimo> all of them are for ⦋ ⦌

[18:49] <MasterDuke> so it should get cached somewhere after the first one is done and then get pulled from the cache subsequently?

[18:51] <MasterDuke> is there already a mechanism where it checks a cache, and the cache is not being populated? or is any sort of caching at all not implemented?

[18:51] <timotimo> hm

[18:52] <timotimo> we'd be able to check if the exact same method already exists in the grammar and could just replace the implementation basically

[18:53] <MasterDuke> is that the method my commit sped up the finding of?

[18:54] <MasterDuke> (and wow, ^^^ is not a pretty sentence)

[18:56] <timotimo> i don't think it is

[18:56] <timotimo> but i haven't looked at the context

[19:02] <MasterDuke> think that'd be done at a higher level  than QRegex/NFA.nqp?

[19:05] <timotimo> probably

[19:05] <timotimo> but probably not in rakudo

[19:05] <timotimo> perhaps in the base class for Grammar?

[19:05] <timotimo> i'm not entirely sure where mixing in methods causes all the changes in the grammar

[19:05] <timotimo> it could actually be part of rakudo, come to think of it

[19:05] <timotimo> does nqp have custom operator declarations?

[19:08] <MasterDuke> nqp: sub infix:<aa>($a, $b) { say($a ~ "||" ~ $b) }; say(4aa5);

[19:08] <camelia> nqp-moarvm: OUTPUT: «Confused at line 2, near "say(4aa5);"␤   at gen/moar/stage2/NQPHLL.nqp:811  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQP.nqp:921  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/nqp.moarvm:comp_unit)␤ from gen/mo…»

[19:09] <MasterDuke> guess not

[19:09] <timotimo> then at least the part that kicks the mechanism off is in rakudo. actions or world?

[19:12] <MasterDuke> i'm looking in both, but i don't even know what to search for

[19:14] <MasterDuke> add_method?

[19:18] <timotimo> aha

[19:18] <timotimo> add_categorical in Grammar is a/the starting point

[19:19] <MasterDuke> `# If we already have the required operator in the grammar, just return.` ?

[19:26] <MasterDuke> in the example from the ticket, the category, opname, canname, and subname are all identical for each of the four times add_categorical is called

[19:26] <MasterDuke> category = |postcircumfix| opname = |⦋ ⦌| canname = |postcircumfix:sym<⦋ ⦌>| subname = |postcircumfix:<⦋

[19:30] <MasterDuke> hm, how do i find the unique id of self in Grammar.nqp?

[19:30] <timotimo> like self.WHERE?

[19:31] <timotimo> probably more like nqp::getobjid or something

[19:31] <MasterDuke> can't that change if a gc happens?

[19:31] <timotimo> there's one op that causes an object to get a fixed ID

[19:33] <MasterDuke> nqp::getobjsc?

[19:34] <MasterDuke> huh, that just seems to return the empty string

[19:35] *** vendethiel- joined
[19:37] *** Ven`` left
[19:37] <MasterDuke> ah. add_categorical is being called four times, but after the first it doesn't get past this: if nqp::can(self, $canname) { return 1; }

[19:37] <timotimo> no, that's not it

[19:37] <timotimo> ah it's just "objectid"

[19:38] <MasterDuke> good to know. but regardless, it's got to be something other than add_categorical

[19:39] <timotimo> hum

[19:42] <timotimo> perhaps a stack trace from the point of the optimizer, for example

[19:43] <timotimo> the nfa optimizer

[19:44] <MasterDuke> the QRegex one?

[19:45] <timotimo> yeah

[20:02] <MasterDuke> huh, why do i keep getting 'Invalid cast.' when i try to `c MVM_dump_backtrace(tc)`

[20:03] <timotimo> maybe you need call (int)MVM_dump_backtrace(tc)?

[20:04] <MasterDuke> never needed to before

[20:04] <MasterDuke> but still the sae

[20:04] <MasterDuke> *same

[20:08] <MasterDuke> ah

[20:08] <MasterDuke> i was in cosh()'s frame

[20:08] <timotimo> so there was no tc?

[20:08] <MasterDuke> right

[20:08] <timotimo> i thought that gives a different error message

[20:09] <MasterDuke> well, something was off

[20:09] <timotimo> *shrug* that's just gdb i guess?!

[20:09] <MasterDuke> https://gist.github.com/MasterDuke17/b3d6e5b50d2d7bdb58614f68f9c1981f

[20:10] <MasterDuke> multi_declarator?

[20:14] <MasterDuke> routine_def is what calls add_categorical

[20:20] *** domidumont joined
[20:26] *** domidumont left
[20:28] *** domidumont joined
[20:31] *** domidumont left
[21:04] *** brrt joined
[21:14] *** zakharyas left
[21:22] <brrt> I liked this blog: http://troubles.md/posts/why-do-we-need-the-relooper-algorithm-again/

[21:23] <brrt> it's about how wasm is almost-but-not-quite awesome as an intermediate format

[21:23] *** domidumont joined
[21:25] *** domidumont left
[21:36] <timotimo> i guess i'm glad we have a register machine

[21:37] <brrt> well, me too

[21:37] *** vendethiel- left
[21:37] <brrt> also, I'm not sure I agree with the 'automatic SSA form' bit

[21:38] <brrt> most all stack machines I know have an escape hatch in the form of local variables

[21:38] <brrt> the JVM does

[21:39] <timotimo> didn't it say that wasm has local variables too, which "is very slow"?

[21:39] <timotimo> or is that an implementation detail for making some control flows work?

[21:41] <brrt> nah, I'm confused by what he means with that

[21:42] <brrt> basically, what the author seems to want, is a single-pass compiler WASM that can offload all actual optimization to the frontend compiler

[21:42] <timotimo> doesn't sound like an unreasonable desire, though

[21:42] <timotimo> ?

[21:42] <brrt> no

[21:43] <brrt> It is quite reasonable I think

[21:43] <brrt> but it's difficult :-)

[21:43] <timotimo> someone would like the implementors to be tortured :)

[21:45] <brrt> well, I'll be happy to keep the torture to ourselves

[21:47] <timotimo> how do you feel about merging stuff that was meant to be post-release because we skipped january?

[21:47] <timotimo> i'm very much looking forward to having nqp default to ints

[21:49] <brrt> hmm

[21:49] <brrt> why did we skip january?

[21:50] <brrt> and, what is going to go in?

[21:50] <timotimo> because february is so soon already

[21:50] <brrt> yes

[21:50] <timotimo> well, for one we have the branch that switches nqp from using num for everything by default to using int for everything by default

[21:51] <timotimo> also, i've put a little bit of code into spesh that'll turn some coerce calls into method calls that can actually be inlined immediately sometimes if i recall correctly

[21:51] <timotimo> that's only really relevant for nqp code, though, since we don't use smrt_*ify in perl6 code to my knowledge

[21:52] <brrt> it'll still help the compiler, I guess

[21:52] <timotimo> yeah, one thing we intify and strify often is grammar/regex objects, which are of course match objects

[21:53] <brrt> I.... am inclined to think that reverting is cheap

[21:53] <brrt> and we find more bugs if we move ahead

[21:53] <brrt> and aside from releases, which we kind of try to keep stable, we have no explicit expectations regarding dev versions

[21:53] <brrt> So I say, go for it

[21:54] <timotimo> cool

[21:54] <timotimo> the int-by-default branch is supposed to get a bit of cleanup i believe?

[21:54] <timotimo> MasterDuke: ^?

[22:03] <brrt> do we define 'NDEBUG' on our nondebug builds?

[22:03] <timotimo> don't actually know

[22:05] <brrt> we probably ought to

[22:10] <brrt> yay, the register-allocator-with-floating-point-support ocmpiles. Fairly sure it'll have a bunch of bugs

[22:12] *** brrt left
[22:23] *** sivoais joined
[22:45] <MasterDuke> it may not be the cleanest set of commits, but i'll make NQP and Rakudo PRs by tomorrow evening

[22:46] <timotimo> \o/

