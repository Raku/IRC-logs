[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: 4570136a35 | (Timo Paulssen)++ | src/profiler/heapsnapshot.c

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: Heapsnapshot: properly handle empty debug name

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data:

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: the code was expecting empty debug names to

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: be returned as null pointers, but the debug

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: name API returns those as empty strings instead

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: so that no null pointer checks are necessary.

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: review: https://github.com/MoarVM/MoarVM/commit/4570136a35

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: 01464fbe06 | (Timo Paulssen)++ | src/6model/reprs/CStruct.c

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: Heapsnapshot: Calculate CStruct unmanaged size

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: review: https://github.com/MoarVM/MoarVM/commit/01464fbe06

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: dfe3d8b415 | (Timo Paulssen)++ | src/profiler/heapsnapshot.c

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: experiment to develop new heapsnapshot format

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data:

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: don't forget to add -lz to the cflags and ldflags.

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data:

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: this patch writes out all data in the heap snapshot

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: collection as separate files (one per "field") into

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: /tmp compressed through gzip.

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: <â€¦commit message has 5 more linesâ€¦>

[00:21] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: review: https://github.com/MoarVM/MoarVM/commit/dfe3d8b415

[00:22] <timotimo> oh the first two commits can actually go on master, too

[02:37] *** Kaiepi left
[02:37] *** Kaypie joined
[05:04] *** Kaypie left
[05:05] *** Kaiepi joined
[05:47] *** robertle left
[05:58] *** Kaiepi left
[05:59] *** Kaiepi joined
[07:12] <nwc10> good *, #moarvm

[07:20] *** domidumont joined
[09:03] <timotimo> o/

[09:15] *** robertle joined
[09:30] *** lizmat_ joined
[09:31] <nwc10> \o

[09:33] *** lizmat left
[09:40] *** lizmat_ is now known as lizmat

[10:15] <jnthn> o/

[10:17] <timotimo> i'm wondering if maybe 32bit counters for the string heap, types, and static frames wouldn't be enough?

[10:21] <jnthn> Those are within a single compilation unit.

[10:21] <jnthn> That'd mean you have a multi-gigabyte .moarvm file

[10:21] <jnthn> What are you doing? :P

[10:23] <timotimo> i mean, they are currently 64bit big :)

[10:23] <timotimo> in the heap snapshot entries, i mean

[10:24] <timotimo> line numbers are, too. they are 32bit in the MVMBytecodeAnnotation struct, though, so i'll shrink them as well

[10:43] <jnthn> Oh, I see :)

[10:44] <timotimo> it doesn't make a noticeable file size difference. probably a combination of "there just aren't that many of them in the file" and "it goes through gzip, too"

[10:45] <timotimo> but writing the descrs as 8bit instead of 64bit made a big difference, even though gzip should kind of be able to figure that out?

[10:46] <timotimo> of course it's good to have the post-gunzip data small as well, so i can read through it faster, so i'll not just turn everything into 64bit because "lol disk is cheap"

[10:48] <timotimo> my original reason for wanting a smaller format is that something i wanted to analyze was quickly growing past 2 gigs and i had no clue if it even got past 1% done :D

[10:50] *** AlexDaniel joined
[11:08] *** domidumont left
[12:55] *** domidumont joined
[13:25] <timotimo> oh, i haven't even asked yet; is it fine to make zlib a dependency of moarvm?

[13:25] <timotimo> if need be, i'll make it a run-time dependency by using dlopen and falling back to a no-compression path

[13:28] <nwc10> I might be biased (and not doing the work here) but if it's a runtime dependency with that sort of hoop-jumping, isn't doing the equivalent for zstd a better plan?

[13:31] <nwc10> it says "Zstandard is dual-licensed under BSD and GPLv2." but I've no idea how bad an idea it would be to bundle it instead. Sereal seems to inline 604K of source, instead of using a git submodule: https://github.com/Sereal/Sereal

[13:31] <nwc10> er better URL, https://github.com/Sereal/Sereal/tree/master/Perl/shared/zstd

[13:32] <nwc10> (advantage over zlib is somewhat better compression, and faster. I believe that timotimo knows this, but not sure if the channel as a whole roughly knows this)

[13:33] <nwc10> disadvantage is zlib has something like a 20 year headstart, so it's far more widely deployed already

[13:37] <timotimo> do we have Compress::ZStd?

[13:37] <nwc10> mmm, "not widely deployed" - I wasn't even sure that module existed.

[13:37] <nwc10> It does.

[13:38] <nwc10> but "no" will be the short answer, unless we bundle it or start having CPAN dependencies

[13:39] <timotimo> oh, that's for the heap analyzer tool, not moarvm itself

[13:39] <timotimo> for moarvm i'd use the original (?) C library

[13:43] <timotimo> oh there's a zstandard wrapper library for zlib

[13:43] <timotimo> so you could literally just replace the filename and be fine

[14:21] <timotimo> nwc10: you think it'd be fine to not have dictionaries for the compression stuff?

[14:27] *** domidumont1 joined
[14:30] *** domidumont left
[15:10] <nwc10> errrr, I don't know for sure, but I'm going to say "guess so"

[15:10] <timotimo> 'k

[15:19] *** Kaiepi left
[15:24] *** Kaiepi joined
[15:43] *** BeaconAlumna left
[15:44] *** BeaconAlumna joined
[16:27] *** robertle left
[17:28] *** domidumont1 left
[17:44] * AlexDaniel loves zstd

[17:45] <AlexDaniel> high compression ratios with very fast decompression, now with long range mode and under a proper license without any tricks. Yaaay.

[17:55] *** robertle joined
[20:46] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/03/11/2019-10-released-a-lot/

[21:09] *** robertle left
[21:28] <jnthn> lizmat++ # busy week!

