[00:04] <ugexe> fwiw here is the previous reviewed pr -- https://github.com/MoarVM/MoarVM/pull/1037

[00:21] <ugexe> libuv 1.27 (released today) has 'udp: add support for UDP connected sockets'

[00:45] *** brrt left
[02:05] <ugexe> https://github.com/MoarVM/MoarVM/pull/1050 <-- this can be merged now

[02:23] <timotimo> i just merged 1050 and 1049 (the uname op change)

[02:39] <ugexe> cool

[02:40] <ugexe> if anyone can think of an alternative way to get $*KERNEL.bits than calling out to `bin/uname -p` then we can totally get rid of shelling out to uname altogether

[02:41] <ugexe> however it seems like different platforms/distros patch uname -p to give some meaningful result

[02:42] <ugexe> osx for instance always returns 'i386' for uname -p

[02:42] <ugexe> even though uname -m will say x86_64

[02:44] <ugexe> so we basically need an alternative way to get at whatever $*KERNEL.arch is suppsoed to represent

[02:45] <ugexe> not $*KERNEL.bits like i mistakeningly said earlier

[03:03] <ugexe> how does one bump MOAR_REVISION? for instance it currently says 2019.03-31-g6c7810c -- do I just manually type [year].[month]-[two random digits?]-[one random letter?][git rev-parse --short HEAD]

[03:06] <timotimo> no, "git describe --tags" is what gives you the right data

[03:08] <timotimo> ugexe: i think in the PR that changes MVM_thread_new you didn't push a change to the .h file that has MVM_thread_new in it

[03:15] <ugexe> sure enough... missed it when updating the ops

[03:15] <timotimo> travis was quite loud about it :)

[03:15] <ugexe> i didn't check travis since the nqp travis will use wont be able to test it (i think)

[03:16] <timotimo> yeah, i had it open for something else, and it showed moar's latest build

[03:16] <timotimo> i checked the log before i read the PR description

[03:20] <ugexe> fixed

[03:52] <ugexe> m: use nqp; my $uname := nqp::uname(); say nqp::atpos_s($uname, nqp::const::UNAME_MACHINE);

[03:52] <camelia> rakudo-moar fc4aca08f: OUTPUT: «x86_64␤»

[09:06] *** domidumont joined
[10:00] *** zakharyas joined
[10:31] *** lucasb joined
[11:40] *** zakharyas left
[11:40] *** domidumont left
[12:56] *** domidumont joined
[12:56] *** brrt joined
[12:56] <brrt> ohai

[12:56] <brrt> .ask ugexe why not just compile $*KERNEL.bits in?

[12:56] <yoleaux> brrt: I'll pass your message to ugexe.

[12:56] <brrt> as in, we know that value at compile time, don't we?

[12:57] <brrt> I'd rather see a hash of type sizes even

[12:59] <timotimo> we do not

[12:59] <timotimo> you can run a 32bit application on a 64bit kernel

[13:03] <brrt> well, that is true

[13:03] <brrt> but I'm wondering in which case that would be true (we'd run a 32 bit moarvm) where you'd nevertheless care about the 64-bitness of the processor

[13:06] <timotimo> i haven't the slightest

[13:10] <brrt> I don't really know in what cases you'd even use the $*KERNEL.bits parameter

[13:10] <brrt> but probably ugexe does :-)

[13:22] <lizmat> brrt: some applications using NativeCall might want to know ?

[13:23] <brrt> https://brrt-to-the-future.blogspot.com/2019/03/something-about-ir-optimization.html

[13:24] <brrt> lizmat: a): the system linker (resolving dlsym) would want to know, no reason why the application would too; b): if MoarVM was built as 32 bits, it had better link to 32 bit code, otherwise it wouldn't work (different ABIs etc)

[13:25] <brrt> so I don't think the actual-cpu-architecture (as opposed to the ISA the VM was built for) is very relevant unless one is in fact writing a compiler

[13:26] <brrt> in which case, I think shelling out to uname is perfectly acceptable. But I don't know if that's the common thing to optimize for

[13:37] <timotimo> i feel like some graphics could be useful for posts involving the exprjit

[13:37] <brrt> me too.... but I don't have dot on this laptop

[13:37] <timotimo> i can install dot on hack :)

[13:37] <brrt> I'll get my regular working laptop out :-)

[13:38] <timotimo> then we'll have .hack

[13:38] <brrt> I don't have an ccount at hack

[13:38] <timotimo> then i can .hack//sign you up for one

[13:39] <brrt> :-)

[13:39] <brrt> (then I need to install PuTTy)

[13:39] <brrt> I might as well just pick my other laptop

[13:39] * timotimo googles graphviz emscripten

[13:40] <timotimo> http://viz-js.com/ has something more like a gui, http://www.webgraphviz.com/ is more or less the simplest thing you can come up with

[13:40] <timotimo> outputs svg i think?

[13:40] <timotimo> the latter, i mean. the former can output differen formats and even lets you choose engines

[13:41] <brrt> hehe

[13:41] <brrt> ok, you win

[13:58] <brrt> timotimo: better now?

[13:59] *** brrt` joined
[14:02] *** brrt left
[14:03] <timotimo> not bad :)

[14:04] <brrt`> any other places that would benefit?

[14:05] <timotimo> the post doesn't really have much asm in it or tiles or something like that

[14:05] <timotimo> that may be the place that might most benefit from a graphical representation

[14:06] <brrt`> right

[14:06] <brrt`> I tried to keep asm to a minum

[14:06] <brrt`> but nevertheless it's a bit of a mumble

[14:08] <brrt`> oh well. that's what I've been thinking about, anyway

[14:08] <timotimo> i do think i kind of understand it better now, though

[14:08] <brrt`> :-)

[14:08] <timotimo> not that i could really help :|

[14:08] <brrt`> idk. ideas may come from anywhere

[14:13] <brrt`> anyway, i'm offline for a couple of hours

[14:13] *** brrt` left
[14:34] *** AlexDaniel left
[14:34] <ugexe> I meant KERNEL.arch, not KERNEL.bits

[14:34] <yoleaux> 12:56Z <brrt> ugexe: why not just compile $*KERNEL.bits in?

[14:53] *** AlexDaniel joined
[14:56] *** squashable6 left
[14:56] *** quotable6 left
[14:56] *** benchable6 left
[14:56] *** shareable6 left
[14:57] *** quotable6 joined
[14:57] *** squashable6 joined
[15:00] *** shareable6 joined
[15:00] *** benchable6 joined
[15:08] <dogbert17> m: await (^1000).map({ start { EVAL '/0|1|2/' } }); say 'ok'

[15:08] <camelia> rakudo-moar ffe840999: OUTPUT: «===SORRY!===␤Decoder may not be used concurrently␤»

[15:10] *** lucasb left
[15:17] *** Elronnd left
[15:29] <ugexe> i got this the *first* time, and the decoder error every time after:

[15:29] <ugexe> ===SORRY!===

[15:29] <ugexe> Iteration past end of iterator

[15:31] <ugexe> .tell brrt i imagine that is/was what $?KERNEL was for ( https://github.com/perl6/roast/blob/1080587f3c801221e64b7e7c0d9931ae65f3b61f/S02-magicals/KERNEL.t#L9 )

[15:31] <yoleaux> ugexe: I'll pass your message to brrt.

[15:32] <dogbert17> ugexe: the example is from RT#125978

[15:33] <dogbert17> now that the Decoder message comes up almost every time perhaps that might make it possible to figure out what's really happening

[17:36] *** Geth left
[17:36] *** Geth joined
[17:54] <AlexDaniel> dogbert17: oh that freaking eval

[19:52] *** domidumont left
