[00:08] *** MasterDuke left
[00:48] *** sivoais left
[00:59] *** lucasb left
[01:01] *** sivoais joined
[01:16] *** AlexDani` joined
[01:20] *** AlexDaniel left
[06:37] *** domidumont joined
[07:25] *** AlexDani` is now known as AlexDaniel

[07:25] *** AlexDaniel left
[07:25] *** AlexDaniel joined
[07:27] *** squashable6 left
[07:30] *** squashable6 joined
[07:44] *** sena_kun joined
[08:01] *** zakharyas joined
[10:13] *** domidumont left
[10:24] *** squashable6 left
[10:25] *** squashable6 joined
[10:41] *** zakharyas left
[11:06] *** squashable6 left
[11:08] *** squashable6 joined
[11:52] <nine> Oooh...learned about an important aspect of thread exit: there is actually almost no special handling for this in the GC. We just keep the thread alive for 2 GC runs and rely on them to completely clear the nursery (first run to move to the new nursery and mark as seen, second to promote to gen2).

[11:53] <nine> So when I extended the stay of objects in the nursery to 15 runs to flush out some more rooting issues, I broke this implicit part of thread exit.

[11:53] <nine> Luckily knowing that makes it trivial to fix. Just as always really tricky to find out

[12:14] <jnthn> Ah, I tried to explain that somewhat before, but admittedly not so clearly, and it didn't occur to me it'd interact with what you were doing in that way :)

[12:25] <nine> Well, I think time spent like this is never wasted, even though I could have made my life easier by connecting the dots a lot sooner. I still improved my debug skills and actually worked through the fine details of how those phases in the GC work.

[12:41] <Guest23744> nine: perhaps you should blog about it

[12:42] <Guest23744> is anyone interested in merging https://github.com/MoarVM/MoarVM/pull/1181

[12:47] <Geth_> ¦ MoarVM: 3d83cb4694 | (Jan-Olof Hendig)++ | src/spesh/inline.c

[12:47] <Geth_> ¦ MoarVM: Add a few missing static keywords before a few functions

[12:47] <Geth_> ¦ MoarVM:

[12:47] <Geth_> ¦ MoarVM: Set the functions scope to the containing file (compilation unit)

[12:47] <Geth_> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3d83cb4694

[12:47] <Geth_> ¦ MoarVM: 2a796fe3c0 | niner++ (committed using GitHub Web editor) | src/spesh/inline.c

[12:47] <Geth_> ¦ MoarVM: Merge pull request #1181 from dogbert17/add-missing-static

[12:47] <Geth_> ¦ MoarVM:

[12:48] <Geth_> ¦ MoarVM: Add a few missing static keywords before a few functions

[12:48] <Geth_> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2a796fe3c0

[12:51] <Guest23744> nine++

[13:20] *** zakharyas joined
[13:48] *** lucasb joined
[13:52] *** domidumont joined
[14:25] *** domidumont left
[16:00] *** domidumont joined
[16:02] *** MasterDuke joined
[16:15] <timotimo> it's always just a tiny bit dangerous to do something implicitly

[16:45] <Geth_> ¦ MoarVM: acb04a448b | (Stefan Seifert)++ | src/spesh/plugin.c

[16:45] <Geth_> ¦ MoarVM: Fix possible memory corruption in resolve_using_guards

[16:45] <Geth_> ¦ MoarVM:

[16:45] <Geth_> ¦ MoarVM: add_resolution_to_guard_set replaces the old guard set of a StaticFrameSpesh's

[16:45] <Geth_> ¦ MoarVM: plugin_state with a new set. The old one is freed at the next safe point. If

[16:45] <Geth_> ¦ MoarVM: another thread starts resolving a spesh plugin before the replacement and

[16:45] <Geth_> ¦ MoarVM: during resolution a GC run is triggered, the old guard set's pointers may become

[16:45] <Geth_> ¦ MoarVM: outdated, as they are no longer anchored in the frame's StaticFrameSpesh.

[16:45] <Geth_> ¦ MoarVM: <…commit message has 5 more lines…>

[16:45] <Geth_> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/acb04a448b

[16:47] <nine> Still don't like this fix. But it works and I haven't found a better way yet.

[16:49] <timotimo> does this have to prevent the guard set from being freed?

[16:50] <nine> Excellent question!

[16:50] <timotimo> because if it does have to, i don't see the mechanism that does that

[16:50] <timotimo> and defensively copying sounds like a terrible time

[16:50] <nine> My first reaction would be yes. But then I wonder why I haven't seen anything blowing up there

[16:50] <timotimo> it'd only blow up with asan or valgrind, right? were you using that or was that too costly in terms of time?

[16:51] <timotimo> though actually, you can tell if the thing has to be copied to be rescued from safepoint-freeing by virtue of the pointer having changed just before a potential gc run

[16:52] <nine> Well valgrind and asan certainly make it more blowy, but they'd not be necessary.

[16:52] <timotimo> right, there's not only the fact that the guard set gets freed, but also that the pointers get outdated

[16:53] <nine> Anyway a valgrind run of a test that exploded during guard resolution has been running for about an hour. So just one or two more hours till I know more

[16:54] <timotimo> ouch

[17:01] *** dogbert11 joined
[17:41] *** zakharyas left
[18:05] *** domidumont left
[18:32] *** chloekek joined
[19:18] *** hoelzro joined
[19:34] <nine> Maybe the ugly fix doesn't actually fix anything

[19:45] <nine> Or it could indeed be the premature freeing that's still causing issues

[19:48] <nine> In which case I wonder what a fix could be. Maybe turning the guard set into a full MVMCollectable? Because to the question of "when do we know that we can free this object", "use your GC!" sounds like a very appropriate answer

[20:05] *** zakharyas joined
[20:32] *** chloekek left
[21:09] *** zakharyas left
[21:17] *** lucasb left
[21:50] *** sena_kun left
[22:07] *** MasterDuke left
