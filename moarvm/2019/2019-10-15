[01:43] *** lucasb left
[05:07] *** sena_kun joined
[06:18] *** domidumont joined
[06:18] *** domidumont left
[06:19] *** domidumont joined
[06:26] *** Geth joined
[06:26] *** Geth_ left
[06:33] *** vesper11- left
[06:36] *** vesper11 joined
[09:15] *** squashable6 left
[09:17] *** squashable6 joined
[10:09] <Kaiepi> sorry for the late response, i'll take a look later dogbert17

[10:18] <Guest13443> Kaiepi: it could be that you're totally innocent :-) dogbert17 in $work disguise

[10:19] <Kaiepi> i'm 99% sure i'm responsible here, that pullreq of mine that got merged last week changed a lot with how async sockets deal with gc

[10:19] <Guest13443> it was the test file name which made me believe that you might be interested

[10:29] <nine> Considering that it's probably a recent regression and there wasn't much else going on, it looks like a good bet

[10:49] <Guest13443> nine: can you see, given the gist what might be wrong? https://gist.github.com/dogbert17/26d3e358421101b5db8387e163246bc7

[10:50] <Guest13443> it's the parameter pushee in MVM_repr_push_o (tc=0x2fe35c0, obj=0x35e3a50, pushee=0x605c08) at src/6model/reprconv.c:387 which is busted

[11:56] *** Kaiepi left
[12:23] *** lucasb joined
[12:25] *** Kaiepi joined
[13:23] <nine> Guest13443: no, that backtrace alone is not enough. But it's a good start! It's pretty clear that the t->body.schedulee pointer is out of date. Since do_setup_setup seems to correctly MVMROOT t in the appropriate place, there must be a missing MVMROOT earlier in the program flow

[13:24] <nine> So I'd look at the places where t->body.schedulee gets set and if there's allocation happening around that

[13:30] *** squashable6 left
[13:31] *** squashable6 joined
[13:57] *** sena_kun left
[14:06] <nine> read_setup looks fishy. Looks to me like MVM_io_eventloop_add_active_work can allocate. Would need to MVMROOT t there

[14:11] <Guest13443> nine: interesting, will have to investigate

[14:11] <timotimo> making more stuff middle-mouse-button-clickable in moarperf

[14:12] <nine> src/io/asyncsocketudp.c:296 also looks suspicious. This may allocate but we use both t and arr later on

[14:12] <nine> same in line 299

[14:15] <Guest13443> is rooting a cheap operation?

[14:15] <timotimo> yes

[14:16] <Guest13443> now that was a quick reply, timotimo++

[14:16] <timotimo> it's just a push into an array

[14:16] <nine> Much cheaper than random failures anyway ;)

[14:16] <Guest13443> indeed

[14:34] *** MasterDuke joined
[14:40] <Guest13443> hello MasterDuke

[14:43] <Guest13443> any news wrt https://gist.github.com/dogbert17/e4cb7b4d003f9f7177a70f73a49c7727

[14:54] *** domidumont left
[14:56] *** domidumont joined
[15:04] *** zakharyas joined
[15:22] *** domidumont left
[15:25] *** zakharyas left
[15:46] <timotimo> finally, when moarperf is calculating reverse references or the BFS graph, there's a progress display for it

[15:49] *** domidumont joined
[15:51] <MasterDuke> Guest13443: not really. there's a solution, but it involves repeating at `free()` in every branch of a sequence of if/elsif. otherwise i need some help wrt casting `MVMGrapheme32 *` to `char *`

[16:01] *** robertle joined
[16:20] *** releasable6 joined
[16:26] *** domidumont left
[16:41] *** domidumont joined
[16:48] <lizmat> and the last Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/10/15/2019-41-new-wineskins/

[16:51] *** domidumont left
[18:59] *** squashable6 left
[19:02] *** squashable6 joined
[19:24] *** sena_kun joined
[19:54] *** sena_kun left
[19:55] *** sena_kun joined
[19:57] *** hankache joined
[20:01] *** hankache left
[20:04] *** hankache joined
[20:34] *** sena_kun left
[20:35] *** MasterDuke left
[20:58] *** hankache left
[21:22] *** patrickb joined
[21:25] <dogbert17> .seen Kaiepi

[21:25] <tellable6> dogbert17, I saw Kaiepi 2019-10-15T10:19:07Z in #moarvm: <Kaiepi> i'm 99% sure i'm responsible here, that pullreq of mine that got merged last week changed a lot with how async sockets deal with gc

[21:26] <dogbert17> Kaiepi: stupid question but is this line correct? https://github.com/MoarVM/MoarVM/blob/master/src/io/asyncsocketudp.c#L559

[21:28] <Kaiepi> should be, that's how it loops through the list of addresses

[21:35] <dogbert17> ok, it seems as if the fromspace error occurs the second time line 573, in  do_setup_setup, is run

[21:41] *** squashable6 left
[21:42] <Kaiepi> if that happens the way the roots are laid out there something similar might also happen with parts of the async tcp socket code

[21:43] *** squashable6 joined
[21:54] <dogbert17> I was wrong the problem occurs the third time do_setup_setup runs

[22:12] *** Kaiepi left
[22:13] *** Kaiepi joined
[22:18] *** Kaiepi left
[22:19] *** Kaiepi joined
[22:23] *** Kaiepi left
[22:23] *** Kaiepi joined
[22:59] *** patrickb left
