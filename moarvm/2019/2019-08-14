[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[01:18] *** MasterDuke left
[04:59] *** pamplemousse joined
[05:12] *** brrt joined
[05:29] *** brrt left
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:52] *** MasterDuke joined
[07:32] *** robertle left
[07:33] *** pamplemousse left
[07:54] *** robertle joined
[08:00] *** sena_kun joined
[08:02] *** zakharyas joined
[08:13] <timotimo> i wonder if jimmyz will come visit again at some point

[09:05] <MasterDuke> i've seen him randomly point out problems in commits, but his main contributions were before i was around. what did he work on?

[09:06] <timotimo> i don't remember very well, but i think it was basically "everything"?

[09:06] <timotimo> back when there wasn't too much different stuff in moarvm anyway ;)

[09:06] <MasterDuke> timotimo: btw, was this patch and output at all useful? if so, should it be incorporated in for reals? https://gist.github.com/MasterDuke17/768644375e173390a6f2ca3ad1be78c4

[09:06] <MasterDuke> cool

[09:07] <timotimo> it seems useful, yeah

[09:07] <timotimo> without that, it'll just say that it lives in the nursery or something?

[09:08] <timotimo> may have to look if the block ought to be destroyed, too, when the object gets moved or deleted

[09:11] <MasterDuke> as part of the extra valgrind support? or in general?

[09:11] <timotimo> the extra valgrind support

[09:16] <MasterDuke> after the VALGRIND_PRINTF_BACKTRACE?

[09:16] <timotimo> hm?

[09:16] <MasterDuke> destroying the block

[09:16] <timotimo> no, in regular operation

[09:16] <timotimo> the blocks are being registered whenever objects are allocated, but nothing further is done when the objects move or get freed

[09:16] <timotimo> so later on you could get false positives

[09:17] <MasterDuke> ah

[09:18] <MasterDuke> easy place to do that?

[09:21] <timotimo> oof. is there an "actually this block has moved" client request?

[09:23] <MasterDuke> in valgrind? i have no idea. i think i pretty much just copied something you said into vim

[09:32] <MasterDuke> doesn't look like it if i'm reading http://valgrind.org/docs/manual/mc-manual.html#mc-manual.monitor-commands correctly

[09:33] <MasterDuke> just the DISCARD to stop watching it

[09:34] <timotimo> oof, yeah, we'd have to keep that value around

[09:34] <timotimo> the block handle

[09:35] <MasterDuke> add it to the obj->header if MVM_VALGRIND_SUPPORT?

[09:37] <timotimo> that could force a recompile of rakudo whenever moar gets recompiled with valgrind support on or off

[09:40] *** MasterDuke left
[09:52] *** MasterDuke joined
[09:54] <MasterDuke> i guess that could be annoying, but i don't know if anybody uses valgrind support all that frequently

[09:54] <MasterDuke> any better way though?

[09:55] <timotimo> in theory, the bump-the-pointer-allocation scheme of the nursery would allow us to just put the number after the object

[09:56] <MasterDuke> and then just increase the size of the bumps by the size of that number?

[09:56] <timotimo> yeah

[09:56] <timotimo> and look all over for edge cases that may be easy to miss :)

[09:57] <MasterDuke> sounds like fun

[10:21] *** Kaiepi left
[10:21] *** Kaiepi joined
[10:29] *** MasterDuke left
[10:39] <timotimo> https://googleprojectzero.blogspot.com/2019/08/down-rabbit-hole.html - impressive

[11:02] *** cygx joined
[11:02] <cygx> o/

[11:03] <cygx> https://gist.github.com/cygx/70a8ab676245945d497842abf067100c

[11:03] <cygx> comments?

[11:04] *** zakharyas left
[11:09] *** pamplemousse joined
[11:24] <cygx> hm...

[11:25] <cygx> there's also a findsym op that might serve the same purpose ina different way

[11:26] <cygx> it's apparently not hooked up to anything, though

[11:27] <timotimo> that sounds like a nativecall thing

[11:53] <cygx> o/

[11:53] *** cygx left
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:03] *** lucasb joined
[12:35] *** zakharyas joined
[12:44] *** MasterDuke joined
[14:41] *** robertle left
[16:15] *** robertle joined
[16:30] *** chloekek joined
[16:34] *** zakharyas left
[16:37] *** mst left
[16:37] *** mst joined
[16:37] *** ChanServ sets mode: +o mst

[16:44] *** mst left
[16:44] *** mst joined
[16:44] *** card.freenode.net sets mode: +o mst

[17:18] *** chloekek left
[18:00] *** reportable6 left
[18:00] *** TimToady left
[18:00] *** reportable6 joined
[18:00] *** TimToady joined
[20:28] *** zakharyas joined
[21:19] <timotimo> ===SORRY!===

[21:19] <timotimo> P6opaque: no such attribute '$!restart' on type NQPMu in a NQPMatch when trying to get a value

[21:19] <timotimo> now here's one i haven't seen yet

[21:19] <timotimo> (this is in mqtt's test while trying to profile under valgrind)

[21:24] *** sena_kun left
[21:25] *** zakharyas left
[21:25] <timotimo> oh, i don't have valgrind support on, only telemeh

[21:26] <MasterDuke> i didn't notice any difference with the normal valgrind support (i.e., adding `--valgrind`)

[21:27] <timotimo> i tried to make it better :( :(

[21:27] <MasterDuke> that sentence starts out so promising...

[21:36] <timotimo> ==30887== Invalid read of size 4

[21:36] <timotimo> ==30887==    at 0x4BA19AF: add_type_to_types_array (instrument.c:440)

[21:36] <timotimo> well

[21:45] <timotimo> i'm not sure i understood what you meant by that sentence, MasterDuke

[21:46] <MasterDuke> "i tried to make it better" is kind of good. but then ":( :("...not so much

[21:49] <timotimo> the sentence before that

[21:51] <timotimo> bleeehhhh why is my hard drive full again

[21:52] <timotimo> oh, there's the answer

[21:52] <timotimo> core dumps

[21:52] <lizmat> .oO( nuke all the precomps )

[21:52] <MasterDuke> oh. i don't think i got any different error messages or more useful info when i reran profiling the mptt tests under valgrind before or after compiling moarvm with --valgrind

[21:53] <MasterDuke> i think that's why you helped my come up with that patch in the gist

[21:53] <timotimo> mhh

[21:53] <timotimo> welp, maybe i can at least find out why the test sometimes dies with that SORRY

[21:53] <MasterDuke> ++timotimo

[22:03] *** Kaiepi left
[22:03] *** Kaiepi joined
[22:05] *** Kaiepi left
[22:05] *** Kaiepi joined
[22:07] <timotimo> i only had to "reverse-continue" "call MVM_dump_backtrace(tc)" about a thousand times to get here, but i've reached the spot the exception was actually thrown

[22:07] <timotimo> i should have had a different breakpoint

[22:07] <timotimo> probably one that gets hit when an exception is thrown >_<

[22:09] <MasterDuke> you didn't have it at MVM_exception_throw_adhoc?

[22:09] <MasterDuke> but did you find something good?

[22:13] <timotimo> i had it at MVM_profile_enter

[22:13] <timotimo> not yet, i've only just reached the spot where things happen

[22:31] <timotimo> aha, this is very strange

[22:32] <MasterDuke> strange fixable? or strange this-defies-all-known-laws-of-physics?

[22:33] <timotimo> well, the code we have here is super simple

[22:34] <timotimo> it's method "ast" of something

[22:34] <timotimo> we've got a speshed candidate

[22:34] <timotimo> pulls the argument that comes in, grabs the type from a spesh slot, calls getattr_o on the object with the type and the string '$!made'

[22:34] <timotimo> only problem is

[22:34] <timotimo> that spesh slot contains NQPMu rather than Perl6::Grammar

[22:35] *** pamplemousse_ joined
[22:35] <timotimo> oh no

[22:36] <MasterDuke> no surprise it doesn't have a '$!made' then, but how did an NQPMu get there?

[22:36] <timotimo> i didn't get the "when" before i searched backwards for the place where that value gets set

[22:39] <MasterDuke> well, i'm off to bed, but good luck figuring stuff out

[22:39] *** pamplemousse left
[22:40] <timotimo> 249121 in case you were wondering :P

[22:42] <MasterDuke> that's a memory address?

[22:43] *** dogbert17 left
[22:43] <timotimo> no, event number from "rr replay"

[22:43] <MasterDuke> ha. not small

[22:51] <timotimo> huh, this spesh plan is kind of weird

[22:53] <MasterDuke> cause or symptom of the crash when profiling this example?

[22:54] <timotimo> ok, so here's how i currently understand it

[22:55] <timotimo> the optimization that causes the NQPMu spesh slot to be written is optimize_getlex_per_invocant

[22:55] *** MasterDuke left
[22:55] <timotimo> which means that we know the type of the thing because we're currently building a specialization for a method being called on that exact type

[22:55] <timotimo> but the slot we're finding for this specific instruction, i.e. what was logged at that spot before, has 8 different results

[22:56] <timotimo> the last one is, i think, the one we want

[22:56] <timotimo> but the code currently just checks if the number of available logged types is nonzero

[22:56] <timotimo> i think it should maybe check if the count is exactly 1

[22:56] <timotimo> because it then just goes and takes the first type there

[22:59] *** MasterDuke joined
[22:59] <MasterDuke> that doesn't sounds quite correct

[23:02] <timotimo> i could be misunderstanding

[23:03] <timotimo> and of course now i can't reproduce the problem any more

[23:04] <MasterDuke> ugh, time to actually tear myself away

[23:04] <MasterDuke> later...

[23:09] <timotimo> seeya

[23:10] <timotimo> oh, it's probably sensitive to profiling!

[23:18] <timotimo> so it could also be that the profiling causes annotation bytecode offsets to shift?!

[23:18] <timotimo> that would be the worst

[23:24] <timotimo> [rr 15283 518790]spesh: would have specialized on invocant with 3 types available

[23:24] <timotimo> [rr 15283 518792]NQPMu[rr 15283 518794], [rr 15283 518796]NQPRegex[rr 15283 518798], [rr 15283 518800]NQPMatch[rr 15283 518802]

[23:24] <timotimo> now the thing is i actually didn't let it do that, so i can't actually see if that would have been the crash

[23:26] <timotimo> now how does it record an NQPMu in there in the first place? no idea!

[23:33] <timotimo> https://gist.github.com/timo/1332e5242e3f1ade5cf8309dcfa3a251

[23:33] <timotimo> it looks really very suspiciously like what i found was exactly the culprit

[23:34] <timotimo> i'm considering bedtimen ow

