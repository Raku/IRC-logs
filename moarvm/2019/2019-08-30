[00:30] *** lucasb left
[00:38] *** pamplemousse joined
[00:48] *** pamplemousse left
[02:32] *** zakharyas joined
[02:39] *** zakharyas left
[03:03] *** zakharyas joined
[03:58] *** pamplemousse joined
[05:11] *** brrt joined
[05:26] *** pamplemousse left
[05:57] *** robertle left
[07:03] *** domidumont joined
[07:20] *** robertle joined
[07:35] *** brrt left
[07:50] *** Kaiepi left
[07:53] *** Kaiepi joined
[09:29] *** zakharyas left
[10:15] *** brrt joined
[10:25] *** ilogger2 joined
[10:26] *** eater joined
[10:26] *** nebuchadnezzar joined
[10:26] *** tadzik joined
[10:26] *** nebuchadnezzar is now known as Guest90858

[10:29] *** bartolin joined
[10:29] *** avar joined
[10:29] *** avar left
[10:29] *** avar joined
[10:29] *** japhb joined
[10:33] *** Voldenet joined
[10:33] *** Voldenet left
[10:33] *** Voldenet joined
[11:54] *** brrt joined
[12:25] <brrt> \o

[12:25] <nwc10> o/

[12:26] <moritz> |o|

[12:42] <timotimo> ‚Ä¶o‚Ä¶

[12:43] <tadzik> ·ïï( ·êõ )·ïó

[12:50] <jnthn> ~~\o/~ü¶à~

[12:52] <timotimo> nooo jnthn don't drown

[12:53] <timotimo> though we have recently clarified that drowning people don't wave their arms

[12:53] <timotimo> so i guess jnthn's just having safe fun in the pool

[12:54] <tadzik> well, if you're a scuba diver then waving your hands means "HELP"

[12:54] <tadzik> but maybe jnthn is just enthusiastic to see the shark :)

[12:54] <timotimo> or, if you're still on land, it means "jazz hands!"

[12:54] <moritz> safe fun in the pool with sharks?

[12:55] <moritz> sounds legit, kinda

[13:02] <brrt> I seem to recall that 'most' sharks weren't all that dangerous

[13:02] <brrt> esp. not compared to killer whales

[13:02] <moritz> that's correct

[13:03] <timotimo> https://gfycat.com/abandonedtemptingchuckwalla-dog

[13:03] <moritz> https://en.wikipedia.org/wiki/Shark#Relationship_with_humans "average number of fatalities worldwide per year between 2001 and 2006 from unprovoked shark attacks is 4.3"

[13:03] <moritz> "Contrary to popular belief, only a few sharks are dangerous to humans. Out of more than 470 species, only four have been involved in a significant number of fatal, unprovoked attacks on humans"

[13:05] <jnthn> m: say 4/470

[13:05] <evalable6> jnthn, rakudo-moar 0455f42e3: OUTPUT: ¬´0.008511‚ê§¬ª

[13:05] <jnthn> Seems my chances or survival are pretty decent :P

[13:19] *** evalable6 joined
[13:45] <timotimo> https://gist.github.com/timo/a2f4bb66f0811323319afa9f14ef75f0

[13:46] <timotimo> i might also want to put info about "how many GCs have been major so far" in the heap snapshots

[13:46] <timotimo> snapshot number and gc seq num don't relate if you've got a confprog set up

[13:51] *** Guest90858 is now known as nebuchadnezzar

[13:56] *** lucasb joined
[13:57] <Guest71418> .seen nine

[13:57] <tellable6> Guest71418, I saw nine 2019-08-30T12:05:51Z in #perl6-dev: <nine> That's...a little bit surprising

[14:51] <Kaiepi> timotimo, you have time to look at my code today?

[14:51] <timotimo> i'll try!

[14:52] <timotimo> i just had enough time to make a change to JSON::Fast

[14:58] <timotimo> Fix async UDP sockets, pass socket types and protocols when resolving - this is the commit i should be at?

[15:00] <timotimo> Kaiepi: can you give me the test code again? can't find it in my irc history right now

[15:02] <Kaiepi> perl6 -e 'my IO::Socket::Async $s .= bind-udp: "127.0.0.1", 8000; my Tap $t = $s.Supply.tap({ .print }); my IO::Socket::Async $c .= udp; await $c.print-to: "127.0.0.1", 8000, "ayy lmao"'

[15:02] <Kaiepi> timotimo

[15:02] <Kaiepi> yeah, that commit and the one before it

[15:03] <Kaiepi> first one doesn't change anything related to async udp sockets

[15:03] <timotimo> OK

[15:04] <timotimo> "invalid argument" is the error i should be seeing?

[15:14] <Kaiepi> yep

[15:15] <Kaiepi> the other kind is it claiming the socket is closed when it isn't, that's harder to debug with since you can't break on uv_send_udp though

[15:16] <Kaiepi> though i guess you could just break on uv_is_closing instead, that would be the only place it gets used at all in the program

[15:17] <timotimo> rr is refusing my hardware watchpoints wtf

[15:18] <Kaiepi> how do you use rr? there's no command for it in gdb and if it's a program, it doesn't exist on my machine

[15:18] <timotimo> "rr record perl6 blah blah", then "rr replay"

[15:18] <timotimo> it's an external program indeed

[15:18] <timotimo> rr-project.org or so

[15:20] *** patrickb joined
[15:25] <timotimo> it looks less like the handle data gets overwritten with zeroes

[15:25] <timotimo> and more like it's never written

[15:27] <timotimo> like, i follow the memory inside that and it literally turns from "this memory isn't mapped" to the value it has when the code that errors runs

[15:27] *** pamplemousse joined
[15:28] <timotimo> also

[15:28] <timotimo> the code runs as response to a IO::Socket::Async::SocketCancellation being worked on

[15:28] <timotimo> that seems wrong?

[15:32] <timotimo> OK, the type there isn't as important

[15:35] <timotimo> in write_bytes_to_async you may want MVM_is_null instead of == NULL

[15:35] <timotimo> that also catches VMNull repr'd objects

[15:37] <timotimo> ah, ok, write_bytes_to checks for concreteness

[15:51] *** brrt left
[15:59] <timotimo> Kaiepi: are you here?

[16:08] <timotimo> Kaiepi: my latest finding is that do_setup_setup is called with an ssi that has no bind_address at all, so uv_udp_init is never called, that's potentially why the whole handle is nulled out

[16:12] <Kaiepi> ahhh

[16:12] <Kaiepi> that'd explain it

[16:12] <timotimo> and since ssi->error was set to 0 in setup_setup, the error path isn't taken

[16:17] <Kaiepi> since before it was only ever using one address, uv_udp_init was still getting called before because it only cared if ssi->bind_addr was NULL when binding the socket. with the loop there, that's no longer the case

[16:18] <timotimo> right

[16:19] <timotimo> oh, also, you may want to malloc your char *hostname with more than just sizeof(char)

[16:19] <timotimo> because that'll give you a 1 byte big buffer, rounded up to whatever malloc's minimum allocation size is

[16:20] <Kaiepi> MVM_calloc(MAX_HOST, sizeof(char)) or whatever?

[16:20] <timotimo> *shrug*

[16:20] <timotimo> it's only debug code, but it should still maybe not immediately buffer overflow :D

[16:22] <Kaiepi> i'm guessing it only ever worked because inet_ntop reallocs it or something

[16:25] <timotimo> aha, the last argument to inet_ntop is the size of your dst buffer

[16:26] <Kaiepi> i'm passing the wrong thing then, i thought it was the size of the struct sockaddr you're passing it

[16:48] *** pamplemousse left
[17:12] <Kaiepi> awesome, everything works now! thanks timotimo

[17:12] <timotimo> i accept tips, LOL

[17:12] <timotimo> BBL

[17:35] *** harrow left
[17:36] *** harrow joined
[18:06] *** robertle joined
[18:10] *** Kaiepi joined
[18:13] *** Ven`` joined
[18:14] *** Ven`` left
[19:37] *** Ven`` joined
[19:52] *** Ven`` left
[20:51] <patrickb> I'm currently looking at https://github.com/MoarVM/MoarVM/blob/master/src/io/fileops.c#L255

[20:51] <patrickb> Some quick tests seem to indicate this ignores the root user.

[20:55] <patrickb> Is there something obvious I miss or should this code also test for euid() == 0?

[20:57] <patrickb> I got there by tracking down https://github.com/rakudo/rakudo/issues/3090 In that bugreport people are suggesting libuv broke between 1.24.1 and 1.30.1.

[21:04] *** Ven`` joined
[21:10] *** Ven`` left
[21:11] *** Ven`` joined
[21:11] *** Ven`` left
[21:22] <patrickb> But from my tests and looking at the code I'd suspect there is a check for root missing. Opinions?

[22:32] *** patrickb left
[22:40] *** evalable6 left
[22:43] *** evalable6 joined
[22:46] *** lucasb left
[22:47] *** vesper11 joined
[23:16] *** Kaiepi left
