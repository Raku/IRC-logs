[00:16] *** samcv left
[00:18] *** samcv joined
[01:00] *** lizmat joined
[01:24] <timotimo> who wants an off-by-one fixed?

[01:26] <Geth> ¦ MoarVM: f55ecdecd2 | (Timo Paulssen)++ | src/jit/graph.c

[01:26] <Geth> ¦ MoarVM: JIT: Fix Harmless Off-By-One Preventing Optimization

[01:26] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f55ecdecd2

[01:28] <timotimo> i saw this because CStruct doesn't turn bindattr_* into more optimized forms, but it sure could

[01:34] *** lizmat left
[01:42] * masak .oO( "who wants an off-by-one fixed?" - "me too, me too!" )

[01:44] <timotimo> :D

[01:44] <timotimo> (segmentation fault)

[01:49] <timotimo> looks like during a rakudo build spesh encounters a bunch of cases where bindattr_i or getattr_i is used on a 32bit wide attribute, and the spesh function for P6Opaque bails out in that case

[01:50] <timotimo> SubBuffer, MoarVM::Handler, MAST::Frame

[01:50] <timotimo> that could be interesting

[01:52] <timotimo> that requires new spesh ops, tho

[02:57] *** Kaiepi joined
[05:07] *** Kaiepi left
[05:08] *** Kaiepi joined
[09:58] *** lizmat joined
[10:35] *** lizmat left
[11:02] *** lizmat joined
[11:08] <timotimo> brrt, can you hear me? :3

[11:09] <timotimo> i'm trying to teach the nativecall jit implementation to handle double args, and i'm not getting the right result; i think i might accidentally be passing an address?

[11:09] <timotimo> oh

[11:10] <timotimo> from an earlier debug output i thought i was always getting JIT_ARG_DOUBLE, but it turns out i'm actually getting JIT_PARAM_DOUBLE here, which i copy-pasted from I64 or something which indeed had a lea in it

[11:11] <timotimo> cool.

[11:12] <nine> Obviously it should only pass an address for rw args

[11:12] <nine> The lea is in MVM_JIT_ARG_I64_RW

[11:14] <timotimo> copy-paste fail :)

[11:14] <timotimo> but that also means that an rw double argument should be trivial

[11:16] <Geth> ¦ MoarVM/more-nativecall-jit-arg-types: 5679821a9b | (Timo Paulssen)++ | 2 files

[11:16] <Geth> ¦ MoarVM/more-nativecall-jit-arg-types: Change CStruct For Compatibility With Native Call JIT

[11:16] <Geth> ¦ MoarVM/more-nativecall-jit-arg-types:

[11:16] <Geth> ¦ MoarVM/more-nativecall-jit-arg-types: Having the pointer to the actual data be first in

[11:16] <Geth> ¦ MoarVM/more-nativecall-jit-arg-types: the struct lets us handle a CStruct exactly like

[11:16] <Geth> ¦ MoarVM/more-nativecall-jit-arg-types: most other things in there.

[11:16] <Geth> ¦ MoarVM/more-nativecall-jit-arg-types: review: https://github.com/MoarVM/MoarVM/commit/5679821a9b

[11:16] <Geth> ¦ MoarVM/more-nativecall-jit-arg-types: 62669be8dd | (Timo Paulssen)++ | 3 files

[11:16] <Geth> ¦ MoarVM/more-nativecall-jit-arg-types: Support double Arguments In NativeCall JIT

[11:16] <Geth> ¦ MoarVM/more-nativecall-jit-arg-types: review: https://github.com/MoarVM/MoarVM/commit/62669be8dd

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: 03d4271cff | (Timo Paulssen)++ | 8 files

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: Spesh Optimize Get/Bind Attribute For int32

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit:

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: These are used in parts of the new bytecode

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: compiler that's written in nqp.

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit:

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: The code isn't exactly hot, but it could still

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: be worth something.

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit:

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: Plus, user code might have 32 bit integer

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: attributes in use.

[11:19] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: review: https://github.com/MoarVM/MoarVM/commit/03d4271cff

[11:20] <timotimo> thanks for your help, nine :)

[11:32] <timotimo> at first i was like "hey i can use p6o[get|bind]_i32 for CStruct, too!" but then i remembered p6o ops are for following the object body when resizing has happened due to mixins, and CStruct doesn't do that

[11:35] <timotimo> if i knew what to replace int_sz with to get 32bit i can also build an expr template for those ops

[11:42] *** domidumont joined
[11:47] <nine> glad to help :)

[12:57] *** lucasb joined
[12:57] *** dogbert2_ left
[14:22] <timotimo> i thought i could use sp_get_i64 on the object pointer's body

[14:22] <timotimo> but i'm only allowed to do that on 64bit!

[15:16] <timotimo> it's not crashing any more, even though it does get emitted!

[15:16] *** lucasb left
[15:25] <timotimo> why would spesh be called for a push_o when the object in question is a CStruct?

[15:27] <timotimo> whoopsie

[15:27] <timotimo> that's not right

[15:30] <Kaiepi> what sort of code is MVM_frame_capturelex called on? i find the comments for it kinda lacking

[15:32] <timotimo> whenever a block is entered that has inner blocks i guess? there's an op that gets generated and that calls this function iirc

[15:35] <Kaiepi> i'm trying to debug https://github.com/rakudo/rakudo/issues/2635 since there's been a regression some point in the last week bringing it back but i don't really know where to start

[15:35] <Kaiepi> all i know is that there's a shitload of VMArray and MVMCode REPRs being allocated

[15:37] <timotimo> theoretically the heap snapshot debugger could help here, i think

[15:37] <timotimo> actually

[15:38] <timotimo> the allocation that trips the memory limit isn't necessarily the one that allocates too much before that

[15:39] <timotimo> you should be able to gather some stack traces for allocations, right? with dtrace?

[15:44] <Kaiepi> dtrace doesn't seem to be available for my os

[15:45] <timotimo> i kind of thought dtrace came from your os :D

[15:45] <timotimo> hm, actually i think it comes from solaris?

[15:46] *** Ven`` joined
[15:46] <Kaiepi> it does iirc

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: a37c0bff71 | (Timo Paulssen)++ | src/spesh/optimize.c

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: Spesh: Fix Wrong Type Selection For push_* And pop_*

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit:

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: The repr optimization would have depended on the

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: type that was being pushed or the type that would

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: be returned (although the latter wouldn't ever be

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: known at that point) rather than the type of object

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: that the operation was performed upon.

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit:

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: That would have lead to bogus optimization for

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: push_* and missed opportunities for pop_*.

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: review: https://github.com/MoarVM/MoarVM/commit/a37c0bff71

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: 215430c4db | (Timo Paulssen)++ | 2 files

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: Spesh: Lower bindattr_i On CStruct Objects

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit:

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: turns the op that would usually start by finding

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: the right slot in the struct via metadata into

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: two cheap pointer operations

[15:48] <Geth> ¦ MoarVM/spesh-optimize-more-bindattr-getattr-32bit: review: https://github.com/MoarVM/MoarVM/commit/215430c4db

[15:57] <timotimo> i've done improved some stuff, and that's nice

[15:58] <timotimo> the push/pop one should also get to master independent of whether the other stuff can get into the release

[16:00] *** lizmat left
[16:08] *** zakharyas joined
[16:33] <Kaiepi> ok ktrace shows that moar keeps trying to call mmap on an fd of -1

[16:33] <Kaiepi> ???

[16:33] <evalable6> Kaiepi, rakudo-moar d904b7048: OUTPUT: «Stub code executed␤  in block <unit> at /tmp/k9yurkK9mu line 1␤»

[16:34] <timotimo> isn't that just how to get an anonymous mapping?

[16:35] <Kaiepi> only if MAP_ANON is passed

[16:35] <Kaiepi> lemme check again

[16:36] <Kaiepi> yeah, it is using MAP_ANON

[16:38] <timotimo> could just be malloc

[16:52] *** patrickb joined
[16:57] <timotimo> the bindattr/getattr branch is currently surviving the stresstest just fine

[16:59] <timotimo> i should have perhaps used nonblocking and maybe even nodelay

[17:14] *** lizmat joined
[17:35] <Geth> ¦ MoarVM: 03d4271cff | (Timo Paulssen)++ | 8 files

[17:35] <Geth> ¦ MoarVM: Spesh Optimize Get/Bind Attribute For int32

[17:35] <Geth> ¦ MoarVM:

[17:35] <Geth> ¦ MoarVM: These are used in parts of the new bytecode

[17:35] <Geth> ¦ MoarVM: compiler that's written in nqp.

[17:35] <Geth> ¦ MoarVM:

[17:35] <Geth> ¦ MoarVM: The code isn't exactly hot, but it could still

[17:35] <Geth> ¦ MoarVM: be worth something.

[17:35] <Geth> ¦ MoarVM:

[17:35] <Geth> ¦ MoarVM: Plus, user code might have 32 bit integer

[17:35] <Geth> ¦ MoarVM: attributes in use.

[17:35] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/03d4271cff

[17:35] <Geth> ¦ MoarVM: a37c0bff71 | (Timo Paulssen)++ | src/spesh/optimize.c

[17:35] <Geth> ¦ MoarVM: Spesh: Fix Wrong Type Selection For push_* And pop_*

[17:35] <Geth> ¦ MoarVM:

[17:35] <Geth> ¦ MoarVM: The repr optimization would have depended on the

[17:35] <Geth> ¦ MoarVM: type that was being pushed or the type that would

[17:35] <Geth> ¦ MoarVM: be returned (although the latter wouldn't ever be

[17:35] <Geth> ¦ MoarVM: known at that point) rather than the type of object

[17:35] <Geth> ¦ MoarVM: that the operation was performed upon.

[17:35] <Geth> ¦ MoarVM:

[17:35] <Geth> ¦ MoarVM: That would have lead to bogus optimization for

[17:35] <Geth> ¦ MoarVM: push_* and missed opportunities for pop_*.

[17:35] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a37c0bff71

[17:35] <Geth> ¦ MoarVM: 215430c4db | (Timo Paulssen)++ | 2 files

[17:35] <Geth> ¦ MoarVM: Spesh: Lower bindattr_i On CStruct Objects

[17:35] <Geth> ¦ MoarVM:

[17:35] <Geth> ¦ MoarVM: turns the op that would usually start by finding

[17:35] <Geth> ¦ MoarVM: the right slot in the struct via metadata into

[17:35] <Geth> ¦ MoarVM: two cheap pointer operations

[17:35] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/215430c4db

[17:45] *** Ven`` left
[18:06] <Kaiepi> ok moar's spamming running MVM_repr_pos_splice with two of the exact same VMString and both offsets being 0

[18:08] <timotimo> wouldn't that not do anything?

[18:08] <timotimo> or insert stuff at the beginning of the array?

[18:08] <timotimo> by both offsets you mean the offset and the length?

[18:09] <timotimo> but what's the other array that's being spliced in?

[18:09] <Kaiepi> offset and the length yes

[18:09] <Kaiepi> there is no other array being spliced in, it's the same as the original

[18:09] <Kaiepi> same offset and everything

[18:12] <timotimo> ok, that's effectively adding stuff to the beginning

[18:12] <timotimo> so where does it happen?

[18:20] <Kaiepi> it happens with the sp_jit_enter op

[18:25] <Kaiepi> as well as the splice op

[18:28] <timotimo> "with the sp_jit_enter" op? that probably just means it's going into jit which totally messes up stack traces

[18:28] <timotimo> i recommend turning off the jit when doing anything instrumentationy

[19:24] <Kaiepi> ok i narrowed the bug down to Blob.new

[20:04] *** brrt joined
[20:05] <brrt> ohai

[20:05] <brrt> nine++ for helping timotimo++ out :-)

[20:06] <timotimo> yo brrt :)

[20:06] <brrt> timotimo++ for fixing JIT issues :-)

[20:06] <timotimo> i haven't yet implemented support for "is rw" doubles, and no support for floats either

[20:07] <brrt> why, make my job harder still :-P

[20:07] <brrt> I've promised to port that stuff over to expr JIT

[20:08] *** domidumont left
[20:08] <timotimo> oh i haven't implemented p6obind_i32 (and the get variant) to the exprjit yet

[20:09] <timotimo> what do i have to put in place of int_sz to make it work right?

[20:09] <Kaiepi> the jit and spesh are way beyond me

[20:09] <Kaiepi> well

[20:10] <Kaiepi> not so much the jit since i contributed to it before

[20:10] <Kaiepi> but apart from adding templates i wouldn't know what to change

[20:10] <timotimo> the old jit is "easy" to extend for some things

[20:10] <timotimo> but of course it won't generate very good code

[20:15] <brrt> Kaiepi: I'm somewhat saddened by that

[20:15] <brrt> can't blame you, of course

[20:16] <brrt> the legacy JIT is (essentially) a single pass compiler, as in, nothing changes really between the first pass and the second

[20:16] <Kaiepi> i have the compilers: principles, techniques, & tools book that i need to get around to reading at some point

[20:16] <Kaiepi> would that help?

[20:22] <Geth> ¦ MoarVM: efdf568975 | (Timo Paulssen)++ | 2 files

[20:22] <Geth> ¦ MoarVM: Change CStruct For Compatibility With Native Call JIT

[20:22] <Geth> ¦ MoarVM:

[20:22] <Geth> ¦ MoarVM: Having the pointer to the actual data be first in

[20:22] <Geth> ¦ MoarVM: the struct lets us handle a CStruct exactly like

[20:22] <Geth> ¦ MoarVM: most other things in there.

[20:22] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/efdf568975

[20:22] <Geth> ¦ MoarVM: f818bd6d5e | (Timo Paulssen)++ | 3 files

[20:22] <Geth> ¦ MoarVM: Support double Arguments In NativeCall JIT

[20:22] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f818bd6d5e

[20:24] <brrt> Kaiepi: maybe. But I have read that book also, and I found that it wasn't very detailed on the code generation and register allocation bits

[20:25] <brrt> which is most of what the expr jit is :-)

[20:25] <timotimo> turning spesh up with nodelay and blocking there gets isDEPRECATED to have different line numbers and fail :o

[20:31] <brrt> oops

[20:32] <brrt> so... part of the way in which luajit handles register allocation, is by not handling it; there are a few cases in which it just gives up

[20:36] <brrt> also, luajit just blends register allocation, instruction selection and assembly in one process

[20:41] <brrt> so it's an interesting design and algorithm but it is *nothing* like the algorithm for moarvm

[20:47] <brrt> one of the interesting bits is that it works in reverse order, so (by virtue of SSA form), the first encounter is the last use, and the (only) definition is the first definition; so as soon as the definition is encountered, the register can be released

[20:49] *** zakharyas left
[21:47] *** patrickb left
[21:51] *** brrt left
[21:51] <timotimo> i just checked to make sure the saem failures appeared in the spec tests before my changes

[23:51] *** AlexDaniel left
