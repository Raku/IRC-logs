[00:45] *** sivoais left
[00:48] *** sivoais joined
[05:33] *** Ven`` joined
[05:42] *** Ven`` left
[07:18] *** brrt joined
[07:54] <brrt> \o

[07:59] <nwc10> o/

[08:27] *** Ven`` joined
[08:27] *** Ven`` left
[09:08] *** zakharyas joined
[09:18] *** brrt left
[09:30] *** brrt joined
[09:40] *** yoleaux left
[10:09] <jnthn> o/

[10:10] <nwc10> \o

[10:24] *** brrt left
[10:24] *** brrt joined
[10:31] *** scovit left
[10:34] *** brrt left
[10:37] *** brrt joined
[10:43] <brrt> the problem I debugged yesterday (the one that appeared in the optimizer), I'm going to deem the 'missing ancestor problem'

[10:44] <brrt> and this specific instance is the eliminated ancestor problem

[10:44] <brrt> this problem is:

[10:48] <brrt> - if there is a expression tree that has multiple branches, and there is a value referenced in either of them, then it must be defined (reified) in an 'ancestor' of those branches

[10:48] <brrt> if that value *isn't* reified before the branches, then one of the branches gets the value and the other does not

[10:49] <brrt> in this case, the original template does have the value reified (in the condition) but that reification is eliminated, which means that the first reference is in the branch, leaving the second reference with a garbage value

[10:49] <brrt> so... I'm guessing the wrongness here is the dependency on the ancestral definition in the first place

[10:49] <brrt> what I'm not very sure of, yet, is how to fix it

[10:57] *** brrt left
[11:01] * lizmat hopes that R#2704 is now easily fixable by jnthn

[11:02] <synopsebot> R#2704 [open]: https://github.com/rakudo/rakudo/issues/2704 [regression][⚠ blocker ⚠] Does not fail with spesh disabled, fails 100% with MVM_SPESH_BLOCKING

[12:05] *** brrt joined
[12:09] *** zakharyas left
[12:27] *** brrt left
[12:55] *** lucasb joined
[12:59] <dogbert11> lizmat: have you tried with MVM_SPESH_INLINE_DISABLE=1 ?

[13:05] <jnthn> I just have and that hides it

[13:08] <dogbert11> jnthn: I can confirm that the commit of interest should be https://github.com/rakudo/rakudo/commit/eb3917c260bce1cb56e2ee40abebd12c4dbcd9b2

[13:12] *** AlexDani` joined
[13:14] *** AlexDaniel left
[13:17] <jnthn> It's not interesting, though.

[13:18] <jnthn> I mean, it's not a spesh change, so all it means is "that commit caused a code-gen change that exposed an existing problem"

[13:19] *** AlexDani` is now known as AlexDaniel

[13:20] <masak> kind of like a bug wrangler does

[13:21] <dogbert11> I should perhaps note that on eb3917c the error msg shows up immediately and is: Invocant of method 'match' must be a type object of type 'Any', not an object instance of type 'Concatenation'.  Did you forget a 'multi'?

[13:22] <dogbert11> turning on spesh here does NOT help

[13:22] <dogbert11> *off

[13:23] <jnthn> Deopt one requested by interpreter in frame 'to-lines' (cuid '17')

[13:23] <jnthn>     Will deopt 364 -> 258

[13:23] <jnthn>     Resolved offset 364 to deopt index 58

[13:23] <jnthn>     Materialized a Scalar

[13:23] <jnthn>     Materialized a Str

[13:23] <jnthn>     Recreated frame 'modifier-to-string' (cuid '12')

[13:23] <jnthn> Completed deopt_one in 'modifier-to-string' (cuid '12') with potential uninlining

[13:24] <jnthn> That happens just before it goes wrong

[13:24] <jnthn> I'm guessing the VMNull comes from a deopt gone bad

[13:27] <jnthn> Ah, and MVM_SPESH_PEA_DISABLE=1 also seems to hide the problem, though I was sure I'd tried that earlier and it didn't...wonder if I typo'd it or something

[13:27] * dogbert11 makes a note of the new debug flag

[13:30] <jnthn> Unfortunately, PEA + deopt = probably difficult

[13:32] *** zakharyas joined
[13:33] <Geth> ¦ MoarVM/expr-jit-invoke: 47e4518249 | (Bart Wiegmans)++ | 4 files

[13:33] <Geth> ¦ MoarVM/expr-jit-invoke: [JIT] Implement invoke sequence in expr JIT

[13:33] <Geth> ¦ MoarVM/expr-jit-invoke: review: https://github.com/MoarVM/MoarVM/commit/47e4518249

[13:33] <Geth> ¦ MoarVM/expr-jit-invoke: 34a17b9207 | (Bart Wiegmans)++ | src/jit/graph.c

[13:33] <Geth> ¦ MoarVM/expr-jit-invoke: [JIT] Eliminate special consume_invoke opcode

[13:33] <Geth> ¦ MoarVM/expr-jit-invoke:

[13:33] <Geth> ¦ MoarVM/expr-jit-invoke: Except for nativecall_invoke, we no longer need this part of the

[13:33] <Geth> ¦ MoarVM/expr-jit-invoke: legacy JIT.

[13:33] <Geth> ¦ MoarVM/expr-jit-invoke: review: https://github.com/MoarVM/MoarVM/commit/34a17b9207

[13:33] <Geth> ¦ MoarVM/expr-jit-invoke: 00575bd853 | (Bart Wiegmans)++ | 7 files

[13:33] <Geth> ¦ MoarVM/expr-jit-invoke: [JIT] WIP on nativeinvoke in the expression JIT

[13:33] <Geth> ¦ MoarVM/expr-jit-invoke: review: https://github.com/MoarVM/MoarVM/commit/00575bd853

[13:40] *** brrt joined
[14:08] <dogbert11> jnthn: did some bisecting of you pea branch in MoarVM. The last good commit is https://github.com/MoarVM/MoarVM/commit/166d0acf9d8b4fa880cc476ff64c5118e3cfd69e

[14:09] <jnthn> bah, hard to find, but utterly silly...

[14:10] <dogbert11> so you found it :)

[14:10] <jnthn> Seems so. Almost ashamed to push it :P

[14:10] <dogbert11> haha

[14:11] <masak> :)

[14:12] <Geth> ¦ MoarVM: 04982f6e9c | (Jonathan Worthington)++ | src/spesh/inline.c

[14:12] <Geth> ¦ MoarVM: Fix thinko in merge of materialization tables

[14:12] <Geth> ¦ MoarVM:

[14:12] <Geth> ¦ MoarVM: During inlining, we always copied the registers from the first entry in

[14:12] <Geth> ¦ MoarVM: the materializations table, not the current one we should have been

[14:12] <Geth> ¦ MoarVM: looking at.

[14:12] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/04982f6e9c

[14:12] <masak> oops ;)

[14:14] <masak> I almost feel like some static linting tool could have piped up and said "you know you're not _using_ `i` at all, right?"

[14:14] <jnthn> Yeah, quite possibly

[14:14] <jnthn> Heck, if I did my MoarVM coding in CLion rather than Vim it might well have caught it :)

[14:15] <jnthn> Maybe I should be using that :)

[14:15] <masak> yeah, now I'm curious whether CLion would've caught it... :)

[14:15] <dogbert11> another poor blocker eliminated

[14:17] <jnthn> masak: It does highlight such unused things in IntelliJ, so quite possibly

[14:18] <masak> hm, "highlight" as in turn grey. more like "lowlight"...

[14:26] <jnthn> :P

[14:27] <jnthn> timotimo: https://github.com/MoarVM/MoarVM/commit/efdf568975cf38c2 causes https://github.com/rakudo/rakudo/issues/2703

[14:29] <jnthn> Even with MVM_JIT_DISABLE=1 set

[14:31] <jnthn> And indeed, commenting out the second hunk of the patch makes no difference; it really is the swapping of the order of the fields

[14:32] *** brrt left
[14:37] <jnthn> timotimo: False alarm; the module actually its doing .WHERE and then poking into MoarVM REPR internals!

[14:38] <jnthn> I'll gladly break things that do that.

[14:49] <jnthn> Updated relevant tickets, and opened an issue on the module in question.

[14:50] <dogbert11> can't be many blockers left now

[14:51] <jnthn> Maybe https://github.com/rakudo/rakudo/issues/2706

[14:53] <timotimo> oooh! right! we do have those NativeHelpers

[14:53] <timotimo> yeah, i didn't think of them when i changed that

[14:59] <jnthn> Well, we shouldn't really have to think of things outside of MoarVM when we do such changes.

[14:59] <jnthn> This won't be the only change of that nature that we'll want to do

[15:02] <timotimo> aye

[15:02] <timotimo> we could at least point them out to the module authors so they can have some detection code

[15:03] <jnthn> Yes, in the issue I opened on the module I suggested version detection code, but also noted that we should try and make it so such trickery isn't required.

[15:03] <timotimo> aye

[15:04] <timotimo> i still haven't actually put any reviewing work in to bring the CStructArray PR closer to being merged

[15:04] <jnthn> Yeah, I think that'd help

[15:08] <timotimo> so NativeHelpers::Blob should be implementable by "just" making CStruct support vmarray, and i guess semantics of "always copy the size the vmarray had before from the pointer that is now there" when refreshing the CStruct after a native call

[15:08] <timotimo> but damn, that sounds slow

[15:11] *** zakharyas left
[15:12] <jnthn> .tell brrt Looking into https://github.com/rakudo/rakudo/issues/2706 but it seems to be a JIT bug

[15:12] <jnthn> aww, no bot

[15:13] <jnthn> timotimo: Ah, possibly ^ is of interest to you also

[15:14] <jnthn> Oh, I should check it's not using NativeHelpers::Blob before going any futher I guess

[15:14] <jnthn> No, it ain't

[15:15] <jnthn> But it's fine at 2eab275df145c58c269220fe and not at HEAD

[15:16] <jnthn> d626337bea9ea752fcf is bad also

[15:17] <jnthn> 215430c4db7 is good

[15:19] <jnthn> It's efdf568975cf38c2

[15:20] <jnthn> And commeting out the JIT part of that patch fixes it

[15:22] <jnthn> timotimo: Any ideas?

[15:23] <jnthn> I don't immediately see why it'd be wrong

[15:24] <jnthn> On the other hand I'm not totally familiar with this bit of the cdoe

[15:24] <jnthn> *code

[15:27] *** zakharyas joined
[15:28] <timotimo> if the cstruct arg isn't in the last position of that signature, it's possible putting support for cstructs actually unhid something

[15:28] <jnthn> Didn't figure out what sig it is yet

[15:28] <jnthn> Valgrind has nothing to say

[15:30] <jnthn> Almost every method in there has a CStruct argument

[15:31] <jnthn> So it could be pretty much any of them

[15:32] <timotimo> in theory we could have a global counter that counts down and at 0 it always fails at CStruct

[15:33] <timotimo> gotta go!

[15:35] <jnthn> We have a loop like this:

[15:35] <jnthn>         while $glyph-idx {

[15:35] <jnthn>             $!struct.FT_Load_Glyph( $glyph-idx, $flags );

[15:35] <jnthn>             &code($glyph);

[15:35] <jnthn>             $glyph.char-code = $!struct.FT_Get_Next_Char( $glyph.char-code, $glyph-idx);

[15:35] <jnthn>         }

[15:35] <jnthn> And

[15:35] <jnthn>     method FT_Get_Next_Char(

[15:35] <jnthn>         FT_ULong  $char-code,

[15:35] <jnthn>         FT_UInt  $agindex is rw )

[15:35] <jnthn>     returns FT_ULong is native(FT-LIB) {*};

[15:35] <jnthn> I wonder if it's about that `is rw` arg there

[15:37] <dogbert11> Red seems to use NativeHelpers, i.e  R#2665

[15:37] <synopsebot> R#2665 [open]: https://github.com/rakudo/rakudo/issues/2665 [⚠ blocker ⚠] MoarVM panic when testing Red

[15:38] <jnthn> dogbert11: Yeah, I already figured that's just a case of the same

[15:38] <jnthn> Commenting out `case MVM_NATIVECALL_ARG_UINT` in that JIT switch also helps

[15:39] <jnthn> As does adding `if (is_rw) goto fail;` for the int cases

[15:40] *** zakharyas1 joined
[15:40] *** zakharyas left
[15:45] <jnthn> I also notice it uses MVM_JIT_ARG_I64_RW for all of them

[15:48] <jnthn> nine: If you've a moment at some point to look, https://github.com/rakudo/rakudo/issues/2706 seems to be a nativecall JIT bug, but mostly that adding CStruct support there has exposed an existing problem

[15:50] <jnthn> At some point it just starts returning the same value endlessly, which makes me think the rw isn't w'ing :)

[15:50] *** zakharyas1 left
[15:50] <jnthn> Alas, I don't have time to dig in right now to figure out why.

[15:52] <dogbert11> arg_type = dst == -1

[15:52] <dogbert11>                         ? is_rw ? MVM_JIT_ARG_I64_RW : MVM_JIT_ARG_I64

[15:52] <dogbert11>                         : is_rw ? MVM_JIT_PARAM_I64_RW : MVM_JIT_PARAM_I64;

[15:52] <dogbert11> I must admit I don't understand that construct

[15:53] <lizmat> 	arg_type = (dst == -1 .... ) perhaps better ?

[15:54] <dogbert11> yeah, helps a bit I guess

[15:55] <jnthn> It does also seem sensitive to inlining

[15:57] <jnthn> OK, I'm out of time for now

[15:57] <jnthn> Plus I suspect one of brrt++ or nine++ could figure it out faster than I can anyway

[16:08] *** zakharyas joined
[16:45] *** MasterDuke left
[16:47] *** zakharyas1 joined
[16:50] *** zakharyas left
[17:06] *** zakharyas1 left
[18:40] <timotimo> https://twitter.com/johnregehr/status/1097654645982355456 - oh wow

[20:05] *** lucasb left
[22:19] <jnthn> Yowser, interesting.

