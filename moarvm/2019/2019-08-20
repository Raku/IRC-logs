[00:00] *** reportable6 left
[00:00] <Geth> ¦ MoarVM/master: 5 commits pushed by (Timo Paulssen)++

[00:00] <Geth> ¦ MoarVM/master: 09bd015c01 | Give arg spesh more comments for when it bails

[00:00] <Geth> ¦ MoarVM/master: 46516af49b | spesh: Lower slurpy positional args to a set of getarg ops

[00:00] <Geth> ¦ MoarVM/master: 43e3d11475 | spesh: Output duplicate getarg ops in spesh log

[00:00] <Geth> ¦ MoarVM/master: aa2e96c496 | spesh: Comment when slurpy hash has been created

[00:00] <Geth> ¦ MoarVM/master: 03d3db9356 | spesh: Sanity check if hash ever gets an initialize func

[00:00] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/d1af2f2fcc01...03d3db9356e0

[00:02] *** reportable6 joined
[00:02] *** kiwi_65 joined
[00:14] <timotimo> param_sn and param_sp are both :noinline, so now frames that use slurpy positionals can be inlined \o/

[00:16] <timotimo> and then of course there's the potential to scalar-replace small arrays and small hashes like the ones made by param_sp and param_sn respectively

[00:34] <timotimo> just scalar-replacing hashes that never get assigned to or read from would already be a little win, so that they only get materialized when deopt happens

[00:34] <timotimo> in many places, a slurpy hash parameter hash gets kept alive just by deopt points

[00:37] <Kaiepi> what does spesh do? are there docs on it?

[00:39] <timotimo> it logs usage information about all code that's being executed

[00:40] <timotimo> then it finds code that's "hot" enough to be considered for dynamic specialization (that's where "spesh" comes from)

[00:41] <timotimo> then it converts the bytecode of the "hot" frames into a form better suited for analysis (which is Static Single Assignment form, and splitting it into "basic blocks", linked together in a control-flow graph)

[00:43] <timotimo> after that, information about how the code gets invoked (how many parameters, what types) and what was logged during execution is used to make optimizations to the bytecode. some are "certain", but many are "speculative" and require guards to be inserted into the specialized code

[00:43] <timotimo> guards are cheap checks that allow the specialized code to jump back to unspecialized code to handle every general case

[00:43] <timotimo> one of the most important optimizations that spesh does is speculatively inline other code

[00:44] <timotimo> because it can figure out what happens to data that is passed from the caller to the callee and returned back out

[00:45] <timotimo> and more recently, partial escape analysis came to moarvm, which allows to speculatively not allocate objects until they really really have to be an actual object. until then, their attributes and such just get mapped to local variables (locals map to registers on moarvm)

[00:45] <timotimo> Kaiepi: does that help?

[00:46] <Kaiepi> gimme a minute, i was afk

[00:46] <timotimo> haha

[00:46] <timotimo> jn's blog has loads of posts about spesh, and he's also given multiple talks that explain chunks of spesh

[00:48] <Kaiepi> sounds like something i'd have to read to really understand

[00:48] <timotimo> setting MVM_SPESH_LOG=/tmp/blah.txt and running some random code can give you a bit of an idea what happens

[00:52] <Kaiepi> there's still a lot of moarvm i have yet to read. i've dealt with i/o, nativecall, and reprs fairly closely but that's about it

[00:53] <Kaiepi> and parts of the jit i guess

[00:54] <Kaiepi> the gc i'll need to pore through at some point before i finish my grant work so i don't screw up implementing async unix sockets

[01:06] *** MasterDuke left
[01:19] *** lucasb left
[03:07] *** squashable6 left
[03:07] *** squashable6 joined
[03:10] *** kiwi_65 left
[05:33] *** robertle left
[05:55] *** brrt joined
[05:55] <brrt> \o

[05:56] <nwc10> o/

[05:59] <brrt> timotimo: +1 on spesh-log-toolage

[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:19] *** fake_space_whale left
[06:21] *** brrt left
[06:41] *** rba left
[06:42] *** rba joined
[06:45] *** rba left
[06:45] *** rba joined
[07:05] *** domidumont joined
[07:27] *** sena_kun joined
[07:28] *** sena_kun left
[08:16] *** robertle joined
[08:40] *** zakharyas joined
[08:45] *** sena_kun joined
[09:22] *** zakharyas left
[09:40] *** camelia left
[09:42] *** camelia joined
[09:42] *** zakharyas joined
[09:55] *** brrt joined
[10:01] *** zakharyas left
[10:27] *** squashable6 left
[10:32] *** brrt left
[10:32] *** squashable6 joined
[11:18] *** brrt joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:14] *** sena_kun left
[12:14] *** sena_kun joined
[12:33] <Geth> ¦ MoarVM/master: 29 commits pushed by (Bart Wiegmans)++

[12:33] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/03d3db9356e0...7f8283424598

[12:33] <brrt> ^ that was 'jit-expr-float'

[12:34] <timotimo> cool

[12:34] <brrt> bug reports at my address please... :-)

[12:36] <brrt> on to the next!

[12:36] <timotimo> linear nodes, right?

[12:51] *** domidumont left
[12:51] *** domidumont1 joined
[12:54] <brrt> well, either that, or devirtualization

[12:55] <brrt> basically, I aim to leverage the expression template precompiler, to minimze the amount of rewriting I'll have to do for the linear IR

[13:01] <jnthn> .oO( guards! )

[13:01] *** lucasb joined
[13:03] <brrt> can't have them all at once

[13:05] <brrt> jnthn: ooc, do you mean, the deopt guards, or the spesh candidate guard tree?

[13:05] <brrt> different problems

[13:07] <jnthn> deopt guards

[13:07] <jnthn> Many times, those are what seems to terminate the expr JIT's fun

[13:07] <jnthn> Though a few other things like sp_bind_o also seem to, which I guess is just missing templates

[13:10] * brrt was looking at sp_bind_o recently, but forgot what happened there

[13:10] <brrt> Ok.. I'll put it on my list... I actually don't think these should be hard?

[13:12] <brrt> and they might benefit from named templates

[13:18] <jnthn> Well, for guards, in terms of code size what'd be *really* nice is if we just set in some defined register the deopt point and then branched to a label with some code at the end, or some such

[13:18] <jnthn> So that we don't bulk out the generated machine code with lots of calls to the deopt function

[13:18] <jnthn> And thus get better instruction cache usage

[13:19] <jnthn> We can maybe even do a conditional write of the deopt index (or just always write it to a register unconditionally, if that's cheaper)

[13:19] <jnthn> And then the code at an actual guard site becomes the guard + a (conditional) mov + a conditional branch, and if we don't deopt we don't take the branch.

[13:22] <brrt> jnthn: 'call' sound suspiciously like the instruction you'd want :-D

[13:22] <brrt> for 'branch with a value in a predefined register'

[13:22] <brrt> and... I agree... and this is totally possible.

[13:23] <brrt> hmmmm.

[13:24] <brrt> not sure, btw, if we can do conditional moves on literal values

[13:24] <brrt> no, not with a literal

[13:33] <brrt> ... but we can always just use 'rax' for this....

[13:33] <brrt> since I have that as the spare register anyway

[14:13] <AlexDaniel> timotimo: it did it again: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-08-20#l136

[14:13] <AlexDaniel> timotimo: although your idea of not sending the messages if the user replies kinda works!

[14:19] *** domidumont1 left
[15:05] *** robertle left
[15:21] *** brrt left
[15:26] *** pamplemousse joined
[15:27] <pamplemousse> o/

[15:40] *** sena_kun left
[15:52] *** robertle joined
[16:10] *** brrt joined
[16:31] *** chloekek joined
[16:39] *** brrt left
[16:52] *** domidumont joined
[17:15] *** brrt joined
[17:39] *** brrt left
[18:00] *** reportable6 left
[18:04] *** reportable6 joined
[18:39] *** MasterDuke joined
[19:01] *** chloekek left
[19:04] *** domidumont left
[19:44] *** Ven`` joined
[20:12] <MasterDuke> getcomp is tied for second place in causing number of `jit bailed completely` during a rakudo build. does it make any sense to try and jit it? or not, since it does the mutex locking?

[20:13] *** pamplemousse left
[20:14] <MasterDuke> it's tied with `param_on_o`. can the `param_on_*` ops be jitted?

[20:14] *** Ven`` left
[20:21] *** Ven`` joined
[20:31] *** Ven`` left
[20:39] *** chloekek joined
[21:15] <MasterDuke> timotimo, et al.: any idea why valgrind complains that `Conditional jump or move depends on uninitialised value(s)` at  https://github.com/MasterDuke17/libtommath/commit/0154390e3a0b8f2a3f5825f033a99879f80fdf01#diff-dc8ab2bea810b0bf413c8746be067201R16 if you pass a malloced string instead of a calloced one?

[21:59] *** robertle left
[22:12] *** chloekek left
[22:54] <jnthn> MasterDuke: I figur eyou know, but in case not: malloc doesn't zero memroy, calloc does

[22:55] <jnthn> MasterDuke: Possible accident with failing to set the NULL terminator?

[22:58] <jnthn> MasterDuke: Also, probably wise to use snprintf

