[00:00] *** manchicken joined
[00:02] *** patrickb left
[00:42] *** manchicken left
[00:47] *** MasterDuke joined
[00:47] *** MasterDuke left
[00:47] *** MasterDuke joined
[01:06] *** Kaiepi joined
[01:36] <MasterDuke> what would be good to add to this? https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L6125

[01:36] <MasterDuke> outers?

[01:49] <jnthn> Or just have spesh make sure there's that many outers in the static chain and toss the error check for moar speedz :)

[01:49] <jnthn> In fact, I think the JIT doesn't even do the check anyway

[01:51] <jnthn> sleep &

[01:51] <evalable6> jnthn, rakudo-moar d6563816e: OUTPUT: «Use of uninitialized value of type Callable in numeric context␤  in block <unit> at /tmp/l…»

[01:51] <evalable6> jnthn, Full output: https://gist.github.com/b403c0315be515f7de05a7b7d93465fc

[01:51] <MasterDuke> jnthn: i'm going through execeptions and trying to add relevant context info

[01:51] <MasterDuke> sounds like i'm going to skip this one then

[02:22] <timotimo> https://www.reddit.com/r/perl6/comments/at88oa/always_wear_safety_equipment_when_inline/eh1abnf/ - just posted a long-ass comment about spesh optimizations up on reddit

[02:23] <MasterDuke> btw, nice post

[02:23] <timotimo> thanks :)

[02:26] <MasterDuke> i don't quite follow this sentence: `The check for the STable pointer is one of these guards, and guards are "deduplicated", i.e. guards that check something that was already established either by another guard, or by the knowledge of what a specific instruction will do.`

[02:26] <timotimo> hm, yeah, that's kind of not very well worded

[02:27] <timotimo> how is it now?

[02:27] <MasterDuke> feels like it's missing something like " are detected and not redundantly added." (assuming that's correct and what you're going for)

[02:28] <MasterDuke> yep, better

[02:28] <timotimo> much better than to add something was to remove most of it :D

[02:30] <MasterDuke> good info over all

[03:17] <Geth> ¦ MoarVM: ugexe++ created pull request #1057: Use _wopen on windows via uv_fs_open

[03:17] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1057

[07:30] *** avarab joined
[07:30] *** avarab left
[07:30] *** avarab joined
[07:30] *** scovit_ joined
[07:30] *** sivoais_ joined
[07:40] *** sivoais left
[07:40] *** avar left
[07:40] *** scovit left
[07:40] *** nebuchadnezzar left
[07:41] *** nebuchadnezzar joined
[07:42] *** Kaiepi left
[09:29] *** evalable6 left
[09:33] *** evalable6 joined
[09:45] *** Kaiepi joined
[10:46] <Geth> ¦ MoarVM: ac078196d3 | (Stefan Seifert)++ | 2 files

[10:46] <Geth> ¦ MoarVM: Fix rw args of native calls not getting updated if JIT compilation fails

[10:46] <Geth> ¦ MoarVM:

[10:46] <Geth> ¦ MoarVM: This fixes issue with rw args to native calls, when the JIT fails to compile

[10:46] <Geth> ¦ MoarVM: the call graph the nativeinvoke_o is in. Happens for example because we're

[10:46] <Geth> ¦ MoarVM: missing the case for MVM_OP_getlexref_u8.

[10:46] <Geth> ¦ MoarVM:

[10:46] <Geth> ¦ MoarVM: optimize_getarg worked on the assumption that the JIT compiler will not emit any

[10:46] <Geth> ¦ MoarVM: <…commit message has 19 more lines…>

[10:46] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ac078196d3

[10:46] <Geth> ¦ MoarVM: ce8249a363 | (Stefan Seifert)++ | src/jit/x64/emit.dasc

[10:46] <Geth> ¦ MoarVM: Fix JITed extend_u8 accidentally extending 16 bits.

[10:46] <Geth> ¦ MoarVM:

[10:46] <Geth> ¦ MoarVM: Clearly a copy&paste failure. However, this would probably have not caused

[10:46] <Geth> ¦ MoarVM: any issues as a register holding a u8 value should not have values > 255 anyway.

[10:46] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ce8249a363

[10:46] <Geth> ¦ MoarVM: 7ca628263b | (Stefan Seifert)++ | src/jit/graph.c

[10:46] <Geth> ¦ MoarVM: JIT compile getlexref_u*

[10:46] <Geth> ¦ MoarVM:

[10:46] <Geth> ¦ MoarVM: They should be just the same as getlexref_i*

[10:46] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7ca628263b

[10:46] <Geth> ¦ MoarVM: ac078196d3 | (Stefan Seifert)++ | 2 files

[10:46] <Geth> ¦ MoarVM: Fix rw args of native calls not getting updated if JIT compilation fails

[10:46] <Geth> ¦ MoarVM:

[10:46] <Geth> ¦ MoarVM: This fixes issue with rw args to native calls, when the JIT fails to compile

[10:46] <Geth> ¦ MoarVM: the call graph the nativeinvoke_o is in. Happens for example because we're

[10:46] <Geth> ¦ MoarVM: missing the case for MVM_OP_getlexref_u8.

[10:46] <Geth> ¦ MoarVM:

[10:46] <Geth> ¦ MoarVM: optimize_getarg worked on the assumption that the JIT compiler will not emit any

[10:46] <Geth> ¦ MoarVM: <…commit message has 19 more lines…>

[10:46] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ac078196d3

[10:47] <Geth> ¦ MoarVM: ce8249a363 | (Stefan Seifert)++ | src/jit/x64/emit.dasc

[10:47] <Geth> ¦ MoarVM: Fix JITed extend_u8 accidentally extending 16 bits.

[10:47] <Geth> ¦ MoarVM:

[10:47] <Geth> ¦ MoarVM: Clearly a copy&paste failure. However, this would probably have not caused

[10:47] <Geth> ¦ MoarVM: any issues as a register holding a u8 value should not have values > 255 anyway.

[10:47] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ce8249a363

[10:47] <Geth> ¦ MoarVM: 7ca628263b | (Stefan Seifert)++ | src/jit/graph.c

[10:47] <Geth> ¦ MoarVM: JIT compile getlexref_u*

[10:47] <Geth> ¦ MoarVM:

[10:47] <Geth> ¦ MoarVM: They should be just the same as getlexref_i*

[10:47] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7ca628263b

[10:49] <lizmat> Geth is hickupping ?

[10:50] <lizmat> nine: time to bump or will you ?

[10:54] <nine> will do

[11:11] *** robertle joined
[11:55] *** lucasb joined
[13:02] <jnthn> nine++ \o/

[13:02] <jnthn> That probably means we can, at last, have a release :)

[13:03] <nine> Looks like :)

[14:12] <dogbert11> hmm

[14:14] <dogbert11> there's another test failure in Font::Fretype

[14:14] <dogbert11> a SEGV no less. To be fair, the test is marked TODO but still

[14:16] <nine> dogbert11: well, there's hope that it's just a bug in Font::Freetype if it's a TODO test. Since it's using NativeCall a segfault may actually be ok.

[14:16] <dogbert11> crashes at https://github.com/MoarVM/MoarVM/blob/master/src/spesh/log.c#L156

[14:17] <dogbert11> nine: could be, however no SEGV with 2018.12

[14:17] <nine> darn

[14:19] <dogbert11> can confirm that the previous, JIT related problem, is fixed, nine++

[14:20] <dogbert11> to avoid confusion, the SEGV occurs with MVM_SPESH_DISABLE=1 as well albeit on another line

[14:27] *** manchicken joined
[14:30] * dogbert11 attempts some bisecting ...

[14:35] <dogbert11> it works up until https://github.com/rakudo/rakudo/commit/d904b7048bfaa8b7e1583baa1af0665f29c5b8c3

[14:37] <dogbert11> the next rakudo, i.e. https://github.com/rakudo/rakudo/commit/ee2238f731f548861e26d745ea1be2ba22d24f4e fails, but instead of a SEGV it fails with '===SORRY!=== Cannot invoke this object (REPR: P6opaque; NQPMu)'

[14:43] <dogbert11> heh, 'if $*PERL.compiler.version < v2018.11 { skip "tests unreliable on this Rakudo version", 2; }'

[14:44] *** Kaiepi left
[14:45] *** Kaiepi joined
[14:52] * dogbert11 continues the bisection process

[15:04] <nine> dogbert11: that bisection result could be misleading. I remember jnthn fixing up that change later on

[15:12] <dogbert11> I noticed that when I tried a later build, i.e. 4a2124a62caafbd8b8b7364546f66158ac1c4c69, so now Iäm more thorough :)

[15:16] *** manchicken left
[15:32] *** brrt joined
[15:57] <dogbert11> nine, timotimo: it seems to be this commit https://github.com/MoarVM/MoarVM/commit/efdf568975cf38c2b711c3c9c6c2bb741bf89460

[15:57] <brrt> ohai #moarvm

[15:58] <timotimo> dogbert11: what happens if you comment out the part in nativecall.c? does it still explode?

[15:58] <dogbert11> hello brrt

[15:58] <brrt> hi dogbert11, timotimo

[15:58] <dogbert11> timotimo: the 'case MVM_NATIVECALL_ARG_CSTRUCT:' part?

[15:58] <timotimo> yes

[15:58] <dogbert11> let's see

[16:00] <timotimo> does Font::Freetype use any NativeHelpers modules?

[16:02] *** Kaiepi left
[16:03] <brrt> timotimo++ nice blog post

[16:03] <brrt> and nice progress on moarperf

[16:03] <brrt> stuff is looking cool

[16:03] <timotimo> thank you :)

[16:03] <timotimo> glad to hear it

[16:04] * brrt needs to make progress on the expression JIT grant

[16:04] <brrt> trouble is, I discovered a nicer register allocation algorithm, and now I don't like the current one anymore

[16:04] <timotimo> the one from luajit, right? the one that goes backwards?

[16:04] <brrt> yes

[16:05] <brrt> and I need to solve the missing-ancestor problem

[16:06] <dogbert11> timotimo: without the case statement it does no longer SEGV

[16:06] <timotimo> right

[16:06] <timotimo> dogbert11: damn :(

[16:07] <dogbert11> it does not seem to use any NativeHelpers as far as I can tell

[16:08] <dogbert11> at least no directly

[16:08] <dogbert11> *not

[16:22] *** patrickb joined
[17:10] *** brrt left
[17:23] *** brrt joined
[17:46] *** brrt left
[18:01] *** Kaiepi joined
[18:45] *** lucasb left
[23:05] *** patrickb left
