[00:05] *** AlexDaniel joined
[00:05] *** AlexDaniel left
[00:05] *** AlexDaniel joined
[01:10] *** evalable6 left
[01:12] *** evalable6 joined
[07:24] *** MasterDuke joined
[07:28] *** MasterDuke left
[08:11] <nine> I don't get it. Why does a spesh log of a program ran with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 and disabled hash randomization (by fixating tc->hashSecret) record specializations of different methods?

[08:12] <nine> What other source of randomness could there be?

[08:12] <nine> The program is also not threaded

[08:39] *** domidumont joined
[08:47] *** chloekek joined
[09:10] *** domidumont left
[10:25] *** evalable6 left
[10:27] *** evalable6 joined
[10:30] <timotimo> where does the difference begin?

[10:32] <timotimo> in the spesh log i mean

[10:32] <timotimo> in the statistics, in the plan, or in the speshing?

[10:52] <nine> The differences in the 6.5 million line spesh log seem to start around line 185K with a different hit count for gen/moar/Perl6-BOOTSTRAP.c.nqp:4096

[11:12] <timotimo> telemeh has a few messages related to spesh

[11:12] <timotimo> it could be a difference when exactly a spesh log gets freed for additional logging?

[11:29] <timotimo> i.e. maybe the region that's locked is just a little too short?

[12:40] *** evalable6 left
[12:40] *** evalable6 joined
[13:43] *** squashable6 joined
[14:32] *** lucasb joined
[15:01] *** patrickb joined
[15:07] *** sena_kun joined
[15:08] *** sena_kun left
[15:09] *** sena_kun joined
[15:10] *** squashable6 left
[15:10] *** squashable6 joined
[17:35] *** domidumont joined
[17:35] *** domidumont left
[19:39] *** brrt joined
[19:41] <brrt> \o

[19:42] <timotimo> brrt: you can already put devirtualization in because it's a tree-based optimization, right? and we will end up having two optimizers in the jit?

[19:46] <brrt> ohai timotimo

[19:46] <brrt> devirtualization can be done

[19:46] <brrt> yes

[19:48] <brrt> but I'm not sure what you mean with two optimizers?

[19:48] <timotimo> one working on a tree form, one working on a linear IR?

[19:48] <brrt> no, there'll be one, working on a linear IR

[19:49] <timotimo> oh

[19:49] <timotimo> so how is the virtualization done?

[19:49] <brrt> 'cause I think that to be safe, you need to know the order and control flow dependency, and the tree just doesn't encode that

[19:49] <brrt> or at least not in a way that's directly done

[19:50] <brrt> heh, so, by smoke and mirrors

[19:50] <brrt> what I'm working on today, is in fact using the tree IR

[19:51] <brrt> but what I intend to do, is to have the devirtualization use templates

[19:51] <timotimo> oh?

[19:51] <timotimo> then how will double-devirt work? :P

[19:51] * brrt wonders a bit how to explain the plan

[19:51] <brrt> what do you mean by double-devirt?

[19:51] <timotimo> maybe you just implement it and i'll never have to ask about it again :D

[19:52] <brrt> on the other hand, maybe by asking questions you'll force me to clarify my own muddy thinking

[19:52] <brrt> :-)

[19:52] <brrt> so the idea I had in mind was this:

[19:52] <brrt> - I add a REPR method 'jit' that takes the expr tree, instruction, graph, and input operand buffer

[19:53] <brrt> This allows us to do something clever and 'open' for instance for array-push, array-get, etc

[19:54] <timotimo> "open"?

[19:54] <brrt> an open interface, i.e. one that allows the REPR to do arbitrary things, open a shell etc

[19:55] <timotimo> ah

[19:55] <timotimo> launch nethack

[19:55] <brrt> but I was thinking most of using it to have specific codegen

[19:55] *** sena_kun left
[19:56] <brrt> - Then, implement a 'default devirtualization' routine, that would do pretty much the same as what devirt in graph.c does, i.e. it builds the correct call tree for a given pointer

[19:56] <brrt> However, the intention would be for that to use a 'named template', a template that the precompiler builds but isn't associated with an opcode

[19:57] <brrt> and it'd be applied via the template application mechanism

[19:57] <brrt> so from the point of view of the devirtualization routine, the template itself is opaque

[19:58] <brrt> *then*, change the expression IR so that we build a linear IR from templates

[19:58] <brrt> (and then, when that is done, build out the optimizer)

[19:58] <brrt> ehm... does that sound like a plan?

[19:59] <timotimo> the individual devirtualizations can be rather different for the different opcodes; any way to make that less annoying?

[20:00] <brrt> I hope templates are not terribly inconvenient

[20:00] <timotimo> we'll be writing them in a .expr file, right? how do we "target" them in the devirtualization routines?

[20:02] <brrt> the template compiler will generate an enum or a #define that will have the right name

[20:02] <timotimo> OK

[20:03] <timotimo> we'll end up with a switch/case in the default devirt repr implementation that points at each generated name in turn?

[20:04] <brrt> something like that yes

[20:06] <timotimo> and there's a simple way to plop a function's address in the template, i assume

[20:09] <brrt> oh, sure, just a CONST_PTR node

[20:10] <timotimo> mhm mhm

[20:10] <timotimo> i don't know how such a value gets moved from C to the template

[20:11] <timotimo> or does the #define of the template get included right there and can just access the variable in question?

[20:11] <timotimo> i.e. is the template compiler a little like dynasm?

[20:13] <brrt> not so much like dynasm because dynasm is integrated into the typical 'body' of the C file, where the template compile just generates a header

[20:13] <brrt> but otherwise, yes, you'd include the generated header and it'd include the array

[20:14] <brrt> but the C devirt function would push a CONST_PTR node to the argument list for the template, and then the template would refer to that as argument to the CALL operator

[20:15] <timotimo> ah, argument lists

[20:15] <timotimo> that makes sense

[20:16] <brrt> the 'regular' expression templates also (implicitly) get arguments

[20:17] <brrt> so it'd be mostly the same mechanism...

[20:28] <brrt> current problem is that I tried to 'optimize' for cheap cleanup when we can't find a template

[20:29] <timotimo> is that more than just using the area allocator?

[20:30] <brrt> expr jit mostly isn't using the spesh allocator

[20:31] <brrt> that's because the internal structures use realloc a lot, and realloc is wasteful for the spesh allocator

[20:31] <timotimo> ah, dang

[20:32] <brrt> well, I have no idea just how premature that optimization really is. And in the happy case, we *do* allocate a tree

[20:33] <timotimo> we should be able to measure stuff :)

[20:35] <brrt> yep :-)

[20:35] <brrt> but... tbh I have no idea how to start measuring the overhead of malloc

[20:39] <timotimo> hmm

[20:39] <timotimo> malloc has the "benefit" that the rest of the program can swoop in to use any holes

[20:40] <timotimo> also, jemalloc and blah

[20:42] <brrt> it's funny, actually

[20:42] <brrt> in that there's a certain class of programmers that really doesn't want to use garbage-collected languages, because these are complex runtime systems with complex performance characteristics

[20:43] <brrt> but malloc also is a pretty complex runtime system with complex performance characteristics, especially in long-running programs

[20:43] <brrt> but nobody minds using that

[20:43] <brrt> well, almost nobody

[20:44] <brrt> hmm, I just realized that there is a 'side effect' bit in the expression templates, that isn't strictly necessary, because we kind of know which operators yield values and which do not

[20:45] <timotimo> i know that game developers do a lot with flyweights, if i remember the right term

[20:46] <timotimo> i.e. instead of having a whole bunch of individual instances, you have one array with all x coordinates, one with all y coordinates etc?

[20:46] <brrt> heh, that sounds a lot like columnar data stores

[20:46] <timotimo> aye

[20:47] <brrt> game developers arguably have a decent reason not to want GC

[20:47] <brrt> then again, minecraft is a huge success

[20:47] <timotimo> just recently i saw flecs on reddit, it's a entity component system in C99 (or was it C11)

[20:47] <timotimo> minecraft's performance was notoriously bad

[20:47] <timotimo> there was this project called "optifine" that optimized it somewhat

[20:47] <timotimo> while putting in shiny

[20:48] <brrt> I never played it tbh

[20:48] <timotimo> i got on it surprisingly early

[20:48] <timotimo> i didn't play terribly much, though

[20:48] <brrt> and I seem to recall that microsoft wanted to rewrite it in C++

[20:48] <timotimo> i believe they did

[20:49] <timotimo> did you see what they're doing with minecraft and hololens?

[20:49] <brrt> did not

[20:49] <timotimo> essentially putting the game world, including other player's characters, in the real world, anchored on a table or something

[20:49] <timotimo> just the typical AR thing

[20:50] <timotimo> and i think something with voice commands?

[20:50] <brrt> heh, that sounds pretty funny actually

[20:50] * brrt is going to sleep... speak you later

[20:50] <timotimo> i want to write an ECS in perl6, base it off of flecs design, and call it pecs

[20:50] <timotimo> good night brrt!

[20:55] *** brrt left
[21:09] <timotimo> oh damn

[21:09] <timotimo> my registration date is in my mojang account (minecraft)

[21:09] <timotimo> 12/08/2010

[21:58] *** patrickb left
[22:50] *** AlexDaniel` joined
[22:52] *** chloekek left
[23:31] *** lucasb left
