[00:24] *** patrickz left
[00:34] *** harrow left
[00:39] *** harrow joined
[00:58] *** Kaiepi left
[01:01] *** Kaiepi joined
[01:50] *** Kaiepi left
[01:50] *** Kaiepi joined
[01:52] <Geth> Â¦ MoarVM: Kaiepi++ created pull request #1138: Fix pointer arithmetic in inlined CArrays in CStruct/CPPStruct REPRs

[01:52] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1138

[07:32] *** brrt joined
[07:32] <brrt> \o

[08:20] *** sena_kun joined
[08:43] <timotimo> o/

[08:59] <Kaiepi> \o

[09:04] *** patrickb joined
[09:29] *** brrt left
[09:35] *** brrt joined
[10:11] <brrt> pamplemousse++ nice post, nice progres

[11:04] *** Kaiepi left
[11:04] *** Kaiepi joined
[11:26] *** brrt left
[12:05] *** patrickb left
[12:25] *** bartolin left
[12:33] *** bartolin joined
[12:46] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1139: Add context to error messages

[12:46] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1139

[13:21] *** lucasb joined
[13:42] *** pamplemousse joined
[13:49] *** releasable6 left
[13:51] *** releasable6 joined
[14:02] *** pamplemousse left
[14:10] *** rfold joined
[14:10] <MasterDuke> i think i've asked this before, but if so, don't remember the answer. anyone have an idea why a module that's just a single large hash literal (~50k lines) won't pre-compile?

[14:13] <MasterDuke> and wow, tons of different `JIT: bailed completely because of`

[14:16] <lizmat> MasterDuke: congrats!   please make an issue!

[14:21] <MasterDuke> lizmat: heh, there might be one already. someone else discovered this, i've just had the file lying around and try again every once in a while

[14:26] *** pamplemousse joined
[14:54] <timotimo> oooooh my gtk_cairo_shooter runs with barely a modification, and it performs well

[15:59] *** MasterDuke left
[16:47] <Geth> Â¦ MoarVM/nativecall_errors_give_argument_index: 7a5d41ba94 | (Timo Paulssen)++ | 4 files

[16:47] <Geth> Â¦ MoarVM/nativecall_errors_give_argument_index: NativeCall: output index of argument with repr mismatch

[16:47] <Geth> Â¦ MoarVM/nativecall_errors_give_argument_index:

[16:47] <Geth> Â¦ MoarVM/nativecall_errors_give_argument_index: also properly says "native cast" or "return type" for those.

[16:47] <Geth> Â¦ MoarVM/nativecall_errors_give_argument_index: review: https://github.com/MoarVM/MoarVM/commit/7a5d41ba94

[16:49] <Geth> Â¦ MoarVM: timo++ created pull request #1141: NativeCall: output index of argument with repr mismatch

[16:49] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1141

[16:49] <timotimo> cheque it out

[16:53] *** brrt joined
[16:58] *** pamplemousse left
[18:04] <japhb> timotimo: If you're referring to https://github.com/timo/gtk_cairo_shooter , that has got to be one of the most minimalist repos I've seen.  The code looks 5 years old -- can you push your mods?

[18:04] <timotimo> ha

[18:06] <timotimo> japhb: just pushed

[18:09] <japhb> Woah, that's quite a change at the top there.  Rebased on a new lower layer?

[18:14] <timotimo> just stole some stuff that GDK at that point didn't have i think?

[18:14] <timotimo> can perhaps throw that out again

[18:14] <timotimo> too tired now to try it

[18:14] <timotimo> those changes are oooold, though

[18:14] <timotimo> the only change necessary to get it to run was to remove the arguments to gtk_simple_use_cairo

[18:59] *** sena_kun left
[19:02] *** brrt left
[19:10] * nine finds it a bit worrying that it's so easy to cause segfaults and GC panics by mixing sockets and threads. I guess that will affect Cro, too, which we are using more and more at $work

[19:12] <nwc10> that's not great (the SEGVs, not the "more and more")

[19:12] <nwc10> if you build MoarVM with ASAN can you provoke it into ging vaguely useful backtraces?

[19:18] <nine> That...could actually be useful. ==31239==ERROR: AddressSanitizer: heap-use-after-free on address 0x6180002f48a0 at pc 0x7f558f6a8c48 bp 0x7f558405ec00 sp 0x7f558405ebf8

[19:21] <nine> It's using an already destroyed thread context?!

[19:23] <nine> Why would a thread even get destroyed after the whole program handled just a couple of connections?

[19:26] *** sena_kun joined
[19:26] <nwc10> I really don't know. You seem to be asking the right questions, but I fear that you're going to have to go digging to try to answer that.

[19:27] <nwc10> (I'm giong to step away from the keyboard to get a beer, but I might not return until I've finished it.)

[19:27] <nine> Oooh it's because the example posted in the bug report uses Thread.start

[19:28] <nine> So we really do start a lot of threads that aren't used very long.

[19:28] <nine> Replacing Thread.start with just start fixes the issues. Probably because we keep those threads around

[19:32] <nine> Apparently it breaks when the spesh worker thread is doing GC and marks e.g. static frames while the thread in question has just been freed by it's owning thread.

[19:37] <nine> nwc10++ # suggesting the right tool for the job

[19:39] <timotimo> huh, our code is supposed to be just fine with threads ending

[19:39] <timotimo> or do you explicitly have to join them?

[19:42] <nine> joining doesn't seem to change anything

[19:43] <nine> Well it does make it fail even faster

[19:43] <timotimo> odd.

[19:43] <timotimo> Cro almost exclusively uses IO::Socket::Async fwiw

[19:43] <nine> I'm not sure the use of sockets is even important in that example

[19:44] <nine> Need to get off the train

[19:50] <nwc10> :-)

[19:50] <nwc10> else you'll end up in Salzburg? Or in Vienna?

[19:51] <nwc10> (whereas had I not got off the sofa, I would have still been there in the morning)

[19:51] <nwc10> as is, I'm going to bed.

[19:52] <timotimo> bon appesleep

[20:06] *** Kaiepi left
[20:07] *** Kaiepi joined
[20:08] *** Kaiepi left
[20:08] *** Kaiepi joined
[20:09] *** Kaypie joined
[20:09] *** Kaypie left
[20:10] *** lucasb left
[20:21] *** MasterDuke joined
[20:22] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1142: Jit getuniprop_(int|bool|str)

[20:22] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1142

[20:31] *** zakharyas joined
[20:58] *** Kaiepi left
[20:58] *** Kaiepi joined
[21:12] <MasterDuke> does it make sense to jit getcomp and/or freshcoderef and/or scsetobj and/or sp_rebless?

[21:17] <jnthn> sp_rebless is probably the most worthwhile

[21:25] <MasterDuke> they all showed up as `jit bailed completely` in a spesh log of running that file that's too big to pre-compile

[21:27] <MasterDuke> jnthn: speaking of, how would i find why said file doesn't pre-compile?

[21:27] <jnthn> "too big" is a bit under-specified :)

[21:29] <MasterDuke> 807kb, 50k lines (all but a couple of those lines are a hash literal)

[21:30] <jnthn> Yeah but...what makes it too big to precompile? How does it fail?

[21:30] *** zakharyas left
[21:30] <MasterDuke> that's what i don't know

[21:31] <MasterDuke> it always takes ~28s to parse, even subsequent runs

[21:32] <jnthn> Oh, so there's no failure, just no speedup?

[21:32] <jnthn> Maybe running RAKUDO_MODULE_DEBUG=1 will shed some light on it

[21:32] <MasterDuke> fyi, here's the file https://gist.github.com/MasterDuke17/aa14954b701c2b91351636e77a89b03c

[21:35] <MasterDuke>  1 RMD: Loading settings CORE 1 RMD: going to load Perl6::BOOTSTRAP 1 RMD: Settings CORE loaded 1 RMD: Loading settings CORE.d 1 RMD: Settings CORE.d loaded

[21:36] <MasterDuke> that's the entirety of the output with RAKUDO_MODULE_DEBUG=1

[21:37] <MasterDuke> afk for a bit, should be back later

[21:42] <jnthn> You'd have to `use` it as a module to get any interesting out related to it

[21:42] * jnthn also afk a bit

[21:49] *** rfold left
[22:02] <Geth> Â¦ App-MoarVM-ConfprogCompiler/master: 7 commits pushed by (Timo Paulssen)++

[22:02] <Geth> Â¦ App-MoarVM-ConfprogCompiler/master: 2c1f2cd005 | remove accidentally left-in Data::Dump::Tree use

[22:02] <Geth> Â¦ App-MoarVM-ConfprogCompiler/master: e21b480b47 | byebye more debug output

[22:02] <Geth> Â¦ App-MoarVM-ConfprogCompiler/master: 9d6ddafb0d | script shall errormsg + exit(1) on parse error

[22:02] <Geth> Â¦ App-MoarVM-ConfprogCompiler/master: e7f5f1fa0b | malformed version at start gives helpful error

[22:02] <Geth> Â¦ App-MoarVM-ConfprogCompiler/master: a96de3e966 | point out known entrypoints when unknown one is in script

[22:02] <Geth> Â¦ App-MoarVM-ConfprogCompiler/master: 44b5c8568b | add changes for this fantastic new version

[22:02] <Geth> Â¦ App-MoarVM-ConfprogCompiler/master: 51ac260518 | 0.0.4

[22:02] <Geth> Â¦ App-MoarVM-ConfprogCompiler/master: review: https://github.com/timo/App-MoarVM-ConfprogCompiler/compare/39b2299444aa...51ac260518ea

