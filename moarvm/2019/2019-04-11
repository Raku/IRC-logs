[00:01] *** ggoebel joined
[00:03] *** MasterDuke joined
[00:03] *** MasterDuke left
[00:03] *** MasterDuke joined
[00:06] *** lucasb left
[00:32] *** Kaiepi left
[01:00] *** ggoebel left
[02:27] *** Kaiepi joined
[02:39] *** TimToady left
[02:40] *** TimToady joined
[04:26] <ugexe> https://gist.github.com/ugexe/2fa62c2d498f9e206d693f47e4a231aa when passed an argument of 1000: perl5: 30s -- perl6: I just killed it at 11 minutes

[04:31] <ugexe> i guess that could just be the number operations though. i was thinking the labeled loop somehow didnt get optimized based on nothing

[04:33] <ugexe> ah of course. Rats

[07:02] *** domidumont joined
[07:21] *** robertle joined
[07:21] *** zakharyas joined
[08:05] *** Xliff left
[08:25] <timotimo> ugexe: it could also be that it repeatedly has to coerce the IntStr in @ARGV[0] to a Real to compare it against $numbers_found

[10:10] *** domidumont left
[10:34] *** lizmat left
[10:55] <nwc10> good *, #moarvm

[11:01] <moritz> \o nwc10

[11:09] <timotimo> o/

[11:26] *** zakharyas left
[11:53] <Guest16965> timotimo: the profiler and ugexe's polyglot code, gist above, are not friends ...

[11:55] <timotimo> interesting

[11:55] <timotimo> i should check it out

[11:57] <Guest16965> the files either get very large or there's a SEGV

[12:01] <timotimo> looks like there's something exponentially growing perhaps

[12:01] <timotimo> did you try un-ratting the code before profiling?

[12:03] <timotimo> i wonder if "next"-ing an outer loop confuses the profiler's call graph tracking code

[12:04] <timotimo> that'd be similar to that "return with throwpayloadlex from an inlined thingie" problem that may or may not still exist ...

[12:05] <timotimo> also, yeah, that program calls int parsing code, like, a whole lot

[12:06] <Guest16965> un-ratting the code ?

[12:07] <Guest16965> using ints instead you mean?

[12:07] <timotimo> yeah

[12:07] <Guest16965> I could try

[12:07] <timotimo> also, turning @ARGV[0] into an int once rather than having it be checked over and over again would also be worth a lot

[12:08] <timotimo> like, the sub "val" is responsible for about 50% of total run time in my run

[12:11] *** AlexDaniel` left
[12:12] *** Garland_g[m] left
[12:15] *** domidumont joined
[12:33] *** ggoebel joined
[12:58] *** zakharyas joined
[13:33] *** lucasb joined
[13:38] <Guest16965> un-ratting the code brings execution time down to 38s on my system

[14:51] <ugexe> nan, nanorinf, mod_i, and neg_i are not in the expr jit if someone wants to try what I (think) might be easy-ish to implement

[14:52] <ugexe> nan should be particularly easy

[14:54] <ugexe> you can test the op by running the polyglot gist from earlier with an argument of 300

[15:02] *** brrt joined
[15:11] *** domidumont left
[15:19] *** brrt left
[15:35] <timotimo> ugexe: is there a way to unrat it without losing the polyglotness? also, can you intify the passed argument explicitly so it doesn't have to call val on it repeatedly?

[16:11] *** robertle left
[16:18] <ugexe> intify the argument sure, since its just +@ARGV[0]. i'm not sure how to unrat it without creating a separate code path/subroutine for perl6 to take (which I try to avoid)

[16:42] *** zakharyas left
[16:45] *** dogbert17 joined
[16:46] *** brrt joined
[16:53] <timotimo> OK

[16:53] <timotimo> perl5 doesn't have "div" as infix operator, i guess?

[16:54] <timotimo> oh, but you could put floor( ... ) around these divisions

[16:54] <timotimo> a Sufficiently Smart Compiler would figure out that's a no-op

[16:54] <timotimo> because there's the divisibility check right in front :D

[16:55] <ugexe> the compiler is so smart it knows no to do that for reasons we cannot fathom

[16:57] <ugexe> dont forget you've suggested floor(...) before :P

[16:58] <timotimo> i have?

[16:58] <ugexe> we ended up creating that special version of `sub int` instead which was less than ideal

[16:58] <timotimo> oh geez

[16:59] <ugexe> originally it was like `(split(/"."/, "$number))[0]"` or some such when you suggesed floor

[16:59] <timotimo> oooh

[17:54] *** robertle joined
[18:11] *** brrt left
[19:30] *** brrt joined
[19:31] *** brrt left
[19:35] *** brrt joined
[20:04] *** zakharyas joined
[20:17] *** lizmat joined
[20:18] <MasterDuke> timotimo: ugexe's polyglot levenshtein-damerau code also created crazy huge profiles

[20:19] <timotimo> oh geez :(

[20:29] <brrt> ohai

[20:36] <MasterDuke> what's the systemd command to look at core dumps?

[20:38] <MasterDuke> ah, coredumpctl

[20:40] <MasterDuke> weird, `coredumpctl debug` actually runs the thing that coredumped in gdb? i thought it just opened gdb with the core file

[20:44] <jnthn> (crazy huge profile) I also tried to do one of that code and it came out giant :)

[20:47] <MasterDuke> hm, my coredumps don't seem to have any symbols at all (e.g., lots of `#0  0x00007fe0bf9feafc in ?? ()`). i should get the same info as when running in gdb normally, right?

[20:48] *** zakharyas left
[20:48] <jnthn> MasterDuke: I'd expect so, unless you're looking at JIT'd code. Though I think I invoked gdb with it manually, passing the path to moar also

[20:49] <jnthn> Also I don't know how the new executable frontend interacts with these things

[20:49] <jnthn> (If you were using that, that is)

[20:49] <timotimo> you mean the relocateable launcher?

[20:50] <timotimo> i found i might have to rebuild stuff in rakudo's folder now when i've changed moar

[20:50] <jnthn> timotimo: yes, that

[20:51] <jnthn> Hmm...I thought it'd dynamically load libmoar...

[20:51] <timotimo> aye, i changed it too much and it asploded :D

[20:51] <timotimo> maybe related to linking zlib for my debug output for the heap snapshot profiler

[20:57] <MasterDuke> jnthn: i don't think it would be jitted, it was a small one-liner

[20:57] <MasterDuke> got a `corrupted double-linked list` before the most recent coredump

[20:59] <MasterDuke> i'm trying to collect the std(err|out) of a bunch of stuff with a lot of 9s in it from AlexDaniel's history, in the theory that doing that on master and my default-int branch might be good test of that branch

[20:59] <MasterDuke> but i haven't managed to get through all 1225 lines yet without some sort of segv

[21:13] <MasterDuke> jnthn++ had to pass -d and -e options to gdb. here's a gist of the output https://gist.github.com/MasterDuke17/a6fcab986d5b804fe541f3f0d48a8b6c

[21:14] <brrt> corrupted double-linked list sounds like something glibc would say about malloc

[21:14] <timotimo> yep

[21:15] <brrt> so probably a heap buffer overflow?

[21:15] <jnthn> Yeah, I'd ASAN of valgrind that thing

[21:15] <jnthn> Or at least compile with a lower level of optimization

[21:16] <timotimo> that is also sometimes the result of free-ing a pointer that didn't come from malloc

[21:16] <jnthn> Because the big clue will be between frames 4 and 5 (where inlining as taken place)

[21:16] <jnthn> *has

[21:16] <timotimo> (still something that happens with HAS int8 @.foo is CArray[int8])

[21:16] <MasterDuke> unfortunately i lost the marker of which line it was...

[21:16] <timotimo> you should be able to get the commandline args from the core

[21:17] <brrt> ping samcv

[21:19] <MasterDuke> heh. `  Command Line: /home/dan/Source/perl6/install/bin/perl6 9.p6`, not so helpful

[21:19] <timotimo> d'oh :)

[21:19] <timotimo> hm

[21:19] <timotimo> but perhaps you can get at the source string :D

[21:19] <timotimo> if it's a one-liner it's potentially not as easy to find :(

[21:19] <timotimo> but maybe try "strings blah.core"

[21:19] <timotimo> i.e. the unix strings tool

[21:20] <timotimo> hm, but we'd potentially have the string as 32bit values

[21:20] <timotimo> so strings wouldn't pick that up

[21:20] <MasterDuke> `o"; s/(o)/$99999999999999999999999999999999/; .say # wat?I` looks possible

[21:20] <timotimo> mhm

[21:20] <MasterDuke> `.lines(-99999999999999999999999999999)`

[21:21] <MasterDuke> oh, there are a ton of them

[21:22] <MasterDuke> i guess because it's a dump of the process that was reading the lines and spawning a new process for each line

[21:22] <MasterDuke> so not very helpful

[21:23] <timotimo> d'oh

[21:23] <timotimo> but ... then that one is the one that crashed?

[21:23] <MasterDuke> could be

[21:24] <MasterDuke> this is its code https://gist.github.com/MasterDuke17/c18483f2d851760014042931779529b0

[21:25] <timotimo> that doesn't look dangerous

[21:26] <MasterDuke> cribbed directly from the docs

[21:32] <MasterDuke> Thread 7 "perl6-m" received signal SIGSEGV, Segmentation fault. [Switching to Thread 0x7fffedffb700 (LWP 22101)] 0x00007ffff79e0f08 in gc_free (tc=0x55555555b1e0, obj=0x7ffff41d7878) at src/6model/reprs/MVMHash.c:66 66          HASH_ITER_FAST(tc, hash_handle, h->body.hash_head, current, { (gdb)

[21:33] <timotimo> oh, huh?

[21:34] <timotimo> it's crashing while trying to free a hash object?

[21:34] <MasterDuke> https://gist.github.com/MasterDuke17/949b9b82f997f17f106f200ccc3de3f4

[21:34] <MasterDuke> jit was disabled

[21:35] <MasterDuke> should i recompile with --optimize=0 ?

[21:35] <timotimo> not sure that'd help

[21:37] <MasterDuke> any other info useful? or should i try to continue?

[21:38] <timotimo> phew. maybe rr recording and going backwards could be interesting

[21:43] *** brrt left
[21:44] <MasterDuke> now `free(): invalid next size (fast)`

[21:45] <timotimo> aye, with moarvm having a spesh thread (and also async stuff on the async thread) things won't be deterministic

[21:45] <timotimo> and the same bug can give different corruptions in malloc's data structures

[21:45] <MasterDuke> gist updated with another backtrace

[21:46] <MasterDuke> it did happen much sooner this time

[21:46] <timotimo> the backtraces aren't very helpful; it's the same thing with moar's own "invalid id in work pass" and friends errors

[21:46] <timotimo> it's really just stumbling over corruption that was created at some point in the past

[21:47] <MasterDuke> added a perl6 backtrace

[21:55] <timotimo> without asan or valgrind, there's really not much we can learn from those :(

[22:42] <Geth> ¦ MoarVM: Kaiepi++ created pull request #1092: Temporarily use -fno-ret-protector when building on OpenBSD

[22:42] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1092

[22:49] <Kaiepi> made an issue related to why that should be temporary #1091

[22:50] <Kaiepi> oh, how do i get the bot to link moarvm issues?

[22:50] <Kaiepi> M#1091

[22:50] <synopsebot> M#1091 [open]: https://github.com/MoarVM/MoarVM/issues/1091 Legojit and ROP vulnerabilities

[22:50] <Kaiepi> there we go

[23:21] *** BeaconAlumna left
[23:21] *** avar left
[23:27] *** BeaconAlumna joined
[23:27] *** avar joined
