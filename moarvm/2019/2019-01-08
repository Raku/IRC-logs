[01:18] *** lizmat left
[01:34] *** Ven`` joined
[01:35] *** p6bannerbot sets mode: +v Ven``

[02:23] *** Ven`` left
[02:58] *** Kaiepi left
[03:52] *** leont left
[06:03] *** ZzZombo joined
[06:03] *** p6bannerbot sets mode: +v ZzZombo

[06:26] *** domidumont joined
[06:26] *** p6bannerbot sets mode: +v domidumont

[06:46] *** domidumont left
[07:02] *** domidumont joined
[07:02] *** p6bannerbot sets mode: +v domidumont

[08:15] *** robertle_ joined
[08:16] *** p6bannerbot sets mode: +v robertle_

[08:50] *** patrickb joined
[08:51] *** p6bannerbot sets mode: +v patrickb

[09:26] *** ZzZombo left
[10:16] *** Kaiepi joined
[10:17] *** p6bannerbot sets mode: +v Kaiepi

[10:21] *** lizmat joined
[10:21] *** p6bannerbot sets mode: +v lizmat

[10:34] *** Kaiepi left
[10:34] *** zakharyas joined
[10:35] *** p6bannerbot sets mode: +v zakharyas

[10:37] *** Kaiepi joined
[10:38] *** p6bannerbot sets mode: +v Kaiepi

[11:21] *** domidumont left
[11:58] <lizmat> And yet another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/01/08/2019-01-wishes-for-2019/

[12:05] *** yoleaux joined
[12:06] *** p6bannerbot sets mode: +v yoleaux

[12:06] *** AlexDaniel left
[12:58] *** domidumont joined
[12:59] *** p6bannerbot sets mode: +v domidumont

[13:08] *** lucasb joined
[13:08] *** p6bannerbot sets mode: +v lucasb

[13:08] *** AlexDaniel joined
[13:08] *** p6bannerbot sets mode: +v AlexDaniel

[14:05] *** AlexDaniel left
[14:06] *** leont joined
[14:07] *** p6bannerbot sets mode: +v leont

[14:23] *** leont left
[14:29] *** lizmat left
[14:59] *** brrt joined
[14:59] *** zakharyas left
[15:00] *** p6bannerbot sets mode: +v brrt

[16:03] <jnthn> Curious, I'm sure the pea branch was more explosive in the past

[16:12] *** brrt left
[16:13] <jnthn> Still, there's quite enough segfaults for me to hunt :)

[16:47] *** domidumont left
[16:51] *** robertle_ left
[16:59] *** brrt joined
[17:00] *** p6bannerbot sets mode: +v brrt

[17:04] *** domidumont joined
[17:05] *** p6bannerbot sets mode: +v domidumont

[17:08] *** AlexDaniel joined
[17:08] *** p6bannerbot sets mode: +v AlexDaniel

[17:14] <brrt> ohai #moarvm

[17:14] <brrt> I copied jnthn shamelessly: http://brrt-to-the-future.blogspot.com/2019/01/new-years-post.html

[17:15] <brrt> (and somewhat shorter)

[17:15] <Geth> Â¦ MoarVM/pea: 9fbc8a4e54 | (Jonathan Worthington)++ | src/spesh/pea.c

[17:15] <Geth> Â¦ MoarVM/pea: Use correct indexes for deopt usage chain lookups

[17:15] <Geth> Â¦ MoarVM/pea:

[17:15] <Geth> Â¦ MoarVM/pea: We sometimes have synthetic deopt points. When we have this, the index

[17:15] <Geth> Â¦ MoarVM/pea: present in the deopt usage chain will be the original one that was

[17:15] <Geth> Â¦ MoarVM/pea: cloned to make a synthetic one, and then the index itself is the one

[17:15] <Geth> Â¦ MoarVM/pea: that will be the deopt point index to search for when we are really in

[17:15] <Geth> Â¦ MoarVM/pea: the process of deoptimizing. Handle these properly when building the

[17:15] <Geth> Â¦ MoarVM/pea: deopt materialization table. Fixes one of the crashes caused by the PEA

[17:15] <Geth> Â¦ MoarVM/pea: deopt support in spectest.

[17:15] <Geth> Â¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/9fbc8a4e54

[17:28] *** lizmat joined
[17:28] *** p6bannerbot sets mode: +v lizmat

[17:29] <brrt> pea is moving along nicely

[17:30] <brrt> into obscure-bug territory :-)

[17:36] <jnthn> Well, the "make it understand deopt" phase is, anyway

[17:36] <jnthn> Still lots more things that it needs to do in order to make a really good job

[17:37] <jnthn> Though already I see it's happily doing away with various Scalars. :)

[17:38] <jnthn> brrt++ # blog

[17:49] <jnthn> Hmm...next failing spectest only blows up occasionally...grmbl

[17:49] <jnthn> Maybe I'll pick a different one; this one does call rand, I now see...

[17:49] <jnthn> But, tomorrow :)

[17:52] <brrt> today, beer?

[17:52] <brrt> .oO( I like that idea )

[17:52] <jnthn> Bit later, yeah...chili con carne first :)

[17:52] <jnthn> bbl o/

[17:52] <brrt> Oh, that's not a bad start of an evening

[17:52] <brrt> o/

[18:16] *** Kaiepi left
[18:19] *** zakharyas joined
[18:20] *** p6bannerbot sets mode: +v zakharyas

[18:22] *** Kaiepi joined
[18:22] *** p6bannerbot sets mode: +v Kaiepi

[18:37] *** brrt left
[18:37] *** lucasb left
[19:14] <timotimo> i just randomly worried again about order of optimizations. like, maybe turning operations into direct memory operations should go in a very late step so that semantics of different operations can be used by the later stages, too

[19:14] <timotimo> for example, boxing elimination wouldn't immediately be able to turn a p6oget_i into a set on the original register, i don't think

[19:15] <timotimo> i don't have any sensible idea for any solutions. like, we wouldn't want to store two versions of the same thing with some kind of priority, because then we'd have to have basic block fragments or something

[19:16] <timotimo> and all the code needs to be careful to handle situations where there's multiple versions

[19:16] <timotimo> and facts and guards and ugh

[19:17] <[Coke]> just keeping running all the opts until nothing changes.

[19:17] <[Coke]> MUAHAHAHAHA

[19:19] <nwc10> This is the "simulated annealing" school of optimisation?

[19:21] <japhb> nwc10: It's actually a reasonable practice -- it's attempting to find a fixed point of the optimization contractor

[19:21] <japhb> Mind you, it assumes you have a LOT of time to run the optimizer

[19:23] <[Coke]> might be a nice mode to have if you're compiling bytecode for distro

[19:23] <nwc10> I was being somewhat faceitous, but was figuring something like what you've made clear (and far more helpfully than my comment) - this keeps CPUs toasty warm, and isn't really great for a *J*IT. And what [Coke] says

[19:23] <nwc10> everyone says more sensible things than me tonight :-)

[19:23] <nwc10> er, "this morning"

[19:24] <[Coke]> afternoon here. :)

[19:24] <nwc10> it's dark outside here. But it's about the same darkness most days when I've been getting up.

[19:25] <nwc10> (but we're trying to get the children to go to bed, rather than trying to get them up, so that probably eliminates the ambiguity)

[19:34] <timotimo> the problem is that some optimizations prevent different optimizations

[19:35] <timotimo> so just doing all you can over and over doesn't actually help there

[19:44] *** zakharyas left
[20:04] <japhb> timotimo: Granted, it's not just a matter of wrapping a loop around the top level of your optimize function.  I think it more often becomes: prep input -> loop(early optimizations) -> do early-to-late conversions -> loop(late optimizations) -> final write out

[20:04] <japhb> Or something similar

[20:11] *** domidumont left
[20:31] <masak> assuming the search space is continuous enough, one could toy around making small changes, moving/adding/removing optimization steps and measuring the results

[20:31] <masak> should probably make sure to measure on a rich-enough set of code bases, though

[20:55] <jnthn> I think box/unbox elimination is subsumed in scalar replacement

[20:55] <jnthn> So I'm not too worried about that case

[20:56] <jnthn> Well, it is in one direction, at least :)

[21:18] *** patrickb left
[21:29] *** Kaiepi left
[21:32] *** lizmat left
[21:49] *** tadzik left
[21:53] *** Kaiepi joined
[21:54] *** p6bannerbot sets mode: +v Kaiepi

[21:58] *** tadzik joined
[21:59] *** p6bannerbot sets mode: +v tadzik

[22:09] *** Kaypie joined
[22:09] *** Kaiepi left
[22:10] *** p6bannerbot sets mode: +v Kaypie

[23:03] *** Ven`` joined
[23:04] *** p6bannerbot sets mode: +v Ven``

