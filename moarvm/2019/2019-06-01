[00:25] *** MasterDuke joined
[00:25] *** MasterDuke left
[00:25] *** MasterDuke joined
[02:35] <MasterDuke> .tell timotimo i tried starting profiling, doing the timing, ending profiling (without dumping the data), then restarting profiling, but the resulting profile is still wrong. here's what my patch looks like now, any ideas? https://gist.github.com/MasterDuke17/2dac190140c56447eeb175b58151f8b0

[02:35] <yoleaux> MasterDuke: I'll pass your message to timotimo.

[04:02] *** Kaypie left
[04:02] *** Kaypie joined
[04:35] *** chansen_ left
[04:39] *** chansen_ joined
[04:44] *** chansen_ left
[04:52] *** chansen_ joined
[05:35] *** squashable6 left
[05:39] *** squashable6 joined
[07:43] *** MasterDuke left
[08:46] *** patrickb joined
[09:24] *** sena_kun joined
[10:30] *** patrickb left
[10:30] *** robertle left
[10:49] <Geth> ¦ MoarVM: patzim++ created pull request #1109: Clean up CMP object files on Windows

[10:49] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1109

[10:52] *** patrickb joined
[10:54] *** lizmat left
[11:02] *** lizmat joined
[11:36] <Geth> ¦ MoarVM: 5b5e7f195c | (Patrick Böker)++ | build/setup.pm

[11:36] <Geth> ¦ MoarVM: Clean up CMP object files on Windows

[11:36] <Geth> ¦ MoarVM:

[11:36] <Geth> ¦ MoarVM: On Windows the object files for CMP are named differently. Fix `realclean`

[11:36] <Geth> ¦ MoarVM: to also clean up those.

[11:36] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5b5e7f195c

[11:36] <Geth> ¦ MoarVM: c63e7eb7a3 | (Jonathan Worthington)++ (committed using GitHub Web editor) | build/setup.pm

[11:36] <Geth> ¦ MoarVM: Merge pull request #1109 from patzim/win-cmp-clean

[11:36] <Geth> ¦ MoarVM:

[11:36] <Geth> ¦ MoarVM: Clean up CMP object files on Windows

[11:36] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c63e7eb7a3

[11:39] <Geth> ¦ MoarVM: a515819b60 | (Jan-Olof Hendig)++ | 3rdparty/libuv

[11:39] <Geth> ¦ MoarVM: Update libuv to version 1.29.1

[11:39] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a515819b60

[11:39] <Geth> ¦ MoarVM: 241fae182c | (Jonathan Worthington)++ (committed using GitHub Web editor) | 3rdparty/libuv

[11:39] <Geth> ¦ MoarVM: Merge pull request #1106 from dogbert17/libuv-update

[11:39] <Geth> ¦ MoarVM:

[11:39] <Geth> ¦ MoarVM: Update libuv to version 1.29.1

[11:39] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/241fae182c

[11:44] <Geth> ¦ MoarVM/master: 4 commits pushed by (Nick Logan)++, (Jonathan Worthington)++

[11:44] <Geth> ¦ MoarVM/master: c160a22f92 | Add decodeconf legojit

[11:44] <Geth> ¦ MoarVM/master: 8bdc11546d | Merge branch 'master' into patch-17

[11:44] <Geth> ¦ MoarVM/master: 69033692a3 | Fix decodeconf and add decoderepconf legojit

[11:44] <Geth> ¦ MoarVM/master: 40a98b588d | Merge pull request #1083 from ugexe/patch-17

[11:44] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/241fae182cf1...40a98b588dab

[11:46] <jnthn> A little Saturday PR merging :)

[11:47] <dogbert17> jnthn++

[12:36] *** domidumont joined
[13:00] *** domidumont left
[13:13] *** Kaypie left
[13:13] *** Kaypie joined
[13:15] <patrickb> Any reason not to merge #1108 ? (I have seen the windows build failure, but that's because of errors in NQP unrelated to the change in the PR.)

[13:42] <timotimo> M#1108

[13:42] <yoleaux> 02:35Z <MasterDuke> timotimo: i tried starting profiling, doing the timing, ending profiling (without dumping the data), then restarting profiling, but the resulting profile is still wrong. here's what my patch looks like now, any ideas? https://gist.github.com/MasterDuke17/2dac190140c56447eeb175b58151f8b0

[13:42] <synopsebot> M#1108 [open]: https://github.com/MoarVM/MoarVM/pull/1108 Default to doing a non-relocatable build

[13:47] <timotimo> o/

[13:56] <dogbert17> hello timotimo

[13:59] <timotimo> ohai

[14:00] <Geth> ¦ MoarVM: c20f896f14 | (Timo Paulssen)++ | lib/MAST/Nodes.nqp

[14:00] <Geth> ¦ MoarVM: skip numification in mast nodes code

[14:00] <Geth> ¦ MoarVM:

[14:00] <Geth> ¦ MoarVM: unbox_i will go directly to int, whereas the code

[14:00] <Geth> ¦ MoarVM: previously generated went via smrt_numify and a coerce.

[14:00] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c20f896f14

[14:02] <timotimo> ^- just a tiny code-gen improvement that i had lying around for a little while

[14:03] <dogbert17> cool

[14:03] <timotimo> well, not "code-gen" really

[14:03] <timotimo> just improving some code that ran into poor code-gen

[14:03] <timotimo> it'll barely be noticeable, of course

[14:04] <dogbert17> perhaps you have some more snippets lying around?

[14:10] *** patrickb left
[14:10] <timotimo> snippets of what kind?

[14:13] <dogbert17> Moar speed snippets :)

[14:14] <timotimo> ah

[14:14] <timotimo> not presently :)

[14:35] *** patrickb joined
[14:44] <dogbert17> timotimo: did you figure anything out wrt the problem of profiling the parse stage?

[14:46] <timotimo> nah, i haven't been on the laptop much the last few days

[14:47] <timotimo> it's GPN after all

[14:47] <dogbert17> GPN?

[14:54] <dogbert17> timotimo: found a oneliner which has the same problem, dunno if it makes things easier though?

[14:58] <timotimo> could be

[14:59] <dogbert17> m: my @alts = ^256; say "127.0.0.1" ~~ /^ @alts ** 4 % . $/  # here it is

[14:59] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢127.0.0.1｣␤»

[15:00] <dogbert17> stolen from one of lizmat's RT's

[15:02] <timotimo> i wonder if regex has something to do with it, then

[15:05] <timotimo> does that crash reliably for you? does it have to be --profile or --profile-compile?

[15:05] <dogbert17> --profile, and it doesn't 'crash' unless MVM_GC_DEBUG=1

[15:06] *** Kaypie left
[15:06] <timotimo> oh of course

[15:10] <dogbert17> btw, is your headache gone now?

[15:10] <timotimo> yeah :)

[15:13] <dogbert17> yay

[15:14] <timotimo> gotta recompile rakudo

[15:14] <timotimo> with gc debug turned to 1

[15:14] <timotimo> and --optimize=0

[15:14] <timotimo> oof oof :)

[15:14] <dogbert17> :)

[15:20] <timotimo> good i reproduced the crash

[15:20] <timotimo> just in time to get up, grab a waffle, and go away

[15:20] <dogbert17> see you later

[15:30] *** squashable6 left
[15:32] *** squashable6 joined
[15:50] *** zakharyas joined
[16:25] <timotimo>  -> Assertion `t->regs().syscall_result_signed() == -syscall_state.expect_errno' failed to hold. Expected ENOSYS for '<unknown-syscall-332>' but got result 0 (errno SUCCESS); execution of syscall unsupported by rr

[16:25] <timotimo> ?!?

[16:31] <timotimo> updating rr fixed it, phe.w

[16:38] <ugexe> so there isnt a way to do sizeof in a macro is there?

[16:38] <timotimo> how do you mean?

[16:39] <ugexe> "OK, then we need to #ifdef on that, and re-instate the old thing if it's not 8" re: https://github.com/MoarVM/MoarVM/commit/2fe2f588fd931e9bed982da97f352207ddab9e62

[16:39] <timotimo> i think it'd be totally possible to literally just put sizeof into an #if

[16:40] <ugexe> on a type?

[16:41] *** squashable6 left
[16:43] <ugexe> preprocessor doesn't type names

[16:43] <ugexe> parse type names

[16:43] *** squashable6 joined
[16:43] <timotimo> d'oh

[16:43] <timotimo> oh

[16:44] <timotimo> doesn't that mean you can use a C-level if?

[16:44] <timotimo> and it'll be constant-folded?

[16:46] <ugexe> can you explain in the for of a pr? :P

[16:46] <ugexe> s/for/form/

[16:46] <ugexe> my keyboard must have a spec of dust in it

[16:47] <timotimo> ha

[16:49] <timotimo> is that a commit that fixes the problem?

[16:49] <timotimo> or was the problem still present?

[16:49] <ugexe> that commit regressed on 32bit and windows

[16:49] <timotimo> OK

[16:49] <ugexe> thats why there are no green builds of rakudo for the last week or two

[16:55] *** domidumont joined
[16:56] <timotimo> so what are the sizeof values we're looking for? 4 and 8?

[17:00] *** AlexDaniel left
[17:02] *** AlexDaniel joined
[17:04] <Geth> ¦ MoarVM/multiplatform_mp_set_int: 4aa256ba56 | (Timo Paulssen)++ | src/math/bigintops.c

[17:04] <Geth> ¦ MoarVM/multiplatform_mp_set_int: attempt to have fast mp_set and not broken windows

[17:04] <Geth> ¦ MoarVM/multiplatform_mp_set_int: review: https://github.com/MoarVM/MoarVM/commit/4aa256ba56

[17:04] <timotimo> ugexe: i'm imagining this could perhaps work

[17:04] <timotimo> i need to make a PR so that CI tries to build it?

[17:05] <Geth> ¦ MoarVM: timo++ created pull request #1110: attempt to have fast mp_set and not broken windows

[17:05] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1110

[17:05] <ugexe> the test failure is in rakudo test, so you wont be able to see that way

[17:06] <timotimo> :(

[17:06] <ugexe> i'm building a rakudo on windows to see if it works there

[17:07] <timotimo> but then why is the build not green? :P

[17:07] <ugexe> because make test fails for rakudo on appveyor

[17:07] <timotimo> oh

[17:07] <timotimo> oh!

[17:08] <timotimo> because i made a change in moarvm, not rakudo

[17:08] <ugexe> right

[17:09] <ugexe> https://github.com/rakudo/rakudo/pull/2913/files -- this is how you can ad-hoc test a specific moar commit on appveyor (with a rakudo pr)

[17:10] <timotimo> we should have an irc bot for that :) :)

[17:11] <ugexe> turn the old p6c server into a windows server

[17:11] <timotimo> the hardware is already broken, so we won't notice a difference

[17:13] <timotimo> i'm at the edge of my seat

[17:13] <timotimo> which is really saying something, because i'm sitting on the floor

[17:14] <ugexe> well its building on a dual core laptop inside a windows vm so dont hold your breath

[17:21] <ugexe> hmmm, rakudo is failing the build process on appveyor now

[17:21] <ugexe> although it build ok for me using rakudobrew v1 locally

[17:23] <ugexe> ah nope

[17:24] <ugexe> rakudo build is broken on windows

[17:24] <ugexe> so i cant test

[17:25] <ugexe> >perl6 -e "say 1"

[17:25] <ugexe> rakudobrew: perl6: command not found

[17:25] <ugexe> '-e' is not recognized as an internal or external command,

[17:25] <ugexe> operable program or batch file.

[17:27] <timotimo> ouch

[17:50] <timotimo> i don't have an opportunity to try otner things very soon, ut perhaps you can revert the individual pieces and just apply the moar patch in isolation

[17:50] <timotimo> BBL

[18:08] *** lizmat left
[18:12] *** lizmat joined
[18:17] <ugexe> ive tried a couple ways, all trip up on a different build system commit

[18:19] <ugexe> the build goes red for 1 commit and suddenly every commit after breaks windows :P

[18:22] *** patrickb left
[18:47] *** sena_kun left
[19:05] *** domidumont left
[20:09] <timotimo> damn :(

[20:20] *** MasterDuke joined
[20:20] *** MasterDuke left
[20:20] *** MasterDuke joined
[20:30] <MasterDuke> timotimo: did you happen to take a look at my gist? i'm not sure why the first profile isn't being discarded

[20:33] <timotimo> i forgot to ask, but in what way is the profile broken?

[20:36] <MasterDuke> only one entry in routines `<anon> <unknown>:<unknown>	1`

[20:37] <MasterDuke> instead of anything about the actual perl6 code i was running

[20:40] *** zakharyas left
[20:41] <MasterDuke> oh, maybe i just needed to add a `tc->prof_data = NULL;`

[20:45] <timotimo> probably

[20:45] <timotimo> also, instrumentation_level is not supposed to go down i don't think

[20:45] <timotimo> but changing the instrumentation isn't a good idea after the first profiler run

[20:46] <MasterDuke> that's why i preserve what it was before

[20:48] <timotimo> since it only ever goes up, resetting it to a value it had before would either move it down or stay at the same value

[20:48] <MasterDuke> oh, you mean i shouldn't touch it at all?

[20:49] <timotimo> yeah

[20:49] <timotimo> for $reasons we currently don't have a "remove instrumentation" thing

[20:50] <MasterDuke> or should i increment it like MVM_profile_instrumented_end does?

[20:50] <timotimo> just leave it be for now

[20:50] <timotimo> there can only be tears and sadness

[20:51] <MasterDuke> ha

[20:51] <MasterDuke> what's it for?

[20:52] <timotimo> the thing is, whenever a routine gets invoked, there is a "instrumentation level barrier"

[20:52] <timotimo> if the instrumentation level of the routine is the same as the one in the interpreter, nothing happens

[20:52] <timotimo> if it's lower in the routine, it will go through instrumentation

[20:53] <timotimo> the issue is with multithreading

[20:54] <timotimo> if the instrumentation level changes in the interpreter, every routine that gets entered will go through an instrumentation again

[20:54] <timotimo> however

[20:54] <timotimo> some routines may already have been entered in another thread

[20:54] <timotimo> so the other thread is happily executing the code, while a different thread enters the same routine

[20:55] <timotimo> the different thread changes the bytecode via instrumentation

[20:55] <MasterDuke> ah, sounds like something i don't want to have to worry about

[20:55] <timotimo> and suddenly the other thread has an instruction pointer tha tpoints who-knows-where; often in the middle of an instruction

[20:55] <timotimo> yes :)

[20:55] <timotimo> thing is, changing the size of the bytecode means that the instruction pointers in all other threads would have to be properly moved to the right spot

[20:56] <timotimo> which is a form of on-stack replacement, i suppose

[20:58] <timotimo> luckily for us, the profiler instrumentation isn't harmful when it's still in place when profiling isn't running

[20:59] <timotimo> though i think i only recently put checks in for whether the profiling is actually active before doing data gathering and such

[20:59] <timotimo> which was an odd thing to forget to put in

[21:01] <MasterDuke> whoops

[21:02] <MasterDuke> do you think the overheard of MVM_profile_log_enter with MVM_PROFILE_ENTER_NORMAL would be about the same as with the other options?

[21:03] <timotimo> i think so

[21:05] <MasterDuke> ok, so i calculated the overhead and stuck it in a new field in tc->intance. now, what's the best thing to do with it?

[21:06] <ugexe> it looks like windows build might be fixed but the PRs in rakudo/nqp/moar have to be merged together

[21:07] <MasterDuke> subtract it when measuring? subtract it when dumping? include it in the the info returned by nqp::mvmendprofile so downstream can decide what to do with it?

[21:07] <timotimo> subtract when dumping i'd say

[21:07] <timotimo> if you subtract while measuring, you'll also be measuring the time it takes to subtract, how ever little it may be

[21:09] *** squashable6 left
[21:13] <MasterDuke> hm, MVM_gc_enter_from_allocator actually dumps the data? wouldn't have expected that

[21:14] *** squashable6 joined
[21:23] <timotimo> it's a slightly hacky way to get thread synchronization "for free"

[21:23] <timotimo> including "when another thread wakes up during that time, it won't just start running"

[21:36] <MasterDuke> ugh, working through the fog of a cold, can't figure out what/where to change

[21:51] *** squashable6 left
[21:54] *** squashable6 joined
