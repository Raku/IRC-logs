[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:10] *** pamplemousse joined
[00:15] *** pamplemousse left
[00:55] *** Kaiepi left
[00:56] *** Kaiepi joined
[05:31] *** robertle left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:28] *** brrt joined
[06:53] <brrt> \o

[07:01] *** sena_kun joined
[07:17] <nwc10> o/

[07:44] *** zakharyas joined
[07:52] *** sena_kun left
[08:37] <brrt> ohai nwc10

[08:38] <timotimo> nwc ohai10

[08:39] <brrt> timohaimo

[08:49] <nine> There's the possibility that the threaded GC issue is not actually a real issue but just some overly sensitive debug checks

[08:50] <nwc10> I (have lost newor again)

[08:51] <nwc10> IIRC the asserts were put in by me to confirm my understading/code analysis

[08:51] <nwc10> the thing IIRC was that there were 2 pointers in every object header

[08:51] <nwc10> 1 that was only needed *during* GC (the forwarder)

[08:51] <nwc10> and 1 only needed outside of GC (forget which, commits should be obvious)

[08:51] <timotimo> there may be a #define that brings the not-unionized format back

[08:52] <nwc10> and I figured that the two could be the same in a untion

[08:52] <nwc10> and everythings gets smaller by one pointer

[08:52] <nwc10> beware though - the MoarVM code is almomst too clever for its own good

[08:52] <nwc10> it sort of just about gets alignment right on x86_64, x86 and ARM

[08:53] <nwc10> particularly w.r.t. doubles in C structures bodies, which *may* be straight after the header

[08:53] <nwc10> or might be in a malloc'd block pointed to be the fowaring pointer thingy

[08:53] <nwc10> and chaning the header size (at one point in 2014) broke all of this

[08:54] <nwc10> I *think* that the asserts aren't needed

[08:55] <nwc10> but I do not know enough about the "other thread actually moving the item"

[08:55] <nwc10> you'd need to ask jnthn

[08:55] <nwc10> it might be the "stealing work" thing that I vaguely remember

[08:55] <nwc10> (network bounced at least once in all of that)

[09:40] *** brrt left
[09:40] *** brrt joined
[09:50] *** brrt left
[10:55] *** AlexDaniel is now known as test{}

[10:55] *** test{} is now known as AlexDaniel

[10:55] <nine> nwc10: ok, thanks! That fits with my understanding which I've gathered over the course of the past week.

[11:38] *** zakharyas left
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:13] *** brrt joined
[12:49] *** pamplemousse joined
[13:10] *** zakharyas joined
[13:20] <Guest37021> nine: are we out of GC related errors now?

[13:39] <nine> Guest37021: at least out of those that I can make reliably reproducable

[13:40] <nine> There are a few spec test files that fail with high-level errors which may be GC related or may just be triggered by MoarVM's slowness when the GC runs all the time

[13:51] *** robertle joined
[13:59] <Guest37021> cool, I suspect that we should be able to close a few MoarVM issues thanks to your fixes

[14:00] <nine> Oh, that would be nice indeed :)

[14:01] <Guest37021> perhaps M#1062

[14:01] <synopsebot> M#1062 [open]: https://github.com/MoarVM/MoarVM/issues/1062 malloc error in t/04-nativecall/06-struct.t

[14:03] <Guest37021> I guess I'll try to repro them and if I can't I'll have to figure out which of your commits fixed the issue

[14:05] <nine> I think that one's still unsolved. It's about inlined structs, isn't it?

[14:05] <nine> or stuff inlined into structs

[14:06] <Guest37021> yeah, I was too optimistic, that one is still open

[14:13] <Guest37021> nine: how about M#1140, might that have been fixed

[14:13] <synopsebot> M#1140 [open]: https://github.com/MoarVM/MoarVM/issues/1140 Panics and segmentation faults when working with sockets and threads

[14:25] *** lucasb joined
[14:26] *** brrt left
[14:30] *** brrt joined
[15:21] *** robertle left
[15:29] *** pamplemousse left
[16:39] *** brrt left
[16:59] *** robertle joined
[17:31] *** chloekek joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:07] *** zakharyas left
[18:39] *** brrt joined
[18:56] <Kaiepi> i fucked up the ipv6 pullreq at some point after unit testing it, i'll force push the fix once make spectest's done

[19:19] *** sena_kun joined
[19:26] <nine> Guest37021: not, not either :( But that's actually pretty much the same error as another one we talked about: spesh still being active in a finished (and free()'d) thread. The one where timotimo++ suggested adding checks to the few places where spesh allows for GC

[19:27] <timotimo> there's three places where spesh allows for GC, they look like "GC_SYNC_POINT(TC)"

[19:27] *** lucasb left
[19:35] *** zakharyas joined
[19:37] <nine> timotimo: but...that's either not entirely true, or there are bugs. I know of at least one backtrace where the GC was triggered by deserialization in spesh

[19:39] <timotimo> that's not very good

[19:39] <timotimo> we used to MVM_panic in that case

[19:39] <timotimo> or it was in the code i wrote to go back out of speshing a frame to deserialize and then retry

[19:47] *** pamplemousse joined
[19:51] *** pamplemousse_ joined
[19:54] *** pamplemousse left
[19:56] *** pamplemousse_ is now known as pamplemousse

[20:03] <nine> timotimo: ah, we do ineed MVM_panic in that case: https://gist.github.com/niner/61258e039e0211470bd3e2891b260f52

[20:04] <nine> But from a user's perspective, that's not exactly better :/

[20:08] <nine> timotimo: wouldn't this be an appropriate fix? https://gist.github.com/niner/ef6dd2466fcf11bc749b5582a0fde041

[20:09] <nine> A WVal that's used in speshed code should by definition be somewhat long lived. Otherwise the code wouldn't get speshed in the first place

[20:12] <Kaiepi> ok the ipv6 pullreq now passes make spectest for real now

[20:14] <Kaiepi> note to self: don't make last minute style fixes after unit testing and expect it to always still work

[20:15] <nine> Kaiepi: I guess we've all been there :)

[20:20] *** zakharyas left
[20:26] <timotimo> nine: the code gets speshed even if the wval is in a branch that's never taken, which is very often the case with exception throwing branches

[20:27] <timotimo> in theory it'd be fine to just not set the facts when the object isn't deserialized yet

[20:27] <timotimo> since it'd be only not deserialized yet if it's in a cold branch inside of a hot routine

[20:28] <sena_kun> o/

[20:28] <sena_kun> is anyone interested in a severe memory leak which is likely to be a regression?

[20:28] <nine> timotimo: oh, very good insights!

[20:29] <timotimo> i could have had that insight years ago …

[20:29] <nine> timotimo: so what :)

[20:30] <sena_kun> or any clues on how to get more helpful info are very appreciated, tools

[20:31] <nine> sena_kun: well, would you be able to bisect it?

[20:32] <sena_kun> nine, what do I need for it? I don't have whateverable installed if that's needed.

[20:32] <nine> just git and a lot of time

[20:33] <sena_kun> nine, it'll kill the process for me, right? as it just hangs and starts to eat memory, not something to terminate. :S if yes, I am ready for executing commands

[20:33] <timotimo> sena_kun: the moarvm heapanalyzer could perhaps help

[20:35] <nine> sena_kun: no, git bisect is pretty simple. It helps you find a faulty commit by being smart about trying them. You start with a known faulty and a known working one and it helps you narrow it down. But the actual test is a manual thing.

[20:35] <sena_kun> nine, ah, I see

[20:35] <nine> sena_kun: To be precise, the actual test can be automated, too, but that's not required

[20:35] <sena_kun> let me look at moarheapanalyzer...

[20:36] <nine> timotimo: if you meant this fix, then it does indeed work! https://gist.github.com/niner/ce8fc4f422ae6d432f10f5399606aa0f

[20:36] <timotimo> first gotta either --profile=heap which will spit out heap snapshots every time GC runs, or "use Telemetry; snap :heap" whenever you're interested in a snap of the heap

[20:36] <timotimo> nine: that could do it

[20:36] <nine> Will run some tests and then commit

[20:37] <sena_kun> timotimo, does process need to terminate? I am running it with `--profile=heap`, but after some time and ctrl-c there is no snapshot file or I'm blind.

[20:38] <sena_kun> > (the filename will be at the end of the program output).

[20:38] <sena_kun> ah, likely it needs to. :S

[20:39] <timotimo> with --profile=heap it needs to terminate for the snapshot to be readable (something my in-progress work fixes)

[20:41] <sena_kun> oh... that pretty much means git bisect then...

[20:45] <timotimo> not necessarily

[20:46] <timotimo> you don't have to have the process terminate when using snap :heap

[20:50] <sena_kun> timotimo, I'll check it a bit later, thanks!

[20:51] <timotimo> OK

[20:51] <Geth> ¦ MoarVM: 654a136d13 | (Stefan Seifert)++ | src/spesh/facts.c

[20:51] <Geth> ¦ MoarVM: Fix panic in spesh when deserialization causes GC during fact finding

[20:51] <Geth> ¦ MoarVM:

[20:51] <Geth> ¦ MoarVM: Deserialization may trigger garbage collection or at least allow for it to

[20:51] <Geth> ¦ MoarVM: happen, but in spesh there are very few places where GC is actually allowed.

[20:51] <Geth> ¦ MoarVM: If a WVal is not yet deserialized at the time the code its used in is speshed

[20:51] <Geth> ¦ MoarVM: then we may assume that it's used by a cold branch inside of a hot routine. In

[20:51] <Geth> ¦ MoarVM: that case its facts are probably not as important, so we may as well get by

[20:51] <Geth> ¦ MoarVM: without them. Forgoing those facts gets rid of the GC issue.

[20:51] <Geth> ¦ MoarVM:

[20:51] <Geth> ¦ MoarVM: Many thanks to timotimo++ for the valuable insights and the solution!

[20:51] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/654a136d13

[20:52] <nine> That's my 24th GC related fix in a row :D

[20:55] *** pamplemousse left
[20:55] *** pamplemousse joined
[21:01] *** pamplemousse left
[21:09] *** Altai-man_ joined
[21:11] *** sena_kun left
[21:36] *** brrt left
[21:46] <japhb> nine: I think you mean your 24th act of awesomeness in a row.  ;-)

[21:46] <timotimo> on the 24th day of christmas ...

[21:56] *** MasterDuke joined
[21:56] <MasterDuke> wow! just installed my new hardware. so much faster!

[21:57] <MasterDuke> i ran a rakudo spectest right before powering off with the old hardware, it took  600s. ran another after rebooting with the new hardware, it took 133s

[22:15] <MasterDuke> timotimo, sena_kun: --profile=<something> now creates a regular profile with the given filename. you need --profile-kind=heap to get a heap snapshot

[22:19] <dogbert17> MasterDuke: congrats

[22:20] *** pamplemousse joined
[22:20] <dogbert17> what's your parse time when building Rakudo?

[22:21] <MasterDuke> 76s before, 36s after

[22:22] <dogbert17> gee, that's fast

[22:24] <MasterDuke> yeah, pretty happy with how much faster it actually is

[22:24] <dogbert17> I can imagine :-)

[22:32] *** BinGOs_ joined
[22:37] *** BinGOs_ is now known as BinGOs

[22:37] *** BinGOs left
[22:37] *** BinGOs joined
[22:52] *** pamplemousse left
[22:55] *** Altai-man_ is now known as sena_kun

[23:00] *** pamplemousse joined
[23:08] *** sena_kun left
[23:08] *** sena_kun joined
[23:16] *** chloekek left
