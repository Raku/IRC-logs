[06:12] *** domidumont joined
[06:49] *** robertle joined
[07:10] *** patrickb joined
[08:19] *** zakharyas joined
[09:56] *** domidumont left
[11:21] *** Guest55475 left
[11:34] *** zakharyas left
[12:00] *** domidumont joined
[12:39] *** lucasb joined
[13:04] *** zakharyas joined
[13:23] *** domidumont1 joined
[13:25] *** domidumont left
[13:25] *** domidumont joined
[13:28] *** domidumont1 left
[14:03] *** domidumont1 joined
[14:07] *** domidumont left
[14:22] *** domidumont joined
[14:26] *** domidumont1 left
[15:02] *** domidumont1 joined
[15:04] *** domidumont left
[15:09] *** domidumont1 left
[15:24] *** patrickb left
[15:38] *** zakharyas left
[15:42] *** robertle left
[16:44] *** robertle joined
[16:51] <tbrowder> samcv: tbrowder on github is also tbrowder

[17:29] <samcv> :) adding you now

[17:30] <samcv> oh nice you have have team discussions on github

[17:32] *** domidumont joined
[17:32] *** patrickb joined
[17:38] *** domidumont left
[17:38] *** domidumont joined
[17:59] <samcv> tbrowder, sent

[18:04] *** domidumont1 joined
[18:06] *** domidumont left
[18:09] <timotimo> nine: how does this moarvm bytecode look to you? 07 00 63 00 01 00 00 00 08 00 05 00 63 00 ef 01 05 00

[18:36] *** brrt joined
[18:45] <brrt> \o

[18:49] *** sena_kun joined
[18:56] <timotimo> nine: i'm now also a consumer of your %MAST::Ops::generators :)

[19:04] <nine> timotimo: it does look kinda incomplete ;)

[19:04] <nine> But nice to see that my work provides some value :)

[19:06] *** domidumont1 left
[19:09] <timotimo> yeah, it's for a much simplified language that also has its own simplified interpreter inside moarvm itself

[19:09] <timotimo> it bends a rule or two

[19:12] <timotimo> much easier to read the bytecode when you write it as 16 bit integers, hex and decimal in two lines

[19:13] <nine> Between moar --dump and https://gist.github.com/niner/c24f4c2f8ae04ad448652e03669d6423 you hopefully don't need to read too much bytecode through hexdumps

[19:13] <timotimo> i'm looking for one very particular hack right now ... i want an op that looks like bindattr_o, but takes the type as a string instead of a register :D

[19:14] <timotimo> oh, yes! that thing! <3

[19:14] <timotimo> oh, the only thing i have at the moment is the bytecode, nothing in the way of headers

[19:14] <timotimo> which is also why moar --dump don't work :)

[19:15] <timotimo> sorry, did i say bindattr

[19:15] <timotimo> i meant getattr_o

[19:16] <timotimo> i'm vaguely considering doing a getattr_o on A Very Special Register that the verifier spots and converts

[19:16] <timotimo> it'll turn the getattr_o into noops and makes the next getattr_o the right "variant"

[19:16] <timotimo> actually, const_s into a A Very Special Register could be more than enough

[19:16] <nine> What's the goal of this thing?

[19:17] <timotimo> why, world domination of course!

[19:17] <timotimo> it'll allow throwing bytecode at spesh, the jit, and the profiler

[19:17] <nine> ooooh

[19:17] <timotimo> you'll be able to tell the profiler to "only start profiling starting on static frames named 'poodle'"

[19:18] <timotimo> nothing specific figured out for spesh and jit yet, but you could totally turn on or off specific optimizations in spesh or prevent exprjit on just one BB inside of a specific frame

[19:18] <lizmat> ++timotimo

[19:19] <timotimo> and with proper care, it could allow a very simple subset of breakpoint conditions

[19:19] <timotimo> but i'm stealing getattr now for Very Special Crap, will have to see how that'll cooperate :)

[19:20] <timotimo> the very first thing it'll do is let you log when the program runs. which is why at the moment it can compile programs `log = "hello"` and `log = ~(99)`

[19:20] <brrt> :-O timotimo++

[19:21] <timotimo> a blog post will follow shortly, as my last progress report for my grant was at the end of march

[19:21] <timotimo> this is related to the grant, at least.

[19:22] <timotimo> in the mean time, please throw potential use cases/scenarios at me :)

[19:36] <lizmat> being able to more closely profile the supervisor thread ?

[19:36] <lizmat> and only that?

[19:47] <timotimo> that'd be one example that'd work with the current design ideas already

[19:47] <lizmat> cool

[20:13] *** brrt left
[20:16] <timotimo> pushed configurable-subsystems as a branch (so that even if my computer dies over night, the code is safe)

[21:25] <MasterDuke> nine: around?

[21:33] <MasterDuke> timotimo: what woud be the effect right now of calling MVM_profile_log_enter() and MVM_profile_log_exit() repeatedly, say at either the beginning or end of the program? is there currently a way to ignore some calls?

[21:37] <timotimo> MasterDuke: i'm not sure if it cleans up the recorded data properly when doing proile_log_exit, or if the code just relies upon only being run once in total

[21:38] <timotimo> but you can call enter and exit whenever you like and use the return value of profile_exit; it can be read by the compiler backend's dump profile data method

[21:42] <MasterDuke> timotimo: hm, i'm just thinking of how to measure the overhead so it can be subtracted out in the report

[21:43] <timotimo> ah

[21:44] <timotimo> we can "just"â„¢ have a function measure_overhead that gets run a few hundred thousand times and does nothing

[21:44] <timotimo> and check it by name in the profiler

[21:45] <timotimo> "the simplest thing that can possibly work" and such

[21:45] <timotimo> not that i'm good at doing that

[21:45] <timotimo> looking at my solution to "only some functions should trigger profiling"

[21:48] <MasterDuke> well, *_(enter|exit) do actual work, we'd want to try to replicate that cost if possible

[21:50] <timotimo> prof_exit doesn't include the time spent inside of it in the profile results

[21:51] <timotimo> oh

[21:51] <timotimo> *oh*

[21:51] <timotimo> sorry, my dumb brain was thinking of profile_start and profile_finish

[21:57] <timotimo> okay, so, the effect of calling profile_log_enter and profile_log_exit over and over would probably allocate a profiler data node at the root of the call graph of the current thread and give that a bunch of entries and some time

[21:58] <timotimo> if it's the very first thing that happens (i.e. other threads don't race us) it'd probably even get the node id 0

[22:05] <MasterDuke> do it right when the command line option is handled?

[22:06] <MasterDuke> or would it be better to do it right before calling profile_finish?

[22:08] <timotimo> i'd probably say at the start is better

[22:08] <timotimo> are you thinking of putting it in moarvm as C code or nqp as nqp code?

[22:41] *** patrickb left
[23:13] <MasterDuke> i was thnking c

[23:14] <MasterDuke> but i don't have a completely reasoned out why

[23:18] <MasterDuke> so at the end of MVM_profile_start, if we're doing instrumented profiling, do 1k calls to MVM_profile_log_enter() and MVM_profile_log_exit() ?

[23:25] *** sena_kun left
[23:30] <MasterDuke> timotimo: hm, not seeing anything in a profile

[23:39] <timotimo> i'm not sure what you'd pass to the functions when calling it yourself

[23:43] <MasterDuke> MVM_profile_log_enter(tc, tc->cur_frame->static_info, MVM_PROFILE_ENTER_NORMAL);

[23:44] <MasterDuke> cribbed from prof_enter in interp.c

[23:48] <timotimo> i'm not actually entirely sure that's kosher

[23:49] <timotimo> that's now the frame that started the profiler, which is not normally in the call graph

[23:49] <timotimo> i don't know what effect it actually has

[23:49] <MasterDuke> hm, got a better idea?

[23:52] <timotimo> maybe instead of passing the data via the regular call graph, we should get the time before and after calling the function a lot and return that as part of the result dataset

[23:52] <timotimo> which might be what you wanted to do from the start?

[23:52] <timotimo> i seem to be in dire need of a sleep :D

[23:52] <MasterDuke> sure, if there's a way to call it that doesn't create entries

[23:54] <timotimo> ENTER_FAKE :D

[23:55] <timotimo> that doesn't do the same amount of work of course :(

