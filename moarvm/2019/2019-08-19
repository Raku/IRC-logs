[00:00] *** reportable6 left
[00:02] *** Kaypie left
[00:03] *** reportable6 joined
[00:08] *** tellable6 left
[00:10] *** evalable6 joined
[00:13] *** tellable6 joined
[00:57] *** pamplemousse joined
[01:10] *** evalable6 left
[01:12] *** evalable6 joined
[01:23] *** tellable6 left
[01:27] *** tellable6 joined
[02:11] *** pamplemousse left
[02:23] *** pamplemousse joined
[02:27] *** evalable6 left
[02:28] *** tellable6 left
[02:30] *** evalable6 joined
[02:31] *** tellable6 joined
[02:43] *** pamplemousse left
[02:43] *** pamplemousse joined
[02:59] *** pamplemousse left
[03:02] *** lucasb left
[03:38] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions: e2f576370f | (Stefan Seifert)++ | 3 files

[03:38] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions: Fix bogus "Decoder may not be used concurrently" after exceptions

[03:38] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions:

[03:38] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions: If stream decoding throws an exception (like on bad UTF-8) the deocder's

[03:38] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions: in_use flag would stay set preventing any further use of the decoder.

[03:38] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions: This can lead to great action-at-a-distance effects.

[03:38] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions:

[03:39] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions: Fix by extending the MVM_tc_(set|release)_ex_release_mutex mechanism to

[03:39] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions: support such flags in addition to fully blown mutexes. This way we can

[03:39] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions: keep the light weight in_use flag for the cost of a single bit test and

[03:39] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions: branch when throwing exceptions.

[03:39] <Geth> ¬¶ MoarVM/fix_decoder_on_exceptions: review: https://github.com/MoarVM/MoarVM/commit/e2f576370f

[03:39] <Geth> ¬¶ MoarVM: e2f576370f | (Stefan Seifert)++ | 3 files

[03:39] <Geth> ¬¶ MoarVM: Fix bogus "Decoder may not be used concurrently" after exceptions

[03:39] <Geth> ¬¶ MoarVM:

[03:39] <Geth> ¬¶ MoarVM: If stream decoding throws an exception (like on bad UTF-8) the deocder's

[03:39] <Geth> ¬¶ MoarVM: in_use flag would stay set preventing any further use of the decoder.

[03:39] <Geth> ¬¶ MoarVM: This can lead to great action-at-a-distance effects.

[03:39] <Geth> ¬¶ MoarVM:

[03:39] <Geth> ¬¶ MoarVM: Fix by extending the MVM_tc_(set|release)_ex_release_mutex mechanism to

[03:39] <Geth> ¬¶ MoarVM: support such flags in addition to fully blown mutexes. This way we can

[03:39] <Geth> ¬¶ MoarVM: keep the light weight in_use flag for the cost of a single bit test and

[03:39] <Geth> ¬¶ MoarVM: branch when throwing exceptions.

[03:39] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e2f576370f

[03:39] <Geth> ¬¶ MoarVM: 8c47931e20 | niner++ (committed using GitHub Web editor) | 3 files

[03:39] <Geth> ¬¶ MoarVM: Merge pull request #1153 from MoarVM/fix_decoder_on_exceptions

[03:39] <Geth> ¬¶ MoarVM:

[03:39] <Geth> ¬¶ MoarVM: Fix bogus "Decoder may not be used concurrently" after exceptions

[03:39] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8c47931e20

[05:26] *** brrt joined
[05:27] <brrt> .tell pamplemousse great! looking forward to it

[05:27] <tellable6> brrt, I'll pass your message to pamplemousse

[05:27] <nwc10> good *, brrt

[05:28] <brrt> good hi nwc10

[05:54] <brrt> I think I've worked out how I want the linear IR nodes to look

[05:54] <brrt> I can make 'm as small as 20 bytes, but I'd rather make that 16, so that 4 can fit on a single cache line

[05:55] <brrt> but I don't know how to do that

[05:55] <brrt> bbiab

[05:55] *** brrt left
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[07:51] *** zakharyas joined
[07:56] *** brrt joined
[07:57] <brrt> ... I think I do know how to make them 16 bytes....

[07:58] <nwc10> good. because I was going to say "paste what you have, and I'll see what I can think of"

[07:58] <brrt> the 'size' parameter of the 'load' and 'store' operator is redundant; nodes always carray a size

[07:58] <nwc10> but if you're already there...

[07:58] <brrt> I'll paste it anyway :-)

[07:58] <nwc10> I have a meeeeeeeeeting in about 2 minutes...

[08:00] <brrt> I may have been wrong....

[08:01] <brrt> https://gist.github.com/bdw/e5254580a7eb35bcc382b67c0df448b3

[08:01] <brrt> I even have a byte left :-D

[08:01] <brrt> - STORE has two operands and a size parameter. But the size parameter can just go into the 'size' attribute

[08:03] <brrt> - SCAST and UCAST have one operand and two parameters each... again, target size can be the size attribute, the only parameter needed then is the source size

[08:04] <brrt> - IF and IFV have three arguments, but these will disappear when transformed into linear form anyway

[08:04] <brrt> so two arguments is really enough

[08:05] <brrt> (with 16 bytes, they'll fit into a register pair, too)

[08:05] <brrt> size and type can be combined, too... but that may be too inconvenient to be worth it

[08:08] <brrt> nwc10: I assume you already got there

[08:28] <nwc10> I have now escaped, but I have no coffee

[08:29] <brrt> this can be problemati

[08:29] <brrt> c

[08:32] <brrt> that reminds me.... I need tea

[09:10] *** sena_kun joined
[09:13] *** brrt left
[09:51] *** fake_space_whale joined
[12:00] *** reportable6 left
[12:04] *** reportable6 joined
[12:16] *** pamplemousse joined
[12:20] *** Visitor joined
[12:33] *** zakharyas left
[12:40] *** pamplemousse left
[12:40] *** Visitor is now known as pamplemousse

[12:40] <pamplemousse> o/

[12:41] <tellable6> 2019-08-19T05:27:41Z #moarvm <brrt> pamplemousse great! looking forward to it

[12:41] *** lucasb joined
[12:59] *** domidumont joined
[13:09] *** brrt joined
[13:26] *** Guest93053 joined
[13:27] *** reportable6 left
[13:32] *** reportable6 joined
[13:34] *** shareable6 left
[13:34] *** committable6 left
[13:34] *** greppable6 left
[13:35] *** squashable6 left
[13:35] *** committable6 joined
[13:37] *** shareable6 joined
[13:38] *** squashable6 joined
[13:38] *** greppable6 joined
[14:08] <brrt> \o

[14:09] <timotimo> o/

[14:22] *** brrt left
[14:22] *** brrt joined
[14:22] <pamplemousse> o/ brrt, timotimo

[15:03] <jnthn> m: say 25.4 / 28.8

[15:03] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0.881944‚ê§¬ª

[15:06] <jnthn> Turns out a fix to args spesh to handle a missed case there has a positive effect on a DBIish insert benchmark :)

[15:09] <timotimo> oh, very nice

[15:11] <brrt> ohai pamplemousse, jnthn

[15:12] <jnthn> o/ brrt

[15:13] <brrt> jnthn: I saw your concurrency keynote on perlcon riga on youtube... very nice :-)

[15:14] <timotimo> yes, indeed

[15:16] <jnthn> :)

[15:18] <Kaiepi> can someone review https://github.com/MoarVM/MoarVM/pull/1152 ? i can't really continue with the grant work until this gets merged since the next changes i'm planning on doing depend on some of the refactors made here

[15:19] <jnthn> Kaiepi: Will see if I can take a look this evening

[15:19] <Kaiepi> thanks

[15:22] <Geth> ¬¶ MoarVM: d1af2f2fcc | (Jonathan Worthington)++ | src/spesh/args.c

[15:22] <Geth> ¬¶ MoarVM: Handle arg spesh native param passed a Scalar

[15:22] <Geth> ¬¶ MoarVM:

[15:22] <Geth> ¬¶ MoarVM: If the Scalar contains something of the appropriate type to unbox, then

[15:22] <Geth> ¬¶ MoarVM: transform the parameter instruction into a decont_[ins]. Since failing

[15:22] <Geth> ¬¶ MoarVM: args spesh has knock-on effects, this can have a quite positive impact.

[15:22] <Geth> ¬¶ MoarVM: For example, it's worth ~10% off a DBIish insertion benchmark.

[15:22] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d1af2f2fcc

[15:23] *** Guest93053 left
[15:26] <timotimo> i wonder if my spesh comments helped find that

[15:27] <jnthn> Yes :)

[15:27] <jnthn> Well, of note, they mentioned Scalar, which made it really clear what was wrong

[15:27] <timotimo> \o/

[15:28] <timotimo> the comments aren't all the same, i should unify them

[15:29] <timotimo> and maybe every spot where "goto cleanup" happens should also put a comment at least somewhere in the spesh dump

[15:32] <jnthn> yeah, could be handy

[15:33] <timotimo> for example, we skip all the param op versions that have two alternative names in them

[15:33] <timotimo> making that more easily searchable in the spesh dump with a "spesh arg bail:" message could be useful

[15:33] <AlexDaniel> if tellable6 misbehaves again please ping me :)

[15:35] <timotimo> AlexDaniel: could you make it smart enough to not tell when i quickly respond to someone telling me something?

[15:39] <AlexDaniel> timotimo: it shouldn't do that if you're on the channel, there was an issue with that which I hopefully fixed‚Ä¶

[15:39] <timotimo> .tell AlexDaniel thank you for that

[15:39] <tellable6> timotimo, I'll pass your message to AlexDaniel

[15:39] <AlexDaniel> oh, I see what you mean

[15:39] <tellable6> 2019-08-19T15:39:16Z #moarvm <timotimo> AlexDaniel thank you for that

[15:39] <timotimo> yeah, that

[15:39] <AlexDaniel> sure

[15:43] <AlexDaniel> timotimo: hmm, now that I think about it, it's a bit more difficult. It has to either track if you were on the channel when .tell was issued, or it should save when you joined the channel

[15:43] <AlexDaniel> both of which will take more than a single line to implement x)

[15:45] <AlexDaniel> but option #1 isn't that bad actually

[15:45] <AlexDaniel> tellable6: do you want it to silently not do anything?

[15:45] <tellable6> AlexDaniel, I haven't seen do around, did you mean o_?

[15:46] <AlexDaniel> timotimo: oops, that was a question for you

[15:46] *** brrt left
[15:46] <timotimo> yeah, i think it should just drop the tell; would be fine if it were very conservative

[16:03] <timotimo> jnthn: i think the handling of param_sp could be wrong in MVM_spesh_args

[16:03] <timotimo> param_sp and param_sn break out of the while loop for instructions

[16:03] <timotimo> but i have a BB here that has param_sp and param_sn in the same BB right in a row

[16:04] <timotimo> oh

[16:04] <timotimo> disregard that, the break is very obviously for the switch, not the while

[16:05] <timotimo> the actual case here is that a QAST::Op.new is being called with two positionals, and there's a param_sp, but it bails out because it finds no op that takes the argument with index 1

[16:07] <timotimo> there doesn't seem to be any handling for param_sp in all of spesh? but MVM_spesh_args also doesn't bail out in that case. interesting. so we just rely on the regular implementation of param_sp to do what it needs to do?

[16:10] <jnthn> I guess we must, yes

[16:11] <timotimo> we already specialize param_sn into "create a hash and populate it", any particular reason we don't do that with param_sp as well?

[16:14] *** tellable6 left
[16:17] *** tellable6 joined
[16:18] <AlexDaniel> timotimo: test

[16:18] <AlexDaniel> .tell timotimo it should work now

[16:18] <tellable6> AlexDaniel, I'll pass your message to timotimo

[16:18] <timotimo> AlexDaniel: thank you

[16:18] <AlexDaniel> .tell evalable6 test test

[16:18] <tellable6> AlexDaniel, I'll pass your message to evalable6

[16:45] *** sena_kun left
[16:49] *** domidumont left
[16:50] *** domidumont joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:11] <AlexDaniel> .tell timotimo let's try again‚Ä¶ can you please say something?

[18:11] <tellable6> AlexDaniel, I'll pass your message to timotimo

[18:11] <timotimo> i surely can

[18:11] <AlexDaniel> ok that part sorta works

[18:11] <AlexDaniel> but I think in 10 minutes it'll still deliver the message‚Ä¶ weird

[18:13] <AlexDaniel> .tell timotimo smth smth

[18:13] <tellable6> AlexDaniel, I'll pass your message to timotimo

[18:13] <timotimo> hum.

[18:13] <AlexDaniel> hmm

[18:13] <AlexDaniel> also seeing ‚ÄúUse of uninitialized value of type Any in string context.‚Äù and no line number :)

[18:19] <AlexDaniel> ok that was from delivered messages on #perl6-dev

[18:27] *** sena_kun joined
[18:35] <AlexDaniel> .tell timotimo one more test

[18:35] <tellable6> AlexDaniel, I'll pass your message to timotimo

[18:36] <AlexDaniel> actually I'll use a bot for that‚Ä¶

[18:37] <AlexDaniel> .tell shareable6 test test

[18:37] <tellable6> AlexDaniel, I'll pass your message to shareable6

[18:37] <AlexDaniel> shareable6: help

[18:37] <shareable6> AlexDaniel, Like this: shareable6: f583f22 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Shareable

[18:37] <AlexDaniel> .tell greppable6 test test

[18:37] <tellable6> AlexDaniel, I'll pass your message to greppable6

[19:27] *** domidumont left
[19:30] <timotimo> AlexDaniel: thanks

[19:37] <timotimo> jnthn: what's the reason that spesh arg bails when any given arg isn't fetched by a corresponding instruction?

[19:51] <jnthn> timotimo: An abundance of caution, I think :)

[19:52] <jnthn> timotimo: Well, if you mean positional.

[19:52] <timotimo> yes, positionals

[19:52] <tellable6> 2019-08-19T18:35:48Z #moarvm <AlexDaniel> timotimo one more test

[19:52] <timotimo> damn it, AlexDaniel :) :)

[19:52] <jnthn> I don't think we ever generate code with them missing, though

[19:52] <timotimo> yes we do :) :)

[19:52] <timotimo> if there's a param_sp

[19:53] <timotimo> i'll make it not bail if a param_sp was seen, and see to it that param_sp generates tight code to grab stuff from the args buffer and put it into the array

[19:53] <timotimo> hm, though actually, there'll be some interesting stuff with regards to native arguments and such, they'll want boxed

[19:54] <timotimo> hum. but if i handle param_sp early enough, i can just emit regular boring param_rp_o args and register them with the code that would normally optimize them

[19:55] *** Altai-man_ joined
[19:56] <timotimo> i'll just only handle the case when there either hasn't been a single param_ro_* yet, or the only one there has been was for an invocant, because param_sp doesn't get the invocant (i think? gotta check that)

[19:57] <timotimo> gasp, jnthn

[19:57] <timotimo> we generate a fastcreate for the slurpy hash type

[19:57] <timotimo> but we don't check if it has an initialize function

[19:58] *** sena_kun left
[19:58] <AlexDaniel> timotimo: :D

[19:58] *** Kaiepi left
[19:59] *** Kaiepi joined
[19:59] <AlexDaniel> timotimo: also the timing doesn't make any sense xD

[19:59] <timotimo> thanks for working on this btw

[20:06] *** fake_space_whale left
[20:12] *** brrt joined
[20:12] <jnthn> timotimo: I...don't think there exists one with an initialize function? :)

[20:13] <jnthn> But yeah, technically we probably should check that :)

[20:13] <jnthn> Also, you'll probably be able to steal boxing etc. logic from the path that optimizes slurpy hashes

[20:13] <brrt> jnthn: would you be ok with a merge of expr-jit-float today?

[20:13] <jnthn> brrt: Well, I've not had chance to review it, but I'm happy to trust your judgement on its readiness for merge :)

[20:14] <jnthn> I wonder if it'll make the Complex benchmark we have even faster...

[20:17] *** Altai-man_ left
[20:18] <brrt> I don't really expect it would.... but then again

[20:19] <brrt> I mostly want it because I want the refactored register allocator API in for my next tasks

[20:19] *** fake_space_whale joined
[20:24] <MasterDuke> brrt: have you done any benchmarking?

[20:36] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/08/19/2019-31-32-33-and-were-back/

[20:51] <brrt> MasterDuke: tbh, no :-)

[20:55] <samcv> hey brrt

[21:07] <AlexDaniel> timotimo: I have no idea how it could possibly behave the way it does :D

[21:09] *** pamplemousse left
[21:09] <timotimo> ha

[21:09] <timotimo> great

[21:09] *** pamplemousse joined
[21:11] <brrt> hey samcv

[21:15] <AlexDaniel> .tell timotimo hello world. This bug is crazy

[21:15] <tellable6> AlexDaniel, I'll pass your message to timotimo

[21:16] <timotimo> :)

[21:22] <timotimo> ooh i didn't realize until now that param_sp takes an integer argument that decides at what position it'll start slurping up positionals, that makes so much sense

[21:35] *** brrt left
[22:03] *** kiwi_50 joined
[22:06] *** pamplemousse left
[22:24] <AlexDaniel> timotimo: damn that's a good one

[22:25] <timotimo> what is?

[22:26] <AlexDaniel> timotimo: #92

[22:27] <timotimo> well, see #perl6-dev

[22:58] <AlexDaniel> to I guess tellable6 is not going to deliver the message this time?

[22:58] <AlexDaniel> so*

[23:01] <timotimo> maybe

[23:10] *** rba left
[23:12] *** rba joined
[23:14] *** rba left
[23:14] *** rba joined
[23:22] <timotimo> if we had a query thingie for spesh logs, i could now search for "elems ops that target the result of an sp_fastcreate that has a comment matching /slurpy positional/" and see if it's worth a lot to put an optimization for that in

[23:28] *** rba left
[23:28] *** rba joined
[23:29] *** rba left
[23:29] *** rba joined
[23:29] *** rba left
[23:30] *** rba joined
[23:36] *** kiwi_50 left
