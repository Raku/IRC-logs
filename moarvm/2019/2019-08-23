[01:16] *** MasterDuke left
[01:28] *** lucasb left
[01:42] *** zakharyas joined
[02:42] *** evalable6 left
[02:47] *** evalable6 joined
[02:54] <timotimo> freelist => [[9 100] [9 99] [9 98] [9 97] [9 96] [9 95] [9 94] [9 93] [9 92] [9 91] [9 90] [9 89] [9 88] [9 87] [9 86] [9 85] [9 84] [9 83] [9 82] [9 81] [9 80] [9 79] [9 78] [9 77] [9 76] [9 75] [9 74] [9 73] [9 72] [9 71] [9 70] [9 69] [9 68] [9 67] [9 66] [9 65] [9 64] [9 63] [9 62] [9 61] [9 60] [9 59] [9 58] [9 57] [9 56] [9 55] [9 54] [9 53] [9 52] [9 51] [9 50] [9 49] [9 48] [9 47] [9 46] [9 45] [9 44]

[02:54] <timotimo> [9 43] [9 42] [9 41] [9 40] [9 39] [9 38] [9 37] [9 36] [9 35] [9 34] [9 33] [9 32] [9 31] [9 30] [9 29] [9 28] [9 27] [9 26] [9 25] [9 24] [9 23]]

[03:47] *** evalable6 left
[03:51] *** evalable6 joined
[04:40] *** zakharyas left
[04:41] *** zakharyas joined
[06:41] *** sena_kun joined
[06:43] *** sena_kun left
[07:04] *** sena_kun joined
[07:04] *** sena_kun left
[08:27] *** sena_kun joined
[08:30] *** domidumont joined
[09:46] *** zakharyas left
[12:10] *** robertle joined
[12:11] *** lucasb joined
[13:05] <Geth> ¬¶ MoarVM: cygx++ created pull request #1161: Pull out top-level API into standalone header

[13:05] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1161

[16:41] *** MasterDuke joined
[16:44] *** robertle left
[16:51] *** pamplemousse joined
[16:56] *** sena_kun left
[17:34] <MasterDuke> timotimo, et al.: https://github.com/libtom/libtommath/pull/330

[17:50] *** robertle joined
[18:04] <timotimo> MasterDuke: so the torad values are for "the old implementation" and the todec ones are of "the new implementation"?

[18:05] <timotimo> i would have loved one or two speedup x for all the blocks

[18:05] <timotimo> it's really hard to see, especially since most values don't line up

[18:06] <timotimo> looks like their travis is giving a few red Xes

[18:07] <timotimo> looks like all you need to do for the very first one is run astyle against your code to have it formatted for you?!

[18:07] <timotimo> i dunno

[18:07] <timotimo> looks like you'll want to rename "index" since string.h already declares it

[18:08] <timotimo> anyway, you can read the travis logs yourself, i'm sure me pointing out each red X isn't worth much

[18:38] *** sena_kun joined
[18:55] <MasterDuke> huh, some of the existing code wouldn't survive astyle. oh well, guess i can run it

[18:57] *** domidumont left
[19:01] *** pamplemousse left
[19:02] *** pamplemousse joined
[19:08] <MasterDuke> timotimo: and yes re old vs new values. the new version is faster at ~2**2000. if you want to help make it non-recursive maybe it could be made faster at lower values...

[19:13] *** Kaiepi left
[19:13] *** Kaiepi joined
[19:27] *** Ven``_ joined
[19:38] *** Altai-man_ joined
[19:40] *** sena_kun left
[19:43] *** pamplemousse left
[19:44] *** Ven``_ left
[19:45] *** Ven``_ joined
[19:54] *** Altai-man_ left
[19:54] *** sena_kun joined
[19:55] *** sena_kun left
[21:40] <timotimo> i now have a little dataset of how usage of the FSA changes over time (in a short timeframe, so "high resolution")

[21:40] <MasterDuke> what can you do with that?

[21:41] <timotimo> i want an animation

[21:42] <MasterDuke> for decorative purposes? or think it will teach something?

[21:42] <timotimo> i hope to learn something

[21:43] <MasterDuke> nice

[21:43] <timotimo> i also want to do the same thing for the gen2, because it is structured similarly

[21:50] <MasterDuke> anything in particular you think you'll learn?

[21:55] <timotimo> i would hope to find out why some things grow over a long time

[21:55] <timotimo> like the whateverable bots

[21:58] <MasterDuke> oh, that would be good to know

[21:59] <AlexDaniel> there was something‚Ä¶

[21:59] * AlexDaniel looks at https://github.com/perl6/whateverable/issues/24

[21:59] <AlexDaniel> timotimo: see https://github.com/rakudo/rakudo/issues/1501

[22:01] <AlexDaniel> there was also a long explanation by jnthn somewhere

[22:01] <AlexDaniel> from what I remember, it's not leaking memory but it tends to settle on an amount that's a bit too high

[22:01] <timotimo> right

[22:02] <AlexDaniel> at the time it was ‚ÄúOK‚Äù, but I think we should be aiming at a much smaller footprint

[22:02] <MasterDuke> the last comment by bbkr says there's still a (smaller than before) leak

[22:03] *** Ven``_ left
[22:04] <AlexDaniel> the memory issue came up during perlcon in one of the discussions

[22:04] <AlexDaniel> in which I honestly said that they should be expecting half a gig of ram usage per process

[22:06] <AlexDaniel> to me it seems like performance is not a big roadblock for adoption anymore, but memory usage probably is

[22:07] <AlexDaniel> so timotimo++

[22:07] <timotimo> i feel brain-paralyzed

[22:08] <MasterDuke> well, i'd argue that parsing/regex/grammar performance is still so bad as to likely be a blocker for the kinds of things people use perls for

[22:08] <AlexDaniel> MasterDuke: that's true, but in many other use cases it makes no difference at all

[22:08] <AlexDaniel> say building services with perl6

[22:08] <MasterDuke> but otherwise performance as improved dramatically, way more that i thought possible in such a short time

[22:10] <AlexDaniel> I don't mind perl5 being the queen of ascii crunching

[22:10] <timotimo> personally, i'm very anti-monarchies, but continue

[22:11] <Kaiepi> is half a gig the minimum or just on average?

[22:11] <AlexDaniel> shareable6: uptime

[22:11] <shareable6> AlexDaniel, 4 days, 8 hours, 36 minutes, and 37 seconds, 566.769531MiB maxrss. This is Rakudo version 2019.07.1-94-gd1f9d2848 built on MoarVM version 2019.07.1-50-gb614a7b4d implementing Perl 6.d.

[22:11] <MasterDuke> i wouldn't mind terribly if perl5 is faster on average. i mind how much faster it is

[22:11] <timotimo> this is a bot that does almost nothing, right?

[22:12] <AlexDaniel> quotable6: uptime

[22:12] <quotable6> AlexDaniel, 1 day, 20 hours, 24 minutes, and 58 seconds, 227.265625MiB maxrss. This is Rakudo version 2019.07.1-94-gd1f9d2848 built on MoarVM version 2019.07.1-50-gb614a7b4d implementing Perl 6.d.

[22:12] <AlexDaniel> Kaiepi: it's something you should expect your memory usage to settle on

[22:12] <AlexDaniel> so for short-lived processes maybe just 250 MiB

[22:13] <Kaiepi> ah, ok

[22:13] <AlexDaniel> timotimo: yeah, it doesn't do anything unless somebody runs Blin

[22:14] <AlexDaniel> timotimo: I don't know if anybody did

[22:14] <AlexDaniel> during the last 4 days

[22:14] <timotimo> we need some observability :)

[22:14] <AlexDaniel> bisectable6: uptime

[22:14] <bisectable6> AlexDaniel, 3 weeks, 4 days, 10 hours, 14 minutes, and 26 seconds, 431.3125MiB maxrss. This is Rakudo version 2019.07.1-94-gd1f9d2848 built on MoarVM version 2019.07.1-50-gb614a7b4d implementing Perl 6.d.

[22:14] <AlexDaniel> bisectable is not used that often, but look that's 3 weeks

[22:15] <AlexDaniel> unicodable6: uptime

[22:15] <tellable6> AlexDaniel, I'll pass your message to unicodable6

[22:15] <timotimo> hahahaha

[22:15] <Kaiepi> i've never seen one of the bots i run go higher than 400MB apart from back when there were pretty big memory leaks in sockets code, but it's not stable enough to keep more than a few days uptime yet

[22:15] <AlexDaniel> unicodable6_: uptime

[22:15] <unicodable6_> AlexDaniel, 3 weeks, 4 days, 10 hours, 15 minutes, and 14 seconds, 405.726563MiB maxrss. This is Rakudo version 2019.07.1-94-gd1f9d2848 built on MoarVM version 2019.07.1-50-gb614a7b4d implementing Perl 6.d.

[22:15] <tellable6> 2019-08-23T22:15:04Z #moarvm <AlexDaniel> unicodable6: uptime

[22:16] <AlexDaniel> Kaiepi: what do you mean not stable enough? Does it segfault?

[22:16] <Kaiepi> no, it's something really difficult to unit test properly

[22:17] <Kaiepi> nothing to do with moarvm itself

[22:18] <AlexDaniel> oh, let's try that again

[22:18] <AlexDaniel> unicodable6: uptime

[22:18] <AlexDaniel> huh‚Ä¶

[22:18] <timotimo> okay i really need to run the bots myself, amn't i

[22:19] <AlexDaniel> unicodabl6: uptime

[22:19] <unicodable6_> AlexDaniel, 3 weeks, 4 days, 10 hours, 19 minutes, and 43 seconds, 408.871094MiB maxrss. This is Rakudo version 2019.07.1-94-gd1f9d2848 built on MoarVM version 2019.07.1-50-gb614a7b4d implementing Perl 6.d.

[22:20] <AlexDaniel> so I have to spell it incorrectly for the bot to figure it out

[22:20] <timotimo> oi AlexDaniel are the bots built with debug set to anything other than 0?

[22:20] <AlexDaniel> timotimo: no

[22:20] <AlexDaniel> timotimo: nowadays it's easy to run the bots

[22:20] <timotimo> damn

[22:20] <AlexDaniel> they'll fetch rakudo releases and stuff automatically

[22:20] <timotimo> i would really want to know how often it has run the GC in those 3 weeks

[22:20] <Kaiepi> there was a period not too long ago where i was getting deadlocks in it that i wasn't getting with the same code in a slightly earlier compiler release, but that doesn't happen anymore afaik

[22:20] <AlexDaniel> as long as you're on 62-bit linux

[22:21] <AlexDaniel> ooooh

[22:21] <MasterDuke> AlexDaniel: that's your problem, you've 2 bits too few in your linux

[22:21] <AlexDaniel> 62-bit linux, yes‚Ä¶ 62‚Ä¶ haha

[22:22] <AlexDaniel> timotimo: anyway I can put one of the bots down so that you can run a replacement

[22:22] <AlexDaniel> installation info here: https://github.com/perl6/whateverable/wiki/Installation

[22:23] <timotimo> i suspend2ram my computer over night

[22:24] <Kaiepi> 62-bit linux, finally a use for those types like uint_least_16_t :^)

[22:24] <timotimo> AlexDaniel: which bot do you think is the least likely to be missed?

[22:24] <timotimo> coverable i think was recently mentioned as "never used"

[22:25] <AlexDaniel> bloatable6: uptime

[22:25] <bloatable6> AlexDaniel, 3 weeks, 4 days, 10 hours, 25 minutes, and 1 second, 376.6875MiB maxrss. This is Rakudo version 2019.07.1-94-gd1f9d2848 built on MoarVM version 2019.07.1-50-gb614a7b4d implementing Perl 6.d.

[22:25] <AlexDaniel> bloatable6: help

[22:25] <bloatable6> AlexDaniel, Like this: bloatable6: d=compileunits 292dc6a,HEAD # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Bloatable

[22:25] <AlexDaniel> bloatable6: releases

[22:25] <AlexDaniel> let's see if it even works

[22:25] <bloatable6> AlexDaniel, https://gist.github.com/c87bcb8f269fc88862dbaef48eaaf7cc

[22:26] <timotimo> all these broken archives back then, i wonder how that happened

[22:26] <AlexDaniel> it sorta does

[22:26] <AlexDaniel> bloatable6: uptime

[22:26] <bloatable6> AlexDaniel, 3 weeks, 4 days, 10 hours, 26 minutes, and 53 seconds, 430.289063MiB maxrss. This is Rakudo version 2019.07.1-94-gd1f9d2848 built on MoarVM version 2019.07.1-50-gb614a7b4d implementing Perl 6.d.

[22:27] <MasterDuke> timotimo: btw, any idea why i'm getting this warning? https://travis-ci.org/libtom/libtommath/jobs/576029036. i do have `#include <stdio.h>` in the file

[22:27] <AlexDaniel> timotimo: I'd say bloatable is a good choice because at least it doesn't allow people to eval code :)

[22:27] <timotimo> ah

[22:28] <timotimo> good point

[22:28] <AlexDaniel> quotable6: uptime

[22:28] <quotable6> AlexDaniel, 1 day, 20 hours, 40 minutes, and 57 seconds, 228.8125MiB maxrss. This is Rakudo version 2019.07.1-94-gd1f9d2848 built on MoarVM version 2019.07.1-50-gb614a7b4d implementing Perl 6.d.

[22:32] <timotimo> AlexDaniel: whateverable-data seems to be empty?

[22:32] <AlexDaniel> timotimo: it's not used yet

[22:33] <AlexDaniel> I was trying to set it up and then got distracted with something else‚Ä¶

[22:33] <timotimo> OK

[22:33] <AlexDaniel> bloatable needs moarvm builds which it'll automatically attempt to download from shareable

[22:34] <timotimo> right

[22:34] *** bloatable6 left
[22:36] *** Ven`` joined
[22:40] *** Ven`` left
[22:42] <timotimo> i didn't make the feature to spit out the FSA data optional

[22:42] <timotimo> so it's either turned on or off at compile time

[22:42] <timotimo> don't want to run sake or anything else with that on, i don't think

[22:44] <timotimo> ah, just using the stuff in xbin i guess

[22:44] <AlexDaniel> I was thinking: PERL6LIB=lib xbin/Bloatable.p6 < config.json

[22:45] <AlexDaniel> default config will also work of course

[22:45] <timotimo> oh, config

[22:45] <AlexDaniel> but hmm that doesn't seem to do much

[22:46] <timotimo> i'll have to give it the right hostname for shareable

[22:46] <AlexDaniel> the default one is probably right

[22:46] <timotimo> "localhost"

[22:46] <AlexDaniel> no that's if you want to run shareable

[22:46] <AlexDaniel> "mothership" is the one you have in mind

[22:47] <timotimo> oh, ok

[22:47] <AlexDaniel> PERL6LIB=lib DEBUGGABLE=1 xbin/Bloatable.p6 < config-default.json

[22:47] <AlexDaniel> that works

[22:47] <timotimo> OK

[22:48] <AlexDaniel> DEBUGGABLE will make IRC::Client more verbose

[22:48] <timotimo> Failed to open file /home/timo/perl6/ecosystem/whateverable/lib/Whateverable/Replaceable.pm6: No such file or directory

[22:48] <AlexDaniel> ehh‚Ä¶ trying to install it? :)

[22:49] <timotimo> no

[22:49] <timotimo> oh, you wanted me to perl6lib lib

[22:50] <timotimo> 13 processes already

[22:50] <timotimo> and no output?

[22:51] <timotimo> did i do it wrong?

[22:51] <AlexDaniel> timotimo: fixed in https://github.com/perl6/whateverable/commit/981ab6f582dd262db63b4b6811e1b2367c2f3dc4

[22:51] <AlexDaniel> timotimo: well, there are some possibilities‚Ä¶

[22:52] <AlexDaniel> either you're waiting for it to precomp‚Ä¶

[22:52] <timotimo> oh

[22:52] <timotimo> i forgot to pipe the config into it

[22:52] <timotimo> well that isn't going to work well

[22:52] <AlexDaniel> timotimo: or that

[22:52] <AlexDaniel> or without DEBUGGABLE it may look like nothing is happening

[22:53] <AlexDaniel> timotimo: also, there's this line: https://github.com/perl6/whateverable/blob/981ab6f582dd262db63b4b6811e1b2367c2f3dc4/lib/Whateverable.pm6#L200

[22:53] <timotimo> no, debuggable is turned on

[22:53] <AlexDaniel> comment it out

[22:53] <AlexDaniel> it's for running 18 bots, otherwise they get k-lined

[22:54] <timotimo> ah, right

[23:21] <timotimo> i'll just let it sit and see if it GCs a bunch without noticeable activity

[23:21] <timotimo> like, does the thread pool scheduler supervisor thread happen to allocate stuff again?

[23:24] <timotimo> it rose above a meg

[23:25] <timotimo> but every entry in that file is kind of big

[23:25] <timotimo> maybe i should also zstd it on the way to the file

[23:58] <timotimo> hurm, just reading the big messagepack file grows more and more in memory usage

