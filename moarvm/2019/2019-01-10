[00:10] <MasterDuke> huh, the interp.c implementation of speshresolve is the only op (based on some quick searching inside interp.c) that uses cur_op minus some value (2 in this case)

[00:11] <jnthn> It gets called when there's no matching guard set, thus why I suspect the guard set being installed doesn't match the values beign passed.

[00:12] <MasterDuke> i guess i'm not sure how to check that

[00:14] <jnthn> Maybe instrument the plugin to see what path it takes and what speshguard instructions it calls to set up the guards, and see if some don't match what's being returned

[00:16] <MasterDuke> i got this info, `Orig_type = Int:D and type = Int and definite_check = 1 and nqp::iscont($rv) = 0 and rv = Nil and nqp::isnull($coerce_to) = 1`

[00:16] <MasterDuke> that's happening 29.5k times

[00:18] <MasterDuke> so `nqp::speshguardtype($rv, $rv.WHAT);` is called unconditionally, `nqp::speshguardconcrete($rv);` is called because `$definite_check == 1`

[00:19] <MasterDuke> and then `&identity` is returned

[00:25] <MasterDuke> oh ho!

[00:27] <MasterDuke> changing https://github.com/rakudo/rakudo/blob/master/src/vm/moar/spesh-plugins.nqp#L260 from `elsif $definite_check == 1 { nqp::speshguardconcrete($rv); }` to `elsif $definite_check == 1 && !!nqp::istype($rv, Nil) { nqp::speshguardconcrete($rv); }` seems to fix things

[00:28] <MasterDuke> time is down to 0.5s and maxresident is down to 89m

[00:28] <MasterDuke> jnthn: ^^^

[00:29] <MasterDuke> oops, that's a typo in pasting here, it's only one !

[00:35] <jnthn> MasterDuke: Ah, that sounds like a reasonable change

[00:35] <jnthn> Nice :)

[00:36] <MasterDuke> heh, and now there are not 29.5k calls to the plugin

[00:37] <MasterDuke> i'll spectest and then PR assuming it passes

[00:43] <MasterDuke> still none of the 6 different index calls are getting jitted

[00:54] <jnthn> Maybe the index op itself doesn't have a jit mapping

[00:55] <MasterDuke> hm, i'll take a look

[00:55] <MasterDuke> jnthn: btw, just got a single spectest fail in t/spec/S32-temporal/DateTime.t

[00:55] <jnthn> MasterDuke++

[00:56] <MasterDuke> `Type check failed for return value; expected Int:D but got Int (Int)`

[00:56] <jnthn> Hm, that almost looks legit...I wonder if you've fixed a bug too?

[00:56] <jnthn> Sleep time for me; back tomorrow o/

[00:57] <MasterDuke> jnthn: i'm not sure i understand well enough to say. i'll probably make a PR as is and let you decide when you want to take a look

[00:58] <MasterDuke> looks like there is both a lego jit implementation and a template for index_S

[00:58] <MasterDuke> *index_s

[01:00] *** lizmat joined
[01:00] *** p6bannerbot sets mode: +v lizmat

[01:05] *** lizmat left
[01:11] <MasterDuke> timotimo: any idea if speshresolve can be jitted the same way sp_speshresolve is?

[01:15] *** test123_ joined
[01:15] *** p6bannerbot sets mode: +v test123_

[01:37] *** test123_ left
[02:14] *** Ven`` left
[05:08] *** MasterDuke left
[06:16] *** Kaiepi left
[06:16] *** Kaiepi joined
[06:17] *** p6bannerbot sets mode: +v Kaiepi

[06:58] *** domidumont joined
[06:59] *** p6bannerbot sets mode: +v domidumont

[08:10] *** evalable6 left
[08:11] *** evalable6 joined
[08:11] *** p6bannerbot sets mode: +v evalable6

[08:19] *** zakharyas joined
[08:20] *** p6bannerbot sets mode: +v zakharyas

[09:33] *** lizmat joined
[09:33] *** p6bannerbot sets mode: +v lizmat

[09:59] *** robertle left
[10:44] <jnthn> speshresolve should always be turned into sp_speshresolve, I thought.

[11:40] *** robertle joined
[11:41] *** p6bannerbot sets mode: +v robertle

[11:44] *** brrt joined
[11:45] *** p6bannerbot sets mode: +v brrt

[11:45] <brrt> ohai #moarvm

[11:45] <lizmat> brrt o/

[11:45] <brrt> \o lizmat

[11:45] <brrt> how's things?

[11:46] <brrt> (I can wait with complaining about the difficulties imposed by polymorphism a bit longer)

[11:47] <lizmat> my back hurts like hell since the past weekend

[11:47] <brrt> how so?

[11:47] <lizmat> other than that, all is fine  :-)

[11:47] <brrt> :-) hope it gets better soon

[11:47] <lizmat> age, lack of exercise, too much food and drink

[11:47] * lizmat too

[11:47] <lizmat> :-)

[11:49] <nwc10> get well soon, lizmat

[11:49] <lizmat> ah, having been in the car for 4 hours and sitting on less than adequate seating for 5 at the Amsterdam.PM meeting didn't help

[11:49] <lizmat> nwc10: thanks  :-)

[11:49] <nwc10> clearly it's all Asterdam.PM's fault, for being in Amsterdam.

[11:50] <lizmat> well, that would account for the 4 hours in the car :-)

[11:50] <lizmat> TechInc, the amsterdam hackspacem, would account for the other 5  :-)

[11:51] <lizmat> but mostly it's age and not enough exercise recently

[11:55] <brrt> If it's a 4 hour road trip back and forth to amsterdam, I wonder if the train wouldn't be faster?

[11:55] <lizmat> nope, train takes 2.45 hour each way

[11:55] <brrt> Not that train seats are ideal

[11:55] <brrt> oh, that sucks

[11:55] <lizmat> well, that's not true

[11:55] <lizmat> it took me to B. 2h45 minutes each way

[11:56] <nwc10> and B. is near a station, isn't it?

[11:56] <lizmat> that includes roughly 20 mins from Amstel to B. and 10 min from home to Echt station

[11:56] <nwc10> oh, I'm confused/confusing things. What's new?

[11:56] <lizmat> B. used to be near Weteringcicruit at the time

[11:57] <lizmat> B. is now near a metro stop

[11:57] <brrt> there's like so many B. offices

[11:57] <nwc10> "is it Friday?" "no" "how about now?"

[11:57] <lizmat> well, the B. office I needed to go to :-)

[11:57] <brrt> :-)

[11:57] <brrt> Yeah, I've been there as well

[11:57] <brrt> it's solely customer supports these days

[11:57] <brrt> or last year anyway

[11:58] <brrt> Now it's near the Waterlooplein

[11:58] <brrt> But there's also a big office at Vjjzelstraat

[11:59] <brrt> (my knowledge of Amsterdam topology is limited solely to B. offices, actually)

[12:00] <lizmat> the new head office of B. is now being built near CS

[12:00] <lizmat> (as in Central Station)

[12:01] <lizmat> https://static0.persgroep.net/parool/image/02d52ac6-e04d-4ea7-8b95-2820e38a2e41?h=OTMwNjE3ZE1ESmtOVEpoWXpZdFpUQTBaQzAwWldFM0xUaGlPVFV0TWpneU1HVXpPR0V5WlRReEx6RTFNRFo0T1RJeQ

[12:02] <brrt> I recall that, and thinking 'that's both far too large, and too small'

[12:02] <lizmat> yup

[12:03] <brrt> anyway. back to my regularly scheduled complaining

[12:03] <brrt> so. `bindlex` is a polymorphic opcode

[12:03] <brrt> among other things, it might take a `num64` value to assign

[12:04] <brrt> this is no problem for MoarVM because it treats the register as a bag-of-bits

[12:04] <brrt> It is a somewhat bigger problem for the expression JIT because it may well have allocated the value-to-be-assigned to a register, and that register will be a FPR register

[12:08] <brrt> The expr template builder has the information at runtime whether the bindlex will assign to a num or int register

[12:08] <brrt> so that's good...

[12:08] <brrt> but the actual template doesn't know that, so it uses a `store` operator rather than `store_num`

[12:09] <brrt> Now... I don't actually *need* the distinction of operators. The tiler can select the right one

[12:10] <brrt> i.e. anytime where the runtime tree would yield a (store ? num), the tiler will do the right thing. This is not true for load_num; we need that

[12:10] <brrt> because it yields a differently typed value

[12:11] <brrt> my learning here is that load isn't polymorphic because it yields a distinct type, but that store is polymoprhic because it consumes multiple types and yields a single one

[12:22] <brrt> alternatively, I make the expr tree builder insert the store for bindlex

[12:22] <brrt> much like it does for `set`

[12:23] <dogbert2_> lizmat: do you have access to a product called Voltaren?

[12:23] <brrt> ... but I'm liking the polymorphic solution better

[12:23] <lizmat> dogbert2_: no

[12:23] * lizmat looks it up

[12:24] <dogbert2_> It's an NSAID painkiller with anti inflammatory properties

[12:24] <dogbert2_> could have another name where you live though

[12:24] <lizmat> yeah... looks pretty heavy

[12:25] <lizmat> I'm not in that stage just yet  :-)

[12:25] <dogbert2_> it has saved me a few times :)

[12:26] *** zakharyas left
[12:26] <lizmat> thanks for the suggestion :-)

[12:28] <dogbert2_> only necessary if the normal painkillers (the ones used when you have a headache) doesn't do the job

[12:31] <lizmat> yeah, they're working for me, allowing me to sit at my desk and writing this  :-)

[12:39] *** lucasb joined
[12:39] *** p6bannerbot sets mode: +v lucasb

[12:55] *** brrt left
[13:01] *** robertle left
[13:03] *** robertle joined
[13:04] *** p6bannerbot sets mode: +v robertle

[13:04] <timotimo> i think voltaren is over-the-counter in apothecaries in germany

[13:10] <jnthn> So...time for more debugging...

[13:11] <jnthn> I really like how the first letters of Dead Instruction Elimination spell "die" :P

[13:12] <jnthn> I less like that doing more of it causes some weird at-a-distance deopt bug :S

[13:14] <timotimo> spooky action-at-a-distance, more appropriate than ever

[13:14] <jnthn> :)

[13:14] <jnthn> I think I'm going to find/look at a different failing test that might be more isolated

[13:15] <jnthn> Or at least maybe more localized

[13:18] <jnthn> oh wow

[13:18] <jnthn> The exact same failure mode shows up in a ton of NQP tests with nodelay...

[13:21] <nwc10> MVM_SPESH_NODELAY for the win

[13:21] <nwc10> or at least, fail early, fail often

[13:21] <jnthn> Yeah, though this means it's better for me to continue debugging the case I already was.

[13:21] * nwc10 is a bit surprised that more folks aren't setting MVM_SPESH_NODELAY and its awkward squad friends more often when developing

[13:23] <jnthn> All the failures I can see boil down to the sequence of a `mixin` with a few more instructiosn deleted leading to, when it triggers global deopt, some problem with the deopt and uninline of !reduce a stack frame or two down

[13:25] *** Ven`` joined
[13:26] *** p6bannerbot sets mode: +v Ven``

[13:35] <jnthn> Aha, progress-ish. So it turns out that while it breaks when the spesh limit is set so mixin is the final frame that it specializes...that is because only that being specialized triggers the global deopt needed to expose the bug

[13:36] <jnthn> If I make it refuse to delete inilined instructions inside of !cursor_pass *then* I get the explosion

[13:36] <jnthn> oops

[13:36] <jnthn> Then I *don't* get

[13:37] <jnthn> So it's actually the delete in there that is "the problem", but we need to optimize something else too in order to ever hit that situation.

[13:40] *** brrt joined
[13:41] *** p6bannerbot sets mode: +v brrt

[13:49] *** robertle left
[13:54] <dogbert2_> timotimo: it's over the counter in Sweden as well. On the other hand I believe that you'd need a prescription in the States (and probably some other countries as well)

[13:55] <jnthn> Oh, goodness, I see it...

[13:56] <jnthn> The return value of !reduce ain't used

[13:56] *** zakharyas joined
[13:57] <jnthn> Now, after inlining, we can thus delete some `set` instructions that the return was rewritten into, and one more besides

[13:57] <jnthn> A deopt annotation is somehow on one of the set instructions

[13:57] *** p6bannerbot sets mode: +v zakharyas

[13:58] <jnthn> Oh, but that's not the problem

[13:58] *** robertle joined
[13:58] <jnthn> A deopt annotation is also in the inliner on a decont instruction

[13:59] *** p6bannerbot sets mode: +v robertle

[14:22] *** Ven`` left
[14:42] <Geth> ¦ MoarVM/persist-inline-deopt-info: 82974ce57c | (Jonathan Worthington)++ | src/spesh/manipulate.c

[14:42] <Geth> ¦ MoarVM/persist-inline-deopt-info: Correct annotation motion to not break uninlining

[14:42] <Geth> ¦ MoarVM/persist-inline-deopt-info:

[14:42] <Geth> ¦ MoarVM/persist-inline-deopt-info: Moving of an annotation into an inline or onto a deopt all can cause

[14:42] <Geth> ¦ MoarVM/persist-inline-deopt-info: problems when we come to uninline.

[14:42] <Geth> ¦ MoarVM/persist-inline-deopt-info: review: https://github.com/MoarVM/MoarVM/commit/82974ce57c

[14:42] <Geth> ¦ MoarVM/persist-inline-deopt-info: 909d354ca2 | (Jonathan Worthington)++ | src/spesh/dead_ins_elimination.c

[14:42] <Geth> ¦ MoarVM/persist-inline-deopt-info: Allow dead instruction elimination in inlines

[14:43] <Geth> ¦ MoarVM/persist-inline-deopt-info:

[14:43] <Geth> ¦ MoarVM/persist-inline-deopt-info: Previously we could not do this, since we lacked any sense of which

[14:43] <Geth> ¦ MoarVM/persist-inline-deopt-info: values have to be preserved in order to not break deopt. Now that info

[14:43] <Geth> ¦ MoarVM/persist-inline-deopt-info: is available, we can perform this inside of inlines too. This is most

[14:43] <Geth> ¦ MoarVM/persist-inline-deopt-info: immediately useful when we consider instructions that produce a return

[14:43] <Geth> ¦ MoarVM/persist-inline-deopt-info: value, which is the inlined into something that doesn't care for the

[14:43] <Geth> ¦ MoarVM/persist-inline-deopt-info: return value. Such instructions can then simply be deleted.

[14:43] <Geth> ¦ MoarVM/persist-inline-deopt-info: review: https://github.com/MoarVM/MoarVM/commit/909d354ca2

[14:48] <jnthn> This all seems to work quite nicely except...I exploded the profiler :(

[14:50] <jnthn> hmm, that's interesting...

[14:50] <jnthn> ==8172== Invalid read of size 8

[14:50] <jnthn> ==8172==    at 0x511196A: get_facts_direct (optimize.c:42)

[14:50] <jnthn> ==8172==    by 0x51119FC: MVM_spesh_get_facts (optimize.c:54)

[14:50] <jnthn> ==8172==    by 0x5105459: write_instructions (codegen.c:115)

[14:50] <jnthn> ==8172==    by 0x51062AE: MVM_spesh_codegen (codegen.c:312)

[14:50] <jnthn> ==8172==    by 0x5182F0E: add_instrumentation (instrument.c:239)

[14:51] *** MasterDuke joined
[14:51] *** p6bannerbot sets mode: +v MasterDuke

[14:51] *** Ven`` joined
[14:52] *** p6bannerbot sets mode: +v Ven``

[14:54] <timotimo> i do sometimes already get "unable to fix up handlers" or whatever in some programs when trying to profile

[14:55] <timotimo> and it's even worse, it feels like, when trying to use line coverage

[14:55] <jnthn> It's a silly one this time, thankfully

[14:56] <jnthn> There are no ->facts available when we're instrumenting

[14:56] <timotimo> oh, OK

[14:57] <jnthn> So looking at them when doing code-gen is just instant SEGV

[14:57] *** MasterDuke left
[14:57] *** MasterDuke joined
[14:57] *** herbert.freenode.net sets mode: +v MasterDuke

[14:57] *** p6bannerbot sets mode: +v MasterDuke

[14:57] <timotimo> right

[14:57] <timotimo> i didn't realize we'd ever try to do that :)

[14:59] <MasterDuke> if there's a jit template for an op do we still need a lego jit implementation also?

[14:59] <timotimo> usually yes

[14:59] <MasterDuke> ok, thought so

[14:59] <timotimo> imagine a block where the exprjit bails on some unrelated op, and then an op comes up that only has an expr jit implementation but no lego one

[14:59] <MasterDuke> so atkey_u needs a lego jit implementation

[15:00] <MasterDuke> right

[15:00] <Geth> ¦ MoarVM/persist-inline-deopt-info: db65a28151 | (Jonathan Worthington)++ | src/spesh/codegen.c

[15:00] <Geth> ¦ MoarVM/persist-inline-deopt-info: Unbreak the profiler

[15:00] <Geth> ¦ MoarVM/persist-inline-deopt-info:

[15:00] <Geth> ¦ MoarVM/persist-inline-deopt-info: And other such instrumentations. When we're doing these, we have no

[15:00] <Geth> ¦ MoarVM/persist-inline-deopt-info: facts, and we don't need deopt info either. Since in this mode we now

[15:00] <Geth> ¦ MoarVM/persist-inline-deopt-info: never push to the vector, it ends up never allocated, so we won't have a

[15:00] <Geth> ¦ MoarVM/persist-inline-deopt-info: leak in this case either.

[15:00] <Geth> ¦ MoarVM/persist-inline-deopt-info: review: https://github.com/MoarVM/MoarVM/commit/db65a28151

[15:00] <jnthn> OK, that gets me clean for this branch

[15:00] *** Ven`` left
[15:00] <timotimo> we're in a post-fact world anyway

[15:00] <jnthn> Which was mainly aimed at unblocking further pea work, but we get slightly better code quality in some other cases.

[15:01] <jnthn> Lemme throw it at a large project or two before I merge.

[15:02] <jnthn> oh lol, thought I'd caused a major perf regression, but it was just a debug build

[15:03] <timotimo> ha, i've done that a few times in the past :)

[15:04] <MasterDuke> huh, i see just a couple lines back in my terminal that i used MVM_JIT_LOG=j.log and it had some BAILs in it, and now when i rerun there aren't any

[15:05] <timotimo> well, MVM_JIT_LOG doesn't exist any more

[15:05] <timotimo> and the strings for bailing in the spesh log aren't as uniform any more :\

[15:05] <MasterDuke> ah, but a log file is still created

[15:08] <MasterDuke> looks like more templates are needed also

[15:08] <timotimo> extend and truncate potentially?

[15:08] <timotimo> coerce_ui and iu?

[15:09] <MasterDuke> https://gist.github.com/MasterDuke17/37857210fdce61c2de8ec0fa827a906f

[15:09] <MasterDuke> when running some stripped down code from the .assuming is slow rakudo issue

[15:11] <Geth> ¦ MoarVM/master: 7 commits pushed by (Jonathan Worthington)++

[15:11] <Geth> ¦ MoarVM/master: 0fef86cbe8 | Save deopt usage info when writing bytecode

[15:11] <Geth> ¦ MoarVM/master: e6bf5697cb | Recreate deopt users when inlining from bytecode

[15:11] <Geth> ¦ MoarVM/master: 1742b35525 | Fixup deopt_users deopt indexes when inlining

[15:11] <Geth> ¦ MoarVM/master: 82974ce57c | Correct annotation motion to not break uninlining

[15:11] <Geth> ¦ MoarVM/master: 909d354ca2 | Allow dead instruction elimination in inlines

[15:11] <Geth> ¦ MoarVM/master: db65a28151 | Unbreak the profiler

[15:11] <Geth> ¦ MoarVM/master: 7adb8090da | Merge branch 'persist-inline-deopt-info'

[15:11] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/ec8a240e327e...7adb8090daba

[15:11] <jnthn> There we go, merged :)

[15:13] <MasterDuke> jnthn: does the unbreak the profiler commit only fix a break the branch introduced, or might it be a more general fix?

[15:13] <jnthn> Only one the branch introduced

[15:14] <jnthn> The code it exploded in was added in the branch

[15:14] <MasterDuke> ah

[15:14] <jnthn> (Regression introduced back in 0fef86cbe8)

[15:15] <jnthn> Phew, the pea rebase was only very slightly conflicty

[15:18] <Geth> ¦ MoarVM/pea: 32 commits pushed by (Jonathan Worthington)++, (Carl Masak)++

[15:18] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/compare/9fbc8a4e54dd...a70a0774adf6

[15:19] *** lucasb left
[15:19] <timotimo> well, i'm glad to see that detour worked out so well :)

[15:20] * timotimo gets to change the algorithm by which flame graphs are "extracted" from the profiler database, yay

[15:21] <timotimo> i'm thinking of making it "incremental", so that the frontend can receive the first 5 layers immediately, another 10 a second later etc

[15:21] <timotimo> and as the user "zooms" in fetch more

[15:24] <jnthn> Hm, interesting :)

[15:25] <timotimo> i'll also want to put in something that stops descending when a branch is only like a few pixels wide - until the user selects something close to it that makes it wider

[15:25] <timotimo> i'm hoping to make the code to get the data so fast that there's no reason to cache the data in the backend :)

[15:29] <MasterDuke> i assume i should use MVM_JIT_RV_INT for _u ops?

[15:29] <jnthn> I *think* at that level signed/unsigned isn't a think

[15:29] <jnthn> *thing

[15:31] <timotimo> probably

[15:31] <timotimo> yeah

[15:31] <MasterDuke> hm, there's no MVM_repr_at_key_u()

[15:32] <timotimo> i don't think we have anything other than at_key_o at all

[15:32] <timotimo> or do we have that and it's just a coerce on top of the at_key_o?

[15:32] <MasterDuke> there's _i and _s and _n

[15:33] <timotimo> oh, yup, i was wrong

[15:33] <timotimo> maybe because our hashes can only store objects rather than any natives

[15:35] <japhb> jnthn: Are you planning to bump nqp/rakudo to pick up your merged changes, or are you holding off for more?

[15:37] <jnthn> japhb: I'm back to working in a branch now; I figure with MasterDuke++ looking at JIT additions there'll be a bump soon enough, so it can go in with those.

[15:39] <japhb> Gotcha

[15:42] <MasterDuke> arg! still getting a BAIL for atkey_u

[15:42] <timotimo> forgot to add the case in the second place?

[15:43] <MasterDuke> i don't think so

[15:44] <MasterDuke> timotimo: https://gist.github.com/MasterDuke17/158822a788da37ec18af67f77607578f

[15:47] <timotimo> looks correct

[15:48] <timotimo> er

[15:48] <timotimo> "op == op == ..."

[15:48] <timotimo> that's probably the mistake

[15:48] *** dogbert2_ left
[15:49] <MasterDuke> timotimo++

[15:51] <MasterDuke> huh, but still the same behavior

[15:51] <timotimo> Failed to open file /home/timo/perl6/install/share/perl6/repo.lock: No space left on device

[15:51] <timotimo>   in block <unit> at tools/build/install-core-dist.p6 line 28

[15:51] <timotimo> d'oh

[15:54] <MasterDuke> hm, i added an fprintf in MVM_repr_at_key_u and it's never getting hit

[16:02] <MasterDuke> brrt: ping

[16:04] <MasterDuke> timotimo: or any further fixes?

[16:07] <brrt> MasterDuke: pong

[16:08] <MasterDuke> brrt: have you seen my past couple comments?

[16:08] <brrt> no

[16:09] <brrt> what's the problem

[16:09] <MasterDuke> i'm attempting to add a lego jit implementation for atkey_u

[16:09] <brrt> uhuh

[16:09] <MasterDuke> since that what appears to be causing nqp::index to not get jitted

[16:10] *** robertle left
[16:10] <MasterDuke> https://gist.github.com/MasterDuke17/158822a788da37ec18af67f77607578f here's what i have so far, but there's no change in behavior

[16:10] <MasterDuke> and then i added an fprintf in MVM_repr_at_key_u and it's never getting hit

[16:11] <MasterDuke> fwiw, this is how i'm testing: perl6 -e '$_.Str.index(0.Str, 0) for 1 .. 1_000_000'

[16:14] <MasterDuke> (and adding --profile )

[16:18] <brrt> uhuh

[16:19] <brrt> that doesn't look wrong, to me...

[16:19] <MasterDuke> heh, don't know if that's a good thing or not

[16:24] *** domidumont left
[16:26] <brrt> well, it means, i can't see readily if it is broken

[16:27] <brrt> I can't really hep you, is what it means

[16:28] <MasterDuke> heh

[16:31] <MasterDuke> fwiw, when running that code MVM_repr_at_key_i and MVM_repr_at_key_u are never called, but MVM_repr_at_key_o is 423406 times

[16:39] <brrt> yeah

[16:39] <brrt> because MVM_repr_at_key_u is for when you get an unsigned integer out of an object

[16:39] <MasterDuke> huh, added an fprintf in atkey_u in interp.c and that isn't getting hit either

[16:39] <brrt> E_THEORYWRONG

[16:40] <MasterDuke> seems like it might be...so what's the way to tell for sure why index isn't getting jitted?

[16:44] <MasterDuke> i see a single '# JIT: bailed completely' in the spesh log

[16:45] <brrt> hmm, what's more arround it?

[16:46] <MasterDuke> https://gist.github.com/MasterDuke17/b40d2401b9ffc66e25b1708153d59615

[16:47] <MasterDuke> updated the gist

[16:47] <MasterDuke> with what appears before the list of BBs

[16:54] <MasterDuke> brrt: btw, is https://github.com/MoarVM/MoarVM/blob/master/src/jit/core_templates.expr#L236-L240 still correct?

[16:54] *** brrt left
[17:02] <MasterDuke> afk for a while, but i'll backlog if anybody has a suggestion

[17:14] *** patrickb joined
[17:15] *** p6bannerbot sets mode: +v patrickb

[17:36] <nwc10> jnthn: ASAN build for origin/pea gets to Rakudo's tests

[17:37] <nwc10> many fail, the two that I spot-checked fail at

[17:37] <nwc10> ==25646==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x7f2f4e32c5eb sp 0x7fffdcf69830 bp 0x7fffdcf698e0 T0)

[17:37] <nwc10>     #0 0x7f2f4e32c5ea in log_parameter src/spesh/log.c:94

[17:37] <nwc10>     #1 0x7f2f4e32cdc9 in MVM_spesh_log_entry src/spesh/log.c:131

[17:37] <nwc10> without proceding pavement pizza

[17:38] *** brrt joined
[17:39] *** p6bannerbot sets mode: +v brrt

[17:39] <timotimo> MasterDuke: even if a function never gets run, if a routine contains it somewhere, it'll still be able to bail out the jit

[17:47] <jnthn> nwc10: Yeah, that's 'cus deopt situations involving PEA and inlining together weren't implemented yet :)

[17:48] <jnthn> I think I finally have patches locally that do that

[17:50] <brrt> oooh

[17:50] <jnthn> Also relieved that the case I'm looking at is an aliasing one, and it gets it right, which means the alias tracking (e.g. when we `set` with an allocation we eliminated) is working right too.

[17:53] <jnthn> The reason for such SEGVs, though, was because without it knowing to materialize some of the eliminated allocations, it put just left NULLed registers behind after deopt

[17:53] <jnthn> s/put//

[17:53] <jnthn> This stuff involves quite a bit of brane...

[17:54] <jnthn> Maybe I should submit a talk about it at the German Perl Workshop so others can be tormented too... :P

[17:54] <brrt> that'll show them

[17:56] <lizmat> whee!

[17:58] <brrt> (hmm, now we insert a (STORE of a (LOAD_NUM)) somehow :-(

[18:04] <Geth> ¦ MoarVM/pea: 2e227fd8a1 | (Jonathan Worthington)++ | 3 files

[18:04] <Geth> ¦ MoarVM/pea: Distribute deopt usages when inlining

[18:04] <Geth> ¦ MoarVM/pea:

[18:04] <Geth> ¦ MoarVM/pea: If we have an invoke, then there might be some registers that have a

[18:04] <Geth> ¦ MoarVM/pea: deopt usage at that point. This implies that if we deopt, then we must

[18:04] <Geth> ¦ MoarVM/pea: ensure that the values in those registers are available. Clasically this

[18:04] <Geth> ¦ MoarVM/pea: has meant that we simply could not delete an instruction that writes to

[18:04] <Geth> ¦ MoarVM/pea: the register. However, in our PEA new world, we actually *do* delete

[18:04] <Geth> ¦ MoarVM/pea: <…commit message has 20 more lines…>

[18:04] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/2e227fd8a1

[18:05] <Geth> ¦ MoarVM/pea: ab6b143d54 | (Jonathan Worthington)++ | src/spesh/pea.c

[18:05] <Geth> ¦ MoarVM/pea: Correct a thinko, remove an unused variable

[18:05] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/ab6b143d54

[18:05] <Geth> ¦ MoarVM/pea: 624a114916 | (Jonathan Worthington)++ | src/spesh/pea.c

[18:05] <Geth> ¦ MoarVM/pea: Log target register of eliminated allocations

[18:05] <Geth> ¦ MoarVM/pea:

[18:05] <Geth> ¦ MoarVM/pea: To make for slightly easier debugging.

[18:05] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/624a114916

[18:06] <jnthn> That's now rather less explosive :)

[18:10] *** domidumont joined
[18:11] *** p6bannerbot sets mode: +v domidumont

[18:17] <jnthn> Time for noms :)

[18:22] <patrickb> Hi everyone!

[18:22] <brrt> hi patrickb

[18:23] <patrickb> I just learned that ld drops symbols from included libraries it doesn't need.

[18:23] <brrt> it does

[18:24] <patrickb> That basically kills the possibility for my runner program to utilise uv_exepath() from libuv through moar.

[18:24] <brrt> hmmm

[18:24] <patrickb> Including libuv in rakudo is definitely overkill. :-(

[18:24] <brrt> maybe we can expose uv_getexecpath() as an op 'vmpath'

[18:25] <patrickb> I don't need it in perl6 land

[18:25] <patrickb> I need it in a small C program that links against libmoar

[18:26] <patrickb> adding an OP would solve the problem, because then that function wouldn't be stripped.

[18:26] <patrickb> But I'm not sure adding an op just to prevent stripping is the right approach :-P

[18:32] <patrickb> I think the best thing to do is leaving moarvm alone and just use https://github.com/gpakosz/whereami directly.

[18:32] <brrt> you can do that as well

[18:33] <brrt> (yay, I debugged a problem)

[18:41] <patrickb> brrt: Thinking about it some more, do you think it'd be worth it to add that op to fix up $*EXECUTABLE?

[18:41] <brrt> I don't see the immediate problem...

[18:42] <brrt> What I really think is; perl5 programmers have come to expect the luxury of $FindBin

[18:42] <brrt> we should have the same

[18:43] <lizmat> fwiw, there *is* a Perl 6 version of FIndBin

[18:44] <patrickb> Well it just returns the --exec-path passed to moar via the script runner we currently have

[18:44] <patrickb> (that might not be 100% acurate, but roughly).

[18:45] <patrickb> And that only works stable at the moment, because we have the path hard coded into the runner... :-/

[18:46] <patrickb> $*EXECUTABLE returns the path to perl6, not the script being run.

[18:51] <Geth> ¦ MoarVM/jit-expr-float: ae077858fa | (Bart Wiegmans)++ | 6 files

[18:51] <Geth> ¦ MoarVM/jit-expr-float: [JIT] More rigorous type checking

[18:51] <Geth> ¦ MoarVM/jit-expr-float:

[18:51] <Geth> ¦ MoarVM/jit-expr-float: - actually implement a sensible type check

[18:51] <Geth> ¦ MoarVM/jit-expr-float: - check type of expression return value with output operand, if any

[18:51] <Geth> ¦ MoarVM/jit-expr-float: - check type of IF operands

[18:51] <Geth> ¦ MoarVM/jit-expr-float:

[18:51] <Geth> ¦ MoarVM/jit-expr-float: On the other hand, I'm not convinced we actually want a STORE_NUM

[18:52] <Geth> ¦ MoarVM/jit-expr-float: operator.

[18:52] <Geth> ¦ MoarVM/jit-expr-float: review: https://github.com/MoarVM/MoarVM/commit/ae077858fa

[18:52] <brrt> ok, that's it for me today

[18:52] *** brrt left
[19:20] *** patrickb left
[19:22] *** patrickb joined
[19:22] *** p6bannerbot sets mode: +v patrickb

[19:49] *** cygx joined
[19:50] *** p6bannerbot sets mode: +v cygx

[19:52] <cygx> patrickb: the moarvm DLL is linked against libuv, so you should be able to create a small MVM_get_path() function that delegates to uv_getexecpath() and then call that...

[19:53] <patrickb> But is that a smart thing to do? It's basically adding stuff to the moar API...

[19:53] <MasterDuke> timotimo: did you look at the spesh log excerpt i gisted? can you see anything helpful there?

[19:55] * cygx shrugs

[19:56] <cygx> if it solves a legitimate problem, I wouldn't let purity be the enemy of pragmatism...

[20:01] *** zakharyas left
[20:04] <patrickb> cygx: Thanks for the heads up!

[20:04] <patrickb> jnthn: Any objections to me adding a MVM_exepath() to moarvm?

[20:05] <patrickb> moarvm API that is

[20:05] *** robertle joined
[20:06] *** p6bannerbot sets mode: +v robertle

[20:14] <nwc10> jnthn: building with ASAN. For some reason t/02-rakudo/repl.t is *very* hungry for CPU

[20:14] <nwc10> not sure if this is bad luck, or something wierd and new.

[20:14] <nwc10> it's not failing. just slow. so slow it might take another hour

[20:20] <MasterDuke> ok, i added ins->info->name to the "JIT: bailed completely" error, and it now says it's ctxouter

[20:20] <MasterDuke> which has no lego jit implementation or template

[20:21] *** domidumont left
[20:21] <MasterDuke> but istr that is one of the problematic ones and a naive jit implementation won't work?

[20:31] *** Ven`` joined
[20:32] *** p6bannerbot sets mode: +v Ven``

[20:37] <MasterDuke> huh, i cherry-picked https://github.com/MoarVM/MoarVM/commit/f14f023044a69d8bc0a564c324eadc5327100cff and now there aren't any 'bailed completely' in the spesh log, but a profile still shows index as unjitted

[20:42] <MasterDuke> ok, so the 'after' part of the spesh log for index has this in it: `# BAIL: Unexpected opcode in invoke sequence: <speshresolve>`

[20:43] <MasterDuke> maybe i'm still barking up the wrong tree, but is there something that can be done about that?

[21:00] *** Ven`` left
[21:00] *** bartolin joined
[21:01] *** p6bannerbot sets mode: +v bartolin

[21:28] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1031: Add op name to jit "bailed completely" error

[21:28] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1031

[21:40] *** cygx left
[21:40] <lizmat> jnthn: on every Parameter I see in signatures, I see the SIG_ELEM_MULTI_INVOCANT bit set

[21:41] <lizmat> jnthn: what is the way to *not* have that set ?

[21:41] <timotimo> MasterDuke: you mean the bail of ctxouter?

[21:42] <MasterDuke> timotimo: no, it's not bailing on that any more since i cherry-picked https://github.com/MoarVM/MoarVM/commit/f14f023044a69d8bc0a564c324eadc5327100cff

[21:42] <MasterDuke> well, there's no template, but the other bail message is gone

[21:43] <MasterDuke> it's the `Unexpected opcode in invoke sequence: <speshresolve>` that seems to be the problem now

[21:43] <timotimo> well, i'm not sure why speshresolve wouldn't have been sp_'d

[21:43] <timotimo> could be interesting to find out how it got past spesh

[21:44] <timotimo> other than that, an implementation of speshresolve could be very similar to sp_speshresolve

[21:46] <MasterDuke> timotimo: this? https://github.com/MoarVM/MoarVM/blob/master/src/jit/graph.c#L538-L546

[21:46] *** patrickb left
[21:46] <timotimo> oh

[21:47] <timotimo> right, it's an invoke, and those are a bit special

[21:47] <timotimo> i don't know how invokes work in the jit, tbh

[21:48] <MasterDuke> yeah, i don't really understand what's happening there, or the speshresolve->sp_speshresolve conversion

[21:50] <MasterDuke> timotimo: any logging i could put somewhere to find out why that conversion isn't happening?

[21:50] <timotimo> there's a gdb script that can step-by-step the spesh process

[21:51] <timotimo> "source ~/perl6/moarvm/tools/trace_spesh_optimizer.gdb" in the gdb console with a path that's appropriate for your system

[21:51] <timotimo> then you have your breakpoint in MVM_spesh_candidate_add

[21:51] <timotimo> and put "trace_spesh_optimize" in your gdb commandline

[21:53] <MasterDuke> wow that's weird, what are all the git commands doing?

[21:53] <MasterDuke> huh, now it's showing some diff

[21:53] <timotimo> yeah :)

[21:54] <timotimo> it abuses git to have a version history with comments

[21:54] <MasterDuke> hm, how do i skip ahead to where it's doing 'index'?

[21:55] <timotimo> oh, i should perhaps point out that the MVM_spesh_candidate_add should be for the code you're interested in, not just the first one you find

[21:56] <MasterDuke> it looks like if i hit q in the diff and then ran trace_spesh_optimize again it would move on to the next thing

[21:56] <MasterDuke> oh, now i need to continue in gdb it looks like

[21:56] <timotimo> i usually have something like "condition" "p->sf->body.name->body.num_graphs == " and then the number of characters the frame i'm interested in has

[21:56] <timotimo> that narrows it down a bunch

[21:58] <MasterDuke> Bad breakpoint argument: 'p->sf->body.name->body.num_graphs == 5'

[21:59] <MasterDuke> oh, can't i set a breakpoint on `char *c_name = MVM_string_utf8_encode_C_string(tc, p->sf->body.name);` where c_name eq 'index'?

[22:00] <timotimo> only if you have spesh logging enabled

[22:01] <MasterDuke> any reason not to do that?

[22:01] <timotimo> you'll want to use $_streq(c_name, "index")

[22:09] *** KDr2 left
[22:09] <MasterDuke> ah ha, now i'm broken there

[22:10] *** KDr2 joined
[22:10] *** p6bannerbot sets mode: +v KDr2

[22:11] <MasterDuke> huh, trace_spesh_optimize is paused after create mode 100644 speshdump.txt

[22:14] <MasterDuke> oh, ctrl-c and now i see a diff

[22:14] <MasterDuke> timotimo: what should i look for?

[22:21] <MasterDuke> hm, think i did everything correctly, but i don't see that BAIL speshresolve thing in any of the diffs

[22:24] <MasterDuke> huh, but it is in the spesh log

[22:39] <jnthn> .tell patrickb No objections; I'd prefer that than to have things make an assumption that MoarVM is using libuv (there's no plans for it not to any time soon, but better to keep it as an impl detail)

[22:39] <yoleaux> jnthn: I'll pass your message to patrickb.

[22:39] <jnthn> lizmat: ;;

[22:43] <timotimo> MasterDuke: bail happens after the spesh process is done, there is no entry for that in the spesh "trace"

[22:43] <timotimo> you'll want to see where it goes past "speshresolve" and doesn't change it, or where it puts it in there

[22:44] <MasterDuke> ok, i do see speshresolve in the "before"

[22:45] <MasterDuke> what does "goes past" mean?

[22:46] <timotimo> when it optimizes stuff before the speshresolve, and then after it

[22:46] <timotimo> like, in the BB order

[22:47] <MasterDuke> hmm, looks like the diff of the "going to optimize a bb" doesn't show which bb

[22:47] <timotimo> oh? it's supposed to :(

[22:48] <MasterDuke> well, sometimes it does (because the change was near enough the id line to be in the context)

[22:49] <timotimo> you should be able to find the git dir in /tmp and git log it manually with a higher context parameter

[22:55] <MasterDuke> would MVM_SPESH_BLOCKING=1 help make BB numbers the same across different runs?

[22:55] <timotimo> not BB numbers, no. only the order of functions that get speshed gets more stable

[22:56] <MasterDuke> huh, setting that got me: `===SORRY!=== Frame has no lexical with name '&reduce'`

[22:57] <timotimo> huh, that's fun ?!?

[22:57] <MasterDuke> that was just starting perl6-gdb-m, after i hit r in gdb i get: ===SORRY!=== Frame has no lexical with name '&infix:<(|)>'

[22:58] <MasterDuke> if i don't use gdb i get the same error every time, though the thing it can't find changes

[22:58] <timotimo> o_O

[23:00] <MasterDuke> hm, might be that ctxout jit commit i cherry-picked

[23:00] <MasterDuke> because it doesn't happen on a rakudo almost at HEAD, but with a vanilla MoarVM

[23:04] <MasterDuke> huh, the BB info in spesh log i create while running the script doesn't seem to match up with what the script outputs

[23:04] <MasterDuke> should it?

[23:04] <timotimo> oh, i think it sometimes gets confused with inlines

[23:04] <timotimo> at least i think so?

[23:05] <MasterDuke> oh wait, maybe it does match (at least the "before")

[23:07] <MasterDuke> huh, so i see `-      sp_fastcreate     r8(2), liti16(32), sslot(0)` from the BB that has the BAIL by the end, but i don't see where that got added, and it wasn't in the BB "before"

[23:08] <MasterDuke> oh wait, later in the log i see it being added in place of `param_sn          r8(2)`

[23:15] <MasterDuke> timotimo: i just don't see speshresolve in the BB in the trace script output, even with context set to a very high number

[23:16] <MasterDuke> could there have been some spesh stages added since you wrote the script?

[23:18] <timotimo> hm, that's possible

[23:18] <timotimo> if you want you can add to it

[23:32] <MasterDuke> i just added ~40, but the script now seems to be paused after the first commit

[23:34] <MasterDuke> it shouldn't matter what order they're in in the script, right?

[23:39] <timotimo> shouldn't, no

[23:40] <MasterDuke> oh, that time it went

[23:41] <MasterDuke> well, seems to have recorded more, but still not what i want...arg

[23:46] <MasterDuke> i just added all the optimize_* in src/spesh/optimize.c, but i guess it's some other function i need to add

