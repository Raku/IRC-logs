[00:25] *** MasterDuke joined
[00:27] *** MasterDuke left
[00:27] *** MasterDuke joined
[06:10] *** patrickb joined
[06:24] *** domidumont joined
[06:47] *** squashable6 left
[06:48] *** squashable6 joined
[07:48] *** zakharyas joined
[08:33] *** lizmat left
[08:57] *** lizmat joined
[09:01] *** brrt joined
[09:06] <brrt> \o

[09:06] <yoleaux> 15 May 2019 21:04Z <samcv> brrt: ik hub gereageerd https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-492822850

[09:06] <brrt> thank you samcv

[09:07] <brrt> fwiw, malloc_trim manual page claims it is a GNU extension, so maybe we just an '#ifdef _GNU_SOURCE'

[09:12] *** squashable6 left
[09:15] *** squashable6 joined
[09:33] *** sena_kun joined
[09:37] *** brrt left
[10:01] *** domidumont left
[10:22] <samcv> .tell nope. others have it too

[10:22] <yoleaux> samcv: What kind of a name is "nope."?!

[10:22] <samcv> there's no reliable way to do it other than to actually check

[10:23] <nwc10> o/

[10:23] <nwc10> .tell brrt o/ -- I was in a meeting

[10:23] <yoleaux> nwc10: I'll pass your message to brrt.

[11:01] *** Voldenet left
[11:07] *** Voldenet joined
[11:07] *** Voldenet left
[11:07] *** Voldenet joined
[11:12] *** zakharyas left
[11:16] *** squashable6 left
[11:21] *** brrt joined
[11:21] *** squashable6 joined
[11:48] <brrt> \o

[11:48] <yoleaux> 10:23Z <nwc10> brrt: o/ -- I was in a meeting

[11:48] <brrt> hehe

[11:50] <nwc10> manual o/

[11:54] <brrt> samcv: then a probe is in order, yes

[12:15] <jnthn> o/

[12:15] *** domidumont joined
[12:21] *** MasterDuke left
[12:23] <jnthn> Today working on the Int EA some more. First is clearing up the now-redundant two-phase optimization of that so we do all the stuff in PEA

[12:39] *** robertle joined
[13:04] *** robertle left
[13:06] *** robertle joined
[13:06] <Geth> ¦ MoarVM/more-pea: 14a35bbc14 | (Jonathan Worthington)++ | 10 files

[13:06] <Geth> ¦ MoarVM/more-pea: Leave all big integer op devirt to the EA

[13:06] <Geth> ¦ MoarVM/more-pea:

[13:06] <Geth> ¦ MoarVM/more-pea: Previously, we had:

[13:06] <Geth> ¦ MoarVM/more-pea:

[13:06] <Geth> ¦ MoarVM/more-pea: 1. A set of devirtualized ops for a few common big integer operations.

[13:06] <Geth> ¦ MoarVM/more-pea:    We rewrote big integer opts into these in the post-inline pass.

[13:06] <Geth> ¦ MoarVM/more-pea: 2. EA over these ops.

[13:06] <Geth> ¦ MoarVM/more-pea: <…commit message has 11 more lines…>

[13:06] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/14a35bbc14

[13:07] <jnthn> That in isolation does the right thing, but produces something rather explosive, which seems to be because of some missing alias handling in the materialization phase...

[13:12] *** zakharyas joined
[13:26] *** lizmat left
[13:50] *** brrt left
[14:02] *** robertle left
[14:16] <jnthn> Darn, this is all a bit tricky. :)

[14:17] *** robertle joined
[14:17] <jnthn> But I think the SSA form failure that was blowing up the DU check in NQP NODELAY build can be detected (and so a mitigation introduced) with the same machinary we need to track uses of aliases of materialized things

[14:18] <jnthn> Or in the case of provisional insertion of materializations at merge points, *any* uses

[14:18] <jnthn> (So that we don't insert materializations that are never used)

[14:26] *** brrt joined
[14:37] <brrt> who knew, adaptive optimization would be tricky :-P

[14:45] *** patrickb left
[14:52] <Geth> ¦ MoarVM/more-pea: b5ec72d71d | (Jonathan Worthington)++ | 2 files

[14:52] <Geth> ¦ MoarVM/more-pea: Keep track of inserted materialization transforms

[14:52] <Geth> ¦ MoarVM/more-pea:

[14:52] <Geth> ¦ MoarVM/more-pea: So we can far more easily detect the case where we have a usage of a

[14:52] <Geth> ¦ MoarVM/more-pea: materialized value and insert it into the list of aliases to write into

[14:52] <Geth> ¦ MoarVM/more-pea: upon a materialization. This will also come in useful for fixing the SSA

[14:52] <Geth> ¦ MoarVM/more-pea: form problems encountered when we materialize an object on two different

[14:52] <Geth> ¦ MoarVM/more-pea: sides of a branch. No functional changes are intended as a result of

[14:52] <Geth> ¦ MoarVM/more-pea: this; it's just a preparatory refactor.

[14:52] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/b5ec72d71d

[15:12] *** domidumont left
[15:18] *** robertle left
[15:18] <brrt> jnthn: left a comment; I think memmem isn't a function on windows, but we have an implementation stashed somewhere

[15:19] <brrt> yes, `src/platform/memmem.h` has

[15:23] <jnthn> Hmm...I wonder if we can somehow use that to implement the macro?

[15:25] <brrt> probably yes :-)

[15:40] *** brrt left
[15:49] <Geth> ¦ MoarVM/more-pea: e08f8f8a46 | (Jonathan Worthington)++ | src/spesh/pea.c

[15:49] <Geth> ¦ MoarVM/more-pea: Handle uses of materialized objects

[15:49] <Geth> ¦ MoarVM/more-pea:

[15:49] <Geth> ¦ MoarVM/more-pea: We need to track usages of materialized objects and make sure that we

[15:49] <Geth> ¦ MoarVM/more-pea: install them into all later-used registers that alias the object at the

[15:49] <Geth> ¦ MoarVM/more-pea: point it is materialized.

[15:49] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/e08f8f8a46

[15:52] <jnthn> OK, that's one source of potential big explosions sorted out :)

[15:53] <timotimo> on new year's eve we can pull out all those explosive commits again \o/

[15:55] <jnthn> The SSA fun with materializations still needs sorting out, though will return to the bigint bits that I was primarily planning to work on today before I realized we had this rather sizable problem :)

[15:56] <jnthn> All of it needs sorting before I can even really start testing this and hutning regressions

[15:56] <jnthn> *hunting

[16:08] *** robertle joined
[16:20] *** lizmat joined
[16:21] *** dogbert17 left
[16:38] *** Kaiepi left
[16:51] <Geth> ¦ MoarVM/more-pea: 9f340f5949 | (Jonathan Worthington)++ | 8 files

[16:51] <Geth> ¦ MoarVM/more-pea: Use integer cache if materializing a big integer

[16:51] <Geth> ¦ MoarVM/more-pea:

[16:51] <Geth> ¦ MoarVM/more-pea: This re-instates an optimization lost during the changes to the way we

[16:51] <Geth> ¦ MoarVM/more-pea: devirtualize big integer operations.

[16:51] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/9f340f5949

[16:59] *** lizmat left
[17:19] *** Kaiepi joined
[17:28] *** lizmat joined
[17:34] <Geth> ¦ MoarVM/more-pea: e61f028ed6 | (Jonathan Worthington)++ | 2 files

[17:34] <Geth> ¦ MoarVM/more-pea: Unmaterialize big integers during PEA

[17:34] <Geth> ¦ MoarVM/more-pea:

[17:34] <Geth> ¦ MoarVM/more-pea: So if we inline something that materializes a big integer to hand back

[17:34] <Geth> ¦ MoarVM/more-pea: as a result, then we can undo that materialization and optimize it

[17:34] <Geth> ¦ MoarVM/more-pea: further, hopefully resulting in further eliminated allocations.

[17:34] <Geth> ¦ MoarVM/more-pea: review: https://github.com/MoarVM/MoarVM/commit/e61f028ed6

[17:41] <timotimo> ooh, unmaterialize, eh?

[17:41] <timotimo> is that how we call that now

[17:41] *** zakharyas left
[17:45] <jnthn> m: say 401 / 496

[17:45] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.808468␤»

[17:47] <jnthn> I've got a silly Rat benchmark just adding up big integers, which is actually quite a lot of work. But just having some allocations eliminated on the + and * (not anything else yet) seems to cut out nearly 20% of the GC runs.

[17:47] <timotimo> nice

[17:47] <timotimo> i'm conflicted on this

[17:47] <timotimo> on the one hand i'm hoping that GC time is already super low for that

[17:47] <timotimo> on the other hand i'm hoping getting rid of 20% gc runs makes a big difference :)

[17:48] <jnthn> Well, it's not just GC cost

[17:48] <jnthn> It's also in theory less memory access

[17:48] <jnthn> Especially once the expression JIT can handle these things, given it knows how to avoid the memory traffic of VM register writes that aren't needed.

[17:48] <timotimo> aye

[17:49] <jnthn> Also, when we JIT these ops, we inline the math op and only make a function call if we're doing the big integer case.

[17:49] <timotimo> indeed

[17:49] <jnthn> Which also should help a good bit

[17:49] <timotimo> i still kind of sort of wish we'll be able to up the "smallbigint" case to 64bit instead of just 32bit

[17:50] <jnthn> Probably do-able with some effort

[17:50] <timotimo> when we've done full unmaterialization, we can perhape keep calculations with 64bit until we have to materialize and turn it into a realbigint then

[17:51] <timotimo> if we reach lower numbers before materialization, for example with gcd and rat normalization, we'll potentially end up with 32bit again for those cases

[17:51] <timotimo> all in all, sounds pretty great

[17:54] <jnthn> wowser, div_I is quite involved

[17:55] <timotimo> wasn't it big integer division where a new algorithm was recently discovered

[17:56] <timotimo> like, faster than what we had so far, but only if the number is bigger than a couple terabytes

[17:56] <japhb> jnthn: Wouldn't want you to feel like this work was too easy.  I mean, clearly it's been nearly effortless so far .... ;-P

[17:56] <timotimo> or something like that :D

[17:56] <jnthn> japhb: Well, mostly trying to figure out what is worth inlining into the assembly, and if the number of checks involved make it worth it at all...

[17:57] *** brrt joined
[17:57] <timotimo> hey brrt, what do you think about jnthn's divisive comments just now?

[17:57] <japhb> jnthn: Meaning, that you lose too much in expanded code size inlining all the checks at the call site rather than having them in one place in the function?

[17:57] <timotimo> (just a pun)

[17:58] <jnthn> japhb: Pretty much

[17:58] <japhb> timotimo: Look, if you're not part of the quotient, you're part of the remainder.

[17:58] <jnthn> I notice that gcd can be written really quite compactly though :)

[17:58] <jnthn> (when both numbers are in the smallint range)

[17:58] <japhb> I love that algorithm.

[17:59] <jnthn> So that one's almost certainly worth inlining :)

[17:59] <timotimo> oh jnthn btw don't forget about libraries that can precompute a little constant + choice of one of a few formulas that will be very quick at computing a quotient or a remainder

[18:00] <timotimo> https://lemire.me/blog/2019/02/08/faster-remainders-when-the-divisor-is-a-constant-beating-compilers-and-libdivide/ - for example

[18:01] <jnthn> Probably too much of a diversion Right Now, but likely doable in the future :)

[18:01] <timotimo> ah, sure

[18:14] <jnthn> bah, I shoulda reduced the iteration could before callgrinding this rat program...

[18:14] <jnthn> I figured I'd leave it run while I did a few admin bits and then glance it before heading home to make dinner. I've done my admin bits and it's still running...

[18:18] *** brrt left
[18:20] <jnthn> Oh, huh, it's actually running into big integer size, where I thought this example was too small for that

[18:20] <jnthn> m: say int32.Range

[18:20] <camelia> rakudo-moar a643b8be1: OUTPUT: «-2147483648..2147483647␤»

[18:21] <jnthn> m: say (10_000_000 * 1.5).nude

[18:21] <camelia> rakudo-moar a643b8be1: OUTPUT: «(15000000 1)␤»

[18:21] <jnthn> m: say (10_000_001 * 1.5)

[18:21] <camelia> rakudo-moar a643b8be1: OUTPUT: «15000001.5␤»

[18:21] <jnthn> m: say (10_000_001 * 1.5).nude

[18:21] <camelia> rakudo-moar a643b8be1: OUTPUT: «(30000003 2)␤»

[18:22] <jnthn> Well, should be home...will play more later

[18:32] <samcv> the PR for malloc_trim() should now work on Musl and other libc's, whether or not they have malloc_trim() or not https://github.com/MoarVM/MoarVM/pull/1072

[18:38] *** lizmat left
[18:44] *** Kaiepi left
[18:51] <timotimo> jnthn: i think callgrind will give you results even if you ctrl-c, of course you can't compare the total number with a different full run

[18:54] <timotimo> ugh, my head tho

[18:58] *** zakharyas joined
[19:22] *** brrt joined
[19:23] <brrt> timotimo: I think not so much :-)

[20:02] *** robertle left
[20:34] *** zakharyas left
[21:28] *** Kaiepi joined
[21:32] *** brrt left
[22:38] *** Kaiepi left
[22:41] *** Kaiepi joined
[22:42] *** Kaiepi left
[23:01] <jnthn> I had a useful walk this evening. So for a while I've been wondering how we can replace the attrinit'd thing, because it gets in the way of...so much.

[23:02] <jnthn> Anyway, I realized there's only one combination of cases where we need it: when we have an attribute with a default AND the class has a BUILD submethod

[23:02] <jnthn> Meaning we can elimiante it completely for any class where those two are not true

[23:02] <jnthn> And for classes where it is true, we can restrict it to only apply to attributes that have a default

[23:02] <jnthn> That'll get us a *really* long way, without having to deal with the really thorny problem.

[23:05] <timotimo> oh, that does sound very good

[23:05] <jnthn> In fact, I think if I can nail this, I think the Point benchmark will be able to eliminate every allocation except the VMHash for the named args and the Int that escapes into $total.

[23:06] <jnthn> And replacing a hash which only ever has constant keys used on it is always a SMOP

[23:06] <jnthn> That leaves $total, which means loops, which is not simple in any sense.

[23:06] *** MasterDuke joined
[23:06] <timotimo> oh yes

[23:06] *** MasterDuke left
[23:06] *** MasterDuke joined
[23:08] <jnthn> I've been designing for the loop thing; I roughly get how to do the fixed point algorithm to decide what escapes or doesn't.

[23:08] <jnthn> What I don't have a good feeling for yet is how to calculate the set of things that have to be deconstructed at the OSR point.

[23:08] <jnthn> Surely it's strongly related to the deopt materialization handling though.

[23:09] <jnthn> Given that deopt is a kind of OSR

[23:10] <timotimo> yeah, just undeopt, how hard could it be

[23:11] <jnthn> Anyway, I think I have a rough design for how to mostly (except in the case I mentioend) get rid of auto-viv stuff.

[23:11] <timotimo> i like hearing that

[23:12] <jnthn> Since it'll NULL fields out, we can finally get most attribute access down to...1 CPU instruction.

[23:12] <timotimo> heck yeah

[23:12] <jnthn> Except in the case that PEA gets it down to zero :P

[23:12] <timotimo> right

[23:13] <jnthn> I guess having a load less branches ("is this thing null?") will potentially help us a lot

[23:15] <MasterDuke> timotimo: btw, it was a new optimized large int multiplication, not division

[23:16] <timotimo> ah

[23:16] <timotimo> it wasn't very relevant anyway :D :D

[23:42] *** sena_kun left
