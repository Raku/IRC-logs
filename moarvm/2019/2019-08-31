[01:12] *** Kaiepi joined
[06:28] *** vesper11 left
[06:39] *** vesper11 joined
[07:40] *** Ven`` joined
[08:08] *** patrickb joined
[08:08] <patrickb> o/

[08:25] *** Ven`` left
[09:50] <patrickb> I'm currently trying to iron out unicode in path stuff.

[09:50] <patrickb> Currently I'm looking at https://github.com/MoarVM/MoarVM/blob/master/src/io/syncfile.c#L457

[09:51] <patrickb> That's the `open` implementation. It's directly using the C API `open()` function instead of libuv `uv_fs_open`.

[09:51] *** chloekek joined
[09:52] <patrickb> I think `open()` on windows is ignorant of utf-8. Instead one needs to use _wopen() and convert the path string to wchar_t before.

[09:54] <patrickb> Is libuv somehow forbidden in syncfile? (because of the 'sync' part?)

[10:04] <patrickb> What would be a good way forward? rewrite to use `_wopen()` on Windows and convert the path to wchar_t, or use libuvs `uv_fs_open`?

[10:04] <patrickb> It seems libuvs implementation does some other nifty stuff to prevent locking problems as well.

[10:09] <nine> patrickb: jnthn++ removed libuv usage from syncfile 2 years ago, but the commit messages don't say why that was good

[10:12] <patrickb> nine: Thanks!

[10:12] <patrickb> I'll wait for more input and do other stuff in the meantime.

[10:21] *** chloekek left
[10:44] <timotimo> for syncfile stuff, using libuv meant overhead from going through starting and stopping eventloops for every operation

[11:10] *** dogbert17 joined
[11:10] <dogbert17> nine: if you're bored I have one more fromspace error you can sink your teeth into :)

[11:12] <patrickb> so `MultiByteToWideChar()` and `_wopen()`is the way to go I guess...

[11:12] *** patrickb left
[11:13] <nine> dogbert17: that might be less frustrating than trying to find that elusive segfault in Inline::Perl5. But I also have to leave soon

[11:18] <dogbert17> nine: when you have the time then: set nursery to 2048 bytes, MVM_GC_DEBUG=1 and run t/spec/S12-meta/primitives.t

[11:24] <nine> That...kinda looks familiar

[11:26] <dogbert17> it has been mentioned before

[12:03] *** patrickb joined
[12:10] *** sena_kun joined
[12:28] *** lucasb joined
[12:36] <Geth> ¦ MoarVM: cfc5d00061 | (Timo Paulssen)++ | src/core/nativecall_libffi.c

[12:36] <Geth> ¦ MoarVM: give error message improvement to libffi as well

[12:36] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cfc5d00061

[12:36] <Geth> ¦ MoarVM: ee18678e91 | (Timo Paulssen)++ | README.markdown

[12:36] <Geth> ¦ MoarVM: Update "Features" part of readme

[12:36] <Geth> ¦ MoarVM:

[12:36] <Geth> ¦ MoarVM: Unicode 10 -> 12.1

[12:36] <Geth> ¦ MoarVM: MAST compiler is no longer in moarvm

[12:36] <Geth> ¦ MoarVM: scalar replacement and PEA

[12:36] <Geth> ¦ MoarVM: heap snapshots

[12:36] <Geth> ¦ MoarVM: remote debugger

[12:36] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ee18678e91

[13:29] *** sena_kun left
[13:30] *** sena_kun joined
[13:51] <patrickb> May I encourage anyone with some knowledge of how Linux user permissions work to have a look here: https://colabti.org/irclogger/irclogger_log/moarvm?date=2019-08-30#l122

[13:53] <timotimo> hm, can root open a file that's -r for everything?

[13:54] <timotimo> apparently so

[13:55] <patrickb> afk for a bit

[13:55] <timotimo> lol

[13:55] <timotimo> if i'm root and the file doesn't belong to me, i can cat it

[13:55] *** sena_kun left
[13:55] <timotimo> if i'm root and it's root:root and 000 i am not allowed to cat it

[13:56] *** sena_kun joined
[14:10] *** sena_kun left
[15:53] *** domidumont joined
[15:57] *** MasterDuke joined
[15:58] <MasterDuke> can anyone explain the appveyor warning i get here? https://github.com/libtom/libtommath/pull/330

[15:58] <MasterDuke> the const qualifiers look the same to me...

[16:01] <timotimo> what does MP_WUR expand to?

[16:01] <MasterDuke> oh, easier to see just my changes here https://github.com/libtom/libtommath/pull/331

[16:02] <MasterDuke> `define MP_WUR __attribute__((warn_unused_result))`

[16:02] <timotimo> ah

[16:02] <timotimo> so one is mp_err mp_todecimal(const mp_int *a, char *str)

[16:02] <timotimo> ￼

[16:03] <timotimo> mp_err mp_todecimal(const mp_int *a, char *str) MP_WUR;

[16:03] <timotimo> ￼

[16:03] <timotimo> is the other

[16:04] <MasterDuke> huh

[16:06] *** domidumont left
[16:06] *** domidumont joined
[16:08] <MasterDuke> think i found it, i was missing the const in tommath_private.h

[16:08] <timotimo> ooh

[16:09] <MasterDuke> arg, nope, not it

[16:09] <timotimo> anything related to the macro that used to be there?

[16:10] <MasterDuke> i don't think so...now it's pointing to `if ((err = mp_neg(number, number)) != MP_OKAY) {` as the problem (same error though)

[16:11] <MasterDuke> oh, maybe because mp_neg only has the first argument const?

[16:11] <MasterDuke> in it's signature

[16:12] <timotimo> yeah, you can't pass something that's const to a parameter that isn't const

[16:12] <MasterDuke> any way around having to create a new mp_int just to put the negative into?

[16:12] <timotimo> because that means the function will want to modify it

[16:12] <timotimo> though you can pass a non-const to a const parameter by casting it i think?

[16:14] <MasterDuke> don't think that helps me

[16:14] <timotimo> OK

[16:17] <MasterDuke> ha, i think that just uncovered a bug in my code though

[16:18] <MasterDuke> if a number is negative i turn it positive to go though my new functions and manually stick a '-' in the front

[16:18] <MasterDuke> but i never turn it back positive at the end

[16:19] <MasterDuke> so i'd either have to know to turn it back negative at the end, or just copy it into a new (non-cont) mp_int

[16:19] <timotimo> mhm

[16:46] *** chloekek joined
[17:31] *** chloekek left
[18:48] *** domidumont left
[19:00] *** chloekek joined
[19:22] <nine> Oooh...progress on the GC issue in t/spec/S12-meta/primitives.t!

[19:26] <nine> This can allocate: https://github.com/MoarVM/MoarVM/blob/master/src/spesh/plugin.c#L404 and it will change tc->plugin_guards before that. The plugin_guards are saved to the local MVMSpeshPluginGuard *prev_plugin_guards but that's not rooted so it may become out of date.

[19:31] <dogbert17> brilliant, I have a vague memory that I looked at that function but was unable to figure out why things went wrong

[19:32] <nine> There's also a mark_plugin_sr_data that marks the prev_plugin_guard_args but not the prev_plugin_guards

[19:35] <nine> Seems like a little reshuffeling of the code can ensure that the guards get marked. That saves me from having to write lots of code to push all the objects pointed to by the guards to the temp roots :)

[19:53] <dogbert17> sounds as if the bug will soon be a distant memory :)

[19:56] <Geth> ¦ MoarVM: b2287bc413 | (Stefan Seifert)++ | src/spesh/plugin.c

[19:56] <Geth> ¦ MoarVM: Fix possible memory corruption of spesh plugin guards by untimely GC

[19:56] <Geth> ¦ MoarVM:

[19:56] <Geth> ¦ MoarVM: setup_for_guard_recording can allocate and it will change tc->plugin_guards

[19:56] <Geth> ¦ MoarVM: before doing so. The plugin_guards are saved to the local MVMSpeshPluginGuard

[19:56] <Geth> ¦ MoarVM: *prev_plugin_guards but that's not rooted so it may become out of date when

[19:56] <Geth> ¦ MoarVM: the GC moves objects pointed to by such guards.

[19:56] <Geth> ¦ MoarVM:

[19:56] <Geth> ¦ MoarVM: <…commit message has 8 more lines…>

[19:56] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b2287bc413

[19:58] <nine> Why would "using a null string to access a hash does not segfault" in t/spec/integration/weird-errors.t suddenly fail?

[19:58] <nine> The test is from 2016

[19:58] <nine> nothing to do with my commit btw

[20:00] *** patrickb left
[20:00] <nine> Ah, timotimo, it's because of https://github.com/MoarVM/MoarVM/commit/3faf1985d277fc53c111464b73aac87f27158e7d

[20:01] <nine> It segfaults on trying to get the debug name of a NULL object

[20:03] <Geth> ¦ MoarVM: 289ccd8c97 | (Stefan Seifert)++ | src/6model/6model.h

[20:03] <Geth> ¦ MoarVM: Don't segfault when trying to get the debug name of a NULL object

[20:03] <Geth> ¦ MoarVM:

[20:03] <Geth> ¦ MoarVM: Fixes regression in "using a null string to access a hash does not segfault"

[20:03] <Geth> ¦ MoarVM: test in t/spec/integration/weird-errors.t

[20:03] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/289ccd8c97

[20:18] *** brrt joined
[20:21] <brrt> \o

[20:25] <MasterDuke> brrt: just curious, what's next now that the float stuff has been merged?

[20:27] <brrt> MasterDuke: good quesiton

[20:27] <brrt> so there's three things that I want/need to do, that are sort of orthogonal

[20:28] <brrt> one, we need to support irregular register requireemnts for arbitrary tiles

[20:28] <brrt> that's a easy-medium problem

[20:29] <MasterDuke> what causes an irregular register requirement?

[20:29] <brrt> that'd be something like the integer division operator 'div'

[20:29] <brrt> in x86-64

[20:30] <brrt> but also, shift-left and shift-right, iirc

[20:30] <brrt> this may cause some spilling and shuffling and I think that can be handled by refactoring the same logic for function calls

[20:32] <brrt> two, I want to start optimizing expression IR. But that turns out to be blocked by the current IR not recording the relative order of oeprations (thereby making it impossible for optimizations to take them into account)

[20:32] <dogbert17> nine++, there's a chance that we're now out of fromspace errors ...

[20:36] <brrt> three, there are a number of instances where there are integrations with the legacy JIT (e.g., subroutine invocation, repr-based devirtualizzation), and things that the expr jit doesn't handle yet (deopt), that should be rewritten to use the expr JIT

[20:37] <brrt> of those, subroutine invocation is decently far advanced, but there's a use case (nativecall) that I can't figure out how to test

[20:37] <brrt> repr-based devirtualization I'm currently working on mostly because timotimo asked for it

[20:37] <brrt> and because it's quite doable I think :-)

[20:39] <MasterDuke> would that last one help with jitting setmethcach, ctxouter, throwpayloadlexcaller, param_*, etc?

[20:44] <MasterDuke> and/or creating templates for prepargs, sp_*, *attr*, etc?

[20:48] <brrt> maybe

[20:48] <brrt> no, not prepargs

[20:48] <brrt> well, yes prepargs

[20:48] <brrt> not some of the attr_ stuff

[20:51] <brrt> some of the sp_bind and such stuff, those could be jitted already

[21:03] <timotimo> when something turns into an sp_bind or so, especially the numeric ones, it's already pretty much as good as we can get

[21:04] <timotimo> devirtualization is for reprops like elems, atpos/atkey, existspos/existskey, push/unshift, pop/shift, many more

[21:05] <timotimo> nine: thanks for catching that. i was convinced it'd already be safe, but clearly it wasn't :)

[21:09] <brrt> the thing is that the sp_bind is not really high on the list.. mostly because it's so easy to do

[21:10] <MasterDuke> sp_getlex_o, sp_fastbox_i_ic, sp_getvt_o, sp_get_i64, sp_getlex_ins are some of the top missing templates

[21:11] <timotimo> will exprjit be smaller than the code we're currently compiling in graph.c for all the "call a c function" things?

[21:11] <brrt> I hope so timotimo

[21:11] <brrt> the idea is that it can be cleverer about loading and moving stuff about

[21:23] <timotimo> MasterDuke: how much faster is base 16 btw, compared to torad and todec?

[21:24] <timotimo> and todec_fast

[21:24] <timotimo> i imagine it can be blazing fast

[21:25] <MasterDuke> don't know. i mean, it just uses toradix also, so i can't imagine it's all that fast

[21:28] <timotimo> time perl6 -e '((2 ** 500000)).base(16).chars.say' vs the same with base 10 is 1.3s vs 10.8s

[21:29] <MasterDuke> huh

[21:29] <timotimo> no clue how it fares against the faster todec

[21:30] <brrt> I just realized that it'd be possible for a throwish / invokish opcode, to return a value. and that value would never be assigned to the correct register

[21:30] <brrt> does that ever happen? 😬

[21:31] <timotimo> invoke_o is invokish?

[21:32] <timotimo> decont is invokish and regularly returns something

[21:33] <brrt> i think decont has an explicit output argument, so that's not a problem, and invoke_o does the same thing

[21:33] <brrt> (also, we don't exprjit invoke_o yet)

[21:33] <brrt> so the assignment of anything actually invokish, is done when the invokish thing returns

[21:34] <brrt> throwpayloadlex also has the same thing, I think

[21:34] <brrt> (late assignment)

[21:34] <brrt> yeah, okay, so this makes sense

[21:35] <brrt> this must always be the case. If it's actually invokish, it can't assign directly when it returns

[21:35] <brrt> it must always pass the target register as an address

[21:35] <brrt> phew

[21:35] <brrt> sanity prevails.

[21:41] <MasterDuke> timotimo: todec becomes faster than tohex at 2**16384

[21:41] <timotimo> that is todec with barrett?

[21:42] <MasterDuke> yeah

[21:42] <timotimo> converting to hexadecimal should be impossible to overtake, honestly :)

[21:44] <MasterDuke> they seem open to PRs...

[21:46] <timotimo> i see it's really dividing by the base over and over and just grabbing the right letter

[21:46] <timotimo> with bases 2 and 16 and probably also 8 you can get much faster

[21:47] <MasterDuke> yeah, toradix is not really optimized at all

[21:50] <MasterDuke> timotimo: some timings. however, these are done on my laptop, so shouldn't be compared with my other timings (the ones in the PRs) https://gist.github.com/MasterDuke17/d29b816d6c8c3080e81ef9a29fafb606

[21:53] *** brrt left
[22:07] <timotimo> m: say 3.6 / 4.8

[22:07] <evalable6> timotimo, rakudo-moar 579ac66e8: OUTPUT: «0.75␤»

[22:08] <timotimo> that's the very naive version

[22:10] <timotimo> i should really be iterating over the digits inside the number directly

[22:10] <timotimo> that'd also allow working without reversing the string at the end

[22:13] <timotimo> don't really have the energy for that now, though

[22:18] <MasterDuke> nice

[22:18] <timotimo> i could imagine there'd be a factor of 10 in there, if not 100

[22:20] <timotimo> i don't see any shift ops except for shifting by entire mp_digits

[22:22] <MasterDuke> i think i use mp_div_2d instead of shifting

[22:22] <timotimo> right

[22:22] <timotimo> ah, this uses mp_div_d

[22:23] <timotimo> oh, that is a shift!

[22:33] <timotimo> i think i might have done it wrong

[22:34] <MasterDuke> that sounds unpromising

[22:37] <timotimo> it looks kind of like the majority of the time is spent creating the number, actually

[22:37] <timotimo> i'm timing this inside of perl6

[22:38] <timotimo> can has your test script? %)

[22:40] <timotimo> or something else went wrong

[22:41] <timotimo> OK, looks like i made it slower actually

[22:42] <timotimo> i think i saw a "is power of two" check in mp_div_d

[22:55] <MasterDuke> timotimo: it's not pretty at all, but https://gist.github.com/MasterDuke17/a93f11587b8ad9a1c30bc6c3d182edf3

[22:55] <timotimo> i actually reverted my changes already

[22:55] <timotimo> they weren't good

[22:57] <MasterDuke> well i'm off to sleep, but good luck

[22:57] <timotimo> good night!

[22:58] *** AlexDaniel joined
[22:58] *** AlexDaniel left
[22:58] *** AlexDaniel joined
[22:58] *** chloekek left
[23:02] *** MasterDuke left
[23:38] *** lucasb left
[23:58] *** AlexDaniel left
