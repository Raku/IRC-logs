[02:05] *** squashable6 left
[02:10] *** squashable6 joined
[02:28] *** squashable6 left
[02:31] *** squashable6 joined
[03:14] *** squashable6 left
[03:18] *** squashable6 joined
[04:46] *** Kaypie is now known as Kaiepi

[06:14] *** zakharyas joined
[08:05] *** squashable6 left
[08:06] *** squashable6 joined
[08:21] *** robertle joined
[11:03] *** lizmat_ joined
[11:05] *** lizmat left
[11:12] *** lizmat_ is now known as lizmat

[11:42] *** zakharyas left
[12:30] *** AlexDaniel left
[14:08] <lizmat> https://github.com/wangyi-fudan/wyhash

[14:09] <lizmat> according to rurban: now the fastest (and safe, if I understand this correctly): https://github.com/rurban/smhasher/

[14:47] *** brrt joined
[14:48] <brrt> ohai #moarvm

[14:48] <brrt> someone reached out about the linking proposal, yay

[14:56] *** lizmat left
[14:58] *** lizmat joined
[15:19] <timotimo> that's gsoc, right?

[15:23] *** lizmat left
[15:25] <brrt> yes

[15:26] *** lizmat joined
[15:26] *** lizmat left
[15:26] <timotimo> very nice

[15:29] <timotimo> so brrt, i was thinking. perhaps the exprjit should get a set of ops that do memory traversal (offset, load, index) but allow constant-folding at compile/optimize time. that way we wouldn't have to teach the jit what datastructures are fine to constant-fold access to while jitting

[15:33] *** lizmat joined
[15:40] <timotimo> does that make any sense?

[16:14] *** pmurias joined
[16:15] <pmurias> what's the state of this PR: https://github.com/MoarVM/MoarVM/pull/1049?

[16:15] <pmurias> a nqp::uname would be an elegant way to go around the lack of bin/uname in browsers

[16:21] <lizmat> pmurias: afaik it was waiting for the MoarVM release

[16:35] <brrt> timotimo: that's pretty much the plan, yes :-)

[16:36] <timotimo> oh, ok!

[16:36] <timotimo> what's keeping us? :)

[16:36] <brrt> the missing ancestor problem

[16:36] <brrt> I'll write a blog about it sometime

[16:37] <timotimo> why can't we get compile-time evaluation without pulling in the optimization that causes that problem?

[16:40] *** pmurias left
[16:58] *** TimToady left
[16:59] *** TimToady joined
[17:04] *** brrt left
[17:11] *** dogbert17 left
[18:17] *** robertle left
[18:51] <timotimo> who wants to help me make zstd decompression work? well, it could actually have been the compression part that went wrong

[18:52] <timotimo> BBIAB

[19:35] <masak> brrt: I for one would love to read a blog post about the missing ancestor problem

[19:47] *** [Coke] joined
[19:47] *** [Coke] left
[19:47] *** [Coke] joined
[20:00] <timotimo> so

[20:01] <timotimo> still looking for volunteers to figure out what my zstd code does wrong :|

[20:01] *** [Coke] left
[20:04] *** Kaiepi left
[20:05] *** Kaiepi joined
[20:10] *** brrt joined
[20:18] *** dogbert17 joined
[20:18] <dogbert17> timotimo: what kind of help do you need?

[20:21] <timotimo> i just made it work

[20:21] <timotimo> there was a dumb off-by-one in my code :|

[20:22] <dogbert17> timotimo++

[20:23] <timotimo> anyway, i can now decompress some zstd data and if the compression finished get the "leftovers", which is important for my use case

[20:25] <timotimo> next step will be to implement compression on moarvm's side, i.e. in C

[20:27] <dogbert17> and that code will be used by the heapdump analyzer?

[20:27] <timotimo> well, it'll be used to write the snapshots

[20:27] <timotimo> the part in the analyzer binds libzstd via nativecall

[20:30] <dogbert17> are you going to make a module of the libzstd bindings?

[20:30] <timotimo> yep

[20:30] <dogbert17> cool

[20:30] <timotimo> the code is actually horrifying right now

[20:30] <timotimo> have any interest in helping? :P

[20:31] <dogbert17> to make the code less horrifying :)

[20:35] <timotimo> yeah

[20:35] <dogbert17> btw, are the GPW videios (if any) online?

[20:35] <dogbert17> *videos

[20:35] *** Kaiepi left
[20:36] *** Kaiepi joined
[20:36] <timotimo> not yet, i don't think

[20:46] *** brrt left
[20:58] <nwc10> a1

[20:58] <nwc10> 1

[20:58] <nwc10> le sigh.

[20:58] <nwc10> VPN hates me

[20:59] <nwc10> you can have a random VPN password too if you like :-)

[20:59] <nwc10> 307834

[20:59] <nwc10> (now expired)

[21:01] <timotimo> that does not fill the emptyness in my soul

[21:06] <timotimo> i wonder if it's a bad idea to scroll through a few stores to see what kind of laptop you can get for relatively little money at the moment

[21:07] <tadzik> not sure how relative is your relative, but I got an A485 a few days ago

[21:09] <timotimo> wow enterprise grade security

[21:09] <timotimo> how did you configure it?

[21:09] <tadzik> hardware-wise? I think it's the cheapest model :P

[21:10] <timotimo> but hopefully FHD rather than HD?

[21:10] <nwc10> timotimo: the fault you had with the laptop you had at GPW can't be fixed?

[21:10] <tadzik> oh, so not the cheapest model :P

[21:10] <timotimo> i haven't yet had the opportunity to dig into that more :|

[21:10] <tadzik> but yes, fullhd

[21:10] <timotimo> and hopefully more than 4 gigs of ram?!?

[21:11] <tadzik> 20muf25epb is the model number I have

[21:11] <tadzik> 16G

[21:11] <timotimo> yeah, thought so

[21:11] <tadzik> damn, they make them worse than I thought then :P

[21:11] <tadzik> it was the cheapest one from the retailer I used then P:

[21:12] <timotimo> default is 500 gigs 7200rpm hard drive, but the others are all ssds

[21:13] <tadzik> I have a 512G nvme ssd in this one

[21:13] <timotimo> huh, the ips multitouch is cheaper than the ips anti-glare

[21:13] <timotimo> but i'd really rather have anti-glare than multitouch?!

[21:14] <tadzik> I have the anti-glare

[21:14] <timotimo> mhm

[21:14] <tadzik> maybe that's why it's more expensive, see :P

[21:14] <tadzik> becuase it's more desirable

[21:14] <timotimo> the cheapest cpu? they have ryzen 3 pro, ryzen 5 pro or ryzen 7 pro

[21:14] <tadzik> model name: AMD Ryzen 5 PRO 2500U w/ Radeon Vega Mobile Gfx

[21:15] <timotimo> the way i configured it, it'd be USD970

[21:15] <timotimo> but an ssd would be a nice-to-have, too

[21:16] <timotimo> BBL, gotta cook

[21:36] *** pmurias joined
[22:01] *** brrt joined
[22:09] *** squashable6 left
[22:13] *** squashable6 joined
[22:14] <brrt> timotimo: because hard

[22:14] <brrt> roughly; the bug exists because the expression IR is unordered

[22:14] <brrt> because it is unorded, value-based, and a DAG, an expression cannot be strictly assigned to a basic block.

[22:15] <brrt> Because an expression is not assigned to a basic block, we can't know when we're eliminating a value that is referenced by some other block, and so we can't maintain the 'ancestor value' property

[22:15] <brrt> we currently maintain that property by hand, as it were

[22:15] <brrt> humans write code which is correct

[22:16] <brrt> but the optimizer breaks that because it has no (local) way of checking whether the optimization is valid

[22:22] <timotimo> i'm having kind of a hard time getting much of the expr graph stuff into my brain

[22:24] <timotimo> do we have anything much like the spesh optimizer tracer?

[22:24] <timotimo> which is the thing that dumps a spesh log every few steps of the optimizer

[22:27] *** pmurias left
[22:27] *** pmurias joined
[22:39] <brrt> no

[22:39] <brrt> we don't have that yet

[22:39] <brrt> it's kind of too late for me to wrap my head around anything

[22:39] <brrt> so....

[22:39] <brrt> I'll leave the bigger explanation for another day :-)

[22:50] *** brrt left
[22:51] *** squashable6 left
[22:55] *** squashable6 joined
[23:22] *** pmurias left
