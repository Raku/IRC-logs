[03:00] *** lucasb left
[03:56] *** sena_kun joined
[04:43] *** sena_kun left
[05:44] *** domidumont joined
[06:13] *** domidumont left
[07:26] *** robertle joined
[07:47] *** domidumont joined
[08:46] *** dogbert17 left
[08:58] *** sena_kun joined
[09:31] *** zakharyas joined
[09:50] *** zakharyas left
[10:00] *** domidumont left
[10:04] <Geth> Â¦ MoarVM: 38915b934d | (Jonathan Worthington)++ | 4 files

[10:04] <Geth> Â¦ MoarVM: Tweak spesh logging's new compunit handling/quotas

[10:04] <Geth> Â¦ MoarVM:

[10:04] <Geth> Â¦ MoarVM: The mechanism to put a new spesh log in place when we see a new

[10:04] <Geth> Â¦ MoarVM: compilation unit is helpful for making sure we do decently at OSR for

[10:04] <Geth> Â¦ MoarVM: program mainlines. However, it was not so well engineered; recent Rakudo

[10:04] <Geth> Â¦ MoarVM: changes made it start to miss out on optimizing some programs, but it

[10:04] <Geth> Â¦ MoarVM: also turned out to be to blame for #968. Tune the mechanism, thus

[10:04] <Geth> Â¦ MoarVM: <â€¦commit message has 5 more linesâ€¦>

[10:04] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/38915b934d

[10:25] *** zakharyas joined
[11:41] *** zakharyas left
[11:48] *** domidumont joined
[11:48] *** domidumont left
[11:49] *** domidumont joined
[11:55] *** lucasb joined
[12:04] *** Guest15407 joined
[13:32] * Guest15407 is trying to reproduce the last/latest fromspace bug

[13:41] *** zakharyas joined
[13:46] <Geth> Â¦ MoarVM: 1fd0fdcd68 | (Jonathan Worthington)++ | 8 files

[13:46] <Geth> Â¦ MoarVM: Fix stack simulation losing track in some cases

[13:46] <Geth> Â¦ MoarVM:

[13:46] <Geth> Â¦ MoarVM: When we had specialized code calling unspecialized code, it was possible

[13:46] <Geth> Â¦ MoarVM: for the stack in the specializer's stack simulation to keep on growing.

[13:46] <Geth> Â¦ MoarVM: This made searches on it far more costly, not to mention increasing

[13:46] <Geth> Â¦ MoarVM: memory use (though bounded to the point that the unspecialized code got

[13:46] <Geth> Â¦ MoarVM: to being specialized, so it wasn't unbounded). Make sure that we log

[13:46] <Geth> Â¦ MoarVM: enough to know to take such frames away again. Fixes #1060.

[13:46] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1fd0fdcd68

[13:55] <Geth> Â¦ MoarVM/frame-opts: f7aecd905b | (Jonathan Worthington)++ | 12 files

[13:55] <Geth> Â¦ MoarVM/frame-opts: Only create arg processing context if needed

[13:55] <Geth> Â¦ MoarVM/frame-opts:

[13:55] <Geth> Â¦ MoarVM/frame-opts: Most specialized frames do not need it, since they rewrite their

[13:55] <Geth> Â¦ MoarVM/frame-opts: argument processing code into something far cheaper. We can also save

[13:55] <Geth> Â¦ MoarVM/frame-opts: the cost of cleaning it up afterwards. On a benchmark doing quite a lot

[13:55] <Geth> Â¦ MoarVM/frame-opts: of non-inlinable calls, this saved ~2% of the total CPU cycles, as

[13:55] <Geth> Â¦ MoarVM/frame-opts: measured by callgrind.

[13:55] <Geth> Â¦ MoarVM/frame-opts: review: https://github.com/MoarVM/MoarVM/commit/f7aecd905b

[13:55] <Geth> Â¦ MoarVM/frame-opts: 72fb2f3305 | (Jonathan Worthington)++ | src/moar.c

[13:55] <Geth> Â¦ MoarVM/frame-opts: Make MVM_HASH_RANDOMIZE properly control hash rand

[13:55] <Geth> Â¦ MoarVM/frame-opts:

[13:55] <Geth> Â¦ MoarVM/frame-opts: Before, if one set it to 0, some randomization could still happen. The

[13:55] <Geth> Â¦ MoarVM/frame-opts: sure-fire way to make sure that doesn't happen is to just fix the hash

[13:55] <Geth> Â¦ MoarVM/frame-opts: secrets to 0 also.

[13:55] <Geth> Â¦ MoarVM/frame-opts: review: https://github.com/MoarVM/MoarVM/commit/72fb2f3305

[13:56] <Geth> Â¦ MoarVM/frame-opts: 676a6ed0c0 | (Jonathan Worthington)++ | 8 files

[13:56] <Geth> Â¦ MoarVM/frame-opts: Avoid having to NULL ->extras on each frame

[13:56] <Geth> Â¦ MoarVM/frame-opts:

[13:56] <Geth> Â¦ MoarVM/frame-opts: By using ->flags instead. This saves us at least one CPU instruction

[13:56] <Geth> Â¦ MoarVM/frame-opts: per call frame creation.

[13:56] <Geth> Â¦ MoarVM/frame-opts: review: https://github.com/MoarVM/MoarVM/commit/676a6ed0c0

[14:02] *** squashable6 left
[14:03] *** squashable6 joined
[14:09] <Geth> Â¦ MoarVM: 5f177f5828 | (Jonathan Worthington)++ | src/moar.c

[14:09] <Geth> Â¦ MoarVM: Make MVM_HASH_RANDOMIZE properly control hash rand

[14:09] <Geth> Â¦ MoarVM:

[14:09] <Geth> Â¦ MoarVM: Before, if one set it to 0, some randomization could still happen. The

[14:09] <Geth> Â¦ MoarVM: sure-fire way to make sure that doesn't happen is to just fix the hash

[14:09] <Geth> Â¦ MoarVM: secrets to 0 also.

[14:09] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5f177f5828

[14:09] <Geth> Â¦ MoarVM/frame-opts: 18654e8c32 | (Jonathan Worthington)++ | 12 files

[14:09] <Geth> Â¦ MoarVM/frame-opts: Only create arg processing context if needed

[14:09] <Geth> Â¦ MoarVM/frame-opts:

[14:09] <Geth> Â¦ MoarVM/frame-opts: Most specialized frames do not need it, since they rewrite their

[14:09] <Geth> Â¦ MoarVM/frame-opts: argument processing code into something far cheaper. We can also save

[14:09] <Geth> Â¦ MoarVM/frame-opts: the cost of cleaning it up afterwards. On a benchmark doing quite a lot

[14:09] <Geth> Â¦ MoarVM/frame-opts: of non-inlinable calls, this saved ~2% of the total CPU cycles, as

[14:09] <Geth> Â¦ MoarVM/frame-opts: measured by callgrind.

[14:09] <Geth> Â¦ MoarVM/frame-opts: review: https://github.com/MoarVM/MoarVM/commit/18654e8c32

[14:10] <Geth> Â¦ MoarVM/frame-opts: e2b8aa10fe | (Jonathan Worthington)++ | 8 files

[14:10] <Geth> Â¦ MoarVM/frame-opts: Avoid having to NULL ->extras on each frame

[14:10] <Geth> Â¦ MoarVM/frame-opts:

[14:10] <Geth> Â¦ MoarVM/frame-opts: By using ->flags instead. This saves us at least one CPU instruction

[14:10] <Geth> Â¦ MoarVM/frame-opts: per call frame creation.

[14:10] <Geth> Â¦ MoarVM/frame-opts: review: https://github.com/MoarVM/MoarVM/commit/e2b8aa10fe

[14:10] <timotimo> i see this latest one is a rebase, i *thought* i had already seen at least one of these commits before

[14:11] <jnthn> I then re-ordered the branch so I could pick out the first commit into master, since it's not really related to what's in the branch at all, and helpful otherwise

[14:21] <timotimo> OK, that makes sense

[14:23] <jnthn> There's something wrong with at least one of the two commits in that branch

[14:23] <jnthn> Going to have a got at https://github.com/rakudo/rakudo/issues/3114 first though

[15:02] <Geth> Â¦ MoarVM: cf3b545e53 | (Jonathan Worthington)++ | 3 files

[15:02] <Geth> Â¦ MoarVM: Reinstate callsite during uninlining

[15:02] <Geth> Â¦ MoarVM:

[15:02] <Geth> Â¦ MoarVM: This fixes the bug in https://github.com/rakudo/rakudo/issues/3114. It's

[15:02] <Geth> Â¦ MoarVM: possible that there may be situations that need a more complete args

[15:02] <Geth> Â¦ MoarVM: processing context too, but for the crash in question this is sufficient.

[15:02] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cf3b545e53

[15:26] *** zakharyas left
[15:39] *** domidumont left
[15:52] *** robertle left
[16:23] *** domidumont joined
[16:23] *** domidumont left
[16:24] *** domidumont joined
[17:00] *** robertle joined
[17:06] *** zakharyas joined
[17:14] *** domidumont left
[17:22] *** domidumont joined
[17:24] *** domidumont left
[18:16] *** domidumont joined
[18:19] *** domidumont left
[18:32] *** Elronnd joined
[18:38] *** zakharyas left
[18:43] *** zakharyas joined
[18:58] *** dogbert17 joined
[19:13] *** zakharyas left
[20:01] <Kaiepi> building moarvm with clang generates 49 warnings on my machine, but i don't really have the time to fix them for a couple weeks

[20:11] <timotimo> surely in part my fault for being a little sloppy with fprint macros

[20:12] *** brrt joined
[20:31] *** MasterDuke joined
[20:33] <Elronnd> even just including the headers generates quite a few warnings

[20:33] <timotimo> can you paste them somewhere?

[20:34] <Elronnd> sure, one sec

[20:34] <Elronnd> a bunch of them are unused static inline functions, which is maybe not much of a concern but would still be nice to do something about

[20:36] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 4 commits pushed by (Bart Wiegmans)++

[20:36] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 61fefa4bd8 | [JIT] Get type object for type-variant opcodes

[20:36] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 2642fe747b | [JIT] Add devirtualization method for REPRs

[20:36] <Geth> Â¦ MoarVM/expr-jit-devirtualize: 793fd5917e | [JIT] Make template destructive flag redundant

[20:36] <Geth> Â¦ MoarVM/expr-jit-devirtualize: ed446c0f93 | [JIT] Remove template destructive flag

[20:36] <Geth> Â¦ MoarVM/expr-jit-devirtualize: review: https://github.com/MoarVM/MoarVM/compare/1c41e276f326...ed446c0f93d4

[20:36] <timotimo> well, if you only include headers, the static inline functions surely won't be used at all

[20:36] <Elronnd> yes

[20:36] <Elronnd> https://0x0.st/zJTV.txt

[21:04] *** lucasb left
[21:17] *** sena_kun left
[21:25] *** japhb left
[21:47] *** japhb joined
[22:44] *** brrt left
