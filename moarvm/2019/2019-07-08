[05:28] *** robertle left
[06:49] *** domidumont joined
[07:02] *** brrt joined
[07:10] *** patrickb joined
[07:17] <brrt> \o

[07:18] <timotimo> o/

[07:18] <nwc10> \o

[07:33] <brrt> I'm debugging the expression JIT code now....

[07:40] <timotimo> what it spits out, or the implementation?

[07:41] *** zakharyas joined
[07:45] *** sena_kun joined
[09:03] *** brrt` joined
[09:04] *** brrt left
[09:06] <brrt`> what it spits out

[09:07] *** brrt` is now known as brrt

[09:08] <timotimo> what does it spit?

[09:10] <brrt> well, it should spit out correct code for lt_n, but it does not

[09:12] <timotimo> at least now we're actually putting in lt_n, not lt_i

[09:22] *** japhb left
[09:40] *** brrt left
[09:49] <timotimo> ISTR somewhere jnthn said that *ref -> * is handled "in code gen", that probably means after the perl6 static optimizer is already done with it

[09:50] <timotimo> so ... perhaps the optimization is a waste anyway?

[09:58] <jnthn> timotimo: Well, maybe not, in so far as I think we need to try and do some analysis of these things in the Perl 6 optimizer

[09:59] <jnthn> Otherwise we can never do lexical => local lowering for natives in any non-trivial case

[09:59] <timotimo> OK, but i don't think the optimization i just put in will do a lot for that

[09:59] <timotimo> i'll push to master, since there's already a release branch

[10:00] <jnthn> OK

[10:00] <jnthn> Well, yeah, we need to do the general analysis there, also to look at the arguments of subs we call with natives to see if there's any `is rw` params (or multis with `is rw` candidates)

[10:00] <jnthn> And if not, we know we can pass the value there

[10:01] *** domidumont left
[10:01] <timotimo> this one is only for assign_i and assign_n

[10:02] <timotimo> though actually no reason not to expand this one it to assign_s

[10:23] *** sena_kun left
[10:23] *** sena_kun joined
[10:24] <timotimo> doesn't appear even once in the core setting :)

[10:24] <timotimo> assign_s or even assign_n

[10:58] *** brrt joined
[11:06] <lizmat> .seen pamplemousse

[11:06] <yoleaux> I saw pamplemousse 3 Jul 2019 16:51Z in #moarvm: <pamplemousse> Thank you all, sorry I didn't catch that sooner

[11:07] * lizmat misses progress reports  :-)

[11:07] <brrt> yeah, pamplemousse said she was going to have a 4th-of-july celebration

[11:08] <lizmat> aha...  !

[11:08] <lizmat> :-)

[11:38] *** domidumont joined
[11:39] *** zakharyas left
[12:12] <brrt> long story short, C compilers are cleverer than NQP compilers...

[12:42] *** brrt left
[13:01] *** brrt joined
[13:06] *** brrt left
[13:15] *** zakharyas joined
[13:25] *** brrt joined
[13:37] *** pamplemousse joined
[14:30] <brrt> \o pamplemousse

[14:30] <pamplemousse> o/ brrt

[14:33] <brrt> pamplemousse: lizmat asked if you had a progress report ready perchance

[14:33] <lizmat> pamplemousse o.

[14:33] <lizmat> indeed  :-)

[14:36] <pamplemousse> I sadly don't have one ready to go quite yet, but I'm actually writing it up now (I had a success this morning and want to update it to include that).

[14:37] <pamplemousse> I'll post a link as soon as I have it done, sorry that it's been a bit.

[14:38] <lizmat> pamplemousse: no problem, better make a good post than a hasty one with errors...

[14:44] *** AlexDaniel left
[14:44] *** AlexDaniel joined
[14:48] <brrt> :-)

[15:30] <lizmat> and yet another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/07/08/2019-27-demythifying/

[15:59] *** zakharyas left
[16:05] *** robertle joined
[16:06] *** patrickb left
[17:22] *** domidumont left
[17:31] *** patrickb joined
[17:58] *** brrt left
[19:07] <samcv> timotimo, can you summarize the confproc?

[19:07] <samcv> *prog

[19:18] <pamplemousse> Progress update is finished! https://yakshavingcream.blogspot.com/2019/07/and-now-for-something-completely.html

[19:38] *** pamplemousse left
[19:40] <timotimo> oh

[19:40] <timotimo> i mean i wrote a blog post about it :D

[19:41] <timotimo> but essentially it's a very limited subset (not a true subset actually, since some of the ops behave differently) of moarvm bytecode, and there's a couple of points in moarvm itself that can be configured (at run time) to run specific parts of that code to make decisions

[19:42] <timotimo> normally, the profiler will start recording the call graph immediately when mvmprofilestart (or what its name is) is called, but with a confprog you can ask it to only start recording a call graph when the confprog says "yes"

[19:42] <timotimo> so you can have your regular program but only profile everything happening inside of "super-interesting-subroutine"

[19:45] *** brrt joined
[19:46] <brrt> pamplemousse++

[19:46] <brrt> and, lizmat++ ofc :-)

[20:04] <jnthn> lizmat++ # weekly

[20:12] *** robertle left
[20:55] <Geth> Â¦ MoarVM/jit-expr-float: 66d72541dd | (Bart Wiegmans)++ | 2 files

[20:55] <Geth> Â¦ MoarVM/jit-expr-float: [JIT] Fix floating point comparisons

[20:55] <Geth> Â¦ MoarVM/jit-expr-float:

[20:55] <Geth> Â¦ MoarVM/jit-expr-float: - cmp_num tile uses the correct input registers

[20:55] <Geth> Â¦ MoarVM/jit-expr-float: - LT, LE must check that the Parity Flag (set if unordered) isn't set

[20:55] <Geth> Â¦ MoarVM/jit-expr-float: review: https://github.com/MoarVM/MoarVM/commit/66d72541dd

[21:01] <MasterDuke> any opinions on whether https://github.com/MoarVM/MoarVM/pull/1133 should be merged ahead of the release?

[21:02] <MasterDuke> oh, nm. only really necessary after i merged the default-int nqp and rakudo prs, and those won't be in the imminent release anyway

[21:32] <Geth> Â¦ MoarVM: bdw++ created pull request #1134: JIT - Floating Point Support for Expression JIT

[21:32] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1134

[21:33] <timotimo> yeeeaaaahh

[21:36] <jnthn> Wow, brrt++

[21:36] <jnthn> Will take a look at that :)

[21:37] <jnthn> I figured we'd have had a relase by now, but since we haven't...I guess we can do a release branch so we can get back to breaking stuff.

[21:37] <brrt> thank you :-) I'm  going to sleep now, so I'll read your reviews  later

[21:38] <jnthn> Rest well o/

[21:38] * jnthn also afk for a while

[21:41] *** patrickb left
[21:42] *** brrt left
[21:43] *** patrickb joined
[21:51] <timotimo> (just a rebase)

[21:51] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: 16 commits pushed by (Timo Paulssen)++

[21:51] <Geth> Â¦ MoarVM/dump_all_heapsnapshot_data: review: https://github.com/MoarVM/MoarVM/compare/02dd01640d32...cbc94bffcd4b

[22:44] *** sena_kun left
[22:46] *** japhb joined
[22:51] *** patrickb left
[22:52] *** AlexDaniel left
[22:53] *** AlexDaniel joined
[23:17] *** jnthn left
[23:18] *** jnthn joined
[23:25] <Kaiepi> P6str's storage spec uses `sizeof(MVMString *) * 8` as its number of bits, but uses `ALIGNOF(void *)` for its alignment

[23:25] <Kaiepi> shouldn't it use ALIGNOF(MVMString *)?

[23:25] <Kaiepi> or is there a reason why void * is used instead

[23:41] <timotimo> i can't think of anything other than "it's usually the same anyway"

