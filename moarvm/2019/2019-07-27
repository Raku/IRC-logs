[00:05] *** pamplemousse joined
[00:22] <timotimo> off to bed o/

[00:23] <dogbert17> good night

[00:46] *** lucasb left
[00:52] <discord6> <timotimo> As I'm lying here trying to fall asleep, it occurs to me that perhaps the nursing thing is a write barrier, I.e. that MVM_ASSIGN should be used to say the type in the guard entry

[00:53] <discord6> <timotimo> The root would be whatever MVMObject it belongs to, which I'm not sure which one that is. Perhaps the frame? But then if it's not on the heap, what happens then...

[00:54] <discord6> <timotimo> Or is return data an actual MVMObject?

[00:54] <discord6> <timotimo> Anyway back to sleep attempts

[01:06] *** pamplemousse_ joined
[01:09] *** pamplemousse left
[01:13] *** pamplemousse_ left
[01:15] *** pamplemousse_ joined
[01:25] *** pamplemousse joined
[01:28] *** pamplemousse_ left
[01:50] *** pamplemousse left
[01:55] *** pamplemousse joined
[02:09] *** pamplemousse left
[05:13] <samcv> ok. time for release

[05:25] <Geth> Â¦ MoarVM/master: 17 commits pushed by (Ben Davies)++, (Stefan Seifert)++, (Jonathan Worthington)++, (Timo Paulssen)++, Altai-man++, (Samantha McVey)++

[05:25] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/2911ec7e405f...2e744a47a2a5

[06:30] *** evalable6 left
[06:30] *** unicodable6 left
[06:30] *** greppable6 left
[06:31] *** coverable6 joined
[06:31] *** greppable6 joined
[06:31] *** notable6 joined
[06:32] *** shareable6 joined
[06:32] *** bloatable6 joined
[06:32] *** bisectable6 joined
[06:32] *** statisfiable6 joined
[06:33] *** undersightable6 joined
[06:33] *** committable6 joined
[06:33] *** nativecallable6 joined
[06:34] *** benchable6 joined
[06:34] *** evalable6 joined
[06:34] *** releasable6 joined
[06:34] *** unicodable6 joined
[06:34] *** reportable6 joined
[06:35] *** squashable6 joined
[06:35] *** quotable6 joined
[08:27] *** chloekek joined
[09:12] <nine> A memset(other->nursery_fromspace, 0, other->nursery_fromspace_size); after GC yields some interesting results. Like a tc->cur_frame->caller->return_value pointing at a zeroed-out object tripping MVM_args_set_result_str

[09:18] <nine> And suddenly I seem to find myself in the same area of code as dogbert17...

[09:32] <nine> I'd be surprised if we didn't have to MVMROOT name and plugin here: https://github.com/MoarVM/MoarVM/blob/master/src/spesh/plugin.c#L20

[09:46] *** brrt joined
[09:52] <brrt> \o

[09:52] <nine> Oooh...the difference is: for me adding MVM_spesh_plugin_guard_list_mark(tc, srd->prev_plugin_guards, srd->prev_num_plugin_guards, worklist); to mark_plugin_sr_data actually fixes the issue!

[09:54] <nwc10> o/

[09:55] <nine> At least in some cases...

[09:55] <brrt> hmmmm

[09:55] <brrt> probably multiple issues then

[09:55] <brrt> congratulations nine :-)

[09:56] <nine> thanks :)

[09:59] *** brrt left
[10:00] <timotimo> nine: yeah, that does look like a place one would usually put an MVMROOT

[10:00] <timotimo> probably difficult to hit as it'll only ever run once (per hll - so twice at most)

[10:01] *** brrt joined
[10:10] *** brrt left
[10:28] <nine> Ouch...it's not just the target frame's return_value that's NULL. The whole target frame is zeroed out

[10:29] <nine> And this happens in: method result_kind()  { $!result_kind }

[10:42] *** MasterDuke joined
[10:46] <MasterDuke> anyone have an idea why `mp_lshd(<mp_int == 20>, 1)` would end up making the mp_int == 23058430092136939520?

[10:52] <dogbert17> nine: very interesting

[10:53] <dogbert17> timotimo: managed got get a stack trace from the 'last GC' before failure

[10:53] <dogbert17> s/got/to/ # need coffee

[10:53] * dogbert17 fixes the coffee bug by decisive action

[10:57] <dogbert17> timotimo: the stack trace from the last GC before the failure - https://gist.github.com/dogbert17/42f07a578df5c05c166c2e77651c0da2

[11:01] *** sena_kun joined
[11:11] <nine> God damn it C! Macros that look like function calls are devious. The segfault I traced was in autobox(tc, target, result, str_box_type, 1, set_str, target->return_value->o); which is not a function call but a macro. So the segfault didn't actually occur in this line but in the expanded macro.

[11:11] <nine> And of course the macro gives an opportunity for GC and thus for target to move _before_ target->return_value->o is actually evaluated

[11:13] <dogbert17> nine++, you're finding bugs at breakneck speed

[11:19] *** ggoebel_ joined
[11:44] <Geth> Â¦ MoarVM: 0a12e3c4e3 | (Stefan Seifert)++ | src/6model/reprs/ConcBlockingQueue.c

[11:44] <Geth> Â¦ MoarVM: Fix ConcBlockingQueue possibly unshifting an outdated item pointer

[11:44] <Geth> Â¦ MoarVM:

[11:44] <Geth> Â¦ MoarVM: An untimely GC may move to_add after we already wrote it to the newly created

[11:44] <Geth> Â¦ MoarVM: MVMConcBlockingQueueNode's value but before we add that node to the queue.

[11:44] <Geth> Â¦ MoarVM: Move the assignment down to match push's implementation which does it right.

[11:44] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0a12e3c4e3

[11:44] <Geth> Â¦ MoarVM: f18bfadbe8 | (Stefan Seifert)++ | src/spesh/plugin.c

[11:44] <Geth> Â¦ MoarVM: Add missing MVMROOT in MVM_spesh_plugin_register

[11:44] <Geth> Â¦ MoarVM:

[11:44] <Geth> Â¦ MoarVM: name and plugin could be moved by the GC before we add them to spesh_plugins

[11:44] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f18bfadbe8

[11:44] <Geth> Â¦ MoarVM: 4ab1d425e1 | (Stefan Seifert)++ | src/core/args.c

[11:44] <Geth> Â¦ MoarVM: Fix autobox possibly writing to an outdated target

[11:44] <Geth> Â¦ MoarVM:

[11:44] <Geth> Â¦ MoarVM: Since autobox is a macro, the target argument is not evaluated at the place of

[11:44] <Geth> Â¦ MoarVM: the call but in the expanded code. That happens only after allocating, so the

[11:44] <Geth> Â¦ MoarVM: GC may have already moved the target frame. Avoid this by forgoing the local

[11:44] <Geth> Â¦ MoarVM: variable and accessing tc->cur_frame->caller again instead as that will have

[11:44] <Geth> Â¦ MoarVM: been updated.

[11:44] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4ab1d425e1

[11:44] <nine> dogbert17: maybe these help with your issue as well?

[11:47] *** robertle joined
[11:51] <dogbert17> nine: will test immediately :)

[11:57] <nine> Though zeroing out the past fromspace helped with uncovering these issues, there is a snag with it: we actually don't free STables during GC, but do so in the next run. I.e. we actually keep using objects from the past fromspace.

[12:01] <dogbert17> heh

[12:06] <dogbert17> I wonder if there are any GC related bugs left now

[12:10] <nine> I'd bet there are ;)

[12:16] <nine> I wonder if it'd still be worth it to memset everything but those STables

[12:17] <dogbert17> if it makes it easier to find bugs then some kind of option/flag to do that might be handy

[12:18] <nine> Yeah, I figured I would hide that memset behind MVM_GC_DEBUG anyway. So I may as well make it a little more involved

[12:20] *** ggoebel_ left
[12:29] <dogbert17> unfortunately the bug in t/spec/S12-meta/primitives.t is still present

[12:30] <dogbert17> probably a good test for your zeroing logic

[12:40] *** ggoebel_ joined
[12:58] *** brrt joined
[13:02] <brrt> \o

[13:16] <dogbert17> hi brrt

[13:22] <brrt> hi dogbert17

[13:22] *** brrt` joined
[13:26] *** brrt left
[13:27] <brrt`> nine++ fugbixing

[13:32] *** brrt` left
[13:34] *** lucasb joined
[14:06] *** brrt` joined
[14:07] <nine> I now get only a few failures with the zeroed-out fromspace (except for those STables). All of them seem to be related to hashes

[14:13] *** brrt` left
[14:13] *** brrt` joined
[14:21] <dogbert17> interesting

[15:05] *** brrt` left
[15:16] <nine> BigInt operations are a real treasure trove of GC issues!

[15:18] <nine> MVMP6bigintBody is inlined into MVMP6bigint, so even though it's not an MVMObject itself, it can get moved! While those bigint ops are MVMROOTing the bigint objects, they rarely take care to get the body's new address

[15:20] <timotimo> oh damn

[15:20] <timotimo> that's a good one

[15:21] <timotimo> and sounds rather dangerous

[15:22] <nine> (Poisoning nursery_fromspace)++

[15:26] <Geth> Â¦ MoarVM: a001b7e4c7 | (Stefan Seifert)++ | src/math/bigintops.c

[15:26] <Geth> Â¦ MoarVM: Fix many memory corruption issues in bigint operations

[15:26] <Geth> Â¦ MoarVM:

[15:26] <Geth> Â¦ MoarVM: MVMP6bigintBody is inlined into MVMP6bigint, so even though it's not an

[15:26] <Geth> Â¦ MoarVM: MVMObject itself, it can get moved. While those bigint ops were MVMROOTing the

[15:26] <Geth> Â¦ MoarVM: bigint objects, they rarely took care of getting the body's new address.

[15:26] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a001b7e4c7

[15:28] <timotimo> good eye

[15:28] <timotimo> bummer we *just* released :)

[15:28] <dogbert17> hello timotimo

[15:30] <dogbert17> I have gotten hold of the information you requested - https://gist.github.com/dogbert17/81c3aa3aebee34c594c9b8abf6034b78

[15:31] <timotimo> why does the backtrace look so strange :)

[15:32] <dogbert17> I had to use some hacks

[15:33] <timotimo> i should have suggested to just break on MVM_gc_enter_from_allocator and use "commands", "bt", "c", "end"

[15:33] <timotimo> and then "set pagination off"

[15:34] <timotimo> then it'd just have given a gdb backtrace for every gc run

[15:34] <timotimo> and you would just have had to look at the last one

[15:34] <dogbert17> my suspicions goes toward call_resolver - https://github.com/MoarVM/MoarVM/blob/master/src/spesh/plugin.c#L401

[15:34] <dogbert17> clever idea

[15:36] <dogbert17> it calls setup_for_guard_recording can trigger a GC so what happens then to plugin_guards stuff?

[15:37] <dogbert17> *which can trigger

[15:39] <timotimo> i think the plugin_guards thing isn't a gc-moveable, it just contains a bunch of pointers that can move inside of it

[15:39] <timotimo> and the tc roots should take care of that

[15:39] <timotimo> but i can still overlook something

[15:39] <timotimo> i don't know what MVM_frame_special_return does exactly, can it trigger gc?

[15:41] <nine> IIRC it cannot

[15:41] <timotimo> in that case that function could be fine

[15:42] <dogbert17> at the start of call_resolver tc->plugin_guards are saved in some locals which are later in the function assigned to srd->prev_plugin_guards

[15:42] <dogbert17> I thought it had something to do with that but I'm probably mistaken

[15:42] <timotimo> prev_plugin_guards gets rooted for the setup_for_guard_recording call

[15:42] <nine> Oh boy.... with poisoning and a tiny nursery one doesn't have to look for bigints to find GC issues. They are there even in basic argument processing

[15:42] <timotimo> i think that's the only place in there that can allocate

[15:43] <timotimo> nine: wow, that sounds promising

[15:43] <dogbert17> I believe so too

[15:43] <nine> params is inlined in MVMFrame, so params can move. It's address is passed to _all_ param processing functions

[15:44] <dogbert17> shouldn't stuff like that crash all the time?

[15:44] <nine> Basically all of args.c is broken

[15:45] <timotimo> i think because params is used read-only for most cases, it's usually fine?

[15:45] <nine> dogbert17: it does with the tiny nursery and a poisoned fromspace. Nothing passes anymore

[15:46] <dogbert17> quite the debug tool you have there :)

[15:46] <dogbert17> "Basically all of args.c is broken" - quote of the day

[15:52] <timotimo> definitely still good to fix, in any case

[15:54] *** domidumont joined
[15:59] *** domidumont left
[16:01] <nine> On a closer look, it's not as bad as I feared. Most functions in args.c only access ctx before GC can happen (if it does at all)

[16:01] <timotimo> well, that's good

[16:13] <dogbert17> timotimo: can you explain this, added check code to lines 402 and 413 - https://gist.github.com/dogbert17/753155d32985ead030d07914c8b11657

[16:36] *** ggoebel_ left
[16:37] <timotimo> can you check if the GC run there was a minor or major collection?

[16:41] <timotimo> if it's a minor collection, it's possible that the data is only reachable via the gen2, so a missing gen2 root could be the issue

[16:41] <timotimo> if it's a minor collection, then there's a missing path via marking

[16:41] <timotimo> the valgrind gdbserver thingie has a "find pointers to this address" command

[16:41] <timotimo> that could be very interesting

[16:46] <nine> Oh, capturenamedshash actually uses MVM_args_slurpy_named, too and here ctx is not just tc->cur_frame->params

[16:47] <timotimo> yeah it's for when you get an actual capture object with something like nqp::usecapture

[16:48] <timotimo> i think?

[16:53] <nine> Ah, so much passing :)

[17:00] <MasterDuke> nine: did you see my comment on https://github.com/MoarVM/MoarVM/commit/a001b7e4c7 ?

[17:05] <timotimo> bb is used a few lines lower, though

[17:05] <timotimo> for the quick path "return a"

[17:06] <nine> MasterDuke: just answered

[17:08] <MasterDuke> nine, timotimo: ah, but the `bb = get_bigint_body(tc, b);` needs to be repeated because 580 could have caused a GC and bb to move?

[17:08] <MasterDuke> *b to move

[17:10] <nine> yes

[17:11] <Geth> Â¦ MoarVM: 64a6f69c92 | (Stefan Seifert)++ | src/core/exceptions.c

[17:11] <Geth> Â¦ MoarVM: Fix possible invalid memory access when throwing exceptions

[17:11] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/64a6f69c92

[17:17] *** domidumont joined
[17:22] <Geth> Â¦ MoarVM: e78080f67d | (Stefan Seifert)++ | src/strings/ops.c

[17:22] <Geth> Â¦ MoarVM: Fix possible access to fromspace in final_strand_match_with_repetition_count

[17:22] <Geth> Â¦ MoarVM:

[17:22] <Geth> Â¦ MoarVM: string_from_strand_at_index will allocate, so a and b may have moved even while

[17:22] <Geth> Â¦ MoarVM: the arguments to MVM_string_equal were evaluated.

[17:22] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e78080f67d

[17:23] <nine> dogbert17: you worried about running out of GC issues? :D

[17:25] <sena_kun> nine++ # so many awesome fixes

[17:35] <Geth> Â¦ MoarVM: e0bc6e2f1c | (Stefan Seifert)++ | 4 files

[17:35] <Geth> Â¦ MoarVM: Fix slurpy arg handling possibly accessing an outdated arg context

[17:35] <Geth> Â¦ MoarVM:

[17:35] <Geth> Â¦ MoarVM: The arg context is inlined into the frame, so even though its not an

[17:35] <Geth> Â¦ MoarVM: MVMCollectable itself it may move during GC.

[17:35] <Geth> Â¦ MoarVM:

[17:35] <Geth> Â¦ MoarVM: MVM_args_slurpy_named has 2 callers. For param_sn we want to access

[17:35] <Geth> Â¦ MoarVM: tc->cur_frame->params directly as that's gonna be up to date. The call capture

[17:35] <Geth> Â¦ MoarVM: in capturenamedshash does not inline the arg context, so we can use what we

[17:35] <Geth> Â¦ MoarVM: get passed without problems.

[17:35] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e0bc6e2f1c

[17:40] <nine> There's quite a bit more to fix. Alas, dinner's almost ready and I promised a board game evening to my wife, so those fixes will have to wait.

[17:40] <dogbert17> nine++, awesome fixes

[17:48] <dogbert17> timotimo: it's a minor collection

[19:04] *** domidumont left
[19:05] *** domidumont joined
[19:25] *** domidumont left
[20:00] <Kaiepi> how does MVM_UNLIKELY work? just ran into a case where code didn't work without it, but does with it

[20:01] <jnthn> That shouldn't happen... It's just a compiler hint about whether the branch is likely to be taken or not

[20:06] <Kaiepi> oh nvm, i was expecting it to invert whatever you passed to it

[20:29] <Kaiepi> when are you supposed to use MVM_UNLIKELY?

[20:29] <timotimo> when the code is hot and you're certain you know the outcome in the vast majority of cases

[20:32] <timotimo> usually type checks that end in an exception are a good place to put an UNLIKELY

[20:36] <Kaiepi> wdym by the code is hot?

[20:36] <timotimo> is potentially executed lots of times per second

[20:37] <timotimo> it's not worth much to put an MVM_UNLIKELY in a spot that'll only be run once a second or so

[20:37] <Kaiepi> oh, ok

[20:37] <Kaiepi> thanks

[20:47] <Geth> Â¦ MoarVM: 6730e51f92 | (Stefan Seifert)++ | src/strings/ops.c

[20:47] <Geth> Â¦ MoarVM: Fix possible access to fromspace in knuth_morris_pratt_string_index

[20:47] <Geth> Â¦ MoarVM:

[20:47] <Geth> Â¦ MoarVM: collapse_strands may allocate, so we need to keep Haystack updated

[20:47] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6730e51f92

[20:50] *** chloekek left
[21:05] <Geth> Â¦ MoarVM: 07f6305f45 | (Stefan Seifert)++ | src/strings/ops.c

[21:05] <Geth> Â¦ MoarVM: Fix possible access to fromspace in string_index_ignore_case

[21:05] <Geth> Â¦ MoarVM:

[21:05] <Geth> Â¦ MoarVM: We already correctly root Haystack but were assigning it to Hs_or_gic before

[21:05] <Geth> Â¦ MoarVM: that, so that one could have been outdated. Move Hs_or_gic's initialization to

[21:05] <Geth> Â¦ MoarVM: a place where Haystack is already stable.

[21:05] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/07f6305f45

[21:08] <Geth> Â¦ MoarVM: ca9d44f2ea | (Stefan Seifert)++ | src/6model/reprconv.c

[21:08] <Geth> Â¦ MoarVM: Fix possible access to fromspace in MVM_repr_dimensions

[21:08] <Geth> Â¦ MoarVM:

[21:08] <Geth> Â¦ MoarVM: Allocating the result array can cause GC which may move obj, so move the

[21:08] <Geth> Â¦ MoarVM: allocation after the call to the repr function. We don't need it that early

[21:08] <Geth> Â¦ MoarVM: anyway.

[21:08] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ca9d44f2ea

[21:08] <timotimo> anything in MVM_hll_map that could have been fixed recently?

[21:09] <nine> not by me

[21:12] <timotimo> the moarvm heapanalyzer is able to b0rk with my new format stuff

[21:18] <timotimo> huh, it's trying to read from a CArray via a nativeref after the carray has already been GC'd

[21:18] <timotimo> that's not good

[21:22] <timotimo> and valgrind itself apparently segfaulted, too

[21:25] *** squashable6 left
[21:27] *** squashable6 joined
[22:17] *** squashable6 left
[22:18] <Geth> Â¦ MoarVM: 8f425147a8 | (Samantha McVey)++ | 4 files

[22:18] <Geth> Â¦ MoarVM: Update Unicode to 12.1

[22:18] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8f425147a8

[22:19] <lizmat> samcv++

[22:21] *** squashable6 joined
[22:22] *** squashable6 left
[22:22] *** squashable6 joined
[22:28] *** squashable6 left
[22:29] *** squashable6 joined
[22:57] <MasterDuke> i have a rough translation of the Barrett stringification code into non-optimized C

[22:59] <MasterDuke> it's still the recursive version with some string manipulation, but perf says the vast majority of the time is spent in libtommath multiplying numbers, so it doesn't seem like an optimized version would make a great difference

[23:01] <MasterDuke> to stringify 2**1_000_000, rakudo right now takes 57s, a pure perl6 version of the algorithm takes 3.3s, and the C version takes 2.7s

[23:03] <timotimo> a million, that's pretty far out there

[23:03] <timotimo> when do they break even?

[23:08] <MasterDuke> pretty low. i can't measure too precisely, since there is some overhead in my timing of plain ~, but the C version seems just as fast even for tiny numbers, e.g., 2**6

[23:10] <timotimo> brilliant

[23:12] <MasterDuke> timotimo: https://gist.github.com/MasterDuke17/956999b54093258f4a7e616a00d95ac2

[23:13] <timotimo> i wonder if the code could sensibly re-use mp_int structs

[23:14] <timotimo> i don't see any function calls to free mp_int structs

[23:15] <MasterDuke> the code would need to be cleaned up and made to handle negative numbers for sure before it's used, but yeah, there are some optimizations to be had

[23:16] <timotimo> unfortunately, i'm not sure that's an optimization :) :)

[23:16] <MasterDuke> like you and the guy in the mailing list mentioned, a non-recursive version would make sense

[23:18] <timotimo> i don't claim to have come up with that :)

[23:27] * jnthn is happy to see all the nice work going on :)

[23:28] <timotimo> so right after the release we'll have to tell people "oh yeah go with latest master moarvm, the released one is full of crashes" :P

[23:28] <timotimo> to be fair, the crashes mostly need a fair amount of artificial pressure to be applied to the GC

[23:28] <AlexDaniel> jnthn: obligatory ping: https://github.com/rakudo/rakudo/issues/3084#issuecomment-515720444 :)

[23:29] <AlexDaniel> although that's a pretty old bug :)

[23:29] <AlexDaniel> timotimo: speaking of the releaseâ¦

[23:29] <AlexDaniel> what's up with https://github.com/rakudo/rakudo/issues/3063 ?

[23:30] <AlexDaniel> some people can reproduce it, some can't. I'm not even sure what the right steps are

[23:30] <timotimo> what the heck?

[23:30] <jnthn> AlexDaniel: huh, that's...a weird one, since it's just adding debug names, I think?

[23:30] <timotimo> but turn on RAKUDO_MODULE_DEBUG or what it's called

[23:30] <timotimo> that could be interesting

[23:31] <jnthn> AlexDaniel: I'm in theory on vacation next week, and then it's PerlCon the week after, so I'm not sure I'll get to investigate it terribly soon.

[23:31] <timotimo> oh

[23:31] <timotimo> the last comment in there has something interesting to say

[23:32] <timotimo> no clue what's up with that

[23:32] <AlexDaniel> jnthn: yeah, could it be this? https://github.com/perl6/nqp/commit/a5232c5e99086ecffcd888e23f22e01f31b91057

[23:32] <timotimo> where do all the "omfg not a git repo" outputs come from

[23:32] <AlexDaniel> that's the only commit that does somethingâ¦

[23:32] <timotimo> is this a difference between from git clone and from release tarball?

[23:32] <AlexDaniel> but I did confirm that that's the right bump:

[23:32] <AlexDaniel> c: 34942c8597d^,34942c8597d use lib "sandbox/for-perl6-bug/lib"; my $aplugin = do { require ::("APlugin"); ::("APlugin"); }; say $aplugin.new.trycall();

[23:32] <committable6> AlexDaniel, https://gist.github.com/3fdff0b768e86aa0ab543d069ddd4baf

[23:33] <AlexDaniel> timotimo: yes, and it's fixed for the point release

[23:33] <timotimo> ok cool

[23:33] <jnthn> AlexDaniel: Feasibly, but it's odd nothing would have tripped over it before now if it were wrong...that's an extremely common code path.

[23:35] <MasterDuke> heh. even the C version took 6m11s to stringify 2**10_000_000 (which, if anyone is curious, has 3,010,300 digits)

[23:35] <jnthn> And I've certainly got no idea what to do about it if it is to blame without having a much closer look

[23:35] <timotimo> i assume the previous implementation we had would take upwards of an hour for that? ;)

[23:36] <MasterDuke> i'm not going to punish my laptop by even trying

[23:37] <AlexDaniel> MasterDuke: what about trying the same in other languages? :)

[23:38] <AlexDaniel> well, not that large one, but simply benchmarking

[23:43] <timotimo> does the algorithm in question parallelize at all?

[23:44] <timotimo> it recurses in two parts, which sounds like "yes, in theory it could"

[23:44] <timotimo> but who knows what the overhead would be

[23:46] <MasterDuke> for 2**300000, perl 5 takes 6.2s with 'use bigint', perl 6 takes 5.3s, python(2|3) takes 0.2s, ruby takes 0.07s

[23:47] <timotimo> that perl 6 figure is with what we have in master?

[23:47] <MasterDuke> yeah

[23:48] <AlexDaniel> so what do they use in ruby? :)

[23:48] <MasterDuke> for 2**1000000, python(2|3) takes 1.5s, ruby takes 0.1s

[23:49] <timotimo> should just Proc::Async ruby if it's installed :P

[23:49] <MasterDuke> so they're significantly faster than even my C version of the Barrett algorithm, which takes 2.7s

[23:49] <timotimo> does perf point out what functions it's spending its time in?

[23:50] <MasterDuke> i've just been counting chars, not printing them. maybe they have an optimization for that

[23:50] <timotimo> ah, possible

[23:50] <MasterDuke> timotimo:

[23:50] <timotimo> can try getting the first and last 10 chars or something

[23:50] <timotimo> that'd be unlikely to be optimized a lot

[23:50] <MasterDuke> timotimo: s_mp_mul_digs

[23:51] <MasterDuke> 82%

[23:51] <timotimo> that's for ruby?

[23:51] <MasterDuke> no, my c coe

[23:51] <MasterDuke> *code

[23:52] <MasterDuke> for ruby the top is __gmpn_mul_basecase, at 12%

[23:54] <MasterDuke> heh, for python3 it's 0x00000000001c2f30 at 12% and 0x00000000001c2f29 at 11%

[23:54] <timotimo> hm, is that gnu gmp?

[23:54] <MasterDuke> for ruby? i would assume so

[23:55] <MasterDuke> https://bugs.ruby-lang.org/issues/8796

[23:55] <timotimo> FWIW, if i'm looking correctly, getting only the first n chars of a biiiiig number should be pretty fast with barett?

[23:57] <MasterDuke> i think so

[23:57] <timotimo> i wonder if that ever comes up in user code, like at all

[23:58] <AlexDaniel> ah crap

[23:59] <AlexDaniel> I think rakudo fails to configure if you have ( in its path

