[00:26] *** reportable6 left
[00:26] *** releasable6 left
[00:26] *** shareable6 left
[00:26] *** squashable6 left
[00:26] *** bloatable6 joined
[00:26] <timotimo> it would be cool if we could somehow vectorize the validator at least a little bit

[00:26] *** reportable6 joined
[00:27] *** squashable6 joined
[00:27] *** benchable6 joined
[00:27] *** quotable6 joined
[00:27] <timotimo> the bytecode validator

[00:27] *** evalable6 joined
[00:27] *** notable6 joined
[00:28] *** releasable6 joined
[00:28] *** unicodable6 joined
[00:29] *** greppable6 joined
[00:30] *** shareable6 joined
[00:30] *** committable6 joined
[00:30] *** coverable6 joined
[00:30] *** nativecallable6 joined
[00:30] *** statisfiable6 joined
[00:31] *** tellable6 joined
[00:42] <timotimo> seems to be just a little faster to go through the input string once to decide whether to do 32bit or 8bit writing up front in the latin1 decoder

[00:42] <timotimo> at least in terms of startup time for the "say 0.1+0.2-0.3" test case

[00:44] <timotimo> my naive assumption is that fetching the entire input string once up front and doing a cheap calculation on it is entirely blocked on getting the data

[00:44] <timotimo> except i break off early if i find a single outside-of-ascii character

[00:44] *** ggoebel joined
[01:01] <timotimo> i somehow totally broke it, though

[01:04] *** hoelzro left
[01:20] *** lucasb left
[04:16] *** ZzZombo_ joined
[04:20] *** ZzZombo left
[04:20] *** ZzZombo_ is now known as ZzZombo

[04:35] *** ZzZombo_ joined
[04:38] *** ZzZombo left
[04:38] *** ZzZombo_ is now known as ZzZombo

[06:28] *** domidumont joined
[07:26] *** brrt joined
[07:26] <brrt> \o

[07:26] <brrt> lizmat: rurban cannot, in fact, elaborate on why the expression JIT is horrible

[07:27] <brrt> (I should rather say, has never been able to elaborate)

[07:27] <nwc10> o/

[07:27] <brrt> ohai nwc10

[08:19] *** brrt left
[08:24] *** sena_kun joined
[09:01] *** brrt joined
[09:58] <jnthn> brrt: I would ignore him; by this point I tend to take his disagreeing with something I'm doing as a sign that I'm doing it right. :)

[10:00] <nwc10> That reminds me, but I'm not sure if I should name the other person who has said pretty much exactly that.

[10:01] <brrt> :-)

[10:02] <nwc10> It wasn't djb: https://twitter.com/hashbreaker/status/795990395490603009

[10:12] <brrt> hmm, who here renembers what test case was failing when we added the sp_bind_o expr JIT

[10:12] * nwc10 does not, but assuming that it was reverted, surely git should remember for us

[10:13] <nwc10> ahd if the commit doesn't say, then it's LTA

[10:17] <brrt> 'twas reverted yes

[10:18] *** patrickb joined
[10:19] <brrt> I see the revert but the commit msg doesn't specify the test case

[10:19] <brrt> oh well

[10:19] <nwc10> naughty human!

[10:19] <nwc10> (whoever it was)

[10:19] <nwc10> and I"m purposefully not looking

[10:21] <brrt> hehe

[10:31] <Guest13443> brrt: https://colabti.org/irclogger/irclogger_log/moarvm?date=2019-09-15

[10:34] <Guest13443> more specifically: https://colabti.org/irclogger/irclogger_log/moarvm?date=2019-09-15#l416

[10:35] <Guest13443> brrt | nine: can you replicate the/an issue with t/spec/S32-temporal/DateTime.t ?

[10:37] *** sena_kun left
[10:37] <brrt> thank you

[10:38] *** sena_kun joined
[10:38] <brrt> hmm,

[10:38] <brrt> that doesn't fail now :-(

[10:51] <timotimo> hilarious

[10:53] <Guest13443> brrt: perhaps you need a smaller nursery

[11:04] <brrt> oh, yeah, that

[11:04] <brrt> ok, let's try

[11:05] <brrt> all tests succesful :-(

[11:06] <timotimo> hey brrt

[11:07] <brrt> hey timotimo

[11:07] <brrt> the thing I like least about MoarVM work is the heisenbugs

[11:07] <brrt> timotimo: it is in fact, the sp_p6oget_bi that breaks the test

[11:07] <timotimo> MVM_jit_tile_state_lookup is relatively high up on the list when sorted by "self", is there anything obviously optimizable about it? or is it perhaps going to be made replaced at some point?

[11:08] <brrt> let me see about that

[11:09] <nwc10> brrt: I don't get "it is in fact, the sp_p6oget_bi that breaks the test" - does this mean that sp_p6oget_bi is buggy, but one doesn't get to hit *that* bug unless sp_bind_o can be JITted?

[11:09] <timotimo> out of the 830.9mil cycles estimated, 120mil are inclusive in MVM_jit_compile_graph, 113.9mil inclusive in MVM_jit_compile_expr_tree

[11:09] <timotimo> this is for "perl6 -e 'say 0.1+0.2-0.3'

[11:09] <brrt> it means that sp_p6oget_bi needs to be in the set, before there's an error

[11:09] <timotimo> "

[11:09] <brrt> oh, that's actually quite a bit

[11:10] <timotimo> it's not so bad, since it's on a separate thread

[11:10] <brrt> a oneliner is kind of a worst-case scenario

[11:10] <brrt> for the JIT

[11:10] <brrt> but

[11:10] <brrt> still

[11:10] <timotimo> yeah

[11:10] <brrt> I hadn't excpected

[11:10] <timotimo> with spesh disabled it's just below 500mil cycles

[11:11] <timotimo> are you interested in a screenshot of the "all callees" of MVM_jit_compile_graph as kcachegrind shows it?

[11:11] <timotimo> or maybe just the callgrind output file

[11:11] <timotimo> though the line numbers in the source code view won't resolve i don't think

[11:13] <brrt> interested, yes

[11:13] <brrt> I'm not sure I can do something actionable, but sure, interested

[11:13] <brrt> so, MVM_jit_tile_state_lookup is a binary search

[11:13] <brrt> we could change that into a hash lookup

[11:13] <brrt> we could even change that into a perfect hash lookup, since we know the full set of legal keys

[11:13] <discord6> <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/634348370030231552/unknown.png

[11:14] <timotimo> that'll have to become a whole lot faster if it's to make a big difference

[11:15] <brrt> actually, 15 million cycles, whereas tree traversal takes 60 million cycles?

[11:15] <brrt> inclusive

[11:15] <timotimo> right

[11:15] <brrt> oh, we're interested in the self

[11:15] <timotimo> i just thought "state lookup sounds cheaper than how much it costs hear"

[11:16] <timotimo> i don't actually know what each function does

[11:16] <brrt> yeah, it should be cheap, that's the thing

[11:16] <timotimo> so in the source code view i can see which it takes most often

[11:17] <timotimo> but it's probably not that interesting

[11:17] <timotimo> it's the second-to-last else-if, fwiw

[11:17] <timotimo> 4.4mil hits on mid = (top + bottom) / 2, 1.7mil hits on "mid = (top + bottom / 2)" in the last else-if

[11:18] <timotimo> of course since i don't know how exactly all this is compiled, it might not actually say much :)

[11:19] <timotimo> surely factoring out the mid = top + bottom / 2 out of the if/else-if won't make a difference when we're already compiling with optimizations

[11:21] <brrt> I'd think not

[11:21] <brrt> so, perfect hash function, is what I'm thinking

[11:21] <brrt> now I need to study and figure out how these work :-D

[11:21] <timotimo> yesterday i was looking if there's any perfect hash function thingie i can just run in the browser

[11:22] <brrt> maybe there's a CPAN module

[11:23] <timotimo> y u no perfect hashing irc bot

[11:28] <timotimo> if you figure out perfect hashing, maybe you can also use it for MVM_op_get_mark

[11:29] <timotimo> i made that a bunch faster by turning it into a two layers deep nested if

[11:30] <timotimo> it's still got 4.7mil in that test case

[11:30] <timotimo> (all from the bytecode validator)

[11:47] <brrt> bug found in the expr jit precompiler

[11:47] <brrt> the tl;dr - macros can't return flags according to the type checker, that's no good

[11:49] <brrt> in other news, I'm sort-of seriously considering using raku for a new project

[11:50] <nwc10> on the JVM where no-one will notice?

[11:50] <nwc10> until it's too late :-)

[11:51] <timotimo> so the flag value probably got lost when including the template result in the tree?

[11:57] <brrt> i think that's why you chose to have the ^bigint_is_smallint macro return a flagval, rather than just the 'eq'

[11:58] <brrt> and it may be the case that `flagval` returns a 1 byte value, that has to be explicitly upcast

[11:59] <timotimo> in any case there's a fix coming :)

[12:01] <timotimo> or at least that's my interpretation of the issue

[12:02] <brrt> stuff is a hypothesis at this stage

[12:04] *** sena_kun left
[12:05] <brrt> wikipedia has articles

[12:05] <brrt> but I already see mod... and if there's any thing I know, it's that div is sloooow

[12:06] <timotimo> oh, you're talking about perfect hashing?

[12:09] <brrt> as well.... i'm not very focussed

[12:09] <brrt> I'm waiting for a big compile job at $work

[12:10] *** sena_kun joined
[12:10] *** ggoebel left
[12:13] <brrt> ok, so, wanna know the problem

[12:13] <brrt> (the subproblem, I don't claim to have solved the greater test-failure problem yet)

[12:14] <timotimo> ha

[12:14] <brrt> - we must link declarations ('let:') syntax before applying macros, because otherwise macros could introduce naming conflicts

[12:15] <brrt> - in order to link declarations, we need to transform the 'let:' node into either a 'do' or 'dov' node

[12:15] <brrt> - in order to choose between those, we need to find out the type of the last expression

[12:16] <brrt> - in order to do that, we walk the tree, but we don't know what the macro's resolve to, so we assume they are registers

[12:16] <brrt> - that means that 'if' sees a register when it expects a flag

[12:16] <brrt> maybe there is a simple dumb fix that will make progress...

[12:17] <timotimo> mhhh

[12:18] <brrt> this could be resovled if we differentiate syntactically between 'let-yielding-value' and 'let-void'

[12:20] <brrt> which looks increasingly like the right way to go....

[12:33] *** lucasb joined
[12:34] <brrt> ok, that makes it compile again, at least

[12:41] <Geth> ¦ MoarVM: 76cd034ae3 | (Bart Wiegmans)++ | 2 files

[12:41] <Geth> ¦ MoarVM: [JIT] Syntactically distinguish let keyword variants

[12:41] <Geth> ¦ MoarVM:

[12:41] <Geth> ¦ MoarVM: The 'let' keyword expands to a 'do' or 'dov' list of declarations,

[12:41] <Geth> ¦ MoarVM: depending on whether the last statement returns a value or not.

[12:41] <Geth> ¦ MoarVM: However, we need to expand declaration references before applying

[12:41] <Geth> ¦ MoarVM: macros, because macro application could theoretically introduce name

[12:41] <Geth> ¦ MoarVM: conflicts otherwise. Hence, type-checking the 'let' expression during

[12:41] <Geth> ¦ MoarVM: declaration linking isn't actually possible, because we don't know the

[12:41] <Geth> ¦ MoarVM: types of macro expressions. Instead, introduce the syntactic variant

[12:41] <Geth> ¦ MoarVM: 'letv' that makes the result type explicit.

[12:41] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/76cd034ae3

[12:41] <Geth> ¦ MoarVM: 27dcb378ef | (Bart Wiegmans)++ | src/jit/core_templates.expr

[12:41] <Geth> ¦ MoarVM: Revert "The exprjit of sp_bind_o caused wrongness"

[12:41] <Geth> ¦ MoarVM:

[12:41] <Geth> ¦ MoarVM: This reverts commit 72befa1647f732705998ae4d9d2dfdc796b34f21.

[12:41] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/27dcb378ef

[12:41] <Geth> ¦ MoarVM: 91d53ae7f4 | (Bart Wiegmans)++ | 2 files

[12:41] <Geth> ¦ MoarVM: Revert "Revert "exprjit sp_p6oget_bi""

[12:42] <Geth> ¦ MoarVM:

[12:42] <Geth> ¦ MoarVM: This reverts commit 986e05beab2845ec5e29672aadb739170a645e17.

[12:42] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/91d53ae7f4

[12:42] <brrt> hang on, didn't mean to push those :-o

[12:42] <brrt> gimme a sec

[12:44] <brrt> I can't force-push the commits away because master is protected

[12:44] <brrt> timotimo: can you force-push or revert the last two commits?

[13:01] <Guest13443> brrt: did you just fix the sp_bind bug ?

[13:09] <Guest13443> never mind, the bug in t/spec/S32-temporal/DateTime.t is still present

[13:13] <brrt> no, did ot

[13:13] <brrt> did not fix it

[13:13] <brrt> but both those templates look very correct

[13:22] <Guest13443> brrt: removing the sp_p6oget_bi template from src/jit/core_templates.expr 'fixes' the problem

[13:22] <brrt> yes, I know

[13:22] <brrt> but what I don't know, yet, is why

[13:25] <Guest13443> a genuine mystery then

[13:27] <brrt> we'll figure it out

[13:32] <Guest13443> anything I can do to help except cheering you on?

[13:32] <brrt> if you have a theory on why jit-bisect gives such wildly wrong answers...

[13:40] <Guest13443> Can a golf help out here?

[13:40] <Guest13443> or do you have one already?

[13:41] <Guest13443> ./perl6-m -e 'say DateTime.new("2016-12-31T23:59:60Z") <=> DateTime.new("2017-01-01T00:59:60+01:00") for ^100'

[13:41] *** sena_kun left
[13:42] *** patrickb left
[13:44] *** patrickb joined
[13:46] <brrt> Guest13443: what's wrong with that?

[13:46] <brrt> a golf would help, yes

[13:46] <brrt> is that broken?

[13:47] <brrt> hoooh, that's very broken

[13:47] <Guest13443> might possibly help

[13:47] <brrt> it's a lead

[13:47] <brrt> thanks

[13:47] <Guest13443> np

[13:55] <Guest13443> is jnthn lurking around by any chance?

[13:58] <brrt> negative offset for dynamic label, oh no

[13:59] <Guest13443> oh, you found something

[13:59] <brrt> yeah, negative offsets like that should *never* happen

[14:01] *** domidumont left
[14:01] <Guest13443> and now you have to figure out why it happens anyway

[14:02] *** domidumont joined
[14:27] *** ggoebel joined
[14:34] <brrt> indeed

[14:44] *** sena_kun joined
[15:39] *** domidumont left
[15:51] *** brrt left
[16:12] <AlexDaniel> squashable6: status

[16:12] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in ≈11 hours (2019-10-19 UTC-12⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:42] <Geth> ¦ MoarVM: dogbert17++ created pull request #1197: Update to libuv version 1.33.0

[16:42] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1197

[17:24] *** vrurg joined
[17:24] *** moon_child left
[17:27] <vrurg> Can somebody help me with terminology in moar? MVM_frame_capturelex is said to set code object outer to current scope. Then the scope is build with MVM_frame_force_to_heap which iterates over callers – i.e. over dynamic, not lexical scope. Where I'm wrong?

[17:28] <timotimo> force_to_heap is important for an optimization to not F things up

[17:28] <timotimo> in order to not allocate and free as much stuff for entering and exiting frames we have a set of big-ish memory areas that behave like a regular stack would

[17:29] <timotimo> but sometimes, like with closures, we have to move stack frames away so there's space for regular stack frames again

[17:29] <timotimo> that's why the frame is forced to the heap, if it lived on the "stack" before

[17:29] *** moon_child joined
[17:29] <timotimo> and the stack is made up of callers, that's why that's what force_to_heap iterates over, i guess

[17:31] *** sena_kun left
[17:33] *** sena_kun joined
[17:35] *** sena_kun left
[17:36] *** sena_kun joined
[17:42] <vrurg> timotimo: thanks!

[17:43] <vrurg> then it means I was heading wrong direction.

[17:44] *** sena_kun left
[18:07] *** lizmat joined
[18:59] *** patrickb left
[19:11] *** MasterDuke joined
[19:36] *** lizmat left
[20:08] *** vrurg left
[20:15] *** vrurg joined
[22:07] *** releasable6 left
[22:08] *** lizmat joined
[22:08] *** squashable6 left
[22:12] *** releasable6 joined
[22:12] *** squashable6 joined
[22:16] <Geth> ¦ MoarVM: 0f05efbb7b | (Jan-Olof Hendig)++ | 3rdparty/libuv

[22:16] <Geth> ¦ MoarVM: Update to libuv version 1.33.0

[22:16] <Geth> ¦ MoarVM:

[22:16] <Geth> ¦ MoarVM: Clean spectest on Linux. According to tests by vrurg++ it also fixes

[22:16] <Geth> ¦ MoarVM: M#1178 a Mac specific problem wrt file change notifications.

[22:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0f05efbb7b

[22:16] <Geth> ¦ MoarVM: eebe39b513 | (Jonathan Worthington)++ (committed using GitHub Web editor) | 3rdparty/libuv

[22:16] <synopsebot> M#1178 [open]: https://github.com/MoarVM/MoarVM/issues/1178 libuv 1.26 update caused file change notification to be broken on macOS

[22:16] <Geth> ¦ MoarVM: Merge pull request #1197 from dogbert17/libuv-v-133

[22:16] <Geth> ¦ MoarVM:

[22:16] <Geth> ¦ MoarVM: Update to libuv version 1.33.0

[22:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/eebe39b513

[22:18] <Geth> ¦ MoarVM: 36c35db159 | (Patrick Böker)++ | src/io/fileops.c

[22:18] <Geth> ¦ MoarVM: Make MVM_file_is_rwx honor root and groups

[22:18] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/36c35db159

[22:18] <Geth> ¦ MoarVM: 990a2b6830 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/io/fileops.c

[22:18] <Geth> ¦ MoarVM: Merge pull request #1193 from patzim/perm-check-fix

[22:18] <Geth> ¦ MoarVM:

[22:18] <Geth> ¦ MoarVM: Make MVM_file_is_rwx honor root and groups

[22:18] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/990a2b6830

[22:49] <lizmat> .tell brrt looks like the bind_o errors are back: t/spec/S32-temporal/DateTime.t t/spec/S32-list/combinations.t fail

[22:49] <tellable6> lizmat, I'll pass your message to brrt

[22:49] <lizmat> sleep&

[23:27] <timotimo> i think nobody reverted the stuff brrt asked to have reverted

[23:29] <Geth> ¦ MoarVM: 6edb176a32 | (Timo Paulssen)++ | 2 files

[23:29] <Geth> ¦ MoarVM: Revert "Revert "Revert "exprjit sp_p6oget_bi"""

[23:29] <Geth> ¦ MoarVM:

[23:29] <Geth> ¦ MoarVM: This reverts commit 91d53ae7f4980d09a07f80d2a2d8cd21e3a66dde.

[23:29] <Geth> ¦ MoarVM:

[23:29] <Geth> ¦ MoarVM: Accidentally pushed at the wrong time.

[23:29] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6edb176a32

[23:29] <Geth> ¦ MoarVM: 0aa43a9832 | (Timo Paulssen)++ | 2 files

[23:29] <Geth> ¦ MoarVM: Revert "[JIT] Syntactically distinguish let keyword variants"

[23:29] <Geth> ¦ MoarVM:

[23:29] <Geth> ¦ MoarVM: This reverts commit 76cd034ae3fbba919d25f2ef75951d430f97f576.

[23:29] <Geth> ¦ MoarVM:

[23:29] <Geth> ¦ MoarVM: Accidentally pushed at the wrong time

[23:29] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0aa43a9832

[23:39] <vrurg> timotimo: one more moar/nqp bump is needed, I guess?

[23:44] <timotimo> did we have a bump recently?

[23:45] <timotimo> oh dang we did

[23:45] <vrurg> AlexDaniel made one ~1.5hr ago

[23:45] <timotimo> i didn't notice anything >_>

[23:45] <vrurg> No wonder. Everybody has crazy days lately.

[23:45] <AlexDaniel> need another one?

[23:46] <timotimo> yeah, there were commits in moar that were pushed on accident

[23:46] <timotimo> and only now reverted

[23:46] <AlexDaniel> k

[23:46] <AlexDaniel> done

[23:46] <timotimo> tanks

[23:52] *** lucasb left
