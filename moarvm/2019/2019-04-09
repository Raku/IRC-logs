[00:16] *** MasterDuke joined
[00:16] *** MasterDuke left
[00:16] *** MasterDuke joined
[03:38] *** AlexDani` joined
[03:42] *** AlexDaniel left
[04:29] *** AlexDani` is now known as AlexDaniel

[04:29] *** AlexDaniel left
[04:29] *** AlexDaniel joined
[04:55] *** bisectable6 left
[04:58] *** bisectable6 joined
[04:59] *** bisectable6 left
[05:04] *** bisectable6 joined
[05:18] *** evalable6 left
[05:18] *** committable6 left
[05:18] *** bisectable6 left
[05:20] *** bisectable6 joined
[05:22] *** evalable6 joined
[05:23] *** committable6 joined
[05:26] *** bisectable6 left
[05:27] *** bisectable6 joined
[05:33] *** shareable6 left
[05:33] *** reportable6 left
[05:33] *** reportable6 joined
[05:36] *** shareable6 joined
[05:37] *** AlexDaniel left
[05:42] *** Voldenet left
[05:44] *** Voldenet joined
[05:44] *** Voldenet left
[05:44] *** Voldenet joined
[05:48] *** AlexDaniel joined
[06:55] *** domidumont joined
[08:07] *** zakharyas joined
[09:09] <nwc10> good *, #moarvm

[09:14] <jnthn> o/

[09:15] <nwc10> \o

[09:16] <nwc10> I slack at tracking things - t/spec/S02-types/sethash.t now passes. What wonderful person and what change fixed that?

[09:40] *** brrt joined
[09:40] <brrt> \o

[09:49] *** AlexDaniel left
[09:49] *** AlexDaniel joined
[09:57] *** AlexDaniel left
[09:57] *** AlexDaniel joined
[10:06] *** AlexDaniel left
[10:07] *** brrt` joined
[10:09] *** brrt left
[10:19] *** brrt` left
[10:56] *** domidumont left
[11:09] *** AlexDaniel joined
[11:27] <lizmat> nwc10: I think I'm responsible for that

[11:28] <lizmat> Rakudo 1f066d96a28940d3aae812fe5 and following

[11:29] <nwc10> yes, looks likely

[11:29] <lizmat> a similar situation can still exist with hashes in general

[11:29] <lizmat> I guess we don't test for that

[11:49] *** zakharyas left
[12:02] *** bloatable6 left
[12:02] *** bloatable6 joined
[12:04] *** brrt` joined
[12:20] *** domidumont joined
[12:21] *** domidumont left
[12:22] *** domidumont joined
[12:48] *** zakharyas joined
[13:16] *** lucasb joined
[13:29] <jnthn> Aha, think I found the spesh bug that tripped up my handler reduction stuff

[13:29] <jnthn> A longer-standing bug that was just hidden

[13:30] <jnthn> I think I've also uncovered a spectest that passes for completely the wrong reason

[13:31] <jnthn> Also, Test.pm does something awful

[13:33] <Geth> Â¦ MoarVM: c4396d2e50 | (Jonathan Worthington)++ | src/spesh/manipulate.c

[13:33] <Geth> Â¦ MoarVM: Fix inline boundary end annotation motion

[13:33] <Geth> Â¦ MoarVM:

[13:33] <Geth> Â¦ MoarVM: It's a frame handler in the sense that it goes into that table, but we

[13:33] <Geth> Â¦ MoarVM: need to need to move it like the inline end handler. Otherwise, we can

[13:33] <Geth> Â¦ MoarVM: get an off-by-one.

[13:33] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c4396d2e50

[13:39] *** brrt` left
[13:40] *** brrt` joined
[13:57] <Guest16965> jnthn: hacking again, are you going to continue your pea work?

[13:57] <jnthn> Yes, at some point soon :)

[14:00] <jnthn> Currently doing what I expected might be a small/simple win, only to find that not really :P

[14:00] <Guest16965> you should go for a simple bug :)

[14:00] <jnthn> Down to 2 spectests

[14:01] <jnthn> And one is 'cus the test was written in such a way to hide the bug

[14:01] <jnthn> And we're now smart enough to generate better code and so expose it again

[14:04] <Guest16965> better code is always nice :)

[14:11] <timotimo> yes, yay!

[14:20] <jnthn> m: sub { sub foo($x = return 42) { 70 }; say foo }()

[14:20] <evalable6> jnthn, rakudo-moar 8fc53ec26: OUTPUT: Â«Â»

[14:20] <jnthn> Notice the lack of output

[14:21] <jnthn> is-deeply sub { sub foo($x = return 42) { 70 }; say foo }(), 42,

[14:21] <jnthn>     'can return from parameter defaults';

[14:21] <jnthn> And how the test is bogus

[14:22] <timotimo> huh

[14:22] <timotimo> yeah, that'd never return 42, only ever True, right?

[14:22] <timotimo> oh, or the return is supposed to return from the outer sub actually?

[14:22] <jnthn> Well, the problem is that you *can't* currently do `return` in parameter defaults

[14:23] <jnthn> Well, or it will return from the outer sub, but that's surely a bug also

[14:23] <timotimo> so the test speculates a feature, but it does it wrongly?

[14:23] <jnthn> Right

[14:23] <jnthn> The reason it doesn't work is that the return handler wraps around the sub body

[14:23] <jnthn> But not the parameter processing code

[14:23] <timotimo> mhm

[14:24] <jnthn> I guess I could preserve the current behavior for the sake of not dealing with this now

[14:51] <jnthn> Argh, got fixes for all the spectests, and now have a failing `make test` again :/

[14:53] <jnthn> Plus it's really annoying that if I don't `make install` then `make test` will fail, seemingly because it picks up on a previous installation (which explains why CI thinks all is well)

[14:54] <timotimo> i'll surely get bitten by that as well

[14:55] <jnthn> Hmm, it was my Test.pm6 change that broked it

[15:03] <jnthn> *sigh* Test.pm6 does some really quite evil things

[15:20] <jnthn> Hurrah, clean test and spectest

[15:24] <jnthn> And big $dayjob project test suite is happy too, which is always a good sign

[15:27] <masak> wait, what evil things does Test.pm6 do? o.O

[15:30] *** domidumont left
[15:34] *** mgoebel joined
[15:37] <jnthn> masak: https://github.com/rakudo/rakudo/commit/84b0e38048 was the latest fun

[15:48] *** zakharyas left
[15:49] <masak> oh dear :/

[16:09] *** domidumont joined
[16:10] *** MasterDuke left
[16:12] *** ggoebel joined
[16:13] *** domidumont left
[16:30] *** Kaiepi left
[16:31] *** Kaiepi joined
[16:35] *** brrt` left
[16:48] <Geth> Â¦ MoarVM: Garland-g++ created pull request #1090: Add flag for UV_UDP_REUSEADDR

[16:48] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1090

[17:16] <Geth> Â¦ MoarVM: 9b1b60f663 | (Jonathan Worthington)++ | src/jit/x64/emit.dasc

[17:16] <Geth> Â¦ MoarVM: Avoid a write barrier when we don't need one

[17:16] <Geth> Â¦ MoarVM:

[17:16] <Geth> Â¦ MoarVM: Shrinks the code for the the get-vivify-type-object case.

[17:16] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9b1b60f663

[17:16] *** mgoebel left
[19:44] *** lucasb left
[19:59] *** domidumont joined
[20:05] *** domidumont left
[20:35] *** Kaiepi left
[20:35] *** Kaiepi joined
[20:37] *** lucasb joined
[20:37] *** Kaiepi left
[20:37] *** Kaiepi joined
[20:47] *** ggoebel left
[20:59] *** Kaiepi left
[21:01] *** Kaiepi joined
[21:02] *** Kaiepi left
[21:02] *** Kaiepi joined
[21:12] *** ggoebel joined
[22:04] *** Xliff joined
[22:04] <Xliff> \o

[22:04] <Xliff> What does this error mean. Obtained when running perl6

[22:05] <Xliff> "Cannot invoke object with invocation handler in this context"

[22:06] <jnthn> Generally, you tried to combine to kinds of invocation that can't be nested due to implementation limitations.

[22:07] <jnthn> Most often comes from trying to be too clever... :)

[22:07] <Xliff> HA! That I was.

[22:07] <Xliff> Checking the "less" clever fix, now.

[22:07] <jnthn> One of those "ideally we'd fix this" things

[22:09] <Xliff> Yes. The less clever, but more limiting solution did not generate that error.

[22:10] <Xliff> Something like: class A { method (&s) { do-sub-in-c(&s) }; multi sub do-sub-in-c(&s (Pointer)) { * }; multi sub do-sub-in-c(&s (Pointer, Pointer)) { * }

[22:10] <Xliff> Because &s can have many signatures. I was hoping Perl6 could dispatch based on the signature passed.

[22:11] <Xliff> Via class A, ala: A.s(-> $ { # This is the single pointer version })

[22:16] <timotimo> i wonder if there'd be someone willing to give me a microgrant for working in var args support on moarvm with both libffi and dyncall

[22:16] <timotimo> that'd let you have a *@foo where C would have a ... in the function signature

[22:16] <timotimo> perhaps there'd also be an explicit way to say "actually, the ... starts at position X"

[22:18] <timotimo> so you could have a perl6 signature with proper constraints that still maps to a C signature that has ... in some spot

[22:23] <timotimo> though there are subsignatures, of course, you may not actually want that for some reason or other

[22:23] <Xliff> If I had the money, I would. :p

