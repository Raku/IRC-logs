[01:09] *** AlexDani` joined
[01:12] *** AlexDaniel left
[01:13] *** Marflutter joined
[01:13] *** Marflutter left
[02:00] *** Kaiepi left
[02:00] *** Kaiepi joined
[03:08] *** Tixiks joined
[03:08] *** Tixiks left
[03:39] *** Strozill joined
[03:39] *** Strozill left
[07:12] *** domidumont joined
[08:08] *** Kaiepi left
[08:08] *** Kaiepi joined
[08:26] *** zakharyas joined
[09:02] *** AlexDani` is now known as AlexDaniel

[09:03] *** lizmat_ joined
[09:06] *** lizmat left
[09:23] *** Kaiepi left
[09:27] *** Kaiepi joined
[10:20] *** lizmat joined
[10:24] *** lizmat_ left
[12:36] *** zakharyas left
[12:44] * lizmat hopes jnthn will have some tuits to look at R#2676

[12:44] <synopsebot> R#2676 [open]: https://github.com/rakudo/rakudo/issues/2676 Do we need an overhaul of .ACCEPTS methods wrt Any / Mu?

[13:32] *** MasterDuke left
[13:46] *** lucasb joined
[13:50] *** lizmat left
[14:04] *** zakharyas joined
[14:40] *** AlexDaniel left
[14:40] *** AlexDani` joined
[14:40] *** AlexDani` is now known as AlexDaniel

[14:48] <Geth> Â¦ MoarVM: d6d057a20e | (Daniel Green)++ | src/jit/graph.c

[14:48] <Geth> Â¦ MoarVM: Jit (open|read|close)_dir

[14:48] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d6d057a20e

[14:48] <Geth> Â¦ MoarVM: e459d36b84 | (Daniel Green)++ | src/jit/graph.c

[14:48] <Geth> Â¦ MoarVM: Also JIT stat and lstat

[14:48] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e459d36b84

[14:48] <Geth> Â¦ MoarVM: 43789a9370 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/jit/graph.c

[14:48] <Geth> Â¦ MoarVM: Merge pull request #1043 from MasterDuke17/jit_dir_ops

[14:48] <Geth> Â¦ MoarVM:

[14:48] <Geth> Â¦ MoarVM: Jit (open|read|close)_dir

[14:48] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/43789a9370

[14:49] <Geth> Â¦ MoarVM: 4c19115408 | (Daniel Green)++ | src/spesh/optimize.c

[14:49] <Geth> Â¦ MoarVM: Add BOOTHash to spesh cheat list

[14:49] <Geth> Â¦ MoarVM:

[14:49] <Geth> Â¦ MoarVM: It's the only other BOOT* that shows up in the spesh logs of an NQP

[14:49] <Geth> Â¦ MoarVM: build. timotimo++

[14:49] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4c19115408

[14:49] <Geth> Â¦ MoarVM: 870cdad3cd | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/spesh/optimize.c

[14:49] <Geth> Â¦ MoarVM: Merge pull request #1040 from MasterDuke17/add_BOOTHash_to_spesh_exemption_list

[14:49] <Geth> Â¦ MoarVM:

[14:49] <Geth> Â¦ MoarVM: Add BOOTHash to spesh cheat list

[14:49] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/870cdad3cd

[14:56] <Geth> Â¦ MoarVM: a1cfd7022c | (Fabrice Fontaine)++ | Configure.pl

[14:56] <Geth> Â¦ MoarVM: Configure.pl: fix cross-compilation

[14:56] <Geth> Â¦ MoarVM:

[14:56] <Geth> Â¦ MoarVM: Do not add -I/usr/local/include or -L/usr/local/lib when cross-compiling

[14:56] <Geth> Â¦ MoarVM:

[14:56] <Geth> Â¦ MoarVM: Signed-off-by: Fabrice Fontaine [email@hidden.address]
[14:56] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a1cfd7022c

[14:56] <Geth> Â¦ MoarVM: 1cb70d46df | (Jonathan Worthington)++ (committed using GitHub Web editor) | Configure.pl

[14:56] <Geth> Â¦ MoarVM: Merge pull request #1045 from ffontaine/master

[14:56] <Geth> Â¦ MoarVM:

[14:57] <Geth> Â¦ MoarVM: Configure.pl: fix cross-compilation

[14:57] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1cb70d46df

[15:01] <Geth> Â¦ MoarVM/pea: 37 commits pushed by (Jonathan Worthington)++, (Carl Masak)++

[15:01] <Geth> Â¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/compare/83a35e95b7b2...2d936a5a50d0

[15:03] <jnthn> Doing some test runs on pea, but thinking to merge it; I'd planned that after the last Rakudo release, which didn't happen.

[15:12] *** samcv left
[15:13] *** samcv joined
[15:14] <dogbert2_> jnthn: merging pea seems like an excellent idea :)

[15:23] <jnthn> Hm, well, something to fix first, it looks like

[15:23] <jnthn> It causes some kind of test regression S32-num/rand.t, which is an odd place for it :)

[15:37] <timotimo> hahaha

[15:37] <timotimo> oh that's great

[15:37] <timotimo> jnthn: you know how we put instance->VMNull into tc->last_payload so that we never have to do a null pointer check?

[15:37] <timotimo> ^- in MVM_tc_create

[15:38] <timotimo> well, guess what value instance->VMNull has when the first tc gets created

[15:47] <jnthn> Umm...maybe it's not set yet 'cus we didn't bootstrap 'cus we need a tc for that? :)

[15:54] <timotimo> yup

[15:55] <timotimo> so the bootstrap will have to set that up, too

[15:55] <timotimo> that's what caused the guard_args to be null even though i set it to VMNull

[15:56] *** lucasb left
[15:57] <jnthn> Consider this:

[15:57] <jnthn>     my sub repeat_rand ($seed) {

[15:57] <jnthn>         srand($seed);

[15:57] <jnthn>         for 1..99 { rand; }

[15:57] <jnthn>         return rand;

[15:57] <jnthn>     }

[15:57] <jnthn> Spesh of this with PEA enabled fails. Can anyone guess why?

[15:57] <jnthn> (I have a guess, and am now seeing if it's the right one. :))

[15:57] <timotimo> rand is being sunk?

[15:57] <timotimo> so it won't actually do the side effect?

[15:58] <jnthn> Well, it was in sink context before

[15:58] <timotimo> right, but not eliminated i guess?

[15:58] <jnthn> Here's the code from `rand` that we inline:

[15:58] <jnthn>       randscale_n       r1(2),   r1(1)

[15:58] <jnthn>       sp_fastcreate     r2(1), liti16(40), sslot(3)

[15:58] <jnthn>       sp_bind_n         r2(1), liti16(32),   r1(2)

[15:59] <timotimo> it's not that randscale uses two versions of r1?

[15:59] <jnthn> No :)

[16:00] <timotimo> was it using the previous rand result as the maximum value each time?

[16:00] <jnthn> The object done by sp_fastcreate is scalar replaced

[16:00] <jnthn> The sp_bind_n just becomes a set

[16:00] <jnthn> It's unused

[16:00] <jnthn> Dead code elimination comes along and sees the dead set and eats it.

[16:00] <jnthn> That means randscale_n is now unused

[16:00] <jnthn> And

[16:01] <jnthn> randscale_n         w(num64) r(num64) :pure

[16:01] <timotimo> yeah, marked as pure

[16:01] <timotimo> not good

[16:01] <jnthn> Yeah, that's the issue

[16:01] <jnthn> I guess I marked it thinking "well, if you don't use a random number, so what" :)

[16:02] <jnthn> randscale_n         w(num64) r(num64) :pure

[16:02] <jnthn> oops

[16:02] <jnthn> rand_I              w(obj) r(obj) r(obj) :pure

[16:02] <jnthn> That's probably also bad

[16:02] <timotimo> for sure

[16:02] <timotimo> btw i don't think we have a "get the random seed" op

[16:02] <timotimo> i think that's a feature that's sometimes needed

[16:06] <Geth> Â¦ MoarVM/pea: a6939d7c1f | (Jonathan Worthington)++ | 2 files

[16:06] <Geth> Â¦ MoarVM/pea: randscale_n and rand_I are not pure ops

[16:06] <Geth> Â¦ MoarVM/pea:

[16:06] <Geth> Â¦ MoarVM/pea: Since obtaining a random number will mutate the state of the random

[16:06] <Geth> Â¦ MoarVM/pea: number generator. We never noticed this before, but PEA allowing for

[16:06] <Geth> Â¦ MoarVM/pea: more aggressive optimization revealed it.

[16:06] <Geth> Â¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/a6939d7c1f

[16:23] *** domidumont left
[16:41] <jnthn> Under NODELAY, I get a weird hang in t/02-rakudo/repl.t that I'm having some trouble nailing down

[16:41] <jnthn> Trying a NODELAY spectest now to see if I can get anything similar there

[17:20] <jnthn> D'oh, I think I understand what's going on.

[17:20] <jnthn> It's no use doing all this stuff to materialize objects at deopt points if we then go and delete the registers that we scalar replaced attributes into

[17:21] <timotimo> ouch :)

[17:21] <timotimo> perl6-m -e 'use nqp; nqp::speshguardgetattr(8, Int, q[$!value])'

[17:21] <timotimo> This representation (Null) does not support elems (for type VMNull)

[17:21] <timotimo> ^- anyway, this is my current status and i like it

[17:22] <timotimo> it also ensures the assumption that tc->last_payload is always a proper pointer

[17:26] <Geth> Â¦ MoarVM: 5431d50fbc | (Timo Paulssen)++ | 2 files

[17:26] <Geth> Â¦ MoarVM: Ensure last_payload And plugin_guard_args Are Valid

[17:26] <Geth> Â¦ MoarVM:

[17:26] <Geth> Â¦ MoarVM: until now using spesh plugin commands outside of

[17:26] <Geth> Â¦ MoarVM: something called by speshresolve caused a segfault.

[17:26] <Geth> Â¦ MoarVM:

[17:26] <Geth> Â¦ MoarVM: Also, last_payload was assumed to always point at

[17:27] <Geth> Â¦ MoarVM: VMNull so that no null pointer checks were needed,

[17:27] <Geth> Â¦ MoarVM: but due to VMNull being created later than the first

[17:27] <Geth> Â¦ MoarVM: tc being created, it'd end up a null pointer anyway!

[17:27] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5431d50fbc

[17:55] <jnthn> Cool, seems that problem was what afflicted repl.t also

[18:01] <Geth> Â¦ MoarVM/pea: 3629362fea | (Jonathan Worthington)++ | src/spesh/pea.c

[18:01] <Geth> Â¦ MoarVM/pea: Add deopt uses as needed for scalar replacements

[18:01] <Geth> Â¦ MoarVM/pea:

[18:01] <Geth> Â¦ MoarVM/pea: When we perform scalar replacement, then we place what used to be in

[18:01] <Geth> Â¦ MoarVM/pea: object attributes into registers. If we deopt, we materialize the object

[18:01] <Geth> Â¦ MoarVM/pea: from those registers. However, if those register's only use is for

[18:01] <Geth> Â¦ MoarVM/pea: deopt, then we could delete writes into them, and thus would not be able

[18:01] <Geth> Â¦ MoarVM/pea: to do that materialization. Thus, be sure to add deopt usages to the

[18:01] <Geth> Â¦ MoarVM/pea: scalar replacement registers as required (we do it per version, so this

[18:01] <Geth> Â¦ MoarVM/pea: is quite precise). That way, they will be preserved as needed, and not

[18:01] <Geth> Â¦ MoarVM/pea: break our ability to deoptimize.

[18:02] <Geth> Â¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/3629362fea

[18:15] *** robertle joined
[18:20] <timotimo> .o( can't we just optimize in peas, damn it? )

[18:42] *** Kaiepi left
[18:48] <jnthn> I think there's one more root problem that's causing regressions in NODELAY now

[18:48] <jnthn> It's odd, a bunch of tests complain we try to stringify a code object and then fail

[18:49] *** lucasb joined
[18:49] <jnthn> Anyway, enough for the moment

[18:50] <timotimo> i'm glad pea is rebased up to latest so i can try it out more thoroughly :)

[18:55] *** zakharyas left
[19:38] *** domidumont joined
[19:39] *** Ven`` joined
[19:41] *** domidumont left
[19:47] *** Kaiepi joined
[20:33] *** Kaiepi left
[20:34] *** Kaiepi joined
[22:06] *** Kaiepi left
[22:07] *** Kaiepi joined
[22:09] *** lucasb left
[22:15] *** Ven`` left
[22:54] *** robertle left
[22:55] *** MasterDuke joined
[22:55] *** MasterDuke left
[22:55] *** MasterDuke joined
[23:26] *** Kaiepi left
[23:29] *** Kaiepi joined
[23:29] *** Kaiepi left
[23:29] *** Kaiepi joined
[23:32] *** Kaypie joined
[23:33] *** Kaiepi left
[23:52] *** Kaypie left
[23:55] *** Kaiepi joined
