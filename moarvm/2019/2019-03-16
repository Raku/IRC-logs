[00:21] *** lucasb left
[07:33] *** AlexDaniel joined
[09:24] *** robertle joined
[12:50] *** Kaiepi left
[12:52] *** Kaiepi joined
[13:04] *** Kaiepi left
[13:07] *** Kaiepi joined
[13:16] *** Kaiepi left
[13:17] *** Kaiepi joined
[13:37] *** lucasb joined
[13:37] *** Kaiepi left
[13:37] *** Kaiepi joined
[14:16] * dogbert17 drops needle

[14:16] * timotimo bursts

[14:17] <dogbert17> timotimo: hi, can you merge https://github.com/MoarVM/MoarVM/pull/1047 or is that a job for jnthn?

[14:18] <timotimo> can probably just do it

[14:18] <Geth> ¦ MoarVM: 62b58164a8 | (Nick Logan)++ (committed by timo) | 2 files

[14:18] <Geth> ¦ MoarVM: Update libuv to 1.26

[14:18] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/62b58164a8

[14:19] <dogbert17> yay, now we're uptodate

[14:20] <jnthn> Yeah, it's a good time to do that :)

[14:21] <dogbert17> I'll run a stresstest with that on my 32 bit vm. I think it'll work though

[14:24] <dogbert17> wasn't there a recent release of libtommath as well, hmm

[14:29] <timotimo> yep

[14:29] <dogbert17> should we update to that at as well?

[14:34] <timotimo> yeah, i'd say so

[14:40] <dogbert17> is this the commit we want? https://github.com/libtom/libtommath/commit/08549ad6bc8b0cede0b357a9c341c5c6473a9c55

[14:42] *** Kaiepi left
[14:42] <timotimo> could very well be

[14:42] <timotimo> do we have to do anything in our repo to reflect the license change?

[14:43] * dogbert17 hides, someone else will have to answer that :)

[14:45] *** Kaiepi joined
[14:48] *** Kaiepi left
[15:25] *** Kaiepi joined
[15:28] <jnthn> Hm, how does the license change?

[15:32] *** AlexDaniel` left
[15:41] <timotimo> turns from wtfpl to unlicense

[15:41] <timotimo> both are attempts at public-domaining the work

[15:46] *** AlexDaniel` joined
[16:52] *** domidumont joined
[17:37] *** ggoebel joined
[18:17] *** AlexDaniel left
[18:18] *** AlexDaniel joined
[18:43] <dogbert17> jnthn: if you're on the hunt for moar-pea problems you can find them here: https://gist.github.com/dogbert17/e6b0d0030b2b9c1d459f2b9513d780cd

[19:31] *** ggoebel left
[20:16] *** lucasb left
[21:10] <ugexe> $ nqp -e 'my int $x := 10000; my $t := nqp::newthread({1}, 0, 0); nqp::threadrun($t);'

[21:10] <yoleaux> 20:08Z <uzl> ugexe: Can you show with a simple example how it can be done? BTW, I'm referring to this:  https://colabti.org/irclogger/irclogger_log/perl6?date=2019-03-16#l157

[21:10] <ugexe> const_iX NYI

[21:10] <ugexe> i'm trying to add a 3 parameter to nqp::newthread, but I'm getting that const_iX NYI error and i'm not sure why or how to figure out where its coming from

[21:11] <timotimo> ugexe: that's usually memory corruption

[21:16] <ugexe> https://gist.github.com/ugexe/09d8220ca20426fb8f1fa52fc27a9261 is there anything special i need to do when adding a member to a struct?

[21:17] <timotimo> oh

[21:17] <timotimo> if you want to change an op, you'll have to run generate_ops.p6

[21:17] <nine_> and start at src/core/oplist

[21:17] <ugexe> its a little odd that app_lifetime is a MVMint32 in the struct and MVMint64 in function parameters, but changing that didn't fix it

[21:18] <timotimo> but since it's an op that's also used in nqp - at least possibly? - it'll involve a bootstrap/circularity cycle

[21:18] <timotimo> ah, yes, start at the oplist

[21:18] <timotimo> what you're currently getting is that the code gen generates newthread with two operands, but the interpreter reads three operands

[21:18] <ugexe> ah ok. i didnt think to do those things for editing, only adding new ones

[21:18] <timotimo> so it'll read the next opcode as an operand, and the first operant of the next opcode as the opcode

[21:19] <timotimo> there's no way to put that change between newthread and runthread?

[21:20] <ugexe> no, it was suggested to add stack-size to Therad.new, so part of it must be in nqp::newthread. but uv_create_thread_ex is in runthread

[21:21] <timotimo> doesn't have to be in nqp::newthread just because it's in Thread.new

[21:21] <timotimo> Thread.new could call nqp::setthreadstacksize or whatever

[21:22] <timotimo> btw adding new ops can be done in the middle, too, if you find a deprecated op that's got a fitting signature it won't even make a huge diff

[21:22] <ugexe> ah i see. if you have a suggestion on how to better accomidate lmk

[21:23] <timotimo> is that for total stack size, like a limit, or for initial stack size?

[21:23] <ugexe> although setting the stacksize would only make sense at certain times

[21:23] <ugexe> initial stack size

[21:23] <ugexe> If UV_THREAD_HAS_STACK_SIZE is set, stack_size specifies a stack size for the new thread. 0 indicates that the default value should be used, i.e. behaves as if the flag was not set. Other values will be rounded up to the nearest page boundary.

[21:24] <ugexe> jvm is fairly simple as well

[21:24] <ugexe> -        ((VMThreadInstance)thread).thread = new Thread(new CodeRunnable(tc.gc, thread, code));

[21:24] <ugexe> +        ((VMThreadInstance)thread).thread = new Thread(new CodeRunnable(tc.gc, thread, code, stackSize));

[21:25] <ugexe> plus changing the func parameters and JAST mapping thing

[21:26] <ugexe> but the java impl above follows the api i was using (passing in to thread.new), although i dont know if that suggests its the reasonable choice

[21:32] *** domidumont left
[21:33] <ugexe> alright updating oplist and rerunning generate_ops.p6 was all that was needed

[21:35] <timotimo> well, let's hope nqp::newthread doesn't show up in nqp's code :)

[21:35] <timotimo> i do believe it shows up in the tests, but that doesn't cause trouble, since that isn't needed to build nqp itself

[21:35] <ugexe> yea i had to fix the tests but that was it

[21:35] <timotimo> OK, nice

[21:42] <ugexe> should stack-size be a public attribute of Thread?

[21:43] <ugexe> because i'm not sure we can get the stack size from a thread (i.e. determining the default)

[21:43] <ugexe> so it would always be 0 unless the user set it

[21:47] <Geth> ¦ MoarVM: ugexe++ created pull request #1069: Give MVM_thread_new a stack size parameter

[21:47] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1069

[22:22] <Geth> ¦ MoarVM/jit-expr-float: 16 commits pushed by (Bart Wiegmans)++

[22:22] <Geth> ¦ MoarVM/jit-expr-float: review: https://github.com/MoarVM/MoarVM/compare/7fe97f4f039d...f3829b209970

[22:39] *** brrt joined
[22:48] <brrt> ohai

[22:48] <timotimo> yo

[22:51] <brrt> I'm trying to finally write a blog about the optimization problem I've been banging on about here

[22:53] <timotimo> yeah

[23:20] <brrt> I think we can do some form of state-machine building for the optimizer

[23:21] <ugexe> someone want to look at merging https://github.com/MoarVM/MoarVM/pull/1049 so I don't have to keep updating op conflicts?

[23:27] <brrt> ehm. hmm

[23:27] <brrt> i've nothing against it per se...

[23:27] <brrt> but I'm going to defer the decision nevertheless

[23:36] <timotimo> i'm not against it

