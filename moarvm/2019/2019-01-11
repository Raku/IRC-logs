[00:00] <MasterDuke> jnthn: happen to know offhand where a speshresolve getting added to a BB would happen?

[00:32] <MasterDuke> timotimo: how would i know if a function makes sense to add to the script?

[00:33] <timotimo> hm, it only makes sense to have breakpoints in places where the spesh graph has a sane structure

[00:33] <timotimo> i.e. not in between major reshufflings i guess

[00:34] <MasterDuke> ah, so it's not like there's some function call i can look for in another function to make the decision

[00:34] <MasterDuke> e.g., every function that has a 'log_interesting_stuff_to_the_spesh_log(foo, bar)' in it

[00:35] <timotimo> not sure how you mean that

[00:35] <MasterDuke> i added a lot, but now the script doesn't usually finish, and it still doesn't seem to record what i'm looking for

[00:36] <MasterDuke> i.e., i should add all functions to the script that have a particular function call within them

[00:37] <timotimo> i wonder if spesh_blocking confuses it somehow

[00:37] <MasterDuke> i don't have it turned on

[00:38] <MasterDuke> hm, is there some way i can instrument the spesh logging to find out where the speshresolve lines are coming from?

[00:48] <timotimo> i don't think so, at the moment spesh does its logging, it'll be far from where things were made

[01:24] <MasterDuke> ah, i see the script is actually dumping the graph. so yes, finding out what function creates that speshresolve is the solution i believe

[02:32] <Geth> Â¦ MoarVM: 9ce36b6a2d | MasterDuke17++ (committed using GitHub Web editor) | src/spesh/manipulate.c

[02:32] <Geth> Â¦ MoarVM: Fix typo in comment

[02:32] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9ce36b6a2d

[03:03] *** evalable6 left
[03:05] *** evalable6 joined
[03:05] *** p6bannerbot sets mode: +v evalable6

[05:25] *** MasterDuke left
[06:35] *** domidumont joined
[06:36] *** p6bannerbot sets mode: +v domidumont

[06:51] *** domidumont left
[07:07] *** domidumont joined
[07:08] *** p6bannerbot sets mode: +v domidumont

[08:30] *** lizmat left
[09:17] *** robertle_ joined
[09:18] *** p6bannerbot sets mode: +v robertle_

[09:21] *** zakharyas joined
[09:22] *** p6bannerbot sets mode: +v zakharyas

[09:25] *** kiwi_92 joined
[09:25] *** p6bannerbot sets mode: +v kiwi_92

[10:25] *** kiwi_92 left
[10:33] *** patrickb joined
[10:34] *** p6bannerbot sets mode: +v patrickb

[10:36] <jnthn> .tell MasterDuke See optimize_plugin in src/spesh/optimize.c

[10:36] <yoleaux> jnthn: I'll pass your message to MasterDuke.

[11:03] *** domidumont left
[11:12] *** lizmat joined
[11:12] *** p6bannerbot sets mode: +v lizmat

[11:18] *** domidumont joined
[11:18] *** p6bannerbot sets mode: +v domidumont

[11:29] *** lucasb joined
[11:29] *** p6bannerbot sets mode: +v lucasb

[12:03] <Geth> Â¦ MoarVM/jit-expr-float: f95b738945 | (Bart Wiegmans)++ | 5 files

[12:03] <Geth> Â¦ MoarVM/jit-expr-float: [JIT] Make STORE polymorphic on input

[12:03] <Geth> Â¦ MoarVM/jit-expr-float:

[12:03] <Geth> Â¦ MoarVM/jit-expr-float: We can always tile a STORE of a NUM operand correctly; in fact, the

[12:03] <Geth> Â¦ MoarVM/jit-expr-float: tiler can always tile generic operands if have the same input and

[12:03] <Geth> Â¦ MoarVM/jit-expr-float: output types.

[12:03] <Geth> Â¦ MoarVM/jit-expr-float:

[12:03] <Geth> Â¦ MoarVM/jit-expr-float: The complexity of maintaining whether we need to store a num or a reg

[12:03] <Geth> Â¦ MoarVM/jit-expr-float: value in the expression builder wasn't really worth it.

[12:03] <Geth> Â¦ MoarVM/jit-expr-float: review: https://github.com/MoarVM/MoarVM/commit/f95b738945

[12:04] *** brrt joined
[12:05] *** p6bannerbot sets mode: +v brrt

[12:07] <brrt> \o

[12:08] <timotimo> o/

[12:09] <brrt> I think the type system in the expression template compiler now works...

[12:15] <brrt> I kind of hate that that is the best I have to offer.

[12:15] <brrt> Oh well

[12:18] <timotimo> steal rust's type system, obviously

[12:24] *** ZzZombo joined
[12:24] *** p6bannerbot sets mode: +v ZzZombo

[12:24] *** ZzZombo left
[12:34] *** brrt left
[12:39] *** zakharyas left
[12:41] *** domidumont left
[12:43] *** brrt joined
[12:43] *** p6bannerbot sets mode: +v brrt

[12:55] *** domidumont joined
[12:55] *** p6bannerbot sets mode: +v domidumont

[13:07] *** brrt left
[13:10] *** brrt joined
[13:10] *** p6bannerbot sets mode: +v brrt

[14:17] *** zakharyas joined
[14:18] *** p6bannerbot sets mode: +v zakharyas

[14:38] *** AlexDani` joined
[14:39] *** p6bannerbot sets mode: +v AlexDani`

[14:42] *** AlexDaniel left
[14:44] *** AlexDani` is now known as AlexDaniel

[15:15] *** brrt left
[15:38] *** MasterDuke joined
[15:38] *** p6bannerbot sets mode: +v MasterDuke

[15:43] <MasterDuke> .

[15:43] <yoleaux> 10:36Z <jnthn> MasterDuke: See optimize_plugin in src/spesh/optimize.c

[15:44] <MasterDuke> jnthn: thanks. that's what i suspected, good to have confirmation

[15:46] <MasterDuke> jnthn, timotimo: i removed all the other stuff i added to the trace script and just added optimize_plugin. i do see some output from the script for that (and some other opcodes getting converted to sp_*), but still not the creation of the problematic speshresolve

[15:52] <timotimo> i mean it has to pop into existence somewhere

[15:52] <timotimo> and that has to show up in the output

[15:52] <timotimo> so ... how come NFA's deserialize function doesn't seem to be called during rakudo's build?!

[15:53] <timotimo> ok, it does happen in install-core-dists

[15:56] <timotimo> does that mean when we load the perl6 grammar and its NFAs they get loaded as statementlists, i.e. a whole bunch of int arrays?

[15:56] <timotimo> rather than as actual NFA objects?

[15:56] <MasterDuke> timotimo: so i'm starting perl6-gdb-m, sourcing the trace script, then `b src/spesh/candidate.c:57 if $_streq(c_name, "index")`, running my example perl6 code, then starting the trace script when it hits the breakpoint

[15:57] <MasterDuke> hit "q" after it finishes running and shows the diffs, then continuing in gdb until the example code ends

[15:57] <timotimo> right

[15:57] <MasterDuke> then go to the created directory and running 'git log -U300'

[15:57] <timotimo> or has the speshresolve been in there from the beginning and continues to the very end?

[15:58] <MasterDuke> nope

[15:58] <MasterDuke> it isn't there in the beginning. i do see some changes to the BB where it eventually ends up, but not its insertion

[15:59] <timotimo> that's kind of not possible?

[15:59] <timotimo> i'm confused

[15:59] <MasterDuke> i.e., what that BB looks like in the actual spesh log in the "after" state is not what it looks like at the end of the script's output

[16:00] <MasterDuke> is my breakpoint to specific?

[16:00] <MasterDuke> it only gets hit once

[16:00] <timotimo> in that case the last breakpoint is too early

[16:02] <MasterDuke> hm, any idea of a better way to only trace that particular function?

[16:02] <timotimo> do you have the breakpoint only at the start of the function?

[16:04] <MasterDuke> i'm mixing words here. my breakpoint is several lines into MVM_spesh_candidate_add(), because i only want to trace when the perl6 'index' method is getting optimized

[16:05] <timotimo> ah

[16:05] <timotimo> you said you had removed your changes from the gdb script

[16:05] <timotimo> is there one for optimize_plugin, then?

[16:05] <MasterDuke> mostly, i've now only added optimize_plugin

[16:06] <MasterDuke> before i'd added ~50, but the script always hung

[16:06] <timotimo> hmm

[16:07] <timotimo> i mean it could be that the dumper encounters something that's temporarily wrong in the spesh graph and gets confused

[16:07] <timotimo> maybe into an infinite loop or something

[16:07] <MasterDuke> it doesn't use any cpu when hung fwiw

[16:08] <timotimo> hm

[16:08] <timotimo> i wonder if gdb's pager somehow messes with you

[16:08] <timotimo> can you get these 50 breakpoints back?

[16:08] <timotimo> and try again with "set pagination off"?

[16:08] <MasterDuke> sure, i saved them as a patch

[16:11] <MasterDuke> also, it frequently hangs after the first commit ("before specializing for args", where it creates speshdump.txt)

[16:12] <MasterDuke> well it finished, but same output

[16:13] <MasterDuke> so maybe my breakpoint isn't right

[16:14] <timotimo> here's an idea

[16:14] <timotimo> when your breakpoint is hit, fprintf into the spesh log file manually, just a "here\n" or something

[16:14] <timotimo> then afterwards you can compare if you were looking at the right thing

[16:14] <MasterDuke> in gdb?

[16:15] <timotimo> yeah, with "call"

[16:15] <MasterDuke> i guess i have to fopen it first and all that?

[16:16] <timotimo> i thought you had spesh logging on already?

[16:16] <MasterDuke> yeah

[16:17] <timotimo> then it's already open :)

[16:18] <MasterDuke> but i need the spesh log's FILE for fprintf?

[16:18] <timotimo> tc->instance->spesh_log_fh

[16:19] <MasterDuke> ha, that is simpler. timotimo++

[16:20] <timotimo> i'm so exhausted for no good reason :|

[16:21] <MasterDuke> my 'HERE!!' is in the spesh log right before `Specialization of 'index' (cuid: 4053)  Before: Spesh of 'index' (cuid: 4053, file: SETTING::src/core/Str.pm6:272)    BB 0 (0x7ffff0082e38):`

[16:22] <timotimo> so is that actually the one that has speshresolve in it?

[16:22] <MasterDuke> not in the "before", but yes in the "after"

[16:25] <timotimo> in that case the last breakpoint in the trace script is too early

[16:25] <timotimo> so it doesn't get the final state, and also not the state "just" before the speshresolve gets added i guess

[16:26] <timotimo> i might try a nap

[16:28] *** domidumont left
[16:28] <MasterDuke> i'm afk for a while, will continue when i get back

[16:28] <MasterDuke> thanks for the help

[16:36] *** brrt joined
[16:36] *** p6bannerbot sets mode: +v brrt

[17:06] *** zakharyas left
[17:20] *** domidumont joined
[17:21] *** p6bannerbot sets mode: +v domidumont

[17:35] *** brrt left
[17:43] *** reportable6 left
[17:43] *** shareable6 left
[17:43] *** squashable6 left
[17:43] *** committable6 left
[17:44] *** releasable6 left
[17:44] *** bisectable6 left
[17:44] *** squashable6 joined
[17:45] *** reportable6 joined
[17:45] *** p6bannerbot sets mode: +v squashable6

[17:46] *** p6bannerbot sets mode: +v reportable6

[17:46] *** shareable6 joined
[17:47] *** p6bannerbot sets mode: +v shareable6

[17:47] *** releasable6 joined
[17:47] *** bisectable6 joined
[17:48] *** p6bannerbot sets mode: +v releasable6

[17:48] *** p6bannerbot sets mode: +v bisectable6

[17:49] *** committable6 joined
[17:49] *** p6bannerbot sets mode: +v committable6

[17:57] <patrickb> o/

[17:58] <patrickb> I think I ran into a wall with my relocatability project.

[18:00] <patrickb> I have two strings nqp-home and perl6-home on the C side. Now I need to somehow retrieve them in the ModuleLoader in perl6 land.

[18:03] <patrickb> I'm not even sure whether it's better to somehow pass them in or recalculate them from scratch.

[18:10] <patrickb> I start to lean into the "just do it again in perl6 land" direction..

[18:17] *** robertle_ left
[19:22] <timotimo> if it's easy to do again, that's fine. otherwise you can potentially stash them away in the hll syms

[19:46] <patrickb> I already rewrote it in nqp. So yeah...

[20:05] *** lizmat left
[20:18] *** lizmat joined
[20:18] *** p6bannerbot sets mode: +v lizmat

[20:36] *** domidumont left
[20:38] *** lucasb left
[21:28] *** robertle left
[22:40] *** patrickb left
