[00:00] *** lizmat joined
[01:21] *** AlexDaniel joined
[05:13] *** AlexDaniel left
[06:36] *** lizmat left
[07:26] *** domidumont joined
[07:43] *** AlexDaniel joined
[07:50] *** lizmat joined
[07:54] *** robertle left
[07:55] *** robertle joined
[08:47] *** lizmat left
[09:07] *** sena_kun joined
[12:09] <MasterDuke> timotimo: you might find this interesting https://www.phoronix.com/scan.php?page=news_item&px=Linux-5.2-Compressed-Perf

[12:10] *** dogbert11 joined
[12:13] *** dogbert17 left
[12:13] *** brrt joined
[12:16] *** tobs joined
[12:17] <brrt> I think I know the reason for my fastcrash bug

[12:17] <brrt> btw, windows 10 'pro' already makes it fairly easy to have a linux VM

[12:17] <brrt> but soon, it'll be even easier

[12:21] <timotimo> ah, very nice

[12:21] <timotimo> the perf zstd stuff i mean

[12:22] <brrt> I haven't read the logs yet

[12:23] <timotimo> a phoronix article

[12:23] <timotimo> perf can now write perf.data with zstd compression, and in the future linux might get zstd compression for the perf ringbuffer too

[12:24] <timotimo> so last night i stumbled upon USDT probes, have you heard of that?

[12:24] <brrt> I don't even know what USDT stands for

[12:24] <timotimo> ha

[12:25] <brrt> .tell pamplemousse I think the invalid read is the most important thing; because of ASLR you won't always get a segfault

[12:25] <yoleaux> brrt: I'll pass your message to pamplemousse.

[12:25] <timotimo> "user-level statically defined tracing"

[12:25] <brrt> I think that concept is somewhat familiar...

[12:25] <timotimo> the short of it is: the compiled program has a nop in a specific position, and the elf "notes" section has a bunch of metadata that is valid at that particular position

[12:26] <timotimo> a "provider" as well as a "probe name" and any number of "arguments" that were defined in the source code by way of putting them into a macro

[12:26] <brrt> uhuh

[12:26] <timotimo> that's the simplest version of USDT probes that exist

[12:26] <timotimo> the next step up involves generating a header file from a specification that will also put a semaphore into the program's memory that can be queried by the user program to see if something is currently interested in the trace point

[12:27] <timotimo> that way you can generate some extra information that's only needed for tracing and would otherwise be overhead

[12:27] <timotimo> on a related note, i'd like to have macros that take the name of a struct and do the sizeof operation for you

[12:27] <timotimo> that way a trace point can be put in that reports the name of the type

[12:28] <timotimo> also, a hypothetical memory checker could associate struct names with memory positions

[12:28] <timotimo> which is perhaps less interesting

[12:29] <brrt> I'm not sure I follow... a macro can implement sizeof()?

[12:29] <timotimo> no, it'll put the "sizeof(BLAH)" in for you

[12:29] <timotimo> but by passing BLAH instead of sizeof(BLAH), the macro can do something with the name of the struct

[12:29] <timotimo> rather than only the size of the struct

[12:31] <timotimo> now you might wonder: is this only possible for things the C compiler sees? anything the JIT can do?

[12:31] <timotimo> i'm glad you would have asked!

[12:31] <timotimo> the current approach to dynamically defined tracing points is a fantastic hack

[12:32] <timotimo> there's a C library that generates a .so file that has the trace point information in it and links that stuff into the running program

[12:38] <timotimo> surely there's a tool that understands C and can let me do a full-codebase refactor of MVM_malloc and friends to a macro version?

[12:42] <timotimo> welp. custom perl6-based parser it is, then

[12:50] <timotimo> i mean it's probably better to have clang parse the thing and use that to find places that are applicable

[12:59] <timotimo> ooh the macro can also put a cast in front

[12:59] <timotimo> no more (MVMReallyLongTypeNameGoesHere *)MVM_calloc(5, sizeof(MVMReallyLongTypeNameGoesHere))

[13:06] *** brrt left
[13:40] *** brrt joined
[13:42] <timotimo> the patch is ready m'lord

[13:42] <brrt> you patched what?

[13:43] <timotimo> no, i patched who. what is on second PR

[13:43] <brrt> :-( my patch doesn't work, at any rate

[13:43] <timotimo> :o

[13:43] <timotimo> the fastcrash one?

[13:43] <timotimo> i kind of missed what that even was :(

[13:44] <brrt> the tl;dr is, i'm assigning to each live range, the set of permissible registers (as a bitmap), rather than the exact register-specification that was compiled by the tile compiler

[13:44] <brrt> but that doesn't work

[13:44] <timotimo> ah, that

[13:45] <timotimo> not sure why it's called "fastcrash" except maybe because it crashes fast?

[13:45] <brrt> yes

[13:45] <brrt> that's preciesly why

[13:45] <timotimo> damn

[13:45] <brrt> it will have a more detailed name, when I figure out why it crashes

[13:45] <timotimo> with that kind of attitude, it's no wonder it won't work ;)

[13:45] <brrt> :-P

[13:47] <timotimo> damn it, templates

[13:47] <timotimo> #define MVM_CALLOCOBJ(count, type_name) (DTRACE_PROBE2("moarvm", "callocobj", type_name, count), (type_name *)MVM_calloc((count), sizeof(type_name)))

[13:47] <timotimo> how do i do this right?

[13:48] <timotimo> type_name is something like the name of a struct, so i'll have to stringify it

[13:48] <timotimo> but it doesn't gett hat far

[13:48] <timotimo> src/core/alloc.h:3:42: error: expected expression before ‘do’

[13:48] <timotimo>     3 | #define MVM_MALLOCOBJ(count, type_name) (DTRACE_PROBE2("moarvm", "mallocobj", type_name, count), (type_name *)MVM_malloc((count) * sizeof(type_name)))

[13:48] <timotimo> (it points at DTRACE_PROBE2, so i'd assume it's implemented using the do { ... } while (0); trick)

[13:53] <timotimo> you get much better results when you search for "macro" instead of "template"

[13:58] <timotimo> but nothing seems to help?

[14:01] <brrt> gcc -E for to get the macro-expanded source code?

[14:02] <timotimo> how do i get make to spit out the commandline so i can put -E in there?

[14:04] <brrt> ehm...

[14:05] *** brrt left
[14:13] <timotimo> oooh, it's still MVM_STATIC_INLINE, so it expands to many many trace points

[14:24] <timotimo> MFW i accidentally put quotation marks in the actual name of the probes and wonder why they don't show up

[14:24] <timotimo> OTOH can you blame me with output like this:

[14:24] <timotimo> b'/home/timo/perl6/install/lib/libmoar.so' b'"moarvm"':b'"mallocobj"'

[14:30] <timotimo> MFW /usr/include/c++/9/bits/stl_vector.h:1042: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = USDT::Argument; _Alloc = std::allocator<USDT::Argument>; std::vector<_Tp, _Alloc>::reference = USDT::Argument&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]: Assertion '__builtin_expect(__n < this->size(), true)' failed.

[14:34] <sena_kun> C++ <3

[14:37] <timotimo> my mistake the entire time was using "arg0" when they start at 1?!

[14:45] *** zakharyas joined
[15:09] *** zakharyas left
[15:11] *** zakharyas joined
[15:13] <dogbert11> timotimo: any theories wrt this profiling failure? https://gist.github.com/dogbert17/daf2b432982693c66de1148148a074f6

[15:15] <timotimo> https://gist.github.com/timo/5cff2a0cbcfde9b9e171a2e36a19d11d - fascinating

[15:15] <timotimo> dogbert11: huh. good question.

[15:19] <dogbert11> if I turn off MVM_GC_DEBUG there are no panics but the profile itself looks busted, e.g. it claims that there was 1500 GC's

[15:19] <dogbert11> and the routines tab only contains one entry :(

[15:23] <timotimo> mhm

[15:26] <dogbert11> a mystery

[15:27] <Kaiepi> bastille% valgrind

[15:27] <Kaiepi> zsh: abort      valgrind

[15:27] <Kaiepi> well fuck

[15:28] <Kaiepi> guess i'll ask #openbsd how to get valgrind to run

[15:46] <timotimo> dogbert11: sorry i'm like up to my chin in this trace stuff

[16:53] <dogbert11> timotimo: no problem :)

[16:56] <timotimo> damn it, some recent change broke things

[16:57] <timotimo> and i don't know which changes are the most recent outside the file i just had open and that one's clean

[17:01] <timotimo> yay found the probleb

[17:03] <Geth> ¦ MoarVM/dtrace_probe_points_for_alloc: 4 commits pushed by (Timo Paulssen)++

[17:03] <Geth> ¦ MoarVM/dtrace_probe_points_for_alloc: 3bb7d426ec | spesh: P6opaque must mark facts used for unbox/decont ops

[17:03] <Geth> ¦ MoarVM/dtrace_probe_points_for_alloc: c0304596e5 | spesh: support unbox_i on embedded p6int in P6Opaque

[17:03] <Geth> ¦ MoarVM/dtrace_probe_points_for_alloc: 81b714179a | skip numification in mast nodes code

[17:03] <Geth> ¦ MoarVM/dtrace_probe_points_for_alloc: ab87efda5d | make type of malloc/fsa_alloc available to traces

[17:03] <Geth> ¦ MoarVM/dtrace_probe_points_for_alloc: review: https://github.com/MoarVM/MoarVM/compare/3bb7d426ec76^...ab87efda5dbd

[17:03] <timotimo> if anybody feels the desire to make the build system check if this feature is available and otherwise "do nothing" with the extra data, that would be swell

[17:10] *** evalable6 left
[17:11] *** evalable6 joined
[17:25] *** ggoebel joined
[17:58] *** ggoebel left
[18:21] *** zakharyas left
[18:50] *** domidumont left
[19:04] *** brrt joined
[19:10] *** zakharyas joined
[19:15] <brrt> I note my gratitude to whomever has shipped gdb with strawberry perl

[19:20] <timotimo> yo brrt, got ideas for interesting probe points to put into moar?

[19:20] <brrt> I think you mentioned how a probe worked, but not really what it's good for

[19:21] <timotimo> oh

[19:23] <timotimo> https://gist.github.com/timo/127c793d7a775d1b783d51887341d1f2

[19:23] <timotimo> check it out

[19:23] * brrt checking

[19:23] <brrt> oh, I did a dumb with the register allocator

[19:24] <timotimo> maybe i should put the code that generates these along with the results

[19:26] <timotimo> there you go

[19:27] <brrt> oh... this is for application-level tracing

[19:27] <brrt> isn't it?

[19:27] <brrt> this seems fairly interesting

[19:28] <timotimo> yeah

[19:28] <timotimo> it has support in the kernel

[19:29] <timotimo> did you see that it gives the name of structs that are getting malloced? :D

[19:29] *** brrt left
[19:30] <ugexe> i cant clone anything behind this hotel firewall to test, but https://github.com/rakudo/rakudo/blob/master/src/core/native_array.pm6#L1079-L1087 seems to be broken on HEAD but only on windows

[19:30] <timotimo> ugexe: whaaaaat

[19:30] <ugexe> https://ci.appveyor.com/project/rakudo/rakudo/branch/master/job/vw7clm2yrjr5pfdx#L4673

[19:31] <ugexe> they should both be 1999999000000

[19:31] <timotimo> m: say 1998119951808.base(16)

[19:31] <camelia> rakudo-moar a643b8be1: OUTPUT: «1D1393ADDC0␤»

[19:32] *** brrt joined
[19:33] <timotimo> m: say 1999999000000 - 1998119951808

[19:33] <camelia> rakudo-moar a643b8be1: OUTPUT: «1879048192␤»

[19:33] <timotimo> m: my int32 $foo = 2_000_000; say $foo

[19:33] <camelia> rakudo-moar a643b8be1: OUTPUT: «2000000␤»

[19:34] <timotimo> m: my int32 $accum; for ^2_000_000 { $accum += $_ }; say $accum

[19:34] <camelia> rakudo-moar a643b8be1: OUTPUT: «-1455759936␤»

[19:35] <timotimo> m: my uint32 $accum; for ^2_000_000 { $accum += $_ }; say $accum

[19:35] <camelia> rakudo-moar a643b8be1: OUTPUT: «2839207360␤»

[19:35] <brrt> ... another bug gone... and a new one

[19:35] <timotimo> keep your bugs fresh

[19:38] <timotimo> m: say ([\+] ^2_000_000).grep(* >= 1879048192, :k)

[19:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «(61303 61304 61305 61306 61307 61308 61309 61310 61311 61312 61313 61314 61315 61316 61317 61318 61319 61320 61321 61322 61323 61324 61325 61326 61327 61328 61329 61330 61331 61332 61333 61334 61335 61336 61337 61338 61339 61340 61341 61342 61343 6134…»

[19:38] <timotimo> m: say ([\+] ^2_000_000)[6130]

[19:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «18791515␤»

[19:39] <timotimo> *shrug*, very strange

[19:40] <ugexe> windows only

[19:40] <timotimo> yeah

[19:40] <timotimo> but ... why

[19:40] <timotimo> can you run it with jit disabled?

[19:41] <ugexe> i cant clone anything

[19:41] <timotimo> ah, that's the official rakudo appveyor

[19:43] <brrt> now, every register is $rbx

[19:43] <ugexe> bumping rakudos moarvm revision one by one until it fails could bitsect it

[19:45] * brrt wonders if bitsect is a typo or just really appropriate

[20:01] *** zakharyas left
[20:03] <brrt> new bug....

[20:09] *** brrt left
[20:50] *** brrt joined
[21:03] <brrt> success at last

[21:05] <timotimo> \o/

[21:05] <timotimo> i can't seem to get usable stack traces from malloc ...

[21:11] <brrt> that's odd

[21:12] <timotimo> when i trace the mallocobj probe i get a whole bunch of good traces, then just "unknown" again

[21:12] <timotimo> also, randomly stumbling over some stack traces with lots and lots of add_bb_facts on the stack

[21:20] <timotimo> fascinating. when i add a "sleep 1" at the end of the perl6 program i get more stack traces

[21:20] <timotimo> so perhaps the unwinding of the stack trace happens a bit late, and by that point the executable image is already gone

[21:20] <Geth> ¦ MoarVM/jit-expr-float: 3aa29c37f7 | (Bart Wiegmans)++ | 3 files

[21:20] <Geth> ¦ MoarVM/jit-expr-float: [JIT] Live ranges are given register set

[21:20] <Geth> ¦ MoarVM/jit-expr-float:

[21:20] <Geth> ¦ MoarVM/jit-expr-float: Decode the register spec into a register set during live range

[21:20] <Geth> ¦ MoarVM/jit-expr-float: determination. Merging register requirements is then an

[21:20] <Geth> ¦ MoarVM/jit-expr-float: bitset-union-operation. Next step is choosing a live range to spill

[21:20] <Geth> ¦ MoarVM/jit-expr-float: based on the requesting live range permissible set (to ensure that we

[21:20] <Geth> ¦ MoarVM/jit-expr-float: release a floating point register for a floating point value, and a

[21:21] <Geth> ¦ MoarVM/jit-expr-float: GPR register for an integer/pointer value).

[21:21] <Geth> ¦ MoarVM/jit-expr-float: review: https://github.com/MoarVM/MoarVM/commit/3aa29c37f7

[21:35] *** brrt left
[21:39] *** lizmat joined
[23:00] <dogbert11> perhaps this might prove useful https://github.com/nokia/memory-profiler

