[00:51] *** Kaiepi left
[00:52] *** Kaiepi joined
[01:07] *** Kaiepi left
[01:08] *** Kaiepi joined
[01:14] *** Kaypie joined
[01:15] *** Kaiepi left
[01:20] *** Kaypie left
[01:22] *** Kaiepi joined
[06:38] *** Geth left
[06:39] *** Geth joined
[06:50] *** domidumont joined
[09:19] *** camelia joined
[09:19] <nine> m: say "alive again"

[09:20] <camelia> rakudo-moar 650bbc1d2: OUTPUT: «alive again␤»

[10:05] <kawaii> samcv: was planning on starting the work on the new release in 2 - 3 hours, does that work for you?

[10:08] <timotimo> nine: how come there's no code in generate_operand for callsite? there's exactly one op that uses it, which is prepargs, don't we ever output that?

[10:10] <timotimo> like, surely that'd need to output something

[10:10] <timotimo> otherwise the length of the piece of bytecode would be wrong and it'd asplode violently inside the validator?

[10:16] <timotimo> there must be some other piece of code that handles this; in that case i'll probably throw the generator out, or replace it with code that just dies, and add a comment why that is the case

[10:19] <nine> timotimo: yeah, $call_gen et al in src/vm/moar/QAST/QASTOperationsMAST.nqp generate the code for prepargs directly

[10:21] <timotimo> cool, i'll put that in there

[10:22] <timotimo> this gets rid of the annoying "use of Any in string context" warning for update_ops.p6

[10:30] *** lizmat left
[10:33] *** lizmat joined
[10:33] <timotimo> nine: may i ask why the last part of the const_i* ops are wrapped in curly braces?

[10:34] *** sena_kun joined
[10:35] <timotimo> oh

[10:35] <timotimo> for lexical variable scope?

[10:36] <timotimo> any reason in particular to not use the name of the operand?

[10:43] <timotimo> i get the impression that none of these functions are typically jitted or even speshed

[10:47] <timotimo> ok, it just requires a lot of calls before it gets speshed

[10:48] <nine> Yes, it's for scoping

[10:48] <nine> Adding the curlies was probably just the easiest solution

[10:51] <timotimo> there's also both an "int16 $op1" and a "if $value < -32768 || ..." thing in there

[10:51] <timotimo> so, i'm considering throwing that out

[10:52] <timotimo> fortunately, the braces for scoping get flattened by nqp's optimizer

[10:52] <timotimo> so that's already good

[10:54] <timotimo> but yeah, the range checks should probably go :)

[11:03] <nine> Oh....yes, now that you mention that

[11:13] <timotimo> i'm on it already

[11:13] <timotimo> that could give us a percent or two speedup during Stage MAST

[11:13] <timotimo> or which stage name this has

[11:14] <timotimo> and if there's no range check, i also see no reason for a "my int $value", and then the block also gets superfluous

[11:20] <timotimo> first i'm restoring the whitespace behaviour so that the "git diff" of lib/MAST/Ops.nqp isn't massive

[11:30] <timotimo> oh what in the everliving... ?!

[11:31] <timotimo> nine: https://github.com/MoarVM/MoarVM/blob/master/tools/update_ops.p6#L144-L149 - they look wrong; are they actually dead code?

[11:33] <timotimo> oh

[11:33] <timotimo> writeuint is an actual sub in that file

[11:33] <timotimo> never mind then

[11:37] <kawaii> Is there anyone else here able to tag a 2019.05 release for Moar? :)

[11:41] <timotimo> i can, but it won't have the fancy "verified" badge and that'd not be cool :(

[11:47] <kawaii> I'll be around pretty much all day then if someone comes along :)

[11:47] <timotimo> i assume you pinged samcv already?

[11:47] <kawaii> timotimo: yep

[11:48] <timotimo> i see you discussed timezones, but not a time-of-day?

[11:49] <kawaii> we didn't but like I said, today is mostly a free day for me so I'm happy to fit in with their schedule

[11:52] <robertle> if for some perverse reason I would like to run something on moar but without nqp/perl6, how would I learn more about the input format?

[11:52] <robertle> I vaguely recall having seen some perl5 modules that represented the different MAST node types, but can't find that now. did I imagine this?

[11:53] <timotimo> robertle: you'll want to use A Compiler™, which nqp would offer

[11:53] <timotimo> but you don't have to compile something that ends up with dependencies on nqp

[11:53] <timotimo> have you seen the rakudo & nqp internals workshop slides?

[11:54] <robertle> so, you are saying "don't, use nqp"?

[11:55] <timotimo> not necessarily, but you'll probably have the easiest time basing your compiler on nqp

[11:55] <timotimo> one important thing that goes into a moarvm file is the "serialized blob"

[11:55] <robertle> ok, I'll look at these slides again. last time i did, I was zoning out quite quickly :)

[11:56] <timotimo> those are objects (including types), and moarvm generates the results of those from stuff in src/6model/reprs/ and src/core/bytecode.c or something

[11:56] <timotimo> it's not hard to steal that code and/or port it to some other language, but it is a bunch of work, and probably not terribly easy to debug once you have something running

[11:57] <timotimo> anyway, you'll want to check out moarvm's lib/MAST/Ops.nqp to have a look at how frames of code are written out, and a bunch more stuff in nqp's src/vm/moar/QAST/QASTOperationsMAST.nqp and QASTCompilerMAST.nqp

[12:04] <timotimo> changing the bytecode writing stuff and passing stresstest sounds good enough to me to put my changes in for the release

[12:49] <samcv> kawaii, this evening i'll be releasing

[12:49] <kawaii> samcv: thanks, just ping me an hour or so before so I can be aware and do my parts for nqp and rakudo too :)

[12:49] <samcv> ok :)

[12:50] <timotimo> found another little optimization opportunity, yay

[12:51] <timotimo> we were only ever specializing unbox_i in P6Opaque objects if it had a p6bigint embedded, not if it was just a p6int

[12:51] <timotimo> which the mast compiler uses a little bit

[12:51] *** Geth left
[12:52] *** Geth joined
[12:53] *** AlexDaniel left
[12:53] *** AlexDaniel joined
[14:07] <timotimo> hmm, i can double-devirt associative and positional access to objects that have a positional or associative delegate slot

[14:07] <timotimo> but i'm not totally sure how best to put it in the jit

[14:07] <timotimo> since i'll have to put a little offset calculation in one of the arguments

[14:08] <timotimo> oh, can't we use a literal pointer in the jit whenever we pass an STABLE of something we're already guaranteed to know the type of? we'd probably only have to check beforehand if the stable lives in gen2 so it won't move

[16:38] *** zakharyas joined
[19:02] *** domidumont left
[19:05] <samcv> kawaii, i have all but 25 changelog entries processed. but i will have to finish it tomorrow. sorry about that

[19:05] <kawaii> samcv: no problem, I am free most of tomorrow too since it's a national holiday here

[19:05] <samcv> i got through 88% of them though. so we can release tomorrow if that works for you.

[19:05] <kawaii> Yes that's fine with me :)

[19:06] <samcv> okay great. i'll be online during the day in that case

[19:13] <timotimo> samcv: is the work you've done so far in the wiki so i could have a look?

[19:17] <MasterDuke> timotimo: have you done any experiments to see if LTO helps moarvm?

[19:18] <timotimo> don't think so

[19:41] <MasterDuke> well, turns out it makes stage parse 1s slower

[19:44] <nine> MasterDuke: 1s sounds like it's within noise

[19:46] <timotimo> probably

[19:46] <MasterDuke> any other ideas for things to test?

[19:50] <timotimo> hm, you mean like very general techniques and flags we could set/use?

[19:50] <MasterDuke> btw, anybody have an opinion on https://github.com/MoarVM/MoarVM/pull/935 ?

[19:51] <timotimo> looks sensible

[19:51] <MasterDuke> timotimo: that too, but i was actually thinking of ways to test if LTO was beneficial or not

[19:52] <timotimo> oh, hmm

[19:52] <timotimo> not sure

[19:53] <timotimo> using a more deterministic measuring mode like callgrind could be a good idea (use MVM_SPESH_BLOCKING with that)

[19:54] <MasterDuke> i think https://github.com/MoarVM/MoarVM/pull/935 is a pretty safe change, but there is a release planned for tomorrow. merge now or wait?

[19:56] <timotimo> i don't see a way for it to break things; how does gcc react when a too-old version encounters that diagnostic setting?

[19:56] <MasterDuke> dunno

[20:49] *** MasterDuke left
[20:50] *** Geth left
[20:51] *** Geth joined
[21:36] *** Kaiepi left
[21:37] *** Kaiepi joined
[21:50] *** robertle left
[21:50] *** zakharyas left
[22:21] *** Kaiepi left
[22:25] *** harrow left
[22:31] *** harrow joined
[22:37] *** Kaiepi joined
[22:39] *** Kaiepi left
[22:40] *** Kaiepi joined
[23:28] *** sena_kun left
[23:38] *** MasterDuke joined
[23:38] *** MasterDuke left
[23:38] *** MasterDuke joined
