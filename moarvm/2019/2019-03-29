[01:14] <MasterDuke> timotimo: any thoughts on https://github.com/MoarVM/MoarVM/pull/1073 ?

[04:57] *** unicodable6 left
[04:57] *** bloatable6 left
[04:57] *** quotable6 left
[04:57] *** undersightable6 left
[04:57] *** reportable6 left
[04:57] *** nativecallable6 left
[04:57] *** coverable6 left
[04:57] *** squashable6 left
[04:57] *** statisfiable6 left
[04:57] *** releasable6 left
[04:57] *** benchable6 left
[04:57] *** committable6 left
[04:57] *** greppable6 left
[04:57] *** bisectable6 left
[04:57] *** notable6 left
[04:57] *** shareable6 left
[04:57] *** evalable6 left
[04:58] *** evalable6 joined
[04:58] *** squashable6 joined
[04:58] *** reportable6 joined
[04:58] *** releasable6 joined
[04:59] *** statisfiable6 joined
[04:59] *** greppable6 joined
[05:00] *** undersightable6 joined
[05:00] *** notable6 joined
[05:00] *** benchable6 joined
[05:00] *** bisectable6 joined
[05:01] *** committable6 joined
[05:01] *** unicodable6 joined
[05:01] *** quotable6 joined
[05:02] *** bloatable6 joined
[05:02] *** coverable6 joined
[05:02] *** nativecallable6 joined
[05:02] *** shareable6 joined
[05:06] *** harrow left
[05:11] *** harrow joined
[06:24] *** domidumont joined
[07:14] *** domidumont left
[07:29] *** domidumont joined
[08:13] *** nebuchadnezzar left
[08:13] *** nebuchadnezzar joined
[08:20] *** harrow left
[08:30] *** harrow joined
[08:47] *** robertle_ joined
[08:48] *** squashable6 left
[08:51] *** squashable6 joined
[08:52] <timotimo> MasterDuke: i wonder if there are any stresstests that have abs_n in them

[08:53] <timotimo> but otherwise if the tests all succeed, then the fabs and the interpreter implementation are probably equivalent (or we have some missing tests to write)

[09:26] *** zakharyas joined
[10:52] *** domidumont left
[11:54] *** zakharyas left
[12:42] *** domidumont joined
[13:01] *** lucasb joined
[13:44] *** zakharyas joined
[13:54] <lizmat> so I thought I'd let "zef" create a profile to find out what it does to install a distribution

[13:54] <lizmat> so I added "--profile" to the #!/usr/bin/env perl6 shebang

[13:55] <lizmat> this seems to *always* result in either a segfault or a MoarVM panic: Internal error: zeroed target thread ID in work pass

[13:56] <lizmat> timotimo jnthn is this something should put in an issue, or is that something that is known  already ?

[13:56] <lizmat> also: for these cases, I think the --profile functionality should also be settable using an environment variable ?

[14:16] <ugexe> i think that happens because zef uses exit(...)

[14:16] <ugexe> you can comment them all out, or set &*EXIT to be a no op

[14:17] <ugexe> and you dont need zef to be installed to profile it, you can just do `perl6 --profile -I. bin/zef install MyFoo`, so you dont have to keep reinstalling when making those changes

[14:17] <ugexe> (comment out exit() or override &*EXIT in Zef::CLI)

[14:22] *** AlexDaniel joined
[14:34] <lizmat> that sorta implies that having started with --profile, should override &*EXIT ?

[14:34] <lizmat> at least fro now ?

[14:36] <ugexe> well it might just be &*EXIT should do exactly what it was told to do, just with a delay (i dont know if a delay solves this)

[14:37] <ugexe> eh actually a delay probably doesn't help anything

[14:38] <ugexe> it would just get profiled itself

[14:50] <lizmat> perhaps a "die" inside the &*EXIT routine would do the trick, maybe not

[14:50] <AlexDaniel> this ticket needs some help: https://github.com/MoarVM/MoarVM/pull/1072

[14:51] <AlexDaniel> I kinda want to just hit merge but it feels wrong to do that somewhat blindly

[15:00] *** robertle_ left
[15:02] *** robertle_ joined
[15:06] <jnthn> AlexDaniel: I'd agree with your assessment that we should benchmark it some more

[15:06] <jnthn> That said, the vast majority of our short-lived allocations do *not* go through malloc

[15:07] <jnthn> (Still more than would be ideal though)

[15:07] <AlexDaniel> jnthn: am I right in thinking that 128KiB is way too low?

[15:10] <jnthn> hah, I just read this bit from the linked article: "The manual is wrong! Analysis of the source code tells me that it frees all eligible OS pages, not just those at the top."

[15:10] <jnthn> That makes it quite a lot more useful :P

[15:12] <jnthn> The "best" value would probably depend on program behavior. Generally, programs that asked for memory once will ask for it again.

[15:12] <jnthn> But it's of course an over-generalization; some programs have different phases with different memory behaviors.

[15:13] <timotimo> i still want someone to put that malloc heap analyzer into moar :P

[15:18] <jnthn> AlexDaniel: To be clearer: it depends on what kinds of allocations the program does. It's possible that a program could be doing lots of allocations, but moar satisfies them all out of the GC nursery or fixed size allocator and so never asks malloc for more.

[15:19] <jnthn> My gut feeling would also be to set it a little higher than 128KB though

[15:20] <jnthn> But I don't really have an intuition of the cost of being wrong. Just another page fault?

[15:20] <jnthn> Or a lot more?

[15:20] <jnthn> Also, I dunno the cost of calling malloc_trim :)

[15:23] *** AlexDani` joined
[15:24] *** AlexDaniel left
[15:25] *** sivoais left
[15:26] *** sivoais joined
[15:26] *** camelia left
[15:26] *** camelia joined
[15:38] <ugexe> readdir isn't thread safe if two threads need to read from the same dirstream. does that mean this is not thread safe? `readdir(data->dir_handle);`

[15:39] <ugexe> or is getting into that situation to begin with already a problem

[15:43] <jnthn> I think from a Perl 6 perspective, such handles are never exposed anyway; `dir` always returns a new sequence that does an open/read*/close

[15:52] *** robertle_ left
[16:04] *** robertle_ joined
[16:07] *** Guest5277 left
[16:14] <ugexe> ah right, directory handles can't be opened in Perl 6

[16:19] *** robertle_ left
[16:24] *** squashable6 left
[16:28] *** squashable6 joined
[16:29] <ugexe> libuv just added uv_fs_*dir() functions, but comparing implementation the main difference seems to be on windows it ignores ERROR_FILE_NOT_FOUND error specifically instead of breaking

[16:31] <ugexe> break;ing ^

[16:33] *** zakharyas left
[16:33] *** domidumont left
[16:35] *** AlexDani` left
[17:25] *** domidumont joined
[18:09] *** squashable6 left
[18:14] *** squashable6 joined
[19:14] *** squashable6 left
[19:19] *** squashable6 joined
[19:30] *** AlexDani` joined
[19:44] *** squashable6 left
[19:49] *** squashable6 joined
[20:14] *** domidumont left
[20:14] *** AlexDani` left
[20:20] *** lucasb left
[23:10] *** camelia left
[23:10] *** camelia joined
[23:14] *** camelia left
[23:45] *** AlexDani` joined
[23:46] *** AlexDani` is now known as AlexDaniel

[23:46] *** AlexDaniel left
[23:46] *** AlexDaniel joined
