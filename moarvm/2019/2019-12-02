[00:12] *** patrickz joined
[00:17] *** patrickb left
[00:17] *** lucasb left
[00:49] *** patrickz left
[01:02] *** sena_kun left
[01:15] *** sena_kun joined
[01:19] *** sena_kun left
[01:51] *** greppable6 left
[02:05] *** greppable6 joined
[06:33] *** robertle left
[06:33] *** sena_kun joined
[07:01] *** sena_kun left
[08:52] *** zakharyas joined
[08:59] *** domidumont joined
[10:00] *** domidumont left
[10:08] *** domidumont joined
[12:17] *** zakharyas left
[12:37] *** lucasb joined
[14:04] *** zakharyas joined
[14:22] *** sena_kun joined
[14:34] *** zakharyas left
[14:36] *** zakharyas joined
[14:41] *** sena_kun left
[15:22] *** zakharyas left
[15:23] *** zakharyas joined
[16:07] *** squashable6 left
[16:10] *** squashable6 joined
[16:33] <Kaiepi> is this ok to merge now? https://github.com/MoarVM/MoarVM/pull/1214

[16:36] <Kaiepi> nine?

[16:43] *** domidumont left
[16:54] *** AlexDani` joined
[16:55] *** zakharyas left
[16:56] *** AlexDaniel left
[16:57] <nine> Kaiepi: will have a look later on. Have to teach now

[17:03] *** domidumont joined
[17:26] <Kaiepi> aight, thanks

[17:31] *** AlexDani` is now known as AlexDaniel

[17:31] *** AlexDaniel left
[17:31] *** AlexDaniel joined
[17:49] <lizmat> And another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2019/12/02/2019-48-released-advent/

[18:01] *** sena_kun joined
[18:46] <dogbert17> nine, jnthn: does this SEGV look familiar? https://gist.github.com/dogbert17/bb53b67527bdfd603c5606abbbc337fc

[19:02] *** sena_kun left
[19:19] *** sena_kun joined
[19:54] *** lizmat_ joined
[19:56] *** xiaomiao joined
[20:01] <nine> dogbert17: no, and it's hard to imaginge how this could fail

[20:02] *** lizmat left
[20:02] *** releasable6 left
[20:02] *** notable6 left
[20:02] *** bisectable6 left
[20:02] *** evalable6 left
[20:02] *** DrEeevil left
[20:03] <dogbert17> nine: haven't been able to repro it either

[20:04] <nine> too bad

[20:05] <dogbert17> that's three obscure SEGV's in the last two days

[20:05] <nine> Only makes sense to me if the stats were free()d in the meantime

[20:07] <dogbert17> I hardly dare ask, but can it have anything to do with recent fixes in this area?

[20:12] <nine> Sure. There's one by jnthn++ and a couple by me.

[20:16] <dogbert17> the annoying thing is that these crashes are annoyingly random and all attempts to repro fails :(

[20:32] <nine> Kaiepi: can you please squash "Improve UNIX socket path error message, e => error" into "Clean up MVM_io_resolve_host_name and make it more portable"?

[20:34] <MasterDuke> dogbert17: have you seen anything odd with t/spec/S03-operators/repeat.t? on random runs i get a bunch of output like `Use of uninitialized value element of type Any in string context.Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.  in sub throws-like at /home/dan/Source/perl6/rakudo/lib/Test.pm6 (Test)

[20:34] <MasterDuke> line 605WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was:Cannot convert NaN to Int:   in block  at /home/dan/Source/perl6/rakudo/lib/Test.pm6 (Test) line 614  in sub subtest at /home/dan/Source/perl6/rakudo/lib/Test.pm6 (Test) line

[20:34] <MasterDuke> 420  in sub throws-like at /home/dan/Source/perl6/rakudo/lib/Test.pm6 (Test) line 606  in block <unit> at t/spec/S03-operators/repeat.t line 27`

[20:35] <MasterDuke> i once i had a segv in the middle of a spectest run, but i haven't been able to repro

[20:37] <Kaiepi> nine, done

[20:43] <dogbert17> MasterDuke: yes, I see the same things if I run that file

[20:45] <MasterDuke> huh

[20:48] <nine> Also annoying: there's a segfault in an Inline::Perl5 test that only appears on a 32 bit runtime. I just managed to reproduce some segfault on 64 bit with MVM_SPESH_NODELAY and MVM_SPESH_BLOCKING, but I ony get a broken backtrace :/

[20:51] *** bisectable6 joined
[20:51] *** notable6 joined
[20:53] *** releasable6 joined
[20:54] *** evalable6 joined
[20:59] <nine> Nevertheless I could actually find out where it crashes by going through the spesh threads's tc: p *tc->instance->threads->body.next->body.tc->cur_frame->static_info->body.name

[21:00] <MasterDuke> anything interesting?

[21:02] *** sena_kun left
[21:02] <samcv> good *

[21:03] <Geth> Â¦ MoarVM: 0074094c21 | (Ben Davies)++ | src/io/syncsocket.c

[21:03] <Geth> Â¦ MoarVM: Clean up the comment for MVM_io_resolve_host_name

[21:03] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0074094c21

[21:03] <Geth> Â¦ MoarVM: cd64bf94c4 | (Ben Davies)++ | src/io/syncsocket.c

[21:03] <Geth> Â¦ MoarVM: Clean up MVM_io_resolve_host_name and make it more portable

[21:03] <Geth> Â¦ MoarVM:

[21:03] <Geth> Â¦ MoarVM: UNIX socket addresses were being handled in a way that would only work

[21:03] <Geth> Â¦ MoarVM: properly on Linux. Handle paths in a more portable way, and when the

[21:03] <Geth> Â¦ MoarVM: platform used probably doesn't support UNIX sockets, say so.

[21:03] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cd64bf94c4

[21:03] <Geth> Â¦ MoarVM: 34813e1813 | niner++ (committed using GitHub Web editor) | src/io/syncsocket.c

[21:03] <Geth> Â¦ MoarVM: Merge pull request #1214 from Kaiepi/dns

[21:03] <Geth> Â¦ MoarVM:

[21:03] <Geth> Â¦ MoarVM: [IP6NS Grant] Clean up and make MVM_io_resolve_host_name more portable

[21:03] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/34813e1813

[21:05] <nine> MasterDuke: maybe. It seems to fail in a call to a different function than in the 32 bit fail.

[21:08] <MasterDuke> vrurg: you know git submodules. what are the magic incantation i should make to create a PR updating MoarMV's 3rdparty/libtommath to the upstream recent v1.2 release?

[21:14] <dogbert17> I can't even run the tests, from a cloned repo, that comes with Inline::Perl5, I get this:

[21:15] <dogbert17> ype check failed in binding to parameter '$library'; expected IO::Path but got Slip (Empty)

[21:15] <dogbert17>     in sub guess_library_name at /home/dogbert/.rakudobrew/versions/moar-master/install/share/perl6/core/sources/947BDAB9F96E0E5FCCB383124F923A6BF6F8D76B (NativeCall) line 214

[21:15] <nine> huh?

[21:16] <dogbert17> I cloned Inline::Perl5 and ran 'perl6 -Ilib t/argv.t'

[21:16] <nine> dogbert17: did you run configure.pl6 first?

[21:16] <nine> MasterDuke: different called function but actually the same failure mode!

[21:17] <samcv> MasterDuke, well that is MoarVM/libtommath. so you would want to cd into 3rdparty/libtommath and then `git remote add upstream $libtommath-upstream-url`. `git fetch upstream master`, then `git merge upstream/master`

[21:17] <samcv> then hopefully there are no merge conflicts

[21:17] *** sena_kun joined
[21:18] <nine> Oh, and disabling spesh makes the issue disappear on i586, giving further indication that it's indeed the same issue. Which means that I can reproduce it now in my normal dev environment :)

[21:18] <dogbert17> nine: nope, I was too stupid so I ignored the README.md :(

[21:19] <dogbert17> it works now, which test is failing with a segv (have a 32 bit vm)

[21:19] <nine> t/from.t

[21:19] <dogbert17> cool

[21:21] <dogbert17> ran it a few times without any problems

[21:22] <nine> Of course now the question is: how can spesh cause this issue?

[21:29] <dogbert17> ha, now it failed when I built the latest version

[21:29] <dogbert17> it worked without a hitch on 'This is Rakudo version 2019.11-53-g1945b9d27 built on MoarVM version 2019.07.1-322-g8d0b50d3f'

[21:32] <nine> Yeah, it's probably my NativeCall fix

[21:34] *** domidumont left
[21:34] <dogbert17> I'm building the previous rakudo version, c16b5a204fea5b3a3bb74b0ceea1ba1b907e9365, atm to test that

[21:43] <dogbert17> and on that version the test passes

[21:49] <nine> Well...I'll have another look tomorrow

[22:18] <MasterDuke> samcv: i believe their new version incorporates or makes obe all our changes. i've fetched and then checked out their v1.2.0 and moarvm/nqp/rakudo all build and pass tests

[22:46] *** lizmat_ is now known as lizmat

[22:47] *** lucasb left
[22:51] <samcv> MasterDuke, well then i'd check out our version, do `git merge` like i said above. then do `git diff upstream-version`. then apply that changeset on top of the merge commit

[22:52] <samcv> `git diff > diffs && patch -p1 diffs && git add -u && git commit`

[23:02] *** sena_kun left
[23:05] <MasterDuke> hm. but wouldn't it make more sense to use upstream unmodified? i.e., instead of the steps you mention, just make a clean break so we don't have different commit ids from upstream?

[23:16] *** sena_kun joined
