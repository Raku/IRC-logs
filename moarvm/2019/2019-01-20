[01:54] *** lizmat left
[02:38] *** Kaiepi left
[03:49] *** MasterDuke left
[04:41] *** Kaiepi joined
[04:41] *** p6bannerbot sets mode: +v Kaiepi

[08:55] *** AlexDaniel left
[09:42] *** lizmat joined
[09:42] *** p6bannerbot sets mode: +v lizmat

[11:09] <nine> Does a Deopt Inline annotation on a sp_p6oget_o actually do anything? The sp_p6oget_o cannot fail and cannot cause a deoptimizatoin anyway.

[11:39] <nine> I think I solved my performance conundrum!

[11:39] <nine> My best theory is that it's a bad inlining decision. The performance optimization in the branch is removal of unused args. That brings those subs below spesh's args limit.

[11:40] <nine> The speshed version of the code is simply small enough to inline. Enabling the profiler however enlarges the code again so it's above the limit.

[11:40] <nine> It seems like in this case inlining is simply the wrong thing to do.

[11:48] <nine> .tell timotimo is there a way to have profiling ops not count towards the inlining limit? Apparently they can change performance behavior a lot by enlarging the bytecode.

[11:48] <yoleaux> nine: I'll pass your message to timotimo.

[12:37] *** MasterDuke joined
[12:37] *** p6bannerbot sets mode: +v MasterDuke

[12:37] *** MasterDuke left
[12:37] *** MasterDuke joined
[12:37] *** herbert.freenode.net sets mode: +v MasterDuke

[12:37] *** p6bannerbot sets mode: +v MasterDuke

[12:40] <nine> And indeed! Just preventing p5_call_gv (the wrapper sub generated by NativeCall) from getting inlined cuts down runtime by more than 25 %!

[12:52] <nine> .tell jnthn do you have any idea for my inlining issue? https://colabti.org/irclogger/irclogger_log/moarvm?date=2019-01-20#l10 I'd very much like to get that 10 % performance improvement instead of a 25 % slowdown :)

[12:52] <yoleaux> nine: I'll pass your message to jnthn.

[13:18] *** AlexDaniel joined
[13:18] *** p6bannerbot sets mode: +v AlexDaniel

[15:03] *** domidumont joined
[15:04] *** p6bannerbot sets mode: +v domidumont

[16:09] *** zakharyas joined
[16:10] *** p6bannerbot sets mode: +v zakharyas

[16:14] *** domidumont left
[16:14] *** domidumont joined
[16:15] *** p6bannerbot sets mode: +v domidumont

[16:17] *** domidumont left
[16:18] *** domidumont joined
[16:18] *** p6bannerbot sets mode: +v domidumont

[17:20] *** lucasb joined
[17:20] *** p6bannerbot sets mode: +v lucasb

[17:42] *** dogbert11 left
[18:05] *** domidumont left
[18:21] *** domidumont joined
[18:22] *** p6bannerbot sets mode: +v domidumont

[20:15] *** domidumont left
[20:31] <jnthn> nine: Do you have instructions on how I can reproduce it and exactly what is being inlined that hurts? Normally inlining is a win, but either a) the inlining prevents JIT or b) we are doing a lot of deopt in the inlined thing and that somehow hurts

[20:31] <yoleaux> 12:52Z <nine> jnthn: do you have any idea for my inlining issue? https://colabti.org/irclogger/irclogger_log/moarvm?date=2019-01-20#l10 I'd very much like to get that 10 % performance improvement instead of a 25 % slowdown :)

[21:16] <timotimo> nine: if you could give me a spesh log of that situation with inlined and not inlined, that could be interesting. perhaps there's an op in the wrapper sub that prevents jit? that seems rather unlikely, but maybe not?

[21:22] *** dogbert17 joined
[21:23] *** p6bannerbot sets mode: +v dogbert17

[21:50] *** zakharyas left
[22:32] <Geth> Â¦ MoarVM: ugexe++ created pull request #1037: Add uname op

[22:32] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1037

[23:08] *** lucasb left
