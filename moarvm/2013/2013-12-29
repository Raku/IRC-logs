[00:13] *** ssutch joined
[00:20] *** ssutch joined
[00:23] *** benabik joined
[00:33] *** ssutch joined
[00:40] *** ssutch joined
[00:47] *** ssutch joined
[00:49] *** colomon joined
[00:56] *** ssutch joined
[01:12] *** ssutch joined
[01:20] *** ssutch joined
[01:47] *** ssutch joined
[01:53] *** ssutch joined
[02:00] *** ssutch joined
[02:12] *** ssutch joined
[02:27] *** ssutch joined
[02:38] *** ssutch joined
[02:48] *** ssutch joined
[02:53] <timotimo> my friend is now writing (with a tiny bit of my help) python code for gdb to isnpect stack frames for things that aren't but should be reachable from one of the roots

[02:54] *** ssutch joined
[03:00] *** ssutch joined
[03:01] <TimToady> friend++

[03:29] <diakopter> heh

[03:36] <timotimo> i see debug output on his screen

[03:39] <TimToady> Speak "friend" and press ENTER.

[03:42] <timotimo> how do i find what -> allocate calls in MoarVM's source?

[03:45] <timotimo> found it

[03:45] <timotimo> it's static allocate functions in the repr codes

[03:45] <timotimo> i need to pack some stuff and go to bed, i'm getting pretty tired

[03:45] <timotimo> my friend, however, is still wide awake :)

[03:50] <timotimo> actually, he's goning to bed, too

[05:22] *** cognominal joined
[09:00] <FROGGS> morning

[09:08] *** _ilbot joined
[10:42] *** isBEKaml joined
[10:55] <isBEKaml> Hi, does moarvm have support for building on cygwin?

[10:58] <FROGGS> not_gerd did some patches for this scenario, but I never tested it

[11:00] <isBEKaml> well, I just tried building it and it failed right at the first step over pthread posix barriers. I guess cygwin doesn't support it and moarvm assumes it does.

[11:01] <isBEKaml> also, perl's $^O gives cygwin but moarvm took it to be unix.

[11:03] <FROGGS> isBEKaml: patches welcome :o)

[11:03] <FROGGS> because it is hard to fix these things on a non windows+cygwin platform

[12:07] <isBEKaml> ok, I got some way past that.

[12:08] <isBEKaml> now, I'm not sure if I should be using WIN32_PLATFORM while building on cygwin. I'm removing that to see how far I can go.

[12:09] <isBEKaml> that is, build on cygwin fails on src/platform/win32/io.o task.

[12:28] *** isBEKaml_ joined
[12:30] *** isBEKaml joined
[13:21] <nwc10> [Coke]: you're building MoarVM on OS X, right? If so, is all happy with dylib loading once it's installed?

[13:55] *** isBEKaml joined
[15:20] *** brother joined
[15:29] *** hoelzro_ joined
[15:42] *** isBEKaml joined
[15:43] <isBEKaml> Is this just me or a really obvious miss? https://github.com/MoarVM/MoarVM/blob/master/src/platform/win32/io.c - is windows header set somewhere?

[15:55] <nwc10> nursery torture now down to 92K and still OK

[15:55] <nwc10> build times increasing

[15:56] <nwc10> figured I could run 3 in parallel, so did

[15:56] <nwc10> (the machine has enough RAM and CPU)

[16:05] <isBEKaml> okay guys, I'm signing off now. here's my work so far(bad or otherwise :-)): https://gist.github.com/anonymous/8171888

[16:05] <isBEKaml> feel free to pick good ones or reject them altogether.

[16:06] <isBEKaml> 'night, folks.

[16:11] <timotimo> nwc10: we are currently walking up the stack fro every invocation of MVM_gc_allocate_object and looking at what things are not rooted from the C stack

[16:11] <timotimo> do you think that's helpful?

[16:11] <timotimo> we get lots of false positives, though, tsill

[16:12] <timotimo> do you have a method i can use to figure out if some pointer is rooted?

[16:12] <nwc10> I honestly don't know. I'm suspicious that it will have far too many false positives

[16:13] <nwc10> I don't know conclusively. I know that if you push something to temporarily root it, the call is into MVM_gc_root_temp_push()

[16:13] <timotimo> where do i find the bounds of the current tospace?

[16:13] <nwc10> and that puts them into the array tc->temproots

[16:13] <nwc10> so everything in *that* array is rooted

[16:13] <timotimo> yeah, i look through all of those

[16:13] <timotimo> as well as the permroots

[16:13] <timotimo> and the threads, compiler_registry, hllsyms and clargs

[16:14] <[Coke]> nwc10: my day to day box is OS X, but I'm having failures on straight linux (diakopter's host06 box)

[16:15] <nwc10> does -rpath work on your version of darwin? (to get an installed moar executable that can find its dylib) ?

[16:16] <[Coke]> I haven't touched moar on osx in a while. checking.

[16:16] <timotimo> stuff from the tospace start with 0x7777fff or something like that?

[16:16] <timotimo> 7fffff

[16:17] <timotimo> i think i'm not yet looking through the registers, as those are rooted, too

[16:17] <nwc10> to space starts at nursery_tospace in the thread context

[16:17] <nwc10> and from space starts at nursery_fromspace;

[16:18] <nwc10> look at MVM_ASSERT_NOT_FROMSPACE in gc/debug.h

[16:18] <nwc10> but I have a suspicion that the way that code is written (using MVM_exception_throw_adhoc()) that the exception can sometimes get caught and ignored

[16:19] <[Coke]> nwc10: um, do I need to add "rpath" somewhere?

[16:19] <timotimo> thanks

[16:19] <nwc10> [Coke]: no, I think the problem is (At least on Snow Leopard) that rpath is ignored

[16:19] <nwc10> Perl 5 doesn't use it on OS X

[16:20] <[Coke]> I'm on 10.8.5 here.

[16:20] <timotimo> before we run allocate, is the fromspace where we should look?

[16:21] <timotimo> when does the swap between the two happen?

[16:21] <nwc10> I'm on 10.8.0

[16:21] <[Coke]> 3rdparty/dyncall shows as modified and I can't seem to reset it.

[16:25] * [Coke] gives up, and blows away MoarVM entirely.

[16:25] <nwc10> aaaaargh bollocks

[16:25] <nwc10> # setup library names

[16:25] <nwc10> $config{moarlib} = sprintf $config{lib}, $NAME;

[16:25] <nwc10> $config{moardll} = sprintf $config{dll}, $NAME;

[16:25] <nwc10> That's not very general

[16:28] <FROGGS> that was me... what is the problem?

[16:29] <nwc10> http://paste.scsys.co.uk/288153

[16:29] <nwc10> I want to use lib%s.dylib in a third entry

[16:30] <FROGGS> nwc10: then you need to fiddle the lib and dll entry, no?

[16:30] <nwc10> no, they already have that

[16:30] <nwc10> see the paste - I hope it's obvious

[16:30] <nwc10> Or I want to build the value ldshared using the value of dll

[16:31] <nwc10> which I can't do at that point

[16:31] <nwc10> or I just want to use a Makefile macro

[16:31] <nwc10> which I can't do, because it's not done that way in the Makefil

[16:31] <nwc10> I need to add the bit in bold to ldshared => '-dynamiclib -install_name $(PREFIX)/lib/libmoar.dylib'

[16:32] <nwc10> but I'd like to express it as ldshared => '-dynamiclib -install_name $(PREFIX)/lib/lib%s.dylib'

[16:32] <nwc10> because that's how dll is done

[16:32] <nwc10> but I can't, as it's done later

[16:32] <FROGGS> can't you set $config{ldshared} in the configure script?

[16:32] <FROGGS> hmmm

[16:32] <FROGGS> I don't see bold text but I think I know what you mean

[16:32] <nwc10> well, yes, I can. But I think that the build is currently broken on all Snow Leopard

[16:33] <nwc10> if not all darwin

[16:33] <nwc10> and I know that sounds alarmist, but it would not surprise me

[16:33] <nwc10> Perl 5 is doing it very differently, with -install_name

[16:33] <nwc10> not that I like dylib.

[16:33] <nwc10> seems to have a lot more pain than dlopen

[16:34] <nwc10> I can't see an easy simple way to both fit within the current system and avoid hard coding something that is purpusfully not hard coded elsewhere

[16:34] <nwc10> and I can't type

[16:36] <FROGGS> :(

[16:46] <timotimo> well, we get a whole lot of output

[17:15] *** wsri joined
[17:16] *** eternaleye joined
[17:21] *** krunen joined
[17:24] *** eternaleye joined
[18:44] <nwc10> 59K fine, building 58K, 57K and 56K

[18:44] <nwc10> maybe this is famous last words, but I would have expected to hit a few more bugs than I did

[19:57] *** benabik joined
[20:10] *** colomon joined
[20:21] *** ssutch joined
[20:25] <timotimo> well, that sounds good

[20:25] <timotimo> maybe now a different class of bugs lurk?

[21:22] <nwc10> possibly

[21:23] <nwc10> 38K fine, but took 22 minutes

[21:23] <nwc10> IIRC we were about 3 minutes with a sane sized nursery

[21:23] <nwc10> much GC-ing for no good reason (so, we also get to see if anything gets "prematurely" collected)

[21:24] * nwc10 would assume not, as we ought to have seen those already

[22:05] <nwc10> 35K fine, but took 30 minutes

[22:13] <diakopter> heh

[23:11] *** ggoebel118 joined
[23:31] *** ggoebel118 joined
[23:57] <[Coke]> if I have just Moar, how can I test it?

[23:57] <[Coke]> (not sure how I can test nwc10++'s earlier request. Guess I'll upsize to nqp)
