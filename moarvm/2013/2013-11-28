[00:07] *** Ben_Goldberg joined
[01:08] *** BenGoldberg joined
[01:23] *** jnap joined
[02:57] *** cognominal joined
[03:38] *** ssutch joined
[05:17] *** jnap joined
[06:18] *** jnap joined
[07:18] *** jnap joined
[08:00] <jnthn> diakopter: Some of them are done that way... Others simply occur quite often and so it's to help keep the AST/code smaller.

[08:06] *** odc joined
[08:11] <nwc10> I infer that on the latter there is a trade-off for portability to new platforms, and possibly maintainability?

[08:11] <nwc10> and JIT-ability?

[08:13] <diakopter> conceivably

[08:19] *** jnap joined
[08:20] *** jnap1 joined
[08:22] *** jnap joined
[08:39] *** FROGGS joined
[08:56] <jnthn> nwc10: Yeah, though the ahndful that actually are desugars can be implemented portably too...

[08:57] <FROGGS> moarning

[08:57] <diakopter> moorning

[09:23] *** jnap joined
[09:50] *** tgt joined
[10:22] *** ssutch joined
[10:24] *** jnap joined
[10:53] *** ssutch joined
[11:24] <timotimo> how do i get the MVMStringIndex of the nth grapheme?

[11:25] *** jnap joined
[11:27] <timotimo> (i'm trying to figure out the correct way to invoke traverse_substring once for the first grapheme, then for the rest of the string. it seems like i need to figure out the location of the second grapheme for that)

[11:34] * timotimo has a first prototype without proper grapheme counting

[11:34] <timotimo> it has a FIXME in it, though, and it's better than just throwing an exception when it's run :)

[11:35] <diakopter> timotimo: what do you mean

[11:35] <diakopter> handling grapheme clusters you mean?

[11:35] <timotimo> yes

[11:36] <diakopter> p6 doesn't go by grapheme

[11:36] <diakopter> clusters

[11:36] <timotimo> oh, so tclc for a multi-charcode-grapheme will be stupid?

[11:36] <diakopter> b/c NFG is spec'd as NFC+remapping

[11:36] <diakopter> no, don't implement grapheme clusters :P

[11:37] <timotimo> OK

[11:37] <timotimo> MoarVM op 'tclc' is unknown as a core or extension op  -  what could i have missed?

[11:37] <timotimo> i added it to the list of ops and ran the update script, then added it to the case in interp.c

[11:38] <diakopter> reconfigure

[11:38] <timotimo> ah, ok

[11:39] *** FROGGS[mobile] joined
[11:40] <timotimo> FROGGS[mobile]: don't start tackling tclc on your mobile now, i almost have a functioning patch ready! :)

[11:41] <timotimo> aaw, i segfault

[11:42] <FROGGS[mobile]> timotimo++

[11:43] <timotimo> given strands and such, maybe it would have been actually acceptable to turn it into a substr x 2 + concatenate in the HLL

[11:48] <timotimo> hrmpf. /me builds without optimize

[11:54] <FROGGS[mobile]> ohh, you must be patient

[11:57] <timotimo> hehe.

[11:57] <timotimo> i'm not sure where i went wrong, so i'll re-implement based on substr, tc, lc and concat.

[12:01] <FROGGS[mobile]> hmmm, the bunny must be somewhere in the pepper

[12:02] <timotimo> m)

[12:21] <jnthn> You need that much pepper to make bunny tasty?

[12:21] <jnthn> timotimo: Did you "make install" your updated Moar?

[12:22] <timotimo> i got past the problem :)

[12:23] <timotimo> now i'm getting "cannot numify this" from the qast compilation process (because i decided to, for the time being, implement tclc in terms of substr, tc, lc and concat.

[12:26] *** jnap joined
[12:28] <timotimo> ah, i had the last two arguments to InstructionList.new reversed

[12:38] <timotimo> i don't think i understand correctly how to return the value of a register from my op properly

[12:40] <timotimo> Invalid MAST node in instruction list (must be Op, ExtOp, Call, Label, or Annotated)

[12:41] <timotimo> so i created the MAST code for the operand with $qastcomp.as_mast(@operands[0], :want($MVM_reg_str))

[12:41] <timotimo> and then i nqp::pushed(@ops, $the_operand_code.instructions)

[12:41] <timotimo> is that wrong?

[12:42] <jnthn> you want push_ilist I think

[12:44] <timotimo> thanks

[12:44] <timotimo> afk for a bit now

[13:02] *** FROGGS joined
[13:10] <FROGGS> tclc is line 3341 btw

[13:14] <timotimo> yup

[13:15] * timotimo builds it with QAST instead of MAST

[13:15] <nwc10> I assume that QAST has 2 advantages over MAST

[13:15] <nwc10> 1) you can test it on an existing working backend

[13:16] <nwc10> 2) it's portable to any future backends (eg JS, and anything else anyone wants to do)

[13:16] <FROGGS> huh, Error while compiling op call: Cannot find method 'uniprop'

[13:16] <timotimo> there: much easier

[13:16] <nwc10> I have

[13:16] <nwc10> Error while compiling op tclc: No registered operation handler for 'tclc'

[13:16] <FROGGS> nwc10: I commented that out, to know what will be next

[13:17] <nwc10> aha right

[13:17] <FROGGS> so I can hack while he hacks :o)

[13:17] <timotimo> :)

[13:17] <timotimo> the code i have now should be right.

[13:20] <timotimo> yup, works

[13:23] <FROGGS> hmmm

[13:24] <FROGGS> timotimo: I think uniprop is more like your expertise

[13:24] <timotimo> it is?

[13:24] <timotimo> maybe. where do i have to look?

[13:24] <FROGGS> grep for it in nqp

[13:24] <FROGGS> /home/froggs/dev/nqp/src/vm/jvm/QAST/Compiler.nqp:5437:    method uniprop($node) {

[13:24] <FROGGS> /home/froggs/dev/nqp/src/vm/parrot/QAST/Compiler.nqp:1677:    method uniprop($node) {

[13:24] <timotimo> OK

[13:25] <timotimo> ah, it's regex compilation

[13:25] <timotimo> i'll start working on it in a bit.

[13:25] <FROGGS> k, I'll stub it locally, to see what is next :o)

[13:26] <FROGGS> or..., I'll stub it and push

[13:27] *** jnap joined
[13:46] <FROGGS> ahh damnit, it really wants to execute uniprop :o(

[13:49] <timotimo> FROGGS: d'oh, the uniprop op isn't mapped in moarvm itself

[13:49] <timotimo> so once i implement method uniprop, it'll carp about the missing is_uprop op

[13:50] <timotimo> oh, wait

[13:50] <FROGGS> timotimo: there is no such op for parrot/jvm either

[13:50] <timotimo> it may just be hasuniprop

[13:50] <FROGGS> that sounds good

[13:50] <timotimo> good.

[13:51] <FROGGS> hasuniprop          w(int64) r(str) r(int64) r(int64) r(int64)

[13:52] <FROGGS> MVM_string_offset_has_unicode_property_value

[13:52] <FROGGS> (MVMThreadContext *tc, MVMString *s, MVMint64 offset, MVMint64 property_code, MVMint64 property_value_code)

[13:52] <timotimo> yeah.

[13:52] <timotimo> what's the reason for the value_code?

[13:53] <FROGGS> I guess in parrot land the line 1680 just checks the bounds?

[13:53] <FROGGS> I dunno

[13:53] <timotimo> i need to find that mapping first ...

[13:54] <FROGGS> parrots version just take three args...

[13:54] <timotimo> hm

[13:54] <timotimo> MVM_UNICODE_PROPERTY_GENERAL_CATEGORY ...

[13:54] <timotimo> so it wants a category passed as the second argument

[13:55] <timotimo> actually, it wants the property code as second arg ... and then the name again?

[13:56] <FROGGS> ahh!

[13:56] <FROGGS> case MVM_CCLASS_UPPERCASE:

[13:56] <FROGGS> return MVM_string_offset_has_unicode_property_value(tc, s, offset,

[13:56] <FROGGS> MVM_UNICODE_PROPERTY_GENERAL_CATEGORY, UPV_Lu);

[13:56] <FROGGS> the "u" in UPV_Lu is for uppercase

[13:57] <FROGGS> case MVM_CCLASS_HEXADECIMAL:

[13:57] <FROGGS> return MVM_string_offset_has_unicode_property_value(tc, s, offset,

[13:57] <FROGGS> MVM_UNICODE_PROPERTY_ASCII_HEX_DIGIT, 1);

[13:57] <FROGGS> so, there is a general category that you can query specific stuff, and then there are additional categories that you check for truthness I think

[13:59] <timotimo> yeah

[13:59] <timotimo> i have a piece of code that may work

[13:59] <FROGGS> how does that cope with what we generate in cclass_elem?

[14:02] <timotimo> er ... wha?

[14:02] <timotimo> it doesn't, that's a different piece, no?

[14:02] <timotimo> uniprop is for things like ... how do you even spell that

[14:03] <timotimo> <:Letter>

[14:03] <FROGGS> I do think it is related to /home/froggs/dev/nqp/src/QRegex/P6Regex/Actions.nqp:578:            $qast := QAST::Regex.new( $uniprop, :rxtype<uniprop>,

[14:04] <timotimo> mhm?

[14:04] <timotimo> i don't see what your problem is :)

[14:04] <FROGGS> rp: say "abc" ~~ / [:Letter] /

[14:04] <camelia> rakudo-parrot e5fd34: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/R8FWCKhsb0␤Unrecognized regex modifier :Letter␤at /tmp/R8FWCKhsb0:1␤------> [32msay "abc" ~~ / [:Letter[33m⏏[31m] /[0m␤»

[14:04] <FROGGS> rp: say "abc" ~~ / <:Letter> /

[14:04] <camelia> rakudo-parrot e5fd34: OUTPUT«｢a｣␤␤»

[14:04] <FROGGS> O.o

[14:05] <timotimo> huh

[14:05] <timotimo> that's not right

[14:06] <timotimo> yeah

[14:06] <timotimo> you need <:Letter> instead

[14:06] <timotimo> rp: say "abc123" ~~ / <:Letter>+ /

[14:06] <camelia> rakudo-parrot e5fd34: OUTPUT«｢abc｣␤␤»

[14:06] <FROGGS> I mean, you must translate "Letter" to two int64

[14:06] <timotimo> yes

[14:06] <timotimo> i'm doing that now :)

[14:06] <FROGGS> timotimo: I did <:Letter> in the last one

[14:06] <timotimo> a code and a value, there's two ops for that

[14:06] <timotimo> ah

[14:06] <timotimo> sorry, i didn't look property

[14:06] <timotimo> properly*

[14:07] <FROGGS> rp: say "abc" ~~ / <:Letter-[a]>+ /

[14:07] <camelia> rakudo-parrot e5fd34: OUTPUT«｢bc｣␤␤»

[14:07] <FROGGS> that is why it is in cclass_elem :o)

[14:07] <timotimo> aaaaand i forgot to move the position by one :)

[14:08] <FROGGS> hehe

[14:08] <FROGGS> +1

[14:08] <FROGGS> there you go :P

[14:10] <timotimo> thanks :)

[14:13] <FROGGS> where are you doing that mapping? in moarvm or nqp?

[14:15] <timotimo> it still seems to hang :\

[14:15] <timotimo> in nqp

[14:15] <timotimo> Error while compiling op p6shiftpush: No registered operation handler for 'p6shiftpush'

[14:15] <timotimo> good luck! :)

[14:18] *** lizmat joined
[14:18] <FROGGS> yay!

[14:18] <FROGGS> timotimo++

[14:25] <timotimo> aaw, i was hoping you'd maybe implement it :P

[14:25] * timotimo compiles

[14:26] <FROGGS> nah, my brane is not available enough

[14:26] <timotimo> OK

[14:26] <FROGGS> have to care about my son right now, so it is nice to have a 2min hack + 5min compile task

[14:28] *** jnap joined
[14:30] <timotimo> about to hit the next op we need to stub

[14:30] <FROGGS> p6arrfindtypes

[14:30] <FROGGS> arr!

[14:31] <timotimo> yarr

[14:32] <jnthn> I think it's about arrays, not pirates :P

[14:34] * timotimo comments the line out to find the next op we'd stumble upon

[14:35] <timotimo> probably p6listiter

[14:35] <timotimo> p6setfirstflag

[14:36] <timotimo> perhaps p6invokeflat?

[14:36] <FROGGS> I'd vote for p6listiter too

[14:37] <FROGGS> timotimo: you can do shitpfusch if you want :o)

[14:38] <timotimo> i'm not sure where i have to look to find example code ...

[14:39] <FROGGS> rakudo/src/vm/jvm/runtime/org/perl6/rakudo/RakOps.java:228:    public static SixModelObject p6shiftpush(SixModelObject a, ...

[14:40] <timotimo> i was thinking more along the lines of moarvm source, but i'll figure it out :)

[14:41] <FROGGS> ahh, maybe look what push_o does?

[14:41] <FROGGS> yeah, it is p6listiter

[14:42] <FROGGS> line 7138 now

[14:42] <timotimo> :)

[14:42] <timotimo> how do i check if a MVMObject is null?

[14:42] <timotimo> or would it actually be the null pointer?

[14:43] <jnthn> For now it's just the null pointer, yeah

[14:43] <timotimo> okay

[14:43] <jnthn> Taht's why we're so awesome at segfaulting.

[14:43] <timotimo> :)

[14:44] <timotimo> i set the number of slots in a list with MVM_repr_set_int, right?

[14:44] <jnthn> uh, no

[14:44] <jnthn> I think set_elems

[14:44] <jnthn> if there is one...

[14:44] <jnthn> Otehrwise see how setelems op is implemented

[14:45] *** BenGoldberg joined
[14:47] <timotimo> there is none, apparently. but i'll have a look

[14:48] <timotimo> now i need to splice some, too ...

[14:52] <timotimo> jnthn: what's the equivalent to GlobalExt.EMPTYARR on moarvm?

[14:53] <jnthn> timotimo: Creating a new BOOTArray somewhere

[14:53] <jnthn> And stashing it

[14:53] <jnthn> Probably in a static

[14:53] <jnthn> See in p6init or so

[14:53] <jnthn> Make sure to add it as a perm root

[14:54] <timotimo> OK

[14:54] <jnthn> But creating it is just MVM_repr_alloc_init

[14:56] <timotimo> ah, there's already a few examples

[14:56] <timotimo> that also takes care of the perm-root

[14:59] <timotimo> ah, now i get it, that code was to make the array empty

[14:59] <jnthn> right

[15:00] <jnthn> yarrrrr, empty

[15:00] *** tgt joined
[15:01] <FROGGS> next is p6sort, which might be a nice thing to implement

[15:02] <timotimo> "nice"

[15:03] <timotimo> failed to load library 'dynext/libperl6_ops_moar.so'

[15:03] <timotimo> :(

[15:03] * timotimo tries to clean again

[15:04] <jnthn> .oO( not .so good... )

[15:05] <FROGGS> just take it more lib-erally

[15:07] <timotimo> oh, i called bind_pos_o wrong

[15:11] <FROGGS> now it hangs :o(

[15:11] <FROGGS> stubbing sort might not be enough

[15:12] <FROGGS> ahh, it did not

[15:13] <FROGGS> getcfh is next

[15:13] <FROGGS> I'll implement that

[15:13] <timotimo> it takes quite a bit of time to reach the crash now

[15:13] <FROGGS> yeah

[15:14] <FROGGS> that is line 12970

[15:14] <FROGGS> jnthn++ needs to make it die faster :P

[15:14] <timotimo> wow, that's quite a lot more lines than earlier today

[15:14] <timotimo> when we were at like 3k

[15:15] <FROGGS> well, there are not soo many ops left

[15:15] <timotimo> well, many left to actually implement :)

[15:16] <FROGGS> yeah, one by one :o)

[15:16] <FROGGS> nice and easy

[15:20] <timotimo> i'll be AFK for a bit now.

[15:20] <FROGGS> k, see ya :o)

[15:21] <timotimo> need to drive my car around a bit after getting a kickstart by the ADAC

[15:23] <timotimo> if you don't get around to it by then, i'll see if i can easily implement p6listiter like jnthn said

[15:24] <FROGGS> k

[15:28] *** jnap joined
[15:34] *** jnap joined
[15:39] * jnthn wonders how long until "say 'hello moar'" :)

[15:40] <FROGGS> I'd like to say "today"

[15:45] *** benabik joined
[15:46] <FROGGS> No registered operation handler for 'socket'

[15:46] <jnthn> We could exclude the socket stuff from the makefile for now...

[15:46] <jnthn> It's not like we need it for a bit.

[15:47] <FROGGS> good point

[15:52] *** odc joined
[16:03] *** crab2313 joined
[16:12] <FROGGS> Program received signal SIGSEGV, Segmentation fault.

[16:12] <FROGGS> 0x00007ffff7a1fbb0 in write_ref_func () from /home/froggs/dev/MoarVM/../nqp/install/lib/libmoar.so

[16:12] <FROGGS> :(

[16:12] <FROGGS> that is when stripping INET.pm from Makefile

[16:13] <jnthn> oh...that means we got lots further at least.

[16:13] <jnthn> Means we made it to doing the serialization

[16:13] <jnthn> Which is about the last thing we do

[16:14] <FROGGS> so, this is "it"? the light at the end of the tunnel?

[16:15] <FROGGS> I rerunning with an unoptimized moar

[16:17] <jnthn> Well, after that we gotta make it through the assembler.

[16:17] <jnthn> In theory that should be fine

[16:23] <FROGGS> we'll meet our great Assembler? :P

[16:23] <FROGGS> (I'm sorry)

[16:25] <jnthn> :P

[16:25] <jnthn> .oO( pain in the assembler... )

[16:33] <FROGGS> https://gist.github.com/FROGGS/061f5586d6da72478ee2

[16:35] <FROGGS> ref points to unreadable memory

[16:37] <jnthn> hm, wtf...

[16:45] <jnthn> hotel &

[17:16] <timotimo> will join you in coding again soon

[17:29] <FROGGS> \o/

[17:37] *** lizmat joined
[17:51] <timotimo> yays

[17:54] <timotimo> okay, p6listiter is still up for grabs?

[17:56] <timotimo> wow, either what i just made i stotally wrong or it was really easy :)

[17:57] *** jnap joined
[17:57] <moritz> timotimo: jnthn mentioned it might not be too hard :-)

[17:59] <timotimo> yeah, but when jnthn says something's "not hard" it may still be hard for me :P

[18:00] <timotimo> i'm not really sure how to test if it's correct, though.

[18:00] <jnthn> It's mostly not hard 'cus I already did the implementation of what it does, iirc, just didn't wire that static function doing it up to an op body...

[18:01] <timotimo> well, there'll be enough fallout when we actually run perl6 source code rather than just compiling it

[18:01] <timotimo> and we'll certainly stumble over enough mistakes i made :P

[18:02] <timotimo> FROGGS: did you look further into the serialisation stuff?

[18:04] <timotimo> so it's trying to serialize an object's body, but the object doesn't have an STable at that position

[18:04] <timotimo> in the last attribute

[18:05] *** woolfy joined
[18:05] <timotimo> maybe get_obj_at_offset is poking into something that's not supposed to be a pointer to an object

[18:06] <dalek> MoarVM: 187b36b | jonathan++ | src/6model/reprs/P6opaque.c:

[18:06] <dalek> MoarVM: Fix P6opaque serialization in mixin case.

[18:06] <dalek> MoarVM:

[18:06] <dalek> MoarVM: Untested, but makes it match what happens in all the other REPR funcs.

[18:06] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/187b36b1b1

[18:06] <timotimo> ah, there we go :)

[18:06] <jnthn> ;)

[18:06] <jnthn> Well, I made sure it didn't blow up NQP tests.

[18:07] <jnthn> Got a Rakudo on Moar build running at the moment.

[18:07] <jnthn> But there's a good chance this was it

[18:07] <jnthn> It would certain cause us to go looking at random memory off the end of an object.

[18:07] <jnthn> *certainly

[18:07] <timotimo> hm. should i build an unoptimized moarvm now?

[18:07] <timotimo> i guess i could.

[18:09] <timotimo> i would never have gotten the idea to call real_data on data >_<

[18:09] <jnthn> Only some of us know how to keep it real...

[18:09] <jnthn> :P

[18:10] <jnthn> To explain what it does: if we mix in to an object, and its size needs to change, then we can't actually resize the original, so we allocate a new piece of memory and point to it.

[18:10] <jnthn> And that then stores things.

[18:10] <jnthn> This is what real_data is.

[18:11] <timotimo> so, the more we mix in, the more pointers we have to follow in a row to get at the real real real data?

[18:12] <jnthn> No, it doesn't chain.

[18:12] <moritz> when it comes to the second level, we could just replace the old data with a pointer to the new real data

[18:12] <jnthn> Just reallocs to the new size.

[18:12] <timotimo> OK

[18:12] <jnthn> Right, that's what it does.

[18:12] <jnthn> Though we may need to revisit that in the future wrt thread safety.

[18:12] <timotimo> captain jnthn, engage the thread safety shield!

[18:13] *** crab2313 joined
[18:14] <jnthn> wow, it completes stage mast...sloooowly

[18:14] <timotimo> i wonder how excruciatingly long it will take for my debug build ...

[18:14] <jnthn> Then dies in the assembler.

[18:14] <jnthn> At Frame 2868, Instruction 75, op 'hasuniprop' has invalid number (4) of operands; needs 5.

[18:15] <timotimo> oh, whoops

[18:15] <timotimo> that's totally my fault then.

[18:15] <jnthn> Also means it's assembled 2867 frames before bailing :)

[18:15] <timotimo> \o/

[18:15] <timotimo> how many frames are there going to be, approximately?

[18:16] <jnthn> I dunno :)

[18:16] <jnthn> but did we not get a long way into stage mast without hitting the uniprop thing?

[18:16] <jnthn> If so it means we should be about equally far into the assembler...

[18:16] <timotimo> right

[18:17] <timotimo> i forgot to pass the string that's supposed to be looked at :)

[18:17] <timotimo> patch inbound

[18:17] <jnthn> yay

[18:18] <timotimo> i'll compile it before i push, though

[18:18] <timotimo> actually, that's not necessary

[18:18] <timotimo> there you go

[18:18] <timotimo> if you have an optimized build, you'll easily overtake me in the build process

[18:19] <jnthn> building

[18:19] <timotimo> --output=gen/moar/stage2/NQPP6QRegex.moarvm gen/moar/stage2/NQPP6QRegex.nqp

[18:19] <timotimo> ... ... ...

[18:19] <jnthn> At this rate we may assemble before I go for dinner :)

[18:20] <timotimo> i'll probably be afk for a big part of the evening, though

[18:20] <jnthn> I doubt I'll be that productive this evening given how my early night yesterday failed to lead to a lot of sleep... :/

[18:21] <jnthn> Anyways, Rakudo build in progress...

[18:21] <timotimo> my sleep attempts were also pretty fail last night :(

[18:21] <jnthn> Damn, I need to optimize this thing. :)

[18:21] <timotimo> starting to build rakudo now, too.

[18:23] <jnthn> yeah, in stage parse... :)

[18:23] <timotimo> i'm looking forward to you optimizing this thing :3

[18:24] <timotimo> the stuff i implemented so far is not optimal

[18:24] <timotimo> Stage start      :   0.000 <- if only every stage was this fast

[18:25] * jnthn is into mast now :)

[18:27] <timotimo> still parsing

[18:28] <timotimo> Stage parse      : 264.067

[18:28] <timotimo> could be worse ...

[18:28] <jnthn> While it's slow, it does at least stay below a gig all the way...

[18:28] <jnthn> so far at least

[18:28] <timotimo> that's a welcome change :3

[18:28] <timotimo> 800 MB RSS

[18:28] <timotimo> at the moment

[18:29] <jnthn> Stage mbc        :   0.544

[18:29] <jnthn> ...at least it assembles fast :P

[18:29] <jnthn> And...we got a CORE.setting.moarvm out :)

[18:29] <timotimo> fwiw, i think i'm missing a few free_register's here and there

[18:29] <timotimo> OOOOH YEAH :D

[18:29] <timotimo> \o/

[18:30] <timotimo> 900 MB Res

[18:30] <FROGGS[mobile]> do we get a perl6-m now?

[18:31] <TimToady> but does it say 'hi' yet?

[18:31] <jnthn> No, 'cus something is wrong with the thingy that makes the runner, but that should be an easy fix

[18:31] <jnthn> If you inovke manually...

[18:31] <jnthn> SIG_ELEM_DEFAULT_FROM_OUTER NYI

[18:31] <jnthn> While loading the setting :)

[18:31] <jnthn> So, we get some way into setting loading.

[18:31] <FROGGS[mobile]> nice!

[18:31] <jnthn> Well, we do all the deserialization and stuff, this is running its main body.

[18:32] <timotimo> then it'll want to do the datetime decoding thingie. did FROGGS[mobile] stub or implement that?

[18:32] <FROGGS[mobile]> stubbed, I think

[18:33] <timotimo> OK, that'll be hit definitely

[18:33] <jnthn> Yeah, I imagine so.

[18:33] <jnthn> Anyway, another nice point to have reached.

[18:33] <timotimo> peak memory usage seems to be 950 MB

[18:34] <jnthn> I suspect that's the lowest of the various backends.

[18:34] <timotimo> and as always the libuv assertion error and the coredump happens ...

[18:34] *** jnap joined
[18:35] <timotimo> do we have a fix for that in the pipeline?

[18:35] <FROGGS[mobile]> nope

[18:37] <timotimo> okay, i'll be off now for a bit

[18:37] <timotimo> ttyl :)

[18:38] <FROGGS[mobile]> o/

[18:38] *** ssutch joined
[18:40] * jnthn is gonna go do dinner

[18:40] <jnthn> And, given we got a CORE.setting.moarvm out, maybe a celebratory stout :)

[18:40] * jnthn has a bottle of Perl wine to drink once we get it to say hello... ;)

[18:40] <jnthn> bbl &

[18:53] *** woosley joined
[19:15] <diakopter> all this progress in the backlog, but no commits reported here

[19:20] <timotimo> yeah, most of the stuff happened in nqp/ or rakudo/

[19:21] <TimToady> what branch of nqp should it be using?

[19:21] <moritz> master

[19:22] <TimToady> okay--mine blew up between stage0 and stage1, but trying a rm of the usual suspects

[19:24] <TimToady> or does the moar need a special branch?

[19:24] *** grondilu joined
[19:27] *** grondilu left
[19:30] <TimToady> still fails, see https://gist.github.com/TimToady/7697075

[19:31] <TimToady> bothers me that the subcommand ends with --gen-moar=

[19:32] <TimToady> or does that just mean "take the default"

[19:33] <TimToady> has anyone else run into trouble trying to compile stage1/QRegex?

[19:35] <timotimo> you only need rakudo/moar-support, all other parts work with their master branches

[19:35] *** jnap joined
[19:36] <nwc10> It seemed to hang for me after

[19:36] <nwc10> Stage optimize   :  86.350

[19:36] <nwc10> Is it actually taking "forever" (eg >15 minutes) for the next stage?

[19:37] *** ingy joined
[19:38] * TimToady tries again with an explicit --gen-moar=master

[19:44] <timotimo> Stage optimize   :  59.377

[19:44] <timotimo> Stage mast       : 324.086

[19:44] <timotimo> nwc10: that's for me. it'll take about 30% longer

[19:45] <nwc10> OK. Thanks

[19:45] <tadzik> oooh, so rakudo on moar is now working?

[19:45] <nwc10> tadzik: it hasn't acchieved "hello world" yet

[19:46] <TimToady> identical failure on QRegex, except now the command ends --gen-moar without the =

[19:47] * TimToady wonders what he's doing different from everyone else...

[19:47] * nwc10 isn't using a --gen-moar

[19:48] <nwc10> I configured MoarVM as

[19:48] <nwc10> perl Configure.pl --prefix=/home/nicholas/Sandpit/moar-g

[19:48] <nwc10> and the other two as

[19:48] <nwc10> perl Configure.pl --backends=moar --prefix=/home/nicholas/Sandpit/moar-g

[19:48] <nwc10> and did make test install for MoarVM and NQP

[19:52] <timotimo> moar-g?

[19:53] *** tgt joined
[19:54] <diakopter> nwc10: Sandpit? tarpit?

[19:54] <diakopter> Sarlacc pit?

[19:54] <timotimo> i don't have --gen-moar, either, i just manually configured and built it

[19:55] <timotimo> my moar is configured with ../../install, my nqp is ../install, my rakudo is no prefix (== install/), and they are all stacked into each other

[20:02] <TimToady> it seems as though it's trying to generate moar down in nqp/gen; could there be some kind of chdir failure from doing multiple backends?

[20:09] <TimToady> trying to generate only the moar backend, --gen-moar still fails to compile QRegex

[20:23] * jnthn back

[20:24] <jnthn> TimToady: Since when, to the degree you know?

[20:25] * jnthn did find nice Indian, but the stout-serving bar on the route back was packed with nowhere to sit, which didn't seem like much fun after standing teaching all day...

[20:27] <nwc10> This is expected?

[20:27] <nwc10> Stage mast       : 487.015Stage mbc        :   1.976

[20:27] <nwc10> moar: 3rdparty/libuv/src/unix/loop.c:150: uv__loop_delete: Assertion `!((((*(&(loop)->active_reqs))[0]) == (&(loop)->active_reqs)) == 0)' failed.

[20:27] <nwc10> gah, naughty terminal

[20:27] <nwc10> no error, other that assertion failure

[20:28] <nwc10> awww

[20:28] <nwc10> better luck tomorrow?

[20:29] <TimToady> jnthn: /me posted a gist earlier of the failure on stage1/QRegex

[20:37] <jnthn> TimToady: Yes, asking if this is a new problem, or at least, when (roughly) were you last able to build?

[20:37] <jnthn> I can't get much from the gist, sadly. The invocation looks correct.

[20:38] <TimToady> I've never tried to build moar under nom before

[20:38] <jnthn> Oh...but you previously build NQP on Moar, or never?

[20:38] <TimToady> I've been able to build jvm and parrot all along together

[20:39] <TimToady> just adding in moar as a backend doesn't seem to get past QRegex no matter what I delete

[20:40] <jnthn> OK. That means I can't tell if it's a recent regression for you, or if it's always been an issue...

[20:40] <jnthn> If you can get hold of a gdb backtrace, that may help.

[20:40] <TimToady> I haven't ever built the bootstrapped nqp

[20:40] <TimToady> just the cross-compiled one

[20:40] <jnthn> OK. I'm guessing you aren't building on anything unusual?

[20:41] <TimToady> x86_64 Linux

[20:41] <jnthn> Yeah, that's "boring" and probably what others are using who can build. Hm.

[20:41] <TimToady> Linux Mint, which is an Ubuntu

[20:41] <moritz> which is what I use at $work

[20:44] <TimToady> 32 or 64-bit?

[20:45] * TimToady is using the 64-bit Linux

[20:45] <moritz> 64 bit

[20:46] <TimToady> weird, well, maybe I'll have a chance to get it to a gdbable state later, but today is mostly gonna be familyschtoff

[20:47] <TimToady> nevertheless, \o/ at the progress

[21:23] <jnthn> Ah. Turns out that getting the SC repossession stuff in place is actually a blocker. 'cus CORE.setting fiddles with the types BOOTSTRAP creates.

[21:37] *** jnap joined
[22:38] *** lizmat_ joined
[22:38] *** jnap joined
[22:38] <timotimo> will you be able to do that tonight?

[22:39] <timotimo> that would be amazing

[22:47] *** lizmat joined
[22:55] *** woolfy joined
[23:39] *** jnap joined
[23:56] *** jnap joined
