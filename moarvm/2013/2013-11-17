[00:03] <jnthn> damm, this chilli ölkorv is hot

[00:04] <jnthn> Must be designed for drinking crappy lager where you don't care about the taste or something...

[00:07] <jnthn> 469 :)

[00:30] *** ssutch joined
[00:49] *** ssutch joined
[00:53] *** ssutch joined
[01:02] *** BenGoldberg joined
[01:29] <jnthn> Up to line 664 by now.

[01:34] <jnthn> Think I'm too tired to do more today. Goal for tomorrow: get past 1000. :)

[02:34] <diakopter> ..so many diakopter thinkos... :(

[02:45] <moritz> https://gist.github.com/moritz/f890a56c13ddc849e537 # moar assertion failure while building rakudo/moar-support

[02:45] <moritz> yesterday I also had one while building NQP

[02:45] <moritz> in both cases, simply typing 'make' again "fixed" the problem

[02:45] <diakopter> hm

[02:45] <moritz> erm no, in rakudo re-making doesn't fix it

[02:46] <moritz> fwiw dynext/libperl6_ops_moar.so exists

[02:46] <moritz> dynext/libperl6_ops_moar.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=0x74e8f1e273673ba68fff7037a0f28df1eac08e21, not stripped

[03:05] <tadzik> well, it doesn't build for me at all

[03:08] <diakopter> tell it to make harder

[03:10] <tadzik> https://gist.github.com/tadzik/7508563

[03:16] <tadzik> ok, cleaning linenoise dir helped

[03:25] <moritz> make: *** No rule to make target `harder'.  Stop.

[03:52] *** ssutch joined
[07:19] <FROGGS> +++++++++++++++++++++++++++++++++

[07:19] <FROGGS> ++++

[07:21] <FROGGS> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

[07:21] <FROGGS> ###########

[07:21] <FROGGS> ´´´´´´´´´´´´´´´´´´´´

[07:22] <FROGGS> ´´´´´++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

[07:27] <TimToady> any solar flares lately?

[07:30] <TimToady> or maybe we can blame the Leonids...

[07:31] <TimToady> It would be exremely funny if the first evidence of ETs showed up as noise on an IRC channel...

[08:10] <FROGGS> I'm sorry

[08:10] <FROGGS> seems like my youngest is interested in computers :/

[08:13] <FROGGS> moritz: when was the last time you could "build" rakudo@moar?

[08:30] <FROGGS> looks like I can build and hit: No registered operation handler for 'p6captureouters'

[08:32] <FROGGS> moritz: wrt "failed to load library 'dynext/libperl6_ops_moar.so'", I would think a `make realclean` and rebuild in MoarVM would help here... but I thought we did that a few weeks ago?

[09:02] <FROGGS> I am working on that now:

[09:02] <FROGGS> perl Configure.pl --backends=jvm,moar --prefix=../nqp/install && make m-install

[09:02] <FROGGS> ===SORRY!===

[09:02] <FROGGS> nqp-j is too old

[09:10] <FROGGS> wait, that one is correct

[10:27] <moritz> linking moar

[10:27] <moritz> ./libmoar.so: undefined reference to `MVM_repr_bind_key_boxed'

[10:27] <moritz> collect2: ld returned 1 exit status

[10:27] <moritz> when rebuilding moar

[10:27] <FROGGS> did you reconfigure?

[10:28] <FROGGS> because that happens when then src/gen/config.c is old

[10:28] <FROGGS> and maybe you are even missing about 10 commits? jnthn++ fixed it yesterday

[10:29] <moritz> do I need to rebuild nqp after rebuliding moar?

[10:29] <moritz> or can I shoot straight for rakudo?

[10:29] <FROGGS> you can usually skip nqp

[10:30] <moritz> ok, after realcean, git clean -xdf and reconfiguring, moar build worked again

[10:30] <FROGGS> phew

[10:30] <FROGGS> btw, is the following supposed to gen-moar? perl Configure.pl --backends=moar --gen-nqp --gen-moar --make-install

[10:30] <FROGGS> (in rakudo)

[10:31] <FROGGS> ahh, there is no gen-moar yet, right?

[10:31] <FROGGS> no, there is...

[10:31] <moritz> only in nqp

[10:33] <FROGGS> yeah...

[10:43] <timotimo> FROGGS: when the youngest get interested in computers, it's time to get a filesystem that can revert any change made to it in the last 12 hours, granually :P

[10:43] <FROGGS> timotimo: that is a good idea *g*

[10:54] <timotimo> what do i have to do for rakudo-moar to build the dynext thingie?

[10:55] <FROGGS> pull everything, make realclean in moarvm, reconfigure and build

[10:55] <timotimo> mhm

[10:56] <FROGGS> moritz: btw, I see that gen_parrot is handled in rakudo also... does that make sense? why don't we just pass a --gen-parrot to nqp?

[10:56] <FROGGS> moritz: I did the same for gen-moar now

[11:12] <FROGGS> umm, nqp HEAD does not build on moar :/

[11:13] <timotimo> locally it works

[11:14] <FROGGS> it fails building QRegex on my box

[11:15] <timotimo> make -j4 all install  659,28s user 10,75s system 264% cpu 4:13,68 total

[11:15] <timotimo> interestingly, it doesn't seem to want to accept my nqp-j version

[11:18] <FROGGS> timotimo: I bumped nqp revision right now, so you have to reconfigure/rebuild nqp

[11:18] <timotimo> i did, though

[11:18] <timotimo> gcc: error: dynext/perl6_ops.o: No such file or directory

[11:18] <timotimo> i'm not sure what i'm doing wrong, but maybe i should just wait until more work is done on the whole thing

[11:20] <FROGGS> timotimo: can you paste the build output of rakudo?

[11:24] * timotimo has reconfigured nqp and is rebuilding

[11:34] <timotimo> FROGGS: https://gist.github.com/timo/3605ab3ba130d90c563e

[11:35] <timotimo> maybe the warning in the configure output has something to do with it ...

[11:39] <FROGGS> timotimo: what is: nqp-m --version | wc

[11:39] <FROGGS> err

[11:39] <FROGGS> timotimo: what is: nqp-m --show-config | wc

[11:39] <timotimo> 102     319    8192

[11:39] <timotimo> [2]    11089 segmentation fault (core dumped)  nqp-m --show-config |

[11:39] <timotimo> :)

[11:39] <timotimo> that's not very good

[11:40] <FROGGS> timotimo: that commit fixed it for me: https://github.com/MoarVM/MoarVM/commit/54ebe1da65b3a8427f4470285e1c6c5c7996a009

[11:40] <FROGGS> timotimo: do you have time to generate a backtrace?

[11:41] <timotimo> sure.

[11:41] <FROGGS> k

[11:41] <FROGGS> cat install/bin/nqp-m

[11:41] <timotimo> same url

[11:42] <timotimo> exec /home/timo/build/rakudo/install/bin/moar --libpath=/home/timo/build/rakudo/install/languages/nqp/lib /home/timo/build/rakudo/install/languages/nqp/lib/nqp.moarvm "$@"

[11:42] <timotimo> oh, that could be wrong

[11:42] <timotimo> i think my moar prefix is inside nqp/

[11:42] <FROGGS> no, perfet

[11:42] <FROGGS> (i think)

[11:42] <FROGGS> ahh

[11:42] <timotimo> gimme a minute.

[11:42] <FROGGS> then: /home/timo/build/rakudo/install/bin/moar --version

[11:48] <FROGGS> phew

[11:48] <FROGGS> my --gen-moar in rakudo seems to work... the segfault I got is something I "patched" locally, but this is not committed

[11:49] <FROGGS> forgot about that patch/hack though

[11:49] <timotimo> i know that feeling :P

[11:49] <timotimo> yesterday when i was fiddling around with regex codegen and such i ran into lots of unstable problems

[11:50] <FROGGS> yeah, that sounds that regex fiddling :o)

[11:50] <FROGGS> moritz: what do you think about https://gist.github.com/FROGGS/fdbfe209806fba0587ad ?

[11:51] <moritz> FROGGS: should also include a   $backends{moar} = 1 if defined $gen_moar;

[11:53] <moritz> or something along those lines, at least

[11:54] <FROGGS> ahh, k

[11:55] *** tgt joined
[11:55] <moritz> note that the parrot case is more complicated, because we pull copmiler flags etc. from the parrot configuration that aren't available from the NQP configuration

[12:20] <FROGGS> ahh, I see

[12:20] *** diakopter joined
[12:52] *** _ilbot joined
[13:04] <FROGGS> jnthn: I still need this patch to avoid an explosion in the gc: https://gist.github.com/FROGGS/603692fde738639fc0d3

[13:05] <moritz> FROGGS: and reason you didn't include the $backends{moar} = 1 if defined $gen_moar; line?

[13:06] <moritz> FROGGS: also I'm not convinced the $impls{moar}{ok} = 1; line is right

[13:06] <FROGGS> jnthn: without that patch I even got once or twice the message about something invalid and a mention of fromspace

[13:06] <moritz> FROGGS: it should conclude that when it successfully reads the nqp-m config, and the version is new enough

[13:06] <FROGGS> ahh, hmmm

[13:07] <FROGGS> ahh, now I know what you mean

[13:12] <jnthn> FROGGS: That's a slightly weird patch to need...

[13:12] <FROGGS> jnthn: that is why it is not committed...

[13:13] <FROGGS> and the funny thing is: why do only I need that patch?

[13:13] <FROGGS> maybe because of gcc (Ubuntu/Linaro 4.8.1-10ubuntu8) 4.8.1?

[13:18] <jnthn> FROGGS: Does https://gist.github.com/jnthn/7513289 help at all?

[13:20] <FROGGS> /home/froggs/dev/nqp/install/bin/moar --libpath=src/vm/moar/stage0 src/vm/moar/stage0/nqp.moarvm --bootstrap --setting=NULL --no-regex-lib --target=mbc \

[13:20] <FROGGS> --output=gen/moar/stage1/nqpmo.moarvm gen/moar/stage1/nqpmo.nqp

[13:20] <FROGGS> Segmentation fault (core dumped)

[13:20] <FROGGS> :o(

[13:21] <jnthn> bt?

[13:21] <jnthn> oh, hang on, that SEGVs it for me too...wtf

[13:21] <FROGGS> https://gist.github.com/FROGGS/dcf494aecec7506fdd79

[13:22] <FROGGS> you give me untested code? wtf :P

[13:22] <jnthn> It was too simple not to wok :P

[13:22] <jnthn> uh, work

[13:23] <FROGGS> yeah, one of those :o)

[13:23] * FROGGS .oO( To work or not to work? )

[13:27] <jnthn> Oops. It looks like somewhere is pushin' temproots and not poppin' em late

[13:27] *** moritz joined
[13:28] <jnthn> Having 74 of them when we should have 1 is a sure sign of fail

[13:32] <FROGGS> jnthn: MoarVM/src/core/threads.c:104:        MVM_gc_root_temp_push(child_tc, (MVMCollectable **)&ts->thread_obj);

[13:32] <FROGGS> I don't see a pop there

[13:35] <jnthn> Tht looks odd, but there's no threads involved here...

[13:37] <FROGGS> isn't it more likely that the temproots would be popped later?

[13:37] <FROGGS> I don't see another push without the pop

[13:39] <jnthn> FROGGS: An MVMROOT with a return in it would also cause issues

[13:40] <FROGGS> ahh, true

[13:40] <jnthn> oh, which is what my patch did

[13:40] <jnthn> Which is why it busted stuff

[13:40] <FROGGS> hehe

[13:47] <jnthn> Darn, and when I take away my patch, we never hit the problem of too many temp roots.

[13:49] <FROGGS> here are returns in MVMROOT... MoarVM/src/io/fileops.c:192:        MVMROOT(tc, dot, {

[13:49] <FROGGS> (I did that btw)

[13:49] <jnthn> ah...that should be fixed...

[13:50] <FROGGS> doing that atm

[13:50] <jnthn> Back in loadbytecode.c, does valgrind complain at all?

[13:51] <FROGGS> with unmodified moarvm?

[13:52] <jnthn> yeah

[13:53] <FROGGS> hmmm

[13:53] <jnthn> FROGGS: Could also try https://gist.github.com/jnthn/7513691

[13:54] <FROGGS> I fixed the one in fileops.c, and it compiles further...

[13:56] <FROGGS> that was the only return in MVMROOT btw

[13:57] <FROGGS> nqp compiled successfully

[13:57] <FROGGS> compiling rakudo now

[14:01] * FROGGS scratches his head

[14:01] <FROGGS> jnthn: it compiled till the NYI

[14:02] <dalek> MoarVM: f2bbadf | (Tobias Leich)++ | src/io/fileops.c:

[14:02] <dalek> MoarVM: never ever return from inside a MVMROOT

[14:02] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f2bbadfec7

[14:02] <jnthn> FROGGS: yay

[14:02] <jnthn> OK, guess I should look at the NYI...

[14:03] <FROGGS> sorry for the distraction :o)

[14:03] <jnthn> np, nice it's fixed

[14:06] <FROGGS> k, there is no other return between push and pop

[14:13] <jnthn> \o/

[14:14] <FROGGS> ?

[14:15] <jnthn> fileops.c

[14:15] <jnthn> src\io\fileops.c(211) : error C2065: 'last' : undeclared identifier

[14:15] <jnthn> :(

[14:15] <FROGGS> uhh

[14:15] <FROGGS> there is no `last` in C, ehh?

[14:16] <jnthn> break :)

[14:17] <FROGGS> ahh

[14:19] <dalek> MoarVM: 1b6024c | (Tobias Leich)++ | src/io/fileops.c:

[14:19] <dalek> MoarVM: s/last/break/

[14:19] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1b6024c4e2

[14:22] <FROGGS> jnthn: btw, that does not make sense at all

[14:23] <FROGGS> because the return was in _WIN32 code

[14:23] <jnthn> oh...

[14:24] <FROGGS> I'll paste a bt once I hit it again

[14:24] <FROGGS> bbl

[14:24] <dalek> MoarVM: e15a28a | jnthn++ | src/core/frame.h:

[14:24] <dalek> MoarVM: Mark a couple more things MVM_PUBLIC.

[14:24] <dalek> MoarVM:

[14:24] <dalek> MoarVM: Needed for Rakudo's ops.

[14:24] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e15a28a0a4

[14:32] *** woolfy1 joined
[14:40] <dalek> MoarVM: 62964cc | jnthn++ | src/core/interp.c:

[14:40] <dalek> MoarVM: decont should cope with nulls.

[14:40] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/62964ccd5e

[14:42] *** woolfy joined
[14:42] *** lizmat_ joined
[14:43] *** FROGGS[mobile] joined
[14:47] <jnthn> Up to line 2794

[14:50] <FROGGS> wow!!

[14:50] <FROGGS> jnthn++

[15:04] <jnthn> At Frame 2, Instruction 37, op 'istype', operand 1, MAST::Local of wrong type (7) specified; expected 8

[15:04] <jnthn> urgh

[15:07] <jnthn> oh, maybe it's just a small thing...

[15:21] *** Woodi joined
[15:25] <FROGGS[mobile]> a short perhaps?

[15:25] <jnthn> :P

[15:25] <jnthn> Fixed that one now.

[15:32] *** BenGoldberg joined
[15:36] *** Woodi joined
[16:18] <FROGGS> Incompatible MROs in P6opaque rebless

[16:18] <FROGGS> is that so?

[16:19] <jnthn> That means you're some commits behidn somewhere... :)

[16:19] <jnthn> Probably NQP ones

[16:19] <FROGGS> O.o

[16:20] <FROGGS> ahh, moarvm

[16:46] <FROGGS> ahh, yes

[16:54] <dalek> MoarVM: 3c262e6 | jnthn++ | src/ (3 files):

[16:54] <dalek> MoarVM: Fill out some HLL type-mapping logic.

[16:54] <dalek> MoarVM:

[16:54] <dalek> MoarVM: So things crossing MOP-in-NQP to Perl 6 boundary get the right types.

[16:54] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3c262e6ce4

[16:54] <dalek> MoarVM: f92265c | jnthn++ | src/core/coerce.c:

[16:54] <dalek> MoarVM: Implement bigint boolification.

[16:54] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f92265cfae

[16:59] <jnthn> Getting up to around line 3733 now

[16:59] <jnthn> The Numeric role is the next place we fail

[17:00] <jnthn> Error while compiling op chain (source text: "=="): No registered operation handler for 'chain'

[17:04] <nwc10> build of HEAD now fails like this:

[17:04] <nwc10> moar: 3rdparty/libuv/src/unix/loop.c:150: uv__loop_delete: Assertion `!((((*(&(loop)->active_reqs))[0]) == (&(loop)->active_reqs)) == 0)' failed.

[17:04] <nwc10> make: *** [blib/Perl6/BOOTSTRAP.moarvm] Aborted

[17:09] <timotimo> Incompatible MROs in P6opaque rebless  <- /me, too

[17:12] <jnthn> timotimo: That was fixed in nqp commit ce7482c

[17:12] <timotimo> ah, okay

[17:14] <nwc10> my assistant is preventing me from seeing the screen to update and rebuild

[17:15] <nwc10> she wants me to "play barbapapa"

[17:16] <jnthn> .oO( Operation Barbapapa )

[17:16] <nwc10> "play" being the real word that needs the scare quotes

[17:27] <nwc10> now: Error while compiling op chain (source text: "=="): No registered operation handler for 'chain'

[17:27] <nwc10> massive backtraace

[17:28] <nwc10> and an assertion at the end:

[17:28] <nwc10> moar: 3rdparty/libuv/src/unix/loop.c:150: uv__loop_delete: Assertion `!((((*(&(l

[17:28] <nwc10> oop)->active_reqs))[0]) == (&(loop)->active_reqs)) == 0)' failed.

[17:28] <nwc10> make: *** [CORE.setting.moarvm] Aborted

[17:28] <jnthn> nwc10: Yup, the chain thing is what I'm fixing at the moment

[17:29] <nwc10> OK, so that's current and expected

[17:34] <jnthn> At Frame 3, Instruction 37, op 'prepargs', operand 0, MAST::Local of wrong type (8) specified; expected 7

[17:34] <jnthn> wtf, I don't even...

[17:40] <FROGGS> nwc10: the libuv stuff always shows up when we print to stderr

[17:40] <nwc10> OK

[17:43] <jnthn> oh, it helps to use the correct set of flags...

[17:49] <jnthn> 4465

[18:03] <FROGGS> that is awesome :o)

[18:05] <jnthn> 4495 now. We survive our first enum, but not our first subset.

[18:07] <FROGGS> damn it, I wanna know how long stage parse will take :o)

[18:09] <jnthn> ages... :S

[18:11] <jnthn> Though maybe it's 'cus of all the warnings being spewed...

[18:14] <FROGGS> yeah, hopefully :/

[18:15] <jnthn> Well, don't forget we did none of the interesting optimization stuff yet in Moar.

[18:16] <FROGGS> okay, it dies after 39s on my box

[18:16] <jnthn> Aww, fixing the missing p6var only gets me to 4500.

[18:16] <nwc10> awll

[18:16] <nwc10> can always take the Klortho-disapproved approach to optimisation:

[18:16] <nwc10> #11912 Evidently it's important to you to get the wrong answer as quickly as possible.

[18:17] <jnthn> I'll bet profiling will reveal a bunch of things too :)

[18:17] <nwc10> ln -s /usr/bin/true /usr/bin/perl6

[18:17] <jnthn> I mostly care about getting it to *work*.

[18:18] <jnthn> (for the moment)

[18:30] <dalek> MoarVM: 5bf1995 | jnthn++ | src/strings/ops.c:

[18:30] <dalek> MoarVM: Allow join on array of native strings.

[18:30] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5bf1995354

[18:31] <FROGGS> was that 5038?

[18:32] <nwc10> bah, I haven't finished building the pervious version and the goalposts moved again :-)

[18:32] <jnthn> Latest thing we choke on is p6return

[18:32] <FROGGS> nwc10: same here :o)

[18:36] <FROGGS> ahh damn, an optimized moar segfaults... I wanted to compare the timings so far

[18:36] <FROGGS> takes 1m11s atm to get to p6return

[18:37] <jnthn> I'm not sure where exactly that p6return is, fwiw

[18:38] <jnthn> A when in a role would do it

[18:39] <FROGGS> I've have read something about role_body

[18:39] <jnthn> Oh, it's probably the one in Blob.unpack

[18:39] <jnthn> Meaning we've parsed up to around 5163

[18:41] <FROGGS> ahh

[18:41] <FROGGS> '`when` in a role'

[18:41] <FROGGS> now I parse your message correctly :o)

[18:41] <jnthn> uh, yes :)

[18:42] <FROGGS> that would fit, because of when_handler_helper or the phaser stuff

[18:42] <jnthn> Anyway, seems we're beyond line 5000

[18:42] <FROGGS> jnthn++ # :o)

[18:42] <timotimo> the next 5000 will also take about a day, then? :)

[18:42] <FROGGS> less

[18:43] <FROGGS> there won't be spectacular things in the range of 5000 .. 10_000 I guess

[18:43] <jnthn> Well, don't jinx it

[18:44] <FROGGS> yeah, true

[18:44] <jnthn> There's always the chance we hit a nasty GC bug, for example.

[18:44] <FROGGS> damnit

[18:44] <FROGGS> now he said it -.-

[18:44] <FROGGS> :P

[18:44] * FROGGS .oO( Beatlejuice Beatlejuice Beatlejuice! )

[19:07] <jnthn> OK, so where on earth is the next error coming from...

[19:08] <FROGGS> cannot stringify this

[19:08] <FROGGS> Error while constructing error object:Could not locate compile-time value for symbol Undeclared

[19:08] <FROGGS> this?

[19:08] <FROGGS> $*W.throw($var, ['X', 'Undeclared'], symbol => $varast.name(), suggestions => @suggestions);

[19:09] <FROGGS> rakudo/src/Perl6/Grammar.nqp:284

[19:10] <jnthn> Yeah

[19:10] <jnthn> But what var is it on about

[19:10] * jnthn is trying to work out where we get to

[19:10] <FROGGS> I'm trying to say its name

[19:10] <jnthn> That's a clever way

[19:11] <jnthn> I'm shoving BEGIN nqp::say('here 1') s into CORE.setting...

[19:11] <FROGGS> ahh, nice trick

[19:11] <jnthn> Whoa, we make it *past* the one I shoved in at line 7000 or so

[19:11] <FROGGS> \o/

[19:12] <FROGGS> so, done today? *g*

[19:12] <jnthn> oh...

[19:12] <jnthn> It's a legit error too I think

[19:12] <jnthn> method new($block, Mu :$infinite) {

[19:12] <jnthn> my Mu $new := nqp::create(self);

[19:12] <jnthn> nqp::bindattr($new, GatherIter, '$!coro', $coro);

[19:12] <FROGGS> Cannot invoke null object

[19:13] <jnthn> I see no $coro

[19:13] <FROGGS> varast is null?

[19:13] <moritz> ... and the other backends don't complain?

[19:13] <FROGGS> the bang is missing

[19:14] <jnthn> moritz: It uses conditonal comp

[19:14] <moritz> oh.

[19:14] <jnthn> moritz: And theere wasn't a block for moar

[19:14] <jnthn> I just shoved in a my $coro = die 'NYI' or so

[19:14] <jnthn> for moar

[19:16] <FROGGS> Backtrace.pm:40 is such a candidate too

[19:17] <FROGGS> src/core/Exception.pm:159

[19:17] <FROGGS> shall I fix these?

[19:18] <jnthn> candidate for...?

[19:18] <FROGGS> a missing moar variant

[19:18] <FROGGS> it generates invalid code

[19:18] <moritz> nqp-m: nqp::backtrace(NQPMu)

[19:18] <camelia> nqp-moarvm: OUTPUT«Error while compiling op backtrace (source text: "nqp::backtrace(NQPMu)"): No registered operation handler for 'backtrace'␤frame_name_1109␤»

[19:18] <FROGGS> there are branches for #? parrot and #? jvm

[19:18] <moritz> FROGGS: it won't even copmile

[19:18] <jnthn> ah, ok

[19:18] <jnthn> yeah, go for them

[19:19] <jnthn> Our next issue is missing nqp::p6argvmarray

[19:19] <jnthn> Used in a role

[19:19] <jnthn> iiuc, that means we're at 8247

[19:21] <FROGGS> nqp-m: nqp::readfh()

[19:21] <camelia> nqp-moarvm: OUTPUT«Error while compiling op readfh (source text: "nqp::readfh()"): No registered operation handler for 'readfh'␤frame_name_1109␤»

[19:21] <FROGGS> :/

[19:21] <jnthn> oops, it's 8:20pm already and I didn't dinner

[19:21] <FROGGS> uhh, quick!

[19:22] <FROGGS> nqp-m: nqp::writefh()

[19:22] <camelia> nqp-moarvm: OUTPUT«Error while compiling op writefh (source text: "nqp::writefh()"): No registered operation handler for 'writefh'␤frame_name_1109␤»

[19:22] <jnthn> yay, now FROGGS++ has found things he can hack on the advance state of Rakudo on Moar ;)

[19:22] <FROGGS> :o)

[19:23] <FROGGS> nqp-m: nqp::tellfh()

[19:23] <camelia> nqp-moarvm: OUTPUT«Error while compiling op tellfh (source text: "nqp::tellfh()"): Arg count 0 doesn't equal required operand count 2 for op 'tell_fh'␤frame_name_1109␤»

[19:23] <FROGGS> good

[19:23] <jnthn> Tuit supply has been good this weekend, but tomorrow I need to worry about worrying $dayjob thing...

[19:25] <FROGGS> yeah, mondays...

[19:26] <jnthn> Well, I was meant to have 2-3 days for Perl 6 this week...alas, I need to help avert various disasters...

[19:29] <jnthn> Happy we're chewing through parsing lots of CORE.setting with Moar by now, though...

[19:30] <FROGGS> yeah, I have not expected to get that far

[19:31] <FROGGS> well, you know what I mean :o)

[19:31] <[Coke]> jnthn++

[19:32] <FROGGS> how does printfh differ from writefh?

[19:33] <jnthn> writefh is the one that takes a buf-y thing, iirc

[19:33] <FROGGS> ahh, yes, now I see it too

[19:36] <jnthn> shop; bbiab

[20:35] <dalek> MoarVM: 35016eb | (Tobias Leich)++ | / (8 files):

[20:35] <dalek> MoarVM: implement read_fhb which return an int8-array

[20:35] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/35016eb947

[20:48] <dalek> MoarVM: 6d49b5d | (Tobias Leich)++ | / (8 files):

[20:48] <dalek> MoarVM: implement write_fhb

[20:48] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6d49b5d5a5

[20:48] <jnthn> FROGGS: There's a little cluster of unimpl ops around 8250, turns out...

[20:49] <jnthn> But given what we hit right after what I just fixed, I'm pretty confident that's how far we are.

[20:50] <FROGGS> I guess you mean p6bindattrinvres and p6scalarfromdesc

[20:51] <jnthn> and p6list

[20:51] <FROGGS> hmm, no, both appear before

[20:51] <jnthn> but yeah, these.

[20:51] <FROGGS> ahh, k

[20:51] <jnthn> But we get away with it unless it's in a role...

[20:52] <jnthn> We'll hit a bunch of others at stage mast I guess :)

[20:52] <FROGGS> :o)

[21:00] *** ssutch joined
[21:30] <FROGGS> k, so p6scalarfromdesc is above my head

[21:32] <timotimo> is p6list getting tackled yet?

[21:32] <timotimo> i wonder what that op has to do

[21:33] <dalek> MoarVM: 0806222 | jnthn++ | src/gc/wb.h:

[21:33] <dalek> MoarVM: Make write barrier hit function public.

[21:33] <dalek> MoarVM:

[21:33] <dalek> MoarVM: Otherwise, we can never MVM_ASSIGN_REF in external code.

[21:33] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/08062228de

[21:35] <timotimo> there's probably much more to p6list that's not visible in the implementation i'm looking at right now (on jvm)

[21:35] *** _sri joined
[21:37] <jnthn> Just pushed p6list

[21:37] <timotimo> oh :)

[21:37] <jnthn> Working on 'p6bindattrinvres

[21:42] <jnthn> Which was easy. Now for p6scalarfromdesc.

[21:56] <nwc10> On Linux HEAD bombs out at

[21:56] <nwc10> Error while compiling op p6scalarfromdesc: No registered operation handler for '

[21:56] <nwc10> p6scalarfromdesc'

[21:56] <nwc10> which I guess is what you'd expect

[21:57] <jnthn> aye

[21:58] <FROGGS> nwc10: which is at line 8276 of 16956 :o)

[22:00] <nwc10> nqp-m: say(8276/16956)

[22:00] <camelia> nqp-moarvm: OUTPUT«0.488087␤»

[22:00] <FROGGS> aww

[22:01] <jnthn> D'oh, p6bindattrinvres had a couple of thinkos, masked by the missing  p6scalarfromdesc since that was used in its args...

[22:05] <FROGGS> :/

[22:19] <FROGGS> where are we now? do you know that?

[22:20] <jnthn> Not really

[22:20] <FROGGS> k

[22:22] <jnthn> Something tries to actually use p6store...

[22:22] <FROGGS> how bad of it! :P

[22:24] <jnthn> Trying to work out where we are as I think it may be "more than half way"

[22:25] <FROGGS> well, the only p6store that appears literally is at line 15861

[22:26] <FROGGS> but that can't be it :o)

[22:26] <jnthn> no, but = is implemented in terms of it :)

[22:26] <FROGGS> yeah, put there are some of them, no?

[22:27] * FROGGS tweaks gen-cat

[22:28] <jnthn> ah, I think I know what's causing it

[22:28] <jnthn> Well, what's triggering p6store I mean

[22:29] <jnthn> yeah, it's

[22:29] <jnthn> constant i = Complex.new(0e0, 1e0);

[22:29] <jnthn> Which is on line 10,374

[22:29] <FROGGS> yay!

[22:30] <FROGGS> seen it :o)

[22:30] <FROGGS> then my gen-cat should print 'src/core/Complex.pm'

[22:31] <jnthn> nqp-m: say(10374/16956)

[22:31] <camelia> nqp-moarvm: OUTPUT«0.611819␤»

[22:32] <jnthn> Guess we got my target of "past line 1000" :)

[22:32] <FROGGS> hehe

[22:32] <FROGGS> I think so too :P

[22:32] <jnthn> Anyways, p6store probably needs real work. :)

[22:35] <FROGGS> 10k lines within a day... that is pretty awesome :o)

[22:36] <jnthn> Oh...I wonder if we should just emit p6store as a number of instructions rather than trying to ext-op it...

[22:36] <jnthn> yeah, that'd make it a load more manageable

[22:36] <jnthn> And when we get a specializer it can probably eliminate an entire branch of it...

[22:40] <FROGGS> my modified gen-cat works fine...

[22:40] <FROGGS> which prints the name of the cat-ed file we are in, except for the first

[22:46] <FROGGS> yes, it prints Complex.pm :o)

[22:48] <jnthn> I'll probably look at p6store tomorrow evening.

[22:49] <jnthn> Unless I decide to just do a crazy number of hours on the $dayjob thing tomorrow to try and give it a firm shove off my plate... :)

[22:50] <FROGGS> I guess I'll look more into S11 tomorrow again

[22:50] <jnthn> Cool

[22:50] <jnthn> Good to keep lots of things moving along.

[22:50] <FROGGS> like trying to load two different versions of a module

[23:54] *** benabik joined
