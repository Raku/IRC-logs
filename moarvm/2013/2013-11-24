[01:26] *** BenGoldberg joined
[01:48] *** woolfy joined
[02:16] *** woolfy joined
[02:17] *** rurban1 joined
[02:20] *** BenGoldberg joined
[03:17] *** Ben_Goldberg joined
[03:40] *** ggoebel18 joined
[03:47] *** ggoebel19 joined
[06:18] *** rurban1 joined
[06:21] *** sorear joined
[08:45] <nwc10> jnthn: I left valgrind running, and it finds no problems

[08:54] <FROGGS[mobile]> not too bad

[09:39] *** rurban1 joined
[10:32] *** lizmat_ joined
[12:16] *** tgt joined
[12:20] <jnthn> nwc10: Nice

[12:49] <nwc10> jnthn: you are having the appropriate amount of fun?

[12:50] <jnthn> nwc10: I'm...uh..packing clothes for a week's trip away

[12:50] <nwc10> where you are going, is the beer good?

[12:52] <jnthn> Stockholm

[12:52] <jnthn> Yes :)

[16:01] <jnthn> Confirm that I make it to stage optimize here as well

[16:02] <FROGGS> I'd like to know why I die that early with an optimized moar

[16:03] <FROGGS> I mean, I can build nqp just fine, and it dies when compiling Perl6::BOOTSTRAP

[16:03] <jnthn> Oh...I have an optimized one here and make it all the way through the optimize stage

[16:03] <FROGGS> "Heap corruption detected: pointer 0x65b5178 to past fromspace"

[16:03] <jnthn> *to the

[16:03] <FROGGS> ohh

[16:04] <FROGGS> the bt only shows MVM_args_slurpy_positional as an interesting step

[16:05] <FROGGS> jnthn: how long does stage parse take then?

[16:05] <FROGGS> and what is your vm/parrot's stage parse?

[16:07] <jnthn> Forever.... I don't know about the latter number. I know it's a bunch slower than JVM.

[16:08] <FROGGS> I believe it took 460s on my box (unoptimized)

[16:26] *** cognominal joined
[16:27] <jnthn> I'm working on getting rid of the massive warnings spewing...

[16:31] <FROGGS> uhh, nice :o)

[16:32] * diakopter is curious how long moar takes to parse the setting compared to jvm

[16:39] <FROGGS> ohh

[16:39] <FROGGS> the gc debug output takes 2.5GB >.<

[16:39] <timotimo> sounds good :D

[16:39] <timotimo> oh wow, that's a bunch

[16:39] <FROGGS> good that I have an SSD :o)

[16:40] <timotimo> does it dump out the whole nurseries? :P

[16:40] <diakopter> essentially...

[16:40] <timotimo> er, we do have nurseries, right?

[16:41] <diakopter> in the gcorch branch the debug output is much more granular

[16:41] <diakopter> (controlled)

[16:41] <FROGGS> hmmm, the address from the error message is not in that output :/

[16:42] <diakopter> search case-insensitive?

[17:04] *** rurban1 joined
[17:05] <rurban1> diakopter: urcu is also bsd, cygwin and more. Until recently RCU was patent encumbered, not anymore. LGPL is a problem? You can simply link to it, no problem. Only inlining large parts would be.

[17:06] <nwc10> jnthn: I get:

[17:06] <nwc10> Stage start      :   0.000Nominal type check failed for parameter '%spec'; expected Associative but got BOOTHash

[17:07] <nwc10> oh, well, sort of like that. Clearly the terminal had the munchies

[17:08] <FROGGS[mobile]> nwc10: I believe you are missing a commit

[17:08] <nwc10> but no 10 PRINT "NYI"; 20 GOTO 10

[17:08] <nwc10> FROGGS[mobile]: Rakudo is at a6eeb0b159b82f41a2088cb20105f651fdead89b

[17:08] <nwc10> Implement nominal type checks in binder

[17:09] <nwc10> everything seems to be current

[17:09] <FROGGS[mobile]> then it might be right, cant check right now

[17:11] <FROGGS[mobile]> right, the BOOTHash msg from sat/fri was a different one

[17:14] <jnthn> nwc10: Yup, me too

[17:15] <jnthn> nwc10: I implemented the missing type check and it caught something we got away with before

[17:22] <jnthn> oh, joy...the train now as a "technical problem"...

[17:23] <timotimo> more time to hack before you arrive ;)

[17:45] <nwc10> jnthn: the "technical problem" affects movement? Or screws the lights, the food and the Internet too?

[17:45] <nwc10> is the gravity on the blink yet?

[17:45] <timotimo> don't blink

[17:45] <timotimo> don't even blink

[17:45] <timotimo> blink and you're dead

[17:50] <jnthn> nwc10: Movement, for a while. We're going againnow....

[17:51] <dalek> MoarVM: 50a6529 | jonathan++ | src/core/interp.c:

[17:51] <dalek> MoarVM: Bring iscont inline with other backends.

[17:51] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/50a6529278

[17:52] <FROGGS> diakopter: no, it already was a case-insensitive search

[17:55] <jnthn> detrain &

[18:31] *** colomon joined
[20:20] *** jnap joined
[21:43] <jnthn> OK, got local commits that recover us to the point we were at before, but with the sig binder actually enforcing type checks...

[21:45] <FROGGS> jnthn++ # :o)

[21:45] <jnthn> I've also got a lead on what's making setting compilation so utterly slow.

[21:45] <FROGGS> ohh cool!

[21:45] <FROGGS> that is way more interesting :D

[21:45] <FROGGS> do tell

[21:45] <jnthn> (mind-blowing number of call frames hanging around

[21:46] <FROGGS> ohh

[21:46] <jnthn> And I can guess where from, *and* I think if we can fix it we might well get a win on all backends.

[21:46] <diakopter> why's that

[21:46] <FROGGS> could that case the "Heap corruption detected: pointer 0x65b5178 to past fromspace"?

[21:46] <jnthn> No, that sounds like a plain old bug...

[21:47] <tadzik> how boaring

[21:47] <FROGGS> awesome

[21:47] <diakopter> roar

[21:47] <FROGGS> gah

[21:47] <FROGGS> how goating

[21:47] <diakopter> boaning

[21:48] <jnthn> I love how talking about goating makes diakopter thing about boaning :P

[21:48] <jnthn> *think

[21:49] <diakopter> gloating

[21:50] <FROGGS> now you're just woaffling :P

[21:52] <diakopter> jnthn: lemme guess: past stub clones

[21:52] <jnthn> no, something grammar related

[21:53] <diakopter> I thiught that was grammar related

[21:53] <FROGGS> thought* # that was grammar related

[21:53] <FROGGS> sort of

[21:54] <diakopter> hee

[21:54] <FROGGS> damn it... how should I sleep now when there might be a win on all backends out there??

[21:55] <tadzik> don't sleep, let's not sleep together

[21:55] <tadzik> ...that sounds a bit bad

[21:55] <dalek> MoarVM: 4867b27 | jonathan++ | src/core/hll. (2 files):

[21:55] <dalek> MoarVM: Support HLL array/hash/code mappings.

[21:55] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4867b27698

[21:55] <FROGGS> been there, done that :o)

[21:57] <diakopter> tadzik: but, 《cry》

[21:59] <diakopter> well that didn't work out very well

[21:59] <diakopter> (now on a real keyboard)

[22:12] *** cognominal joined
[22:35] <jnthn> OK, my prototype of the change makes CORE.setting compilation time on Moar about 2/3 of what it was before...and seems to shave some space off

[22:36] <jnthn> I'm going to push it to a branch in NQP and leave testing on other platforms to @other

[22:36] <timotimo> yays!

[22:36] <jnthn> Also it warrants a Rakudo spectest run on it too

[22:37] <FROGGS> I'll do that and report after $sleep

[22:42] <benabik> What change makes CORE take 2/3rds the time?

[22:42] <timotimo> https://github.com/perl6/nqp/commit/3b280649c2

[22:42] <jnthn> benabik: Only tried on Moar, and only stage parse.

[22:43] <diakopter> jnthn: so what's keeping that cursor hanging around

[22:44] <jnthn> diakopter: Well, cursors stay around because match objects point to them.

[22:44] <jnthn> diakopter: But there's no reason cursors we'll never backtrack into need to keep pointing at other things.

[22:44] <diakopter> even failed cursors?

[22:44] <diakopter> er, failed matches

[22:45] <jnthn> Yeah, but those tend not to stick around long anyway

[22:45] <jnthn> Especially as <foo>? is now Nil

[22:46] <jnthn> There's something that makes me uneasy though...the fix I did shouldn't have helped as much as it did, or so goes my gut feeling

[22:46] <diakopter> right, that's my gut feeling too

[22:46] <diakopter> which I was trying to express by those questions :)

[22:47] <jnthn> Or at least, if may help other backends proportionally do how it helped Moar.

[22:47] <jnthn> Which is *fine*. :)

[22:47] <jnthn> But still leaves us with some stuff to hunt down :)

[22:47] <diakopter> it hints that there are plenty larger gains out there

[22:47] <jnthn> Aye.

[22:48] <diakopter> "they're not inefficiencies! they're potential programmer rewards!"

[22:48] <jnthn> Well, one advantage I have with Moar is I understand it near enough fully and can do quick instrumentation hacks if I need to go exploring...

[22:49] <jnthn> Ah...yeah, something needs looking into

[22:50] <jnthn> The inter-generational roots list is huge.

[22:51] <diakopter> oo that's a potential big gain :)

[22:51] <jnthn> Well, I once knew we had algorithmic todo there, but I did that a while back. But yeah, that shouldn't happen. Will need to work out why.

[22:51] <timotimo> jnthn: see #perl6, on parrot i get no big speed improvement

[22:52] <timotimo> like 4% perhaps

[22:53] <jnthn> timotimo: OK. What about memory, ooc?

[22:53] <timotimo> i'll have to measure that more carefully

[22:53] <timotimo> i'm doing the spectests ATM

[22:53] <timotimo> should i measure the memory usage first?

[22:56] <jnthn> Well, whatever order you wish :)

[22:56] <jnthn> Something odd is that we seem to box an insane number of ints

[22:57] <FROGGS> moar stage parse is 318.597s, was 468s

[22:58] <diakopter> win.

[22:58] <jnthn> Nice

[22:58] <jnthn> Well, "nice"

[22:58] <FROGGS> :o)

[22:58] <diakopter> that's still about 318 more seconds than I'd hope it to be eventually

[22:58] <timotimo> oh wow.

[22:58] <timotimo> you have some high ambitions

[22:58] <FROGGS> diakopter: that is an unoptimized moar

[22:59] <diakopter> timotimo: like you wouldn't even believe

[23:00] <FROGGS> it only takes a few seconds (to explode) using an optimized moar though

[23:00] <timotimo> oh yikes

[23:00] <benabik> Erm.  Exploding bad.

[23:01] <timotimo> so the parrot spectests are completely clean except the one failure froggs also has had for ages

[23:01] <FROGGS> benabik: but it explodes fast :o)

[23:01] <FROGGS> and that is what we want after all

[23:01] <benabik> Slow explosions are just burning.  ;-)

[23:02] <jnthn> OK, sleep time for me :)

[23:02] <jnthn> 'night

[23:03] <FROGGS> gnight jnthn

[23:04] <diakopter> FROGGS: wait, asplode?

[23:04] <FROGGS> diakopter: yes

[23:04] <diakopter> boo

[23:05] <FROGGS> a gc bug as it seems

[23:05] <FROGGS> missing MVMROOT probably

[23:05] <diakopter> I'm curious if the gcorch branch fixes it (once the gcorch branch is fixed to work at all really)

[23:08] <timotimo> yeah, when is that going to hit master? :)

[23:08] <benabik> Presumably sometime after it starts working.

[23:08] <diakopter> <shrug>

[23:08] <timotimo> i guess that's fair

[23:09] <diakopter> I'll have to kickban dalek temporarily so jnthn doesn't notice the merge ;)

[23:13] <diakopter> that was a joke, future jnthn

[23:16] <timotimo> i wonder what big problems moarvm has for parsing performance

[23:21] <FROGGS> I'll compile tomorrow on windows to see how fast/slow an optimized moar does it

[23:23] <timotimo> should i do JVM today?

[23:24] <FROGGS> I did, 54s, but I dunno how long it took before

[23:24] <FROGGS> currently spectesting both

[23:26] <FROGGS> no difference in p's stage parse, as you mentioned

[23:28] <FROGGS> gnight

[23:28] <timotimo> ginte :)

[23:50] *** BenGoldberg joined
[23:56] *** FROGGS joined
