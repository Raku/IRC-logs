[00:24] <TimToady> reproduced the mbc failure this time, sigh

[00:26] <TimToady> trying some git submodule syncs this time

[00:27] <TimToady> and a reconfig

[00:27] <TimToady> (after a realclean

[00:27] <TimToady> )

[00:27] <diakopter> )

[00:28] <TimToady> on my supercomputer, m-spectest got up to /S02-literals/types.t before hanging permanently

[00:37] <TimToady> still mbc-busted, trying realclean, reconfig in MoarVM

[00:42] <diakopter> du4F)

[00:53] * lue wonders if that "uv__loop_delete" assertion will be Moar's Null PMC ...

[00:58] <[Coke]> TimToady: you can load Test.pm?

[01:01] <TimToady> on one machine, but not on the other

[01:01] <TimToady> in fact, on the other, I haven't even quite got back to the state of compiling Test.pm (mbc, m-BOOTSTRAP)

[01:01] <TimToady> probably about time to blow the whole thing away and try again from git

[01:02] <TimToady> funny thing is, these are both Linux Mint 15 machines, 64-bit

[01:08] <diakopter> lue: no, it's just a platform quirk

[01:08] <diakopter> combined with a misthink by me|others

[01:09] <diakopter> TimToady: yeah I found a missing dependency or two from scratch

[01:09] <lue> diakopter: I meant more in that "this problem is deeper than just Rakudo" feeling the error gives. Time will tell if the assertion error lasts as long though :)

[01:09] <diakopter> (as written above)

[01:10] <diakopter> lue: no, I'm saying I know for a fact it's a tiny subsystem and an error condition that can only be reached at the very end of execution

[01:10] <diakopter> as opposed to the null pointer exception or nullpmc that will likely be just as prevalent on moar as it is currently on jvm and parr

[01:11] <lue> OK, wasn't sure how literally would you were transposing the idea of Null PMC.

[01:11] <diakopter> well that error can occur in a huge number of places

[01:11] <diakopter> but the libuv loop delete assertion is in only one place and is affected by code in only a ocuple places

[01:15] <lue> OK, the error just happens to crop up more often than others because of the specific places it gets triggered, not because it's a generic signal for bad code. Got it.

[01:35] *** jnap joined
[02:22] <TimToady> by adding a --stagestats (filling in a missing parameter?) I got a Test.pm compile

[02:22] <TimToady> now spectesting on my laptop

[02:24] *** colomon joined
[02:26] <TimToady> t/spec/S02-magicals/vm.t ...................................... ok

[02:27] <TimToady> that took at least two cpu minutes to get ok of a 3/3

[02:30] <TimToady> hmm, spectest does not seem to be accessing lib/Test.moarvm nor blib/Test.moarvm

[02:31] <[Coke]> do you get an error with ./perl6-m -Ilib -MTest -e1; ?

[02:34] <TimToady> oddly enough, not updating the access time on Test.pm either

[02:35] <TimToady> no error, but it also doesn't update the last access time

[02:35] * TimToady scratches head

[02:36] <TimToady> is there a way to open a file that doesn't update last access?

[02:36] <TimToady> or would not closing it have that effect?

[02:36] <TimToady> are these files mmapped in?

[02:37] <TimToady> I suppose I could do an strace...

[02:44] <TimToady> Hah!

[02:44] <TimToady> it's *not* accessing either Test.pm or Test.moarvm

[02:44] <TimToady> stat("/home/larry/nom/lib/test.pm", 0x7fff9fccace0) = -1 ENOENT (No such file or directory)

[02:44] <TimToady> stat("/home/larry/nom/lib/test.pm6", 0x7fff9fccace0) = -1 ENOENT (No such file or directory)

[02:44] <TimToady> stat("/home/larry/nom/lib/test.moarvm", 0x7fff9fccace0) = -1 ENOENT (No such file or directory)

[02:44] <TimToady> note the lowercase

[02:44] <TimToady> this is Windows branedamage

[02:45] <[Coke]> ARGLEBARGLE

[02:45] <[Coke]> TimToady++

[02:46] <TimToady> diakopter: ^^^

[02:47] <TimToady> dinner &

[02:47] <diakopter> gah

[02:47] <diakopter> <- don't know where to fix that

[02:48] <TimToady> .oO(Redmond?)

[02:48] <TimToady> rafk &

[02:49] <[Coke]> If no one figures it out, I can check it out after blogventing.

[02:51] *** colomon joined
[03:31] *** colomon joined
[04:39] <TimToady> a lot of the hanging tests seem to do with enums

[04:43] <TimToady> but not all of them

[04:52] <TimToady> well, there's a lot of others too, with no apparent pattern

[04:52] <diakopter> hrm

[04:53] <diakopter> hanging burning cpu or not?

[05:01] <TimToady> yes, there're about 20 burners

[05:02] <TimToady> probably just need to cut one down to a minimal test, assuming it's not GC craziness

[05:04] <TimToady> well, chances are most of 'em are the faked continuations

[05:11] <TimToady> well, that's also a mere guess...

[05:21] <diakopter> it's almost certainly a loop as opposed to polynomial or exponential or factorial or...

[05:25] <TimToady> failed 179 test files

[05:25] <TimToady> which ain't too shabby at this point

[05:26] <TimToady> otoh I noticed roast's standards for e and pi are quite low

[05:28] <diakopter> "Windows branedamage" is damage caused by using Windows, or damage to Windows caused by some kind of brains?

[05:33] *** jnap joined
[05:36] <[Coke]> TimToady: when running the speculative spec tests, I use a local ./perl6 that is a ulimited perl6-x

[05:36] <[Coke]> that might at least help you get past the hangers.

[05:37] <TimToady> first minimal looping test: class B is C { }

[05:37] <lue> ooc, to those who know MoarVM, can you specify multiple --libpath paths? Either through use of multiple --libpaths or a [delimiter]-separated list to one --libpath ?

[05:42] <TimToady> oh cool, Internal error: invalid thread ID in GC work pass

[05:43] <diakopter> heh.

[05:43] <diakopter> there shouldn't be more than 1 thread :)

[05:44] <diakopter> TimToady: can perl6-m compile that input to a .moarvm? and can moar --dump that .moarvm?

[05:49] <TimToady> here's another looper: class Bar {}; role B { has $.attr is rw = 42 }; my Bar $b .= new(); $b but B;

[05:50] <TimToady> dunno, was on the way to getting that snippet, which loops

[05:50] <TimToady> lemme see if I can minimize the GC carpage instead

[05:54] <TimToady> doesn't really minimize, chopping random bits out makes it loop instead

[05:56] <diakopter> heh,

[05:57] <TimToady> moar --dump segfaults on it

[05:58] <TimToady> but then, it segfaults on lib/Test.moarvm too :)

[06:00] <TimToady> anyway, t/spec/S14-roles/basic.rakudo.moar if you want to fiddle with it yourself

[06:00] <TimToady> about half the time I can get a segving compile to pass by adding --stagestats

[06:01] <TimToady> and sometimes it even succeeds before it segvs, so probably segv is from exiting somehow

[06:02] * TimToady yawns hugely

[06:38] * diakopter huge yawnsly

[07:35] *** jnap joined
[08:00] <[Coke]> ... I really wish I had been trying to build stuff in between watching that stargate movie. whoops.

[08:03] <[Coke]> add in an nqp:say to get some diagnostic output, introduce a segfault.

[08:18] <[Coke]> diakopter: it'd be nice to have whatever host06's "trace" command is available.

[08:19] <[Coke]> I was trying to fix the issue TimToady was seeing with search for wrong-cased names, but I don't see it in the code, want to see if it's just his install

[08:34] *** cognominal joined
[08:35] *** jnap joined
[09:36] *** jnap joined
[10:35] *** woolfy joined
[10:35] *** lizmat_ joined
[10:37] *** jnap joined
[11:56] <FROGGS> TimToady / diakopter: --dump is known to be broken

[12:33] *** tgt joined
[12:38] *** jnap joined
[13:33] *** colomon joined
[13:39] *** jnap joined
[14:08] *** cognominal joined
[14:11] *** jnap joined
[15:15] *** wsri joined
[15:33] <TimToady> [Coke]: sorry, realized this morning  I mighta typed -Mtest instead of -MTest

[15:38] * TimToady apologizes to all those with Windows branedamage :)

[15:44] <TimToady> if I'd stuck the 'use Test' into the -e I'd've noticed; I'm not a habitual user of -M, so the initial capness of the M ate the initial capness of the T in my brane

[15:45] <FROGGS> still good to know :o)

[15:46] <TimToady> just regret the wild-goose chase I sent [Coke]++ on

[15:49] *** cognominal joined
[15:53] <FROGGS> sure, but it is good that this was a level 8 error instead of something else

[16:18] *** cognominal joined
[17:00] *** FROGGS joined
[17:30] *** colomon joined
[18:18] *** ssutch joined
[20:49] <diakopter> nwc10: the solution is to have the thread mark the mutex with its thread id after locking it, so in case it's locked, and it's marked with its own thread id, it .. increments a depth counter (like you said, faking up a recursive one) .. and then needs to be sure to decrement it when unlocking, and if it decremnts it to zero, unset the owner threadid and then unlock the mutex

[20:51] <diakopter> nwc10: I think that's the only one to worry about..

[20:51] <diakopter> nwc10: nice find. :) nwc10++

[20:58] *** tgt joined
[21:00] <[Coke]> TimToady: eh, I understand a little bit moar now.

[21:00] <[Coke]> I am bummed that I cannot load Test.pm though. :|

[21:01] <[Coke]> I get a segfault trying to moar --dump lib/Test.moarvm

[21:02] * TimToady did: strace install/bin/moar --libpath=/home/larry/nom/install/languages/nqp/lib perl6.moarvm -Ilib -e 'use Test; say "hi"' >/tmp/st 2>&1

[21:02] <TimToady> that seems to work

[21:02] <TimToady> someone said the --dump is a known deficiency

[21:04] <[Coke]> if I just run moar lib/Test.moarvm, I get:

[21:04] <[Coke]> Unhandled exception: Bytecode validation error at offset 2552, instruction 368:

[21:04] <[Coke]> extension op 'p6box_i' not registered

[21:16] <timotimo> huh? weird.

[21:16] <timotimo> did you try a full clean rebuild?

[21:16] <timotimo> we couldn't have made it through the setting if we didn't have p6box_i, could we?

[21:17] <diakopter> yeah; the dependency of Test.moarvm on perl6.moarvm is apparently not being added

[22:25] *** jnap joined
[23:25] *** jnap joined
[23:45] *** nwc10 joined
