[00:00] <jnthn> Other than that, seems sane at first glance

[00:04] <FROGGS> cool :o)

[00:20] <jnthn> 'night o/

[00:21] <FROGGS> gnight

[01:07] *** odc joined
[02:21] <JimmyZ> Good news, compiling core.setting works on linux now.

[02:22] <JimmyZ> nwc10++

[02:23] <JimmyZ> jnthn++

[03:22] <TimToady> the gcc docs say: Please note the warning under -fgcse about invoking -O2 on programs that use computed gotos.

[03:22] <TimToady> do we use computed gotos?

[03:23] <JimmyZ> yes. but not by default

[03:24] <JimmyZ> used by `make cgoto`

[03:26] * TimToady tries -O2 -fno-gcse to see what happens

[03:32] <JimmyZ> I see -fgcse doces there

[03:32] <JimmyZ> -fgcse Perform a global common subexpression elimination pass. This pass also performs global constant and copy propagation.

[03:32] <JimmyZ> Note: When compiling a program using computed gotos, a GCC extension, you may get better run-time performance if you disable the global common subexpression elimination pass by adding -fno-gcse to the command line.

[03:34] <TimToady> doesn't make any difference though :)

[03:34] <JimmyZ> just may get better run-time -fgcse Perform a global common subexpression elimination pass. This pass also performs global constant and copy propagation.

[03:34] <JimmyZ> oh

[03:34] <JimmyZ> bad keyboard

[04:44] *** cognominal joined
[05:22] *** ingy joined
[05:55] *** eternaleye joined
[05:56] *** eternaleye joined
[05:58] *** benabik joined
[06:05] *** jnap joined
[06:23] *** ssutch joined
[07:06] *** jnap joined
[07:38] <nwc10> Elizabeth, 4.5, has a feature request. We want more colours.

[07:38] <nwc10> [the build output is too monochrome :-)]

[07:54] <moritz> it's dichrome here :-)

[08:07] *** jnap joined
[08:53] <FROGGS> the absolute_path function in rakudo's ML does not work, it prepends the cwd even to absolute paths

[08:54] <FROGGS> perl6-m -e 'say so "/home/froggs/dev/v5/lib" ~~ m/^\//'

[08:54] <FROGGS> False

[08:55] <FROGGS> perl6-p -e 'say "/home/froggs/dev/v5/lib" ~~ m/^\//'

[08:55] <FROGGS> ｢/｣

[08:55] <FROGGS> ummm, how can this be false?

[08:56] <FROGGS> Match.new(orig => "/home/froggs/dev/v5/lib", from => 0, to => 1, ast => Any, list => ().list, hash => EnumMap.new())

[08:57] <FROGGS> $/.Bool says True

[08:58] <FROGGS> hmpf, most what I said was using perl6-p >.<

[09:00] <FROGGS> perl6-m -e 'say so "/home/froggs/dev/v5/lib" ~~ m/^\//; say so $/'

[09:00] <FROGGS> False

[09:00] <FROGGS> True

[09:29] <FROGGS> ohh

[09:29] <FROGGS> --ll-exception reveals it...

[09:29] <FROGGS> perl6-m --ll-exception -e 'say "/home/froggs/dev/v5/lib".match(/./)'

[09:29] <FROGGS> use of uninitialized value of type Any in numeric context

[09:29] <FROGGS> p6sort NYI

[09:31] <FROGGS> it is the sort in Match.caps btw

[09:32] <FROGGS> so it is say() only :/ (aka false positive)

[09:35] <FROGGS> btw, I am collecting absurdities now here: https://gist.github.com/FROGGS/cbdcd4054a450d0faa22

[09:37] <timotimo> hm. is our regex codegen wrong?

[09:37] <FROGGS> maybe for the dot

[09:51] <FROGGS> somehow a smartmatch against a regex does not update $/ early enough

[09:54] <FROGGS> yes, changing a $path ~~ m/^\// to $path.match(/^\//) helps

[10:01] <FROGGS> the method form should be cheaper anyway

[10:01] <timotimo> wouldn't it compile-time dispatch anyway?

[10:08] *** jnap joined
[10:24] <FROGGS> the smartmatch version build an ast around the method call plus additional stuff

[10:25] <timotimo> ah, yes. at some point we really should build clever code to only change the topic if it's going to be used and things like that

[10:51] <timotimo> (also: compile-time dispatch won't happen for methods, duh)

[10:51] <timotimo> though since it's a WVal in the first argument, we actually *could* compile-time dispatch, maybe

[10:52] <timotimo> on the other hand, it should be caught by jnthn's invokedynamic work? i'm not sure if methods got the invokedynamic treatment yet

[10:52] <timotimo> OTOH, /.../.match(...) won't compile-time dispatch either

[12:10] *** jnap joined
[13:49] <dalek> MoarVM/moar_libpaths: 80a60fc | jonathan++ | / (3 files):

[13:49] <dalek> MoarVM/moar_libpaths: Fix op signature of SC WB ops.

[13:49] <dalek> MoarVM/moar_libpaths:

[13:49] <dalek> MoarVM/moar_libpaths: They were declared as handing back obj, but actually gave int64. This

[13:49] <dalek> MoarVM/moar_libpaths: could leave invalid pointers around in registers.

[13:49] <dalek> MoarVM/moar_libpaths: review: https://github.com/MoarVM/MoarVM/commit/80a60fc095

[13:49] <dalek> MoarVM/moar_libpaths: becd41e | (Tobias Leich)++ | / (3 files):

[13:49] <dalek> MoarVM/moar_libpaths: Merge branch 'master' of github.com:MoarVM/MoarVM into moar_libpaths

[13:49] <dalek> MoarVM/moar_libpaths: review: https://github.com/MoarVM/MoarVM/commit/becd41eb00

[13:49] <dalek> MoarVM/moar_libpaths: 592f914 | (Tobias Leich)++ | src/ (5 files):

[13:49] <dalek> MoarVM/moar_libpaths: git figure_filename a proper name

[13:49] <dalek> MoarVM/moar_libpaths:

[13:49] <dalek> MoarVM/moar_libpaths: and also move it to io/fileops.

[13:49] <dalek> MoarVM/moar_libpaths: review: https://github.com/MoarVM/MoarVM/commit/592f914bba

[13:58] <dalek> MoarVM: e884128 | (Tobias Leich)++ | src/ (6 files):

[13:58] <dalek> MoarVM: allow several --libpath options

[13:58] <dalek> MoarVM:

[13:58] <dalek> MoarVM: And also search for libperl6_ops_moar.so in these paths.

[13:58] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e884128039

[14:01] <FROGGS> yay, my first rebase -i

[14:01] <timotimo> :)

[14:11] *** jnap joined
[14:19] *** jnap joined
[14:57] <FROGGS> ===SORRY!===

[14:57] <FROGGS> Object conflict detected during deserialization.

[14:57] <FROGGS> (Probable attempt to load two modules that cannot be loaded together).

[14:57] <FROGGS> :o(

[14:57] <timotimo> :(

[14:58] <FROGGS> that happens when compiling Perl5::Config

[14:58] <timotimo> some merging resolution feature missing from mokudo still?

[14:58] <FROGGS> no idea

[15:03] <FROGGS> ahh, it is about object repossession

[15:50] *** pryamogon joined
[16:28] *** jnap joined
[16:28] *** rurban joined
[17:23] <FROGGS> btw, I believe we pass about 18k tests

[17:37] <FROGGS> perl6-m -e 'use v5; say $^O'

[17:37] <FROGGS> linux

[17:37] <FROGGS> \o/

[18:20] *** jnap joined
[18:23] *** dalek joined
[18:31] *** timotimo joined
[19:19] *** masak joined
[19:19] *** colomon joined
[19:20] <masak> I want to run just the GC of MoarVM in isolation.

[19:20] *** jnap joined
[19:21] <masak> maybe extract the C files related to the GC and run them alone, instrumenting them in a harness.

[19:21] <masak> can that be done? anyone know, before I go ahead and try? :)

[19:49] <masak> I'm experiencing errors building MoarVM master :/ https://gist.github.com/masak/f76917b23911061f3d29

[19:50] <FROGGS> masak: make clean or realclean

[19:50] <FROGGS> looks like your 3rdparty libs were built ages ago

[19:55] * masak realcleans and tries again

[19:56] <masak> is it unreasonable to expect the Configure.pl process to stop-and-emit something like "looks like your 3rdparty libs were built ages ago" ?

[19:57] <masak> (worked now.) FROGGS++

[19:58] <FROGGS> I guess we make it nicer when moarvm has more than ten users :o)

[19:59] <masak> there is that.

[19:59] * masak files a moarvmissue

[20:06] <diakopter> masak: hi

[20:09] *** FROGGS[mobile] joined
[20:21] *** jnap joined
[20:23] <masak> diakopter: ahoj :)

[20:23] <masak> diakopter: many happy &returns

[20:25] <diakopter> haopy 2015

[20:25] <diakopter> 2013

[20:25] <diakopter> 2014

[20:26] <diakopter> happy

[20:30] <FROGGS[mobile]> diakopter: happy happy to you too

[21:22] *** jnap joined
[22:23] *** jnap joined
[22:32] <lue> Unhandled exception: Bytecode validation error at offset 24, instruction 4:

[22:32] <lue> operand type 32 does not match register type 64

[22:32] <lue> While building nqp

[22:52] *** colomon joined
[23:45] <lue> Is it the result of old files hanging around somewhere perhaps?
