[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[02:07] *** evalable6 left
[02:07] *** linkable6 left
[02:07] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1746: Add a bunch of `*_u` stuff

[02:07] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1746

[02:07] *** evalable6 joined
[02:09] *** linkable6 joined
[02:27] <MasterDuke> hm. i wonder if we need e.g., add_u?

[02:35] <MasterDuke> timo1: any idea how i could also get the checkarity and param* ops optimized away here https://gist.github.com/MasterDuke17/731d43a502bc1f8ede5d26b4192ccade#file-uint-spesh-log-L67 like they are in the `int` version?

[02:36] <[Coke]> is there a JIT if we're running in arm64?

[02:36] <[Coke]> or just x86_64 (on mac)

[02:42] <MasterDuke> no jit on arm

[02:46] <MasterDuke> timo1: oh, i think it's back to that arg_type business. so what is my pr missing?

[03:52] <MasterDuke> nine: interestingly, that t/09-moar/01-profilers.t used to be trivially reproable for me, but now it's been running 750+ times without a fail (with spectests running in the background)

[04:16] *** squashable6 left
[04:16] *** squashable6 joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[07:49] *** linkable6 left
[07:49] *** tellable6 left
[07:49] *** greppable6 left
[07:49] *** releasable6 left
[07:49] *** squashable6 left
[07:49] *** evalable6 left
[07:49] *** benchable6 left
[07:49] *** sourceable6 left
[07:49] *** nativecallable6 left
[07:49] *** unicodable6 left
[07:49] *** bloatable6 left
[07:49] *** statisfiable6 left
[07:49] *** notable6 left
[07:49] *** reportable6 left
[07:49] *** shareable6 left
[07:49] *** quotable6 left
[07:49] *** committable6 left
[07:49] *** coverable6 left
[07:49] *** bisectable6 left
[07:50] *** bisectable6 joined
[07:50] *** evalable6 joined
[07:50] *** nativecallable6 joined
[07:50] *** squashable6 joined
[07:50] *** statisfiable6 joined
[07:50] *** committable6 joined
[07:51] *** unicodable6 joined
[07:51] *** quotable6 joined
[07:51] *** linkable6 joined
[07:51] *** notable6 joined
[07:51] *** benchable6 joined
[07:51] *** coverable6 joined
[07:51] *** releasable6 joined
[07:52] *** sourceable6 joined
[07:52] *** greppable6 joined
[07:52] *** reportable6 joined
[07:52] *** shareable6 joined
[07:52] *** bloatable6 joined
[07:53] *** tellable6 joined
[08:50] <timo1> we need the param_rp_u op to be able to handle a native int (not uint) flag in the callsite (and probably the rp_i to support a native uint flag)

[09:40] <timo1> it's possible that we are actually supposed to have a uint flag in the callsite there, not sure if that's true. that woul mean a change in rakudo probably. perhaps in the piece that optimizes a for loop over a range?

[10:22] <lizmat> yeah, afaik that only looks at the primspec of native ints ?

[10:51] *** linkable6 left
[10:51] *** evalable6 left
[10:52] <timo1> so --target=optimize for the example code with int and with uint could be insightful

[10:52] <timo1> beyond just looking at the generated moar instructions

[10:52] *** linkable6 joined
[10:53] *** evalable6 joined
[10:53] <timo1> we might need both the moar changes MD already put in the PR and an additional change in rakudo's optimizer

[10:54] <timo1> maybe also a bit more inside spesh

[10:59] <timo1> upon a quick glance it looks like the for-over-range optimization activates, but it probably generates an int register where it could know that the pointy block takes a uint

[10:59] <timo1> slightly confounding issue: for this optimization we start the counter register at -1

[11:00] <timo1> if we want to continue using this, we will have to make sure that whatever we do we properly overflow from whatever -1 turns into back to 0 or we get very funky results from very benign looking code

[11:01] <timo1> possible further point of research: what happens if we put an at-the-integer-limit value as the start or end of the range we for over, since we have the -1 at the start value, the -1 at the end value, and checks and whatnot

[11:02] <timo1> do we ever accidentally make a 0 steps for loop when the start and end value are fine before the optimization but become funky after?

[11:05] <lizmat> timo1   assigning -1 to a uint and then incrementing yields 0, so there no issue there afaik

[11:05] <lizmat> m: my uint $a = -1; say $a; $a++; say $a

[11:05] <camelia> rakudo-moar 2183ec721: OUTPUT: «18446744073709551615␤0␤»

[11:25] <timo1> this amuses me: the symbol for NL puts an nl at the top and an L at the bottom, so NL followed by 0 followed by another NL reads like NON LOL

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:14] <lizmat> ␤a␤u␤a␤u

[12:17] <timo1> very good

[15:38] *** kjp left
[15:38] *** kjp joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[19:36] *** shmup_ joined
[19:37] *** shmup left
[23:09] *** shmup_ is now known as shmup

[23:33] *** kjp left
