[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:07] <MasterDuke> huh. we don't have a function to copy an MVMString?

[01:09] <MasterDuke> guess i have to go via REPR->copy_to()

[01:14] <MasterDuke> oh, or MVM_repr_clone()

[01:15] <MasterDuke> maybe i'm making this more complicated than it needs to be

[01:16] <MasterDuke> on windows, the moarvm implementation of nqp::isexecutable needs to know the filename. the stat-related syscalls i've been adding don't have/know the filename

[01:17] <MasterDuke> so i was going to add an `MVMString *filename` field to the new MVMStat repr (surrounded by `#ifdef _WIN32`, so linux/mac don't pay the cost)

[01:21] <MasterDuke> but i was thinking that the MVMStat repr should have a copy of the string, so it can safely free it. and then when an MVMStat is copied, it should also copy the filename. but in copy_to, i have the two body structs, not the object header structs

[01:22] <MasterDuke> so i can't just call MVM_repr_clone()

[01:22] <MasterDuke> any thoughts/suggestions?

[01:23] <MasterDuke> afk for a bit, but should be back a little later this evening

[02:07] <MasterDuke> maybe i'll just not copy, and assume gc will keep everything safe

[04:19] *** nativecallable6 left
[04:19] *** bisectable6 left
[04:19] *** tellable6 left
[04:19] *** benchable6 left
[04:19] *** squashable6 left
[04:19] *** bloatable6 left
[04:19] *** coverable6 left
[04:19] *** unicodable6 left
[04:19] *** sourceable6 left
[04:19] *** releasable6 left
[04:19] *** shareable6 left
[04:19] *** notable6 left
[04:19] *** committable6 left
[04:19] *** statisfiable6 left
[04:19] *** quotable6 left
[04:19] *** greppable6 left
[04:19] *** linkable6 left
[04:19] *** reportable6 left
[04:19] *** evalable6 left
[04:19] *** benchable6 joined
[04:20] *** committable6 joined
[04:20] *** unicodable6 joined
[04:20] *** tellable6 joined
[04:20] *** evalable6 joined
[04:20] *** linkable6 joined
[04:20] *** notable6 joined
[04:20] *** shareable6 joined
[04:20] *** squashable6 joined
[04:21] *** quotable6 joined
[04:21] *** bisectable6 joined
[04:21] *** greppable6 joined
[04:21] *** nativecallable6 joined
[04:21] *** statisfiable6 joined
[04:21] *** reportable6 joined
[04:22] *** sourceable6 joined
[04:22] *** releasable6 joined
[04:22] *** coverable6 joined
[04:22] *** bloatable6 joined
[05:18] *** squashable6 left
[05:21] *** squashable6 joined
[05:28] <Woodi> MasterDuke:but  why stat stuff is not just another module ? plain OO is not enough ? files are just another problem domain external to interpreter/compiler...

[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:37] *** sena_kun joined
[11:23] <lizmat> and yet another Rakudo Weekly hits the Net: https://rakudoweekly.blog/2023/08/21/2023-34-september-exercism/

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[13:50] *** [Coke] left
[13:51] *** [Coke] joined
[14:30] <ugexe> Woodi: because rakudo uses stat, and making those uses faster will make the "plain OO" file uses faster

[15:49] *** evalable6 left
[15:49] *** linkable6 left
[15:51] *** evalable6 joined
[15:51] *** linkable6 joined
[16:01] *** ab5tract joined
[17:00] *** harrow left
[17:02] *** harrow joined
[17:17] *** harrow left
[17:23] *** harrow joined
[17:50] <gfldex> Woodi: Rakudo really likes to stat. You can check how much with: strace -e trace=statx rakudo -e 'say „Hello, Woodi!“'

[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:08] <Geth> ¦ MoarVM/2023.080: 3031458a93 | (Justin DeVuyst)++ | 2 files

[18:08] <Geth> ¦ MoarVM/2023.080: Update changelog and version

[18:08] <Geth> ¦ MoarVM/2023.080: review: https://github.com/MoarVM/MoarVM/commit/3031458a93

[18:20] <Geth> ¦ MoarVM: jdv++ created pull request #1767: Update changelog and version

[18:20] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1767

[18:20] <Geth> ¦ MoarVM/main: 3031458a93 | (Justin DeVuyst)++ | 2 files

[18:20] <Geth> ¦ MoarVM/main: Update changelog and version

[18:20] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/3031458a93

[18:20] <Geth> ¦ MoarVM/main: a2da8e7b17 | (Justin DeVuyst)++ (committed using GitHub Web editor) | 2 files

[18:20] <Geth> ¦ MoarVM/main: Merge pull request #1767 from MoarVM/2023.080

[18:20] <Geth> ¦ MoarVM/main: 

[18:20] <Geth> ¦ MoarVM/main: Update changelog and version

[18:20] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/a2da8e7b17

[18:32] <jdv> this release done, back to the other...

[18:59] <Woodi> for sure I like fast :)  and MasterDuke++ actually doing stuff is excellent. also modularity in code is good. but something with reps looks off, to me. a) looks like src/6model/reprs is where datatypes of all kinds are defined

[19:06] <Woodi> eg. MVMString.h defines 5 possible representations of string :)  and that is classic representations usage. but eg. MVMThread have just one to my eye. and if it is only one then "representation" is just wrapper and possible slowdown

[19:09] <Woodi> back to stat - repr is to me "noun" and stat is more for do checking so more "verb". struct stat is noun but it is such small functionality so representation for this is strange

[19:11] <Woodi> MVMFile maybe ? then much more thing can be put there

[19:13] <Woodi> there already is MVMOSHandle but probably it is a file descriptor

[19:14] <Woodi> but P6String is just MVMString and nothing else so representation of representation...

[19:15] <Woodi> and threads, frames, references looks very internal, another subsystem ?

[19:16] <Woodi> maybe splitting hair but do not see that yet...

[19:18] <Woodi> b) looks like reprs are kind of internal modules ?

[19:20] <Woodi> btw. what if MVMFile or handle be a) file on disk  b) mmapped file  c) in-memory file ?  with c) temp files would be fast :)

[19:24] <Woodi> or maybe stat repr need to be thinked as stat via syscal and via uv ? so another kind of difference. anyway good to have native ops

[19:24] <Woodi> night :)

[22:46] *** sena_kun left
[23:21] *** ab5tract left
