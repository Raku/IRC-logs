[04:04] *** nebuchadnezzar left
[07:35] *** nebuchadnezzar joined
[08:46] *** vrurg left
[10:00] *** sena_kun joined
[14:02] <lizmat> I wonder, could there be a way to create a nqp::op that would return an int for the currently active thread ?

[14:16] *** vrurg joined
[15:08] <jnthn> $ raku -e 'use nqp; say nqp::threadid(nqp::currentthread())'

[15:08] <jnthn> 1

[15:09] <jnthn> $ raku -e 'use nqp; await start { say nqp::threadid(nqp::currentthread()) }'

[15:09] <jnthn> 4

[15:09] <jnthn> lizmat: Like ^^ ?

[15:19] <[Coke]> jnthn++ # Hi!

[15:47] <japhb> \o/ Worth(ington) waiting for

[15:53] <lizmat> jnthn: question: is that cheap or not?

[15:54] <lizmat> reason I'm asking is thinking how feasably it would be to make $/ an array under the hood, and use the threadid as an index into it

[15:54] <lizmat> probably a bad idea... but still  :-)

[15:54] <lizmat> alternately, being able to insert a "my $/" into a clone of a block at runtime

[16:34] *** [Coke] left
[17:58] *** Voldenet_ joined
[17:59] *** Voldenet left
[17:59] *** Voldenet_ is now known as Voldenet

[18:07] *** [Coke] joined
[18:12] *** Voldenet left
[18:12] *** Voldenet_ joined
[18:12] *** Voldenet_ is now known as Voldenet

[18:40] *** [Coke] left
[18:42] *** [Coke] joined
[19:23] <MasterDuke> those are pretty cheap. `my int $a; my int $i := 0; my int $s := nqp::time(); $a := nqp::threadid(nqp::currentthread()) while $i++ < 100_000_000; say(nqp::time() - $s); say($a)` is only about 3.5x longer than `my int $a; my int $i := 0; my int $s := nqp::time(); $a := $i while $i++ < 100_000_000; say(nqp::time() - $s); say($a)`

[20:06] <ugexe> is thread.id safe to reuse like that? i thought it had to be more like nqp::objectid($*THREAD)

[20:08] <ugexe> i don't remember why i think that though

[20:46] <vrurg> Best is $*STACK-ID. A thread may change, but that is guaranteed to be unique per call stack.

[20:50] <ugexe> i think the question is if $*THREAD.id can be relied on to always identify the same thread

[20:52] <vrurg> I don't think it makes sense to have $/ bound to a thread because then same callstack could end up using different $/ in the same frame.

[23:22] *** sena_kun left
[23:35] <lizmat> yeah, that's probably a bad idea

[23:36] <lizmat> now: inserting a 'my $/' into a cloned block at runtime

