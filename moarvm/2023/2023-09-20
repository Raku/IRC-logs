[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:01] *** CaCode left
[01:29] *** nine left
[01:30] *** nine joined
[02:43] *** squashable6 left
[02:46] *** squashable6 joined
[03:46] *** reportable6 left
[03:46] *** linkable6 left
[03:46] *** nativecallable6 left
[03:46] *** evalable6 left
[03:46] *** tellable6 left
[03:46] *** notable6 left
[03:46] *** releasable6 left
[03:46] *** committable6 left
[03:46] *** coverable6 left
[03:46] *** sourceable6 left
[03:46] *** greppable6 left
[03:46] *** shareable6 left
[03:46] *** squashable6 left
[03:46] *** bisectable6 left
[03:46] *** bloatable6 left
[03:46] *** quotable6 left
[03:46] *** benchable6 left
[03:46] *** statisfiable6 left
[03:46] *** unicodable6 left
[03:46] *** coverable6 joined
[03:47] *** releasable6 joined
[03:47] *** sourceable6 joined
[03:47] *** bisectable6 joined
[03:47] *** linkable6 joined
[03:48] *** reportable6 joined
[03:48] *** benchable6 joined
[03:48] *** bloatable6 joined
[03:48] *** notable6 joined
[03:48] *** nativecallable6 joined
[03:48] *** greppable6 joined
[03:48] *** tellable6 joined
[03:48] *** squashable6 joined
[03:48] *** unicodable6 joined
[03:48] *** quotable6 joined
[03:48] *** evalable6 joined
[03:49] *** shareable6 joined
[03:49] *** committable6 joined
[03:49] *** statisfiable6 joined
[04:21] *** sugarbeet left
[04:21] *** sugarbeet joined
[05:06] *** CaCode joined
[05:10] *** CaCode left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[09:20] *** timo left
[09:21] *** timo joined
[09:34] <lizmat> m: say (^Inf).hyper.grep(*.is-prime).skip(999998).head

[09:34] <camelia> rakudo-moar f1c6261c4: OUTPUT: «15485857␤»

[09:34] <lizmat> this pretty reliably segfaults for me on an M1 MacMini

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:54] <[Coke]> lizmat: need me to try something on the m2?

[12:54] <lizmat> say (^Inf).hyper.grep(*.is-prime).skip(999998).head    :-)

[12:55] <[Coke]> any particular version?

[12:55] *** jgaz left
[12:56] *** jgaz joined
[12:58] <lizmat> any recent version ?

[12:59] <lizmat> haven't been able to get this to fail on Intel hardware

[14:46] <[Coke]> wow, it's not failing but it's so much slower on the m2 than on my old mac mini

[14:46] <[Coke]> takes 17s on the m2

[14:47] <[Coke]> oh, the mini version I ran was from the SO article with the batch

[14:47] <[Coke]> with the batch it's just as fast.

[14:47] <[Coke]> no segfault though

[14:47] <[Coke]> v2023.06-241-gcb8d2a125.

[15:23] <lizmat> thanks!

[15:25] <lizmat> [Coke]: BTW, re Slang::Date: is there a reason why you didn't store an instantiated Date object as a WVal?

[15:29] <[Coke]> I basically stopped thinking about it when the test passed. :)

[15:31] <[Coke]> ah, I'm not doing the creation at compile time, just setting up a method call. Yah, in a loop that could matter.

[15:31] <[Coke]> I think I was just copying someone else's example, honestly

[15:31] <[Coke]> I'll open a bug.

[15:31] <lizmat> I was just wondering whether there was a reason for it...

[15:32] <lizmat> I'll make a PR

[15:33] <[Coke]> https://github.com/coke/raku-slang-date/issues/1

[15:33] <[Coke]> I don't even have to WRITE CODE!? awesome. :)

[15:46] <[Coke]> If you're writing the code, I'll cut a release within a day

[15:47] <[Coke]> ... error handling, maybe.

[15:47] <[Coke]> if it changes to a compile time error, that's fine, but we might need to change the test that checks for that.

[15:48] <lizmat> right

[15:48] <lizmat> if that's ok with you

[16:28] <lizmat> hmmm..  I think I found out why the Date object is not simply put into QAST

[16:28] <lizmat> missing serialization context

[16:29] <lizmat> we don't seem to have a simple way to put a HLL object into the current serialization context

[16:29] <lizmat> ?

[16:44] <lizmat> [Coke]: PR created

[16:58] <[Coke]> does the eval need the use statement?

[16:58] <[Coke]> (there's one at the top of the test file)

[16:59] <[Coke]> Amazing how much shorter your version is!

[17:00] <[Coke]> wonder if my use of nok there was a p5 holdover or something.

[17:01] <lizmat> yes, the use inside the eval is needed, since EVAL runs on the stock grammar (unless you tell it otherwise)

[17:46] <[Coke]> aha!

[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[22:08] *** unicodable6 left
[22:08] *** benchable6 left
[22:08] *** committable6 left
[22:08] *** bisectable6 left
[22:08] *** greppable6 left
[22:08] *** evalable6 left
[22:08] *** releasable6 left
[22:08] *** notable6 left
[22:08] *** quotable6 left
[22:08] *** nativecallable6 left
[22:08] *** tellable6 left
[22:08] *** sourceable6 left
[22:08] *** linkable6 left
[22:08] *** shareable6 left
[22:08] *** reportable6 left
[22:08] *** statisfiable6 left
[22:08] *** coverable6 left
[22:08] *** squashable6 left
[22:08] *** bloatable6 left
[22:09] *** greppable6 joined
[22:09] *** notable6 joined
[22:09] *** squashable6 joined
[22:09] *** tellable6 joined
[22:09] *** quotable6 joined
[22:09] *** bisectable6 joined
[22:09] *** nativecallable6 joined
[22:10] *** bloatable6 joined
[22:10] *** unicodable6 joined
[22:10] *** benchable6 joined
[22:10] *** committable6 joined
[22:10] *** shareable6 joined
[22:10] *** coverable6 joined
[22:10] *** linkable6 joined
[22:10] *** evalable6 joined
[22:11] *** sourceable6 joined
[22:11] *** releasable6 joined
[22:11] *** reportable6 joined
[22:11] *** statisfiable6 joined
[22:33] *** Util left
[22:35] *** Util joined
