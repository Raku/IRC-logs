[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:25] *** dogbert17 joined
[01:29] *** dogbert11 left
[03:26] *** notable6 left
[03:26] *** unicodable6 left
[03:26] *** coverable6 left
[03:26] *** statisfiable6 left
[03:26] *** greppable6 left
[03:26] *** benchable6 left
[03:26] *** sourceable6 left
[03:26] *** linkable6 left
[03:26] *** bloatable6 left
[03:26] *** evalable6 left
[03:26] *** committable6 left
[03:26] *** quotable6 left
[03:26] *** bisectable6 left
[03:26] *** tellable6 left
[03:26] *** releasable6 left
[03:26] *** nativecallable6 left
[03:26] *** squashable6 left
[03:26] *** shareable6 left
[03:26] *** reportable6 left
[03:27] *** evalable6 joined
[03:27] *** tellable6 joined
[03:27] *** quotable6 joined
[03:27] *** sourceable6 joined
[03:27] *** benchable6 joined
[03:27] *** coverable6 joined
[03:28] *** reportable6 joined
[03:28] *** committable6 joined
[03:28] *** linkable6 joined
[03:28] *** releasable6 joined
[03:28] *** statisfiable6 joined
[03:28] *** bloatable6 joined
[03:28] *** bisectable6 joined
[03:28] *** greppable6 joined
[03:28] *** nativecallable6 joined
[03:29] *** notable6 joined
[03:29] *** shareable6 joined
[03:29] *** squashable6 joined
[03:29] *** unicodable6 joined
[04:27] <Woodi> right, not everything is struct :)

[04:29] *** linkable6 left
[04:29] *** evalable6 left
[04:29] <Woodi> then memory areas for lexical scope would help to track usage. and when something is ascaping pack it into struct ? :)

[04:31] *** linkable6 joined
[04:32] *** evalable6 joined
[04:49] <Woodi> I think my problem with gc's is that looks that programs need to look for things that, somehow, are lost... then mark it and search in circles... my naive wishiness wants to have everything deterministic, black and white - used or not - from parse time...

[05:32] *** evalable6 left
[05:32] *** linkable6 left
[05:33] *** evalable6 joined
[05:34] *** linkable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:12] *** linkable6 left
[07:12] *** tellable6 left
[07:12] *** notable6 left
[07:12] *** nativecallable6 left
[07:12] *** releasable6 left
[07:14] *** linkable6 joined
[07:14] *** tellable6 joined
[07:14] *** notable6 joined
[07:15] *** nativecallable6 joined
[07:15] *** releasable6 joined
[09:36] *** mst left
[09:36] *** mst joined
[10:03] *** squashable6 left
[10:06] *** squashable6 joined
[11:37] *** gfldex left
[11:39] *** gfldex joined
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[13:12] *** dogbert11 joined
[13:15] *** dogbert17 left
[13:20] *** dogbert17 joined
[13:22] *** dogbert11 left
[14:05] *** MasterDuke joined
[14:08] <MasterDuke> timo: nice idea about doing a gc during blinking/saccades. not that applicable for most raku programs probably, but could help make using gc'ed languages more viable for user-interactive things

[14:09] <MasterDuke> and speaking of gc, there was some discussion at the RSC about making the unmanaged size of strings, arrays, etc pressure the nursery, like big integers do

[14:13] <MasterDuke> oh, also done when allocating buffers for io it looks like

[14:14] <MasterDuke> anybody have any thoughts about whether it should be done at all? and then if so, what heuristics to apply?

[14:14] <MasterDuke> oh, s/RSC/RCS/

[14:30] <lizmat> hehe  :-)

[16:12] *** linkable6 left
[16:12] *** evalable6 left
[16:15] *** evalable6 joined
[16:15] *** linkable6 joined
[16:31] *** dogbert17 left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:12] <MasterDuke> huh, https://github.com/MoarVM/MoarVM/commit/bb7e757265

[18:13] <lizmat> maybe timo remembers

[18:16] <MasterDuke> oh, this is almost exactly the same as something else that was discussed https://colabti.org/irclogger/irclogger_log/moarvm?date=2017-07-19#l347

[18:17] <MasterDuke> lots of heruistics to bikeshed in this area. multiple stands to reduce memory use? fewer strands to make iterating over a string faster?

[18:18] <lizmat> you mean https://irclogs.raku.org/moarvm/2017-07-19.html#22:40-0001 ?  :-)

[18:27] <MasterDuke> heh. different computers have different tabs already open...

[18:32] <ugexe> so i think we just need to have a https://github.com/openjdk/jdk/blob/b94b679e9a82ff2ee6daee9631ce707e9b9eaf6b/src/java.base/windows/native/libjava/canonicalize_md.c#L377-L397 in MoarVM and to use it on any file paths for windows users to fix long paths. all the other backends already just support them afaict

[18:37] <lizmat> would that imply that we could get rid of all the backslashy checks in Raku ?

[18:38] <lizmat> aka IO::Spec::Win32 ?

[19:35] *** linkable6 left
[19:35] *** evalable6 left
[19:35] *** linkable6 joined
[19:38] *** evalable6 joined
[20:07] *** vrurg left
[20:35] *** vrurg joined
[20:38] *** vrurg left
[20:40] *** vrurg joined
[20:54] *** brrt joined
[21:01] <ugexe> Unfortunately no. In fact we have to be extra sure we replace / with \. The reason \\?\ allows long paths on windows is because it bypasses the windows internal path normalization that uses MAX_PATH as one of its parameters. However, that normalization is what allows / in paths to work on typical windows paths. In other words: a \\?\ prefixed path won't work with / like it usually would

[22:01] <brrt> \o

[22:33] <brrt> link drop https://brrt-to-the-future.blogspot.com/2023/06/retrospective-of-moarvm-jit.html

[23:03] *** brrt left
[23:05] <timo> brrt++

