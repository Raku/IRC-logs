[00:00] *** rypervenche left
[00:00] *** jgaz left
[00:00] *** reportable6 left
[00:00] *** jgaz joined
[00:00] *** rypervenche joined
[00:00] *** rypervenche left
[00:00] *** rypervenche joined
[00:03] *** reportable6 joined
[00:24] *** jgaz left
[00:24] *** jgaz joined
[01:35] <MasterDuke> brrt++

[01:50] *** MasterDuke left
[02:55] *** camelia left
[02:59] *** camelia joined
[04:46] *** unicodable6 left
[04:46] *** sourceable6 left
[04:46] *** greppable6 left
[04:46] *** committable6 left
[04:46] *** notable6 left
[04:46] *** squashable6 left
[04:46] *** notable6 joined
[04:47] *** committable6 joined
[04:48] *** unicodable6 joined
[04:48] *** greppable6 joined
[04:48] *** sourceable6 joined
[04:48] *** squashable6 joined
[05:48] *** quotable6 left
[05:48] *** benchable6 left
[05:48] *** linkable6 left
[05:48] *** tellable6 left
[05:48] *** bisectable6 left
[05:48] *** releasable6 left
[05:48] *** evalable6 left
[05:48] *** greppable6 left
[05:48] *** statisfiable6 left
[05:48] *** shareable6 left
[05:48] *** bloatable6 left
[05:48] *** unicodable6 left
[05:48] *** coverable6 left
[05:48] *** committable6 left
[05:48] *** squashable6 left
[05:48] *** reportable6 left
[05:48] *** nativecallable6 left
[05:48] *** notable6 left
[05:49] *** shareable6 joined
[05:49] *** notable6 joined
[05:49] *** bloatable6 joined
[05:49] *** releasable6 joined
[05:49] *** unicodable6 joined
[05:49] *** evalable6 joined
[05:49] *** greppable6 joined
[05:50] *** benchable6 joined
[05:50] *** squashable6 joined
[05:50] *** coverable6 joined
[05:50] *** quotable6 joined
[05:51] *** tellable6 joined
[05:51] *** linkable6 joined
[05:51] *** reportable6 joined
[05:51] *** nativecallable6 joined
[05:51] *** bisectable6 joined
[05:51] *** statisfiable6 joined
[05:51] *** committable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:01] *** coverable6 left
[07:01] *** reportable6 left
[07:01] *** linkable6 left
[07:01] *** nativecallable6 left
[07:01] *** bloatable6 left
[07:01] *** tellable6 left
[07:01] *** releasable6 left
[07:01] *** committable6 left
[07:01] *** bisectable6 left
[07:01] *** unicodable6 left
[07:01] *** tellable6 joined
[07:02] *** unicodable6 joined
[07:02] *** committable6 joined
[07:02] *** bloatable6 joined
[07:03] *** releasable6 joined
[07:03] *** nativecallable6 joined
[07:04] *** reportable6 joined
[07:04] *** coverable6 joined
[07:04] *** bisectable6 joined
[07:04] *** linkable6 joined
[08:10] *** sena_kun left
[09:52] *** linkable6 left
[09:52] *** evalable6 left
[09:53] *** linkable6 joined
[09:54] *** evalable6 joined
[11:40] *** sena_kun joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:28] *** squashable6 left
[12:29] *** squashable6 joined
[12:30] <lizmat> sometimes I wonder if it would make sense to have a type of strand that would consist of elements with a join character

[12:30] <lizmat> Masterduke: or do we have something like that already?

[12:30] <tellable6> lizmat, I'll pass your message to MasterDuke

[13:45] *** jgaz left
[13:47] *** jgaz joined
[15:45] *** evalable6 left
[15:45] *** linkable6 left
[15:47] *** gfldex left
[15:47] *** evalable6 joined
[15:48] *** linkable6 joined
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:18] *** gfldex joined
[19:16] *** MasterDuke joined
[19:16] <MasterDuke> .

[19:16] <tellable6> 2023-06-11T12:30:45Z #moarvm <lizmat> Masterduke: or do we have something like that already?

[19:20] <MasterDuke> we have a bunch of heuristics in MVM_string_join about whether to create a new string of strands or a new flat string

[19:23] <MasterDuke> but we don't have a different string/strand type that's multiple elements and a single separator (unless there are just two parts to join of course)

[19:38] <MasterDuke> completely random question. some of our ops have concreteness checks in interp.c, some have them in the implementing function, and some have them duplicated. is any one of those universally better than the others?

[19:39] <MasterDuke> istr that putting them in the implementing function was a bit redundant when the op got jitted, since the jit would do it also

[19:40] <MasterDuke> if that's correct, then moving them out of the implementing function and into interp.c would make sense. but i'm not at all confident about that actually being the case, and even if it is, how to know if/when that's true

[20:23] <nine> That's definitely true. Even better is that with syscalls the dispatcher and spesh can remove redundant checks as well

[20:26] *** linkable6 left
[20:26] *** evalable6 left
[20:27] *** evalable6 joined
[20:29] *** linkable6 joined
[20:30] *** sena_kun left
[21:07] *** japhb left
[21:08] *** japhb joined
[21:13] *** japhb left
[21:14] *** japhb joined
[21:48] *** harrow left
[22:03] *** harrow joined
[22:33] <jnthn> What nine++ said, the right direction is most ops moving towards being syscalls

[22:34] <jnthn> Since those have a very generalized framework for eliminating the repr/type checks

[22:41] <MasterDuke> hm. any suggestion as to which should be converted first?

[23:14] <jnthn> Anything I/O related fits

