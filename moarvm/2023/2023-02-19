[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:42] *** Geth left
[00:42] *** Geth joined
[02:06] *** linkable6 left
[02:06] *** evalable6 left
[02:06] *** linkable6 joined
[02:07] *** evalable6 joined
[04:04] *** kjp left
[04:07] *** kjp joined
[05:50] *** shareable6 left
[05:50] *** bisectable6 left
[05:50] *** bloatable6 left
[05:50] *** reportable6 left
[05:50] *** committable6 left
[05:50] *** notable6 left
[05:50] *** unicodable6 left
[05:50] *** releasable6 left
[05:50] *** coverable6 left
[05:50] *** statisfiable6 left
[05:50] *** squashable6 left
[05:50] *** tellable6 left
[05:50] *** nativecallable6 left
[05:50] *** sourceable6 left
[05:50] *** greppable6 left
[05:50] *** evalable6 left
[05:50] *** linkable6 left
[05:50] *** quotable6 left
[05:50] *** benchable6 left
[05:51] *** statisfiable6 joined
[05:51] *** reportable6 joined
[05:51] *** linkable6 joined
[05:51] *** shareable6 joined
[05:51] *** evalable6 joined
[05:52] *** tellable6 joined
[05:52] *** bisectable6 joined
[05:52] *** sourceable6 joined
[05:52] *** coverable6 joined
[05:52] *** committable6 joined
[05:52] *** greppable6 joined
[05:53] *** releasable6 joined
[05:53] *** bloatable6 joined
[05:53] *** quotable6 joined
[05:53] *** nativecallable6 joined
[05:53] *** squashable6 joined
[05:53] *** notable6 joined
[05:53] *** unicodable6 joined
[05:53] *** benchable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:00] *** samcv left
[08:05] *** tellable6 left
[08:05] *** evalable6 left
[08:05] *** unicodable6 left
[08:05] *** sourceable6 left
[08:05] *** coverable6 left
[08:05] *** committable6 left
[08:05] *** releasable6 left
[08:05] *** notable6 left
[08:05] *** squashable6 left
[08:05] *** benchable6 left
[08:05] *** shareable6 left
[08:05] *** nativecallable6 left
[08:05] *** statisfiable6 left
[08:05] *** bloatable6 left
[08:05] *** reportable6 left
[08:05] *** quotable6 left
[08:05] *** bisectable6 left
[08:05] *** linkable6 left
[08:05] *** greppable6 left
[08:06] *** quotable6 joined
[08:06] *** statisfiable6 joined
[08:06] *** committable6 joined
[08:06] *** releasable6 joined
[08:06] *** coverable6 joined
[08:06] *** evalable6 joined
[08:06] *** benchable6 joined
[08:06] *** squashable6 joined
[08:06] *** unicodable6 joined
[08:07] *** notable6 joined
[08:07] *** tellable6 joined
[08:07] *** greppable6 joined
[08:08] *** bisectable6 joined
[08:08] *** bloatable6 joined
[08:08] *** shareable6 joined
[08:08] *** sourceable6 joined
[08:08] *** nativecallable6 joined
[08:08] *** linkable6 joined
[08:08] *** reportable6 joined
[09:07] <Woodi> hi

[09:10] <Woodi> few months before Python3.11 got big speedup and from https://youtu.be/TLhRuZ9cJWc?t=1030  looks they un-generalized operations. but looks to me Perl6/Raku have such things and many more for years...

[09:12] <Woodi> so: I have some dizzines about our lovely language ? is it already fast ? or why other languages get credit for things that looks done here years earlier ?

[09:14] <Woodi> also if Python made some optimizations it screems: why you do not put that ints into array of ints and then sum them ?? but probably it's not fair becouse they worked on whole language :) 

[09:17] <Woodi> also: _find_lexical_by_name seems at oposite site of performance :)  it is hash lookup ? I belive that for searching in up to 10 element array is always faster to do via linear search, so can names be pre-partitioned somehow ?

[09:24] <Woodi> I was looking at deserialization code and it is realy complicated, eg. switch'es in loops. was looking on array deserialization - maybe function deserialize_many of same type can be used ?

[10:01] *** sena_kun joined
[11:14] *** frost joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:32] *** samcv joined
[13:41] <jnthn> Woodi: The vast majority of lexical lookups are resolved to array indexing during bytecode assembly, and thus aren't done by name.

[13:59] *** evalable6 left
[13:59] *** linkable6 left
[14:00] *** linkable6 joined
[14:01] *** evalable6 joined
[15:20] *** frost left
[17:25] <lizmat> jnthn: so why does "warn" throw an exception?   So that it can be caught by a CONTROL block and quieted ?  is that the only reason ?

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[19:39] <gfldex> lizmat: CX::Warn can also be redirected. For logging and such. 

[20:43] *** linkable6 left
[20:44] *** evalable6 left
[20:45] *** evalable6 joined
[20:46] *** linkable6 joined
[22:36] <lizmat> gfldex: explain ?

[22:39] <gfldex> You can redirect output from &warn by setting your own CONTROL block. However, that doesn't work with threading. So there is good reason to think about &warn and &note.

[22:39] <lizmat> yes, that's why I mentioned the CONTROL block

[22:40] <lizmat> but I feel that I'm missing something essential about why warn needs to throw an exception

[22:41] <lizmat> I'm starting to feel it is something that predated dynamic variables

[22:42] <lizmat> and as such a different solution to the problem of wanting to catch warnings

[22:42] <gfldex> My guess is they exist to show off with resumeable exceptions. :->

[22:43] <lizmat> heh... well, I guess.  but exceptions are still relatively expensive

[23:05] *** sena_kun left
[23:41] <jnthn> I'm not sure warnings are a thing that needs to be especially cheap anyway. But one could ask why next/redo/last/return are control exceptions, and the answer is that it provides a standard mechanism for library writers to intercept and handle them.

[23:42] <jnthn> Imagine that Perl 6 was released before reactive programming became a thing, and the stuff we have as supplies was done in a library. Being able to handle next/redo/last naturally in Supply.map would be a good thing.

[23:44] <jnthn> Sure one could do warnings differntly, but why a discontinuity from errors and other control flow?

