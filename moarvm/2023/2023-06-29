[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:14] *** MasterDuke joined
[01:14] *** linkable6 left
[01:14] *** evalable6 left
[01:15] *** linkable6 joined
[01:16] *** evalable6 joined
[02:11] <MasterDuke> timo: you're sometimes up late, around?

[02:12] <timo> oh no what have i done :)

[02:14] <MasterDuke> nothing...yet

[02:16] <MasterDuke> i'm playing around with nine's suggestion to implement a `stat` syscall

[02:17] <MasterDuke> and return the result in a new repr

[02:18] <MasterDuke> i've realized i've never created a syscall before, or a repr

[02:18] <timo> i wonder if it would be fine if it would just re-use a repr like maybe vmarray

[02:19] <timo> i guess that's equivalent to the thing nine said would be The Worst

[02:20] <MasterDuke> heh. i think the worst was a hash...

[02:20] <timo> the array is worse since the keys are now all just integers with no inherent meaning

[02:20] <timo> and something something versioning

[02:21] <MasterDuke> well, they would(could?) have meaning up in rakudo, right?

[02:21] <timo> how exactly are we expecting to get the individual bits out of the stat repr, do we make like accessor functions

[02:22] <MasterDuke> that's one thing i wasn't sure about. the relationship between the moarvm struct (or array i guess) and the hll object

[02:23] <timo> right, until now any "special" repr that wasn't sufficiently like another would get "its own" ops to work with them

[02:23] <timo> in newer moarvm we'd be making syscalls for that which are less work to make new ones of

[02:23] <MasterDuke> i was imagining what the raku would look like, e.g., `my Stat $f-s = "foo".IO.stat; say $f-s.is-empty; say $f-s.is-directory;`

[02:24] <timo> right, and Stat is repr("MVMStat") or whatever

[02:24] <timo> then the methods could be like is-empty() { nqp::syscall("stat-is-empty", self) }

[02:25] <MasterDuke> right and right

[02:25] <timo> and the stat-is-empty syscall would grab its argument and cast it to MVMStat and it'd have a .body.uv_stat_struct or whatever

[02:25] <MasterDuke> yep

[02:27] <timo> i wonder if we can save any amount of allocations in practice if we allow an existing MVMStat object to be passed for storing the info

[02:27] <MasterDuke> (sort of off topic, but would it make sense to have an nqp::syscall that's just shorthand for nqp::dispatch('boot-syscall')?)

[02:27] <timo> dunno, it would be easy to make at least

[02:29] <MasterDuke> of the ~817 nqp::dispatch calls in rakudo, only ~27 of them don't have a 'boot-syscall' somewhere in the line

[02:33] <timo> not sure what exactly we'll save from that, i guess we don't have to parse the string literal for boot-syscall if we "hide" it in the code-gen for a hypothetical nqp::syscall

[02:34] <MasterDuke> i would be fine if it was just simply a core developer convenience thing

[02:34] <timo> maybe we'll want to actually think about making a nqp::sc-* for a few very common syscalls as well

[02:35] <MasterDuke> btw, hope your cat is better, it was too bad you couldn't make the summit

[02:36] <timo> unfortunately there was no getting better

[02:36] <MasterDuke> that sucks

[02:36] <timo> i agree. fuck cancer

[02:39] *** Techcable left
[02:40] *** patrickb left
[02:46] *** Techcable joined
[02:46] *** patrickb joined
[02:46] *** Techcable_ joined
[02:46] *** Techcable left
[02:47] <MasterDuke> well, i got nqp to segfault, maybe that's one step further than complaining it doesn't know what i'm calling?

[02:48] *** Techcable_ is now known as Techcable

[02:49] <MasterDuke> i just ran `nqp-m -e 'my $a := nqp::dispatch("boot-syscall", "file-stat", "VERSION", 0); say(nqp::dispatch("boot-syscall", "stat-is-reg", $a))'`

[02:50] <timo> i'd have to see the diff and backtrace probably to know what's up

[02:50] <timo> you can try nqp::dispatch("boot-syscall", "MisterMcDoesntExist")

[02:50] <timo> it should give an actual proper error message rather than a segfault

[02:51] <MasterDuke> `No MoarVM syscall with name 'foo'`

[02:51] <MasterDuke> https://gist.github.com/MasterDuke17/1122bd705d14232cf9ec14084f14d361

[02:52] <MasterDuke> added a backtrace

[02:54] <MasterDuke> oh, it doesn't have my new repr files

[02:54] <timo> oh, you can't create an MVMObject with mvm_malloc

[02:54] <timo> that needs to go through gc_allocate and such

[02:55] <MasterDuke> gist updated

[02:57] <timo> with mvm_malloc, the object header will not be set up properly, including the REPR pointer that it's trying to look at where the crash happens

[02:57] <MasterDuke> ah

[03:01] <MasterDuke> [dan@alexandria nqp]$ ./nqp-m -e 'my $a := nqp::dispatch("boot-syscall", "file-stat", "/home/dan/p6/nqp/VERSION", 0); say(nqp::dispatch("boot-syscall", "stat-is-reg", $a))'

[03:01] <MasterDuke> 1

[03:02] <timo> neat

[03:02] <MasterDuke> turns out MMVM_repr_alloc_init was *almost* the right function to use

[03:04] <MasterDuke> that wasn't terrible

[03:18] <MasterDuke> well, i'm off to sleep, but thanks for the help. i'll finish up the rest later and PR it

[03:26] <timo> you're welcome, thanks for your work :)

[04:03] <Woodi> "representation Stats" seems strange... reprs by idea are almoust lowest level but structured thing, container that have some shape but can be visible as something else... eg. objects represented as arrays or objects represented as hash or image, whatever is handy in context... 

[04:03] <Woodi> and stat returns just struct

[04:46] *** linkable6 left
[04:46] *** evalable6 left
[04:47] *** evalable6 joined
[04:48] *** linkable6 joined
[05:10] *** MasterDuke left
[05:53] <nine> Same as MVMOSHandle for file handles. I think it's better to think of reprs as "something where the VM knows how it's represented in memory"

[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:46] *** sena_kun joined
[08:26] *** sena_kun left
[08:53] *** notable6 left
[08:53] *** statisfiable6 left
[08:53] *** bisectable6 left
[08:54] *** rypervenche left
[08:57] *** rypervenche joined
[09:47] *** notable6 joined
[09:49] *** statisfiable6 joined
[09:49] *** bisectable6 joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:27] *** jgaz left
[12:32] *** jgaz joined
[12:38] *** jgaz left
[12:38] *** jgaz joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:26] *** sena_kun joined
[22:08] *** sena_kun left
