[13:27] *** Geth joined
[13:29] *** Altai-man joined
[13:29] *** sena_kun left
[13:32] *** frost left
[13:35] *** frost joined
[14:03] <MasterDuke> nine: unrelated question, is is possible to create a raku hash in c code and return it via nativecall?

[14:09] <nine> MasterDuke: you mean from some user library? No, dabbling in internals like that is explicitly unwanted.

[14:10] <MasterDuke> yeah. rf over in #raku was asking recently because they were creating a module binding to simdjson and wanted to return a hash

[14:12] <jnthn> One would return, say, an array of values and build the hash back in Raku space.

[14:13] <jnthn> That way would work on other backends too.

[14:16] <MasterDuke> thanks, i'll pass the suggestion along

[14:20] <jnthn> Although it seems the API of simdjson is more iterator based, so it may make more sense to consume that directly in Raku (that is, iterate to produce the hash)

[14:42] <MasterDuke> arg, something seems borked with my rr

[14:43] <nine> Loaded the zen workaround?

[14:46] <MasterDuke> yep. at first it wouldn't run because of a libcapnproto mismatch, so i tried rebuilding it

[14:46] <MasterDuke> that failed at first because of complaints about flexible array members not at the end of structs

[14:47] <MasterDuke> so i applied a patch from a recent commit to their git repo

[14:47] <MasterDuke> now it builds and installs again, but my replays just all end in syscall_traced()

[14:50] <MasterDuke> maybe i'll just try building the latest from their git repo, the last 5.6.0 release was sometime last year

[14:50] *** Altai-man left
[15:02] <MasterDuke> hm, might be related to using the `--chaos` flag...

[15:27] <[Coke]> heh.

[15:27] <[Coke]> "why is there so much chaos!?" "oh."

[16:07] *** frost left
[17:37] *** MasterDuke left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:38] *** sena_kun joined
[18:50] *** MasterDuke joined
[18:51] <MasterDuke> huh. rr built from git, no `--chaos`, but the replay still doesn't work right

[18:52] <MasterDuke> well, it repros easily enough, hopefully one of you with a working rr can catch it

[19:48] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1740 seems to be in a somewhat decent state. the only problem now that i think is unique to/cause by the PR is the windows fails

[19:49] <MasterDuke> but it happens when building rakudo, not moarvm or nqp, and only on the new windows server 2022 images

[19:51] <MasterDuke> Stage start      :   0.000

[19:51] <MasterDuke> NMAKE : fatal error U1077: 'C:\Strawberry\perl\bin\perl.exe' : return code '0xff'

[19:51] <MasterDuke> Stop.

[19:51] <MasterDuke> Command failed (status 512): nmake

[19:51] <MasterDuke>  at D:/a/1/rakudo/3rdparty/nqp-configure/lib/NQP/Config.pm line 34.

[19:51] <MasterDuke>     NQP::Config::__ANON__("Command failed (status 512): nmake\x{a}") called at D:/a/1/rakudo/3rdparty/nqp-configure/lib/NQP/Config.pm line 1502

[19:51] <MasterDuke>     NQP::Config::system_or_die("nmake") called at Configure.pl line 124

[19:52] <MasterDuke> some random googling suggests maybe "Microsoft Visual Studio is not correctly installed, or that the paths to it are set incorrectly"

[19:52] <MasterDuke> but then i don't understand how moarvm and nqp built

[20:28] <[Coke]> MasterDuke: does it work OK on windows 10, but not 2022?

[22:57] *** sena_kun left
