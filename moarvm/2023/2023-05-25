[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[04:03] *** unicodable6 left
[04:03] *** squashable6 left
[04:03] *** linkable6 left
[04:03] *** shareable6 left
[04:03] *** releasable6 left
[04:03] *** bloatable6 left
[04:03] *** evalable6 left
[04:03] *** tellable6 left
[04:03] *** quotable6 left
[04:03] *** statisfiable6 left
[04:03] *** benchable6 left
[04:03] *** nativecallable6 left
[04:03] *** coverable6 left
[04:03] *** committable6 left
[04:03] *** reportable6 left
[04:03] *** greppable6 left
[04:03] *** bisectable6 left
[04:03] *** notable6 left
[04:03] *** sourceable6 left
[04:04] *** benchable6 joined
[04:04] *** tellable6 joined
[04:04] *** linkable6 joined
[04:04] *** greppable6 joined
[04:04] *** squashable6 joined
[04:04] *** unicodable6 joined
[04:05] *** evalable6 joined
[04:05] *** reportable6 joined
[04:05] *** releasable6 joined
[04:05] *** bloatable6 joined
[04:05] *** notable6 joined
[04:05] *** coverable6 joined
[04:06] *** sourceable6 joined
[04:06] *** quotable6 joined
[04:06] *** statisfiable6 joined
[04:06] *** committable6 joined
[04:06] *** bisectable6 joined
[04:06] *** shareable6 joined
[04:06] *** nativecallable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:04] *** squashable6 left
[07:05] *** squashable6 joined
[08:52] <timo> somehow, when parsing the core setting, a tremendous amount of the string "prefix" and the string "infix" are created as new MVMStrings with not-strand-storage, i.e. they are not just substr'd out of something else, or taken from a hash key or something like that

[08:59] *** sena_kun joined
[09:01] <lizmat> string literals ?

[09:05] <timo> it could theoretically be the nqp::lc in EXPR

[09:21] <timo> string literals should always come out of the comp unit's string heap

[09:21] <lizmat> TIL  :-)

[09:24] <timo> ok so we definitely do create a bunch of strings because we nqp::lc the $KEY that comes into EXPR

[09:25] <timo> question is, does it matter

[09:26] <timo> there is an "unless $KEY { return 0 }" and later we have $KEY // "infix" which seems redundant

[09:27] <timo> but why are the keys that come in always uppercase, and why don't we switch so we use upper case keys in EXPR itself so when we nqp::uc the strings that come in to make them always fit we just get the same string back usually since uc on an already-uppercase string re-uses the incoming string

[09:27] <timo> oh, ah, we do use $key as a key into $/'s hashn

[09:30] <timo> we also create a lot of int from Int, and very few num from Num

[09:30] <timo> (this is all just looking at core.c setting compilation fwiw)

[09:33] *** linkable6 left
[09:33] *** linkable6 joined
[09:33] <timo> add_numeric_constant does that part

[09:33] <timo> from World.nqp

[09:34] <lizmat> well, that's going to go the way of the dodo

[09:35] <timo> because of rakuast i assume

[09:37] <lizmat> yes

[09:39] <timo> .o( i think stagestats should output the number of gc runs at the end haha )

[09:45] <timo> 1865 gcs run (but i did not count minor vs major) with my little patch to eliminate lc calls, and 1869 without my patch

[09:46] <timo> so ... drop in the bucket territory here

[09:49] <lizmat> still, each GC run less is like .05 second wallclock less ?

[09:50] <lizmat> *and* less memory usage total, I'd say, so easier to build on memory challenged hardware ?

[09:50] <lizmat> I mean, if there's no downsides

[09:50] <lizmat> or is this a patch in World.nqp ?

[09:53] <timo> https://gist.github.com/timo/42ebfc80ed9052dd7e62f7b4584a86c2 only a very small change in World

[09:54] <timo> the more important change is in Actions

[09:55] <timo> not sure if the "else" branch ever encounters something that is not Num

[09:56] <timo> maybe an if or ??!! cascade is faster than a hash here

[10:04] <lizmat> timo: I think you're focusing on the past here

[10:04] <lizmat> I couldn't find anything like that in the RakuAST code, so I guess it has been fixed in another way

[10:06] <Voldenet> it's not the past if rakuast is only experimental

[10:06] <lizmat> rakuast will not be experimental in 6.e

[10:07] <lizmat> it's only marked as experimental because it may still change in API

[10:07] <lizmat> this is different from experimental :pack and friends

[10:08] <Voldenet> I see, it's only tagged as experimental so people don't use it, but it's stable

[10:08] <lizmat> it's stable enough to make 64% of test files pass completely

[10:08] <timo> does rakuast have a new EXPR?

[10:09] <lizmat> ah, yes it does

[10:09] <lizmat> in src/Raku/Actions, line 836

[10:12] <lizmat> I was only looking in src/Raku/ast   :-(

[10:12] <timo> hehe.

[10:15] <timo> without my patch it's 1858 minor, 11 major collections, with it it's 1857 and 11, so it could very well be it was just noise when i thought i made it noticeably better :D

[10:16] <timo> 1856/11 this time, maybe it gets better every time i run it

[10:17] <timo> yeah but i just found some random tree to bark up for no good reason

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[15:50] *** greppable6 left
[15:50] *** quotable6 left
[15:50] *** benchable6 left
[15:50] *** reportable6 left
[15:50] *** committable6 left
[15:50] *** squashable6 left
[15:50] *** shareable6 left
[15:50] *** bisectable6 left
[15:50] *** bloatable6 left
[15:50] *** nativecallable6 left
[15:50] *** linkable6 left
[15:50] *** sourceable6 left
[15:50] *** evalable6 left
[15:50] *** releasable6 left
[15:50] *** tellable6 left
[15:50] *** notable6 left
[15:50] *** unicodable6 left
[15:50] *** statisfiable6 left
[15:50] *** coverable6 left
[15:50] *** linkable6 joined
[15:50] *** tellable6 joined
[15:51] *** nativecallable6 joined
[15:51] *** squashable6 joined
[15:51] *** releasable6 joined
[15:51] *** statisfiable6 joined
[15:51] *** sourceable6 joined
[15:51] *** committable6 joined
[15:51] *** benchable6 joined
[15:52] *** bloatable6 joined
[15:52] *** quotable6 joined
[15:52] *** coverable6 joined
[15:52] *** evalable6 joined
[15:53] *** greppable6 joined
[15:53] *** bisectable6 joined
[15:53] *** reportable6 joined
[15:53] *** unicodable6 joined
[15:53] *** notable6 joined
[15:53] *** shareable6 joined
[16:53] *** linkable6 left
[16:53] *** evalable6 left
[16:56] *** evalable6 joined
[16:56] *** linkable6 joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:46] *** squashable6 left
[18:47] *** squashable6 joined
[21:02] *** sena_kun left
[21:29] *** coleman_ joined
[21:37] *** sugarbeet left
[21:37] *** coleman left
[21:37] *** coleman_ is now known as coleman

[22:04] *** sugarbeet joined
[23:11] *** linkable6 left
[23:11] *** evalable6 left
[23:12] *** evalable6 joined
[23:12] *** linkable6 joined
