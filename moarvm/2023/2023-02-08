[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[01:13] *** japhb left
[01:21] <MasterDuke> ooh, i think i have a relatively simple change that speeds up startup/deserialization. not by a whole lot of wallclock, but instructions reported by callgrind for `raku -e ''` do go down: as is, with MVM_SPESH_BLOCKING=1, and with MVM_SPESH_DISABLE=1

[01:26] <MasterDuke> we deserialize almost 90k VMArrays. in it's deserialize(), we loop over the number of elems, and switch based on the array type what we read. but the array type doesn't change per element, so it's a bit of code duplication, but just moving/copying the loop inside each case makes a difference

[01:31] <MasterDuke> with MVM_SPESH_DISABLE=1 we go from ~626k to ~623k instructions and with MVM_SPESH_BLOCKING=1 from ~1.135b to ~1.132b instructions

[01:34] *** japhb joined
[02:17] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1738: Speedup VMArray's deserialize()...

[02:17] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1738

[03:48] <Voldenet> nine: and high level code will require some additional allocations which will increase startup time, it's a good tradeoff though

[03:59] <Voldenet> MasterDuke: I've read some blogpost about rust doing 2x more instructions than C code in the same time and vtune revealed that cpu itself was able to optimize it very well, keep that in mind

[04:29] *** linkable6 left
[04:29] *** evalable6 left
[04:30] *** evalable6 joined
[04:31] *** linkable6 joined
[04:40] <Woodi> "everything is a first class object" - do that means that it need to be created via mop or can be just loaded or allocated in ready shape from C ? what exactly are unavoidable costs ? becouse years flys...

[04:42] <Woodi> also got thinking: benchmarks show nqp and rakudo is more costly - so maybe there things need to be optimized ? like in startup path using only primitive types like native arrays instead of hashes, uint64_ counters instead of packed numbers, etc ?

[04:44] <Woodi> and removing things that keep allocating and deallocating on startup...

[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[07:03] *** bloatable6 left
[07:03] *** notable6 left
[07:03] *** sourceable6 left
[07:03] *** greppable6 left
[07:03] *** committable6 left
[07:03] *** benchable6 left
[07:03] *** bisectable6 left
[07:03] *** shareable6 left
[07:03] *** unicodable6 left
[07:03] *** squashable6 left
[07:03] *** quotable6 left
[07:03] *** coverable6 left
[07:03] *** reportable6 left
[07:03] *** releasable6 left
[07:03] *** nativecallable6 left
[07:03] *** statisfiable6 left
[07:03] *** evalable6 left
[07:03] *** tellable6 left
[07:03] *** linkable6 left
[07:03] *** coverable6 joined
[07:03] *** evalable6 joined
[07:03] *** sourceable6 joined
[07:04] *** statisfiable6 joined
[07:04] *** releasable6 joined
[07:04] *** reportable6 joined
[07:04] *** tellable6 joined
[07:04] *** notable6 joined
[07:04] *** bisectable6 joined
[07:04] *** nativecallable6 joined
[07:04] *** committable6 joined
[07:04] *** linkable6 joined
[07:04] *** benchable6 joined
[07:05] *** greppable6 joined
[07:05] *** shareable6 joined
[07:05] *** unicodable6 joined
[07:05] *** quotable6 joined
[07:06] *** bloatable6 joined
[07:06] *** squashable6 joined
[07:38] *** sena_kun joined
[08:12] <timo1> the majority of our classes get their layout, i.e. fields and attributes and such, deserialized cheaply, not created with MOP calls during startup

[08:13] <timo1> i don't know what you mean by packed numbers

[08:17] <nine> probably boxed numbers

[08:17] <timo1> ah

[08:25] *** harrow left
[08:52] *** harrow joined
[10:30] *** sena_kun left
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[14:37] *** epony left
[14:44] *** epony joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:36] *** sena_kun joined
[20:17] *** bisectable6 left
[20:17] *** bloatable6 left
[20:17] *** notable6 left
[20:17] *** nativecallable6 left
[20:17] *** committable6 left
[20:17] *** statisfiable6 left
[20:17] *** tellable6 left
[20:17] *** sourceable6 left
[20:17] *** shareable6 left
[20:17] *** unicodable6 left
[20:17] *** releasable6 left
[20:17] *** benchable6 left
[20:17] *** greppable6 left
[20:17] *** reportable6 left
[20:17] *** evalable6 left
[20:17] *** squashable6 left
[20:17] *** coverable6 left
[20:17] *** linkable6 left
[20:18] *** squashable6 joined
[20:18] *** sourceable6 joined
[20:18] *** greppable6 joined
[20:18] *** reportable6 joined
[20:18] *** bisectable6 joined
[20:18] *** evalable6 joined
[20:18] *** releasable6 joined
[20:18] *** bloatable6 joined
[20:19] *** benchable6 joined
[20:19] *** unicodable6 joined
[20:19] *** coverable6 joined
[20:19] *** notable6 joined
[20:19] *** shareable6 joined
[20:19] *** linkable6 joined
[20:19] *** tellable6 joined
[20:19] *** committable6 joined
[20:20] *** nativecallable6 joined
[20:20] *** statisfiable6 joined
[22:09] *** sena_kun left
