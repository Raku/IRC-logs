[00:24] <ugexe> im gonna try and install a new build of windows 11 arm and see if that somehow fixes it. luckily VMWare fusion now has a single click thing to download and install windows 11 arm

[02:31] <ugexe> hmm i wonder if i had installed stuff on the x86 toolchain even though it was windows arm

[02:33] <ugexe> i know im using the arm toolchain this time and i cant even install 2023.04 due to libatomicops not supporting this architecture  (which lends itself to the theory i was using x86 toolchain before)

[02:37] <ugexe> it does look like there might be some changes to upstream libatomicop related to windows specific arm stuff

[02:50] *** discord-raku-bot left
[02:50] *** discord-raku-bot joined
[02:56] <ugexe> if i just switch to using upstream v7.8.0 (since merging into the MoarVM/atomic_ops has a bunch of conflicts) it at least compiles further

[02:57] <ugexe> but now dyncall is failing presumably because it think im on x86. which i think might be because strawberry perl is x86 only still (and we get the architecture from perl for some build things)

[03:11] <ugexe> hmm, it looks like the latest version of dyncall has additional arm64 options as well

[03:12] <ugexe> it looks like it might be worth looking at updating both dyncall and libatomic_ops

[03:49] <MasterDuke> i don't think libatomic_ops is actually required if you have a new enough compiler? wasn't it made part of the c11 spec?

[03:50] <MasterDuke> right. what if you pass the `--c11-atomics` option to Configure.pl?

[04:01] <MasterDuke> we're using dyncall v1.1, looks like v1.4 is the newest

[04:11] <ugexe> i was just looking at the c11 atomics actually

[04:11] <ugexe> but it seems like build/Makefile.in still includes the paths to libatomicops

[04:12] <MasterDuke> huh. if you remove them?

[04:15] <ugexe> https://pastebin.com/raw/rMwU60Pz that is what my Makefile looks like. I'm not seeing where all the other "atomic" references would be coming from in Makefile.in though

[04:19] <MasterDuke> yeah...

[04:19] <ugexe> if i delete all the atomic ops references in there it then errors at https://github.com/MoarVM/MoarVM/blob/62c73a7e9de54aa7a37f49abbb5a62891b1032e0/src/moar.h#L75

[04:19] <ugexe> https://pastebin.com/raw/Kn2LMdn5

[04:20] <MasterDuke> but that should only be hit if you didn't do `--c11-atomics`?

[04:21] <ugexe> rakubrew build moar-blead --configure-options="--gen-moar=HEAD --c11-atomics"

[04:21] <ugexe> that is what i used

[04:21] <ugexe> but i think it is supposed to be enabled by default now anyway

[04:22] <MasterDuke> no, it's not the default

[04:22] <MasterDuke> don't you need something like `--moar-options=--c11-atomics`?

[04:22] <MasterDuke> i don't konw rakubrew

[04:23] <MasterDuke> oh, you were explicitly building moarvm

[04:23] <MasterDuke> no, --gen-moar is an nqp/rakudo option...

[04:24] <ugexe> yeah i think you're right. and looking at HEAD I see indeed it isn't the default anymore

[04:34] <ugexe> https://pastebin.com/raw/Ve0BdEXQ

[04:36] <ugexe> https://devblogs.microsoft.com/cppblog/c11-atomics-in-visual-studio-2022-version-17-5-preview-2/

[04:36] <ugexe> the probe doesn't find it. that output (with --c11-atomics) makes it seem like maybe it some unfinished version of c11 atomic support from that blog?

[04:38] <ugexe> https://pastebin.com/raw/qxjmZnXM this is the vcruntime_c11_stdatomic.h file from the error

[04:45] <MasterDuke> ugh. windows...

[04:46] <MasterDuke> well, i gotta get some sleep. later...

[06:57] <Geth> ¦ MoarVM: ugexe++ created pull request #1774: Enable c11 atomics on msvc 17.8+

[06:57] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1774

[06:57] <ugexe> dunno if that'll break msvc older than 17.8+, but CI should show that

[07:04] *** xiaomiao left
[07:04] *** xiaomiao joined
[07:10] <ugexe> i think dyncall will have to be updated before i can progress any further

[08:27] *** samcv left
[08:27] *** samcv joined
[09:39] *** sena_kun joined
[10:59] *** sena_kun left
[13:04] *** Util left
[13:04] *** Util joined
[13:53] <ugexe> How would we make https://github.com/MoarVM/MoarVM/blob/62c73a7e9de54aa7a37f49abbb5a62891b1032e0/build/setup.pm#L420 use 'armasm64' if using an ARM architecture?

[13:54] <ugexe> the current entry, ml / ml64, is x86 only

[14:45] *** sena_kun joined
[16:06] <ugexe> Is there anything special about MoarVM/dyncall or is it just a direct copy of the dyncall svn?

[16:35] *** jgaz left
[16:47] <MasterDuke> the last couple commits related to 3rdparty/dyncall say they're just updating to upstream revisions with no local changes

[16:48] <MasterDuke> e.g., a1a187f003ca85929d4a1485d89cf372d782dc7d

[17:22] *** xiaomiao left
[17:26] *** xiaomiao joined
[17:48] <ugexe> i haven't had any luck trying to update it :(

[17:48] <ugexe> it'd be nice if MoarVM/dyncall had a github action to automatically mirror the dyncall hg repo, and then have dependabot send updates for the moarvm dyncall submodule

[17:50] <ugexe> that wouldnt work if we have custom changes though

[17:51] *** xiaomiao left
[18:03] *** xiaomiao joined
[18:33] <patrickb> we don't. It's a 1:1 copy.

[19:02] <MasterDuke> ugexe: you mean updating dyncall doesn't fix building on windows arm? or you haven't been able to actually update dyncall?

[19:03] <ugexe> I haven't been able to update it, but i was trying to merge the changes (resulting in lots of conflicts) instead of just cloning it (which it sounds like i could do)

[19:04] <ugexe> https://github.com/ugexe/dyncall I created a GitHub action in this repo that mirrors the dyncall mercurial repo on a schedule. Maybe we should use it for MoarVM/dyncall

[19:04] <ugexe> it retains all the release tags and everything

[19:09] <MasterDuke> i just built with dyncall 1.4

[19:12] <ugexe> nice, its probably worth pushing

[19:23] <nine> Does libffi work instead of dyncall?

[19:24] <nine> --c11-atomics should have become default years ago. I e.g. have built the openSUSE packages with that enabled for at least 2 years.

[19:27] <ugexe> it is the default if the probe succeeds

[19:27] <nine> IIRC libffi also would be a better default than dyncall. It has better platform support and AFAIK no downsides

[19:36] <ugexe> there is nothing built into the build system for building with libffi is there? afaik i would have to figure out how to build and install libffi first

[19:37] <ugexe> which, on this somewhat rare ARM Windows, almost certainly means more pain

[19:42] <nine> Yeash, looks like it does support Windows on ARM, but has to be built from source in general

[20:32] <ugexe> after updating dyncall to 1.4 i get a little further but it still doesnt quite work even when i set the asm compiler to armasm64. i guess i'll have to try libffi

[20:53] <ugexe> i tried, but i dont think i'm going to end up figuring out how to build libffi on windows. i followed their instructions but i dont think they are quite valid for windows

[21:03] <ugexe> i was hoping i could just install it with winget or chocolatey, but nope

[23:32] *** sena_kun left
