[01:56] *** guifa left
[02:04] *** guifa joined
[02:08] *** guifa left
[04:30] *** guifa joined
[04:44] *** guifa left
[11:18] *** sena_kun joined
[11:27] <Geth> ¦ MoarVM/fix_sleep_jit_for_windows: 10edfeeceb | (Timo Paulssen)++ | src/jit/graph.c

[11:27] <Geth> ¦ MoarVM/fix_sleep_jit_for_windows: MVM_platform_sleep takes no tc argument

[11:27] <Geth> ¦ MoarVM/fix_sleep_jit_for_windows: 

[11:27] <Geth> ¦ MoarVM/fix_sleep_jit_for_windows: This was causing the amount of seconds to land in the xmm1 register

[11:27] <Geth> ¦ MoarVM/fix_sleep_jit_for_windows: on windows, where the function wasn't looking, and therefore

[11:27] <Geth> ¦ MoarVM/fix_sleep_jit_for_windows: any loop that was attempting to run "slowly" by calling sleep

[11:27] <Geth> ¦ MoarVM/fix_sleep_jit_for_windows: to accidentally sleep by whatever happened to still be in that

[11:27] <Geth> ¦ MoarVM/fix_sleep_jit_for_windows: register, which turned out to be 0.0, which is roughly equivalent

[11:27] <Geth> ¦ MoarVM/fix_sleep_jit_for_windows: <…commit message has 7 more lines…>

[11:27] <Geth> ¦ MoarVM/fix_sleep_jit_for_windows: review: https://github.com/MoarVM/MoarVM/commit/10edfeeceb

[11:27] <Geth> ¦ MoarVM: timo++ created pull request #1918: MVM_platform_sleep takes no tc argument

[11:27] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1918

[11:29] <timo> now i wonder if it'd be easy to check statically that the arguments we pass when jitting function calls are correct for the function in question ...

[12:36] <Geth> ¦ MoarVM/main: 0416a0974d | timo++ (committed using GitHub Web editor) | src/jit/graph.c

[12:36] <Geth> ¦ MoarVM/main: MVM_platform_sleep takes no tc argument (#1918)

[12:36] <Geth> ¦ MoarVM/main: 

[12:36] <Geth> ¦ MoarVM/main: This was causing the amount of seconds to land in the xmm1 register

[12:36] <Geth> ¦ MoarVM/main: on windows, where the function wasn't looking, and therefore

[12:36] <Geth> ¦ MoarVM/main: any loop that was attempting to run "slowly" by calling sleep

[12:36] <Geth> ¦ MoarVM/main: to accidentally sleep by whatever happened to still be in that

[12:36] <Geth> ¦ MoarVM/main: register, which turned out to be 0.0, which is roughly equivalent

[12:36] <Geth> ¦ MoarVM/main: <…commit message has 7 more lines…>

[12:36] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/0416a0974d

[13:01] *** guifa joined
[13:33] *** rakkable left
[13:33] *** rakkable joined
[13:37] *** guifa left
[14:22] *** MasterDuke joined
[14:26] <MasterDuke> timo: here's an interesting problem you might be good at tracking down. in t/04-nativecall/00-misc.t, at line 119, we end up in MVM_string_substrings_equal_nocheck, with `a->body.num_graphs == 0` and `a->body.cached_hash_code == 0`, but `b->body.num_graphs == 0` and `b->body.cached_hash_code != 0`. then ubsan complains that memcmp's first argument

[14:26] <MasterDuke> is NULL when it's not allowed to be

[14:27] <timo> interesting. i think cached_hash_code == 0 means we just haven't calculated the hash? and there's apparently a valid hash code for a null grapheme long string

[14:29] <MasterDuke> yeah, the cached_hash_code might be a red herring

[14:30] <MasterDuke> but `a->body.storage.blob_32 + starta` being NULL seems like it should never happen

[14:32] <MasterDuke> src/strings/ops.c:542:29: runtime error: null pointer passed as argument 1, which is declared to never be null

[14:32] <MasterDuke>     #0 0xffffb25b81b4 in MVM_string_substrings_equal_nocheck src/strings/ops.c:542

[14:32] <MasterDuke>     #1 0xffffb21389cc in MVM_interp_run src/core/interp.c:1393

[14:32] <MasterDuke>     #2 0xffffb223edfc in start_thread src/core/threads.c:101

[14:32] <MasterDuke>     #3 0xffffb1934b2c in start_thread nptl/pthread_create.c:447

[14:32] <MasterDuke>     #4 0xffffb199d888 in thread_start ../sysdeps/unix/sysv/linux/aarch64/clone3.S:76

[14:33] <timo> it seems a little odd that we're calling substrings_equals_nocheck with starta and startb both set to 0, it feels like we might be able to do a little better than the substrings equals nocheck function when we know that. though maybe the only stuff we can actually do better is the stuff we already do in front of that function

[14:34] <MasterDuke> interp.c is calling MVM_string_equal

[14:35] <timo> how come we have a blob_32 with num_graphs == 0, it would be much easier to just have it be an in-situ-8 instead

[14:35] <timo> i know. MVM_string_equal is the thing that calls substrings_equal with starta and startb as 0

[14:35] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/main/src/strings/ops.c#L1561-L1572 maybe should add a special case for both 0?

[14:36] <MasterDuke> but yeah, the real problem/fix might be elsewhere

[14:37] <MasterDuke> afk for a bit, have to push a kid on a swing

[14:38] <timo> have fun :)

[14:39] <timo> static MVMString * get_all_in_buffer(MVMThreadContext *tc, MVMDecodeStream *ds) always builds grapheme_32

[14:40] <timo> 478         /* If there's no codepoint buffer, then return the empty string. */

[14:40] <timo> there's already a special case here, we can just make that set in_situ_8

[14:41] *** MasterDuke left
[14:41] <timo> actually, it could return the empty string constant instead

[14:49] <Geth> ¦ MoarVM/decode_stream_take_all_in_buffer_return_empty_string_constant: 3edbf6db79 | (Timo Paulssen)++ | src/strings/decode_stream.c

[14:49] <Geth> ¦ MoarVM/decode_stream_take_all_in_buffer_return_empty_string_constant: Save allocating a string in decodestream for empty string

[14:49] <Geth> ¦ MoarVM/decode_stream_take_all_in_buffer_return_empty_string_constant: 

[14:49] <Geth> ¦ MoarVM/decode_stream_take_all_in_buffer_return_empty_string_constant: Instead, reuse the global empty string constant

[14:49] <Geth> ¦ MoarVM/decode_stream_take_all_in_buffer_return_empty_string_constant: review: https://github.com/MoarVM/MoarVM/commit/3edbf6db79

[14:54] <timo> regarding a->body.storage.blob_32 + starta being NULL, the only way this can happen is if blob_32 and starta are both 0; starta is always 0 when called via MVM_string_equal of course. it could also happen that the sum of the pointer blob_32 and starta just happen to exactly hit the overflow point and wrap back around to 0

[14:57] <timo> with our case of num_graphs also being 0, it is only dangerous to call memcmp if it's defined by the standard to be dangerous, which i don't actually know. but if ubsan complains, it does sound like that's undefined behaviour what happens in that case

[14:59] <Geth> ¦ MoarVM: timo++ created pull request #1919: Save allocating a string in decodestream for empty string

[14:59] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1919

[16:46] <Geth> ¦ MoarVM/main: 3edbf6db79 | (Timo Paulssen)++ | src/strings/decode_stream.c

[16:46] <Geth> ¦ MoarVM/main: Save allocating a string in decodestream for empty string

[16:46] <Geth> ¦ MoarVM/main: 

[16:46] <Geth> ¦ MoarVM/main: Instead, reuse the global empty string constant

[16:46] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/3edbf6db79

[16:46] <Geth> ¦ MoarVM/main: e480f2db72 | MasterDuke17++ (committed using GitHub Web editor) | src/strings/decode_stream.c

[16:46] <Geth> ¦ MoarVM/main: Merge pull request #1919 from MoarVM/decode_stream_take_all_in_buffer_return_empty_string_constant

[16:46] <Geth> ¦ MoarVM/main: 

[16:46] <Geth> ¦ MoarVM/main: Save allocating a string in decodestream for empty string

[16:46] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/e480f2db72

