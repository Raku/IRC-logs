[02:52] *** MasterDuke joined
[02:53] <MasterDuke> timo: did you see https://github.com/python/cpython/pull/128718 ? how long would it take you to implement that for moarvm?

[02:53] <tellable6> 2025-02-10T19:17:37Z #moarvm <lizmat> MasterDuke17: with this patch, 2 spectests fail for me

[02:57] <MasterDuke> lizmat: fix incoming

[03:19] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1911: Fix utf8 decoding after mistakes simplifying it

[03:19] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1911

[03:38] *** MasterDuke left
[04:33] *** nine_ joined
[04:33] *** nine left
[04:33] *** camelia left
[04:40] *** camelia joined
[04:42] *** guifa left
[07:38] <Geth> ¦ MoarVM/main: 474faf87cb | (Daniel Green)++ | src/strings/utf8.c

[07:38] <Geth> ¦ MoarVM/main: Oops, accidentally had the conditional backwards

[07:38] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/474faf87cb

[07:38] <Geth> ¦ MoarVM/main: aa11775c57 | (Daniel Green)++ | src/strings/utf8.c

[07:38] <Geth> ¦ MoarVM/main: Reinstate the after-decode-loop bad utf8 check

[07:38] <Geth> ¦ MoarVM/main: 

[07:38] <Geth> ¦ MoarVM/main: I somehow missed that `state != UTF8_ACCEPT` is not the same thing as

[07:38] <Geth> ¦ MoarVM/main: `case UTF8_REJECT:`.

[07:38] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/aa11775c57

[07:38] <Geth> ¦ MoarVM/main: c637fceac8 | niner++ (committed using GitHub Web editor) | src/strings/utf8.c

[07:38] <Geth> ¦ MoarVM/main: Merge pull request #1911 from MasterDuke17/fix_utf8_decoding_after_mistakes_simplifying

[07:38] <Geth> ¦ MoarVM/main: 

[07:38] <Geth> ¦ MoarVM/main: Fix utf8 decoding after mistakes simplifying it

[07:38] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/c637fceac8

[08:22] <patrickb> scovit: Can you make that a PR?

[08:22] <tellable6> patrickb, I'll pass your message to scovit

[09:39] *** sena_kun joined
[10:21] *** patrickb left
[11:35] *** patrickb joined
[12:00] *** nine_ is now known as nine

[14:25] <patrickb> Context: I work on getting a PTY setup on Windows. I can't use the libuv process creation facilities. The only way to get a callback on process exit is a separate thread waiting on that process.

[14:26] <patrickb> I could either just use a libuv thread (uv_queue_work) or use the Windows wait thread pool.

[14:28] <patrickb> The uv thread will lock up a thread of the pool. I'm unsure if that's cool. Windows wait thread pool gives no guarantees as to which thread runs the callback and it's not synced with libuv whatsoever.

[14:28] <patrickb> Any pointers as to which direction to take best?

[14:29] <patrickb> Just for reference, I'm not the first one hitting this mess: https://github.com/libuv/libuv/issues/3100

[14:36] <patrickb> For reference: node-pty creates and locks up a thread manually: https://github.com/microsoft/node-pty/blob/main/src/win/conpty.cc#L111

[14:38] <patrickb> Are there any "make me a thread for internal use" facilities in moar or do I just use libuv directly?

[14:53] *** nine left
[14:53] *** nine joined
[16:18] <timo> oh cool you're back on pty stuff?

[16:19] <timo> check how the async io thread and the spesh worker thread are created and launched

[16:19] <timo> i'm not sure if we can get away without an MVMThreadContext for the process wait thread

[16:20] <timo> but the thread context doesn't have to be "full", for example doesn't have to have a full-sized nursery

[16:45] <patrickb> Yes, with rakudo working on Windows again and the Terminal::* stack gaining Windows support, the stage is now set to implement PTY support on Windows. Yay!

[16:45] <timo> terrifying.

[17:04] *** sena_kun left
[20:17] *** guifa joined
[21:08] *** rakkable joined
[21:22] *** rakkable left
[21:22] *** rakkable joined
[21:25] *** rakkable left
[21:26] *** rakkable joined
[21:29] *** rakkable left
[21:29] *** rakkable joined
[21:29] <lizmat> PSA: rakkable is now also running here

[21:30] <lizmat> and has some added features related to search Rakudo / NQP / MoarVM

[21:30] <lizmat> rakkable: help

[21:30] <rakkable> lizmat, Help sections available:

[21:30] <rakkable> lizmat,   eco-code eco-doc eco-provides eco-scripts eco-tests rakudo-all rakudo-c rakudo-java

[21:30] <rakkable> lizmat,   rakudo-js rakudo-nqp rakudo-perl rakudo-raku rakudo-shell rakudo-test rakudo-yaml

[21:30] <rakkable> lizmat,   unicode version.

[21:30] <lizmat> rakkable: help rakudo-c

[21:30] <rakkable> lizmat, Search all of the C files in Rakudo

[21:30] <lizmat> rakudo-c strcmp

[21:30] <lizmat> rakkable: rakudo-c strcmp

[21:30] <rakkable> lizmat, Looking for 'strcmp' using 'rakudo-c', please be patient!

[21:30] <rakkable> lizmat, Found 48 lines in 15 files:

[21:30] <rakkable> lizmat, https://gist.github.com/f827ea7d5aaefe4295a19c4e52aae583

[21:43] <lizmat> afk&

[21:54] *** sena_kun joined
[23:07] *** sena_kun left
[23:07] *** sena_kun joined
[23:22] *** sena_kun left
