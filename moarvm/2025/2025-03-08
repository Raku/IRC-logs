[00:15] *** MasterDuke joined
[00:15] <MasterDuke> ==25674== Process terminating with default action of signal 6 (SIGABRT)

[00:15] <MasterDuke> ==25674==    at 0x5206898: __pthread_kill_implementation (pthread_kill.c:44)

[00:15] <MasterDuke> ==25674==    by 0x51B683B: raise (raise.c:26)

[00:15] <MasterDuke> ==25674==    by 0x51A1A7F: abort (abort.c:79)

[00:15] <MasterDuke> ==25674==    by 0x4C3BABB: uv_mutex_destroy (thread.c:360)

[00:15] <MasterDuke> ==25674==    by 0x4B597A3: gc_free (ConcBlockingQueue.c:80)

[00:15] <MasterDuke> ==25674==    by 0x4B1C18B: MVM_gc_collect_free_gen2_unmarked (collect.c:738)

[00:15] <MasterDuke> ==25674==    by 0x4B188D3: MVM_gc_global_destruction (orchestrate.c:795)

[00:15] <MasterDuke> ==25674==    by 0x4C11747: MVM_vm_destroy_instance (moar.c:660)

[00:15] <MasterDuke> ==25674==    by 0x12161B: main (main.c:531)

[00:35] *** MasterDuke left
[02:01] *** lizmat left
[09:00] <timo> isn't that the problem that we've always had?

[09:16] *** Geth joined
[09:53] <timo> we aren't "creating" the MVMP6int in that case at all, the P6intBody is just slapped inside of an P6OpaqueBody with an offset and the size specified in the STable's storage spec; there is no MVMP6int that corresponds to the Body at all, and since we only use as much space as the chosen int inside the body, it's not equivalent to an MVMP6intBody either

[10:07] *** lizmat_ left
[10:07] *** lizmat joined
[10:17] *** sena_kun joined
[10:57] <Geth> ¦ MoarVM/main: 282254418f | timo++ (committed using GitHub Web editor) | src/spesh/args.c

[10:57] <Geth> ¦ MoarVM/main: Don't turn slurpies into huge amounts of code (#1921)

[10:57] <Geth> ¦ MoarVM/main: 

[10:57] <Geth> ¦ MoarVM/main: For example, a file with a huge hash literal created with

[10:57] <Geth> ¦ MoarVM/main: the `infix:<,>` operator may end up with a callsite with

[10:57] <Geth> ¦ MoarVM/main: thousands of entries, and peak memory usage from register

[10:57] <Geth> ¦ MoarVM/main: facts and other stuff can balloon quite massively.

[10:57] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/282254418f

[10:59] *** ^Dan joined
[10:59] <timo> lizmat: try setting MVM_SPESH_BLOCKING=1 for the compilation of Emoji::Text; getting the memory usage depends on one of the infix:<,> calls being OSR'd, and whether or not that happens is subject to timing of data accumulating in the spesh logs etc etc

[11:01] <lizmat> when I run: raku lib/Text/Emoji.rakumod with the snapper, it doesn't show any difference with or without MVM_SPESH_BLOCKING

[11:01] <lizmat> Initial/Final Size: 131 / 2584 Kbytes

[11:05] <timo> OK, can you make a spesh log and check `grep 'r..\?.5000' emoji.speshlog.txt`?

[11:06] <lizmat> before or after I bump Rakudo ?

[11:08] <timo> that should be the one ith high memory usage

[11:09] <lizmat>       const_i64_16    r16(5000), liti16(687)

[11:09] <lizmat>       sp_getarg_o     r17(5000), liti16(687)

[11:09] <lizmat>       bindpos_o         r2(2), r16(5000), r17(5000)

[11:09] <lizmat>     r16(5000): usages=1, flags=2     KnVal

[11:09] <lizmat>     r17(5000): usages=1, flags=0 

[11:10] *** ^Dan left
[11:11] <timo> ok, that should be using lots of memory

[11:11] <lizmat> that's before bump

[11:12] <timo> Initial/Final Size: 152328 / 3343044 Kbytes

[11:12] <timo>    100153   5.10

[11:12] <timo>    928155   4.32  3133152

[11:12] <timo>     28628   7.60     5568

[11:14] <lizmat> after the bump, no output on the grep, and the snapper output:

[11:14] <lizmat> Initial/Final Size: 135 / 200 Kbytes

[11:15] <lizmat> so that's 2584 -> 200   so yes, that's good  :-)

[11:15] <timo> uhhhh there's no way rakudo uses 200 kilobytes

[11:15] <timo> i *wish*

[11:16] <lizmat> heh, maybe that K should be an M ?

[11:16] <timo> on your system yes, on my system no

[11:16] <timo> because there is also no way that rakudo uses 3 terabytes of ram for that

[11:17] <lizmat> ah, maybe on MacOS there's a factor 1000 difference in reporting  hmmm

[11:18] <timo> probably, yeah

[11:18] <timo> you're using nqp::getrusage right?

[11:18] <timo> i think getrusage itself is kind of platform-dependent already

[11:18] <timo> but we are using a libuv provided function for that

[11:19] <timo> "The maximum resident set size is reported in kilobytes, the unit most platforms use natively."

[11:19] <timo> this is what the libuv documentation says

[11:19] <lizmat> it takes the max-rss of the getrusage

[11:20] <timo> https://github.com/bnoordhuis/libuv/commit/4b0be1d91f8ac32945980a06d733b539ce8e3c13

[11:21] <lizmat> my int $b2kb = VM.osname eq 'darwin' ?? 10 !! 0;

[11:21] <lizmat> perhaps that should go now

[11:21] <timo> 1.45.0 is supposed to have the fix

[11:21] <lizmat> right, and snapper never got updated

[11:22] <timo> and we are on 1.50.0

[11:22] <lizmat> right

[11:22] <timo> oh, i see

[11:22] <timo> cool

[11:29] <lizmat> Initial/Final Size: 138736 / 206592 Kbytes   # after removing the MacOS factor

[11:29] <timo> do we want to put a _ or , in there for thousands-separators?

[11:31] <timo> nah, don't bother

[11:31] <timo> plenty of other stuff to do

[11:32] <lizmat> m: say 206592.polymod(1000 xx *).reverse.join("_")   # polymod to the rescue

[11:32] <camelia> rakudo-moar 9233a89f9: OUTPUT: «206_592␤»

[11:32] <timo> that's nicer than the solution with .comb because it needs .reverse

[11:39] <timo> i also kind of like using ansi escapes with colors or bold / normal to make separate parts of a number stand out

[11:40] <timo> but we don't have ansi escapes in core yet right?

[11:41] <lizmat> nope, we don't, but we could in the mapper: it's basically 2 constants that need to be defined for bold

[11:41] <lizmat> colours I'm not too sure about

[11:41] <lizmat> if we would like to have them in that report, I mean  :-)

[11:42] <timo> plus / minus making sure it doesn't look like ass on windows

[11:43] <timo> could just be VM.osname ne 'windows' or whatever

[11:44] <lizmat> so what would you like bolded in the snapper output ?

[11:45] <timo> m: dd 123456789.polymod(1000 xx *) Z (|("bold", "normal") xx *)

[11:45] <camelia> rakudo-moar 9233a89f9: OUTPUT: «((789, "bold"), (456, "normal"), (123, "bold")).Seq␤»

[11:45] <timo> hm. there it would be cool to start on the right instead of the left tbh

[11:46] <timo> so back to the reverse + Z + reverse :D

[11:47] <lizmat> well... I'll think about it, or you beat me to it :-)

[11:47] <timo> really not that important

[11:55] <timo> https://github.com/MoarVM/MoarVM/pull/1921#issuecomment-2708189210 - you could put an edit or additional comment here to explain the source of the confusion, maybe a link to the fix as well

[11:55] <timo> aww yiss i made the zstd speshlog output a lot smaller

[11:57] <timo> m: dd 1761366808.polymod(1024 xx *)

[11:57] <camelia> rakudo-moar f7023342c: OUTPUT: «(792, 788, 655, 1).Seq␤»

[11:58] <timo> m: dd 1761366808.polymod(1000 xx *)

[11:58] <camelia> rakudo-moar f7023342c: OUTPUT: «(808, 366, 761, 1).Seq␤»

[11:59] <timo> 1.66 gigs down to 113 megs with my new patch, but it was 191 megs without

[11:59] <lizmat> m: say "1234567890".flip.comb(3).join("_").flip

[11:59] <camelia> rakudo-moar f7023342c: OUTPUT: «1_234_567_890␤»

[11:59] <lizmat> another way not using polymod

[13:01] <timo> i was being stupid and that change i just praised myself for was already on the branch, i just accidentally stopped rebasing after the first conflict

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: 34b78f3251 | (Timo Paulssen)++ | 4 files

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: compress spesh log output with zstd

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: review: https://github.com/MoarVM/MoarVM/commit/34b78f3251

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: 8bf7aea7a5 | (Timo Paulssen)++ | 8 files

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: check SPESH_LOG for .zst, store flag, fix truncated bits

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: review: https://github.com/MoarVM/MoarVM/commit/8bf7aea7a5

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: 3339f7c3a4 | (Timo Paulssen)++ | 6 files

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: DumpStr->MVMDumpStr, keep more stuff in one ds to zstd at once

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: 

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: This gives drastically better compression rate. We can use the

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: spots where one frame ends and another starts to efficiently skip

[13:02] <Geth> ¦ MoarVM/zstd_speshlog: through the compressed file and identify semantically relevant pieces

[13:03] <Geth> ¦ MoarVM/zstd_speshlog: even when loading really big spesh logs (like the core setting

[13:03] <Geth> ¦ MoarVM/zstd_speshlog: compilation generating a ~1.5GiB file)

[13:03] <Geth> ¦ MoarVM/zstd_speshlog: review: https://github.com/MoarVM/MoarVM/commit/3339f7c3a4

[13:04] *** MasterDuke joined
[13:05] <MasterDuke> timo: yeah, the 15-gh_1202.t backtrace hasn't changed

[13:06] <timo> that's not the one with MVM_gc_global_destruction right?

[13:07] <MasterDuke> it is

[13:09] <MasterDuke> btw, a MVMP6int had to be created at one point, right? i mean it's just standard assigning to an attribute

[13:10] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/main/lib/MAST/Nodes.nqp#L819

[13:13] <MasterDuke> i don't have the hll backtrace, but there are two more of those errors at #0 0xffffa4500064 in MVMP6int_set_int src/6model/reprs/P6int.c:83 and #0 0xffffa4500264 in MVMP6int_get_int src/6model/reprs/P6int.c:93

[13:13] <timo> oh. why are we running a spec test with full cleanup?

[13:13] <timo> no wonder it's failing

[13:14] <MasterDuke> hm, that might have just been me running that test in a loop under valgrind and putting --full-cleanup to reduce the noise from valgrind

[13:14] <timo> the assigning to the attribute happens after an integer has been put into a register

[13:14] <timo> and the P6int_get_int and P6int_set_int are called on the MVMP6intBody that is "theoretically" inside the P6opaque

[13:15] <timo> but the way we manage that bit of memory is not compatible with the way C does

[13:16] <MasterDuke> ok, so how do we make it compatible?

[13:16] <timo> we shouldn't

[13:16] <MasterDuke> well, i don't think relying on undefined behavior is a good idea

[13:16] <timo> yeah, we need to toss the approach based on "union" in the trash

[13:18] <timo> it doesn't reflect the reality of what we're doing, and we don't want to make P6opaque worse (and CStruct wrong) by forcing the other parts of the code to fit with what the requirements are for the union of these different int types

[13:19] <timo> what we are doing is really much more like working with (void *) and casting to the integer type that the STable is identifying it as, rather than (MVMP6intBody *) and using the union's .i8 / .i16 / .i32 or whatever

[13:20] <MasterDuke> so just cast down to the desired size, but assign to the full size?

[13:20] <timo> if we assign to the full size we would overwrite nearby attributes

[13:20] <timo> i guess it depends onw hat you mean by assign there

[13:23] <MasterDuke> ah! you're saying there actually is only 32bits there and we're casting it to the 32bit union member?

[13:23] <timo> yes that's what i mean

[13:23] <timo> i think in most cases we're just using the union as a shorthand for the syntax of casting to the different types

[13:33] <MasterDuke> unrelated, but i just got a coredump in t/spec/S16-filehandles/argfiles.t

[13:34] <MasterDuke> on the laptop, and one in t/spec/S06-currying/positional.rakudo.moar on the desktop

[13:38] <MasterDuke> i kind of wish we didn't deliberately cause a segfault during spectests

[13:38] <MasterDuke> t/spec/S11-modules/versioning.t and t/spec/S06-currying/positional.t on the laptop

[13:45] <MasterDuke> t/spec/S16-io/lines.t on the laptop

[13:46] <timo> do you have any hints yet what they are from?

[13:46] <MasterDuke> no, i'm not actually seeing any core files

[13:49] <MasterDuke> on the laptop i'm running 15-gh_1202.t in a loop under valgrind, with normal spectests running in another terminal. on the desktop i'm running 15-gh_1202.t in a loop recording them with rr, with a normal spectest running in another terminal

[13:50] <timo> do you have an ulimit for core size, or do you need to look in coredumpctl if that's catching the files?

[13:50] <MasterDuke> it's unlimited

[13:51] <MasterDuke> on the desktop it just seemed to catch the strdup ones we deliberately cause. guess i could just comment that test out for now...

[13:51] <MasterDuke> i need to install coredumpctl on the laptop...

[13:53] <timo> no need for that

[13:53] <timo> if it's not installed, then they are probably not landing in there

[13:54] <timo> check `cat /proc/sys/kernel/core_pattern`

[13:54] <MasterDuke> yeah, but i do want it anyway

[13:54] <timo> has this on my system: |/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h

[13:54] <timo> coredumpctl works by looking in the journal for core dumps

[13:54] <MasterDuke> heh, that's what i have now

[13:54] <timo> oh huh

[13:55] <MasterDuke> i just installed coredumpctl

[13:55] <timo> OK

[13:56] <timo> `journalctl MESSAGE_ID=fc2e22bc6ee647b6b90729ab34a250b1 -o verbose` can give you information about stored core dumps as well, without the coredumpctl tool

[13:56] <timo> but now that you have it, might as well use it

[13:57] <MasterDuke> t/spec/S02-types/subset-6e.t on the desktop

[13:57] <timo> what the fuck is going on that you get so many crashes?!

[13:58] <MasterDuke> just run spectests in a loop

[13:59] <MasterDuke> got a core for the t/spec/S02-types/subset-6e.t one on the desktop

[13:59] <MasterDuke> https://gist.github.com/MasterDuke17/3ab10382e3caf37aa7859ba113bf3a5c

[14:02] <timo> ok, there we are exiting, the malloc heap is being torn down, and it looks like the async IO thread is running a callback for a child process having exited

[14:03] <timo> so like, we already called exit() from MVM_vm_exit, which normally we have decided is good enough to tear stuff down, but mimalloc is doing work long enough for another thread to have the opportunity to jump right in the middle of that

[14:05] <MasterDuke> oh, mimalloc just released 2.2.2, we should probably try to update to that

[14:05] <MasterDuke> we're on 2.1.7

[14:08] <MasterDuke> but is there a way we can make this safe regardless of how long mimalloc takes?

[14:09] <timo> yes, i have a branch, hold on

[14:09] <MasterDuke> https://gist.github.com/MasterDuke17/d39a1691f00986064553e22db099fed2 t/spec/6.c/MISC/bug-coverage.t on laptop

[14:10] <Geth> ¦ MoarVM/eventloop_dont_crash_in_regular_exit: eddc725444 | (Timo Paulssen)++ | src/moar.c

[14:10] <Geth> ¦ MoarVM/eventloop_dont_crash_in_regular_exit: In regular vm exit, stop and join eventloop

[14:10] <Geth> ¦ MoarVM/eventloop_dont_crash_in_regular_exit: 

[14:10] <Geth> ¦ MoarVM/eventloop_dont_crash_in_regular_exit: This prevents stuff from happening on the event loop thread while

[14:10] <Geth> ¦ MoarVM/eventloop_dont_crash_in_regular_exit: mimalloc is destroying its structures in its atexit handler, which can

[14:10] <Geth> ¦ MoarVM/eventloop_dont_crash_in_regular_exit: otherwise cause aborts and other undesired behaviour.

[14:10] <Geth> ¦ MoarVM/eventloop_dont_crash_in_regular_exit: review: https://github.com/MoarVM/MoarVM/commit/eddc725444

[14:12] <MasterDuke> i'll run with that for a bit

[14:12] <timo> usually there's also a bit of console output before an abort(), is there anything for that one?

[14:13] <timo> the backtraces are not very helpful there

[14:13] <timo> not sure what __cxa_finalize is about

[14:13] <timo> oh it's also related to atexit?

[14:14] <MasterDuke> no, i think running under prove or something gobbles the stderr

[14:15] <timo> there is probably a flag for that

[14:16] <timo> looks like -v does that

[14:18] <MasterDuke> i can try that later, gotta go afk for a while. but i'm running everything on that branch

[14:18] <MasterDuke> not ok 1 - shell output

[14:18] <MasterDuke> # Failed test 'shell output'

[14:18] <MasterDuke> # at rakudo/t/02-rakudo/15-gh_1202.t line 17

[14:18] <MasterDuke> # expected a match with: /[ <[0..4]> \n ] ** 250/

[14:18] <MasterDuke> #                   got: "1\n2\n3\n0\n4\n0\n1\n3\n4\n2\n3\n4\n1\n2\n0\n0\n2\n3\n1\n4\n3\n4\n0\n1\n2\n2\n1\n0\n3\n4\n1\n0\n3\n4\n2\n0\n2\n3\n4\n1\n2\n3\n4\n1\n0\n0\n2\n4\n1\n3\n1\n3\n4\n2\n0\n2\n1\n3\n0\n4\n0\n1\n2\n3\n4\n2\n0\n1\n4\n3\n3\n0\n1\n4\n2\n0\n4\n3\n2\n1\n0\n1\n2\n3\n4\n2\n3\n1\n0\n4\n0\n1\n3\n2\n4\n0\n3\n1\n2\n4\n2\n3\n

[14:18] <MasterDuke> 4\n0\n1\n0\n3\n1\n2\n4\n1\n3\n0\n2\n4\n1\n0\n4\n2\n3\n0\n1\n2\n3\n4\n3\n2\n0\n1\n4\n0\n2\n1\n3\n4\n2\n1\n0\n3\n4\n0\n2\n4\n3\n1\n0\n3\n2\n4\n1\n0\n3\n4\n1\n2\n0\n1\n2\n3\n4\n0\n2\n4\n3\n1\n1\n4\n0\n2\n3\n0\n3\n1\n2\n4\n0\n1\n2\n3\n4\n0\n1\n2\n3\n4\n2\n4\n1\n0\n3\n1\n2\n3\n4\n0\n0\n1\n2\n3\n4\n0\n1\n2\n3\n4\n1\n2\n3\n4\n0\n2\n4\n0\n3\n1\n2\n3\n0\n1\

[14:18] <MasterDuke> n4\n0\n1\n3\n4\n2\n1\n0\n2\n3\n4\n1\n2\n0\n3\n4\n1\n0\n4\n3\n2\n0\n2\n3\n4\n1\n"

[14:18] <MasterDuke> ok 2 - all runs completed

[14:18] <MasterDuke> # You failed 1 test of 2

[14:18] <MasterDuke> that's weird, never seen that before

[14:21] <timo> it occurs to me that that one test shouldn't be exiting when there's still child processes exiting. possibly the test is wrong

[14:23] <timo> that string has 5 numbers missing

[14:32] <timo> did you have that under "rr record"?

[14:39] <MasterDuke> yeah

[14:40] <timo> rr record on gh_1202 sometimes crashes rr for me

[14:40] <timo> can you pack and send that recording?

[14:46] <MasterDuke> hm, i did rr pack, now do i just zip up the directory? or does it create a single file somewhere>

[14:46] <timo> the whole directory

[14:47] <timo> AIUI it adds a file that has extra stuff from your system

[14:48] <MasterDuke> 452mb raku-119.tar.zst

[14:48] <MasterDuke> what's a good way to send that?

[14:49] <timo> one sec

[14:51] <timo> DM'd you a link

[14:53] <timo> ok one of my regular (non-rr-recorded) runs of gh1202.t got "MoarVM panic: Internal error: invalid thread ID -59560384 in GC work pass"

[14:55] <MasterDuke> things *seem* to be a bit more stable on your branch...

[14:56] <MasterDuke> uploaded

[14:59] <timo> [FATAL src/ReplaySession.cc:255:ReplaySession()] Trace was recorded on a machine with different CPUID values

[14:59] <timo> and CPUID faulting is not enabled; replay will not work.

[14:59] <timo> bah.

[15:01] <MasterDuke> let me try re-packing with --disable-cpuid-faulting

[15:01] <timo> you can get into the process that crashes with `rr replay -f 4066353`, that's from the first column in `rr ps` for the one that exited with -11

[15:04] <MasterDuke> re uploaded

[15:06] <timo> hum. still getting that error

[15:06] <timo> i'm not sure if the --disable-cpuid-faulting flag does something for "rr pack", possibly only for "rr record"

[15:07] <timo> it doesn't help when i put it on my "rr replay" commandline either

[15:08] <MasterDuke> ah

[15:08] <MasterDuke> oh, just got another t/spec/S06-currying/positional.t on the laptop

[15:09] <MasterDuke> https://gist.github.com/MasterDuke17/904f5cce40340b831892c8ef37d11f03

[15:09] <MasterDuke> unfortunately rr doesn't seem to work in asahi

[15:11] <timo> huh that tells us barely anything with just the stack trace. and there's only a single thread? not even the spesh thread?

[15:13] <MasterDuke> get a lot of these for the valgrind loop, but no vm level crash, so no backtrace

[15:14] <MasterDuke> An operation first awaited:

[15:14] <MasterDuke>   in block <unit> at -e line 1

[15:14] <MasterDuke> Died with the exception:

[15:14] <MasterDuke>     Failed to write 2 bytes to filehandle: Broken pipe

[15:14] <MasterDuke>       in block  at -e line 1

[15:14] <timo> finally i have a recording of gh1202.t

[15:14] <MasterDuke> nice

[15:15] <timo> oh so that process just exited

[15:19] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1922: Bump mimalloc to v2.2.2

[15:19] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1922

[15:45] <timo> AFKBBL

[15:59] *** MasterDuke left
[20:25] <timo> hm. is this the same thing i've investigated before but didn't know how to fix?

[20:31] <timo> nine: what do you know about the async io and eventloop stuff?

[20:31] <nine> barely anything

