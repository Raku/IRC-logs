[00:29] *** sena_kun left
[01:11] *** rakkable left
[01:29] *** rakkable joined
[09:36] *** sena_kun joined
[11:42] <lizmat> timo: it looks like the Windows sleep fix breaks Terminal::LineEditor on ARM

[11:43] <lizmat> the symptoms: \n appears to become a LF only in the terminal, and messes up the terminal so badly that even a hard reset doesn't fix it

[11:44] <lizmat> does that ring a bell?

[11:49] <lizmat> going to revert the sleep fix for now

[11:49] *** rakkable left
[11:49] *** rakkable joined
[11:53] <lizmat> after double checking on Intel

[11:54] <timo> uhhh

[11:54] <timo> i don't think it's possible for that to be the cause

[11:54] <timo> that sounds really really strange

[11:54] <lizmat> well, if I build rakudo at dfcf45b8f999091eb30, there is no issue

[11:54] <timo> by "hard reset" you mean the "reset" terminal command? can you also try "stty sane"?

[11:54] <lizmat> if I build rakudo at 775e8ff96e784165b72, there is

[11:55] <timo> and when you say \n "becomes LF only" that means newlines don't move the cursor back to the left?

[11:55] <lizmat> selected the "hard reset" in the terminal app

[11:55] <lizmat> yes

[11:55] <timo> ok i have no idea what that is or does :)

[11:56] <lizmat> ok, building main again

[11:56] <lizmat> to verify

[11:57] <timo> wait, you're on arm

[11:57] <timo> there isn't even jit there

[11:57] <lizmat> yes

[11:57] <timo> the change was only in the jit

[11:58] <lizmat> well, I can only tell you what I see  :-)

[11:58] <timo> when the situation is there where it's treating \n wrong, is there still a rakudo or moar process running on the terminal?

[11:58] <lizmat> the problem does not exist on Intel

[11:59] <timo> it's still possible there's a bug with the makeraw nativecall stuff

[12:00] <timo> if we're getting the struct size wrong still (or again, or different) we might be getting random data fed into the syscall in question that depends on stuff like exact size of the binary, history of malloc and free calls before that point, memory layout randomization, etc etc

[12:01] <timo> is it easy for you to build a rakudo with ASan?

[12:01] <lizmat> if you can tell me how  :-)

[12:02] <lizmat> meh

[12:02] <timo> you can pass --asan on moar's Configure, it will also spit out a little piece of commandline that you need to use if you want to build rakudo or run pretty much anything because there's a little bit of stuff left un-deallocated when we quit because we let the destruction of the process do all the work

[12:03] <timo> oh, you probably also need to rebuild nqp??

[12:03] <lizmat> I have no idea how, but the problem appears to have gone away

[12:03] <timo> that's annoying :(

[12:03] <lizmat> only difference since last night,  is that I nuked ~/.raku/precomp

[12:05] <timo> we really need to figure something out to make all your stuff easier and faster to reproduce

[12:05] <timo> how much hard drive space do you have free?

[12:05] <lizmat> less than 40G

[12:05] <lizmat> ah, no

[12:06] <timo> ok, how big is your ~/.raku + the folder the rakudo stuff is installed to, i.e. your prefix?

[12:07] <lizmat> 556K

[12:08] <timo> sounds like it would be viable to just copy the entirety of those away to a fresh directory after any rebuild you do

[12:08] <timo> 556K is the size of these folders, not how much free space you have right?

[12:09] <lizmat> yes

[12:17] <lizmat> sorry for the noise

[12:17] <lizmat> I guess once we hit full test coverage in RakuAST, we need to look at the whole precomp logic again

[12:18] <lizmat> because I suspect there's at least 1 race condition in MoarVM / NQP / Rakudo re precompilation

[12:18] <lizmat> (because almost all spectest flappers actually need to load an external module)

[23:50] *** sena_kun left
