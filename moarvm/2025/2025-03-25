[00:41] *** [Coke] left
[02:38] *** [Coke] joined
[10:13] *** sena_kun joined
[10:35] *** xiaomiao is now known as DrEeevil

[10:52] *** JimmyZhuo joined
[11:34] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/03/25/2025-12-red-on-rakuast/

[12:33] *** Voldenet_ joined
[12:34] *** Voldenet left
[12:34] *** Voldenet_ is now known as Voldenet

[13:00] <jdv> [Coke]: the only place the extra 0 is used is on the branch push dst

[13:00] <jdv> maybe that addition you made to the release guide added confusion?

[13:02] <jdv> we could just rename the release branches if its causing trouble.  maybe like rakudo "release-..." or whatever...

[13:25] <patrickb> NativeCall has no support for varargs at all, correct? It seems the trick to just treat a vararg function as a non-vararg function does not work on all architectures. It namely fails on ARM MacOS with dyncall.

[13:28] <patrickb> I validated that with a small c prog that uses dyncall directly and performs a call to a vararg function. It works when dyncalling it as a proper vararg function, but fails when doing a regular dyncall (the arguments don't survive). On Linux x64 it works. Only fails on MacOS Arm.

[13:30] <patrickb> That's my little test prog: https://paste.sr.ht/~patrickb/c336c2664351a450d758eb9bf930eb53563b319b

[13:33] <patrickb> Strange enough the value that the vararg function sees is not completely off, but only differs slightly. I.e. the pointer is 0x16bce7590 on the outside and 0x16bce7540 on the inside.

[13:35] <patrickb> Anyone knows if calling vararg functions like normal functions is expected to work or if it's undef behavior that just happened to work?

[13:37] <[Coke]> jdv- no, the confusion was that the command to create the tar file *fails* for me when used with 2025.03

[13:37] <[Coke]> but *worked* with 2025.030 (worked, but then created the wrong folder)

[13:39] <jdv> what is going on over there:)

[13:40] *** JimmyZhuo left
[13:40] <[Coke]> I would like to schedule something a few weeks out where I can show you how the moarvm process from my standpoint so we can figure out why it's weird for me.

[13:41] <[Coke]> and it may just be "will not paying attention". :(

[13:42] <jdv> sure

[13:44] <Nicholas> Wierdly I don't know about ARM varags ABIs. But IIRC "we" discovered that the x86_64 ABI for varargs differs from the ABI for fix arg counts. IIRC it was that for varargs one of the CPU registers is popluated with the value "number of arguments", but for fixed arg count functions that register is any old garbage. After all, the callee knows the difference

[13:44] <Nicholas> result - casting a varargs function (eg printf) to a pointer to a function that takes exactly one char * arguments

[13:44] <Nicholas> and then using tha tfunction pointer somewhere else

[13:44] <Nicholas> and kaboomy

[13:46] <Nicholas> busy with (other) meetings - can't really fill in further

[13:46] <Nicholas> other than "these seem to be bad cheating assumptions and they will catch you out later"

[14:09] <patrickb> Nicholas: That's valuable information. So even on x64 we only managed to do it out of sheer luck. The only way forward then would be to put vararg support into Moar / NativeCall. Ugh.

[14:27] <Nicholas> sorry, seems that I didn't document all the details back then: https://github.com/Perl/perl5/commit/ceab7011c2af9d86bd7743d6c1b7c37540fe14f1

[15:16] *** sena_kun left
[15:16] *** sena_kun joined
[15:25] *** sena_kun left
[15:26] *** sena_kun joined
[15:33] *** sena_kun left
[15:33] *** sena_kun joined
[15:36] <patrickb> For vararg support, NativeCall will need to know the types of all the args that are passed. Since the signature doesn't tell for the variadic args, there needs to be some other way. I figure we want to explicitly specify the type when calling. Could an annotation on the capture work?

[15:38] <patrickb> Also is there any potential in automatically determining the C type based on the variable type passed in in Raku land? (always keeping the ability to specify the type explicitly) We should probably start with only explicit types as a first step.

[15:46] *** vrurg left
[15:46] *** vrurg joined
[15:54] *** notable6 left
[15:54] *** linkable6 left
[15:54] *** shareable6 left
[15:54] *** evalable6 left
[15:54] *** tellable6 left
[15:54] *** coverable6 left
[15:54] *** unicodable6 left
[15:54] *** nativecallable6 left
[15:54] *** quotable6 left
[15:54] *** greppable6 left
[15:54] *** sourceable6 left
[15:54] *** benchable6 left
[15:54] *** bloatable6 left
[15:54] *** releasable6 left
[15:54] *** bisectable6 left
[15:54] *** committable6 left
[15:55] <patrickb> https://github.com/Raku/problem-solving/issues/473

[15:56] *** coverable6 joined
[15:56] *** bloatable6 joined
[15:56] *** bloatable6 left
[15:56] *** coverable6 left
[15:59] *** nativecallable6 joined
[15:59] *** committable6 joined
[15:59] *** sourceable6 joined
[16:00] *** greppable6 joined
[16:00] *** quotable6 joined
[16:00] *** evalable6 joined
[16:00] *** bisectable6 joined
[16:00] *** tellable6 joined
[16:00] *** coverable6 joined
[16:00] *** unicodable6 joined
[16:00] *** releasable6 joined
[16:01] *** bloatable6 joined
[16:01] *** shareable6 joined
[16:01] *** linkable6 joined
[16:01] *** notable6 joined
[16:01] *** benchable6 joined
[16:10] *** Altai-man joined
[16:10] *** sena_kun left
[16:14] *** Altai-man left
[16:16] *** sena_kun joined
[16:44] *** benchable6 left
[16:44] *** unicodable6 left
[16:44] *** bloatable6 left
[16:44] *** bisectable6 left
[16:44] *** evalable6 left
[16:44] *** greppable6 left
[16:44] *** releasable6 left
[16:44] *** quotable6 left
[16:44] *** tellable6 left
[16:44] *** notable6 left
[16:44] *** sourceable6 left
[16:44] *** linkable6 left
[16:44] *** nativecallable6 left
[16:44] *** committable6 left
[16:44] *** coverable6 left
[16:44] *** shareable6 left
[16:47] *** bloatable6 joined
[16:47] *** greppable6 joined
[16:47] *** bisectable6 joined
[16:47] *** unicodable6 joined
[16:48] *** notable6 joined
[16:48] *** evalable6 joined
[16:48] *** nativecallable6 joined
[16:48] *** linkable6 joined
[16:48] *** benchable6 joined
[16:48] *** releasable6 joined
[16:48] *** tellable6 joined
[16:48] *** coverable6 joined
[16:49] *** quotable6 joined
[16:49] *** shareable6 joined
[16:49] *** sourceable6 joined
[16:49] *** committable6 joined
[17:23] *** coverable6 left
[17:23] *** shareable6 left
[17:23] *** nativecallable6 left
[17:23] *** committable6 left
[17:23] *** greppable6 left
[17:23] *** notable6 left
[17:23] *** bisectable6 left
[17:23] *** linkable6 left
[17:23] *** quotable6 left
[17:23] *** unicodable6 left
[17:23] *** tellable6 left
[17:23] *** bloatable6 left
[17:23] *** releasable6 left
[17:23] *** benchable6 left
[17:23] *** evalable6 left
[17:23] *** sourceable6 left
[17:25] *** coverable6 joined
[17:26] *** greppable6 joined
[17:26] *** linkable6 joined
[17:26] *** benchable6 joined
[17:26] *** nativecallable6 joined
[17:26] *** evalable6 joined
[17:26] *** tellable6 joined
[17:26] *** unicodable6 joined
[17:27] *** releasable6 joined
[17:27] *** shareable6 joined
[17:27] *** committable6 joined
[17:27] *** quotable6 joined
[17:27] *** notable6 joined
[17:27] *** shareable6 left
[17:27] *** releasable6 left
[17:27] *** coverable6 left
[17:27] *** nativecallable6 left
[17:27] *** committable6 left
[17:27] *** benchable6 left
[17:27] *** notable6 left
[17:27] *** quotable6 left
[17:27] *** evalable6 left
[17:27] *** tellable6 left
[17:27] *** linkable6 left
[17:27] *** unicodable6 left
[17:27] *** greppable6 left
[17:30] *** greppable6 joined
[17:30] *** quotable6 joined
[17:30] *** bisectable6 joined
[17:31] *** nativecallable6 joined
[17:31] *** releasable6 joined
[17:31] *** evalable6 joined
[17:31] *** committable6 joined
[17:31] *** sourceable6 joined
[17:31] *** linkable6 joined
[17:31] *** coverable6 joined
[17:32] *** bloatable6 joined
[17:32] *** shareable6 joined
[17:32] *** benchable6 joined
[17:32] *** unicodable6 joined
[17:32] *** tellable6 joined
[17:33] *** notable6 joined
[17:35] *** greppable6 left
[17:35] *** releasable6 left
[17:35] *** notable6 left
[17:35] *** unicodable6 left
[17:35] *** linkable6 left
[17:35] *** coverable6 left
[17:35] *** committable6 left
[17:35] *** evalable6 left
[17:35] *** benchable6 left
[17:35] *** bloatable6 left
[17:35] *** nativecallable6 left
[17:35] *** bisectable6 left
[17:35] *** tellable6 left
[17:35] *** shareable6 left
[17:35] *** sourceable6 left
[17:35] *** quotable6 left
[17:38] *** greppable6 joined
[17:38] *** releasable6 joined
[17:38] *** unicodable6 joined
[17:38] *** coverable6 joined
[17:39] *** committable6 joined
[17:39] *** evalable6 joined
[17:39] *** shareable6 joined
[17:40] *** quotable6 joined
[17:40] *** notable6 joined
[17:40] *** nativecallable6 joined
[17:40] *** linkable6 joined
[17:40] *** benchable6 joined
[17:41] *** bloatable6 joined
[17:41] *** sourceable6 joined
[17:41] *** bisectable6 joined
[17:41] *** sourceable6 left
[17:41] *** nativecallable6 left
[17:41] *** bloatable6 left
[17:41] *** benchable6 left
[17:41] *** quotable6 left
[17:41] *** evalable6 left
[17:41] *** coverable6 left
[17:41] *** greppable6 left
[17:41] *** bisectable6 left
[17:41] *** committable6 left
[17:41] *** notable6 left
[17:41] *** shareable6 left
[17:41] *** unicodable6 left
[17:41] *** linkable6 left
[17:41] *** releasable6 left
[17:44] *** coverable6 joined
[17:44] *** evalable6 joined
[17:44] *** shareable6 joined
[17:44] *** bisectable6 joined
[17:44] *** benchable6 joined
[17:45] *** tellable6 joined
[17:45] *** releasable6 joined
[17:45] *** notable6 joined
[17:45] *** quotable6 joined
[17:45] *** linkable6 joined
[17:46] *** greppable6 joined
[17:46] *** committable6 joined
[17:46] *** unicodable6 joined
[17:46] *** nativecallable6 joined
[17:46] *** bloatable6 joined
[17:46] *** sourceable6 joined
[23:17] *** sena_kun left
