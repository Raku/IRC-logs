[00:16] *** lizmat_ joined
[00:20] *** lizmat left
[00:54] *** lizmat joined
[00:58] *** lizmat_ left
[01:54] *** guifa left
[01:57] <Geth> ¦ MoarVM/main: 2ceba5c87b | (Will Coleda)++ | docs/ChangeLog

[01:57] <Geth> ¦ MoarVM/main: Fix Changelog formatting

[01:57] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/2ceba5c87b

[03:06] <[Coke]> nine, timo: ok to redo that merge (though I think it might have to be manual, github says that branch is already in main)

[09:31] *** sena_kun joined
[12:25] *** lizmat_ joined
[12:29] *** lizmat left
[12:57] *** lizmat_ left
[12:57] *** lizmat joined
[15:42] *** guifa joined
[17:07] <[Coke]> moarvm.org's "fork me" icon is broken. Any thoughts on https://tholman.com/github-corners/ ?

[17:07] <[Coke]> (I have a PR in progress for the site if anyone likes)

[17:13] <[Coke]> https://github.com/MoarVM/moarvm.org/pull/19

[17:21] <Geth> ¦ MoarVM/rakperl: 2744dcc71d | (Will Coleda)++ | 9 files

[17:21] <Geth> ¦ MoarVM/rakperl: Update many Perl 6 -> Rakudo

[17:21] <Geth> ¦ MoarVM/rakperl: 

[17:21] <Geth> ¦ MoarVM/rakperl: Leaving things that are exact quotes or from historical docs

[17:21] <Geth> ¦ MoarVM/rakperl: review: https://github.com/MoarVM/MoarVM/commit/2744dcc71d

[17:21] <Geth> ¦ MoarVM: coke++ created pull request #1901: Update many Perl 6 -> Rakudo

[17:21] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1901

[17:54] <Geth> ¦ MoarVM/rakperl: a0118445e5 | (Will Coleda)++ | docs/release_guide.md

[17:54] <Geth> ¦ MoarVM/rakperl: Note convention found during 2025.01 release

[17:54] <Geth> ¦ MoarVM/rakperl: review: https://github.com/MoarVM/MoarVM/commit/a0118445e5

[17:56] <[Coke]> ... crap, that was supposed to go to main.

[18:02] <timo> tbh it's fine to force-push over or delete branches, if you're quick about it :P

[18:02] <timo> but that's just my opinion

[18:03] <jdv> i'd guess that trailing zero is some fix or bandaid for the "ambiguous refspec" issue cause the tag and branch are the same...

[18:04] <jdv> which also happens to allow for "point releases" but i've never had to do one.

[18:07] <[Coke]> we should be using the "release-2025.01" format to avoid the ambiguous issue, then we're also matching rakudo

[18:07] <[Coke]> (crap) eh - both small changes, they can go in a single release-related PR

[18:11] <[Coke]> ok. I think that's all the tickets (across the websites, moarvm, and rakudo), along with a bunch of small updates to release guides

[18:11] <[Coke]> releasable6: status

[18:11] <releasable6> [Coke], Next release will happen when it's ready. There are no known blockers. 49 out of 53 commits logged

[18:11] <releasable6> [Coke], Details: https://gist.github.com/d1103a3ea6c6e72ca9f73d3b7544d5eb

[18:37] *** MasterDuke joined
[18:38] <MasterDuke> any objections to merging https://github.com/MoarVM/MoarVM/pull/1896 and/or https://github.com/MoarVM/MoarVM/pull/1897 ?

[18:38] <MasterDuke> anybody taken a look at them?

[18:44] <lizmat> no objections, but I'd like to have separate NQP bumps / rakudo bumps for each of them

[18:44] <lizmat> I'll merge and bump them shortly, ok?

[18:45] <Geth> ¦ MoarVM/main: 627650543f | MasterDuke17++ (committed using GitHub Web editor) | 11 files

[18:45] <Geth> ¦ MoarVM/main: Use rapidhash instead of siphash for string hashes

[18:45] <Geth> ¦ MoarVM/main: 

[18:45] <Geth> ¦ MoarVM/main: It's currently the fastest recommended hash function according to

[18:45] <Geth> ¦ MoarVM/main: SMHasher.

[18:45] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/627650543f

[18:46] <MasterDuke> sure, np

[18:51] <MasterDuke> lizmat: fyi, the nqp bump message is backwards, now it's using rapidhash instead of siphash

[18:51] <lizmat> argh

[18:52] <lizmat> will do correctly for the Rakudo bump, thanks for the headsup

[18:53] <MasterDuke> np

[18:59] <Geth> ¦ MoarVM/main: a0b7091877 | MasterDuke17++ (committed using GitHub Web editor) | src/strings/ops.c

[18:59] <Geth> ¦ MoarVM/main: Speedup MVM_string_find_cclass by adding cases...

[18:59] <Geth> ¦ MoarVM/main: 

[18:59] <Geth> ¦ MoarVM/main: for different string storage_types

[18:59] <Geth> ¦ MoarVM/main: 

[18:59] <Geth> ¦ MoarVM/main: It duplicates a bunch of code, but ends up being faster in a bunch of

[18:59] <Geth> ¦ MoarVM/main: commonly occuring cases.

[18:59] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/a0b7091877

[19:14] <Geth> ¦ MoarVM/main: 6f19ada9cb | (Timo Paulssen)++ (committed by Elizabeth Mattijsen) | src/6model/reprs/CPointer.c

[19:14] <Geth> ¦ MoarVM/main: Optimize passing CPointer to nativecall ever so slightly

[19:14] <Geth> ¦ MoarVM/main: 

[19:14] <Geth> ¦ MoarVM/main: We emit an unbox_i operation in a compiled nativecall body in order to

[19:14] <Geth> ¦ MoarVM/main: get the pointer value to pass to the native function. Without a spesh

[19:15] <Geth> ¦ MoarVM/main: method on the CPointer repr, this would interpret as, and jit into, a

[19:15] <Geth> ¦ MoarVM/main: call to CPointer's get_int.

[19:15] <Geth> ¦ MoarVM/main: 

[19:15] <Geth> ¦ MoarVM/main: Instead of a call, we just emit a spesh op to do the memory offset and

[19:15] <Geth> ¦ MoarVM/main: read for us, which the JIT also likes very much.

[19:15] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/6f19ada9cb

[19:27] <Geth> ¦ MoarVM/main: 05cc853ee1 | MasterDuke17++ (committed using GitHub Web editor) | 2 files

[19:27] <Geth> ¦ MoarVM/main: Turn off vla errors and bump libuv

[19:27] <Geth> ¦ MoarVM/main: 

[19:27] <Geth> ¦ MoarVM/main: Don't make VLAs an error any more.  This was added when we didn't have working

[19:27] <Geth> ¦ MoarVM/main: Windows CI (which doesn't support VLAs) and needed the early heads-up from

[19:27] <Geth> ¦ MoarVM/main: Linux. We need to do this because libuv 1.50 uses VLAs in the Unix code.

[19:27] <Geth> ¦ MoarVM/main: 

[19:27] <Geth> ¦ MoarVM/main: Bump libuv to v1.50.0

[19:27] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/05cc853ee1

[19:46] <Geth> ¦ MoarVM/main: 8bc35a9d90 | timo++ (committed using GitHub Web editor) | src/io/timers.c

[19:46] <Geth> ¦ MoarVM/main: Counteract drift in timers with repeat

[19:46] <Geth> ¦ MoarVM/main: 

[19:46] <Geth> ¦ MoarVM/main: With regular repeating timers in libuv, we accumulate

[19:46] <Geth> ¦ MoarVM/main: a small but significant amount of extra time with

[19:46] <Geth> ¦ MoarVM/main: every tick.

[19:46] <Geth> ¦ MoarVM/main: 

[19:46] <Geth> ¦ MoarVM/main: We only get to supply millisecond precision values

[19:46] <Geth> ¦ MoarVM/main: for the timeout and repeat values, so we can

[19:47] <Geth> ¦ MoarVM/main: only correct the ticks by one millisecond or more,

[19:47] <Geth> ¦ MoarVM/main: and we only notice when the difference is above that

[19:47] <Geth> ¦ MoarVM/main: same amount as well.

[19:47] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/8bc35a9d90

[19:53] <MasterDuke> what a bumpy afternoon

[19:54] <lizmat> evening even over here  :-)

[19:57] <MasterDuke> hopefully it doesn't effect your sleep

[19:59] <MasterDuke> speaking of bumpy...is there any policy about adding c++ libraries?

[20:00] <Geth> ¦ MoarVM/main: 7ff15b3eea | (Nick Logan)++ (committed using GitHub Web editor) | Configure.pl

[20:00] <Geth> ¦ MoarVM/main: Enable experimental c11 atomics on MSVC

[20:00] <Geth> ¦ MoarVM/main: 

[20:00] <Geth> ¦ MoarVM/main: MSVC requires the /experimental:c11atomics flag to work with c11 atomics.

[20:00] <Geth> ¦ MoarVM/main: Conditionally add this flag since it would cause an unrecognized option

[20:00] <Geth> ¦ MoarVM/main:  error on older MSVCs.

[20:00] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/7ff15b3eea

[20:00] <lizmat> MasterDuke: ok as long as it doesn't inhibit platforms, I guess ?

[20:00] <MasterDuke> oh, i guess mimalloc is already c++

[20:04] <lizmat> which lib are you thinking about ?

[20:05] <MasterDuke> simdutf

[20:06] <MasterDuke> it doesn't currently do any normalization, but maybe we can use it's fast validators to add a fast path to our current decoding functions

[20:06] <lizmat> right, looks cool 

[20:07] <lizmat> Latin1 to UTF-32 transcoding could be useful as is ?   with :encoding<latin1> ?

[20:07] <lizmat> or is that already optimized?

[20:08] <MasterDuke> dunno if/how optimized it is. but i doubt many people are using utf-32

[20:10] <Geth> ¦ MoarVM/main: fc2d31f32f | timo++ (committed using GitHub Web editor) | 3 files

[20:10] <Geth> ¦ MoarVM/main: Debugserver loaded file notifications (#1865)

[20:10] <Geth> ¦ MoarVM/main: 

[20:10] <Geth> ¦ MoarVM/main: add LoadedFilesRequest / FileLoadedNotification allows you to get all filenames

[20:10] <Geth> ¦ MoarVM/main: moar already knows about, and to be notified when new filenames are encountered.

[20:10] <Geth> ¦ MoarVM/main: 

[20:10] <Geth> ¦ MoarVM/main: Optionally, you can ask the thread that encounters a new filename suspends itself

[20:10] <Geth> ¦ MoarVM/main: so you can set up breakpoints ASAP. You can also get a stack trace immediately in

[20:10] <Geth> ¦ MoarVM/main: the notification.

[20:10] <Geth> ¦ MoarVM/main: 

[20:10] <Geth> ¦ MoarVM/main: Document new parts of debug protocol, bump version in docs

[20:10] <Geth> ¦ MoarVM/main: review: https://github.com/MoarVM/MoarVM/commit/fc2d31f32f

[20:20] <MasterDuke> timo: did you see my question on https://github.com/MoarVM/MoarVM/pull/1713 ?

[20:21] <timo> oh, i did not

[20:21] <timo> i can try rebasing and then have a look if it's good

[20:21] <MasterDuke> cool, looked pretty straightforward

[20:22] <timo> i'd love someone™ to check how best to bring generalized integer division optimizations into rakudo

[20:23] <MasterDuke> like libdivide does?

[20:25] <timo> that's right

[20:27] <timo> divide by power of two is already nice and simple, but i assume there's more real-world cases where the other kinds of division crop up

[20:27] <timo> but we can of course only use the improved division after precomputing the details

[20:28] <MasterDuke> i guess spesh could use libdivide to generate a division function if it notices a hot division with a constant divisor?

[20:29] <timo> yes, that is one possible spot where that can go

[20:29] <timo> i'm also thinking it could be something we try to do in rakudo's static optimizer

[20:30] <MasterDuke> huh. implement/port libdivide in/to raku or nqp?

[20:30] <lizmat> please don't invest any work in the static optimizer anymore...  it's going to be moot in RakuAST

[20:30] <timo> if we want to use libdivide directly, it can become a syscall inside moarvm so nqp and rakudo can use it too

[20:32] <MasterDuke> hm. to return a callable? or to somehow get the values it uses in its generated function?

[20:32] <timo> without good example code that actually uses division in a "realistic" setting, it will be very difficult to balance all the possible trade-offs we could do

[20:32] <timo> i'd ask it to fill the details into a little array or something

[20:32] <timo> which algo to use, and the constant that goes along with it

[20:32] <timo> and then there'd be an op or syscall that divides a number using the algo in question

[20:33] <timo> if the algo is constant at jit-time, we can directly emit the correct ops immediately

[20:33] <timo> though with raku code, it's quite likely that much of the time, it's going to be _I division rather than _i. on the other hand, we have the special mode where 32bit numbers can directly be in an Int

[20:35] <MasterDuke> it looks like it generates a struct with the necessary information, though it would require some interpreting

[20:39] <Geth> ¦ MoarVM: timo++ created pull request #1903: Make accesses to spesh arg guard atomic

[20:39] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1903

[20:40] <timo> we can be silly and put the struct into a buf8

[20:44] <MasterDuke> timo: two comments on #1903

[20:51] <timo> the comment about atomically exchanging is mostly that we don't have to make sure load and store can't be "interrupted"

[20:51] <MasterDuke> ah

[20:53] <timo> it looks like the discard function for spesh guards is only used when we toss a whole spesh candidate

[20:55] <MasterDuke> one more question

[20:58] <timo> same reason as the one just above it

[20:58] <timo> the stuff stored at the "other end" of that pointer has to be visible to other cores first

[20:58] <MasterDuke> ?

[21:08] <timo> it's not important whether we replace the null pointer by a new pointer, or replace the old pointer with a new pointer

[21:11] <timo> not sure i'm understanding the question correctly though

[21:15] <MasterDuke> i thought the barrier on the one branch of the if/else was needed because there was both a load and a store

[21:15] <MasterDuke> but since the other branch only has a store, i wasn't sure why the barrier is needed?

[21:16] <timo> the stores that we are worried about are all the stores to the tree->nodes[i] further above

[21:16] <MasterDuke> ah

[21:17] <MasterDuke> huh, lots of fails on that pr

[21:18] <MasterDuke> looks like all in t/02-rakudo/99-misc.t and t/09-moar/01-profilers.t

[21:18] <timo> is it all the fails caused by bumps?

[21:18] <timo> oh

[21:19] <MasterDuke> but one success

[21:21] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: e410e191fd | (Timo Paulssen)++ | 8 files

[21:21] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: Make accesses to spesh arg guard atomic

[21:21] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: 

[21:21] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: On ARM and other platforms with less strict memory ordering guarantees

[21:21] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: than x86, the step that spesh does to switch the pointer around to the

[21:21] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: newly created spesh arg guard can be seen by another thread before the

[21:21] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: contents of the arg guard are seen, causing the thread to jump into

[21:21] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: uninitialised "code". Until recently, this just caused freezing or

[21:21] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: <…commit message has 10 more lines…>

[21:21] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: review: https://github.com/MoarVM/MoarVM/commit/e410e191fd

[21:21] <timo> i removed the comment in the discard function because it's probably more confusing than helpful

[21:21] <timo> finished the comment that was cut off in the middle

[21:22] <MasterDuke> nice, and that'll let us see how flappy those fails are

[21:22] <timo> with the finished comment, is it clearer?

[21:23] <MasterDuke> yep

[21:30] <MasterDuke> looks like they're failing again

[21:30] <timo> huh

[21:33] <timo> not ok 2 - profiler does not crash

[21:38] <timo> oh, huh.

[21:40] <timo> but it kinda does look like the profiler crashes now, yeah

[21:41] <timo> i blame having had to make all my pointers into AO_t

[21:41] <timo> i might have turned something into one dereference too many or too few

[21:44] <timo> hmpf, does that mean that my debian package of moarvm with those changes also b0rken >_>

[21:47] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: 2f1f74890c | (Timo Paulssen)++ | src/spesh/arg_guard.c

[21:47] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: Fix incorrect write to spesh_arg_guard pointer

[21:47] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: review: https://github.com/MoarVM/MoarVM/commit/2f1f74890c

[21:47] <timo> that should be better

[21:54] <timo> i'm not 100% sure if it worked or not but i clicked "re-run" on the azure ci improvements pull request

[21:55] <timo> maybe it needs more than just a click on the re-run button

[22:00] <Geth> ¦ MoarVM/faster_dev_powershell_in_azure_pipelines: 23 commits pushed by (Timo Paulssen)++

[22:00] <Geth> ¦ MoarVM/faster_dev_powershell_in_azure_pipelines: review: https://github.com/MoarVM/MoarVM/compare/5b55b4920f1a...28fc9b1d36f7

[22:00] <timo> let's see if this rebase helps

[22:05] <MasterDuke> the re-run button only works for a couple days after the pr is created/updated

[22:06] <timo> and after that it just says "successfully requested a re-run"? lmao

[22:06] <MasterDuke> you successfully requested the re-run. they choose not to honor the request

[22:07] <MasterDuke> afk for a while

[22:07] <timo> thanks

[22:11] *** MasterDuke left
[23:09] *** sena_kun left
[23:31] *** coleman left
