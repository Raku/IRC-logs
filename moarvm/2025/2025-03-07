[02:43] *** JimmyZhuo joined
[03:02] *** JimmyZhuo left
[03:05] *** JimmyZhuo joined
[05:37] *** JimmyZhuo left
[09:29] *** sena_kun joined
[09:45] *** sena_kun left
[10:17] *** JimmyZhuo joined
[11:50] <lizmat> an optimization thought that just occurred to be:  a serialized hash in bytecode is read into memory completely at first access, right?

[11:51] <lizmat> If so, I was wondering if there could be a way to keep the values in the bytecode, but only read the keys, so that only the keys/values actually accessed would live in memory, rather than the whole hash ?

[11:52] <lizmat> does that make sense ?

[12:35] <nine> Just now I had a core dump in t/spec/S02-types/bag.t

[12:35] <nine> non-reproducible of course

[12:35] <nine> #0  0x00007f4e47f865ac in __strlen_evex () from /lib64/libc.so.6

[12:35] <nine> #1  0x00007f4e47eb05d2 in strdup () from /lib64/libc.so.6

[12:35] <nine> #2  0x00007f4e4856afe2 in dcCall_x64_sysv () from //home/nine/rakudo/install/lib/libmoar.so

[12:49] <timo> but you do have the core available?

[12:50] <timo> what does S02-types/bag.t even do with NativeCall

[12:53] <timo> can you make triple-sure that that core corresponds to that test? did some kind of confusion from parallel testing happen there perhaps?

[12:55] <timo> i think it shouldn't be terribly hard to run every test wrapped in "rr record" and then just rm the recording for every test file that succeeded 

[12:55] <nine> Oh, disregard!

[12:56] <nine> Since when do we have spec tests using NativeCall?

[12:56] <timo> i have no idea

[12:56] <timo> S29-os/system.t

[12:56] <timo> 210:‘use NativeCall; sub strdup(int64) is native(Str) {*}; strdup(0)’;

[12:56] <timo> this?

[12:57] <timo> oh is this literally a "easiest way to segfault" bit of code?

[12:58] <nine> seems like

[12:58] <timo>         'Exit with a segfault makes the Proc throw in sink context';

[12:58] <lizmat> t/spec/S17-procasync/windows-print-raw-args.raku  also appears to be using NativeCall

[12:58] <timo> ... surely this is not the thing we sometimes see in CI logs?

[12:59] <timo> how about we make a nqp::syscall named "segfault" that segfaults and also puts a big fat symbol on the stack that is called "the_user_code_explicitly_asked_for_this_process_to_segfault_ok"

[13:06] <lizmat> such a test would not belong in roast fwiw, but yes, feels like an idea?

[13:08] <nine> We could just ship a binary that will always segfault

[13:19] <timo> or use another program, like "perl" which we already require anyway

[13:20] <timo> if we required posix shell or so, we could literally shell out to like, "kill -11 $PID"

[13:20] <timo> unfortunately, the "signal" and "kill" stuff is not A Thing on windows

[13:21] <timo> we could instead of segfaulting with strdup(0) just call abort(), that should kill the process with SIGABRT on linux, and i'm not sure what exactly it will do on windows

[13:26] <timo> nine: btw do you know why there's no arguments visible on your stack trace? no debug symbols for your libc?

[13:29] <timo> and where did you get the core dump from? did it land in your PWD and you picked it up from there, or "coredumpctl list" or some other thing?

[13:34] <nine> coredumpctl

[13:34] <nine> We're in 2025 after all :)

[13:39] <timo> right. well, we could in theory set the "maximum size of core dump file" ulimit before turning that particular test. not sure how that would translate to windows though

[14:20] *** JimmyZhuo left
[18:50] *** sena_kun joined
[19:03] <lizmat> on the interesting issues front: https://github.com/lizmat/Text-Emoji/issues/2

[19:03] <lizmat> apparently it needs 4.5GB to install

[20:07] <timo> whew.

[20:10] *** [Coke] left
[20:19] <timo> MVM_spesh_args allocates a boatload of memory when trying to optimize the slurpy arguments instruction for presumably one absolutely ginormous callsite

[20:30] <timo> presumably the benefit to turning the "make array from slurpy args" into "create the array and bindpos every argument individually" will drop off after a thousand

[20:37] <timo> the guard tree also looks ridiculous

[20:44] <timo> > 1.23user 0.10system 0:00.97elapsed 137%CPU (0avgtext+0avgdata 196852maxresident)k

[20:47] <timo> > 1.10user 1.00system 0:01.92elapsed 109%CPU (0avgtext+0avgdata 3332068maxresident)k

[20:47] <timo> first is after, second is before

[20:56] <Geth> ¦ MoarVM/spesh_arg_refuse_for_enormous_slurpies: 62a5398105 | (Timo Paulssen)++ | src/spesh/args.c

[20:56] <Geth> ¦ MoarVM/spesh_arg_refuse_for_enormous_slurpies: Don't turn slurpies into huge amounts of code

[20:56] <Geth> ¦ MoarVM/spesh_arg_refuse_for_enormous_slurpies: 

[20:56] <Geth> ¦ MoarVM/spesh_arg_refuse_for_enormous_slurpies: For example, a file with a huge hash literal created with

[20:56] <Geth> ¦ MoarVM/spesh_arg_refuse_for_enormous_slurpies: the `infix:<,>` operator may end up with a callsite with

[20:56] <Geth> ¦ MoarVM/spesh_arg_refuse_for_enormous_slurpies: thousands of entries, and peak memory usage from register

[20:56] <Geth> ¦ MoarVM/spesh_arg_refuse_for_enormous_slurpies: facts and other stuff can balloon quite massively.

[20:56] <Geth> ¦ MoarVM/spesh_arg_refuse_for_enormous_slurpies: review: https://github.com/MoarVM/MoarVM/commit/62a5398105

[21:00] <Geth> ¦ MoarVM: timo++ created pull request #1921: Don't turn slurpies into huge amounts of code

[21:00] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1921

[21:01] <timo> lizmat: here's a fix, though i think it might still be better to have a begin block with a string constant that gets combed or something like that

[21:03] <lizmat> you mean, generate it all into a single string with \0 between entries, and then my constant %h = largestring.split("\0") ?

[21:31] <timo> for example, yeah

[22:06] *** [Coke] joined
[22:45] *** MasterDuke joined
[22:48] <MasterDuke> timo: where aren't we creating the MVMP6int correctly?

[22:49] <MasterDuke> because we only get iirc three of those ubsan errors, so not everything is wrong

[22:53] <MasterDuke> oh, and for flappers, there is one long-standing one

[22:55] <MasterDuke> can't remember the name now...

[23:01] <MasterDuke> ./S32-str/gb18030-encode-decode.t or ./S32-str/gb2312-encode-decode.t maybe?

[23:09] <MasterDuke> ah, i think it's t/02-rakudo/15-gh_1202.t !

[23:11] <MasterDuke> that's been flapping since at least 15 Sep 2019

[23:33] *** MasterDuke left
[23:39] *** sena_kun left
