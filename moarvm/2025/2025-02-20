[01:23] *** MasterDuke joined
[01:41] *** MasterDuke left
[01:43] *** MasterDuke joined
[01:47] <MasterDuke> timo: i'm not 100% sure that omitting a `if (repr_data->slot_type != MVM_ARRAY_OBJ) MVM_exception_throw_adhoc(tc, "MVMArray: atpos expected object register");` is safe

[01:48] <MasterDuke> there does appear to be a performance benefit, but not earth shattering

[01:49] <MasterDuke> `perf stat -r 5 ` when compiling CORE.c showed an average of `45636.11 msec task-clock` before and `44291.62 msec task-clock` after

[01:50] <MasterDuke> 376840131924 instructions before and 370807908625 after

[01:56] <MasterDuke> `44449.25 msec task-clock` and 372857380706 instructions with those checks added

[01:59] <timo> 45.6s vs 44.3s is significant

[01:59] <timo> the variants that skip the check for what the type of the array has for its slots must only be used when the slot type is already known beforehand

[02:00] <timo> ah, yes, either the functions in reprconv need to get that check, or all code that uses them has to do the check beforehand (less likely to be doable i think)

[02:01] <MasterDuke> ok, i'll pr this with the checks in

[02:02] <MasterDuke> i only did _[iso] because those were the most frequently hit, but i guess no harm in adding the others

[02:19] <MasterDuke> oh ugh. i need to check and handle all the different sizes of i, u, n

[02:19] <MasterDuke> this may end up not all that faster at all

[02:20] <timo> ah, in that case the i we have already might have to be called i64 instead

[02:20] <timo> i added those for devirtualization purposes for the jit, but they are also useful in deserialization code

[02:22] <MasterDuke> not sure i follow?

[02:25] <timo> at least i think that's why they exist? these shortcuts to directly get the repr functions from "inside" of the VMArray repr

[02:26] <timo> ok i think i misremembered. this is about vmarray_at_pos_int64 and friends, which you get via MVM_VMArray_find_fast_impl_for_jit

[02:26] <timo> that's something else

[03:09] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1914: Add type specialized VMArray atpos implementations

[03:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1914

[03:20] *** MasterDuke left
[04:00] <timo> MVM_repr_at_pos_s and MVM_repr_at_pos_o don't seem to check if the slot type is right

[04:01] <timo> oh the check is in the target function

[04:05] <timo> randomly,                 value->u64 = (MVMint64)body->slots.u64[body->start + real_index]; doesn't seem right? in terms of the cast that it uses? do we want to have the sign extension implications this has?

[09:39] *** gfldex left
[09:40] *** gfldex joined
[09:58] *** sena_kun joined
[11:16] *** lizmat left
[11:16] *** lizmat_ left
[11:17] *** lizmat joined
[11:26] *** Altai-man joined
[11:29] *** sena_kun left
[12:01] *** Geth joined
[17:19] <timo> https://wingolog.org/archives/2024/10/03/preliminary-notes-on-a-nofl-field-logging-barrier hmm.

[19:47] <lizmat> wonder what jnthn would have to say about that  :-)

[21:15] *** Altai-man left
[21:16] *** Altai-man joined
[22:42] <patrickb> There is no way for me to make changes to or call internal libuv functions from moar, right?

[22:43] <patrickb> Starting and managing a PTY child process on Windows is pretty annoying. Looking at what libuv does there means it's more than a few hundred lines of code only to start up the process let alone manage the lifetime.

[22:44] *** Altai-man left
[22:45] <patrickb> If I could somehow manage to use the libuv machinery would help loads. But we want to keep working with a system libuv.

[22:46] <patrickb> How bad would it be to try to call libuv internal functions?

[23:12] <lizmat> patrickb: if you can make it work by using libuv internal functions, wouldn't it make more sense to create a public function in libuv that would do that ?

[23:12] <lizmat> aka, contribute upstream ?

[23:33] <ugexe> https://github.com/libuv/libuv/issues/2640

