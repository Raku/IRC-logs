[00:00] *** sena_kun left
[03:04] *** Voldenet_ joined
[03:05] *** Voldenet left
[03:05] *** Voldenet_ is now known as Voldenet

[10:49] *** sena_kun joined
[18:43] *** MasterDuke joined
[18:45] <MasterDuke> jnthn: what is the "offset approach" mentioned in this TODO? https://github.com/MoarVM/MoarVM/blob/main/src/spesh/arg_guard.c#L505

[18:45] <tellable6> 2025-02-15T22:28:37Z #moarvm <jnthn> MasterDuke to be clear, MoarVM is already using the faster dominance algorithm

[18:45] <tellable6> hey MasterDuke, you have a message: https://gist.github.com/2fa0d6f36dd2616090729109f79a0966

[18:45] <MasterDuke> jnthn: thanks, good to know we don't need to spend time there

[18:48] <MasterDuke> timo: btw, where did we leave off with investigating how to reduce the number of get_attribute calls?

[18:56] <timo> i seem to recall we weren't getting facts about the actual type of objects, so couldn't optimize?

[19:00] <MasterDuke> hm. any thoughts on how to get better facts?

[19:05] <MasterDuke> bears eat beets. that's a nice fact, can we use that one?

[19:08] <timo> interesting. i'll forward that to our research department

[19:09] <timo> well, i've only looked at a few instances in the spesh log which unfortunately doesn't cross-reference trivially to counts of how often it's actually run

[19:09] <MasterDuke> i'm getting some logs now

[19:11] <timo> i mean we can see in the spesh log for how many frames we optimize the optimization doesn't trigger, but we can't see how often the resulting versions of the frames are called, nor how often the op in question is hit, for example if it's in a branch

[19:11] <timo> but i think you said you had a count of how often the MVM_repr_get_attribute or similar function was being called in total?

[19:13] <MasterDuke> yeah, trying to gist it now

[19:14] <MasterDuke> i put an `MVM_dump_backtrace(tc)` in all the getattr_* ops in interp.c

[19:14] <timo> ah, hehe.

[19:15] <timo> do you have something to count them up?

[19:15] <timo> i had a cool shell snippet for that but it fell off ot my history i think

[19:15] <MasterDuke> a bash function call `sus` (for sort | uniq | sort)

[19:15] <timo> sort allows you to use null instead of newline as line delimiter with -z

[19:16] <MasterDuke> i modified dump_backtrace to only print the first line

[19:16] <timo> you would probably want something that takes only the first line of the stack trace

[19:18] <MasterDuke> https://gist.github.com/MasterDuke17/6b46bec2e81ee88cc274b661dbbb0011

[19:31] <timo> anyone have the link to the userscript i made once that makes links to rakudo and nqp source files?

[19:31] <timo> ah! it's in my "starred" gists

[19:35] <MasterDuke> oh! i don't have that yet on this laptop, can you link it?

[19:38] <timo> that needs updates to work with links like NQP:: and such

[19:39] <timo> https://gist.github.com/timo/7cfe71a667bbdfa0dbd1510431da45a4

[19:40] <timo> it also still links to "master" instead of "main"

[19:41] <timo> fascinating, see how there's 142712 hits for the `nqp::getattr($how, Perl6::Metamodel::ClassHOW, '$!archetypes')` in ClassHOW.nqp

[19:45] <MasterDuke> yep

[19:50] <timo>   55403    at NQP::/home/dan/r/install/share/nqp/lib/MAST/Nodes.nqp:711 - this is a little bit odd though

[19:52] <MasterDuke> that's `$!bytecode := $current.bytecode;` in `end_subbuffer()`

[19:56] <timo> is that in a role?

[20:01] <MasterDuke> `class MAST::Frame is MAST::Node {`

[20:04] <timo> ok, it could be being called with a self that has something mixed in, which could cause this to not be optimized perhaps?

[20:12] <timo> ok please find the new revision of the linkify script at the same address

[20:16] <MasterDuke> hm, seems broken?

[20:17] <MasterDuke> i get no links now

[20:21] <timo> anything in the browser dev tools' log?

[20:24] <MasterDuke> Uncaught SyntaxError: missing name after . operator

[20:24] <MasterDuke>     Pt https://gist.github.com/timo/7cfe71a667bbdfa0dbd1510431da45a4:10

[20:24] <MasterDuke>     m https://gist.github.com/timo/7cfe71a667bbdfa0dbd1510431da45a4:21

[20:24] <MasterDuke>     c https://gist.github.com/timo/7cfe71a667bbdfa0dbd1510431da45a4:24

[20:24] <MasterDuke>     send https://gist.github.com/timo/7cfe71a667bbdfa0dbd1510431da45a4:24

[20:24] <MasterDuke>     oo https://gist.github.com/timo/7cfe71a667bbdfa0dbd1510431da45a4:18

[20:24] <MasterDuke>     send https://gist.github.com/timo/7cfe71a667bbdfa0dbd1510431da45a4:24

[20:24] <MasterDuke>     <anonymous> https://gist.github.com/timo/7cfe71a667bbdfa0dbd1510431da45a4:87

[20:24] <MasterDuke>     _ https://gist.github.com/timo/7cfe71a667bbdfa0dbd1510431da45a4:22

[20:30] <timo> must have done something wrong, maybe a copy-pasto? or something? so that it worked for me

[20:30] <timo> oh

[20:30] <timo> did you put the url as the URL to install from?

[20:31] <MasterDuke> no, i just copied the text

[20:33] <MasterDuke> recopied, still same

[20:34] <timo> https://gist.githubusercontent.com/timo/7cfe71a667bbdfa0dbd1510431da45a4/raw/Raku-Github-Linkify.js please try installing using this URL?

[20:34] <timo> meanwhile let me try to toss it out locally and re-install as well

[20:36] <MasterDuke> nope, still same

[20:37] <timo> ok now i no errors but also no links. i'll look into what's wrong

[20:41] <timo> violentmonkey doesn't show me the errors, but in the popup it does show that there is syntax errors apparently

[20:44] <MasterDuke> Error: Line 376: Unexpected token ILLEGAL maybe

[20:45] <MasterDuke> missing a backslash after 'vm'?

[20:48] <timo> yes that sounds like a possible reason

[20:48] <timo> i literally can't get a line number for the syntax error what a piece of trash %)

[20:50] <timo> ok let's try again

[20:51] <MasterDuke> hooray, tons of links

[20:56] <MasterDuke> https://github.com/raku/nqp/blob/main/NQP::src/vm/moar/QAST/QASTOperationsMAST.nqp#L170 isn't right

[20:57] <timo> ah dang i fixed that directly in the editor in my browser but not in the file?

[20:57] <timo> ah

[20:59] <timo> try now

[21:01] <MasterDuke> looks good

[21:08] <MasterDuke> guess i really should try to log the actual object and attribute name, that would help

[21:11] <timo> ... i should get back to runcy_funcy_opts ...

[21:35] *** MasterDuke left
[22:01] <timo> hrm. there is no way to signal from a reprop's spesh function that the optimizer should re-run for the instruction again when it was changed

[22:01] <timo> unless a change of the opcode is a good indicator maybe

[22:03] <timo> huh, i wonder if our current design can sometimes run off of a BB and into nothingness if an instruction is removed from the graph

[22:59] *** MasterDuke joined
[22:59] <MasterDuke> https://gist.github.com/MasterDuke17/960359bf5a26b927113556188af3b573 has some more info

[23:18] *** sena_kun left
[23:25] <timo> oh, there's of course also the possibility that we have optimized the *attr op in the frame, but we deoptimized somewhere in the frame before reaching that point

[23:36] <MasterDuke> might have a trivial pr for nqp to remove a small amount of getattr_*s

[23:42] *** MasterDuke left
