[00:01] *** sena_kun left
[00:03] *** sena_kun joined
[00:05] *** sena_kun left
[01:13] *** guifa left
[03:06] *** kjp left
[03:08] *** kjp joined
[03:10] *** xiaomiao left
[03:10] *** gfldex left
[03:10] *** bloatable6 left
[03:10] *** coverable6 left
[03:10] *** harrow left
[03:15] *** xiaomiao joined
[03:15] *** gfldex joined
[03:15] *** bloatable6 joined
[03:15] *** coverable6 joined
[03:15] *** harrow joined
[10:09] *** sena_kun joined
[12:04] *** guifa joined
[12:24] *** guifa left
[12:45] *** guifa joined
[14:35] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: 681eb074bf | (Timo Paulssen)++ | 8 files

[14:35] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: Make accesses to spesh arg guard atomic

[14:35] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: 

[14:35] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: This is an experiment to make moarvm freezing on

[14:35] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: ARM debian machines a thing of the past.

[14:35] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: 

[14:35] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: The theory is that other cores see the pointer to the

[14:35] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: new arg guard tree before they see all the data inside it,

[14:35] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: <…commit message has 6 more lines…>

[14:35] <Geth> ¦ MoarVM/atomic_accesses_to_spesh_arg_guard: review: https://github.com/MoarVM/MoarVM/commit/681eb074bf

[14:35] <timo> just a line i missed, force-pushed

[15:16] <lizmat> so, what to think of a piece of code that fails on Windows, but succeeds on Linux and MacOS

[15:16] <lizmat> and the way to make it succeed on Windows is to remove "constant" from 'my constant %foo = ....'

[15:18] <lizmat> https://github.com/lizmat/Text-Emoji/actions/runs/12770613744/job/35595871721

[15:20] <timo> can you get RMD turned on in that runner?

[15:24] <lizmat> hmmm... lemme see

[15:24] <lizmat> RAKUDO_MODULE_DEBUG=1 right?

[15:24] <timo> i think so

[15:31] <lizmat> can't do it in the yaml, trying another approach

[15:34] <lizmat> WTF, with RAKUDO_MODULE_DEBUG, it succeeds  :-(

[15:36] <timo> hahaha

[15:36] <timo> well, could be nondeterministic

[15:37] <lizmat> yeah, I wonder if it is some race condition that additional RMD processing is preventing from happening

[15:37] <timo> could be related to accidental output during compile time to stdout or stderr? i think only when RMD is set do we take output from the precompilation process?

[15:37] <lizmat> argh

[15:37] <lizmat> no, looked at the wrong one  :-(

[15:37] <lizmat> no visible difference

[15:39] <lizmat> argh, misspelled RMD

[15:40] <timo> number and order of environment variables can have an effect on program behaviour and performance, unfortunately

[15:40] <lizmat> https://github.com/lizmat/Text-Emoji/actions/runs/12771146240/job/35597592922

[15:43] <lizmat> the absence of a name in line 802 "(   )" is weird: that should be Text::Emoji

[15:44] <timo> > RMD: Precompiling C:\Users\RUNNER~1\AppData\Local\Temp/.zef.1736869173.4736\1736869175.4736.9404.634034198098\sources\9D3785E74CB5300C1C8530677B2A45CF25C84F2A failed: 3221225725

[15:44] <timo> 3221225725?

[15:44] <timo> is that like, the return code of the subprocess?

[15:44] <lizmat> I haz no idea

[15:44] <timo> m: say 3221225725.base(16)

[15:44] <camelia> rakudo-moar a66b2e161: OUTPUT: «C00000FD␤»

[15:44] <timo> there we go, that's helpful

[15:45] <timo> stack exhaustion. possibly an infinite recursion inside C code (since our raku-level stack actually lives on the heap)

[15:45] <timo> try turning spesh off please

[15:45] <lizmat> MVM_SPESH_DISABLE=1

[15:45] <lizmat> right?

[15:45] <timo> yep

[15:46] <timo> spesh is one of the not terribly many things in moarvm that can actually recurse

[15:47] <timo> the patch to limit recursion in spesh went in the release that you're using there, didn't it?

[15:48] <timo> | * | a041dd10f - spesh: don't deeply recurse into inline attempts (3 months ago) <timo>

[15:48] <linkable6> (2024-10-28) https://github.com/MoarVM/MoarVM/commit/a041dd10f2 spesh: don't deeply recurse into inline attempts

[15:49] <lizmat> Welcome to Rakudo™ v2024.12.

[15:49] <lizmat> so...  :-)

[15:49] <timo> it did make it in it looks like

[15:49] <timo> maybe there's something else, then.

[15:49] <timo> in any case, good to have something that cleanly reproduces

[15:50] <lizmat> added a command-line argument to the runner for convenience :-)

[15:51] <timo> yee-owch

[15:51] <timo> not a beautiful error messages there

[15:51] <lizmat> https://github.com/lizmat/Text-Emoji/actions/runs/12771339393/job/35598260703

[15:52] <lizmat> well, I think it's a symptom from the other thing we say: no module name

[15:52] <lizmat> argh

[15:52] <timo> why is it trying to generate the usage there

[15:53] <lizmat> yeah

[15:53] <timo> disable-spseh vs spesh-disable?

[15:53] <lizmat> yeah  :-(

[15:55] <timo> the syscall stat-flags or stat-is-executable might have a bug on windows

[15:55] <timo> those are per-platform

[15:56] <lizmat> but that would be noticeable on all Windows CI jobs, wouldn't it ?

[15:56] <timo> MVMint64 n = MVM_string_index_from_end(tc, stat_obj->body.filename, tc->instance->str_consts.dot, 0);

[15:56] <lizmat> it's only this particular module, that has two large constant 

[15:57] <lizmat> https://github.com/lizmat/Text-Emoji/actions/runs/12771419175/job/35598526897

[15:57] <lizmat> same error as before

[15:57] <timo> this here is quite possibly unrelated to the failure we were looking at before

[15:57] <timo> and only causes trouble when generating the usage in some cases

[15:57] <lizmat> argh... I should stop coding  :-(

[16:00] <timo> hm?

[16:00] <timo> out of time?

[16:00] <lizmat> nah... too many stoopid errors

[16:01] <timo> turning spesh off fixed the issue?

[16:01] <lizmat> passes with spesh disabled

[16:01] <lizmat> yup

[16:01] <timo> ok, please try with MVM_SPESH_INLINE_DISABLE=1 but not SPESH_DISABLE

[16:06] <lizmat> fails with inline disable

[16:11] <timo> interesting. then it's not that

[16:11] <timo> like, it's not another bug somewhere in inlining that i missed

[16:11] <timo> if we turn spesh logging on, is it possible to get the spesh log out? maybe only the last couple thousand lines?

[16:12] <lizmat> lemme see if I can put that in

[16:12] <lizmat> MVM_SPESH_LOG=filename right

[16:14] <timo> yes

[16:15] <timo> we need like the bat signal for windows using raku devs

[16:15] <lizmat> heh

[16:17] <lizmat> would you like the spesh log to be shown always if specified, or just if there were failures ?

[16:18] <timo> this would only be for when you `raku run-tests --with-speshlog` or something?

[16:18] <lizmat> yes

[16:19] <timo> probably fine for "just if there was a failure"

[16:19] <lizmat> 2000 lines ?

[16:20] <timo> not sure. probably fine

[16:21] <lizmat> say $spesh-log.lines(:!chomp).tail(2000).join;

[16:21] <timo> OK

[16:23] <timo> aha

[16:23] <lizmat> there;s your spesh log

[16:23] <timo> 1) that looks terrible, 2) we need more output

[16:24] <timo> and not just a little bit more

[16:24] <lizmat> all?

[16:24] <timo> 3700 more lines just to get to the next interesting bit. maybe the last 20k lines would be enough. but i don't know what the log will look like exactly.

[16:26] <lizmat> 20K coming up

[16:27] <timo> what the fuck is happening

[16:28] <lizmat> lemme remove the installing test

[16:29] <timo> oh.

[16:29] <timo> goodness ...

[16:29] <timo> try setting MVM_SPESH_NODELAY=1 and/or MVM_SPESH_BLOCKING=1 on your own machine and try running the same thing

[16:30] <timo> hm. no crash at least.

[16:31] <lizmat> with MVM_SPESH_LOG you mean?

[16:31] <lizmat> doesn't crash for me either

[16:31] <lizmat> I wonder if disabling the JIT would make a difference

[16:32] <timo> no need for the spesh log. my intuition was maybe wrong

[16:33] <timo> i find it maybe not a great idea to spesh functions where we have over nine thousand arguments

[16:36] <lizmat> especially at compile time  :-)

[16:36] <timo> well, that's not so much an issue i don't think

[16:37] <timo> we can maybe just disable the slurpy arguments optimization for "way too many arguments"

[16:37] <lizmat> disabling the JIT doesn't fix

[16:37] <lizmat> well, that code at compile time will never get hot, as it's only executed once ?

[16:41] <timo> yeah, without more output from the spesh log i can't tell why it got hot enough

[16:43] <timo> btw especially when precomp is involved, we might possibly not be looking at the right spesh log file. if you put a %d in the filename it'll make one per PID instead of having any additional moar processes overwrite it

[16:44] <lizmat> that feels like a good addition  :-)

[16:45] <timo> it's probably a lot of work to get a "custom" moar build into the github runner?

[16:46] <timo> turning spesh off for now could be an option. maybe only on windows, too.

[16:46] <lizmat> the version of Moar comes with the docker image, afaik

[16:47] <lizmat> if there'd be a Docker image with the most current version of everything and debugging enabled and such

[16:47] <lizmat> then it would be a simple change in the yaml ?

[16:47] <timo> i think docker on windows can only run linux stuff inside containers

[16:48] <timo> we're just downloading and extracting https://rakudo.org/dl/rakudo/rakudo-moar-2024.12-01-win-x86_64-msvc.zip

[16:50] <lizmat> not sure how that is specified in the yaml

[16:51] <timo> no, it's part of the setup-raku action implementation i assume

[16:51] <timo> SETTING::src/core.c/List.rakumod:1488 is not doing things optimally for sure here

[16:51] * lizmat looks

[16:51] <timo> ooooh

[16:52] <timo> it has to check if there is any Slip in there

[16:52] <timo> that sounds like we want to do an optimization in the QAST Optimizer of rakudo and dispatch to a different candidate of infix:<,> or even put the stuff in line without a call entirely

[16:53] <timo> hm, do we really have to copy the stuff from the vmargarray? can we nqp::splice instead of loop and bindpos?

[16:53] <timo> ah i misread

[16:54] <lizmat> that code was written by a lot less experienced /me

[16:54] <timo> we all learn :)

[16:54] <lizmat> ah, and that's being called with the large constant of course...  

[16:54] <lizmat> hmmm

[16:55] <timo> it might actually be being called by the optimizer at compile time

[16:55] <timo> OTOH, building the list with infix:<,> to then make a Hash out of that is also wasteful in the first place

[16:55] <lizmat> ok, lemme see if I can tweak that

[16:56] <lizmat> so what would be the best way to do that?

[16:56] <timo> not sure if we have something for that at the moment

[16:56] <lizmat> I don't think so either  :-)

[16:56] <lizmat> I could change it to make a lot of %h<foo> := value statements

[16:56] <lizmat> since that constant hash is generated from JSON

[16:57] <timo> could even just parse the json at precomp time and only put the resulting Hash in the result of the constant bla = do { ... }

[16:57] <timo> theoretcially, no need to go through raku code at all

[16:58] <lizmat> well, the JSON hash is not in the correct format

[16:58] <timo> the do block can do the necessary precomputation as well, or is it in a very wrong format?

[16:58] <lizmat> it has way more information than needed

[16:59] <lizmat> [

[16:59] <lizmat>   {

[16:59] <lizmat>     "emoji": "😀"

[16:59] <lizmat>   , "description": "grinning face"

[16:59] <lizmat>   , "category": "Smileys & Emotion"

[16:59] <lizmat> etc etc ect

[16:59] <timo> OK

[16:59] <timo> how about code that looks like one string constant for keys, one string constant for values, then two calls to .split() to generate two lists and shift() both lists in lockstep and assign the results

[17:00] <timo> and all that happens inside the constant's do block

[17:00] <timo> no need to generate code for a frame that has a couple thousand assignments in it

[17:02] <timo> still not sure what actually causes the stack overflow on windows

[17:03] <lizmat> well, spesh, as with it disabled it doesn't crash ?

[17:03] <timo> well, yeah, but spesh is big :)

[17:03] <timo> .o( oooh big spesh )

[17:03] <lizmat> since this is Windows only, I wonder C-compiler setting for stack size ?

[17:03] <timo> there is a setting for initial stack size that we had to bump up for musl-libc long ago

[17:04] <timo> that's the initial stack size of additional threads

[17:04] <lizmat> ok, lemme rework the initialization without a large list

[17:05] <timo> ah the spesh log actually gives me an idea

[17:09] <timo> i wish i could just get a debug session, or just a static debug printf into this stupid worker

[17:14] <timo> i'd like to see if the failure / error code with speshlog was still 3221225725, so could you turn spesh log and RMD back on?

[17:22] <lizmat> ah, I just reworked it without the list

[17:22] <timo> is it better?

[17:22] <lizmat> without the long list it doesn't crash on Windows

[17:23] <lizmat> but takes siginificantly longer to compile

[17:23] <timo> we can postpone the debugging. we'll want to have a branch or tag or maybe just the commit sha1 so we can reference it from a github issue

[17:23] <lizmat> ok, going to stash that

[17:23] <lizmat> and then run with with speshlog and rmd back on

[17:25] <timo> would you like to give the "long string + split + shift" suggestion a try?

[17:26] <lizmat> no, because that can't work

[17:26] <timo> can't?

[17:26] <lizmat> some emojis have several aliases

[17:26] <lizmat> so split won't cut it

[17:27] <timo> can just put the same emoji in the list multiple times

[17:29] <lizmat> https://github.com/lizmat/Text-Emoji/actions/runs/12773082757/job/35604124480

[17:30] <timo> m: say 3221225725.base(16)

[17:30] <camelia> rakudo-moar a66b2e161: OUTPUT: «C00000FD␤»

[17:31] <timo> right. ok.

[17:31] <timo> hm. so it actually succeeded in compiling and then before doing anything else with spesh crashed?

[17:31] <lizmat> looks like

[17:31] <timo> can i get one with SPESH_BLOCKING as well maybe?

[17:32] <lizmat> I wonder: would it help if I ran another script *without logging* before so it would get precompiled ?

[17:32] <lizmat> sure

[17:35] <timo> might help, but depends on what exactly we're trying to do right now; do we a) want to get your module to compile reliably also under windows, b) figure out what exactly causes the crash and maybe how to reproduce it outside of windows, c) something else?

[17:35] <lizmat> b I'd say

[17:35] <lizmat> because this could be a symptom of a deeper problem on Windows ?

[17:36] <lizmat> I can tell windows users to install that module with MVM_SPESH_DISABLE=1

[17:37] <lizmat> and I can make it CI clean with --spesh-disable in the yaml

[17:37] <lizmat> https://github.com/lizmat/Text-Emoji/actions/runs/12773213522/job/35604553576

[17:47] <lizmat> dinner&

[17:51] <timo> ok. yeah, i'm not sure why it'd crash at that moment, though it's possible there's still text in the internal buffer that the process has for the spesh log that haven't been flushed to the file at the time of the crash

[18:07] <lizmat> doesn't it flush immediately ?

[18:13] <timo> no, there's explicit flush statements, and much of the code uses a custom little buffer appender thingie to construct the strings for parts of the spesh log

[18:21] <lizmat> ah, too bad... so no black box  :-(

[18:21] <timo> and anything to change that also has to go through some kind of build cycle to even arrive at the github actions runner

[18:23] <lizmat> right

[18:59] *** timo left
[19:04] *** timo joined
[19:51] <lizmat> timo: re infix<,>, looked at reducing bytecode size of it, but it appears to always be above the limit for inlining

[19:51] <lizmat> so there's little point in trying to shift code around

[19:52] <timo> OK

[19:55] <timo> well, we do generate bytecode in spesh based on the actual args passed for slurpy arrays right

[19:55] <timo> if the callsite has a load of arguments, it'll certainly be above the threshold already by itself

[19:56] <lizmat> also for (|) signature ?

[19:57] <timo> yes

[19:57] <lizmat> how can it now at compile time whether it'd be 2 or 2000 args ?

[19:58] <lizmat> *know

[19:58] <timo> that's at spesh time

[19:58] <timo> we spesh based on a given callsite

[19:58] <lizmat> aahh... ok *phew*  :-)

[19:58] <lizmat> so maybe spesh should give up after X ?

[19:58] <timo> yeah, i'd put a limit. can be high, like 2000 or so

[19:59] <lizmat> why that high?  I'd say these cases would occur generally only once in the lifetime of a process, or at compile time

[19:59] <lizmat> which I guess is the same  :-)

[20:06] <timo> right, it would be interesting to see at what point it's beneficial to generate the code and when it's better to keep the regular slurpy positional / slurpy named op as is

[20:07] <timo> for small values it can be interesting since spesh then knows a little bit about what's in the hash or array

[20:11] <lizmat> fwiw, would it be useful at that level if there were an immutable version of nqp::list ?

[20:20] <timo> not sure. escape analysis can at this point recognize when the array or hash has been created and not modified and not yet passed to any other places

[20:26] <lizmat> ack

[20:43] <timo> we don't do much with that yet, i had a branch runcy_funcy_optimizations which did a little bit more with the arrays and hashes that came from slurpy ops, but not very much

[20:56] <lizmat> sanity check:

[20:56] <lizmat> 1. nuke install dir

[20:56] <lizmat> 2. build Rakudo from scratch

[20:56] <lizmat> 3. goto zef dir, and do `raku -I. bin/zef install . --/test`

[20:57] <lizmat> 4, rename .precomp to .precomp-old

[20:57] <lizmat> 5. go back to rakudo root, nuke install dir

[20:58] <lizmat> 6. build Rakudo from scratch (with --gen-moar --make-install BTW, in both cases)

[20:58] <lizmat> 7 goto zef dir, and do `raku -I. bin/zef install . --/test`

[20:58] <lizmat> after that, should the binary files in .precomp and .precomp-old be identical ?

[20:59] <lizmat> in my case, they are not  :-(

[21:02] <timo> yeah rakudo is currently not reproducible

[21:03] <timo> the .moarvm files of rakudo are part of the dependency lists in the precompilation results

[21:03] <timo> so their own hashes should also change

[21:05] <lizmat> I thought nine had done a lot of work to make them reproducible ?

[21:05] <lizmat> (or nine_)

[21:05] <timo> yep, we're about one step away from reaching the goal

[21:06] <timo> i believe nine did a lot elready, i added a bit more a few months ago

[21:06] <lizmat> I see

[21:07] <timo> there's still a case where a few frames in - i think core.c.setting? - change their order

[21:08] <lizmat> it is *very* annoying, because sometimes if I don't nuke the .precomp in the zef dist, it crashes trying to install zef

[21:08] <timo> so if a precompiled file were to attempt to call any of the frames that have changed their index between one version of this file and the other

[21:08] <lizmat> yup big bada boom

[21:09] <timo> yeah that sounds bad, indeed

[21:09] <lizmat> fortunately, not many users run this scenario  :)

[21:09] <lizmat> but I do, a lot  :(

[21:10] <timo> i think we might have the case that the blib/ or runtime/ moarvm files which don't have a sha1 in their name or path, they just get used whatever they are

[21:10] <timo> and there is no check for compatibility there

[21:10] <timo> so if you overwrite them by doing a rebuild and make install, then it just blindly uses the file

[21:10] <timo> then runs into some change and explodes

[21:10] <timo> instead of realizing up front that the dependency isn't valid any more in order to do a re-precompilation

[21:12] <lizmat> yeah, feels like something like that

[21:16] <timo> i have a prototype for exploding more helpfully, but it's not baked through yet

[21:37] <lizmat> afk&

[23:41] *** sena_kun left
