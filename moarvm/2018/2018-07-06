[01:08] *** lizmat left
[01:39] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #896: Add parens to expressions to silence clang warning

[01:39] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/896

[01:49] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #897: Add pragma to switch to silence clang warning

[01:49] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/897

[02:18] *** Kaiepi left
[02:20] *** Kaiepi joined
[05:08] *** Kaiepi left
[05:09] *** Kaiepi joined
[05:13] *** Kaiepi left
[05:13] *** Kaiepi joined
[05:25] *** brrt joined
[05:30] <brrt> \o

[05:50] *** stmuk joined
[05:52] *** stmuk_ left
[05:57] *** Kaiepi left
[05:58] *** Kaiepi joined
[06:23] *** kanopis joined
[06:23] *** kanopis left
[06:24] *** robertle_ left
[06:24] *** kanopis joined
[06:42] *** domidumont joined
[06:48] <Geth> Â¦ MoarVM: 513000322d | (Bart Wiegmans)++ | 2 files

[06:48] <Geth> Â¦ MoarVM: Revert "Revert "Implement JIT template for ctxcallerskipthunks""

[06:48] <Geth> Â¦ MoarVM:

[06:48] <Geth> Â¦ MoarVM: This reverts commit f66ebd4bdb45ee25cdda29d48a0c7eb7cd066d36.

[06:48] <Geth> Â¦ MoarVM:

[06:48] <Geth> Â¦ MoarVM: Problem was in raw fragment with labels pointing out of the code.

[06:48] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/513000322d

[06:48] *** domidumont left
[06:49] *** domidumont joined
[07:10] *** travis-ci joined
[07:10] <travis-ci> MoarVM build errored. Bart Wiegmans 'Revert "Revert "Implement JIT template for ctxcallerskipthunks""

[07:10] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/400755711 https://github.com/MoarVM/MoarVM/compare/434e4950a77f...513000322dc5

[07:10] *** travis-ci left
[07:12] *** brrt left
[07:16] *** brrt joined
[07:30] *** domidumont left
[07:30] *** domidumont joined
[08:12] *** zakharyas joined
[08:52] <brrt> hmm, completely removing auto-casting may be impossible as we often rely on compile-time information of the sizes of operands

[08:52] <brrt> I know of a way to fix that but...

[09:14] <Geth> Â¦ MoarVM/jit-expr-refactor: 7 commits pushed by (Bart Wiegmans)++

[09:14] <Geth> Â¦ MoarVM/jit-expr-refactor: 6b788bd148 | [JIT] Adhoc template application

[09:14] <Geth> Â¦ MoarVM/jit-expr-refactor: 8d0b6b5174 | Remove op_info pointer

[09:14] <Geth> Â¦ MoarVM/jit-expr-refactor: 26506b2a63 | Document the conditional dependency check

[09:14] <Geth> Â¦ MoarVM/jit-expr-refactor: e830ae72e4 | Move label assignment to tiler

[09:14] <Geth> Â¦ MoarVM/jit-expr-refactor: 89891f3bae | Add CONST_PTR indirection

[09:14] <Geth> Â¦ MoarVM/jit-expr-refactor: 20aa4db02d | [JIT] Remove 'value type' enum

[09:14] <Geth> Â¦ MoarVM/jit-expr-refactor: 23db4edcbc | [JIT] Parse oplist as a module

[09:14] <Geth> Â¦ MoarVM/jit-expr-refactor: review: https://github.com/MoarVM/MoarVM/compare/a75746fa90a7...23db4edcbcea

[09:21] *** lizmat joined
[09:23] *** brrt left
[10:05] *** stmuk_ joined
[10:07] *** stmuk left
[10:48] *** brrt joined
[10:55] *** zakharyas left
[11:28] *** lizmat left
[11:48] *** lizmat joined
[12:23] *** zakharyas joined
[12:24] *** Kaiepi left
[12:29] *** Kaiepi joined
[12:58] *** zakharyas left
[12:59] *** brrt left
[12:59] *** brrt joined
[13:01] *** zakharyas joined
[13:05] *** synopsebot_ left
[13:05] *** synopsebot joined
[13:10] *** lizmat left
[13:17] *** brrt left
[13:19] *** lizmat joined
[13:22] *** domidumont left
[13:24] *** domidumont joined
[13:42] <Geth> Â¦ MoarVM: 930fd477e6 | (Jonathan Worthington)++ | src/spesh/facts.c

[13:42] <Geth> Â¦ MoarVM: More precise handling of reads of deopt-marked ins

[13:42] <Geth> Â¦ MoarVM:

[13:42] <Geth> Â¦ MoarVM: Previously, we would consider reads by an instruction that might deopt

[13:42] <Geth> Â¦ MoarVM: post-optimization as if they were being read after that deoptimization,

[13:42] <Geth> Â¦ MoarVM: and so could preserve write instructions for the sake of deopt when

[13:42] <Geth> Â¦ MoarVM: there was no need to do so. With this change, we will not. This allows

[13:42] <Geth> Â¦ MoarVM: a small number of additional instruction deletions. For example, the

[13:42] <Geth> Â¦ MoarVM: <â€¦commit message has 5 more linesâ€¦>

[13:42] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/930fd477e6

[13:43] <jnthn> It's something :)

[13:43] <yoleaux> 13:03Z <Zoffix> jnthn: reminder that you're listed as a stakeholder for "start in sink attaches error handler" feature for 6.d: https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#make-start-blocks-in-sink-context-attach-an-error-handler

[13:43] <jnthn> ooh, I still want to do that :)

[13:44] <jnthn> I can also reproduce the NQP compile crash with JIT disabled

[13:45] <timotimo> wow, small change to make that work

[13:46] <jnthn> Next week I'll also

[13:46] <jnthn> 1. Separate out the "deopt usages" form the normal usages, so we can see the difference

[13:47] <jnthn> 2. Use that to let us be far more aggressive if we end up with no instructions at all that might deopt in the result

[13:51] <jnthn> No SEGV without JIT in 24d3b5b. SEGV in 5ef61a7.

[13:51] <jnthn> The one commit between them is a documentation patch.

[13:52] <jnthn> Yeah, it's 5ef61a7.

[13:53] <jnthn> No idea why, or how on earth it can magically work under the JIT

[13:54] <jnthn> But obj is null.

[13:54] <jnthn> In shift_o

[13:55] <timotimo> how does it handle the case where MVM_spesh_args isn't being called by args_from_callinfo?

[13:55] <timotimo> it just doesn't do optimizations?

[13:56] <jnthn> Well, on the normal path we have the type tuple available and it sources the data from that

[13:57] <jnthn> ah, world up time, bbl :)

[13:57] <jnthn> *cup :)

[13:57] <timotimo> ah!

[13:57] <timotimo> i thought the world was going to end

[13:57] <timotimo> and i was wondering how you'd manage to "be back"

[14:00] *** robertle left
[14:02] *** travis-ci joined
[14:02] <travis-ci> MoarVM build failed. Jonathan Worthington 'More precise handling of reads of deopt-marked ins

[14:02] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/400891053 https://github.com/MoarVM/MoarVM/compare/513000322dc5...930fd477e646

[14:02] *** travis-ci left
[14:14] *** brrt joined
[14:36] *** lizmat left
[14:44] *** lizmat joined
[14:50] *** robertle joined
[14:54] <Geth> Â¦ MoarVM: ef41080c10 | (Bart Wiegmans)++ | 2 files

[14:54] <Geth> Â¦ MoarVM: [JIT] Use '^addrf' macro for setf, getf

[14:54] <Geth> Â¦ MoarVM:

[14:54] <Geth> Â¦ MoarVM: For consistency

[14:54] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ef41080c10

[14:54] <brrt> i'm a bit stuck on cast insertion

[14:55] <brrt> a): it works now, and it is useful (it allows you to write templates without much concern for the size of operands)

[14:56] <brrt> b): it requires a (partially redundant) walk of the tree directly after tree assembly

[14:56] <brrt> c): which prevents us from assigning sizes to nodes during the template precompilation phase

[14:57] <brrt> d): and makes it harder to correctly optimize the code (as you'll have to take into account operand sizes)

[15:04] *** lizmat left
[15:06] *** Kaiepi left
[15:07] *** Kaiepi joined
[15:12] *** travis-ci joined
[15:12] <travis-ci> MoarVM build failed. Bart Wiegmans '[JIT] Use '^addrf' macro for setf, getf

[15:12] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/400921292 https://github.com/MoarVM/MoarVM/compare/930fd477e646...ef41080c105f

[15:12] *** travis-ci left
[15:21] *** domidumont left
[15:56] *** zakharyas left
[16:14] <Geth> Â¦ MoarVM/in-situ-strings: 6 commits pushed by (Timo Paulssen)++, (Bart Wiegmans)++

[16:14] <Geth> Â¦ MoarVM/in-situ-strings: fce9f2f883 | store short strings inside string's body

[16:14] <Geth> Â¦ MoarVM/in-situ-strings: 58a07f91d4 | teach string_char_at_in_string about in_situ

[16:14] <Geth> Â¦ MoarVM/in-situ-strings: d547be2ce8 | remove left-over debugging, MasterDuke++

[16:14] <Geth> Â¦ MoarVM/in-situ-strings: ecaad08407 | create in situ for nqp::chr if it fits into 8bit.

[16:14] <Geth> Â¦ MoarVM/in-situ-strings: 1c77969839 | add a 32bit in-situ storage for up to 2 graphemes

[16:14] <Geth> Â¦ MoarVM/in-situ-strings: 0675c3956a | Rebasefixes

[16:14] <Geth> Â¦ MoarVM/in-situ-strings: review: https://github.com/MoarVM/MoarVM/compare/c0f08d3a46c8...0675c3956acd

[16:30] <brrt> ^ rebase

[16:30] *** brrt left
[16:43] *** domidumont joined
[16:43] <dogbert17> .seen samcv

[16:43] <yoleaux> I saw samcv 13:03Z in #perl6: <samcv> so there may not be a way to do that yet

[16:44] <dogbert17> looks as if the MoarVM build is broken on 32 bit systems atm

[16:54] <dogbert17> .tell samcv commit 3ef2acf0f breaks the build on 32 bit systems

[16:54] <yoleaux> dogbert17: I'll pass your message to samcv.

[16:57] <dogbert17> .tell samcv take a look at https://gist.github.com/dogbert17/ab6953e0fdcdeea1400d0dcdf984bf60

[16:57] <yoleaux> dogbert17: I'll pass your message to samcv.

[17:08] <Geth> Â¦ MoarVM: ugexe++ created pull request #898: Remove unnecessary MVMROOT

[17:08] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/898

[17:15] *** domidumont left
[18:32] *** Kaiepi left
[18:35] *** Kaiepi joined
[18:46] *** robertle left
[19:13] <samcv> dogbert17: is there a way i can build 32 bit mvm on a 64 bit computer

[19:13] <yoleaux> 16:54Z <dogbert17> samcv: commit 3ef2acf0f breaks the build on 32 bit systems

[19:13] <yoleaux> 16:57Z <dogbert17> samcv: take a look at https://gist.github.com/dogbert17/ab6953e0fdcdeea1400d0dcdf984bf60

[19:16] <geekosaur> would have to install a 32-bit toolchain in wow

[20:02] <Geth> Â¦ MoarVM: a3e38fd823 | (Samantha McVey)++ | src/strings/uthash.h

[20:02] <Geth> Â¦ MoarVM: Fix the 32 bit build

[20:02] <Geth> Â¦ MoarVM:

[20:02] <Geth> Â¦ MoarVM: It got broken with the newest hash changes due to an ommited #define

[20:02] <Geth> Â¦ MoarVM: line.

[20:02] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a3e38fd823

[20:05] <dogbert17> samcv++, that was quick :)

[20:20] *** travis-ci joined
[20:20] <travis-ci> MoarVM build failed. Samantha McVey 'Fix the 32 bit build

[20:20] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/401034468 https://github.com/MoarVM/MoarVM/compare/ef41080c105f...a3e38fd82338

[20:20] *** travis-ci left
[20:51] *** lizmat joined
[21:38] <samcv> timotimo: i've been thinking about the robin hood hashing a lot today

[21:39] <timotimo> have we discussed this before? i don't seem to remember

[21:39] <samcv> and we would need to make changes to the implementation (compared to the "I made the fastest hash table" post. Since it suffers an issue if hashes get put into the same location, or near

[21:40] <samcv> when you reach the limit you expand the table, and that would run us out of memory during an attack. what i propose would be to have a slow path, which allows us to have variable length sections of the table

[21:40] <timotimo> that was something distinct from the presentation that advocated linear scans over bucket lists?

[21:40] <samcv> uh well similar

[21:41] <samcv> linear scans don't reorder anything while robin hood reorders things so they are as close as possible to where they are "supposed" to me

[21:41] <samcv> *be

[21:42] <samcv> though alternatively we could not have a slow path and just let things flow over on attack, though usually we will have max 4 or so items per position. and resize when there's no more room in the array near that position

[21:43] *** MasterDuke left
[21:43] <timotimo> what do you mean by "let things flow over"?

[21:44] <jnthn> samcv: Does that approach results in read operations potentially becoming write operations?

[21:44] <samcv> well go past where they should ideally be

[21:44] <timotimo> ah, yes

[21:44] <jnthn> I forget the exact idea, but have vague memories of robin hood hashing doing that

[21:44] <samcv> and so we'd resize if it fills the section, and in normal course that is fine

[21:44] <samcv> jnthn: uh not sure

[21:44] <samcv> what you mean

[21:45] <samcv> but i would want poisoned sections to not impact performance of non-poisoned sections

[21:45] <timotimo> if a read on the hash table can cause it to change internally, we can no longer say concurrent read access is safe

[21:45] <jnthn> My vague recollection of robin hood hashing is that a lookup in the hash might move things

[21:45] <samcv> so in a linked list that is not an issue, only 'poisoned' buckets will be slower

[21:45] <samcv> jnthn: only insertion

[21:46] <jnthn> OK. So long as we don't make read operations into write operations, it's OK.

[21:46] <jnthn> We must be able to safely read from a hash that's not being mutated from many threads.

[21:46] <jnthn> I must have misremembered what robin hood hashing does, so false alarm :)

[21:46] <samcv> but the issue with open addressing is: you can make a timing attack, and just try to keep hitting the same area

[21:47] <samcv> and that is not totally avoidable. but we just need to make sure that it doesn't slow down non-poisoned sections

[21:49] <samcv> jnthn: though slightly a side note: this script spends almost all its time in garbage collection https://gist.github.com/84266a6b5fc34af0ebd2470f5fc24937

[21:49] <samcv> 67%

[21:50] <jnthn> o.O

[21:50] *** MasterDuke joined
[21:50] <jnthn> That's...more than a little unusual

[21:50] <timotimo> is there a lot of red and orange in the profiler's gc tab?

[21:50] <jnthn> oh, wait...a million element hash?

[21:50] <samcv> yes but that's not the main issue

[21:51] <timotimo> does it take long to iterate over a hash that's mostly empty?

[21:51] <samcv> every addition to the hash causes an allocation

[21:51] <samcv> of a new string

[21:51] <jnthn> Right, that's not surprising.

[21:51] <jnthn> Since hashes have string keys, so it has to coerce

[21:51] <samcv> but the script adds a million items, then deletes every 2nd item. then adds them back, deletes every 3rd item, adds it back etc

[21:51] <timotimo> right, because they all stick around

[21:51] <timotimo> they all stick around, so they all go in the old generation

[21:52] <timotimo> that means the nursery won't actually shrink much from doing a gc run

[21:52] <jnthn> Yeah, that can indeed be a problem

[21:52] <timotimo> same problem when you make a list of a few million Int objects

[21:52] <jnthn> The second problem is that the hash keeps pointing to new nursery entries

[21:52] <jnthn> And so it has to be walked in full every single GC run

[21:53] <jnthn> https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43823.pdf

[21:53] <timotimo> yeah, that would help

[21:54] <timotimo> we'd know to immediately be allocating in the gen2 and would barely run gc at all

[21:56] <jnthn> Indeed

[21:58] <samcv> anyway this is the burn down https://a.uguu.se/XAA2lr4GjZfD.png

[21:58] <samcv> or flame graph

[21:59] <timotimo> i'd assume it gets a little confused by the jit

[21:59] <samcv> though not sure why it's doing MVM_coerce_n_s

[21:59] <samcv> since it should be an int

[21:59] <jnthn> I said that a moment ago. Hash keys are always strings.

[21:59] <samcv> ah

[21:59] <samcv> wait what does that have to do with nums?

[22:00] <timotimo> we tend to "smart_numify" everything everywhere

[22:00] <timotimo> and that makes nums

[22:00] <jnthn> That's a good question. Probably NQP's fondness for nums...which we probably want to kill off.

[22:00] <samcv> though you'd see something similar with MVM_coerce_i_s afaik

[22:00] <timotimo> i'd like it to be gone

[22:00] <timotimo> i'd say run it again with MVM_JIT_DISABLE

[22:01] <jnthn> Yes

[22:02] <jnthn> Hmm, why is so much time in gc_free which in turn calls HASH_ITER_FIRST_ITEM?

[22:03] <samcv> well it must be doing something with a hash iterator. and that's the only that shows up because most are macros

[22:03] <jnthn> If it was gc_mark I'd understnad it

[22:03] <samcv> i haven't pushed HASH_ITER_FIRST_ITEM as a static inline

[22:03] <jnthn> Because the GC has to iterate the hash

[22:03] <jnthn> To know what's in it

[22:03] <jnthn> free does too to free it but I don't see where the hash is freed

[22:04] <jnthn> Unless at program termination but then it'd not be under MVM_coerce_n_s

[22:04] <jnthn> Oh, the stack trace looks odd in other ways too

[22:04] <timotimo> i think it's only below coerce_n_s because the jit confuses stack frames

[22:04] <jnthn> Yeah, think you're right

[22:05] <Geth> Â¦ MoarVM: 4373eecdc5 | (Jonathan Worthington)++ | 4 files

[22:05] <Geth> Â¦ MoarVM: Store deopt usage separate from normal usage

[22:05] <Geth> Â¦ MoarVM:

[22:05] <Geth> Â¦ MoarVM: So that we can understand which things are kept alive for deopt and

[22:05] <Geth> Â¦ MoarVM: which are being used for real. There's no behavior change from this,

[22:05] <Geth> Â¦ MoarVM: it's simply making it clearer to see what lives only for the sake of

[22:05] <Geth> Â¦ MoarVM: deopt in the spesh log. However, keeping this information separately

[22:05] <Geth> Â¦ MoarVM: will allow us to do some further opts in the future.

[22:05] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4373eecdc5

[22:05] <samcv> well it looks pretty similar without jit

[22:06] <samcv> though you can test it yourself and maybe you'll notice more than me

[22:06] <jnthn> Yeah, will have a look.

[22:06] <jnthn> Something looks a bit off

[22:06] <jnthn> As in, it feels like there's more going on that the things I know about

[22:07] <MasterDuke> jnthn: you had some fix recently (related to inlining perhaps) that you said might be applicable to the profiler

[22:08] <samcv> i mean i though the biggest issue with adding so many things to the hash would be having to FSA every hash entry and then freeing after removing. but it turned out differently

[22:08] <timotimo> reading line annotation strings from the wrong compunit?

[22:08] <MasterDuke> timotimo: that sounds plausible

[22:08] <samcv> though it seems to create and destroy a crazy amount of hashes

[22:09] <samcv> since HASH_MAKE_TABLE is usually never visible

[22:09] <jnthn> MasterDuke: Yes, timotimo would know if the profile also has that issue

[22:09] <timotimo> i think that's not a problem as the instrumentation happens to the bytecode before spesh runs

[22:09] <timotimo> so there won't have been inlines

[22:09] <samcv> it's just when the hash expands since that happens many times for one hash, instead of once

[22:09] * jnthn afk for a bit

[22:23] *** travis-ci joined
[22:23] <travis-ci> MoarVM build failed. Jonathan Worthington 'Store deopt usage separate from normal usage

[22:23] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/401076856 https://github.com/MoarVM/MoarVM/compare/a3e38fd82338...4373eecdc556

[22:24] *** travis-ci left
[22:47] *** lizmat left
