[00:09] <Geth> Â¦ MoarVM/nummy-num: 337cf380d7 | (Zoffix Znet)++ | src/strings/parse_num.c

[00:09] <Geth> Â¦ MoarVM/nummy-num: Remove trailing whitespace

[00:09] <Geth> Â¦ MoarVM/nummy-num: review: https://github.com/MoarVM/MoarVM/commit/337cf380d7

[00:46] <Geth> Â¦ MoarVM: 7349b428fb | (Timo Paulssen)++ | src/debug/debugserver.c

[00:46] <Geth> Â¦ MoarVM: have to use FSA consistently for this field

[00:46] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7349b428fb

[00:46] <Geth> Â¦ MoarVM: c6aba84d3a | (Timo Paulssen)++ | src/debug/debugserver.c

[00:46] <Geth> Â¦ MoarVM: don't use %b in format string

[00:46] <Geth> Â¦ MoarVM:

[00:46] <Geth> Â¦ MoarVM: in not-so-important debug output

[00:46] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c6aba84d3a

[01:56] *** ilbot3 joined
[02:53] <Geth> Â¦ MoarVM/nummy-num: c6c0bab915 | (Zoffix Znet)++ | src/strings/parse_num.c

[02:53] <Geth> Â¦ MoarVM/nummy-num: Fix denormals and precision issues in num parser

[02:53] <Geth> Â¦ MoarVM/nummy-num:

[02:53] <Geth> Â¦ MoarVM/nummy-num: With the original method we had problems with handling denomals

[02:53] <Geth> Â¦ MoarVM/nummy-num: (so e.g. 5e-324 ended up as 0e0) and had precision issues where

[02:53] <Geth> Â¦ MoarVM/nummy-num: NOT the closest representable num was generated for a given string,

[02:53] <Geth> Â¦ MoarVM/nummy-num: which causes value drift in repeated num->str roundtripping.

[02:53] <Geth> Â¦ MoarVM/nummy-num:

[02:53] <Geth> Â¦ MoarVM/nummy-num: <â€¦commit message has 8 more linesâ€¦>

[02:53] <Geth> Â¦ MoarVM/nummy-num: review: https://github.com/MoarVM/MoarVM/commit/c6c0bab915

[03:04] <Geth> Â¦ MoarVM: zoffixznet++ created pull request #850: Nummy num

[03:04] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/850

[03:04] <Geth> Â¦ MoarVM: 337cf380d7 | (Zoffix Znet)++ | src/strings/parse_num.c

[03:04] <Geth> Â¦ MoarVM: Remove trailing whitespace

[03:04] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/337cf380d7

[03:04] <Geth> Â¦ MoarVM: c6c0bab915 | (Zoffix Znet)++ | src/strings/parse_num.c

[03:04] <Geth> Â¦ MoarVM: Fix denormals and precision issues in num parser

[03:04] <Geth> Â¦ MoarVM:

[03:04] <Geth> Â¦ MoarVM: With the original method we had problems with handling denomals

[03:04] <Geth> Â¦ MoarVM: (so e.g. 5e-324 ended up as 0e0) and had precision issues where

[03:04] <Geth> Â¦ MoarVM: NOT the closest representable num was generated for a given string,

[03:04] <Geth> Â¦ MoarVM: which causes value drift in repeated num->str roundtripping.

[03:04] <Geth> Â¦ MoarVM:

[03:04] <Geth> Â¦ MoarVM: <â€¦commit message has 8 more linesâ€¦>

[03:04] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c6c0bab915

[03:04] <Geth> Â¦ MoarVM: 517e26f045 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/strings/parse_num.c

[03:04] <Geth> Â¦ MoarVM: Merge pull request #850 from MoarVM/nummy-num

[03:04] <Geth> Â¦ MoarVM:

[03:04] <Geth> Â¦ MoarVM: Nummy num

[03:04] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/517e26f045

[05:01] <Geth> Â¦ MoarVM: Kaiepi++ created pull request #851: Fix installs having an outdated version

[05:01] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/851

[06:16] *** domidumont joined
[06:23] *** domidumont joined
[06:44] *** robertle joined
[07:18] *** lizmat joined
[07:37] *** brrt joined
[07:42] <Geth> Â¦ MoarVM/jit-stack-walker: 5 commits pushed by (Bart Wiegmans)++

[07:42] <Geth> Â¦ MoarVM/jit-stack-walker: f0c6866e5f | [JIT] Initial stack walker to find current position in frame

[07:42] <Geth> Â¦ MoarVM/jit-stack-walker: 19eb936c4e | [JIT] Extract JIT interface module

[07:42] <Geth> Â¦ MoarVM/jit-stack-walker: 044fc4ebf2 | [JIT} Implement find_active_handlers

[07:42] <Geth> Â¦ MoarVM/jit-stack-walker: 5ae2b27552 | [JIT] Extract current position search frm exception handler lookup

[07:42] <Geth> Â¦ MoarVM/jit-stack-walker: 451d6e4d6f | [JIT] Improve stack walker to use top-of-stack

[07:42] <Geth> Â¦ MoarVM/jit-stack-walker: review: https://github.com/MoarVM/MoarVM/compare/f0c6866e5fd6^...451d6e4d6fcb

[07:42] <brrt> not actually a rebase, though

[07:49] *** lizmat joined
[08:24] *** zakharyas joined
[08:27] *** zakharyas joined
[08:28] *** brrt joined
[08:49] *** FROGGS joined
[08:51] *** FROGGS joined
[08:59] <jnthn> Jit Stackwalker sounds like a character from a VM-internals Star Wars rip-off :)

[09:00] <Geth> Â¦ MoarVM/jit-stack-walker: 7b1f287ada | (Bart Wiegmans)++ | 2 files

[09:00] <Geth> Â¦ MoarVM/jit-stack-walker: [JIT] Extract finding inline for dynlex to JIT

[09:00] <Geth> Â¦ MoarVM/jit-stack-walker:

[09:00] <Geth> Â¦ MoarVM/jit-stack-walker: JIT entry label should not leak out to dynamic lexical lookup.

[09:00] <Geth> Â¦ MoarVM/jit-stack-walker: review: https://github.com/MoarVM/MoarVM/commit/7b1f287ada

[09:00] <brrt> it kind of does, doesn't it

[09:02] <brrt> with that in place, lets' try and activate the stack walker...

[09:10] <brrt> it breaks, and it breaks because tc->cur_frame points to a caller while returning, which is not on the stack

[09:11] <jnthn> Caller or callee?

[09:12] <brrt> caller, I think

[09:12] <jnthn> Oh, as in, it's JITted code is not on the stack

[09:13] <brrt> correct, not on the C stack, I mean :-)

[09:15] <jnthn> Hmm.

[09:15] <jnthn> What do we try and look up during this time?

[09:17] <brrt> the proper jit entry label

[09:18] <brrt> well, the current position in the jit frame

[09:18] <brrt> line src/core/frame.c - line 868, we update the tc->cur_frame to its caller;

[09:19] <brrt> line src/core/frame.c - line 908, we call the special unwind

[09:20] <brrt> src/6model/6model.c:71 - we try to die

[09:21] <brrt> now, in my branch; src/jit/interface.c:27  if (tc->cur_frame == frame)

[09:21] <brrt> hmm

[09:27] *** brrt joined
[10:08] <FROGGS> jnthn: I think I'm going to merge the inlined-shaped-carray branches (moarvm/rakudo) today

[10:09] <FROGGS> jnthn: and I'll put a lock in setdebugname, or what the op was called

[10:09] <jnthn> FROGGS: Alright...this soon after release sounds like a good time :)

[10:09] <FROGGS> aye

[10:09] <FROGGS> :o)

[10:34] *** zakharyas joined
[10:35] *** AlexDaniel joined
[10:52] <Geth> Â¦ MoarVM: 8610b8581b | (Tobias Leich)++ | 2 files

[10:52] <Geth> Â¦ MoarVM: Implement one dimensional inlined shaped CArrays

[10:52] <Geth> Â¦ MoarVM:

[10:52] <Geth> Â¦ MoarVM: A C(PP)Struct can now hold an inlined array with a fixed sized shape.

[10:52] <Geth> Â¦ MoarVM: There is one issue though. We always assumed that CArray attributes of CStructs

[10:52] <Geth> Â¦ MoarVM: will always hold pointers to other things than numeric types.

[10:52] <Geth> Â¦ MoarVM: I've changed the default for inlined CArray attributes which have a shape.

[10:52] <Geth> Â¦ MoarVM: The memory of the CArray slots will be inlined by default as well.

[10:52] <Geth> Â¦ MoarVM: If someone wants the opposite, (s)he can declare a CArray of pointers.

[10:52] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8610b8581b

[10:53] <Geth> Â¦ MoarVM: 25f165ad70 | (Tobias Leich)++ | 5 files

[10:53] <Geth> Â¦ MoarVM: Add CPPStruct/CUnion-reprs where it was forgotten

[10:53] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/25f165ad70

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: 2a871f3bae | (Bart Wiegmans)++ | 3 files

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: [JIT] Activate stack walker for current frame

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker:

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: Look up the current return address based on the stack layout.

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: Only works with -fno-omit-frame-pointer.

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: review: https://github.com/MoarVM/MoarVM/commit/2a871f3bae

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: a575805509 | (Bart Wiegmans)++ | 2 files

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: [JIT] Remove redundant dynamic label assignments

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker:

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: Now that we can look up the current position in the JIT frame via stack

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: walking, it is no longer required to load the jit entry label on the

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: start and end of frame handlers and at the start of every basic block.

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker:

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: As basic block entry is quite a bit more frequent than looking up

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: dynamic lexicals or throwing exceptions, I hope this should provide a

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: nice speedup.

[10:54] <Geth> Â¦ MoarVM/jit-stack-walker: review: https://github.com/MoarVM/MoarVM/commit/a575805509

[10:54] <brrt> these ^ are the scariest two commits i have done for some time

[10:56] <brrt> oh, and i've already found a bug

[11:19] *** brrt joined
[11:20] <Geth> Â¦ MoarVM/jit-stack-walker: 960dd4af48 | (Bart Wiegmans)++ | src/core/exceptions.c

[11:20] <Geth> Â¦ MoarVM/jit-stack-walker: [JIT] Also extract selecting active lexical handlers

[11:20] <Geth> Â¦ MoarVM/jit-stack-walker:

[11:20] <Geth> Â¦ MoarVM/jit-stack-walker: Forgotten this bit. Not sure if correct though.

[11:20] <Geth> Â¦ MoarVM/jit-stack-walker: review: https://github.com/MoarVM/MoarVM/commit/960dd4af48

[11:27] *** zakharyas joined
[11:59] *** domidumont joined
[12:34] *** domidumont1 joined
[12:47] *** domidumont joined
[13:14] <Geth> Â¦ MoarVM/jit-stack-walker: 9 commits pushed by (Bart Wiegmans)++

[13:14] <Geth> Â¦ MoarVM/jit-stack-walker: 271c34c967 | [JIT] Initial stack walker to find current position in frame

[13:14] <Geth> Â¦ MoarVM/jit-stack-walker: c15e8a88c7 | [JIT] Extract JIT interface module

[13:14] <Geth> Â¦ MoarVM/jit-stack-walker: 5a4c4e415a | [JIT} Implement find_active_handlers

[13:14] <Geth> Â¦ MoarVM/jit-stack-walker: df3304d376 | [JIT] Extract current position search frm exception handler lookup

[13:14] <Geth> Â¦ MoarVM/jit-stack-walker: 97a1ffc92a | [JIT] Improve stack walker to use top-of-stack

[13:14] <Geth> Â¦ MoarVM/jit-stack-walker: 251fed6771 | [JIT] Extract finding inline for dynlex to JIT

[13:14] <Geth> Â¦ MoarVM/jit-stack-walker: bef60734ab | [JIT] Activate stack walker for current frame

[13:14] <Geth> Â¦ MoarVM/jit-stack-walker: 47012a3e2f | [JIT] Remove redundant dynamic label assignments

[13:14] <Geth> Â¦ MoarVM/jit-stack-walker: 42f989f002 | [JIT] Also extract selecting active lexical handlers

[13:14] <Geth> Â¦ MoarVM/jit-stack-walker: review: https://github.com/MoarVM/MoarVM/compare/960dd4af4806...42f989f002d3

[13:16] <brrt> surprisingly enough, this works. I now encourage all of you to test and benchmark this against master

[13:46] <jnthn> brrt++

[13:46] <jnthn> Will give it a go later

[13:48] <brrt> if you're on windows, it might well not work

[13:48] <brrt> because I expect microsft's assemlber to disagree (if it is configured at all)

[13:49] <jnthn> Primarily on Linux these days

[13:51] <brrt> i'm probably going to have to setup a VM anyway

[14:27] *** domidumont1 joined
[15:01] *** TimToady joined
[15:51] *** robertle joined
[16:22] *** domidumont joined
[16:42] <Geth> Â¦ MoarVM/pluggable-spesh: e963b0500c | (Jonathan Worthington)++ | src/mast/compiler.c

[16:42] <Geth> Â¦ MoarVM/pluggable-spesh: Implement bytecode assembly for speshresolve

[16:42] <Geth> Â¦ MoarVM/pluggable-spesh: review: https://github.com/MoarVM/MoarVM/commit/e963b0500c

[16:52] <dogbert17> WARNING: unhandled amd64-linux syscall: 1000318 # haven't seen valgrind say this before

[16:54] <jnthn> Me either :)

[16:55] <jnthn> ooh, actually I do see it

[16:55] <jnthn> Hmm

[16:57] <jnthn> cooking &

[16:59] <robertle> I have some more data on the mips failures in R#1711, mostly that it still happens with MVM_SPESH_DISABLE and that it is still intermittent with MVM_SPESH_NODELAY. I tried changing the "Bytecode validation error" macro to get better messages, but might have gotten that wrong. any pointers on what else to try very welcome...

[16:59] <synopsebot> R#1711 [open]: https://github.com/rakudo/rakudo/issues/1711 [severe] intermittent "Bytecode validation error at offset 0, instruction 0" on s390x/mips

[17:55] <nine> .tell brrt csv-ip5xs.pl performance is well within noise.

[17:55] <yoleaux> nine: I'll pass your message to brrt.

[18:52] <robertle> there is a lot that I do not understand about src/core/validate.c, but doesn't the malloc+memset in the #ifdef MVM_BIGENDIAN in MVM_validate_static_frame mean that we are not actually validating anything? did I get that right? also, why doesn't this leak memory like a sieve?

[18:55] <timotimo> we only do that once per chunk of bytecode, no?

[18:56] <timotimo> that's a limited amount of things

[19:00] <robertle> ok, not really worried about the leak... but what is it with the memset?

[19:01] <robertle> why does that not wreck the static_frame we pass in? and why does this ever validate, shouldn't all opcodes be DBDB afterwards? which would be a rather large opcode...

[19:04] <timotimo> validation when endian switching is on will copy from the original code and switch bytes afterwards

[19:05] <timotimo> the memset is potentially there so we know when we forgot to do something?

[19:08] <robertle> ah! so ensure_bytes overwrites the stuff we did memset from src_cur_op...

[19:08] <timotimo> right

[19:08] <robertle> would it help if I made it hexdump the whole bytecode body in these error conditions?

[19:09] <timotimo> i guess? does this ever trigger?

[19:09] <robertle> yes, but only about 1 in every 100 runs on the most trigger happy test cases

[19:10] <robertle> I get the "invalid extension opcode %u - should be less than %u" case

[19:10] <timotimo> oh, ah

[19:10] <timotimo> does rr run on that system?

[19:11] <robertle> what's rr?

[19:12] <timotimo> mozilla's time-travelling debugger extension for gdb

[19:13] <robertle> ah that

[19:14] <robertle> I had trouble even getting plain gdb to work in these cases, but perhaps the time travelling would help

[19:14] <robertle> but when I get into these cases, I don't seem to have a valid stack anymore

[19:14] <timotimo> right

[19:14] <timotimo> if jit is turned on, stacks are never there, but your arch doesn't have a jit for it, so ...?

[19:16] <robertle> so perhaps something unrelated has wrecked the stack, and this validation error is just the result of that. note that this seems to happen only in the presence of threads

[19:17] <timotimo> possible, but our bytecode isn't on the stack, and neither is the "current operation" pointer i think?

[19:21] <robertle> hmm, not sure about the current op pointer: it's part of the Validator struct which is set up as Validator val[1];

[19:22] <timotimo> oh, it's dieing inside the validator

[19:22] <timotimo> silly me

[19:22] <timotimo> sorry, i'm not all present

[19:23] <robertle> I am still working on the non-presentness... *klink*

[19:23] *** Kaiepi joined
[19:24] <dogbert17> jnthn, samcv: I believe that the mysterious valgrind msg started to appear with https://github.com/MoarVM/MoarVM/commit/b027eb2bda5dd0a806a6643e7910adaeed01791c

[19:51] *** Kaiepi joined
[20:07] *** Kaiepi joined
[20:25] *** Kaiepi joined
[20:26] <jnthn> https://github.com/MoarVM/MoarVM/commit/b027eb2bda5dd0a806a6643e7910adaeed01791c#diff-1e5ba4bc9e330ee9040fdf62c986d960R95 :)

[20:26] <jnthn> I think it's genuinely that valgrind perhaps doesn't know that syscall :)

[20:26] <jnthn> If the syscall didn't work, I think we'd know about it. :)

[21:27] *** MasterDuke joined
[23:31] <MasterDuke> .tell brrt i didn't see any noticeable difference running Tux's test-t and test-t --race scripts on the jit-stack-walker branch

[23:31] <yoleaux> MasterDuke: I'll pass your message to brrt.

[23:51] *** mtj_ joined
