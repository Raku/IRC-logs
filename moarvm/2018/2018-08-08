[00:49] *** lkoranda22 joined
[00:50] *** p6bannerbot sets mode: +v lkoranda22

[00:50] *** lkoranda22 left
[01:47] *** Kaiepi left
[01:52] *** Kaiepi joined
[01:53] *** p6bannerbot sets mode: +v Kaiepi

[02:55] *** DarthGandalf24 joined
[02:55] *** p6bannerbot sets mode: +v DarthGandalf24

[03:00] *** DarthGandalf24 left
[03:14] *** linuxmodder7 joined
[03:14] *** linuxmodder7 left
[03:19] *** raSter^9 joined
[03:19] *** p6bannerbot sets mode: +v raSter^9

[03:21] *** raSter^9 left
[03:29] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #935: Silence an incorrect GCC string overflow warning

[03:29] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/935

[03:43] *** Syfer joined
[03:44] *** p6bannerbot sets mode: +v Syfer

[03:44] *** Syfer left
[03:45] *** Kaiepi left
[04:43] *** promote joined
[04:44] *** p6bannerbot sets mode: +v promote

[04:48] *** promote left
[05:42] *** Kaiepi joined
[05:42] *** p6bannerbot sets mode: +v Kaiepi

[06:25] *** shareable6 joined
[06:25] *** p6bannerbot sets mode: +v shareable6

[06:41] *** robertle joined
[06:42] *** p6bannerbot sets mode: +v robertle

[06:56] *** Kaiepi left
[06:57] *** Kaiepi joined
[06:57] *** p6bannerbot sets mode: +v Kaiepi

[07:24] *** macky6 joined
[07:25] *** p6bannerbot sets mode: +v macky6

[07:26] *** macky6 left
[07:50] *** Ricardus1 joined
[07:51] *** Ricardus1 left
[07:58] *** avar left
[08:02] *** zakharyas joined
[08:02] *** p6bannerbot sets mode: +v zakharyas

[08:04] *** dogbert11 left
[08:10] *** AlexDaniel left
[08:39] <Geth> ¦ MoarVM/pea: ca89cd992f | (Carl Masak)++ | docs/bytecode.markdown

[08:39] <Geth> ¦ MoarVM/pea: Remove incorrect byte sum

[08:39] <Geth> ¦ MoarVM/pea:

[08:39] <Geth> ¦ MoarVM/pea: This number used to be correct, but

[08:39] <Geth> ¦ MoarVM/pea: 8a348d7480d47f1214d3201a7bd4c840bfb3f054 turned everything into

[08:39] <Geth> ¦ MoarVM/pea: 32-bit integers, and failed to update this sum from 10 to 12.

[08:39] <Geth> ¦ MoarVM/pea:

[08:39] <Geth> ¦ MoarVM/pea: Probably unlikely that the sum will update again, but removing it

[08:39] <Geth> ¦ MoarVM/pea: because presenting the total number of bytes doesn't add much in

[08:39] <Geth> ¦ MoarVM/pea: terms of documentation. (Cf. it being the wrong number for the

[08:39] <Geth> ¦ MoarVM/pea: past five years.)

[08:39] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/ca89cd992f

[08:40] <masak> :)

[08:40] <masak> ur. wrong branch. dang.

[08:41] <Geth> ¦ MoarVM: 082dddfdd2 | (Carl Masak)++ | docs/bytecode.markdown

[08:41] <Geth> ¦ MoarVM: Remove incorrect byte sum

[08:41] <Geth> ¦ MoarVM:

[08:41] <Geth> ¦ MoarVM: This number used to be correct, but

[08:41] <Geth> ¦ MoarVM: 8a348d7480d47f1214d3201a7bd4c840bfb3f054 turned everything into

[08:41] <Geth> ¦ MoarVM: 32-bit integers, and failed to update this sum from 10 to 12.

[08:41] <Geth> ¦ MoarVM:

[08:41] <Geth> ¦ MoarVM: Probably unlikely that the sum will update again, but removing it

[08:41] <Geth> ¦ MoarVM: because presenting the total number of bytes doesn't add much in

[08:41] <Geth> ¦ MoarVM: terms of documentation. (Cf. it being the wrong number for the

[08:41] <Geth> ¦ MoarVM: past five years.)

[08:41] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/082dddfdd2

[08:41] <masak> git++

[08:57] *** ski_ joined
[08:58] *** p6bannerbot sets mode: +v ski_

[08:59] *** ski_ left
[09:02] *** travis-ci joined
[09:02] *** p6bannerbot sets mode: +v travis-ci

[09:02] <travis-ci> MoarVM build failed. Carl Masak 'Remove incorrect byte sum

[09:02] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/413478119 https://github.com/MoarVM/MoarVM/compare/3e679da29adb...082dddfdd228

[09:02] *** travis-ci left
[09:03] *** avar joined
[09:03] *** avar left
[09:03] *** avar joined
[09:03] *** p6bannerbot sets mode: +v avar

[09:04] *** p6bannerbot sets mode: +v avar

[09:05] <masak> I doubt that my docu update was what broke the build.

[09:06] <masak> "===SORRY!=== Found a MoarVM binary but was not able to get its version number."

[09:07] <masak> I saw that one in a build break a while back. no idea what causes it.

[09:11] *** lizmat joined
[09:12] *** p6bannerbot sets mode: +v lizmat

[09:12] *** lizmat_ joined
[09:13] *** p6bannerbot sets mode: +v lizmat_

[09:14] *** lizmat__ joined
[09:15] *** p6bannerbot sets mode: +v lizmat__

[09:16] *** lizmat left
[09:16] *** lizmat_ left
[09:17] *** lizmat joined
[09:17] *** p6bannerbot sets mode: +v lizmat

[09:18] *** lizmat__ left
[09:32] *** Typhon24 joined
[09:33] *** p6bannerbot sets mode: +v Typhon24

[09:33] *** Typhon24 left
[09:37] *** Kaiepi left
[10:01] *** BranchPredictor2 joined
[10:01] *** BranchPredictor2 left
[10:13] <nwc10> $ ./perl6-m -Ilib t/04-nativecall/06-struct.t

[10:13] <nwc10> ===SORRY!===

[10:13] <nwc10> No such spesh plugin 'decontrv' for current language

[10:13] <jnthn> wat

[10:14] <nwc10> indeed :-/

[10:14] <jnthn> How can that even happen...

[10:14] <nwc10> also ASAN still excited

[10:14] <nwc10> at least last night

[10:14] <nwc10> hadn't got to the end yet to retest

[10:15] <nwc10> jnthn: MVM_SPESH_NODELAY=1

[10:15] <jnthn> oh...

[10:17] <jnthn> Darn, can't reproduce the error

[10:18] <nwc10> I also have +#define FSA_SIZE_DEBUG 1

[10:18] <nwc10> +#define MVM_SPESH_CHECK_DU 1

[10:18] <nwc10> +#define MVM_ARRAY_CONC_DEBUG 1

[10:18] <nwc10> and MVM_SPESH_BLOCKING=1

[10:19] <Geth> ¦ MoarVM: 50b063e045 | (Jonathan Worthington)++ | 2 files

[10:19] <Geth> ¦ MoarVM: Mark sp_speshresolve as :useshll

[10:19] <Geth> ¦ MoarVM:

[10:19] <Geth> ¦ MoarVM: Since plugins are resolved for the current HLL, so inlining this op

[10:19] <Geth> ¦ MoarVM: will cause a mis-lookup.

[10:19] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/50b063e045

[10:19] <jnthn> See if that helps

[10:22] <dogbert2> MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 ./perl6 -Ilib t/04-nativecall/06-struct.t

[10:22] <jnthn> Yeah, that's what I ran

[10:23] <dogbert2> failed for me, but I'm just compiling your fix ...

[10:24] <dogbert2> preliminary findings are promising :)

[10:24] <nwc10> jnthn: OK, about to test. ASAN excitement was http://paste.scsys.co.uk/581373

[10:25] <dogbert2> nwc10: I reported that for you as https://github.com/MoarVM/MoarVM/issues/931

[10:25] <nwc10> now http://paste.scsys.co.uk/581374

[10:25] <nwc10> beleive these are identical apart from addresses

[10:25] <nwc10> and sadly diakopter's believed fix didn't fix *that*

[10:26] <nwc10> dogbert2: thanks, yes, saw that in passing but then forgot that you'd done that

[10:28] <dogbert2> jnthn: my 32 bit Linux system gives your 'Mark sp_speshresolve as :useshll' fix a thumbsup :-)

[10:28] <jnthn> yay :)

[10:28] <nwc10> "there will be a delay" - I'm told that lunch is ready

[10:28] <nwc10> NQP build in progress

[10:29] <dogbert2> https://github.com/MoarVM/MoarVM/issues/931 is a bit odd though

[10:31] <dogbert2> the actual line causing ASAN/valgrind barfage seems to be https://github.com/MoarVM/MoarVM/blob/master/src/spesh/frame_walker.c#L336

[10:31] <dogbert2> dunno of that gives rise to any theories?

[10:39] *** travis-ci joined
[10:39] *** p6bannerbot sets mode: +v travis-ci

[10:39] <travis-ci> MoarVM build failed. Jonathan Worthington 'Mark sp_speshresolve as :useshll

[10:39] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/413512903 https://github.com/MoarVM/MoarVM/compare/082dddfdd228...50b063e04511

[10:39] *** travis-ci left
[10:48] *** Kaiepi joined
[10:49] *** p6bannerbot sets mode: +v Kaiepi

[10:52] *** zakharyas left
[11:00] <jnthn> Will look at the bugs later... Been sketching out a spesh plugin for return type check / coercion handling

[11:01] <jnthn> In the least valuable case this will halve the size of the type check bytecode we emit

[11:01] <jnthn> Spesh was already quite good at stripping it all out anyway

[11:02] *** statisfiable6 joined
[11:02] <jnthn> But it's still quite bloaty in the unoptimized form

[11:02] <jnthn> Plus a ton of error strings in the constant table etc.

[11:02] *** p6bannerbot sets mode: +v statisfiable6

[11:06] <jnthn> lunch; bbiab

[11:08] *** Facilitating joined
[11:09] *** p6bannerbot sets mode: +v Facilitating

[11:13] *** Facilitating left
[11:21] *** lizmat left
[11:35] *** lizmat joined
[11:35] *** p6bannerbot sets mode: +v lizmat

[11:37] *** brrt joined
[11:38] *** p6bannerbot sets mode: +v brrt

[12:01] *** lizmat left
[12:03] *** lizmat joined
[12:04] *** p6bannerbot sets mode: +v lizmat

[12:09] <dogbert2> jnthn: cool, do you think the new plugin will have an effect on |Tux| code?

[12:12] <jnthn> Not sure

[12:20] <jnthn> Though I'm hoping it'll let me improve the inlining situation around array access which quite possibly would help

[12:21] <dogbert2> yes, it was something with going above the inlining limit or some such

[12:21] <jnthn> Rakudo now builds using the plugin

[12:21] <jnthn> Fails 3 tests from make test

[12:21] <dogbert2> doesn't seem so bad

[12:23] <jnthn> Yeah, with all the definite/coercion/Nil/Failure special cases in there, it's rather complex

[12:24] *** brrt left
[12:27] *** zakharyas joined
[12:28] <dogbert2> You should arm yourself with a cup of 'post lunch coffee'

[12:28] *** p6bannerbot sets mode: +v zakharyas

[12:31] <jnthn> Ah, hmm

[12:33] <jnthn> Yeah, it's I think because the callercode op gives wrong results if the caller is inlined

[12:33] <jnthn> Thankfully, I recently built a mechanism for fixing these things :)

[12:49] <jnthn> Yup, that helps a lot :)

[12:51] <jnthn> Anyone got a recent build handy and can tell me the size of their CORE.setting.moarvm?

[12:53] <Geth> ¦ MoarVM: 09717adec8 | (Jonathan Worthington)++ | 6 files

[12:53] <Geth> ¦ MoarVM: Make the callercode op inline-aware

[12:53] <Geth> ¦ MoarVM:

[12:53] <Geth> ¦ MoarVM: If the caller frame had performed inlining, then we would get the

[12:53] <Geth> ¦ MoarVM: wrong callercode result.

[12:53] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/09717adec8

[12:53] <lizmat> jnthn: 14075648

[12:53] <lizmat> as of HEAD just now

[12:54] <jnthn> Mine with the change is 14047512

[12:54] <lizmat> nice reduction

[12:54] <jnthn> m: say 14075648 - 14047512

[12:54] <camelia> rakudo-moar 9e71c22d9: OUTPUT: «28136␤»

[12:55] <jnthn> make test happy, 2 spectest regressions I need to look at

[12:55] <lizmat> m: say 14047512  / 14075648

[12:55] <camelia> rakudo-moar 9e71c22d9: OUTPUT: «0.99800109␤»

[12:56] <jnthn> ah, darn, it doesn't have entirely good performance consequences though :(

[12:56] <jnthn> Wonder why

[12:57] <lizmat> jnthn: fwiw, moarvm size last october was 12849568

[12:59] <jnthn> Yeah, the opts can't always keep up with the CORE.setting additions :)

[13:05] <nwc10> CORE.setting.moarvm: 14075232

[13:07] <masak> CORE.setting.moarvm: 14082176 (this is on Rakudo 7c08ba7)

[13:13] *** travis-ci joined
[13:13] *** p6bannerbot sets mode: +v travis-ci

[13:13] <travis-ci> MoarVM build failed. Jonathan Worthington 'Make the callercode op inline-aware

[13:13] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/413567653 https://github.com/MoarVM/MoarVM/compare/50b063e04511...09717adec889

[13:13] *** travis-ci left
[13:16] *** brrt joined
[13:17] *** p6bannerbot sets mode: +v brrt

[13:17] * jnthn boggles at where the slowdown coulda come from

[13:21] <dogbert2> speaking of slowdowns, is it correct to say, that atm, some code runs slower than it did before you started on the performance grant

[13:21] <dogbert2> because some opts haven't yet beeen implemented?

[13:23] *** egos6 joined
[13:23] <jnthn> It's possible, and even where there's opts done, there's trade-offs

[13:24] *** p6bannerbot sets mode: +v egos6

[13:25] *** egos6 left
[13:26] <dogbert2> there was one commit, where the text explicitly said that this would make things slower. I can't find it atm but I believe that it had something to do with moving some code from MoarVM to nqp

[13:26] <jnthn> Ah, yeah

[13:26] <brrt> \o

[13:26] <dogbert2> hi brrt

[13:27] <brrt> .tell Kaiepi I would actually kind of rather have not a reimplementation of the lego JIT

[13:27] <yoleaux> brrt: I'll pass your message to Kaiepi.

[13:27] <brrt> ohai dogberg2

[13:27] <brrt> dogbert2

[13:27] <dogbert2> so now some code is almost two times slower than 2018.06

[13:27] <dogbert2> :)

[13:27] * diakopter images a floating DogBerg

[13:27] <diakopter> *imagines

[13:27] <jnthn>   171,437,489  /home/jnthn/dev/MoarVM/src/spesh/deopt.c:uninline [/home/jnthn/dev/MoarVM/install/lib

[13:28] <jnthn> That...might have something to do with it...

[13:28] <dogbert2> aha

[13:28] * diakopter hopes for a 99.9999% slowness reduction

[13:29] <jnthn> yeah, absolute flood of

[13:29] <jnthn> Deopt one requested by JIT in frame 'pull-one' (cuid '10348') (330 -> 398)

[13:29] <jnthn>     Recreated frame 'consume-line-chars' (cuid '3829')

[13:29] <jnthn> In the deopt log :)

[13:34] <dogbert2> does anyone know if part of Perl 6 has been inspired by Julia or could it be the other way around

[13:37] <diakopter> I thought Julia was much older

[13:38] <dogbert2> I reacted to blurbs like 'Julia uses multiple dispatch as a paradigm, making it easy to express many object-oriented and functional programming patterns.'

[13:38] <dogbert2> and 'Julia is dynamically-typed, feels like a scripting language'

[13:39] <dogbert2> the spruced up their homepage a bit - https://julialang.org/

[13:39] <ilmari> First appeared: 2012 according to wikipedia

[13:40] <diakopter> oh

[13:40] <masak> dogbert2: Julia appeared in 2012, at which point Perl 6 had had multi dispatch *implemented* for a few years

[13:40] <masak> so if anything, Julia was inspired by Perl 6

[13:40] <dogbert2> masak: cool

[13:41] <dogbert2> it seems to be the up and coming lang if your'e doing at lot of maths

[13:43] <masak> yes, I wish Julia well -- it seems a cool, well-designed language

[13:45] <jnthn> For some reason, we're inserting a guard that looks for a type object, which is bonkers 'cus most of the time it's a concrete instance, but also, we don't even care if it's a type object

[13:45] <diakopter> jnthn: kiwf?

[13:46] <jnthn> language class time, bbl

[13:47] <masak> what a cliffhanger!

[14:20] <[Coke]> am i the only one who tries to read "useshll" as sean connery?

[14:23] <Kaiepi> that's alright brrt

[14:23] <yoleaux> 13:27Z <brrt> Kaiepi: I would actually kind of rather have not a reimplementation of the lego JIT

[14:24] <lizmat> [Coke]: I think so  :-)

[14:27] <diakopter> [Coke]: I do

[14:28] <diakopter> [Coke]: the offishers and I will shubmerge beneath you and shcuttle the ship

[14:28] <lizmat> ah, like that...

[14:28] <lizmat> you just mean a heavy Scottish accent

[14:28] <lizmat> ok, I can follow *that*

[14:30] <brrt> i'd rather have an implementation built on the expression JIT, since that will involve far fewer assembly, and can reuse many more moving parts

[14:35] <timotimo> jnthn: what do you think is the impact of making speshresolve :usehll?

[14:38] <timotimo> we can totally have a speshresolvefrom op that has an hll name parameter

[14:47] <Kaiepi> fair

[14:55] *** nebuchadnezzar left
[15:05] <brrt> Kaiepi: the downside is, that isn't totally possible yet because we haven't translated everything to expression JIT again

[15:05] <brrt> *already

[15:06] <Kaiepi> ah

[15:06] <brrt> so

[15:06] <brrt> :-)

[15:16] <jnthn> timotimo: I'd expect it's close to zero

[15:16] <jnthn> timotimo: We have some guts code written in NQP that is called from Perl 6 code

[15:16] <jnthn> But we have little the other way that's hot that I can think of, and NQP doesn't use spesh plugins

[15:19] <timotimo> OK

[15:20] <jnthn> So...what's wrong with this thing...

[15:21] *** AlexDaniel joined
[15:22] *** AlexDaniel left
[15:22] *** AlexDaniel joined
[15:22] *** p6bannerbot sets mode: +v AlexDaniel

[15:22] *** p6bannerbot sets mode: +v AlexDaniel

[15:29] <jnthn> ho, the stats are bogus

[15:29] <jnthn>             408:

[15:29] <timotimo> what spesh logs make?

[15:29] <jnthn>                 2 x type Str (TypeObj)

[15:29] <jnthn>                 204 x static frame 'identity' (151) (caller is outer: 0, multi 0)

[15:29] <jnthn>                 2 x type tuple:

[15:29] <jnthn>                     Type 0: Str (TypeObj)

[15:29] <jnthn> Where are the types for the other 202 calls? :)

[15:44] *** Slumlord_16 joined
[15:45] *** p6bannerbot sets mode: +v Slumlord_16

[15:45] * jnthn still didn't figure out where on earth they're getting lost to...

[15:45] *** Slumlord_16 left
[15:46] <timotimo> getting confused by indices?

[15:46] <timotimo> like, the 408?

[15:46] <timotimo> or the correlation id getting messed up somehow?

[15:46] <jnthn> No, the offset is OK

[15:46] <jnthn> I guess maybe perhaps kinda but...that's still odd

[15:47] <jnthn> Why are all the static frame entries OK?

[15:47] <timotimo> no idea :(

[15:47] <jnthn> And why do we get two - but only the type object cases - resolved?

[15:48] <jnthn> uh, logged

[15:48] <jnthn> I wonder if somehow the call to the spesh plugin confuses it

[15:50] *** robertle left
[15:51] *** Zoffix joined
[15:51] *** p6bannerbot sets mode: +v Zoffix

[15:52] <timotimo> oh, jnthn, are you -1 or +1 on adding a "first time invoked" attribute to profiler call graph nodes?

[15:53] <jnthn> What would it mean? :)

[15:53] *** channels joined
[15:54] <jnthn> Or rather, how would it differ from seeing if the call count isn't zero?

[15:54] *** p6bannerbot sets mode: +v channels

[15:54] <timotimo> well, just whenever a new node appears in the call graph we record what time-since-start it was

[15:54] *** channels left
[15:54] <timotimo> it'd help correlate different phases of programs against the GCs for example

[15:55] <jnthn> ah, I see

[15:55] <jnthn> Yeah, no problem

[15:55] <Zoffix> Can utf8_c8 produce more bytes than in the original stream? If change `bytes` to `(bytes + 1)` in this malloc: https://github.com/MoarVM/MoarVM/blob/master/src/strings/utf8_c8.c#L471  it fixes the SEGV in R#2158  trying to figure out if the result is undersized or if the position gets messed up somewhere.

[15:55] <synopsebot> R#2158 [open]: https://github.com/rakudo/rakudo/issues/2158 [SEGV][regression][tests committed][⚠ blocker ⚠] :enc<utf8-c8> on Proc drops content / SEGVs

[15:56] <timotimo> i'm also considering putting a "rss or maxrss at time of collection" thing in, but that would require careful accounting so as not to count the whole profiler data as well

[15:56] <jnthn> More bytes, yes, but I can't think of a case where it'd result in more than one grapheme per byte

[15:57] <jnthn> And we're allocating graphemes there

[15:57] <Zoffix> ah, ok

[15:57] <jnthn> Ohh.

[15:57] <jnthn> Unless maybe there's a partial byte in the buffer

[15:58] <jnthn> e.g. of bytes from the previous buffer that didn't before a char yet

[15:58] <jnthn> So in that case + 1 fixing it would make sense

[15:59] <Zoffix> FWIW, this is the bytes I'm reading from `cat tehfile`: https://github.com/perl6/roast/blob/b6fc8e02122a5ce0e317bc1323099d0d839e5a55/S32-encoding/decoder.t#L21-L28

[16:00] <Zoffix> And when I was golfing those bytes, the SEGV would occur at 4-byte intervals (if I shorten the buf by 1 byte, no segv, 2, 3 bytes, no segv, 4 bytes, SEGV again

[16:01] <jnthn> Yeah, that fits

[16:01] <jnthn> So the + 1 is probably right

[16:01] <Zoffix> jnthn: as a fix to the bug?

[16:02] <jnthn> Yes

[16:02] <Zoffix> Ah, cool

[16:02] <Zoffix> \o/

[16:02] <jnthn> (As in, there's a reason for it to be a sensible fix, rather than it just hiding something else)

[16:06] <Zoffix> I don't follow actually: "Unless maybe there's a partial byte in the buffer" <-- partial byte? or partial grapheme?

[16:08] <Zoffix> And if partial grapheme, wouldn't it still be at most 1 grapheme per bytes we got?

[16:11] <jnthn> oh, hah, right. Hmm.

[16:12] *** robertle joined
[16:12] *** hammer06511 joined
[16:12] *** hammer06511 left
[16:12] *** p6bannerbot sets mode: +v robertle

[16:14] <diakopter> I thought you merged a fix to 2158 yesterday

[16:14] <diakopter> PR 934

[16:15] <Zoffix> diakopter: the fix fixed shortchange on read bytes, but now there's a SEGV

[16:15] <diakopter> oh

[16:20] *** xelak6 joined
[16:20] *** p6bannerbot sets mode: +v xelak6

[16:23] *** suim4 joined
[16:23] *** p6bannerbot sets mode: +v suim4

[16:24] *** suim4 left
[16:26] <xelak6> Zoffix: I have also done some debugging, and it seems that last grapheme of the previous input buffer is always inserted in the current result buffer. That means, the result buffer needs space for an additional grapheme when processing the last input buffer.

[16:28] <Zoffix> xelak6: I'm giving up on this Issue :) Hope you can fix it.

[16:28] * Zoffix &

[16:28] *** Zoffix left
[16:31] <xelak6> Zoffix: Increasing the result buffer by 1 should fix the problem anyway ...

[16:32] *** tadzik joined
[16:33] *** p6bannerbot sets mode: +v tadzik

[16:36] *** nebuchad` joined
[16:36] *** lizmat left
[16:37] *** p6bannerbot sets mode: +v nebuchad`

[16:37] *** dogbert17 joined
[16:38] *** p6bannerbot sets mode: +v dogbert17

[16:39] *** nebuchad` is now known as nebuchadnezzar

[16:43] *** xelak6 left
[16:46] *** brrt left
[16:54] <jnthn> Argh, I've worked out what's going on

[16:55] <diakopter> Argh

[16:55] <jnthn> The `identity` function gets hot before various things using it

[16:56] <jnthn> But we log return values and type tuples of parameters as part of the callee's spesh log entries

[16:56] <jnthn> But once specialized it doesn't record them

[16:56] <jnthn> So we end up with a few early unrepresentative values logged

[16:56] <jnthn> Then identity gets specialized

[16:56] <jnthn> Then we don't record any more return values

[16:57] <jnthn> And thus end up with bogus stats, insert a guard that's rarely going to be met based on them, and deopt a load

[16:58] <dogbert17> is it an easy fix?

[16:58] <jnthn> Not immediately sure

[16:59] <dogbert17> but spesh will be able to do a better job if the stats are correct then

[17:02] <Geth> ¦ MoarVM: xelak6++ created pull request #936: Increase the result buffer size.

[17:02] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/936

[17:05] <jnthn> Yeah... Well, it's not a new problem, just made obvious when it killed performance of a benchmark I often run :)

[17:09] <Geth> ¦ MoarVM: 4ec15fc568 | (Alexius Korzinek)++ | src/strings/utf8_c8.c

[17:09] <Geth> ¦ MoarVM: Increase the result buffer size.

[17:09] <Geth> ¦ MoarVM:

[17:09] <Geth> ¦ MoarVM: The last grapheme of the previous input buffer is inserted in the

[17:09] <Geth> ¦ MoarVM: current result buffer. Therefore, the result buffer needs space

[17:09] <Geth> ¦ MoarVM: for an additional grapheme when processing the last input buffer.

[17:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4ec15fc568

[17:09] <Geth> ¦ MoarVM: f700c13420 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/strings/utf8_c8.c

[17:09] <Geth> ¦ MoarVM: Merge pull request #936 from xelak6/master

[17:09] <Geth> ¦ MoarVM:

[17:09] <Geth> ¦ MoarVM: Increase the result buffer size.

[17:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f700c13420

[17:11] <Geth> ¦ MoarVM: 91d2878f17 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/strings/utf8_c8.c

[17:11] <Geth> ¦ MoarVM: Document why we're bumping buffer by 1

[17:11] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/91d2878f17

[17:15] <jnthn> I guess we can log the returned type when the caller is being logged and stash it under the return bytecode offset or some such

[17:15] <jnthn> But that can be a task for another day :)

[17:17] <jnthn> Also I guess for things so simple as `identity` we don't want to go specializing them at all

[17:17] <jnthn> There's nothing to even specialize

[17:20] <jnthn> Time for some break/dinner :) bbl

[17:54] *** zakharyas left
[18:17] *** AlexDaniel left
[19:27] *** linuxmodder14 joined
[19:28] *** p6bannerbot sets mode: +v linuxmodder14

[19:28] *** linuxmodder14 left
[19:59] *** Guest88756 joined
[20:00] *** p6bannerbot sets mode: +v Guest88756

[20:02] *** kek918 joined
[20:03] *** p6bannerbot sets mode: +v kek918

[20:03] *** kek918 left
[20:05] *** Guest88756 left
[20:09] *** brrt joined
[20:09] *** p6bannerbot sets mode: +v brrt

[20:17] <brrt> \o

[20:22] <jnthn> o/ brrt

[20:24] *** depleted joined
[20:24] *** p6bannerbot sets mode: +v depleted

[20:27] *** lizmat joined
[20:27] *** p6bannerbot sets mode: +v lizmat

[20:29] *** depleted left
[20:53] *** brrt left
[21:02] <masak> brrtings

[21:07] *** hexa-12 joined
[21:08] *** p6bannerbot sets mode: +v hexa-12

[21:11] *** hexa-12 left
[21:41] *** Guest95232 joined
[21:41] *** p6bannerbot sets mode: +v Guest95232

[21:41] *** Guest95232 left
[21:44] *** monoxane28 joined
[21:44] *** monoxane28 left
[22:16] <jnthn> Phew, only one more day of ridiculously hot before things get more sensible

[22:19] *** Exagone31322 joined
[22:20] *** Exagone31322 left
[22:24] <timotimo> hooray!

[22:24] <timotimo> jnthn: how do you feel about making a distinction in the UI between inclusive and exclusive allocations?

[22:25] <timotimo> as in, in the current frontend you can only get the exclusive allocations for the exact methods that have 'em

[22:25] <timotimo> but in the call graph explorer, there could be more information for that

[22:30] <jnthn> inclusive meaning allocations of this + all its callers?

[22:31] <timotimo> callees*

[22:31] <timotimo> but yes

[22:31] <jnthn> d'oh, yes :D

[22:31] <jnthn> Big +1 to that :)

[22:31] <timotimo> glad to see i'm not the only one who thinks that's worth a lot :)

[22:32] <jnthn> Think I've a fix for caller type stats recording

[22:32] <jnthn> It looks like it's doing the right thing, anyway :)

[22:33] <jnthn> Was much easier to come up with here with fresh air blowing in the window than in the hot office earlier on today :)

[22:33] <timotimo> \o/

[22:33] <jnthn> haha

[22:34] <jnthn>  4 files changed, 17 insertions(+), 29 deletions(-)

[22:34] <jnthn> It's actually *simpler* to do it this way

[22:34] <timotimo> nice. is it what you alluded to before you went out for dinner?

[22:34] <jnthn> Yeah

[22:48] *** }ls{15 joined
[22:49] *** p6bannerbot sets mode: +v }ls{15

[22:49] *** }ls{15 left
[22:50] <Geth> ¦ MoarVM: 51197804f8 | (Jonathan Worthington)++ | 4 files

[22:50] <Geth> ¦ MoarVM: Log return value types under the caller's log ID

[22:50] <Geth> ¦ MoarVM:

[22:50] <Geth> ¦ MoarVM: This means that we still log them if returning from specialized to

[22:50] <Geth> ¦ MoarVM: unspecialized code. Since it's an unspecialized caller that needs the

[22:50] <Geth> ¦ MoarVM: information, this makes a lot more sense. There are situations where a

[22:50] <Geth> ¦ MoarVM: callee called from many places is specialized before various of its

[22:50] <Geth> ¦ MoarVM: callers are. In the worst case (which has been observed happening in

[22:50] <Geth> ¦ MoarVM: <…commit message has 8 more lines…>

[22:50] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/51197804f8

[22:51] <timotimo> "resoliving" <3

[22:52] *** robertle left
[22:52] <jnthn> Darn it, I read that like 3 times :P

[22:54] <MasterDuke> anyone mind if i merge https://github.com/MoarVM/MoarVM/pull/935 ?

[22:55] <jnthn> #include "gcc_diag.h"

[22:55] <jnthn> What's that gonna do on non-GCC?

[22:56] <timotimo> it succeeds in the clang jobs on travis at least

[22:56] <jnthn> What about MSVC?

[22:56] <MasterDuke> yeah, src/6model/reprs.c also includes it

[22:57] <timotimo> well, appveyor builds it fine

[22:57] <timotimo> nqp also does its "make install", but not its "make test" for some reason? was that deactivated?

[23:02] *** lizmat left
[23:02] * jnthn yawns

[23:02] <jnthn> Will test out that commit on my real example tomorrow at the office :)

[23:02] <jnthn> timotimo: Does appveyor use MSVC?

[23:04] <timotimo> i believe so, yes

[23:04] <timotimo> visual studio 2015

[23:04] <timotimo> "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64

[23:04] <timotimo>      compile: cl /nologo /MT /Ox /GL /DNDEBUG  /DWIN32 /DAO_ASSUME_WINDOWS98

[23:04] *** reportable6 left
[23:04] *** yoleaux left
[23:05] <timotimo> assume windows 98 m)

[23:05] <timotimo> beautiful

[23:05] *** reportable6 joined
[23:05] *** p6bannerbot sets mode: +v reportable6

[23:05] *** nativecallable6 left
[23:05] *** benchable6 left
[23:06] *** statisfiable6 left
[23:06] *** bisectable6 left
[23:06] <MasterDuke> 98se may be the first OS i ever purchased

[23:06] *** shareable6 left
[23:07] *** shareable6 joined
[23:07] <MasterDuke> either that or a red hat

[23:07] *** p6bannerbot sets mode: +v shareable6

[23:09] *** travis-ci joined
[23:09] *** p6bannerbot sets mode: +v travis-ci

[23:09] <travis-ci> MoarVM build failed. Jonathan Worthington 'Log return value types under the caller's log ID

[23:10] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/413822384 https://github.com/MoarVM/MoarVM/compare/91d2878f175c...51197804f823

[23:10] *** travis-ci left
[23:25] *** bluszcz26 joined
[23:25] *** bluszcz26 left
[23:49] *** Guest41007 joined
[23:49] <jnthn> http://season-lab.github.io/papers/osr-distilled-pldi18.pdf

[23:49] *** p6bannerbot sets mode: +v Guest41007

[23:50] *** Guest41007 left
[23:52] <timotimo> jnthn: i'd like to expose the managed size of types in the profile, any objections?

[23:52] <jnthn> No :)

[23:58] <timotimo> gnite jnthn :)

[23:59] <jnthn> timotimo: btw, I didn't read that paper yet by it may be applicable to profiling application/unapplication

[23:59] <jnthn> (Read properly, at least :)

[23:59] <jnthn> 'night

