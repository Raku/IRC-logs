[01:23] *** Kaiepi joined
[01:27] <timotimo> wow

[01:30] <timotimo> we may want to keep this branch around for brrt so he can check performance differences of using the exprjit more or less ;)

[01:45] *** Kaiepi joined
[01:58] <MasterDuke> so that branch uses the exprjit more?

[01:58] <timotimo> right, the beginning of a BB is a place where the exprjit can be "turned on"

[01:58] <timotimo> it currently turns off at every BB's end

[01:58] <timotimo> it also turns off after every sp_guard* op

[01:59] <timotimo> by preventing BBs from being fused at the end of spesh when such an operation was in the last 4 ops, I thought i'd give it the ability to start up more quickly after such ops

[02:00] <MasterDuke> hm. i didn't turn on the jit log, guess i could do that and actually count the BAILs

[02:02] <timotimo> shouldn't influence BAIL at all

[02:02] <timotimo> just the "built tree out of [a, b, c, d, e]" lines

[02:03] <timotimo> would also change the "bytecode size" lines and their sum

[02:03] <MasterDuke> ugh, not as easy to analyze

[02:07] <timotimo> yes :(

[02:11] <timotimo> i gots a one-liner for us

[02:11] <MasterDuke> i just generated two logs

[02:12] <timotimo> grep "Build tree " /tmp/no_fuse_coresettingspeshlog.txt  | perl6 -e 'slurp.comb(/\w+ )> \,/).Bag.sort.say'

[02:12] <timotimo> this counts every op in the "build tree out of" lines

[02:14] <MasterDuke> https://gist.github.com/MasterDuke17/da8a9528fb1ec465d796e507d950be0f

[02:16] <timotimo> probably want .say for ... instead of .say at the end

[02:16] <MasterDuke> hm, would that be more useful sorted by value (i.e., count)?

[02:18] <timotimo> 186943 ← no_fuse, 189182 ← master

[02:18] <timotimo> why? :\

[02:18] <timotimo> yes, it would have been :)

[02:18] <MasterDuke> gist updated

[02:19] <timotimo> well, i'm maximum confuse.

[02:19] <timotimo> maybe i got the two files flipped

[02:22] <timotimo> oh!

[02:22] <timotimo> the no_fuse_bb branch isn't based on latest master

[02:22] <timotimo> that sucks :)

[02:22] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: 65e952b9b0 | (Timo Paulssen)++ | src/spesh/optimize.c

[02:22] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: don't fuse BB right after a guard op

[02:22] <Geth> ¦ MoarVM/no_fuse_bb_after_guard:

[02:22] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: arguably the biggest beneficiary of fusing BBs

[02:22] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: is the exprjit. However, it currently bails out

[02:22] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: whenever it sees a sp_guard* op.

[02:22] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: review: https://github.com/MoarVM/MoarVM/commit/65e952b9b0

[02:22] <timotimo> force-pushed a rebase

[02:23] <timotimo> i bet that's why you asked earlier

[02:25] <MasterDuke> re-running some builds

[02:25] <timotimo> m: say 189891 / 186056

[02:25] <camelia> rakudo-moar af3538948: OUTPUT: «1.020612␤»

[02:25] <timotimo> hum. 2% more instructions fed to the exprjit

[02:25] <timotimo> doesn't seem too amazing tbh

[02:26] <timotimo> m: 17552119 / 17347709

[02:26] <camelia> rakudo-moar af3538948: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "/" in expression "17552119 / 17347709" in sink context (line 1)␤»

[02:26] <timotimo> m: say 17552119 / 17347709

[02:26] <camelia> rakudo-moar af3538948: OUTPUT: «1.011783112␤»

[02:26] <timotimo> the output grows by just over 1%, too

[02:26] <timotimo> that's the "bytecode size" there

[02:26] <timotimo> 1755... is on no-fuse-bb and the other is on master

[02:28] <MasterDuke> well, it's now about the same parse time, not slower

[02:28] <timotimo> grepping out the "Cannot handle" lines, i.e. what my fusing is about, gives me 1255 + 1172 + 115 on no_fuse   and 1010 + 846 + 110 on master

[02:29] <timotimo> which makes sense, given the exprjit tries to start more often, so it also gets to stop more often

[02:30] <timotimo> m: say 81447 / 79122

[02:30] <camelia> rakudo-moar af3538948: OUTPUT: «1.029385␤»

[02:30] <timotimo> this is the factor between "Build tree out of" line occurences

[02:31] <MasterDuke> have you read brrt's blog post? is any of that work approachable if one isn't brrt?

[02:32] <timotimo> "explicit cleanup of spesh worker thread" seems like a small addition to the spesh worker shutdown branch i made a while ago

[02:32] <timotimo> not sure about the others

[02:32] <MasterDuke> btw, gist updated

[02:32] <timotimo> jit bisect improvements might be easy

[02:33] <timotimo> m: say 79122 / 186056; say 81447 / 189891

[02:33] <camelia> rakudo-moar af3538948: OUTPUT: «0.425259␤0.428914␤»

[02:33] <timotimo> oops, those are reversed

[02:33] <timotimo> m: say 79122 R/ 186056; say 81447 R/ 189891

[02:33] <camelia> rakudo-moar af3538948: OUTPUT: «2.351508␤2.331467␤»

[02:34] <timotimo> that's the average number of instructions for every exprjit tree

[02:35] <timotimo> ideally, no expr trees would become shorter, just shorter ones being added

[02:41] <timotimo> https://gist.github.com/timo/ba2f23781b652e78af23611773e790a8 - no_fuse_bb on the left, master on the right; how many elems in the tree vs how often it happened in the log

[02:42] <timotimo> ideally it'd be more on the left every time

[02:56] <timotimo> doesn't happen in for 9, for example

[02:56] <timotimo> or 10, or 20, or 21, or 22, or 24

[02:56] <timotimo> *shrug*, everything further would have to be analysis with knowledge of the file format

[02:56] <timotimo> so i'll go to bed instead :)

[02:56] <timotimo> good night!

[02:56] <MasterDuke> later

[02:58] *** ilbot3 joined
[06:31] *** domidumont joined
[07:06] *** domidumont joined
[07:31] *** robertle joined
[07:41] *** AlexDaniel joined
[07:56] *** brrt joined
[07:56] <brrt> .

[07:56] <yoleaux> 27 Feb 2018 22:08Z <jnthn> brrt: "MoarVM in some places assumes that we have 'easy' access to the current instruction pointer, e.g. to lookup lexical variables" - did you mean s/lexical/dynamic/ ?

[07:56] <brrt> yes, that's what i meant

[07:56] <brrt> .tell timotimo the usual suspect for bigger-code in the expr jit is spilling

[07:56] <yoleaux> brrt: I'll pass your message to timotimo.

[07:57] *** zakharyas joined
[08:03] <brrt> .tell MasterDuke yes, some of these were very much intended to be easy-onramps :-)

[08:03] <yoleaux> brrt: I'll pass your message to MasterDuke.

[08:16] *** domidumont joined
[09:02] <nwc10> good *, #moarvm

[09:59] <samcv> good *

[09:59] *** domidumont joined
[10:16] *** zakharyas joined
[10:21] *** zakharyas joined
[11:55] *** robertle joined
[12:43] *** domidumont joined
[12:49] *** domidumont joined
[12:52] *** domidumont joined
[12:56] *** zakharyas joined
[12:56] *** domidumont1 joined
[14:14] *** AlexDaniel joined
[14:20] *** domidumont joined
[15:05] <timotimo> huh, i wonder if brrt could check the assembly output, because it looks .. odd to my untrained eye

[15:08] <timotimo> .tell brrt what's with the assembly near the end? add, add, and, add, add, and, add, add, xor, add, add, ror, add, add, and, add, add, and, add, add (bad) ... https://gist.github.com/timo/f6bc3b75005a530a89a8eb10cd75ef5a

[15:08] <yoleaux> timotimo: I'll pass your message to brrt.

[15:08] <timotimo> is that the constant section that i heard about?

[15:11] <timotimo> i suppose everything after "ret" is not assembly code at all

[15:38] *** buggable joined
[15:46] <dogbert2_> hmm

[15:46] <dogbert2_> ww

[15:47] <lizmat> zz

[16:01] *** Kaiepi joined
[16:15] *** lizmat_ joined
[16:19] *** jnthn_ joined
[16:24] *** samcv_ joined
[16:29] *** shareable6 joined
[16:29] *** benchable6 joined
[16:29] *** quotable6 joined
[16:29] *** bisectable6 joined
[16:31] *** timotimo joined
[16:31] *** scovit joined
[17:04] *** robertle joined
[17:24] *** greppable6 joined
[17:24] *** reportable6 joined
[17:24] *** unicodable6 joined
[18:15] *** domidumont joined
[19:28] *** Ven`` joined
[19:28] <timotimo> i wrote a little optimization that throws out repeated getspeshslots for the same sslot to the same register (if nothing else assigned to the register in the mean time)

[19:29] <timotimo> it seems spectest-happy

[19:30] <timotimo> now tbh i haven't checked how much time is actually spent in cursor_start

[19:30] <timotimo> or how often it's called

[19:30] <timotimo> but i imagine we have many pieces of code that looks like $!foo = 1; $!bar = 2; $!quux = 3; $!frob = 4

[19:36] <timotimo> in any case, cursor_start doesn't even look half bad now

[19:41] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: fb07749cea | (Timo Paulssen)++ | src/spesh/optimize.c

[19:41] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: Throw out repeated/redundant getspeshslot calls

[19:41] <Geth> ¦ MoarVM/no_fuse_bb_after_guard:

[19:41] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: if the target register and the spesh slot match

[19:41] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: and there's no instruction in between two calls

[19:41] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: that write to the same register, we can drop the

[19:41] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: later getspeshslot call.

[19:41] <Geth> ¦ MoarVM/no_fuse_bb_after_guard:

[19:41] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: <…commit message has 6 more lines…>

[19:41] <Geth> ¦ MoarVM/no_fuse_bb_after_guard: review: https://github.com/MoarVM/MoarVM/commit/fb07749cea

[20:03] *** Kaiepi joined
[20:05] *** Kaiepi joined
[20:07] *** brrt joined
[20:07] <brrt> ohai

[20:07] <yoleaux> 15:08Z <timotimo> brrt: what's with the assembly near the end? add, add, and, add, add, and, add, add, xor, add, add, ror, add, add, and, add, add, and, add, add (bad) ... https://gist.github.com/timo/f6bc3b75005a530a89a8eb10cd75ef5a

[20:07] <brrt> .tell timotimo these are 0 bytes

[20:07] <yoleaux> brrt: I'll pass your message to timotimo.

[20:07] <brrt> in the constants section of the code

[20:07] <brrt> and yes, everything after 'ret' isn't code

[20:26] *** zakharyas joined
[21:05] <brrt> ok, i want to take another shot at the box_s+box_i bug

[21:05] <brrt> my current suspicion is overspilling

[21:14] <timotimo> brrt: got a clue why preventing bb fusing after guaranteed exprjit-killers makes stage parse reliably slower?

[21:14] <yoleaux> 20:07Z <brrt> timotimo: these are 0 bytes

[21:15] <timotimo> oh, wait, MD said it's now "about the same time"

[22:02] *** Ven`` joined
[22:02] *** Kaiepi joined
[22:09] <MasterDuke> timotimo: your latest commit didn't seem to change parse time much, which i found a little surprising, since a year ago it was in 9th place by exclusive time https://gist.github.com/MasterDuke17/7926d8fc9d377a865540730621e59b03

[22:09] <yoleaux> 08:03Z <brrt> MasterDuke: yes, some of these were very much intended to be easy-onramps :-)

[22:10] <timotimo> well, who knows how much it's actually worth ;)

[22:14] *** Kaiepi joined
[22:17] *** Ven`` joined
[22:29] <timotimo> 1:20.92, 1:21.99, 1:21.57, 1:21.79  -  my branch including the commit from 3 hours ago

[22:30] <timotimo> 1:21.52, 1:20.14, 1:20.93, 1:20.43  -  master branch

[22:30] <timotimo> looks like my branch is just a tiny bit slower :(

[22:32] <timotimo> well, that isn't nice :)

[23:04] <timotimo> looks like i have a phi-common-value-merge patch that doesn't crash things

[23:07] <timotimo> ifnonnull only ever gets const-folded with my getenvhash-const-folding patches, i wonder how to make it happen more often

[23:24] *** SmokeMachine joined
[23:28] *** MasterDuke joined
[23:29] <MasterDuke> timotimo: FYI, cherry picking your getspeshslots commit on top of master seems slightly faster

[23:34] *** MasterDuke joined
