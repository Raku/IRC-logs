[00:36] *** Kaiepi left
[00:40] *** committable6 left
[00:40] *** nativecallable6 joined
[00:40] *** statisfiable6 joined
[00:40] *** bisectable6 joined
[00:40] *** greppable6 joined
[00:40] *** committable6 joined
[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: b1a0fb8301 | (Timo Paulssen)++ | src/spesh/inline.c

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: missing writer setting in inlining (return val boxing)

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: review: https://github.com/MoarVM/MoarVM/commit/b1a0fb8301

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: 31779ab2c6 | (Timo Paulssen)++ | src/spesh/optimize.c

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: Correct writer setting in coercing via elems

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: review: https://github.com/MoarVM/MoarVM/commit/31779ab2c6

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: 6caf14acb1 | (Timo Paulssen)++ | src/spesh/optimize.c

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: (optimize_not_i) this could be wrong

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes:

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: but it seems to advance speshing to an

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: optimize_iffy, which i assume came next after

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: this optimize_not_i.

[01:01] <Geth> ¦ MoarVM/extra-usage-chains-fixes: review: https://github.com/MoarVM/MoarVM/commit/6caf14acb1

[01:01] <timotimo> ^- the last commit may want a closer look. feel free to cherry-pick or rebase or straight-up steal the others

[01:01] <timotimo> still not getting past the first file in nqp

[01:29] *** stmuk_ joined
[01:32] *** stmuk left
[01:37] *** benchable6 joined
[03:55] *** MasterDuke joined
[05:04] *** stmuk joined
[05:06] *** brrt joined
[05:07] *** stmuk_ left
[05:56] <brrt> \o

[06:16] *** releasable6 joined
[06:29] *** robertle joined
[06:44] *** domidumont joined
[06:49] *** domidumont left
[06:50] *** domidumont joined
[07:00] <brrt> what would we think of aliging nursery allocations either at or within a cache line

[07:00] <brrt> (assuming 64 bytes cache line size)

[07:00] <nwc10> first question I'd ask is how much "wastage" this rounding would cause?

[07:00] <nwc10> (I assume that it increases nursury throughput, but is that extra pressure massive?)

[07:01] <nwc10> actually, second question is "does the increase in cache misses due to using more memory overall cost more than the alignment wins?"

[07:01] <brrt> the answer is 'I don't know'

[07:01] <brrt> the reason I'm asking is that I want to figure out how much I can affort to make MVMString larger with an in-situ buffer

[07:01] <nwc10> OK, but they seem like useful things to estimate

[07:02] <nwc10> aha. So *it* would always grow to a cache line

[07:02] <nwc10> and everything else gets the extra space/alignment for free?

[07:02] <brrt> That would be one possible way of doing it, yews

[07:02] <brrt> I don't know how many small objects we have, most of them probably are, I think

[07:03] <brrt> *afford

[07:03] <nwc10> OK, I'm not sure if I can add anything more intelligent to this than I'd be curious about those two questions

[07:03] <brrt> It'd probably depend on the size distribution of objects

[07:03] <brrt> my guess is that most objects will be smaller than 64 bytes

[07:04] <brrt> at most, we're doubling our nursery usage because we'd be leaving 31-byte holes between allocations

[07:05] <brrt> oh, hang on, MVMStringBody is 24 bytes, but we have to add the header to that as well

[07:10] <brrt> ok, so with everything in it, we have 48 byte string object header

[07:12] <brrt> to fill that up to 64 byte, we can still add 16 bytes, giving us a 24 byte string

[07:13] <brrt> or, a 6 grapheme string

[07:13] <brrt> that would mean most of rakudos keywords etc. would fit in-situ

[07:19] <brrt> on the other hand, the fact that our header is 24 byte already, makes it quite unlikely that any objects can share cache lines

[07:31] *** brrt left
[07:56] *** zakharyas joined
[07:58] *** zakharyas left
[08:03] *** dogbert17 left
[08:06] *** benchable6 left
[08:07] *** benchable6 joined
[08:07] *** nativecallable6 left
[08:07] *** statisfiable6 left
[08:07] *** bisectable6 left
[08:07] *** greppable6 left
[08:07] *** committable6 left
[08:07] *** committable6 joined
[08:07] *** greppable6 joined
[08:07] *** bisectable6 joined
[08:07] *** statisfiable6 joined
[08:07] *** nativecallable6 joined
[08:08] *** releasable6 left
[08:23] *** domidumont left
[08:23] *** lizmat joined
[08:25] *** domidumont joined
[08:30] *** AlexDaniel`` joined
[09:03] <samcv> when is the --no-jit going to be fixed? would like to bump moar soonish

[09:05] *** releasable6 joined
[09:05] <nwc10> samcv: not sure, but we're safe from football-shaped distraction for about 33 hours

[09:10] <Geth> ¦ MoarVM: 4830f82326 | (Samantha McVey)++ | src/jit/core_templates.expr

[09:10] <Geth> ¦ MoarVM: Add add_I expr JIT template and sort expr templates

[09:10] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4830f82326

[09:21] <jnthn> samcv: Not sure how long it will take to fix; the way it breaks gave very few clues. I'll have a got at it later today

[09:21] <samcv> okay. thanks

[09:22] *** ilmari left
[09:22] <jnthn> *go

[09:23] *** ilmari joined
[09:23] *** ilmari left
[09:23] *** ilmari joined
[09:28] *** travis-ci joined
[09:28] <travis-ci> MoarVM build failed. Samantha McVey 'Add add_I expr JIT template and sort expr templates'

[09:28] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/401674450 https://github.com/MoarVM/MoarVM/compare/a24033eb0f39...4830f823263a

[09:28] *** travis-ci left
[09:30] *** brrt joined
[09:41] *** brrt left
[09:43] *** klapperl joined
[10:32] <jnthn> Taking a look at the no-jit issue now

[10:35] <jnthn> Might be deopt related.

[10:35] <jnthn> The frame it's in when it crashes is also the last one that was reported to have deopted

[10:36] *** zakharyas joined
[10:40] <samcv> jnthn: is that related to the appveyor issue too?

[10:41] <jnthn> No idea

[10:41] <jnthn> Does it try a --no-jit build? If so possible

[10:41] <jnthn> (Or if it's a 32-bit build, then yes, because there's no JIT available for that.)

[10:41] *** brrt joined
[10:50] *** AlexDani` joined
[10:52] *** AlexDaniel left
[10:59] <Geth> ¦ MoarVM: 0e11082046 | (Samantha McVey)++ | 13 files

[10:59] <Geth> ¦ MoarVM: Make a faster HASH_ITER macro and make other hash optimizations

[10:59] <Geth> ¦ MoarVM:

[10:59] <Geth> ¦ MoarVM: HASH_ITER_FAST is faster and it doesn't randomize bucket order (though

[10:59] <Geth> ¦ MoarVM: it's faster regardless of that).

[10:59] <Geth> ¦ MoarVM:

[10:59] <Geth> ¦ MoarVM: Makes the biggest difference when we are iterating a hash with a LOT of

[10:59] <Geth> ¦ MoarVM: keys in it, such as adding a million keys to a hash then deleting and

[10:59] <Geth> ¦ MoarVM: <…commit message has 8 more lines…>

[10:59] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0e11082046

[10:59] <Geth> ¦ MoarVM: a2ca33bad9 | (Samantha McVey)++ (committed using GitHub Web editor) | 13 files

[10:59] <Geth> ¦ MoarVM: Merge pull request #901 from samcv/iterspeed

[10:59] <Geth> ¦ MoarVM:

[10:59] <Geth> ¦ MoarVM: Make a faster HASH_ITER macro and make other hash optimizations

[10:59] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a2ca33bad9

[11:05] <Geth> ¦ MoarVM: caef82f1bd | (Jonathan Worthington)++ | src/spesh/inline.c

[11:05] <Geth> ¦ MoarVM: Correctly update OSR deopt index upon inlining

[11:05] <Geth> ¦ MoarVM:

[11:05] <Geth> ¦ MoarVM: Otherwise, we end up with the wrong index, which leads to overwriting

[11:05] <Geth> ¦ MoarVM: the correct deopt offset with a bogus one. This caused a crash when

[11:05] <Geth> ¦ MoarVM: building NQP with JIT disabled, introduced since we started being able

[11:05] <Geth> ¦ MoarVM: to inline non-specialized code. This wasn't originally noticed, since

[11:05] <Geth> ¦ MoarVM: the JIT doesn't care for those indexes, and so everything worked under

[11:05] <Geth> ¦ MoarVM: JIT, and only failed in the case of running quickened bytecode.

[11:05] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/caef82f1bd

[11:06] <jnthn> samcv: ^^ seems to help, guess Travis will tell us soonish :)

[11:06] <lizmat> whee!

[11:06] <samcv> yay

[11:07] <jnthn> lunch time, bbiab

[11:16] <brrt> jnthn++

[11:17] <brrt> (one line fixes++)

[11:27] *** travis-ci joined
[11:27] <travis-ci> MoarVM build passed. Jonathan Worthington 'Correctly update OSR deopt index upon inlining

[11:27] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/401710670 https://github.com/MoarVM/MoarVM/compare/a2ca33bad9cf...caef82f1bd5a

[11:27] *** travis-ci left
[11:31] <samcv> \o/

[11:32] <nwc10> jnthn++ # a very well earned lunch

[11:33] <brrt> first approximation says that for most object types, we can never share a cache line

[11:34] <brrt> also, that we'd be using nursery space approximately 50% faster

[11:34] <brrt> (so that we either need more nursery space or accept more GC)

[11:34] <timotimo> i do believe the nursery size is this size because of l2 cache size? (or l3?)

[11:35] <brrt> that is processor dependent though :-)

[11:36] <brrt> as in, you buy a more expensive machine, you get more cache

[11:36] <timotimo> mhm

[11:51] *** zakharyas left
[11:52] *** zakharyas joined
[11:59] <samcv> brrt: windows appveyor says: src\jit\x64\emit.dasc:2927: error: missing operand size in `mov x?,i?':

[12:00] <samcv> https://ci.appveyor.com/project/samcv/moarvm-35u74/build/1.0.911/job/9fyg6vjaytd3we2x#L442 shows up on 32 and 64bit

[12:01] <brrt> hmmm

[12:02] <nwc10> http://paste.scsys.co.uk/578897 --  ASAN very very excited by the NQP build - use-after-free everywhere.

[12:02] <nwc10> backtraces have src/6model/reprs/MVMHash.c

[12:03] <lizmat> samcv: ^^^

[12:04] <nwc10> I *think* that it's that, but now testing the commit before jnthn's last one to be more confident

[12:04] <samcv> yeah guessing it's my change

[12:04] <nwc10> yes, not jnthn's most recent change

[12:05] <nwc10> in case it matters, I have

[12:05] <nwc10> +#define FSA_SIZE_DEBUG 1

[12:05] <nwc10> and

[12:05] <nwc10> +#define MVM_ARRAY_CONC_DEBUG 1

[12:05] <jnthn> Phew, I'm off the hook for once :)

[12:06] <nwc10> and

[12:06] <nwc10> MVM_SPESH_BLOCKING=1

[12:06] <nwc10> MVM_SPESH_NODELAY=1

[12:14] <nwc10> samcv: yes, it's commit 0e11082046de74f1c1cb78fda6993b668fe8eca1

[12:19] <Geth> ¦ MoarVM: cb9ddae582 | (Bart Wiegmans)++ | src/jit/x64/emit.dasc

[12:19] <Geth> ¦ MoarVM: [JIT] Add sizes to ARG5/ARG6 memory definitions

[12:19] <Geth> ¦ MoarVM:

[12:19] <Geth> ¦ MoarVM: Otherwise DynASM on windows will rightly complain

[12:19] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cb9ddae582

[12:19] <brrt> samcv++

[12:19] * jnthn figures he should try and get his Rakudo rescalar branch into mergeable shape before pressing ahead with the du-chain stuff

[12:28] <Geth> ¦ MoarVM: 26860430a7 | (Jonathan Worthington)++ | src/core/frame.c

[12:28] <Geth> ¦ MoarVM: Don't leak a real NULL from getcodeobj

[12:28] <Geth> ¦ MoarVM:

[12:28] <Geth> ¦ MoarVM: We should only ever store a VMNull into a register, not a real NULL.

[12:28] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/26860430a7

[12:32] <jnthn> m: use nqp; say nqp::iscont(item(my %h))

[12:32] <camelia> rakudo-moar e93032a9a: OUTPUT: «1␤»

[12:34] <timotimo> that sounds like it's the source of these segfaults in guard instructions

[12:36] *** travis-ci joined
[12:36] <travis-ci> MoarVM build errored. Bart Wiegmans '[JIT] Add sizes to ARG5/ARG6 memory definitions

[12:36] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/401734087 https://github.com/MoarVM/MoarVM/compare/caef82f1bd5a...cb9ddae58238

[12:36] *** travis-ci left
[12:39] <brrt> oh, that is apt hate

[12:42] <jnthn> timotimo: Yeah, there were two crashing tests in rescalar thanks to that

[12:44] <timotimo> i think i also saw it in profiling related crashes

[12:45] <timotimo> jnthn: i took the liberty to make an edit in your callwith/callsame example; you appear to have copy-pasto'd 42 in the second example instead of 4.2

[12:46] <timotimo> only in the "cando" case, not the actual call example directly below it

[12:48] <jnthn> timotimo: ah, thanks :)

[13:14] *** zakharyas left
[13:37] <samcv> nwc10: ok i figured out the asan errors

[13:37] <nwc10> \o/ (I hope)

[13:37] <samcv> well i fixed that issue. now i have a different one :P

[13:38] <samcv> ah probably because i didn't change uthash.h i just edited it into that file.

[13:48] <Geth> ¦ MoarVM: ed7ab67735 | (Samantha McVey)++ | src/strings/uthash.h

[13:48] <Geth> ¦ MoarVM: Fix asan errors by assigning before assigning hh_next

[13:48] <Geth> ¦ MoarVM:

[13:48] <Geth> ¦ MoarVM: It worked fine most of the time, just had issues when you tried to free

[13:48] <Geth> ¦ MoarVM: the entries while iterating. If you tried to free what held the next

[13:48] <Geth> ¦ MoarVM: reference ASAN would complain, and would likely cause issues in the

[13:48] <Geth> ¦ MoarVM: future.

[13:48] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ed7ab67735

[13:50] <Geth> ¦ MoarVM: c42255f865 | (Samantha McVey)++ | src/math/grisu.c

[13:50] <Geth> ¦ MoarVM: Use a macro for unsigned long long on MSVC

[13:50] <Geth> ¦ MoarVM:

[13:50] <Geth> ¦ MoarVM: Before we were just ignoring the warning with a pragma. I thought I read

[13:50] <Geth> ¦ MoarVM: that older MSVC's didn't support it, while newer will warn, but

[13:50] <Geth> ¦ MoarVM: regardless, use the format MSVC wants.

[13:50] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c42255f865

[13:51] <brrt> samcv++ (this has bitten me 100 times)

[13:52] <samcv> brrt: what did you end up doing?

[13:52] <samcv> also i was thinking of making MVM_C_CONSTANT_I32 since Unsigned is different size on linux than windows

[13:54] <brrt> not the unsinged long thing, although I've fixed that with ... some other header

[13:54] <samcv> wonder do we check the size of long's and int's?

[13:54] <samcv> oh which thing?

[13:54] <samcv> the asan messages?

[13:55] <brrt> yeah

[13:55] <samcv> sorry :P

[13:55] <brrt> :-)

[13:55] <brrt> it happens when you write C

[13:55] <samcv> i tested it heavily, though less heavily with ones that free'd objects

[13:55] <samcv> so i tested it all, then ended up changing almost all of them

[13:55] <brrt> .oO( I wonder why they call C 'insecure' )

[13:55] <nwc10> samcv: looks good. build ongoing

[13:55] <brrt> one of my existential worries is that I'm writing C and ... in the future no-one will

[13:56] <nwc10> previosly there was an explosion of multicoloured pavement pizza within a few seconds

[13:59] <nwc10> All tests successful.

[13:59] <samcv> brrt: so you think there's a header file that defines ULL for windows? or what.

[13:59] <samcv> wasn't sure you could define suffixes with macros

[14:02] <Geth> ¦ MoarVM: cae4731e2c | (Carl Masak)++ | docs/bytecode.markdown

[14:02] <Geth> ¦ MoarVM: Fix typo

[14:02] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cae4731e2c

[14:15] <brrt> hmm, i thougth that'd be stdint

[14:15] <brrt> (hey, masak lives ;-))

[14:42] <brrt> samcv: stdint.h has macros for sized integer constants

[14:42] <brrt> in src/core/bitmap.h i'm using that for example to get an usigned 64 bit '1'

[14:48] <brrt> UINT64_C(x); you could have the same for UINT32_C

[14:49] <Redfoxmoon> one of my existential worries is that I'm writing C and ... in the future no-one will <-- no matter the amount of hipster languages, that will never change :P

[14:50] <samcv> brrt: oh nice

[14:51] <brrt> Redfoxnoon: I don't know

[14:52] <brrt> I would've thought C was 'stable' in place for a couple more years. But 'security' is becoming more and more important

[14:52] <Redfoxmoon> *for sure*

[14:52] <Redfoxmoon> You can write secure C code

[14:52] <brrt> but people don't

[14:52] <Redfoxmoon> so?

[14:52] <Redfoxmoon> you can write shit code with hipster languages too...

[14:52] <brrt> and learning to write secure C code is so vastly different from learning to write perl code

[14:53] <brrt> or java code or even from c++ code

[14:53] *** dogbert17 joined
[14:53] <brrt> substitute 'secure' with 'good' and it's still true

[14:53] <Redfoxmoon> :P

[14:53] <Redfoxmoon> but you still need C to write the bedrock for the new hipster languages

[14:53] <brrt> you kind of don't

[14:54] <Redfoxmoon> I don't exactly see perl becoming a true compiled language just yet.

[14:54] <timotimo> yeah, wouldn't they self-host?

[14:54] <brrt> writing an assember isn't that hard of a job

[14:54] <Redfoxmoon> :P

[14:54] <timotimo> "it's too hard to write secure C, so we decided to write assembly instead"

[14:54] <brrt> Redfoxnoon: no (although I'd like to have it :-))

[14:54] <brrt> a self-hosting language would need an assembler at some point

[14:54] <Redfoxmoon> I'd like moarvm to not use any perl5 crap first

[14:54] <Redfoxmoon> :-)

[14:55] <Redfoxmoon> something-something native windows port

[14:55] <timotimo> crap? that's not a nice thing to say.

[14:55] <Redfoxmoon> perl5 is an ungodly mess :/

[14:56] <Redfoxmoon> It's even worse when you're dealing with a PE target where you can't have undefined references at link time

[14:56] <timotimo> what is PE?

[14:57] <timotimo> i knew it once

[14:57] <Redfoxmoon> The executable format used by win32 on Windows :P

[14:58] <timotimo> oh, i knew that

[14:58] <timotimo> i thought it was something more general

[14:58] <Redfoxmoon> so yeah.

[14:59] <Redfoxmoon> I wanted to add moarvm to midipix, a new posix layer for windows, but as our perl5 port is currently broken due to PE versus ELF issues

[14:59] <Redfoxmoon> that's impossible:-)

[14:59] <brrt> Redfoxnoon: I happen to like perl5

[14:59] <Redfoxmoon> perl5 is an okay language, the reference implementation is not

[15:00] <brrt> have you tried Perlito :-)

[15:00] <Redfoxmoon> I dare say it's horrible

[15:00] <Redfoxmoon> isn't that dead

[15:00] <brrt> anyway, can the perl 5 porters folks help you

[15:00] <brrt> well, not really

[15:00] <Redfoxmoon> I asked, but since we're using perl-cross to build the thing -at all-

[15:00] <Redfoxmoon> I don't think they're gonna be willing to put any serious effort in.

[15:00] <brrt> hmmm

[15:01] <brrt> anyway, I can't speak for that

[15:01] <brrt> having perl5 as a build-time dependency is something we've discussed

[15:01] <dogbert17> turns out that brrt's objprimunsigned fix managed to resolve https://github.com/MoarVM/MoarVM/issues/890

[15:01] <Redfoxmoon> cross compilation with the default build system for perl5 is...bad:-)

[15:01] <Redfoxmoon> it basically requires an SSH server on the target to run tests on.

[15:01] <brrt> dogbert17: yay!

[15:02] <timotimo> how else are you supposed to test, though

[15:02] <brrt> (don't run tests then?)

[15:02] <Redfoxmoon> :')

[15:02] <dogbert17> brrt, will make a comment to that effect and close it

[15:03] <brrt> ty

[15:03] <Redfoxmoon> Yeah I wish.

[15:03] <jnthn> Anyone know any reason not to bump MOAR_REVISION in NQP at present?

[15:04] * lizmat doesn't

[15:04] <lizmat> and would welcome one

[15:04] <Redfoxmoon> it might be doable to manually feed in *EVERYTHING* it needs to test for in the default build system for perl5 needs

[15:04] <Redfoxmoon> but then there's still the PE versus ELF issue

[15:04] <lizmat> jnthn: want me to do it ?

[15:05] <jnthn> lizmat: No, already got it done, just wanted to ask before pushing :)

[15:05] <lizmat> okidoki

[15:07] <jnthn> I did a SEGV fix earlier than is depended on by the rescalar branch

[15:07] <dogbert17> I believe that we're problem free atm (famous last words)

[15:08] <jnthn> Well, certainly the problem free() was fixed by samcv++ :)

[15:10] <dogbert17> I'll rebuild and try to break it but I suspect that nwc10 has already found everything of note :)

[15:10] *** brrt left
[15:11] <timotimo> jnthn: will we be using the results from du-chains to fix spesh usage counts on master before the release and merge du-chains after the release?

[15:13] <jnthn> No, because the API for mainpulating spesh usage counts changes with it

[15:13] <jnthn> I think we'll be able to get it fixed up and merged this week

[15:13] <timotimo> i meant not the code but the knowledge about missing places for usage calc

[15:14] <timotimo> but that's fine, too :)

[15:15] <lizmat> that brings test-t below 2 seconds for me

[15:15] <timotimo> what was it before?

[15:15] <lizmat> just above it

[15:15] <timotimo> OK, so not likely going to get tux below 2, too ;)

[15:16] <lizmat> I don't think so, but below 2.2 would be possible, I think

[15:16] <jnthn> lizmat: Which "that"?

[15:16] <lizmat> your MoarVM bump

[15:16] <jnthn> ah :)

[15:16] <lizmat> well, we'll know shortly, I guess

[15:22] <lizmat> jnthn: your last merge commit seems to have made things slower, is that to be expected ?

[15:22] <timotimo> by how much?

[15:23] <jnthn> lizmat: It's not surprisng.

[15:23] <jnthn> I've still a list of things to tune

[15:23] <lizmat> .930 -> .965 for test-t --race

[15:24] <jnthn> m: say .930 / .965

[15:24] <lizmat> also: memory use for building seems to top out at 1.24G atm, not sure what it was before

[15:24] <camelia> rakudo-moar 8fa994146: OUTPUT: «0.963731␤»

[15:25] <jnthn> I didn't yet put in optimizations for hash auto-viv, nor Nil assignment

[15:25] <jnthn> Those could easily account for something

[15:25] <lizmat> ok...  so one step back to be able to take N steps forward

[15:25] <lizmat> :-)

[15:25] <timotimo> hopefully N² or better :P

[15:25] <lizmat> hmmm... noise

[15:26] <lizmat> now I got a test-t run of .908

[15:26] <lizmat> which would make it better than before

[15:26] <lizmat> grrr

[15:26] <jnthn> Yes. The change here is to provide a path to doing various other important things, so much as the immediate win.

[15:26] <jnthn> heh :)

[15:26] <jnthn> The -20 ones are perhaps less noisy

[15:29] <jnthn> I figure I'll focus on the du-chains stuff next, then return to more opts for the Scalar stuff after

[15:35] <Geth> ¦ MoarVM/du-chains-and-opts: 8e63146013 | (Timo Paulssen)++ (committed by Jonathan Worthington) | src/spesh/inline.c

[15:35] <Geth> ¦ MoarVM/du-chains-and-opts: missing writer setting in inlining (return val boxing)

[15:35] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/8e63146013

[15:35] <Geth> ¦ MoarVM/du-chains-and-opts: c1cc62679d | (Timo Paulssen)++ (committed by Jonathan Worthington) | src/spesh/optimize.c

[15:35] <Geth> ¦ MoarVM/du-chains-and-opts: Correct writer setting in coercing via elems

[15:35] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/c1cc62679d

[15:45] *** zakharyas joined
[15:48] <Geth> ¦ MoarVM/du-chains-and-opts: baa7f66947 | (Timo Paulssen)++ (committed by Jonathan Worthington) | src/spesh/optimize.c

[15:48] <Geth> ¦ MoarVM/du-chains-and-opts: Fix optimization of isfalse to set writer

[15:48] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/baa7f66947

[15:48] <jnthn> timotimo: Took first two as is, third with corrections. Thanks!

[15:54] <Geth> ¦ MoarVM/du-chains-and-opts: 23ecdc5a76 | (Jonathan Worthington)++ | src/spesh/usages.c

[15:54] <Geth> ¦ MoarVM/du-chains-and-opts: Add check that all readers in DU chain are present

[15:54] <Geth> ¦ MoarVM/du-chains-and-opts:

[15:54] <Geth> ¦ MoarVM/du-chains-and-opts: This makes sure that we don't have any reads that are not represented

[15:54] <Geth> ¦ MoarVM/du-chains-and-opts: in the users list.

[15:54] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/23ecdc5a76

[15:59] *** domidumont left
[16:20] *** domidumont joined
[16:28] <Geth> ¦ MoarVM/du-chains-and-opts: 59fc280ce3 | (Jonathan Worthington)++ | src/spesh/usages.c

[16:28] <Geth> ¦ MoarVM/du-chains-and-opts: Ensure a big PHI can't cause an overflow

[16:28] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/59fc280ce3

[16:28] <Geth> ¦ MoarVM/du-chains-and-opts: 0ef24ff9f0 | (Jonathan Worthington)++ | 2 files

[16:28] <Geth> ¦ MoarVM/du-chains-and-opts: Correct various missing usage bumps

[16:28] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/0ef24ff9f0

[16:28] <Geth> ¦ MoarVM/du-chains-and-opts: 673a8a2734 | (Jonathan Worthington)++ | src/spesh/optimize.c

[16:28] <Geth> ¦ MoarVM/du-chains-and-opts: Don't do the usage validation so often

[16:28] <Geth> ¦ MoarVM/du-chains-and-opts:

[16:28] <Geth> ¦ MoarVM/du-chains-and-opts: It's rather costly, and slows things down a good bit too much to do it

[16:28] <Geth> ¦ MoarVM/du-chains-and-opts: after each processed instruction.

[16:28] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/673a8a2734

[16:34] <Geth> ¦ MoarVM/du-chains-and-opts: b558cc9e25 | (Jonathan Worthington)++ | src/spesh/args.c

[16:34] <Geth> ¦ MoarVM/du-chains-and-opts: Fix spesh arg box writer/usage handling

[16:34] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/b558cc9e25

[16:34] <jnthn> Damn, the usage checks are slow :)

[16:34] <jnthn> But it's getting a lot further now :)

[16:34] <jnthn> Oh, it's doing them every BB

[16:43] <Geth> ¦ MoarVM/du-chains-and-opts: 11fcf2a85e | (Jonathan Worthington)++ | src/spesh/optimize.c

[16:43] <Geth> ¦ MoarVM/du-chains-and-opts: Check usages one after main opts

[16:43] <Geth> ¦ MoarVM/du-chains-and-opts:

[16:43] <Geth> ¦ MoarVM/du-chains-and-opts: Checking it after every basic block is too much of a slowdown, now

[16:43] <Geth> ¦ MoarVM/du-chains-and-opts: that we get quite far with the checks enabled.

[16:43] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/11fcf2a85e

[16:43] <jnthn> With MVM_SPESH_BLOCKING=1 on, that branch now reaches the NQP test suite and fails 2 tests

[16:43] <jnthn> Will do it under NODELAY after fixing that, to tease out some more issues

[16:44] <jnthn> And once that lot is working, will write the third check, which is making sure that there's no bogus entries in the usage list

[16:46] <jnthn> cooking &

[16:59] *** zakharyas left
[17:17] *** brrt joined
[17:21] * [Coke] misreads BB as "big blind"

[17:21] <yoleaux> 16:48Z <Zoffix> [Coke]: sent you an email about my grant

[17:24] *** AlexDani` is now known as AlexDaniel

[17:56] *** brrt left
[18:02] *** MasterDuke left
[18:54] *** domidumont left
[19:24] *** domidumont joined
[19:24] *** AlexDaniel left
[19:25] *** domidumont left
[20:17] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/07/09/2018-28-introduction-to-perl-6/

[20:33] <moritz> lizmat++

[20:51] *** MasterDuke joined
[21:27] *** MasterDuke left
[21:27] <samcv> lizmat++

[21:29] *** MasterDuke joined
[21:36] *** brrt joined
[21:49] <brrt> I have a mad plan

[21:49] <brrt> I want to make MoarVM fork()-safe

[21:50] <brrt> I'm fairly sure this is possible

[21:56] <jnthn> *sob*

[21:56] <jnthn> I...really? :)

[21:57] <brrt> why the cry?

[21:57] <jnthn> I suspect it's technically possible but...at what cost?

[21:57] <brrt> of leveraging completely unrelated functionality, of course

[21:57] <brrt> we already have a gc sync point mechanism, don't we

[21:58] <brrt> so, we can ask nicely for all threads to join up, and provided they're not infinitely looping in nativecall, eventually they will

[21:59] <brrt> when that happens, the fork-ing thread either has to stop, or pause, the uv loop thread and spesh thread

[21:59] <jnthn> The thread pool scheduler is by a bunch of threads waiting on a condvar

[22:00] <brrt> better still

[22:00] <jnthn> And never willingly exits

[22:00] <jnthn> Of course to some degree we control the execution

[22:00] <jnthn> But still, locks, threads waiting for locks, etc.

[22:00] <brrt> again, provided no deadlock happens

[22:01] <brrt> and i'm not saying this mechanism isn't about to be very expensive

[22:01] <timotimo> one way to kill threads is to send a task over that throws a specific exception to stop the work loop

[22:01] <brrt> i'm fine with ridculously expensive mechanisms

[22:02] <brrt> (yes, or maybe some simpler sentinel value)

[22:02] <brrt> what i'm not entirely at ease with, is telling people that the only concurrency mechanism we give is a thread

[22:03] <brrt> there is more than one way to do it, etc

[22:03] <Geth> ¦ MoarVM/du-chains-and-opts: 2f88d0e249 | (Jonathan Worthington)++ | src/spesh/plugin.c

[22:03] <Geth> ¦ MoarVM/du-chains-and-opts: Set writers on spesh plugin getattr code-gen

[22:03] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/2f88d0e249

[22:06] <brrt> so yeah, I think there'll be a cost, but that cost would only be payed by a user who actually forks()

[22:07] <brrt> *paid

[22:11] <brrt> i'd be happy already if nothing came out of it but a way to run ASAN-clean without MVM_SPESH_BLOCKING

[22:11] <brrt> i.e. that allocations in the spesh thread would not be considered leaks

[22:14] <MasterDuke> it'd also be nice if --full-cleanup worked

[22:15] <brrt> yes :-)

[22:19] <TimToady> +1 to making impossible things merely difficult

[22:20] <TimToady> as long as no implementors are tormented in the process...oh wait...

[22:20] <brrt> hehe

[22:20] <brrt> I'm not saying it'll be a smashing success

[22:20] <brrt> in all likelihood it won't

[22:22] <TimToady> for some p5 shops, fork is a poor-man's deployment mechanism where a process is being used as a container

[22:23] <TimToady> so a mess of forks at the beginning, then steady state

[22:23] <TimToady> this might help such a shop

[22:24] <jnthn> It may. Note that precomp is also done via async proc spawning, which isn't a problem if you installed all modules properly

[22:24] <jnthn> But it's not quite as simple as "if the user didn't themselves spawn a thread then fork() is OK", because both Rakudo and MoarVM internally make use of threads.

[22:24] <TimToady> well, just thinking about how they migrate their current million-line P5 program piecemeal to P6

[22:24] <jnthn> s/But/So

[22:25] <jnthn> But if we can make it survive the usages of threads in MoarVM and Rakudo that the user doesn't themselves cause, we may well be able to do it.

[22:26] <jnthn> Heck, the precomp thing could even use a fresh scheduler and then tell it to kill its threads after.

[22:26] <jnthn> That only leaves the spesh thread and the VM event loop thread

[22:26] <brrt> I think that's doable, yes, and more ambitiously i'd ask the question 'do we want the user to specify if we want to restore their thraeds'

[22:26] <brrt> but that is maybe a bit too much madness

[22:26] <jnthn> It is, and also this may end up with us having to build our own locks.

[22:26] <jnthn> Which other things might force on us anyway.

[22:26] <brrt> hmmm

[22:26] <jnthn> (The JVM does that.)

[22:27] <brrt> fair enough. didn't think so much ahead about locks tbh

[22:27] <jnthn> Ah, but that's what makes this hard :)

[22:27] <jnthn> They provide a "park" mechanism

[22:27] <jnthn> When you have that then you can interupt a bunch more threads that you otherwise could not.

[22:27] * TimToady refrains from making a pun on channels and locks

[22:28] <jnthn> :D

[22:31] <brrt> i'm too nonenglish to see a pun, so i'm missing it :-)

[22:31] <brrt> anyway, /me -> sleep

[22:31] <brrt> i'll think about it some more :-)

[22:32] <jnthn> .oO( The pun, for the fork thing? :P )

[22:33] <jnthn> *or

[22:33] * jnthn wrote the third bit of the DU chain checker, now that we're almost working with the other one

[22:33] <jnthn> Which checks if we have uses left in the chain that don't show in the graph

[22:34] <timotimo> i.e. a user (instruction) that has been removed from the next/prev links of the instructions themselves but is still in the users list?

[22:34] <jnthn> Or an instruction where the operand changed but we didn't delete the usage first

[22:34] <jnthn> Basically, all the places we mis-manage usage decrements and so might keep an instruction alive when we needn't

[22:34] <timotimo> good

[22:35] <jnthn> reading sp_getarg_o of 0(2) not in graph

[22:35] <jnthn> That's fascinating, given the instruction writes r0(2) :P

[22:36] *** brrt left
[22:41] *** AlexDaniel joined
[22:42] <lizmat> m: { say "foo" }   # this Block is run because it is sunk, is it not ?

[22:42] <camelia> rakudo-moar 68ed6f2d8: OUTPUT: «foo␤»

[22:44] <jnthn> oh, duh, I got the diagnostic output wrong, it's a PHI that was doing the reading...

[22:45] <lizmat> m: say .file ~ ":" ~ .line with Block.can("sink")[0]   # but the Block.sink is Mu.sink, which doesn't do anything

[22:45] <camelia> rakudo-moar 68ed6f2d8: OUTPUT: «SETTING::src/core/Mu.pm6:13␤»

[22:46] <lizmat> so I guess bare blocks are codegenned differently ?

[22:48] <jnthn> Yes, it's a compile-time decision

[22:48] <jnthn> In circumfix:sym<{ }> iirc

[22:49] <MasterDuke> while people are around, anybody have thoughts/comments on my tuple of PRs to rename nqp::getstrfromname?

[22:49] <lizmat> +1 from me

[22:50] <Geth> ¦ MoarVM/du-chains-and-opts: 901ccf7692 | (Jonathan Worthington)++ | src/spesh/manipulate.c

[22:50] <Geth> ¦ MoarVM/du-chains-and-opts: Instruction deletion should delete usage, not add

[22:50] <Geth> ¦ MoarVM/du-chains-and-opts:

[22:50] <Geth> ¦ MoarVM/du-chains-and-opts: Thinko found while looking into unexpectedly leftover instruction

[22:50] <Geth> ¦ MoarVM/du-chains-and-opts: usages in the graph.

[22:50] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/901ccf7692

[22:52] <jnthn> oh, fascinating, a PHI can have the same register in it twice?!

[22:52] <MasterDuke> one things that's missing, but impossible to add ahead of time as far as i know, is MoarVM and NQP bumps in the NQP and Rakudo PRs respectively

[22:53] <timotimo> oh, yeah

[22:53] <timotimo> it does that a bunch of times

[22:53] <timotimo> i tried to fix that at some point by reducing the registers in the phi to be one per version

[22:53] <jnthn> Guess there's a sensible-ish reason

[22:53] <jnthn> Anyway, it's a one line change for my error detector to cope with it

[22:54] <timotimo> that's good

[22:54] <timotimo> i also had the fun situation where a phi with only two arguments was in there, and removing it made things asplode :)

[22:55] <jnthn> Now the detector throws up a non-PHI issue :)

[22:55] <jnthn> MoarVM oops: Malformed DU chain: reading goto of 16(6) not in graph

[22:56] <jnthn> I bet that's something rewritten into a goto without decrementing the usage of the conditional instruction :)

[22:56] <timotimo> probably

[22:56] <timotimo> should be easy to find, info.*get_op.*goto

[22:58] <Geth> ¦ MoarVM/du-chains-and-opts: 59b6fe6b20 | (Jonathan Worthington)++ | 2 files

[22:58] <Geth> ¦ MoarVM/du-chains-and-opts: Add detection of missing usage deletions

[22:58] <Geth> ¦ MoarVM/du-chains-and-opts:

[22:58] <Geth> ¦ MoarVM/du-chains-and-opts: So that we can find out where we have uses of values that are not in

[22:58] <Geth> ¦ MoarVM/du-chains-and-opts: the graph, but still listed in the DU chain. This means we didn't

[22:58] <Geth> ¦ MoarVM/du-chains-and-opts: properly delete the usage, and so might keep alive an instruction we

[22:58] <Geth> ¦ MoarVM/du-chains-and-opts: could otherwise delete.

[22:58] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/59b6fe6b20

[23:00] <MasterDuke> jnthn++  just compiling rakudo now after pulling your recent merge and stage parse is definitely a second or three faster

[23:13] <Geth> ¦ MoarVM/du-chains-and-opts: 31a1ee85d8 | (Jonathan Worthington)++ | 2 files

[23:13] <Geth> ¦ MoarVM/du-chains-and-opts: Fix various missing operand use deletions

[23:13] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/31a1ee85d8

[23:13] <jnthn> MasterDuke: Nice :-)

[23:18] <jnthn> Calling it a night. More usage mess-up hunting tomorrow. :)

[23:26] *** releasable6 left
[23:26] *** greppable6 left
[23:26] *** bisectable6 left
[23:26] *** statisfiable6 left
[23:26] *** nativecallable6 left
[23:26] *** benchable6 left
[23:27] *** benchable6 joined
[23:27] *** statisfiable6 joined
[23:27] *** bisectable6 joined
[23:27] *** nativecallable6 joined
[23:27] *** greppable6 joined
[23:27] *** releasable6 joined
[23:27] *** committable6 left
[23:32] <MasterDuke> timotimo: did you ever find any optimizations for install-core-dist.pl?

[23:33] <timotimo> i don't think my efforts went anywhere :S

[23:33] <timotimo> though it's most likely i just got distracted too early

