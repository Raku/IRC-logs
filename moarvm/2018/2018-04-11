[00:01] *** MasterDuke joined
[01:57] *** ilbot3 joined
[04:05] <Geth> Â¦ MoarVM: ef4e6fe945 | (Samantha McVey)++ | Configure.pl

[04:05] <Geth> Â¦ MoarVM: Tell user to delete folder if submodule dir already exists

[04:05] <Geth> Â¦ MoarVM:

[04:05] <Geth> Â¦ MoarVM: Should help with issue #839

[04:05] <Geth> Â¦ MoarVM: The message shows at the very bottom of the ./Configure.pl run for best

[04:05] <Geth> Â¦ MoarVM: visibility.

[04:05] <Geth> Â¦ MoarVM: Tested with rakudobrew:

[04:05] <Geth> Â¦ MoarVM:

[04:05] <Geth> Â¦ MoarVM: ERROR: Cannot update submodule because directory exists and is not empty.

[04:05] <Geth> Â¦ MoarVM: >>> Please delete the following folder and try again:

[04:05] <Geth> Â¦ MoarVM: /home/perl/.rakudobrew/moar-blead-master/nqp/MoarVM/3rdparty/libatomic_ops

[04:05] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ef4e6fe945

[05:32] *** AlexDaniel joined
[05:40] *** domidumont joined
[05:46] *** domidumont joined
[05:49] *** brrt joined
[06:27] *** domidumont joined
[06:27] *** robertle joined
[07:07] <AlexDaniel> any thoughts on https://github.com/rakudo/rakudo/issues/1711 ?

[07:08] <AlexDaniel> what could be causing it? Or what can we request to move forward?

[07:09] <nwc10> Are all the failing architectures big endian?

[07:09] <AlexDaniel> yes

[07:09] <nwc10> (At a guess, the "intermittent" is because spesh doesn't always kick in

[07:10] <nwc10> OK. "yes" is useful. Bytecode is little endian. There's a bunch of hacks to fix it up

[07:10] <nwc10> (at the same time as validating it)

[07:10] <AlexDaniel> so I'm thinking, can we just declare spesh broken at the moment on these archs and recommend to build without it?

[07:10] <nwc10> this implies that there's a second fix needed rather like the one timotimo and jnthn found at the GPW

[07:11] <nwc10> that would be a work around

[07:11] <nine> AlexDaniel: can you test with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1

[07:11] <nwc10> that's the one. thanks

[07:11] <nwc10> was about to say, I can't remember the variables

[07:11] <nwc10> if you can get a test case repeatedly failing by running with those two variables

[07:11] <nwc10> that's useful info

[07:12] <AlexDaniel> robertle: ping

[07:12] <nwc10> aha, you are not the reporter :-)

[07:12] <nwc10> clearly the empty coffee cup near me is an illusion

[07:12] <nwc10> (or it hasn't kicked in yet)

[07:13] <AlexDaniel> nwc10: by the way, the fix was found 1 month before GPW :)

[07:13] <AlexDaniel> not sure what was going on there!

[07:13] <nwc10> ah OK.

[07:14] <nwc10> So, why did it end up with both of them staring at a terminal and (re) figuring it out

[07:14] <robertle> AlexDaniel: o/

[07:14] <nwc10> (not meant as a silly question - how come the fix didn't get committed earlier)

[07:14] <AlexDaniel> I don't knowâ€¦ timo committed a fix into a branch, we asked debian maints to test it, they confirmed it resolved the problem

[07:15] <nwc10> ah OK

[07:15] <AlexDaniel> I pinged timo asking to commit it to master, this didn't happen

[07:15] <AlexDaniel> one month later everyone was trying to fix it again :D

[07:15] <nwc10> oops.

[07:16] <nwc10> that's LTA

[07:16] <nwc10> saboteurs? eg http://dilbert.com/strip/2003-06-19

[07:16] <AlexDaniel> robertle: so if I get it right, tests should pass reliably with MVM_SPESH_DISABLE=1

[07:16] <robertle> right, I wasn't paying attention. so regarding 1711 you are suggesting to run with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1? should that make the problem go away, or shed mor light on it?

[07:16] <nwc10> shed more light on it

[07:16] <nwc10> should fail every time, not intermettently

[07:16] <AlexDaniel> yes

[07:17] <robertle> ok, and MVM_SPESH_DISABLE=1 might make them go away? does disabling spesh make rakudo practically useless in terms of performance?

[07:17] <nwc10> I don't know about the "practically useless" but it will hurt performance

[07:17] <AlexDaniel> definitely not useless, you can try it on any machine actually

[07:17] <AlexDaniel> it's pretty ok

[07:17] <robertle> ok, will do these tests and update the ticker, thanks for the input!

[07:17] <nwc10> thanks

[07:18] <AlexDaniel> robertle: â™¥

[07:18] * nwc10 should get back to the messy/big/ugly work ticket

[07:57] <timotimo> huh, i don't remember having had a working fix for that bug

[08:06] <robertle> timotimo: that's a mixup, there are a couple of vauely similar problems: 1711, 1257, 1663. your fix https://github.com/MoarVM/MoarVM/commit/c883fb77691dcc80b56b7b1932689b2740d73310 seems to sort out 1257...

[08:06] <timotimo> huh, yeah, that looks like it's the same fix

[08:07] <timotimo> not entirely, though

[08:08] <timotimo> the fix we ended up committing put the value validation in between the two validation calls

[08:08] <timotimo> shouldn't make a noticable difference.

[08:10] <timotimo> it looks like i (or AlexDaniel) committed that based on the commit that initially introduced the validation code?

[08:11] *** brrt joined
[08:12] <AlexDaniel> timotimo: well, your commit was on top of HEAD (which didn't work well because we were trying to test some old revision), so I made a branch and committed it on top of the required revisionâ€¦

[08:13] <timotimo> oh, ok

[08:13] <AlexDaniel> so we had https://github.com/MoarVM/MoarVM/tree/maybe_fix_big_endian and https://github.com/MoarVM/MoarVM/tree/maybe_fix_big_endian_oldmoar

[08:13] <AlexDaniel> I'll delete these branches now

[08:17] <brrt> good *

[08:17] <AlexDaniel> o/

[08:23] *** zakharyas joined
[08:33] *** dalek joined
[08:33] *** Geth joined
[08:33] *** p6lert joined
[08:33] *** synopsebot joined
[08:34] *** SourceBaby joined
[08:37] <brrt> i am still tracing the CSV segv

[09:03] <AlexDaniel> brrt: sounds promising :)

[09:18] *** domidumont1 joined
[09:35] <brrt> it happens in MVM_frame_vivify_lexical

[09:43] <timotimo> do we have an rr recording?

[09:50] *** zakharyas joined
[09:56] <brrt> no, but it is very repeatable

[10:59] *** brrt joined
[11:32] *** lizmat joined
[11:38] *** FROGGS joined
[12:06] <brrt> ohai. i think i have traced our issue with the spesh of CSV

[12:06] <brrt> sp_getlex_o      r19(4), lex(idx=10,outers=0,<out of bounds>)

[12:07] <brrt> well, i agree with that, that *is* out of bounds

[12:15] *** domidumont joined
[12:31] *** zakharyas joined
[12:42] *** Util joined
[12:49] <robertle> I just got my mips "bytecode validation error" even with MVM_SPESH_DISABLE=1 :(

[12:49] <robertle> any ideas on what to do next?

[12:50] <lizmat> robertle: /me has no idea...   and jnthn is having a well-deserved vacation atm so don't expect much from him for the rest of the week, I believe

[13:50] <AlexDaniel> timotimo: â†‘ ?

[14:20] *** FROGGS_ joined
[14:48] *** FROGGS|m joined
[15:17] *** brrt joined
[15:17] <brrt> .

[15:17] <brrt> so the question is, during inlining we end up with a lexical reference that is out of bounds for the actual frame, even though we are not using OSR

[15:17] <brrt> so i'm confused

[15:18] <brrt> oh, it should have 21 lexicals

[15:18] <brrt> hmm, nm that

[15:18] *** domidumont1 joined
[16:18] *** FROGGS joined
[17:02] *** robertle joined
[17:37] *** geekosaur joined
[18:27] <FROGGS> halp

[18:27] <FROGGS> ==11083== Invalid read of size 1

[18:27] <FROGGS> ==11083==    at 0x5062EEC: gc_mark (P6opaque.c:112)

[18:27] <FROGGS> ==11083==  Address 0xd6967a0000c is not stack'd, malloc'd or (recently) free'd

[18:27] <FROGGS> how can I get behind this one?

[18:28] <FROGGS> I'm calling into a C++ library here

[18:28] *** domidumont joined
[18:34] <FROGGS> at least it is reproducable...

[18:34] <FROGGS> in that code repr_data->gc_obj_mark_offsets_count is 17

[18:35] <FROGGS> and it crashes when i is 15

[18:35] <lizmat> nine timotimo ^^^

[18:44] <FROGGS> uhh, nice

[18:45] <FROGGS> the stable_debug_name states it is about a Method+{Callable[b2Body]}+{NativeCall::Native[Method+{Callable[b2Body]},Str]}+{NativeCall::NativeCallMangled[Bool]}

[18:45] <FROGGS> which is exactly the C++ method I am calling

[18:46] <FROGGS> hmm, no, actually it is not

[18:50] <FROGGS> the object is the resulting object after the 'is native' trait was applied I think

[19:18] *** brrt joined
[19:29] <brrt> .

[19:29] <timotimo> .

[19:30] <brrt> ohai timotimo

[19:31] <timotimo> hi there

[19:32] <brrt> any idea why sp_getlex_o would be trying to clone a null object

[19:37] <brrt> hmm..

[19:37] <brrt> i'm getting to be supsicious about lazy loading here

[20:31] *** ilmari[m] joined
[20:32] *** evalable6 joined
[20:32] *** coverable6 joined
[20:33] *** bisectable6 joined
[20:33] *** bloatable6 joined
[21:34] <MasterDuke> would http://blog.llvm.org/2018/03/dragonffi-ffijit-for-c-language-using.html have any potential use for MoarVM?

[22:34] <timotimo> http://tirania.org/blog/archive/2018/Apr-11.html - mono was using 64bit floats for all calculations even if the variables used were 32bit, and they got a rather big performance win for float32-using applications by changing that, it seems like

[22:35] <timotimo> Nowadays, Games, 3D applications image processing, VR, AR and machine learning have made floating point operations a more common data type in modern applications. When it rains, it pours, and this is no exception. Floats are no longer your friendly data type that you sprinkle in a few places in your code, here and there. They come in an avalanche and there is no place to hide. There are so many of them, and

[22:35] <timotimo> they wonâ€™t stop coming at you.

[22:44] <Geth> Â¦ MoarVM: samcv++ created pull request #840: Move libatomic_ops module to a different directory

[22:44] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/840
