[00:49] *** lizmat left
[01:08] *** lizmat joined
[01:08] *** p6bannerbot sets mode: +v lizmat

[01:16] *** fake_space_whale joined
[01:17] *** p6bannerbot sets mode: +v fake_space_whale

[03:53] *** evalable6 left
[03:53] *** evalable6 joined
[03:54] *** p6bannerbot sets mode: +v evalable6

[04:35] *** lizmat left
[04:39] *** lizmat joined
[04:39] *** p6bannerbot sets mode: +v lizmat

[04:43] *** lizmat left
[04:54] *** fake_space_whale left
[05:09] *** fake_space_whale joined
[05:09] *** p6bannerbot sets mode: +v fake_space_whale

[05:50] *** fake_space_whale left
[06:01] *** MasterDuke left
[06:27] *** ItchyPlant joined
[06:27] *** p6bannerbot sets mode: +v ItchyPlant

[10:50] *** lizmat joined
[10:50] *** p6bannerbot sets mode: +v lizmat

[12:09] <nine> Oh, we don't yet JIT any named arguments except required strings? I.e. most constructors won't be JIT compiled. I wonder why this hasn't come up as kind of low hanging fruit

[12:12] <timotimo> if the callsite is known, named arguments become positional arguments

[12:13] <timotimo> a very nice optimization

[12:14] *** ggoebel joined
[12:15] *** p6bannerbot sets mode: +v ggoebel

[13:06] <nine> But that doesn't always work apparently

[13:07] <jnthn> It won't work when the callsite has flattening

[13:11] <nine> The callsite looked like this: nqp::push(@!buffer-stack, SubBuffer.new( :bytecode($!bytecode), :outer-annotations-start($!annotations-offset), :annotations-offset(nqp::elems($!annotations)), :label-fixups(@!child-label-fixups), :labels(%!labels), :handlers(@!handlers), :level($sublevel++),));

[13:11] *** MasterDuke joined
[13:11] *** p6bannerbot sets mode: +v MasterDuke

[13:11] <nine> Yet the callsite was not interned according to the spesh log and the constructor not JIT compiled because of a param_on_o

[13:11] *** MasterDuke left
[13:11] *** MasterDuke joined
[13:11] *** herbert.freenode.net sets mode: +v MasterDuke

[13:11] *** p6bannerbot sets mode: +v MasterDuke

[13:12] <nine> Changed it to positionals and it's much faster now

[13:18] <jnthn> Wonder if it's too big to intern

[13:18] <jnthn> There's some size limit, maybe that wants a boost

[13:37] <nine> INTERN_ARITY_LIMIT is 8. If named args count as 2 the callsite is far above the limit

[13:38] <jnthn> Could try increasing it :)

[13:38] <jnthn> And yeah, I think they could for 2 still

[13:39] <nine> There's also MAX_ARGS_FOR_OPT which is 8, too

[14:08] *** MasterDuke left
[14:27] *** ItchyPlant left
[15:08] *** ItchyPlant joined
[15:08] *** p6bannerbot sets mode: +v ItchyPlant

[15:09] <ItchyPlant> Hi, what is the way to test MoarVM alone (without NQP/Rakudo) if that is fully functional itself? On AIX, I get the "Duplicate symbol: .__init_aix_libgcc_cxa_atexit" at the end of compilation. make install can be done, so... I would like to make sure if at least that part is OK.

[15:11] <timotimo> currently we rely on nqp's test suite for testing

[15:16] <ItchyPlant> aha, ok

[15:17] <ItchyPlant> so these two rows tells us it has critical issues?

[15:17] <ItchyPlant> t/nqp/111-spawnprocasync.t ............. Dubious, test returned -1 (wstat 6, 0x6) Failed 4/4 subtests

[15:18] <ItchyPlant> t/nqp/113-run-command.t ................ Dubious, test returned -1 (wstat 6, 0x6) Failed 2/8 subtests

[15:19] <timotimo> yeah, feel free to run them directly with ./nqp-m to see where and how it dies

[15:19] <ItchyPlant> NQP also can be "make install"-ed despite these errors but...

[15:20] <ItchyPlant> OK, I will run them separately

[15:35] *** fake_space_whale joined
[15:36] *** p6bannerbot sets mode: +v fake_space_whale

[15:49] <ItchyPlant> t/nqp/111-spawnprocasync.t ............. 1..4 Dubious, test returned -1 (wstat 6, 0x6) Failed 4/4 subtests

[15:50] <ItchyPlant> t/nqp/113-run-command.t ................ 1..8 ok 1 - got the correct output from stdout ok 2 - got the correct output from stderr Dubious, test returned -1 (wstat 6, 0x6) Failed 6/8 subtests

[15:50] <ItchyPlant> t/nqp/114-pod-panic.t .................. 1..1 Dubious, test returned -1 (wstat 6, 0x6) Failed 1/1 subtests

[15:51] <ItchyPlant> got these three in verbose mode (modified it in Makefile). However, I didn't figure out how to run them separately. :)

[15:51] <nine> ItchyPlant: ./nqp-m t/nqp/111.spawnprocasync.t

[15:52] <ItchyPlant> Ok, thanks

[15:52] <ItchyPlant> 1..4 ok 1 - called the ready callback once ok 2 - got the correct output on stdout ok 3 - called the ready callback once ok 4 - got the correct output on stderr

[15:53] <ItchyPlant> # ./nqp-m t/nqp/113-run-command.t 1..8 ok 1 - got the correct output from stdout ok 2 - got the correct output from stderr ok 3 - got the correct output from stdout ok 4 - got the correct output from stderr ok 5 - got the correct output from stdout ok 6 - got the correct output from stderr ok 7 - got the correct output from stdout ok 8 - got the correct output from stderr

[15:54] <ItchyPlant> # ./nqp-m t/nqp/114-pod-panic.t 1..1 ok 1 - got the correct output from stderr

[15:54] <ItchyPlant> so these all look like OK (?)

[15:54] <nine> looks like, yes

[15:55] <ItchyPlant> so does it mean MoarVM is fine at its installed location and NQP may be make install-ed too?

[15:56] <nine> I'd guess the failures are just some weird interaction between nqp's async execution of binaries and the prove command (Perl's test harness)

[15:56] * nine wouldn't waste too much time on it right now

[15:58] <ItchyPlant> OK, thanks for now :)

[16:00] <ItchyPlant> so only Rakudo's compilation is bad (as it crashes either by segfault or by not enough allocated memory or by illegal instruction

[16:00] <ItchyPlant> )

[16:01] <ItchyPlant> it does it when it reaches this point (you probably well aware of it):

[16:01] <ItchyPlant> The following step can take a long time, please be patient. /opt/rakudo/bin/moar --libpath="blib" --libpath="/opt/rakudo/share/nqp/lib" --libpath="/opt/rakudo/share/nqp/lib" perl6.moarvm --nqp-lib=blib --setting=NULL --ll-exception --optimize=3 --target=mbc --stagestats --output=CORE.setting.moarvm gen/moar/CORE.setting Stage start      :   0.000 Stage parse      : make: ***

[16:02] <ItchyPlant> but now I'm leaving for now... I will check in later (will also check logs if something came to anyone's mind)

[16:02] <ItchyPlant> thank you again :) bye

[16:02] <nine> The only real special thing about this step is that it compiles a huge amount of code thereby exercising most of the compiler a lot

[16:03] <ItchyPlant> but it compiles with moarvm only, right? no gcc is involved here... or am I wrong?

[16:04] *** ItchyPlant left
[16:04] <timotimo> gcc is also involved in an earlier step

[16:04] <timotimo> to compile a few "extops" we call them

[16:34] *** MasterDuke joined
[16:34] *** p6bannerbot sets mode: +v MasterDuke

[16:34] *** MasterDuke left
[16:34] *** MasterDuke joined
[16:34] *** herbert.freenode.net sets mode: +v MasterDuke

[16:34] *** p6bannerbot sets mode: +v MasterDuke

[17:00] *** zakharyas joined
[17:01] *** p6bannerbot sets mode: +v zakharyas

[17:27] *** zakharyas left
[17:38] *** lizmat left
[17:39] *** lizmat joined
[17:39] *** p6bannerbot sets mode: +v lizmat

[17:44] *** lizmat left
[17:45] <nine> I just noticed that our decision of whether to inline a frame is based on the original frame's bytecode size. But that size may be totally dominated by argument handling. E.g. method write_uint32_at(uint32 $i, uint32 $pos) { nqp::writeuint(self, $pos, $i, 4); } is too large to inline!

[17:46] <timotimo> really? wow

[17:46] <timotimo> can you post the before/after of an instance of that?

[17:46] <timotimo> is it because of lots of truncate and extend overhead?

[17:49] <Geth> Â¦ MoarVM: b2e870c6ff | (Aleks-Daniel Jakimenko-Aleksejev)++ | 10 files

[17:49] <Geth> Â¦ MoarVM: Revert async socket introspection

[17:49] <Geth> Â¦ MoarVM:

[17:49] <Geth> Â¦ MoarVM: Revert "Implement async socket introspection functions"

[17:49] <Geth> Â¦ MoarVM:

[17:49] <Geth> Â¦ MoarVM: This reverts commit e1eb9af30ad7a1d64b62ff989695b10190cf8426.

[17:49] <Geth> Â¦ MoarVM:

[17:49] <Geth> Â¦ MoarVM: Revert "Implement asyncsocket op"

[17:49] <Geth> Â¦ MoarVM:

[17:49] <Geth> Â¦ MoarVM: This reverts commit caf23c6bc449969f6042d7ef6b2f080e6c118c70.

[17:49] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b2e870c6ff

[17:50] *** fake_space_whale left
[17:53] *** ItchyPlant joined
[17:53] *** p6bannerbot sets mode: +v ItchyPlant

[17:53] <nine> timotimo: https://gist.github.com/niner/39675e602f7a39c2bab4c63e21382967

[17:55] <ItchyPlant> This step causes the segfault/illegal operation crash:

[17:56] <nine> Oh, there's also this: Can NOT inline read_uint32_at (6) with bytecode size 70 into insert_bytecode (72): target has a :noinline instruction

[17:57] <timotimo> why does it have paramnamesused in the "after" part?

[17:57] <nine> what does that do anyway?

[17:58] *** Kaiepi left
[17:58] <MasterDuke> ItchyPlant: is valgrind available on AIX? if so, you could run the moar command with it and maybe get some useful info

[17:58] <timotimo> it asserts that all nameds have been used

[17:59] *** Kaiepi joined
[17:59] <timotimo> however, it only ever does anything if the args num is != the pos num

[17:59] *** p6bannerbot sets mode: +v Kaiepi

[17:59] <timotimo> and from the callsite it looks like both are "2"?

[18:00] <nine> Yes, it's uint32 $i, uint32 $pos

[18:01] <timotimo> you may figure this out by stepping through args.c's MVM_spesh_args

[18:01] <nine> Err.... it's read_uint32_at, so the args are self and $pos

[18:02] <nine> That's method read_uint32_at(uint32 $pos) { nqp::readuint(self, $pos, 4) }

[18:02] <timotimo> right

[18:04] <nine> The only ops with a :noinline in read_uint32_at seem to be param_rp_o, param_rp_u and paramnamesused which should not count as they will not be inlined.

[18:04] <timotimo> aha

[18:04] <timotimo> it won't reach paramnamesused for arg spesh because it stumbles over param_rp_u

[18:05] <timotimo> param_rp_u is in the block with "don't understand how to specialize these yet"

[18:05] <timotimo> so even post-spesh it's doing the expensive kind of argument getting

[18:05] <nine> Oh god damnit, another sign of our lacking support for unsigneds?

[18:05] <timotimo> yep

[18:06] <nine> Whatever else will come out of my endeavours here, better support for uint is definitely in there

[18:06] <timotimo> for sure

[18:08] <nine> I wonder if all that's needed is moving that case up

[18:08] <nine> uints are after all not _that_ different from ints

[18:08] <timotimo> i'm not sure i understand why it does trunc_u32, then extend_u32

[18:09] <timotimo> and coerce_iu the const_i64_16 is a special kind of funny

[18:13] <nine> I moved the cases up, but the result is the same. At least there's nothing broken either

[18:14] <nine> Ah, there's some more handling needed

[18:16] <nine> Looks like a nice job for tomorrow

[18:42] *** zakharyas joined
[18:43] *** p6bannerbot sets mode: +v zakharyas

[19:11] *** robertle left
[19:36] <AlexDaniel> samcv: by any chance do you know why this happens sometimes? https://ci.appveyor.com/project/rakudo/rakudo/builds/19847519/job/8r54rml7d2b18v46#L1188

[19:36] <AlexDaniel> aaah nevermind

[19:36] <samcv> AlexDaniel: is it only windows?

[19:36] <AlexDaniel> these are just TODOs and I'm blind

[19:37] <AlexDaniel> t\08-performance\99-misc.t  is likely just a flapper so that's why

[19:37] <samcv> timotimo:  make heap snapshot profiler functional again

[19:38] <samcv> is this a change from last release?

[19:38] <samcv> i.e. should it be in the changelog?

[19:42] *** fake_space_whale joined
[19:43] *** p6bannerbot sets mode: +v fake_space_whale

[19:50] <Geth> Â¦ MoarVM: 225ab3e923 | (Samantha McVey)++ | docs/ChangeLog

[19:50] <Geth> Â¦ MoarVM: Update ChangeLog

[19:50] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/225ab3e923

[19:51] <Geth> Â¦ MoarVM: 867318a8cc | (Samantha McVey)++ | tools/update-changelog.p6

[19:51] <Geth> Â¦ MoarVM: Fix a few formatting issues with update-changelog.p6

[19:51] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/867318a8cc

[19:53] <ItchyPlant> Does anyone know what to do with Rakudo if MoarVM was compiled with --static? :)

[19:54] <jnthn> I don't think it's possible to compile Rakudo with that configuration, since it wants to link the extension ops against libmoar (we want to get rid of those in the future, at which point --static will work OK)

[19:55] <ItchyPlant> I'm just asking because when I add the "--static" parameter for MoarVM's Configure.pl, then it compiles and finishes without any errors.

[19:56] <ItchyPlant> ...then NQP was also Ok but Rakudo complained about a huge amount of undefined symbols.

[19:59] <ItchyPlant> OK, so it won't have any further benefit, Rakudo still won't be compiled (on AIX). I tried on a 7.2 anyway too, the results are the same: compilation crashes at that point. :)

[20:04] <timotimo> samcv: i think the bug was introduced at least one release earlier; whenever jnthn made spesh more responsive to the GC

[20:07] <samcv> ok

[20:40] *** ItchyPlant left
[20:56] *** lizmat joined
[20:56] *** p6bannerbot sets mode: +v lizmat

[21:04] <MasterDuke> timotimo: i'm getting a bunch of warnings in heapsnapshot.h and graph.c

[21:05] <MasterDuke> gcc version 8.2.1 20180831 (GCC)

[21:06] <MasterDuke> https://gist.github.com/MasterDuke17/3290040bd4383ac41507a80da7f50864

[21:08] <samcv> i'm trying to turn the sleep bug into a test. but i'm not getting it to trigger?

[21:18] *** zakharyas left
[21:25] *** Zoffix joined
[21:25] *** p6bannerbot sets mode: +v Zoffix

[21:26] <Zoffix> samcv: there is a kinda test for it already: R#2395  after your fix that test file started non-hanging for me again

[21:26] <synopsebot> R#2395 [closed]: https://github.com/rakudo/rakudo/issues/2395 [perf] t/spec/S32-io/io-cathandle.t is now 2x-8x slower without precomp

[21:26] <Zoffix> So if bug returns, that file would be super slow (at least on some boxes)

[21:27] <samcv> ah ok

[21:27] <samcv> ok cool :)

[21:27] <samcv> once this spectest is done, i will release

[21:28] <Zoffix> \o/

[21:29] <jnthn> samcv++ \o/

[21:38] <timotimo> MasterDuke: ah, all it needs is a few casts

[21:39] <AlexDaniel> samcv: btw what's the status of this? https://github.com/rakudo/rakudo/issues/2337

[21:40] <timotimo> if it's okay i'll just push it to master

[21:41] <timotimo> samcv: would that be fine, warning fixes?

[21:41] <samcv> yeah go ahead

[21:41] <samcv> AlexDaniel: regarding that, i think there's a few things needing to be updated. i was going to check roast/docs/unicode-generated-tests.asciidoc after release

[21:42] <AlexDaniel> ok cool

[21:42] <Geth> Â¦ MoarVM: ac5fac457f | (Timo Paulssen)++ | src/spesh/graph.c

[21:42] <Geth> Â¦ MoarVM: fix up warnings by putting some casts in

[21:42] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ac5fac457f

[21:42] <samcv> i wanted to get that updated before 6.d at least :)

[21:46] <MasterDuke> timotimo: no more warnings

[21:46] *** AlexDaniel left
[21:46] *** AlexDaniel joined
[21:46] *** p6bannerbot sets mode: +v AlexDaniel

[21:47] <AlexDaniel> MasterDuke: thank you :)

[21:47] <AlexDaniel> and timotimo++

[21:47] <AlexDaniel> I hated those :)

[21:48] <MasterDuke> samcv: btw, did you see that article i mentioned to you a couple days ago?

[21:50] <samcv> which one?

[22:16] <MasterDuke> samcv: http://darkcephas.blogspot.com/2018/10/validating-utf8-strings-with-lookup.html

[22:20] <Geth> Â¦ MoarVM: 0b5bde835d | (Samantha McVey)++ | VERSION

[22:20] <Geth> Â¦ MoarVM: Bump VERSION for release 2018.10

[22:20] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0b5bde835d

[22:21] <samcv> \o/ release is done

[22:21] <Zoffix> samcv++

[22:21] <AlexDaniel> that was fast

[22:22] <AlexDaniel> samcv++

[22:34] <timotimo> nice

[23:21] <timotimo> oh, release is through, i can merge the split thing

