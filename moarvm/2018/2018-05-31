[01:05] <timotimo> afl claims to have found 303 unique ways to crash moar using fuzzed .moarvm files

[01:09] <samcv> timotimo: crash as in ungracefully? like without a MVM_oops or throwing?

[01:09] <samcv> i could see that happening

[01:10] <timotimo> segfaulting, i believe. though it can also mean running against the memory limit i *think*

[01:11] <timotimo> just taking too long is counted separately as a timeout, i believe

[01:11] <timotimo> the compressed bunch of files is just 450 kbytes big - extracts to 100 megs

[01:11] <timotimo> http://hack.p6c.org/~timo/moar-fuzzing-stuff.tar.xz

[01:12] <timotimo> f0478cc5138d27aeeb618d84142b3c9cee81c79026b58e8556744d45284e5f6d is the sha256sum

[01:12] <timotimo> because i think hack's webserver doesn't do https perhaps?

[01:12] <timotimo> anyway, cd into the input folder and moar ../findings/crashes/blah

[01:14] <timotimo> http://hack.p6c.org/~timo/ - this has the plots afl makes

[01:15] <timotimo> i believe the speed differences clearly visible on the bottom left comes from it reaching a different input file

[01:16] <timotimo> a bigger input file, i expect

[01:16] <timotimo> the nqp input currently looks like lots and lots of 4, then a *, then lots of 4 again and a P and more 4s

[01:17] <timotimo> there's a null byte or two in there, as well

[01:19] <timotimo> cool, i just saw it go from one cycle to the next. the nqp side of things has done 46 cycles now

[01:20] <timotimo> what it identified as crashes was a whole lot less explosive than i had expected. .. like not crashy at all :(

[01:20] <samcv> hmm

[01:20] <samcv> ../finding_0/crashes/id:000005,sig:11,src:000000,op:flip1,pos:88 this gets angry with asan

[01:20] <samcv> By a read memory access, address points to the zero page

[01:21] <timotimo> one of the early crashes is just clargs being turned into some op that tries to use its first register as an object of some kind, but in the fuzzed version it's actually a register that was just nulled out

[01:22] <samcv> yeah asan is very unhappy with most of these

[01:22] <samcv> maybe all

[01:23] <timotimo> that's what we get afl for :)

[01:48] *** ilbot3 left
[01:56] *** ilbot3 joined
[04:55] *** lizmat left
[05:01] *** lizmat joined
[05:08] <Geth> Â¦ MoarVM: b836b0dfd1 | (Samantha McVey)++ | src/6model/reprs/MVMMultiCache.c

[05:08] <Geth> Â¦ MoarVM: Initialize pointers in MVMMultiCache.c to NULL

[05:08] <Geth> Â¦ MoarVM:

[05:08] <Geth> Â¦ MoarVM: Coverity scan stated known_type_st needs to be initialized as NULL as

[05:08] <Geth> Â¦ MoarVM: it's possible it can be accessed before it's initialized. I set all the

[05:08] <Geth> Â¦ MoarVM: other pointers in the file to NULL as an added measure.

[05:08] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b836b0dfd1

[05:46] *** domidumont joined
[05:52] *** domidumont left
[05:53] *** domidumont joined
[06:19] *** domidumont left
[06:37] *** domidumont joined
[06:45] <Geth> Â¦ MoarVM: 4470c96cc9 | (Samantha McVey)++ | src/strings/shiftjis.c

[06:45] <Geth> Â¦ MoarVM: Fix the shiftjis decode bug in decode as well as decodestream

[06:45] <Geth> Â¦ MoarVM:

[06:45] <Geth> Â¦ MoarVM: Also rename the variables in decodestream to be the same as te ones in

[06:45] <Geth> Â¦ MoarVM: the current patch. Fixes an issue where a -1 grapheme in the replacement

[06:45] <Geth> Â¦ MoarVM: could cause unexpected behavior.

[06:45] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4470c96cc9

[06:50] *** Ven`` joined
[06:54] *** Ven`` left
[06:54] *** Ven`` joined
[07:26] *** zakharyas joined
[07:29] <samcv> .ask brrt this showed up on the coverity scan. was thinking of maybe adding a comment like so https://cry.nu/p/qh7j

[07:29] <yoleaux> samcv: I'll pass your message to brrt.

[07:30] <samcv> .tell brrt this was the coverity scan issue fyi https://scan4.coverity.com/reports.htm#v27387/p10778/fileInstanceId=43664150&defectInstanceId=8107004&mergedDefectId=287693 i think it's totally fine (probably) though youknow better

[07:30] <yoleaux> samcv: I'll pass your message to brrt.

[07:30] <samcv> this one looks more interesting, we don't guard against accessing out of bounds array access in MVM_jit_get_template_for_opcode https://scan4.coverity.com/reports.htm#v27387/p10778/fileInstanceId=43664411&defectInstanceId=8106970&mergedDefectId=287729

[07:31] <samcv> we only guard it's less than MVM_OP_EXT_BASE, but the array is 867 at time of writing while MVM_OP_EXT_BASE is 1024

[07:37] *** brrt joined
[09:18] *** brrt left
[09:18] *** brrt joined
[10:00] *** brrt left
[11:11] *** Ven`` left
[11:24] *** zakharyas left
[11:58] *** brrt joined
[12:31] *** Ven`` joined
[12:46] *** Ven` joined
[12:46] *** Ven` left
[12:47] *** Ven` joined
[12:49] *** Ven`` left
[12:57] *** zakharyas joined
[13:21] *** Ven` left
[13:21] *** Ven`` joined
[13:25] *** Redfoxmoon joined
[13:25] <Redfoxmoon> What's the minimum version of GCC needed to build moarvm?

[13:48] <brrt> i have no idea

[13:48] <yoleaux> 07:29Z <samcv> brrt: this showed up on the coverity scan. was thinking of maybe adding a comment like so https://cry.nu/p/qh7j

[13:48] <yoleaux> 07:30Z <samcv> brrt: this was the coverity scan issue fyi https://scan4.coverity.com/reports.htm#v27387/p10778/fileInstanceId=43664150&defectInstanceId=8107004&mergedDefectId=287693 i think it's totally fine (probably) though youknow better

[13:48] <brrt> is there a version that's broken?

[13:50] <brrt> .ask samcv is there a public version where I can see that?

[13:50] <yoleaux> brrt: I'll pass your message to samcv.

[13:50] <brrt> i mean, that shouldn't ever ever happen

[13:52] <brrt> .samcv: samcv: if you wrap it with a #if MVM_JIT_DEBUG or something like that, then I"m perfectly happy

[13:53] <brrt> .tell samcv I'll be happy, and i'll be happier if wrapped with #if MVM_JIT_DEBUG, because in real code this basically cannot happen

[13:53] <yoleaux> brrt: I'll pass your message to samcv.

[13:56] *** Ven`` left
[14:01] *** Ven`` joined
[14:15] *** brrt left
[14:39] *** brrt joined
[14:48] <brrt> i'm thinking of dropping the whole remove-invokish thing and getting the jit-stack-walker branch merged as-is

[15:03] *** brrt left
[15:03] *** brrt joined
[15:05] *** Ven`` left
[15:09] *** Ven`` joined
[15:19] <samcv> ah k. though we'll need a define that has the length of the actual array. i think that array is generated or is it not?

[15:19] <yoleaux> 13:50Z <brrt> samcv: is there a public version where I can see that?

[15:19] <yoleaux> 13:53Z <brrt> samcv: I'll be happy, and i'll be happier if wrapped with #if MVM_JIT_DEBUG, because in real code this basically cannot happen

[15:20] <[Coke]> brrt: any luck with those warnings?

[15:21] <brrt> [Coke]: sorry, have not been sufficiently online so far

[15:21] <[Coke]> no worries

[15:21] <brrt> samcv: which array?

[15:22] <brrt> oh, the NVR_GPR_BITMAP

[15:22] <samcv> no

[15:22] <brrt> that's not even really an array

[15:23] <samcv> MVM_jit_expr_template_info

[15:23] <brrt> oh, that one

[15:23] <brrt> yeah

[15:23] <brrt> i was going to fix that with a sizeof(MVM_jit_expr_template_info)/sizeof(MVM_jit_expr_template_info[0]); then i realized that we ought to have a macro for that, then I forgot and started doing something else

[15:24] <brrt> that one *is* a bug, i actually agree

[15:24] <samcv> ok :)

[15:26] <brrt> having said that, i've been thinking about jit-debug flags

[15:33] *** Ven`` left
[15:56] *** brrt left
[16:02] <timotimo> Redfoxmoon: we are developing moarvm in c89, so i assume the gcc can be a couple of years old and still work

[16:03] <timotimo> Redfoxmoon: have you got any specific version in mind that doesn't seem to work?

[16:03] <Redfoxmoon> o_O

[16:03] <Redfoxmoon> Oh, no, just wondered before bothering to try:-)

[16:03] <timotimo> we're keeping compatibility with MSVC, which is not quite but almost the worst thing in my whole existence

[16:04] <Redfoxmoon> heheheheh. yeah.

[16:04] <Redfoxmoon> I've got a policy of only using GNU C myself :P

[16:04] <Redfoxmoon> out of pure spite

[16:04] *** domidumont left
[16:21] *** zakharyas left
[16:43] *** domidumont joined
[16:44] *** brrt joined
[16:44] <brrt> oh. I may have fixed the no-more-invokish thing after all

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker: bba6fd85e7 | (Bart Wiegmans)++ | 15 files

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker: [JIT] No more invokish

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker:

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker: Some MoarVM opcodes can change control flow for the interpreter, e.g by

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker: invoking a new frame or jumping to a new ecxeption handler. The JIT

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker: relied specially compiled 'control guards' to in order follow these

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker: control flow changes. However, now that we actually have a pointer to

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker: the return-address on stack, it is possible to change the 'current

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker: position' for the JIT-compiled code, much like for interpreted

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker: code. Thus, the control guards are no longer necessary, which should

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker: result in a nice reduction in code size and hopefully a speedup as well.

[16:44] <Geth> Â¦ MoarVM/jit-stack-walker: review: https://github.com/MoarVM/MoarVM/commit/bba6fd85e7

[17:02] *** zakharyas joined
[17:04] <Geth> Â¦ MoarVM/jit-stack-walker: 17 commits pushed by (Bart Wiegmans)++

[17:04] <Geth> Â¦ MoarVM/jit-stack-walker: review: https://github.com/MoarVM/MoarVM/compare/bba6fd85e71e...fe913728a9d9

[17:08] <brrt> ^ rebase

[17:09] <samcv> this looks like a bug https://scan4.coverity.com/reports.htm#v27387/p10778/fileInstanceId=43664411&defectInstanceId=8106970&mergedDefectId=287729

[17:10] <samcv> if (!ds_>bytes_head && pos == 0) return; but then below we check ds->bytes_head->length

[17:10] <samcv> so if there's no ds->bytes_head but pos != 0 then we'll dereference the null poniter

[17:13] *** brrt left
[17:15] <samcv> i'm thinking it should probably never happen so i may just want to guard against it with an exception

[17:18] <Geth> Â¦ MoarVM: 1b83cc54bf | (Samantha McVey)++ | src/strings/decode_stream.c

[17:18] <Geth> Â¦ MoarVM: Guard against null pointer dereference in decodestream_discard

[17:18] <Geth> Â¦ MoarVM:

[17:18] <Geth> Â¦ MoarVM: I'm guessing that this in proper operation should not happen, but to be

[17:18] <Geth> Â¦ MoarVM: safe it's a good idea to guard it with throwing an exception so MoarVM

[17:18] <Geth> Â¦ MoarVM: doesn't explode by dereferencing a null pointer if ds->bytes_head ==

[17:18] <Geth> Â¦ MoarVM: NULL and pos != 0. Detected by Coverity scan.

[17:18] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1b83cc54bf

[17:20] <samcv> .ask jnthn i think this seems proper https://github.com/MoarVM/MoarVM/commit/1b83cc54bf trying to fix this coverity scan warning https://scan4.coverity.com/reports.htm#v27387/p10778/fileInstanceId=43664411&defectInstanceId=8106970&mergedDefectId=287729 let me know if any issues with this

[17:20] <yoleaux> samcv: I'll pass your message to jnthn.

[17:21] <samcv> so 74 issues now i think i've dealt with almost 10 coverity issues so far. maybe 5 at least. idk i'm bad at estimating :)

[17:21] <samcv> seems like it's at least 6

[17:23] <samcv> and dismissed several that were false positives associated with MVM_trycas since it resolves to AO_compare_and_swap_full which uses asm to set values

[17:32] <Geth> Â¦ MoarVM: 212e4175fb | (Samantha McVey)++ | 2 files

[17:32] <Geth> Â¦ MoarVM: Annotate the switch in generate_codepoints_by_name

[17:32] <Geth> Â¦ MoarVM:

[17:32] <Geth> Â¦ MoarVM: Also add a comment about an unused value that was detected by a Coverity

[17:32] <Geth> Â¦ MoarVM: scan. Semi more importantly I annotated what each of the switch values

[17:32] <Geth> Â¦ MoarVM: denote making it more understandable what is happening.

[17:32] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/212e4175fb

[17:42] <Geth> Â¦ MoarVM: a0eb65bf82 | (Samantha McVey)++ | src/gc/roots.c

[17:42] <Geth> Â¦ MoarVM: Fix unportable sizeof in roots.c

[17:42] <Geth> Â¦ MoarVM:

[17:42] <Geth> Â¦ MoarVM: sizeof(MVMCollectable*) is the same as sizeof(MVMCollectable**)

[17:42] <Geth> Â¦ MoarVM: generally, but not guarenteed by C standard. Detected by Coverity scan.

[17:42] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a0eb65bf82

[17:52] <Geth> Â¦ MoarVM: 853ea27c70 | (Samantha McVey)++ | src/debug/debugserver.c

[17:52] <Geth> Â¦ MoarVM: Check that socket() doesn't return -1 in debugserver

[17:52] <Geth> Â¦ MoarVM:

[17:52] <Geth> Â¦ MoarVM: We checked that setsockopt(), bind() and listen() don't return -1 but

[17:52] <Geth> Â¦ MoarVM: didn't check that socket() didn't return -1. Detected by Coverity scan.

[17:52] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/853ea27c70

[17:56] <Geth> Â¦ MoarVM: 4fcbdce2af | (Samantha McVey)++ | src/main.c

[17:56] <Geth> Â¦ MoarVM: Put code in an ifdef for HAVE_TELEMEH that was dead otherwise

[17:56] <Geth> Â¦ MoarVM:

[17:56] <Geth> Â¦ MoarVM: Detected by Coverity scan. There is code above that's in an ifdef for

[17:56] <Geth> Â¦ MoarVM: HAVE_TELEMEH but code below was not.

[17:56] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4fcbdce2af

[17:59] *** zakharyas left
[18:04] <samcv> timotimo: i think this may be a valid bug? https://scan4.coverity.com/reports.htm#v38319/p10778/fileInstanceId=43664420&defectInstanceId=8106959&mergedDefectId=287691 you know more about this than me

[18:05] <samcv> seems to be a place we don't get a lock before setting a value?

[18:49] *** brrt joined
[18:50] <Geth> Â¦ MoarVM: bdw++ created pull request #868: [JIT] Use on-stack return address for reading and writing the current position

[18:50] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/868

[19:04] *** domidumont left
[19:17] <Geth> Â¦ MoarVM/jit-stack-walker: 409f68a294 | (Bart Wiegmans)++ | src/jit/stub.c

[19:17] <Geth> Â¦ MoarVM/jit-stack-walker: [JIT] Unbreak stub

[19:17] <Geth> Â¦ MoarVM/jit-stack-walker:

[19:17] <Geth> Â¦ MoarVM/jit-stack-walker: lizmat++ for pointing this out

[19:17] <Geth> Â¦ MoarVM/jit-stack-walker: review: https://github.com/MoarVM/MoarVM/commit/409f68a294

[19:17] *** brrt left
[20:05] *** brrt joined
[20:40] *** brrt left
[21:17] *** lizmat left
[21:19] *** lizmat joined
