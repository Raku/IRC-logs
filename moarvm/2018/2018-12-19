[01:37] *** MasterDuke joined
[01:37] *** p6bannerbot sets mode: +v MasterDuke

[01:38] *** MasterDuke left
[01:38] *** MasterDuke joined
[01:38] *** herbert.freenode.net sets mode: +v MasterDuke

[01:38] *** p6bannerbot sets mode: +v MasterDuke

[02:38] *** evalable6 left
[02:42] *** evalable6 joined
[02:43] *** p6bannerbot sets mode: +v evalable6

[05:22] *** MasterDuke left
[05:45] *** robertle left
[06:34] *** domidumont joined
[06:34] *** p6bannerbot sets mode: +v domidumont

[06:40] *** robertle joined
[06:41] *** p6bannerbot sets mode: +v robertle

[07:08] *** domidumont1 joined
[07:09] *** p6bannerbot sets mode: +v domidumont1

[07:11] *** domidumont left
[08:00] *** robertle left
[08:10] *** dogbert17 left
[08:16] *** domidumont1 left
[08:33] *** robertle joined
[08:33] *** p6bannerbot sets mode: +v robertle

[08:43] *** robertle left
[08:55] *** domidumont joined
[08:56] *** p6bannerbot sets mode: +v domidumont

[09:14] *** robertle joined
[09:14] *** p6bannerbot sets mode: +v robertle

[09:33] *** zakharyas joined
[09:34] *** p6bannerbot sets mode: +v zakharyas

[09:35] *** zakharyas1 joined
[09:35] *** p6bannerbot sets mode: +v zakharyas1

[09:37] *** zakharyas left
[10:46] *** domidumont left
[10:50] *** brrt joined
[10:51] *** p6bannerbot sets mode: +v brrt

[11:44] *** dogbert17 joined
[11:45] *** p6bannerbot sets mode: +v dogbert17

[11:55] <brrt> ohai #moarvm

[11:55] <nwc10> good *, brrt

[11:55] <brrt> .tell jnthn I thought about it some more; I have, for my side, two topics that I might be able to say something about, one being the concept of a 'hackable' JIT; you might weigh in about that (spesh plugins)

[11:55] <yoleaux> brrt: I'll pass your message to jnthn.

[11:56] <brrt> good * nwc10

[11:56] <brrt> the other being, bringing fork() to the threading masses

[11:56] <brrt> (I have a cunning plan to make it more general using the GC, but I'm not going to claim it is a universally good idea)

[11:57] *** lucasb joined
[11:57] *** p6bannerbot sets mode: +v lucasb

[12:13] *** zakharyas1 left
[12:25] <lucasb> m: my str @a; @a[5] = 'x'; say @a[0]

[12:25] <camelia> rakudo-moar cea954c1a: OUTPUT: «concatenate requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»

[12:27] <lucasb> ^^ sorry to ask again, this issue is old, but can something be done about it? Is there some technical impediment?

[12:27] <lucasb> Just noticed a interesting detail, .Str populates those 'null' slots:

[12:27] <lucasb> m: my str @a; @a[5] = 'x'; say @a; @a.Str; say @a

[12:27] <camelia> rakudo-moar cea954c1a: OUTPUT: «[x]␤[     x]␤»

[12:28] <brrt> lucasb: I know nothing abou tit

[12:28] <lizmat> lucasb: ticket ?

[12:30] <lucasb> https://github.com/MoarVM/MoarVM/pull/767

[12:30] <lizmat> m: use nqp; my str @a; @a[5] = "a"; say nqp::atposref_s(@a,0)   # seem atposref_s is at fault here

[12:30] <camelia> rakudo-moar cea954c1a: OUTPUT: «concatenate requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»

[12:32] <lizmat> lucasb: I think the atposref_s didn't even exist at the time the ticket was made

[12:32] <lizmat> jnthn: ^^^

[12:40] <lizmat> guess we need some magic at lib/MAST/Ops.nqp line 10926

[12:40] <lizmat> ah no, not

[12:43] * lizmat goes off to look at something else

[12:52] <lizmat> hmmm... nqp::atposref_s does return a container

[12:52] <lizmat> m: use nqp; my str @a; @a[5] = "a"; say nqp::iscont(nqp::atposref_s(@a,0))

[12:52] <camelia> rakudo-moar cea954c1a: OUTPUT: «1␤»

[12:53] <lizmat> m: use nqp; my str @a; @a[5] = "a"; say nqp::isnull_s(nqp::atposref_s(@a,0))  # but the container returns a null_s

[12:53] <camelia> rakudo-moar cea954c1a: OUTPUT: «1␤»

[12:56] *** robertle left
[13:31] <lizmat> thinking more about this, I think nqp::concat needs work:

[13:32] <lizmat> m: use nqp; my str @a; nqp::concat(@a[0],"")   # should that work or not ?

[13:32] <camelia> rakudo-moar cea954c1a: OUTPUT: «concatenate requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»

[13:32] <lizmat> jnthn: ^^^

[13:32] <jnthn> Hmm

[13:32] <yoleaux> 11:55Z <brrt> jnthn: I thought about it some more; I have, for my side, two topics that I might be able to say something about, one being the concept of a 'hackable' JIT; you might weigh in about that (spesh plugins)

[13:32] <jnthn> I think maybe it's more to do with the array access

[13:32] <brrt> (I was talking about the MoreVM conference, btw)

[13:32] <lizmat> jnthn: you want it to return nqp::isnull_s so you can check for that

[13:33] <lizmat> otherwise the point of null_s becomes rather moot

[13:33] <lizmat> this only really becomes a problem as soon as we try to concatenate it with something

[13:33] <lizmat> and in the setting that happens all over the place

[13:33] <jnthn> No, it'll be a problem with every single string op

[13:33] <jnthn> Since they all do a concreteness check

[13:33] <lizmat> ah... hmmm

[13:34] <lizmat> then atposref_s should return a conainer that returns "" if it is isnull_s

[13:35] <jnthn> m: my str @a; use nqp; dd nqp::atpos_s(@a, 0)

[13:35] <camelia> rakudo-moar cea954c1a: OUTPUT: «""␤»

[13:35] <jnthn> m: my str @a; use nqp; dd nqp::atposref_s(@a, 0)

[13:35] <camelia> rakudo-moar cea954c1a: OUTPUT: «""␤»

[13:35] <jnthn> huh :)

[13:35] <jnthn> m: my str @a; @a[5] = 'x'; use nqp; dd nqp::atpos_s(@a, 0)

[13:35] <camelia> rakudo-moar cea954c1a: OUTPUT: «""␤»

[13:35] <jnthn> m: my str @a; @a[5] = 'x'; use nqp; dd nqp::atposref_s(@a, 0)

[13:35] <camelia> rakudo-moar cea954c1a: OUTPUT: «""␤»

[13:36] <jnthn> Is dd lying, or? :)

[13:38] <lizmat> no, that's the hack we put in place I think

[13:39] <lizmat> m: my str @a; @a[5] = 'x'; use nqp; say nqp::atposref_s(@a, 0)

[13:39] <camelia> rakudo-moar cea954c1a: OUTPUT: «concatenate requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»

[13:39] <lizmat> m: my str @a; @a[5] = 'x'; use nqp; say nqp::atposref_s(@a, 0).perl

[13:39] <camelia> rakudo-moar cea954c1a: OUTPUT: «""␤»

[13:44] *** robertle joined
[13:44] *** p6bannerbot sets mode: +v robertle

[14:04] *** zakharyas joined
[14:04] *** p6bannerbot sets mode: +v zakharyas

[14:06] *** brrt left
[14:09] <timotimo> jnthn: do you think it would be a bad idea to start implementing a "force thread $foo to 'throw' an exception the next chance it gets" feature in moarvm? based on the GC signaling mechanism just like the suspend/resume stuff in the debugserver?

[14:11] <lizmat> timotimo: that sounds like an excellent feature  :-)

[14:12] <lizmat> with a typed exception and a CATCH in the thread, it could also be used for a graceful exit

[14:17] <dogbert17> timotimo, jnthn: S17-supply/return-in-tap.t flaps sometime with the gisted message: https://gist.github.com/dogbert17/3f54c8c5e80505f4eb8736bb1bd902f0

[14:17] <dogbert17> any theories as to why?

[14:19] <timotimo> that's weird

[14:20] <timotimo> oh, another thing we should probably have ... aaaand i forgot what i wanted to say

[14:20] <timotimo> ah, right, "manually" invoking the debugger's "unhandled exception" mode, so that the HLL can put that into the thread pool scheduler as well as in the top exception handler that gets everything

[14:21] <jnthn> timotimo: Probably it'd have to be done with the GC signalling mechanism to make it safe/efficient, yes

[14:21] <timotimo> IIRC we already decidde on that much

[14:21] <timotimo> i assume the API will want a thread object, or maybe it should just take the thread ID?

[14:21] <jnthn> But what's the goal for doing it?

[14:22] <jnthn> Thread object for sure

[14:22] <jnthn> That said, it *is* going to be a bit awkward

[14:23] <jnthn> Because basically any allocation would potentially throw

[14:23] <jnthn> And a lot of code inside of the VM won't be expecting that.

[14:24] <timotimo> yeah :\

[14:24] <jnthn> So we'd be adding something with a list of caveats ("won't help if you're blocked in I/O", "won't help if you're blocked on a mutex", "won't help if you're in a native call", etc.) and that if used even those aside is liable to leak memory.

[14:25] <timotimo> leak memory, or just system resources in general?

[14:25] <jnthn> Maybe the latter if we're unlucky

[14:26] <jnthn> At the moemnt, there's an expectation that any allocation failure is fatal (so, panic, not throw)

[14:26] <timotimo> oof, yeah

[14:26] <timotimo> and not everything is "throwish" in the jit, especially

[14:26] <jnthn> That also

[14:26] <jnthn> So it'll be expensive to do right

[14:26] <jnthn> And I fear folks will treat it like "ooh I can use this to cancel a thread uncooperatively"

[14:27] <timotimo> in theory we could have a separate check that we emit when we do the "goto upwards or frame entry/exit"

[14:27] <jnthn> I mean, it's a bit more cooperative than some things :)

[14:27] <timotimo> i kind of wish we could interrupt most IO sanely ... i mean there is signal handlers but ...

[14:28] <jnthn> .Net has similar, for what it's wrorth. The result is people with catch-all handlers catch the exception. They've made it so that it keeps on throwing even if caught, curiously. :)

[14:28] <jnthn> Which means with logging and a deep stack it can produce quite a lot of log entries. :-)

[14:28] <jnthn> Czech class time, bbl

[14:29] <timotimo> see what .net has wroth

[14:44] <timotimo> i'm actually not entirely sure what we'd use "send an exception to a thread" for rather than "kill a worker" if we don't want to offer "i can abort this code!" to users

[15:28] *** domidumont joined
[15:29] *** p6bannerbot sets mode: +v domidumont

[15:35] *** brrt joined
[15:36] *** p6bannerbot sets mode: +v brrt

[15:43] *** zakharyas left
[15:48] *** lizmat left
[16:05] <timotimo> oh, i can't just give rakudo an op that eats an exception and invokes the "unhandled exception" handler of the debugserver, right? because then the stack would have the handler on top of it and that'd be weird? maybe?

[16:10] <timotimo> hmm. that doesn't give me a way to "properly" handle rethrows?

[16:10] <timotimo> do we put another stack frame on top of the existing handler when the handler rethrows, i wonder?

[16:23] *** brrt left
[17:54] *** brrt joined
[17:55] *** p6bannerbot sets mode: +v brrt

[18:22] *** zakharyas joined
[18:23] *** p6bannerbot sets mode: +v zakharyas

[18:26] *** lucasb left
[18:45] *** brrt left
[19:10] *** zakharyas left
[19:23] *** lizmat joined
[19:23] *** p6bannerbot sets mode: +v lizmat

[19:54] *** brrt joined
[19:55] *** p6bannerbot sets mode: +v brrt

[19:55] *** brrt left
[20:02] *** zakharyas joined
[20:03] *** p6bannerbot sets mode: +v zakharyas

[20:39] <Geth> ¦ MoarVM/jit-expr-float: 6 commits pushed by (Bart Wiegmans)++

[20:39] <Geth> ¦ MoarVM/jit-expr-float: 7516b85d93 | [DynASM] Take in REX encoding fix

[20:39] <Geth> ¦ MoarVM/jit-expr-float: a69f14f29d | [JIT] Use bitmap for free register set

[20:39] <Geth> ¦ MoarVM/jit-expr-float: 29418d1624 | [JIT] Autogenerate tile predeclarations

[20:39] <Geth> ¦ MoarVM/jit-expr-float: 732ca8cb15 | [JIT] Compile minilua with only the needed flags

[20:39] <Geth> ¦ MoarVM/jit-expr-float: 6a2f68a822 | [JIT] Move JIT-compile support libs to tools/lib

[20:39] <Geth> ¦ MoarVM/jit-expr-float: 8eaddd91a3 | [JIT] WIP - expr compiler, tiles num support

[20:39] <Geth> ¦ MoarVM/jit-expr-float: review: https://github.com/MoarVM/MoarVM/compare/66efd5dc8024...8eaddd91a347

[20:40] *** domidumont left
[21:15] *** zakharyas left
[21:30] *** robertle left
[22:12] *** lucasb joined
[22:12] *** p6bannerbot sets mode: +v lucasb

[22:12] <Geth> ¦ MoarVM: caf1070327 | (Timo Paulssen)++ | tools/trace_spesh_optimizer.gdb

[22:12] <Geth> ¦ MoarVM: Bring Trace Spesh Optimizer GDB Script Up To Date

[22:12] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/caf1070327

[22:12] <Geth> ¦ MoarVM: e73556499d | (Timo Paulssen)++ | src/spesh/optimize.c

[22:12] <Geth> ¦ MoarVM: Rename optimize_coerce To _in, Add coerce_ni

[22:12] <Geth> ¦ MoarVM:

[22:12] <Geth> ¦ MoarVM: in cases where a coerce_ni is used on the result of

[22:12] <Geth> ¦ MoarVM: a coerce_in, we can just use the original integer.

[22:12] <Geth> ¦ MoarVM:

[22:12] <Geth> ¦ MoarVM: Normally, the combination of these ops would cause

[22:12] <Geth> ¦ MoarVM: truncation of integers to only ~52 bits of precision,

[22:12] <Geth> ¦ MoarVM: <…commit message has 5 more lines…>

[22:12] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e73556499d

[22:12] <Geth> ¦ MoarVM: 640a146115 | (Timo Paulssen)++ | src/spesh/optimize.c

[22:12] <Geth> ¦ MoarVM: Teach optimize_smart_coerce About Boot Types

[22:12] <Geth> ¦ MoarVM:

[22:12] <Geth> ¦ MoarVM: BOOTInt, BOOTNum, and BOOTStr wouldn't be

[22:12] <Geth> ¦ MoarVM: recognized to not have a Str or Num method, but

[22:12] <Geth> ¦ MoarVM: since we made them, we can be sure (if the user

[22:12] <timotimo> whoops, i forgot to kick the one in the middle out

[22:12] <Geth> ¦ MoarVM: didn't meddle).

[22:12] <Geth> ¦ MoarVM:

[22:12] <Geth> ¦ MoarVM: <…commit message has 7 more lines…>

[22:12] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/640a146115

[22:13] <timotimo> also, we're going to build a release soon?

[22:13] <lizmat> like last Saturday ?  :-)

[22:13] <timotimo> i might want to revert them until then?

[22:13] <timotimo> oh, we already did?

[22:13] <jnthn> Probably new opts should not go in

[22:13] <jnthn> Prior to release

[22:13] <lizmat> no, that's the point  :-)

[22:13] <jnthn> But just mention to samcv++ to make a release branch before them :)

[22:23] <timotimo> OK, i'll push a revert commit

[22:24] <timotimo> also, the one about in and ni shouldn't have gone into master

[22:25] *** Kaiepi is now known as Highpie

[22:26] <Geth> ¦ MoarVM: fe4b6c45ad | (Timo Paulssen)++ | src/spesh/optimize.c

[22:26] <Geth> ¦ MoarVM: Revert "Teach optimize_smart_coerce About Boot Types"

[22:26] <Geth> ¦ MoarVM:

[22:26] <Geth> ¦ MoarVM: This reverts commit 640a146115d945c122e98e8576767862ac6e3353.

[22:26] <Geth> ¦ MoarVM:

[22:26] <Geth> ¦ MoarVM: Shouldn't have gone into master just before a release

[22:26] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/fe4b6c45ad

[22:26] <Geth> ¦ MoarVM: 7b1eacea99 | (Timo Paulssen)++ | src/spesh/optimize.c

[22:26] <Geth> ¦ MoarVM: Revert "Rename optimize_coerce To _in, Add coerce_ni"

[22:26] <Geth> ¦ MoarVM:

[22:26] <Geth> ¦ MoarVM: This reverts commit e73556499d47b52125add4b1c19c8c70633cd002.

[22:26] <Geth> ¦ MoarVM:

[22:26] <Geth> ¦ MoarVM: Shouldn't go into master until it's clear how it impacts

[22:26] <Geth> ¦ MoarVM: perl6 code on top of just nqp.

[22:26] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7b1eacea99

[23:15] *** Highpie is now known as Highpi

