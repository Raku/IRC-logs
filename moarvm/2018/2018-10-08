[00:16] *** lizmat left
[03:49] *** MasterDuke left
[05:46] *** AlexDani` joined
[05:47] *** p6bannerbot sets mode: +v AlexDani`

[05:51] *** AlexDaniel left
[06:06] *** domidumont joined
[06:07] *** p6bannerbot sets mode: +v domidumont

[06:07] *** brrt joined
[06:08] *** p6bannerbot sets mode: +v brrt

[06:11] <nine> japhb: about 1.325G on master

[06:12] *** fake_space_whale left
[06:12] <japhb> nine: Ah, so not huge yet, but still a decent improvement.

[06:12] <brrt> \o

[06:13] <brrt> nine++

[06:13] <brrt> all measurement statrs unscientific :-)

[06:13] *** zakharyas joined
[06:14] <brrt> oh, hey, I may have to handle nativeinvoke_o as well

[06:14] *** p6bannerbot sets mode: +v zakharyas

[06:16] *** zakharyas left
[06:18] *** zakharyas joined
[06:18] *** p6bannerbot sets mode: +v zakharyas

[06:44] *** patrickb joined
[06:44] *** p6bannerbot sets mode: +v patrickb

[06:50] *** zakharyas left
[07:04] *** brrt left
[07:08] *** zakharyas joined
[07:09] *** p6bannerbot sets mode: +v zakharyas

[07:35] *** Kaiepi left
[07:39] *** Kaiepi joined
[07:40] *** p6bannerbot sets mode: +v Kaiepi

[08:01] *** zakharyas left
[08:04] *** zakharyas joined
[08:05] *** p6bannerbot sets mode: +v zakharyas

[08:07] *** zakharyas left
[08:46] *** lizmat joined
[08:46] *** p6bannerbot sets mode: +v lizmat

[09:38] *** robertle joined
[09:39] *** p6bannerbot sets mode: +v robertle

[11:23] <timotimo> it'd be interesting to find out the percentage of memory usage from managed vs unmanaged data there

[11:23] <yoleaux> 09:22Z <jnthn> timotimo: https://www.collinsdictionary.com/dictionary/english/its-a-good-job

[11:23] <timotimo> since managed data will be accessed by GC runs, whereas unmanaged data will only be used when the code that "uses" it runs

[11:24] *** brrt joined
[11:25] *** p6bannerbot sets mode: +v brrt

[11:34] <brrt> \o

[11:36] <nwc10> o/

[11:36] <timotimo> \o

[11:36] <brrt> ohai everyone

[11:39] <brrt> I think I need non-opcode template support...

[11:42] <brrt> i.e. templates that aren't specific to opcodes

[11:42] * nwc10 somehow managed to misead that as "I think I need chocolate"

[11:42] <brrt> :-)

[11:44] <timotimo> how would those get inserted?

[11:47] <brrt> a special purpose tree building routine would choose them

[11:47] <brrt> e.g. you'd get something like 'template = MVM_jit_template_lookup(tc, MVM_JIT_TEMPLATE_MARK_BLOCKED);'

[11:47] <timotimo> so more comparable to tiles rather than templates?

[11:47] <brrt> and then you'd apply that template to the tree

[11:48] <brrt> well, they're still templates

[11:49] *** ZzZombo joined
[11:49] *** p6bannerbot sets mode: +v ZzZombo

[12:29] *** fake_space_whale joined
[12:30] *** p6bannerbot sets mode: +v fake_space_whale

[13:13] *** AlexDani` is now known as AlexDaniel

[13:18] *** reportable6 left
[13:18] *** reportable6 joined
[13:19] *** p6bannerbot sets mode: +v reportable6

[14:30] <timotimo> i kind of wish we could have more nqp ops pointed out in the profile, but it'd be an extreme overhead to do it for all, and i'm not sure how to select which would be good to instrument etc etc

[14:43] <lizmat> extreme maint overhead or execution overhead ?

[14:43] <timotimo> execution overhead

[14:44] <lizmat> still, for some extreme case, this could be very worthwhile provided it doesn't interfere with actual measurements ?

[14:45] <nine> Err...how do I flatten an array into a call's arguments in NQP?

[14:47] <timotimo> yeah, but actual measurement will definitely be interfered with

[14:48] <timotimo> we already have pidm aps for perf, but it doesn't understand the output of the jit on a level that'd let you count hits for individual nqp ops

[14:48] <timotimo> and of course the exprjit can cause nqp ops to kind of become fuzzy and semi-merged

[14:48] <lizmat> .oO( damn that chap Heisenberg )

[14:49] <nine> Ah, same as in Perl 6 actually :)

[14:49] <lizmat> sometimes NQP is QP  :-)

[14:49] <timotimo> and sometimes NQP is QWOP

[14:51] <jnthn> It took me ages to figure out that pidm aps are :P

[14:52] <brrt> yeah, me too :-D

[14:54] <brrt> we'll get to ELF support sometime :-)

[14:55] <brrt> (and once that's done, I'll be mapping MBC to ELF. and once *that* is done, static linking?)

[14:55] <lizmat> jnthn: do we keep a cache of descriptors for hashes ?

[14:56] <lizmat> I have a solution for https://github.com/rakudo/rakudo/issues/2348

[14:56] <lizmat> but it creates a new Descriptor for each new Hash

[14:57] <lizmat> well, one created with Hash.new

[15:00] <timotimo> oops :)

[15:00] <jnthn> lizmat: No, not as of yet

[15:01] <lizmat> ok, so that part should be fine then :-)

[15:03] *** brrt left
[15:29] *** MasterDuke joined
[15:29] *** p6bannerbot sets mode: +v MasterDuke

[15:30] *** MasterDuke left
[15:30] *** MasterDuke joined
[15:30] *** herbert.freenode.net sets mode: +v MasterDuke

[15:30] *** p6bannerbot sets mode: +v MasterDuke

[15:34] *** domidumont left
[15:45] *** patrickb left
[16:03] *** robertle left
[16:13] <nine> And there go some 3 seconds :)

[16:13] <jnthn> :)

[16:14] <jnthn> What from? :)

[16:14] <nine> From stage MAST

[16:14] <jnthn> Yeah, I meant thanks to new binary writing ops, or something else? :)

[16:16] <nine> I remembered that back when I still got profiles of the code compile_operand stood out. So instead of having that process operands based on opcode information, I have update_ops.p6 generate a generator sub for each op. No need to check types and flags when you have tailored code

[16:16] <nine> Also this lets me move a couple of sanity checks to those generated subs' signatures

[16:17] <nine> The 3 seconds are from plugging this into MAST::Op.new_with_operand_array. So there's still quite some indirection and some places that still go through compile_operand

[16:19] <jnthn> :)

[16:19] *** brrt joined
[16:20] *** p6bannerbot sets mode: +v brrt

[16:40] *** domidumont joined
[16:41] *** p6bannerbot sets mode: +v domidumont

[17:12] *** patrickb joined
[17:13] *** p6bannerbot sets mode: +v patrickb

[18:07] *** brrt left
[18:11] *** domidumont left
[18:13] *** domidumont joined
[18:14] *** p6bannerbot sets mode: +v domidumont

[18:16] *** domidumont left
[18:55] *** ggoebel left
[19:07] *** ggoebel joined
[19:08] *** p6bannerbot sets mode: +v ggoebel

[19:15] *** MasterDuke left
[19:28] *** MasterDuke joined
[19:28] *** p6bannerbot sets mode: +v MasterDuke

[19:29] *** MasterDuke left
[19:29] *** MasterDuke joined
[19:29] *** herbert.freenode.net sets mode: +v MasterDuke

[19:29] *** p6bannerbot sets mode: +v MasterDuke

[19:35] *** AlexDaniel left
[19:35] *** AlexDaniel joined
[19:36] *** p6bannerbot sets mode: +v AlexDaniel

[21:23] *** patrickb left
[21:47] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/10/08/2018-41-merged-the-js/

