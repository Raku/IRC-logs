[00:25] <Geth> Â¦ MoarVM: a017f61472 | (Samantha McVey)++ | docs/ChangeLog

[00:25] <Geth> Â¦ MoarVM: Remove some unneeded items from the ChangeLog

[00:25] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a017f61472

[00:25] <Geth> Â¦ MoarVM: 752879fcd6 | (Samantha McVey)++ | tools/release.sh

[00:25] <Geth> Â¦ MoarVM: Include 3rdparty/cmp in the release .tar.gz

[00:25] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/752879fcd6

[00:25] <Geth> Â¦ MoarVM: b88799fb6a | (Samantha McVey)++ | VERSION

[00:25] <Geth> Â¦ MoarVM: Release 2018.03

[00:25] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b88799fb6a

[00:39] <MasterDuke> samcv++

[02:56] *** ilbot3 joined
[03:05] *** dogbert11 joined
[04:47] *** releasable6 joined
[06:53] *** brrt joined
[07:04] *** domidumont joined
[07:10] *** domidumont joined
[07:28] *** brrt joined
[07:28] *** robertle joined
[09:39] *** AlexDaniel joined
[10:48] *** dalek joined
[10:48] *** synopsebot joined
[10:48] *** p6lert joined
[10:48] *** Geth joined
[10:48] *** SourceBaby joined
[10:49] *** releasable6 joined
[10:52] *** scovit joined
[11:58] *** dogbert2_ joined
[12:57] *** AlexDaniel joined
[13:47] *** greppable6 joined
[13:57] *** domidumont joined
[14:54] *** domidumont joined
[15:43] *** zakharyas joined
[16:44] *** domidumont joined
[17:12] *** unicodable6 joined
[17:34] *** domidumont joined
[18:02] <dogbert11> any objections for closing https://github.com/MoarVM/MoarVM/issues/791 ?

[18:17] <timotimo> no objections

[18:24] <dogbert11> closed :)

[18:24] <dogbert11> timotimo: I have a question for you

[18:25] <timotimo> please go ahead

[18:25] <dogbert11> I have a program with a loop like this

[18:25] <dogbert11> my int $max = 2_000_000; for (2..($max div 2)) -> int $i { ...

[18:26] <dogbert11> the ($max div 2) could be exchanged for the constant 1_000_000

[18:26] <dogbert11> doing that cuts runtime with 50%, does that seem reasonable?

[18:27] <dogbert11> or do you need to see the entire script (quite short btw)

[18:28] <timotimo> we don't yet do something like that on anything that doesn't have a compile-time-known value, and "my int $max" isn't a constant so it could be changed

[18:29] <dogbert11> so we retrieve the value of max and do the div calc each iteration?

[18:30] <dogbert11> https://gist.github.com/dogbert17/b864cc4d0bb6b0d9cfcee8c85f0f76e3

[18:31] <timotimo> no, the range object gets created once and then iterated over

[18:31] <timotimo> the difference is when we find a range with constant end points in a for loop we turn it into a loop loop

[18:34] <dogbert11> these loop loops seems to be a lot faster

[18:38] <timotimo> yes

[18:38] <timotimo> they don't have to go through pull-one calls at all, they just do the calculations inline immediately

[18:43] <timotimo> oh, huh, there's a getspeshslot here followed by an prof_allocated

[18:43] <timotimo> i wonder how that came to be, that seems wrong

[18:45] <timotimo> a simple for loop benchmark shows that the pull-one calls are entirely inlined, that's good

[18:45] <timotimo> haha, oh that's precious

[18:46] <timotimo> somehow we forgot to rewrite a prof_enterspesh into a prof_enterinlined or what have you

[18:46] <timotimo> leading to <unit> calling <unit> in the call graph (rather than more correctly adding the calls to pull-one)

[18:47] <timotimo> aha, we expect the enterspesh op to be in an exact position, which perhaps isn't the case here

[18:49] <dogbert11> how can we figure that out?

[18:53] <timotimo> indeed, the null instructions go there now

[18:53] <timotimo> which also means we're dropping tiny amounts of wallclock time on the floor

[18:58] <timotimo> excellent.

[18:59] <dogbert11> it is ?

[18:59] <timotimo> so it'd appear that ever since we added the "create null instructions to make object registers clean" feature inlining has been b0rked in the profiler :D

[18:59] <timotimo> but here's the fix

[19:00] <dogbert11> cool

[19:00] <Geth> Â¦ MoarVM: ed4ed0e947 | (Timo Paulssen)++ | src/debug/debugserver.c

[19:00] <Geth> Â¦ MoarVM: metadata for ReentrantMutex and Semaphore

[19:00] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ed4ed0e947

[19:00] <Geth> Â¦ MoarVM: 63348dce08 | (Timo Paulssen)++ | src/spesh/graph.c

[19:00] <Geth> Â¦ MoarVM: insert null-out-instructions before prof_enter

[19:00] <Geth> Â¦ MoarVM:

[19:00] <Geth> Â¦ MoarVM: this caused us to miss the prof_enterspesh instruction when

[19:00] <Geth> Â¦ MoarVM: inlining because we expected it to be the first instruction

[19:00] <Geth> Â¦ MoarVM: of the second BB.

[19:00] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/63348dce08

[19:00] <timotimo> Calls (Inlined)

[19:00] <timotimo> 9176 + 90824 (90.82%)

[19:01] <dogbert11> should this change affect program speed ?

[19:01] <timotimo> no

[19:02] <dogbert11> but the profiler will be happy :)

[19:06] <timotimo> yup

[19:07] <timotimo> profile files may also become a bit smaller

[19:08] <timotimo> right now you'd get one "wrong" self-call for every frame that has inlines, and the self-call would have inside itself all calls that any inlined function would have done

[19:09] *** FROGGS joined
[19:11] <timotimo> *snrt*, the race-is-prime profile is still >50 megs

[19:22] <dogbert11> :(

[19:22] <timotimo> did you see the thing with the call graph getting deeper and deeper?

[19:23] <dogbert11> in the profiler you mean

[19:23] <timotimo> well, you can see it in the profiler

[19:23] <timotimo> but the corresponding stack traces match up

[19:25] <timotimo> thing is, when we await and get resumed by the Thread Pool Scheduler later, it seems like we keep adding frames to the call stack, where perhaps we should be re-using previous frames or something?

[19:27] <timotimo> if this is actually the case, we'll keep growing our memory usage, and GCs will get a little slower over time as well

[19:28] <timotimo> http://hack.p6c.org/~timo/exponential_framecounts.png

[19:28] <timotimo> this is a random screenshot i took the other day

[19:28] <timotimo> oh, no it isn't

[19:34] <dogbert11> looking at the profile it seems as if postcircumfix [] took most of the time, 58%

[19:40] <timotimo> what's your code?

[19:41] *** bisectable6 joined
[19:43] <dogbert11> the gist above

[19:44] <timotimo> ah

[19:45] <timotimo> yeah, postcircumfix:<[ ]> can be expensive; try replacing it with ASSIGN-POS and measure again

[19:45] <dogbert11> the line with $max div 2 comes second with 24%

[19:45] <timotimo> that'd be the block that starts on that line

[19:45] <dogbert11> ah, of course

[19:46] <timotimo> it spends about a third of its time in postcircumfix:<[ ]> indeed

[19:46] <dogbert11> I'm on 32 bit atm, that might possibly account for the difference

[19:48] <timotimo> oh, huh, ASSIGN-POS is actually a bunch slower

[19:49] <timotimo> even though ASSIGN-POS is 99.98% inlined into postcircumfix:<[ ]>, it only accounts for 46% of time spent

[19:49] <dogbert11> I get the impression that something odd is going on, can't put my finger on it though

[19:51] * dogbert11 now profiling the fast version , i.e. '$max div 2'  =>  '1_000_000'

[19:55] <dogbert11> in the fast version postcircumfix [] takes 40% followed by ASSIGN-POS with 22%

[19:56] <timotimo> anyway, we're getting the Int candidate rather than int for the assignment here

[19:58] <timotimo> you get a few % speedup if you @a[...] = (my int $ = 1) instead of @a[...] = 1

[19:58] <dogbert11> timotimo: this line 'my int @a = (0..$max);' is this array setup with a single malloc?

[19:59] <timotimo> likely, check out if it calls push-all

[20:00] <dogbert11> can't see it

[20:00] <timotimo> if i see it right, we're taking like 300 msec to get it stored

[20:00] <timotimo> it'd be under a call to STORE

[20:01] <dogbert11> STORE is there

[20:01] <timotimo> one store is from native_array, i believe that's the line you pasted

[20:02] <dogbert11> ok, cool

[20:02] <timotimo> the other STOREâ€“ the one from regular array, is probably from the grep at the end

[20:02] <timotimo> yes, indeed, it calls into <anon> on line 15

[20:02] <dogbert11> here's an odd thing. I changed the main loop to 'for (2..10) -> int $i {' in my last profile and removed the the grep line at the end

[20:03] <dogbert11> still according to the profiler, there are 3857926 calls to ASSIGN-POS (looking at the entries column)

[20:04] <dogbert11> and equally many entries for postcircumfix[]

[20:04] <dogbert11> I must be misunderstanding what the 'entries' column mean

[20:05] <timotimo> so only 2..10 runs of the outer, yeah?

[20:05] <timotimo> don't forget that you'll still go from 0 to $max with your inner loop

[20:05] <dogbert11> ah, got it, missed that one (oops)

[20:06] <dogbert11> yup, that was it

[20:07] <timotimo> huh, what the hell is this bytecode in Int:D + Int:D

[20:08] <timotimo> am i looking at this right? it looks so wrong ?!?!

[20:08] <timotimo> i mean it only takes 0.41% of total run time

[20:08] <timotimo> https://gist.github.com/timo/ed27b750840ed15f69d6a837ba4f925f

[20:09] <timotimo> in the "after" section, it's grabbing the same attribute from the object (i assume this is unboxing the bigint from inside the Int object) into r5 and r8

[20:09] <timotimo> and then it overwrites both r8 and r5 with the same thing from the other argument

[20:10] <dogbert11> it does look strange

[20:11] <timotimo> i should use my trusty "trace spesh optimization" script for that

[20:11] <timotimo> but i hvae to go grocery shopping so we can has some dinner

[20:11] <dogbert11> dinner is important :)

[20:12] <dogbert11> thx for the help though

[20:12] <dogbert11> at least you found a bug :)

[21:07] <timotimo> yup!

[21:08] <timotimo> graphviz is still fiddling around with the 104k nodes callgraph from hyper is-prime

[22:30] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/03/19/2018-12-remotely-edument/

[22:47] *** notable6 joined
[23:22] *** Kaiepi joined
