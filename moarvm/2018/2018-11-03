[00:18] <Geth> ¦ MoarVM: 7aa9500ee4 | (Timo Paulssen)++ | src/profiler/instrument.c

[00:18] <Geth> ¦ MoarVM: nativecallcast invokes, so have profiler track it

[00:18] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7aa9500ee4

[00:21] <timotimo> we should really be able to figure out which ops allocate with clever use of breakpoints. like, whenever MVM_gc_alloc is called, check what line in interp.c it corresponds to and build a Set of those

[01:14] *** fake_space_whale joined
[01:15] *** p6bannerbot sets mode: +v fake_space_whale

[04:59] *** fake_space_whale left
[06:30] *** lizmat_ joined
[06:30] *** p6bannerbot sets mode: +v lizmat_

[06:33] *** lizmat left
[07:15] *** domidumont joined
[07:16] *** p6bannerbot sets mode: +v domidumont

[07:27] *** AlexDaniel left
[09:55] <nine> We only have a return_i op, but no return_u op.

[09:57] <nine> So we actually coerce a uint64 to int64 before returning it. Considering that in memory uint and int are the same and it's just the interpretation that differs, couldn't we just omit the coercer and use return_i to return the uint?

[10:06] <nine> Ah, no. The bytecode validator complains

[10:40] <timotimo> the bytecode validator doesn't run after spesh, i don't think

[10:40] <timotimo> so spesh could probably turn it into a set op

[10:41] *** lizmat_ is now known as lizmat

[10:42] <nine> That would get rid of the coercer before the return but still wouldn't get the block to get a uint return_kind

[11:12] <timotimo> ah

[11:30] <jnthn> We probably should add a return_u; unsigned handling is still a bit sketchy

[11:33] <nine> And sp_getarg_u

[11:34] <nine> Though sp_getarg_i seems to work just fine for unsinged args

[11:43] <Geth> ¦ MoarVM/nqp-mbc: 27 commits pushed by (Stefan Seifert)++

[11:43] <Geth> ¦ MoarVM/nqp-mbc: review: https://github.com/MoarVM/MoarVM/compare/ddc2b1f257e3...8a8e0e67f9f9

[11:43] <nine> ^^^ rebase

[11:45] <Geth> ¦ MoarVM/nqp-mbc: 8 commits pushed by (Stefan Seifert)++

[11:45] <Geth> ¦ MoarVM/nqp-mbc: 2ddc0bd0e2 | First param_*_u support in spesh

[11:45] <Geth> ¦ MoarVM/nqp-mbc: 067bcacf98 | Speed up add_strings by avoiding coercion to num

[11:45] <Geth> ¦ MoarVM/nqp-mbc: 10f1fb5b55 | Speed up MAST::Op.new a tiny bit

[11:45] <Geth> ¦ MoarVM/nqp-mbc: 36df0f9f5e | Turn lexical_names_idxs into a list_i for better efficiency

[11:45] <Geth> ¦ MoarVM/nqp-mbc: ff7c59ded5 | Expr JIT compile unbox_u

[11:45] <Geth> ¦ MoarVM/nqp-mbc: 64f86a5388 | Expr JIT compile serializetobuf

[11:45] <Geth> ¦ MoarVM/nqp-mbc: cd53a30dd6 | Use proper type for $pos/$offset in Bytecode's *_at methods

[11:45] <Geth> ¦ MoarVM/nqp-mbc: 354d912040 | Speed up adding locals/lexicals by using the proper types

[11:45] <Geth> ¦ MoarVM/nqp-mbc: review: https://github.com/MoarVM/MoarVM/compare/8a8e0e67f9f9...354d912040f1

[11:46] <Geth> ¦ MoarVM/nqp-mbc: 7 commits pushed by (Stefan Seifert)++

[11:46] <Geth> ¦ MoarVM/nqp-mbc: c7e4821203 | compile_simple_call Frame method for arg-less block invocations

[11:46] <Geth> ¦ MoarVM/nqp-mbc: c8d4f238ca | Speed up a couple op generators by avoiding .isa

[11:46] <Geth> ¦ MoarVM/nqp-mbc: b278bcee89 | Replace hard coded values by MVM_INTERN_ARITY_LIMIT in MVM_callsite_try_intern

[11:46] <Geth> ¦ MoarVM/nqp-mbc: 2fbf759756 | Replace hard coded values by ones derived from MVM_INTERN_ARITY_LIMIT in MVMMultiCache.c

[11:46] <Geth> ¦ MoarVM/nqp-mbc: 6aff59284c | Expr JIT template for sp_findmeth

[11:46] <Geth> ¦ MoarVM/nqp-mbc: 401bf555c9 | JIT compile coerce_us

[11:46] <Geth> ¦ MoarVM/nqp-mbc: 02c8980895 | Teach spesh about known values for PHI nodes

[11:46] <Geth> ¦ MoarVM/nqp-mbc: review: https://github.com/MoarVM/MoarVM/compare/354d912040f1...02c8980895c8

[13:53] *** fake_space_whale joined
[13:54] *** p6bannerbot sets mode: +v fake_space_whale

[14:21] <nine> Does anyone feel like reviewing nqp-mbc or should I just merge it and we improve it afterwards?

[14:33] <timotimo> well, we're far from a release anyway; do you mean only the moarvm branch or also the nqp branch?

[14:33] <timotimo> i don't think there'd be a problem merging only the moarvm branch

[14:34] <timotimo> maybe the ecosystem should be toasted with the nqp-mbc mast backend

[14:35] <nine> I'd need to merge the branches in all repos

[14:37] <timotimo> ah

[14:37] <timotimo> releasable6: status

[14:37] <releasable6> timotimo, Next release in ≈14 days and ≈4 hours. 2 blockers. 0 out of 58 commits logged

[14:37] <releasable6> timotimo, Details: https://gist.github.com/2d4fa0c8c355d9b9dbb4c7fd3fd751a6

[14:37] <timotimo> 2 weeks should be plenty to find and fix problems; wost case a revert should still be possible, right?

[14:37] <nine> sure

[14:38] <timotimo> you have my +1 at least

[14:40] <dogbert17> does any of you know why having a BEGIN phaser at the beginning of a one-liner slows it down massively?

[14:40] <dogbert17> nine++ (go for it)

[14:40] <Geth> ¦ MoarVM/master: 43 commits pushed by (Stefan Seifert)++

[14:40] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/7aa9500ee402...4fbaeee5f3f0

[14:41] <nine> It is....done!

[14:41] <nine> That was quite a bit more work than expected, but such is life :)

[14:41] <dogbert17> impressive

[14:43] <timotimo> i'm wondering if any of this work would let us have a slimmer implementation for nativecall's compilation parts - for moar only, of course

[14:44] <timotimo> but i guess since that already builds qast, and qast to mbc is now a step shorter, it'll already benefit a lot

[14:45] <nine> Yes, we could still gain a bit there

[14:45] <timotimo> oh? cool

[14:45] <timotimo> it'd be pretty rad if we could compile multiple functions at once, too

[14:47] <nine> at once?

[14:48] *** shareable6 left
[14:48] <timotimo> into a single compunit

[14:48] *** shareable6 joined
[14:49] *** p6bannerbot sets mode: +v shareable6

[14:49] <nine> Right now compilation of nativeinvoke goes through $call_gen in QASTOperationsMAST. That's very generic. We already know that it has exactly 2 args and what kind they are. It'd be possible to handle them like speshresolve.

[14:49] <timotimo> gotta go AFK now for a while, though

[14:49] <nine> You mean threaded?

[14:50] <timotimo> not necessarily; could just be lazy

[14:50] <timotimo> have a counter of how often unoptimized functions were called

[14:50] <timotimo> when it reaches a threshold, compile all functions that were called in the mean time and reset the counter

[14:51] <timotimo> say, how about a hook we can call at BEGIN time

[14:51] <nine> FWIW it already compiles those optimized functions at BEGIN time, so your typical binding module won't incur any runtime overhead

[14:51] <timotimo> like, my @funcs = ::.grep(*.is-native); NativeCall::CompileAll(@funcs)

[14:51] <nine> https://github.com/rakudo/rakudo/blob/master/lib/NativeCall.pm6#L736

[14:52] <timotimo> ah, i thought the first call would cause compilation

[14:52] <timotimo> in that case they all land in the single compunit, too

[14:52] <timotimo> fantastic!

[14:52] <timotimo> but, hold on

[14:52] <timotimo> ooh, it installs a check phaser?

[14:52] <nine> How do you think I've kept ahead in the benchmarking game for so long :)

[14:53] <timotimo> you're scary smart, sir.

[14:53] * nine bows

[14:53] * timotimo does the AFK thing

[14:53] <timotimo> o/

[14:56] <dogbert17> nine: do you have any theories as to why 'BEGIN { }; { for ^10_000_000 { }; say now - ENTER now }' is much slower than '{ for ^10_000_000 { }; say now - ENTER now }'

[14:59] <nine> Err...no?

[15:02] <dogbert17> it's quite strange methinks

[15:03] * dogbert17 is trying to build Rakudo on a RPi2 atm

[15:05] *** travis-ci joined
[15:05] *** p6bannerbot sets mode: +v travis-ci

[15:05] <travis-ci> MoarVM build errored. Stefan Seifert 'Merge branch 'nqp-mbc''

[15:05] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/450228766 https://github.com/MoarVM/MoarVM/compare/7aa9500ee402...4fbaeee5f3f0

[15:05] *** travis-ci left
[15:06] <nine> How can I create an actual int literal in NQP?

[15:23] <MasterDuke> nine: i get a couple new warnings now: https://gist.github.com/MasterDuke17/21f2df5e9f5e352f86180c32596f2ce5

[15:26] <Geth> ¦ MoarVM: 255bf8a7ad | (Stefan Seifert)++ | src/core/validation.c

[15:26] <Geth> ¦ MoarVM: Fix error in format string in validate_reg_operand

[15:26] <Geth> ¦ MoarVM:

[15:26] <Geth> ¦ MoarVM: Thanks to MasterDuke++ for pointing this out!

[15:26] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/255bf8a7ad

[15:28] <MasterDuke> nine++ that was fast

[15:41] *** nativecallable6 left
[15:41] *** nativecallable6 joined
[15:41] *** p6bannerbot sets mode: +v nativecallable6

[15:42] *** AlexDaniel joined
[15:42] *** p6bannerbot sets mode: +v AlexDaniel

[15:49] *** patrickb joined
[15:50] *** p6bannerbot sets mode: +v patrickb

[15:52] *** travis-ci joined
[15:52] *** p6bannerbot sets mode: +v travis-ci

[15:52] <travis-ci> MoarVM build errored. Stefan Seifert 'Fix error in format string in validate_reg_operand

[15:52] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/450239670 https://github.com/MoarVM/MoarVM/compare/4fbaeee5f3f0...255bf8a7ad03

[15:52] *** travis-ci left
[16:53] *** lizmat left
[16:56] *** lizmat joined
[16:56] *** p6bannerbot sets mode: +v lizmat

[17:32] *** MasterDuke left
[17:44] <nwc10> nine: I get a backtrace failure early in the NQP build if I have MoarVM built with #define MVM_SPESH_CHECK_DU 1

[17:44] <nwc10> and without, t/nqp/033-init.t t/nqp/081-radix.t and t/nqp/101-lexpad-stuff.t all fail with "MoarVM panic: Register types do not match between value and node"

[17:56] <nwc10> and I forgot (to repeat) that I have SR0-amp-hack

[17:56] <nwc10> on no, not *That*

[17:56] <nwc10> I have MVM_SPESH_BLOCKING=1 and MVM_SPESH_NODELAY=1 set in my environment

[17:57] <nwc10> (and #define MVM_ARRAY_CONC_DEBUG 1 and #define FSA_SIZE_DEBUG 1 but they probably don't matter. And yes this is under ASAN but it made no comment)

[17:58] <nwc10> sorry, this all seems like a somewhat LTA response to what's actually "oh cool, the branch got merged"

[18:53] <timotimo> nine: what exact kind of literal do you need? something with P6int repr? i.e. not a bigint?

[19:12] <nine> Yeah, just an int

[19:13] <timotimo> hm, is that what BOOTInt is, or is that bigint?

[19:14] <timotimo> no, BOOTInt is actually a P6int

[19:14] <nine> nwc10: well it was a huge branch with lots of optimizations. Regressions are not exactly surprising :)

[19:14] <timotimo> rather than a P6bigint-boxing type

[19:41] *** domidumont left
[19:43] *** domidumont joined
[19:44] *** p6bannerbot sets mode: +v domidumont

[19:53] *** domidumont left
[20:14] *** patrickb left
[21:26] *** ugexe left
[21:53] *** ugexe joined
[21:54] *** p6bannerbot sets mode: +v ugexe

[22:07] *** zakharyas joined
[22:08] *** p6bannerbot sets mode: +v zakharyas

[22:31] <nine> nwc10: my branch appears to be innocent after all. Even if I revert my 2 changes to spesh, the error still appears. So I presume the spesh bug was already there and my code just uncovered it. At least if my understanding is correct that errors in the DU chain can only be caused by spesh bugs.

[22:31] *** zakharyas left
[22:34] *** zakharyas joined
[22:34] *** p6bannerbot sets mode: +v zakharyas

[23:02] *** zakharyas left
[23:24] <timotimo> jetbrains ide over x forwarding might not be a very good idea

[23:24] * timotimo grabs a bowl of chips

[23:31] <timotimo> nope, it's not working well enough

