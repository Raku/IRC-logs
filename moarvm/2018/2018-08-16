[00:03] *** Hobby12 left
[01:17] *** UncleSamuel joined
[01:21] *** UncleSamuel left
[01:31] <timotimo> stumbled upon an sp_guard followed later by an sp_guardconc (that the enhanced guard opt turned into a sp_guardjustconc) on ... the result of sp_fastcreate

[01:31] <timotimo> that should really not need any guards at all i think

[01:31] <timotimo> maybe i can find out what's wrong

[01:35] <timotimo> could be time to freshen up the spesh trace script for the new function names and such

[01:38] <MasterDuke> would i ever want something other than 1 in the MVM_dump_bytecode_stackframe(tc, 1) call?

[01:38] <timotimo> to see what your stuff is called from further and further up the stack i guess

[02:01] *** lizmat left
[02:06] <timotimo> spesh dumping violently explodes when trying to dump one annotation's filename

[02:06] <timotimo> it's going about 8k past the number of strings that actually exist in the cu

[02:06] <timotimo> fortunately, i can "just" put a range check in here

[02:09] * timotimo just implemented comments for the spesh log

[02:09] <timotimo> i.e. you can put a comment onto an instruction and it'll be printed into the speshlog

[02:10] <timotimo> wants to become a utility function, of course

[02:26] <Geth> Â¦ MoarVM/spesh_comments: 4 commits pushed by (Timo Paulssen)++

[02:26] <Geth> Â¦ MoarVM/spesh_comments: 3aaa95a18f | gracefully handle out-of-bounds filename indices

[02:26] <Geth> Â¦ MoarVM/spesh_comments: b034698747 | add spesh comments; put arbitrary strings in speshlog

[02:26] <Geth> Â¦ MoarVM/spesh_comments: d2c40f0bec | spesh comment when turning a guard into a set

[02:26] <Geth> Â¦ MoarVM/spesh_comments: 53dd98ebd4 | turn guard(type|conc) into guardjust(type|conc)

[02:26] <Geth> Â¦ MoarVM/spesh_comments: review: https://github.com/MoarVM/MoarVM/compare/3aaa95a18f6c^...53dd98ebd471

[02:26] <timotimo> this branch also contains an optimization, but i wanted the comments for debugging why some guards stick around

[02:36] <Geth> Â¦ MoarVM/spesh_comments: b7c4e21da4 | (Timo Paulssen)++ | src/spesh/graph.c

[02:36] <Geth> Â¦ MoarVM/spesh_comments: don't even need to allocate when spesh log is off

[02:36] <Geth> Â¦ MoarVM/spesh_comments: review: https://github.com/MoarVM/MoarVM/commit/b7c4e21da4

[02:39] <timotimo> i'll want functions that dump an instruction including facts for its registers next

[02:40] <timotimo> bedtime first

[04:10] <timotimo> no sleep to be had just yet :\

[04:23] *** strugee joined
[04:26] *** strugee left
[04:40] <timotimo> the issue was just that P6opaque's spesh function should set the facts after turning create into fastcreate

[04:41] <timotimo> the 'Loop' method of src/Rakudo/Iterator goes from 414 bytes to 342 bytes with that simple addition

[04:54] <timotimo> in infix:Â«=>Â» we were missing lowering bindattr for $!key and $!value because the facts from sp_fastcreate were being added too late

[04:55] <timotimo> 364 (176 from inlines) went down to 254 (80 from inlines) for that infix

[05:07] <timotimo> it might be a good idea to backport this to master, actually

[05:07] <timotimo> it's a benign change

[05:07] <timotimo> though i haven't checked if master suffers from the problem this commit tries to solve, since some ordering was changed

[05:07] <timotimo> so perhaps it was the postrelease-opts branch that introduced this regression in the first place

[05:13] *** Ritche27 joined
[05:16] *** Ritche27 left
[05:20] *** justif29 joined
[05:22] *** justif29 left
[05:33] <Geth> Â¦ MoarVM/postrelease-opts: 71020ce698 | (Timo Paulssen)++ | 3 files

[05:33] <Geth> Â¦ MoarVM/postrelease-opts: set type and concrete facts for fastcreate

[05:33] <Geth> Â¦ MoarVM/postrelease-opts:

[05:33] <Geth> Â¦ MoarVM/postrelease-opts: do it immediately in the spesh function of the reprs

[05:33] <Geth> Â¦ MoarVM/postrelease-opts: VMArray, MVMHash, and P6opaque. This throws out a

[05:33] <Geth> Â¦ MoarVM/postrelease-opts: bunch of guards that were being left in the code in

[05:33] <Geth> Â¦ MoarVM/postrelease-opts: a test i did.

[05:33] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/71020ce698

[05:33] <Geth> Â¦ MoarVM/postrelease-opts: 8c872360e3 | (Timo Paulssen)++ | 3 files

[05:33] <Geth> Â¦ MoarVM/postrelease-opts: add type/concrete to box_* spesh, too

[05:33] <Geth> Â¦ MoarVM/postrelease-opts:

[05:33] <Geth> Â¦ MoarVM/postrelease-opts: also, no need to get_and_use_facts when we're

[05:33] <Geth> Â¦ MoarVM/postrelease-opts: changing the operation that writes that register.

[05:33] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/8c872360e3

[05:37] <timotimo> the guard opt is somehow not getting invoked on a bunch of guards in the .tc.flip example

[05:39] <timotimo> i added the sp_guard* ops to the second_pass and that changed things. we might have to think about whether the second pass is a better place for the opt in general

[05:40] <timotimo> i mean post_inline_pass

[05:41] <timotimo> maybe i'll retry the sleep thing

[05:47] *** Geeky_Bear joined
[05:52] *** Gentle joined
[05:54] *** EvilRoey15 joined
[05:55] *** Geeky_Bear left
[05:57] *** EvilRoey15 left
[05:57] *** Gentle left
[06:12] *** bungle2 joined
[06:16] *** bungle2 left
[06:28] *** brrt joined
[06:29] *** p6bannerbot sets mode: +v brrt

[06:44] <Geth> Â¦ MoarVM/fork-safety: 9f342dd8ce | (Bart Wiegmans)++ | 6 files

[06:44] <Geth> Â¦ MoarVM/fork-safety: [Spesh] Tear down spesh worker in full_cleanup

[06:44] <Geth> Â¦ MoarVM/fork-safety:

[06:44] <Geth> Â¦ MoarVM/fork-safety: For the purposes of

[06:44] <Geth> Â¦ MoarVM/fork-safety: - clean teardown in full_cleanup mode

[06:44] <Geth> Â¦ MoarVM/fork-safety: - testing for memory leaks with ASAN

[06:44] <Geth> Â¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/commit/9f342dd8ce

[06:44] <Geth> Â¦ MoarVM/fork-safety: dd9eda8ee6 | (Bart Wiegmans)++ | 3 files

[06:44] <Geth> Â¦ MoarVM/fork-safety: [ConcBlockingQueue] Unmoving body

[06:44] <Geth> Â¦ MoarVM/fork-safety:

[06:44] <Geth> Â¦ MoarVM/fork-safety: The locks structure was already malloc'd, and I extended this to include

[06:44] <Geth> Â¦ MoarVM/fork-safety: the entire body. This prevents the GC from moving the body while we are

[06:44] <Geth> Â¦ MoarVM/fork-safety: blocked on acquiring a lock, simplifying the code, and has negligible

[06:44] <Geth> Â¦ MoarVM/fork-safety: cost.

[06:44] <Geth> Â¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/commit/dd9eda8ee6

[06:45] *** lizmat joined
[06:46] *** p6bannerbot sets mode: +v lizmat

[06:59] *** zakharyas joined
[07:00] *** p6bannerbot sets mode: +v zakharyas

[07:16] *** benchable6 joined
[07:16] *** p6bannerbot sets mode: +v benchable6

[07:16] <Geth> Â¦ MoarVM/fork-safety: 417509598d | (Bart Wiegmans)++ | 5 files

[07:16] <Geth> Â¦ MoarVM/fork-safety: [Spesh] Tear down spesh worker in full_cleanup

[07:16] <Geth> Â¦ MoarVM/fork-safety:

[07:16] <Geth> Â¦ MoarVM/fork-safety: If the spesh worker is still active the GC can try to free a lock that

[07:16] <Geth> Â¦ MoarVM/fork-safety: is being held, which leads to an abort in libuv. Stopping the thread

[07:16] <Geth> Â¦ MoarVM/fork-safety: makes full-cleanup work (although it still leaks).

[07:16] <Geth> Â¦ MoarVM/fork-safety:

[07:16] <Geth> Â¦ MoarVM/fork-safety: Thread is stopped by signalling with VMNull. Ideally we'd unshift this

[07:16] <Geth> Â¦ MoarVM/fork-safety: to the front of the queue, but that is more complicated.

[07:17] <Geth> Â¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/commit/417509598d

[07:17] <Geth> Â¦ MoarVM/fork-safety: b7c500963f | (Bart Wiegmans)++ | 3 files

[07:17] <Geth> Â¦ MoarVM/fork-safety: [ConcBlockingQueue] Unmoving body

[07:17] <Geth> Â¦ MoarVM/fork-safety:

[07:17] <Geth> Â¦ MoarVM/fork-safety: The locks structure was already malloc'd, and I extended this to include

[07:17] <Geth> Â¦ MoarVM/fork-safety: the entire body. This prevents the GC from moving the body while we are

[07:17] <Geth> Â¦ MoarVM/fork-safety: blocked on acquiring a lock, simplifying the code, and has negligible

[07:17] <Geth> Â¦ MoarVM/fork-safety: cost.

[07:17] <Geth> Â¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/commit/b7c500963f

[07:20] *** lizmat left
[07:52] *** ^MillerBoss joined
[07:52] *** ^MillerBoss left
[08:11] *** ilmari_ left
[08:11] *** AlexDaniel` left
[08:12] *** brrt left
[08:13] *** committable6 left
[08:13] *** bisectable6 left
[08:14] *** krysjonaz joined
[08:14] *** shareable6 left
[08:14] *** greppable6 left
[08:14] *** statisfiable6 left
[08:14] *** nativecallable6 left
[08:20] *** krysjonaz left
[08:21] *** AlexDaniel` joined
[08:21] *** p6bannerbot sets mode: +v AlexDaniel`

[08:40] *** bairdmich joined
[08:41] *** brrt joined
[08:42] *** p6bannerbot sets mode: +v brrt

[08:45] *** bairdmich left
[08:48] *** ilmari_ joined
[08:48] *** wictory[m] joined
[08:48] *** p6bannerbot sets mode: +v ilmari_

[08:48] *** p6bannerbot sets mode: +v wictory[m]

[09:05] *** lizmat joined
[09:06] *** p6bannerbot sets mode: +v lizmat

[09:11] *** nativecallable6 joined
[09:11] *** bisectable6 joined
[09:11] *** committable6 joined
[09:11] *** statisfiable6 joined
[09:12] *** p6bannerbot sets mode: +v nativecallable6

[09:12] *** p6bannerbot sets mode: +v bisectable6

[09:12] *** p6bannerbot sets mode: +v committable6

[09:12] *** p6bannerbot sets mode: +v statisfiable6

[09:23] *** lizmat left
[09:27] *** Carlos061112 joined
[09:32] <jnthn> timotimo: No, I don't think the second pass is better for the guard elimination opts, since we'd then miss the deopt retention removal with them

[09:32] *** Carlos061112 left
[09:42] *** robertle joined
[09:43] *** p6bannerbot sets mode: +v robertle

[09:54] *** brrt left
[09:55] *** bmos18 joined
[09:56] *** bmos18 left
[10:00] *** cyberzeus16 joined
[10:01] *** p6bannerbot sets mode: +v cyberzeus16

[10:05] *** cyberzeus16 left
[10:33] <Geth> Â¦ MoarVM/postrelease-opts: 41132cc4f4 | (Jonathan Worthington)++ | 3 files

[10:33] <Geth> Â¦ MoarVM/postrelease-opts: Box lowering for P6[int|num|str]

[10:33] <Geth> Â¦ MoarVM/postrelease-opts:

[10:33] <Geth> Â¦ MoarVM/postrelease-opts: This is aimed at helping NQP code rather than Perl 6 code, but does

[10:33] <Geth> Â¦ MoarVM/postrelease-opts: the same trick that we've done for the Perl 6 ones. Alas, the int one

[10:33] <Geth> Â¦ MoarVM/postrelease-opts: loses the use of the int box cache, so needs a bit more work yet.

[10:33] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/41132cc4f4

[10:33] <jnthn> Hmm...tricky to decide how exactly to re-integrate the int box cache here

[10:34] <jnthn> I guess having these picked apart is kinda nice for EA

[10:35] <jnthn> Though maybe we could have a spesh op that is a box cache lookup + a fastcreate + a bind

[10:35] <jnthn> And have the EA understand enough to pick it apart

[10:44] *** sysdef joined
[10:44] *** sysdef is now known as Guest16236

[10:48] *** lizmat joined
[10:49] *** p6bannerbot sets mode: +v lizmat

[10:50] *** lizmat left
[10:52] *** lizmat joined
[10:52] *** lizmat left
[10:53] *** Guest16236 left
[11:02] *** brrt joined
[11:03] *** p6bannerbot sets mode: +v brrt

[11:17] *** brrt left
[11:17] *** brrt joined
[11:18] *** p6bannerbot sets mode: +v brrt

[11:19] *** lizmat joined
[11:20] *** p6bannerbot sets mode: +v lizmat

[11:22] *** brrt left
[11:24] *** lizmat left
[11:26] *** zakharyas left
[11:38] *** robertle left
[11:44] *** timeless29 joined
[11:47] *** timeless29 left
[12:52] *** lizmat joined
[12:53] *** p6bannerbot sets mode: +v lizmat

[12:59] *** zakharyas joined
[13:00] *** p6bannerbot sets mode: +v zakharyas

[13:01] *** zakharyas1 joined
[13:02] *** p6bannerbot sets mode: +v zakharyas1

[13:04] *** zakharyas left
[13:05] *** zakharyas joined
[13:06] *** p6bannerbot sets mode: +v zakharyas

[13:08] *** zakharyas1 left
[13:24] *** darkmagic joined
[13:25] *** darkmagic left
[13:32] *** brrt joined
[13:32] *** p6bannerbot sets mode: +v brrt

[13:37] <brrt> \o

[13:38] <timotimo> o/

[13:44] <brrt> ohai timotimo

[13:45] <brrt> do you have an opinion on the choice between a): a release branch on which we port only fixes and continue to work on master, or b): a development branch from which we update master every so often?

[13:46] <brrt> postrelease-opts is a kind of de facto development branch, but I'd like to keep the advantage of branches-as-change-isolation

[13:47] <brrt> point is, i'm kind of annoyed at the 'pause' introduced by the release proces

[13:47] <brrt> *process

[13:48] <timotimo> i'm not quite sure about it

[13:49] <timotimo> i assume the percentage of users who build MOAR_REVISION is pretty high, right?

[13:50] <timotimo> so it's not quite as important which of the two we'd do

[13:53] <brrt> hmm.. right.

[14:01] <brrt> btw, the debug server is another system thread that needs to be stopped for fork safety

[14:01] <brrt> timotimo: ooc, why didn't you use libuv?

[14:01] <timotimo> i'm not used to using libuv :S

[14:01] <timotimo> would i actually have a benefit from it?

[14:01] <timotimo> since i only accept a single connection anyway, i'm not sure how much win there'd be

[14:02] <brrt> it's kind of simpler

[14:02] <brrt> I think....

[14:02] <brrt> also because it kind of abstracts over the distinction between windows and linux

[14:02] <brrt> or other unixes

[14:02] <brrt> also, and more important for my selfish purposes; I can *stop* a libuv thread

[14:03] <timotimo> ah

[14:03] <timotimo> so i'd have to have a select and maybe a condition variable otherwise?

[14:03] <brrt> i'm not sure how to do that if the debugserver thread is blocked on the accept()

[14:03] <brrt> yeah, if you did select(), that'd probably work?

[14:04] <timotimo> what happens if you just close the socket from another thread while the debugserver thread is accepting or receiving?

[14:04] <brrt> i don't know

[14:04] <timotimo> it might give a helpful errno value that i can just interpret as "well, fine, i'll stop"

[14:10] <brrt>  stackoverflow says it might not

[14:16] <brrt> hmm

[14:16] <brrt> I might just not support fork() until we can interrupt debugserver somehow

[14:21] <brrt> maybe select() would work. but that's not going to work on linux

[14:21] <brrt> eh, windows, i think

[14:22] * brrt has half a mind to rewrite the networking stuff to use libuv

[14:36] <brrt> in fact, MoarVM provides a ready made uv_loop for every threadcontext

[14:36] <brrt> that's funny

[14:36] <brrt> and if i'm honest, maybe not what we want...

[14:37] <jnthn> We decreasingly need that, tbh

[14:38] <jnthn> Most sync I/O is no longer done using libuv

[14:38] <jnthn> It'd be interesting to see what does need the per-thread loop

[14:38] <jnthn> And potentially just start it "on demand"

[14:38] <jnthn> Might save us a bit of startup effort

[14:39] <brrt> yeah, that would need some analysis :-)

[14:47] *** lizmat left
[14:56] *** lizmat joined
[14:57] *** p6bannerbot sets mode: +v lizmat

[15:03] *** zakharyas left
[15:04] *** zakharyas joined
[15:05] *** zakharyas left
[15:06] *** zakharyas joined
[15:07] *** p6bannerbot sets mode: +v zakharyas

[15:24] <Geth> Â¦ MoarVM/fork-safety: d409b909e8 | (Bart Wiegmans)++ | 3 files

[15:24] <Geth> Â¦ MoarVM/fork-safety: [IO] Stop event loop thread

[15:24] <Geth> Â¦ MoarVM/fork-safety:

[15:24] <Geth> Â¦ MoarVM/fork-safety: Stop loop with uv_stop(uv_loop) and join the thread

[15:24] <Geth> Â¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/commit/d409b909e8

[15:29] <timotimo> jnthn: did you see spesh_comments? :)

[15:30] <jnthn> Yeah, I've wondered about that, in part for explaining what happens :)

[15:31] <timotimo> i'm not sure how to parse that

[15:32] *** robertle joined
[15:32] <jnthn> I'd wondered about such a feature in the past

[15:32] <timotimo> ah!

[15:32] <jnthn> In part because I thought it could be interesting to provide information about what kinds of optimizations were performed

[15:32] <timotimo> yes, i think i've been part of a little bit of discussion on that

[15:33] *** p6bannerbot sets mode: +v robertle

[15:33] <jnthn> Maybe we can even collect such things when profiling

[15:35] <timotimo> currently the profiler doesn't separate call graph nodes into individual spesh candidates

[15:36] <jnthn> Yeah, true

[15:36] <jnthn> It's not clear the average profiler wants this either

[15:36] <timotimo> so comments from speshing would possibly be muddled together there, and there now isn't even really a simple correspondence to what call graph node was "responsible"

[15:36] <timotimo> aye

[15:38] <timotimo> might be more advantageous to eventually add a spesh viewer to the profiler frontend

[15:39] <jnthn> I did ponder a little bit making it possible to pull them out via the debug server interface, so you can do a run of a program (or even interrogate a long-running program) about its specializations

[15:40] <timotimo> yeah, i'd kind of like that, too

[15:40] <timotimo> i wanted to build a messagepack output format for the spesh graph including facts anyway

[15:40] <jnthn> Then finding a way in Comma to intersperse source with spesh output and maybe JIT output disassembly :P

[15:41] <timotimo> so it would not only be an output mode for MVM_SPESH_LOG, but also immediately useful for the debug server as well

[15:41] <jnthn> ooh, yes

[15:44] *** avar left
[15:45] *** avar joined
[15:45] *** avar left
[15:45] *** avar joined
[15:45] *** p6bannerbot sets mode: +v avar

[15:46] *** p6bannerbot sets mode: +v avar

[15:47] <timotimo> do we want to keep spesh graphs around after they've been jitted so that the debugserver can query them, or should the debugserver stream out whatever got speshed, or should you be able to ask it to re-generate the spesh for you on demand?

[15:47] <jnthn> Stream 'em, I think

[15:47] <jnthn> Provided they were asked for, of course

[15:47] <jnthn> And maybe we'll want to be able to ask them with certain things included/excluded

[15:48] *** lizmat left
[15:48] <jnthn> Like "I don't care about all the compiler guts" :)

[15:48] <timotimo> oh, you know, just get at EVAL via nqp::getcomp, and compile a regular expression :)

[15:54] <timotimo> anyway, the next step for the comment branch is a quick function that dumps an instruction just like the spesh log dumper itself would, including a bitfield that lets you select what operands to dump facts for, which for example could also output the contents of a spesh slot

[15:54] <timotimo> i'll be factoring out a bunch of that code for this purpose

[16:02] <jnthn>         | mov dword OBJECT:RV->header.owner, TMP1d; // does this even work?

[16:02] <jnthn> ...gee, I hope so, it's been there some years by now :P

[16:02] <timotimo> is this fastcreate?

[16:04] *** zakharyas left
[16:05] <jnthn> yes :)

[16:05] <timotimo> oh, i thought you put that comment there for the irc message; but it's actually in the code :D

[16:06] <jnthn> yeah :)

[16:13] <timotimo> if i'm already adding a datastructure that holds information about types - the managed size, in particular - i might as well add more info. any ideas what'd be potentially interesting?

[16:13] <timotimo> anything from the repr_data would be fair game, i think

[16:26] * jnthn wonders what the correct way to write             | mov TMP2, TMP2[TMP1]

[16:26] <jnthn> is

[16:27] <jnthn> brrt: Any hints? :)

[16:27] <jnthn> https://gist.github.com/jnthn/ad791530757f723b9759b6eeb9aa2058 is the context, fwiw

[16:30] <timotimo> perhaps [TMP2 + TMP1]?

[16:31] <jnthn> Well it compiles

[16:31] <jnthn> But I'm getting TMP1 needs to be scaled?

[16:32] <timotimo> could be, yeah

[16:32] *** thisisbilly2 joined
[16:32] <timotimo> not quite good at the assembly either

[16:32] <timotimo> me, that is

[16:32] <jnthn> given the crashes everywhere, I figure "yes" :)

[16:36] <timotimo> oh, i can take the "type" key out of every allocation node and put it into the type infos list instead

[16:36] <jnthn> gist updated with compiling but busted code :)

[16:36] <timotimo> that'll save one hash entry for every allocation data piece; except i'm not sure it even makes a difference in actual memory allocations

[16:37] *** thisisbilly2 left
[16:37] <timotimo> since hashes are already always bigger than their contents

[16:37] <timotimo> i wonder if perhaps you have to deref TMP2 before calculating the offset?

[16:38] * timotimo tries to figure that out

[16:38] <jnthn> oh, maybe

[16:39] <timotimo> perhaps that can just go in the line above, mov TMP2, [qword cache]

[16:39] <jnthn> no :)

[16:39] <timotimo> OK %)

[16:40] <jnthn> [qword cache] ain't valid; [cache] compiles but still behaves terribly :)

[16:42] <jnthn> oh, I did a think elsewhere and broke the usual case...

[16:45] <jnthn> Think I got it working

[16:45] <timotimo> \o/

[16:46] <timotimo> i don't quite see how fastbox does any boxing if the cache isn't used

[16:46] <timotimo> so it probably just doesn't do it yet?

[16:49] <jnthn> It's the fastcreate and bind just below

[16:54] <jnthn> 170s ain't a bad spectest time, especially when I'm sure I was seeing 190+ at the start of the week...

[16:56] <timotimo> we're getting somewhere, eh?

[16:56] <jnthn> Maybe it was last week

[16:56] <jnthn> Still :)

[16:58] <Geth> Â¦ MoarVM/postrelease-opts: cd0020e7ab | (Jonathan Worthington)++ | 11 files

[16:58] <Geth> Â¦ MoarVM/postrelease-opts: Re-instate use of int cache in fast boxing

[16:58] <Geth> Â¦ MoarVM/postrelease-opts:

[16:58] <Geth> Â¦ MoarVM/postrelease-opts: For JIT, we now emit assembly that does the comparisons and then does

[16:58] <Geth> Â¦ MoarVM/postrelease-opts: a fetch from the integer cache if applicable. Thus the only real call

[16:58] <Geth> Â¦ MoarVM/postrelease-opts: is to obtain memory from the GC if we need to box, the value then

[16:58] <Geth> Â¦ MoarVM/postrelease-opts: being poked into the object at the appropriate location.

[16:58] <Geth> Â¦ MoarVM/postrelease-opts:

[16:58] <Geth> Â¦ MoarVM/postrelease-opts: Also stub in as-yet unimplemented and unused spesh ops that we'll use

[16:58] <Geth> Â¦ MoarVM/postrelease-opts: for optimizing boxing to a P6bigint embedded in a P6opaque.

[16:58] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/cd0020e7ab

[16:58] <jnthn> I suspect that sequence could be a tad shorter by using a callee save register

[16:59] <jnthn> And so only loading the value ones in the good case

[17:09] *** brrt left
[17:11] *** mobijubo7 joined
[17:17] *** mobijubo7 left
[17:27] <mst> what. the fuck.

[17:27] <yoleaux> 13 Aug 2018 15:36Z <Zoffix> mst: FYI: I set the channels to +z and made p6bannerbot watch the traffic. It waits 45 seconds to +v a new user, but if that user sent any messages 20s before the end of those 45s, the bot doesn't voice.

[17:27] <timotimo> what's wrong, mst?

[17:28] <mst> timotimo: that (invisible to you) spam blast was really bizarre

[17:28] <timotimo> oh, OK

[17:28] <mst> .note Zoffix seems to be working pretty nicely

[17:47] <Geth> Â¦ MoarVM/postrelease-opts: 8fac6c3dd7 | (Jonathan Worthington)++ | 6 files

[17:47] <Geth> Â¦ MoarVM/postrelease-opts: First attempt at a fast box for big integers

[17:47] <Geth> Â¦ MoarVM/postrelease-opts:

[17:47] <Geth> Â¦ MoarVM/postrelease-opts: Almost works, but the range check for whether to store it as a small

[17:47] <Geth> Â¦ MoarVM/postrelease-opts: int always comes out false, so it always takes the bigint path.

[17:47] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/8fac6c3dd7

[17:47] <jnthn> I gotta go cook, but if any kind soul fancies fixing my wrong assembly... :P

[17:48] <jnthn> &

[17:49] *** alphor22 joined
[17:53] <timotimo> i wonder if you just gotta use cmpq there

[17:53] *** alphor22 left
[17:53] <timotimo> or if that's automatically selected for you

[17:55] <timotimo> nope, "unknown statement cmpq"

[17:55] <timotimo> welp, there goes my idea

[18:18] *** cloe5 joined
[18:22] *** cloe5 left
[18:53] *** norkle15 joined
[18:56] *** norkle15 left
[19:09] *** xous13 joined
[19:12] *** xous13 left
[19:26] *** Aprexer joined
[19:27] *** lizmat joined
[19:28] *** p6bannerbot sets mode: +v lizmat

[19:30] *** Aprexer left
[19:37] *** KellerFuchs29 joined
[19:38] *** KellerFuchs29 left
[20:00] *** dogbert17 joined
[20:01] *** p6bannerbot sets mode: +v dogbert17

[20:03] <dogbert17> hmm, the postrelease-opts branch is a bit borked atm it seems (unless I'm doing something wrong ofc)

[20:13] <MasterDuke> timotimo: i want to break on a function in gdb while building rakudo, but it's going to hit tons of times before i'm really interested in it. could i use the debugserver to set a breakpoint in the rakudo build so that when that hits i then go and set the gdb one?

[20:17] <jnthn> dogbert17: I didn't spectest the latest patch, and it's certainly doing *something* wrong in the JITted output

[20:18] <jnthn> dogbert17: A step back from HEAD seemed pretty OK

[20:42] <timotimo> MasterDuke: yes, i think that would work

[20:47] *** lizmat left
[20:55] <MasterDuke> hm, good to know in the future (i approximated it by sticking a little used nqp op before the line i was interested in and breaking on its function)

[20:57] <timotimo> i do that all the time :) :)

[20:58] <Geth> Â¦ MoarVM/postrelease-opts: d699863c52 | (Jonathan Worthington)++ | src/jit/x64/emit.dasc

[20:58] <Geth> Â¦ MoarVM/postrelease-opts: Correct somehow typo'd integer constant

[20:58] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/d699863c52

[20:58] <jnthn> Duh. And it works after that :P

[21:01] <MasterDuke> timotimo: what's that sequence of gdb command to run something every time you break, but then continue?

[21:02] *** lizmat joined
[21:02] *** p6bannerbot sets mode: +v lizmat

[21:04] <dogbert17> jnthn: I still have plenty of spectest fails

[21:08] * dogbert17 I must be doing something wrong, getting a SEGV in t/spec/S17-promise/start.t

[21:16] <dogbert17> crashes at https://github.com/MoarVM/MoarVM/blob/master/src/spesh/plugin.c#L76

[21:25] <jnthn> dogbert17: I meant works as in "gets the expected speedup" :)

[21:26] *** celyr23 joined
[21:26] <jnthn> I left spectest to run while I went for a walk and indeed it's got some failures

[21:26] *** celyr23 left
[21:27] <dogbert17> jnthn: ah, I thought you meant spectest clean :)

[21:29] <jnthn> No, no :)

[21:30] <jnthn> I coded this up just before I left the office and pushed it so I could continue playing back home

[21:34] <jnthn> It blows up without JIT so it's not inept assembly programming this time

[21:34] <jnthn> And the spesh guard blowup is actually 'cus there's a null pointer somewhere that there's not meant to be one

[21:35] <jnthn> (e.g. the input to that code, which would be from an argument)

[21:35] <jnthn> So that's also probably one step back from the symptom too

[21:36] <jnthn> Inept C programming this time :P

[21:36] <jnthn> The JIT was right, the interpreter was wrong :)

[21:37] <jnthn> Which goes to show how much we manage to JIT

[21:37] <Geth> Â¦ MoarVM/postrelease-opts: 5ef7fc60b8 | (Jonathan Worthington)++ | src/core/interp.c

[21:37] <Geth> Â¦ MoarVM/postrelease-opts: Fix missing result register writes

[21:37] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/5ef7fc60b8

[21:39] <Geth> Â¦ MoarVM/postrelease-opts: 3b3b9948f4 | (Jonathan Worthington)++ | src/core/interp.c

[21:39] <Geth> Â¦ MoarVM/postrelease-opts: Correct op names in error messages

[21:39] <Geth> Â¦ MoarVM/postrelease-opts:

[21:39] <Geth> Â¦ MoarVM/postrelease-opts: Spotted by MasterDuke++.

[21:39] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/3b3b9948f4

[21:44] <timotimo> MasterDuke: you'd set the breakpoint, then "commands" or "commands <number of breakpoint>", then you can type "call something()" "c" "end"

[21:48] *** stmuk_ joined
[21:49] *** p6bannerbot sets mode: +v stmuk_

[21:50] *** stmuk left
[21:50] <jnthn> Yeah, that's much better

[21:52] <dogbert17> jnthn: indeed, only one fail left

[21:52] <jnthn> t/spec/S32-exceptions/misc.rakudo.moar ?

[21:52] <dogbert17> which seems to be GC related so perhaps it's old

[21:53] <dogbert17> t/spec/S12-methods/default-trait.t

[21:53] *** sparr24 joined
[21:53] <dogbert17> Program received signal SIGSEGV, Segmentation fault.

[21:53] <dogbert17> 0xb7b639e2 in MVM_gc_mark_collectable (tc=tc@entry=0x804c628, worklist=worklist@entry=0xa5148a0, new_addr=new_addr@entry=0xa674088) at src/gc/collect.c:370

[21:54] <dogbert17> 370         MVM_gc_worklist_add(tc, worklist, &(tc->instance->all_scs[sc_idx]->sc));

[21:54] <dogbert17> Y

[21:55] *** sparr24 left
[21:56] *** clonak9 joined
[22:03] *** clonak9 left
[22:28] <Geth> Â¦ MoarVM: 7277670061 | (Samantha McVey)++ | tools/release.sh

[22:28] <Geth> Â¦ MoarVM: Make release.sh more clear as to which we want written to MANIFEST

[22:28] <Geth> Â¦ MoarVM:

[22:28] <Geth> Â¦ MoarVM: Also restricts the scope of what is output to MANIFEST to a specific

[22:28] <Geth> Â¦ MoarVM: section of code and not the entire script.

[22:28] <Geth> Â¦ MoarVM:

[22:28] <Geth> Â¦ MoarVM: Indent the for/do loop as well.

[22:28] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7277670061

[22:32] <timotimo> oh hey samcv

[22:32] *** Guest3399 joined
[22:33] <timotimo> i saw your talk, though really only parts of it because the beginning - felt like more than half - was cut off before the stream started or something :<

[22:33] <samcv> oh hi

[22:33] <samcv> yeah

[22:33] <samcv> technical issues sadly. mine was the first talk of the day

[22:33] <timotimo> :<

[22:34] *** Guest3399 left
[22:35] <samcv> i will upload my slides though

[22:36] <timotimo> the part of it that i saw was good

[22:47] <samcv> timotimo: https://cry.nu/TPC-EU-2018/#/

[22:48] *** travis-ci joined
[22:48] *** p6bannerbot sets mode: +v travis-ci

[22:48] <travis-ci> MoarVM build failed. Samantha McVey 'Make release.sh more clear as to which we want written to MANIFEST

[22:48] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/417031753 https://github.com/MoarVM/MoarVM/compare/86ba33728a34...7277670061a1

[22:48] *** travis-ci left
[22:50] <samcv> not me!

[23:47] <Geth> Â¦ MoarVM/postrelease-opts: 8fc798aeb6 | (Jonathan Worthington)++ | 2 files

[23:47] <Geth> Â¦ MoarVM/postrelease-opts: Start work towards lowering unbox operations

[23:47] <Geth> Â¦ MoarVM/postrelease-opts:

[23:47] <Geth> Â¦ MoarVM/postrelease-opts: Sometimes a decont really is an unbox in disguise, so handle those too.

[23:47] <Geth> Â¦ MoarVM/postrelease-opts: So far, implemented it for P6opaque box around a native num and native

[23:47] <Geth> Â¦ MoarVM/postrelease-opts: str.

[23:47] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/8fc798aeb6

[23:47] <Geth> Â¦ MoarVM/postrelease-opts: a6b3e0a7a5 | (Jonathan Worthington)++ | src/spesh/optimize.c

[23:47] <Geth> Â¦ MoarVM/postrelease-opts: Do basic block merging as the last step

[23:47] <Geth> Â¦ MoarVM/postrelease-opts:

[23:47] <Geth> Â¦ MoarVM/postrelease-opts: Nothing else depends on it, and there's a potential risk of it not

[23:47] <Geth> Â¦ MoarVM/postrelease-opts: leaving the dominance tree in good shape.

[23:47] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/a6b3e0a7a5

[23:53] <jnthn> 'night o/

