[00:16] <timotimo> does anybody want to find out why minilua gets recompiled every run?

[00:17] <timotimo> t/nqp/093-oo-ops.t ..................... ok

[00:17] <timotimo> Cannot invoke this object (REPR: Null; VMNull)

[00:17] <timotimo>    at gen/moar/stage2/QRegex.nqp:1260  (QRegex.moarvm:check_PACKAGE_oopsies)

[00:17] <timotimo> same failure mode as last time i think

[00:17] <timotimo> that was t/nqp/094-clone.t fwiw

[00:30] <japhb> timotimo: I believe the minilua recompile is an intentional workaround

[00:30] <Geth> Â¦ MoarVM/simplify_logic_ops: 4b5273fc46 | (Timo Paulssen)++ | src/spesh/optimize.c

[00:30] <Geth> Â¦ MoarVM/simplify_logic_ops: Optimize band_i And bor_i With if_i And unless_i

[00:30] <Geth> Â¦ MoarVM/simplify_logic_ops:

[00:30] <Geth> Â¦ MoarVM/simplify_logic_ops: a band_i or bor_i with two known inputs will be

[00:30] <Geth> Â¦ MoarVM/simplify_logic_ops: constant-folded, and an if_i or unless_i acting

[00:30] <Geth> Â¦ MoarVM/simplify_logic_ops: on a bor_i or band_i with one known input will

[00:30] <Geth> Â¦ MoarVM/simplify_logic_ops: either be constant-folded (x and 0 always equals 0,

[00:30] <Geth> Â¦ MoarVM/simplify_logic_ops: x or 1 always equals 1) or use the unknown input

[00:30] <Geth> Â¦ MoarVM/simplify_logic_ops: <â€¦commit message has 6 more linesâ€¦>

[00:30] <Geth> Â¦ MoarVM/simplify_logic_ops: review: https://github.com/MoarVM/MoarVM/commit/4b5273fc46

[00:31] <timotimo> ^- this one was fun

[00:31] <japhb> timotimo: Ah, here it is: 9ef725d5c - Always rebuild minilua to work around issue #999 (5 weeks ago) <Samantha McVey>

[00:31] <timotimo> japhb: damn :(

[00:31] <timotimo> M#999

[00:31] <synopsebot> M#999 [open]: https://github.com/MoarVM/MoarVM/issues/999 [build] MoarVM Fails to Compile on OpenSUSE due to missing libffi.so.6

[00:32] <timotimo> japhb: how do you like this commit i made?

[00:32] <japhb> 4b52?

[00:33] <timotimo> https://github.com/rakudo/rakudo/blob/master/src/core/Array.pm6#L458 - this function gets the bitand_i thrown out

[00:34] <timotimo> because spesh guards on the concreteness of $!reified

[00:34] <timotimo> tbh that's barely worth anything

[00:34] <timotimo> but whatever!

[00:36] <timotimo> yes, that one

[00:39] <japhb> Interesting.  Just learned a bit about how that all works by reading that.  :-)

[00:40] <timotimo> i hope it's not a total waste for real-world code

[00:41] <timotimo> this code will likely also want to be run in a loop

[00:41] <timotimo> if there's a bigger logic chain

[00:41] <japhb> nodnod

[00:44] <japhb> OK, thinking about that -- how would such a logic chain appear?  I would think there needs to be some context propogation there, rather than just noticing that the immediate child of an if_i or unless_i is optimizable.

[00:46] <timotimo> if $foo.DEFINITE && $bar.DEFINITE && $quux.DEFINITE { } or something

[01:03] <timotimo> i'm not sure i understood your question right

[01:08] <timotimo> anyway, throwing out a const_i64_16 and a band_i should get like 2 * 16 for the opcodes, 5 * 16 for registers and the constant?

[01:08] <timotimo> so that's 14 bytes of moar bytecode saved?

[01:08] <timotimo> in some situations that could perhaps get a frame below the inline limit

[01:43] *** MasterDuke joined
[01:43] *** p6bannerbot sets mode: +v MasterDuke

[01:43] *** MasterDuke left
[01:43] *** MasterDuke joined
[01:43] *** herbert.freenode.net sets mode: +v MasterDuke

[01:43] *** p6bannerbot sets mode: +v MasterDuke

[01:56] *** MasterDuke left
[03:07] *** evalable6 left
[03:11] *** evalable6 joined
[03:12] *** p6bannerbot sets mode: +v evalable6

[03:15] *** lizmat left
[07:32] *** evalable6 left
[07:36] *** evalable6 joined
[07:36] *** p6bannerbot sets mode: +v evalable6

[08:40] *** dogbert11 joined
[08:41] *** p6bannerbot sets mode: +v dogbert11

[08:43] *** dogbert17 left
[09:28] *** lizmat joined
[09:28] *** p6bannerbot sets mode: +v lizmat

[10:45] *** brrt joined
[10:46] *** p6bannerbot sets mode: +v brrt

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke: 7735232455 | (Bart Wiegmans)++ | 4 files

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke: [JIT] Implement invoke sequence in expr JIT

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke: review: https://github.com/MoarVM/MoarVM/commit/7735232455

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke: 9df22bcfe6 | (Bart Wiegmans)++ | src/jit/graph.c

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke: [JIT] Eliminate special consume_invoke opcode

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke:

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke: Except for nativecall_invoke, we no longer need this part of the

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke: legacy JIT.

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke: review: https://github.com/MoarVM/MoarVM/commit/9df22bcfe6

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke: 9907340f0d | (Bart Wiegmans)++ | 7 files

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke: [JIT] WIP on nativeinvoke in the expression JIT

[10:47] <Geth> Â¦ MoarVM/expr-jit-invoke: review: https://github.com/MoarVM/MoarVM/commit/9907340f0d

[10:48] <Geth> Â¦ MoarVM/jit-expr-optimizer: 4 commits pushed by (Bart Wiegmans)++

[10:48] <Geth> Â¦ MoarVM/jit-expr-optimizer: 8c60fad377 | [JIT] Simple tree-rewriting optimizer

[10:48] <Geth> Â¦ MoarVM/jit-expr-optimizer: 53dde5dc08 | [JIT] Optimize multiple loads to a COPY

[10:48] <Geth> Â¦ MoarVM/jit-expr-optimizer: 6acd31b61d | Optimize ADD of CONST to ADDR

[10:48] <Geth> Â¦ MoarVM/jit-expr-optimizer: 2dc8f8ec43 | Eliminate COPY of CONST

[10:48] <Geth> Â¦ MoarVM/jit-expr-optimizer: review: https://github.com/MoarVM/MoarVM/compare/ee5d6c88ea78...2dc8f8ec4353

[10:48] <brrt> ohai #moarvm

[10:48] <brrt> I'm done with the regularly scheduled rebasing now :-)

[11:01] *** lizmat left
[11:04] *** brrt left
[11:25] *** lizmat joined
[11:25] *** p6bannerbot sets mode: +v lizmat

[11:33] *** brrt joined
[11:33] *** p6bannerbot sets mode: +v brrt

[12:07] *** brrt left
[13:42] *** rurban_ joined
[13:42] *** p6bannerbot sets mode: +v rurban_

[13:43] *** rurban_ left
[14:40] *** brrt joined
[14:41] *** p6bannerbot sets mode: +v brrt

[14:58] *** committable6 left
[14:59] *** committable6 joined
[14:59] *** benchable6 left
[14:59] *** benchable6 joined
[14:59] *** nativecallable6 left
[14:59] *** p6bannerbot sets mode: +v committable6

[15:00] *** p6bannerbot sets mode: +v benchable6

[15:03] *** brrt left
[15:57] *** nativecallable6 joined
[15:58] *** p6bannerbot sets mode: +v nativecallable6

[16:08] *** brrt joined
[16:09] *** p6bannerbot sets mode: +v brrt

[16:25] *** Ven`` joined
[16:59] *** Ven`` left
[17:00] *** Ven`` joined
[17:01] *** p6bannerbot sets mode: +v Ven``

[18:01] <brrt> btw, I have a commit to cancel out the rebuilds of minilua

[18:19] <nine> And the winner is... eliminate_unused_log_guards! Removing that call from MVM_spesh_optimize fixes the issue on Big Endian machines

[18:39] <nine> The bad news is: the error when compiling Telemetry.pm6 is actually a different one from the GLOBAL thing in the setting

[19:13] *** lucasb joined
[19:13] *** p6bannerbot sets mode: +v lucasb

[19:18] <brrt> ouch

[19:18] <brrt> I'm suspicious of that nine

[19:18] <brrt> or well, what would we introduce then, that would be endianness-invalid?

[19:32] <nine> I don't see anything obvious

[19:33] <nine> Currently looking for the optimization that breaks the GLOBAL thing. Maybe that will give a better hint

[19:35] <brrt> hmm

[19:47] <timotimo> if eliminate_unused_log_guards causes the problem, then somewhere we're getting facts, doing an optiimzation based on these facts, and not marking them as "used" with the right function

[20:50] <nine> Apparently optimize_decont is behind the GLOBAL error when compiling the setting

[20:57] <brrt> I was wondering if we could get rid of the flags area of an MVMObject

[20:58] <brrt> because it means we need to do a dereference of the pointer every time we assign the pointer

[20:58] <brrt> (which in turn means that we need at least a NULL check if null is at all possible)

[20:59] <brrt> maybe not all the flags, but I was hoping perhaps to replace the second-generation flag

[20:59] <timotimo> you think the lowest bits of the pointer could hold a flag or two?

[21:00] <brrt> yes, that could be done

[21:00] <timotimo> an "is STABLE" and "is concrete" flag could go there, no?

[21:00] <timotimo> those are flags that i don't think would change

[21:01] <brrt> i was thinking more like MVM_CF_SECOND_GEN, since we need that for every write barrier

[21:01] <timotimo> that'd be fair

[21:01] <brrt> but yes, isconcrete would be another good option

[21:03] <brrt> in fact, one thing I'd think of was to fix the position of the nursery in memory using mmap

[21:03] <timotimo> so that ASLR can't happen? :)

[21:03] <brrt> not for the nursery, no

[21:03] <brrt> not sure if this is a legitimate strategy

[21:04] <timotimo> well, every thread has its own nursery

[21:04] <timotimo> and threads die and re-live

[21:04] <timotimo> ... not really re-live

[21:04] <brrt> that's the only problem i'm seeing, yes....

[21:05] <brrt> although it is kind of a big one :-)

[21:05] <timotimo> will this work on most or all of our target platforms?

[21:12] <brrt> you can totally do this in UNIXes, but it isn't always respected

[21:13] <brrt> and win32 VirtualAlloc similarly has an address paramter

[21:13] <brrt> I'm not sure this is sufficiently reliable though

[21:14] <brrt> whereas the flag-in-lowest-bits trick always works

[21:30] *** brrt left
[23:02] *** Ven`` left
[23:05] *** Ven`` joined
[23:06] *** p6bannerbot sets mode: +v Ven``

[23:43] *** lucasb left
