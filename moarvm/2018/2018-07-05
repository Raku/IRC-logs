[02:33] *** lizmat left
[05:03] *** squashable6 joined
[05:56] *** Zoffix joined
[05:56] <Zoffix> New blog post: "The Missing Contributors of Perl 6": https://rakudo.party/post/The-Missing-Contributors-of-Perl6

[06:05] *** Zoffix left
[06:33] *** brrt joined
[06:44] *** robertle joined
[07:05] *** brrt left
[07:18] *** domidumont joined
[07:21] *** zakharyas joined
[07:25] *** domidumont left
[07:25] *** domidumont joined
[07:45] *** lizmat joined
[08:11] *** brrt joined
[08:27] *** brrt left
[08:29] *** brrt joined
[08:45] *** brrt left
[08:51] *** zakharyas left
[08:52] *** zakharyas joined
[09:18] *** brrt joined
[09:51] <jnthn> D'oh, one can get spesh dump to crash because it assumes it can look up the filename string index in the comp unit of the thing the top-level graph is for, but of course it might be inlined code from a totally different CU

[09:51] <jnthn> Now I'm wondering if the profiler either solves this or trips over this. :)

[10:12] <Geth> Â¦ MoarVM/inline-unspecialized: 24d3b5bf2f | (Jonathan Worthington)++ | src/spesh/dump.c

[10:12] <Geth> Â¦ MoarVM/inline-unspecialized: Fix dump of inlined spesh line/file annotations

[10:12] <Geth> Â¦ MoarVM/inline-unspecialized:

[10:12] <Geth> Â¦ MoarVM/inline-unspecialized: We did the string index lookup on the wrong CU, which could crash the

[10:12] <Geth> Â¦ MoarVM/inline-unspecialized: dumper.

[10:12] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/24d3b5bf2f

[10:18] <Geth> Â¦ MoarVM/inline-unspecialized: a935d00e71 | (Jonathan Worthington)++ | src/spesh/optimize.h

[10:18] <Geth> Â¦ MoarVM/inline-unspecialized: Better document MAX_ARGS_FOR_OPT

[10:18] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/a935d00e71

[10:31] <Geth> Â¦ MoarVM/inline-unspecialized: 5ef61a7663 | (Jonathan Worthington)++ | src/spesh/args.c

[10:31] <Geth> Â¦ MoarVM/inline-unspecialized: When inlining unspecialized, set arg type facts

[10:31] <Geth> Â¦ MoarVM/inline-unspecialized:

[10:31] <Geth> Â¦ MoarVM/inline-unspecialized: So that we at least can do useful optimizations based upon those.

[10:31] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/5ef61a7663

[10:33] <jnthn> I think that branch is mostly good now

[10:40] <brrt> \o/

[10:41] <brrt> by the way, if new statistics come in for the inlinees (does that still happen?), will they be replaced?

[10:41] <jnthn> Not at the moment, no

[10:42] <brrt> hmm.

[10:42] <jnthn> Well, doesn't happen, nor will they be replaced

[10:42] <brrt> because, once speshed, the logging instructions will be removed..

[10:42] <jnthn> Right :)

[10:43] <brrt> :-)

[10:51] *** zakharyas left
[10:51] <jnthn> huh, why on earth and I getting an empty spesh log

[10:52] <jnthn> It only comes out empty if I set an MVM_SPESH_LIMIT :S

[10:52] <jnthn> How would that change anything...

[10:54] <jnthn> Oh...huh, it now only dumps the limited frame...in theory

[10:54] <jnthn> But in reality it's dumping nothing

[10:57] *** zakharyas joined
[11:05] <jnthn> It gets stranger.

[11:06] <jnthn> Also the error is

[11:06] <jnthn> At Frame 12, Instruction 14, op 'trunc_i8', operand 0, MAST::Local of wrong type (17) specified; expected 1

[11:07] <jnthn> Which looks a lot like the native.t or whatever it was failure that nwc10 reported the other day

[11:07] <jnthn> Which is making me suspect this isn't to do with my branch

[11:07] <brrt> no, that is very probable

[11:07] <brrt> I / we broke something and i've yet to figure out what

[11:08] <jnthn> Yeah, it seems very action-at-a-distance-y

[11:09] <brrt> try if it breaks under MVM_JIT_DISABLE

[11:09] <jnthn> MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 ./perl6-m -Ilib t/spec/S12-construction/named-params-in-BUILD.t

[11:09] <jnthn> That reliably fails

[11:09] <jnthn> With MVM_JIT_DISABLE=1 it reliably works

[11:10] <jnthn> With MVM_JIT_EXPR_DISABLE=1 it...huh, worked once, but mostly fails

[11:11] <jnthn> So yeah, it seems JIT-y

[11:13] <brrt> hmm :-(

[11:13] <jnthn> My gut instinct given the action at a distance is also memory corruption-y

[11:13] <jnthn> Oh

[11:13] <jnthn> Or deot

[11:13] <jnthn> *deopt

[11:13] <brrt> well, that one works for me, unfortunatley

[11:13] <jnthn> If it's placing the interpreter back in a bogus place

[11:14] <brrt> possibly, but why would that happen

[11:14] <jnthn> No idea

[11:14] <jnthn> t/spec/S02-types/native.rakudo.moar fails in a similar way, which is the one I think you noticed

[11:15] <jnthn> And also works with MVM_JIT_DISABLE=1

[11:15] <brrt> yeah. I jit-bisected that and it points to 'new'

[11:15] <brrt> :-(

[11:19] *** zakharyas left
[11:20] <jnthn> lunch; bbiab

[12:12] <jnthn> master spectest looks pretty alright

[12:12] <jnthn> Modulo the heisenfail of the native test

[12:12] <jnthn> So I figure I can merge

[12:12] <jnthn> Better it gets some testing :)

[12:13] <brrt> i can make the native test replicate btw

[12:13] <brrt> doesn't really tell me what's going wrong, but I can replicate it...

[12:22] <Geth> Â¦ MoarVM/master: 12 commits pushed by (Jonathan Worthington)++

[12:22] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/af455397f018...5ef61a7663c9

[12:22] <jnthn>  9 files changed, 265 insertions(+), 102 deletions(-)

[12:23] <jnthn> Quite a small additional amount of code, especially when it also corrected 3 other issues along with the main goal of the branch :)

[12:29] *** travis-ci joined
[12:29] <travis-ci> MoarVM build errored. Jonathan Worthington 'When inlining unspecialized, set arg type facts

[12:29] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/400410421 https://github.com/MoarVM/MoarVM/compare/af455397f018...5ef61a7663c9

[12:29] *** travis-ci left
[12:31] <jnthn> bah, "apt-get install failed"

[12:36] *** zakharyas joined
[12:37] <jnthn> Very strange...two things that show up fine in the spesh log and the jit log show up in the profile as not running specialized or JITted. And it's slow enough to make me thing that's true.

[12:38] <tadzik> E: Unable to locate package failed

[12:38] <tadzik> :(

[12:38] <jnthn> :P

[12:40] *** lizmat left
[12:44] *** lizmat joined
[12:46] *** brrt left
[12:47] *** zakharyas left
[12:50] *** lizmat left
[12:53] *** lizmat joined
[13:05] *** brrt joined
[13:18] *** zakharyas joined
[13:53] *** brrt left
[14:19] <jnthn> Phew, I think I finally found a way to write AT-POS that brings it below the inline limit

[14:33] <nwc10> this statement is interesting. feels like it would turn into a useful short(ish) (for some value of "short") blog post

[14:33] <nwc10> 1) what is the inline limit, why is it necessary, what goes horribly wrong if we don't have one?

[14:33] <nwc10> 2) what's the way to write AT-POS that isn't short enough

[14:34] <nwc10> I apologise for suggesting work (And a distraction from the real work) to someone else

[14:34] <nwc10> and I can't send you useful beer

[14:35] *** brrt joined
[14:41] *** zakharyas left
[15:08] *** domidumont left
[15:16] <brrt> comments welcome: https://brrt-to-the-future.blogspot.com/b/post-preview?token=inO7bGQBAAA.ozsHgvVaFMwFa6cFGTqyAUUFOFU8aJeV9FXvO0l7R6molmRMBteKFnivF7Mvneo_BPm6xUUXcrKyRGDR3Wzqeg.H0WnyeE0x0IRbKwRaUrinw&postId=6968448695132813729&type=POST

[15:18] <timotimo> MFW the URL is just the article text compressed and encoded as base64

[15:19] <timotimo> why does blogger have a "clicktrap" element over the page

[15:19] <timotimo> i have this unreasonable need to click around and mark words and paragraphs and not being able to do it, even though it serves no obvious purpose, makes it feel Just Wrong

[15:20] <brrt> haha

[15:20] <timotimo> the paragraph above the second numbered list has left-overs from an earlier version of the sentence i think

[15:20] *** lizmat left
[15:20] <timotimo> "but for various reasons, partially historical, we call  For communicating with the "

[15:23] *** lizmat joined
[15:24] <brrt> thank you, fixed

[15:25] <lizmat> brrt: s/they usually to a system/they usually refer to a system/

[15:25] <timotimo> looks good. you want to make it perl 6 or Perl 6 throughout the whole text

[15:27] <jnthn> brrt: My name is typo'd

[15:27] <brrt> where?

[15:27] <jnthn> At the Swiss Perl Workshop ...

[15:27] <jnthn> why on earth can't I copy-paste from this?

[15:27] <lizmat> brrt: also try to use non breaking space between Perl and the number

[15:27] <brrt> oh, because blogger is evil

[15:28] <brrt> jnthn: seen, fixed

[15:28] <timotimo> jnthn: inspect element on the "Preview" badge on the top left, find the "clicktrap" element one or two further up, and "delete element"

[15:29] <lizmat> brrt: s/Jonathand/Jonathan/

[15:29] <timotimo> moarvm got thoroughly jonathan'd

[15:29] <Geth> Â¦ MoarVM: 76b4f4ce79 | (Jonathan Worthington)++ | src/spesh/inline.c

[15:29] <Geth> Â¦ MoarVM: Inline limit with original bytecode size too

[15:29] <Geth> Â¦ MoarVM:

[15:29] <Geth> Â¦ MoarVM: This means that if we have a small piece of code that could be inlined,

[15:29] <Geth> Â¦ MoarVM: and then we inline something in to that, we can still inline the top

[15:29] <Geth> Â¦ MoarVM: piece of code too. This helps us do a bit more multi-level inlining.

[15:29] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/76b4f4ce79

[15:31] <timotimo> does that mean that if we have tiny routine bodies with a deep call chain they'd all be inlined as long as the individual routines are all small enough?

[15:31] <brrt> lizmat: fixed, thanks

[15:33] <jnthn> timotimo: Yes, though could happen.

[15:33] <jnthn> timotimo: Though usually something does a decent amount of work somewhere :)

[15:35] <timotimo> mhm

[15:36] *** travis-ci joined
[15:36] <travis-ci> MoarVM build errored. Jonathan Worthington 'Inline limit with original bytecode size too

[15:36] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/400492904 https://github.com/MoarVM/MoarVM/compare/5ef61a7663c9...76b4f4ce7999

[15:36] *** travis-ci left
[15:36] <jnthn> E: There were unauthenticated packages and -y was used without --allow-unauthenticated

[15:36] <jnthn> grr

[15:49] *** zakharyas joined
[15:58] *** dogbert17 joined
[16:00] <dogbert17> brrt: my git fu is far from optimal but it seems that the strange jit error, as seen in /spec/S02-types/native.rakudo.moar,  was introduced by https://github.com/MoarVM/MoarVM/commit/354c62bdca1be082b61939fdcf6a4129e6992760

[16:00] <dogbert17> can that be possible?

[16:01] <timotimo> it's always possible that one op being introduced causes an op that is sometimes problematic to appear in a spot that triggers the problem

[16:03] <dogbert17> timotimo: I did this 'bisection' in the most incorrect way, I manually checked out versions and tested until the problem disappeared, which it did with https://github.com/MoarVM/MoarVM/commit/6646038f59e0b10b4cf73e194c6e060ffabb594f

[16:04] <timotimo> that's fair

[16:04] <timotimo> you can now use the jit bisect tool on top of the git bisect

[16:04] <timotimo> that may find us the exact miscompilation

[16:04] <brrt> don't horrify me

[16:05] <brrt> timotimo :-P

[16:05] <brrt> anyway.... I'll revert, then try if that helps

[16:05] <timotimo> how do you mean?

[16:06] <brrt> jit-bisect on git-bisect, i'm not sure that will work very well very often

[16:06] <timotimo> oh no i meant use jit-bisect after git bisect is finished

[16:06] <brrt> oh, i see

[16:08] <brrt> i mean to say, jit-bisect.pl isn't probably that reliable / good of a tool :-)

[16:10] <Geth> Â¦ MoarVM: 29cc327f87 | (Bart Wiegmans)++ | 2 files

[16:10] <Geth> Â¦ MoarVM: Revert "Implement JIT templates for 10 ops"

[16:10] <Geth> Â¦ MoarVM:

[16:10] <Geth> Â¦ MoarVM: This reverts commit 354c62bdca1be082b61939fdcf6a4129e6992760.

[16:10] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/29cc327f87

[16:14] <timotimo> gu

[16:16] <dogbert17> brrt++, that seems to have done the trick

[16:18] *** travis-ci joined
[16:18] <travis-ci> MoarVM build errored. Bart Wiegmans 'Revert "Implement JIT templates for 10 ops"

[16:18] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/400510053 https://github.com/MoarVM/MoarVM/compare/76b4f4ce7999...29cc327f87c9

[16:18] *** travis-ci left
[16:20] <brrt> what, segmentation fault

[16:21] <dogbert17> when

[16:24] <brrt> during rakudo build

[16:24] <dogbert17> oops

[16:25] <brrt> yeah

[16:37] *** dogbert17 left
[16:39] *** stmuk_ joined
[16:40] *** stmuk left
[16:41] *** dogbert17 joined
[16:48] <brrt> in a weird twist of fate, it seems it's the no-jit version that's broken

[16:49] <brrt> null pointer in a repr shift_o

[16:49] <brrt> wtf

[16:49] <brrt> it *is* spesh though

[16:55] <brrt> OSR and inlining dependent :-(

[17:07] *** zakharyas left
[17:08] *** zakharyas joined
[17:16] *** brrt left
[17:18] <jnthn> Uff, deopt is indeed a tricky thing

[17:18] * jnthn had an idea for keeping a bit less stuff around for deopt, tried it, and discovered it's flawed

[17:25] <jnthn> Think I can salvage one smaller improvement from the effort, though

[17:32] * jnthn goes to rest a bit

[17:37] <samcv> well i've got randomizing the order of the bucket iteration figured out

[17:38] <samcv> as we do now we go from 0..7 say if we have 8 buckets. but we XOR that with a random integer

[17:38] <samcv> so 0 XOR 3 = 3; 1 XOR 3 = 2; 2 XOR 3 = 1 etc

[17:39] <samcv> and so you get all of the numbers but in a different order

[18:12] <Geth> Â¦ MoarVM: 0eb25300bb | (Samantha McVey)++ | src/strings/parse_num.c

[18:12] <Geth> Â¦ MoarVM: Make parse_simple_number impossible to reach end without returning

[18:12] <Geth> Â¦ MoarVM:

[18:12] <Geth> Â¦ MoarVM: Make sure that it's not possible to reach the end of the function

[18:12] <Geth> Â¦ MoarVM: without returning or throwing. This fixes a compiler warning about this.

[18:12] <Geth> Â¦ MoarVM:

[18:12] <Geth> Â¦ MoarVM: Also change the comments from // style to /* */ which is MoarVM's

[18:12] <Geth> Â¦ MoarVM: recommended style.

[18:12] <Geth> Â¦ MoarVM:

[18:12] <Geth> Â¦ MoarVM: Make an if else chain into a switch for greater clairity.

[18:12] <Geth> Â¦ MoarVM:

[18:12] <Geth> Â¦ MoarVM: Remove some else's that were unneeded.

[18:12] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0eb25300bb

[18:12] <Geth> Â¦ MoarVM: 4bde02e3b5 | (Samantha McVey)++ | 3 files

[18:12] <Geth> Â¦ MoarVM: Make sure we don't try and return values from void functions

[18:13] <Geth> Â¦ MoarVM:

[18:13] <Geth> Â¦ MoarVM: I had added MVMHash_at_key, MVMHash_bind_key, MVM_P6opaque_at_pos

[18:13] <Geth> Â¦ MoarVM: and MVM_VMArray_at_pos but had accidently used `return`, which is not

[18:13] <Geth> Â¦ MoarVM: needed since it is a void function and returning void is meaningless.

[18:13] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4bde02e3b5

[18:20] *** travis-ci joined
[18:20] <travis-ci> MoarVM build errored. Samantha McVey 'Make sure we don't try and return values from void functions

[18:20] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/400555407 https://github.com/MoarVM/MoarVM/compare/29cc327f87c9...4bde02e3b58a

[18:20] *** travis-ci left
[18:26] <AlexDaniel> squashable6: next

[18:26] <squashable6> AlexDaniel, â ð Next SQUASHathon in â15 hours (2018-07-07 UTC-12âUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[19:03] <Geth> Â¦ MoarVM: 3ef2acf0f3 | (Samantha McVey)++ | 13 files

[19:03] <Geth> Â¦ MoarVM: Hash: randomize insertion order and bucket iteration order

[19:03] <Geth> Â¦ MoarVM:

[19:03] <Geth> Â¦ MoarVM: The effect of this commit results in every hash having a different

[19:03] <Geth> Â¦ MoarVM: iteration order. Previously, if you created two hashes and added items

[19:03] <Geth> Â¦ MoarVM: in the same order, you would get the same iteration order.

[19:03] <Geth> Â¦ MoarVM:

[19:03] <Geth> Â¦ MoarVM: Now we hash the table's pointer and use this as a pseudo random value to

[19:03] <Geth> Â¦ MoarVM: <â¦commit message has 14 more linesâ¦>

[19:03] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3ef2acf0f3

[19:10] <Geth> Â¦ MoarVM: 485d063a7b | (Samantha McVey)++ | .travis.yml

[19:10] <Geth> Â¦ MoarVM: Use the trusty not the precise llvm repos

[19:10] <Geth> Â¦ MoarVM:

[19:10] <Geth> Â¦ MoarVM: Travis is using trusty now and the precise repo has an outdated key,

[19:10] <Geth> Â¦ MoarVM: causing Travis CI to fail.

[19:10] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/485d063a7b

[19:12] *** zakharyas left
[19:17] *** travis-ci joined
[19:17] <travis-ci> MoarVM build errored. Samantha McVey 'Use the trusty not the precise llvm repos

[19:17] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/400576375 https://github.com/MoarVM/MoarVM/compare/3ef2acf0f350...485d063a7bfb

[19:17] *** travis-ci left
[19:31] *** robertle_ joined
[20:15] <dogbert17> what could this be: ===SORRY!===  Cannot call method 'optimize' on a null object

[20:23] <samcv> dogbert17: hmm, not sure

[20:25] <dogbert17> samcv: I get it when running: ./perl6 t/spec/S26-documentation/07-tables.t

[20:26] *** travis-ci joined
[20:26] <travis-ci> MoarVM build errored. Samantha McVey 'Try and get clang installing'

[20:26] <travis-ci> https://travis-ci.org/samcv/MoarVM/builds/400601243 https://github.com/samcv/MoarVM/compare/04c25ae58171...d2f421a8999e

[20:26] *** travis-ci left
[20:32] *** travis-ci joined
[20:32] <travis-ci> MoarVM build errored. Samantha McVey 'Looks like trusty already has clang 5 so try to not install it'

[20:32] <travis-ci> https://travis-ci.org/samcv/MoarVM/builds/400602386 https://github.com/samcv/MoarVM/compare/d2f421a8999e...b3e415b13bc2

[20:32] *** travis-ci left
[20:36] *** travis-ci joined
[20:36] <travis-ci> MoarVM build errored. Samantha McVey 'Clang doesn't have a versioned binary so allow that'

[20:36] <travis-ci> https://travis-ci.org/samcv/MoarVM/builds/400605181 https://github.com/samcv/MoarVM/compare/b3e415b13bc2...4a7118404699

[20:36] *** travis-ci left
[20:45] <MasterDuke> jnthn: is it intentional that not all the enum cases are handled in this switch? https://github.com/MoarVM/MoarVM/blob/master/src/spesh/arg_guard.c#L534-L539

[21:16] *** travis-ci joined
[21:16] <travis-ci> MoarVM build errored. Samantha McVey 'Try adding llvm and clang to packages list'

[21:16] <travis-ci> https://travis-ci.org/samcv/MoarVM/builds/400619244 https://github.com/samcv/MoarVM/compare/4a7118404699...08683f3963c8

[21:16] *** travis-ci left
[21:24] <jnthn> MasterDuke: Yes, not all of them have anything to mark; see https://github.com/MoarVM/MoarVM/blob/master/src/spesh/arg_guard.h#L72

[21:28] <MasterDuke> jnthn: i assumed so, but clang warns about it. wonder if there's a way to mark that instance as intentional?

[21:29] <jnthn> Dunno. Guess that's what I get for using enums and not defines :P

[21:31] <MasterDuke> it also complains about a couple cases like `if (flags || g->facts[i][j].dead_writer || g->facts[i][j].writer && g->facts[i][j].writer->info->opcode == MVM_SSA_PHI) {`, where it wants parens around the && expression

[21:32] <MasterDuke> any opposition to adding the parens in that case (and a couple similar) to silence the warning?

[21:34] <jnthn> Not really, just don't expect me to wite them in the first place. :)

[21:34] <jnthn> I consider it as obvious as + and *

[21:34] <jnthn> But I figure others don't. :)

[21:35] *** travis-ci joined
[21:35] <travis-ci> MoarVM build failed. Samantha McVey 'Just try removing the lines'

[21:35] <travis-ci> https://travis-ci.org/samcv/MoarVM/builds/400624886 https://github.com/samcv/MoarVM/compare/5545b5b76d86...1ca8d2efa417

[21:35] *** travis-ci left
[21:35] <MasterDuke> heh, cool

[21:36] <MasterDuke> jnthn: also, did you see my question at http://colabti.org/irclogger/irclogger_log/moarvm?date=2018-07-04#l129 ?

[21:52] <jnthn> MasterDuke: Yes, then promptly forgot. I set it up on a server I have and don't know why it stopped working.

[21:52] <jnthn> So I guess I'd have to look at why, though it was also a total hack.

[21:53] <MasterDuke> jnthn: you were using https://github.com/japhb/perl6-bench ?

[21:53] <jnthn> Yes

[21:53] <MasterDuke> ah, then you'll need to update it

[21:54] *** dalek joined
[21:54] *** synopsebot_ joined
[21:54] *** p6lert joined
[21:54] *** Geth joined
[21:55] <jnthn> Yeah, will see if I can find time look in the next couple of days

[21:55] <Geth> Â¦ MoarVM: f93d47ebf8 | (Samantha McVey)++ | .travis.yml

[21:55] <Geth> Â¦ MoarVM: Use the llvm 5.0 toolchain deb line

[21:55] <Geth> Â¦ MoarVM:

[21:55] <Geth> Â¦ MoarVM: The non versioned url doesn't have llvm 5.0

[21:55] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f93d47ebf8

[21:57] *** SourceBaby joined
[21:58] <Geth> Â¦ MoarVM: 8733b8bdae | (Samantha McVey)++ | .travis.yml

[21:58] <Geth> Â¦ MoarVM: Get Travis working again by making sure clang is located right

[21:58] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8733b8bdae

[21:58] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #895: Remove useless conditional

[21:58] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/895

[22:02] <Geth> Â¦ MoarVM: cc268bbcfd | MasterDuke17++ (committed using GitHub Web editor) | src/core/coerce.c

[22:02] <Geth> Â¦ MoarVM: Remove useless conditional

[22:02] <Geth> Â¦ MoarVM:

[22:02] <Geth> Â¦ MoarVM: `i` is an `MVMuint64`, so it will always be >= 0.

[22:02] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cc268bbcfd

[22:02] <Geth> Â¦ MoarVM: 68abd3aaf9 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/coerce.c

[22:02] <Geth> Â¦ MoarVM: Merge pull request #895 from MasterDuke17/patch-1

[22:02] <Geth> Â¦ MoarVM:

[22:02] <Geth> Â¦ MoarVM: Remove useless conditional

[22:02] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/68abd3aaf9

[22:03] *** Kaiepi left
[22:20] *** travis-ci joined
[22:21] <travis-ci> MoarVM build failed. Zoffix Znet 'Merge pull request #895 from MasterDuke17/patch-1

[22:21] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/400638595 https://github.com/MoarVM/MoarVM/compare/8733b8bdae24...68abd3aaf968

[22:21] *** travis-ci left
[22:26] <jnthn> hmm, --no-jit ain't happy

[22:30] <jnthn> Guess I'll have a look into that tomorrow

[22:30] *** Kaiepi joined
[22:36] *** brrt joined
[22:37] <brrt> MVM_SPESH_NODELAY + MVM_SPESH_BLOCKING + optimize=0 makes perl6 a bit slower

[22:38] <brrt> anyway, I have a fix for the issues the native type JIT issues

[22:38] <brrt> it was load sizes :-)

[22:38] <jnthn> Hurrah :)

[22:38] <jnthn> brrt++

[22:39] <jnthn> I suspect the --no-jit mode breakage is one of my recent changes, though I've no idea which one. Will have to hunt that tmorrow.

[22:40] <jnthn> I thought I might have figured out a quick win for deopt stuff earlier today, but it turns out not.

[22:40] <jnthn> Well, actually, I did realize a few things

[22:40] <Geth> Â¦ MoarVM: 434e4950a7 | (Ben Davies)++ (committed by Bart Wiegmans) | 2 files

[22:40] <Geth> Â¦ MoarVM: Implement JIT templates for 10 ops

[22:40] <Geth> Â¦ MoarVM:

[22:40] <Geth> Â¦ MoarVM: Adds JIT support for the following ops:

[22:40] <Geth> Â¦ MoarVM: - isinvokable

[22:40] <Geth> Â¦ MoarVM: - getlexreldyn

[22:40] <Geth> Â¦ MoarVM: - objprimunsigned

[22:40] <Geth> Â¦ MoarVM: - scgethandle

[22:41] <Geth> Â¦ MoarVM: <â¦commit message has 9 more linesâ¦>

[22:41] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/434e4950a7

[22:41] <brrt> what did you learn?

[22:41] <jnthn> That you can't just use "where do we have things that actually deopt" before doing dead instruction elimination to decide what to keep

[22:42] <jnthn> Since if we deleted entire basic blocks, the instructions doing the using of stuff will be long gone

[22:42] <jnthn> But we delete basic blocks early to make PHI nodes shrink to, if we're lucky, a non-merge

[22:43] <jnthn> And we'd not want to lose that

[22:43] <brrt> uhuh

[22:43] <jnthn> It's not yet clear to me if the approach is entirely flawed or if it is salvageable by keeping information around about what deleted basic blocks used

[22:44] <brrt> hmmm

[22:44] <jnthn> I did realize along the way that we should probably separate out "kept alive for deopt" and out from usages though.

[22:45] <brrt> i'm a bit too tired to give useful commentary :-)

[22:45] <brrt> but i guess that makes sense

[22:45] <jnthn> For one so we can understand that's what's going on in the spesh log, but also it means that if we optimize something to the point where it has zero possible points of deopt, we can just toss them all

[22:46] <jnthn> And for deopt-free inlinees, we can drop our reluctance to go optimizing those too

[22:46] <brrt> uhuh

[22:46] <jnthn> Also, I'll probably need to re-work the `set` instruction elimination at some point soon too

[22:46] <jnthn> It screws the SSA form utterly

[22:47] * brrt night

[22:49] <jnthn> 'night o/

[22:52] *** brrt left
[22:52] <samcv> hmm --no-jit is broken in travis

[22:52] <samcv> anyway, time to sleep

[22:54] <jnthn> samcv: Yeah, I'm suspsecting mea culpa, but...yes, sleep indeed :)

[22:54] <MasterDuke> jnthn: fwiw, some gdb and valgrind output of the segfault with --no-jit https://gist.github.com/MasterDuke17/7fd92323c6661f52a75a824ffb7bc036

[23:00] <jnthn> That doesn't look fun

