[00:39] *** samcv left
[00:40] *** samcv joined
[00:44] *** lizmat left
[02:25] *** dalek left
[02:50] *** synopsebot left
[02:50] *** dalek joined
[02:50] *** SourceBaby left
[02:51] *** p6lert left
[02:51] *** Geth joined
[02:51] *** p6lert_ joined
[02:51] *** synopsebot joined
[02:51] *** SourceBaby joined
[02:58] *** p6lert_ left
[02:58] *** p6lert joined
[04:42] *** bartolin_ left
[04:42] *** bartolin joined
[05:07] *** bartolin left
[05:15] *** bartolin joined
[06:07] *** lizmat joined
[06:33] *** robertle joined
[07:20] *** domidumont joined
[07:27] *** domidumont left
[07:28] *** domidumont joined
[07:55] *** zakharyas joined
[08:49] *** Ven`` joined
[10:11] *** Ven`` left
[10:38] <Geth> ¬¶ MoarVM: b7dba08a1f | (Samantha McVey)++ | src/strings/siphash/test.c

[10:38] <Geth> ¬¶ MoarVM: Separate SipHash tests into separate tests

[10:38] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b7dba08a1f

[10:38] <Geth> ¬¶ MoarVM: a1de6dec0f | (Samantha McVey)++ | src/strings/siphash/test.c

[10:38] <Geth> ¬¶ MoarVM: Run all siphash tests even if we get some failures

[10:38] <Geth> ¬¶ MoarVM:

[10:38] <Geth> ¬¶ MoarVM: Allows the script to run to completion while still identifying failures.

[10:38] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a1de6dec0f

[10:45] <Geth> ¬¶ MoarVM: ce9f741b48 | (Samantha McVey)++ | src/strings/siphash/test.c

[10:45] <Geth> ¬¶ MoarVM: Fix a bug in the SipHash tests causing them to fail on Big Endian

[10:45] <Geth> ¬¶ MoarVM:

[10:45] <Geth> ¬¶ MoarVM: There was nothing wrong with the SipHash implementation itself, just the

[10:45] <Geth> ¬¶ MoarVM: test. It accidently changed Grapheme32 array to little endian instead of

[10:45] <Geth> ¬¶ MoarVM: making Grapheme32_LE array little endian.

[10:45] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ce9f741b48

[10:58] *** travis-ci joined
[10:58] <travis-ci> MoarVM build passed. Samantha McVey 'Run all siphash tests even if we get some failures

[10:58] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/408444248 https://github.com/MoarVM/MoarVM/compare/b8f9f85f2c04...a1de6dec0fc1

[10:58] *** travis-ci left
[11:13] *** travis-ci joined
[11:13] <travis-ci> MoarVM build failed. Samantha McVey 'Fix a bug in the SipHash tests causing them to fail on Big Endian

[11:13] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/408446562 https://github.com/MoarVM/MoarVM/compare/a1de6dec0fc1...ce9f741b484d

[11:13] *** travis-ci left
[11:46] *** zakharyas left
[12:56] *** zakharyas joined
[13:16] *** Ven`` joined
[13:22] *** yoleaux left
[13:22] *** yoleaux joined
[13:24] *** Ven`` left
[13:35] *** brrt joined
[13:35] <brrt> \o

[13:37] <samcv> so i've confirmed siphash is working correctly on big endian as well and reworked and fixed an issue that caused tests to fail on big endian (wasn't an issue with siphash, just with the test)

[13:38] *** Ven`` joined
[13:38] <brrt> +1

[13:38] <brrt> samcv++ I should say (do we still have the bot that maintains those counts anyway?)

[13:39] <samcv> counts?

[13:39] <timotimo> o/ brrt

[13:39] <brrt> \o timotimo

[13:39] <brrt> yeah, there was a bot that counted the ++'s

[13:39] <timotimo> at some point, yeah

[13:40] <brrt> i don't think anybody ever looked at that though

[13:40] <timotimo> yeah, i think only the "express happyness/gratitude for the moment" part remains

[13:40] <timotimo> which i'm fine with

[13:47] <samcv> also for anybodies information, powerpc emulation is much faster than mips

[13:47] <samcv> using a wheezy qcow2 image i found online which was pretty convenient

[13:51] <brrt> why would that be? mips harder to emulate?

[13:52] <masak> brrt: back when we *did* look at the counts, au++ was so far ahead that being in second place didn't really mean much

[13:53] <brrt> hehe

[13:54] <brrt> masak++ and jnthn++ for escape analysis

[13:54] <samcv> brrt: probably just less work had been done optimizing it

[13:55] <samcv> it seems around 5x slower though

[13:55] <samcv> maybe more

[13:55] <samcv> on mips emulated it took 30 minutes to compile moarvm

[13:55] <samcv> probably takes a few minutes on ppc

[13:57] <brrt> i'm memory-handicapped at the point, so I'm not running any emulators

[13:57] <brrt> and cooling-capacity handicapped :-(

[14:26] <lizmat> we reached 36.2 here, now down to 35.0 and about to get some rain, whee!!

[14:27] <jnthn> Uff, it's horribly warm here, though not quite *that* bad

[14:28] <brrt> \o/

[14:28] <brrt> lizmat: do you have your own measurement system?

[14:29] <lizmat> well, an outside thermometer, if you'd call that a measurement system  :-)

[14:29] *** domidumont left
[14:30] *** domidumont joined
[14:37] *** Ven`` left
[14:37] *** brrt left
[14:38] <AlexDaniel> jnthn, samcv: so what are your thoughts on this release?

[14:39] <AlexDaniel> I know, difficult qusetion, and the heat doesn't help at all :)

[14:43] *** lizmat left
[14:45] <AlexDaniel> there are many options: we can delay more, we can skip it, we can ship as is, we can release an earlier version from a branch‚Ä¶

[14:45] *** lizmat joined
[14:46] <AlexDaniel> releasing from a branch is probably not as bad, it'll be pretty much 2018.06 with a few fixes

[14:46] <AlexDaniel> which is ok

[14:47] <AlexDaniel> but can we do better?

[14:47] <jnthn> It depends on the definition of "better"

[14:48] *** brrt joined
[14:48] <timotimo> depends on what your definition of "is" is

[14:49] <lizmat> I would be in favour of releasing 2018.07 as is now, but *not* cut a Rakudo Star release from it: postpone *that* to 2018.08

[14:50] <AlexDaniel> right, well. I personally care more about not breaking existing things, and for me additional fixes or speedups are just a nice bonus

[14:50] <lizmat> rather than a. not release at all, or b. basically re-release 2018.06

[14:50] <AlexDaniel> lizmat: if 2018.07 is so not good that we don't want a Star release to be based on it, why release it at all? :)

[14:51] <lizmat> because we want to get more data points of people using the latest compiler release, so that we can make 2018.07 better

[14:52] <brrt> we still have the windows JIT bug though

[14:52] <lizmat> especially hash key order changes are important to get out there

[14:52] <AlexDaniel> brrt: we can cherry pick things

[14:52] <lizmat> ok, *that* I would consider a blocker

[14:52] <brrt> .... whatabout... releasing 2018.07, but with a patch to disable JIT on windows

[14:53] *** Ven`` joined
[14:53] <brrt> I know you have your schedule and all, but I simply can't see to getting it fixed in time

[14:53] <jnthn> Part of the point of Star was that it could have its own release schedule and lean towards stability.

[14:53] <jnthn> So there's no reason there can't be a Star this month, just including the 2018.06 release of MoarVM/Rakudo.

[14:54] <lizmat> that could also work

[14:55] <jnthn> I don't feel strongly on any of the options for the Rakudo 2018.07 release. It is clear than quite a lot of people do follow compiler releases, though.

[14:55] <robertle> any recommendations for debian? we probably don't care so much about a windows JIT bug...

[14:55] <robertle> not many people will be using the debian packages at the moment though...

[14:55] <jnthn> robertle: Yes, we do care about a Windows JIT bug.

[14:56] <AlexDaniel> more people use monthly releases than star

[14:56] <AlexDaniel> using them to beta test stuff for star is a no no for me

[14:56] <robertle> jnthn: even I do care about it, but it does not matter for the debian packages as they won't be run on windows

[14:56] <lizmat> AlexDaniel: that we know of: R* is more darkpanny

[14:57] <AlexDaniel> lizmat: than monthly releases? Where's the info coming from?

[14:57] <lizmat> well, deduction, really: if someone wants to just try out Perl 6 and goes to perl6.org, they very quickly wind up at a Rakudo Star download

[14:57] <jnthn> Anyway, I think the best we can do for a 2018.07 that actually will be in .07 is to see if there's anything we really, really want to have in there over 2018.06 and if so, consider a release branch that includes those. However, merging back a cherry-pick'd thing is not nice.

[14:59] <AlexDaniel> not nice why exactly?

[14:59] <AlexDaniel> because we will have some commits twice?

[15:00] *** Ven`` left
[15:00] <jnthn> Yes, and thus quite possibly conflicts to resolve

[15:00] <jnthn> Not a real blocker if it's just a handful of commits though

[15:00] <AlexDaniel> that's not an issue, I'll handle it

[15:05] <AlexDaniel> robertle: do you have any stats on the % of people who use testing/unstable instead of stable?

[15:06] <AlexDaniel> lizmat: it really depends. If I wanted to try out perl6, chances are I wouldn't even open any webpage at all (apt install perl6)

[15:06] <AlexDaniel> lizmat: and even if I did, I'm presented with a shiny blue button to get a third-party deb

[15:07] <lizmat> ok, but if *that* is the case, what is the reason that Rakudo Star still exists then ?

[15:07] <AlexDaniel> lizmat: and the alternative to that is *compiling star from source*

[15:07] <AlexDaniel> that's a wonderful question

[15:07] <AlexDaniel> that's what Zoffix also wondered when they were looking at survey results

[15:08] <AlexDaniel> it's different for Windows users I assume

[15:09] <AlexDaniel> survey: https://docs.google.com/forms/d/19qSBpGWWc9RNruxPWySHkmy3tppaqeqUNGfZpHhdsMs/viewanalytics#c31

[15:10] <AlexDaniel> note that tarballs+third-party+distro outweighs star

[15:17] *** robertle left
[15:29] *** domidumont left
[15:41] <AlexDaniel> found debian stats: https://popcon.debian.org/

[15:41] <AlexDaniel> ‚ÄúStatistics per popularity-contest releases‚Äù

[15:43] <AlexDaniel> so, roughly, it's a bit more than 10% I guess?

[15:44] <AlexDaniel> compared to last stable

[15:45] <AlexDaniel> actually‚Ä¶ let's look at rakudo package itself :)

[15:46] <AlexDaniel> ehh‚Ä¶ no stats per version https://qa.debian.org/popcon.php?package=rakudo

[15:47] <timotimo> surely robertle would be able to help us out with that

[15:48] <AlexDaniel> well, it's not critical. I was just wondering if a significant % of users installs rakudo directly from repos on testing/unstable

[15:50] <AlexDaniel> heh, I don't get this one: https://qa.debian.org/popcon-graph.php?packages=perl6+rakudo&show_installed=on&want_legend=on&want_ticks=on&from_date=&to_date=&hlght_date=&date_fmt=%25Y-%25m&beenhere=1

[15:51] <AlexDaniel> ah, I get it. apt install rakudo instead of apt install perl6

[15:52] <AlexDaniel> the rise of moarvm :) https://qa.debian.org/popcon-graph.php?packages=rakudo+moarvm+parrot&show_installed=on&want_legend=on&want_ticks=on&from_date=&to_date=&hlght_date=&date_fmt=%25Y-%25m&beenhere=1

[15:55] *** robertle joined
[16:13] *** brrt left
[16:25] <TimToady> the original purpose of Star was to be a prototype distribution, on the assumption that there will eventually be multiple distributions

[16:26] <TimToady> that future has not yet been distributed very far, however

[16:30] <robertle> reminds me: is this the full list of modules distributed with star, or just a part of it? https://github.com/rakudo/star/tree/master/modules

[16:31] <robertle> I am trying to work out what modules are the most important ones for a distribution, and thought I could just take the list from star as a starter...

[16:35] <TimToady> and part of the goal of that distribution model was to allow HEAD to be sufficiently unstable to continue to evolve, not follow the Perl 5 tendency toward ossification

[16:36] *** brrt joined
[16:37] <TimToady> and different distributions can set that stability knob differently

[16:41] <brrt> how are we up for releasing with a known bug, but defaulting to disabling it?

[16:42] <brrt> once it's fixed we can do a point release?

[16:43] <samcv> brrt: defaulting to disabling it?

[16:43] <samcv> the bug or the feature? not sure what we're talking about

[16:45] <timotimo> JIT on windows?

[16:45] <timotimo> would be disabled completely?

[16:46] <brrt> we'd default on not enabling the JIT on windows

[16:46] <brrt> at configure time

[16:46] <brrt> i'd like to disable the bug, but unfortunately that's a bit harder

[16:46] *** diakopter joined
[16:51] <samcv> .hmm. isn't that a pretty big thing?

[16:52] *** avar left
[16:53] *** avar joined
[16:53] *** avar left
[16:53] *** avar joined
[16:53] <brrt> ... yes, but realistically, how many windows users do we have, and how many of them do performance critical things

[16:54] <brrt> .. . and no, i'm not enthusiastic about the prospect either

[16:58] <samcv> i mean what is wrong about releasing later?

[16:58] *** brrt left
[16:58] <samcv> if it's not ready, then it's not ready

[16:59] <timotimo> Lol, i blogged: https://wakelift.de/2018/07/26/wow-check-out-this-garbage/

[16:59] <samcv> unless there are more important things fixed since last release which are cause for us to do a release

[17:07] *** stmuk_ joined
[17:07] <jnthn> timotimo++ # nice post :)

[17:07] <jnthn> And nice work

[17:08] *** stmuk left
[17:10] <MasterDuke> yes, timotimo++

[17:11] <timotimo> yay

[17:14] <MasterDuke> .ask brrt the windows problem is just with the expression jit, correct? if so, could just it be disabled?

[17:14] <yoleaux> MasterDuke: I'll pass your message to brrt.

[17:26] <masak> timotimo++

[17:27] *** AlexDani` joined
[17:28] * jnthn bbl

[17:30] *** AlexDani` left
[17:30] *** AlexDani` joined
[17:30] *** AlexDaniel left
[17:30] *** AlexDani` is now known as AlexDaniel

[17:41] *** zakharyas left
[18:22] *** Ven`` joined
[18:37] *** Zoffix joined
[18:37] <Zoffix> Huge -1 on "<brrt> how are we up for releasing with a known bug, but defaulting to disabling it?"

[18:37] <Zoffix> brrt: a quarter of our users use Windows. And without JIT stuff is really slow.

[18:39] <Zoffix> +1 on "<AlexDaniel>: lizmat: if 2018.07 is so not good that we don't want a Star release to be based on it, why release it at all? :)"

[18:39] <Zoffix> There's no law that we have to cut a release every month.

[18:39] <Zoffix> And glancing at the changelog, there isn't some must-have feature that must be released right now and can't wait another 3.5 weeks.

[18:40] <lizmat> Zoffix: it's not features I worry about, it's the unexpected results of refactoring that we need to find out about

[18:40] <lizmat> hence my suggestion to release 2018.07, but *not* do a Star release based on that

[18:41] *** Ven`` left
[18:41] <Zoffix> lizmat: ah, yeah, that sounds alright, if it star is not based on it.

[18:42] * Zoffix is mildly annoyed by now 2 devs effectively saying "who cares about windows"

[18:43] <TimToady> .oO(Who cares about VMS?)

[18:45] <geekosaur> that's a little different, since the list of non-carers includes its owner

[18:47] <Zoffix> lizmat: in your suggestion, would star be based off 2018.08 or 2018.06?

[18:47] <lizmat> 2018.08

[18:47] <Zoffix> +1

[18:47] <lizmat> well, if we deem 2018.08 to be good enough, or course  :-)

[18:47] <Zoffix> :)

[18:52] <japhb> +1 to that from me as well, FWIW.  I am strongly against a Star based on a weak release.

[18:54] <japhb> Since as TimToady points out there is not really a competitive landscape in Rakudo distros, and I'd like to have at least one Rakudo distro that monotonically converges on stable (sortof the RHEL/CentOS role back in the day), Star is it for now.

[19:01] *** Kaiepi left
[19:02] *** Kaiepi joined
[19:07] *** Kaiepi left
[19:25] *** Zoffix left
[19:36] <AlexDaniel> Zoffix: the changelog is actually not fully populated, I was postponing it because I wasn't sure which commits would be in the release

[19:37] *** Kaiepi joined
[19:45] <AlexDaniel> anyway, I'm not sure. I guess it's ok to skip 2018.07, but I can also do a light release from 2018.06 + some fixes

[19:50] <AlexDaniel> and I'm definitely not releasing what we have on HEAD :)

[19:56] <lizmat> AlexDaniel: why ?

[20:11] *** brrt joined
[20:17] <AlexDaniel> because people use monthly releases and I think that testing something knowingly unstable on them is unfair

[20:17] <AlexDaniel> if we release it as 2018.08-RC then it's different

[20:20] <stmuk_> star needs to work on windows with JIT so I can base star either on 2018.06 or 2018.06+cherrypicking

[20:20] <AlexDaniel> or wait for 2018.08, right?

[20:20] <stmuk_> yes

[20:23] *** robertle left
[20:25] * AlexDaniel üí§

[20:26] <brrt> hmm

[20:26] <brrt> i'm not thrilled about htis

[20:27] <stmuk_> what about 2018.06-25-ge9351cb?

[20:28] <brrt> finding myself in the critical path of the release

[20:28] <stmuk_> apparenlly that passes on windows

[20:29] <brrt> what commit is that, actually?

[20:31] <stmuk_> that was from https://github.com/rakudo/rakudo/issues/2070#issuecomment-405027222

[20:33] <stmuk_> I will experiment on windows tomorrow

[20:34] *** Ven`` joined
[20:34] <stmuk_> I can bisect to last working windows (probably later than 2018.06-25-ge9351cb)

[20:34] <brrt> that'd help, maybe

[20:36] <MasterDuke> brrt: would the jit bisect tool help?

[20:37] <brrt> if you have a test that doesn't spawn, maybe, yes

[20:37] <brrt> what would help most is a clean replication

[20:37] <brrt> because that is probably the most time consuming element

[20:38] <japhb> timotimo: Amongst a couple minor typos in your GC post, a possibly confusing one: "The little asterisk denotes which GC was responsible for kicking off the GC run."  Perhaps the first 'GC' should be 'thread' instead?

[20:39] <brrt> oh, yes, timotimo++

[20:40] <japhb> Also, in the new UI, it might be nice for the "Time spent per GC run" chart at the top to somehow highlight which ones were full collections.

[20:42] <japhb> Otherwise very nice work (and post) timotimo!

[20:47] *** Ven`` left
[20:49] *** brrt left
[20:51] *** avar left
[20:55] *** avar joined
[20:55] *** avar left
[20:55] *** avar joined
[21:18] *** brrt joined
[21:21] <timotimo> indeed, thank you japhb

[21:21] <timotimo> japhb: yup, until just before i made the screenshot, i had filtered out the major collections by default, i just decided to turn that off, and later have a switch in the UI

[21:22] <timotimo> what other typos did you find?

[21:22] <timotimo> miliseconds -> milliseconds apparently

[21:29] *** brrt left
[21:50] <Geth> ¬¶ MoarVM: jstuder-gh++ created pull request #920: Move some exprjit templates to the proper order

[21:50] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/920

[22:17] <japhb> timotimo: Oh, didn't remember them all.  I can check again if need be, but these days I usually worry less about the minor typos that don't change meaning, than the ones that might actually confuse someone.  :-)

[22:17] <timotimo> japhb: https://imgur.com/44vePUL this is what it looks like if you don't filter out major collections by default :D

[22:20] <japhb> OOOhhh.  I see the problem

[22:21] <japhb> Better scale (or non-linear mapping) needed.

[22:21] <timotimo> i believe my charts library supports that

[22:21] <japhb> Perhaps something like the one I did for the speed sparkline in #perl6-dev

[22:22] <timotimo> filter out outliers?

[22:25] <japhb> Yeah, exactly.

[22:26] <japhb> Outlier detection is useful, and by itself can make a huge difference to graph readability, without having to go to a scaling that doesn't make a lot of sense to people's mental models.

[22:26] <japhb> And the trick is not to filter them out entirely, but to just not include them in picking the Y range.

[22:27] <timotimo> right

[22:28] <timotimo> how do you do this right?

[22:28] <timotimo> sort by value and see if the first value is very far from the rest?

[22:29] <jnthn> timotimo: Maybe compare to some kind of average?

[22:29] <geekosaur> compute standard deviation and reject values outside some multiple of it, often

[22:29] <timotimo> filter out anything above 3x standard deviation?

[22:30] <timotimo> ah, heh.

[22:30] <japhb> https://github.com/zoffixznet/perl6-buggable/blob/master/lib/Buggable/Plugin/Speed.pm6

[22:30] <japhb> It ... has grown a bit over the years.

[22:30] <japhb> Also, it has to do clipping in a kindof funky way, because it doesn't have the advantage of just drawing outside a clipping rectangle, and it has to handle multiple lines of text pretending to be one graph.

[22:31] <japhb> But essentially geekosaur is correct, see lines 48 through 55

[22:32] <japhb> (Line 55 prevents a *very* steady value, so all variation is just measurement noise, from getting magnified into what appears to be all over the range)

[22:33] <japhb> Lines 73 to 81 are my attempt at doing the stats in a way that doesn't cause you to go blind.  :-)

[22:34] <timotimo> hm, what's the param_on2_* and param_rn2_* ops for?

[22:34] <timotimo> i.e. what's the 2 for?

[22:36] <timotimo> oh? the jit log has "A PHI node should not have an after label"

[22:36] *** Kaiepi left
[22:36] <japhb> timotimo: You appear to be responding to someone who isn't there.

[22:36] *** Kaiepi joined
[22:39] <jnthn> timotimo: Renaming syntax

[22:39] <jnthn> sub foo(:a(:$aadvark)) { }

[22:39] <timotimo> ah, i see

[22:39] <timotimo> japhb: i'm spouting out new random findings, actually

[22:40] <japhb> Ah

[22:41] <timotimo> ctxcaller shouldn't be hard to jit, right? nothing very special about it?

[22:44] <Geth> ¬¶ MoarVM: 41108cdaaa | (Timo Paulssen)++ | src/jit/expr.c

[22:44] <Geth> ¬¶ MoarVM: more consistently \n in exprjit log output

[22:44] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/41108cdaaa

[22:44] <jnthn> timotimo: Not any more

[22:45] <timotimo> ctxouter is probably almost the same except the traversal mode argument is different

[22:45] <timotimo> right, i have the code right in front of me

[22:45] <timotimo> i see bails for those in json_fast, but i believe they are not actually "hot"

[22:46] <timotimo> SET_BLOCK_OUTER_CTX sound like compiler internals

[22:47] <timotimo> handle_optional gets a ctxouter bail, which could be interesting for code in general

[22:48] <timotimo> is_bindable from the bootstrap has an arrow function invoked via "p6invokeunder" and that uses ctxouter. probably not very hot, either, but maybe interesting

[22:48] <timotimo> is_bindable is bailed by reprname %)

[22:49] <timotimo> do we require repr names to be unique? in that case spesh could rewrite an eq of reprname and a const string to a reprid comparison

[22:52] <jnthn> yes, repr names are unique

[22:53] <timotimo> probably barely worth it :D

[22:58] <japhb> Depends on how often it happens.  :-)

[23:05] *** travis-ci joined
[23:05] <travis-ci> MoarVM build failed. Timo Paulssen 'more consistently \n in exprjit log output'

[23:05] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/408725677 https://github.com/MoarVM/MoarVM/compare/ce9f741b484d...41108cdaaa07

[23:05] *** travis-ci left
[23:10] <timotimo> is_bindable is called 8008 times throughout my json::fast benchmark, and it's actually at 3.77% inclusive time somehow

[23:14] <timotimo> but the vast majority of time from that is spent below bind

