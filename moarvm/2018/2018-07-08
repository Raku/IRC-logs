[00:31] *** stmuk_ joined
[00:33] *** stmuk left
[02:08] *** stmuk joined
[02:10] *** stmuk_ left
[03:46] *** stmuk_ joined
[03:47] *** stmuk left
[05:49] *** lizmat left
[06:15] *** lizmat joined
[06:57] *** domidumont joined
[07:02] *** domidumont left
[07:03] *** domidumont joined
[07:16] *** lizmat left
[07:27] *** robertle joined
[07:38] *** lizmat joined
[08:09] *** mst left
[08:09] *** mst joined
[08:09] *** ChanServ sets mode: +o mst

[08:54] *** domidumont left
[09:34] <Geth> Â¦ MoarVM: a24033eb0f | (Samantha McVey)++ | 3 files

[09:34] <Geth> Â¦ MoarVM: Make coerce_is/us 2x faster

[09:34] <Geth> Â¦ MoarVM:

[09:34] <Geth> Â¦ MoarVM: Instead of using snprintf, we use some dedicated code to convert the

[09:34] <Geth> Â¦ MoarVM: 64bit int/uint to a string.

[09:34] <Geth> Â¦ MoarVM:

[09:34] <Geth> Â¦ MoarVM: In addition, avoid decoding into a MVMString and simply copy the buffer

[09:34] <Geth> Â¦ MoarVM: over directly (do this for coerce_ns as well).

[09:34] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a24033eb0f

[09:52] *** travis-ci joined
[09:52] <travis-ci> MoarVM build failed. Samantha McVey 'Make coerce_is/us 2x faster

[09:52] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/401399471 https://github.com/MoarVM/MoarVM/compare/4373eecdc556...a24033eb0f39

[09:52] *** travis-ci left
[12:26] <MasterDuke> is it ok/safe to rename an op in src/core/oplist? or does the old one have to be deprecated and a new one with the new name created?

[12:28] <jnthn> So long as you leave at at the same place in oplist, the op number stays the same

[12:29] <jnthn> So there's no risk of breaking the stage0 bootstrap

[12:32] <MasterDuke> cool, thanks

[12:33] <MasterDuke> oh, and then i can just change the name in NQP? without having to re-bootstrap?

[12:34] <jnthn> Yes

[12:35] * MasterDuke wonders why i didn't just start the rename in MoarVM in the first place

[12:35] <jnthn> :)

[12:43] <MasterDuke> hm. is an expr template useful if the op isn't also jitted in src/jit/graph.c?

[12:48] *** domidumont joined
[14:02] *** lizmat_ joined
[14:03] *** lizmat left
[14:09] *** lizmat_ is now known as lizmat

[14:38] *** zakharyas joined
[14:47] <timotimo> yes

[14:47] <timotimo> MasterDuke: it is

[14:48] <timotimo> but only if it tends to follow ops that are also exprjitted

[14:48] <timotimo> since the exprjit only kicks in at the start of BBs and aborts on the first non-exprjit-supported op

[14:52] <MasterDuke> ah, good to know, thanks

[15:02] *** Kaiepi left
[15:03] *** Kaiepi joined
[15:08] *** lizmat_ joined
[15:09] *** lizmat left
[15:10] *** lizmat_ left
[15:35] *** zakharyas left
[15:35] *** zakharyas joined
[15:39] *** zakharyas left
[15:41] *** zakharyas joined
[16:00] *** Kaiepi left
[16:01] *** Kaiepi joined
[16:28] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #899: Rename (and JIT) getstrfromname

[16:28] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/899

[17:07] *** zakharyas left
[17:33] *** stmuk joined
[17:35] *** stmuk_ left
[17:44] *** zakharyas joined
[17:47] *** MasterDuke left
[17:48] *** MasterDuke joined
[18:11] *** domidumont left
[18:50] *** zakharyas left
[19:13] *** Kaiepi left
[19:13] <Geth> Â¦ MoarVM: jstuder-gh++ created pull request #900: Add more exprjit templates (07/08/18)

[19:13] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/900

[19:14] *** Kaiepi joined
[19:31] *** zakharyas joined
[19:48] *** Kaiepi left
[19:51] *** Kaiepi joined
[20:01] *** lizmat joined
[20:28] *** zakharyas left
[20:43] *** robertle is now known as test234

[20:43] *** test234 is now known as robertle

[21:12] *** robertle left
[21:57] *** MasterDuke left
[22:04] <jnthn> Urgh. Currently discovering that we've played a bit fast and loose in various places with the SSA form in spesh, and now I'm trying to get us actual du-chains, that bites.

[22:05] <jnthn> But, there's good news. I've written the first third of a sanity checker.

[22:05] <jnthn> That already finds various violations for me to work through.

[22:06] <jnthn> But when this is done, we'll know that our usage is spot on. I'm betting there's a few places that we don't properly decrement usage that we should, so we might even get some perf wins out of this. At the very least we'll get correctness wins.

[22:09] <timotimo> awesome

[22:09] <Geth> Â¦ MoarVM/du-chains-and-opts: 202c0ba8fb | (Jonathan Worthington)++ | src/spesh/optimize.c

[22:09] <Geth> Â¦ MoarVM/du-chains-and-opts: Correct a wrong instruction in usage delete

[22:09] <Geth> Â¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/202c0ba8fb

[22:09] <Geth> Â¦ MoarVM/du-chains-and-opts: ae5654d1e9 | (Jonathan Worthington)++ | 3 files

[22:09] <Geth> Â¦ MoarVM/du-chains-and-opts: First steps to a DU-chain checker

[22:09] <Geth> Â¦ MoarVM/du-chains-and-opts:

[22:09] <Geth> Â¦ MoarVM/du-chains-and-opts: This just checks the D part of things is OK - that is, the ->writer

[22:09] <Geth> Â¦ MoarVM/du-chains-and-opts: in the facts actually matches the instruction that really writes the

[22:09] <Geth> Â¦ MoarVM/du-chains-and-opts: register. Already catches some problems, which will be corrected in

[22:09] <Geth> Â¦ MoarVM/du-chains-and-opts: upcoming commits.

[22:09] <Geth> Â¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/ae5654d1e9

[22:12] <jnthn> And the reason I'm doing du-chains is because they'll let us cheaply fine the answer to "is this box instruction used by an unbox" and "is this native ref taking instruction used by a decont"

[22:12] <jnthn> *find

[22:12] <timotimo> very good

[22:12] <timotimo> how much easier is it compared to following the writer chain from the facts?

[22:13] <jnthn> Well, that tells you it backwards, I guess, but knowing it forwards seems better

[22:13] <timotimo> that's fair

[22:13] <jnthn> Since it's then possible to tell if all the usages are unboxing

[22:13] <jnthn> Or just some of them

[22:14] <timotimo> we'll still have to do safety checking that registers aren't clobbered, or will we always introduce extra registers in that case?

[22:15] <jnthn> Planning to introduce temps, and then when that's working optimize that away for the non-clobbering case.

[22:15] <timotimo> OK

[22:16] <jnthn> I figure extra temps are a good bit cheaper than an extra allocation + GC of it :)

[22:16] <jnthn> And certainly cheaper than a native ref and decont of it

[22:17] <timotimo> hm, i forgot what the bucket size difference is in the fsa, but will one more register always move us to the next bigger bin?

[22:17] <jnthn> Not always

[22:17] <jnthn> Uff, current problem is

[22:17] <jnthn> sp_getspeshslot r43(14), sslot(20)

[22:17] <jnthn> then after it

[22:17] <jnthn> sp_getspeshslot r43(14), sslot(20)

[22:17] <timotimo> yeah, i've seen that before

[22:17] <jnthn> oops, that was the same paste

[22:17] <timotimo> probably a misguided optimization i made at some point

[22:17] <jnthn> sp_getspeshslot r43(14), sslot(21)

[22:18] <jnthn> That's the one I wanted

[22:18] <timotimo> yeah, same register and version as the target

[22:18] <timotimo> for the target*

[22:18] <jnthn> Right, that's a violation of SSA form

[22:20] <timotimo> i'd assume it comes from the method lookup optimization

[22:22] <Geth> Â¦ MoarVM/du-chains-and-opts: ca9aa46380 | (Jonathan Worthington)++ | src/spesh/inline.c

[22:22] <Geth> Â¦ MoarVM/du-chains-and-opts: Missing writer setting in inline handling

[22:22] <Geth> Â¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/ca9aa46380

[22:22] <Geth> Â¦ MoarVM/du-chains-and-opts: 48fd24cadc | (Jonathan Worthington)++ | src/spesh/optimize.c

[22:22] <Geth> Â¦ MoarVM/du-chains-and-opts: Missing writer setting in resolvecode insertion

[22:22] <Geth> Â¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/48fd24cadc

[22:22] <Geth> Â¦ MoarVM/du-chains-and-opts: 4d1e27d238 | (Jonathan Worthington)++ | src/spesh/optimize.c

[22:22] <Geth> Â¦ MoarVM/du-chains-and-opts: Correct writer when optimizing object conditional

[22:22] <Geth> Â¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/4d1e27d238

[22:29] <jnthn> No, method lookup seems OK, it just turns findmeth into a getspeshslot

[22:29] <jnthn> I'm guessing the other one comes from an invocation optimization

[22:30] <timotimo> OK

[22:31] <jnthn> Yeah, it's optimize_call that inserts the naugty one

[22:38] *** committable6 joined
[22:38] *** reportable6 joined
[22:49] <Geth> Â¦ MoarVM/du-chains-and-opts: 11b44e7964 | (Jonathan Worthington)++ | src/spesh/optimize.c

[22:49] <Geth> Â¦ MoarVM/du-chains-and-opts: Stop cheating on SSA form in optimize_call

[22:49] <Geth> Â¦ MoarVM/du-chains-and-opts:

[22:49] <Geth> Â¦ MoarVM/du-chains-and-opts: Use a temporary register for now, which we already have code in place

[22:49] <Geth> Â¦ MoarVM/du-chains-and-opts: to handle anyway becuase it's exactly what we do for the guard path.

[22:49] <Geth> Â¦ MoarVM/du-chains-and-opts: Plus this should mean we can delete an unrequired earlier instruction

[22:49] <Geth> Â¦ MoarVM/du-chains-and-opts: that's also reading from a spesh slot, to save some cycles. Most

[22:49] <Geth> Â¦ MoarVM/du-chains-and-opts: importantly, however, it means we don't violate SSA form.

[22:49] <Geth> Â¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/11b44e7964

[22:49] <jnthn> Next:

[22:49] <jnthn>       hllboxtype_i      r5(8)

[22:49] <jnthn>       box_i             r5(8),  r18(1),   r5(8)

[22:49] <jnthn> grmbl :)

[22:49] <jnthn> But that can be tomorrow's fun

[22:49] <timotimo> that could be from rakudo's ops.c

[22:49] *** lizmat left
[22:50] <timotimo> maybe i'll take a look at it righ tnow

[22:51] <timotimo> huh, no spesh function for p6box_i it looks like

[22:52] <timotimo> ah, might be args.c

[22:54] <jnthn> Entirely possible

[22:54] <timotimo> is this from named arguments?

[22:54] <samcv> jnthn: well i got that hash script for nqp 30% faster, reduced a fair amount of time in gc_mark by making a more optimized HASH_ITER macro

[22:54] <timotimo> the pos_box function uses temp registers at first glance, but the one for slurpy optimization doesn't seem to

[22:54] <jnthn> Very possible, because it's at the start of an inline

[22:54] <timotimo> no, that also has temps

[22:55] <jnthn> hm, not very very start, mind

[22:55] <timotimo> what code are you getting this for? i'd like to reproduce it

[22:56] <jnthn> make clean in NQP, then `make` :)

[22:56] <jnthn> It explodes in the very first file

[22:56] <timotimo> excellent

[22:56] <jnthn> It produces something like this:

[22:56] <jnthn> MoarVM oops: Malformed DU chain: writer hllboxtype_i of 5(8) in BB 26 is incorrect

[22:56] <jnthn> Which lets you quite easily locate it :)

[22:57] <timotimo> do you have local modifications to turn that on?

[22:57] <jnthn> No, I comitted it for now until I get the thing working :)

[22:57] <timotimo> it doesn't explode on my end :|

[22:57] <timotimo> ...

[22:57] <timotimo> i forgot to check out the branch

[22:57] <jnthn> ah :)

[22:59] <timotimo> return_to_box from inline.c could be the culprit

[23:00] <timotimo> aha, it turns the return instruction into the hllboxtype_i instruction and *then* inserts the box_i

[23:01] *** lizmat joined
[23:01] <Geth> Â¦ MoarVM: samcv++ created pull request #901: Make a faster HASH_ITER macro and make other hash optimizations

[23:01] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/901

[23:03] <timotimo> it appears i have to register that i set it as the writer for an added instruction

[23:04] <timotimo> found it

[23:05] <timotimo> it gets to a different frame now, is_scope

[23:05] <timotimo>       elems            r17(0),   r6(3)

[23:05] <timotimo>       coerce_in         r7(1),  r17(0)

[23:05] <timotimo> that's probably a simple fix of just putting the writer into the facts when that opt happens

[23:05] *** lizmat left
[23:07] <jnthn> Yes, we've been failing to set ->writer in various places too

[23:11] <jnthn> Going to rest, 'night o/

[23:14] <timotimo> gnite jnthn

