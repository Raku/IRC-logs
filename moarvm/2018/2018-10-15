[00:14] *** ggoebel left
[03:52] *** AlexDaniel left
[03:52] *** AlexDaniel joined
[03:53] *** p6bannerbot sets mode: +v AlexDaniel

[06:06] *** domidumont joined
[06:07] *** p6bannerbot sets mode: +v domidumont

[06:42] *** robertle joined
[06:43] *** p6bannerbot sets mode: +v robertle

[07:01] <Geth> Â¦ MoarVM: 8c2dd3ad22 | (Bart Wiegmans)++ | 2 files

[07:01] <Geth> Â¦ MoarVM: [JIT] Be more silent about internal failures

[07:01] <Geth> Â¦ MoarVM:

[07:01] <Geth> Â¦ MoarVM: Loudly complaining about internal failures tends to upset some people.

[07:01] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8c2dd3ad22

[07:13] <nine> .tell brrt I tried to implement JITing of trunc_u16 and extend_u16. From my understanding it should just be mov TMP1, WORK[src]; mov TMP2w, TMP1w; mov WORK[dst], TMP2; and mov TMP1, WORK[src]; mov WORK[dst], TMP1; respectively but that causes endless looping on while $i < $uint16value { ... }

[07:13] <yoleaux> nine: I'll pass your message to brrt.

[07:23] *** travis-ci joined
[07:23] *** p6bannerbot sets mode: +v travis-ci

[07:23] <travis-ci> MoarVM build passed. Bart Wiegmans '[JIT] Be more silent about internal failures

[07:23] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/441515254 https://github.com/MoarVM/MoarVM/compare/588873f7a724...8c2dd3ad2256

[07:23] *** travis-ci left
[07:48] *** brrt joined
[07:49] *** p6bannerbot sets mode: +v brrt

[08:29] *** patrickb joined
[08:29] *** p6bannerbot sets mode: +v patrickb

[08:35] *** dogbert11 left
[08:36] *** brrt left
[10:01] *** brrt joined
[10:02] *** p6bannerbot sets mode: +v brrt

[10:21] <brrt> \o

[10:21] <yoleaux> 07:13Z <nine> brrt: I tried to implement JITing of trunc_u16 and extend_u16. From my understanding it should just be mov TMP1, WORK[src]; mov TMP2w, TMP1w; mov WORK[dst], TMP2; and mov TMP1, WORK[src]; mov WORK[dst], TMP1; respectively but that causes endless looping on while $i < $uint16value { ... }

[10:21] <brrt> .tell nine operations on the 'word' form of a x86 register do not clear the upper 48 bites

[10:21] <yoleaux> brrt: I'll pass your message to nine.

[10:27] *** domidumont left
[10:36] *** ggoebel joined
[10:36] *** p6bannerbot sets mode: +v ggoebel

[10:59] <nine> brrt: oh my, then I have been misled by my own comment: https://github.com/MoarVM/MoarVM/blob/master/src/jit/x64/emit.dasc#L1258

[10:59] <yoleaux> 10:21Z <brrt> nine: operations on the 'word' form of a x86 register do not clear the upper 48 bites

[10:59] <nine> Should have looked at whose commit that was.

[11:04] <brrt> :-)

[11:04] <brrt> I don't know where I read that from though

[11:05] <brrt> anyway, iirc, the upper 32 bits are cleared for a 32 bit operation

[11:14] <brrt> ... no perl devroom :-(

[11:45] *** ZzZombo joined
[11:45] *** p6bannerbot sets mode: +v ZzZombo

[12:02] *** domidumont joined
[12:03] *** p6bannerbot sets mode: +v domidumont

[12:07] *** domidumont1 joined
[12:08] *** p6bannerbot sets mode: +v domidumont1

[12:10] *** domidumont left
[12:12] *** dogbert2_ joined
[12:13] *** p6bannerbot sets mode: +v dogbert2_

[12:18] <dogbert2_> has jnthn gone up in smoke?

[12:33] *** brrt left
[13:11] <diakopter> eh

[13:12] *** leont joined
[13:12] *** p6bannerbot sets mode: +v leont

[13:13] <masak> dogbert2_: not unless it happened in the last 1.5 hours.

[13:13] <masak> dogbert2_: might it been that you are privmsg'ing with unreasonable expectations of speedy reply? ;)

[13:13] <masak> I find viewing IRC as an asynchronous medium works best

[13:18] * jnthn is busying himself with using Perl 6 rather than implementing Perl 6 in recent days :)

[13:18] <yoleaux> 13 Oct 2018 11:37Z <Xliff> jnthn: Thanks for the help with Supplies. I have a final signal handler pattern set up. You can see that, here:

[13:23] <nwc10> people actually *use* Perl 6â€½

[13:24] <diakopter> ikr

[13:26] *** patrickb left
[13:40] <masak> nwc10: funny/ouch

[13:42] <dogbert2_> masak: just thought he'd been awfully silent the last few days. Was starting to suspect that he had escaped somewhere in order to do some analysis :)

[13:42] <masak> the last few days, as in... the weekend? :P

[13:42] <dogbert2_> indeed :)

[14:01] *** Sigyn left
[14:04] *** Sigyn joined
[14:04] *** p6bannerbot sets mode: +v Sigyn

[14:21] *** brrt joined
[14:21] *** p6bannerbot sets mode: +v brrt

[15:00] <brrt> hmm

[15:01] <brrt> nine: any reason why we can't make everything go over nativeinvoke?

[15:01] *** zakharyas joined
[15:02] *** p6bannerbot sets mode: +v zakharyas

[15:12] <brrt> or just because nativeinvoke can't handle everything just yet

[15:25] *** fake_space_whale joined
[15:26] *** p6bannerbot sets mode: +v fake_space_whale

[15:34] <nine> brrt: it doesn't handle all cases yet, most notably callbacks

[15:34] <nine> i.e. function pointers

[15:34] <nine> brrt: btw. extend_u16 and trunc_u16 now work :) Thanks! Now there's just param_rp_u to implement

[15:34] *** brrt left
[15:35] <leont> brrt: your post on fork didn't mention pthread_atfork. Implementation detail or did you take a different approach?

[15:51] <nine> How can we not have a known value for a literal?!

[15:52] <nine> Ah, because the known value goes through a coerce_iu and becomes unknown. Because our support for unsigned ints barely exists :/

[16:03] *** zakharyas left
[16:05] *** zakharyas joined
[16:06] *** zakharyas left
[16:08] *** zakharyas joined
[16:09] *** p6bannerbot sets mode: +v zakharyas

[16:46] *** domidumont1 left
[16:58] *** domidumont joined
[16:59] *** p6bannerbot sets mode: +v domidumont

[17:03] *** robertle left
[17:58] *** dogbert17 joined
[17:59] *** p6bannerbot sets mode: +v dogbert17

[18:01] *** robertle joined
[18:02] *** p6bannerbot sets mode: +v robertle

[18:04] *** zakharyas left
[18:06] *** zakharyas joined
[18:06] *** p6bannerbot sets mode: +v zakharyas

[18:49] *** domidumont left
[18:50] *** brrt joined
[18:51] *** p6bannerbot sets mode: +v brrt

[18:58] <dogbert17> brrt: I might hace stumbled upon a JIT related problem

[18:58] <dogbert17> *have

[18:59] <dogbert17> gist here: https://gist.github.com/dogbert17/10cad2d63f6d5175301570021a20560e

[19:05] <brrt> hmm

[19:09] <brrt> dogbert2++ good catch

[19:09] <brrt> sorry, dogbert17++

[19:11] <Geth> Â¦ MoarVM: f79011cf91 | (Bart Wiegmans)++ | src/jit/compile.c

[19:11] <Geth> Â¦ MoarVM: [JIT] Initialize sequence number early

[19:11] <Geth> Â¦ MoarVM:

[19:11] <Geth> Â¦ MoarVM: So that if we destroy the code early, we can use it correctly.

[19:11] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f79011cf91

[19:13] <dogbert17> now that's what I call fast turnaround :-) brrt++

[19:16] <brrt> some bugs are simple :-)

[19:16] <brrt> nine: I'm kind of looking for an easy test case for nativeinvoke

[19:17] <brrt> and..... I'm not sure I'm very happy about having the NativeCall library make decisions based on MoarVM internals

[19:17] <brrt> Ideally, i'd just be invoke() and whatever NC implementation we had would use that

[19:17] <brrt> rather than have something like nativecallinvoke and nativeinvoke

[19:18] <brrt> (although, arguably, I'd be equally happy about sp_nativeinvoke)

[19:18] <brrt> i.e. some way in which we knew we could do better

[19:18] <brrt> then again, we do need something like nativecallbuild

[19:22] *** zakharyas left
[20:31] *** brrt left
[21:17] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/10/15/2018-42-a-better-atom-for-6/

[21:22] *** robertle left
[22:10] <jnthn> lizmat++

[22:49] *** leont left
