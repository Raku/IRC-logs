[02:57] *** ilbot3 joined
[08:53] *** dogbert11 joined
[09:00] <Geth> Â¦ MoarVM: 7abf248f3e | cygx++ (committed using GitHub Web editor) | src/spesh/manipulate.h

[09:00] <Geth> Â¦ MoarVM: Make MVM_spesh_manipulate_remove_handler_successors() public

[09:00] <Geth> Â¦ MoarVM:

[09:00] <Geth> Â¦ MoarVM: Rakudo commit baa1393 uses it in src/vm/moar/ops/container.c

[09:00] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7abf248f3e

[09:00] <Geth> Â¦ MoarVM: e15db944bc | niner++ (committed using GitHub Web editor) | src/spesh/manipulate.h

[09:00] <Geth> Â¦ MoarVM: Merge pull request #789 from cygx/patch-2

[09:00] <Geth> Â¦ MoarVM:

[09:00] <Geth> Â¦ MoarVM: Make MVM_spesh_manipulate_remove_handler_successors() public

[09:00] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e15db944bc

[09:07] *** statisfiable6 joined
[09:23] *** greppable6 joined
[09:28] *** reportable6 joined
[09:28] *** bisectable6 joined
[09:28] *** unicodable6 joined
[11:35] *** quotable6 joined
[11:42] *** quotable6 joined
[12:14] *** quotable6 joined
[13:19] *** p6lert joined
[14:55] *** Ven`` joined
[16:32] *** domidumont joined
[16:38] *** evalable6 joined
[16:38] *** domidumont joined
[16:40] *** zakharyas joined
[17:19] *** wictory[m] joined
[17:23] <wictory[m]> How is memory alignment of gc allocated objects handled in moarvm?

[17:28] <timotimo> objects are created in a push-the-pointer area and move at most once into a size-segregated memory pool

[17:28] <timotimo> no, sorry, at most twice

[17:28] <timotimo> once from nursery to nursery (semi-space copying garbage collector for the nursery) and another time to the "old generation"

[17:32] <wictory[m]> ok, when I read the code I got the impression that the nursery basically does not guarantee any alignment. If we start by assuming that nursery memory area is "well aligned" from the beginning. Then the sizes of the objects pushed before an object of interest decides on whether the object will be aligned. Have I understood this correctly?

[17:33] *** zakharyas joined
[17:38] <wictory[m]> this is a place where is happens: https://github.com/MoarVM/MoarVM/blob/e15db944bcf75d4873f2fcadc7067bcd829006dc/src/gc/allocation.c#L37

[17:41] <wictory[m]> so if `tc->nursery_alloc` unaligned, the allocated object will be unaligned. `tc->nursery_alloc` becomes unaligned when an object with an "unaligned" size is allocated.

[17:42] <wictory[m]> This is another place where it happens: https://github.com/MoarVM/MoarVM/blob/e15db944bcf75d4873f2fcadc7067bcd829006dc/src/gc/collect.c#L313

[17:42] <timotimo> how about putting a printf in there that triggers if an unaligned address gets in there and see if it actually does happen?

[17:44] <wictory[m]> And for reference, here is a piece of code that relies on the fact that the objects are tight together https://github.com/MoarVM/MoarVM/blob/e15db944bcf75d4873f2fcadc7067bcd829006dc/src/gc/collect.c#L618

[17:47] <wictory[m]> when I install rakudo from openbsd ports, I get an unaligned access assertion from libatomic_ops when I `use` the openssl module.

[17:48] <wictory[m]> I managed to minimize the test that triggered this to something like: load a module A with a NativeCall Sub in, then load module B. Unfortunately I don't have the code here right now.

[17:49] <wictory[m]> The native sub is a `Sub+Something` which has an unaligned size. After that a Lock is created, and when someone tries to access the Lock, I get the assertion

[17:49] <timotimo> ah, access to atomic variables is likely a bunch more picky

[17:50] <timotimo> if you're in gdb, you can "call MVM_dump_backtrace(tc)" (just go up a few frames to get a tc)

[17:51] <wictory[m]> yeah, so I also hacked toghether a fix which tries to keep `tc->nursery_alloc` aligned. I'm able to run the test suites of nqp and rakudo with it. however, I'm not sure if that is the right way to solve it.

[17:52] <wictory[m]> `MVM_dump_backtrace(tc)` sounds like a useful routine :) I will try that later.

[17:53] <wictory[m]> I could open up an issue or PR on github about this later, maybe that the best thing to do here.

[18:01] <timotimo> cool

[18:09] *** domidumont joined
[18:16] *** zakharyas joined
[18:16] *** domidumont1 joined
[19:35] *** greppable6 joined
[20:36] *** Kaiepi joined
[21:14] *** colomon joined
[21:14] *** MasterDuke joined
[21:15] <MasterDuke> Has anybody had a chance to look at https://github.com/MoarVM/MoarVM/pull/788 ? Any comments?

[21:28] <timotimo> i don't see a reason to keep it unmerged

[21:29] <Geth> Â¦ MoarVM/master: 8 commits pushed by MasterDuke17++

[21:29] <Geth> Â¦ MoarVM/master: 6b65587432 | Add JIT template for sp_resolvecode

[21:29] <Geth> Â¦ MoarVM/master: 82f94a3471 | Add JIT template for smrt_strify

[21:29] <Geth> Â¦ MoarVM/master: db35d1a0df | Add JIT template for smrt_numify

[21:29] <Geth> Â¦ MoarVM/master: 02907093ae | Add JIT template for push_i

[21:29] <Geth> Â¦ MoarVM/master: f7181de611 | Add JIT template for eq_s

[21:29] <Geth> Â¦ MoarVM/master: 8210fb733c | Add JIT template for box_i

[21:29] <timotimo> so there we go

[21:29] <Geth> Â¦ MoarVM/master: cde5537411 | Add JIT template for getdynlex

[21:29] <Geth> Â¦ MoarVM/master: e813f06c38 | Fix JIT caller macro, timotimo++

[21:29] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/e15db944bc...e813f06c38

[21:31] <mst> the S-expr format for the templates makes me irrationally happy

[21:32] <timotimo> you surely saw damian conway's talk that has quicksort written in basically-lisp-but-actually-perl6? :)

[21:37] <mst> I think that one was first thing in the morning, ergo "no"

[21:38] <timotimo> i'm not sure if it's the "shoulders of giants" talk or another

[21:38] <timotimo> but i do believe there's recordings available

[21:41] *** Zoffix joined
[21:41] <Zoffix> I tried to do the bumps to bring those commits in, but the build died with "failed to load library 'dynext/libperl6_ops_moar.so'"

[21:41] <yoleaux> 15:51Z <TimToady> Zoffix: removing that hack is probably fine, since my lack of nqp understanding at that point was primarily syntactic

[21:41] <timotimo> Zoffix: you may need a "make clean"?

[21:42] <lizmat> timotimo: make clean where ?

[21:42] <timotimo> rakudo

[21:42] <lizmat> done that, doesn't fetch the new Moar  :-(

[21:42] <timotimo> "fetch"?

[21:43] <Zoffix> k, lemme try that

[21:43] <lizmat> perl Configure.pl --gen-moar --gen-nqp --backends=moar --make-install

[21:43] <lizmat> with a locally bumped NQP_VERSION

[21:43] <timotimo> huh

[21:44] <lizmat> aaah...

[21:44] <lizmat> oops

[21:44] <lizmat> my bad

[21:45] <lizmat> I had only added the new version, not removed the previous one  :-(

[21:45] <timotimo> oh, you mean the file had two lines?

[21:45] <Zoffix> Ah, lizmat++ already bumped nqp. Never mind me then.

[21:45] *** MasterDuke joined
[21:46] <lizmat> timotimo: yeah

[21:46] <lizmat> and it took the first I guess

[21:46] <timotimo> that could be made to explode

[21:46] <lizmat> yeah... well, perhaps...

[21:47] <MasterDuke> timotimo: cool, thanks

[21:47] <timotimo> no, thank *you*

[21:48] <MasterDuke> There are still a couple missing that had a lot of hits when building rakudo

[21:48] <timotimo> cool, which are those?

[21:49] <MasterDuke> But they were a bit more complicated

[21:49] <Zoffix> Yeah, make realclean in all repos made the thing compile

[21:49] <MasterDuke> Iâ€™m on my phone, donâ€™t remember exactly

[21:49] <timotimo> it'd be interesting to compare counts of how big the lines "making tree out of [blah, blah, blah"]" get

[21:49] <MasterDuke> Maybe I can find themâ€¦

[21:49] <timotimo> don't worry, i'll be afk soon, but i could check myself

[21:51] <MasterDuke> Getattr and bindattr were two I remember

[21:53] <MasterDuke> _i variant I think

[21:58] *** MasterDuke joined
[22:03] <Zoffix> Oh, the place where it worked (I think) was my local box. Still fails with the same error on my VM :/

[22:04] <Zoffix> nm, wrong commands

[22:13] *** Zoffix left
[23:09] *** Ven`` joined
[23:09] *** dalek joined
[23:09] *** synopsebot joined
[23:09] *** Geth joined
[23:09] *** p6lert joined
[23:11] *** Ven`` joined
[23:30] *** Util joined
[23:54] *** colomon joined
