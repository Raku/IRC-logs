[00:09] *** travis-ci joined
[00:09] <travis-ci> MoarVM build failed. Samantha McVey 'Fix issues with previous commit overzealously removing brackets

[00:09] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/371325397 https://github.com/MoarVM/MoarVM/compare/5728e1f39973...e7d79d869199

[00:09] *** travis-ci left
[01:12] *** MasterDuke joined
[01:57] *** ilbot3 joined
[02:11] *** [Coke]_ joined
[02:16] *** Voldenet joined
[02:16] *** Voldenet joined
[02:19] *** benchable6 joined
[03:17] *** coverable6 joined
[03:17] *** evalable6 joined
[03:17] *** releasable6 joined
[03:17] *** statisfiable6 joined
[04:14] *** yoleaux joined
[05:53] *** domidumont joined
[06:00] *** domidumont joined
[06:38] *** robertle joined
[07:47] *** zakharyas joined
[08:15] <lizmat> good *, #moarvm

[08:15] *** zakharyas joined
[08:17] <lizmat> I have sad news: looks like the latest changes in Moar created a bunch of issues

[08:17] <lizmat> mi6 stopped working: https://gist.github.com/lizmat/f7ce01f608c0ef8ab7d560ce2b4286ae

[08:17] <lizmat> and after the most recent pull, "make install:

[08:18] <lizmat> " doesn't work for me either anymore: https://gist.github.com/lizmat/b40058cee4738cffba91c1e3a0c888a3

[08:18] <lizmat> it may be that I'm not quite awake yet, but both of these are pretty weird / mysterious to me at this point

[08:22] * lizmat tries a complete install from scratch

[08:27] <lizmat> hmmm... a complete install from scratch is ok

[08:28] * lizmat nukes the install dir and tries again

[08:33] <lizmat> new interesting failure mode on "make install":

[08:33] <lizmat> No such method 'install' for invocant of type 'Str'

[08:33] <lizmat> the string being "CompUnit::Repository::Staging" rather than a type object  :-(

[08:40] <lizmat> and now I'm back to the original error  :-(

[08:41] <lizmat> afk for a few hours&

[08:50] *** ilmari[m] joined
[08:53] *** brrt joined
[08:53] <brrt> \o

[08:53] <nwc10> o/

[08:54] <brrt> lizmat: that is bad news indeed

[09:23] <jnthn> o/

[09:23] <jnthn> It'd be worse news if those things had landed before the release :-)

[09:24] <jnthn> Currently testing a fix for https://github.com/MoarVM/MoarVM/issues/846

[09:24] <brrt> true

[09:28] <Geth> Â¦ MoarVM: 1b78b04c02 | (Jonathan Worthington)++ | src/6model/reprs/NFA.c

[09:28] <Geth> Â¦ MoarVM: Fix missing bounds check in NFA results push

[09:28] <Geth> Â¦ MoarVM:

[09:28] <Geth> Â¦ MoarVM: After the binary search identifies that there is at last one edge

[09:28] <Geth> Â¦ MoarVM: matching and starts pushing the target states, we need a stronger

[09:28] <Geth> Â¦ MoarVM: condition to make sure we don't read past the end of the codepoint

[09:28] <Geth> Â¦ MoarVM: edges list, or get a false positive on a non-codepoint edge.

[09:28] <Geth> Â¦ MoarVM:

[09:28] <Geth> Â¦ MoarVM: Fixes #846.

[09:28] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1b78b04c02

[09:29] *** AlexDaniel` joined
[09:29] *** wictory[m] joined
[09:32] <nwc10> jnthn: I'd not yet built anything recent (past 2 days) with ASAN because t/spec/S17-supply/syntax.t is hanging (again) (no CPU burned) and I'd not gone for a dig to see why

[09:32] <nwc10> or even asked you "did you want to know why?"

[09:34] <jnthn> Hm, hasn't hung for me in a very long time.

[09:35] *** brrt` joined
[09:41] *** releasable6 joined
[09:41] *** statisfiable6 joined
[09:47] *** travis-ci joined
[09:47] <travis-ci> MoarVM build passed. Jonathan Worthington 'Fix missing bounds check in NFA results push

[09:47] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/371468806 https://github.com/MoarVM/MoarVM/compare/e7d79d869199...1b78b04c0269

[09:47] *** travis-ci left
[10:20] *** ilmari[m] joined
[10:24] *** AlexDaniel joined
[10:36] *** FROGGS joined
[10:38] <lizmat> alas, that doesn't solve my "make install" problem  :-(

[10:42] <jnthn> OK, it works fine here alas (even tried it a few times just in case)

[10:42] <lizmat> so it must be something in my setup :-(

[10:42] <jnthn> Well, or OSX-specific

[10:43] <jnthn> Could always try and figure out which commit introduced it

[10:43] <lizmat> ok, this gets weird

[10:44] <lizmat> dd $*REPO;   # Use of uninitialized value of type CompUnit::Repository::Staging in string context.

[10:44] <lizmat> and the next line is $*REPO.install(...)

[10:44] <lizmat> and that dies with: No such method 'install' for invocant of type 'Str'

[10:51] <lizmat> turns out reverting 4120b226b550a485dd fixes it for me

[10:52] <nine> lizmat: then I'd say revert it. The benefit of the commit certainly does not justify that cost

[10:52] <lizmat> indeed, already reverted  :-)

[10:55] <lizmat> samcv: got two errors on nqp's make test: t/nqp/106-unicodenames.t

[10:58] <lizmat> samcv: looks like out of sync "<foo>" vs "foo" expectations

[10:58] <lizmat> actually, more like "<foo>" vs "FOO"

[11:01] *** wictory[m] joined
[11:01] *** AlexDaniel` joined
[11:04] *** brrt joined
[11:31] *** evalable6 joined
[11:47] *** domidumont joined
[11:51] *** domidumont1 joined
[12:04] *** domidumont joined
[12:38] <Geth> Â¦ MoarVM: 0e9418dd36 | (Jonathan Worthington)++ | src/io/asyncsocket.c

[12:38] <Geth> Â¦ MoarVM: Close server socket handle when client side closes

[12:38] <Geth> Â¦ MoarVM:

[12:38] <Geth> Â¦ MoarVM: We've so far relied on the user explicitly doing the `close` call, but

[12:38] <Geth> Â¦ MoarVM: if they forget, the result is a server where new requests just pile up

[12:38] <Geth> Â¦ MoarVM: due to the unclosed handles. Since `.close` is already idempotent (you

[12:38] <Geth> Â¦ MoarVM: can call it many times on an async socket handle without problem), we

[12:38] <Geth> Â¦ MoarVM: can simply close the handle when notified that the client side has

[12:38] <Geth> Â¦ MoarVM: closed without any bad effects on existing code. Meanwhile, code that

[12:38] <Geth> Â¦ MoarVM: doesn't bother will simply work. Change inspired by issue reported at

[12:38] <Geth> Â¦ MoarVM: https://github.com/rakudo/rakudo/issues/1775.

[12:38] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0e9418dd36

[12:55] <brrt> jnthn: my main question wrt to a high-level interface to spesh was going to be, where are we going to run the HLL snippets

[12:56] <brrt> larger, more hairy question; to what extent do we want to reify the VM and it's instrumentation on perl6 level

[12:57] <jnthn> brrt: They aren't run by spesh, they're run in the normal course of execution

[12:58] <jnthn> brrt: Spesh just looks at the data that was written

[12:58] <jnthn> This isn't really Perl 6 level, it's a VM-specific mechanism we can use when doing code-gen for the MoarVM backend

[13:00] <brrt> let me reread, because i'm sure i must have misunderstood

[13:01] <jnthn> D'oh, when the socket IP/port info was added, one of the error paths wasn't updated

[13:01] <jnthn> So it didn't pass enough args :(

[13:01] *** domidumont1 joined
[13:04] <brrt> ah, i see

[13:04] *** zakharyas joined
[13:05] <brrt> it's a configurable spesh cache

[13:08] <Geth> Â¦ MoarVM: a7196adc89 | (Jonathan Worthington)++ | src/io/asyncsocket.c

[13:08] <Geth> Â¦ MoarVM: Fix error reporting regression

[13:08] <Geth> Â¦ MoarVM:

[13:08] <Geth> Â¦ MoarVM: When sending the connection name/port was added, one of the errors

[13:08] <Geth> Â¦ MoarVM: was not updated to pass enough arguments to the callback.

[13:08] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a7196adc89

[13:08] <jnthn> brrt: Pretty much

[13:09] <brrt> that seems like it could be handy, yes

[13:28] <Geth> Â¦ MoarVM: 8a7dcf010c | (Jonathan Worthington)++ | src/io/asyncsocket.c

[13:28] <Geth> Â¦ MoarVM: Root correct object when pushing host/port info

[13:28] <Geth> Â¦ MoarVM:

[13:28] <Geth> Â¦ MoarVM: It's `arr` that lives and is referenced beyond this point, not

[13:28] <Geth> Â¦ MoarVM: `result`.

[13:28] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8a7dcf010c

[13:30] <jnthn> ah, d'oh, arr is rooted above :/

[13:31] <nwc10> is your coffee supply contaminated?

[13:32] <jnthn> Seems like

[13:32] <jnthn> Soemthing is going wrong somewhere though...a call to write gets a junk handle

[13:44] *** Kaiepi joined
[13:45] *** domidumont joined
[13:46] <jnthn> bah, was hunting a GC bug

[13:46] <jnthn> But in the end it was that it was trying to use a type object instead of a concrete handle

[13:50] <Geth> Â¦ MoarVM: 0f55183306 | (Jonathan Worthington)++ | src/io/asyncsocket.c

[13:50] <Geth> Â¦ MoarVM: Remove repeated MVMROOT

[13:50] <Geth> Â¦ MoarVM:

[13:50] <Geth> Â¦ MoarVM: The object is already rooted up above.

[13:50] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0f55183306

[13:50] <Geth> Â¦ MoarVM: 77e500c62b | (Jonathan Worthington)++ | src/io/io.c

[13:50] <Geth> Â¦ MoarVM: Check we have a concrete OS handle in IO ops

[13:50] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/77e500c62b

[13:58] <jnthn> bah, the coffee really ain't working well today

[13:58] <nwc10> try the beer?

[13:59] <Geth> Â¦ MoarVM: 717ee970f2 | (Jonathan Worthington)++ | src/io/asyncsocket.c

[13:59] <Geth> Â¦ MoarVM: Push error string argument in the right place

[13:59] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/717ee970f2

[14:00] <jnthn> So, with all the silly fixed...now I have a "fun" issue of a spesh guard op being executed when spesh_cand and effective spesh slots are nulled out :S

[14:13] <jnthn> Only happens when inlining is enabled

[14:16] <jnthn> (gdb) p cur_op - bytecode_start

[14:16] <jnthn> $8 = -141721352

[14:16] <jnthn> Well...that should never happen. o.O

[14:20] <jnthn> ah, the deopt log ends with a blaze of "JIT: can't find deopt all idx"

[14:23] *** squashable6 joined
[14:23] <jnthn> Though things don't go any better with JIT disabled

[14:28] *** brrt joined
[14:47] <brrt> jnthn: have you tried tools/jit-bisect.pl with the --spesh flag?

[14:48] <jnthn> No, but things are getting stranger. I tried to put in a sanity check that when we return to a frame and it has no spesh cand, return_address is within the bytecode's range. And it fails sometimes...even with spesh disabled o.O

[14:48] <brrt> it's usually pretty good, and it is arguably better with the spesh-limit-debug-log branch ð¤

[14:48] <brrt> that is pretty odd indeed

[14:50] <brrt> i'm looking at something that i think is also odd...

[14:55] <timotimo> damn, that socket error reporting thing was my mistake, wasn't it ...

[14:55] <timotimo> also: not enough spec tests :)

[14:56] <brrt> i've wished for a testsuite for the JIT at some point

[14:56] <dogbert2_> jnthn: are you trying to solve dmaestro's inlining problem? https://github.com/MoarVM/MoarVM/issues/775

[14:57] <jnthn> dogbert2_: No. I got a really weird spesh failure when testing the fixes for the socket issue I was working on earlier

[14:58] <jnthn> Then I thought I'd put in some simple debug code to try and catch where things go wrong, and it caught things even with spesh disabled

[14:58] <jnthn> So now I'm pretty confused

[14:58] <dogbert2_> oops

[14:59] <jnthn> We do

[14:59] <jnthn> *(tc->interp_cur_op) = caller->return_address;

[14:59] <jnthn> *(tc->interp_bytecode_start) = MVM_frame_effective_bytecode(caller);

[14:59] <timotimo> :D

[14:59] <timotimo> that *could* be wrong

[14:59] <jnthn> If spesh is disabled then the second function call is always caller->static_info->body.bytecode

[15:00] <jnthn> And sure there's no way caller->return_address should be outside of the bytecode we're returning in to?

[15:00] <jnthn> *surely

[15:00] <timotimo> have i recommended rr? :)

[15:01] <timotimo> you can set hardware watchpoints on these two fields and step backwards to when either of them got changed

[15:02] <dogbert2_> m: say $*IN.lines.head(250).grep({  / ^ <[ " ]> <[ \w - ]>+ <[ " ]> $ / })Â».subst( / \" /, "", :g ).elems

[15:02] <camelia> rakudo-moar 29b092c94: OUTPUT: Â«0â¤Â»

[15:04] <dogbert2_> what piece of code are you running when things go wrong?

[15:06] <jnthn> The simplest code that trips over my sanity check is t/nqp/019-file-ops.t

[15:08] <jnthn> https://gist.github.com/jnthn/f701ad409966d8b02179a6c2925d7850

[15:08] <jnthn> That is the added check. I can only hope I'm doing something stupid in it...

[15:09] <jnthn> In this case the address is *before* the start of the bytecode...

[15:10] <brrt> zero, perchance?

[15:11] <jnthn> (gdb) p caller->return_address - caller->static_info->body.bytecode

[15:11] <jnthn> $4 = 1463542

[15:11] <jnthn> brrt: zero where?

[15:11] <jnthn> (gdb) p caller->return_address

[15:11] <jnthn> $1 = (MVMuint8 *) 0x7ffff50c177a "\b"

[15:11] <jnthn> (gdb) p caller->static_info->body.bytecode

[15:11] <jnthn> $2 = (MVMuint8 *) 0x7ffff4f5c284 "\214"

[15:12] <brrt> that is odd, yes

[15:13] <jnthn> This is with spesh disabled (so, no jitting, no speshing)

[15:13] <timotimo> and no instrumentation either i'm sure

[15:14] <jnthn> No, just running directly

[15:14] <jnthn> Also this is telling:

[15:14] <jnthn> at <unknown>:1  (NQPCORE.setting.moarvm:)

[15:14] <jnthn> from <unknown>:1  (NQPCORE.setting.moarvm:open)

[15:14] <jnthn> from gen/moar/stage2/NQPCORE.setting:893  (NQPCORE.setting.moarvm:open)

[15:14] <jnthn> That's a p MVM_dump_backtrace(tc) at that point

[15:15] <jnthn> Note how the location info is weird

[15:15] <jnthn> What's really odd though is...this works o.O

[15:15] <jnthn> Like, it runs correctly

[15:15] <brrt> hmm

[15:16] <timotimo> AFK for a little

[15:16] <brrt> so, what if you don't panic, but step into the debugger, and see how the program continues

[15:17] <dogbert2_> jnthn: adding you check causes several tests (nqp) to fail

[15:17] <dogbert2_> MoarVM panic: Caller return address 911160144 bytes after end of bytecode

[15:17] <jnthn> brrt: Well, I bp'd it in gdb, but yeah

[15:17] *** harrow joined
[15:19] <jnthn> Ah, interestingly the test is

[15:19] <jnthn> dies-ok({ open('file_does_not_exist_for_sure', :r);

[15:19] <jnthn> }, 'open dies on missing file');

[15:19] <jnthn> So exceptions are involved here also

[15:20] <dogbert2_> add_to_frontier_set, wonder what that is

[15:21] <jnthn> ohhh, maybe the special return mechanism is what makes it right

[15:29] <jnthn> Indeed, a different but similar check after that gives me just one NQP test that is unhappy

[15:30] <jnthn> ah, and unwinding sets the address explicitly

[15:40] * jnthn wonders if the failure he now sees tripping the error will be a real issue

[16:18] <dogbert17> is it a real issue?

[16:40] <jnthn> Dunno, but the SEGV I started out hunting is. And it doesn't trip the sanity check

[16:42] *** brrt joined
[16:48] *** zakharyas joined
[16:49] <dogbert17> a SEGV, now that's interesting

[16:49] *** domidumont joined
[16:50] <jnthn> Yeah, I really can't figure what's going on :S

[16:51] <jnthn> It ends up interpreting specialized code, in a frame with no spesh_cand

[16:51] <brrt> we can sometimes NULL the spesh cand in a deopt, i think

[16:51] <brrt> i was looking at that just now

[16:53] <jnthn> Sure, but we should always move the bytecode while we do it

[16:56] <brrt> it's might suspicious for sure

[16:56] <brrt> *mighty

[17:00] <jnthn> We end up with cur_op pointing at specialized bytecode, and bytecode_start pointing at unspecialized

[17:00] <jnthn> And it all seems to happen around exceptions

[17:01] *** zakharyas joined
[17:04] <jnthn> Hmm, and the thread where things go wrong does a resume shortly before blowing up

[17:07] <jnthn> Yes, the spesh address is precisely the one inside of the exception where we resume

[17:07] <jnthn> Ouch.

[17:09] <jnthn> So the sequence of events is 1. exception thrown, handler runs. 2. exception handler cuases global deopt. 3. exception resume address is now invalid

[17:09] <jnthn> Since it points into specialized code

[17:12] <jnthn> Don't think I've the brain to fix that today, but at least I understand what's going on now, which is half the battle. :)

[17:13] <jnthn> bbl &

[17:23] *** robertle joined
[18:54] *** brrt joined
[19:10] *** zakharyas joined
[19:41] *** brrt joined
[20:30] <jnthn> First known to me fallout of the hash randomization change is patched (and actually caused a design improvement): https://github.com/croservices/cro-http/commit/181f218d0c

[20:48] <dogbert17> m: say ('"WAT"' xx 150).grep({  / ^ <[ " ]> <[ \w - ]>+ <[ " ]> $ / })Â».subst( / \" /, "", :g ).elems # result should be 150

[20:49] <camelia> rakudo-moar 29b092c94: OUTPUT: Â«139â¤Â»

[20:49] <dogbert17> m: say ('"WAT"' xx 150).grep({  / ^ <[ " ]> <[ \w - ]>+ <[ " ]> $ / })Â».subst( / \" /, "", :g ).elems # result should be 150

[20:49] <camelia> rakudo-moar 29b092c94: OUTPUT: Â«149â¤Â»

[20:49] <dogbert17> m: say ('"WAT"' xx 150).grep({  / ^ <[ " ]> <[ \w - ]>+ <[ " ]> $ / })Â».subst( / \" /, "", :g ).elems # result should be 150

[20:49] <camelia> rakudo-moar 29b092c94: OUTPUT: Â«146â¤Â»

[20:53] *** brrt joined
[20:57] <dogbert17> in the above case, setting MVM_SPESH_LIMIT=161 seems to resolve the issue on my system

[20:59] <Geth> Â¦ MoarVM: jstuder-gh++ created pull request #848: Use operand type in splice jit

[20:59] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/848

[21:13] <dogbert17> m: say ('"WAT"' xx 150).grep({  / ^ <[ " ]> <[ \w - ]>+ <[ " ]> $ / }).elems

[21:13] <camelia> rakudo-moar 29b092c94: OUTPUT: Â«150â¤Â»

[21:13] <dogbert17> m: say ('"WAT"' xx 150).grep({  / ^ <[ " ]> <[ \w - ]>+ <[ " ]> $ / }).elems

[21:13] <camelia> rakudo-moar 29b092c94: OUTPUT: Â«150â¤Â»

[21:13] <dogbert17> m: say ('"WAT"' xx 150).grep({  / ^ <[ " ]> <[ \w - ]>+ <[ " ]> $ / }).elems

[21:13] <camelia> rakudo-moar 29b092c94: OUTPUT: Â«150â¤Â»

[21:13] <dogbert17> the above examples can also fail, so the hyper op seems to be off the hook

[22:25] <Geth> Â¦ MoarVM: 81e6823d6e | (Jeremy Studer)++ | src/jit/graph.c

[22:25] <Geth> Â¦ MoarVM: Use operand type in splice jit

[22:25] <Geth> Â¦ MoarVM:

[22:25] <Geth> Â¦ MoarVM: If the operand type is known, have the jit use that type information to

[22:25] <Geth> Â¦ MoarVM: select the proper 'splice' implementation. Saves us an extra call to

[22:25] <Geth> Â¦ MoarVM: MVM_repr_pos_splice.

[22:25] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/81e6823d6e

[22:25] <Geth> Â¦ MoarVM: 6885dbd0d8 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/jit/graph.c

[22:25] <Geth> Â¦ MoarVM: Merge pull request #848 from jstuder-gh/splice_jit_use_type

[22:25] <Geth> Â¦ MoarVM:

[22:25] <Geth> Â¦ MoarVM: Use operand type in splice jit

[22:25] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6885dbd0d8

[22:58] *** MasterDuke joined
