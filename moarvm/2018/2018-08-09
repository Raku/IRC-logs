[00:00] <timotimo> ah

[00:00] *** lizmat joined
[00:01] *** p6bannerbot sets mode: +v lizmat

[00:02] *** nativecallable6 joined
[00:02] *** bisectable6 joined
[00:02] *** benchable6 joined
[00:03] *** p6bannerbot sets mode: +v nativecallable6

[00:03] *** p6bannerbot sets mode: +v bisectable6

[00:03] *** p6bannerbot sets mode: +v benchable6

[00:05] *** lizmat left
[00:20] *** avar left
[00:24] *** avar joined
[00:24] *** avar left
[00:24] *** avar joined
[00:24] *** p6bannerbot sets mode: +v avar

[00:25] *** p6bannerbot sets mode: +v avar

[01:04] *** yoleaux joined
[01:04] *** p6bannerbot sets mode: +v yoleaux

[01:10] *** thurin27 joined
[01:11] *** p6bannerbot sets mode: +v thurin27

[01:12] *** MarkAtwood7 joined
[01:13] *** p6bannerbot sets mode: +v MarkAtwood7

[01:14] *** MarkAtwood7 left
[01:16] *** thurin27 left
[01:28] <timotimo> https://imgur.com/CVEXRdT - shiny new "show allocations for all children" feature; it's like "inclusive allocations" except it gets the inclusive allocations for each child call and displays them in-line

[01:30] <timotimo> (there's actually more; i forgot to include the routien itself in the "get inclusive allocations" so only children of each children were accounted for)

[02:41] *** SporkWitch5 joined
[02:42] *** p6bannerbot sets mode: +v SporkWitch5

[02:42] *** SporkWitch5 left
[04:22] *** tx2 joined
[04:23] *** p6bannerbot sets mode: +v tx2

[04:28] *** tx2 left
[05:17] *** brrt joined
[05:18] *** p6bannerbot sets mode: +v brrt

[05:43] *** diakopter left
[05:45] *** yoleaux left
[05:45] *** yoleaux joined
[05:46] *** p6bannerbot sets mode: +v yoleaux

[06:18] *** robertle joined
[06:19] *** p6bannerbot sets mode: +v robertle

[06:26] *** Kaypie joined
[06:26] *** Kaiepi left
[06:27] <brrt> do we ever clean up the spesh graphs that we allocated during inlining?

[06:27] *** p6bannerbot sets mode: +v Kaypie

[06:34] *** AlexDaniel joined
[06:34] *** onur14 joined
[06:34] *** onur14 left
[06:35] *** p6bannerbot sets mode: +v AlexDaniel

[06:49] *** lizmat joined
[06:49] *** p6bannerbot sets mode: +v lizmat

[06:50] *** brrt left
[07:01] *** holodoc6 joined
[07:02] *** p6bannerbot sets mode: +v holodoc6

[07:05] *** holodoc6 left
[07:12] *** brrt joined
[07:13] *** p6bannerbot sets mode: +v brrt

[07:21] *** Kaypie left
[07:33] *** Kaiepi joined
[07:34] *** p6bannerbot sets mode: +v Kaiepi

[07:37] <brrt> \o

[07:37] <brrt> I think we leak graphs allocated for inlines

[07:39] <brrt> which we normally don't notice, because we assign the inlines to the candidate, and we assign the candidate to the staticframe, and so we keep that alive

[08:01] *** zakharyas joined
[08:01] *** robertle left
[08:02] *** p6bannerbot sets mode: +v zakharyas

[08:08] *** brrt left
[08:10] *** Kaiepi left
[08:11] *** Kaiepi joined
[08:11] *** p6bannerbot sets mode: +v Kaiepi

[08:12] *** Kaiepi left
[08:13] *** Kaiepi joined
[08:13] *** p6bannerbot sets mode: +v Kaiepi

[08:24] *** Kaypie joined
[08:24] *** Kaiepi left
[08:25] *** p6bannerbot sets mode: +v Kaypie

[08:34] *** Kaypie left
[08:35] *** Kaypie joined
[08:35] *** p6bannerbot sets mode: +v Kaypie

[08:44] *** Kaypie is now known as Kaiepi

[09:21] <jnthn> brrt: We stash them away inside of the inline data strucutre in order to free them at the end of the specialization of the enclosing thing, as I remember it

[09:40] *** brrt joined
[09:41] *** p6bannerbot sets mode: +v brrt

[09:41] <brrt> \o

[09:41] <jnthn> hi brrt

[09:41] <brrt> I think we're going to need reference counting on spesh graphs

[09:42] <jnthn> ?

[09:42] <jnthn> Why?

[09:42] <jnthn> We never share them

[09:42] <brrt> we take a reference to a spesh graph when inlining

[09:42] <jnthn> Not really, we take ownership of it

[09:42] <jnthn> We produce that graph precisely for the purpose of inlining

[09:42] <brrt> hmmm

[09:43] <jnthn> Because we then mutate it a load as part of the inline process

[09:43] <jnthn> So it should just be freed when the graph it's incorporated into is being freed

[09:43] <brrt> that would suggest we can clean it up during staticframe spesh gc free

[09:43] <jnthn> We should actually be able to clean it up at the point spesh is done with it

[09:43] <brrt> that leads to use-after-free issues pretty fast...

[09:44] <jnthn> That is, as soon as it spits out the optimized bytecode and JITted output, it can go away

[09:44] <brrt> i'd think so, yes

[09:44] <brrt> hmmm

[09:44] <jnthn> If that isn't happening, that's a bug

[09:44] <brrt> anyway, we don't currently clean them up, no

[09:44] <jnthn> darn...for some reason my fix last night doesn't help the case it was meant to

[09:45] *** robertle joined
[09:45] <brrt> oh, i know why my fix doesn't work

[09:45] <brrt> I cleaned them up during spesh-graph-destroy

[09:46] *** p6bannerbot sets mode: +v robertle

[09:46] <brrt> however, in case of recursive inlining, the cleaned-up inline is going to point to inlines that are already freed

[09:48] <jnthn> Ohh...I wonder how we JIT return...

[09:48] <jnthn> aha

[09:51] <jnthn> Having to update both the lego JIT and the expresssion JIT gets a tad tiresome :)

[09:51] <jnthn> (And yes, I know, I should help write templates so we can expression JIT everything...)

[09:52] <brrt> jnthn: agreed and noted...

[09:53] <brrt> maybe we should make it a goal to eliminate the lego jit

[09:53] <brrt> there's virtually nothing it actually does better

[09:53] <brrt> and.

[09:53] <jnthn> *nod*

[09:53] <jnthn> I figured that was the goal anyway, just that - like all things - it needs time, which is a limited resource.

[09:53] <brrt> we can translate a bunch of the dynamic, untemplateable things, to expressions

[09:53] <lizmat> is there a way that other people can help towards this goal ?

[09:54] <brrt> well, a bunch of people have already been adding templates

[09:54] <lizmat> so more power to them?

[09:54] <brrt> definitely

[09:54] <brrt> there's a few things that we can't do in the expression JIT yet, notably SSE register selection

[09:55] <jnthn> That's needed for floating point?

[09:55] <brrt> yes

[09:55] <brrt> we barely use floating point, so it's not come up yet

[09:55] <brrt> there is a minor instruction encoding bug in dynasm for the upper 8 sse registers

[09:56] <jnthn> Yeah, Hm, what's `dov`?

[09:56] <brrt> do-void

[09:57] <jnthn> oh...do void maybe?

[09:57] <jnthn> :)

[09:57] <brrt> we can have a better name there :-)

[09:57] <jnthn> btw, what is it that blocks expr JIT of guards? (I know I've asked if they can be done, asking in case it's something I can do :))

[09:58] <brrt> hmm... the only thing that i can think of, is that we might need to flush the locals table before compiling a guard

[09:58] <jnthn> I see we have (^exit) as a template macro, which'd seem to be one part of it

[09:58] <brrt> and i recall you asking if we could avoid that

[09:59] <jnthn> ah...would ^exit not make that happen anyway?

[09:59] <brrt> no, let me check what ^exit actually points to...

[09:59] <jnthn> As in, force flush if we were leaving

[09:59] <jnthn> Oh, but that's maybe too late

[09:59] <jnthn> Yes, it can be too late :)

[09:59] <jnthn> We need to flush before we call the C function that does the deopt

[09:59] <jnthn> If flush means what I think it means :)

[10:00] <brrt> it almost means that... there is two meanings here, and i'm not using them nicely separated

[10:01] <brrt> the first meaning is, while building expression trees, we maintain the nodes that generated a local; if we find a reference to that local, we add a reference to that node (if we do not find it, we generate a node that says 'load this local' and use that as a reference instead)

[10:02] <brrt> the second meaning is, before we call we must ensure that values that are (potentially) clobbered are saved and restored; that's done by the register allocator

[10:03] <brrt> In the context of guards, i'm referring to the first meaning; and the implication is that before we return to the interpreter, the stack frame must be as if it was interpreted

[10:03] <brrt> It might be better to handle that explicitly via some kind of 'sync' node

[10:05] <brrt> anyway, to make a long story short

[10:06] <brrt> (i can also make it longer ;-))

[10:06] <brrt> there shouldn't be a problem with implementing guards

[10:15] <brrt> hmm. i'm confused now; the spesh graph candidate code *does* clean up inline spesh graphs

[10:21] <jnthn> Grrr...turns out that just fixing the return type side of things isn't quite enough

[10:25] <jnthn> Though it occurs to me that I'm also looking at a rather wasteful situation

[10:26] <jnthn> We're producing type specializations of the NQP sub `sub identity($obj) { $obj }`

[10:26] <jnthn> Which is utterly pointless because there's nothing to specialize in there

[10:26] <jnthn> We should just produce one simple ("certain") optimized version of it and be done

[10:28] <brrt> odd...

[10:29] <jnthn> Well, we don't yet do anythhing to analyze if type specializations are even worth it

[10:29] <brrt> anyway, the issue is, we're not freeing spesh graphs that have been allocated as part of try_unoptimized

[10:29] * jnthn works on that :)

[10:29] <brrt> and only those are a problem

[10:29] <jnthn> Hm, is that the new path?

[10:30] <jnthn> For when there was no existing specialization?

[10:30] <brrt> correct

[10:30] <brrt> but as far as I can tell, these are as normal?

[10:30] <jnthn> hmm, wonder if a destroy of the spesh graph if we can't inline it is missing

[10:30] <lizmat> jnthn: I guess you are aware that "identity" takes about 5% in my average profile

[10:31] <jnthn> lizmat: That's how I know the profiler is introducing its own measurement noise

[10:31] <lizmat> aha... ok

[10:31] <lizmat> :-)

[10:31] <jnthn> I suspect that with the expr jit we turn the content of identity into 1 or 2 machine code instructions

[10:31] <jnthn> Even calling the profiling logging is more than that

[10:31] <jnthn> Let alone its actually recording work

[10:32] <jnthn> *actual

[10:32] <brrt> https://gist.github.com/bdw/699471e0b284c86c605ee401782ef3de

[10:33] <brrt> we could, if inlined, and the optimizer works, and the register allocator optimizations work, etc.

[10:39] <brrt> no, we actually do clean that up.. hmm

[10:40] <brrt> o.O but, recursively, as well..

[10:43] *** d0nn1e joined
[10:44] *** p6bannerbot sets mode: +v d0nn1e

[10:44] <brrt> i could use a hint with the log above because i don't really get it

[10:49] *** d0nn1e left
[10:52] <Geth> ¦ MoarVM: 286b56079d | (Jonathan Worthington)++ | 4 files

[10:52] <Geth> ¦ MoarVM: Log return type in return from JIT to unspesh'd

[10:52] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/286b56079d

[10:52] <Geth> ¦ MoarVM: 5ef56b7268 | (Jonathan Worthington)++ | 4 files

[10:52] <Geth> ¦ MoarVM: Add data on which ops are specializable

[10:52] <Geth> ¦ MoarVM:

[10:52] <Geth> ¦ MoarVM: We'll use this data to decide when there's no point producing type

[10:52] <Geth> ¦ MoarVM: specializations for a frame, and we should just go with making a

[10:52] <Geth> ¦ MoarVM: single certain specialization for it instead.

[10:52] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5ef56b7268

[10:53] <jnthn> Hm, it's the spesh graph structure itself that leaks, rather than the memory allocator within it...

[10:55] <brrt> aye

[10:56] <brrt> well, also everything in it

[11:04] *** zakharyas left
[11:09] *** Exaeta joined
[11:09] *** Exaeta left
[11:09] *** travis-ci joined
[11:09] *** p6bannerbot sets mode: +v travis-ci

[11:09] <travis-ci> MoarVM build failed. Jonathan Worthington 'Add data on which ops are specializable

[11:09] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/413998366 https://github.com/MoarVM/MoarVM/compare/51197804f823...5ef56b726889

[11:09] *** travis-ci left
[11:16] <Geth> ¦ MoarVM: 0c5f6e52e4 | (Jonathan Worthington)++ | 4 files

[11:16] <Geth> ¦ MoarVM: Don't do worthless type specializations

[11:16] <Geth> ¦ MoarVM:

[11:16] <Geth> ¦ MoarVM: Note whether a static frame contains anything that would benefit from

[11:16] <Geth> ¦ MoarVM: type specialization. If it contains no such instructions, then only do

[11:16] <Geth> ¦ MoarVM: a certain specialization of it. This works well with the `identity` sub

[11:16] <Geth> ¦ MoarVM: written in NQP and produced by various spesh plugins. With a bit more

[11:16] <Geth> ¦ MoarVM: work in Rakudo it may be possible to get Mu.sink to be considered as an

[11:16] <Geth> ¦ MoarVM: unspecializable thing too.

[11:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0c5f6e52e4

[11:16] <lizmat> jnthn: work in Rakudo where ?

[11:18] <jnthn> Looking at the bytecode, seems 2 things (at least)

[11:19] <jnthn> 1) Don't bother spitting out a p6decontrv when we can see we're returning Nil (or something else that won't use it)

[11:19] <jnthn> 2) Twiddle the signature lowering so that a type constraint of Mu on an invocant won't spit out a hllize

[11:20] <jnthn> Can't do that for non-invocant Mu things, but when it's the invocant, well, we'll get away with it I guess :)

[11:21] <jnthn> Lunch time; will have a play with that afterwards

[11:21] <lizmat> ok

[11:21] <lizmat> meanwhile: I have a patch that will strip out the Stringy calls, making the core 36K smaller

[11:22] <jnthn> OK, does it come out just as fast when interoplating non-Str?

[11:22] <lizmat> faster

[11:22] <jnthn> oh, nice :)

[11:22] <lizmat> 1414 msecs vs 1713

[11:22] <jnthn> bbiab

[11:27] *** statisfiable6 joined
[11:27] *** p6bannerbot sets mode: +v statisfiable6

[11:34] *** travis-ci joined
[11:34] *** p6bannerbot sets mode: +v travis-ci

[11:34] <travis-ci> MoarVM build failed. Jonathan Worthington 'Don't do worthless type specializations

[11:34] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414006475 https://github.com/MoarVM/MoarVM/compare/5ef56b726889...0c5f6e52e469

[11:34] *** travis-ci left
[11:39] <dogbert17> brrt: did you see the asan output I posted on https://github.com/MoarVM/MoarVM/issues/862 ?

[11:49] *** mcspud26 joined
[11:50] *** p6bannerbot sets mode: +v mcspud26

[11:51] *** rorx15 joined
[11:51] *** AlexDaniel left
[11:51] *** rorx15 left
[11:55] *** mcspud26 left
[12:08] <jnthn> Ah, turns out that there's also a decont in method sink and that has to be there, and that's desirable to specialize

[12:09] <jnthn> So, we don't get it to fall under unspecializable. But still we can get it not to do a pointless p6decontrv :)

[12:12] <masak> hm, Rakudo extops are going away?

[12:15] <jnthn> Yes, slowly but surely

[12:18] <masak> why? is the flexibility of extops not worth it?

[12:19] <masak> or is this some sort of natural development like "moar is taking on more and more of the special needs rakudo has"?

[12:19] <lizmat> masak: extops cannot be jitted

[12:19] <jnthn> They made more sense when we were at the point where "write chunks of hot stuff in C" was good

[12:19] <masak> ah, so this is a step in the lifting of things

[12:20] <jnthn> Well, we can JIT the calls to them, but we can't look inside of them

[12:20] <jnthn> So for example return type checking and deconting and so forth used to be a check we coulod not avoid

[12:20] <jnthn> *could

[12:21] <jnthn> And many Scalar allocations took place magically inside of C code that allocated them and set the descriptor and default value, which would be invisible to escape analysis

[12:21] <masak> oh no

[12:21] <jnthn> That bit was already changed :)

[12:22] <jnthn> Note how if you have an interpreter and don't have any significant optimization infrastructure, it makes sense to do things with hunks of C in extops

[12:22] <jnthn> But now we have compilation to machine code and an increasingly sophisticated optimizer

[12:22] <masak> right

[12:23] *** robertle left
[12:23] <masak> will the extops go away completely, then?

[12:24] <masak> will it just be "0 extops", or will it be "the extops mechanism can be removed now"?

[12:25] <lizmat> masak: I think that's the plan

[12:26] <jnthn> Since Rakudo is the only customer, I think we could even remove it

[12:26] <masak> yay

[12:26] <jnthn> One nice side-effect of this is that we then can do static builds of MoarVM

[12:26] <jnthn> And they can run Rakudo

[12:27] <jnthn> Which will be very helpful for those wanting to bundle stuff into a single executable for distribution purposes

[12:30] <masak> yes, it was through that issue that I found that extops are going the way of the dodo

[12:38] *** zakharyas joined
[12:39] *** p6bannerbot sets mode: +v zakharyas

[12:45] *** Kaiepi left
[12:45] *** Kaypie joined
[12:46] *** p6bannerbot sets mode: +v Kaypie

[12:53] *** diakopter joined
[12:53] *** p6bannerbot sets mode: +v diakopter

[13:14] *** brrt left
[13:14] *** brrt joined
[13:15] *** p6bannerbot sets mode: +v brrt

[13:20] *** dodobrain16 joined
[13:21] *** p6bannerbot sets mode: +v dodobrain16

[13:21] *** dodobrain16 left
[13:35] *** brrt left
[13:50] *** Kaypie left
[13:52] *** Kaiepi joined
[13:53] *** p6bannerbot sets mode: +v Kaiepi

[13:58] *** davidebeatrici15 joined
[13:59] *** p6bannerbot sets mode: +v davidebeatrici15

[14:02] *** davidebeatrici15 left
[14:02] *** JustTheDoctor joined
[14:02] *** p6bannerbot sets mode: +v JustTheDoctor

[14:03] *** AlexDaniel joined
[14:03] *** JustTheDoctor left
[14:03] *** p6bannerbot sets mode: +v AlexDaniel

[14:04] *** AlexDaniel left
[14:04] *** AlexDaniel joined
[14:04] *** card.freenode.net sets mode: +v AlexDaniel

[14:04] *** p6bannerbot sets mode: +v AlexDaniel

[14:06] *** timotimo left
[14:06] *** AlexDaniel left
[14:06] *** AlexDaniel joined
[14:06] *** p6bannerbot sets mode: +v AlexDaniel

[14:16] *** nhandler23 joined
[14:16] *** p6bannerbot sets mode: +v nhandler23

[14:17] *** nhandler23 left
[14:35] *** Kaiepi left
[14:35] *** Kaiepi joined
[14:36] *** p6bannerbot sets mode: +v Kaiepi

[14:53] *** roger_rabbit17 joined
[14:54] *** p6bannerbot sets mode: +v roger_rabbit17

[14:55] *** roger_rabbit17 left
[15:37] *** timo joined
[15:37] *** p6bannerbot sets mode: +v timo

[15:37] *** timo is now known as timotimo

[15:41] *** lizmat left
[15:42] <Geth> ¦ MoarVM: 210a4026f5 | (Jonathan Worthington)++ | 4 files

[15:42] <Geth> ¦ MoarVM: Make inline logging available through an env var

[15:42] <Geth> ¦ MoarVM:

[15:42] <Geth> ¦ MoarVM: Having to compile it in my tweaking a #define every time gets quite

[15:42] <Geth> ¦ MoarVM: tiresome. This also makes it accessible to those doing development on

[15:42] <Geth> ¦ MoarVM: Rakudo, without them having to re-compile MoarVM.

[15:42] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/210a4026f5

[15:45] <timotimo> ^- i like that

[15:54] *** brand021 joined
[15:55] *** p6bannerbot sets mode: +v brand021

[15:56] *** brand021 left
[15:58] *** zakharyas left
[16:02] *** travis-ci joined
[16:02] *** p6bannerbot sets mode: +v travis-ci

[16:02] <travis-ci> MoarVM build failed. Jonathan Worthington 'Make inline logging available through an env var

[16:02] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414122535 https://github.com/MoarVM/MoarVM/compare/0c5f6e52e469...210a4026f53c

[16:02] *** travis-ci left
[16:07] *** Zoffix joined
[16:07] *** p6bannerbot sets mode: +v Zoffix

[16:20] <timotimo> https://imgur.com/hNKA3lz - now you can also get the allocations for an "entire routine", rather than just in the call graph "per call"

[16:24] <timotimo> even though actually using it has quite a few rough edges, i'll probably push it up to github and release it to the ecosystem Very Soon, plus a blog post

[16:48] <Zoffix> New blog post: "The 100 Day Plan: The Update on Perl 6.d Preparations": https://rakudo.party/post/The-100-Day-Plan-The-6-d-Update

[16:54] *** AlexDaniel left
[16:55] *** AlexDaniel joined
[16:55] *** p6bannerbot sets mode: +v AlexDaniel

[16:58] *** thomas23 joined
[16:58] <jnthn> Darn. I figured we could do a dead instruction pass before deopt use analysis, which would act mostly as a PHI prune

[16:58] *** p6bannerbot sets mode: +v thomas23

[16:58] <jnthn> And it makes a measurable difference in some benchmarks. Oddly, though, breaks the Rakudo build. It's odd, given it should be entirely safe..

[16:58] *** Zoffix left
[16:59] *** thomas23 left
[17:03] <timotimo> hah, yeah

[17:03] <timotimo> i experienced something similar to that

[17:03] <timotimo> when i tried to trim PHI nodes down to only have one mention of each register version

[17:03] *** pwillard10 joined
[17:04] <timotimo> maybe we've got some code that removes phi operands from a "pred" block when we remove something or other

[17:04] <timotimo> and that lacks an idea of usage/reference count/whatever

[17:04] *** p6bannerbot sets mode: +v pwillard10

[17:05] <jnthn> Dunno

[17:10] *** pwillard10 left
[17:13] *** nesthib joined
[17:13] *** p6bannerbot sets mode: +v nesthib

[17:14] *** nesthib left
[17:16] *** brrt joined
[17:17] *** p6bannerbot sets mode: +v brrt

[17:20] *** brrt left
[17:23] *** brrt joined
[17:23] *** p6bannerbot sets mode: +v brrt

[17:32] <jnthn> hah, obvious problem in hindsight

[17:32] <timotimo> cool, what was it?

[17:32] <jnthn> It was doing it when re-using a specialization

[17:32] <jnthn> And so threw out stuff that deopt analysis had carefully retained :)

[17:32] <timotimo> huh, so it did it twice to the same phi?

[17:32] <jnthn> Well, re-use means we make a graph from already specialized code

[17:33] <jnthn> But we don't have enough information in the code to know that we can't just go throwing things away

[17:33] <jnthn> (Because they will have no visible use, but will have been retained last time around for deopt reasons)

[17:33] <timotimo> ooh

[17:35] <diakopter> jnthn: it occurs to me that the spesh knowledge engine could be used to make a "real" type checker

[17:36] <diakopter> (like, Agda/Coq/Idris-grade)

[17:37] <diakopter> ...if there was a Calculus of [inductive] Constructions HLL, that is

[17:39] <timotimo> difficult to do, IMO, since we do multi-dispatch by caching what the actual dispatch code tends to do at run time

[17:39] <timotimo> and then just ignore the other methods and such

[17:39] <jnthn> Loads of stuff in spesh is done speculatively and so based on statistics

[17:40] <jnthn> So it's be a probabalistic type checker... :)

[17:40] <diakopter> but that's the essence of type-checking, proving that checks that could theoretically just be runtime checks are actually invariants that can be optimized away

[17:40] <timotimo> we still keep a whole lot of these checks around, though

[17:40] *** dimi34ka joined
[17:41] *** p6bannerbot sets mode: +v dimi34ka

[17:42] <diakopter> if one doesn't care about proving consistency of a program specification offline (doesn't mind encountering misdesigns/bugs at runtime), such a system would be just fine

[17:44] *** dimi34ka left
[17:49] *** brrt left
[17:49] <timotimo> there's still lots of places we do invocations, where potentially all our knowledge is just gone

[17:57] *** chachasmooth3 joined
[17:58] *** p6bannerbot sets mode: +v chachasmooth3

[18:03] *** chachasmooth3 left
[18:11] <Geth> ¦ MoarVM: bfbbb0f75c | (Jonathan Worthington)++ | 9 files

[18:11] <Geth> ¦ MoarVM: Do dead instruction elim pass after usage setup

[18:11] <Geth> ¦ MoarVM:

[18:11] <Geth> ¦ MoarVM: But before we do the deopt analysis. While it's of course possible

[18:11] <Geth> ¦ MoarVM: that there was dead code in the input program, the main purpose of

[18:11] <Geth> ¦ MoarVM: this is to trim away dead PHI nodes, recursively, so that they will

[18:11] <Geth> ¦ MoarVM: not make extra work for the deopt analyzer nor cause things to be

[18:11] <Geth> ¦ MoarVM: kept alive bogusly just because a PHI was used across a deopt point.

[18:11] <Geth> ¦ MoarVM: <…commit message has 5 more lines…>

[18:11] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bfbbb0f75c

[18:15] <jnthn> oops, it's very much dinner time

[18:15] <yoleaux> 17:48Z <Zoffix> jnthn: FYI: R#2195 https://github.com/rakudo/rakudo/issues/2195

[18:15] <synopsebot> R#2195 [open]: https://github.com/rakudo/rakudo/issues/2195 [⚠ blocker ⚠] False positive throwage of "flattening of other hash reprs NYI"

[18:15] <jnthn> bbl

[18:34] *** travis-ci joined
[18:34] *** p6bannerbot sets mode: +v travis-ci

[18:34] <travis-ci> MoarVM build errored. Jonathan Worthington 'Do dead instruction elim pass after usage setup

[18:34] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414185404 https://github.com/MoarVM/MoarVM/compare/210a4026f53c...bfbbb0f75c7f

[18:34] *** travis-ci left
[18:42] *** lizmat joined
[18:43] *** p6bannerbot sets mode: +v lizmat

[19:00] *** Guest42469 joined
[19:01] *** p6bannerbot sets mode: +v Guest42469

[19:02] *** Guest42469 left
[19:05] *** varesa12 joined
[19:05] *** p6bannerbot sets mode: +v varesa12

[19:06] *** varesa12 left
[19:27] *** cwre joined
[19:28] *** p6bannerbot sets mode: +v cwre

[19:28] *** cwre left
[19:31] *** Zombie23 joined
[19:31] *** Zombie23 left
[20:06] <dogbert17> jnthn: wrt to https://github.com/MoarVM/MoarVM/issues/937 the same problem shows up with every program, even ./perl6 -e ''

[20:09] <jnthn> Looks harmless, if noisy

[20:10] <dogbert17> ok, no worries then but nwc10 will scream bloody murder tomorrow :)

[20:11] <jnthn> Maybe, but he uses ASAN, and I'm not sure if that detects this particular kind of problem ;)

[20:12] <jnthn> hm, does it happen for NQP code ever?

[20:16] <Geth> ¦ MoarVM: efbc6c6389 | (Jonathan Worthington)++ | src/core/ext.c

[20:16] <Geth> ¦ MoarVM: Fix an uninitialized memory access

[20:16] <Geth> ¦ MoarVM:

[20:16] <Geth> ¦ MoarVM: It was relatively harmless, and only happened when validating frames

[20:16] <Geth> ¦ MoarVM: that used extops; this gives it an accurate value.

[20:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/efbc6c6389

[20:17] <dogbert17> ooh, now that was fast, jnthn++

[20:19] <dogbert17> can I ask another favor, what happens if you run     ./perl6 t/spec/S06-signature/introspection.rakudo.moar

[20:19] <dogbert17> I get a strange error just near the end - Cannot invoke null object

[20:20] <jnthn> hm, I get that too

[20:20] <jnthn> Strange, didn't on my work machine

[20:21] <diakopter> microcode-patched Intel CPU vs non- ?

[20:21] <jnthn> Probably just timing related

[20:21] <diakopter> :D

[20:21] * dogbert17 Ryzen here :)

[20:31] <dogbert17> seem to be the last commit you did before dinner, i.e. bfbbb0f75c7

[20:35] <timotimo> if moar could analyze lexicals better, it could remove the "assign 0 to the lexical" before the argument gets assigned

[20:35] <timotimo> this is talking about the Int candidate for ASSIGN-POS

[20:36] * timotimo looks at the int candidate instead

[20:37] *** travis-ci joined
[20:37] *** p6bannerbot sets mode: +v travis-ci

[20:37] <travis-ci> MoarVM build failed. Jonathan Worthington 'Fix an uninitialized memory access

[20:37] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414235385 https://github.com/MoarVM/MoarVM/compare/bfbbb0f75c7f...efbc6c6389d7

[20:37] *** travis-ci left
[20:38] <timotimo> 592 bytes big, 54 from the scalar-assign-no-whence-no-typecheck farme it's inlined

[20:38] *** lizmat_ joined
[20:39] *** p6bannerbot sets mode: +v lizmat_

[20:40] *** lizmat left
[20:41] <timotimo> maybe spesh should try to use getattr_o instead of getspeshslot + getattrs_o

[20:41] <timotimo> maybe "if it can find the string in the string heap and it's already deserialized"

[20:41] <timotimo> but that could be an expensive lookup, perhaps?

[20:45] <timotimo> the getattrs_o could be made better if we could discover facts from the guards

[20:45] <timotimo> but for that they would have to up the version of the register, or some other way to signal that what they are guarding against is only known to be true after the guard

[20:46] <jnthn> It should be able to turn it into that

[20:46] <timotimo> oh? well, it doesn't in this case :)

[20:47] <timotimo> it has 0 facts about the register it's using for the getattrs_o, i.e. operand number 2

[20:47] <jnthn> Yeah, I spotted that. Didn't figure out why yet.

[20:48] <timotimo> oh, did you also see it's "KnTyp" on one of the target registers of getspeshslot?

[20:48] <timotimo> like, only known type, not known value?

[20:48] <timotimo> that's also odd

[20:48] <dogbert17> another observation, t/spec/S17-procasync/stress.t suddenly behaves very strangely

[20:49] <timotimo> if it's gone through facts_discover, it must have known type *and* known value, unless the "obj" passed in is null

[20:57] <jnthn> What the heck? when I set spesh_limit etc. I get a spesh log full of junk?

[20:57] <jnthn> ^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^

[20:58] <jnthn> And nothing useful

[20:58] <timotimo> that sounds like multithraeding

[20:58] <timotimo> put a %d into the filename

[20:58] <timotimo> that can help

[20:58] <timotimo> not multithreading

[20:58] <timotimo> multiple processes

[20:58] <timotimo> like when precompilation happens

[21:01] <jnthn> huh, indeed

[21:02] <timotimo> ^@ is null

[21:02] <jnthn> Perhpaps the test shells out

[21:02] <jnthn> I do get 3 files

[21:03] <jnthn> ah, and only one thing has something in it

[21:03] <timotimo> only one reaches limit

[21:04] <jnthn> Right

[21:04] <jnthn> (That part is good, I odn't have to figure out which to look at :))

[21:04] <timotimo> holding cat with othen hand

[21:10] <timotimo> except for eliminating some "set"s and the getattrs_o thing that could have two less getspeshslot in front i don't see big opportunities for winning in bytecode size from spesh alone

[21:11] <timotimo> hm, but each set is 3 x 16 bytes, right? so 48

[21:11] <timotimo> i suppose that adds up rather quickly

[21:12] <timotimo> if we don't mind special-casing it everywhere in the whole codebase, we could have a set instruction that only works on the first 256 registers, but encodes both arguments in 16 bytes instead of 32 for both

[21:16] <diakopter> I think we considered that a while back

[21:16] *** timotimo left
[21:17] <diakopter> where'd e go

[21:19] <jnthn> OK, the introspection.t failure is deopt related, it seems

[21:34] *** timo2timo joined
[21:34] *** p6bannerbot sets mode: +v timo2timo

[21:34] <timo2timo> the shell host is a bit rebooty today it seems like

[21:34] <timo2timo> earlier today it was an update, no clue what it is this time

[21:35] <timo2timo> i mean we can also just deduct some bytes for every "set" instruction in the code

[21:43] <jnthn> oh, very darn clever

[21:43] <jnthn> So we have a bunch of deopt instructions

[21:44] <jnthn> Well, deopt points

[21:44] <jnthn> The deopt usage checker correctly considers them as deopt usages of the register that goes missing

[21:45] <jnthn> However, after optimization, none of them are left on guards or other potentially deopt instructions

[21:45] <jnthn> So it deletes them. All very good.

[21:45] <jnthn> Except that one of the invokes was a completely non-speculative inline

[21:45] <jnthn> And the inline deopts

[21:45] <jnthn> But we don't factor that in anywhere

[21:45] <jnthn> This was wrong before now, but all the surplus PHIs saved us

[21:46] <timo2timo> hah

[21:46] <jnthn> I think that may be relatively easy to fix

[21:46] *** lizmat_ is now known as lizmat

[21:49] <jnthn> I'd already been wanting the "does this inline have any deopt points" info anyway

[21:59] *** sam21 joined
[22:00] *** sam21 left
[22:00] *** Kaiepi left
[22:02] *** siniStar joined
[22:03] *** siniStar left
[22:08] *** timo2timo left
[22:09] *** lizmat left
[22:12] *** Kaiepi joined
[22:12] *** p6bannerbot sets mode: +v Kaiepi

[22:14] *** Turska-29 joined
[22:14] *** lizmat joined
[22:14] *** p6bannerbot sets mode: +v Turska-29

[22:15] *** Turska-29 left
[22:15] *** p6bannerbot sets mode: +v lizmat

[22:15] *** __idiot__ joined
[22:15] *** __idiot__ left
[22:23] *** mark-otaris joined
[22:24] *** mark-otaris is now known as Guest76862

[22:24] *** p6bannerbot sets mode: +v Guest76862

[22:24] *** Guest76862 left
[22:31] *** timo2timo joined
[22:31] *** MJ940 joined
[22:32] *** p6bannerbot sets mode: +v timo2timo

[22:32] *** p6bannerbot sets mode: +v MJ940

[22:32] *** MJ940 left
[22:35] <jnthn> Yay, seems I have a fix.

[22:37] <timo2timo> \o/

[22:44] <Geth> ¦ MoarVM: 4fc267b607 | (Jonathan Worthington)++ | 6 files

[22:44] <Geth> ¦ MoarVM: Account for inlines that may cause deopts

[22:44] <Geth> ¦ MoarVM:

[22:44] <Geth> ¦ MoarVM: It was possible for us to wrongly discard instructions based on them

[22:44] <Geth> ¦ MoarVM: not being needed for deopt when:

[22:44] <Geth> ¦ MoarVM: * There code being specialized did not need to use any of the deopt

[22:44] <Geth> ¦ MoarVM:   points between the definition and use of the SSA value

[22:44] <Geth> ¦ MoarVM: * An inline inserted between the two could cause deopt

[22:44] <Geth> ¦ MoarVM: Fix by using a deopt point at the point of the call as a "proxy" for

[22:44] <Geth> ¦ MoarVM: those deopts inside of the inline, when an inline has instructions that

[22:44] <Geth> ¦ MoarVM: may cause deopt.

[22:44] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4fc267b607

[22:53] *** timo joined
[22:53] *** p6bannerbot sets mode: +v timo

[22:53] *** timo is now known as timotimo

[22:55] <dogbert17> there's a tiny problem left but that should perhaps be left for later

[22:56] <dogbert17> running ./perl6-valgrind-m t/spec/S06-signature/introspection.rakudo.moar will expose it

[23:03] *** travis-ci joined
[23:03] *** p6bannerbot sets mode: +v travis-ci

[23:03] <travis-ci> MoarVM build failed. Jonathan Worthington 'Account for inlines that may cause deopts

[23:03] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414291605 https://github.com/MoarVM/MoarVM/compare/efbc6c6389d7...4fc267b607b9

[23:03] *** travis-ci left
[23:04] <timotimo> most important user-facing feature: invoking the profiler UI when a profile was already loaded before will now immediately forward you to the profiler ui

[23:04] <timotimo> now it'll have to load files specified on the commandline, too

[23:27] *** greppable6 joined
[23:28] *** p6bannerbot sets mode: +v greppable6

[23:35] *** obserd joined
[23:36] *** p6bannerbot sets mode: +v obserd

[23:37] *** obserd left
