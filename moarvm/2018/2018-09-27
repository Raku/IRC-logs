[00:08] *** ZzZombo_ joined
[00:08] *** p6bannerbot sets mode: +v ZzZombo_

[00:10] *** ZzZombo left
[00:10] *** ZzZombo_ is now known as ZzZombo

[00:15] *** lizmat left
[00:40] <timotimo> stagestats uses MVM_bigint_from_num

[00:40] <timotimo> most probably because literals in nqp are nums, and if you want to create a bigint, you can't just box_I, you have to fromnum_I

[00:41] <timotimo> that seems to be all the invocations for MVM_bigint_from_num in stage compilation

[00:49] <MasterDuke> ugh, i'd like to make progress on my default-nqp-to-int branch, but it's not easy

[00:50] <timotimo> yeah, i totally agree that it's hard

[00:54] <MasterDuke> changing topics, what do you think about my suggestion to make the parameter to --profile be the filename instead of the kind, and then change --profile-filename to --profile-kind?

[01:07] <timotimo> actually i started - long ago - on a branch that lets you put more parameters in the --profile argument

[01:07] <timotimo> i wanted that for the heap snapshot profiler so that it could be told to only take snapshots when there is a major collection

[01:08] <timotimo> since sometimes there are hundreds of minor collections in a row, and that leads to extremely big files

[01:09] <timotimo> would you say that should go into --profile-kind as well, then?

[01:09] <timotimo> i.e. switch them completely?

[01:16] *** fake_space_whale joined
[01:16] <MasterDuke> yeah, i'd say switch them

[01:17] *** p6bannerbot sets mode: +v fake_space_whale

[01:17] <MasterDuke> at least personally, i've created maybe 3 heap profiles ever

[01:17] <MasterDuke> and maybe 300 profiles that i had to use --profile-filename for

[01:18] <MasterDuke> not very huffmanized for my use

[01:20] *** avar left
[01:20] *** avar joined
[01:20] *** avar left
[01:20] *** avar joined
[01:20] *** p6bannerbot sets mode: +v avar

[01:21] *** p6bannerbot sets mode: +v avar

[01:22] <timotimo> that does make sense

[01:22] <timotimo> it'd be good to have a transition period where both styles are allowed

[01:25] <MasterDuke> you think there are that many people creating heap profiles?

[01:30] <timotimo> hm

[01:40] *** NikitaKonovalov2 joined
[01:41] *** p6bannerbot sets mode: +v NikitaKonovalov2

[01:43] *** NikitaKonovalov2 left
[02:01] *** mystica55512 joined
[02:01] *** p6bannerbot sets mode: +v mystica55512

[02:02] *** mystica55512 left
[02:06] *** optiz0r0 joined
[02:06] *** p6bannerbot sets mode: +v optiz0r0

[02:07] *** optiz0r0 left
[02:19] *** ZzZombo left
[02:37] *** \13k29 joined
[02:38] *** p6bannerbot sets mode: +v \13k29

[02:38] *** \13k29 left
[02:41] <timotimo> with an example like .words() where the default is Inf, spesh might be able to turn the "while $count < $limit" into essentially "loop"

[02:41] <timotimo> no, i mean "repeat"

[02:42] * timotimo goes to bed

[02:48] *** Guest93338 joined
[02:49] *** p6bannerbot sets mode: +v Guest93338

[02:49] *** Guest93338 left
[03:06] *** ZzZombo joined
[03:06] *** p6bannerbot sets mode: +v ZzZombo

[03:16] *** johnlage11 joined
[03:16] *** p6bannerbot sets mode: +v johnlage11

[03:21] *** johnlage11 left
[03:34] *** smooth1 joined
[03:35] *** p6bannerbot sets mode: +v smooth1

[03:36] *** smooth1 left
[03:43] *** Bink27 joined
[03:43] *** p6bannerbot sets mode: +v Bink27

[03:45] *** Bink27 left
[05:42] *** fake_space_whale left
[05:45] *** SirFunk_ joined
[05:46] *** p6bannerbot sets mode: +v SirFunk_

[05:50] *** SirFunk_ left
[06:05] *** domidumont joined
[06:06] *** p6bannerbot sets mode: +v domidumont

[06:07] *** domidumont1 joined
[06:08] *** p6bannerbot sets mode: +v domidumont1

[06:10] *** domidumont left
[06:17] *** domidumont1 left
[06:23] *** chrisdickinson13 joined
[06:23] *** fake_space_whale joined
[06:24] *** p6bannerbot sets mode: +v chrisdickinson13

[06:24] *** p6bannerbot sets mode: +v fake_space_whale

[06:26] *** chrisdickinson13 left
[06:29] *** patrickb joined
[06:29] *** p6bannerbot sets mode: +v patrickb

[06:34] *** patrickb left
[06:43] *** robertle joined
[06:44] *** p6bannerbot sets mode: +v robertle

[06:48] *** fake_space_whale left
[07:00] *** lizmat joined
[07:00] *** p6bannerbot sets mode: +v lizmat

[07:16] *** lizmat left
[07:16] *** domidumont joined
[07:17] *** p6bannerbot sets mode: +v domidumont

[07:38] *** patrickb joined
[07:38] *** p6bannerbot sets mode: +v patrickb

[07:48] *** ZzZombo_ joined
[07:48] *** p6bannerbot sets mode: +v ZzZombo_

[07:50] *** ZzZombo left
[07:50] *** ZzZombo_ is now known as ZzZombo

[07:59] *** robertle left
[08:01] *** robertle joined
[08:02] *** p6bannerbot sets mode: +v robertle

[08:08] *** m3point1428 joined
[08:08] *** m3point1428 left
[08:24] *** lizmat joined
[08:24] *** p6bannerbot sets mode: +v lizmat

[08:29] *** robertle left
[08:29] *** robertle joined
[08:30] *** p6bannerbot sets mode: +v robertle

[08:35] *** robertle left
[08:35] *** Milo-17 joined
[08:36] *** p6bannerbot sets mode: +v Milo-17

[08:37] *** robertle joined
[08:37] *** brrt joined
[08:38] *** p6bannerbot sets mode: +v robertle

[08:38] *** p6bannerbot sets mode: +v brrt

[08:39] *** Milo-17 left
[08:42] <brrt> \o

[08:43] <brrt> timotimo: I have a *very* similar branch I was working on :-)

[08:47] *** Sigyn joined
[08:47] *** Sigyn left
[08:50] *** Sigyn joined
[08:50] *** p6bannerbot sets mode: +v Sigyn

[08:51] *** Sigyn left
[08:56] *** Sigyn joined
[08:56] *** p6bannerbot sets mode: +v Sigyn

[08:59] <lizmat> Q: what *is* the difference between nqp::assign and nqp::p6assign?

[08:59] <brrt> (no idea)

[09:00] <lizmat> apparently, according to commit message, the p6 version is using a spesh plugin

[09:01] <lizmat> we have 4 cases of nqp::assign in core: I wonder if those should be changed as well ?

[09:04] <timotimo> don't we also have something better than assign + scalarfromdesc?

[09:06] *** blackbeard4201 joined
[09:06] <lizmat> I believe so: that piece of code hasn't been touched in 2 years

[09:06] <jnthn> nqp::p6assign uses the spesh plugin (on MoarVM, equivalent to assign otherwise)

[09:06] * brrt is about to remove the jit log file altogether

[09:06] *** p6bannerbot sets mode: +v blackbeard4201

[09:06] *** ozfalcon joined
[09:07] <jnthn> I think all cases can be updated, *but* as timotimo mentioned some cases have better options than a direct replacement

[09:07] *** blackbeard4201 left
[09:07] <lizmat> jnthn: so it is safe to just s/assign/p6assign/ ?

[09:07] *** p6bannerbot sets mode: +v ozfalcon

[09:07] <jnthn> Safe but it's worth looking at each one

[09:07] <lizmat> or maybe just rewrite it using = ?

[09:08] <jnthn> Because there's a scalarwithvalue op that combines creation and initialization and skips the whole handling of default value, because we know it'll never be read

[09:08] <jnthn> Which is a nice saving

[09:09] <lizmat> and if the descriptor is nqp::null ?

[09:09] <jnthn> Then assign will always fail?

[09:09] <lizmat> "nqp::assign(nqp::p6scalarfromdesc(nqp::null),iterable)"

[09:10] <lizmat> been sitting in the code for 2 years without any spectest fails  :-(

[09:10] <jnthn> Oh, right, that depends on using the default descriptor...I think I found a better way of handling that in most cases.

[09:10] <jnthn> Since it means a null check and conditional every time

[09:11] *** ozfalcon left
[09:11] <jnthn> Anyway, the reason I didn't just blanket change them is so they could be each carefully audited for the optimal change.

[09:11] <lizmat> right

[09:12] <lizmat> lemme see if I can do such an audit

[09:12] <jnthn> See in Actions.nqp for the various desugars available

[09:13] *** marxjohnson joined
[09:13] *** marxjohnson left
[09:13] <lizmat> I was looking at Array::ASSIGN-POS

[09:14] <jnthn> I'm very sure that's one I audited...

[09:15] <jnthn> Yes, looks like that's been carefully crafted indeed :)

[09:16] <jnthn> To be just under the inline size limit :)

[09:41] <Geth> ¦ MoarVM/jit-comment-on-spesh-log: 11 commits pushed by (Timo Paulssen)++, (Bart Wiegmans)++

[09:41] <Geth> ¦ MoarVM/jit-comment-on-spesh-log: review: https://github.com/MoarVM/MoarVM/compare/26386046b907^...02815677f827

[09:42] <timotimo> btw, in theory we could collect spesh logs for spec test runs and see if any frames switch between "can be inlined" and "cannot be inlined" and automatically report that

[09:45] <brrt> aye.

[09:46] <brrt> timotimo: I took your branch a bit further, there's no more jit log now; I wonder if we can get away with getting rid of the bytecode directory entirely

[09:53] <timotimo> how do you reckon?

[09:53] <brrt> well, I mean, i don't want to have to specify it

[09:54] <timotimo> so, always have it if the spesh log is turned on?

[09:54] <brrt> I want something like MVM_JIT_DUMP_BYTECODE=1 and have it dump the bytecode to /tmp

[09:54] <brrt> no

[09:54] <timotimo> ah

[09:54] <brrt> well, a subdirectory of /tmp

[09:54] <timotimo> would it go into /tmp/moarjit.PID/ or something?

[09:54] <brrt> I can us uv_os_tmpdir

[09:54] <brrt> something pretty much exactly like htat

[09:55] <brrt> anyway, lunch &

[09:55] *** shadowbane26 joined
[09:56] *** p6bannerbot sets mode: +v shadowbane26

[09:58] *** shadowbane26 left
[09:59] *** brrt left
[10:02] *** ZzZombo left
[10:03] *** definity20 joined
[10:03] *** definity20 left
[10:07] *** zack684918 joined
[10:08] *** p6bannerbot sets mode: +v zack684918

[10:11] *** zack684918 left
[10:13] *** regtools23 joined
[10:14] *** p6bannerbot sets mode: +v regtools23

[10:15] <lizmat> jnthn: I'm confused:  should this work or not:

[10:15] <lizmat> m: use nqp; my $a := nqp::p6bindattrinvres(nqp::create(Scalar),Scalar,q/$!value/,42); say $a; $a = 666; say $a

[10:15] <camelia> rakudo-moar ddb5f8fc4: OUTPUT: «42␤Cannot assign to a readonly variable or a value␤  in block <unit> at <tmp> line 1␤␤»

[10:15] <jnthn> No.

[10:15] <jnthn> Because no descriptor means readonly

[10:15] <lizmat> aha

[10:15] *** regtools23 left
[10:16] <lizmat> but, I don't have a descriptor there, so what should I put in the $!descriptor then ?

[10:16] <jnthn> That's what I was saying early. The scalarfromdesc op has to do a null check inside of its desugar to check if the descriptor provided is null, and if so then it uses the default one instead

[10:16] <jnthn> *earlier

[10:16] <lizmat> so I should still be using scalarfromdesc ?

[10:17] <jnthn> Well, you could, but perhaps better is to just obtain the default descriptor

[10:17] <lizmat> I'm looking at [foo], there is no Array, and no descriptor yet

[10:18] <jnthn> nqp::getcurhllsym('default_cont_spec') or some such

[10:18] <lizmat> ack

[10:20] <jnthn> Maybe shove a BEGIN before it so that at runtime you just have a QAST::WVal which is cheap :)

[10:20] *** lionel22 joined
[10:20] <lizmat> ah, I guess that can be done at some more places then

[10:21] *** p6bannerbot sets mode: +v lionel22

[10:25] *** lionel22 left
[10:28] <lizmat> afk for a few hours&

[10:30] <dogbert2> jnthn: will there be an 'opt of the day' ?

[10:36] *** pounard9 joined
[10:37] *** pounard9 left
[10:45] *** brrt joined
[10:46] *** p6bannerbot sets mode: +v brrt

[10:58] *** AlexDani` joined
[10:59] *** p6bannerbot sets mode: +v AlexDani`

[11:02] *** AlexDaniel left
[11:28] *** ZzZombo joined
[11:28] *** p6bannerbot sets mode: +v ZzZombo

[11:30] *** Alforz15 joined
[11:31] *** p6bannerbot sets mode: +v Alforz15

[11:31] *** Alforz15 left
[11:33] *** AlexDani` is now known as AlexDaniel

[11:34] *** lizmat left
[11:36] *** lifthrasiir5 joined
[11:37] *** p6bannerbot sets mode: +v lifthrasiir5

[11:37] *** lifthrasiir5 left
[11:52] *** avar left
[11:52] *** avar joined
[11:52] *** avar left
[11:52] *** avar joined
[11:52] *** p6bannerbot sets mode: +v avar

[11:53] *** p6bannerbot sets mode: +v avar

[12:04] *** meretrix23 joined
[12:05] *** p6bannerbot sets mode: +v meretrix23

[12:07] *** meretrix23 left
[12:07] *** avar left
[12:08] *** avar joined
[12:08] *** avar left
[12:08] *** avar joined
[12:08] *** p6bannerbot sets mode: +v avar

[12:08] *** p6bannerbot sets mode: +v avar

[12:13] *** tv4 joined
[12:14] *** p6bannerbot sets mode: +v tv4

[12:17] *** tv4 left
[12:26] *** copec19 joined
[12:26] *** copec19 left
[12:36] *** ljharb15 joined
[12:37] *** p6bannerbot sets mode: +v ljharb15

[12:41] *** ljharb15 left
[12:44] <brrt> oh, good news folks

[12:44] <brrt> I'm looking at the libuv test suite

[12:44] <brrt> I think we can actually call the synchronous FS files without a loop instance

[12:45] <brrt> because, tests/test-fs.c does that all the time

[12:45] <timotimo> that ought to also let us create more threads before the number of open files hits the limit

[12:45] <timotimo> right?

[12:45] <brrt> I'm not sure I follow

[12:45] <timotimo> creating an uv loop costs, i believe, two file handles

[12:45] <brrt> seriously?

[12:46] <timotimo> i'm not 100% sure

[12:49] <jnthn> I think timotimo is right

[12:50] <brrt> okay, that's good news actually

[12:51] <brrt> I checked, and we can call all the synchronous fs stuff without a uv loop

[12:51] <brrt> 'the tests do it so it must be OK'

[12:53] *** butth0le joined
[12:53] *** butth0le left
[13:05] *** Guest1161 joined
[13:06] *** p6bannerbot sets mode: +v Guest1161

[13:09] *** Guest1161 left
[13:21] <brrt> btw, samcv++ # nice post

[13:27] <jnthn> dogbert2: There may be an opt of the day. Currently looking into the sub-optimal handling I'm seeing with spesh of array assignment...

[13:28] <jnthn> And noticing I maybe misread...

[13:30] <jnthn> Yeah, I did; something's maybe still wrong but not what I thought.

[13:30] <jnthn> And ASSIGN-POS doesn't inline yet after all

[13:34] <dogbert2> is ASSIGN-POS too large?

[13:34] <jnthn> Yeah

[13:34] <jnthn> I'm wondering if I can split it

[13:35] <dogbert2> do you think it will be a big win if you can inline it?

[13:36] *** Zoffix joined
[13:36] *** p6bannerbot sets mode: +v Zoffix

[13:36] <Zoffix> I just got "MoarVM oops: Spesh: instruction box_i missing from define-use chain"

[13:36] <jnthn> Yes :)

[13:37] <jnthn> Zoffix: umm...congrats...

[13:37] <jnthn> Zoffix: Did you have the DU-chain checking mode turned on?

[13:37] <Zoffix> I've no idea what that is, so unless it's on by default, I'm gonna say no

[13:38] <jnthn> No, you'd have to have turned it on, but I just checked and that's the error that can be raised in normal operation.

[13:38] <Zoffix> It's with this piece of code, when trying to run it with --profile --profile-filename=out.html   https://gist.github.com/zoffixznet/c4fd06ab8723c36717eef96cfd2d28db

[13:38] <jnthn> Ah, it only happens when profiling?

[13:38] <Zoffix> Yeah

[13:38] * jnthn breathes a half sigh of relief :)

[13:38] <Zoffix> :D

[13:39] <jnthn> I think timotimo++ already encountered this and was looking at it...

[13:39] <Zoffix> Ah, ok

[13:40] <jnthn> Please could you make a ticket though, so we don't lose it?

[13:41] <Zoffix> yeah

[13:41] <jnthn> Thanks

[13:46] <Zoffix> M#971

[13:46] <synopsebot> M#971 [open]: https://github.com/MoarVM/MoarVM/issues/971 Profiling a code gives MoarVM oops: Spesh: instruction box_i missing from define-use chain

[13:46] *** Zoffix left
[13:51] *** Guest56510 joined
[13:52] *** p6bannerbot sets mode: +v Guest56510

[13:55] *** Guest56510 left
[14:02] *** avar left
[14:02] *** avar joined
[14:02] *** avar left
[14:02] *** avar joined
[14:02] *** p6bannerbot sets mode: +v avar

[14:03] *** p6bannerbot sets mode: +v avar

[14:09] *** maege- joined
[14:09] *** p6bannerbot sets mode: +v maege-

[14:10] *** Kaiepi left
[14:11] *** Kaiepi joined
[14:11] *** maege- left
[14:11] *** p6bannerbot sets mode: +v Kaiepi

[14:14] <Geth> ¦ MoarVM/jit-comment-on-spesh-log: fe7ea0c35f | (Bart Wiegmans)++ | 2 files

[14:14] <Geth> ¦ MoarVM/jit-comment-on-spesh-log: [JIT] Dump bytecode in /tmp

[14:14] <Geth> ¦ MoarVM/jit-comment-on-spesh-log:

[14:14] <Geth> ¦ MoarVM/jit-comment-on-spesh-log: No need to specify the exact bytecode directory, if we can put it in a

[14:14] <Geth> ¦ MoarVM/jit-comment-on-spesh-log: consistent place anyway.

[14:14] <Geth> ¦ MoarVM/jit-comment-on-spesh-log: review: https://github.com/MoarVM/MoarVM/commit/fe7ea0c35f

[14:27] *** Shaan727 joined
[14:28] *** p6bannerbot sets mode: +v Shaan727

[14:29] *** Shaan727 left
[14:35] *** MerlinTHP23 joined
[14:35] *** MerlinTHP23 left
[14:37] <Geth> ¦ MoarVM: a5dd7652d4 | (Bart Wiegmans)++ | 7 files

[14:37] <Geth> ¦ MoarVM: [threadcontext] Remove per-thread libuv loop object

[14:37] <Geth> ¦ MoarVM:

[14:37] <Geth> ¦ MoarVM: According to the libuv tests, we don't actually need a libuv loop

[14:37] <Geth> ¦ MoarVM: object for the synchronous FS operations. Which means that we can use

[14:37] <Geth> ¦ MoarVM: libuv for cross-platform portability, but we don't have to create and

[14:37] <Geth> ¦ MoarVM: maintain a libuv loop structure, other than the one for the actual

[14:37] <Geth> ¦ MoarVM: event loop.

[14:37] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a5dd7652d4

[14:40] *** bladdezz10 joined
[14:41] *** p6bannerbot sets mode: +v bladdezz10

[14:41] *** bladdezz10 left
[14:41] *** pck7 joined
[14:42] *** pck7 left
[14:43] <jnthn> brrt++

[14:43] <Geth> ¦ MoarVM: bdw++ created pull request #972: Remove JIT log file

[14:43] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/972

[14:45] <brrt> ok, dinner &

[14:45] *** brrt left
[14:56] <Geth> ¦ MoarVM: 1500090a38 | (Jonathan Worthington)++ | src/spesh/optimize.c

[14:56] <Geth> ¦ MoarVM: Optimize ifnonnull branches out

[14:56] <Geth> ¦ MoarVM:

[14:56] <Geth> ¦ MoarVM: If we can determine which way they would branch, then eliminate them.

[14:56] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1500090a38

[14:56] <Geth> ¦ MoarVM: 597ccb09e3 | (Jonathan Worthington)++ | 5 files

[14:56] <Geth> ¦ MoarVM: Pass on type tuple when inlining unspecialized

[14:56] <Geth> ¦ MoarVM:

[14:56] <Geth> ¦ MoarVM: In the case of a speculative inline where we have a stable type tuple,

[14:56] <Geth> ¦ MoarVM: this means that we can use the argument types inside the specialization

[14:56] <Geth> ¦ MoarVM: (previously we could only do that when we have all of the information

[14:56] <Geth> ¦ MoarVM: in facts).

[14:56] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/597ccb09e3

[15:04] *** fake_space_whale joined
[15:05] *** p6bannerbot sets mode: +v fake_space_whale

[15:06] *** Guest23564 joined
[15:07] *** p6bannerbot sets mode: +v Guest23564

[15:08] *** Guest23564 left
[15:18] *** Slartibart10 joined
[15:19] *** p6bannerbot sets mode: +v Slartibart10

[15:20] *** lizmat joined
[15:20] *** p6bannerbot sets mode: +v lizmat

[15:23] *** Slartibart10 left
[15:24] *** scode10 joined
[15:25] *** domidumont left
[15:25] *** scode10 left
[15:29] *** patrickb left
[15:35] <jnthn> m: say 2.051 / 955

[15:35] <camelia> rakudo-moar 4a968059c: OUTPUT: «0.0021476␤»

[15:35] <jnthn> m: say 2.051 / 0.955

[15:35] <camelia> rakudo-moar 4a968059c: OUTPUT: «2.147644␤»

[15:39] <lizmat> so what just got 2x as fast ?

[15:39] <yoleaux> 12:11Z <El_Che> lizmat: "Elizabeth Mattijsen has been programming for a living since 1978 in various (mostly now defunct) programming languages." <-- I think the "dead languages" introduction will be associated with Perl 5 and 6 by casual readers. I would drop that part.

[15:39] <yoleaux> 12:31Z <Zoffix> lizmat: would NQP benefit from the same BUILDALL gen you did in Rakudo? I imagine we create a ton of QAST objects. A plain `nqp::create(QAST::Op)` is 4.14x as fast as `QAST::Op.new`. I don't know if it could be genned when attributes are present, but it smells like there could be a nice win for compilation time (at least of Rakudo)

[15:40] <jnthn> lizmat: the following:

[15:40] <jnthn> for ^10_000 {

[15:40] <jnthn>     my @arr;

[15:40] <jnthn>     for ^1_000 {

[15:40] <jnthn>         @arr[$_] = 42;

[15:40] <jnthn>     }

[15:40] <jnthn> }

[15:40] <lizmat> cool

[15:41] <jnthn> Alas, Perl 5 is still 1.78x as fast at it On My Machine (yes, I know, it gets to not have Int allocations, but still, this is what the typical user would compare)

[15:42] <jnthn> So still some improvement to find yet :)

[15:42] <lizmat> yeah, but I've heard plenty of people say that even if Perl 6 would be 2x as slow as Perl 5, they would go for it

[15:42] <lizmat> so, in this benchmark, we're already there

[15:42] <jnthn> .oO( Yeah, but I want to win the benchmark :P :P )

[15:50] <Geth> ¦ MoarVM: 3ea4a81a21 | (Jonathan Worthington)++ | src/spesh/plan.c

[15:50] <Geth> ¦ MoarVM: Fix poor inlining due to wrong plan sorting

[15:50] <Geth> ¦ MoarVM:

[15:50] <Geth> ¦ MoarVM: We sorted the plan by stack depth, which is a decent approximation,

[15:50] <Geth> ¦ MoarVM: but sometimes we could have a situation where a caller and callee

[15:50] <Geth> ¦ MoarVM: planned for specialization would end up with the caller having a

[15:50] <Geth> ¦ MoarVM: greater maximum observed stack depth than the callee.

[15:50] <Geth> ¦ MoarVM:

[15:50] <Geth> ¦ MoarVM: If we detect such a case, give the callee one a boost, so that we'll

[15:50] <Geth> ¦ MoarVM: do them in a more sensible order, leading to more inlining chances.

[15:50] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3ea4a81a21

[15:50] <timotimo> i want moar to get a --developer mode where instead of MVM_SPESH_LOG i can just put MSL in the environment ...

[15:52] <lizmat> .tell El_Che adapted the "about me" to prevent possibly perceived association

[15:52] <yoleaux> lizmat: I'll pass your message to El_Che.

[15:53] *** aither19 joined
[15:53] *** p6bannerbot sets mode: +v aither19

[15:55] <lizmat> .ask Zoffix But then how would one set the attributes?  nqp::bindattr's everywhere ?

[15:55] <yoleaux> lizmat: I'll pass your message to Zoffix.

[15:56] *** Zoffix joined
[15:56] *** p6bannerbot sets mode: +v Zoffix

[15:56] <Zoffix> lizmat: no, the enduser code would not change.

[15:57] <timotimo> excuse me, but what was the context for this?

[15:57] <Zoffix> lizmat: basically yesterday I had `Foo.new: :42x, :70bar` that was way faster in Rakudo than it was in nqp and jnthn said it's cause nqp's BUILDALL is  not codegenned, so the natural thought is what if it were: would that benefit the compilation

[15:58] <Zoffix> timotimo: this: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-09-26#l690

[15:58] <Zoffix> and "<Zoffix> Aye, this version runs in 0.243s on HEAD: https://gist.github.com/zoffixznet/90c3c48e621cf77a180afb4d1a3e6c49 vs 4s for the other one"

[15:58] <Zoffix> m: say 4/.243

[15:58] <camelia> rakudo-moar 4a968059c: OUTPUT: «16.460905␤»

[15:59] *** aither19 left
[15:59] *** Cthulhon3 joined
[16:00] <lizmat> jnthn: is there a reason why you didn't do the same opt for the "int $pos" candidate ?

[16:00] *** p6bannerbot sets mode: +v Cthulhon3

[16:00] <lizmat> if not, I'll do that :-)

[16:01] *** thaller joined
[16:01] <jnthn> lizmat: um, no, just forgot :)

[16:02] *** p6bannerbot sets mode: +v thaller

[16:02] <lizmat> ok, will take care of it then  :-)

[16:02] *** thaller left
[16:02] <Zoffix> $ time ./nqp -e 'class Foo { has $!x; has $!y }; my int $x; while $x++ < 1_000_000 { Foo.new: x => 42, y => 70 }'

[16:02] <Zoffix> real 0m4.522s

[16:02] <Zoffix> $ time ./perl6 -e 'class Foo { has $.x; has $.y }; my int $x; while $x++ < 1_000_000 { Foo.new: x => 42, y => 70 }'

[16:02] <Zoffix> real 0m1.056s

[16:02] <lizmat> but after dinner&

[16:02] <Zoffix> lizmat: ^ that's what I meant.

[16:03] <Zoffix> Perl 6 is way faster than NQP, so my assumption is that we can make NQP at least the same speed as Perl 6

[16:03] <Zoffix> to improve compilation speed

[16:03] *** Cthulhon3 left
[16:04] <timotimo> does the buildplan executor show up in profiles, i wonder?

[16:04] <timotimo> or for that matter the constructors of QAST nodes

[16:04] <timotimo> well, those are already partially hand-optimized

[16:05] * Zoffix didn't try

[16:11] *** SicoWork2 joined
[16:12] *** p6bannerbot sets mode: +v SicoWork2

[16:15] *** Zoffix left
[16:16] *** SicoWork2 left
[16:18] *** robertle left
[16:33] *** yankcrime17 joined
[16:34] *** p6bannerbot sets mode: +v yankcrime17

[16:34] *** kyle6129 joined
[16:35] *** yankcrime17 left
[16:35] *** p6bannerbot sets mode: +v kyle6129

[16:39] *** kyle6129 left
[16:42] <Geth> ¦ MoarVM: 51610604c1 | (Jonathan Worthington)++ | src/spesh/log.c

[16:42] <Geth> ¦ MoarVM: Correct "should we log parameters" check

[16:42] <Geth> ¦ MoarVM:

[16:42] <Geth> ¦ MoarVM: Fixes a regression when the parameter logging was refactored recently.

[16:42] <Geth> ¦ MoarVM: We can't use the standard way to check at this point, because we're

[16:42] <Geth> ¦ MoarVM: doing it during invocation, and so haven't set everything up yet. All

[16:42] <Geth> ¦ MoarVM: we really need to check is that there's a log to write into.

[16:42] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/51610604c1

[17:13] *** domidumont joined
[17:14] *** p6bannerbot sets mode: +v domidumont

[17:35] *** syntacticNaCl15 joined
[17:35] *** p6bannerbot sets mode: +v syntacticNaCl15

[17:36] *** syntacticNaCl15 left
[17:53] *** gummipunkt8 joined
[17:54] *** gummipunkt8 left
[17:58] *** Kaiepi left
[17:58] *** Kaiepi joined
[17:59] *** p6bannerbot sets mode: +v Kaiepi

[18:04] *** azeem12 joined
[18:05] *** p6bannerbot sets mode: +v azeem12

[18:08] *** azeem12 left
[18:15] *** Nevolution217 joined
[18:15] *** p6bannerbot sets mode: +v Nevolution217

[18:16] *** faceman2 joined
[18:17] *** bengl1 joined
[18:17] *** p6bannerbot sets mode: +v faceman2

[18:18] *** p6bannerbot sets mode: +v bengl1

[18:18] *** Nevolution217 left
[18:18] *** faceman2 left
[18:21] *** bengl1 left
[18:21] *** lizmat left
[18:36] *** fake_space_whale left
[18:45] *** sankarshan0 joined
[18:46] *** p6bannerbot sets mode: +v sankarshan0

[18:47] *** sankarshan0 left
[18:49] *** fake_space_whale joined
[18:49] *** p6bannerbot sets mode: +v fake_space_whale

[18:59] *** Ven`` joined
[19:00] *** p6bannerbot sets mode: +v Ven``

[19:07] *** Te[u]K28 joined
[19:08] *** wlfshmn joined
[19:08] *** p6bannerbot sets mode: +v Te[u]K28

[19:08] *** p6bannerbot sets mode: +v wlfshmn

[19:10] *** lizmat joined
[19:10] *** p6bannerbot sets mode: +v lizmat

[19:10] *** Te[u]K28 left
[19:12] *** wlfshmn left
[19:14] *** zgrepc joined
[19:15] *** p6bannerbot sets mode: +v zgrepc

[19:16] *** Ven`` left
[19:16] *** zgrepc left
[19:21] *** domidumont left
[19:29] *** jitters_28 joined
[19:30] *** p6bannerbot sets mode: +v jitters_28

[19:31] *** McBadders0n joined
[19:32] *** p6bannerbot sets mode: +v McBadders0n

[19:33] *** jitters_28 left
[19:36] *** en7ropy12 joined
[19:36] *** p6bannerbot sets mode: +v en7ropy12

[19:37] *** McBadders0n left
[19:40] *** en7ropy12 left
[20:00] *** pmarreck5 joined
[20:00] *** p6bannerbot sets mode: +v pmarreck5

[20:02] *** pmarreck5 left
[20:11] *** fake_space_whale left
[20:18] *** KittyKatt28 joined
[20:19] *** KittyKatt28 left
[20:36] *** bmlzootown18 joined
[20:36] *** p6bannerbot sets mode: +v bmlzootown18

[20:38] *** bmlzootown18 left
[20:39] *** osa123 joined
[20:40] *** p6bannerbot sets mode: +v osa123

[20:45] *** osa123 left
[20:51] <timotimo> my blind working hypothesis for the define-use-chain problem in the profiler: perhaps we're deleting an instruction twice and that's what blows it up

[20:51] <timotimo> can't check immediately, though

[20:51] *** zanshin9 joined
[20:52] *** p6bannerbot sets mode: +v zanshin9

[20:52] *** zanshin9 left
[20:53] *** MasterDuke left
[21:06] *** meineerde23 joined
[21:06] *** p6bannerbot sets mode: +v meineerde23

[21:08] *** jplock4 joined
[21:09] *** Kaiepi left
[21:09] *** p6bannerbot sets mode: +v jplock4

[21:10] *** jplock4 left
[21:10] *** meineerde23 left
[21:18] *** MasterDuke joined
[21:18] *** p6bannerbot sets mode: +v MasterDuke

[21:18] *** MasterDuke left
[21:18] *** MasterDuke joined
[21:18] *** herbert.freenode.net sets mode: +v MasterDuke

[21:18] *** p6bannerbot sets mode: +v MasterDuke

[22:00] *** p0rt5 joined
[22:00] *** p6bannerbot sets mode: +v p0rt5

[22:02] *** p0rt5 left
[22:09] *** fake_space_whale joined
[22:10] *** p6bannerbot sets mode: +v fake_space_whale

[22:14] *** jfmcarreira5 joined
[22:15] *** p6bannerbot sets mode: +v jfmcarreira5

[22:17] *** jfmcarreira5 left
[22:44] *** niklasl3 joined
[22:45] *** p6bannerbot sets mode: +v niklasl3

[22:47] <timotimo> yeah, it's kind of being deleted twice

[22:47] <timotimo> delete ins  137 0x7f21f8099b98 prof_allocated

[22:47] <timotimo> delete ins  137 0x7f21f8099b58 box_i

[22:47] <timotimo> [...]

[22:47] <timotimo> delete ins  137 0x7f21f8099b58 box_i

[22:47] <timotimo> MoarVM oops: Spesh: instruction box_i missing from define-use chain

[22:49] *** evalable6 joined
[22:50] *** p6bannerbot sets mode: +v evalable6

[22:52] *** niklasl3 left
[22:52] <MasterDuke> timotimo: easy fix?

[22:53] <timotimo> i believe so

[22:53] <MasterDuke> nice

[22:56] *** jfe` joined
[22:56] <Geth> ¦ MoarVM: 67f85dc711 | (Timo Paulssen)++ | src/spesh/optimize.c

[22:56] <Geth> ¦ MoarVM: optimize_prof_allocated shouldn't try to mess with writers.

[22:56] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/67f85dc711

[22:56] <timotimo> this ought to do it.

[22:56] *** p6bannerbot sets mode: +v jfe`

[22:58] *** jfe` left
[23:11] *** jtickle joined
[23:11] *** p6bannerbot sets mode: +v jtickle

[23:12] *** jtickle left
[23:13] *** digdilem14 joined
[23:14] *** p6bannerbot sets mode: +v digdilem14

[23:14] *** typedrat11 joined
[23:14] *** digdilem14 left
[23:15] *** p6bannerbot sets mode: +v typedrat11

[23:16] *** pod joined
[23:16] *** thomasfedb4 joined
[23:16] *** typedrat11 left
[23:16] *** p6bannerbot sets mode: +v pod

[23:16] *** p6bannerbot sets mode: +v thomasfedb4

[23:20] *** pod left
[23:20] *** thomasfedb4 left
[23:30] *** Willd4 joined
[23:30] *** p6bannerbot sets mode: +v Willd4

[23:32] *** Willd4 left
[23:55] *** knittl28 joined
[23:56] *** p6bannerbot sets mode: +v knittl28

