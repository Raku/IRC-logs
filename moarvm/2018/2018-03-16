[00:15] *** releasable6 joined
[00:16] *** coverable6 joined
[01:09] *** bisectable6 joined
[01:17] *** Kaiepi joined
[01:31] *** Kaiepi joined
[02:57] *** ilbot3 joined
[04:12] *** avar joined
[05:33] <Kaiepi> how do i look at the assembly for a function in gdb?

[05:39] <Kaiepi> or rather what the assembly for a function looks like when i hit a breakpoint

[05:45] <Kaiepi> nvm, info registers was what i was looking for

[06:33] *** domidumont joined
[06:41] *** domidumont joined
[07:02] *** brrt joined
[07:24] *** robertle joined
[07:26] *** domidumont joined
[08:14] *** brrt joined
[08:26] <brrt> \o

[09:07] *** AlexDaniel joined
[09:12] *** unicodable6 joined
[10:03] *** harrow joined
[10:20] *** quotable6 joined
[10:20] *** greppable6 joined
[10:20] *** benchable6 joined
[10:20] *** nativecallable6 joined
[10:20] *** notable6 joined
[10:20] *** coverable6 joined
[10:20] *** bloatable6 joined
[10:20] *** evalable6 joined
[10:20] *** committable6 joined
[10:20] *** bisectable6 joined
[10:20] *** squashable6 joined
[10:20] *** reportable6 joined
[10:20] *** releasable6 joined
[10:20] *** unicodable6 joined
[10:20] *** shareable6 joined
[10:20] *** statisfiable6 joined
[11:15] *** AlexDaniel joined
[12:48] *** amoghbl1wi joined
[12:52] *** AlexDaniel joined
[12:54] <lizmat> jnthn: I have a question wrt to the HyperToIterator

[12:55] <lizmat> can .consume-batch be called from several threads at the same time or not?

[12:55] <lizmat> if not. couldn't we make $!batches a Queue rather than a Channel ?

[12:56] <lizmat> if so, don't we have some race conditions in HyperToIterator ?

[13:11] <jnthn> lizmat: No, it can't; see method !join-worker

[13:11] <jnthn> (Which sits in a loop and calls it)

[13:12] <lizmat> ok, so, why do we need a Channel then ?

[13:12] <lizmat> why not use a Queue ?

[13:12] <jnthn> A Channel is just a wrapper around a Queue

[13:13] <jnthn> Provided you mean something with the ConcBlockingQueue repr

[13:13] <jnthn> We need something doing concurrency control there though

[13:13] <lizmat> yes

[13:13] <lizmat> but doesn't the ConcBlockingQueue repr provide enough of those ?

[13:14] <jnthn> Yes. As I said, Channel is a concurrent blocking queue + error conveyance + end of stream conveyance

[13:14] <lizmat> it's just that Channel.receive is always high up in the --profile

[13:15] <lizmat> like 17% in the .hyper.is-prime example

[13:15] <lizmat> so I'm looking at reducing that  :-)

[13:15] <jnthn> It's a blocking operation thoguh

[13:15] <jnthn> Are you sure most of the time isn't it just waiting for there to be a first result in the queue?

[13:15] <jnthn> Or a result in the queue at all

[13:16] <jnthn> So that 17% isn't CPU time

[13:16] <jnthn> It's wallclock time

[13:16] <jnthn> afaik the profiler doesn't distinguish those at the moment

[13:16] <lizmat> ah...  hmmm

[13:16] <lizmat> ok

[13:17] <jnthn> Looking at the code though, I see it's using both the .close and the .fail functionality of Channel

[13:17] <jnthn> So you'd have to re-invent that

[13:17] <jnthn> At which point it's perhaps not much of a saving at all

[13:17] <lizmat> ok, fair enough  :-)

[13:18] <lizmat> baby steps  :-)

[13:18] <jnthn> Plus there's subtle ways to get those things wrong (or at least, I found subtle ways to get them wrong in the past :))

[13:19] <lizmat> will wait for --profile to show CPU before drawing more conclusions wrt Channel.receive

[13:30] <dogbert2_> jnthn: are you bug hunting?

[13:32] <jnthn> Yes

[13:32] <jnthn> A spesh one that produces a sudden method not found error

[13:32] <dogbert2_> sounds nasty

[13:33] <jnthn> releasable6: blockers

[13:33] <releasable6> jnthn, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Releasable

[13:33] <jnthn> releasable6: next

[13:33] <releasable6> jnthn, Next release in 1 day and ≈5 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[13:33] <releasable6> jnthn, Details: https://gist.github.com/d9e6806f25dd54205bf4b2cf7123f580

[13:33] <jnthn> Ah, it's not quite the same failure mode as that blocker, but perhaps same underlying cause

[13:34] <dogbert2_> there's a golf for one of them at least

[13:35] <jnthn> Yeah

[13:35] <jnthn> The one I'm hunting at the moment was tickled by some $dayjob code.

[13:35] <jnthn> It appears with all of inline, OSR, and JIT disabled

[13:35] <jnthn> So that's 3 big spesh subsystems that aren't to blame :)

[13:36] <dogbert2_> now that's interesting ... and odd

[13:36] * nine relaxes a little

[13:36] <dogbert2_> nine: with a beer ?

[13:36] <nine> cup of coffee :)

[13:37] <dogbert2_> a very good choice :)

[13:38] <dogbert2_> my $dayjob is moving to another location this weekend, I'm sitting in an almost empty room (landscape) atm

[14:05] *** domidumont joined
[14:13] *** committable6 joined
[14:32] <jnthn> aha

[14:38] <timotimo> better than sitting in an almost empty room (portrait)

[14:49] <jnthn> I think our type-var opt has issues

[14:52] <jnthn> So getlexperinvtype_o is rewritten into a constant if we specialized on the first argument (e.g. the invocant)

[14:56] <jnthn> I'm having trouble getting this down to a simple test case, but there's a case where the typevar scope is used in a closure

[14:57] <jnthn> Not in a top-levle method

[14:57] <jnthn> And of course, the first argument is *not* the invocant type then

[15:01] <jnthn> Having a pretty hard time getting this golfed, alas

[15:50] *** brrt joined
[15:52] <brrt> jnthn: note that the optimize_iffy has a potential double-removal-of-bb bug that timotimo++ uncovered

[15:53] <brrt> unfortunatley the branch that fixes it has another problem

[15:56] *** krunen_ joined
[15:57] *** releasable6 joined
[15:58] *** sivoais_ joined
[16:03] *** brrt joined
[16:06] <jnthn> brrt: Thanks, though I don't think that's related

[16:07] <jnthn> What I don't understand is that I can now clearly see it doing the wrong thing...but somehow my cut down example doesn't trigger the bug

[16:08] <jnthn> m: role R[:$a] { method !p() { ::?CLASS }; method m() { my $x; for "a".."z" -> $var { $x = self!p }; $x } }; class C1 does R[a => 1] { }; class C2 does R[a => 2] { }; say C1.m; say C2.m; C1.m for ^100000; say C1.m; say C2.m

[16:08] <camelia> rakudo-moar 51c4d4d89: OUTPUT: «(C1)␤(C2)␤(C1)␤(C2)␤»

[16:08] <jnthn> That sometimes does it

[16:09] <jnthn> m: role R[:$a] { method !p() { ::?CLASS }; method m() { my $x; for "a".."z" -> $var { $x = self!p }; $x } }; class C1 does R[a => 1] { }; class C2 does R[a => 2] { }; say C1.m; say C2.m; C1.m for ^100000; say C1.m; say C2.m

[16:09] <camelia> rakudo-moar 51c4d4d89: OUTPUT: «(C1)␤(C2)␤(C1)␤(C2)␤»

[16:09] <jnthn> m: role R[:$a] { method !p() { ::?CLASS }; method m() { my $x; for "a".."z" -> $var { $x = self!p }; $x } }; class C1 does R[a => 1] { }; class C2 does R[a => 2] { }; say C1.m; say C2.m; C1.m for ^100000; say C1.m; say C2.m

[16:09] <camelia> rakudo-moar 51c4d4d89: OUTPUT: «(C1)␤(C2)␤(C1)␤(C2)␤»

[16:09] <jnthn> Sometimes comes out as C1 in the last two outputs here

[16:09] <brrt> oh

[16:09] <brrt> (and, under MVM_SPESH_BLOCKING?)

[16:09] <jnthn> with that I can relace the 100000 with 10000

[16:10] <jnthn> Without it I still saw it

[16:11] <jnthn> m: role R[:$a] { method !p() { ::?CLASS }; method m() { my $x; for "a".."z" -> $var { $x = self!p }; $x } }; class C1 does R[a => 1] { }; class C2 does R[a => 2] { }; C1.m for ^5; C2.m for ^5; C1.m for ^100000; say C1.m; say C2.m

[16:11] <camelia> rakudo-moar 51c4d4d89: OUTPUT: «(C1)␤(C2)␤»

[16:12] *** brrt1 joined
[16:12] <jnthn> evalable6: MVM_SPESH_BLOCKING=1 role R[:$a] { method !p() { ::?CLASS }; method m() { my $x; for "a".."z" -> $var { $x = self!p }; $x } }; class C1 does R[a => 1] { }; class C2 does R[a => 2] { }; C1.m for ^5; C2.m for ^5; C1.m for ^100000; say C1.m; say C2.m

[16:12] <evalable6> jnthn, rakudo-moar 0194ef46a: OUTPUT: «(exit code 1) ===SORRY!=== Error while compiling /tmp/_HHDN6A6gZ␤Two ter…»

[16:12] <evalable6> jnthn, Full output: https://gist.github.com/4f27ba98f3ee089ac24a2fc8dd9950ef

[16:12] <jnthn> evalable6: role R[:$a] { method !p() { ::?CLASS }; method m() { my $x; for "a".."z" -> $var { $x = self!p }; $x } }; class C1 does R[a => 1] { }; class C2 does R[a => 2] { }; C1.m for ^5; C2.m for ^5; C1.m for ^100000; say C1.m; say C2.m

[16:12] <evalable6> jnthn, rakudo-moar 0194ef46a: OUTPUT: «(C1)␤(C1)␤»

[16:12] <jnthn> aha!

[16:13] <jnthn> Anyway, this isn't really a MoarVM bug

[16:13] *** brrt1 left
[16:13] <jnthn> It's Rakudo using :scope('typevar') where it shoulnd't

[16:13] *** brrt1 joined
[16:13] <brrt1> how so

[16:14] <jnthn> The contract of that is "this can be treated as a constant provided the first argument of the enclosing block is held constant"

[16:14] <japhb> jnthn++  # The difficult hunt

[16:15] <jnthn> Where the first argument is the invocant

[16:15] <jnthn> But we also generate it inside of closures

[16:15] <jnthn> Where the first argument is something completely different

[16:30] *** Kaiepi joined
[16:34] <jnthn> Seems I've a Rakudo patch that fixes it

[16:47] *** evalable6 joined
[16:54] *** AlexDaniel joined
[17:02] *** domidumont joined
[17:13] *** robertle joined
[17:14] <lizmat> hmmm, should I worry about this in a profile:  1197 deoptimizations , 1129 On Stack Replacements

[17:14] <lizmat> feels like it's doing OSR's repeatedly and then deoptimizing again?

[17:15] <jnthn> Depends how many iterations there are

[17:16] <jnthn> Deopts aren't automatically bad

[17:16] <jnthn> For example, if it sees a type is consistent 99% of the time, it'll generate fast-path code for that case, and deopt for the 1% case

[17:17] <jnthn> Which can come out ahead of not optimizing at all

[17:18] <lizmat> ah, ok, so no worries then

[17:18] <lizmat> so it won't need to generate the fast-path over and over again ?

[17:19] <lizmat> or the deopt over and over again ?

[17:19] <jnthn> It's not generating it each time, no

[17:19] <lizmat> o, good to know

[17:19] <jnthn> deopt just means jump from specialized or JITted to the basic interpreter, OSR is vice versa

[17:19] <jnthn> So in a loop it can do an iteration back in the interpreter, then fall back into the fast path again

[17:19] <lizmat> ack

[17:36] *** FROGGS joined
[17:48] *** Kaiepi joined
[17:54] <lizmat> jnthn: t/spec/S12-methods/defer-next.t is now failing consistently for me: test 26 (Cannot call method 'defined' on a null object)

[17:56] <jnthn> pull

[17:56] <jnthn> That was exactly the error before https://github.com/rakudo/rakudo/commit/e12e305a6b

[17:57] <lizmat> ack, indeed... ok missed one  :-)

[17:57] <jnthn> Phew :)

[17:57] <lizmat> afk for a few hours&

[18:38] *** Kaiepi joined
[18:48] *** committable6 joined
[19:26] *** domidumont joined
[19:27] *** domidumont joined
[20:19] <dogbert11> .tell jnthn I suspect that your latest fixes also took care of G #1442

[20:19] <yoleaux> dogbert11: I'll pass your message to jnthn.

[20:19] <dogbert11> G#1442

[20:19] <dogbert11> that would be https://github.com/rakudo/rakudo/issues/1442

[20:20] <FROGGS> R#1442

[20:20] <synopsebot> R#1442 [open]: https://github.com/rakudo/rakudo/issues/1442 Too few positionals passed; expected 2 arguments but got 1 (with HTTP::UserAgent)

[20:20] <dogbert11> gaaaaah, FROGGS++

[20:20] <FROGGS> :D

[20:22] <jnthn> dogbert11: Hm, that looks like an exact dupe of the issue i fixed

[20:22] <yoleaux> 20:19Z <dogbert11> jnthn: I suspect that your latest fixes also took care of G #1442

[20:23] <dogbert11> definitely looks like it

[20:28] <dogbert11> I don't think I can close it though

[20:50] *** Kaiepi joined
[20:58] <jnthn> dogbert11: did so :)

[21:14] *** Kaiepi joined
[21:22] *** releasable6 joined
[22:07] *** Kaiepi joined
[22:07] *** nwc10 joined
[22:24] <timotimo> samcv: should we get an official API to getting every uniprop that we offer?

[22:32] <samcv> timotimo: get the names of the properties?

[22:32] <yoleaux> 22:21Z <Zoffix> samcv: Is this stuff still current? I'm working on the list of 3rd-party packages to include on rakudo.org, but I notice the last commit was Nov 1 https://github.com/samcv/rakudo-appimage-module-test-automation

[22:32] <yoleaux> 22:24Z <Zoffix> samcv: OK, now I see it pushes builds automatically, but which versions are "star-stable" and "star-testing"? Is stable the last release and testing master? https://github.com/samcv/rakudo-appimage-module-test-automation/tree/gh-pages

[22:32] <samcv> .tell ZofBot no it isn't current

[22:32] <yoleaux> samcv: I'll pass your message to ZofBot.

[22:33] <timotimo> samcv: yeah, just a list of what you can look up for any given character

[22:34] <samcv> i mean it depends on the character?

[22:34] <samcv> or is just a list of all the things

[22:35] <timotimo> we could offer both, and for the second one you just pass Str instead of "a"

[22:47] *** MasterDuke joined
[22:50] *** releasable6 joined
[22:50] *** greppable6 joined
[22:50] *** bloatable6 joined
[22:50] *** bisectable6 joined
[22:50] *** coverable6 joined
[22:50] *** quotable6 joined
[22:50] *** nativecallable6 joined
[22:50] *** shareable6 joined
[22:50] *** benchable6 joined
[22:50] *** squashable6 joined
[22:50] *** statisfiable6 joined
[23:01] <samcv> timotimo: i will think about it. but it might be something that is a good idea

[23:04] <dogbert11> samcv: what's your opinion wrt RT #130483, is it fixed?

[23:05] <synopsebot> RT#130483 [new]: https://rt.perl.org/Ticket/Display.html?id=130483 [UNI] Regex Unicode properties check string values before checking bool properties

[23:05] <samcv> dogbert11: yeah i believe it's fixed. well yeah it's fixed i believe

[23:06] <dogbert11> samcv: thx for checking

[23:41] <timotimo> there was a stackoverflow question about this feature being missing
