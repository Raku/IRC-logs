[00:06] *** AlexDaniel left
[00:08] *** AlexDaniel joined
[00:08] *** p6bannerbot sets mode: +v AlexDaniel

[00:10] *** MasterDuke_ joined
[00:10] *** p6bannerbot sets mode: +v MasterDuke_

[00:13] *** MasterDuke left
[00:14] *** MasterDuke_ is now known as MasterDuke

[00:14] *** MasterDuke left
[00:14] *** MasterDuke joined
[00:14] *** herbert.freenode.net sets mode: +v MasterDuke

[00:14] *** p6bannerbot sets mode: +v MasterDuke

[00:15] *** lizmat left
[03:02] <Geth> Â¦ MoarVM: jstuder-gh++ created pull request #959: More exprjit templates (09/05/18)

[03:02] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/959

[04:22] *** MasterDuke left
[05:27] *** domidumont joined
[05:28] *** p6bannerbot sets mode: +v domidumont

[06:20] *** patrickb joined
[06:20] *** p6bannerbot sets mode: +v patrickb

[06:20] *** domidumont left
[06:20] *** brrt joined
[06:21] *** p6bannerbot sets mode: +v brrt

[07:25] *** domidumont joined
[07:26] *** p6bannerbot sets mode: +v domidumont

[07:47] *** lizmat joined
[07:48] *** p6bannerbot sets mode: +v lizmat

[07:56] <brrt> \o

[08:10] *** zakharyas joined
[08:11] *** p6bannerbot sets mode: +v zakharyas

[08:30] *** robertle joined
[08:31] *** p6bannerbot sets mode: +v robertle

[08:59] <brrt> apparently, if you're waiting on a signal, libuv lets another thread take your locks...

[09:07] *** zakharyas left
[09:07] *** zakharyas joined
[09:08] *** p6bannerbot sets mode: +v zakharyas

[09:13] <Geth> Â¦ MoarVM: 722f093997 | (Bart Wiegmans)++ | src/jit/x64/tiles.dasc

[09:13] <Geth> Â¦ MoarVM: [JIT] Add down-cast operations to cast_unsigned_load_addr

[09:13] <Geth> Â¦ MoarVM:

[09:13] <Geth> Â¦ MoarVM: Had added them to cast_unsigned, but not in the loading version.

[09:13] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/722f093997

[09:15] *** yoleaux left
[09:26] *** brrt left
[09:41] *** brrt joined
[09:42] *** p6bannerbot sets mode: +v brrt

[10:04] *** zakharyas left
[10:05] *** zakharyas joined
[10:05] *** p6bannerbot sets mode: +v zakharyas

[10:06] *** zakharyas left
[10:08] *** zakharyas joined
[10:09] *** p6bannerbot sets mode: +v zakharyas

[10:21] <Geth> Â¦ MoarVM/master: 9 commits pushed by (Jeremy Studer)++, (Bart Wiegmans)++

[10:21] <Geth> Â¦ MoarVM/master: f43ab19e07 | Add objprim{bits,unsigned} exprjit templates

[10:21] <Geth> Â¦ MoarVM/master: 9ed590410f | Add reprname exprjit template

[10:21] <Geth> Â¦ MoarVM/master: af6353d32f | Add bindlex_n* exprjit templates

[10:21] <Geth> Â¦ MoarVM/master: 3c10d2304b | Add getarg_* exprjit templates

[10:21] <Geth> Â¦ MoarVM/master: 9e0237ed10 | Add binddynlex exprjit template

[10:21] <Geth> Â¦ MoarVM/master: 398f073bae | Add param_sp and hasunipropc exprjit templates

[10:21] <Geth> Â¦ MoarVM/master: 985bf64bcc | Fix error in objprimunsigned template

[10:21] <Geth> Â¦ MoarVM/master: 5fcef041d6 | Merge remote-tracking branch 'jstuder/exprjit_09_05_18'

[10:21] <Geth> Â¦ MoarVM/master: 8c6088d3e5 | [JIT] Be more strict about what is or isn't a reference

[10:21] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/722f0939975e...8c6088d3e57a

[10:24] <brrt> bumpmaster, bump maybe?

[10:28] <lizmat> brrt: will do

[10:29] <brrt> (passes spectest for me)

[10:29] <brrt> thankyou lizmat

[10:37] <lizmat> looks like Zoffix beat me to it :-)

[10:37] <brrt> :-)

[10:37] <timotimo> since we already have the r script that can automate bumps for us, why don't we actually teach a bot to bump for us? maybe with a whitelist of users that are allowed to execute it.

[10:37] <timotimo> the r script also runs test, as i understand it.

[10:38] <brrt> that's actually a pretty good idea

[10:38] <brrt> I think I may be able to implement an unshift operation for ConcBlockingQueue

[10:38] <timotimo> oh, putting elements at the front, eh?

[10:38] <brrt> yes...

[10:38] <brrt> hmmm

[10:39] <timotimo> sounds like a terrible footgun. would it be concurrency-safe, too? i'm not sure how CBQ internally implements locking or whatever

[10:39] <brrt> yes, it would be concurrency safe, otherwise i wouldn't say it was possible :-)

[10:39] <timotimo> right, of course

[10:39] <brrt> it's really useful for head-of-line jumping?

[10:40] <brrt> in my case, I want to put the 'shutdown spesh thread' signal to move to the front of the queueu

[10:40] <timotimo> right, though it's racy in the way that you won't be able to tell where in the queue you've landed

[10:40] * lizmat makes mental note to look into the "r" script

[10:40] <timotimo> lizmat: that's zoffix' tool for internals development, it's neat.

[10:41] <brrt> well, for any N threads that applied unshfit on queue Q, at least one of them would find its item at the front, and all of them would find them before any concurrent pushed item

[10:42] <brrt> the only trick that I think is a bit tricky, is updating the tail

[10:42] <brrt> there's two locks and a condition variable

[10:42] <brrt>  a head lock and a tail lock

[10:43] <brrt> the shift/poll/peek operations all take a head lock

[10:43] <timotimo> and resizing takes both, or something?

[10:43] <brrt> the push operation takes a tail lock, and then optionally a head lock, when it finds the queue was empty

[10:43] <brrt> it's a linked list internally

[10:43] <brrt> single-linked

[10:43] <timotimo> ah, OK

[10:43] <timotimo> i could have known that just from the presence of a head and tail lock

[10:44] <timotimo> hm. would you call a linked list with a head and tail pointer a degenerate case of a skip list? :)

[10:44] <brrt> maybe, but it's not a good idea to assume that your conversation partners 'could have known' things :-)

[10:44] <brrt> I'm not sure, actually, because I'm not sure what is meant by a skip list

[10:44] <timotimo> if i liked coffee, this wouldn't have been so hard :P

[10:46] <brrt> anyway. I can implement unshift by taking the head lock first, and updating the head... but if I try to update the tail, I might find myself deadlocking if I lock the tail only then

[10:47] <timotimo> right

[10:47] <brrt> so. unshift needs to lock tail before locking head, just as push does

[10:55] *** zakharyas left
[11:10] *** yoleaux joined
[11:11] *** p6bannerbot sets mode: +v yoleaux

[11:12] *** Zoffix joined
[11:12] *** p6bannerbot sets mode: +v Zoffix

[11:12] <Zoffix> lizmat: it's not "r" script; it's "z" script :)

[11:12] <Zoffix> huggable: zscript

[11:12] <huggable> Zoffix, Helper script for Rakudo Perl 6 core development: https://github.com/zoffixznet/z

[11:12] <timotimo> damn, sorry about that :|

[11:12] <Zoffix> And to run bumps you just run `z bump` command. It pulls, makes commits, tests, and if tests are clean pushes, if not, asks you if you want to push

[11:13] <Zoffix> And it has a bunch of other commands, like for rebuilding nqp or moar or rakudo, etc

[11:13] *** Zoffix left
[11:16] <AlexDaniel> well, heh, I've been doing `z f && z bump m && z bump n && z bump push` all that time :D

[11:17] <AlexDaniel> which was effectively `z bump` to type because Ctrl-r

[11:17] <AlexDaniel> but still :)

[11:38] <Geth> Â¦ MoarVM/fork-safety: 95d851ffc3 | (Bart Wiegmans)++ | 5 files

[11:38] <Geth> Â¦ MoarVM/fork-safety: [Spesh] Tear down spesh worker in full_cleanup

[11:38] <Geth> Â¦ MoarVM/fork-safety:

[11:38] <Geth> Â¦ MoarVM/fork-safety: If the spesh worker is still active the GC can try to free a lock that

[11:38] <Geth> Â¦ MoarVM/fork-safety: is being held, which leads to an abort in libuv. Stopping the thread

[11:38] <Geth> Â¦ MoarVM/fork-safety: makes full-cleanup work (although it still leaks).

[11:38] <Geth> Â¦ MoarVM/fork-safety:

[11:38] <Geth> Â¦ MoarVM/fork-safety: Thread is stopped by signalling with VMNull. Ideally we'd unshift this

[11:38] <Geth> Â¦ MoarVM/fork-safety: to the front of the queue, but that is more complicated.

[11:39] <Geth> Â¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/commit/95d851ffc3

[11:39] <Geth> Â¦ MoarVM/fork-safety: 33c71bc3ef | (Bart Wiegmans)++ | 3 files

[11:39] <Geth> Â¦ MoarVM/fork-safety: [ConcBlockingQueue] Unmoving body

[11:39] <Geth> Â¦ MoarVM/fork-safety:

[11:39] <Geth> Â¦ MoarVM/fork-safety: The locks structure was already malloc'd, and I extended this to include

[11:39] <Geth> Â¦ MoarVM/fork-safety: the entire body. This prevents the GC from moving the body while we are

[11:39] <Geth> Â¦ MoarVM/fork-safety: blocked on acquiring a lock, simplifying the code, and has negligible

[11:39] <Geth> Â¦ MoarVM/fork-safety: cost.

[11:39] <Geth> Â¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/commit/33c71bc3ef

[11:39] <Geth> Â¦ MoarVM/fork-safety: 2dd82ec5c5 | (Bart Wiegmans)++ | 3 files

[11:39] <Geth> Â¦ MoarVM/fork-safety: [IO] Stop event loop thread

[11:39] <Geth> Â¦ MoarVM/fork-safety:

[11:39] <Geth> Â¦ MoarVM/fork-safety: Stop loop with uv_stop(uv_loop) and join the thread

[11:39] <Geth> Â¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/commit/2dd82ec5c5

[11:47] <brrt> ^ rebase

[11:51] *** ZzZombo left
[12:03] *** brrt left
[12:12] *** ZzZombo joined
[12:12] *** p6bannerbot sets mode: +v ZzZombo

[12:19] *** zakharyas joined
[12:19] *** p6bannerbot sets mode: +v zakharyas

[12:19] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/09/11/2018-37-a-detour-of-damian/

[12:45] *** brrt joined
[12:46] *** p6bannerbot sets mode: +v brrt

[13:02] <brrt> lizmat++

[13:04] *** zakharyas left
[13:28] *** zakharyas joined
[13:29] *** p6bannerbot sets mode: +v zakharyas

[13:40] *** brrt left
[14:53] *** undersightable6 left
[14:53] *** undersightable6 joined
[14:54] *** p6bannerbot sets mode: +v undersightable6

[15:12] *** lizmat left
[15:13] *** lizmat joined
[15:14] *** p6bannerbot sets mode: +v lizmat

[15:25] *** Voldenet joined
[15:25] *** Voldenet left
[15:25] *** Voldenet joined
[15:25] *** p6bannerbot sets mode: +v Voldenet

[15:26] *** domidumont left
[15:26] *** p6bannerbot sets mode: +v Voldenet

[15:30] *** patrickb left
[15:53] *** Voldenet left
[15:53] *** Voldenet joined
[15:53] *** Voldenet left
[15:53] *** Voldenet joined
[15:53] *** p6bannerbot sets mode: +v Voldenet

[15:54] *** p6bannerbot sets mode: +v Voldenet

[16:02] *** brrt joined
[16:03] *** p6bannerbot sets mode: +v brrt

[16:05] <Geth> Â¦ MoarVM/fork-safety: 6f804c0708 | (Bart Wiegmans)++ | 2 files

[16:05] <Geth> Â¦ MoarVM/fork-safety: [ConcBlockingQueue] Implement unshift

[16:05] <Geth> Â¦ MoarVM/fork-safety:

[16:05] <Geth> Â¦ MoarVM/fork-safety: Enable queue users to 'jump the line' and make sure that their item is

[16:05] <Geth> Â¦ MoarVM/fork-safety: delivered to the front of the queue. This has less concurrency than

[16:05] <Geth> Â¦ MoarVM/fork-safety: the push/shift pair, because it needs to lock both the head and tail

[16:05] <Geth> Â¦ MoarVM/fork-safety: locks. It should rarely be useful.

[16:05] <Geth> Â¦ MoarVM/fork-safety:

[16:05] <Geth> Â¦ MoarVM/fork-safety: The motivating example in which it is, is shutting down the spesh

[16:05] <Geth> Â¦ MoarVM/fork-safety: worker thread, because it means we do not have to wait until the spesh

[16:05] <Geth> Â¦ MoarVM/fork-safety: thread has processed (now useless) work.

[16:05] <Geth> Â¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/commit/6f804c0708

[17:43] *** colomon left
[17:48] *** brrt left
[17:50] *** zakharyas left
[19:00] *** ggoebel_ left
[19:14] *** ggoebel_ joined
[19:15] *** p6bannerbot sets mode: +v ggoebel_

[20:12] *** ggoebel_ left
[20:27] *** ggoebel_ joined
[20:28] *** p6bannerbot sets mode: +v ggoebel_

[23:11] *** lizmat left
