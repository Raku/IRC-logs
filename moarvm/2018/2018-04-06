[00:55] *** AlexDaniel joined
[01:58] *** ilbot3 joined
[03:26] *** AlexDaniel joined
[04:10] *** releasable6 joined
[04:10] *** undersightable6 joined
[04:10] *** shareable6 joined
[04:12] *** lizmat joined
[04:38] *** Kaiepi joined
[05:25] *** AlexDaniel joined
[06:00] *** domidumont joined
[06:07] *** domidumont joined
[06:34] *** robertle joined
[06:51] *** domidumont joined
[06:59] *** brrt joined
[07:11] *** live_the_dream joined
[07:13] *** lizmat joined
[07:26] *** lizmat joined
[07:53] <brrt> good *

[08:11] *** zakharyas joined
[08:23] *** zakharyas joined
[08:52] <timotimo> hey brrt

[08:53] <brrt> hey timotimo

[08:53] <jnthn> o/ all

[08:53] <timotimo> ohai jnthn

[08:54] <timotimo> i was a bit late today, but liz spoke a bit longer so i got to see wendy's "the changing image of perl" talk, which i enjoyed

[08:54] <jnthn> ah, cool

[08:54] <jnthn> We made breakfast and I'm currently hiding away ahead of my talk :)

[08:54] <jnthn> I actually slept ok last night so feel a tad better today

[08:54] <timotimo> and i'm considering just giving a second lightning talk today, this time showing off a program that attaches to itself via the debugger

[08:55] <timotimo> that's good!

[08:55] <brrt> ohai jnthn

[08:56] <jnthn> hi brrt

[08:58] <timotimo> i don't yet have an idea what the program should actually do with the debugging interface

[08:59] <timotimo> i mean, i can't come up with a sensible use for this, but this is really more of a "it's possible so why not do it" kind of thing

[09:00] <brrt> what debuggging interface is that?

[09:00] <timotimo> the one jnthn just recently unveiled on his blog :)

[09:00] <brrt> If i have time somewhere today, I want to introduce the patches to limit spesh log noisyness to a frame-of-interest

[09:00] <timotimo> you attach to moarvm with a tcp socket that speaks a simple messagepack based protocol

[09:01] <brrt> oh, that one :-)

[09:01] <brrt> okay, which program then :-)

[09:01] <brrt> (y'know what we ought to have, a source language server for perl6)

[09:01] <timotimo> i think i'll start by attaching the debugger to another debugger session

[09:03] <timotimo> and then in the next step forego the debugger itself and just attach a program to itself using the library

[09:03] <jnthn> timotimo: One other thing you could do is show how to build some other tool using the library

[09:03] <jnthn> Like a "count how many times X is called" or something

[09:04] <timotimo> oh

[09:04] <timotimo> yeah, that'd be simple

[09:05] <jnthn> Well, it's nice in that it shows people that we have an API for doing such things. :)

[09:05] <jnthn> And you could then as a joke at the end show how that debugger-using tool can itself be debugged :)

[09:32] * jnthn wanders to the venue

[09:41] *** lizmat joined
[10:05] *** lizmat joined
[10:09] *** zakharyas joined
[10:21] *** AlexDaniel joined
[10:50] *** lizmat joined
[12:02] *** lizmat joined
[12:48] *** zakharyas joined
[12:59] *** zakharyas joined
[13:04] *** domidumont joined
[14:19] <Geth> Â¦ MoarVM: d44fa8941e | gerd++ (committed by Timo Paulssen) | src/core/validation.c

[14:19] <Geth> Â¦ MoarVM: Fix loading bytecode on big endian systems

[14:19] <Geth> Â¦ MoarVM:

[14:19] <Geth> Â¦ MoarVM: We used to check the value before it got endian-switched

[14:19] <Geth> Â¦ MoarVM: by validate_operand. Move the check after the switch and

[14:19] <Geth> Â¦ MoarVM: fix the offset to match.

[14:19] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d44fa8941e

[14:19] <timotimo> gerd++ a couple of times

[14:30] <robertle> timotimo: do you think the symptoms of the bug that fixes would be consistent, or would that only manifest every now and then?

[14:34] *** lizmat joined
[14:38] *** live_the_dream joined
[14:38] *** travis-ci joined
[14:38] <travis-ci> MoarVM build passed. gerd 'Fix loading bytecode on big endian systems

[14:38] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/363132005 https://github.com/MoarVM/MoarVM/compare/d115bf720f3a...d44fa8941e62

[14:38] *** travis-ci left
[15:22] *** zakharyas joined
[15:23] *** zakharyas joined
[15:56] *** brrt joined
[16:05] <timotimo> .tell robertle do you mean the endian swap bug? that pretty much manifests as a crash very early in the nqp build and 100% consistent

[16:05] <yoleaux> timotimo: I'll pass your message to robertle.

[16:12] *** zakharyas joined
[16:16] *** zakharyas joined
[16:17] *** robertle joined
[16:25] <timotimo> jnthn: ping? :)

[16:56] *** AlexDaniel joined
[17:05] *** zakharyas joined
[17:24] <dogbert17> brrt: you there?

[17:26] <dogbert17> .tell brrt please take a look at https://github.com/MoarVM/MoarVM/issues/837 if you have a minute

[17:26] <yoleaux> dogbert17: I'll pass your message to brrt.

[17:30] <nwc10> good *, #moarvm

[17:30] <nwc10> I've not built with the FSA debug enabled for a while

[17:30] <nwc10> turns out that it's making ASAN quite exited: http://paste.scsys.co.uk/576714

[17:31] <nwc10> I have no idea if this is a bug in the DEBUG, or a real bug that it's exposing

[17:31] <nwc10> and don't have time to dig further as the flight will start boarding "RSN"

[17:35] *** domidumont joined
[19:35] *** brrt joined
[19:35] *** zakharyas joined
[19:37] <brrt> .

[19:37] <yoleaux> 17:26Z <dogbert17> brrt: please take a look at https://github.com/MoarVM/MoarVM/issues/837 if you have a minute

[19:38] *** zakharyas joined
[19:39] <brrt> yeah, seen it, not able to replicate it yet

[19:40] <brrt> there's also the CSV issue

[19:52] <brrt> it's odd, and flappy

[19:52] <brrt> the CSV issue is not, fortunatley

[19:55] <brrt> .ask samcv if that issue is more frequent with larger files

[19:55] <yoleaux> brrt: I'll pass your message to samcv.

[19:55] <samcv> brrt: what system are you on?

[19:55] <yoleaux> 19:55Z <brrt> samcv: if that issue is more frequent with larger files

[19:56] <brrt> fedora linux, recent everything, x86-64

[19:56] <samcv> i can get it to happen about 1/3 tries

[19:58] <brrt> hmm, 1/20 for me, at best

[19:58] <samcv> maybe 1/5

[19:58] <brrt> are you using clang?

[19:58] <samcv> putting the code in a loop doesn't make it happen faster

[19:58] <brrt> hmmpf

[19:58] <samcv> uh i think i'm using clang. but i tried with gcc and it happens too

[19:59] <brrt> that's the worst case scenario really

[19:59] <samcv> though removing code from it causes it to happen much less often

[19:59] <samcv> i tried to golf it

[20:00] <samcv> though actually let me try it again maybe

[20:03] <brrt> it would be very helpful

[20:03] <samcv> it seems the split and join are important

[20:04] <samcv> even if there's nothing actually in the array, if i take the split out or the join out it stops the error

[20:04] <samcv> will work on it a bit and let you know what i find

[20:04] <brrt> tux's CSV segv has been with us for some time at least

[20:06] <brrt> ... bisecting moarvm is fruitless

[20:07] <samcv> $file.IO.lines does it about 8x more often than $file.IO.slurp.lines

[20:07] <brrt> ok, that leaves us with analyzing the thing from first principles

[20:07] <brrt> hmmm

[20:07] <brrt> oh, that's the variant i have

[20:09] <samcv> dunno if this means anything, but if instead sc_find_object (i think is the name) returns NULL instead of throwing, the script works fine

[20:10] <brrt> oh

[20:10] <brrt> hmmm

[20:10] <brrt> shit

[20:11] <brrt> if you only set MVM_JIT_DISABLE=1, how does it fare then?

[20:11] <brrt> and with only MVM_SPESH_INLINE_DISABLE=1

[20:11] <samcv> jit disable it doesn't throw

[20:11] <samcv> inline disable it's fine

[20:15] <samcv> if i use nqp::split instead of split it doesn't throw

[20:16] <samcv> though i mean the problem is in resolving something in CORE.setting so i guess that makes sense

[20:18] <brrt> so, i can't parse the above completely accurately;

[20:18] <brrt> MVM_JIT_DISABLE - works, or breaks?

[20:19] <samcv> MVM_JIT_DISABLE causes it to work fine

[20:19] <brrt> MVM_SPESH_INLINE_DISABLE=1, works, or breaks?

[20:19] <brrt> damn

[20:19] <samcv> works

[20:19] <brrt> hmmm

[20:19] <samcv> but without any flags it breaks

[20:19] <brrt> yeah

[20:19] <brrt> i know enough, i think

[20:19] <brrt> well, i know more

[20:20] <samcv> dunno if relevant but if running with asan, it has no leaks most of the time. but then will have a leak in spesh

[20:20] <samcv> about as often as it normally fails

[20:20] <samcv> that could be important?

[20:35] <brrt> no, that's not important

[20:36] <brrt> if the spesh worker thread is running, it will be shutdown, and whatever it was holding on to will be considered a leak by asan

[20:36] <brrt> it's a known issue

[20:38] <brrt> anyway, i'm off to bed now

[20:41] *** Kaiepi joined
[22:05] <timotimo> .tell brrt don't worry about the "potential version skew detected" bug, it's entirely my fault and there'll be a fantastic patch that'll make everything nicer tomorrow or so

[22:05] <yoleaux> timotimo: I'll pass your message to brrt.

[22:06] <samcv> timotimo: you figured it out?

[22:08] <timotimo> no, jnthn came up with a way that lets us get rid fo the whole situation entirely

[22:08] <timotimo> while at the same time keeping more stuff unserialized

[22:08] <samcv> oh nice!

[22:10] <timotimo> i.e. not only wvals, but also strings, callsites, and code refs

[22:10] <timotimo> not sure how often this will actually trigger, but it's also cleaner in general
