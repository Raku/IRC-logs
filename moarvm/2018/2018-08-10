[00:09] <timotimo> the profiler now links routines that have a SETTING:: path to github, including the line number

[00:14] <MasterDuke> !! nice !!

[00:14] <timotimo> MasterDuke: how do you feel about doing a test-ride before i make this Actually Public????

[00:14] <timotimo> oh damn it, i thought i made utf8 work properly

[00:14] <timo2timo> üöä

[00:14] <timotimo> nope, only question marks

[00:18] <MasterDuke> heh

[00:18] <MasterDuke> and sure

[00:18] <timotimo> are you on bitbucket?

[00:22] <MasterDuke> i doubt it

[00:23] <timotimo> https://www.sharedrop.io/rooms/56e33c31-51a0-4793-a5b0-905df0b8d0a4

[00:24] <timotimo> wait, is that you? :P

[00:24] <MasterDuke> i think so, you shared something for about 1s

[00:24] <MasterDuke> but i didn't have time to click it

[00:24] <timotimo> OK

[00:25] <timotimo> i was worried maybe some foreign secret agent wanted to steal the data

[00:25] <MasterDuke> happens all the time

[00:25] <MasterDuke> a very reasonable concern

[00:26] <timotimo> git clone -b master /home/me/tmp/file.bundle moarperf

[00:26] <timotimo> <- did not yet know you could actually just clone from a gitbundle

[00:27] <timotimo> you'll have to "npm run build" (which will set up a change watcher, bu you can just ctrl-c it later)

[00:27] <timotimo> and then "cro run"

[00:30] <MasterDuke> hm, do i install webpack with npm?

[00:30] <timotimo> oh

[00:31] <MasterDuke> or my os package manager?

[00:31] <timotimo> does it install all you need when you just "npm install" in the folder?

[00:32] <MasterDuke> seems like

[00:32] <timotimo> cool, that should do it, then

[00:33] <timotimo> oh

[00:33] <timotimo> everything on the "welcome screen" is doing nothing at all

[00:33] <timotimo> except the file input and "load file" button

[00:33] <timotimo> i should probably remove those for the first public release, so people don't get horribly confused when nothing does anything

[00:38] <MasterDuke> hm, where is the 'cro' binary/shell script/whatever?

[00:42] <timotimo> snstall all the cro modules

[00:42] <timotimo> except zeromq

[00:42] <timotimo> also the moarvm heapanalyzer

[00:47] <MasterDuke> man, installing all these dependencies is not a fast process

[00:47] <MasterDuke> or course i'm also using 2018.06 for this, so i don't have all the recent performance increases

[01:02] *** Kaiepi left
[01:02] *** Kaiepi joined
[01:02] <MasterDuke> huh, none of those actually put a 'cro' in my path

[01:03] <timotimo> it's not actually necessary to "cro run" it

[01:03] *** p6bannerbot sets mode: +v Kaiepi

[01:03] <timotimo> you can also set MOARPERF_HOST=localhost MOARPERF_PORT=20000 perl6 service.p6

[01:03] <timotimo> did you install the "cro" package with lowercase c?

[01:05] <MasterDuke> well, i used what arch linux packages are available

[01:05] <timotimo> oh

[01:05] <timotimo> didn't know about those

[01:06] <MasterDuke> Could not find Routes at line 5 in:

[01:06] <timotimo> oh, -I lib

[01:15] <timotimo> i hope you're not writing because you're enjoying it so much %)

[01:24] *** MetaNova29 joined
[01:25] <timotimo> now i'% a little worried

[01:25] *** p6bannerbot sets mode: +v MetaNova29

[01:29] *** MetaNova29 left
[01:30] <MasterDuke> got distracted

[01:33] <timotimo> it really needs a simple way to cut down the size of some of these tables %)

[01:34] *** ovrstorm0 joined
[01:34] *** ovrstorm0 left
[01:38] <MasterDuke> ugh, DBIish doesn't want to install because NativeHelper::Blob isn't installed

[01:38] <MasterDuke> and there's no package for it

[01:38] <timotimo> oh, huh?

[01:46] <timotimo> anyway, i'm going to bed now. if it tells you that "routine with id ??? doesn't seem to exist", just switch to "routines" and click the "get routine overview" button %)

[01:46] <MasterDuke> ok

[01:46] <timotimo> maybe you're lucky and the sqlite dbiish part doesn't actually use NativeHelpers::Blob?

[01:46] <timotimo> and you can just monkeypatch it out?

[01:46] <timotimo> :\

[01:47] *** timo2timo left
[02:18] *** clarjon1 joined
[02:18] *** clarjon1 left
[02:36] <MasterDuke> timotimo: ⚠ moarperf Type check failed in binding to parameter '$filename'; expected Str but got Any (Any)

[02:37] <MasterDuke> fwiw, that was just using `cro run`

[02:40] *** davidfg48 joined
[02:40] *** davidfg48 left
[03:25] *** Roedy17 joined
[03:26] *** p6bannerbot sets mode: +v Roedy17

[03:26] *** Roedy17 left
[03:37] *** lizmat left
[03:41] *** tallguy4 joined
[03:42] *** p6bannerbot sets mode: +v tallguy4

[03:42] *** tallguy4 left
[03:44] *** wook_ joined
[03:45] *** wook_ left
[04:22] *** lizmat joined
[04:23] *** p6bannerbot sets mode: +v lizmat

[05:36] *** Aleszandro joined
[05:36] *** Aleszandro left
[05:52] *** lucy_ joined
[05:52] *** p6bannerbot sets mode: +v lucy_

[05:53] *** lucy_ left
[06:26] *** robertle joined
[06:27] *** p6bannerbot sets mode: +v robertle

[06:31] *** rkta joined
[06:31] *** rkta left
[07:02] *** hexa-9 joined
[07:02] *** hexa-9 left
[07:07] *** metax joined
[07:08] *** p6bannerbot sets mode: +v metax

[07:08] *** metax left
[07:16] *** ProClifo joined
[07:16] *** ProClifo left
[07:25] *** Guest14615 joined
[07:25] *** Guest14615 left
[08:04] <timotimo> MasterDuke:

[08:04] <timotimo> -sub routes(HeapAnalyzerWeb $model, ProfilerWeb $profiler, Str $filename?) is export {

[08:04] <timotimo> +sub routes(HeapAnalyzerWeb $model, ProfilerWeb $profiler, $filename?) is export {

[08:18] *** zakharyas joined
[08:19] *** p6bannerbot sets mode: +v zakharyas

[08:47] *** pokk17 joined
[08:48] *** pokk17 left
[09:52] *** patrickz joined
[09:52] *** p6bannerbot sets mode: +v patrickz

[10:05] *** abraxis joined
[10:05] *** abraxis is now known as Guest39230

[10:06] *** p6bannerbot sets mode: +v Guest39230

[10:07] *** Guest39230 left
[10:22] <jnthn> I guess we're about at the point where we need to figure out guards and SSA versioning

[10:22] <jnthn> So that the post-guarded thing has a new version

[10:23] <timotimo> yeah, sounds good to me

[10:23] <jnthn> The easiest way is to have all the guard instructions have a w(obj) where they "write" the guarded value (in fact they can do absolutely nothing since it'll be the same real register)

[10:24] <timotimo> i only see two methods of making that work, and i like neither; give the guard ops one write and one read parameter, or handle them just like inc and dec

[10:24] <jnthn> Right, like inc/dec is the other way

[10:24] *** perl6nopath joined
[10:24] *** p6bannerbot sets mode: +v perl6nopath

[10:24] <jnthn> I don't like either of them too...

[10:25] <timotimo> another is to have them act a little bit like PHI nodes, i.e. build fake info structs for all those ops

[10:25] <timotimo> so they only have the extra argument during spesh

[10:25] <jnthn> That feels...icky, but yeah, it's also an option

[10:25] *** perl6nopath left
[10:25] <timotimo> that way we'd at least not have to duplicate the ops in the oplist to have both one- and two-arg versions

[10:27] <jnthn> I guess the other thing I worry a bit about is if some other opt goes and does a tree rewrite that changes the "input" arg to the guard, which would mean the input and output versions differ

[10:27] <jnthn> uh, regsisters differ, even

[10:27] <timotimo> ouch

[10:27] <timotimo> that would be bad, yeah

[10:27] <jnthn> Maybe we should just swallow the cost of making them all have a w(obj)

[10:28] <timotimo> if we jit the result most of the time, it's not such a big hit

[10:28] <jnthn> And in the interp honor the write

[10:28] <jnthn> And in the JIT, spot that it's a no-op during code-gen so not do it

[10:28] <timotimo> another option that comes to mind is split BBs after every guard and insert PHI nodes, but that also sounds unclean and icky

[10:28] <jnthn> It's also a post-split operation

[10:28] <jnthn> In that we insert guards having formed the CFG

[10:29] <timotimo> hurm, so upping the versions is going to be "fun"

[10:29] <jnthn> Yeah, there's no nice option here

[10:29] <jnthn> But we really do want two versions

[10:29] <timotimo> i agree

[10:30] <jnthn> Otherwise we can't track when we have things that we already established vs. established from the guard

[10:30] <timotimo> aye. the "from guard" flag isn't terribly much help there either

[10:31] <jnthn> That's at the heart of why we can't eliminate guards we prove aren't needed, but also why spesh plugin guard insertion has to be so reluctant to add facts: because they might be taken as having an effect on uses prior to the guard.

[10:32] <timotimo> yup

[10:33] <jnthn> Which is why ASSIGN-POS ends up with the horrific sequence of guards

[10:33] *** Guest41438 joined
[10:33] <timotimo> an optization pass based on walking the instructions backwards to see if something already established what a guard is guarding against would be another way; also not nice.

[10:33] *** Guest41438 left
[10:34] <jnthn> No, I'd rather handle it properly within the SSA form

[10:34] <timotimo> yes

[10:34] <jnthn> That's why I'm leaning towards the extra write arg, despite it's obvious inefficiencies

[10:34] <jnthn> *its

[10:35] <timotimo> at least it won't increase .moarvm size since it's only ever in post-spesh bytecode

[10:35] <timotimo> jeez i could lie down for a nap already >_<

[10:38] <timotimo> yeah, maybe i will

[10:38] <jnthn> Rest well :)

[10:38] *** lizmat left
[10:39] <timotimo> thanks, good luck with the guard writing refactoring

[10:39] <timotimo> surely it'll be hairier than i imagine already

[10:40] <jnthn> Yeah, it's going to be tricky, though mostly at the "getting things straight during guard insertion" phase; everything after that should "just" fall out correctly

[10:46] *** nandub joined
[10:47] *** siso_ joined
[10:47] *** p6bannerbot sets mode: +v nandub

[10:47] *** siso_ left
[10:48] *** nandub left
[11:15] *** zakharyas left
[11:30] *** brrt joined
[11:31] *** p6bannerbot sets mode: +v brrt

[11:31] <brrt> \o

[11:31] <brrt> i found the leakage of inline spesh graphs

[11:33] <brrt> when we try to get a graph for a non-specialized frame, and we inline other frames during optimization, we leak the inlinee graphs

[11:36] *** pskosinski4 joined
[11:36] *** pskosinski4 left
[11:42] *** tx14 joined
[11:42] *** tx14 left
[11:44] *** wsm joined
[11:45] *** wsm left
[12:12] <jnthn> Aha!

[12:12] <jnthn> good find

[12:12] <jnthn> brrt++

[12:15] *** dan-17 joined
[12:16] *** p6bannerbot sets mode: +v dan-17

[12:16] *** dan-17 left
[12:31] *** brrt left
[12:32] *** brrt joined
[12:33] *** p6bannerbot sets mode: +v brrt

[12:35] *** basic`10 joined
[12:35] *** p6bannerbot sets mode: +v basic`10

[12:41] *** basic`10 left
[12:42] *** brrt left
[12:57] *** zakharyas joined
[12:58] *** p6bannerbot sets mode: +v zakharyas

[13:03] <Geth> ¦ MoarVM/reguard: 5bcae477c0 | (Jonathan Worthington)++ | 10 files

[13:03] <Geth> ¦ MoarVM/reguard: Start splitting SSA versions at guards

[13:03] <Geth> ¦ MoarVM/reguard:

[13:03] <Geth> ¦ MoarVM/reguard: We have so far used a single SSA version to represent both pre-guard

[13:03] <Geth> ¦ MoarVM/reguard: data and post-guard data. Initially, guards were only ever inserted

[13:03] <Geth> ¦ MoarVM/reguard: after the read of a value, so this wasn't a big problem. However:

[13:03] <Geth> ¦ MoarVM/reguard:

[13:03] <Geth> ¦ MoarVM/reguard: * Now we insert extra guards during spesh plugin optimization and

[13:03] <Geth> ¦ MoarVM/reguard: <…commit message has 16 more lines…>

[13:03] <Geth> ¦ MoarVM/reguard: review: https://github.com/MoarVM/MoarVM/commit/5bcae477c0

[13:08] <timotimo> do we just use number-of-versions++ for the post-guard version now?

[13:09] <jnthn> Actually for the pre-guard version in this particular case, 'cus it means we have less work to do :)

[13:10] <jnthn> But yes, new version numbers are just "the next one"

[13:10] <timotimo> ah

[13:11] <jnthn> OK, now the hard part...I need to write a version splitting thingy

[13:11] <timotimo> for some reason i thought we'd have to take the next one from the pre-guard one and bump the versions in the rest of the graph

[13:11] <jnthn> Those two would be semantically equivalent

[13:11] <jnthn> However, the first one is easier because at this guard insertion phase we didn't build the DU chain yet

[13:12] <jnthn> Well, and even if we had, it'd still be more work to go through them all and update

[13:12] <jnthn> Whereas here we just update the writer

[13:13] <timotimo> right

[13:21] <jnthn> Ah, seems a version splitter ain't too bad to write.

[13:23] <timotimo> that's a relief

[13:23] *** GodSkinS16 joined
[13:23] <jnthn> ssa++

[13:23] <jnthn> Though I realize the splitting I'm doing is a form of SSI

[13:23] <jnthn> Kinda :)

[13:24] <timotimo> hah, nice

[13:24] <timotimo> i haven't actually finished reading that paper

[13:24] *** p6bannerbot sets mode: +v GodSkinS16

[13:24] <timotimo> tbh i stopped before it got to any juicy bits

[13:25] <dogbert2> timotimo: how was the nap?

[13:25] <timotimo> i feel the same, only later

[13:25] <dogbert2> i.e. tired ?

[13:26] <timotimo> yup

[13:26] <dogbert2> :(

[13:26] <timotimo> but naps have a nontrivial chance of critical failure for me, which didn't happen

[13:26] <timotimo> so that's nice

[13:27] <dogbert2> critical failure doesn't sound good

[13:27] <timotimo> hah

[13:27] <timotimo> i just took the term from pen&paper role playing

[13:27] <dogbert2> aha

[13:27] <ilmari> critical failure of nap sounds like something you don't wake up from

[13:27] <dogbert2> indeed

[13:28] *** GodSkinS16 left
[13:28] <timotimo> it's not quite as serious in my case

[13:30] <diakopter> dirt nap comes to mind

[13:30] <dogbert2> hmm, looks like one shouldn't run tests with MVM_SPESH_NODELAY=1 and MVM_SPESH_BLOCKING=1 atm

[13:30] <timotimo> wow, that's a poetic way to say that

[13:32] <dogbert2> SEGV in cleanup_dead_bb_instructions (cleanup_facts=1, dead_bb=<optimized out>, g=0xb0844958, tc=<optimized out>) at src/spesh/dead_bb_elimination.c:32

[13:32] <dogbert2> 32                         ann->next = move_to_ins->annotations;

[13:36] <diakopter> impressive

[13:38] <timotimo> i don't quite understand why my nqp::while(1, nqp::stmts(...)) turns into an actual nested block (i.e. closure-taking) and Seq's from-loop and all that

[13:47] <jnthn> Well, thre's a draft split_version

[13:54] *** brrt joined
[13:54] *** robertle left
[13:55] *** p6bannerbot sets mode: +v brrt

[14:00] *** dogbert17 left
[14:06] *** eggy joined
[14:07] *** p6bannerbot sets mode: +v eggy

[14:07] *** eggy left
[14:14] *** xunplini13 joined
[14:15] *** xunplini13 left
[14:36] *** Thorne29 joined
[14:37] *** p6bannerbot sets mode: +v Thorne29

[14:38] *** Thorne29 left
[14:39] *** preaction4 joined
[14:39] *** preaction4 left
[14:42] *** sud08 joined
[14:43] *** sud08 left
[15:06] *** Monkeh29 joined
[15:06] *** Monkeh29 left
[15:19] <Geth> ¦ MoarVM/reguard: b9ffe79ea9 | (Jonathan Worthington)++ | 4 files

[15:19] <Geth> ¦ MoarVM/reguard: Implement SSA split; restore speculative args opt

[15:19] <Geth> ¦ MoarVM/reguard:

[15:19] <Geth> ¦ MoarVM/reguard: There were two ways to try and do this: rename everything looking

[15:19] <Geth> ¦ MoarVM/reguard: back, or rename everything going forward. Going forward seems to be

[15:19] <Geth> ¦ MoarVM/reguard: rather simpler to make work, especially since the tree going forward

[15:19] <Geth> ¦ MoarVM/reguard: has not yet been optimized. So, that's done. Also if we do miss any

[15:19] <Geth> ¦ MoarVM/reguard: renames, it's fairly harmless, because they would just miss the

[15:19] <Geth> ¦ MoarVM/reguard: facts. (Note that the facts are not being added, for the reasons

[15:19] <Geth> ¦ MoarVM/reguard: that triggered this work.)

[15:19] <Geth> ¦ MoarVM/reguard: review: https://github.com/MoarVM/MoarVM/commit/b9ffe79ea9

[15:19] <jnthn> I did try going backwards first :)

[15:24] <timotimo> hm, not even copying over the facts 1:1?

[15:27] *** jelly29 joined
[15:27] *** jelly29 left
[15:28] <jnthn> Will add that later

[15:28] <timotimo> OK. it's probably not so important given it'll have the proper facts soon after i guess?

[15:28] <timotimo> i'll try the lie down thing again perhaps :|

[15:35] *** lizmat joined
[15:36] *** p6bannerbot sets mode: +v lizmat

[15:41] <brrt> jnthn++ - the pace of progress scares me a bit

[15:41] <jnthn> All of spesh scares me a bit :P

[15:42] <brrt> lol " MVM_VECTOR_DECL(MVMSpeshBB *, bbq);"

[15:43] <jnthn> Ah, the name lives from when I was doing the pred approach and it *was* a queue

[15:43] <jnthn> (Wanted a BFS)

[15:46] <jnthn> First cut of re-instating spesh plugins seems to vaguely work

[15:46] <jnthn> Will need a little further effort to make it do something useful

[15:47] <jnthn> (That is, result in better code)

[15:48] <brrt> :-)

[15:49] <jnthn> Today the weather is a bit cooler

[15:49] <jnthn> Well, quite a lot cooler

[15:49] <brrt> yes, it is much nicer

[15:49] <brrt> much, much nicer

[15:49] <jnthn> Yeah...figured I'd deal with this tricky task while it was nicer

[15:50] <jnthn> It'll finally let me bring to a conclusion something I started on over a month ago thinking it'd not be so hard :P

[15:54] <Geth> ¦ MoarVM/fork-safety: 5 commits pushed by (Bart Wiegmans)++

[15:54] <Geth> ¦ MoarVM/fork-safety: 265c9160cf | [Spesh] Tear down spesh worker in full_cleanup

[15:54] <Geth> ¦ MoarVM/fork-safety: a742be370f | [FSA] Fix use-after-free in cleanup

[15:54] <Geth> ¦ MoarVM/fork-safety: c09145f034 | [Spesh] Leak a bit less for full_cleanup

[15:54] <Geth> ¦ MoarVM/fork-safety: 131db5ea9f | [ConcBlockingQueue] Unmoving body

[15:54] <Geth> ¦ MoarVM/fork-safety: 029d6620d2 | [Spesh] More leakfixes

[15:54] <Geth> ¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/compare/265c9160cfe0^...029d6620d245

[15:55] <Geth> ¦ MoarVM/reguard: a7a2ca6f7d | (Jonathan Worthington)++ | 2 files

[15:55] <Geth> ¦ MoarVM/reguard: Allow getting a new version of an in-use temp

[15:55] <Geth> ¦ MoarVM/reguard: review: https://github.com/MoarVM/MoarVM/commit/a7a2ca6f7d

[15:55] <Geth> ¦ MoarVM/reguard: 6e7b215e24 | (Jonathan Worthington)++ | 2 files

[15:55] <Geth> ¦ MoarVM/reguard: Update spesh plugin guard insertion

[15:55] <Geth> ¦ MoarVM/reguard:

[15:55] <Geth> ¦ MoarVM/reguard: With this, all of the guard insertion is now updated to use the new

[15:55] <Geth> ¦ MoarVM/reguard: SSA versioned guards.

[15:55] <Geth> ¦ MoarVM/reguard: review: https://github.com/MoarVM/MoarVM/commit/6e7b215e24

[15:56] <jnthn> uh-oh, somebody touchned ConcBlockingQueue :)

[15:56] <jnthn> brrt++

[15:57] *** zakharyas left
[16:01] <brrt> :-)

[16:06] *** ZofBot left
[16:06] *** ZofBot joined
[16:07] <jnthn> Glad to say that the above is doing Rakudo/NQP builds and passing spectest with MVM_SPESH_BLOCKING=1

[16:07] *** p6bannerbot sets mode: +v ZofBot

[16:12] <Geth> ¦ MoarVM/reguard: 004d2f3573 | (Jonathan Worthington)++ | src/spesh/manipulate.c

[16:12] <Geth> ¦ MoarVM/reguard: Missing call to MVMVECTOR_INIT

[16:12] <Geth> ¦ MoarVM/reguard:

[16:12] <Geth> ¦ MoarVM/reguard: Can't be sure of zeroed memory on the C stack.

[16:12] <Geth> ¦ MoarVM/reguard: review: https://github.com/MoarVM/MoarVM/commit/004d2f3573

[16:12] <Geth> ¦ MoarVM/reguard: 431f33ef8f | (Jonathan Worthington)++ | src/spesh/plugin.c

[16:12] <Geth> ¦ MoarVM/reguard: Update the test register in plugins

[16:12] <Geth> ¦ MoarVM/reguard:

[16:12] <Geth> ¦ MoarVM/reguard: So later guards and attribute access will happen with the earlier

[16:12] <Geth> ¦ MoarVM/reguard: facts (although we aren't yet propagating facts fully enough for

[16:12] <Geth> ¦ MoarVM/reguard: this to allow getattrs_o reduction in all cases).

[16:12] <Geth> ¦ MoarVM/reguard: review: https://github.com/MoarVM/MoarVM/commit/431f33ef8f

[16:20] *** diakopter left
[16:20] <jnthn> And adding in the fact copying has some nice benchmark effects

[16:21] <jnthn> And...causes a segfault in the NQP build :/

[16:22] *** nurupo27 joined
[16:23] *** p6bannerbot sets mode: +v nurupo27

[16:23] *** nurupo27 left
[16:24] <jnthn> But...not under gdb :/

[16:26] <jnthn> (gdb) p facts->log_guard

[16:26] <jnthn> $1 = 4032350144

[16:26] <jnthn> uummm...

[16:27] *** brrt left
[16:41] *** lizmat left
[16:41] <jnthn> Figured that out...spectesting by this point :)

[16:41] *** bobe1 joined
[16:42] *** lizmat joined
[16:42] *** bobe1 left
[16:42] *** p6bannerbot sets mode: +v lizmat

[16:42] *** diakopter joined
[16:42] *** p6bannerbot sets mode: +v diakopter

[16:45] <Geth> ¦ MoarVM/reguard: 1a22aaa4c9 | (Jonathan Worthington)++ | 3 files

[16:45] <Geth> ¦ MoarVM/reguard: Copy facts when splitting SSA versions

[16:45] <Geth> ¦ MoarVM/reguard:

[16:45] <Geth> ¦ MoarVM/reguard: This means that we accumulate new facts on top of what was already

[16:45] <Geth> ¦ MoarVM/reguard: known. With this, we get better optimization of attribute fetches in

[16:45] <Geth> ¦ MoarVM/reguard: spesh plugin guards and avoid some duplicate guard insertion, which

[16:45] <Geth> ¦ MoarVM/reguard: helps various some benchmarks, especially in array and hash stores.

[16:45] <Geth> ¦ MoarVM/reguard: review: https://github.com/MoarVM/MoarVM/commit/1a22aaa4c9

[16:48] <jnthn> A hash store benchmark that at the start of the week ran 4.4x slower than Perl 5 is now down to 1.9x slower (so running in 45% of the time that it used to take)

[17:00] <diakopter> wow

[17:02] <timotimo> beautiful results

[17:04] <timotimo> i'm sure jnthn already has a clue for the next 50% :) :)

[17:05] <jnthn> Hmm, just got the lowest spectest time I've seen in a while too

[17:05] <timotimo> \o/

[17:05] <jnthn> And was clean

[17:05] <jnthn> le merge

[17:05] <Geth> ¦ MoarVM/master: 7 commits pushed by (Jonathan Worthington)++

[17:05] <Geth> ¦ MoarVM/master: 5bcae477c0 | Start splitting SSA versions at guards

[17:05] <Geth> ¦ MoarVM/master: b9ffe79ea9 | Implement SSA split; restore speculative args opt

[17:05] <Geth> ¦ MoarVM/master: a7a2ca6f7d | Allow getting a new version of an in-use temp

[17:05] <Geth> ¦ MoarVM/master: 6e7b215e24 | Update spesh plugin guard insertion

[17:05] <Geth> ¦ MoarVM/master: 004d2f3573 | Missing call to MVMVECTOR_INIT

[17:05] <Geth> ¦ MoarVM/master: 431f33ef8f | Update the test register in plugins

[17:06] <Geth> ¦ MoarVM/master: 1a22aaa4c9 | Copy facts when splitting SSA versions

[17:06] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/4fc267b607b9...1a22aaa4c9c3

[17:06] <timotimo> (o/

[17:06] <timotimo> \o)

[17:06] <jnthn> I was fearing this was going to be a multi-day headache, so am glad to have got it done in the day :)

[17:10] <jnthn> Dinner time; bbl

[17:47] *** travis-ci joined
[17:47] *** p6bannerbot sets mode: +v travis-ci

[17:47] <travis-ci> MoarVM build errored. Jonathan Worthington 'Copy facts when splitting SSA versions

[17:47] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414610362 https://github.com/MoarVM/MoarVM/compare/4fc267b607b9...1a22aaa4c9c3

[17:47] *** travis-ci left
[17:49] *** lizmat left
[18:04] <timotimo> jnthn: how do you feel about this addition to the spesh log? https://gist.github.com/timo/8b990f50898342e6076db47cf7d93478

[18:35] <timotimo> i'm somehow having real difficulty printing out strings there, because i want to throw out any special characters (so the log format doesn't get disturbed) and limit it to a shorter length (so thhat ... yes)

[18:38] *** Maven_ joined
[18:38] *** Maven_ left
[18:48] <jnthn> What's added in particualr? :)

[18:48] <jnthn> Oh, the names of BOOTCode instances perhaps

[18:50] <timotimo> that's right, name and - almost more importantly - the cuuid

[18:51] <jnthn> Yeah, I'm good with that change

[18:51] <jnthn> So long as it copes fine with anon things with no nmae :)

[18:52] <timotimo> i could also put name and cuuid into the stats output, whereever BOOTCode appears

[18:52] <timotimo> oh, wait

[18:52] <timotimo> that's only "it's a BOOTCode, and it's concrete"

[18:52] <timotimo> not which value it is

[18:53] <timotimo> but the "static values" section could get it

[18:53] <timotimo>     2 = Instance (BOOTStaticFrame) - '' (1448)

[18:53] <timotimo> this is what it looks like when the name is unset i believe.

[18:55] *** zakharyas joined
[18:56] <jnthn> ok, that works :)

[18:56] *** p6bannerbot sets mode: +v zakharyas

[19:00] <timotimo> i'd also like to at some point introduce printing not only the cuuid but also the CU's name

[19:01] <timotimo> since we tend to have multiple occurences of the same cuuid in the spesh log, and when they are both called '', it's annoying :)

[19:07] *** colomon joined
[19:07] *** p6bannerbot sets mode: +v colomon

[19:38] *** Zimmedon13 joined
[19:38] *** Zimmedon13 left
[19:52] *** CeBe7 joined
[19:52] *** lizmat joined
[19:52] *** CeBe7 left
[19:53] *** p6bannerbot sets mode: +v lizmat

[19:54] *** zakharyas left
[20:29] *** pOe[ joined
[20:29] *** pOe[ left
[20:35] *** dogbert17 joined
[20:35] <timotimo> the generated code for nom-ws's check for spaces is kind of dreadful :D so many p6bools in there

[20:35] *** p6bannerbot sets mode: +v dogbert17

[20:40] <lizmat> yeah, p6bools are evil

[20:43] <timotimo> y'know, we could put True and False objects into the hll and have an hllbool op that lives in moarvm

[20:43] <timotimo> then it'd be fine for spesh to know all about it

[20:44] <timotimo> a random thing i'm now interested in doing: teaching the jit how to devirtualize nativeref decont_[ins]

[20:49] <timotimo> at the moment a decont_i on a nativeref will first look up the ContainerSpec from the object's STable, checks if the type matches (i.e. int vs int), dispatches to the right fetch_i implementation - lexical, attribute, positional, or multidim, which then checks what kind of int (or whatever) it references (i.e. int8, int16, int32, or int64), and that finally pushes the result towards the register

[20:49] <lizmat> wow

[20:51] <timotimo> the jit currently just calls the exact same function that interp.c has, that's the one that starts by looking up the containerspec

[20:54] <timotimo> hum.

[20:55] <timotimo> gotta find a suitable benchmark first

[21:08] *** lizmat_ joined
[21:09] *** p6bannerbot sets mode: +v lizmat_

[21:11] *** lizmat left
[21:15] <timotimo> wow, this isn't the right benchmark for this, or it's just way too cheap

[21:19] *** patrickz left
[21:30] <timotimo> i've been running a moarvm with --optimize=0

[21:31] <jnthn> That'll not be so speedy :)

[21:31] <MasterDuke> timotimo: which buttons did you say worked? (i got it running)

[21:35] <timotimo> MasterDuke: once the profile is loaded, they all do, but if you refresh, you'll sometimes have to go to the routine overview and click "get routine overview" or something to make the call graph work

[21:36] <MasterDuke> ok

[21:37] <MasterDuke> i thought the "load file" button was a file picker at first, but now it's working if i enter a file name

[21:39] <MasterDuke> how come some times are underlined?

[21:40] <MasterDuke> and man, i do love those github links to the file/line

[21:40] <timotimo> the underlined ones are microsecond rather than milisecond

[21:40] <timotimo> i thought it'd be important for those to stand out so you don't confuse the two

[21:41] <timotimo> given the symbol is kind of similar at smaller font sizes

[21:41] <timotimo> (not all of us have retina displays

[21:41] <timotimo> )

[21:41] <timotimo> devirt is especially fast if you emit the devirted one and then the non-devirted one right after that

[21:41] <MasterDuke> ok, makes sense

[21:41] <MasterDuke> no way to sort?

[21:42] <timotimo> not yet ;(

[21:48] <timotimo> i think we're losing some facts upon inlining

[21:50] <timotimo> there's a sequence that really should have the facts; getlexvia_o, guardconc, decont_i; the first two arguments to guardconc and the second argument to decont_i are versions 1 and 2 of that register and none of the versions have a single flag set on 'em

[21:53] <timotimo> the frame before inlining has the facts, and the devirt of decont_i also succeeds there, but after it gets inlined, no such luck

[21:53] <timotimo> do we rely on logging to give us facts about getlexvia_o and we're not looking for the facts in the inlined frame, or something?

[21:54] <timotimo> or should we "just" analyze sp_guard* ops in facts.c?

[21:56] <timotimo> jnthn: what do you think?

[21:58] <jnthn> Yes, and note that the work that I did today makes that analysis a lot easier to do safely :)

[21:58] <jnthn> Which is why it wasn't there yet :)

[21:58] <timotimo> i interpret that as "go ahead and put all the guard ops into facts.c" :)

[21:58] <jnthn> Or at least, why I didn't do it sooner

[21:58] <jnthn> Yes, you can do so :)

[21:58] <timotimo> yey

[21:59] <jnthn> It's super safe to do it now :)

[22:00] <jnthn> https://github.com/MoarVM/MoarVM/issues/939 is a total brain screw...what on earth is going on with it...

[22:00] <timotimo> maybe i can find out something using rr

[22:00] <timotimo> but maybe not before bedtime

[22:00] <timotimo> facts.c would probably be a nice relaxing time and i think i'm slowly getting a headache

[22:01] <timotimo> that issue is probably not very relaxing :)

[22:01] <jnthn> I have one guess

[22:01] <jnthn> Which is that we have struct padding

[22:01] <jnthn> And the compiler issues a write for more memory than it really needs

[22:02] <jnthn> hah, wat, re-ordering the struct makes valgrind spew more :)

[22:02] <timotimo> fun!!

[22:03] <timotimo> i like using pahole to see the exact structure of a struct that was compiled by the compiler

[22:04] <jnthn> bah, memset of the region clears up the additional errors but not the original one :/

[22:11] <timotimo> oh, hm, we might not want to be using lit_i16 for spesh slots, but lit_u16 at least

[22:13] <jnthn> Or even an sslot member of the union

[22:14] <timotimo> right

[22:14] <timotimo> i'd prefer that, so i don't have to remember whether it was 16 or 32 :)

[22:17] <Geth> ¦ MoarVM: 68b31976dd | (Jonathan Worthington)++ | src/core/ext.c

[22:17] <Geth> ¦ MoarVM: Fix uninitialized memory in extops info

[22:17] <Geth> ¦ MoarVM:

[22:17] <Geth> ¦ MoarVM: Fixes #939.

[22:17] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/68b31976dd

[22:18] <timotimo> so it was basically harmless?

[22:18] <timotimo> just accidentally more frames being considered deoptifiable than should have been?

[22:24] *** lizmat_ left
[22:25] *** Kaiepi left
[22:28] *** Kaiepi joined
[22:29] *** p6bannerbot sets mode: +v Kaiepi

[22:32] <timotimo> looks like i've done something wrong somewhere

[22:33] <timotimo> when i have sp_guard_facts only invoked for sp_guardconc, and do copy_facts as well as set MVM_SPESH_FACT_CONCRETE in the flags, my short program ends with a huge stacktrace about an error in an END phaser

[22:34] <timotimo> Some exceptions were thrown in END blocks:

[22:34] <timotimo> No exception handler located for catch

[22:34] <Geth> ¦ MoarVM: fba5c6b03a | (Jonathan Worthington)++ | src/spesh/dead_bb_elimination.c

[22:34] <Geth> ¦ MoarVM: Harden BB deletion annotation motion

[22:34] <Geth> ¦ MoarVM:

[22:34] <Geth> ¦ MoarVM: Fixes #938.

[22:34] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/fba5c6b03a

[22:34] <timotimo> even The Empty Program does that

[22:34] <jnthn> Yeah, that sounds pretty wrong.

[22:35] <jnthn> Two dogbugs down

[22:35] <timotimo> taking out the copy_facts makes it no longer do the crash

[22:36] <timotimo> i wonder, when would it be unsafe to just take the facts from the guard's source register and copy them over to the target register? the target register shouldn't have any facts on it, right?

[22:36] <jnthn> Indeed, that sounds...odd

[22:36] <jnthn> Maybe some opt is taking place that ain't safe

[22:36] <jnthn> As a result of the added facts

[22:36] <jnthn> Though I dunno which

[22:37] <timotimo> oh, now that's interesting

[22:37] *** travis-ci joined
[22:37] *** p6bannerbot sets mode: +v travis-ci

[22:37] <travis-ci> MoarVM build errored. Jonathan Worthington 'Fix uninitialized memory in extops info

[22:37] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414719173 https://github.com/MoarVM/MoarVM/compare/1a22aaa4c9c3...68b31976dd09

[22:37] *** travis-ci left
[22:39] <timotimo> m: say 0x10d.base(2)

[22:39] <camelia> rakudo-moar 3301ddb1c: OUTPUT: «100001101␤»

[22:39] <timotimo> that'd be known type, deconted, concrete, from_log_guard

[22:40] <timotimo> it's overwriting those flags - which are on the *target* register of the guard instruction, with either 0 or 4 in what i have, which is just deconted

[22:41] *** lizmat joined
[22:41] *** p6bannerbot sets mode: +v lizmat

[22:43] <MasterDuke> timotimo: i just had a thought. i like the link to github for 'SETTING::' routines so much, what about the option to upload the script that the profile is for, so its routines can be linked to/shown?

[22:45] <timotimo> yes.

[22:45] <timotimo> it'd ideally have an html editor with perl6 syntax highlighting features

[22:46] <timotimo> at least now all the decont_i are being devirtualized

[22:47] <timotimo> now i can measure one step of devirt, and then two steps of devirt

[22:50] <timotimo> oh, i should really use spesh_blocking

[22:55] *** travis-ci joined
[22:55] *** p6bannerbot sets mode: +v travis-ci

[22:55] <travis-ci> MoarVM build errored. Jonathan Worthington 'Harden BB deletion annotation motion

[22:55] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414723962 https://github.com/MoarVM/MoarVM/compare/68b31976dd09...fba5c6b03a24

[22:55] *** travis-ci left
[23:02] <timotimo> m: say (5520020241 + 5520145571 + 5520033088) / (5660022473 + 5659967605 + 5659991722)

[23:02] <camelia> rakudo-moar 3301ddb1c: OUTPUT: «0.9752777768␤»

[23:02] <timotimo> that's one step of devirt

[23:08] <Geth> ¦ MoarVM: 554fe425da | (Jonathan Worthington)++ | src/spesh/frame_walker.c

[23:08] <Geth> ¦ MoarVM: Don't add base index when looking for lexical type

[23:08] <Geth> ¦ MoarVM:

[23:08] <Geth> ¦ MoarVM: This information is looked up against the static frame, while it's

[23:08] <Geth> ¦ MoarVM: only the dynamic frame that is subject to the base_index due to the

[23:08] <Geth> ¦ MoarVM: potential for inlining. Fixes a read past the end of the static frame

[23:08] <Geth> ¦ MoarVM: lexical registry buffer.

[23:08] <Geth> ¦ MoarVM:

[23:08] <Geth> ¦ MoarVM: Also move `lexreg` back outside of the loop; it's not managed by the

[23:08] <Geth> ¦ MoarVM: GC and so can't move.

[23:08] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/554fe425da

[23:11] <jnthn> That'll do for today :)

[23:17] <timotimo> will have results soon for the two-level devirt

[23:20] <timotimo> m: say (5200172438 + 5200307378 + 5200343000) / (5660022473 + 5659967605 + 5659991722)

[23:20] <camelia> rakudo-moar 3301ddb1c: OUTPUT: «0.91877735794␤»

[23:20] <timotimo> that does sound like a Win Worth Having

[23:21] <timotimo> m: sub foo(int $a is rw) { for ^10_000_000 { $a = $a + 1 } }; my int $a = 1; foo($a)

[23:21] <camelia> rakudo-moar 3301ddb1c: ( no output )

[23:21] <timotimo> this is the "benchmark"

[23:25] <timotimo> m: say 4.67 / 5.17

[23:25] <camelia> rakudo-moar 3301ddb1c: OUTPUT: «0.903288␤»

[23:25] <timotimo> the time spent mirrors the Ir count pretty closely

[23:28] <jnthn> Pretty nice improvement

[23:35] *** travis-ci joined
[23:35] *** p6bannerbot sets mode: +v travis-ci

[23:35] <travis-ci> MoarVM build errored. Jonathan Worthington 'Don't add base index when looking for lexical type

[23:35] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414731367 https://github.com/MoarVM/MoarVM/compare/fba5c6b03a24...554fe425da5a

[23:35] *** travis-ci left
[23:59] *** d__b joined
[23:59] *** d__b left
