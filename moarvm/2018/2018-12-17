[01:27] *** lizmat left
[01:33] *** lucasb left
[02:11] *** AlexDani` joined
[02:11] *** p6bannerbot sets mode: +v AlexDani`

[02:15] *** AlexDaniel left
[02:48] *** AlexDani` is now known as AlexDaniel

[06:54] *** reportable6 left
[06:55] *** reportable6 joined
[06:56] *** p6bannerbot sets mode: +v reportable6

[07:05] *** domidumont joined
[07:05] *** p6bannerbot sets mode: +v domidumont

[08:03] *** brrt joined
[08:04] *** p6bannerbot sets mode: +v brrt

[08:04] <brrt> \o

[08:04] <yoleaux> 16 Dec 2018 17:58Z <samcv> brrt: then we don't need to worry about libraries on the users computer changing?

[08:04] <brrt> .seen samcv

[08:04] <yoleaux> I saw samcv 16 Dec 2018 17:58Z in #moarvm: <samcv> .tell brrt then we don't need to worry about libraries on the users computer changing?

[08:04] <brrt> .tell samcv checkout commit https://github.com/MoarVM/MoarVM/commit/66efd5dc802480f935a0a44b5b4f8a1ba4b2e789

[08:04] <yoleaux> brrt: I'll pass your message to samcv.

[08:04] *** domidumont left
[08:19] *** domidumont joined
[08:20] *** p6bannerbot sets mode: +v domidumont

[08:22] *** zakharyas joined
[08:23] *** p6bannerbot sets mode: +v zakharyas

[08:57] *** lizmat joined
[08:57] *** p6bannerbot sets mode: +v lizmat

[09:35] *** brrt left
[09:59] *** brrt joined
[09:59] *** p6bannerbot sets mode: +v brrt

[10:08] *** brrt left
[10:42] *** dogbert2_ left
[11:03] *** domidumont left
[11:54] *** dogbert2_ joined
[11:55] *** p6bannerbot sets mode: +v dogbert2_

[11:58] *** lucasb joined
[11:58] *** p6bannerbot sets mode: +v lucasb

[12:39] *** zakharyas left
[12:52] *** domidumont joined
[12:53] *** p6bannerbot sets mode: +v domidumont

[13:45] <dogbert2_> https://github.com/libuv/libuv/blob/v1.x/ChangeLog  # libuv 1.24.1

[14:27] *** zakharyas joined
[14:28] *** p6bannerbot sets mode: +v zakharyas

[14:58] *** brrt joined
[14:59] *** p6bannerbot sets mode: +v brrt

[15:00] <brrt> \o

[15:06] <jnthn> o/ brrt

[15:07] <brrt> ohai jnthn

[15:08] <brrt> I forwarded an invite to a VM conference to your public email address. Did you receive that?

[15:09] <jnthn> I did...then meant to look at it and reply over the weekend, then the weekend was busier than expected. :)

[15:09] <jnthn> From the glance I had, it looks interesting though

[15:09] <jnthn> Were you considering going?

[15:09] <brrt> A bit

[15:10] <brrt> But I consider myself a bit undercredentialed

[15:12] <jnthn> Ah, 'cus it's an academic-y conference?

[15:12] <jnthn> I don't think I'm much more credentialed :P

[15:13] <brrt> on the other hand, might be still very educational

[15:15] <brrt> also, it's Italy

[15:18] <jnthn> :)

[15:52] *** brrt left
[16:09] *** zakharyas left
[16:32] <japhb> (backlogging) timotimo, why do you say "int-to-num-to-int is safe"?  Are the ints in question constrained to <= 53 bits, so as to fit in the num mantissa without loss of lower bits?

[16:36] <japhb> jnthn, brrt: Design and implementation of a real-world multi-threaded spesh/JIT VM (in active use!) seems to me to be a pretty strong credential.  :-)

[16:46] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/12/17/2018-51-principally-designed/

[16:57] *** domidumont left
[17:08] <timotimo> japhb: i say it because using num for those was wrong in the first place and if the numbers get F'ed by being put into nums that'd already be a bug

[17:08] <timotimo> japhb: but i'm not entirely happy with that thing, hence not having pushed it yet

[17:10] <japhb> Ah, so this is in particular about the existing domain of the data, not a general statement about an available opt that will always work

[17:13] <timotimo> what i totally can do is limit it to some situations where i know the op that writes the initial int is extremely unlikely to be wanted in num format

[17:13] <timotimo> such as the elems op

[17:14] <timotimo> iterating over an array until you're past elems(@foo) is probably a bit funky if you're numifying it

[17:27] *** domidumont joined
[17:28] *** p6bannerbot sets mode: +v domidumont

[17:30] <timotimo>       index_s          r57(4),  r45(3), r18(25),  r57(3)

[17:30] <timotimo>       coerce_in       r28(10),  r57(4)

[17:30] <timotimo>       const_i64_16     r57(5), liti16(0)

[17:30] <timotimo>       coerce_in        r27(9),  r57(5)

[17:30] <timotimo>       lt_n             r57(6), r28(10),  r27(9)

[17:30] <timotimo> like this for example

[17:30] <timotimo> though if you have a string with 2**53 characters, maybe something has already gone wrong :)

[17:31] <timotimo> m: say 2 ** 53

[17:31] <camelia> rakudo-moar 848932df2: OUTPUT: ¬´9007199254740992‚ê§¬ª

[17:31] <timotimo> probably won't fit the average user's ram

[17:40] *** zakharyas joined
[17:41] *** p6bannerbot sets mode: +v zakharyas

[18:16] <Geth> ¬¶ MoarVM: 987269ea9f | (Jonathan Worthington)++ | src/core/interp.c

[18:16] <Geth> ¬¶ MoarVM: Get readnum working, try for 32-bit num support

[18:16] <Geth> ¬¶ MoarVM:

[18:16] <Geth> ¬¶ MoarVM: This might need tweaking for big endian platforms, but is at least

[18:16] <Geth> ¬¶ MoarVM: closer to being useful by working properly on little-endian ones.

[18:16] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/987269ea9f

[18:53] *** zakharyas left
[19:43] *** domidumont left
[21:28] *** lucasb left
[21:48] <Geth> ¬¶ MoarVM: d69e87b7fc | (Stefan Seifert)++ | src/core/interp.c

[21:48] <Geth> ¬¶ MoarVM: Use write_buf also when switching endianness

[21:48] <Geth> ¬¶ MoarVM:

[21:48] <Geth> ¬¶ MoarVM: Calling write_buf once instead of multiple at_pos calls should be faster and

[21:48] <Geth> ¬¶ MoarVM: also give the same error behavior whether we need to switch bytes before or not.

[21:48] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d69e87b7fc

