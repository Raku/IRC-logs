[00:10] <japhb> nine: When you say "really seems to help performance", what scale of improvement are you talking about?

[00:36] <Geth> ¦ MoarVM/spesh_lex_vivify_checks: e5750c5961 | (Timo Paulssen)++ | 8 files

[00:36] <Geth> ¦ MoarVM/spesh_lex_vivify_checks: WIP on removing lex vivification checks

[00:36] <Geth> ¦ MoarVM/spesh_lex_vivify_checks:

[00:36] <Geth> ¦ MoarVM/spesh_lex_vivify_checks: in theory we can know when a lex is guaranteed to

[00:36] <Geth> ¦ MoarVM/spesh_lex_vivify_checks: have already been accessed before by looking at

[00:36] <Geth> ¦ MoarVM/spesh_lex_vivify_checks: the dominator tree.

[00:36] <Geth> ¦ MoarVM/spesh_lex_vivify_checks:

[00:36] <Geth> ¦ MoarVM/spesh_lex_vivify_checks: However, this still runs into the safety check

[00:36] <Geth> ¦ MoarVM/spesh_lex_vivify_checks: in the sp_getlex_live_o op while compiling rakudo.

[00:36] <Geth> ¦ MoarVM/spesh_lex_vivify_checks: review: https://github.com/MoarVM/MoarVM/commit/e5750c5961

[02:25] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #784: Un-bitrot tools/parse_jitgraph.p6

[02:25] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/784

[02:54] <Geth> ¦ MoarVM: c602235ef7 | MasterDuke17++ | tools/parse_jitgraph.p6

[02:54] <Geth> ¦ MoarVM: Un-bitrot tools/parse_jitgraph.p6

[02:54] <Geth> ¦ MoarVM:

[02:54] <Geth> ¦ MoarVM: Convert first-index(...) to first(..., :k).

[02:54] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c602235ef7

[02:54] <Geth> ¦ MoarVM: 9df7c1645a | (Zoffix Znet)++ (committed using GitHub Web editor) | tools/parse_jitgraph.p6

[02:54] <Geth> ¦ MoarVM: Merge pull request #784 from MasterDuke17/fix_parse_jitgraph

[02:54] <Geth> ¦ MoarVM:

[02:54] <Geth> ¦ MoarVM: Un-bitrot tools/parse_jitgraph.p6

[02:54] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9df7c1645a

[02:56] *** ilbot3 joined
[05:16] <MasterDuke> looks like Geth is down, i just created https://github.com/MoarVM/MoarVM/pull/785

[05:18] <MasterDuke> Zoffix: Geth seems to be down

[05:30] *** dalek joined
[05:30] *** Geth joined
[05:30] *** synopsebot_ joined
[05:30] *** p6lert joined
[05:33] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #785: Add JIT template for atkey_o

[05:33] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/785

[05:35] *** synopsebot joined
[05:35] *** SourceBaby joined
[05:50] *** statisfiable6 joined
[07:01] <Geth> ¦ MoarVM: a04d1099b0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | build/setup.pm

[07:01] <Geth> ¦ MoarVM: Revert "Try to use egcc when compiling on OpenBSD"

[07:01] <Geth> ¦ MoarVM:

[07:01] <Geth> ¦ MoarVM: This reverts commit 28eaf97d05d18e6e4ce528f6d723022609e8338b.

[07:01] <Geth> ¦ MoarVM:

[07:01] <Geth> ¦ MoarVM: See rakudo/rakudo#1420

[07:01] <synopsebot> RAKUDO#1420 [open]: https://github.com/rakudo/rakudo/issues/1420 [regression][⚠ blocker ⚠] FreeBSD issues

[07:01] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a04d1099b0

[08:21] *** Zoffix joined
[08:21] <Zoffix> Is it expected for `getlexref_i` to be a lot slower than `getlex`?

[08:23] <Zoffix> Also are there any docs that could explain why/when I'd want getlexref_i rather than plain getlex

[08:27] *** Util joined
[08:39] *** domidumont joined
[08:45] *** domidumont joined
[09:40] <samcv> Zoffix: i don't know. but if you find out. add something to nqp op docs please

[09:41] <Zoffix> I'll try

[10:03] <Zoffix> Was asking because I'm 90% sure getlexref_i instead of getlex is what's causing R#1416

[10:03] <synopsebot> R#1416 [open]: https://github.com/rakudo/rakudo/issues/1416 [perf] nqp::if((my int $n),1) is 4.5x slower than non-native version

[10:03] <Zoffix> Gonna give up on it for now

[10:03] <Zoffix> \o

[10:03] *** Zoffix left
[10:14] <nine> japhb: it's not much, but it's clearly measurable which is nice considering how little time I spent on my first 2 templates

[10:16] <nine> When's the release gonna happen? Looking forward to merging stuffs :)

[10:57] <samcv> nine: should happen when i wake up tomorrow

[10:58] <nine> samcv: oki :)

[10:58] *** domidumont joined
[11:43] <lizmat> hmmm... http://moarvm.org  still on 2017.09 ?

[11:48] *** releasable6 joined
[12:36] *** greppable6 joined
[12:36] *** benchable6 joined
[12:36] *** coverable6 joined
[12:36] *** reportable6 joined
[13:03] <timotimo> nine: what benchmarks are you using?

[13:08] <timotimo> zoffix, lexicalref is a mechanism that allows us to treat a native value stored in a lexpad as if it were a read-writable container we can pass around. the lexicalref that gets created holds a reference to the frame in question and any access to it acts like getlex from the frame it originated in. this means a couple of things for performance, one is that the frame it's taken for needs to move off of the call

[13:08] <timotimo> stack and onto the heap

[13:08] <timotimo> that's a costly operation on its own

[13:08] <timotimo> but of course there's also the overhead of allocating the lexicalref in the first place

[13:17] <nine> timotimo: I'm mostly interested in csv-ip5xs.pl of course :)

[13:17] <timotimo> that's fair

[13:17] <nine> timotimo: why do we need all that for natives but not of high level lexicals?

[13:18] <timotimo> high level lexicals are references to scalars, we can just pass the scalars around

[13:35] <jnthn> Effectively, the reference model is <storage location> --Pointer--> Scalar --Pointer--> Value

[13:36] <jnthn> The value model is that the storage location directly holds the value

[13:36] <jnthn> And if we need a reference to it, then we allocate a reference object that points to the container and carries the index/key/whatever

[13:37] <timotimo> after inlining and recalculating the dominance tree we should try rediscovering facts about the inlined blocks only, then we can do an extra pass of optimization to do Good Things with that

[13:37] <nine> Wouldn't we know at compile time that we need such a reference object?

[13:37] <jnthn> Sometimes.

[13:38] <jnthn> get*ref_* is always safe: it works as an r-value or and l-value

[13:39] <jnthn> So we pretty much always produce the ref scope in the initial QAST tree

[13:39] <jnthn> The QAST -> MAST phase, however, turns a great deal of those into the non-ref case, because it knows an r-value is needed

[13:39] <jnthn> What it cannot do for us is deal with things like Perl 6 native arrays

[13:40] <jnthn> That is, where we call .AT-POS

[13:40] <jnthn> Since .AT-POS could be called in either situation

[13:40] <jnthn> Thankfully, we're quite good at inlining these days

[13:41] <jnthn> And so we'll be able to deal with such cases in spesh

[13:42] <jnthn> I think we've also so far done very little about optimizing use of native references in spesh

[13:42] <jnthn> But I designed it to let us spesh away most of the branching/checking there also

[13:44] <jnthn> Also - and this is the easiest win - there may be further places in QAST -> MAST that we can make a static deduction, but where we aren't

[13:48] <MasterDuke> kind of unrelated, but hasn't there been some talk of removing MAST? or was that QAST?

[13:48] <timotimo> at some point we could directly generate mbc from nqp

[13:49] <timotimo> i.e. with buf8 and push and append and such

[13:49] <MasterDuke> so stage mbc would disappear and just end up part of stage optimize?

[13:50] <jnthn> MasterDuke: Yes, I mentioned it could be done as a real-world test case for improved APIs for working with binary data

[13:50] <jnthn> No, stage mast and stage mbc would become one

[13:50] <jnthn> We'd also hugely reduce memory use during compilation

[13:52] <MasterDuke> right, forgot there was both mast and mbc. reduced memory during compilation would be very cool

[13:53] <timotimo> right, the memory use peaks because we first have to have every single mast object allocated before we can pass it off to the compiler

[13:53] <timotimo> if we do it in one go we can likely compile mast directly and clean up parts we've just finished

[13:54] <jnthn> Indeed

[13:55] <MasterDuke> is that an all-or-nothing change?

[13:57] <nine> Seems like I got the expression tree compiler to segfault...

[14:01] <MasterDuke> i.e., could we just directly generate parts of nqp to mbc?

[14:03] <nine> MasterDuke: I guess one could introduce special MAST nodes that just forward already generated bytecode

[14:05] <MasterDuke> hm

[14:05] <jnthn> MasterDuke: I'd probably do it by having both the current and new one in there, and have an env var to control it

[14:06] <jnthn> Then we can slowly work our way through being able to do the NQP test suite, Rakudo test suite, compiling NQP, etc.

[14:06] <MasterDuke> jnthn: sorry, current and new one what? MAST node?

[14:06] <jnthn> Current QAST -> MAST -> MBC compiler, and new QAST -> bytecode one

[14:07] <jnthn> Note that NQP's bootstrap build would imply that you end up using any changes you do immediately, which means you can't rule out that a problem is because of a mis-compile in the compiler rather than just the compiler miscompling :)

[14:08] <jnthn> So I think retaining the current one and having a new one that is opt-in until it's ready to be a full replacement is the best way

[14:09] <MasterDuke> ah, thanks

[14:14] *** bisectable6 joined
[14:45] <nine> How I wish extops would have never been a thing...

[14:51] <Geth> ¦ MoarVM/inline_in_place: 9 commits pushed by (Stefan Seifert)++

[14:51] <Geth> ¦ MoarVM/inline_in_place: cdf0bf0cb0 | Expr JIT template for trunc_i*

[14:51] <Geth> ¦ MoarVM/inline_in_place: 585485df87 | Expr JIT template for takedispatcher

[14:51] <Geth> ¦ MoarVM/inline_in_place: 896e4d280f | Expr JIT template for isnull

[14:51] <Geth> ¦ MoarVM/inline_in_place: b171a41839 | Expr JIT template for getcode

[14:51] <Geth> ¦ MoarVM/inline_in_place: 1cc457828b | Expr JIT template for takeclosure

[14:51] <Geth> ¦ MoarVM/inline_in_place: 2532bd1255 | Expr JIT template for capturelex

[14:51] <Geth> ¦ MoarVM/inline_in_place: c78f56e73c | Expr JIT template for create

[14:51] <Geth> ¦ MoarVM/inline_in_place: 155e23b4d8 | Only BAIL on DEOPT_ONE annotations on actual guard ops in expr JIT

[14:51] <Geth> ¦ MoarVM/inline_in_place: e291602bbb | Fix a typo in a comment

[14:51] <Geth> ¦ MoarVM/inline_in_place: review: https://github.com/MoarVM/MoarVM/compare/c60ebd7a4a...e291602bbb

[14:58] <Geth> ¦ MoarVM/inline_in_place: e9fe021cde | (Stefan Seifert)++ | src/jit/log.c

[14:58] <Geth> ¦ MoarVM/inline_in_place: Fix segfault in JIT bytecode dumper on code without static frame

[14:58] <Geth> ¦ MoarVM/inline_in_place: review: https://github.com/MoarVM/MoarVM/commit/e9fe021cde

[15:27] <nine> jnthn: any hint how to approach retainment of facts when inlining?

[15:28] <timotimo> we can't retain facts when inlining, they aren't there to begin with

[15:28] <nine> Could we rediscover them? Or some like wval known values?

[15:29] <timotimo> we'd have to rediscover them, yeah

[15:29] <timotimo> we might want to make sure not to overwrite facts we've changed since the initial discovery phase

[15:29] <timotimo> that's why i was suggesting to only discover facts in inlined blocks, and to do it before the second pass after recalculating the SSA form

[15:30] <timotimo> recompute dominance*

[15:30] <timotimo> (not the whole SSA form)

[15:35] <timotimo> with that, we will want to buff up the second pass, too.

[15:37] <nine> Could it really be just a single line?

[15:37] <nine> MVM_spesh_facts_discover(tc, inline_graph, p);

[15:37] <timotimo> i think it'll need more care than that, but try it out

[15:37] <nine> With that we can inline JIT compiled native calls

[15:38] <timotimo> depending on where that goes, does it access the right places for facts known about the inliner?

[15:39] <nine> I have no idea. It just works when I put that in src/spesh/optimize.c:1631 before MVM_spesh_get_facts(tc, g, code_ref_reg)->usages++; MVM_spesh_inline(tc, g, arg_info, bb, ins, inline_graph, target_sf, code_ref_reg);

[15:41] <timotimo> ah, that looks somewhat safe, but it'll leave out a bunch of things we know

[15:41] <timotimo> i don't think we pass any info about the arguments we're "calling" the inlinee with

[15:54] <jnthn> I think probably we'd want to propagate any facts we have about arguments going into the inline before calling MVM_spesh_facts_discover on the inline graph, so it can propagate such information further

[15:55] <jnthn> Additionally, we'd want to look at guards and set facts based on what the guards are enforcing, when doing fact discovery on "inline mode"

[15:55] <jnthn> Though we perhaps don't need any mode flag at all

[15:55] *** Kaiepi joined
[15:55] <jnthn> In that sp_log won't be there in the inlinee's bytecode, and guards won't be there in the original bytecode we discover facts on

[15:56] <jnthn> Of coures, those 2 steps are additional ones to make the facts more complete

[15:57] <jnthn> *course

[15:57] <jnthn> So no problem just to pop a MVM_spesh_facts_discover call in initially

[15:57] <timotimo> say, we don't register the inlined BBs in the dominator tree, right? but the dominator tree is how the optimizer visits stuff

[15:57] <jnthn> We do before the second_pass

[15:58] <jnthn> I'm pretty sure we do, anyway

[15:58] <jnthn> I think that's one of the things I fixed up last summer

[15:58] <timotimo> right, so stuff that wants to handle inline boundaries will have to go into the second pass

[15:58] <timotimo> yes, it recalculates the dominators there

[15:58] <jnthn> Yes, I'd assumed that we'd do such things in pass 2 :)

[15:58] <timotimo> we can probably move a bunch of stuff over

[15:58] <timotimo> rather than re-doing many things

[15:59] <timotimo> though the first pass is already just a big switch on ops that mostly just directly calls our optimization functions

[15:59] <timotimo> so there isn't much duplication even if we do stuff multiple times

[15:59] *** zakharyas joined
[16:42] *** Ven`` joined
[16:43] <MasterDuke> does jg_append_primitive ( https://github.com/MoarVM/MoarVM/blob/master/src/jit/graph.c#L15 ) have something equivalent in the expr jit?

[16:49] <timotimo> don't think so, why?

[16:52] *** Ven`` joined
[16:52] <timotimo> the primitive ops rely on emit.dasc, i.e. snippets of asm that rely on every value residing on the heap and having to be loaded before and stored after working

[16:56] <MasterDuke> there are a whole lot of ops that just call that in the switch in graph.c

[16:57] <MasterDuke> one of which is sp_findmeth, the most common 'Cannot get template for:' when building rakudo

[16:57] <MasterDuke> 7890 of them

[16:57] <timotimo> yeah, look at emit.dasc to see the implementation of the primitive ops

[16:58] <timotimo> MVM_jit_emit_primitive

[16:58] <MasterDuke> k, thanks

[17:31] *** Ven`` joined
[17:32] *** AlexDaniel joined
[17:34] <Geth> ¦ MoarVM/inline_in_place: 812480036d | (Stefan Seifert)++ | 3 files

[17:34] <Geth> ¦ MoarVM/inline_in_place: Run basic facts discovery on inlined code

[17:34] <Geth> ¦ MoarVM/inline_in_place:

[17:34] <Geth> ¦ MoarVM/inline_in_place: This is enough to discover the known value of wvals. With these values we can

[17:34] <Geth> ¦ MoarVM/inline_in_place: unblock JIT compilation of inlined native calls.

[17:34] <Geth> ¦ MoarVM/inline_in_place: review: https://github.com/MoarVM/MoarVM/commit/812480036d

[17:39] *** zakharyas joined
[17:44] *** zakharyas joined
[17:56] *** travis-ci joined
[17:56] <travis-ci> MoarVM build failed. Samantha McVey 'Merge pull request #781 from samcv/ucd-critic

[17:56] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/330705279 https://github.com/MoarVM/MoarVM/compare/a7a26eb1161e...a74869e37bcb

[17:56] *** travis-ci left
[18:36] <MasterDuke> .tell brrt line 104 of https://github.com/MoarVM/MoarVM/blob/master/docs/jit/tiles.md has a sentence that doesn't end

[18:36] <yoleaux> MasterDuke: I'll pass your message to brrt.

[18:41] *** nativecallable6 joined
[18:41] <timotimo> This approach has been abandoned after it was clear

[18:41] <timotimo> ^- this one?

[19:36] *** quotable6 joined
[20:21] <jnthn> It was so clear there was no reason to explain it :P

[20:25] *** lizmat joined
[20:51] *** evalable6 joined
[21:13] *** yoleaux joined
[21:36] <MasterDuke> a bit of a delayed response, but yeah, that was the sentence i meant

[21:36] <timotimo> it was clear which one you meant :D

[21:37] <MasterDuke> ba-dum-tiss

[21:46] *** yoleaux joined
[21:46] *** mtj_ joined
[21:51] *** travis-ci joined
[21:51] <travis-ci> MoarVM build failed. Jonathan Worthington 'Pay attention to return op in cross-HLL inlines

[21:51] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/330895302 https://github.com/MoarVM/MoarVM/compare/a74869e37bcb...85b2c5f82a83

[21:51] *** travis-ci left
[21:57] *** Kaiepi joined
[22:00] *** mtj_ joined
[22:20] *** yoleaux joined
[22:22] *** squashable6 joined
[22:22] *** unicodable6 joined
[22:22] *** committable6 joined
[22:22] *** bloatable6 joined
[22:23] <samcv> .tell pmurias where does it fail? can you show/tell me? thanks!

[22:23] <samcv> ugh yoleaux

[22:24] *** Kaiepi joined
[22:31] *** _Kaiepi joined
[22:43] *** Ven`` joined
[23:09] *** greppable6 joined
[23:27] *** _Kaiepi joined
