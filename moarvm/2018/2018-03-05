[01:48] *** evalable6 joined
[02:58] *** ilbot3 joined
[06:40] *** domidumont joined
[07:26] *** domidumont joined
[07:32] *** robertle joined
[07:40] *** brrt joined
[07:40] <brrt> good .

[07:40] <yoleaux> 3 Mar 2018 12:50Z <MasterDuke> brrt: i did actually try re-writing it to `(template: ishash   (if (all (nz $1) (eq (^getf (^repr $1) MVMREPROps ID) (const (&QUOTE MVM_REPR_ID_MVMHash) int_sz)))     (const 1 int_sz)     (const 0 int_sz)))`, but it still give an MVM_oops in the same spot

[07:40] <yoleaux> 3 Mar 2018 17:03Z <nine> brrt: in general, higher level semantics (like a STORE_WRITE_BARRIER) make it easier for a compiler to apply optimizations, so I'd favor that.

[07:41] <brrt> .tell MasterDuke yeah I'm seeing it. I really wonder how you're getting a CAST_LOAD_ADDR from that

[07:41] <yoleaux> brrt: I'll pass your message to MasterDuke.

[07:41] <brrt> nine: I've swung back on that, mostly because a STORE_WRITE_BARRIER operator node needs an associated tile

[07:42] <brrt> and that associated tile needs the same kind of handling that CALL/CALLV does, except 'magical'

[07:42] <brrt> which is a pain, currently

[07:42] <brrt> I kind of want to generalize that but it's not easy

[07:43] <brrt> on the other hand, having 'named partial templates' isn't exactly hard to do, and it is a nice generalization from the macro concept, I think

[07:54] *** AlexDaniel joined
[08:00] <samcv> jnthn: it seems that MVM_string_decode is not used once in our codebase except in io/dirops.c

[08:01] <samcv> though i don't think it can be triggered unless you try and decode a directory as windows-1252, there is a bug where \r\n won't decode into a single grapheme. at least from reading the code it doesn't do anything with that

[08:05] <samcv> ok well it actually may working looking at it closer. but regardless it isn't tested

[08:09] <samcv> anyway i will see if i can unify some of the code there

[08:13] *** brrt joined
[08:17] *** zakharyas joined
[08:19] *** brrt joined
[08:22] *** zakharyas joined
[08:27] *** domidumont joined
[08:36] <samcv> ah oops i guess i missed where it was being called. it's getting late

[08:38] <nwc10> "insufficiently morning"?

[08:38] <nwc10> They respawn daily

[08:43] <brrt> good hi :-)

[08:44] <nwc10> there's this strange cross symbol appeared at the start of temperatures - does anyone know what it means? :-)

[08:45] <nwc10> (this joke is somewhat Euro-centric)

[08:45] <nwc10> and might not be funny :-)

[08:48] <brrt> a symbol like '+' ?

[08:50] <nwc10> yes, that's the one.

[08:50] <nwc10> most unusual

[09:17] *** AlexDani` joined
[09:54] *** Geth joined
[10:16] *** quotable6 joined
[10:16] *** nativecallable6 joined
[10:16] *** bisectable6 joined
[10:16] *** greppable6 joined
[10:16] *** evalable6 joined
[10:16] *** benchable6 joined
[10:16] *** reportable6 joined
[11:13] *** yoleaux joined
[11:45] *** shareable6 joined
[11:59] *** brrt joined
[12:23] *** brrt joined
[12:33] *** buggable joined
[13:46] *** Ven`` joined
[13:46] *** zakharyas joined
[13:58] *** domidumont joined
[14:04] *** AlexDaniel joined
[14:18] *** zakharyas joined
[14:37] *** zakharyas joined
[14:48] *** domidumont joined
[14:55] *** zakharyas joined
[14:57] *** TimToady joined
[15:01] *** greppable6 joined
[15:32] *** bisectable6 joined
[15:33] *** zakharyas joined
[15:55] *** reportable6 joined
[15:57] *** reportable6 joined
[15:57] *** quotable6 joined
[15:59] *** reportable6 joined
[16:05] *** nativecallable6 joined
[16:08] *** brrt joined
[16:13] *** releasable6 joined
[16:40] *** Kaiepi joined
[17:06] *** bisectable6 joined
[17:23] *** Kaiepi joined
[17:31] *** domidumont joined
[18:15] *** zakharyas joined
[18:45] *** Ven`` joined
[19:05] *** Ven`` joined
[19:16] *** Kaiepi joined
[19:17] *** Ven`` joined
[19:17] *** reportable6 joined
[19:30] *** zakharyas joined
[19:34] *** zakharyas joined
[19:57] *** Ven`` joined
[20:04] *** zakharyas joined
[20:17] *** Ven`` joined
[20:17] *** brrt joined
[20:19] <brrt> ohai #moarvm

[20:20] <brrt> interestingly, changing the order of the store and the write barrier breaks NQP compilation, even though it really shouldn't

[20:24] <nwc10> does valgrind have anything to say about this?

[20:30] <brrt> good question

[20:36] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/03/05/2018-10-pragmatic-perl/

[20:37] *** Ven`` joined
[20:42] *** Ven`` joined
[21:01] *** Ven`` joined
[21:11] *** Kaiepi joined
[21:21] *** Ven`` joined
[21:24] *** brrt joined
[21:27] *** evalable6 joined
[21:30] <brrt> good *

[21:30] <brrt> lizmat++ weekly

[21:47] <timotimo> lizmat++ # weekly

[21:49] *** robertle joined
[22:03] <brrt> the bug with changing the order of the write barrier manifests in a gigantic jit file

[22:05] <timotimo> do we perhaps want an env var JIT_MAX_SIZE :)

[22:06] <timotimo> so perhaps it takes a bit longer to trigger the bug, but then at least the jit code will not be huge

[22:07] <brrt> hehe

[22:07] <brrt> let a million env vars bloom

[22:17] <brrt> I see a set that's eliminated o.O

[22:17] <timotimo> so the set operation doesn't exist any more but it's in the jit output?

[22:18] <brrt> (i was also wondering if we could, maybe, compile 'happy paths' through the frame, if we can't compile it all; then I figured that would be reinvention of tracing)

[22:18] <brrt> no, there should be a 'set', but it was eliminated entirely by the expression compiler

[22:19] <timotimo> ah

[22:24] *** releasable6 joined
[22:32] <brrt> we're having a sp_p6ogetvt_o of a VMNull object. curious

[22:33] <brrt> oh, and another case of double restoring

[22:45] <brrt> i'm surprised by how much inefficiency is generated by the spilling of the allocator

[22:45] <brrt> and surprised how correctly it all works

[22:45] <brrt> (except for where it's broken, of course)

[22:45] <brrt> xb

[22:45] <timotimo> is it much worse than the lego jit?

[22:46] <brrt> it's different worse

[22:46] <timotimo> interesting

[22:46] <timotimo> can you elaborate a little bit?

[22:46] <brrt> well, the lego jit just endlessly, mindlessly loads the same things to and fro memory

[22:46] <timotimo> right

[22:46] <brrt> the expr jit can end up spilling, then restoring just after

[22:47] <brrt> that's a case of a known optimization that i haven't applied yet

[22:48] <brrt> see you tomorrow

[22:48] <timotimo> OK :)

[23:11] *** Ven`` joined
