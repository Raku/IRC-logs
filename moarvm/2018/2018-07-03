[01:11] <samcv> m: my @list; sub add-to (@list, $item) { if 2.rand.Int && @list { splice @list, 1, 0, $item } else { unshift @list, $item }}; for ^10 {add-to(@list, $_)}; say @list

[01:11] <camelia> rakudo-moar 55b2e32b9: OUTPUT: ¬´[9 5 8 7 6 4 3 0 2 1]‚ê§¬ª

[01:13] <samcv> # that is demonstrating randomizing inserting at the first or second place

[01:13] <samcv> so it's more randomized for sure

[02:15] <Geth> ¬¶ MoarVM: jstuder-gh++ created pull request #891: Alter some exprjit templates to remove branching

[02:15] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/891

[02:23] *** lizmat left
[05:18] *** brrt joined
[05:49] <brrt> \o

[06:01] *** domidumont joined
[06:05] <samcv> \o

[06:08] *** domidumont left
[06:09] *** domidumont joined
[06:19] *** domidumont left
[06:24] *** brrt left
[06:36] *** robertle joined
[07:42] *** brrt joined
[07:54] *** domidumont joined
[08:06] *** brrt left
[08:07] *** brrt joined
[08:13] *** dogbert17 joined
[08:14] *** robertle left
[08:14] *** robertle joined
[08:14] *** [Coke] joined
[08:15] *** [Coke] left
[08:15] *** [Coke] joined
[08:35] *** lizmat joined
[09:00] <brrt> oops, another ARG6 issue that appveyor spotted

[09:04] <Geth> ¬¶ MoarVM: 2592774c56 | (Jeremy Studer)++ (committed by Bart Wiegmans) | 2 files

[09:04] <Geth> ¬¶ MoarVM: Make minor alterations to some exprjit templates

[09:04] <Geth> ¬¶ MoarVM:

[09:04] <Geth> ¬¶ MoarVM: * isfalse_s can use a flagval instead of branch

[09:04] <Geth> ¬¶ MoarVM: * Remove the 'let' from iscoderef template

[09:04] <Geth> ¬¶ MoarVM: * Alter is_vmnull macro so that it can be flagval-ed

[09:04] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2592774c56

[09:05] <Geth> ¬¶ MoarVM: bd8361e2f8 | (Bart Wiegmans)++ | src/jit/x64/emit.dasc

[09:05] <Geth> ¬¶ MoarVM: [JIT] Fix ARG6 for windows better

[09:05] <Geth> ¬¶ MoarVM:

[09:05] <Geth> ¬¶ MoarVM: Can't read from memory and write from memory at the same time

[09:05] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bd8361e2f8

[09:14] *** lizmat left
[09:34] *** zakharyas joined
[09:40] *** brrt left
[10:17] *** jpf1 left
[10:23] *** MasterDuke left
[10:34] *** brrt joined
[11:49] *** jpf1 joined
[11:57] <brrt> .tell Zoffix we could have such an option, but I'd prefer not to; I'd prefer to have a nativecall impl on WSL that didn't need to make a hole in OS exploit defenses

[11:57] <yoleaux> brrt: I'll pass your message to Zoffix.

[12:12] *** brrt left
[12:37] *** brrt joined
[13:45] *** brrt left
[13:46] <Geth> ¬¶ MoarVM: 9745f9216c | (Jonathan Worthington)++ | src/spesh/plugin.c

[13:46] <Geth> ¬¶ MoarVM: Add facts to attributes in spesh plugin guards

[13:46] <Geth> ¬¶ MoarVM:

[13:46] <Geth> ¬¶ MoarVM: So that if we do chained attribute lookups, then we'll be able to lower

[13:46] <Geth> ¬¶ MoarVM: those in the chain.

[13:46] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9745f9216c

[13:46] <Geth> ¬¶ MoarVM: 7ac0610922 | (Jonathan Worthington)++ | src/spesh/plugin.c

[13:46] <Geth> ¬¶ MoarVM: Correct a mis-placed `break` statement

[13:46] <Geth> ¬¶ MoarVM:

[13:46] <Geth> ¬¶ MoarVM: Which caused us to sometimes spit out a bogus guard, and thus deopt

[13:46] <Geth> ¬¶ MoarVM: when we shouldn't have.

[13:46] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7ac0610922

[13:46] <jnthn> That last one was confusing. "Why does this spesh plugin make things waay slower?!" :)

[13:51] *** scovit joined
[14:00] *** zakharyas left
[14:09] *** brrt joined
[14:52] <jnthn> The spesh plugins seem to be working overall quite nicely by this point.

[14:53] <jnthn> However, switching assignment to be done in terms of MoarVM bytecode rather than C code makes us very dependent on inlining.

[14:54] <jnthn> And there's some cases where the order of producing stuff heuristic leaves us with nothing to inline

[14:54] <jnthn> So I think my next task is making it so if we know the target of a call but have no optimized candidate for it yet, then we produce one and try to inline it.

[14:54] <jnthn> (If the code size is small enough)

[14:57] <jnthn> That aside, it's nice to start seeing all the binds and checks going on expressed in the bytecode, not hidden away in chunks of C code

[15:12] <brrt> yes, yes, yes

[15:13] <brrt> oh there's two more thoughts that I wanted to discuss

[15:13] <brrt> one. we're running out of opcode space, as in, extops start at 1024, and we're at 870 or so

[15:14] <brrt> (it would be interesting to graph)

[15:14] <jnthn> Don't think they grow fast enough for that to be a problem, tbh.

[15:15] <brrt> two, maybe there is a systematic way in which we can make 'dependent' spesh candidates, rather than relying on order-of-processing

[15:15] <jnthn> Given that we're already keen to eliminate ext ops

[15:15] <brrt> :-)

[15:16] <jnthn> Yes, there probably is a way to be cleverer, but we'll still want to produce inlines for things that are used in highly type-variant wys

[15:16] <jnthn> *ways

[15:16] <jnthn> But that specialize nicely once inlined

[15:17] <Geth> ¬¶ MoarVM: af455397f0 | (Jonathan Worthington)++ | src/spesh/optimize.c

[15:17] <Geth> ¬¶ MoarVM: Refactor inline logging; detect missed inlines

[15:17] <Geth> ¬¶ MoarVM:

[15:17] <Geth> ¬¶ MoarVM: Missed being those where we could potentially do an inline, but we do

[15:17] <Geth> ¬¶ MoarVM: not do so because we didn't specialize them yet.

[15:17] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/af455397f0

[15:17] <jnthn> That at least lets me see that it is a problem :)

[15:17] <brrt> you'd want to extrapolate spesh facts from the inliner to the inlinee (we can probably do that now)

[15:18] <jnthn> Yup

[15:21] *** zakharyas joined
[15:35] <brrt> fwiw, I still haven't dropped the whole 'trace specialization' idea :-)

[15:35] <brrt> but I think I can frame it in a way that it fits MoarVM and spesh rather than the other way arround

[15:36] <brrt> and hopefully relatively cheap to implement

[15:36] <jnthn> Sounds interesting :)

[15:38] <brrt> :-)

[15:38] <brrt> on the other hand, so many broken stuffs to fix left :-(

[15:42] <jnthn> Yeah, and the code we're producing after specialization is still full of stuff it'd be nice to be rid of

[15:42] <jnthn> After I've done the thing I described a moment ago, I think it'll be time for a revisit of deopt

[15:43] <timotimo> jnthn, how detailed would you want deopt logging in the profiler to become, once we log more than just the count of deopts?

[15:44] <yoleaux> 14:53Z <Zoffix> timotimo: this segafauls, in case you're interested: ./perl6 --profile --profile-filename=prof.html -e 'say "127.0.0.1" ~~ /^ [ <{0..255}> ]**4 % \. $/; say now - ENTER now'   R#2013

[15:44] <synopsebot> R#2013 [open]: https://github.com/rakudo/rakudo/issues/2013 [SEGV][perf] Very slow regex

[15:44] <jnthn> timotimo: If we can cheaply figure out what kind of guard failed, I guess it's nice, though I dunno if we can

[15:45] <jnthn> e.g. "Expected type X but got Y"

[15:45] <timotimo> add a profiler version of every guard op, so we don't have to put an "if is profiling" check in every deopt function ... :\

[15:50] <jnthn> Just insert a "the last guard is" op before every guard :)

[15:50] <jnthn> When profiling

[15:51] <jnthn> Oh, though I guess that still needs checking

[15:51] <jnthn> Though given the overall cost of deopt...I don't think a "are we profiling" check in there will amount to much cost

[15:53] <brrt> oh, you know what does need a revision... the code in exception that does the throwpayloadlexcaller

[16:08] *** zakharyas left
[16:18] *** robertle left
[16:21] *** domidumont left
[16:22] *** zakharyas joined
[16:38] *** zakharyas left
[16:44] *** MasterDuke joined
[16:46] *** lizmat joined
[17:21] *** brrt left
[17:28] *** zakharyas joined
[17:37] *** domidumont joined
[17:55] *** zakharyas left
[18:31] *** brrt joined
[18:31] *** brrt left
[18:42] <japhb> jnthn: How far do you think you are from merging back to master?  What with all the jit templates and such, I'm wondering if a bump is in order, or if we should wait for you to merge ...

[18:51] *** domidumont left
[18:56] *** kanopis joined
[19:16] *** kanopis left
[19:25] <dogbert17> I haven't seen this before: Bytecode validation error at offset 84, instruction 13: operand type 152 does not match register type 24

[19:28] <dogbert17> got this with 'MoarVM version 2018.06-103-gaf45539' when running: MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 ./perl6 t/spec/S02-types/native.rakudo.moar

[19:29] *** lizmat left
[19:33] *** zakharyas joined
[19:34] <dogbert17> ==20533== Conditional jump or move depends on uninitialised value(s)

[19:34] <dogbert17> ==20533==    at 0x11CC2248: ???

[19:34] <dogbert17> ==20533==    by 0x51C995A: MVM_jit_code_enter (interface.c:24)

[19:37] <MasterDuke> dogbert17: can you repro it with the jit(s) disabled?

[19:39] *** lizmat joined
[19:46] *** lizmat left
[19:49] <dogbert17> MasterDuke: no, it disappears if I add MVM_JIT_DISABLE=1

[19:50] <MasterDuke> what about MVM_JIT_EXPR_DISABLE=1 ?

[19:52] <dogbert17> with MVM_JIT_EXPR_DISABLE=1 MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 the problem remains

[19:53] <MasterDuke> timotimo: have you looked at https://github.com/rakudo/rakudo/issues/2013 ? with MVM_SPESH_INLINE_DISABLE=1 it does create a 2.1mb profile, but the most expensive routine (symbol gen/moar/stage2/QASTNode.nqp:936) is only 850ms, which seems odd

[19:54] <MasterDuke> dogbert17: wonder if it's related to https://github.com/MoarVM/MoarVM/issues/862 ?

[19:55] * dogbert17 is watching soccer atm, looks as if the game between England and Colombia might go to overtime

[19:58] <dogbert17> jnthn is probably fuming right now

[20:06] <moritz> that was... close :-)

[20:54] *** AlexDaniel joined
[20:58] *** zakharyas left
[21:15] <jnthn> Can't believe England won a penalty shootout. :P

[21:16] *** Kaiepi joined
[21:16] <AlexDaniel> squashable6: next

[21:16] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 2 days and ‚âà12 hours (2018-07-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[21:20] <stmuk_> jnthn: its some strange alternate time line

[21:20] <jnthn> japhb: My branch is in Rakudo, rather than here. In terms of how close: I could in theory polish the branch up in terms of correctness, sort out the JVM regression still to go, and merge. And we'd get a performance regression to go with it.

[21:22] <jnthn> japhb: Scalar is at the heart of most things, and a bunch of stuff now needs to be re-tuned for the new model. Things that hadn't used to matter so much now matter more.

[21:23] <jnthn> japhb: I've decided to deal with the most pressing aspect of that, then get the branch ready for merge.

[22:04] <japhb> Oh sure, that wasn't pressure.  That was just wondering if a bump was in order to catch NQP/Rakudo up with current MoarVM, or if you were about to merge everything and make such a bump moot.  Turns out the mootness goes the other way, since you're not merging here.  :-)

[22:44] <jnthn> Well, may be worth a bump, though my couple of perf fixes in MoarVM today probably only toouch code paths that the new Scalar stuff uses

[22:58] <jnthn> (Of course, lots of others have done lots of other stuff :))

[22:58] <MasterDuke> it's been almost a week since the last bump

[23:04] <jnthn> Feel free to do one :)

[23:12] <MasterDuke> oooh, an opportunity to use my new rakudo commit bit

[23:15] <AlexDaniel> yes :)

[23:15] * MasterDuke is just double-checking that things build ok

[23:17] <jnthn> AlexDaniel: A quick heads up: the master branch of Rakudo has a long-standing bug where a Proxy was not decont'd in places it should have been (when returned from a non is rw / is raw sub/method). This caught a couple of busted things in Rakudo's source and there's also some spectests that were wrong. I suspect we'll have a little ecosystem fallout.

[23:17] <jnthn> oops, *Fixing this caught

[23:19] <jnthn> Well, if we just ship the fix we will.

[23:19] <jnthn> It's probably possible to put in a bug-compat hack if we gotta.

[23:19] *** Kaiepi left
[23:20] <timotimo> just for one release or until 6.d?

[23:21] *** Kaiepi joined
[23:21] <jnthn> Dunno. Probably we'll have to see what the fallout is.

[23:22] <jnthn> I suspect our ecosystem is too big for it to be zero.

[23:24] <AlexDaniel> jnthn: thanks. OK, we'll see where we stand after a toaster run

[23:24] <jnthn> Yeah, I think that'll be best

[23:26] <AlexDaniel> I'd do it next week if nobody beats me to it

[23:26] <jnthn> OK. I aim to merge later this week.

[23:27] <jnthn> Though the stuff I'll work on tomorrow has risks of being tricker than I'm hoping it will be.

[23:27] <jnthn> Is this a Star release?

[23:28] <AlexDaniel> huggable: star

[23:28] <huggable> AlexDaniel, Estimated Rakudo Star releases: .01, .04, .07 & .10

[23:28] <AlexDaniel> yes

[23:28] <jnthn> Hm, ok.

[23:29] <jnthn> How easy is it to toaster a branch?

[23:29] <AlexDaniel> just as easy as toasting master

[23:29] <jnthn> OK. I wonder if it'd be wise to do that and understand the fallout before merge.

[23:29] <jnthn> releasable6: status

[23:30] <releasable6> jnthn, Next release in ‚âà17 days and ‚âà19 hours. 1 blocker. 0 out of 64 commits logged

[23:30] <releasable6> jnthn, Details: https://gist.github.com/a1d05b8caf8f7c3fa44d791324c07288

[23:30] <jnthn> Ah, 17 days is quite a while

[23:30] <jnthn> That's enough time to deal with fallout.

[23:31] <jnthn> (Of my changes in general)

[23:31] <AlexDaniel> uh, not exactly

[23:31] <AlexDaniel> ugexe++ pointed out an issue some time ago

[23:31] <AlexDaniel> thing is, most users don't upgrade their modules when they upgrade their rakudo

[23:32] <AlexDaniel> so ideally we should give it some time to preseed fixed modules

[23:32] <jnthn> Ah, to be clear: I meant fallout of things my branch breaks that I *don't* know about.

[23:32] <jnthn> Which would almost certainly be things that I just need to fix.

[23:32] <AlexDaniel> right

[23:32] <jnthn> That's separate from the intended/desired behavior change issue I mentioned earlier.

[23:33] <jnthn> greppable6: Proxy

[23:33] <greppable6> jnthn, 359 lines, 69 modules: https://gist.github.com/40efe0efabcc0daba49b4c7ccb891cb6

[23:34] <jnthn> greppable6: Proxy.new

[23:34] <greppable6> jnthn, 163 lines, 48 modules: https://gist.github.com/ae3074335fdc72a4679cd44022571e87

[23:35] <jnthn> greppable6: help

[23:35] <greppable6> jnthn, Like this: greppable6: password # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Greppable

[23:35] <jnthn> Aww, I can't ask for n lines of context :)

[23:35] <AlexDaniel> oh!! That would be so cool!

[23:36] <jnthn> Very, then for most cases I could just look at the report and see if the Proxy is used inside of a sub or method that's not marked rw/raw :)

[23:36] <AlexDaniel> how come I didn't think about it, ack/grep is useless without it

[23:37] <jnthn> It's already really nice to be able to grep all the known modules :)

[23:37] <AlexDaniel> https://github.com/perl6/whateverable/issues/335 :)

[23:38] * AlexDaniel sadly looks at 229 issues

[23:49] <jnthn> Issues just mean somebody cares about it :)

[23:58] <jnthn> 'night o/

