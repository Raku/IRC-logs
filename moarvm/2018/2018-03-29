[00:15] <Geth> Â¦ MoarVM: 32d66d5683 | (Samantha McVey)++ | src/strings/ops.c

[00:15] <Geth> Â¦ MoarVM: Speed up index 50% for flat haystack and diff type needle

[00:15] <Geth> Â¦ MoarVM:

[00:15] <Geth> Â¦ MoarVM: Convert the needle to match the haystack's data type when encountering a

[00:15] <Geth> Â¦ MoarVM: flat haystack (very common since Perl 6 flattens the haystack during

[00:15] <Geth> Â¦ MoarVM: regex).

[00:15] <Geth> Â¦ MoarVM:

[00:15] <Geth> Â¦ MoarVM: Also fix a problem in the 32 bit memmem loop. The loop runs memmem again

[00:15] <Geth> Â¦ MoarVM: <â€¦commit message has 9 more linesâ€¦>

[00:15] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/32d66d5683

[00:16] *** AlexDaniel joined
[00:21] <MasterDuke> samcv: src/strings/ops.c: In function â€˜MVM_string_indexâ€™: src/strings/ops.c:498:51: error: pointer of type â€˜void *â€™ used in arithmetic [-Werror=pointer-arith]                      && ( start_ptr = mm_return_32 + 1) /* Set the new start pointer right after where we left off */

[00:22] <samcv> yep working on it

[00:23] <Geth> Â¦ MoarVM: afdcad424e | (Samantha McVey)++ | src/strings/ops.c

[00:23] <Geth> Â¦ MoarVM: Use char* for pointer addition to please MSVC

[00:23] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/afdcad424e

[00:23] <MasterDuke> not just msvc, gcc complained for me

[00:23] <samcv> ah ok

[00:24] <MasterDuke> hm, didn't really seem to make a difference for me on that code from earlier

[00:24] <samcv> MasterDuke: yeah it doesn't change that code because it is already doing memmem on 8 bit haystack and 8bit needle i believe

[00:25] <samcv> but should improve a ton of other code

[00:25] <MasterDuke> ah, the 32bit part gets converted to 8bit when flattened?

[00:25] <samcv> yeah

[00:26] <MasterDuke> oh well, a good optimization anyway

[00:33] <samcv> it makes indexing a single codeponit needle 2x as fast cool

[00:33] <samcv> index with word needle from 2.0685436 to 0.3240215

[00:33] <samcv> that's pretty big change

[00:35] <samcv> this is my test file https://gist.github.com/adc8d50df303e457ed7cb6b85b66e94e

[00:35] <japhb> samcv: Ready to bump nqp/rakudo?

[00:36] <samcv> that is fine with me. i gotta go to dinner but feel free

[00:37] <samcv> 0.5x-3x faster it seems heh for the newly handled conditions

[00:37] <samcv> not bad

[01:25] *** travis-ci joined
[01:25] <travis-ci> MoarVM build failed. Samantha McVey 'Speed up index 50% for flat haystack and diff type needle

[01:25] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/359632075 https://github.com/MoarVM/MoarVM/compare/15b4b9fb3e4c...32d66d568376

[01:25] *** travis-ci left
[01:54] *** FROGGS joined
[01:56] *** ilbot3 joined
[02:07] <AlexDaniel> well, there we go: R#1667

[02:07] <synopsebot> R#1667 [open]: https://github.com/rakudo/rakudo/issues/1667 [perf] Some string benchmark

[02:10] <MasterDuke> AlexDaniel: are those numbers for the other langs from the article? or did you run them yourself?

[02:10] <AlexDaniel> I did run myself of course

[02:10] <MasterDuke> cool

[02:11] <AlexDaniel> edited the issue a bit to clarify thatâ€¦

[02:11] <MasterDuke> oh, samcv said 32d66d5683 wouldn't really help there

[02:12] <MasterDuke> i think looking at the code inspired the change though

[02:12] <AlexDaniel> oh

[02:13] <AlexDaniel> MasterDuke: where?

[02:14] <MasterDuke> AlexDaniel: https://irclog.perlgeek.de/moarvm/2018-03-29#i_15978231

[02:16] <AlexDaniel> ok

[03:52] *** nativecallable6 joined
[03:52] *** reportable6 joined
[03:52] *** quotable6 joined
[03:54] *** camelia joined
[04:25] *** bartolin joined
[04:49] *** notable6 joined
[05:12] <samcv> MasterDuke, AlexDaniel` working on the collapse_strands issue now

[05:14] <samcv> going to extend the grapheme iterator functions to allow me moving to the next strand. what we already do is start with a MVMGrapheme8 string, and iterate the string into it. if we get something that won't fit in 8 bits we abort and put copy that 8 bit buffer into a 32 bit buffer then continue with the iterator

[05:14] <samcv> copying from an 8bit buffer into a 32 bit buffer is pretty fast. much much faster than using an iterator since it's a very tight loop. instead what we will do is use memcpy to copy any 8bit strands into the new buffer instead of using the iterator

[05:15] <samcv> then using a new graphemeiterator_next_strand function to move to the next strand/repetition after we've done the memcpy

[05:22] <samcv> MasterDuke: and i think i figured out how to get converting 8bit to 32bit strings to use vector SIMD operations

[05:23] <samcv> not going to alter that until i finish this. but would be cool if that can speed things up a lot

[05:58] <samcv> 6

[06:27] *** domidumont joined
[06:32] *** robertle joined
[06:33] *** domidumont joined
[06:53] *** dogbert17 joined
[07:48] *** zakharyas joined
[08:00] *** zakharyas joined
[08:07] *** zakharyas joined
[08:30] *** dogbert17 joined
[09:00] *** zakharyas joined
[09:07] *** zakharyas joined
[09:59] *** brrt joined
[09:59] <brrt> good *

[10:07] *** zakharyas joined
[10:19] <timotimo> yo brrt :)

[10:21] <timotimo> brrt: did you see my question about interp_cur_op and the jit?

[10:21] <brrt> i did not

[10:22] <timotimo> basically, i'm writing code that'll be running when throwpayloadlexcaller runs and i'm wondering if using interp_cur_op gives me a sensible idea of what handlers (only inlines are relevant for this) we're currently in

[10:23] <brrt> it does not

[10:23] <brrt> we should have a function spesh_get_inline_by_position

[10:23] <brrt> and a delegate, jit_get_inline_by_position

[10:23] <timotimo> i need the amount of inlines we're in at that point, though :)

[10:23] <brrt> if the current frame is JITTed

[10:24] <brrt> then you need a spesh_get_inline_depth(inline_nr)

[10:24] <brrt> in general, though

[10:24] <brrt> screw interp_cur_op  :-P

[10:24] <brrt> especially from the PoV from the JIT

[10:25] <timotimo> i just need something, anything ;)

[10:25] <timotimo> doesn't have to be interp_cur_op

[10:31] <brrt> why do you need to know about the inline structure?

[10:31] <brrt> what do you need to know about it

[10:32] <timotimo> well, there's this thing in the profiler where we call prof_exit whenever we leave a frame

[10:32] <timotimo> but if a frame is left via throwpayloadlexcaller, we skip over a prof_exit command

[10:32] <timotimo> (they are inserted into the bytecode)

[10:32] <timotimo> so when we unwind, we have to realize that and properly remove the exact right amount of inlined frames

[10:38] <lizmat> hmmmm   "perl6 --profile -Msnapper -e 'start {}; sleep 1" reliably segfaults for me

[10:39] <lizmat> should I make a ticket, timotimo?

[10:44] <timotimo> huh, that's funny

[10:44] <timotimo> it calls an extop that's out of bounds or something?

[10:47] <lizmat> perhaps starting a thread at compile time ?

[10:47] <lizmat> hmmm...

[10:48] <timotimo> no, threads just call into existing bytecode, and even if we do bytecode generation at run time it goes through the validator

[10:48] <timotimo> we're possibly jumping into bytecode at an improper alignment and reading one byte off to the side or something

[10:50] *** dalek joined
[10:50] *** Geth joined
[10:50] *** p6lert joined
[10:50] *** synopsebot joined
[10:51] *** SourceBaby_ joined
[10:52] *** SourceBaby joined
[11:47] *** domidumont joined
[12:00] *** Voldenet joined
[13:23] *** zakharyas joined
[13:40] *** zakharyas joined
[14:01] *** Util joined
[14:07] *** AlexDaniel joined
[14:27] *** zakharyas joined
[14:29] *** FROGGS joined
[15:31] <dogbert17> .seen timotimo

[15:31] <yoleaux> I saw timotimo 11:14Z in #perl6-dev: <timotimo> eating memory really, really, really fast is often an infinite recursion

[16:07] *** zakharyas joined
[16:12] *** domidumont joined
[16:13] *** zakharyas joined
[16:54] *** zakharyas joined
[17:04] *** zakharyas joined
[17:13] *** zakharyas joined
[18:28] *** Kaiepi joined
[18:39] <Kaiepi> i still don't quite understand what was meant by https://github.com/MoarVM/MoarVM/pull/824#issuecomment-375955795

[18:40] <Kaiepi> can someone explain in more detail?

[19:16] *** Kaiepi joined
[19:27] *** zakharyas joined
[19:30] *** robertle_ joined
[19:47] *** Kaiepi joined
[19:48] *** zakharyas joined
[19:51] <timotimo> i'm not sure if niner is correct in his assumption here

[19:51] <timotimo> but he has done a whole lot of nativecall hacking, whereas i did not

[19:56] <Kaiepi> i need to test more cases, but i was able to get this to work with the additional changes to nqp and rakudo needed https://hastebin.com/niqucumaju.cpp

[20:07] <Kaiepi> yeah, it complains about malformed utf8 when i test for Str with characters outside ascii's range

[20:12] <timotimo> well, you'll still need to set its encoding to something other than utf8

[20:30] <Kaiepi> like this? https://hastebin.com/kimeginata.pl

[20:33] <Kaiepi> oh i got it

[20:34] <Kaiepi> or not

[20:36] <Kaiepi> it only works the first time running test...? https://hastebin.com/ijobayuluz.pl

[20:43] <lizmat> if the JIT log says something like: "Cannot get template for: gt_n", it means what it says, right?

[20:43] <lizmat> that nobody has implemented a JIT template for nqp::gt_n ?

[20:50] *** FROGGS joined
[20:54] <timotimo> do we have floating point stuff in the expr jit yet?

[21:03] *** Kaiepi joined
[21:04] <lizmat> other terms I got: clone, prepargs, sp_findmeth, checkarity,, coerce_ni, bindattrs_o   etc

[21:15] * lizmat takes an early night

[21:16] *** Kaiepi joined
[21:30] <Kaiepi> for the wchar_t stuff, how would i go about debugging what's going on in moarvm?

[22:13] <Kaiepi> should moar be built with -j<core count> by default?

[22:16] <Kaiepi> i tested make -j8 and moar built much more quickly without any of the files getting compiled out of order

[22:39] <timotimo> i usually make -j which basically starts all jobs immediately

[22:39] <timotimo> it's nice and fast and doesn't go wrong at all ever

[22:39] <timotimo> (in moarvm)

[22:46] *** lizmat joined
[22:47] *** MasterDuke joined
[23:13] <Kaiepi> i think i might leave it to the --make flag, or add a --makejobs flag

[23:14] <Kaiepi> detecting how many cores to use isn't feasible for certain oses without Sys::CPU or Sys::Info being available in their package manager

[23:14] <MasterDuke> timotimo: i just realized your branch to fix large profiles might mean i can profile the rakudo build again

[23:14] <timotimo> oh, you can try

[23:15] <timotimo> it's not entirely correct, though

[23:15] <MasterDuke> gonna spin up the vm and give it a shot

[23:30] <MasterDuke> timotimo: `Stage optimize   : Profiling is already started    at <unknown>:1  (<ephemeral file>:) ...`

[23:31] <timotimo> oh, look, that's fascinating

[23:31] <MasterDuke> oh. i had --profile-stage=optimize

[23:32] <timotimo> so maybe that feature is currently also busted. one more for the road

[23:32] <MasterDuke> `MoarVM panic: Profiler lost sequence` with just --profile-compile

[23:32] <timotimo> can you turn off inlining?

[23:35] <MasterDuke> hasn't died yet...

[23:44] <MasterDuke> heh, `Stage parse : 604.735`

[23:52] <MasterDuke> timotimo: huh. just --profile-compile didn't die, and took much longer like it usually does, but no profile was created

[23:52] <MasterDuke> this is with your branch and MVM_SPESH_INLINE_DISABLE=1
