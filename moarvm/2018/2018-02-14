[00:00] *** greppable6 joined
[00:00] *** squashable6 joined
[00:00] *** committable6 joined
[00:00] *** committable6 joined
[00:42] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #802: Fix typos in comments

[00:42] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/802

[00:51] <Geth> Â¦ MoarVM: 0db0645f54 | MasterDuke17++ (committed using GitHub Web editor) | src/io/syncfile.c

[00:51] <Geth> Â¦ MoarVM: Fix typos in comments

[00:51] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0db0645f54

[00:51] <Geth> Â¦ MoarVM: 3a100179cd | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | src/io/syncfile.c

[00:51] <Geth> Â¦ MoarVM: Merge pull request #802 from MasterDuke17/patch-1

[00:51] <Geth> Â¦ MoarVM:

[00:51] <Geth> Â¦ MoarVM: Fix typos in comments

[00:51] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3a100179cd

[02:57] *** ilbot3 joined
[03:50] *** Kaiepi joined
[06:16] *** AlexDaniel joined
[06:42] *** brrt joined
[07:27] *** releasable6 joined
[07:41] *** brrt joined
[07:41] <brrt> good *

[07:41] <yoleaux> 13 Feb 2018 23:09Z <jnthn> brrt: Don't suppose a data breakpoint on the thing we're overwriting could help at al?

[07:41] <brrt> i kind of know where we're overwriting from, so there's that

[07:42] <brrt> or i have a very good suspicion, i should say

[08:05] *** brrt joined
[08:23] *** Voldenet joined
[08:23] *** Voldenet joined
[08:26] <brrt> so, i have a hypothesis

[08:26] <nwc10> good *, brrt

[08:26] <nwc10> more nuanced than "it's software" or "because it hates me" ?

[08:28] <brrt> a bit more than that

[08:29] <brrt> i don't have a hypothesis wrt the getlexstatic_o failure, though

[08:29] <brrt> but that's another matter

[08:29] <brrt> see, the GC fails because it expects to mark an object in the args buffer

[08:29] <brrt> of the frame

[08:31] <brrt> that location in fact contains a small integer (1)

[08:31] <brrt> clearly, that doesn't work

[08:32] <brrt> so, how did a small integer get into the args buffer, you ask

[08:32] <brrt> well...

[08:32] <brrt> there is something i call a 'hack'

[08:32] <brrt> which is the istrue_o hack

[08:34] <brrt> iirc, for if_o, the VM allocates a bit of memory to hold the return argument if the istrue is a method call

[08:34] <brrt> and, long story short, we don't

[08:34] <brrt> (the JIT does not)

[08:51] <brrt> so what we use instead is use the args buffer to keep our boolean return value

[08:52] <brrt> and sometimes, that args buffer should really have held an object rather than a number

[08:52] <brrt> my guess is, the reason we don't get away with that, is that the expr JIT allocates more registers

[08:53] <brrt> and we compute a fixed register offset for our purposes

[08:53] <brrt> (for the istrue hack)

[08:53] <brrt> so these things are just incompatible

[08:54] <brrt> luckily, we currently have a mechanism to allocate a new register in the JIT

[08:54] <brrt> and mark it an integer, no less

[09:12] *** zakharyas joined
[09:37] *** zakharyas joined
[10:02] <brrt> well, i confirmed one hypothesis, which is that in broken version, we have two spilled registers, and in the correct version, we have none

[10:16] <nine> progress!

[10:18] <Kaiepi> what are you working on?

[11:02] <brrt> i'm working on an evil bug

[11:02] <brrt> that looked like a miscompile but wasn't

[11:04] <Kaiepi> damn those aren't fun

[11:05] <brrt> :-)

[11:05] <brrt> well,

[11:05] <brrt> it's also a nice bit of detective works

[11:05] <brrt> *work

[11:19] *** Kaiepi joined
[11:47] <brrt> hmm, annoyingly, the spill memory thing i was planning to use isn't a thing at that point in the program

[11:47] <brrt> because it only exists for the compiler

[11:47] <brrt> which isn't initialized during graph building

[11:48] <brrt> this would not be a problem if we just did one-pass compilation

[11:56] *** Kaiepi joined
[12:22] <timotimo> maybe now that this huge leak has been removed we'll want to consider an earlier rakudo star re-release this time

[12:43] *** brrt joined
[12:48] <brrt> i have my doubts about the MVM_spesh_get_temp_reg bit

[12:48] <brrt> specifically about the in_use

[12:52] <brrt> because it only works if you are processing the thing in a specific order

[13:03] <brrt> which is no good for me as i'm processing the graph long after spesh has processed it

[13:03] <brrt> so i'm thinking of allocating-and-caching a special istrue field in the jit graph structure

[13:27] *** zakharyas joined
[13:30] *** zakharyas joined
[13:38] *** lizmat joined
[13:48] *** Voldenet joined
[13:48] *** Voldenet joined
[14:29] *** zakharyas joined
[14:29] *** unicodable6 joined
[14:54] *** evalable6 joined
[15:01] *** AlexDaniel joined
[15:02] <dogbert11> does MVM_JIT_DISABLE also turn off the expr jit?

[15:05] <timotimo> yes, you can't have exprjit without the template jit

[15:06] <dogbert11> timotimo, thx

[15:08] <dogbert11> timotimo: one more q, does the jit run if MVM_SPESH_DISABLE=1 ?

[15:10] <timotimo> it does not

[15:10] <timotimo> we could make it possible with a bit of work

[15:11] <dogbert11> aha, plating around a bit with the JIT bug, noticed that MVM_SPESH_DISABLE=1 made it disappear

[15:11] <dogbert11> *playing

[15:11] <dogbert11> as did MVM_SPESH_NODELAY=1

[15:15] <timotimo> yeah, spesh disable will kick out everything

[15:16] *** bisectable6 joined
[15:33] * dogbert11 wonders what the env vars MVM_JIT_EXPR_LAST_FRAME and MVM_JIT_EXPR_LAST_BB does

[15:46] *** zakharyas joined
[16:21] *** brrt joined
[16:21] <brrt> which JIT bug?

[16:22] <brrt> MVM_JIT_EXPR_LAST_FRAME and MVM_JIT_EXPR_LAST_BB restrict the expression JIT to a subset of compiled frames and basic-blocks within those frames

[16:27] <dogbert11> brrt: https://github.com/rakudo/rakudo/issues/1483

[16:27] <brrt> yeah, i know about that one

[16:28] <brrt> i'm working on a fix :-)

[16:28] <dogbert11> I noticed that it disappeared if MVM_JIT_EXPR_LAST_FRAME <= 40 but crashed for values > 40, so I became curious

[16:29] <brrt> uhuh

[16:29] <brrt> i use it for bisecting miscompiles

[16:29] <brrt> i.e. i can set MVM_JIT_EXPR_LAST_FRAME to increasing (doubling) values

[16:29] <brrt> and then use binary search when i find a broken frame

[16:29] <brrt> eh, a broken compile

[16:29] <brrt> same for MVM_JIT_EXPR_LAST_BB

[16:30] <brrt> but, note that it needs MVM_SPESH_BLOCKING to work correctly

[16:30] <dogbert11> aha

[16:32] <dogbert11> that changes the numbers a bit, I get

[16:32] <dogbert11> MVM_SPESH_BLOCKING=1 MVM_JIT_EXPR_LAST_FRAME=51 ./perl6 -e 'for 1..1000 { $^i %% $_ && put "$_ " for ^$i }'  # works

[16:32] <dogbert11> MVM_SPESH_BLOCKING=1 MVM_JIT_EXPR_LAST_FRAME=52 ./perl6 -e 'for 1..1000 { $^i %% $_ && put "$_ " for ^$i }' # fails

[16:44] <brrt> uhuh

[16:44] <brrt> it's block 52 frame 6 (on linux), (51 frame 6 on os x, for me)

[16:44] <brrt> i know where it's going wrong :-)

[16:45] <brrt> anyway, the toolsjit-bisect.pl program does all that automatically

[16:45] <brrt> tools/jit-bisect.pl

[16:45] <brrt> including checking if the issue is bisectable in this way

[17:21] *** zakharyas joined
[17:31] *** zakharyas joined
[17:33] <dogbert11> brrt++

[17:47] *** zakharyas joined
[18:15] *** zakharyas joined
[18:46] *** brrt joined
[18:46] *** AlexDaniel joined
[18:48] <brrt> .ask jnthn if he'd object that i move the if_o / istrue hack upwards to spesh graph processing

[18:48] <yoleaux> brrt: I'll pass your message to jnthn.

[19:00] *** Ven`` joined
[19:03] *** Ven` joined
[19:05] *** Ven` joined
[19:13] <japhb> jnthn: Why does MoarVM commit 004680a03a0 refer to tc->cur_frame in the middle of the new return line rather than just cur_frame?

[19:22] *** Ven`` joined
[20:15] *** Ven`` joined
[20:44] *** zakharyas joined
[20:44] <jnthn> .tell brrt I think we already rewrite that op when we can there anyway, so it probably will work out OK

[20:44] <yoleaux> 18:48Z <brrt> jnthn: if he'd object that i move the if_o / istrue hack upwards to spesh graph processing

[20:44] <yoleaux> jnthn: I'll pass your message to brrt.

[20:45] <jnthn> shareable6: 004680a03a0

[20:45] <shareable6> jnthn, https://whateverable.6lang.org/004680a03a0

[20:45] <jnthn> hm, that's a 404

[20:45] <jnthn> AlexDaniel: Is shareable6 for turning a sha1 into a link to where it lives, or did I misunderstand? :)

[20:46] <ingy> hi jnthn :)

[20:46] <jnthn> japhb: looks like I forgot to update that

[20:46] <jnthn> o/ ingy

[20:54] <AlexDaniel`> jnthn: yes, but then it also serves these files

[20:55] <AlexDaniel> but at this moment it does not perform any checks

[20:55] <AlexDaniel> is that a moarvm commit?

[20:55] <AlexDaniel> https://whateverable.6lang.org/004680a03a0?type=moarvm

[20:55] <AlexDaniel> jnthn: â†‘

[20:56] <jnthn> oh, right, I was just hoping for a github link :P

[20:57] <jnthn> Is there a bot that does that? :)

[20:57] <AlexDaniel> https://github.com/perl6/whateverable/issues/289

[20:57] <AlexDaniel> Hah, not yet. There was supposed to be a bot for that

[20:57] <AlexDaniel> guessable

[20:57] <AlexDaniel> but NYI :)

[20:58] <jnthn> Ah...I wrongly guessed that's what shareable might do :-)

[20:59] <timotimo> i'd also enjoy a commandline tool that just searches all my perl6 repos for a sha1

[20:59] <AlexDaniel> jnthn: well, the main goal for shareable is to make it easier for contributors to run these bots. Now you don't have to build hundreds of different rakudo versions, you just start the bot and if some build is not found it's just pulled from the server

[20:59] <jnthn> oh, neat :)

[20:59] <AlexDaniel> and that already works actually

[21:00] <timotimo> *neat*

[21:01] <jnthn> Yeah, it's very cool. Just not the thing I happened to need this time :)

[21:01] <jnthn> walk, bbiab

[21:05] *** zakharyas joined
[21:06] *** zakharyas joined
[21:31] *** Ven`` joined
[21:51] *** Ven`` joined
[22:04] <samcv> good *

[22:05] *** Ven`` joined
[22:08] <dogbert11> hello samcv

[22:09] *** brrt joined
[22:10] <brrt> ohai samcv

[22:10] <yoleaux> 20:44Z <jnthn> brrt: I think we already rewrite that op when we can there anyway, so it probably will work out OK

[22:11] <brrt> ok got it, then that's what i'll attempt to do

[22:18] <AlexDaniel> samcv: o/

[22:18] <AlexDaniel> samcv: up for the release this weekend, right?

[22:18] <samcv> did we get the JIT bug resolved yet?

[22:19] <AlexDaniel> https://github.com/rakudo/rakudo/issues/1483

[22:19] <AlexDaniel> (has some discussion on that)

[22:23] <samcv> imo if it can be fixed within a shortish period of time we should delay the release

[22:23] *** Kaiepi joined
[22:25] *** Kaiepi joined
[22:26] *** MasterDuke joined
[22:28] <timotimo> well, we can throw out istrue from the exprjit and it won't have the problem any more, right? or even if it needs to be kicked out of the template jit, not such a gigantic problem

[22:28] <timotimo> though i might be misunderstanding something

[22:50] *** Kaiepi joined
