[00:04] *** d4l3k_ joined
[00:06] *** jsimonet left
[00:06] *** dalek left
[00:06] *** d4l3k_ is now known as dalek

[00:06] *** Geth left
[00:06] *** ZofBot left
[00:06] *** synopsebot left
[00:08] *** greppable6 left
[00:08] *** greppable6 joined
[00:12] *** ChanServ left
[00:14] *** jsimonet joined
[00:33] *** ChanServ joined
[00:33] *** tolkien.freenode.net sets mode: +o ChanServ

[00:37] *** AlexDaniel`` left
[00:37] *** wictory[m] left
[00:38] *** ilmari[m] left
[00:40] *** greppable6 left
[00:40] *** greppable6 joined
[00:41] *** squashable6 left
[00:41] *** benchable6 left
[00:41] *** coverable6 left
[00:41] *** undersightable6 left
[01:05] *** ilmari[m] joined
[01:27] *** shareable6 joined
[01:29] <MasterDuke> re the recent hash table discussion: https://probablydance.com/2018/05/28/a-new-fast-hash-table-in-response-to-googles-new-fast-hash-table/

[01:31] *** shareable6 left
[01:38] *** coverable6 joined
[01:38] *** benchable6 joined
[01:38] *** squashable6 joined
[01:39] <samcv> MasterDuke: i wish they made it in C and not C++

[01:45] *** ilbot3 left
[01:47] *** AlexDaniel`` joined
[01:47] *** wictory[m] joined
[01:47] *** shareable6 joined
[01:54] *** shareable6 left
[01:58] *** ilbot3 joined
[02:05] <MasterDuke> yeah, would be nice

[03:07] *** shareable6 joined
[03:11] *** shareable6 left
[03:22] *** buggable left
[03:22] *** huggable left
[03:22] *** ZofBot joined
[03:22] *** huggable joined
[03:22] *** buggable joined
[03:23] *** p6lert left
[03:23] *** p6lert joined
[03:23] *** SourceBaby joined
[03:32] *** shareable6 joined
[03:33] *** shareable6 left
[03:33] *** shareable6 joined
[03:35] *** shareable6 left
[03:37] *** shareable6 joined
[03:39] *** shareable6 left
[03:39] *** shareable6 joined
[03:42] *** shareable6 left
[03:42] *** shareable6 joined
[03:46] *** shareable6 left
[03:57] *** shareable6 joined
[04:03] *** shareable6 left
[04:03] *** shareable6 joined
[04:05] *** shareable6 left
[05:13] *** MasterDuke left
[06:25] *** brrt joined
[06:39] *** domidumont joined
[06:45] *** domidumont left
[06:46] *** domidumont joined
[07:56] *** zakharyas joined
[07:58] *** shareable6 joined
[08:19] *** zakharyas left
[08:19] *** zakharyas joined
[08:37] *** Tison joined
[08:39] <Tison> How does MoarVM dump bytecode?

[08:39] <Tison>  I have a simple p6 program named main.p6 contains `say "Hello"`

[08:40] <Tison> then execute `perl6 --target=mbc  --output=main.moarvm main.p6`

[08:40] <Tison> then execute `moar --dump main.moarvm`

[08:40] <Tison> I can see string "Hello" in main.moarvm, but not in its dump

[08:40] <Tison> confused now ...

[08:47] *** brrt left
[08:56] <Tison> also in the dump code, I lost variable names. It seems things like `loc_5_obj` represent them, but isn't it nearly unreadable?

[09:10] *** undersightable6 joined
[09:48] <Tison> BTW, here is a question on ZhiHu, Chinese Quora, "what do you think of "

[09:49] <Tison> "What do you think of MoarVM"

[09:49] <Tison> https://www.zhihu.com/question/278445209

[09:50] <jnthn> It'll be because the string compiles into a Perl 6 Str object, so it's in the serialized object blob

[09:52] <Tison> If you guys have some spare time, why not give a brief talk about MoarVM? Also I'm glad to be delegated to post it.

[09:52] <Tison> jnthn: Alright, at least I know why :-)

[09:53] <jnthn> Tison: I did give one on MoarVM's optimization stuff recently :)

[09:57] <Tison> of course, I'll try to gather so many your slides and talks and give my own answer on it. (Though I really know little about MoarVM)

[10:01] <Tison> even integers be serialized? I cannot see literal integers also

[10:03] <Tison> &

[10:08] *** Tison left
[10:10] *** domidumont left
[10:35] *** brrt joined
[10:35] <brrt> good hi #moarvm

[10:39] <lizmat> brrt o/

[10:43] <AlexDaniel> squashable6: next

[10:43] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 1 day and ≈23 hours (2018-06-02 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[11:00] <brrt> ohai lizmat

[11:37] *** zakharyas left
[11:57] *** Tison joined
[12:24] *** brrt left
[12:38] *** zakharyas joined
[13:06] *** brrt joined
[13:19] *** Tison left
[13:24] <brrt> heh, i forgot i had a MVM_JIT_DEBUG flag for validating the position in code

[13:27] <timotimo> https://medium.com/netflix-techblog/netflix-flamescope-a57ca19d47bb - shiny!

[13:53] *** AlexDaniel left
[13:53] *** AlexDaniel joined
[14:39] *** domidumont joined
[15:03] *** committable6 joined
[15:50] *** Tison joined
[15:55] *** synopsebot joined
[15:55] *** Geth joined
[15:57] *** tadzik1 joined
[15:57] *** tadzik1 left
[16:01] *** tadzik1 joined
[16:02] *** zakharyas left
[16:02] *** tadzik1 is now known as tadzik

[16:07] *** zakharyas joined
[16:27] *** brrt left
[16:30] *** zakharyas left
[17:16] *** samcv left
[17:22] *** samcv joined
[17:36] *** Tison left
[18:25] <samcv> timotimo: so what's with the debugserver.c doesn't always return a value? that gonna be fixed?

[18:25] <samcv> clang complains every time and coverity is also unhappy

[18:37] <lizmat> #132209

[18:37] <lizmat> oops

[18:39] <timotimo> it's gonna be fixed

[18:45] *** zakharyas joined
[19:02] *** domidumont left
[19:07] <Geth> ¦ MoarVM: e2afa7fbc8 | (Samantha McVey)++ | 3 files

[19:07] <Geth> ¦ MoarVM: Speed up the NFA by using a cached grapheme iterator

[19:07] <Geth> ¦ MoarVM:

[19:07] <Geth> ¦ MoarVM: We use a cached grapheme iterator to access graphemes in the string

[19:07] <Geth> ¦ MoarVM: which should give us a nice speed improvement relative to the number of

[19:07] <Geth> ¦ MoarVM: grapheme accesses the NFA makes in the course of its operation on a

[19:07] <Geth> ¦ MoarVM: single call.

[19:07] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e2afa7fbc8

[19:10] <Geth> ¦ MoarVM: 26ab289617 | (Samantha McVey)++ | src/strings/unicode_ops.c

[19:10] <Geth> ¦ MoarVM: Fix bounds issue in unicode collation (though not possible to trigger)

[19:10] <Geth> ¦ MoarVM:

[19:10] <Geth> ¦ MoarVM: This can't be triggered since we don't have anywhere near 10 graphemes

[19:10] <Geth> ¦ MoarVM: in a collation rule, but change it anyway. Since we increase the value

[19:10] <Geth> ¦ MoarVM: of i immediately after the conditional, that could make i == 10 for an

[19:10] <Geth> ¦ MoarVM: array with only 10 elements and cause it to go past its bounds.

[19:10] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/26ab289617

[19:15] <timotimo> someone want to implement pow_i for the jit real quick ...

[19:15] *** zakharyas left
[19:15] *** zakharyas joined
[19:23] *** travis-ci joined
[19:23] <travis-ci> MoarVM build passed. Samantha McVey 'Speed up the NFA by using a cached grapheme iterator

[19:23] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/385844677 https://github.com/MoarVM/MoarVM/compare/db502912281f...e2afa7fbc870

[19:23] *** travis-ci left
[19:26] <Geth> ¦ MoarVM: 4708018084 | (Samantha McVey)++ | src/strings/shiftjis.c

[19:26] <Geth> ¦ MoarVM: Fix potential issue in shiftjis decoder if replacement had synthetic -1

[19:26] <Geth> ¦ MoarVM:

[19:26] <Geth> ¦ MoarVM: Use a separate variable to denote if the grapheme has been set instead

[19:26] <Geth> ¦ MoarVM: of using a magic value for the grapheme.

[19:26] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4708018084

[19:33] *** travis-ci joined
[19:33] <travis-ci> MoarVM build passed. Samantha McVey 'Fix bounds issue in unicode collation (though not possible to trigger)

[19:33] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/385845821 https://github.com/MoarVM/MoarVM/compare/e2afa7fbc870...26ab2896170e

[19:33] *** travis-ci left
[19:56] *** zakharyas left
[20:23] *** klapperl left
[20:36] <Geth> ¦ MoarVM: 586950bf07 | (Samantha McVey)++ | src/strings/unicode_ops.c

[20:36] <Geth> ¦ MoarVM: Fix the number of items in the collation union

[20:36] <Geth> ¦ MoarVM:

[20:36] <Geth> ¦ MoarVM: This doesn't change anything except make the code more clear since the

[20:36] <Geth> ¦ MoarVM: union never overflowed because C allocates the largest item in the

[20:36] <Geth> ¦ MoarVM: union. It does make the code clearer and make much more sense though.

[20:36] <Geth> ¦ MoarVM: Issue detected by coverity.

[20:36] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/586950bf07

[21:08] <timotimo> https://gist.github.com/orlp/3551590

[21:08] <timotimo> do we want a better pow impl?

[21:09] <timotimo> m: use nqp; say nqp::pow_i(10, 10000)

[21:09] <camelia> rakudo-moar affc218f8: OUTPUT: «0␤»

[21:09] <timotimo> m: use nqp; say nqp::pow_i(10, 1000)

[21:09] <camelia> rakudo-moar affc218f8: OUTPUT: «0␤»

[21:09] <timotimo> m: use nqp; say nqp::pow_i(10, 100)

[21:09] <camelia> rakudo-moar affc218f8: OUTPUT: «0␤»

[21:09] <timotimo> m: use nqp; say nqp::pow_i(10, 10)

[21:09] <camelia> rakudo-moar affc218f8: OUTPUT: «10000000000␤»

[21:10] <timotimo> it's fine to return 0 for those far-too-high values?

[21:21] <timotimo> in any case, having special implementations of pow for an exponent of 2 would surely be wise :)

[21:22] <timotimo> in the jit, i mean

[21:34] <dogbert17> timotimo: trying to --profile rindolf's code doesn't work that well ...

[21:40] *** klapperl joined
[21:48] <timotimo> oh?

[21:48] <timotimo> worked well on my end, though i reduced the $N by a lot to do it

[22:18] <samcv> darn my changes to nfa probably haven't helped at all since the stringe we call it on compiling the setting is a flat string

[23:12] <timotimo> oh, we always flatten strings for the regex engine, right?

