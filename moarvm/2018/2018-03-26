[00:03] <MasterDuke> man, all sorts of exciting stuff landed this weekend

[00:04] <timotimo> so how did it go back up to 10 gc runs i wonder

[00:06] <timotimo> what other things excite you, MasterDuke?

[00:08] <MasterDuke> how much i'm enjoying pubg mobile

[00:12] <timotimo> haha

[00:13] <timotimo> i was thinking more along the lines of rakudo-related stuff :)

[00:15] <MasterDuke> you're making profiling better, zoffix is making number stringification better/faster, nine is doing cool stuff with the build, etc

[00:16] <timotimo> i agree on the latter two :P

[00:16] <timotimo> and the etc

[00:16] <timotimo> i'm not making good progress with the profiler bits :|

[00:18] <MasterDuke> well, i'm not doing anything much at all, so you're ahead of me

[00:18] <timotimo> you're among the folks providing me with profiler bugs %)

[00:19] <timotimo> i just replaced the call to .sum with a tiny "clever trick"

[00:20] <MasterDuke> oh?

[00:20] <timotimo> yup, the original code goes kind of like this:

[00:20] <timotimo> set up an array of a few zeroes so we can smooth out consecutive readings

[00:20] <timotimo> every frame, shift off the first measurement, push a new measurement at the end, calculate the sum

[00:21] <timotimo> the new code just subtracts the shifted-off value and adds the pushed value and keeps the value around

[00:21] <MasterDuke> ah, nice

[00:22] <timotimo> the call to the sum method was pessimized because it created an empty hash that went unused every time around (because named arguments)

[00:23] <timotimo> we can often throw those away, but not in this case :(

[00:25] <timotimo> wait, was the sum call already optimized properly the last time?

[00:25] <timotimo> the allocations are real low now

[00:26] <timotimo> i'll do a 300 second measurement

[00:26] <timotimo> this one was only a minute long, but it also only had 1 gc run

[00:26] <timotimo> i'm hopeful :)

[00:27] <timotimo> i'd really like less than one run per minute

[00:29] <timotimo> so a young object has two minutes to become unreferenced before it is incorrectly assumed to be long-lived (because it survived two nursery collections)

[00:31] <timotimo> nice. 3 gcs over 5 minutes

[00:35] <MasterDuke> seems pretty good

[00:36] <timotimo> i'm not completely done yet

[00:37] <timotimo> i don't think i can remove the BOOTHash allocs from prod-affinity-workers, and i can't remove the BOOTIntArray allocation from nqp::rusage, but i can perhaps get rid of the Int allocation from getrusage-total

[00:38] <MasterDuke> is it going to julienne fries when you're done?

[00:41] <timotimo> i don't know what that is :o

[00:41] <timotimo> first attempt didn't work, anyway

[00:44] <MasterDuke> "it slices, it dices, it even does juilienne fries!"

[00:45] <MasterDuke> just a trope about over-the-top ads for things

[00:46] <MasterDuke> to julienne something is to cut it into long thin slices

[00:48] <timotimo> ah, ok

[00:49] <timotimo> waiting for a 600s profile to finish now %)

[00:49] <timotimo> didn't even do a short one first to see if my second approach would work

[00:53] <timotimo> when will it finish ...

[00:53] <timotimo> there it is

[00:54] <timotimo> i doubled the amount of allocations :D

[00:58] <timotimo> nope, can't get it to go away. oh well.

[01:09] <timotimo> pushed the branch

[01:10] <Geth> Â¦ MoarVM: 5cff02dafe | (Timo Paulssen)++ | 3 files

[01:10] <Geth> Â¦ MoarVM: jit a few ops that ThreadPoolScheduler uses

[01:10] <Geth> Â¦ MoarVM:

[01:10] <Geth> Â¦ MoarVM: in particular, these are used by the supervisor

[01:10] <Geth> Â¦ MoarVM: thread that wakes up 100x per second.

[01:10] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5cff02dafe

[01:10] <Geth> Â¦ MoarVM: e7fee68f1d | (Timo Paulssen)++ | src/profiler/instrument.c

[01:10] <timotimo> and the new jitted ops

[01:10] <Geth> Â¦ MoarVM: getrusage allocates, so log that in the profile.

[01:10] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e7fee68f1d

[01:10] <Geth> Â¦ MoarVM: 621ca3c220 | (Timo Paulssen)++ | src/spesh/facts.c

[01:10] <Geth> Â¦ MoarVM: discover type of getrusage in spesh

[01:10] <Geth> Â¦ MoarVM:

[01:10] <Geth> Â¦ MoarVM: this allows devirtualization of atpos_i accesses

[01:10] <Geth> Â¦ MoarVM: to getrusage's result. Probably barely worth

[01:10] <Geth> Â¦ MoarVM: anything cpu-time wise.

[01:10] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/621ca3c220

[01:12] <MasterDuke> cool

[01:13] <timotimo> i'll write up a pull request for the TPS supervisor stuff

[01:14] <timotimo> i'll also do a full measurement at 5 minutes run time

[01:18] *** reportable6 joined
[01:19] <timotimo> 5 minutes is so long %)

[01:26] *** bisectable6 joined
[01:29] *** evalable6 joined
[01:35] <timotimo> https://github.com/rakudo/rakudo/pull/1653

[01:35] *** FROGGS_ joined
[01:36] <timotimo> bedtime

[01:55] <MasterDuke> nice, later...

[01:57] *** ilbot3 joined
[02:37] *** AlexDaniel joined
[05:08] *** committable6 joined
[05:08] *** bisectable6 joined
[05:58] *** domidumont joined
[06:07] *** domidumont joined
[06:22] *** domidumont joined
[07:08] *** robertle joined
[08:06] *** domidumont joined
[09:02] *** domidumont joined
[11:21] *** avar joined
[12:26] *** reportable6 joined
[13:20] *** reportable6 joined
[13:29] *** AlexDaniel joined
[14:34] *** notable6 joined
[14:34] *** nativecallable6 joined
[14:34] *** bloatable6 joined
[14:34] *** committable6 joined
[14:34] *** coverable6 joined
[14:34] *** greppable6 joined
[14:34] *** evalable6 joined
[14:34] *** quotable6 joined
[14:34] *** releasable6 joined
[14:34] *** benchable6 joined
[14:34] *** unicodable6 joined
[14:34] *** shareable6 joined
[14:34] *** squashable6 joined
[14:34] *** bisectable6 joined
[14:34] *** statisfiable6 joined
[14:36] *** reportable6 joined
[15:24] *** FROGGS joined
[15:42] *** greppable6 joined
[15:43] *** greppable6 joined
[15:46] *** domidumont joined
[15:53] *** dogbert17 joined
[16:05] *** geospeck joined
[16:05] *** geospeck left
[16:06] <timotimo> wow. if we change getrusage to fill a given array, we actually can get the supervisor allocation-free! holy cow.

[16:08] <timotimo> that is, if inlining prod-affinity-workers doesn't cause allocations of closures or something

[16:11] <timotimo> awesome! there's only BOOTIntArray allocations remaining and a few types of objects that are allocated far less often

[16:20] <Geth> Â¦ MoarVM: 7198eb8014 | (Jonathan Worthington)++ | src/io/procops.c

[16:20] <Geth> Â¦ MoarVM: Convey the process ID of a started child

[16:20] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7198eb8014

[16:22] <timotimo> jnthn: do you think making getrusage fill an int array for you instead of allocating one every time it's run is sane?

[16:22] <timotimo> *doc brown voice* if my calculations are correct, when this baby runs for 88 hours, you'll see some sick shit!

[16:33] <timotimo> hell yeah!

[16:33] <timotimo> ran for 300 seconds, 0 gc runs

[16:33] <timotimo> it doesn't look like it's allocating anything during its main loop

[16:34] <jnthn> timotimo: Hmm, I guess we could

[16:34] <timotimo> i haven't looked at tweak-workers at all yet, fwiw, because in an empty program it doesn't run

[16:35] <timotimo> and if the program's doing work, it's probably fine for the supervisor to allocate because the other work stuff is also likely to allocate

[16:55] <Geth> Â¦ MoarVM: fdb5e4d6bb | (Timo Paulssen)++ | 9 files

[16:55] <Geth> Â¦ MoarVM: make getrusage op modify an existing array

[16:55] <Geth> Â¦ MoarVM:

[16:55] <Geth> Â¦ MoarVM: instead of allocating one in the op itself.

[16:55] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/fdb5e4d6bb

[19:19] <Geth> Â¦ MoarVM/spesh-refactor-iffy: 5 commits pushed by (Bart Wiegmans)++

[19:19] <Geth> Â¦ MoarVM/spesh-refactor-iffy: 1a828139f9 | [Spesh] remove object boolification from optimize_iffy

[19:19] <Geth> Â¦ MoarVM/spesh-refactor-iffy: 5a6eb34701 | [Spesh] Optimize known values for istrue

[19:19] <Geth> Â¦ MoarVM/spesh-refactor-iffy: 74b2f29bac | [Spesh] optimize more cases of istrue known type

[19:19] <Geth> Â¦ MoarVM/spesh-refactor-iffy: 26699581c3 | [Spesh] unbreak rakudo by not optimizing isconcrete in istrue

[19:19] <Geth> Â¦ MoarVM/spesh-refactor-iffy: bcba53ab77 | [Spesh] Switch order of insert

[19:19] <Geth> Â¦ MoarVM/spesh-refactor-iffy: review: https://github.com/MoarVM/MoarVM/compare/28e76057e68b...bcba53ab7786

[20:29] *** brrt joined
[20:31] <brrt> \o

[20:37] <timotimo> o/

[20:45] <Geth> Â¦ MoarVM/spesh-refactor-iffy: 8fecf3bfae | (Bart Wiegmans)++ | src/spesh/optimize.c

[20:45] <Geth> Â¦ MoarVM/spesh-refactor-iffy: [Spesh] Add optimize_unbox

[20:45] <Geth> Â¦ MoarVM/spesh-refactor-iffy:

[20:45] <Geth> Â¦ MoarVM/spesh-refactor-iffy: The original optimize_iffy had a special loop for unboxing boxed

[20:45] <Geth> Â¦ MoarVM/spesh-refactor-iffy: integers (and other things). I've taken that out and generalized it

[20:45] <Geth> Â¦ MoarVM/spesh-refactor-iffy: for 'unbox' operations. But as far as I've been able to determine,

[20:45] <Geth> Â¦ MoarVM/spesh-refactor-iffy: that isn't actually effective (the optimization is never

[20:45] <Geth> Â¦ MoarVM/spesh-refactor-iffy: applied). Maybe that is because rakudo outputs better code than

[20:45] <Geth> Â¦ MoarVM/spesh-refactor-iffy: <â€¦commit message has 6 more linesâ€¦>

[20:45] <Geth> Â¦ MoarVM/spesh-refactor-iffy: review: https://github.com/MoarVM/MoarVM/commit/8fecf3bfae

[20:45] <brrt> I am going to make a pull request for that

[20:46] <timotimo> brrt: we probably have lots of p6box_i instructions, those would probably not be picked up by this opt, right?

[20:46] <brrt> it basically splits a bunch of optimizations in optimize_iffy in simpler optimizations that can be applied on individual opts

[20:46] <timotimo> oh, it doesn't actually check for the opcode at all, nice.

[20:46] <brrt> not sure, but that is plausible

[20:47] <brrt> well, you wrote that code

[20:47] <brrt> years ago

[20:47] <timotimo> yeah, i only just recognized that it's mine :D

[20:47] <brrt> it is correct, I think, but I don't think it is actually useful anymore

[20:49] <brrt> because the actual optimization is not applied anywhere in nqp + rakudo build

[20:50] <timotimo> right

[20:50] <timotimo> i bet our coverage shows that

[20:50] <timotimo> https://moarvm.github.io/coverage/libmoar/coverage/home/travis/build/MoarVM/MoarVM/src/spesh/optimize.c.html#L372 - check it out!

[20:51] <timotimo> so it looks like we never reach safety_cur == cur; maybe because it doesn't try to cross BB boundaries?

[20:55] <timotimo> do you think the iffy refactor is ready to hit master?

[20:56] <timotimo> i really, really want some way to put messages about the spesh process right into the spesh log in an easy-to-reference place ...

[21:00] <timotimo> in graph 0x7f048c0c17f0 bb 0x7f048c1576e8 optimized an unbox coming from bb 0x7f048c157688

[21:00] <timotimo> MoarVM panic: Register types do not match between value and node

[21:00] <timotimo> fun!

[21:14] *** brrt joined
[21:14] <timotimo> this'll be a ginormous trace ...

[21:16] <timotimo> no big deal, just 15 megs of diff

[21:16] <timotimo> https://gist.githubusercontent.com/timo/6961fe5ea46a137419f3f818ff4e3753/raw/4c982f7785e70ce7138ca06a7f1a5c318df90f27/gistfile1.txt

[21:17] <timotimo> https://gist.github.com/timo/c0381e1b843524a8e8098314e12bceaf - this tells you when exactly the unbox_i optimization took place

[21:19] <timotimo> what the heck? sometimes it switches to a different spesh graph

[21:20] <timotimo> that's why the diffs are so humongous

[21:20] <timotimo> because it's got a full copy of the one graph every few commits

[21:26] <timotimo> turned inlining off, now it's only 1.5 megs <3

[21:27] <timotimo> https://gist.github.com/timo/31244796c1022639ced727d872602682 - github still truncates it :<

[21:28] <timotimo> should be in commits f56ff15 and af2a4e2 this time, BBs 0x7ffff008c7f8 â†’ 0x7ffff008c858 and 0x7ffff008cc18 â†’ 0x7ffff008cbb8  should have the optimization in them

[21:32] <timotimo> aha!

[21:32] <timotimo> it was taking the result of the box_i (or similar) rather than the first argument

[21:33] <timotimo> surprise surprise it doesn't crash any more (in the exact same spot at least)

[21:37] <timotimo> not sure why, but i get a bunch of failures with telemetry again

[21:40] <timotimo> fails with spesh disabled, too, though ... so not my fault :D

[21:40] <timotimo> unless my optimization subtly broke the compiler

[21:44] <timotimo> nope, even if i build all of rakudo with spesh disabled it still fails those tests

[21:54] *** committable6 joined
[21:55] *** committable6 joined
[21:56] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/03/26/2018-13-apply-perl-6/

[22:10] * timotimo runs a stresstest with the fixed version of optimize_unbox

[22:15] *** brrt joined
[22:34] <jnthn> timotimo++ # nice blog post

[22:34] <timotimo> thanks :3

[22:41] *** undersightable6 joined
[22:52] *** undersightable6 joined
