[00:12] *** MissionCritical joined
[00:15] *** regreg left
[00:17] *** MissionCritical left
[01:37] *** yaymuffins24 joined
[01:39] *** yaymuffins24 left
[02:38] *** bitch24 joined
[02:38] *** bitch24 left
[02:47] *** Auctus0 joined
[02:47] *** Auctus0 left
[04:07] *** Selfsigned11 joined
[04:09] *** Selfsigned11 left
[04:29] *** regreg joined
[04:29] *** p6bannerbot sets mode: +v regreg

[04:36] *** ZzZombo joined
[04:36] *** p6bannerbot sets mode: +v ZzZombo

[04:49] *** nate23 joined
[04:52] *** nate23 left
[05:00] *** Cronus19 joined
[05:01] *** Cronus19 left
[05:04] *** biberao0 joined
[05:04] *** slackjeff joined
[05:07] *** slackjeff left
[05:08] *** biberao0 left
[05:49] *** zopsi21 joined
[05:49] *** zopsi21 left
[06:15] *** suim4 joined
[06:19] *** suim4 left
[06:30] *** ZzZombo left
[06:31] *** ZzZombo joined
[06:31] *** p6bannerbot sets mode: +v ZzZombo

[06:43] *** bjs4 joined
[06:43] *** bjs4 left
[07:30] *** norkle7 joined
[07:31] *** norkle7 left
[07:35] *** zakharyas joined
[07:36] *** p6bannerbot sets mode: +v zakharyas

[07:39] *** regreg left
[07:57] *** K0HAX15 joined
[07:58] *** K0HAX15 left
[08:00] *** lizmat left
[08:22] *** brrt joined
[08:23] *** p6bannerbot sets mode: +v brrt

[08:30] <brrt> \o

[08:31] <brrt> i'm seeing a bunch of MVM_oops that I think can be assert

[09:09] <jnthn> But asserts ain't included in non-debug/optimized builds, I think?

[09:09] <yoleaux> 00:40Z <Xliff> jnthn: What do you think of va_list conversion to NativeCall?

[09:09] <brrt> that's the point :-)

[09:15] <jnthn> Well, it ain't my point. :P

[09:16] <jnthn> If we're going to do something awful, I'd prefer we do so with a message than can be reported back to us that gives us a hint at what went wrong

[09:18] <brrt> so, my thought was, when that happens users are lost anyway

[09:19] <jnthn> Note that on especially hot paths we do have debugging asserts

[09:19] <jnthn> So it's not that we aren't using them already, just that it's a trade-off between the failure information we can produce and performance

[09:20] *** nativecallable6 left
[09:20] *** statisfiable6 left
[09:20] *** greppable6 left
[09:20] *** greppable6 joined
[09:20] *** statisfiable6 joined
[09:20] *** nativecallable6 joined
[09:20] *** committable6 left
[09:21] *** shareable6 left
[09:21] *** benchable6 left
[09:21] *** p6bannerbot sets mode: +v greppable6

[09:21] *** p6bannerbot sets mode: +v statisfiable6

[09:21] *** p6bannerbot sets mode: +v nativecallable6

[09:28] *** lizmat joined
[09:29] *** p6bannerbot sets mode: +v lizmat

[09:33] <Geth> Â¦ MoarVM/postrelease-opts: 4 commits pushed by (Jonathan Worthington)++

[09:33] <Geth> Â¦ MoarVM/postrelease-opts: 68f846d8c7 | Optimize "hot" wval lookup into spesh slot access

[09:33] <Geth> Â¦ MoarVM/postrelease-opts: 8ffe71a51b | Immediately promote objects ref'd from gen2

[09:33] <Geth> Â¦ MoarVM/postrelease-opts: 2c05ffa8e6 | More aggressive `set` opt of non-deopt inlinees

[09:33] <Geth> Â¦ MoarVM/postrelease-opts: fb97a26aec | Fix spesh dump for when inline entirely vanishes

[09:33] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/compare/d93c9c07b68f...fb97a26aec4a

[09:33] <jnthn> Just a rebase so I've got the fix from master :)

[09:48] *** brrt left
[09:48] *** brrt joined
[09:49] *** lizmat left
[09:49] *** p6bannerbot sets mode: +v brrt

[10:05] <brrt> hmm, i wanted to add a MVM_VECTOR_DESTROY and ended up rewrting to use alloca

[10:08] *** lizmat joined
[10:09] *** p6bannerbot sets mode: +v lizmat

[10:10] *** lizmat left
[10:11] <Geth> Â¦ MoarVM: 86ba33728a | (Bart Wiegmans)++ | src/spesh/manipulate.c

[10:11] <Geth> Â¦ MoarVM: [Spesh] Change MVM_VECTOR to alloca

[10:11] <Geth> Â¦ MoarVM:

[10:11] <Geth> Â¦ MoarVM: Since we know at function entry how many basic blocks there are, we can

[10:11] <Geth> Â¦ MoarVM: allocate a fixed size buffer, and because we use alloca, we don't have

[10:11] <Geth> Â¦ MoarVM: to free it either.

[10:11] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/86ba33728a

[10:14] * brrt has done all too much size bounds analysis in the expression JIT for sanity, but it does sometimes pay off :-)

[10:14] *** Random27 joined
[10:17] *** lizmat joined
[10:17] *** p6bannerbot sets mode: +v lizmat

[10:18] *** committable6 joined
[10:18] *** shareable6 joined
[10:18] *** Random27 left
[10:19] *** p6bannerbot sets mode: +v committable6

[10:19] *** p6bannerbot sets mode: +v shareable6

[10:20] *** regreg joined
[10:20] *** p6bannerbot sets mode: +v regreg

[10:22] *** justache4 joined
[10:24] *** justache4 left
[10:25] *** lizmat left
[10:27] *** ZzZombo left
[10:31] *** travis-ci joined
[10:31] *** p6bannerbot sets mode: +v travis-ci

[10:31] <travis-ci> MoarVM build failed. Bart Wiegmans '[Spesh] Change MVM_VECTOR to alloca

[10:31] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/416296753 https://github.com/MoarVM/MoarVM/compare/da9123a76a7f...86ba33728a34

[10:31] *** travis-ci left
[10:46] *** DLange24 joined
[10:48] *** DLange24 left
[10:54] <brrt> hmm, we should probably fix that

[10:54] *** lizmat_ joined
[10:55] *** p6bannerbot sets mode: +v lizmat_

[11:08] *** batman4216 joined
[11:09] *** batman4216 left
[11:13] *** brrt left
[11:31] *** zakharyas left
[11:32] *** bjs26 joined
[11:34] *** stmuk joined
[11:35] *** p6bannerbot sets mode: +v stmuk

[11:37] *** bjs26 left
[11:37] *** stmuk_ left
[12:13] *** lizmat_ left
[12:15] *** ^Phantom^18 joined
[12:19] *** ^Phantom^18 left
[12:20] <jnthn> Uff...this deopt bug is hard to hunt down :S

[12:24] <jnthn> (It's exposed by the latest change in postrelease-opts, and there's no known cases of it manifesting in master, but I don't yet know what it is)

[12:32] <jnthn> Ah, apparently lunch helped, I think I mighta found it

[12:37] <timotimo> hooray for lunch!

[12:38] <timotimo> i'm glad you're the one we entrusted the lunch codes to

[12:43] <jnthn> tssk, apart from the fix breaks other things :S

[12:44] *** brrt joined
[12:45] *** p6bannerbot sets mode: +v brrt

[12:47] *** zakharyas joined
[12:47] <jnthn> So the set elimination opt can change a guard instruction such that its input and output are different

[12:47] *** p6bannerbot sets mode: +v zakharyas

[12:48] <jnthn> However we always wrote the output register whether or not we deopt'd

[12:48] <jnthn> Changing it so we do that only if we aren't going to deopt fixed things. But it breaks other things.

[12:49] <jnthn> But I've got deopt analysis being done after guard insertion. But guard insertion meddles with the SSA form.

[12:49] <jnthn> Well, not the SSA form, it's still valid

[12:49] <jnthn> But different versions show up either side of the guards

[12:49] <jnthn> I'm wondering if that means deopt analysis coming after guard insertion makes it "too late"

[12:51] <timotimo> optimization ordering again, huh

[12:51] <jnthn> I guess the way to find out is to do 1) a usage pass, 2) deopt pass, 3) facts and guard insertion pass

[12:52] <jnthn> And see if that helps

[12:53] <jnthn> Of course, making the `set` optimization never touch a guard instruction is another option, but that feels like we'll just hit the same problem again in a different opt later on

[13:03] *** rosseaux6 joined
[13:04] *** diakopter joined
[13:04] *** p6bannerbot sets mode: +v diakopter

[13:04] *** rosseaux6 left
[13:04] *** lizmat joined
[13:05] *** p6bannerbot sets mode: +v lizmat

[13:12] <jnthn> That may well have helped, though will keep quite until I see lots of passing tests :)

[13:15] <jnthn> It's not so much optimization ordering as making sure that we get our deopt info gathered early enough and then take great care to honor it

[13:16] <timotimo> OK

[13:16] <jnthn> I'd thought we could get away with doing it a tad later so we could merge a couple of passes

[13:16] <jnthn> I was wrong

[13:16] <jnthn> Now we gather it as early as we possibly could

[13:18] <jnthn> Yay, test and spectset pass

[13:19] *** brrt left
[13:19] *** brrt joined
[13:20] *** p6bannerbot sets mode: +v brrt

[13:20] <jnthn> Cool, next year's TPC Europe is in Riga! :D

[13:22] <jnthn> That's probably a fun train journey :)

[13:25] *** lizmat_ joined
[13:25] <Geth> Â¦ MoarVM/postrelease-opts: 981a180568 | (Jonathan Worthington)++ | 2 files

[13:25] <Geth> Â¦ MoarVM/postrelease-opts: Mark [sp_]speshresolve as :invokish

[13:25] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/981a180568

[13:26] *** p6bannerbot sets mode: +v lizmat_

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: 3a18f3b38c | (Jonathan Worthington)++ | 3 files

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: Form deopt usage information before guard inserts

[13:28] <Geth> Â¦ MoarVM/postrelease-opts:

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: Otherwise, now that guards have a read and a write register, we can

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: end up with the information being insufficiently accurate in order to

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: keep things alive as needed for deopt.

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/3a18f3b38c

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: 0f46730b2f | (Jonathan Worthington)++ | 2 files

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: Only write guard write regsister if not deopting

[13:28] <Geth> Â¦ MoarVM/postrelease-opts:

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: Otherwise, we might end up scribbling over a register that holds a

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: useful value the other side of deopt, which can happen under our

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: move aggressive `set` elimination optimizations, but potentially in

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: others too.

[13:28] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/0f46730b2f

[13:28] <jnthn> langauge class &

[13:28] <timotimo> have fun!

[13:28] *** lizmat left
[13:48] <tadzik> ooh, Riga again, nice :)

[14:07] *** lizmat_ left
[14:09] *** lizmat joined
[14:10] *** p6bannerbot sets mode: +v lizmat

[14:17] *** lizmat left
[14:18] <Geth> Â¦ MoarVM/spesh-leaks: 6104e045cf | (Bart Wiegmans)++ | src/moar.c

[14:18] <Geth> Â¦ MoarVM/spesh-leaks: [FSA] Fix use-after-free in cleanup

[14:18] <Geth> Â¦ MoarVM/spesh-leaks:

[14:18] <Geth> Â¦ MoarVM/spesh-leaks: If we cleanup the main thread (with it's per-thread FSA free list) after

[14:18] <Geth> Â¦ MoarVM/spesh-leaks: cleaning up the FSA itself, that corresponds to a use-after-free, and we

[14:18] <Geth> Â¦ MoarVM/spesh-leaks: should not.

[14:18] <Geth> Â¦ MoarVM/spesh-leaks: review: https://github.com/MoarVM/MoarVM/commit/6104e045cf

[14:18] <Geth> Â¦ MoarVM/spesh-leaks: 02ecc6bf77 | (Bart Wiegmans)++ | 8 files

[14:18] <Geth> Â¦ MoarVM/spesh-leaks: [Spesh] Destroy inlinee after inlining

[14:19] <Geth> Â¦ MoarVM/spesh-leaks:

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: After we've inlined a graph the inliner claims ownership over the memory

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: of the inlinee. With this patch, we destroy the original graph, which

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: should simplify lifetime management. The memory region list is merged with

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: the inliners graph so that the memory allocated for the inlinee nodes

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: is not freed.

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: review: https://github.com/MoarVM/MoarVM/commit/02ecc6bf77

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: 06bd801563 | (Bart Wiegmans)++ | 2 files

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: [Spesh] Leak fixes

[14:19] <Geth> Â¦ MoarVM/spesh-leaks:

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: Many allocated things either come from a spesh candidate or from

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: malloc (or realloc). Or they are assigned to a spesh candidate.

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: So the only way to really know if they are shared with a spesh candidate

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: (or static frame) is by checking if they are pointer-equal.

[14:19] <Geth> Â¦ MoarVM/spesh-leaks:

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: ASAN leaksanitizer is finally clean now for me.

[14:19] <Geth> Â¦ MoarVM/spesh-leaks: review: https://github.com/MoarVM/MoarVM/commit/06bd801563

[14:27] *** brrt left
[14:37] *** regreg left
[14:38] *** lizmat joined
[14:39] *** p6bannerbot sets mode: +v lizmat

[14:46] *** spirit_pact0 joined
[14:51] *** spirit_pact0 left
[14:52] <timotimo> i blagged! https://wakelift.de/2018/08/15/the-first-public-release/

[14:54] <lizmat> weekly: https://wakelift.de/2018/08/15/the-first-public-release/

[14:54] <notable6> lizmat, Noted!

[15:11] <jnthn> timotimo: Nice post

[15:11] <timotimo> thank you!

[15:11] <jnthn> And nice work :D

[15:11] <timotimo> \o/

[15:11] <jnthn> About the Inclusive Allocations

[15:11] <jnthn> For Str it looks like we allocate more per entry after spesh

[15:12] <timotimo> i might have to double-check how that comes to be

[15:12] <timotimo> if i'm properly summing up spesh/jit entries

[15:12] <timotimo> perhaps it barfs if there's some calls with only spesh and some with also jit?

[15:12] <jnthn> Dunno, it just seems odd

[15:13] <timotimo> oh, i probably divide it by the entries to the routine on that page

[15:13] *** lizmat left
[15:13] <timotimo> depending on the data passed in, the actual behaviour of routines below that could be anything

[15:14] *** lizmat joined
[15:14] *** lizmat left
[15:14] <timotimo> and perhaps it doesn't even make sense to give a "per entry" count there

[15:14] <nine> Huh? Somehow much of the slowdown caused by hllbool has appeared over night. Now I think I may just have run a debug version of moar

[15:15] <timotimo> isn't that the opposite of what should happen? :o

[15:16] <jnthn> Maybe disappeared? :)

[15:19] <timotimo> that'd be a good explanation

[15:26] *** lizmat joined
[15:27] *** p6bannerbot sets mode: +v lizmat

[15:30] *** dogbert11 left
[15:40] *** pppingme9 joined
[15:48] <Geth> Â¦ MoarVM/postrelease-opts: 4e0ae266d0 | (Jonathan Worthington)++ | 3 files

[15:48] <Geth> Â¦ MoarVM/postrelease-opts: Propagate facts of inlined return value to inliner

[15:48] <Geth> Â¦ MoarVM/postrelease-opts:

[15:48] <Geth> Â¦ MoarVM/postrelease-opts: In preparation for looking at eliminating unrequired guards. This is

[15:48] <Geth> Â¦ MoarVM/postrelease-opts: a common case where we will often be able to do guard elimination.

[15:48] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/4e0ae266d0

[15:49] *** pppingme9 left
[15:52] <nine> Oh, yes, I meant disappeared :)

[15:54] *** dave492514 joined
[15:57] *** dave492514 left
[15:57] <jnthn> timotimo: How did your proven guards elimination patch misbehave, ooc?

[16:00] <timotimo> hm, let me try again

[16:00] <jnthn> Well, I've got it applied in my postrelease branch which means on top of various fixes

[16:01] <jnthn> And so far it built NQP and passed tests, built Rakudo and passed tests, and now I'm doing spectest and it doesn't look bad so far

[16:01] <timotimo> right, you want something that used to break so you can compare?

[16:01] <jnthn> Plus I checked the code in a microbenchmark where I expected it to apply and it worked

[16:01] <jnthn> So it's certainly tossing guards

[16:02] <jnthn> ah, I think I just saw one failure in spectest

[16:03] <jnthn> ah, but they both failed before this change

[16:06] <jnthn> ah, one of 'em fails with spesh disabled

[16:06] <jnthn> So it's just a busted spectest I guess

[16:06] <jnthn> The other is a SEGV

[16:07] <timotimo> actually i don't see it fail stuff any more even though i don't have the latest fixes

[16:07] <jnthn> hm, odd :)

[16:07] <timotimo> but maybe that was when i turned guardtype into guardjusttype which the commit i pushed doesn't do?

[16:07] <jnthn> maybe

[16:08] <jnthn> I'll drop that bit for now and clean it up and push it

[16:09] <timotimo> t/spec/S03-operators/buf.t ........................................ Dubious, test returned 255 (wstat 65280, 0xff00)

[16:09] <timotimo> doesn't happen to be this one?

[16:10] <jnthn> No, that's just being behind Rakudo HEAD

[16:10] <timotimo> OK

[16:11] <timotimo> one thing that surprised me was that the post-guarded register seemed to have many more fact flags set than the pre-guarded register

[16:11] <timotimo> wait, was that from a commit that was actually pushed to master?

[16:12] <timotimo> * 37b7c7b79 - discover facts about a bunch of sp_guard ops (5 days ago) <Timo Paulssen>

[16:12] <jnthn> yeah, I did git pull of Rakudo earlier today and that problem went away

[16:12] <timotimo> right, that's in there

[16:12] <Geth> Â¦ MoarVM/postrelease-opts: 877054f600 | (Timo Paulssen)++ (committed by Jonathan Worthington) | src/spesh/optimize.c

[16:12] <Geth> Â¦ MoarVM/postrelease-opts: Turn redundant sp_guard* ops into set

[16:12] <Geth> Â¦ MoarVM/postrelease-opts:

[16:12] <Geth> Â¦ MoarVM/postrelease-opts: We can eliminate them when we can prove that the guard will always be

[16:12] <Geth> Â¦ MoarVM/postrelease-opts: true.

[16:12] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/877054f600

[16:14] <nine> Oh....the expr JIT template for hllizefor may actually cause a slow down! Unlike the lego JIT version it will always run MVM_hll_get_config_for even if the HLL name is a known values (which it probably is always)

[16:15] <timotimo> right :(

[16:16] <timotimo> i think hll configs might actually be non-moving

[16:16] <timotimo> so you can "just" put the address into an i64 register (hopefully properly truncated on 32bit)

[16:16] <timotimo> and treat it as a pointer on the other end

[16:16] <timotimo> by writing something like sp_hllizefor that takes an extra argument

[16:16] <jnthn> Yeah, they don't move

[16:17] <jnthn> And while you can't put them into a spesh split

[16:17] <jnthn> You could put the true and false into spesh slots

[16:17] <jnthn> And then JIT it into something involving those

[16:17] <timotimo> this is for hllizefor in general i think?

[16:17] <jnthn> With some sp_ternery

[16:17] <jnthn> Oh, I thought for hllboolfor :)

[16:24] <nine> And the template for hllize always calls MVM_hll_current while the Lego JIT version determines the pointer at compile time.

[16:25] <timotimo> that's why we could generate a different instruction that has the current hll in its arguments :)

[16:27] <nine> getcurhllsym just does (let: (($hllname (^getf (cu) MVMCompUnit body.hll_name)))

[16:29] <Geth> Â¦ MoarVM/postrelease-opts: 7668b82efd | (Timo Paulssen)++ (committed by Jonathan Worthington) | src/spesh/optimize.c

[16:29] <Geth> Â¦ MoarVM/postrelease-opts: Turn redundant sp_guard* ops into set

[16:29] <Geth> Â¦ MoarVM/postrelease-opts:

[16:29] <Geth> Â¦ MoarVM/postrelease-opts: We can eliminate them when we can prove that the guard will always be

[16:29] <Geth> Â¦ MoarVM/postrelease-opts: true.

[16:29] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/7668b82efd

[16:29] <jnthn> Ammended version with a fix :)

[16:31] *** brrt joined
[16:32] <timotimo> trying to see the difference

[16:32] <timotimo> failing

[16:32] <timotimo> the only thing i see is that char *name was thrown out, because it was unused after the debug printfs have disappeared

[16:32] <jnthn> Yes, that's what I removed

[16:32] <timotimo> oh, ok!

[16:32] <jnthn> I noticed it 'cus it discarded a const and so produced a warning :)

[16:32] *** p6bannerbot sets mode: +v brrt

[16:40] <brrt> .tell nine that's an interesting case for the jit optimizer... I want to make it so that we can use spesh facts that correspond to nodes

[16:40] <yoleaux> brrt: I'll pass your message to nine.

[16:40] <brrt> and maybe do some constant folding

[16:40] <timotimo> i think we may want to have a bit more extra information

[16:40] <timotimo> because we know for example that anything that hangs off of an STable can be considered constant up to a certain point

[16:41] <timotimo> but how do we encode that in the jit itself?

[16:43] *** lizmat left
[16:47] <brrt> not in the jit, but in the optimizer, that's possible

[16:47] <brrt> anyway, i'll have to think about it some

[16:48] <brrt> timotimo++ interesting post

[16:49] <timotimo> thanks :)

[17:00] *** vegii20 joined
[17:02] *** nolsen14 joined
[17:03] *** vegii20 left
[17:05] <Geth> Â¦ MoarVM/postrelease-opts: ce5b2557ad | (Timo Paulssen)++ | src/spesh/graph.c

[17:05] <Geth> Â¦ MoarVM/postrelease-opts: insert null-register-ops in ascending order

[17:05] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/ce5b2557ad

[17:05] <timotimo> there's also this commit

[17:06] *** nolsen14 left
[17:08] <Geth> Â¦ MoarVM/postrelease-opts: f4d93bcf96 | (Jonathan Worthington)++ | src/spesh/optimize.c

[17:08] <Geth> Â¦ MoarVM/postrelease-opts: Clear up and start improving box optimization

[17:08] <Geth> Â¦ MoarVM/postrelease-opts:

[17:08] <Geth> Â¦ MoarVM/postrelease-opts: * Remove seemingly non-effective box and dead code unbox opts in the

[17:08] <Geth> Â¦ MoarVM/postrelease-opts:   first optimize pass

[17:08] <Geth> Â¦ MoarVM/postrelease-opts: * In the second optimize pass, introduce code to delete dead box

[17:08] <Geth> Â¦ MoarVM/postrelease-opts:   instructions that are rendered no longer required due to box/unbox

[17:08] <Geth> Â¦ MoarVM/postrelease-opts:   pair elimination

[17:08] <Geth> Â¦ MoarVM/postrelease-opts: <â¦commit message has 7 more linesâ¦>

[17:08] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/f4d93bcf96

[17:08] <jnthn> dinner &

[17:14] <timotimo> i like that we have pips now

[17:18] <Geth> Â¦ MoarVM: bdw++ created pull request #941: Fix Spesh Memory Leaks

[17:18] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/941

[17:24] *** brrt left
[18:05] *** zakharyas left
[18:22] <Geth> Â¦ MoarVM/postrelease-opts: ae2832d09c | MasterDuke17++ (committed using GitHub Web editor) | src/spesh/optimize.c

[18:22] <Geth> Â¦ MoarVM/postrelease-opts: Fix typo in comment

[18:22] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/ae2832d09c

[18:46] *** cheshire_cat joined
[18:49] *** cheshire_cat left
[19:57] *** zakharyas joined
[19:57] *** p6bannerbot sets mode: +v zakharyas

[20:37] *** zakharyas left
[20:54] *** bobe11 joined
[20:54] *** bobe11 left
[21:30] <MasterDuke> samcv: you usually use clang, right? have you seen https://github.com/rakudo/rakudo/issues/2124 happen on your system?

[22:18] *** robertle left
[22:19] <samcv> MasterDuke: yeah i use clang

[22:20] *** lizmat joined
[22:21] *** p6bannerbot sets mode: +v lizmat

[22:41] <Geth> Â¦ MoarVM/postrelease-opts: 05a43615bf | (Jonathan Worthington)++ | 2 files

[22:41] <Geth> Â¦ MoarVM/postrelease-opts: Lower box_[ns] with P6opaque

[22:41] <Geth> Â¦ MoarVM/postrelease-opts:

[22:41] <Geth> Â¦ MoarVM/postrelease-opts: This covers boxing of both Num and Str objects in Perl 6, lowering

[22:41] <Geth> Â¦ MoarVM/postrelease-opts: them into a fastcreate and a p6o_bind_[ns], which avoids a C call and

[22:41] <Geth> Â¦ MoarVM/postrelease-opts: the indirections and checks that the normal code has to do.

[22:41] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/05a43615bf

[22:41] <Geth> Â¦ MoarVM/postrelease-opts: a89b74c5a8 | (Jonathan Worthington)++ | src/spesh/optimize.c

[22:41] <Geth> Â¦ MoarVM/postrelease-opts: Do a dead instruction pass after post-inline pass

[22:41] <Geth> Â¦ MoarVM/postrelease-opts:

[22:41] <Geth> Â¦ MoarVM/postrelease-opts: This clears up things like hllboxtype instructions left behind by

[22:41] <Geth> Â¦ MoarVM/postrelease-opts: lowered or deleted boxing instructions.

[22:41] <Geth> Â¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/a89b74c5a8

[22:43] <jnthn> m: say 1.234 / 1.367

[22:43] <camelia> rakudo-moar 927945dac: OUTPUT: Â«0.902707â¤Â»

[22:44] <jnthn> 10% off `my $n = 0e0; for ^10_000_000 { $n = $n + 1e1 }; say $n`

[22:54] <jnthn> m: say 7.128 / 7.638

[22:54] <camelia> rakudo-moar 927945dac: OUTPUT: Â«0.933229â¤Â»

[22:55] <jnthn> That's for `my $x = "food"; for ^10_000_000 { $x.tc.flip }` but the code-gen for that is utterly shite

[22:55] <jnthn> But that can be a problem for another day :)

[23:32] <MasterDuke> i set a breakpoint in gdb while compiling an nqp file, is there an easy way to see what line in the file i'm compiling i'm at?

[23:39] <timotimo> MasterDuke: perhaps a start to figuring this otu would be to call MVM_dump_bytecode and see if that gives you a hint

[23:40] <timotimo> i often combine that with looking at a current spesh log

[23:43] <MasterDuke> timotimo: hm. i set a breakpoint in MVM_coerce_smart_numify and then called MVM_dump_bytecode, but nothing jumps out at me

[23:44] <MasterDuke> oh, the the annotations might be helpful...

[23:45] <timotimo> exactly

[23:45] <timotimo> though you could also try manually getting the annotation

[23:46] <MasterDuke> huh, no annotation in this bytecode

[23:47] <timotimo> dump_bytecode doesn't output them i don't think

[23:47] <MasterDuke> i did see them the first time i ran it

[23:49] <MasterDuke> oh, the annotation look like they're pointing to the location of the code that's getting run, not that's being processed

[23:50] <timotimo> processed, eh?

[23:51] <MasterDuke> well, parsed/interpreted/something

[23:52] <timotimo> ah, yes, you would have to inspect the lexicals and such for that to work

[23:52] <timotimo> that'd be a lot easier with the debugserver, bu tit's not made to handle the use case of "code was stopped in gdb, figure it out!"

[23:53] <MasterDuke> yeah, the annotations are pointing to num processing code, which makes sense, but i want to see why that code is being called

[23:53] <MasterDuke> you know, i still haven't used the debugserver yet

[23:53] <MasterDuke> it would help for this?

[23:53] <timotimo> you can find the callers with MVM_dump_bytecode_frame(tc, 1) and higher numbers iirc

[23:54] <timotimo> well, you can use it to navigate the call stack as well as outers of frames and through items and containers and such

[23:54] <MasterDuke> *_bytecode_of or *_bytecode_staticframe?

[23:55] <timotimo> bytecode_of, i think

[23:55] <MasterDuke> oh, i missed _stackframe, that looks like it

[23:57] <MasterDuke> afk for a bit, but thanks, that looks like it'll help

[23:58] *** Hobby12 joined
