[01:17] *** lizmat left
[01:30] *** lizmat joined
[01:30] *** p6bannerbot sets mode: +v lizmat

[02:36] *** lucasb left
[06:13] *** robertle left
[06:42] *** Kaiepi left
[06:46] *** Kaiepi joined
[06:47] *** p6bannerbot sets mode: +v Kaiepi

[07:03] *** domidumont joined
[07:03] *** p6bannerbot sets mode: +v domidumont

[07:18] *** lizmat left
[07:18] <Geth> Â¦ MoarVM: 6455d1f6ac | (Ben Davies)++ | src/platform/sys.c

[07:18] <Geth> Â¦ MoarVM: Fix double free in platform/sys.c

[07:18] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6455d1f6ac

[07:18] <Geth> Â¦ MoarVM: d7a4c4c56b | niner++ (committed using GitHub Web editor) | src/platform/sys.c

[07:18] <Geth> Â¦ MoarVM: Merge pull request #1008 from Kaiepi/cpus

[07:18] <Geth> Â¦ MoarVM:

[07:18] <Geth> Â¦ MoarVM: Fix double free in platform/sys.c

[07:18] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d7a4c4c56b

[07:29] *** lizmat joined
[07:29] *** p6bannerbot sets mode: +v lizmat

[07:35] *** travis-ci joined
[07:35] *** p6bannerbot sets mode: +v travis-ci

[07:35] <travis-ci> MoarVM build failed. niner 'Merge pull request #1008 from Kaiepi/cpus

[07:35] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/464205207 https://github.com/MoarVM/MoarVM/compare/fdc73f300b78...d7a4c4c56b7f

[07:35] *** travis-ci left
[07:55] <nine> The failure is apparently due to a label key conflict. It tries to reference a label that hasn't been added to the frame yet. This sounds suspiciously like the 32 bit problem reported by dogbert++

[07:56] <nine> Since the label key is just the nqp::objectid($label), I wonder: shouldn't that id be unique?

[07:57] <timotimo> when you request the objid of something, it gets "pinned"

[07:57] <timotimo> by getting a permanent slot in the gen2 allocated for it

[07:57] <timotimo> which, i now realize, could perhaps be avoided for mild memory savings

[07:57] <nine> And the id is essentially the new permanent memory address.

[07:58] <timotimo> aye

[07:58] <nine> So how can that not be unique?

[07:58] <timotimo> good question!

[07:58] <nine> This build failure shows that clearly the issue also exists on 64 bit architectures. The smaller address space on 32 bit just makes it much more probable.

[07:59] <nine> Oh

[07:59] <nine> I looked at the wrong end. I audited the code multiple times to make sure the label object is still referenced at the point of the error and it's address hasn't been re-used yet.

[08:00] <nine> But it's entirely possible that a different label in the same frame has lived at the same address before.

[08:00] <nine> And has been collected in the meantime.

[08:00] <timotimo> could try verifying the assumption by putting the objid it got at the start in an attribute and later check if it's still right

[08:01] <timotimo> hm, re-use of the slot is possible i guess, though i don't know if we perhaps have something to prevent that

[08:01] <timotimo> which of course would be a good way to DOS a program i guess

[08:02] <nine> So, either I add a destructor to MAST::Label that removes the label from the frame's %!labels lookup hash, or I collect the labels in the frame itself to prevent them from being freed until the frame is done compiling.

[08:03] <timotimo> the latter doesn't seem too hard?

[08:03] <timotimo> how many labels would get their lifetime extended by that?

[08:03] <timotimo> and for how long?

[08:06] <nine> Probably all of them until the comp unit is finished.

[08:06] <timotimo> oh, hmm.

[08:06] <nine> But labels are also tiny objects consisting of just an int

[08:14] <timotimo> fwiw, the object header makes them not quite as tiny :P

[08:20] *** robertle joined
[08:21] *** p6bannerbot sets mode: +v robertle

[10:06] *** lucasb joined
[10:06] *** p6bannerbot sets mode: +v lucasb

[10:50] *** zakharyas joined
[10:51] *** p6bannerbot sets mode: +v zakharyas

[10:58] *** dogbert2_ joined
[10:59] *** p6bannerbot sets mode: +v dogbert2_

[11:06] *** domidumont left
[13:00] *** domidumont joined
[13:00] *** p6bannerbot sets mode: +v domidumont

[13:03] *** robertle left
[13:05] *** robertle joined
[13:06] *** p6bannerbot sets mode: +v robertle

[13:14] *** zakharyas left
[13:52] *** zakharyas joined
[13:52] *** p6bannerbot sets mode: +v zakharyas

[13:56] *** robertle left
[14:04] *** robertle joined
[14:05] *** p6bannerbot sets mode: +v robertle

[15:05] *** lizmat left
[15:30] *** lizmat joined
[15:30] *** p6bannerbot sets mode: +v lizmat

[15:35] *** robertle left
[15:37] *** robertle joined
[15:38] *** p6bannerbot sets mode: +v robertle

[16:18] *** robertle left
[16:26] *** Geth left
[16:31] *** domidumont1 joined
[16:32] *** p6bannerbot sets mode: +v domidumont1

[16:34] *** domidumont left
[16:46] *** zakharyas left
[16:52] *** domidumont1 left
[17:01] <AlexDaniel> please some attention to M#1009

[17:02] <AlexDaniel> synopsebot_: help

[17:02] <AlexDaniel> anyway: https://github.com/MoarVM/MoarVM/issues/1009

[17:43] <nine> Looks like an endianness issue in the bytecode writer

[17:43] <timotimo> my first thought, too

[17:44] <timotimo> who made versions a signed integer? :D

[17:55] <lucasb> check if the first bytes are ARMOVM or whatever is the representation of the signature in the other endianness platform

[17:56] <lucasb> j/k, dunno if this check would work :)

[18:00] <lucasb> https://github.com/MoarVM/MoarVM/blob/master/src/core/bytecode.c#L145-L146

[18:00] <lucasb> ah, the MOARVM test is done before the version test

[18:01] <lucasb> Would be informative to dump version variable (and maybe MIN_BYTECODE_VERSION and MAX_BYTECODE_VERSION) in those messages

[18:01] <nine> Nah, MoarVM's bytecode has a well defined byte order

[18:04] <nine> I think, writeint is missing support for the endian flag

[18:15] *** robertle joined
[18:15] *** p6bannerbot sets mode: +v robertle

[20:30] <nine> Darn....I just stumbled over the sentence "Operations not configured with one of these options will assume native endian." which means that I left too little space for the endian-flags. I'd need 2 bits instead of just 1

[20:32] <nine> Fixing that requires another coordinated change in nqp and MoarVM

[20:33] <nine> Unless I work around that by using some high bit, i.e. 0x100000000

[20:33] <nine> for nqp::const::BINARY_ENDIAN_LITTLE and 0x100000001 for nqp::const::BINARY_ENDIAN_BIG

[20:35] <nine> But then, I'd still need to add nqp::const::BINARY_ENDIAN_LITTLE to all the (many) callers for it to actually have an effect on big endian machines. But at least we'd stay backwards compatible on little endian ones

[20:39] <timotimo> i have a suggestion for you

[20:39] <timotimo> the qastcompiler can introspect how many arguments an op was called with

[20:40] <timotimo> if you just check if there was an "extra" argument, interpret that as the big/little endian marker, otherwise just spit out a call with the default endianness flag

[20:40] <timotimo> there ought to already be some ops that work like that

[20:41] *** brrt joined
[20:41] *** p6bannerbot sets mode: +v brrt

[20:50] <nine> But all existing callers actually need to set the little endian flag

[20:53] <timotimo> in that case make that the default?

[21:03] <nine> The existing callers need it because MoarVM's bytecode is explicitly in little endian. In other cases defaulting to the native endianness makes most sense.

[21:05] <brrt> ohai

[21:11] <timotimo> yo brrt

[21:19] <brrt> \o timotimo

[21:19] <brrt> can i just say that dynasm is an evil piece of code

[21:19] <timotimo> well, it has to do a pretty evil job

[21:20] <brrt> hmmm

[21:20] <brrt> I've pondered rewriting it in perl

[21:20] <timotimo> a friend of mine is going to give a public little talk on x86 assembly in a few days

[21:20] <brrt> but. maybe let's not

[21:20] <brrt> hehe

[21:20] <brrt> yeah, x86 encoding is a bit hairy

[21:20] <brrt> anyway, /me -> mario kart

[21:20] <brrt> :-)

[21:20] <timotimo> have fun!

[21:20] *** brrt left
[23:47] *** MasterDuke joined
[23:48] *** p6bannerbot sets mode: +v MasterDuke

[23:51] *** MasterDuke left
[23:55] *** MasterDuke joined
[23:56] *** p6bannerbot sets mode: +v MasterDuke

