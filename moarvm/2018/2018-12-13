[01:15] *** lizmat left
[02:26] *** Kaiepi left
[02:26] *** Kaiepi joined
[02:27] *** p6bannerbot sets mode: +v Kaiepi

[07:14] *** domidumont joined
[07:14] *** p6bannerbot sets mode: +v domidumont

[07:35] *** xlat joined
[07:36] *** p6bannerbot sets mode: +v xlat

[07:44] *** robertle joined
[07:45] *** p6bannerbot sets mode: +v robertle

[07:53] <Geth> ¦ MoarVM: ee6ea722c4 | (Stefan Seifert)++ | src/core/interp.c

[07:53] <Geth> ¦ MoarVM: Fix single byte readint writing to unsigned return register

[07:53] <Geth> ¦ MoarVM:

[07:53] <Geth> ¦ MoarVM: Thanks to patzim++ for pointing this out!

[07:53] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ee6ea722c4

[07:58] *** robertle left
[07:59] *** robertle joined
[08:00] *** p6bannerbot sets mode: +v robertle

[08:32] *** robertle left
[08:41] *** zakharyas joined
[08:42] *** p6bannerbot sets mode: +v zakharyas

[08:42] *** xlatd7 joined
[08:43] *** p6bannerbot sets mode: +v xlatd7

[08:46] *** xlat left
[08:49] *** robertle joined
[08:50] *** p6bannerbot sets mode: +v robertle

[08:55] *** zakharyas left
[08:56] *** zakharyas joined
[08:57] *** p6bannerbot sets mode: +v zakharyas

[09:07] *** lizmat joined
[09:07] *** p6bannerbot sets mode: +v lizmat

[09:11] *** nop1 joined
[09:12] *** p6bannerbot sets mode: +v nop1

[09:13] *** zakharyas left
[09:15] *** xlatd7 left
[09:42] <jnthn> morning o/

[09:43] <nwc10> \o

[09:44] <nwc10> jnthn: ASAN found your most recent changes to be very boring

[09:44] *** xlatd7 joined
[09:44] <lizmat> morning *

[09:44] *** nop1 left
[09:44] *** p6bannerbot sets mode: +v xlatd7

[09:50] * jnthn likes keeping ASAN bored

[09:56] *** xlatd7 left
[10:05] <lizmat> m: dd buf8.^find_method("read-int8")(blob8.new(255),0)   # this should work, shouldn't it ?

[10:05] <camelia> rakudo-moar af96fbb43: OUTPUT: «(signal SEGV)»

[10:07] <lizmat> m: dd buf8.^find_method("read-int8")

[10:07] <camelia> rakudo-moar af96fbb43: OUTPUT: «ForeignCode <anon> = ForeignCode.new␤»

[10:08] <lizmat> m: dd buf8.^pun.^find_method("read-int8")(blob8.new(255),0)   # ah, it needs to be punned

[10:08] <camelia> rakudo-moar af96fbb43: OUTPUT: «-1␤»

[10:10] <jnthn> Shouldn't segv though

[10:11] <lizmat> issueize ?

[10:11] <jnthn> Please

[10:12] <jnthn> Trying to figure out what on earth is happening in https://github.com/rakudo/rakudo/issues/2519

[10:25] <nwc10> lizmat: for that SEGV, ASAN just says "SEGV". There's nothing else before it that's undefined behaviour

[10:26] <lizmat> https://github.com/rakudo/rakudo/issues/2540

[10:28] <nwc10> jnthn: for https://github.com/rakudo/rakudo/issues/2519 ASAN reports the same as valgrind

[10:31] <jnthn> Yeah, and it's an invalid read 'cus the index is waaay out of range

[10:33] <jnthn> And it was out of range all the way back when the object as placed into the inter-gen set too

[10:46] *** zakharyas joined
[10:47] *** p6bannerbot sets mode: +v zakharyas

[10:55] <jnthn> Got it traced all the way back to the object with the bogus pointer coming out of an SC when a lexical is being vivified...but the object lacks a valid sc_idx/idx. Stranger still, I can't see where on earth it gets allocated.

[10:56] <nwc10> time for lunch?

[11:01] <jnthn> Ahh...it comes in as a respossession

[11:05] <jnthn> m: say 0x43bd668 - 0x43bd538

[11:05] <camelia> rakudo-moar af96fbb43: OUTPUT: «304␤»

[11:06] <jnthn> m: say 0x43bd5d0 - 0x43bd538

[11:06] <camelia> rakudo-moar af96fbb43: OUTPUT: «152␤»

[11:06] <jnthn> Ah, shite

[11:06] <jnthn> Yeah, I see what's up

[11:09] <jnthn> We have an object in SC 1. In SC 2 a mutated version of it has been serialized. So we repossess the object in SC 1. There's been a change of type, so we update the STable too. But the new type has an extra attribute. So what we should do is allocate the extra space for the object, hanging it off the real_data pointer of the P6opaque. But we do't do that, so it goes and deserializes the final attribute,

[11:09] <jnthn> overwriting the first pointer-size worth of bytes of whatever comes next. That happens to be the header of another object, thus why it ends up with utterly bogus data in there.

[11:11] <jnthn> And yeah, lunch, but now I know what it is, it shouldn't take long to fix.

[11:45] <Geth> ¦ MoarVM: lizmat assigned to niner Issue nqp::writeint(-1,...) doesn't error correctly https://github.com/MoarVM/MoarVM/issues/1022

[11:45] * lizmat hopes nine doesn't mind

[12:03] *** lucasb joined
[12:03] *** p6bannerbot sets mode: +v lucasb

[13:39] *** robertle left
[13:40] <jnthn> Got a fix, spectesting. :)

[13:49] <Geth> ¦ MoarVM: 6788cab640 | (Jonathan Worthington)++ | 2 files

[13:49] <Geth> ¦ MoarVM: Fix repossessions that cause object size "changes"

[13:49] <Geth> ¦ MoarVM:

[13:49] <Geth> ¦ MoarVM: This is only an issue for P6opaque, where a change of type might cause

[13:49] <Geth> ¦ MoarVM: a change of size. Thus, we need to allocate and use a new region for

[13:49] <Geth> ¦ MoarVM: the object attributes to be held in. Prior to this change we failed to

[13:49] <Geth> ¦ MoarVM: do that, which meant the deserialization would write over memory that

[13:49] <Geth> ¦ MoarVM: followed the original, now under-size, object body. This was often the

[13:49] <Geth> ¦ MoarVM: <…commit message has 5 more lines…>

[13:49] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6788cab640

[13:51] <nine> lizmat: I don't :)

[13:52] <nine> lizmat: already have a pretty good idea for the simple fix and will work on it this evening

[13:53] <jnthn> lizmat: What's the meaning of "returns garbage" in https://github.com/rakudo/rakudo/issues/2540 ?

[13:54] * lizmat looks

[13:54] <jnthn> It looks like it's just returning the closure that, when invoked, puns the role and dispatches

[13:54] <lizmat> garbage in the sense that if you call what you got returned, it segfaults

[13:55] <lizmat> m: dd buf8.^find_method("read-int8")(blob8.new(255),0)

[13:55] <camelia> rakudo-moar af96fbb43: OUTPUT: «(signal SEGV)»

[13:55] <jnthn> Yeah, OK, so that adds nothing useful :)

[13:56] <jnthn> I note that this is a really odd thing to be doing in general

[13:56] * lizmat changed the title

[13:56] <dogbert2_> ==16438== Invalid read of size 1 ==16438==    at 0x40303F0: __memcpy_chk (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)

[13:56] <dogbert2_> ==16438==    by 0x4151B37: memcpy (string3.h:51)         ==16438==    by 0x4151B37: read_buf (VMArray.c:903)

[13:56] <lizmat> jnthn: yeah, it was for writing tests and iterating over read-int8, read-int16, etc.

[13:56] <dogbert2_> lizmat's bug ^^

[13:57] <jnthn> dogbert2_: Yeah, already got that :)

[13:57] <lizmat> now using buf8."$method"() syntax

[13:57] <dogbert2_> I suspected that might be the case :)

[13:57] <jnthn> Thing is, we're taking a role, and then passing something other than that role as the invocant

[13:58] <lizmat> jnthn: if you think it's a DIHWIDT case, then that's fine by me  :-)

[13:58] <jnthn> Well, it shouldn't SEGV

[13:58] <jnthn> So I want to at least fix that

[13:59] <jnthn> ah, yes

[13:59] <jnthn>         -> $inv, *@pos, *%named {

[13:59] <jnthn>             $!pun."$name"(|@pos, |%named)

[13:59] <jnthn>         }

[13:59] <jnthn> This is the closure it returns

[13:59] <jnthn> Notice that it dscards $inv

[13:59] <jnthn> So it's punning it and then making the call on the type object produced by the punning

[14:00] <jnthn> And I get the new ops fail to check their input IS_CONCRETE

[14:01] <jnthn> I think using .^find_method and then feeding in a different invocant is a breach of protocol

[14:01] <jnthn> So it's quite reasonable for it not to work out

[14:01] <jnthn> m: blob8.read-int8(0)

[14:01] <camelia> rakudo-moar af96fbb43: OUTPUT: «(signal SEGV)»

[14:01] <jnthn> But the bug basically golfs to that

[14:07] * jnthn updated the ticket

[14:40] <lizmat> concreteness check added with https://github.com/rakudo/rakudo/commit/fecfb22d70

[14:40] <lizmat> tests added with https://github.com/perl6/roast/commit/88a20c74f3

[15:10] *** zakharyas left
[15:19] *** lizmat left
[15:26] *** robertle joined
[15:27] *** p6bannerbot sets mode: +v robertle

[16:13] *** synopsebot joined
[16:14] *** p6bannerbot sets mode: +v synopsebot

[16:25] *** domidumont left
[16:26] *** sivoais joined
[16:26] *** p6bannerbot sets mode: +v sivoais

[16:34] *** dogbert11 left
[16:34] <timotimo> now that AT-POS and friends on native arrays have bounds checks, we might want to start looking into value domain analysis or whatever that's called

[16:35] <timotimo> to find locals that never have negative numbers in them

[16:35] <timotimo> or, you know, ask people to use unsigned ints and make that faster :D

[18:19] *** zakharyas joined
[18:20] *** p6bannerbot sets mode: +v zakharyas

[18:38] *** domidumont joined
[18:38] *** p6bannerbot sets mode: +v domidumont

[19:25] *** domidumont left
[19:29] <nine> Darn....I used an uint for the offset argument to the (read|write)(u?int|num) ops. And changing that now really breaks nqp's build

[19:29] *** zakharyas left
[19:31] <nine> Of course I can just disable the bytecode validator, rebootstrap and re-enable the validator...

[19:45] <Geth> ¦ MoarVM: 1343702c3f | (Stefan Seifert)++ | src/core/interp.c

[19:45] <Geth> ¦ MoarVM: Fix segfault on (read|write)u?int on a type object

[19:45] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1343702c3f

[19:45] <Geth> ¦ MoarVM: 7df8596ebe | (Stefan Seifert)++ | 5 files

[19:45] <Geth> ¦ MoarVM: Correctly handle negative offsets in (read|write)(u?int|num) ops

[19:45] <Geth> ¦ MoarVM:

[19:45] <Geth> ¦ MoarVM: Other array ops treat negative indices as counting from the end of the array.

[19:45] <Geth> ¦ MoarVM: Do the same for the bytestream handling ops.

[19:45] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7df8596ebe

[20:05] *** travis-ci joined
[20:05] *** p6bannerbot sets mode: +v travis-ci

[20:05] <travis-ci> MoarVM build errored. Stefan Seifert 'Correctly handle negative offsets in (read|write)(u?int|num) ops

[20:05] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/467678266 https://github.com/MoarVM/MoarVM/compare/6788cab640fb...7df8596ebece

[20:05] *** travis-ci left
[20:11] *** robertle left
[20:35] *** zakharyas joined
[20:36] *** p6bannerbot sets mode: +v zakharyas

[21:46] *** zakharyas left
