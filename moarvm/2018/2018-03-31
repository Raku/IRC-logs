[01:41] *** FROGGS_ joined
[01:58] *** ilbot3 joined
[02:11] <samcv> well i have not succeeded in getting gcc to vectorize it

[02:12] <MasterDuke> `#pragma ivdep` doesn't work?

[02:12] <samcv> doesn't do anything nope

[02:16] <MasterDuke> huh

[02:36] <samcv> also nicely lldb can do it using just sse1/2 not even needing more recent ones. tried for a long time on gcc. and using debug messages and it doesn't seem to know how to assign from one type to another

[02:38] <samcv> i saved my old version which i haven't pushed anywhere yet. but that doesn't vectorize, though it's faster than what we do now

[02:44] <MasterDuke> unfortunately i know almost absolutely nothing about vectorizing code. hopefully someone else can help

[02:48] <samcv> it could be thta gcc doesn't support it. though i may try in a debian chroot since my distro uses a hardened gcc

[02:54] <MasterDuke> what distro?

[02:54] <samcv> Sabayon

[02:54] <samcv> it's based on gentoo

[02:55] <MasterDuke> i've heard of it, never used it

[03:00] <samcv> yeah no difference in a chroot. it vectorizes some things. but not what i want

[03:06] <samcv> and the gcc on debian testing is 7.3, i have version 6 on mine atm

[03:06] <samcv> though i'll try a couple more options

[03:25] <samcv> MasterDuke: success! src/strings/ops.c:280:17: note: loop vectorized

[03:25] <samcv> had to simplify more code to get it to work and use gcc 7 but i got it!

[03:31] <japhb> samcv++  # Persistence!

[03:38] <samcv> it's vectorizing the copy from 32->8 bits and the 8->32 bit ones. but not the bitwise operation that checks if the 32bit string fits in 8 bits

[03:40] <samcv> it tries to tell me " note: reduction: not commutative/associative: " (luckily the gcc 7 vectorization debug messages are 30% better than gcc 6. though i guess it's just not detecting it? since OR shouldn't matter what order

[04:02] <samcv> wow. well i got it vectorized but I had to do something pretty stupid to get it to work

[04:02] <samcv> int val2 = ((active_blob[i] & 0xffffff80) + 0x80) & (0xffffff80-1);

[04:02] <samcv> val |= val2;

[04:02] <samcv> ^ this vectorizes with gcc 7 but just doing val |= ... doesn't...

[04:30] <samcv> i go from 16->13 seconds on gcc6 on that string test file i've been playing around with. i think clang5 goes from 11->5.5 seconds with the changes

[04:30] <samcv> going to check gcc 7 now

[06:00] *** mojca joined
[06:00] *** mojca joined
[06:43] <nine> samcv: I hope on gcc 7 it didn't go from 16 seconds to 2 hours ;)

[07:06] *** domidumont joined
[07:13] *** domidumont joined
[08:18] *** domidumont joined
[12:10] <dogbert17> timotimo: I've tried to break your 'dont_gc_in_spesh' branch but I have failed :)

[12:11] <timotimo> cool

[12:12] <dogbert17> still interested in a new Coverity Scan though :)

[13:14] <dogbert17> RT #130370

[13:59] *** AlexDaniel joined
[14:58] *** undersightable6 joined
[15:02] *** zakharyas joined
[15:07] *** dalek joined
[15:07] *** p6lert joined
[15:07] *** synopsebot joined
[15:07] *** Geth_ joined
[15:35] *** Kaypie joined
[16:53] *** mojca1 joined
[17:32] *** zakharyas joined
[18:39] <timotimo> impressive. one Bridge i see in this speshlog could be 2 instructions, but is 7 ... ok maybe it would have to be 3 because takedispatcher probably can't just be thrown out?

[18:41] <timotimo> and again there's this case where it does p6oget_o twice in a row

[18:44] <timotimo> Empty ends up capturing lexicals and immediately after that overwriting the register it put that in with an argument's value

[18:45] <timotimo> huh. there's no code in there, just a class body that was put there with a BEGIN phaser

[18:46] <timotimo> i mean, it's only 40.5 miliseconds from 64k calls; 0.04% of run time

[18:47] <timotimo> for some reason its push-all actually grabs the argument value, even though it's just a $ value

[18:47] <timotimo> oh, that'd be the self, i imagine

[18:47] <lizmat> how difficult would it be to JIT template nqp::ctx ?

[18:47] <timotimo> no, it has two getargs, one being the self; self isn't even used, the body is empty

[18:48] <lizmat> timotimo: it's preventing "Promise.start" from being JITted

[18:48] <timotimo> that's a BAIL?

[18:48] <lizmat> BAIL: op <ctx>

[18:49] <timotimo> i see

[18:49] <lizmat> is what it says in the JIT log

[18:49] <timotimo> looks trivial

[18:49] <timotimo> gimme a sec

[18:50] <timotimo> ah, a bit harder than i imagined, but no big deal

[18:53] <timotimo> what's your test code?

[18:53] <lizmat> another that that  blocks DYNAMIC from being Jitted is getlexreldyn

[18:53] <lizmat> await do for ^100000 { start { } }

[18:55] <lizmat> my estimate is that ^^^ would become 7% faster

[18:55] <timotimo> ok, let me look at getlexreldyn real quick

[18:55] <timotimo> eh, that's one of the ops that wants a repr check in front

[18:56] <timotimo> they are ugly to implement

[18:56] <lizmat> ah, ok,. well, let me just put them in a ticket then

[18:56] <lizmat> ok?

[18:56] <Geth_> Â¦ MoarVM: fc1bb31263 | (Timo Paulssen)++ | 2 files

[18:56] <Geth_> Â¦ MoarVM: jit ctx (to benefit Promise.start)

[18:56] <Geth_> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/fc1bb31263

[18:57] <timotimo> sure

[18:59] <timotimo> oh, you bumped right away?

[19:00] <timotimo> maybe i should have at least run "make test"

[19:00] <lizmat> ah... ok, well, let's see  :-)

[19:01] <lizmat> Moar / NQP build ok so far

[19:04] <lizmat> rakudo builds ok, make test ok

[19:04] <timotimo> OK

[19:04] <timotimo> should be safe, then

[19:06] <lizmat> whee, Promise.start now jits  :-)

[19:07] <timotimo> that's good

[19:08] <lizmat> alas, the difference in performance is not as much as I hoped  :-

[19:09] <timotimo> what. what.  WHAT

[19:09] <timotimo> there's a PHI in the middle of a block

[19:09] <timotimo> that is *not* right

[19:10] <lizmat> something related to my question ?

[19:12] <timotimo> no, just in the speshlog for that example code

[19:14] <lizmat> should I make a ticket for that ?

[19:14] <lizmat> fwiw, spectest is fine

[19:14] <timotimo> yeah, a moarvm ticket, maybe titled "spesh sometimes leaves PHI nodes in the middle of blocks"

[19:15] <timotimo> it's not dangerous; PHI doesn't end up in the generated code. but it is a sign that somewhere in spesh's code there's a mild confusiong

[19:15] <lizmat> and we don't want that

[19:15] <timotimo> yeah, it could mean something or it could mean nothing

[19:16] <lizmat> so, "append_ins: <PHI>" is what's wrong ?

[19:17] <timotimo> no, that's just a consequence; you'd have to look at the speshlog instead

[19:17] <lizmat> ah, ok

[19:17] <timotimo> PHI only don't show up in the jit log because i put code in to hide phi, but it only looks at the beginning of BBs, which is the only place that should ever have PHI nodes

[19:20] <timotimo> ok what is this about; there's a call to set_docee in the start method?

[19:20] <timotimo> ok, it's inlined

[19:21] <lizmat> set_docee??

[19:21] <timotimo> oh perhaps it's block's clone or something

[19:21] <lizmat> yeah, looks like

[19:22] <lizmat> that's in Block.WHY, but I don't see a WHY in the profile ?

[19:23] <timotimo> it's inlined, but that doesn't necessarily mean it gets called

[19:24] <lizmat> probably in BOOTSTRAP, line 1719

[19:25] <lizmat> which is actually the most often called block in the profile (looks like 10x for eacht start { }

[19:25] <lizmat> )

[19:26] <lizmat> the Block apparently has a $!why ???

[19:27] <timotimo> it most likely doesn't

[19:27] <timotimo> i didn't say set_docee was being called, just that it shows up in the speshlog

[19:28] <lizmat> ah, ok

[19:28] <timotimo> so if it is run on a block that does have a $!why it will properly be copied

[19:31] <lizmat> but to appear in the spesh log, Block.clone would have to be called, right ?

[20:07] <jnthn> timotimo: Branch elimination + BB fusing

[20:07] <jnthn> Presuming the PHI only reads one input

[20:25] <Geth_> Â¦ MoarVM/spesh-refactor-iffy: 7 commits pushed by (Bart Wiegmans)++

[20:25] <Geth_> Â¦ MoarVM/spesh-refactor-iffy: d9fcd4eaf4 | [Spesh] remove object boolification from optimize_iffy

[20:25] <Geth_> Â¦ MoarVM/spesh-refactor-iffy: 442b076cd5 | [Spesh] Optimize known values for istrue

[20:25] <Geth_> Â¦ MoarVM/spesh-refactor-iffy: 9d8bfa1fcc | [Spesh] optimize more cases of istrue known type

[20:25] <Geth_> Â¦ MoarVM/spesh-refactor-iffy: 7761f7799c | [Spesh] unbreak rakudo by not optimizing isconcrete in istrue

[20:25] <Geth_> Â¦ MoarVM/spesh-refactor-iffy: 4a3b28de8d | [Spesh] Switch order of insert

[20:25] <Geth_> Â¦ MoarVM/spesh-refactor-iffy: e7f985af19 | [Spesh] Add optimize_unbox

[20:25] <Geth_> Â¦ MoarVM/spesh-refactor-iffy: 00a8e84647 | [Spesh] fix negated spesh of known type

[20:25] <Geth_> Â¦ MoarVM/spesh-refactor-iffy: review: https://github.com/MoarVM/MoarVM/compare/8fecf3bfaec8...00a8e8464709

[20:26] *** mojca1 left
[21:00] *** Kaiepi joined
[21:01] <timotimo> so far i've only seen them with one in and one out, yeah

[21:01] <timotimo> but it feels really wrong to have them left over

[21:02] <timotimo> you know, i once had a branch that threw out single-arg phi nodes. it made things violently explode :)

[22:05] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/03/31/2018-14-singularity-released/

[22:42] *** Kaypie joined
[22:57] *** Kaypie joined
[23:16] *** ZofBot joined
[23:34] *** SourceBaby joined
[23:41] <samcv> lizmat++
