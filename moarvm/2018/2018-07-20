[00:06] *** eater left
[00:06] *** dogbert2 left
[00:06] *** avarab left
[00:07] *** eater joined
[00:10] *** wictory[m] left
[00:10] *** ilmari[m] left
[00:10] <jnthn> bah, my spellchecker nearly had me change decrement into excrement...

[00:11] <timotimo> oh crap

[00:12] <timotimo> i've sketched out the perl6 side of how host and port will be passed to the user; want to have a quick look if i'm on the right path?

[00:13] <timotimo> https://gist.github.com/timo/508a2ee6023daade02b9005177d5b750

[00:15] *** dogbert2 joined
[00:15] *** avarab joined
[00:15] *** Voldenet joined
[00:22] <jnthn> https://6guts.wordpress.com/2018/07/20/better-usage-information-in-the-moarvm-specializer/ # no excrement :D

[00:22] <timotimo> hooray, bloggage!

[00:22] <jnthn> timotimo: Hmm, but what if we tap it multiple times?

[00:23] <jnthn> The two tappings would start two listeners, which'd get their own distinct ports...

[00:25] <jnthn> Probably we need something more like

[00:25] <timotimo> oh, that's a good point. mhm.

[00:25] <jnthn> react {

[00:25] <jnthn>     my $tap = do whenever IO::Socket::Async.listen(...) { ... }

[00:26] <jnthn>     whenever $tap.listen-port -> $port { say "I'm on port $port. Connect to me today and you could win a roll of duck tape!" }

[00:27] <jnthn> }

[00:27] <jnthn> :)

[00:27] <timotimo> ah, put it on the tap, i see.

[00:29] <MasterDuke> jnthn: "more in the a future"

[00:35] <MasterDuke> this is really minor, but in the chars bytecode example (the before), r11(2) isn't aligned the same as the rest

[00:35] <timotimo> well, it aligns the version number to match up

[00:36] <Geth> Â¦ MoarVM: jstuder-gh++ created pull request #911: Rm 'unsafe' templates already in core_templates

[00:36] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/911

[00:38] <timotimo> good post, jnthn++

[00:38] <MasterDuke> yes, very informative

[00:40] <jnthn> MasterDuke: Thanks, fixed

[00:41] <jnthn> (the typo; life's too short to figure out how wordpress managed spaces...)

[00:43] <jnthn> sleep, 'night o/

[00:45] <timotimo> gnite jnthn

[00:47] *** ilmari[m] joined
[00:50] <MasterDuke> timotimo: any idea why the routines implementing (add|sub|mul|div|mod)_I all return the value, but (neg|abs)_I sets the value into a passed in variable?

[00:50] <timotimo> they were all implemented like that initially

[00:51] <timotimo> then i put the code to create the object into the functions in bigintops.c and made it return the result instead

[00:51] <timotimo> so that i could jit the functions

[00:51] <MasterDuke> yeah, i just saw a bail because of neg_I which is why i'm looking at them now

[00:52] <MasterDuke> from this code: 'my @lines; for "i100k.txt".IO.lines>>.words -> @g { my int $index = @g[0].Int; @lines[$index - 1] = @g.tail(*-2); }; say +@lines; say now - INIT now'

[00:52] <timotimo> should be easy to find an example commit by using "git blame" on interp.c and looking for the _I ops

[00:53] <MasterDuke> but the weird thing is that there isn't even an implementation of MVM_bigint_neg (which neg_I calls). just the whatever-you-call-it in the header

[00:53] <timotimo> ah

[00:53] <timotimo> because it's so simple i guess?

[00:54] <MasterDuke> `void MVM_bigint_neg(MVMThreadContext *tc, MVMObject *result, MVMObject *a);`

[00:54] <timotimo> oh, you mean the forward declaration

[00:54] <MasterDuke> yes

[00:54] <timotimo> that's odd

[00:54] <MasterDuke> yes

[00:54] <timotimo> ah

[00:55] <timotimo> MVM_BIGINT_UNARY_OP(neg, { sb = -sa });

[00:55] <timotimo> this implements it with a macro

[00:55] <timotimo> that's how many of the ops are implemented, actually

[00:55] <MasterDuke> right, i remember that now

[00:56] <MasterDuke> really was throwing me for a loop there for a while

[00:56] <timotimo> "for a loop", haha

[00:56] <timotimo> get it

[00:57] * MasterDuke groans

[00:57] <MasterDuke> if i'd had an 'until' in the sentence i could have had all the looping constructs

[00:59] <MasterDuke> any reason not to re-write the unary ops like you did for the binary ones?

[01:01] <MasterDuke> also, any reason not to jit the speshguard* ops? i also saw a bail from speshguardtype in the same example

[01:03] <timotimo> "it threw you for a loop until you got to grips with that", unless i misunderstood?

[01:04] <timotimo> i don't see a reason not to rewrite the unary ops like that

[01:08] <MasterDuke> heh, i think you understood correctly (it's getting hard to follow the levels of indirection)

[01:12] <timotimo> i just had to get an "unless" in there, too

[01:12] <timotimo> there's also a "with" in there

[01:12] <timotimo> i'm going to bed, seeya!

[01:13] <MasterDuke> later...

[01:14] *** lizmat left
[01:21] *** lizmat joined
[01:50] *** wictory[m] joined
[01:50] *** AlexDaniel[m] joined
[05:09] *** Kaiepi left
[05:09] *** Kaiepi joined
[06:26] <Geth> Â¦ MoarVM: 8b52229112 | (Jeremy Studer)++ (committed by Bart Wiegmans) | src/jit/unsafe.expr

[06:26] <Geth> Â¦ MoarVM: Rm 'unsafe' templates already in core_templates

[06:26] <Geth> Â¦ MoarVM:

[06:26] <Geth> Â¦ MoarVM: These templates have working versions in src/jit/core_templates.expr

[06:26] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8b52229112

[06:35] *** domidumont joined
[06:41] *** domidumont left
[06:42] *** domidumont joined
[07:27] *** domidumont left
[07:28] *** domidumont joined
[07:31] *** buggable left
[07:51] *** domidumont left
[07:54] *** domidumont joined
[08:09] *** zakharyas joined
[08:28] <Geth> Â¦ MoarVM: e3e1d0d0ca | (Samantha McVey)++ | 4 files

[08:28] <Geth> Â¦ MoarVM: Use sized types for uthash (instead of using unsigned everywhere)

[08:28] <Geth> Â¦ MoarVM:

[08:28] <Geth> Â¦ MoarVM: unsigned is only guarenteed to be at least 16-bits, which is

[08:28] <Geth> Â¦ MoarVM: insufficent for what we want (we really want uint32 on all platforms for

[08:28] <Geth> Â¦ MoarVM: these variables).

[08:28] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e3e1d0d0ca

[08:46] *** robertle joined
[08:55] <Geth> Â¦ MoarVM/master: 25 commits pushed by (Jeremy Studer)++, (Bart Wiegmans)++

[08:55] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/e3e1d0d0cac7...691aa0d64848

[09:06] <Geth> Â¦ MoarVM: dad8a39f6e | (Samantha McVey)++ | src/strings/uthash_types.h

[09:06] <Geth> Â¦ MoarVM: Remove a line that shouldn't have been added in the last commit

[09:06] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/dad8a39f6e

[09:12] *** zakharyas left
[09:19] *** robertle left
[09:20] *** zakharyas joined
[09:42] *** wictory[m] left
[09:42] *** ilmari[m] left
[09:42] *** AlexDaniel[m] left
[09:45] *** benchable6 left
[09:45] *** nativecallable6 left
[09:45] *** statisfiable6 left
[09:45] *** bisectable6 left
[09:46] *** zakharyas left
[09:46] *** undersightable6 left
[09:46] *** greppable6 left
[09:47] *** zakharyas joined
[09:49] *** robertle joined
[09:53] *** ilmari[m] joined
[10:03] *** zakharyas left
[10:22] *** zakharyas joined
[10:36] *** domidumont left
[10:41] *** AlexDaniel[m] joined
[10:41] *** wictory[m] joined
[10:43] *** benchable6 joined
[10:43] *** greppable6 joined
[10:43] *** nativecallable6 joined
[10:43] *** undersightable6 joined
[10:45] *** MasterDuke left
[10:51] *** Ven`` joined
[11:04] *** zakharyas left
[11:17] *** Ven`` left
[11:27] *** yoleaux joined
[11:46] *** lizmat left
[11:48] *** lizmat joined
[12:00] *** domidumont joined
[12:10] *** domidumont left
[12:11] *** domidumont joined
[12:15] *** domidumont left
[12:16] *** domidumont joined
[12:24] *** domidumont left
[12:25] *** harrow joined
[12:25] *** domidumont joined
[12:35] *** domidumont left
[12:35] *** domidumont joined
[12:40] *** domidumont left
[12:41] *** domidumont joined
[12:45] *** domidumont left
[12:46] *** domidumont joined
[12:50] *** domidumont left
[12:53] *** domidumont joined
[13:01] *** statisfiable6 joined
[13:10] *** zakharyas joined
[13:27] <Geth> Â¦ MoarVM: jkramer++ created pull request #912: Add +x and shebangs for scripts.

[13:27] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/912

[13:31] <Geth> Â¦ MoarVM: 33363d321c | (Jonas Kramer)++ | 15 files

[13:31] <Geth> Â¦ MoarVM: Add +x and shebangs for scripts.

[13:31] <Geth> Â¦ MoarVM:

[13:31] <Geth> Â¦ MoarVM: Related to rakudo/rakudo#2077.

[13:31] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/33363d321c

[13:31] <Geth> Â¦ MoarVM: 36cd04e57b | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | 15 files

[13:31] <synopsebot> RAKUDO#2077 [open]: https://github.com/rakudo/rakudo/issues/2077 [easy to resolve][good first issue][meta] Extensions, shebangs, executable permissions in tools/ and elsewhere

[13:31] <Geth> Â¦ MoarVM: Merge pull request #912 from jkramer/issue-2077

[13:31] <Geth> Â¦ MoarVM:

[13:31] <Geth> Â¦ MoarVM: Add +x and shebangs for scripts.

[13:31] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/36cd04e57b

[14:46] <dogbert11> aha, a SEGV (in t/spec/S02-lexical-conventions/unicode-whitespace.t)

[14:46] <Geth> Â¦ MoarVM: 4d22fb9e72 | (Jonathan Worthington)++ | 3 files

[14:46] <Geth> Â¦ MoarVM: Fix protect handling in continuationcontrol

[14:46] <Geth> Â¦ MoarVM:

[14:46] <Geth> Â¦ MoarVM: Make sure we re-instate the tag at the base frame when the continuation

[14:46] <Geth> Â¦ MoarVM: is invoked.

[14:46] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4d22fb9e72

[14:47] <jnthn> Good news: got things fixed up

[14:48] <jnthn> Bad news: Ah, was talking about it in #perl6-dev, will continue there

[14:52] <dogbert11> jnthn: have a juicy SEGV if you're interested

[14:52] <dogbert11> crashes here https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L2814 context == NULL

[15:04] *** zakharyas left
[15:07] <jnthn> dogbert11: Odd, not sure about that

[15:08] <dogbert11> jnthn: i ran - MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 ./perl6-gdb-m t/spec/S02-lexical-conventions/unicode-whitespace.t

[15:09] <dogbert11> with a bit of luck you can repro it

[15:09] *** brrt joined
[15:09] <brrt> jnthn++ post

[15:11] *** zakharyas joined
[15:20] <jnthn> Another crash I see comes from trying to execute a paramnamesused instruction when there's no args context

[15:23] *** brrt left
[15:29] *** robertle left
[15:30] <jnthn> Seems I can provoke the lock-async-stress2.t crash with spesh disabled, so at least it's not going to turn out to be about that

[15:39] *** domidumont left
[15:50] *** zakharyas left
[15:58] <jnthn> Also with the fixed size allocator disabled

[16:08] <jnthn> With --no-optimize so I have useful debug symbols, and spesh and FSA disalbed to rule them out, it fails annoyingly rarely

[16:09] <jnthn> Certainly seems like something racy, but what...

[16:10] <timotimo> rr offers a "chaos mode" where it tries to make race conditions more likely to appear

[16:10] *** Dogbert4711 joined
[16:10] <timotimo> i have not yet tried it

[16:11] * Dogbert4711 power outage, sigh

[16:13] <timotimo> BBL

[16:14] <jnthn> Odd, now I can't get it to break even optimized

[16:15] *** Dogbert4711 left
[16:19] <jnthn> *sigh* ever since I put in an extra bit of diagnostic output, I just can't get it to break

[16:20] <jnthn> Clearly the solution is to include that diag :P

[16:21] <Geth> Â¦ MoarVM: 54dc849da8 | (Jonathan Worthington)++ | src/6model/reprs/MVMMultiCache.c

[16:21] <Geth> Â¦ MoarVM: Add extra diagnostic output to multi cache panic

[16:21] <Geth> Â¦ MoarVM:

[16:21] <Geth> Â¦ MoarVM: So we can see if it's a discrepancy in the lookup algorithms or if

[16:21] <Geth> Â¦ MoarVM: something more sinister is going on.

[16:21] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/54dc849da8

[16:28] <jnthn> bah, even the stresstest passes now :P

[16:28] <japhb> Declare "Better than it was before" and move on?

[16:29] <jnthn> Well, it's Friday late afternoon, so moving on is close to a certainty :)

[16:29] <jnthn> Anyway, yes, better than it was once I push my Rakudo patch

[16:31] *** diakopter joined
[16:32] <japhb> jnthn++ # Good blog post

[16:32] <diakopter> that cur_node error looks wrong?

[16:32] <japhb> jnthn: In the example with annotations, do the annotations apply to the following instruction or the preceding instruction?

[16:33] <jnthn> japhb: The following one

[16:33] <japhb> Ah, thank you.

[16:33] <jnthn> Just like the square brackets annotation syntax in C#, though I suspect that's familiar to a small subset of my readers :)

[16:34] <jnthn> diakopter: How so?

[16:34] * japhb looks forward to the next post (that was hinted at multiple times)

[16:34] <japhb> masak, probably.  Beyond that, I suspect you're right.  :-)

[16:34] <diakopter> jnthn: it says cur_node == 0 in the error, or is the error implying that claim/check failed

[16:34] <jnthn> oh, I see :)

[16:34] <jnthn> Right :)

[16:34] <jnthn> Yes, the condition is correct, the error is not

[16:36] <Geth> Â¦ MoarVM: 403460ecc8 | (Jonathan Worthington)++ | src/6model/reprs/MVMMultiCache.c

[16:36] <Geth> Â¦ MoarVM: Correct error text to match the condition

[16:36] <Geth> Â¦ MoarVM:

[16:36] <Geth> Â¦ MoarVM: Spotted by diakopter++.

[16:36] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/403460ecc8

[16:37] <diakopter> japhb: yoooooooooo

[16:37] <jnthn> Grrr...it failed this time in the stresstest but not in 100 runs under gdb :S

[16:37] <jnthn> (yes, all the gdb runs while I was running stresstest, so there was the same kind of load)

[16:37] <lizmat> .oO( I'm hearing an AI go 'na na na na na' somewhere in the background )

[16:38] *** ChanServ sets mode: +o diakopter

[16:38] *** diakopter sets mode: -o diakopter

[16:38] <diakopter> just checking lol

[16:43] <diakopter> (bumping question I asked a few years ago) - is it possible to write jit expressions for object access routines yet

[16:46] <diakopter> er, repr access routines, to be clearer

[16:47] <diakopter> and while I'm on that note, here's an even more bizarre thought - what about an API in nqp:: ops that builds up jit expressions, so that someone can write their own jittable repr in high level code

[16:48] <diakopter> (obviously extremely unsafe, haha)

[16:49] *** domidumont joined
[16:51] <jnthn> .tell brrt If you have a spare moment, please could you take a look at https://github.com/rakudo/rakudo/issues/2070 which shows we still have JIT issues on Windows. I wonder if it's related to that ARG5/ARG6 thing...

[16:51] <yoleaux> jnthn: I'll pass your message to brrt.

[16:52] <jnthn> diakopter: Don't think that got done yet; all we do in the JIT is devirtualize the calls to REPR operations.

[16:52] <jnthn> diakopter: Though now we have the expression JIT that sort of thing should be much more possible to make happen

[16:54] <diakopter> enabling jittable repr routines could enable big overall performance bumps, if I had to guess :o

[16:54] <diakopter> especially if the jit does a lot of the standard, low-hanging fruit assembly optimizations

[16:55] <diakopter> *already, I mean

[16:57] <timotimo> it doesn't do much of those :)

[16:57] <diakopter> oh :D

[16:58] <timotimo> and the exprjit doesn't yet devirt repr routines, i don't thinks

[16:58] <timotimo> hm, that could mean that exprjitting more can make our stuff slower in that way

[16:58] <diakopter> in that case, enabling jittable reprs would likely pessimize performance overall XD

[16:59] <timotimo> don't we actually have repr ops in the exprjit yet?

[16:59] <timotimo> yes, we do

[17:00] * jnthn goes for food/rest; bbl o/

[17:00] <diakopter> timotimo: where's that

[17:00] <timotimo> core_templates.expr

[17:00] <timotimo> for example push_i!

[17:01] <diakopter> timotimo: oh, but I was asking about making the repr op routines themselves jittable, not just calling to them

[17:02] <timotimo> that's more difficult :)

[17:02] <timotimo> that requires having some expansion mechanism for the exprjit

[17:02] <timotimo> i.e. it must find the right templates by looking at the REPR it has

[17:03] <diakopter> right, but it wouldn't be worth it before the jit is doing most of the standard assembly optimizations

[17:05] <timotimo> i'd claim it'd be worth a noticable bit

[17:05] <timotimo> but you probably know more than me, so ...

[17:06] <diakopter> I doubt it, but I'm basing that on the theory that C optimizers have already done a much better job with the repr op code

[17:07] <timotimo> ah, so we should probably "just" call into the functions directly from the exprjit?

[17:07] <japhb> diakopter: yo ... yo?

[17:07] <diakopter> timotimo: yeah that's my theory, at least until the jit gets a lot more optimizers

[17:08] <timotimo> we should be able to eliminate switches inside of reprops from inside the exprjit by knowing an object's type

[17:09] <timotimo> i.e. we'll know not only the REPR, but also the repr_data

[17:09] <diakopter> ah, yeah, I guess some of them do that

[17:10] <timotimo> i.e. we can have a push_i, but inside the exprjit we'll also know if it's an i64, i32, i16, or i8 array we're pushing into

[17:11] <timotimo> so not only can we throw out the check "does the kind of the op, i.e. _i vs _n, match the array type", but also directly do the index calculation properly

[17:11] <diakopter> I wonder if the jit could use the fact engine in spesh

[17:11] <timotimo> it will have to learn that, yeah

[17:11] <timotimo> it does have a path to get the facts by chasing a few pointers

[17:12] *** ZofBot left
[17:13] *** huggable left
[17:22] <masak> diakopter: suddenly I really want to see what "fruit assembly" looks like :P

[17:23] <diakopter> yes, and how to make it low-hanging

[17:24] *** domidumont left
[17:26] *** ZofBot joined
[17:28] *** huggable joined
[17:32] *** lizmat left
[17:55] *** brrt joined
[18:07] *** domidumont joined
[18:10] *** lizmat joined
[18:12] *** domidumont left
[18:16] *** AlexDaniel left
[18:18] *** AlexDaniel joined
[18:27] *** dogbert17 joined
[19:13] *** zakharyas joined
[19:34] <timotimo> i think i want to change how the three byte counts in the gc profile are counted

[19:35] <timotimo> if i remember correctly, the "freed bytes" contains unmanaged bytes, which means that cleared + promoted + retained does not equal the nursery size

[19:47] *** zakharyas left
[19:58] <dogbert17> jnthn: added https://github.com/MoarVM/MoarVM/issues/913

[20:01] <jnthn> timotimo: iirc it's promoted bytes that contains unmanaged, or at least, that's where it's most usefully retained :)

[20:01] <yoleaux> 18:18Z <brrt> jnthn: will do

[20:03] <jnthn> dogbert17: Got some other things I need to do right now, but you could try on https://github.com/MoarVM/MoarVM/blob/master/src/core/oplist#L435 adding :noinline at the end, then run perl6 tools/update_ops.p6 and re-compile and see if that helps

[20:04] <dogbert17> jnthn: will try

[20:18] <brrt> jnthn: I don't have enough memory on my machine to start a VM at this point :-(

[20:18] <brrt> will have to do so later

[20:19] <brrt> it probably is something silly

[20:19] <brrt> at least, I hope it is

[20:19] <jnthn> Yeah, I suspect it'll be silly rather than deep also

[20:19] <brrt> :-)

[20:19] <jnthn> ABI is about the only thing that differs

[20:20] <timotimo> jnthn: do you think it makes sense to count unmanaged bytes separately for all three categories?

[20:23] *** brrt left
[20:23] <jnthn> Hm, I guess we could

[20:24] <jnthn> Dunno how easy it is though

[20:24] <jnthn> Or rather, easy to do cheaply

[20:40] <dogbert17> jnthn: tried your suggestion, changed the line and ran update_ops, rebuilt and installed MoarVM and then ran the test file. It SEGV'd again. Perhaps I don't understand the procedure or some other change is needed to fix the problem

[20:41] <jnthn> Maybe

[20:41] <jnthn> Hmm

[20:42] <jnthn> Sounds like you did it right

[20:42] <jnthn> I think that change is necesary

[20:42] <jnthn> But clearly it's not sufficient on its own :)

[20:58] *** Kaiepi left
[20:59] *** Kaiepi joined
[21:07] <Kaiepi> is there documentation on how the async parts of moar work?

[21:13] *** Kaiepi left
[21:14] *** Kaiepi joined
[21:16] *** AlexDaniel[m] left
[21:16] *** wictory[m] left
[21:16] *** ilmari[m] left
[21:19] *** benchable6 left
[21:19] *** nativecallable6 left
[21:19] *** nativecallable6 joined
[21:19] *** benchable6 joined
[21:19] *** undersightable6 left
[21:20] *** statisfiable6 left
[21:39] <timotimo> i don't know, but i can tell you a bit of what i know

[21:40] <timotimo> there's one thread spawned when we want to do async stuff, and there's channels that we can push "work items" to

[21:41] <timotimo> that's what you often see, first a callable gets pushed into an array, then a bunch of arguments, then it gets pushed into a queue just with MVM_repr_push_o

[21:41] <timotimo> there's also work item management, which i haven't looked into much yet

[21:54] <Kaiepi> how would i be able to tell which code would need to be pushed to the queue?

[21:55] <timotimo> the async ops tend to let the "user" give it one or more callables

[21:55] <timotimo> those are the ones you'd push into the queue

[21:56] <timotimo> for example, listenasync pushes a code block that takes socket, error, peer-host, peer-port, socket-host, socket-port

[21:56] <timotimo> and it uses that for both errors and receiving a new connection

[22:00] <Kaiepi> so would it be a good idea to push a callback that gets the fd of a socket onto the queue?

[22:01] <timotimo> honestly, i'd tend towards re-using the same callback that already exists and make it distinct by what arguments you pass

[22:02] <Kaiepi> which one do you mean?

[22:03] <timotimo> which one are you interested in right now? building a connection?

[22:03] <timotimo> line 173

[22:03] <timotimo> that's for connecting

[22:08] <Kaiepi> i'm trying to write introspection methods for async sockets

[22:09] *** ilmari[m] joined
[22:12] <jnthn> Such as the socket fd?

[22:12] <timotimo> you'd probably want it to give the native id right when it gets created and just stash it in an attribute i think

[22:13] <jnthn> If so, I'd just send it along as an extra argument to the callback

[22:13] <timotimo> ideally as a promise

[22:13] <timotimo> i mean expose the fd to the user as a promise

[22:13] <jnthn> I don't think we need to do that

[22:13] <timotimo> because of the asynchronous nature of the queue you're pushing the task to

[22:13] <jnthn> In this particular case

[22:13] <timotimo> that's fair, too

[22:13] <jnthn> Because we know the fd at the point we create the socket

[22:13] <jnthn> So we can send along to the listen/connect callbacks

[22:14] <jnthn> And since that runs before the user ever gets the object to ask for its descriptor, we're all good ;)

[22:15] <Kaiepi> sounds good

[22:16] <jnthn> After https://github.com/MoarVM/MoarVM/blob/master/src/io/asyncsocket.c#L534 and https://github.com/MoarVM/MoarVM/blob/master/src/io/asyncsocket.c#L702 is the place to push the fd, boxed into an integer

[22:17] *** statisfiable6 joined
[22:17] <jnthn> And you'll receive it as an extra arg at https://github.com/rakudo/rakudo/blob/master/src/core/IO/Socket/Async.pm6#L175 and https://github.com/rakudo/rakudo/blob/master/src/core/IO/Socket/Async.pm6#L218 respectively

[22:18] <jnthn> Then add has $.native-descriptor on the class, do a bindattr in each of those two places I just mentioned, and that should be good.

[22:19] <Geth> Â¦ MoarVM: Kaiepi++ created pull request #914: Update dyncall to latest commit

[22:19] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/914

[22:28] *** MasterDuke joined
[22:45] *** bisectable6 joined
[22:55] *** wictory[m] joined
[22:55] *** AlexDaniel[m] joined
[22:56] <Kaiepi> oh i figured out what was wrong with the oriignal way i wrote the code

[22:56] <Kaiepi> i was being very smart and freeing the pointer to the fd before returning it

