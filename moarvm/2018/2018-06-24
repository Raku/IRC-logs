[00:03] <Geth> Â¦ MoarVM: Kaiepi++ created pull request #881: Fix tools/compare-oplist-interp-order.sh on *BSD

[00:03] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/881

[00:33] <Kaiepi> MasterDuke how can i tell if the ops were jitted?

[00:48] <MasterDuke> did you see BAILs because of them in the jit log before?

[00:49] <MasterDuke> Kaiepi: if they were jitted, then there shouldn't be those BAILs after

[00:50] <Kaiepi> ok

[00:51] <MasterDuke> Kaiepi: what are you trying to jit?

[00:59] <Kaiepi> i wanted to see if some of the io and file ops were jitable

[01:04] <Kaiepi> it doesn't look like i can since none of the ops i used BAILed, but i found some other ones i can in the meantime

[01:23] <MasterDuke> you can also look in src/jit/graph.c, if the op is listed somewhere in there it's probably already jitted

[01:32] *** reportable6 left
[01:32] *** reportable6 joined
[01:45] <Kaiepi> how does it decide which ops can or can't be jitted?

[01:59] <MasterDuke> if there's a case for them in src/jit/graph.c

[01:59] <MasterDuke> Kaiepi: btw, you might find this useful https://github.com/MoarVM/MoarVM/blob/master/docs/jit/overview.org

[02:00] <Kaiepi> thanks

[02:02] <timotimo> MasterDuke, Kaiepi, if you're talking primarily about exprjit templates, you'll want to search for "Cannot get template for:"

[02:04] <timotimo> file i/o ops are a bit more interesting than others, because they are reprops, i.e. what code they end up calling depends on the REPR in question. jit/graph.c has code for that case that checks to see if the type of the target object is known to spesh and then you can get the function pointer directly from the REPR and emit a call to that

[02:15] <timotimo> ah, actually, just looking at write_fhb, the file i/o ops do a bunch more stuff before they call into the virtual part

[04:15] <Geth> Â¦ MoarVM: 821cfd52b5 | (Ben Davies)++ | tools/compare-oplist-interp-order.sh

[04:15] <Geth> Â¦ MoarVM: Fix tools/compare-oplist-interp-order.sh on *BSD

[04:15] <Geth> Â¦ MoarVM:

[04:15] <Geth> Â¦ MoarVM: \s and \S aren't tokens in BSD regex.

[04:15] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/821cfd52b5

[04:15] <Geth> Â¦ MoarVM: 10f915d436 | (Samantha McVey)++ (committed using GitHub Web editor) | tools/compare-oplist-interp-order.sh

[04:15] <Geth> Â¦ MoarVM: Merge pull request #881 from Kaiepi/tools

[04:15] <Geth> Â¦ MoarVM:

[04:15] <Geth> Â¦ MoarVM: Fix tools/compare-oplist-interp-order.sh on *BSD

[04:15] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/10f915d436

[04:53] *** timotimo left
[05:36] *** lizmat joined
[06:49] *** lizmat left
[07:10] *** domidumont joined
[07:17] *** domidumont left
[07:17] *** domidumont joined
[08:00] *** lizmat joined
[08:27] *** Kaiepi left
[08:30] *** Kaiepi joined
[09:22] *** lizmat left
[09:37] *** robertle left
[09:45] *** domidumont left
[11:34] *** stmuk joined
[11:35] <stmuk> has anyone tried windows/clang?

[12:05] *** zakharyas joined
[12:29] *** zakharyas left
[12:31] *** domidumont joined
[13:08] *** timo joined
[13:21] *** domidumont left
[13:36] *** timo is now known as timotimo

[14:03] *** lizmat joined
[16:02] *** brrt joined
[16:02] <brrt> good * #moarvm

[16:05] <timotimo> sup brrt

[16:06] <brrt> i'm going to merge samcvs jit templates in abit

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: f14f023044 | (Bart Wiegmans)++ | 2 files

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: [JIT] Implement ctxouter

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: review: https://github.com/MoarVM/MoarVM/commit/f14f023044

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: aa3c625b9b | (Bart Wiegmans)++ | src/jit/graph.c

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: Revert "Revert "[JIT] Implement throwpayloadlexcaller""

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops:

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: This reverts commit a607c42f1bbb4136b6c7c4c328f73ebe897fd9d8.

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: review: https://github.com/MoarVM/MoarVM/commit/aa3c625b9b

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: eeb5228be5 | (Bart Wiegmans)++ | src/core/exceptions.c

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: [JIT] Change handler search to pass all handlers

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops:

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: I'll grumble about the logic another day, but I think there was a

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: discrepancy with how the JIT did it, and how spesh did it, and that

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: discrepancy should no longer exist now.

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops:

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: Does not fix the Inline::Perl5 bug though :-(

[16:08] <Geth> Â¦ MoarVM/jit-moar-ops: review: https://github.com/MoarVM/MoarVM/commit/eeb5228be5

[16:15] <Geth> Â¦ MoarVM/add-more-expr-ops: 6 commits pushed by (Samantha McVey)++

[16:15] <Geth> Â¦ MoarVM/add-more-expr-ops: a9c088c193 | Add more expr JIT ops

[16:15] <Geth> Â¦ MoarVM/add-more-expr-ops: 0bbddcee54 | Add expr JIT template for unbox_s

[16:15] <Geth> Â¦ MoarVM/add-more-expr-ops: 576eea6636 | Remove some unneeded closures from the interp.c switch

[16:15] <Geth> Â¦ MoarVM/add-more-expr-ops: 276bcef718 | Add a bunch more expr jit templates for string ops and some others

[16:15] <Geth> Â¦ MoarVM/add-more-expr-ops: 21ff25e442 | Expr templates for iscont_i, iscont_n, iscont_s, flip, rindexfrom, atpos_n, atpos_s

[16:15] <Geth> Â¦ MoarVM/add-more-expr-ops: 51ac529933 | Reorder expr jit ops to be the same as interp order

[16:15] <Geth> Â¦ MoarVM/add-more-expr-ops: review: https://github.com/MoarVM/MoarVM/compare/a9c088c19372^...51ac52993303

[16:38] *** brrt left
[16:45] *** Kaiepi left
[16:46] *** Kaiepi joined
[16:47] *** brrt joined
[16:58] <brrt> anyway, not sure if this has been discussed, but..

[16:58] <brrt> we can potentially inline a tiny string (as in, 8 ascii bytes) into the space that points to a pointer in an MVMString

[16:59] <brrt> maybe even more if we count the coutners

[17:00] <timotimo> yep!

[17:00] <timotimo> i've thought about that in the past, i might even have a branch up that has an initial attempt

[17:01] <timotimo> "in-situ-strings"

[17:02] <timotimo> oh, only 7 month old

[17:02] <timotimo> there's also mvmarray_in_situ_storage

[17:03] <brrt> that would be pretty cool, actually

[17:04] <brrt> i mean, i could argue for allocating up to 16 chars in-situ easy

[17:06] <timotimo> how'd you get the second 8 bytes?

[17:06] <timotimo> you mean num_graphs will be subsumed by having the storage type be "in situ" and then we make it null-terminated? perhaps?

[17:07] <timotimo> unless there's a null in the actual string, in which case we can't do that and fall back to a pointer?

[17:08] <brrt> no, much simpler than that

[17:08] <brrt> if you're in-situ, num_strands is 0

[17:08] <brrt> and num_graphs fits in a byte

[17:08] <brrt> well, in 4 bits, even

[17:09] <timotimo> ah, right

[17:10] *** domidumont joined
[17:11] <timotimo> feel free to steal the beginning of my branch and expand it a bit

[17:11] <timotimo> it wasn't usable when i left it

[17:11] <timotimo> at least i think it wasn't

[17:11] <brrt> furthermore, even with in-situ strings (for byte-sized characters), we only have 5 (or 6?) string types anyway

[17:12] <brrt> so using a MVMuint16 for it is wasteful

[17:12] <timotimo> yeah, the type fits into a few bits easy

[17:12] <timotimo> well, if we used something else, it'd just be padding there instead

[17:12] <brrt> depends on how you order things, but yes

[17:12] <timotimo> also, in situ will still have to decide between 8bit signed/unsigned and 32bit

[17:13] <brrt> i'm thinking of restricting it to ascii only

[17:13] <timotimo> hmm

[17:13] <brrt> with the hypothesis that even today ascii will be much more common than others

[17:13] <timotimo> if we have 32bit in situ, we could store the result of chr for every value in an in-situ string. not sure how much that is worth

[17:14] <timotimo> btw should we maybe rename ASCII to LATIN1 there? because i do believe we accept the first 255 unicode chars rather than just the first 127

[17:16] <brrt> also, you can union the array with more than just the pointer size; if you do an in-situ allocation, you're also saving on the call for malloc() and free(), and you're saving the metadata that glibc uses for maintaining malloc() and free()

[17:16] <brrt> or whatever malloc() you're actually using

[17:17] <brrt> so if you union{} the pointers with a 16 byte array, arguably you'd still save memory

[17:18] <timotimo> but MVMString itself gets allocated in the nursery and/or gen2

[17:18] <timotimo> where we pack things much more tightly

[17:18] <brrt> true, so the more reason to avoid using malloc() by using in-situ allocation :-)

[17:19] <brrt> also, if my reading is correct, type punning via unions is implementation-defined, not undefined behaviour is C, so we can do that safely

[17:20] <brrt> (it is undefined behaviour in C++, which is an excellent reason for me to avoid using C++ for MoarVM)

[17:20] <brrt> i'll take a look at the branch

[17:21] <timotimo> we should check what exact size class MVMString falls into and if we have a bit of memory left at the end if we're in gen2

[17:22] <Geth> Â¦ MoarVM/master: 7 commits pushed by (Samantha McVey)++, (Bart Wiegmans)++

[17:22] <Geth> Â¦ MoarVM/master: a9c088c193 | Add more expr JIT ops

[17:22] <Geth> Â¦ MoarVM/master: 0bbddcee54 | Add expr JIT template for unbox_s

[17:22] <Geth> Â¦ MoarVM/master: 576eea6636 | Remove some unneeded closures from the interp.c switch

[17:22] <Geth> Â¦ MoarVM/master: 276bcef718 | Add a bunch more expr jit templates for string ops and some others

[17:22] <Geth> Â¦ MoarVM/master: 21ff25e442 | Expr templates for iscont_i, iscont_n, iscont_s, flip, rindexfrom, atpos_n, atpos_s

[17:22] <Geth> Â¦ MoarVM/master: 51ac529933 | Reorder expr jit ops to be the same as interp order

[17:22] <Geth> Â¦ MoarVM/master: 4d9829c061 | Merge branch 'add-more-expr-ops'

[17:22] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/10f915d4364f...4d9829c061d3

[17:22] <brrt> yeah :-)

[17:22] <brrt> re: char-of-MVMint32-in-situ: that's actually a really good point

[17:22] <timotimo> how hard will it be to use "known type" from spesh in the exprjit optimizer soon-ish?

[17:23] <timotimo> we don't use that at all right now, right?

[17:25] <brrt> hmmm

[17:25] <brrt> not that hard, but i'm moving at it somewhat laterally

[17:26] <brrt> and, as I realized, maybe even inefficiently

[17:26] <timotimo> oh, but if we know the type with something like iscont_*, spesh will already have turned it into a constant anyway

[17:26] <brrt> yes

[17:26] *** zakharyas joined
[17:26] <brrt> and spesh is much better at analyzing cross-opcode relations anyway

[17:26] <brrt> the expr jit can do two things though:

[17:26] <timotimo> except for stuff that's kind of "hidden away" from spesh

[17:27] <timotimo> like "the first thing this op's implementation does is check the reprid"

[17:27] <timotimo> like, we'd often have an existskey followed by an atkey or bindkey

[17:27] <brrt> - it can easily generalize some optimizations (like 'read the function from the repr structure) if the repr structure is constant

[17:27] <timotimo> there'll be a branch in between, but still...

[17:28] <brrt> - it can 'blend' opcodes together and implement constant-folding accross them

[17:28] <brrt> (or other optimizations)

[17:28] <brrt> - we can produce specialized templates in a way that would probably not be practical as specialized opcodes for representations

[17:29] <timotimo> yes

[17:29] <brrt> the thing is, for that to work, I need to associate an expression tree node with a set of spesh facts

[17:29] <timotimo> yeah

[17:30] <brrt> restricted to just those facts that we can use without inserting guards (since we're too late in the pipeline to insert guards)

[17:31] <brrt> now, I have a structure called MVMJitExprNodeInfo which could hold that but it is a pain to maintain correctly during tree optimizations

[17:31] <timotimo> mhm

[17:31] <brrt> and also, it is only useful for operator nodes (not for links / constants)

[17:32] <brrt> and what information we do need can fit in a 32 bit value

[17:33] <brrt> and finally; the info on operator nodes we need always (like size and register-type)

[17:33] <brrt> whereas facts information we only need for nodes that directly correspond to an interpreter variable

[17:33] <timotimo> mhm

[17:33] <brrt> so what i want to do is create a struct for the operator nodes, and union that with the link nodes, and remove the separate info array entirely

[17:34] <brrt> and then, to use some lookup structure to associate spesh facts with nodes

[17:35] <brrt> and that doesn't need to be maintained together with the expr nodes themselves, which saves when we are manimpulating nodes in the optimizer

[17:35] <timotimo> mhm

[17:35] <brrt> makes sense?

[17:35] <brrt> :-)

[17:36] <timotimo> i think so

[17:43] <brrt> cool

[17:48] <brrt> re: in-situ strings, we can even get rid of the cached_hash_code, since if the string is small enough to live in-situ, recalculating the hash will be cheap

[17:49] <timotimo> it'll be cheap if the code for hashing is still in memory

[17:49] <timotimo> if not, it'll be an instruction cache hit that could have been prevented

[17:50] <brrt> hmmm

[17:50] <brrt> okay, so we'd better measure that then

[17:50] <brrt> then again, in case we want to access that, good chance that code is in memory

[17:50] <brrt> :-)

[17:56] *** brrt left
[17:59] *** zakharyas left
[18:00] *** zakharyas joined
[18:04] *** lizmat left
[18:46] *** domidumont left
[19:52] *** Kaiepi left
[19:52] *** Kaiepi joined
[20:09] *** brrt joined
[20:31] *** brrt left
[21:03] *** zakharyas left
[21:22] *** brrt joined
[23:22] <jnthn> .

[23:22] <yoleaux> 09:24Z <tyil> jnthn: would you have time to talk to me about something around 8PM paris time today?

[23:22] <brrt> i'm guessing not :-)

[23:22] <jnthn> Indeed :)

[23:23] <jnthn> brrt: Is the expr JIT, at the MoarVM instruction level, effectively implementing the memory-to-memory model?

[23:23] <brrt> ehm. can you rephrase that?

[23:23] <jnthn> If we have something like

[23:24] <jnthn> add r2(1), r1(1), r0(1)

[23:24] <jnthn> mul r2(2), r2(1), r1(1)

[23:24] <jnthn> And if that is the only use of r2(1), is it able to avoid writing it back into ->work?

[23:24] <brrt> yes

[23:25] <jnthn> Nice; how much further does that go, ooc?

[23:25] <jnthn> Is it a kind of "all uses within the expression"?

[23:25] <brrt> yes

[23:25] <brrt> well, the algorithm is actually super simple

[23:27] <Kaiepi> do ops like this that throw need to be done in asm or can i still make expr jit templates for them? https://hastebin.com/lorotowayi.rb

[23:27] <brrt> we process the instructions in code order. when we find an input operand that hasn't been used yet, we load it from memory (and it is associated by a 'template variable' like $1 or $2)

[23:28] <brrt> when an opcode defines a value (like add does for r2(1)), we keep the associated node in a lookup table

[23:28] <brrt> same goes for the 'autovivified' local values like r1(1) and r0(1)

[23:30] <brrt> when we then process mul, the r2(1) is looked up to be the result node of add; the r1(1) is the node already used for the add input operand

[23:30] <brrt> if that mul is the last write, then at the end of the basic block (currently), we insert the store to memory

[23:30] <brrt> plan is to delay that store indefinitely if possible

[23:31] <brrt> Kaiepi: that's totally possible in the expr JIT, although I'm not entirely sure if we can handle constant strings well yet

[23:31] <brrt> but that is a silly matter that i'm working to clean up

[23:32] <brrt> the expr tree IR itself uses a register-to-register model (all loads and stores are explicit)

[23:32] <brrt> jnthn: so your example would in practice become something like:

[23:34] <brrt> (let (($r0 (load (addr (work) 0))) ($r1 (load (addr (work) 8)))) (store (addr (work) 16) (mul (add $r0 $r1) $r1)))

[23:35] <brrt> (if you can read that ;-))

[23:38] <brrt> anyway, i'm going to sleep now

[23:38] <brrt> speak you later

[23:38] <jnthn> Thanks for explaining :)

[23:38] <jnthn> Will read it and think about it some, though also probably after sleep :)

[23:38] <brrt> hope it made any sense

[23:38] <jnthn> But basically, this means the expr JIT has a pretty huge potential advantage here

[23:39] <jnthn> So I should probably be writing expr jit templates for my new guards and stuff to get representative results.

[23:43] *** brrt left
