[00:00] *** TimToady left
[00:20] *** TimToady joined
[00:53] *** Kaiepi joined
[02:48] *** lizmat left
[03:10] *** Kaiepi left
[03:11] *** Kaiepi joined
[03:18] *** lizmat joined
[03:23] *** lizmat left
[04:35] *** AlexDaniel left
[05:36] *** AlexDaniel joined
[05:57] *** Kaiepi left
[05:57] *** Kaypie joined
[06:04] *** domidumont joined
[06:08] *** domidumont left
[06:09] *** domidumont joined
[06:37] *** Merfont joined
[06:39] *** Kaypie left
[07:07] *** robertle joined
[07:24] *** lizmat joined
[07:51] *** Redfoxmoon left
[07:51] *** Redfoxmoon joined
[07:51] *** Redfoxmoon is now known as niom

[07:51] *** niom is now known as Redfoxmoon

[08:01] *** Merfont left
[08:03] *** Kaiepi joined
[08:21] *** zakharyas joined
[08:28] *** zakharyas1 joined
[08:30] *** zakharyas left
[08:33] *** zakharyas1 left
[08:33] *** zakharyas joined
[08:39] *** brrt joined
[08:44] *** AlexDaniel left
[09:02] <brrt> good *

[09:32] <jnthn> o/

[09:45] <brrt> jnthn: i wanted to know what you think regarding the whole type punning / strict aliasing thing; the context is that I want to union {} the 'node info' array with the 'tree nodes and references' array, since that saves me from having to manually keep them in sync every time the array is changed, which is often in the expression optimizer

[09:45] <brrt> my solution was either to have a union of structs, or simply an array-of-unions

[09:46] <brrt> the point is, since that is apparently all problematic under strict aliasing, i'm not sure whether or not to go ahead with it

[09:51] <jnthn> Hm, I thought unions where part of the correct way to deal with such things?

[10:06] <brrt> it is a vague matter

[10:06] <brrt> i thought that as well, but apparently only memcpy is legal

[10:18] *** brrt left
[10:50] *** AlexDaniel joined
[10:57] *** brrt joined
[11:11] *** zakharyas left
[11:14] <Geth> ¦ MoarVM/pluggable-spesh: 6a022aa1ca | (Jonathan Worthington)++ | 3 files

[11:14] <Geth> ¦ MoarVM/pluggable-spesh: Set facts on spesh plugin resolvee

[11:14] <Geth> ¦ MoarVM/pluggable-spesh: review: https://github.com/MoarVM/MoarVM/commit/6a022aa1ca

[11:19] <brrt> oh, now that you're probably online anyay, any thoughts on moving the p6 'extension ops' out of rakudo and into moarvm?

[11:19] <brrt> i assume that's orthogonal to your work in pluggable-spesh

[11:25] *** Kaiepi left
[11:26] *** lizmat left
[11:40] *** AlexDaniel left
[12:16] <jnthn> brrt: Actually, it's very related, because many of the extension ops relate to assignment, and I'm going to completely redo Scalar and assignment in terms of spesh plugins next week :)

[12:16] <jnthn> And then I expect a lot of the C code will go away :)

[12:18] <brrt> <3

[12:18] <jnthn> Not all of it of course, but some :)

[12:18] <jnthn> I'd rather consider the extops one by one and figure out what best to do with them

[12:19] <brrt> okay. then my simple plan of copy-psting them in the moarvm source tree is redundant

[12:19] <brrt> thing is, i'm no longer seeing the point of having them separately maintained

[12:20] <brrt> and having them embedded in the interpreter makes things like a 'fakexecutable' for perl6 somewhat simpler

[12:20] <jnthn> Yeah, agree

[12:21] <brrt> but i'll happily await your redo of Scalar

[12:21] <brrt> :-)

[12:22] <brrt> plenty to do in the JIT, anyway; one of these days i want to tackle some improvmeents on the register allocator

[12:23] <jnthn> btw, dunno if you saw the last commit I did in the Rakudo repo, but just wrote the first real spesh plugin and it gets us 6.6x faster private method calls inside of roles :)

[12:24] <brrt> did not see, no

[12:32] <brrt> oh, i see

[12:32] <brrt> cool

[12:36] *** zakharyas joined
[12:53] *** AlexDaniel joined
[13:08] <jnthn> Currently working on one for $foo.Bar::baz

[13:10] <jnthn> Hm, blows up in the JIT, for an issue I thought I'd already fixed.

[13:11] <jnthn> But with MVM_JIT_DISABLE=1 it's 13.3s -> 2.06s

[13:15] <jnthn> Ah :S

[13:16] <jnthn> It's about inline

[13:16] <jnthn> I get I'm in trouble for taking a single deopt annotation and re-using it over a set of guards

[13:16] <jnthn> *I but

[13:18] <jnthn> hah, *I bet :)

[13:23] <jnthn> Uff, yes.

[13:25] *** AlexDani` joined
[13:27] *** AlexDaniel left
[13:43] <jnthn> Cool, after that fix it's 1.07s with the JIT :)

[13:49] <timotimo> wowza, that's a nice improvement

[13:49] <Geth> ¦ MoarVM/pluggable-spesh: c1d3f6e09a | (Jonathan Worthington)++ | 3 files

[13:49] <Geth> ¦ MoarVM/pluggable-spesh: Only use a deopt table index once in the graph

[13:49] <Geth> ¦ MoarVM/pluggable-spesh:

[13:49] <Geth> ¦ MoarVM/pluggable-spesh: Re-using them makes for great amounts of confusion when we take some

[13:49] <Geth> ¦ MoarVM/pluggable-spesh: specialized code for inlining and reconstruct the deopt annotations. If

[13:49] <Geth> ¦ MoarVM/pluggable-spesh: two annotations in the original graph shared a position in the table,

[13:49] <Geth> ¦ MoarVM/pluggable-spesh: then we cannot reconstruct both. The result would be a JIT oops if we

[13:49] <Geth> ¦ MoarVM/pluggable-spesh: inlined the specialization of a speshresolve that introduced more than

[13:49] <Geth> ¦ MoarVM/pluggable-spesh: one guard.

[13:49] <Geth> ¦ MoarVM/pluggable-spesh: review: https://github.com/MoarVM/MoarVM/commit/c1d3f6e09a

[13:50] <jnthn> Yeah, I thought that was relatively rarely used

[13:50] <jnthn> Then discovered there's 66 instances of it in CORE.setting

[13:51] <jnthn> ah, some spectest fail to look at though :(

[13:51] <jnthn> oh, duh

[13:54] <jnthn> yes, good, it was just a silly thinko

[14:15] <jnthn> I guess I can do this trick for .? too

[14:29] <brrt> I thank my lucky stars that the JIT is sometimes codes sufficiently defensively

[14:29] <brrt> not always unfortunately

[14:29] <brrt> also, jnthn++

[14:36] <jnthn> Yeah, some win on the .? case too

[14:37] <jnthn> Looks like 1.5x - 2.5x though I used rand in the benchmark which is costs something

[14:37] <jnthn> So the actual win on the .? itself will be more than that

[14:38] <jnthn> It's 1.5x faster in a case that's 50/50 different objects, and 2.5x in a case that's 999/1 different objects

[14:39] <jnthn> ('cus in the latter case it's in the sufficiently monomorphic category)

[14:42] <brrt> :-D

[14:42] <brrt> oh, can i subtly point you to MVM_VECTOR(...) - you're free and welcome to keep on writing your own vector management routines, but I find them to be worth the inconvenience of a free() at the end

[14:43] <brrt> which is especially easy to deal with for a spesh graph

[14:43] <jnthn> Yeah, should probably switch a few things over to that

[14:50] <timotimo> :D

[14:50] <timotimo> i should be using that more often, indeed

[14:52] <timotimo> i wonder if compiling guard tables will give another juicy win here

[14:55] <timotimo> btw, have we ever considered jitting nfas? or are they not costly enough at the moment after the last improvement?

[14:57] <jnthn> Well, in the monomorphic case we don't look at the guard table at all

[14:57] <timotimo> right

[14:58] <timotimo> i was refering to one of the last sentences in the commit message

[14:58] <jnthn> Did occur to me that we can consider compiling them in the other case

[14:58] <jnthn> Dunno how much of a win it'd be

[14:59] <timotimo> the guard table is already rather compact in memory, i believe

[14:59] <jnthn> Yeah

[14:59] <jnthn> To really get a win we'd need to do more sophisticated splitting, I suspect

[15:00] <jnthn> (e.g. explode the dependent code so we can inline the two options, for example)

[15:00] <timotimo> mhm

[15:08] <jnthn> brrt: Can something of the form `x = some_integer ? y : z` compile into something nice when we know x and y are simple constants, not expressions (e.g. some kind of conditional move)?

[15:08] <jnthn> oops, when we know y and z

[15:09] *** brrt left
[15:11] *** domidumont left
[15:42] <Geth> ¦ MoarVM/pluggable-spesh: bf60f5feff | (Jonathan Worthington)++ | src/spesh/plugin.c

[15:42] <Geth> ¦ MoarVM/pluggable-spesh: Allow recursive use of nqp::speshresolve

[15:42] <Geth> ¦ MoarVM/pluggable-spesh:

[15:42] <Geth> ¦ MoarVM/pluggable-spesh: Would be quite unusual, but could happen in meta-programming.

[15:42] <Geth> ¦ MoarVM/pluggable-spesh: review: https://github.com/MoarVM/MoarVM/commit/bf60f5feff

[15:45] *** zakharyas left
[15:46] <Geth> ¦ MoarVM/pluggable-spesh: 7ea08c9a35 | (Jonathan Worthington)++ | src/spesh/plugin.c

[15:46] <Geth> ¦ MoarVM/pluggable-spesh: Fix a memory leak

[15:46] <Geth> ¦ MoarVM/pluggable-spesh: review: https://github.com/MoarVM/MoarVM/commit/7ea08c9a35

[15:47] <jnthn> Alright, I think I can merge this thing :)

[15:47] *** Kaiepi joined
[15:47] <timotimo> ooooooh

[15:47] <jnthn> I've still got the attribute case to go, but no reason not to have this in already

[15:48] <Geth> ¦ MoarVM/master: 27 commits pushed by (Jonathan Worthington)++

[15:48] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/c58dadb1a87d...7ea08c9a352c

[15:48] <timotimo> and at some point scalars

[15:48] <jnthn> The Scalars need that bit

[15:48] <jnthn> I meant "of things directly relating to the plugin mechanism" though :)

[15:49] <timotimo> i'm not entirely sure how scalars will be changed; we'll resolve a FETCH or STORE if we need to, and otherwise inline a super simple attribute assignment/access?

[15:49] <jnthn> See https://gist.github.com/jnthn/e51a06c6882fbc6219e0fa0a3dd373e6 for my notes on it

[15:50] <timotimo> ah, i forgot about half the stuff already :D

[15:50] <jnthn> (near the bottom)

[16:03] *** lizmat joined
[16:13] *** robertle left
[16:16] *** Kaiepi left
[16:56] *** brrt joined
[16:58] <brrt> jnthn: yes, we can, but it is not necessarily an obvious win

[16:59] <brrt> well, hmm, now that i think of it, i can think of a cute way to compile that

[17:02] <brrt> you'd have to do a mov r1, const1; mov r2, const2; test condition; cmovz r1, r2; (or something like that)

[17:02] <brrt> i recall there being arguments that this wasn't ideal though

[17:02] <brrt> although it is shorter in code

[17:29] *** domidumont joined
[17:48] *** robertle joined
[17:49] *** robertle left
[18:04] *** brrt left
[18:17] *** Kaiepi joined
[18:20] *** lizmat left
[18:57] <japhb> Noticed as I was browsing the merge -- https://github.com/MoarVM/MoarVM/commit/0eeac85fbc1e53033acbed10920f37162aa6ae7b does the opposite of what its commit message says.  Accidental revert?

[19:00] *** domidumont left
[19:06] *** AlexDani` is now known as AlexDaniel

[19:12] <jnthn> japhb: No, the commit is correct, then the commit message is wrong

[19:12] <jnthn> d'oh

[19:19] <japhb> Ah, gotcha.

[19:48] *** Kaiepi left
[19:48] *** Kaiepi joined
[20:56] <timotimo> the moarvm fuzzing work has found its last unique crash 2 days, 15 hours ago

[20:56] <timotimo> i wonder when i should terminate it

[20:57] <MasterDuke> ah ha, that's another thing that should be automated!

[20:57] <timotimo> http://hack.p6c.org/~timo/moar-fuzzing-stuff.tar.xz - 561ca412d9e53c7b09871e3a6eb825c8ae40a92ca3a7fbcf233528d442bd5938

[20:58] <MasterDuke> and code coverage reports

[20:58] <MasterDuke> i have so many good idea

[20:58] <timotimo> it's just below 500 kilobytes big, but extracts to about 320 megs

[20:58] <MasterDuke> timotimo: you know where the bug is?

[20:58] <timotimo> what bug?

[20:59] <MasterDuke> whatever causes the crash?

[20:59] <timotimo> what's "the crash"?

[20:59] <timotimo> i'm confused %)

[21:00] <timotimo> you mean the crashes that the fuzzer has found?

[21:02] <MasterDuke> yeah

[21:02] <timotimo> well, it claims to have found 868 unique kinds of crashes

[21:02] <timotimo> i have not looked into more than three or four

[21:02] <MasterDuke> ah

[21:03] <timotimo> the tar.xz has the .moar files that cause the crashes

[21:06] <timotimo> more (or less) interesting is the nqp fuzzing, i.e. the fuzzer generates random nqp source code and tries to crash nqp/moar with it

[21:06] <timotimo> it claims to have found 107 unique crashes, but none that i tried did anything at all

[21:07] <timotimo> the inputs look interesting, like ...

[21:07] <timotimo> 00000000: 6865 636b 205d 0d2b 1022 0d0d 0d0d 2321  heck ].+."....#!

[21:07] <timotimo> 00000010: 2063 7170 1063 6b74 1022 6f5f 0a3c 2063   cqp.ckt."o_.< c

[21:07] <timotimo> 00000020: 68cd 9f0e 512d 72cd 9fcd 9263 0ec5 92cc  h...Q-r....c....

[21:07] <timotimo> 00000030: 9f6f cd92 63cd 9220 004b 6b68 626e 41cd  .o..c.. .KkhbnA.

[21:07] <timotimo> that makes me think it's not being very successful in ifguring out what things do

[21:09] <timotimo> huh, one of the files had an MVM environment variable name in it... how did that get there? perhaps i had the launcher script in there, too

[21:12] *** AlexDaniel left
[21:13] *** AlexDaniel joined
[21:13] <timotimo> i'll go ahead and minimize the test files a little

[21:14] <MasterDuke> hm. so it claims to have nqp code that crashes moar, but you can't repro?

[21:14] <timotimo> even though it could very well be impossible to change the input file size because it might verify that it's long enough to have all its sections?

[21:16] <timotimo> anyway, minimizing the files will still make the files better compressible

[21:18] <timotimo> it'll take three quarters of forever

[21:18] <timotimo> you want to have a look at the files that it believes makes nqp crash?

[21:21] <MasterDuke> sure

[21:23] <timotimo> http://hack.p6c.org/~timo/nqp_crashes.tar.xz  -  5993e3e20787db6fb5dac5d53dd713f5f9c8b3d4c237a6fbfdc950de7a8dcb99

[21:27] <MasterDuke> just run the scripts in nqp_input_raw?

[21:27] <timotimo> cd into nqp_input_raw and run the files in ../findings/crashes/

[21:35] <MasterDuke> why cd to nqp_input_raw?

[21:35] <timotimo> because that's where the code was run from

[21:36] <timotimo> if any of the files try to access any other files from ./, it'll have to be from there

[21:38] <MasterDuke> no crashes for me

[21:38] <timotimo> thought so :(

[21:38] <timotimo> the moar files should crash so much more reliably

[21:40] <timotimo> afl-tmin is fun. it replaces every character in the file that doesn't matter with an ascii 0

[21:44] <timotimo> github's org-mode renderer doesn't understand =

[21:44] <timotimo> "Macro parameters are prefixed by =,= (e.g. =,obj=),"

[21:54] <samcv> so how do you see what ops were not jit'd timotimo

[21:58] *** lizmat joined
[22:02] <jnthn> samcv: iirc, MVM_JIT_LOG=somefile in the environment, then grep BAIL somefile

[22:13] <Geth> ¦ MoarVM: jstuder-gh++ created pull request #872: Define SIGBREAK on WIN32

[22:13] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/872

[22:41] <Geth> ¦ MoarVM: cfbfdc130a | (Jeremy Studer)++ | src/io/signals.c

[22:41] <Geth> ¦ MoarVM: Define SIGBREAK on WIN32

[22:41] <Geth> ¦ MoarVM:

[22:41] <Geth> ¦ MoarVM: SIGBREAK is another signal emulated by libuv on Windows, but is not

[22:41] <Geth> ¦ MoarVM: defined in the platform's signal.h file. Using the same signum provided

[22:41] <Geth> ¦ MoarVM: to it in NodeJS's os.constants.signals object.

[22:41] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cfbfdc130a

[22:41] <Geth> ¦ MoarVM: 3d51256c1c | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/io/signals.c

[22:41] <Geth> ¦ MoarVM: Merge pull request #872 from jstuder-gh/new_sig_sigbreak

[22:41] <Geth> ¦ MoarVM:

[22:41] <Geth> ¦ MoarVM: Define SIGBREAK on WIN32

[22:41] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3d51256c1c

[22:47] <timotimo> releasable6: status

[22:47] <releasable6> timotimo, Next release in ≈7 days and ≈20 hours. 4 blockers. 0 out of 60 commits logged

[22:47] <releasable6> timotimo, Details: https://gist.github.com/e6c859b62fe5b01671255630cd3ae950

[22:50] *** Kaiepi left
[23:21] *** AlexDaniel left
[23:22] *** AlexDaniel joined
[23:42] <timotimo> test case minimization has reached id:000017

