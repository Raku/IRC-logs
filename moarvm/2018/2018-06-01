[00:00] <buggable> üé∫üé∫üé∫ It's time for the monthly Accidental /win Lottery üòçüòçüòç We have 2 ballots submitted by 1 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 3! Congratulations to [Coke]! You win a roll of duck tape!

[00:03] *** harrow left
[00:17] *** harrow joined
[01:46] *** ilbot3 left
[01:57] *** ilbot3 joined
[03:44] *** AlexDaniel left
[03:44] *** nine left
[03:46] *** benchable6 left
[03:46] *** coverable6 left
[03:47] *** coverable6 joined
[03:47] *** benchable6 joined
[03:47] *** shareable6 left
[03:47] *** squashable6 left
[03:47] *** greppable6 left
[03:48] *** committable6 left
[04:25] *** Kaiepi joined
[04:44] *** committable6 joined
[04:44] *** greppable6 joined
[04:45] *** squashable6 joined
[05:04] *** brrt joined
[05:05] <brrt> good hi #moarvm

[05:05] <brrt> .seen jnthn

[05:05] <yoleaux> I saw jnthn 30 May 2018 21:01Z in #perl6-dev: <jnthn> nine++ for not taking the nqp:: shortcut outside of the Rakudo repo :)

[05:06] <samcv> good hi brrt :)

[05:13] <brrt> good hi samcv

[05:19] <brrt> i'll take a look at those coverity things later :-)

[05:58] <samcv> cool :)

[06:20] *** domidumont joined
[06:26] *** domidumont left
[06:27] *** domidumont joined
[06:57] *** Ven`` joined
[07:02] <Geth> ¬¶ MoarVM: ff312c4cf8 | (Bart Wiegmans)++ | 4 files

[07:02] <Geth> ¬¶ MoarVM: [JIT] Fixes for coverity

[07:02] <Geth> ¬¶ MoarVM:

[07:02] <Geth> ¬¶ MoarVM: - use MVM_ARRAY_SIZE, which I want to promote to a 'global' macro at

[07:02] <Geth> ¬¶ MoarVM:   some point

[07:02] <Geth> ¬¶ MoarVM: - add a 'tiny bitmap' function for single MVMuint64 bitmaps

[07:02] <Geth> ¬¶ MoarVM: - precompute the size of the templates array (so we can't overflow),

[07:02] <Geth> ¬¶ MoarVM:   although we couldn't in reality (the templates array is equal in size

[07:02] <Geth> ¬¶ MoarVM:   to the defined opcodes, and non-defined opcodes can't be present in

[07:02] <Geth> ¬¶ MoarVM:   the spesh graph)

[07:02] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ff312c4cf8

[07:08] *** brrt left
[07:19] *** AlexDaniel joined
[07:26] *** Ven`` left
[07:26] *** Ven`` joined
[07:30] <samcv> brrt++

[07:47] *** nine joined
[07:49] *** yoleaux left
[07:50] *** undersightable6 left
[07:50] *** undersightable6 joined
[07:52] *** Ven`` left
[08:01] *** zakharyas joined
[08:14] <Redfoxmoon> Is cross compilation supported at all?

[08:55] *** Ven`` joined
[09:19] *** AlexDaniel left
[09:30] <lizmat> Redfoxmoon:  not at the moment, afaik, but I know of some people thinking of getting this off the ground this year

[09:30] <Redfoxmoon> hmmmm

[09:31] <Redfoxmoon> I see, does the interpreter need to run while building?

[09:32] <lizmat> if you're talking about Moar, I don't think so

[09:32] <Redfoxmoon> Yeah, that's interesting

[09:33] <lizmat> in the case of Perl 6: well, parts of Perl 6 are written in Perl 6

[09:33] <Redfoxmoon> heheh.

[09:33] <lizmat> but you could argue that it is still nqp running when compiling Perl 6

[09:33] <Redfoxmoon> so you could in theory cross compile moarvm and use it to build perl 6 natively?

[09:49] *** yoleaux joined
[09:51] *** AlexDaniel joined
[10:01] *** AlexDaniel left
[10:03] <lizmat> Redfoxmoon: sorry, was afk: but yes, in theory, yes

[10:13] *** brrt joined
[10:14] *** Ven`` left
[10:16] <brrt> Redfoxmoon: note that some parts of rakudo are written as extensions to moarvm, so these would need to be crosscompiled as well

[10:17] *** AlexDaniel joined
[10:19] <brrt> and there are some, too (me), who would prefer that to be not the case

[10:20] <Redfoxmoon> mmmm interesting

[10:23] <Redfoxmoon> so in theory moarvm could be autotoolized and it would "just work" heheh.

[10:23] <Redfoxmoon> except perhaps the pesky visual studio stuff

[10:26] <brrt> meh, i'd rather stay away from autotools if it's all the same :-)

[10:26] <brrt> i mean, Configure.pl is already to complicated for what it does

[10:27] <brrt> oh that reminds me

[10:27] <brrt> .tell samcv that instead of per-compiler 'likely' flags, we can use '#ifdef _MSCV_VER' and friends

[10:27] <yoleaux> brrt: I'll pass your message to samcv.

[10:28] <brrt> the idea being that i want to move things out of Configure.pl if at all possible

[10:28] <brrt> (because Configure.pl has to probe and estimate the compiler, whereas the compiler knows which compiler it is, so to speak)

[10:31] <Redfoxmoon> well, plain makefiles can be used too

[10:31] <Redfoxmoon> I'll have a stab at it later today / tomorrow

[10:32] <brrt> alright, let us know how it goes

[10:32] <brrt> (what are you going to cross-compile to?)

[10:32] <Redfoxmoon> a new posix layer for windows

[10:32] <Redfoxmoon> (not cygwin)

[10:33] <Redfoxmoon> (and perl5 doesn't work there yet:-) )

[10:35] <lizmat> ++Redfoxmoon

[10:35] *** Ven`` joined
[10:35] <Redfoxmoon> lizmat, o_O?

[10:36] <lizmat> well, perhaps üëç would have been clearer ?

[10:36] *** Ven`` left
[10:37] *** Ven`` joined
[10:38] <Redfoxmoon> well it's still in pre-alpha, here midipix.org

[10:41] <lizmat> Redfoxmoon: looking forward to being able to mention that Perl 6 runs on Windows with midipix  :-)

[10:42] <Redfoxmoon> heheh.

[10:42] <Redfoxmoon> that depends entirely on getting it to cross compile

[10:42] *** Ven`` left
[10:42] <Redfoxmoon> I saw alpine has moarvm, so there won't be issues with musl either

[10:42] <Redfoxmoon> which is nice.

[10:42] *** Ven`` joined
[10:44] *** AlexDaniel left
[10:48] <Redfoxmoon> probably.

[10:48] *** Ven`` left
[10:49] *** Ven`` joined
[10:52] <brrt> Redfoxmoon: one potential thing to think about is libuv

[10:52] <brrt> as i gather that can be a bit of work to compile on your platform

[10:53] <Redfoxmoon> libuv ported already

[10:53] <Redfoxmoon> well, "aggressively ported" -- it should work but not upstreamable:-)

[10:55] <brrt> oh, impressive :-)

[10:56] *** Ven`` left
[10:56] *** Ven`` joined
[10:58] <Redfoxmoon> I mean, I am not that proud of my libuv port https://github.com/lalbornoz/midipix_build/blob/master/patches/libuv-1.19.2.local.patch

[10:58] <Redfoxmoon> heheh.

[11:07] <brrt> i can't see that, that's presumably private

[11:08] <brrt> hmm. building CORE.setting isn't noticably faster with the stack walker than without :-(

[11:14] <brrt> within noise, i'd say

[11:19] *** Ven`` left
[11:29] *** zakharyas left
[11:33] <Redfoxmoon> brrt, what, the github repo is public

[11:34] <brrt> oh, hang on, my terminal broke up the url

[11:35] <Redfoxmoon> Hah

[11:42] <Redfoxmoon> lizmat, well, if you're interested you could have a look at perl5 on midipix :P that way you could mention perl 6 on windows even earlier :P

[11:42] * Redfoxmoon hides

[11:50] *** Ven`` joined
[11:56] *** AlexDaniel joined
[12:01] *** brrt left
[12:18] *** Ven`` left
[12:18] *** Ven`` joined
[12:50] *** zakharyas joined
[12:59] *** Ven` joined
[12:59] *** Ven`` left
[13:01] *** Ven` left
[13:04] *** Ven`` joined
[13:37] *** shareable6 joined
[14:53] *** Ven`` left
[15:09] *** domidumont left
[15:35] *** zakharyas left
[15:58] <samcv> .tell brrt it's not per compiler really. i mean msvc just doesn't have branch predictor hints. though i think you mean just taking out code on certain platforms?

[15:58] <yoleaux> 10:27Z <brrt> samcv: that instead of per-compiler 'likely' flags, we can use '#ifdef _MSCV_VER' and friends

[15:58] <yoleaux> samcv: I'll pass your message to brrt.

[15:58] <samcv> ah i see

[15:59] <samcv> though there are other compilers other than msvc gcc and clang?

[15:59] <timotimo> like icc

[15:59] <timotimo> if you've got the money for it

[15:59] <timotimo> does borland still make a c compiler?

[16:16] *** domidumont joined
[16:17] <Redfoxmoon> there's also pcc and tcc

[16:17] * Redfoxmoon runs

[18:05] *** brrt joined
[18:05] <brrt> .

[18:05] <yoleaux> 15:58Z <samcv> brrt: it's not per compiler really. i mean msvc just doesn't have branch predictor hints. though i think you mean just taking out code on certain platforms?

[18:06] <brrt> .tell samcv I mean to create platform-specific #defines, much like we do now, except using #ifdef and friends rather than Configure.pl setting variables

[18:06] <yoleaux> brrt: I'll pass your message to samcv.

[18:07] <samcv> brrt: i can do that, though what file should i put them in

[18:07] <yoleaux> 18:06Z <brrt> samcv: I mean to create platform-specific #defines, much like we do now, except using #ifdef and friends rather than Configure.pl setting variables

[18:09] <Redfoxmoon> platform.h or config.h perhaps? :P

[18:16] <brrt> for instance, yes

[18:18] *** lizmat left
[18:18] <brrt> i mean, it's only a suggestion of course :-)

[18:19] *** lizmat joined
[18:20] <Redfoxmoon> Seems like good options!

[18:29] *** brrt left
[18:30] *** colomon joined
[18:51] *** lizmat left
[18:56] *** lizmat joined
[19:02] *** zakharyas joined
[19:11] *** Kaiepi left
[19:31] *** zakharyas left
[19:31] *** lizmat left
[19:44] *** domidumont left
[20:08] *** brrt joined
[20:36] *** lizmat joined
[21:15] <samcv> i think i made MVM_serialization_read_int 18% faster

[21:15] <samcv> was looking at perf of perl6 -e '' and that was the top item so tried to optimize it

[21:17] <jnthn> Wow, nice <3

[21:17] <jnthn> A load of them are because of NFAs, but even after we stop storing those in duplicate, NFAs themselves are still a load of ints :)

[21:21] *** Kaiepi joined
[21:21] <samcv> got down the percentage of that function in perl6 -e '' from 4.5% to 3.79%

[21:29] <brrt> samcv++

[21:29] <brrt> ohai jnthn

[21:29] <jnthn> o/ brrt

[21:29] <jnthn> How goes?

[21:29] <brrt> I'm fine, given that it is the end-of-week

[21:30] <brrt> can I get you to look at my PR sometime?

[21:30] <brrt> I kind of want to get it merged sooner rather than later

[21:30] <jnthn> Yeah. If I find energy over the weekend I will, otherwise can next week

[21:30] <brrt> (unfortunately, I don't have any benchmark improvmenets to show for it)

[21:30] <brrt> sure :-)

[21:30] <jnthn> Probably reduced memory a little, if nothing else?

[21:31] <brrt> code size should be reduced quite considerably, i should think

[21:31] <jnthn> And perhaps callgrind can show a lower cycle count?

[21:31] <brrt> but it doesn't seem to help much in wallclock

[21:32] <jnthn> I'll be digging back in to my spesh plugin stuff next week also :)

[21:32] <brrt> anyway, even if it doesn't have any of that, it's still a massive simplicity improvement (even if it is a bit of a risky strategy)

[21:32] <brrt> nice

[21:32] <jnthn> The last weeks I was somewhat distracted with a certain other project :)

[21:33] <brrt> you mean comma?

[21:33] <jnthn> Indeed.

[21:33] <brrt> i kind of want to try it, but i'm not a typical IDE user

[21:33] <jnthn> Of note, the release engineering.

[21:34] <jnthn> Which meant dealing with one Java build tool layered on top of another, weird Windows issues, weird OSX issues, etc. :)

[21:34] <timotimo> icons, man. how do they ven.

[21:34] <timotimo> even*

[21:35] <jnthn> I know. I can't belive I lost a whole day on a problem that turned out to be "this exe file is considered invalid because the icon file in it has the wrong bit depth2

[21:36] <jnthn> (Of course, the error didn't say that. It said "Access denied.")

[21:36] <brrt> you know what keeps bugging me to *no end*

[21:36] <brrt> everybody who ever thought 'you know what my build tools need? turing complete programming languages'

[21:36] <brrt> also, groovy

[21:36] <brrt> I can't find a *single* redeeming quality to groovy

[21:38] <brrt> nothing whatever

[21:39] <jnthn> I suspect you either do that or your build system consists of calling out to other turing complete languages for any sufficiently complex build

[21:40] <jnthn> I didn't think much about groovy, even though I probably wrote it. It looked like Java with some special parse rule for a block after the arguments with a syntax that doesn't make it obviously an argument :)

[21:40] <jnthn> hah, yes, of course I wrote it in the last week

[21:40] <jnthn> I guess that means it was boring enough I didn't realize I wasn't writing approximately Java ;)

[21:42] <jnthn> Anyway, I'll be most glad to return to building features and fixing bugs in Comma next week, rather than dealing with the build system. :-)

[21:44] <brrt> i feel like groovy is a java that tried to be perlish, but never realized that perls greatest feature was its syntactical affortandces

[21:45] <brrt> having said that, i'm having troubles figuring out a case wherein the build itself needed to be turing complete. build tools, compilers, assemblers etc, might be written in turing-complete languages, but that is something completely different

[21:45] <brrt> but maybe i've never seen a complex build up close

[21:46] <jnthn> It may be a bit of a "worse is better" thing too: in theory declarative is better, but in practice imperative languages are more familiar to more people, and using one for a build system thus makes it feel more like "normal programming".

[21:47] <brrt> hmmm

[21:47] <brrt> that's a fair point

[21:47] <brrt> i suppose there are plenty of people who would liked to have had a loop in a makefile

[21:55] <samcv> i think it should be fine to possible access unaligned memory given most platforms allow that. since all recent archs let you do that

[21:56] <samcv> and even if it were slower it's probably cheaper than calling memmem

[21:56] <samcv> err

[21:56] <samcv> memcpy

[21:57] <brrt> i'm missing some context here

[21:58] <samcv> i'm replacing some of the memcpy is MVM_serialization_read_int with casting a pointer to another type and copying that way

[21:58] <samcv> which makes it 15% faster

[21:59] <brrt> c standards hates you now

[21:59] <brrt> :-P

[21:59] <samcv> yes. well i do it in memmem32 as well though i guess i could check the alignment or something...

[21:59] <samcv> but the speed improvement is worth it unless there is actually a platfom that has an issue with it

[22:04] <jnthn> Many platforms that aren't x86/x64 have problems with reading non-aligned stuff

[22:05] <jnthn> We've had quite a few issues from assumptions in that area in the past

[22:05] <samcv> which platforms?

[22:08] <jnthn> At least ARM https://github.com/MoarVM/MoarVM/issues/137

[22:08] <samcv> The ARMv6 architecture introduced the first hardware support for unaligned accesses.  ARM11 and Cortex-A/R processors can deal with unaligned accesses in hardware, removing the need for software routines.

[22:10] <jnthn> Here's an open PR we didn't merge yet relating to alignment problems: https://github.com/MoarVM/MoarVM/pull/796

[22:11] <jnthn> I'm pretty sure PowerPC needs care too

[22:19] *** MasterDuke joined
[22:19] *** brrt left
[23:23] *** Ven`` joined
[23:31] *** Ven`` left
