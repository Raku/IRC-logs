[00:46] *** statisfiable6 joined
[00:52] <samcv> ok so apparently gradle on travis is broken. and it sets JAVA_HOME in the /usr/bin/gradle to overwrite yours...

[00:53] <samcv> but only the ubuntu one

[01:46] *** MasterDuke joined
[05:58] *** releasable6 joined
[07:17] *** domidumont joined
[07:24] *** domidumont left
[07:25] *** domidumont joined
[07:48] *** brrt joined
[07:58] *** brrt left
[08:06] *** brrt joined
[08:15] <brrt> I can offer to translate markdown to asciidoc :-)

[08:15] <brrt> either by hand or by script

[08:16] <brrt> not like markdown is such a difficult syntax after all

[08:53] <samcv> brrt: well i can convert it fine on my computer

[08:53] <samcv> but the goal was people could write it in whatever their choice was

[08:54] <samcv> brrt: also, how would you make coerce_ui into expr jit op

[08:54] <samcv> GET_REG(cur_op, 0).i64 = (MVMint64)GET_REG(cur_op, 2).u64;

[09:05] <jnthn> I think that'd probably just be equivalent to a set at machine level

[09:05] <samcv> like (template: set (copy $1)) ?

[09:05] <jnthn> Since I think signed/unsigned is just about how the bits are interpreted, not a representation chance

[09:05] <samcv> yeah uint and int i believe just copy the bits

[09:06] <jnthn> Yeah, then "what set does" I guess :)

[09:06] <samcv> so it copies $1 and puts it in $0?

[09:06] <samcv> even though it doesn't specify the $0 register anywhere?

[09:08] <jnthn> I think results are handled automatically, the exception being ! templates that take care of their own storing

[09:08] <samcv> ah yeah

[09:08] <jnthn> (Disclaimer: I've barely written any templates yet :))

[09:08] <jnthn> Though I should probably add some for my new guard ops, if nobody is beating me to it :)

[09:15] <Geth> ¦ MoarVM: samcv++ created pull request #883: Add expr jit templates for atkey_i/n/s/u coerce_iu/ui decont_u

[09:15] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/883

[09:15] <samcv> i see this op not getting jitted: scwbdisable

[09:16] <samcv> looks like it should be pretty simple: GET_REG(cur_op, 0).i64 = ++tc->sc_wb_disable_depth; if anyone wants to do it

[09:16] <samcv> i gotta go to bed now. night o/

[09:16] <timotimo> gnite samcv

[09:20] <jnthn> 'night o/

[09:25] <brrt> yyeah, as long as they're equally sized, there's nothing to be done

[09:25] <brrt> good night samcv

[09:26] <brrt> re: markdown, having a total free-for-all in formats is awesome, but not essential, and not nearly as beneficial as having published documentation in the first place

[09:27] <brrt> so as far as I care we convert everything to a single format, asciidoc if necessary, and stick to that

[09:29] <jnthn> Dunno, writing docs is enough work already. Given I wrote all the Cro docs in Markdown instead of learning Pod6, the chances of me learning asciidoc beyond cargo-culting what I see ain't that high. :-)

[09:29] <jnthn> otoh that's how I "learned" Markdown too... :)

[09:30] <timotimo> learn from broken implementations \o/

[09:40] <nwc10> good *, #moarvm

[09:43] *** brrt left
[09:44] *** zakharyas joined
[09:44] <jnthn> o/ nwc10

[10:39] *** lizmat joined
[10:43] *** lizmat left
[10:47] *** brrt joined
[10:50] <brrt> hmm. anyway, a markdown-to-asciidoc converter would be easy enough, i've written plenty markdown parsers in the past

[10:50] <brrt> the trick is not to assume that it is a regular parseable langauge

[11:06] *** lizmat joined
[11:17] *** MasterDuke left
[13:11] *** lizmat left
[13:36] *** AlexDaniel joined
[13:51] *** brrt left
[14:02] *** zakharyas left
[14:03] *** zakharyas joined
[14:07] *** zakharyas left
[15:06] *** domidumont left
[15:07] <Geth> ¦ MoarVM: W4anD0eR96++ created pull request #884: NQP does not support parrot any more

[15:07] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/884

[15:09] <Geth> ¦ MoarVM: 73d646c672 | 陈梓立++ (committed using GitHub Web editor) | README.markdown

[15:09] <Geth> ¦ MoarVM: NQP does not support parrot any more

[15:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/73d646c672

[15:09] <Geth> ¦ MoarVM: 1049e09a99 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | README.markdown

[15:09] <Geth> ¦ MoarVM: Merge pull request #884 from W4anD0eR96/patch-1

[15:09] <Geth> ¦ MoarVM:

[15:09] <Geth> ¦ MoarVM: NQP does not support parrot any more

[15:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1049e09a99

[15:38] <Geth> ¦ MoarVM: 1ed8c64c40 | (Jonathan Worthington)++ | 9 files

[15:38] <Geth> ¦ MoarVM: Add sp_speshresolve, rewrite to it in spesh

[15:38] <Geth> ¦ MoarVM:

[15:38] <Geth> ¦ MoarVM: If we cannot rewrite speshresolve to a single resolution in the

[15:38] <Geth> ¦ MoarVM: specialization, then rewrite it to sp_speshresolve instead. This op:

[15:38] <Geth> ¦ MoarVM:

[15:38] <Geth> ¦ MoarVM: * Will lookup and store at the correct offset, rather than the offset

[15:38] <Geth> ¦ MoarVM:   in the specialized code (which in the best case would just mean lost

[15:38] <Geth> ¦ MoarVM: <…commit message has 6 more lines…>

[15:38] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1ed8c64c40

[15:38] <Geth> ¦ MoarVM: ec4c63e0b6 | (Jonathan Worthington)++ | 2 files

[15:38] <Geth> ¦ MoarVM: Mark speshresolve as :noinline

[15:38] <Geth> ¦ MoarVM:

[15:38] <Geth> ¦ MoarVM: Just In Case, but it should always be rewritten into sp_speshresolve

[15:38] <Geth> ¦ MoarVM: anyway, which does make it inline-safe.

[15:38] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ec4c63e0b6

[15:42] *** brrt joined
[15:43] <jnthn> Next challenge: figure out how to JIT sp_speshresolve :)

[15:43] <jnthn> It's a form of invoke. Given prepargs lacks a template, I wonder if that means exprjit doesn't yet do those

[15:46] <jnthn> Hm, though it's also invokish in that it may actually not invoke.

[15:50] <brrt> I'll need to check as to what it actually does

[15:50] <brrt> but as long as it's properly annotated so that variables are correctly flushed before, being invokish isn't really a problem anymore?

[15:50] <jnthn> brrt: speshresolve is code-gen'd with a prepargs + args + final instruction

[15:50] <jnthn> Well, speshresolve *is* that final instruction

[15:50] <brrt> oh, i see

[15:50] <brrt> hmmmm

[15:51] <jnthn> But it's basically a call that might actually not really call and just get its answer right out of the guard set

[15:51] <jnthn> In the best case, we never have to JIT this because we rewrite it to the result

[15:51] <jnthn> Plus a guard or three

[15:51] <jnthn> But sometimes we may need to JIT it

[15:51] <brrt> right

[15:51] <brrt> hmmm

[15:52] <brrt> yeah, then it's not for the expr jit yet

[15:52] <jnthn> My first thought was "well, we get to re-use the existing invoke handling mechanism, to setup callsite and args"

[15:52] <brrt> i mean, expr jit could do it, but it's not that interesting (I think), the advantage is pretty small

[15:52] <brrt> uhuh

[15:52] <jnthn> But now I'm looking at it and wondering if that's quite true or if it twists the invoke node type a bit too far :)

[15:53] <brrt> i think it ought to be doable

[15:53] <brrt> maybe even sane

[15:53] <jnthn> Yeah, looking again, there's a lot to share

[15:54] <jnthn> Trying to spot where the handling of "return from the JITted code upon call" is happening

[15:54] <brrt> MVM_frame_invoke

[15:56] <jnthn> oh, MVM_jit_code_trampoline?

[15:56] <jnthn> So if I don't end up calling that, we won't leave the JITted code?

[15:56] <brrt> correct

[15:57] <brrt> this is the nicest thing (imho) about the whole jit-stack-walker thing

[15:57] <jnthn> Yeah, that makes it more fitting to use the invoke node then :)

[15:59] <Geth> ¦ MoarVM: W4anD0eR96++ created pull request #885: Clean outdated mention of Parrot

[15:59] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/885

[16:24] <Geth> ¦ MoarVM: 210d27ff9d | 陈梓立++ | 3 files

[16:24] <Geth> ¦ MoarVM: Clean outdated mention of Parrot

[16:24] <Geth> ¦ MoarVM:

[16:24] <Geth> ¦ MoarVM: There is 2 mention of Parrot.

[16:24] <Geth> ¦ MoarVM:

[16:24] <Geth> ¦ MoarVM: 1. docs/reveal.md

[16:24] <Geth> ¦ MoarVM: 2. src/6model/reprs/SCRef.h

[16:24] <Geth> ¦ MoarVM:

[16:24] <Geth> ¦ MoarVM: Both of them talking about history instead of outdated

[16:24] <Geth> ¦ MoarVM: info. Thus no reason for removing them.

[16:24] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/210d27ff9d

[16:24] <Geth> ¦ MoarVM: ca9c63fea4 | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[16:24] <Geth> ¦ MoarVM: Merge pull request #885 from W4anD0eR96/parrot-doc-remove

[16:25] <Geth> ¦ MoarVM:

[16:25] <Geth> ¦ MoarVM: Clean outdated mention of Parrot

[16:25] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ca9c63fea4

[16:27] *** lizmat joined
[17:07] <jnthn> Yay, I think I jut it

[17:08] <nwc10> "you what?"

[17:09] <Geth> ¦ MoarVM/jit-sp_speshresolve: 0b7f26ce57 | (Jonathan Worthington)++ | 5 files

[17:09] <Geth> ¦ MoarVM/jit-sp_speshresolve: JIT-compile sp_speshresolve

[17:09] <Geth> ¦ MoarVM/jit-sp_speshresolve: review: https://github.com/MoarVM/MoarVM/commit/0b7f26ce57

[17:10] <jnthn> brrt: If you'd be so kind to glance over ^ to see if I did anything really silly, that'd be appreciated :)

[17:28] <brrt> huh, that reminds me, i need to kill the reentry label

[17:28] <brrt> yeah, i'll look :-)

[17:36] *** zakharyas joined
[17:47] <brrt> jnthn: there's a minor issue with regards to the call of spesh_resolve_jit

[17:47] <brrt> I can fix that for you, but not tonight

[17:56] *** zakharyas left
[18:08] *** brrt left
[18:25] *** robertle joined
[20:21] <samcv> ctxouter would be nice to exprjit too

[20:24] <Geth> ¦ MoarVM: 91e97b747b | (Samantha McVey)++ | src/jit/core_templates.expr

[20:24] <Geth> ¦ MoarVM: Add expr jit templates for atkey_i/n/s/u coerce_iu/ui decont_u

[20:24] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/91e97b747b

[20:24] <Geth> ¦ MoarVM: bedb5381ba | (Samantha McVey)++ (committed using GitHub Web editor) | src/jit/core_templates.expr

[20:24] <Geth> ¦ MoarVM: Merge pull request #883 from samcv/moreexprjits

[20:24] <Geth> ¦ MoarVM:

[20:24] <Geth> ¦ MoarVM: Add expr jit templates for atkey_i/n/s/u coerce_iu/ui decont_u

[20:24] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bedb5381ba

[20:29] *** brrt joined
[20:37] <samcv> brrt: we don't have a way to throw in exprjit or do we?

[20:44] <jnthn> I'd guess throwing is involved enough that we'd call a C function to do it

[20:47] <samcv> i'm trying to eliminate some malloc's from our bigint ops

[20:52] *** Ven`` joined
[21:07] <samcv> gets a 10% speed improvement on coerce_sI :)

[21:14] <Geth> ¦ MoarVM: 353940a83b | (Samantha McVey)++ | src/math/bigintops.c

[21:14] <Geth> ¦ MoarVM: Get rid of lots of mallocs in coerce_sI

[21:14] <Geth> ¦ MoarVM:

[21:14] <Geth> ¦ MoarVM: This avoids mallocing in MVM_bigint_from_str if we just end up storing

[21:14] <Geth> ¦ MoarVM: the value as a smallint. It also avoids mallocing in MVM_coerce_sI when

[21:14] <Geth> ¦ MoarVM: creating a cstring version of the input string. We can shortcut and use

[21:14] <Geth> ¦ MoarVM: the faster grapheme iterator since decode will fail with synthetics

[21:14] <Geth> ¦ MoarVM: anyway.

[21:14] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/353940a83b

[21:14] <Geth> ¦ MoarVM: e9b1b73b1a | (Samantha McVey)++ | src/math/bigintops.c

[21:14] <Geth> ¦ MoarVM: Get rid of some malloc's in MVM_bigint_to_str

[21:14] <Geth> ¦ MoarVM:

[21:14] <Geth> ¦ MoarVM: Use alloca for small things to avoid a malloc.

[21:14] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e9b1b73b1a

[21:15] <Geth> ¦ MoarVM: 93eac13d35 | (Samantha McVey)++ | src/strings/ascii.c

[21:15] <Geth> ¦ MoarVM: In MVM_string_ascii_encode_substr only free if non-null

[21:15] <Geth> ¦ MoarVM:

[21:15] <Geth> ¦ MoarVM: Only call MVM_free if we have a replacement to free.

[21:15] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/93eac13d35

[21:29] *** Ven`` left
[21:36] <brrt> samcv: I think I have a throw_adhoc macro. or I have it stashed in some branch

[21:36] <timotimo> there's one in unsafe.expr

[21:36] <timotimo> is that under source control?

[21:36] <brrt> yes

[21:36] <timotimo> but we don't have working strings, right?

[21:37] <brrt> ... no. I do have that in the jit-expr-refactor branch though

[21:40] <brrt> samcv++ - but can I give one advice; make a version of MVM_string_ascii_encode that takes an output buffer and a length

[21:40] <brrt> that alone would save so many allocations

[21:42] <samcv> yeah i was considering that

[21:42] <samcv> probably will add after looking more places it's used

[21:43] <brrt> :-)

[21:44] <brrt> also, if you have that, the allocating variant can just call out to the buffer-taking variant

[21:44] <brrt> maybe same for utf8 encode

[22:02] <Geth> ¦ MoarVM/jit-sp_speshresolve: 1fe14d3c46 | (Bart Wiegmans)++ | src/jit/x64/emit.dasc

[22:02] <Geth> ¦ MoarVM/jit-sp_speshresolve: [JIT] Define ARG5 and ARG6 on windows

[22:02] <Geth> ¦ MoarVM/jit-sp_speshresolve:

[22:02] <Geth> ¦ MoarVM/jit-sp_speshresolve: Windows has only 4 arguments in general purpose registers (as opposed to

[22:02] <Geth> ¦ MoarVM/jit-sp_speshresolve: POSIX which has 6). Any other arguments are passed on the stack. Define

[22:02] <Geth> ¦ MoarVM/jit-sp_speshresolve: the names of ARG5 and ARG6 to be the appropriate stack locations, and

[22:02] <Geth> ¦ MoarVM/jit-sp_speshresolve: make sure to introduce intermediates where necessary.

[22:02] <Geth> ¦ MoarVM/jit-sp_speshresolve: review: https://github.com/MoarVM/MoarVM/commit/1fe14d3c46

[22:04] <Geth> ¦ MoarVM/jit-expr-refactor: 5 commits pushed by (Bart Wiegmans)++

[22:04] <Geth> ¦ MoarVM/jit-expr-refactor: b2b0ddf082 | [JIT] Adhoc template application

[22:04] <Geth> ¦ MoarVM/jit-expr-refactor: 1b823fad36 | Remove op_info pointer

[22:04] <Geth> ¦ MoarVM/jit-expr-refactor: d98cdf904a | Document the conditional dependency check

[22:04] <Geth> ¦ MoarVM/jit-expr-refactor: f3335f924d | Move label assignment to tiler

[22:04] <Geth> ¦ MoarVM/jit-expr-refactor: b67e518da4 | Add CONST_PTR indirection

[22:04] <Geth> ¦ MoarVM/jit-expr-refactor: review: https://github.com/MoarVM/MoarVM/compare/136a36a6592e...b67e518da46d

[22:05] <brrt> ^ rebase, nothing new

[22:16] *** brrt left
[22:48] *** MasterDuke joined
