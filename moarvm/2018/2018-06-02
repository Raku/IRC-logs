[00:35] *** colomon_ joined
[00:36] *** colomon left
[00:36] *** colomon_ is now known as colomon

[01:00] <samcv> what was that ENV variable that when set makes benchmarking more reproducible?

[01:14] <MasterDuke> MVM_SPESH_BLOCKING

[01:16] <MasterDuke> samcv: ^^^

[01:46] *** ilbot3 left
[01:57] *** ilbot3 joined
[02:54] <MasterDuke> weird. i can perf record a regular rakudo CORE.setting compile, but if i change it to --target=parse, it pretty much goes on forever, creating a bigger and bigger data file

[03:00] <MasterDuke> in the regular compile, the top function is MVM_interp_run at only 7.25%. however, in the target=parse case, the top two functions are MVM_gc_root_add_frame_registers_to_worklist and MVM_gc_root_add_frame_roots_to_worklist which are 38% and 12.3% respectively

[03:22] <samcv> maybe i could hide it behind some define that we set if we're ok with unaligned memory accesses

[03:22] <samcv> and then i can hide the 32 bit aligned 64 bit integer access i use on 64 bit platforms behind that as well

[06:53] *** domidumont joined
[06:59] *** domidumont left
[07:00] *** domidumont joined
[08:27] <nine> samcv: yes, making it optional seems like the way to go

[09:12] *** lizmat left
[09:26] *** lizmat joined
[10:49] *** lizmat left
[11:45] *** avar left
[11:45] *** avar joined
[12:11] *** lizmat joined
[12:18] *** lizmat left
[12:32] *** lizmat joined
[12:40] *** bisectable6 left
[12:40] *** evalable6 left
[12:40] *** committable6 left
[12:40] *** bisectable6 joined
[12:40] *** evalable6 joined
[12:40] *** committable6 joined
[12:46] *** lizmat left
[12:51] *** lizmat joined
[13:39] *** lizmat left
[13:46] *** lizmat joined
[13:50] *** lizmat left
[14:26] *** domidumont left
[15:04] <Geth> ¦ MoarVM/master: 5 commits pushed by (Stefan Seifert)++

[15:04] <Geth> ¦ MoarVM/master: f217842ef0 | Expr JIT template for checkarity

[15:04] <Geth> ¦ MoarVM/master: 1deb809da9 | Expr JIT templates for param_rp_s, param_rp_o and param_sn

[15:04] <Geth> ¦ MoarVM/master: 4c50cf24e8 | Expr JIT template for assertparamcheck

[15:04] <Geth> ¦ MoarVM/master: c3f1066ded | Expr JIT template for decont_s

[15:04] <Geth> ¦ MoarVM/master: b74c0cbb09 | JIT compile encoderepconf

[15:04] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/ff312c4cf87c...b74c0cbb09be

[18:11] *** domidumont joined
[19:07] *** lizmat joined
[19:09] *** benchable6 left
[19:09] *** benchable6 joined
[19:09] *** buggable left
[19:10] *** huggable left
[19:10] *** ZofBot left
[19:12] *** hoelzro left
[19:12] *** leedo left
[19:12] *** hoelzro joined
[19:12] *** leedo joined
[19:13] *** domidumont left
[20:07] *** squashable6 left
[20:07] *** squashable6 joined
[20:09] *** lizmat left
[20:23] *** brrt joined
[20:24] <brrt> .tell nine i'm suspicious of encoderepconf. I know that's what interp.c does, but it is not what oplist says

[20:24] <yoleaux> brrt: I'll pass your message to nine.

[20:28] <brrt> oplist says "encoderepconf       w(obj) r(str) r(str) r(str) r(obj) r(int64)" - which means that the zeroth argument should be the one written to

[20:28] <brrt> also, because of this, the expr template will do the wrong thing; it will try to assign to the object address, not to the variable slot

[20:29] <brrt> $4 will be the pointer, not the address-of-the-work address

[20:30] <brrt> anyway, that's all i have. see you around

[20:30] *** brrt left
[20:40] *** undersightable6 left
[20:42] *** undersightable6 joined
[20:45] *** zakharyas joined
[20:51] *** evalable6 left
[20:51] *** evalable6 joined
[20:55] *** Kaiepi left
[20:57] *** Kaiepi joined
[21:55] *** Kaypie joined
[21:56] *** Kaiepi left
[22:00] *** lizmat joined
[22:02] *** Kaypie left
[22:10] *** zakharyas left
[22:13] *** Kaiepi joined
[22:25] *** Kaiepi left
[22:41] *** Kaiepi joined
[22:55] *** Kaiepi left
[22:56] *** Kaiepi joined
[23:33] *** Kaiepi left
