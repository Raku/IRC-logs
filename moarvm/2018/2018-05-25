[18:55] *** ilogger2 joined
[19:28] <jnthn> samcv: Sounds good :-)

[19:28] <jnthn> samcv: I did some amount of refactoring and got rid of stuff we weren't using over time, but there's certainly mroe worth doing

[19:59] *** MasterDuke joined
[20:05] <samcv> jnthn: i think i may have made MVM_string_gi_get_grapheme 8x faster. it was 8% of this hash test i made. but now it's only 1%

[20:06] *** travis-ci joined
[20:06] <travis-ci> MoarVM build failed. Samantha McVey 'Convert HASH_DEL_IN_BKT and HASH_EXPAND_BUCKETS from macros to inlines'

[20:06] <travis-ci> https://travis-ci.org/samcv/MoarVM/builds/383863824 https://github.com/samcv/MoarVM/compare/ad00f7892a19...154d2c3f8563

[20:06] *** travis-ci left
[20:32] <timotimo> i just looked at how the holes in SCRefs are spread out and it doesn't really lend itself to a sparse array scheme, as the holes tend to be mostly small

[20:32] <timotimo>  135974 total holes out of 177935

[20:32] <timotimo> 145 holes bigger than 128

[20:32] <timotimo> m: say 135974 / 177935

[20:32] <camelia> rakudo-moar 847d3d60b: OUTPUT: «0.7641779␤»

[20:34] <timotimo> some of those holes are actually rather big, but for example a two-level approach wouldn't make that much sense here

[20:34] <timotimo> there's a very big stretch of 1 entry, one hole, 2 entries, 1 hole, repeat

[20:35] <timotimo> i wonder what that might be

[20:35] <jnthn> samcv: Wow, nice :)

[20:37] <Geth> ¦ MoarVM/master: 4 commits pushed by (Samantha McVey)++

[20:37] <Geth> ¦ MoarVM/master: 3234f3990d | For non MVMString hash's check hashval before doing a memcmp

[20:37] <Geth> ¦ MoarVM/master: ec72815fbf | Convert HASH_MAKE_TABLE from a macro to MVM_STATIC_INLINE

[20:37] <Geth> ¦ MoarVM/master: 707851e81d | Convert HASH_ADD_TO_BKT from a macro to MVM_STATIC_INLINE

[20:37] <Geth> ¦ MoarVM/master: 154d2c3f85 | Convert HASH_DEL_IN_BKT and HASH_EXPAND_BUCKETS from macros to inlines

[20:37] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/51b72c22677e...154d2c3f8563

[20:51] *** Kaiepi joined
[21:50] <samcv> at least i think i did make it faster...

[21:50] <samcv> well need to do some stuff to try and confirm

[21:58] <samcv> actually being annoying to test for it because i've put in fast paths many places like collapse_strands and indexing branches

[22:13] <timotimo> oof :)

[22:19] <samcv> i have made some unicode stuff faster tho

[22:20] <timotimo> can never have enough of that

[22:20] * jnthn expects to have a decent bit of "making MoarVM faster" time over the summer :)

[22:21] <Geth> ¦ MoarVM: a84b607bd0 | (Samantha McVey)++ | 2 files

[22:21] <Geth> ¦ MoarVM: Add branch predictor hints macros

[22:21] <Geth> ¦ MoarVM:

[22:21] <Geth> ¦ MoarVM: MVM_LIKELY and MVM_UNLIKELY are meant to be used in if conditionals

[22:21] <Geth> ¦ MoarVM: MVM_EXPECT is can be used on things like switches that don't just expect

[22:21] <Geth> ¦ MoarVM: true or false type values.

[22:21] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a84b607bd0

[22:21] <jnthn> ooh

[22:21] <samcv> :)

[22:21] <samcv> got like 10% boost on find_cclass

[22:22] <samcv> which much of it is querying the unicode properties

[22:22] <jnthn> Wow, that's pretty good going

[22:22] <jnthn> Bet there's quite a few places we can use that

[22:23] <timotimo> i wonder if having find_cclass contain "the" loop

[22:23] <jnthn> Is expection expectation or exception? :)

[22:23] <timotimo> rather than calling is_cclass over and over? is that what we are doing?

[22:24] <samcv> it can make a pretty big difference

[22:25] <samcv> timotimo: also yes that would be better

[22:25] <samcv> i was thinking about doing that later

[22:25] <timotimo> is that a big difference though?

[22:25] <samcv> oh i mean the branch predictor hints

[22:25] <samcv> can make a big difference

[22:25] <timotimo> in some cases we might be able to say "oh this only contains ascii, we can make far fewer checks"

[22:25] <samcv> though you should make sure you only use them with benchmarking. because otherwise it can have unexpected results

[22:25] <timotimo> oh, i somehow didn't even see that commit up there

[22:26] <samcv> heh

[22:26] <timotimo> i bet we can put UNLIKELY in a whole bunch of places with error handling

[22:26] <timotimo> like reprid checks and such

[22:26] <samcv> yeah

[22:27] <samcv> i was playing around in MVM_string_gi_get_grapheme. and like if i put MVM_UNLIKELY in gi->repetitions, it makes repetitions a fair amount slower, but has minimal impact on other code (though that may occur more often) i could try things with many short strands. but yeah

[22:28] <samcv> decided not to add it there because i didn't see any improvement or barely any. but it is neat

[22:28] <Geth> ¦ MoarVM: f94b029721 | (Samantha McVey)++ | 4 files

[22:28] <Geth> ¦ MoarVM: Use new branch predictor hints to unicode_db and prop query

[22:28] <Geth> ¦ MoarVM:

[22:28] <Geth> ¦ MoarVM: Gives about 10% speedup generally. We query general category the most so

[22:28] <Geth> ¦ MoarVM: this can have a fair impact.

[22:28] <Geth> ¦ MoarVM:

[22:28] <Geth> ¦ MoarVM: Some hot codepaths were also streamlined a bit as well.

[22:28] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f94b029721

[22:28] <samcv> was able to use the branch predictor to make it faster to get things in plane 0 of the unicode database

[22:29] <samcv> and expect General_Category more likely than the other conditions

[22:31] <samcv> i'm curious about what will happen if i take MVM_string_check_arg and make it unlikely that it'll throw

[22:31] <samcv> if we see any significant changes since it's used a lot? dunno

[23:35] <tbrowder_> another thought about c++: after "converting" to using the c++ compiler you can continue to use C pretty much as usual, but it would allow gradually moving to C++isms, and maybe help others start helping out...just saying. take a look at brlcad.org (over 30 years C but gradually moving to C++)

[23:52] <japhb> tbrowder_: Recently someone posted a video by a Google engineer talking about building a fast hash table in C++, and the last few minutes consisted roughly of "How many geniuses does it take to get a C++ compiler to produce good code?" culminating in admitting that one of these people did nothing but run the compiler to produce assembly code, think really hard about why it was producing the wrong code, and

[23:52] <japhb> tweak the source until it compiled the way they expected.  This is *not* the kind of thing you want when writing a language VM.  There's a reason C has not disappeared from the world of large complex performance-dependent projects like OS kernels and VMs.

[23:53] <japhb> Not saying by any means that it's impossible to write performant code in C++, many people do, just that it's not a clear win to convert a relatively understood C codebase into a C++ one.

[23:56] <jnthn> Furthermore, if we're going to port (parts of) MoarVM to anything, it should probably be to NQP, and head in a self-host direction, like e.g. the Graal folks have.

[23:56] <jnthn> (That's a decidedly long-term aim)

