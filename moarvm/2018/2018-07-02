[00:14] <samcv> nice! ok i've gotten siphash down to the same time that our current hash function uses

[00:28] *** MasterDuke joined
[02:13] *** dogbert2 joined
[02:16] *** dogbert17 left
[03:01] *** stmuk_ joined
[03:04] *** stmuk left
[04:10] <Geth> ¦ MoarVM: samcv++ created pull request #889: Implement SipHash instead of ‘Jenkins Hash’

[04:10] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/889

[04:56] *** lizmat left
[06:29] *** robertle joined
[06:57] *** brrt joined
[07:13] *** domidumont joined
[07:18] *** domidumont left
[07:18] *** domidumont joined
[07:35] <brrt> good * #moarvm

[07:36] <samcv> good * brrt

[07:38] <brrt> i'll take a look at your siphash PR

[07:38] <brrt> do you have any background documentation for me to read?

[07:39] <samcv> uhm

[07:39] <samcv> idk i have my blog post i guess. and the PR description

[07:39] <samcv> ask if you have any questions though

[07:50] *** zakharyas joined
[08:10] *** domidumont left
[08:12] *** domidumont joined
[08:33] <brrt> I want to merge a few of those outstanding JIT PRs

[08:33] <brrt> I'll do the fixups myself then

[08:34] <Geth> ¦ MoarVM/jit-expr-refactor: a75746fa90 | (Bart Wiegmans)++ | 4 files

[08:34] <Geth> ¦ MoarVM/jit-expr-refactor: [JIT] Parse oplist as a module

[08:34] <Geth> ¦ MoarVM/jit-expr-refactor:

[08:34] <Geth> ¦ MoarVM/jit-expr-refactor: I want to have access to the type and size information in the expression

[08:34] <Geth> ¦ MoarVM/jit-expr-refactor: template compiler, so I want to access the oplist information first.

[08:34] <Geth> ¦ MoarVM/jit-expr-refactor: review: https://github.com/MoarVM/MoarVM/commit/a75746fa90

[08:40] <Geth> ¦ MoarVM/master: 4 commits pushed by (Ben Davies)++

[08:40] <Geth> ¦ MoarVM/master: 354c62bdca | Implement JIT templates for 10 ops

[08:40] <Geth> ¦ MoarVM/master: 2abe03d348 | Implement JIT template for ctxcallerskipthunks

[08:40] <Geth> ¦ MoarVM/master: 7f6ad0b1eb | Implement expr JIT template for setwho

[08:40] <Geth> ¦ MoarVM/master: 7129bea447 | JIT bug fixes

[08:40] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/6646038f59e0...7129bea44772

[08:40] <brrt> Kaiepi++

[08:40] <brrt> now on to the next one

[08:43] <Geth> ¦ MoarVM/master: 49 commits pushed by (Jeremy Studer)++

[08:43] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/7129bea44772...5b7ef041ffe2

[08:43] <brrt> jstuder-gh++

[08:43] <brrt> awesome work both of you

[08:44] <brrt> .tell lizmat I feel (and git could probably tell me) that i'm no longer the major contributor of expression templates, and that seems like something worth mentioning in this weeks weekly

[08:44] <yoleaux> brrt: I'll pass your message to lizmat.

[09:07] <jnthn> morning o/

[09:07] <yoleaux> 29 Jun 2018 23:27Z <_Xliff_> jnthn: https://edument.se/en/news/now-we-launch-comma <- This page has a mispelling of Perl in the quote from the CEO.

[09:07] <yoleaux> 1 Jul 2018 15:51Z <lizmat> jnthn: is https://github.com/MoarVM/MoarVM/blob/master/docs/gc.markdown still up to date, or could it use an update / refinement ?

[09:09] <jnthn> .tell Xliff Thanks, it's fixed now :)

[09:09] <yoleaux> jnthn: I'll pass your message to Xliff.

[09:18] <Geth> ¦ MoarVM: 8a7da04a2f | (Jonathan Worthington)++ (committed using GitHub Web editor) | docs/gc.markdown

[09:18] <Geth> ¦ MoarVM: A few small updates and corrections

[09:18] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8a7da04a2f

[09:18] <jnthn> .tell lizmat It was overall up to date, though a bit off in a few places. I've updated it.

[09:18] <yoleaux> jnthn: I'll pass your message to lizmat.

[09:19] <brrt> \o jnthn

[09:20] <samcv> morning jnthn

[09:25] <samcv> i'm gonna head to bed. jnthn if you can check out my Siphash PR and comment that would be great

[09:25] <samcv> it's finally ready for prime time now that i got it as fast as our current hash code

[09:25] <samcv> night o/

[09:26] <brrt> night samcv

[09:27] *** lizmat joined
[09:43] <jnthn> samcv++

[09:43] <jnthn> Will take a look

[09:59] <nwc10> ASAN reporting SEGV from t/qast/01-qast.t

[09:59] <nwc10> src/jit/x64/emit.dasc:898:174: runtime error: member access within null pointer of type 'struct MVMFrame'

[09:59] <nwc10>     #0 0x7f2e47fa622a in MVM_jit_emit_primitive src/jit/x64/emit.dasc:898

[09:59] <nwc10>     #1 0x7f2e47f56626 in MVM_jit_compile_graph src/jit/compile.c:57

[10:03] *** zakharyas left
[10:03] <jnthn> uff, I see that one too in quite a few spectests

[10:03] <jnthn> At least now I know it's not the JIT of speshresolve that I've just locally merged causing it

[10:05] *** zakharyas joined
[10:05] <brrt> huh, that's not good

[10:06] <jnthn>         | mov TMP6, RV;

[10:06] <jnthn> Is the line the debugger reports, which is odd

[10:06] <brrt> yes....

[10:06] <jnthn> JIT of MVM_OP_ctxcallerskipthunks that's wrong, btw

[10:06] <jnthn> Well, that it explodes in

[10:06] <brrt> yep

[10:07] <brrt> but i'm not seeing what

[10:08] <jnthn> bizzare

[10:08] <jnthn> Me either

[10:08] <jnthn> | mov TMP6, FRAME:ARG2->static_info->body.is_thunk;

[10:08] <brrt> oh, hang on

[10:08] <jnthn> Can we actually do double derefs like this?

[10:08] <brrt> that's two derefs

[10:08] <brrt> no

[10:09] <brrt> we cannot :-)

[10:09] <jnthn> Bit off from the error line but matchings nwc10's ASAN reporting

[10:09] <jnthn> *matching

[10:09] <jnthn> Are you fixing or shall I? :)

[10:10] <brrt> i'll be fixing

[10:10] <brrt> thanks :-)

[10:10] <Geth> ¦ MoarVM: 0b7f26ce57 | (Jonathan Worthington)++ | 5 files

[10:10] <Geth> ¦ MoarVM: JIT-compile sp_speshresolve

[10:10] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0b7f26ce57

[10:10] <Geth> ¦ MoarVM: 1fe14d3c46 | (Bart Wiegmans)++ | src/jit/x64/emit.dasc

[10:10] <Geth> ¦ MoarVM: [JIT] Define ARG5 and ARG6 on windows

[10:11] <Geth> ¦ MoarVM:

[10:11] <Geth> ¦ MoarVM: Windows has only 4 arguments in general purpose registers (as opposed to

[10:11] <Geth> ¦ MoarVM: POSIX which has 6). Any other arguments are passed on the stack. Define

[10:11] <Geth> ¦ MoarVM: the names of ARG5 and ARG6 to be the appropriate stack locations, and

[10:11] <Geth> ¦ MoarVM: make sure to introduce intermediates where necessary.

[10:11] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1fe14d3c46

[10:11] <Geth> ¦ MoarVM: 150f281082 | (Jonathan Worthington)++ | 5 files

[10:11] <Geth> ¦ MoarVM: Merge branch 'jit-sp_speshresolve'

[10:11] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/150f281082

[10:11] <jnthn> All the SEGVs look like the ctxskipthunks issue

[10:11] <jnthn> So I guess that patch is innocent :)

[10:12] <brrt> i'm all so a bit worried about the line above

[10:13] <jnthn> Yes, there's two double-derefs in there

[10:14] <jnthn> Though that's more than one line above :)

[10:14] <brrt> :-)

[10:14] <brrt> let me see if i've introduced more

[10:17] <Geth> ¦ MoarVM: 97f76b461b | (Bart Wiegmans)++ | src/jit/x64/emit.dasc

[10:17] <Geth> ¦ MoarVM: [JIT] Double derference in assembly is not a thing

[10:17] <Geth> ¦ MoarVM:

[10:17] <Geth> ¦ MoarVM: Had missed this during review, oops.

[10:17] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/97f76b461b

[10:17] <brrt> that one should've fixed the ctxcallerskipthunks one

[10:17] <jnthn> Thanks, spectesting :)

[10:18] <jnthn> Want to get a clean baseline master so I know what I've broken in rescalar :)

[10:23] <brrt> hmm, not entirely clean just yet, it seems

[10:25] <nwc10> NQP passes all tests

[10:25] <nwc10> we march onward to Rakudo

[10:28] <jnthn> brrt: Yeah, I see a SEGV occasionally in t/spec/S06-advanced/callframe.rakudo.moar

[11:02] <brrt> disappears under MVM_SPESH_BLOCKING :-(

[11:20] <brrt> even in a hundred iterations under MVM_SPESH_BLOCKING

[11:20] <brrt> damnit

[11:20] <brrt> maybe ASAN knows better

[11:22] <brrt> and, it doesn't

[11:22] <brrt> hmmm

[11:30] *** zakharyas left
[12:10] *** MasterDuke left
[12:18] <brrt> hmm, i can't git bisect because the ctxskipcallerthunks fix is way past all the other fixes

[13:32] *** zakharyas joined
[14:26] <jnthn> Hmm, wonder if there's some spesh plugin bug in multiple levels of speshgetattr

[14:26] <jnthn> Getting a guard fail that totally should match

[14:27] <jnthn> Hm, though it's on the notobj guard I recently did

[14:39] <brrt> reverting ctxcallerskipthunks for the JIT unbreaks the callframe.rakudo.moar test

[14:39] <Geth> ¦ MoarVM: f66ebd4bdb | (Bart Wiegmans)++ | 2 files

[14:39] <Geth> ¦ MoarVM: Revert "Implement JIT template for ctxcallerskipthunks"

[14:39] <Geth> ¦ MoarVM:

[14:39] <Geth> ¦ MoarVM: This reverts commit 2abe03d34874dd8c7d814d197c45095a12302e39.

[14:39] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f66ebd4bdb

[14:53] <Geth> ¦ MoarVM: 20d44791b6 | (Jonathan Worthington)++ | src/spesh/plugin.c

[14:53] <Geth> ¦ MoarVM: Fix guard evaluator attribute handling

[14:53] <Geth> ¦ MoarVM:

[14:53] <Geth> ¦ MoarVM: We need to reset the collected objects array each time we fail to meet

[14:53] <Geth> ¦ MoarVM: a guard, otherwise it will have bogus entries for the next guard and so

[14:54] <Geth> ¦ MoarVM: cause it to fail to be met.

[14:54] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/20d44791b6

[15:12] <dogbert2> o/

[15:13] <dogbert2> a question if you have time

[15:13] <dogbert2> I just got this message: MoarVM panic: Illegal Gen2 -> Nursery in caller chain (not in inter-gen set)

[15:13] <brrt> hmm

[15:13] <brrt> that looks messy

[15:13] *** zakharyas left
[15:13] <dogbert2> when running t/spec/MISC/bug-coverage.t with MVM_GC_DEBUG=1

[15:14] <dogbert2> This is Rakudo version 2018.06-56-g72ccd43 built on MoarVM version 2018.06-95-gf66ebd4

[15:14] *** brrt left
[15:15] * dogbert2 runs valgrind

[15:16] *** zakharyas joined
[15:17] <lizmat> .oO( how would that work with an application called "away" ? )

[15:23] <dogbert2> gisted the gdb output here: https://gist.github.com/dogbert17/bb7456fa0ab2017db5ee7e99f32629f2

[15:36] *** zakharyas left
[15:42] *** reportable6 joined
[15:48] <dogbert2> lizmat: that wouldn't work so well :)

[15:55] *** domidumont left
[15:57] *** zakharyas joined
[15:58] *** zakharyas left
[16:01] *** zakharyas joined
[16:03] *** robertle left
[16:39] *** domidumont joined
[17:01] *** zakharyas left
[17:52] *** zakharyas joined
[18:06] *** zakharyas left
[18:17] *** Zoffix joined
[18:18] <Zoffix> Is there a configure time option to set stack to be executable?

[18:18] <Zoffix> So you wouldn't need to run `sudo execstack -c nqp/MoarVM/libmoar.so` ?

[18:21] *** Ven`` joined
[18:21] *** lizmat left
[18:32] <Zoffix> Trying to figure out instructions for installing on WSL, but can't figure out how to stick the `sudo execstack` piece and yet still use the `--gen-moar` options

[18:46] *** ilogger2 joined
[19:04] <samcv> i'm not sure what's going on with this appveyor msvc error

[19:04] <samcv> https://ci.appveyor.com/project/samcv/moarvm-35u74/build/1.0.856/job/mcrgosve7odja28p

[19:04] <samcv> oh oops i was looking in the wrong file

[19:07] <Zoffix> samcv: FWIW, the latest 2 rakduo commits also has appveyor failures in the version that tests with master moar. Something about deprecated "o" options and inability to find make

[19:11] <samcv> nice msvc doesn't support LLU

[19:21] <samcv> though to be fair they have UI64, which is nice having a sized suffix. IMO we should have both standardized

[19:38] *** lizmat joined
[19:44] <dogbert2> jnthn: should I report the bug mentioned a couple of hours ago or do you already know what it is? 'MoarVM panic: Illegal Gen2 -> Nursery in caller chain (not in inter-gen set)'

[20:12] <jnthn> dogbert2: Yes

[20:22] <Geth> ¦ MoarVM: febffaa265 | (Ben Davies)++ | src/io/syncsocket.c

[20:22] <Geth> ¦ MoarVM: Expose file descriptors of IO::Socket::INET instances

[20:22] <Geth> ¦ MoarVM:

[20:22] <Geth> ¦ MoarVM: Before, `.native-descriptor` was available from IO::Socket, but always

[20:22] <Geth> ¦ MoarVM: returned -1.

[20:22] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/febffaa265

[20:22] <Geth> ¦ MoarVM: 7547dd8002 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/io/syncsocket.c

[20:22] <Geth> ¦ MoarVM: Merge pull request #880 from Kaiepi/socket-handle

[20:22] <Geth> ¦ MoarVM:

[20:22] <Geth> ¦ MoarVM: Expose file descriptors of IO::Socket::INET instances

[20:22] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7547dd8002

[20:22] <dogbert2> jnthn: will do: I suspect that the bug is quite new

[20:24] <samcv> i hate msvc

[20:27] <dogbert2> done, https://github.com/MoarVM/MoarVM/issues/890

[20:43] *** Ven`` joined
[20:51] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/07/02/2018-27-surveyed/

[20:56] *** Ven`` left
[21:10] *** MasterDuke joined
[21:22] <MasterDuke> for uses of the fixed size allocator functions, is anything other than tc->instance->fsa ever used?

[22:01] <samcv> ok now i fixed my previous appveyor issue but there's some one that isn't my fault

[22:13] <jnthn> MasterDuke: Not *currently*, though it's plausible we'd want to set up isolated ones in the future.

[22:13] <jnthn> MasterDuke: I've sometimes been a tiny bit tempted to rip out that arg but...I can't see it actually making a difference. :)

[22:37] <MasterDuke> jnthn: yeah, removing it doesn't seem like there's a major reward, but then again typing tc->instance->fsa over and over gets old...

[22:38] <jnthn> Not old enough for the disruption and/or having to undo it later, I suspect.

[22:39] <samcv> jnthn: well when we tear down the instance it only takes an instance

[22:39] <samcv> though. i guess that's only dealloc?

[22:39] <samcv> so i guess it could be removed hah

[22:39] <jnthn> I think it just frees all the things there

[22:42] <samcv> jnthn: i've been thinking we need to randomize our iteration order for the hashes

[22:42] <samcv> but i'm not sure how to do it. i was trying to read how perl 5 does it. but their hash code is very confusing

[22:43] <samcv> and also i think they have many more buckets than us. between num_items and num_items *2. whereas we have max 10 per bucket

[22:44] <samcv> but i guess we could start by randomizing the order we iterate buckets.

[22:45] <samcv> so perl 5 essentially will add things either to the first or the second slot in a bucket randomly. and it works well since things have 1 or 2 items in them generally. since we have more it makes it slightly less effective

[22:46] <jnthn> Doesn't the random hash seed already give us random iteration order?

[22:46] <jnthn> Or are you considering something more than "random between runs"?

[23:35] <jnthn> sleep o/

[23:35] <samcv> jnthn: the thing is to give less information to attackers. and ordering is pretty juicy

