[00:04] *** MasterDuke left
[00:08] *** MasterDuke joined
[00:11] <jnthn> sleep &

[00:11] <evalable6> jnthn, rakudo-moar 08a54212e: OUTPUT: ¬´Use of uninitialized value of type Callable in numeric context‚ê§  in block <unit> at /tmp/8‚Ä¶¬ª

[00:11] <evalable6> jnthn, Full output: https://gist.github.com/946c87169c3653d975db3f7cbd83d1ac

[00:11] <jnthn> :D

[00:15] <timotimo> that's lovely

[00:55] *** stmuk_ joined
[00:57] *** stmuk left
[01:49] *** stmuk joined
[01:51] *** stmuk_ left
[03:20] *** MasterDuke left
[05:02] *** rubes joined
[05:29] *** brrt joined
[05:51] *** robertle joined
[07:00] *** domidumont joined
[07:06] *** domidumont left
[07:07] *** domidumont joined
[07:32] *** rubes left
[07:41] <Geth> ¬¶ MoarVM: 27940b4d48 | (Bart Wiegmans)++ | 3 files

[07:41] <Geth> ¬¶ MoarVM: Add a tool to dump sizes of REPR structures

[07:41] <Geth> ¬¶ MoarVM:

[07:41] <Geth> ¬¶ MoarVM: Mainly so that I have an idea of how large these structures really are

[07:41] <Geth> ¬¶ MoarVM: and how much we'd waste when aligning to a cache line boundary.

[07:41] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/27940b4d48

[07:42] *** lizmat joined
[09:16] *** lizmat left
[09:19] *** lizmat joined
[09:22] *** robertle left
[09:30] <jnthn> morning o/

[09:30] *** nativecallable6 joined
[09:38] *** lizmat_ joined
[09:39] *** brrt left
[09:40] *** lizmat left
[09:49] *** lizmat_ is now known as lizmat

[10:12] <lizmat> Would it make sense to check in the Optimizer for the infix:<~> struct that " $_ $_ $_ " generates, and replace that by a structure that does

[10:13] <lizmat> nqp::join('',nqp::list(" ",$_.Str," ",$_.Str," ",$_.Str," "))

[10:15] <lizmat> preliminary testing shows this could make this particular case 1.8x as fast with about a third of the allocations

[10:15] <nwc10> jnthn: ASAN finds your branch to be very boring

[10:15] <lizmat> fwiw, this is inspired by the introduction in Perl 5 of a specific op to handle this

[10:16] <lizmat> which is one of the reasons why 5.28 got a bit faster

[10:16] <lizmat> I figured we have most of the tools for this already  :-)

[10:16] <nwc10> (it might be that I'm missing stuff where tests shell out, and any barfage gets eaten and reported as "just a failure". I'm finding the spectests a bit noisy under ASAN)

[10:16] <jnthn> lizmat: With the caveat of needing to check there's no user-defined ~ and we're calling the setting one

[10:17] <jnthn> nwc10: Glad to be boring to ASAN :)

[10:19] <lizmat> jnthn: how would I know that in the optimizer?

[10:20] <jnthn> Loads of opts do it, I think there's even a "is in setting" sub or method to hep

[10:22] <jnthn> *help

[10:22] <jnthn> yay, my decont less during binding patches in Rakudo pass spectest

[10:22] <jnthn> stresstest now

[10:26] <nwc10> surely stresstest starts about 20:00 CEST this evening, and serious stresstest happens if Extra Time ends at a draw?

[10:28] <jnthn> :D

[10:28] <jnthn> Really

[10:31] <jnthn> Croatia looked better in the group games; I'm hoping that's just a case of "it's easy to look better under weaker opposition" rather than "they lost their groove for a couple of matches but might now find it again"

[10:37] *** brrt joined
[10:37] <jnthn> Patches I have locally get an inlined .chars method call from 13 instructions including 3 guards down to 9 instructions include 1 guard

[10:38] <jnthn> Presumably similar applies for many other such calls

[10:38] <jnthn> And there's more squeezing possible yet

[10:40] <jnthn> Yeah, 2 more `set` instructions can go away

[10:41] <jnthn> Probably takedispatcher can go away

[10:42] <jnthn> Maybe a third set also

[10:43] <jnthn> 5 ops is probably as low as it can go without escape analysis and scalar replacement and other cleverness that'd let us eliminate one more guard post-inline

[10:43] <jnthn> And the boxing can go away with upcoming opts

[10:46] *** brrt left
[10:49] <lizmat> .oO( I love unboxing fast presents )

[10:54] <dogbert17> jnthn: am I correct in assuming that, atm, some programs can be expected to run slower than they did before the rescalar work?

[10:55] <lizmat> dogbert17: answering for jnthn: yes, they can (as shown in test-t btw)

[10:55] <jnthn> Yes, that can happen. If you have any *small* examples, I'd be interested to see them.

[10:55] <jnthn> The main thing I know about is hash access

[10:56] <jnthn> Well, hash vivifying access

[10:57] <dogbert17> how about this: https://gist.github.com/dogbert17/1a084fcee9db8eaad5cf50ae89838ca1

[11:04] <jnthn> Not sure why that one'd be slower :)

[11:04] <jnthn> Will have a poke :)

[11:10] <dogbert17> for me, it takes ~8 sec on 2018-06 but ~10 secs now

[11:11] *** brrt joined
[11:11] <dogbert17> i.e. moarvm du-chains-and-opts

[11:11] <jnthn> But it was the rescalar merge that made it slower, I presume?

[11:11] <jnthn> Not the du-chains-and-opts branch?

[11:12] <dogbert17> both it would seem, the cutrrent version, i.e. Camelia takes 9 secs

[11:13] <dogbert17> *current

[11:14] <dogbert17> I can try to figure out which commit might have caused this if it will save you some time for cool opts :)

[11:15] <timotimo> du-chain-and-opts still has all those checks in there that probably delay speshing by a noticable bit? but probably not by two seconds

[11:16] <jnthn> It also turns out use of spesh stats for decont

[11:16] <jnthn> *turns on

[11:16] <jnthn> Which can lead to huge wins

[11:17] <jnthn> But did imply more guards in various cases

[11:17] <jnthn> But the commit I just did in Rakudo can reduce that :)

[11:17] <jnthn> So you may want to try it with Rakudo HEAD

[11:17] <jnthn> ooh, lunch time :)

[11:17] <jnthn> bbl

[11:19] <dogbert17> will try it out right away :) have a nice lunch

[11:22] <lizmat> Sometimes I wonder whether MoarVM should have an opt for integer sort: https://sorting.cr.yp.to  :-)

[11:23] <dogbert17> things improved quite a bit, hooray

[11:24] * lizmat doesn't see it, could be noise

[11:24] <lizmat> 6.083 -> 5.923

[11:27] <dogbert17> it was a specific example which improved but there's still some slowness. I'll see if I can figure out where it comes from

[11:35] *** robertle joined
[11:43] <Geth> ¬¶ MoarVM: 0e5d6aa4ce | (Samantha McVey)++ | src/6model/reprs/MVMHash.c

[11:43] <Geth> ¬¶ MoarVM: Add some branch prediction hints to MVMHash.c

[11:43] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0e5d6aa4ce

[11:43] <Geth> ¬¶ MoarVM/Unicode-11.0: 6f6cd10706 | (Samantha McVey)++ | 3 files

[11:43] <Geth> ¬¶ MoarVM/Unicode-11.0: Update Unicode to 11.0 and update grapheme break rules

[11:43] <Geth> ¬¶ MoarVM/Unicode-11.0:

[11:43] <Geth> ¬¶ MoarVM/Unicode-11.0: Update to the 11.0 version of the Unicode database. Get rid of multiple

[11:43] <Geth> ¬¶ MoarVM/Unicode-11.0: old rules using now obsolete Emoji rules/guidelines for favor of the new

[11:43] <Geth> ¬¶ MoarVM/Unicode-11.0: Extended_Pictographic property. We don't pass three of the Unicode

[11:43] <Geth> ¬¶ MoarVM/Unicode-11.0: grapheme break tests 11.0, though this is about where we were for the

[11:43] <Geth> ¬¶ MoarVM/Unicode-11.0: Unicode 10.0 tests and is acceptable enough to change versions.

[11:43] <Geth> ¬¶ MoarVM/Unicode-11.0: review: https://github.com/MoarVM/MoarVM/commit/6f6cd10706

[11:51] <brrt> .ask samcv - is it possible to nest strands?

[11:51] <yoleaux> brrt: I'll pass your message to samcv.

[11:52] <brrt> as in, does that ever happen

[11:52] <brrt> it is certainly possible, it seems

[11:53] <timotimo> it's possible, but we flatten strands in strands

[11:53] <timotimo> so it doesn't occur

[11:56] <brrt> hmm

[11:56] <brrt> ok

[11:56] <brrt> good to know

[11:56] <brrt> otherwise the grapheme iterator would be problematic

[11:57] <timotimo> "flatten" is perhaps misleading

[11:57] <timotimo> we copy the strands of one string into the strands array of another, like, append it

[11:57] <timotimo> except it may go in the middle, of course

[12:01] <brrt> i see

[12:01] <brrt> that makes sense

[12:02] <brrt> the maximum number of strands is defined as 64, is that even respected?

[12:02] <timotimo> not sure

[12:04] * jnthn back

[12:04] <samcv> what timotimo said

[12:04] <yoleaux> 11:51Z <brrt> samcv: - is it possible to nest strands?

[12:06] <jnthn> dogbert17: How much did things improve with that script with the latest Rakudo change?

[12:09] <jnthn> OK, I think I finally need to take care of the `set` elimination code...

[12:09] <jnthn> So it doesn't bust up the graph

[12:12] <jnthn> And probably can do it better with the DU chains also

[12:13] <timotimo> that seems likely

[12:15] <brrt> samcv: i just noticed that in strings/ops.c collapse_strands, we first have a loop to check if they all have a common storage type, and if so, to use a fast path for the collapse

[12:16] <samcv> brrt: yep

[12:16] <brrt> only thing is, if not, we assign common_storage_type to 1, which is MVM_STRING_GRAPHEME_ASCII

[12:16] <brrt> oh, hang on

[12:16] <brrt> i'm misreading because we're assigning to -1, not +1

[12:17] <brrt> never mind me

[12:17] <brrt> :-)

[12:25] <brrt> samcv: given that you know the string code pretty well, any opinion about an in-situ string type

[12:42] <lizmat> alas, brrt's blog post dropped from the HN front page

[12:49] <jnthn> dogbert17: Oh, just realized. The DU check branch still has the DU checks turned on

[12:49] <jnthn> dogbert17: Which means we're doing a bunch of expensive sanity checking

[12:49] <jnthn> That'll be switched off before merge

[12:50] <jnthn> (It's a debugging option, I'm just keeping it on for now to catch my mistakes :))

[12:51] <nwc10> isn't that what users are for? :-)

[12:52] <jnthn> It's too cruel for them to suffer *all* my mistakes :P

[12:53] <dogbert17> jnthn: got it :) the Rakudo fix posted before lunch definitely helped the example I gisted

[12:53] <jnthn> Nice

[12:58] <jnthn> Yeah, I think all the opts we did with set before plus can be subsumed into two more general opts

[12:58] <jnthn> Which catch more cases

[12:59] <timotimo> register renaming in general perhaps?

[13:01] *** lizmat left
[13:04] *** lizmat joined
[13:04] <brrt> my post was on HN at all?

[13:04] <lizmat> brrt: yup, made it to the front page for a while, 22 was the highest I've seen it

[13:04] <lizmat> https://news.ycombinator.com/item?id=17496789

[13:05] <lizmat> 33 now

[13:07] <brrt> that kind of dwarfed my earlier visitor statistics :-D

[13:15] <jnthn> Yay, the new set elimination actually gets rid of those two set instructions I mentioned in the `chars` spesh

[13:15] <jnthn> Aside from the takedispatcher, it's now as few instructions it could be for the arguments in question

[13:16] <brrt> :-o

[13:17] * jnthn waits for spectest

[13:21] <jnthn> https://gist.github.com/jnthn/2c891b816f9ad83ad1693f73b6631120

[13:21] <jnthn> Annotated version

[13:22] <jnthn> Note how it proved the return type check of Int:D could be omitted too

[13:26] <Geth> ¬¶ MoarVM/du-chains-and-opts: d69506a33b | (Jonathan Worthington)++ | 3 files

[13:26] <Geth> ¬¶ MoarVM/du-chains-and-opts: Factor out inc/dec op check

[13:26] <Geth> ¬¶ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/d69506a33b

[13:26] <Geth> ¬¶ MoarVM/du-chains-and-opts: 6cf1841527 | (Jonathan Worthington)++ | src/spesh/optimize.c

[13:26] <Geth> ¬¶ MoarVM/du-chains-and-opts: A new algorithm for removing unrequired `set`s

[13:26] <Geth> ¬¶ MoarVM/du-chains-and-opts:

[13:26] <Geth> ¬¶ MoarVM/du-chains-and-opts: Checks if either the `set` is the only reader of the value that it

[13:26] <Geth> ¬¶ MoarVM/du-chains-and-opts: writes, or if there is only one user of the value that it writes.

[13:26] <Geth> ¬¶ MoarVM/du-chains-and-opts: Uses the DU-chain to quickly find the paired writer or reader, and

[13:27] <Geth> ¬¶ MoarVM/du-chains-and-opts: if there's on conflicting register use then does a graph rewrite to

[13:27] <Geth> ¬¶ MoarVM/du-chains-and-opts: enable deletion of the `set` instruction.

[13:27] <Geth> ¬¶ MoarVM/du-chains-and-opts:

[13:27] <Geth> ¬¶ MoarVM/du-chains-and-opts: These seem to cover the cases that the previous more adhoc `set`

[13:27] <Geth> ¬¶ MoarVM/du-chains-and-opts: removal optimizations did, while also not making a mess of the SSA

[13:27] <Geth> ¬¶ MoarVM/du-chains-and-opts: form in the graph.

[13:27] <Geth> ¬¶ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/6cf1841527

[13:27] <jnthn> gah, typo. If there's *no* conflicting...

[13:28] <nwc10> git neuralize --interactive ...

[13:29] <jnthn> Czech lesson now. Hope I speak better than I'm typing today...

[13:29] <jnthn> bbl

[13:49] *** brrt left
[14:32] *** brrt joined
[14:50] * jnthn back

[14:51] <brrt> \o

[14:51] <brrt> lizmat++ for comments on the HN discussion :-)

[14:54] <jnthn> So...what was next on my todo list... :)

[14:55] <brrt> well, is it about time for curry yet?

[14:57] <jnthn> Not quite :)

[14:58] <jnthn> Anyway, the thing I was going to do was the box/unbox pair elimination

[14:58] <timotimo> thought that'd be it

[14:59] <jnthn> The set elimination was a good warmup for that :)

[15:02] <jnthn> Ohh... :/

[15:02] <jnthn> p6box_i is not a box_i :S

[15:03] <timotimo> ah, right

[15:03] <jnthn> I was going to change that anyway though

[15:03] <timotimo> i was surprised the day before yesterday to see no spesh functions in rakudo's ops

[15:03] <timotimo> you'll turn it into code-gen?

[15:03] * brrt wonders about the reason for the sequence of 'data = OBJECT_BODY(root); cbq = (ConcBlockingQueue*)data;'

[15:03] <jnthn> Yeah, thing so

[15:04] <jnthn> brrt: I forget the details but it gets *very* hairy in there making sure we don't look at outdated state at all the "invisible" points GC might happen

[15:08] <jnthn> timotimo: Trying to decide between hllboxtype_i + box_i and wval + box_i

[15:08] <timotimo> i was about to ask what you'd prefer

[15:09] <jnthn> wval inlines cross-HLL

[15:09] <timotimo> wval gives you a spesh slot that'll have to be GC'd

[15:09] <jnthn> But the former is two bytes shorter

[15:09] <jnthn> hllboxtype_i won't inline at all

[15:09] <timotimo> oh, we don't turn that into a wval in inlining?

[15:10] *** domidumont left
[15:10] <jnthn> No, though we could, or a spesh slot

[15:10] <timotimo> i mean we totally could do that and make it inlinable that way. want me to implement it?

[15:10] <jnthn> Hmm, that's a good point.

[15:10] <jnthn> Then we can have shorter bytecdoe :)

[15:10] <jnthn> It'll still be longer than today

[15:10] <jnthn> But still :)

[15:11] <jnthn> timotimo: Feel free to do that

[15:11] <timotimo> do you prefer spesh slot or wval?

[15:11] <timotimo> spesh slot is shorter in the bytecode

[15:11] <jnthn> We can't be sure it's in an SC

[15:11] <jnthn> So ss

[15:12] <jnthn> ooh, just realized...I can do this just by turning p6box_i into a desugar :)

[15:12] <timotimo> i thought that's what i suggested when i said "codegen" up there %)

[15:13] *** robertle left
[15:13] <jnthn> Yeah, just hadn't realized if I do it as a desguar it's probably very easy :)

[15:13] <timotimo> right, right

[15:14] <timotimo> i wonder if get*ref should have something done to it because it also uses the hll

[15:17] <jnthn> I don't think there's any practical cases of this

[15:17] <jnthn> (cross-hll use I mean)

[15:19] <timotimo> OK

[15:19] <brrt> oh, I see what you mean; the object body etc. aren't MVMROOT-ed

[15:19] <timotimo> jnthn: do you prefer i remove :useshll from the hllboxtype_* ops, or to special case it in the "is_graph_inlinable" function to make those exempt?

[15:20] <jnthn> timotimo: rewrite them in try_get_inline_graph and remove the annotation

[15:20] <timotimo> OK

[15:21] <brrt> then again; we could simplify that by allocating the body with malloc, so it never moves

[15:21] <timotimo> actually, i was putting the rewrite into merge_graph, which is also where the rewrites for wvals, strings, etc lives

[15:22] <jnthn> ah

[15:22] <jnthn> No, I think we probably want it in the same place that we handle lexical stuff

[15:22] <jnthn> to the getlexvia opcodes

[15:23] <timotimo> that's also in merge_graph :)

[15:23] <jnthn> Oh?

[15:23] <jnthn> Hm :)

[15:23] <jnthn> OK, I guess it's alright there then

[15:23] <jnthn> d'oh, we don't map the hllboxtype ops

[15:24] <brrt> ... and, if I implement an 'unshift' method for ConcBlockingQueue, I can make an object that literally 'jumps the queue', and tells the spesh worker to stop working

[15:24] <brrt> plan in the making

[15:25] <timotimo> map?

[15:25] <timotimo> oh, you mean the desugar can't reach it

[15:26] <jnthn> right

[15:26] <timotimo> i've got hllboxtype_[ins] as well as hlllist and hllhash, should i also do iter? any others?

[15:26] <jnthn> Easily solved

[15:26] <jnthn> Think that's enough

[15:26] <jnthn> I'm not sure Rakudo even uses hlllist and hllhash though

[15:26] <timotimo> mhm

[15:26] <timotimo> they were right next to it in the list ;)

[15:28] <lizmat> no hlllist/hllhash in src/core

[15:29] <timotimo> i don't think i can really test if it works, so i'll just commit it right now. ok, jnthn?

[15:31] *** lizmat left
[15:33] <jnthn> Hm, I guess :)

[15:33] <jnthn> Well, you can maybe make a synthetic example to try it out

[15:33] *** lizmat joined
[15:34] <timotimo> hm, now that hllboxtype_* is mapped in nqp

[15:37] <jnthn> brrt: Only to under 20 extops for Perl 6 once I kill of p6box_* :)

[15:37] <jnthn> *Down to under

[15:38] *** robertle joined
[15:38] <timotimo> i'm not actually sure how to get a rakudo sub that uses hllboxtype_* to be tried to inline into an nqp sub

[15:39] <jnthn> Probably easier the other way round since you can use :from<nqp> maybe

[15:40] <brrt> jnthn++ üéâ

[15:40] <timotimo> oof

[15:41] <lizmat> afk&

[15:44] <timotimo> ooh

[15:44] <timotimo> looks like a moarvm test in rakudo's t/ tickles this perhaps?

[15:45] <timotimo> hm, no, not sure that's what's happening

[15:45] <timotimo> i get a MoarVM oops: Malformed DU chain: writer sp_getspeshslot of 4(1) in BB 19 is incorrect

[15:46] <timotimo> but i don't have to set the writer of that register when what i do is just replace an op's info and its operands list

[15:48] <timotimo> oh, huh, what.

[15:49] <timotimo> ah, yes.

[15:49] <timotimo> that makes the patch besser

[15:50] <timotimo> i'm happy with the patch now, i'll go ahead and push it for you

[15:50] <Geth> ¬¶ MoarVM/du-chains-and-opts: f8c4648fb6 | (Timo Paulssen)++ | 3 files

[15:50] <Geth> ¬¶ MoarVM/du-chains-and-opts: allow hllboxtype_* across hll in inlines

[15:50] <Geth> ¬¶ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/f8c4648fb6

[17:03] <Geth> ¬¶ MoarVM: 69e2a388eb | (Timo Paulssen)++ | src/profiler/instrument.c

[17:03] <Geth> ¬¶ MoarVM: add a few missing allocating ops to profiler

[17:03] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/69e2a388eb

[17:15] <jnthn> Hmm, the box/unbox elim is going to need some fresh brane tomorrow, I think :)

[17:16] <timotimo> can you push a WIP? maybe i can have a look?

[17:16] <jnthn> Well, it's actually to do with the conflict-free checking in the immediate

[17:16] <timotimo> mhm

[17:16] <jnthn> Which I thought I could liberalize a tad, but an exploding CORE.setting suggests not

[17:17] <timotimo> so with the less liberal version it works but isn't worth quite as much?

[17:18] <jnthn> Well, misses my test case :)

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: 51ad24c88c | (Jonathan Worthington)++ | src/spesh/optimize.c

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: Liberalize set elimination somewhat

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP:

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: Sometimes we've no interesting control flow to worry about within the

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: graph: even if there may be calls to things outside the graph, those

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: can never touch our locals. Thus a linear sequence of instructions is

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: enough to look for to see we have on conflicts. Further, due to SSA

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: form, we need only look for *writes* that make a new version of the

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: <‚Ä¶commit message has 5 more lines‚Ä¶>

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: review: https://github.com/MoarVM/MoarVM/commit/51ad24c88c

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: d259d7a060 | (Jonathan Worthington)++ | src/spesh/optimize.c

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: Untested sketch of box/unbox elimination

[17:20] <Geth> ¬¶ MoarVM/du-chains-and-opts-WIP: review: https://github.com/MoarVM/MoarVM/commit/d259d7a060

[17:21] <jnthn> Heading home for noms and semis :)

[17:21] <timotimo> good noms, and happy sportsballin'

[17:25] *** domidumont joined
[17:42] *** domidumont left
[18:28] *** brrt left
[18:53] *** Ven`` joined
[19:07] <Geth> ¬¶ MoarVM: 1b075ec1a7 | (Samantha McVey)++ | src/strings/ops.c

[19:07] <Geth> ¬¶ MoarVM: Set MVM_string_substrings_equal_nocheck to static

[19:07] <Geth> ¬¶ MoarVM:

[19:07] <Geth> ¬¶ MoarVM: We don't use it anywhere else so make it a static function (could maybe

[19:07] <Geth> ¬¶ MoarVM: cause it to be inlined more often).

[19:07] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1b075ec1a7

[19:09] *** dogbert17 left
[19:17] *** lizmat left
[19:24] *** lizmat joined
[20:00] * lizmat has given an answer to https://www.reddit.com/r/perl/comments/8xh423/201828_–≤–≤–µ–¥–µ–Ω–∏–µ_–≤_perl_6_weekly_changes_in_and/e27bj4k/

[20:01] <lizmat> I was *really* glad to see that in this particular benchmark, you can say that Perl 6 is now 3x as fast as Perl 5

[20:01] <lizmat> I wonder how many other benchmarks we could try after jnthn's work is merged  :-)

[20:06] <lizmat> .ask jnthn if I see "identity" from BOOTSTRAP take 20% of a benchmark, and I see identity simply returning its parameter, shouldn't that get optimised away completely ?

[20:06] <yoleaux> lizmat: I'll pass your message to jnthn.

[20:07] <lizmat> m: my int @a; my int $i; @a.push(++$i) while $i < 5_000_000; say now - INIT now   # the code in question

[20:07] <camelia> rakudo-moar 88e913b62: OUTPUT: ¬´0.1196005‚ê§¬ª

[20:40] *** MasterDuke joined
[20:53] <timotimo> that's nice

[20:53] <timotimo> a tiny bit sad that my int @a = 1 .. 5_000_000 takes almost 2x as long

[20:53] <timotimo> hm, actually, 0.26 - 0.1 vs 0.51 - 0.1

[20:58] <jnthn> lizmat: Would be interested to see the code that does that, though if that really is covering the main cost of the program, we might just be measuring profile overhead...

[20:58] <yoleaux> 20:06Z <lizmat> jnthn: if I see "identity" from BOOTSTRAP take 20% of a benchmark, and I see identity simply returning its parameter, shouldn't that get optimised away completely ?

[21:00] <jnthn> Arguably if we optimize an inlinee out so completely that it is only the profile instructions, we could just toss them :)

[21:00] <timotimo> true

[21:00] <jnthn> Though it's maybe possible to argue that the other way. :)

[21:01] <timotimo> yeah, the identity frame after spseh is literally no_op, sp_getarg_o, return_o

[21:02] <jnthn> Right, and the no_op isn't actually spat out :)

[21:04] <timotimo> ah, it has a prof_allocated in there, too

[21:04] <timotimo> enterspesh, getarg, allocated, exit, return

[21:04] <timotimo> we'd be able to tell when the sp_getarg_o has been turned into a set that it can't have allocated

[21:05] <jnthn> Yeah, though note that after inlining, once I get things as aggressive as I want, identity will probably just look like enterinlined, allocated, exit or some such :)

[21:05] <jnthn> And if that allocated went away then enterinlined/exit being together could be the "delete" heuristic.

[21:06] <timotimo> ok so push looks like enterspesh, getarg, allocated, set, set, getarg_i, takedispatcher, push_i

[21:06] <timotimo> and then it passes the object that's been pushed into to identity

[21:06] <timotimo> is that right?

[21:07] <timotimo> heh, also: calls prof_allocated twice on the thing, one extra time after the "return" from the inlined code

[21:07] <jnthn> Would have to see it in context

[21:07] <jnthn> I need to spend some time on natives, especially nativeref

[21:08] <timotimo> the code is a multi method push on intarray:D; it's nqp::push_i(self, $value); self

[21:08] <timotimo> i don't think i remember when identity was introduced

[21:09] <jnthn> if it's at the end, return type check

[21:09] <jnthn> Or return decont check

[21:09] <jnthn> walk, bbiab

[21:10] <timotimo> oh, from a spesh plugin?

[21:10] <timotimo> good walk!

[21:12] <timotimo> but yeah, lizmat, that's really just measuring profiler overhead, some of which could arguably already be kicked out with a bit of intelligence

[21:17] <lizmat> ah, so you're saying "identity" wouldn't get called if there's no profiling going on ?

[21:19] <timotimo> no, it does get called

[21:20] <timotimo> but it doesn't do anything except record for the profiler that it was called

[21:22] <timotimo> oh, jnthn, can you give me your box/unbox removal test case, too?

[21:23] <MasterDuke> fwiw, perf has 'push' at the top with 7.5% for lizmat's bench

[21:41] *** MasterDuke left
[21:44] *** MasterDuke joined
[21:48] *** Ven`` left
[21:49] <timotimo> jnthn: try_eliminate_one_box_unbox seems to have lacked a unbox_ins->info = MVM_op_get_op(MVM_OP_set)

[21:54] <timotimo> that doesn't make things work right, of course ;)

[21:57] <timotimo> env MVM_SPESH_BLOCKING=yes MVM_SPESH_NODELAY=yes perl6 -e 'use Test'

[21:57] <timotimo> ===SORRY!===

[21:57] <timotimo> ))))))))))))))))))))))))))))))))

[21:58] *** Ven`` joined
[21:59] *** Ven`` left
[22:33] <jnthn> timotimo: I didn't even compile it, I don't think, just shoved what I had in a branch so I could go home :)

[22:36] <jnthn> Before that, I could do with figuring out why the looser conditions for set opts break things

[22:36] <jnthn> Though I think I have an idea why :)

[22:38] <timotimo> i didn't actually invest noticably much time into it apart from spewing debug printfs all over and getting super confusing explosions :)

[22:40] <jnthn> Yeah, when I allowed set elimination go to multi-BB, I neglected to remember that one of the benefits of it being single BB was that just checking the instruction wasn't in an inlined BB was enough

[22:41] <jnthn> Which could casue some quite interesting explosions due to missing stuff deopt might need

[22:41] <timotimo> oh, so the problem is in set elimination, not box/unbox elimination

[22:41] <jnthn> Dammit

[22:42] <jnthn> Still blows up in CORE.setting

[22:45] <jnthn> Oh. It seems that it might actually be the change I did to only consider there to be a conflict if we see a write creating a new version of the register

[22:45] <jnthn> Ah, and that may make sense

[22:48] <timotimo> plus hopefully something about inc/dec?

[22:48] <timotimo> wait, does that make sense ...

[22:49] <jnthn> No, it's not about that, I already rule those out of the opt :P

[22:50] <jnthn> So, it's that reads are actually conflicting maybe

[22:50] * jnthn writes some examples

[22:51] <jnthn> Yes

[22:51] <jnthn> const_s r3(1), 'blah'

[22:51] <jnthn> getlex r1(1), 'blah'

[22:51] <jnthn> getlex_n r2(2), r3(1)

[22:51] <jnthn> set r3(2), r1(1)

[22:51] <jnthn> Consider a case like that (yes, pseudo-codey)

[22:51] <jnthn> We can't turn that into `getlex r3(2), 'blah'` becuase otherwise we break the read of r3(1)

[22:52] <timotimo> mhm

[22:52] <timotimo> so we'll have to look at users again once we find our target?

[22:54] <jnthn> No, this is just in the blocking check

[22:54] <jnthn> But if we consider set optimization 2

[22:54] <jnthn> set r3(1), r2(1)

[22:54] <jnthn> prepargs

[22:54] <jnthn> arg_o 1, r2(1)

[22:54] <jnthn> arg_o 1, r3(1)

[22:54] <jnthn> oops, imagine arg_o 0 in the first case, but anyway

[22:54] <jnthn> We can change the last one safely to arg_o 1, r2(1)

[22:55] <jnthn> Even though there's a read

[22:55] <jnthn> 'cus in this case we're pushing the value down

[22:55] <jnthn> Not pulling it up

[22:55] <jnthn> So the answer is that is_conflict_free needs to take an option

[22:59] <jnthn> Let's try that out :)

[22:59] <timotimo> looking forward to seeing the result

[23:04] *** Kaiepi left
[23:05] *** Kaiepi joined
[23:11] <jnthn> Yes, that seems to hold up

[23:19] <Geth> ¬¶ MoarVM/du-chains-and-opts: 454313773c | (Jonathan Worthington)++ | src/spesh/optimize.c

[23:19] <Geth> ¬¶ MoarVM/du-chains-and-opts: Liberalize set elimination somewhat

[23:19] <Geth> ¬¶ MoarVM/du-chains-and-opts:

[23:19] <Geth> ¬¶ MoarVM/du-chains-and-opts: Sometimes we've no interesting control flow to worry about within the

[23:19] <Geth> ¬¶ MoarVM/du-chains-and-opts: graph: even if there may be calls to things outside the graph, those

[23:19] <Geth> ¬¶ MoarVM/du-chains-and-opts: can never touch our locals. Thus a linear sequence of instructions is

[23:19] <Geth> ¬¶ MoarVM/du-chains-and-opts: enough to look for to see we have on conflicts. Further, due to SSA

[23:19] <Geth> ¬¶ MoarVM/du-chains-and-opts: form, in the case we're moving a read forwards we need only look for

[23:19] <Geth> ¬¶ MoarVM/du-chains-and-opts: <‚Ä¶commit message has 7 more lines‚Ä¶>

[23:19] <Geth> ¬¶ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/454313773c

[23:23] <timotimo> there's an Also there that probably doesn't belong?

[23:34] <timotimo> OK, there's two things that make my int @a = ^50_000_000 slower than it has to be

[23:35] <timotimo> first: sp_getlex_ins doesn't have an expr template, so the whole thing gets jitted by the lego jit (though sometimes the exprjit makes things slower by itself)

[23:35] <jnthn> huh, did I forget to push my Rakudo change to adopt the box/unbox over p6box...

[23:35] <jnthn> Darn, apparently not :(

[23:35] <timotimo> second: the push_i doesn't get devirtualized because OSRing didn't let us figure out the type of the array being put in

[23:36] <timotimo> is there anything in particular that OSR could be missing? does it look at the types of arguments?

[23:39] <timotimo> it doesn't have facts for the result of sp_getarg_o, that makes it harder for this to be good

[23:40] <timotimo> when i warmup that STORE method by storing ^100 to an int array 100 times it goes down from 2.82s to 0.96s

[23:41] <timotimo> ooh, it also does the thing where it keeps logging osr hits

[23:41] <timotimo> so the spesh thread was partially busy the whole time, too

[23:47] <jnthn> Despite the commit I need to try my original example still setting on my computer in the office, manually fashioning one using box_i does seem to do the right thing

[23:48] <timotimo> sitting, you mean?

[23:48] <jnthn> yes :)

[23:48] <timotimo> that allows the sentence to parse %)

[23:56] <Geth> ¬¶ MoarVM/du-chains-and-opts: 3727d18b97 | (Jonathan Worthington)++ | src/spesh/optimize.c

[23:56] <Geth> ¬¶ MoarVM/du-chains-and-opts: Implement box/unbox elimination

[23:56] <Geth> ¬¶ MoarVM/du-chains-and-opts:

[23:56] <Geth> ¬¶ MoarVM/du-chains-and-opts: This happens in the second phase, after inlinings, thus giving us more

[23:56] <Geth> ¬¶ MoarVM/du-chains-and-opts: potential pairings to work with. When we see a box, we look at its

[23:56] <Geth> ¬¶ MoarVM/du-chains-and-opts: usages and find matching unbox/decont instructions. We also look down

[23:56] <Geth> ¬¶ MoarVM/du-chains-and-opts: `set` chains in case the unbox/decont is a `set` away. If we see a pair,

[23:56] <Geth> ¬¶ MoarVM/du-chains-and-opts: and the original unboxed value is still available, we rewrite the unbox

[23:56] <Geth> ¬¶ MoarVM/du-chains-and-opts: to a `set` of the original value, removing a usage of the boxed value.

[23:56] <Geth> ¬¶ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/3727d18b97

[23:56] <jnthn> Still some things to take care of to make that actually useful.

[23:56] <jnthn> We don't delete the original box instruction

[23:57] <jnthn> Also in my Perl 6 example, a useless guard (because we can prove it ain't needed) would keep it alive anyway

[23:57] <timotimo> but we do remove the user?

[23:57] <jnthn> Yes

[23:57] <jnthn>         /* Make unbox insturction no longer use the boxed value. */

[23:57] <jnthn>         MVM_spesh_usages_delete_by_reg(tc, g, unbox_ins->operands[1], unbox_ins);

[23:57] <jnthn> But we don't do another pass of DIE after this

[23:58] <timotimo> oh wow, that's the acronym for that, eh?

[23:58] <timotimo> that's cool

[23:58] <timotimo> anything speak against putting another round of DIE in there?

[23:59] <jnthn> Not really. Then I can probably toss the `set` deletion and just let it be swept up

[23:59] <jnthn> I suspect when I put in the stuff to eliminate native ref / deref pairs it's also going to produce dead instructions

[23:59] <jnthn> Probably easiest to just let them get swallowed at the end.

[23:59] <jnthn> Rather than try and delete them manually everywhere

[23:59] <timotimo> agreed

