[00:00] *** lizmat left
[01:06] *** Kaiepi joined
[01:06] *** Kaiepi left
[01:09] *** Kaiepi joined
[01:22] *** Kaypie joined
[01:22] *** Kaiepi left
[03:41] *** lizmat joined
[04:03] *** Kaypie left
[04:03] *** Kaypie joined
[05:22] <samcv> MasterDuke: i have built it with flto and i didn't see many changes

[05:30] *** domidumont joined
[05:37] *** domidumont left
[05:37] *** domidumont joined
[05:58] *** brrt joined
[06:03] *** lizmat left
[06:12] *** domidumont left
[07:03] *** robertle joined
[07:20] *** domidumont joined
[08:00] *** lizmat joined
[08:08] *** brrt left
[08:16] <samcv> also working on implementing Fibonacci hashing

[08:17] <samcv> got around to fully looking at the article. and my favorite part is that it uses all the bits of the hash, so probably more secure

[09:40] *** zakharyas joined
[10:32] *** statisfiable6 left
[10:32] *** releasable6 left
[10:32] *** notable6 left
[10:32] *** bloatable6 left
[10:32] *** nativecallable6 left
[10:32] *** unicodable6 left
[10:42] *** committable6 joined
[10:42] *** reportable6 joined
[10:42] *** benchable6 joined
[10:42] *** greppable6 joined
[10:42] *** releasable6 joined
[10:42] *** bloatable6 joined
[10:42] *** unicodable6 joined
[10:43] *** evalable6 joined
[10:43] *** notable6 joined
[10:43] *** nativecallable6 joined
[10:43] *** coverable6 joined
[10:43] *** statisfiable6 joined
[10:43] *** bisectable6 joined
[10:43] *** squashable6 joined
[10:43] *** quotable6 joined
[10:43] *** shareable6 joined
[10:43] *** undersightable6 joined
[10:47] *** lizmat left
[11:13] *** raschipi joined
[11:17] <MasterDuke> samcv: Fibonacci hashing with/for the current uthash? or something new?

[11:57] *** brrt joined
[11:58] <brrt> \o

[11:59] <brrt> I advertised MoarVMs string handling for a bit: https://lemire.me/blog/2018/06/15/emojis-java-and-strings/#comment-308918

[11:59] <brrt> samcv++

[12:00] <brrt> (for looking into improving our hashing)

[12:01] <brrt> re: concurrent lock-free hashmap, I can't seem to solve the problem of resizing, to my embarassement

[12:37] <jnthn> brrt: I guess you've seen https://web.stanford.edu/class/ee380/Abstracts/070221_LockFreeHash.pdf ?

[13:26] *** lizmat joined
[13:46] <brrt> i haven't

[13:46] *** raschipi left
[13:49] <brrt> that's interesting

[13:50] <jnthn> :)

[13:51] <jnthn> Yeah, I have a collection of lock-free modules for some of the simpler cases (stack, queue, trie), and pondered doing the hash table one, but it's a comparatively big undertaking :)

[13:51] *** Kaypie left
[13:52] <brrt> i was thinking of doing a linked hash table, it's kind of simpler to do that with CAS

[13:54] <brrt> the thing i can't figure out is how to do atomic resize

[14:00] *** zakharyas left
[14:04] *** coverable6 left
[14:04] *** benchable6 left
[14:04] *** bisectable6 left
[14:04] *** evalable6 left
[14:04] *** unicodable6 left
[14:04] *** statisfiable6 left
[14:04] *** quotable6 left
[14:04] *** greppable6 left
[14:04] *** bloatable6 left
[14:04] *** notable6 left
[14:04] *** shareable6 left
[14:04] *** squashable6 left
[14:04] *** releasable6 left
[14:04] *** reportable6 left
[14:04] *** undersightable6 left
[14:04] *** committable6 left
[14:04] *** nativecallable6 left
[14:07] <robertle> jnthn: you have a lock-free updateable trie? does that lie around somewhere by any chance?

[14:08] <timotimo> it's on the ecosystem

[14:08] <timotimo> eco: Trie

[14:08] <buggable> timotimo, Trie 'A Trie implementation': https://github.com/FCO/Trie 5 other matching results: https://modules.perl6.org/s/

[14:08] <timotimo> eco: Trie::Concurrent

[14:08] <buggable> timotimo, Nothing found

[14:08] <timotimo> eco: Concurrent::Trie

[14:08] <buggable> timotimo, Concurrent::Trie 'A lock-free concurrent trie (Text Retrieval) data structure.': http://modules.perl6.org/dist/Concurrent::Trie:cpan:JNTHN

[14:08] <robertle> k, will have a look!

[14:33] *** dogbert17 joined
[14:35] <samcv> MasterDuke: uthash

[14:38] <brrt> samcv: any explicit plans to replace it completely rather than fully?

[14:38] <brrt> no need to, btw, we basically forked dynasm as well

[14:38] <brrt> *completely rather than partially :-)

[14:38] <samcv> not atm

[14:42] <timotimo> if linking moarvm takes such a long time with -flto, i wonder if gold can also do lto?

[14:42] <timotimo> it's supposed to be very fast

[14:47] <brrt> what's gold?

[14:47] <brrt> in this context i mean

[14:49] <ilmari> another linker

[14:49] <MasterDuke> from google i think

[14:50] <brrt> oh, i see

[14:52] <timotimo> yeah, since go always links everything statically, they have loads more symbols to put into their binaries, or something like that

[14:53] <timotimo> iiuc gold does some multithreading at the very least

[14:55] <brrt> i think gold predates go, if i read my wikipedia correctly

[14:55] <timotimo> oh, OK

[14:58] *** lizmat left
[15:00] <samcv> yes gold predates go

[15:03] <ilmari> google are just really unimaginative when it comes to naming

[15:06] <MasterDuke> hm. i added -fuse-ld=gold as well as -flto=4, but took the same amount of time

[15:07] <MasterDuke> however, i'm not even entirely sure i have gold installed...

[15:08] *** nativecallable6 joined
[15:08] *** greppable6 joined
[15:08] *** coverable6 joined
[15:08] *** committable6 joined
[15:08] *** bloatable6 joined
[15:08] *** notable6 joined
[15:08] *** quotable6 joined
[15:08] *** releasable6 joined
[15:08] *** evalable6 joined
[15:08] *** bisectable6 joined
[15:08] *** reportable6 joined
[15:08] <timotimo> heh.

[15:08] <timotimo> a good time to try out execsnoop perhaps?

[15:09] <MasterDuke> don't know what that is

[15:09] <timotimo> it's a tool based on perf that tells you everything that gets exec'd by a process directly and indirectly

[15:09] <timotimo> i haven't actually tried it yet, but that's my idea of what it is

[15:10] <timotimo> it's another brendan gregg thing, like the flamegraphs thing and flamescope

[15:10] *** lizmat joined
[15:10] <MasterDuke> cool

[15:14] *** brrt left
[15:18] <MasterDuke> well, changing /usr/bin/ld to be a symlink to /usr/bin/ld.gold didn't change the build time any

[15:19] <MasterDuke> huh. /usr/bin/ld and /usr/bin/ld.gold have different sizes, but the output of -v for both of them is the same: GNU ld (GNU Binutils) 2.30

[15:21] <timotimo> i get GNU gold (version 2.29-13.fc27) 1.14

[15:23] <MasterDuke> that was in arch linux. in kubuntu 18.04 i get 'GNU ld (GNU Binutils for Ubuntu) 2.30' and 'GNU gold (GNU Binutils for Ubuntu 2.30) 1.15'

[15:24] *** domidumont left
[15:59] *** brrt joined
[16:07] *** zakharyas joined
[16:19] *** zakharyas left
[16:20] *** robertle left
[16:36] *** domidumont joined
[17:25] *** zakharyas joined
[17:31] <Geth> Â¦ MoarVM: 9d53069b04 | (Timo Paulssen)++ | src/jit/graph.c

[17:31] <Geth> Â¦ MoarVM: steal pow_i impl from interp.c for the jit

[17:31] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9d53069b04

[17:31] <timotimo> wait, are we okay with new commits on master right now?

[17:38] <brrt> ehm, i'm not against it, but i'm guessin we want extra-carefulness for rakudo star

[17:38] <timotimo> btw, surely there's a better implementation of pow_i out there than this?

[17:41] <brrt> probably :-)

[17:41] <timotimo> and surely we know one of the two values often enough to generate better code at the jit stage :)

[17:44] <brrt> also probably :-)

[17:49] *** zakharyas left
[17:57] *** zakharyas joined
[18:18] <MasterDuke> star is next month isn't it?

[18:20] <MasterDuke> timotimo: why the name pow_i_impl? there aren't any other *_impl functions

[18:20] <timotimo> i didn't want to find a good place to put it %)

[18:21] <MasterDuke> heh

[18:30] *** lizmat left
[18:33] *** shareable6 joined
[18:39] *** zakharyas left
[18:45] *** nativecallable6 left
[18:45] *** nativecallable6 joined
[18:47] *** unicodable6 joined
[18:47] *** benchable6 joined
[18:47] *** squashable6 joined
[18:47] *** statisfiable6 joined
[18:47] *** undersightable6 joined
[18:50] *** lizmat joined
[19:24] *** domidumont left
[19:24] <brrt> fwiw, 'where do i put this internal function' is one of the least of my worries :-)

[19:52] *** brrt left
[20:10] *** lizmat left
[20:12] *** lizmat joined
[20:27] *** lizmat left
[20:32] *** lizmat joined
[21:29] *** lizmat left
[21:52] *** lizmat joined
[23:19] *** [Coke] left
[23:19] *** [Coke] joined
[23:23] *** lizmat left
