[00:01] *** leont left
[00:09] *** Kaiepi left
[00:09] *** leont joined
[00:10] *** p6bannerbot sets mode: +v leont

[00:11] *** Kaiepi joined
[00:12] *** p6bannerbot sets mode: +v Kaiepi

[00:21] *** leont left
[00:32] *** Kaypie joined
[00:32] *** Kaiepi left
[00:33] *** p6bannerbot sets mode: +v Kaypie

[00:56] *** Kaypie left
[00:56] *** Kaypie joined
[00:57] *** p6bannerbot sets mode: +v Kaypie

[02:13] *** statisfiable6 left
[02:13] *** notable6 left
[02:13] *** unicodable6 left
[02:13] *** releasable6 left
[02:13] *** bisectable6 left
[02:13] *** nativecallable6 left
[02:13] *** squashable6 left
[02:13] *** undersightable6 left
[02:13] *** bloatable6 left
[02:13] *** committable6 left
[02:13] *** greppable6 left
[02:13] *** reportable6 left
[02:13] *** shareable6 left
[02:13] *** coverable6 left
[02:13] *** evalable6 left
[02:13] *** quotable6 left
[02:13] *** benchable6 left
[02:14] *** notable6 joined
[02:14] *** benchable6 joined
[02:14] *** coverable6 joined
[02:14] *** p6bannerbot sets mode: +v notable6

[02:15] *** releasable6 joined
[02:15] *** p6bannerbot sets mode: +v benchable6

[02:15] *** reportable6 joined
[02:15] *** p6bannerbot sets mode: +v coverable6

[02:15] *** p6bannerbot sets mode: +v releasable6

[02:15] *** undersightable6 joined
[02:15] *** bisectable6 joined
[02:16] *** p6bannerbot sets mode: +v reportable6

[02:16] *** evalable6 joined
[02:16] *** p6bannerbot sets mode: +v undersightable6

[02:16] *** p6bannerbot sets mode: +v bisectable6

[02:17] *** p6bannerbot sets mode: +v evalable6

[02:17] *** unicodable6 joined
[02:17] *** statisfiable6 joined
[02:17] *** greppable6 joined
[02:17] *** bloatable6 joined
[02:17] *** committable6 joined
[02:17] *** shareable6 joined
[02:17] *** p6bannerbot sets mode: +v unicodable6

[02:17] *** p6bannerbot sets mode: +v statisfiable6

[02:18] *** p6bannerbot sets mode: +v greppable6

[02:18] *** quotable6 joined
[02:18] *** nativecallable6 joined
[02:18] *** p6bannerbot sets mode: +v bloatable6

[02:18] *** squashable6 joined
[02:18] *** p6bannerbot sets mode: +v committable6

[02:18] *** p6bannerbot sets mode: +v shareable6

[02:19] *** lizmat left
[02:19] *** p6bannerbot sets mode: +v quotable6

[02:19] *** p6bannerbot sets mode: +v nativecallable6

[02:19] *** p6bannerbot sets mode: +v squashable6

[02:20] *** MasterDuke left
[02:29] *** Kaypie left
[02:30] *** Kaypie joined
[02:31] *** p6bannerbot sets mode: +v Kaypie

[03:20] *** Kaypie left
[03:21] *** Kaypie joined
[03:21] *** p6bannerbot sets mode: +v Kaypie

[06:29] *** domidumont joined
[06:30] *** p6bannerbot sets mode: +v domidumont

[06:32] *** domidumont left
[06:48] *** domidumont joined
[06:49] *** p6bannerbot sets mode: +v domidumont

[08:00] *** lizmat joined
[08:00] *** p6bannerbot sets mode: +v lizmat

[08:05] *** robertle joined
[08:05] *** p6bannerbot sets mode: +v robertle

[08:21] *** Kaypie left
[08:21] *** Kaypie joined
[08:22] *** p6bannerbot sets mode: +v Kaypie

[08:56] *** Kaypie left
[08:58] *** Kaiepi joined
[08:58] *** p6bannerbot sets mode: +v Kaiepi

[09:18] *** zakharyas joined
[09:18] *** p6bannerbot sets mode: +v zakharyas

[09:33] *** nine left
[09:35] *** nine joined
[09:35] *** p6bannerbot sets mode: +v nine

[09:46] *** nine left
[09:49] *** nine joined
[09:50] *** p6bannerbot sets mode: +v nine

[09:52] *** camelia joined
[09:53] *** p6bannerbot sets mode: +v camelia

[10:07] *** AlexDani` joined
[10:08] *** p6bannerbot sets mode: +v AlexDani`

[10:12] *** AlexDaniel left
[10:20] <Geth> Â¦ MoarVM: d40bac9f0a | (Jeremy Studer)++ (committed by Bart Wiegmans) | src/jit/x64/emit.dasc

[10:20] <Geth> Â¦ MoarVM: Use arithmetic right shift in JIT of brshift_i

[10:20] <Geth> Â¦ MoarVM:

[10:20] <Geth> Â¦ MoarVM: The arithmetic right shift will preserve the sign of the integer by

[10:20] <Geth> Â¦ MoarVM: ensuring that new bits shifted in match the initial sign bit.

[10:20] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d40bac9f0a

[10:22] <Geth> Â¦ MoarVM: 0c2b13a233 | (Jeremy Studer)++ (committed by Bart Wiegmans) | 6 files

[10:22] <Geth> Â¦ MoarVM: Add exprjit integer multiplication op

[10:22] <Geth> Â¦ MoarVM:

[10:22] <Geth> Â¦ MoarVM: +1 template

[10:22] <Geth> Â¦ MoarVM:

[10:22] <Geth> Â¦ MoarVM: Only adding a tile that takes two registers for now, as that is the only

[10:22] <Geth> Â¦ MoarVM: way the op is being used currently.

[10:22] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0c2b13a233

[10:22] <Geth> Â¦ MoarVM: 43c5cd4aa7 | (Jeremy Studer)++ (committed by Bart Wiegmans) | docs/jit/overview.org

[10:22] <Geth> Â¦ MoarVM: Add mul exprjit op to documentation

[10:22] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/43c5cd4aa7

[10:27] *** brrt joined
[10:28] *** p6bannerbot sets mode: +v brrt

[10:28] <brrt> good *

[10:28] <brrt> I've taken it on myself to start merging or closing branches

[10:30] <lizmat> brrt++

[10:40] <timotimo> that's brave

[10:41] <timotimo> releasable6: status

[10:41] <releasable6> timotimo, Next release will happen when it's ready. 2 blockers. 80 out of 169 commits logged (âš  1 warnings)

[10:41] <releasable6> timotimo, Details: https://gist.github.com/10352423573b19845632a2cb19a6d392

[10:50] <AlexDani`> brave indeed :D

[10:50] *** AlexDani` is now known as AlexDaniel

[11:03] <dogbert11> what cool features/opts will these branches add?

[11:14] *** domidumont left
[11:28] <brrt> meh, I just let everyone panic when it's broken again

[11:28] <brrt> :-D

[11:28] <brrt> in seriousness, we should probably want a not-too-large backlog of PRs

[11:29] <timotimo> true, i've made a couple in the recent past, too, that should probably be merged, dropped, or re-done

[11:31] <brrt> yes

[11:32] <brrt> https://github.com/MoarVM/MoarVM/pull/979 - this one

[11:39] <Geth> Â¦ MoarVM/master: 5 commits pushed by (Jeremy Studer)++, (Bart Wiegmans)++

[11:39] <Geth> Â¦ MoarVM/master: 5167d1026d | Add extend_{u,i}* exprjit templates

[11:39] <Geth> Â¦ MoarVM/master: 0accc8ce7b | Add coerce_* exprjit templates

[11:39] <Geth> Â¦ MoarVM/master: 9b2ab16909 | Add radix_I exprjit template

[11:39] <Geth> Â¦ MoarVM/master: 7a110b711a | Add hllboolfor exprjit template

[11:39] <Geth> Â¦ MoarVM/master: 0939a10cdd | Merge branch 'exprjit_09_20_18'

[11:39] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/43c5cd4aa748...0939a10cdd8e

[11:43] <timotimo> that's on hold until our post-inlining optimization pass can be replaced by the regular one

[11:44] <nine> brrt: do you have an idea what was wrong with these? https://github.com/MoarVM/MoarVM/commit/db23381f695d5e477052d0973ed1107ab57a1615

[11:45] <brrt> nope, not me

[11:45] <brrt> I feel like that should be safe

[11:46] *** Kaiepi left
[11:46] <brrt> maybe it's to do with the extend  / trunc business

[11:46] <brrt> as in, they may not be wrong per se, but they may expose wrongness in how we handle truncation and extending

[11:46] <brrt> I don't know. I'm theorizing

[11:53] <brrt> nine: do you have an example of what was going wrong with them?

[11:54] <nine> brrt: you may be right. I've reverted my patch and am building rakudo currently. So far no issue. I remember compilation breaking with those templates present.

[11:59] <brrt> here's hoping it works

[12:02] <nine> Looking good :)

[12:04] <brrt> \o/

[12:11] *** zakharyas left
[12:38] *** leont joined
[12:39] *** p6bannerbot sets mode: +v leont

[12:50] *** leont left
[13:01] *** domidumont joined
[13:02] *** p6bannerbot sets mode: +v domidumont

[13:02] *** brrt left
[13:14] <Geth> Â¦ MoarVM: 8c67e1697e | (Stefan Seifert)++ | src/jit/core_templates.expr

[13:14] <Geth> Â¦ MoarVM: Revert "Remove broken expr JIT templates"

[13:14] <Geth> Â¦ MoarVM:

[13:14] <Geth> Â¦ MoarVM: This reverts commit db23381f695d5e477052d0973ed1107ab57a1615.

[13:14] <Geth> Â¦ MoarVM:

[13:14] <Geth> Â¦ MoarVM: Apparently these templates were actually victims - probably of the broken

[13:14] <Geth> Â¦ MoarVM: trunc templates.

[13:14] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8c67e1697e

[13:25] *** Ven`` joined
[13:26] *** p6bannerbot sets mode: +v Ven``

[13:28] *** brrt joined
[13:29] *** p6bannerbot sets mode: +v brrt

[13:43] *** zakharyas joined
[13:43] *** p6bannerbot sets mode: +v zakharyas

[13:45] *** Ven`` left
[13:59] *** brrt left
[14:01] <timotimo> here's an interesting thing

[14:01] <timotimo> timing-attack resistant string comparison

[14:01] <timotimo> hm, we might be able to do that with eqat

[14:14] <lizmat> nine: does the revert imply that we have a borked Moar on master Rakudo ?

[14:23] <dogbert11> using some trickery it was finally possible to repro the 'Deuplicate label' bug, this time on a 64 bit system

[14:24] <dogbert11> looks like this: https://gist.github.com/dogbert17/c42ad0f84fdc4f0e81ff2e3bda3e3ce5

[14:32] *** domidumont1 joined
[14:33] *** p6bannerbot sets mode: +v domidumont1

[14:36] *** domidumont left
[14:55] *** Ven`` joined
[14:55] *** p6bannerbot sets mode: +v Ven``

[15:49] *** Ven`` left
[15:54] *** Ven`` joined
[15:55] *** p6bannerbot sets mode: +v Ven``

[16:13] *** domidumont1 left
[16:24] *** robertle left
[17:11] *** robertle joined
[17:12] *** p6bannerbot sets mode: +v robertle

[17:41] *** Ven`` left
[17:52] *** leont joined
[17:52] *** p6bannerbot sets mode: +v leont

[17:58] *** Ven`` joined
[17:59] *** p6bannerbot sets mode: +v Ven``

[18:04] *** Ven`` left
[18:19] *** domidumont joined
[18:19] *** p6bannerbot sets mode: +v domidumont

[19:03] *** zakharyas left
[19:55] *** Ven`` joined
[19:56] *** p6bannerbot sets mode: +v Ven``

[19:59] *** Ven`` left
[20:26] *** domidumont left
[20:38] *** robertle left
[21:13] *** brrt joined
[21:14] *** p6bannerbot sets mode: +v brrt

[21:19] <brrt> \o

[21:19] <brrt> any big fallout from my recent merges?

[21:25] <lizmat> no spectest fallout, even without nine's revert

[21:34] <brrt> :-)

[21:34] <brrt> that's good to hear

[21:35] <brrt> I'm thinking of buying a new laptop. Any advice?

[21:35] <brrt> It's not going to be a macbook

[21:35] <jnthn> Are there laptops other than macbooks and thinkpads? :P

[21:35] <lizmat> brrt: I have no idea...

[21:37] <timotimo> i've been drooling over the google pixel slate, but it's not available in germany, and possibly not in the netherlands either, and i'm not sure if it's the kind you would want

[21:37] <jnthn> I guess by now nearly everything is SSD, and the only other advice is "no, the amount of RAM you think is enough never will be" :)

[21:37] <timotimo> oh yes, get 32 gigs, or you'll regret it

[21:38] <timotimo> well, ok, i'm currently stuck with 4 gigs, so even 8 would be a relief ...

[21:40] * lizmat is stuck at 16G  :-)

[21:41] <brrt> thinkpads are kind of expensive...

[21:41] <brrt> most laptops are still 8G

[21:44] <timotimo> do you have any specific requirements? like, if you want to do cuda/openCL/machine learning you'll definitely want a discrete gpu in there, but probably not :)

[21:47] <brrt> I have a project for which I want to apply some machine learning... but I don't want to have to install nvidia drivers

[21:48] <timotimo> i guess that's fair

[21:48] <timotimo> can always rent a gpu vm somewhere

[21:49] <brrt> i need a bunch of memory for java work that I'm doing

[21:49] <brrt> I'm always oscillating between 'java makes sense and is alright' and 'I hate everything about java'

[21:49] <brrt> for instance, much of the JVM is sanely designed

[21:50] <brrt> Actually, the only real problem I have is that people treat it like a nicer C++, whereas it's really a less-nice perl that runs a bit faster

[21:51] <timotimo> i've got a 2d cellular automaton piece of code that currently just replaces each cell's value with the value of the cell to the bottom-right of it, and that gives me between 75 and 115 frames per second for a 320x240 cells grid (including rendering)

[21:51] <brrt> is that perl6?

[21:52] <timotimo> yes

[21:52] <brrt> that's not so bad

[21:52] <timotimo> otherwise it'd be a lot faster ;)

[21:52] <brrt> hehehehe

[21:52] <timotimo> also, it's rather verbose code

[21:52] <timotimo> now i want to have "for every row, change which direction it takes the value from)

[21:52] <timotimo> s/\)$/"/

[21:52] <timotimo> but the "super clever way" didn't do it :|

[21:53] <brrt> I sometimes wonder, in a very unofficial capacity at that, what a vm would look like that was designed to use a JIT from the ground up

[21:53] <brrt> things I'd do:

[21:53] <brrt> - have an assembly-language intepreter

[21:53] <timotimo> oh lord

[21:53] <timotimo> this is amazing

[21:53] <brrt> - have much smaller string ops, and put much more responsibility on the caller for their usability

[21:54] <brrt> btw, what's the super clever way

[21:54] <timotimo> my $interested := ($up-left, $up-mid, $up-right, ...).pick

[21:54] <timotimo> i had to use my $interested := ($up-left, $up-mid, $up-right, ...)[^8 .pick] instead

[21:55] <timotimo> that could perhaps be considered a bug

[21:55] <timotimo> that it deconts somewhere in there

[21:55] <brrt> the reason an assembly-language inteprreter is nice is that it allows you to sync the representation for the JIT and the interpreter

[21:55] <brrt> which is otherwise really hard

[21:56] <timotimo> uploading a gif right now

[21:57] <timotimo> https://i.imgur.com/pvsQLPg.gifv

[22:00] *** dogbert21 joined
[22:00] *** p6bannerbot sets mode: +v dogbert21

[22:02] *** dogbert2_ left
[22:07] <brrt> that's pretty cool

[22:08] <timotimo> i've just made it cooler, but also surprised myself

[22:10] <timotimo> https://i.imgur.com/N6PUFa4.gifv

[22:11] <timotimo> oh, i know what's going wrong

[22:13] <timotimo> since i'm immediately rewriting the current cell's value, if things are trying to move down-right, they'll just immediately always read the earlier value and it just propagates through the entire cell

[22:13] <timotimo> same with downwards or rightwards

[22:13] <timotimo> i'll have to double-buffer these rows

[22:28] <timotimo> uploading the workingv ersion

[22:37] <timotimo> https://i.imgur.com/uy3Kves.gifv

[22:37] <timotimo> i forgot to actually put the link here

[22:37] *** brrt left
[23:15] <timotimo> cool, pulling that list of variables out of the loop makes it a bunch faster, even though it only does it every 80 rows * columns

[23:15] <timotimo> not an absolute bunch

[23:15] <timotimo> just a little bunch

[23:55] <timotimo> removing the printing of time for both steps made it faster, or at least it feels like it

[23:56] <timotimo> a "perf record" for some reason outputs a whole lot of MVM_interp_run

