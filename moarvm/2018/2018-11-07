[00:00] *** lizmat joined
[00:00] *** p6bannerbot sets mode: +v lizmat

[00:23] *** fake_space_whale left
[00:24] *** MasterDuke joined
[00:24] *** p6bannerbot sets mode: +v MasterDuke

[00:24] *** MasterDuke left
[00:24] *** MasterDuke joined
[00:24] *** herbert.freenode.net sets mode: +v MasterDuke

[00:24] *** p6bannerbot sets mode: +v MasterDuke

[00:47] *** Kaiepi left
[00:48] *** Kaiepi joined
[00:49] *** p6bannerbot sets mode: +v Kaiepi

[02:44] <MasterDuke> jnthn, samcv, etc: https://forums.swift.org/t/string-s-abi-and-utf-8/17676 some interesting info about changes to how swift handles string

[03:32] *** MasterDuke left
[03:55] <samcv> thanks, will check it out

[04:02] *** colomon joined
[04:02] *** colomon left
[06:12] *** lizmat left
[06:53] *** domidumont joined
[06:54] *** p6bannerbot sets mode: +v domidumont

[07:31] *** robertle joined
[07:32] *** p6bannerbot sets mode: +v robertle

[08:07] *** domidumont left
[08:07] *** domidumont joined
[08:08] *** p6bannerbot sets mode: +v domidumont

[08:35] *** zakharyas joined
[08:36] *** p6bannerbot sets mode: +v zakharyas

[08:43] *** lizmat joined
[08:43] *** p6bannerbot sets mode: +v lizmat

[09:17] <nwc10> They write of UTF-8 (particularly in reverse) "But, this isnâ€™t really an issue: on modern CPUs this increase in encoding complexity is more than offset by the decrease in model complexity by having a unified storage representation."

[09:18] <nwc10> but I wonder how much of that "faster" is comparision with "ASCII or UTF-16" (where the latter is still variable width)

[09:18] <nwc10> and how much their benchmarks (and use cases) are about linearly acessing strings, not index-based lookups which I *think* are needed by regex engines

[09:34] *** robertle left
[09:36] *** robertle joined
[09:37] *** p6bannerbot sets mode: +v robertle

[09:46] *** robertle left
[09:49] *** robertle joined
[09:50] *** p6bannerbot sets mode: +v robertle

[10:30] <nine> Why is the information about which of an op's arguments need to be deconted an argument to the add_core_moarop_mapping method? It's a static property of the op. Wouldn't that belong in oplist instead? Same for $ret which is information about which argument will be written to.

[11:18] <nine> And an even more heretical question: why do we type registers? In memory, a register can hold anything. It's really the interpretation by the ops that turns anything into something. So why can't we have a register holding an int and later on an object when it's not needed anymore for the int?

[12:16] *** zakharyas left
[12:38] <timotimo> because the GC has to go through a frame and add only object and string registers to worklists

[12:38] <timotimo> otherwise an integer or num will cause segfaults if it lives in an object or string register

[12:39] <timotimo> and which arguments want to have a decont applied to them is, to me, more an nqp language thing

[12:47] <nine> Ah, ok, the GC explains that of course.

[12:49] <nine> The point of the decont question is really: if we move that information to oplist, I can generate better tailored code for qast to mbc compilation of every op that goes through moarop_mapper

[12:50] <timotimo> interesting

[12:50] <nine> A different approach would be to generate and compile a QAST tree for those mapper functions instead of having update_ops.pl6 generate the source code

[13:42] *** zakharyas joined
[13:43] *** p6bannerbot sets mode: +v zakharyas

[14:37] *** domidumont left
[14:53] *** domidumont joined
[14:53] *** p6bannerbot sets mode: +v domidumont

[15:18] *** domidumont1 joined
[15:19] *** p6bannerbot sets mode: +v domidumont1

[15:21] *** domidumont left
[16:15] *** fake_space_whale joined
[16:16] *** p6bannerbot sets mode: +v fake_space_whale

[16:36] *** fake_space_whale left
[16:48] *** fake_space_whale joined
[16:49] *** p6bannerbot sets mode: +v fake_space_whale

[17:02] *** robertle left
[17:18] <timotimo> do we perhaps want an attribute trait "is not_serialized" so that we can make an NFA's list version of itself turn to null when it's deserialized?

[17:19] <timotimo> statelist*

[17:19] <timotimo> not for end users, of course

[17:21] <timotimo> it's an exquisite footgun for sure

[17:33] <dogbert11> Bytecode validation error at offset 74, instruction 13: operand type 48 does not match register type 160 # hmm

[17:34] <dogbert11> when trying to build nqp b8ecfa43. Building newer versions lead to the entire build process hanging (on 32 bit).

[17:36] <timotimo> the last time someone had something like that, something like nuking the install folder helped

[18:05] *** zakharyas left
[18:07] *** zakharyas joined
[18:08] *** p6bannerbot sets mode: +v zakharyas

[18:24] *** robertle joined
[18:25] *** p6bannerbot sets mode: +v robertle

[18:40] *** domidumont1 left
[18:50] *** zakharyas left
[19:44] *** fake_space_whale left
[20:14] *** zakharyas joined
[20:14] *** p6bannerbot sets mode: +v zakharyas

[20:47] *** SmokeMachine left
[20:48] *** SmokeMachine joined
[20:48] *** p6bannerbot sets mode: +v SmokeMachine

[20:48] *** chansen___ left
[20:50] *** chansen___ joined
[20:50] *** p6bannerbot sets mode: +v chansen___

[21:08] *** TimToady left
[21:16] *** TimToady joined
[21:16] *** p6bannerbot sets mode: +v TimToady

[22:01] *** zakharyas left
[22:05] *** robertle left
