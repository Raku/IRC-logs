[00:04] *** MasterDuke joined
[02:56] *** ilbot3 joined
[06:37] *** bisectable6 joined
[06:37] *** statisfiable6 joined
[06:39] *** domidumont joined
[06:39] *** brrt joined
[06:39] <brrt> good * #moarvm

[06:41] *** jsimonet joined
[06:42] *** wictory[m] joined
[06:43] *** FROGGS joined
[06:46] *** domidumont joined
[07:15] *** brrt1 joined
[07:34] *** bloatable6 joined
[07:41] *** domidumont joined
[07:44] *** brrt joined
[07:46] <Geth> ¦ MoarVM: 38eb2bdfc5 | (Bart Wiegmans)++ | src/jit/core_templates.expr

[07:46] <Geth> ¦ MoarVM: [JIT] Add ishash template

[07:46] <Geth> ¦ MoarVM:

[07:46] <Geth> ¦ MoarVM: Note that the sizeof(ID) == 4, not 8, and so this would naively give

[07:46] <Geth> ¦ MoarVM: rise to a CAST, which isn't implemented yet (although it could be).

[07:46] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/38eb2bdfc5

[08:13] *** AlexDaniel joined
[08:14] *** reportable6 joined
[08:16] *** zakharyas joined
[08:18] *** reportable6 joined
[08:19] *** zakharyas joined
[08:20] *** reportable6 joined
[08:28] *** robertle joined
[08:38] *** reportable6 joined
[08:38] *** releasable6 joined
[08:39] *** nativecallable6 joined
[08:39] *** squashable6 joined
[08:48] *** squashable6 joined
[08:48] *** reportable6 joined
[09:20] *** brrt joined
[09:30] *** zakharyas joined
[09:35] *** coverable6 joined
[10:01] *** AlexDaniel joined
[12:02] *** brrt joined
[12:11] <brrt> good *

[12:13] <MasterDuke> brrt: that was a simple fix for ishash

[12:13] <brrt> yeah

[12:14] <brrt> casting-while-loading is possible, but not yet implemented

[12:14] <brrt> i'd probably best disable that tile entirely

[12:14] <brrt> or implement it :-)

[12:16] <MasterDuke> if it's implemented, could that template be shortened to what i tried first?

[12:17] <MasterDuke> something like (flagval ...) instead of (if ... (const 0) (const 1))

[12:20] <brrt> oh, no, that needs some more

[12:20] <brrt> specifically, that needs to be recompiled to the (if .. ) form, because, flagval of ALL is not a thing, this is because ALL is a short-circuiting operator

[12:21] <brrt> i maybe should rewrite that to all:

[12:21] <brrt> and 'any:'

[12:21] <brrt> and implement my (COND) operator change

[12:21] <MasterDuke> rewrite flagval?

[12:22] <brrt> yeah, automatically convert (flagval (any …)) and (flagval (all …)) to an (if (flagval (any ..)) (const 1) (const 0)) expression

[12:23] <MasterDuke> cool

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: e886a98112 | (Bart Wiegmans)++ | src/spesh/optimize.c

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: [Spesh] remove object boolification from optimize_iffy

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy:

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: Optimiziing object boolification in optimize_iffy is the same as it

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: would be in optimize_istrue_isfalse, so it makes more sense (to me) to

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: have it performed there.

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: review: https://github.com/MoarVM/MoarVM/commit/e886a98112

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: 97c75fd12b | (Bart Wiegmans)++ | src/spesh/optimize.c

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: [Spesh] Optimize known values for istrue

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy:

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: Original optimize_iffy tried to optimize for known object values, but

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: we can make optimize_istrue_isfalse do the same thing.

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: Doesn't seem to happen very often, though.

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: review: https://github.com/MoarVM/MoarVM/commit/97c75fd12b

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: 221d43bb16 | (Bart Wiegmans)++ | src/spesh/optimize.c

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: [Spesh] optimize more cases of istrue known type

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy:

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: These were implemented for optimize_iffy but not for

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: optimize_istrue_isfalse, even though they are the same kind of

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: boolification.

[12:25] <Geth> ¦ MoarVM/spesh-refactor-iffy: review: https://github.com/MoarVM/MoarVM/commit/221d43bb16

[12:31] <MasterDuke> brrt: btw, is this https://irclog.perlgeek.de/moarvm/2018-02-07#i_15790891 still what's needed to be done for sp_findmeth?

[12:33] <brrt> lemmecheck

[12:33] <brrt> oh, yes

[12:33] <brrt> and the main reason we can't do the invoksih check internally is that then, we don't respect the flushing in the expr template builder

[12:34] <brrt> i.e. you could 'hardcode' an invokish check by (guard … control_throwish_pre control_invokish)

[12:34] <brrt> and that would *work*, but in the invokish code, we need to ensure that the values in memory are consistent with what the interpreter believes should be in there

[12:35] <brrt> i.e.values need 'flushing'

[12:35] <MasterDuke> ah, sounds a little more complicated

[12:35] <brrt> currently, if the expr template builder finds a invokish op (at the MoarVM level), it adds the guard itself and executes the flushing

[12:35] <brrt> but that won't happen if we don't mark it as invokish and do it ourselves

[12:48] <MasterDuke> is the problem with prepargs similar?

[13:45] *** quotable6 joined
[13:49] *** zakharyas joined
[13:51] *** zakharyas joined
[13:59] <brrt> no, prepargs just plain shouldn't be expr-jitted

[14:06] <MasterDuke> brrt: ah, then maybe this comment should be removed/changed somehow? https://github.com/MoarVM/MoarVM/blob/master/src/jit/core_templates.expr#L89-L93

[14:06] <brrt> no, that is still correct :-)

[14:07] <brrt> should maybe be clarified

[14:08] <MasterDuke> the way it reads to me right now is that the prepargs template could be uncommented if templates for arg_* and invoke_* are written, not that it shouldn't be done at all

[14:09] <brrt> ah, yeah

[14:10] <MasterDuke> also, i was trying to think of a good way to organize core_templates.expr. some sort of logical grouping? alphabetically? same order as interp.c?

[14:11] <brrt> hmm

[14:11] <brrt> same order maybe

[14:12] <MasterDuke> that's where i was leaning also

[14:33] <MasterDuke> brrt: can i CAST from any representation to another?

[14:33] <MasterDuke> coerce_in is just `(MVMnum64)GET_REG(cur_op, 2).i64`

[14:37] <brrt> no, floating point support is NYI

[14:37] <brrt> pending an answer whether I can access floating point (XMM0) registers as easily as the regular register set

[14:37] <brrt> cast is only from smaller to larger numbers

[14:42] <MasterDuke> ok

[15:29] *** Kaiepi joined
[15:54] *** AlexDaniel joined
[16:11] *** brrt joined
[16:13] <brrt> i'm seeing an error in my patch to iffy

[16:18] *** brrt1 joined
[16:19] *** brrt joined
[16:33] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #816: More templates to the eleventeenth power

[16:33] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/816

[16:37] *** FROGGS joined
[16:50] *** Kaiepi joined
[16:56] <timotimo> MasterDuke: travis seems really rather unhappy about your templates

[17:00] <MasterDuke> `P6opaque: no such attribute '$!clone_callback' on type NQPMu in a NQPMu when trying to bind a value    at gen/moar/stage2/NQP.nqp:434  (src/vm/moar/stage0/nqp.moarvm:create_code)`

[17:00] <MasterDuke> never seen that before

[17:00] *** zakharyas joined
[17:01] <MasterDuke> works locally on both my laptop and desktop

[17:05] *** zakharyas joined
[17:08] <timotimo> it's probably just exploding on the almost first frame it jits

[17:20] <MasterDuke> ugh, rebuilt moarvm and still nqp and rakudo build fine for me

[17:21] <MasterDuke> timotimo: you mind trying out that branch on your machine?

[17:26] *** dogbert17 joined
[17:47] *** geospeck joined
[18:00] *** geospeck joined
[18:05] *** geospeck left
[18:08] <MasterDuke> .tell brrt travis and appveyor are showing `P6opaque: no such attribute '$!clone_callback' on type NQPMu in a NQPMu when trying to bind a value    at gen/moar/stage2/NQP.nqp:434  (src/vm/moar/stage0/nqp.moarvm:create_code)` for https://github.com/MoarVM/MoarVM/pull/816

[18:08] <yoleaux> MasterDuke: I'll pass your message to brrt.

[18:08] <MasterDuke> .tell brrt but i don't get that locally. any thoughts?

[18:08] <yoleaux> MasterDuke: I'll pass your message to brrt.

[18:12] *** domidumont joined
[18:31] <timotimo> fwiw, it also doesn't crash for me

[18:36] <MasterDuke> huh

[18:37] <MasterDuke> that's good i guess?

[18:37] <timotimo> super weird

[19:34] <nine> samcv: haha, I correctly guessed that you submitted your PR to nom instead of master :) Though before I read the commit summaries, I was quite shocked by how many commits there were ;)

[19:34] <samcv> ;)

[19:35] *** releasable6 joined
[20:11] *** domidumont joined
[20:20] *** brrt joined
[20:21] *** Kaiepi joined
[20:31] *** FROGGS joined
[20:32] <brrt> .

[20:32] <yoleaux> 18:08Z <MasterDuke> brrt: travis and appveyor are showing `P6opaque: no such attribute '$!clone_callback' on type NQPMu in a NQPMu when trying to bind a value    at gen/moar/stage2/NQP.nqp:434  (src/vm/moar/stage0/nqp.moarvm:create_code)` for https://github.com/MoarVM/MoarVM/pull/816

[20:32] <yoleaux> 18:08Z <MasterDuke> brrt: but i don't get that locally. any thoughts?

[20:32] <brrt> haven't tried myself

[20:40] <brrt> ideally, though, we would bisect that to the breaking template, and then to the breaking frame :-)

[20:41] <MasterDuke> brrt: can we have travis do that somehow?

[20:42] <brrt> dunno

[20:42] <brrt> but i suspect if we know the env that travis runs it in, we'll be able to replicate

[20:43] <MasterDuke> ubuntu 14.04, gcc 4.8.4

[20:43] <MasterDuke> i have gcc 7.2.0 locally

[20:45] <MasterDuke> but there is 4.8.5 in the repos, i could try installing and testing with that

[20:47] <brrt> oh, that's old

[20:47] <brrt> anyway, just a nitpick

[20:47] <brrt> (flagval (nz ...))

[20:47] <brrt> that's just the result of whatever was in nz

[20:48] <MasterDuke> huh, a moar built with 4.8.5 just compiled nqp fine locally

[20:48] <MasterDuke> so you mean i could drop the flagval?

[20:49] <brrt> and the nz

[20:49] <brrt> i think

[20:50] <MasterDuke> huh. then could these (e.g., `(template: gt_i (flagval (gt $1 $2)))`) be simplified?

[20:51] <brrt> no, that one couldn't

[20:51] <MasterDuke> and rakudo built fine also

[20:52] <brrt> you're still not ubuntu 14.04 though

[20:52] <brrt> the flagval of nz is just the value itself, i mean

[20:52] <MasterDuke> wait, why not gt?

[20:52] <brrt> gt_i returns an integer

[20:53] <brrt> that is its return value

[20:53] <brrt> hence the flagval is needed

[20:53] <brrt> the result of (call) to MVM_string_equal is always already an integer :-)

[20:54] <brrt> (i see that you have (flagval (zr ...)) so that would be spelled (not ...)

[20:54] <brrt> anyway, doesn't matter that much

[20:56] <MasterDuke> ok, good to knwo

[20:57] <brrt> the real reason is that, according to the expr jit type system, gt, lt, le, eq etc, but also 'all' and 'any' return a 'flag'

[20:58] <brrt> which means in practice that they ought to be useable by a conditional operation (like conditional jumps)

[20:58] <brrt> and on x86-64 that they update the 'rflags' register in a predictable way

[20:58] <brrt> so they don't return a 'true' value per se

[20:59] <MasterDuke> nz and zr do too (at least according to https://github.com/MoarVM/MoarVM/blob/master/docs/jit/overview.org )

[20:59] <brrt> that's why flagval exists, to convert the result into an integer value

[21:01] <MasterDuke> btw, any ideas for finding the problem other than spinning up an ubuntu 14.04 vm and if it break in there, running jit-bisect?

[21:10] <brrt> nope, not mee

[21:10] <brrt> me

[21:10] <brrt> we can either replicate it or we can't

[21:10] <brrt> but we'd probably best not merge it until we can replicate it

[21:51] *** mst joined
[22:10] <MasterDuke> yeah, it'll throw off all subsequent travis results

[22:10] <MasterDuke> if nobody has any better ideas soon i'll try and spin up a vm and test there

[22:16] <samcv> how do I GC mark an item in a struct?

[22:16] <samcv> See jnthn's comment here https://github.com/MoarVM/MoarVM/pull/815#discussion-diff-173675573R40

[22:18] <brrt> uhm, i'm guessing that means add it to the worklist in the associated REPR's gc_mark function

[22:19] <samcv> hmm i'm not sure where that would be

[22:23] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/03/12/2018-11-lockless-gems/

[22:24] <brrt> samcv: 6model/reprs/Decoder.c (I'm guessing really)

[22:24] <brrt> lizmat++

[22:31] *** notable6 joined
[22:41] <brrt> heh, commenting out the optimize_isconcrete in optimize_istrue_isfalse unbreaks rakudo

[22:46] <Geth> ¦ MoarVM/spesh-refactor-iffy: 0b0db780ab | (Bart Wiegmans)++ | src/spesh/optimize.c

[22:46] <Geth> ¦ MoarVM/spesh-refactor-iffy: [Spesh] unbreak rakudo by not optimizing isconcrete in istrue

[22:46] <Geth> ¦ MoarVM/spesh-refactor-iffy:

[22:46] <Geth> ¦ MoarVM/spesh-refactor-iffy: This can reduce the isconcrete to a constant value, which is cool, but

[22:46] <Geth> ¦ MoarVM/spesh-refactor-iffy: which seems to break rakudo CORE.setting building under conditions:

[22:46] <Geth> ¦ MoarVM/spesh-refactor-iffy:

[22:46] <Geth> ¦ MoarVM/spesh-refactor-iffy: MVM_SPESH_OSR_DISABLE=1

[22:46] <Geth> ¦ MoarVM/spesh-refactor-iffy: MVM_SPESH_INLINE_DISABLE=1

[22:46] <Geth> ¦ MoarVM/spesh-refactor-iffy: <…commit message has 7 more lines…>

[22:46] <Geth> ¦ MoarVM/spesh-refactor-iffy: review: https://github.com/MoarVM/MoarVM/commit/0b0db780ab

[22:46] <brrt> that's enough for a day

[22:50] *** nativecallable6 joined
[22:50] *** coverable6 joined
[22:50] *** greppable6 joined
[22:50] *** quotable6 joined
[23:15] *** bisectable6 joined
[23:16] *** squashable6 joined
[23:16] *** greppable6 joined
[23:16] *** quotable6 joined
[23:16] *** greppable6 joined
[23:16] *** quotable6 joined
[23:16] *** greppable6 joined
[23:16] *** quotable6 joined
[23:32] *** brrt joined
