[00:01] *** lizmat joined
[00:01] *** p6bannerbot sets mode: +v lizmat

[02:06] *** Kaiepi left
[02:07] *** Kaiepi joined
[02:07] *** p6bannerbot sets mode: +v Kaiepi

[02:34] *** saigel_ joined
[02:38] *** saigel_ left
[02:51] *** fake_space_whale left
[03:13] *** kurbasUB joined
[03:13] *** kurbasUB left
[03:14] *** grim_radical joined
[03:14] *** grim_radical left
[04:03] *** Zoffix joined
[04:03] *** p6bannerbot sets mode: +v Zoffix

[04:33] <Zoffix> New blog post: "A Request to Larry Wall to Create a Language Name Alias for Perl 6": https://perl6.party/post/A-Request-to-Larry-Wall-to-Create-a-Language-Name-Alias-for-Perl-6

[04:46] *** Zoffix left
[05:03] *** kc2uez joined
[05:03] *** p6bannerbot sets mode: +v kc2uez

[05:05] *** kc2uez left
[05:47] *** TimToady left
[06:01] *** dwellerqS joined
[06:01] *** dwellerqS left
[06:32] *** TimToady joined
[06:32] *** p6bannerbot sets mode: +v TimToady

[06:49] *** domidumont joined
[06:50] *** p6bannerbot sets mode: +v domidumont

[07:06] *** mingus joined
[07:07] *** p6bannerbot sets mode: +v mingus

[07:08] *** mingus left
[09:29] <lizmat> .tell jnthn s/construts/constructs/

[09:29] <yoleaux> lizmat: I'll pass your message to jnthn.

[09:57] *** brrt joined
[09:58] *** p6bannerbot sets mode: +v brrt

[09:58] <brrt> \o

[10:06] <Kaiepi> o/

[10:07] <brrt> ohai Kaiepi

[10:07] <brrt> I think you have some PRs open right

[10:07] <Kaiepi> yeah

[10:08] <Kaiepi> they're not quite finished yet

[10:08] <brrt> ok :-)

[10:08] <timotimo> what was the last status of the investigation into the problem with asyncsocket?

[10:09] <brrt> I may have the ivnoke sequence almost ported to the expr jit

[10:10] <timotimo> ooooh

[10:11] <brrt> was simpler than expected actually

[10:11] <brrt> it may be fathers' pride, it may be stockholm syndrome, but I kind of feel like the expr JIT language is not so bad....

[10:12] <Kaiepi> i'm working on making it so fds are immediately available to both servers and clients as opposed to what i had finished before timo

[10:13] <Kaiepi> moar wasn't too bad to get working, but rakudo needs a lot of refactoring

[10:44] *** brrt left
[11:10] *** robertle joined
[11:10] *** p6bannerbot sets mode: +v robertle

[11:49] <timotimo> cool

[12:16] *** lizmat left
[12:18] *** lizmat joined
[12:18] *** p6bannerbot sets mode: +v lizmat

[14:28] *** lizmat left
[14:39] *** Kaiepi left
[14:40] *** Kaiepi joined
[14:41] *** p6bannerbot sets mode: +v Kaiepi

[15:20] *** buggable joined
[15:20] <Geth> ¦ MoarVM/nqp-mbc: 2f6b37e8f3 | (Stefan Seifert)++ | lib/MAST/Nodes.nqp

[15:20] <Geth> ¦ MoarVM/nqp-mbc: Get rid of the remaining MAST nodes - bytecode is now written directly

[15:20] <Geth> ¦ MoarVM/nqp-mbc: review: https://github.com/MoarVM/MoarVM/commit/2f6b37e8f3

[15:20] <Geth> ¦ MoarVM/nqp-mbc: 2bcd8f389c | (Stefan Seifert)++ | 2 files

[15:20] <Geth> ¦ MoarVM/nqp-mbc: Make bytecode dumper more resilient against invalid bytecode

[15:20] <Geth> ¦ MoarVM/nqp-mbc: review: https://github.com/MoarVM/MoarVM/commit/2bcd8f389c

[15:21] *** p6bannerbot sets mode: +v buggable

[15:32] *** fake_space_whale joined
[15:33] *** p6bannerbot sets mode: +v fake_space_whale

[15:51] *** lizmat joined
[15:51] *** p6bannerbot sets mode: +v lizmat

[15:54] <nine> So now that this thing is working correctly, I just need to shave off some 10s to get it competitive

[15:55] <lizmat> nine: want me to look at some code ?

[15:58] <timotimo> it'll probably also be interesting to read the spesh output

[15:58] <timotimo> like, does nqp turn every number into a float and then into an int? :P

[15:59] <nine> First I need to get rid of a lot of instruction list assembly. They are not used any more but I tried to keep the changes as small as possible. They still were large enough.

[16:00] <timotimo> that does sound like a potential win

[16:02] <nine> lizmat: I'll be sure to invoke the lizmat once I'm through with my plan :)

[16:11] <jnthn> nine: Did you add the new MoarVM ops for writing binary data efficiently? :)

[16:11] <jnthn> nine++ for getting it this far already :D

[16:11] <nine> jnthn: the ones I needed, yes

[16:12] <nine> Though they can be further optimized for sure

[16:13] <jnthn> Yeah, I was thinking of the integer ones, which'd avoid a bunch of bitshifting :)

[16:18] <nine> Well writenum was even necessary because I had no idea how to implement that one in NQP

[16:52] <jnthn> nine: btw, if not yet winning on speed, I'd expect your branch might already win on memory :)

[16:53] <jnthn> (since it's not constructing a giant tree)

[17:35] <timotimo> .o( borealectomy )

[17:35] <nine> I'd guess so, yes :)

[17:53] <lizmat> .oO( nine - the borealectomy guy )

[17:57] <nine> That....is so not my usual stance on trees :D

[17:58] <lizmat> yet, perl 5 is known for its Swiss Army Chainsaw   :-)

[18:03] *** MasterDuke joined
[18:03] *** p6bannerbot sets mode: +v MasterDuke

[18:03] *** MasterDuke left
[18:03] *** MasterDuke joined
[18:03] *** herbert.freenode.net sets mode: +v MasterDuke

[18:03] *** p6bannerbot sets mode: +v MasterDuke

[18:21] *** ggoebel left
[18:36] *** ggoebel joined
[18:37] *** p6bannerbot sets mode: +v ggoebel

[18:41] *** brrt joined
[18:42] *** p6bannerbot sets mode: +v brrt

[18:44] <brrt> \o

[19:15] *** domidumont left
[19:36] <jnthn> o/

[19:40] *** MasterDuke left
[19:41] <brrt> I may have fixed the prepargs sequence

[19:45] <lizmat> whee!

[19:46] <lizmat> that should help a lot with speed, no ?

[19:46] <brrt> no :-P

[19:47] <brrt> well, it could help a little, but I don't expect it to

[19:47] <brrt> look to jnthn++ for things that have to go faster :-P

[19:47] <lizmat> but it is nice to have anyway, right?  otherwise , why do it ?

[19:48] <brrt> two reasons

[19:48] <brrt> - to solve a bug in which an inline_end annotation was moved to a prepargs, where we'd allocate a label for it but not emit it (because the legacy JIT didn't handle annotations in the invoke sequence)

[19:50] <jnthn> lizmat: fwiw, this is - as I understand it - bug fixing, and separate from brrt++'s work on getting invocation handled in the expression JIT, which does indeed have potential for a bit of a speedup

[19:50] <lizmat> aha!  :-)  ok

[19:53] <brrt> - and also just to get rid of legacy complexity

[19:54] *** AlexDaniel left
[19:54] *** AlexDaniel joined
[19:55] *** p6bannerbot sets mode: +v AlexDaniel

[20:06] <lizmat> m: role A { multi method a { ... } }; A.^pun   # jnthn, is that expected ?

[20:06] <camelia> rakudo-moar 8bb34ff07: OUTPUT: «Multi method 'a' with signature :(A: *%_) must be implemented by A because it is required by a role␤  in block <unit> at <tmp> line 1␤␤»

[20:06] <lizmat> ah, I guess it is...  duh

[20:07] <lizmat> afk for half an hour or so

[20:07] <jnthn> Yes :)

[20:09] * brrt afk

[20:16] *** brrt left
[20:41] <nine> With a rather unscientific measurement I got 1.256G of RAM peak usage during settings compilation on nqp-mbc

[21:19] *** AlexDaniel left
[21:19] *** robertle left
[21:20] *** AlexDaniel joined
[21:20] *** p6bannerbot sets mode: +v AlexDaniel

[21:54] <japhb> nine: Compared to ...?

[22:05] *** dogbert21 joined
[22:05] *** dogbert21 left
[22:05] *** dogbert2_ left
[22:13] *** lizmat left
[23:01] *** lizmat joined
[23:01] *** p6bannerbot sets mode: +v lizmat

[23:24] *** MasterDuke joined
[23:24] *** p6bannerbot sets mode: +v MasterDuke

[23:28] *** MasterDuke left
[23:28] *** MasterDuke joined
[23:28] *** herbert.freenode.net sets mode: +v MasterDuke

[23:28] *** p6bannerbot sets mode: +v MasterDuke

