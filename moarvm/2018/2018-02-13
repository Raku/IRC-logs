[00:13] *** mtj_ joined
[01:24] <samcv> releasable6: status

[01:24] <releasable6> samcv, Next release in 4 days and ≈17 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[01:24] <releasable6> samcv, Details: https://gist.github.com/f921fe36733106bd17368ca906b5f760

[01:51] *** nativecallable6 joined
[02:57] *** ilbot3 joined
[06:13] *** releasable6 joined
[07:05] *** brrt joined
[07:07] <brrt> good * #moarvm

[07:34] <nwc10> jnthn++ # cf523c89c06a0f480ec43a8adbc54d0ff453ebee

[07:52] <samcv> good * br

[08:15] *** brrt joined
[08:51] *** zakharyas joined
[09:36] *** reportable6 joined
[10:39] *** zakharyas joined
[11:03] *** brrt joined
[11:05] *** brrt joined
[11:23] *** zakharyas joined
[11:33] *** brrt joined
[11:49] *** zakharyas joined
[12:05] *** zakharyas joined
[12:24] *** notable6 joined
[12:45] <timotimo> i just checked and it looks like travis machines have 2 cores actually

[12:45] <timotimo> we should be running our travis jobs with at least -j2 on the makefile

[12:48] <Geth> ¦ MoarVM: c512dce8e9 | (Timo Paulssen)++ | .travis.yml

[12:48] <Geth> ¦ MoarVM: travis: use 2 cores for compilation and tests

[12:48] <Geth> ¦ MoarVM:

[12:48] <Geth> ¦ MoarVM: it looks like travis virtual machines usually

[12:48] <Geth> ¦ MoarVM: have 2 cores available.

[12:48] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c512dce8e9

[12:48] <timotimo> let's see how that helps

[13:02] *** travis-ci joined
[13:02] <travis-ci> MoarVM build failed. Timo Paulssen 'travis: use 2 cores for compilation and tests

[13:02] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/340930988 https://github.com/MoarVM/MoarVM/compare/a01cdb449c96...c512dce8e91c

[13:02] *** travis-ci left
[13:28] *** lizmat joined
[13:39] <dogbert2> jnthn: there's at least one GC related bug left in case you're interested: https://github.com/MoarVM/MoarVM/issues/620

[13:39] <timotimo> oh, haha

[13:40] <timotimo> the semaphore test case doesn't work if there's not enough cores i guess

[13:40] <timotimo> it doesn't even seem to save that much time

[13:42] <Geth> ¦ MoarVM: 1c79ca35d4 | (Timo Paulssen)++ | .travis.yml

[13:42] <Geth> ¦ MoarVM: set test jobs back to 1

[13:42] <Geth> ¦ MoarVM:

[13:42] <Geth> ¦ MoarVM: the semaphore test in nqp seems to flap if only

[13:42] <Geth> ¦ MoarVM: two cores are available but one of the cores is

[13:42] <Geth> ¦ MoarVM: busy running other test files

[13:42] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1c79ca35d4

[13:44] <jnthn> huh, that's odd

[13:44] <dogbert2> ?

[13:45] <jnthn> I'd expect the semaphore test to work reliably

[13:45] <timotimo> then perhaps that failure is actually legitimate?

[13:46] <jnthn> Probably

[13:51] *** AlexDaniel joined
[13:57] *** travis-ci joined
[13:57] <travis-ci> MoarVM build passed. Timo Paulssen 'set test jobs back to 1

[13:57] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/340951714 https://github.com/MoarVM/MoarVM/compare/c512dce8e91c...1c79ca35d448

[13:57] *** travis-ci left
[14:00] *** zakharyas joined
[14:20] *** bloatable6 joined
[14:26] *** evalable6 joined
[14:26] *** quotable6 joined
[14:26] *** coverable6 joined
[14:26] *** notable6 joined
[14:26] *** bloatable6 joined
[14:26] *** nativecallable6 joined
[14:26] *** releasable6 joined
[14:26] *** reportable6 joined
[14:26] *** committable6 joined
[14:26] *** bisectable6 joined
[14:26] *** shareable6 joined
[14:27] *** benchable6 joined
[14:27] *** statisfiable6 joined
[14:59] *** coverable6 joined
[14:59] *** notable6 joined
[14:59] *** reportable6 joined
[14:59] *** nativecallable6 joined
[14:59] *** committable6 joined
[14:59] *** quotable6 joined
[14:59] *** bisectable6 joined
[14:59] *** releasable6 joined
[14:59] *** bloatable6 joined
[14:59] *** shareable6 joined
[15:04] *** benchable6 joined
[15:04] *** statisfiable6 joined
[15:16] *** evalable6 joined
[15:18] *** greppable6 joined
[15:26] *** unicodable6 joined
[15:27] <brrt> i have ehm, debugged the bug a bit further

[15:28] <brrt> the JIT appears to stuff a small number into where the GC thinks it should find an object

[15:35] <dogbert2> that doesn't sound very good does it ?

[15:35] <jnthn> Matches the stack traces pretty well

[15:41] <timotimo> that'd often be a frame, right? because they don't actually have their header?

[15:42] <jnthn> More likely just some junk

[15:44] *** zakharyas joined
[15:54] <dogbert2> should Proc.kill return any file descriptors to the system or is that up to the GC?

[15:56] *** brrt joined
[15:57] <dogbert2> I meant Proc::Async.kill ofc

[15:58] * brrt is back online

[16:00] <brrt> i wonder if there is a way in which a frame can be allocated, which does not respect the spesh_cand jitcodes' frame size

[16:00] <brrt> or, if i'm not computing that correctly

[16:04] <brrt> so this makes spilling quite suspicious

[16:10] <brrt> but, this frame, that's different from the one where the jit bisect script points us to

[16:10] <brrt> :-(

[16:25] *** zakharyas joined
[16:28] *** zakharyas1 joined
[16:50] *** zakharyas joined
[17:13] *** Kaiepi joined
[17:21] *** Kaiepi joined
[17:45] *** Geth joined
[18:25] *** bisectable6 joined
[18:25] *** lizmat joined
[20:01] *** brrt joined
[20:04] <brrt> correction, after MVM_SPESH_BLOCKING it isn't

[21:37] *** brrt joined
[22:14] <Kaiepi> thank you so much https://github.com/MoarVM/MoarVM/pull/801/files#diff-0

[22:14] <Kaiepi> this has been driving me insuts for weeks

[22:55] <timotimo> oh whoops :)

[22:58] <Kaiepi> stack overflows

[22:58] <Kaiepi> not... insut? what

[22:59] <Kaiepi> oh nuts

[22:59] * geekosaur was trying to figure out what keyboard layout would lead to that keysmash

[23:00] <Kaiepi> casual qwerty

[23:00] <Kaiepi> unless you couunt tipsy as a keyboard

[23:09] <jnthn> .tell brrt Don't suppose a data breakpoint on the thing we're overwriting could help at al?

[23:09] <yoleaux> jnthn: I'll pass your message to brrt.

[23:14] <MasterDuke> is this the sort of thing rr would be useful for?

[23:18] <jnthn> Perhaps, yes

[23:19] <jnthn> Especially if it does reverse data breakpoints

[23:19] <jnthn> (I suspect it does)

[23:23] *** lizmat joined
[23:26] <Kaiepi> ok

[23:27] <Kaiepi> the callbacks are happening after its been faced to the c part

[23:27] <Kaiepi> *crashing

[23:33] <jnthn> Hm, it makes it back into MoarVM?

[23:46] <Kaiepi> yep

[23:48] <Kaiepi> gimme a second i'll get some more detail out of it

[23:49] <Kaiepi> shit i forgot to compile moar with telemetry

[23:59] *** greppable6 joined
