[00:07] *** telexhJ joined
[00:07] *** telexhJ left
[00:20] *** lizmat left
[00:26] *** lizmat joined
[00:26] *** p6bannerbot sets mode: +v lizmat

[03:55] *** conekinsUL joined
[03:55] *** conekinsUL left
[04:44] *** robertle_ joined
[04:45] *** p6bannerbot sets mode: +v robertle_

[04:52] *** avar left
[04:52] *** robertle left
[04:57] *** avar joined
[04:57] *** niven.freenode.net sets mode: +v avar

[04:57] *** p6bannerbot sets mode: +v avar

[05:24] *** domidumont joined
[05:25] *** p6bannerbot sets mode: +v domidumont

[05:31] *** domidumont left
[05:43] *** AlexDaniel left
[05:56] *** fake_space_whale left
[06:06] *** domidumont joined
[06:07] *** p6bannerbot sets mode: +v domidumont

[06:45] *** obadzzR joined
[06:45] *** obadzzR left
[06:45] *** benchable6 left
[06:48] *** arecaceaegX joined
[06:48] *** arecaceaegX left
[06:56] *** Connorhd joined
[06:57] *** p6bannerbot sets mode: +v Connorhd

[07:04] *** Connorhd left
[07:36] *** benchable6 joined
[07:37] *** p6bannerbot sets mode: +v benchable6

[07:44] *** AlexDaniel joined
[07:45] *** p6bannerbot sets mode: +v AlexDaniel

[07:46] <AlexDaniel> squashable6: status

[07:46] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà2 hours (2018-10-06 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[07:48] *** reportable6 left
[07:48] *** shareable6 left
[07:48] *** committable6 left
[07:48] *** reportable6 joined
[07:48] *** bisectable6 joined
[07:48] *** shareable6 joined
[07:48] *** undersightable6 left
[07:48] *** committable6 joined
[07:48] *** evalable6 left
[07:48] *** undersightable6 joined
[07:48] *** releasable6 joined
[07:48] *** evalable6 joined
[07:49] *** p6bannerbot sets mode: +v reportable6

[07:49] *** p6bannerbot sets mode: +v bisectable6

[07:49] *** p6bannerbot sets mode: +v shareable6

[07:49] *** p6bannerbot sets mode: +v committable6

[07:49] *** p6bannerbot sets mode: +v undersightable6

[07:49] *** p6bannerbot sets mode: +v releasable6

[07:49] *** p6bannerbot sets mode: +v evalable6

[07:59] *** robertle_ left
[08:01] *** robertle joined
[08:02] *** p6bannerbot sets mode: +v robertle

[08:15] *** robertle left
[08:21] *** robertle joined
[08:21] *** p6bannerbot sets mode: +v robertle

[08:27] *** brrt joined
[08:27] *** p6bannerbot sets mode: +v brrt

[08:27] <brrt> \o

[08:28] *** robertle left
[08:28] <timotimo> o/

[08:28] <brrt> ohai timotimo

[08:28] <brrt> I've figured out what we need to figure out

[08:28] <timotimo> oh, for the annotation position problem?

[08:28] <brrt> long story short; INLINE_END annotations indeed move to the succeeding instruction

[08:28] <brrt> when deleted

[08:29] <brrt> .... I think that's wrong

[08:29] <brrt> matter of fact, I will say this. I think the inline_start and inline_end annotation should probably go on basic blocks, not on instructions

[08:30] <timotimo> so we never fuse bbs around inlines?

[08:30] <timotimo> we used to have "is_inlined" on BB

[08:30] <brrt> oh, hmmm

[08:30] <brrt> that's not desirable either

[08:30] <brrt> maybe

[08:30] <brrt> maybe we can 'color' instructions with their inline source

[08:31] <brrt> and make a map of contiguous inline bounds when we emit the code

[08:33] <brrt> meh, that sucks as well :-)

[08:34] <timotimo> yeah, it'll be weird

[08:34] <timotimo> especially when we insert more instructions while optimizing

[08:34] <timotimo> and depending on whether the part of code in question is just changing an ins's info to a different ops's one

[08:34] <timotimo> or creating a new ins struct

[08:36] <jnthn> I'm pretty sure inline end marks the instruction *after* the last one of the inlined code

[08:37] <jnthn> That can be important, if we rewrite the return, optimize it entirely away, then the last thing is an `invoke`

[08:37] *** robertle joined
[08:38] *** p6bannerbot sets mode: +v robertle

[08:45] <brrt> jnthn: no, it really doesn't.

[08:46] <brrt> src/spesh/inline.c 1174 inserts the INLINE_END on the last_ins of the last_inlinee_bb

[08:47] <brrt> so it is in 'inclusive' annotation, and I process it post-instruction, which is the source of my bug, because I don't process annotations on the invoke sequence in the legacy JIT :-)

[08:48] *** MasterDuke left
[08:51] *** dalek left
[08:51] <brrt> and actually, I'm not really sure I need to process the invoke sequence as a block

[08:59] <jnthn> brrt: Yes, but the last instruction of last_inlinee_bb is just the rewritten `return` instruction, which can never deopt, throw, etc.

[09:00] <jnthn> I should probbly have said "the last *interesting* instruction" :)

[09:03] <brrt> well, if that instruction is removed, the annotation now ends up beyond that

[09:03] <brrt> in my case, prepargs

[09:03] <brrt> I'll upload the offending spesh log :-)

[09:04] <jnthn> Yes, I know; I had to fix this a while back :)

[09:05] <brrt> https://gist.github.com/bdw/172c333ca2d8a6b033a6b818bd784ede

[09:05] <jnthn> Because it wasn't moving the annotation far enough

[09:05] <brrt> hmmm

[09:05] <jnthn> Or the wrong way, or whatever

[09:05] <jnthn> And then we had a deopt bug thanks to it

[09:05] <brrt> well, this would give you a deopt bug in the wrong case as well, because the JIT now drops them when they're in the invoke sequence

[09:06] <brrt> and I kind of feel like this is dangerous? what if the first instruction of the next block was a dynamic lexical lookup?

[09:06] <brrt> it's going to think it is coming from the (wrong) inline

[09:07] <brrt> https://gist.github.com/bdw/172c333ca2d8a6b033a6b818bd784ede#file-spesh-log-txt-L8168 here, to be exact

[09:12] <brrt> anyway, I can fix this from the JITs end. I just think this is a potential bug, is all

[09:12] <jnthn> Hmm, potentially

[09:27] *** brrt left
[09:42] *** AlexDaniel left
[10:53] *** brrt joined
[10:54] *** p6bannerbot sets mode: +v brrt

[10:55] *** AlexDaniel joined
[10:55] *** p6bannerbot sets mode: +v AlexDaniel

[10:58] <lizmat> wonder if this could be useful for Moar: https://www.viva64.com/en/b/0583/

[11:14] *** brrt left
[11:44] *** brrt joined
[11:45] *** p6bannerbot sets mode: +v brrt

[12:14] *** brrt left
[12:15] *** brrt joined
[12:15] *** p6bannerbot sets mode: +v brrt

[12:23] *** zebrahKn joined
[12:23] *** zebrahKn left
[12:55] *** viceroyyM joined
[12:55] *** viceroyyM left
[13:00] <jnthn> Aww, no Geth :)

[13:00] <timotimo> oh, huh

[13:00] <timotimo> it isn't supposed to not be here

[13:01] <jnthn> ah, ping timeout some hours back

[13:01] <timotimo> pea debug logging, i see

[13:12] <jnthn> Yeah...well, basically it's about useless without handling branches :)

[13:12] <jnthn> Loops will come much later

[13:13] <jnthn> But branches...can do :)

[13:13] <timotimo> even more reason to build tracing spesh ;)

[13:13] <jnthn> haha

[13:13] <jnthn> No, traces end up with side traces and then it's still as hard :)

[13:13] <timotimo> true

[13:17] *** brrt left
[13:36] <jnthn> Hm, the throwcat opt screws the CFG

[13:36] <jnthn> Such that computing rpo on it afterwards fails

[13:40] <jnthn> ah, it doesn't fix the preds properly

[13:51] <jnthn> Figured it out. Now I can haz RPO.

[13:59] <dogbert2> does that mean that you're ready to merge stuff?

[14:01] *** agaidaep joined
[14:01] *** agaidaep left
[14:19] <jnthn> haha...no, far from it :)

[14:27] <dogbert2> it was worth a shot :)

[14:28] <jnthn> Yeah, escape analysis is fairly involved :)

[14:28] <dogbert2> but I guess that the rewards might be worth it

[14:28] <jnthn> Oh yes, should be :)

[14:35] <jnthn> The EA goes by a two-pass algorithm, first figuring out what we can transform, and then applying the transforms. Seems that to handle guards well, phase 1 will need some "shadow facts" or something

[14:36] <jnthn> So we can see they could be eliminated

[14:36] <jnthn> Hmm

[14:39] *** msonntagDL joined
[14:39] *** msonntagDL left
[15:28] *** fake_space_whale joined
[15:29] *** domidumont left
[15:29] *** p6bannerbot sets mode: +v fake_space_whale

[16:00] *** emerson left
[16:01] *** emerson joined
[16:01] *** p6bannerbot sets mode: +v emerson

[16:26] *** TimToady left
[16:26] *** TimToady joined
[16:26] *** barjavel.freenode.net sets mode: +v TimToady

[16:26] *** p6bannerbot sets mode: +v TimToady

[16:31] *** patrickb joined
[16:32] *** p6bannerbot sets mode: +v patrickb

[16:36] *** robertle left
[16:39] *** ggoebel joined
[16:40] *** p6bannerbot sets mode: +v ggoebel

[16:41] <jnthn> Finally, my escape analyzer manages its first useful optimization :)

[16:41] <timotimo> \o/

[16:42] *** domidumont joined
[16:43] *** p6bannerbot sets mode: +v domidumont

[16:43] <timotimo> Zoffix, can you restart Geth?

[16:45] <Kaiepi> so for the IO::Socket::Async native-descriptor pullreqs, i'm thinking of adding an extra op to initialize a socket for listening instead of doing it all at once in .listen so that the native socket is available to use to get the native descriptor as soon as its made, rather than after tapping it

[16:45] <Kaiepi> thoughts?

[16:45] <timotimo> at first glance that sounds useful

[16:56] <jnthn> https://github.com/MoarVM/MoarVM/commit/5b1db7e4906eba33471b2fcf080fc4f41ecc8ff9

[16:56] <jnthn> That was hard work for a Friday afternoon :)

[16:59] * jnthn goes for some dinner/rest

[17:00] <timotimo> nice

[17:00] <timotimo> at one point we'll also get at the hash's entries with just "set", too?

[17:44] *** goran-mahovlic_ joined
[17:44] *** p6bannerbot sets mode: +v goran-mahovlic_

[17:46] *** goran-mahovlic_ left
[17:52] *** Hobby_boykm joined
[17:52] *** Hobby_boykm left
[18:05] *** Kaiepi left
[18:07] *** Kaiepi joined
[18:08] *** p6bannerbot sets mode: +v Kaiepi

[18:51] *** lipvigHE joined
[18:51] *** lipvigHE left
[18:59] <AlexDaniel> timotimo: you're asking Zoffix to restart Geth? :) Wasn't it you who had an ability to restart hack when it hangs?

[19:00] <timotimo> oh, somehow i forgot that gets runs off of hack

[19:01] <AlexDaniel> :)

[19:02] *** synopsebot left
[19:02] *** SourceBaby_ left
[19:02] *** p6lert left
[19:02] *** dalek joined
[19:02] *** Geth joined
[19:02] *** p6lert joined
[19:02] *** synopsebot joined
[19:03] *** p6bannerbot sets mode: +v dalek

[19:03] *** p6bannerbot sets mode: +v Geth

[19:03] *** p6bannerbot sets mode: +v p6lert

[19:03] *** p6bannerbot sets mode: +v synopsebot

[19:23] *** lizmat left
[19:24] *** domidumont left
[19:27] *** lizmat joined
[19:27] *** p6bannerbot sets mode: +v lizmat

[19:33] *** OslegYX joined
[19:33] *** OslegYX left
[20:00] *** Kaiepi left
[20:01] *** Kaiepi joined
[20:02] *** p6bannerbot sets mode: +v Kaiepi

[20:22] *** QizzyFl joined
[20:22] *** QizzyFl left
[20:27] <Kaiepi> making an asyncsocket op and passing the socket it creates to asyncconnect/asynclisten ops seems to be going smoothly so far

[20:54] *** teuscg joined
[20:54] *** teuscg left
[21:18] <Kaiepi> tools/update_ops isn't updating the oplist when i run it

[21:22] <jnthn> ?

[21:22] <jnthn> src/core/oplist is its source data

[21:23] <jnthn> You update that, run the script, and add an impl to src/core/interp.c

[21:23] <jnthn> It'll update the various op metadata files

[21:23] <jnthn> (which are generated)

[21:38] <Kaiepi> oh, ok

[21:38] <Kaiepi> thanks

[21:40] <Kaiepi> Unhandled exception: Hash keys must be concrete strings

[21:43] <Kaiepi> i'll try reinstalling moar/nqp/rakudo and running it again

[21:46] <jnthn> You'll need to recompile the extops in Rakudo after such a change (rebuilding Rakudo entirely will do that for sure)

[21:55] <Kaiepi> how do i update src/vm/moar/stage0/MASTOps.moarvm and src/vm/moar/stage0/QAST.moarvm in nqp?

[21:55] <jnthn> Do you need to?

[21:55] <jnthn> But if yes, `make bootstrap-files` should do it

[21:56] <jnthn> (Only update these if needed, since it increases repository size)

[22:20] *** MasterDuke joined
[22:20] *** p6bannerbot sets mode: +v MasterDuke

[22:20] *** MasterDuke left
[22:20] *** MasterDuke joined
[22:20] *** herbert.freenode.net sets mode: +v MasterDuke

[22:20] *** p6bannerbot sets mode: +v MasterDuke

[22:22] *** patrickb left
[22:26] <Kaiepi> Unhandled exception: Bytecode validation error at offset 20, instruction 5:

[22:26] <Kaiepi> operand type 56 does not match register type 32

[22:26] <Kaiepi>    at <unknown>:1  (src/vm/moar/stage0/ModuleLoader.moarvm:<dependencies+deserialize>)

[22:26] <Kaiepi>  from <unknown>:1  (src/vm/moar/stage0/nqp.moarvm:<dependencies+deserialize>)

[22:26] <Kaiepi> how can i debug this?

[22:30] <jnthn> First of all, did you follow the instructions at the top of oplist for where to add the new op?

[22:31] <jnthn> It's a weird failure mode, but inserting it in the wrong place (e.g. not after all existing non-spesh ops) could cause something like this

[22:35] <Kaiepi> ohh

[22:35] <Kaiepi> that could be why

[22:35] *** Ven`` joined
[22:36] *** p6bannerbot sets mode: +v Ven``

[22:36] *** Ven`` left
[22:37] <jnthn> :)N√°ro≈æn√≠

[22:37] <jnthn> oops

[22:37] <jnthn> *:)

[22:40] <Kaiepi> that seems to have fixed the problem

[22:40] <Kaiepi> thanks

[22:40] <Kaiepi> i was putting asyncsocket above asyncconnect/asynclisten, instead of before the spesh ops

[22:43] <jnthn> 2ah

[22:43] <jnthn> Yeah, order matters

[22:43] <jnthn> Bah, what's with my typing tonight :)

