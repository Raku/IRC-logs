[00:08] <jnthn> :)

[00:08] * jnthn goes to get some rest

[00:08] <jnthn> 'night o/

[00:19] *** buggable left
[00:19] *** buggable joined
[01:17] *** stmuk joined
[01:19] *** stmuk_ left
[03:24] *** stmuk_ joined
[03:25] *** stmuk left
[06:09] *** lizmat left
[06:17] *** domidumont joined
[06:23] *** domidumont left
[06:24] *** domidumont joined
[06:36] <samcv> good morning

[06:52] <Geth> ¬¶ MoarVM: e94d3dfdb5 | (Samantha McVey)++ | 6 files

[06:52] <Geth> ¬¶ MoarVM: Remove previous hash handle pointers in hash implementation

[06:52] <Geth> ¬¶ MoarVM:

[06:52] <Geth> ¬¶ MoarVM: This makes each hash handle 8 bytes (on 64-bit) smaller. It results in a

[06:52] <Geth> ¬¶ MoarVM: speedup on my hash speed test by ~1% as well (likely due to more entries

[06:52] <Geth> ¬¶ MoarVM: fitting in the cache) and reduces memory by 8MB with a million hash

[06:52] <Geth> ¬¶ MoarVM: entries. The test wastes about half cpu on GC so likely the speed

[06:52] <Geth> ¬¶ MoarVM: increase is at least 3% or more if just taking the hash impl. code into

[06:52] <Geth> ¬¶ MoarVM: <‚Ä¶commit message has 10 more lines‚Ä¶>

[06:53] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e94d3dfdb5

[06:53] <Geth> ¬¶ MoarVM: 0dd6ce5478 | (Samantha McVey)++ (committed using GitHub Web editor) | 6 files

[06:53] <Geth> ¬¶ MoarVM: Merge pull request #904 from samcv/remove-backref-hash2

[06:53] <Geth> ¬¶ MoarVM:

[06:53] <Geth> ¬¶ MoarVM: Remove previous hash handle pointers in hash implementation

[06:53] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0dd6ce5478

[07:00] *** lizmat joined
[07:08] <Geth> ¬¶ MoarVM: a50a0b15bb | (Samantha McVey)++ | tools/compare-oplist-interp-order.sh

[07:08] <Geth> ¬¶ MoarVM: Make compare-oplist-interp-order.sh more POSIX compliant

[07:08] <Geth> ¬¶ MoarVM:

[07:08] <Geth> ¬¶ MoarVM: Replace things undefined things in POSIX shell with things that are.

[07:08] <Geth> ¬¶ MoarVM: Noticed by CodeFactor.

[07:08] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a50a0b15bb

[08:48] *** robertle joined
[08:51] *** domidumont left
[09:01] *** lizmat left
[10:11] *** lizmat joined
[10:23] *** domidumont joined
[10:29] *** MasterDuke left
[11:41] *** Ven`` joined
[11:59] *** MasterDuke joined
[12:17] <Geth> ¬¶ MoarVM: samcv++ created pull request #905: Test branch

[12:17] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/905

[13:35] *** Ven`` left
[13:40] *** Ven`` joined
[14:25] *** zakharyas joined
[14:55] <timotimo> i wonder how often we try to add VMNull to a worklist in the gc, and if checking for VMNull in certain spots, like maybe VMArray, would be beneficial

[14:57] *** reportable6 left
[14:57] *** reportable6 joined
[15:05] *** zakharyas left
[15:05] *** zakharyas joined
[15:06] <samcv> timotimo: well it was faster to not check from my timing.

[15:06] *** zakharyas left
[15:06] <samcv> but we could check if we need to, though i could measure the time difference

[15:07] *** zakharyas joined
[15:09] <timotimo> did you only check for null or for VMNull, too?

[15:10] <samcv> oh. actually yeah it was just a null check

[15:10] <samcv> that it doesn't check for when worklist->include_gen2 is true

[15:10] <samcv> though i'd think it'd be even slower if we checked for VMNull as well

[15:10] <samcv> but you could bench it

[15:16] <timotimo> hm, but VMNull will have its "it's in gen2" bit set, so it wouldn't end up in worklists in the minor collections anyway

[16:04] *** zakharyas left
[16:05] *** zakharyas joined
[16:30] *** AlexDaniel left
[16:33] *** AlexDaniel joined
[16:36] *** Ven`` left
[16:38] *** Ven`` joined
[16:40] <masak> Juerd: I know I'm in a minority, but I'm _really_ cagey about junctions. and I say that as someone who originally loved the idea of junctions.

[16:41] <masak> I got a twinge of jealousy when PEP 572 started talking about a "witness" to any() and all()

[16:41] <masak> because at least one of the way people use junctions is to ask "is any() of the cards on hand an ace?"

[16:41] <masak> "yep"

[16:41] <masak> "well, which one?"

[16:41] <masak> "beats me. search for it?"

[16:42] <masak> which is where, to me, the idea goes from cool handwaving about "quantum superpositions" to not-so-helpful

[16:43] <masak> sorry, that came out as overly negative :) but I do think there's something suboptimal about the way junctions are designed

[16:45] <masak> the way junctions invade the type hierarchy and get special treatment in the dispatcher and fork the (green) thread of execution is also a part of why I don't want to rely on them too much

[16:46] <masak> generally, you want to make wrong code look wrong, but junctions make wrong code look right. the interpretation of something becomes wildly different if it turns out it gets executed multiple times.

[16:47] <masak> in summary, (a) not helpful enough, (b) based on questionable theory, (c) insane power/catastrophe balance

[16:49] <masak> ...hey, this is not #perl6...

[16:49] <masak> sorry for the noise. *blush*

[16:56] <lizmat> masak: so you're saying some function that converts a Junction to a Set matching a condition ?

[17:02] <geekosaur> I think in that case you might do better with tracking conditions throughout? (or, this is better suited to a neural network than junctions, perhaps?)

[17:03] <geekosaur> not that you can introspect how a neural network came to its decision very well; every approoach has its drawbacks

[17:07] *** zakharyas left
[17:18] *** zakharyas joined
[18:00] *** Ven`` left
[18:24] *** brrt joined
[18:28] *** Ven`` joined
[18:38] <brrt> \o

[18:51] *** Ven`` left
[18:52] *** Ven`` joined
[18:59] <masak> lizmat: I've been toying with the idea of "syntactic junctions", something like `$x == 1 | 2` compiling down to `$x == 1 || $x == 2`. they'd be strictly weaker than runtime junctions, but it's very rare I need/want that extra power. and they'd be a lot more predictable.

[19:01] <timotimo> kind of just one step farther than 1 < $x < 4 turning into 1 < $x && $x < 4

[19:04] *** zakharyas left
[19:04] <MasterDuke> there are a bunch of logs that only optionally put a pid in the filename. given that rakudo runs multiple threads by default, should everything use a pid as standard (like MVM_TELEMETRY_LOG does)?

[19:05] *** domidumont left
[19:52] *** brrt left
[19:52] *** brrt joined
[20:10] <lizmat> masak: afaik, timotimo actually already did that in the Optimizer

[20:10] *** brrt left
[20:19] *** zakharyas joined
[20:19] *** brrt joined
[20:39] <brrt> hmm. we don't want to use C99 features if we can avoid it, do we

[20:40] <brrt> that's unfortunate, flexible array members would've solved my problem quite nicely

[20:42] <lizmat> well, it looks like Perl 5 has been dependent on C99 for quite some time, judging from this perldelta entry:

[20:42] <lizmat> https://metacpan.org/pod/distribution/perl/pod/perldelta.pod#The-sprintf-%25j-format-size-modifier-is-now-available-with-pre-C99-compilers

[20:42] <lizmat> that implies to me that some part of Perl 5 at least has been dependent on C99 features already

[20:43] <lizmat> if you want to compile MoarVM on a 15+ year old compiler, what does that mean ?

[20:44] <MasterDuke> isn't windows the problem? msvc doesn't support all of C99 or something like that?

[20:44] <brrt> windows is always a problem

[20:45] *** zakharyas left
[20:45] <lizmat> masak: perhaps special case Junction.first and Junction.grep ?

[20:46] <lizmat> m: dd (1|2|3).grep(1)

[20:46] <camelia> rakudo-moar fadc25631: OUTPUT: ¬´any((1,).Seq, ().Seq, ().Seq)‚ê§¬ª

[20:47] <lizmat> or let .Seq coerce an "any" junction to its members ?

[20:47] <lizmat> m: dd (1|2|3).Seq   # instead of this, (1,2,3).Seq

[20:47] <camelia> rakudo-moar fadc25631: OUTPUT: ¬´any((1,).Seq, (2,).Seq, (3,).Seq)‚ê§¬ª

[20:49] <lizmat> of have a function .eigenstates that creates a .Seq of the members of the Junction ?

[20:49] <lizmat> (1,2,3).eigenstates.grep(1)   # (1,).Seq

[20:50] <lizmat> (1|2|3).eigenstates.grep(1)   # rather

[20:50] <lizmat> with "eigenstates" being a funny enough name for people to know their doing something potentially iffy ?

[20:52] <brrt> okay, so i can't make an array-of-flexible-array-members

[20:52] <brrt> so let's ignore that one

[21:10] <masak> lizmat: I guess what I'm after is not something that's "potentially iffy", but something that better accommodates that use case ;)

[21:22] *** brrt left
[21:42] *** stmuk joined
[21:44] *** stmuk_ left
[21:57] <timotimo> ha!

[21:57] <timotimo> i just looked at a recent spesh log of JSON::Fast doing some parsing

[21:58] <timotimo> there's lots of BBs that are inlined and only either one or two set instructions are all that remains

[21:59] <timotimo> surely that was sink calls or something like that, but still

[21:59] <timotimo> anyway, that's beautiful

[22:01] <timotimo> oh, it's a two-level inline, via Seq.pm6's from-loop

[22:05] <timotimo> looks like we often retain "identity" being inlined as two sets, one for the getarg, one for the return

[22:06] *** robertle left
[22:07] <jnthn> Yeah, we're not quite smart enough to do away with that yet :)

[22:15] *** Ven`` left
[22:37] <timotimo> oh jnthn, i found an easy win!

[22:37] <timotimo> did you know that we don't discover facts when we see an sp_fastcreate?

[22:39] <jnthn> hm, no :)

[22:47] <timotimo> oh

[22:48] <timotimo> the spesh slot in question stores the STable, but our facts refer to types rather than STables

[22:49] <timotimo> that's ... not so great, is it?

[22:49] <jnthn> We generally store whatever is most convenient :)

[22:49] <jnthn> Well, more to the point, whatever makes it fastest to execute the operation in question

[22:49] <timotimo> yeah, STable is most convenient for fastcreate to operate, but not for facts discovery

[22:50] <timotimo> so, what now? add a second spesh slot argument to sp_fastcreate just to store the type object we got the STable from?

[22:51] <timotimo> i wouldn't want to make sp_fastcreate slower by adding the extra pointer deref to get from the type object to the STable for the benefit of fact discovery later on

[22:56] <timotimo> actually, do we perhaps always only need the STable when we talk about KNOWN_TYPE?

[22:56] <jnthn> I don't see the problem; the type object is just available as st->WANT

[22:56] <jnthn> oops

[22:56] <jnthn> st->WHAT

[22:56] <timotimo> oh, is it!

[22:56] <timotimo> well, that's very easy, then %)

[22:56] <jnthn> So can just do that to set the known type ;)

[22:56] <timotimo> somehow i totally missed that

[22:56] <jnthn> :)

[23:01] <timotimo> let's run some tests ...

[23:32] <timotimo> i would assume sp_fastcreate isn't the only sp_ op that's missing from fact discovery, actually

[23:33] <timotimo> sp_getspeshslot could have known value, for example

[23:33] <timotimo> sp_getwvalfrom should also get facts

[23:34] <timotimo> but that could already be everything

[23:34] <jnthn> *nod*

[23:34] <jnthn> Yeah, worth doing that for inlines :)

[23:34] <timotimo> oh, getstringfrom also could

