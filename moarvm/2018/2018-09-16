[00:04] <MasterDuke> .tell samcv src/strings/decode_stream.c: In function ‘run_decode’: src/strings/decode_stream.c:142:27: warning: implicit declaration of function ‘MVM_string_utf16_decodestream’; did you mean ‘MVM_string_utf8_decodestream’? [-Wimplicit-function-declaration]          reached_stopper = MVM_string_utf16_decodestream(tc, ds, stopper_chars, sep_spec, eof);

[00:04] <yoleaux> MasterDuke: I'll pass your message to samcv.

[00:12] <samcv> MasterDuke: ah that looks like a thing

[00:12] <yoleaux> 00:04Z <MasterDuke> samcv: src/strings/decode_stream.c: In function ‘run_decode’: src/strings/decode_stream.c:142:27: warning: implicit declaration of function ‘MVM_string_utf16_decodestream’; did you mean ‘MVM_string_utf8_decodestream’? [-Wimplicit-function-declaration]          reached_stopper = MVM_string_utf16_decodestream(tc, ds, stopper_chars, sep_spec, eof);

[00:13] *** Kaiepi joined
[00:14] *** p6bannerbot sets mode: +v Kaiepi

[00:17] *** lizmat left
[00:29] <Geth> ¦ MoarVM: ff0fb63a46 | (Samantha McVey)++ | 2 files

[00:29] <Geth> ¦ MoarVM: Make sure utf16 decodestream is declared in the header file

[00:29] <Geth> ¦ MoarVM:

[00:29] <Geth> ¦ MoarVM: Fixes compiler warnings about the function not being predeclared.

[00:29] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ff0fb63a46

[00:31] <MasterDuke> samcv++

[00:34] <samcv> and i probably need to check for endianess issues on deing $fh.write: for a 16 bit buffer

[00:35] <samcv> though i need to add specified endianess to decodestream and decode too. so i'll probably do it together with that. since we don't support specific endianess utf16 so i think that's in line with what we have other places atm

[01:11] *** sulvone11 joined
[01:14] *** MasterDuke left
[01:16] *** sulvone11 left
[01:32] *** v45h11 joined
[01:33] *** v45h11 left
[02:01] *** MasterDuke joined
[02:01] *** p6bannerbot sets mode: +v MasterDuke

[02:01] *** MasterDuke left
[02:01] *** MasterDuke joined
[02:01] *** herbert.freenode.net sets mode: +v MasterDuke

[02:01] *** p6bannerbot sets mode: +v MasterDuke

[02:02] *** Kaiepi left
[02:02] *** Kaiepi joined
[02:03] *** p6bannerbot sets mode: +v Kaiepi

[02:48] *** MasterDuke left
[03:10] *** harrow joined
[03:11] *** p6bannerbot sets mode: +v harrow

[03:32] *** btorch_2 joined
[03:33] *** btorch_2 left
[04:02] *** AlexDani` joined
[04:02] *** p6bannerbot sets mode: +v AlexDani`

[05:06] *** pakettiale28 joined
[05:11] *** pakettiale28 left
[05:43] *** bertvdlingen26 joined
[05:44] *** bertvdlingen26 left
[05:48] *** asalor15 joined
[05:53] *** asalor15 left
[06:16] *** icedev21 joined
[06:20] *** icedev21 left
[06:23] *** robertle joined
[06:24] *** p6bannerbot sets mode: +v robertle

[07:03] *** rito29 joined
[07:08] *** rito29 left
[08:01] *** lizmat joined
[08:02] *** p6bannerbot sets mode: +v lizmat

[09:00] *** sc11tr23 joined
[09:09] *** sc11tr23 left
[09:46] *** rodgort8 joined
[09:47] *** Kaiepi left
[09:50] *** Kaiepi joined
[09:51] *** p6bannerbot sets mode: +v Kaiepi

[09:52] *** Kaiepi left
[09:53] *** Kaiepi joined
[09:53] *** rodgort8 left
[09:53] *** p6bannerbot sets mode: +v Kaiepi

[10:17] *** rdk31 joined
[10:18] *** rdk31 left
[10:18] *** sigtau2 joined
[10:19] *** sigtau2 left
[10:26] *** Kaiepi left
[10:27] *** Kaiepi joined
[10:28] *** p6bannerbot sets mode: +v Kaiepi

[10:29] *** Kaiepi left
[10:32] *** Kaiepi joined
[10:32] *** bazz0 joined
[10:33] *** p6bannerbot sets mode: +v Kaiepi

[10:36] *** bazz0 left
[10:48] *** Kaiepi left
[10:52] *** Kaiepi joined
[10:52] *** p6bannerbot sets mode: +v Kaiepi

[10:55] *** brucebag6 joined
[10:56] *** AlexDani` is now known as AlexDaniel

[10:58] *** brucebag6 left
[11:13] <Geth> ¦ MoarVM/fork-safety: 2587d1bc40 | (Bart Wiegmans)++ | 16 files

[11:13] <Geth> ¦ MoarVM/fork-safety: [fork] Implement fork() opcode

[11:13] <Geth> ¦ MoarVM/fork-safety:

[11:13] <Geth> ¦ MoarVM/fork-safety: Stop system threads before fork(), to ensure that the child process is

[11:13] <Geth> ¦ MoarVM/fork-safety: not left with a corrupt heap. Windows will report as

[11:13] <Geth> ¦ MoarVM/fork-safety: fork-not-supported and the process will shortcircuit there.

[11:13] <Geth> ¦ MoarVM/fork-safety:

[11:13] <Geth> ¦ MoarVM/fork-safety: Some final modifications necessary:

[11:13] <Geth> ¦ MoarVM/fork-safety: - let MVM_thread_cleanup_thread_list count the number of alive threads

[11:13] <Geth> ¦ MoarVM/fork-safety: - let MVM_io_eventloop_start handle restarts gracefully

[11:13] <Geth> ¦ MoarVM/fork-safety: - let MVM_io_eventloop_destroy handle partial stops gracefully

[11:13] <Geth> ¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/commit/2587d1bc40

[11:21] *** lizmat left
[11:24] *** lizmat joined
[11:25] *** p6bannerbot sets mode: +v lizmat

[11:28] *** Kaiepi left
[11:32] *** Kaiepi joined
[11:32] *** p6bannerbot sets mode: +v Kaiepi

[12:04] <nine> almost.....there

[12:18] *** Kaiepi left
[12:21] *** Kaiepi joined
[12:22] *** p6bannerbot sets mode: +v Kaiepi

[12:38] *** Kaiepi left
[12:42] *** Kaiepi joined
[12:42] *** p6bannerbot sets mode: +v Kaiepi

[12:50] *** ekneuss12 joined
[12:56] *** ekneuss12 left
[13:01] *** BiW29 joined
[13:02] *** BiW29 left
[13:15] *** zakharyas joined
[13:16] *** p6bannerbot sets mode: +v zakharyas

[13:22] *** Kaiepi left
[13:22] *** Kaiepi joined
[13:23] *** p6bannerbot sets mode: +v Kaiepi

[13:29] *** crest18 joined
[13:30] *** crest18 left
[13:49] *** p6bannerbot joined
[13:49] *** ChanServ sets mode: +o p6bannerbot

[14:12] *** AngelDeath joined
[14:16] *** AngelDeath left
[14:16] *** okraits20 joined
[14:21] *** okraits20 left
[15:04] *** zakharyas left
[15:12] *** zakharyas joined
[15:12] *** p6bannerbot sets mode: +v zakharyas

[16:04] *** zakharyas left
[16:15] *** zakharyas joined
[16:16] *** p6bannerbot sets mode: +v zakharyas

[16:32] *** r4vi9 joined
[16:39] *** r4vi9 left
[17:20] *** domidumont joined
[17:20] *** MasterDuke joined
[17:20] *** p6bannerbot sets mode: +v MasterDuke

[17:20] *** MasterDuke left
[17:20] *** MasterDuke joined
[17:20] *** herbert.freenode.net sets mode: +v MasterDuke

[17:20] *** p6bannerbot sets mode: +v MasterDuke

[17:21] *** p6bannerbot sets mode: +v domidumont

[17:35] *** zakharyas left
[17:42] *** bo_ joined
[17:48] *** bo_ left
[18:07] *** domidumont left
[18:43] *** cryptk7 joined
[18:48] *** cryptk7 left
[19:11] <nine> And it runs!

[19:12] <jnthn> :)

[19:13] <jnthn> So much nice stuff going on. :)

[19:13] * jnthn is looking forward to digging back in this week :)

[19:13] <nine> Who'd have thought that the const_i64 -> const_64_16 optimization was essential?

[19:15] <nine> And indeed it compiles and runs a note("hello world") :)

[19:16] <jnthn> Essential? :)

[19:16] * jnthn didn't know that either

[19:16] <nine> Bytecode was kinda broken without that. I got the impression that some upper layer depends on that optimization

[19:16] <jnthn> Hmm, that's...odd

[19:17] <nine> Or.....oh no!

[19:17] <nine> Of course it's my own bug :)   $!bytecode.write_uint16(nqp::getattr($o, MAST::IVal, '$!value')); # FIXME need to pick int size from op_info

[19:18] <jnthn> :D

[19:18] * jnthn is somewhat relieved :)

[19:18] <nine> I even got the infrastructure for fixing that in place since I wrote the comment

[19:22] <nine> Btw the work on reproducible builds now comes in quite handy. Comparing hex dumps is much more fun this way :)

[19:31] <nine> I guess the next step is plugging this into the compiler backend

[19:35] *** Kaiepi left
[19:35] *** pepesza27 joined
[19:36] *** Kaiepi joined
[19:36] *** p6bannerbot sets mode: +v Kaiepi

[19:40] *** reportable6 joined
[19:40] <timotimo> very nice

[19:40] *** pepesza27 left
[19:40] <timotimo> this way we can even use the debugserver stuff to instrument the compiler, like to mark up every single byte in the resulting file with the line (or maybe a stack) of what wrote it

[19:41] *** p6bannerbot sets mode: +v reportable6

[19:41] <timotimo> i once did something like this where there was a #define for printf that would put a random color based on $?LINE (and $?COL?) along with a title="..." into an HTML formatted document

[19:41] <timotimo> instead of the plain text

[19:53] <Geth> ¦ MoarVM: bdw++ created pull request #967: Safe fork in MoarVM

[19:53] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/967

[19:54] *** brrt joined
[19:55] <nine> Meh....seems like there's just no op for loading and running a CompUnit from memory

[19:55] *** p6bannerbot sets mode: +v brrt

[19:55] <timotimo> that sucks, we should fix that.

[19:55] <timotimo> should be easy, though

[19:56] <timotimo> but wait, don't we totally compile compunits in memory and run them immediately?

[19:56] <timotimo> oh, that's probably the mast compiler doing that for you

[19:56] <nine> That's masttocu

[19:56] <timotimo> not an nqp op

[19:56] <timotimo> yeah, we shall have cufrombytes or whatever

[19:57] <brrt> nine++

[19:57] <nine> Instead of nqp::loadbytecodebuffer it'd be better to have an nqp::cufrombuffer + nqp::runcu

[19:57] <nine> Or just have nqp::loadbytecodebuffer return the CompUnit like nqp::masttocu

[19:58] <brrt> this should be easy-ish? :-)

[19:58] <timotimo> i wonder how many different ways to use this there are for our compunit repo infrastructure

[19:58] *** mattg joined
[20:00] <brrt> jnthn: note that this (fork()) only started itching when you wrote the 'sister languages' post

[20:00] <timotimo> that post includes a bit about fork not working?

[20:00] <jnthn> :-)

[20:00] <brrt> yes

[20:00] <brrt> how perl5 is closer to POSIX than perl6 is

[20:00] <timotimo> tbqh i like having fork safety

[20:00] <brrt> well, I guess that is still true

[20:00] <timotimo> preforking can still be useful for resource management reasons

[20:00] <brrt> it's limited though; It will only work if there are no user threads active

[20:00] <timotimo> oh?

[20:01] *** leonjza17 joined
[20:01] <brrt> yeah

[20:01] <timotimo> because restoring a stack is hard?

[20:01] <jnthn> I think it only sanely *can* work in that case

[20:01] <brrt> well, there is that

[20:01] <jnthn> Well, there's a caveat to that remark

[20:01] *** mattg left
[20:01] <timotimo> so we're basically reproducing the "fork only lets the forking thread survive" semantics

[20:01] <brrt> correct

[20:02] <timotimo> but it should be possible to clean the other threads up fully post-fork?

[20:02] <jnthn> timotimo: The patch as it stands throws an exception if there's more than one user thread active

[20:02] <jnthn> Which I think is sensible

[20:02] <timotimo> OK

[20:02] <timotimo> that's probably a good idea, though with no current API to shut down worker threads in the TPS ...

[20:02] <timotimo> don't we already get a user thread when we tap a signal for example?

[20:03] <jnthn> Yup

[20:03] <nine> brrt++ # awesome work!

[20:03] <jnthn> And also if we have to spawn a process to compile a module

[20:03] <brrt> I expect it *is* possible to have full thread restore, but that requires another level of hackery that I'm not ready for today

[20:03] <timotimo> damn, that's very action-at-a-distance-y

[20:03] <jnthn> That's solvable to resolivng what timo said and then making the pre-comp stuff use its own pool

[20:04] <jnthn> Then we have to consider what happens if the compiler itself were to use threads internally, which is probably desirable at some point too :)

[20:04] <brrt> :-)

[20:04] <nine> I'd still much rather pre-comp in the same process. IIRC I've gotten pretty far on that already

[20:04] <timotimo> oh, we'll have it in the same process

[20:04] <timotimo> just with a cleanly separated namespace

[20:04] <timotimo> that we can just completely tear down with ease

[20:04] <timotimo> maybe even a complete MVMInstance

[20:04] <jnthn> But again, we can probably find a way to deal with that.

[20:04] <brrt> note that any of the async stuff will work; so asyncspawn, then fork(), that ought to work

[20:05] <brrt> but yeah, a thread pool, that might be difficult.... We probably need to do some HLL logic around that

[20:05] <jnthn> As to supporting it with real userland threads...well...

[20:06] <timotimo> i mean, we do offer Thread.join %)

[20:06] <brrt> the perl6 implementation that I'm imagining, will probably have to do something of the sort of $*SCHEDULER.stop(); fork(); $*SCHEDULER.start();

[20:07] <jnthn> If we re-invent locks and just use a single per-thread cond var to handle the "efficiently block" part, like the JVM does to back its park() operation, then we could be able to theoretically take some steps further

[20:07] <jnthn> But if the thread is in C-land or blocking on I/O and so forth, we're again stuck

[20:07] <timotimo> of course, if any thread (worker or otherwise) is blocked, we won't be able to do things right yet

[20:07] <nine> well step by step

[20:07] <jnthn> And I think that final step is close to unsolvable.

[20:08] *** leonjza17 left
[20:08] <jnthn> But 90% solutions are still useful 90% of the time. :)

[20:08] <timotimo> next we implement fork() on windows

[20:08] <jnthn> :P

[20:08] * brrt wonders how the linux-subsystem-for-windows does that

[20:09] <timotimo> it switches the CPU to no-interrupts-mode for a few seconds :P

[20:14] *** Guest51271 joined
[20:15] *** Guest51271 left
[20:15] <AlexDaniel> btw these moar changes can go right in because we're still in pretoasted state

[20:15] <AlexDaniel> or so I think

[20:16] <brrt> cool

[20:18] <AlexDaniel> and also my bisect logic for toaster almost works, so we'll likely get all the answers right away without needing to wait for me to bisect semimanually

[20:20] <brrt> nice

[20:20] <brrt> AlexDaniel++ # automating things

[20:20] <AlexDaniel> well, it doesn't trisect into moar but it will show the right bump right away no matter how many dependencies the module has

[20:21] <AlexDaniel> also reuses all the logic from bisectable bot so once that is improved to bisect moar it will start doing that as well

[20:22] <AlexDaniel> also I'm a bit late with that thing for the release, sorry for that

[20:26] <samcv> ugh utf16 with the BOM handling is really disturbing me

[20:26] <samcv> https://github.com/MoarVM/MoarVM/issues/966#issuecomment-421826781 i don't like the ambiguity at all

[20:29] <nine> After getting around the obligatory bootstrap issues, the new MAST compiler passes its first tests :) The only oddity is that the test code seems to run twice.

[20:29] <brrt> \o/

[20:32] <Geth> ¦ MoarVM: 156b5bc3ff | (Stefan Seifert)++ | docs/bytecode.markdown

[20:32] <Geth> ¦ MoarVM: Clarify a few things in bytecode specification

[20:32] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/156b5bc3ff

[20:34] *** brrt left
[20:44] <nine> Huh? The double run is not because of anything in the bytecode apparently. So it's probably something really stupid in the quickly hacked up nqp::runbytecodebuffer or so

[20:46] <timotimo> if the code is in the mainline, then loading it probably already runs it?

[20:47] <timotimo> and then you run it again?

[20:48] <nine> Ah, of course. mast_to_cu does not run the whole thing. It just runs the deserialization frame. So indeed, just hacking up loadbytecodebuffer to return the CU won't do it.

[20:48] <nine> But at least I now know that when I solve this for real, the rest is already in pretty good shape :)

[20:53] *** vikikas2 joined
[20:54] *** vikikas2 left
[21:18] <nine> And indeed it is. And that concludes my hacking for this weekend

[21:19] <jnthn> nine++

[21:48] *** Kaiepi left
[21:49] *** Kaiepi joined
[21:49] *** p6bannerbot sets mode: +v Kaiepi

[22:10] <timotimo> way cool.

[22:41] *** Kaiepi left
[22:42] *** Kaiepi joined
[22:42] *** p6bannerbot sets mode: +v Kaiepi

