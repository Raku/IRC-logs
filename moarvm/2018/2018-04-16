[00:02] <timotimo> looks like bad memory accesses here, huh.

[00:04] *** travis-ci joined
[00:04] <travis-ci> MoarVM build failed. Timo Paulssen 'fix wrong int size for string register in getstringfrom'

[00:04] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/366937742 https://github.com/MoarVM/MoarVM/compare/1525500479fd...94637c24becf

[00:04] *** travis-ci left
[00:06] <timotimo> what about this spesh slot stuff could be wrong in the jit but correct in the interpreter?

[00:10] <MasterDuke> have you tried jit bisecting it?

[00:11] <timotimo> i could try that

[00:12] <timotimo> "this program cannot be bisected" :|

[00:12] <timotimo> oh it needs to be in a different workdir

[00:15] <mst> MasterDuke: is this a 'gif' pronunciation argument? :D

[00:16] <MasterDuke> heh, took me a little while there to get that

[00:18] <MasterDuke> oddly enough, i'm not sure i have a standard way of pronouncing 'gif'

[00:18] <MasterDuke> now 'gibs' on the other hand...

[00:29] <timotimo> i wonder why carg gets 0x5 and 0x3 in the graph

[00:30] <timotimo> probably a value inside an enum?

[00:30] <timotimo> rather than a size or similar?

[00:31] <timotimo> ugh, it's already really late

[00:31] <timotimo> i'll revert the code for now

[00:32] <Geth> Â¦ MoarVM: a85c2d398d | (Timo Paulssen)++ | src/jit/core_templates.expr

[00:32] <Geth> Â¦ MoarVM: Revert "add an exprjit for sp_getwvalfrom"

[00:32] <Geth> Â¦ MoarVM:

[00:32] <Geth> Â¦ MoarVM: because it causes crashes. Somehow the spesh slot in use

[00:32] <Geth> Â¦ MoarVM: becomes out of range? In any case, valgrind complains.

[00:32] <Geth> Â¦ MoarVM:

[00:32] <Geth> Â¦ MoarVM: This reverts commit 1525500479fd6a99e1a617c6529ca0f80b1e04d5.

[00:32] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a85c2d398d

[00:37] <timotimo> .tell brrt could you check out what might be wrong with https://github.com/MoarVM/MoarVM/commit/1525500479 ? valgrind says the access in cu_string that goes wrong lands just 8 bytes outside of the spesh slot array (pointing at the code that last caused the array to be resized)

[00:37] <yoleaux> timotimo: I'll pass your message to brrt.

[00:37] <timotimo> wait

[00:38] <timotimo> that's from the template i didn't actually commit

[00:39] <Geth> Â¦ MoarVM/crashy_getxfrom_templates: 288169bb08 | (Timo Paulssen)++ | src/jit/core_templates.expr

[00:39] <Geth> Â¦ MoarVM/crashy_getxfrom_templates: commit WIP templates for getstringfrom and getwvalfrom

[00:39] <Geth> Â¦ MoarVM/crashy_getxfrom_templates:

[00:39] <Geth> Â¦ MoarVM/crashy_getxfrom_templates: at least getstringfrom is crashy in rakudo's make test.

[00:39] <Geth> Â¦ MoarVM/crashy_getxfrom_templates: review: https://github.com/MoarVM/MoarVM/commit/288169bb08

[00:39] <timotimo> .tell brrt i committed the templates in question to the branch "crashy_getxfrom_templates": https://github.com/MoarVM/MoarVM/commit/288169bb08

[00:39] <yoleaux> timotimo: I'll pass your message to brrt.

[00:50] *** travis-ci joined
[00:50] <travis-ci> MoarVM build passed. Timo Paulssen 'Revert "add an exprjit for sp_getwvalfrom"

[00:50] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/366946102 https://github.com/MoarVM/MoarVM/compare/94637c24becf...a85c2d398d52

[00:50] *** travis-ci left
[00:52] *** Zoffix joined
[01:01] *** lizmat_ joined
[01:06] *** lizmat joined
[01:57] *** ilbot3 joined
[02:31] *** Kaiepi joined
[02:37] *** Kaiepi joined
[05:51] *** domidumont joined
[05:57] *** domidumont joined
[06:26] *** domidumont joined
[06:29] *** domidumont joined
[07:28] <Geth> Â¦ MoarVM/spesh-limit-debug-log: 2fb5b49151 | (Bart Wiegmans)++ | src/spesh/optimize.c

[07:28] <Geth> Â¦ MoarVM/spesh-limit-debug-log: [Spesh] Log graph of inlinee prior to inlining

[07:28] <Geth> Â¦ MoarVM/spesh-limit-debug-log:

[07:28] <Geth> Â¦ MoarVM/spesh-limit-debug-log: Now that we can restrict the amount of logging done, no longer such a

[07:28] <Geth> Â¦ MoarVM/spesh-limit-debug-log: problem to log the entire graph.

[07:28] <Geth> Â¦ MoarVM/spesh-limit-debug-log: review: https://github.com/MoarVM/MoarVM/commit/2fb5b49151

[07:29] *** brrt joined
[07:29] <brrt> \o

[07:29] <yoleaux> 00:37Z <timotimo> brrt: could you check out what might be wrong with https://github.com/MoarVM/MoarVM/commit/1525500479 ? valgrind says the access in cu_string that goes wrong lands just 8 bytes outside of the spesh slot array (pointing at the code that last caused the array to be resized)

[07:29] <yoleaux> 00:39Z <timotimo> brrt: i committed the templates in question to the branch "crashy_getxfrom_templates": https://github.com/MoarVM/MoarVM/commit/288169bb08

[07:29] <brrt> yeah, i can tell what's wrong. the spesh slot macro gives you the *address* of the spesh slot, not its value

[07:29] <brrt> a pointer to the spesh slot

[07:30] <brrt> otherwise i'd have to call it load_spesh_slot_value or something

[07:33] *** zakharyas joined
[07:37] <brrt> then again, you're not exactly the first to fall for that

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: 7af32b55fe | (Bart Wiegmans)++ | 6 files

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: [Spesh] Wrap debug printing

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log:

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: The intention is that MVM_spesh_debug_enabled(tc) can be made more

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: specific than just having a spesh log file handle or not.

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log:

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: Specifically, setting MVM_SPESH_LIMIT in conjunction with MVM_SPESH_LOG

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: will restrict the log to that particular frame.

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: review: https://github.com/MoarVM/MoarVM/commit/7af32b55fe

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: a5b71afccf | (Bart Wiegmans)++ | src/spesh/optimize.c

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: [Spesh] Log graph of inlinee prior to inlining

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log:

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: Now that we can restrict the amount of logging done, no longer such a

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: problem to log the entire graph.

[07:44] <Geth> Â¦ MoarVM/spesh-limit-debug-log: review: https://github.com/MoarVM/MoarVM/commit/a5b71afccf

[08:22] *** AlexDaniel joined
[08:29] *** AlexDaniel joined
[09:45] *** lizmat joined
[09:52] *** zakharyas joined
[10:03] *** brrt joined
[10:05] <timotimo> thank you, brrt, now it's not crashy any more

[10:10] <Geth> Â¦ MoarVM: e24afe9a9a | (Timo Paulssen)++ | src/jit/core_templates.expr

[10:10] <Geth> Â¦ MoarVM: JIT expr templates for getstringfrom and getwvalfrom

[10:10] <Geth> Â¦ MoarVM:

[10:10] <Geth> Â¦ MoarVM: the secret sauce that was missing before was

[10:10] <Geth> Â¦ MoarVM: dereferencing the result of ^spesh_slot, just like

[10:10] <Geth> Â¦ MoarVM: it is done everywhere else in the file â€¦

[10:10] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e24afe9a9a

[10:11] <timotimo> i can also build an improved ^cu_string that tries to do the lookup of the string before invoking the "grab string from cu and maybe deserialize" function first

[10:19] <timotimo> Unknown node type ARRAY(0x55f593335580) at tools/expr-template-compiler.pl line 95, <STDIN> line 18.

[10:19] <timotimo> this is the line my ^cu_string macro is used for the first time

[10:19] <timotimo> ah, ok

[10:20] <timotimo> the value part of the let node had a layer of () too many

[10:24] <timotimo> anyway, this should make everything everywhere a tiny bit faster

[10:24] <timotimo> like, an unnoticable bit

[10:35] <timotimo> huh, that's weird ... i let fix_wval go through the inliner's SC dependencies to see if any of them refer to the same SC as the inlinee's one, but even if i panic if getting the object from both diverges i get a behavioural change?

[10:36] <timotimo> "that's weird" should be an automatic "run it with valgrind"

[10:36] <timotimo> ... and that makes it pass

[10:38] *** brrt joined
[10:40] <timotimo> asan is bored, but the program still fails

[10:40] <brrt> which program?

[10:41] <timotimo> oh, just "make install" in nqp

[10:41] <timotimo> the very first step

[10:42] <Geth> Â¦ MoarVM: 161b47672d | (Bart Wiegmans)++ | 2 files

[10:42] <Geth> Â¦ MoarVM: Rename ^spesh_slot to ^spesh_slot_addr and add ^spesh_slot_value

[10:42] <Geth> Â¦ MoarVM:

[10:42] <Geth> Â¦ MoarVM: This should hopefully unconfuse expression template writers

[10:42] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/161b47672d

[10:44] <timotimo> oh what the heck %)

[10:46] <timotimo> i did it rather very wrong

[10:47] <timotimo> very cool. the majority of wval and wval_wide accesses are now just kept as wval instead of being made indirect in one way or the other

[10:47] <timotimo> that should be a bit faster in general

[10:48] <dogbert17> timotimo++: your latest changes have restored the speed of the bickpackid program

[10:48] <timotimo> that's reassuring

[10:50] <dogbert17> I get 4.91 s in ST mode and 1.39 s in MT mode

[10:50] <timotimo> it's very unlikely, but maybe the next commit will shave off another 0.01s :P

[10:51] <dogbert17> why not, moar speed is a good thing

[10:52] <Zoffix> New blog post: "WANTED: Perl 6 Historical Items": https://rakudo.party/post/WANTED-Perl-6-Historical-Items

[11:03] <Geth> Â¦ MoarVM: 70ae7eb61b | (Timo Paulssen)++ | 2 files

[11:03] <Geth> Â¦ MoarVM: inline simple cu string access into exprjit template

[11:03] <Geth> Â¦ MoarVM:

[11:03] <Geth> Â¦ MoarVM: just like the MVM_STATIC_INLINE function we use to

[11:03] <Geth> Â¦ MoarVM: get strings from a CU, we do a fast path for already

[11:03] <Geth> Â¦ MoarVM: deserialized strings, which ought to be extremely

[11:03] <Geth> Â¦ MoarVM: common.

[11:03] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/70ae7eb61b

[11:03] <Geth> Â¦ MoarVM: 9c7afdfde3 | (Timo Paulssen)++ | src/spesh/inline.c

[11:03] <Geth> Â¦ MoarVM: keep wvals if only dep needs changing

[11:03] <Geth> Â¦ MoarVM:

[11:03] <Geth> Â¦ MoarVM: if both CUs have the SC in question in their

[11:03] <Geth> Â¦ MoarVM: dependency lists, but at different indices, we

[11:03] <Geth> Â¦ MoarVM: can find the right entry and only change the

[11:03] <Geth> Â¦ MoarVM: index.

[11:03] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9c7afdfde3

[11:03] <timotimo> dogbert17: if you could run the code a bunch of times and see if there's a statistically significant difference, that'd be nice :)

[11:03] * timotimo does RSI rest break out on the balcony

[11:11] <brrt> timotimo++

[11:13] <dogbert17> timotimo: I'll check while you rest

[11:24] <dogbert17> timotimo: ran a few tests and I get the impression that the code now is a teeny-tiny bit slower than before

[11:28] *** domidumont joined
[11:34] <timotimo> hahaha

[11:35] <timotimo> that sucks :)

[11:49] <dogbert2_> if it improves other programs it might be worth keeping I guess

[11:50] <dogbert17> I got like 5.03 s ST and 1.41 s MT

[11:51] <timotimo> i have no idea if it actually makes other programs faskter

[11:53] *** robertle joined
[11:55] <dogbert17> whatever you choose to do I'd say that the blockage is unclogged :), i.e. R#1733

[11:55] <synopsebot> R#1733 [open]: https://github.com/rakudo/rakudo/issues/1733 [perf][regression][âš  blocker âš ] Performance regression after latest MoarVM bump

[11:56] <dogbert17> releasable: next

[11:56] <dogbert17> ...

[11:56] <dogbert17> stupid bot

[12:00] <AlexDaniel> where is it btw

[12:01] *** releasable6 joined
[12:01] *** committable6 joined
[12:01] <AlexDaniel> releasable6: next

[12:01] <releasable6> AlexDaniel, Next release in â‰ˆ5 days and â‰ˆ6 hours. 7 blockers. 224 out of 237 commits logged

[12:02] <releasable6> AlexDaniel, Details: https://gist.github.com/5223ef5da9f206e5c5db9de3da9ba95d

[12:02] <AlexDaniel> dogbert17: can't call someone stupid if they're not here! :)

[12:03] <timotimo> i thought maybe i'll get more reliable results regarding performance if i use callgrind

[12:03] <timotimo> except it's extremely noisy

[12:03] <timotimo> i need something single-threaded instead, i think

[12:03] <AlexDaniel> dogbert17: would be nice to have a comment on R#1733

[12:09] *** domidumont joined
[12:11] <dogbert17> AlexDaniel: you have it :)

[12:11] <dogbert17> timotimo: one part of the program is ST

[12:12] <dogbert17> releasable: uptime

[12:12] <releasable6> dogbert17, 10 minutes and 34 seconds, 232.136719MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[12:13] <timotimo> i know

[12:16] <dogbert17> releasable: next

[12:16] <releasable6> dogbert17, Next release in â‰ˆ5 days and â‰ˆ6 hours. 6 blockers. 224 out of 237 commits logged

[12:16] <timotimo> nice, this code is very stable

[12:16] <releasable6> dogbert17, Details: https://gist.github.com/6153140569559110fecd96c7e48410e7

[12:16] <dogbert17> releasable: uptime

[12:16] <releasable6> dogbert17, 14 minutes and 48 seconds, 252.863281MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[12:16] <dogbert17> hmm

[12:16] <AlexDaniel> quotable6: uptime

[12:16] <quotable6> AlexDaniel, 1 day, 8 hours, 55 minutes, and 9 seconds, 375.523438MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[12:21] <timotimo> damn, it really does take more instructions

[12:22] <dogbert17> your last fix ?

[12:23] <timotimo> yeah

[12:23] <timotimo> er, no, not the fix

[12:23] <timotimo> just the additional "optimization"

[12:23] <dogbert17> :)

[12:49] *** Zoffix left
[13:40] *** lizmat_ joined
[13:40] <dogbert17> heh, 'moar: src/gc/collect.c:218: process_worklist: Assertion `*item_ptr != item->sc_forward_u.forwarder' failed. Aborted (core dumped)'

[13:47] <dogbert17> is it ok for two threads to be running process_worklist simultaneously ?

[13:49] <timotimo> yes

[13:49] <dogbert17> ok, would you like to take a peek at gist ?

[13:50] <dogbert17> https://gist.github.com/dogbert17/3c3ac42b6badf8d766c226002604385a

[13:51] <Geth> Â¦ MoarVM: 77fc202822 | (Timo Paulssen)++ | src/gc/orchestrate.c

[13:51] <Geth> Â¦ MoarVM: global destruction shall suspend other threads

[13:51] <Geth> Â¦ MoarVM:

[13:51] <Geth> Â¦ MoarVM: this reduces "invalid read" and "invalid write" spam

[13:51] <Geth> Â¦ MoarVM: in valgrind/asan when --full-cleanup is used.

[13:51] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/77fc202822

[13:51] <Geth> Â¦ MoarVM: 4e129a4ec2 | (Timo Paulssen)++ | src/spesh/inline.c

[13:51] <Geth> Â¦ MoarVM: free copied spesh_slots in one missing place

[13:51] <Geth> Â¦ MoarVM:

[13:51] <Geth> Â¦ MoarVM: when a spesh graph was created from a candidate,

[13:51] <Geth> Â¦ MoarVM: we copy its spesh slots since a recent change.

[13:52] <Geth> Â¦ MoarVM: That means it has to be freed whenever the graph

[13:52] <Geth> Â¦ MoarVM: gets let go.

[13:52] <Geth> Â¦ MoarVM:

[13:52] <Geth> Â¦ MoarVM: We don't do this in spesh_graph_destroy, because

[13:52] <Geth> Â¦ MoarVM: usually the spesh_slots array is shared.

[13:52] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4e129a4ec2

[13:54] <timotimo> might be good to run it without jit so the backtraces don't get messed up

[13:54] <timotimo> but i've gotta head out now

[13:54] <dogbert17> I'll give that a shot

[13:55] <dogbert17> hah, we're lucky ...

[13:57] <dogbert17> ok updated https://gist.github.com/dogbert17/3c3ac42b6badf8d766c226002604385a

[14:00] <dogbert17> timotimo: ^^ for when you get back. The code causing this is Zoffix 'golf' from https://github.com/rakudo/rakudo/issues/1709

[14:03] *** zakharyas joined
[14:33] <jnthn> .tell timotimo `perl6 --profile -e 'for ^870 { EVAL q/sub foo() { }/ }'` = SEGV (on HEAD or close enough); fine without --profile

[14:33] <yoleaux> jnthn: I'll pass your message to timotimo.

[14:35] <dogbert17> jnthn: are you back from vacation?

[14:37] <jnthn> dogbert17: Yes :)

[14:37] <dogbert17> was it relaxing and snowy?

[14:38] <jnthn> Saw plenty of snow on the train trip over the alps, at least :)

[14:38] <jnthn> Ate plenty of nice things too. And found some good beer. :)

[14:38] <dogbert17> where did you end up, Italy?

[14:39] <jnthn> Munich, then Bolzano (which is in Italy, yes)

[14:39] <dogbert17> cool, a computer free week then

[14:40] <jnthn> Pretty much :)

[14:40] <dogbert17> and a nice beer or two :)

[14:51] *** zakharyas joined
[15:03] <dogbert17> releasable: uptime

[15:03] <releasable6> dogbert17, 3 hours, 2 minutes, and 14 seconds, 310.082031MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[15:07] *** zakharyas joined
[16:07] *** lizmat joined
[16:46] <AlexDaniel> dogbert17: excessive leaking of releasable6 was my mistake actually, now fixed

[16:47] <AlexDaniel> right now only shareable6 is showing some problems, and everything else is above normal but maybe ok

[16:47] <AlexDaniel> shareable6: uptime

[16:47] <shareable6> AlexDaniel, 1 day, 10 hours, 41 minutes, and 3 seconds, 713.292969MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[16:47] <AlexDaniel> reportable6: uptime

[16:47] <reportable6> AlexDaniel, 1 day, 6 hours, 47 minutes, and 44 seconds, 462.15625MiB maxrss. This is Rakudo version 2018.03-134-g20495f097 built on MoarVM version 2018.03-56-g85fc758ce implementing Perl 6.c.

[16:48] <AlexDaniel> well, about twice above normal, yeaâ€¦

[16:52] <timotimo> jnthn: yeah, the profiler still sometimes manages to crash, and sometimes it even causes a super weird fail where when trying to dump profiler data (i.e. after instrumentation should have been reverted) it stumbles over invalid bytecode

[16:52] <yoleaux> 14:33Z <jnthn> timotimo: `perl6 --profile -e 'for ^870 { EVAL q/sub foo() { }/ }'` = SEGV (on HEAD or close enough); fine without --profile

[17:17] <dogbert17> MVM_SPESH_DISABLE=1 makes the problem disappear

[17:27] <timotimo> huh, that code doesn't segfault for me, it gives a bogus P6opaque: no such attribute '$!restart' on type NQPMu in a Perl6::Grammar when trying to get a value instead

[17:31] <timotimo> with the right spesh limit it actually segfaults

[17:44] *** lizmat joined
[17:54] <dogbert17> for me it SEGV'd here

[17:54] <dogbert17> 0x00007ffff75c2547 in MVM_interp_run (tc=0x604a20, initial_invoke=0x7ffff77045e3 <toplevel_initial_invoke>, invoke_data=0x6800e0) at src/core/interp.c:5330

[17:54] <dogbert17> 5330                 if (!check || !IS_CONCRETE(check) || STABLE(check) != want)

[17:54] <timotimo> yup

[18:02] <timotimo> so, what it looks like from here, and this could be totally wrong, it's calling guardconc on a non-object lexical's value

[18:07] <dogbert17> timotimo: do you or jnthn have any theories wrt https://gist.github.com/dogbert17/3c3ac42b6badf8d766c226002604385a

[18:08] <timotimo> sp_getlex_ins    r19(2), lex(idx=15,outers=1,$MVM_reg_obj)

[18:08] <timotimo> sp_guardconc     r19(2), sslot(0), litui32(662)

[18:09] <timotimo> this is rather obviously wrong :)

[18:10] <dogbert17> at least for you :)

[18:33] *** domidumont joined
[19:06] *** lizmat joined
[19:09] *** Kaiepi joined
[19:23] *** lizmat joined
[21:14] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/04/16/2018-16-so-that/

[21:30] *** robertle joined
[22:07] *** Kaiepi joined
