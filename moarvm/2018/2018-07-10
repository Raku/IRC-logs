[00:24] *** stmuk_ joined
[00:25] *** stmuk left
[01:51] *** stmuk joined
[01:53] *** stmuk_ left
[01:57] *** committable6 joined
[02:16] *** bartolin_ joined
[02:17] *** klapperl_ joined
[02:18] *** timo joined
[02:19] *** timo left
[02:19] *** timo joined
[02:19] *** benchable6 left
[02:19] *** statisfiable6 left
[02:19] *** bisectable6 left
[02:19] *** nativecallable6 left
[02:19] *** greppable6 left
[02:19] *** releasable6 left
[02:19] *** scovit left
[02:19] *** krunen left
[02:19] *** btyler joined
[02:19] *** moritz left
[02:19] *** avar left
[02:19] *** klapperl left
[02:19] *** mtj_ left
[02:19] *** btyler_ left
[02:19] *** krunen_ joined
[02:20] *** krunen_ is now known as krunen

[02:20] *** scovit joined
[02:20] *** btyler left
[02:20] *** mtj_ joined
[02:20] *** lizmat left
[02:23] *** btyler joined
[02:23] *** nwc10 joined
[02:23] *** moritz joined
[02:24] *** avar joined
[02:26] *** avar left
[02:26] *** avar joined
[02:57] *** bisectable6 joined
[02:57] *** greppable6 joined
[02:57] *** statisfiable6 joined
[04:11] *** yoleaux joined
[04:54] *** brrt joined
[05:05] *** stmuk left
[05:05] *** stmuk_ joined
[05:23] <brrt> \o

[05:24] <brrt> so one question that I do not know the answer to is, can a thread that isn't the acquirer of a lock, unlock a lock

[05:24] <brrt> if it can, then there's no problem, if it cannot, hmmm

[05:27] *** benchable6 joined
[05:46] *** stmuk joined
[05:49] *** stmuk_ left
[07:13] *** domidumont joined
[07:19] *** domidumont left
[07:20] *** domidumont joined
[07:27] *** lizmat joined
[08:22] *** Kaiepi joined
[08:47] <samcv> good *

[08:51] <brrt> \o samcv

[08:52] <brrt> then again, maybe fork safety of system threads only is good enough

[08:54] <lizmat> brrt: that would be a worthy goal of itself :-)

[08:54] <brrt>  and much more easily doable since we know how they are strtuctured

[08:55] <brrt> lets dive into how the uv runloop thread is structured

[09:02] *** brrt left
[09:15] <jnthn> .tell brrt No, a thread that is not the acquirer of a lock cannot unlock it. It's also not possible to destroy a locked mutex.

[09:15] <yoleaux> jnthn: I'll pass your message to brrt.

[09:17] <jnthn> That's what I was getting at saying we'd end up having to build our own locks.

[09:49] <Geth> ¦ MoarVM/du-chains-and-opts: bf48398ba1 | (Jonathan Worthington)++ | src/spesh/optimize.c

[09:49] <Geth> ¦ MoarVM/du-chains-and-opts: Remove duplicate deletion

[09:49] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/bf48398ba1

[09:49] <Geth> ¦ MoarVM/du-chains-and-opts: b54e82b611 | (Jonathan Worthington)++ | src/spesh/optimize.c

[09:49] <Geth> ¦ MoarVM/du-chains-and-opts: Delete use of late-bound lexical lookup string

[09:49] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/b54e82b611

[09:49] <Geth> ¦ MoarVM/du-chains-and-opts: 5650fc9516 | (Jonathan Worthington)++ | src/spesh/optimize.c

[09:49] <Geth> ¦ MoarVM/du-chains-and-opts: Delete use of eliminated isnull check operand

[09:49] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/5650fc9516

[09:59] <Geth> ¦ MoarVM/du-chains-and-opts: 423a21db16 | (Jonathan Worthington)++ | src/spesh/optimize.c

[09:59] <Geth> ¦ MoarVM/du-chains-and-opts: Delete usage when simplifying a PHI node

[09:59] <Geth> ¦ MoarVM/du-chains-and-opts:

[09:59] <Geth> ¦ MoarVM/du-chains-and-opts: The instruction node was already removed from the graph in this case

[09:59] <Geth> ¦ MoarVM/du-chains-and-opts: due to the containing BB being elimianted, but should keep the usage

[09:59] <Geth> ¦ MoarVM/du-chains-and-opts: information honest by deleting it properly too.

[09:59] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/423a21db16

[10:08] <Geth> ¦ MoarVM/du-chains-and-opts: 0471be0cdc | (Jonathan Worthington)++ | src/spesh/optimize.c

[10:08] <Geth> ¦ MoarVM/du-chains-and-opts: Another optimize_iffy correction

[10:08] <Geth> ¦ MoarVM/du-chains-and-opts:

[10:08] <Geth> ¦ MoarVM/du-chains-and-opts: Only delete the operand in the case we don't delete the entire

[10:08] <Geth> ¦ MoarVM/du-chains-and-opts: instruction, otherwise it's a double delete.

[10:08] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/0471be0cdc

[10:08] <Geth> ¦ MoarVM/du-chains-and-opts: bf0d9d05d3 | (Jonathan Worthington)++ | src/spesh/inline.c

[10:08] <Geth> ¦ MoarVM/du-chains-and-opts: Correct usage update in inline return boxing

[10:09] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/bf0d9d05d3

[10:09] <Geth> ¦ MoarVM/du-chains-and-opts: 7c54afee67 | (Jonathan Worthington)++ | src/spesh/usages.c

[10:09] <Geth> ¦ MoarVM/du-chains-and-opts: Correct handling of inc/dec ops in usage checker

[10:09] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/7c54afee67

[10:14] *** MasterDuke left
[10:28] <Geth> ¦ MoarVM/du-chains-and-opts: a744fca072 | (Jonathan Worthington)++ | src/spesh/args.c

[10:28] <Geth> ¦ MoarVM/du-chains-and-opts: Don't manipulate usages in spesh args opts

[10:28] <Geth> ¦ MoarVM/du-chains-and-opts:

[10:28] <Geth> ¦ MoarVM/du-chains-and-opts: We didn't do the initial pass to build up usage information yet.

[10:28] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/a744fca072

[10:28] <Geth> ¦ MoarVM/du-chains-and-opts: 4e22f8e837 | (Jonathan Worthington)++ | src/spesh/optimize.c

[10:28] <Geth> ¦ MoarVM/du-chains-and-opts: Delete operand in eliminated reprid lookup

[10:28] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/4e22f8e837

[10:29] <jnthn> Hurrah, now can build NQP with that branch with all 3 kinds of DU chain checking

[10:30] <jnthn> Even with NODELAY

[10:31] <jnthn> Though curiously

[10:31] <jnthn> One test failure that isn't a DU chain check error

[10:31] <lizmat> .oO( ticking hidden bugs )

[10:33] <jnthn> Annoyingly, it's in t/qregex/01-qregex.t

[10:33] <jnthn> Which is a huge test file

[10:37] <nwc10> time for lunch?

[10:39] *** releasable6 joined
[10:40] <jnthn> Well, trying to do a Rakudo build and, if that works, test/spectest to see if I can get a smaller failure case

[10:40] <samcv> jnthn: how do the DU chains work?

[10:41] <jnthn> samcv: The definer is stored in the facts as has already been the case for a while. The users are stored as a linked list of the using instructions.

[10:42] <jnthn> samcv: Prior to now we just kept an integer count of usages

[10:43] <jnthn> (The definer being the instruction that writes the register version in the first place)

[10:43] <jnthn> Which is unique because the graph is in SSA form.

[10:44] <jnthn> ooh, it barfs in CORE.setting compilation

[10:45] <jnthn> Thankfully with a missing DU entry error

[10:48] <Geth> ¦ MoarVM/du-chains-and-opts: 18d5551851 | (Jonathan Worthington)++ | src/6model/reprs/P6opaque.c

[10:48] <Geth> ¦ MoarVM/du-chains-and-opts: Fix Vim-o leading to wrong usage deletion

[10:48] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/18d5551851

[10:49] <jnthn> Duh. :)

[10:49] <lizmat> why was that a vim-o ?

[10:50] <jnthn> I figure I did Ctrl+A in insert mode

[10:50] <jnthn> Which inserted 4 spaces

[10:50] <jnthn> When I meant to do it in command mode, where it increments the integer under the cursor

[10:50] <lizmat> ah, instead of replacing 2 by 3

[10:51] <lizmat> TIL

[10:52] <nwc10> jnthn: does *that* fix your NQP test error?

[10:52] <jnthn> Hugely unlikely

[10:53] <jnthn> Since if the test had that issue it'd have showed up in the same way

[10:58] *** Zoffix joined
[10:58] <Geth> ¦ MoarVM/du-chains-and-opts: 1ea80101f3 | (Jonathan Worthington)++ | src/spesh/optimize.c

[10:58] <Geth> ¦ MoarVM/du-chains-and-opts: Do DU chain setup for inserted decont guard

[10:58] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/1ea80101f3

[10:58] <jnthn> D'oh. Now CORE.setting compilation dies...in the same way.

[10:59] <jnthn> Goes without saying that's also rather huge to debug :P

[11:03] <jnthn> Occurs to me that I could also write a check to make sure that we aren't ending up with write instructions of used values going missing. Also, the graph check is not taking place yet after the second round of optimizations.

[11:03] <jnthn> So maybe implementing one or both of those will help find the bug for me :)

[11:05] <Zoffix> New blog post: "Cancellation of Perl 6 Constants and Rationals Grant": http://blogs.perl.org/users/zoffix_znet/2018/07/cancellation-of-perl-6-constants-and-rationals-grant.html

[11:09] <lizmat> Zoffix++  # brave

[11:36] *** Zoffix left
[11:45] <dogbert17> jnthn: have you tried  -   MVM_JIT_DISABLE=1 ./perl6 t/spec/S06-currying/positional.t

[11:46] <dogbert17> I get - MoarVM oops: Malformed DU chain: reading dec_i of 30(65) not in graph

[11:46] <dogbert17> Spesh of 'term:sym<name>' (cuid: 507, file: gen/moar/Perl6-Grammar.nqp:3508)

[11:47] <dogbert17> plus one million other lines

[11:52] <dogbert17> if a SEGV in 'evaluate_guards' (src/spesh/plugin.c:76) is of interest then run: ./perl6 t/spec/S06-advanced/callframe.rakudo.moar

[11:56] *** brrt joined
[12:03] <jnthn> dogbert17: I didn't even get it to build CORE.setting yet... :)

[12:04] <dogbert17> I cheated, which might make my comments null and void, I just rebuilt MoarVM :(

[12:04] <dogbert17> after having checked out your branch

[12:04] <jnthn> ah :)

[12:05] <dogbert17> perhaps that trick is not applicable here ?

[12:05] <brrt> \o

[12:05] <yoleaux> 09:15Z <jnthn> brrt: No, a thread that is not the acquirer of a lock cannot unlock it. It's also not possible to destroy a locked mutex.

[12:05] <jnthn> WEll, yes, and no :)

[12:05] <brrt> jnthn: I see. that is .... indeed problematic

[12:06] <brrt> Because it'd mean unlocking, then stopping, then restarting, then relocking all over again

[12:06] <brrt> okay, let's skip that. let's just throw an exception if there's any user threads active

[12:07] *** AlexDaniel left
[12:19] <Geth> ¦ MoarVM/du-chains-and-opts: 92aeef3a7f | (Jonathan Worthington)++ | 2 files

[12:19] <Geth> ¦ MoarVM/du-chains-and-opts: Detect accidentally deleted writers

[12:19] <Geth> ¦ MoarVM/du-chains-and-opts:

[12:19] <Geth> ¦ MoarVM/du-chains-and-opts: That is, cases where the writer does not appear in the graph, but

[12:19] <Geth> ¦ MoarVM/du-chains-and-opts: there are still reads in the graph.

[12:19] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/92aeef3a7f

[12:32] <brrt> by the way, much as I dislike it, I've decided to keep runtime insertion of casts

[12:33] <brrt> we need it mostly because at the time we precompile the templates, many of the sizes are opaque (and compiler-defined)

[12:33] <brrt> also, 'it works', and that is worth something

[12:34] <brrt> what I do want to do, is move it to a later, pre-tiling, 'finalization' stage, so that the optimizer can do its work without upsetting invariants introduced by it

[12:36] <jnthn> Found the bug causing the NQP test explosion

[12:37] <jnthn> Handing of inc/dec in-place ops was too naive

[12:39] <brrt> oops

[12:40] <jnthn> One of those things you get away with if usage is just a count, but not otherwise :)

[12:40] <brrt> (note to self: if ever I get old enough to design another VM, single-operand increment-decrement is not going to be a feature)

[12:41] <jnthn> Yeah, not quite sure I'd repeat it either :)

[12:41] <brrt> :-)

[12:42] <jnthn> It's good for code compactness

[12:42] <brrt> i've been reading the Java virtual machine specification recently

[12:42] <brrt> true.. then again, I would probably design a new VM to be JIT-first

[12:42] <brrt> maybe even an assembly-language runloop like luajit has

[12:43] <brrt> (interpreter runloop)

[12:43] <jnthn> Hurrah, Rakudo builds too :)

[12:44] <jnthn> And even passes make test

[12:44] <jnthn> Spectests next, and then I guess the whole lot on blocking mode

[12:44] <jnthn> oops, nodelay mode

[12:44] <jnthn> Already on blocking

[12:45] <timo> damn, that's nice

[12:47] <jnthn> Looks like there'll be a small number of spectest failures to look in to

[12:48] <brrt> 1/2 timo :-o

[12:48] <timo> oh no!

[12:48] <brrt> jnthn++

[12:48] <timo> that's why i don't feel so good today

[12:48] <brrt> clearly

[12:49] <timo> it's kind of surprising to see "timo" be free on freenode

[12:50] <timo> Last seen  : Apr 09 14:33:37 2018 (13w 0d 22h ago)

[13:12] <Geth> ¦ MoarVM/du-chains-and-opts: 2649fadef0 | (Jonathan Worthington)++ | 2 files

[13:12] <Geth> ¦ MoarVM/du-chains-and-opts: Correct handling of inc/dec usage

[13:12] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/2649fadef0

[13:12] <Geth> ¦ MoarVM/du-chains-and-opts: acf361f9b5 | (Jonathan Worthington)++ | src/spesh/dead_bb_elimination.c

[13:12] <Geth> ¦ MoarVM/du-chains-and-opts: Remove outdated comment

[13:12] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/acf361f9b5

[13:13] <timo> campaign to turn inc and dec into sp_inc and sp_dec while building the graph which is a two-operand version ...

[13:14] <timo> and on codegen if both registers have stayed the same we turn it back again :P

[13:17] <jnthn> :P

[13:18] <jnthn> D'oh, so it turns out the problem seems to be that a second-pass opt is to blame, and normally we'd not check those, but if we produce an inline from an unspecialized then we do

[13:18] <jnthn> And I know full we'll `set` opts are totally cheating on the SSA form and thus on usage chains too

[13:18] <timo> ooh

[13:18] <jnthn> And all the Rakudo spectest complaints about broken graphs that I looked at seem to stem from that

[13:19] <timo> are the set opts really worth much anyway?

[13:20] <jnthn> Hm, it may actually not be them in the immediate problem case :)

[13:20] <jnthn> They're worthwhile, but need doing proper :)

[13:22] <jnthn> Though actually the immediate thing to blame seems to be something else :)

[13:24] <jnthn> Hm, and now I fixed that the set stuff doesn't seem to casue the upset I expected :)

[13:25] <Geth> ¦ MoarVM: c7627e5113 | (Samantha McVey)++ | 3 files

[13:25] <Geth> ¦ MoarVM: Use platform/stdint.h instead of making own int const macros

[13:25] <Geth> ¦ MoarVM:

[13:25] <Geth> ¦ MoarVM: brrt++ informed me about this. Use this instead of rolling our own.

[13:25] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c7627e5113

[13:28] <Geth> ¦ MoarVM/du-chains-and-opts: 098b7fa4a6 | (Jonathan Worthington)++ | src/spesh/optimize.c

[13:28] <Geth> ¦ MoarVM/du-chains-and-opts: Mark throwcat result as dead writier when goto'd

[13:28] <Geth> ¦ MoarVM/du-chains-and-opts:

[13:28] <Geth> ¦ MoarVM/du-chains-and-opts: If it's possible to rewrite into a `goto`, then we know there's no

[13:28] <Geth> ¦ MoarVM/du-chains-and-opts: possible way we can do a resume. Mark any uses of the result as

[13:28] <Geth> ¦ MoarVM/du-chains-and-opts: being from a dead writer.

[13:28] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/098b7fa4a6

[13:29] <Geth> ¦ MoarVM/du-chains-and-opts: ba0a2447c0 | (Jonathan Worthington)++ | src/spesh/optimize.c

[13:29] <Geth> ¦ MoarVM/du-chains-and-opts: Add DU chain checks after second stage opts too

[13:29] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/ba0a2447c0

[13:29] <jnthn> Rakudo seems much happier now

[13:29] <jnthn> Saw a SEGV then realized I fixed that in master yesterday, but this branch started before then

[13:29] <nwc10> rebase!

[13:29] <nwc10> neuralise it

[13:30] <lizmat> what?

[13:30] <nwc10> nothing. :-)

[13:30] <nwc10> (the branch)

[13:30] <jnthn> Yeah, will do :)

[13:30] <dogbert17> well, there's a SEGV in t/spec/S06-advanced/callframe.t

[13:31] <jnthn> Yes, that and indir.t :)

[13:31] <dogbert17> :)

[13:31] <jnthn> Those are the ones I expect a rebsae to clean up

[13:31] <dogbert17> aha

[13:31] <dogbert17> there's also a 'MoarVM oops: Malformed DU chain: writer goto of 44(7) not in graph'

[13:31] <jnthn> yeah, both of them :)

[13:32] <jnthn> Yes, that one is from the throwcat issue I fixed above

[13:32] <dogbert17> oops, you commit too fast :-)

[13:33] <jnthn> I'll force-push the rebase, so if you have a checkout of the branch, you'll need a new one

[13:34] <Geth> ¦ MoarVM/du-chains-and-opts: 38 commits pushed by (Jonathan Worthington)++, (Timo Paulssen)++

[13:34] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/compare/ba0a2447c0eb...066d9f829b0f

[13:35] * jnthn does another spectest with that

[13:37] <dogbert17> things are looking much better now

[13:39] <jnthn> Yeah, seems so

[13:42] <jnthn> Only t/spec/S06-currying/positional.t is in trouble now

[13:43] <jnthn> MoarVM oops: Malformed DU chain: reading dec_i of 30(64) not in graph

[13:43] <jnthn> tssk

[13:43] <dogbert17> spesh of 'term:sym<name>' (cuid: 507, file: gen/moar/Perl6-Grammar.nqp:3508)

[13:46] <Geth> ¦ MoarVM/du-chains-and-opts: 2fb1bd860f | (Jonathan Worthington)++ | src/spesh/manipulate.c

[13:46] <Geth> ¦ MoarVM/du-chains-and-opts: Fix dec_u/dec_i handling in BB deletion

[13:46] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/2fb1bd860f

[13:46] <jnthn> That fixes it

[13:48] *** Kaiepi left
[13:48] *** Kaiepi joined
[13:49] <jnthn> Now for NODELAY

[14:07] <Geth> ¦ MoarVM/du-chains-and-opts: cf2ed18c24 | (Jonathan Worthington)++ | 2 files

[14:07] <Geth> ¦ MoarVM/du-chains-and-opts: Mark native ref ops as :useshll

[14:07] <Geth> ¦ MoarVM/du-chains-and-opts:

[14:07] <Geth> ¦ MoarVM/du-chains-and-opts: Fixes a spectest regression under NODELAY.

[14:07] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/cf2ed18c24

[14:08] <jnthn> That's not related to the DU-chain things really :)

[14:16] <dogbert17> looks, really good. I do see an asan complaint wrt t/concurrency/01-thread.t but I don't really know if it's realated to your current work or if it's something old

[14:17] <jnthn> Old, I think

[14:19] <dogbert17> I think so too

[14:20] <lizmat> ok, how do I check whether I have a Sub in a QAST::WVal:  nqp::istype($wval.value,Sub) doesn't seem to cut it ?

[14:21] <jnthn> Where are you doing this?

[14:21] <jnthn> You probably need to look up Sub

[14:21] <lizmat> ah, good point

[14:21] <lizmat> R#2040 , fwiw

[14:21] <synopsebot> R#2040 [open]: https://github.com/rakudo/rakudo/issues/2040 no warning for Callable in sink context

[14:31] *** Kaiepi left
[14:32] *** Kaiepi joined
[14:40] *** Voldenet joined
[14:40] *** Voldenet left
[14:40] *** Voldenet joined
[15:16] <Geth> ¦ MoarVM/du-chains-and-opts: 067b103045 | (Jonathan Worthington)++ | src/spesh/optimize.c

[15:16] <Geth> ¦ MoarVM/du-chains-and-opts: Add a couple of missing use_facts calls

[15:16] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/067b103045

[15:18] <jnthn> So interesting

[15:18] <jnthn> I discovered that while we were logging what came out of a decont, we were then never actually using those logged stats

[15:18] <jnthn> So I tried that out.

[15:19] <jnthn> And boom, exploding Rakudo on `use Test`

[15:19] <jnthn> Turns out the above commit fixes it

[15:19] *** brrt left
[15:20] <timo> sweet

[15:20] <jnthn> And stresstest passes with spesh blocking turned on

[15:20] <jnthn> This can have some dramatic effects

[15:21] <jnthn> For example, `my $foo = "blah"; for ^10_000_000 { my int $i = $foo.chars }` could not resolve .chars at spesh time there

[15:21] <jnthn> Now it can

[15:21] <timo> *nice*

[15:21] <jnthn> So instead of taking 2.48s it resolves it, inlines it, and takes 0.90s

[15:21] <lizmat> whee

[15:21] <jnthn> I discovered this because I was going to use this example as a box/unbox elimination example

[15:22] <jnthn> To see if I could use the du-chains to deal with those

[15:22] <jnthn> And then discovered that it wasn't even inlining chars

[15:23] <Geth> ¦ MoarVM/du-chains-and-opts: b8e9de82d6 | (Jonathan Worthington)++ | 2 files

[15:23] <Geth> ¦ MoarVM/du-chains-and-opts: Turn on used of logged stats for decont

[15:23] <Geth> ¦ MoarVM/du-chains-and-opts:

[15:23] <Geth> ¦ MoarVM/du-chains-and-opts: Which lets us insert guards and optimize things that we could not

[15:23] <Geth> ¦ MoarVM/du-chains-and-opts: prior to this change.

[15:23] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/b8e9de82d6

[15:52] <dogbert17> I suddenly get one test failing in t/05-messages/10-warnings.t

[15:53] <dogbert17> not ok 2 - no useless-use warning on return when KEEP/UNDO phasers used

[16:00] *** brrt joined
[16:03] <jnthn> grr, another attempt to tidy things up rumbled by deopt

[16:39] *** robertle left
[16:44] *** domidumont left
[16:51] <lizmat> dogbert17: I'm on it, my bad

[16:52] * lizmat should learn to not just run spectests

[17:02] <lizmat> dogbert17: fixed

[17:02] * jnthn has been tweaking Rakudo signature compilation a bit

[17:02] <jnthn> So we can do one decont, not a load of them

[17:02] *** Kaiepi left
[17:02] <jnthn> Got it a bit nicer at least

[17:02] *** Kaiepi joined
[17:03] <jnthn> Though the patch blows up a handful of spectests, so will have to look at that first.

[17:12] *** brrt left
[17:24] <Geth> ¦ MoarVM/du-chains-and-opts: e838ff93c9 | (Jonathan Worthington)++ | 4 files

[17:24] <Geth> ¦ MoarVM/du-chains-and-opts: Add a maycausedeopt annotation

[17:24] <Geth> ¦ MoarVM/du-chains-and-opts:

[17:24] <Geth> ¦ MoarVM/du-chains-and-opts: We'll use this to know when there's actual risk of deopt in the code

[17:24] <Geth> ¦ MoarVM/du-chains-and-opts: after we've optimzied it, but before we go doing dead instruction

[17:24] <Geth> ¦ MoarVM/du-chains-and-opts: elimination. Often, many potentially deopt-causing things go away due

[17:24] <Geth> ¦ MoarVM/du-chains-and-opts: to the devirtualization, and some log guards are simply unused. Doing

[17:24] <Geth> ¦ MoarVM/du-chains-and-opts: a post-optimization analysis will thus be more precise, and this new

[17:25] <Geth> ¦ MoarVM/du-chains-and-opts: annotation provides the tools to drive it.

[17:25] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/e838ff93c9

[17:26] <dogbert17> lizmat++: it works again

[17:26] <jnthn> Enough for today :)

[17:26] <dogbert17> cooking time perhaps?

[17:26] <jnthn> Well, for this side of the game anyway

[17:26] <jnthn> Yeah, well, warming time, as I cooked aloo gobi for two days yesterday :)

[17:27] <dogbert17> clever move :)

[17:27] <jnthn> bbl o/

[17:46] *** domidumont joined
[17:51] <Geth> ¦ MoarVM/du-chains-and-opts: 0cb8ab0270 | (Elizabeth Mattijsen)++ | src/core/oplist

[17:51] <Geth> ¦ MoarVM/du-chains-and-opts: Fix typo, ven++

[17:51] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/0cb8ab0270

[17:53] <timo> that's menasing

[18:03] <TimToady> the edn justifies the menas

[18:03] *** AlexDaniel joined
[18:17] * lizmat just things you're all mena

[18:17] <lizmat> *thinks

[18:17] <lizmat> argh  :-)

[18:37] *** Kaiepi left
[18:39] *** Kaiepi joined
[18:54] <[Coke]> lizmat: as long as you're in there; "other site" ? could be right, but maybe it meant "other side" ?

[19:14] *** domidumont left
[19:21] *** timo is now known as timotimo

[19:45] *** buggable joined
[20:11] *** Kaiepi left
[20:11] *** Kaiepi joined
[20:13] *** Kaiepi left
[20:13] *** Kaiepi joined
[20:26] <lizmat> [Coke]: no, I think "site" is meant

[20:27] <lizmat> hmmm... maybe you're right

[20:27] <lizmat> jnthn: ^^

[20:39] *** brrt joined
[21:54] *** MasterDuke joined
[21:54] <brrt> hmm, any way I can get a list of STables so that I can print their size

[21:55] <timotimo> STables have fixed size, but the REPR_data might be more interesting

[21:58] <brrt> hmm

[21:58] <brrt> i'm thinking i need the type_object_for thing

[21:59] <timotimo> i'm not sure what you're trying to do so don't know what to suggest :)

[22:06] <brrt> I want to get a table of MoarVM repr sizes

[22:06] <brrt> so that I can calculate the expected waste from aligning to 64 byte

[22:07] <jnthn> [Coke]: Yes, side in this case, though (call)site is a commonly used term in spesh stuff too

[22:07] <jnthn> brrt: Do a heap profile, hack the heap profile analysis tool up to tell you that :)

[22:08] <jnthn> But that doesn't tell you about the nursery content so much

[22:08] <brrt> hmm. that might've been a simpler way

[22:09] <timotimo> oh

[22:10] <timotimo> maybe use heaptrack and see how many how-big allocations happen from functions that create REPR_data?

[22:11] <brrt> hmm, REPR_data is another pointer anyway

[22:11] <brrt> so i'm not too concerned about that

[22:14] <brrt> it appears I overestimated the size of the object header

[22:18] <brrt> ok, i'm confused

[22:18] <brrt> oh, i'm unconfused, i'm printing as hex

[22:33] <brrt> duh

[22:33] <brrt> ok, i have a table of repr sizes, yay

[23:00] *** brrt left
[23:22] <jnthn> I think I might finally have a small "keep less for deopt" optimization that is decidedly limited and conservative, but will at least help a bit.

[23:27] <timotimo> cool, tell us about it :)

[23:27] <timotimo> or just push the commit with the commit message i'm sure you'll craft masterfully

[23:40] <jnthn> Unfortunately, we do a crappy job of maintaining our preds when deleting basic blocks

[23:40] <jnthn> And so my "it's OK" was bogus because it was doing rather less than it should have been

[23:40] <jnthn> So currently re-testing.

[23:41] <jnthn> NQP build/test with blocking spesh is happy with the new version; Rakudo is working on the setting at the moment

[23:43] *** lizmat left
[23:46] <jnthn> make test is OK, make spectest running

[23:53] <timotimo> i'm not sure what your "it's ok" refers to, but i'll find out soon enough

[23:57] <Geth> ¦ MoarVM/du-chains-and-opts: 2bab220aff | (Jonathan Worthington)++ | 3 files

[23:57] <Geth> ¦ MoarVM/du-chains-and-opts: Decrease instructions kept for potential deopt

[23:57] <Geth> ¦ MoarVM/du-chains-and-opts:

[23:57] <Geth> ¦ MoarVM/du-chains-and-opts: We have to retain various instructions that are otherwise unused for

[23:57] <Geth> ¦ MoarVM/du-chains-and-opts: the sake of deopt. Eliminating these is rather delicate in general.

[23:57] <Geth> ¦ MoarVM/du-chains-and-opts: However, it's certain that any linear sequence of non-deopting

[23:57] <Geth> ¦ MoarVM/du-chains-and-opts: instructions at the end of the graph cannot possibly be impacted by

[23:57] <Geth> ¦ MoarVM/du-chains-and-opts: a deoptimization, since there is none that can take place. Thus, walk

[23:57] <Geth> ¦ MoarVM/du-chains-and-opts: backwards over those instructions, clearing their "required for deopt"

[23:57] <Geth> ¦ MoarVM/du-chains-and-opts: markers.

[23:57] <Geth> ¦ MoarVM/du-chains-and-opts: review: https://github.com/MoarVM/MoarVM/commit/2bab220aff

[23:58] <timotimo> oh, not bad

