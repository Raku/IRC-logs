[00:15] *** lizmat left
[01:29] *** ZzZombo left
[02:34] *** ZzZombo joined
[02:34] *** p6bannerbot sets mode: +v ZzZombo

[03:24] *** MasterDuke left
[05:16] *** fake_space_whale left
[05:36] *** domidumont joined
[05:37] *** p6bannerbot sets mode: +v domidumont

[06:43] *** domidumont left
[06:44] *** patrickb joined
[06:44] *** p6bannerbot sets mode: +v patrickb

[06:56] *** brrt joined
[06:57] *** p6bannerbot sets mode: +v brrt

[06:59] <brrt> \o

[07:01] *** domidumont joined
[07:02] *** p6bannerbot sets mode: +v domidumont

[07:32] *** brrt left
[08:04] *** brrt joined
[08:04] *** p6bannerbot sets mode: +v brrt

[08:44] <jnthn> morning o/

[08:45] <nwc10> correct!

[08:45] <nwc10> good *, jnthn

[08:45] <nwc10> \p

[08:45] <nwc10> oops

[08:45] <nwc10> \o

[08:47] <brrt> o/

[08:58] *** lizmat joined
[08:58] *** p6bannerbot sets mode: +v lizmat

[09:00] * brrt wonders about tweaking prepargs into sp_prepargs_nativecall for easier nativecall handling in the JIT

[09:08] *** brrt left
[09:16] <masak> good correct morning \o

[09:24] *** robertle joined
[09:24] *** p6bannerbot sets mode: +v robertle

[09:38] <jnthn> masak: Did you see that the ea work managed to do its first actually useful-to-real-Perl 6 opt? :)

[09:41] <lizmat> jnthn: link ?

[09:43] <jnthn> lizmat: Only the commit log right now: https://github.com/MoarVM/MoarVM/commits/pea

[09:44] <jnthn> See final paragraph of the first commit message of the latest commit

[09:44] <jnthn> s/first//

[09:45] <lizmat> 6% off  wow  :-)

[09:48] <nwc10> "6", that's a nice number

[09:49] <nwc10> some folks seem to get a bit twitchy with certain other nearby integers

[10:08] *** patrickb left
[10:13] *** ZzZombo left
[10:24] *** brrt joined
[10:25] *** p6bannerbot sets mode: +v brrt

[10:28] <nine> brrt: I wonder what the nativecall JIT stuff is gonna look like once you're through with it :)

[10:28] <brrt> I can show you a WIP

[10:29] <nine> jnthn: that's fantastic news :)

[10:29] <brrt> https://gist.github.com/bdw/189cfec71ec13012687c6872b0682f5e

[10:30] <brrt> jnthn++ indeed

[10:31] <brrt> I need to work out how to do the map backwards to the source register for rw arguments

[10:32] <masak> jnthn: I didn't, but that's great news!

[10:32] <masak> jnthn: man, I'm swamped with work this week, otherwise I'd've jumped in and helped somehow

[10:33] <masak> really really really stoked by the ea

[10:34] <nwc10> doubleplusjnthn

[10:36] <tadzik> mmm, ea

[10:42] <jnthn> It's interesting but...tricky :)

[10:42] <masak> well, the "partial" bit does indeed change the landscape a bit

[10:42] <masak> and to Perl 6's advantage, it feels like

[10:43] <jnthn> Yeah. Though there's nothing partial about what's there so far (except being structured so that we can do that)

[10:43] <masak> nodnod

[10:59] <brrt> What is the 'partial' bit of interest here?

[11:01] <jnthn> brrt: Can apply optimizations like scalar replacement up to the point an escape happens, and so materialize it only on paths where required (and during deopt)

[11:01] <masak> it feels to me it rhymes better with things like JIT and, yes, deopt

[11:24] *** ZzZombo joined
[11:24] *** p6bannerbot sets mode: +v ZzZombo

[11:37] <brrt> oh, cool

[11:39] *** patrickb joined
[11:39] *** p6bannerbot sets mode: +v patrickb

[11:44] *** lizmat left
[12:08] *** emerson left
[12:15] *** emerson joined
[12:15] *** p6bannerbot sets mode: +v emerson

[12:45] *** brrt left
[13:47] <jnthn> Hmm

[13:47] <jnthn> Thread 1 "moar" received signal SIGILL, Illegal instruction.

[13:47] <jnthn> Interesting :)

[13:48] <jnthn> Happens in my pea branch during core setting compilation...

[13:49] <nwc10> does valgrind have an opinion?

[13:49] <nwc10> (such as "get a beer, this is going to take a while..." ?)

[13:49] <jnthn> Hm, and it didn't actually perform an optimization...

[13:49] <jnthn> Well, maybe I should sync my branch with master first just in case...

[13:51] <Geth> ¦ MoarVM/pea: 12 commits pushed by (Jonathan Worthington)++, (Carl Masak)++

[13:51] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/compare/5b1db7e4906e...1f5f931d08ab

[13:51] <jnthn> There's a rebase, alas it doesn't help

[13:51] *** lizmat joined
[13:51] *** p6bannerbot sets mode: +v lizmat

[13:52] <jnthn> Even more fun, it explodes that way even if I have the EA commented out

[13:54] <jnthn> Very odd

[13:56] <jnthn> Well, 5238516fb0 is good, so it's in one of the more recent commits in that branch

[13:59] <jnthn> It's 5db6cec it seems.

[14:00] <jnthn> But that doesn't work directly because it trips over something merge_bbs does to the graph

[14:00] <jnthn> So a later commit in that branch had communt out the merge_bbs opt

[14:01] <jnthn> If I do that, it's this commit which ends up with the expr JIT spitting out an illegal instruction

[14:07] <jnthn> And it wasn't the added call to eliminate dead BBs, meaning it must be the fix to the successors handling when rewriting a throwcat into a goto

[14:07] <jnthn> That's pretty bizzare

[14:14] <nine> jnthn: is the base64 encoded return value of nqp::serialize meant for anything other than testing? I.e. may I just change it to return a binary buffer?

[14:14] <jnthn> nine: I think just testing

[14:15] <jnthn> nine: On MoarVM at least; I don't know totally about other backends

[14:19] <jnthn> huh....the frame that it bissects to the specialization of doesn't even have any control flow ops

[14:21] <jnthn> ohhh...it's the commenting out of merge_bbs

[14:21] <jnthn> That makes more sense

[14:21] <jnthn> So my hypothesis is that when we merge some BBs, the expr JIT doesn't reach an instruction it otherwise would

[14:21] <jnthn> And it's producing invalid machine code

[14:22] <jnthn> If it does reach it

[14:27] <nine> Now I know why I went with the base64 encoded string before. Creating a buf8 type in MoarVM's C code will be....a bit involved

[14:27] <jnthn> nine: The typical pattern is to just pass one in

[14:28] <jnthn> Aha!

[14:28] <jnthn> So it turns out if one comments out merge_bbs in *master* then the EXPR JIT spits out code that SEGVs.

[14:28] <jnthn> Paging dr brrt... :)

[14:31] <nine> jnthn: ah, ok. Since I've got to change nqp::serialize anyway, I may as well do that

[14:34] *** brrt joined
[14:35] *** p6bannerbot sets mode: +v brrt

[14:35] <brrt> \o

[14:35] <jnthn> o/

[14:35] <jnthn> Current suspect is reprname

[14:35] <brrt> hmmmm

[14:36] <brrt> let me check the expr code for that

[14:36] <jnthn> If I comment it out then no problem

[14:36] <jnthn> Downstream of it in that BB is const_s, eq_s, and if_i

[14:36] <jnthn> I find those unlikely to be wrong :)

[14:36] <jnthn> Since they're so common we'd presumably know about it :)

[14:37] <brrt> yeah, i'd think so as well

[14:38] <jnthn> (macro: ^repr_id (,obj) (^getf (^repr ,obj) MVMREPROps ID))

[14:38] <jnthn> Is then used here:

[14:38] <jnthn> (template: reprname

[14:38] <jnthn>   (^getf

[14:38] <jnthn>     (load (idx (^get_instance_field repr_list) (^repr_id $1) ptr_sz) ptr_sz)

[14:38] <jnthn>     MVMReprRegistry name))

[14:39] <jnthn> Is that ptr_sz inside of idx the size of the index or the size of the value to read?

[14:39] <jnthn> 'cus the index is a 32-bit int

[14:40] <brrt> oh... that is the size of the item

[14:40] <brrt> it is the scale

[14:41] <jnthn> OK, think that's OK then

[14:41] <brrt> yeah

[14:41] <brrt> hmmm

[14:42] <jnthn> Why do we have idx and load, ooc?

[14:42] <jnthn> idx calculates the offset in memory?

[14:42] <jnthn> Basically, arg1 + arg2 * size?

[14:42] <brrt> correct

[14:42] <jnthn> OK, then that doesn't look like the issue. Hm.

[14:43] <jnthn> Ah, and looked at the getf macro and see it knows about size

[14:44] <jnthn> Color me confused. :)

[14:44] <brrt> yeah, me too

[14:45] <brrt> that macro looks very innocent actually

[14:45] <jnthn> Removing the eq_s template doesn't help

[14:45] <jnthn> So I think it's very likely reprname

[14:45] <jnthn> To repro, just comment out the call to merge_bbs in optimize.c

[14:57] <brrt> ok

[14:58] <jnthn> (in master, don;t even need my branch)

[14:58] <jnthn> *don't

[15:00] <brrt> where does it blow up?

[15:02] <brrt> yay, can repro

[15:02] <brrt> ok, we'll figure it out

[15:05] <jnthn> brrt++

[15:05] <jnthn> m: say 1.772 / 1.886

[15:05] <camelia> rakudo-moar 0425d927f: OUTPUT: «0.939555␤»

[15:07] <jnthn> In `my $s = "foobar"; my $res; for ^10_000_000 { $res = $s.uc.chars }; say $res` I can now eliminate the Str object that .uc wraps its result up in

[15:11] *** fake_space_whale joined
[15:11] *** p6bannerbot sets mode: +v fake_space_whale

[15:22] <timotimo> it's not something to do with jumplists, for example?

[15:25] *** brrt left
[15:27] <Geth> ¦ MoarVM/pea: e65ce5976f | (Jonathan Worthington)++ | src/spesh/pea.c

[15:27] <Geth> ¦ MoarVM/pea: Make it easier to grep out the EA opts

[15:27] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/e65ce5976f

[15:27] <Geth> ¦ MoarVM/pea: 15ab517fee | (Jonathan Worthington)++ | src/spesh/pea.c

[15:27] <Geth> ¦ MoarVM/pea: Handle non-merge case of PHI

[15:27] <Geth> ¦ MoarVM/pea:

[15:27] <Geth> ¦ MoarVM/pea: Sometimes we end up with a PHI that only actually has one soure to

[15:27] <Geth> ¦ MoarVM/pea: merge. In this case, we can track allocations through it.

[15:27] <Geth> ¦ MoarVM/pea:

[15:27] <Geth> ¦ MoarVM/pea: These show up when a call is inlined, since the return value is always

[15:27] <Geth> ¦ MoarVM/pea: put through a PHI (as part of handling multiple returns consistently).

[15:27] <Geth> ¦ MoarVM/pea: Thus this means we can now handle some simple cases of eliminating an

[15:27] <Geth> ¦ MoarVM/pea: allocation that is made in one routine and immediately got rid of in

[15:27] <Geth> ¦ MoarVM/pea: another.

[15:27] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/15ab517fee

[15:34] *** domidumont left
[15:44] *** patrickb left
[15:46] *** zakharyas joined
[15:46] *** p6bannerbot sets mode: +v zakharyas

[15:51] <Geth> ¦ MoarVM/pea: dc36f75615 | (Jonathan Worthington)++ | src/spesh/optimize.c

[15:51] <Geth> ¦ MoarVM/pea: Move PEA phase ahead of other post-inline opts

[15:51] <Geth> ¦ MoarVM/pea:

[15:51] <Geth> ¦ MoarVM/pea: So that we might get more `set` instructions eliminated

[15:51] <Geth> ¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/dc36f75615

[15:53] <jnthn> heh, with that, the following:

[15:53] <jnthn> sub foo() {

[15:53] <jnthn>     my $c := nqp::create(C);

[15:53] <jnthn>     nqp::bindattr($c, C, '$!a', 42);

[15:53] <jnthn>     nqp::getattr($c, C, '$!a');

[15:53] <jnthn> }

[15:53] <jnthn> Turns into just the boxing of the 42

[15:53] <jnthn> No set instructions at all

[15:54] *** fake_space_whale left
[15:58] <lizmat> wow

[16:24] *** AlexDaniel left
[16:24] *** AlexDaniel joined
[16:24] *** asimov.freenode.net sets mode: +v AlexDaniel

[16:24] *** p6bannerbot sets mode: +v AlexDaniel

[16:26] *** lizmat left
[16:30] *** lizmat joined
[16:30] *** p6bannerbot sets mode: +v lizmat

[16:34] *** AlexDaniel` left
[16:34] *** AlexDaniel` joined
[16:34] *** moon.freenode.net sets mode: +v AlexDaniel`

[16:34] *** p6bannerbot sets mode: +v AlexDaniel`

[16:43] *** zakharyas left
[18:08] *** nwc10 joined
[18:09] *** p6bannerbot sets mode: +v nwc10

[18:16] *** patrickb joined
[18:16] *** zakharyas joined
[18:17] *** p6bannerbot sets mode: +v patrickb

[18:17] *** p6bannerbot sets mode: +v zakharyas

[18:55] *** zakharyas left
[19:19] *** brrt joined
[19:19] *** p6bannerbot sets mode: +v brrt

[19:20] <brrt> \o

[19:21] <brrt> jnthn: any idea what numbers you got for the bisect?

[19:21] <timotimo> o/

[19:21] <brrt> ohai timotimo

[19:21] *** zakharyas joined
[19:22] <nine> Stage mast       :  16.172

[19:22] *** p6bannerbot sets mode: +v zakharyas

[19:22] <jnthn> brrt: Sadly, it's on the terminal on my work machine, but I know 1000 was too high and 800 was OK...

[19:22] <yoleaux> 19:20Z <lizmat> jnthn: I'm thinking of adding a IterationBuffer.List and Array method, which would basically do a nqp::p6bindattrinvres(nqp::create(List),List,'$!reified',$buf)

[19:22] <yoleaux> 19:20Z <lizmat> jnthn: s/$buf/self/ , and replace a lot of those calls throughout the setting: for clearer code and possibly smaller candidates

[19:22] <nine> By getting rid of the decode_base64. The scary thing is that it worked on the first try ;)

[19:22] <yoleaux> 19:21Z <lizmat> jnthn: do you think that's a good idea ?

[19:22] <lizmat> my parse / mast: 52.798 / 11.729

[19:23] <nine> Yep, just ~ 5 seconds to find

[19:23] <jnthn> nine: I'm always freaked out when that happens. I put in some simple PHI handling to EA today to try and get it to handle some more cases and that also worked first time :)

[19:24] <jnthn> Then I tried some changes in Perl6::Optimizer to start more aggressive lowering and those blew right up... :)

[19:24] <nine> Until I saw the number, I was convinced that I was running some unmodified code accidentally :)

[19:24] *** AlexDaniel left
[19:24] <jnthn> :)

[19:25] <nine> Btw. that's with copying each byte individually: for(i = 0; i < output_size; i++) { MVMRegister r; r.i8 = output[i]; REPR(result)->pos_funcs.bind_pos(tc, STABLE(result), result, OBJECT_BODY(result), i, r, MVM_reg_int64); }

[19:25] *** AlexDaniel joined
[19:25] <brrt> i'll let jit-bisect take a look

[19:25] <brrt> I need to overhaul that some day

[19:25] <nine> Is there any faster way to set the whole buffer at once?

[19:25] <jnthn> lizmat: Hmm...they're a tad odd in that the List takes ownership...for Array do we know the buffer is already all containers?

[19:25] <nine> Without violating all of 6model that is

[19:25] <lizmat> ok, maybe just for List

[19:25] *** p6bannerbot sets mode: +v AlexDaniel

[19:25] <brrt> now that the jit log and the spesh log have been merged, makes no sense to keep a separate jit sequence nr and spesh sequence nr

[19:26] <jnthn> nine: I was somewhat thinking of putting something new on the REPR API to help with such things...

[19:26] <lizmat> that happens a *lot* in the setting since iterationbuffers don't automatically upgrade to List, as apposed to nqp::list

[19:26] <jnthn> Yeah, it's worth factoring out. I mean, the most conservative way is a Rakudo::Internals.wrap-list or so

[19:27] <nine> jnthn: ok, I'll make sure that this new REPR API thing will be useful for the write* ops, too

[19:28] <jnthn> nine: Yeah, would be good... :)

[19:28] <jnthn> walk, bbiab

[19:28] *** zakharyas left
[19:36] <nine> Alas, calling REPR(result)->pos_funcs.bind_pos a gazillion times hardly slows down anything at all....cause it's C

[19:36] *** AlexDaniel left
[19:36] *** AlexDaniel joined
[19:37] *** p6bannerbot sets mode: +v AlexDaniel

[19:47] *** robertle_ joined
[19:47] *** p6bannerbot sets mode: +v robertle_

[19:56] <jnthn> nine: Yes, the thinking is that we can then specialize and potentially eliminate the call overhead in the JIT too...

[20:04] <nine> And there are more than 2.5 million such calls

[20:05] <brrt> hmm, i can't figure it out so quick either

[20:07] *** patrickb left
[20:07] <jnthn> brrt: Did you figure out if it's reprname or not? :)

[20:10] *** brrt left
[20:20] <lizmat> jnthn: nice tweet, but no link to commaide.com ?  and no mention of new release there ?

[20:21] <jnthn> lizmat: d'oh, I forgot the link :)

[20:21] <jnthn> lizmat: Log in to the subscriber area for release notes :)

[20:22] <lizmat> jnthn: no release notes for casual visitors that may want to buy Comma IDE ?

[20:22] *** brrt joined
[20:23] *** p6bannerbot sets mode: +v brrt

[20:23] <jnthn> lizmat: Hmm, they felt a bit nitty-gritty for marketing purposes. :) Though will update the site soon with a bunch of animated demonstrations of features :)

[20:23] <lizmat> that would be nice for a link in the P6W :-)

[20:26] <brrt> ooh, has there been a weekly yet?

[20:29] <lizmat> https://p6weekly.wordpress.com/2018/10/08/2018-41-merged-the-js/

[20:29] <brrt> hmm, stepping through the code, what I'd expect to be a MVMString really rather not to be

[20:32] <brrt> alright, that doesn't compile to what I'd expect it to compile into at all...

[20:42] *** robertle_ left
[21:25] <timotimo> that sounded promising

[21:25] <timotimo> i wonder what happened

[21:31] <brrt> I'm looking at the wrong frame like a dumbass

[21:38] <timotimo> ^- me at every art exhibition

[21:38] <timotimo> "that's not the art, that's the restaurant menu"

[21:39] <timotimo> "that's not the art, you're just looking at a mirror"

[21:39] <timotimo> "that's not the art, that's a novelty paper shredder machine"

[21:39] *** brrt left
[21:48] <[Coke]> .tell brrt my TPF address is tpf-grants-secretary at perl-foundation.org.

[21:48] <yoleaux> [Coke]: I'll pass your message to brrt.

[21:59] *** avar left
[21:59] *** avar joined
[21:59] *** avar left
[21:59] *** avar joined
[21:59] *** p6bannerbot sets mode: +v avar

[22:00] *** p6bannerbot sets mode: +v avar

[22:23] *** ggoebel left
[22:50] *** ggoebel joined
[22:51] *** p6bannerbot sets mode: +v ggoebel

[23:53] *** avar left
