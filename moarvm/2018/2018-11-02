[00:03] <jnthn> We don't know which slots are the pair for a method cache

[00:03] <jnthn> And we can't just ignore NULL ones because when we inline, the spesh slots are populated

[00:03] <jnthn> Potentially with a method

[00:03] <timotimo> ah, you mean when we've reconstructed the spesh graph from the candidate to build the inline

[00:03] <jnthn> Right

[00:03] <timotimo> yes, indeed

[00:03] <jnthn> Again, solvable somehow

[00:03] <jnthn> But maybe more effort than it's worth

[00:04] <timotimo> similarly we lose all comments on the spesh graphs, but i'd rather not keep them around

[00:04] <jnthn> Known deconted type is probably going away anyway at some point

[00:04] <timotimo> though of course they'd only have to be stored if spesh logging is turned on

[00:04] <jnthn> I can't remember why we still have it

[00:04] <jnthn> It's not reliable data, in general

[00:06] <timotimo> so we guard on it all the time anyway?

[00:06] <jnthn> I hope so :)

[00:06] <jnthn> The problem is that if the container is shared another thread could write to it

[00:07] <jnthn> Debug name of known type would be very useful, though

[00:07] <timotimo> that'd be easy to add

[00:07] <timotimo> though the facts section is already pretty big and messy

[00:17] <jnthn> :)

[00:17] <jnthn> 'night o/

[00:17] <timotimo> night jnthn!

[00:17] *** MasterDuke joined
[00:17] *** p6bannerbot sets mode: +v MasterDuke

[00:18] *** MasterDuke left
[00:18] *** MasterDuke joined
[00:18] *** herbert.freenode.net sets mode: +v MasterDuke

[00:18] *** p6bannerbot sets mode: +v MasterDuke

[00:22] <timotimo> well, that was a simple patch

[00:22] *** lizmat left
[00:23] <Geth> ¦ MoarVM: a74af55855 | (Timo Paulssen)++ | src/spesh/dump.c

[00:23] <Geth> ¦ MoarVM: output known type's debugname in spesh log

[00:23] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a74af55855

[00:28] <timotimo> i wonder what the motivation is behind using bitand_i to combine $pos >= 0 and isconcrete($reified)

[00:55] <timotimo> 0.000760% jit 2,762,500 entries

[00:56] <MasterDuke> m: say 2762500*.00076

[00:56] <camelia> rakudo-moar 94dd0a411: OUTPUT: «2099.5␤»

[00:59] <MasterDuke> timotimo: https://github.com/rakudo/rakudo/commit/0baeec0223

[01:00] *** lizmat joined
[01:00] *** p6bannerbot sets mode: +v lizmat

[01:06] * timotimo is watching moarperf slooowly using more and more RES memory

[01:07] <MasterDuke> as it's doing something? or just while idle?

[01:08] <timotimo> no requests at least; perhaps the websocket connection is pinging or something

[01:11] <timotimo> i see one of the processes waiting for a futex, then waking one, then calling mprotecd, then waiting with the futex again

[01:12] <timotimo> one process is doing nanosleep and getrusage over and over again, i'd assume that's the supervisor thread for the thread pool scheduler

[01:12] <timotimo> that one also calls futex with WAKE_PRIVATE

[01:14] <timotimo> i closed the browser tab that was connected, looks like it's still growing, though.

[01:14] <timotimo> yeah

[01:15] <MasterDuke> think it's something that can be fixed?

[01:21] <timotimo> well, i sure hope so :)

[01:22] <timotimo> it felt faster than 1 megabyte per minute

[01:22] <timotimo> i don't know how i can tell heaptrack to ignore the first 60 seconds or so

[01:26] <timotimo> maybe version 1.1 has something for that, i'm still on 1.0

[01:27] <MasterDuke> you can attach heaptrack to an already running process

[01:28] <timotimo> oh

[01:28] <timotimo> well, that would do it

[01:35] <timotimo> this time it didn't keep growing

[01:37] <MasterDuke> a watched pot never boils, a heaptracked process never grows

[01:38] <timotimo> it did when i had it attached that other time

[01:38] <timotimo> it was just not possible to figure out which of the parts of the stack was the one that was growing

[01:45] <timotimo> attaching it to jjust "pidof moar" gave me a recording of 0.001s run time :\

[01:46] <timotimo> eh. bedtime.

[01:46] <timotimo> gnite!

[01:50] *** Kaiepi joined
[01:51] *** p6bannerbot sets mode: +v Kaiepi

[02:20] *** MasterDuke left
[03:51] *** ggoebel left
[04:07] *** ggoebel joined
[04:07] *** p6bannerbot sets mode: +v ggoebel

[05:00] *** ItchyPlant joined
[05:01] *** p6bannerbot sets mode: +v ItchyPlant

[06:23] *** ItchyPlant left
[07:03] *** domidumont joined
[07:04] *** p6bannerbot sets mode: +v domidumont

[09:26] *** zakharyas joined
[09:27] *** p6bannerbot sets mode: +v zakharyas

[09:28] *** zakharyas left
[09:29] *** zakharyas joined
[09:30] *** p6bannerbot sets mode: +v zakharyas

[11:28] *** evalable6 left
[11:28] *** evalable6 joined
[11:29] *** p6bannerbot sets mode: +v evalable6

[12:04] *** zakharyas left
[12:21] *** brrt joined
[12:22] *** p6bannerbot sets mode: +v brrt

[12:23] <brrt> \o

[12:23] <brrt> .tell lizmat if apple releases a laptop with an A12/A14 chip, that's finally going to be a good reason for me to buy an apple laptop ;-)

[12:23] <yoleaux> brrt: I'll pass your message to lizmat.

[12:24] <brrt> A64 ISA seems like a fun challenge

[12:39] <nine> 10.957s! That's 200ms better than the best value I got from master so far

[12:39] <nine> Followed by 10.911 :)

[12:42] <brrt> nine++ progress

[13:20] <jnthn> Cool! :)

[13:33] *** dogbert17 joined
[13:34] *** p6bannerbot sets mode: +v dogbert17

[14:00] *** zakharyas joined
[14:01] *** p6bannerbot sets mode: +v zakharyas

[14:37] *** lizmat left
[14:51] *** domidumont left
[15:57] *** lizmat joined
[15:57] *** p6bannerbot sets mode: +v lizmat

[16:04] *** robertle left
[16:14] *** brrt left
[16:20] *** brrt joined
[16:21] *** p6bannerbot sets mode: +v brrt

[16:31] *** robertle joined
[16:31] *** p6bannerbot sets mode: +v robertle

[16:37] *** zakharyas left
[17:04] *** avar left
[17:04] *** avar joined
[17:04] *** avar left
[17:04] *** avar joined
[17:04] *** p6bannerbot sets mode: +v avar

[17:05] *** p6bannerbot sets mode: +v avar

[17:31] <timotimo> oooh fabulous

[17:45] <timotimo> i'm still looking for a good solution for identifying specific functions from the core setting when loading a profile

[17:46] <timotimo> since line numbers always change, and there's multi subs and methods with multiple candidates in one file that might be different enough that we want to tell them apart

[17:46] <timotimo> the iterators file is especially bad at this, there's hundreds of push-all and pull-one and such in there

[17:47] <timotimo> one example for "intelligence" would be to see that a user function indirectly calls Bridge on, for instance, Int or Rat

[17:47] <timotimo> and that could be pointed out like "perhaps you can use Num earlier in this computation"

[17:48] <timotimo> imagine code like if $foo < 5 { ... } that would convert 5 to num over and over again without need

[17:48] <brrt> how is that not the job of the optimizer :-)

[17:48] <timotimo> hmm.

[17:49] <timotimo> i'll keep this idea on the drawing board for a bit

[17:49] <timotimo> i'm thinking the profiler should offer (or even default) to combine all threads from one thread pool into a single tree

[17:52] *** domidumont joined
[17:53] *** p6bannerbot sets mode: +v domidumont

[18:09] *** brrt left
[18:38] *** patrickb joined
[18:39] *** p6bannerbot sets mode: +v patrickb

[18:52] *** patrickb left
[18:54] *** fake_space_whale left
[19:35] <japhb> brrt: Intelligence in depth.  It's useful to work to have a good optimizer (and spesh and jit) *and* to detect cases where the optimizer (or spesh or jit) missed out *and* to determine cases where the user is doing something fundamentally difficult to optimize.

[19:36] <japhb> Sortof the same reason at the C level we have all of compiler warnings, valgrind, and *san tools.

[20:04] *** domidumont left
[20:08] *** domidumont joined
[20:09] *** p6bannerbot sets mode: +v domidumont

[20:09] *** domidumont left
[20:28] *** patrickb joined
[20:28] *** p6bannerbot sets mode: +v patrickb

[20:52] *** patrickb left
[21:04] *** lizmat left
[22:12] *** MasterDuke joined
[22:12] *** p6bannerbot sets mode: +v MasterDuke

[22:12] *** MasterDuke left
[22:12] *** MasterDuke joined
[22:12] *** herbert.freenode.net sets mode: +v MasterDuke

[22:12] *** p6bannerbot sets mode: +v MasterDuke

[22:22] *** lizmat joined
[22:22] *** p6bannerbot sets mode: +v lizmat

