[00:01] <Geth> ¦ MoarVM/postrelease-opts: cc3a17414b | (Jonathan Worthington)++ | src/jit/x64/emit.dasc

[00:01] <Geth> ¦ MoarVM/postrelease-opts: Fix JIT of specialized bigint ops

[00:01] <Geth> ¦ MoarVM/postrelease-opts:

[00:01] <Geth> ¦ MoarVM/postrelease-opts: In the case where the result was going into the same register that an

[00:01] <Geth> ¦ MoarVM/postrelease-opts: input argument came from, we stored the result prematurely, and then

[00:01] <Geth> ¦ MoarVM/postrelease-opts: read a NULLed out bigint struct as one of the arguments. This only

[00:01] <Geth> ¦ MoarVM/postrelease-opts: took place in the fallback path and when the earlier requirement was

[00:01] <Geth> ¦ MoarVM/postrelease-opts: meant. Fixes various crashing spectests.

[00:01] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/cc3a17414b

[00:01] <Geth> ¦ MoarVM/postrelease-opts: 40f8a8ba85 | (Jonathan Worthington)++ | src/6model/reprs/P6bigint.c

[00:01] <Geth> ¦ MoarVM/postrelease-opts: Correct indentation

[00:01] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/40f8a8ba85

[00:04] <jnthn> Sadly, while that fixes spectests, it doesn't fix the CORE.setting SEGV. That'll have to wait for another day.

[00:05] <jnthn> Also, it looks like it stands a good chance of having fixed all the unhappy spectests, which means I may really be left with using CORE.setting compilation as the problem example.

[00:05] <jnthn> 'ngiht

[00:07] <timotimo> gnite jnthn

[00:28] <timotimo> the "promoted/cleared/retained bytes" graph looks very funny when the second gc run has 1000x as much in total as all other bars ... by which i mean there's just a single peak and nothing else :D

[00:44] <timotimo> m: say 4294966848.base(16)

[00:44] <camelia> rakudo-moar 0979b7756: OUTPUT: «FFFFFE40␤»

[00:44] <timotimo> huh, i wonder if this was actually a negative value

[00:46] <timotimo> chrome devtools be like "hey, i need all of your CPU for as long as i'm displaying nothing, K?

[00:46] <timotimo> maybe it was connected to how the log was shaking

[00:50] *** squashable6 joined
[00:50] *** p6bannerbot sets mode: +v squashable6

[00:54] <timotimo> ho-hum, the reflog just saved me from losing the code that recorded the type information in the profiler

[01:00] *** lizmat joined
[01:01] *** p6bannerbot sets mode: +v lizmat

[01:10] *** lizmat left
[02:29] *** wictory[m] left
[02:29] *** AlexDaniel` left
[02:29] *** timotimo left
[02:35] *** wictory[m] joined
[02:35] *** p6bannerbot sets mode: +v wictory[m]

[02:37] *** timotimo joined
[02:37] *** p6bannerbot sets mode: +v timotimo

[02:38] *** AlexDaniel` joined
[02:38] *** p6bannerbot sets mode: +v AlexDaniel`

[04:20] *** ggoebel left
[04:34] *** ggoebel joined
[04:35] *** p6bannerbot sets mode: +v ggoebel

[06:47] *** pmn joined
[06:55] *** MasterDuke left
[06:56] *** pmn left
[07:07] *** fake_space_whale left
[07:49] *** domidumont joined
[07:50] *** p6bannerbot sets mode: +v domidumont

[08:01] *** zakharyas joined
[08:02] *** p6bannerbot sets mode: +v zakharyas

[08:12] *** domidumont left
[08:41] *** tktech7 joined
[08:43] *** tktech7 left
[08:44] *** lizmat joined
[08:45] *** p6bannerbot sets mode: +v lizmat

[09:01] *** lizmat left
[09:08] *** lizmat joined
[09:09] *** p6bannerbot sets mode: +v lizmat

[09:17] <Geth> ¦ MoarVM: c43a9b97e1 | (Jeremy Studer)++ | .travis.yml

[09:17] <Geth> ¦ MoarVM: Workaround version failure on Travis CI (MacOS)

[09:17] <Geth> ¦ MoarVM:

[09:17] <Geth> ¦ MoarVM: Travis doesn't fetch the full history (only 50 commits by default) and

[09:17] <Geth> ¦ MoarVM: we use 'git fetch --unshallow' to retrieve the rest. This is necessary

[09:17] <Geth> ¦ MoarVM: to retrieve the tags used in versioning MoarVM. That process does not

[09:17] <Geth> ¦ MoarVM: appear to be working on MacOS currently.

[09:17] <Geth> ¦ MoarVM:

[09:17] <Geth> ¦ MoarVM: Explicitly fetch the full history in order to work around this defect.

[09:17] <Geth> ¦ MoarVM:

[09:17] <Geth> ¦ MoarVM: See [this thread](https://github.com/travis-ci/travis-ci/issues/4942)

[09:17] <Geth> ¦ MoarVM: for more information.

[09:17] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c43a9b97e1

[09:17] <Geth> ¦ MoarVM: 99ddb9d4a4 | (Jeremy Studer)++ | .travis.yml

[09:17] <Geth> ¦ MoarVM: Remove unshallow as it causes error on full repo

[09:17] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/99ddb9d4a4

[09:17] <Geth> ¦ MoarVM: e530be4d35 | (Jonathan Worthington)++ (committed using GitHub Web editor) | .travis.yml

[09:17] <Geth> ¦ MoarVM: Merge pull request #945 from jstuder-gh/travis_tags_mac_os

[09:18] <Geth> ¦ MoarVM:

[09:18] <Geth> ¦ MoarVM: Workaround version failure on Travis CI (MacOS)

[09:18] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e530be4d35

[09:36] *** lizmat_ joined
[09:37] *** p6bannerbot sets mode: +v lizmat_

[09:39] *** lizmat left
[09:41] <AlexDaniel> jnthn: fwiw you can click `Edit` on a PR and change `base:master` to another branch

[09:41] <AlexDaniel> this way you can merge it to, say, postrelease-opts

[09:47] *** stmuk joined
[09:48] *** p6bannerbot sets mode: +v stmuk

[09:49] <jnthn> AlexDaniel: I could, but I've already got a nasty bug to track down in that, and would rather not have another variable factor.

[09:49] <AlexDaniel> ok sure

[09:50] *** stmuk_ left
[09:50] <jnthn> I plan to (once I've fixed the nasty remaining issue I know about) merge postrelease-opts soon after the release

[09:51] <jnthn> If it's possible to get a toaster run of that, it'd be cool, since I'll have time next week to fix things up, but not much time at all for MoarVM/Rakudo things in the 2 weeks after.

[09:51] <AlexDaniel> I see

[09:53] <jnthn> Ideally there'll be no regressions from it, but...shiny new opts don't always work out that way.

[09:54] <AlexDaniel> hmmm but that just means that we should toast it before merging

[09:55] <AlexDaniel> jnthn: so, as far as I understand, to toast it we'd need a branch in nqp and rakudo with appropriate *_REVISION files

[09:56] <AlexDaniel> and that's it

[10:10] *** domidumont joined
[10:11] *** p6bannerbot sets mode: +v domidumont

[10:14] <jnthn> That'd also be an option, yes

[10:15] <jnthn> With the downside that we delay finding stuff that users following HEAD testing it might also find

[10:17] *** lizmat_ is now known as lizmat

[10:21] <dogbert17> are we still looking for the setting SEGV?

[10:24] <dogbert17> jnthn: I guess you already know but if not, the SEGV occurs here: https://github.com/MoarVM/MoarVM/blob/postrelease-opts/src/core/interp.c#L2062

[10:25] <jnthn> Yeah, and it's a null pointer exception. But that tells us approximately nothing about where the real problem is.

[10:26] <dogbert17> so you need something short and sweet, 100% reproducible?

[10:28] <jnthn> I tried getting the same issue out of the spectests, but at least with MVM_SPESH_BLOCKING=1 all the things that broke seemed to be fixed by what I did last night

[10:29] <dogbert17> I got two failures during spectest (t/spec/S06-other/anon-hashes-vs-blocks.t and t/spec/S12-methods/private.t) but trying to repro failed

[10:29] <dogbert17> I could see that no tests were run so they failed early

[10:45] <dogbert17> jnthn: t/09-moar/00-misc.t seems like a good file to run, fails consistently for me

[10:46] <jnthn> That's only because the branch misses a fix from master

[10:47] <dogbert17> :(

[10:47] <dogbert17> damn

[10:54] <lizmat> t/spec/MISC/misc-6.d.t flaps for me, but probably has nothing to do with this

[10:54] <lizmat> test 3: native num defaults to 0e0

[10:54] <dogbert17> jnthn: is it the 'Fix race in setting the type debug name' commit

[10:55] <dogbert17> lizmat: I've had that 0e0 test flap several times

[10:56] <jnthn> dogbert17: yes

[10:56] <dogbert17> thx

[11:07] *** undersightable6 joined
[11:07] *** p6bannerbot sets mode: +v undersightable6

[11:09] <dogbert17> hmm, I cherry picked the fix from master and the error in t/09-moar/00-misc.t disappeared but now I get a consistent fail in t/spec/integration/weird-errors.t

[11:11] <dogbert17> perhaps that's not the correct way of doing things ...

[11:18] <dogbert17> jnthn: take a glance at https://gist.github.com/dogbert17/4b2bc72a9056aaa6fea7e4505c44e7de time permitting

[11:23] *** zakharyas left
[11:38] *** lizmat left
[12:06] <jnthn> I probably *should* work on something else, but will debug this a bit. )

[12:08] <jnthn> Gonna rebase postrelease-opts on master

[12:14] <jnthn> dogbert17: Hm, also interesting

[12:14] <jnthn> Wonder if I can get ASAN to complain about that

[12:15] <jnthn> Good news is that I can reliably repro the CORE.setting optimize stage crash at the office too

[12:15] <jnthn> And my machine here is at least quite a bit faster than at home

[12:17] <jnthn> aha, it just did a deopt in optimize_p6typecheckrv and that's the frame we're in when we crash

[12:17] <jnthn> Deopt one requested by JIT in frame 'optimize_p6typecheckrv' (cuid '65') (4294967295 -> 42)

[12:18] <jnthn> m: say 4294967295.base(16)

[12:18] <camelia> rakudo-moar ea387a12a: OUTPUT: «FFFFFFFF␤»

[12:18] <jnthn> Hmmmm.

[12:31] <jnthn> Only happens when running under the JIT too

[12:35] <dogbert17> jnthn: I updated https://gist.github.com/dogbert17/4b2bc72a9056aaa6fea7e4505c44e7de with ASAN output

[12:36] <jnthn> This makes little sense:

[12:36] <jnthn>       [Annotation: INS Deopt Inline (idx 25 -> pc 104; line 1521)]

[12:36] <jnthn>       [Annotation: INS Deopt Inline (idx 22 -> pc 48; line 1521)]

[12:36] <jnthn>       sp_guardtype     r22(2),  r22(1), sslot(7), litui32(42)

[12:43] <jnthn> dogbert17: Thanks, interesting.

[12:45] *** zakharyas joined
[12:45] *** p6bannerbot sets mode: +v zakharyas

[13:00] <Geth> ¦ MoarVM/postrelease-opts: 53 commits pushed by (Jonathan Worthington)++, (Timo Paulssen)++, MasterDuke17++

[13:00] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/compare/40f8a8ba8580...d7aa26882a40

[13:00] <jnthn> that's the rebase

[13:01] <jnthn> Testing a fix for the CORE.setting SEGV

[13:02] <jnthn> Another of those bugs we had, but only just exposed

[13:03] <dogbert17> cool, so you might have found it

[13:03] <jnthn> Think so

[13:03] <jnthn> Doubt it fixes the other issue though

[13:03] <dogbert17> which is still present after the rebase

[13:04] <jnthn> Yeah, make test should be clean though

[13:05] <jnthn> It's good with my latest fix too

[13:05] <jnthn> make spectest now

[13:05] <jnthn> with spesh blocking on

[13:06] <nwc10> that was the one that I reported?

[13:06] <jnthn> nwc10: CORE.setting crash at stage optimize with null pointer deref?

[13:07] <nwc10> no, MVM_SPESH_NODELAY=1 IIRC caused a setting compilation abort with some sort of error diagnistic

[13:07] <nwc10> IIRC

[13:07] <jnthn> ah

[13:07] <jnthn> No, didn't try it what that

[13:07] <nwc10> or was it the other variable

[13:08] <jnthn> OK, weird-errors.t is the only spectset fail I have left with spesh_blocking

[13:09] <dogbert17> that's sounds like a good result

[13:10] <Geth> ¦ MoarVM/postrelease-opts: 58926538d8 | (Jonathan Worthington)++ | src/spesh/codegen.c

[13:10] <Geth> ¦ MoarVM/postrelease-opts: Populate all deopt points with an offset

[13:10] <Geth> ¦ MoarVM/postrelease-opts:

[13:10] <Geth> ¦ MoarVM/postrelease-opts: Rather than just the first one of each kind that we encounter. With

[13:10] <Geth> ¦ MoarVM/postrelease-opts: more aggressive optimizations, we could end up with multiple of them

[13:10] <Geth> ¦ MoarVM/postrelease-opts: being shuffled onto the same instruction.

[13:10] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/58926538d8

[13:10] <jnthn> And yeah, the weird-errors one is...weird :)

[13:10] <jnthn> It's a bugger overflow

[13:10] <dogbert17> :)

[13:10] <jnthn> uhh

[13:10] <jnthn> *buffer

[13:11] <jnthn> In a bit of code that didn't change for ages, and that I can't see much to go wrong with... :S

[13:12] <jnthn> The way it typically blows up is at free of the thing we went over the end of

[13:12] <jnthn> But ASAN nicely catches it earlier

[13:13] <dogbert17> ASAN++

[13:13] <dogbert17> MVM_SPESH_INLINE_DISABLE=1 makes it vanish

[13:13] <jnthn> oh, hmm

[13:39] <jnthn> (gdb) p cand->handlers[0]

[13:40] <jnthn> $3 = {start_offset = 60, end_offset = 54,

[13:40] <jnthn> umm :)

[13:43] <dogbert17> that looks slightly wrong :)

[13:47] * jnthn tests a fix

[13:49] * dogbert17 dashes out to buy some fikabröd

[13:51] <jnthn> ooh yes, it's almost cookie o'clock...

[13:54] <jnthn> Woo, clean spectest with MVM_SPESH_BLOCKING

[13:54] <Geth> ¦ MoarVM/postrelease-opts: 24d98c64a5 | (Jonathan Worthington)++ | src/spesh/graph.c

[13:54] <Geth> ¦ MoarVM/postrelease-opts: Consider handler with start > end unreachable

[13:54] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/24d98c64a5

[13:54] <Geth> ¦ MoarVM/postrelease-opts: e2fe88f9db | (Jonathan Worthington)++ | src/spesh/graph.c

[13:54] <Geth> ¦ MoarVM/postrelease-opts: Harden against handler start/end on same ins

[13:54] <Geth> ¦ MoarVM/postrelease-opts:

[13:54] <Geth> ¦ MoarVM/postrelease-opts: We could potentially process the start after the end in this case, and

[13:54] <Geth> ¦ MoarVM/postrelease-opts: so leave inconsistent data in the active handlers data array.

[13:54] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/e2fe88f9db

[13:56] <dogbert17> jnthn++

[13:56] <jnthn> NQP is happy with NODELAY too, both build and tests

[13:57] <jnthn> Waiting for Rakudo build with that now

[13:57] <jnthn> Currently doing CORE.setting

[13:58] <jnthn> yay, it builds CORE.setting fine too

[13:58] <dogbert17> hooray

[13:58] <jnthn> Gets through the whole Rakudo build. Now for make test

[13:59] <jnthn> Ah, that's less good :/

[14:00] <dogbert17> nooo

[14:03] <nwc10> pavent pizza?

[14:03] <nwc10> pavement

[14:04] <jnthn> Lots of fails, but all looking to have one root cause

[14:04] <jnthn> (Module loading gets broked)

[14:04] <nwc10> "insufficient cookies"?

[14:05] <ilmari> ooh, that reminds me, office snacktime!

[14:05] <ilmari> (yes, I have had lunch)

[14:05] <nwc10> and the london.pm social?

[14:06] <nwc10> ilmari++

[14:13] <ilmari> gah, I forgot, it's in the other building on thursdays

[14:14] <nwc10> does this make it acceptable to nip out for a swift pint instead?

[14:14] <nwc10> "no, not on a logged channel"

[14:15] *** brrt joined
[14:16] *** p6bannerbot sets mode: +v brrt

[14:16] <ilmari> I already had lunch...

[14:16] <brrt> \o

[14:16] <nwc10> o/

[14:56] *** brrt left
[14:56] *** brrt joined
[14:57] *** CoJaBo13 joined
[14:57] *** p6bannerbot sets mode: +v brrt

[14:58] *** CoJaBo13 left
[15:03] *** fake_space_whale joined
[15:04] *** p6bannerbot sets mode: +v fake_space_whale

[15:21] <jnthn> Grr, so I was like "oh wow, getdynlex would never work if inlined!" and "fixed" that...then discovered that it was marked :noinline

[15:22] <jnthn> I didn't fix the problem I'm hunting, but it seems I accidentally implemented an optimization :P

[15:25] <[Coke]> a pleasant oops.

[15:26] <jnthn> Hm, actually it won't work :)

[15:26] <jnthn> I think it may genuinely be a fix though.

[15:26] <jnthn> But still not for my bug :P

[15:30] <jnthn> Ah, I think I found my one

[15:31] <jnthn> Inlining loadbytecode goes badly

[15:32] <jnthn> And I can see why too

[15:33] <jnthn> We don't recognize it as an invoke

[15:36] <dogbert17> I hope you didn't miss cookie time :)

[15:37] <jnthn> I didn't, but I ate all the cookies and now have none left for tomorrow

[15:37] * TimToady still thinks occasionally about the idea of storing an authoritative dynvar cache only in frames that add a dynvar, and just carrying a link to the nearest one

[15:38] * brrt had another idea which I wanted to annoy you with

[15:39] <brrt> see, from my understanding, dynamic variables in perl5 are implemented as globals, and when localized, the compiler inserts a swap-to-and-from

[15:39] <brrt> or the interpreter executes them, I don't know and it doesn't matter

[15:39] <TimToady> we abandoned that on purpose

[15:39] <brrt> what was the purpose

[15:39] <Geth> ¦ MoarVM/postrelease-opts: c20d5112f0 | (Jonathan Worthington)++ | src/jit/x64/emit.dasc

[15:39] <Geth> ¦ MoarVM/postrelease-opts: Bring JIT of getlexreldyn in line with interp

[15:39] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/c20d5112f0

[15:39] <Geth> ¦ MoarVM/postrelease-opts: 8063990bc4 | (Jonathan Worthington)++ | 2 files

[15:39] <Geth> ¦ MoarVM/postrelease-opts: Do not inline loadbytecode

[15:39] <Geth> ¦ MoarVM/postrelease-opts:

[15:39] <Geth> ¦ MoarVM/postrelease-opts: It makes various invocations, and we don't end up with the calling

[15:39] <Geth> ¦ MoarVM/postrelease-opts: point properly tracked as a deopt point, in turn breaking things like

[15:39] <TimToady> make them thread-safer, for one

[15:39] <brrt> because that is a very efficient way to implement them

[15:39] <Geth> ¦ MoarVM/postrelease-opts: dynamic variable resolutions very close to the point that did the

[15:39] <Geth> ¦ MoarVM/postrelease-opts: loadbytecode.

[15:39] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/8063990bc4

[15:39] <TimToady> and avoid globals

[15:40] <brrt> bind them to a threadcontext, and they're thread safe

[15:40] <brrt> (rather than to the global instance)

[15:40] <timotimo> except when you resolve the dyn vars that were active when you "start"ed a piece of code

[15:40] <timotimo> and it runs on another thread :)

[15:40] <jnthn> Who wants to write the fixup code when a continuation migrates thread? :)

[15:40] <timotimo> moarvm will write it for us!

[15:40] <jnthn> But also, whatever happens need to deal with inlining

[15:40] <timotimo> so we just need someone to write the code that writes the fixup code

[15:41] <jnthn> Because what happens if you inline a frame that declares dynamic variables?

[15:41] <jnthn> Then some of the cache is only applicable for part of the frame

[15:41] <brrt> the push-and-pop become part of the inlined code

[15:42] <jnthn> Not saying it ain't possible, just that this all has to be thought about

[15:42] <TimToady> it's also just terribly fragile without strict RAII, which p5 has

[15:42] <brrt> also, the fixup for continuations isn't so hard, I think? we swap the pointer to the table?

[15:42] <brrt> thing is, we do have that, in terms of special-return

[15:43] <jnthn> So with the above commits we're back to `make test` in Rakudo being happy under NODELAY :)

[15:43] <brrt> \o/

[15:44] <TimToady> anyway, we have "temp" if you want it, which does that already

[15:44] <brrt> hmmm

[15:46] <jnthn> spectset has a little unhappiness

[15:46] <jnthn> As in, "a little more than the amount we tend to tolerate" :)

[15:47] <TimToady> .oO(Better red than dead?)

[15:47] <dogbert17> any test file in particular?

[15:47] <jnthn> dogbert17: The one I looked at was int-unit

[15:48] *** brrt left
[15:48] <dogbert17> and I got a fail, before applying your latest fix, in t/spec/S32-hash/antipairs.t

[15:49] <dogbert17> ah, a classic which timotimo will recognize

[15:49] <dogbert17> 0x00007ffff765fb24 in MVM_gc_mark_collectable (tc=0x604a70, worklist=0x356ced0, new_addr=0x365f4a8) at src/gc/collect.c:370

[15:49] <dogbert17> 370         MVM_gc_worklist_add(tc, worklist, &(tc->instance->all_scs[sc_idx]->sc));

[15:51] <dogbert17> where sc_idx contains a bogus value

[15:51] <TimToady> anyway, we could replace the currently cached dyn value in the frame with a direct pointer to the next cache to look at without growing the frame

[15:51] <TimToady> the only cost is an extra data structure on frames that declare a dynvar

[15:52] <TimToady> and could just use the same pointer, with a flag saying it belongs to us

[15:52] <jnthn> One problem (that we probably need to solve anyway) is that the VM currently doesn't understand which lexicals are dynamic or not (in terms of declaration; the lookup is carried with the op)

[15:53] <TimToady> presumably we could cache negative lookup results as well, which is what I mean by authoritative

[15:53] <TimToady> right, and the whole $_ problem you were talking about the other day

[15:53] <TimToady> I'm fine with tweaking the language to make everything faster :)

[15:54] <jnthn> Was about to ask about that one :)

[15:55] <TimToady> where "tweak" probably excludes throwing out the containers ;)

[15:56] * TimToady actually backlogged the three weeks he was out of touch, thanks to a newly-written log colerizer that helped his poor eyes skim better

[16:05] <dogbert17> so there seems to be 'one' bug left to find

[16:06] <jnthn> haha...if only :P

[16:08] <TimToady> That's an off-by-∞/1 error?

[16:08] <jnthn> Some days, it feels like it :P

[16:21] <jnthn> OK, lots of the NODELAY spectest fails are fixed

[16:21] <jnthn> need to look at the results of the latest run but I suspect there'll be one remaining thing I should really look at

[16:24] <dogbert17> and what might that be?

[16:24] <nwc10> stock levels in the cookie jar? or the beer fridge?

[16:25] <Geth> ¦ MoarVM/postrelease-opts: 9a6adf2612 | (Jonathan Worthington)++ | 3 files

[16:25] <Geth> ¦ MoarVM/postrelease-opts: Make forceouterctx more forgiving

[16:25] <Geth> ¦ MoarVM/postrelease-opts:

[16:25] <Geth> ¦ MoarVM/postrelease-opts: * Try going for an outer frame if the immediately available one is

[16:25] <Geth> ¦ MoarVM/postrelease-opts:   inlined (this will work together with a change in Rakudo to mark

[16:25] <Geth> ¦ MoarVM/postrelease-opts:   frames that use `EVAL` as no-inline, and mean that `try EVAL $x`

[16:25] <Geth> ¦ MoarVM/postrelease-opts:   will work out fine)

[16:25] <Geth> ¦ MoarVM/postrelease-opts: * If that doesn't work, don't SEGV, but throw

[16:25] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/9a6adf2612

[16:28] <jnthn> dogbert17: A couple blow up with "MoarVM panic: Spesh codegen: out of range BB index 108"

[16:29] <dogbert17> aha, haven't seen those

[16:29] <dogbert17> does this give you any ideas? https://gist.github.com/dogbert17/47efe57d0706a76b351789cd809ec4da

[16:29] <jnthn> t/spec/S04-declarations/constant-6.d.t does it

[16:30] <jnthn> dogbert17: I've no clue what that one would be

[16:30] <dogbert17> darn

[16:31] <dogbert17> note that I had small nursery + MVM_GC_DEBUG set there

[16:33] *** fake_space_whale left
[16:36] <jnthn> Above blow-up is something wrong with merge_bbs

[16:41] <dogbert17> would be nice if ASAN could help out here

[16:41] <jnthn> Well, it's a panic due to a malformed graph

[16:41] <jnthn>       goto            BB(108)

[16:41] <jnthn>     Successors: 108, 80

[16:42] <jnthn> That goto should really be to BB(80)

[16:42] <dogbert17> have you managed to repro?

[16:42] <jnthn> Oh yeah, it's very stable

[16:42] <jnthn> Happens every time

[16:43] <dogbert17> as good as it gets then :)

[16:43] <jnthn> And if I comment out the call to merge_bbs then it goes away

[16:43] <dogbert17> ah

[16:44] <jnthn> hm, and I moved the call to that a bit later

[16:45] <Geth> ¦ MoarVM/postrelease-opts: 544ee885aa | (Jonathan Worthington)++ | src/spesh/optimize.c

[16:45] <Geth> ¦ MoarVM/postrelease-opts: Revert "Do basic block merging as the last step"

[16:45] <Geth> ¦ MoarVM/postrelease-opts:

[16:45] <Geth> ¦ MoarVM/postrelease-opts: This reverts commit d84778a0f9958d89b3bb61855e2aed69ad48be6a, which

[16:45] <Geth> ¦ MoarVM/postrelease-opts: caused some breakage. Also, it might well have been better placed (or

[16:45] <Geth> ¦ MoarVM/postrelease-opts: at least just as well placed) beforehand anyway.

[16:45] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/544ee885aa

[16:47] <dogbert17> oops, a revert

[16:47] <jnthn> That helps :)

[16:48] <jnthn> I'm not convinced it was an improvemnet to move it anyway

[16:48] <jnthn> That'll fix 2 more. Then there's t/spec/S32-num/expmod.rakudo.moar left, which is a SEGV under the JIT

[16:49] <dogbert17> is that with MVM_SPESH_NODELAY=1 ?

[16:49] <jnthn> Yup

[16:49] <jnthn> And blocking

[16:50] <dogbert17> ok

[16:51] <jnthn> Hm, commenting out JIT of the various new bigint ops still gets me a fail, even though it's in that area

[16:51] <dogbert17> 0  0x00007f100f4869e7 in get_bigint_body (obj=0x40b28b8, tc=0xe0fa70) at src/math/bigintops.c:148

[16:51] <dogbert17> 148         return (MVMP6bigintBody *)REPR(obj)->box_funcs.get_boxed_ref(tc,

[16:51] <jnthn> Yeah, same as I see

[16:52] <jnthn> ah, not me :)

[16:53] <jnthn> It's an expr jit sensitive one

[16:53] <jnthn> I suspect this occurs on master too, then

[16:53] <dogbert17> running under valgrind uncovers

[16:54] <dogbert17> an invalid read so not much new there, was the same line

[16:55] <dogbert17> aha it vanishes, for me, with MVM_JIT_EXPR_DISABLE=1

[16:56] <jnthn> yup; I'm guessing there's a bug in the template

[16:56] *** japhb left
[16:57] <dogbert17> something for brrt perhaps

[17:01] <dogbert17> don't forget dinner

[17:01] *** slackjeff joined
[17:02] *** zakharyas left
[17:04] <jnthn> heh, I found a way to make it give all the wrong answers instead of segfault :)

[17:04] *** slackjeff left
[17:05] *** zakharyas joined
[17:05] *** p6bannerbot sets mode: +v zakharyas

[17:06] <jnthn> oh, I also found a way that works

[17:06] <jnthn> I don't understand *why*

[17:06] <jnthn> :)

[17:08] *** japhb joined
[17:09] *** p6bannerbot sets mode: +v japhb

[17:11] <Geth> ¦ MoarVM/postrelease-opts: db0e310c36 | (Jonathan Worthington)++ | src/jit/core_templates.expr

[17:11] <Geth> ¦ MoarVM/postrelease-opts: Fix expmod_I template

[17:11] <Geth> ¦ MoarVM/postrelease-opts:

[17:11] <Geth> ¦ MoarVM/postrelease-opts: Or at least, change it so it works. My gut feeling is that the way

[17:11] <Geth> ¦ MoarVM/postrelease-opts: it was before should produce better code (doesn't need to save a

[17:11] <Geth> ¦ MoarVM/postrelease-opts: value during a call), and that the change I've done should have had

[17:11] <Geth> ¦ MoarVM/postrelease-opts: no semantic effect.

[17:11] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/db0e310c36

[17:12] <jnthn> .tell brrt https://github.com/MoarVM/MoarVM/commit/db0e310c36 makes `MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 ./perl6-m t/spec/S32-num/expmod.rakudo.moar` pass (before that commit it was SEGV), but I'm not sure why. :)

[17:12] <yoleaux> jnthn: I'll pass your message to brrt.

[17:12] <dogbert17> impressive

[17:13] <jnthn> Confusing :)

[17:13] <jnthn> But either I learn something or we found an expr jit bug

[17:13] *** badon20 joined
[17:14] <jnthn> Darn, it was too hot to sleep with a blanket and I've ended up with a bunch of insect bites, all of which itch :/

[17:14] <jnthn> But...

[17:14] <dogbert17> is it still hot

[17:14] *** p6bannerbot sets mode: +v badon20

[17:14] <jnthn> Today is probably the last day of too hot weather!

[17:14] <jnthn> Yes, 33C

[17:15] <dogbert17> gah, that's way too much

[17:15] <jnthn> Indeed.

[17:15] <jnthn> It's been 4+ weeks of mostly way too hot

[17:15] *** badon20 left
[17:15] <jnthn> But it should finally improve from tomorrow, and next week looks like mid-20s at the very most

[17:15] <dogbert17> that's definitely more comfortable

[17:16] <[Coke]> (too hot) I am a bad human and use too much AC

[17:17] <jnthn> If I had AC I'd use it too :P

[17:17] <jnthn> Prague's weather isn't supposed to be like this

[17:17] <jnthn> Though I fear it's the new normal

[17:17] <jnthn> Given that every year since I've been here has been above average

[17:18] <jnthn> Things look rather better with today's fixes :)

[17:18] <dogbert17> indeed, is mergeable, after the release ofc?

[17:18] <dogbert17> *is it

[17:20] * [Coke] deliberately misreads that as "Prague's weather looks rather better with today's fixes"

[17:27] <jnthn> That fix is still to come (thunderstorm :))

[17:28] <jnthn> OK, enough for now :)

[17:29] <jnthn> And tomorrow I really had better work on all the things I was meant to do today :P

[17:30] <jnthn> bbl o/

[17:31] <[Coke]> jnthn: I feel like you have described my $DAYJOB this week.

[18:49] *** lizmat joined
[18:49] *** brrt joined
[18:49] *** p6bannerbot sets mode: +v lizmat

[18:50] *** p6bannerbot sets mode: +v brrt

[18:50] <brrt> \o

[18:50] <yoleaux> 17:12Z <jnthn> brrt: https://github.com/MoarVM/MoarVM/commit/db0e310c36 makes `MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 ./perl6-m t/spec/S32-num/expmod.rakudo.moar` pass (before that commit it was SEGV), but I'm not sure why. :)

[18:50] <brrt> well, fortunately I do

[18:54] <jnthn> Ah, good :)

[18:54] <jnthn> Well, depending on the explanation :P

[18:54] *** zakharyas left
[19:00] * brrt left a note on the commit

[19:00] <brrt> https://github.com/MoarVM/MoarVM/commit/db0e310c36#r30270684

[19:00] <brrt> (I love how nearly everything in github is linkable, btw)

[19:01] <jnthn> :)

[19:01] <brrt> ... having a sigil change for pointer-typed operands seems like a way to have less template bugs, and less template bugs is pretty high on the priority list. Only choice is 'which one'

[19:01] <jnthn> Thanks for explaining; wrote a follow-up comment, should probably try swapping it back with the change to see

[19:01] <brrt> aha, hmm

[19:02] <brrt> if changing to $res only didn't work, that looks like I have a register allocator bug on my hands

[19:02] <brrt> I will check it out

[19:02] <jnthn> It was the end of the day and hot, so I mighta messed up :)

[19:02] <brrt> :-)

[19:03] <brrt> available sigils: [~`%*_+'<>\/]

[19:03] <brrt> hell, we could even do {0}

[19:04] <brrt> or <, >, .

[19:04] <jnthn> Too bad we don't have & :)

[19:04] <brrt> (Or, even, \$0

[19:04] <brrt> & is taken for macro's

[19:05] <brrt> C macro's

[19:05] <jnthn> \$0 is Perl-y

[19:05] <brrt> hmmm

[19:05] <jnthn> I guess * is pointer-y put the wrong way around perhaps :)

[19:05] <brrt> I could be swayed for another sigil for C-macro's, but I kind of like \$0 now

[19:14] *** lizmat left
[19:25] *** domidumont left
[19:29] <dogbert17> jnthn: might possibly have found something useful, https://gist.github.com/dogbert17/a6ee6ddd172ad3ff57c0096eca767716

[20:13] <jnthn> ooh, that's a good one

[20:15] <jnthn> Let's see if I can get it to happen here

[20:19] <jnthn> No joy reproducing it here

[20:20] <nwc10> jnthn: MoarVM on origin/postrelease-opts, + #define MVM_SPESH_CHECK_DU 1 + export MVM_SPESH_NODELAY=1

[20:20] <nwc10> NQP build explodes. I think on gen/moar/stage1/NQPP6QRegex.moarvm

[20:21] <nwc10> OK, no, not that. but it does explode with a lot of spesh backtrace

[20:22] <jnthn> Ah, that's probably from the graph checker

[20:22] *** brrt left
[20:23] <nwc10> of course, now I think I'm re-running with the same setup and it's working

[20:23] <jnthn> You generally want MVM_SPESH_BLOCKING=1 in there too, or it's not going to be reproducible

[20:23] <nwc10> but something reliably went boom earlier, and I thought I'd pared it down to the minimum amount of non-default

[20:23] <nwc10> aha

[20:24] <jnthn> Though if you have the spesh backtrace to hand still, there's a decent chance I can figure out what happened from it

[20:24] <nwc10> can probably do that soon

[20:27] <nwc10> http://paste.scsys.co.uk/581554

[20:27] <nwc10> all 1545 lines

[20:28] <nwc10> I hope

[20:28] *** lizmat joined
[20:28] <dogbert17> jnthn: I can't say that it happens every time I'm afraid

[20:28] <nwc10> I need to go to bed (been up for too long) so can't re-run that tonight

[20:29] *** p6bannerbot sets mode: +v lizmat

[20:31] <dogbert17> I can repro it once in approximately ten runs

[20:39] <Geth> ¦ MoarVM/postrelease-opts: ce2b91771f | (Jonathan Worthington)++ | src/core/fixedsizealloc.c

[20:39] <Geth> ¦ MoarVM/postrelease-opts: Simplify realloc_at_safepoint debug code

[20:39] <Geth> ¦ MoarVM/postrelease-opts:

[20:39] <Geth> ¦ MoarVM/postrelease-opts: No need to add on to a pointer only to subtract from it again.

[20:39] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/ce2b91771f

[20:39] <Geth> ¦ MoarVM/postrelease-opts: ec83f8cf5a | (Jonathan Worthington)++ | src/gc/collect.c

[20:39] <Geth> ¦ MoarVM/postrelease-opts: Add debugging range check on SC index

[20:39] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/ec83f8cf5a

[20:39] <jnthn> nwc10: thanks

[20:39] <jnthn> dogbert17: I can't yet repro it in at least that many runs, but it's maybe worth seeing if it trips that new debug check I added

[20:41] <jnthn> away for a bit :)

[20:41] <dogbert17> which check is that?

[20:41] <dogbert17> sry, will learn how to read

[20:42] *** MasterDuke joined
[20:42] *** p6bannerbot sets mode: +v MasterDuke

[20:42] *** MasterDuke left
[20:42] *** MasterDuke joined
[20:42] *** herbert.freenode.net sets mode: +v MasterDuke

[20:42] *** p6bannerbot sets mode: +v MasterDuke

[20:43] <dogbert17> ok 14 - Updated value seen by non-atomic too

[20:43] <dogbert17> MoarVM panic: SC index out of range

[20:53] <dogbert17> jnthn: the gist of the matter - https://gist.github.com/dogbert17/24e6033ef092560ab1d6e3c8cfdfb444

[21:59] <jnthn> dogbert17: Thanks. Unfortunately, that makes the ASAN output a little less helpful in figuring out any more

[21:59] <jnthn> (It's just an overrun)

[21:59] <jnthn> (But because the sc index is way too high)

[22:00] <jnthn> Wow, it's entirely bogus

[22:02] *** lizmat left
[22:03] <MasterDuke> i think that's usually the case (that the sc index is so high as to be bogus)

[22:05] <jnthn> Very odd

[22:09] <timotimo> i don't think i've checked yet if it perhaps got negative for some odd reason

[22:10] <timotimo> m: say 55807408.base(16)

[22:10] <camelia> rakudo-moar ea387a12a: OUTPUT: «3538DB0␤»

[22:10] <timotimo> not really, no

[22:16] <MasterDuke> timotimo: is this the sort of thing rr would be good for? you could watch sc_index backward in time?

[22:18] *** enonvf joined
[22:19] <timotimo> sounds plausible

[22:19] *** p6bannerbot sets mode: +v enonvf

[22:23] *** enonvf left
[22:29] *** lizmat joined
[22:30] *** p6bannerbot sets mode: +v lizmat

[22:36] *** njm joined
[22:36] *** p6bannerbot sets mode: +v njm

[23:08] *** lizmat left
[23:09] <jnthn> Interesting. One of my work apps managed to trip the fromspace assert during spesh plugin evaluation

[23:10] <jnthn> I placed some more and it turns out it's the value being fed in as an argument to the plugin that is bad

[23:10] <jnthn> However, I can only get it to happen with the JIT

[23:19] <jnthn> It's raining! \o/

[23:19] <timotimo> \o/

[23:19] <timotimo> we had a bunch of water fall onto our surroundings, as well

[23:21] <jnthn> Forecast for tomorrow is a more sensible temperature, and the weekend will be decidedly more pleasant :)

[23:22] <MasterDuke> jnthn: how come the MVM_repr_alloc_init in the interp.c version of expmod_I doesn't need to be MVMROOTed?

[23:23] <MasterDuke> compared to the other ops that do the MVM_repr_alloc_init in the function

[23:23] <jnthn> What would be rooted?

[23:24] <jnthn> type is the only local and it's not used after the allocation

[23:24] <MasterDuke> ah

[23:24] <jnthn> And GET_REG reads from the registers, which will be marked

[23:24] <jnthn> So it's safe

[23:25] <MasterDuke> fwiw, i'm working on a branch to convert it to allocating in the function (and make the _I ops a little more consistent overall)

[23:30] <jnthn> consistency++

[23:30] <jnthn> There may be more ops that we can add sp_*_I variants of too

[23:58] <jnthn> 'night o/

