[01:48] *** lizmat left
[02:03] *** lizmat joined
[02:03] *** p6bannerbot sets mode: +v lizmat

[03:31] <Geth> Â¦ MoarVM: 40d7eb998d | (Timo Paulssen)++ | src/jit/graph.c

[03:31] <Geth> Â¦ MoarVM: Allow JIT To Devirtualize slice, Not Just splice

[03:31] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/40d7eb998d

[03:31] <timotimo> in case of insomnia: hack on the JIT

[04:04] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: e667a3441a | (Timo Paulssen)++ | 3 files

[04:04] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: JIT Devirtualize atpos_o To A Smaller Function

[04:04] <Geth> Â¦ MoarVM/devirtualize_vmarray_access:

[04:04] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: when the jit already knows the type of VMArray,

[04:04] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: especially the slot kind, it can skip not only

[04:04] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: the big switch/case for "which slot type do we have?"

[04:04] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: but also the check for slot and register mismatch

[04:04] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: that would throw an exception at run time.

[04:04] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: review: https://github.com/MoarVM/MoarVM/commit/e667a3441a

[04:20] <timotimo> could actually also devirtualize delegation of positionals/associatives in p6opaque

[07:50] *** domidumont joined
[07:50] *** p6bannerbot sets mode: +v domidumont

[08:58] *** domidumont left
[09:22] *** lizmat left
[12:41] *** lizmat joined
[12:41] *** p6bannerbot sets mode: +v lizmat

[15:13] <Geth> Â¦ MoarVM/jit-expr-float: 6 commits pushed by (Bart Wiegmans)++

[15:13] <Geth> Â¦ MoarVM/jit-expr-float: 7cae033049 | [DynASM] Take in REX encoding fix

[15:13] <Geth> Â¦ MoarVM/jit-expr-float: 362c1dee35 | [JIT] Use bitmap for free register set

[15:13] <Geth> Â¦ MoarVM/jit-expr-float: b6d40fc236 | [JIT] Autogenerate tile predeclarations

[15:13] <Geth> Â¦ MoarVM/jit-expr-float: db9376d03f | [JIT] Compile minilua with only the needed flags

[15:13] <Geth> Â¦ MoarVM/jit-expr-float: 386a983ba5 | [JIT] Move JIT-compile support libs to tools/lib

[15:13] <Geth> Â¦ MoarVM/jit-expr-float: 6e05007e97 | [JIT] Parse oplist operands

[15:13] <Geth> Â¦ MoarVM/jit-expr-float: review: https://github.com/MoarVM/MoarVM/compare/8eaddd91a347...6e05007e9702

[16:23] <timotimo> the computer i'm at, and the one i can access via ssh aren't stable performance-wise; can somebody build and run a benchmark to see if atpos_o gets any faster with the devirtualize_vmarray_access branch?

[16:29] <timotimo> i ran a fannkuch implementation with callgrind which is supposed to eliminate influence of cpu scheduling and other distractions, but it showed more Ir with than without devirtualize, which is, to say the least, not what i had hoped for :)

[16:29] <timotimo> but a quick perf record also showed only like 0.2% samples inside the "improved" atpos implementation

[16:29] <timotimo> so maybe it's far too low in actual usage to register at all

[16:36] *** lizmat left
[17:15] *** TimToady left
[17:20] *** TimToady joined
[17:21] *** p6bannerbot sets mode: +v TimToady

[17:28] *** lizmat joined
[17:28] *** p6bannerbot sets mode: +v lizmat

[18:00] <timotimo> oh, when's the last time we checked for a new libuv version?

[18:01] <timotimo> the version i have in 3rdparty is 4 months old

[19:34] <timotimo> hum. when i rely on a fact in the jit, i have no way to signal back to spesh to keep guards around that ensure these flags, so do we actually have a step in spesh that clears flags that weren't relied upon so that the jit doesn't accidentally read a non-guaranteed fact?

[19:42] <timotimo> uh oh, i think my last master commit may be wrong

[19:43] <timotimo> oh how easy it is to mess up jitting :D

[19:47] <timotimo> aha slice and splice are actually different enough to b0rk

[19:49] <Geth> Â¦ MoarVM: 4c8e842a45 | (Timo Paulssen)++ | src/jit/graph.c

[19:49] <timotimo> a job for later when headache is less

[19:49] <Geth> Â¦ MoarVM: Revert "Allow JIT To Devirtualize slice, Not Just splice"

[19:49] <Geth> Â¦ MoarVM:

[19:49] <Geth> Â¦ MoarVM: This reverts commit 40d7eb998d23dcf2246147080e2c79c10327ecce.

[19:49] <Geth> Â¦ MoarVM:

[19:49] <Geth> Â¦ MoarVM: The op signatures of splice and slice differ, this

[19:49] <Geth> Â¦ MoarVM: devirtualization broke slice.

[19:49] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4c8e842a45

[19:53] <timotimo> ooh, slice has a repr_alloc_init built-in

[19:53] <timotimo> well, i can do that

[19:53] <timotimo> i can even fastallocate that, i bet!

[19:54] <timotimo> fastcreate*

[19:56] <timotimo> oh, that requires adding another spesh slot. can that still be done in the jit? might be too late perhaps?

[19:56] <timotimo> let's try it and see how violently it explodes :) :)

[20:33] <Geth> Â¦ MoarVM: afd8f93706 | (Timo Paulssen)++ | src/jit/graph.c

[20:33] <Geth> Â¦ MoarVM: JIT Devirtualize slice (and the create it implies)

[20:33] <Geth> Â¦ MoarVM:

[20:33] <Geth> Â¦ MoarVM: immediately calling into the REPR's slice function

[20:33] <Geth> Â¦ MoarVM: is already a nice benefit, but being able to emit

[20:33] <Geth> Â¦ MoarVM: a fastcreate if the type is known and benign is a

[20:33] <Geth> Â¦ MoarVM: nice extra bonus.

[20:33] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/afd8f93706

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: 16b9b79e55 | (Timo Paulssen)++ | 3 files

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: JIT Devirtualize atpos_o To A Smaller Function

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access:

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: when the jit already knows the type of VMArray,

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: especially the slot kind, it can skip not only

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: the big switch/case for "which slot type do we have?"

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: but also the check for slot and register mismatch

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: that would throw an exception at run time.

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: review: https://github.com/MoarVM/MoarVM/commit/16b9b79e55

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: bd43dcc9df | (Timo Paulssen)++ | 2 files

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: JIT: Double-Devirtualize atpos_i

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access:

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: only limited usefulness, since rakudo code mostly

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: generates atposref rather than atpos instructions.

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access:

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: Spesh will, at some point, know to turn atposref

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: into atpos, though, and atposref can also be

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: double-devirtualized in much the same way

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: atpos currently is.

[20:33] <Geth> Â¦ MoarVM/devirtualize_vmarray_access: review: https://github.com/MoarVM/MoarVM/commit/bd43dcc9df

[20:53] *** travis-ci joined
[20:53] *** p6bannerbot sets mode: +v travis-ci

[20:53] <travis-ci> MoarVM build failed. Timo Paulssen 'JIT Devirtualize slice (and the create it implies)

[20:53] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/472441972 https://github.com/MoarVM/MoarVM/compare/4c8e842a45f8...afd8f93706c3

[20:53] *** travis-ci left
[21:02] <timotimo> wow, that's ... interesting?

[21:02] <timotimo> but it's --no-jit, so my commit wouldn't be what breaks things?

[21:02] <timotimo> oops, the log disappeared immediately when i clicked restart job

[21:02] <timotimo> so i don't have the exact file that broke

[21:02] <timotimo> just know we have a flopper, i guess?

[21:12] * timotimo speshes elems on VMArray into a sp_get_i64

[21:15] <timotimo> hm. elems is uint, and get_i64 isn't "for" uint

[21:15] <timotimo> i think it ought to be fine, though, since it "just" copies the whole 64bits however they are

[21:18] <timotimo> gotta be a rather big machine that can get 2**63 slots, even in an int8 array

[21:24] <timotimo> now here's a fun one: 'symbols' creates a BOOTHash - specialized from having a param_sn - and shortly thereafter the elems of it is checked; spesh doesn't know that it's empty, though, and so the unless_i after it can't be constant-folded away

[21:24] <timotimo> fixing that would require proving that nothing is messing with that hash, though

[21:39] <timotimo> it has a whole bunch of deopt usages, too, the *%attrs argument

[22:15] <Geth> Â¦ MoarVM: 45d15efe90 | (Timo Paulssen)++ | src/6model/reprs/VMArray.c

[22:15] <Geth> Â¦ MoarVM: Turn elems On VMArray Into Direct Memory Access

[22:15] <Geth> Â¦ MoarVM:

[22:15] <Geth> Â¦ MoarVM: replace the full function call, which was far

[22:15] <Geth> Â¦ MoarVM: too much overhead just to read an integer at

[22:15] <Geth> Â¦ MoarVM: an offset inside the object.

[22:15] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/45d15efe90

[22:37] *** travis-ci joined
[22:37] *** p6bannerbot sets mode: +v travis-ci

[22:37] <travis-ci> MoarVM build failed. Timo Paulssen 'Turn elems On VMArray Into Direct Memory Access

[22:37] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/472466290 https://github.com/MoarVM/MoarVM/compare/afd8f93706c3...45d15efe9023

[22:37] *** travis-ci left
