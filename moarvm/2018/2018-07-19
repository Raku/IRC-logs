[00:00] *** huggable joined
[00:23] <Geth> ¦ MoarVM/ctx-lazy: 3da1e5fb63 | (Jonathan Worthington)++ | 5 files

[00:23] <Geth> ¦ MoarVM/ctx-lazy: Preserve enough data for accurate traversal

[00:23] <Geth> ¦ MoarVM/ctx-lazy:

[00:23] <Geth> ¦ MoarVM/ctx-lazy: In the absence of inlining, the ->caller chain is immutable, so we can

[00:23] <Geth> ¦ MoarVM/ctx-lazy: simply hold the frame the `ctx` op ran on and it's enough. When there's

[00:23] <Geth> ¦ MoarVM/ctx-lazy: inlining, however, we didn't have sufficient information in order to

[00:23] <Geth> ¦ MoarVM/ctx-lazy: be able to reconstruct the caller chain, since the current address of

[00:23] <Geth> ¦ MoarVM/ctx-lazy: the caller is mutable. Thus, snapshot those at the point of a use of

[00:23] <Geth> ¦ MoarVM/ctx-lazy: the `ctx` op in the *callee*. A callee can only ever have been called

[00:23] <Geth> ¦ MoarVM/ctx-lazy: from a particular program point, and so this lets us better traverse

[00:23] <Geth> ¦ MoarVM/ctx-lazy: the chain.

[00:23] <Geth> ¦ MoarVM/ctx-lazy: review: https://github.com/MoarVM/MoarVM/commit/3da1e5fb63

[00:23] <jnthn> Got it to work

[00:24] <[Coke]> \o/

[00:25] <jnthn> So that branch fixes both https://github.com/rakudo/rakudo/issues/2058 and https://github.com/rakudo/rakudo/issues/2046

[00:25] <jnthn> The issue ctx-lazy solves has been around for a while, but we managed to get away with it for the most part by doing less inlining :)

[00:26] <jnthn> Now we do a bit more, and couldn't :)

[00:30] <MasterDuke> jnthn: think https://github.com/MoarVM/MoarVM/issues/908 and https://github.com/MoarVM/MoarVM/issues/907 might have been fixed with your recent work?

[00:31] <jnthn> MasterDuke: I think 907 was hash related and samcv++ fixed that

[00:32] <jnthn> 908 - no idea, I didn't touch anything in that area

[00:32] <MasterDuke> ok, i'll re-test it

[00:33] <jnthn> Spectest looks OK and ctx-lazy fixes at least two modules that were regressed

[00:33] <jnthn> So I figure I'll merge it

[00:33] <MasterDuke> 907 is looking good so far...

[00:35] <Geth> ¦ MoarVM/master: 24 commits pushed by (Jonathan Worthington)++

[00:35] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/fae91a6ebf8c...0b08d3c180e0

[00:38] *** lizmat left
[00:41] <jnthn> Comments left on tickets that this work is known to fix

[00:42] <jnthn> Sleep; 'night

[01:08] *** lizmat joined
[01:13] *** lizmat left
[01:31] *** MasterDuke left
[02:10] *** leedo joined
[04:17] *** Kaiepi left
[05:02] *** Kaiepi joined
[05:28] *** chansen__ joined
[05:29] *** SmokeMachine_ joined
[05:30] *** chansen_ left
[05:30] *** chansen__ is now known as chansen_

[05:31] *** SmokeMachine left
[05:31] *** SmokeMachine_ is now known as SmokeMachine

[05:33] *** statisfiable6 left
[05:33] *** bisectable6 left
[05:33] *** nativecallable6 left
[05:33] *** statisfiable6 joined
[05:33] *** bisectable6 joined
[06:28] *** brrt joined
[06:31] *** nativecallable6 joined
[06:31] *** squashable6 joined
[06:47] *** robertle joined
[06:48] *** brrt left
[06:50] *** domidumont joined
[06:56] *** domidumont left
[06:57] *** domidumont joined
[07:22] *** brrt joined
[07:24] <brrt> \o

[07:25] <brrt> i now know why my trees are getting corrupted

[07:44] * masak .oO( Saruman )

[07:46] *** zakharyas joined
[07:48] *** brrt left
[07:49] *** lizmat joined
[07:53] *** zakharyas left
[07:55] *** zakharyas joined
[08:17] *** undersightable6 joined
[08:45] *** brrt joined
[08:49] <brrt> :-) almost

[08:49] <brrt> no

[08:50] <brrt> when generating templates, we compute fixed offsets from the start of the template, then during the application of them, we add the start of the tree (where the template is applied) to 'link' it in to a fixed address

[08:52] <brrt> now, in the original version, variadic operators would have an additional size argument just after the operator

[08:53] <brrt> and the in-memory tree would copy that

[08:54] <brrt> but in my refactored version, the in-memory tree stores the number of operands in the same node (a struct) as the operator, given that we don't have nearly enough operators to justify spending 32 bits on them

[08:54] <brrt> anyway, that means that the computed offset in the template generation phase is now wrong, since the size argument is no longer there

[08:58] <brrt> (in the tree representation)

[09:07] <brrt> I think... this indicates that I'm going in the wrong direction with this

[09:37] <jnthn> morning o/

[09:38] <tadzik> 5

[09:40] <brrt> morning jnthn

[09:40] <dogbert2> morning jnthn & brrt

[09:45] <tadzik> morning :)

[09:46] <jnthn> tadzik: Wow, didn't see you on this channel in a whle. :-)

[09:55] <dogbert2> spectest looks pretty good, had to set MVM_GC_DEBUG and decrease the nursery size in order to get some failures

[09:56] <dogbert2> on the other hand I'm not certain that these errors are entirely new

[09:59] <tadzik> jnthn: I'm always here, just passive :)

[10:01] <jnthn> :)

[11:13] <Geth> ¦ MoarVM/jit-expr-refactor: 10 commits pushed by (Bart Wiegmans)++

[11:13] <Geth> ¦ MoarVM/jit-expr-refactor: review: https://github.com/MoarVM/MoarVM/compare/ca667f53b634...d22a143136a4

[11:13] *** MasterDuke joined
[11:14] <brrt> Maybe just merge the above, and move to template compaction some other day

[11:15] <brrt> so, just for curiosity's sake: why do I want to compact the nodes

[11:15] <brrt> currently, we store a bunch of essential information for the tree in a (rather wasteful) secondary array called the 'info' array

[11:16] <brrt> information like: the operand type, the size of the result

[11:16] <brrt> some other information essential for interpreting the tree is stored elsewhere

[11:17] <brrt> e.g. the number of child nodes and the number of parameters are encoded in an 'expr op info' array

[11:18] <brrt> except for variadic operators, in which case the number of child nodes (operands) are enocded as a parameter directly after the operator node

[11:19] <brrt> this means that wherever we use the tree, we have to look in three different places in order to make sense of it properly;

[11:23] <brrt> i.e. I need to look at the operator, then at the expr op array, then maybe again at the tree, to find the correct number (and offset) of the child node links

[11:26] <MasterDuke> brrt: and all that has to happen frequently?

[11:28] <brrt> all throught the expr JIT

[11:28] <brrt> now, this isn't actually a problem per se.

[11:28] <brrt> everywhere this is done, it's done correctly

[11:28] <brrt> but

[11:28] <brrt> It does mean that there's at least two dynamic arrays that have to be kept in sync when modifying the tree

[11:29] <brrt> so far the tree modifications are very simple, i.e. only during template application, so it's an append-only operation

[11:29] <brrt> but if this is supposed to become more fancy, I don't want to be bogged down by the inadequacy of the representation

[11:31] *** zakharyas left
[11:39] *** squashable6 left
[12:09] *** lizmat left
[12:16] *** lizmat joined
[12:21] *** lizmat left
[12:35] *** brrt left
[12:36] <dogbert2> jnthn: are you still looking for regressions?

[12:44] <jnthn> Have had some other things to take care of so far today, though about to resume looking at what's left of those

[12:44] <dogbert2> there seems to be a nasty bug hiding in t/spec/S02-names/pseudo.t - if run with MVM_GC_DEBUG=1 it panics every run and if run normally it sometimes crashes with 'MoarVM panic: Internal error: zeroed target thread ID in work pass'

[12:44] <dogbert2> ok, just curious :)

[12:44] <jnthn> Hm, that passed fine for me last night

[12:45] <jnthn> Will see if I can repo

[12:45] <dogbert2> perhaps because I'm running on 32 bit then (without JIT)

[12:45] <jnthn> *repro

[13:08] <jnthn> dogbert2: No luck reproing it without GC debugging turned on, at least

[13:08] <dogbert2> grrr

[13:09] <dogbert2> for I can make it fail every time with MVM_GC_DEBUG set

[13:09] * dogbert2 can't type properly, sigh

[13:10] <jnthn> Will give it a try with that shortly

[13:12] * dogbert2 hopes jnthn will be able to repro

[13:18] *** zakharyas joined
[13:20] <dogbert2> here's what it looks like on my end: https://gist.github.com/dogbert17/26f45c42ab1ecf1d2406ecd8ed902c9c

[13:29] <Geth> ¦ MoarVM: 1166f6632f | (Jonathan Worthington)++ | src/jit/unsafe.expr

[13:29] <Geth> ¦ MoarVM: Remove unsafe template invalidated by recent work

[13:29] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1166f6632f

[13:29] <Geth> ¦ MoarVM: 82054a8567 | (Jonathan Worthington)++ | src/jit/x64/emit.dasc

[13:29] <Geth> ¦ MoarVM: Update JIT of ctxcallerskipthunks

[13:29] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/82054a8567

[13:35] <Geth> ¦ MoarVM: fdd571963f | (Jonathan Worthington)++ | src/spesh/frame_walker.c

[13:35] <Geth> ¦ MoarVM: Tidy up and correct MVMROOT in get_lexicals_hash

[13:35] <Geth> ¦ MoarVM:

[13:35] <Geth> ¦ MoarVM: We can root them all at once, and we need to root `sf` because we

[13:35] <Geth> ¦ MoarVM: access it during the loop.

[13:35] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/fdd571963f

[13:35] <jnthn> dogbert2: See if that last commit helps any :)

[13:39] <dogbert2> jnthn: will do ...

[13:41] <dogbert2> no dice unfortunately :(

[13:43] <dogbert2> gdb output is the same

[13:45] <jnthn> What if you `frame 4` and `p type`?

[13:47] <dogbert2> let's see

[13:49] <dogbert2> ...

[13:49] <dogbert2> (gdb) p type

[13:49] <dogbert2> $1 = 8

[13:56] <dogbert2> (gdb) info locals, obj = 0xb382b740, idx = 239, type = 8, lexreg = 0x8e14220, i = 239, frame = 0xa680de8, sf = 0x85526b0, base_index = 0, hll = 0x8111488, ctx_hash = 0xb7422060

[14:00] <Geth> ¦ MoarVM: 8d96c86c78 | (Jonathan Worthington)++ | 4 files

[14:00] <Geth> ¦ MoarVM: Always preserve return value for exit handler

[14:00] <Geth> ¦ MoarVM:

[14:00] <Geth> ¦ MoarVM: When the caller had void return type, we lost the return value of the

[14:00] <Geth> ¦ MoarVM: callee and so would not pass it to its exit handlers. This stores it in

[14:00] <Geth> ¦ MoarVM: the case that we have a void caller.

[14:00] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8d96c86c78

[14:05] <jnthn> 239...that's a big frame :)

[14:05] *** zakharyas left
[14:05] <dogbert2> :), ran it again and it's 239 again

[14:05] <jnthn> 8 is an object register

[14:05] <jnthn> Hmm

[14:09] <jnthn> Managed to reproduce it

[14:09] <dogbert2> yesssss

[14:16] *** zakharyas joined
[14:16] <jnthn> Though not much idea what it could be. The lexical in the frame comes out as an old version

[14:16] <jnthn> Well, fromspace

[14:16] <jnthn> But the frame itself is fine

[14:17] <jnthn> and oddly, making the nursery smaller makes it vanish

[14:19] <jnthn> Ah, the frame itself is gen2, so it's a missing write barrier

[14:19] <jnthn> It's not in the inter-gen root set

[14:32] <timotimo> so having a smaller nursery just makes it enter the gen2 early enough before it gets a problem?

[14:32] <jnthn> Yeah, presume so

[14:33] <dogbert2> is it an old or new problem

[14:33] <timotimo> could be either, really

[14:33] <timotimo> maybe the code where it's wrong was made reachable by more inlining than before

[14:34] <timotimo> but in theory, every little piece of change can have ripple effects like that

[14:34] <jnthn> New.

[14:34] <jnthn> It's too coincidental :)

[14:34] <timotimo> listen to the one who knows! :D

[14:34] <jnthn> Also I think I found it :)

[14:35] <jnthn> ctx-lazy was fixing an old and uncovered issue

[14:35] <jnthn> The regression seems to have been in bind_key in MVMContext

[14:36] <jnthn> Yeah, test seems happy now

[14:38] <dogbert2> cool

[14:39] <dogbert2> perhaps the upcoming fix will solve another issue I've seen as well

[14:45] <Geth> ¦ MoarVM: 1c8c2702c8 | (Jonathan Worthington)++ | src/core/frame.c

[14:45] <Geth> ¦ MoarVM: Missing GC rooting during contextual resolution

[14:45] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1c8c2702c8

[14:45] <Geth> ¦ MoarVM: f356e5ac60 | (Jonathan Worthington)++ | 4 files

[14:45] <Geth> ¦ MoarVM: Fix bind_key to use correct frame in write barrier

[14:45] <Geth> ¦ MoarVM:

[14:45] <Geth> ¦ MoarVM: Since we traverse lazily, the frame available in the context is no

[14:45] <Geth> ¦ MoarVM: longer always the one that owns the lexical being bound to.

[14:45] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f356e5ac60

[14:51] <jnthn> The second of those commits fixed the pseudo.t problem for me

[14:52] <dogbert2> the test no longer fails on my system, jnthn++

[14:52] <jnthn> hurrah :)

[14:53] <dogbert2> could there be more missing write barriers?

[14:54] <jnthn> There could be, but I don't see any other places in ctx-lazy that could have them

[14:54] <jnthn> We only touched one codepath where lexicals are bound

[14:54] <jnthn> Hmmm..

[14:55] <dogbert2> I can still trigger a panic when running t/spec/S15-nfg/concat-stable.t, the gdb output looks different though

[14:56] <dogbert2> it looks like this - https://gist.github.com/dogbert17/796acab7d7f737deac6f29dff8a2ce93

[14:59] <Geth> ¦ MoarVM: 43c716c0fb | (Jonathan Worthington)++ | src/core/frame.c

[14:59] <Geth> ¦ MoarVM: Ensure we never leak a real NULL to exit handler

[14:59] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/43c716c0fb

[15:03] <Geth> ¦ MoarVM: 92a7c91c65 | (Jonathan Worthington)++ | src/spesh/plugin.c

[15:03] <Geth> ¦ MoarVM: Missing rooting of test object in evaluate_guards

[15:03] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/92a7c91c65

[15:03] <jnthn> dogbert2: Try ^

[15:03] <dogbert2> I'm on it :)

[15:03] <jnthn> (Didn't repro it, just looked at the code and spotted that :))

[15:04] *** zakharyas left
[15:05] <dogbert2> you're on a roll :)

[15:05] <MasterDuke> i wonder how difficult it would be to write a plugin for some static analyzer to find missing MVMROOTs?

[15:06] <dogbert2> seems to work ...

[15:06] <jnthn> dogbert2: hurrah

[15:07] *** zakharyas joined
[15:07] <dogbert2> nooo, we're running out of bugs :-)

[15:07] <jnthn> MasterDuke: Not sure, it may be possible to catch some cases

[15:10] *** domidumont left
[15:10] <jnthn> Unfortunately we still have https://github.com/rakudo/rakudo/issues/2072 which I can't find any way to make happen other than with CORE.setting compilation

[15:11] <dogbert2> ah, the 32 bit build bug

[15:11] <jnthn> You can produce it on 64-bit with MVM_JIT_DISABLE=1 too

[15:16] <dogbert2> that sounds like a tricky bug to find

[15:18] <jnthn> Yes, terribly

[15:18] <jnthn> It's a deopt bug of some sort

[15:18] <jnthn> And happens on deopt all

[15:23] <dogbert2> perhaps we should ask Alexdaniel to do a toaster run with the JIT disabled, that might give us something

[15:24] *** benchable6 joined
[15:24] *** robertle left
[15:26] <jnthn> Perhaps we'd find something that way

[15:28] <jnthn> The deopt log is 21562441 lines long

[15:30] * MasterDuke wonders if jnthn will use perl6 to parse it

[15:30] <Geth> ¦ MoarVM: 39642e249d | (Jonathan Worthington)++ | src/spesh/deopt.c

[15:30] <Geth> ¦ MoarVM: Improve deopt logging

[15:30] <Geth> ¦ MoarVM:

[15:30] <Geth> ¦ MoarVM: * Log which frames are touched in a deopt all

[15:30] <Geth> ¦ MoarVM: * Use indentation to make the log clearer

[15:30] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/39642e249d

[15:30] <jnthn> Doesn't really need parsing, just searching

[15:31] <dogbert2> is this something which needs to be turned on?

[15:32] <jnthn> Yes, by the define at the top of the file

[15:41] *** zakharyas left
[15:51] *** zakharyas joined
[15:58] *** zakharyas left
[16:00] <jnthn> Wowser, it seems deopt somehow puts the frame back at the wrong address

[16:01] <jnthn> So the registers then contain the wrong thing

[16:04] <jnthn> Since it's running completely different code than it should be

[16:04] <jnthn> The contents of the register at the deopt index matches what it would wrongly be when we deopt

[16:04] <MasterDuke> that seems like it would break very loudly

[16:05] <jnthn> Well yes, the question is why it gets it right in hundreds of thousands of cases, but not this one

[16:07] <MasterDuke> .oO(the less common off by one-in-hundreds-of-thousands)

[16:07] *** zakharyas joined
[16:12] <ilmari> postgres fixed an off-by-one-in-four-billion bug recently

[16:12] <ilmari> https://www.postgresql.org/message-id/CAKJS1f88yh-6wwEfO6QLEEvH3BEugOq2QX1TOja0vCauoynmOQ@mail.gmail.com

[16:22] <jnthn> It looks like it's going to be an off-by-blah issue

[16:22] <jnthn> Uninlining is missing that it's in an inline

[16:46] *** lizmat joined
[16:51] <jnthn> Might well have a fix

[16:52] *** domidumont joined
[16:53] *** lizmat_ joined
[16:55] *** lizmat left
[16:55] *** lizmat_ left
[17:02] <jnthn> Yup, builds with and without JIT now :)

[17:05] <dogbert11> impressive

[17:06] <jnthn> The patch is tiny for something that took so long to find...

[17:11] *** lizmat joined
[17:11] *** lizmat left
[17:12] <Geth> ¦ MoarVM: 23ea67b847 | (Jonathan Worthington)++ | src/spesh/manipulate.c

[17:12] <Geth> ¦ MoarVM: Fix delete motion of INLINE_END annotations

[17:12] <Geth> ¦ MoarVM:

[17:12] <Geth> ¦ MoarVM: We should always move them forwards. We never had a problem with this

[17:12] <Geth> ¦ MoarVM: in the past, since the last instruction of an inline was always a

[17:12] <Geth> ¦ MoarVM: `set` that was replacing the `return`. That was never deleted, so we

[17:12] <Geth> ¦ MoarVM: never had a problem. Now we support inlining of `invoke_v`, which means

[17:12] <Geth> ¦ MoarVM: the return instruction is simply deleted. When we moved the inline end

[17:12] <Geth> ¦ MoarVM: <…commit message has 6 more lines…>

[17:12] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/23ea67b847

[17:15] <MasterDuke> jnthn: fwiw, i've been running https://github.com/MoarVM/MoarVM/issues/908 in a loop on two different computers for probably about 2h now and no problems so far

[17:16] <jnthn> MasterDuke: ah, good :)

[17:43] <jnthn> I think the sometimes-failing async lock spectests can be tomorrow's debugging task

[17:45] * jnthn wanders home

[17:59] *** MasterDuke left
[18:02] *** domidumont left
[18:09] <Geth> ¦ MoarVM/jit-expr-refactor: b335cdde7e | (Bart Wiegmans)++ | 6 files

[18:09] <Geth> ¦ MoarVM/jit-expr-refactor: [JIT] General cleanups in expression trees

[18:09] <Geth> ¦ MoarVM/jit-expr-refactor:

[18:09] <Geth> ¦ MoarVM/jit-expr-refactor: - Store type without 3-bit shift (is redundant and removed by its sole

[18:09] <Geth> ¦ MoarVM/jit-expr-refactor:   user)

[18:09] <Geth> ¦ MoarVM/jit-expr-refactor: - Remove (redundant) spesh_ins pointer from 'info' (making info very

[18:09] <Geth> ¦ MoarVM/jit-expr-refactor:   tiny)

[18:09] <Geth> ¦ MoarVM/jit-expr-refactor: - Make template nodes into plain MVMint32 (MVMJitExprNode is going away)

[18:09] <Geth> ¦ MoarVM/jit-expr-refactor: - Make value_bitmap unsigned (shifting isn't entirely safe otherwise)

[18:09] <Geth> ¦ MoarVM/jit-expr-refactor: review: https://github.com/MoarVM/MoarVM/commit/b335cdde7e

[18:12] *** buggable left
[18:13] *** buggable joined
[18:13] *** lizmat joined
[18:20] *** zakharyas left
[18:37] *** MasterDuke joined
[18:52] *** lizmat left
[18:58] *** lizmat joined
[19:07] *** lizmat left
[19:14] *** Kaiepi left
[19:19] *** hoelzro joined
[19:22] <Geth> ¦ MoarVM: 30dd47c1d8 | (Jonathan Worthington)++ | src/6model/reprs/MVMContext.h

[19:22] <Geth> ¦ MoarVM: Expose a symbol for Windows sake

[19:22] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/30dd47c1d8

[19:22] <jnthn> "For goodne^WWindows sake!"

[19:24] <geekosaur> isn't that what you drink to recover?

[19:25] <jnthn> :-)

[19:32] *** Kaiepi joined
[19:41] *** brrt joined
[19:41] <brrt> \o

[19:42] <brrt> i saw there was a branch on reading-things-from-a-concatenated-binary

[19:42] <brrt> so that was linux-specific since it relied on opening the /proc/self/exe file

[19:43] <geekosaur> there's no reliable way to find the current executable otherwise

[19:44] <geekosaur> (on POSIXlikes; iirc there's a Windows API to get the current executable's handle)

[19:45] <brrt> i was thinking, maybe we can link the moar binary with a dll (.so); in which case, we can use dlsym to get the concatenated contents

[19:45] <brrt> and it's windows' equivalent

[19:46] <geekosaur> perl 5 style? (which is forced on some platforms)

[19:47] <brrt> i don't know how perl5 does that

[19:49] <geekosaur> -Duseshrplib means perl was built as a stub executable which dlopen()s the actual perl so/dll

[19:50] <brrt> aha

[19:50] <brrt> yeah, something like that

[19:50] <brrt> but for bytecode rather than for the dll

[20:03] <dogbert11> one of today's commits was this - https://github.com/MoarVM/MoarVM/commit/92a7c91c65d88eb57b5524fbd1e29dde6b8d9dd0 - I'm wondering if there's something else which should be rooted here except for what was indeed fixed?

[20:05] <jnthn> brrt: About https://github.com/rakudo/rakudo/issues/2070 I just did a Windows build and all make test passes with MVM_JIT_DISABLE=1, so it looks like something is off with Windows JIT still.

[20:06] *** brrt left
[20:07] *** brrt joined
[20:16] <Geth> ¦ MoarVM/jit-expr-refactor: 11 commits pushed by (Bart Wiegmans)++

[20:16] <Geth> ¦ MoarVM/jit-expr-refactor: review: https://github.com/MoarVM/MoarVM/compare/b335cdde7ebc...65cca73bf7a7

[20:18] *** AlexDaniel joined
[20:26] *** zakharyas joined
[20:29] *** timo2timo joined
[20:31] <timo2timo> i'm somehow not able to reach my irc client

[20:33] <timo2timo> mhh, the listen method on IO::Socket::Async creates a new Supply from the SocketListenerTappable

[20:35] <timo2timo> so in order to have the port there it'd have to mix into the supply that results

[20:35] <timo2timo> or something entirely different

[20:41] *** brrt left
[20:42] <jnthn> timo2timo: See Proc::Async and how it lets you get the file descriptor from stdout/stderr

[20:47] <timo2timo> GTG

[20:47] *** timo2timo left
[20:55] *** brrt joined
[21:05] *** zakharyas left
[21:25] *** brrt left
[21:51] *** lizmat joined
