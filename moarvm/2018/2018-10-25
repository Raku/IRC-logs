[00:00] *** MasterDuke joined
[00:00] *** p6bannerbot sets mode: +v MasterDuke

[00:00] *** MasterDuke left
[00:00] *** MasterDuke joined
[00:00] *** herbert.freenode.net sets mode: +v MasterDuke

[00:00] *** p6bannerbot sets mode: +v MasterDuke

[01:12] *** evalable6 left
[01:12] *** evalable6 joined
[01:13] *** p6bannerbot sets mode: +v evalable6

[01:25] *** ggoebel joined
[01:25] *** p6bannerbot sets mode: +v ggoebel

[02:32] *** ggoebel left
[02:49] *** fake_space_whale joined
[02:50] *** p6bannerbot sets mode: +v fake_space_whale

[04:58] *** Voldenet left
[06:19] *** MasterDuke left
[06:32] *** robertle joined
[06:33] *** p6bannerbot sets mode: +v robertle

[06:50] *** fake_space_whale left
[07:01] *** zakharyas joined
[07:02] *** p6bannerbot sets mode: +v zakharyas

[08:05] *** domidumont joined
[08:05] *** p6bannerbot sets mode: +v domidumont

[08:35] *** dalek left
[08:36] *** Geth left
[08:55] *** Voldenet joined
[08:55] *** Voldenet left
[08:55] *** Voldenet joined
[08:55] *** p6bannerbot sets mode: +v Voldenet

[08:55] *** p6bannerbot sets mode: +v Voldenet

[09:26] *** p6lert left
[09:26] *** synopsebot left
[09:26] *** SourceBaby left
[09:26] *** dalek joined
[09:27] *** synopsebot joined
[09:27] *** Geth joined
[09:27] *** p6lert joined
[09:27] *** p6bannerbot sets mode: +v dalek

[09:27] *** p6bannerbot sets mode: +v synopsebot

[09:27] *** p6bannerbot sets mode: +v Geth

[09:27] *** p6bannerbot sets mode: +v p6lert

[09:55] *** SourceBaby joined
[09:55] <Geth> Â¦ MoarVM/nqp-mbc: 25d12cdec6 | (Stefan Seifert)++ | 2 files

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: Seed the deserialization string heap for getting correct indexes

[09:55] <Geth> Â¦ MoarVM/nqp-mbc:

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: Originally there were two pieces of code for collecting the string heap:

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: the data serialization (nqp::serialize) and the MAST compiler. The strings

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: collected during serialization were used as seed for the MAST compiler's

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: string heap. MVM_serialization_serialize assumed that it was passed an

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: empty string heap to fill.

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: Since we now assemble bytecode (and the string heap) before serializing

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: data, we have to flip this. Serialization's string heap is now seeded with

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: the bytecode compiler's.

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: review: https://github.com/MoarVM/MoarVM/commit/25d12cdec6

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: da09a981a6 | (Stefan Seifert)++ | tools/update_ops.p6

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: Use unbox_u to get at MAST::Local's $!index to avoid the coercion dance

[09:55] <Geth> Â¦ MoarVM/nqp-mbc: review: https://github.com/MoarVM/MoarVM/commit/da09a981a6

[09:55] *** p6bannerbot sets mode: +v SourceBaby

[09:57] *** Geth left
[09:57] *** Geth joined
[09:58] *** p6bannerbot sets mode: +v Geth

[11:19] *** zakharyas left
[12:14] *** ItchyPlant joined
[12:15] *** p6bannerbot sets mode: +v ItchyPlant

[12:16] <ItchyPlant> Hello

[12:16] <ItchyPlant> So I'm still trying to compile MoarVM on AIX 7.1...

[12:17] <ItchyPlant> After I added the "-bnoquiet" to Makefile's LDFLAGS and tried "make" again, I got this:

[12:17] <ItchyPlant> ld: 0711-318 ERROR: Undefined symbols were found.

[12:17] <ItchyPlant>         The following symbols are in error:

[12:17] <ItchyPlant>  Symbol                    Inpndx  TY CL Source-File(Object-File) OR Import-File{Shared-object}

[12:17] <ItchyPlant>                               RLD: Address  Section  Rld-type Referencing Symbol

[12:17] <ItchyPlant>  ----------------------------------------------------------------------------------------------

[12:17] <ItchyPlant>  .uv__hrtime               [10]    ER PR 3rdparty/libuv/src/unix/loop.c(3rdparty/libuv/libuv.a[loop.o])

[12:17] <ItchyPlant>                                    0000009c .text    R_RBR    [834]   .uv_loop_init

[12:17] <ItchyPlant>  .uv__hrtime               [90]    ER PR 3rdparty/libuv/src/unix/thread.c(3rdparty/libuv/libuv.a[thread.o])

[12:17] <ItchyPlant>                                    00000cb0 .text    R_RBR    [1224]  .uv_cond_timedwait

[12:17] <ItchyPlant>  .uv__hrtime               [92]    ER PR 3rdparty/libuv/src/unix/core.c(3rdparty/libuv/libuv.a[core.o])

[12:17] <ItchyPlant>                                    00000010 .text    R_RBR    [1004]  .uv_hrtime

[12:17] <ItchyPlant>                                    00000620 .text    R_RBR    [1133]  .uv_run

[12:17] <ItchyPlant>                                    00000934 .text    R_RBR    [1133]  .uv_run

[12:17] <ItchyPlant>                                    000009c8 .text    R_RBR    [1133]  .uv_run

[12:17] <ItchyPlant>                                    00000a38 .text    R_RBR    [1350]  .uv_update_time

[12:17] <ItchyPlant>  .uv__hrtime               [32]    ER PR 3rdparty/libuv/src/unix/aix.c(3rdparty/libuv/libuv.a[aix.o])

[12:17] <ItchyPlant>                                    000004c4 .text    R_RBR    [1417]  .uv__io_poll

[12:17] <ItchyPlant>  .uv_free_cpu_info         [4]     ER PR src/platform/sys.c(src/platform/sys.o)

[12:17] <ItchyPlant>                                    00000024 .text    R_RBR    [1466]  .MVM_platform_cpu_count

[12:18] <ItchyPlant> ER: The return code is 8.

[12:18] <ItchyPlant> ld: 0711-317 ERROR: Undefined symbol: .uv__hrtime

[12:18] <ItchyPlant> ld: 0711-317 ERROR: Undefined symbol: .uv_free_cpu_info

[12:18] <ItchyPlant> collect2: error: ld returned 8 exit status

[12:18] <ItchyPlant> make: *** [Makefile:602: libmoar.so] Error 1

[12:18] <ItchyPlant> ...and yes, the "uv__hrtime" definition is missing from "3rdparty/libuv/src/unix/loop.c"

[12:19] <ItchyPlant> it should fit with requiement defined in this header:

[12:19] <ItchyPlant> 3rdparty/libuv/src/unix/internal.h:242:10: note: declared here

[12:19] <ItchyPlant>  uint64_t uv__hrtime(uv_clocktype_t type);

[12:20] <ItchyPlant> Do you know what should I add to 3rdparty/libuv/src/unix/loop.c about "uv__hrtime"? :)

[12:26] <ugexe> hrtime is intermittedly busted on libuv

[12:26] <ugexe> and AIX

[12:26] <ugexe> https://github.com/libuv/libuv/issues/2041

[12:33] <ItchyPlant> yes, it is something, and it is kind of a known issue... but hard to get (for me) what to do, what to include or to remove from MoarVM's sources :/

[12:37] *** zakharyas joined
[12:38] *** p6bannerbot sets mode: +v zakharyas

[12:50] *** ItchyPlant left
[13:24] *** ItchyPlant joined
[13:25] *** p6bannerbot sets mode: +v ItchyPlant

[13:43] *** ItchyPlant left
[13:45] *** lizmat left
[13:56] *** domidumont left
[13:57] *** domidumont joined
[13:58] *** p6bannerbot sets mode: +v domidumont

[14:48] *** AlexDaniel left
[15:16] *** fake_space_whale joined
[15:16] *** p6bannerbot sets mode: +v fake_space_whale

[15:29] *** robertle left
[15:45] *** lizmat joined
[15:45] *** p6bannerbot sets mode: +v lizmat

[15:57] <ugexe> any guesses what reini urban meant when he said "Same for the new jit template idea, which does not scale. At all."? as in -- does anyone know what compromise may have been made that he does not agree with? Something resulting in high register pressure?

[16:00] <jnthn> The claim feels to vague to say anything sensible about.

[16:00] <jnthn> Doesn't scale in what sense?

[16:01] *** fake_space_whale left
[16:01] <jnthn> *too vague

[16:02] <jnthn> Time complexity when compiling larger pieces of code? Portability to new architectures? Number of people who can contribute?

[16:02] *** ggoebel joined
[16:03] *** p6bannerbot sets mode: +v ggoebel

[16:04] <jnthn> I'd be surprised if the first is true, given it largely implements published algorithms from well-regarded academic papers. The second doesn't feel true to me either, given the design allows re-use of much of the code in such an effort. And the last one we have contributor data to suggest isn't the case.

[16:07] <ugexe> there was a back-and-forth between you, reini, and brrt in comments of the JIT branch before it was merged. i think he actually supplied some reasons there, but i cannot find the conversation now

[16:08] <jnthn> Hmm, I don't recall the conversation either (but that may well be because I'm largely dismissive towards reini's views by this point; maybe there's occasionally signal, but most of it feels like noise to me)

[16:10] *** domidumont left
[16:19] <ugexe> found it: https://github.com/MoarVM/MoarVM/pull/625#commitcomment-22390798

[16:20] <ugexe> well, one of them

[16:22] <timotimo> if we create or fastcreate an object, shouldn't we be able to say "it's a p6opaque that's freshly created, and if it were to get a mixin, we'd deopt, so we can turn all p6oget and p6obind into get and bind"?

[16:23] <jnthn> Yes, that's possible

[16:23] <jnthn> Though again, it's not clear that PEA won't just rip out all those cases anyway

[16:24] <jnthn> We normally can lower to a fastcreate

[16:25] <timotimo> right, i'm of course looking at the post optimize output, so at that point perhaps it's really still a getattr

[16:26] <timotimo> hm, but it'll have to understand fastbox, too. that shouldn't be hard, though

[16:27] <jnthn> timotimo: I think it'd be better to wait and see if PEA does nail those cases. Optimizations cost something; if we can get the same effect from one of them, that's better.

[16:28] <timotimo> OK

[16:29] <timotimo> the "split nativeref decont into decont_* and box_*" op is ifne to go into master after the release, then?

[16:30] <timotimo> opt* fine*

[16:30] <jnthn> Yes

[16:30] <jnthn> That'll help already and is good for the EA

[16:31] <jnthn> resting, eating, etc. &

[16:32] <timotimo> rebased and cleaned up the branch

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split: d6316e7f0c | (Timo Paulssen)++ | src/spesh/optimize.c

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split: decont on nativeref shall become decont_* + box_*

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split:

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split: this way we should later be able to use the deconted

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split: value directly without boxing it first, and then

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split: more easily get rid of a native ref taking instruction.

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split: review: https://github.com/MoarVM/MoarVM/commit/d6316e7f0c

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split: 3114764ca3 | (Timo Paulssen)++ | src/spesh/optimize.c

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split: set flags & known type on spesh slot

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split:

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split: unblocks optimizing the box_* into a fastbox, in the

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split: case of box_i it will even go through the int cache.

[16:32] <Geth> Â¦ MoarVM/nativeref_decont_split: review: https://github.com/MoarVM/MoarVM/commit/3114764ca3

[16:32] <timotimo> jnthn: have a good rest and noms :)

[16:34] *** AlexDaniel joined
[16:34] *** p6bannerbot sets mode: +v AlexDaniel

[16:34] *** domidumont joined
[16:35] *** p6bannerbot sets mode: +v domidumont

[16:52] <timotimo> man, this really itches in my fingers ... Range's elems method has getattrref_i, decont_i, fastbox_i, bool_I

[16:54] <timotimo> oh, and then immediately unless_i on the result of bool_I, too

[17:28] *** robertle joined
[17:29] *** p6bannerbot sets mode: +v robertle

[17:39] *** domidumont left
[17:44] *** Kaiepi left
[17:45] *** Kaiepi joined
[17:45] *** p6bannerbot sets mode: +v Kaiepi

[18:12] *** zakharyas left
[19:06] <nine> timotimo: I won't keep you from improving this :)

[19:18] *** AlexDaniel left
[19:25] <timotimo> we'll probably want to first get the other optimizations in to see what actually needs its own optimization

[19:41] *** ggoebel left
[19:49] <dogbert17> hmm, a SEGV which disappears when the JIT is turned off

[19:57] *** ggoebel joined
[19:57] <dogbert17> more specifically when the EXPR JIT is turned off

[19:58] *** p6bannerbot sets mode: +v ggoebel

[19:59] <dogbert17> MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 ./perl6 t/spec/S32-io/IO-Socket-Async.t

[20:03] *** AlexDaniel joined
[20:03] *** p6bannerbot sets mode: +v AlexDaniel

[20:49] <timotimo> hm, the jit bisector assumes that turning off the expr jit at the right moment makes things work

[20:49] *** Kaiepi left
[20:49] *** Kaiepi joined
[20:50] *** p6bannerbot sets mode: +v Kaiepi

[21:31] *** robertle left
[21:46] *** lizmat left
[23:00] *** lizmat joined
[23:00] *** p6bannerbot sets mode: +v lizmat

[23:04] *** lizmat left
