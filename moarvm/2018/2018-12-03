[00:21] *** MasterDuke joined
[00:21] *** p6bannerbot sets mode: +v MasterDuke

[00:21] *** MasterDuke left
[00:21] *** MasterDuke joined
[00:21] *** herbert.freenode.net sets mode: +v MasterDuke

[00:21] *** p6bannerbot sets mode: +v MasterDuke

[02:01] *** MasterDuke left
[03:13] *** mtj_ left
[03:13] *** mtj_ joined
[03:14] *** p6bannerbot sets mode: +v mtj_

[07:07] *** domidumont joined
[07:08] *** AlexDani` joined
[07:08] *** p6bannerbot sets mode: +v domidumont

[07:09] *** p6bannerbot sets mode: +v AlexDani`

[07:12] *** AlexDaniel left
[07:55] *** robertle joined
[07:55] *** p6bannerbot sets mode: +v robertle

[08:20] *** zakharyas joined
[08:21] *** p6bannerbot sets mode: +v zakharyas

[09:06] *** lucasb_ joined
[09:06] *** p6bannerbot sets mode: +v lucasb_

[09:08] *** lucasb_ is now known as lucasb

[09:25] *** dogbert17 left
[09:51] *** brrt joined
[09:53] *** brrt left
[09:53] *** brrt joined
[09:54] *** p6bannerbot sets mode: +v brrt

[09:55] <brrt> \o

[09:57] <brrt> Not sure if you've seen but my grant application was approved

[09:57] <brrt> So, I guess I have to make the expression JIT a little better again now :-)

[10:05] <nwc10> poor you

[10:05] <nwc10> sounds terrible

[10:08] <brrt> hehe

[10:09] <brrt> I'm trying to figure out whether to start with the expression JIT optimizer, invoke-sequence, or floating point support

[10:09] <brrt> or, irregular instruction register allocation

[10:10] <brrt> I think the last two are the hardest, so I'm inclined to start there

[10:36] *** brrt left
[10:42] <jnthn> morning o/

[11:27] *** brrt joined
[11:27] *** p6bannerbot sets mode: +v brrt

[11:29] <brrt> morning jnthn

[11:45] *** domidumont left
[11:57] *** lizmat left
[11:58] <brrt> I'm thinking of making a graphviz visualization of the register allocators' work

[11:58] <brrt> for debugging purposes

[12:11] *** zakharyas left
[12:19] *** lizmat joined
[12:19] *** p6bannerbot sets mode: +v lizmat

[12:50] <dogbert2_> brrt, congratulations

[12:51] <dogbert2_> I'm sad to say that I have no JIT related bugs to report :)

[13:03] *** domidumont joined
[13:03] *** p6bannerbot sets mode: +v domidumont

[13:18] <brrt> you'll get them soon enough when I start working :-)

[14:23] *** AlexDani` is now known as AlexDaniel

[14:25] *** zakharyas joined
[14:26] *** p6bannerbot sets mode: +v zakharyas

[16:16] <lucasb> hey you C programmers!

[16:17] <lucasb> any apache httpd user among you?

[16:18] <lucasb> moarvm is supposed to be embeddable, right?

[16:18] <lucasb> is the idea of a apache module feasible? I'm trying to do this: https://gist.github.com/lucasbuchala/7d850599f65bd0d55e6b6cfd7ab818d6

[16:19] <lucasb> stderr managed to show up in apache errors log...

[16:19] <lucasb> but now, idk what to do :-)

[16:20] *** brrt left
[16:36] <timotimo> lucasb: if you want it to run perl6 code, you'll have to give it lots of extra arguments; check the contents of perl6-m to see what

[16:36] <timotimo> oh

[16:36] <timotimo> you're already passing the lib path

[16:36] <timotimo> ... derp

[16:37] <timotimo> well, what do you want to happen next?

[16:37] <lucasb> idk, just copied the contents of main.c and perl6.sh together

[16:37] <timotimo> do you want stdout to go to the browser?

[16:37] <lucasb> I guess I should study mod_perl (5) to learn what's possible

[16:38] <lucasb> yes, that should be one simple thing that should happen :-)

[16:38] <timotimo> there's surely a bunch of things in the request_rec that ought to go into the environment variables

[16:39] <lucasb> ^^ showing, because... there's design work... just requesting some help :-)

[16:39] <lucasb> for example, pick the right set of Apache directives to tune moarvm from apache

[16:39] <lucasb> from apache server config or .htaccess in directories

[16:40] <lucasb> well, I think this "view" is very much PHP-esque...

[16:40] <lucasb> what's the P6 version of PSGI... should the design of mod_moarvm take that in consideration?

[16:42] <lucasb> https://metacpan.org/release/mod_perl

[16:42] <lucasb> should functionality be written in C and exposed as nativecall modules to Perl 6 (?)

[16:44] <lucasb> each request a MVMInstance is instanciated? should there be a pool of instances? should I clean everything after a request? what about threads (server ones and moarvm ones)?

[16:45] <lucasb> anyway, just random questions that occurred to me :-) lacking in knowledge, all I can do is wonder for now

[16:46] *** Kaiepi left
[16:48] *** Kaiepi joined
[16:48] <lucasb> for now, my current TODO item is: take a look at mod_perl, mod_php, mod_lua, mod_mruby and try to get some idea

[16:48] *** p6bannerbot sets mode: +v Kaiepi

[16:49] *** domidumont left
[16:56] <lucasb> ha! https://github.com/bdw/mod_parrot

[16:56] *** patrickb joined
[16:56] <lucasb> forgot about it. didn't know brrt is the author

[16:57] *** p6bannerbot sets mode: +v patrickb

[17:03] *** lizmat left
[17:06] *** domidumont joined
[17:06] *** p6bannerbot sets mode: +v domidumont

[17:07] <timotimo> if you're doing "one MVMInstance per request", that's barely different from starting up a full perl6 via cgi, if you do pooling, you'll end up wanting to send request data/metadata via some IPC mechanism which makes it barely different from PSGI :)

[17:07] <timotimo> also, since it's quite possible to cause an instance to segfault by using NativeCall, it'd be wise to have process separation between httpd and moarvm

[17:10] <timotimo> if you don't set the full cleanup mode on the mvminstance, it'll also be leaking memory and resources

[17:10] <timotimo> since we rely on the OS freeing up everything when the process exits by default

[17:11] <lucasb> ah, thanks timotimo for the details! everything looks so hard :-)

[17:11] <lucasb> does perl6 bytecode lives at "share/perl6/runtime/perl6.moarvm", right?

[17:11] <lucasb> it's just... bytes? should I pre load this content into the module?

[17:11] <lucasb> to... speed things?

[17:13] <timotimo> that is just bytes, but it isn't most of what's loaded to start up a program

[17:13] <timotimo> the biggest part by far is the core setting

[17:13] <timotimo> parser, actions, and world are all a noticeable bit smaller

[17:13] <lucasb> hm, that too should be pre-loaded then (?)

[17:13] <lucasb> "rely on the OS freeing up everything when the process exits"  <-- this doesn't look like a persistent-environment-friendly, is it?

[17:14] <timotimo> yeah, not very persistent-environment-friendly

[17:14] <timotimo> would you consider preforking "persistent environment"?

[17:15] <lucasb> well, will the process handle more than one request... than yes, I think

[17:16] <lucasb> should I pursue this as my personal project or will you, the core developers, be interested and set up a github.com/MoarVM/mod-moarvm repo?

[17:17] <timotimo> well, we can always set it up later and you just push all your code there

[17:18] <timotimo> personally, i'd not expect big wins from having a mod_moarvm

[17:18] <timotimo> happy to be proven wrong, of course :)

[17:18] <lucasb> yeah, you're right. I understand your position

[17:21] <timotimo> on the other hand

[17:22] <timotimo> reducing friction to getting a perl6 up and running on Your Favourite Web Server is definitely worth doing

[17:22] <timotimo> and if that involves a less-than-perfect solution, so be it. as long as it's easy for the user to switch from that to, say, a PSGI server, that's fine

[17:22] <lucasb> well, I run my own apache instance, at 127.0.0.1:PORT

[17:23] <lucasb> binding to localhost, not accessible outside

[17:23] <lucasb> the same way I put my scripts in ~/bin, I put my cgis in ~/cgi-bin :-D

[17:23] <lucasb> it was always easy and convenient for my personal usage

[17:24] <timotimo> do we need our own CGI.pm6? :)

[17:24] *** zakharyas left
[17:24] <lucasb> I just thought being able to run Perl 6 code at slightest faster than CGI to be win already :D

[17:24] <timotimo> oh, a mod_moarvm should probably come with its own module loader to handle precompilation, or maybe it just needs to set up a few paths or env vars or something

[17:24] <timotimo> yeah, rakudo's startup time is A Thing

[17:26] <lucasb> I don't usually say the word CGI out loud because I don't won't to be burned in the fire by the mob :)

[17:26] <lucasb> *don't wanna

[17:27] <timotimo> a big part of "CGI.pm is bad" is not the CGI itself, if i understand correctly

[17:59] *** AlexDaniel left
[18:03] *** robertle left
[18:03] *** robertle_ joined
[18:03] *** p6bannerbot sets mode: +v robertle_

[18:58] *** brrt joined
[18:59] *** p6bannerbot sets mode: +v brrt

[19:01] *** AlexDaniel joined
[19:01] *** p6bannerbot sets mode: +v AlexDaniel

[19:59] *** robertle_ left
[20:21] *** domidumont left
[21:31] *** patrickb left
[21:57] *** brrt left
