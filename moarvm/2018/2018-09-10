[02:21] *** MasterDuke left
[02:38] *** avar left
[02:38] *** avar joined
[02:38] *** avar left
[02:38] *** avar joined
[02:38] *** p6bannerbot sets mode: +v avar

[02:39] *** p6bannerbot sets mode: +v avar

[03:04] *** lizmat left
[03:12] *** ZzZombo joined
[03:12] *** p6bannerbot sets mode: +v ZzZombo

[03:14] *** ZzZombo left
[03:14] *** ZzZombo joined
[03:14] *** p6bannerbot sets mode: +v ZzZombo

[05:02] *** ZzZombo left
[05:04] *** ZzZombo joined
[05:04] *** p6bannerbot sets mode: +v ZzZombo

[06:02] *** lizmat joined
[06:02] *** p6bannerbot sets mode: +v lizmat

[06:27] *** patrickb joined
[06:27] *** p6bannerbot sets mode: +v patrickb

[06:29] *** domidumont joined
[06:30] *** p6bannerbot sets mode: +v domidumont

[07:06] *** robertle joined
[07:06] *** p6bannerbot sets mode: +v robertle

[08:14] *** zakharyas joined
[08:15] *** p6bannerbot sets mode: +v zakharyas

[08:51] *** pmurias joined
[08:59] *** pmurias left
[09:12] *** pmurias joined
[09:12] *** p6bannerbot sets mode: +v pmurias

[09:13] <pmurias> any issues with https://github.com/MoarVM/MoarVM/pull/947 or just lack of tuits to merge that?

[09:14] <pmurias> it's an op that removes the need for having an nqp::p6decodelocaltime extopt

[09:18] <lizmat> pmurias: atm it seems to have conflicts ?

[09:18] <lizmat> also, this week, jnthn will be enjoying a well deserved holiday

[09:34] *** lizmat left
[09:43] *** brrt joined
[09:43] *** p6bannerbot sets mode: +v brrt

[09:47] <brrt> \o

[09:48] <nwc10> o/

[09:49] <brrt> ohai nwc10. is there still a perl conference going on now?

[09:50] <nwc10> http://act.perl-workshop.ch/spw2018/ says Dates: Friday 7th September 2018 and Saturday 8th September 2018

[09:50] <brrt> so.. no

[09:50] <brrt> ok :-)

[09:50] <nwc10> http://oslo.pm/npw2018/ says Nordic Perl Workshop 2018 will be held in Oslo at Teknologihuset, 6 - 7 September, 2018.

[09:50] <nwc10> so, no, not that I'm aware of

[09:59] *** ZzZombo left
[10:13] *** brrt left
[10:36] *** brrt joined
[10:37] *** p6bannerbot sets mode: +v brrt

[11:08] <brrt> we need much better, much more direct JIT testing

[11:09] <brrt> i mean... i'm adding templates for trunc_i. Will they ever be called?

[11:33] *** ZzZombo joined
[11:33] *** p6bannerbot sets mode: +v ZzZombo

[11:36] *** zakharyas left
[12:31] <pmurias> brrt: how do you imagine better testing to look like?

[12:32] <pmurias> brrt: it seems like a common problem with compilers, you could test the output directly but when you change things you need to update the tests

[12:34] <pmurias> brrt: measuring template usage coverage could maybe help

[12:47] <brrt> it's a good question

[12:48] <brrt> well, ideally, i'd be able to write a tiny script representing moar bytecode, have it JIT compiled directly, run it, and assert things about it's output

[12:48] <brrt> wouldn't work for all cases, especially when stack walking / dynamic lexicals are involved

[13:11] *** zakharyas joined
[13:11] *** p6bannerbot sets mode: +v zakharyas

[13:29] <Geth> ¬¶ MoarVM: 891d5c02ec | (Bart Wiegmans)++ | 2 files

[13:29] <Geth> ¬¶ MoarVM: [JIT] Implement truncation via unsigned cast

[13:29] <Geth> ¬¶ MoarVM:

[13:29] <Geth> ¬¶ MoarVM: Signed truncate isn't really well defined, I think.

[13:29] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/891d5c02ec

[13:38] *** ZzZombo left
[13:39] *** ZzZombo joined
[13:39] *** p6bannerbot sets mode: +v ZzZombo

[13:49] <timotimo> huh.

[13:50] <brrt> i mean, what even is the meaning of signed truncate

[13:52] <timotimo> well, we're using this to support smaller register sizes

[13:52] <timotimo> it'd be weird if we only could support uint8 uint16 uint32 native ints in the jit

[13:53] <timotimo> but not int8, int16, int32

[14:04] <brrt> oh, but that doesn't make any difference, is my point

[14:05] <brrt> anyway, differently sized registers are probably a mistake?

[14:05] <brrt> differently sized values are fine

[14:05] <timotimo> well, the registers are the same size

[14:05] <timotimo> that's why we need truncate and extend ops

[14:05] <brrt> let me ask you: how are you going to signed-truncate the number 1000 to 1 byte

[14:06] <brrt> and how are you going to signed-truncate -1000

[14:06] <timotimo> i guess it really depends on the operation that precedes it?

[14:10] <brrt> hmmm

[14:11] <brrt> no, i'm really just saying; signed-truncate is a nonsense idea. It cannot be done

[14:11] <brrt> it's fine to want to use and treat the resulting truncated numbers as signed

[14:12] <brrt> and if a number fits into the unsigned space, that's fine as well

[14:12] <timotimo> OK

[14:13] <brrt> I'm guessing you could say that you'd zero-extend the original number then assign the highest bit of the bigger number to the lower number

[14:13] <brrt> so it's easy to truncate-signed a -128 short to -128 byte

[14:13] <brrt> that's just 0xff80 to 0x80

[14:15] <brrt> but, for instance, 0x180 would also be truncated to 0x80, even though 0x180 is positive

[14:15] <brrt> so what you could say as semantics is that you preserve the sign; that would make 0x180 truncate to 0x0

[14:15] <brrt> is that the right thing to do?

[14:16] <timotimo> sorry, i'm too headachy to think this through

[14:16] <brrt> fwiw, C will downcast 0x180 to 0x80

[14:18] <brrt> i'll not bother you then :-)

[14:21] <pmurias> brrt: running small chunks of moar bytecode under forced jit and seeing if the print out the right stuff seems sane

[14:22] <pmurias> brrt: the tests could even construct the bytecode as MAST instead of having hardcoded bytecode

[14:31] <brrt> right

[14:31] <brrt> i'm thinking of something even more low-level

[14:31] <brrt> but yes

[14:31] <timotimo> check the assembly?

[14:32] <timotimo> data flow analysis at the register/memory level?

[14:33] <brrt> no, not so low level

[14:33] <brrt> although, would be cool too

[14:53] *** robertle left
[15:15] *** robertle joined
[15:16] *** p6bannerbot sets mode: +v robertle

[15:21] <pmurias> brrt: even more low-level than bytecode level?

[15:22] *** patrickb left
[15:24] <pmurias> brrt: for matching generated stuff something like this https://jestjs.io/docs/en/snapshot-testing could be useful

[15:25] *** brrt left
[15:33] <japhb> brrt: "signed truncate" makes sense to me, in the context of "small value residing in large register" -- it would be a standard truncate followed by a sign extend.

[15:47] *** domidumont left
[16:32] *** brrt joined
[16:33] *** p6bannerbot sets mode: +v brrt

[16:38] <brrt> japhb: actually, that would make sense to me as well; there are two vagaries though

[16:39] <brrt> mostly, the last bit of the truncated value isn't the sign bit of the original value

[16:40] <brrt> which leads to a): a negative number when truncated that wasn't negative orignally, and a positive number truncated that was negative originally

[16:47] *** robertle left
[17:58] <japhb> brrt: Sure, but that's the difference between standard truncate and "signed" truncate -- you're specifically accepting different failure modes for each.  (0x0180, 0x8001, and 0xFFFF all will flip sign on one or the other, but you're choosing which behavior you want based on which truncate variant you choose.)

[18:05] <brrt> I agree. What I'm not sure about, is whether this is what anyone expects

[18:05] <brrt> I mean, you try this in C, you get unsigned truncation

[18:07] <brrt> also, if we consistently treat a small integer as such, then extend it to signed/unsigned as requested, this will never be a problem

[18:08] <brrt> and, our current implementation is effectively an unsigned truncate, I think

[18:08] <brrt> m: nqp::say(nqp::trunc_i8(384))

[18:08] <camelia> rakudo-moar 78bebc7ae: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Could not find nqp::trunc_i8, did you forget 'use nqp;' ?‚ê§at <tmp>:1‚ê§------> nqp::say(nqp::trunc_i8(384)‚èè)‚ê§¬ª

[18:08] <brrt> nqp: nqp::say(nqp::trunc_i8(384));

[18:08] <camelia> nqp-moarvm: OUTPUT: ¬´No registered operation handler for 'trunc_i8'‚ê§   at gen/moar/stage2/QAST.nqp:1635  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_op)‚ê§ from gen/moar/stage2/QAST.nqp:6057  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_nod‚Ä¶¬ª

[18:08] <brrt> that's.. huh

[18:10] <brrt> nqp: my int $x := nqp::trunc_i8(384); nqp::say($x)

[18:10] <camelia> nqp-moarvm: OUTPUT: ¬´No registered operation handler for 'trunc_i8'‚ê§   at gen/moar/stage2/QAST.nqp:1635  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_op)‚ê§ from gen/moar/stage2/QAST.nqp:6057  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_nod‚Ä¶¬ª

[18:12] <brrt> nqp: nqp::say(nqp::trunc_u8(384));

[18:12] <camelia> nqp-moarvm: OUTPUT: ¬´No registered operation handler for 'trunc_u8'‚ê§   at gen/moar/stage2/QAST.nqp:1635  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_op)‚ê§ from gen/moar/stage2/QAST.nqp:6057  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_nod‚Ä¶¬ª

[18:19] <brrt> confusing

[18:22] *** robertle joined
[18:23] *** p6bannerbot sets mode: +v robertle

[18:24] *** zakharyas left
[18:24] *** brrt left
[20:06] *** lizmat joined
[20:07] *** p6bannerbot sets mode: +v lizmat

[20:15] *** ggoebel_ left
[20:20] <jnthn> The current compilation model is that we always extend natives to perform operations on them and truncate at the point of storage.

[20:20] <jnthn> So all calculation takes place at fixed width

[20:20] <jnthn> And the trunc/extend are inserted by the compiler

[20:21] <jnthn> And need to have a correctly sized destination

[20:21] <jnthn> See the coercion method in the QAST -> MAST compiler

[20:26] *** pmurias left
[20:31] *** ggoebel_ joined
[20:31] *** p6bannerbot sets mode: +v ggoebel_

[20:34] *** Kaiepi left
[20:35] *** Kaiepi joined
[20:35] *** p6bannerbot sets mode: +v Kaiepi

[20:39] *** Kaiepi left
[20:42] *** Kaiepi joined
[20:43] *** p6bannerbot sets mode: +v Kaiepi

[20:49] *** lizmat left
[21:00] *** MasterDuke joined
[21:00] *** p6bannerbot sets mode: +v MasterDuke

[21:00] *** MasterDuke left
[21:00] *** MasterDuke joined
[21:00] *** herbert.freenode.net sets mode: +v MasterDuke

[21:00] *** p6bannerbot sets mode: +v MasterDuke

[23:05] *** lizmat joined
[23:06] *** p6bannerbot sets mode: +v lizmat

[23:45] *** robertle left
[23:49] *** MasterDuke left
[23:57] *** MasterDuke joined
[23:57] *** p6bannerbot sets mode: +v MasterDuke

