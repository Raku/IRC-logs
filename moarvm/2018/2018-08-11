[00:07] *** Fuchs13 joined
[00:07] *** p6bannerbot sets mode: +v Fuchs13

[00:08] <timotimo> MasterDuke: so your feedback so far is: 1) customizable sorting, 2) link to user script, 3) a file picker would be cool, but there's a slight problem with that ...

[00:09] *** Fuchs13 left
[00:09] <timotimo> the problem is: the file picker will submit the file as an upload

[00:09] <timotimo> which the app will then either feed directly into the stdin of sqlite3 to throw it into /tmp as a sqlite3 file, or cat it into a file in /tmp and build the sqlite3 file from that

[00:09] <timotimo> though there are in-memory databases

[00:10] *** e22 joined
[00:10] *** e22 left
[00:11] <MasterDuke> can you just get the path from the file picker?

[00:12] <timotimo> that's not a thing that html+js allows, i don't think

[00:12] <MasterDuke> also, i could see wanting to sort by time per entry

[00:12] <MasterDuke> oh, huh

[00:13] <timotimo> my grant proposal has "Sortable by every sensible column

[00:13] <timotimo> " as one of the deliverables

[00:13] <MasterDuke> cool

[00:14] <MasterDuke> in the call graph, what does the darker blue mean?

[00:14] <timotimo> the smaller one is exclusive time, the bigger one is exclusive time

[00:15] <timotimo> i'll hopefully find colors for those that aren't extremely terrible

[00:15] <MasterDuke> or maybe a hover-over?

[00:16] <timotimo> you mean like tooltip text?

[00:17] <MasterDuke> yeah

[00:17] <timotimo> quite possible. though i'd love to have little questionmark icons that you could click to get big-but-friendly explanations for everything

[00:17] <MasterDuke> yep

[00:18] <timotimo> i imagine in the GC tab you'd have one next to the first row if it isn't 0 or 1 that tells you why the gc numbers would not start at 0 (because the compiler does stuff before the profiler turns on)

[00:24] *** AlexDani` joined
[00:25] *** p6bannerbot sets mode: +v AlexDani`

[00:25] *** AlexDani` left
[00:25] *** AlexDani` joined
[00:25] *** verne.freenode.net sets mode: +v AlexDani`

[00:25] *** p6bannerbot sets mode: +v AlexDani`

[00:25] *** AlexDaniel left
[00:25] *** AlexDani` is now known as AlexDaniel

[00:27] *** Kaypie joined
[00:27] *** Kaiepi left
[00:28] *** p6bannerbot sets mode: +v Kaypie

[00:38] *** lizmat left
[00:50] <Geth> Â¦ MoarVM/master: 4 commits pushed by (Timo Paulssen)++

[00:50] <Geth> Â¦ MoarVM/master: 1347a94d4a | output name&cuuid in spesh slots for code objects

[00:50] <Geth> Â¦ MoarVM/master: 37b7c7b79a | discover facts about a bunch of sp_guard ops

[00:50] <Geth> Â¦ MoarVM/master: f5b22026cb | up to double-devirt assign_[ins] and decont_[ins]

[00:50] <Geth> Â¦ MoarVM/master: 1bfc6c254f | silence compiler warning

[00:50] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/554fe425da5a...1bfc6c254f62

[00:50] <timotimo> for some reason there's nothing in jit/graph.c for sp_guardsfouter

[00:50] <timotimo> i wonder if that's a problem at all; does it ever show up in BAIL messages?

[00:53] <MasterDuke> think it's fine to merge https://github.com/MoarVM/MoarVM/pull/935 ? i get pastel warnings every time i compile moarvm

[00:55] <timotimo> oh, we don't actually know if the other compilers are fine with this though?

[00:55] <timotimo> because the build bots don't have --with-telemeh or --enable-telemeh or what it is in their configs?

[00:59] <MasterDuke> hm. pretty sure i tried with clang, but i'll double check

[00:59] <timotimo> can you also try on appveyor?

[01:00] <MasterDuke> hm, the macro causes clang to warn

[01:01] <timotimo> that sucks :( :(

[01:01] <MasterDuke> but come only on stuff i added, it's used another place also

[01:02] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs.c#L5

[01:03] <MasterDuke> i guess clang knows about the "return-type" warning group

[01:04] <MasterDuke> this is what clang warns: `src/profiler/telemeh.c:206:1: warning: unknown warning group '-Wstringop-overflow', ignored [-Wunknown-warning-option]`

[01:04] <timotimo> :\

[01:04] <MasterDuke> `src/gcc_diag.h:15:27: note: expanded from macro 'GCC_DIAG_ON'`

[01:04] <timotimo> temporarily turn unknown warning option off for that line :D

[01:04] <MasterDuke> heh, i had the same thought

[01:04] <timotimo> that'll b0rk on gcc :P

[01:04] <timotimo> and who knows what will happen on msvc

[01:05] *** colomon_ joined
[01:05] *** p6bannerbot sets mode: +v colomon_

[01:06] *** colomon left
[01:06] *** colomon_ is now known as colomon

[01:10] *** travis-ci joined
[01:10] *** p6bannerbot sets mode: +v travis-ci

[01:10] <travis-ci> MoarVM build errored. Timo Paulssen 'silence compiler warning'

[01:10] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414750946 https://github.com/MoarVM/MoarVM/compare/554fe425da5a...1bfc6c254f62

[01:10] *** travis-ci left
[01:12] <MasterDuke> some people online are suggesting just adding -Wno-unknown-warning-option to the default clang compiler flags

[01:16] *** travis-ci joined
[01:16] *** p6bannerbot sets mode: +v travis-ci

[01:16] <travis-ci> MoarVM build failed. Timo Paulssen 'silence compiler warning'

[01:16] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414750946 https://github.com/MoarVM/MoarVM/compare/554fe425da5a...1bfc6c254f62

[01:16] *** travis-ci left
[01:19] *** Guest37849 joined
[01:19] *** dStruct26 joined
[01:19] *** p6bannerbot sets mode: +v Guest37849

[01:20] *** p6bannerbot sets mode: +v dStruct26

[01:20] *** dStruct26 left
[01:20] <Geth> Â¦ MoarVM: b7ffccfa34 | (Timo Paulssen)++ | src/6model/containers.c

[01:20] <Geth> Â¦ MoarVM: ensure returning NULL from these.

[01:20] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b7ffccfa34

[01:24] *** Guest37849 left
[01:35] <timotimo> if only C had optional arguments ... %)

[01:52] * timotimo goes sleep

[02:24] *** f19 joined
[02:24] *** f19 left
[04:20] *** Kaypie left
[04:20] *** Kaypie joined
[04:21] *** p6bannerbot sets mode: +v Kaypie

[05:45] *** lizmat joined
[05:46] *** p6bannerbot sets mode: +v lizmat

[06:09] *** swordsmanz3 joined
[06:10] *** swordsmanz3 left
[06:22] *** lizmat left
[06:44] *** lizmat joined
[06:44] *** p6bannerbot sets mode: +v lizmat

[07:22] *** TheMesquito26 joined
[07:22] *** TheMesquito26 left
[08:05] *** lizmat left
[08:48] *** robertle joined
[08:49] *** p6bannerbot sets mode: +v robertle

[09:52] *** apollo1318 joined
[09:53] *** apollo1318 left
[10:10] *** robertle left
[10:15] *** Kaypie left
[10:38] *** robertle joined
[10:38] *** p6bannerbot sets mode: +v robertle

[11:35] *** Kaiepi joined
[11:35] *** p6bannerbot sets mode: +v Kaiepi

[11:45] * timotimo writes some code to remove redundant guards

[11:46] *** vans9 joined
[11:46] *** vans9 left
[11:53] <timotimo> hum. of course it causes trouble

[11:53] <timotimo> the flags in the source register are good for what it's telling me it's trying to do

[11:53] <timotimo> but:

[11:53] <timotimo> ===SORRY!===

[11:53] <timotimo> Parameter '$CWD' of routine 'new' must be an object instance of type 'Str', not a type object of type 'Str'.  Did you forget a '.new'?

[12:06] <Geth> Â¦ MoarVM/eliminate_redundant_guards: e6e5be860a | (Timo Paulssen)++ | src/spesh/optimize.c

[12:06] <Geth> Â¦ MoarVM/eliminate_redundant_guards: turn redundant sp_guard ops into set

[12:06] <Geth> Â¦ MoarVM/eliminate_redundant_guards:

[12:06] <Geth> Â¦ MoarVM/eliminate_redundant_guards: unfortunately, this causes misbehaviour.

[12:06] <Geth> Â¦ MoarVM/eliminate_redundant_guards:

[12:06] <Geth> Â¦ MoarVM/eliminate_redundant_guards: when correctness is fixed, the code can also

[12:06] <Geth> Â¦ MoarVM/eliminate_redundant_guards: turn guardconc into guardjustconc and

[12:06] <Geth> Â¦ MoarVM/eliminate_redundant_guards: guardtype into guardjusttype. that's just a SMOP

[12:06] <Geth> Â¦ MoarVM/eliminate_redundant_guards: review: https://github.com/MoarVM/MoarVM/commit/e6e5be860a

[12:06] <timotimo> don't have the brain right now to investigate, but here's the code so you can try it yourself

[12:06] <timotimo> could just be that the facts are from logging, but aren't marked as such, or something.

[12:07] <timotimo> i.e. the "from_log_guard" flag isn't set

[12:59] <nine> What the? I've been trying for hours to get to the grounds on https://github.com/rakudo/rakudo/issues/2036 but it does get more mysterious all the time.

[13:00] <nine> On the good side, I've managed to make it consistently work right until it gets speshed and more importantly JIT compiled and fail consistently afterwards running it with MVM_JIT_EXPR_DISABLE=1 MVM_SPESH_OSR_DISABLE=1 MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 MVM_SPESH_INLINE_DISABLE=1

[13:01] <nine> That's with all actual spesh optimizations disabled, so it really looks like it's JIT compilation itself.

[13:02] <nine> On the bad side, it still fails, even if I change it so the JIT compilation will generate the same code as run before optimization.

[13:03] <nine> Oh, that could just be because the code would no longer be valid and accesses the wrong register which just leads to a similar looking failure.

[13:05] <diakopter> dang, I should've followed my (mentioned) hunch about the lexical registry being accessed incorrectly

[13:08] *** drot8 joined
[13:09] *** p6bannerbot sets mode: +v drot8

[13:09] *** drot8 left
[13:15] <nine> diakopter: better late than never ;)

[13:17] <diakopter> nine: well I mean, jnthn fixed it, it seems

[13:38] <nine> OMG I think I have it!

[13:58] <Geth> Â¦ MoarVM: 30781708ec | (Stefan Seifert)++ | src/jit/x64/emit.dasc

[13:58] <Geth> Â¦ MoarVM: Fix JIT compiled getarg_* reading the wrong register

[13:58] <Geth> Â¦ MoarVM:

[13:58] <Geth> Â¦ MoarVM: Code started out as a copy of sp_getarg_* but those get a literal as the

[13:58] <Geth> Â¦ MoarVM: number of the argument to read, not a register as getarg_* are supposed to do.

[13:58] <Geth> Â¦ MoarVM:

[13:58] <Geth> Â¦ MoarVM: Fixes https://github.com/rakudo/rakudo/issues/2036

[13:58] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/30781708ec

[14:11] *** \mSg23 joined
[14:12] *** \mSg23 left
[14:15] <jnthn> nine++ # fixing stuff :)

[14:16] <timotimo> oh, good catch

[14:18] <nine> Would have been a lot easier to catch if my first test results would not have been so misleading

[14:18] *** travis-ci joined
[14:18] *** p6bannerbot sets mode: +v travis-ci

[14:18] <timotimo> yeah, that happens when the jitted code misuses registers

[14:18] <travis-ci> MoarVM build errored. Stefan Seifert 'Fix JIT compiled getarg_* reading the wrong register

[14:18] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414872753 https://github.com/MoarVM/MoarVM/compare/b7ffccfa34f4...30781708ece1

[14:18] *** travis-ci left
[14:47] <Geth> Â¦ MoarVM: 62a99bcf44 | (Stefan Seifert)++ | 4 files

[14:47] <Geth> Â¦ MoarVM: Fix segfaults in GC caused by sharing of jitcode in NativeCall repr

[14:47] <Geth> Â¦ MoarVM:

[14:47] <Geth> Â¦ MoarVM: jitcode is a pointer to an MVMJitCode structure. When copying a NativeCall

[14:47] <Geth> Â¦ MoarVM: object, we may not just copy the pointer but have to make a copy of the whole

[14:47] <Geth> Â¦ MoarVM: structure. Otherwise GC'd free the same structure multiple times.

[14:47] <Geth> Â¦ MoarVM:

[14:47] <Geth> Â¦ MoarVM: Many thanks to dogbert17++ for providing the ASAN printout that gave the

[14:47] <Geth> Â¦ MoarVM: essential hint!

[14:47] <Geth> Â¦ MoarVM:

[14:47] <Geth> Â¦ MoarVM: Fixes GH #862

[14:47] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/62a99bcf44

[15:06] *** travis-ci joined
[15:06] *** p6bannerbot sets mode: +v travis-ci

[15:06] <travis-ci> MoarVM build errored. Stefan Seifert 'Fix segfaults in GC caused by sharing of jitcode in NativeCall repr

[15:06] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414882980 https://github.com/MoarVM/MoarVM/compare/30781708ece1...62a99bcf44d7

[15:06] *** travis-ci left
[15:10] <dogbert17> nine++, I wonder how many other reported nativecall issues you fixed there :)

[15:10] *** zakharyas joined
[15:10] <dogbert17> also jnthn++, seems to have been on a bug fixing spree

[15:11] *** p6bannerbot sets mode: +v zakharyas

[15:18] <dogbert17> I wonder if that latest commit managed to fix the pesky RT #131003

[15:18] <synopsebot> RT#131003 [open]: https://rt.perl.org/Ticket/Display.html?id=131003 [SEVERE][SEGV] Heap corruption when using Gumbo

[15:54] *** Dan_Bennett joined
[15:55] *** p6bannerbot sets mode: +v Dan_Bennett

[15:57] *** Kaiepi left
[15:57] *** Kaiepi joined
[15:58] *** p6bannerbot sets mode: +v Kaiepi

[16:00] *** Dan_Bennett left
[16:03] <nine> dogbert17: unfortunately not: MoarVM panic: Heap corruption detected: pointer 0x7f6d151f00f8 to past fromspace

[16:09] <timotimo> i wonder what other ops could benefit from devirtualization in the jit ???

[16:16] *** tacocat4 joined
[16:17] *** p6bannerbot sets mode: +v tacocat4

[16:17] *** tacocat4 left
[16:23] <MasterDuke> timotimo: where did you find that env variable that might let valgrind run with my broken glibc?

[16:28] <timotimo> i just searched for the error message

[16:59] *** drathir11 joined
[16:59] *** p6bannerbot sets mode: +v drathir11

[17:04] *** drathir11 left
[17:08] *** zakharyas left
[17:10] *** zakharyas joined
[17:11] *** p6bannerbot sets mode: +v zakharyas

[17:12] <timotimo> so, how do we build a tool that checks if memory regions deemed "exploitably constant" are accessed over and over and over

[17:12] <timotimo> i.e. pointing out that perhaps the jit should have put something into the bytecode

[17:20] *** zakharyas left
[17:23] *** jelly19 joined
[17:24] *** p6bannerbot sets mode: +v jelly19

[17:24] *** jelly19 left
[17:54] *** O-dog1 joined
[17:55] *** p6bannerbot sets mode: +v O-dog1

[17:58] *** O-dog1 left
[18:08] *** LambdaComplex21 joined
[18:08] *** p6bannerbot sets mode: +v LambdaComplex21

[18:12] <MasterDuke> huh, `MoarVM panic: Heap corruption detected: pointer 0x12008840 to past fromspace` when running under valgrind, but it didn't have anything to say about it

[18:14] *** LambdaComplex21 left
[18:25] <MasterDuke> now this might be interesting. the same code after recompiling with --valgrind give this https://gist.github.com/MasterDuke17/b8e7e8d6a19ead2974e4c1585be64ac2

[18:27] <MasterDuke> ==31403== Process terminating with default action of signal 11 (SIGSEGV) ==31403==  General Protection Fault

[18:54] *** zakharyas joined
[18:55] *** p6bannerbot sets mode: +v zakharyas

[19:07] *** MasterDuke left
[19:08] <timotimo> i mean, managed_size would be fine to replace with just "return 0"

[19:08] <timotimo> it's non-essential

[19:12] *** MasterDuke joined
[19:12] *** p6bannerbot sets mode: +v MasterDuke

[19:12] *** MasterDuke left
[19:12] *** MasterDuke joined
[19:12] *** herbert.freenode.net sets mode: +v MasterDuke

[19:12] *** p6bannerbot sets mode: +v MasterDuke

[19:20] <MasterDuke> timotimo: you mean unmanaged_size?

[19:53] <AlexDaniel> nine++

[20:00] <timotimo> yes

[21:13] <MasterDuke> timotimo: so "calculating the non-GC-managed memory we hold on to" isn't important when compiled with --valgrind ?

[21:33] *** zakharyas left
[21:58] *** Menche9 joined
[21:58] *** p6bannerbot sets mode: +v Menche9

[22:00] *** Menche9 left
[22:01] <timotimo> well, it's certainly not a problem to just cut it out if it causes crashes

[22:11] *** benny10 joined
[22:12] *** p6bannerbot sets mode: +v benny10

[22:15] <Geth> Â¦ MoarVM: 1e4b2c84d6 | (Jonathan Worthington)++ | src/core/interp.c

[22:15] <Geth> Â¦ MoarVM: Correct first argument to MVM_panic

[22:15] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1e4b2c84d6

[22:16] <timotimo> i've made that mistake in the past

[22:17] *** benny10 left
[22:18] <timotimo> jnthn: there's a few times in this super random speshlog where two fastcreates are in a row, and some times where by just shuffling one or two instructions around, there could be three; do you think it'd be good to have "ensurenursery" and "sp_superfastcreate" ops for cases like that?

[22:19] <timotimo> or maybe just an sp_fastcreate2

[22:19] <jnthn> Maybe

[22:20] <jnthn> I say the odd SEGV in make test at MoarVM HEAD :/

[22:20] *** ccallahan5 joined
[22:20] <jnthn> And I'm quite sure they weren't there yesterday

[22:20] <timotimo> make test, yeah?

[22:20] <jnthn> Yeah

[22:20] *** p6bannerbot sets mode: +v ccallahan5

[22:21] <timotimo> let's see

[22:21] <timotimo> perhaps i made a bad thing

[22:21] <jnthn> Did you test/spectest the spesh changes last night?

[22:21] *** ccallahan5 left
[22:21] <timotimo> i ran spectests a bunch while i was doing the devirt change at least

[22:21] <jnthn> spectest is a mess :S

[22:21] <timotimo> i only had two flappers, both were stress.t files

[22:22] <timotimo> at least i thought they were regular flappers, they didn't fail consistently

[22:22] <jnthn> Building a commit from yesterday

[22:23] *** lbft4 joined
[22:23] *** p6bannerbot sets mode: +v lbft4

[22:23] <jnthn> make test is happy at 554fe425da5a6571

[22:24] *** lbft4 left
[22:24] <jnthn> spectest running now

[22:30] <timotimo> are you running with nodelay or spesh blocking or something?

[22:31] <timotimo> i'm on master/master/master, 35k tests in and everything's green

[22:31] <jnthn> I wsa just running `make spectest`, no flags or anything

[22:31] <timotimo> t/spec/S17-supply/syntax.t ........................................ Dubious, test returned 1 (wstat 256, 0x100)

[22:32] <timotimo> that's bad, yeah

[22:32] <jnthn> I was getting failures all over the place

[22:32] <jnthn> 2 in make test, a bunch in make spectest

[22:32] <jnthn> It's in my VM, which is slow and under some pressure

[22:33] <jnthn> But otherwise unremarkable (Ubuntu 16.04)

[22:33] *** robertle left
[22:33] <timotimo> even though the spectest is still running in the background, i can't get S17-supply/syntax.t to crash inside gdb-m

[22:34] <timotimo> Unhandled exception in code scheduled on thread 9

[22:34] <timotimo> Not enough positional arguments; needed at least 2

[22:34] <timotimo> # Looks like you planned 83 tests, but ran 74

[22:34] <timotimo> not a crash, OK

[22:35] <jnthn> Yeah, I've seen that occasionally

[22:35] <timotimo> but that was the only file that failed on my end

[22:35] <jnthn> Hm, odd

[22:35] <jnthn> Mine was a real mess

[22:35] <timotimo> very odd indeed

[22:35] <jnthn> The commit I mentioned looks pretty fine though

[22:37] <timotimo> i don't feel so bad any more about having pushed those commits

[22:37] <timotimo> but please feel free to revert my changes if they make it better on your end

[22:37] *** travis-ci joined
[22:37] *** p6bannerbot sets mode: +v travis-ci

[22:37] <travis-ci> MoarVM build errored. Jonathan Worthington 'Correct first argument to MVM_panic'

[22:37] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/414975262 https://github.com/MoarVM/MoarVM/compare/62a99bcf44d7...1e4b2c84d619

[22:37] *** travis-ci left
[22:43] <timotimo> BBL

[22:57] *** lizmat joined
[22:58] *** p6bannerbot sets mode: +v lizmat

[22:58] * lizmat wonders whether timotimo would have to say anything about https://www.reddit.com/r/perl6/comments/96d3q8/i_am_sick_and_tired_of_coming_with_variable_names/e3zvt9w/

[22:59] <lizmat> specifically to the "To my knowledge, perl6 doesn't have a debugger yet"  bit  :-)

[23:25] *** lizmat left
[23:29] <dogbert17> spectest looks pretty good on my end as long as one avoids MVM_SPESH_BLOCKING and MVM_SPESH_NODELAY

[23:33] <dogbert17> if the flags are one there are plenty of fails, some being directly connected to https://github.com/MoarVM/MoarVM/issues/913

[23:34] <dogbert17> other are a bit more bizarre, e.g. MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 ./perl6 -c t/spec/S14-roles/attributes.t which doesn't even compile !

