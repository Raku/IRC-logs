[01:00] *** lizmat joined
[01:00] *** p6bannerbot sets mode: +v lizmat

[01:04] *** lizmat left
[01:25] *** dalek left
[02:23] *** synopsebot left
[02:44] * timotimo figured out why lots and lots of smrt_numify and smrt_strify in nqp code weren't being optimized:

[02:44] <timotimo> spesh couldn't figure out whether or not BOOTInt, BOOTNum, or BOOTStr could have .Str or .Num called on them

[02:44] <timotimo> so i put in a cheat saying "no, there's no methods on these types"

[02:45] <timotimo> and since there were plenty int-to-num-to-ints in there as well, i gave spesh an opt for that

[02:46] <timotimo> int-to-num-to-int is safe, whereas num-to-int-to-num isn't, since num can have values larger than int can handle

[02:46] <timotimo> and since it's nqp and almost all num usage is accidental, i don't think we need to emulate precision loss at higher numbers

[02:47] <timotimo> would be interesting to see if it makes Perl6 code unhappy

[02:49] <timotimo> could perhaps limit it to places where the HLL is nqp

[02:50] <timotimo> many coerce_in (that is, int to num) remain because of deopt usage and such

[02:50] <timotimo> but at least we don't have to intify the num any more

[02:58] <timotimo> it does pass spec tests, so there might be a hole there perhaps

[07:43] *** Geth left
[09:23] *** domidumont joined
[09:23] *** p6bannerbot sets mode: +v domidumont

[10:27] *** lucasb joined
[10:27] *** p6bannerbot sets mode: +v lucasb

[13:25] *** quotable6 left
[13:25] *** bloatable6 left
[13:25] *** bisectable6 left
[13:25] *** squashable6 left
[13:25] *** undersightable6 left
[13:25] *** benchable6 left
[13:25] *** coverable6 left
[13:25] *** reportable6 left
[13:25] *** releasable6 left
[13:25] *** greppable6 left
[13:25] *** statisfiable6 left
[13:25] *** evalable6 left
[13:25] *** unicodable6 left
[13:25] *** notable6 left
[13:25] *** shareable6 left
[13:25] *** nativecallable6 left
[13:25] *** committable6 left
[13:25] *** bisectable6 joined
[13:25] *** evalable6 joined
[13:25] *** notable6 joined
[13:26] *** p6bannerbot sets mode: +v bisectable6

[13:26] *** p6bannerbot sets mode: +v evalable6

[13:26] *** p6bannerbot sets mode: +v notable6

[13:26] *** bloatable6 joined
[13:27] *** greppable6 joined
[13:27] *** p6bannerbot sets mode: +v bloatable6

[13:27] *** p6bannerbot sets mode: +v greppable6

[13:27] *** undersightable6 joined
[13:28] *** reportable6 joined
[13:28] *** quotable6 joined
[13:28] *** p6bannerbot sets mode: +v undersightable6

[13:28] *** benchable6 joined
[13:28] *** squashable6 joined
[13:28] *** releasable6 joined
[13:29] *** p6bannerbot sets mode: +v reportable6

[13:29] *** p6bannerbot sets mode: +v quotable6

[13:29] *** p6bannerbot sets mode: +v benchable6

[13:29] *** p6bannerbot sets mode: +v squashable6

[13:29] *** p6bannerbot sets mode: +v releasable6

[13:29] *** coverable6 joined
[13:29] *** nativecallable6 joined
[13:30] *** shareable6 joined
[13:30] *** p6bannerbot sets mode: +v coverable6

[13:30] *** p6bannerbot sets mode: +v nativecallable6

[13:30] *** statisfiable6 joined
[13:30] *** unicodable6 joined
[13:30] *** committable6 joined
[13:31] *** p6bannerbot sets mode: +v shareable6

[13:31] *** p6bannerbot sets mode: +v statisfiable6

[13:31] *** p6bannerbot sets mode: +v unicodable6

[13:31] *** p6bannerbot sets mode: +v committable6

[13:48] <timotimo> oh, neat: gdb has $_regex and $_streq convenience functions available in breakpoint conditions

[13:56] *** lizmat joined
[13:56] *** p6bannerbot sets mode: +v lizmat

[14:42] *** brrt joined
[14:42] *** p6bannerbot sets mode: +v brrt

[14:49] <brrt> \o

[14:50] <brrt> timotimo++

[14:50] <brrt> (for your late night research)

[14:55] <brrt> something that bothers me

[14:55] <brrt> MoarVM uses the name 'num' for floating points

[14:55] <lizmat> so does Perl 6

[14:57] <brrt> everything else in the world uses 'float'

[14:57] <brrt> which is, to be honest, far more accurate

[15:01] * lizmat was not involved in the naming

[15:07] <mornfall> yes i get regularly bitten by Num :(

[15:07] <mornfall> i expect that to be the root of the numerical type hierarchy

[15:09] <mornfall> specifically i'm prone to write Num as a type constraint and then go wtf do you mean Int is not a Num /o\

[15:10] <brrt> i wonder what is the top of the number chain

[15:12] <jnthn> The Numeric role

[15:12] <timotimo> oh, Real ly?

[15:14] <lucasb> timotimo :D

[15:17] <timotimo> fwiw, javascript, which everybody loves, also calls floats "number"

[15:18] <brrt> well, not everybody loves javascript, tbh

[15:18] <lucasb> it's the only kind of Number JS has :)

[15:19] <brrt> also for lua

[15:20] <brrt> and it works well for them, tbh

[15:20] <jnthn> I suspect "make all the basic numeric types 3 letters long" was a design consideration too :)

[15:24] <brrt> flt

[15:24] <brrt> oh well :-)

[15:24] <timotimo> Cpx

[15:24] <brrt> heh, I can even understand that

[15:24] <timotimo> ctrl-printscrn-x? emacs users these days ...

[15:59] *** zakharyas joined
[16:00] *** p6bannerbot sets mode: +v zakharyas

[16:05] *** brrt left
[16:30] *** brrt joined
[16:31] *** p6bannerbot sets mode: +v brrt

[16:31] <brrt> \o

[16:31] <brrt> no Geth?

[16:51] <brrt> .tell samcv - minilua can be compiled with just '-lm', and it'll work on any platform

[16:51] <yoleaux> brrt: I'll pass your message to samcv.

[16:51] <brrt> And that also fixes issue #999 (or at least I believe it ought to)

[16:55] <brrt> I'm beginning to think that having size parameters to operands was a bad idea

[17:19] *** brrt left
[17:47] *** zakharyas left
[17:50] <timotimo> in the jit?

[17:51] *** dalek joined
[17:51] *** SourceBaby left
[17:51] *** p6lert_ left
[17:51] *** synopsebot joined
[17:51] *** p6lert joined
[17:51] *** Geth joined
[17:52] *** p6bannerbot sets mode: +v dalek

[17:52] *** p6bannerbot sets mode: +v synopsebot

[17:52] *** p6bannerbot sets mode: +v p6lert

[17:52] *** p6bannerbot sets mode: +v Geth

[17:56] *** lucasb left
[17:57] <timotimo> say "hello again" to geth

[17:58] <samcv> .tell brrt then we don't need to worry about libraries on the users computer changing?

[17:58] <yoleaux> 16:51Z <brrt> samcv: - minilua can be compiled with just '-lm', and it'll work on any platform

[17:58] <yoleaux> samcv: I'll pass your message to brrt.

[19:20] *** zakharyas joined
[19:21] *** p6bannerbot sets mode: +v zakharyas

[20:09] *** domidumont left
[20:23] *** lizmat left
[20:30] *** lizmat joined
[20:30] *** p6bannerbot sets mode: +v lizmat

[20:41] <timotimo> Frame size: 33046 bytes (3318 from inlined frames)

[20:41] <timotimo> Specialization took 26781us (total 83586us)

[20:41] <timotimo> JIT was successful and compilation took 56558us

[20:41] <timotimo>     Bytecode size: 141470 byte

[20:42] <timotimo> oh

[20:42] <timotimo> i have --optimize=0

[20:42] <timotimo> that will make a difference

[20:43] <timotimo> the code is doing "save the $_ around this block" apparently

[22:08] *** Kaypie is now known as Kaiepi

[22:11] *** zakharyas left
[22:23] *** lucasb joined
[22:23] *** p6bannerbot sets mode: +v lucasb

