[00:06] *** Redfoxmoon joined
[00:07] *** p6bannerbot sets mode: +v Redfoxmoon

[01:31] *** ZzZombo left
[02:54] *** ggoebel left
[02:55] *** Redfoxmoon left
[03:03] *** Redfoxmoon joined
[03:03] *** p6bannerbot sets mode: +v Redfoxmoon

[03:08] *** ggoebel joined
[03:09] *** p6bannerbot sets mode: +v ggoebel

[03:13] *** lizmat left
[04:33] *** Redfoxmoon left
[04:33] *** Redfoxmoon joined
[04:33] *** asimov.freenode.net sets mode: +v Redfoxmoon

[04:33] *** p6bannerbot sets mode: +v Redfoxmoon

[05:25] *** robertle left
[06:20] *** ZzZombo joined
[06:20] *** p6bannerbot sets mode: +v ZzZombo

[06:20] *** ZzZombo left
[06:21] *** ZzZombo joined
[06:21] *** p6bannerbot sets mode: +v ZzZombo

[06:22] *** robertle joined
[06:22] *** p6bannerbot sets mode: +v robertle

[06:27] *** patrickb joined
[06:27] *** p6bannerbot sets mode: +v patrickb

[06:56] *** brrt joined
[06:57] *** p6bannerbot sets mode: +v brrt

[06:57] <brrt> \o

[07:01] <nwc10> o/

[07:02] <brrt> ohai nwc10

[07:02] <brrt> I decided I may want to destroy the per-thread uv_loop_t

[07:02] <brrt> since all 'real' async use goes over the eventloop thread these days  anyway

[07:05] <brrt> the exception being a few directory operations

[07:08] <brrt> the whole current_frame_nr business may be eliminated as well

[07:14] <brrt> hmm. but maybe not today though :-)

[07:18] *** domidumont joined
[07:19] *** p6bannerbot sets mode: +v domidumont

[07:30] *** zakharyas joined
[07:31] *** p6bannerbot sets mode: +v zakharyas

[07:33] <Geth> Â¦ MoarVM/fork-safety: 5 commits pushed by (Bart Wiegmans)++

[07:33] <Geth> Â¦ MoarVM/fork-safety: 17bd3ea7cd | [Spesh] Tear down spesh worker in full_cleanup

[07:33] <Geth> Â¦ MoarVM/fork-safety: 7b483e6dab | [ConcBlockingQueue] Unmoving body

[07:33] <Geth> Â¦ MoarVM/fork-safety: b7872030b6 | [IO] Stop event loop thread

[07:33] <Geth> Â¦ MoarVM/fork-safety: bd9b72d112 | [ConcBlockingQueue] Implement unshift

[07:33] <Geth> Â¦ MoarVM/fork-safety: 05322f9f72 | [IO] Redundant MVM_gc_mark_thread_blocked causes a panic

[07:33] <Geth> Â¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/compare/0a6fdaec284f...05322f9f7296

[07:34] <Geth> Â¦ MoarVM/fork-safety: d1eb3371ff | (Bart Wiegmans)++ | src/io/eventloop.c

[07:34] <Geth> Â¦ MoarVM/fork-safety: [IO] Wake up event loop to notify it of being closed

[07:34] <Geth> Â¦ MoarVM/fork-safety:

[07:34] <Geth> Â¦ MoarVM/fork-safety: Otherwise the event loop will hang forever

[07:34] <Geth> Â¦ MoarVM/fork-safety: review: https://github.com/MoarVM/MoarVM/commit/d1eb3371ff

[07:47] *** lizmat joined
[07:48] *** p6bannerbot sets mode: +v lizmat

[08:04] *** zakharyas left
[08:05] *** zakharyas joined
[08:06] *** brrt left
[08:06] *** p6bannerbot sets mode: +v zakharyas

[08:12] <timotimo> brrt, the blocker for the release is https://github.com/MoarVM/MoarVM/issues/951

[08:13] <robertle> I am currently bisecting that...

[08:14] <timotimo> cool

[08:34] *** brrt joined
[08:34] *** p6bannerbot sets mode: +v brrt

[09:02] *** zakharyas left
[09:02] *** zakharyas joined
[09:03] *** p6bannerbot sets mode: +v zakharyas

[09:05] *** zakharyas left
[09:05] *** zakharyas joined
[09:06] *** p6bannerbot sets mode: +v zakharyas

[09:32] *** brrt left
[09:55] *** domidumont left
[09:55] *** domidumont joined
[09:56] *** p6bannerbot sets mode: +v domidumont

[10:16] *** ZzZombo left
[10:56] *** lizmat left
[11:05] *** lizmat joined
[11:06] *** p6bannerbot sets mode: +v lizmat

[11:14] <robertle> timotimo, brrt: I got a fix on 951, details in the ticket

[11:15] <AlexDaniel> M#951

[11:15] <synopsebot> M#951 [open]: https://github.com/MoarVM/MoarVM/issues/951 [âš  blocker âš ] Problem running programs on RPi with 2018.08

[11:16] *** zakharyas left
[11:23] *** japhb_ left
[11:33] <timotimo> oh, so it *was* a missing pointer alignment thing after all

[11:33] <timotimo> the reason why it gets memory corruption rather than a sigbus is that there's code to walk the nursery for objects that have to be freed

[11:33] <robertle> oh, and that assumes they are aligned!

[11:33] <robertle> of course!

[11:33] <timotimo> and if some objects don't get aligned properly, we'll be looking at the wrong data inside an object

[11:34] <AlexDaniel> robertle++

[11:34] <robertle> in that case I think the MVM_ALIGN_SIZE should really be within allocate_nursery, not where we call it. it seems a property of the nursery itself that stuff needs to be aligned

[11:44] *** ZzZombo joined
[11:44] *** p6bannerbot sets mode: +v ZzZombo

[11:49] <dogbert2> robertle++

[11:55] *** brrt joined
[11:56] *** p6bannerbot sets mode: +v brrt

[11:56] <Geth> Â¦ MoarVM: robertlemmen++ created pull request #961: Fix alignment of nursery allocations

[11:56] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/961

[12:03] <brrt> robertle++ that looks very sane

[12:04] <timotimo> isn't it nice to have only one blocker for a change? ;)

[12:11] <lizmat> so why isn't it merged yet ?

[12:13] <Geth> Â¦ MoarVM: ccf3dd373e | (Robert Lemmen)++ (committed by Bart Wiegmans) | 2 files

[12:13] <Geth> Â¦ MoarVM: Fix alignment of nursery allocations

[12:13] <Geth> Â¦ MoarVM:

[12:13] <Geth> Â¦ MoarVM: Recent changes used a path to nursery allocation that are not aligned,

[12:13] <Geth> Â¦ MoarVM: leading to segfaults on e.g. armhf. Alignment is really a property of

[12:13] <Geth> Â¦ MoarVM: the nursery as it is also encoded in the collector, so doing the

[12:13] <Geth> Â¦ MoarVM: alignment within the allocator, not at the call site.

[12:13] <Geth> Â¦ MoarVM:

[12:13] <Geth> Â¦ MoarVM: Fixes https://github.com/MoarVM/MoarVM/issues/951

[12:13] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ccf3dd373e

[12:13] <brrt> because I'm waiting for the results to come in ;-)

[12:14] <lizmat> aha... ok  :-)

[12:27] <brrt> bump time, I'd think?

[12:44] *** zakharyas joined
[12:45] *** p6bannerbot sets mode: +v zakharyas

[12:55] <Geth> Â¦ MoarVM/pea: e9cbb7f1f1 | (Jonathan Worthington)++ | 13 files

[12:55] <Geth> Â¦ MoarVM/pea: Minimal escape analysis and scalar replacement

[12:55] <Geth> Â¦ MoarVM/pea:

[12:55] <Geth> Â¦ MoarVM/pea: This only handles the case where:

[12:55] <Geth> Â¦ MoarVM/pea:

[12:55] <Geth> Â¦ MoarVM/pea: * No aliasing

[12:55] <Geth> Â¦ MoarVM/pea: * No deoptimizing instructions

[12:56] <Geth> Â¦ MoarVM/pea: * No control flow (conditionals, loops)

[12:56] <Geth> Â¦ MoarVM/pea: <â€¦commit message has 7 more linesâ€¦>

[12:56] <Geth> Â¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/e9cbb7f1f1

[12:56] <Geth> Â¦ MoarVM/pea: a13e416e5f | (Carl Masak)++ (committed by Jonathan Worthington) | src/spesh/usages.h

[12:56] <Geth> Â¦ MoarVM/pea: Reset MVM_SPESH_CHECK_DU to 0

[12:56] <Geth> Â¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/a13e416e5f

[12:56] <Geth> Â¦ MoarVM/pea: dab77573d4 | (Carl Masak)++ (committed by Jonathan Worthington) | src/spesh/manipulate.c

[12:56] <Geth> Â¦ MoarVM/pea: Add missing comment to a new function

[12:56] <Geth> Â¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/dab77573d4

[12:57] <jnthn> Just a rebase :)

[12:57] <Geth> Â¦ MoarVM/pea: fc0d9ece23 | (Jonathan Worthington)++ | src/spesh/pea.c

[12:57] <Geth> Â¦ MoarVM/pea: Handle int64, num64, and str attributes in PEA

[12:57] <Geth> Â¦ MoarVM/pea: review: https://github.com/MoarVM/MoarVM/commit/fc0d9ece23

[12:57] *** robertle left
[12:57] <jnthn> That one's new, though :)

[12:57] <lizmat> pea?

[12:57] * jnthn is on his way home, and will be back proper on Monday or so :)

[12:58] <jnthn> partial escape analysis

[12:58] <lizmat> ah

[12:58] <lizmat> ok

[12:58] <lizmat> I guess I expected mea :-)

[12:59] <nine> jnthn: JFI, I'm cooking something that I think will interest you: https://gist.github.com/niner/037905ca666fa05d4e627eb948568b22

[13:04] *** zakharyas left
[13:05] *** zakharyas joined
[13:05] <jnthn> .oO( I hope it's a curry...please let it be a curry... )

[13:06] *** p6bannerbot sets mode: +v zakharyas

[13:06] <jnthn> nine: ooh, nice )

[13:07] <jnthn> nine: You saw my gist with the proposed ops for doing this more efficiently too? :)

[13:07] <nine> nope?

[13:07] <jnthn> oh.

[13:07] <jnthn> Moment...I find the gist

[13:07] <jnthn> nine: https://gist.github.com/jnthn/1e865a06d213d89d9aa6352908858a57

[13:09] <jnthn> The first comment I agree with, fiw. The second one is a mixed bag, though mostly relates to the Perl 6 API, and I don't much care about that part right away.

[13:09] <jnthn> *fwiw

[13:10] <brrt> ohai jnthn :-)

[13:10] <jnthn> Oh, and that last comment totally misunderstood the point that I was specifying a low level API to build the user level ones on. :)

[13:11] <jnthn> So it's kinda interesting, but I purposefully didn't try to design a high level API because I knew that'd be a bike-shed :)

[13:11] <jnthn> o/ brrt

[13:12] <nine> jnthn: oh, yes, that sounds helpful. I guess the bytecode writer can also become a good use case for testing such an API.

[13:15] <jnthn> Yes, that was my intention :)

[13:15] <jnthn> Prove the ops on a real-world problem first :)

[13:16] <nine> Then I have another good reason for continuing this experiment :)

[13:18] <jnthn> nine++ :)

[13:19] <brrt> yeah, i'm still in favor of that design

[13:23] <brrt> nine++ that is pretty cool

[13:23] <brrt> but.

[13:24] <brrt> I've been looking into the ELF format, and I can't find a reason why we couldn't fit MBC into ELF

[13:24] <timotimo> what will that offer?

[13:24] <brrt> native linking, for one thing

[13:24] <jnthn> nine: fwiw, I was also thinking we could switch away from the MAST tree along the way

[13:24] <brrt> debugging support, for another

[13:25] <timotimo> we could make moarvm files executable to just print out "This program cannot be run in Linux mode."

[13:25] <brrt> better yet, you can associate ELF with an interpreter

[13:25] <timotimo> bleeeehhh, nose bleeds *again*?

[13:25] <brrt> so you can even make executables

[13:26] <jnthn> nine: Getting rid of all of the allocations in the code gen phase

[13:26] <jnthn> nine: Or at least, getting rid of loads of them

[13:26] <jnthn> I suspect that'd make compilation significantly faster

[13:27] <nine> jnthn: yes, my understanding is that getting rid of the MAST tree is what could make the NQP bytecode writer useful from a performance (and memory usage) perspective. I'm starting with MAST to get something up and running quickly and will later replace more and more of the MAST compiler by this, piece by piece.

[13:27] <jnthn> nine: Yeah, that's a good strategy.

[13:27] * jnthn is very much in favor

[13:28] <nine> the QAST -> MAST step is not quite trivial :) But I guess even just getting rid of representing all ops and their arguments by generated byte code will save a lot of allocations already

[13:28] <nine> err... "getting rid of reresenting all ops and their arguments by tree nodes and replacing that with generated byte code"

[13:29] <timotimo> ... resenting all ops ...

[13:31] <jnthn> nine: Yeah, at the very least labels will need fixups after the fact

[13:31] <jnthn> But that's still just keeping a table of fixups and doing it later ;)

[13:31] <timotimo> even then, they can be kept around as sets of offsets into the bytecode

[13:31] <timotimo> yeah

[13:34] <timotimo> the more we get from C to nqp, the closer we get to being able to implement the trickier GC techniques, like concurrent or incremental

[13:36] <brrt> ... at which point I reiterate my stance that I'd rather not, if all were the same

[13:36] <timotimo> fair enough. we'll see when we get there how much C we still have that'll require us to write code enormously carefully

[13:47] <timotimo> one day i'd like to look into methods of making nurseries of less-active threads not promote to the old gen as fast

[13:49] <timotimo> perhaps it could be as simple as "don't set the 'seen in nursery already' bit unless the nursery in question has been filled up to 25%"

[13:50] *** brrt left
[13:59] <timotimo> also, perhaps auditing the source code for assumptions of "gen2 means never moves" could be a good idea, in case we want compaction of the old gen at some point. which i think would be good to have for very-long-running processes like, say, a cro web app

[14:00] <jnthn> That's very widely assumed :)

[14:00] <timotimo> it is, yeah

[14:01] <timotimo> so maybe we'll never get compaction in gen2? :S

[14:03] <jnthn> We'd need evidence to know we've got a problem there for real programs bbefore worrying about it, I think

[14:03] <nine> never say never...

[14:03] <jnthn> gen2 is organized into fixed-size bins and then falls back to malloc for oversized

[14:04] <jnthn> For the first to be an issue, we need the app to dramatically change its alocation patterns during its runtime

[14:05] <jnthn> A Cro webapp is likely serving the same kind of requests over and over again so should get a good hit rate on the sizes used, so that seems a less likley candidate for problems to me

[14:05] <timotimo> it'll at least do that whenever it enters the compiler, for example if you have a template library that EVALs

[14:06] <timotimo> but it'll always come back from that, and the number of times it'll do that is probably bounded, unless you do hot template reloading

[14:15] *** zakharyas left
[14:16] *** zakharyas joined
[14:17] *** p6bannerbot sets mode: +v zakharyas

[14:19] *** ZzZombo_ joined
[14:20] *** p6bannerbot sets mode: +v ZzZombo_

[14:21] *** ZzZombo left
[14:32] *** MasterDuke left
[14:46] *** ZzZombo_ left
[14:46] *** ZzZombo_ joined
[14:46] *** card.freenode.net sets mode: +v ZzZombo_

[14:46] *** p6bannerbot sets mode: +v ZzZombo_

[14:46] *** ZzZombo_ is now known as ZzZombo

[14:50] *** lizmat left
[14:56] *** robertle joined
[14:57] *** p6bannerbot sets mode: +v robertle

[15:04] *** zakharyas left
[15:04] *** brrt joined
[15:05] *** zakharyas joined
[15:05] *** p6bannerbot sets mode: +v brrt

[15:06] *** p6bannerbot sets mode: +v zakharyas

[15:42] *** dogbert17 left
[15:59] *** patrickb left
[16:02] *** domidumont left
[16:05] *** zakharyas left
[16:06] *** brrt left
[16:12] *** zakharyas joined
[16:13] *** p6bannerbot sets mode: +v zakharyas

[16:20] *** robertle left
[16:44] *** zakharyas left
[17:00] *** robertle joined
[17:01] *** p6bannerbot sets mode: +v robertle

[17:18] *** lizmat joined
[17:19] *** p6bannerbot sets mode: +v lizmat

[18:19] *** zakharyas joined
[18:20] *** p6bannerbot sets mode: +v zakharyas

[19:03] *** zakharyas left
[19:37] *** Kaiepi left
[21:13] *** MasterDuke joined
[21:13] *** p6bannerbot sets mode: +v MasterDuke

[21:13] *** MasterDuke left
[21:13] *** MasterDuke joined
[21:13] *** herbert.freenode.net sets mode: +v MasterDuke

[21:13] *** p6bannerbot sets mode: +v MasterDuke

[21:17] *** MasterDuke left
[21:46] *** Kaiepi joined
[21:46] *** p6bannerbot sets mode: +v Kaiepi

[22:56] *** MasterDuke joined
[22:56] *** p6bannerbot sets mode: +v MasterDuke

[22:56] *** MasterDuke left
[22:56] *** MasterDuke joined
[22:56] *** herbert.freenode.net sets mode: +v MasterDuke

[22:56] *** p6bannerbot sets mode: +v MasterDuke

[23:39] *** ZzZombo_ joined
[23:40] *** p6bannerbot sets mode: +v ZzZombo_

[23:41] *** ZzZombo left
