[00:01] <AlexDaniel> night o/

[00:10] *** Kaiepi left
[06:28] *** Kaiepi joined
[06:48] *** robertle joined
[07:09] *** domidumont joined
[07:16] *** domidumont left
[07:16] *** domidumont joined
[07:21] <nwc10> for me, t/spec/S09-typed-arrays/native-int.rakudo.moar

[07:21] <nwc10> fails currently

[07:22] <nwc10> ok 871 - uint array .eager returns identity

[07:22] <nwc10> Bytecode validation error at offset 52, instruction 9:

[07:22] <nwc10> operand type 160 does not match register type 32

[07:22] <nwc10>   in block <unit> at t/spec/S09-typed-arrays/native-int.rakudo.moar line 96

[08:02] *** zakharyas joined
[08:13] *** zakharyas left
[08:16] *** zakharyas joined
[08:34] *** zakharyas left
[08:34] *** zakharyas joined
[08:45] *** domidumont left
[08:46] *** domidumont joined
[09:06] <jnthn> morning o/

[09:22] <nwc10> correct!

[10:25] *** lizmat joined
[10:51] *** zakharyas left
[11:50] <lizmat> only 50 commits until the 10K mark for MoarVM

[11:50] <jnthn> Wow :)

[11:51] <jnthn> Alrighty, time to try and work on that inlining thingy

[11:52] <lizmat> hehe

[11:54] <jnthn> Which I hope will take me a lot less than 50 commits to get right :P

[12:37] *** brrt joined
[12:41] <brrt> \o

[12:41] <jnthn> o/ brrt

[12:41] <brrt> ohai jnthn

[12:41] <brrt> i'm in the process of creating a blog post detailing the history of spesh/jit

[12:42] <brrt> based on both our blog posts, and maybe timotimo's and nine's if I can find them

[12:42] <brrt> ehm... maybe you can help me find some :-)

[12:42] <timotimo> oh, did i make a blog post about spesh?

[12:44] * lizmat looks forward to result  :-)

[12:44] <brrt> you might have timotimo

[12:45] <brrt> this in response to the comment 'perl6 on moarvm is starting to grow a JIT' :-)

[12:45] <timotimo> i don't seem to recall... wakelift.de has only been a bloggy-blog for a few months now and there's only my reports on profiling grant work on there so far

[12:45] <jnthn> brrt: Nice. Mine are all on my 6guts blog. Also there's at least one talk slides that might be worth linking to.

[12:47] <brrt> oh, yes

[12:47] <Geth> Â¦ MoarVM/inline-unspecialized: b44135a1d4 | (Jonathan Worthington)++ | src/spesh/inline.c

[12:47] <Geth> Â¦ MoarVM/inline-unspecialized: Factor out static frame inlinability checks

[12:47] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/b44135a1d4

[12:47] <Geth> Â¦ MoarVM/inline-unspecialized: d3b888b27b | (Jonathan Worthington)++ | src/spesh/inline.c

[12:47] <Geth> Â¦ MoarVM/inline-unspecialized: Factor out spesh graph inlinability checks

[12:47] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/d3b888b27b

[12:57] <jnthn> Hmm, it seems that when the call to MVM_spesh_facts_discover was added, then since we already had code that dealt with usage count setting for inlines, we are probably double-counting usages

[12:57] <jnthn> Of inlines

[13:04] <timotimo> mhm, so we keep more than we need to

[13:05] <jnthn> Yeah, it'd frustrate dead code elim

[13:07] <timotimo> should the code from just inlining that builds counts be thrown out since facts_discover is precise?

[13:11] <Geth> Â¦ MoarVM/inline-unspecialized: fa471f1d8c | (Jonathan Worthington)++ | 3 files

[13:11] <Geth> Â¦ MoarVM/inline-unspecialized: Fact discovery determines usage counts

[13:11] <Geth> Â¦ MoarVM/inline-unspecialized:

[13:11] <Geth> Â¦ MoarVM/inline-unspecialized: Some time ago, a call was added to do fact discovery on inlinees. This

[13:11] <Geth> Â¦ MoarVM/inline-unspecialized: process sets usage counts along the way. However, the code to set the

[13:11] <Geth> Â¦ MoarVM/inline-unspecialized: usage counts in inlining was also in place, so we doubled all of the

[13:11] <Geth> Â¦ MoarVM/inline-unspecialized: counts, which would frustrate dead code elimination possibilities that

[13:11] <Geth> Â¦ MoarVM/inline-unspecialized: arise post-inline.

[13:11] <Geth> Â¦ MoarVM/inline-unspecialized: <â€¦commit message has 6 more linesâ€¦>

[13:11] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/fa471f1d8c

[13:11] <timotimo> that looks good

[13:12] <timotimo> just from the amount of insertions vs deletions :)

[13:12] <jnthn> ;)

[13:17] <timotimo> ugh, we had a little rainstorm an hour ago, but instead of making it cooler it only made it more humid :|

[13:23] <brrt> shall I tell you something funny

[13:23] <brrt> the Netherlands is actually drying out

[13:24] <timotimo> the joke was always that the netherlands is going to flood, but instead it'll first turn into a desert?

[13:24] <brrt> alternatingly, yes

[13:26] <Geth> Â¦ MoarVM/inline-unspecialized: 4ecbafa721 | (Jonathan Worthington)++ | src/spesh/optimize.c

[13:26] <Geth> Â¦ MoarVM/inline-unspecialized: Do spesh log of inlines in log_inline

[13:26] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/4ecbafa721

[13:28] <jnthn> hmm, just spotted that optimize_string_equality seems to have debugging fprintf calls left behind

[13:29] <timotimo> aw, crap

[13:30] <timotimo> https://gist.github.com/gerad/247799/e5a81fab04dd238f774e2cda8e1481ab45f2d908 i might want to put this into my git repo

[13:30] <timotimo> (and change it so it matches printf.*stderr

[13:31] <timotimo> oh, but optimize_string_equality starts with "return;"

[13:32] <timotimo> so it's not completely bad

[13:32] <jnthn> So two wrongs do make a right? :P

[13:32] <timotimo> if C had nestable comments... ;)

[13:38] *** brrt left
[13:41] *** brrt joined
[13:51] <jnthn> BOOM segfault!

[13:54] *** brrt left
[13:57] <jnthn> In deopt. In uninlining. Of course it'd be in uninlining.

[14:00] <lizmat> it just got cooler outside!   29.9 -> 29.8  whee!  *sigh*

[14:01] * tadzik laughs in polish

[14:01] <jnthn> 30 here too

[14:01] <tadzik> 28!

[14:02] <jnthn> Tssk, so what on earth is happening with the code_ref_reg that we need for deopt...

[14:08] <timotimo> it's not marked as used? :o

[14:08] <jnthn> Explicitly, including on the new code path

[14:08] <nwc10> step away from the keyboard for a while?

[14:09] <nwc10> (and test whether the beer is cold)

[14:10] <jnthn> ooh, could be an existing bug that I've just tickeld

[14:10] <jnthn> *tickled

[14:15] <jnthn> Yeah, I think I see what's happening. We inline more now.

[14:17] <jnthn> So probably just hit an existing issue where when we take the bytecode for a candidate and turn it back into a graph, we don't see that the code ref reg is used from that graph

[14:19] <jnthn> Alas, that's not a trivial one to fix precisely because we don't know which SSA version to bump the usage count on even if we do know the register.

[14:25] <jnthn> ugh, no, that fix didn't help anything :S

[14:34] <jnthn> Hmm, well apparently it is triggered and so can help but...

[14:43] *** brrt joined
[14:49] *** zakharyas joined
[14:50] <dogbert17> brrt, do you have any theories with regards to the problem reported yesterday? http://colabti.org/irclogger/irclogger_log/moarvm?date=2018-07-03#l132

[14:55] <brrt> i have not enough information to answer :-)

[14:55] <brrt> i haven't seen it, at any rate

[14:56] <brrt> when does this happen?

[14:56] <jnthn> ooh, I should tried this earlier

[14:57] <jnthn> The deopt crash only happens under JIT

[14:57] <jnthn> Not sensitive to EXPR JIT either

[15:01] <dogbert17> brrt: the valgrind complaints comes early, before any tests have been run, then it fails with bytecode error on test #76.  MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 ./perl6-valgrind-m t/spec/S02-types/native.rakudo.moar

[15:04] <jnthn> Under the interpreter I get:

[15:04] <jnthn> Deopt one requested by interpreter in frame '' (cuid '118')

[15:04] <jnthn> Will deopt 456 -> 404

[15:05] <jnthn> But then under JIT it's

[15:05] <jnthn> Deopt one requested by JIT in frame '' (cuid '118') (4208 -> 404)

[15:08] <jnthn> And in the interpreter case we don't have anything to uninline

[15:08] <jnthn> Which lends further suggestion to that first number - the current offset - being bogus

[15:10] <dogbert17> brrt, here's the complete valgrind output: https://gist.github.com/dogbert17/d64f0a8ef752ee078c0524f33cfb9b19

[15:13] <jnthn> ahh, think I found it

[15:15] <dogbert17> spesh related?

[15:18] <Geth> Â¦ MoarVM/inline-unspecialized: 155f1dfb26 | (Jonathan Worthington)++ | src/spesh/deopt.c

[15:18] <Geth> Â¦ MoarVM/inline-unspecialized: Update deopt logging, which bitrotted

[15:18] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/155f1dfb26

[15:18] <jnthn> Yeah, was not updating the deopt annotations properly, so they scribbled bogus offsets into the table

[15:21] <MasterDuke> jnthn: btw, i updated https://github.com/japhb/perl6-bench recently so it runs on current rakudo. what's needed to get that daily run that was posted somewhere to moarvm.org back up and running?

[15:22] <dogbert17> and when will MoarVM/inline-unspecialized be merged?

[15:23] <dogbert17> hmm, perhaps we're discussing two different problems :)

[15:23] <brrt> jnthn: what did I break

[15:23] <brrt> dogbert17: it would help so much if I actually knew what code was breaking

[15:24] <brrt> oh, I see

[15:25] <jnthn> brrt: You didn't in my case. :)

[15:25] <jnthn> brrt: It was a problem that showed up in JIT but could hardly be blamed on JIT after all :)

[15:26] <Geth> Â¦ MoarVM/inline-unspecialized: ca51c5e27d | (Jonathan Worthington)++ | src/spesh/inline.c

[15:26] <Geth> Â¦ MoarVM/inline-unspecialized: Make sure deopt code ref reg is never eliminated

[15:26] <Geth> Â¦ MoarVM/inline-unspecialized:

[15:26] <Geth> Â¦ MoarVM/inline-unspecialized: We need this for deopt. In a multi-level inline situation, however,

[15:26] <Geth> Â¦ MoarVM/inline-unspecialized: we were at risk of deleting the instruction that set it.

[15:26] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/ca51c5e27d

[15:27] <dogbert17> brrt: what is it that I have failed to provide? (confused)

[15:28] <brrt> up until i saw the valgrind output, I had no idea which script was failing in the first place

[15:28] *** robertle left
[15:29] <dogbert17> I see, my comments from yesterday were perhaps a bit vague :)

[15:34] <jnthn> dogbert17: As to how long until inline-unspecialized can be merged: not sure. Having fixed the crash I mentioned a moment ago, it now happily builds/tests NQP (not stresssed, mind) but I get a SEGV during the Rakudo build

[15:34] <jnthn> Waiting for valgrind to hopefully tell me more :)

[15:37] <brrt> how the hell are we breaking 'new'

[15:38] <jnthn> Ah, thankfully that was a silly thinko :)

[15:48] <jnthn> Hmmm...

[15:53] <jnthn> Wow, I seem to have managed to have a bug that results in a miscompile of NQP such that it miscompiles Rakudo such that it crashes when compiling a Perl 6 program

[15:55] <jnthn> Is it just my head that hurts thinking about this? :)

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized: f59335eaa6 | (Jonathan Worthington)++ | 5 files

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized: Attempt inlining so-far unspecialized callees

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized:

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized: Sometimes we know the callee, but there wasn't yet a specialization

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized: (or an applicable specialization) performed. If the bytecode is small

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized: enough, then we can produce a specialization on demand and try to do

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized: an inlining of that.

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized:

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized: This doesn't yet convey the types of the incoming arguments to the

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized: specialization of the callee, so various possible optimizations are

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized: still not performed yet.

[15:59] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/f59335eaa6

[16:01] <lizmat> jnthn: broken turtles all the way down :-)

[16:04] <jnthn> Ah, it gets more and less fun simultaneously. Actually it's a mis-compile of Rakudo that takes place, the NQP itself is OK. I was thrown off by the fact that reverting my new opt didn't help things.

[16:04] <jnthn> But master does work out with just a Rakudo rebuild

[16:04] <jnthn> That means it's one of the commits I did in my branch that led up to the optimization itself.

[16:07] <lizmat> :-(

[16:09] <jnthn> Will soon know if fa471f1d8c is to blame; seems somewhat likely

[16:10] <jnthn> huh, it isn't

[16:14] *** AlexDaniel left
[16:16] *** domidumont left
[16:25] <jnthn> Ahh...I musta done something wrong in my analysis

[16:25] <jnthn> It *is* the new opt

[16:28] *** robertle joined
[16:31] *** scovit left
[16:59] *** domidumont joined
[17:03] <Geth> Â¦ MoarVM/inline-unspecialized: 64dd94d34e | (Jonathan Worthington)++ | src/spesh/inline.c

[17:03] <Geth> Â¦ MoarVM/inline-unspecialized: Cope with inlinees with empty first basic block

[17:03] <Geth> Â¦ MoarVM/inline-unspecialized:

[17:03] <Geth> Â¦ MoarVM/inline-unspecialized: We could also implement removing those, but it's probably good for the

[17:03] <Geth> Â¦ MoarVM/inline-unspecialized: inliner to be robust in the face of them anyway.

[17:03] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/64dd94d34e

[17:06] *** scovit joined
[17:26] <japhb> .oO( robust in the face of the enemy^Winlinee )

[17:27] <jnthn> :D

[17:29] <Geth> Â¦ MoarVM/inline-unspecialized: 8c3859ebd8 | (Jonathan Worthington)++ | src/spesh/inline.c

[17:29] <Geth> Â¦ MoarVM/inline-unspecialized: Don't try to inline with a flattening callsite

[17:29] <Geth> Â¦ MoarVM/inline-unspecialized:

[17:29] <Geth> Â¦ MoarVM/inline-unspecialized: The args processing code never had to handle that case before (it is

[17:29] <Geth> Â¦ MoarVM/inline-unspecialized: blocked much earlier, by simply never producing a candidate in that

[17:29] <Geth> Â¦ MoarVM/inline-unspecialized: case), and so did completely bogus things.

[17:29] <Geth> Â¦ MoarVM/inline-unspecialized: review: https://github.com/MoarVM/MoarVM/commit/8c3859ebd8

[17:32] *** Kaiepi left
[17:33] *** Kaiepi joined
[17:36] <jnthn> Seems far, far better with that patch :-)

[17:40] <jnthn> Enough for today o/

[17:55] *** Kaiepi left
[17:56] *** Kaiepi joined
[18:08] *** lizmat left
[18:10] *** zakharyas left
[18:17] *** lizmat joined
[18:50] *** brrt left
[19:09] *** domidumont left
[19:25] *** brrt joined
[19:47] *** Kaiepi left
[19:47] *** Kaiepi joined
[20:16] *** AlexDaniel joined
[20:35] *** dogbert17 left
[21:04] *** brrt left
[21:10] *** robertle left
[23:05] *** stmuk joined
[23:05] <Geth> Â¦ MoarVM: jstuder-gh++ created pull request #893: Display build/commit info on config/make

[23:05] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/893

