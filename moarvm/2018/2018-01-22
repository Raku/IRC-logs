[00:30] *** yoleaux joined
[00:30] *** travis-ci joined
[00:30] <travis-ci> MoarVM build failed. Samantha McVey 'Merge pull request #781 from samcv/ucd-critic

[00:30] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/330705279 https://github.com/MoarVM/MoarVM/compare/a7a26eb1161e...a74869e37bcb

[00:30] *** travis-ci left
[01:37] *** Kaiepi joined
[01:39] *** Kaiepi joined
[02:57] *** ilbot3 joined
[03:06] *** mtj_ joined
[03:13] *** AlexDaniel joined
[04:14] *** mtj_ joined
[04:53] *** nativecallable6 joined
[05:16] *** Kaiepi joined
[05:50] *** statisfiable6 joined
[07:52] *** domidumont joined
[08:13] *** domidumont joined
[08:27] *** brrt joined
[08:34] *** zakharyas joined
[08:56] *** zakharyas joined
[09:01] *** zakharyas joined
[09:20] *** jsimonet joined
[09:27] *** zakharyas joined
[11:17] *** zakharyas joined
[11:34] *** yoleaux joined
[11:44] *** psch joined
[11:49] *** releasable6 joined
[12:04] *** brrt1 joined
[12:06] *** AlexDani` joined
[12:14] *** yoleaux joined
[12:36] *** benchable6 joined
[12:37] *** coverable6 joined
[12:37] *** reportable6 joined
[13:27] *** zakharyas joined
[13:59] *** domidumont joined
[14:05] *** yoleaux joined
[14:14] *** bisectable6 joined
[14:18] *** Kaiepi joined
[14:51] *** domidumont joined
[15:17] *** zakharyas joined
[15:28] *** yoleaux joined
[15:40] *** nebuchadnezzar joined
[15:40] *** timotimo joined
[15:43] *** releasable6 joined
[15:54] *** yoleaux joined
[15:58] *** ggoebel joined
[16:04] *** brrt joined
[16:52] *** zakharyas joined
[17:06] *** brrt joined
[17:11] *** zakharyas joined
[17:34] *** geospeck joined
[17:43] *** evalable6 joined
[17:56] *** Kaiepi joined
[17:56] *** AlexDani` joined
[18:34] *** Kaiepi joined
[18:38] *** domidumont joined
[18:43] *** MasterDuke joined
[18:44] *** domidumont joined
[18:46] *** domidumont1 joined
[18:49] *** Kaiepi joined
[18:51] *** domidumont joined
[18:58] *** domidumont joined
[19:08] *** domidumont joined
[19:09] *** domidumont joined
[19:09] *** domidumont joined
[19:14] *** domidumont joined
[19:22] <MasterDuke> is there any benefit to creating templates that just call c functions for the expr jit? or is the fall(back|through) to the old jit just as efficient?

[19:36] *** quotable6 joined
[19:40] *** domidumont joined
[19:53] <timotimo> depends on what the next step in the bb would have been

[19:55] <MasterDuke> would it ever be less efficient?

[19:55] <timotimo> shouldn't be

[19:55] <jnthn> Possibly the expr JIT can avoid some dupe loads

[19:55] <timotimo> that's true

[19:55] <jnthn> So could come out better

[19:55] <timotimo> it might also be able to avoid stores :)

[19:57] <MasterDuke> sounds like it's worth it to go to the effort of creating templates for all the ops then?

[19:58] <timotimo> just make sure to prioritize working on the ones that are more common

[19:59] <MasterDuke> sure

[20:00] <timotimo> does the "parse jitgraph" script help any?

[20:00] *** domidumont1 joined
[20:01] <MasterDuke> however; the most common, sp_findmeth, might be out of my paygrade right now. it's been ~10 years since i've really read assembly and ~15 years since i've written any

[20:02] <MasterDuke> haven't really looked at the output yet

[20:03] <MasterDuke> but i think it's saying all were skipped

[20:03] <timotimo> i'd rather read the C implementation in interp.c than try to go from emit.dasc to a template jit thingie

[20:03] <MasterDuke> because of surprising lines

[20:03] <timotimo> right, that's unsurprising :)

[20:04] <MasterDuke> but wouldn't what's in emit.dasc be optimized?

[20:04] <timotimo> i'd expect it to be 1:1 translated from interp.c

[20:05] <MasterDuke> or you're saying the expr jit should do a better job optimizing a conversion of the c implementation than a conversion of the asm?

[20:07] <MasterDuke> hm, the comments for sp_findmeth in both interp.c and emit.dasc look similar

[20:10] <timotimo> the wins come from the template jit being able to look at multiple ops in a row; from C to emit.dasc is mostly 1:1 translations because the lego jit doesn't have much additional information

[20:12] <MasterDuke> ah

[20:36] *** Kaiepi joined
[20:37] *** domidumont joined
[20:42] <timotimo> it can do better than interp.c if a type is known and a reprop is called, like push_o for example. either it has to look up an object's STable, find its REPR, and grab the function pointer from in there

[20:42] <timotimo> but the jit can put the function pointer right into the compiled assembly code

[22:22] *** squashable6 joined
[22:22] *** unicodable6 joined
[22:22] *** committable6 joined
[22:22] *** bloatable6 joined
[22:40] <timotimo> jnthn: looking into beefing up udp receiving; is it okay to be ignoring UV_UDP_PARTIAL flags if they get set?

[22:41] <timotimo> * Indicates message was truncated because read buffer was too small. The

[22:41] <timotimo> * remainder was discarded by the OS. Used in uv_udp_recv_cb.

[22:41] *** yoleaux joined
[22:42] <timotimo> though i don't think we control buffer size at all from our end?

[22:42] <jnthn> If I remember correctly, this is about the size of the read buffer we pass to libuv

[22:42] <jnthn> libuv drops bytes on the floor if that's too short

[22:43] <jnthn> But I think (though please check it) that our buffer size is the maxium packet size anyway

[22:43] <geekosaur> um, the OS UDP interface does have such a flag

[22:43] <timotimo> doesn't libuv decide what size it wants and calls on_alloc from us?

[22:43] <geekosaur> uf you tell it to recv() or recvfrom() to a buffer that is too small for the packet received,it sets the partial flag on the result

[22:43] <jnthn> It passes a suggested size, which we can ignore or respect

[22:44] <jnthn> geekosaur: That's probably why libuv works that way, then :)

[22:44] <timotimo> we have no way to see if an incoming packet is too big for us?

[22:44] <geekosaur> nope. UDP is kinda dumb that way

[22:44] <jnthn> geekosaur: Is there a maximum possible size it could be, though?

[22:45] <jnthn> (Or perhaps a way to find that out?)

[22:45] <geekosaur> there is, but it is system and to some extent network dependent.

[22:45] <timotimo> MTU is the upper limit, right?

[22:45] <geekosaur> and that last part basically means you can't find out

[22:46] <jnthn> If I'm reading https://en.wikipedia.org/wiki/User_Datagram_Protocol#Packet_structure right then it's 2 bytes for the size field in the packet

[22:46] <geekosaur> it us, but note that (a) path MTU discovery is not really a thing on UDP, because it requires retransmits (b) the max MTU is the lowest max MTU of the traversed network nodes

[22:46] <jnthn> Which would imply 64KB is the most one could expect

[22:47] <geekosaur> and (c) there is n guarantee that two packets fromt he same source to the same destination follow the same path

[22:47] <timotimo> you can also send UDP over a unix domain socket, right?

[22:47] <timotimo> does that give us practically infinite mtu?

[22:48] <geekosaur> you can, but the max MTU will depend on kernel buffers for unix domain sockets. which often are the same as pipe buffers

[22:48] <timotimo> fair enough

[22:50] <timotimo> int uv_recv_buffer_size(uv_handle_t* handle, int* value)Â¶

[22:51] <timotimo> maybe this is how we can change the buffer size

[22:57] <lizmat> from former work, I know that UDP packets that get too long, may also be dropped completely by routers

[22:57] <lizmat> so it's usually in the interest of the sender to keep packages as small as possible

[22:58] <timotimo> true, there's no ICMP fragmentation reports for udp

[22:58] <timotimo> because if you're using UDP, you're fine with data getting lost

[23:01] <timotimo> i wonder if holding on to the last sockaddr so as not to rebuild string after string after string of the same ip address over and over again

[23:01] <timotimo> (and also an Int object for the port)

[23:09] *** greppable6 joined
[23:14] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/01/22/2018-04-its-time-for-optimism/

[23:19] <timotimo> i'm slightly confused. the callback that (i believe) gets called when a udp message comes in already has parameters for 2x port and 2x hostname, but none of them got passed by the udp impl so far and why doesn't that explode violently? %)

[23:25] <timotimo> (that was in fact the listener supply, not the message supply)

[23:27] *** SmokeMachine joined
[23:53] <timotimo> are optional parameters in our callbacks for asyncreadbytes and friends costly at all i wonder ...

[23:54] <jnthn> Not terribly

[23:57] <timotimo> i don't have a design for the API of receiving udp messages including the host and port, but it looks like the plumbing around everything will make returning proper objects a bit annoying

[23:57] <timotimo> i.e. the encoded supply just grabs the emitted things from the supply and calls .encode on it to get a string instead of the buf
