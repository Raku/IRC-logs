[02:55] *** greppable6 joined
[02:57] *** ilbot3 joined
[04:12] *** tbrowder joined
[04:16] *** SmokeMachine joined
[06:12] *** yoleaux joined
[06:14] *** AlexDaniel joined
[06:16] <AlexDaniel> squashable6: next

[06:16] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà3 hours (2018-03-03 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[06:44] *** domidumont joined
[06:52] *** domidumont joined
[07:15] *** domidumont joined
[07:36] *** robertle_ joined
[07:48] *** AlexDaniel joined
[07:56] *** benchable6 joined
[08:15] *** domidumont joined
[09:17] *** zakharyas joined
[09:19] *** zakharyas joined
[09:32] *** zakharyas joined
[09:57] *** Geth joined
[10:05] *** brrt joined
[10:06] <brrt> .

[10:07] <brrt> it may be the case that the bug we're seeing, is bindlex not respecting a write barrier

[10:07] <brrt> (the bug in box_s/box_i)

[10:10] *** reportable6 joined
[10:11] *** bisectable6 joined
[10:18] *** domidumont joined
[10:24] *** brrt joined
[10:25] <brrt> now I will look at the decompose-object-conditional thing

[10:26] <brrt> (i'm wondering if I should have  a 'named template' thing where the expr template compiler outputs a constant that refers to the template index)

[10:26] <Geth> ¬¶ MoarVM: bfccd35c74 | (Bart Wiegmans)++ | 3 files

[10:26] <Geth> ¬¶ MoarVM: Bindlex needs a write barrier

[10:26] <Geth> ¬¶ MoarVM:

[10:26] <Geth> ¬¶ MoarVM: I recall this being a bug for the lego JIT as well, a long time

[10:26] <Geth> ¬¶ MoarVM: ago. This unbreaks building rakudo with templates for box_s /

[10:26] <Geth> ¬¶ MoarVM: box_i (but at the cost of building somewhat smaller blocks,

[10:27] <Geth> ¬¶ MoarVM: unfortunately).

[10:27] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bfccd35c74

[10:27] <Geth> ¬¶ MoarVM: d7f4387d07 | (Bart Wiegmans)++ | src/jit/core_templates.expr

[10:27] <Geth> ¬¶ MoarVM: Enable box_i and box_s templates

[10:27] <Geth> ¬¶ MoarVM:

[10:27] <Geth> ¬¶ MoarVM: Now that bindlex for objects / strings is disabled, this is no longer

[10:27] <Geth> ¬¶ MoarVM: a problem (until maybe we re-enable them with a write barrier).

[10:27] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d7f4387d07

[10:30] <brrt> the named template thing, I think that could help with writing a write-barrier template, which is otherwise quite finicky

[10:34] *** domidumont joined
[11:01] *** zakharyas joined
[11:09] *** Ven`` joined
[11:10] *** Ven` joined
[11:17] *** MasterDuke joined
[11:58] *** AlexDaniel joined
[12:05] *** unicodable6 joined
[13:10] *** shareable6 joined
[13:27] *** greppable6 joined
[14:03] *** zakharyas joined
[14:08] *** zakharyas joined
[14:22] *** Ven`` joined
[14:29] *** mtj_ joined
[14:34] *** zakharyas joined
[14:39] *** Ven`` joined
[15:09] *** Ven`` joined
[16:43] *** Kaypie joined
[16:49] *** Kaiepi joined
[17:19] *** domidumont joined
[17:52] *** zakharyas joined
[18:22] *** nativecallable6 joined
[18:22] *** bisectable6 joined
[18:31] *** unicodable6 joined
[18:36] *** zakharyas joined
[19:42] *** Kaiepi joined
[19:55] *** Kaypie joined
[19:55] *** greppable6 joined
[20:10] *** ZofBot joined
[20:31] *** zakharyas joined
[20:35] *** japhb joined
[20:35] *** zakharyas joined
[21:49] *** Kaiepi joined
[21:51] *** Kaypie joined
[22:03] <Geth> ¬¶ MoarVM: MasterDuke17++ created pull request #812: If no start time set, don't end a spesh log

[22:03] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/812

[22:43] <MasterDuke> hm, anyone see a problem with this template? `(template: ishash   (flagval (all (nz $1) (eq (^getf (^repr $1) MVMREPROps ID) (const (&QUOTE MVM_REPR_ID_MVMHash) int_sz)))))`

[22:44] <MasterDuke> it's throwing a NYI MVM_oops from src/jit/x64/tiles.dasc, `MVM_JIT_TILE_DECL(cast_load_addr) { MVM_oops(tc, "NYI"); }`

[22:48] <Geth> ¬¶ MoarVM: ffd752235a | (Timo Paulssen)++ | src/profiler/instrument.c

[22:48] <Geth> ¬¶ MoarVM: remove debugging output from profiler runs

[22:48] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ffd752235a

[22:57] *** travis-ci joined
[22:57] <travis-ci> MoarVM build failed. Timo Paulssen 'remove debugging output from profiler runs'

[22:57] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/348462286 https://github.com/MoarVM/MoarVM/compare/d7f4387d0758...ffd752235a97

[22:57] *** travis-ci left
[23:03] <Geth> ¬¶ MoarVM: 6952c69242 | (Timo Paulssen)++ | src/profiler/instrument.c

[23:03] <Geth> ¬¶ MoarVM: delete left-over line breaking compilation

[23:03] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6952c69242

[23:13] <timotimo> so i'm wondering: should identical call graphs from different threads be merged by the profiler before feeding it to the nqp code that writes out the html or sql data?

[23:13] <timotimo> or maybe it ought to be done by the frontend where it can also decide "is this a worker thread from a thread pool scheduler?"

[23:14] <jnthn> Probably both views can be useful, so I'd lean towards preserving information

[23:16] <timotimo> the json-fast test file 09-race.t is currently writing its html profiler data and it's already reached 170 megs

[23:16] <timotimo> 200

[23:18] <timotimo> stopped just shy of 400 megs

[23:22] *** travis-ci joined
[23:22] <travis-ci> MoarVM build passed. Timo Paulssen 'delete left-over line breaking compilation'

[23:22] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/348467884 https://github.com/MoarVM/MoarVM/compare/ffd752235a97...6952c6924214

[23:22] *** travis-ci left
[23:26] <timotimo> 348 for equivalent workload - except what if the supervisor thread decided differently for this one

[23:38] <timotimo> changed the sql output code to put lots of pieces into an array and then join them before printing them out

[23:38] <timotimo> that should make things a bit faster, i believe

[23:38] <timotimo> kind of wish i could benefit more from the fact that a bunch of these strings are constant/literal

[23:39] <timotimo> so some of them could be encoded only once, if the pieces before and after such pieces are guaranteed to "end properly"

[23:52] <MasterDuke> timotimo: i was thinking about that, given how long it took to write out the data for profiling the build

[23:53] <MasterDuke> but i think that's what we did originally, and i changed it to write out each piece, because otherwise the memory use was even higher than it is now

[23:53] <MasterDuke> that = put lots of pieces into an array and then join them before printing them out

[23:56] <timotimo> hm, how many did you collect before printing?

[23:56] <timotimo> putting a reference to the same string in, for example, ought to be relatively cheap

[23:57] <timotimo> also, in theory, we could write that stuff out multi-threaded :)

[23:59] <MasterDuke> hm, i'm looking back through the NQP git log for src/vm/moar/HLL/Backend.nqp and i don't see anything quite like that from me

[23:59] <MasterDuke> but 1c4e73ea2f0432602a6e94719cf6a31532c0a998 does look relevant
