[00:10] *** lizmat left
[00:15] <timotimo> MasterDuke: oh, i meant to ask you if dmesg showed anything?

[00:16] <timotimo> i seem to recall a lot of work to make EVAL threadsafe

[00:30] *** bisectable6 left
[00:30] *** bisectable6 joined
[00:32] *** bisectable6 left
[00:32] *** bisectable6 joined
[00:33] *** bisectable6 left
[00:33] *** bisectable6 joined
[02:33] *** Kaypie left
[02:33] *** Kaypie joined
[03:04] *** Merfont joined
[03:07] *** Kaypie left
[03:47] <MasterDuke> .tell timotimo nothing relevant in dmesg

[03:47] <yoleaux> MasterDuke: I'll pass your message to timotimo.

[03:53] <MasterDuke> .ask timotimo is there any sort of debugging i can turn on (or add) to help figure out what's going on?

[03:53] <yoleaux> MasterDuke: I'll pass your message to timotimo.

[03:53] *** klapperl joined
[05:40] *** lizmat joined
[05:47] *** domidumont joined
[05:57] *** brrt joined
[06:13] *** domidumont left
[06:14] *** domidumont joined
[06:17] <brrt> .

[06:19] <Geth> ¦ MoarVM: 2249d68802 | (Bart Wiegmans)++ | src/jit/x64/emit.dasc

[06:19] <Geth> ¦ MoarVM: [JIT] Move lexprimspec to proper emitter

[06:19] <Geth> ¦ MoarVM:

[06:19] <Geth> ¦ MoarVM: Was in emit_block_branch, has to go to emit_primitive (isn't a branching

[06:19] <Geth> ¦ MoarVM: operator). Oops!

[06:19] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2249d68802

[06:26] *** domidumont left
[06:37] *** robertle joined
[06:43] *** domidumont joined
[06:49] *** Ven`` joined
[07:04] *** zakharyas joined
[07:35] *** Ven`` left
[07:35] *** Ven` joined
[07:45] *** Ven` left
[07:45] *** Ven`` joined
[08:04] *** zakharyas left
[08:17] *** Ven` joined
[08:17] *** Ven`` left
[08:20] *** zakharyas joined
[08:35] <Geth> ¦ MoarVM/jit-moar-ops: 813bba6748 | (Bart Wiegmans)++ | 2 files

[08:35] <Geth> ¦ MoarVM/jit-moar-ops: [JIT] Implement ctxouter

[08:35] <Geth> ¦ MoarVM/jit-moar-ops: review: https://github.com/MoarVM/MoarVM/commit/813bba6748

[08:48] <brrt>  https://gist.github.com/shafik/848ae25ee209f698763cffee272a58f8 - if i'm reading this correctly using a union for type punning is legit in C

[08:52] *** Ven` left
[08:53] <brrt> https://stackoverflow.com/questions/25664848/unions-and-type-punning and this says so as well

[08:53] <brrt> phew, C is sane

[09:03] *** Ven`` joined
[09:04] *** zakharyas left
[09:07] *** zakharyas joined
[09:08] <brrt> lets finally nail down throwpayloadlexcaller

[09:09] <samcv> brrt: so tell me more about this issue

[09:09] <samcv> that may need a new release

[09:11] <brrt> https://github.com/MoarVM/MoarVM/commit/2249d68802

[09:11] <brrt> this thing

[09:11] <brrt> I added the JIT of `lexprimspec` to the wrong emitter function

[09:11] <brrt> now if lexprimspec is actually JIT compiled, it will fail at runtime

[09:13] <samcv> ah

[09:13] <samcv> which causes segfaults?

[09:13] <brrt> no, panics

[09:13] <brrt> not as bad as segfaults, but still bad

[09:18] <brrt> anyway, i'm off for lunch

[09:18] <brrt> this is an oldish bug though

[09:23] *** brrt left
[10:08] *** zakharyas left
[10:08] *** zakharyas joined
[10:10] *** Ven`` left
[10:14] *** brrt joined
[10:52] <jnthn> aha...finally tracked down a slowdown

[10:52] <jnthn> I was grepping for BAIL in the jit log. Turns out that it was bailing but differently

[10:53] <jnthn> Unexpected opcode in invoke sequence: <speshresolve>

[10:54] <jnthn> Which can happen in code that was never reached

[11:04] *** zakharyas left
[11:05] <Geth> ¦ MoarVM: a75090c60e | (Jonathan Worthington)++ | src/spesh/threshold.c

[11:05] <Geth> ¦ MoarVM: Lessen the number of spesh threshold levels

[11:05] <Geth> ¦ MoarVM:

[11:05] <Geth> ¦ MoarVM: When something tiny called something a bit bigger, we could end up

[11:05] <Geth> ¦ MoarVM: with the call there not being able to specialize into a fast resolve

[11:05] <Geth> ¦ MoarVM: due to the callee potentially not being hot enough yet. Once things

[11:05] <Geth> ¦ MoarVM: get over a certain size that'll be noise, but there's plenty of cases

[11:05] <Geth> ¦ MoarVM: (tiny forwarding subs/methods delegating to slightly bigger impls)

[11:05] <Geth> ¦ MoarVM: that could benefit. So, collapse the lower levels to a single one.

[11:05] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a75090c60e

[11:06] <jnthn> That said, speshresolve that survives into the specialized code really wants a spesh op

[11:07] <jnthn> Since the index would "move" otherwise

[11:08] *** zakharyas joined
[11:19] *** zakharyas left
[11:39] *** Ven`` joined
[11:48] *** Ven`` left
[11:48] *** Ven`` joined
[11:54] <dogbert17> .seen timotimo

[11:54] <yoleaux> I saw timotimo 00:39Z in #perl6: <timotimo> i wonder if we have to put &lt; and &gt; instead of < and > to render it correctly everywhere

[11:54] <dogbert17> .seen timotimo's cats

[11:54] <yoleaux> I haven't seen timotimo's cats around.

[11:55] <dogbert17> trying to profile something while at the same time enabling MVM_CROSS_THREAD_WRITE_LOG seems to be a really bad idea

[11:56] <dogbert17> MoarVM panic: Profiler lost sequence - at SETTING::src/core/Deprecations.pm6:30  (/home/dogbert/.rakudobrew/moar-master/install/share/perl6/runtime/CORE.setting.moarvm:report)

[12:02] *** undersightable6 left
[12:03] *** Merfont is now known as Kpimov

[12:03] *** Kpimov is now known as Kaiepi

[12:03] *** undersightable6 joined
[12:14] *** lizmat left
[12:32] *** Ven` joined
[12:34] *** Ven`` left
[12:42] *** zakharyas joined
[13:04] *** zakharyas left
[13:05] *** zakharyas joined
[13:35] *** lizmat joined
[13:36] *** Ven` left
[13:42] <timotimo> probably two instrumentations that aren't compatible in some way

[13:42] <yoleaux> 03:47Z <MasterDuke> timotimo: nothing relevant in dmesg

[13:42] <yoleaux> 03:53Z <MasterDuke> timotimo: is there any sort of debugging i can turn on (or add) to help figure out what's going on?

[14:03] <dogbert17> timotimo: very easy to repro, just try: MVM_CROSS_THREAD_WRITE_LOG=ctw.log perl6 --profile -e ''

[14:04] <timotimo> yeah

[14:04] <timotimo> i haven't considered making that work yet, or even tryign it

[14:07] *** zakharyas left
[14:08] *** zakharyas joined
[14:09] <dogbert17> I tried it because I wanted to see if [Coke]'s bug from yesterday might stem from some threading problem, i.e. https://gist.github.com/dogbert17/ade0912904a3d05a34a229a38f5c7b6f

[14:10] <timotimo> oh, i didn't notice there's a --profile in the original

[14:10] <dogbert17> :)

[14:10] <timotimo> does it not crash if --profile is removed?

[14:12] <timotimo> oh, perhaps call MVM_dump_bytecode(tc) would be interesting, too

[14:12] <dogbert17> I can do that

[14:13] <dogbert17> here goes :-) https://gist.github.com/dogbert17/ba48866863a95cd0ed4d33dcdeda81dc

[14:14] <timotimo> and you say check is a null pointer there?

[14:15] <dogbert17> Cannot access memory at address 0x8

[14:15] <dogbert17> if I print *check

[14:16] <dogbert17> this one is nasty in that it doesn't happen every time the code is run

[14:19] <Kaiepi> this is minor, but is making IO::Socket::Async.native-descriptor return the socket's fh instead of -1 worth pullreqing?

[14:19] <timotimo> it'd be interesting to know what it had just invoked before the crash

[14:19] <timotimo> because it looks like an integer is returned and just blindly put into an object register

[14:19] <timotimo> OSLT

[14:20] *** Ven`` joined
[14:21] <dogbert17> OSLT ?

[14:21] <timotimo> or something like that

[14:21] <dogbert17> aha, can that be done from gdb?

[14:21] <dogbert17> figuring out what was invoked that is

[14:22] <timotimo> with a bit of fiddling, i guess. or record execution with rr and do a few steps backwards

[14:23] <timotimo> you can look at the object that's in spesh slot 34, which will be something invokable, and you'd have to dig deep to find the static frame that it belongs to, though there could be further indirection :|

[14:24] <dogbert17> that sounds difficult

[14:25] * dogbert17 is afk for a while (food)

[14:36] *** lizmat left
[14:48] *** domidumont left
[14:49] *** domidumont joined
[14:57] *** domidumont left
[14:58] * brrt grumbles about the completely evil state machine in search_frame_handlers_lex

[15:00] * dogbert17 notes that rr doesn't work on a Ryzen cpu

[15:00] <brrt> i don't understand what's going wrong with Inline::Perl5 :-(

[15:00] <brrt> when i implement throwpayloadlexcaller

[15:01] <timotimo> dogbert17: even with -n?

[15:02] <dogbert17> FATAL /build/rr-jR8ti5/rr-4.1.0/src/PerfCounters.cc:133:get_cpu_microarch() errno: 0 'Success']

[15:02] <dogbert17>  -> CPU 0xf10 unknown.

[15:03] <timotimo> ah, damn

[15:03] <timotimo> https://github.com/mozilla/rr/issues/2034 - i guess?

[15:04] *** zakharyas left
[15:05] <timotimo> it's supposed to recognize AMDRyzen, but only checks for 0xf10, not 0xf20

[15:05] <timotimo> could be worth a patch.

[15:06] <timotimo> but it does say that if you have a ryzen, rr will be unreliable

[15:06] <dogbert17> yeah, in the meantime I added MVM_SPESH_BLOCKING=1 and now it fails at a different point

[15:08] <dogbert17> here https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L222

[15:08] *** Ven`` left
[15:09] <dogbert17> and once, with MVM_SPESH_BLOCKING=1, it failed with 'Unhandled exception in code scheduled on thread 4 - const_n32 NYI'

[15:12] <timotimo> that's just like when the profiler's instrumentation got turned off

[15:13] <timotimo> it replaced one version of the bytecode with another and so it hit a bogus position in the bytecode and started interpreting arguments as opcodes

[15:15] *** brrt left
[15:15] <dogbert17> I'm trying to get valgrind to output something of value but so far without success :(

[15:17] *** lizmat joined
[15:21] <Geth> ¦ MoarVM: stmuk++ created pull request #879: Use clang with OpenBSD since their ancient gcc creates a moar which can't generate NQP anymore. See #878

[15:21] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/879

[15:23] <timotimo> can you check if the instrumentation barrier is hit around that point?

[15:24] <dogbert17> how do I do that?

[15:24] <timotimo> hm, setting a breakpoint is the first step, but it's not so easy to see if the problem comes "soon" after that

[15:25] <timotimo> i'll be afk for a bit

[15:27] <dogbert17> I'll continue with valgrind in the meantime

[15:31] *** robertle left
[15:52] <Geth> ¦ MoarVM: Kaiepi++ created pull request #880: Expose file descriptors of IO::Socket::INET instances

[15:52] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/880

[16:21] *** MasterDuke left
[16:23] *** Kaiepi left
[16:23] *** Kaypie joined
[16:27] *** Ven`` joined
[16:28] *** Ven`` left
[17:06] *** ggoebel left
[17:07] *** AlexDaniel left
[17:19] *** domidumont joined
[17:21] *** ggoebel joined
[17:54] *** AlexDaniel joined
[18:34] <dogbert17> timotimo: I tried another, smaller, program instead and got some output from asan which might be of some use

[18:34] <dogbert17> https://gist.github.com/dogbert17/397a596aeba361531c94f606a2b0a72e

[18:44] *** robertle joined
[19:04] *** domidumont left
[19:17] *** AlexDaniel left
[19:35] *** brrt joined
[19:41] <timotimo> that's some nonsense :)

[19:51] <dogbert17> damn :)

[19:52] <timotimo> looks like the instruction pointer went off into lala land

[19:53] <dogbert17> at least the program is short, a variant of one posted by MasterDuke previously

[19:54] <dogbert17> it bugs out in different ways, most often with 'MoarVM panic: Profiler lost sequence'

[19:55] <timotimo> is it always with the profiler active?

[19:55] <dogbert17> yes, if you mean --profile

[19:56] <dogbert17> it always works with valgrind

[19:57] <timotimo> and it doesn't crash if the profiler isn't active?

[20:00] <dogbert17> correct

[20:00] <timotimo> that's helpful to know

[20:00] <timotimo> i wonder if it uses run_profiled for the generated code

[20:02] <timotimo> can you breakpoint MVM_profile_instrumented_start and see if it is called more than once?

[20:03] <dogbert17> sure

[20:04] <dogbert17> it's called once, then it crashes when I (c)ontinue

[20:05] <timotimo> and does the _end version of that get called at all?

[20:06] <dogbert17> let's see

[20:06] <dogbert17> the answer seems to be no

[20:07] <dogbert17> it hits _start once an then borks

[20:07] <dogbert17> *and

[20:09] *** AlexDaniel joined
[20:20] *** lizmat left
[20:21] *** Kaypie is now known as Kaipie

[20:22] *** Kaipie is now known as Kaiepi

[20:26] *** ggoebel left
[20:43] *** brrt left
[20:50] *** ggoebel joined
[20:51] *** Kaypie joined
[20:51] *** Kaiepi left
[20:58] *** Kaypie is now known as Kaiepi

[21:06] *** lizmat joined
[21:28] *** hoelzro joined
[22:24] *** Kaiepi left
[22:25] *** Kaiepi joined
[23:16] *** MasterDuke joined
