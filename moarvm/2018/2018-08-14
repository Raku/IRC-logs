[00:30] *** promote joined
[00:32] *** promote left
[00:34] *** Karasu joined
[00:38] *** Karasu left
[00:52] *** mst_ joined
[00:52] *** ChanServ sets mode: +o mst_

[00:52] *** p6bannerbot sets mode: +v mst_

[00:57] *** japhb left
[00:57] *** mst left
[00:57] *** [Coke] left
[00:59] *** benchable6 left
[00:59] *** committable6 left
[00:59] *** bisectable6 left
[00:59] *** benchable6 joined
[01:00] *** p6bannerbot sets mode: +v benchable6

[01:00] *** greppable6 left
[01:00] *** statisfiable6 left
[01:00] *** nativecallable6 left
[01:01] *** nativecallable6 joined
[01:01] *** statisfiable6 joined
[01:01] *** greppable6 joined
[01:02] *** p6bannerbot sets mode: +v nativecallable6

[01:02] *** p6bannerbot sets mode: +v statisfiable6

[01:02] *** p6bannerbot sets mode: +v greppable6

[01:04] *** japhb joined
[01:04] *** [Coke] joined
[01:04] *** cherryh.freenode.net sets mode: +vv japhb [Coke]

[01:04] *** p6bannerbot sets mode: +v [Coke]

[01:04] *** lizmat left
[01:05] *** p6bannerbot sets mode: +v japhb

[01:09] *** leedo joined
[01:10] *** p6bannerbot sets mode: +v leedo

[01:32] <MasterDuke> i find it a little annoying that the files generated by tools/update_ops.p6 are in git

[01:33] <MasterDuke> deconflicting two changes to the oplist gets complicated

[01:37] *** dimi34ka28 joined
[01:42] *** dimi34ka28 left
[01:57] *** bisectable6 joined
[01:58] *** p6bannerbot sets mode: +v bisectable6

[02:10] <MasterDuke> woohoo, back to nqp build and passing it's (lightly modified) tests

[02:10] <MasterDuke> and now the same error as before `Stage optimize   : Unhandled exception: This type (Scalar) does not support associative operations    at SETTING::src/core/Rakudo/Internals.pm6:735  (<ephemeral file>:)`

[02:25] *** regreg left
[02:52] *** balrog24 joined
[02:53] *** balrog24 left
[03:05] *** yoleaux joined
[03:06] *** p6bannerbot sets mode: +v yoleaux

[04:02] *** MasterDuke left
[05:39] *** stmuk joined
[05:40] *** p6bannerbot sets mode: +v stmuk

[05:41] *** stmuk_ left
[05:49] * nine is on his way to Glasgow now

[06:25] *** ZexaronS joined
[06:26] *** p6bannerbot sets mode: +v ZexaronS

[06:26] <ZexaronS>  ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ https://i.redd.it/r2n8a788qs211.jpg  ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­

[06:26] <ZexaronS> http://i.imgur.com/DfZdPTy.jpg  ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­

[06:26] <ZexaronS> http://magaimg.net/img/5xpf.jpg  ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­

[06:26] <ZexaronS>  ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ https://i.imgur.com/AaQg3Pp.jpg  ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­ ­

[06:26] *** ZexaronS left
[06:42] *** averell11 joined
[06:43] *** averell11 left
[06:45] <nine> Who'd have thought that replacing p6bool with a new hllbool op would cause bootstrap issues?

[07:23] *** brrt joined
[07:24] *** p6bannerbot sets mode: +v brrt

[07:26] <nine> timotimo: Perl6's BOOTSTRAP and metamodel code will always have to explicitly specifiy the language with a hllboolfor which kinda sucks. I don't see a good way around that.

[08:02] <brrt> \o

[08:07] <nine> o/

[08:14] <brrt> have fun in TPC :-)

[08:19] <brrt> I was reading about the HHVM JIT compiler recently

[08:19] <brrt> and one thing that stood out to me is that they rely heavily on 'side exits' to do uncommon things

[08:20] <brrt> Our guards are kind of similar, I think, but I think we could be using them more aggressively

[08:29] <brrt> oh, hang on

[08:31] <brrt> .tell nine I think I prefer a refcount for MVMJitCode; and note that you're using malloc() for the code in MVM_jit_code_copy(), while the original code is using explicitnly allocated on a page (which is marked read-execute, but not read-write-execute)

[08:31] <yoleaux> brrt: I'll pass your message to nine.

[08:36] <timotimo> nine: damn, that kinda sucks, though of course you can register a desugar that puts the "for" argument in there for free

[08:37] *** Schroeder15 joined
[08:37] *** Schroeder15 left
[08:39] <nine> timotimo: it's not _that_ many places, but instead of a simple pointer read, it's now a hash read to get the config and some dereferences to get the boolean value.

[08:39] <yoleaux> 08:31Z <brrt> nine: I think I prefer a refcount for MVMJitCode; and note that you're using malloc() for the code in MVM_jit_code_copy(), while the original code is using explicitnly allocated on a page (which is marked read-execute, but not read-write-execute)

[08:40] <timotimo> except the jit could skip the lookup

[08:40] <nine> Of course, spesh could be made smart enough to optimize it back to that constant value

[08:40] <timotimo> since we don't support hll types to change

[08:40] <nine> :)

[08:40] <timotimo> well, it's a bit more annoying than that, since it'd have a branch in it

[08:40] <timotimo> but of course we could have an op that just has the two types as arguments

[08:41] <nine> oh, indeed

[08:41] <timotimo> the best kind of bool type is a function anyway. True is -> $a, $b { $b } and False is -> $a, $b { $a } ... OSLT :)

[08:42] <nine> Looks like the remaining errors I get are all about p6bool handling unconcrete values while my hllbool only handles ints

[08:44] <nine> and bigints

[08:45] <brrt> that seems tractable :-)

[08:45] <timotimo> if we factor that out, spesh can probably do a better job than p6bool's implementation

[08:45] * brrt nods

[08:45] <nine> It's just odd cause as I read it p6bool reads an int64, too

[08:45] <nine> just like my hllbool

[08:46] <brrt> btw, I kind of want to start moving the nativecall-JIT towards the expression JIT

[08:46] <nine> It takes an MVM_operand_int64 and is really just GET_REG(tc, 0).o = GET_REG(tc, 2).i64 ? True : False;

[08:47] <timotimo> that seems odd

[08:47] <brrt> hmm

[08:47] <brrt> that's odd

[08:49] <nine> Oh, p6bool is not just a straigt mapping to the op. It consists of quite some NQP code

[08:49] <timotimo> oh, in that case it'd probably already allow spesh to do things well

[08:50] <nine> src/vm/moar/Perl6/Ops.nqp:264

[08:51] <nine> I wonder if all that machinery is really necessary or if it'd be actually better to tailor the calling side.

[08:54] <timotimo> i do believe the callers already try their best to give an int cheaply?

[08:55] <timotimo> the after spesh code doesn't look terrible usually

[08:55] <timotimo> just that we don't do any box tracking so we could use the source int for if_i/unless_i ops

[08:56] <timotimo> since p6bool isn't a real boxing, as it only lets 0 and 1 through unmodified and turns everything else into 0

[08:57] <timotimo> into 1*

[08:58] *** brrt left
[09:01] <timotimo> maybe we can also skip the whole hllbool thing and instead just use the discover function to set a fact that basically says "this boolifies its argument"

[09:04] <timotimo> hllbool will allow us to set the result of p6bool to a correct instance if the input gets known later during the optimization process

[09:05] <timotimo> though of course we'd like to skip the whole p6bool -> unbox_i business altogether

[09:05] <timotimo> pff, it's always trade-offs, isn't it

[09:06] <nine> Well at the very least hllbool will allow for the expr JIT to handle more code

[09:07] <timotimo> well, the more extops we kick out the less necessary it'll become to teach the exprjit to link extop exprtemplates in

[09:07] <nine> I'd guess that we're close enough to that to make exprtemplate support wasted time

[09:08] <timotimo> but for the exprjit it's the same, we want the p6bool op to disappear in the spesh stage already

[09:09] <timotimo> a very unscientific survey of this one spesh log i happen to have open shows that the only thing that tends to come after a p6bool in a BB is either set, decont, or prepargs + an invoke

[09:09] <timotimo> which are things that don't benefit as much from exprjit anyway

[09:11] <nine> Ok, got to go offline now. Aircraft doors close.

[09:11] <timotimo> have a pleasant flight!

[09:11] <timotimo> won't take very long, i expect?

[09:12] <timotimo> like what, an hour?

[09:13] *** robertle joined
[09:13] <timotimo> though i don't know what airport you're going from

[09:14] *** p6bannerbot sets mode: +v robertle

[09:24] *** stmuk_ joined
[09:25] *** p6bannerbot sets mode: +v stmuk_

[09:26] *** stmuk left
[09:36] *** lizmat joined
[09:36] *** p6bannerbot sets mode: +v lizmat

[09:52] *** brrt joined
[09:53] *** p6bannerbot sets mode: +v brrt

[09:53] *** zakharyas joined
[09:54] *** Kaypie joined
[09:54] *** p6bannerbot sets mode: +v zakharyas

[09:54] *** p6bannerbot sets mode: +v Kaypie

[09:56] *** Kaiepi left
[10:10] *** elios5 joined
[10:12] *** elios5 left
[10:27] *** lizmat_ joined
[10:28] *** p6bannerbot sets mode: +v lizmat_

[10:30] *** lizmat left
[10:30] *** lizmat_ is now known as lizmat

[10:30] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/08/14/2018-33-a-quick-one-from-glasgow/

[10:31] <lizmat> https://accu.org/index.php/journals/2535   # interesting read ?

[10:42] <brrt> lizmat++

[11:01] *** brrt left
[11:24] *** shareable6 joined
[11:25] *** p6bannerbot sets mode: +v shareable6

[11:28] *** regreg joined
[11:29] *** p6bannerbot sets mode: +v regreg

[11:32] *** lizmat left
[11:41] <nine> timotimo: was ~ an hour from VIE to FRA, but still have to take the longer flight

[11:59] *** wgma20 joined
[12:01] *** wgma20 left
[12:12] <jnthn> Ah, FRA, world record holder in corridor length...

[12:19] <Geth> ¦ MoarVM: 6217f8262f | (Jonathan Worthington)++ | src/6model/sc.c

[12:19] <Geth> ¦ MoarVM: Add repossession logging behind a #define

[12:19] <Geth> ¦ MoarVM:

[12:19] <Geth> ¦ MoarVM: I've added this code in a few times over the years; may as well have

[12:19] <Geth> ¦ MoarVM: it here behind a #define.

[12:19] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6217f8262f

[12:19] <Geth> ¦ MoarVM: f039e81a6e | (Jonathan Worthington)++ | src/strings/latin1.c

[12:19] <Geth> ¦ MoarVM: Avoid some code duplication

[12:19] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f039e81a6e

[12:19] <Geth> ¦ MoarVM: 0fc1e17ec0 | (Jonathan Worthington)++ | src/strings/ops.c

[12:19] <Geth> ¦ MoarVM: Add an MVM_UNLIKELY to encoding name init cond

[12:19] <Geth> ¦ MoarVM:

[12:19] <Geth> ¦ MoarVM: It'll be true once ever per process

[12:19] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0fc1e17ec0

[12:23] *** lizmat joined
[12:23] *** p6bannerbot sets mode: +v lizmat

[12:29] *** Kaypie left
[12:30] <Geth> ¦ MoarVM: 8b3210443a | (Jonathan Worthington)++ | src/6model/sc.c

[12:30] <Geth> ¦ MoarVM: Use #if, not #ifdef

[12:30] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8b3210443a

[12:32] *** regreg left
[12:41] *** regreg joined
[12:41] *** p6bannerbot sets mode: +v regreg

[12:42] *** oldschool^24 joined
[12:43] <Geth> ¦ MoarVM: 9861e8019a | (Jonathan Worthington)++ | 3 files

[12:43] <Geth> ¦ MoarVM: Make neverrepossess on type apply to the type

[12:43] <Geth> ¦ MoarVM:

[12:43] <Geth> ¦ MoarVM: You can never repossess a type object - it has no state to change -

[12:43] <Geth> ¦ MoarVM: so we take an attempt to do so as indicating that any instance of the

[12:43] <Geth> ¦ MoarVM: type should never be repossessed.

[12:43] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9861e8019a

[12:49] *** oldschool^24 left
[12:52] *** travis-ci joined
[12:52] *** p6bannerbot sets mode: +v travis-ci

[12:52] <travis-ci> MoarVM build failed. Jonathan Worthington 'Use #if, not #ifdef'

[12:52] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/415897511 https://github.com/MoarVM/MoarVM/compare/0fc1e17ec018...8b3210443a66

[12:52] *** travis-ci left
[12:57] *** Kaiepi joined
[12:58] *** p6bannerbot sets mode: +v Kaiepi

[12:59] *** diakopter left
[13:13] *** diakopter joined
[13:13] *** p6bannerbot sets mode: +v diakopter

[13:29] *** brrt joined
[13:30] *** p6bannerbot sets mode: +v brrt

[13:38] *** regreg left
[13:40] <brrt> .tell lizmat that part of why I wanted to inline the expression info node was to have better cache line support :-)

[13:40] <yoleaux> brrt: I'll pass your message to lizmat.

[13:44] *** regreg joined
[13:45] *** p6bannerbot sets mode: +v regreg

[13:59] *** lizmat left
[14:01] *** zakharyas left
[14:01] *** zakharyas joined
[14:02] *** p6bannerbot sets mode: +v zakharyas

[14:06] *** zakharyas left
[14:27] *** mcintosh19 joined
[14:34] *** mcintosh19 left
[14:38] <Geth> ¦ MoarVM: 0daf99bcb2 | (Jonathan Worthington)++ | src/spesh/inline.c

[14:38] <Geth> ¦ MoarVM: Fix inlining of things with multiple `return`s

[14:38] <Geth> ¦ MoarVM:

[14:38] <Geth> ¦ MoarVM: This doesn't seem to happen in Rakudo or NQP right now at the current

[14:38] <Geth> ¦ MoarVM: inline limit, but potentially a very short regex could have been

[14:38] <Geth> ¦ MoarVM: vulnerable. And when we tweak the inline limiting in the future to

[14:38] <Geth> ¦ MoarVM: account for nested inlines, we'd almost certainly run in to this bug.

[14:38] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0daf99bcb2

[14:40] *** spirit_pact29 joined
[14:41] *** spirit_pact29 left
[14:45] *** brrt left
[15:00] *** travis-ci joined
[15:00] *** p6bannerbot sets mode: +v travis-ci

[15:00] <travis-ci> MoarVM build failed. Jonathan Worthington 'Fix inlining of things with multiple `return`s

[15:00] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/415949140 https://github.com/MoarVM/MoarVM/compare/9861e8019aa2...0daf99bcb2c8

[15:00] *** travis-ci left
[15:04] *** elios22 joined
[15:04] *** elios22 left
[15:19] *** AlexDaniel` left
[15:19] *** AlexDaniel` joined
[15:19] *** moon.freenode.net sets mode: +v AlexDaniel`

[15:19] *** p6bannerbot sets mode: +v AlexDaniel`

[15:19] <Geth> ¦ MoarVM/postrelease-opts: 34816c2b8a | (Jonathan Worthington)++ | src/spesh/optimize.c

[15:19] <Geth> ¦ MoarVM/postrelease-opts: Optimize "hot" wval lookup into spesh slot access

[15:19] <Geth> ¦ MoarVM/postrelease-opts:

[15:19] <Geth> ¦ MoarVM/postrelease-opts: For a wval that was already accessed, stash it away in a spesh slot

[15:19] <Geth> ¦ MoarVM/postrelease-opts: and access it that way. This is rather faster, avoiding the various

[15:19] <Geth> ¦ MoarVM/postrelease-opts: indirections in wval lookup.

[15:19] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/34816c2b8a

[15:19] <Geth> ¦ MoarVM/postrelease-opts: 0168eeef85 | (Jonathan Worthington)++ | 5 files

[15:20] <Geth> ¦ MoarVM/postrelease-opts: Immediately promote objects ref'd from gen2

[15:20] <Geth> ¦ MoarVM/postrelease-opts:

[15:20] <Geth> ¦ MoarVM/postrelease-opts: When we hit the write barrier, annotate on the object that was being

[15:20] <Geth> ¦ MoarVM/postrelease-opts: referenced that it was pointed to by a gen2 object. Then, if it is

[15:20] <Geth> ¦ MoarVM/postrelease-opts: alive at the next GC, immediately promote it to gen2 rather than it

[15:20] <Geth> ¦ MoarVM/postrelease-opts: having another stay in the nursery.

[15:20] <Geth> ¦ MoarVM/postrelease-opts:

[15:20] <Geth> ¦ MoarVM/postrelease-opts: <…commit message has 5 more lines…>

[15:20] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/0168eeef85

[15:20] <jnthn> Just a rebase :)

[15:30] *** robertle left
[15:34] <jnthn> lol, that moment when you optimize so hard that your inline disappears and the dumper gets confused because the start/end of it are at the same place :)

[15:35] <diakopter> poor, poor dumper

[15:36] <timotimo> whoops :) :)

[15:37] <Geth> ¦ MoarVM/postrelease-opts: f48747743b | (Jonathan Worthington)++ | 3 files

[15:37] <Geth> ¦ MoarVM/postrelease-opts: More aggressive `set` opt of non-deopt inlinees

[15:37] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/f48747743b

[15:37] <Geth> ¦ MoarVM/postrelease-opts: d93c9c07b6 | (Jonathan Worthington)++ | src/spesh/dump.c

[15:37] <Geth> ¦ MoarVM/postrelease-opts: Fix spesh dump for when inline entirely vanishes

[15:37] <Geth> ¦ MoarVM/postrelease-opts: review: https://github.com/MoarVM/MoarVM/commit/d93c9c07b6

[15:37] <jnthn> Now `identity` can disappear completely :)

[15:40] <timotimo> yes! >:)

[15:41] *** mst_ is now known as mst

[15:42] <timotimo> i wonder if some sinks will also shrink down to just the wval (or possibly getspeshslot) instruction now

[15:47] *** zakharyas joined
[15:47] <timotimo> i wonder if .self should perhaps return what it's called on without deconting

[15:48] <timotimo> my super legitimate use case:

[15:48] <timotimo> m: .self = 99

[15:48] <camelia> rakudo-moar 2b2f568a3: OUTPUT: «Cannot modify an immutable Any ((Any))␤  in block <unit> at <tmp> line 1␤␤»

[15:48] *** p6bannerbot sets mode: +v zakharyas

[15:48] <timotimo> so i don't have to type $_ :P :P

[15:57] <jnthn> Hm, interesting, seems that latest opt has some fallout

[15:58] *** brrt joined
[15:59] *** p6bannerbot sets mode: +v brrt

[15:59] <Geth> ¦ MoarVM/hllbool: 623960c65c | (Stefan Seifert)++ | 2 files

[15:59] <Geth> ¦ MoarVM/hllbool: Add true_value and false_value to HLL config for future hllbool op

[15:59] <Geth> ¦ MoarVM/hllbool: review: https://github.com/MoarVM/MoarVM/commit/623960c65c

[15:59] <Geth> ¦ MoarVM/hllbool: 5275b0e08c | (Stefan Seifert)++ | 6 files

[15:59] <Geth> ¦ MoarVM/hllbool: New hllbool and hllboolfor ops

[15:59] <Geth> ¦ MoarVM/hllbool: review: https://github.com/MoarVM/MoarVM/commit/5275b0e08c

[15:59] <brrt> I was thinking of moving the cleanup of the spesh graph directly into MVM_spesh_inline

[16:02] <timotimo> i don't think jnthn gave an opinion on the hllbool idea yet; does it make sense to you, jnthn?

[16:04] <jnthn> I guess it's either that or a sequence of wval/wval/truefalse w(obj) r(int64) r(obj) r(obj)

[16:05] <jnthn> We can spesh it into whatever we want either way and the first is more compact bytecode

[16:05] *** regreg left
[16:06] *** zakharyas left
[16:10] <nine> Btw. it successfully slows down setting compilation by ~50 %. I guess it's because of the hash access by those hllboolfor in the meta model and bootstrap code. So now I need to teach the JIT to recover that.

[16:10] <brrt> :-)

[16:18] <timotimo> hm, if the frame that inlines an operation that has an hll set in it, like hllboolfor, it should check if the inlining frame has the right hll and turn that into an hllbool :)

[16:21] <brrt> rewriting code is hard

[16:23] <timotimo> 'tis

[16:24] *** lucasb joined
[16:25] *** p6bannerbot sets mode: +v lucasb

[16:31] <nine> timotimo: that's...an excellent idea I dare say

[16:32] <nine> Unless JITing hllboolfor is somewhat easy. Then it's still an excellent idea but may just not be worth it

[16:33] <timotimo> jitting should be super easy, we should be able to just refer to the objects themselves, unless hlls and objects in them can move?

[16:33] <timotimo> but even then, we can use a spesh slot to refer to the HLL itself

[16:33] <timotimo> and with add_spesh_slot_try_reuse we'll be only adding it once per spesh graph

[16:34] <timotimo> if we look across the inliner's spesh slots rather than the inlinee's spesh slots at that point

[16:34] <timotimo> which is worth a check i think

[16:49] *** robertle joined
[16:50] *** p6bannerbot sets mode: +v robertle

[16:56] *** brrt left
[17:10] *** danzilio1 joined
[17:12] *** AlexDaniel left
[17:13] *** danzilio1 left
[17:14] *** Dwarf7 joined
[17:16] *** Dwarf7 left
[17:19] <timotimo> incredible optimization opportunity! a frame that sets up a bunch of constants, some are run-time-calculated *each time* with bor_i ops! three bor_i ops that could have been left out! all we have to do in return is write a compile-time evaluator for spesh!

[17:26] *** lizmat joined
[17:27] *** p6bannerbot sets mode: +v lizmat

[17:34] <diakopter> timotimo: 🤣🤣🤣🤣🤣🤣🤣

[17:43] <Geth> ¦ MoarVM: da9123a76a | (Jonathan Worthington)++ | src/spesh/plugin.c

[17:43] <Geth> ¦ MoarVM: Only mark stolen deopt ann used if it is

[17:43] <Geth> ¦ MoarVM:

[17:43] <Geth> ¦ MoarVM: Otherwise, we can end up never placing it on an inserted guard, which

[17:43] <Geth> ¦ MoarVM: may in turn cause it to appear like that deopt index is not being used,

[17:43] <Geth> ¦ MoarVM: and thus lead to incorrect instruction deletion and a crash on deopt.

[17:43] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/da9123a76a

[17:43] *** AlexDaniel joined
[17:43] *** p6bannerbot sets mode: +v AlexDaniel

[17:45] *** lucasb left
[17:45] <jnthn> The need for that fix was uncovered by the latest commit in postrelease-opts, but since it could potentially afflict things in master that we just didn't notice yet, I put it there also

[17:47] *** lizmat left
[18:01] *** Soni16 joined
[18:04] *** Kaiepi left
[18:04] *** travis-ci joined
[18:04] *** p6bannerbot sets mode: +v travis-ci

[18:04] <travis-ci> MoarVM build failed. Jonathan Worthington 'Only mark stolen deopt ann used if it is

[18:04] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/416026990 https://github.com/MoarVM/MoarVM/compare/0daf99bcb2c8...da9123a76a7f

[18:04] *** travis-ci left
[18:05] *** brrt joined
[18:06] *** p6bannerbot sets mode: +v brrt

[18:08] *** Soni16 left
[18:25] *** Guest31157 joined
[18:29] *** Guest31157 left
[18:37] *** metax joined
[18:37] *** metax left
[18:43] <brrt> timotimo: the totally practical way to do this, btw, is to write a small frame with the operation you want constant-foleded, interpret it, and evaluate the result

[18:43] <brrt> I mean, not only that, that's basically the standard way of doing it :-)

[18:57] *** jpX joined
[18:58] <timotimo> oh, really now?

[18:58] <timotimo> can't we jit that frame? :D

[19:00] *** jpX left
[19:08] *** ski777715 joined
[19:13] *** ski777715 left
[19:19] *** committable6 joined
[19:19] *** p6bannerbot sets mode: +v committable6

[19:25] *** zakharyas joined
[19:25] *** p6bannerbot sets mode: +v zakharyas

[19:45] *** colomon left
[20:05] *** Kaiepi joined
[20:06] *** p6bannerbot sets mode: +v Kaiepi

[20:12] *** barq6 joined
[20:16] *** barq6 left
[20:31] *** zakharyas left
[20:37] *** lizmat joined
[20:38] *** p6bannerbot sets mode: +v lizmat

[20:42] *** brrt left
[20:51] *** mrkirby1538 joined
[20:53] *** mrkirby1538 left
[20:55] <timotimo> i've got a patch that puts the "null"s at the beginning of a frame in ascending rather than descending register order

[20:56] <timotimo> i'd assume typical prefetching patterns/methods would make that barely but surely faster

[20:57] *** JSharp18 joined
[20:59] *** JSharp18 left
[21:17] <jnthn> Presumably :)

[21:18] *** regreg joined
[21:19] <timotimo> oh, since all the usage stuff is now all better, maybe i should try cutting down the duplicate versions in PHI nodes

[21:19] *** p6bannerbot sets mode: +v regreg

[21:22] <jnthn> timotimo: Yeah, have a go, but in a branch please... :)

[21:22] <jnthn> Want to minimize risk for the next release :)

[21:30] <timotimo> sure

[21:30] <timotimo> but maybe i'll concentrate on getting the first public version of the profiler tool out the door

[21:35] <jnthn> Yes! :)

[21:47] <timotimo> i kind of wish we had "proper" filenames and line numbers for more genned files than just the core setting; is it just a thing that would have to be ported to nqp from rakudo?

[21:48] *** diakopter left
[21:48] <timotimo> i think i'm looking at a --profile-compile right now, because there's lots of code parsing in there; BOOTSTRAP.nqp, Perl6-Grammar.nqp, World.nqp, i cannot generate links to any of those :(

[22:23] *** Kaiepi left
[22:27] *** Kaiepi joined
[22:28] *** p6bannerbot sets mode: +v Kaiepi

[22:43] *** regreg left
[22:43] *** justache10 joined
[22:45] *** justache10 left
[23:09] *** MasterDuke joined
[23:09] *** p6bannerbot sets mode: +v MasterDuke

[23:10] *** MasterDuke left
[23:10] *** MasterDuke joined
[23:10] *** herbert.freenode.net sets mode: +v MasterDuke

[23:10] *** p6bannerbot sets mode: +v MasterDuke

[23:31] *** regreg joined
[23:32] *** p6bannerbot sets mode: +v regreg

[23:56] *** cheapie10 joined
[23:57] *** cheapie10 left
