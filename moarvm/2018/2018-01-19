[00:48] *** lizmat joined
[01:17] *** quotable6 joined
[02:58] *** ilbot3 joined
[03:57] *** bloatable6 joined
[03:58] *** unicodable6 joined
[04:12] *** Kaiepi joined
[04:20] <samcv> gonna wait for Travis to test which i know it will, then merge my ucd2c.pl changes

[04:23] <samcv> i think i eliminated at least 9 globals in the full changeset

[04:37] *** Kaiepi joined
[05:50] *** committable6 joined
[05:50] *** squashable6 joined
[05:50] *** statisfiable6 joined
[07:37] <nine> .tell alexk6 indeed! Thanks for pointing it out!

[07:37] <yoleaux> nine: I'll pass your message to alexk6.

[07:41] *** brrt joined
[07:55] *** brrt joined
[07:57] *** domidumont joined
[08:02] *** brrt1 joined
[08:10] *** domidumont joined
[08:11] <samcv> Travis for os x seems broke

[08:14] <Geth> ¦ MoarVM/master: 20 commits pushed by (Samantha McVey)++

[08:14] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/a7a26eb116...a74869e37b

[08:28] *** brrt joined
[08:31] *** brrt1 joined
[09:10] *** leont joined
[09:28] *** zakharyas joined
[09:34] *** geekosaur joined
[09:36] *** geekosaur joined
[10:10] *** brrt joined
[10:13] *** brrt joined
[11:59] *** brrt joined
[12:15] *** brrt joined
[12:27] *** harrow` joined
[12:28] *** Ven`` joined
[12:29] *** bisectable6 joined
[12:29] *** reportable6 joined
[12:29] *** bloatable6 joined
[12:36] *** releasable6 joined
[12:36] *** greppable6 joined
[12:36] *** benchable6 joined
[12:36] *** coverable6 joined
[12:36] *** reportable6 joined
[13:37] <nine> Another fun fact: the mysterious failure in t/spec/S04-declarations/constant.rakudo.moar no longer appears when I run it with perl 6 directly, but it does when I run it via make t/spec/S04-declarations/constant.t

[13:39] <nine> Oh, now I get it with MoarVM master!

[13:40] <nine> Really looks like some memory corruption. That's why elusive. What gets overwritten depends on the exact memory layout.

[13:41] <timotimo> i bet turning valgrind on makes it go away

[13:44] <nine> Of course :)

[13:47] <timotimo> have you tried the various memory debugging #defines in moar's source?

[13:51] *** zakharyas joined
[13:55] <dogbert2> heh, can't even compile nine's branch

[13:56] <timotimo> it doesn't explode on my end

[13:56] <dogbert2> it worked for me the other day but now I get

[13:56] <dogbert2> src/spesh/optimize.c: In function ‘merge_bbs’:

[13:56] <dogbert2> src/spesh/optimize.c:2435:17: error: ‘for’ loop initial declarations are only allowed in C99 mode

[13:56] <dogbert2> for (int i = 0; i < bb->num_succ; i++)

[13:57] <timotimo> naughty naughty nine :)

[14:00] <Geth> ¦ MoarVM/inline_in_place: 8 commits pushed by (Timo Paulssen)++, (Stefan Seifert)++

[14:00] <Geth> ¦ MoarVM/inline_in_place: 834ad77efe | Put inlined blocks between their caller and its succ

[14:00] <Geth> ¦ MoarVM/inline_in_place: 86678379d9 | Turn inline_end annotated pointless gotos into no_ops

[14:00] <Geth> ¦ MoarVM/inline_in_place: 547cc1f434 | Move inlinee's handlers to front instead of duplicating inliner's

[14:00] <Geth> ¦ MoarVM/inline_in_place: 1eb64990b6 | Remove the pointless goto at the end of an inlined function.

[14:00] <Geth> ¦ MoarVM/inline_in_place: 9df28b4881 | Fix another off-by-one in uninline

[14:00] <Geth> ¦ MoarVM/inline_in_place: 6ccac02496 | Remove pointless goto for entering an inline

[14:00] <Geth> ¦ MoarVM/inline_in_place: f65c6e2e2d | Merge non-control-flow basic blocks

[14:00] <Geth> ¦ MoarVM/inline_in_place: a70dd94742 | Remove more pointless gotos

[14:00] <Geth> ¦ MoarVM/inline_in_place: review: https://github.com/MoarVM/MoarVM/compare/73f34b1b2b...a70dd94742

[14:00] <nine> fixed it in place

[14:05] <timotimo> because it was introduced so early?

[14:08] <nine> I usually avoid fixup commits as much as possible. IOW I rebase agressively to merge a clean, logical and bisectable history.

[14:08] <timotimo> that's fair

[14:14] *** bisectable6 joined
[15:25] *** zakharyas joined
[15:51] *** domidumont joined
[16:12] *** zakharyas joined
[16:18] *** scovit joined
[16:36] <Geth> ¦ MoarVM: 4733449165 | (Jonathan Worthington)++ | 2 files

[16:36] <Geth> ¦ MoarVM: Mark sp_rebless as :noinline

[16:36] <Geth> ¦ MoarVM:

[16:36] <Geth> ¦ MoarVM: For reasons that are not entirely clear yet, this seems to end up with

[16:37] <Geth> ¦ MoarVM: the target register not updated post-deopt. This workaround deals with

[16:37] <Geth> ¦ MoarVM: https://github.com/rakudo/rakudo/issues/1413 so that we don't suffer

[16:37] <Geth> ¦ MoarVM: from that issue in the upcoming release, but this warrants further

[16:37] <Geth> ¦ MoarVM: investigation.

[16:37] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4733449165

[16:37] <Geth> ¦ MoarVM: 85b2c5f82a | (Jonathan Worthington)++ | 3 files

[16:37] <Geth> ¦ MoarVM: Pay attention to return op in cross-HLL inlines

[16:37] <Geth> ¦ MoarVM:

[16:37] <Geth> ¦ MoarVM: We have to forbid anything that requires boxing at the point of

[16:37] <Geth> ¦ MoarVM: return for now, since we can get the box type wrong.

[16:37] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/85b2c5f82a

[17:55] <jnthn> Here's a short note I intend to send to TPF for inclusion with my grant extension application: https://gist.github.com/jnthn/812c0f4319f29536b89d545d926d785d Feedback welcome (I've gotta go afk now, but will read backlog later).

[18:00] <timotimo> oh? i'd be interested to hear what code gen improvements you envision for the regex compiler

[18:16] *** domidumont joined
[18:18] *** Kaiepi joined
[18:21] <japhb> jnthn: Looks good.

[18:24] <japhb> FWIW I also got the Perl 6 Core Development Fund added to Benevity, so companies that use that as their non-profit registry can donate or gift match to it directly.  (Thanks to [Coke] for helping me with that.)

[18:33] <jnthn> cool!

[18:33] <jnthn> japhb++

[18:35] <[Coke]> ... I think I didn't really do much there, but thanks for setting it up!

[18:39] <samcv> japhb: nice!

[18:41] <jnthn> Forgot, [Coke]++ too :)

[18:41] *** nativecallable6 joined
[18:41] <jnthn> timotimo: There's a bunch of stuff about bstack usage/setup that we could do better on, for one.

[19:36] *** quotable6 joined
[20:51] *** evalable6 joined
[21:16] *** colomon joined
[23:38] *** Zoffix joined
[23:39] <Zoffix> Is there some primer into this MoarVM register stuff? I got a fix for RT#132718 where get a "fresh register" and coerce stuff and then "release" it later, but I'd like to understand more on what it is I'm doing exactly.

[23:39] <synopsebot> RT#132718 [open]: https://rt.perl.org/Ticket/Display.html?id=132718 BUG: Unhandled kind 3 with int32 argument

[23:41] <jnthn> The fresh/release stuff aren't really a MoarVM concept, but rather something the code-generator does

[23:42] <jnthn> Its aim is to make sure that within a given sequence of instructions a register is not re-used

[23:42] <jnthn> But to allow re-use outside of that, so we get less registers used (and thus smaller call frames, less memory use, etc.)

[23:43] <jnthn> At the MoarVM level, registers are just working storage locations

[23:43] <Zoffix> Ah

[23:43] <jnthn> Used both for QAST::Var with scope local, as well as temporary things

[23:43] <jnthn> locals typically reserving a register through the whole QAST::Block (exception: the locallifetime op)

[23:44] <jnthn> (which isn't a real op, just a QAST->MAST compiler hint)

[23:44] <Zoffix> Is coercing stuff to full-width to do ops something that's normally done? Like if I want to call if_i op with int32; I coerce it to int64 register first. Is that normal?

[23:44] <jnthn> Yes

[23:44] <Zoffix> Cool. Thanks.

[23:44] <jnthn> Otherwise we'd have an explosion of such ops

[23:45] <Zoffix> :)

[23:48] <timotimo> we can most probably revert that in the expression jit, fwiw

[23:48] <timotimo> though the underlying asm might end up looking almost the same?

[23:48] <jnthn> Yeah :)

[23:48] <jnthn> (to the first part)

[23:48] <jnthn> We I think the expression JIT can do something decent of this

[23:49] <jnthn> That's why I decided the op explosion wasn't justified: we can deal with this situation at JIT time

[23:49] *** leont joined
[23:54] <timotimo> the perf report for a hundred thousand is-primes looks really strange. i'm valgrinding now.

[23:54] <timotimo> callgrinding to be exact

[23:56] *** Zoffix left
