[00:24] *** lizmat joined
[00:25] *** p6bannerbot sets mode: +v lizmat

[06:46] *** MasterDuke left
[07:42] *** domidumont joined
[07:43] *** p6bannerbot sets mode: +v domidumont

[07:49] *** domidumont left
[08:35] *** Kaiepi joined
[08:36] *** p6bannerbot sets mode: +v Kaiepi

[08:38] *** brrt joined
[08:39] *** p6bannerbot sets mode: +v brrt

[08:39] <brrt> \o

[08:39] <brrt> nine++ for hllbool(for) ops

[08:40] <Geth> ¦ MoarVM: fb8976ab19 | (Bart Wiegmans)++ | src/jit/x64/emit.dasc

[08:40] <Geth> ¦ MoarVM: [JIT] Pointers must be loaded by mov64

[08:40] <Geth> ¦ MoarVM:

[08:40] <Geth> ¦ MoarVM: Because 'normal' x86 operands can only be 4 bytes wide.

[08:40] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/fb8976ab19

[08:41] <timotimo> oh, is that the cause of the crash?

[08:43] <brrt> maybe?

[08:43] <brrt> what crash

[08:44] <timotimo> segfaults during stage parse i think?

[08:44] <brrt> let me try

[08:44] <timotimo> i can't reproduce 'em

[08:44] <timotimo> but liz can. so maybe needs a mac to tickle it?

[08:48] <brrt> hmm, i'm not seeing a crash either

[08:48] <brrt> .ask lizmat can you try again with moar HEAD?

[08:48] <yoleaux> brrt: I'll pass your message to lizmat.

[08:48] <timotimo> JIT_DISABLE=1 supposedly makes it go away

[08:51] *** fake_space_whale left
[08:52] <lizmat> seems to build ok now

[08:52] <yoleaux> 08:48Z <brrt> lizmat: can you try again with moar HEAD?

[08:53] <timotimo> cool.

[08:56] <brrt> \o/

[08:56] <lizmat> spectesting now, and then really off to breakfast (if there is still any)

[08:56] <brrt> with apologies to nine++, this is one of the reasons I'd really rather get rid of the lego JIT

[08:56] <timotimo> :)

[08:57] <timotimo> how come using mov there instead of mov64 doesn't explode violently? is it fine with pointers that have the upper 32bit zeroed out?

[09:03] <lizmat> spectests clean also, brrt++ nine++

[09:03] <lizmat> breakfast&

[09:03] <nine> ooooooooh thanks a lot brrt!

[09:04] <nine> brrt: but why the change to uintptr_t?

[09:05] *** lizmat_ joined
[09:06] *** p6bannerbot sets mode: +v lizmat_

[09:08] *** lizmat left
[09:08] <brrt> because safety :-)

[09:08] <brrt> uintptr_t is guaranteed by the standard to hold a pointer in an integer

[09:09] <brrt> an MVMuint64 will also hold it, but is not guaranteed to

[09:09] <brrt> so 'C as you understand it' will always work, 'C as specified' might find an edge case where it won't; and I'm being paranoid

[09:41] <nine> But I've used an MVMObject* which...is a pointer type?

[10:01] <brrt> yes

[10:02] <brrt> under the hood, what happens is that dynasm passes this as two 32 bit integers to the assembler, which are stitched together

[10:02] <brrt> this will complain if the 64 bit number is not an integer

[10:02] <brrt> hence the cast is necessary

[10:05] <nine> aaah...thanks for clearing that up :)

[10:32] <brrt> :-)

[10:32] <brrt> I kind of dislike how you have to know the under-the-hood details of dynasm and x86 for that.... it's a pretty leaky abstraction

[10:40] *** brrt left
[11:47] *** MasterDuke joined
[11:47] *** p6bannerbot sets mode: +v MasterDuke

[11:47] *** MasterDuke left
[11:47] *** MasterDuke joined
[11:47] *** herbert.freenode.net sets mode: +v MasterDuke

[11:47] *** p6bannerbot sets mode: +v MasterDuke

[12:02] *** brrt joined
[12:03] *** p6bannerbot sets mode: +v brrt

[12:10] *** brrt left
[13:49] *** lizmat_ left
[13:54] *** lizmat joined
[13:54] *** p6bannerbot sets mode: +v lizmat

[15:00] *** zakharyas joined
[15:01] *** p6bannerbot sets mode: +v zakharyas

[15:04] *** brrt joined
[15:05] *** p6bannerbot sets mode: +v brrt

[15:22] *** dogbert17 joined
[15:23] *** p6bannerbot sets mode: +v dogbert17

[16:07] *** brrt left
[16:13] *** lizmat left
[16:39] *** ggoebel_ joined
[16:40] *** p6bannerbot sets mode: +v ggoebel_

[17:02] *** AlexDani` joined
[17:03] *** p6bannerbot sets mode: +v AlexDani`

[17:06] *** AlexDaniel left
[17:12] *** AlexDani` is now known as AlexDaniel

[17:12] *** AlexDaniel left
[17:12] *** AlexDaniel joined
[17:12] *** hitchcock.freenode.net sets mode: +v AlexDaniel

[17:12] *** p6bannerbot sets mode: +v AlexDaniel

[17:20] *** brrt joined
[17:21] *** p6bannerbot sets mode: +v brrt

[17:48] <brrt> \o

[17:51] <diakopter> :D brrt

[17:53] *** domidumont joined
[17:54] *** p6bannerbot sets mode: +v domidumont

[18:05] <timotimo> o/

[18:15] <brrt> ohai timotimo

[18:20] <brrt> I'm suspicious that our current implementation of trunc_i8, etc. don't do what we think they do

[19:15] *** brrt left
[19:17] *** domidumont left
[19:31] *** fake_space_whale joined
[19:32] *** p6bannerbot sets mode: +v fake_space_whale

[19:40] *** lizmat joined
[19:41] *** p6bannerbot sets mode: +v lizmat

[19:57] *** robertle left
[20:36] *** zakharyas left
[20:38] *** fake_space_whale left
[22:03] *** MasterDuke left
[22:52] *** reportable6 left
[22:52] *** reportable6 joined
[22:53] *** p6bannerbot sets mode: +v reportable6

[22:58] <AlexDaniel> blocker reminder: https://github.com/MoarVM/MoarVM/issues/951

[23:02] <timotimo> hum. do we do alignment in regular create, but not in fastcreate, perhaps?

[23:04] <timotimo> no, sp_fastcreate also just calls to MVM_gc_allocate_nursery

[23:05] *** reportable6 left
[23:05] *** reportable6 joined
[23:06] *** p6bannerbot sets mode: +v reportable6

[23:41] *** MasterDuke joined
[23:41] *** p6bannerbot sets mode: +v MasterDuke

[23:42] *** MasterDuke left
[23:42] *** MasterDuke joined
[23:42] *** herbert.freenode.net sets mode: +v MasterDuke

[23:42] *** p6bannerbot sets mode: +v MasterDuke

