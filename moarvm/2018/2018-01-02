[01:50] *** harrow joined
[03:02] *** ilbot3 joined
[05:33] *** Kaiepi joined
[05:53] *** geekosaur joined
[07:11] *** piojo joined
[07:59] *** piojo joined
[08:00] *** domidumont joined
[08:07] *** domidumont joined
[08:25] <piojo> Is there a way to access the variable/type name (or text) currently being parsed? I know about st->debug_name, but I think the code is running too early and debug_name is null

[08:25] <yoleaux> 30 Dec 2017 12:04Z <jnthn> piojo: Such types should be interned even across compilation units. This process is largely implemented in src/6model/parametric.c. The interning should also be happening at deserialization time; see https://github.com/MoarVM/MoarVM/blob/master/src/6model/serialization.c#L3003 for a place to start digging further

[08:25] <piojo> thanks jnthn!

[08:25] <piojo> maybe I should ask a different question--does GDB work well for understanding what MoarVM is doing as a small perl6 modules are loaded?

[08:27] *** leont_ joined
[08:29] *** zakharyas joined
[09:40] *** committable6 joined
[10:00] *** domidumont joined
[10:04] *** domidumont joined
[10:50] <samcv> good *

[10:50] <nwc10> good *, samcv

[10:52] <jnthn> morning o/

[10:55] <samcv> morning

[10:59] <piojo> Good morning (or evening), folks

[11:00] <piojo> jnthn, thanks for the tip about duplicate interning. I'm having trouble with "printf" debugging since the debug_names aren't set yet in the parametric.c functions

[11:01] <piojo> Do people mostly use GDB on this project?

[11:01] <jnthn> Yes, though often it's useful to have some debug output in higher level code too

[11:02] <jnthn> (If debugging stuff that's mostly implemented at that level and sometimes pokes down into VM-level things, that is)

[11:03] <jnthn> It may be worth another pass over the places we call newtype but aren't setting a debug name

[11:06] <Geth> Â¦ MoarVM: 8414888beb | (Jonathan Worthington)++ | src/spesh/osr.c

[11:06] <Geth> Â¦ MoarVM: Fix OSR of thread entry frame

[11:06] <Geth> Â¦ MoarVM:

[11:06] <Geth> Â¦ MoarVM: Fixes issue #774.

[11:06] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8414888beb

[11:13] <piojo> Do you have any guess whether the problem is that Array[Int] type lookup is failing, or a duplicate type isn't being merged like it should be?

[11:14] <piojo> The code comments implied duplicate types are temporarily allowed, if I understood correctly

[11:14] <jnthn> I'd guess the latter

[11:16] <piojo> thanks

[11:16] <jnthn> (Though I'm certainly guessing :))

[11:23] *** travis-ci joined
[11:23] <travis-ci> MoarVM build errored. Jonathan Worthington 'Fix OSR of thread entry frame

[11:23] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/324085867 https://github.com/MoarVM/MoarVM/compare/4541cf6f6cc6...8414888beb16

[11:23] *** travis-ci left
[11:35] <piojo> jnthn, have you published anything that describes moarvm's type system?

[11:36] <piojo> oh, I see the 2nd day of your "nqp internals" talk covers some of this. I'll read the slides now

[11:37] <jnthn> Yeah, that'll still be pretty accurate

[11:38] <jnthn> Nothing's changed much in that area

[11:39] <piojo> Good to know. (I just noticed it's 4 years old)

[11:39] <piojo> though this bug is even older, so it's all good.

[11:41] <Geth> Â¦ MoarVM/master: 4 commits pushed by (Bart Wiegmans)++, (Jonathan Worthington)++

[11:41] <Geth> Â¦ MoarVM/master: 85ca55f968 | Fix memory leaks reported by ASAN

[11:41] <Geth> Â¦ MoarVM/master: 3a772a67c1 | Another leak in unicode_ops.c

[11:41] <Geth> Â¦ MoarVM/master: 25dda671d4 | Fix leak when args bind error would unwind rather than return

[11:41] <Geth> Â¦ MoarVM/master: 40a79ee83d | Merge pull request #766 from MoarVM/memory-leak-fixes

[11:41] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/8414888beb...40a79ee83d

[11:41] * lizmat wonders if this would be a good time to do a bump ?

[11:42] <jnthn> Maybe, though note the bug fix I did is impossible to trigger from Perl 6

[11:46] <lizmat> well, I'm still seeing random flappers when running spectests every now and then

[11:47] <jnthn> They'll be something else, then.

[11:47] <lizmat> flappers I cannot explain from known race conditions

[11:47] <jnthn> Oh, should bump MoarVM though

[11:47] <jnthn> (In NQP)

[11:47] <jnthn> As the newly added test depends on it :)

[11:47] <jnthn> Will do that

[11:47] <lizmat> cool

[12:19] *** travis-ci joined
[12:19] <travis-ci> MoarVM build errored. Jonathan Worthington 'Merge pull request #766 from MoarVM/memory-leak-fixes

[12:19] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/324094486 https://github.com/MoarVM/MoarVM/compare/8414888beb16...40a79ee83db8

[12:19] *** travis-ci left
[12:29] <lizmat> fwiw, builds and spectests Rakudo fine, so I'm bumping Rakudo

[12:34] *** reportable6 joined
[13:09] *** statisfiable6 joined
[13:11] *** nativecallable6 joined
[14:20] *** zakharyas joined
[15:42] *** releasable6 joined
[16:57] *** piojo_ joined
[16:57] *** squashable6 joined
[16:58] *** leont_ joined
[17:22] *** bloatable6 joined
[17:22] *** coverable6 joined
[17:22] *** benchable6 joined
[17:33] *** lizmat joined
[17:39] *** domidumont joined
[17:39] *** bisectable6 joined
[17:59] *** dogbert17 joined
[18:01] *** FROGGS joined
[18:04] <dogbert17> o/ does anyone know how to enable the gc debug log?

[18:09] <timotimo> you have to set a #define in the gc_debug.h or what it's called file

[18:09] <timotimo> dogbert17: ^

[18:09] <timotimo> but that's mostly for orchestration, like, what phase is which thread going through now

[18:16] *** leont_ joined
[18:28] *** geospeck joined
[19:07] *** unicodable6 joined
[19:20] <dogbert17> timotimo: I have used that define many times but I have never seen anything being written out wrt to collections

[19:21] <dogbert17> GCDEBUG_LOG(tc, MVM_GC_DEBUG_COLLECT, "Thread %d run %d : processing %d items from in tray \n", worklist->items);

[19:39] *** greppable6 joined
[19:48] *** lizmat joined
[19:56] <dogbert17> timotimo: found it in orchestrate.h

[19:57] <dogbert17> now it writes a lot of interesting stuff on the screen and then it SEGV's so either I'm using it wron or it's slightly broken

[20:00] <dogbert17> it SEGV's here https://github.com/MoarVM/MoarVM/blob/master/src/gc/collect.c#L315

[20:03] <dogbert17> REPR(item) is null

[20:33] *** AlexDaniel joined
[20:34] *** zakharyas joined
[20:58] *** evalable6 joined
[21:09] *** p6lert joined
[22:16] *** leont_ joined
[22:16] <leont_> Hacking on moarvm

[22:16] <leont_> It tells me to use nqp to test it

[22:16] <leont_> What kind of workflow is usual here?

[22:33] <MasterDuke> leont_: fyi, if you rebuild moarvm, you usually don't have to rebuild nqp or rakudo

[22:33] <MasterDuke> unless you're adding a new op or something like that

[22:34] <MasterDuke> so i just make my moarvm changes, `make install`, and then run whatever nqp and/or rakudo code i'm testing

[22:34] <MasterDuke> since i have moarvm, nqp, and rakudo all Configure.pl'ed with the same --prefix

[22:35] <leont_> I'm working out of a separate moarvm checkout now, I guess I shouldn't do that

[22:35] <leont_> But yeah, I am planning to add at least one op, possibly more

[22:35] <MasterDuke> i have my "system" rakudo, and then a seperate checked out moar/nqp/rakudo for hacking on

[22:36] <MasterDuke> fwiw, i build them individually, not with --gen-*

[22:37] <MasterDuke> but then yeah, you'll have to rebuild nqp, and maybe do a `make m-bootstrap-files` (i don't know exactly when that is required)

[22:40] <leont_> Haven't touched this branch since August, forgotten a lot of stuff :-/

[22:58] <MasterDuke> timotimo, jnthn: i'm seeing some calls to MVM_fixed_size_free with bytes == 0 and to_free == NULL with my string fsa branch

[22:58] <MasterDuke> however, the backtraces in valgrind and gdb aren't very helpful

[22:59] <MasterDuke> is this something rr would be good for? and if so, any pointers on how to do it?

[23:36] *** leont_ joined
[23:45] *** quotable6 joined
