[01:31] *** MasterDuke joined
[01:39] <MasterDuke> missing template counts for building core.settings and running test-t https://gist.github.com/MasterDuke17/4a6b30b73a505696acb021a4ed2c1370

[01:43] <MasterDuke> what does it mean where there are 'null' or 'PHI' in the 'Build tree out of: [ ... ]' list?

[01:48] <timotimo> PHI are actually no-ops, null is an op that nulls out a register

[01:49] <timotimo> MasterDuke: we used to go through all registers that hold object values and null them out when entering a frame, but that was wasteful, now we emit a whole bunch of null instructions in spesh and let spesh remove useless nulls

[01:51] <MasterDuke> hm. so what would be a useful metric? total length (number of elements in the list)? length - # of PHI/null?

[01:53] <timotimo> yeah maybe, but phis are always at the beginning so they would always be in the expr jit part

[01:54] <MasterDuke> uniq lists and their count, like for the individual missing templates?

[01:57] <MasterDuke> gist updated

[02:05] <timotimo> i think we should remove the PHI from being logged %)

[02:08] <MasterDuke> it does distract a bit

[02:10] <timotimo> lastexpayload should be very easy to do

[02:10] <timotimo> isconcrete, too, if bitwise arithmetic is easy in the exprjit

[02:11] <timotimo> prepargs is by its nature always followed by a bunch of arg_* ops and then some kind of invoke_*

[02:11] <timotimo> or fastinvoke or something

[02:11] <timotimo> that'll probably require a bunch more thought

[02:12] <timotimo> i would have said "unless_o is easy since we already have if_o", but we don't have either of those

[02:13] <MasterDuke> the interp.c implementation isn't that bad

[02:13] <MasterDuke> but there a bit of a scary comment in the jit/graph.c implementation

[02:13] <timotimo> which one do you mean?

[02:15] <timotimo> i imagine not_i could be worth quite a bit

[02:15] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/master/src/jit/graph.c#L1695-L1733

[02:16] <timotimo> huh, interesting

[02:22] <timotimo> the good news is that we can express the "first do an istrue_o, then do the branching" in just a big expression tree

[02:23] <timotimo> and we can probably just ask the exprjit for a local variable to store the result in as well

[02:25] <MasterDuke> huh, we only have an istrue_s

[02:25] <timotimo> oh the op is probably bool_o

[02:26] <timotimo> no we have istrue and isfalse without _*

[02:26] <MasterDuke> ah

[02:58] *** ilbot3 joined
[06:15] *** psch joined
[07:11] <nine> timotimo: local variables are just like (let: (($val (load (add (^p6obody $1) $2) ptr_sz))). takedispatcher is an example for multiple variables

[07:11] <nine> This is where the expr jit really shines compared to the lego jit

[07:41] *** brrt joined
[07:44] <brrt> good * #moarvm

[07:51] *** domidumont joined
[07:52] <nine> good brrt #moarvm!

[07:53] <brrt> good nine!

[07:53] <brrt> are you coming to FOSDEM this year?

[07:53] <nine> yeah!

[07:54] <nine> you, too?

[08:07] *** domidumont joined
[08:11] <nwc10> if NQP goes "boom" with "Expected native int argument, but got num" does that mean that it's still a *good* morning?

[08:11] <nwc10> at gen/moar/stage1/QRegex.nqp:1624  (gen/moar/stage1/QRegex.moarvm:!cursor_pass)

[08:11] <nwc10> ...

[08:11] <psch> at least it is a clear-ish error message; NQP does have a few less comprehensible ones :)

[08:36] *** zakharyas joined
[10:14] *** zakharyas joined
[10:15] <brrt> i'm planning

[10:56] *** zakharyas joined
[10:59] *** AlexDaniel joined
[11:03] <jnthn> About object alignment: the best way to do it would be to round up sizes at the point we calculate them

[11:03] <yoleaux> 09:49Z <Zoffix> jnthn: Would you review this commit in a branch I made? https://github.com/rakudo/rakudo/commit/77fb61a719 It looks a bit nutty, especially the whole block-per-».-site thing and the perf boost isn't amazing. I think we can get the same benefits by improving slurpy dispatch caching instead.

[11:05] <jnthn> Then the allocator doesn't have to be burdened with any extra checks

[11:26] *** zakharyas joined
[11:56] *** zakharyas joined
[11:58] *** coverable6 joined
[11:58] *** nativecallable6 joined
[11:58] *** unicodable6 joined
[12:01] *** reportable6 joined
[12:02] <wictory[m]> jnthn: you are probably right ... the size argument to `MVM_gc_allocate_nursery()` comes either from a `sizeof()` (which can assume is aligned, and this can be checked using static analysis), or from `st->size`, where `st` is a `MVMSTable`. The `st->size` seems to mostly come from `sizeof()`s, except for two places in `src/6model/reprs/P6opaque.c`. I'm not sure, but could there be some more places that are not directly

[12:02] <wictory[m]> visible from the code? It would be nice if some MVMSTable genius could verify this :)

[12:03] <wictory[m]> Here is the places I found where `st->size` is set to something else than a `sizeof()` https://github.com/MoarVM/MoarVM/blob/e813f06c38213d49dcfc4cd2322cd8ad93fe3f6b/src/6model/reprs/P6opaque.c#L876 https://github.com/MoarVM/MoarVM/blob/e813f06c38213d49dcfc4cd2322cd8ad93fe3f6b/src/6model/reprs/P6opaque.c#L917

[12:06] <wictory[m]> There are even some comments about that sizes should be aligned in `src/6model/reprs/P6opaque.c`

[12:15] *** AlexDani` joined
[12:17] <MasterDuke> brrt: any thoughts on https://github.com/MoarVM/MoarVM/pull/787 ?

[12:39] <brrt> i'm checking

[12:39] <brrt> oh yeah, i had some thoughts about that

[12:44] <brrt> i'll post them

[12:50] <MasterDuke> cool, thanks

[13:01] <MasterDuke> brrt: and while you're here, what am i doing wrong here: `(template: isconcrete   (if (and (nz $1) (^is_conc_obj $1))     (const 1 int_sz)     (const 0 int_sz)))` ?

[13:01] <brrt> ehm. good question

[13:01] *** reportable6 joined
[13:01] <brrt> you may stumble on a JIT bug :-P

[13:02] <MasterDuke> error: Expected flag but got reg in template (if (and (nz $1) (zr (and (load (addr $1 (&offsetof MVMObject header.flags)) (&SIZEOF_MEMBER MVMObject header.flags)) (const (&QUOTE MVM_CF_TYPE_OBJECT) (&SIZEOF_MEMBER MVMObject header.flags))))) (const 1 int_sz) (const 0 int_sz)) child 0

[13:02] <brrt> ehm.

[13:02] <brrt> maybe a JIT compiler bug

[13:02] <brrt> lemmetry

[13:03] <brrt> oh, i see

[13:03] <brrt> (and) is binary AND

[13:03] <brrt> like 1 & 2

[13:03] <brrt> what you're looking for is ALL

[13:04] <MasterDuke> aahh

[13:04] <brrt> which is boolean-shortcircuiting AND generalized

[13:07] <MasterDuke> now it compiles

[13:07] <brrt> :-)

[13:07] <brrt> otherwise it looks good

[13:07] <brrt> MasterDuke++ :-)

[13:40] *** lizmat joined
[14:10] *** zakharyas joined
[14:45] *** brrt joined
[15:00] *** MasterDuke joined
[15:31] *** zakharyas joined
[15:50] *** zakharyas joined
[16:05] *** brrt joined
[16:12] *** zakharyas joined
[16:35] <MasterDuke> brrt: looks like cast isn't implemented?

[16:35] <brrt> what kind of cast are you doing?

[16:36] <brrt> you rarely need to CAST by hand

[16:36] <timotimo> maybe int ⋄ num?

[16:36] <MasterDuke> for coerce_ni

[16:36] <moritz> if you don't break your hand, you don't need a cast for it :-)

[16:36] <MasterDuke> GET_REG(cur_op, 0).i64 = (MVMint64)GET_REG(cur_op, 2).n64;

[16:36] <timotimo> aha! :)

[16:37] <MasterDuke> timotimo++

[16:38] <timotimo> i like compose+<+> giving me ⋄ it's a pretty glyph

[16:45] <brrt> oh, no, that's not a thing yet

[16:45] <brrt> because numeric registers are not a thing yet

[16:52] *** zakharyas joined
[16:57] <MasterDuke> ok, i'll leave those be for now

[17:00] *** zakharyas1 joined
[17:02] <brrt> :-)

[17:44] *** reportable6 joined
[17:46] *** reportable6 joined
[17:47] *** reportable6 joined
[17:47] *** reportable6 joined
[17:48] *** reportable6 joined
[18:52] *** reportable6 joined
[19:23] *** MasterDuke joined
[19:24] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/01/29/2018-05-mille-plus-modules/

[20:24] *** quotable6 joined
[20:28] <MasterDuke> can there be string literals in templates?

[20:42] *** coverable6 joined
[20:50] *** coverable6 joined
[20:50] *** bart__ joined
[20:51] <brrt> MasterDuke: yes, but

[20:52] <brrt> let me think about how that worked

[20:52] <brrt> (i recently added support for string literals in the parser)

[20:52] <brrt> escaping-\" doesn't work

[20:54] <MasterDuke> but if i don't need any "s in the string, (carg ="something here" ptr) should work?

[20:55] <MasterDuke> or should that be str at the end?

[20:57] <MasterDuke> or, is there any "built in" support for MVM_exception_throw_adhoc?

[21:07] *** nativecallable6 joined
[21:08] <brrt> no, i was working on that at some point

[21:09] <brrt> the interesting thing is that throw_adhoc and friends never return

[21:09] *** nativecallable6 joined
[21:09] <brrt> so we can be more clever around storing values to memory

[21:10] *** Kaiepi joined
[21:11] <MasterDuke> btw, think this looks reasonable? https://gist.github.com/MasterDuke17/ba861e5c3c1e4a342c38268a43b3b534

[21:14] <MasterDuke> it's not quite right though, "node is too short"

[21:21] <MasterDuke> something about the dov/ifv

[21:21] <brrt> IFV takes two branches. i think you want WHEN

[21:22] <MasterDuke> heh, just noticing that now

[21:23] <MasterDuke> now, Node (carg = "Cannot look up attributes in a %s type object" = str) is too short

[21:24] <brrt> yeah, not sure, but i don't think that needs a = sign at all

[21:24] <brrt> and.. you can't put it like that literally, has to be wrapped with const_ptr

[21:25] <MasterDuke> k

[21:25] <MasterDuke> what is the =" "= form for?

[21:31] <brrt> that's not something that i think actually works

[21:31] <brrt> is that in the templates now?

[21:32] *** domidumont joined
[21:32] <brrt> something like (const_ptr "foo bar")

[21:32] <MasterDuke> no, just mentioned in https://github.com/MoarVM/MoarVM/blob/master/docs/jit/overview.org#syntax

[21:41] <brrt> oh, that's an artifact of rendering

[21:41] <MasterDuke> brrt: fyi, got the template compiling (and it seems to work), but there were some warnings

[21:42] <brrt> the = should make it appear monospace

[21:42] <MasterDuke> https://gist.github.com/MasterDuke17/ba861e5c3c1e4a342c38268a43b3b534

[21:42] <MasterDuke> ah!

[21:42] <brrt> yeah, you should use const_ptr there

[21:43] <MasterDuke> also in the same section: Macro parameters are prefixed by =,= (e.g. =,obj=), and they are replaced with whatever symbol or list is ‘bound’ to them when the macro is invoked.

[21:44] <MasterDuke> `(carg (const_ptr (&QUOTE "Cannot look up attributes in a %s type object") ptr_sz) ptr)` ?

[21:45] <MasterDuke> that causes: Use of uninitialized value in lc at tools/expr-template-compiler.pl line 114, <STDIN> line 514.

[21:46] <brrt> that's probably something wrong yes

[21:46] <brrt> anyway, i have to go now

[21:48] <MasterDuke> later. thanks for the help

[22:12] *** reportable6 joined
[23:44] *** Voldenet_ joined
[23:48] *** yoleaux joined
[23:48] *** evalable6 joined
[23:48] *** quotable6 joined
[23:48] *** coverable6 joined
