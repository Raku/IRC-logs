[01:08] *** travis-ci joined
[01:08] <travis-ci> MoarVM build passed. Stefan Seifert 'Fix off-by-one error in uninline

[01:08] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/328839703 https://github.com/MoarVM/MoarVM/compare/56c03d99c21c...7ea08024edfe

[01:08] *** travis-ci left
[01:17] *** unicodable6 joined
[01:17] *** quotable6 joined
[02:57] *** ilbot3 joined
[03:42] *** Kaiepi joined
[03:50] *** klapperl joined
[03:57] *** bloatable6 joined
[06:26] *** domidumont joined
[06:32] *** domidumont joined
[06:34] *** brrt joined
[07:40] *** brrt joined
[07:42] *** brrt joined
[07:44] <samcv> have a ton more ucd2c.pl work i've been doing. removing more unneeded variables simplifying loops. making quoted strings not contain newlines inside them which make it hard to read

[07:44] <samcv> and many more things. no real functional changes but it's making the code better

[07:50] *** domidumont joined
[07:56] *** FROGGS joined
[08:14] *** brrt joined
[08:35] *** zakharyas joined
[09:03] *** zakharyas joined
[09:21] *** Kaiepi joined
[09:32] *** brrt joined
[10:30] *** brrt joined
[10:31] *** brrt joined
[10:32] <jnthn> morning o/

[10:32] <jnthn> samcv++ # ucd2c cleanups

[10:32] <jnthn> nine++ # inline fixes

[10:33] <brrt> \o everybody

[10:33] <brrt> indeed nine++ samcv++

[10:33] <jnthn> o/ brrt

[10:34] * brrt is positively impressed by nine's perseverance

[10:40] <jnthn> That's pretty much half of debugging

[10:46] *** zakharyas joined
[11:06] <lizmat> time for a bump ?

[11:40] *** zakharyas joined
[11:46] *** committable6 joined
[12:06] *** brrt joined
[13:48] *** zakharyas joined
[13:52] *** zakharyas joined
[14:14] *** bisectable6 joined
[14:47] *** squashable6 joined
[15:28] *** zakharyas joined
[16:26] *** brrt joined
[17:23] *** coverable6 joined
[17:23] *** benchable6 joined
[17:28] *** domidumont joined
[17:35] <nine> Oh boy...the next issue occurs after speshing a function consisting of 1464 basic blocks and 147 registers

[17:36] <nine> And no less than 20 inlines

[17:43] *** brrt joined
[17:56] <timotimo> :D

[18:12] <Geth> ¦ MoarVM: 4a0a912ef1 | (Stefan Seifert)++ | tools/spesh-bisect.pl

[18:12] <Geth> ¦ MoarVM: New spesh-bisect.pl tool

[18:12] <Geth> ¦ MoarVM:

[18:12] <Geth> ¦ MoarVM: Finds the first MVM_SPESH_LIMIT value where test program breaks.

[18:12] <Geth> ¦ MoarVM: Usage: tools/spesh-bisect.pl perl6 t/foo/bar.t

[18:12] <Geth> ¦ MoarVM: Uses the process' return code for deciding whether the run was successful

[18:12] <Geth> ¦ MoarVM: or not (like git bisect run)

[18:12] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4a0a912ef1

[18:13] *** zakharyas joined
[18:15] *** zakharyas joined
[18:31] *** geospeck joined
[18:38] <lizmat> jnthn: I think I've asked this before, but may be not

[18:38] <lizmat> if I look at the performance of "say (^Inf).hyper(:1000batch,:4degree).grep( *.is-prime )[5000]"

[18:39] <lizmat> then there is hardly any gain increasing the :degree: values 5 - 8 only give marginal wallclock gains

[18:39] <lizmat> whereas :8degree almost doubles in CPU usage

[18:39] <lizmat> so it appears to be busy doing something, but not actual work :-)

[18:40] <lizmat> is this something we can see improve in the future or not ?

[18:40] <jnthn> How many real cores do you have?

[18:40] <lizmat> 4 real / 8 virtual

[18:40] <jnthn> OK, so by the time you're in 5 you're beyond the real cores

[18:40] <jnthn> And the work is the same, so competing over the same function units

[18:40] *** releasable6 joined
[18:41] *** greppable6 joined
[18:41] *** reportable6 joined
[18:41] *** statisfiable6 joined
[18:41] *** nativecallable6 joined
[18:41] <timotimo> right, hyper threading helps mostly if the individual pieces of work are different

[18:41] <timotimo> like, one core is doing mostly floating point arithmetic, the other mostly shuffling data around or bitwise operations or whatnot

[18:41] <lizmat> ok, so you're saying, don't increase :degrees above real cores for .hyper

[18:42] <lizmat> perhaps we need to doc this?

[18:42] <jnthn> We can but it's very workoad dependent

[18:43] <timotimo> well, if you're already .hypering just one sequence, maybe that means the workload is mostly the same?

[18:43] <lizmat> ok, so you're saying "say (^Inf).hyper(:1000batch,:4degree).grep( *.is-prime )[5000]" is like a worst case

[18:43] <jnthn> The work is mostly in .is-prime, and

[18:44] <jnthn> that's going to be a nice, tight, chunk of well-optimized C code

[18:44] <jnthn> Presumably mostly doing integer, memory, and branch work

[18:44] <jnthn> So yeah, it's the kind of case that's liable to wind up with more threads on the CPU, but not many more instructions being retired

[18:45] <lizmat> yeah, gotcha

[18:46] <jnthn> A modern CPU core is like a pin board with tasks to be done on it, and lots of workers grabbing tasks that have all their dependencies available. Hyperthreading is two threads sticking stuff on the board, but there's only so many workers. :)

[18:46] <jnthn> The biggest wins are when the threads occupy different workers.

[18:48] <jnthn> Then there's the times a disgruntled worker saw something on the pin board that was confidential and snitches about it down the pub. Thus Meltdown. :P

[18:48] <jnthn> dinner &

[18:56] <nine> Apparently all remaining test failures are due to mis-spesh of the 'compile_var' monster (the one with 1464 BBs and 20 inlines)

[19:43] *** dogbert17 joined
[20:33] *** Ven`` joined
[20:47] *** Kaiepi joined
[20:50] *** evalable6 joined
[20:57] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/01/15/2018-03-blue-note/

[22:20] *** leont joined
[22:26] *** Ven`` joined
[22:39] *** Ven`` joined
[23:01] <leont> Either spawn_async is leaking data, or uv_spawn takes ownership of the handles without documenting it, or I'm not understanding the code

[23:25] <samcv> lizmat++
