[00:10] <timotimo> m: say (100 * 100 * 500) / 2.7

[00:10] <camelia> rakudo-moar 070780e04: OUTPUT: «1851851.851852␤»

[00:11] <timotimo> m: say (80 * 80 * 500) / 11.25

[00:11] <camelia> rakudo-moar 070780e04: OUTPUT: «284444.444444␤»

[00:11] <timotimo> m: say 1851851.851852 / 284444.444444

[00:11] <camelia> rakudo-moar 070780e04: OUTPUT: «6.510416666677␤»

[00:11] <timotimo> i turned off the graphics output and put nqp stuff into the innermost loop

[00:12] <timotimo> also i found that i accidentally had one + too many in a row that made performance much worse just by existing

[00:19] *** lizmat left
[00:20] <MasterDuke> what do you mean just by existing?

[00:29] <timotimo> something somewhere got slightly confused because i had a prefix:<+> in there in the row of infix:<+>

[00:32] <MasterDuke> huh

[00:34] <timotimo> m: say (100 * 100 * 500) / 2.14

[00:34] <camelia> rakudo-moar 070780e04: OUTPUT: «2336448.598131␤»

[00:35] <timotimo> removed just a tiny bit more overhead

[00:39] <timotimo> m: say (100 * 100 * 500) / 1.54

[00:39] <camelia> rakudo-moar 070780e04: OUTPUT: «3246753.246753␤»

[00:39] <timotimo> using a loop(;;) instead of a for with a range

[00:43] <MasterDuke> the for+range wasn't getting converted to a while??

[00:43] <timotimo> m: say (100 * 100 * 500) / 1.35

[00:43] <camelia> rakudo-moar 070780e04: OUTPUT: «3703703.703704␤»

[00:43] <timotimo> no, the end values weren't constant

[00:43] <timotimo> or do we have that now?

[00:44] <timotimo> ^- i changed the other loop that does things into a loop(;;), too

[00:44] <timotimo> it used to actually be two loops, just because i wrote the code lazily

[00:44] <timotimo> but it only ever took 0.3 seconds in total

[00:44] <timotimo> which wasn't much when the total time was still above 10 seconds

[00:45] <MasterDuke> well, my PR hasn't been merged, but it still requires things to be literal/constant

[00:46] <MasterDuke> and is only about offsets to ranges

[00:47] <timotimo> OK

[00:47] <timotimo> well, it was based on a variable, though a very rarely changing one

[00:47] <timotimo> i.e. it only changes at the beginning of the program when it comes from the commandline arguments

[00:49] <timotimo> hum. our current MAIN can't handle native ints, eh?

[00:49] <timotimo> perl6 -e 'sub MAIN(int $a) { say $a }' 99

[00:49] <timotimo> Usage:

[00:49] <timotimo>   -e '...' <a>

[00:50] <timotimo> m: say (100 * 100 * 500) / 0.9

[00:50] <camelia> rakudo-moar 070780e04: OUTPUT: «5555555.555556␤»

[00:50] <timotimo> what a beautiful number

[00:51] <timotimo> m: say (200 * 200 * 500) / 2.2

[00:51] <camelia> rakudo-moar 070780e04: OUTPUT: «9090909.090909␤»

[00:51] <timotimo> jesus

[00:51] <timotimo> needless to say, this is somewhat fast now

[00:51] <MasterDuke> but hm, any reason `my $a = 3; .say for ^$a { <...> }` couldn't be turned into `my int $counter = -1; while(++$counter < $a; <...>)`?

[00:52] <timotimo> +/- freezing $a in place

[00:52] <MasterDuke> ?

[00:53] <timotimo> well, it can only read $a once

[00:53] <timotimo> also, it can't just use int there

[00:53] <timotimo> unless $a is known to be native int

[00:53] <MasterDuke> ok, use Int if not native

[00:55] <MasterDuke> but $a gets read through every iteration of the while, right? hm, that could be different if $a is modified in the body

[00:55] <timotimo> right, the ^$a version will only read $a once, then $a is free to be modified without changing how the loop behaves

[00:56] <MasterDuke> well, you could just create a new variable to be checked against that just gets the value of $a initially

[00:56] <timotimo> that's what we should do

[01:02] <timotimo> m: say (200 * 200 * 500) / 2

[01:02] <camelia> rakudo-moar 070780e04: OUTPUT: «10000000␤»

[01:02] <timotimo> because i needed a good big round number at the end of the day

[01:02] <timotimo> the code doesn't look pretty now.

[01:30] *** fake_space_whale joined
[01:31] *** p6bannerbot sets mode: +v fake_space_whale

[01:39] *** huggable joined
[01:39] *** p6bannerbot sets mode: +v huggable

[01:58] *** fake_space_whale left
[02:24] *** klapperl left
[02:33] *** klapperl joined
[02:34] *** p6bannerbot sets mode: +v klapperl

[02:46] <japhb> timotimo: The trick is to do all the work to make it super fast, damn the consequences ... then given what you learned, see where you can optimize for readability again without losing too much speed.  You're already over 35x faster than when you started.  Can you get back to good looking code that is only, say, 30x faster?

[03:11] *** MasterDuke left
[03:14] *** MasterDuke joined
[03:14] *** p6bannerbot sets mode: +v MasterDuke

[03:14] *** MasterDuke left
[03:14] *** MasterDuke joined
[03:14] *** herbert.freenode.net sets mode: +v MasterDuke

[03:14] *** p6bannerbot sets mode: +v MasterDuke

[06:18] *** lizmat joined
[06:19] *** p6bannerbot sets mode: +v lizmat

[06:47] *** lizmat left
[06:47] <nine> japhb: the real trick is to do all the optimizations to make it super fast manually like timotimo and then teaching rakudo/MoarVM to do those automatically ;)

[07:04] *** domidumont joined
[07:05] *** p6bannerbot sets mode: +v domidumont

[07:46] *** klapperl_ joined
[07:47] *** p6bannerbot sets mode: +v klapperl_

[07:49] *** klapperl left
[08:22] *** MasterDuke left
[08:53] *** AlexDaniel joined
[08:53] *** p6bannerbot sets mode: +v AlexDaniel

[09:33] *** robertle joined
[09:34] *** p6bannerbot sets mode: +v robertle

[11:41] *** MasterDuke joined
[11:41] *** p6bannerbot sets mode: +v MasterDuke

[11:41] *** MasterDuke left
[11:41] *** MasterDuke joined
[11:41] *** herbert.freenode.net sets mode: +v MasterDuke

[11:41] *** p6bannerbot sets mode: +v MasterDuke

[13:35] *** avar joined
[13:35] *** avar left
[13:35] *** avar joined
[13:35] *** p6bannerbot sets mode: +v avar

[13:36] *** p6bannerbot sets mode: +v avar

[13:42] *** domidumont left
[13:46] *** diakopter left
[13:48] *** diakopter joined
[13:48] *** p6bannerbot sets mode: +v diakopter

[16:14] *** diakopter left
[17:03] *** diakopter joined
[17:03] *** p6bannerbot sets mode: +v diakopter

[17:46] *** domidumont joined
[17:47] *** p6bannerbot sets mode: +v domidumont

[18:01] <timotimo> you know ... and this is going to sound bad ... if chrome and firefox fail at the gigantic html files the profiler spits out because the json literal is either too long or nested too deep ...

[18:01] <timotimo> we could, like, tear it apart into pieces and structurally concatenate it later on

[18:05] <timotimo> ooh, sqlite actually has a json extension that might allow me to remove some JSON::Fast overhead in the profiler backend

[18:13] *** Kaiepi left
[18:14] *** Kaiepi joined
[18:15] *** p6bannerbot sets mode: +v Kaiepi

[18:31] *** diakopter left
[18:35] *** diakopter joined
[18:35] *** p6bannerbot sets mode: +v diakopter

[18:47] *** domidumont left
[18:57] *** Kaiepi left
[19:00] <japhb> nine: Granted.  But the thing I'm talking about is a good skill to have when making codebases (such as Rakudo and Moarvm, say) both clean and fast.  Because if the optimizations make the code totally unreadable, it gets progressively harder to add more of them.  :-)

[19:03] *** Kaiepi joined
[19:03] *** p6bannerbot sets mode: +v Kaiepi

[19:08] <nine> japhb: yes, of course :)

[20:04] *** zakharyas joined
[20:05] *** p6bannerbot sets mode: +v zakharyas

[20:06] <Geth> ¦ MoarVM/master: 7 commits pushed by (Stefan Seifert)++

[20:06] <Geth> ¦ MoarVM/master: 6edaac4403 | Add true_value and false_value to HLL config for future hllbool op

[20:06] <Geth> ¦ MoarVM/master: 954bdf88bc | New hllbool and hllboolfor ops

[20:06] <Geth> ¦ MoarVM/master: ee0004bfe1 | Teach spesh to replace hllbool by the result for known values

[20:06] <Geth> ¦ MoarVM/master: 7c5740fbf9 | Teach spesh to replace hllboolfor by the result for known values

[20:06] <Geth> ¦ MoarVM/master: 756a97d193 | JIT compile hllbool

[20:06] <Geth> ¦ MoarVM/master: c1c2b7e37f | JIT compile hllboolfor

[20:06] <Geth> ¦ MoarVM/master: ef4743315d | Teach the lego JIT to compile hllbool, too

[20:06] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/477ec445f84c...ef4743315dc9

[20:22] <timotimo> ooh, we have hllbool now?

[20:39] <Kaiepi> what does hll do?

[21:29] *** user___ joined
[21:30] *** diakopter left
[21:30] *** user___ left
[21:32] *** user___ joined
[21:32] *** user___ left
[21:33] *** diakopter joined
[21:33] *** p6bannerbot sets mode: +v diakopter

[21:35] *** zakharyas left
[22:11] <timotimo> HLLs are a way for us to differentiate code that was compiled by the nqp compiler and code that was compiled by the rakudo compiler; both have different semantics, but more importantly different types for many things

[22:54] <masak> the term "HLL" seems to be borrowed from Parrot

[23:16] <geekosaur> "high(er) level language" isn't that uncommon a term

[23:19] <timotimo> yes, but having individual settings for supporting different ones at the same time in a VM is a bit less common :)

[23:43] *** fake_space_whale joined
[23:44] *** p6bannerbot sets mode: +v fake_space_whale

[23:47] *** Kaiepi left
