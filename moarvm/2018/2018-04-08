[00:26] *** AlexDaniel joined
[00:38] *** MasterDuke joined
[01:58] *** ilbot3 joined
[02:00] *** FROGGS joined
[05:51] *** lizmat joined
[06:49] *** domidumont joined
[06:57] *** domidumont joined
[07:01] *** ingy joined
[07:44] *** AlexDaniel joined
[08:27] *** FROGGS joined
[08:27] <FROGGS> o/

[08:30] *** Zoffix joined
[10:44] *** Zoffix left
[10:53] *** domidumont joined
[11:33] *** FROGGS joined
[11:44] *** AlexDani` joined
[12:08] *** lizmat joined
[12:15] *** FROGGS|m joined
[12:21] *** FROGGS|m2 joined
[14:23] *** zakharyas joined
[14:44] *** zakharyas joined
[15:10] *** zakharyas joined
[16:00] <FROGGS> something is fishy about my inlined-shaped-carray patch...

[16:01] <dogbert17> uh oh

[16:01] <dogbert17> in fact, lots of problems seems to have decided to make an appearance this weekend

[16:01] <dogbert17> .seen timotimo

[16:01] <yoleaux> I saw timotimo 16:00Z in #perl6: <timotimo> this also has alpine linux apks

[16:01] <timotimo> o/

[16:01] <dogbert17> o/

[16:02] <timotimo> o/

[16:02] <dogbert17> time for a question

[16:02] <dogbert17> did you see nwc10's error report the other day?

[16:02] <dogbert17> http://paste.scsys.co.uk/576714

[16:03] <timotimo> i saw nwc10 the other day

[16:03] <dogbert17> cool

[16:04] <dogbert17> there's something fishy going on in his example

[16:05] <dogbert17> timotimo: the valgrind output is a tiny bit more revealing: https://gist.github.com/dogbert17/8cfbb94b35929a8ce1d957f0fdd96cbb

[16:05] <FROGGS> is segfaults in nqp::decont... there is an object where its STABLE(obj) is an illegal memory access

[16:05] <timotimo> FROGGS: can you try disabling spesh for a moment?

[16:06] <FROGGS> timotimo: very much the same

[16:07] <timotimo> OK

[16:07] <timotimo> do you have a c-level backtrace?

[16:10] <FROGGS> timotimo: https://gist.github.com/FROGGS/e935f16baece9e2258ba1ab5bf83be2a

[16:10] <FROGGS> that's all I have

[16:11] <FROGGS> I'm calling a method on a instantiated CPPStruct

[16:23] <dogbert17> any c experts around ?

[16:27] <dogbert17> I get the feeling that there's something wrong in the FSA_SIZE_DEBUG block here compared to the path taken if FSA_SIZE_DEBUG=0

[16:27] <dogbert17> i.e. here: https://github.com/MoarVM/MoarVM/blob/master/src/core/fixedsizealloc.c#L232

[16:29] <dogbert17> if FSA_SIZE_DEBUG=1 the code crashes but if I 'remove' rows 232:238 and 250 then everything works and valgrind is happy

[16:33] <dogbert17> the code I'm running is this https://gist.github.com/dogbert17/8cfbb94b35929a8ce1d957f0fdd96cbb

[16:47] *** domidumont joined
[16:48] *** live_the_dream joined
[16:54] *** domidumont joined
[16:58] *** lizmat_ joined
[17:05] *** lizmat joined
[17:09] *** zakharyas joined
[17:34] <Geth> ¦ MoarVM: a206cd8cd2 | (Timo Paulssen)++ | 2 files

[17:34] <Geth> ¦ MoarVM: jit floor_n

[17:34] <Geth> ¦ MoarVM:

[17:34] <Geth> ¦ MoarVM: not sure if round mode 9 is actually correct. The

[17:34] <Geth> ¦ MoarVM: compiler explorer claims that's what gcc gives for

[17:34] <Geth> ¦ MoarVM: `(double) round(foo)`. I only see values 0 through 3

[17:34] <Geth> ¦ MoarVM: explained on the 'net.

[17:34] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a206cd8cd2

[17:36] *** domidumont joined
[17:39] *** domidumont joined
[17:42] <nine> dogbert17: I wonder if the "+ sizeof(MVMuint64)" is actually necessary. I would guess that p actually points at MVMFixedSizeAllocDebug's "memory" attribute already, since that's what the alloc functions return.

[17:42] <nine> dogbert17: you could try just removing that and see if anything breaks and if it silences valgrind

[17:43] <nine> dogbert17: talking about https://github.com/MoarVM/MoarVM/blob/master/src/core/fixedsizealloc.c#L234

[17:47] <dogbert17> nine: I'll give it a go, thx for looking

[17:54] <dogbert17> nine: now it looks like this: https://gist.github.com/dogbert17/bf57ededfa513a7baf4e6f5f55191bdd

[18:00] *** domidumont1 joined
[18:59] *** zakharyas joined
[18:59] <nine> dogbert17: that...looks the same as before

[19:01] <dogbert17> except at the end

[19:02] <dogbert17> MoarVM panic: Spesh arg guard: unimplemented sparse guard case

[19:02] <dogbert17> nine: can you see if anything else among those few lines of code looks fishy?

[19:11] <dogbert17> memcpy(dbg->memory, (char *)p + sizeof(MVMuint64), new_bytes > old_bytes ? old_bytes : new_bytes);

[19:12] <dogbert17> does dbg->memory really give us what we want? (my C fu is probably not up to snuff but I'll ask anyway :)

[19:25] *** lizmat_ joined
[19:44] <nine> dogbert17: oh, that should probably be &(dbg->memory), since that is not really a pointer at all but just a placeholder

[19:52] <nine> yes, that looks much better

[19:57] <Geth> ¦ MoarVM: cfa1f2a1e7 | (Stefan Seifert)++ | src/core/fixedsizealloc.c

[19:57] <Geth> ¦ MoarVM: Fix memory corruption when running with FSA_SIZE_DEBUG set

[19:57] <Geth> ¦ MoarVM:

[19:57] <Geth> ¦ MoarVM: dbg->memory is not a real pointer, it's just the placeholder for the actual

[19:57] <Geth> ¦ MoarVM: memory area (that's preceeded by the allocated size). Also we don't have to

[19:57] <Geth> ¦ MoarVM: offset (char *) by the size field as the allocator will already return the

[19:57] <Geth> ¦ MoarVM: pointer to ->memory, so *p is already the start of the actual data.

[19:57] <Geth> ¦ MoarVM:

[19:57] <Geth> ¦ MoarVM: Thanks to dogbert17++ for pointing this out!

[19:57] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cfa1f2a1e7

[19:58] *** Kaiepi joined
[20:06] <FROGGS> huh, my code works if I comment out this block: https://github.com/rakudo/rakudo/blob/master/lib/NativeCall.pm6#L302-L314

[20:27] *** domidumont joined
[21:29] <jnthn> Suspect https://github.com/MoarVM/MoarVM/issues/838 may be JIT-related

[21:32] <lizmat> wonder if https://www.abubalay.com/blog/2018/04/08/recursive-ascent could have a comment in Perl 6

[21:46] <jnthn> timotimo: About https://github.com/MoarVM/MoarVM/commit/a206cd8cd2 I think maybe https://www.felixcloutier.com/x86/ROUNDSD.html explains the 9 (it seems that it's a bit field)

[21:46] <jnthn> timotimo: I'm wondering if https://github.com/MoarVM/MoarVM/issues/838 is due to this change

[21:47] <timotimo> search for "roundsd sigill"

[21:48] <timotimo> google finds "Game of Thrones - Round Sigil Herren T-Shirt - Schwarz - Größe XX ..."

[21:48] <timotimo> "glibc tries to use roundsd which is SSE4.1,"

[21:48] <timotimo> well, damn

[21:48] <timotimo> that's definitely not on every machine

[21:49] <jnthn> ah

[21:49] <lizmat> ah, no, conditional jitting depending on hardware :-

[21:49] <lizmat> (

[21:49] <timotimo> yup

[21:50] * dogbert17 is unable to repro https://github.com/MoarVM/MoarVM/issues/838

[21:51] <lizmat> probably because you have the right hardware

[21:51] <jnthn> Or the wrong hardware :P

[21:51] <dogbert17> AMD hardware

[21:51] <jnthn> Asked the reporter if they could try with that commit reverted

[21:51] <timotimo> it's very likely the commit is bad

[21:51] <jnthn> Then we'll probably be pretty sure

[21:51] <jnthn> But it seems to fit

[21:52] <timotimo> if it fits, i sits

[21:52] <timotimo> hah

[21:52] <timotimo> this compiler implements floor as:

[21:52] <timotimo> jmp     floor                   # TAILCALL

[21:54] <timotimo> i can implement it like that, too

[21:55] <jnthn> https://github.com/MoarVM/MoarVM/issues/838#issuecomment-379585747

[21:55] <jnthn> Seems older CPU, so it all fits

[21:56] <jnthn> No sse4_1 in the flags

[21:56] <jnthn> (Which I have in mine, and it works for me)

[21:56] <timotimo> now the build system is upset with me

[21:57] <timotimo> at some point we'll want to cpuid, that's also not trivial from a very cursory google search

[21:57] <timotimo> ok, called Configure.pl and everything worked

[21:58] <MasterDuke> aren't there some newish libraries for detecting hardware capabilities?

[21:58] <MasterDuke> i thought i some some blog post about glibc or the clear linux team using one

[22:00] <Geth> ¦ MoarVM: 4234ab56bf | (Timo Paulssen)++ | 2 files

[22:00] <Geth> ¦ MoarVM: throw out problematic impl of floor_n in jit

[22:00] <Geth> ¦ MoarVM:

[22:00] <Geth> ¦ MoarVM: turns out the opcode i found requires at least

[22:00] <Geth> ¦ MoarVM: sse 4.1, which we shouldn't require from our users

[22:00] <Geth> ¦ MoarVM:

[22:00] <Geth> ¦ MoarVM: Fixes #838

[22:00] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4234ab56bf

[22:01] <lizmat> I guess on newer hardware that floor would use the sse4 opcode anyway

[22:01] <jnthn> True, though it'd be nice to save the function call overhead in the future :)

[22:01] <timotimo> probably, yeah, but a function call has a little bit of overhead

[22:01] <timotimo> %)

[22:02] <lizmat> so it's the sse4.1 that needs to be detected

[22:02] <timotimo> aye

[22:02] <lizmat> and then c hanged into a compiler flag

[22:02] <timotimo> i mean, at some point we'll want to do stuff like ">>.floor packs bunches of doubles into sse registers and does multiple at a time" with our jit as well

[22:03] <timotimo> no, i'd prefer a run time check

[22:03] <jnthn> It'd want to be runtime, I think

[22:03] <lizmat> ok

[22:03] <jnthn> Since distros don't package per CPU at *that* granulairty I guess

[22:03] <lizmat> well, it's past my bedtime...  good night!

[22:03] <jnthn> o/

[22:04] <samcv> timotimo: can we just use glibc's implementation?

[22:04] <timotimo> so, when i was at the linuxtag 2004 i remember Arch being advertised as "the distro that sets i686 as the baseline"

[22:04] <timotimo> samcv: we are doing that now

[22:04] <samcv> ah ok

[22:05] <timotimo> well, whatever libc moar is linked to, of course

[22:05] <timotimo> shouldn't be much difference for something simple like floor (famous last words)

[22:08] <dogbert17> jnthn: [Tux] found a SEGV in his CSV test suite

[22:10] <jnthn> dogbert17: Did you manage to repro or get any further info?

[22:10] <dogbert17> yep, https://github.com/rakudo/rakudo/issues/1689

[22:15] *** travis-ci joined
[22:15] <travis-ci> MoarVM build failed. Timo Paulssen 'throw out problematic impl of floor_n in jit

[22:15] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/363886839 https://github.com/MoarVM/MoarVM/compare/cfa1f2a1e712...4234ab56bf7d

[22:15] *** travis-ci left
[22:16] <timotimo> well, that didn't last

[22:17] <timotimo> Unhandled exception: Probable version skew in pre-compiled 'gen/moar/stage2/QASTNode.nqp' (cause: no object at index 140537950791616)

[22:17] <timotimo> make: *** [NQPP5QRegex.moarvm] Error 1

[22:18] <timotimo> i'll just pretend it never happened and restart

[22:18] <dogbert17> didn't samcv have the same problem?
