[00:26] *** SourceBaby joined
[01:57] *** ilbot3 joined
[03:06] *** Kaiepi joined
[05:24] *** domidumont joined
[05:31] *** domidumont joined
[06:13] <Geth> ¦ MoarVM: b9874fa94b | (Samantha McVey)++ | src/io/signals.c

[06:13] <Geth> ¦ MoarVM: Add parens to a #define to silence compiler warnings

[06:13] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b9874fa94b

[06:15] <Geth> ¦ MoarVM: 3f5b9bc891 | (Samantha McVey)++ | src/strings/ops.c

[06:15] <Geth> ¦ MoarVM: Speed up string cmp by 3-5x by using grapheme iterator

[06:16] <Geth> ¦ MoarVM:

[06:16] <Geth> ¦ MoarVM: Use a grapheme iterator instead of MVM_string_get_grapheme_at_nocheck.

[06:16] <Geth> ¦ MoarVM: Speeds up cmp for strands by 5x and flat strings by 3x.

[06:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3f5b9bc891

[06:20] <timotimo> holy crap, that's awesome!

[06:21] <samcv> not sure how much it affects speed since i'd think most time it stops pretty soon. but. i also may be making it even faster than that

[06:21] <samcv> for flat strings

[06:24] <samcv> should make it 3x faster for flat strings compared to the already 3x improvement before

[06:29] *** travis-ci joined
[06:29] <travis-ci> MoarVM build failed. Samantha McVey 'Add parens to a #define to silence compiler warnings'

[06:29] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/361983731 https://github.com/MoarVM/MoarVM/compare/95014f524b58...b9874fa94bc8

[06:29] *** travis-ci left
[06:30] <timotimo> is your measurement for comparing two equal strings? does it change much for strings that differ on the first grapheme?

[06:31] <samcv> two strings equal except the last

[06:31] <samcv> uh first grapheme difference is unchanged basically

[06:31] <samcv> or at least unmeasurable

[06:32] <samcv> since it does the same thing practically, doing getgraphemenocheck compared to initializing the grapheme iterator then grabbing from it

[06:32] <samcv> but after the first grapheme then you get the reduced overhead from not having to find your place in the string again

[06:34] <timotimo> mhh, right

[06:35] <timotimo> i'm definitely glad about the speedup \o/

[06:35] *** travis-ci joined
[06:35] <travis-ci> MoarVM build failed. Samantha McVey 'Add parens to a #define to silence compiler warnings'

[06:35] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/361983731 https://github.com/MoarVM/MoarVM/compare/95014f524b58...b9874fa94bc8

[06:35] *** travis-ci left
[06:36] <timotimo> waitwhat?

[06:36] <timotimo> it says failed but when i click the link all builds are green except for one that hasn't started yet?

[06:36] <samcv> i restarting one of them

[06:36] <samcv> not sure why it failed

[06:36] <timotimo> ah, ok

[06:36] <samcv> well i restarted one. then it passed and i restarted another that i forgot to restart

[06:41] <timotimo> i'll head over to breakfast now o/

[06:42] <samcv> o/

[06:53] *** robertle joined
[06:57] *** domidumont joined
[07:23] <Geth> ¦ MoarVM: bcc32a2a50 | (Samantha McVey)++ | src/strings/ops.c

[07:23] <Geth> ¦ MoarVM: Speed up string cmp another 2-3x when both strings are flat

[07:23] <Geth> ¦ MoarVM:

[07:23] <Geth> ¦ MoarVM: If both strings are flat we can iterate until we find the first grapheme

[07:23] <Geth> ¦ MoarVM: which is different between them, then use the GraphemeIter from there.

[07:23] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bcc32a2a50

[08:00] *** lizmat joined
[08:16] *** zakharyas joined
[08:17] <Geth> ¦ MoarVM: 19004b0ddd | (Timo Paulssen)++ | src/spesh/inline.c

[08:17] <Geth> ¦ MoarVM: fix wrong pointer type

[08:17] <Geth> ¦ MoarVM:

[08:17] <Geth> ¦ MoarVM: harmless, but it rightfully warns

[08:17] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/19004b0ddd

[08:20] *** zakharyas joined
[08:22] *** zakharyas joined
[08:26] *** zakharyas joined
[08:33] *** zakharyas joined
[08:48] *** zakharyas joined
[09:05] *** robertle joined
[09:08] *** zakharyas joined
[09:12] *** lizmat joined
[09:42] *** zakharyas joined
[09:50] <Geth> ¦ MoarVM: 9730ff98a9 | (Timo Paulssen)++ | 3 files

[09:50] <Geth> ¦ MoarVM: jit continuationinvoke

[09:50] <Geth> ¦ MoarVM:

[09:50] <Geth> ¦ MoarVM: ThreadPoolScheduler's do-await is a tiny method that

[09:50] <Geth> ¦ MoarVM: pushes tiny tasks with continuationinvoke into the queue.

[09:50] <Geth> ¦ MoarVM: Those can now be jitted.

[09:50] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9730ff98a9

[09:51] <timotimo> laptop battery empty m)

[10:03] *** zakharyas joined
[10:07] *** Kaypie joined
[10:08] *** zakharyas joined
[10:09] *** harrow` joined
[10:10] <nwc10> much ASAN excitement in NQP build: http://paste.scsys.co.uk/576663

[10:10] <nwc10> may not have time (or battery) to dig this further and give you more detail

[10:10] *** avarab joined
[10:11] <nwc10> #0 0x7fc221085aae in MVM_string_compare src/strings/ops.c:2323

[10:11] *** Util_ joined
[10:11] <nwc10> 0x602000044892 is located 0 bytes to the right of 2-byte region [0x602000044890,0x602000044892)

[10:12] <lizmat> looks like samcv++ had a hand in that

[10:20] *** timotimo joined
[10:22] *** ingy joined
[10:39] *** lizmat joined
[10:39] <timotimo> i'd really like something in the jit graph that lets us put reprid checks and optionally concreteness checks and generate that directly into the assembly

[10:40] <timotimo> so we don't have to move these checks into the functions that were usually called by the interp.c that did the checks

[10:40] <timotimo> invoking the brrt :) :)

[10:42] <jnthn> I'd actually like something more declarative with regard to such checks

[10:43] <timotimo> ah, something in oplist that update_ops would write out?

[10:43] <jnthn> Yeah

[10:44] <timotimo> since i have to procrastinate my lightning talk, maybe i'll implement that right quick

[10:44] <jnthn> At the moemnt we have some ops checking and some functions checking

[10:44] <timotimo> aye, it's a mess

[10:44] <jnthn> and it'd be good to regularize it

[10:44] <jnthn> Well, the history is

[10:44] <jnthn> The checks were put into the interp originally.

[10:44] <jnthn> Because we wanted to lift them out if possible

[10:44] <jnthn> But...that made JITting hard

[10:44] <jnthn> So they moved

[10:44] <jnthn> Into the target functions

[10:45] <jnthn> What I'd actually like is every function to exist as a checked and unchecked form

[10:45] <jnthn> Perhaps with the checked forms generated

[11:04] *** bloatable6 joined
[11:04] *** quotable6 joined
[11:04] *** bisectable6 joined
[11:04] *** undersightable6 joined
[11:11] <nwc10> .tell samcv bcc32a2a5024c0f1b4620db0cc5228cc3d0c43cc is the first bad commit -- http://paste.scsys.co.uk/576663

[11:12] <timotimo> https://gist.github.com/timo/6f3513c8b3b5889c8dd0cb7e508017e0

[11:13] <nwc10> use more 'bots';

[11:15] <timotimo> looks like we have just a single op that wants more than one check

[11:42] *** scovit joined
[12:05] *** yoleaux joined
[12:18] *** lizmat joined
[12:54] *** zakharyas joined
[12:54] <timotimo> not quite sure if the "required concrete" should go in the oplist or as a :foo at the end

[13:02] <dogbert2> libuv 1.20 is out, https://github.com/libuv/libuv/blob/v1.x/ChangeLog

[13:04] *** zakharyas joined
[13:07] *** zakharyas joined
[13:39] *** Kaiepi joined
[13:44] *** lizmat joined
[13:48] *** committable6 joined
[13:55] *** Kaiepi joined
[14:13] <timotimo> i wonder if brrt would be mad about nested MVMJitNodes...

[14:40] <timotimo> aha! i don't need to nest it!

[14:44] *** AlexDaniel joined
[14:47] *** dogbert17 joined
[15:02] *** zakharyas joined
[15:08] *** zakharyas joined
[15:46] *** releasable6 joined
[16:07] *** zakharyas joined
[16:11] *** evalable6 joined
[16:11] *** coverable6 joined
[16:14] *** buggable joined
[16:15] *** ZofBot joined
[16:20] *** zakharyas joined
[16:40] *** AlexDani` joined
[16:54] *** robertle joined
[16:58] *** domidumont joined
[17:06] <nwc10> .tell samcv bcc32a2a5024c0f1b4620db0cc5228cc3d0c43cc is the first bad commit -- http://paste.scsys.co.uk/576663

[17:06] <yoleaux> nwc10: I'll pass your message to samcv.

[17:14] *** zakharyas joined
[17:35] <samcv> nwc10: thanks. just waking up right now but will get to it shortly

[17:35] <yoleaux> 17:06Z <nwc10> samcv: bcc32a2a5024c0f1b4620db0cc5228cc3d0c43cc is the first bad commit -- http://paste.scsys.co.uk/576663

[17:36] <nwc10> "good morning" :-)

[17:39] <Geth> ¦ MoarVM/declarative_op_checks: a516da2917 | (Timo Paulssen)++ | 3 files

[17:39] <Geth> ¦ MoarVM/declarative_op_checks: WIP on making concreteness / REPRid checks declarative

[17:39] <Geth> ¦ MoarVM/declarative_op_checks:

[17:39] <Geth> ¦ MoarVM/declarative_op_checks: With support for this in the jit, we can more easily pull

[17:39] <Geth> ¦ MoarVM/declarative_op_checks: concreteness and reprid checks back out of functions that

[17:39] <Geth> ¦ MoarVM/declarative_op_checks: once got the checks put into them so they could more easily

[17:39] <Geth> ¦ MoarVM/declarative_op_checks: get jitted.

[17:39] <Geth> ¦ MoarVM/declarative_op_checks: review: https://github.com/MoarVM/MoarVM/commit/a516da2917

[17:41] <timotimo> ^- this is still missing parts to parse the oplist changes and the jit does nothing with the information yet

[17:44] <samcv> oh /facepalm

[17:44] <samcv> while (a_blob8[i] == b_blob8[i] && i < scanlen) # should be while (i < scanlen && a_blob8[i] == b_blob8[i])

[17:44] <samcv> heh

[17:47] <timotimo> well, that's easy to solve, then! :D

[17:57] <samcv> i've been thinking of adding ops that will force a string into 8bit or 32 bit formats for testing

[18:09] <japhb> samcv: That seems rather useful, yes.  I guess it depends on whether MoarVM already has a standard for such things.  Closest I can think of is force_gc.

[18:14] <Geth> ¦ MoarVM: 02dd49053b | (Samantha McVey)++ | src/strings/ops.c

[18:14] <Geth> ¦ MoarVM: Fix scanning loop in string cmp ASAN errors

[18:14] <Geth> ¦ MoarVM:

[18:14] <Geth> ¦ MoarVM: We were checking the array before the bounds check which was causing an

[18:14] <Geth> ¦ MoarVM: access one after the shortest string's array.

[18:14] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/02dd49053b

[18:23] <samcv> also maybe we should have an asan build on TravisCI

[18:27] *** Zoffix joined
[18:28] <Zoffix> What's the equivalent to `die "some message"` in MoarVM? Like if some numeric operation fails, I just wanna throw a generic error

[18:29] <Zoffix> MVM_exception_throw_adhoc looks like

[18:33] *** FROGGS joined
[18:41] <samcv> ^ yep

[18:41] <Zoffix> thanks

[19:18] *** zakharyas joined
[19:25] *** zakharyas joined
[19:34] *** Kaiepi joined
[20:12] *** zakharyas joined
[20:23] *** MasterDuke joined
[20:43] <Geth> ¦ MoarVM/fix-div_In-drift: 58297946d0 | (Zoffix Znet)++ | src/math/bigintops.c

[20:43] <Geth> ¦ MoarVM/fix-div_In-drift: Stash fix for nqp::div_In drift

[20:43] <Geth> ¦ MoarVM/fix-div_In-drift:

[20:43] <Geth> ¦ MoarVM/fix-div_In-drift: Fixes https://github.com/rakudo/rakudo/issues/1651 but breaks denormals.

[20:43] <Geth> ¦ MoarVM/fix-div_In-drift:

[20:43] <Geth> ¦ MoarVM/fix-div_In-drift: Also makes nqp::div_In 12.8x slower.

[20:43] <Geth> ¦ MoarVM/fix-div_In-drift: review: https://github.com/MoarVM/MoarVM/commit/58297946d0

[21:37] <Geth> ¦ MoarVM/fix_num_drift2: a4c7dbf6f7 | (Zoffix Znet)++ | src/math/bigintops.c

[21:37] <Geth> ¦ MoarVM/fix_num_drift2: Stash further div_In fix

[21:37] <Geth> ¦ MoarVM/fix_num_drift2:

[21:37] <Geth> ¦ MoarVM/fix_num_drift2: Fixes drift and denormals but has weird results in mid-range

[21:37] <Geth> ¦ MoarVM/fix_num_drift2: negative powers :/

[21:37] <Geth> ¦ MoarVM/fix_num_drift2: review: https://github.com/MoarVM/MoarVM/commit/a4c7dbf6f7

[21:39] <japhb> .oO( Fixes rift in space but now everyone is blue.  I'm pretty sure they're not all supposed to be blue. )

[21:39] *** Zoffix left
[22:16] *** lizmat joined
[22:34] <Geth> ¦ MoarVM: b735866dde | (Zoffix Znet)++ | src/math/bigintops.c

[22:34] <Geth> ¦ MoarVM: Fix drift in Num->Str roundtrip; Make nqp::div_In 14x slower

[22:34] <Geth> ¦ MoarVM:

[22:34] <Geth> ¦ MoarVM: Fixes R#1651 https://github.com/rakudo/rakudo/issues/1651

[22:34] <Geth> ¦ MoarVM:

[22:34] <Geth> ¦ MoarVM: The original code converted bigints to doubles right away, before dividing them,

[22:34] <Geth> ¦ MoarVM: which caused some precision loss that was responsible for repeated Num->Str

[22:34] <synopsebot> R#1651 [open]: https://github.com/rakudo/rakudo/issues/1651 [math] Drift in Str -> Num -> Str conversion

[22:34] <Geth> ¦ MoarVM: conversion to drift the value.

[22:34] <Geth> ¦ MoarVM: <…commit message has 13 more lines…>

[22:34] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b735866dde

[22:45] <nwc10> samcv: ASAN is happy. (Or at least, no longer excited)

[22:58] *** Kaiepi joined
