[00:47] *** MasterDuke joined
[00:47] *** p6bannerbot sets mode: +v MasterDuke

[00:47] *** MasterDuke left
[00:47] *** MasterDuke joined
[00:47] *** herbert.freenode.net sets mode: +v MasterDuke

[00:47] *** p6bannerbot sets mode: +v MasterDuke

[01:24] *** lucasb left
[01:56] *** lizmat left
[04:13] *** MasterDuke left
[07:11] *** AlexDaniel left
[08:21] *** domidumont joined
[08:22] *** p6bannerbot sets mode: +v domidumont

[08:28] *** lizmat joined
[08:28] *** p6bannerbot sets mode: +v lizmat

[09:58] *** domidumont left
[10:01] *** domidumont joined
[10:01] *** p6bannerbot sets mode: +v domidumont

[10:15] <Geth> ¦ MoarVM: lizmat assigned to niner Issue Negative indexes with end of buffer semantics https://github.com/MoarVM/MoarVM/issues/1024

[10:15] <lizmat> again hopes that nine doesn't mind

[10:41] *** robertle joined
[10:42] *** p6bannerbot sets mode: +v robertle

[11:22] *** lucasb joined
[11:22] *** p6bannerbot sets mode: +v lucasb

[13:17] *** brrt joined
[13:18] *** p6bannerbot sets mode: +v brrt

[13:18] <brrt> \o

[13:32] <brrt> I may be easily impressed, but rust-lang.org looks a bit better these days

[13:40] <brrt> we need a bunch of operators for floating points

[13:41] <lizmat> brrt: such as ?

[13:41] <lizmat> fwiw, I would look at vm ops for rationals earlier  :-)

[13:42] <mornfall> (floats are eww but unavoidable, sadly)

[13:52] <brrt> oh, I mean, I need a bunch of floating point operators for the expression JIT :-)

[13:53] <brrt> small-rational opcodes don't seem like *such* a bad idea, but it should be possible to get equivalent performance with good JITting

[13:55] <brrt> from my perspective, I'd rather have as few as possible ops

[13:58] <jnthn> I've pondered VM ops for rationals, but decided against. Better make the effort on EA and eliminating the allocations etc. that makes their HLL impl costly.

[13:59] <jnthn> Which'll also make Int math faster along the way.

[14:00] <jnthn> And yeah, I'd like less ops too. We've been growing a range of invoke ops (invoke normal, invoke native, invoke spesh plugin), and we could replace numerous of our ops today with an "invoke vmcall" or some such (which would just be the VM equivalent of a syscall).

[14:00] <jnthn> All the I/O for example

[14:01] <jnthn> That'd let us regularize the argument checking and then eliminate a bunch of it

[14:10] <brrt> +1

[14:11] <brrt> I like that idea

[14:12] <brrt> One thing I think that maybe interesting

[14:12] <brrt> a local dynamic allocation op

[14:14] <brrt> if the HLL can prove that an allocation doesn't escape, then we can have it destroyed at the point of leaving, and put any allocation pressure on the GC

[14:14] <jnthn> Yeah, but we then also have to prove that :)

[14:14] <jnthn> For memory safety

[14:14] <brrt> Hmmm

[14:14] <jnthn> Which is the same work EA would have to do

[14:15] <brrt> Well, this adds some flexibility, in that you don't have to know ahead of time how much you allocate?

[14:46] *** brrt left
[14:58] <Geth> ¦ MoarVM: fa3411007d | (Stefan Seifert)++ | src/6model/reprs/VMArray.c

[14:58] <Geth> ¦ MoarVM: Remove wraparound handling of negative offsets in (read|write)_buf

[14:58] <Geth> ¦ MoarVM:

[14:58] <Geth> ¦ MoarVM: Treating negative offsets as counting from the end of the array was meant to

[14:58] <Geth> ¦ MoarVM: provide consistency with other array ops. Turns out however that the right

[14:58] <Geth> ¦ MoarVM: course of action may be to remove this magic from other ops, too. The magic

[14:58] <Geth> ¦ MoarVM: does not reflect the semantics, Perl 6 actually needs.

[14:58] <Geth> ¦ MoarVM: Fixes GH #1024

[14:58] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/fa3411007d

[14:58] <nine> lizmat: ^^^

[14:58] <yoleaux> 09:20Z <lizmat> nine: looks like NQP 3fe17a683 suddenly gave end-of-buffer semantics to negative indexes on read-intX, was that intentional?  If so, I guess I need to move the test for negative indices to the setting

[14:59] * lizmat starts bumping and reverting

[15:00] * nine just pushed the revert

[15:44] *** patrickb joined
[15:45] *** p6bannerbot sets mode: +v patrickb

[16:02] *** AlexDaniel joined
[16:02] *** p6bannerbot sets mode: +v AlexDaniel

[16:53] *** patrickz joined
[16:54] *** p6bannerbot sets mode: +v patrickz

[16:56] *** patrickb left
[17:06] *** AlexDaniel left
[18:07] * lizmat has bad news for nine

[18:16] <lucasb> /o\

[18:16] * lizmat had to reopen https://github.com/MoarVM/MoarVM/issues/1022

[18:29] *** AlexDaniel joined
[18:29] *** p6bannerbot sets mode: +v AlexDaniel

[18:49] *** domidumont left
[19:01] *** patrickz left
[19:07] *** zakharyas joined
[19:08] *** p6bannerbot sets mode: +v zakharyas

[20:49] *** lizmat left
[20:58] *** lizmat joined
[20:58] *** p6bannerbot sets mode: +v lizmat

[21:03] *** lizmat left
[21:42] <nine> Ah, yes. writeint needs the same treatment as readint

[21:42] <nine> Will do that tomorrow

[22:39] *** shareable6 left
[22:39] *** evalable6 left
[22:39] *** committable6 left
[22:39] *** bisectable6 left
[22:39] *** greppable6 left
[22:39] *** quotable6 left
[22:39] *** committable6 joined
[22:40] *** shareable6 joined
[22:40] *** p6bannerbot sets mode: +v committable6

[22:40] *** p6bannerbot sets mode: +v shareable6

[22:41] *** evalable6 joined
[22:41] *** bisectable6 joined
[22:42] *** p6bannerbot sets mode: +v evalable6

[22:42] *** p6bannerbot sets mode: +v bisectable6

[22:42] *** quotable6 joined
[22:43] *** p6bannerbot sets mode: +v quotable6

[22:43] *** greppable6 joined
[22:44] *** p6bannerbot sets mode: +v greppable6

[22:51] *** AlexDani` joined
[22:52] *** p6bannerbot sets mode: +v AlexDani`

[22:52] *** AlexDaniel left
[22:53] *** AlexDani` is now known as AlexDaniel

[23:22] *** lucasb left
[23:27] *** zakharyas left
