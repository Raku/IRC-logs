[01:56] *** ilbot3 joined
[03:57] *** AlexDaniel joined
[05:50] *** live_the_dream joined
[05:50] *** releasable6 joined
[05:51] *** committable6 joined
[05:52] *** undersightable6 joined
[06:50] *** domidumont joined
[06:56] *** domidumont joined
[07:28] *** AlexDaniel joined
[07:39] <samcv> why do i have all these .opt.yaml files? i am not seeing it on another platform. at least freebsd. though idk if it is something that we don't use anymore?

[07:39] <samcv> but i have a ton of them on my dev machine

[08:12] *** zakharyas joined
[08:17] *** zakharyas joined
[08:22] <lizmat> m: use nqp; say nqp::istype(Mu:D, Mu:D)   # is that to be expected, or a bug ?

[08:22] <camelia> rakudo-moar 6e37c7f04: OUTPUT: «0␤»

[08:22] <lizmat> m: use nqp; say nqp::istype(Mu:D, Mu)   # seems ok

[08:22] <camelia> rakudo-moar 6e37c7f04: OUTPUT: «1␤»

[08:45] <samcv> anyone know why the appveyor builds don't run nqp test?

[08:45] <samcv> pretty sure that's why it's disabled. unless my changes caused it.

[09:45] <timotimo> lizmat: Mu:D isn't definite, so it doesn't pass the definiteness check that Mu:D imposes on it

[09:46] <timotimo> m: use nqp; subset Even of Int where * %% 2; nqp::istype(Even, Even)

[09:46] <camelia> rakudo-moar 6e37c7f04: ( no output )

[09:46] <timotimo> m: use nqp; subset Even of Int where * %% 2; say nqp::istype(Even, Even)

[09:46] <camelia> rakudo-moar 6e37c7f04: OUTPUT: «1␤»

[09:46] <timotimo> oh?

[09:46] <timotimo> i guess in this case we assume something that is even already passed the check once?

[10:26] <lizmat> m: use nqp; say nqp::istype(Int:D, Int:D)   # should this be one then?

[10:26] <camelia> rakudo-moar 6e37c7f04: OUTPUT: «0␤»

[10:27] <lizmat> ah, I think I understand what you're saying

[10:27] <lizmat> it can never pass the :D as a target because the source is a type object

[10:28] <lizmat> hmmmm

[11:05] *** dogbert17 joined
[11:18] *** Zoffix joined
[11:19] <Zoffix> Any tips for what this means/how to debug/fix it? "moar: src/gc/collect.c:218: process_worklist: Assertion `*item_ptr != item->sc_forward_u.forwarder' failed."

[11:19] <Zoffix> The same code first failed with "Bus error" before that error turned up

[11:21] <Zoffix> ZofBot: bus error? But I drive a Chevy Cavalier!

[11:21] <ZofBot> Zoffix, list? pmurias: it does show up in a simple test: perl6 --ll-exception -e 'class Foo { method BUILD() { die } }

[11:26] <Zoffix> Hm, it's garbage collection stuff. I think it's time for me to give up. I've not read the book yet

[11:27] <AlexDaniel> Zoffix: how did you get this?

[11:30] <Zoffix> AlexDaniel: https://github.com/rakudo/rakudo/issues/1709#issuecomment-380066336

[11:31] <Zoffix> R#1709

[11:31] <synopsebot> R#1709 [open]: https://github.com/rakudo/rakudo/issues/1709 [ASYNC][⚠ blocker ⚠] A race in HyperRace causing rare crash/hang

[11:31] <Zoffix> With the golf it now takes ~3m to repro a problem instead of original ~15-20m, so I'd call it a win on my part :)

[11:33] *** Zoffix left
[11:39] <nwc10> good, er, wait, come back!

[11:39] * nwc10 has t/spec/S17-supply/syntax.t ........................................

[11:39] <nwc10> hung currently

[11:40] <nwc10> it does it every so often

[11:40] <nwc10> I wonder if it's the same one

[11:49] *** domidumont joined
[12:37] <dogbert17> Zoffix: your example, i.e. ./perl6 -e 'loop { my @ = (^20000).race.grep(*.self); print "." } hung for me as well

[12:55] *** zakharyas joined
[13:16] *** lizmat joined
[13:53] *** lizmat joined
[14:05] *** lizmat joined
[14:15] <Geth> ¦ MoarVM/spesh-limit-debug-log: 4fcf839ace | (Bart Wiegmans)++ | 6 files

[14:15] <Geth> ¦ MoarVM/spesh-limit-debug-log: [Spesh] Wrap debug printing

[14:15] <Geth> ¦ MoarVM/spesh-limit-debug-log:

[14:15] <Geth> ¦ MoarVM/spesh-limit-debug-log: The intention is that MVM_spesh_debug_enabled(tc) can be made more

[14:15] <Geth> ¦ MoarVM/spesh-limit-debug-log: specific than just having a spesh log file handle or not.

[14:15] <Geth> ¦ MoarVM/spesh-limit-debug-log:

[14:15] <Geth> ¦ MoarVM/spesh-limit-debug-log: Specifically, setting MVM_SPESH_LIMIT in conjunction with MVM_SPESH_LOG

[14:15] <Geth> ¦ MoarVM/spesh-limit-debug-log: will restrict the log to that particular frame.

[14:15] <Geth> ¦ MoarVM/spesh-limit-debug-log: review: https://github.com/MoarVM/MoarVM/commit/4fcf839ace

[14:20] *** tbrowder_ joined
[14:23] *** zakharyas joined
[14:35] *** lizmat joined
[14:42] <dogbert17> .seen timotimo

[14:42] <yoleaux> I saw timotimo 12:20Z in #perl6: <timotimo> yes, it's a beautiful thing, DDT

[14:44] <dogbert17> .tell timotimo added MVM_dump_backtrace output to https://github.com/MoarVM/MoarVM/issues/837. Perhaps useful, perhaps not :)

[14:44] <yoleaux> dogbert17: I'll pass your message to timotimo.

[14:50] *** lizmat joined
[15:04] *** lizmat joined
[15:20] *** lizmat joined
[15:46] *** lizmat joined
[15:52] *** AlexDaniel joined
[15:58] *** brrt joined
[15:59] <brrt> good * #moarvm

[16:29] *** lizmat joined
[16:31] *** zakharyas joined
[16:37] *** domidumont joined
[17:13] *** lizmat joined
[17:38] *** btyler joined
[18:13] *** lizmat joined
[18:54] <samcv> .till Zoffix compiling is failing on solaris due to INFINITY

[18:54] <samcv> i'll try and fix it

[19:13] *** lizmat joined
[19:14] *** Zoffix joined
[19:14] <Zoffix> samcv: damn :( I already had to add a define for MVC: https://github.com/MoarVM/MoarVM/commit/fa167464ac45323a79098890ec64e5abad4b62c9

[19:15] <Zoffix> Maybe solaris will like `#define INFINITY 1.0/0.0`

[19:15] <samcv> though to be fair it doesn't compile period

[19:15] <samcv> :P

[19:15] <Zoffix> :)

[19:15] <samcv> getting some weird error compiling dyncall

[19:15] <Zoffix> `#define INFINITY (1.0/0.0)` rather

[19:15] <samcv> /usr/include/libelf.h: error # error "large files are not supported by libelf"

[19:16] <samcv> say what now

[19:17] <Zoffix> oh, right, #include float and then (DBL_MAX + DBL_MAX)

[19:17] <Zoffix> Maybe I should just do that for all of 'em

[19:18] <samcv> not sure. are you sure it's not platform specific?

[19:18] <samcv> i tried adding an assert(isinf(0)); into my code. but that didn't trigger. how do i get an assert to trigger? or does it not let me do function calls?

[19:18] <Zoffix> DBL_MAX is the maximum number that can fit into a double, and double of that is infinity

[19:18] <samcv> maybe we need a test when you do Configure.pl to make sure that whatever we define infinity as, it's actually infinity on that platform

[19:19] <timotimo> oh, btw, we have defines for infinity and friends in moarvm already

[19:19] <samcv> so it's true on EVERY platform?

[19:19] <samcv> timotimo: yeah i saw that

[19:19] <timotimo> i thought i had already told y'all, but i must have forgotten?

[19:19] <samcv> except AIX?

[19:19] <Zoffix> timotimo: what are they?

[19:19] <samcv> grep INFINITY

[19:20] <Zoffix> That only gives what I had

[19:20] <Zoffix> Ah MVM_NUM_POSINF

[19:20] <samcv> i see MVM_NUM_POSINF

[19:21] <Zoffix> "static const" that'll limit it to just that file, won't it?

[19:21] <Zoffix> will fix it later

[19:22] *** Zoffix left
[19:26] <samcv> wow solaris is so weird

[19:27] <samcv> `ping localhost` #> "localhost is alive" that's literally what it shows

[19:27] <samcv> and nothing else

[19:27] <samcv> some things do weird stuff..

[19:35] <geekosaur> there's an option to make it do what you expect

[19:35] <geekosaur> solaris has more than a bit of historical baggage it can't shed without breaking enterprise uses

[19:36] <geekosaur> often makes sense to stick whichever /usr/xpg*/bin exists in $PATH before the standard stuff

[19:40] <samcv> well i have a manpage for fbconfig but i don't seem to have a binary

[20:06] *** lizmat joined
[20:30] <samcv> libtommath doesn't compile on solaris

[20:30] *** lizmat joined
[20:32] <samcv> i was able to fix it. though i may need to submit a PR to them if they haven't fixed it

[20:43] <samcv> geekosaur: it seems #include <atomic_ops.h> is giving solaris some issues

[20:43] <samcv> saying it can't find it

[20:44] <samcv> hmm i may have broke that

[20:50] <samcv> gonna do a clean clone just to check

[20:52] *** lizmat joined
[21:02] *** lizmat joined
[21:13] *** lizmat joined
[21:24] <samcv> geekosaur: i can't install gcc-5 it seems. and i want to see if the issues i'm getting are just a bug with gcc 4

[21:25] <samcv> pkg install: No matching version of developer/gcc-5 can be installed:

[21:25] <samcv> Reject:  pkg://solaris/developer/gcc-5@5.4.0-5.12.0.0.0.115.0

[21:25] <samcv> pkg://solaris/developer/gcc-5@5.4.0-5.12.0.0.0.122.0

[21:25] <samcv> Reason:  No version for 'require' dependency on release/evaluation can be found

[21:25] <samcv> I get this

[21:25] <samcv> any clue

[21:25] <samcv> it seems like the packages may be masked or something? since they seem to exist but i'm not sure how to install them

[21:25] <geekosaur> looks like you have to tell it to permit evaluation / testing packages?

[21:29] <geekosaur> pkg install --accept, apparently

[21:30] <samcv> yeah i tried that

[21:32] <geekosaur> no idea then. it's beena while since I actually worked with solaris

[21:32] <geekosaur> and, well, with discontinuation they may have nuked it or something

[22:16] <Geth> ¦ MoarVM: 96e432da09 | (Zoffix Znet)++ | 3 files

[22:16] <Geth> ¦ MoarVM: Share INFINITY def between files that use it

[22:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/96e432da09

[22:40] *** Kaiepi joined
[23:21] <Geth> ¦ MoarVM: 957bb4bd8d | (Timo Paulssen)++ | 2 files

[23:21] <Geth> ¦ MoarVM: remove wval-deserialization-retry mechanism for now

[23:21] <Geth> ¦ MoarVM:

[23:21] <Geth> ¦ MoarVM: it's causing crashes.

[23:21] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/957bb4bd8d

[23:23] <Geth> ¦ MoarVM: 45a3e8e6b2 | (Samantha McVey)++ | build/setup.pm

[23:23] <Geth> ¦ MoarVM: Fix solaris 32 bit build

[23:23] <Geth> ¦ MoarVM:

[23:23] <Geth> ¦ MoarVM: 32 bit solaris doesn't support _FILE_OFFSET_BITS=64 and on 64 bit it is

[23:23] <Geth> ¦ MoarVM: enabled by default.

[23:23] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/45a3e8e6b2

[23:23] <Geth> ¦ MoarVM: 1504a27bb4 | (Samantha McVey)++ | build/setup.pm

[23:23] <Geth> ¦ MoarVM: Don't build specify -D_FILE_OFFSET_BITS for dyncall

[23:23] <Geth> ¦ MoarVM:

[23:23] <Geth> ¦ MoarVM: This fails on 32-bit Solaris and on 64-bit Solaris is not needed. Use

[23:23] <Geth> ¦ MoarVM: -U_FILE_OFFSET_BITS so we just negate our other CFLAGS, so we can

[23:23] <Geth> ¦ MoarVM: compile everything except dyncall with -D_FILE_OFFSET_BITS so we don't

[23:23] <Geth> ¦ MoarVM: lose the ability to work with large files.

[23:23] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1504a27bb4

[23:23] <Geth> ¦ MoarVM: 22c941f891 | (Samantha McVey)++ | 3rdparty/libtommath

[23:23] <Geth> ¦ MoarVM: Bump libtommath with fix for building on Solaris

[23:23] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/22c941f891
