[00:08] <timotimo> IO::Socket::Async.Supply has a :$scheduler argument that gets ignored ):

[00:20] <MasterDuke> timotimo: Zoffix might have already addressed that in his post-release branch. at least, i think i remember something similar

[00:20] <timotimo> oh? interesting

[00:21] <MasterDuke> or maybe it's just called out in some inconsistency notes, i'm really not sure

[00:21] <timotimo> ah, he added scheduler being passed on in print-to

[00:32] <timotimo> why is libuv giving me addr == NULL? :\

[00:37] <timotimo> we are currently receiving an extra empty datagram after every bunch of udp packets read by libuv

[00:37] <timotimo> i have a simple fix for that already

[00:39] <MasterDuke> seems an easy win

[00:41] <timotimo> yup

[00:43] <timotimo> IO::Socket::Async::Datagram.new(data => "hi\n", hostname => "127.0.0.1", port => 48878)

[00:43] <timotimo> IO::Socket::Async::Datagram.new(data => "hi\n", hostname => "127.0.0.1", port => 60130)

[00:43] <timotimo> IO::Socket::Async::Datagram.new(data => "hi\n", hostname => "127.0.0.1", port => 59787)

[00:45] <timotimo> IO::Socket::Async::Datagram.new(data => Buf[uint8].new(104,105,10), hostname => "127.0.0.1", port => 53398)

[00:45] <timotimo> ^- this one's with :bin in the Supply args

[00:46] <timotimo> btw, supplying :!enc in there makes it blow up when the first message arrives, Type check failed in binding to parameter 'encoding'; expected Str but got Bool (Bool::False)

[00:46] *** yoleaux joined
[00:46] <MasterDuke> think that's another thing Zoffix at least pointed out

[00:46] <timotimo> cool :)

[00:47] <timotimo> react whenever IO::Socket::Async.bind-udp("127.0.0.1", 9999).Supply(:datagrams, :!enc) { .perl.say }

[00:47] <timotimo> how does that look?

[00:47] <timotimo> i probably want to rename it "datagram" instead of "datagrams"

[00:47] <MasterDuke> nice

[00:47] <timotimo> not so sure if it is, though

[00:56] <Geth> Â¦ MoarVM/udp_receive_hostname_port: 967102bc67 | (Timo Paulssen)++ | src/io/asyncsocketudp.c

[00:56] <Geth> Â¦ MoarVM/udp_receive_hostname_port: expose both hostname and port of received datagrams

[00:56] <Geth> Â¦ MoarVM/udp_receive_hostname_port: review: https://github.com/MoarVM/MoarVM/commit/967102bc67

[00:56] <Geth> Â¦ MoarVM/udp_receive_hostname_port: 7b27ca8a2e | (Timo Paulssen)++ | src/io/asyncsocketudp.c

[00:56] <Geth> Â¦ MoarVM/udp_receive_hostname_port: ignore libuv-caused "fake" empty datagrams

[00:56] <Geth> Â¦ MoarVM/udp_receive_hostname_port: review: https://github.com/MoarVM/MoarVM/commit/7b27ca8a2e

[00:59] <MasterDuke> heh. i have a template for sp_findmeth, but segv almost right away building nqp

[01:02] <timotimo> :D

[01:02] <MasterDuke> timotimo: how are you at reading templates? up for taking a look if i gist it?

[01:14] <timotimo> if it weren't bedtime, i'd look

[01:14] <timotimo> maybe i can look while i brush my teeth

[01:16] <timotimo> MasterDuke: ^

[01:17] <MasterDuke> https://gist.github.com/MasterDuke17/9b8db2fb2a0d618e9ee2b660f76f62a4

[01:18] <MasterDuke> my suspicion is something about the sizes of the what's read from the registers, but i'm not really sure...

[01:20] <timotimo> hm, have you verified with another example that the "carg $0 ptr" is correct to get the register's address properly?

[01:21] <timotimo> i think you need an additional layer of pointeryness

[01:22] <timotimo> like, the code in the template is the same for the obj and the res arguments, but obj is just *obj = GET_REG and res is *res = &GET_REG

[01:22] <MasterDuke> sp_decont does the same thing

[01:23] <MasterDuke> `MVMRegister *r = &GET_REG(cur_op, 0); ...; STABLE(obj)->container_spec->fetch(tc, obj, r);`

[01:23] <timotimo> mhm

[01:24] <MasterDuke> becomes `(callv (^getf (^getf (^stable $1) MVMSTable container_spec) MVMContainerSpec fetch)               (arglist (carg (tc) ptr) (carg $1 ptr) (carg $0 ptr)))`

[01:24] <timotimo> weird, i wonder how that works

[01:25] <MasterDuke> i did think it was a little odd, but then compared with sp_decont and just did what it did

[01:25] <timotimo> yeah, weird

[01:26] <timotimo> maybe if an argument to an opcode is r/w it'll have an additional layer of pointer for free in the template?

[01:27] <timotimo> could it be the invokish nature of the op isn't properly taken into account unless we do something special in the template itself?

[01:27] <timotimo> have you tried dumping the asm yet?

[01:28] <timotimo> or even just the graphviz tree in the jit log?

[01:28] <MasterDuke> no, is there an easy way to do that?

[01:29] <MasterDuke> ah, i think i see it in the log, but gotta afk for a bit

[01:30] <timotimo> surely the $3 thing, i.e. the 16bit right out of the instruction stream, will be passed properly by the exprjit compiler?

[01:31] <timotimo> yeah, wval also just does it like that

[01:36] <timotimo> we should just ping brrt with the gist url: https://gist.github.com/MasterDuke17/9b8db2fb2a0d618e9ee2b660f76f62a4

[01:37] <timotimo> and maybe you can also put a backtrace and listing and such from gdb at the point of the segfault

[01:37] <timotimo> unless of course the segfault is inside the assembly code rather than the MVM_blah function

[01:37] <timotimo> good luck! o/

[02:16] <MasterDuke> gist updated, thanks for looking at it timotimo++

[02:19] <MasterDuke> oh, that may have been silly

[02:20] <MasterDuke> swapped $1 and $3 in the sub expressions of the eq

[02:21] <MasterDuke> hm. built nqp, but rakudo build died. not with a segv though. `Cannot invoke null object`

[02:23] <MasterDuke> in src/Perl6/Metamodel/MROBasedMethodDispatch.nqp: `my %submethods := $obj.HOW.submethod_table($obj);`

[02:57] *** ilbot3 joined
[03:09] *** yoleaux joined
[04:54] *** nativecallable6 joined
[05:50] *** statisfiable6 joined
[06:05] *** geospeck joined
[06:27] *** klapperl joined
[07:10] *** ilmari[m] joined
[09:11] *** yoleaux joined
[09:23] *** brrt joined
[09:33] *** travis-ci joined
[09:33] <travis-ci> MoarVM build passed. Aleks-Daniel Jakimenko-Aleksejev 'Revert "Try to use egcc when compiling on OpenBSD"

[09:33] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/331388501 https://github.com/MoarVM/MoarVM/compare/9df7c1645a07...a04d1099b0b1

[09:33] *** travis-ci left
[10:15] *** domidumont joined
[10:23] *** domidumont joined
[10:39] *** zakharyas joined
[10:42] *** benchable6 joined
[10:42] *** bisectable6 joined
[10:42] *** coverable6 joined
[10:43] *** releasable6 joined
[10:44] *** releasable6 joined
[10:45] *** releasable6 joined
[10:51] *** domidumont joined
[10:53] <nwc10> good *, #moarvm

[10:59] <jnthn> o/ nwc10

[11:01] *** brrt joined
[11:01] <brrt> good * #moarvm

[11:01] <yoleaux> 21 Jan 2018 18:36Z <MasterDuke> brrt: line 104 of https://github.com/MoarVM/MoarVM/blob/master/docs/jit/tiles.md has a sentence that doesn't end

[11:02] <jnthn> It goes on forever? :)

[11:04] <nine> brrt: I pushed a couple of expr JIT templates into my inline_in_place branch. After the initial shock over the unusual syntax, I've found those templates incredibly nice to work with. Constructs that were really tedious to implement in the lego JIT are now downright trivial.

[11:05] <brrt> thanks :-D

[11:05] <brrt> i'll check that out

[11:05] <nine> brrt: speaking of, do you have any idea about this? https://github.com/MoarVM/MoarVM/commit/896e4d280f07ab06abf862b8a28da3bf3eaf7b11

[11:06] *** yoleaux joined
[11:07] <brrt> no, that should work. i'll check it out

[11:24] <brrt> there's no OR tile definedâ€¦. ðŸ˜­

[11:27] *** lizmat joined
[11:36] <Geth> Â¦ MoarVM: 21267d80ff | (Bart Wiegmans)++ | 4 files

[11:36] <Geth> Â¦ MoarVM: Implement tile for OR operator

[11:36] <Geth> Â¦ MoarVM:

[11:36] <Geth> Â¦ MoarVM: nine++ tried to implement the 'isnull' opcode as an expression

[11:36] <Geth> Â¦ MoarVM: template as

[11:36] <Geth> Â¦ MoarVM:

[11:36] <Geth> Â¦ MoarVM:   (or (zr $1) (eq $1 (^vmnull)))

[11:36] <Geth> Â¦ MoarVM:

[11:36] <Geth> Â¦ MoarVM: <â€¦commit message has 7 more linesâ€¦>

[11:36] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/21267d80ff

[11:48] *** brrt joined
[12:03] *** brrt joined
[12:13] *** lizmat joined
[12:14] <timotimo> brrt: did you see MasterDuke's work in the backlog? https://gist.github.com/MasterDuke17/9b8db2fb2a0d618e9ee2b660f76f62a4 - this is for sp_findmeth

[12:22] *** domidumont joined
[12:37] *** reportable6 joined
[12:43] <brrt> did not

[12:54] <timotimo> OK, cool. maybe you can figure this out :)

[12:54] <timotimo> it looked acceptable to me

[12:54] <timotimo> bbiab

[13:03] *** brrt joined
[13:06] <brrt> yeah, it looks good to me as well

[13:06] <brrt> i'll check it out

[13:08] <timotimo> thanks

[13:08] <brrt> i'll point jit-bisect to it :-)

[13:33] *** brrt joined
[13:49] *** brrt joined
[14:00] *** yoleaux joined
[14:25] *** geospeck joined
[14:34] *** yoleaux joined
[14:35] <brrt> I don't think the problem is in the template, though

[14:36] <timotimo> oh? that's nice

[14:41] *** domidumont joined
[14:49] *** domidumont1 joined
[15:13] *** zakharyas joined
[15:37] *** geospeck joined
[15:50] *** yoleaux joined
[16:12] *** brrt joined
[16:15] <brrt> ah, hang on, i think i'm seeing the issue

[16:15] <brrt> no, i'm not

[16:21] <brrt> oh, now i think i am

[16:22] <brrt> the fallback case for sp_findmeth is invokish

[16:22] <brrt> lemmesee how to do that in the template

[16:23] *** yoleaux joined
[16:28] <timotimo> ah, so it *is* about invokish stuff! i thought it'd take that from the oplist

[16:30] <brrt> not sureâ€¦.

[16:31] <nine> brrt: if you are not sure, who would be? :)

[16:35] <brrt> hehe. good point

[16:35] <brrt> so, i think it does get them from the oplist, it's just that sp_findmeth is marked noninvokish

[16:36] <brrt> or not marked invokish, to be more exact

[16:38] <jnthn> It prolly should be

[16:38] <jnthn> sp_decont also if it ain't already

[16:39] <nine> Otherwise the basic block merger might introduce new exciting failures

[16:42] <brrt> hmmm

[16:42] <brrt> maybe, but i think the original rationale for not marking them invokish is to be able to only be invokish in the slow case

[16:43] <brrt> which brings me back to an idea i had earlier

[16:43] <brrt> what if we let the sp_findmeth fail by setting a NULL value

[16:43] <brrt> and then continue by checking that NULL value and branching to the slow case if so

[16:44] <brrt> (this would mean adding a new basic block)

[16:48] <brrt> the sp_findmeth case is nastyâ€¦

[17:12] *** brrt1 joined
[17:27] *** domidumont joined
[17:35] *** yoleaux joined
[17:41] <Geth> Â¦ MoarVM: samcv++ created pull request #786: ucd2c.pl: Fix White_Space/space Unicode Property +many other improvements

[17:41] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/786

[17:41] *** brrt joined
[17:43] *** evalable6 joined
[18:45] *** yoleaux joined
[19:00] *** zakharyas joined
[19:12] *** Kaiepi joined
[19:21] *** zakharyas joined
[19:36] *** yoleaux joined
[19:36] *** quotable6 joined
[19:55] *** Kaiepi joined
[20:02] *** Kaiepi joined
[20:19] *** Ven`` joined
[20:21] *** yoleaux joined
[21:01] *** yoleaux joined
[21:36] *** yoleaux joined
[21:40] *** yoleaux joined
[21:56] *** Ven`` joined
[22:03] <MasterDuke> glad to see i eventually got the template right

[22:04] <MasterDuke> heh. though the dark center to that silver lining is that it seems the solution isn't trivial

[22:11] *** Ven`` joined
[22:16] <timotimo> aye

[22:22] *** squashable6 joined
[22:22] *** unicodable6 joined
[22:22] *** committable6 joined
[22:22] *** bloatable6 joined
[22:26] <MasterDuke> is it all on brrt now?

[22:32] <lizmat> looks like :-(

[22:48] <jnthn> .tell brrt Having pondered it a little, sp_findmethod is really "we couldn't do a good opt on the method call here". From the spesh logs I've looked at of late, they are all on code paths that we no data for - meaning they were cold. Given that, being clever and trying to make it a half-invokish maybe isn't worth it.

[22:48] <yoleaux> jnthn: I'll pass your message to brrt.

[22:54] <MasterDuke> jnthn: so just marking it invokish in the oplist might make the template work?

[22:57] <MasterDuke> hm, nope, same error when building rakudo

[22:58] <jnthn> Depends if that info is conveyed to the right place, and if that's even the problem

[22:58] <MasterDuke> oops, forgot to run update_ops

[22:59] *** Ven`` joined
[22:59] <MasterDuke> trying again...

[22:59] <jnthn> My point to brrt was mostly, "if that is the issue, don't feel a need to try and solve a hard problem we might not benefit from" :)

[23:02] <MasterDuke> rakudo just built ok

[23:03] <jnthn> hah, neat :)

[23:03] <MasterDuke> i'll run a spectest and then PR that template with the addition of :invokish on the op

[23:09] *** domidumont joined
[23:09] *** greppable6 joined
[23:11] *** Ven`` joined
[23:23] *** Ven` joined
[23:45] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #787: Add JIT template for sp_findmeth

[23:45] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/787

[23:48] *** yoleaux joined
