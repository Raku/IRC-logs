[00:03] *** MasterDuke joined
[00:18] <Geth> Â¦ MoarVM: 6466cd639a | (Timo Paulssen)++ | src/io/asyncsocketudp.c

[00:18] <Geth> Â¦ MoarVM: expose both hostname and port of received datagrams

[00:18] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6466cd639a

[00:18] <Geth> Â¦ MoarVM: 4085554569 | (Timo Paulssen)++ | src/io/asyncsocketudp.c

[00:18] <Geth> Â¦ MoarVM: ignore libuv-caused "fake" empty datagrams

[00:18] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4085554569

[00:33] *** travis-ci joined
[00:33] <travis-ci> MoarVM build errored. Timo Paulssen 'ignore libuv-caused "fake" empty datagrams'

[00:33] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/350092886 https://github.com/MoarVM/MoarVM/compare/9c4b3891c356...408555456951

[00:33] *** travis-ci left
[01:00] *** lizmat joined
[02:10] *** releasable6 joined
[02:56] *** ilbot3 joined
[03:10] *** scovit joined
[03:34] *** shareable6 joined
[05:58] *** dogbert21 joined
[06:18] *** domidumont joined
[06:25] *** domidumont joined
[07:21] *** domidumont joined
[07:27] *** brrt joined
[07:32] *** robertle joined
[07:46] *** domidumont joined
[07:55] <Geth> Â¦ MoarVM: dffe6f94d8 | (Bart Wiegmans)++ | src/jit/expr.c

[07:55] <Geth> Â¦ MoarVM: We already have a MVM_spesh_get_lex_type

[07:55] <Geth> Â¦ MoarVM:

[07:55] <Geth> Â¦ MoarVM: No need to have another hacky version of it

[07:55] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/dffe6f94d8

[07:55] <Geth> Â¦ MoarVM: e639691a77 | (Bart Wiegmans)++ | src/jit/linear_scan.c

[07:55] <Geth> Â¦ MoarVM: [JIT] Release only spill slots without active overlap

[07:55] <Geth> Â¦ MoarVM:

[07:55] <Geth> Â¦ MoarVM: When a value spilled to memory has ceased to be useful, its memory

[07:55] <Geth> Â¦ MoarVM: slot can be reused. However, it is possible that there exists an

[07:55] <Geth> Â¦ MoarVM: active live range that starts before the end of the spilled values'

[07:56] <Geth> Â¦ MoarVM: active range. If the memory slot is released it might then be possible

[07:56] <Geth> Â¦ MoarVM: that this overlapping live range might need to be spilled itself and

[07:56] <Geth> Â¦ MoarVM: <â€¦commit message has 7 more linesâ€¦>

[07:56] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e639691a77

[07:59] *** AlexDaniel joined
[08:12] *** AlexDaniel joined
[08:23] *** brrt joined
[08:23] <brrt> this fixes the issues we saw when changing the order of the store and the write barrier

[08:39] *** brrt joined
[08:46] *** brrt joined
[09:00] *** zakharyas joined
[09:15] *** Util joined
[09:24] <brrt> do we we ever need a write barrier without a store?

[09:31] *** zakharyas joined
[09:36] *** zakharyas joined
[10:54] *** brrt joined
[11:45] *** lizmat joined
[12:00] *** shareable6 joined
[12:19] *** lizmat_ joined
[12:49] *** domidumont joined
[13:15] *** Ven`` joined
[13:50] *** domidumont joined
[14:08] <Geth> Â¦ MoarVM: 535cc2b6cc | (Bart Wiegmans)++ | 2 files

[14:08] <Geth> Â¦ MoarVM: Create store_write_barrier macro

[14:08] <Geth> Â¦ MoarVM:

[14:08] <Geth> Â¦ MoarVM: This orders the STORE node before the write-barrier, so that we don't

[14:08] <Geth> Â¦ MoarVM: need to spill the computed address over the conditional call to

[14:08] <Geth> Â¦ MoarVM: MVM_gc_write_barrier_hit. It is not necessary to do the write barrier

[14:08] <Geth> Â¦ MoarVM: prior to the actual assignment (its purpose is to register the root

[14:08] <Geth> Â¦ MoarVM: object as a cross-generation root if the root is old and the value

[14:08] <Geth> Â¦ MoarVM: <â€¦commit message has 11 more linesâ€¦>

[14:08] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/535cc2b6cc

[14:32] *** shareable6 joined
[14:32] *** zakharyas joined
[14:34] <brrt> nicest thing would be to define MVM_JIT_STORE_WRITE_BARRIER, and have an MVM_jit_expr_apply_macro(tc, tree, macro_name, operands[])

[14:41] *** buggable joined
[14:59] *** brrt joined
[15:03] *** brrt joined
[16:00] *** AlexDaniel joined
[16:10] *** brrt joined
[16:12] <brrt> or maybe MVM_JIT_MACRO_STORE_WRITE_BARRIER, but I'm not too picky

[16:14] <brrt> oh, but I really should be fixing the bug about removing successors twice

[16:20] *** releasable6 joined
[16:21] *** buggable joined
[16:22] *** ZofBot joined
[16:24] *** brrt joined
[16:25] *** zakharyas joined
[16:25] *** huggable joined
[16:35] <brrt> anybody any idea how to add a new fact on on an newly created value?

[16:40] <timotimo> "a new fact"? don't you just |= the flag into its flags?

[17:37] *** Kaiepi joined
[17:45] <timotimo> if we jit if_s, EXPR could be jitted ...

[17:45] <timotimo> unless there's something after that that would also bail it

[17:46] <timotimo> btw, EXPR is humongous %)

[17:51] <timotimo> !cursor_pass wants unless_s, btw

[18:04] <timotimo> after i put getuniprop_* into the jit, numish now fails with nqp::inf, and another numish fails with ... backendconfig %)

[18:05] <timotimo> it checks if backendconfig has a key "moarlib"

[18:05] <timotimo> maybe jvm doesn't support <:No+:Nl>

[18:06] *** zakharyas joined
[18:11] *** Kaiepi joined
[18:23] *** robertle joined
[18:29] *** Kaypie joined
[18:32] *** domidumont joined
[18:41] *** Kaiepi joined
[19:51] *** dogbert2 joined
[19:59] *** brrt joined
[20:02] <dogbert17> o/

[20:03] <brrt> \o

[20:03] <timotimo> o/

[20:03] <dogbert17> brrt: if a JIT log states 'Cannot get template for: ctxlexpad', does that mean that some template has not yet been implemented

[20:03] <brrt> timotimo: yeah, you're rigt, i figured it out

[20:03] <timotimo> that's right dogbert17

[20:03] <brrt> correct

[20:03] <dogbert17> looking at one of my project euler solutions

[20:04] <brrt> i also figured out that i want to majorly refactor the optimize_iffy things

[20:05] <dogbert17> it complains about ctxlexpad, unless_s, captureposarg and sp_getlex_o

[20:06] <dogbert17> and if_s

[20:06] <brrt> i din't implement unless_s and if_s

[20:07] <dogbert17> interesting

[20:09] <dogbert17> the implication being that atm 'if' statements can't be jit'ed ?

[20:10] <timotimo> only for native strings

[20:10] <timotimo> the op doesn't map 1:1 to if statements either

[20:11] <dogbert17> sounds complicated

[20:12] <brrt> they can be jitted, but they won't be jitted by the expression JIT

[20:14] <dogbert17> ok, I understand

[20:34] <brrt> - optimize_istrue_isfalse should be, approximately, as clever as optimize_iffy

[20:35] <brrt> I see it as three steps

[20:35] <brrt> - break if_o in istrue + if_i

[20:36] <brrt> - lower istrue into a const (if known value) or (isconcrete/unbox_i/etc)

[20:36] <brrt> - if the operand of if_i is a constant, remove the conditional

[20:55] *** Kaypie joined
[21:00] *** zakharyas joined
[21:11] *** shareable6 joined
[21:21] *** brrt joined
[21:22] <brrt> i'm not sure why optimize_istrue_isfalse wants to use a temp register for the negation

[21:22] <timotimo> me neither, and i wrote the thing :P

[21:22] *** bisectable6 joined
[21:22] *** shareable6 joined
[21:23] <brrt> hmm, i have a theory

[21:23] <brrt> if we .\\\\\\\

[21:24] <brrt> if we keep using the same register, the writer part of the facts would be wrong

[21:25] <brrt> so we'd need a new version of that register (rather than a new register per se)

[21:26] <brrt> also,there can't possibly be anything after if_s in a basic block :-)

[21:26] <brrt> it's branching after all

[21:31] *** shareable6 joined
[21:32] *** shareable6 joined
[21:39] *** MasterDuke joined
[21:41] <MasterDuke> brrt: i've sort of lost track of what you're working on. you're recent jit fixes are not related to why my ishash template isn't working, correct?

[21:43] <brrt> correct

[21:43] <brrt> i'll look at that later

[21:44] <MasterDuke> cool, just wanted to make sure i was following what was going on correctly

[21:45] <brrt> :-)

[21:49] *** committable6 joined
[22:11] <MasterDuke> .ask brrt would a jit bisect with my ishash template be useful?

[22:11] <yoleaux> MasterDuke: I'll pass your message to brrt.
