[01:48] *** ZzZombo left
[01:51] *** fake_space_whale left
[02:03] *** fake_space_whale joined
[02:04] *** p6bannerbot sets mode: +v fake_space_whale

[02:46] *** ZzZombo joined
[02:46] *** p6bannerbot sets mode: +v ZzZombo

[02:50] *** lizmat left
[05:27] *** domidumont joined
[05:28] *** p6bannerbot sets mode: +v domidumont

[05:55] *** domidumont left
[05:57] <nine> .tell brrt I guess we could get rid of nativecallinvoke. The difference from a user's perspective is really just that nativecallinvoke expects the arguments in a list while nativeinvoke expects them in the args buffer like other invoky ops.

[05:57] <yoleaux> nine: I'll pass your message to brrt.

[06:10] *** domidumont joined
[06:11] *** p6bannerbot sets mode: +v domidumont

[06:27] *** robertle joined
[06:28] *** p6bannerbot sets mode: +v robertle

[07:38] *** fake_space_whale left
[07:53] *** lizmat joined
[07:53] *** p6bannerbot sets mode: +v lizmat

[08:10] *** zakharyas joined
[08:11] *** p6bannerbot sets mode: +v zakharyas

[08:11] *** zakharyas left
[08:12] *** zakharyas joined
[08:13] *** p6bannerbot sets mode: +v zakharyas

[08:45] *** ZzZombo left
[09:02] *** ZzZombo joined
[09:02] *** p6bannerbot sets mode: +v ZzZombo

[09:47] *** ZzZombo left
[10:17] *** domidumont left
[10:29] *** lizmat left
[10:31] *** lizmat joined
[10:31] *** p6bannerbot sets mode: +v lizmat

[10:51] <lizmat> .

[10:52] * lizmat is trying to create a QAST::Var and make it dynamic, but is not getting much further :-(

[10:52] <jnthn> ?

[10:52] <jnthn> "make it dynamic" doesn't make sense

[10:53] <jnthn> Or at least, I'm not sure what you're trying to do

[10:53] <jnthn> If fixing that result of declaration thing, it'd just be a lexical scoped lookup for $*FOO

[11:07] *** leont joined
[11:08] *** p6bannerbot sets mode: +v leont

[11:09] *** ZzZombo joined
[11:09] *** p6bannerbot sets mode: +v ZzZombo

[11:09] <lizmat> jnthn: I'm trying to fix the DYNAMIC issue when a dynamic variable is used in a declaration with a possible initialization

[11:10] <lizmat> it currently enters Actions.declarator with a DYNAMIC stuff

[11:10] <lizmat> my theory is that if I'm in a declarator, I should get rid of the DYNAMIC stuff and replace it with just a QAST::Var

[11:12] <lizmat> before it gets further codegenned

[11:19] <lizmat> https://gist.github.com/lizmat/7f82e393e3db53c6b570f3d50f629eae   # work so far

[11:19] <Geth> ¬¶ MoarVM: 58e5161ebd | (Bart Wiegmans)++ | src/jit/graph.c

[11:19] <Geth> ¬¶ MoarVM: [JIT] Fix legacy jit of strfromname

[11:19] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/58e5161ebd

[11:19] <Geth> ¬¶ MoarVM: 95d227987a | (Bart Wiegmans)++ | 3 files

[11:19] <Geth> ¬¶ MoarVM: [JIT] Make jit-bisect.pl work in the new world order (spesh log)

[11:19] <Geth> ¬¶ MoarVM:

[11:19] <Geth> ¬¶ MoarVM: I still want the jit sequence number for uniquely identifying frames,

[11:19] <Geth> ¬¶ MoarVM: but it makes no sense to have them separate from the spesh sequence

[11:19] <Geth> ¬¶ MoarVM: number. This also fixes jit-bisect.pl to use the spesh log.

[11:20] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/95d227987a

[11:23] *** zakharyas left
[11:23] *** brrt joined
[11:24] *** p6bannerbot sets mode: +v brrt

[11:25] <brrt> \o

[11:25] <yoleaux> 05:57Z <nine> brrt: I guess we could get rid of nativecallinvoke. The difference from a user's perspective is really just that nativecallinvoke expects the arguments in a list while nativeinvoke expects them in the args buffer like other invoky ops.

[11:25] <brrt> right

[11:39] *** travis-ci joined
[11:39] *** p6bannerbot sets mode: +v travis-ci

[11:39] <travis-ci> MoarVM build failed. Bart Wiegmans '[JIT] Make jit-bisect.pl work in the new world order (spesh log)

[11:39] <travis-ci> https://travis-ci.org/MoarVM/MoarVM/builds/442121296 https://github.com/MoarVM/MoarVM/compare/f79011cf9186...95d227987a17

[11:39] *** travis-ci left
[11:57] <lizmat> in QAST: +            - QAST::Var(lexical %*foo :decl(contvar))

[11:57] <lizmat> +              [value]

[11:57] <lizmat> +                -

[11:57] <lizmat> what does the [value] and the empty line signify ?

[11:57] *** domidumont joined
[11:58] *** p6bannerbot sets mode: +v domidumont

[12:00] <lizmat> it's not coming from QAST::Var's dump_extra_node_info method

[12:01] <lizmat> ah, I guess it comes from the "extra_children" method

[12:17] *** lizmat_ joined
[12:17] *** p6bannerbot sets mode: +v lizmat_

[12:20] *** lizmat left
[12:35] *** zakharyas joined
[12:36] *** p6bannerbot sets mode: +v zakharyas

[12:42] *** zakharyas left
[12:42] *** zakharyas joined
[12:43] *** p6bannerbot sets mode: +v zakharyas

[13:01] *** brrt left
[13:04] *** ZzZombo_ joined
[13:04] *** p6bannerbot sets mode: +v ZzZombo_

[13:05] *** zakharyas left
[13:05] *** zakharyas joined
[13:06] *** p6bannerbot sets mode: +v zakharyas

[13:07] *** ZzZombo left
[13:07] *** ZzZombo_ is now known as ZzZombo

[13:19] *** Merfont joined
[13:19] *** p6bannerbot sets mode: +v Merfont

[13:20] *** Kaypie left
[13:20] *** brrt joined
[13:21] *** p6bannerbot sets mode: +v brrt

[13:47] <brrt> nine: I wonder if we can move the boxing of return values to the HLL as well

[13:48] <brrt> basically, treat the return value of nativecall, if a pointer, as an opaque integer, and have nativecallbox() as an opcode

[13:50] *** buggable left
[13:50] *** buggable joined
[13:51] *** p6bannerbot sets mode: +v buggable

[14:05] *** zakharyas left
[14:05] *** zakharyas joined
[14:06] *** p6bannerbot sets mode: +v zakharyas

[14:25] *** brrt left
[14:50] *** fake_space_whale joined
[14:51] *** p6bannerbot sets mode: +v fake_space_whale

[15:01] *** domidumont left
[15:01] *** AlexDaniel left
[15:02] *** AlexDaniel joined
[15:03] *** p6bannerbot sets mode: +v AlexDaniel

[15:05] *** zakharyas left
[15:06] *** zakharyas joined
[15:07] *** p6bannerbot sets mode: +v zakharyas

[15:19] *** AlexDaniel left
[15:21] *** AlexDaniel joined
[15:22] *** p6bannerbot sets mode: +v AlexDaniel

[16:05] *** zakharyas left
[16:06] *** fake_space_whale left
[16:07] *** Merfont left
[16:08] *** Kaiepi joined
[16:09] *** p6bannerbot sets mode: +v Kaiepi

[16:09] *** Kaiepi left
[16:10] *** Kaiepi joined
[16:10] *** Zoffix joined
[16:10] *** p6bannerbot sets mode: +v Zoffix

[16:11] *** Zoffix left
[16:11] *** p6bannerbot sets mode: +v Kaiepi

[16:11] *** brrt joined
[16:12] *** p6bannerbot sets mode: +v brrt

[16:13] *** Kaiepi left
[16:14] *** Kaiepi joined
[16:15] *** p6bannerbot sets mode: +v Kaiepi

[16:33] *** robertle left
[16:38] *** zakharyas joined
[16:39] *** p6bannerbot sets mode: +v zakharyas

[16:46] *** lizmat_ left
[16:47] *** lizmat joined
[16:47] *** p6bannerbot sets mode: +v lizmat

[16:47] *** domidumont joined
[16:48] *** p6bannerbot sets mode: +v domidumont

[16:52] *** lizmat left
[16:53] *** domidumont left
[16:54] *** zakharyas left
[17:11] <Geth> ¬¶ MoarVM/faster-Int-str: 8f6b2ac8b0 | (Zoffix Znet)++ | src/math/bigintops.c

[17:11] <Geth> ¬¶ MoarVM/faster-Int-str: Make big Int stringification 1.58x as fast

[17:11] <Geth> ¬¶ MoarVM/faster-Int-str:

[17:11] <Geth> ¬¶ MoarVM/faster-Int-str: For Ints larger than 2‚Å∂‚Å∞ and only in base-10.

[17:11] <Geth> ¬¶ MoarVM/faster-Int-str:

[17:11] <Geth> ¬¶ MoarVM/faster-Int-str: We do it by reducing the value by largest 10**n number that

[17:11] <Geth> ¬¶ MoarVM/faster-Int-str: fits into a single mp_digit and doing so until our remaining

[17:11] <Geth> ¬¶ MoarVM/faster-Int-str: number fits into a single mp_digit, at which point we continue

[17:11] <Geth> ¬¶ MoarVM/faster-Int-str: <‚Ä¶commit message has 21 more lines‚Ä¶>

[17:11] <Geth> ¬¶ MoarVM/faster-Int-str: review: https://github.com/MoarVM/MoarVM/commit/8f6b2ac8b0

[17:12] <dogbert17> brrt: are you around?

[17:14] <Geth> ¬¶ MoarVM: zoffixznet++ created pull request #984: Make big Int stringification 1.58x as fast

[17:14] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/984

[17:17] *** brrt left
[17:18] *** lizmat joined
[17:18] *** p6bannerbot sets mode: +v lizmat

[17:21] *** domidumont joined
[17:22] *** p6bannerbot sets mode: +v domidumont

[17:27] <Geth> ¬¶ MoarVM/faster-Int-str: 3740cd0bb9 | (Zoffix Znet)++ | src/math/bigintops.c

[17:27] <Geth> ¬¶ MoarVM/faster-Int-str: Clamp the value before we count its digits

[17:27] <Geth> ¬¶ MoarVM/faster-Int-str: review: https://github.com/MoarVM/MoarVM/commit/3740cd0bb9

[17:30] *** AlexDaniel is now known as I`

[17:30] *** I` is now known as AlexDaniel

[17:34] <timotimo> wowza, libssh will let you authenticate by sending a "success" message instead of a "request" message for auth

[17:35] <japhb> timotimo: link?

[17:36] <timotimo> https://www.libssh.org/2018/10/16/libssh-0-8-4-and-0-7-6-security-and-bugfix-release/

[17:38] *** AlexDaniel left
[17:38] *** AlexDaniel joined
[17:39] *** p6bannerbot sets mode: +v AlexDaniel

[17:40] *** AlexDaniel left
[17:40] *** AlexDaniel joined
[17:41] *** AlexDaniel left
[17:41] *** AlexDaniel joined
[17:42] *** p6bannerbot sets mode: +v AlexDaniel

[17:48] *** lizmat_ joined
[17:48] *** p6bannerbot sets mode: +v lizmat_

[17:50] *** lizmat left
[17:51] <tadzik> yeah, it look scary :o

[17:52] <timotimo> who uses libssh anyway?

[17:52] <tadzik> I checked my server, and not only it uses libssh2, which is apparently a different thing, but also calls it a "client-side library"

[17:52] <timotimo> the problem is only in the server code, and even our perl6 binding to libssh doesn't have server code bound

[17:52] <tadzik> so yeah, I was wondering the same thing: who does it affect in practice? Maybe it's me but I don't know

[18:05] <nine> brrt: what would be the advantage?

[18:08] <japhb> tadzik: A friend on an RPM-based distro says curl/libcurl link to it.  Of course, that's client-side.

[18:12] <tadzik> japhb: nodnod, makes sense

[18:12] <tadzik> so if my client can bypass auth, that's a feature, right? :P

[18:17] *** Kaiepi left
[18:17] *** diakopter left
[18:19] *** Kaiepi joined
[18:19] *** p6bannerbot sets mode: +v Kaiepi

[18:30] *** domidumont left
[19:04] *** patrickb joined
[19:05] *** p6bannerbot sets mode: +v patrickb

[19:34] *** lizmat_ is now known as lizmat

[20:17] *** brrt joined
[20:18] *** p6bannerbot sets mode: +v brrt

[20:25] *** patrickb left
[20:33] <brrt> \o

[20:33] <yoleaux> 17:32Z <Zoffix> brrt: PR sent: https://github.com/MoarVM/MoarVM/pull/984

[20:34] <brrt> dogbert17: I am now

[20:34] <brrt> how can I help?

[20:35] <brrt> nine: each individual ops becomes simpler, and it's easier to implement JITting for

[20:38] <dogbert17> hi brrt

[20:39] <dogbert17> I have a GC bug which might be JIT related since I can't repro with the JIT off

[20:40] <dogbert17> it looks like this, https://gist.github.com/dogbert17/7f475e44f1b3a96e087da242da223c12

[20:40] <timotimo> anything with gc debug?

[20:40] <timotimo> or is that already gc debug?

[20:40] <dogbert17> timotimo: gc debug is on

[20:41] <brrt> that does look annoying, yes

[20:41] <brrt> hmm

[20:41] <brrt> and it's using the spesh plugin

[20:41] <dogbert17> if I set MVM_JIT_DISABLE=1 it seems to vanish

[20:41] <brrt> can you set jit-bisect.pl on it

[20:42] <brrt> specifically, jit.bisect.pl --spesh

[20:42] <dogbert17> does that work even if the fail doesn't occur every run?

[20:43] <brrt> nope... do you have an approximate failure rate?

[20:44] <dogbert17> 50%, that's with a small nursery

[20:44] <dogbert17> if it is small enough it will probably break every time though

[20:44] <brrt> if you do, then you can write a script that will run it a number of times, up to the desired level of accuracy, until you either get a crash or don't

[20:46] * dogbert17 tries a jit-bisect ...

[20:48] <dogbert17> SPESH Broken frame: 577.

[20:48] <dogbert17> SPESH Acquiring log: spesh-0577.txt

[20:49] <dogbert17> what do I do now?

[20:52] <dogbert17> a second bisect run complains about frame 567 instead

[20:55] <brrt> hmm, that's annoying

[20:55] <brrt> then it is presumably not reliable enough

[20:56] <brrt> (the crash)

[20:57] <dogbert17> a third run gave 567 again

[20:58] <dogbert17> file is 892 lines, perhaps I can gist it if you want

[20:58] <brrt> yes, please

[20:59] <dogbert17> https://gist.github.com/dogbert17/fddecf8d5abe740e4dfd038dbd9c818f

[21:00] <brrt> it does call speshresolve, so that's suspicious

[21:26] <brrt> unfortunately I don't think I can help you much further now

[21:27] <dogbert17> thanks for trying

[21:27] <dogbert17> I wonder if there's a way to make this crash 100% reliable

[22:09] <brrt> dogbert17: I have a branch outstanding though that you might test with this

[22:09] <brrt> it's called expr-jit-invoke

[22:09] <brrt> it might fix this

[22:16] *** fake_space_whale joined
[22:17] *** p6bannerbot sets mode: +v fake_space_whale

[22:31] *** brrt left
[23:38] *** MasterDuke joined
[23:38] *** p6bannerbot sets mode: +v MasterDuke

[23:39] *** MasterDuke left
[23:39] *** MasterDuke joined
[23:39] *** herbert.freenode.net sets mode: +v MasterDuke

[23:39] *** p6bannerbot sets mode: +v MasterDuke

[23:46] *** leont left
