[00:02] *** reportable6 left
[00:04] <japhb> Looks like Inline::Perl5 is failing tests with a lot of VMNull errors ... is that known?

[00:05] *** reportable6 joined
[00:07] <japhb> (I don't see an issue for it, but that doesn't mean nine doesn't already know about it.)

[00:08] <japhb> I was building a Rakudo from this afternoon: rakudo-moar-2021.10-91-g4c238bdc9

[00:26] *** MasterDuke92 left
[02:47] *** notable6 left
[02:47] *** committable6 left
[02:47] *** shareable6 left
[02:47] *** statisfiable6 left
[02:47] *** reportable6 left
[02:47] *** benchable6 left
[02:47] *** evalable6 left
[02:47] *** sourceable6 left
[02:47] *** nativecallable6 left
[02:47] *** coverable6 left
[02:47] *** linkable6 left
[02:47] *** unicodable6 left
[02:47] *** quotable6 left
[02:47] *** squashable6 left
[02:47] *** releasable6 left
[02:47] *** bloatable6 left
[02:47] *** tellable6 left
[02:47] *** greppable6 left
[02:47] *** bisectable6 left
[02:47] *** evalable6 joined
[02:47] *** linkable6 joined
[02:47] *** nativecallable6 joined
[02:48] *** greppable6 joined
[02:49] *** tellable6 joined
[02:49] *** squashable6 joined
[02:49] *** benchable6 joined
[02:50] *** unicodable6 joined
[03:48] *** sourceable6 joined
[03:48] *** shareable6 joined
[03:49] *** coverable6 joined
[03:49] *** notable6 joined
[03:49] *** bloatable6 joined
[04:47] *** quotable6 joined
[04:49] *** committable6 joined
[05:49] *** quotable6 left
[05:49] *** benchable6 left
[05:49] *** bloatable6 left
[05:49] *** squashable6 left
[05:49] *** shareable6 left
[05:49] *** greppable6 left
[05:49] *** notable6 left
[05:49] *** nativecallable6 left
[05:49] *** linkable6 left
[05:49] *** coverable6 left
[05:49] *** sourceable6 left
[05:49] *** evalable6 left
[05:49] *** unicodable6 left
[05:49] *** committable6 left
[05:49] *** tellable6 left
[05:49] *** sourceable6 joined
[05:49] *** tellable6 joined
[05:49] *** shareable6 joined
[05:50] *** coverable6 joined
[05:50] *** committable6 joined
[05:50] *** nativecallable6 joined
[05:51] *** notable6 joined
[05:51] *** bloatable6 joined
[05:52] *** benchable6 joined
[06:05] *** reportable6 joined
[06:49] *** bisectable6 joined
[06:49] *** releasable6 joined
[06:49] *** evalable6 joined
[06:49] *** unicodable6 joined
[06:49] *** greppable6 joined
[06:50] *** linkable6 joined
[06:51] *** squashable6 joined
[06:51] *** quotable6 joined
[07:47] *** statisfiable6 joined
[08:50] <nine> japhb: wasn't aware of that, no

[08:51] <Nicholas> good *, #moarvm 

[08:59] <timo> good good

[09:00] <Nicholas> moin moin

[09:04] <timo> aww, new-disp-nativecall has merge conflicts

[09:04] <timo> with replace-attrinited

[09:05] <timo> oh it's supposed to be the -libffi one

[09:07] <Nicholas> I'm probably mostly AFK until likely Monday evening, so please don't assume that I can answer questions promptly.

[09:07] <Nicholas> I hope that there aren't questions. :-)

[09:19] *** leont left
[09:19] *** leont joined
[09:40] *** patrickb joined
[09:52] *** squashable6 left
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:04] <nine> Oh darn, new-special-return also broke one of Inline::Perl5's tests. t/p5_object_destructor.t dies either with Internal error: Unwound entire stack and missed handler" in an unwind from a nested runloop or a slot < cache->num_entries assertion failure/segfault in getlexstatic_o 

[12:10] <lizmat> meh

[12:12] <nine> Huh.... it's a JIT issue. Breaks with MVM_JIT_EXPR_DISABLE=1 but works with MVM_JIT_DISABLE=1

[12:49] <jnthnwrthngtn> Sigh. I lost the better part of a week on keeping finalizer on same thread semantics for the sake of Inline::Perl5. :/

[12:52] <jnthnwrthngtn> At least if it's only a JIT issue then it's probalby not that the whole approach is busted in some way

[12:52] <jnthnwrthngtn> I wonder if something somewhere is not syncing up the JIT state

[13:03] *** evalable6 left
[13:03] *** linkable6 left
[13:05] *** evalable6 joined
[13:20] * dogbert17 tries to 'bisect' the bug in complex.t

[13:42] <nine> maybe new-special-retiurn just uncovered some preexisting issue

[13:48] <dogbert17> at least new-special-retiurn isn't the cause of the error in complex.t

[13:53] *** squashable6 joined
[13:55] <jnthnwrthngtn> nine: Also possible. The getstaticlex_o was is utterly weird, I can only imagine we're in a really confused state for that to happen

[13:55] <jnthnwrthngtn> Shopping, bbl

[14:06] *** linkable6 joined
[15:28] * nine won't be getting significant hacking time today. Short notice family visit

[16:02] *** evalable6 left
[16:02] *** linkable6 left
[16:03] *** linkable6 joined
[16:53] <dogbert17> phew, that took some time, but it seems as if the error (possibly GC related) is caused/revealed by commit https://github.com/MoarVM/MoarVM/commit/4310520f0ebb5965bd633fad3dd2300a470f2d1a

[16:54] <dogbert17> the error I'm talking abouth is this one https://gist.github.com/dogbert17/93fc8512fda91df90563d5ce49522baa

[16:57] <dogbert17> perhaps jnthnwrthngtn, or anyone else for that matter, can see if anything obvious sticks out in that commit

[18:02] *** reportable6 left
[18:02] *** evalable6 joined
[18:58] <timo> are bbs not meant to be emptied by remove_ins?

[19:01] <timo> i now also realize: when i just throw out instructions, the registers read by them will be marked unneeded, unless they are already "used by deopt" for the same spot

[19:02] <timo> and i'll have to be careful for deopt annotations anyway, so i don't mess things up royally in some other way :D

[19:02] <timo> this was not a "nice little saturday evening project"

[19:03] *** reportable6 joined
[19:08] <timo> to elaborate, i'm looking backwards from any dispatch that has been "never dispatched" for the first bb that is a branch

[19:08] <timo> so that the whole code from there could be chopped off, and the branch instruction replaced with a conditional deopt

[19:10] <timo> the thought behind it is that branches that haven't been run at all so far are handlers for exceptional conditions that are unlikely to be taken any time soon, so reducing the size of the bytecode can help inline it into more frames if it goes below the size limit

[19:46] <nine> timo: oh, certainly a worthwhile pursue. But not one I'd have figured to be a litte evening project :)

[20:03] *** linkable6 left
[20:03] *** evalable6 left
[20:04] *** linkable6 joined
[20:45] *** squashable6 left
[20:45] *** squashable6 joined
[21:14] <jnthnwrthngtn> dogbert17: I'd think it enables further inlining and so maybe revealed something, alas.

[22:06] *** evalable6 joined
[22:24] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1600: Fix MVM_string_ascii_encode_substr to use given offset value

[22:24] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1600

[23:04] *** colemanx joined
