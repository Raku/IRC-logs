[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:26] *** dogbert12 left
[01:15] *** dogbert12 joined
[01:20] *** dogbert12 left
[01:22] *** dogbert12 joined
[01:40] *** dogbert12 left
[01:53] *** frost joined
[03:19] *** dogbert12 joined
[03:22] *** dogbert17 joined
[03:24] *** dogbert12 left
[03:28] *** dogbert11 joined
[03:29] *** dogbert17 left
[03:33] *** dogbert11 left
[03:37] *** frost left
[04:12] *** dogbert11 joined
[04:17] *** dogbert11 left
[05:16] *** dogbert11 joined
[05:20] *** dogbert17 joined
[05:22] *** dogbert11 left
[05:58] *** dogbert17 left
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:16] *** dogbert17 joined
[06:20] *** dogbert17 left
[06:20] *** dogbert11 joined
[06:26] *** dogbert11 left
[06:41] *** patrickb joined
[06:52] *** patrickb left
[06:52] *** patrickb joined
[07:35] *** dogbert11 joined
[07:38] *** patrickb left
[07:38] *** patrickb joined
[07:40] *** patrickb left
[07:40] *** patrickb joined
[07:42] *** patrickb left
[07:42] *** patrickb joined
[07:43] *** patrickb left
[07:43] *** patrickb joined
[07:53] *** dogbert11 left
[08:01] *** dogbert11 joined
[08:35] *** frost14 joined
[08:41] *** frost14 left
[08:42] *** frost46 joined
[08:43] *** frost46 left
[08:43] *** frost24 joined
[08:45] *** frost24 left
[08:57] *** frost joined
[09:57] *** coverable6 left
[09:57] *** shareable6 left
[09:57] *** reportable6 left
[09:57] *** unicodable6 left
[09:57] *** notable6 left
[09:57] *** committable6 left
[09:57] *** bloatable6 left
[09:57] *** quotable6 left
[09:57] *** linkable6 left
[09:57] *** nativecallable6 left
[09:57] *** tellable6 left
[09:57] *** sourceable6 left
[09:57] *** squashable6 left
[09:57] *** statisfiable6 left
[09:57] *** benchable6 left
[09:57] *** bisectable6 left
[09:57] *** releasable6 left
[09:57] *** evalable6 left
[09:57] *** greppable6 left
[09:58] *** sourceable6 joined
[09:58] *** shareable6 joined
[09:58] *** linkable6 joined
[09:58] *** releasable6 joined
[09:59] *** notable6 joined
[09:59] *** unicodable6 joined
[09:59] *** tellable6 joined
[09:59] *** reportable6 joined
[09:59] *** benchable6 joined
[09:59] *** bloatable6 joined
[09:59] *** statisfiable6 joined
[09:59] *** bisectable6 joined
[09:59] *** squashable6 joined
[10:00] *** nativecallable6 joined
[10:00] *** evalable6 joined
[10:00] *** quotable6 joined
[10:00] *** greppable6 joined
[10:00] *** coverable6 joined
[10:00] *** committable6 joined
[10:51] *** squashable6 left
[10:53] *** squashable6 joined
[11:43] *** Geth joined
[11:44] *** Geth left
[11:45] *** Geth joined
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:19] *** Geth left
[12:22] *** Geth joined
[12:23] *** Geth left
[12:23] *** Geth joined
[12:25] *** Kaipi joined
[12:25] *** Kaiepi left
[12:26] *** Kaipi left
[12:26] *** Kaipi joined
[13:10] *** Geth left
[13:10] *** LizBot_ left
[13:11] *** RakuIRCLogger left
[13:14] *** RakuIRCLogger joined
[13:15] *** Geth joined
[13:17] *** frost left
[13:52] <lizmat> PSA: if you like Geth to announce github events again, change the server name in the webhook to webhooks.liz.nl
[14:17] <Geth> Â¦ MoarVM/new-disp: a7981b98bb | (Jonathan Worthington)++ | src/6model/reprs/MVMCapture.c
[14:17] <Geth> Â¦ MoarVM/new-disp: Fix missing GC rooting in capture transforms
[14:17] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a7981b98bb
[14:17] <Geth> Â¦ MoarVM/new-disp: 268c2badc5 | (Jonathan Worthington)++ | src/disp/boot.c
[14:17] <Geth> Â¦ MoarVM/new-disp: Fix use of moved collectables in lang* dispatchers
[14:17] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/268c2badc5
[14:17] <jnthnwrthngtn> yay, it works
[14:17] <jnthnwrthngtn> That was a replay from a push yesterday
[14:20] <Geth> Â¦ MoarVM/new-disp: d28b689f33 | (Jonathan Worthington)++ | src/core/callsite.c
[14:20] <Geth> Â¦ MoarVM/new-disp: Consistently use named args count function
[14:20] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/d28b689f33
[14:20] <Geth> Â¦ MoarVM/new-disp: cbd493b0a5 | (Jonathan Worthington)++ | 3 files
[14:20] <Geth> Â¦ MoarVM/new-disp: GC mark interned callsites
[14:20] <Geth> Â¦ MoarVM/new-disp: 
[14:20] <Geth> Â¦ MoarVM/new-disp: We got away with this thanks to compunits only rarely getting collected,
[14:20] <Geth> Â¦ MoarVM/new-disp: but now that we produce callsites regularly as a result of flattening
[14:20] <Geth> Â¦ MoarVM/new-disp: that we then go on to intern, we really should do it.
[14:20] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/cbd493b0a5
[14:20] <jnthnwrthngtn> lizmat++ # Geth resurrection
[14:27] <jnthnwrthngtn> Sigh, why do I suddenly get "ASan runtime does not come first in initial library list" today when it worked fine yesterday...
[14:28] <Nicholas> jnthnwrthngtn: that now gets me:
[14:28] <Nicholas> MoarVM panic: Zeroed owner in item added to GC worklist
[14:28] <Nicholas> somewhere in the NQP build
[14:30] <jnthnwrthngtn> Hm, but not the ASAN panic?
[14:30] <nine> jnthnwrthngtn: nqp built on a MoarVM with ASAN?
[14:30] <jnthnwrthngtn> Yes
[14:30] <jnthnwrthngtn> Turns out that nuking my install directory worked
[14:30] <jnthnwrthngtn> I've no idea why
[14:30] <jnthnwrthngtn> But yay working ASAN again
[14:31] <Nicholas> that's not an ASAN panic. That's one of the #defines
[14:31] <jnthnwrthngtn> Nicholas: Does it happen at the end of the build when buliding gen/moar/stage2/NQPP5QRegex.nqp
[14:32] <Nicholas> Last lines where:
[14:32] <Nicholas> were:
[14:32] <Nicholas> +++ Installing MOAR stage 2 files locally
[14:32] <Nicholas> +++ Compiling   NQPP5QRegex.moarvm
[14:32] <jnthnwrthngtn> Nicholas: I know, but with FSA_DEBUG on then ASAN I think should trip before it gets there. Recreating that now
[14:32] <Nicholas> MoarVM panic: Zeroed owner in item added to GC worklist
[14:32] <Nicholas> Aborted
[14:33] <jnthnwrthngtn> Yeah, ok. I don't get zeroed owner, but bogus one, but the same kinda issue
[14:34] <jnthnwrthngtn> grr, it doesn't
[14:43] <jnthnwrthngtn> ahh, I think a) I found it, b) I know why at some point it looked like the same use after free bug I was hunting yesterday
[15:14] <jnthnwrthngtn> Sigh, no.
[15:37] <Geth> Â¦ MoarVM/new-disp: 9668dfc167 | (Jonathan Worthington)++ | src/core/callsite.c
[15:37] <Geth> Â¦ MoarVM/new-disp: Avoid repeated dereferencing in intern cleanup
[15:37] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/9668dfc167
[15:37] <Geth> Â¦ MoarVM/new-disp: 39ff70c663 | (Jonathan Worthington)++ | src/disp/program.c
[15:37] <Geth> Â¦ MoarVM/new-disp: Form capture before making dispatch record
[15:37] <Geth> Â¦ MoarVM/new-disp: 
[15:37] <Geth> Â¦ MoarVM/new-disp: Otherwise the allocation can cause us to see things in a state of
[15:37] <Geth> Â¦ MoarVM/new-disp: incomplete setup, which can cause us to go doing incorrect marking.
[15:38] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/39ff70c663
[15:42] <jnthnwrthngtn> Trying to track it down with the "GC on every allocation" option showed up the issue fixed in the second commit
[15:43] <jnthnwrthngtn> However, dropping back to another debug level gets me back to the very same failure mode I had before
[15:46] <nine> jnthnwrthngtn: have you ever tried the gcc plugin for finding GC issues?
[15:48] <jnthnwrthngtn> nine: Not yet
[15:48] <jnthnwrthngtn> It's static analysis?
[15:48] <nine> yes
[15:50] <nine> It takes a bit of effort to get up and running, so it's usually not worth it for finding a single issue. But with large amounts of new code it could pay off
[15:54] *** dogbert11 left
[16:00] <jnthnwrthngtn> Yeah, should certainly throw it at this. I'm still not quite sure if I'm looking at a straight GC issue; nothing trips in the right places
[16:05] <nine> jnthnwrthngtn: I've ran it. Maybe worth a look: https://gist.github.com/niner/d2afe30b8246c0976c39246d14cb26b9
[16:19] *** patrickb left
[16:22] <Geth> Â¦ MoarVM/new-disp: 5ce86d7a60 | (Jonathan Worthington)++ | src/disp/boot.c
[16:22] <Geth> Â¦ MoarVM/new-disp: Fix a missing MVMROOT found by static analysis
[16:22] <Geth> Â¦ MoarVM/new-disp: 
[16:22] <Geth> Â¦ MoarVM/new-disp: nine++
[16:22] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5ce86d7a60
[16:23] <jnthnwrthngtn> nine: That's legit, I think. Hopefully the commit quiets it. Sadly, not the one I'm hunting, it seems.
[16:26] <jnthnwrthngtn> Fixing lots of things at least but sigh, this one is taking a while to hunt
[16:28] <nine> Missing root for `result` in try_update_cache_entry (tc, entry_ptr, &unlinked_getlexstatic, _6); at src/disp/inline_cache.c:31 used in D.23824 = result; at src/disp/inline_cache.c:33
[16:28] <nine> Missing root for `id` in _4 = MVM_disp_program_run (tc, dp, record); at src/disp/inline_cache.c:133 used in disp = MVM_disp_registry_find (tc, id); at src/disp/inline_cache.c:147
[16:31] <jnthnwrthngtn> Hm, is that newly added in what you sent before, or?
[16:31] <jnthnwrthngtn> huh, disp_registery_find can allocate?
[16:33] <jnthnwrthngtn> oh, maybe that's not what it is saying
[16:34] <nine> I'm trying to re-generate the list of functions that can alloc. Sadly my past self sucked at giving me hints about how I came up with the original one...
[16:35] <nine> jnthnwrthngtn: no, it means that disp_program_run can allocate and the variable is used later on in that disp_registry_find call
[16:35] <nine> The MVM_ROOT needs to be around the MVM_disp_program_run call
[16:37] <jnthnwrthngtn> Ah, right
[16:37] <jnthnwrthngtn> In theory it can't ever allocate unless it reaches a dispatch terminal
[16:37] <jnthnwrthngtn> And if it reaches one of those it'll be successful
[16:38] <jnthnwrthngtn> Still, better safe than sorry
[16:41] <nine> groceries &
[16:45] <Geth> Â¦ MoarVM/new-disp: 4dd0c3055a | (Jonathan Worthington)++ | src/disp/inline_cache.c
[16:45] <Geth> Â¦ MoarVM/new-disp: Ensure we root in case dispatch program allocates
[16:45] <Geth> Â¦ MoarVM/new-disp: 
[16:45] <Geth> Â¦ MoarVM/new-disp: In theory it should not in any paths that don't lead to a successful
[16:45] <Geth> Â¦ MoarVM/new-disp: dispatch outcome, but that feels like playing with fire, so add the
[16:45] <Geth> Â¦ MoarVM/new-disp: roots anyway.
[16:45] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/4dd0c3055a
[16:48] <nine> Missing root for `returner` in caller = MVM_callstack_unwind_frame (tc, _22, &thunked); at src/core/frame.c:1058 used in returner->caller = 0B; at src/core/frame.c:1060
[16:49] <nine> Missing root for `frame` in _55 = remove_one_frame (tc, 1); at src/core/frame.c:1297 used in frame.247_57 = frame; at src/core/frame.c:1234
[16:49] <nine> Missing root for `return_value` in _55 = remove_one_frame (tc, 1); at src/core/frame.c:1297 used in return_value.233_21 = return_value; at src/core/frame.c:1246
[16:49] *** sena_kun left
[17:11] *** dogbert11 joined
[17:29] *** squashable6 left
[17:31] *** squashable6 joined
[18:02] *** Geth left
[18:02] *** Geth joined
[18:02] *** reportable6 left
[18:02] *** reportable6 joined
[19:08] *** linkable6 left
[19:10] *** linkable6 joined
[20:10] *** evalable6 left
[20:10] *** linkable6 left
[20:11] *** linkable6 joined
[20:12] *** evalable6 joined
[20:20] *** sena_kun joined
[21:35] <Geth> Â¦ MoarVM/new-disp: 4176a7f98c | (Jonathan Worthington)++ | src/core/frame.c
[21:35] <Geth> Â¦ MoarVM/new-disp: Fix two more missing GC rootings
[21:35] <Geth> Â¦ MoarVM/new-disp: 
[21:35] <Geth> Â¦ MoarVM/new-disp: Frame unwinding can now potentially lead to allocations if, for example,
[21:35] <Geth> Â¦ MoarVM/new-disp: there is lazy deopt.
[21:35] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/4176a7f98c
[21:44] *** Util joined
[22:09] *** Altai-man joined
[22:13] *** Kaipi left
[22:14] *** Kaipi joined
[22:19] *** Kaipi left
[22:19] *** Kaipi joined
[22:23] *** Merfont joined
[22:24] *** Kaipi left
[22:27] *** Merfont left
[22:32] *** Kaiepi joined
[23:24] *** Altai-man left
