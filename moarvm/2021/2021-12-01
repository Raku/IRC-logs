[00:00] *** bartolin left
[00:00] *** discord-raku-bot left
[00:00] *** colemanx left
[00:00] *** discord-raku-bot joined
[00:00] *** Colt left
[00:02] *** Colt joined
[00:02] *** reportable6 left
[00:04] *** [Coke] left
[00:05] *** bartolin joined
[00:05] *** reportable6 joined
[00:05] *** [Coke] joined
[00:17] *** squashable6 left
[00:18] *** squashable6 joined
[01:00] *** colemanx joined
[01:44] <ugexe> I'm trying to debug why macOS Monterey usually locks up when running e.g. shell("ls"), but I don't know if this lldb output actually has anything useful -- https://gist.github.com/ugexe/8c34b26c5edbcaed3784d3cf377ae334

[02:42] *** frost joined
[06:03] *** reportable6 left
[08:00] <nine> Won't work, but why not give it a try anyway: export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

[08:03] *** reportable6 joined
[08:14] *** linkable6 left
[08:15] *** linkable6 joined
[08:50] <Nicholas> good *, #moarvm 

[08:58] <jnthnwrthngtn> Are threads 4 and 5 making progress, or is it just coincidence that they are both deep in OS things and trying to acquire a lock?

[08:59] <jnthnwrthngtn> meeting, bbiab

[10:07] <timo> ugexe: do we have info about the process that was spawned by thread 5?

[10:11] *** patrickb joined
[11:19] <jnthnwrthngtn> I'd guess thread 5 is the shell to run `ls`, the thing that surprises me more is that uv_cpu_info leads to a fork

[11:41] *** Altai-man joined
[12:03] *** reportable6 left
[12:07] *** frost left
[12:49] *** linkable6 left
[13:14] <ugexe> if i repeat the example in the gist it gives the same relevant lldb output each time, so i assume its not making progress (same if i resume + interrupt)

[13:17] <jnthnwrthngtn> OK, so it really is stuck there.

[13:18] <lizmat> https://github.com/rakudo/rakudo/pull/4659

[13:18] <lizmat> Make sure that nqp::cpucores is only called once ever

[13:19] <lizmat> if this fixes it, should probably be done at the MoarVM level

[13:23] <jnthnwrthngtn> If this fixes it, it should probably be reported to libuv and maybe Apple.

[13:30] <ugexe> that does actually work around it

[13:32] <ugexe> maybe someone with a non-Monterey mac could run lldb on `shell("ls")` to see what it used to do

[13:34] <ugexe> i can do more debugging later if anyone has any suggestions, but i'm off to work for now

[13:51] *** linkable6 joined
[14:03] *** reportable6 joined
[14:16] *** patrickb left
[14:26] <lizmat> $ r 'use nqp; nqp::cpucores for ^10000'

[14:26] <lizmat> real	0m0.466s

[14:26] <lizmat> $ r 'use nqp; Kernel.cpu-cores for ^10000'

[14:26] <lizmat> real	0m0.173s

[14:27] <lizmat> that's with #4659 applied

[14:29] <ugexe> Kernel.cpu-cores is public api though, so if the number of cpu cores visible can change at runtime (i have no idea) then we probably shouldnt cache that value for that method

[14:31] <[Coke]> I have a (checks) Big Sur mac if you want me to check something.

[14:33] <timo> you can turn off cores via /sys somewhere

[14:35] <jnthnwrthngtn> I think hot-changing number of CPU cores is a thing, for example a virtual machine may be able to have more cores added while it's running.

[14:35] <ugexe> could someone tell [Coke] the lldb or gdb commands to run a script (containing just `shell("ls")`) so they can get the `bt all` output?

[14:35] <ugexe> i don't think the runner works, and I only otherwise know how to attach to a running process (that script will finish running before he can attach to it)

[14:36] <jnthnwrthngtn> However, I'm not sure it's terribly common, and since our thread pool already fixates its maximum at creation time anyway... ;)

[14:36] <timo> if a user is calling that method regularly, they will have a reason, probably?

[14:39] <jnthnwrthngtn> Well, TPS was doing nqp::cpucores regularly, but honestly I don't remember thinking "oh, we should do this for a fresh value", it was more "make things work" and "don't expect it to be too costly"

[14:39] <[Coke]> ugexe: what about 'shell("ls");sleep 30' or somesuch?

[14:41] <[Coke]> someone forwarded me an article on hardening release builds that we might want to adopt in part.

[14:42] <[Coke]> https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html?fbclid=IwAR1j9Hze8QfM2UkGS2oY_Dp1IUnefV1ObzQnuaodts7Yvmn9Geoi7qt4p2Q

[14:42] <[Coke]> https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html

[14:43] *** Guest12 joined
[14:43] <ugexe> TPS caching the result from Kernel.cpu-cores wouldnt surprise me, but Kernel.cpu-cores itself caching might

[14:44] <nine> [Coke]: just gdb rakudo -e '...' is what I do

[14:45] <[Coke]> and once I'm in gdb?

[14:46] <[Coke]> (Surprised to find I have a gdb lying around on my mac.)

[14:46] <ugexe> `bt all` or `bt full` or some such

[14:48] <[Coke]> both say "no stack" 

[14:49] <nine> First `run`

[14:49] <nine> Then ctrl+c (or whatever on the mac) to interrrupt at the point where you want that backtrace

[14:49] <[Coke]> sorry, yes just figured that out. run says:

[14:49] <[Coke]> Unable to find Mach task port for process-id 15321: (os/kern) failure (0x5).

[14:49] <[Coke]>  (please check gdb is codesigned - see taskgated(8))

[14:50] <[Coke]> so I'm guessing the system is *also* suprised there's a gdb on my old mac.

[14:50] <[Coke]> give me a bit.

[14:50] <ugexe> do you have lldb?

[14:52] <[Coke]> aye

[14:52] <ugexe> that might work better on a mac

[14:52] <[Coke]> stub code executed, process exited with status = 1

[14:59] <[Coke]> (I have a moar-2021.10 release installed)

[15:04] <vrurg> Doing `RAKUDO_OPTIMIZER_DEBUG=1 make install` in rakudo ends up with 'Cannot find method 'scope' on object of type QAST::Var+{QAST::SpecialArg}'. I'm stilling trying to figure out what's going on, but perhaps somebody has good ideas? So far I see that mixin in SpecialArg role sometimes wipes out parents array on HOW.

[15:05] <vrurg> Could be a moar issue.

[15:09] <jnthnwrthngtn> Maybe, but moar doesn't really know about the content of meta-objects; so far as it's concerned they're just, well, objects.

[15:10] <jnthnwrthngtn> How do you conclude it wipes out the parents array?

[15:13] *** [Coke] left
[15:16] *** [Coke] joined
[15:24] <[Coke]> .'

[15:36] <vrurg> jnthnwrthngtn: was dumping HOW fields.

[15:41] <vrurg> Weird thing, when it happens to routine parameters (__lowered_param_*) they're ok right after mixin, but may start failing a few lines down, within the same lower_signature sub. Since there're no races could be involved, and initially they all have >0 number of parents, I conclude that the array gets emptied accidentally. Loss of data by the VM is not excluded yet.

[16:07] <vrurg> Ok, probably it's pure NQP issue, after all. Tried with JVM backend and got 'Unhandled exception: Sub+{is-implementation-detail} object coerced to string'. Won't be able to work on this until later today, so if somebody wants to look into it – I don't mind. ;)

[16:07] <vrurg> afk for a couple of hour.

[16:08] <ugexe> https://gist.github.com/ugexe/8c34b26c5edbcaed3784d3cf377ae334 -- updated the gist to also include the lldb output from big sur (which does not fork)

[16:09] <ugexe> the big sur example is on 2021.08 whereas monterey is on master fwiw

[16:58] <ugexe> hmm in the big sur example it doesnt call uv__get_cpu_speed among other things

[17:41] *** patrickb joined
[17:46] <[Coke]> ugexe++

[18:00] *** Altai-man left
[18:02] *** reportable6 left
[18:24] *** Guest12 left
[18:28] <ugexe> rakudo 2020.08.2 works, 2020.10 does not. these correspond to https://github.com/libuv/libuv/commit/87f076515937345fda1a1dbc598f34e65e1b81c7

[18:54] *** squashable6 left
[18:56] *** squashable6 joined
[19:23] *** patrickb left
[19:44] *** MasterDuke joined
[19:54] <ugexe> __si_module_static_mdns_block_invoke -- i cant find anything on si_module_static_mdns but it kind of feels strange it is being queried as part of dlopen

[19:55] <ugexe> strange in that it looks like it might be mDNS

[20:04] *** reportable6 joined
[20:16] *** [Coke] left
[20:17] <vrurg> BTW, do we have an article/paper where the exact technical meaning of wanted/unwanted is explained? I was googling awhile ago, with no apparent success.

[20:17] <timo> that's what powers "useless use of" messages

[20:22] *** [Coke] joined
[20:32] <vrurg> timo: that's where my understanding basically ends. :) It looks like there are nuances I'm not aware of. For example, does it affect lowering of vars?

[20:33] <timo> hm, maybe that's only influenced by whether a lexical is used by an inner scope or not

[20:35] *** [Coke] left
[20:35] <vrurg> It should. But somehow I probably fail to indicate this... Whatever, that's what I was debugging when encountered the NQP bug with mixins. So, the bug goes first.

[20:36] <timo> how do you mean "indicate"?

[20:39] <vrurg> First I thought that 'whanted' attribute of a node means no variables involved are to be lowered. Second, I see that lowering code is using some annotations to skip variables. But this part of the optimizer is rather big and I didn't get deeper into it yet.

[20:43] *** [Coke] joined
[20:49] <timo> i'm a little surprised to hear wanted was involved in variable lowering

[20:52] <vrurg> I don't say it, I _thought_ it is. :) That's why I'd like to find out more about it. Otherwise I either monkey-copying from other code. Or trying to guess, sometimes in a hard way.

[20:54] <timo> i'm headachy today, i'm not sure if i can be of too much help

[20:54] *** [Coke] left
[20:57] <vrurg> timo: don't bother and get well soon! I'll figure out eventually. :)

[21:00] <timo> i can recommend asking many questions in here anyway

[21:01] <Geth> ¦ MoarVM: 8a684b3304 | (Stefan Seifert)++ | 2 files

[21:01] <Geth> ¦ MoarVM: Fix out of bounds read of PHI facts in spesh

[21:01] <Geth> ¦ MoarVM: 

[21:01] <Geth> ¦ MoarVM: During spesh optimization, we remove reads of registers with dead writers from

[21:01] <Geth> ¦ MoarVM: PHI nodes. It could happen that the PHI node ended up with no registers to read

[21:01] <Geth> ¦ MoarVM: at all. However the following analysis code assumed that we'd always have at

[21:01] <Geth> ¦ MoarVM: least 1 register to read from, resulting in an array read out of bounds error

[21:01] <Geth> ¦ MoarVM: and a variety of failure modes.

[21:01] <Geth> ¦ MoarVM: <…commit message has 7 more lines…>

[21:01] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8a684b3304

[21:01] <Geth> ¦ MoarVM: 7d58542da1 | (Jonathan Worthington)++ (committed using GitHub Web editor) | 2 files

[21:01] <Geth> ¦ MoarVM: Merge pull request #1610 from MoarVM/fix_phi_out_of_bounds_read

[21:01] <Geth> ¦ MoarVM: 

[21:01] <Geth> ¦ MoarVM: Fix out of bounds read of PHI facts in spesh

[21:01] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7d58542da1

[21:02] <MasterDuke> is there any difference between `has Int $.a is default(0)` and `has Int $a = 0` if $!a is never set to Nil?

[21:03] <lizmat> not sure anymore, jnthnwrthngtn reworked that part with new-disp I believe

[21:26] *** [Coke] joined
[21:29] <jnthnwrthngtn> MasterDuke: I suspect the first is cheaper

[21:30] <jnthnwrthngtn> MasterDuke: Although it's probably relatively fine margins, and likely vanishes once PEA is far enough along

[21:31] <jnthnwrthngtn> nine: One merged, one with minor comment but approved, the other one I need more time on, but posted an initial concern.

[21:32] <MasterDuke> performance-wise, i tried a sort of micro-benchmark and it seemed like maybe `= 0` was *very* slightly faster (with MVM_SPESH_BLOCKING=1), but it was small enough i'd need to re-run a lot more times to be sure. anyway they're close enough i'm not going to change existing code

[21:33] <MasterDuke> but in this case i was actually more interested in semantics

[21:34] <jnthnwrthngtn> They should result in the same outcome (assuming a literal value)

[21:34] <MasterDuke> thanks, good to know

[21:34] <jnthnwrthngtn> Actually if you never use $a beyond that point PEA may already be eating the difference.

[21:34] <timo> spesh log could perhaps give a little bit of insight, but i couldn't analyze one right now

[21:35] <jnthnwrthngtn> Also --profile and see if a load of Scalar allocations are getting optimized away :)

[21:36] <jnthnwrthngtn> But if they aren't then a) the allocation dominates, b) the literal 0 means easy pickings for tossing out the type guard, and that leaves an attribute bind, which is a couple of machine instructions

[21:37] <jnthnwrthngtn> (And if PEA does work to its full potential and your loop literally is no more than a variable decl with default or an assignment, then both become an empty loop.)

[21:38] <MasterDuke> m: use nqp; class I { has Int $.n is default(0); method from-posix-nanos(I:U: Int:D $nanos --> I:D) { nqp::p6bindattrinvres(nqp::create(I),I,q|$!n|,$nanos) } }; my $a; my $b = nqp::time; $a = I.from-posix-nanos($b) for ^10_000_000; say now - INIT now; say $a

[21:38] <camelia> rakudo-moar 57e1ed028: OUTPUT: «0.266082961␤I.new(n => 1638394682931903452)␤»

[21:38] <MasterDuke> m: use nqp; class I { has Int $.n = 0; method from-posix-nanos(I:U: Int:D $nanos --> I:D) { nqp::p6bindattrinvres(nqp::create(I),I,q|$!n|,$nanos) } }; my $a; my $b = nqp::time; $a = I.from-posix-nanos($b) for ^10_000_000; say now - INIT now; say $a

[21:38] <camelia> rakudo-moar 57e1ed028: OUTPUT: «0.265698586␤I.new(n => 1638394692289436231)␤»

[21:38] <MasterDuke> ^^^ was my benchmark

[21:40] <timo> huh, does that even make a difference when you're using bindattr like that?

[21:41] <jnthnwrthngtn> Oh

[21:41] <jnthnwrthngtn> Yeah, then it's irrelevant :)

[21:41] <jnthnwrthngtn> Because create doesn't run BUILDALL and friends anyway

[21:42] <jnthnwrthngtn> So there's no way the default closure will apply

[21:42] <jnthnwrthngtn> And the Scalar is being discarded

[21:42] <jnthnwrthngtn> m: for ^10_000_000 { my $x is default(0) }; say now - INIT now

[21:42] <camelia> rakudo-moar 57e1ed028: OUTPUT: «1.430858666␤»

[21:43] <jnthnwrthngtn> m: for ^10_000_000 { my $x = 0 }; say now - INIT now

[21:43] <camelia> rakudo-moar 57e1ed028: OUTPUT: «0.207846194␤»

[21:43] <jnthnwrthngtn> Huh? :)

[21:43] <jnthnwrthngtn> m: for ^10_000_000 { my $x }; say now - INIT now

[21:43] <camelia> rakudo-moar 57e1ed028: OUTPUT: «0.16197103␤»

[21:43] <jnthnwrthngtn> OK, that surprises me a lot

[21:43] <jnthnwrthngtn> m: for ^10_000_000 { }; say now - INIT now

[21:43] <camelia> rakudo-moar 57e1ed028: OUTPUT: «0.059409284␤»

[21:44] <jnthnwrthngtn> I wonder if `is default` somehow frustrates lexical -> local lowering and thus PEA?

[21:44] <jnthnwrthngtn> Worth a dig. Perhaps a LHF

[21:44] * jnthnwrthngtn afk for a bit

[21:45] <MasterDuke> 10000009 Scalar allocations

[21:46] <MasterDuke> same with the `= 0` version

[21:47] <MasterDuke> is default(0): In total, 10004354 call frames were entered and exited by the profiled code. Inlining eliminated the need to create 9 call frames (that's 0%).

[21:47] <MasterDuke> = 0: In total, 9476 call frames were entered and exited by the profiled code. Inlining eliminated the need to create 19994888 call frames (that's 99.95%).

[21:48] *** linkable6 left
[21:48] *** linkable6 joined
[21:49] <MasterDuke> `sp_runbytecode_v  r13(2), liti64(140269206293408), liti16(0),   r6(2),   r5(2)  # [015] could not inline 'set' (21) candidate 0: bytecode is too large to inline` maybe?

[21:52] <MasterDuke> well, there were a couple 'too large' could not inlines, and one `inline-preventing instruction: takeclosure` + `could not inline '' (3) candidate 0: target has a :noinline instruction`

[22:02] <timo> huh, 99.95% inlined should make a big performance difference

[22:04] <MasterDuke> is default(0) also did 687 GCs vs 114 for = 0

[22:10] <timo> could the profiler have made an unfortunate impact somehow?

[22:11] <MasterDuke> well, we saw the 7x perf difference here on camelia

[22:12] <timo> what were you doing differently when you got a difference so small it wasn't easily measurable?

[22:13] <MasterDuke> i wasn't actually assigning, i was using bindattr

[22:13] <MasterDuke> also i wasn't creating a new variable in the loop body

[22:14] <timo> ok

[22:14] <timo> that makes sense now

[22:15] <MasterDuke> https://gist.github.com/MasterDuke17/be5bc45d38e0a4643b44249435d0743c perf reports for the two cases

[22:15] <timo> i would really have expeted default(0) to be faster than = 0 since in theory the thing on the right could be code that needs to be run, but we do already recognize it's a static value, so why aren't the two the exact same

[22:16] <MasterDuke> seems to me to be something about not being able to inline 'unit' because of the takeclosure

[22:17] <MasterDuke> which doesn't happen in the spesh log of the assigning version

[22:21] <timo> try isolating the for loop in its own sub?

[22:22] <MasterDuke> m: sub foo() {  for ^10_000_000 { my $x is default(0) } }; foo; say now - INIT now

[22:22] <camelia> rakudo-moar 57e1ed028: OUTPUT: «1.725214816␤»

[22:22] <MasterDuke> m: sub foo() {  for ^10_000_000 { my $x = 0 } }; foo; say now - INIT now

[22:22] <camelia> rakudo-moar 57e1ed028: OUTPUT: «0.20743934␤»

[22:27] <timo> the default(0) is even slower now

[22:28] <timo> +/- camelia being rather noisy i imagine

[22:39] <MasterDuke> `sub foo { for ^10_000_000 { my $x is default(0) }; return 3 }; sub bar { say (5_000_000_000..5_000_001_000).grep(*.is-prime).tail; say foo; say (^1_000_000).pick gcd (^1_000_000).pick }; bar; say now - INIT now` shows the same behavior

[22:40] <MasterDuke> in the after of 'foo'. `inline-preventing instruction: takeclosure` + `could not inline '' (3) candidate 0: target has a :noinline instruction`

[22:45] <timo> maybe the output from --target=optimize gives a hint

[22:47] <MasterDuke> added to gist

[22:49] <MasterDuke> gist updated with both versions

[22:52] <MasterDuke> oh. `- QAST::Var(lexical $x :decl(static))` for assign vs `- QAST::Var(lexical $x :decl(contvar))  :lexical_used_implicitly<?>` for is default

[22:54] <MasterDuke> https://gist.github.com/MasterDuke17/be5bc45d38e0a4643b44249435d0743c#file-assign-target-optimize-L71-L96 compared to https://gist.github.com/MasterDuke17/be5bc45d38e0a4643b44249435d0743c#file-is_default-target-optimize-L72-L88

[23:02] <MasterDuke> ha, with rakudo option `--optimize=0`, assign takes 2.8s, but is default takes the same 1.3

[23:14] <japhb> MasterDuke: Another big difference between those two gists is the presence of an extra block in the second (versus a lot more attribute binding in the first)

[23:17] <MasterDuke>  adding `$v.implicit-lexical-usage = False;` here https://github.com/rakudo/rakudo/blob/master/src/core.c/Variable.pm6#L78 drops 0.05s off the is default version, but does have a single failing spectest

[23:18] <MasterDuke> not ok 182 - Failure.new as a default value on an unconstrained Scalar works

[23:18] <MasterDuke> # Failed test 'Failure.new as a default value on an unconstrained Scalar works'

[23:18] <MasterDuke> # at t/spec/S02-names/is_default.rakudo.moar line 395

[23:18] <MasterDuke> # Error: Object of type Failure in QAST::WVal, but not in SC

[23:51] *** childlikempress joined
[23:51] *** moon-child left
[23:52] *** childlikempress is now known as moon-child

