[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:21] *** CaCode_ joined
[00:23] *** CaCode- left
[00:24] *** CaCode joined
[00:25] *** CaCode- joined
[00:25] *** CaCode_ left
[00:28] *** CaCode left
[00:59] *** CaCode- left
[01:57] *** discord-raku-bot joined
[02:36] *** frost joined
[03:36] *** releasable6 left
[03:36] *** evalable6 left
[03:36] *** linkable6 left
[03:37] *** releasable6 joined
[04:04] *** squashable6 left
[05:04] *** quotable6 left
[05:04] *** shareable6 left
[05:04] *** bisectable6 left
[05:04] *** nativecallable6 left
[05:04] *** greppable6 left
[05:04] *** releasable6 left
[05:04] *** tellable6 left
[05:04] *** unicodable6 left
[05:04] *** reportable6 left
[05:04] *** statisfiable6 left
[05:04] *** sourceable6 left
[05:04] *** bloatable6 left
[05:04] *** notable6 left
[05:04] *** committable6 left
[05:04] *** coverable6 left
[05:04] *** benchable6 left
[05:05] *** bloatable6 joined
[05:06] *** benchable6 joined
[05:06] *** nativecallable6 joined
[05:06] *** statisfiable6 joined
[05:07] *** tellable6 joined
[05:07] *** coverable6 joined
[05:07] *** greppable6 joined
[05:56] *** frost left
[06:00] *** frost joined
[06:05] *** unicodable6 joined
[06:05] *** squashable6 joined
[06:05] *** shareable6 joined
[06:05] *** committable6 joined
[06:06] *** sourceable6 joined
[06:39] *** evalable6 joined
[07:04] *** reportable6 joined
[07:05] *** bisectable6 joined
[07:07] *** quotable6 joined
[07:38] *** linkable6 joined
[08:07] *** releasable6 joined
[08:07] *** notable6 joined
[08:13] *** CaCode joined
[08:23] *** frost left
[08:23] *** CaCode left
[09:20] *** MasterDuke joined
[09:36] *** Colt left
[09:40] <MasterDuke> perf says 53% of the time is spent in `__memmove_avx_unaligned_erms` for `my $str; $str ~= "$_\n" for 0..300000` ?!?!

[09:54] <Nicholas> if true, that seems LTA

[09:54] <Nicholas> good *, *

[10:36] *** linkable6 left
[10:36] *** evalable6 left
[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: 2c776f530e | (Stefan Seifert)++ | 3 files

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: Treat MVM_CALLSITE_ARG_(FLAT | NAMED) like FLAT_NAMED

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: 

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: If both the FLAT and NAMED flags are set, this means exactly the same as

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: the FLAT_NAMED flag, so we treat them the same. Later on we can free up

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: the FLAT_NAMED flag. Doing this in two steps to avoid bootstrapping issues.

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: review: https://github.com/MoarVM/MoarVM/commit/2c776f530e

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: cab24960ca | (Stefan Seifert)++ | 6 files

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: Free up MVM_CALLSITE_ARG_FLAT_NAMED flag

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: 

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: The flag is superseeded by the combination of MVM_CALLSITE_ARG_FLAT and

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: MVM_CALLSITE_ARG_NAMED. Freeing it up, so we have a flag available for

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: unsigned integers.

[10:50] <Geth> ¬¶ MoarVM/remove_callsite_flat_named_flag: review: https://github.com/MoarVM/MoarVM/commit/cab24960ca

[10:51] *** Geth left
[10:51] *** Geth joined
[11:37] *** linkable6 joined
[11:59] *** patrickb joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:38] *** evalable6 joined
[13:06] <nine> Bootstrapping is da worst

[13:34] <lizmat> curryworst >

[13:34] <lizmat> ?

[13:37] * lizmat runs

[13:50] <Nicholas> nine: that (plus the NQP branch) works on "my" machine

[13:54] <nine> And just 3 hours later I've finally managed to build the fix_unsigned branch after rebasing on top of remove_callsite_flat_named_flag

[13:54] <Nicholas> \o/

[13:54] <Nicholas> ASAN yawns at your work so far.

[13:54] <Nicholas> (the branch I tested. Not the unsigned epic)

[14:08] *** Colt joined
[14:13] <timo> you've had the worst, now try the THIRST......... QUENCHER!

[14:26] *** Colt left
[14:27] *** Colt joined
[14:30] *** Colt left
[14:31] *** Colt joined
[14:32] *** Colt left
[14:34] *** Colt joined
[14:34] *** Colt left
[14:34] *** Colt joined
[14:35] *** Colt left
[17:30] *** linkable6 left
[17:30] *** reportable6 left
[17:30] *** notable6 left
[17:30] *** evalable6 left
[17:30] *** unicodable6 left
[17:30] *** bisectable6 left
[17:30] *** sourceable6 left
[17:30] *** shareable6 left
[17:30] *** quotable6 left
[17:30] *** releasable6 left
[17:30] *** statisfiable6 left
[17:30] *** tellable6 left
[17:30] *** benchable6 left
[17:30] *** coverable6 left
[17:30] *** squashable6 left
[17:30] *** bloatable6 left
[17:30] *** nativecallable6 left
[17:30] *** greppable6 left
[17:30] *** committable6 left
[17:30] *** unicodable6 joined
[17:31] *** benchable6 joined
[17:32] *** coverable6 joined
[17:32] *** nativecallable6 joined
[17:32] *** evalable6 joined
[17:33] *** tellable6 joined
[17:33] *** reportable6 joined
[17:33] *** releasable6 joined
[17:48] <nine> I hope there is a way to avoid this uglyness: $!strings.write_uint8(my uint $zero := 0)

[17:54] <[Coke]> add a new literal type with prefix u?

[17:55] <[Coke]> <-- Me, not helping.

[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:07] <lizmat> nine: maybe we need more candidates for write-uint?

[18:09] <lizmat> m: dd Buf.new.write-uint8(2,767)    # this seems to work ok?

[18:09] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Buf.new(0,0,255)‚ê§¬ª

[18:21] <nine> lizmat: on fix_unsigned branches

[18:22] <lizmat> nine: the code now says: "# for simplicity's sake, these are not multis"

[18:22] <lizmat> they could well turn into multis afaics

[18:23] <lizmat> m: multi sub a(int $a) { dd }; multi sub a(Int $a) { dd }; a 42; a my int $ = 666

[18:23] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´sub a(Int $a)‚ê§sub a(int $a)‚ê§¬ª

[18:25] <lizmat> m: my uint8 $a = my Int $ = 767; say $a   # the non-native candidate would only need to do something like that?

[18:25] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´255‚ê§¬ª

[18:31] *** bloatable6 joined
[18:32] *** greppable6 joined
[18:32] *** sourceable6 joined
[18:32] *** statisfiable6 joined
[18:33] *** linkable6 joined
[18:33] *** committable6 joined
[19:09] <nine> Ends in "No applicable candidates found to dispatch to for 'write_uint8'."

[19:16] <Nicholas> you need more curry?

[19:17] <lizmat> nine: is that really _uint8   ??   or -uint8 ?

[19:31] *** notable6 joined
[19:33] *** shareable6 joined
[19:33] *** bisectable6 joined
[19:33] *** squashable6 joined
[19:54] <nine> _uint8

[19:57] <nine> I have version for uint8, int8, uint and int but none seem to match

[19:59] <lizmat> but but in Rakudo they're called with kebab-case ?

[19:59] * lizmat is confused

[20:04] *** CaCode joined
[20:08] <nine> Logical consequence: I'm talking about NQP ;)

[20:10] *** vrurg left
[20:13] *** vrurg joined
[20:18] *** Geth left
[20:18] *** Geth joined
[20:19] *** [Coke] left
[20:22] *** [Coke] joined
[20:22] <[Coke]> .

[20:41] *** Geth joined
[20:53] *** Geth left
[20:53] *** Geth joined
[21:33] *** quotable6 joined
[23:20] *** patrickb left
[23:21] <MasterDuke> nqp::radix_I includes the radix ** number-of-digits-converted (https://github.com/Raku/nqp/blob/master/docs/ops.markdown#radix) as one of its return values, but that doesn't seem to be used all that frequently

[23:23] <MasterDuke> i haven't benchmarked it yet, why couldn't that just be number-of-digits-converted? then the more common cases that don't use the value don't have all those extra bigint multiplications occurring, and the few users can do the exponentiation themselves

[23:33] <MasterDuke> oh, it looks like it might speed it up a bit

[23:33] <MasterDuke> m: use nqp; my $i; my int $r = (2**12).Int; my $l = ~(7**(+$r)); my $s = now; $i = nqp::radix_I(10, $l, 0, 0, Int)[0] for ^1_000; say now - $s; say $i

[23:33] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´1.482196017‚ê§332331798909192794102011386849386170669696888974932434480342064556621190171437688707278118090123647686658608145199786447897387758210523180413213249103122582779768286375171704314531172355189641656150934709823053250062924250588570076715465‚Ä¶¬ª

[23:36] <MasterDuke> locally that usually takes ~1.3s. if i strip out calculating the radix ** number-of-digits-converted and instead just return a bigint set to 1 (only slightly less work than actually required), the time drops to ~0.8s

[23:39] <MasterDuke> of course not quite as big a difference with smaller strings. if i use 2**5 as the range in the above example (and increase the iterations to 100_000, the time drops from ~0.16s to ~0.12s

[23:45] <MasterDuke> it's too late now, but maybe tomorrow i'll try creating a moarvm/nqp/rakudo trio of patches

