[01:19] *** lucasb left
[05:07] *** squashable6 left
[05:07] *** bloatable6 left
[05:07] *** linkable6 left
[05:07] *** notable6 left
[05:07] *** committable6 left
[05:07] *** greppable6 left
[05:07] *** tellable6 left
[05:07] *** benchable6 left
[05:07] *** releasable6 left
[05:07] *** shareable6 left
[05:07] *** coverable6 left
[05:07] *** nativecallable6 left
[05:07] *** sourceable6 left
[05:07] *** bisectable6 left
[05:07] *** statisfiable6 left
[05:07] *** unicodable6 left
[05:07] *** quotable6 left
[05:07] *** evalable6 left
[05:07] *** benchable6 joined
[05:07] *** bloatable6 joined
[05:07] *** squashable6 joined
[05:08] *** notable6 joined
[05:08] *** linkable6 joined
[05:08] *** coverable6 joined
[05:08] *** greppable6 joined
[05:08] *** sourceable6 joined
[05:08] *** quotable6 joined
[05:09] *** releasable6 joined
[05:09] *** statisfiable6 joined
[05:09] *** evalable6 joined
[05:09] *** nativecallable6 joined
[05:09] *** committable6 joined
[05:09] *** unicodable6 joined
[05:09] *** shareable6 joined
[05:10] *** bisectable6 joined
[05:10] *** tellable6 joined
[07:55] *** linkable6 left
[07:55] *** evalable6 left
[07:57] *** linkable6 joined
[07:57] *** evalable6 joined
[09:10] <nine> I've read here a couple of times (since people keep bringing it up) that LLVM JIT wouldn't be nearly as simple and/or wouldn't work as well as people assume. Looking at the docs I do get the impression that integrating LLVM is hardly straight forward.

[09:12] <nine> This however looks quite possible - even easy: https://gcc.gnu.org/onlinedocs/jit/intro/tutorial04.html

[09:12] <nine> And the optimizations it does are quite fascinating

[10:01] <nine> In other news: explicitly-manage really is a misnomer and its documentation is wrong ("If the string returned is passed to a NativeCall subroutine, it will not be freed by the runtime's garbage collector.")

[10:01] <nine> It's quite the opposite actually: the GC will free the encoded string as opposed to NativeCall doing so right after the call finishes

[10:03] <nine> It does give control to the user by tying the life time of the encoded string to the original string's.

[10:26] *** sena_kun joined
[10:32] <nine> Oh and the (undocumented) :encoding argument of explicitly-manage hasn't done anything since 2014

[10:42] *** MasterDuke joined
[10:44] <MasterDuke> nine: saw that phoronix article too?Â  do you think it would be a replacement for our current jit? an alternative like ffi/dyncall? or an extra tier, like the JS VMs?

[10:44] <nine> I do not even see a way to support explicitly-manage in JIT compled native calls

[10:45] <nine> MasterDuke: I guess that it'd be quite possible to map the Lego JIT's graph to gcc JIT's and replace dynasm that way. Probably the same is possible for the expr JIT. I'm just much less familiar with the latter's implementation.

[10:45] <nine> And yes, this would include a replacement for ffi/dyncall.

[10:47] <nine> Major benefits would be backends for all architectures, those interesting optimizations and less code to maintain (with a drastically increased bus factor)

[10:53] <MasterDuke> oh, i didn't realize it would remove ffi/dyncall, i was just using those as an example of something currently where we have selectable alternatives

[10:53] <MasterDuke> sounds nice

[11:05] <nine> In principle the JITed NativeCall stuff we have can replace the ffi/dyncall backends. I've just never finished it. It just supports what Inline::Perl5 needs. libgccjit would presumably simplify supporting the remaining types (like floats)

[11:23] *** Geth joined
[13:56] *** MasterDuke left
[14:06] *** sena_kun left
[14:16] <nine> Now working correctly: sub take_and_free_struct_but_not_struct(StructWithStruct $s is transferring-ownership(:except<$!s>)) is native($lib) { !!! }

[14:19] <nine> I've decided to only support a flat :except list and a flat :only list directly. For anything more complicated, plain old code is best to specify, i.e. :except(*.foo.bar.baz) or is transferring-ownership(:only(*.foo.bar.baz))

[14:21] <nine> Actually.... :except(*.foo) is excactly as short as :except<$!foo>

[14:25] <nine> OTOH I'm not sure how to implement :except(*.foo) anyway. With information in the form of :except<$!foo> I can generate code for nqp::setmanaged(nqp::getattr($param, $param.WHAT, $attribute-name), 0) and just leave out $attribute if it machtes any exception.

[14:26] <nine> With :only(*.foo) I'd generate nqp::setmanaged(nqp::call($only[0]), 0) without having to care about the actual attribute's name.

[14:27] <nine> But with :except(*.foo) I'd have to generate a runtime check for if nqp::getattr($param, $param.WHAT, $attribute-name) !=== nqp::call($only[0]) which is kinda horrible.

[14:28] <nine> Did I just imagine someone mentioning macros?

[14:32] *** lucasb joined
[15:24] <nine> Works correctly as well now: sub return_allocated_struct_with_static_struct(--> StructWithStruct) is transferring-ownership(:except<$!s>) is native($lib) { !!! }                         

[15:25] <nine> So what remains are really strings. Other than CStruct, CPPStruct, CUnion and CArray I cannot just give the string a managed-flag.

[15:27] <nine> For strings NativeCalls' API is a bit over-simplified again. Those other types are special NativeCall types that wrap the native object. For strings we expect high level Raku objects (Str) and create the native object on the fly.

[15:30] <nine> Would be easier if there was a CStr type as well. There is already a perfectly fine CStr repr even.

[15:39] *** elcaro left
[17:32] *** zakharyas joined
[17:35] *** domidumont joined
[18:48] *** sena_kun joined
[19:48] *** domidumont left
[21:33] *** zakharyas left
[23:22] *** lucasb left
