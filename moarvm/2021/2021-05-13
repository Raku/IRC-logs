[00:02] *** reportable6 left
[00:02] *** reportable6 joined
[00:40] *** MasterDuke left
[04:15] *** japhb left
[04:17] *** japhb joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:47] *** squashable6 left
[06:48] *** squashable6 joined
[07:51] *** domidumont joined
[08:06] *** zakharyas joined
[08:07] *** frost-lab joined
[09:33] *** Kaeipi joined
[09:34] *** Merfont left
[09:34] *** Kaeipi left
[09:35] *** Kaeipi joined
[09:41] *** Kaeipi left
[09:41] *** Kaiepi joined
[10:53] *** zakharyas left
[12:01] *** reportable6 left
[12:03] *** reportable6 joined
[13:07] *** zakharyas joined
[13:21] <lizmat> So I think I found a reason why some applications eat much more memory than expected

[13:21] <lizmat> on logs.liz.nl all of the raku logs are read, but the original raw log was *not* kept around

[13:21] <lizmat> a lot of substr into the raw log are

[13:22] <lizmat> to shortcut searching, I figured it could be beneficial keeping the original logs in memory

[13:22] <lizmat> to my surprise, this did *not* affect memory usage in any notable way

[13:23] <lizmat> so my conclusion is, is that a substr into a string *is* keeping the original string alive

[13:28] <lizmat> is that a correct assumption ?

[13:37] <jnthn> Yes

[13:58] <lizmat> and there is no way to "extract" a string from its "source" ?

[14:14] *** frost-lab left
[14:18] <jnthn> encode/decode

[14:18] <jnthn> Will certainly do it, of course at a cost

[14:18] <jnthn> .NFC.Str too, for a lower cost

[14:19] <lizmat> aha,,  ok, fair enough...something to keep in mind

[14:20] <lizmat> I was originally thinking about instead of keeping substrings, just keeping the raw log and offsets/lengths into that

[14:20] <lizmat> now this is clear to me, I realize the system is already doing that for me  :-)

[14:49] <timotimo> upon garbage collection, we may want to sometimes check if a very long string is being kept around just for a comparatively short substring

[14:51] <jnthn> MoarVM already does expose a way, iirc, to "flatten" a strand string into a single thing, and we could potentially add a named argument to substr like :copy to force it to avoid the optimization in question

[14:51] <jnthn> And implement it using that

[14:51] <jnthn> Or pass it down somehow

[14:55] <timotimo> yeah nqp::indexingoptimized is the op

[14:55] <timotimo> ideally nobody would have to think about this :D

[14:59] <lizmat> well, yeah...  actually, now I'm actually keeping the raw log accessible, I don't need it anymore  :-)

[15:10] <timotimo> i wonder if there should be access to the rope datastructure's details for users at all

[15:10] <timotimo> that sounds like there is now but i'm saying there shouldn't be

[15:10] <timotimo> i mean, i wonder if it'd be good if users could access the rope's pieces

[15:12] <ugexe> is that even possible for non-moarvm backends?

[15:13] <timotimo> no, they would just say "this has one piece, it has 0 repetitions, it starts at 0 and ends at n, and the target string is $self (maybe)

[15:13] <timotimo> "

[15:13] <timotimo> i guess that could be trouble if you iterate over it?

[15:14] <timotimo> there'd have to be a signal for "this is a terminal string"? "this is a leaf"?

[15:14] <lizmat> please note I'm fine with how it is now

[15:14] <lizmat> and it *is* an implementation detail

[15:14] <timotimo> mhm

[15:15] <lizmat> it's just that it is an extra reason when you're extracting information from a log file, using substr and all

[15:15] <lizmat> it's probably better *not* to slurp the whole file first

[15:16] <timotimo> even if you slurp it line-by-line, you'd keep each line around if you just hang on to a small substring

[15:16] <lizmat> yeah... there's that

[15:16] <lizmat> hmmm

[15:17] <lizmat> so, if I would run nqp::indexingoptimized on the slurped file contents

[15:17] <lizmat> and then discard it

[15:17] <timotimo> you'd be expected to call it on everything you substr'd out of it

[15:17] <lizmat> ah, ok, so that doesn't make sense then  :-)

[15:18] <timotimo> it's a little bit of work ;)

[15:18] <timotimo> overwrite the substr sub/method to call indexingoptimized on the result, that's how :copy would be implemented

[15:33] <lizmat> yeah, got that

[15:33] <lizmat> I'm not sure we should, though?

[15:35] <lizmat> previous discussion: https://github.com/rakudo/rakudo/pull/3975

[16:16] *** moon-child left
[16:21] *** moon-child joined
[17:15] *** domidumont left
[17:53] *** zakharyas left
[18:00] *** cog_ left
[18:02] *** reportable6 left
[18:02] *** reportable6 joined
[18:53] *** cog joined
[18:59] *** lucasb joined
[19:09] *** squashable6 left
[19:10] *** squashable6 joined
[19:11] *** cog left
[19:12] *** cog joined
[19:43] *** MasterDuke joined
[20:09] *** rypervenche left
[20:09] *** jpf1 left
[20:09] *** rypervenche joined
[20:09] *** jpf1 joined
[20:38] *** MasterDuke left
[20:44] *** MasterDuke joined
[21:38] *** MasterDuke left
