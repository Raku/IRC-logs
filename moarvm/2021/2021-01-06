[03:33] *** linkable6 joined
[03:33] *** bisectable6 joined
[03:33] *** squashable6 joined
[03:33] *** tellable6 joined
[03:33] *** committable6 joined
[03:33] *** bloatable6 joined
[03:33] *** coverable6 joined
[03:34] *** nativecallable6 joined
[03:34] *** benchable6 joined
[03:34] *** unicodable6 joined
[03:34] *** notable6 joined
[03:34] *** evalable6 joined
[03:35] *** greppable6 joined
[03:35] *** quotable6 joined
[03:35] *** releasable6 joined
[03:35] *** shareable6 joined
[03:35] *** sourceable6 joined
[03:35] *** statisfiable6 joined
[04:36] *** sourceable6 left
[04:36] *** quotable6 left
[04:36] *** coverable6 left
[04:36] *** greppable6 left
[04:36] *** bloatable6 left
[04:36] *** bisectable6 left
[04:36] *** statisfiable6 left
[04:36] *** evalable6 left
[04:36] *** notable6 left
[04:36] *** unicodable6 left
[04:36] *** nativecallable6 left
[04:36] *** committable6 left
[04:36] *** linkable6 left
[04:36] *** releasable6 left
[04:36] *** squashable6 left
[04:36] *** benchable6 left
[04:36] *** shareable6 left
[04:36] *** tellable6 left
[04:36] *** greppable6 joined
[04:37] *** bisectable6 joined
[04:37] *** releasable6 joined
[04:37] *** evalable6 joined
[04:37] *** notable6 joined
[04:37] *** quotable6 joined
[04:37] *** tellable6 joined
[04:38] *** benchable6 joined
[04:38] *** sourceable6 joined
[04:38] *** linkable6 joined
[04:38] *** statisfiable6 joined
[04:38] *** bloatable6 joined
[04:38] *** nativecallable6 joined
[04:39] *** squashable6 joined
[04:39] *** shareable6 joined
[04:39] *** unicodable6 joined
[04:39] *** committable6 joined
[04:39] *** coverable6 joined
[05:39] *** sourceable6 left
[05:39] *** bisectable6 left
[05:39] *** releasable6 left
[05:39] *** greppable6 left
[05:39] *** nativecallable6 left
[05:39] *** squashable6 left
[05:39] *** shareable6 left
[05:39] *** benchable6 left
[05:39] *** committable6 left
[05:39] *** statisfiable6 left
[05:39] *** evalable6 left
[05:39] *** linkable6 left
[05:39] *** coverable6 left
[05:39] *** tellable6 left
[05:39] *** bloatable6 left
[05:39] *** notable6 left
[05:39] *** quotable6 left
[05:39] *** unicodable6 left
[05:40] *** releasable6 joined
[05:40] *** committable6 joined
[05:40] *** greppable6 joined
[05:40] *** squashable6 joined
[05:40] *** linkable6 joined
[05:40] *** nativecallable6 joined
[05:41] *** notable6 joined
[05:41] *** bloatable6 joined
[05:41] *** coverable6 joined
[05:41] *** benchable6 joined
[05:41] *** evalable6 joined
[05:41] *** quotable6 joined
[05:42] *** tellable6 joined
[05:42] *** shareable6 joined
[05:42] *** statisfiable6 joined
[05:42] *** sourceable6 joined
[05:42] *** unicodable6 joined
[05:42] *** bisectable6 joined
[07:53] *** frost-lab joined
[08:07] *** domidumont joined
[08:44] *** sena_kun joined
[08:49] <nwc10> good *, #moarvm 

[09:08] *** brrt joined
[09:10] *** zakharyas joined
[10:09] <Geth> Â¦ MoarVM/asan_fixes: c2fff2c0a3 | (Stefan Seifert)++ | src/spesh/stats.c

[10:09] <Geth> Â¦ MoarVM/asan_fixes: Fix spesh sim stack leaking offset_logs and call_type_info

[10:09] <Geth> Â¦ MoarVM/asan_fixes: 

[10:09] <Geth> Â¦ MoarVM/asan_fixes: The stack simulation shifts off entries when they become too old. When doing so

[10:09] <Geth> Â¦ MoarVM/asan_fixes: it neglected to free potential allocated offset_logs and call_type_info.

[10:09] <Geth> Â¦ MoarVM/asan_fixes: review: https://github.com/MoarVM/MoarVM/commit/c2fff2c0a3

[10:09] <nine> And a good * it is :)

[10:11] <nwc10> I feel a bit bad saying this (because I struggle to find other PRs that I'm confident to review) but I have quite a few outstanding that "aren't making progress"

[10:12] <nwc10> although, to be fair, the one about integer caching needs a rework now that jnthn said that the language implementation was making wrong assumptions, not the imeplementation

[10:17] <MasterDuke> i was actually just looking at the open PRs last night, but most of yours i'm completely unqualified to review

[10:18] <nwc10> I know this feeling :-(

[10:18] <nwc10> (thanks)

[10:21] <brrt> yeah, I have a few as well

[10:22] <nine> No one is really qualified to do these reviews. But then, reviews are as much (or maybe even more) a tool of spreading knowledge as they are a quality assurance measure. I.e. you don't do reviews because you're qualified. You're qualified because you do reviews.

[10:29] *** patrickb joined
[10:33] *** frost-lab left
[10:42] *** frost-lab joined
[10:50] *** domidumont left
[10:51] *** domidumont joined
[11:02] *** patrickb left
[11:12] *** brrt left
[11:19] *** sena_kun left
[11:20] *** sena_kun joined
[11:57] *** Altai-man joined
[12:00] *** sena_kun left
[12:23] <MasterDuke> speaking of reviewing, has anyone looked at my draft gmp PR? it's pretty much ready to go, really only waiting on figuring out the windows build. the code changes should all be good to go

[12:24] <MasterDuke> nwc10: you may be most qualified, since it seems you know things about how computers do math

[12:33] *** zakharyas left
[12:49] *** brrt joined
[13:12] *** ggoebel joined
[13:14] *** sena_kun joined
[13:17] *** Altai-man left
[13:21] *** frost-lab left
[13:40] *** Altai-man joined
[13:43] *** sena_kun left
[13:48] *** Altai-man left
[14:33] *** sena_kun joined
[14:56] *** zakharyas joined
[15:14] *** ggoebel left
[15:18] <nine> Ah, NativeCall's inlined data structures again :(

[15:19] <nine> Currently we leak all C structs owned by a CStruct object. If we don't, we crash, because we even try to free inlined structs, which were not actually allocated.

[15:25] <brrt> ... our model needs to track which objects are actually allocated, then?

[15:25] <brrt> .oO( Alternatively, we implement our own malloc? )

[15:29] <timotimo> we really need an object / repr that represents an "allocation" that can be "owned" or "referenced"

[15:30] <timotimo> and sub-pieces may also have to be tracked back to the actual allocations

[15:32] <MasterDuke> would we want to "count" these "references"?

[15:34] *** ggoebel joined
[15:36] <timotimo> i think it'd be enough to "collect" them

[15:37] <MasterDuke> this sounds like a brand new concept. someone could write this idea up and get a phd out of it

[15:40] *** brrt left
[15:48] <timotimo> i also kind of sort of wish we had something like python's Buffer API

[16:00] <timotimo> even if only read-only it'd be cool for moving data to C land

[16:10] <nine> Intriguing: while copying the managed flag from CArray to CStruct does fix the problem there, we still got the same problem for CArray itself. Apparently because we code gen a call to CArray.new in the CStruct's BUILDPLAN

[17:07] <timotimo> oh, and .new will set the managed flag to true, huh?

[17:17] <nine> yes

[17:22] <nine> It will also allocate memory for its storage, which will be leaked by the following bindattr call

[17:22] <timotimo> ha, ok

[17:28] <nine> Apparently just skipping inlined attributes in BUILDPLAN is not a bad strategy

[17:38] *** squashable6 left
[17:41] *** Altai-man joined
[17:42] *** squashable6 joined
[17:43] *** sena_kun left
[18:03] *** domidumont left
[19:26] *** zakharyas left
[20:06] *** sxmx joined
[21:06] *** zakharyas joined
[21:16] *** zakharyas left
[21:42] *** sena_kun joined
[21:44] *** Altai-man left
[21:52] *** ggoebel left
[21:56] *** samcv joined
[22:21] *** sena_kun left
[22:37] *** ggoebel joined
[23:11] *** ggoebel left
[23:32] *** squashable6 left
[23:32] *** squashable6 joined
