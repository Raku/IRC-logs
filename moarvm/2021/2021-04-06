[01:57] *** frost-lab joined
[05:15] *** mtj_ left
[05:31] *** linkable6 left
[05:34] *** linkable6 joined
[05:42] *** mtj_ joined
[05:49] *** mtj_ left
[05:49] *** mtj joined
[05:51] *** mtj left
[05:51] *** mtj joined
[05:52] *** mtj left
[06:05] <Geth> ¬¶ MoarVM/fix_segfault_on_exit_with_spesh_log: 0fa3555648 | (Stefan Seifert)++ | src/moar.c

[06:05] <Geth> ¬¶ MoarVM/fix_segfault_on_exit_with_spesh_log: Fix possible segfault on exit when using spesh log

[06:05] <Geth> ¬¶ MoarVM/fix_segfault_on_exit_with_spesh_log: 

[06:05] <Geth> ¬¶ MoarVM/fix_segfault_on_exit_with_spesh_log: A normal exit without --full-cleanup did not stop the spesh thread. So spesh

[06:05] <Geth> ¬¶ MoarVM/fix_segfault_on_exit_with_spesh_log: may actually still be active and try to print things to the spesh log when

[06:05] <Geth> ¬¶ MoarVM/fix_segfault_on_exit_with_spesh_log: MVM_vm_exit closes the spesh log file handle. This would lead to a segfault in

[06:05] <Geth> ¬¶ MoarVM/fix_segfault_on_exit_with_spesh_log: vfprintf. Fix by stoping and joining the spesh thread even in MVM_vm_exit if

[06:05] <Geth> ¬¶ MoarVM/fix_segfault_on_exit_with_spesh_log: spesh logging is active.

[06:05] <Geth> ¬¶ MoarVM/fix_segfault_on_exit_with_spesh_log: 

[06:05] <Geth> ¬¶ MoarVM/fix_segfault_on_exit_with_spesh_log: Fixes GH #1434

[06:05] <Geth> ¬¶ MoarVM/fix_segfault_on_exit_with_spesh_log: review: https://github.com/MoarVM/MoarVM/commit/0fa3555648

[06:06] <nwc10> good *, #moarvm 

[06:07] <nwc10> [Coke]: no idea. #995 is a mystery

[06:14] <nine> #995 is now closed :)

[06:47] *** domidumont joined
[07:54] *** zakharyas joined
[07:59] *** dogbert17 left
[07:59] *** dogbert17 joined
[08:02] *** dogbert11 joined
[08:03] *** dogbert11 left
[08:05] *** dogbert11 joined
[08:06] *** dogbert17 left
[08:14] *** domidumont left
[08:15] <dogbert11> nine: switching lines 885 and 886 in src/core/frame.c didn't fix the bug

[08:16] *** dogbert17 joined
[08:18] *** dogbert12 joined
[08:20] *** dogbert11 left
[08:21] *** dogbert17 left
[08:23] *** dogbert17 joined
[08:27] *** dogbert12 left
[08:30] *** sena_kun left
[08:31] *** sena_kun joined
[08:34] *** dogbert11 joined
[08:37] *** dogbert12 joined
[08:37] *** dogbert17 left
[08:40] *** dogbert11 left
[08:42] *** dogbert17 joined
[08:44] <nine> dogbert12: Yeah, after a night's sleep that wasn't that bright an idea after all.

[08:45] <nine> That "MVM_fixed_size_free(tc, tc->instance->fsa, sizeof(MVMFrameExtra), e);" in remove_one_frame (frame.c:885) needs to read "MVM_fixed_size_free_at_safepoint(tc, tc->instance->fsa, sizeof(MVMFrameExtra), e);"

[08:45] *** dogbert12 left
[08:47] *** dogbert11 joined
[08:48] <dogbert11> nine: cool, I'll try it

[08:51] *** dogbert17 left
[08:51] <dogbert11> test is now running

[08:54] <MasterDuke> m: say "\c[LATIN CAPITAL LETTER A]" # also leaks with --full-cleanup due to https://github.com/MoarVM/MoarVM/blob/master/src/strings/unicode_ops.c#L678

[08:54] <camelia> rakudo-moar 726a75e24: OUTPUT: ¬´A‚ê§¬ª

[09:22] *** frost-lab left
[09:28] <MasterDuke> hm. i had to rerun tools/ucd2c.pl to move the codepoints_by_name hash to MVMInstance, but it also modified some of the generated comments attached to emoji values (e.g., `/* FACTORY WORKER */ /*Emoji_ZWJ_Sequence */` becomes `/* FACTORY WORKER */ /*RGI_Emoji_ZWJ_Sequence */`)

[09:31] <MasterDuke> which really isn't that big a deal, and i guess that change could be reverted, but now i wonder if i should scour the diff for actual substantial changes to the unicode values...

[09:32] <nwc10> it *might* be faster to (0) take a clean checkout of master (1) run tools/ucd2c.pl (2) see what diffs happen

[09:32] <nwc10> and then start from the assumption that those are either (1) wrong or (2) expected

[09:33] <nwc10> I don't know which version of Unicode MoarVM *has*, but that tool tries to download the *current* version IIRC

[09:33] <nwc10> (so may not be the same)

[09:33] <nwc10> and the location of some files on their ftp site moved

[09:33] <MasterDuke> i think it's the same version, but some of the "extra" data has changed

[09:33] <MasterDuke> well, a spectest passed

[09:35] <MasterDuke> but yeah, maybe i should update on master and then rebase my branch. cleaner diff that way

[09:35] <nwc10> that too.

[09:36] <nwc10> but I meant, "see what tools/ucd2c.pl changes on master"

[09:36] <MasterDuke> yep

[09:36] <nwc10> it might be 20 lines. It might be 2000. If it's 2000, that's going to be awkard

[09:36] <nwc10> it it's one block of names for Emojis, that's not. (I *think* that's what I figured out was changing when I re-ran it)

[09:37] <MasterDuke> ~1857 lines changed (on my branch, i assume it's going to be roughly the same on master)

[09:40] <MasterDuke> i guess it won't be too hard to pull the actual code from the diff and exclude those comments and see if there is any real change

[10:00] <MasterDuke> oh, there are some data changes

[10:00] <MasterDuke> -static const MVMint32 uni_seq_1356[] = {5,0x1F935,0x1F3FF,0x200D,0x2642,0xFE0F}; /* MAN IN TUXEDO: DARK SKIN TONE */ /*Emoji_Modifier_Sequence */

[10:00] <MasterDuke> +static const MVMint32 uni_seq_1356[] = {2,0x1F935,0x1F3FF}; /* MAN IN TUXEDO: DARK SKIN TONE */ /*RGI_Emoji_ZWJ_Sequence */

[10:07] *** domidumont joined
[10:18] <lizmat> re unicode version: are we still up to date on that?

[10:18] <lizmat> I was updating the aliases to the most recent version, and the test showed breakage

[10:19] <lizmat> tools/build/makeUNIPROP.raku   (rakudo) more specifically

[10:45] <MasterDuke> changes in data are above my unicode pay grade, so i'm going to only include my changes to the code generated (not the generated tables)

[10:49] <lizmat> yeah,  similarly here  :-)

[10:52] *** mtj joined
[11:19] *** sena_kun left
[11:20] *** sena_kun joined
[11:26] *** frost-lab joined
[11:27] *** zakharyas left
[11:42] *** MasterDuke left
[11:43] *** linkable6 left
[11:43] *** MasterDuke joined
[11:44] *** linkable6 joined
[11:47] <Geth> ¬¶ MoarVM: demostanis++ created pull request #1460: Fix when building to a directory which includes a '+' in its file name

[11:47] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1460

[12:26] *** zakharyas joined
[12:30] *** frost-lab left
[13:02] *** MasterDuke left
[13:03] *** MasterDuke joined
[15:33] <Geth> ¬¶ MoarVM: MasterDuke17++ created pull request #1461: Cleanup of a bunch of Unicode hashes

[15:33] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1461

[15:36] <[Coke]> nine++ #995

[15:53] <dogbert11> nine: Ihave been running the test for a few hours and the crash has not shown its ugly face. Could ofc be a coincidence.

[16:00] <MasterDuke> nine: should we `MVM_dll_free` all libraries in `instance->dll_registry` if --full-cleanup?

[16:18] <nine> We have a dll registry?

[16:19] <MasterDuke> it's not just dlls, seems to be just loaded libraries in general

[16:21] <MasterDuke> but if you `valgrind --leak-check=full --show-leak-kinds=all raku --full-cleanup -e ''` you'll see some 'still reachable:' stuff that's because of MVM_nativecall_load_lib

[16:21] <MasterDuke> one of which is "/home/dan/Source/perl6/install/share/perl6/runtime/dynext/libperl6_ops_moar.so"

[16:25] <japhb> MasterDuke: That change in uni_seq_ is odd.  I mean, the capital letter name seems accurate (it describes the first two codepoints), but the extra codepoints in the first one don't seem to do much except request Emoji presentation (specifying male just seems redundant with the first codepoint), and the second one doesn't actually contain a ZWJ.  Maybe it's intended to be used *with* a ZWJ sequence?

[16:52] <nine> MasterDuke: but MVM_nativecall_load_lib doesn't use MVM_dll_load, it's an alias for dlLoadLibrary respectively dlopen

[16:53] <nine> Oh, it's the other way round. MVM_dll_load uses MVM_nativecall_load_lib

[16:53] <nine> I wonder if MVM_dll_load is actually used for anything bug libperl6_ops_moar.so

[16:53] <nine> s/bug/but/

[16:54] <jnthn> afaik it isn't, and that is eventually going away too

[17:04] *** domidumont left
[17:28] <MasterDuke> japhb: i know nothing about unicode, i just showed the first non-comment difference i found. you'd have to bring it up with samcv (or someone else who knows anything about unicode)

[17:30] <MasterDuke> nine: that is the only one opened during `raku -e ''`, but even if it's going away i think the question of should we be MVM_dll_free'ing them still stands

[17:41] *** patrickb joined
[17:42] *** MasterDuke left
[17:57] *** zakharyas left
[18:16] *** MasterDuke joined
[18:22] <MasterDuke> jnthn, nine: or are you saying that entire hash table is going to go away?

[18:29] *** linkable6 left
[18:29] *** linkable6 joined
[18:57] *** japhb left
[18:58] *** japhb joined
[18:58] *** japhb left
[19:03] *** MasterDuke left
[19:14] <nwc10> .tell MasterDuke I think that the context was that MVM_dll_load will go away, because the long term goal is to provide sufficient in MoarVM that Rakduo doesn't need any C code (at least, none that needs C-level linking)

[19:14] <tellable6> nwc10, I'll pass your message to MasterDuke

[19:43] *** zakharyas joined
[19:50] *** japhb joined
[20:05] <jnthn> Yes, indeed, I was talking about the Rakudo .so

[20:08] *** patrickb left
[20:19] *** MasterDuke joined
[20:19] <MasterDuke> .

[20:19] <tellable6> 2021-04-06T19:14:40Z #moarvm <nwc10> MasterDuke I think that the context was that MVM_dll_load will go away, because the long term goal is to provide sufficient in MoarVM that Rakduo doesn't need any C code (at least, none that needs C-level linking)

[20:31] <MasterDuke> jnthn: what about instance->ext_registry and instance->extop_registry?

[20:31] <jnthn> I think the only use of those is the Rakudo .so too

[20:34] *** zakharyas left
[20:41] <MasterDuke> do you think the rakudo .so is going away soon enough that i/we shouldn't bother with cleaning up that dll_registry hashtable?

[20:59] <jnthn> Up to you, it's going to be O(months)

[20:59] <jnthn> So if that's months of having cleaner ASAN/Valgrind output to better spot leaks, and it's not much work, it may well be worth it

[21:07] <MasterDuke> i think it's just introducing an iterator for fixkey hashes and then iterating over instance->dll_registry and calling MVM_dll_free for each entry

[21:30] <jnthn> ah, then go for it

[21:31] * jnthn takes an early night

[22:03] *** dogbert17 joined
[22:07] *** dogbert11 left
[22:14] <MasterDuke> nwc10: around?

[22:24] *** sena_kun left
[22:51] *** sxmx left
[22:58] *** sxmx joined
[23:02] *** lizmat is now known as liz

[23:03] *** liz is now known as lizmat

[23:14] <MasterDuke> nwc10: https://github.com/MasterDuke17/MoarVM/commit/88e792b682ad9ca7bb0d5e4b12f44d70b3148ad4#diff-2f58429081863e7f7a6e5fd7c31cc6e40f7717606e45769f3709b9acf75eda03R689 never gets hit because the entry is messed up (lib = 0x0) and i don't know why. any idea?

[23:17] *** japhb left
[23:32] *** japhb joined
[23:53] *** japhb left
[23:57] *** japhb joined
