[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:46] *** bloatable6 joined
[00:46] *** releasable6 joined
[00:47] *** bisectable6 joined
[00:47] *** coverable6 joined
[00:47] *** linkable6 joined
[00:48] *** committable6 joined
[00:48] *** shareable6 joined
[01:25] *** vrurg_ joined
[01:27] *** vrurg left
[01:44] *** frost joined
[01:45] *** ugexe left
[01:46] *** tellable6 joined
[02:08] *** ugexe joined
[02:10] *** ugexe left
[02:11] *** ugexe joined
[02:46] *** greppable6 joined
[03:47] *** statisfiable6 joined
[03:47] *** benchable6 joined
[04:47] *** evalable6 left
[04:47] *** linkable6 left
[06:04] *** releasable6 left
[06:04] *** benchable6 left
[06:04] *** greppable6 left
[06:04] *** statisfiable6 left
[06:04] *** shareable6 left
[06:04] *** bloatable6 left
[06:04] *** unicodable6 left
[06:04] *** reportable6 left
[06:04] *** notable6 left
[06:04] *** nativecallable6 left
[06:04] *** coverable6 left
[06:04] *** committable6 left
[06:04] *** sourceable6 left
[06:04] *** squashable6 left
[06:04] *** bisectable6 left
[06:04] *** quotable6 left
[06:05] *** bloatable6 joined
[06:05] *** committable6 joined
[06:05] *** benchable6 joined
[06:05] *** squashable6 joined
[06:05] *** nativecallable6 joined
[06:06] *** sourceable6 joined
[06:06] *** bisectable6 joined
[06:06] *** reportable6 joined
[06:06] *** quotable6 joined
[06:06] *** coverable6 joined
[06:07] *** shareable6 joined
[06:07] *** notable6 joined
[06:07] *** releasable6 joined
[07:05] *** statisfiable6 joined
[07:08] *** unicodable6 joined
[07:49] *** evalable6 joined
[08:23] <nine> LibXML's 90-threads.t yields quite unexpected results. It suffers from at least 2 problems, both rather long standing: MVM_nativecall_dispatch inherited some unsafe access to a possibly outdated body from MVM_nativecall_invoke (i.e. a GC issue). And CompUnit::Repository::Filesystem's cache is not thread safe

[08:24] <nine> CompUnit::Repository::Installation suffers from the same problem.

[09:01] <Geth> ¦ MoarVM: f4aa22ad03 | (Stefan Seifert)++ | src/core/nativecall_dyncall.c

[09:01] <Geth> ¦ MoarVM: Fix possible access to fromspace in native calls

[09:01] <Geth> ¦ MoarVM: 

[09:01] <Geth> ¦ MoarVM: Since the native callsite can be moved by the GC, the body pointer can become

[09:01] <Geth> ¦ MoarVM: outdated. That's why we have local copies of all the body fields we need for

[09:01] <Geth> ¦ MoarVM: calling and processing return values. However in quite a few places we still

[09:01] <Geth> ¦ MoarVM: accessed the (by then outdated) body pointer instead of the local variables.

[09:01] <Geth> ¦ MoarVM: 

[09:01] <Geth> ¦ MoarVM: Fix by replacing all unsafe access to the NC body with using those local

[09:01] <Geth> ¦ MoarVM: copies.

[09:01] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f4aa22ad03

[09:06] *** greppable6 joined
[09:17] *** frost left
[09:18] *** frost joined
[09:49] *** linkable6 joined
[09:51] *** Nicholas joined
[11:34] *** Altai-man joined
[12:04] *** squashable6 left
[12:06] *** squashable6 joined
[12:08] *** reportable6 left
[12:10] *** reportable6 joined
[13:31] *** [Coke] left
[13:34] *** [Coke] joined
[14:11] *** frost left
[17:21] *** evalable6 left
[17:21] *** linkable6 left
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[18:15] *** Altai-man left
[18:21] *** linkable6 joined
[18:59] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/12/20/2021-51-transiting/

[20:14] <Geth> ¦ MoarVM: niner++ created pull request #1624: Fix possible access to fromspace when autoboxing return values

[20:14] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1624

[20:15] <nine> Just noticed that I forgot to create a PR from this branch

[20:17] *** CaCode joined
[20:19] <MasterDuke> nine: is https://github.com/MoarVM/MoarVM/blob/master/src/core/nativecall_libffi.c#L673 safe?

[20:20] <nine> MasterDuke: notable6: 

[20:20] <nine> MasterDuke: no! And no idea why I missed that

[20:20] *** patrickb joined
[20:21] *** evalable6 joined
[20:23] <MasterDuke> lizmat++ btw, the"optimised some string to integer conversions" in the weeks should be "integer to string"

[20:24] <lizmat> MasterDuke++   # fixed

[20:25] <MasterDuke> nine: and i assume you've already seen https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=934&view=logs&jobId=07e75ff5-ce69-54f0-467d-376df9cd87cd&j=07e75ff5-ce69-54f0-467d-376df9cd87cd&t=fcf42454-a9ab-539e-a6f6-181ceda7bc7c ?

[20:25] <MasterDuke> lizmat++ it's going to take me a while to get through this weekly again, they seem to be growing in size

[20:25] <nine> Actually I haven't

[20:26] <lizmat> MasterDuke: yeah, it's becoming a major time sink  :-)

[20:27] <MasterDuke> incredibly valuable, hope they aren't too much of a burden

[20:31] <MasterDuke> sort of changing topics, but does anyone have any code to benchmark something like "producer/consumer situations where memory is allocated on one thread and freed on another (anything that heavily uses the ThreadPool probably does)"? re https://github.com/MoarVM/MoarVM/issues/1623

[20:31] <MasterDuke> timo: do your sdl examples do this?

[20:32] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: f0e4b08c09 | (Stefan Seifert)++ | src/core/args.c

[20:32] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: Fix possible access to fromspace when autoboxing return values

[20:32] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: 

[20:32] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: If the target frame (e.g. tc->cur_frame) is a heap frame that lives in the

[20:32] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: nursery, the return value is a native value (e.g. return_i or a native call),

[20:32] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: the caller expects an object and boxing happens to trigger a GC run, the

[20:32] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: target frame could be moved before we dereference the target pointer to get

[20:32] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: the return_value register. This would lead to a segfault with GC_DEBUG 3.

[20:32] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: <…commit message has 5 more lines…>

[20:32] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: review: https://github.com/MoarVM/MoarVM/commit/f0e4b08c09

[20:33] *** japhb left
[20:33] <nine> MasterDuke: at least I now learned about this quirk of the C grammar

[20:38] <MasterDuke> heh. nine++ on a roll

[20:42] <MasterDuke> lizmat: do you regularly check LWN for raku mentions? it was mentioned a week or so ago in some comments and i don't remember seeing it linked in any of the weeklies

[20:43] <MasterDuke> https://lwn.net/Articles/878451/

[20:43] <lizmat> well, Google in that case doesn't pick up on that either then

[20:45] <lizmat> also, that comment doesn't even show up in https://lwn.net/Search/DoSearch either

[20:45] <MasterDuke> huh. i just noticed because i had read the article+comments

[21:09] *** MasterDuke left
[21:21] *** MasterDuke joined
[21:24] *** CaCode left
[21:58] <MasterDuke> just compiled CORE.c and ran a spectest with mimalloc-(debug|secure) + MIMALLOC_SHOW_STATS=1 and no errors printed, so that's good

[22:08] *** CaCode joined
[22:15] <dogbert17> there seems to be a SEGV hiding in t/02-rakudo/repl.t

[22:16] <dogbert17> The spawned command '/home/dogbert/repos/rakudo/rakudo-m' exited unsuccessfully (exit code: 0, signal: 11)

[22:17] <dogbert17>   in sub is-run-repl at /home/dogbert/repos/rakudo/t/packages/Test/Helpers.pm6 (Test::Helpers) line 62

[22:17] <dogbert17>   in sub is-run-repl at /home/dogbert/repos/rakudo/t/packages/Test/Helpers.pm6 (Test::Helpers) line 53

[22:17] <dogbert17>   in block <unit> at t/02-rakudo/repl.t

[22:21] <MasterDuke> i've seen that one flap before, never caught it in anything

[22:39] *** CaCode_ joined
[22:42] *** CaCode left
[22:46] *** patrickb left
[23:39] <dogbert17> MasterDuke: the SEGV occured here, https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L259

[23:42] <MasterDuke> wonder if that's just memory corruption of the bytecode. do you have a gdb backtrace?

[23:44] <dogbert17> (gdb) bt

[23:44] <dogbert17> #0  0x00007f9659cb1d6e in MVM_interp_run (tc=0x5632246e8e30, initial_invoke=0x0, invoke_data=0x0, outer_runloop=0xffff) at src/core/interp.c:259

[23:44] <dogbert17> #1  0x000056322343f7fb in main (argc=7, argv=0x7ffe81e46cb8) at src/main.c:307

[23:46] <MasterDuke> heh, don't think i've ever seen one with only two frames before

[23:47] <dogbert17> yeah, it's a bit on the thin side :)

[23:59] <dogbert17> the JIT seems to be innocent

