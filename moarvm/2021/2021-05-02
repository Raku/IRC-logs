[00:01] *** reportable6 left
[00:02] *** reportable6 joined
[01:21] *** evalable6 left
[01:21] *** linkable6 left
[01:22] *** linkable6 joined
[01:24] *** evalable6 joined
[01:55] *** Kaiepi left
[01:56] *** Kaiepi joined
[02:56] *** notable6 left
[02:56] *** coverable6 left
[02:56] *** greppable6 left
[02:56] *** reportable6 left
[02:56] *** committable6 left
[02:56] *** quotable6 left
[02:56] *** linkable6 left
[02:56] *** bloatable6 left
[02:56] *** bisectable6 left
[02:56] *** benchable6 left
[02:56] *** releasable6 left
[02:56] *** nativecallable6 left
[02:56] *** tellable6 left
[02:56] *** squashable6 left
[02:56] *** sourceable6 left
[02:56] *** unicodable6 left
[02:56] *** statisfiable6 left
[02:56] *** evalable6 left
[02:56] *** shareable6 left
[02:56] *** linkable6 joined
[02:56] *** committable6 joined
[02:56] *** nativecallable6 joined
[02:56] *** tellable6 joined
[02:56] *** shareable6 joined
[02:57] *** evalable6 joined
[02:57] *** reportable6 joined
[02:57] *** coverable6 joined
[02:57] *** greppable6 joined
[02:57] *** notable6 joined
[02:57] *** bloatable6 joined
[02:57] *** releasable6 joined
[02:58] *** unicodable6 joined
[02:58] *** benchable6 joined
[02:58] *** bisectable6 joined
[02:59] *** sourceable6 joined
[02:59] *** statisfiable6 joined
[02:59] *** squashable6 joined
[02:59] *** quotable6 joined
[03:27] *** Kaiepi left
[03:27] *** Kaiepi joined
[04:53] *** Kaiepi left
[04:54] *** Kaiepi joined
[06:01] *** reportable6 left
[06:03] *** reportable6 joined
[06:46] *** frost-lab joined
[08:17] *** coverable6 left
[08:17] *** notable6 left
[08:17] *** bisectable6 left
[08:17] *** unicodable6 left
[08:17] *** shareable6 left
[08:17] *** committable6 left
[08:17] *** sourceable6 left
[08:17] *** releasable6 left
[08:17] *** quotable6 left
[08:17] *** tellable6 left
[08:17] *** squashable6 left
[08:17] *** bloatable6 left
[08:17] *** linkable6 left
[08:17] *** greppable6 left
[08:17] *** reportable6 left
[08:17] *** statisfiable6 left
[08:17] *** evalable6 left
[08:17] *** benchable6 left
[08:17] *** nativecallable6 left
[08:17] *** nativecallable6 joined
[08:18] *** quotable6 joined
[08:18] *** evalable6 joined
[08:18] *** linkable6 joined
[08:18] *** bisectable6 joined
[08:18] *** bloatable6 joined
[08:18] *** releasable6 joined
[08:18] *** tellable6 joined
[08:18] *** notable6 joined
[08:19] *** greppable6 joined
[08:19] *** reportable6 joined
[08:19] *** committable6 joined
[08:19] *** benchable6 joined
[08:20] *** coverable6 joined
[08:20] *** squashable6 joined
[08:20] *** unicodable6 joined
[08:20] *** sourceable6 joined
[08:20] *** statisfiable6 joined
[08:20] *** shareable6 joined
[09:40] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1483 is ready for review. i moved some complexity around, but i think the end result is a simpler CI configuration than before

[09:43] *** moritz_ is now known as moritz

[11:11] *** frost-lab left
[12:01] *** reportable6 left
[12:01] *** reportable6 joined
[12:02] *** dogbert11 joined
[12:06] *** dogbert17 left
[12:12] *** MasterDuke left
[12:37] *** domidumont joined
[12:38] <lizmat> could there be a reason why a call to TWEAK is *always* red in any --profile I try?

[13:12] <dogbert11> heh, a SEGV

[13:14] <dogbert11> caused by the oom killer I suspect

[13:15] <dogbert11> if anyone is in a detective mode the gist is here: https://gist.github.com/dogbert17/1e95ef4e0dcb10f2c2a41d94f80958b0

[13:15] * dogbert11 will go for a walk

[13:27] <lizmat> so, if I have a string of 1 MB, and I take a substr from it, will that be a copy or will it just be an index into the 1MB string and thus keeping that alive in memory ?

[13:28] <lizmat> asking for myself  :-)

[13:41] <nine> The latter

[13:41] <nine> But that depends on the input string and how it was created in the first place

[13:43] *** domidumont left
[13:56] *** domidumont joined
[14:23] *** domidumont left
[14:50] *** domidumont joined
[14:56] <dogbert11> problem seems to vanish with MVM_SPESH_INLINE_DISABLE=1

[14:58] <dogbert11> according to perf the program seems to spend an inordinate amount of time in MVM_profiler_log_gc_end

[15:02] *** domidumont left
[15:05] *** domidumont joined
[15:19] *** MasterDuke joined
[15:51] <jnthn> lizmat: Probably because it's called with flattening args, and such calls never get specialized

[15:51] <tellable6> 2021-04-30T21:25:54Z #moarvm <MasterDuke> jnthn in case you missed them, some questions here https://colabti.org/irclogger/irclogger_log/raku-dev?date=2021-04-30#l53

[15:52] <jnthn> (And yes, that issue is resolved in new-disp)

[15:53] <lizmat> cool

[15:53] <tellable6> hey lizmat, you have a message: https://gist.github.com/80685f3eead3222d668d461725f0b41a

[15:54] <lizmat> .tell tbrowder putting it in a DateTime::Julian module would be a good start for code evaluation

[15:54] <tellable6> lizmat, I'll pass your message to tbrowder

[15:54] <lizmat> afk&

[16:10] <nine> jnthn: is there anything that newdisp doesn't fix? How's it dealing with global warming btw?

[16:12] <nwc10> well, presumably it helps marginally by using less CPU to acchieve the same thing.

[16:13] <nwc10> (this also reduces server costs fractionally)

[16:13] <nine> That's, that's...entirely too sensical an answer for this kind of question

[16:13] <nwc10> it was an open goal

[16:16] <tbrowder> .tell lzmat

[16:16] <tellable6> tbrowder, I haven't seen lzmat around, did you mean lizmat?

[16:16] <tbrowder> .tell lizmat WILCO

[16:16] <tellable6> tbrowder, I'll pass your message to lizmat

[16:39] *** [Coke]_ joined
[16:39] *** [Coke]_ left
[16:39] *** [Coke]_ joined
[17:26] *** domidumont left
[17:43] *** MasterDuke left
[18:01] *** reportable6 left
[18:03] *** reportable6 joined
[18:04] *** zakharyas joined
[18:29] *** MasterDuke joined
[19:30] <jnthn> It doesn't do the things rakuast will :P

[20:35] *** Kaiepi left
[20:37] *** Kaiepi joined
[21:16] *** zakharyas left
[21:46] *** cog_ left
[21:47] *** cog joined
[23:45] *** [Coke]_ is now known as [Coke]

