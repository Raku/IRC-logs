[00:08] *** reportable6 left
[00:11] *** reportable6 joined
[00:27] *** linkable6 joined
[03:05] *** unicodable6 left
[03:05] *** coverable6 left
[03:05] *** linkable6 left
[03:05] *** squashable6 left
[03:05] *** nativecallable6 left
[03:05] *** releasable6 left
[03:05] *** quotable6 left
[03:05] *** evalable6 left
[03:05] *** sourceable6 left
[03:05] *** bloatable6 left
[03:05] *** reportable6 left
[03:05] *** statisfiable6 left
[03:05] *** bisectable6 left
[03:05] *** notable6 left
[03:05] *** benchable6 left
[03:05] *** greppable6 left
[03:05] *** tellable6 left
[03:05] *** committable6 left
[03:05] *** shareable6 left
[03:06] *** statisfiable6 joined
[03:06] *** unicodable6 joined
[03:06] *** reportable6 joined
[03:06] *** evalable6 joined
[03:07] *** nativecallable6 joined
[03:07] *** tellable6 joined
[03:07] *** releasable6 joined
[03:08] *** bloatable6 joined
[04:02] *** Colt_ joined
[04:04] *** Colt left
[04:05] *** sourceable6 joined
[04:05] *** bisectable6 joined
[04:06] *** quotable6 joined
[04:06] *** coverable6 joined
[04:06] *** greppable6 joined
[04:07] *** committable6 joined
[04:07] *** shareable6 joined
[04:45] *** ggoebel_ left
[04:58] *** frost joined
[05:08] *** benchable6 joined
[06:08] *** benchable6 left
[06:08] *** shareable6 left
[06:08] *** quotable6 left
[06:08] *** evalable6 left
[06:08] *** tellable6 left
[06:08] *** statisfiable6 left
[06:08] *** bloatable6 left
[06:08] *** coverable6 left
[06:08] *** committable6 left
[06:08] *** greppable6 left
[06:08] *** sourceable6 left
[06:08] *** releasable6 left
[06:08] *** nativecallable6 left
[06:08] *** reportable6 left
[06:08] *** unicodable6 left
[06:08] *** bisectable6 left
[06:08] *** statisfiable6 joined
[06:09] *** quotable6 joined
[06:09] *** committable6 joined
[06:09] *** tellable6 joined
[06:10] *** benchable6 joined
[06:10] *** bloatable6 joined
[06:10] *** sourceable6 joined
[06:11] *** evalable6 joined
[06:11] *** nativecallable6 joined
[06:11] *** greppable6 joined
[06:44] *** Colt_ is now known as Colt

[07:05] *** notable6 joined
[07:07] *** squashable6 joined
[07:09] *** shareable6 joined
[07:11] *** releasable6 joined
[08:07] *** linkable6 joined
[08:09] *** bisectable6 joined
[08:10] *** unicodable6 joined
[08:44] <Nicholas> good *, #moarvm 

[08:45] <Nicholas> today is clearly a good day to call MVM_repr_box_int, MVM_repr_box_num, MVM_repr_box_str, MVM_repr_box_uint

[09:04] <nine> I thought this was the day for nqp::unbox_i, nqp::unbox_n, nqp::unbox_s and nqp::unbox_u

[09:05] <Nicholas> wouldn't *that* be *Un*boxing day?

[09:08] <nine> Well the name has always confused me because of that :)

[09:08] *** linkable6 left
[09:09] *** coverable6 joined
[09:26] *** ggoebel_ joined
[09:49] <nine> MasterDuke: there's no additiional bug wrt Curlie. The segfault and valgrind issues you see are bugs in LibCurl::EasyHandle. They are also restrictions in the NativeCall API wrt memory management.

[09:50] <nine> What happens is that libcurl expects to be passed a char** which it fills with a char*. LibCurl::EasyHandle therefor allocates a CArray[Str] with 1 element and passes that to libcurl. However, libcurl does not pass ownership of the string to the caller while CArray assumes that if the array is managed, the array elements must be managed as well.

[09:52] <nine> So CArray frees a string that it doesn't actually own. That's a case that my NativeCall memory management rework is supposed to cover.

[10:03] <MasterDuke> is there something LibCurl::Easy could do differently? or do they just require NYI functionality?

[10:04] <MasterDuke> nine: btw, you've seen https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=945&view=logs&jobId=1f3a7134-3b80-549a-eaff-49041f6b71c8&j=1f3a7134-3b80-549a-eaff-49041f6b71c8&t=cebb2378-2f87-5e8d-fe8c-4dbf4bfaf11c ?

[10:05] <MasterDuke> i can confirm that branch does fix the other spesh issue with Curlie for me

[10:30] *** patrickb joined
[10:56] <Geth> ¦ MoarVM/fix_rw_native_calls: d783bf2717 | (Stefan Seifert)++ | src/spesh/disp.c

[10:56] <Geth> ¦ MoarVM/fix_rw_native_calls: Fix speshed native calls with rw args assigning into wrong target

[10:56] <Geth> ¦ MoarVM/fix_rw_native_calls: 

[10:56] <Geth> ¦ MoarVM/fix_rw_native_calls: For rw args of native calls we emit appropriate assign_i instructions

[10:56] <Geth> ¦ MoarVM/fix_rw_native_calls: after the call to write back the native values from the argument

[10:56] <Geth> ¦ MoarVM/fix_rw_native_calls: registers to the NativeRef. However the register holding the NativeRef

[10:56] <Geth> ¦ MoarVM/fix_rw_native_calls: will already have been released at the callsite (as for non-speshed

[10:56] <Geth> ¦ MoarVM/fix_rw_native_calls: calls writing back is handled by MVM_nativecall_dispatch). If one of the

[10:56] <Geth> ¦ MoarVM/fix_rw_native_calls: <…commit message has 9 more lines…>

[10:56] <Geth> ¦ MoarVM/fix_rw_native_calls: review: https://github.com/MoarVM/MoarVM/commit/d783bf2717

[10:56] <nine> MasterDuke: thanks for the heads up! Seems like I always fall into this particular trap

[10:57] <nine> MasterDuke: maybe LibCurl::Easy can pass a Str as rw arg instead of the CArray. Don't know off the top of my head if there's a way to avoid MoarVM freeing that string though. I really need to continue work on my branch. Planning to do so right after the uint fixes are done.

[11:07] *** patrickb left
[11:09] *** linkable6 joined
[12:09] *** evalable6 left
[12:09] *** linkable6 left
[12:12] *** linkable6 joined
[12:34] *** TempIRCLogger left
[12:34] *** TempIRCLogger joined
[12:38] *** TempIRCLogger left
[12:38] *** TempIRCLogger joined
[12:43] *** TempIRCLogger left
[12:43] *** TempIRCLogger joined
[13:10] *** reportable6 joined
[13:11] *** evalable6 joined
[13:40] *** discord-raku-bot left
[13:40] *** discord-raku-bot joined
[14:01] <timo> .o( i should have done a little survey of existing file formats before making the moarvm heap snapshot format ... like RIFF for example )

[14:01] <timo> yup! let's store moarvm heap dumps in .avi files

[14:31] <sena_kun> timo, tooling >>>>>> formats

[14:33] <timo> being able to use avidemux2 to wrangle heap snapshots sounds absolutely delightful

[14:56] *** Geth left
[14:57] *** Geth joined
[14:58] *** RakuIRCLogger__ joined
[14:58] *** RakuIRCLogger__ left
[15:01] *** Geth left
[15:01] *** Geth joined
[15:07] <lizmat> logs.liz.nl now running on 2021.12

[15:11] *** frost left
[15:16] *** Colt left
[15:16] *** Colt joined
[15:19] *** Colt left
[15:20] *** Colt joined
[15:26] *** Colt left
[15:26] *** Colt joined
[15:31] *** ggoebel_ left
[15:33] *** Colt left
[15:35] *** Colt joined
[15:35] *** Colt left
[16:37] *** Colt joined
[17:38] *** discord-raku-bot left
[17:38] *** discord-raku-bot joined
[17:50] *** discord-raku-bot left
[17:50] *** discord-raku-bot joined
[17:54] *** discord-raku-bot left
[17:55] *** discord-raku-bot joined
[17:59] *** discord-raku-bot left
[17:59] *** discord-raku-bot joined
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[19:31] *** linkable6 left
[19:31] *** evalable6 left
[19:33] *** linkable6 joined
[21:24] *** tellable6 left
[21:24] *** committable6 left
[21:24] *** greppable6 left
[21:24] *** sourceable6 left
[21:24] *** reportable6 left
[21:24] *** nativecallable6 left
[21:24] *** coverable6 left
[21:24] *** unicodable6 left
[21:24] *** linkable6 left
[21:24] *** bisectable6 left
[21:24] *** notable6 left
[21:24] *** squashable6 left
[21:24] *** quotable6 left
[21:24] *** statisfiable6 left
[21:24] *** releasable6 left
[21:24] *** benchable6 left
[21:24] *** shareable6 left
[21:24] *** bloatable6 left
[21:24] *** greppable6 joined
[21:24] *** benchable6 joined
[21:24] *** nativecallable6 joined
[21:24] *** bloatable6 joined
[21:25] *** quotable6 joined
[21:26] *** bisectable6 joined
[21:26] *** squashable6 joined
[21:26] *** coverable6 joined
[21:26] *** shareable6 joined
[21:27] *** releasable6 joined
[22:23] *** sena_kun left
[22:24] *** notable6 joined
[22:26] *** reportable6 joined
[22:31] *** evalable6 joined
[23:25] *** sourceable6 joined
[23:27] *** linkable6 joined
[23:27] *** unicodable6 joined
