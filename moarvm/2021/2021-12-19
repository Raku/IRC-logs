[00:07] *** reportable6 left
[00:09] <japhb> MasterDuke: Let me see if I understand.  Are you saying that the fastest combo so far is just using mimalloc, with literally everything else the same?  Or does this also include turning off FSA as well?

[00:10] *** reportable6 joined
[00:10] * japhb is somewhat boggled that several decades in, the CS community is *still* learning significantly more about memory allocation.

[00:17] <moon-child> really?

[00:17] <moon-child> I mean, c4 was around 2010

[00:19] <moon-child> and, hm, jemalloc was 2006 apparently; I thought it was more recent.  Still

[00:28] <japhb> moon-child: And before that was Bohm, and ...

[00:30] <moon-child> bdw has oooold roots, though

[00:30] <moon-child> 80s I think

[00:31] <moon-child> but yeah it is high quality.  At one point its heap was better than that of contemporary malloc implementations, so using it gave better performance

[01:06] *** discord-raku-bot left
[01:07] *** discord-raku-bot joined
[03:54] *** committable6 left
[03:54] *** quotable6 left
[03:54] *** releasable6 left
[03:54] *** tellable6 left
[03:54] *** reportable6 left
[03:54] *** sourceable6 left
[03:54] *** evalable6 left
[03:54] *** nativecallable6 left
[03:54] *** squashable6 left
[03:54] *** shareable6 left
[03:54] *** linkable6 left
[03:54] *** bloatable6 left
[03:54] *** vrurg_ left
[03:54] *** greppable6 left
[03:54] *** coverable6 left
[03:54] *** notable6 left
[03:54] *** benchable6 left
[03:54] *** statisfiable6 left
[03:54] *** unicodable6 left
[03:54] *** bisectable6 left
[03:54] *** vrurg joined
[03:55] *** evalable6 joined
[03:55] *** sourceable6 joined
[03:56] *** squashable6 joined
[03:56] *** committable6 joined
[03:56] *** statisfiable6 joined
[03:56] *** shareable6 joined
[03:56] *** notable6 joined
[03:56] *** nativecallable6 joined
[03:56] *** linkable6 joined
[03:57] *** releasable6 joined
[03:57] *** coverable6 joined
[03:57] *** bloatable6 joined
[04:55] *** reportable6 joined
[04:55] *** greppable6 joined
[04:56] *** benchable6 joined
[04:57] *** tellable6 joined
[04:57] *** quotable6 joined
[05:55] *** unicodable6 joined
[05:56] *** bisectable6 joined
[06:07] *** reportable6 left
[07:55] <MasterDuke> japhb: correct, stock+mimalloc was fastest, and i have not yet tried mimalloc+turning off FSA

[09:09] *** linkable6 left
[09:09] *** reportable6 joined
[10:34] <nine> Aaah...finally! I've got the Proxy stuff working (and thus that failing test in LibXML fixed). I was just missing a guard on the callee and got (yet again) confused by missing debug output because I (yet again) forgot that dispatch programs will only run once.

[10:40] <timo> you can make dispatch programs run every time if you liek? :D

[11:06] *** squashable6 left
[11:21] <nine> Geth down?

[11:21] <nine> Ah, no

[11:48] *** frost joined
[11:54] <lizmat> ah?

[11:55] <lizmat> Geth: help

[11:55] <Geth> lizmat, Source at https://github.com/Raku/geth To add repo, add an 'application/json' webhook on GitHub pointing it to https://webhooks.liz.nl/?chan=%23raku and choose 'Send me everything' for events to send | use `ver URL to commit` to fetch version bump changes

[11:55] <lizmat> indeed looks up to me :-)

[11:55] <nine> I was just looking for the message in the wrong channel

[11:58] <lizmat> ah, *phew*

[11:59] <nine> The t/04-nativecall/21-callback-other-thread.t segfault is quite surprising in that it appears to be a bug in MVM_args_set_dispatch_result_int. This function is passed an MVMFrame *target and will write the result into target->return_value->o (if an object is requested).

[12:00] <nine> When boxing the return value, GC may be triggered and can move the frame, thus we dereference a bogus return_value pointer and segfault.

[12:00] <nine> What's so surprising is that this is a very central function that's called all over the place.

[12:02] <nine> Though I guess the combination of required factors may be somewhat rare. We need tc->cur_frame to be a heap frame, the frame returning a native integer (e.g. return_i) and the caller expecting an object. And of course an untimely GC run.

[12:08] *** reportable6 left
[12:10] *** reportable6 joined
[12:10] <dogbert17> nine++, looks like you had no problem reproing that one :)

[12:11] <nine> No, and I'm glad about that :)

[12:13] <dogbert17> I ran the entire (almost) spectest suite with MVM_GC_DEBUG=3 a few days ago and that was the only thing that cropped up

[12:19] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: cb27ba7f3d | (Stefan Seifert)++ | src/core/args.c

[12:19] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: Fix possible access to fromspace when autoboxing return values

[12:19] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: 

[12:19] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: If the target frame (e.g. tc->cur_frame) is a heap frame that lives in the

[12:19] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: nursery, the return value is a native value (e.g. return_i or a native call),

[12:19] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: the caller expects an object and boxing happens to trigger a GC run, the

[12:19] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: target frame could be moved before we dereference the target pointer to get

[12:20] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: the return_value register. This would lead to a segfault with GC_DEBUG 3.

[12:20] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: <…commit message has 5 more lines…>

[12:20] <Geth> ¦ MoarVM/fix_autoboxing_gc_issue: review: https://github.com/MoarVM/MoarVM/commit/cb27ba7f3d

[12:20] <nine> Luckily this fix ^^^ should be performance neutral.

[12:20] <nine> dogbert17: wow, how long did that take?

[12:23] <dogbert17> Files=1349, Tests=117784, 17443 wallclock secs (40.33 usr  5.54 sys + 96045.85 cusr 12919.49 csys = 109011.21 CPU)

[12:23] <dogbert17> Result: FAIL

[12:30] <nine> That's not that bad actually

[13:33] *** frost left
[13:39] *** squashable6 joined
[13:52] *** discord-raku-bot left
[13:52] *** discord-raku-bot joined
[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: 768228b327 | (Stefan Seifert)++ | 2 files

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: Fix return register staying uninitialized on dispatch to void native functions

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: 

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: This got lost when turning nativecall_invoke into nativecall_dispatch. Even if

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: the native function itself doesn't return a result (i.e. void), we have to set

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: the call's result to something as in general the call will be initiated through

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: dispatch_o which is expected to return an object. NativeCall convention is to

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: return a type object in this case. So follow the convention

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: review: https://github.com/MoarVM/MoarVM/commit/768228b327

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: fd6a41035e | (Stefan Seifert)++ | src/spesh/disp.c

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: Fix uninitialized return register on translated calls to void native functions

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: 

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: We optimize calls to native functions without return values (i.e. void) to

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: sp_runnativecall_v. Nevertheless we have to initialize the original target

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: register with something (i.e. the return value type object), because the

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: register may be read after a deopt. This is all the more likely as a guard

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: on the return register would trigger a deopt if the register contains a NULL

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: value.

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: 

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: Fixes segfaults after deopts after void native calls.

[15:44] <Geth> ¦ MoarVM/fix_segfault_with_void_native_calls: review: https://github.com/MoarVM/MoarVM/commit/fd6a41035e

[15:45] <dogbert17> nine: looks like you're on a rampage

[15:48] <Geth> ¦ MoarVM: niner++ created pull request #1622: Fix segfault with void native calls

[15:48] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1622

[15:48] <nine> Yeah, but that's definitely enough work for this weekend

[15:48] <dogbert17> time for a well deserved rest

[15:52] <MasterDuke> so far, mimalloc with FSA_DEBUG lightly modified to just directly call the regular alloc functions isn't that slow. wonder how it'll end up comparing to master with the same modifications to FSA_DEBUG

[15:53] <MasterDuke> in fact, it builds rakudo faster than stock for me by 1-2s

[16:12] *** linkable6 joined
[18:07] *** reportable6 left
[19:07] *** reportable6 joined
[22:29] <MasterDuke> timo: you might find https://github.com/MoarVM/MoarVM/issues/1623 interesting

[23:46] *** committable6 left
[23:46] *** reportable6 left
[23:46] *** quotable6 left
[23:46] *** benchable6 left
[23:46] *** greppable6 left
[23:46] *** linkable6 left
[23:46] *** evalable6 left
[23:46] *** tellable6 left
[23:46] *** nativecallable6 left
[23:46] *** bloatable6 left
[23:46] *** notable6 left
[23:46] *** unicodable6 left
[23:46] *** releasable6 left
[23:46] *** sourceable6 left
[23:46] *** bisectable6 left
[23:46] *** shareable6 left
[23:46] *** coverable6 left
[23:46] *** squashable6 left
[23:46] *** statisfiable6 left
[23:47] *** unicodable6 joined
[23:47] *** reportable6 joined
[23:47] *** quotable6 joined
[23:48] *** evalable6 joined
[23:48] *** sourceable6 joined
[23:48] *** nativecallable6 joined
[23:48] *** notable6 joined
[23:49] *** squashable6 joined
