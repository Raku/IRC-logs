[00:01] *** [Coke] joined
[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[02:05] *** evalable6 left
[02:05] *** linkable6 left
[02:23] *** CaCode joined
[02:45] *** CaCode_ joined
[02:47] *** CaCode- joined
[02:47] *** CaCode left
[02:49] *** CaCode_ left
[03:06] *** evalable6 joined
[04:06] *** greppable6 left
[04:06] *** reportable6 left
[04:06] *** sourceable6 left
[04:06] *** coverable6 left
[04:06] *** evalable6 left
[04:06] *** bisectable6 left
[04:06] *** unicodable6 left
[04:06] *** bloatable6 left
[04:06] *** shareable6 left
[04:06] *** tellable6 left
[04:06] *** nativecallable6 left
[04:06] *** committable6 left
[04:06] *** notable6 left
[04:06] *** quotable6 left
[04:06] *** releasable6 left
[04:06] *** statisfiable6 left
[04:06] *** benchable6 left
[04:06] *** squashable6 left
[04:07] *** greppable6 joined
[04:07] *** statisfiable6 joined
[04:07] *** coverable6 joined
[04:07] *** shareable6 joined
[04:08] *** committable6 joined
[04:08] *** bisectable6 joined
[04:09] *** benchable6 joined
[04:09] *** squashable6 joined
[04:09] *** reportable6 joined
[04:09] *** unicodable6 joined
[04:17] *** CaCode- left
[05:07] *** notable6 joined
[05:07] *** linkable6 joined
[05:07] *** tellable6 joined
[05:08] *** quotable6 joined
[05:08] *** bloatable6 joined
[05:09] *** sourceable6 joined
[06:04] *** frost joined
[06:07] *** reportable6 left
[07:06] *** nativecallable6 joined
[07:07] *** releasable6 joined
[07:10] *** reportable6 joined
[07:42] <Nicholas> good *, *

[08:09] *** evalable6 joined
[08:46] *** TheAthlete joined
[10:04] <nine> Beautiful *, #moarvm

[11:01] *** evalable6 left
[11:01] *** linkable6 left
[12:01] *** evalable6 joined
[12:08] *** reportable6 left
[12:09] *** reportable6 joined
[12:42] *** Altai-man joined
[13:03] *** linkable6 joined
[14:10] *** TempIRCLogger left
[14:10] *** TempIRCLogger joined
[15:10] *** shareable6 left
[15:10] *** squashable6 left
[15:10] *** nativecallable6 left
[15:10] *** greppable6 left
[15:10] *** bisectable6 left
[15:10] *** bloatable6 left
[15:10] *** benchable6 left
[15:10] *** linkable6 left
[15:10] *** evalable6 left
[15:10] *** statisfiable6 left
[15:10] *** coverable6 left
[15:10] *** unicodable6 left
[15:10] *** reportable6 left
[15:10] *** notable6 left
[15:10] *** sourceable6 left
[15:10] *** releasable6 left
[15:10] *** quotable6 left
[15:10] *** tellable6 left
[15:10] *** committable6 left
[15:11] *** frost left
[15:11] *** bisectable6 joined
[15:11] *** evalable6 joined
[15:11] *** unicodable6 joined
[15:12] *** benchable6 joined
[15:12] *** linkable6 joined
[15:12] *** committable6 joined
[15:13] *** tellable6 joined
[16:00] <nine> I've finally managed to confirm my hypothesis that the crashes in the GC that I can reproduce with LibXML's t/90threads.t are caused by native call sites getting cloned while a different thread is still in the process of initializing them

[16:02] <jdv> sounds scary

[16:02] <nine> The copy_to call itself is triggered by a getattr_o op

[16:09] <nine> Ironically the getattr_o access is to check whether the callsite is setup yet or not

[16:11] *** quotable6 joined
[16:11] *** coverable6 joined
[16:12] *** statisfiable6 joined
[16:12] *** squashable6 joined
[16:12] *** reportable6 joined
[16:13] *** notable6 joined
[16:13] *** releasable6 joined
[16:13] *** sourceable6 joined
[17:08] *** TheAthlete left
[17:12] *** shareable6 joined
[17:14] *** bloatable6 joined
[17:41] <Geth> ¦ MoarVM: 207db4bb5b | (Stefan Seifert)++ | 2 files

[17:41] <Geth> ¦ MoarVM: Fix segfaults due to race condition when initializing native call sites

[17:41] <Geth> ¦ MoarVM: 

[17:41] <Geth> ¦ MoarVM: Ensure that a native callsite's arg_types and arg_info arrays are fully

[17:41] <Geth> ¦ MoarVM: populated before the body's pointers to them are assigned. Otherwise another

[17:41] <Geth> ¦ MoarVM: thread may copy uninitialized data as part of a copy_to operation (probably

[17:41] <Geth> ¦ MoarVM: triggered by getattr_o).

[17:41] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/207db4bb5b

[17:42] <nine> Over an hour of having 27 loops run 90threads.t and not a single failure :)

[17:43] <nine> Sadly that has to be with MVM_JIT_EXPR_DISABLE=1 du to the known racy code the expr jit creates.

[17:43] <nine> But at least we can be reasonably sure that no other bug affects this test (and thus LibXML) anymore :)

[17:44] <[Coke]> nine++

[17:44] <[Coke]> me: Maybe I can hack on stuff during my break! also me: Hey, let's my booster shot right before break!

[17:45] <lizmat> jdv nine  time for a MoarVM bump ?

[17:46] <Geth> ¦ MoarVM: 768228b327 | (Stefan Seifert)++ | 2 files

[17:46] <Geth> ¦ MoarVM: Fix return register staying uninitialized on dispatch to void native functions

[17:46] <Geth> ¦ MoarVM: 

[17:46] <Geth> ¦ MoarVM: This got lost when turning nativecall_invoke into nativecall_dispatch. Even if

[17:46] <Geth> ¦ MoarVM: the native function itself doesn't return a result (i.e. void), we have to set

[17:46] <Geth> ¦ MoarVM: the call's result to something as in general the call will be initiated through

[17:46] <Geth> ¦ MoarVM: dispatch_o which is expected to return an object. NativeCall convention is to

[17:46] <Geth> ¦ MoarVM: return a type object in this case. So follow the convention

[17:46] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/768228b327

[17:46] <Geth> ¦ MoarVM: fd6a41035e | (Stefan Seifert)++ | src/spesh/disp.c

[17:46] <Geth> ¦ MoarVM: Fix uninitialized return register on translated calls to void native functions

[17:46] <Geth> ¦ MoarVM: 

[17:46] <Geth> ¦ MoarVM: We optimize calls to native functions without return values (i.e. void) to

[17:46] <Geth> ¦ MoarVM: sp_runnativecall_v. Nevertheless we have to initialize the original target

[17:46] <Geth> ¦ MoarVM: register with something (i.e. the return value type object), because the

[17:46] <Geth> ¦ MoarVM: register may be read after a deopt. This is all the more likely as a guard

[17:46] <Geth> ¦ MoarVM: on the return register would trigger a deopt if the register contains a NULL

[17:46] <Geth> ¦ MoarVM: value.

[17:46] <Geth> ¦ MoarVM: 

[17:46] <Geth> ¦ MoarVM: Fixes segfaults after deopts after void native calls.

[17:46] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/fd6a41035e

[17:46] <Geth> ¦ MoarVM: 69c9452953 | niner++ (committed using GitHub Web editor) | 3 files

[17:46] <Geth> ¦ MoarVM: Merge pull request #1622 from MoarVM/fix_segfault_with_void_native_calls

[17:46] <Geth> ¦ MoarVM: 

[17:46] <Geth> ¦ MoarVM: Fix segfault with void native calls

[17:46] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/69c9452953

[17:47] <Geth> ¦ MoarVM: f0e4b08c09 | (Stefan Seifert)++ | src/core/args.c

[17:47] <Geth> ¦ MoarVM: Fix possible access to fromspace when autoboxing return values

[17:47] <Geth> ¦ MoarVM: 

[17:47] <Geth> ¦ MoarVM: If the target frame (e.g. tc->cur_frame) is a heap frame that lives in the

[17:47] <Geth> ¦ MoarVM: nursery, the return value is a native value (e.g. return_i or a native call),

[17:47] <Geth> ¦ MoarVM: the caller expects an object and boxing happens to trigger a GC run, the

[17:47] <Geth> ¦ MoarVM: target frame could be moved before we dereference the target pointer to get

[17:47] <Geth> ¦ MoarVM: the return_value register. This would lead to a segfault with GC_DEBUG 3.

[17:47] <Geth> ¦ MoarVM: <…commit message has 5 more lines…>

[17:47] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f0e4b08c09

[17:47] <Geth> ¦ MoarVM: 2914410fa7 | niner++ (committed using GitHub Web editor) | src/core/args.c

[17:47] <Geth> ¦ MoarVM: Merge pull request #1624 from MoarVM/fix_autoboxing_gc_issue

[17:47] <Geth> ¦ MoarVM: 

[17:47] <Geth> ¦ MoarVM: Fix possible access to fromspace when autoboxing return values

[17:47] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2914410fa7

[17:47] <nine> lizmat: now's probably a better time :)

[17:47] <lizmat> I see   :-)

[17:48] <lizmat> jdv are you ok with that?

[17:48] <nine> I figured better to get these merged and exercised rather than wait longer for a review. The review can still be done post-facto

[17:48] <lizmat> nine: or do you think these should be in a release anyway ?

[17:52] <nine> They absolutely need to be in the next release

[17:54] <lizmat> ok, I will bump now

[18:00] <jdv> fun stuff

[18:09] *** reportable6 left
[18:10] *** reportable6 joined
[18:23] <lizmat> nine: https://github.com/rakudo/rakudo/pull/4676 ??

[18:26] *** linkable6 left
[18:27] <jdv> nice catch.  i was about to ask about that one.

[18:31] <lizmat> afk for dinner&

[18:45] *** Altai-man left
[19:26] *** linkable6 joined
[19:30] *** japhb joined
[19:58] <MasterDuke> nine: nice fixes. did that dyncall fix also end up making it into ffi?

[20:11] *** nativecallable6 joined
[20:29] <dogbert17> nine++, does this mean that MoarVM is now officially bug free :)

[22:13] *** greppable6 joined
[22:44] *** japhb left
