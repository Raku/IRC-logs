[00:02] *** reportable6 left
[00:55] *** frost joined
[01:04] *** reportable6 joined
[01:12] *** rakuUser left
[02:12] *** bloatable6 left
[02:12] *** squashable6 left
[02:12] *** sourceable6 left
[02:12] *** coverable6 left
[02:12] *** reportable6 left
[02:12] *** quotable6 left
[02:12] *** nativecallable6 left
[02:12] *** greppable6 left
[02:12] *** benchable6 left
[02:12] *** linkable6 left
[02:12] *** notable6 left
[02:12] *** statisfiable6 left
[02:12] *** committable6 left
[02:12] *** tellable6 left
[02:12] *** bisectable6 left
[02:12] *** shareable6 left
[02:12] *** releasable6 left
[02:12] *** unicodable6 left
[02:12] *** evalable6 left
[02:12] *** committable6 joined
[02:13] *** nativecallable6 joined
[02:13] *** greppable6 joined
[02:13] *** quotable6 joined
[02:13] *** tellable6 joined
[02:13] *** benchable6 joined
[02:14] *** linkable6 joined
[02:14] *** squashable6 joined
[02:14] *** notable6 joined
[02:14] *** evalable6 joined
[03:14] *** bisectable6 joined
[03:14] *** shareable6 joined
[03:14] *** coverable6 joined
[03:15] *** reportable6 joined
[03:15] *** sourceable6 joined
[04:03] *** discord-raku-bot left
[04:04] *** discord-raku-bot joined
[04:15] *** unicodable6 joined
[04:15] *** bloatable6 joined
[05:13] *** statisfiable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:13] *** releasable6 joined
[07:40] <MasterDuke> new (but don't know how recent) segv in new-disp, https://gist.github.com/MasterDuke17/8d2287308381ec82c6d33ec51e00bbad when using MVM_JIT_PERF_MAP=1
[07:41] * nine wasn't aware of MVM_JIT_PERF_MAP's existence
[07:43] <MasterDuke> it's nice, i have it in an alias i use for profiling with perf
[07:45] <MasterDuke> at `fprintf(tc->instance->jit_perf_map, "%lx %lx %s\n", (unsigned long) code->func_ptr, code->size, symbol_name);`, `code` is 0x0
[07:47] <nine> MVM_JIT_DEBUG=1 shows why
[07:48] <nine> It's 4e84cd01fea9970087a2060db1dd03a869398351
[07:49] <MasterDuke> quick debugging
[07:50] <nine> The error message about "dynamic label" made me suspect my change
[07:53] <MasterDuke> MVM_jit_compile_graph checks `code` in the `/* Logging for insight */` if, should the jit_perf_map if check it also? or should `code` really just never be NULL?
[07:56] <nine> Frankly, I don't know. Since the error messages are only printed when the debug flag is set, I don't know if it's "normal" for them to occur, or if they really should be more explody
[08:03] <MasterDuke> fwiw, building rakudo on master with MVM_JIT_DEBUG=1 doesn't print anything
[08:05] <MasterDuke> but there is a 'JIT ERROR: Negative offset for dynamic label 219' in t/09-moar/00-misc.t
[08:05] *** linkable6 left
[08:05] *** evalable6 left
[08:07] <nine> So, not often but also not never
[08:11] <MasterDuke> didn't see any during a spectest run
[08:28] *** patrickb joined
[08:29] <Geth> Â¦ MoarVM: MasterDuke17 assigned to bdw Issue Rakudo test fail with MVM_JIT_DEBUG=1 https://github.com/MoarVM/MoarVM/issues/1535
[09:00] <jnthnwrthngtn> moarning o/
[09:05] <MasterDuke> ahoy
[09:14] <jnthnwrthngtn> So, what for today...
[09:14] <nine> t/spec/S32-io/utf16.t runs into an infinite loop when run with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1
[09:15] <jnthnwrthngtn> MasterDuke: One way to fix that bogus free is to tweak the calls in MVM_callsite_initialize_common to pass 0 as the final ("steal") argument to MVM_callsite_intern, although most ideally we'd only do it when --full-cleanup was set, which depends on your work in master, so maybe best to wait until the next rebase.
[09:16] <jnthnwrthngtn> nine: Ouch
[09:17] <jnthnwrthngtn> I might finally sort out istype today, so its two invoke calls can go away
[09:17] <MasterDuke> jnthnwrthngtn: cool, i'll try and take a look at that after the next rebase
[09:18] <jnthnwrthngtn> I'm kinda debating what to do with istype
[09:20] *** lizmat_ joined
[09:20] *** lizmat_ left
[09:20] *** lizmat_ joined
[09:23] *** lizmat left
[09:23] *** TempIRCLogger left
[09:24] *** lizmat_ left
[09:27] *** lizmat joined
[09:28] *** lizmat joined
[09:29] *** TempIRCLogger joined
[09:29] <jnthnwrthngtn> Probably the best way to preserve current performance is to 1) set it up like a dispatch up in the IC, but 2) have the istype op first look at the cache, and never bother with the ICE if it works out
[09:30] <Nicholas> t/spec/S32-io/utf16.t (still) hangs for me (busy somewhere down in JITted code) with MVM_* all set
[09:30] <Nicholas> aha, what nine wrote
[09:30] <jnthnwrthngtn> And then register a dispatcher per language which handles the other cases
[09:30] <MasterDuke> IC(E)?
[09:32] <jnthnwrthngtn> Inline Cache (Entry)
[09:32] <jnthnwrthngtn> oh yay, NQP doesn't actuaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
[09:33] <jnthnwrthngtn> wtf, keyboard
[09:33] <jnthnwrthngtn> NQP doesn't depend on anything other than cache-based type checking in its build
[09:33] <Nicholas> yes, surely a proper malfunctioning keyboard in Prague would be rrrrrrrrrrrrrrrrrrr? :-)
[09:33] <jnthnwrthngtn> :D
[09:34] <jnthnwrthngtn> Anyway, this means I can replace the istype op in-place without worrying about doing a bootstrapping dance
[09:34] <jnthnwrthngtn> Maybe it's 'cus this keyboard is a UK layout one... :)
[09:35] <jnthnwrthngtn> OK, istype changes can be task 1 today
[09:39] <Nicholas> .tell brrt Pyston (finally) seems to have solved its "how do we monetise this?" problem: https://blog.pyston.org/2021/08/30/pyston-team-joins-anaconda/ https://www.anaconda.com/blog/pyston-team-joins-anaconda
[09:39] <tellable6> Nicholas, I'll pass your message to brrt
[09:50] <jnthnwrthngtn> Nicholas: Is that the "join a company that is doing well enough so we can spend a portion of our work time on it" approach?
[09:54] *** Nicholas left
[10:07] *** linkable6 joined
[10:08] *** evalable6 joined
[10:20] *** Nicholas joined
[10:20] <Nicholas> I should probably be careful when speculating on a publicly logged channel.
[10:21] <Nicholas> I observe that they had months between the first "here is 2.0 - it's closed source until we figure out how to monetize it" blog post
[10:21] <Nicholas> and the "hey, here it's open source"
[10:21] <Nicholas> and now "hey, we joined this other firm"
[10:22] <Nicholas> where they do say "We talked to a couple of companies about a possible joint future for Pyston, and Anaconda stood out to us in terms of alignment."
[10:22] <Nicholas> and also that "hey, here it's open source" happened just about the time that Facebook revealed (and open sourced) their Pythong ahead-of-time speedup thingy, cynder
[10:23] <jnthnwrthngtn> .oO( sounds pants... )
[10:23] <Nicholas> and that was also rouhly when Guido joined MS and they announced a plan to make Python faster
[10:23] <Nicholas> which wuold seem to obsolete some of the "business case" for "hey, fund us to work on Pyston"
[10:24] <Nicholas> (which is sort of sad, because seemingly Pyston is here, now, drop-in replacement and faster" while all the rest are "special" or "our roadmap predicts"
[10:28] <Nicholas> so it wasn't quite what you wrote, but "join a company that already has a working business model providing python-related speedups, so that we can actually work on code, rather than struggling to figure out how to sell this stuff"
[10:29] <Nicholas> which also seems to keep re-enforcing the observation that no matter how cool/useful your open source infrastructure speedup is, and how much money it would save businesses (individually or in aggregate) it's nigh on impossible to get them to spend money on it, when they thing they are already getting "good enough" for "free"
[10:37] <jnthnwrthngtn> *nod*
[10:56] *** squashable6 left
[10:58] *** squashable6 left
[11:06] *** sena_kun joined
[11:23] <lizmat> nine: ok, creating a ThreadPoolScheduler object, does *not* start the supervisor thread
[11:23] <dogbert11> what might be happening here: moar: src/spesh/deopt.c:32: uninline: Assertion `MVM_callstack_current_frame(tc) == f' failed.
[11:23] <dogbert11> could it be something which interests nine?
[11:23] <lizmat> nine: and the way it is now, it is run when the mainline of the setting is run
[11:24] <lizmat> which is when it should take in any setting of RAKUDO_MAX_THREADS?
[11:25] <lizmat> nine: so, I'm not sure what that has to do with compilation of the setting ?
[11:27] <nine> lizmat: when is the mainline of the setting run?
[11:28] <lizmat> at process start ?
[11:28] <lizmat> *after* the compilation of the setting ?
[11:28] <nine> But why is there no "Created scheduler" message then and why does it ignore RAKUDO_MAX_THREADS?
[11:29] <nine> While adding my $*SCHEDULER = BEGIN PROCESS::<$SCHEDULER> = ThreadPoolScheduler.new; to the start of our service.p6 script fixes it?
[11:29] <lizmat> lemme check some things out :-)
[11:49] *** lizmat left
[11:50] *** lizmat joined
[11:50] *** lizmat left
[11:51] <nine> lizmat: assuming that it is initialized at process startup, is $*ENV actually set up at that point yet?
[11:51] <tellable6> nine, I'll pass your message to lizmat
[11:51] *** lizmat joined
[11:53] *** TempIRCLogger left
[11:54] *** lizmat left
[11:54] *** lizmat joined
[11:55] *** TempIRCLogger joined
[11:59] <MasterDuke> lizmat: totally off topic, but i was curious while reading the weekly. do you know all the languages in the tweets you reply to? or do you just run them through google translate and assume it gets at least general meaning correct?
[12:00] <lizmat> French / German I can read
[12:00] <tellable6> 2021-08-31T11:51:26Z #moarvm <nine> lizmat: assuming that it is initialized at process startup, is $*ENV actually set up at that point yet?
[12:00] <lizmat> anything else, I click on the "translate this tweet" link
[12:01] <lizmat> and try to make sense of it  :-)
[12:02] <lizmat> nine: looks like a premature optimization is the cause of the issue
[12:02] <lizmat> nine: running tests now
[12:03] <MasterDuke> ha, nice
[12:03] *** reportable6 left
[12:03] *** reportable6 joined
[12:21] <lizmat> nine: https://github.com/rakudo/rakudo/commit/b14d404a19
[12:28] <nine> Cool :)
[12:29] *** patrickb left
[12:39] *** patrickb joined
[12:42] *** psydroid left
[12:42] *** AlexDaniel left
[12:45] *** AlexDaniel joined
[12:54] *** psydroid joined
[13:01] <jnthnwrthngtn> Yay, I have istype switched over to look at the cache, then if it fails to fall back to using a dispatcher
[13:01] <jnthnwrthngtn> Which can in turn do the appropriate wiring
[13:02] <nine> So, istype is done?
[13:02] <jnthnwrthngtn> Not quite
[13:02] <jnthnwrthngtn> I've got the semantics right, or at least, NQP tests are happy and Rakudo ones are no less happy.
[13:03] <jnthnwrthngtn> Need to put the JIT back
[13:03] <MasterDuke> i don't remember, will new-disp make coercion parameters faster? see my question in #raku-dev for context
[13:03] <jnthnwrthngtn> And hopefully that will explain the slowdown in CORE.setting compilation, but if not I'll need to figure that out also
[13:05] <jnthnwrthngtn> MasterDuke: I don't know how they're compiled at the moment, so hard to say if anything already done would do so
[13:06] *** rakuUser joined
[13:06] <MasterDuke> hm
[13:07] <jnthnwrthngtn> MasterDuke: Otherwise they're in the category of "things new-disp can probably help us make faster"
[13:07] <jnthnwrthngtn> (But we'll need to write the disaptch logic to make it happen)
[13:08] <MasterDuke> if you're curious and since i see you're not in raku-dev https://colabti.org/irclogger/irclogger_log/raku-dev?date=2021-08-31#l91 has my question and an example
[13:11] <jnthnwrthngtn> m: say 1.68 / 1.03
[13:11] <camelia> rakudo-moar b14d404a1: OUTPUT: Â«1.631068â¤Â»
[13:11] <jnthnwrthngtn> heh, I coulda eyeballed that :)
[13:11] <jnthnwrthngtn> Yeah, I don't see why we can't elimiante the difference there
[13:13] <MasterDuke> m: say 1.5 / 0.87  # what i see locally
[13:13] <camelia> rakudo-moar b14d404a1: OUTPUT: Â«1.724138â¤Â»
[13:15] <jnthnwrthngtn> Nudge me to look at it after new-disp merge if it isn't already faster  
[13:16] <MasterDuke> will do
[13:19] <MasterDuke> m: say 2.4 / 1.7  # times for those example on new-disp right now
[13:19] <camelia> rakudo-moar b14d404a1: OUTPUT: Â«1.411765â¤Â»
[13:20] <MasterDuke> better ratio, worse absolute times
[13:23] <jnthnwrthngtn> Worse absolute times likely due to lack of inlining
[13:25] <MasterDuke> the coerce version (on master and new-disp) spends a lot of extra time in https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/CoercionHOW.nqp#L115-L216
[13:37] *** frost left
[13:47] <vrurg> MasterDuke: BTW, the method is only used if a parameter was initially a generic type (after instantiation), or if argument type is not parameter target type. Otherwise I hoped new-disp will allow to re-write it as a dispatcher.
[13:48] <MasterDuke> vrurg: fwiw, i see that as near the top in all my attempts at profiling coercion (though maybe those aren't representative of actual use)
[13:51] <vrurg> If it gets involved, then there is barely something could be done to make this version inlineable, I'm afraid.
[13:52] <vrurg> Neither I can think of any ways to optimize it. This version already cuts off any possibly unneeded branch of code. A couple of micro-optimizations possible, but they barely would make big improvements on your benchmarks.
[14:10] <nine> I think dispatchers can make a big difference there as e.g. for sub foo(Int(Str) $i) {...}; foo("1") the dispatcher can determine the type of the passed parameter once, guard on that, and delegate to the .Int method directly (which can then be inlined at the callsite)
[14:11] <vrurg> Exactly what I hoped for.
[14:13] <jnthnwrthngtn> Phew, the istype JITting recovers the perf, I don't have another thing to hunt down
[14:21] <Geth> Â¦ MoarVM/new-disp: 12bb950997 | (Jonathan Worthington)++ | 19 files
[14:21] <Geth> Â¦ MoarVM/new-disp: Re-work istype in terms of the dispatcher
[14:21] <Geth> Â¦ MoarVM/new-disp: 
[14:21] <Geth> Â¦ MoarVM/new-disp: All cases that were previously resolved via the type check cache are
[14:21] <Geth> Â¦ MoarVM/new-disp: still resolved in this way. All other cases are delegated to a per HLL
[14:21] <Geth> Â¦ MoarVM/new-disp: dispatcher to sort out. This most immediately eliminates reliance upon
[14:21] <Geth> Â¦ MoarVM/new-disp: the legacy method cache and invocation protocol, but also will open up
[14:21] <Geth> Â¦ MoarVM/new-disp: some further optimization opportunities.
[14:21] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/12bb950997
[14:35] <Geth> Â¦ MoarVM/new-disp: 73f261bdf5 | (Jonathan Worthington)++ | 6 files
[14:35] <Geth> Â¦ MoarVM/new-disp: Remove last lookup code for legacy method cache
[14:35] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/73f261bdf5
[14:37] <nine> jnthnwrthngtn: the "cache-mess"? :)
[14:38] <jnthnwrthngtn> :)
[14:39] <jnthnwrthngtn> Can stop publishing those legacy method caches on NQP and Rakudo now
[14:40] <MasterDuke> i wonder what the final diff (num lines added vs num lines removed) will be for each repo
[14:43] <jnthnwrthngtn> Also in size of compiled output. Removing the legacy method caches made CORE.c.setting.moarvm over a megabyte smaller
[14:44] <MasterDuke> !
[14:44] <jnthnwrthngtn> If anybody has master build handy, I'm curious how big that file is on master
[14:45] <MasterDuke> this? `2763259 Aug 31 09:53 CORE.c.setting`
[14:45] <jnthnwrthngtn> No, blib/CORE.c.setting.moarvm
[14:46] <MasterDuke> `30791472 Aug 31 10:36 ./blib/CORE.c.setting.moarvm`
[14:46] <jnthnwrthngtn> whoa
[14:46] <jnthnwrthngtn> Of course there may be a few more things in master
[14:46] <nine> But only a very few
[14:46] <jnthnwrthngtn> But on new-disp
[14:46] <jnthnwrthngtn> `22891248 srp 31 16:40 blib/CORE.c.setting.moarvm`
[14:46] <nine> Holy size reduction Batman!
[14:46] <MasterDuke> nice
[14:47] <jnthnwrthngtn> I guess the new dispatch ops really are quite a bit more space efficient :)
[14:48] <nine> Despite the string args, which take 4 bytes each. OTOH that's just prepargs and the prefix for the very first arg
[14:50] <jnthnwrthngtn> It's also because spesh plugins all needed the plugin invoke to decide on the plugin, and then another invoke for its result.
[14:50] <jnthnwrthngtn> So there were two prepargs and arg lists for those
[15:36] *** patrickb left
[15:41] <Nicholas> not ok 38 - --rxtrace does not crash
[15:41] <Nicholas>     # expected: ""
[15:41] <Nicholas>     #  matcher: 'infix:<~~>'
[15:41] <Nicholas>     #      got: "Cannot find method 'trace-on' on object of type NQPClassHOW\n  
[15:41] <Nicholas> ...
[15:41] <Nicholas> That was ./rakudo-m -Ilib t/05-messages/02-errors.t
[15:41] <Nicholas> oh, I'm out of date...
[15:42] <Nicholas> rebuild, retest, ...
[15:43] <jnthnwrthngtn> I see that one too
[15:43] <jnthnwrthngtn> Ah, I didn't know there was a test for that. :)
[15:43] <jnthnwrthngtn> I wonder if anybody uses it
[15:50] <nine> On that utf16.t infinite loop: turning off the JIT gives some more information. Because instead of looping it fails with "Attempt to return outside of any Routine"
[15:50] <Geth> Â¦ MoarVM/new-disp: 158680cbbc | (Jonathan Worthington)++ | src/core/frame.h
[15:50] <Geth> Â¦ MoarVM/new-disp: Add a function to the public API for now
[15:50] <Geth> Â¦ MoarVM/new-disp: 
[15:50] <Geth> Â¦ MoarVM/new-disp: So we can tweak a Rakudo extop to not depend on the legacy invoke
[15:50] <Geth> Â¦ MoarVM/new-disp: protocol. (Various extops are moving towards being syscalls in MoarVM
[15:50] <Geth> Â¦ MoarVM/new-disp: wrapped in a dispatcher to do the Raku-specific bits, but the thing in
[15:50] <Geth> Â¦ MoarVM/new-disp: question is an epic hack that should ultimately go away.)
[15:50] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/158680cbbc
[15:52] <nine> Oh, and it's of course about inlining
[15:57] <nine> Which reminds me, jnthnwrthngtn: why are Inline End annotations on the instruction following the inline and not on the last instruction of the inlinee?
[16:06] <jnthnwrthngtn> nine: I'm pretty sure it used to go on the last instruction of the inlinee and that changed...
[16:08] <jnthnwrthngtn> Aha, so it changed in 22a249d6cf5
[16:09] <jnthnwrthngtn> I guess the code-gen (probably JIT too) were already treating it as exclusive (e.g. emitting it prior to the instruction in question), so this was the easier change
[16:10] <nine> The JIT emitted it after the instruction. That's why I had to fix it in 4e84cd01fea9970087a2060db1dd03a869398351
[16:12] <nine> And the new code to find that following instruction needed fixing in d678b12069e468aebe7967e1bbeb59ef73cf12ab to not segfault on empty BBs.
[16:12] <nine> So....in hindsight, I question that part about the change being easier :)
[16:13] <jnthnwrthngtn> Apparently :)
[16:14] <jnthnwrthngtn> No objections if you want to move it onto the final instruction
[16:14] <jnthnwrthngtn> Oh...I wonder if there was also an annotation motion reasoning too
[16:15] <jnthnwrthngtn> (When an instruction is deleted)
[16:15] <jnthnwrthngtn> But I don't see why that can't work either way too
[16:15] <nine> If there's ever a gap in the stream of bugs to fix I may have a look :)
[16:27] <nine> Removing the return in the get-filename sub gets rid of the bug
[16:27] <nine> This turns raku-rv-decont into the main suspect
[16:31] <nine> It's actually trivially reproducible with just: MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 ./rakudo-m -e 'sub f() { return ".".IO.parent }; for ^100 { f }'
[16:33] * jnthnwrthngtn wonders if this could be in any way related to t/spec/S32-io/dir.rakudo.moar failing
[16:36] <nine> t/spec/S32-io/dir.rakudo.moar also fails with spesh disabled
[16:36] <nine> Just with a "No exception handler located for catch" instead
[16:42] <jnthnwrthngtn> Done
[16:42] <jnthnwrthngtn> oops, ww
[16:57] *** squashable6 joined
[17:22] *** rakuUser left
[17:32] *** rakuUser joined
[18:00] <Geth> Â¦ MoarVM/new-disp: 95d1a5a4ec | (Jonathan Worthington)++ | src/disp/syscall.c
[18:00] <Geth> Â¦ MoarVM/new-disp: Add get-code-outer-ctx syscall
[18:00] <Geth> Â¦ MoarVM/new-disp: 
[18:00] <Geth> Â¦ MoarVM/new-disp: Which will allow us to eliminate a Rakudo extop.
[18:00] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/95d1a5a4ec
[18:02] *** reportable6 left
[18:03] <jnthnwrthngtn> We're now down to just 10 extops
[18:36] *** sena_kun left
[20:04] *** reportable6 joined
[20:36] <[Coke]> new-disp failed t/05-messages/02-errors.t for me with a recent build (might not be up to date)
[21:00] <timo> 10 ex, tops!
[21:05] <japhb> 10 ex-tops?
[21:06] <moon-child> 10 bottoms!
[21:07] <timo> https://github.com/facebookincubator/cinder/ - could be interesting to look at what decisions they made
[21:08] <timo> for example their jit will immediately jit every function called ever, but they let you supply a text file to steer that
[21:08] <timo> clearly very tailored to the exact code bases they have
[21:14] <MasterDuke> yeah. fwiw, i thought the issues in the cpython fork that gvr is working with had some good potential ideas we could steal
[21:19] <timo> i seem to recall the fork but not that gvr works on that
[21:20] <MasterDuke> yeah, paid by microsoft to make python faster
[21:20] <MasterDuke> https://github.com/faster-cpython/ideas/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[21:21] <MasterDuke> and you might be just the right person to steal from them with your pypy experience
[21:29] *** rakuUser left
[21:31] <timo> hard to say, since pypy was a from-scratch re-implementation
[21:43] *** MasterDuke left
[21:47] <[Coke]> rebuilt, still getting the error on t/05-messages/02-errors.t
[21:47] <[Coke]> https://gist.github.com/coke/8a46d2cf77e037fcf84de1adcfdd78cb
[21:51] <jnthnwrthngtn> I'm pondering removing that (functionality and test), unless anybody finds it terribly useful (it prints out parse output as it goes, but if one wants to see the parse tree there's --target=parse, which is about the same info)
[21:52] <jnthnwrthngtn> (Rather than spending the time fixing up something that I don't think is used by any end user of Rakudo, and that I don't know that anybody working on it is using either)
[22:15] *** rakuUser joined
[22:19] *** rakuUser left
[22:19] *** rakuUser joined
[22:33] <[Coke]> deleted code is debugged code.
[22:49] *** MasterDuke joined
