[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[01:03] *** committable6 left
[01:03] *** statisfiable6 left
[01:03] *** greppable6 left
[01:03] *** notable6 left
[01:03] *** quotable6 left
[01:03] *** releasable6 left
[01:03] *** sourceable6 left
[01:03] *** coverable6 left
[01:03] *** linkable6 left
[01:03] *** squashable6 left
[01:03] *** reportable6 left
[01:03] *** bloatable6 left
[01:03] *** tellable6 left
[01:03] *** bisectable6 left
[01:03] *** evalable6 left
[01:03] *** benchable6 left
[01:03] *** unicodable6 left
[01:03] *** shareable6 left
[01:03] *** nativecallable6 left
[01:03] *** committable6 joined
[01:03] *** tellable6 joined
[01:04] *** bisectable6 joined
[01:04] *** bloatable6 joined
[01:04] *** unicodable6 joined
[01:04] *** statisfiable6 joined
[01:04] *** nativecallable6 joined
[01:05] *** evalable6 joined
[01:05] *** quotable6 joined
[01:05] *** greppable6 joined
[01:05] *** linkable6 joined
[01:06] *** reportable6 joined
[01:14] *** frost joined
[01:26] <japhb> nine: FYI, installing Inline::Perl5 on a 32-bit RaspberryPi OS install, there are a lot of warnings, almost all of which are "cast to pointer from integer of different size [-Wint-to-pointer-cast], from (perl6_callbacks*) casts.
[01:26] <japhb> There are a couple other things, but that's most of the noise.
[02:04] *** sourceable6 joined
[02:04] *** notable6 joined
[02:05] *** releasable6 joined
[02:05] *** benchable6 joined
[03:04] *** coverable6 joined
[03:05] *** shareable6 joined
[04:05] *** squashable6 joined
[04:42] *** coverable6 left
[04:42] *** reportable6 left
[04:42] *** nativecallable6 left
[04:42] *** MasterDuke left
[04:42] *** Altai-man left
[04:42] *** jdv left
[04:42] *** jnthnwrthngtn left
[04:42] *** timo left
[04:43] *** coverable6 joined
[04:43] *** reportable6 joined
[04:43] *** nativecallable6 joined
[04:43] *** MasterDuke joined
[04:43] *** Altai-man joined
[04:43] *** jdv joined
[04:43] *** jnthnwrthngtn joined
[04:43] *** timo joined
[04:44] *** shareable6 left
[04:44] *** leedo left
[04:44] *** kjp_ left
[04:44] *** leont left
[04:45] *** shareable6 joined
[04:45] *** leedo joined
[04:45] *** kjp_ joined
[04:45] *** leont joined
[04:46] *** AlexDaniel left
[04:46] *** psydroid left
[04:48] *** [Coke] left
[04:48] *** nine left
[04:48] *** [Coke] joined
[04:48] *** nine joined
[04:50] *** Voldenet left
[04:50] *** gfldex left
[04:50] *** rba left
[04:50] *** Voldenet joined
[04:50] *** rba joined
[04:50] *** gfldex joined
[04:54] *** ugexe left
[04:54] *** ugexe joined
[05:16] *** AlexDaniel joined
[06:02] *** reportable6 left
[06:04] *** psydroid joined
[06:05] *** reportable6 joined
[07:02] <nine> japhb: that's odd. According to perlguts, those casts should be correct: "Perl uses a special typedef IV which is a simple signed integer type that is guaranteed to be large enough to hold a pointer (as well as an integer)."
[07:05] <nine> japhb: does it tell you what the actual sizes both sides of the casts are?
[07:23] <japhb> nine: Gah, looks like it disappeared from my scrollback.  Now expanding scrollback and forcing a reinstall ....
[07:25] <japhb> *Jeopardy! theme music ...*
[07:28] <japhb> As a side note while I wait, so far I'm finding the RPi4 with a 32-bit OS is around 5-6x slower running Rakudo than my x64 laptop.  Not as bad as I feared, but certainly enough to make slow stuff REALLY slow.
[07:28] <japhb> WTH?  Completely silent install this time ...?
[07:29] <japhb> Is there something that wouldn't necessarily rebuild if reinstalled with `zef install Inline::Perl5 --force-install`?
[07:29] <nine> Do you install with zef? That may have cached the build directory so the previously compiled library may still be there
[07:29] <japhb> Hmmm, lemme try nuking that
[07:30] <nine> Easiest way is git clone https://github.com/niner/Inline-Perl5.git ; cd Inline-Perl5 ; rakudo configure.pl6 ; make
[07:31] <japhb> OK, I'll try that after this run (I just nuked ~/.zef/store/Inline-Perl5-0.54.tar.gz, and reran the zef install)
[07:31] <japhb> Yup, nuking that zef store dir worked.
[07:34] <japhb> No, it doesn't say what the actual types/sizes mismatched were for the declare_cbs macro warnings.  One thing I do notice is that one of the rare wornings is in p5_call_gv_two_args, it's a format string error -- but the exact mismatch there might say something.  Gimme a sec.
[07:35] <japhb> warning: format '%d' expects argument of type 'int', but argument 3 has type 'I32' {aka 'long int'} [-Wformat=]
[07:35] <japhb> Sounds like int is short on this build?
[07:37] <japhb> Is there a way to get more detail from gcc's warnings?  (If it matters, it appears to be gcc 8.3.0)
[07:40] <japhb> `perl -V` shows intsize=4 longsize=4 ptrsize=4 but ivtype='long long'
[07:40] <japhb> (and thus ivsize=8)
[07:41] <japhb> Hmmm ... use64bitint=define use64bitall=undef
[07:49] <japhb> I guess this could mean that the mismatch is that IV is larger than *.  IV is guaranteed to be large enough, but not necessarily the *same* size, from that perlguts bit you quoted.
[07:50] * japhb heads off to the land of nod ... &
[07:55] <nine> japhb: ok, that means that the code is actually correct, indeed. But only in practice, since I know that these IVs will only ever hold pointers, so the upper 32 bits will be 0 and we can safely ignore them.
[07:56] <nine> I do have a fix for the format string warnings at least
[09:00] *** quotable6 left
[09:00] *** bisectable6 left
[09:00] *** committable6 left
[09:00] *** benchable6 left
[09:00] *** linkable6 left
[09:00] *** evalable6 left
[09:00] *** bloatable6 left
[09:00] *** greppable6 left
[09:00] *** unicodable6 left
[09:00] *** notable6 left
[09:00] *** tellable6 left
[09:00] *** squashable6 left
[09:00] *** statisfiable6 left
[09:00] *** sourceable6 left
[09:00] *** releasable6 left
[09:00] *** shareable6 left
[09:00] *** reportable6 left
[09:00] *** nativecallable6 left
[09:00] *** coverable6 left
[09:01] *** quotable6 joined
[09:01] *** bisectable6 joined
[09:01] *** bloatable6 joined
[09:01] *** squashable6 joined
[09:02] *** statisfiable6 joined
[09:02] *** tellable6 joined
[09:02] *** greppable6 joined
[09:02] *** coverable6 joined
[09:03] *** reportable6 joined
[09:03] *** committable6 joined
[10:00] *** sourceable6 joined
[10:02] *** unicodable6 joined
[10:03] *** shareable6 joined
[10:03] *** nativecallable6 joined
[11:01] *** notable6 joined
[11:36] *** sena_kun joined
[12:00] *** releasable6 joined
[12:02] *** benchable6 joined
[12:02] *** evalable6 joined
[12:02] *** reportable6 left
[13:02] *** linkable6 joined
[13:11] *** frost left
[14:04] *** reportable6 joined
[14:12] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/08/16/2021-33-cucumbering/
[14:39] *** RakuIRCLogger left
[14:39] *** RakuIRCLogger joined
[14:45] *** discord-raku-bot left
[14:45] *** discord-raku-bot joined
[14:47] *** discord-raku-bot left
[14:48] *** discord-raku-bot joined
[15:01] *** discord-raku-bot left
[15:01] *** discord-raku-bot joined
[15:01] *** TempIRCLogger left
[15:02] *** TempIRCLogger joined
[16:12] *** njm joined
[18:02] *** reportable6 left
[18:25] *** vrurg left
[18:28] *** sena_kun left
[18:29] *** vrurg joined
[18:30] *** njm left
[19:09] <nine> For the new-disp implementation of nqp::hllize: dispatchers are cached at the callsite. The callsite will never change its language, so we don't need to guard on that. Types won't change their language either, so a guard on type (which we're gonna need anyway) will implicitly guard on the object's language as well.
[19:31] <nine> The tricky bit seems to be actually finding out the language at the callsite.
[19:32] <MasterDuke> i assume 6.c and 6.d are the same languages?
[19:32] <nine> Yes, but Raku and NQP are not
[19:57] <nine> Ah, it may not be that hard after all. The nqp::hllize op will desugar into an nqp::dispatch('lang-hllize', $obj); This op will be part of the same frame, i.e. MVM_hll_current will give us the target HLL.
[19:57] <nine> We can then statically delegate to the registered hllize dispatcher for that HLL.
[19:58] <nine> The dispatch program we create during this process will run in a different frame, but that doesn't matter, since the target language is kinda statically compiled into this dispatch program anyway.
[20:16] <nine> Ok, the lang-hllize dispatcher implementation in C compiles. That means I'm almost done, right? :D
[20:38] <nine> The desugar and registration of the HLL's hllization dispatcher work as well and a test in NQP with funnylang works as intended.
[20:38] <nine> So, a good start for today :)
[21:03] <MasterDuke> nice
[21:04] *** reportable6 joined
[23:36] *** evalable6 left
[23:36] *** linkable6 left
