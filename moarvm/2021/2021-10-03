[00:03] *** reportable6 left
[00:12] <vrurg> [Coke]: do you know if it is golfable to something suitable for a test?
[00:16] <[Coke]> vrurg: it doesn't compile for me, so I can't really golf it.
[00:16] <[Coke]> ... and if it's fixed, I'd have to go back to when it segfaulted, then golf it, then make sure the golf was fixed.
[00:17] <vrurg> It works for me both on macos and linux. Do you try it on Windows?
[00:18] <[Coke]> mac.
[00:18] <[Coke]> might have been a cut and paste error, then.
[00:18] <[Coke]> my windows build is current broken, see previous.
[00:18] <[Coke]> so if it works for you.. then it seems closable.
[00:19] <vrurg> fish shell auto-escapes single quotes for me when I paste for `raku -e '...'`. Could it be your problem? 
[00:20] <vrurg> I'd close it. Would there be a golf for it I'd consider adding a test. But not when it requires a 3rd party module, of course.
[01:03] *** linkable6 left
[01:03] *** reportable6 joined
[03:04] *** linkable6 joined
[03:31] *** evalable6 joined
[04:15] *** codesections5 joined
[04:20] *** codesections left
[04:20] *** codesections5 is now known as codesections
[04:22] *** MasterDuke left
[04:23] *** Kaipi joined
[04:24] *** Kaiepi left
[04:24] *** Altai-man joined
[04:27] *** bisectable6_ joined
[04:27] *** committable6_ joined
[04:28] *** sourceable6_ joined
[04:28] *** sena_kun left
[04:28] *** committable6 left
[04:28] *** bisectable6 left
[04:28] *** sourceable6 left
[04:28] *** rypervenche left
[04:28] *** releasable6 left
[04:28] *** notable6 left
[04:28] *** ugexe left
[04:29] *** ugexe joined
[04:29] *** jdv_ left
[04:29] *** jdv joined
[04:29] *** rypervenche joined
[04:30] *** Nicholas left
[04:30] *** Nicholas joined
[04:32] *** SmokeMachine_ joined
[04:32] *** shareable6_ joined
[04:33] *** unicodable6_ joined
[04:33] *** coverable6 left
[04:33] *** SmokeMachine left
[04:33] *** shareable6 left
[04:33] *** unicodable6 left
[04:33] *** SmokeMachine_ is now known as SmokeMachine
[04:33] *** tbrowder left
[04:33] *** tbrowder joined
[04:41] *** nativecallable6 left
[04:41] *** nativecallable6 joined
[04:47] *** gfldex_ joined
[04:47] *** gfldex left
[04:48] *** statisfiable6 left
[04:48] *** statisfiable6 joined
[04:49] *** benchable6 left
[04:49] *** benchable6 joined
[04:50] *** squashable6_ joined
[04:51] *** squashable6 left
[05:01] *** bloatable6_ joined
[05:03] *** bloatable6 left
[05:25] *** releasable6 joined
[05:27] *** coverable6 joined
[05:28] *** notable6 joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[07:22] *** MasterDuke joined
[07:32] <nine> MasterDuke: doesn't the expr jit template for settypename miss the `!`? It has no result, so it should be (template: setdebugtypename!
[07:36] <nine> Same is true for setbuffersize_fh btw
[07:38] <nine> And quite a few others. Which makes me wonder if the JIT is smart enough to detect the no-result situation. But then there are examples where the ! is there, despite the only child being a callv
[07:42] <MasterDuke> i think the ! is for when the address of the destination is passed in
[07:42] <MasterDuke> i.e, `\$0` instead of `$0`
[07:42] <MasterDuke> so i think the template is correct
[07:43] <nine> The only thing the docs say about this is: "The template is marked with a '!' postfix to signal that the expression yields no value and takes care of storing the result itself"
[07:44] <MasterDuke> hm
[07:56] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/master/tools/expr-template-compiler.pl#L508-L526 seems to be the relevant section of the template compiler
[08:31] *** lizmat_ joined
[09:06] *** lizmat_ left
[09:06] *** Geth joined
[09:07] *** TempIRCLogger joined
[09:08] *** gfldex_ is now known as gfldex
[09:09] <gfldex> I just hit a heisenbug with MoarVM oops: MVM_str_hash_fetch_nocheck called with a stale hashtable pointer .
[09:09] <gfldex> full trace at https://gist.github.com/gfldex/a62653facd38028f766c0c19325621f3
[09:12] <lizmat> and what is the code?
[09:13] <gfldex> https://github.com/gfldex/perl6-www-radiobrowser
[09:26] <nine> gfldex: that usually means thread-unsafe hash access in the program
[09:27] <nine> gfldex: a quick glance at the module shows that it does use threads and hashes
[09:29] *** Geth left
[09:29] *** lizmat_ joined
[09:30] *** Geth joined
[09:30] *** TempIRCLogger__ joined
[09:31] *** RakuIRCLogger left
[09:31] *** lizmat left
[09:31] *** TempIRCLogger left
[09:32] *** lizmat_ left
[09:32] *** lizmat joined
[09:59] <gfldex> I will check if that solves the problem.
[10:53] *** linkable6 left
[10:53] *** evalable6 left
[10:53] *** evalable6 joined
[11:26] <nine> In an interesting development the "where does the NativeCall slow down come from?" question morphed into "why the hell did this ever work before?"
[11:28] <nine> How so? Because when a native sub gets called the first time it should replace its own body with one that doesn't have any setup code anymore. But what gets called is actually not the sub itself, but a clone (because closures...). So while we do replace the original's body, the clone still contains the old one.
[11:46] <nine> So it really looks like it's more productive to work on the new NativeCall implementation jnthnwrthngtn++ pointed at
[11:51] <lizmat> I'd say: indeed, if I hadn't already said that  :-)
[11:55] *** linkable6 joined
[12:03] *** reportable6 left
[12:04] *** reportable6 joined
[12:37] *** jgaz joined
[13:02] *** jgaz left
[13:46] <dogbert17> it seems as if t/02-rakudo/15-gh_1202.t can fail in two ways, either a SEGV or with 'MoarVM panic: Memory allocation failed; could not allocate 29035875272 bytes'
[13:47] <dogbert17> it's always the same number
[13:49] *** jgaz joined
[14:04] *** ggoebel__ left
[14:21] *** jgaz left
[15:13] *** ggoebel__ joined
[15:56] <timo> m: say 29035875272.msb
[15:56] <camelia> rakudo-moar 21271aa5f: OUTPUT: «34␤»
[15:56] <timo> that's multiple gigabytes? tens of gigabytes
[15:56] <timo> m: say 29035875272 / 1024 / 1024 / 1024
[15:56] <camelia> rakudo-moar 21271aa5f: OUTPUT: «27.0417661145␤»
[15:58] <timo> so most likely something's growing without bound
[16:01] <dogbert17> timo: yes it's strange
[16:05] <timo> do we have a backtrace?
[16:11] <timo> the SEGV is quite possibly from stack area and heap area running into one another
[16:11] <timo> just a different way for emory exhaustion when malloc isn't able to report it
[16:12] <dogbert17> timo: let me get one ...
[16:13] <timo> the one fro the malloc panic will probably be more helpful, not sure if the stack actually gets corrupted from the segv if it is what i think it is
[16:31] <dogbert17> timo: the SEGV version showed up first, https://gist.github.com/dogbert17/a07d0bb2340e37e250106866c9d6dc8c
[16:33] <timo> can you print the whole dp and the op?
[16:39] <dogbert17> timo: gist updated
[16:46] <timo> the values in constants and gc_constants?
[16:46] <timo> but at least checkee being 0 doesn't seem bad
[16:47] <timo> what does val.o look like, and its STABLE?
[16:51] <dogbert17> (gdb) p STABLE(val.o)
[16:51] <dogbert17> Cannot access memory at address 0x10
[16:53] <timo> OK, so val.o is null
[16:53] <timo> that's what's segfaulting here, i imagine
[16:54] <dogbert17> I agree
[16:55] <dogbert17> trying to run this test under gdb hangs, it doesn't even finish one run
[18:02] *** reportable6 left
[18:06] *** japhb left
[18:09] *** japhb joined
[18:42] <timo> https://github.com/googleprojectzero/weggli oh my
[18:48] <MasterDuke> interesting
[19:27] <japhb> So is the underlying tree-sitter library, it looks like
[19:33] <timo> ah, you hadn't seen that yet?
[19:33] <timo> i believe a conference talk about it was linked here some time ago
[19:35] * japhb feigns shock that he might not have perfect memory
[20:04] *** reportable6 joined
[21:04] *** linkable6 left
[21:04] *** evalable6 left
[21:05] *** linkable6 joined
[22:05] *** linkable6 left
[22:06] *** linkable6 joined
[22:07] *** evalable6 joined
[22:48] *** ggoebel__ left
[22:49] *** ggoebel__ joined
[23:57] *** squashable6_ left
[23:59] *** squashable6 joined
