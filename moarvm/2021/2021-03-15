[04:12] *** Kaiepi left
[04:12] *** Kaiepi joined
[07:49] *** domidumont joined
[08:04] *** frost-lab joined
[09:11] *** Kaiepi left
[09:13] *** Kaiepi joined
[10:03] *** Kaiepi left
[10:04] *** brrt joined
[10:04] *** Kaiepi joined
[10:27] <jnthn> In a curious bit of timing, I too wrote my first blog post in a while... :-) https://6guts.wordpress.com/2021/03/15/towards-a-new-general-dispatch-mechanism-in-moarvm/

[10:52] <jnthn> brrt: Intersting post :)

[10:53] <jnthn> *interesting, even 

[10:55] <jnthn> I'm not really sure it's fair to say that database queries aren't relevant to the working programmer, although on the other hand we do seem to expend a lot of effort on stuff like ORMs in order to avoid them :)

[10:55] <brrt> jnthn: thanks; it is curious

[10:55] <brrt> yeah, it's a bit of a mix, I'm thinking especially of the very complex SQL report query/scripts

[10:56] <brrt> most programmers are kind of isolated of these and know rather little of SQL

[10:56] <brrt> I will read your blog post, too

[10:57] <brrt> also, database queries are exactly the kind of thing where a programmer would quibble about whether it's a program or not :-P

[11:00] <MasterDuke> brrt: i've thought of scripts/programming in a similar way. the absolute good of a strict/strong type system and it's blindingly obvious benefits that are often espoused i haven't experienced much. but that's probably because most of my programming hasn't been developing large systems

[11:01] <brrt> absolutes tend to be context-free

[11:01] <jnthn> brrt: I don't really have a quibble there; I've seen both spreadsheets and SQL queries whose complexity is quite incredible

[11:02] <jnthn> Certainly one can solve sufficiently complex things in those tools that I don't think one should look down on them as "not real programming", but I agree that this happens.

[11:02] <brrt> yeah, me too, spreadsheets in particular

[11:03] <brrt> I think part of the point that I was getting at, was that it's not a question of 'real' versus 'non-real' programming, but perspective and objectives;

[11:03] <lizmat> I once converted a program written in Clipper, which was a compiled version of Dbase 3 if I remember correctlu

[11:03] <lizmat> for a given input, it would run ~ 15 minutes, basically because it use the database as a variable store

[11:03] <lizmat> *used

[11:04] <brrt> if you're building an application on which a business of $large-monetary-value depends, it should be expected to look different from a script with low and possibly transient value

[11:04] <lizmat> rewrote that in an actual programming language, did everything in memory, ran in .2 seconds for the same input  :-)

[11:04] <brrt> heh

[11:04] <brrt> I wrote an geographic analysis program for OSM data  (power lines) and it ran entirely within postgresql/postgis

[11:05] <brrt> no doubt it would've been a lot faster in a 'real' language

[11:05] <brrt> though I also ended up writing an analysis in python and that was pretty slow (until I optimized the central algorithm)

[11:22] *** MasterDuke left
[11:29] *** brrt left
[11:35] *** MasterDuke joined
[11:46] <nine> brrt: I disagree a little bit about phones not being a scriptable enivronment. Incidentally I've recently made my first contribution to (a simulated) Airbus A320: https://github.com/legoboyvdlp/A320-family/issues/221 A bit of HTML and Javascript lets me use the aircraft's MCDU (the computer terminal) on my phone as part of my growing cockpit.

[11:46] <tellable6> nine, I'll pass your message to brrt

[11:47] <nine> In essence, web technology brings scripting to environments where it wasn't available before.

[11:52] *** frost-lab left
[11:57] <MasterDuke> nine: don't know if you've seen https://github.com/rakudo/rakudo/issues/4212#issuecomment-799318279 ?

[11:57] <nine> I have

[11:57] <nine> reply is half written

[11:57] <nine> alas, next meeting is on

[11:57] <MasterDuke> cool

[12:06] *** MasterDuke left
[12:07] *** MasterDuke joined
[12:12] *** brrt joined
[12:38] <leont> brrt: I like your article, and it has some overlap with one I'm currently writing 

[12:47] *** brrt left
[12:53] *** MasterDuke left
[12:55] *** MasterDuke joined
[13:03] *** brrt joined
[13:09] <brrt> leont: thanks, share it when it's done

[13:09] <tellable6> hey brrt, you have a message: https://gist.github.com/452a18615635064def105b099f0a7167

[13:14] <brrt> nine: heh, that's actually true, and I knew that; android phones are also surprisingly hackable, if you know the tricks

[13:15] <brrt> then again, the whole 'there's an app for that' thing is very anti-scripting, and I guess that was what I was going for

[13:21] <MasterDuke> hm. a simple count words one-liner (inspired by https://benhoyt.com/writings/count-words/) is ~10x slower in raku than perl or python. i was expecting it to be a little better

[13:32] *** cog left
[13:35] <leont> But is it better for the programmer?

[13:35] <leont> (and what does it look like?)

[13:37] *** cog joined
[13:40] <MasterDuke> raku - `my BagHash $w .= new; $w.add($_.lc.words) for "kjvbible_x10.txt".IO.lines; say .key, .value for %w.pairs.sort(-*.value);`

[13:42] *** brrt left
[13:43] <MasterDuke> perl -nE 'BEGIN { my %h }; $h{$_}++ for split " ", lc $_; END { say $_, $h{$_} for sort { $c{$b} <=> $c{$a} } keys %h}' kjvbible_x10.txt

[13:43] <jnthn> Can't it be something like like `my %w := bag "kjvbible_x10.txt".IO.words`? 

[13:43] <MasterDuke> python -

[13:43] <MasterDuke> counts = collections.Counter()

[13:43] <MasterDuke> for line in sys.stdin:

[13:43] <MasterDuke>     words = line.lower().split()

[13:43] <MasterDuke>     counts.update(words)

[13:43] <MasterDuke> for word, count in counts.most_common():

[13:43] <MasterDuke>     print(word, count)

[13:44] <jnthn> well, with .map(*.lc)

[13:44] <MasterDuke> .words is a bunch slower than .lines then .words

[13:44] <jnthn> Odd

[13:45] <lizmat> MasterDukeL: and .slurp.words ?

[13:45] <lizmat> MasterDuke: and .slurp.words ?

[13:45] <MasterDuke> well, the article says doing it line by line

[13:45] <jnthn> ah, ok, fair enough

[13:47] <MasterDuke> i assume .words would still count (minus the .slurp)

[13:48] <MasterDuke> jnthn: fwiw, yours is 90x slower

[13:49] <jnthn> Yowser

[13:49] <jnthn> So much for building immutable things being faster

[13:50] <MasterDuke> i.e., ~90s instead of ~1s

[13:50] <MasterDuke> `my %w := bag "kjvbible_x10.txt".IO.lines>>.lc.words; say .key, .value for %w.pairs.sort(-*.value);` is only 30x slower

[13:52] <lizmat> Bags are inherently slower because they need to do a .WHICH on the strings

[13:52] <MasterDuke> part of the problem with the bag approach is that it's a quanthash and uses the .WHICH

[13:52] <lizmat> right

[13:53] <MasterDuke> a plain hash in raku is only 7x slower

[13:53] <lizmat> since strings are the keys here already, it's adding a lot of overhead, so the old Perl idiom of %h{$word}++ would be fastest I think

[13:54] <MasterDuke> oh, maybe it's still about 10x

[13:54] <MasterDuke> `my %w; for "kjvbible_x10.txt".IO.lines -> $l { %w{$_}++ for $l.lc.words }; say .key, .value for %w.pairs.sort(-*.value);`

[13:55] <lizmat> I wonder if a Hash::str version of Hash::int would make things a lot faster again: https://modules.raku.org/dist/Hash::int:cpan:ELIZABETH/lib/Hash/int.pm6

[13:58] *** cog left
[14:01] *** codesections joined
[14:10] *** brrt joined
[14:23] <leont> BTW, for this sort of problem we're competing with shell, not C

[14:24] <MasterDuke> heh, the BagHash version has 997,486 deopts, another test case for my PR

[14:39] <MasterDuke> heh, just iterating over the lines of the file takes 0.7s in raku, but only 0.07s in perl

[14:40] <MasterDuke> `raku -ne 'BEGIN my $a; ++$a; END say $a' <kjvbible_x10.txt` vs `perl -nE 'BEGIN { my $a }; ++$a; END { say $a }' <kjvbible_x10.txt`

[14:41] <MasterDuke> i know raku is doing unicode handing here and perl isn't by default, but istr jnth writing a blog post a while ago about making this sort of thing much closer to perl's speed

[14:41] <lizmat> make sure you read the file with :enc<ascii> ?

[14:44] <MasterDuke> drops it to 0.4s

[14:46] * leont is intimately familiar with perl's readline implementation. You don't want to know how that sausage is made :-p 

[14:47] * MasterDuke is happy that leont just volunteered to optimize raku's readline implementation...

[14:48] <jnthn> MasterDuke: I assume you're subtracting Raku's startup time, and it's not that which is dominating?

[14:48] <leont> The part that caries most of the weight has 6 or 7 goto's to 4 different labels in about 150 lines of code; I'm not sure this is something you want to copy.

[14:50] <MasterDuke> yeah, i suspect the overall design is quite a bit different

[14:51] <MasterDuke> jnthn: no, but for me raku's startup time is only 0.075s

[14:55] <MasterDuke> jnthn: btw, have your new machine set up?

[15:00] *** Kaiepi left
[15:27] <jnthn> MasterDuke: Yes! :)

[15:28] <jnthn> MasterDuke: And it's sooo much faster than what I was using at home before :)

[15:29] <MasterDuke> nice

[15:29] <MasterDuke> and btw, good article

[15:37] <MasterDuke> just mentioned over in #raku, but switching to my remove_spesh_optimization_if_it_has_too_many_deopts branch in moarvm drops the BagHash version from 11s to 9.5s

[15:38] *** cog joined
[15:39] <MasterDuke> and almost all the deopts are gone

[15:41] <jnthn> Oh, very nice!

[15:42] <jnthn> Is that branch ready for review, or still some bits to go?

[15:42] <MasterDuke> essentially ready for review

[15:43] <lizmat> is there a PR ?

[15:44] <MasterDuke> i'm not sure about the final commit (which is needed to get the example you gave my to actually remove and create a new opt)

[15:44] <lizmat> asking for the weekly  :-)

[15:44] <MasterDuke> i think you've mentioned it before, it's been open for a while

[15:44] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1426

[15:44] <lizmat> still marked as draft ?

[15:45] <jnthn> Will try and find some moments for it this week

[15:45] <jnthn> releasable6: status

[15:45] <releasable6> jnthn, Next release in ≈5 days and ≈3 hours. 3 blockers. 0 out of 62 commits logged (⚠ 35 warnings)

[15:45] <releasable6> jnthn, Details: https://gist.github.com/d1fa3cd361597dab326b8ec91d040226

[15:45] <jnthn> Maybe after that :)

[15:46] <MasterDuke> there may be some minor cleanup of the intermediate commits i could/should do, but i think the final diff is in a reviewable state

[15:48] <MasterDuke> jnthn: also, at some point (probably not right now) i'd like to pick your brain about https://github.com/Raku/nqp/pull/703 and trying to make it work for any `if @foo`

[15:48] <jnthn> (To be clear, I can review it ahead of the release, just think it should get merged after it)

[15:49] <jnthn> Yes, I'm meant to be working on something else at the moment :)

[15:49] <MasterDuke> and i have a distraction crawling amongst my feet

[15:53] *** Kaiepi joined
[15:56] * lizmat hopes it is a wanted / needed distraction

[15:59] <MasterDuke> in general yes, her grabbing random cords and yanking on them/putting them in her mouth less so

[16:04] <lizmat> aah...  :-)

[16:20] * [Coke] started reading jnthn's article before work today and ran out of time it was so full.

[17:10] *** tbrowder__ joined
[17:14] *** tbrowder left
[17:14] *** tbrowder__ is now known as tbrowder

[17:17] *** brrt left
[17:31] *** notagoodidea joined
[18:08] *** notagoodidea left
[18:32] *** domidumont left
[19:10] *** avarab joined
[19:10] *** avarab left
[19:10] *** avarab joined
[19:11] *** notable6 left
[19:11] *** quotable6 left
[19:11] *** avar left
[19:11] *** quotable6 joined
[19:11] *** notable6 joined
[19:11] *** bisectable6 left
[19:15] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/03/15/2021-11-two-year-itch/

[19:28] *** domidumont joined
[19:32] *** domidumont left
[20:10] *** bisectable6 joined
[20:19] *** bisectable6 left
[20:19] *** bisectable6 joined
[20:24] *** Kaiepi left
[20:32] <japhb> jnthn++  # Really excellent detailed post.

[20:56] *** bisectable6 left
[20:56] *** notable6 left
[20:56] *** quotable6 left
[20:56] *** statisfiable6 left
[20:56] *** greppable6 left
[20:56] *** bloatable6 left
[20:56] *** benchable6 left
[20:56] *** tellable6 left
[20:56] *** harrow left
[20:57] *** bisectable6 joined
[20:57] *** notable6 joined
[20:57] *** quotable6 joined
[20:57] *** statisfiable6 joined
[20:57] *** greppable6 joined
[20:57] *** bloatable6 joined
[20:57] *** benchable6 joined
[20:57] *** tellable6 joined
[20:57] *** harrow joined
[21:38] <MasterDuke> nine: just for fun i tried out your more_asan_fixes branches, rebased them to master, and ran a spectest. the tests get slower and slower, and perf top says MVM_thread_join_background takes an increasing percentage (80% now and the spectest is almost finished, but seems to have hung)

[21:40] <MasterDuke> t/spec/S29-os/system.t consistently fails the `:merge with run on non-existent program does not crash [attempt 0-9]` tests

[21:48] *** zakharyas joined
[21:51] *** zakharyas left
[21:52] *** japhb left
[21:53] <MasterDuke> nine: btw, made any progress on figuring out that misspesh business?

[21:54] *** japhb joined
[22:08] *** sena_kun left
[23:13] *** dogbert11 joined
[23:16] *** dogbert2 left
