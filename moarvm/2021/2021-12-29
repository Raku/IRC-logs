[00:06] *** reportable6 left
[01:09] *** reportable6 joined
[02:21] <timo> japhb: but isn't over-conservative the opposite of what's happening here?

[02:28] *** frost joined
[02:45] <japhb> timo: Ugh, English.  :-/  There are two ways to interpret "conservative" here:  1. Assume only provably wrong code is wrong, conservatively assuming the warning checker is lacking sufficient nuance and would otherwise over-warn; 2. Assume only provably correct code is correct, and conservatively warn of ambiguity any time the code roughly matches the warning situation.

[02:45] <japhb> I had meant it in the second sense.

[02:52] <timo> haha

[02:52] <timo> it's a very inflammable language

[03:06] <moon-child> let us burn it, then, and start fresh

[04:41] *** squashable6 left
[04:41] *** notable6 left
[04:41] *** linkable6 left
[04:41] *** sourceable6 left
[04:41] *** benchable6 left
[04:41] *** quotable6 left
[04:41] *** releasable6 left
[04:41] *** coverable6 left
[04:41] *** shareable6 left
[04:41] *** tellable6 left
[04:41] *** bisectable6 left
[04:41] *** bloatable6 left
[04:41] *** nativecallable6 left
[04:41] *** unicodable6 left
[04:41] *** statisfiable6 left
[04:41] *** committable6 left
[04:41] *** evalable6 left
[04:41] *** reportable6 left
[04:41] *** greppable6 left
[04:41] *** sourceable6 joined
[04:41] *** benchable6 joined
[04:42] *** bloatable6 joined
[04:42] *** quotable6 joined
[04:42] *** evalable6 joined
[04:42] *** reportable6 joined
[04:43] *** releasable6 joined
[05:41] *** notable6 joined
[05:42] *** committable6 joined
[05:43] *** coverable6 joined
[05:43] *** greppable6 joined
[05:43] *** linkable6 joined
[05:44] *** nativecallable6 joined
[05:44] *** statisfiable6 joined
[05:44] *** tellable6 joined
[06:08] *** reportable6 left
[07:08] *** linkable6 left
[07:08] *** evalable6 left
[07:09] *** evalable6 joined
[07:10] *** reportable6 joined
[08:42] *** bisectable6 joined
[08:43] *** unicodable6 joined
[08:43] *** shareable6 joined
[08:44] <Nicholas> ah OK, if "burn it, then, and start fresh" is the plan, apparently we now go with: bona universala saluttempo #moarvm

[08:48] <Nicholas> but apparently Esparanto is too irregalar for some, so maybe it should be xamgu munje prami tcika

[08:49] <Nicholas> (Google translate can't do Lojban, so I have no idea if those make any real sense)

[09:10] *** linkable6 joined
[09:34] <MasterDuke> pretty sure timo knows lojban

[09:50] <timo> aye

[09:50] <timo> esperanto is in a way "the php of conlangs" :P

[09:50] <timo> i once made someone *very* angry

[09:58] <MasterDuke> https://gist.github.com/MasterDuke17/ea694daa0e83725bc7b5898f446cf4ce is what i have so far for mimalloc. still in the situation where rakudo builds, but linking the runner complains `/usr/bin/ld: inst-rakudo.o: in function 'MVM_malloc': /home/dan/Source/perl6/install/include/moar/core/alloc.h:2: undefined reference to 'mi_malloc'`

[10:31] <MasterDuke> adding -lmimalloc makes the rakudo linking complete, but then ldd shows inst-rakudo depending on /usr/lib/libmimalloc.so.2.0 instead of the statically included libmimalloc.a i built+used for moarvm

[10:41] <timo> do you have like output from make that shows all the commands it issues? like no-silent-build or what it's called?

[10:54] <MasterDuke> this step succeeds: gcc -c -DSTATIC_EXEC_PATH='/home/dan/Source/perl6/install/bin/rakudo' -DSTATIC_NQP_HOME='/home/dan/Source/perl6/install/share/nqp' -DSTATIC_RAKUDO_HOME='/home/dan/Source/perl6/install/share/perl6'   -std=gnu99 -Wextra -Wall -Wno-unused-parameter -Wno-unused-function -Wno-missing-braces -Werror=pointer-arith -Werror=vla -O3

[10:54] <MasterDuke> -DNDEBUG -g3  -D_REENTRANT -D_FILE_OFFSET_BITS=64 -fPIC -DDEBUG_HELPERS -DMVM_DTRACE_SUPPORT -DHAVE_TELEMEH -DMVM_HEAPSNAPSHOT_FORMAT=3 -march=native -D_GNU_SOURCE -I'/home/dan/Source/perl6/install/include' -I'/home/dan/Source/perl6/install/include/moar' -I'/home/dan/Source/perl6/install/include/libuv'

[10:54] <MasterDuke> -I'/home/dan/Source/perl6/install/include/libatomic_ops' -I'/home/dan/Source/perl6/install/include/libtommath' -I'/home/dan/Source/perl6/install/include/dyncall' -I'/home/dan/Source/perl6/install/include/mimalloc' -o inst-rakudo.o src/vm/moar/runner/main.c

[10:54] <MasterDuke> this next step fails: gcc -o inst-rakudo -O3 -DNDEBUG -g3  -Wl,-rpath,"//home/dan/Source/perl6/install/lib"   inst-rakudo.o -L"/home/dan/Source/perl6/install/lib"  -lmoar

[10:55] <MasterDuke> but mostly afk for a bit

[11:14] *** sena_kun joined
[12:00] <timo> ok would be interested to see how libmoar.so or whatever is built i guess?

[12:07] *** reportable6 left
[12:07] *** reportable6 joined
[12:10] <MasterDuke> timo: https://gist.github.com/MasterDuke17/ea694daa0e83725bc7b5898f446cf4ce#file-moar-make

[12:14] <timo> ok, i wonder if nm would show the mimalloc functions in libmoar.so or maybe some other file is responsible for handling -l like a .la or so? it's been a while since i had to dig this deep haha

[12:16] <timo> oh, could it possibly have something to do with -rpath and friends?

[12:17] <timo> oh it could also be that src/vm/moar/runner/main.c simply doesn't use malloc at all?

[12:17] <timo> it does tho. just directly malloc, not MVM_malloc

[12:21] <timo> hum. and putting blah.a in a gcc linker commandline should be roughly equivalent to putting all the .o files that were made to build that .a file i think?

[12:41] *** squashable6 joined
[14:24] <MasterDuke> libmoar.so has a whole bunch of mi_* symbols

[14:40] <nine> including mi_malloc?

[14:47] <MasterDuke> yep

[15:02] *** Kaiepi joined
[15:18] <MasterDuke> i don't quite understand why the changes in https://github.com/MoarVM/MoarVM/pull/1402/files work, but the ones i've done for mimalloc don't (even though i tried to copy them from that gmp pr)

[15:20] <MasterDuke> and just to be sure i double checked with ldd and the libmoar from the gmp branch is *not* referencing a system gmp

[15:20] <MasterDuke> and neither is the inst-rakudo

[15:26] *** squashable6 left
[16:29] *** squashable6 joined
[17:56] *** sena_kun left
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[20:35] *** linkable6 left
[20:35] *** evalable6 left
[20:36] *** linkable6 joined
[20:37] *** evalable6 joined
[20:55] <dogbert17> can anything useful be gleaned from the following gist? https://gist.github.com/dogbert17/6e3669287a7cfbce0eba1d391550f08f

[20:59] <Nicholas> GC panics are not anything I know how to diagnose

[21:00] <timo> but what is the panic message?

[21:00] <Nicholas> (I read it. You are not alone, but I can't help)

[21:00] <timo> certainly we're not panicing with just a null pointer instead of a bit of text?

[21:15] <dogbert17> timo: MoarVM panic: Invalid owner in item added to GC worklist

[21:24] <timo> do you perhaps have that caught in rr? then you could watch and reverse-continue to see what writes the bogus value, which is probably "free uncopied" or some allocation function from the gc, and then further back to see what the original object was

[21:30] <dogbert17> :-)

[21:32] <nine> rr really is a game changer for these kinds of issues

[21:33] <dogbert17> if you can run it 

[21:33] <nine> You can't?

[21:34] <dogbert17> it's not supported under Virtualbox as far as I can remember

[21:36] <dogbert17> perhaps I can entice one of you to take a look instead :)

[21:37] <dogbert17> this is another one of where I've set MVM_GC_DEBUG=3

[21:38] <dogbert17> s/of//

[21:38] <MasterDuke> timo: any interesting in turning zstd into a submodule? maybe if you do that i can see what you did and figure out my mimalloc problem

[21:50] <MasterDuke> timo: another project idea. a new profile type of sqlite, where instead of storing all the data in memory and then writing out a sql file, directly use the sqlite api to create a database and do inserts to it on the fly

[22:35] <timo> i've shied away from that, since nativecall from nqp seems just a little .. interesting :)

[22:51] <MasterDuke> why nativecall instead of just implementing in moarvm? it could be a backend-specific option

[22:51] <MasterDuke> i.e., make sqlite a new 3rdparty module

[22:52] <timo> a little odd maybe. we'd definitely want to load sqlite3 only when it's actually used

[22:52] <timo> also, some of the data we'll still have to keep around .. but i guess not that much

[22:52] <MasterDuke> i was thinking have moarvm do the inserts at profile collection time, not all at once at the end

[22:53] <japhb> And those inserts would need to be batched -- sqlite (like many SQL engines) does not perform well with a great many tiny inserts.

[22:53] <MasterDuke> sure, do it at gc runs or something like that

[22:54] <timo> at gc runs is when we do the collecting already anyway

[22:54] <timo> wait

[22:54] <timo> i was thinking heap snapshots the whole time

[22:55] <MasterDuke> could do those too, but i'm thinking of regular profiles

[22:56] <japhb> MasterDuke: I can see snapshotting the list at GC time, but not actually doing the SQL writes during stop-the-world; making GC pauses longer would make profiling hard to use for some usecases.

[22:57] <timo> kicking off the writing to sql on a separate thread can also very well interfere with performance measurement

[22:57] <japhb> True ....

[22:57] <japhb> No winning

[22:59] <japhb> GAH, our GC pause time drives me nuts but I haven't the mental cycles available to shrink that STW time.

[22:59] <timo> got any ideas? :)

[23:01] <japhb> I mean, the old school solution was to mark during STW, and sweep concurrently, and then optimize the heck out of the mark phase ... but we don't use a mark-and-sweep GC and never have.

[23:01] <japhb> We could get less exact about finding garbage, by doing something like card/page marking, in order to do all GC marking writes in the CPU cache.

[23:02] <japhb> That would be way less space-efficient though.

[23:03] <timo> haven't heard that yet

[23:03] <japhb> We could use processor virtual memory tricks, but those aren't super easily portable I think.  (Though I'm sure someone has figured out how to fake some of it with mmap and mprotect shenanigans)

[23:03] <japhb> timo: Which, card marking?

[23:05] <timo> yeah, though page marking also not sure

[23:09] <japhb> IIRC (and it's been a while since I read The Garbage Collection Handbook), the idea is that instead of marking individual objects, you mark by memory blocks, saying "This (1K or 4K or 64K or whatever) block contains at least one live object".  And then instead of marking on the data structures themselves, you mark on a bitmap that is mapped back to your whole heap, on a 1- or 2-bits-per-block basis.  So now 

[23:09] <japhb> all the marking writes happen in that bitmap, which is compact and probably fits in cache.  Separate the heaps (and the mark bitmaps) by CPU core, and suddenly you have no-contention, very compact mark phases.

[23:09] <japhb> BUT: It's very easy to end up with memory that looks like Havarti cheese.

[23:10] <japhb> And we've generally biased in favor of keeping main memory more compact, rather than GC overhead memory.

[23:11] <japhb> TGCH has a few improvements on that, I believe -- like ability to skip clearing the mark bitmap ever, by redefining the bit patterns at each GC instead.

[23:12] <timo> ah, hehe

[23:12] <timo> like with three colored approaches or so

[23:12] <japhb> Right

[23:16] <timo> i wonder how we could win something for stuff like "out of these last 100 objects, fifty were pointers to the Int type object" and making that faster

[23:16] <timo> but that's kind of already a thing the cpu cache can do

[23:26] <japhb> Well, I suppose we could put all type objects, HOWs and REPRs in a single pool which we consider "always live, never recurse" and special case that memory block in the GC

[23:27] <japhb> Or at least the HOWs and REPRs.

[23:27] <japhb> (Because I can see someone try to DOS that pool by constantly making trivially new types)

[23:28] <moon-child> probably not 'always live', but assume it's live except for some rare major gc

[23:30] <japhb> moon-child: You're thinking throughput GC though.  I see "major gc" and see "sudden latency spike".

[23:31] <moon-child> when do we care about latency?

[23:31] <moon-child> web applications?  Do it during downtime

[23:31] <moon-child> video games?  Do it on a loading screen

[23:32] <moon-child> there was some bank application that GCed once per day (or was it once per week?)

[23:32] <japhb> Although I would 100% love the ability to say "Please do a major GC right *now*, and not otherwise."

[23:32] <japhb> moon-child: Because right now we can't actually control when a major GC happens as opposed to a minor one.  We can only request that *a* GC happen.

[23:33] <moon-child> sure.  It doesn't seem particularly hard to add

[23:33] *** evalable6 left
[23:33] *** linkable6 left
[23:33] <moon-child> compared with implementing the mechanism

[23:33] <japhb> For web apps, thread recycling after NN requests is certainly a reasonable thing, when you have almost all varying memory in per-thread pools

[23:34] <timo> nah, making new types is common enough so that we want old types to be easily reclaimable

[23:34] <japhb> For video games, it can be hard because there can be a LOT of frames and corresponding network traffic before the next loading screen.

[23:34] <moon-child> how many types are you creating during those frames?

[23:35] <japhb> I think we're mixing two threads of conversation here.

[23:35] <timo> you're suggesting to make that a user-configurable thing at runtime?

[23:35] <japhb> I'm not creating tons of types during gameplay.  But MoarVM's GC has to support all the use cases.

[23:36] <japhb> timo: There's precedent.  Before it got really good, it was apparently not unusual to select the appropriately tuned GC for each JVM process launch

[23:36] <timo> have a good spot to run gc like at the start of "the main loop" when all the variables from the last go around the loop have gone out of scope and barely any new ones have been filled yot

[23:37] <timo> yeah

[23:37] <moon-child> sure.  All I'm saying is that, given a choice between: 1) certain objects are always assumed to be live; and 2) certain objects are assumed to be alive _except_ for the purpose of some major gc which is going to take a long time to run anyway, I prefer option 2

[23:37] <timo> we already have the inter-generational set which kinda does what number 2 is

[23:37] <moon-child> timo: related fun thing would be to tune nursery size to the amount you allocate over the course of a frame

[23:38] <japhb> Actually, I can see an option 3: Be able to request a GC of *only* a single pool, and rotate which pool gets GC'd.

[23:38] <japhb> moon-child: nodnod

[23:49] <MasterDuke> re kicking off a separate thread impacting perf measurements and not wanting to make gc pauses longer, i'm by no means certain this idea would work at all, but i wonder if it might make sense as sort of an alternate profiler (like the discussion about having alternate gcs). one that trades something (e.g., performance, latency, whatever) for

[23:49] <MasterDuke> reduced memory use, so we can profile something like the rakudo compilation without requiring a 64g swapfile in addition to my 32g ram

[23:51] <MasterDuke> off to bed, but interesting discussion about gcs. i feel 20 years ago we wouldn't have had so many good examples to steal from, but .net and jvm have done some really cool stuff in the recent past

[23:54] <timo> right, the profiler's main data usage is probably from the call graph, right?

[23:54] <timo> can we somehow easily figure out what hasn't been touched in a while?

[23:54] <timo> in theory we could "swap" them out with like zstd

[23:57] <timo> especially compilation literally has these "phases"

