[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:20] <japhb> jnthnwrthngtn++  # Awesome progress!  :-)

[01:03] *** evalable6 left
[01:03] *** linkable6 left
[01:05] *** evalable6 joined
[01:06] *** linkable6 joined
[01:23] <MasterDuke> is there an easy way to negate the return value of a function call in the lego jit?

[01:24] <MasterDuke> e.g., isfalse_s is just sugar for !istrue_s

[01:24] <MasterDuke> neither of which are currently jitted

[01:25] <MasterDuke> (they have templates, but not a lego jit implementation)

[05:11] *** quotable6 left
[05:11] *** benchable6 left
[05:11] *** linkable6 left
[05:11] *** releasable6 left
[05:11] *** reportable6 left
[05:11] *** bisectable6 left
[05:11] *** coverable6 left
[05:11] *** evalable6 left
[05:11] *** statisfiable6 left
[05:11] *** greppable6 left
[05:11] *** sourceable6 left
[05:11] *** committable6 left
[05:11] *** bloatable6 left
[05:11] *** shareable6 left
[05:11] *** tellable6 left
[05:11] *** nativecallable6 left
[05:11] *** squashable6 left
[05:11] *** unicodable6 left
[05:11] *** notable6 left
[05:11] *** shareable6 joined
[05:11] *** sourceable6 joined
[05:11] *** tellable6 joined
[05:12] *** notable6 joined
[05:12] *** squashable6 joined
[05:12] *** statisfiable6 joined
[05:12] *** reportable6 joined
[05:12] *** coverable6 joined
[05:12] *** benchable6 joined
[05:12] *** greppable6 joined
[05:12] *** bloatable6 joined
[05:12] *** evalable6 joined
[05:13] *** nativecallable6 joined
[05:13] *** releasable6 joined
[05:13] *** linkable6 joined
[05:14] *** committable6 joined
[05:14] *** bisectable6 joined
[05:14] *** quotable6 joined
[05:14] *** unicodable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:06] <timo> depends on what course of correction i will take

[06:16] <timo> like, do we want something that is aware of what SF's we're currently looking into and preventing only the inlining of calls into SFs we've already seen once? do we want a simple recursion depth counter for inlining optimization in general? do we want a count of how much we've been going into recursions so far and prevent anything further so that no pathological situations can occur when optimizing

[06:16] <timo> a single frame takes seconds because it keeps looking into other inlining options?

[07:03] *** evalable6 left
[07:03] *** linkable6 left
[07:04] *** linkable6 joined
[07:04] *** evalable6 joined
[07:10] *** patrickb joined
[08:06] *** Kaiepi left
[08:11] *** Kaiepi joined
[08:51] *** patrickb left
[08:56] <Nicholas> .tell brrt Good *, brrt. https://colabti.org/irclogger/irclogger_log/moarvm?date=2021-07-14#l8

[08:56] <tellable6> Nicholas, I'll pass your message to brrt

[09:37] <jnthnwrthngtn> moarning o/

[09:38] <Nicholas> \o

[09:51] *** evalable6 left
[09:51] *** linkable6 left
[09:52] *** evalable6 joined
[09:54] *** linkable6 joined
[11:02] *** linkable6 left
[11:02] *** evalable6 left
[11:05] *** linkable6 joined
[11:05] *** evalable6 joined
[11:23] *** MasterDuke left
[11:36] <jnthnwrthngtn> Good news: did a fix that makes all the NativeCall tests pass on new-disp. Bad news: ran spectests and 120 new failures. What on earth have I done...

[11:39] <Nicholas> failed to eat lunch?

[11:39] <jnthnwrthngtn> It ran while I was eating lunch

[11:46] <jnthnwrthngtn> First world problems, but my office machine, while being pretty darn fast, is not as fast my home dev box, which is newer and so faster.

[11:47] <jnthnwrthngtn> I could swap them around, but I have no idea whether the near future will see more home working or less.

[11:47] <Nicholas> but if you did that, you'd have a better dev box *and* a better coffee machine in the same place? Wouldn't that upset some balance?

[11:47] <Nicholas> Is the pub next to the office still allowed to be open?

[11:48] <jnthnwrthngtn> Yes, but we're not allowed to go to it unless we do at least a self-test + sworn declaration.

[11:49] <jnthnwrthngtn> (Because they tightened up the rules from "3 weeks after first dose" to "2 weeks after second dose" last week)

[11:49] <Nicholas> but 2 weeks after second dose, and (for the current rules) you'd be allowed in with just the proof of second dose?

[11:49] <Nicholas> (and we obviously don't know if the rules will change again by that time)

[11:50] <jnthnwrthngtn> Yes

[11:51] <jnthnwrthngtn> Well, and they don't actually require staff to check at restaurants, there's just spot checks by inspectors (which I've never seen happen, although I've not really been out enough to make it terribly likely anyway, even when I was in the 2-week window when I could)

[11:56] <jnthnwrthngtn> Ah, seems the regression was indeed an "I need lunch" kind of one. I forgot to account for capture parameters, which also allow all nameds.

[12:01] <jnthnwrthngtn> Also, the passing nativecall ones means I'm down to just one screen of `make test` failure output (8 tests, though 1 seems flappy)

[12:03] *** reportable6 left
[12:04] *** reportable6 joined
[12:09] <jnthnwrthngtn> Yay, 1202 fully passing spectests with that.

[12:10] <dogbert17> how many left, 250?

[12:10] <jnthnwrthngtn> I don't know how many there currently are without checkout out `master` and running it and seeing the number at the end

[12:10] <jnthnwrthngtn> If anybody has it handy I'd be curious :)

[12:12] <dogbert17> on my system it's 1405 excluding the perl 5 tests which I don't run

[12:22] <jnthnwrthngtn> m: say 1405 - 1202

[12:22] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´203‚ê§¬ª

[12:22] <jnthnwrthngtn> m: say 1202 / 1405

[12:22] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´0.855516‚ê§¬ª

[12:22] <jnthnwrthngtn> Not bad

[12:25] <jnthnwrthngtn> Pretty sure my next task should be to port the regex compiler

[12:25] <jnthnwrthngtn> (To emit dispatch ops)

[12:25] <jnthnwrthngtn> Since the next problem I'm looking at appears to be because I didn't do that

[12:27] <jnthnwrthngtn> I really wish people would just cope with long files rather than splitting stuff out in ways that mean I can't just open src/core.c/ClassName.pm6 and find what I'm looking for...

[12:33] <dogbert17> has someone managed to hide the regex compiler :)

[12:34] <jnthnwrthngtn> No, just INTERPOLATE :)

[12:34] <jnthnwrthngtn> Though the regex compiler is also a tad harder to refactor than first hoped

[12:34] *** MasterDuke joined
[12:40] <Nicholas> jnthnwrthngtn: Stage start      :   0.002

[12:40] <Nicholas> No MoarVM syscall with name 'capture-names-list' at gen/moar/BOOTSTRAP/v6c.nqp:5228  (/home/nick/Perl/rakudo/blib/Perl6/BOOTSTRAP/v6c.moarvm:has-named-args-mismatch)

[12:40] <Nicholas> did you forget to push something?

[12:41] <Geth> ¬¶ MoarVM/new-disp: 576d50b041 | (Jonathan Worthington)++ | 3 files

[12:41] <Geth> ¬¶ MoarVM/new-disp: Add capture-names-list syscall

[12:41] <Geth> ¬¶ MoarVM/new-disp: 

[12:41] <Geth> ¬¶ MoarVM/new-disp: To get an array of the names of the named arguments being passed by the

[12:41] <Geth> ¬¶ MoarVM/new-disp: capture.

[12:41] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/576d50b041

[12:41] <jnthnwrthngtn> Yes, sorry.

[13:02] <MasterDuke> seems like negating a function call via the jit isn't possible. think i'd need to add a `flip` argument to MVM_coerce_istrue_s

[13:09] <jnthnwrthngtn> MasterDuke: That's getting deleted in new-disp, fwiw

[13:09] <jnthnwrthngtn> Or at least, the boolification stuff in there is

[13:10] <MasterDuke> ah, good to know. i'll put a pause on this until after new-disp lands

[13:11] <jnthnwrthngtn> smart stringify and friends also

[13:12] <MasterDuke> it'll be nice to have all that stuff simplified

[13:13] <jnthnwrthngtn> They all become dispatchers, pretty much

[14:02] *** frost left
[14:04] <[Coke]> (cope with long files) - was part of that performance, in which case we can recombine once you make everything faster? :)

[14:08] <Geth> ¬¶ MoarVM/hash-fsck-fixes: 736154d29d | (Nicholas Clark)++ | 3 files

[14:08] <Geth> ¬¶ MoarVM/hash-fsck-fixes: Fix some bugs in the various hash_fsck functions.

[14:08] <Geth> ¬¶ MoarVM/hash-fsck-fixes: 

[14:08] <Geth> ¬¶ MoarVM/hash-fsck-fixes: They were still assuming that the metadata sentinel byte needed to be 1,

[14:08] <Geth> ¬¶ MoarVM/hash-fsck-fixes: and reporting an error if it was not. This should have been changed as

[14:08] <Geth> ¬¶ MoarVM/hash-fsck-fixes: part of commit b432533e90f175a7 in Oct 2020:

[14:08] <Geth> ¬¶ MoarVM/hash-fsck-fixes:     The hash metadata sentinel byte can be 0 - it does not need to be 1.

[14:08] <Geth> ¬¶ MoarVM/hash-fsck-fixes: 

[14:08] <Geth> ¬¶ MoarVM/hash-fsck-fixes: <‚Ä¶commit message has 5 more lines‚Ä¶>

[14:08] <Geth> ¬¶ MoarVM/hash-fsck-fixes: review: https://github.com/MoarVM/MoarVM/commit/736154d29d

[14:09] <Geth> ¬¶ MoarVM: nwc10++ created pull request #1513: Fix some bugs in the various hash_fsck functions.

[14:09] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1513

[14:41] <Geth> ¬¶ MoarVM: 736154d29d | (Nicholas Clark)++ | 3 files

[14:41] <Geth> ¬¶ MoarVM: Fix some bugs in the various hash_fsck functions.

[14:41] <Geth> ¬¶ MoarVM: 

[14:41] <Geth> ¬¶ MoarVM: They were still assuming that the metadata sentinel byte needed to be 1,

[14:41] <Geth> ¬¶ MoarVM: and reporting an error if it was not. This should have been changed as

[14:41] <Geth> ¬¶ MoarVM: part of commit b432533e90f175a7 in Oct 2020:

[14:41] <Geth> ¬¶ MoarVM:     The hash metadata sentinel byte can be 0 - it does not need to be 1.

[14:41] <Geth> ¬¶ MoarVM: 

[14:41] <Geth> ¬¶ MoarVM: <‚Ä¶commit message has 5 more lines‚Ä¶>

[14:41] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/736154d29d

[14:54] <jnthnwrthngtn> Uff, this'll be "fun". I switched the regex compiler fully over to emitting disaptch ops instead of findmeth/invoke sequences. It compiles NQP well enough that it compiles the NQP parts of Rakudo (and such that all NQP tests pass). It then does a misparse somewhere in CORE.setting.

[14:55] <jnthnwrthngtn> Error while compiling, type X::Comp::AdHoc

[14:55] <jnthnwrthngtn>   payload: Missing required term after infix

[14:55] <jnthnwrthngtn>  at line 2, near " :\n"

[14:55] <jnthnwrthngtn> ...I don't believe that line number at all

[15:01] <nine> I always treat line numbers with a healthy dose of scepticism ;)

[15:05] <jnthnwrthngtn> Yeah, it was waaay off. The correct one is 319 and it happens when we see an operator adverb :)

[15:05] <jnthnwrthngtn> This...doesn't tell me a lot.

[15:08] <dogbert17> enocoffee perhaps

[15:08] <Nicholas> I was going to suggest tea

[15:09] <dogbert17> E_NO_T :)

[15:13] <jnthnwrthngtn> Of all things, why does it have to be operator adverbs...now I have to remember a bit about how those a parsed.

[15:14] <timo> oof, i remember something about putting multiple adverbs in a row, but i think that was just‚Ñ¢ for lists of pairs

[15:19] <jnthnwrthngtn> Well, it's more the way they are parsed as infixes but then marked as fake and the expression parser is like "oh, let's pretend we never saw an infix!"

[15:19] <jnthnwrthngtn> Of all the things I can guess might be wrong, they all feel too unlikely to really be the issue though

[15:22] <timo> well, great that the nqp regex test suite doesn't catch this i guess?!? :(

[15:22] <timo> though involving invocations it's possibly more about the methods that set stuff on cursors and such

[15:25] <jnthnwrthngtn> Well, <fake_infix> is parsed and passes, but then fake is never seen in HLL EXPR

[15:26] <jnthnwrthngtn> Oh. It's already gone missing right after we call that

[15:26] <timo> something something pass by reference vs value vs container vs something or other

[15:27] <jnthnwrthngtn> Well, current suspicion falls on flattening

[15:27] <timo> surely nothing related to return values

[15:27] <jnthnwrthngtn> <O(|%item_assignment, :assoc<unary>, :fake<1>, :dba<adverb>)>

[15:27] <timo> ah, well, i'm sure you're already on top of the issue

[15:29] <jnthnwrthngtn> yup, if I change it to this:

[15:29] <jnthnwrthngtn>  <O(:prec<i=>, :assoc<right>, :assoc<unary>, :fake<1>, :dba<adverb>)>

[15:29] <jnthnwrthngtn> Then it shows up

[15:30] <jnthnwrthngtn> Wonder what I've managed to do...

[15:34] <jnthnwrthngtn> meh, that was silly...

[15:40] <jnthnwrthngtn> Goodness, this is super glacial now that we no longer get spesh of rules

[15:44] <MasterDuke> how easy is it going to be to spesh these new dispatchers and such?

[15:45] *** linkable6 left
[15:45] *** evalable6 left
[15:46] <jnthnwrthngtn> Relatively straightforward for those that don't do resumption

[15:46] <Nicholas> I'm sure that this is the wrong order, but will your dev time improve if you speshed some of this before finishing the rest?

[15:47] <jnthnwrthngtn> This is quite possible. :)

[15:47] *** linkable6 joined
[15:48] <Geth> ¬¶ MoarVM/new-disp: af3a8b1616 | (Jonathan Worthington)++ | src/core/args.c

[15:48] <Geth> ¬¶ MoarVM/new-disp: Fix a thinko in args flattening

[15:48] <Geth> ¬¶ MoarVM/new-disp: 

[15:48] <Geth> ¬¶ MoarVM/new-disp: If we install a named arg's value into an earlier slot because it

[15:48] <Geth> ¬¶ MoarVM/new-disp: overrides a value we flattned in, we still need to progress through the

[15:48] <Geth> ¬¶ MoarVM/new-disp: list of original named arguments.

[15:48] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/af3a8b1616

[15:48] *** evalable6 joined
[15:55] <jnthnwrthngtn> Hmm, that almost gets the tests that interpolate stuff into regexes working, except apparently it's not happy about multi-dispatch with natives somehow

[16:05] <nine> timo: have you done some work on the spesh recursive inline issue yet?

[16:36] <jnthnwrthngtn> And now it is. Down to 6 failing files in `make test`

[16:44] <[Coke]> wow

[16:50] <timo> sorry, i still haven't decided how to actually fix it

[17:15] <[Coke]> jnthnwrthngtn: is it worth switching "Raku" to 'Raku' in that last commit?

[17:15] <[Coke]> In normal code I wouldn't bother, but maybe it might make a difference in the compiler?

[17:19] <jnthnwrthngtn> [Coke]: Hm, single quoted string instead of double quoted? The compiler produces ths same code if it's a literal value.

[17:19] *** evalable6 left
[17:19] *** linkable6 left
[17:19] <jnthnwrthngtn> It is a bit of a mix and match in there though. In my slight defence, that error code was copy-paste-tweak from BOOTSTRAP :)

[17:20] <jnthnwrthngtn> Current spectest status: 1272 passing

[17:20] *** linkable6 joined
[17:20] <jnthnwrthngtn> m: say "$(1272 - 1197) new today"

[17:20] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´75 new today‚ê§¬ª

[17:21] <jnthnwrthngtn> m: say 1272 / 1405

[17:21] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´0.905338‚ê§¬ª

[17:21] *** evalable6 joined
[17:21] <jnthnwrthngtn> I have energy left tonight after dinner, I'll wire up the coercion stuff so Int($blah) works

[17:22] <jnthnwrthngtn> That should help unblock some of the further `make test` files, and no doubt more spectests

[17:22] <jnthnwrthngtn> *If I have energy...

[17:23] <jnthnwrthngtn> home &

[17:33] *** [Coke] left
[17:39] *** [Coke] joined
[18:02] *** reportable6 left
[18:02] *** Kaiepi left
[18:03] *** Kaiepi joined
[18:05] *** reportable6 joined
[18:06] *** Kaiepi left
[18:06] *** Kaiepi joined
[20:07] *** dogbert17 left
[20:19] *** Kaiepi left
[20:19] *** Kaiepi joined
[23:13] <jnthnwrthngtn> Did and pushed the coercion type support. Down to 5 failing tests in `make test` (one of them moved on to a different failure mode), and 1281 passing spectests.

[23:47] *** linkable6 left
[23:47] *** evalable6 left
[23:47] *** linkable6 joined
[23:50] *** evalable6 joined
[23:56] <timo> looks shiny in any case :)

