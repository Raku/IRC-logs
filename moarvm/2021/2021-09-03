[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[01:04] *** squashable6 left
[01:04] *** reportable6 left
[01:04] *** notable6 left
[01:04] *** bisectable6 left
[01:04] *** coverable6 left
[01:04] *** committable6 left
[01:04] *** unicodable6 left
[01:04] *** evalable6 left
[01:04] *** quotable6 left
[01:04] *** benchable6 left
[01:04] *** greppable6 left
[01:04] *** releasable6 left
[01:04] *** shareable6 left
[01:04] *** tellable6 left
[01:04] *** statisfiable6 left
[01:04] *** bloatable6 left
[01:04] *** nativecallable6 left
[01:04] *** sourceable6 left
[01:04] *** linkable6 left
[01:04] *** linkable6 joined
[01:05] *** committable6 joined
[01:05] *** bloatable6 joined
[01:05] *** bisectable6 joined
[01:05] *** quotable6 joined
[01:05] *** releasable6 joined
[01:06] *** benchable6 joined
[01:06] *** evalable6 joined
[01:06] *** coverable6 joined
[01:07] *** nativecallable6 joined
[01:20] *** frost joined
[02:01] *** rakuUser left
[02:04] *** statisfiable6 joined
[02:06] *** tellable6 joined
[02:07] *** unicodable6 joined
[02:49] *** tealecloud joined
[02:54] *** tealecloud left
[03:04] *** squashable6 joined
[03:06] *** sourceable6 joined
[03:06] *** notable6 joined
[03:06] *** shareable6 joined
[03:06] *** reportable6 joined
[04:06] *** greppable6 joined
[04:10] *** nebuchadnezzar left
[05:57] <nine> dogbert11: sorry, still no joy

[06:02] *** reportable6 left
[06:46] *** nebuchadnezzar joined
[06:50] *** tealecloud joined
[06:55] <Nicholas> good *, #moarvm 

[06:55] *** tealecloud left
[06:56] *** patrickb joined
[07:04] *** reportable6 joined
[07:11] <Nicholas> nine: this "evening" thing is a myth? At least, it's not useful for progress with coding?

[07:16] <MasterDuke> nine: dogbert11's segv in io-cathandle.t just reprod for me in the second run

[07:18] <MasterDuke> took a couple more tries to get it in gdb, but just did

[07:18] <MasterDuke> list

[07:19] <MasterDuke> `tc=0x798912`, that's not right...

[07:19] <nine> So...what am I doing wrong? I am up to date on new-disp in all 3 repos, set GC_DEBUG to 1 and MVM_NURSERY_SIZE to 16 * 1024 and did a debug build.

[07:19] <nine> Running: while MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 gdb --ex 'set confirm' --ex run --ex quit --args /home/nine/rakudo/install/bin/moar --execname=/home/nine/rakudo/rakudo-m --libpath=/home/nine/rakudo --libpath=/home/nine/rakudo/blib --libpath=/home/nine/rakudo/install/share/nqp/lib /home/nine/rakudo/rakudo.moarvm -Ilib t/spec/S32-io/io-cathandle.t ; do true ; done

[07:20] <MasterDuke> have you tried compiling with clang instead of gcc?

[07:21] <nine> No. How do I do that?

[07:21] <MasterDuke> oh, i didn't have MVM_SPESH_BLOCKING set

[07:22] <MasterDuke> --compiler=clang added to MoarVM's configure

[07:24] <MasterDuke> i built with gcc (like i usually do), but sometimes that's made a difference

[07:27] <nine> Oooooh...indeed, without MVM_SPESH_BLOCKING it took only a few tries! MasterDuke++

[07:30] <nine> So we have a corrupted inline cache entry that goes away with MVM_SPESH_BLOCKING

[07:30] <dogbert11> MasterDuke++, Nine++

[07:41] *** frost left
[07:55] <nine> I'm trying to reproduce in rr by running with --chaos. Haven't succeeded so far. But, I have run into this multiple times: moar: src/spesh/deopt.c:32: uninline: Assertion `MVM_callstack_current_frame(tc) == f' failed

[08:00] <MasterDuke> are you also running a spectest in the background? i find that usually helps trigger things

[08:00] *** tealecloud joined
[08:01] * dogbert11 thought the word rr was a surefire way to wake up timo :)

[08:02] <Nicholas> Maybe he needs to set his IRC client to "trigger" on it. I think that ilmari set his to also trigger on "lunch"

[08:02] <timo> i am awake

[08:03] <Nicholas> good UGT, timo

[08:03] <timo> greetings nicholas san

[08:18] <nine> Oooh... that assertion failure is due to a GC issue in MVM_spesh_deopt_one

[08:19] <nine> It's a rather old bug, but the assertion is new, so it only surfaced now

[08:19] <MasterDuke> https://github.com/apple/swift/pull/39143 is interesting

[08:19] *** psydroid left
[08:28] <nine> Ok, it's not _that_ old. It got introduced in fba29b5e6041a5b9fb31dd8783801823eb2a7573 Fri May 15 16:17:51 2020 +0200

[08:28] *** psydroid joined
[09:10] *** frost joined
[09:21] <Geth> Â¦ MoarVM/new-disp: 3306949e06 | (Stefan Seifert)++ | src/spesh/deopt.c

[09:21] <Geth> Â¦ MoarVM/new-disp: Fix possible access to fromspace when uninlining during deopt

[09:21] <Geth> Â¦ MoarVM/new-disp: 

[09:21] <Geth> Â¦ MoarVM/new-disp: With commit fba29b5e6041a5b9fb31dd8783801823eb2a7573 the code now in

[09:21] <Geth> Â¦ MoarVM/new-disp: begin_frame_deopt was factored out into its own function. thus the MVMROOT of

[09:21] <Geth> Â¦ MoarVM/new-disp: the frame we're deoptimizing no longer protected the local variables in

[09:21] <Geth> Â¦ MoarVM/new-disp: begin_frame_deopt's callers. This led to potential segfaults and definite

[09:21] <Geth> Â¦ MoarVM/new-disp: "Assertion `MVM_callstack_current_frame(tc) == f' failed" errors.

[09:21] <Geth> Â¦ MoarVM/new-disp: 

[09:21] <Geth> Â¦ MoarVM/new-disp: Fix by moving the MVMROOT back out of begin_frame_deopt and into its callers.

[09:22] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/3306949e06

[09:38] <jnthnwrthngtn> morning o/

[09:39] <Nicholas> \o

[09:40] <jnthnwrthngtn> Curious. On my walk to work I saw what looked like a relatively low-flying commercial aeroplane with 2 presumably military planes escorting it, one each side.

[09:42] <nine> Most interceptions are due to communications problems

[09:42] <nine> i.e. radio issues

[09:44] <jnthnwrthngtn> Hopefully nothing more serious than that. Or a training exercise. It's not a path I see flights on often (pretty much flying south along the river)

[10:25] <nine> MasterDuke: can you still reproduce the segfault after my latest commit? Because I do not seem to be able to.

[10:25] <nine> dogbert11: ^^^

[10:28] *** rakuUser joined
[11:52] <dogbert11> nine: I'll test it ...

[11:59] <dogbert11> preliminary results are very promising :)

[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:07] <dogbert11> nine: I'm unable to reproduce the SEGV after your change :)

[12:27] <nine> yeah!

[12:27] <dogbert11> but now I'm out of bugs 

[12:28] <dogbert11> a shocking development :)

[12:41] <jnthnwrthngtn> o.O

[12:42] <Nicholas> I'm sure you'll wake up (in the morning) and find that it was all a dream. And you have plenty of bugs for company.

[13:12] <timo> the spesh linking we could get back once the resumption search stuff works for inlines, is that the thing that lets us preselect a spesh candidate by index for invocation? for cases where we cant inline because of non inlinable instructions or size or whatever?

[13:12] <nine> timo: that's what I figured

[13:12] <jnthnwrthngtn> Yes

[13:13] <jnthnwrthngtn> And thus an inlining pre-req

[13:13] <jnthnwrthngtn> Well, that's a lie. 

[13:13] <jnthnwrthngtn> We also try to inline even if that's not true :)

[13:13] <jnthnwrthngtn> If the unspesh'd bytecode looks small enough to have a go

[13:13] <nine> dogbert11: luckily I still have the t/spec/S17-promise/start.t around for such occasions. And as that one's stubborningly refusing to reproduce in rr, it may keep me busy for a while yet

[13:14] <nine> It often shows as "MoarVM oops: MVM_str_hash_lvalue_fetch_nocheck called concurrently on the same hash" but sometimes as a segfault.

[13:14] <jnthnwrthngtn> nine: If you want to figure out the final failing spectest, I wouldn't be sad ;)

[13:57] <dogbert11> nine: I can repro the t/spec/S17-promise/start.t quite consistently with a cut down version of the test file plus MVM_GC_DEBUG=1 and a 48k nursery

[13:58] <nine> dogbert11: Cool! So what's the golf?

[13:59] <dogbert11> https://gist.github.com/dogbert17/77beccab7a3b31555a1381aca322e5fa

[14:04] <dogbert11> btw, I do not use MVM_SPESH_BLOCKING=1 only MVM_SPESH_NODELAY=1

[14:10] <nine> Oooh! S17-promise/start.t is sensitive to the !rebuild_table issue, the fix for which is in master, but not yet in new-disp.

[14:14] <dogbert11> nine: have you already solved the mystery?

[14:15] <nine> That remains to be seen. Rebasing everything on master to get those fixes and will then run the test again.

[14:16] <dogbert11> "Alas poor bug! I knew it well"

[14:21] <nine> jnthnwrthngtn: somewhere in the AUTOTHREAD business the slash argument to !match-nth loses its container

[14:25] <jnthnwrthngtn> nine: Curious. I wonder why that only happens on new-disp.

[14:25] <jnthnwrthngtn> I don't think AUTOTHREAD itself changed

[14:25] <nine> It didn't according to the git history

[14:26] <nine> I added nqp::iscont checks to all involved Str methods and get this: https://gist.github.com/niner/588e0291e1b69c85df06111580515d89

[14:27] <nine> In !match-cursor we're still good. !match-nth occurs multiple times in the backtrace (presumably because of the autothreading) and fails

[14:27] <nine> dogbert11: looks good so far!

[14:27] *** frost left
[14:30] <dogbert11> yay

[14:42] <nine> I've tried to reproduce any issue with nursery sizes of 4, 8, 12 and 16K with multiple runs in parallel, but so far start.t has been perfectly stable.

[14:43] <dogbert11> so it turned out to be a bug you had already fixed

[14:45] <nine> No. It turns out to be a bug MasterDuke++ has already fixed :)

[14:45] <nine> Well, MasterDuke et. al.

[14:46] <dogbert11> MasterDuke et. al. ++

[14:51] <jnthnwrthngtn> .oO( that al guy is terribly productive, shows up everywhere... )

[14:55] <nine> So, AUTOTHREAD is first called with a containerized Junction as argument 1, then 4 layers deeper again with an uncontainerized Match object

[14:55] <dogbert11> m: "aa" ~~ m:nth(1|2)/a/; "aa" ~~ m:nth(1^2)/a/;

[14:55] <camelia> rakudo-moar 57841911f: ( no output )

[15:00] <nine> On master however, it's only called once - and with an uncontainerized Regex argument instead

[15:20] <nine> jnthnwrthngtn: there's an importent difference to master that hits closer to home: master picks the match(Regex:D $pattern, :$nth!, *%_) candidate, which does make sense for m:nth(1^2) while new-disp picks the method match(Regex:D $pattern, *%_) candidate with %_ containing: Hash element = {:nth(one(1, 2))} according to dd

[15:22] <jnthnwrthngtn> Ohhh.

[15:23] <jnthnwrthngtn> Then it's relying on the implementation accident mentioned in https://github.com/rakudo/rakudo/commit/bdd1fae0d0500ae77840b9b2a4118d4cbbe90474

[15:24] <jnthnwrthngtn> Note the type of :$nth is Any, not Mu

[15:25] <jnthnwrthngtn> But still, I'd expect the *%_ candidate (the more general one that handles many adverbs) to work

[15:25] <nine> But...shouldn't it then call match(Regex:D $pattern, :$nth!, *%_) with the individual Junction values?

[15:26] <jnthnwrthngtn> Only if we want to reinstate the difference between positionals and nameds

[15:26] <jnthnwrthngtn> The candidate with *%_ slurping them up is a matching candidate

[15:27] <jnthnwrthngtn> m: multi m($a) { 1 }; multi m(*@s) { 2 }; say m(1&2)

[15:27] <camelia> rakudo-moar 57841911f: OUTPUT: Â«2â¤Â»

[15:27] <nine> When I remove the $nth! candidate on master to force it to go through the general one, I get the exact same error

[15:27] <jnthnwrthngtn> m: multi m(:$a) { 1 }; multi m(*%s) { 2 }; say m(a => 1&2)

[15:27] <camelia> rakudo-moar 57841911f: OUTPUT: Â«all(1, 1)â¤Â»

[15:28] <jnthnwrthngtn> On new-disp, that second eval would also output 2

[15:28] <jnthnwrthngtn> m: "aa" ~~ m:i:nth(1|2)/a/; "aa" ~~ m:i:nth(1^2)/a/;

[15:28] <camelia> rakudo-moar 57841911f: ( no output )

[15:29] <jnthnwrthngtn> m: "aa" ~~ m:p(0):nth(1|2)/a/; "aa" ~~ m:p(0):nth(1^2)/a/;

[15:29] <camelia> rakudo-moar 57841911f: OUTPUT: Â«Cannot modify an immutable Match (ï½¢aï½£)â¤  in block <unit> at <tmp> line 1â¤â¤Â»

[15:29] <jnthnwrthngtn> Aha! Le bug on master.

[15:30] <jnthnwrthngtn> Can be exposed without even removing a candidate, just with using multiple adverbs and giving one a junction

[15:30] <lizmat> I guess /me will have a look at that then?

[15:31] <jnthnwrthngtn> Unless nine is already at a soluiton :)

[15:31] <jnthnwrthngtn> I'm guessing it fails to bind/propagate $/

[15:32] <nine> Isn't $/ that uncontainerized Match object?

[15:35] <jnthnwrthngtn> Dunno, I thought it was binding $/ to the caller's $/ in various places

[15:36] <nine> It seems to be passing $/ down (as argument \slash) and at some point assign into slash. So when I see a Match object in slash I figure $/ was deconted along the way

[15:36] <lizmat> nine: that was the idea I think, yes

[15:50] <jnthnwrthngtn> At startup a huge amount of time (25%) is spent doing deserialization of meta-objects (which we do lazily, on first request). It turns out that deserializing the meta-object of Perl6::Grammar results in the allocation of now less than 279855 objects.

[15:50] <jnthnwrthngtn> *no less

[15:51] <jnthnwrthngtn> 1) Holy shit! 2) It seems I know where to look to win some startup performance back. :)

[15:51] <jnthnwrthngtn> However, presumably we're doing this on master also

[15:51] <nine> Wait a minute.... When passing a Junction like 1^2 as :nth to .match, what we essentially expect as result is a Junction of Match objects, right? .match also implicitly sets $/ to _the_ Match object. But, this time we get multiple. That's why $/ contains that Junction. But how is this supposed to work? Who would create those containers to assign into?

[15:53] <nine> We'd basically need a Junction of containers for the assignment to work. But there are no containers in m:nth(1^2)

[16:16] <nine> m: "ab".match(:nth(1^2), /\w/); dd $/

[16:16] <camelia> rakudo-moar 57841911f: OUTPUT: Â«Nil $/ = Nilâ¤Â»

[17:08] <Geth> Â¦ MoarVM/new-disp: 8e71d3259e | (Jonathan Worthington)++ | 5 files

[17:08] <Geth> Â¦ MoarVM/new-disp: Make MVM_bytecode_get_validated_op_info an inline

[17:08] <Geth> Â¦ MoarVM/new-disp: 

[17:08] <Geth> Â¦ MoarVM/new-disp: It's called 230,000 times during startup while we setup inline caches,

[17:08] <Geth> Â¦ MoarVM/new-disp: but does very little work most of the time (just calls MVM_op_get_op);

[17:08] <Geth> Â¦ MoarVM/new-disp: marking it as possible to inline saves us around 3 CPU instructions per

[17:08] <Geth> Â¦ MoarVM/new-disp: call (and the jumps).

[17:08] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8e71d3259e

[17:08] <Geth> Â¦ MoarVM/new-disp: 654aa3fbbf | (Jonathan Worthington)++ | src/core/frame.c

[17:08] <Geth> Â¦ MoarVM/new-disp: Don't validate instructions in context only frames

[17:08] <Geth> Â¦ MoarVM/new-disp: 

[17:08] <Geth> Â¦ MoarVM/new-disp: When we deserialize closures, we need to create an MVMFrame for each

[17:08] <Geth> Â¦ MoarVM/new-disp: step along the outer chain. However, we may never actually run such a

[17:08] <Geth> Â¦ MoarVM/new-disp: frame. In that case, there's no point validing bytecode and doing a

[17:08] <Geth> Â¦ MoarVM/new-disp: bunch of other setup work (such as building inline caches). If we do

[17:08] <Geth> Â¦ MoarVM/new-disp: actually run the frame, we just validate it later.

[17:08] <Geth> Â¦ MoarVM/new-disp: 

[17:08] <Geth> Â¦ MoarVM/new-disp: This saves ~12.8 million instructions (nearly 2%) at Rakudo startup.

[17:08] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/654aa3fbbf

[17:08] <Geth> Â¦ MoarVM/new-disp: 241538de2c | (Jonathan Worthington)++ | src/core/callsite.c

[17:08] <Geth> Â¦ MoarVM/new-disp: Minor optimizations to callsite insert/drop arg

[17:08] <Geth> Â¦ MoarVM/new-disp: 

[17:08] <Geth> Â¦ MoarVM/new-disp: These are relatively hot in new-disp when recording dispatch programs,

[17:08] <Geth> Â¦ MoarVM/new-disp: and so worth a little attention; this is a saving of nearly a million

[17:08] <Geth> Â¦ MoarVM/new-disp: cycles off Rakudo startup.

[17:08] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/241538de2c

[17:16] <lizmat> .oO( making things faster now )

[17:17] <jnthnwrthngtn> Was too tired from $other-tasks today to do anything tricky, but there was some LHF from reading callgrind output :)

[17:18] <jnthnwrthngtn> home, dinner, etc. &

[17:48] <[Coke]> ÐÐ¾Ð±ÑÑÐ¹ Ð´ÐµÐ½Ñ

[17:51] <nine> [Coke]: and some appropriate greeting to you if my cyrillic and barely existing Slavic know how don't betray me

[17:52] * Altai-man .oO( Ð´Ð¾Ð±ÑÑÐ¹ Ð²ÐµÑÐµÑ )

[17:59] *** linkable6 left
[17:59] *** evalable6 left
[18:01] <[Coke]> I figured den was more time-agnostic, but vecher is more accurate for those who could read it.

[18:02] *** reportable6 left
[18:02] *** linkable6 joined
[18:09] <Altai-man> [Coke], I'd not consider "day" to be any more time-agnostic than "morning" or "evening". OTOH if you are in US, then it's still day for you indeed, and the rules about what to do in the case when time zones differ are non-existent.

[18:10] <[Coke]> Ah. in english, I find "good day" to be agnostic, but yah, the russian may very well be more like "afternoon". is there something time agnostic, or should I just go with ÐÑÐ¸Ð²ÐµÑ?

[18:11] <[Coke]> (or Ð´Ð¾Ð±ÑÑÐ¹ *, I guess. :)

[18:25] *** timo left
[18:27] *** timo joined
[19:01] *** evalable6 joined
[20:01] *** evalable6 left
[20:01] *** sourceable6 left
[20:01] *** benchable6 left
[20:01] *** coverable6 left
[20:01] *** statisfiable6 left
[20:01] *** shareable6 left
[20:01] *** committable6 left
[20:01] *** bloatable6 left
[20:01] *** squashable6 left
[20:01] *** nativecallable6 left
[20:01] *** linkable6 left
[20:01] *** tellable6 left
[20:01] *** notable6 left
[20:01] *** greppable6 left
[20:01] *** bisectable6 left
[20:01] *** unicodable6 left
[20:01] *** quotable6 left
[20:01] *** releasable6 left
[20:01] *** committable6 joined
[20:01] *** bloatable6 joined
[20:02] *** bisectable6 joined
[20:02] *** evalable6 joined
[20:02] *** shareable6 joined
[20:02] *** coverable6 joined
[20:03] *** unicodable6 joined
[20:03] *** notable6 joined
[20:03] *** greppable6 joined
[20:03] *** releasable6 joined
[20:03] *** linkable6 joined
[20:04] *** squashable6 joined
[20:04] *** nativecallable6 joined
[20:10] <Nicholas> good *able6, #moarvm

[20:24] <Geth> Â¦ MoarVM/new-disp: 8b611db6e1 | (Jonathan Worthington)++ | src/disp/syscall.c

[20:24] <Geth> Â¦ MoarVM/new-disp: Eliminate duplicate arg checking in syscalls

[20:24] <Geth> Â¦ MoarVM/new-disp: 

[20:24] <Geth> Â¦ MoarVM/new-disp: The boot-syscall dispatcher already makes sure that the callsite is in

[20:24] <Geth> Â¦ MoarVM/new-disp: the shape expected, so we can pull the args directly out of the arg info

[20:24] <Geth> Â¦ MoarVM/new-disp: rather than messing around with a processing context. Shaves 0.7% of the

[20:24] <Geth> Â¦ MoarVM/new-disp: CPU cycles off Rakudo startup, and may have a bigger impact on programs

[20:24] <Geth> Â¦ MoarVM/new-disp: that make a lot of such calls.

[20:24] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8b611db6e1

[20:36] *** tellable6 joined
[20:38] <nine> m: "aa" ~~ m:p(0):nth(1^2)/a/;

[20:38] <camelia> rakudo-moar 57841911f: ( no output )

[20:38] *** unicodable6 left
[20:38] <nine> m: "aa" ~~ m:p(0):nth(1^2)/a/; "aa" ~~ m:p(0):nth(1^2)/a/;

[20:38] <camelia> rakudo-moar 57841911f: OUTPUT: Â«Cannot modify an immutable Match (ï½¢aï½£)â¤  in block <unit> at <tmp> line 1â¤â¤Â»

[20:38] <nine> Huh....it's weirder than expected. It doesn't fail the first time?!

[20:41] *** unicodable6 joined
[20:41] <Geth> Â¦ MoarVM/new-disp: db6ab4883a | (Jonathan Worthington)++ | src/disp/program.c

[20:41] <Geth> Â¦ MoarVM/new-disp: Allocate dispatch program parts more lazily

[20:41] <Geth> Â¦ MoarVM/new-disp: 

[20:41] <Geth> Â¦ MoarVM/new-disp: In some cases we don't have constants, GC constants, or temps, so it's

[20:41] <Geth> Â¦ MoarVM/new-disp: better not to presume we do - especially as the memory stays around as

[20:41] <Geth> Â¦ MoarVM/new-disp: we attach it to the dispatch program.

[20:41] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/db6ab4883a

[20:41] <nine> Because the autothreading trouble only starts if $/ is a Junction already before the call

[20:41] <jnthnwrthngtn> Ah, maybe it's because if it's a Junction it auto-threads it

[20:42] <jnthnwrthngtn> Rather than passing along a Scalar that we can assign into?

[20:42] <nine> exactly

[20:42] <jnthnwrthngtn> Hm, but `Mu \slash` looks like it'd not do that

[20:42] <jnthnwrthngtn> Maybe that's forgotten somewhere?

[20:43] <MasterDuke> jnthnwrthngtn: think that most recent commit will help the leaks in `raku --full-cleanup -e ''` on new-disp?

[20:44] <jnthnwrthngtn> MasterDuke: Unlikely; it just eliminates wastage, but I think dispatch program cleanup should be freeing all of those

[20:44] <MasterDuke> ok

[20:57] <Geth> Â¦ MoarVM/new-disp: a1450d7790 | (Jonathan Worthington)++ | 2 files

[20:57] <Geth> Â¦ MoarVM/new-disp: Make some tiny GC functions static inlines

[20:57] <Geth> Â¦ MoarVM/new-disp: 

[20:57] <Geth> Â¦ MoarVM/new-disp: These are not inlined, at least not by all C compilers; they are tiny,

[20:57] <Geth> Â¦ MoarVM/new-disp: and the calling cost is about as many cycles as they perform. Another

[20:57] <Geth> Â¦ MoarVM/new-disp: 5 million cycles off Rakudo startup, and one of these three is called

[20:57] <Geth> Â¦ MoarVM/new-disp: regularly throughout program execution, so there'll be savings beyond

[20:57] <Geth> Â¦ MoarVM/new-disp: startup too.

[20:57] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a1450d7790

[20:57] <jnthnwrthngtn> It's interesting to learn what C compilers ain't inlining.

[20:58] <nine> It's because there are actually 2 Junctions!

[20:58] <nine> The first Junction is in $/ and the second one in the :nth argument

[20:59] <jnthnwrthngtn> These would all be more impressive ratio wise if I did them after the more difficult improvements :)

[20:59] <[Coke]> nine++

[20:59] <nine> It's probably the second Junction that triggers the autothreading and then the autothreading does not distinguish between Mu and Any args

[21:00] <jnthnwrthngtn> No, it blindly expands junctions, and in the case of multiple dispatch, that's kinda all it can do

[21:01] <nine> In this case it's not actually multiple dispatch

[21:03] <jnthnwrthngtn> I guess we could say that if you want to control it over multis you'd stick the constraints on the proto

[21:04] *** reportable6 joined
[21:36] <nine> So, I have a fix, but it somehow turns dd 42.any; into an infinite recursion

[21:39] <[Coke]> O_o;

[21:50] <MasterDuke> huh. https://gist.github.com/MasterDuke17/07eaac7a76b2f8615bb86ef898dda43c still results in the same `MoarVM panic: Tried to garbage-collect a locked mutex`

[21:51] <MasterDuke> and the backtraces look the same

[22:03] *** sourceable6 joined
[22:03] *** statisfiable6 joined
[22:35] *** patrickb left
[23:40] *** benchable6 joined
