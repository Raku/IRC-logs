[00:01] <timo> are you doing anything to counteract thermal throttling and such?
[00:02] *** reportable6 left
[00:03] <jnthnwrthngtn> timo: Hmm. How much of an issue is that on a desktop machine where I'm doing nothing except running this (because I'm actually shelled into it from another machine so I can really let it just do these measurements)?
[00:09] <timo> hmm, it's probably fine? not sure if you have lm_sensors set u or something
[00:15] *** frost joined
[00:32] <jnthnwrthngtn> I'm doing 100 runs each time to make the histogram, and have just repeated that 3 times with the same configuration and got 55%, 58%, 55%
[00:34] <jnthnwrthngtn> I have a bunch of changes, every one giving > 60% (around 64%) success rate at obtaining something around the best time we get.
[00:34] <jnthnwrthngtn> Every measurement I've obtained for combining any two of those (I've tried all permutations now) is around 55%.
[00:35] <jnthnwrthngtn> Each of the changes seems reasonable in the sense that it addresses a potential issue that could cause worse data for the specializer to use to make decisions.
[00:37] <jnthnwrthngtn> I originally thought I was looking at a range of problems that each contribute to missed optimization opportunities, but that doesn't make seem to fit if combining them doesn't add up to a better overall result.
[00:38] <jnthnwrthngtn> Anyway, enough for today.
[00:45] <timo> right, that is pretty odd
[01:05] *** reportable6 joined
[01:21] *** ggoebel joined
[01:26] *** ggoebel left
[02:26] *** unicodable6 left
[02:26] *** evalable6 left
[02:26] *** statisfiable6 left
[02:26] *** linkable6 left
[02:26] *** nativecallable6 left
[02:26] *** releasable6 left
[02:26] *** quotable6 left
[02:26] *** coverable6 left
[02:26] *** sourceable6 left
[02:26] *** benchable6 left
[02:26] *** squashable6 left
[02:26] *** bisectable6 left
[02:26] *** bloatable6 left
[02:26] *** reportable6 left
[02:26] *** greppable6 left
[02:26] *** committable6 left
[02:26] *** tellable6 left
[02:26] *** shareable6 left
[02:26] *** notable6 left
[02:27] *** unicodable6 joined
[02:27] *** nativecallable6 joined
[02:27] *** linkable6 joined
[02:27] *** shareable6 joined
[02:27] *** coverable6 joined
[02:27] *** committable6 joined
[02:28] *** bloatable6 joined
[02:28] *** quotable6 joined
[02:29] *** benchable6 joined
[02:35] *** leont left
[02:37] *** leont joined
[03:01] *** frost left
[03:05] *** frost joined
[03:26] *** greppable6 joined
[03:28] *** tellable6 joined
[03:29] *** evalable6 joined
[03:29] *** statisfiable6 joined
[04:26] *** reportable6 joined
[04:27] *** squashable6 joined
[04:28] *** bisectable6 joined
[04:29] *** releasable6 joined
[05:26] *** notable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[07:04] *** reportable6 left
[07:04] *** quotable6 left
[07:04] *** statisfiable6 left
[07:04] *** linkable6 left
[07:04] *** nativecallable6 left
[07:04] *** releasable6 left
[07:04] *** benchable6 left
[07:04] *** bloatable6 left
[07:04] *** shareable6 left
[07:04] *** bisectable6 left
[07:04] *** coverable6 left
[07:04] *** committable6 left
[07:04] *** tellable6 left
[07:04] *** squashable6 left
[07:04] *** evalable6 left
[07:04] *** unicodable6 left
[07:04] *** greppable6 left
[07:04] *** notable6 left
[07:04] *** nativecallable6 joined
[07:04] *** benchable6 joined
[07:05] *** unicodable6 joined
[07:06] *** tellable6 joined
[07:06] *** bisectable6 joined
[07:06] *** releasable6 joined
[07:06] *** notable6 joined
[07:06] *** squashable6 joined
[07:07] *** linkable6 joined
[07:27] *** sourceable6 joined
[08:04] *** bloatable6 joined
[08:04] *** committable6 joined
[08:05] *** greppable6 joined
[08:30] <MasterDuke> do we know where and how hash randomization effects optimization? is there some way we could minimize that? different data structure?
[08:42] <nine> It certainly does. The order in which spesh plans are created or processed is dependent on hash ordering
[08:44] <nine> That's why it's good to disable hash randomization when spesh bisecting
[09:04] *** quotable6 joined
[09:05] *** shareable6 joined
[09:06] *** coverable6 joined
[09:07] *** evalable6 joined
[09:09] <nine> Ah, found my strange GC issue! I just have to restore tc->cur_frame->return_type after a callback. Otherwise it would have been set to MVM_RETURN_VOID by finalize_handler_caller and we never write the return value to its target register.
[09:17] <MasterDuke> huh, this is kind of annoying. i'm trying to rebase remove_spesh_optimization_if_it_has_too_many_deopts, and just realized in the merge conflicts it just shows a conflict with HEAD, but i think HEAD is just whatever commit it's currently working it's way through merge
[09:17] <MasterDuke> *through merging
[09:17] <MasterDuke> it doesn't give me the actual hash of that commit
[09:31] <MasterDuke> doh. i'm thinking of it backwards. it replays my commits on top of HEAD
[09:41] *** patrickb joined
[10:04] *** statisfiable6 joined
[10:07] *** reportable6 joined
[11:10] <Geth> ¦ MoarVM/new-disp-nativecall: 4 commits pushed by (Stefan Seifert)++
[11:10] <Geth> ¦ MoarVM/new-disp-nativecall: 5f6aec755d | Fix segfault due to uninitialized entry_point in native calls
[11:10] <Geth> ¦ MoarVM/new-disp-nativecall: d490109181 | Fix missing data on clones of NativeCall sites
[11:10] <Geth> ¦ MoarVM/new-disp-nativecall: d7379beb6f | Fix nested runloops leaving call stack in confused state
[11:10] <Geth> ¦ MoarVM/new-disp-nativecall: 167c07f869 | Add boot-foreign-code dispatch terminal to replace native(call)invoke ops
[11:10] <Geth> ¦ MoarVM/new-disp-nativecall: review: https://github.com/MoarVM/MoarVM/compare/5f6aec755d62^...167c07f869f3
[11:23] *** ggoebel joined
[11:54] *** ggoebel left
[12:02] *** reportable6 left
[12:58] <MasterDuke> well, remove_spesh_optimization_if_it_has_too_many_deopts has been rebased to master and compiles. now there's just the little matter of the segv in the nqp build...
[13:03] *** reportable6 joined
[13:25] <Geth> ¦ MoarVM/new-disp-nativecall: 50696c39aa | (Stefan Seifert)++ | 4 files
[13:25] <Geth> ¦ MoarVM/new-disp-nativecall: No longer allocate an argument array for generic native calls
[13:25] <Geth> ¦ MoarVM/new-disp-nativecall: 
[13:25] <Geth> ¦ MoarVM/new-disp-nativecall: Add a new variant MVM_nativecall_dispatch which understands the new dispatcher
[13:25] <Geth> ¦ MoarVM/new-disp-nativecall: argument passing convention to avoid allocating and populating an argument
[13:25] <Geth> ¦ MoarVM/new-disp-nativecall: array for every call.
[13:25] <Geth> ¦ MoarVM/new-disp-nativecall: review: https://github.com/MoarVM/MoarVM/commit/50696c39aa
[13:25] <MasterDuke> hm, this spesh candidate has num_spesh_slots = 1432169616, that seems a little high...
[13:26] <nine> Great news! With this ^^^ the boot-foreign-code dispatch terminal based NativeCall is now faster than the version that dispatches to the generated function bodies. csv-ip5xs.pl is 13.883s vs 14.440s before.
[13:29] <MasterDuke> what was it pre-new-disp?
[13:30] *** sena_kun joined
[13:33] *** Altai-man left
[13:34] <nine> 14.442s with all it's JIT glory
[13:34] <MasterDuke> very cool
[13:44] <MasterDuke> ugh, think i'm going to have to break out rr. the spesh candidate pulled from tc->cur_frame->effective_spesh_slots is not well-formed
[13:46] *** discord-raku-bot left
[13:46] *** discord-raku-bot joined
[13:49] <dogbert17> nine++
[13:50] *** discord-raku-bot left
[13:50] *** discord-raku-bot joined
[14:02] *** frost left
[14:13] <dogbert17> nine: perhaps I've made a mistake when building your branch but one test (#9) in t/04-nativecall/02-simple-args.t fails for me
[14:14] <dogbert17> and I have made a mistake, grrr
[14:20] <dogbert17> heh, now it SEGV's instead
[14:23] <dogbert17> ==3028465==ERROR: AddressSanitizer: heap-use-after-free on address 0x6040003a6210 at pc 0x7f7902b81c65 bp 0x7fff928eeed0 sp 0x7fff928ee678
[14:23] <dogbert17> READ of size 1 at 0x6040003a6210 thread T0
[14:23] <dogbert17>     #0 0x7f7902b81c64  (/usr/lib/x86_64-linux-gnu/libasan.so.5+0xd6c64)
[14:23] <dogbert17>     #1 0x7f78fbf1532a in CheckString t/04-nativecall/02-simple-args.c:78
[14:32] <nine> dogbert17: no mistake. That's an open issue still. It's not actually a regression, just a longstanding bug that was hidden before.
[14:39] <nine> Without this bug, I'd probably have merged the first commit of the raku already, as it fixes the performance regression, even though it does not yet take full advantage of the new possibilities
[14:44] <nine> This requires a similar fix to Proxy support (the other open issue). Both require checking an argument's type and calling a method on it to obtain the actual value that we want to pass on. I think the latter requires dispatch resumption.
[14:45] <dogbert17> so more work has to be done then
[15:01] <nine> always, always
[15:01] <MasterDuke> if an op has an operand that i changed from being an `int16` to an `sslot`, and i want to get that operand, `&(ins->operands[3])` should change to just `ins->operands[3]`?
[15:06] <MasterDuke> hm, maybe not, because setting its value is still just `operand->lit_i16 = <foo>`, right?
[15:17] <nine> right
[15:22] *** linkable6 left
[15:22] *** evalable6 left
[15:22] *** evalable6 joined
[15:24] *** linkable6 joined
[15:38] *** sena_kun left
[15:39] *** sena_kun joined
[15:41] <MasterDuke> the branch is currently rebased locally and i'd like to push it. however, i'd like the current branch on the remote to stay as is so i can easily see the original changes i made. i can just push to a new branch on the remote, correct?
[15:43] *** Altai-man joined
[15:44] *** sena_kun left
[15:54] *** Altai-man left
[15:54] *** sena_kun joined
[16:41] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1561: Remove a spesh optimization if it has too many deopts (rebased after new-disp)
[16:41] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1561
[16:44] <MasterDuke> ^^^ segfaults pretty much right away in the nqp build with a bad spesh candidate, but i'm not sure why, the changes look correct. rr is dying for me, so haven't been able to track it down yet
[16:47] *** rypervenche joined
[17:00] <MasterDuke> oh. `spesh_cand->body.jitcode` is 0xffffffff00000004, that looks suspicious
[18:02] *** reportable6 left
[18:03] *** linkable6 left
[18:06] *** linkable6 joined
[18:23] <nine> very
[18:30] <MasterDuke> i still don't see anything wrong in the diff (or missing), but i guess i'll have to reboot and see if that fixes rr
[18:41] *** vrurg left
[18:42] *** vrurg_ joined
[18:43] *** japhb left
[18:43] *** japhb joined
[18:52] *** MasterDuke left
[18:52] <Nicholas> nine: ASAN is very excited by t/04-nativecall/02-simple-args.t
[18:52] <Nicholas> http://paste.scsys.co.uk/595985
[19:03] *** MasterDuke joined
[19:03] *** reportable6 joined
[19:52] *** jdv left
[19:52] *** jdv joined
[20:15] *** patrickz joined
[20:39] *** cog__ joined
[20:39] *** cognominal_ left
[20:40] *** [Coke] left
[20:41] *** cog__ joined
[20:41] *** [Coke]_ joined
[20:48] *** ggoebel joined
[21:21] *** ggoebel left
[21:32] *** ggoebel joined
[23:00] *** vrurg_ is now known as vrurg
[23:12] *** patrickz left
[23:14] *** patrickb left
[23:22] *** [Coke]_ is now known as [Coke]
[23:52] *** ggoebel left
