[00:02] *** reportable6 left
[00:31] *** evalable6 joined
[01:03] *** reportable6 joined
[02:24] *** quotable6 left
[02:24] *** tellable6 left
[02:24] *** unicodable6 left
[02:24] *** statisfiable6 left
[02:24] *** linkable6 left
[02:24] *** squashable6 left
[02:24] *** greppable6 left
[02:24] *** notable6 left
[02:24] *** sourceable6 left
[02:24] *** coverable6 left
[02:24] *** bloatable6 left
[02:24] *** nativecallable6 left
[02:24] *** benchable6 left
[02:24] *** bisectable6 left
[02:24] *** committable6 left
[02:24] *** reportable6 left
[02:24] *** releasable6 left
[02:24] *** shareable6 left
[02:24] *** releasable6 joined
[02:24] *** unicodable6 joined
[02:25] *** committable6 joined
[02:25] *** coverable6 joined
[02:25] *** bisectable6 joined
[02:26] *** statisfiable6 joined
[02:26] *** greppable6 joined
[02:27] *** reportable6 joined
[02:27] *** squashable6 joined
[02:27] *** shareable6 joined
[02:46] * japhb starts a really slow test, goes and eats dinner, comes back to "MoarVM panic: Tried to garbage-collect a locked mutex" ... GAH
[02:46] <japhb> Sigh
[03:25] *** notable6 joined
[04:24] *** bloatable6 joined
[04:25] *** quotable6 joined
[04:25] *** tellable6 joined
[04:26] *** benchable6 joined
[05:27] *** linkable6 joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:39] <MasterDuke> japhb: i've never seen that panic before. can you run it in gdb with a breakpoint on MVM_panic?
[06:42] *** gfldex left
[06:44] *** gfldex joined
[06:46] <nine> Was --full-cleanup involved?
[07:13] <moon-child> wait, what's wrong with collecting a locked
[07:13] <moon-child> it's not something that should come up, given proper use of structured concurrency, but it doesn't seem semantically incorrect?
[07:13] <moon-child> *collecting a locked _mutex_
[07:16] <nine> moon-child: may be OK semantics, but still can't be done. From PTHREAD_MUTEX_DESTROY(3P): Attempting to destroy a locked mutex, or a mutex that another thread is attempting to lock, or a mutex that is being used in a pthread_cond_timedwait() or pthread_cond_wait() call by another thread, results in undefined behavior.
[07:18] <moon-child> well sure, it's the garbage collector's job to unlock the mutex before destroying it.  Just as it's its job to close a file if you leave it open and then drop all references to it
[07:19] <moon-child> (even though, again, properly written code is unlikely to leave files in a state where such a thing can happen)
[07:20] <nine> That would require the GC to run on the same thread that's holding the lock on that mutex.
[07:22] <moon-child> huh...for some reason I thought you were allowed to unlock mutexes of other threads?
[07:23] <moon-child> I remember somebody's saying they had made a trivial thread lib wrapper that checked, when unlocking, whether the unlocking thread was the thread that had originally locked and complained if not.  I assumed that was because the behaviour otherwise was to just unlock the mutex
[07:23] <nine> No, that either results in undefined behavior or a straight error, depending on the type of mutex
[07:23] <moon-child> yeah, I see that now
[07:26] *** sourceable6 joined
[07:26] *** nativecallable6 joined
[07:27] <nine> Well I asked about --full-cleanup because there the main source of such locked mutexes is threads that are still running when we're trying to shut down. For that I have a candidate fix: https://github.com/rakudo/rakudo/commit/8d4f92b0979ab546671978b540c82465155a13e0
[08:42] *** Kaipi left
[09:09] * lizmat commented on that commit
[09:15] <MasterDuke> hm. just tried to add two new expression operators (shl and shr) so i could add blshift_i and brshift_i templates. the blshift_i template is ok, but brshift_i causes a segv in the nqp build pretty early on
[09:19] <MasterDuke> https://gist.github.com/MasterDuke17/6529dfddc3cb7716386c11363b16b392 if anyone is interested
[09:24] <moon-child> MasterDuke: you want sar there, not shr, I think
[09:25] <moon-child> (I doubt that's the problem, but)
[09:25] <moon-child> sar is signed shift, shr is unsigned
[09:26] <MasterDuke> https://gist.github.com/MasterDuke17/6529dfddc3cb7716386c11363b16b392#file-shift_expr_operators-patch-L75 i do actually use sar, but i named the operator shr just for consistency with shl (open to changing the name)
[09:26] <moon-child> oh, you do have sar.  Nevermind
[09:26] <moon-child> yeah
[09:30] <MasterDuke> what's weird is that the segv seems to be in compiling the tiles, not because it should have been shr instead of sar and the nqp build saw some incorrect values
[09:45] <nine> So what is it actually segfaulting on?
[09:46] <MasterDuke> https://gist.github.com/MasterDuke17/6529dfddc3cb7716386c11363b16b392#file-gdb-log-L24-L27
[09:50] <jnthnwrthngtn> moarning o/
[09:55] <Nicholas> \o
[09:58] <nine> MasterDuke: what does the reg 3 mean?
[09:59] <MasterDuke> i think 3 is the "cost"
[10:00] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/master/docs/jit/how-to-add-an-missing-expression-operator.org#tile-templates
[10:00] <timo> moarning :)
[10:07] <MasterDuke> oh, i also had sh(l|r)_reg, but those cause some "bad operand mode in `shl rq,rq'" dynasm error when building moarvm
[10:07] <MasterDuke> do sh(l|r) not take quads?
[10:09] <timo> hm. i don't think it makes terribly much sense to shift by more than the width of your widest register?
[10:10] <Nicholas> IIRC it's undefined behaviour in C, at least for signed integer types
[10:10] <Nicholas> to shift wider than the variable
[10:11] <Nicholas> (and if you try it, you'll find that some CPUs truncate the shift value to the size of the register, so a 32 bit shift on a 32 bit CPU is a shift of 0, so no-op, whereas others truncate it to 8 bits, so a shift of 32 results in a register containing 0, whereas a shift of 256 is a no-op)
[10:12] <Nicholas> (but as it's undefined behaviour, the optimiser will exploit it to not care, and wierder shit will actually happen. It's about as fun as a de-opt bug)
[10:12] <MasterDuke> maybe i need something like https://github.com/MoarVM/MoarVM/blob/master/src/jit/x64/tiles.dasc#L64-L79
[10:13] <nine> If the compiler segfaults, it cannot be due to semnatics issues in your implementation. For me it was usually some mistake when writing templates like nesting errors, missing size definitions or the like
[10:17] *** Kaiepi joined
[10:25] <MasterDuke> they're pretty simple templates, e.g., `(template: blshift_i (shl $1 $2))`
[10:26] <nine> The templates yes. And the JIT has become a bit more accomodating to such errors and gives proper error messages. I'd guess that for tiles it's still far less forgiving
[10:32] <MasterDuke> i just tried replacing the 'Rq's with Rb, but no change
[11:41] <Geth> Â¦ MoarVM/new-disp: 4 commits pushed by (Jonathan Worthington)++
[11:41] <Geth> Â¦ MoarVM/new-disp: 047b0e7053 | Translate MVMDispOpcodeLoadConstantObjOrStr
[11:41] <Geth> Â¦ MoarVM/new-disp: 80b562a40a | Fix deopt sanity checking code-gen
[11:41] <Geth> Â¦ MoarVM/new-disp: e5ad3b6da0 | Annotate non-compiled dispatch with NYI op
[11:41] <Geth> Â¦ MoarVM/new-disp: 75ebcb4491 | Implement int/num constant loading
[11:41] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/compare/d6ce0b4bb8c7...75ebcb449117
[12:03] *** reportable6 left
[12:13] <Geth> Â¦ MoarVM/new-disp: 3472b82064 | (Jonathan Worthington)++ | 6 files
[12:14] <Geth> Â¦ MoarVM/new-disp: 3472b82064 | (Jonathan Worthington)++ | 6 files
[12:14] <Geth> Â¦ MoarVM/new-disp: Spesh dispatch programs invoking C functions
[12:14] <Geth> Â¦ MoarVM/new-disp: 
[12:14] <Geth> Â¦ MoarVM/new-disp: Which involves mostly the same logic as those that invoke bytecode, at
[12:14] <Geth> Â¦ MoarVM/new-disp: least for now. In the future we can look at doing better at this for
[12:14] <Geth> Â¦ MoarVM/new-disp: some functions that can just become an op, and when we JIT them we may
[12:14] <Geth> Â¦ MoarVM/new-disp: also find a way to avoid the MoarVM calling conventions entirely and
[12:14] <Geth> Â¦ MoarVM/new-disp: just spit out C function calls.
[12:14] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/3472b82064
[12:18] <nine> core.c stage parse is now at 53.514s. Used to be >70s here
[12:19] <jnthnwrthngtn> Seems speshing helps. :)
[12:20] <timo> we don't try to inline runbytecode yet, right?
[12:20] <jnthnwrthngtn> timo: No, and when I added sp_runbytecode I forgot that I wanted an extra 16-bit int slot for spesh candidate too
[12:21] <timo> mhm
[12:21] <jnthnwrthngtn> We'll poke -1 into it when we spit out runbytecode
[12:21] <jnthnwrthngtn> So the only thing the optimizer has to do is replace the -1 with the candidate index
[12:21] <jnthnwrthngtn> To turn it into a pre-determiend specialization call
[12:22] <jnthnwrthngtn> And once *that* works, yes, inlining next
[12:22] <Nicholas> where does lunch fit into all of this?
[12:22] <timo> i imagine that'll unlock a whole load of optimization, some of which we didn't have before
[12:22] <Geth> Â¦ MoarVM/new-disp: 25a8a8ab3c | (Jonathan Worthington)++ | src/spesh/disp.c
[12:22] <Geth> Â¦ MoarVM/new-disp: Translate MVMDispOpcodeSet
[12:22] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/25a8a8ab3c
[12:22] <jnthnwrthngtn> Nicholas: Already eaten
[12:23] <Nicholas> you're doing better than ilmari. He forgot yesterday.
[12:23] <jnthnwrthngtn> Oops
[12:24] <jnthnwrthngtn> I have a very light breakfast, so tend to notice that I need lunch :)
[12:25] * jnthnwrthngtn hunts for the commit where timo did a draft of the attribute loading
[12:26] <nine> Seems like I misremembered. Got 58.641s before the "Turn spesh back on" commit
[12:26] *** brrt joined
[12:27] <nine> those 70s were probably debug builds
[12:27] <MasterDuke> i ran out of the really good granola i like yesterday, so had to have a bowl of special k. i have a tiny bowl of the granola and it keeps me full until lunch, but after the larger bowl of special k i was hungry a good bit earlier
[12:29] <MasterDuke> but i did make a nice grilled ham+cheddar+spicy mustard, so all was not lost
[12:30] <timo> jnthnwrthngtn: i don't think i did attribute loading, at least not this time around. perhaps last year, though?
[12:31] <brrt> MasterDuke: did you make any progress with the shift-operators?
[12:31] <MasterDuke> not since my last comment. have you looked at my gist?
[12:33] <jnthnwrthngtn> timo: Yes, last year. Quite a lot changed :)
[12:34] <brrt> I did look at the patch, I thought it looked reasonable enough, but I may be missing something
[12:34] <MasterDuke> did the backtrace tell you anything? 
[12:35] <MasterDuke> i just rebuilt with --optimize=0 and it aborted at `assert(state_info != NULL);`
[12:35] <MasterDuke> nchild was 2
[12:36] <MasterDuke> lstate was 99, rstate was 36
[12:36] * nine comes back to IRC, bowl of granola in hand, reads about granola
[12:40] <MasterDuke> brrt: does it matter where in src/jit/expr_ops.h i put the new ops?
[12:42] <brrt> MasterDuke: that's probably because you have a tree that is (shift_left $a $b) where $b is not a (const ...)
[12:43] <MasterDuke> but then how come only having mul_const is ok?
[12:44] <brrt> ehm, I'd think that because there's also a mul with non-const, or we only ever generate mul-const trees
[12:44] <brrt> I'm sorry, I'm talking without context, and I should really look into it  a bit more
[12:45] <MasterDuke> i initially tried defining *_reg versions, but those gave that "bad operand mode in `shl rq,rq'" error from dynasm during moarvm compilation (same when i tried switching to Rd)
[12:52] <brrt> hmm, let's see what gcc does :-)
[12:57] <brrt> MasterDuke: gcc gives me 'shl    rax,cl' for 'x << y'
[12:57] <brrt> so the answer is 'the second operand has to be byte-sized'
[12:57] <MasterDuke> matches https://github.com/MoarVM/MoarVM/blob/master/src/jit/x64/emit.dasc#L1294-L1302
[12:58] <brrt> hehe
[12:58] <brrt> unfortunately the tiler doesn't have a 'bail', it just crashes
[12:58] <brrt> this should really be fixed
[12:58] <brrt> I think it's on one of my TOOD documents from years back
[12:59] <MasterDuke> `| shl Rq(reg[0]), Rb(reg[1]);` gives `error: bad operand mode in `shl rq,rb'`
[12:59] <MasterDuke> get same with rq,rq and rb,rb
[13:03] <brrt> which part gives that? dynasm?
[13:03] <brrt> dynasm can be wrong
[13:05] *** reportable6 joined
[13:05] <brrt> do you have a branch published? I could take a look :-)
[13:11] <MasterDuke> i'll push it now
[13:11] <brrt> ty
[13:11] <brrt> no promises though :-)
[13:12] <brrt> oh, I found your issue
[13:12] <brrt> https://c9x.me/x86/html/file_module_x86_id_285.html
[13:12] <brrt> operand register has to be 'cl'
[13:13] <brrt> I ... forgot what, if any, plan I had to spec such register requirements.
[13:13] <MasterDuke> https://github.com/MasterDuke17/MoarVM/tree/add_some_random_jit_templates
[13:13] <brrt> because ideally the register allocator can handle that
[13:13] <brrt> it may have been that register requirements were the blocker for these templates
[13:14] <MasterDuke> oh, huh
[13:15] <brrt> you can work around this in the tile, by conditionally storing/restoring the value of rcx if it isn't free, I think there are some examples of that
[13:15] <brrt> but it's not ideal
[13:22] <MasterDuke> rcx is cl?
[13:23] <brrt> yes, cl is the lower 8 bits of rcx/ecx/cx
[13:24] <brrt> I'm somewhat surprised at how much I enjoy this kind of esoterics
[13:25] <MasterDuke> heh. i enjoy reading about assembly programming more than i enjoy doing it
[13:29] <MasterDuke> are there any registers it will always be safe to store rcx into?
[13:47] <brrt> well.. let me look up what mechanism I used
[13:57] <MasterDuke> https://gist.github.com/MasterDuke17/6529dfddc3cb7716386c11363b16b392 updated with a non-working patch
[13:58] <MasterDuke> https://gist.github.com/MasterDuke17/6529dfddc3cb7716386c11363b16b392 updated with a non-working patch
[13:59] <brrt> not sure why you do the `test` bits
[14:00] <brrt> I mean, it could be a legitimate zero in there
[14:00] <MasterDuke> hm, right
[14:02] <MasterDuke> removed the tests and jumps, just unconditionally move and move back. but not just get `bad operand mode in `mov i?,rb':` for `mov CL, Rb(reg[1]);`
[14:02] *** brrt left
[14:02] <MasterDuke> *now
[14:03] *** brrt joined
[14:03] <brrt> sorry, was disconnected
[14:04] <brrt> I think you have to use 'cl', lowercase, otherwise dynasm thinks you're using not a register name
[14:04] <brrt> further, the non-allocatable register is 'rax'
[14:04] <brrt> so rather than 'r11' you do a `mov rax, rcx' before and `mov rcx, rax` after
[14:05] <Geth> Â¦ MoarVM/new-disp: 4 commits pushed by (Jonathan Worthington)++
[14:05] <Geth> Â¦ MoarVM/new-disp: 40ee83a6f2 | Translate dispatcher attribute loads
[14:05] <Geth> Â¦ MoarVM/new-disp: 182fc3b706 | Translate MVMDispOpcodeResultValueInt
[14:05] <Geth> Â¦ MoarVM/new-disp: b855ab3b50 | Correct LoadCaptureValue translation
[14:05] <Geth> Â¦ MoarVM/new-disp: b9cdc9e0d0 | Translate a bunch more guard ops
[14:05] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/compare/25a8a8ab3c20...b9cdc9e0d033
[14:06] <MasterDuke> ooo, now moarvm builds...
[14:06] <MasterDuke> but the nqp build hangs...
[14:07] <brrt> :-(
[14:07] <brrt> but, progress
[14:09] <MasterDuke> gist updated with a backtrace
[14:11] <MasterDuke> and what i have for the tile.dasc now
[14:16] <brrt> hmm
[14:16] <brrt> I'll have to look at it some other time I'm afraid
[14:16] <MasterDuke> now worries, thanks for the help so far
[14:16] <MasterDuke> *no worries
[14:17] <brrt> happy to :-)
[14:25] <Geth> Â¦ MoarVM/new-disp: 1e58c8a7ed | (Jonathan Worthington)++ | src/spesh/disp.c
[14:25] <Geth> Â¦ MoarVM/new-disp: Translate remaining value result ops
[14:25] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1e58c8a7ed
[14:39] <Nicholas> ooooh, tanks *and* cranes. We are so blessed today: https://www.youtube.com/watch?v=sTA0GTgFn5E
[14:41] <brrt> what are they launching today?
[14:43] <MasterDuke> the "NO LAUNCH TODAY" text makes me suspect we're just watching construction?
[14:44] <Nicholas> nothing (intentionally). It's "Ground Support Equipment" moving (a fuel or oxygen tank)
[14:44] <Nicholas> and the big crane is building the launch tower
[15:02] <brrt> ooh :-)
[15:02] <brrt> and this is for the SpaceShip mega-rocket?
[15:04] <Geth> Â¦ MoarVM/new-disp: 7ce43d7e06 | (Jonathan Worthington)++ | 8 files
[15:04] <Geth> Â¦ MoarVM/new-disp: Translate object and string literal guards
[15:04] <Geth> Â¦ MoarVM/new-disp: 
[15:04] <Geth> Â¦ MoarVM/new-disp: Much of this thanks to timo++.
[15:04] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/7ce43d7e06
[15:04] <jnthnwrthngtn> That seems to get us translating all of the dispatch programs from monomorphic sites in the NQP build
[15:06] <Nicholas> is your beer fridge ready to do this work justice?
[15:11] <timo> \o/
[15:12] <jnthnwrthngtn> Yes :)
[15:12] <jnthnwrthngtn> But it's still 2 hours or so until home time :)
[15:14] <dogbert17> Perhaps some tea in the meantime
[15:14] <Geth> Â¦ MoarVM/new-disp: df79c45cb7 | (Jonathan Worthington)++ | 4 files
[15:14] <Geth> Â¦ MoarVM/new-disp: Prepare sp_runbytecode* for spesh linking
[15:14] <Geth> Â¦ MoarVM/new-disp: 
[15:14] <Geth> Â¦ MoarVM/new-disp: Add a slot where we can include a pre-selected spesh candidate. In the
[15:14] <Geth> Â¦ MoarVM/new-disp: event one is selected, we'll replace the -1 with the index of the
[15:14] <Geth> Â¦ MoarVM/new-disp: selected candidate.
[15:14] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/df79c45cb7
[15:16] <jnthnwrthngtn> The tea I'm drinking is apparently past its use-by date. I didn't know that dried tea leaves would really have one...
[15:17] <nine> Surprising things have them. Like table salt
[15:18] <jnthnwrthngtn> That one I'm quite sure is silly.
[15:18] *** evalable6 left
[15:18] *** linkable6 left
[15:18] <jnthnwrthngtn> I don't actaully know about the tea, but it seems...odd...
[15:18] <jnthnwrthngtn> It tastes alright. I'm still alive after the first cup.
[15:19] *** evalable6 joined
[15:21] <nine> Well...actually :) Yes the salt is obviously stay the same as it's been for the million of years under ground before we dug it up. I specifically said table salt because that's usually iodised. And the iodine reacts with oxygen over time and loses its effect
[15:23] <MasterDuke> jnthnwrthngtn: that spesh_cand is the index right? will this be a problem merging with the remove-cands-if-too-many-deopts pr, where instead of passing indexes around it was converted to passing the actual candidate
[15:24] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1426/commits/220349a62cf563751d7df8675c9b78664b0db430
[15:25] <brrt> iodine reacts with oxygen? as in NaI? 
[15:25] <jnthnwrthngtn> MasterDuke: Ugh, yes, it would :/
[15:25] <brrt> and even if it did, so what? we can't absorb it's oxidized variant? I'm confused
[15:26] <nine> Please don't ask such pointed questions :D It's not pure iodine that's in salt, it's some other chemical compound
[15:26] <brrt> heh :-D I'd thought the other chemical compound was NaI, and I can be easily mistaken
[15:26] <nine> I don't really remember the specifics. Just that I wondered about that date some years ago and dug into the question
[15:27] <jnthnwrthngtn> MasterDuke: I don't think it'll be hard to adjust it later
[15:27] <brrt> then you probably dug further than I ever have
[15:27] <MasterDuke> jnthnwrthngtn: cool
[16:00] *** vrurg left
[16:04] *** MasterDuke left
[16:07] *** vrurg joined
[16:15] *** MasterDuke joined
[16:54] <Geth> Â¦ MoarVM/new-disp: e84398286c | (Jonathan Worthington)++ | 9 files
[16:54] <Geth> Â¦ MoarVM/new-disp: Reinstate spesh logging of target static frames
[16:54] <Geth> Â¦ MoarVM/new-disp: 
[16:54] <Geth> Â¦ MoarVM/new-disp: To achieve this, we also re-organize where spesh logging of dispatch
[16:54] <Geth> Â¦ MoarVM/new-disp: program results occurs. This not only means we have the information in
[16:54] <Geth> Â¦ MoarVM/new-disp: the right place, but also fixes us logging information about the entry
[16:54] <Geth> Â¦ MoarVM/new-disp: to a new frame before logging the dispatch result that led to that frame
[16:54] <Geth> Â¦ MoarVM/new-disp: entry, which could confuse the spesh stats handling.
[16:54] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/e84398286c
[16:54] <Geth> Â¦ MoarVM/new-disp: 9e453e3fb9 | (Jonathan Worthington)++ | src/spesh/disp.c
[16:54] <Geth> Â¦ MoarVM/new-disp: Set literal value facts on loaded spesh slots
[16:54] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/9e453e3fb9
[17:13] <Geth> Â¦ MoarVM/new-disp: 5290495f72 | (Jonathan Worthington)++ | src/spesh/disp.c
[17:13] <Geth> Â¦ MoarVM/new-disp: Place deopt all and cached anns onto runbytecode
[17:13] <Geth> Â¦ MoarVM/new-disp: 
[17:13] <Geth> Â¦ MoarVM/new-disp: The deopt all for correctness, and the cached one for being able to look
[17:13] <Geth> Â¦ MoarVM/new-disp: up the target static frame in the spesh plan.
[17:13] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5290495f72
[17:15] <nine> Down to 47s!
[17:16] <nine> This spesh things...its useful!
[17:16] <jnthnwrthngtn> Before it was...54s?
[17:17] <nine> 58 before the "Turn spesh back on commit" 53 early afternoon today
[17:19] *** linkable6 joined
[17:29] <Geth> Â¦ MoarVM/new-disp: 988c345233 | (Jonathan Worthington)++ | src/spesh/optimize.c
[17:29] <Geth> Â¦ MoarVM/new-disp: Clean up after previous invocation opts a bit
[17:29] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/988c345233
[17:29] <Geth> Â¦ MoarVM/new-disp: 51372a035b | (Jonathan Worthington)++ | src/spesh/optimize.c
[17:29] <Geth> Â¦ MoarVM/new-disp: Start filling out runbytecode optimization
[17:29] <Geth> Â¦ MoarVM/new-disp: 
[17:29] <Geth> Â¦ MoarVM/new-disp: It doesn't actually optimize anything yet, however does do enough to
[17:29] <Geth> Â¦ MoarVM/new-disp: get the target static frame that will be invoked, or that we assume will
[17:29] <Geth> Â¦ MoarVM/new-disp: be, which is the first step towards spesh linking and then inlining.
[17:29] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/51372a035b
[17:29] <jnthnwrthngtn> That last commit mostly because it's hometime rather than becuase it's doing something useful yet. :)
[17:35] <jnthnwrthngtn> bbl o/
[17:58] *** patrickb joined
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:05] *** patrickb left
[19:21] <timo> lmao "runcfunc"
[19:23] <timo> i see at least one case where the first guard a disp program spit out was known to be unnecessary
[20:22] <jnthnwrthngtn> I've seen a few cases of that too
[20:22] <jnthnwrthngtn> I'm not sure why they aren't optimized away
[20:28] <timo> my assumption is: ins pointer would need to be turned back one spot after optimizing the dispatch op
[20:28] <timo> Did You Knowâ¢ that with dladdr or dladdr1 you can get a symbol's info given an address
[20:28] <jnthnwrthngtn> Hm, I thought it was
[20:28] <timo> maybe that can be used in the sslot print-out for BOOTCCode
[20:29] <jnthnwrthngtn> timo: No, I didn't know that :)
[20:30] <timo> we already use some dynamic library loading stuff for extops, and for nativecall; i'll want to see if whatever we're using exposes that in a crossplatform way somehow
[20:37] <timo> hum. the first symbol i try it on: gdb knows its name, dladdr gives me the path to libmoar, but name and symbol address are set to null, aka "no symbol found here"
[20:37] <timo> which i guess that function isn't a thing we export and that's what makes that happen?
[20:37] <timo> with MVM_repr_elems it works just fine
[20:38] <timo> so gdb must be going through the dwarf info which has info for pretty much all symbols, but dladdr will only have access to things that are exported :(
[20:38] <[Coke]> src/core/callsite.c:127:75: warning: incompatible pointer types passing 'MVMString *' (aka 'struct MVMString *') to parameter of type 'MVMCollectable *'
[20:38] <[Coke]>       (aka 'struct MVMCollectable *') [-Wincompatible-pointer-types]
[20:38] <[Coke]>             MVM_profile_heap_add_collectable_rel_const_cstr(tc, snapshot, cs->arg_names[i],
[20:39] <timo> yeah, just (MVMCollectable *) that and it'll be fixed
[20:40] <timo> hey at least dladdr reliably gives me the base address where the elf file is loaded in memory, which means i can throw libdwarf at it :D
[20:42] <timo> but ... ehh :\
[20:50] <Geth> Â¦ MoarVM/new-disp: b773dfd7cf | (Jonathan Worthington)++ | src/core/callsite.c
[20:50] <Geth> Â¦ MoarVM/new-disp: Add a missing cast
[20:50] <Geth> Â¦ MoarVM/new-disp: 
[20:50] <Geth> Â¦ MoarVM/new-disp: Spotted by Coke++
[20:50] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/b773dfd7cf
[20:56] <[Coke]> I HALPED
[20:56] <Nicholas> \o/
[21:10] <timo> halpify
[22:08] *** brrt left
[22:14] <Geth> Â¦ MoarVM/new-disp: 5eacf3e8ab | (Jonathan Worthington)++ | 9 files
[22:14] <Geth> Â¦ MoarVM/new-disp: Remove sp_resolvecode op
[22:14] <Geth> Â¦ MoarVM/new-disp: 
[22:14] <Geth> Â¦ MoarVM/new-disp: Which is no longer required with new-disp.
[22:14] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5eacf3e8ab
[22:16] <dogbert17> someone is working late it seems
[22:51] *** squashable6 left
[22:52] *** squashable6 joined
[23:13] <Geth> Â¦ MoarVM/new-disp: 70106bc08f | (Jonathan Worthington)++ | src/spesh/disp.c
[23:13] <Geth> Â¦ MoarVM/new-disp: Add missing `static`
[23:13] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/70106bc08f
[23:13] <Geth> Â¦ MoarVM/new-disp: a6f55eec21 | (Jonathan Worthington)++ | src/spesh/optimize.c
[23:13] <Geth> Â¦ MoarVM/new-disp: Emit guardsf when speculating on static frame
[23:13] <Geth> Â¦ MoarVM/new-disp: 
[23:13] <Geth> Â¦ MoarVM/new-disp: Another step in porting the spesh pre-determination optimization to work
[23:13] <Geth> Â¦ MoarVM/new-disp: on the runbytecode op. Since we already have a VM code ref, we don't
[23:13] <Geth> Â¦ MoarVM/new-disp: have to deal with the logic around finding it; that just goes away from
[23:13] <Geth> Â¦ MoarVM/new-disp: the optimizer.
[23:13] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a6f55eec21
[23:13] <jnthnwrthngtn> Yeah, this bit is largely straightforward porting existing opts to the new-disp way of doing things
[23:28] <Geth> Â¦ MoarVM/new-disp: a48e1e5f0b | (Jonathan Worthington)++ | src/spesh/optimize.c
[23:28] <Geth> Â¦ MoarVM/new-disp: Locate spesh candidate for linking
[23:28] <Geth> Â¦ MoarVM/new-disp: 
[23:28] <Geth> Â¦ MoarVM/new-disp: This is enough that we successfully find a spesh candidate that we could
[23:28] <Geth> Â¦ MoarVM/new-disp: link or inline in many cases. We don't yet do the linking, however, as
[23:28] <Geth> Â¦ MoarVM/new-disp: the arg guard insertion still needs porting.
[23:28] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a48e1e5f0b
[23:31] <jnthnwrthngtn> OK, the arg guard insertion can be tomorrow, then hopefully spesh linking works.
[23:32] <jnthnwrthngtn> 'night o/
