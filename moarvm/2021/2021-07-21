[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[01:30] *** discord-raku-bot left
[01:31] *** discord-raku-bot joined
[02:31] *** linkable6 left
[02:31] *** evalable6 left
[02:32] *** linkable6 joined
[02:32] *** evalable6 joined
[04:11] *** unicodable6 left
[04:11] *** greppable6 left
[04:11] *** committable6 left
[04:11] *** reportable6 left
[04:11] *** sourceable6 left
[04:11] *** squashable6 left
[04:11] *** benchable6 left
[04:11] *** linkable6 left
[04:11] *** bloatable6 left
[04:11] *** statisfiable6 left
[04:11] *** evalable6 left
[04:11] *** tellable6 left
[04:11] *** shareable6 left
[04:11] *** quotable6 left
[04:11] *** coverable6 left
[04:11] *** notable6 left
[04:11] *** releasable6 left
[04:11] *** nativecallable6 left
[04:11] *** bisectable6 left
[04:11] *** benchable6 joined
[04:11] *** unicodable6 joined
[04:11] *** coverable6 joined
[04:11] *** quotable6 joined
[04:12] *** committable6 joined
[04:12] *** tellable6 joined
[04:12] *** greppable6 joined
[04:13] *** bisectable6 joined
[04:13] *** statisfiable6 joined
[04:13] *** reportable6 joined
[04:13] *** squashable6 joined
[04:13] *** shareable6 joined
[04:13] *** sourceable6 joined
[04:13] *** bloatable6 joined
[04:13] *** linkable6 joined
[04:14] *** evalable6 joined
[04:14] *** nativecallable6 joined
[04:14] *** notable6 joined
[04:14] *** releasable6 joined
[05:47] *** frost joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:38] *** MasterDuke left
[06:58] *** patrickb joined
[07:15] *** frost left
[07:16] *** frost joined
[07:19] <Nicholas> good *, 3mo
[07:20] <Nicholas> aha
[07:20] <Nicholas> 3mo doesn't tab-complete
[07:20] <Nicholas> #moarvm does
[08:03] *** MasterDuke joined
[08:06] *** MasterDuke left
[08:58] *** linkable6 left
[08:58] *** linkable6 joined
[09:04] *** MasterDuke joined
[09:30] <jnthnwrthngtn> moarning o/
[09:34] <Nicholas> \o
[09:36] <MasterDuke> it's nice to be back at my desktop. builds moar+nqp+rakudo quite a bit faster than the laptop. on the negative side though, it's quite warm here
[09:38] <jnthnwrthngtn> The office is a bit warmer than I'd like, but cooling
[09:38] <nine> MasterDuke: and presumably that also means that your vacation's over
[09:39] <MasterDuke> yep, that's also a negative
[09:56] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1516: Convert more realloc+memset(0) to recalloc
[09:56] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1516
[10:06] <Geth> Â¦ MoarVM/new-disp: 6da7bc6a25 | (Stefan Seifert)++ | src/core/frame.c
[10:06] <Geth> Â¦ MoarVM/new-disp: Don't MVM_ROOT stack allocated frames
[10:06] <Geth> Â¦ MoarVM/new-disp: 
[10:06] <Geth> Â¦ MoarVM/new-disp: Since stack allocated frames do not have a proper MVMCollectable header,
[10:06] <Geth> Â¦ MoarVM/new-disp: putting them on the temp stack would lead to more interesting effects than
[10:06] <Geth> Â¦ MoarVM/new-disp: desired.
[10:06] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/6da7bc6a25
[10:06] <nine> jnthnwrthngtn: gotcha :D
[10:07] <jnthnwrthngtn> ? :)
[10:07] <jnthnwrthngtn> Oh! :)
[10:07] <jnthnwrthngtn> But hm
[10:07] <jnthnwrthngtn> I thought the temp roots had handling for that
[10:09] <jnthnwrthngtn> Ohh, but I guess the memory can get reused if we end up doing lazy deopt or similar 
[10:09] <jnthnwrthngtn> That's sneaky
[10:11] <Nicholas> "more interesting effects than desired" - that's code for something? :-)
[10:11] <Nicholas> ASAN would be pleased?
[10:13] <jnthnwrthngtn> My guess is that 1) we MVMROOT the frame, which normally is not a problem even if it's stack allocated because we account for that, but 2) we're unwinding frames, but unwinding a frame can result in new allocations on top of the callstack due to lazy deopt, meaning that 3) if we do a GC run it is effectively doing a use-after-free except it's not really a free visible to ASAN etc. just that memory means
[10:13] <jnthnwrthngtn> something else now.
[10:14] <jnthnwrthngtn> So interesting is probably "thinks it's looking at a collectable but it's just junk"
[10:14] <jnthnwrthngtn> Which won't go well at all
[10:14] <Nicholas> Fun!
[10:14] <jnthnwrthngtn> nine++
[10:24] <jnthnwrthngtn> Each of these GC bugs makes me glad how much dispatch stuff we can now write in NQP rather than C.
[10:31] *** dogbert17 joined
[10:32] *** dogbert11 left
[10:36] <nine> Yeah, matches what I've seen
[10:37] <jnthnwrthngtn> Currently doing the last bits needed for us to be able to have just MVMCapture, not MVMCallCapture, and also to get rid of invokewithcapture
[10:40] <MasterDuke> any objections to merging https://github.com/MoarVM/MoarVM/pull/1516 ? CI is clean and nqp+rakudo build and passed tests locally
[10:45] <Geth> Â¦ MoarVM/new-disp: 95cda47e31 | (Jonathan Worthington)++ | 4 files
[10:45] <Geth> Â¦ MoarVM/new-disp: Make capturenamedshash op work on MVMCapture
[10:45] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/95cda47e31
[10:45] <Geth> Â¦ MoarVM/new-disp: 4b4191e74b | (Jonathan Worthington)++ | src/6model/reprs/MVMCapture.c
[10:45] <Geth> Â¦ MoarVM/new-disp: Make clone work on an MVMCapture
[10:45] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/4b4191e74b
[10:45] <Geth> Â¦ MoarVM/new-disp: fc6d2c9edc | (Jonathan Worthington)++ | src/6model/reprs/MVMCapture.c
[10:45] <Geth> Â¦ MoarVM/new-disp: Fix copy-pasta
[10:45] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/fc6d2c9edc
[11:07] *** dogbert11 joined
[11:08] *** dogbert17 left
[11:13] *** dogbert17 joined
[11:16] *** dogbert11 left
[11:28] <Geth> Â¦ MoarVM/new-disp: 4dc6bf48c1 | (Stefan Seifert)++ | src/disp/boot.c
[11:28] <Geth> Â¦ MoarVM/new-disp: Fix possible access to fromspace in boot_syscall
[11:28] <Geth> Â¦ MoarVM/new-disp: 
[11:28] <Geth> Â¦ MoarVM/new-disp: We use name for generating exception messages later on, so we need to protect
[11:28] <Geth> Â¦ MoarVM/new-disp: the pointer from getting outdated by the GC.
[11:28] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/4dc6bf48c1
[11:35] <dogbert17> nine: let me know if you're running out of GC errors :)
[12:01] <jnthnwrthngtn> .oO( Or me, I can write more C code! )
[12:02] *** reportable6 left
[12:03] <Geth> Â¦ MoarVM/new-disp: aeef162d54 | (Stefan Seifert)++ | src/core/frame.c
[12:03] <Geth> Â¦ MoarVM/new-disp: Fix possible access to fromspace in MVM_frame_dispatch
[12:03] <Geth> Â¦ MoarVM/new-disp: 
[12:03] <Geth> Â¦ MoarVM/new-disp: This was clearly an oversight when rebasing the branch, missing the MVMROOT
[12:03] <Geth> Â¦ MoarVM/new-disp: that got added to the original of the code on master.
[12:03] <Geth> Â¦ MoarVM/new-disp: Pointed out by static analysis.
[12:03] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/aeef162d54
[12:05] *** reportable6 joined
[12:07] <Geth> Â¦ MoarVM/new-disp: ccdf42a1d6 | (Stefan Seifert)++ | 3 files
[12:07] <Geth> Â¦ MoarVM/new-disp: Fix possible access to fromspace in MVM_capture_from_args
[12:07] <Geth> Â¦ MoarVM/new-disp: 
[12:07] <Geth> Â¦ MoarVM/new-disp: In resume_init_capture arg_info is stack allocated and holds a pointer to a list
[12:07] <Geth> Â¦ MoarVM/new-disp: of registers. This list may not be referenced anywhere else. When the MVMCapture
[12:07] <Geth> Â¦ MoarVM/new-disp: is allocated, this could trigger the GC and object or string pointers in those
[12:07] <Geth> Â¦ MoarVM/new-disp: registers could become outdated.
[12:07] <Geth> Â¦ MoarVM/new-disp: 
[12:07] <Geth> Â¦ MoarVM/new-disp: Fix by adding a place to the MVMThreadContext where we can reference the MVMArgs
[12:07] <Geth> Â¦ MoarVM/new-disp: from and access it in the GC. This feels more like a workaround than a proper
[12:07] <Geth> Â¦ MoarVM/new-disp: fix but it lets us progress and hopefully someone will come up with a prettier
[12:07] <Geth> Â¦ MoarVM/new-disp: solution.
[12:07] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/ccdf42a1d6
[12:07] <nine> This was the big one ^^^
[12:17] <Altai-man> nine++
[12:20] <jnthnwrthngtn> I'm still a bit surprised about this, in so far as `.source = rec_resumption->initial_resume_args`, which comes from a recorded or run callstack record, which should be marking them there if needed
[12:22] <nine> jnthnwrthngtn: but, rec_resumption->initial_resume_args =  MVM_fixed_size_alloc(tc, tc->instance->fsa just a few lines earlier
[12:26] <jnthnwrthngtn> Oh, we copy them there...
[12:26] <jnthnwrthngtn> hm, why, since putting them in a capture will too...
[12:27] <jnthnwrthngtn> ohhh, I see
[12:28] <jnthnwrthngtn> An alternative appraoch would be, in the loop that sets it up, to see if the flag indiates it's a string or object and add them as a temp root, keeping a count of how many were added, and pop them later
[12:28] <jnthnwrthngtn> Which is more localized
[12:28] <jnthnwrthngtn> But not pretty
[12:29] <nine> That was my first idea. But I didn't know how hot that code is and setting a single pointer will be faster
[12:29] <Geth> Â¦ MoarVM/new-disp: cc453ecaa5 | (Jonathan Worthington)++ | src/core/args.c
[12:29] <Geth> Â¦ MoarVM/new-disp: Make [use|save]capture use MVMCapture
[12:29] <Geth> Â¦ MoarVM/new-disp: 
[12:29] <Geth> Â¦ MoarVM/new-disp: This eliminates the last place that we create an MVMCallCapture.
[12:29] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/cc453ecaa5
[12:29] <Geth> Â¦ MoarVM/new-disp: 8a7bb6c9c5 | (Jonathan Worthington)++ | 2 files
[12:29] <Geth> Â¦ MoarVM/new-disp: Don't create CallCapture type any more
[12:29] <Geth> Â¦ MoarVM/new-disp: 
[12:29] <Geth> Â¦ MoarVM/new-disp: This means that the REPR associated with it can go away soon.
[12:29] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8a7bb6c9c5
[12:29] <Geth> Â¦ MoarVM/new-disp: 34874166d4 | (Jonathan Worthington)++ | 11 files
[12:29] <Geth> Â¦ MoarVM/new-disp: Remove invokewithcapture op
[12:29] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/34874166d4
[12:30] <nine> Aaah...removed code is debugged code :)
[12:42] <Geth> Â¦ MoarVM/new-disp: 591b3a70f3 | (Jonathan Worthington)++ | 2 files
[12:42] <Geth> Â¦ MoarVM/new-disp: Remove JIT of various capture ops
[12:42] <Geth> Â¦ MoarVM/new-disp: 
[12:42] <Geth> Â¦ MoarVM/new-disp: It's out of date now, and all these calls are now just function calls,
[12:42] <Geth> Â¦ MoarVM/new-disp: so can be reinstated more simply/directly in src/jit/graph.c.
[12:42] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/591b3a70f3
[12:42] <Geth> Â¦ MoarVM/new-disp: a96a433bd3 | (Jonathan Worthington)++ | src/core/interp.c
[12:42] <Geth> Â¦ MoarVM/new-disp: Remove MVMCallCapture branches of ops
[12:42] <Geth> Â¦ MoarVM/new-disp: 
[12:42] <Geth> Â¦ MoarVM/new-disp: Since all of the functions on an MVMCapture already check that it is of
[12:42] <Geth> Â¦ MoarVM/new-disp: the appropriate representation, don't repeat those checks in the
[12:42] <Geth> Â¦ MoarVM/new-disp: interpreter. This will also simply re-adding JIT of these ops.
[12:42] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a96a433bd3
[12:43] <jnthnwrthngtn> More debugging :D
[12:47] <Geth> Â¦ MoarVM/new-disp: 1e7c29ab89 | (Jonathan Worthington)++ | 8 files
[12:47] <Geth> Â¦ MoarVM/new-disp: Remove the MVMCallCapture REPR
[12:47] <Geth> Â¦ MoarVM/new-disp: 
[12:47] <Geth> Â¦ MoarVM/new-disp: And all of its associated functions.
[12:47] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1e7c29ab89
[12:50] <nine> dogbert17: actually it looks like I have run out of issues to fix :D Made it through build, make test and make spectest with GC_DEBUG=2 + memory poisoning + a ton of extra fromspace checks I added
[12:53] <nine> Of course, with your knack for finding issues, you probably try one test and come up with 3 new bugs :P
[12:55] <MasterDuke> nine: any of the new info in https://github.com/rakudo/rakudo/issues/4462 suggest a fix?
[12:56] <dogbert17> nine: there's always the heap overflow from yesterday
[12:56] <Geth> Â¦ MoarVM: 8f513d559a | (Daniel Green)++ | 4 files
[12:56] <Geth> Â¦ MoarVM: Convert more realloc+memset(0) to recalloc
[12:56] <Geth> Â¦ MoarVM: 
[12:56] <Geth> Â¦ MoarVM: I did this once back in 2017, but I guess a few new ones snuck in since
[12:56] <Geth> Â¦ MoarVM: then.
[12:56] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8f513d559a
[12:56] <Geth> Â¦ MoarVM: 04f8108173 | MasterDuke17++ (committed using GitHub Web editor) | 4 files
[12:56] <Geth> Â¦ MoarVM: Merge pull request #1516 from MasterDuke17/convert_realloc_plus_memset_0_to_recalloc_part_2
[12:56] <Geth> Â¦ MoarVM: 
[12:56] <Geth> Â¦ MoarVM: Convert more realloc+memset(0) to recalloc
[12:56] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/04f8108173
[12:57] <MasterDuke> ^^^ silence was taken as consent
[12:57] <nine> That's ^^^ what they told us at University ;)
[12:58] <ugexe> i was just thinking that doesnt sound quite... right
[12:59] <dogbert17> nine: I used MVM_GC_DEBUG=1 and a 4k nursery to trigger the overflow. https://gist.github.com/dogbert17/3cc911045a857bf78093822612b50a24
[13:00] <nine> ugexe: I think the crucial difference is whether it's a group' or an individual's silence
[13:02] <jnthnwrthngtn> nine: Does NativeCall somewhere do some code-gen and spit out call ops?
[13:02] <jnthnwrthngtn> like prepargs and so forth?
[13:06] <nine> No, that's done by call handler in QASTOperationsMAST with just a few minor adjustments for nativeinvoke
[13:06] <nine> Of course...that may have changed drastically now?
[13:07] <jnthnwrthngtn> ah, right, I see
[13:07] <jnthnwrthngtn> Yeah
[13:07] <jnthnwrthngtn> Well, it can stay for now
[13:07] <jnthnwrthngtn> But it'd be good to later re-work it using new-disp
[13:08] <jnthnwrthngtn> I suspect it can all be rather more efficient :D
[13:08] <nine> Yeah, that's what I'm hoping :)
[13:09] <nine> Are there any big changes with regards to native values?
[13:16] <nine> jnthnwrthngtn: there's a bit of a thinko here: https://github.com/MoarVM/MoarVM/blob/new-disp/src/core/callsite.c#L258 at this point the array has not yet been extended, because you changed the MVM_realloc to MVM_fixed_size_realloc_at_safepoint in https://github.com/MoarVM/MoarVM/commit/0a948570e7ca489854e5ea818d16b2c64b8b9662
[13:17] <nine> That causes the heap buffer overflow
[13:17] <nine> Does the fixed size allocator zero out the memory in realloc? In that case the memset could just go
[13:20] <MasterDuke> nope https://github.com/MoarVM/MoarVM/blob/new-disp/src/core/fixedsizealloc.c#L222-L266
[13:21] <MasterDuke> MVM_fixed_size_realloc_zeroed would probably be easy to create
[13:22] <jnthnwrthngtn> nine: Huh, I thought it was the free of the previous location that was delayed, and the extension was immediate?
[13:22] <nine> Oh, wait a minute. I think the misunderstanding is mine
[13:22] <nine> What jnthnwrthngtn said :D
[13:22] <nine> I got confused by the name
[13:23] <jnthnwrthngtn> Hm, it's odd too because we're holding a mutex_callsite_interns lock at that point so I can't see how there'd be a race either
[13:28] *** frost left
[13:28] <Nicholas> nine: lunch [ ] coffe [ ] sleep [ ] ?
[13:29] <nine> all of the above :D
[13:30] <Nicholas> beer [ ] ?
[13:30] <Nicholas> I managed a dry day yesterday. Up to then I'd been slacking a bit
[13:30] <Nicholas> too much eating out, among other excuses
[13:38] <Geth> Â¦ MoarVM/new-disp: e0dc371c44 | (Jonathan Worthington)++ | 13 files
[13:38] <Geth> Â¦ MoarVM/new-disp: Start ripping out legacy bytecode invocation
[13:38] <Geth> Â¦ MoarVM/new-disp: 
[13:38] <Geth> Â¦ MoarVM/new-disp: In preparation for reinstating spesh for the new dispatch approach. Also
[13:38] <Geth> Â¦ MoarVM/new-disp: get rid of legacy method lookup bits in the optimizer/JIT. We can't yet
[13:38] <Geth> Â¦ MoarVM/new-disp: fully remove ops involving the legacy calling conventions because for
[13:38] <Geth> Â¦ MoarVM/new-disp: now NativeCall is relying on them.
[13:38] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/e0dc371c44
[13:38] <jnthnwrthngtn> I'm still ~10 days off convenient eating out
[13:39] <jnthnwrthngtn> (For now, I need to do a self-test and write a sworn declaration that I did it and it was negative)
[13:43] <MasterDuke> is there a reason the deprecated subs in lib/MAST/Ops.nqp need to keep their body?
[13:44] <Nicholas> we
[13:44] <MasterDuke> it was nice to be able to go out to eat like normal while i was on vacation. did quite a bit of it though, will have to make up for it now
[13:45] <Nicholas> we're back to inconvenient eating out, as E has now passed the age threshold to need a test or vaccination, and the system wouldn't let you even book vaccinations until you are old enough
[13:45] <Nicholas> as if if would have a slot free on the same day.
[13:51] <nine> Oh...could it be just a false positive? We're reallocing from 812 to 816 bytes. Both end up in bin 101. So the fixed size allocator just returns the same pointer as it knows that it already allocated enough space for the larger size.
[13:57] <nine> Indeed, turning on FSA_SIZE_DEBUG makes the error go away
[13:58] <MasterDuke> huh. but how is this the first time asan ran into that situation?
[14:02] <Geth> Â¦ MoarVM/new-disp: bfe32edeb3 | (Jonathan Worthington)++ | 4 files
[14:02] <Geth> Â¦ MoarVM/new-disp: Further cleanup of legacy invocation handling
[14:02] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/bfe32edeb3
[14:06] <Geth> Â¦ MoarVM/new-disp: 5001d695e6 | (Jonathan Worthington)++ | 4 files
[14:06] <Geth> Â¦ MoarVM/new-disp: Switch startup invocations to go through dispatch
[14:06] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5001d695e6
[14:10] <jnthnwrthngtn> My goodness there's lots of little places to update...
[14:10] <jnthnwrthngtn> Did anyone start working on removing findmeth/can?
[14:10] <nine> Nah, still busy fixing memory issues
[14:11] <jnthnwrthngtn> OK, I'll do it, 'cus killing off MVM_frame_invoke usages is pretty near the top of my todo list
[14:11] <jnthnwrthngtn> And that contains multiple
[14:11] <MasterDuke>  i just got distracted by tools/update_ops.raku
[14:15] <nine> jnthnwrthngtn: I think you broke rakudo's build
[14:16] <nine> Getting a segfault in MVM_gc_write_barrier which is getting called with update_root=0x0 by p6captureouters
[14:21] <dogbert17> nine: are the 'Conditional jump or move depends on uninitialised value(s)' also false positives then?
[14:24] <Geth> Â¦ MoarVM: a27efd30a4 | (Stefan Seifert)++ | src/core/fixedsizealloc.c
[14:24] <Geth> Â¦ MoarVM: Fix overflows on slight reallocations of fixed size alloced buffers
[14:24] <Geth> Â¦ MoarVM: 
[14:24] <Geth> Â¦ MoarVM: MVM_fixed_size_realloc and it's at_safepoint version take a short cut when the
[14:24] <Geth> Â¦ MoarVM: new size of the buffer falls into the same bin als the old size, as we always
[14:24] <Geth> Â¦ MoarVM: allocate the full bin size anyway. However they didn't check if the buffer was
[14:24] <Geth> Â¦ MoarVM: allocated from a bin in the first place. So we ended up just not doing slight
[14:24] <Geth> Â¦ MoarVM: reallocations of malloced buffers.
[14:24] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a27efd30a4
[14:24] <nine> dogbert17: turns out, it wasn't a false positive after all
[14:25] <nine> No idea why this didn't show up earlier. It's a pretty clear bug on master
[14:25] <lizmat> do we want that to be in 2021.07 ?
[14:25] <lizmat> I could bump MoarVM for that, I guess
[14:25] <MasterDuke> wow
[14:25] <nine> I'm inclined to say yes
[14:25] <lizmat> ok, will bump then
[14:26] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1518: Fix typo in filtering ops to gen
[14:26] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1518
[14:28] <lizmat> MasterDuke: ^^^ would that need to be bumped as well ?   or is that more of a support issue
[14:31] <MasterDuke> it needs a bump and something else (maybe some kind of rebootstrap) to have any impact for nqp, but it's not necessary to do right away
[14:32] <dogbert17> nine++, you're on a roll. I might actually be out of bugs atm.
[14:32] <jnthnwrthngtn> nine: Can't repro that; did you `make clean` first?
[14:32] <lizmat> MasterDuke: ok
[14:32] <MasterDuke> i see the names that i removed in src/vm/moar/stage0/MASTOps.moarvm, but i just did a rebuild and rebootstrap and they're still there (but not all the DEPRECATED_* names, so something removed the others previously)
[14:32] <jnthnwrthngtn> Please don't rebootstrap NQP maser
[14:32] <jnthnwrthngtn> *master
[14:32] <jnthnwrthngtn> It will make the new-disp rebase/merge hell
[14:33] <jnthnwrthngtn> Well, it may
[14:33] <jnthnwrthngtn> Actually I guess I just take the new-disp ones 
[14:33] <jnthnwrthngtn> So it's not so bad
[14:33] <jnthnwrthngtn> Well, maybe...
[14:34] <jnthnwrthngtn> nine: I removed some things in the instance structure and it may just be that the extops weren't rebuilt 
[14:34] <MasterDuke> if that PR is merged and then you rebase new-disp and re-run update_ops.raku and rebootstrap, its changes will get picked up automatically
[14:35] <MasterDuke> but i don't know why those names are still there after i do a local rebootstrap
[14:37] <Geth> Â¦ MoarVM/new-disp: 2cbbb3df0e | (Jonathan Worthington)++ | 17 files
[14:37] <Geth> Â¦ MoarVM/new-disp: Remove [try]findmeth and can ops
[14:37] <Geth> Â¦ MoarVM/new-disp: 
[14:37] <Geth> Â¦ MoarVM/new-disp: And quite a bit of code that they depended upon.
[14:37] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/2cbbb3df0e
[14:40] <Nicholas> -    /* Mutex taken when install specializations. */
[14:40] <Nicholas> that sentance word missing, surely? But it's all gone now
[14:41] <nine> jnthnwrthngtn: ah, yes, that was it
[14:41] <nine> Can now confirm that with my fix from master, the heap overflow is also gone on new-disp
[14:42] <MasterDuke> hm. should i remove the regen i did in my pr? would that make a rebase easier for new-disp?
[14:43] <nine> MasterDuke: think so
[14:43] <jnthnwrthngtn> grmbl, another rebootstrap didn't remove the istrue/isfalse, but where the hell do they come from
[14:44] <MasterDuke> ok. but to satisfy my curiosity, how does one remove those names from src/vm/moar/stage0/MASTOps.moarvm?
[14:45] <lizmat> MoarVM bumped
[14:45] <MasterDuke> commit removed from pr
[14:49] <nine> Looks like we're leaking MVMCallStackDispatchRecords' temps
[15:05] <Geth> Â¦ MoarVM/new-disp: 143b32076e | (Jonathan Worthington)++ | 11 files
[15:05] <Geth> Â¦ MoarVM/new-disp: Remove if_o/unless_o/istrue/isfalse ops
[15:05] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/143b32076e
[15:07] <MasterDuke> didn't ^^^ already happen?
[15:08] <jnthnwrthngtn> I did the work on it last night, but it turns out we still emitted an isfalse op in NQP; I just found out where, fixed it, and now could apply it.
[15:09] <jnthnwrthngtn> $ git grep '\->invoke(' | wc -l
[15:09] <jnthnwrthngtn> 27
[15:09] <jnthnwrthngtn> grmbl, all those need to go away
[15:11] <MasterDuke> ah
[15:12] <MasterDuke> m: class A { method a() is pure { say "hi" } }; say A.^methods
[15:12] <camelia> rakudo-moar f4b4bc1d7: OUTPUT: Â«(Method+{is-pure}.new BUILDALL)â¤Â»
[15:12] <MasterDuke> vs
[15:12] <MasterDuke> m: class A { method a() is default { say "hi" } }; say A.^methods
[15:12] <camelia> rakudo-moar f4b4bc1d7: OUTPUT: Â«(a BUILDALL)â¤Â»
[15:13] <MasterDuke> some traits cause the gist to not use .name and instead fall back to the type name+role name
[15:13] <MasterDuke> why/how the difference?
[15:14] <nine> MasterDuke: I guess that's because the role for default is anonymous while the one for pure is called is-pure
[15:15] <MasterDuke> m: class A { method a() is DEPRECATED { say "hi" } }; say A.^methods
[15:15] <camelia> rakudo-moar f4b4bc1d7: OUTPUT: Â«(a BUILDALL)â¤Â»
[15:15] <MasterDuke> don't think so, DEPRECATED is a named role also
[15:18] <MasterDuke> oh, but DEPRECATED is added via `does` instead of `.^mixin`
[15:18] <MasterDuke> maybe that makes a difference
[15:20] *** linkable6 left
[15:20] *** evalable6 left
[15:21] *** linkable6 joined
[15:23] *** evalable6 joined
[15:26] *** patrickb left
[15:33] <Geth> Â¦ MoarVM/new-disp: 7fc782db31 | (Jonathan Worthington)++ | src/core/frame.c
[15:33] <Geth> Â¦ MoarVM/new-disp: Remove spesh handling from legacy invoke
[15:33] <Geth> Â¦ MoarVM/new-disp: 
[15:33] <Geth> Â¦ MoarVM/new-disp: In preparation for adding it to the dispatch-based invocation.
[15:33] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/7fc782db31
[15:33] <Geth> Â¦ MoarVM/new-disp: 681cba7ee9 | (Jonathan Worthington)++ | 4 files
[15:33] <Geth> Â¦ MoarVM/new-disp: Update spesh arg guard evaluation for new convs
[15:33] <Geth> Â¦ MoarVM/new-disp: 
[15:33] <Geth> Â¦ MoarVM/new-disp: Since we didn't do enough updates to be producing spesh candidates yet,
[15:33] <Geth> Â¦ MoarVM/new-disp: this will consistently find nothing.
[15:34] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/681cba7ee9
[15:39] <Geth> Â¦ MoarVM: af001c9675 | (Stefan Seifert)++ | 2 files
[15:39] <Geth> Â¦ MoarVM: Fix possible deadlock when waiting for mutex_threads
[15:39] <Geth> Â¦ MoarVM: 
[15:39] <Geth> Â¦ MoarVM: Usually when we wait for getting a lock on a mutex, we mark the waitingthread
[15:39] <Geth> Â¦ MoarVM: as blocked so another thread may steal our GC work. This isn't a good idea for
[15:39] <Geth> Â¦ MoarVM: the instance's mutex_threads though as the GC also acquires a lock on that
[15:39] <Geth> Â¦ MoarVM: mutex and we can end up in a dead lock. Since all places that use this lock
[15:39] <Geth> Â¦ MoarVM: only hold it briefly, marking the thread as blocked isn't really that
[15:39] <Geth> Â¦ MoarVM: <â¦commit message has 6 more linesâ¦>
[15:39] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/af001c9675
[15:43] <Geth> Â¦ MoarVM: 3a3eb7f9da | (Stefan Seifert)++ | 2 files
[15:43] <Geth> Â¦ MoarVM: Fix 2 spelloes. MasterDuke++
[15:43] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3a3eb7f9da
[15:52] <Geth> Â¦ MoarVM/new-disp: 7ff0b83a72 | (Jonathan Worthington)++ | src/spesh/dump.c
[15:52] <Geth> Â¦ MoarVM/new-disp: Update spesh callsite dumper for new convs
[15:52] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/7ff0b83a72
[15:52] <Geth> Â¦ MoarVM/new-disp: ccca48ed56 | (Jonathan Worthington)++ | 3 files
[15:52] <Geth> Â¦ MoarVM/new-disp: Update spesh frame entry logging for new convs
[15:52] <Geth> Â¦ MoarVM/new-disp: 
[15:52] <Geth> Â¦ MoarVM/new-disp: But don't switch it on yet, otherwise we'll quickly crash and burn due
[15:52] <Geth> Â¦ MoarVM/new-disp: to lots of other spesh updates that are needed.
[15:52] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/ccca48ed56
[16:05] <Geth> Â¦ MoarVM/new-disp: 2579c66c03 | (Jonathan Worthington)++ | src/spesh/args.c
[16:05] <Geth> Â¦ MoarVM/new-disp: Adapt named args optimization to new convs
[16:05] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/2579c66c03
[16:05] <Geth> Â¦ MoarVM/new-disp: 0149e0ec40 | (Jonathan Worthington)++ | src/spesh/dump.c
[16:05] <Geth> Â¦ MoarVM/new-disp: Eliminate one more arg_count usage
[16:05] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/0149e0ec40
[16:13] <timo> jnthnwrthngtn: could you benefit from me cherrypicking the spesh correlation id setting commit from my branch onto new-disp?
[16:32] <MasterDuke> huh. `Serialization error: parameterized type to intern not in current SC` if i add `$r.^compose;` here https://github.com/rakudo/rakudo/blob/master/src/core.c/traits.pm6#L428
[16:34] <jnthnwrthngtn> timo: I already have it doing that in new-disp now, I think
[16:34] <timo> ah, ok!
[16:34] <jnthnwrthngtn> Current problem is that JIT explodes
[16:34] <jnthnwrthngtn> And the JIT of sp_getarg_* certainly needed updating but...
[16:35] <jnthnwrthngtn> ...my attempt to do so didn't help. I'm not sure if that is the thing with the wrong JIT, however
[16:35] <timo> "the wrong jit" isn't template vs exprjit, right? it's about "did i jit it right"?
[16:36] <Geth> Â¦ MoarVM/new-disp: e790ea6680 | (Jonathan Worthington)++ | src/core/interp.c
[16:36] <Geth> Â¦ MoarVM/new-disp: Only frames using new convs can be specialized
[16:36] <Geth> Â¦ MoarVM/new-disp: 
[16:36] <Geth> Â¦ MoarVM/new-disp: So simplify the sp_getarg ops in the interpreter.
[16:36] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/e790ea6680
[16:36] <Geth> Â¦ MoarVM/new-disp: b52a09035b | (Jonathan Worthington)++ | src/jit/x64/emit.dasc
[16:36] <Geth> Â¦ MoarVM/new-disp: Attempt to update sp_getarg_* in the lego JIT
[16:36] <Geth> Â¦ MoarVM/new-disp: 
[16:36] <Geth> Â¦ MoarVM/new-disp: The JIT is still, alas, rather explosive.
[16:36] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/b52a09035b
[16:36] <MasterDuke> oh, now it's fine. maybe a problem with an outdated nqp
[16:36] <jnthnwrthngtn> timo: Well, I'm using MVM_JIT_EXPR_DISABLE=1 for now 'cus I know I didn't update the expression JIT
[16:37] <jnthnwrthngtn> But I still get explosions. You can uncomment the two calls to MVM_spesh_log_entry in order to enable spesh and observe it
[16:37] <jnthnwrthngtn> timo: The latest commit is my attempt to fix it; maybe you can spot some thinko in there
[16:38] <timo> do yo uneed to grab the address of the map rather than the value perhaps
[16:39] <timo> like does mov TMP1, FRAME:TMP1->params.arg_info.map; have to be lea instead of mov
[16:39] <jnthnwrthngtn> .map is a poitner to an array
[16:39] <timo> ah
[16:39] <jnthnwrthngtn> Well, a MVMuint16*
[16:39] <jnthnwrthngtn> So that should already be reading the pointer
[16:39] <jnthnwrthngtn> I wonder if I got the widths wrong somewhere
[16:39] <timo> i have no experience with the U16:TMP[idx] syntax you're using here
[16:40] <jnthnwrthngtn> Me either. :P
[16:40] <jnthnwrthngtn> brr<tab>...aww
[16:40] <jnthnwrthngtn> Of course, this may not be the reason for the SEGV
[16:40] <timo> a few lines above has         | mov TMP1, REGISTER:TMP1[idx]; and that works correctly
[16:40] <timo> right, it could be that this unlocks the entirety of the jit to run and gives us a huge area of attack
[16:42] <MasterDuke> huh. so adding `$r.^compose` to pure works (i.e., `class A { method a() is pure { say "hi" } }; say A.^methods` outputs '(a BUILDALL)'), but adding to nodal is what gives that `Serialization error: parameterized type to intern not in current SC`
[16:43] <timo> you can disassemble when stopped in gdb, but i think you can only actually get earlier instructions if you get it to see the beginning address of the "function"
[16:43] <MasterDuke> in stage mast of CORE.e.setting
[16:43] <timo> like `x/i address` would "examine as instructions"
[16:47] <jnthnwrthngtn> It segfaults on
[16:47] <jnthnwrthngtn> mov    (%rcx,%rdx,2),%rcx
[16:47] <jnthnwrthngtn> Which looks rather like what I was doing
[16:53] <timo> you know
[16:53] <jnthnwrthngtn> ah, I shoudla sign-extended the uint16 
[16:53] <timo> why not put a `| mov TMP1, 0xFACEFACEFACEFACE` where you expect you are
[16:53] <jnthnwrthngtn> Now rdx looks sensible
[16:53] <timo> but yes indeed sign extending good idea
[16:53] <jnthnwrthngtn> But rcx looks like a very dodgy pointer
[16:54] <Nicholas> "who sold you that?"
[16:58] <Geth> Â¦ MoarVM/new-disp: 1564e5f3dc | (Jonathan Worthington)++ | src/jit/x64/emit.dasc
[16:58] <Geth> Â¦ MoarVM/new-disp: Fix thinko and add sign extension to sp_getarg JIT
[16:58] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1564e5f3dc
[16:58] <jnthnwrthngtn> Nicholas: Me, I did a silly thinko and used a register for two things
[16:59] <timo> how much should i be expecting to work fine with jit?
[17:02] <Nicholas> jnthnwrthngtn: what, you mean x86_64 doesn'
[17:02] <Nicholas> doesn't do junctions at the hardware level?
[17:05] <jnthnwrthngtn> timo: Given that sp_getarg only just stopped exploding, not much
[17:07] <timo> i just ran a random nqp test with spesh log and it's just "received log with 0 frames having their statistics updated" over and over :D
[17:07] <timo> makes me wonder if we ever want to log like the histogram of what spesh log entry types we see, since we iterate over them anyway to update the stats
[17:07] <jnthnwrthngtn> You did uncomment the thing I mentioned, right?
[17:07] <timo> oh!
[17:07] <timo> i missed that
[17:08] <timo> i see it now
[17:09] <timo> yeah now i get a segfault, so i can at least look at what's happening :)
[17:10] <MasterDuke> huh. changing the `$r.^mixin` to `$r does` gives `Cannot invoke this object (REPR: Null; VMNull)` during stage parse
[17:10] <timo> => 0x470b20:    add    $0x0,%al
[17:11] <timo> oh i have to set it to intel mode first
[17:12] <jnthnwrthngtn> timo: Note that I iddn't fix up the EXPR JIT at all for sp_getarg* yet
[17:12] <timo> yes i disabled that (i hope)
[17:12] <jnthnwrthngtn> timo: So if you're not disabling that I suspect you'll run right into the same issue
[17:12] <jnthnwrthngtn> The thing I see is a segv in the interpreter, in fact
[17:12] <jnthnwrthngtn> (with the NQP test I picked)
[17:13] <jnthnwrthngtn> MVM_JIT_EXPR_DISABLE=1 ./nqp-m t/nqp/003-if-else.t
[17:13] <dogbert17> hmm, is the build currently broken?
[17:14] <timo> i got the env var name reversed
[17:15] <dogbert17> I get:
[17:15] <dogbert17> Building NQP ...
[17:15] <dogbert17> /usr/bin/perl Configure.pl --prefix=/home/dogbert/repos/rakudo/install --make-install --git-protocol=https --no-relocatable --no-ignore-errors --silent-build --no-force-rebuild --backends=moar --gen-moar
[17:15] <dogbert17> istrue/isfalse were superseded by the general dispatch mechanism
[17:15] <dogbert17> This compiler is based on HLL::Compiler.
[17:16] <timo> i see a segfault in existskey where it kind of looks like the STable of the object doesn't look very healthy
[17:16] <jnthnwrthngtn> timo: Yes, that's the one I see
[17:17] <timo> i'll build it on my desktop so i have rr
[17:17] <jnthnwrthngtn> dogbert17: Sounds like you need to pull latest NQP
[17:17] <dogbert17> the nqp new-disp branch?
[17:18] <jnthnwrthngtn> Yes
[17:18] <jnthnwrthngtn> b68cbcd7
[17:19] <jnthnwrthngtn> Is the one that updated it for that
[17:19] <jnthnwrthngtn> Time for me to go home
[17:21] <timo> what, you're drunk? ;)
[17:21] <timo> like in "go home you're drunk"
[17:21] <Nicholas> Possible 100% otherwise. Based on previous public information, he was in the office today. And I've never heard mention of an office beer fridge.
[17:22] <Nicholas> (Coffee exists at both locations)
[17:22] <Nicholas> (I believe that the office doesn't *need* a beer fridge as it has a fully operational pub "on tap")
[17:22] <Nicholas> I wonder *why* they chose that location for an office...
[17:26] <timo> huh. follow-fork-mode child and follow-exec-mode new don't get me into the actual nqp code?!
[17:33] <timo> aha. `rr replay -p moar` waits for a process with name "moar" gets exec'd
[17:35] <timo> not getting it right just yet
[17:41] <timo> okay i'm sure this isn't the right way to do it, but i haven't found another just yet: rr replay -t <start at like 100 and go up while you get output, then back down slowly until you get output again> and then rr replay -g that-number
[17:42] <timo> 00030      dispatch_o         loc_8_obj, 'lang-meth-call', Callsite_4, loc_7_obj, loc_12_str, loc_8_obj, loc_1_obj
[17:42] <timo> [later]
[17:42] <timo> 00034   -> existskey          loc_9_int, loc_11_obj, loc_12_str
[17:43] *** evalable6 left
[17:43] *** linkable6 left
[17:50] <timo> sorry, wrong
[17:51] <timo> no, correct actually; i was just stepping through the wrong dispatcher program :D
[17:51] <timo> this one was stringifying what loc_12_str gets
[18:01] <timo> ok i *think* i'm correctly stepping into the jitted version of "method_table", which is what the "lang-meth-call" calls
[18:02] *** reportable6 left
[18:15] <timo> i'm trying to view the contents of the hash that it would be accessing here, but MVM_str_hash_fsck segfaults :\
[18:15] <jnthnwrthngtn> Sounds pretty fscked to me...
[18:16] <jnthnwrthngtn> Nicholas is right - no beer fridge at office. The office is located where it is because I used to live in the same building, and knew the landlord was good, and was looking for an office, and just in time one became free. :)
[18:17] <jnthnwrthngtn> Of course, that makes the question "did you deliberately choose to live near a pub", and I guess there answer is "have you seen the pub density in Prauge?" :P
[18:20] <timo> so did you choose prague because the pub density makes the question whether you decided to live / work near a pub useless? :)
[18:20] <jnthnwrthngtn> Maaaaybe :P
[18:21] <jnthnwrthngtn> timo: I'm assuming that the loc_8_obj ends up in loc_11_obj by the time of the existskey? Or something connects these two?
[18:21] <timo> there's a set in between, yeah
[18:22] <jnthnwrthngtn> Dinner is ready, bbl
[18:22] <timo> i think the "when" isn't very precise, so i'll have to step around a bit more backwards and forwards, but i don't really have a reason to believe what goes in or what happens inside method_table is going wrong
[18:26] <timo> ok but why do we stringify that result tho
[19:11] <Altai-man> "no beer fridge at office" he says, but evidences...
[19:22] *** psydroid joined
[19:28] *** dogbert17 left
[19:30] <timo>    0x7f3cfaee4062:      test   rdx,rdx                                                                               
[19:30] <timo>    0x7f3cfaee4065:      jne    0x7f3cfaee4072                                                                        
[19:30] <timo> what's that all about?
[19:31] *** dogbert17 joined
[19:33] <nine> depends on the context?
[19:36] <nine> It's a bit of a weird spelling, but it simply jumps if rdx is != 0
[20:05] *** evalable6 joined
[20:06] <timo> ok, i was thinking that's probably a null check
[20:07] <timo> mov    QWORD PTR [rbx+0x20],rdx - this is access to the 0x20 / 8th register, right?
[20:12] <nine> if rbx is the base address of the work array rbx+0x20 should be the 4th register (8 bytes per pointer)
[20:20] <timo> it was that, yeah
[20:21] *** squashable6 left
[20:35] <timo> here's what i think i have:
[20:35] <timo> 00000      sp_getarg_o        loc_2_obj, 0                                                                           
[20:35] <timo> 00001      sp_get_o           loc_4_obj, loc_2_obj, 48    
[20:35] <timo> 00002      return_o           loc_4_obj                                                                              
[20:35] <timo> it kind of sort of feels like it's grabbing a BOOTStr out of that obj there
[20:36] <timo> this should be getting the methods hash out of an NQPClassHOW
[20:39] <timo> hum, and the param that comes in at source[map[0]] is an NQPClassHow
[20:40] <timo> ok, let's see then if the getarg is compiled right
[20:43] <timo> what do we emit a jmp rdx for? i don't see anything that actually sets rdx to anything
[20:45] <timo> wha. rdx just has the address of the instruction that comes right after the jmp in it, right from the start of execution
[20:47] <timo> oh!
[20:47] <timo> the current frame has a params.version of 0
[20:49] <timo> is that actually wrong? the legacy struct for the params doesn't look right either, but the map of that params is a null pointer?
[21:02] <timo> i get the feeling we're dereferencing one too many times?
[21:12] <timo> i think TMP1 + TMP2 * 2 is wrong?
[21:13] *** dogbert17 left
[21:13] <timo> well, changing it to TMP2 * 8 makes t/nqp/003-if-else.t work fine
[21:15] <timo> this was for getting param_info.sources[param_info.map[arg_index]], it used to multiply the result from the map by just 2, but should have been 8
[21:26] <timo> every time i run "make test" in nqp it does a bit of compiling first, which segfaults
[21:26] <timo> why :|
[21:27] <MasterDuke> yeah, that annoyed me a while ago and i did a little digging. it wasn't quite as easy to fix as i hoped
[21:28] <MasterDuke> also you can't `make t/individual/test/file`, which maybe was related?
[21:28] <timo> mhm, i just copypasted the "prove" line now
[21:29] <timo> still a bunch of test files crashing, but many pass now
[21:35] *** squashable6 joined
[21:36] <timo> here's a crash that might be related to how named arguments work in the new argument format?
[21:36] <timo> it's accessing the argument in map's slot number 3, but there are only 3 flags, one of which is named
[21:37] <timo> so there are 3 valid entries in the map, 0, 1, and 2. 3 is what it's using instead and that's a much too high value, in the hundreds
[21:38] <timo> Spesh of 'compile_node' (cuid: 119, file: gen/moar/stage2/QAST.nqp:6216)                                             
[21:38] <timo> Callsite 0x10636c0 (3 args, 2 pos)                                                                                   
[21:38] <timo>   - want                                                                                                             
[21:39] <timo> Spesh of 'compile_node' (cuid: 119, file: gen/moar/stage2/QAST.nqp:6216)                                             
[21:39] <timo> Callsite 0x10636c0 (3 args, 2 pos)                                                                                   
[21:39] <timo>   - want                                                                                                             
[21:39] <timo> Positional flags: obj, obj                                                                                                                                                                                                                
[21:39] <timo> Latest guard tree for 'compile_node' (cuid: 119, file: gen/moar/stage2/QAST.nqp:6216)                                
[21:39] <timo>                                                                                                                      
[21:39] <timo> 0: CALLSITE 0x10636c0 | Y: 1, N: 0                                                                                   
[21:39] <timo> 1: LOAD ARG 0 | Y: 2                                                                                                 2: STABLE CONC MASTCompilerInstance | Y: 3, N: 0                                                                     
[21:39] <timo> 3: LOAD ARG 1 | Y: 4                                                                                                 
[21:39] <timo> 4: STABLE CONC QAST::Stmts | Y: 5, N: 0                                                                              
[21:39] <timo> 5: LOAD ARG 3 | Y: 6                                                                                                 
[21:39] <timo> 6: STABLE CONC BOOTInt | Y: 7, N: 0                                                                                  
[21:39] <timo> 7: RESULT 0                                                                                                          
[21:39] <timo> fantastic how it has so many spaces at the end there
[21:39] <timo> anyway, you can see how it's got a LOAD ARG 3 in slot 5, that's the one that asplodes
[21:43] <timo> that's certainly a lot fewer failing tests
[21:47] <timo> which is 0
[21:47] <timo> the amount of failing tests in the nqp test suite is 09
[21:48] <timo> no not 09, it's 0
[21:50] <Geth> Â¦ MoarVM/new-disp: 9f0e3c20a3 | (Timo Paulssen)++ | src/jit/x64/emit.dasc
[21:50] <Geth> Â¦ MoarVM/new-disp: Fix indexing into sources params array from map in the lego jit
[21:50] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/9f0e3c20a3
[21:50] <Geth> Â¦ MoarVM/new-disp: c1cfd397aa | (Timo Paulssen)++ | src/spesh/arg_guard.c
[21:50] <Geth> Â¦ MoarVM/new-disp: the new params format doesn't have gaps for nameds. fix arg guards accordingly
[21:50] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/c1cfd397aa
[23:22] *** dogbert17 joined
[23:40] *** japhb left
[23:44] *** japhb joined
