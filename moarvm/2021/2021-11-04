[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[01:08] *** frost joined
[03:04] *** bisectable6 left
[03:04] *** statisfiable6 left
[03:04] *** unicodable6 left
[03:04] *** evalable6 left
[03:04] *** benchable6 left
[03:04] *** greppable6 left
[03:04] *** bloatable6 left
[03:04] *** squashable6 left
[03:04] *** tellable6 left
[03:04] *** linkable6 left
[03:04] *** coverable6 left
[03:04] *** nativecallable6 left
[03:04] *** reportable6 left
[03:04] *** committable6 left
[03:04] *** notable6 left
[03:04] *** sourceable6 left
[03:04] *** shareable6 left
[03:04] *** quotable6 left
[03:04] *** releasable6 left
[03:05] *** shareable6 joined
[03:05] *** bisectable6 joined
[03:05] *** bloatable6 joined
[03:07] *** reportable6 joined
[03:07] *** statisfiable6 joined
[03:07] *** squashable6 joined
[03:07] *** quotable6 joined
[03:07] *** benchable6 joined
[03:07] *** nativecallable6 joined
[04:05] *** coverable6 joined
[04:05] *** sourceable6 joined
[04:06] *** notable6 joined
[04:06] *** committable6 joined
[04:07] *** unicodable6 joined
[05:06] *** releasable6 joined
[06:02] *** reportable6 left
[06:05] *** tellable6 joined
[06:07] *** greppable6 joined
[06:07] *** linkable6 joined
[06:08] *** evalable6 joined
[07:18] *** evalable6 left
[07:18] *** linkable6 left
[07:18] *** linkable6 joined
[07:42] *** sena_kun joined
[07:47] *** patrickb joined
[08:02] *** patrickb left
[08:04] *** reportable6 joined
[08:06] <Nicholas> good *, #moarvm 
[08:09] <japhb> good *, Nicholas 
[08:09] <japhb> Except for me * is bedtime.  :-)
[08:09] <japhb> &
[08:38] <Nicholas> nine: did you attempt the libffi "port", or should I start on it?
[08:39] <nine> Nicholas: I can do it earliest on Friday. So if you wan't to give it a go, I'll happily leave it to you
[08:39] <Nicholas> OK. I'll tell you if I'm partway and stuck
[08:40] <Nicholas> otherwise it's "not started" or you'll see a push
[08:55] <nine> ++Nicholas
[09:18] *** evalable6 joined
[09:59] <MasterDuke> looks like libuv 1.42.0 was released in july. at a very quick skim, didn't notice anything in the changelog that looked relevant to any open issues moarvm has
[10:07] <lizmat> still... would be good to update, no ?
[10:07] <MasterDuke> and libatomic_ops 7.6.12 (we're at 7.6.2) was released in september
[10:16] <jnthnwrthngtn> moarning o/
[10:17] <Nicholas> \o
[10:17] <jnthnwrthngtn> (good to update) there's always the small risk of a breakage from an upgrade too, although with libuv that has been quite rare
[10:21] <MasterDuke> yes. especially since there doesn't appear to be anything immediately needed and we still have a bunch of new-disp related fixes/changes lined up, i'd sort of lean toward waiting until after the next release
[10:22] <lizmat> fair enough  :-)
[10:29] *** linkable6 left
[10:29] *** evalable6 left
[10:32] *** evalable6 joined
[10:55] <jnthnwrthngtn> So, I guess my challenge now is to work out how to eliminate the thunked flag without breaking the CI :)
[10:55] <jnthnwrthngtn> (Since my solution to unbust finalizer calls was to not call them when we thunked.)
[10:56] <nine> jnthnwrthngtn: what does the thunked flag actually mean?
[10:58] <jnthnwrthngtn> nine: It was intended as a stopgap while stack unwinding was spread between remove_one_frame and the new callstack mechanism.
[10:59] <jnthnwrthngtn> nine: Setting it would suppress additional actions (such as running special return handlers) in remove_one_frame in the event that something new was invoked as part of the unwind
[10:59] <jnthnwrthngtn> Now there pretty much aren't any such actions.
[11:03] <Geth> Â¦ MoarVM/new-special-return-only: 80894e0161 | (Jonathan Worthington)++ | src/core/frame.c
[11:03] <Geth> Â¦ MoarVM/new-special-return-only: Stop considering thunked in remove_one_frame
[11:03] <Geth> Â¦ MoarVM/new-special-return-only: 
[11:03] <Geth> Â¦ MoarVM/new-special-return-only: It should no longer matter.
[11:03] <Geth> Â¦ MoarVM/new-special-return-only: review: https://github.com/MoarVM/MoarVM/commit/80894e0161
[11:04] <jnthnwrthngtn> This step should be totally innocent, but given I've only got CI to guide me, this is going to be very slow and steady.
[11:10] <nine> Do you have an idea why not running finalizers if thunked is set fixes the problems?
[11:10] <MasterDuke> i wonder if it's possible to get something like a docker image of their CI environments so one can try to replicate locally? it wouldn't necessarily help if it's hardware related, but might if it was some other environmental thing
[11:10] <nine> Yesterday I've yet again tried to reproduce by slowing down my system during the test run. Nothing at all.
[11:11] <MasterDuke> how did you try? running another spectest in the background? i've found that frequently helps
[11:13] <jnthnwrthngtn> nine: Not really.
[11:13] <nine> Multiple TEST_JOBS=80 spectests in the background. Pro tip: when trying this, keep one of them in focus so you can ctrl+c when the system starts swapping heavily. On my first try I simply rebooted after half an hour.
[11:14] <jnthnwrthngtn> About the CI: the crash mentions CompUnit. Could it be that the CI has a clean(er) state (e.g. nothing installed) and so takes a different path there, which triggers the bug?
[11:14] <jnthnwrthngtn> It's still really odd that this is the *only* thing that seems to trigger it, though
[11:15] <jnthnwrthngtn> sena_kun++ also suggested to see if Azure has a debug mode thing like Travis, which I'd not thought of
[11:16] <MasterDuke> https://github.com/marketplace/actions/debugging-with-ssh maybe
[11:17] <jnthnwrthngtn> I think it'd have to be an Azure thing?
[11:17] <jnthnwrthngtn> Since iiuc we run the CI using that, not GitHub actions
[11:17] <jnthnwrthngtn> Though knowing it is possible with GitHub actions is useful in general :)
[11:18] <MasterDuke> but i think actions are just a wrapper around azure?
[11:20] <jnthnwrthngtn> Yes, but I mean, I think to use actions from the GitHub marketplace we'd have to have our CI pipelines specified in terms of GitHub actions overall, not as an azure pipeline?
[11:20] <MasterDuke> could be
[11:24] <jnthnwrthngtn> Looks like that first step is going to be innocent
[11:24] <jnthnwrthngtn> Alerady have two more lined up
[11:25] <MasterDuke> i wonder how locked down their images are? i.e., could you just set up a reverse shell back to your machine?
[11:26] <MasterDuke> probably not allowed (or very safe)
[11:28] <jnthnwrthngtn> Ah, it seems that the CI is based on an ubuntu base image (even named in our azure-pipelines.yaml), so I could try to recreate it that way
[11:29] *** linkable6 joined
[11:29] <MasterDuke> my laptop uses kubuntu (though i just upgraded to 2021.10), i could see if it replicates there
[11:29] <nine> I just tried testing with a rather clean build directory (no t/spec, no ~/.raku), but all I got was a segfault in 15-gh_1202.t's sub process in MVM_str_hash_lvalue_fetch_nocheck ( MVMHash_bind_key)
[11:32] <MasterDuke> jnthnwrthngtn: what are the steps to try and replicate?
[11:34] <jnthnwrthngtn> MasterDuke: Take https://github.com/MoarVM/MoarVM/pull/1581, remove the final commit, build and make test
[11:37] <Geth> Â¦ MoarVM/new-special-return-only: cbb33ac423 | (Jonathan Worthington)++ | 3 files
[11:37] <Geth> Â¦ MoarVM/new-special-return-only: Don't set thunked on finalizer run
[11:37] <Geth> Â¦ MoarVM/new-special-return-only: 
[11:37] <Geth> Â¦ MoarVM/new-special-return-only: Since we no longer check the flag in remove_one_frame, it should quite
[11:37] <Geth> Â¦ MoarVM/new-special-return-only: easily be possible to avoid setting it here.
[11:37] <Geth> Â¦ MoarVM/new-special-return-only: review: https://github.com/MoarVM/MoarVM/commit/cbb33ac423
[11:52] <MasterDuke> no errors so far (with gcc or clang)
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:08] <jnthnwrthngtn> > 
[12:08] <jnthnwrthngtn> NMAKE : fatal error U1073: don't know how to make 'gen/nqp-version'
[12:08] <jnthnwrthngtn> What on earth? :)
[12:09] <MasterDuke> that happens randomly in windows ci, i always just restart those
[12:10] <jnthnwrthngtn> sigh
[12:10] <jnthnwrthngtn> Anyway, looks like the above push is alright
[12:11] <jnthnwrthngtn> Only one job still running, plus this failure. I'll probably not re-run it as the problem tended to show up in 50% of the runs when it broke
[12:12] <Geth> Â¦ MoarVM/new-special-return-only: c79558defc | (Jonathan Worthington)++ | src/core/callstack.c
[12:12] <Geth> Â¦ MoarVM/new-special-return-only: Try switching to local detection of thunking
[12:12] <Geth> Â¦ MoarVM/new-special-return-only: review: https://github.com/MoarVM/MoarVM/commit/c79558defc
[12:13] <jnthnwrthngtn> This is the big one, I guess.
[12:13] <jnthnwrthngtn> I need lunch... :)
[12:13] <MasterDuke> a couple `make m-test` runs have been fine, but i do see a fail in t/spec/S16-unfiled/getpeername.rakudo.moar
[12:14] <MasterDuke> and t/spec/S17-supply/syntax-nonblocking-await.t
[12:16] <jnthnwrthngtn> The latter was mentioned as an issue on master anyway
[12:17] <jnthnwrthngtn> The first is curious.
[12:17] <jnthnwrthngtn> Is it failing repeatably?
[12:17] <MasterDuke> ubsan throws a fit when building nqp. `src/6model/serialization.c:1691:21: runtime error: left shift of 4243 by 52 places cannot be represented in type 'long int'` seems like it could be a problem. a *ton* of `runtime error: member access within misaligned address` and `runtime error: load of misaligned address`
[12:18] <MasterDuke> well, the spectest is still running. rakudo definitely feels slower than i remember on this computer
[12:19] <MasterDuke> `src/6model/serialization.c:902:5: runtime error: null pointer passed as argument 2, which is declared to never be null`
[12:21] <jnthnwrthngtn> Those are interesting, although surely unrelated to this branch
[12:21] <jnthnwrthngtn> I think if you're running it with UBSAN it's going to feel slower? :)
[12:22] <MasterDuke> oops, yeah, those are completely unrelated to new-special-return testing
[12:22] <MasterDuke> those were from my desktop
[12:22] <jnthnwrthngtn> The shift things maybe don't matter a lot but the null one is a bit concerning
[12:23] <MasterDuke> on the laptop, those two fails aren't happening when run by themselves. t/spec/S16-unfiled/getpeername.rakudo.moar is essentially empty
[12:24] <MasterDuke> fwiw, i don't think any of those usban things are new with new-disp, pretty sure i remember seeing them a while ago
[12:25] <MasterDuke> https://github.com/MoarVM/MoarVM/issues/1431
[12:26] <nine> The null pointer thing looks quite trivial. I bet it's when writer->root.num_repos is 0, i.e. there are no repossessions and we didn't allocate a repossession table at all.
[12:27] <jnthnwrthngtn> oh, lunch, bbl
[13:10] *** evalable6 left
[13:10] *** linkable6 left
[13:11] *** evalable6 joined
[13:21] <jnthnwrthngtn> Cool, it's green :)
[13:25] <lizmat> .oO( it's not easy being green )
[13:28] <Geth> Â¦ MoarVM/new-special-return-only: 4c29e70279 | (Jonathan Worthington)++ | 5 files
[13:28] <Geth> Â¦ MoarVM/new-special-return-only: Remove non-local use of thunked flag
[13:28] <Geth> Â¦ MoarVM/new-special-return-only: 
[13:28] <Geth> Â¦ MoarVM/new-special-return-only: So now we only need to track it locally inside of the unwind frame
[13:28] <Geth> Â¦ MoarVM/new-special-return-only: function.
[13:28] <Geth> Â¦ MoarVM/new-special-return-only: review: https://github.com/MoarVM/MoarVM/commit/4c29e70279
[13:28] <jnthnwrthngtn> In theory this one is now just removing dead code, so should be green also.
[13:30] <jnthnwrthngtn> Then there's two more patches to put back and test, then I'll tidy it up
[14:37] <Geth> Â¦ MoarVM/new-special-return-only: 30476664e0 | (Jonathan Worthington)++ | 2 files
[14:37] <Geth> Â¦ MoarVM/new-special-return-only: Move stack frame extras cleanup into unwind
[14:37] <Geth> Â¦ MoarVM/new-special-return-only: 
[14:37] <Geth> Â¦ MoarVM/new-special-return-only: We can free it more eagerly since we know it didn't escape, and can also
[14:37] <Geth> Â¦ MoarVM/new-special-return-only: avoid having to NULL out the extras pointer.
[14:37] <Geth> Â¦ MoarVM/new-special-return-only: review: https://github.com/MoarVM/MoarVM/commit/30476664e0
[14:38] <dogbert17> running a spectest with MVM_GC_DEBUG=3 is slooow
[14:42] <jnthnwrthngtn> I can only imagine...
[14:45] <jnthnwrthngtn> So there's only one more commit to add back after ^^ and then I'll tidy up and I think it'll be good
[14:46] <Nicholas> This is all very illogical
[14:54] <jnthnwrthngtn> ?
[15:14] <Geth> Â¦ MoarVM/new-special-return-only: 374be40ae4 | (Jonathan Worthington)++ | 3 files
[15:14] <Geth> Â¦ MoarVM/new-special-return-only: Make return from JITted frames cheaper
[15:14] <Geth> Â¦ MoarVM/new-special-return-only: 
[15:14] <Geth> Â¦ MoarVM/new-special-return-only: This shaves ~7 CPU instructions per return from a JIT-compiled frame by
[15:14] <Geth> Â¦ MoarVM/new-special-return-only: avoiding duplicate checks that the compiler is seemingly unable to get
[15:14] <Geth> Â¦ MoarVM/new-special-return-only: rid of (indeed, I've never seen a compiler manage to inline the JIT set
[15:14] <Geth> Â¦ MoarVM/new-special-return-only: position before now). Add some assertions to make sure we never diverge
[15:14] <Geth> Â¦ MoarVM/new-special-return-only: from the behavior of the general case.
[15:14] <Geth> Â¦ MoarVM/new-special-return-only: review: https://github.com/MoarVM/MoarVM/commit/374be40ae4
[15:14] <jnthnwrthngtn> Yay. Assuming this one is also fine, we can haz speedup
[15:16] *** patrickb joined
[15:17] <patrickb> o/
[15:18] <patrickb> jnthn: I didn't carefully read the backlog. But what's the difference between the original PR and the current state of it?
[15:20] <nine> patrickb: original PR reliably threw errors on CI that none of us could reproduce locally. Hence the new PR with commit by commit pushes to narrow down the problem and find solutions
[15:20] <jnthnwrthngtn> m: say 1.742 / 1.973
[15:20] <camelia> rakudo-moar ab02205ed: OUTPUT: Â«0.882919â¤Â»
[15:21] <jnthnwrthngtn> wait, waht
[15:21] <jnthnwrthngtn> meh, typo
[15:21] <patrickb> That's what I understood. But it seems just putting the same commits one by one back fixed it without actually changing anything. And that seems more like a reason to cry than rejoice...
[15:21] <jnthnwrthngtn> m: say 1.742 / 1.873
[15:21] <camelia> rakudo-moar ab02205ed: OUTPUT: Â«0.930059â¤Â»
[15:21] <timo> that's still a decent win
[15:21] <nine> patrickb: no, no. He found the issue. Was finalizers getting run at inopportune times.
[15:21] <jnthnwrthngtn> Typo'd. OK, that's more in line with the improvement level I observed.
[15:21] <timo> that's the fibonacci one again?
[15:22] <jnthnwrthngtn> timo: Yes
[15:22] <timo> and comparing master vs new-special-return-only?
[15:22] <patrickb> Ah, that'st the bit I missed. Thanks!
[15:22] <nine> patrickb: https://github.com/MoarVM/MoarVM/commit/6fcedf7b11d45956fb6f3a6c900f80acca669f6b
[15:22] * patrickb reads up on the finalizer commit
[15:23] <nine> patrickb: then some commits for reducing the usage of the thunked variable which was only meant as a temporary solution in the branch. But some part of it apparently has to stay
[15:23] <jnthnwrthngtn> I'm still a bit frustrated I can't debug it locally yet, but the mitigation for the finalizer problem doesn't seem to lose us anything.
[15:23] <jnthnwrthngtn> Or at lesat, not much.
[15:24] <jnthnwrthngtn> It'd be nice to lose the "did we thunk" flag entirely, but having it local rather than passed through a load of functions is a big improvement.
[15:24] <jnthnwrthngtn> And unblocks the even bigger improvements to cleaned up return handling.
[15:29] <nine> I'll call that a victory
[15:34] <jnthnwrthngtn> m: say 3.434 / 3.495
[15:34] <camelia> rakudo-moar ab02205ed: OUTPUT: Â«0.982546â¤Â»
[15:35] <jnthnwrthngtn> A more realistic number for the effect in a realistic application (nearly 2% win in Agrammon)
[15:36] <jnthnwrthngtn> m: say 3.434 / 3.634
[15:36] <camelia> rakudo-moar ab02205ed: OUTPUT: Â«0.944964â¤Â»
[15:36] <jnthnwrthngtn> And that's against pre-new-disp
[15:40] <Geth> Â¦ MoarVM/new-special-return: 16 commits pushed by (Jonathan Worthington)++
[15:40] <Geth> Â¦ MoarVM/new-special-return: review: https://github.com/MoarVM/MoarVM/compare/c77a89fae683...5128b9b2d366
[15:40] <jnthnwrthngtn> That's a tidied history, back on the original PR
[15:41] <Nicholas> the "illogical" comment was because I hadn't realised that the problem was found. But I'm still a bit confused as to why it was not reproducable anywhere other than on the CI system
[15:42] <nine> Nicholas: we all are :)
[15:44] <jnthnwrthngtn> My best guess remains that it's related to a code-path in comp unit handling that is taken on the CI but not locally for...whatever reason.
[15:48] <nine> Not many methods have a --> CompUnit:D return signature. Mostly method need which will be involved just the same.
[15:49] * [Coke] is surprised to find nom branch still a thing.
[15:49] <jnthnwrthngtn> If anybody fancies a little reviewing, https://github.com/MoarVM/MoarVM/pull/1589 is also there
[15:52] <nine> Just approved it
[15:53] <nine> Will probably have a look at new-special-return tomorrow. Good thing I've already studied quite a few of the commits now :)
[15:56] <timo> https://github.com/MoarVM/MoarVM/pull/1585 - this one isn't huge and could also be reviewed. got a look from MD already who pointed out a few things
[15:58] <Geth> Â¦ MoarVM: fcddd1210d | (Jonathan Worthington)++ | src/core/frame.c
[15:58] <Geth> Â¦ MoarVM: Split specialized and unspecialized frame alloc
[15:58] <Geth> Â¦ MoarVM: 
[15:58] <Geth> Â¦ MoarVM: This allows for us to eliminate more checks than the compiler can, and
[15:58] <Geth> Â¦ MoarVM: also seems - at least on some compilers - to make it possible to inline
[15:58] <Geth> Â¦ MoarVM: into MVM_frame_dispatch. One further opportunity is that we can fold two
[15:58] <Geth> Â¦ MoarVM: calls to memset into one in the common on-callstack allocation case of
[15:58] <Geth> Â¦ MoarVM: specialized frames.
[15:58] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/fcddd1210d
[15:58] <Geth> Â¦ MoarVM: 9903a543dc | (Jonathan Worthington)++ | src/core/frame.c
[15:58] <Geth> Â¦ MoarVM: Elide frame initialization check with spesh cand
[15:58] <Geth> Â¦ MoarVM: 
[15:58] <Geth> Â¦ MoarVM: If we are at the point that we are making a call where we have already
[15:58] <Geth> Â¦ MoarVM: identified a specialization of a frame, then clearly that frame has been
[15:58] <Geth> Â¦ MoarVM: invoked before. Thus move the frame initialization check into the path
[15:58] <Geth> Â¦ MoarVM: of the non-specialized invocation.
[15:58] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9903a543dc
[15:58] <Geth> Â¦ MoarVM: 770e82e484 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/core/frame.c
[15:58] <Geth> Â¦ MoarVM: Merge pull request #1589 from MoarVM/faster-frame-alloc
[15:58] <Geth> Â¦ MoarVM: 
[15:58] <Geth> Â¦ MoarVM: Some small optimizations for frame allocation
[15:58] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/770e82e484
[15:59] <jnthnwrthngtn> Will rebase https://github.com/MoarVM/MoarVM/pull/1581 on master also, so that I can have a single point with all of the call/return related opts so far, so I can do more on that :)
[16:11] *** linkable6 joined
[16:27] *** patrickb left
[16:42] <Geth> Â¦ MoarVM/new-special-return: 16 commits pushed by (Jonathan Worthington)++
[16:42] <Geth> Â¦ MoarVM/new-special-return: review: https://github.com/MoarVM/MoarVM/compare/5128b9b2d366...f58cf69f03a2
[16:44] <Geth> Â¦ MoarVM/new-special-return: 485ca825f8 | (Jonathan Worthington)++ | 3 files
[16:44] <Geth> Â¦ MoarVM/new-special-return: Avoid unused record -> frame translation
[16:44] <Geth> Â¦ MoarVM/new-special-return: 
[16:44] <Geth> Â¦ MoarVM/new-special-return: remove_one_frame now has no need for the caller frame, so instead of
[16:44] <Geth> Â¦ MoarVM/new-special-return: finding it and then NULL-testing it, just return a boolean from the
[16:44] <Geth> Â¦ MoarVM/new-special-return: callstack unwind instead. Shaves ~9 CPU instructions per call to
[16:44] <Geth> Â¦ MoarVM/new-special-return: remove_one_frame.
[16:44] <Geth> Â¦ MoarVM/new-special-return: review: https://github.com/MoarVM/MoarVM/commit/485ca825f8
[16:44] <jnthnwrthngtn> Figure that belongs in the PR too, since it's an obvious cleanup
[16:50] *** patrickb joined
[17:01] <jnthnwrthngtn> language class &
[17:11] *** camelia left
[17:11] *** nine left
[17:19] *** camelia joined
[17:24] *** camelia left
[18:02] *** reportable6 left
[18:03] *** nine joined
[18:05] *** nine left
[18:06] *** nine joined
[18:08] *** camelia joined
[18:22] *** dogbert11 joined
[18:24] *** dogbert17 left
[18:25] *** dogbert17 joined
[18:27] *** dogbert11 left
[18:32] *** MasterDuke left
[18:34] *** patrickz joined
[18:34] *** patrickb left
[18:45] *** MasterDuke joined
[18:46] *** dogbert11 joined
[18:48] *** dogbert17 left
[18:54] *** squashable6 left
[18:55] *** squashable6 joined
[19:02] *** squashable6 left
[19:02] *** squashable6 joined
[19:03] *** squashable6 left
[19:12] *** shareable6 left
[19:13] *** shareable6 joined
[19:18] *** squashable6 joined
[20:05] *** reportable6 joined
[20:24] <Nicholas> nine: OK, first SEGV is at b7d40359a1503dda41e8592297d305ea7b1f2ba5 - as best I can tell you can't pass a NULL ffi_type *rtype to ffi_prep_cif
[20:52] <timo> m: say (908822585 + 908914042 + 908879926) * 100 / (906575765 + 906404294 + 906761700)
[20:52] <camelia> rakudo-moar 6e5c17f1a: OUTPUT: Â«100.25277377814â¤Â»
[20:53] <timo> m: say (908822585 + 908914042 + 908879926) R/ (906575765 + 906404294 + 906761700) * 100
[20:53] <camelia> rakudo-moar 6e5c17f1a: OUTPUT: Â«99.74786355667â¤Â»
[20:56] <timo> m: say (908822585 + 908914042 + 908879926) R/ (905987592 + 905776803 + 905675811) * 100
[20:56] <camelia> rakudo-moar 6e5c17f1a: OUTPUT: Â«99.66345297105â¤Â»
[20:56] <nine> Nicholas: but I don't see how that commit could cause that? We're passing body->ffi_ret_type there, which is set during setup of the native callsite. And that setup hasn't changed at all
[20:57] <Nicholas> me neither yet. I have a third build in progress - libfii on master
[20:58] <Nicholas> but this really was "that commit should work because it didn't change the dyncall/ffi specific code, but I'll just check it anyway"
[20:58] <Nicholas> "yet" might be "I've gone to bed"
[20:58] <Nicholas> valgrind did not show any problems prior to a NULL pointer deference
[20:59] <timo> running rakudo -e '' while printing out what ops are most commonly validated showed getcode at 51.6k, push_o at 25.6k, 13.9k const_s, 13.5k capturelex, 10.8k set
[20:59] *** patrickz left
[21:01] <timo> adding a tiny fastpath for getcode that validates the two operands without going through the op info's arguments arrays in a loop
[21:01] <timo> gave the first improvement, the 99.75%
[21:02] <timo> putting the operands in there as constants got it down to 99.66%
[21:05] <timo> ideally someone would put a bit of work into an attempt to SIMD the validator as much as that would be possible
[21:05] <Nicholas> nine: I might still randomly vanish into bed, but rr on that commit shows that we hit copy_to in src/6model/reprs/NativeCall.c
[21:06] <Nicholas> and that looks suspiciously like it can't copy enough
[21:11] <nine> Nicholas: ah, yes, of course. I think I've already fixed 5 different things that copy_to neglected to copy
[21:12] <timo> imagine if we could read something about the number of arguments a code has from its opcode ...
[21:15] <nine> timo: the 16 bits ought to give us enough room to encode that.
[21:15] <timo> aye, we "only" have 943 opcodes
[21:15] <timo> but yeah tossing out extops will give us all ze bits
[21:15] <timo> do we split it in half at the moment for extops?
[21:16] <timo> ah, the ext op base is 1024
[21:16] <nine> And the argument count can be part of the op's id. So we only need enough bits for the distinct ops with a certain argument number
[21:16] <MasterDuke> would rakuast make it possible to have built-in support for something like `multi foo(either(Int $a, Str $b)) { ... }` instead of `multi foo(Int $a, Str $b) { ... }; multi foo(Str $a, Int $b) { ... }`?
[21:16] <timo> that's right. i'll want to count that up real quick
[21:17] <timo>     360     2,
[21:17] <timo>     210     3,
[21:17] <timo>     116     1,
[21:17] <timo>      80     4,
[21:17] <timo>      35     5,
[21:17] <timo>      11     6,
[21:17] <timo>       9     0,
[21:17] <timo>       5     7,
[21:17] <timo>       4     8,
[21:17] <timo>       1     2
[21:18] <timo>       1     2
[21:18] <timo>       1 0,
[21:18] <nine> So 9 bits leaves plenty of room for new ops with 2 operands. Does the count include deprecated ones?
[21:19] <timo> like 72 deprecated ops are in there with different numbers of operands
[21:20] <timo> very very many of them are 2 args
[21:20] <timo> only 36 of them
[21:20] <nine> Anyway 4 bits for argument count seems to be plenty enough.
[21:21] <timo> so not getting below 256 for 2-op ops
[21:21] <timo> but, if we turn for example all the trigonometry ops into syscalls
[21:22] <timo> also just like 9 of them are obviously rare enough for that purpose
[21:22] <nine> I thought syscalls are more something for rarely used ops?
[21:24] <timo> copy_f, append_f, rename_f, chmod_f, exists_f, mkdir, open_dir, read_dir, trunc_fh, those are all 2-op ops that may be rare enough for this purpose
[21:24] <timo> in jitted code the cost difference between a syscall and an op should be equal, just more space used in the .moarvm bytecode file
[21:25] <timo> if we can make bytecode validation simpler/faster by tossing a few of the rarest ops, that could be a thing we may do
[21:31] <timo> m: say 177237634 * 100 / 2717440206
[21:31] <camelia> rakudo-moar 3ef09a72e: OUTPUT: Â«6.52222755845â¤Â»
[21:32] <timo> the total Ir count as reported by callgrind; this is the sum of three runs of rakudo -e ''
[21:32] <timo> for the entire validate_static_frame function
[21:41] *** sena_kun left
[21:42] <Geth> Â¦ MoarVM/optimize_hllbool_boolify_pairs: 14a8befd1c | (Stefan Seifert)++ | 3 files
[21:42] <Geth> Â¦ MoarVM/optimize_hllbool_boolify_pairs: Eliminate hllbool/boot-boolify-boxed-int pairs in spesh
[21:42] <Geth> Â¦ MoarVM/optimize_hllbool_boolify_pairs: 
[21:42] <Geth> Â¦ MoarVM/optimize_hllbool_boolify_pairs: No need to turn an int into an HLL bool just to turn it back to an int when
[21:42] <Geth> Â¦ MoarVM/optimize_hllbool_boolify_pairs: using it as a condition for jumps. Eliminate those pairs same as we do with
[21:42] <Geth> Â¦ MoarVM/optimize_hllbool_boolify_pairs: box/unbox.
[21:42] <Geth> Â¦ MoarVM/optimize_hllbool_boolify_pairs: review: https://github.com/MoarVM/MoarVM/commit/14a8befd1c
[21:42] *** sena_kun joined
[22:04] *** dogbert17 joined
[22:06] *** dogbert11 left
[22:12] *** RakuIRCLogger left
[22:13] *** RakuIRCLogger joined
