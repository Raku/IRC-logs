[00:08] *** reportable6 left
[00:23] *** squashable6 joined
[01:09] *** reportable6 joined
[01:37] *** CaCode left
[02:37] *** tellable6 left
[02:37] *** greppable6 left
[02:37] *** squashable6 left
[02:37] *** bisectable6 left
[02:37] *** committable6 left
[02:37] *** bloatable6 left
[02:37] *** evalable6 left
[02:37] *** statisfiable6 left
[02:37] *** releasable6 left
[02:37] *** sourceable6 left
[02:37] *** quotable6 left
[02:37] *** benchable6 left
[02:37] *** linkable6 left
[02:37] *** shareable6 left
[02:37] *** notable6 left
[02:37] *** reportable6 left
[02:37] *** coverable6 left
[02:37] *** unicodable6 left
[02:37] *** nativecallable6 left
[02:37] *** nativecallable6 joined
[02:37] *** linkable6 joined
[02:38] *** greppable6 joined
[02:38] *** bisectable6 joined
[02:39] *** squashable6 joined
[02:39] *** reportable6 joined
[02:39] *** sourceable6 joined
[02:39] *** coverable6 joined
[02:40] *** tellable6 joined
[03:24] *** vrurg joined
[03:27] *** vrurg_ left
[03:37] *** shareable6 joined
[03:38] *** evalable6 joined
[03:39] *** bloatable6 joined
[03:39] *** notable6 joined
[03:39] *** benchable6 joined
[03:40] *** statisfiable6 joined
[03:40] *** vrurg left
[03:40] *** vrurg joined
[04:39] *** unicodable6 joined
[04:39] *** quotable6 joined
[04:50] *** CaCode joined
[05:40] *** committable6 joined
[05:46] *** samebchase joined
[06:07] *** reportable6 left
[06:40] *** releasable6 joined
[06:40] *** vrurg_ joined
[06:42] *** vrurg left
[08:25] *** CaCode left
[08:56] <Geth> ¦ MoarVM/master: 4 commits pushed by (Nicholas Clark)++, niner++

[08:56] <Geth> ¦ MoarVM/master: 0a674c8c3e | For an empty hash, report that at most 0 buckets are in use

[08:56] <Geth> ¦ MoarVM/master: 2fa51c611f | No need to call `MVM_str_hash_build` when deserializing an empty hash

[08:56] <Geth> ¦ MoarVM/master: c1e8775f78 | Skip sorting the keys when serializing empty hashes

[08:56] <Geth> ¦ MoarVM/master: 4ed8946989 | Merge pull request #1620 from MoarVM/deserialize-empty-hashes-robustly

[08:56] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/83c53580a700...4ed894698977

[09:10] *** reportable6 joined
[09:35] *** CaCode joined
[09:48] *** Colt left
[09:49] *** Colt joined
[09:53] <nine> Looks like LibXML suffers from at least 2 bugs. One spesh-related (but not JIT) and one that appears even without spesh. And one test seems to get stuck currently because LibXML is trying to fetch something from the network but just hangs instead (or runs into a timeout, wasn't patient enough to check)

[10:49] *** evalable6 left
[10:49] *** linkable6 left
[10:50] *** linkable6 joined
[10:51] *** evalable6 joined
[10:59] <dogbert17> nine: still down in the signed/unsigned rabbit hole?

[11:01] <nine> That's on pause while I am debugging Blin issues

[11:03] <dogbert17> I stumbled upon a, what I believe is a nativecall related, bug yesterday

[11:05] <dogbert17> https://github.com/MoarVM/MoarVM/issues/1621

[11:10] <nine> Oh, the non-spesh bug exposed by LibXML is about Proxy. Once we encounter a Proxy in the args list, we stop processing arguments and delegate to raku-native-dispatch-deproxy instead. This causes us to not install guards for the remaining arguments

[11:11] <dogbert17> so you found one of the bugs already, impressive

[11:59] <nine> Now I've even got a fix. Though it's kinda awful and I don't understand 100 % why it doesn't work the other way.

[12:07] *** reportable6 left
[12:20] <MasterDuke> how do i turn on https://github.com/rakudo/rakudo/blob/master/src/vm/moar/runner/main.c#L301-L305 when building rakudo? moarvm/nqp/rakudo were all built with `make MVM_TRACING=1 install`, but when i run with --tracing it's instead going to the default (even though the value would be triggering that case)

[12:24] <MasterDuke> also, when i just remove that #if, tracing still doesn't happen, though maybe that's because the MVM_interp_enable_tracing call is happening before the MVM_vm_create_instance call?

[12:27] <MasterDuke> well, moving MVM_interp_enable_tracing after the MVM_vm_create_instance doesn't change anything

[14:03] *** CaCode left
[14:08] *** reportable6 joined
[14:47] *** [Coke] left
[14:51] *** [Coke] joined
[15:54] *** Nicholas left
[16:44] <nine> So, I've rewritten Proxy support in NativeCall so that instead of the clever but inefficient trick that would require that ugly fix, it works like multi dispatch and uses the ProxyReaderFactory. Works like a charm, except that now in a few cases the dispatch just does not get resumed

[16:58] *** linkable6 left
[16:58] *** evalable6 left
[17:00] <dogbert17> uh oh

[17:09] <MasterDuke> every problem in computer science can be solved by adding a layer of indirection, time to break out the ProxyReaderFactoryFactory!

[17:39] <nine> This isn't Java. The solution is obvioulsy a ProxyReaderFactoryProxy

[17:50] <lizmat> .oO( with maybe a touch of sudo ? )

[17:58] *** Guest1254 joined
[18:00] *** evalable6 joined
[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[18:59] *** linkable6 joined
[19:36] *** Guest1254 left
[19:47] *** Guest125 joined
[19:48] *** Guest125 left
[20:27] <japhb> lizmat: sudo MakeMeAProxyReaderFactoryProxy ?

[20:28] <japhb> sudo write-my-boilerplate

[21:13] *** kjp left
[21:20] <timo> `no nonsense;`

[21:31] <MasterDuke> huh. using alloca where possible in the rakudo runner took 56,532,210 more instructions for 100 runs of `MVM_SPESH_BLOCKING=1 raku -e ''`

[21:34] <timo> oh? that is odd

[21:36] <MasterDuke> i do add conditionals for if the size is too big, but i still sort of expected it to be few instructions overall. going to check elapsed time with /usr/bin/time now

[21:36] <timo> huh

[21:41] <MasterDuke> well, /usr/bin/time isn't very precise, but for 100 runs it thinks using alloca is 0.19s slower (in total)

[21:42] <MasterDuke> the patch https://gist.github.com/MasterDuke17/497d9bc0ed4ca7caa881709b29845492 if you're curious

[21:44] <MasterDuke> maybe some of those checks for the size can be assumed to always be ok and removed

[21:47] *** kjp joined
[21:51] <timo> ok the first thing i see is file path lengths

[21:51] <timo> we should be able to get a proper value for "maximum file path length the system allows"

[21:51] <timo> so anything more than that would be an error later anyway

[21:54] <MasterDuke> "Linux has a maximum filename length of 255 characters for most filesystems (including EXT4), and a maximum path of 4096 characters" to quote the first hit on google

[21:54] <timo> we'll want to have this value for every system we support

[21:54] <timo> and of course never accidentally write past our allocated buffer when we are fed something longer

[21:55] <MasterDuke> looks like for bsd max path is 1024

[21:56] <MasterDuke> and macos

[21:56] <MasterDuke> oh, and windows is 260

[21:57] <timo> oh christ, 260?

[21:57] <timo> that's nothing?!

[21:57] *** harrow left
[21:57] <MasterDuke> well, of course it's more complicated than that https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation

[21:58] <MasterDuke> but that looks like the initial default

[22:00] <MasterDuke> i'll just remove all those checks and see if it's faster. if not, no reason to continue the experiment

[22:02] <timo> ah, good point

[22:02] <timo> to get an upper and lower bound

[22:23] <MasterDuke> huh. even with no checks, 6,889,088 more instructions for alloca and 0.04s more time according to /usr/bin/time

[22:26] *** harrow joined
[22:39] <timo> that is very odd. what does alloca actually compile to, then?

[22:40] <timo> just the call into malloc is short, but then you'll also run through malloc, which does a bunch of stuff, whereas alloca should essentially be barely a change at all??

[22:42] <timo> Ir also goes by cache lines, right? could it have something to do, then, with little changes giving us whole-cacheline differences at once?

[22:42] <timo> even if the malloc implementation just stays in cache most of the time, it'd still be more code than many alloca usages combined?

[22:43] <timo> but 7 million is out of how much? 10,000 million?

[22:52] <MasterDuke> what do you mean, out of?

[22:53] <MasterDuke> 95769046524 total instructions for 100 runs with alloca, 95762157436 total instructions on master

[22:54] <timo> m: say 95769046524 * 100 / 95762157436

[22:54] <camelia> rakudo-moar b5fb3628b: OUTPUT: «100.007193956553␤»

[22:55] <timo> i wonder. will this be difficult to measure reliably until we've made everything else a lot faster already?

[22:56] <timo> perhaps the big difference is when we have a multithreaded program, but valgrind wouldn't tell us in that case

[22:57] <timo> also, can you try jemalloc or some other malloc implementation?

[22:58] <MasterDuke> well, i figure the empty program is the best possible case for this since this is just about trying to speedup startup

[22:59] <MasterDuke> i'll try with mimalloc. btw, did you see my comments about using it a little while ago?

[23:00] <timo> i did not

[23:01] <MasterDuke> https://colabti.org/irclogger/irclogger_log/moarvm?date=2021-10-16#l56

[23:03] <MasterDuke> heh. with mimalloc LD_PRELOADed, alloca is .17 faster than master (though guess now i have to try master with mimalloc)

[23:03] <timo> oh i see that i actually even replied to that

[23:03] <timo> .17 seconds?

[23:04] <MasterDuke> they just released 2.0, i think we should seriously consider bundling/usring it with moarvm

[23:05] <MasterDuke> well, sum of all the elapsed times with master is 1827, 1649 for alloca+mimalloc

[23:05] <timo> empty program still?

[23:05] <MasterDuke> yeah

[23:06] <timo> that means a regular run of empty program is 1.8 seconds?

[23:06] <MasterDuke> 0.18

[23:06] <timo> you only used 100 for valgrind i guess?

[23:06] <MasterDuke> for both

[23:07] <timo> m: say 1827 / 100

[23:07] <camelia> rakudo-moar b5fb3628b: OUTPUT: «18.27␤»

[23:07] <timo> i'm confused :) :)

[23:08] <MasterDuke> divide by 100 again

[23:09] <MasterDuke>  /usr/bin/time reports 0.18, i log 18 to a file (and do that 100 times)

[23:14] <MasterDuke> and then just sum all the lines in the file

[23:16] <MasterDuke> hm, wonder if using hyperfine would be more rigorous

[23:19] *** discord-raku-bot left
[23:19] <MasterDuke> master+mimalloc is 1561 for startup time

[23:19] *** discord-raku-bot joined
[23:20] <MasterDuke> so somehow it's really looking like alloca isn't helping in this case

[23:20] <MasterDuke> (but mimalloc is)

[23:25] <MasterDuke> ugh, so much slower to run callgrind 100 times...

[23:25] <timo> oh for sure

[23:28] <MasterDuke> an interesting  yet involved  experiment would be to rip out the fsa and just see how mimalloc does

[23:29] <timo> mhh the code is already there, you'd just want to toss out the size checks including allocating the size bit before the data

[23:30] <MasterDuke> oh right, FSA_SIZE_DEBUG is essentially that, isn't it?

[23:30] <MasterDuke> interesting...

[23:30] <MasterDuke> maybe that'll be a christmas break project

[23:31] <MasterDuke> alloca+mimalloc is 162919560 instructions more than master+mimalloc

[23:33] <MasterDuke> and master is 9017008487 instructions more than master+mimalloc

[23:33] <MasterDuke> all total for 100 runs

