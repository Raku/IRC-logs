[00:00] *** linkable6 left
[00:00] *** evalable6 left
[00:00] *** evalable6 joined
[00:01] *** linkable6 joined
[00:02] *** reportable6 left
[00:19] <japhb> MasterDuke, nine: No --full-cleanup involved with panic.  While trying to golf the panic, I found this interesting case:

[00:19] <japhb> $ raku -e 'use MONKEY-SEE-NO-EVAL; EVAL buf8.allocate(100_000).raku'

[00:20] <japhb> Bytecode validation error at offset 52, instruction 10:

[00:20] <japhb> callsite expects 257 more positionals in block <unit> at -e line 1

[00:20] <japhb> Still trying to find what I need to golf the panic.

[00:27] <timo> we might be using an 8bit number somewhere still

[00:29] <japhb> timo: If I drop a digit in the allocate number (to 10_000) it succeeds.  So maybe a 16-bit?  Checking "interesting" numbers ....

[00:30] <japhb> Oooh, 65_535 gives the same error, but 65_534 gives:

[00:30] <japhb> Bytecode validation error at offset 524374, instruction 65551:

[00:30] <japhb> operand type 64 does not match register type 56 for op wval in frame <unit>

[01:04] *** reportable6 joined
[02:04] *** linkable6 left
[02:04] *** quotable6 left
[02:04] *** bloatable6 left
[02:04] *** nativecallable6 left
[02:04] *** statisfiable6 left
[02:04] *** greppable6 left
[02:04] *** squashable6 left
[02:04] *** sourceable6 left
[02:04] *** reportable6 left
[02:04] *** shareable6 left
[02:04] *** committable6 left
[02:04] *** coverable6 left
[02:04] *** bisectable6 left
[02:04] *** evalable6 left
[02:04] *** benchable6 left
[02:04] *** releasable6 left
[02:04] *** unicodable6 left
[02:04] *** notable6 left
[02:04] *** tellable6 left
[02:04] *** shareable6 joined
[02:04] *** nativecallable6 joined
[02:04] *** squashable6 joined
[02:04] *** benchable6 joined
[02:05] *** quotable6 joined
[02:05] *** reportable6 joined
[02:06] *** bloatable6 joined
[02:21] <japhb> Alright, best I've managed so far in reducing the panic:

[02:21] <japhb> raku -e 'use MONKEY-SEE-NO-EVAL; use YAMLish; my $buf = buf8.allocate(100_000); my $raku = $buf.raku; my $yaml = save-yaml $buf; for ^5 { say $_; try EVAL $raku; load-yaml $yaml }'

[02:21] <japhb> 0

[02:21] <japhb> 1

[02:21] <japhb> MoarVM panic: Tried to garbage-collect a locked mutex

[02:22] <japhb> On my system, hoisting either the EVAL or the load-yaml call out of the loop means it survives.

[03:05] *** coverable6 joined
[03:06] *** statisfiable6 joined
[03:06] *** committable6 joined
[03:06] *** evalable6 joined
[03:06] *** linkable6 joined
[03:07] *** releasable6 joined
[03:07] *** greppable6 joined
[03:38] *** frost-lab joined
[04:06] *** notable6 joined
[04:06] *** unicodable6 joined
[04:16] *** frost-lab left
[04:39] *** Guest92 joined
[04:41] *** Guest92 left
[05:05] *** sourceable6 joined
[05:06] *** tellable6 joined
[05:19] *** Guest92 joined
[05:22] *** Guest92 left
[05:22] *** frost-lab joined
[06:02] *** reportable6 left
[06:31] *** discord-raku-bot left
[06:31] *** linkable6 left
[06:32] *** discord-raku-bot joined
[07:03] *** reportable6 joined
[07:06] *** bisectable6 joined
[07:08] *** frost-lab left
[07:32] *** linkable6 joined
[08:25] *** linkable6 left
[08:26] *** linkable6 joined
[08:26] <lizmat> üè≥Ô∏è‚Äçüåà

[08:26] <lizmat> oops  :-)

[08:27] <lizmat> it's just an example of a .chars == 1 and .codes = 4  :-)

[08:30] <MasterDuke> https://gist.github.com/MasterDuke17/434a6db06998d04e351368d3edaea42f a backtrace from that `MoarVM panic: Tried to garbage-collect a locked mutex` error

[09:08] <jnthnwrthngtn> moarning o/

[09:12] <jnthnwrthngtn> MasterDuke: The backtrace won't be terribly useful, alas, 'cus it'll be in the GC, which can be triggered at any time. What may be useful is trying to work out where the mutex was allocated, which may be possible-ish with rr

[09:13] <jnthnwrthngtn> The actual MVMObject isn't useful in itself 'cus it moves every GC, but iirc it points to a piece of malloc'd memory to hold the uv_mutex and you could perhaps do a reverse watch on that

[09:14] <MasterDuke> the ->body.mutex i assume?

[09:15] <Nicholas> \o

[09:17] <jnthnwrthngtn> Yes

[09:17] <jnthnwrthngtn> Not the pointer, but some memory location inside of it

[09:38] <dogbert17> Hah, what a fail, tried to to 'zef install YAMLish' on master and was met with 'labeled next without loop construct'

[09:38] <dogbert17> no matter, found a workaround

[09:39] * dogbert17 drinks some coffee

[09:44] <lizmat> dogbert17: you probably need to upgrade zef

[09:45] <lizmat> hmmm...  I thought zef had worked around

[09:45] <lizmat> in any case, there's a PR (in MoarVM) by nine that should fix this

[09:48] <dogbert17> lizmat: thx, I got around the problem by setting MVM_SPESH_DISABLE=1 during the install

[09:49] <lizmat> jnthnwrthngtn: perhaps we could merge nine's PR and bump MoarVM?

[10:00] *** MasterDuke left
[10:01] <Geth> ¬¶ MoarVM: a932b1732c | (Stefan Seifert)++ | 2 files

[10:01] <Geth> ¬¶ MoarVM: Fix spesh optimizing away still needed label register

[10:01] <Geth> ¬¶ MoarVM: 

[10:01] <Geth> ¬¶ MoarVM: Objects representing loop labels are kept in a register and may be used by loop

[10:01] <Geth> ¬¶ MoarVM: handlers (like next LABEL). Spesh did not take this relationship into account,

[10:01] <Geth> ¬¶ MoarVM: just saw a register that was written to, but not otherwise used and optimized

[10:01] <Geth> ¬¶ MoarVM: the writers of this register away. Fix by giving a handler's label_reg the same

[10:01] <Geth> ¬¶ MoarVM: treatment as block_reg.

[10:01] <Geth> ¬¶ MoarVM: 

[10:01] <Geth> ¬¶ MoarVM: Fixes Rakudo issue #4456

[10:01] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a932b1732c

[10:01] <Geth> ¬¶ MoarVM: 860cc65508 | (Jonathan Worthington)++ (committed using GitHub Web editor) | 2 files

[10:01] <Geth> ¬¶ MoarVM: Merge pull request #1522 from MoarVM/fix_spesh_losing_label_reg

[10:01] <Geth> ¬¶ MoarVM: 

[10:01] <Geth> ¬¶ MoarVM: Fix spesh optimizing away still needed label register

[10:01] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/860cc65508

[10:03] *** patrickb joined
[10:04] <lizmat> any other stuff I should wait for before bumping MoarVM?

[10:05] *** MasterDuke joined
[10:11] <jnthnwrthngtn> argh, that's annoying... So I got spesh linking working again. Turns out that since it emits into temporaries while forming the dispatch program and then releases them, and then runbytecode also does this and uses the temps within the lifetime of the other temps, they interfere and then boom segv

[10:12] <jnthnwrthngtn> Guess they need delayed release or some such

[10:31] <Geth> ¬¶ MoarVM/new-disp: 5c12d74508 | (Jonathan Worthington)++ | 3 files

[10:31] <Geth> ¬¶ MoarVM/new-disp: Reinstate spesh linking

[10:31] <Geth> ¬¶ MoarVM/new-disp: 

[10:31] <Geth> ¬¶ MoarVM/new-disp: That is, where possible, determine the candidate that we are going to be

[10:31] <Geth> ¬¶ MoarVM/new-disp: invoking, and identify it directly, so we don't have to run through the

[10:31] <Geth> ¬¶ MoarVM/new-disp: spesh arg guard.

[10:31] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5c12d74508

[10:32] <jnthnwrthngtn> Curiously this has only so much effect on CORE.setting build time, but is a rather more noticeable in `make test`

[10:36] *** AlexDaniel left
[10:36] *** psydroid left
[10:39] *** AlexDaniel joined
[10:41] <Geth> ¬¶ MoarVM/new-disp: fe2fe669fe | (Jonathan Worthington)++ | src/disp/inline_cache.c

[10:41] <Geth> ¬¶ MoarVM/new-disp: Add a way to dump full inline cache backtraces

[10:41] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/fe2fe669fe

[10:41] *** psydroid joined
[10:47] <Nicholas> jnthnwrthngtn: ASAN now reports a leak: http://paste.scsys.co.uk/595621

[10:47] <Nicholas> quite a few of those

[10:48] <Nicholas> different backtraces, but all end up in translate_dispatch_program src/spesh/disp.c

[10:53] <lizmat> dogbert17: MoarVM bumped, zef should work again on master

[11:07] *** sena_kun joined
[11:13] *** patrickb left
[11:14] *** patrickb joined
[11:15] *** patrickb left
[11:16] *** patrickb joined
[11:17] *** patrickb left
[11:18] *** patrickb joined
[11:18] <lizmat> jnthnwrthngtn: Q, will INDIRECT_NAME_LOOKUP exist in its current form in new-disp ?

[11:20] *** patrickb left
[11:20] *** patrickb joined
[11:22] *** patrickb left
[11:22] *** patrickb joined
[11:22] <jnthnwrthngtn> lizmat: It's not something I've looked at during new-disp, and it hasn't shown up in any test failures

[11:22] <jnthnwrthngtn> lizmat: So I suspect it doesn't (need to) change

[11:23] <lizmat> ok, then I'll spend some time optimizing it  :-)

[11:23] <jnthnwrthngtn> Intuitively I don't expect it to need to

[11:26] *** patrickb left
[11:26] *** patrickb joined
[11:28] *** patrickb left
[11:28] *** patrickb joined
[11:30] *** patrickb left
[11:30] *** patrickb joined
[11:32] *** patrickb left
[11:32] *** patrickb joined
[11:34] *** patrickb left
[11:34] *** patrickb joined
[11:36] *** patrickb left
[11:36] *** patrickb joined
[11:36] *** patrickb left
[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:18] *** patrickb joined
[12:19] <MasterDuke> jnthnwrthngtn, nine: does the new rr backtrace in https://gist.github.com/MasterDuke17/434a6db06998d04e351368d3edaea42f look normal/ok?

[12:20] <MasterDuke> rr does not like if i try to watch inside the `rm->body.mutex`

[12:26] <timo> MasterDuke: maybe try casting it to (MVMuint64*) so it doesn't need to watch an entire big memary area

[12:27] <MasterDuke> oh...that would explain why it complains about too many breakpoints

[12:27] <MasterDuke> at first i thought it was something about having installed a new kernel or two and maybe i needed to reboot

[12:29] <MasterDuke> but re the backtrace i wasn't sure if we could deserialize an MVMRentrantMutex

[12:34] <MasterDuke> gist updated

[12:50] <timo> let's see if i have the opportunity to look closely when i return from errandications

[12:52] <Nicholas> your cat will have other plans for you?

[13:06] * jnthnwrthngtn is back from errands

[13:06] <jnthnwrthngtn> grmbl, I see broken spectests

[13:06] <jnthnwrthngtn> How'd I manage that

[13:07] <Nicholas> insuffucient tea?

[13:07] <jnthnwrthngtn> It's a bit warm in here for tea at the moment

[13:08] <jnthnwrthngtn> (The air conditioner is working at this problem, however.)

[13:08] <jnthnwrthngtn> Uff. I've no idea how the change I've done causes the problem I see...

[13:08] <Nicholas> what is this concept of "too warm for tea?" Have you gone native? :-)

[13:09] <jnthnwrthngtn> Well, I did just collect a letter telling me that my permanent residence permit is ready for collection... :)

[13:09] <Nicholas> woohoo

[13:10] <jnthnwrthngtn> Of course, the migration office is the other side of the city

[13:11] <Nicholas> That sounds like the feed line for a good pun about migration. I miss TimToady

[13:22] <jnthnwrthngtn> OK, this bug is very confusing

[13:30] *** sena_kun left
[14:43] <Geth> ¬¶ MoarVM/new-disp: 5c38f5f6f3 | (Jonathan Worthington)++ | 15 files

[14:43] <Geth> ¬¶ MoarVM/new-disp: Eliminate legacy dispatcher ops

[14:43] <Geth> ¬¶ MoarVM/new-disp: 

[14:43] <Geth> ¬¶ MoarVM/new-disp: Which are no longer used in Rakudo.

[14:43] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5c38f5f6f3

[15:07] <dogbert17> m: use MONKEY-SEE-NO-EVAL; EVAL buf8.allocate(17_000).raku

[15:07] <camelia> rakudo-moar 62e291f09: ( no output )

[15:07] <dogbert17> sigh

[15:08] <dogbert17> on new-disp I get:

[15:08] <dogbert17> MoarVM oops: Oversize callstack flattening record requested (wanted 153104, maximum 131040)

[15:08] <dogbert17>    at gen/moar/Metamodel.nqp:2371  (/home/dogbert/repos/rakudo/blib/Perl6/Metamodel.moarvm:)

[15:09] <timo> too many arguments, yeah :(

[15:09] <dogbert17> it does fail on master as well, see japhb's comments from the night

[15:09] <dogbert17> m: say 1024 * 128

[15:09] <camelia> rakudo-moar 62e291f09: OUTPUT: ¬´131072‚ê§¬ª

[15:12] <nine> 131040 arguments ought to be enough...

[15:15] <dogbert17> I'm inclined to agree

[15:15] <jnthnwrthngtn> Is the EVAL actually needed?

[15:15] <jnthnwrthngtn> Sounds like somewhere is doing arg flattening that really shouldn't be 

[15:16] <jnthnwrthngtn> Even if it works, it's horribly inefficient

[15:16] <Geth> ¬¶ MoarVM/new-disp: e4c801f1d0 | (Jonathan Worthington)++ | src/spesh/graph.c

[15:16] <Geth> ¬¶ MoarVM/new-disp: Prepare spesh graph builder for inlining

[15:16] <Geth> ¬¶ MoarVM/new-disp: 

[15:16] <Geth> ¬¶ MoarVM/new-disp: It needs to be able to create graphs from instructions containing

[15:16] <Geth> ¬¶ MoarVM/new-disp: specialized dispatch-related bytecodes.

[15:16] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/e4c801f1d0

[15:17] <timo> exciting!

[15:22] <Geth> ¬¶ MoarVM/new-disp: ad20e837f9 | (Jonathan Worthington)++ | 2 files

[15:22] <Geth> ¬¶ MoarVM/new-disp: First steps towards reinstating inlining

[15:22] <Geth> ¬¶ MoarVM/new-disp: 

[15:22] <Geth> ¬¶ MoarVM/new-disp: Try to build an inline graph, and add back the logging of whether we

[15:22] <Geth> ¬¶ MoarVM/new-disp: could inline if we actually tried to do so. Don't actually inline for

[15:22] <Geth> ¬¶ MoarVM/new-disp: now, however. Going this far does not seem to cause any regressions.

[15:22] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/ad20e837f9

[15:24] <MasterDuke> m: say buf8.new(|(^100_000))

[15:24] <camelia> rakudo-moar 62e291f09: OUTPUT: ¬´Too many arguments (100001) in flattening array, only 65535 allowed.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:24] <MasterDuke> i think the EVAL is required to get around that error

[15:27] <MasterDuke> m: use MONKEY-SEE-NO-EVAL; EVAL "say buf8.new({(^66_000).join(q|,|)})"

[15:27] <camelia> rakudo-moar 62e291f09: OUTPUT: ¬´Bytecode validation error at offset 52, instruction 10:‚ê§callsite expects 257 more positionals‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:28] <MasterDuke> that's the other one japhb found when golfing the mutex panic

[15:32] <MasterDuke> and here's https://gist.github.com/MasterDuke17/3bd1fd7967f29a771bf1ae2480f6327a some debugging info

[15:43] <Nicholas> jnthnwrthngtn: you turned off MVM_HASH_RANDMOIZE in commit 5c38f5f6f3fa904a10985ec93ba2caa091d506e6

[15:43] <nine> I know where that GC issue may come from

[15:44] <nine> Aaaand: it's coming from the other problem

[15:44] *** patrickb left
[15:44] <MasterDuke> the panic is coming from the bytecode validation?

[15:44] <MasterDuke> *mutex panic

[15:45] <nine> I.e. the Bytecode validation error happens during prepare_and_verify_static_frame called from instrumentation_level_barrier, i.e. while we're holding that mutex. So we jump out of that instrumentation_level_barrier without ever unlocking

[15:50] <nine> Luckily we have a mechanism for "please unlock this mutex in case an exception gets thrown"

[15:50] <nine> Alas, gotta go now

[15:51] <MasterDuke> oh, what mechanism is that?

[16:05] <Geth> ¬¶ MoarVM/new-disp: 3ff82a7004 | (Jonathan Worthington)++ | src/spesh/graph.c

[16:05] <Geth> ¬¶ MoarVM/new-disp: Add more basic block boundary ops

[16:05] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/3ff82a7004

[16:05] <Geth> ¬¶ MoarVM/new-disp: c66c96cfbc | (Jonathan Worthington)++ | src/moar.h

[16:05] <Geth> ¬¶ MoarVM/new-disp: Reinstate hash randomization

[16:05] <Geth> ¬¶ MoarVM/new-disp: 

[16:05] <Geth> ¬¶ MoarVM/new-disp: Disabled to get stable spesh logs, and accidentally committed.

[16:05] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/c66c96cfbc

[16:05] <Geth> ¬¶ MoarVM/new-disp: e3c36fc015 | (Jonathan Worthington)++ | 2 files

[16:05] <Geth> ¬¶ MoarVM/new-disp: First pass at porting the inlining algorithm

[16:05] <Geth> ¬¶ MoarVM/new-disp: 

[16:05] <Geth> ¬¶ MoarVM/new-disp: This is the minimal set of changes that would in theory be required for

[16:05] <Geth> ¬¶ MoarVM/new-disp: it to work.

[16:05] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/e3c36fc015

[16:05] <jnthnwrthngtn> Nicholas: oops, thanks

[16:20] <MasterDuke> `Unhandled exception: Internal error: multiple ex_release_mutex` doh

[16:24] <MasterDuke> hm. MVM_load_bytecode does a `MVM_tc_set_ex_release_mutex` before we reach `prepare_and_verify_static_frame`

[16:26] <MasterDuke> make it an array of mutexes?

[16:29] <MasterDuke> in prepare_and_verify_static_frame unlock the one that's already held, set the new one, then re-set the old one if an exception hasn't been thrown?

[16:31] <jnthnwrthngtn> So inlining reenalbed will get through the NQP build and fail one test; the Rakudo build fails the same test. Which...OK let's debug, but WHY does the frame the broken inlining happens in have to be EXPR (the expression parser)? :/

[16:32] <jnthnwrthngtn> Sure I'll go hunt this in 153 basic blocks :P

[16:32] <timo> whew.

[16:32] <timo> maybe it's a phi instruction with more than 65k arguments

[16:33] <jnthnwrthngtn> :P

[16:34] <jnthnwrthngtn> The upper limit of the size of that is surely the number of basic blocks?

[16:35] <jnthnwrthngtn> Oh, it's a deopt bug

[16:35] <jnthnwrthngtn> What on earth is it doing

[16:36] <jnthnwrthngtn> I'm suspecting its table of inline extends is rather off

[16:36] <Nicholas> ASAN or valgrind have hints?

[16:36] <jnthnwrthngtn> Nicholas: Didn't check, but feels very unlikely; it's almost certainly an off-by-something 

[16:37] <jnthnwrthngtn> It thinks that it's doing uninlining

[16:37] <jnthnwrthngtn> Or rather, that it should

[16:37] <jnthnwrthngtn> But it really shouldn't

[16:37] <jnthnwrthngtn> I guess something about the way calls look now means that end of inline marker is mis-placed or similar

[16:38] <jnthnwrthngtn> Or start

[16:41] <MasterDuke> huh. https://gist.github.com/MasterDuke17/e74be1116ea58d52c7ea218ce02e4547 doesn't fix the panic. even if that patch had some other bad behaviors, i thought it would at least prevent the panic

[16:44] *** linkable6 left
[16:44] *** evalable6 left
[16:45] <timo> well, i can't wait to read the blog post at the end of this :)

[16:46] *** linkable6 joined
[16:48] <jnthnwrthngtn> It's a bit odd. I can change the <= to < or make inline end annotations move in the other direction to fix the deopt bug...but doing either of those gets me a different wrong deopt

[16:54] <Nicholas> timo: Well, you never know. it might be "It's faster. Enjoy"

[16:58] <jnthnwrthngtn> I'm now at "why does this work on master" :)

[16:59] <jnthnwrthngtn> We set the end offset of an inline as the location after writing that instruction

[17:00] <jnthnwrthngtn> So the <= is wrong, since it would include the instruction after the inlined one.

[17:00] <jnthnwrthngtn> That'd also suggest we want to move it back, not forward

[17:00] <jnthnwrthngtn> Since it should be the last inlined instruction.

[17:00] <jnthnwrthngtn> oh hang on what

[17:01] <jnthnwrthngtn> We're writing it as a pre instruction

[17:01] <jnthnwrthngtn> I misread

[17:02] <jnthnwrthngtn> That implies it has to be on the instruction after the deopt always

[17:30] <jnthnwrthngtn> Doing that gets me another issue that...doesn't look like a deopt one, just bytecode corruption. Odd.

[17:32] <jnthnwrthngtn> ah, or maybe it is

[17:32] <jnthnwrthngtn> time for a break

[18:02] *** reportable6 left
[18:35] <nine> MasterDuke: are you sure it's complaining about the same mutex though?

[18:35] <MasterDuke> no

[18:36] <nine> MasterDuke: with that patch we now no longer unlock the tmp_ex_release_mutex, so maybe that's what gets collected while still locked

[18:36] <MasterDuke> oh. right. hm

[18:37] <MasterDuke> seems like maybe it does have to be an array of ex_release_mutexes?

[18:40] <nine> That would slow things down though

[18:41] <MasterDuke> yeah. my only other idea is passing the mutex down through all the functions calls and unlocking it in fail()

[18:45] *** evalable6 joined
[20:03] *** reportable6 joined
[20:10] <Geth> ¬¶ MoarVM/new-disp: 18f6e3b0eb | (Jonathan Worthington)++ | src/spesh/deopt.c

[20:10] <Geth> ¬¶ MoarVM/new-disp: Account for deopt all vs. deopt on difference

[20:10] <Geth> ¬¶ MoarVM/new-disp: 

[20:10] <Geth> ¬¶ MoarVM/new-disp: When we are doing a deopt all, the bytecode position is the op we will

[20:10] <Geth> ¬¶ MoarVM/new-disp: return to. Thus we need to account for being one past the end of the

[20:10] <Geth> ¬¶ MoarVM/new-disp: inline in that case (inclusive), but to *not* do it for a failed guard

[20:10] <Geth> ¬¶ MoarVM/new-disp: that is immediately following a depot, otherwise we'll end up wrongly

[20:10] <Geth> ¬¶ MoarVM/new-disp: uninlining an inline we were not in. (This may need a further look, as

[20:10] <Geth> ¬¶ MoarVM/new-disp: <‚Ä¶commit message has 5 more lines‚Ä¶>

[20:10] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/18f6e3b0eb

[20:10] <Geth> ¬¶ MoarVM/new-disp: 78d1cdf687 | (Jonathan Worthington)++ | src/spesh/inline.c

[20:10] <Geth> ¬¶ MoarVM/new-disp: Correct insertion of inline end marker

[20:10] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/78d1cdf687

[20:13] <Geth> ¬¶ MoarVM/new-disp: 42dbab6e00 | (Jonathan Worthington)++ | src/spesh/optimize.c

[20:13] <Geth> ¬¶ MoarVM/new-disp: Switch inlining back on

[20:13] <Geth> ¬¶ MoarVM/new-disp: 

[20:13] <Geth> ¬¶ MoarVM/new-disp: For now without optimizing the inlinee with knowledge of the surrounding

[20:13] <Geth> ¬¶ MoarVM/new-disp: context, and also without creating inlines of candidates that were not

[20:13] <Geth> ¬¶ MoarVM/new-disp: yet specialized.

[20:13] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/42dbab6e00

[20:16] <jnthnwrthngtn> So the way to debug inlining deopt bugs is apparently to order and eat a "garlic chicken" curry where they put WHOLE CLOVES of garlic - lots of them - into an already very garlicy sauce :)

[20:16] <jnthnwrthngtn> I didn't try it with stressing yet, but this causes no regressions

[20:17] <jnthnwrthngtn> Note, however, that it's inlining very little Raku code so far

[20:17] <jnthnwrthngtn> Or even spesh linking 

[20:17] <jnthnwrthngtn> 'cus I didn't yet teach it about dispatch programs with resumption state

[20:17] <nine> If that's the way to debug inlining deopt bugs, I do hope there's a couple of those bugs left for me :D

[20:21] <timo> i see a bunch of "inlining prevented by the op callercode" in a random piece of the nqp build speshlogged; isn't that an op that we can reasonably do right with inlining?

[20:25] <Nicholas> I'm getting a massive DU backtrace when I run time perl Configure.pl --backends=moar --prefix=/home/nick/Sandpit/moar-SAN

[21:06] <timo> someone can implement sp_guardnonzero for the jit

[21:20] <Geth> ¬¶ MoarVM/new-disp: 90ddd1f768 | (Jonathan Worthington)++ | src/spesh/optimize.c

[21:20] <Geth> ¬¶ MoarVM/new-disp: Re-enable post-inline optimizations

[21:20] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/90ddd1f768

[21:21] <timo> ohmygosh

[21:21] <jnthnwrthngtn> I ran tests while I was afk, no regressions, so guess it's close

[21:22] <jnthnwrthngtn> Nicholas: Congrats or something..you have the DU checking turned on, I guess?

[21:22] <Nicholas> I had, but I turned them off and I still see it

[21:22] <Nicholas> So I'm cofnused

[21:22] <jnthnwrthngtn> huh

[21:22] <Nicholas> that's what I thought

[21:25] <jnthnwrthngtn> "MoarVM oops in spesh thread: Malformed DU chain: reading goto of 4(2) not in graph" :D

[21:25] <timo> whoops, goto

[21:25] <jnthnwrthngtn> Yeah, I can guess what silly I've done

[21:26] <timo> changed the info of an ins without freeing usages?

[21:26] <jnthnwrthngtn> Yeah

[21:28] <Geth> ¬¶ MoarVM/new-disp: e212bfcd54 | (Jonathan Worthington)++ | src/spesh/inline.c

[21:28] <Geth> ¬¶ MoarVM/new-disp: Remove runbytecode usages of args when inlining

[21:28] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/e212bfcd54

[21:28] <jnthnwrthngtn> I like how much code went away when updating inlining

[21:29] <jnthnwrthngtn> The main thing left to re-instate is the JIT

[21:29] <jnthnwrthngtn> Which is probably doing rather little at present

[21:30] <jnthnwrthngtn> Since none(runbytecode, runcfunc, sp_dispatch) are JITted so far

[21:30] <jnthnwrthngtn> Even in lego, let alone expr

[21:36] <Geth> ¬¶ MoarVM/new-disp: 84e75a6830 | (Jonathan Worthington)++ | 2 files

[21:36] <Geth> ¬¶ MoarVM/new-disp: Remove properties from deprecated ops

[21:36] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/84e75a6830

[22:06] <[Coke]> will we ever be able to remove the deprecated ones, or will those gaps always be there?

[22:06] <[Coke]> (And it shouldn't impact anything, right?)

[22:08] <timo> we can fill them back up

[22:09] <timo> with new ops as they come along, if they do

[22:18] *** linkable6 left
[22:18] *** evalable6 left
[22:21] *** evalable6 joined
[22:24] <Geth> ¬¶ MoarVM/new-disp: d48f0d9348 | (Jonathan Worthington)++ | 5 files

[22:24] <Geth> ¬¶ MoarVM/new-disp: Start to re-work unspecialized inlining

[22:24] <Geth> ¬¶ MoarVM/new-disp: 

[22:24] <Geth> ¬¶ MoarVM/new-disp: This is a translation of what's needed to reinstate this on new-disp.

[22:24] <Geth> ¬¶ MoarVM/new-disp: However, something isn't quite right yet; enabling it leads to an NQP

[22:24] <Geth> ¬¶ MoarVM/new-disp: build failure.

[22:24] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/d48f0d9348

[22:30] <jnthnwrthngtn> I'm too tired to figure this breakage out today

[22:45] <timo> good work today jnthnwrthngtn 

[23:20] *** linkable6 joined
