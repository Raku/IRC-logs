[00:02] *** reportable6 left
[00:42] *** vrurg left
[01:05] *** reportable6 joined
[01:05] *** vrurg joined
[02:07] *** SmokeMachine left
[02:08] *** SmokeMachine joined
[02:08] *** tbrowder left
[02:09] *** tbrowder joined
[02:36] *** frost joined
[03:36] *** linkable6 left
[03:36] *** evalable6 left
[03:37] *** evalable6 joined
[05:45] *** committable6 left
[05:45] *** releasable6 left
[05:45] *** benchable6 left
[05:45] *** coverable6 left
[05:45] *** squashable6 left
[05:45] *** tellable6 left
[05:45] *** shareable6 left
[05:45] *** bisectable6 left
[05:45] *** reportable6 left
[05:45] *** sourceable6 left
[05:45] *** notable6 left
[05:45] *** nativecallable6 left
[05:45] *** evalable6 left
[05:45] *** quotable6 left
[05:45] *** unicodable6 left
[05:45] *** greppable6 left
[05:45] *** statisfiable6 left
[05:45] *** bloatable6 left
[05:45] *** squashable6 joined
[05:46] *** bloatable6 joined
[05:46] *** statisfiable6 joined
[05:46] *** tellable6 joined
[05:46] *** bisectable6 joined
[05:47] *** unicodable6 joined
[05:47] *** sourceable6 joined
[05:48] *** committable6 joined
[05:48] *** reportable6 joined
[05:48] *** coverable6 joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:39] *** linkable6 joined
[06:46] *** releasable6 joined
[06:46] <Mondenkind> http://ix.io/3BTg  this seems to have gotten much slower in new-disp (2s -> 50s, iirc)

[06:47] *** notable6 joined
[06:53] <Mondenkind> interestingly, changing \x, \y to $x, $y makes it slower still (I heard the latter was faster now).  I thought it might have something to do with the objects being type objects, but instantiating them has no effect on performance

[07:23] *** frost left
[07:46] *** quotable6 joined
[07:47] *** evalable6 joined
[07:48] *** greppable6 joined
[07:52] <Nicholas> https://docs.google.com/document/d/18CXhDb1ygxg-YXNBJNzfzZsDFosB5e6BfnXLlejd9l0/edit#heading=h.qln1vcxkfwqi -- Additionally, mimallocâ€™s layout of objects in the heap allows for finding all GC-tracked objects without maintaining an explicit list, which isnâ€™t possible to do efficiently with pymalloc or other allocators built on top of malloc.

[07:52] <Nicholas> I wonder if that property could be useful to us?

[08:34] *** frost joined
[08:46] *** benchable6 joined
[09:01] <MasterDuke> wow, running the mqtt test with LD_PRELOAD=/usr/lib/libmimalloc.so dropped the time from ~5.8s to ~5.5s

[09:10] <MasterDuke> and takes ~3s off of compiling CORE.c, ~2.5s of that from stage parse

[09:38] <MasterDuke> for Mondenkind's example, top three according to perf are:

[09:39] <MasterDuke>   11.14%  raku             [JIT] tid 297337    [.] raku-multi-plan(gen/moar/BOOTSTRAP/v6c.nqp:5852)

[09:39] <MasterDuke>    8.87%  raku             libmoar.so          [.] MVM_disp_program_run

[09:39] <MasterDuke>    6.93%  raku             libmoar.so          [.] MVMHash_at_key

[09:43] <MasterDuke> a profile says only 55% of the frames are jitted, 1289 GCs

[10:42] <lizmat> timo: selecting / deselecting for gist is now easier: just click on the message  :-)

[10:42] <tellable6> lizmat, I'll pass your message to timo

[10:47] *** nativecallable6 joined
[10:47] *** shareable6 joined
[11:04] *** timo joined
[11:07] <timo> thanks liz :)

[11:07] <tellable6> 2021-10-16T10:42:22Z #moarvm <lizmat> timo: selecting / deselecting for gist is now easier: just click on the message  :-)

[11:07] <lizmat> now to get the gist menu on the mobile version :-)

[11:10] <timo> i haven't read much about mimalloc yet but at first glance it looks like gc managed objects are just in a separate "arena", which might in effect be equivalent to moar's nursery and gen2

[12:02] *** reportable6 left
[12:03] <jnthnwrthngtn> http://ix.io/3BTg is pretty much that we don't have any strategy for handling megamorphic cases of multi dispatch yet.

[12:04] <jnthnwrthngtn> And the example is very well written to exploit that. :)

[12:28] *** frost left
[12:44] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1566: Add some context to capture arg exceptions

[12:44] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1566

[12:57] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1567: Add JIT templates causing bails in a spesh log of a megamorphic multi dispatch example

[12:57] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1567

[13:33] <MasterDuke> is it just me, or has the time for a spectest recently doubled? i'm pretty sure before new-disp was ~135s, sometime on new-disp it was ~175s (don't remember what it was immediately after the merge), and now it's ~355s

[13:46] <jnthnwrthngtn> Don't recall it being slower than the new-disp usual yesterday, at least. That sounds like the difference between an optimized and unoptimized MoarVM

[14:03] *** reportable6 joined
[14:15] <MasterDuke> my bash history would suggest it was *not* built with --optimize=0, but did a make clean and will rebuild everything to try again

[14:30] <MasterDuke> nope, still slow

[14:31] <MasterDuke> compiling rakudo was normal speed, but test and spectest were definitely slower

[15:02] <dogbert17> MasterDuke: I agree with you, there's been a recent regression

[15:03] <MasterDuke> interesting...

[15:09] <dogbert17> I'm looking ...

[15:18] *** evalable6 left
[15:18] *** linkable6 left
[15:22] <dogbert17> MasterDuke: do you see any difference if you revert https://github.com/rakudo/rakudo/commit/33296d406511557a2b6fec17cdb822da9c1bc934 ?

[15:28] <MasterDuke> dogbert17++!!

[15:29] <MasterDuke> yep. would not have thought that one to be the cause

[16:21] *** evalable6 joined
[17:21] *** evalable6 left
[17:21] *** linkable6 joined
[17:40] <lizmat> fwiw, I think we need to revert that commit to figure out why it is causing slowdown, so it won't be in the 2021.10 release

[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[19:23] *** linkable6 left
[21:25] *** linkable6 joined
[22:23] *** evalable6 joined
