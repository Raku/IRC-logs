[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:34] *** frost joined
[01:01] *** CaCode_ joined
[01:04] *** CaCode left
[03:29] *** discord-raku-bot left
[03:29] *** gfldex left
[03:31] *** gfldex joined
[03:49] *** evalable6 joined
[05:51] *** CaCode_ left
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:11] *** CaCode joined
[07:06] <nine> MasterDuke: I've had similar issues when JITing dispatch ops. You need to store the pointer in a local MVMuint64 variable and then use that in the assembly, like I did here: https://github.com/MoarVM/MoarVM/blob/52c4a6d753e9d6fb79a7a9f7bd501d8d2062a758/src/jit/x64/emit.dasc#L3191
[07:33] *** evalable6 left
[07:33] *** linkable6 left
[07:35] *** evalable6 joined
[07:54] *** CaCode_ joined
[07:56] *** CaCode- joined
[07:57] *** CaCode left
[07:59] *** CaCode_ left
[08:08] <MasterDuke> nine: ah, but i am! https://github.com/MoarVM/MoarVM/pull/1582/files#diff-236a42ca7a363b98d544a6b0def21fe522adeb091ec5474c0590251bdc1993acR1688-R1690
[08:11] <nine> MasterDuke: no, you're not. You are casting in the assembly instruction
[08:12] <MasterDuke> oh. interesting. because there are a bunch of other places that do that too...
[08:13] <nine> Maybe that's not the problem anyway
[08:13] <nine> It's not like I really understand these details. I arrived at the code empirically :)
[08:15] <MasterDuke> well, i'll certainly try switching to see if that changes anything. bit easier to test right now with this windows vm spun up, but wow, i haven't used windbg in forever and am not very proficient in it
[08:21] <MasterDuke> nope, same crash
[08:21] <nine> :/
[08:34] *** linkable6 joined
[09:34] *** linkable6 left
[09:34] *** evalable6 left
[09:36] *** evalable6 joined
[09:54] <nine> 7.823s by using an IterationBuffer instead of Array and micro optimizations like using a local variable to safe repeated lookup of the same attribute. Yes accessing an attribute is very cheap, but we then have to also apply the same guards we've checked before
[09:55] <nine> And we can't do anything about this in spesh because multi threading means that the attribute can indeed change between those accesses
[09:57] <jnthnwrthngtn> moarning o/
[09:57] <lizmat> nine++  jnthnwrthngtn o/
[09:57] <lizmat> .oO( JIT greeting )
[10:01] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1582 updated to just use jg_append_call_c, which does seem to work
[10:03] <nine> MasterDuke: now that I see it, is hll_name actually a stable pointer, i.e. always allocated in gen2?
[10:07] <MasterDuke> i think so https://github.com/MoarVM/MoarVM/blob/master/src/core/bytecode.c#L995-L1037
[10:08] <nine> MasterDuke: one can side-step that question by noticing that an MVMCompUnit doesn't only have an hll_name, but also an hll_config pointer. So we could actually use that with a to be written MVM_hll_sym_get_from_config
[10:09] <nine> That would avoid a costly lookup by hll name (which requires taking a lock)
[10:10] <nine> Oh, no, we can't. The symbols are not part of the hll config, but stored in a different nested hash
[10:29] <MasterDuke> CI is clean, and it's (very slowly) working its way through a rakudo spectest in my vm
[10:35] <nine> Would be nice to find out what the issue is with these JITed calls on Windows
[10:35] *** linkable6 joined
[10:38] <MasterDuke> i agree, but that's way above my paygrade
[10:39] <nine> only if you give up :)
[10:43] <MasterDuke> heh. it's also an -Ofun consideration. i'm not finding developing/debugging in this windows vm the highlight of my days
[10:45] <nine> That I can understand extremely well
[11:30] *** Altai-man joined
[11:30] *** squashable6 left
[11:32] *** squashable6 joined
[11:38] *** squashable6 left
[11:39] *** squashable6 joined
[11:39] <nine> MasterDuke: oh, I may have one more thing to try. You were using call &MVM_hll_sym_get, but everywhere else we call function pointers with callp instead of call
[11:41] <nine> Well, not everywhere. But it's only MVM_OP_newtype and MVM_OP_newmixintype which violate this and they don't sound like terribly hot ops, so we may just have been lucky so far.
[11:41] <nine> And they are very recent as well
[11:51] <MasterDuke> hmmm, i'll give that a try
[11:52] <nine> ++MasterDuke
[11:54] <MasterDuke> somewhat off topic, but wow, we have a ton of failing spectests on windows
[12:00] <ugexe> https://github.com/Raku/roast/issues/504
[12:00] <ugexe> might give some insight into what you can safely ignore
[12:01] <MasterDuke> ugexe++ i hadn't seen that before
[12:02] *** reportable6 left
[12:03] <MasterDuke> nine++ looks like call vs callp might be it
[12:03] *** reportable6 joined
[12:10] <MasterDuke> i think i'll leave the PR as is because it means less hand-written asm, but i'll change to two we have now and i'm going to go back and look at that PR from a while ago that had some randomly failing
[12:35] *** discord-raku-bot joined
[12:58] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1583: Use callp instead of call in jit of new(mixin)type
[12:58] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1583
[13:00] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1584: Another attempt at jitting some not so common ops that are still seen bailing in a spesh log
[13:00] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1584
[13:30] <Geth> ¦ MoarVM: ba03cb2e5e | (Daniel Green)++ | src/jit/x64/emit.dasc
[13:30] <Geth> ¦ MoarVM: Use callp instead of call in jit of new(mixin)type
[13:30] <Geth> ¦ MoarVM: 
[13:30] <Geth> ¦ MoarVM: Callp should be used with function pointers, but we've just been lucky
[13:30] <Geth> ¦ MoarVM: so far (probably because these aren't very hot ops).
[13:30] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ba03cb2e5e
[13:30] <Geth> ¦ MoarVM: af2f79a087 | MasterDuke17++ (committed using GitHub Web editor) | src/jit/x64/emit.dasc
[13:30] <Geth> ¦ MoarVM: Merge pull request #1583 from MasterDuke17/fix_lego_jit_new(mixin)type_implementations
[13:30] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/af2f79a087
[13:35] *** evalable6 left
[13:35] *** linkable6 left
[13:40] <[Coke]> (failing windows spectests) oops
[13:41] * [Coke] kicks off a spectest on a recent build.
[13:51] <Geth> ¦ MoarVM: 4c3f4cde46 | (Daniel Green)++ | src/jit/graph.c
[13:51] <Geth> ¦ MoarVM: Lego JIT of getcurhllsym
[13:51] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4c3f4cde46
[13:51] <Geth> ¦ MoarVM: 51bff712c2 | MasterDuke17++ (committed using GitHub Web editor) | src/jit/graph.c
[13:51] <Geth> ¦ MoarVM: Merge pull request #1582 from MasterDuke17/jit_getcurhllsym
[13:51] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/51bff712c2
[13:58] <[Coke]> MasterDuke: it's slow, but only a single failure so far.
[13:59] <MasterDuke> how are in?
[13:59] <MasterDuke> *far
[14:32] <[Coke]> ... and it hug.
[14:32] <[Coke]> *hung
[14:32] <[Coke]> last displayed is S17-procasync\encodingt
[14:32] <[Coke]> has a few failures before that.
[14:33] <[Coke]> redoing with TEST_JOBS=1
[14:39] <japhb> So what's the reason for callp?
[14:50] <timo> now that we changed how the callsite intern cache is accessed (i.e. less locking) maybe i should try that branch again that tries to find an existing interned callsite for a given callsite and an operation on it faster than just going through the interning process
[14:50] <timo> not sure if there's a reason to believe it would be faster now
[14:53] <timo> the "replace one existing argument with a different value of compatible type" system call could be A Thing though. it doesn't need to create a new callsite, after all!
[14:56] <jnthnwrthngtn> Yeah, that could be common enough to be worth the special case.
[14:56] <timo> i see one spot in nqp's dispatchers where it looks usable; that's in nqp-multi
[14:59] <jnthnwrthngtn> I think the Rakudo one that replaces a Scalar container with the value that was in it, it'd also be useful
[14:59] <jnthnwrthngtn> Also where we replace a code object with the bytecode handle read out of it
[14:59] <timo> i'll base it on the insert arg rather than the insert arg literal ones, right?
[14:59] <timo> yeah, for those two cases definitely
[15:01] <jnthnwrthngtn> Yeah, that's probably more useful
[15:01] <jnthnwrthngtn> Although we could easily find we want both forms
[15:03] <timo> will be a SMOP :)
[15:06] <MasterDuke> interesting. setboolspec and settypecache are two of the few remaining bails, both are the only places in interp.c that call MVM_malloc
[15:09] <jnthnwrthngtn> MasterDuke: Extract them to functions, I'd say
[15:09] <timo> i now realize: say we have $cap with $a, $b, $c, and first we replace-arg $x, 1 and then we drop-arg 1, we'd end up with the same capture in our little tree, except the entry already exists from using the drop-one. we'd have skipped creating the callsite for that, though, as that's what we're making replace-arg for anyway
[15:10] <timo> so there'd have to be a kind of strategy for merging here; if the capture entry is NULL, overwrite it with what we just generated
[15:10] <timo> but how do we actually recognize this is the case ...
[15:10] <MasterDuke> jnthnwrthngtn: k
[15:11] <timo> alternatively: that's a DIHWIDT and yu should have done it the other way around if you knew you were going to need the intermediate one
[15:31] *** patrickb joined
[15:36] *** evalable6 joined
[15:36] *** linkable6 joined
[15:36] <timo> actually, nqp could also use replace-arg for the case of nqp-call where $is-regex, however, it would want to insert a literal-obj arg rather than just a regular arg
[15:37] <timo> (if the code is a constant)
[15:37] <timo> (i wonder how often that isn't the case tho, hmm.)
[15:38] <timo> oh, that same shape is in a couple more of the branches of nqp-call
[15:42] *** Altai-man left
[15:53] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: bcdef5ee74 | (Timo Paulssen)++ | 5 files
[15:53] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: implement dispatcher-replace-arg syscall
[15:53] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: 
[15:53] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: can save allocating one capture object when a drop-arg is immediately
[15:53] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: followed by an insert-arg.
[15:53] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: review: https://github.com/MoarVM/MoarVM/commit/bcdef5ee74
[15:54] <timo> this has an nqp branch as well, but compilation fails very, very early in nqp build
[15:54] <timo> can't check it out more closely right away, maybe someone else can have a look
[16:01] <timo> i assume there should also be a check for the callsite being interned or not so it can be cloned for the new capture when replacing, to get the lifetime right
[16:05] <[Coke]> TEST_JOBS=1 I'm up to S26...
[16:05] <[Coke]> MasterDuke: you have a list of failed tests somewhere? I'll throw these in a gist at least
[16:05] <MasterDuke> https://github.com/Raku/roast/issues/504
[16:08] *** patrickz joined
[16:08] *** patrickb left
[16:48] <[Coke]> MasterDuke: https://gist.github.com/coke/f047e704d51becfd7695dbd1fdee2e4d
[16:49] <[Coke]> that's with a monday-vintage build
[16:50] <MasterDuke> looks like some overlap with the stuff from before, but not perfectly
[16:51] <[Coke]> Right
[16:51] <[Coke]> each of us has stuff that passed for the other
[16:56] <Geth> ¦ MoarVM/new-disp-nativecall: 493a80ed20 | (Stefan Seifert)++ | 17 files
[16:56] <Geth> ¦ MoarVM/new-disp-nativecall: Remove obsolete native call JIT implementation based on invoke protocol
[16:56] <Geth> ¦ MoarVM/new-disp-nativecall: review: https://github.com/MoarVM/MoarVM/commit/493a80ed20
[16:56] <Geth> ¦ MoarVM/new-disp-nativecall: 731da66b27 | (Stefan Seifert)++ | 11 files
[16:56] <Geth> ¦ MoarVM/new-disp-nativecall: Remove old invoke protocol
[16:56] <Geth> ¦ MoarVM/new-disp-nativecall: review: https://github.com/MoarVM/MoarVM/commit/731da66b27
[17:03] <Geth> ¦ MoarVM/new-disp-nativecall: 0462e6e9c5 | (Stefan Seifert)++ | 12 files
[17:03] <Geth> ¦ MoarVM/new-disp-nativecall: Remove old invoke protocol
[17:03] <Geth> ¦ MoarVM/new-disp-nativecall: review: https://github.com/MoarVM/MoarVM/commit/0462e6e9c5
[17:03] <nine> jnthnwrthngtn: don't really know what to write about ^^^. 
[17:15] *** patrickz left
[17:19] <jnthnwrthngtn> nine: Perhaps something like "Remove leftovers from the previous calling conventions, now that everything using them has been eliminated."
[17:20] <jnthnwrthngtn> Also, yay, 2 pointers smaller frames :D
[17:29] <jnthnwrthngtn> There's a further cleanup too: https://github.com/MoarVM/MoarVM/blob/1f9861eea7868280afee86af6463120754435878/src/core/frame.c#L47
[17:29] <jnthnwrthngtn> That `+ static_frame_body->cu->body.max_callsite_size)` can go away (which will mean we have smaller work areas too :))
[17:29] <jnthnwrthngtn> And this is probably the only reason we have a max_callsite_size field, so it likely also can go away
[17:40] *** patrickb joined
[17:42] <Geth> ¦ MoarVM/new-disp-nativecall: d363f14d1d | (Stefan Seifert)++ | 16 files
[17:42] <Geth> ¦ MoarVM/new-disp-nativecall: Remove old invoke protocol
[17:42] <Geth> ¦ MoarVM/new-disp-nativecall: 
[17:42] <Geth> ¦ MoarVM/new-disp-nativecall: Remove leftovers from the previous calling conventions, now that everything
[17:42] <Geth> ¦ MoarVM/new-disp-nativecall: using them has been eliminated.
[17:42] <Geth> ¦ MoarVM/new-disp-nativecall: review: https://github.com/MoarVM/MoarVM/commit/d363f14d1d
[17:42] * nine likes removing stuff
[17:44] <lizmat> chainsaw time!
[17:44] <lizmat> so I was looking at "foobarbaz".subst("x",:g) for ^10000
[17:45] <lizmat> and about 45% of time is spent in the Cool.subst proto
[17:45] <lizmat> which consists of:         $/ := nqp::getlexcaller('$/');
[17:45] <lizmat>         {*}
[17:46] <lizmat> which is especially a pity since that code doesn't actually do anything with regexes
[17:47] <lizmat> or set $/
[17:54] <timo> looks like discord messages aren't making it over to here
[17:57] <lizmat> I thought only #raku was being bridged ?
[17:58] *** patrickb left
[18:00] <lizmat> m: my multi method rinse(Str:D:) { "" }; say "foobarbaz".rinse;
[18:00] <camelia> rakudo-moar 4fece6137: OUTPUT: «No such method 'rinse' for invocant of type 'Str'.  Did you mean␤'rindex'?␤  in block <unit> at <tmp> line 1␤␤»
[18:01] <lizmat> I sorta hoped that, now that method caching is done at the invocation site, that this would just work  :-)
[18:03] *** reportable6 left
[18:04] *** reportable6 joined
[18:10] <nine> Oh nice! Looks like new-disp fulfilled my hopes that multi dispatch with constant args (like multi foo(1) { }) will be as fast as dispatch on types. Let's me get rid of this workaround: https://github.com/niner/Inline-Perl5/blob/master/lib/Inline/Perl5.pm6#L252
[18:12] <timo> there's a check in emit_args_ops that should have exploded given the new structure a capture path may have, so it's not making it that far yet it seems like
[18:16] <lizmat> Sometime I wonder whether we should introduce a IterationBuffer.new that would take positional args
[18:37] <lizmat> looks like it could make that piece of code about 2x as fast
[18:37] <lizmat> PR coming up
[18:51] <jnthnwrthngtn> lizmat: Is that proto actually required for correctness any more?
[18:52] <lizmat> you mean the Cool.subst one?
[18:52] <lizmat> I think so  :-(
[18:52] <jnthnwrthngtn> lizmat: Under the previous dispatch model a proto was invoked on uncached calls to prime the cache, so one had to defensively assume that it would be.
[18:53] <jnthnwrthngtn> lizmat: Under new-disp, a simple proto is never invoked, no similar defenses ain't needed
[18:53] <jnthnwrthngtn> There's a high chance the $/ trickery there is only working around the pre-new-disp semantics
[18:53] <lizmat> so you mean the getlexcaller() stuff can go ?
[18:53] <lizmat> that would be ... big!
[18:54] <jnthnwrthngtn> Yes, so the proto can become just a normal onlystar one.
[18:54] <lizmat> ok, lemme try that and see what breaks  :-)
[18:54] <jnthnwrthngtn> Worth a try; I may be missing something but I think it maybe just goes away. :)
[18:54] <jnthnwrthngtn> What is the signature?
[18:54] <jnthnwrthngtn> Just | ?
[18:54] <lizmat> yup
[18:55] <jnthnwrthngtn> Yeah, that will satisfy the "simple proto" rule
[18:55] * lizmat builds and runs a spectest
[18:58] <jnthnwrthngtn> If it passes and helps perf, may be worth an audit for similar cases.
[19:00] <jnthnwrthngtn> BTW, did you see a slight spectest time reduction after the last bump?
[19:00] <lizmat> yeah... I will  :-)
[19:00] <lizmat> you betcha!
[19:02] <MasterDuke> speaking of PRs, any objection to merging https://github.com/MoarVM/MoarVM/pull/1584 ? these were the ones that had unexplained windows failures before, but nine++ noticed i should have been using callp instead of call with the function pointers and now they look fine
[19:03] <jnthnwrthngtn> It was pointed out to be that test-t also reached a new low :)
[19:03] <jnthnwrthngtn> Uh, that sounds less positive than it is... :D
[19:03] <MasterDuke> but less positive is good in this case...
[19:04] *** evalable6 left
[19:04] *** linkable6 left
[19:04] <lizmat> spectest is clean, yay!   
[19:04] <MasterDuke> though going negative might mean rakudo is overfitting its optimizations for that particular benchmark...
[19:04] <jnthnwrthngtn> lizmat: And...is it a speedup, given the thing that took 45% of the time is gone? :)
[19:05] <lizmat> lemme double check that
[19:05] *** evalable6 joined
[19:06] *** linkable6 joined
[19:07] <jnthnwrthngtn> MasterDuke: Not sure there's a massive benefit from inlining what the interpreter does vs. moving the logic out of interp.c into functions and calling them
[19:07] <jnthnwrthngtn> (The latter being easier maint)
[19:09] <MasterDuke> ok, that's a pretty simply change
[19:09] <jnthnwrthngtn> It's also lower risk (as in, we can trivially reason that the function call in the JIT is correct)
[19:09] <jnthnwrthngtn> (And then the function is just the C code we already had)
[19:09] <MasterDuke> will do that after i finish saving the earth from these aliens that have invaded black mesa
[19:10] <jnthnwrthngtn> Have fun :)
[19:10] <jnthnwrthngtn> Talking of having fun, I'll be away from tomorrow until mid-Monday.
[19:11] <lizmat> .subst now up to 1.9x as fast
[19:12] <lizmat> that's for not finding a string in a string  :-)
[19:14] <lizmat> https://github.com/rakudo/rakudo/commit/0dae67a60d
[19:15] <lizmat> going after the other ones now
[19:16] <jnthnwrthngtn> That's not at all bad :)
[19:16] <jnthnwrthngtn> Deleted code is optimized code
[19:17] <lizmat> .match is another one  :-)
[19:30] <lizmat> jnthnwrthngtn: any idea what $/ := nqp::getlexcaller('$/'); is doing in sub callwith and sub nextwith ??
[19:30] <lizmat> and callsame ?
[19:30] <lizmat> and nextsame ?
[19:30] <lizmat> and samewith ?
[19:31] <lizmat> I guess just in case it's needed ?
[19:31] <jnthnwrthngtn> lizmat: I'd guess so the callsame doesn't hide a $/ that was in scope in the thing that used callsame
[19:32] <timo> oh the nqp build looks pretty good
[19:32] <jnthnwrthngtn> lizmat: Those probably have a more user-visible effect than the ones you are removing
[19:33] <timo> tests pass as well
[19:34] <nine> jnthnwrthngtn: raku-meth-call-mega doesn't have to guard on the invokee because raku-meth-call already did that, right?
[19:35] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: 0a5b37a17d | (Timo Paulssen)++ | 5 files
[19:35] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: implement dispatcher-replace-arg syscall
[19:35] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: 
[19:35] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: can save allocating one capture object when a drop-arg is immediately
[19:35] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: followed by an insert-arg.
[19:35] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: review: https://github.com/MoarVM/MoarVM/commit/0a5b37a17d
[19:35] <nine> No, that's not it. It just adds the guards later
[19:35] <timo> this fixes the syscall, with the branch from nqp, it already works for the cases we have
[19:36] <jnthnwrthngtn> nine: The *point* is not to guard on the invocant
[19:36] <jnthnwrthngtn> ah, you said invokee
[19:37] <jnthnwrthngtn> But I don't think it guards on that either, though probably on its type (e.g. Method)
[19:38] <timo> i find it difficult to come up with tests for the argument shifting ops
[19:38] <nine> Ok, since I may even use the words wrong, better ask directly: we're making decisions based on nqp::how_nd(nqp::captureposarg($capture, 0)). What makes this safe?
[19:40] <jnthnwrthngtn> We read the flat method cache attribute out of the HOW. That establishes a type/concreteness guard on the HOW.
[19:40] <jnthnwrthngtn> The principle is that if we have a lot of variance of type at the value level, we try and look for stability at the meta level instead.
[19:41] <jnthnwrthngtn> We are coupling to ClassHOW as a result.
[19:41] <nine> Ah, yes, the implicit guards. Certainly catching a lot of errors but are easy to forget :)
[19:41] <jnthnwrthngtn> That's OK because we own it.
[19:42] <jnthnwrthngtn> They are not only good for correctness, but also save us the cost of multiple syscalls :)
[19:44] <nine> What about the else branch? That's using the $how as well but doesn't track the how's attribute
[19:47] <jnthnwrthngtn> The else branch of raku-meth-call-mega?
[19:47] <nine> yes
[19:47] <jnthnwrthngtn> There's two cases there. The second one throws an exception, which means we don't install a dispatch program.
[19:47] <jnthnwrthngtn> The first one does `nqp::dispatch('boot-syscall', 'dispatcher-do-not-install');`
[19:48] <jnthnwrthngtn> Since we're not installing the dispatch program, then guards don't matter.
[19:50] <jnthnwrthngtn> There may be a better strategy for the first branch than "just end up in the dispatcher again". It probably means we have the double-whammy of a callsite seeing numerous types and method names, combined with a FALLBACK or similar
[19:51] <timo> now how do i get a nice measurement that tells me the replace-arg thing helped
[19:51] <jnthnwrthngtn> timo: --profile-compile -e '' and look at BOOTCapture allocation counts
[19:52] <timo> oh, do these actually show up in the profile?
[19:52] <jnthnwrthngtn> Yes.
[19:52] <timo> i wasn't sure if they were getting prof_allocate instructions generated for them somehow
[19:53] <jnthnwrthngtn> I think we always place them after dispatch_o (as we did with invoke_o)
[19:53] <nine> Would it make sense to add found methods to the $!cached_all_methods_table?
[19:56] <timo> you said you were running --profile-compile on the core setting? is that a good idea to try?
[19:57] <jnthnwrthngtn> timo: --profile-complie -e '' (the empty program), which is enough to warm a bunch of callsites anyway
[19:58] <jnthnwrthngtn> nine: Certainly not in-place add (hashes ain't threadsafe), but clone + add maybe
[19:58] <jnthnwrthngtn> nine: I'm not sure what reasonable situation it would happen in, though
[19:58] <jnthnwrthngtn> And the copying means it's a costly thing to do if it gets out of hand
[20:00] <timo> oh, ok
[20:00] <nine> I guess we could leave that to find_method anyway
[20:02] <timo> BOOTCapture 8645, BOOTTracked 5269
[20:03] <timo> +/- 1
[20:03] <timo> cool, i literally only need to recompile nqp and rakudo! ... damn, that's almost everything :D
[20:06] *** evalable6 left
[20:06] *** linkable6 left
[20:07] *** evalable6 joined
[20:07] *** kjp left
[20:09] *** linkable6 joined
[20:09] *** kjp joined
[20:09] <lizmat> jnthnwrthngtn : with the .subst changes, cro::webapp all of a sudden feels a lot faster :-)
[20:10] <MasterDuke> sadly, building nqp+rakudo takes the same time as just building moarvm on windows. msvc is slow
[20:11] <timo> i was doing something wrong and had to recompile many times
[20:11] <MasterDuke> btw, i just tried doing a --profile-compile of building CORE.c earlier today and got the old behavior of the build completing, but no message and no profile
[20:12] <timo> 20 allocations less!
[20:13] <MasterDuke> hm, looks like it might have been the oom killer, but whey didn't it tell me it was doing so
[20:18] <lizmat> timo: per ?   or total?
[20:19] <timo> total
[20:19] <timo> for -e ''
[20:19] <lizmat> ah... well, on a total of?
[20:19] <timo> m: say 8645 * 100 / 8665
[20:19] <camelia> rakudo-moar d619e026f: OUTPUT: «99.769186␤»
[20:19] <MasterDuke> what about for something like that mqtt test?
[20:19] <timo> about a third of one percent :P
[20:20] <lizmat> well, every little bit helps!
[20:21] <nine> 2021-10-27T15:03:41.8789620Z Type check failed for return value; expected CompUnit:D but got Method (method sink (Mu: *%_...)
[20:21] <nine> Looks kinda bad: https://dev.azure.com/MoarVM/6b7ef196-3f6c-40c1-93b8-6350dcf162b2/_apis/build/builds/799/logs/124
[20:22] <nine> 2021-10-27T15:25:53.1335746Z No such method 'defined' for invocant of type 'NQPRoutine' in https://dev.azure.com/MoarVM/6b7ef196-3f6c-40c1-93b8-6350dcf162b2/_apis/build/builds/799/logs/212
[20:22] <MasterDuke> random java error/backtrace from comma https://gist.github.com/MasterDuke17/76bd2f8f747006907960c1a32c8cde2d
[20:23] *** kjp left
[20:23] <jnthnwrthngtn> nine: Which PR do those go with?
[20:23] <nine> jnthnwrthngtn: those messages are from CI runs of "Migrate special return to callstack and simplify return handling". Do you think it's likely to be caused by your changes or do they sound like pre-existing bugs?
[20:24] <lizmat> https://logs.liz.nl/moarvm/live.html now runs on Rakudo master
[20:25] <timo> well, now that i have code for the "replace arg with tracked value", i can relatively easily make "replace arg with literal value" in the same way, and that would go in more spots in the nqp dispatchers
[20:25] *** kjp joined
[20:25] <timo> and after that, the rakudo dispatchers would be next
[20:25] *** Geth left
[20:25] *** Geth joined
[20:26] <jnthnwrthngtn> nine: It whiffs of deopt bug, and I'm not immediately sure how I might have caused one of those. It's possible.
[20:26] *** RakuIRCLogger left
[20:26] *** RakuIRCLogger joined
[20:26] <lizmat> Geth and the logger now also running on Rakudo master
[20:26] <jnthnwrthngtn> nine: Generally when working on it I either broke things and got massive explosions all over because the things I was touching are heavily used...or things worked.
[20:27] *** TempIRCLogger left
[20:27] <jnthnwrthngtn> It is suspect we're only seeing them with that PR. 
[20:28] *** TempIRCLogger joined
[20:30] <jnthnwrthngtn> I can look into it after my long weekend away. Too tired to do so now.
[20:31] *** kjp left
[20:33] <jnthnwrthngtn> lizmat: I was about to ask how it helped them, then remembered...escaping :)
[20:33] *** kjp joined
[20:33] <lizmat> yup
[20:34] <jnthnwrthngtn> Always nice when perf improvements show up so nicely in something realistic :)
[20:34] <lizmat> indeed.... and such a simple change  :-)
[20:34] <lizmat> I think test-t will also benefit from these changes :-)
[20:34] <nine> jnthnwrthngtn: have a nice time off!
[20:38] <jnthnwrthngtn> lizmat: I susepct there'll be a long tail of not-immediately-obvious new-disp payoffs :)
[20:38] <jnthnwrthngtn> A further test-t improvement would be welcome
[20:38] <jnthnwrthngtn> nine: Thanks!
[20:49] <timo> m: say 7117 * 100 / 8665
[20:49] <camelia> rakudo-moar d619e026f: OUTPUT: «82.135026␤»
[20:49] <timo> now that's more promising
[20:51] <timo> it's not really got a good place to go, but putting a "there was this much in the nursery already before starting the profile" and "there was this much in the nursery after stopping the profile" could be interesting
[20:54] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: 4cdce310f3 | (Timo Paulssen)++ | 3 files
[20:54] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: implement replace-arg-literal-obj
[20:54] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: 
[20:54] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: for when you want to replace an argument with a literal object
[20:54] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: rather than a tracked value.
[20:54] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: review: https://github.com/MoarVM/MoarVM/commit/4cdce310f3
[20:57] <Geth> ¦ MoarVM: timo++ created pull request #1585: Dispatcher replace arg syscall
[20:57] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1585
[21:33] *** CaCode_ joined
[21:36] *** CaCode- left
[21:38] *** CaCode- joined
[21:41] *** CaCode_ left
[22:33] *** kjp left
[22:35] *** kjp joined
[22:49] *** dogbert17 joined
[22:49] *** dogbert11 left
[22:56] *** dogbert17 left
[23:03] *** dogbert17 joined
[23:09] *** dogbert17 left
[23:29] <timo> m: say (1500 * 40) / 1024
[23:29] <camelia> rakudo-moar d619e026f: OUTPUT: «58.59375␤»
[23:29] <timo> m: say ((1500 * 40) / 1024) / (4 * 1024 * 1024)
[23:29] <camelia> rakudo-moar d619e026f: OUTPUT: «0.0000139698␤»
[23:30] <timo> did i get the scales right? 1.5k less captures, which MVMCapture is 40 bytes big, is about 0.001% of a nursery fill?
[23:30] <timo> m: say 100 * ((1500 * 40) / 1024) / (4 * 1024 * 1024)
[23:30] <camelia> rakudo-moar d619e026f: OUTPUT: «0.001396984␤»
