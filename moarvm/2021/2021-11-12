[00:02] *** reportable6 left
[00:13] *** CaCode left
[00:13] *** CaCode joined
[00:19] *** patrickb left
[02:02] *** CaCode_ joined
[02:03] *** reportable6 joined
[02:05] *** CaCode left
[03:16] *** frost joined
[04:14] *** CaCode- joined
[04:16] *** CaCode_ left
[04:43] *** gfldex left
[04:48] *** gfldex joined
[05:48] *** bloatable6 left
[05:48] *** greppable6 left
[05:48] *** statisfiable6 left
[05:48] *** notable6 left
[05:48] *** nativecallable6 left
[05:48] *** bisectable6 left
[05:48] *** benchable6 left
[05:48] *** evalable6 left
[05:48] *** committable6 left
[05:48] *** coverable6 left
[05:48] *** linkable6 left
[05:48] *** committable6 joined
[05:49] *** bisectable6 joined
[05:49] *** coverable6 joined
[05:50] *** nativecallable6 joined
[05:50] *** greppable6 joined
[05:50] *** evalable6 joined
[05:51] *** statisfiable6 joined
[06:02] *** reportable6 left
[06:50] *** linkable6 joined
[06:50] *** benchable6 joined
[07:03] *** reportable6 joined
[08:23] *** quotable6 left
[08:23] *** statisfiable6 left
[08:23] *** reportable6 left
[08:23] *** greppable6 left
[08:23] *** linkable6 left
[08:23] *** coverable6 left
[08:23] *** benchable6 left
[08:23] *** shareable6 left
[08:23] *** nativecallable6 left
[08:23] *** squashable6 left
[08:23] *** evalable6 left
[08:23] *** sourceable6 left
[08:23] *** releasable6 left
[08:23] *** unicodable6 left
[08:23] *** committable6 left
[08:23] *** bisectable6 left
[08:23] *** tellable6 left
[08:24] *** squashable6 joined
[08:25] *** greppable6 joined
[08:26] *** bisectable6 joined
[08:26] *** coverable6 joined
[08:26] *** quotable6 joined
[08:26] *** releasable6 joined
[08:53] <Nicholas> good *able6, #moarvm

[08:58] *** nebuchadnezzar left
[09:12] <lizmat>  :-)

[09:23] *** committable6 joined
[09:25] *** nativecallable6 joined
[09:25] *** shareable6 joined
[09:26] *** benchable6 joined
[09:26] *** evalable6 joined
[09:51] *** bloatable6 joined
[10:48] *** notable6 joined
[11:12] *** Altai-man joined
[11:14] <jnthnwrthngtn> o/

[11:17] <lizmat> jnthnwrthngtn  o/

[11:17] * lizmat is feeling a lot less under the weather than yesterday

[11:24] <Nicholas> \o

[11:25] *** statisfiable6 joined
[11:26] *** tellable6 joined
[11:26] *** sourceable6 joined
[11:36] <jnthnwrthngtn> Stomach better, brain still mushy.

[11:40] <nine> Well, progress

[11:43] <lizmat> m: class A { has uint32 $!foo = 0x0ffffffff; method bar() { say $!foo } }; A.new.bar    # meh

[11:43] <camelia> rakudo-moar 3d80bec7c: OUTPUT: ¬´-1‚ê§¬ª

[11:44] <lizmat> seems like native uint attributes lose their unsignedness

[11:44] <lizmat> m: class A { has uint8 $!foo = 0x0ff; method bar() { say $!foo } }; A.new.bar  # shorter

[11:44] <camelia> rakudo-moar 3d80bec7c: OUTPUT: ¬´-1‚ê§¬ª

[11:45] <jnthnwrthngtn> lizmat: Yeah, there's an issue for that

[11:45] <jnthnwrthngtn> Just got this:

[11:45] <jnthnwrthngtn> MoarVM oops: MVM_str_hash_entry_size called with a stale hashtable pointer

[11:45] <jnthnwrthngtn>    at gen/moar/Metamodel.nqp:4834  (/home/jnthn/dev/MoarVM/install/share/perl6/lib/Perl6/Metamodel.moarvm:enum_from_value)

[11:45] <jnthnwrthngtn>  from SETTING::src/core.c/Enumeration.pm6:54  (/home/jnthn/dev/MoarVM/install/share/perl6/runtime/CORE.c.setting.moarvm:FROM-VALUE)

[11:45] <jnthnwrthngtn> And I think I saw a Rakudo PR recently about this?

[11:46] <jnthnwrthngtn> Hah, yes! https://github.com/rakudo/rakudo/pull/4634

[11:49] *** Altai-man left
[12:04] *** reportable6 joined
[12:06] <jnthnwrthngtn> I'm so very glad to see all the QAST-y bits go away in NativeCall in https://github.com/rakudo/rakudo/pull/4629

[12:07] <jnthnwrthngtn> I was looking at it and thinking "oh no, this could be an annoying thing to have to migrate in RakuAST" and now we won't have do :)

[12:10] *** psydroid left
[12:10] *** AlexDaniel left
[12:21] <jnthnwrthngtn> OK, all new-disp nativecall PRs reviewed; nine++

[12:27] *** AlexDaniel joined
[12:33] <nine> Big thank you! Will probably fix the issues you pointed out tomorrow.

[12:33] *** psydroid joined
[12:35] <jnthnwrthngtn> Ah, https://github.com/MoarVM/MoarVM/pull/1581 is still to merge

[12:35] *** Kaipi left
[12:35] <jnthnwrthngtn> I'd really like to see it go in a week or so before the release

[12:36] *** Kaipi joined
[12:50] *** psydroid left
[12:51] *** AlexDaniel left
[12:54] <jnthnwrthngtn> An approve \o/

[12:54] <Geth> ¬¶ MoarVM/master: 19 commits pushed by (Jonathan Worthington)++

[12:54] <Geth> ¬¶ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/f27cdeaec82f...f8addda15faa

[12:54] <jnthnwrthngtn> And in it goes. :)

[12:54] <jnthnwrthngtn> inb4: yes, this is a good time for a bump :)

[12:54] <nine> As anticipated, having spent significant time on this PR when we were looking for those strange errors on CI has made reviewing it much quicker

[12:55] <jnthnwrthngtn> :)

[12:55] <lizmat> jnthnwrthngtn: do we need to merge something in NQP as well ?

[12:56] <lizmat> nine ? ^^ ?

[12:58] <nine> lizmat: no

[12:58] <lizmat> and not in rakudo either then, I assume

[12:59] <lizmat> hmm... so what got merged into MoarVM just now then?

[13:00] <lizmat> #1581 I guess ?

[13:03] <jnthnwrthngtn> lizmat: Yes

[13:04] <jnthnwrthngtn> It re-works how we handle returning and stack unwinding to full take advantage of the new callstack introduced in new-disp

[13:05] <jnthnwrthngtn> *fully

[13:05] <jnthnwrthngtn> Which allows various simplifications and thus a speedup

[13:05] *** Altai-man joined
[13:05] <jnthnwrthngtn> Also things using special return mechanism get to avoid malloc/free and just have state on the callstack instead, so there's a small win there also

[13:09] <nine> And this stuff becomes easier to understand as well. Instead of special cases and branches all over the frame handling code, the callstack tells the story of what should happen when. In a sense the callstack becomes its own program.

[13:24] *** linkable6 joined
[13:24] <lizmat> bumped

[13:26] <lizmat> fwiw, I got a wrong dependency messages just again

[13:27] <lizmat> nuked the lib/.precomp and it went away

[13:27] <lizmat> wonder whether we should provide a utility script to nuke all .precomp dirs

[13:28] <lizmat> also, no noticeable improvement of test-t on my machine

[13:29] * nine thinks what we need is fixes, not better workarounds

[13:30] <lizmat> last time I did a full .precomp nuke, it cleared about 1G in files

[13:30] <lizmat> so there's use of such a script in other cases as well  :-)

[13:31] <nine> Same happens here. But then, we're probably recompiling rakudo more often than others recompile their raku programs

[13:32] <lizmat> indeed  :-)

[13:39] <jnthnwrthngtn> lizmat: It's worth ~5% on a recursive fib benchmark (where the recursion implies loads of frame creation); ~2% or so is more likely on more typical applications.

[13:40] <jnthnwrthngtn> And on micro-benchmarks where we overwhelmingly inline stuff, it's worth nearly nothing

[13:40] <lizmat> yeah, I think the test-t benchmark is already pretty good at inlining

[13:41] <jnthnwrthngtn> I saw a slight spectest time improvement from it also

[13:45] * lizmat makes mental note to run one tonight

[13:48] *** Kaipi left
[13:48] *** Kaipi joined
[13:56] <lizmat> m: my $a = "42"; for ^1000000 { my int $b = $a.Int }; say now - INIT now

[13:56] <camelia> rakudo-moar fca63e6c0: OUTPUT: ¬´0.381197921‚ê§¬ª

[13:56] <lizmat> m: my $a = "42"; for ^1000000 { my int $b = my str $ = $a }; say now - INIT now

[13:56] <camelia> rakudo-moar fca63e6c0: OUTPUT: ¬´0.061885142‚ê§¬ª

[13:56] <lizmat> quite a difference eh?

[13:56] <jnthnwrthngtn> I'm not even sure the second of those should compile...

[13:58] <jnthnwrthngtn> m: my $a = "4.6"; say $a.Int; say (my int $ = my str $ = $a);

[13:58] <camelia> rakudo-moar fca63e6c0: OUTPUT: ¬´4‚ê§4‚ê§¬ª

[13:59] <lizmat> m: my $a = "4.6e0"; say $a.Int; say (my int $ = my str $ = $a);

[13:59] <camelia> rakudo-moar fca63e6c0: OUTPUT: ¬´4‚ê§4‚ê§¬ª

[14:00] <jnthnwrthngtn> m: my $a = ""; say $a.Int; say (my int $ = my str $ = $a);

[14:00] <camelia> rakudo-moar fca63e6c0: OUTPUT: ¬´0‚ê§0‚ê§¬ª

[14:01] <jnthnwrthngtn> m: my $a = " "; say $a.Int; say (my int $ = my str $ = $a);

[14:01] <camelia> rakudo-moar fca63e6c0: OUTPUT: ¬´0‚ê§0‚ê§¬ª

[14:01] *** frost left
[14:02] <jnthnwrthngtn> m: my $a = "?5"; say $a.Int; say (my int $ = my str $ = $a);

[14:02] <camelia> rakudo-moar fca63e6c0: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5?5' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:02] <jnthnwrthngtn> m: my $a = chr(8722) ~ "5"; say $a.Int; say (my int $ = my str $ = $a);

[14:02] <camelia> rakudo-moar fca63e6c0: OUTPUT: ¬´-5‚ê§Error encoding ASCII string: could not encode codepoint 8722‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:02] <jnthnwrthngtn> Ah, there's a difference :)

[14:25] *** unicodable6 joined
[16:23] <timo> i did not expect moarvm to become based on ROP, return-oriented programming :)

[16:51] *** linkable6 left
[16:53] *** linkable6 joined
[17:41] <dogbert17> MoarVM panic: Memory allocation failed; could not allocate 14391929568 bytes  # hmm

[17:54] <dogbert17> have a suspicion that this is somehow GC-related. Here's the gist https://gist.github.com/dogbert17/93fc8512fda91df90563d5ce49522baa

[18:02] *** reportable6 left
[18:03] <jnthnwrthngtn> #4  0x00007ffff7924e5f in MVM_spesh_alloc (tc=0x555555623ac0, g=0x7ffff3b491d0, bytes=16195990944) at src/spesh/graph.c:41

[18:03] <jnthnwrthngtn> #5  0x00007ffff793f20d in analyze_phi (tc=0x555555623ac0, g=0x7ffff3b491d0, ins=0x7ffff2cf374e) at src/spesh/optimize.c:2021

[18:03] <jnthnwrthngtn> That's a big phi...

[18:04] <jnthnwrthngtn> I'm guessing something accidentally goes negative or similar...

[18:07] <dogbert17> it's relatively easy to repro by setting the nursery size to ~50k and running: while MVM_SPESH_NODELAY=1 ./rakudo-m -Ilib t/spec/S32-num/complex.t; do :; done

[18:08] <dogbert17> sometimes it fails with 'MoarVM panic: Invalid owner in item added to GC worklist'

[18:23] *** Altai-man left
[18:38] <dogbert17> it's the kind of stuff Nine eats for breakfast :)

[18:38] *** CaCode- left
[18:39] *** CaCode- joined
[18:41] *** CaCode- left
[18:42] *** CaCode- joined
[18:42] *** CaCode- is now known as CaCode

[19:38] *** CaCode left
[20:16] *** nebuchadnezzar joined
[21:05] *** reportable6 joined
[21:47] *** TempIRCLogger joined
[21:49] *** colemanx joined
[21:52] *** colemanx left
[22:17] *** MasterDuke92 joined
[22:18] <MasterDuke92> is it just me, or is https://github.com/MoarVM/MoarVM/blob/master/src/strings/ascii.c#L136-L205 not really taking a substring like i would expect?

[22:19] <MasterDuke92> i.e., it doesn't start the string `start` num of graphemes in

[22:23] <MasterDuke92> looks like it happened here https://github.com/MoarVM/MoarVM/commit/6eaf6aad3393af33023e0e8346114bb7e4a27b37

[22:24] <MasterDuke92> jnthnwrthngtn: ^^^

[22:41] <timo> i don't think it skipped the beginning before that either?

[22:42] <timo> oh

[22:42] <timo> there it is

[22:43] <timo> do we actually ever use the function with a nonzero start value?

[22:46] <MasterDuke92> https://github.com/MoarVM/MoarVM/blob/master/src/strings/ops.c#L1759

[22:49] <MasterDuke92> and i came across it because i'm just trying something that passes a value for `start` to MVM_string_ascii_encode_substr and noticed it didn't seem to be doing anything

