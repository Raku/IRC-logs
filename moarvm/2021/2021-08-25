[00:02] *** reportable6 left
[01:02] *** releasable6 left
[01:02] *** bloatable6 left
[01:02] *** greppable6 left
[01:02] *** sourceable6 left
[01:02] *** committable6 left
[01:02] *** benchable6 left
[01:02] *** squashable6 left
[01:02] *** tellable6 left
[01:02] *** bisectable6 left
[01:02] *** coverable6 left
[01:02] *** nativecallable6 left
[01:02] *** unicodable6 left
[01:02] *** shareable6 left
[01:02] *** notable6 left
[01:02] *** evalable6 left
[01:02] *** linkable6 left
[01:02] *** statisfiable6 left
[01:02] *** quotable6 left
[01:03] *** greppable6 joined
[01:03] *** bisectable6 joined
[01:03] *** notable6 joined
[01:03] *** statisfiable6 joined
[01:04] *** releasable6 joined
[01:05] *** nativecallable6 joined
[01:05] *** quotable6 joined
[01:05] *** bloatable6 joined
[01:05] *** squashable6 joined
[01:05] *** shareable6 joined
[02:03] *** reportable6 joined
[02:04] *** coverable6 joined
[02:04] *** benchable6 joined
[02:04] *** evalable6 joined
[02:05] *** unicodable6 joined
[02:37] <vrurg> m: use nqp; my $*INVISIBLE := nqp::null(); say $*INVISIBLE;

[02:37] <camelia> rakudo-moar 9ce3fc3a6: OUTPUT: «Dynamic variable $*INVISIBLE not found␤  in block <unit> at <tmp> line 1␤␤»

[02:40] <vrurg> ^^^ unavoidable error because there is no way to distinguish a missing symbol from one bound to VMnull. In either case nqp::getlex* family returns VMnull.

[02:50] *** Util_ left
[04:04] *** committable6 joined
[05:03] *** tellable6 joined
[05:36] *** frost joined
[06:02] *** reportable6 left
[06:03] *** sourceable6 joined
[06:04] *** linkable6 joined
[07:01] *** dogbert17 joined
[07:02] *** dogbert11 left
[07:27] *** dogbert11 joined
[07:30] *** dogbert17 left
[08:22] <timo> probably the only way to make a dynamic variable inaccessible to callee frames?

[08:56] <Nicholas> good *, #moarvm 

[09:01] <nine> good comma, *!

[09:12] <MasterDuke> wow, new-disp leaks quite a bit according to valgrind

[09:13] <Nicholas> how much of this is the spesh thread?

[09:14] <MasterDuke> a bunch i think, lots of the output has translate_dispatch_program and MVM_spesh_disp_optimize in the backtrace

[09:15] <MasterDuke> tbh, i wasn't trying to check new-disp, i was looking for those hashes that are sticking around to put in a gist for you

[09:16] <Nicholas> I wasn't *sure* about this (haven't checked carefully) but I *thought* that at MoarVM exit nothing waits for the spesh thread, so whatever it was doing just gets dropped, instead of it gettign to finish and tidy up.

[09:17] <nine> Yes, spesh is only cleaned up with --full-cleanup

[09:17] <MasterDuke> fwiw, this was with --full-cleanup

[09:17] <Nicholas> and in turn, --full-cleanup sometimes seems to hit aborts or assertion failures (IIRC)

[09:17] <nine> Then it's legit

[09:17] <Nicholas> oh, righty

[09:20] *** dogbert17 joined
[09:21] <MasterDuke> and of course the only example i can find now is the one that segfaults during vm destruction, so can't use it

[09:23] *** dogbert11 left
[09:23] *** dogbert11 joined
[09:26] *** dogbert17 left
[09:28] *** dogbert17 joined
[09:30] *** dogbert11 left
[09:38] *** dogbert11 joined
[09:38] <jnthnwrthngtn> moarning o/

[09:41] *** dogbert17 left
[09:57] *** dogbert11 left
[09:57] *** dogbert17 joined
[10:46] <dogbert17> something is wrong when running t/02-rakudo/reproducible-builds.t with MVM_SPESH_NODELAY=1

[10:46] <dogbert17> No such method 'checksum' for invocant of type 'Any'

[10:46] <dogbert17>   in block <unit> at t/02-rakudo/reproducible-builds.t line 31

[10:46] <dogbert17> running with a small nursery leads to a SEGV

[10:47] <dogbert17> ==377319==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fe651c5273a bp 0x7fe64e211550 sp 0x7fe64e211370 T1)

[10:47] <dogbert17>     #0 0x7fe651c52739 in optimize_runbytecode src/spesh/optimize.c:1445

[10:47] <dogbert17>     #1 0x7fe651c551f0 in optimize_bb_switch src/spesh/optimize.c:2249

[11:03] *** reportable6 joined
[11:03] <jnthnwrthngtn> dogbert17: Hmm, what does line 1445 contain?

[11:05] <dogbert17>    1443     /* If the target static frame is not invoked or has no specializations,

[11:05] <dogbert17>    1444      * give up. */

[11:05] <dogbert17>    1445     if (target_sf->body.instrumentation_level != tc->instance->instrumentation_level)

[11:05] <dogbert17>    1446         return;

[11:06] <jnthnwrthngtn> huh, how can there be a null pointer, right above there's a check if target_sf is NULL and we return if so

[11:06] <dogbert17> perhaps I have messed something up, let me double check ...

[11:07] <jnthnwrthngtn> If you have it in the debugger, please p target_sf

[11:08] <Geth> ¦ MoarVM/new-disp: 04079e21e5 | (Jonathan Worthington)++ | 2 files

[11:08] <Geth> ¦ MoarVM/new-disp: Extract "is this a code handle" check

[11:08] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/04079e21e5

[11:08] <Geth> ¦ MoarVM/new-disp: 27f0a39d10 | (Jonathan Worthington)++ | 4 files

[11:08] <Geth> ¦ MoarVM/new-disp: Fill out mechanism for bytecode calls from C

[11:08] <Geth> ¦ MoarVM/new-disp: 

[11:08] <Geth> ¦ MoarVM/new-disp: So that we can start to migrate the final things away from the legacy

[11:08] <Geth> ¦ MoarVM/new-disp: invocation mechanism.

[11:08] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/27f0a39d10

[11:08] <Geth> ¦ MoarVM/new-disp: 72e129155b | (Jonathan Worthington)++ | src/6model/containers.c

[11:08] <Geth> ¦ MoarVM/new-disp: Migrate code_pair container spec to new convs

[11:08] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/72e129155b

[11:10] <jnthnwrthngtn> 25 ->invoke( left to go

[11:14] *** cognominal joined
[11:15] <MasterDuke> i guess tc or tc->instance could be NULL?

[11:15] <dogbert17> jnthnwrthngtn: if only it was so easy :) running gdb hangs the test, all threads are waiting for better times it seems

[11:16] *** cognominal_ left
[11:17] <dogbert17> in fact, this is starting to feel like something for nine, perhaps this is the same problem he started looking at yesterday

[11:17] <dogbert17> i.e. if MVM_SPESH_NODELAY=1 and the nursery is small then some tests suddenly fail to compile

[11:22] *** Kaiepi joined
[11:31] <jnthnwrthngtn> MasterDuke: If it is, something is incredibly hosed.

[11:31] <jnthnwrthngtn> I did touch runbytecode yesterday; I can quite imagine I broke something. But...I'm confused about this ASAN output ;)

[11:31] <jnthnwrthngtn> *:)

[11:43] <dogbert17> it is very strange, if I remove ASAN the SEGV is gone but we're left with a compilation error instead

[12:02] *** reportable6 left
[12:12] <Geth> ¦ MoarVM/new-disp: d701fee1da | (Jonathan Worthington)++ | src/6model/containers.c

[12:12] <Geth> ¦ MoarVM/new-disp: Migrate value/desc container to new convs

[12:12] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/d701fee1da

[12:56] *** MasterDuke left
[12:59] *** cognominal left
[13:01] <Geth> ¦ MoarVM/new-disp: 152ed1e2e5 | (Jonathan Worthington)++ | 3 files

[13:01] <Geth> ¦ MoarVM/new-disp: Migrate type parameterizer call to new convs

[13:01] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/152ed1e2e5

[13:01] <Geth> ¦ MoarVM/new-disp: 18cb9081f8 | (Jonathan Worthington)++ | 3 files

[13:01] <Geth> ¦ MoarVM/new-disp: Migrate bind error handler to new convs

[13:01] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/18cb9081f8

[13:01] <Geth> ¦ MoarVM/new-disp: 4d1320a0ac | (Jonathan Worthington)++ | 2 files

[13:01] <Geth> ¦ MoarVM/new-disp: Migrate thread start to new convs

[13:01] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/4d1320a0ac

[13:13] <dogbert17> jnthnwrthngtn: don't forget to grab a cup of coffee from time to time

[13:20] <jnthnwrthngtn> Think I did enough coffee today, the next cup will be tea :)

[13:21] <jnthnwrthngtn> dogbert17: btw, I think it might have been you who (years ago) suggested I try springbank whisky. Finally, while on vacation last week, I did so.

[13:22] <jnthnwrthngtn> (And it's good, so if it was you, thanks!)

[13:25] *** frost left
[13:27] *** cognominal joined
[13:39] <Geth> ¦ MoarVM/new-disp: e75a70d061 | (Jonathan Worthington)++ | 2 files

[13:39] <Geth> ¦ MoarVM/new-disp: Migrate continuation invokes to new convs

[13:39] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/e75a70d061

[13:40] <jnthnwrthngtn> Down to 15 uses of ->invoke(...) now, and 3 of them are in hll.c and nine++'s work on hllize moving over to the dispatcher should eliminate those

[13:56] <Geth> ¦ MoarVM/new-disp: 2cb4af1fda | (Jonathan Worthington)++ | 3 files

[13:56] <Geth> ¦ MoarVM/new-disp: Migrate exception invokes to new convs

[13:56] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/2cb4af1fda

[14:04] <jnthnwrthngtn> Ah, debugserver has a commented out usage, so that's easy :)

[14:14] <dogbert17> jnthnwrthngtn: I don't remember if that suggestion came from me but I do like Springbank. In fact, I have some 15yo left in a bottle. I bought it in a small town named Bowmore :)

[14:30] <Geth> ¦ MoarVM/new-disp: 1cb2abe1ab | (Jonathan Worthington)++ | 4 files

[14:30] <Geth> ¦ MoarVM/new-disp: Migrate exit handler invokes to new convs

[14:30] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1cb2abe1ab

[14:30] <Geth> ¦ MoarVM/new-disp: 13cb19be10 | (Jonathan Worthington)++ | 3 files

[14:30] <Geth> ¦ MoarVM/new-disp: Migrate finalize handler invoke to new convs

[14:30] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/13cb19be10

[14:52] <Geth> ¦ MoarVM/new-disp: eae94d526b | (Jonathan Worthington)++ | 2 files

[14:52] <Geth> ¦ MoarVM/new-disp: Migrate native lib restore to new convs

[14:52] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/eae94d526b

[15:27] <jnthnwrthngtn> Hm, the native callback thing is going to need some care

[15:28] <jnthnwrthngtn> Well, really just needs unwrapping code objects 

[15:51] <Geth> ¦ MoarVM/new-disp: 0cf5360c3b | (Jonathan Worthington)++ | 4 files

[15:51] <Geth> ¦ MoarVM/new-disp: Migrate native callback invocation to new convs

[15:51] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/0cf5360c3b

[15:55] <jnthnwrthngtn> Just 6 ->invoke(...)s left

[15:56] <jnthnwrthngtn> 3 of which are I think all hllize, 2 related to type checking, which I need to figure out an overall solution for, and 1 related to the debug server, which I'll have a look at now

[15:56] <jdv> what happens when that goes to 0?  i assume that's the immediate goal...

[15:58] <jnthnwrthngtn> jdv: A bunch of code supporting the legecy calling conventions and invocation protocol gets removed

[15:59] <jnthnwrthngtn> And in turn, all call frames get a bit smaller, various temporary legacy/new-disp branches go away so we don't pay for them, etc.

[16:04] <jnthnwrthngtn> nine: fwiw, I think I've concluded that the special return mechanism will go away post-merge, since it doesn't really get in the way of anything, even if it'd be nice to see the back of it.

[16:05] <jnthnwrthngtn> (And it's not even really going away, I guess, just becoming a different kind of callstack record)

[16:05] *** reportable6 joined
[16:26] <Geth> ¦ MoarVM/new-disp: a3763f5400 | (Jonathan Worthington)++ | 3 files

[16:26] <Geth> ¦ MoarVM/new-disp: Migrate debug server invoke to new convs

[16:26] <Geth> ¦ MoarVM/new-disp: 

[16:26] <Geth> ¦ MoarVM/new-disp: This also fixes a potential args buffer overrun in the current

[16:26] <Geth> ¦ MoarVM/new-disp: implementation.

[16:26] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a3763f5400

[16:28] <Geth> ¦ MoarVM/new-disp: 7965608e25 | (Jonathan Worthington)++ | src/debug/debugserver.c

[16:28] <Geth> ¦ MoarVM/new-disp: Remove commented code

[16:28] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/7965608e25

[16:37] <Geth> ¦ MoarVM/new-disp: f0f5eb998a | (Jonathan Worthington)++ | src/6model/reprs/MVMCFunction.c

[16:37] <Geth> ¦ MoarVM/new-disp: Remove MVMCFunction invoke handler

[16:37] <Geth> ¦ MoarVM/new-disp: 

[16:37] <Geth> ¦ MoarVM/new-disp: Everything that relied upon it is gone.

[16:37] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/f0f5eb998a

[16:49] <dogbert17> todays stupid new-disp question: aren't this line and the one following at odds with each other? https://github.com/MoarVM/MoarVM/blob/new-disp/src/disp/program.c#L2360

[16:51] <jnthnwrthngtn> dogbert17: oops, yes, that looks like copy paste

[16:58] *** dogbert11 joined
[17:00] *** dogbert17 left
[17:06] <Geth> ¦ MoarVM/new-disp: 91e5ca5087 | (Jonathan Worthington)++ | src/disp/program.c

[17:06] <Geth> ¦ MoarVM/new-disp: Fix copy-pasto

[17:06] <Geth> ¦ MoarVM/new-disp: 

[17:06] <Geth> ¦ MoarVM/new-disp: Spotted by dogbert++.

[17:06] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/91e5ca5087

[17:06] <Geth> ¦ MoarVM/new-disp: d7f9d4abdf | (Jonathan Worthington)++ | 6 files

[17:06] <Geth> ¦ MoarVM/new-disp: Remove invocation handler support

[17:06] <Geth> ¦ MoarVM/new-disp: 

[17:06] <Geth> ¦ MoarVM/new-disp: The entire invocation protocol will go away in the near future, but this

[17:06] <Geth> ¦ MoarVM/new-disp: piece already can.

[17:06] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/d7f9d4abdf

[17:06] <Geth> ¦ MoarVM/new-disp: c75199ee37 | (Jonathan Worthington)++ | 8 files

[17:06] <Geth> ¦ MoarVM/new-disp: Eliminate now-unused with_invocant field

[17:06] <Geth> ¦ MoarVM/new-disp: 

[17:06] <Geth> ¦ MoarVM/new-disp: This makes every MVMCallsite a pointer smaller.

[17:06] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/c75199ee37

[17:22] <Geth> ¦ MoarVM/new-disp: a8710f2ace | (Jonathan Worthington)++ | 10 files

[17:22] <Geth> ¦ MoarVM/new-disp: Remove further legacy multi caching leftovers

[17:22] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a8710f2ace

[17:31] <jnthnwrthngtn> Enough for now

[17:35] <dogbert11> jnthnwrthngtn++

[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:12] *** dogbert11 left
[18:12] *** dogbert11 joined
[18:22] *** dogbert11 left
[18:22] *** dogbert17 joined
[18:34] *** dogbert11 joined
[18:36] *** dogbert17 left
[18:51] *** dogbert11 left
[18:58] *** dogbert11 joined
[19:10] <nine> Intriguing: the setting build failure I got yesterday after my attempted fix goes away with MVM_SPESH_DISABLE

[19:23] *** TempIRCLogger left
[19:23] *** TempIRCLogger joined
[19:34] *** TempIRCLogger left
[19:35] *** TempIRCLogger joined
[19:53] <nine> Seems like it's hllizefor that's broken. hllize by itself looks fine

[20:17] <nine> Meanwhile the evidence gets stronger for the lang_hllize dispatcher needing that MVM_disp_program_record_guard_concreteness. Without it setting compilation fails with the same STable-where-an-object-should-be issue.

[20:17] <nine> Though to be honest, I don't understand why. lang_hllize itself doesn't actually care about concreteness. It doesn't even really care about the object's type. It only cares about the object's language. We guard on the type just because the type tells us which language.

[20:19] <nine> So nqp::hllize(SomeType) and nqp::hllize(SomeType.new) will always have the same result of the lang_hllize dispatcher. So why the need to guard on concreteness?

[20:19] <nine> The raku-hllize dispatcher does care about concreteness and adds an appropriate guard: nqp::dispatch('boot-syscall', 'dispatcher-guard-concreteness', $arg);

[20:43] <jnthnwrthngtn> nine: Does the translation of the dispatch program into ops look correct?

[20:44] <nine> How can I check?

[20:45] <nine> Ah, of course there's DUMP_ defines

[20:46] <jnthnwrthngtn> Yeah, you can get at the original dispatch program that way, though also if you look at the spesh log, does it have facts or guards to justify reading an attribute, etc.

[20:46] <jnthnwrthngtn> (I think you said this was about a mis-read of an attribute...)

[20:47] <jnthnwrthngtn> It's weird though, since pretty much every method and multi dispatch also ends up with attribute reads etc.

[20:49] <nine> Yes, I get a class_handle in get_attribute that's pointing at an STable instead of an MVMObject

[20:52] *** TempIRCLogger left
[20:52] *** TempIRCLogger joined
[20:53] <nine> That it's a get_attribute that's failing tells me though, that we must have deopted. In the speshed frame, there's no getattr_o anymore. It was replaced by sp_get_o

[21:01] <nine> Gotta catch some sleep. Maybe I'll get further tomorrow

[21:04] <timo> good luck

[21:28] <dogbert11> src/core/callsite.c:5:70: warning: excess elements in struct initializer

[21:28] <dogbert11>     5 | static MVMCallsite   zero_arity_callsite = { NULL, 0, 0, 0, 0, 0, 0, 0 };

[21:28] <dogbert11> I guess this is benign, btw there are more of them

[21:52] <jnthnwrthngtn> ah, yeah, I guess that's a missed leftover from removing the with_invocant field

[21:52] *** evalable6 left
[21:52] *** linkable6 left
[21:55] *** linkable6 joined
[21:57] <Geth> ¦ MoarVM/new-disp: 052f2da143 | (Jonathan Worthington)++ | src/core/callsite.c

[21:57] <Geth> ¦ MoarVM/new-disp: Remove init of removed callsite field

[21:57] <Geth> ¦ MoarVM/new-disp: 

[21:57] <Geth> ¦ MoarVM/new-disp: And also fix some NULL/0 inconsistency

[21:57] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/052f2da143

[21:58] <jnthnwrthngtn> dogbert11: That should nail 'em all

[21:58] <jnthnwrthngtn> A callgrind on CORE.setting compilation gives 344,563,041,195 for new-disp now; master is 330,702,914,420. Closing in.

[21:59] <jnthnwrthngtn> And I still didn't figure out the missing spesh stats thing yet

[22:05] <jnthnwrthngtn> Um, wait, what...the latest callgrind output I'm looking at has us doing less frame invocations than on master?!

[22:07] <jnthnwrthngtn> That's...unexpected. 

[22:20] <dogbert11> that sounds like good news :)

[22:21] <dogbert11> btw, all struct initializer errors have indeed been fixed

[22:42] *** jgaz joined
[22:52] *** evalable6 joined
[22:58] *** jgaz left
[23:02] *** squashable6 left
[23:04] *** squashable6 joined
