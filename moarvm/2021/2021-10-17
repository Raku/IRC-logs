[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:59] *** vrurg left
[01:10] *** kjp left
[01:20] *** vrurg joined
[02:20] *** evalable6 left
[02:20] *** linkable6 left
[02:23] *** linkable6 joined
[03:00] *** Xliff_ left
[04:14] *** frost joined
[04:21] *** evalable6 joined
[05:58] *** linkable6 left
[05:58] *** quotable6 left
[05:58] *** nativecallable6 left
[05:58] *** bisectable6 left
[05:58] *** releasable6 left
[05:58] *** notable6 left
[05:58] *** bloatable6 left
[05:58] *** unicodable6 left
[05:58] *** evalable6 left
[05:58] *** statisfiable6 left
[05:58] *** greppable6 left
[05:58] *** shareable6 left
[05:58] *** benchable6 left
[05:58] *** squashable6 left
[05:58] *** committable6 left
[05:58] *** sourceable6 left
[05:58] *** reportable6 left
[05:58] *** tellable6 left
[05:58] *** coverable6 left
[05:58] *** releasable6 joined
[05:59] *** notable6 joined
[05:59] *** unicodable6 joined
[05:59] *** coverable6 joined
[05:59] *** nativecallable6 joined
[06:00] *** benchable6 joined
[06:00] *** greppable6 joined
[06:00] *** committable6 joined
[06:00] *** squashable6 joined
[06:01] *** tellable6 joined
[06:01] *** bisectable6 joined
[06:04] *** reportable6 joined
[06:58] *** quotable6 joined
[07:00] *** linkable6 joined
[07:01] *** sourceable6 joined
[07:21] *** dogbert17 left
[07:29] *** dogbert17 joined
[07:59] *** evalable6 joined
[07:59] *** shareable6 joined
[08:15] *** dogbert17 left
[09:09] <lizmat> hmmm... I just noticed that just starting "raku" and letting it sit in the repl, grows at about 2MB / minute

[09:10] <lizmat> raku -e 'sleep' does not do that, but that doesn't have the supervisor thread running

[09:10] <lizmat> so it feels to me the supervisor thread itself is leaking

[09:14] <lizmat> sadly a --profile of sitting in the REPL for a while, does not produce a HTML file that has something deciperable

[09:15] <lizmat> apart from the fact that for the 42 seconds it ran, it did 6 garbage collections

[09:15] *** evalable6 left
[09:15] *** linkable6 left
[09:17] *** linkable6 joined
[09:24] *** dogbert17 joined
[09:30] <nine> Any full collections?

[09:35] <lizmat> no

[09:35] <lizmat> "There were 0 full collections involving the entire heap."

[09:37] <nine> Then it might not be an actual leak, but simply objects making it into gen2 which keeps growing until one of the thresholds for a gen2 collection is reached

[09:40] <lizmat> but how can it be growing if the supervisor thread is supposed not to be allocating anything?

[09:44] <timo> i did measure recently that it does allocate some closure clones or something

[09:47] <lizmat> also: spectest does appear to still be significantly slower :-(

[09:52] <lizmat> it's been a while since I regularly ran spectests, but:

[09:52] <lizmat> Files=1349, Tests=117859, 616 wallclock secs

[09:52] <lizmat> is a value for wallclock I have never seen on my machine

[10:00] *** bloatable6 joined
[10:00] *** statisfiable6 joined
[10:02] *** raydiak left
[10:04] <lizmat> git revert fbb5228e8ed0e566 33296d406511557a2b6 --no-commit

[10:04] <lizmat> brings this back to:

[10:04] <lizmat> Files=1349, Tests=117859, 357 wallclock secs

[10:13] <timo> i wonder what RMD would say about this

[10:21] <lizmat> a lot, probably  :-)

[10:21] <lizmat> in any case: https://github.com/rakudo/rakudo/pull/4577

[10:22] <nine> Since that commit was a correctness fix, I'd hesitate to revert it. No point in delivering a wrong result faster

[10:23] <lizmat> Well, I'd like to see it reverted before the 2021.10 release, to give us more time to figure out what causes the spectest slowdown

[11:17] *** evalable6 joined
[12:03] *** reportable6 left
[12:05] *** reportable6 joined
[12:06] *** squashable6 left
[12:08] *** squashable6 joined
[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: bce19e6663 | (Stefan Seifert)++ | 5 files

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: Fix segfault when thread deopts while another tries to find a dynamic

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: 

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: Commit e94893f897495f3de16d4898279c87e356058acb fixed a possible segfault in

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: the frame walkercaused by a concurrent deopt in a different thread. The fix was

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: to use a local copy of the frame's spesh_cand pointer. However

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: MVM_spesh_deopt_find_inactive_frame_deopt_idx which is called by the same code

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: also accesses the frame's spesh_cand. So this function could still end up

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: <…commit message has 5 more lines…>

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: review: https://github.com/MoarVM/MoarVM/commit/bce19e6663

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: e1e9acac86 | (Stefan Seifert)++ | src/spesh/frame_walker.c

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: Fix segfault in frame walker when other thread clears the frame's extra

[12:46] *** squashable6 left
[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: 

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: Similar to another thread clearing a frame's spesh_cand leading to issues fixed

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: in commit bce19e6663aba5e32f2b6e1a8b8c1a2856b70f6a, it's also possible that

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: another thread clears a frame's extra, right after we checked it for non-NULL

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: and before we try to dereference it.

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: 

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: Fix by taking a local copy of the pointer before we check and dereference it.

[12:46] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: review: https://github.com/MoarVM/MoarVM/commit/e1e9acac86

[12:47] <Geth> ¦ MoarVM: niner++ created pull request #1568: Fix segfault finding dynamics after deopt

[12:47] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1568

[13:21] *** frost left
[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: 74c35679a3 | (Stefan Seifert)++ | 5 files

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: Fix segfault when thread deopts while another tries to find a dynamic

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: 

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: Commit e94893f897495f3de16d4898279c87e356058acb fixed a possible segfault in

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: the frame walkercaused by a concurrent deopt in a different thread. The fix was

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: to use a local copy of the frame's spesh_cand pointer. However

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: MVM_spesh_deopt_find_inactive_frame_deopt_idx which is called by the same code

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: also accesses the frame's spesh_cand. So this function could still end up

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: <…commit message has 5 more lines…>

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: review: https://github.com/MoarVM/MoarVM/commit/74c35679a3

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: 80f8edf947 | (Stefan Seifert)++ | src/spesh/frame_walker.c

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: Fix segfault in frame walker when other thread clears the frame's extra

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: 

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: Similar to another thread clearing a frame's spesh_cand leading to issues fixed

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: in commit 74c35679a3fba707ad695c53c28918aca30b95b5, it's also possible that

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: another thread clears a frame's extra, right after we checked it for non-NULL

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: and before we try to dereference it.

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: 

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: Fix by taking a local copy of the pointer before we check and dereference it.

[13:32] <Geth> ¦ MoarVM/fix_segfault_finding_dynamics_after_deopt: review: https://github.com/MoarVM/MoarVM/commit/80f8edf947

[13:33] <nine> CI found an editing mistake that only showed up in non-JITed code

[14:21] *** linkable6 left
[14:21] *** evalable6 left
[14:21] *** evalable6 joined
[14:45] *** patrickb joined
[14:47] *** squashable6 joined
[15:47] *** evalable6 left
[16:03] *** colemanx joined
[16:27] *** Kaiepi left
[16:27] *** Kaiepi joined
[17:21] *** linkable6 joined
[17:24] *** Kaipi joined
[17:25] *** Kaiepi left
[17:28] *** Kaipi left
[17:28] *** Kaipi joined
[17:32] *** Xliff joined
[17:34] <Xliff> I am getting the following from Raukdo: "lang-call cannot invoke object of type 'VMNull' belonging to no language"

[17:34] <Xliff> Is this a new-disp error?

[17:36] <Geth> ¦ MoarVM/new-disp-nativecall: 9 commits pushed by (Stefan Seifert)++

[17:36] <Geth> ¦ MoarVM/new-disp-nativecall: 166e360379 | Fix segfault due to uninitialized entry_point in native calls

[17:36] <Geth> ¦ MoarVM/new-disp-nativecall: 4c5ecef2dc | Fix missing data on clones of NativeCall sites

[17:36] <Geth> ¦ MoarVM/new-disp-nativecall: 6da3b180e2 | Fix nested runloops leaving call stack in confused state

[17:36] <Geth> ¦ MoarVM/new-disp-nativecall: dd7560f07a | Add boot-foreign-code dispatch terminal to replace native(call)invoke ops

[17:36] <Geth> ¦ MoarVM/new-disp-nativecall: e121fc9f00 | No longer allocate an argument array for generic native calls

[17:36] <Geth> ¦ MoarVM/new-disp-nativecall: 97c734c832 | Fix segfaults when primitive parameters are passed to native function

[17:36] <Geth> ¦ MoarVM/new-disp-nativecall: 30abe2fba5 | dispatcher-track-unbox-int

[17:36] <Geth> ¦ MoarVM/new-disp-nativecall: ca182ddadc | Support passing unboxed pointers to native routines

[17:36] <Geth> ¦ MoarVM/new-disp-nativecall: eed60cc721 | Support passing unboxed strings to native routines

[17:36] <Geth> ¦ MoarVM/new-disp-nativecall: review: https://github.com/MoarVM/MoarVM/compare/d09757817af1...eed60cc72134

[17:37] <nine> Xliff: can't tell from that message alone

[17:38] <nine> Xliff: the message is new-dispish, but the condition could just as well have led to a different error message (something like "Cannot invoke an object of type VMNull") before.

[17:46] <Xliff> nine: I have a small program that invokes it. Would that help?

[17:46] <Xliff> m: role IdentityAttibute { }; multi sub trait_mod:<is> (Attribute $attr, :$identity-data-store!) is export { $attr does IdentityAttribute; }; class A { has $!a; has $!b  is identity-data-store; }

[17:46] <camelia> rakudo-moar 8fc643ec9: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤lang-call cannot invoke object of type 'VMNull' belonging to no language␤at <tmp>:1␤»

[17:47] <timo> i can not speak for nine, but i assume "yes"

[17:47] <nine>  On 2021.08 this gives: Cannot invoke this object (REPR: Null; VMNull)

[17:48] <timo> interesting, i wonder how that does not explode in any ecosystem modules already

[17:48] <timo> its not because of private vs public attributes i assume

[17:48] *** evalable6 joined
[17:57] <nine> Huh:

[17:57] <nine> m: multi sub trait_mod:<is> (Attribute $attr, :$identity-data-store!) is export { $attr does role IdentityAttribute { }; }; class A { has $!a; has $!b  is identity-data-store; }

[17:57] <camelia> rakudo-moar 8fc643ec9: ( no output )

[18:03] *** reportable6 left
[18:06] *** reportable6 joined
[18:28] <Xliff> Huh!

[18:29] <Xliff> So you pun the role directly to the Attribute and it works?

[18:55] *** Kaipi left
[18:55] *** Kaipi joined
[19:01] <Geth> ¦ MoarVM/master: 7 commits pushed by (Daniel Green)++, MasterDuke17++

[19:01] <Geth> ¦ MoarVM/master: 530ea7d97f | Add JIT templates for trunc_u(8|16|32)

[19:01] <Geth> ¦ MoarVM/master: 804857b2e7 | Pass right sized int to MVM_capture_arg_pos_primspec

[19:01] <Geth> ¦ MoarVM/master: d0609a8408 | Add JIT templates for a bunch of capture* ops

[19:01] <Geth> ¦ MoarVM/master: f9f4b61ea1 | Add JIT template for attrinited

[19:01] <Geth> ¦ MoarVM/master: 2101d8c294 | Add JIT template for getcodename

[19:01] <Geth> ¦ MoarVM/master: 7b0cc28d8d | Add JIT template for coerce_In

[19:01] <Geth> ¦ MoarVM/master: 098e9b1907 | Merge pull request #1567 from MasterDuke17/add_more_jit_templates_seen_in_megamorphic_multi_dispatch_spesh_log

[19:01] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/4e7fa7704ddb...098e9b1907d2

[19:06] *** sena_kun left
[19:06] *** sena_kun joined
[19:10] *** Merfont joined
[19:10] *** Kaipi left
[19:18] *** Kaipi joined
[19:18] *** Merfont left
[19:32] *** linkable6 left
[19:35] *** linkable6 joined
[19:42] *** Merfont joined
[19:42] *** Kaipi left
[19:47] *** Kaipi joined
[19:48] *** Merfont left
[20:09] *** patrickb left
[20:25] *** Kaipi left
[20:25] *** Kaipi joined
[20:27] *** Merfont joined
[20:27] *** Kaipi left
[21:19] *** Merfont left
[21:19] *** Merfont joined
[22:19] *** evalable6 left
[22:19] *** linkable6 left
[22:22] *** colemanx left
[22:59] *** Merfont left
[23:00] *** Merfont joined
[23:20] *** linkable6 joined
[23:21] *** Kaipi joined
[23:22] *** Merfont left
[23:49] *** Merfont joined
[23:50] *** Kaipi left
[23:58] *** Merfont left
