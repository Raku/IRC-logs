[04:53] *** nativecallable6 left
[04:53] *** benchable6 left
[04:53] *** unicodable6 left
[04:53] *** committable6 left
[04:53] *** greppable6 left
[04:53] *** linkable6 left
[04:53] *** notable6 left
[04:53] *** bloatable6 left
[04:53] *** releasable6 left
[04:53] *** statisfiable6 left
[04:53] *** evalable6 left
[04:53] *** tellable6 left
[04:53] *** bisectable6 left
[04:53] *** quotable6 left
[04:53] *** squashable6 left
[04:53] *** shareable6 left
[04:53] *** coverable6 left
[04:53] *** sourceable6 left
[04:54] *** benchable6 joined
[04:54] *** coverable6 joined
[04:54] *** greppable6 joined
[04:54] *** sourceable6 joined
[04:54] *** linkable6 joined
[04:54] *** evalable6 joined
[04:55] *** shareable6 joined
[04:55] *** bisectable6 joined
[04:55] *** squashable6 joined
[04:55] *** nativecallable6 joined
[04:55] *** unicodable6 joined
[04:55] *** quotable6 joined
[04:56] *** bloatable6 joined
[04:56] *** statisfiable6 joined
[04:56] *** notable6 joined
[04:56] *** tellable6 joined
[04:57] *** committable6 joined
[04:57] *** releasable6 joined
[07:24] *** frost-lab joined
[07:34] *** sena_kun joined
[07:40] <nwc10> good *, #moarvm 

[07:54] *** domidumont joined
[08:31] *** MasterDuke joined
[09:02] *** zakharyas joined
[09:02] <nine> good *!

[09:05] <MasterDuke> there was a new *, that's at least a start...

[09:11] *** brrt joined
[09:41] *** Altai-man joined
[09:44] *** sena_kun left
[10:31] <jnthn> If nothing else, it's at least a star...

[10:32] <timotimo> don't you star with me young man

[10:39] <nine> Well this is the view out of my room today. If that's not good, nothing is :) http://niner.name/pictures/2021-01-07%20Let%20it%20snow/DSCN9716.JPG

[10:40] <jnthn> oh, that's pretty nice

[10:40] <jnthn> My view is also good

[10:42] <nwc10> strange bright thing in the sky here

[10:42] <jnthn> http://jnthn.net/tmp/snih.jpg

[10:44] <MasterDuke> incredibly foggy here

[10:45] <nine> jnthn: aah, nice indeed :)

[10:47] <Geth> Â¦ MoarVM/asan_fixes: cceaa01045 | (Stefan Seifert)++ | src/6model/reprs/CStruct.c

[10:47] <Geth> Â¦ MoarVM/asan_fixes: Fix leaking CStruct repr_data when compute_allocation_strategy throws

[10:47] <Geth> Â¦ MoarVM/asan_fixes: review: https://github.com/MoarVM/MoarVM/commit/cceaa01045

[11:04] *** linkable6 left
[11:04] *** evalable6 left
[11:06] *** evalable6 joined
[11:06] *** linkable6 joined
[11:27] *** brrt left
[12:09] <Geth> Â¦ MoarVM/asan_fixes: 62384854c7 | (Stefan Seifert)++ | src/6model/reprs/CPPStruct.c

[12:09] <Geth> Â¦ MoarVM/asan_fixes: Fix leaking CPPStruct repr_data when compute_allocation_strategy throws

[12:09] <Geth> Â¦ MoarVM/asan_fixes: review: https://github.com/MoarVM/MoarVM/commit/62384854c7

[12:09] <Geth> Â¦ MoarVM/asan_fixes: d7ba1e594b | (Stefan Seifert)++ | src/6model/reprs/CUnion.c

[12:09] <Geth> Â¦ MoarVM/asan_fixes: Fix leaking CUnion repr_data

[12:09] <Geth> Â¦ MoarVM/asan_fixes: 

[12:09] <Geth> Â¦ MoarVM/asan_fixes: Fixes leaking of allocated repr_data fields and leak of the whole repr_data

[12:09] <Geth> Â¦ MoarVM/asan_fixes: when compute_allocation_strategy throws.

[12:09] <Geth> Â¦ MoarVM/asan_fixes: review: https://github.com/MoarVM/MoarVM/commit/d7ba1e594b

[12:25] *** zakharyas left
[12:31] *** MasterDuke left
[12:36] <nine> This leaks the encoded string: class MyStruct is repr("CStruct") { has Str $.s; ubmethod TWEAK() { $!s := "foo"} }; MyStruct.new

[12:50] <nine> In this case we'll have to free() that string in the CStruct's gc_free. But a string may also get allocated and added by C code which may or may not retain ownership (think mystruct->str = "foo")

[12:53] <nine> So we could have all combinations of a struct that's allocated by MoarVM or C code containing a string which again may be allocated by MoarVM or C code and in the latter case either must be freed by MoarVM or must not be freed by MoarVM

[12:54] <nine> And the bit about the string is actually true for all allocated structures, like strings, structs or arrays

[12:58] <nine> Now usually C APIs (at least the well written ones) will be very explicit about who is responsible for freeing a given bit of memory. E.g. the simplest case is malloc() which transfers ownership of the returned memory to you, so you have to ensure it gets free()d again. Other functions return just pointers but retain ownership of the memory.

[12:59] <nine> Same is true for arguments. Docs will tell you whether a library takes ownership of memory (and will free() it) you pass it via an argument to one of its functions.

[13:00] <nine> So most ownership information is tied to functions and their arguments and return values. This is a part that NativeCall doesn't cover at all.

[13:02] <nine> But as the bit about strings shows, complex data structures will still need to manage runtime information about which memory they own and which they don't as the same data structures may be used in different situations.

[13:14] <nine> I guess a sensible way to approach this would be an "is transferring-ownership" trait for arguments and subs (for their return values) but boy would I hate to have to type that all the time

[13:25] *** MasterDuke joined
[13:42] *** sena_kun joined
[13:43] *** Altai-man left
[14:05] *** frost-lab left
[14:16] *** brrt joined
[14:29] *** zakharyas joined
[14:37] *** domidumont1 joined
[14:40] *** domidumont left
[15:53] *** brrt left
[15:54] *** [Coke] joined
[16:46] <Geth> Â¦ MoarVM/asan_fixes: ebb5643c44 | (Stefan Seifert)++ | src/6model/reprs/CStruct.c

[16:46] <Geth> Â¦ MoarVM/asan_fixes: Fixup: Fix leaking CStruct repr_data when compute_allocation_strategy throws

[16:46] <Geth> Â¦ MoarVM/asan_fixes: review: https://github.com/MoarVM/MoarVM/commit/ebb5643c44

[16:46] <Geth> Â¦ MoarVM/asan_fixes: 3285c9608c | (Stefan Seifert)++ | src/6model/reprs/CPPStruct.c

[16:46] <Geth> Â¦ MoarVM/asan_fixes: Fixup: Fix leaking CPPStruct repr_data when compute_allocation_strategy throws

[16:46] <Geth> Â¦ MoarVM/asan_fixes: review: https://github.com/MoarVM/MoarVM/commit/3285c9608c

[16:46] <Geth> Â¦ MoarVM/asan_fixes: 979b84e9de | (Stefan Seifert)++ | src/6model/reprs/CUnion.c

[16:46] <Geth> Â¦ MoarVM/asan_fixes: Fixup: Fix leaking CUnion repr_data

[16:46] <Geth> Â¦ MoarVM/asan_fixes: review: https://github.com/MoarVM/MoarVM/commit/979b84e9de

[16:49] <MasterDuke> jnthn: btw, have you seen https://github.com/rakudo/rakudo/issues/4145 ? seems right up your alley

[17:06] <nine> Fixing the profiler to no longer leak memory: easy. Fixing it so it no longer leaks but still actually returns results is quite a bit harder.

[17:38] *** brrt joined
[17:41] *** Altai-man joined
[17:44] *** sena_kun left
[17:45] *** squashable6 left
[17:48] *** squashable6 joined
[17:58] *** patrickb joined
[18:18] <jnthn> MasterDuke: I saw it, I didn't have any immediate guesses; given what breaks/fixes it, I suspect it's up my alley when I have a decent bit of time for a walk in the alley :)

[18:19] <nwc10> but the alley is currently out of bounds due to COVID restrictions? :-/

[18:20] <jnthn> nine: I think the memory management strategy was "screw it, the OS can do it, we're exiting after saving the data anyway". (No objections to doing better, of course.)

[18:20] <nine> jnthn: you mean for the profiler? Yes, that does make sense, of course.

[18:20] <jnthn> nine: Yes, for the profiler

[18:21] <jnthn> nine: Although having it not leaky opens up possibilities too, which didn't exist at the time it was originally written

[18:21] <jnthn> nine: For example, connecting to the debug server and running a profile just for a while becomes more feasible.

[18:22] <jnthn> nwc10: Well, more like no time for walks because I've got a deadline next week on a project and I left a tricky enough analysis to implement this week "because I'll be well rested after the break"...

[18:23] <nine> We'll get there. It's not really impossible. Just the usual difficulty of fixing things in a part of the code that one doesn't know or understand yet.

[18:23] <lizmat> nine: or having tests making sure that a piece of code only does X allocations or Y calls etc.  :-)

[19:09] *** zakharyas left
[19:15] *** domidumont1 left
[19:37] * [Coke] also left some things for post break, and Coke is regretting it.

[19:38] <[Coke]> ... though break was nice, for sure.

[20:11] <MasterDuke> jnthn: sure, no urgency

[20:46] <brrt> https://lobste.rs/s/ritbgc/what_glue_languages_do_you_use_like#c_xcppbq somebody uses our stuff, hurray

[20:56] *** Altai-man left
[21:03] <[Coke]> ... I love that hostname.

[22:12] *** brrt left
[23:09] <lizmat> weekly: https://lobste.rs/s/ritbgc/what_glue_languages_do_you_use_like#c_xcppbq

[23:09] <notable6> lizmat, Noted! (weekly)

[23:13] *** patrickb left
