[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[01:16] *** greppable6 left
[01:16] *** releasable6 left
[01:16] *** statisfiable6 left
[01:16] *** coverable6 left
[01:16] *** squashable6 left
[01:16] *** linkable6 left
[01:16] *** evalable6 left
[01:16] *** quotable6 left
[01:16] *** reportable6 left
[01:16] *** bisectable6 left
[01:16] *** committable6 left
[01:16] *** shareable6 left
[01:16] *** notable6 left
[01:16] *** unicodable6 left
[01:16] *** tellable6 left
[01:16] *** nativecallable6 left
[01:16] *** benchable6 left
[01:16] *** sourceable6 left
[01:16] *** bloatable6 left
[01:16] *** releasable6 joined
[01:16] *** shareable6 joined
[01:16] *** bisectable6 joined
[01:16] *** tellable6 joined
[01:17] *** coverable6 joined
[01:17] *** greppable6 joined
[01:17] *** evalable6 joined
[01:17] *** reportable6 joined
[01:17] *** squashable6 joined
[01:17] *** sourceable6 joined
[01:18] *** quotable6 joined
[01:18] *** linkable6 joined
[01:18] *** benchable6 joined
[01:18] *** committable6 joined
[01:18] *** unicodable6 joined
[01:19] *** nativecallable6 joined
[01:19] *** notable6 joined
[01:19] *** statisfiable6 joined
[01:19] *** bloatable6 joined
[02:19] *** bisectable6 left
[02:19] *** linkable6 left
[02:19] *** greppable6 left
[02:19] *** statisfiable6 left
[02:19] *** evalable6 left
[02:19] *** releasable6 left
[02:19] *** notable6 left
[02:19] *** unicodable6 left
[02:19] *** benchable6 left
[02:19] *** sourceable6 left
[02:19] *** tellable6 left
[02:19] *** bloatable6 left
[02:19] *** reportable6 left
[02:19] *** squashable6 left
[02:19] *** coverable6 left
[02:19] *** quotable6 left
[02:19] *** committable6 left
[02:19] *** nativecallable6 left
[02:19] *** shareable6 left
[02:19] *** squashable6 joined
[02:19] *** benchable6 joined
[02:19] *** bloatable6 joined
[02:20] *** statisfiable6 joined
[02:20] *** reportable6 joined
[02:20] *** releasable6 joined
[02:20] *** greppable6 joined
[02:20] *** sourceable6 joined
[02:20] *** nativecallable6 joined
[02:20] *** committable6 joined
[02:21] *** bisectable6 joined
[02:21] *** tellable6 joined
[02:21] *** quotable6 joined
[02:21] *** notable6 joined
[02:22] *** unicodable6 joined
[02:22] *** shareable6 joined
[02:22] *** evalable6 joined
[02:22] *** coverable6 joined
[02:22] *** linkable6 joined
[04:08] *** coverable6 left
[04:08] *** releasable6 left
[04:08] *** evalable6 left
[04:08] *** notable6 left
[04:08] *** reportable6 left
[04:08] *** quotable6 left
[04:08] *** shareable6 left
[04:08] *** tellable6 left
[04:08] *** bloatable6 left
[04:08] *** committable6 left
[04:08] *** greppable6 left
[04:08] *** statisfiable6 left
[04:08] *** unicodable6 left
[04:08] *** squashable6 left
[04:08] *** benchable6 left
[04:08] *** nativecallable6 left
[04:08] *** bisectable6 left
[04:08] *** linkable6 left
[04:08] *** sourceable6 left
[04:08] *** nativecallable6 joined
[04:09] *** quotable6 joined
[04:09] *** benchable6 joined
[04:09] *** shareable6 joined
[04:09] *** notable6 joined
[04:09] *** committable6 joined
[04:09] *** statisfiable6 joined
[04:09] *** reportable6 joined
[04:10] *** unicodable6 joined
[04:10] *** tellable6 joined
[04:10] *** releasable6 joined
[04:10] *** greppable6 joined
[04:10] *** bloatable6 joined
[04:10] *** sourceable6 joined
[04:10] *** linkable6 joined
[04:10] *** coverable6 joined
[04:10] *** evalable6 joined
[04:11] *** bisectable6 joined
[04:11] *** squashable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[07:27] *** patrickb joined
[08:54] <patrickb> o/

[08:54] <patrickb> Does anyone know off hand what the minimum Windows version we depend on is?

[09:10] *** brrt joined
[09:23] <jnthnwrthngtn> patrickb: As a lower bound, the one libuv supports, which is Windows 8 per https://github.com/libuv/libuv/blob/v1.x/SUPPORTED_PLATFORMS.md

[09:38] <patrickb> Thanks!

[09:44] <jnthnwrthngtn> fwiw, I'm currently working through getting Rakudo building with new-disp used for the various dispatches (so far, call and callmethod ops)

[09:46] <jnthnwrthngtn> Currently considering replacing object boolification with the dispatch mechanism also

[09:46] <jnthnwrthngtn> Which will make things more uniform in at least spesh

[09:47] <lizmat> feels ok to me fwiw

[09:49] <jnthnwrthngtn> More generally I think all of MVM_coerce_istrue, MVM_coerce_smart_stringify, MVM_coerce_smart_numify, and MVM_coerce_smart_intify could disappear

[09:52] <jnthnwrthngtn> But about the boolification, currently we have ops for if_o, unless_o, istrue, and isfalse.

[09:52] <jnthnwrthngtn> And spesh already rewrites the first two to use the latter two and if_i/unless_i because it makes analysis easier

[09:53] <jnthnwrthngtn> So they only help bytecode side a little

[09:53] <jnthnwrthngtn> .oO( RISC wins again... )

[09:53] <jnthnwrthngtn> Uh, bytecode *size*

[09:54] <jnthnwrthngtn> Anyway, think I'll divert to clean this lot up today given it's the current CORE.setting compilation blocker

[10:27] *** patrickb left
[10:50] <brrt> ohai

[11:12] <jnthnwrthngtn> o/ brrt

[11:17] <brrt> what's the thing that's currently broken?

[11:38] *** patrickb joined
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:09] <jnthnwrthngtn> brrt: `if $a-raku-object {}` compiles into unless_o, which goes through the current dispatch mechanism, which doesn't end well because we end up invoking a proto method compiled for the new dispatch mechanism.

[12:10] <jnthnwrthngtn> And the best way to fix this seems to be to 1) generate istrue + if_i/unless_i sequences instead, which spesh actually already does today anyway, and b) compile istrue into a `dispatch` instruction that delegates to the language method call dispatcher

[12:11] <jnthnwrthngtn> s/b)/2)/ :)

[12:24] <brrt> ah, I see

[12:24] <brrt> so it's a new-disp problem

[12:26] <jnthnwrthngtn> Not so much problem as just the current thing that needs doing to get us fully moved over to new-disp

[13:13] *** brrt left
[13:22] *** patrickb left
[13:24] *** patrickb joined
[14:36] <Geth> ¦ MoarVM/new-disp: 7313b9e79b | (Jonathan Worthington)++ | 6 files

[14:36] <Geth> ¦ MoarVM/new-disp: Implement boolification using the dispatcher

[14:36] <Geth> ¦ MoarVM/new-disp: 

[14:36] <Geth> ¦ MoarVM/new-disp: This will replace all(if_o, unless_o, istrue, isfalse) after an NQP

[14:36] <Geth> ¦ MoarVM/new-disp: rebootstrap. The primary motivation is to have the method call form

[14:36] <Geth> ¦ MoarVM/new-disp: of boolification use the new dispatcher, however this will also make

[14:36] <Geth> ¦ MoarVM/new-disp: things simpler in spesh, since it will be just another dispatch op

[14:36] <Geth> ¦ MoarVM/new-disp: rather than needing special handling of the various object boolifying

[14:36] <Geth> ¦ MoarVM/new-disp: operations as happens today.

[14:36] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/7313b9e79b

[15:16] <jnthnwrthngtn> We now get 20,000 lines or so into compiling CORE.setting with new-disp. The next thing to fix up is that the chain compilation doesn't spit out a dispatch op, but the legacy invoke op

[15:46] <jnthnwrthngtn> Now somewhere past 40,000 lines and the next problem is that I didn't teach the new-disp multi-dispatcher about native refs...

[16:15] * [Coke] fell down the wet front steps yesterday, and is definitely feeling old-mannish today. Ow.

[16:20] <jnthnwrthngtn> Ouch. :(

[16:20] <[Coke]> jnthnwrthngtn++

[16:21] <[Coke]> (er, for the new disp work, not the condolences, though I appreciate those!)

[16:21] <jnthnwrthngtn> Hope not too much damage done

[16:21] <[Coke]> jnthnwrthngtn: I cannot remember the last time I swore so loudly!

[16:21] <[Coke]> I am still sore. I am pretty sure nothing's broken, though, which I am grateful for.

[16:31] <jdv> my brother in law slipped on dry gravel the other day and landed on his back and he's just 30

[16:34] <jdv> his knee was a problem the next few days

[16:45] *** Voldenet left
[16:50] *** Voldenet joined
[17:24] <Geth> ¦ MoarVM/new-disp: 70e22d8f9d | (Jonathan Worthington)++ | 3 files

[17:24] <Geth> ¦ MoarVM/new-disp: Avoid freeing the arg identity maps

[17:24] <Geth> ¦ MoarVM/new-disp: 

[17:24] <Geth> ¦ MoarVM/new-disp: They can be referenced from deep in the callstack. Instead, assume we

[17:24] <Geth> ¦ MoarVM/new-disp: will usually only need one of a certain size, and if we ever need more

[17:24] <Geth> ¦ MoarVM/new-disp: then create a full-size one. Free one or both only at exit time. Also

[17:24] <Geth> ¦ MoarVM/new-disp: use a define instead of a magic number in various places.

[17:24] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/70e22d8f9d

[17:29] <jnthnwrthngtn> Well, curious. We now make it through CORE.setting stage parse and into optimize, then memory usage goes wild. Guess that'll be the next thing to figure out.

[17:31] <jnthnwrthngtn> Well, looking at the time...not right now :) bbl

[18:03] *** reportable6 left
[18:03] *** reportable6 joined
[20:15] <[Coke]> jdv: I wish I was only 30-old!

[20:15] <[Coke]> got a big one coming up this year.

[20:15] <[Coke]> jnthnwrthngtn: nice progress, though. good work

[20:27] *** patrickb left
[21:22] <Geth> ¦ MoarVM/new-disp: 9a6ac14fd0 | (Jonathan Worthington)++ | src/core/instance.h

[21:22] <Geth> ¦ MoarVM/new-disp: Fix an overflow causing runaway allocations

[21:22] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/9a6ac14fd0

[21:25] *** Kaiepi left
[21:26] *** Kaiepi joined
[21:39] *** Altai-man joined
[21:41] *** Altai-man left
[21:42] <Geth> ¦ MoarVM/new-disp: 0463adde28 | (Jonathan Worthington)++ | src/core/callstack.c

[21:42] <Geth> ¦ MoarVM/new-disp: Make oversize callstack record error informativer

[21:42] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/0463adde28

[21:43] <jnthnwrthngtn> Alright, yay. We now make it through the Rakudo build with new-disp.

[21:44] <japhb> \o/

[21:44] <jnthnwrthngtn> `make test` even passes some sanity tests; `use Test` not working out fails the rest. That's certainly not for today, but getting to this point wasn't so bad as I feard.

[21:44] <japhb> Go jnthnwrthngtn go!

[21:45] <japhb> OOC, when do you get another new-disp day?

[21:45] <jnthnwrthngtn> It's also glacial because spesh doesn't understand how to optimize dispatch any non-trivial dispatch program yet

[21:45] <japhb> Define "glacial" -- like orders of magnitude slower?  Or like 2-4x?

[21:45] <jnthnwrthngtn> ~2x

[21:46] <jnthnwrthngtn> It's doing no inlining or specialization linking

[21:46] <japhb> 2x worse without spesh or inlining actually seems pretty promising

[21:46] <jnthnwrthngtn> It does manage some amount of spesh/JIT, but it's probably a bit off in its assessments of things too

[21:46] <japhb> Ah, makes sense

[21:47] <jnthnwrthngtn> No inlining has rather more than the cost of just missing the inlining too

[21:48] <japhb> ... because of inability to optimize surrounding a call?

[21:50] <jnthnwrthngtn> Well, to see things that cross the call boundary, for example if we inline a call we can see what it does and toss any checks against the type of the return value it produces in some cases, for example. Or allocations become possible to analyze because they don't escape.

[21:50] <jnthnwrthngtn> Anyway, I should get further on being correct before I go after being faster. :)

[21:51] *** Kaipi joined
[21:52] <jnthnwrthngtn> Probably will continue with this on Monday; not all day, but hopefully a few hours.

[21:52] *** Kaiepi left
[21:52] <jnthnwrthngtn> In theory should get 2+ days worth of time in on it; Friday might be a bit of a lost day depending how I feel after dose 2...

[21:52] <jnthnwrthngtn> (2+ days from next week, I mean)

[22:03] <japhb> Ah, finally getting second vaccine dose?  Yeah, you've got about a 50-50 chance of being knocked over.  :-/

[22:15] <jnthnwrthngtn> The first time was some fatigue and a sore arm as effects of the vaccination itself, but I'm really anxious about getting any kind of injection of anything, which is at least as exhausting.

[22:18] <japhb> Yeah, I can understand that.

[22:25] *** japhb left
[22:31] *** japhb joined
