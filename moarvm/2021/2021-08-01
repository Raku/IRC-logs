[00:02] *** reportable6 left
[01:02] *** sourceable6 left
[01:02] *** squashable6 left
[01:02] *** statisfiable6 left
[01:02] *** quotable6 left
[01:02] *** nativecallable6 left
[01:02] *** coverable6 left
[01:02] *** bisectable6 left
[01:02] *** unicodable6 left
[01:02] *** releasable6 left
[01:02] *** notable6 left
[01:02] *** tellable6 left
[01:02] *** evalable6 left
[01:02] *** committable6 left
[01:02] *** benchable6 left
[01:02] *** shareable6 left
[01:02] *** linkable6 left
[01:02] *** bloatable6 left
[01:02] *** greppable6 left
[01:03] *** coverable6 joined
[01:04] *** shareable6 joined
[01:04] *** statisfiable6 joined
[01:04] *** squashable6 joined
[01:04] *** releasable6 joined
[01:04] *** nativecallable6 joined
[01:05] *** unicodable6 joined
[01:05] *** reportable6 joined
[01:05] *** sourceable6 joined
[01:05] *** tellable6 joined
[01:05] *** notable6 joined
[01:28] <timo> when i "perf record -g rakudo fannkuch.p6" my computer immediately freezes :(

[02:03] *** benchable6 joined
[02:03] *** bloatable6 joined
[02:03] *** greppable6 joined
[02:04] *** quotable6 joined
[02:04] *** bisectable6 joined
[02:04] *** linkable6 joined
[02:05] *** committable6 joined
[03:16] *** coverable6 left
[03:16] *** linkable6 left
[03:16] *** bloatable6 left
[03:16] *** greppable6 left
[03:16] *** unicodable6 left
[03:16] *** nativecallable6 left
[03:16] *** bisectable6 left
[03:16] *** shareable6 left
[03:16] *** sourceable6 left
[03:16] *** notable6 left
[03:16] *** squashable6 left
[03:16] *** tellable6 left
[03:16] *** committable6 left
[03:16] *** benchable6 left
[03:16] *** statisfiable6 left
[03:16] *** releasable6 left
[03:16] *** quotable6 left
[03:16] *** reportable6 left
[03:17] *** quotable6 joined
[03:17] *** linkable6 joined
[03:17] *** greppable6 joined
[03:18] *** reportable6 joined
[03:18] *** statisfiable6 joined
[03:18] *** benchable6 joined
[03:18] *** tellable6 joined
[03:19] *** releasable6 joined
[03:19] *** shareable6 joined
[03:19] *** committable6 joined
[04:18] *** sourceable6 joined
[04:19] *** nativecallable6 joined
[05:05] *** evalable6 joined
[05:17] *** coverable6 joined
[05:17] *** squashable6 joined
[05:17] *** bloatable6 joined
[05:18] *** unicodable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:19] *** notable6 joined
[07:17] <Geth> ¬¶ MoarVM/new-disp: 449656ef17 | (Daniel Green)++ | src/spesh/inline.c

[07:17] <Geth> ¬¶ MoarVM/new-disp: Handle sp_runbytecode_[ins] in rewrite_obj_return

[07:17] <Geth> ¬¶ MoarVM/new-disp: 

[07:17] <Geth> ¬¶ MoarVM/new-disp: Implemented by changing return_to_set into return_to_op and passing in

[07:17] <Geth> ¬¶ MoarVM/new-disp: the needed op.

[07:17] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/449656ef17

[07:17] <Geth> ¬¶ MoarVM/new-disp: 52cbd533ce | MasterDuke17++ (committed using GitHub Web editor) | src/spesh/inline.c

[07:17] <Geth> ¬¶ MoarVM/new-disp: Merge pull request #1524 from MasterDuke17/new-disp_plus_sp_runbytecode_s_fix_in_rewrite_obj_return

[07:17] <Geth> ¬¶ MoarVM/new-disp: 

[07:17] <Geth> ¬¶ MoarVM/new-disp: Handle sp_runbytecode_[ins] in rewrite_obj_return

[07:18] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/52cbd533ce

[07:19] *** linkable6 left
[07:19] *** evalable6 left
[07:20] <MasterDuke> timo: is fannkuch.p6 available somewhere to test with?

[07:20] <nine> Ah, the day shift has arrived :D

[07:21] *** linkable6 joined
[07:22] <Nicholas> 24/7 morning requires shift working

[08:17] *** bisectable6 joined
[09:32] <nine> Inline::Perl5's git master now works just fine on new-disp :)

[09:34] <lizmat> wow!

[11:14] <nine> Turns out that rebasing the new-disp branches onto their respective masters is quite trivial. Only conflicts are in _REVISION files and one with the nqp-configure subrepository

[11:18] <nine> With that done, there are just 8 spectest files failing. And one of them is due to a bug that's also in master (which is just better at hiding it)

[11:18] *** patrickb joined
[11:19] <nine> That's including the S01-perl-5-integration tests which all pass

[11:19] <nine> (needs the just released Inline::Perl5 0.54)

[12:02] *** reportable6 left
[12:21] *** evalable6 joined
[12:23] <dogbert17> oops, a SEGV

[12:26] <dogbert17> all I have right now is this, https://gist.github.com/dogbert17/08ff059905621e64f748e603d8924bed, and the fact that it was t/spec/S07-hyperrace/for.t which failed

[12:42] <dogbert17> I have now updated the gist. Looks like 'tss' is busted.

[12:44] <dogbert17> to repro run 'while ./rakudo-m -Ilib t/spec/S07-hyperrace/for.t; do :; done'. I have MVM_GC_DEBUG=1 and a 128k nursery, dunno if that's necessary.

[12:48] <dogbert17> it seems to be the last test (#6) in the file which messes things up

[13:03] *** reportable6 joined
[13:07] <jnthnwrthngtn> nine: I'm really glad to hear Inline::Perl5 already works. :)

[13:08] <nine> jnthnwrthngtn: so you don't have to dig into my horrible code :D

[13:08] <nine> jnthnwrthngtn: though at some point I'd like to discuss options for using new-disp to my advantage there

[13:08] <jnthnwrthngtn> nine: More that I worried it'd be poking into a lot of things that have changed and be a real pain to fix up

[13:09] <jnthnwrthngtn> Yes, that and also how to do much better at NativeCall ;)

[13:09] <jnthnwrthngtn> Which will help...no small number of things including Inline::Perl5

[13:10] <nine> I did try my very best to be forwards compatible when poking into internals. I fell just short of the goal

[13:10] <jnthnwrthngtn> About the rebases: there'll never be a perfect time to push them, but if you've done the work anyway now is probably alright. I have no outstanding local work that I'll have to juggle.

[13:10] <nine> pushed

[13:11] <nine> Geth seems to have missed pushes to MoarVM and rakudo though

[13:13] <jnthnwrthngtn> Hmm

[13:13] <jnthnwrthngtn> After the Rakudo becase I run Configure and:

[13:13] <jnthnwrthngtn> ===SORRY!===

[13:13] <jnthnwrthngtn>   Unknown macro insert_list

[13:14] <jnthnwrthngtn> wow, s/becase/rebase/ :D

[13:14] <nine> jnthnwrthngtn: please pull again

[13:14] <jnthnwrthngtn> That was quick! Fixed, thanks.

[13:15] <nine> Looks like the rebase left the submodule update as a local change, despite me resolving the merge conflict. Submodules will always be weird I'm afraid

[13:17] <MasterDuke> would now be a good time to re-run update_ops and re-bootstrap to get the smaller files?

[13:18] <nine> Are smaller files by themselves useful?

[13:18] <jnthnwrthngtn> MasterDuke: Personally I'd wait a bit longer, until we fully eliminate legacy method caches and invocation protocl

[13:18] <jnthnwrthngtn> *protocol

[13:19] <MasterDuke> well, i assume it'd help keep more stuff in cache

[13:19] <MasterDuke> jnthnwrthngtn: sure, np

[13:19] <jnthnwrthngtn> MasterDuke: Since that will need a rebootstrap also before we can totally drop it in MoarVM

[13:19] <MasterDuke> ah yeah, then no reason to do it before then

[13:20] <jnthnwrthngtn> As a heads up for everyone wondering about new-disp scheduling: next week is the last week I'll be about here doing new-disp stuff before vacation, then I'll be away for 2 weeks.

[13:21] <jnthnwrthngtn> Also I still have to finish my talks for RakuConf :P

[13:21] <MasterDuke> speaking of, are most of the people here attending?

[13:33] <jnthnwrthngtn> m: say 1340 / 1349

[13:33] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: ¬´0.993328‚ê§¬ª

[13:33] <jnthnwrthngtn> Nice :)

[13:33] <jnthnwrthngtn> I should decide how to fix the signature unpacking based multi dispatch

[13:35] <MasterDuke> that and the X::Multi::NoMatch seems like it might get to a passing spectest

[13:36] <nine> dogbert17: I only saw that segfault once, before I compiled with debug symbols. Trying to reproduce it in rr, I run into deadlocks if anything

[13:50] <dogbert17> nine: that's annoying. I assume that the gist is of limited help

[13:57] <nine> dogbert17: I guess fixing a dead lock is as important as fixing a segfault :)

[13:57] <dogbert17> I can only agree :)

[13:57] <nine> And I happen to know where the deadlock is coming from

[13:57] <dogbert17> that was fast

[14:00] <nine> In https://github.com/MoarVM/MoarVM/blob/master/src/spesh/log.c#L37 we're marking the thread blocked while holding the sl->body.block_mutex. In https://github.com/MoarVM/MoarVM/blob/master/src/spesh/worker.c#L196 we're trying to lock the sl->body.block_mutex without the thread being marked blocked for GC.

[14:01] <nine> Now if some other thread at that point has decided that a GC run is in order, send_log will wait for the GC run. But the GC run cannot start until the spesh thread joins in. Which will never happen, since that's still waiting for the sl->body.block_mutex

[14:02] <dogbert17> oops

[14:04] <dogbert17> easy fix?

[14:17] <nine> looks like

[14:21] <nine> Gah...cought a segfault now, but probably a different one. Caused by an object getting collected prematurely

[14:29] <dogbert17> once again you're falling into a rabbit hole :)

[14:29] <nine> Hey, that's not funny :D

[14:36] <Geth> ¬¶ MoarVM/fix_spesh_log_gc_deadlock: d4a8093ebc | (Stefan Seifert)++ | src/spesh/worker.c

[14:36] <Geth> ¬¶ MoarVM/fix_spesh_log_gc_deadlock: Fix deadlock by untimely GC in multi-threaded programs

[14:36] <Geth> ¬¶ MoarVM/fix_spesh_log_gc_deadlock: 

[14:36] <Geth> ¬¶ MoarVM/fix_spesh_log_gc_deadlock: In send_log we're marking the thread blocked while holding the

[14:36] <Geth> ¬¶ MoarVM/fix_spesh_log_gc_deadlock: sl->body.block_mutex. In the spesh worker we're trying to lock the

[14:36] <Geth> ¬¶ MoarVM/fix_spesh_log_gc_deadlock: sl->body.block_mutex without the thread being marked blocked for GC.

[14:36] <Geth> ¬¶ MoarVM/fix_spesh_log_gc_deadlock: Now if some other thread at that point has decided that a GC run is in order,

[14:36] <Geth> ¬¶ MoarVM/fix_spesh_log_gc_deadlock: send_log will wait for the GC run. But the GC run cannot start until the spesh

[14:36] <Geth> ¬¶ MoarVM/fix_spesh_log_gc_deadlock: <‚Ä¶commit message has 5 more lines‚Ä¶>

[14:36] <Geth> ¬¶ MoarVM/fix_spesh_log_gc_deadlock: review: https://github.com/MoarVM/MoarVM/commit/d4a8093ebc

[14:36] <Geth> ¬¶ MoarVM: niner++ created pull request #1526: Fix deadlock by untimely GC in multi-threaded programs

[14:36] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1526

[14:43] <MasterDuke> nine: has your current work on mutexes inspired any better solutions re https://gist.github.com/MasterDuke17/e74be1116ea58d52c7ea218ce02e4547

[14:44] <MasterDuke> ?

[15:12] *** evalable6 left
[15:12] *** linkable6 left
[15:12] <nine> Not yet :/

[15:33] <MasterDuke> likewise, sadly

[16:05] <nine> MasterDuke: so, I see two ways of moving forward: first, check if we actually need to hold both mutexes in that place. Maybe that's just a side effect of how the code is factored and can be avoided. If we need them, turn the single ex_release_mutex pointer into a static array with 2 slots. Only check the 2nd one if the 1st one is occupied.

[16:05] <nine> So in the common case of no mutex acquired at all, we still only need to check one pointer

[16:07] <MasterDuke> yeah, i was wondering if a variable size array was really necessary

[16:08] <nine> I seriously hope its not

[16:15] *** evalable6 joined
[16:19] *** Kaiepi left
[16:34] <[Coke]> Let me know when I should re-try the windows build; didn't see a commit specifically about the dynamic array alloc.

[17:24] *** Kaiepi joined
[17:51] *** squashable6 left
[17:51] *** squashable6 joined
[18:02] *** reportable6 left
[18:49] *** Geth left
[18:49] *** Geth joined
[19:14] *** linkable6 joined
[19:15] <MasterDuke> [Coke]: you could try this patch https://gist.github.com/MasterDuke17/213ffde52c64e0a810d2f34083e02bac

[20:05] *** reportable6 joined
[20:18] <MasterDuke> Nicholas: is it possible that MVM_uni_hash_demolish doesn't completely free the hash?

[20:25] <MasterDuke> i just looked a `valgrind --leak-check=full` report of compiling CORE.e with `--full-cleanup` and it shows a bunch of leaks from hashes, even ones that are explicitly demolished in MVM_vm_destroy_instance

[21:31] *** patrickb left
[21:39] *** raydiak_ joined
[22:48] <timo> it's kinda difficult to figure out stuff going on in a callgrind recording because all the jit frames are just memory addresses, though perhaps if you also output the perf map you can map them by hand?

[23:02] *** linkable6 left
[23:02] *** evalable6 left
[23:03] *** evalable6 joined
[23:45] <[Coke]> next windows build failure after masterdukes patch:

[23:46] <[Coke]> https://gist.github.com/coke/8bffe7f4823e2ff99d0f7dcf07f7d782 - err-2.out

[23:48] <[Coke]> doesn't seem to like that syntax at all.

