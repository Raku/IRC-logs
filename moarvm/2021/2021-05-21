[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[01:04] *** lucasb left
[01:06] *** frost-lab joined
[01:33] *** ggoebel left
[04:05] *** shareable6 left
[04:05] *** reportable6 left
[04:05] *** bloatable6 left
[04:05] *** squashable6 left
[04:05] *** releasable6 left
[04:05] *** benchable6 left
[04:05] *** linkable6 left
[04:05] *** evalable6 left
[04:05] *** committable6 left
[04:05] *** nativecallable6 left
[04:05] *** coverable6 left
[04:05] *** tellable6 left
[04:05] *** notable6 left
[04:05] *** unicodable6 left
[04:05] *** sourceable6 left
[04:05] *** quotable6 left
[04:05] *** greppable6 left
[04:05] *** statisfiable6 left
[04:05] *** bisectable6 left
[04:05] *** nativecallable6 joined
[04:05] *** sourceable6 joined
[04:05] *** coverable6 joined
[04:06] *** committable6 joined
[04:06] *** notable6 joined
[04:06] *** greppable6 joined
[04:06] *** releasable6 joined
[04:06] *** tellable6 joined
[04:06] *** evalable6 joined
[04:06] *** unicodable6 joined
[04:07] *** bloatable6 joined
[04:07] *** reportable6 joined
[04:07] *** quotable6 joined
[04:07] *** benchable6 joined
[04:07] *** linkable6 joined
[04:08] *** statisfiable6 joined
[04:08] *** bisectable6 joined
[04:08] *** shareable6 joined
[04:08] *** squashable6 joined
[05:37] *** statisfiable6 left
[05:37] *** notable6 left
[05:37] *** coverable6 left
[05:37] *** greppable6 left
[05:37] *** nativecallable6 left
[05:37] *** bloatable6 left
[05:37] *** shareable6 left
[05:37] *** benchable6 left
[05:37] *** releasable6 left
[05:37] *** committable6 left
[05:37] *** linkable6 left
[05:37] *** unicodable6 left
[05:37] *** sourceable6 left
[05:37] *** bisectable6 left
[05:37] *** quotable6 left
[05:37] *** tellable6 left
[05:37] *** evalable6 left
[05:37] *** reportable6 left
[05:37] *** squashable6 left
[05:38] *** shareable6 joined
[05:38] *** committable6 joined
[05:38] *** evalable6 joined
[05:39] *** unicodable6 joined
[05:39] *** statisfiable6 joined
[05:39] *** notable6 joined
[05:39] *** nativecallable6 joined
[05:39] *** releasable6 joined
[05:39] *** linkable6 joined
[05:39] *** greppable6 joined
[05:39] *** quotable6 joined
[05:39] *** tellable6 joined
[05:40] *** bisectable6 joined
[05:40] *** reportable6 joined
[05:40] *** squashable6 joined
[05:40] *** sourceable6 joined
[05:40] *** bloatable6 joined
[05:40] *** benchable6 joined
[05:40] *** coverable6 joined
[05:49] *** domidumont joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:41] *** squashable6 left
[06:44] *** squashable6 joined
[06:45] <nine> dogbert11: oh, that's interesting

[06:47] <nwc10> good *, *

[06:47] <nine> That a segfault is connected to GC may (yet again) explain the seeming randomness of segfaults we see on CI

[08:07] *** sena_kun left
[08:11] *** sena_kun joined
[08:21] *** hankache joined
[08:37] *** zakharyas joined
[08:57] *** Voldenet_ joined
[08:58] *** Voldenet left
[09:07] <dogbert11> nine: now I 'only' have to catch it in the debugger :)

[09:10] *** Voldenet_ is now known as Voldenet

[09:10] *** Voldenet left
[09:10] *** Voldenet joined
[09:18] <sena_kun> hi, folks

[09:18] <sena_kun> how is the state of the revert revert revert commit? I remember it exposed some issues we had to address before the release, are they patched already or we should do a re-re-re-revert as the release is tomorrow?

[09:19] <sena_kun> also, if there are any new blockers, please share.

[10:15] *** ggoebel joined
[10:23] *** ggoebel left
[10:34] <nine> sena_kun: AFAIK the commit is still in there. Have any issues come up?

[10:36] <sena_kun> nine, not yet, though I have no means to do a Blin run now as usual, so I was wondering if something have show up on your (plural) side.

[10:40] *** hankache left
[10:40] *** hankache joined
[10:40] <nine> Blin would be mighty helpful...

[10:40] <sena_kun> :/

[10:42] *** hankache left
[10:42] *** hankache joined
[10:59] *** hankache left
[11:00] <dogbert11> now I'm running with optimizations on, an 8k nursery and the gc debug flag set to two. It has now stopped, in gdb, with 'non-AsyncTask fetched from eventloop active work list'

[11:02] <dogbert11> https://gist.github.com/dogbert17/e4a3993b36fe4105681c9a853d014649

[11:03] <dogbert11> nine: is it possible to make something out of this or do we need to catch things earlier?

[11:09] <nine> dogbert11: the immediate question is: what _did_ it catch?

[11:10] *** zakharyas left
[11:39] <nine> Apparently a VMNull because the array slot work_idx is NULL

[11:40] *** avar left
[11:41] *** avar joined
[11:41] *** avar left
[11:41] *** avar joined
[11:41] *** avar left
[11:42] *** avar joined
[11:42] *** avar left
[11:42] *** avar joined
[11:42] *** avar left
[11:43] *** avar joined
[11:43] *** avar left
[11:43] *** avar joined
[11:48] <dogbert11> nine: (gdb) p REPR(task_obj)->ID

[11:48] <dogbert11> value has been optimized out

[11:48] <dogbert11> :(

[11:48] <nine> Yeah, you have to get it from the source: call MVM_repr_at_pos_o(tc, tc->instance->event_loop_active, work_idx)

[11:49] <nine> Or: p ((MVMArray*)(tc->instance->event_loop_active))->body.slots.o[1]

[11:49] <dogbert11> (gdb) p ((MVMArray*)(tc->instance->event_loop_active))->body.slots.o[1]

[11:49] <dogbert11> $1 = (MVMObject *) 0x0

[11:53] <tbrowder> hi, working issue #1469 has lead to needing a CFLAGS change for libuv that may conflict with other libs. a casual look at the build situation, and confirmed by MasterDuke17, shows all objects being built with same CFLAGS. seems to me we should compile 3rdparty lin

[11:53] <tbrowder> libs with the same CFLAGS they use.

[11:54] <tbrowder> would require an overhaul of build but it would be more robust for future 3rdparty libs

[11:54] <dogbert11> nine: in case you want to try teasing the error out, here's the 'golf': https://gist.github.com/dogbert17/8eded7bd5ed8808138f81602c1781405

[11:57] <dogbert11> I have also updated the Panic gist a bit, i.e. with some 'l' commands, your 'p' command and 'info threads'

[11:57] <nine> oh a golf. That's useful!

[11:57] *** hankache joined
[11:57] <dogbert11> more like a bogey :)

[11:57] <dogbert11> I'm running with 8k nursery and GC_DEBUG=1

[11:59] <nine> of course it refuses to break in rr

[12:02] *** reportable6 left
[12:03] <nine> OTOH use Test can be removed from the golf

[12:04] *** reportable6 joined
[12:25] *** hankache left
[12:39] <nine> The segfault happens because when run-one is called args[1] is NULL

[12:43] <nine> The most curious thing about this is: since args[1] is a register it must not ever be NULL

[12:45] <dogbert11> so how can that happen?

[12:45] <dogbert11> it sounds like you've managed to repro :)

[12:58] <nine>    at SETTING::src/core.c/ThreadPoolScheduler.pm6:297  (/home/nine/rakudo/blib/CORE.c.setting.moarvm:)

[12:59] <nine> That's where the call happens

[12:59] <nine> And the NULL we get from nqp::shift($queue)

[12:59] <nine> Added an assert in ConcBlockingQueue's shift and it triggers

[13:00] <dogbert11> cool

[13:21] <lizmat> so it's shifting from the queue when it shouldn't?  or another thread beat it to it ?

[13:22] <nine> No, the whole point of ConcBlockingQueue is that it's safe to use from different threads. It's just that somehow a NULL ends up in that queue. But in both unshift and push we explicitly guard against that

[13:39] <lizmat> so the number of elems is > 0 when the shift produces a NULL, so it really sits in the queue, is what you're saying ?

[13:48] <nine> yes

[13:49] <lizmat> is it clear if the value got produced by a push or an unshift ?

[13:50] <lizmat> also: you said: "it's safe to use from different threads" 

[13:50] <lizmat> are we 200% sure of that ?

[13:51] <lizmat> because *if* the guard in unshift / push is correct, the only other way *I* see is that another thread snatched it and thus you're looking at element #1 really, and if there is none left, that'd be a NULL ?

[13:52] <nine> Well it's meant to be thread safe. Of course the implementation may have bugs

[13:53] <lizmat> well, if it walks like a duck and talks like a duck (aka , push and unshift have guarded against NULL entry)

[13:53] <jnthn> The bugs there in the past have always been about GC handling around the lock acquisitions

[13:54] <lizmat> it can only be a duck (aka, a race on the queue.shift)

[13:54] <jnthn> At least, those I can remember have :)

[13:56] <nine> Well this bug seems to require a small nursery to reproduce, so maybe there's yet another GC handling issue there

[14:02] <nine> Well the node got into the queue via push and it definitely had a value back then

[14:02] <dogbert11> (gdb) bt

[14:02] <dogbert11> #0  MVM_panic (exitCode=0, messageFormat=0x0) at src/core/exceptions.c:853

[14:03] <dogbert11> #1  0x00007ffff78d85d2 in gc_mark (tc=0x7fffe00d42e0, st=0x5555555b5178, data=0x5555576392e8, worklist=0x7fffdc1cbec0) at src/6model/reprs/MVMCode.c:48

[14:03] <dogbert11> #2  0x00007ffff7896c99 in MVM_gc_mark_collectable (tc=0x7fffe00d42e0, worklist=0x7fffdc1cbec0, new_addr=0x5555576392d0) at src/gc/collect.c:439

[14:03] <dogbert11> #3  0x00007ffff7890a40 in MVM_gc_root_add_gen2s_to_worklist (tc=0x7fffe00d42e0, worklist=0x7fffdc1cbec0) at src/gc/roots.c:349

[14:03] <dogbert11> #4  0x00007ffff7893870 in MVM_gc_collect (tc=0x7fffe00d42e0, what_to_do=1 '\001', gen=0 '\000') at src/gc/collect.c:155

[14:03] <dogbert11> #5  0x00007ffff788766f in run_gc (tc=0x7fffe00d42e0, what_to_do=1 '\001') at src/gc/orchestrate.c:443

[14:03] <dogbert11> #6  0x00007ffff78882e4 in MVM_gc_enter_from_interrupt (tc=0x7fffe00d42e0) at src/gc/orchestrate.c:728

[14:05] <dogbert11> Adding pointer %p to past fromspace to GC worklist

[14:07] <dogbert11> nine: should I do a MVM_dump_backtrace(tc) or something else

[14:08] <nine> Can you have a look at what that collectable actually is?

[14:08] <dogbert11> 48     MVM_gc_worklist_add(tc, worklist, &body->outer);    is it body->outer we want?

[14:11] *** gugod joined
[14:11] <nine> Or even body itself since that's the one containing the outdated pointer. What code object is it?

[14:12] <dogbert11> (gdb) p *body

[14:12] <dogbert11> $3 = {sf = 0x55555741f070, outer = 0x7fffdc22cbb8, code_object = 0x0, name = 0x555556d1c110, state_vars = 0x0, is_static = 1, is_compiler_stub = 0}

[14:13] <nine> name and sf->body.name are of interest

[14:15] <dogbert11> so how do I get an MVMString to something readable?

[14:15] <nine> MVM_dump_string(tc, string)

[14:15] <dogbert11> thx

[14:16] <nine> Or if it's not a debug build MVM_string_utf8_maybe_encode_C_string(tc, string)

[14:17] <dogbert11> I'll try that as well

[14:17] <dogbert11> (gdb) p MVM_string_utf8_maybe_encode_C_string(tc, body.name)

[14:17] <dogbert11> $8 = 0x7fffdc5b49b0 ""

[14:17] <dogbert11> (gdb) p MVM_string_utf8_maybe_encode_C_string(tc, body->name)

[14:17] <dogbert11> $9 = 0x7fffdc151dd0 ""

[14:17] <dogbert11> (gdb) 

[14:23] <dogbert11> I'm probably doing something wrong but it seems to be the empty string

[14:27] <nine> How on earth? It looks like we're pushing the same MVMConcBlockingQueueNode onto two different queues! A poll on the one queue sets the node's value to NULL (when it becomes the new dummy head node) and a shift on the other queue then finds the broken node

[14:27] *** domidumont left
[14:29] <dogbert11> oops

[14:29] *** domidumont joined
[14:41] *** zakharyas joined
[14:46] *** frost-lab left
[14:48] *** lucasb joined
[14:49] <nine> It gets weirder: even after replacing the FSA with plain calloc, not freeing the nodes at all anymore and commenting out the NULL assignment, I still get NULLs in node values

[14:56] <dogbert11> the plot thickens, will this be a one line fix

[14:59] <nine> I fear it will be a fix at all only when I manage to reproduce in rr. Because I'm running out of ideas. There's just no code left that would overwrite a queue node's value with NULL

[15:09] <dogbert11> and rr is not cooperating

[15:39] <tbrowder> seems embarassing to use python in our tool chain

[15:39] <nine> feel free to change that :)

[15:42] *** nevore joined
[16:18] <nine> This just doesn't make sense. It's always the ConcBlockingQueueNode's value that suddenly turns into NULL, while it's next pointer stays intact. So it's a very precise change.

[16:19] <nine> It's probably not a random memory overwrite as nothing else seems to get hit and when I replace usage of the FSA with malloc that would surely change the behavior as we're talking about different memory areas. But it stays the same

[16:20] <nine> But ConcBlockingQueueNodes are only used and modified in src/6model/reprs/ConcBlockingQueue.c and I already removed all setting to NULL

[16:20] <nine> So what's left?

[16:37] *** domidumont left
[16:46] *** nevore left
[16:52] <Geth> ¦ MoarVM: tbrowder++ created pull request #1497: Define _GNU_SOURCE for GNU builds

[16:52] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1497

[17:08] *** cog left
[17:09] *** cog joined
[18:02] *** reportable6 left
[18:02] *** reportable6 joined
[18:16] *** Altreus left
[18:51] *** MasterDuke joined
[18:52] *** zakharyas left
[19:14] *** linkable6 left
[19:14] *** linkable6 joined
[19:15] *** linkable6 left
[19:15] *** tellable6 left
[19:15] *** evalable6 left
[19:15] *** shareable6 left
[19:16] *** tellable6 joined
[19:16] *** evalable6 joined
[19:17] *** linkable6 joined
[19:18] *** shareable6 joined
[19:18] *** linkable6 left
[19:21] *** linkable6 joined
[19:27] *** shareable6 left
[19:27] *** nativecallable6 left
[19:27] *** evalable6 left
[19:27] *** linkable6 left
[19:27] *** greppable6 left
[19:27] *** bisectable6 left
[19:27] *** unicodable6 left
[19:27] *** reportable6 left
[19:27] *** squashable6 left
[19:27] *** benchable6 left
[19:27] *** statisfiable6 left
[19:27] *** committable6 left
[19:27] *** sourceable6 left
[19:27] *** bloatable6 left
[19:27] *** releasable6 left
[19:27] *** coverable6 left
[19:27] *** quotable6 left
[19:27] *** tellable6 left
[19:27] *** notable6 left
[19:45] *** zakharyas joined
[19:47] *** nativecallable6 joined
[19:48] *** bisectable6 joined
[19:48] *** notable6 joined
[19:48] *** sourceable6 joined
[19:48] *** releasable6 joined
[19:49] *** squashable6 joined
[19:49] *** coverable6 joined
[19:49] *** evalable6 joined
[19:49] *** tellable6 joined
[19:49] *** greppable6 joined
[19:49] *** committable6 joined
[19:49] *** shareable6 joined
[19:49] *** quotable6 joined
[19:50] *** reportable6 joined
[19:50] *** benchable6 joined
[19:50] *** bloatable6 joined
[19:50] *** unicodable6 joined
[19:50] *** linkable6 joined
[19:50] *** statisfiable6 joined
[19:59] <Geth> ¦ MoarVM: tbrowder++ created pull request #1498: Quell compiler warnings on Linux with gcc

[19:59] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1498

[20:01] <tbrowder> nine: see last PR, two uninitiated values giving warnings about vfork and jumps

[20:13] *** MasterDuke left
[20:13] *** MasterDuke joined
[20:19] *** zakharyas left
[20:19] <MasterDuke> just got a segfault in t/spec/S17-lowlevel/cas.t with only change being an 8k nursery

[20:25] <MasterDuke> haven't been able to catch it in rr though

[20:33] <MasterDuke> ran it under rr ~250 times, but never an error of any kind

[20:38] <dogbert11> MasterDuke: I got it as well

[20:38] <dogbert11> 0x00007ffff79b9e3b in evaluate_guards (gs=0x555558c0cac8, gs=0x555558c0cac8, callsite=0x555558c0cac8, guard_offset=0x7fffeea5ab66, tc=0x7fffe00d6ea0) at src/spesh/plugin.c:85

[20:38] <dogbert11> 85                     outcome = STABLE(test) == gs->guards[pos].u.type;

[20:39] <MasterDuke> interesting

[20:52] *** [Coke] left
[21:53] *** lucasb left
[21:54] *** kawaii left
[21:59] *** kawaii joined
[21:59] *** lucasb joined
[23:34] *** evalable6 left
[23:34] *** squashable6 left
[23:36] *** evalable6 joined
[23:37] *** squashable6 joined
