[00:39] *** dogbert17 left
[00:59] *** dogbert17 joined
[01:09] *** frost-lab joined
[02:38] *** notable6 left
[02:38] *** releasable6 left
[02:38] *** statisfiable6 left
[02:38] *** sourceable6 left
[02:38] *** committable6 left
[02:38] *** greppable6 left
[02:38] *** nativecallable6 left
[02:38] *** coverable6 left
[02:38] *** quotable6 left
[02:38] *** bloatable6 left
[02:38] *** tellable6 left
[02:38] *** squashable6 left
[02:38] *** unicodable6 left
[02:38] *** bisectable6 left
[02:38] *** shareable6 left
[02:38] *** benchable6 left
[02:38] *** evalable6 left
[02:38] *** linkable6 left
[02:38] *** bisectable6 joined
[02:39] *** bloatable6 joined
[02:39] *** shareable6 joined
[02:39] *** committable6 joined
[02:39] *** releasable6 joined
[02:39] *** sourceable6 joined
[02:39] *** quotable6 joined
[02:39] *** unicodable6 joined
[02:39] *** statisfiable6 joined
[02:39] *** tellable6 joined
[02:40] *** notable6 joined
[02:40] *** benchable6 joined
[02:40] *** greppable6 joined
[02:40] *** nativecallable6 joined
[02:40] *** squashable6 joined
[02:40] *** coverable6 joined
[02:40] *** evalable6 joined
[02:41] *** linkable6 joined
[03:41] *** bloatable6 left
[03:41] *** shareable6 left
[03:41] *** greppable6 left
[03:41] *** tellable6 left
[03:41] *** nativecallable6 left
[03:41] *** coverable6 left
[03:41] *** committable6 left
[03:41] *** bisectable6 left
[03:41] *** benchable6 left
[03:41] *** unicodable6 left
[03:41] *** notable6 left
[03:41] *** squashable6 left
[03:41] *** releasable6 left
[03:41] *** evalable6 left
[03:41] *** quotable6 left
[03:41] *** statisfiable6 left
[03:41] *** linkable6 left
[03:41] *** sourceable6 left
[03:42] *** releasable6 joined
[03:42] *** sourceable6 joined
[03:43] *** nativecallable6 joined
[03:43] *** greppable6 joined
[03:43] *** benchable6 joined
[03:43] *** evalable6 joined
[03:43] *** tellable6 joined
[03:43] *** statisfiable6 joined
[03:43] *** bisectable6 joined
[03:43] *** notable6 joined
[03:43] *** linkable6 joined
[03:43] *** committable6 joined
[03:43] *** squashable6 joined
[03:44] *** bloatable6 joined
[03:44] *** unicodable6 joined
[03:44] *** quotable6 joined
[03:44] *** coverable6 joined
[03:44] *** shareable6 joined
[05:12] *** Kaiepi left
[05:55] <nine> Snow.....everywhere 8)

[06:06] <nwc10> not here. We had snow yetsterday. And it even sort of settled for an hour. But now it's sunny and a bit cold

[06:10] <nwc10> .tell masterduke as an educated guess, two lines up should be struct MVMDLLRegistry **entry 

[06:10] <tellable6> nwc10, I'll pass your message to MasterDuke

[06:11] <nwc10> I wonder how well that "tell"s

[06:31] *** domidumont joined
[06:58] *** Kaiepi joined
[07:41] <samcv> lizmat, japhb, MasterDuke if we need to update unicode would you like me to do that?

[07:41] <samcv> and/or checkout what you are refering to

[07:58] *** sena_kun joined
[08:18] *** zakharyas joined
[08:25] <lizmat> samcv would be cool if Raku would be up to date Unicode wise, so yes, please

[08:42] <nwc10> samcv: I'd certainly like you to, because I think that you'd do a better job of it than I would.

[08:42] <nwc10> and I seem to be failing to get my "backlog of other things" down to zero(ish)

[08:42] <nwc10> and several of them have somewhat time deadlines

[08:55] <MasterDuke> .

[08:55] <tellable6> 2021-04-07T06:10:59Z #moarvm <nwc10> masterduke as an educated guess, two lines up should be struct MVMDLLRegistry ‚êÇ*‚êÇ*entry 

[08:56] <nwc10> OK, that's howit mangled it

[08:56] <MasterDuke> doesn't seem to help though

[08:56] <nwc10> pointer-to-a-pointer, not just a pointer

[08:56] <nwc10> and then deference it "more"

[08:56] <nwc10> but OK, then I don't know

[08:56] <MasterDuke> (gdb) p entry

[08:56] <MasterDuke> $1 = (struct MVMDLLRegistry **) 0x55555556fc50

[08:56] <MasterDuke> (gdb) p *entry

[08:56] <MasterDuke> $2 = (struct MVMDLLRegistry *) 0x0

[08:59] <MasterDuke> nwc10: btw, i believe that even at HEAD of master, enabling HASH_DEBUG_ITER causes valgrind to complain when doing `raku -e ''`

[09:00] <nwc10> Oh OK erk.

[09:00] <nwc10> I fear that I'm a bit busy until at least Friday

[09:01] <MasterDuke> whole bunch of 'Conditional jump or move depends on uninitialised value(s)'

[09:01] <MasterDuke> no worries

[09:02] <MasterDuke> btw, we also had an odd day yesterday. snow, sun, snow, sun, snow (but all the snow was just a couple flakes swirling around in high winds). but not that cold, though my parents in the states said it was ~20F

[09:34] <lizmat> about 3cm of snow overnight here, rain expected for the rest of the day, so probably it'll be gone in a few hours

[10:23] <MasterDuke> i thought the problem might have been that i was doing stuff too late in the destroy process, and some of the stuff in use had already been cleaned up, but moving it to the top of MVM_vm_destroy_instance didn't help

[10:26] <nine> MasterDuke: what have you got so far?

[10:27] <MasterDuke> https://github.com/MasterDuke17/MoarVM/commit/88e792b682ad9ca7bb0d5e4b12f44d70b3148ad4#diff-2f58429081863e7f7a6e5fd7c31cc6e40f7717606e45769f3709b9acf75eda03R689

[10:28] <MasterDuke> but *entry¬† is 0x0

[10:30] <MasterDuke> hm, i just copied the code i have in MVM_vm_destroy_instance and stuck it at the end of MVM_dll_load (i.e., after i know something was just inserted) and it works

[10:31] <MasterDuke> causes a segfault because it actually freed the library, but no surprise there

[10:33] <MasterDuke> oh interesting. if i run it repeatedly only sometimes is entry non-zero, even right after something was inserted!

[11:13] *** zakharyas left
[11:18] <lizmat> .ask samcv do you recall the rationale for uniprop-int / uniprop-bool / uniprop-str ?

[11:18] <tellable6> lizmat, I'll pass your message to samcv

[11:18] <lizmat> .ask samcv they are not documented and not tested, and am contemplating removing them

[11:18] <tellable6> lizmat, I'll pass your message to samcv

[11:47] *** MasterDuke left
[12:41] * jnthn wonders if any properties have both a string and integer/boolean nature

[12:42] <lizmat> not according to the current code

[12:42] <lizmat> uniprop either returns a Str a Bool or an Int

[12:43] <lizmat> well, also a Rat if we're talking about unival

[12:48] <jnthn> OK

[13:02] *** frost-lab left
[13:05] *** zakharyas joined
[13:42] <dogbert17> nine: did you have any ideas what to do with Camelia? We're still stuck with a February release.

[15:08] *** domidumont left
[15:12] *** domidumont joined
[15:21] *** leont left
[15:24] *** leont joined
[15:34] *** MasterDuke joined
[16:59] <Geth> ¬¶ MoarVM/fix_fixkey_hash_memory_corruption: c7a063e560 | (Stefan Seifert)++ | 2 files

[16:59] <Geth> ¬¶ MoarVM/fix_fixkey_hash_memory_corruption: Fix corruption of fixkey hash entries

[16:59] <Geth> ¬¶ MoarVM/fix_fixkey_hash_memory_corruption: 

[16:59] <Geth> ¬¶ MoarVM/fix_fixkey_hash_memory_corruption: Several places in the fixkey hash implementation assumed that entries will be

[16:59] <Geth> ¬¶ MoarVM/fix_fixkey_hash_memory_corruption: pointers to strings. However the hash can store arbitrary structs. So when

[16:59] <Geth> ¬¶ MoarVM/fix_fixkey_hash_memory_corruption: those structs contained more than just a pointer, often they overwrote other

[16:59] <Geth> ¬¶ MoarVM/fix_fixkey_hash_memory_corruption: entries. Fix by replacing all occurences of sizeof(MVMString ***) with

[16:59] <Geth> ¬¶ MoarVM/fix_fixkey_hash_memory_corruption: control->entry_size

[16:59] <Geth> ¬¶ MoarVM/fix_fixkey_hash_memory_corruption: review: https://github.com/MoarVM/MoarVM/commit/c7a063e560

[16:59] <Geth> ¬¶ MoarVM: niner++ created pull request #1462: Fix corruption of fixkey hash entries

[16:59] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1462

[17:00] <nine> MasterDuke: please try this ^^^

[17:09] <lizmat> dogbert17: still not seeing context ?

[17:10] *** domidumont left
[17:11] <lizmat> the confusion rises...  :-)

[17:17] *** vrurg left
[17:17] *** MasterDuke left
[17:18] *** vrurg joined
[17:18] *** vrurg left
[17:44] <lizmat> Bytecode validation error at offset 266, instruction 42:

[17:44] <lizmat> operand type 64 does not match register type 56 for op decont in frame pred

[17:44] <lizmat> how's that for an interesting error in Rakudo ?

[17:53] <lizmat> turns out something like that happens if you do nqp::unbox_s rather than a nqp::box_s

[17:54] *** zakharyas left
[18:03] *** patrickb joined
[18:03] <samcv> lizmat, well. they are mostly just useful for testing. and i guess in that case you could use nqp. But i'm thinking at least somebody may be using it, mostly to work around bugs in .uniprop

[18:03] <tellable6> 2021-04-07T11:18:30Z #moarvm <lizmat> samcv do you recall the rationale for uniprop-int / uniprop-bool / uniprop-str ?

[18:03] <tellable6> 2021-04-07T11:18:51Z #moarvm <lizmat> samcv they are not documented and not tested, and am contemplating removing them

[18:04] <lizmat> samcv: are those bugs in the HLL part or in the MoarVM part ?

[18:05] <samcv> well. could in the int/bool/str switch in rakudo. Or it could be in the MoarVM part I guess. From what I remember. But that's not really a good reason for them existing

[18:08] <samcv> lizmat, ah. see this https://github.com/Raku/roast/blob/master/S15-unicode-information/uniprop.t#L280

[18:08] <samcv> this one has strings and int values that (should) be returned.

[18:09] <lizmat> aaahh... ok, so that uniprop should actually return those as an IntStr ?

[18:13] <patrickb> o/

[18:14] <samcv> yeah i think that is probably right lizmat 

[18:14] <lizmat> ok, lemme see if I can fix that

[18:15] <samcv> well. I think moarvm would need to have both integers and strings stored. like Canonical_Combining_Class=Above_Right is number 232. And I don't think moarvm has that. But i'm a bit rusty

[18:15] <lizmat> ah, so the problem is deeper than Rakudo ?

[18:16] <lizmat> then I won't be able to fix it  :-)

[18:16] <lizmat> I could do the Rakudo part, using the right nqp ops and trying to create the IntStr

[18:38] *** MasterDuke joined
[18:50] <MasterDuke> nine: huh. rebased on top of your branch. now the behavior is (at least more) consistent, but the entry from the iterator (immediately after it was inserted into the hash) is not correct

[18:54] <nine> At least --full-cleanup doesn't crash anymore for me

[18:56] <MasterDuke> https://gist.github.com/MasterDuke17/328323baaef2b596f59e73fcd446a29d current diff

[19:00] <MasterDuke> btw, fixkey_hash has a bunch of¬† stuff like `MVMString ***indirection` or `MVMString **entry = MVM_fixkey_hash_fetch_nocheck(tc, hashtable, key);`. should those MVMStrings really be MVMObjects?

[19:02] *** vrurg joined
[19:05] <nine> MasterDuke: this works: https://gist.github.com/niner/93eda8852910d6f02b61ff6d18c59164

[19:05] <nine> So...basically I just reverted the changes you made when trying to figure out why it breaks :)

[19:07] <MasterDuke> ha

[19:07] <nine> I think there should be an MVMFixKeyHashHandle for those akin to MVMStrHashHandle

[19:10] <MasterDuke> i think i actually created one at first, but then didn't end up using it, because the strhash iterator functions didn't use it

[19:11] <MasterDuke> and my implementation was literally copying those and then `s/StrHash/FixKeyHash/g; s/str_hash/fixkey_hash/g`

[19:11] <nine> I was half way through changing the code to use MVMFixKeyHashHandle instead of MVMString*** before realizing that that wasn't actually a thing :)

[19:13] <MasterDuke> just changed to use your patch, but my 'for realz' still isn't getting printed...

[19:14] <MasterDuke> ah, entry->lib is 0x0

[19:15] <MasterDuke> blob_asciii of the hash_key is "PLXUUU""

[19:15] <nine> huh

[19:15] <MasterDuke> there's still only one entry in the hash

[19:16] <nine> which is what's expected, isn't it?

[19:16] <MasterDuke> yep

[19:16] <MasterDuke> but it's become corrupted

[19:19] <MasterDuke> the name/hash_key should be 'dynext/libperl6_ops_moar.so'

[19:21] <MasterDuke> oh, right. is it in fact safe to do this after all the other stuff before it in MVM_vm_destroy_instance? i.e., `/* Run the GC global destruction phase. After this, no 6model object pointers should be accessed. */` sounds ominous

[19:22] *** rypervenche left
[19:22] <nine> Ah, because of the MVMStrings

[19:22] <nine> That's true. So an appropriate place for the code would be before that GC run but after threads are shut down

[19:24] <MasterDuke> a new failure mode! `MoarVM panic: Internal error: zeroed target thread ID in work pass`

[19:26] <MasterDuke> heh. moved it after `/* Run the normal GC one more time to actually collect the spesh thread */` and now `blob_ascii = 0x5555555cc878 "\b"`

[19:28] <MasterDuke> same even when moved up to the top of MVM_vm_destroy_instance again

[19:29] *** rypervenche joined
[19:31] *** vrurg left
[19:35] <Geth> ¬¶ MoarVM: 41f420ede0 | (Daniel Green)++ | 6 files

[19:35] <Geth> ¬¶ MoarVM: Cleanup of a bunch of Unicode hashes

[19:35] <Geth> ¬¶ MoarVM: 

[19:35] <Geth> ¬¶ MoarVM: Move static variables to be members of MVMInstance instead. This is

[19:35] <Geth> ¬¶ MoarVM: safer if there are multiple MoarVMs running in the same process. Instead

[19:35] <Geth> ¬¶ MoarVM: of needing to coordinate initializing/destroying these global variables,

[19:35] <Geth> ¬¶ MoarVM: each instance can be responsible for its own hashes.

[19:35] <Geth> ¬¶ MoarVM: 

[19:35] <Geth> ¬¶ MoarVM: <‚Ä¶commit message has 7 more lines‚Ä¶>

[19:35] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/41f420ede0

[19:35] <Geth> ¬¶ MoarVM: 598b79e23b | MasterDuke17++ (committed using GitHub Web editor) | 6 files

[19:35] <Geth> ¬¶ MoarVM: Merge pull request #1461 from MasterDuke17/move_static_unicode_hashes_to_MVMInstance

[19:35] <Geth> ¬¶ MoarVM: 

[19:35] <Geth> ¬¶ MoarVM: Cleanup of a bunch of Unicode hashes

[19:35] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/598b79e23b

[20:03] *** patrickb left
[20:06] *** zakharyas joined
[20:16] *** vrurg joined
[20:25] *** vrurg left
[20:47] *** vrurg joined
[20:47] *** MasterDuke left
[20:47] *** MasterDuke joined
[20:51] *** vrurg left
[20:52] *** vrurg joined
[20:57] *** vrurg left
[21:03] *** zakharyas left
[23:23] *** sxmx left
[23:43] *** sxmx joined
