[00:04] *** reportable6 joined
[00:12] *** squashable6 left
[00:13] *** squashable6 joined
[00:55] *** linkable6 joined
[00:55] *** statisfiable6 joined
[00:57] *** bloatable6 joined
[01:56] *** bisectable6 joined
[01:56] *** releasable6 joined
[01:56] *** evalable6 joined
[01:57] *** unicodable6 joined
[02:57] *** nativecallable6 left
[02:57] *** coverable6 left
[02:57] *** reportable6 left
[02:57] *** tellable6 left
[02:57] *** benchable6 left
[02:57] *** squashable6 left
[02:57] *** greppable6 left
[02:57] *** quotable6 left
[02:57] *** bisectable6 left
[02:57] *** committable6 left
[02:57] *** statisfiable6 left
[02:57] *** notable6 left
[02:57] *** shareable6 left
[02:57] *** linkable6 left
[02:57] *** unicodable6 left
[02:57] *** evalable6 left
[02:57] *** bloatable6 left
[02:57] *** releasable6 left
[02:58] *** quotable6 joined
[02:58] *** releasable6 joined
[02:58] *** notable6 joined
[02:59] *** nativecallable6 joined
[03:00] *** reportable6 joined
[03:56] *** sourceable6 joined
[03:58] *** linkable6 joined
[03:58] *** committable6 joined
[03:59] *** coverable6 joined
[03:59] *** squashable6 joined
[03:59] *** evalable6 joined
[03:59] *** benchable6 joined
[04:00] *** greppable6 joined
[04:51] *** squashable6 left
[04:52] *** squashable6 joined
[04:58] *** statisfiable6 joined
[05:58] *** unicodable6 joined
[05:58] *** shareable6 joined
[05:59] *** tellable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[07:24] *** frost joined
[08:00] *** bloatable6 joined
[08:21] <Nicholas> good *, bloatable6 

[08:21] <Nicholas> jnthnwrthngtn: yes, ASAN is back to the usual disdain for MoarVM

[08:21] <Nicholas> (and shows no interest in timo's change either)

[08:49] *** frost left
[08:52] *** frost joined
[08:59] *** bisectable6 joined
[09:00] *** squashable6 left
[09:01] *** squashable6 joined
[10:24] *** squashable6 left
[11:26] *** squashable6 joined
[12:02] *** squashable6 left
[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:05] *** squashable6 joined
[13:56] *** frost left
[16:39] *** notable6 left
[16:39] *** reportable6 left
[16:39] *** squashable6 left
[16:39] *** shareable6 left
[16:39] *** committable6 left
[16:39] *** linkable6 left
[16:39] *** coverable6 left
[16:39] *** tellable6 left
[16:39] *** releasable6 left
[16:39] *** greppable6 left
[16:39] *** bloatable6 left
[16:39] *** statisfiable6 left
[16:39] *** bisectable6 left
[16:39] *** quotable6 left
[16:39] *** nativecallable6 left
[16:39] *** sourceable6 left
[16:39] *** evalable6 left
[16:39] *** benchable6 left
[16:39] *** unicodable6 left
[16:40] *** tellable6 joined
[16:40] *** bisectable6 joined
[16:40] *** releasable6 joined
[16:40] *** committable6 joined
[16:40] *** linkable6 joined
[16:40] *** nativecallable6 joined
[16:40] *** greppable6 joined
[16:41] *** shareable6 joined
[16:41] *** quotable6 joined
[16:41] *** notable6 joined
[16:42] *** reportable6 joined
[16:42] *** coverable6 joined
[17:18] <timo> made the absolutely smallest change in compile_mastop

[17:22] *** lizmat_ joined
[17:26] *** lizmat left
[17:32] <timo> callgrinding core setting compilation to get like a comparison number but ... dang

[17:36] *** squashable6 joined
[17:41] *** benchable6 joined
[17:42] *** sourceable6 joined
[17:55] *** lizmat_ left
[17:56] *** lizmat joined
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:08] *** brrt joined
[18:10] <Nicholas> good *, brrt 

[18:10] <brrt> good * Nicholas

[18:10] <brrt> any more quests for me

[18:10] <Nicholas> "JIT all the things"

[18:11] <Nicholas> (A joke)

[18:11] <Nicholas> seriously - keep having fun

[18:12] <brrt> :-)

[18:25] *** squashable6 left
[18:25] <timo> i mean, i'm still not sure how we'll be doing devirtualization of reprops and such in the exprjit 

[18:26] <timo> but that's probably not just a little weekend project

[18:28] <brrt> it's not... I forgot what was the holdup for that

[18:28] <brrt> well, I recall what was my theory at least

[18:28] <timo> probably "how to get the information were it needs to go"

[18:28] <timo> my h key is acting up today

[18:28] <brrt> the theory was to add a method to the repr to allow it to add a template

[18:28] <brrt> well, something like that

[18:29] <brrt> and then... to have some way to create an includable header file, from a template file, that you could address-and-load by name

[18:29] <brrt> and then the repr method would need to get the spesh graph so it could get facts

[18:30] <timo> tis all goes in the main moarvm repo so we can probably make it hook in all the places we need it

[18:30] <brrt> yeah

[18:30] <brrt> it's doable, it's just a bunch of plumbing

[18:31] <brrt> Makefile plumbing, too

[18:31] <timo> the spes method on the repr already gets the spesh graph so it can check facts and such

[18:31] <timo> how do we mark wat operations should go throug te repr's bonus function?

[18:32] <brrt> ehm,... oh, I had a theory of that too;

[18:33] <brrt> the first input operand should be an object; and we should know the type of that object

[18:34] <timo> don't forget our attribute related ops also take "the type that actually has the attributes" argument

[18:34] <timo> but that very often just comes from a wval 

[18:41] *** statisfiable6 joined
[18:41] *** unicodable6 joined
[18:41] <timo> what has to actually happen so that the expr template written for a given reprop in a given repr ends up in the right spot?

[18:42] *** evalable6 joined
[18:42] <timo> can we just return something specific from the function and the exprjit engine can easily do the rest?

[18:42] *** bloatable6 joined
[18:47] <timo> i wonder if we can benefit from knowing values for some registers when they are used in templates for cases where refering to a moarvm register is more expensive than having an immediate value

[19:06] <timo> m: say (2500 + 280 + 530 + 80) / 60

[19:06] <camelia> rakudo-moar a86ec91e3: OUTPUT: «56.5␤»

[19:06] <timo> oof. almost an hour to callgrind my core setting compilation

[19:26] *** squashable6 joined
[19:31] <timo> m: say 2500 / 60

[19:31] <camelia> rakudo-moar a86ec91e3: OUTPUT: «41.666667␤»

[19:48] <brrt> timo: that's mostly the idea yes; the method gets the tree, and it should be able to append its subtree for it, using templates that were generated for it

[20:03] *** brrt left
[22:12] *** sourceable6 left
[22:12] *** benchable6 left
[22:12] *** reportable6 left
[22:12] *** statisfiable6 left
[22:12] *** committable6 left
[22:12] *** coverable6 left
[22:12] *** nativecallable6 left
[22:12] *** notable6 left
[22:12] *** quotable6 left
[22:12] *** evalable6 left
[22:12] *** linkable6 left
[22:12] *** shareable6 left
[22:12] *** squashable6 left
[22:12] *** releasable6 left
[22:12] *** bisectable6 left
[22:12] *** unicodable6 left
[22:12] *** tellable6 left
[22:12] *** bloatable6 left
[22:12] *** greppable6 left
[22:12] *** squashable6 joined
[22:14] *** bisectable6 joined
[22:14] *** benchable6 joined
[22:14] *** reportable6 joined
[22:15] *** coverable6 joined
[22:15] *** unicodable6 joined
[22:15] *** sourceable6 joined
[22:15] *** releasable6 joined
[22:26] *** TempIRCLogger left
[22:26] *** TempIRCLogger joined
[22:31] <timo> i think the callgrind measurement was far too noisy

[23:12] *** quotable6 joined
[23:13] *** evalable6 joined
[23:13] *** committable6 joined
[23:15] *** greppable6 joined
[23:15] *** tellable6 joined
[23:36] <timo> so the exprjit repr function could return a template for the rest of the loop in MVM_jit_expr_tree_build to consume, or it could be asked to do all the remaining work by itself. I'm thinking we want to allow one of the two for common cases and the other for wen you need more control in your template?

[23:37] <timo> so, a status return value and a MVMJitExprTemplate ** parameter for when the/a template should be taken from te repr's exprjit function and treated as normal

[23:45] <timo> aaaanyway i have a first draft of a little bit of the C that we'd need

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: 0d5ab06374 | (Timo Paulssen)++ | 47 files

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: add new function pointer to REPROps: exprjit

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: 

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: here a repr could output a specialized tree for a given

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: op, based on whatever is in the reprdata and known facts

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: from the spesh graph.

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: review: https://github.com/MoarVM/MoarVM/commit/0d5ab06374

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: d3949ccb1a | (Timo Paulssen)++ | src/jit/expr.c

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: call a repr's exprjit function if it exists

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: 

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: (none exist at the moment)

[23:50] <Geth> ¦ MoarVM/exprjit_repr_api: review: https://github.com/MoarVM/MoarVM/commit/d3949ccb1a

[23:50] <timo> calling all brrt's for review of this ;)

