[01:06] *** sena_kun left
[01:06] *** Altai-man_ joined
[01:20] <jnthn> nine: Hm, I'm a little confused. Deserialization always creates objects in gen2, both for the reason that we expect them to live a long time, but also to avoid triggering GC.

[01:20] <jnthn> So I'm surprised that "doing so can trigger a garbage collection run" - the design was predicated on that *not* happening.

[01:20] <jnthn> Due to gen2 allocation

[02:06] *** evalable6 left
[02:06] *** linkable6 left
[02:07] *** evalable6 joined
[02:08] *** linkable6 joined
[03:16] *** leont left
[08:29] <nine> jnthn: Oh, it actually isn't the allocation that triggers the collection run. The thread gets marked blocked when ackquiring a lock and another thread triggers the GC.

[08:32] <nine> jnthn: or rather, another thread already requested a GC run and when marking the thread blocked, the deserializing thread enters the GC as well: https://gist.github.com/dogbert17/5c6a632a646087321a88bbe2bfed97fa

[09:04] *** sxmx joined
[09:48] <nine> I was curious how a NULL could end up in a decont op. Looks like it's a mis-spesh of Perl6::World's is_type method: https://gist.github.com/niner/bcd0ee3d59d25a49c3ece8327c78be6f

[09:49] <MasterDuke> nine: looking at my PR?

[09:50] <nine> The sp_fastinvoke_o invokes find_symbol which calls find_single_symbol which throws a "Could not locate compile-time value for symbol DUMP" exception. So we end up in the takehandlerresult op and then immediately return loc_2_obj. But we never set it to anything!

[09:50] <nine> MasterDuke: yep

[09:51] <MasterDuke> cool

[09:51] <nine> Makes me wonder: what makes us flip the order of the my $is_name := 0; and the find_symbol call?

[09:51] <MasterDuke> so it's not really a problem with nqp::(getobjsc|scgetdesc)?

[09:51] <nine> no

[09:53] <MasterDuke> hm. wonder if the try around this block https://github.com/Raku/nqp/blob/master/src/vm/moar/HLL/Backend.nqp#L251-L257 could go away once the NULL/mis-spesh is fixed

[09:57] <MasterDuke> benchable6: compare HEAD my $a; for ^1_000_000 { try { $a = $_; } }; ||| my $b; for ^1_000_000 { $b = $_; };

[09:57] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[09:58] <benchable6> MasterDuke, ¦HEAD: «Benchmark: ␤«timed out after 10 seconds»»

[09:58] <MasterDuke> benchable6: compare HEAD my $a; for ^100_000 { try { $a = $_; } }; ||| my $b; for ^100_000 { $b = $_; };

[09:58] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[09:58] <benchable6> MasterDuke, https://gist.github.com/523befc2ca3cc54cf4ec8e44b5c2f8f7

[10:20] *** Kaiepi joined
[11:12] <nine> Actually, even the before of method is_type looks wrong: https://gist.github.com/niner/0fa1f36ea49a64f3a8e6748b9e5f722c

[11:12] <nine> Most notably the PHI for the return value register: PHI               r2(4),   r2(3),   r2(0)

[11:12] *** Geth left
[11:13] <nine> Note how it takes r2(0), when the latest version of the register before the branch is r2(2) written in this line: https://gist.github.com/niner/0fa1f36ea49a64f3a8e6748b9e5f722c#file-gistfile1-txt-L33

[11:15] <nine> Both r2(1) and r2(2) show 0 usages and DeadWriter, but that's only correct for r2(1).

[11:27] <lizmat> is that something a sanity check on the spesh log would have spotted ?

[11:34] <lizmat> nine  ^^ ?

[11:46] <nine> don't think so

[11:49] <lizmat> too bad , please let me know if you think there *is* something that could be checked programmatically

[12:22] <nine> I just can't find the place where the usage should be added. Haven't had much contact with the code that sets up the CFG yet. I'm tempted to wait for input by jnthn++

[13:06] <MasterDuke> speaking of CFGs, i've been reading https://cfallin.org/blog/2021/01/22/cranelift-isel-2/

[13:09] *** leont joined
[14:26] *** nwc10 left
[18:01] *** Altai-man_ left
[18:03] *** sena_kun joined
[18:21] *** Geth joined
[19:00] *** zakharyas joined
[19:25] *** nwc10 joined
[21:39] *** Kaiepi left
[21:55] *** zakharyas left
[22:32] *** Kaiepi joined
