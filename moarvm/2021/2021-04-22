[03:25] *** lucasb left
[05:35] *** nativecallable6 left
[05:35] *** shareable6 left
[05:35] *** tellable6 left
[05:35] *** sourceable6 left
[05:35] *** greppable6 left
[05:35] *** quotable6 left
[05:35] *** benchable6 left
[05:35] *** bisectable6 left
[05:35] *** unicodable6 left
[05:35] *** committable6 left
[05:35] *** notable6 left
[05:35] *** evalable6 left
[05:35] *** squashable6 left
[05:35] *** linkable6 left
[05:35] *** bloatable6 left
[05:35] *** coverable6 left
[05:35] *** statisfiable6 left
[05:35] *** releasable6 left
[05:36] *** bisectable6 joined
[05:37] *** shareable6 joined
[05:37] *** releasable6 joined
[05:37] *** benchable6 joined
[05:37] *** statisfiable6 joined
[06:34] *** domidumont joined
[07:19] *** brrt joined
[07:27] *** patrickb joined
[07:45] *** zakharyas joined
[08:01] <MasterDuke> any objections to merging https://github.com/MoarVM/MoarVM/pull/1475 and https://github.com/MoarVM/MoarVM/pull/1467 ?
[08:22] * sena_kun still awaits for the release blocker
[08:46] <patrickb> sena_kun: That's the App::Uni failure and fix in https://github.com/MoarVM/MoarVM/pull/1473 correct?
[08:46] <sena_kun> patrickb, exactly.
[08:47] <MasterDuke> patrickb: thanks for the quick reviews
[08:58] <MasterDuke> patrickb: do you know if there's a way to start the jobs in a particular order? the windows ones take the longest, so i think it would make sense to start them first. they're listed first in the file, but order in there doesn't seem to match with order jobs are actually started
[09:03] <patrickb> AFAICT there is no way to control the order.
[09:04] <MasterDuke> huh
[09:09] <MasterDuke> [Coke]: how do you build rakudo on windows?
[09:22] <jnthn> morning o/
[09:22] <sena_kun> o/
[09:23] <nwc10> \o
[09:23] <lizmat>  \o/
[09:31] <MasterDuke> nine: did you have a suggestion for https://github.com/MoarVM/MoarVM/pull/1474 ?
[09:35] <MasterDuke> patrickb: why is the PWSH_DEV script needed in the windows jobs?
[09:35] *** lizmat is now known as lizmmat_
[09:35] *** lizmmat_ is now known as lizmat
[09:47] <Geth> ¦ MoarVM/master: 6 commits pushed by (Daniel Green)++, MasterDuke17++
[09:47] <Geth> ¦ MoarVM/master: 71dcb28a0d | Update Azure CI linux versions + add old versions
[09:47] <Geth> ¦ MoarVM/master: 8c979fdc68 | Use 'raku' executable instead of 'perl6' in CI
[09:47] <Geth> ¦ MoarVM/master: 7c39762078 | Use two jobs for building MoarVM and running tests
[09:47] <Geth> ¦ MoarVM/master: 5fad749eb2 | Disable coverage CI job, it doesn't work right now
[09:47] <Geth> ¦ MoarVM/master: e3decf0510 | Add a CI task that tests `--full-cleanup` works
[09:47] <Geth> ¦ MoarVM/master: adc1dc6ef1 | Merge pull request #1475 from MasterDuke17/update_azure_pipeline_os_versions
[09:47] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/9481289950b8...adc1dc6ef17b
[09:52] *** lizmat is now known as lizmat_
[09:52] *** lizmat_ is now known as lizmat
[09:52] *** lizmat is now known as lizmat_
[09:53] *** lizmat_ is now known as lizmat
[09:54] *** lizmat is now known as lizmat_
[09:54] *** lizmat_ is now known as lizmat
[09:55] <Geth> ¦ MoarVM: 53312b9fd8 | (Daniel Green)++ | 8 files
[09:55] <Geth> ¦ MoarVM: Deprecate now unused graphs_s op
[09:55] <Geth> ¦ MoarVM: 
[09:55] <Geth> ¦ MoarVM: It was removed from NQP in
[09:55] <Geth> ¦ MoarVM: https://github.com/Raku/nqp/commit/a161dbde7d190155d7521b9bee8f82e88b69d945
[09:55] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/53312b9fd8
[09:55] <Geth> ¦ MoarVM: 462c41c321 | MasterDuke17++ (committed using GitHub Web editor) | 8 files
[09:55] <Geth> ¦ MoarVM: Merge pull request #1467 from MasterDuke17/deprecate_now_unused_graphs_s_op
[09:55] <Geth> ¦ MoarVM: 
[09:55] <Geth> ¦ MoarVM: Deprecate now unused graphs_s op
[09:55] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/462c41c321
[10:11] <Geth> ¦ MoarVM: 79027bdd07 | (Stefan Seifert)++ | 6 files
[10:11] <Geth> ¦ MoarVM: Fix inlines missing synthetic deopt points
[10:11] <Geth> ¦ MoarVM: 
[10:11] <Geth> ¦ MoarVM: Since commit 3345ec36466dbae315b00960d3afedf121b08451 we have synthetic deopt
[10:11] <Geth> ¦ MoarVM: points on inserted guards. These deopt points take their index from an existing
[10:11] <Geth> ¦ MoarVM: deopt point they are linked with. This is important as otherwise we might miss
[10:11] <Geth> ¦ MoarVM: registers we need to restore when deoptimizing.
[10:11] <Geth> ¦ MoarVM: 
[10:11] <Geth> ¦ MoarVM: <…commit message has 8 more lines…>
[10:11] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/79027bdd07
[10:11] <Geth> ¦ MoarVM: 3013dcf3ba | (Jonathan Worthington)++ (committed using GitHub Web editor) | 6 files
[10:11] <Geth> ¦ MoarVM: Merge pull request #1473 from MoarVM/fix_inlines_missing_synthetic_deopt_points
[10:11] <Geth> ¦ MoarVM: 
[10:11] <Geth> ¦ MoarVM: Fix inlines missing synthetic deopt points
[10:12] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3013dcf3ba
[10:17] <patrickb> MasterDuke: Those lines turn the Powershell into a so called "Developer Console". Technically that means setting a bunch of environment variables that the msvc build toolchain requires to work.
[10:19] <MasterDuke> so might only be needed if the script calls nmake?
[10:19] <patrickb> It's not only adapting the PATH, but I think also puts the path to the Visual Studio installation in some variable.
[10:19] <MasterDuke> and not, e.g., when running nqp/rakudo tests?
[10:20] <patrickb> correct. It's only needed for running nmake, cl, ...
[10:21] <lizmat> ok, so it's time for a bump ?
[10:22] <MasterDuke> ok. i think some of the jobs after building moarvm/nqp/rakudo can be simplified then. it's kind of unfortunate that testing this requires spamming everybody with github notifications though...
[10:22] <MasterDuke> lizmat: believe so
[10:22] <lizmat> ok, will do
[10:38] <nine> MasterDuke: zctually, yes
[10:38] <nine> MasterDuke: reading the docs can help tremendously from time to time :)
[10:38] <nine> If a write() is interrupted by a signal handler before any bytes are written, then the call fails with the error EINTR; if it is interrupted after at least one byte has been written, the call succeeds, and returns the number of bytes written.
[10:38] <nine> On Linux, write() (and similar system calls) will transfer at most 0x7ffff000 (2,147,479,552) bytes, returning the number of bytes actually transferred.  (This is true on both 32-bit and 64-bit systems.)
[10:40] <nine> This actually tells us exactly what we need to do: since write() can be interrupted and not write the whole number of bytes we requested, we need to call it in a loop and keep track of how much is already written. Luckily our code does that already.
[10:41] <nine> So when we get a 64 bit number > 2^32 and can only pass on a 32 bit number, the sensible thing to do is to just pass UINT_MAX.
[10:42] <nine> The (int)bytes was not terribly wrong in so far as we would eventually write the whole buffer. But it was inefficient as worst case with a buffer size of 2^32, we'd write in 1 byte increments.
[10:43] <nine> or maybe it's 2^31, since we casted to int, not unsigned int. But you get the drift
[10:44] <nwc10> nine: likely would be better to pass an even number. Rounded down to a block size might work even better.
[10:45] <nwc10> (And not worry about what the actual block size is - just assume 65536)
[10:49] <nine> good point
[10:49] <nwc10> or maybe 2M.
[10:58] <MasterDuke> so maybe just change the `(int)bytes` to `(uint)bytes`? the problem was that the cast was going negative when bytes was too big
[10:58] <nine> No
[10:58] <nine> That would still keep that 1 byte worst case
[10:59] <nine> A simple "bytes > INT_MAX ? 65536 : bytes" should do
[11:00] <lizmat> am I understanding that all writes in Moar are done in 1-byte increments ?
[11:00] <nwc10> I don't think so. That will change to chunks of 65536 until the size drops below INT_MAX
[11:00] <nine> Maybe "bytes > (MVMuint64)INT_MAX ? 65536 : bytes"
[11:00] <nwc10> I think that ((INT_MAX >> 2) + 1) would likely be easiest
[11:01] <nine> MasterDuke: if in doubt, listen to nwc10 :D
[11:01] <nwc10> or just bytes > INT_MAX ? 1073741824 : bytes
[11:01] * nine is just an amateur at this
[11:01] <nwc10> I mess things up sometimes
[11:01] * MasterDuke is less than an amateur
[11:01] <nwc10> and not jsut coffee
[11:01] <nwc10> see. typing. Not great at that
[11:02] * lizmat never had any formal CS education
[11:02] <nwc10> me neither
[11:02] <lizmat> but has been given CS classes and has been a promoter for CS students
[11:02] <nwc10> I haven't even done that!
[11:02] <nine> You don't learn these things in CS anyway :)
[11:02] <lizmat> I don't know  :-)
[11:04] <MasterDuke> final answer is `bytes > INT_MAX ? 1073741824 : bytes`?
[11:05] <nwc10> m: 2**30
[11:05] <camelia> rakudo-moar c05b23f18: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "**" in expression "2**30" in sink context (line 1)␤»
[11:05] <nwc10> m: say 2**30
[11:05] <camelia> rakudo-moar c05b23f18: OUTPUT: «1073741824␤»
[11:05] <nwc10> yes, best suggestion for what to try
[11:05] <MasterDuke> thanks, will do
[11:09] <MasterDuke> what about for send(), same value?
[11:10] <nine> MasterDuke: what does the man page say?
[11:10] <MasterDuke> reading it now
[11:14] <MasterDuke> this looks like it might be slightly more complicated to pick a size. pausing for lunch
[11:31] *** zakharyas left
[11:39] *** LizBot joined
[11:46] <lizmat> PSA: LizBot is an experimental logger by yours truly
[11:46] <lizmat> atm, it just logs
[11:46] <brrt> welcome LizBot!
[11:47] <nwc10> LizBot: botsnack
[11:47] * nwc10 assumes that UGT implies it's always elevensies
[11:48] <nwc10> (on reflection, this could be an unhealthy concept)
[11:48] <lizmat> yeah, always elevensies is what me big  :)
[11:48] <lizmat> *made
[11:49] <brrt> 'great', is the word :-)
[11:49] <lizmat> no, I meant big  :-)
[11:50] <lizmat> I'm a lot smaller now, since I started losing weight about 1.5 years ago
[11:50] <lizmat> about 30% smaller
[11:51] <brrt> that's pretty substantial :-)
[11:51] <brrt> I imagine we'll see at the next perl community conference.
[11:51] <brrt> If indeed there will be a next one of those
[11:51] <lizmat> I won't be visiting any Perl events anymore, I *will* be visiting Raku events
[11:51] <brrt> Hmm. 
[11:52] <brrt> Best we start organizing those, then.
[11:52] <brrt> (Why, though, what's wrong with Perl events these days? Drama?)
[11:52] <lizmat> https://conf.raku.org is a good start
[11:53] <brrt> what, august 7 we'll all be vaccinated for sure.... 
[11:53] <lizmat> 1. I don't want to attend any Perl presentations anymore
[11:54] <lizmat> 2. I'm done with certain members of the Perl community
[11:54] <lizmat> 3. I may well visit social events around Perl conferences
[12:12] *** sena_kun left
[12:14] *** sena_kun joined
[12:18] <brrt> anyway, raku conf seems fun
[12:18] *** Kaeipi left
[12:20] <[Coke]> MasterDuke: Have not done so on a fresh box in ages, but building on windows requires a perl5 and one of the visual studios. I had made it work easily with msvc2017, but was having some difficulty getting it setup with 2019, which is probably on me.
[12:21] <[Coke]> (and then do the build from within the dev tools command prompt, which sets up all the env vars)
[12:21] <[Coke]> Am actually trying to get this to work on a windows 10 64-bit box with 2019 this week.
[12:21] <MasterDuke> so similar to https://github.com/MoarVM/MoarVM/blob/master/azure-pipelines.yml#L158-L161 ?
[12:22] <[Coke]> MasterDuke: there's a moar option that says "use the msvc toolchain"
[12:22] <MasterDuke> if you do, could you test whether that `set CL=/MP` does speed things up by doing the compilation in parallel or not?
[12:22] *** Kaiepi joined
[12:22] <[Coke]> I'll add taht to the list of things to try on the new box, sure
[12:23] <MasterDuke> huh, no option like that is used in the azure jobs
[12:24] <patrickb> it's not actually necessary to have a full Visual Studio installed. The BuildTools package suffices.
[12:24] <[Coke]> fair. I just have it for work anyway.
[12:25] <patrickb> See: https://github.com/rakudo/rakudo/tree/master/tools/build/binary-release/Windows#native-code-modules
[12:26] *** LizBot left
[12:26] *** LizBot joined
[12:31] *** Kaiepi left
[12:32] *** Kaeipi joined
[12:36] *** Kaeipi left
[12:40] *** Kaiepi joined
[12:41] *** LizBot left
[12:42] *** LizBot joined
[12:45] *** brrt left
[12:56] *** zakharyas joined
[13:04] *** zakharyas left
[13:04] *** shareable6 left
[13:04] *** lizmat left
[13:04] *** nwc10 left
[13:05] *** zakharyas joined
[13:05] *** shareable6 joined
[13:05] *** lizmat joined
[13:05] *** nwc10 joined
[13:08] *** zakharyas left
[13:15] <Geth> ¦ MoarVM/new-disp: 80fc8fec09 | (Jonathan Worthington)++ | src/core/interp.c
[13:15] <Geth> ¦ MoarVM/new-disp: Add assertions to inline cache resolution
[13:15] <Geth> ¦ MoarVM/new-disp: 
[13:15] <Geth> ¦ MoarVM/new-disp: So we can catch problems a little earlier when debugging.
[13:15] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/80fc8fec09
[13:15] <Geth> ¦ MoarVM/new-disp: 8f93408cca | (Jonathan Worthington)++ | 4 files
[13:15] <Geth> ¦ MoarVM/new-disp: Fix race and simplify static frame setup
[13:15] <Geth> ¦ MoarVM/new-disp: 
[13:15] <Geth> ¦ MoarVM/new-disp: The function `prepare_and_verify_static_frame` is only called from the
[13:15] <Geth> ¦ MoarVM/new-disp: instrumentation barrier routine, so it need not obtain a lock that is
[13:15] <Geth> ¦ MoarVM/new-disp: always obtained by the instrumentation barrier routine. Furthermore,
[13:15] <Geth> ¦ MoarVM/new-disp: it need not check the instrumentation level is zero (that's also done in
[13:15] <Geth> ¦ MoarVM/new-disp: the caller). Those are the simplifications.
[13:15] <Geth> ¦ MoarVM/new-disp: <…commit message has 16 more lines…>
[13:15] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8f93408cca
[13:15] <Geth> ¦ MoarVM/new-disp: 09e8dc9be3 | (Jonathan Worthington)++ | src/core/frame.c
[13:15] <Geth> ¦ MoarVM/new-disp: Add a couple of MVM_UNLIKELY
[13:15] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/09e8dc9be3
[13:20] *** zakharyas joined
[13:20] <jnthn> Hmm, this segv feels a little familiar...
[13:20] <jnthn> Thread 1 "moar" received signal SIGSEGV, Segmentation fault.
[13:20] <jnthn> 0x00007ffff796af0d in MVM_spesh_arg_guard_gc_mark (tc=0x55555560a080, ag=0x5555556519a0,  worklist=0x555555f3c160) at src/spesh/arg_guard.c:611
[13:20] <jnthn> 611	                    MVM_gc_worklist_add(tc, worklist, &(ag->nodes[i].st));
[13:22] <MasterDuke> when was new-disp last rebased?
[13:23] <MasterDuke> looks like relatively recently
[13:23] <jnthn> Probably O(weeks) ago
[13:23] <jnthn> Thing is I thought this was the segv we saw in a branch
[13:24] <jnthn> But yeah, if it looks familiar to you too, maybe I should rebase
[13:24] <MasterDuke> my remove opt branch probably
[13:24] <jnthn> Today's discovery: if construction work is ruining my concentration, cranking up metal to cover it helps
[13:25] <jnthn> Maybe I'll try a rebase before I got debugging
[13:26] <nwc10> r̈ëb̈äs̈ë!
[13:26] <nwc10> r̈e􏿽xCC􏿽x88b̈a􏿽xCC􏿽x88s̈e􏿽xCC􏿽x88!
[13:35] <jnthn> Rebase wasn't so bad this time, at least.
[13:36] <MasterDuke> nwc10: wouldn't `bytes > 1073741824 ? 1073741824 : bytes` make sense instead of `bytes > INT_MAX:w ? 1073741824 : bytes`
[13:37] <MasterDuke> minus the
[13:37] <MasterDuke> ':w'
[13:37] <MasterDuke> on a roll with my typing right now
[13:37] <jnthn> Darn, still segfaulty
[13:38] <Geth> ¦ MoarVM/new-disp: 212 commits pushed by (Jonathan Worthington)++, (Timo Paulssen)++, (Daniel Green)++
[13:38] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/compare/09e8dc9be3df...6c913bc9df50
[13:39] <MasterDuke> jnthn: https://colabti.org/irclogger/irclogger_log/moarvm?date=2021-03-30#l111
[13:39] <Geth> ¦ MoarVM/new-disp: 307cc798f6 | (Jonathan Worthington)++ | 4 files
[13:39] <Geth> ¦ MoarVM/new-disp: Fix race and simplify static frame setup
[13:39] <Geth> ¦ MoarVM/new-disp: 
[13:39] <Geth> ¦ MoarVM/new-disp: The function `prepare_and_verify_static_frame` is only called from the
[13:39] <Geth> ¦ MoarVM/new-disp: instrumentation barrier routine, so it need not obtain a lock that is
[13:39] <Geth> ¦ MoarVM/new-disp: always obtained by the instrumentation barrier routine. Furthermore,
[13:39] <Geth> ¦ MoarVM/new-disp: it need not check the instrumentation level is zero (that's also done in
[13:39] <Geth> ¦ MoarVM/new-disp: the caller). Those are the simplifications.
[13:39] <Geth> ¦ MoarVM/new-disp: <…commit message has 16 more lines…>
[13:39] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/307cc798f6
[13:39] <Geth> ¦ MoarVM/new-disp: 24e5152088 | (Jonathan Worthington)++ | src/core/frame.c
[13:39] <Geth> ¦ MoarVM/new-disp: Add a couple of MVM_UNLIKELY
[13:39] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/24e5152088
[13:41] <jnthn> MasterDuke: ooh, thanks. So did that fix ever make it into master?
[13:43] <MasterDuke> i don't think so...but i think nine is the person to ask
[13:44] <jnthn> "The head commit of new-disp is the tweak for gen2 candidates" - oh, that implies I tried to fix it
[13:45] <jnthn> Yes, 67ad85e1bd1
[13:46] <jnthn> But then nine++ discovered that more is needed
[13:55] <Geth> ¦ MoarVM/new-disp: 38380c9e2c | (Jonathan Worthington)++ | src/6model/reprs/MVMSpeshCandidate.c
[13:55] <Geth> ¦ MoarVM/new-disp: Fix unmarked potential gen2 -> nursery references
[13:55] <Geth> ¦ MoarVM/new-disp: 
[13:55] <Geth> ¦ MoarVM/new-disp: The MVMStaticFrameSpesh holds the argument guard tree, which may in turn
[13:55] <Geth> ¦ MoarVM/new-disp: point to nursery objects. We don't currently do those writes through
[13:55] <Geth> ¦ MoarVM/new-disp: MVM_ASSIGN_REF. For now, conservatively always have the object checked
[13:55] <Geth> ¦ MoarVM/new-disp: for nursery objects on the next collection. nine++ for working this out.
[13:55] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/38380c9e2c
[13:55] <jnthn> Yay, seems far more stable now :)
[13:56] <jnthn> The only `make test` failures in new-disp for Raku now are because of my new-disp-callsame and similar additions, which are temporary workarounds.
[13:56] <MasterDuke> nice
[13:58] <jnthn> Only a handful of spectest failures too. Of course, we're not fully using new-disp yet
[13:59] <jnthn> The segv is interesting
[13:59] <nwc10> MasterDuke: Yes, I think so. Seems clearer. It's "write 1G at most"
[14:00] <nwc10> by the time you're attempting to write blobs of 1G or greater, it seems a bit nuts to presume that it matters whether it's 1 system call. It's certainly not going to be atomic at any lower level
[14:04] <nwc10> nine: 
[14:04] <nwc10> oops
[14:05] <nwc10> jnthn: well, ASAN got through the NQP build with all the env vars turned on
[14:05] <nwc10> and didn't bat an eyelid
[14:05] <nwc10> (or anything else)
[14:05] <nwc10> unlike the neighbour's cat, which seemed to think that my finger was a mouse. Or at least, something worth blatting.
[14:05] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1474 updated
[14:06] <nwc10> (this was actually a couple of weeks ago. Silly thing doesn't realise that fingers are useful - they can open catfood tins)
[14:07] <jnthn> Ouch, if this was batting with claws enabled
[14:08] <nwc10> yes, but one front foot
[14:08] <jnthn> Glad it builds for you now. I'm looking into a segv that reliably happens in make spectest at the moment
[14:08] <nwc10> it wasn't like I went to tickle its tummy.
[14:16] <nwc10> (for anyone not familiar with cats, what can happen next is that the two front feet grab your hand and the two back legs attempt to "kill" it - you get very long and deep scratches)
[14:16] <nwc10> dogs do not do this.
[14:23] <Geth> ¦ MoarVM/new-disp: 413735ea4a | (Jonathan Worthington)++ | src/core/interp.c
[14:23] <Geth> ¦ MoarVM/new-disp: Use correct bytecode address for IC lookup
[14:23] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/413735ea4a
[14:24] <jnthn> And that's the segv fixed
[14:24] <jnthn> It seems the remaining spectests I fail are because new-disp doesn't yet implement the latest Raku coercion protocol
[14:27] <MasterDuke> so just a rebase is required? or something more?
[14:27] <jnthn> More
[14:28] <MasterDuke> ah
[14:28] <jnthn> Nothing MoarVM side, in theory.
[14:30] <MasterDuke> so merge new-disp in moarvm today and it gets a full day of testing before the release, i assume that's the plan?
[14:31] <jnthn> haha
[14:31] <MasterDuke> nothing risky there
[14:31] <jnthn> nqp and rakudo HEAD won't build on it, because I already removed spesh plugins
[14:31] <jnthn> (To make sure I'd already ported over everything else)
[14:32] *** lucasb joined
[14:32] <MasterDuke> probably wise
[14:34] *** lucasb left
[14:35] *** lucasb joined
[14:36] *** lucasb left
[14:38] <jnthn> Ah, the spesh assignment plugin was updated in the simplest possible way (e.g. doesn't really optimize the coercion case at all), and I can easily steal that change
[14:43] <jnthn> And with that, only t/spec/S32-io/io-path-subclasses.t fails
[14:44] <jnthn> Guess I'll look at that before I go and do the next big round of breakage :)
[14:46] <MasterDuke> wow, very cool
[14:49] <jnthn> Ah, I think I know which todo this will be :)
[14:50] *** brrt joined
[14:54] *** LizBot left
[14:54] *** LizBot joined
[14:55] *** LizBot left
[14:55] *** LizBot joined
[15:13] <nwc10> jnthn: current new-disp master/master/master fails t/04-nativecall/18-routine-sig-sanity.t
[15:13] <nwc10> with all the env and debug stuff:
[15:13] <nwc10> ok 33 - Method are silly
[15:13] <nwc10> MoarVM panic: Invalid owner in item added to GC worklist
[15:13] <nwc10> Aborted
[15:13] <nwc10> So there's still one more of those to be found
[15:16] <jnthn> grmbl
[15:17] *** LizBot left
[15:17] *** LizBot joined
[15:18] <Geth> ¦ MoarVM/new-disp: bd7405be68 | (Jonathan Worthington)++ | src/core/args.c
[15:18] <Geth> ¦ MoarVM/new-disp: De-dupe named args in new dispatch flattening
[15:18] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/bd7405be68
[15:18] <jnthn> With that todo todone, make spectest on new-disp (without the magic go-boom flags) passes. Of course, this is because we're not *really* using new-disp in full yet.
[15:19] <nwc10> woohoo!
[15:19] <nwc10> how is the beer fridge?
[15:19] *** brrt left
[15:19] <nwc10> I'm half doing well - 2 dry days. And half not - 0 days since last hot beverage mishap
[15:22] <jnthn> Mon/Tue are my designated dry days, and yesterday I only had one, so it's not been raided for a while
[15:23] *** LizBot left
[15:23] <jnthn> That said, I've not ordered fresh interesting stuff for a while, so the stout/porter section is dwindling, and the interesting Belgian stuff section isn't looking too good either.
[15:23] *** LizBot joined
[15:24] <jnthn> I keep reading that bot's host mask as "free dominator". Working on compilers has ruined me.
[15:25] <MasterDuke> i've been surprised at how hard it is to find belgians here. but walked past an actual beer store tuesday morning, though sadly it was closed at the time, so plan to go back and see if they have a better selection
[15:26] <jnthn> It just keeps getting easier for me to do that. There's a Belgian beer pub 15 minutes walk away. It can't open at the moment, but it can sell bottles. That's been there as long as I've lived in this district.
[15:27] <MasterDuke> every place had duvel and leffe, but that's it, i haven't seen a single other belgian
[15:27] <jnthn> That's...limited.
[15:27] <jnthn> The online grocery store I use can offer Kwak most of the time.
[15:27] <jnthn> And the two you mentioned.
[15:28] <jnthn> Two weekends ago they opened a new craft beer shop around 20 minutes away. It's a new branch of a shop I already know, but it's the other side of the city, so quite an effort to go to.
[15:28] <jnthn> Uh, the original branch is an effort to go to
[15:29] <jnthn> The new one isn't. I meant to write 20 minutes *walk*. Which is obviously convenient. :)
[15:29] *** LizBot left
[15:30] *** LizBot joined
[15:30] <nwc10> and I read  "original branch is an effort" and thought about version control
[15:31] <jnthn> When I visited the new place they had 2 rooms but only 1 room filled with fridges/shelves of beer. They promised soon their would be "spousta piv" :)
[15:31] <jnthn> Which, if they fill the second room too, will certainly be the case.
[15:31] <jnthn> Anyway, apparently I moved to a good part of the city :)
[15:32] <jnthn> Aha, t/04-nativecall/18-routine-sig-sanity.t blows up
[15:32] <jnthn> (for me too, with the flags)
[15:32] <nwc10> spousta? I figure the other word is pivo
[15:33] <jnthn> "plenty"
[15:33] <nwc10> aha!
[15:33] <nwc10> some day I hope to visit this place
[15:34] *** brrt joined
[15:36] <MasterDuke> belgium is significantly closer to me now than it used to be (6h drive instead of 8h flight), so i'm hoping we get to drive there when things get a bit better. i visited in high school, but didn't really have an appreciation for abby ales at the time...
[15:36] *** Kaiepi left
[15:36] *** Kaiepi joined
[15:37] <nwc10> When beer's involved, I generally prefer other-than-drive to get back (and there)
[15:37] <jnthn> Hm, we're in MVM_disp_inline_cache_mark when we add the pointer to a past fromspace to the worklist
[15:38] <jnthn> So I'm obviously guilty for that :)
[15:38] <MasterDuke> true, but 6h is long enough there's going to be an overnight stay upon arrival
[15:38] * lizmat cycled about 40km in Belgium yesterday  :-)
[15:38] <jnthn> oh, MVM_disp_program_mark is on top of it
[15:38] <lizmat> ( it's allowed again )
[15:38] <nwc10> woohoo!
[15:39] <nwc10> but you're making us jealous
[15:40] *** LizBot left
[15:40] *** LizBot joined
[15:40] <MasterDuke> that time i visited belgium was a day trip from our longer visit to the netherlands, we were staying in Maastricht
[15:40] <lizmat> sadly, no establishments open yet in Belgium :-(
[15:40] <lizmat> MasterDuke: I live about 35km from Maastricht
[15:40] <MasterDuke> but we took a bus, had to save our energy for the soccer games we were playing
[15:42] *** patrickb left
[15:42] <MasterDuke> it was a great trip, i'd been looking forward to going back to the netherlands for yapc:2020 (i think that's the one that was supposed to be in amsterdam?)
[15:43] *** brrt left
[15:44] <MasterDuke> lizmat: sadly i had no perl connections then, didn't get first exposed to it until 2-3 years later
[15:44] <lizmat> yeah, another on in Amsterdam
[15:44] <lizmat> they've also been in 2001 and 2018
[15:46] *** tellable6 joined
[15:46] *** LizBot left
[15:46] *** LizBot joined
[15:46] <MasterDuke> i've never really been to a yapc. showed up at the end of the last day of the one in DC, and been to two london perl conferences, but that's it
[15:46] <lizmat> well, that's something..  :-)
[15:47] <MasterDuke> anyway, afk to grab a beer and head to the garden to push the kids on their swing &
[15:47] <nine> jnthn: just to be sure. While removal of DECONT facts from add_facts in src/spesh/args.c is enough to fix the bug, there's then no longer a reason to handle DECONT facts in spesh arg guards, is there? So that should be removed as well.
[15:48] <nine> (pushing kids)++
[15:48] <nine> .oO(well that may have come out wrong...)
[15:49] <nwc10> I push them away, but they keep coming back. Am I doing something wrong? :-)
[15:50] <nwc10> aha yes, related - our code term for "swing" was "simple pendulum", as that way the children didn't figure out what the topic was
[15:53] *** LizBot left
[15:54] <jnthn> nine: In the arg guard tree it's not about facts so much as candidate selection
[15:54] <jnthn> nine: And there it still matters
[15:54] *** LizBot joined
[15:54] <jnthn> But I don't think we can end up with memory safety violations there
[15:55] <jnthn> This latest GC issue is a bit odd; everything looks about correct in the inline cache in so far as it enforces barriers
[16:01] <jnthn> ah, language class time. Guess this is tomorrow's bug hunt
[16:06] *** LizBot left
[16:06] *** LizBot joined
[16:22] *** LizBot left
[16:22] *** LizBot joined
[16:23] *** LizBot left
[16:23] *** LizBot joined
[16:25] *** greppable6 joined
[16:26] *** brrt joined
[16:36] <Geth> ¦ MoarVM/fix_spesh_missing_writes_to_containers: c8c1b4f2b4 | (Stefan Seifert)++ | src/spesh/args.c
[16:36] <Geth> ¦ MoarVM/fix_spesh_missing_writes_to_containers: Fix spesh missing writes to containers
[16:36] <Geth> ¦ MoarVM/fix_spesh_missing_writes_to_containers: 
[16:36] <Geth> ¦ MoarVM/fix_spesh_missing_writes_to_containers: When containers get passed as arguments (i.e. read/write arguments), we collect
[16:36] <Geth> ¦ MoarVM/fix_spesh_missing_writes_to_containers: statistics on these containers' contents and create facts from them. These
[16:36] <Geth> ¦ MoarVM/fix_spesh_missing_writes_to_containers: facts are guarded by the arg guard tree which is used for selecting spesh
[16:36] <Geth> ¦ MoarVM/fix_spesh_missing_writes_to_containers: candidates, so a candidate relying on these facts will only be run, when the
[16:36] <Geth> ¦ MoarVM/fix_spesh_missing_writes_to_containers: facts hold.
[16:37] <Geth> ¦ MoarVM/fix_spesh_missing_writes_to_containers: <…commit message has 12 more lines…>
[16:37] <Geth> ¦ MoarVM/fix_spesh_missing_writes_to_containers: review: https://github.com/MoarVM/MoarVM/commit/c8c1b4f2b4
[16:37] <Geth> ¦ MoarVM: niner++ created pull request #1476: Fix spesh missing writes to containers
[16:37] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1476
[16:54] *** domidumont left
[17:06] *** lucasb joined
[17:35] *** quotable6 joined
[17:35] *** MasterDuke left
[17:41] *** zakharyas left
[17:43] *** sxmx1 joined
[17:44] *** brrt left
[17:52] <Geth> ¦ MoarVM: b553aba6f8 | (Stefan Seifert)++ | src/core/args.c
[17:52] <Geth> ¦ MoarVM: Remove double-MVMROOT of result in MVM_args_set_result_obj
[17:52] <Geth> ¦ MoarVM: 
[17:52] <Geth> ¦ MoarVM: Commit 90252a8fe8af3efdb307f29b6d91b3cfbd1f1d09 added missing MVMROOTing of
[17:52] <Geth> ¦ MoarVM: result to MVM_args_set_result_str. When doing so I looked around for similar
[17:52] <Geth> ¦ MoarVM: errors and thought I found one in MVM_args_set_result_obj. A second look
[17:52] <Geth> ¦ MoarVM: would have revealed that result was already MVMROOTed just outside the
[17:52] <Geth> ¦ MoarVM: if/else block though.
[17:52] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b553aba6f8
[17:59] *** committable6 joined
[18:04] <nwc10> is double routing just an inefficiency, or can it result in double updates to the same memory location, which cause (later) corruption? I'm wondering how serious it is
[18:05] <lizmat> is rooting re-entrant ?
[18:05] *** LizBot left
[18:35] <lizmat> ‘There is a risk that a malfunction of the SpaceX vehicle during these activities will create an overpressure event that can break windows,’
[18:35] <lizmat> .oO( big bada boom! )
[18:39] <jnthn> nwc10: It may cause double updates, but with the same new address, so it's harmless
[18:44] <japhb> "overpressure event"  *snrk*
[18:45] <lizmat> rapid unexpected disassembly might cause an overpressure event :-)
[19:28] <sena_kun> bad news, it seems we introduced another regression. :|
[19:28] <tellable6> 2021-04-22T18:51:48Z #raku-dev <vrurg> sena_kun https://gist.github.com/vrurg/a608e01a44e5030dccfae4205359cf9c
[19:28] <sena_kun> I am checking correctness of the bisect.
[19:43] *** MasterDuke joined
[19:43] *** linkable6 joined
[19:46] <MasterDuke> sena_kun: the GTK::Simple one is it doing something wrong and the test now correctly failing. https://github.com/finanalyst/GTK-Simple/blob/master/lib/GTK/Simple/Scheduler.pm6#L33 nqp::hllize is only supposed to take one arg
[19:48] <sena_kun> MasterDuke, so we just hid the bug then?
[19:50] <MasterDuke> exactly
[19:50] <lizmat> that's maybe the result of losing that extra parameter for all nqp ops
[19:50] <lizmat> that was only intended for internal usage ?
[19:50] <sena_kun> Now that's a very difficult situation.
[19:50] <MasterDuke> https://github.com/finanalyst/GTK-Simple/pull/104
[19:51] <sena_kun> I mean, yes, nqp is "we can break it internal thing", but GTK::Simple is not something I'd be ok with breaking.
[19:52] <lizmat> it's a backward compatible PR
[19:52] <sena_kun> phew
[19:54] <MasterDuke> IO::Handle::Rollover bisects to a commit by vrurg
[19:55] <vrurg> I think it's a false positive. Otherwise it'd be triggered much earlier.
[19:55] * sena_kun re-checks
[19:56] <vrurg> The commit is from mid-March and we already had a couple of blin runs since.
[19:56] <sena_kun> oh, yes, this makes sense
[19:56] <sena_kun> the module is not stable then somehow
[19:56] <MasterDuke> 'Exception message: Failed to open file /tmp/rollover/rollover.txt: No such file or directory', something with how you're running bling?
[19:57] <MasterDuke> *blin
[19:57] <sena_kun> ===> Fetching [FAIL]: IO::Handle::Rollover:ver<1.3.1>:auth<github:atroxaper> from http://www.cpan.org/authors/id/A/AT/ATROXAPER/Perl6/Handle-Rollover-1.3.1.tar.gz
[19:57] <sena_kun> hmm
[19:58] <vrurg> Nothing special about it. Just a disposable VM.
[19:58] *** leont joined
[19:59] * sena_kun does some testing
[19:59] <nine> MasterDuke: is that PR actually correct?
[20:01] <nine> Wouldn't it with 2 arguments take the first one as the target register?
[20:01] <sena_kun> So far I can confirm it fails on HEAD and works on 03.
[20:03] <MasterDuke> hmm, guess it should be `$task := Any` instead
[20:04] <MasterDuke> then i don't understand the point of the original code
[20:04] <nine> Could be. If my reading of QASTCompilerMAST is correct. Could also be that making room for a target register was just the reason for accepting an additional arg, but then it wouldn't be used this way
[20:04] <nine> Well neither interpretation of that code seems to make sense :)
[20:05] <MasterDuke> committable6: 2021.03 use nqp; my class Queue is repr("ConcBlockingQueue") { }; my $queue := nqp::create(Queue); my Mu $task := nqp::queuepoll($queue); dd nqp::hllize($task, Any)
[20:05] <committable6> MasterDuke, ¦2021.03: «Any␤»
[20:05] <MasterDuke> committable6: HEAD use nqp; my class Queue is repr("ConcBlockingQueue") { }; my $queue := nqp::create(Queue); my Mu $task := nqp::queuepoll($queue); dd nqp::hllize($task)
[20:05] <committable6> MasterDuke, ¦HEAD(c05b23f): «Mu␤»
[20:06] <MasterDuke> committable6: HEAD use nqp; my class Queue is repr("ConcBlockingQueue") { }; my $queue := nqp::create(Queue); my Mu $task := nqp::queuepoll($queue); dd $task := Any
[20:06] <committable6> MasterDuke, ¦HEAD(c05b23f): «Any␤»
[20:07] <nine> https://github.com/finanalyst/GTK-Simple/commit/8102abae648b114093088c9103b06bef680c9615
[20:07] <MasterDuke> those aren't exact replications of the code
[20:08] <MasterDuke> ha, i've never seen `nqp::p6parcel` before
[20:08] <nine> committable6: 2021.03 use nqp; my $task = 1; nqp::hllize($task, Any); dd $task;
[20:08] <committable6> nine, ¦2021.03: «===SORRY!===␤Cannot find method 'op' on object of type QAST::Var␤ «exit code = 1»»
[20:09] <nine> committable6: 2021.03 use nqp; my Mu $task = 1; nqp::hllize($task, Any); dd $task;
[20:09] <committable6> nine, ¦2021.03: «===SORRY!===␤Cannot find method 'op' on object of type QAST::Var␤ «exit code = 1»»
[20:09] <nine> committable6: 2021.03 use nqp; my Mu $task := 1; nqp::hllize($task, Any); dd $task;
[20:09] <committable6> nine, ¦2021.03: «===SORRY!===␤Cannot find method 'op' on object of type QAST::Var␤ «exit code = 1»»
[20:09] <nine> I give up...
[20:09] <lizmat> p6parcel is pre-GLR is it not ?
[20:09] <nine> -    nqp::p6parcel($rpa, Any);
[20:09] <nine> +    nqp::p6bindattrinvres(nqp::create(List), List, '$!reified', $rpa)
[20:10] <lizmat> ah, *phew*
[20:11] <nine> ChangeLog says for 2015.9 Parcel is no longer a type, use List instead
[20:13] *** lizmat is now known as lismat
[20:13] *** lismat is now known as lizmat
[20:15] *** lizmat is now known as lismat
[20:15] *** lismat is now known as lizmat
[20:16] <MasterDuke> just removing that second argument does make the test pass, but i suspect that code isn't getting exercised
[20:16] <MasterDuke> it isn't
[20:19] <nine> Well with your PR the code makes most sense. Who knows, maybe it fixed another bug as well?
[20:23] <MasterDuke> m: use nqp; my $a := nqp::list(1, 2, 3); dd $a.WHAT; my $b := nqp::hllize($a); dd $b.WHAT
[20:23] <camelia> rakudo-moar c05b23f18: OUTPUT: «()␤List␤»
[20:24] <MasterDuke> so yeah, i think the PR is correct
[20:25] <MasterDuke> so switching modules, i can repro the fails in IO::Handle::Rollober
[20:29] <sena_kun> MasterDuke, it's odd, so far I can reliably have no issues on the previous release, but on HEAD it always fails for me.
[20:29] <sena_kun> But on the commit it was bisected to, it works.
[20:33] <vrurg> sena_kun: was you bisecting IO::Handle::Rollover?
[20:40] <sena_kun> vrurg, ? Blin bisected it to your commit, but I think it's bad. I would say the test can be race-y, but I don't understand how it always passes on release and fails on HEAD for me.
[20:40] <sena_kun> s/it's bad/the commit it bisected to is innocent/
[20:41] <vrurg> sena_kun: my point is wether it makes sense to bisect manually. But I'm doing it anyway already.
[20:41] <sena_kun> vrurg, yes, you won't be doing double work this way.
[20:41] <sena_kun> *"duplicated work" maybe
[20:45] <vrurg> I have 95% of bisection automated, so it's not much work anyway.
[21:04] *** Kaiepi left
[21:04] *** Kaiepi joined
[21:39] *** dogbert12 joined
[21:41] *** dogbert17 left
[21:44] *** LizBot joined
[21:48] *** dogbert17 joined
[21:52] *** dogbert12 left
[22:29] *** sena_kun left
[22:54] *** dogbert11 joined
[22:58] *** dogbert17 left
[23:40] *** nativecallable6 joined
