[00:16] *** sxmx joined
[00:40] *** squashable6 left
[00:40] *** squashable6 joined
[01:22] *** squashable6 left
[01:24] *** squashable6 joined
[06:00] *** mtj left
[06:03] *** mtj joined
[09:11] *** benchable6 left
[09:11] *** bloatable6 left
[09:11] *** committable6 left
[09:11] *** shareable6 left
[09:11] *** nativecallable6 left
[09:11] *** sourceable6 left
[09:11] *** quotable6 left
[09:11] *** bisectable6 left
[09:11] *** evalable6 left
[09:11] *** greppable6 left
[09:12] *** coverable6 left
[09:12] *** unicodable6 left
[09:12] *** linkable6 left
[09:12] *** squashable6 left
[09:12] *** notable6 left
[09:12] *** statisfiable6 left
[09:12] *** tellable6 left
[09:12] *** releasable6 left
[09:12] *** bisectable6 joined
[09:12] *** sourceable6 joined
[09:12] *** shareable6 joined
[09:13] *** linkable6 joined
[09:13] *** quotable6 joined
[09:13] *** nativecallable6 joined
[09:13] *** committable6 joined
[09:14] *** greppable6 joined
[09:14] *** statisfiable6 joined
[09:14] *** unicodable6 joined
[09:14] *** coverable6 joined
[09:14] *** releasable6 joined
[09:14] *** notable6 joined
[09:14] *** tellable6 joined
[09:14] *** squashable6 joined
[09:14] *** benchable6 joined
[09:14] *** evalable6 joined
[09:15] *** bloatable6 joined
[10:57] <nine> I think I've fixed the final remaining 32 bit signed extension JIT issues in this commit :) https://github.com/MoarVM/MoarVM/commit/dba4b528eab88ffbed915ad5c9151a1466d31027

[10:59] <lizmat> nine++

[11:00] <lizmat> missing Geth again  :-(

[11:00] <lizmat> the decont logging wasn't reverted yet, right ?

[11:00] <nine> don't think so

[11:40] <dogbert17> am I correct in assuming the the decont log fix was aimed at providing spesh with more accurate statistics thereby improving its results?

[11:40] <dogbert17> *that the

[11:42] <dogbert17> one of the test programs I run from time to time has improved from taking 15s -> 10s thanks to that fix (well; I believe it's that fix anyway :)

[11:58] <lizmat> yes, that was the idea

[12:11] <MasterDuke> nine: so you checked all the functions your plugin found?

[12:34] <dogbert17> hmm, there are a few spectest failures

[12:40] <MasterDuke> nqp: for nqp::split(",", "abc,def", "ghasdfi") { say($_) } # uh yeah, wtf

[12:40] <camelia> nqp-moarvm: OUTPUT: «ghasdfi␤»

[12:40] <MasterDuke> nqp: for nqp::split(",", "abc,def") { say($_) } # no wtf

[12:40] <camelia> nqp-moarvm: OUTPUT: «abc␤def␤»

[12:41] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/master/src/core/oplist#L279 only supposed to take two args

[12:42] * dogbert17 turns out that dogbert17 ran the spectest suite with a 100% full disk which isn't a good idea :(

[13:35] <MasterDuke> https://gist.github.com/MasterDuke17/8988a89ded2bbaa51e0518f7a0a5370b some gdb info of the above split. GET_REG(cur_op, 2).s is "abc,def" and GET_REG(cur_op, 4).s is "ghasdfi"

[13:36] <MasterDuke> GET_REG(cur_op, 2).s should be "," and GET_REG(cur_op, 4).s should be "abc,def"

[13:39] <MasterDuke> nqp-j: for nqp::split(",", "abc,def", "ghasdfi") { say($_) } # uh yeah, wtf

[13:39] <bartolin_> ... "Operation 'split' requires 2 operands"

[13:39] * bartolin_ just tried that out

[13:39] <MasterDuke> thanks

[13:39] <bartolin_> :)

[13:42] <MasterDuke> https://github.com/Raku/nqp/blob/master/src/vm/moar/QAST/QASTOperationsMAST.nqp#L2461 doesn't seem anything special about it's handling here...

[14:09] <MasterDuke> gist updated with bytecode. i can never read it well enough figure stuff out, but here the three strings are referenced https://gist.github.com/MasterDuke17/8988a89ded2bbaa51e0518f7a0a5370b#file-gdb-log-L51-L55

[15:30] *** domidumont joined
[16:07] *** zakharyas joined
[17:23] *** domidumont left
[17:35] <nine> MasterDuke: yes

[17:47] <nine> I think QASTOperationsMAST.compile_mastop has an off-by-one error in arg count checking

[17:48] <nine> nqp: note(nqp::eq_i(1, 1))

[17:48] <camelia> nqp-moarvm: OUTPUT: «No registered operation handler for 'eq_i'␤   at gen/moar/stage2/QAST.nqp:1503  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_op)␤ from gen/moar/stage2/QAST.nqp:6172  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_node)…»

[17:48] <nine> nqp: note(nqp::iseq_i(1, 1))

[17:48] <camelia> nqp-moarvm: OUTPUT: «1␤»

[17:48] <nine> nqp: note(nqp::iseq_i(1, 1, 2))

[17:48] <camelia> nqp-moarvm: OUTPUT: «0␤»

[17:48] <nine> nqp: note(nqp::iseq_i(1, 1, 2, 3))

[17:48] <camelia> nqp-moarvm: OUTPUT: «Arg count 4 doesn't equal required operand count 3 for op 'eq_i'␤   at gen/moar/stage2/QAST.nqp:1567  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_mastop)␤ from gen/moar/stage2/QAST.nqp:1780  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/Q…»

[17:49] <nine> @core_operands_counts contains the op argument count including the write register (for the return value) yet compile_mastop increments the count for writing ops

[20:28] *** squashable6 left
[20:31] *** squashable6 joined
[20:45] <MasterDuke> nine: cool, then i won't bother to look at them

[20:45] <MasterDuke> nine: and wow, how long do you think that's been there?

[20:47] <lizmat> I guess pretty long

[20:48] <lizmat> but then again...  you would only run into that when specifying too many params, right ?

[20:48] <lizmat> so correct code would get serialized correctly, no?

[20:51] <MasterDuke> i've gotta assume so

[20:56] *** zakharyas left
[22:45] *** evalable6 left
[22:48] *** evalable6 joined
[23:36] <japhb> It looks like there might have been a problem with the last libuv bump, back in February.  After that, I can relatively easily trigger a "Failed to open dir: Too many open files" while uninstalling a dist with zef.  Going back to a Rakudo from immediately before the libuv/MoarVM/NQP bump chain, I can't recreate the problem.

