[00:02] *** reportable6 left
[01:04] *** reportable6 joined
[02:04] *** evalable6 left
[02:04] *** linkable6 left
[02:06] *** linkable6 joined
[02:07] *** evalable6 joined
[03:07] *** evalable6 left
[03:07] *** linkable6 left
[04:07] *** evalable6 joined
[04:09] *** linkable6 joined
[06:02] *** reportable6 left
[06:53] <Nicholas> good *, *

[08:05] *** reportable6 joined
[08:45] *** discord-raku-bot left
[08:46] *** discord-raku-bot joined
[09:18] <MasterDuke> jnthnwrthngtn: if you haven't already seen, https://github.com/rakudo/rakudo/issues/4662 looks like it might be up your alley (involves samewith, but is not spesh/jit related)

[10:53] <jnthnwrthngtn> moarning o/

[10:54] <Nicholas> \o

[10:54] <jnthnwrthngtn> Ahh...just the winter weather I like. Sunny and cold.

[10:54] <lizmat> here, it's just cold :-(

[10:54] <jnthnwrthngtn> MasterDuke: Yes, noticed it, no immediate guesses, will have to dig a bit

[10:56] <MasterDuke> cool

[10:56] <jnthnwrthngtn> (Although probably today is going to be a bit meeting-filled...)

[10:57] <Nicholas> "meetings, the pratical alternative to lunch" - hopefully not across lunchtime

[11:02] <jnthnwrthngtn> Well, only if I don't lunch early enough :)

[11:02] <jnthnwrthngtn> Which happened earlier in the week

[11:09] <jnthnwrthngtn> oh, it's samewith...OK, that's the one that doesn't use resumption

[11:10] *** evalable6 left
[11:10] *** linkable6 left
[11:11] <jnthnwrthngtn> I wonder if it could be already fixed by nine++ work on region boundary handling

[11:13] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1611?

[11:13] <jnthnwrthngtn> ano

[11:13] <jnthnwrthngtn> *yes

[11:14] <jnthnwrthngtn> Worth a try, at least.

[11:14] <MasterDuke> oh, that may indeed fix it

[11:18] <jnthnwrthngtn> Today's lunch is leftovers from last night's Korean takeaway, carried to work in my backpack along with a headset for the meetings...which now smells of delicious Korean noms.

[11:20] <timo> i just re-discovered the talk from emery berger where he presented coz, but he also presented stabilizer

[11:20] <timo> the takeaway was that random changes in memory layout had as much impact on some cases he'd encountered as going from -O2 to -O3

[11:21] <timo> so stabilizer re-randomizes layout of stuff every 0.5 seconds while doing benchmarking, so that there's no particular choice of layout that's effecting your result too much, and you'll end up with a normal distribution

[11:21] <timo> unfortunately, stabilizer no longer compiles %)

[11:22] <moon-child> yeah, that was great.  There was one anecdote: a program was faster when run by one user than another, because the longer username went into the environment and changed the stack alignment

[11:22] <timo> indeed

[11:23] <jnthnwrthngtn> That's mildly horrifying :)

[11:23] <timo> isn't it

[11:23] <moon-child> in-order, cacheless CPUs are still there!

[11:24] <MasterDuke> jnthnwrthngtn: yep, with fix_unwind_missing_frame checked out, the example program finishes for 2k lines of input (though with massive memory growth, 3k got killed by the oom killer)

[11:26] <timo> cacheless is not great, since we'll get too far from actual real-life performance, right?

[11:26] <timo> we'll want to get performance improvements by making structures smaller, making memory access patterns more predictable or reducing our working set size etc

[11:27] <MasterDuke> timo: have you tried using coz on moarvm?

[11:27] <timo> yes, it did not do much, unfortunately

[11:27] <moon-child> timo: was not a serious suggestion.  But such cores have very uniform performance characteristics, _if_ you stick to them :)

[11:28] <timo> coz works best when there's multiple threads doing stuff and there's some contention / waiting / synchronization and it can tell you by how much the whole gets faster if you make one particular piece faster

[11:29] <timo> if we only do what coz does at the C level, we're not going to see a lot

[11:29] <timo> we'd really want to apply the coz instrumentation at the bytecode level, and also make it appear in the jitted code so we don't just miss that

[11:30] <jnthnwrthngtn> Is coz the..hmm..was it causality-based profiling or some such?

[11:30] <timo> that's right

[11:31] <timo> the example he gave first for "take profile, make the code that runs for the longest time, go faster" would make the "loading..." label flash/animate faster

[11:31] <timo> so with coz, it'd randomly make that faster and see it does nothing for the overall

[11:32] <timo> then it'd make something else faster and it'd see that effect hits 100% (in a simple example, of course)

[11:32] <timo> "make something faster" being implemented as "penalize the execution of everything else active at the same time by some amount"

[11:36] <timo> we can make our own super-cut-down stabilizer knock-off by using alloca with a random number in moar's main function

[11:37] <jnthnwrthngtn> I can imagine what you'd do with the coz output, but what concrete actions can you take from the stabilizer one?

[11:38] <timo> make your measurements more reliable for "i actually made it faster" vs "changes in code size and alignment and whatever random factors made it faster"

[11:39] <timo> running a thing 50 times to make the measurement better was likened to getting a survey by asking the same person 50 times

[11:40] *** Altai-man joined
[11:42] <MasterDuke> i thought Nicholas had an open PR to make disabling hash randomization an env variable, but i don't see it. was i imagining that?

[11:42] <timo> we do get rid of things like thermal differences (hopefully, probably have to sleep a few seconds in between executions), and other parts of the system activating during runtime, stuff like that

[11:43] <jnthnwrthngtn> MasterDuke: I don't remember a PR, just a discussion about it

[11:44] <timo> i tried the obvious thing once, it immediately crashed ...

[12:02] *** reportable6 left
[12:02] *** patrickb joined
[12:11] *** evalable6 joined
[12:13] *** discord-raku-bot left
[12:13] *** discord-raku-bot joined
[12:15] <nine> jnthnwrthngtn: I've learned the hard way to double package all food I carry in my backpack.

[12:16] * timo remembers an incident involving coleslaw

[12:19] <nine> timo: yes, running a thing 50 times is like asking the same person but in different situations.

[12:41] <Nicholas> "are we nearly there yet?" "are we nearly there yet?" "are we nearly there yet?" "are we nearly there yet?" ...

[13:13] *** linkable6 joined
[13:14] <Nicholas> or, I guess, "who's chancellor?"

[13:14] <nine> Nicholas: more like: "Who's today's chancellor?"

[13:14] <Nicholas> "this week"

[13:15] <Nicholas> I realise also that "Who is foreign minister?" is an ABA problem

[13:48] *** frost left
[14:03] *** reportable6 joined
[16:10] *** gfldex left
[16:10] *** discord-raku-bot left
[18:01] *** Altai-man left
[18:02] *** reportable6 left
[19:03] *** reportable6 joined
[20:53] *** discord-raku-bot joined
[20:55] *** discord-raku-bot left
[20:57] *** discord-raku-bot joined
[21:03] *** gfldex joined
[21:44] *** CaCode joined
[22:52] *** discord-raku-bot left
[23:56] *** Colt left
[23:58] *** Colt joined
