[00:55] *** japhb left
[00:55] *** japhb_ joined
[01:05] *** Kaiepi joined
[01:30] *** japhb_ left
[01:32] *** japhb joined
[01:34] *** lucasb left
[01:48] *** MasterDuke left
[02:51] *** japhb left
[02:53] *** japhb joined
[04:08] *** sivoais joined
[06:52] <nwc10> good *, #moarvm 

[06:52] <nwc10> real RISCV, or emulated? The gcc farm is faking it, IIRC

[07:08] <nine> Good question! I couldn't find any official description. But on https://build.opensuse.org/monitor one can switch the display of what the workers are working on from "Package-name" to "Architecture" and that shows that x86_64 servers are building the riscv64 packages.

[07:15] <nine> A nice side effect of using the OBS is that the command line client osc also supports local build. That runs in a chroot environment or a KVM or for cross platform development qemu VM. And it will gladly give you access to this VM.

[07:16] <nwc10> aha. gcc compile farm is shell access, and then "the rest is up to you"

[07:17] <nwc10> annoyingly the Mips hardware is basically routers, and only has 2G, so can't build rakudo for mips64

[07:17] <nwc10> it can for mips32

[07:17] <nwc10> NQP is OK on mips64

[07:17] <nine> So getting a debug environment can be as simple as osc build --vm-type=qemu --vm-telnet=23 --vm-memory=1024 --vm-disk-size=4096 openSUSE_Factory_RISCV riscv64

[07:18] <nine> Sadly, no. I don't see a MIPS distribution in the list

[07:24] <nine> At least not on the build service instance run by the SUSE folks. The software is free and ready made appliances are available. I don't know how hard it would be to add e.g. a Debian MIPS to the list. The OBS does support Debian.

[07:25] <nwc10> It's OK. The mips hardwar is enough to be confident that most portability bugs are found

[07:26] <nine> I guess the most important bit is having a big endian machine. Which we do with ppc64

[07:48] <nwc10> sparc64 is more fun. Stricter alignment requirements. Unfortunately all three (four?) gcc compiler farm machines are sparc64, and there doesn't seem to be a reliable way to fake up a 32 bit ABI build of our various dependencies

[07:49] <nwc10> I made tea! Without fail!

[07:56] <nine> Great way to start the day :)

[08:08] *** linkable6 left
[08:11] *** linkable6 joined
[08:28] *** MasterDuke joined
[08:36] *** linkable6 left
[08:38] *** linkable6 joined
[09:23] <nine> I am reasonably sure that the unisearch failure is a deoptimization issue

[09:24] <nine> We're missing a Deopt point materialization mapping and that seems to be significant

[09:25] <lizmat> and reducing deopts was the purpose of the decont logging PR

[09:25] <lizmat> so after reverting that, we have more deopts again

[09:26] <nine> I'll have some breakfast and then have a look at where these materialization mappings come from.

[09:27] <nine> It's a remarkable conincidence that when trying the example I was on an unrelated branch that just so happens to also hide the issue again, so I could get two spesh logs to compare.

[09:28] *** domidumont joined
[09:33] <MasterDuke> nine: nice, you think a fix for this might reduce the cost of the additional decont logging?

[09:42] <nine> No, this is strictly about correctness. But at least there's hope that there's a single reason behind the 3 spesh related issues I'm working on. All 3 (return-in-tap.t, cur-candidates.t and unisearch) share the characteristics that somehow an unexpected type appears where it shouldn't.

[09:43] <nine> That would take a huge load off my shoulders

[10:07] *** patrickb joined
[10:23] <nine> Oh, materialization is a PEA thing, and indeed disabling PEA fixes unisearch

[10:24] <nine> Sadly that means that Type check failed in binding to parameter '$bytes'; expected Blob but got Supplier::Preserving (Supplier::Preserving...) has a different cause as I do get that with PEA disabled as well

[10:27] <patrickb> good *ning o/

[10:28] <patrickb> is it possible, that https://github.com/croservices/cro-http/issues/128 is just another instance of the spesh bug nine and MasterDuke currently hunt?

[10:31] <nine> patrickb: can you try the various MVM_*_DISABLE options?

[10:32] <nine> Intruiging: in the case where we propagate the facts for eliminated guards, PEA actually does NOT do the 1 optimization it does in the breaking case

[10:32] <patrickb> turning of spesh fixes it. What other DISABLES are there?

[10:33] <nine> moar --help

[10:33] * patrickb does as told

[10:34] * nine just learned that even our advanced developers are not all aware of these environment variables... Gotta keep that in mind

[11:03] <patrickb> have to leave. I'll report back later.

[11:03] *** patrickb left
[11:14] <nine> I wonder why the spesh log shows deopt and materialization indexes and register numbers from the original inlinee instead of the numbers those end up with. And I don't mean "why did the developer decide to do so" but "why do I get those numbers when my reading of the code suggests I should get the other versions"

[11:14] <nine> The spesh dumper goes through the spesh graph's deopt mappings and those should really contain the adjusted indexes/register numbers

[11:30] <nine> And now I wonder why I thought that. It's clearly showing the correct values.

[11:30] * nine gets some caffeine resupply

[11:44] <dogbert17> caffeine solves many problems

[11:47] <dogbert17> tried running the jit bisect tool, the result file, which is quite long, mentions "Specialization of 'sequential-map'"

[11:52] <dogbert17> at least it is consistent, always the same frame

[11:53] <nine> By now I'm sure that my facts propagation commit does not fix the issue but hide it. The mechanism is simply that with these facts we can do optimizations the old fashioned way that otherwise PEA would have to do. No PEA, no bug.

[11:56] <dogbert17> sounds like progress

[12:07] <dogbert17> PEA: considering frame 'type_check' (306)

[12:07] <dogbert17> PEA: partial escape analysis not implemented for loops

[12:07] <dogbert17> PEA: considering frame 'decontrv_plugin' (248)

[12:07] <dogbert17> PEA: considering frame 'assign-scalar-no-whence-no-typecheck' (182)

[12:07] <dogbert17> Type check failed in binding to parameter '<anon>'; expected Cool but got Method (proto method fc (Coo...)

[12:08] <dogbert17> didn't know that PEA had a logging mechanism

[12:14] <nine> I can make the bug go away by either disabling PEA on cuid 2117 or by preventing inlining of cuid 2117. Looks like strong evidence that there's something wrong with (un)inlining of frames that PEA did optimizations on. But then, why does an MVM_SPESH_LIMIT hitting exactly this frame still break?

[12:14] <nine> Shouldn't the spesh limit prevent the PEA optimized frame from getting inlined?

[12:17] <nine> But then, the results are actually not consistent. It sometimes passes, sometimes not. And now I also get a different frame.

[12:17] <nine> Wait...didn't someone point out that the test script is somehow incorrect?

[12:20] <dogbert17> I believe that lizmat was sceptical towards hyper calls plus writing to an array 

[12:21] <dogbert17> "the code is wrong: multiple threads should *not* be writing to $sieve at the same time" - lizmat

[12:28] <nine> Ah, yes, removing the hypers makes it more consistent. And it still shows the same oddity.

[12:59] <nine> Probably because inlining isn't important. It just changes the situations in which we deopt

[13:00] <nine> It comes down to at deopt idx 61 we ought to materialize a Str into r15 and we simply don't. We only do that at idx 28.

[13:05] *** frost-lab joined
[13:12] <nine> The reason seems to be a missing usage entry

[13:13] <MasterDuke> that sounds like a simple fix...

[13:14] <nine> If not for the not so simple step of finding the place where we ought to add it

[13:17] *** domidumont left
[13:24] <nine>       [Annotation: INS Deopt Inline (idx 8 -> pc 146; line 35)]

[13:24] <nine>       sp_guardconc      r1(6),   r1(5), sslot(1), litui32(8)

[13:24] <nine>       sp_getspeshslot   r5(1), sslot(24)

[13:24] <nine>       sp_get_o          r7(3),   r1(6), liti16(40)

[13:24] <nine>       [Annotation: INS Deopt Inline (idx 41 -> pc 162; line 35)]

[13:24] <nine>       sp_guardconc      r7(4),   r7(3), sslot(0), litui32(41)

[13:24] <nine>       [Annotation: INS Deopt Inline (idx 10 -> pc 162; line 35)]

[13:25] <nine> This is part of the inlinee. We're deopting at idx 41 (61 after inlining). The interesting part here is that at idx 8 and idx 10, i.e. before and after the point we have deopt usage entries for r4. But not at idx 41.

[13:26] <nine> The numbering indicates that this deopt index is different from the surrounding ones. Probably added later. The question now is: where exactly?

[13:28] <MasterDuke> are the numbers consistent? can you just break when idx == 41?

[13:29] <nine> Oooh.... looking at the spesh log for where that inlined candidate got created I see an additional annotation on that line: [Annotation: INS Deopt Synth (idx 10)]

[13:30] <nine> So it's deopt idx 41 but should pretend to be idx 10, which would get us the usage information. But for some reason that annotation is no longer there when we inline that frame

[13:42] <timotimo> As Timo Samsa woke one morning from uneasy dreams he found himself transformed into some rubbery ducky

[13:47] *** MasterDuke left
[13:55] *** MasterDuke joined
[13:59] <nine> timotimo: that's....deep! Which really just means "I have no idea what you just said"

[14:01] * sena_kun always thought he was "Zamza"

[14:01] <sena_kun> calling him "Samsa" kind of ruins it. :(

[14:02] <MasterDuke> from kafka's 'the metamorphosis', opening line i think

[14:07] <timotimo> that's right

[14:07] <nine> I think I now have a complete picture of what happens with this bug.

[14:08] <nine> While obviously these synth deopt annotations are really important, we neither write them to the generated bytecode, read them from bytecode when creating graphs for inlining, nor would we inline them if we had done so.

[14:11] <MasterDuke> but somehow we've only just now noticed this problem? huh

[14:14] <nine> Well it's only a problem if we happen to deoptimize at one of these synth points in an inlined basic block. That said, this may still be behind a number of strange issues

[14:19] *** lucasb joined
[14:25] <nine> Aha...the deopt annotations are not actually part of the byte code. They are kept with a spesh cand

[14:40] *** frost-lab left
[15:13] *** zakharyas joined
[15:32] *** Kaeipi joined
[15:32] *** Kaiepi left
[15:33] *** Kaeipi left
[15:34] *** Kaeipi joined
[15:53] <nine> Got it!

[15:53] <dogbert17> impressive

[15:56] <nine> It's in no way a pushable fix, but it shows that my understanding is correct and that the bug can be fixed by retaining those synthetic deopt points.

[15:56] <lizmat> feels a bit weird to me that deopt annotations are *not* part of the byte code ?

[15:59] <nine> The sad news is that the issue is unrelated to the other spesh issues I'm investigating :/

[16:02] <lizmat> meh... sometimes you can not two birds with one stone

[16:02] <lizmat> *  :-)

[16:03] <lizmat> .u cat

[16:03] <unicodable6> lizmat, U+00AA FEMININE ORDINAL INDICATOR [Lo] (ª)

[16:03] <unicodable6> lizmat, U+00BA MASCULINE ORDINAL INDICATOR [Lo] (º)

[16:03] <unicodable6> lizmat, 84 characters in total: https://gist.github.com/76b42a0a8b1747810fb9b9ca5d1f7e8e

[16:03] <lizmat> .u love

[16:03] <unicodable6> lizmat, U+1F340 FOUR LEAF CLOVER [So] (🍀)

[16:03] <unicodable6> lizmat, U+1F3E9 LOVE HOTEL [So] (🏩)

[16:03] <unicodable6> lizmat, 6 characters in total (🍀🏩💌🤟🥊🧤): https://gist.github.com/b42b5d78fbdc579a9477885ea4489280

[16:09] <[Coke]> lizmat: looks like your module saves time over multiple calls in the same app, but app::uni is mostly inside a single invocation

[16:09] <lizmat> in my benchmarks, it was faster :-)

[16:10] <lizmat> but I realize it's subtly different was it just looks at *words* in the uniname string

[16:10] <lizmat> so it would not return "FOUR LEAF CLOVER" when given "LOVE"

[16:11] <timotimo> do we have some C LOVERs in here?

[16:12] <lizmat> possibly, most people here program in C I'm told  :-)

[16:12] *** brrt joined
[16:16] *** domidumont joined
[16:16] <[Coke]> I'm sorry, I continued this convo in the wrong window.

[16:20] <brrt> good *

[16:32] <MasterDuke> nine++ on a bugfix roll recently

[16:34] *** domidumont left
[16:55] <nwc10> good *, brrt 

[16:57] *** brrt left
[17:11] <lizmat> so, should a BEGIN chunk in a block prevent it from inlining because of a capturelex?

[17:16] *** domidumont joined
[17:20] <Geth> ¦ MoarVM/fix_inlines_missing_synthetic_deopt_points: b22038ba9b | (Stefan Seifert)++ | 6 files

[17:20] <Geth> ¦ MoarVM/fix_inlines_missing_synthetic_deopt_points: Fix inlines missing synthetic deopt points

[17:20] <Geth> ¦ MoarVM/fix_inlines_missing_synthetic_deopt_points: 

[17:20] <Geth> ¦ MoarVM/fix_inlines_missing_synthetic_deopt_points: Since commit 3345ec36466dbae315b00960d3afedf121b08451 we have synthetic deopt

[17:20] <Geth> ¦ MoarVM/fix_inlines_missing_synthetic_deopt_points: points on inserted guards. These deopt points take their index from an existing

[17:20] <Geth> ¦ MoarVM/fix_inlines_missing_synthetic_deopt_points: deopt point they are linked with. This is important as otherwise we might miss

[17:20] <Geth> ¦ MoarVM/fix_inlines_missing_synthetic_deopt_points: registers we need to restore when deoptimizing.

[17:20] <Geth> ¦ MoarVM/fix_inlines_missing_synthetic_deopt_points: 

[17:20] <Geth> ¦ MoarVM/fix_inlines_missing_synthetic_deopt_points: <…commit message has 8 more lines…>

[17:20] <Geth> ¦ MoarVM/fix_inlines_missing_synthetic_deopt_points: review: https://github.com/MoarVM/MoarVM/commit/b22038ba9b

[17:21] <Geth> ¦ MoarVM: niner++ created pull request #1473: Fix inlines missing synthetic deopt points

[17:21] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1473

[17:21] <nine> That was a 10 hour workday... would have been fine with making it in half the time but alas, at least it's fixed

[17:21] <lizmat> nine++

[17:25] *** domidumont left
[17:26] *** domidumont joined
[17:50] *** domidumont left
[18:08] *** zakharyas left
[18:41] <[Coke]> nine++ indeed.

[18:43] *** Geth left
[19:18] <sena_kun> nine++

[19:39] *** patrickb joined
[19:57] <patrickb> niner: https://github.com/croservices/cro-http/issues/128#issuecomment-822050963 <- Results when disabling different moar components.

[20:19] *** patrickb left
[21:34] <jnthn> I think the MVM_SPESH_PEA_DISABLE=1 in that one is the most telling

[21:34] <jnthn> Probably inlining being disabled helps because it means something escapes to a callee and so PEA doesn't do a scalar replacement

[22:08] <timotimo> we had the "stop spesh after a specific point" thing already, maybe we should expand that to different flags

[22:08] <timotimo> may not be obvious for a couple of situations i guess

