[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[01:03] *** committable6 left
[01:03] *** squashable6 left
[01:03] *** statisfiable6 left
[01:03] *** releasable6 left
[01:03] *** linkable6 left
[01:03] *** benchable6 left
[01:03] *** tellable6 left
[01:03] *** bloatable6 left
[01:03] *** notable6 left
[01:03] *** quotable6 left
[01:03] *** coverable6 left
[01:03] *** bisectable6 left
[01:03] *** evalable6 left
[01:03] *** sourceable6 left
[01:03] *** greppable6 left
[01:03] *** shareable6 left
[01:03] *** reportable6 left
[01:03] *** unicodable6 left
[01:03] *** nativecallable6 left
[01:03] *** squashable6 joined
[01:04] *** tellable6 joined
[01:04] *** statisfiable6 joined
[01:04] *** sourceable6 joined
[01:04] *** coverable6 joined
[01:04] *** nativecallable6 joined
[01:04] *** bloatable6 joined
[01:04] *** unicodable6 joined
[01:04] *** notable6 joined
[01:05] *** bisectable6 joined
[01:05] *** greppable6 joined
[01:05] *** linkable6 joined
[01:05] *** releasable6 joined
[01:05] *** evalable6 joined
[01:05] *** shareable6 joined
[01:06] *** committable6 joined
[01:06] *** reportable6 joined
[01:06] *** benchable6 joined
[01:06] *** quotable6 joined
[01:30] <tbrowder> .tell [Coke] i added the 3rd party warnings to the  issue

[01:30] <tellable6> tbrowder, I'll pass your message to [Coke]

[01:37] *** frost-lab joined
[01:48] *** frost-lab left
[02:03] *** frost-lab joined
[03:15] <[Coke]> .

[03:15] <tellable6> 2021-05-07T01:30:50Z #moarvm <tbrowder> [Coke] i added the 3rd party warnings to the  issue

[03:32] *** evalable6 left
[03:32] *** linkable6 left
[03:33] *** linkable6 joined
[03:35] *** evalable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:23] *** domidumont joined
[07:22] *** patrickb joined
[07:37] *** geth_ joined
[07:41] *** Geth left
[08:22] *** sena_kun left
[08:23] <nwc10> good *, #moarvm 

[08:24] *** sena_kun joined
[08:29] *** zakharyas joined
[08:36] <jnthn> o/

[08:37] <nwc10> \o

[09:08] *** domidumont left
[09:17] *** Altai-man_ joined
[09:18] *** sena_kun left
[11:20] *** zakharyas left
[11:38] *** frost-lab left
[11:40] *** frost-lab joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:21] <lizmat> m: my str @a; say @a[0]   # wonder whether this should be fixed at the MoarVM level, or at nqp::atpos_s level, or at Rakudo level

[12:21] <camelia> rakudo-moar e6a7bfe7b: OUTPUT: «concatenate requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»

[12:23] <lizmat> m: my str @a; my $b := @a[0]; $b = "foo"; dd @a   # apparently even though it's a null_s, it can be bound to ?

[12:23] <camelia> rakudo-moar e6a7bfe7b: OUTPUT: «array[str].new("foo")␤»

[12:24] <lizmat> hmmm... could be Rakudo doing that I gues

[12:37] *** frost-lab left
[12:44] <jnthn> You're binding a native ref

[12:45] <jnthn> An interesting creature that we mostly pretend don't exist, but if they didn't then @native-int-array[$i]++ wouldn't work :)

[12:47] <lizmat> but do you agree that at least the error message is LTA ?

[12:49] <jnthn> Perhaps it should default the the empty str, not a null_s

[12:49] <jnthn> Probbly the nulls shouldn't leak out

[12:49] <lizmat> but at which level ?

[12:50] <lizmat> if we do want to be able to spot "holes" in native string arrays

[12:50] <lizmat> m: my str @a; say @a[0]:exists

[12:50] <camelia> rakudo-moar e6a7bfe7b: OUTPUT: «False␤»

[12:50] <lizmat> I guess we need the nqp::null_s

[12:50] <lizmat> m: my int @a; say @a[0]:exists

[12:50] <camelia> rakudo-moar e6a7bfe7b: OUTPUT: «False␤»

[12:50] <lizmat> m: my int @a; @a[4] = 42; say @a[0]:exists

[12:50] <camelia> rakudo-moar e6a7bfe7b: OUTPUT: «True␤»

[12:51] <lizmat> meh

[12:51] <lizmat> m: my str @a; @a[4] = "foo"; say @a[0]:exists

[12:51] <camelia> rakudo-moar e6a7bfe7b: OUTPUT: «True␤»

[12:51] <lizmat> also meh

[12:51] <lizmat> so I guess we just check nqp::elems for the exists check on native arrays

[12:52] <lizmat> which to me means that nqp::atpos_s on a slot with null_s should return ""

[12:54] <jnthn> No, native arrays don't need to support :exists

[12:55] <lizmat> you mean: not depend on "hole" checking, right?

[12:56] <jnthn> Yes

[12:57] <jnthn> Native array elements always exist, if they're within the size of the array

[12:57] <lizmat> ok, in that case, I guess MoarVM needs a fix to have nqp::atpos_s return an empty string if there is a nqp::null_s

[12:58] <lizmat> do you agree ?

[13:00] <jnthn> It could equally well be done in the AT-POS implementation in Rakudo?

[13:01] <jnthn> I don't really have a strong feeling either way. Keeping ops a bit simpler makes JITting a bit easier.

[13:02] <lizmat> ok, will do it at the AT-POS implementation (for now)  :-)

[13:03] <jnthn> otoh, doing it in the VM means it could choose to memset-ish all the elements to the empty string up front and avoid the branch

[13:03] <lizmat> there's that  :)

[13:03] <jnthn> otth, that means for a large str array we romp through memory at allocation time to handle the rare case of read-before-write

[13:04] <lizmat> couldn't such an array be memcp'd from a constant array with X elements ?

[13:05] <lizmat> supposing you'd have an array of 1K elems with empty strings sitting somewhere, from which you could memcp to se up new ones?

[13:05] <jnthn> That'd probably come out worse than memset[32|64]

[13:06] <jnthn> Because then it's having to get the source array into memory as well

[13:06] <lizmat> but then you would have to loop or not?

[13:06] <lizmat> I guess I have a bad understanding of the memory layout of str arrays

[13:06] <jnthn> Both memcmp and the memset family are looping, though they're generally very good at it (e.g. using vector registers)

[13:07] <lizmat> I would think a str array as an array of pointers ?

[13:10] <jnthn> Yes

[13:10] <jnthn> Pointers to MVMString

[13:10] <jnthn> heh, s/memcmp/memcpy/ above. Fridays...

[13:19] *** domidumont joined
[13:21] <lizmat> so you could create an array with 1K pointers to an empty MVMString ?

[13:21] <lizmat> and then memcpy off of that ?

[13:21] <lizmat> afk for a few hours&

[13:22] <jnthn> You could, I'm just saying that it's less efficient to do that than to take the pointer to the empty string and have it written into all of the elements

[13:22] <jnthn> Because then the pointer to the empty string is just sat in a register, not being fetched repeatedly 

[15:06] *** cog_ left
[15:07] *** cog joined
[15:24] *** zakharyas joined
[15:54] <geth_> ¦ MoarVM/fpclassify: 190ba6c0b1 | (Nicholas Clark)++ | build/probe.pm

[15:54] <geth_> ¦ MoarVM/fpclassify: Refactor the maths function probe logic to extract the common setup code.

[15:54] <geth_> ¦ MoarVM/fpclassify: 

[15:54] <geth_> ¦ MoarVM/fpclassify: The tests for pow(), log() and trig functions had a lot of copy-paste-edit

[15:54] <geth_> ¦ MoarVM/fpclassify: in the code that tried to create values in a way that defeated compile

[15:54] <geth_> ¦ MoarVM/fpclassify: time constant folding. That is now all in one place.

[15:54] <geth_> ¦ MoarVM/fpclassify: review: https://github.com/MoarVM/MoarVM/commit/190ba6c0b1

[15:54] <geth_> ¦ MoarVM/fpclassify: 285ac37efb | (Nicholas Clark)++ | 4 files

[15:55] <geth_> ¦ MoarVM/fpclassify: Implement `MVM_num_isnanorinf` using `isinf` and `isnan` if we find them.

[15:55] <geth_> ¦ MoarVM/fpclassify: 

[15:55] <geth_> ¦ MoarVM/fpclassify: These are part of C99, and result in much tighter machine code - it seems

[15:55] <geth_> ¦ MoarVM/fpclassify: that compiler optimisers can't map the logic of our fallback floating point

[15:55] <geth_> ¦ MoarVM/fpclassify: implementation into the semantically equivalent checks on exponent and

[15:55] <geth_> ¦ MoarVM/fpclassify: mantissa.

[15:55] <geth_> ¦ MoarVM/fpclassify: review: https://github.com/MoarVM/MoarVM/commit/285ac37efb

[16:01] <geth_> ¦ MoarVM: nwc10++ created pull request #1488: Fpclassify

[16:01] <geth_> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1488

[16:18] <jnthn> Hm, Windows build goes boom

[16:19] <nwc10> it was windows?

[16:19] <jnthn> oh no, one of them was maybe

[16:19] <nwc10> I was still trying to figure out the cause of the SEGVs

[16:19] <nwc10> but then my window manager decided to be sluggish

[16:19] <nwc10> anyway, it is a strange SEGV

[16:20] <nwc10> OK, one is a SEGV in NQP

[16:20] <nwc10> one is a SEGV in building Rakudo

[16:20] <nwc10> and "not know"

[16:20] <nwc10> but ASAN was just fine

[16:21] <nwc10> oh my, one is a spew of compiler errors in MoarVM

[16:22] <nwc10> 2021-05-07T16:11:26.0297008Z src/profiler/heapsnapshot.c: In function ‘serialize_attribute_stream’:

[16:22] <nwc10> 2021-05-07T16:11:26.0298996Z src/profiler/heapsnapshot.c:882:5: error: unknown type name ‘ZSTD_CStream’

[16:22] <nwc10> 2021-05-07T16:11:26.0299491Z      ZSTD_CStream *cstream;

[16:22] <nwc10> 2021-05-07T16:11:26.0299811Z      ^

[16:22] <nwc10> 2021-05-07T16:11:26.0305351Z src/profiler/heapsnapshot.c:884:22: warning: implicit declaration of function ‘ZSTD_CStreamOutSize’ [-Wimplicit-function-declaration]

[16:22] <nwc10> *I* think that Azure had a bit too much to drink for lunch

[16:23] <jnthn> There's a lot of changes to the probes in that PR that don't seem immediately related to the nanorinf thing?

[16:23] <nwc10> I'm going to wait a few hours then hit re-run

[16:23] <nwc10> first commit is a DRY de-dup

[16:24] <jnthn> ah, right

[16:24] <nwc10> to avoid a 4th copy of the same setup

[16:25] <jnthn> Still maybe worth pushing that probe change as a separate PR just in case

[16:26] <nwc10> I thought I'd hit "re-run" first, and if that doesn't "fix" it then I'll split it. At least, that was my first plan

[16:26] <jnthn> Though I still struggle to see how we end up in segv land

[16:26] <jnthn> nod

[16:26] <nwc10> I struggle to see how we end up with zstd compile failures

[16:26] <jnthn> Yeah, it's weird

[16:26] <nwc10> I think that MS goofed something (hopefully temporarily)

[16:27] * [Coke] fires up his windows aws workspace to retry the windows build now that he's thinking of it

[16:28] <[Coke]>   /win 3

[16:28] <nwc10> oh, where did the /win lottery go?

[16:33] * [Coke] notes that "/win 3" does not somehow start his AWS windows box

[16:35] *** domidumont left
[16:59] <lizmat> so I have multiple threads wanting access to the same hash

[16:59] <lizmat> and one of more threads making changes to that hash

[16:59] <lizmat> changing is serialized with a lock

[16:59] <lizmat> but I would like to be able to not have to use a lock to access the hash

[17:00] <lizmat> would an nqp::clone() of the underlying nqp::hash provide safe (albeit maybe incomplete) thread safe access ?

[17:00] <lizmat> I guess this question directed at nwc10 / jnthn / samcv

[17:08] <jnthn> Yes, but I'd not break the encapsulation of Hash, I'd just use Map

[17:09] <jnthn> And construct a new/changed one

[17:10] <lizmat> basically nqp::p6bindattrinvres(nqp::create(Map),Map,q/$!storage/,nqp::clone(...)

[17:10] <jnthn> You can even do away with the write lock in favor of `cas $cur-version, { Map.new((|$_, new-key => 'new-value')) }` or so

[17:10] <lizmat> that feels like a lot of work for bigger hashes ?

[17:11] <lizmat> I'm talking all nicks on all Raku channels since 2005  :-)

[17:12] <jnthn> That's still not huge? :)

[17:12] <lizmat> well.. I guess  :-)

[17:13] <jnthn> The ideal here would be to have a Concurrent::Hash module

[17:13] <jnthn> Unfortunately, I'm well aware of how hard those are to get right :)

[17:13] <lizmat> well...  perhaps it's easier to do with Array::Sorted::Util

[17:14] <lizmat> on which e.g. Hash::Sorted is based

[17:14] <lizmat> basically use a native str array and an associated array

[17:14] <lizmat> but yeah...

[17:15] <lizmat> it's hard to get a generally useful solution to that

[17:15] <lizmat> that isn't basically open to very simple deadlocking issues, right?

[17:24] <jnthn> To what exactly? A concurrent lock-free hash data structure?

[17:25] <jnthn> It's been done. https://web.stanford.edu/class/ee380/Abstracts/070221_LockFreeHash.pdf

[17:25] <jnthn> It's...intricate...to get right

[17:27] <jnthn> https://docs.rs/crate/crossbeam/0.2.4/source/hash-and-skip.pdf looks more concrete

[17:28] <lizmat> hmmm.  the latter one says "blocked plugin" to me

[17:28] <jnthn> Odd

[17:29] <jnthn> Time to wander afk. Dinners don't make 'emselves...

[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:14] <[Coke]> oh, hey, much easier to compile rakudo when you have a C or C++ compiler installed

[18:20] <nwc10> OK, so

[18:20] <nwc10> ztsd 0.5.1 doesn't have ZSTD_CStream

[18:20] <nwc10> Ubuntu 16.04 has that version

[18:20] <nwc10> all the compiler errors are about that missing

[18:21] <nwc10> so, OK, why has Azure's Ubuntu now decided that it can give us zstd (which is too old for us) when previously it did not

[18:21] <nwc10> today. not two days ago

[18:23] <nwc10> fail: https://dev.azure.com/MoarVM/6b7ef196-3f6c-40c1-93b8-6350dcf162b2/_apis/build/builds/536/logs/300

[18:24] <nwc10> pass: https://dev.azure.com/MoarVM/6b7ef196-3f6c-40c1-93b8-6350dcf162b2/_apis/build/builds/531/logs/159

[18:24] <nwc10> pass, because it did not start with that apt stuff for package updates

[18:24] <nwc10> so, sigh, we need a probe for zstd

[18:26] <nwc10> WTF, but my passing testcase was rebased onto master that contained the commit to azure-pipelines.yml

[18:27] <nwc10> aha, no, *this* is the full pass log https://dev.azure.com/MoarVM/6b7ef196-3f6c-40c1-93b8-6350dcf162b2/_apis/build/builds/531/logs/212

[18:28] <nwc10> MS, you persons of dubious parentage

[18:28] <nwc10> Pass:

[18:28] <nwc10> 2021-05-05T07:46:23.4688116Z Ubuntu

[18:28] <nwc10> 2021-05-05T07:46:23.4688283Z 16.04.7

[18:28] <nwc10> 2021-05-05T07:46:23.4688454Z LTS

[18:28] <nwc10> ...

[18:28] <nwc10> 2021-05-05T07:46:32.6041408Z Get:7 http://ppa.launchpad.net/ondrej/php/ubuntu xenial/main amd64 libzstd1 amd64 1.4.8+dfsg-2+ubuntu16.04.1+deb.sury.org+4 [321 kB]

[18:28] <nwc10> 2021-05-05T07:46:32.6772066Z Get:8 http://ppa.launchpad.net/ondrej/php/ubuntu xenial/main amd64 libzstd-dev amd64 1.4.8+dfsg-2+ubuntu16.04.1+deb.sury.org+4 [392 kB]

[18:28] <nwc10> Fail:

[18:28] <nwc10> wail

[18:29] <nwc10> more PAss:

[18:29] <nwc10> ...

[18:29] <nwc10> 2021-05-05T07:46:34.7884770Z Selecting previously unselected package libzstd1:amd64.

[18:29] <nwc10> 2021-05-05T07:46:34.8048740Z Preparing to unpack .../libzstd1_1.4.8+dfsg-2+ubuntu16.04.1+deb.sury.org+4_amd64.deb ...

[18:29] <nwc10> 2021-05-05T07:46:34.8075214Z Unpacking libzstd1:amd64 (1.4.8+dfsg-2+ubuntu16.04.1+deb.sury.org+4) ...

[18:29] <nwc10> 2021-05-05T07:46:34.8766378Z Selecting previously unselected package libzstd-dev:amd64.

[18:29] <nwc10> 2021-05-05T07:46:34.8902448Z Preparing to unpack .../libzstd-dev_1.4.8+dfsg-2+ubuntu16.04.1+deb.sury.org+4_amd64.deb ...

[18:29] <nwc10> 2021-05-05T07:46:34.8924825Z Unpacking libzstd-dev:amd64 (1.4.8+dfsg-2+ubuntu16.04.1+deb.sury.org+4) ...

[18:29] <nwc10> 2021-05-05T07:46:34.9699536Z Selecting previously unselected package libc6-dbg:amd64.

[18:29] <nwc10> whereas in Fail:

[18:29] <nwc10> 2021-05-07T18:11:03.3281354Z Setting up libzstd0 (0.5.1-1) ...

[18:29] <nwc10> 2021-05-07T18:11:03.3341003Z Setting up libzstd-dev (0.5.1-1) ...

[18:30] <nwc10> In Pass:

[18:30] <nwc10> 2021-05-05T07:46:32.6041408Z Get:7 http://ppa.launchpad.net/ondrej/php/ubuntu xenial/main amd64 libzstd1 amd64 1.4.8+dfsg-2+ubuntu16.04.1+deb.sury.org+4 [321 kB]

[18:30] <nwc10> 2021-05-05T07:46:32.6772066Z Get:8 http://ppa.launchpad.net/ondrej/php/ubuntu xenial/main amd64 libzstd-dev amd64 1.4.8+dfsg-2+ubuntu16.04.1+deb.sury.org+4 [392 kB]

[18:30] <nwc10> In Fail:

[18:31] <nwc10> 2021-05-07T18:10:58.9214872Z Get:3 http://azure.archive.ubuntu.com/ubuntu xenial/universe amd64 libzstd0 amd64 0.5.1-1 [112 kB]

[18:31] <nwc10> 2021-05-07T18:10:58.9243229Z Get:4 http://azure.archive.ubuntu.com/ubuntu xenial/universe amd64 libzstd-dev amd64 0.5.1-1 [124 kB]

[18:31] <nwc10> Dear MS, why did you previously get packages from  http://ppa.launchpad.net/ondrej/php/ubuntu ?

[18:32] <nwc10> To be clear, MS have fixed their shit

[18:32] <nwc10> (and exposed our own bug)

[18:32] *** kawaii left
[18:34] *** zakharyas left
[18:35] *** kawaii joined
[18:37] <[Coke]> feels like the windows *build* is pretty zippy on this machine, running anything seems... slow.

[19:22] *** MasterDuke joined
[19:41] <geth_> ¦ MoarVM: nwc10 self-assigned MVM_Ub_16_gcc and MVM_Ub_16_clang builds now broken due to Azure fixing their Ubuntu package setup https://github.com/MoarVM/MoarVM/issues/1489

[19:41] <nwc10> much easier to read than IRC

[19:59] *** zakharyas joined
[20:08] *** MasterDuke left
[20:16] *** vrurg_ joined
[20:18] *** vrurg__ joined
[20:19] *** vrurg left
[20:21] *** vrurg_ left
[20:25] *** vrurg__ left
[21:42] *** zakharyas left
[21:45] *** Geth joined
[21:49] *** geth_ left
[22:37] *** patrickb left
[23:19] *** Kaiepi left
[23:20] *** Kaiepi joined
