[00:40] *** Kaiepi joined
[00:59] *** lucasb left
[03:50] *** rba left
[03:50] *** rba joined
[05:23] *** [Coke] left
[05:26] *** [Coke] joined
[05:26] *** [Coke] left
[05:26] *** [Coke] joined
[06:32] *** evalable6 left
[06:32] *** linkable6 left
[06:32] *** linkable6 joined
[06:33] *** evalable6 joined
[08:01] *** domidumont joined
[08:42] *** MasterDuke joined
[08:44] *** zakharyas joined
[09:53] <nwc10> good *, #moarvm 

[10:31] <jnthn> morning o/

[10:31] <nwc10> \o

[10:32] <jnthn> Fresh snow! Fresh coffee! Life could be worse.

[10:32] <nwc10> We had a very small amount of snow overnight.

[10:32] <nwc10> But our here in the flatlands there was always less snow than up in the hills where we first lived

[10:38] <jnthn> I had to check it, but it turns out Vienna is some couple of hundred meters higher than Prague

[10:41] <moritz> oh, Austria had the high ground. That explains a lot, in hindsight :-)

[10:48] <MasterDuke> we actually got about an inch (enough and wet enough to make a snowman) two days ago and it's been just barely cold enough that it's sort of stuck around

[10:59] <nine> Almost all the snow here melted over the weekend, but yesterday night it started snowing again and everything's white now :) Though that will last only a couple more days. Will get much warmer

[10:59] <nwc10> *had* a very small amount of snow. "Strange bright thing in the sky" has seen to it

[11:00] <nwc10> I though it likely that you were going to report stuff that makes us all a bit jealous :-)

[11:07] *** MasterDuke left
[11:09] *** MasterDuke joined
[12:22] *** zakharyas left
[12:52] *** Voldenet left
[12:54] *** Voldenet joined
[12:54] *** Voldenet left
[12:54] *** Voldenet joined
[13:29] <[Coke]> We've had a dip in temperatures, but no snow expected until later today.

[13:29] <[Coke]> (below freezing most of the week)

[13:31] <MasterDuke> nine: i set a watchpoint on the address in frame->work[i].o, but nothing jumped out at me. a bunch of str and vmarray functions in the backtraces, but still nothing in any of the code i touched

[13:34] *** zakharyas joined
[13:35] <MasterDuke> last time jnthn spotted some missing MVM_ASSIGN_REFs and some that needed changing. maybe he can see something in the new diff https://gist.github.com/MasterDuke17/fd2360d357bfc85e7dfba607aad7722f (this is implementing the removal via deopt/log/stats/plan/worker instead of directly via deopt)

[13:45] <jnthn> Maybe when I escape from a somewhat involved rebase...

[13:48] <nine> MasterDuke: only one watchpoint?

[13:48] <MasterDuke> jnthn: yeah, no worries

[13:49] <MasterDuke> nine: yep, should there be more?

[13:49] <nine> Yes. I meant you need to trace that value (the pointer to the outdated object) back to the place where it gets outdated. That means that you will have to set watchpoints on every place where the pointer gets stored

[13:50] <MasterDuke> oh, ah...

[13:50] <MasterDuke> right

[13:50] <nine> I.e. first on frame->work[i].o. There you see who writes to the register. Clear that watchpoint and set one on where the source is (may be a different register or a local variable)

[13:53] *** lucasb joined
[14:12] *** brrt joined
[14:14] <MasterDuke> fyi, not terribly surprised, but no problems building nqp and rakudo if i comment out the call to MVM_spesh_candidate_discard_one in worker.c

[14:39] <jnthn> Hmm

[14:40] <jnthn> Just been rebasing new-disp, and see a failure in the dispatch tests: MoarVM oops: MVM_fixed_size_alloc request for 0 bytes

[14:40] <jnthn> Anyone know if something changed there?

[14:40] <nwc10> yes

[14:40] <nwc10> yes, I know, yes we did, but forget *exactly* what

[14:41] <nwc10> but there was a reason to add a sanity check

[14:41] <nwc10> commit 60070970c4a74627c60ac11a3d3fd111d8f7cad2

[14:41] *** linkable6 left
[14:42] <nwc10> oh, because "we corrupt the malloc heap"

[14:43] *** linkable6 joined
[14:45] <jnthn> Oh?

[14:45] <jnthn> malloc also doesn't care for zero size allocations though, I thought..

[14:46] <nwc10> IIRC it's implementation defined what you get - a pointer (to nothign you can use) or NULL

[14:46] <nwc10> however, I suspect there was somethign else going on here

[14:46] <nwc10> but I forget *why* that commit got found

[14:46] <jnthn> I'm not even sure I'd agree the caller is confused, it just forces more conditionals on the caller side

[14:47] <jnthn> Anyway, will track it down and adapt

[14:47] <nwc10> nine might remember

[14:47] <nine> POSIX says: If the size of the space requested is 0, the behavior is implementation-defined: either a null pointer shall be returned, or the behavior shall be as if the size were some non-zero value, except that the behavior is undefined if the returned pointer is used to access an object.

[14:47] <nwc10> OK, that's what I remembered and paraphrased

[14:48] <nine> I guess the FSA could just return NULL and properly ignore requests to free an area of 0 bytes

[14:50] <nwc10> I really can't remember. I remember that buggy code could end up calling MVM_fixed_size_alloc with 0

[14:51] <nwc10> "be happy" that it got a non-NULL pointer

[14:51] <nwc10> and then did something daft that must have corrupted the heap

[14:51] <nwc10> MVM_fixed_size_alloc_zeroed() called with a size of 0 would have ended up calling memset(..., 0, 0) which likely is undefined behaviour if ... is NULL

[14:52] <nwc10> I really can't remember, other than it felt like the better choice at the time, to deal with the observed problems

[14:53] <jnthn> It was easy to adapt to it

[14:54] <jnthn> So far as I understand the malloc rule, it's implementation defined exactly what it does, but a malloc(0) and later free of the thing you got back should be consistent

[14:54] <nwc10> that was my understanding too

[15:03] <jnthn> OK, NQP tests in new-disp are happy again

[15:03] <jnthn> Something looks less good in the Rakudo tests on a rebased new-disp...

[15:03] <jnthn> CALL-ME handling NYI in new dispatcher; got NQPRoutine

[15:03] <jnthn> Hmm

[15:05] <jnthn> Probably a Rakudo change rather than a mis-rebase

[15:05] <Geth> ¦ MoarVM/new-disp: 168 commits pushed by (Jonathan Worthington)++, (Timo Paulssen)++, (Daniel Green)++

[15:05] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/compare/06d544389339...b003ba30e786

[15:09] <jnthn> Now let's see if I can get this thing done without too much more moving under me :)

[15:48] <nwc10> maybe you can do something to amuse ASAN, because right now it doesn't find the rebased new-disp at all exciting. (a good thing)

[15:49] <jnthn> Dispatch resumption has enough moving parts that there's every chance!

[15:49] <nwc10> fun, excitement, technicolor bactraces

[15:54] <MasterDuke> nine: just to be explicit, this is what you meant? https://gist.github.com/MasterDuke17/462f74a717b2c95412ccb09152947165

[15:58] <nine> MasterDuke: in principle yes. But it looks like you took a wrong turn. Initially you see 0x55963e330140, that's the address of the broken object. But after the second reverse-cont you get a change from 0x55963e2f4840 to 0x0. That's a different address, so you watched the wrong place

[15:58] <nine> I think you wanted watch -l *((MVMString **)((char *)GET_REG(cur_op, 2).o + GET_UI16(cur_op, 4)))

[15:58] <nine> in line 49

[15:59] <MasterDuke> ok, thanks

[16:00] <nine> As this shows, one needs to be extra careful as its super easy to get a wrong result. I usually double-check every step and also print the addresses of the memory locations and the contents of index variables like the i in frame->work[i].o

[16:01] <nine> That way its also easy to re-instate a watch, like watch -l 0x55963e330140

[16:02] <MasterDuke> made that change and the immediate next break is __memmove_avx_unaligned, so i assume i actually want whatever is in frame 1 (process_worklist)?

[16:02] <nine> Also printing the result of e.g. GET_UI16(cur_op, 4) makes it easier to correlate with the output of MVM_dump_bytecode(tc)

[16:02] <nine> what's the backtrace at that point?

[16:03] <MasterDuke> gist updated

[16:05] <nine> Ah, yes, that's memcpy(new_addr, item, item->size) in the GC, i.e. the garbage collector moved the object that contains the faulty pointer.

[16:06] *** MasterDuke left
[16:06] *** MasterDuke joined
[16:07] <MasterDuke> so watch item?

[16:11] <nine> Again, in principle yes. But the thing you're interested in is not item itself, but an attribute in item. What kind of object is item in the first place?

[16:11] <nine> The first hit is in sp_get_s, i.e. get a string (from an attribute) at a fixed offset

[16:13] <MasterDuke> isn't it an iter?

[16:13] <MasterDuke> MVMIter

[16:14] <nine> does that contain a string?

[16:15] <MasterDuke> not exactly. `struct { MVMStrHashIterator curr; MVMStrHashIterator next; } hash_state;`

[16:15] <nine> In that case it may not be the usual GC issue at all and instead is a mismatch between the code and the data

[16:16] <nine> Which considering you're working with spesh candidates is not that far fetched. Could it be that you're running the wrong spesh candidate with respect to the frame's registers?

[16:17] <MasterDuke> given that this only happens after removing a spesh candidate, seems possible

[16:17] <MasterDuke> https://gist.github.com/MasterDuke17/fd2360d357bfc85e7dfba607aad7722f#file-deopt-patch-L98-L164 is what causes this

[16:19] <nine> Have you checked if it's running a removed spesh candidate?

[16:22] <MasterDuke> hm. that would have made sense to do. not sure exactly how to do that

[16:25] <nine> I guess the most straight forward way is to overwrite the memory before freeing it. Same as I did for GC_DEBUG 3

[16:26] <nine> You will notice pretty fast if it's trying to treat 0xfefefefefefefefefefefe as bytecode :)

[16:28] <MasterDuke> good idea

[17:02] *** sxmx left
[17:07] *** sxmx joined
[17:17] <MasterDuke> segfault instead of MVM_panic

[17:17] <nine> that's good!

[17:17] <nine> Why does it segfault exactly? Just to be sure

[17:21] <MasterDuke> running it under rr now to find out

[17:22] <MasterDuke> i re-ran the entire nqp build, looks like the segfault was in a different, earlier step

[17:23] <MasterDuke> this is not fast

[17:23] *** sxmx left
[18:00] *** brrt left
[18:03] *** MasterDuke left
[18:06] *** domidumont left
[18:26] <nine> If anyone is in the mood for a bit of a detective story demonstrating tools like rr, I'm quite proud to have just solved a mystery at work :) https://gist.github.com/niner/7f7cb0a79db9ee933631ca47d44c2029

[18:34] <[Coke]> nine++

[18:52] *** zakharyas left
[19:15] *** sxmx joined
[20:04] *** MasterDuke joined
[20:21] <MasterDuke> ah, no ->spesh_cand in this frame

[20:24] <MasterDuke> so segv here https://github.com/MoarVM/MoarVM/blob/master/src/spesh/deopt.c#L247

[20:26] <MasterDuke> and what do you know, some 0xefefefefefefefef show up https://gist.github.com/MasterDuke17/b33ca703477692b95a13af9bd5154a57

[20:41] *** MasterDuke left
[20:42] *** MasterDuke joined
[20:42] <nine> An important step forward :)

[20:48] *** ilogger2 joined
[20:51] <MasterDuke> hm. sticking an `if *->spesh_cand` everywhere won't be fun. there must be something better

[20:55] *** ilogger2_ joined
[21:35] <jnthn> MasterDuke: The idea was that the candidate would stay around long enough that everything referencing it would just continue to work fine

[21:35] <jnthn> Thus why it because possible to GC

[21:35] <jnthn> Nothing should NULL it out on a frame that is still running and using it

[21:35] <jnthn> And the removal from the log guards mean that no *new* calls will end up using it

[21:36] <jnthn> So it goes away once everything that was in it goes out of dynamic scope

[21:36] <MasterDuke> hm

[21:36] <jnthn> The free_at_safepoint I thought was for the guard tree and array of candidates

[21:36] <jnthn> *not* for the candidate itself

[21:37] <jnthn> The memory associated with the candidate (slots, specialized bytecode, JITted machine code) gets cleared up in the gc_free of MVMSpeshCandidate

[21:37] <MasterDuke> i don't think i ever remove/overwrite the candidate from anywhere

[21:38] <jnthn> Having a NULL spesh cand means that the thing isn't specialized; if we're somehow in specialized code but spesh_cand isn't set, something is very odd.

[21:38] <MasterDuke> i.e., not *->spesh_cand. i just don't memcpy it when copying the array

[21:39] <jnthn> I thought it was an array of pointers to spesh candidates nowadays, which are the GC-able objects?

[21:39] <jnthn> f->spesh_cand->body.inlines is consistent with that too

[21:39] <MasterDuke> https://gist.github.com/MasterDuke17/fd2360d357bfc85e7dfba607aad7722f#file-deopt-patch-L134-L143

[21:40] <jnthn> If the memory on the other end of f->spesh_cand is junk, then that feels like a GC issue

[21:40] <jnthn> Yeah, that code matches my expectations

[21:41] <jnthn> Or at least, it does to the degree it's a pointer array

[21:41] <MasterDuke> i added `memset(cands_and_arg_guards->spesh_candidates, 0xfe, (new_num + 1) * sizeof(MVMSpeshCandidate *));` between the `MVM_spesh_arg_guard_destroy` and `MVM_fixed_size_free_at_safepoint(..., cands_and_arg_guards->spesh_candidates);`

[21:41] <jnthn> oh

[21:41] <MasterDuke> and now https://gist.github.com/MasterDuke17/b33ca703477692b95a13af9bd5154a57#file-rr-log-L54-L55

[21:42] <jnthn> oh, I think there's an odering issue here

[21:42] <jnthn> +            spesh->body.spesh_cands_and_arg_guards     = new_cands_and_arg_guards;

[21:42] <jnthn> +

[21:42] <jnthn> +            MVM_spesh_arg_guard_regenerate(tc, &(new_cands_and_arg_guards->spesh_arg_guard),

[21:42] <jnthn> +                new_cands_and_arg_guards->spesh_candidates, new_num);

[21:42] <jnthn> new_cands_and_arg_guards must be fully set up *before* we assign it

[21:42] <jnthn> Otherwise something can read it before we have regenerated the guard tree, and see the old index

[21:43] <jnthn> Swapping those two statements around will likely help something, and I can imagine it fixing this

[21:43] <jnthn> *ordering

[21:43] <jnthn> .oO( code smell )

[21:46] <MasterDuke> i definitely wasn't 100% sure of the correct ordering. i pretty much tried to do the reverse of what happens when adding a candidate, but some of it did/does need to be in the same order

[21:47] <jnthn> Yes, the general principle is get everything in order, and then publish it when it's ready

[21:47] <jnthn> Heh, "in order" in the sense of "organized, completed" :)

[21:50] <MasterDuke> dropping GC_DEBUG down to 1 for speed got past where that segv was happening, but a different one popped up, so i bumped it back up to 3 and restarted the build. it's gonna take a little while to get back to where it was happening

[21:50] <jnthn> OK. afk for a bit for a game

[22:27] <MasterDuke> looks like the same segv as before

[22:47] *** leont joined
[23:05] *** harrow joined
[23:06] * jnthn back for a bit

[23:16] <MasterDuke> huh. now f->static_info is 0

[23:17] <MasterDuke> https://gist.github.com/MasterDuke17/57b58b44c3c161a35633930701b2b2eb

[23:24] <jnthn> Hm, that sounds like a rather different kind of problem :s

[23:25] <jnthn> At a wild guess, it's created an uninlined frame from broken inline state, but...I'm a bit surprised it got this far

[23:25] <jnthn> Is the inline table getting marked properly?

[23:26] <MasterDuke> i changed `if (f->spesh_cand->body.inlines) {` to `if (f->spesh_cand && f->spesh_cand->body.inlines) {`

[23:26] <jnthn> If you have rr then I guess you have that to hand

[23:26] <jnthn> If we end up in this place and f->spesh_cand is NULL something was really rotten already

[23:27] <MasterDuke> what is the inline table?

[23:28] <jnthn> f->spesh_cand->body.inlines is an array of inlines; when we uninline the static frame comes from there

[23:29] <MasterDuke> f is not in a good state

[23:29] <jnthn> Ah, then all bets are off :)

[23:30] <jnthn> Though ooc, you could try running with MVM_SPESH_INLINE_DISABLE=1 just to see if it is related to that at all

[23:31] <MasterDuke> gist updated

[23:35] <jnthn> wow, zeroes all the way

[23:35] <jnthn> There's a #define at the top of deopt.c that tells something about the deopt it's doing; could you try turning that on?

[23:36] <jnthn> It'll maybe give us a clue about what it things its doing

[23:36] <jnthn> *thinks

[23:36] <MasterDuke> i'll give that a run after this MVM_SPESH_INLINE_DISABLE=1 finishes

[23:38] <MasterDuke> ugh, i need to stop setting GC_DEBUG to 3, it's just so slow

[23:41] <jnthn> 3 is a mixed bag in terms of what it finds/hides also

[23:42] <jnthn> Compare to 1, 2 is a fairly straight "checks more things", but 3 changes how often GC happens

[23:43] <MasterDuke> a while ago i was only getting an error to appear under 3, but i think that was fixed and i could go back, i've just kept it there for no particularly good reason

