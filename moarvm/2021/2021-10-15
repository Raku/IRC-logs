[00:02] *** reportable6 left
[00:41] *** linkable6 joined
[01:10] *** frost joined
[01:11] *** frost left
[02:04] *** reportable6 joined
[02:07] *** frost joined
[03:07] *** linkable6 left
[03:07] *** squashable6 left
[03:07] *** greppable6 left
[03:07] *** reportable6 left
[03:07] *** coverable6 left
[03:07] *** bloatable6 left
[03:07] *** committable6 left
[03:07] *** benchable6 left
[03:07] *** releasable6 left
[03:07] *** shareable6 left
[03:07] *** statisfiable6 left
[03:07] *** evalable6 left
[03:07] *** quotable6 left
[03:07] *** tellable6 left
[03:07] *** bisectable6 left
[03:07] *** benchable6 joined
[03:07] *** committable6 joined
[03:08] *** releasable6 joined
[03:09] *** shareable6 joined
[03:10] *** reportable6 joined
[04:07] *** squashable6 joined
[04:08] *** bloatable6 joined
[04:08] *** statisfiable6 joined
[04:09] *** quotable6 joined
[04:24] *** MasterDuke left
[05:09] *** greppable6 joined
[06:02] *** reportable6 left
[06:08] *** tellable6 joined
[06:08] *** coverable6 joined
[06:34] *** japhb left
[06:34] <Nicholas> good *, #moarvm 
[06:35] *** japhb joined
[07:04] *** reportable6 joined
[07:07] *** linkable6 joined
[07:07] *** bisectable6 joined
[07:08] *** evalable6 joined
[07:19] *** patrickb joined
[07:41] <nine> Good Friday!
[07:41] <nine> It is Friday...even on IRC :)
[07:42] <Nicholas> nine: ASAN is thoroughly bored by your bug fix branch. But this is not surprising
[07:42] <nine> still good to know
[07:42] <Nicholas> I wondered, however, if it would somehow be possible to add "Red zones" into the nursery allocator
[07:42] <Nicholas> or something
[07:43] <Nicholas> so that "writing beyond the end of the official allocated space" was a big explosion of ANSI pavement pizza
[07:43] <nine> Note that in this case we actually allocated in gen2 directly
[07:43] <Nicholas> oh. OK.
[07:49] *** patrickb left
[07:50] *** patrickb joined
[09:30] *** squashable6 left
[09:33] *** squashable6 joined
[09:47] <jnthnwrthngtn> moarning o/
[09:47] <timo> raomorning
[10:00] <lizmat> moan  :-)
[10:01] <patrickb> o/
[10:29] <timo> i have no remoarse about all these puns
[10:30] * lizmat refrains from uttering "the more the perlier"
[10:34] <jnthnwrthngtn> Guess I should get back to the callwith thingy today...
[10:34] *** Altai-man joined
[10:49] <timo> "i used to be callwith it, but then they changed what callwith is and now i'm not callwith it any more and it scares me"
[10:50] <lizmat> .oO( it's always the callsame )
[10:51] <lizmat> .oO( so what's nextsame? )
[12:02] *** reportable6 left
[12:11] <jnthnwrthngtn> Mmm...red curry
[12:12] <nine> jnthnwrthngtn: what a splendid idea!
[12:13] <jnthnwrthngtn> The place near the office remains as good as ever :)
[12:14] <jnthnwrthngtn> grmbl, what on earth is wrong with my callwith thing...
[12:59] <jnthnwrthngtn> This is weird. It creates a dispatch program to invoke exactly the right method...then somehow ends up with `callsame` invoked again?!
[13:01] <nine> If the dispatch program is correct, but the results are wrong, doesn't that mean that the program must get interpreted incorrectly?
[13:02] <jnthnwrthngtn> Well, it's wrong directly after the recording phase
[13:02] <jnthnwrthngtn> As in, the wrong thing happens directly after it
[13:02] <jnthnwrthngtn> Or so it seems
[13:04] <jnthnwrthngtn> oh argh no, I've somehow confused myself with the debug output...
[13:05] *** reportable6 joined
[13:05] <nine> Ah, been there, done that...on a regular basis
[13:08] <jnthnwrthngtn> hah, yes, it's not doing a crazy thing, the weird callsames that follow are legit, they are from exception reporting
[13:27] *** frost left
[13:30] <Geth> Â¦ MoarVM/fix_mixin_repossession: c7be4282fc | (Stefan Seifert)++ | src/6model/reprs/P6opaque.c
[13:30] <Geth> Â¦ MoarVM/fix_mixin_repossession: Avoid possible threading issues with mixins
[13:30] <Geth> Â¦ MoarVM/fix_mixin_repossession: 
[13:30] <Geth> Â¦ MoarVM/fix_mixin_repossession: It's possible that one thread is currently accessing an object while another
[13:30] <Geth> Â¦ MoarVM/fix_mixin_repossession: one mixes a role into it. As in the latter case we may replace the object's
[13:30] <Geth> Â¦ MoarVM/fix_mixin_repossession: body, the first thread could end up accessing a body that we just freed in the
[13:30] <Geth> Â¦ MoarVM/fix_mixin_repossession: thread performing the mixin. Better be safe and use the fixed size allocator
[13:30] <Geth> Â¦ MoarVM/fix_mixin_repossession: to allocate the replaced object body and free a previously existing one at a
[13:30] <Geth> Â¦ MoarVM/fix_mixin_repossession: safe point.
[13:30] <Geth> Â¦ MoarVM/fix_mixin_repossession: review: https://github.com/MoarVM/MoarVM/commit/c7be4282fc
[13:43] *** patrickb left
[13:44] *** patrickb joined
[13:48] <jnthnwrthngtn> Seems it's going to be a problem in MoarVM rather than the dispatchers, and also looking like the problem is in the faked up temporaries
[13:48] <Nicholas> use more 'tea'; ?
[13:48] <Geth> Â¦ MoarVM: f7e0d7d358 | (Stefan Seifert)++ | src/6model/reprs/P6opaque.c
[13:48] <Geth> Â¦ MoarVM: Fix memory corruption caused by repossessed mixins losing their replaced body
[13:48] <Geth> Â¦ MoarVM: 
[13:48] <Geth> Â¦ MoarVM: When a mixin got repossessed during deserialization, the replaced body pointer
[13:48] <Geth> Â¦ MoarVM: would get NULLed. If the mixin needed more storage than the original type
[13:48] <Geth> Â¦ MoarVM: provided we could then end up overwriting adjacent objects when deserializing
[13:48] <Geth> Â¦ MoarVM: the mixin's attributes.
[13:48] <Geth> Â¦ MoarVM: 
[13:49] <Geth> Â¦ MoarVM: <â€¦commit message has 5 more linesâ€¦>
[13:49] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f7e0d7d358
[13:49] <Geth> Â¦ MoarVM: c7be4282fc | (Stefan Seifert)++ | src/6model/reprs/P6opaque.c
[13:49] <Geth> Â¦ MoarVM: Avoid possible threading issues with mixins
[13:49] <Geth> Â¦ MoarVM: 
[13:49] <Geth> Â¦ MoarVM: It's possible that one thread is currently accessing an object while another
[13:49] <Geth> Â¦ MoarVM: one mixes a role into it. As in the latter case we may replace the object's
[13:49] <Geth> Â¦ MoarVM: body, the first thread could end up accessing a body that we just freed in the
[13:49] <Geth> Â¦ MoarVM: thread performing the mixin. Better be safe and use the fixed size allocator
[13:49] <Geth> Â¦ MoarVM: to allocate the replaced object body and free a previously existing one at a
[13:49] <Geth> Â¦ MoarVM: safe point.
[13:49] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c7be4282fc
[13:49] <Geth> Â¦ MoarVM: 24fd3043c1 | niner++ (committed using GitHub Web editor) | src/6model/reprs/P6opaque.c
[13:49] <Geth> Â¦ MoarVM: Merge pull request #1564 from MoarVM/fix_mixin_repossession
[13:49] <Geth> Â¦ MoarVM: 
[13:49] <Geth> Â¦ MoarVM: Fix memory corruption caused by repossessed mixins losing their replaâ€¦
[13:49] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/24fd3043c1
[14:02] <jnthnwrthngtn> Nicholas: Tea is a good idea, but I think I've got a fix even without it :)
[14:02] <jnthnwrthngtn> Turns out the code in Raku's dispatchers was right
[14:04] <jnthnwrthngtn> Now I cross my fingers and run tests :)
[14:24] <Geth> Â¦ MoarVM: 61600a33b8 | (Jonathan Worthington)++ | src/disp/program.c
[14:24] <Geth> Â¦ MoarVM: Don't duplicately set up fake temps
[14:24] <Geth> Â¦ MoarVM: 
[14:24] <Geth> Â¦ MoarVM: We allow resume init values from one resumption to be used in the next
[14:24] <Geth> Â¦ MoarVM: one. This works out because while we only keep info around about the
[14:24] <Geth> Â¦ MoarVM: resumption we are currently handling, the resume init arg will have been
[14:24] <Geth> Â¦ MoarVM: loaded into a temporary at the right time, and then the dispatch program
[14:24] <Geth> Â¦ MoarVM: can later reference that temporary. When we are producing a dispatch
[14:24] <Geth> Â¦ MoarVM: <â€¦commit message has 5 more linesâ€¦>
[14:24] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/61600a33b8
[14:24] <lizmat> feels like it is time for another bump ?
[14:32] <Altai-man> perhaps, if there is a test case we add?
[14:32] <Altai-man> or we do have one and was it just fixed?
[15:18] *** vrurg left
[15:21] *** patrickb left
[15:42] * lizmat is not sure   jnthnwrthngtn  ?
[15:45] <jnthnwrthngtn> Just pushed the bumps along with the callwith work
[15:45] <jnthnwrthngtn> And yes, some spectests :)
[15:45] <Altai-man> yay
[15:45] <Altai-man> jnthnwrthngtn++
[15:46] <jnthnwrthngtn> hah, you just beat me to closing the ticket :P
[15:47] <jnthnwrthngtn> Closed the one nine++ fixed
[15:47] <jnthnwrthngtn> (fix was also in the bump)
[15:48] <Altai-man> I hope the spectest one will be luckily simple.
[15:48] <jnthnwrthngtn> Will check if #4541 is still an issue
[15:48] <jnthnwrthngtn> I doubt it
[15:48] <jnthnwrthngtn> Unless it was already fixed
[15:51] <jnthnwrthngtn> Sigh, this is not so fast on this machine
[15:59] <nine> Odd: In `loop (my int $i = 0; $i < 20; $i = $i + 1) { TakeTwoShorts(10, $i); }` $i gets passed as a native int. But in loop (my int32 $i = 0; $i < 20; $i = $i + 1) { Foo.new.MethodInt($i); } $i is suddenly an IntLexRef
[16:03] <jnthnwrthngtn> Methods are late-bound, so it'd have to assume that?
[16:03] <jnthnwrthngtn> (Assume that the target may be `is rw` I mean)
[16:04] <nine> I'd figured that new-disp would remove that difference
[16:04] <jnthnwrthngtn> Well, only with work. I did include doing that work in my next grant app. :)
[16:05] <jnthnwrthngtn> It's an extension of the "pass decontainerized" mechanism
[16:06] <jnthnwrthngtn> But probably needs 1) some further dispatch ops for reading native refs, and 2) teaching spesh to eliminate the native ref once it sees the take/deref pairing
[16:07] <nine> But anyway, nqp::isrwcont does detect this situation. Now the question is how does that IntLexRef turn into an Int on it's way to MVM_nativecall_dispatch? MVMDispOpcodeUnboxInt still sees the IntLexRef and fails at MVM_repr_get_int, while if I let it get passed through, MVM_nativecall_unmarshal_int doing the same thing succeeds
[16:08] <jnthnwrthngtn> Is it really calling repr_get_int, or is it doing some slightly higher level unbox operation?
[16:09] <nine> MVM_nativecall_unmarshal_int just does return (signed int)MVM_repr_get_int(tc, value); At that point though value is a P6opaque/Int
[16:10] <jnthnwrthngtn> Huh, I wonder where that happens
[16:10] <jnthnwrthngtn> Does it always read objects out of the capture or some such and it happens there? But even that doesn't entirely make sense...
[16:11] <jnthnwrthngtn> ('cus the ref *is* an object)
[16:11] <nine> Especially considering that in my branch there's not much magic left. Dispatch arrives at MVM_nativecall_dispatch(tc, result_type, site, record->outcome.args);   
[16:12] <nine> And the dispatcher doesn't know about lex refs: https://github.com/rakudo/rakudo/blob/new-disp-nativecall/lib/NativeCall.rakumod#L272
[16:12] <nine> s/dispatcher/dispatch program/
[16:14] *** MasterDuke joined
[16:18] <jnthnwrthngtn> nine: https://github.com/MoarVM/MoarVM/compare/new-disp-nativecall#diff-5e8d6c2291f30163d5e04425e36336902ca487e4fd4b51030807aae26a4f854bR438
[16:18] <jnthnwrthngtn> Bleh, I think that link may be useless, but see handle_arg and the container mention
[16:19] <nine> Oooh..it's hidden in the macro
[16:22] <nine> I wonder if I should even bother thinking about RW args before your work on the next grant?
[16:23] <jnthnwrthngtn> Well...for ones that are actually rw you'll still need nativecall handling for them
[16:23] <jnthnwrthngtn> All I was going to do was make sure we strip off the containers caller side when the parameter is ro
[16:24] <jnthnwrthngtn> But in terms of doing that part, yeah, could leave handle_arg to do it for now
[16:24] <jnthnwrthngtn> OK, the `MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 make spectest` took a very long time but...it is clean!
[16:25] <MasterDuke> nice
[16:25] <nine> The old implementation had the native function write into the argument register and generated code for reading a value from the arg buffer and assign it back into the native ref. Not sure I can replicate this with a dispatcher
[16:26] <jnthnwrthngtn> No, in fact, the arg buffer needs to go away :)
[16:27] <jnthnwrthngtn> (It's now only still there due to nativecall)
[16:27] <MasterDuke> jnthnwrthngtn: re the new warning when building moarvm, should `tc` here https://github.com/MoarVM/MoarVM/blob/master/src/debug/debugserver.c#L1010 (and line 1016) be `dtc`?
[16:27] <jnthnwrthngtn> I think for rw things the containers are going to have to make it all the way to the dispatch terminal
[16:28] <jnthnwrthngtn> MasterDuke: yes
[16:28] <MasterDuke> k
[16:29] <nine> jnthnwrthngtn: seems to me, the best way to do this would be to pass a pointer to the actually referenced native var to the native function. So it can write its value and we're done
[16:29] <jnthnwrthngtn> You can't do that
[16:30] <jnthnwrthngtn> A native ref might be to an attribute, and GC can run during a native call (we mark the calling thread blocked)
[16:30] <jnthnwrthngtn> And so the object in question can move
[16:30] <jnthnwrthngtn> Rendering the pointer out of date
[16:31] <jnthnwrthngtn> Probably we need to allocate a bit of space (can just be on the C stack when we JIT, I guess) for rw params, copy the values there, and pass pointers in to that. Then do the assignments after the call.
[16:32] <jnthnwrthngtn> Well, can be on the C stack via alloca in the case we reach the terminal too
[16:32] <nine> New best way: in the JITed version, reserve some space on the stack for these rw args and somehow make that available to HLL code for assigning
[16:32] <jnthnwrthngtn> I'm not sure I'd expose this at all, tbh
[16:32] <jnthnwrthngtn> Keep it as an implementation detail of how the JITted version works
[16:33] <jnthnwrthngtn> Or at the very least, restricted to spesh ops
[16:34] <nine> I guess I can just compile calls to the right C functions for writing back those args. But which function to call seems to depend on the kind of native ref that got passed
[16:36] <jnthnwrthngtn> It does, but that can be guarded against
[16:36] <jnthnwrthngtn> (The kind of native ref is part of the type, so a type guard will do it)
[16:38] <jnthnwrthngtn> Sigh. I discovered something rather annoying. new-disp assumes that if you guard against a literal value, then a type guard is automatically covered by that
[16:38] <jnthnwrthngtn> This is usually reasonable.
[16:38] <jnthnwrthngtn> Except...mixins.
[16:39] <jnthnwrthngtn> When we .wrap something we didn't previously wrap, it's the same literal object...but now has a new type
[16:39] <jnthnwrthngtn> But since the dispatch program is told about the literal value it's like...oh no, no need to guard that.
[16:40] <jnthnwrthngtn> Probably that needs to change
[16:40] <nine> Yeah, mixins have a way of ruining your day
[16:41] <jnthnwrthngtn> I guess it'll cost a little more in interpreted DPs, but in spesh it'll drop away
[16:41] <jnthnwrthngtn> And be left for global deopt to cope with
[16:41] <jnthnwrthngtn> Or proven that this will never happen
[16:42] <lizmat> hmmm... after the bump, zef stopped working for  me
[16:42] <lizmat> Type check failed for return value; expected IO::Path but got Any (Any)
[16:42] <Geth> Â¦ MoarVM: 4e7fa7704d | (Daniel Green)++ | src/debug/debugserver.c
[16:42] <Geth> Â¦ MoarVM: Use right MVMThreadContext in check for debugging
[16:42] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4e7fa7704d
[16:43] <lizmat> apparently only for zef install .
[16:45] <lizmat> hmmm... seems to be specific to App::IRC::Log
[16:45] * lizmat checks further
[16:45] <MasterDuke> oh, i saw this yesterday, but forgot just now, https://github.com/MoarVM/MoarVM/blob/master/src/debug/debugserver.c#L1029 should also be `dtc` i assume (even though the `tc` it's using is presumably not uninitialized)? 
[16:46] <jnthnwrthngtn> Really doesn't matter, since we are only using it to find the instance
[16:46] <jnthnwrthngtn> Maybe for consistency it's nice
[16:46] <jnthnwrthngtn> But for correctness it's irrelephant.
[16:47] <lizmat> nou moe... the problem has disintegrated  
[16:48] <MasterDuke> ok
[17:08] <jnthnwrthngtn> Home time, I think
[17:10] *** Altai-man left
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:46] <nine> jnthnwrthngtn: thanks for the inspiration on what to make for dinner :)
[18:48] <jnthnwrthngtn> :D
[18:51] *** Geth left
[18:51] *** Geth joined
[18:52] *** RakuIRCLogger joined
[19:01] <lizmat> the new logs server is now live: https://logs.liz.nl/home.html
[19:02] <lizmat> running on Rakudo 2021.09 for now
[19:04] <jnthnwrthngtn> Wow 
[19:04] <jnthnwrthngtn> There are channels I didn't even know exist :)
[19:05] <jnthnwrthngtn> Not really important, but there's a slight layout issue with the channel dropdown (the names overflow the background of the dropdown)
[19:06] <lizmat> yeah... I hope someone with more layout knowledge will be able to fix that
[19:06] <lizmat> there are more nits like that
[19:06] <lizmat> but I felt I should bring it out now here on the channel for the people here to have a look at
[19:07] <lizmat> and potentially find problems 
[19:07] <lizmat> before announcing it to a broader audience, e.g. in the weekly :-)
[19:08] <jnthnwrthngtn> Well, didn't manage to break it in any way so far
[19:08] <lizmat> good  :-)
[19:08] <jnthnwrthngtn> On 2021.09 for any reason other than "it's good to use releases for production things"?
[19:09] <lizmat> well, partly
[19:09] <jnthnwrthngtn> (e.g. no regression I've missed that might be for me to look at?)
[19:09] <lizmat> I didn't want to have too many variables at this stage of release to a wider audience
[19:10] <jnthnwrthngtn> Ah, makes sense.
[19:10] <lizmat> I'll probably move to master sometime tomorrow
[19:12] <nine> lizmat: that max-height: 450px; on .navbar .navbar-channels-dropdown .dropdown-content in main.scss:239 looks fishy
[19:17] <nine> Apparently the intention is for the menu to get a scroll bar via the overflow-y: auto in main.scss:247, but it probably doesn't due to the position: relative; in dropdown.sass:58. But honestly a scrollbar in a drop down menu doesn't sound like a usability win
[19:18] <MasterDuke> on mobile it might be necessary?
[19:18] *** sena_kun left
[19:23] <nine> On mobile a fixed limit of 450px makes even less sense with the widely ranging display sizes and pixes densities
[19:35] *** sena_kun joined
[19:53] <lizmat> nine:  PR's are welcome  :-)
[19:55] <lizmat> that kind of layout issues are still a bit above my paygrade  :-)
[20:06] *** vrurg joined
[20:28] <MasterDuke> codesections: do you have any code you can share to repro https://github.com/MoarVM/MoarVM/issues/1565 ?
[20:48] *** RakuIRCLogger left
[20:49] *** RakuIRCLogger joined
[21:37] <japhb> lizmat, are you *currently* changing things?  Literally every refresh is giving me something different on the logs site.
[21:38] <lizmat> I just restarted the server a few times to fix some obvious mobile issues
[21:38] <japhb> Ah, seems to have settled down now
[21:39] <japhb> By the way, for the dropdown list of channels, the list goes beyond the background
[21:39] <lizmat> yeah... I have no idea why, PR's are welcome  :-)
[21:40] <japhb> All right, first I have to catch up with several days of backlog.  :-)
[21:41] <timo> japhb: i just posted my investigation results in #raku for that issue
[21:43] <lizmat> and I just used that and it works for me :-)
[21:44] <lizmat> and that concludes my hacking for today, and what a day it was...  
[22:15] *** linkable6 left
[22:16] *** linkable6 joined
[22:33] *** timo left
