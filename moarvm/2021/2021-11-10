[00:04] *** reportable6 left
[00:07] *** reportable6 joined
[00:18] *** dogbert17 joined
[01:35] *** frost joined
[03:12] *** linkable6 left
[03:12] *** evalable6 left
[03:13] *** linkable6 joined
[03:14] *** evalable6 joined
[03:46] *** MasterDuke left
[04:46] *** linkable6 left
[04:46] *** evalable6 left
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[08:49] *** evalable6 joined
[09:00] <Nicholas> good *, #moarvm 

[09:20] <lizmat> Nicholas o/

[09:34] *** CaCode joined
[09:34] <jnthnwrthngtn> o/

[09:37] <Nicholas> \o

[09:47] *** linkable6 joined
[10:02] <dogbert17> I guess that morning coffee has been consumed?

[10:02] *** CaCode_ joined
[10:05] *** CaCode left
[10:05] <Geth> ¦ MoarVM/new-disp-nativecall-libffi-Azure-hack: 6c46f64fb5 | (Nicholas Clark)++ | azure-pipelines.yml

[10:05] <Geth> ¦ MoarVM/new-disp-nativecall-libffi-Azure-hack: XXX Azure CI should fetch new-disp-nativecall for NQP and Rakudo

[10:05] <Geth> ¦ MoarVM/new-disp-nativecall-libffi-Azure-hack: 

[10:05] <Geth> ¦ MoarVM/new-disp-nativecall-libffi-Azure-hack: This is a hack.

[10:05] <Geth> ¦ MoarVM/new-disp-nativecall-libffi-Azure-hack: review: https://github.com/MoarVM/MoarVM/commit/6c46f64fb5

[10:06] <Geth> ¦ MoarVM: nwc10++ created pull request #1597: New disp nativecall libffi azure hack

[10:06] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1597

[10:24] <Nicholas> Somewhat WTF - that's failing t/02-rakudo/reproducible-builds.t because of this:

[10:24] <Nicholas> 2021-11-10T10:16:02.7865401Z /bin/sh: 1: moar: not found

[10:24] <Nicholas> 2021-11-10T10:16:02.8229601Z The spawned command 'moar --dump before.bc > before.dump' exited unsuccessfully (exit code: 127, signal: 0)

[10:26] <nine> Nicholas: that is not the cause of the test failure but a result of it. This dump code only gets run on test failure and I'm not terribly surprised that it doesn't work on Windows

[10:26] <Nicholas> yes, I'd just started to figure that out.

[10:27] <Nicholas> anyway, I don't know how to figure out whether the CI failures on that branch are "meaningful"

[10:28] <Nicholas> The reason I tried it was that I figured that no-one has done a Win32 build yet

[10:28] <Nicholas> so if it gets to "build and all nativecall tests pass on Win32" that's probably good enough

[10:30] <nine> It is odd that reproducible-builds.t fails so often. I know that there must be an issue. Could be that the code changes just incidentally make them more visible. After all reproducible-builds.t precompiles NativeCall (just because it's a largish module with dependencies and is readily available)

[10:32] <nine> Is there a more reliable way to call the moar executable? The dumps the test tries to create could be interesting

[10:33] <Nicholas> well, that test is assuming that it's in $PATH

[10:33] <Nicholas> which is, well, wrong

[10:34] <Nicholas> but I don't know if the config system manages to put the path somewhere in a variable that can be read

[10:37] *** frost left
[10:39] *** frost joined
[10:41] <nine> m: say $*RAKU.compiler.verbose-config<moar><bindir name exe>

[10:41] <camelia> rakudo-moar 09f5069cc: OUTPUT: «(/home/camelia/rakudo-m-inst-2/bin moar )␤»

[10:42] <nine> This should be it

[10:46] *** frost left
[10:59] *** frost joined
[11:50] *** Altai-man joined
[12:03] *** reportable6 left
[12:09] *** frost left
[12:17] *** CaCode_ left
[12:34] *** CaCode joined
[13:59] *** CaCode left
[15:00] *** linkable6 left
[15:00] *** evalable6 left
[15:01] <nine> I've made some progress on the expr JIT issue. I've narrowed it down to the tiler which is what maps between the template in core_templates.expr and functions that generate the actual machine instructions (via DynASM).

[15:01] *** linkable6 joined
[15:01] *** evalable6 joined
[15:02] <nine> Basically the tiler doesn't know about symbolic references that are generated by "let". It gets fed a tree where the $how is simply a pointer at the value part of the let-node. Then the tiler selects this tile as optimal machine code representation: https://github.com/MoarVM/MoarVM/blob/master/src/jit/x64/tile_pattern.tile#L104

[15:04] <nine> The tile is "test this memory location for non-zero". Simply deleting this line removes the problem. Since no "test a memory location" candidate is available it has to fall back to a combination of "load memory location into register" and "test register for non-zero", i.e. this one: https://github.com/MoarVM/MoarVM/blob/master/src/jit/x64/tile_pattern.tile#L102

[15:04] <nine> And since the JIT is at least smart enough to realize that we have already loaded the value into a register, it uses that.

[15:06] *** vrurg left
[15:07] <nine> Now I don't know if I'm anywhere closer to the solution. Seems to me that it's a bit of an architectural problem. "let" gets translated to a discard tile expr-template-compiler.pl and at runtime all we have is that additional edge in the graph (the one from where we use a value to where it's defined).

[15:07] *** vrurg joined
[15:10] <nine> If there were tiles that would take a call node directly as one of its operands then we'd start duplicating those calls a lot as well. The only thing that keeps the common "get a value from a function and process it a bunch of times" structure working is that there are no such tiles, so the compiler has to put the value into a register and have everyone else access the register as an intermediary.

[16:28] *** cognominal left
[16:34] *** patrickb joined
[16:34] <patrickb> o/

[16:34] <tellable6> 2021-11-07T21:32:50Z #raku <japhb> patrickb https://github.com/japhb/Terminal-LineEditor/commit/d23c4dce22acfad637d3813cc1776d4ce1cab3e5 -- thanks for the suggestion!

[16:35] *** Kaipi left
[16:35] *** Kaipi joined
[17:05] *** reportable6 joined
[17:25] *** linkable6 left
[17:53] *** MasterDuke joined
[18:02] *** reportable6 left
[18:06] *** Altai-man left
[18:11] <lizmat> looking at an spesh inline log, I see a lot of failed inlines because of getlexperinvtype_o 

[18:12] <lizmat> is that low-hanging fruit somehow  ?

[18:39] <nine> lizmat: actually, it might well be. getlexperinvtype_o basically just alls MVM_frame_find_lexical_by_name which in https://github.com/MoarVM/MoarVM/commit/e2e63d08342eb60f518ed5edf143b477626de81f was converted to using the frame walker which correctly handles inlining. So the reason for marking this op :noinline might actually be gone.

[18:39] <lizmat> well, that would be nice  :-)

[18:41] <MasterDuke> any objections to merging https://github.com/MoarVM/MoarVM/pull/1584 and https://github.com/MoarVM/MoarVM/pull/1596 ?

[18:41] <nine> You could give it a try. Just remove the :noinline marker from src/core/oplist and run tools/update_ops.raku followed by make install

[18:42] <lizmat> nine: I hope someone with more moarvm chops will do that :-)

[18:59] <MasterDuke> everything builds and passes tests

[19:02] <lizmat> +1 from me...  :-)

[19:02] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1598: getlexperinvtype_o is now inlinable

[19:02] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1598

[19:19] <Geth> ¦ MoarVM: 6033be47b3 | MasterDuke17++ (committed using GitHub Web editor) | 6 files

[19:19] <Geth> ¦ MoarVM: Another attempt at jitting some not so common ops that are still seen bailing in a spesh log (#1584)

[19:19] <Geth> ¦ MoarVM: 

[19:19] <Geth> ¦ MoarVM: * Move scset(obj|code) impl out into a function...

[19:19] <Geth> ¦ MoarVM: 

[19:19] <Geth> ¦ MoarVM: and then just call that from the interpreter and the jit.

[19:19] <Geth> ¦ MoarVM: 

[19:19] <Geth> ¦ MoarVM: * Jit getcomp

[19:19] <Geth> ¦ MoarVM: <…commit message has 8 more lines…>

[19:19] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6033be47b3

[19:20] *** CaCode joined
[19:28] <Geth> ¦ MoarVM: bdd6794e5e | MasterDuke17++ (committed using GitHub Web editor) | 2 files

[19:28] <Geth> ¦ MoarVM: getlexperinvtype_o is now inlinable (#1598)

[19:28] <Geth> ¦ MoarVM: 

[19:28] <Geth> ¦ MoarVM: "getlexperinvtype_o basically just calls MVM_frame_find_lexical_by_name

[19:28] <Geth> ¦ MoarVM: which in https://github.com/MoarVM/MoarVM/commit/e2e63d08342eb60f518ed5edf143b477626de81f

[19:28] <Geth> ¦ MoarVM: was converted to using the frame walker which correctly handles inlining. So

[19:28] <Geth> ¦ MoarVM: the reason for marking this op :noinline might actually be gone."

[19:28] <Geth> ¦ MoarVM:                                              - nine, #moarvm, 2021/11/10 18:39:19

[19:28] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bdd6794e5e

[19:32] *** CaCode_ joined
[19:35] *** CaCode left
[19:37] *** stanrifkin joined
[19:38] <stanrifkin> maybe change your website to mention libera.chat instead of irc.freenode

[19:39] <stanrifkin> are there some virtual machine programming tutorials?

[19:40] <lizmat> stanrifkin: URL /

[19:40] <lizmat> ?

[19:40] <stanrifkin> ?

[19:41] <lizmat> re irc.freenode mention: I thought we covered them all ?

[19:41] <stanrifkin> https://moarvm.org/contributing.html

[19:41] <stanrifkin> -> communicate

[19:43] <stanrifkin> Do you see it?

[19:44] <Geth> ¦ MoarVM: 9a37bb61d7 | (Daniel Green)++ | src/strings/ops.c

[19:44] <Geth> ¦ MoarVM: Use alloca in more parts of MVM_string_index...

[19:44] <Geth> ¦ MoarVM: 

[19:44] <Geth> ¦ MoarVM: based on how it's done in knuth_morris_pratt_string_index(). Also

[19:44] <Geth> ¦ MoarVM: simplify by using the already created `n_graphs` variable everywhere

[19:44] <Geth> ¦ MoarVM: instead of `needle->body.num_graphs`.

[19:44] <Geth> ¦ MoarVM: 

[19:44] <Geth> ¦ MoarVM: I tested this with a one-liner that just does some `.contains()` and

[19:44] <Geth> ¦ MoarVM: <…commit message has 5 more lines…>

[19:45] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9a37bb61d7

[19:45] <Geth> ¦ MoarVM: f27cdeaec8 | MasterDuke17++ (committed using GitHub Web editor) | src/strings/ops.c

[19:45] <Geth> ¦ MoarVM: Merge pull request #1596 from MasterDuke17/use_alloca_in_MVM_string_memmem_grapheme32str

[19:45] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f27cdeaec8

[19:46] <lizmat> stanrifkin: https://github.com/MoarVM/moarvm.org/pull/13

[19:46] <stanrifkin> good 

[19:51] <lizmat> MasterDuke: will do the alloca fix in a separate bump

[19:51] <lizmat> for better bisectability

[19:51] <MasterDuke> sure, np

[20:01] <japhb>         { name => 'hp', cost-per-point => 3, base => 'hits' },

[20:01] <japhb>         { name => 'mp', cost-per-point => 3, base => 'mana' },

[20:01] <japhb> *Sigh*

[20:05] *** reportable6 joined
[20:11] * lizmat hopes that sp_assertparamcheck is a similarly low-hanging fruit    (as it currently prevents inlining in e.g. push-until-lazy)

[20:12] <lizmat> pretty sure test-t has gotten faster with these

[20:27] *** linkable6 joined
[20:52] *** MasterDuke left
[20:57] <nine> lizmat: sp_assertparamcheck is on the other end of the spectrum. Its presence means that we couldn't spesh argument processing and that means we can't inline. It's not so much this individual op itself

[20:58] *** MasterDuke joined
[20:59] <lizmat> aw too bad  :-)

[21:00] <lizmat> so what part of argument checking is problematic then ?

[21:06] <timo> doesn't spesh add comments about arg spesh failing?

[22:28] *** stanrifkin left
[22:49] *** dogbert17 left
[22:49] *** dogbert11 joined
[23:19] *** patrickb left
