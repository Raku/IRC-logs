[01:15] *** leont left
[02:38] *** Kaiepi left
[03:36] *** Kaiepi joined
[03:59] *** nevore joined
[04:22] *** sortiz joined
[04:24] <Geth> Â¦ MoarVM: salortiz++ created pull request #1440: VMArray: Check slot type for read_buf and write_buf

[04:24] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1440

[04:37] *** nevore left
[04:44] *** nevore joined
[05:57] *** nevore left
[05:58] *** domidumont joined
[06:04] *** nevore joined
[06:13] *** nevore left
[07:34] *** sxmx left
[07:46] *** sxmx joined
[08:11] *** sxmx left
[08:11] *** sxmx joined
[08:22] *** sortiz left
[08:39] *** brrt joined
[09:04] *** zakharyas joined
[09:16] *** sena_kun left
[09:18] *** sena_kun joined
[09:38] *** leont joined
[09:52] <MasterDuke> anyone else watched the video of the Perseverance descent? pretty cool stuff

[09:56] <lizmat> yeah, slick!

[10:19] <nine> I was blown away

[10:32] <brrt> I read about it in the 'how to' book from Randall Munroe, I didn't get to see the video yet 

[10:32] <MasterDuke> i just learned you wouldn't have been if you had been on mars, the atmosphere is so thin that there aren't enough air molecules for wind to push stuff around

[10:34] *** patrickbkr[m] joined
[10:45] *** linkable6 left
[10:46] *** linkable6 joined
[11:08] *** linkable6 left
[11:10] *** linkable6 joined
[11:27] *** brrt left
[11:54] <nine> MasterDuke: well, except dust :)

[11:55] <MasterDuke> true, but only very fine dust

[12:32] *** zakharyas left
[13:08] *** lizmat_ joined
[13:13] *** lizmat_ is now known as lizmat

[13:23] *** lizmat_ joined
[13:24] *** lizmat left
[13:25] *** lizmat_ left
[13:25] *** lizmat joined
[13:37] *** zakharyas joined
[13:44] *** lucasb joined
[13:55] *** lizmat_ joined
[13:58] *** lizmat left
[14:19] <nine> I know the solution to the "doesn't even try to inline infix:<eq>" mystery

[14:21] *** brrt joined
[14:38] <nine> Yesterday I noticed that we're missing stats on the interesting calls to infix:<eq>, i.e. those that happen in the main program as opposed to during module loading.

[14:40] <nine> That's so because during module loading we already create a speshed version of infix:<eq>. MVM_frame_invoke looks for existing spesh candidates and takes one if one is applicable. And one is indeed, right away. This is usually a good thing, but in this case it also keeps us from ever gathering stats for this callsite.

[14:40] <nine> So we end up without known decont type and cannot pick a multi candidate to inline.

[14:41] <nine> This picking of an existing spesh candidate by MVM_frame_invoke takes CORE.c stage parse from 49s to 34s on my machine. But it also takes the simple micro benchmark from 13s to 459s (I kid you not)

[14:42] <nine> In this case, the good is really the enemy of the perfect.

[14:49] <jnthn> new-disp does everything on per-callsite stats rather than there being a shared multi-cache

[14:49] <jnthn> Guards are stacked up at each callsite, for the types observed there.

[14:49] <jnthn> Which, iiuc, means we should do better in the case you're looking at

[14:49] *** lizmat_ is now known as lizmat

[14:52] <nine> In other words its not worth looking for a solution. But at least we know that the thing lizmat++ was testing for is actually a TODO

[14:53] <jnthn> IMO no, better we spend the time getting new-disp up and running

[14:54] <jnthn> Multi dispatch (making it resumable and handling `where` clauses and other bind checks) is the main functional thing left

[14:54] <jnthn> Then trying to switch everything over to it, and triaging what is left

[14:54] <jnthn> Beyond that, it'll be performance re-tuning

[14:56] <jnthn> (And there'll be further opportunities to re-work some additional things to perform better, but those'll happen after it's landed.)

[14:56] <nine> But I guess the mis-spesh MasterDuke++ discovered will still need a fix

[14:57] <jnthn> Not read about that in any detail yet

[14:57] <jnthn> Few too many things going on

[14:58] * jnthn tries to pick which of the 4 things he should be doing right now to do :)

[14:59] <nine> https://colabti.org/irclogger/irclogger_log/moarvm?date=2021-02-21#l14 is the mis-spesh thing

[15:00] <nine> I'd pick the thing you feel like working on right now ;) After all the order won't matter that much

[15:02] <jnthn> Ahh, I did skim-read that, then forgot about it :)

[15:03] <nine> Maybe you have a bit of hand waving to throw my way then?

[15:03] <jnthn> It'd be a bit strange to find we're calculating SSA form wrong after this many years :)

[15:04] <jnthn> So I'm guessing it won't quite be that

[15:04] <jnthn> Did you try turning on the DU checker?

[15:04] <nine> not yet

[15:04] <jnthn> That checks usage chains are correct

[15:04] <jnthn> Worth a try

[15:04] * dogbert11 suggests jnthn walks toward the coffee machine

[15:05] <jnthn> Already had my coffee for the day (at least, if I care to sleep :)). Just made a tea.

[15:06] <nine> tea++

[15:06] <nine> DU check is quiet

[15:16] <jnthn> Darn.

[15:20] <nine> That r2(0) in the PHI node really looks fishy to me. And I wonder: where would I find code that writes done by instructions in an area covered by a handler just may not happen and the last version before the handler area must be added to the PHI node?

[15:33] <MasterDuke> nine: interesting find. if it weren't for new-disp fixing it, it'd almost seem like a good case for figuring out some heuristics for removing spesh candidates...

[15:33] <MasterDuke> also, not really understanding your last message. are you suggesting the SSA form might in fact be wrong?

[15:35] <nine> Kinda yes, since the PHI node is missing a relevant version of the register

[15:36] <MasterDuke> huh. are there any automated SSA checkers?

[15:42] <MasterDuke> i wonder if moarvm's use would mean it could be added to the "Compilers using SSA form" section here https://en.wikipedia.org/wiki/Static_single_assignment_form

[15:43] <nine> sure

[16:26] <MasterDuke> is there any good writeup/blog post/etc about how moarvm uses SSA? or how/when it was introduced?

[16:37] *** brrt left
[16:43] <MasterDuke> while we're talking about spesh. a spesh log of `my %h = a => 42, b => 666; my $b; $b := %h<a>:exists for ^10_000_000;` has these lines:

[16:43] <MasterDuke> # [001] could not inline 'postcircumfix:<{ }>' (2495) candidate 0: target has a :noinline instruction

[16:43] <MasterDuke> # [002] inline-preventing instruction: assertparamcheck

[16:44] <MasterDuke> this is in the "After" of `'' (cuid: 1, file: -e:1)`

[16:46] <MasterDuke> anything that can be done about that?

[17:07] <nine> MasterDuke: for that you kinda need to work it backwards. Spesh tries to optimize away assertparamcheck. We can do so if we know it will pass (according to that comment in optimize.c)

[17:08] <nine> To know it passes we need to know its value. But according to my spesh log we don't have a KnVal for r7(3)

[17:09] <nine> The value would be the result of an istype check of r5(3) against r8(10). We actually know the value of both, so we should be able to do that at compile time.

[17:09] <nine> So why do we not?

[17:09] <MasterDuke> i've been assuming the param it's checking is :$exists from https://github.com/rakudo/rakudo/blob/master/src/core.c/hash_slice.pm6#L21

[17:10] <nine> it is

[17:10] <nine> r5(3): usages=2, flags=9     KnTyp Concr (type: Bool), r8(10): usages=1, flags=19    KnTyp KnVal TyObj (type: Bool(Any))

[17:11] <MasterDuke> ok. fwiw, i also just discovered that it may be a tiny bit faster to write the body of that as `my $e := SELF.EXISTS-KEY(key); $exists ?? $e !! !$e`

[17:13] <nine> optimize_istype checks if both values are known (which they are), then calls MVM_6model_try_cache_type_check which apparently returns failure to check.

[17:13] <MasterDuke> stock: Frame size: 420 bytes (168 from inlined frames), Bytecode size: 1912 byte

[17:13] <MasterDuke> modified: Frame size: 330 bytes (84 from inlined frames), Bytecode size: 1460 byte

[17:14] <nine> Sure, you're avoiding the inlining problem that way

[17:16] <MasterDuke> yeah. but if spesh makes an assumption $exists is constant, the stockÂ  version could/should be smaller, right?

[17:16] <nine> if we find out why optimize_istype fails

[17:17] *** brrt joined
[17:25] <nine> Well, a Bool is simply a different type than Bool(Any)

[17:25] <nine> So this failure to inline is in essence a side effect of turning coercers into their own type objects

[17:26] <nine> vrurg_: ^^^

[17:26] *** domidumont left
[17:31] <nine> I'd not be surprised if this is somewhat costly...

[18:08] <MasterDuke> nice find. we knew the coercion work had a performance impact, but the majority of it was addressed (not using nqp::ctxcaller or something like that). maybe this is the rest

[18:09] <MasterDuke> could we simply cheat and say Foo(Any) == Foo (since Any is the default)?

[18:11] *** brrt left
[19:06] <nine> Maybe we can generate better code there, like first check for the target type, then the coercer.

[19:06] <nine> But to do that we need to find out where that istype is coming from

[19:14] *** zakharyas left
[19:16] <vrurg_> nine: Line 9402 in Actions.nqp. For coercive non-generic types the first thing done is nqp::istype against the target. `coerce` method is invoked only if that fails.

[19:16] *** vrurg_ is now known as vrurg

[19:29] <nine> But where does the istype(Bool, Bool(Any)) come from then?

[19:42] <MasterDuke> ugh, `call MVM_dump_bytecode(tc)` at the Bool vs Bool(Any) comparison segfaults

[19:48] <MasterDuke> why would `tc->cur_frame` ever be 0x0?

[20:12] <nine> what's the backtrace?

[20:14] <MasterDuke> https://gist.github.com/MasterDuke17/554414c59b87fdee869d26e9926bdca6

[20:17] <vrurg> nine: So far my only suspect for the call is at line 9289.

[20:19] <vrurg> I need to more time to make sure it's where it happens, but would only be able to look deeper in ~1-3 hrs later.

[20:19] <nine> cool

[20:20] <vrurg> Do you have a code snippet to work with?

[20:20] <nine> MasterDuke: oh that's very much to be expected. The spesh thread is simply never executing any frame

[20:20] <MasterDuke> m: my %h = a => 42, b => 666; my $b; $b := %h<a>:exists for ^10_000_000;Â  # vrurg

[20:20] <camelia> rakudo-moar 3235f3e42: ( no output )

[20:20] <vrurg> MasterDuke: oki, thanks!

[20:24] <MasterDuke> nine: gist updated

[20:34] <nine> vrurg: yes, I'm pretty sure its line 9289

[20:34] <nine> It fits the bytecode dump from MasterDuke's gist

[20:35] <nine> And the dumped ast of the sub

[20:37] <vrurg> nine: I now understand what happened. That code remain unchanged from the times when $param_type was nominal. But now it can also be a coercion. So, it needs an additional `if` to pull out the target type.

[20:38] * vrurg must make a couple of phone calls and then will be free for this.

[20:40] <MasterDuke> cool

[20:53] *** zakharyas joined
[20:57] <MasterDuke> well, just for the heck of it i tried https://gist.github.com/MasterDuke17/1d661c36ff8bc54f59a442bc81422085 but that results in `Internal error: inconsistent bind result in block <unit> at /home/dan/Source/perl6/rakudo/tools/build/clean-target-files.raku line 1`

[20:59] <MasterDuke> but using the rakudo-m in the source directory give my 1.3s for the example, vs 2.8s

[21:02] <MasterDuke> i do still get that postcircumfix can't be inlined, but it's a different instruction now

[21:02] <MasterDuke> # [001] could not inline 'postcircumfix:<{ }>' (2495) candidate 0: target has a :noinline instruction

[21:02] <MasterDuke> # [002] inline-preventing instruction: getlexstatic_o

[21:03] <MasterDuke> but far few frames overall. 20005504 vs 10007106

[21:11] *** lucasb left
[21:14] *** lucasb joined
[21:33] <nine> This passes spectest and takes the example with 100K iterations from 21.2 to 8.5s: https://gist.github.com/niner/c5d80085ca27918083ff392e77d2aca8

[21:33] *** Geth left
[21:40] <vrurg> Let me see if another solution works better. Aside of coercions we could deal with other kinds of nominalizables. So, perhaps using nominalized type will work even better.

[21:41] <vrurg> Also, it should be more generic solution.

[21:41] <nine> have fun :)

[21:42] <nine> Oh, it doesn't pass spectest anyway: Cannot find method 'target_type' on object of type Perl6::Metamodel::SubsetHOW

[21:42] <nine> So yes, a more generic solution is needed, indeed. But at least we know what's to gain and the way to do it :) Great teamwork!

[21:44] <vrurg> Ok, the same 'inconsistent bind result'. Gonna take some time, it seems.

[21:51] <jnthn> After wondering why Comma was showing me really broken profiler results, I tracked it all the way back into MoarVM, and it turns out we started producing broken multi-threaded profilers some months ago

[21:51] <jnthn> *profiles

[21:59] *** zakharyas left
[22:31] *** noonehere4u joined
[22:31] <noonehere4u> /!\ this chat has moved to irc.crimeircd.net #pp /!\

[22:31] *** Freejack joined
[22:31] <Freejack> /!\ this chat has moved to irc.crimeircd.net #pp /!\

[22:32] *** Freejack left
[22:32] *** noonehere4u left
[22:33] *** batman42Lm joined
[22:33] <batman42Lm> /!\ this chat has moved to irc.crimeircd.net #0 /!\

[22:33] *** batman42Lm left
[22:42] *** SiLuman joined
[22:42] *** CajsZs joined
[22:42] <CajsZs> D4yis5hJF5xGzhtxsmfSa6H6c1oNRQrvxbcoKvKZ2Cm2EeCLta8IbserUt8D7lPR74g5tQ8uT3sQw8vwBQHGxzSvGET1VwoKcsH2mKVJvbbUk2G2wXduUCql

[22:42] <SiLuman> D4yis5hJF5xGzhtxsmfSa6H6c1oNRQrvxbcoKvKZ2Cm2EeCLta8IbserUt8D7lPR74g5tQ8uT3sQw8vwBQHGxzSvGET1VwoKcsH2mKVJvbbUk2G2wXduUCql

[22:42] <SiLuman> 5Cmxe0MoEYQKzfCa076yzo6SYAUxgbsuf3NW0Re9mgKeWvfErG5ItCgJmmVt6a8nYtvVo2qvmfJ656wNN6Ks6TXB5cBqsAZ4IyslYHujmwkBjmrCLO3MuYID

[22:42] *** CajsZs left
[22:42] <SiLuman> FEipuM8Aio1laV6sFOXgc8Ess7wlf0b9yLApezjQQAJPXDoaCQGVU01wBeeL3U777spECDqQIgP4tbr5ELnXAy5r7UNtKd96biHrZu7wqdiabjHHtC8amyg8

[22:42] <SiLuman> SfIxdBC7U3EUAxDiTtnvOUmhBcFhz913FJhrCO0l4QGylMUxGqhFTLZN2m1XfhTaPk4gf3ciyvaGXhHqCcT7FN21jnhab3HfsS5hbfVBTsi3L4v0JhyEbnqt

[22:43] <SiLuman> a6Z8AepNxWCeiVQzRkXa2JWyDKT8eq1HmvhNhb3ni9OIB8uqtjBSsuBL04HxxR6bKzgkTJlojSnFROeI0aBl8qkHxmQvrKzDtfNYJobm4snqgosJb6UVZGeg

[22:44] *** meffeTP joined
[22:44] *** SiLuman left
[22:44] <meffeTP> B5bbv90BbOV8Al01uzKsuQ99xxPAKfqiRsoXwiQg1DabD1Uti21qY63zzXbBQ4cRLsmjSbQFcvaltDbQhomi8EFVOHfx93B4hcXKHBVYFOAuQCUslgql8zCC

[22:44] *** meffeTP left
[22:45] *** ced117VM joined
[22:46] <ced117VM> UCwXBSpUOIFW5L7ShrBfs32gZ12ajQ7dQzW15ALIfwe2Yp1ZsNVwf65gCld8ginpWcsvjg3vXMIbP1czWalMNVWLtDz96ccGwDEcmO0bF50v5SIWASzU6wqI

[22:46] <ced117VM> HKVRf7Pe47Y8NbQbkeSEm26dpAKcX1JG6KcdfeFiBOAQ6Az78p9rcretSIyqGOJNOr74RzcFJPG1KWEGM3Pwj2qdb6uYGPkDEzXuk3Qx7h4XBsxPN7hcnn7w

[22:46] *** ced117VM left
[22:48] *** eater joined
[22:55] *** haveTD joined
[22:55] <haveTD> SWSGafx96ipE0nRBDxJGZB9KOQ4Hl103MoGExWsJIGsj8lXLqgxaSyRsjAoYU4H0lCV7o1XKTtedl76vddyze1PPJk1ZQtRkGEJEAJ0xIYIV4ubUpbFB3Iku

[22:55] *** haveTD left
[22:59] *** LumpiBM joined
[22:59] *** LumpiBM left
[23:15] *** pokkGZ joined
[23:15] *** pokkGZ left
[23:38] *** dogbert11 left
[23:39] *** dogbert11 joined
[23:42] *** dogbert17 joined
[23:44] *** dogbert11 left
[23:46] *** dogbert2 joined
[23:47] *** dogbert11 joined
[23:47] *** dogbert11 left
[23:48] *** dogbert17 left
[23:49] *** dogbert11 joined
[23:51] *** dogbert2 left
