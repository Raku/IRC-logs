[00:02] *** reportable6 left
[00:24] *** tbrowder left
[00:27] *** SmokeMachine left
[00:27] *** leont left
[01:04] *** reportable6 joined
[01:11] *** tbrowder joined
[01:14] *** SmokeMachine_ joined
[01:14] *** leont joined
[01:14] *** SmokeMachine_ is now known as SmokeMachine

[02:01] *** CaCode- joined
[02:04] *** CaCode_ left
[03:43] *** benchable6 left
[03:43] *** linkable6 left
[03:43] *** releasable6 left
[03:43] *** greppable6 left
[03:43] *** tellable6 left
[03:43] *** statisfiable6 left
[03:43] *** bloatable6 left
[03:43] *** sourceable6 left
[03:43] *** shareable6 left
[03:43] *** unicodable6 left
[03:43] *** evalable6 left
[03:43] *** bisectable6 left
[03:43] *** notable6 left
[03:43] *** coverable6 left
[03:43] *** committable6 left
[03:43] *** nativecallable6 left
[03:43] *** reportable6 left
[03:43] *** squashable6 left
[03:43] *** quotable6 left
[03:44] *** bloatable6 joined
[03:44] *** unicodable6 joined
[03:44] *** tellable6 joined
[03:45] *** bisectable6 joined
[03:45] *** statisfiable6 joined
[03:45] *** greppable6 joined
[03:45] *** nativecallable6 joined
[03:45] *** releasable6 joined
[03:46] *** sourceable6 joined
[04:44] *** coverable6 joined
[04:44] *** evalable6 joined
[04:45] *** linkable6 joined
[04:45] *** committable6 joined
[04:46] *** reportable6 joined
[04:46] *** notable6 joined
[05:16] *** frost joined
[05:44] *** quotable6 joined
[05:46] *** benchable6 joined
[06:03] *** reportable6 left
[06:45] *** squashable6 joined
[06:56] *** CaCode_ joined
[06:59] *** CaCode- left
[07:03] *** reportable6 joined
[07:44] *** shareable6 joined
[08:20] *** CaCode joined
[08:21] *** CaCode_ left
[08:29] *** japhb left
[09:00] *** CaCode_ joined
[09:03] *** CaCode left
[09:25] *** ugexe left
[09:39] *** ugexe joined
[10:10] *** ugexe left
[10:10] *** ugexe joined
[10:29] * lizmat had a flu shot yesterday and is feeling a little bit under the weather now

[10:31] *** CaCode- joined
[10:34] *** CaCode_ left
[10:41] *** CaCode_ joined
[10:44] *** CaCode- left
[10:49] * nine got his on Tuesday :)

[11:00] *** CaCode_ left
[11:39] <lizmat> hmmm...  can't seem to think of syntactic sugar for creating a Seq of lazily created Seqs

[11:43] <lizmat> m: my $s := (1,2,3,4).map: { .say; (^$_).Slip }; say $s.head(3)   # the closest I can come up with

[11:43] <camelia> rakudo-moar 3d80bec7c: OUTPUT: «1␤2␤(0 0 1)␤»

[11:48] <timo> you want not to have Seq objects inside the resulting Seq, but one Seq that gives results from consecutive lazily created seqs?

[11:55] *** japhb joined
[11:55] <jnthnwrthngtn> lizmat: Calling .flat on what you get back from .map won't do it?

[11:55] <jnthnwrthngtn> (Without the slip...)

[11:57] <jnthnwrthngtn> Urgh, this is not going to be a very productive day...

[11:57] <jnthnwrthngtn> (No, I didn't do a flu shot too...)

[12:00] <lizmat> timo: indeed

[12:01] <lizmat> I know how to do it using iterators and such, am just wondering how one would do it without resorting to such low level approaches

[12:02] * lizmat is also distracted by the history of Booking.com book that just arrived

[12:02] *** reportable6 left
[12:03] <lizmat> https://www.bol.com/nl/nl/p/de-machine/9300000051708336/

[12:05] <dogbert11> jnthnwrthngtn: is the coffee machine broken?

[12:06] <jnthnwrthngtn> dogbert11: No, my stomach kinda is, though, which means I should avoid coffee.

[12:06] <jnthnwrthngtn> Or at least, it doesn't feel like a great idea.

[12:07] <lizmat> camomile tea ?

[12:07] <jnthnwrthngtn> Yes, that's probably what's next.

[12:07] <lizmat> chicken soup?

[12:08] <jnthnwrthngtn> Hm, didn't know that was something for rough stomachs. :)

[12:09] <jnthnwrthngtn> Given there's no particular objects to https://github.com/rakudo/rakudo/pull/4633, will clean up the thing nine++ noticed and the failing spectest and undraft it

[12:09] <jnthnwrthngtn> releasable6: status

[12:09] <releasable6> jnthnwrthngtn, Next release in ≈8 days and ≈6 hours. 3 blockers. Changelog for this release was not started yet

[12:09] <releasable6> jnthnwrthngtn, Details: https://gist.github.com/ee601cf4e0e4fa217fac08a31b6d9a91

[12:10] <jnthnwrthngtn> Hm, wonder if it's wise to wait until after that.

[12:10] <dogbert11> tea is good if the stomach is 'overly active'

[12:12] <timo> jnthnwrthngtn: so that we only have new-disp in the release, but not get-rid-of-attrinited immediately as well?

[12:13] <jnthnwrthngtn> new-disp was in the previous release anyway :)

[12:13] <jnthnwrthngtn> But new-disp-nativecall is maybe in this one?

[12:15] <lizmat> feels like we should either for the release indeed, not both

[12:15] <lizmat> and there's still the matter of finding a release manager :-(

[12:18] <jnthnwrthngtn> Yes, and getting blin runs

[12:19] <jnthnwrthngtn> I hoped there'd be a release manager volunteer or two by now

[12:20] <timo> my desktop is definitely not beefy enough for blin at a reasonable pace :D

[12:20] <jnthnwrthngtn> m: class C { has int $.x = 1 }; C.new.x.say

[12:20] <camelia> rakudo-moar 3d80bec7c: OUTPUT: «1␤»

[12:20] <jnthnwrthngtn> m: class C { has int $.x = 1 }; C.new(x => 2).x.say

[12:20] <camelia> rakudo-moar 3d80bec7c: OUTPUT: «2␤»

[12:21] <jnthnwrthngtn> m: class C { has int $.x = 1 }; C.new(x => 0).x.say

[12:21] <camelia> rakudo-moar 3d80bec7c: OUTPUT: «1␤»

[12:21] <jnthnwrthngtn> m: class C { has int $.x is required }; C.new

[12:21] <camelia> rakudo-moar 3d80bec7c: OUTPUT: «The attribute '$!x' is required, but you did not provide a value for it.␤  in block <unit> at <tmp> line 1␤␤»

[12:21] <jnthnwrthngtn> m: class C { has int $.x is required }; C.new(x => 2)

[12:21] <camelia> rakudo-moar 3d80bec7c: ( no output )

[12:21] <jnthnwrthngtn> m: class C { has int $.x is required }; C.new(x => 0)

[12:21] <camelia> rakudo-moar 3d80bec7c: OUTPUT: «The attribute '$!x' is required, but you did not provide a value for it.␤  in block <unit> at <tmp> line 1␤␤»

[12:22] <timo> oh no

[12:22] <jnthnwrthngtn> Um. Well, there's nothing much good we can do about this, tbh.

[12:23] <jnthnwrthngtn> Thing is, attrinited never checked what kind of attriubte it was, it just read a pointer and checked for nullness

[12:23] <timo> checking for presence in the named arguments when calling bless isn't an option, right? the definition could be like "has int $.x = $.y - 5" and then it'd be fine to not have x

[12:23] <jnthnwrthngtn> Not really because you can also write it in a BUILD 

[12:24] <timo> right, or TWEAK

[12:24] <jnthnwrthngtn> TWEAK is after defaults are applied, but I guess before required, iirc

[12:24] <timo> so, give a deprecation warning for "is required" on int attributes?

[12:24] <jnthnwrthngtn> But yeah, there's a semi-predicate problem here and...I dunno what to do about it.

[12:24] <timo> for num we can potentially abuse tagged nans

[12:25] <jnthnwrthngtn> But I suspect it is widely used

[12:25] <timo> just gotta make sure the user doesn't use the exact same nan that we use

[12:25] <jnthnwrthngtn> greppable6: has int

[12:25] <greppable6> jnthnwrthngtn, 951 lines, 146 modules: https://gist.github.com/50949d7766b8b0e8685c869ad3bbf0d2

[12:26] <timo> i see only one instance of "is required", though not sure if any declarations are split across lines

[12:27] <jnthnwrthngtn> Yeah, quite a few more of default

[12:28] <timo> oh, i totally missed that

[12:31] <jnthnwrthngtn> So it turns out that for defaults we didn't rely on the attrinited semantics at all

[12:31] <jnthnwrthngtn>                     nqp::if(                     # 5

[12:31] <jnthnwrthngtn>                       nqp::iseq_i(my int $int = nqp::getattr_i(self,

[12:31] <jnthnwrthngtn>                         nqp::atpos($task,1),

[12:31] <jnthnwrthngtn>                         nqp::atpos($task,2)

[12:31] <jnthnwrthngtn>                       ), 0),

[12:31] <jnthnwrthngtn> We really do compare it to 0

[12:31] <timo> yeah that's kind of a footgun

[12:31] <jnthnwrthngtn> So it's only `is required` that cheats

[12:31] <timo> not sure if we should try declaring that a DIHWIDT

[12:31] <jnthnwrthngtn> It is, but I think deciding what to do about it is probably quite the yak shave...

[12:32] <jnthnwrthngtn> I'm inclined for now to just introduce buid plan codes for `is required` on the natives

[12:32] <jnthnwrthngtn> In order to preserve current semantics

[12:32] <jnthnwrthngtn> And then we can later discuss what to do with them

[12:32] <timo> what does your branch currently do for is required and default values?

[12:33] <jnthnwrthngtn> For natives?

[12:33] <timo> yes

[12:34] <jnthnwrthngtn> I believe ends up with a boxed value and then always considers it as an initialized thing

[12:35] <jnthnwrthngtn> dies-ok { CompUnit::DependencySpecification.new };

[12:36] <jnthnwrthngtn> That's the test that fails, and it doesn't throw an exception that the attribute was required but not provided

[12:36] <jnthnwrthngtn> (It's a str attribute)

[12:36] <timo> ok, so goes from "passing 0 explicitly triggers default and required throws" to "whether you pass something or not it always succeeds and never uses the default initializer" and by adding the build plan code we'll get the earlier behaviour back

[12:36] <jnthnwrthngtn> Right

[12:37] <timo> +1 from me on doing it like you proposed: get earlier semantics back, work on an actual decision later

[12:37] <jnthnwrthngtn> Yeah, I can open a problem-solving about it maybe

[12:38] <jnthnwrthngtn> I can't see any especially good options

[12:38] <jnthnwrthngtn> "sorry, you can't have the compactness of natives *and* these niceities" maybe

[12:39] <jnthnwrthngtn> (e.g. deprecation)

[12:39] <jnthnwrthngtn> I did momentarily consider madness like having an extra, secret, attribute that is used as a boolean flag

[12:40] <jnthnwrthngtn> But...if people are doing natives it's probably because they care about object size. And in CStruct it's outright dangerous

[12:40] <lizmat> fwiw, I'm ok with "is required" not working on native int / num

[12:40] <jnthnwrthngtn> Not to mention an absolute implementation nightmare anyway

[12:40] <lizmat> native str has a non-initialized state that can be troublesome

[12:40] <jnthnwrthngtn> OK. So, I'll 0) have lunch, a) restore current semantics, b) make a PS issue for further discussion

[12:40] <jnthnwrthngtn> bbiab

[12:40] <lizmat> m: my str @a; @a[1] = "foo"; dd @a[0]

[12:40] <camelia> rakudo-moar 3d80bec7c: OUTPUT: «chars requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»

[12:41] <lizmat> so I'd argue you *can* see if a native str has been set or not

[12:41] <jnthnwrthngtn> lizmat: Oh, at least for attributes I'll be able to fix that one in a bit

[12:41] <jnthnwrthngtn> You can but...I don't know we should expose that :)

[12:41] <lizmat> well,  there's that

[12:41] <lizmat> again, if we can always have a "" in a native str by default

[12:42] <lizmat> then I could live with no "is required" on natives

[12:42] <lizmat> because you basically always have a default , and defaults and "is required" don't mix

[12:43] <lizmat> m: class A { has $.a is required = 42 }   # guess that should also be a compile time error

[12:43] <camelia> rakudo-moar 3d80bec7c: ( no output )

[12:43] <lizmat> m: class A { has $.a is required = 42 }; A.new

[12:43] <camelia> rakudo-moar 3d80bec7c: OUTPUT: «The attribute '$!a' is required, but you did not provide a value for it.␤  in block <unit> at <tmp> line 1␤␤»

[13:03] *** reportable6 joined
[13:42] *** leont left
[13:42] *** tbrowder_ joined
[13:42] *** SmokeMachine_ joined
[13:42] *** tbrowder left
[13:42] *** tbrowder_ is now known as tbrowder

[13:42] *** SmokeMachine left
[13:42] *** SmokeMachine_ is now known as SmokeMachine

[13:43] *** leont joined
[13:44] *** dogbert11 left
[13:46] *** CaCode joined
[13:51] *** CaCode left
[13:51] *** CaCode joined
[13:53] *** dogbert17 joined
[13:56] *** CaCode_ joined
[13:56] <jnthnwrthngtn> lizmat: Defaulting str attributes to '' can happen as part of the work that will follow getting rid of attrinited (which will be the step removing lazy auto-viv of attributes)

[13:59] *** CaCode left
[14:00] <lizmat> yeah... that'd be nice  :-)

[14:01] *** frost left
[14:05] <dogbert17> hmm, I'm getting a test failure in t/spec/MISC/bug-coverage.t (test #2) when running with MVM_SPESH_NODELAY=1

[14:05] <dogbert17> No such method 'Str' for invocant of type 'VMNull'.  Did you mean

[14:05] <dogbert17> 'Str'?

[14:05] <dogbert17>   in sub count at /home/dogbert/repos/rakudo/t/spec/packages/Test-Helpers/lib/Test/Util.rakumod (Test::Util) line 61

[14:05] <dogbert17>   in block  at /home/dogbert/repos/rakudo/t/spec/packages/Test-Helpers/lib/Test/Util.rakumod (Test::Util) line 71

[14:17] *** SmokeMachine left
[14:19] *** leont left
[14:19] *** tbrowder left
[14:23] *** tbrowder joined
[14:32] *** CaCode_ left
[14:34] *** SmokeMachine joined
[14:34] *** leont joined
[15:01] *** ggoebel joined
[15:03] <jnthnwrthngtn> greppable6: attrinited

[15:03] <greppable6> jnthnwrthngtn, Found nothing!

[15:04] <jnthnwrthngtn> Wow, something no module author managed to depend on. I'm rarely so lucky... :)

[15:05] <lizmat> yeah, it was pretty obscure  :-)

[15:05] <lizmat> I guess this can go now: https://github.com/Raku/nqp/blob/master/docs/ops.markdown#attrinited

[15:05] <jnthnwrthngtn> Turns out removing it from NQP was easy too, though can't do that until it's gone from Rakudo

[15:05] <jnthnwrthngtn> Oh, good catch

[15:06] <jnthnwrthngtn> Added to the NQP branch

[15:10] <ggoebel> regarding new release manager... are there any responsibilities or tasks which are not covered in: https://github.com/rakudo/rakudo/blob/master/docs/release_guide.pod

[15:12] <lizmat> sena_kun ^^  ??

[15:19] <sena_kun> I suspect so. I'll take my time today to review the document and update/clarify.

[15:21] <lizmat> ++sena_kun 

[16:40] *** patrickb joined
[16:49] <nine> jnthnwrthngtn: do you want to have a look at new-disp-nativecall or should I just merge?

[16:54] <jnthnwrthngtn> nine: I can take a look over it.

[16:54] <jnthnwrthngtn> This evening if I've the energy, tomorrow if not, if that's fine.

[16:54] <jnthnwrthngtn> Gotta go for language class in a moment. That'll be interesting with a mushy brain. :)

[17:56] *** rypervenche left
[18:02] *** reportable6 left
[18:04] *** rypervenche joined
[18:05] *** reportable6 joined
[18:18] <timo> i can possibly do a release, but probably not anything related to windows or mac

[18:19] <timo> and also probably not blin

[18:52] *** ggoebel_ joined
[18:52] *** ggoebel left
[19:07] <timo> .o( "Oops! MoarVM has been put in a situation in which it is not confident it can continue." )

[19:37] <vrurg> timo: don't embarrass the compiler, or it will embarrass you?

[19:38] <timo> the compiler asks for your forgiveness

[19:39] <vrurg> But it doesn't revoke your embarrassement. :)

[19:51] <timo> trapped between a revoke and a reset --hard place

[20:56] *** CaCode joined
[21:26] <jnthnwrthngtn> Phew, that was quite a bit to review :)

[21:26] <jnthnwrthngtn> nine++

[21:35] <Geth> ¦ MoarVM/update-release-guide: d1b4ed5fdb | Altai-man++ | docs/release_guide.md

[21:35] <Geth> ¦ MoarVM/update-release-guide: Update MoarVM release guide according to the actual release process

[21:35] <Geth> ¦ MoarVM/update-release-guide: review: https://github.com/MoarVM/MoarVM/commit/d1b4ed5fdb

[21:38] <Geth> ¦ MoarVM: Altai-man++ created pull request #1599: Update MoarVM release guide according to the actual release process

[21:38] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1599

[21:38] <Geth> ¦ MoarVM/update-release-guide: e62bdcb940 | Altai-man++ | docs/release_guide.md

[21:38] <Geth> ¦ MoarVM/update-release-guide: Update MoarVM release guide according to the actual release process

[21:38] <Geth> ¦ MoarVM/update-release-guide: review: https://github.com/MoarVM/MoarVM/commit/e62bdcb940

[22:37] *** ggoebel_ left
[23:51] *** harrow left
[23:58] *** harrow joined
