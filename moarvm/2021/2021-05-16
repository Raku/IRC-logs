[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[03:10] *** evalable6 left
[03:10] *** statisfiable6 left
[03:10] *** sourceable6 left
[03:10] *** tellable6 left
[03:10] *** bloatable6 left
[03:10] *** reportable6 left
[03:10] *** nativecallable6 left
[03:10] *** releasable6 left
[03:10] *** quotable6 left
[03:10] *** greppable6 left
[03:10] *** bisectable6 left
[03:10] *** coverable6 left
[03:10] *** committable6 left
[03:10] *** linkable6 left
[03:10] *** notable6 left
[03:10] *** shareable6 left
[03:10] *** unicodable6 left
[03:10] *** squashable6 left
[03:10] *** benchable6 left
[03:11] *** greppable6 joined
[03:11] *** quotable6 joined
[03:11] *** statisfiable6 joined
[03:11] *** unicodable6 joined
[03:11] *** tellable6 joined
[03:11] *** nativecallable6 joined
[03:11] *** squashable6 joined
[03:12] *** shareable6 joined
[03:12] *** benchable6 joined
[03:12] *** reportable6 joined
[03:12] *** releasable6 joined
[03:12] *** evalable6 joined
[03:12] *** bisectable6 joined
[03:12] *** notable6 joined
[03:12] *** bloatable6 joined
[03:13] *** sourceable6 joined
[03:13] *** linkable6 joined
[03:13] *** committable6 joined
[03:14] *** coverable6 joined
[04:59] *** squashable6 left
[05:01] *** squashable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[07:05] *** sxmx1 left
[08:47] <Geth> Â¦ MoarVM/master: 6 commits pushed by (Nicholas Clark)++

[08:47] <Geth> Â¦ MoarVM/master: 179f5e50bb | Refactor the maths function probe logic to extract the common setup code.

[08:47] <Geth> Â¦ MoarVM/master: 31daadbaf8 | Implement `MVM_num_isnanorinf` using `isinf` and `isnan` if we find them.

[08:47] <Geth> Â¦ MoarVM/master: 86e1289e7e | Refactor the probe for `isinf` and `isnan`, and split it into two C macros.

[08:47] <Geth> Â¦ MoarVM/master: d602912290 | Add a probe for `signbit` and use it to implement `MVM_num_isnegzero`

[08:47] <Geth> Â¦ MoarVM/master: 31b13731f3 | Correct the return types of ` MVM_num_isnanorinf` and `MVM_num_isnegzero`.

[08:47] <Geth> Â¦ MoarVM/master: 2084ccf3f2 | Merge pull request #1488 from MoarVM/fpclassify

[08:47] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/7be2861904a1...2084ccf3f248

[08:48] *** linkable6 left
[08:49] *** linkable6 joined
[08:55] *** frost-lab joined
[08:56] *** squashable6 left
[08:57] *** squashable6 joined
[10:17] <Geth> Â¦ MoarVM/hash-stale: ebf22a79ad | (Nicholas Clark)++ | 2 files

[10:17] <Geth> Â¦ MoarVM/hash-stale: Free StrHashTable memory at GC safepoints; track when it is queued to free.

[10:17] <Geth> Â¦ MoarVM/hash-stale: 

[10:17] <Geth> Â¦ MoarVM/hash-stale: The control structure now has a flag which is set set to 0 when it is

[10:17] <Geth> Â¦ MoarVM/hash-stale: allocated. When the hash expands (and needs a new larger allocation) flag is

[10:17] <Geth> Â¦ MoarVM/hash-stale: set to 1 in the soon-to-be-freed memory, and the memory is scheduled to be

[10:17] <Geth> Â¦ MoarVM/hash-stale: released at the next safe point. This way avoid C-level use-after-free if

[10:17] <Geth> Â¦ MoarVM/hash-stale: threads attempt to mutate the same hash concurrently, and hopefully can spot

[10:17] <Geth> Â¦ MoarVM/hash-stale: at least some cases and fault them, often enough for bugs to be noticed.

[10:17] <Geth> Â¦ MoarVM/hash-stale: review: https://github.com/MoarVM/MoarVM/commit/ebf22a79ad

[10:17] <Geth> Â¦ MoarVM/hash-stale: 01b91fc033 | (Nicholas Clark)++ | 3 files

[10:17] <Geth> Â¦ MoarVM/hash-stale: Check the `stale` sentinel to try to trap concurrent hash accesses.

[10:17] <Geth> Â¦ MoarVM/hash-stale: 

[10:17] <Geth> Â¦ MoarVM/hash-stale: Previously MoarVM could well SEGV if two user threads access the same hash

[10:17] <Geth> Â¦ MoarVM/hash-stale: without locking. Now if it detects concurrent access it will oops instead

[10:17] <Geth> Â¦ MoarVM/hash-stale: with a diagnostic. It's not clear to me that we can really recover if we

[10:17] <Geth> Â¦ MoarVM/hash-stale: detect this, as concurrent write accesses might have already corrupted the

[10:17] <Geth> Â¦ MoarVM/hash-stale: hash structures too far for us to resolve problems.

[10:17] <Geth> Â¦ MoarVM/hash-stale: review: https://github.com/MoarVM/MoarVM/commit/01b91fc033

[10:17] <Geth> Â¦ MoarVM/hash-stale: d181883c05 | (Nicholas Clark)++ | src/core/str_hash_table.c

[10:17] <Geth> Â¦ MoarVM/hash-stale: If two threads "grow" the same hashtable concurrently, we must `oops`.

[10:17] <Geth> Â¦ MoarVM/hash-stale: 

[10:17] <Geth> Â¦ MoarVM/hash-stale: User threads are responsible for ensuring that they don't access MoarVM

[10:17] <Geth> Â¦ MoarVM/hash-stale: hashes concurrently, with mutexes or other concurrency primitives.

[10:17] <Geth> Â¦ MoarVM/hash-stale: 

[10:17] <Geth> Â¦ MoarVM/hash-stale: If they ignore this there is the potential for VM-level memory corruption

[10:17] <Geth> Â¦ MoarVM/hash-stale: and crashes (or worse). Growing hashes is rare, hence we afford the small

[10:18] <Geth> Â¦ MoarVM/hash-stale: performance hit of using atomic operations to detect if two threads attempt

[10:18] <Geth> Â¦ MoarVM/hash-stale: to reallocate the same hash at the same time, and exit with an informative

[10:18] <Geth> Â¦ MoarVM/hash-stale: message if so. (At the point we detect this we can't actually recover as

[10:18] <Geth> Â¦ MoarVM/hash-stale: we have a double free.)

[10:18] <Geth> Â¦ MoarVM/hash-stale: review: https://github.com/MoarVM/MoarVM/commit/d181883c05

[10:18] *** linkable6 left
[10:18] <Geth> Â¦ MoarVM: nwc10++ created pull request #1492:  Try to trap concurrent hash accesses.

[10:18] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1492

[10:19] *** linkable6 joined
[10:20] <nwc10> oooh, epic fast fail. I wonder why

[10:22] <nwc10> 2021-05-16T10:20:00.9382897Z fatal: unable to access 'https://github.com/MoarVM/MoarVM/': The requested URL returned error: 500

[10:22] <nwc10> 2021-05-16T10:20:01.0041254Z ##[warning]Git fetch failed with exit code 128, back off 1.507 seconds before retry.

[10:22] <nwc10> 2021-05-16T10:20:02.4582584Z ##[command]git -c http.extraheader="AUTHORIZATION: basic ***" fetch --force --tags --prune --progress --no-recurse-submodules origin +refs/heads/*:refs/remotes/origin/* +refs/pull/1492/merge:refs/remotes/pull/1492/merge

[10:22] <nwc10> 2021-05-16T10:20:03.9017049Z remote: Internal Server Error.

[10:22] <nwc10> 2021-05-16T10:20:03.9055517Z remote: 

[10:22] <nwc10> 2021-05-16T10:20:03.9117420Z fatal: unable to access 'https://github.com/MoarVM/MoarVM/': The requested URL returned error: 500

[10:22] <nwc10> Awesome!

[10:22] <nwc10> Epic fail.

[10:23] <nwc10> I shall wait a bit, then hit re-run

[10:23] <nine> The joy of having CI accessing the network and the major reason why I prefer a push to the Open Build Service

[10:24] <nwc10> The left hand of Microsoft is unable to talk to the right hand of Microsoft

[10:24] <nwc10> meanwhile, in definate #firstworldproblem, I seem to be about to run out of sherry.

[10:28] <Geth> Â¦ MoarVM: a1cfecd6db | (Stefan Seifert)++ | src/spesh/optimize.c

[10:28] <Geth> Â¦ MoarVM: Fix getting garbage numbers after spesh optimized away smart_intify

[10:28] <Geth> Â¦ MoarVM: 

[10:28] <Geth> Â¦ MoarVM: Spesh can turn a smart_intify of a num into a guard, sp_get_n and a coercion.

[10:28] <Geth> Â¦ MoarVM: However due to a typo instead of coercing the num into an int, we treated

[10:28] <Geth> Â¦ MoarVM: the num as an int and "coerced" it again to a num. This turned a 6.0 into

[10:28] <Geth> Â¦ MoarVM: 4618441417868443648 causing infix_x to repeat the input string a bit more

[10:28] <Geth> Â¦ MoarVM: often than intended, and making us allocate a huge array for the result.

[10:28] <Geth> Â¦ MoarVM: 

[10:28] <Geth> Â¦ MoarVM: Fixes GH #1466

[10:28] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a1cfecd6db

[10:28] *** linkable6 left
[10:29] <nine> If only all hard to diagnose bugs where so easy to fix :)

[10:30] * lizmat feels it is time for another MoarVM bump ?

[10:31] *** linkable6 joined
[10:31] <nine> I wonder if we should re-revert https://github.com/MoarVM/MoarVM/commit/9481289950b89dabb553e63d277038518c590b92 as it's clearly innocent. Or if we should wait for after the release.

[10:38] <Geth> Â¦ MoarVM: a75a206afb | (Stefan Seifert)++ | src/core/interp.c

[10:38] <Geth> Â¦ MoarVM: Revert "Revert "Always log the type coming out of an nqp::decont""

[10:38] <Geth> Â¦ MoarVM: 

[10:38] <Geth> Â¦ MoarVM: This reverts commit 9481289950b89dabb553e63d277038518c590b92.

[10:38] <Geth> Â¦ MoarVM: 

[10:38] <Geth> Â¦ MoarVM: The original commit is clearly innocent. It just unlocked more optimizations

[10:38] <Geth> Â¦ MoarVM: which uncovered quite a few spesh bugs. But hiding those won't get them fixed,

[10:38] <Geth> Â¦ MoarVM: so let's see what bugs come our way.

[10:38] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a75a206afb

[10:38] <nine> lizmat: now I feel like a bump is appropriate :)

[10:39] <lizmat> ok will do one

[10:39] <nine> thanks

[10:53] <dogbert11> nine++, absolutely brilliant :)

[10:56] <lizmat> bumped

[11:57] <dogbert11> I have a few modules cloned, but not installed, on my system. I run their tests from time to time to see if anything strange happens.

[11:58] <dogbert11> when running 'prove --exec "perl6-m -Ilib"' on [Tux] CSV module I get: Missing or wrong version of dependency 'gen/moar/stage2/NQPHLL.nqp' (from '/home/dogbert/repos/CSV/lib/IO/String.pm6 (IO::String)')

[11:58] <dogbert11> what could be the reason for this?

[11:59] <dogbert11> wiping the .precomp dir in the modules lib dir will almost certainly fix it

[11:59] <nine> Does RAKUDO_MODULE_DEBUG=1 tell more of the story?

[11:59] <dogbert11> I can check :)

[12:01] <dogbert11> nine: https://gist.github.com/dogbert17/4708025a205ac13829e36e1dfcd56043

[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:18] <nine> Nah...would need closer inspection of those files

[12:25] <dogbert11> ok, another question, the latest MoarVM fixes made some stuff faster (yay) and a few programs a bit slower. It that to be expected?

[12:32] <nine> commit c8c1b4f2b49564d3b40a22a08e381485ff16d5aa certainly made things slower

[12:32] *** linkable6 left
[12:34] <dogbert11> I see slowdown in som scripts, usually it's not that much slower, bu I have one example where the slowdown is ~30 percent which seems to be an outlier

[12:34] <dogbert11> my spelling is atrocious

[12:35] <dogbert11> execution time before bump was 16 sec and 22 after

[12:35] *** linkable6 joined
[12:36] <dogbert11> here's the script https://gist.github.com/dogbert17/36ff5b85a46de83930b27184e46d523a

[12:41] <MasterDuke> nine++

[14:05] *** domidumont joined
[14:41] *** frost-lab left
[16:18] *** Kaeipi joined
[16:18] *** Kaiepi left
[16:23] *** Kaeipi left
[16:23] *** sena_kun left
[16:23] *** Kaeipi joined
[16:25] *** sena_kun joined
[16:43] *** zakharyas joined
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:27] *** patrickb joined
[18:33] *** domidumont left
[19:32] <Geth> Â¦ MoarVM/MVM_fixed_size_destroy-free-safepoint-overflow-list: 5ba30ed83d | (Nicholas Clark)++ | src/core/fixedsizealloc.c

[19:32] <Geth> Â¦ MoarVM/MVM_fixed_size_destroy-free-safepoint-overflow-list: `MVM_fixed_size_destroy` needs to free the safepoint overflow list.

[19:32] <Geth> Â¦ MoarVM/MVM_fixed_size_destroy-free-safepoint-overflow-list: 

[19:32] <Geth> Â¦ MoarVM/MVM_fixed_size_destroy-free-safepoint-overflow-list: Otherwise anything oversize that has been queued to free at a safepoint

[19:32] <Geth> Â¦ MoarVM/MVM_fixed_size_destroy-free-safepoint-overflow-list: can leak on --full-cleanup.

[19:32] <Geth> Â¦ MoarVM/MVM_fixed_size_destroy-free-safepoint-overflow-list: review: https://github.com/MoarVM/MoarVM/commit/5ba30ed83d

[19:32] <Geth> Â¦ MoarVM: nwc10++ created pull request #1493: `MVM_fixed_size_destroy` needs to free the safepoint overflow list.

[19:32] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1493

[19:48] *** linkable6 left
[19:48] *** evalable6 left
[19:48] *** linkable6 joined
[19:49] *** evalable6 joined
[20:24] <Geth> Â¦ MoarVM/hash-stale: ae024a492f | (Nicholas Clark)++ | 2 files

[20:24] <Geth> Â¦ MoarVM/hash-stale: Free StrHashTable memory at GC safepoints; track when it is queued to free.

[20:24] <Geth> Â¦ MoarVM/hash-stale: 

[20:24] <Geth> Â¦ MoarVM/hash-stale: The control structure now has a flag which is set set to 0 when it is

[20:24] <Geth> Â¦ MoarVM/hash-stale: allocated. When the hash expands (and needs a new larger allocation) flag is

[20:24] <Geth> Â¦ MoarVM/hash-stale: set to 1 in the soon-to-be-freed memory, and the memory is scheduled to be

[20:24] <Geth> Â¦ MoarVM/hash-stale: released at the next safe point. This way avoid C-level use-after-free if

[20:24] <Geth> Â¦ MoarVM/hash-stale: threads attempt to mutate the same hash concurrently, and hopefully can spot

[20:24] <Geth> Â¦ MoarVM/hash-stale: at least some cases and fault them, often enough for bugs to be noticed.

[20:24] <Geth> Â¦ MoarVM/hash-stale: review: https://github.com/MoarVM/MoarVM/commit/ae024a492f

[20:24] <Geth> Â¦ MoarVM/hash-stale: d8a16dfd48 | (Nicholas Clark)++ | 3 files

[20:24] <Geth> Â¦ MoarVM/hash-stale: Check the `stale` sentinel to try to trap concurrent hash accesses.

[20:24] <Geth> Â¦ MoarVM/hash-stale: 

[20:24] <Geth> Â¦ MoarVM/hash-stale: Previously MoarVM could well SEGV if two user threads access the same hash

[20:24] <Geth> Â¦ MoarVM/hash-stale: without locking. Now if it detects concurrent access it will oops instead

[20:24] <Geth> Â¦ MoarVM/hash-stale: with a diagnostic. It's not clear to me that we can really recover if we

[20:24] <Geth> Â¦ MoarVM/hash-stale: detect this, as concurrent write accesses might have already corrupted the

[20:24] <Geth> Â¦ MoarVM/hash-stale: hash structures too far for us to resolve problems.

[20:24] <Geth> Â¦ MoarVM/hash-stale: review: https://github.com/MoarVM/MoarVM/commit/d8a16dfd48

[20:24] <Geth> Â¦ MoarVM/hash-stale: 77756158c7 | (Nicholas Clark)++ | src/core/str_hash_table.c

[20:24] <Geth> Â¦ MoarVM/hash-stale: If two threads "grow" the same hashtable concurrently, we must `oops`.

[20:24] <Geth> Â¦ MoarVM/hash-stale: 

[20:25] <Geth> Â¦ MoarVM/hash-stale: User threads are responsible for ensuring that they don't access MoarVM

[20:25] <Geth> Â¦ MoarVM/hash-stale: hashes concurrently, with mutexes or other concurrency primitives.

[20:25] <Geth> Â¦ MoarVM/hash-stale: 

[20:25] <Geth> Â¦ MoarVM/hash-stale: If they ignore this there is the potential for VM-level memory corruption

[20:25] <Geth> Â¦ MoarVM/hash-stale: and crashes (or worse). Growing hashes is rare, hence we afford the small

[20:25] <Geth> Â¦ MoarVM/hash-stale: performance hit of using atomic operations to detect if two threads attempt

[20:25] <Geth> Â¦ MoarVM/hash-stale: to reallocate the same hash at the same time, and exit with an informative

[20:25] <Geth> Â¦ MoarVM/hash-stale: message if so. (At the point we detect this we can't actually recover as

[20:25] <Geth> Â¦ MoarVM/hash-stale: we have a double free.)

[20:25] <Geth> Â¦ MoarVM/hash-stale: review: https://github.com/MoarVM/MoarVM/commit/77756158c7

[20:38] *** zakharyas left
[21:12] *** patrickb left
[22:24] *** dogbert11 left
[22:25] *** dogbert11 joined
