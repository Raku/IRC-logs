[00:03] *** reportable6 left
[00:05] *** reportable6 joined
[04:35] *** samcv_ joined
[04:36] *** harrow` joined
[04:37] *** quotable6 left
[04:37] *** linkable6 left
[04:37] *** notable6 left
[04:37] *** committable6 left
[04:37] *** shareable6 left
[04:37] *** benchable6 left
[04:37] *** releasable6 left
[04:37] *** reportable6 left
[04:37] *** unicodable6 left
[04:37] *** bartolin left
[04:37] *** samcv left
[04:37] *** harrow left
[04:37] *** squashable6 left
[04:37] *** MasterDuke left
[04:37] *** squashable6 joined
[04:38] *** bartolin joined
[04:39] *** benchable6 joined
[04:40] *** reportable6 joined
[04:40] *** quotable6 joined
[04:41] *** shareable6 joined
[04:41] *** releasable6 joined
[04:41] *** notable6 joined
[04:42] *** committable6 joined
[04:42] *** linkable6 joined
[04:42] *** unicodable6 joined
[05:22] *** squashable6 left
[05:23] *** frost joined
[05:25] *** squashable6 joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:36] *** Kaiepi left
[06:36] *** japhb left
[06:36] *** LizBot left
[06:36] *** moon-child left
[06:36] *** cognominal left
[06:36] *** leont left
[06:36] *** JRaspass left
[06:37] *** Kaiepi joined
[06:37] *** japhb joined
[06:37] *** LizBot joined
[06:37] *** moon-child joined
[06:37] *** cognominal joined
[06:37] *** leont joined
[06:37] *** JRaspass joined
[09:24] <nine> That bit about sorted_keys makes me wonder if there's another way to get reproducible builds (which are important because precomp management relies on SHA hashes of file contents)
[09:24] <nine> We don't require that hash entries are sorted. We only require that they are written in the same order every time. Currently they are not due to hash randomization.
[09:24] <nine> So what if we simply disable hash randomization for precompilation instead?
[09:26] <nine> That would fix the reproducibility issue for compilation of the setting as well as precompiled modules.
[09:34] <japhb> nine: Do they get randomized when read back in and thawed?
[09:35] <japhb> (Otherwise I worry that we bake in well-known orderings that attackers can count on)
[09:38] <nine> japhb: yes, we create a completely new hash which would get a random salt and then just bind all the keys
[09:49] <japhb> Ah, well that handles that worry at least.
[11:43] *** committable6 left
[11:43] *** nativecallable6 left
[11:43] *** benchable6 left
[11:43] *** releasable6 left
[11:43] *** unicodable6 left
[11:43] *** coverable6 left
[11:43] *** evalable6 left
[11:43] *** greppable6 left
[11:43] *** sourceable6 left
[11:43] *** notable6 left
[11:43] *** linkable6 left
[11:43] *** reportable6 left
[11:43] *** bloatable6 left
[11:43] *** statisfiable6 left
[11:43] *** tellable6 left
[11:43] *** bisectable6 left
[11:43] *** quotable6 left
[11:43] *** shareable6 left
[11:43] *** squashable6 left
[11:44] *** linkable6 joined
[11:44] *** shareable6 joined
[11:44] *** releasable6 joined
[11:44] *** squashable6 joined
[11:44] *** sourceable6 joined
[11:45] *** bisectable6 joined
[11:45] *** benchable6 joined
[11:45] *** nativecallable6 joined
[11:45] *** reportable6 joined
[11:45] *** bloatable6 joined
[11:45] *** notable6 joined
[11:45] *** greppable6 joined
[11:45] *** evalable6 joined
[11:45] *** quotable6 joined
[11:46] *** tellable6 joined
[11:46] *** unicodable6 joined
[11:46] *** coverable6 joined
[11:46] *** committable6 joined
[11:47] *** statisfiable6 joined
[12:02] *** reportable6 left
[12:06] *** reportable6 joined
[13:40] *** MasterDuke joined
[13:46] <MasterDuke> nine: i thought disabling hash randomization required moarvm source changes? do you propose making that configurable at a higher level? or just seeding the rng with a constant value during precomp?
[13:50] *** squashable6 left
[13:51] *** squashable6 joined
[14:09] <timo> now why would ack give a result from a .o file?
[14:12] <nine> MasterDuke: it does. But maybe we can make that configurable. Maybe even on a per-hash basis.
[14:17] <Geth> Â¦ MoarVM/turn_off_hash_rando_while_precompiling: 6ce862e04d | (Timo Paulssen)++ | 2 files
[14:17] <Geth> Â¦ MoarVM/turn_off_hash_rando_while_precompiling: let's try moving hashSecrets out of the way while precompiling
[14:17] <Geth> Â¦ MoarVM/turn_off_hash_rando_while_precompiling: review: https://github.com/MoarVM/MoarVM/commit/6ce862e04d
[14:17] <timo> who wants to try it?
[14:17] <timo> nine:? :)
[14:20] <timo> of course it won't do much if we don't remove all the sorting that has been added to make precomp deterministic
[14:20] <timo> though will this work when a hash has already been created?
[14:22] <timo> is it enough if this only impacts hashes that have been created since we've entered compilation? what about hashes we've created before entering compilation, but that will enter into the precomp directly or indirectly
[14:23] <timo> do we enter precomp mode before doing parsing for example? i guess we have to since some things already run during parse time
[14:23] <timo> welp.
[14:24] <timo> haha that patch immediately crashes when trying to go through nqp compilation
[14:26] <MasterDuke> whoops
[14:26] <MasterDuke> timo: btw, are you going to create appimages for the most recent releases?
[14:27] <MasterDuke> also, while moarperf is much faster at loading large profiles than the html version, if the allocations are large it doesn't ever seem to load that tab
[14:29] <MasterDuke> i.e., i have to tell chrome/firefox to not cancel the script a couple times, but they do *eventually* show the allocations tab of a normal profile (of this nativecall example we've been playing with), but moarperf just sits and says loading, but never does
[14:30] <timo> oh dang
[14:31] <timo> does moarperf finish doing its thing before the browser's problem starts/happens?
[14:31] <timo> i guess i'll want to put some pagination in if there's a boatload of different types
[14:32] <timo> i'll be AFK again but then i'll have a few looks
[14:45] <MasterDuke> no, the browser problems are only with the normal html profile
[15:24] <timo> oh i misread it literally doesn't give the results from backend to frontend or something else is going wrong
[15:28] <timo> can you send me the sqlite3 file? or maybe i should ask first: how big is it? :D
[15:28] <timo> and what are all of these types anyway; versions of Callable that have lots and lots of different signatures mixed in and return types and such?
[15:52] <timo> https://github.com/timo/rakudo-appimage/releases/tag/2021.05 MasterDuke, wanna give it a try?
[15:53] <MasterDuke> lots of nativecall types
[15:53] <timo> like different cstructs and such?
[15:53] <MasterDuke> sqlite3 is only 7.2mb
[15:55] <timo> i'll take it
[15:55] <MasterDuke> appimage works, thanks
[15:56] <MasterDuke> what's that file transfer service?
[15:56] <timo> i'd say just plop it onto u.setxkbmap.de
[15:57] <MasterDuke> blob:https://u.setxkbmap.de/0bf0f470-7e1b-418e-adbe-33360db12134
[15:58] <MasterDuke> it's a --profile-compile of this https://u.setxkbmap.de/#85ky0cbWL3Ac9R7PUWd6Pg
[15:59] <MasterDuke> probably afk for a bit
[16:03] <timo> that link isn.t going to cut it :D
[16:04] <timo> the blob: one
[16:05] <MasterDuke> https://u.setxkbmap.de/#8zZQH9WNDqYA53Xp-H_Weg
[16:08] <timo> thank you
[16:08] <timo> now i get to eat
[16:53] <timo> i think i should probably delete that dumb branch before someone tries it out :D
[17:26] *** RakuIRCLogger left
[17:26] *** LizBot left
[17:26] *** lizmat_ joined
[17:27] *** LizBot joined
[17:27] *** RakuIRCLogger joined
[17:28] *** lizmat left
[17:29] *** lizmat_ is now known as lizmar
[17:29] *** lizmar is now known as lizmat
[17:29] *** lizmat left
[17:29] *** lizmat joined
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:39] <MasterDuke> well, now we know what not to do...
[18:55] <timo> one down, fifty bajillion to go
[19:56] *** dogbert11 joined
[19:59] *** dogbert17 left
[21:22] *** njm joined
[21:24] *** njm left
