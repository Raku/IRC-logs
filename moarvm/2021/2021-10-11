[00:01] <jnthnwrthngtn> And about 3...NFG is defined in terms of Unicode properties; I think "combining characters" is a slightly hand-waving term, but I imagine anything you'd consider that is covered by the grapheme cluster rules, which are in https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries
[00:01] <jnthnwrthngtn> NFG is "just" giving negative codepoints to things outside of NFC that form a single grapheme cluster
[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:06] <jnthnwrthngtn> I guess the more nuanced answer to 2 is "maybe there is but not trivially".
[00:06] <jnthnwrthngtn> sleep &
[00:18] <japhb> Ooof.  Well that was a depressing dose of reality.  :-P
[00:22] <japhb> Hmmm, let me take a step back.  I'm trying to implement an editable text buffer with undo/redo capability.  However "insert $new-string at $pos" is an operation that must turn into "replace $some-chunk between ($pos - $some-chunk.chars) and $pos with ($some-chunk ~ $new-string)" because of renormalization across the join boundary.
[00:23] <japhb> So I'm trying to figure out how to determine what $some-chunk will need to be so I can create the undo and redo records.
[00:46] *** ggoebel joined
[01:36] *** SmokeMachine left
[01:43] *** frost joined
[01:44] *** SmokeMachine joined
[02:42] *** ggoebel left
[03:49] *** JimmyZ joined
[03:50] <JimmyZ> Maybe a good read: Different JIT Compilations in a Meta-tracing JIT Compiler Framework https://arxiv.org/pdf/2011.03516.pdf
[03:51] <JimmyZ> jnthnwrthngtn, nine, brrt ^
[05:43] *** JimmyZ left
[05:50] *** JimmyZ joined
[06:03] *** reportable6 left
[06:03] *** reportable6 joined
[07:19] *** MasterDuke left
[07:19] *** discord-raku-bot left
[07:19] *** leont left
[07:19] *** Nicholas left
[07:30] *** MasterDuke joined
[07:30] *** discord-raku-bot joined
[07:30] *** leont joined
[07:30] *** Nicholas joined
[08:02] *** root___ joined
[08:02] *** JimmyZ left
[08:02] *** root___ is now known as JimmyZ
[08:05] *** JimmyZ left
[08:05] *** JimmyZ joined
[08:52] *** JimmyZ left
[08:53] *** ggoebel joined
[09:13] <MasterDuke> interesting. i just got a slightly different segv. the spesh candidate we got out of a spesh slot here is fubar https://github.com/MoarVM/MoarVM/pull/1561/files#diff-34715b5e8db6cf81887ae7c98a123cb13605aa28605441428c095dcf91db707eR6455
[09:15] <MasterDuke> so i set a watchpoint on that spesh slot and it gets overwritten in MVM_spesh_add_spesh_slot
[09:16] <MasterDuke> but how is that possible? MVM_spesh_add_spesh_slot should be sticking things on the end, not overwriting
[09:27] <MasterDuke> https://gist.github.com/MasterDuke17/1c009d5623f809e392c46840b922c9d2 so info from rr
[09:27] <MasterDuke> *some
[09:58] <MasterDuke> ha! thought i'd see what asan had to say. this was its suggestion "...Dissassemble the provided pc to learn which register was used.". that's pretty drastic, didn't think i'd have to take apart my computer to figure this bug out
[10:06] <jnthnwrthngtn> moarning o/
[10:06] <Nicholas> \o
[10:19] <MasterDuke> any weekend-inspired fixes for the spesh optimization inconsistencies?
[10:19] <jnthnwrthngtn> No; needed to do family things and try to rest a bit.
[10:20] <jnthnwrthngtn> So barely hacked on anything (an hour or so on a private fun project...)
[10:20] <jnthnwrthngtn> Not too much use working on it here at the office either, 'cus it turns out that I don't see the inconsistencies here after the various patches I worked on last time. 
[10:24] <MasterDuke> huh. do you see any difference with clang vs gcc on your office computer?
[10:25] *** linkable6 left
[10:25] *** evalable6 left
[10:27] <jnthnwrthngtn> Hm, didn't occur to me to try that. But given I *did* see the difference here, and now don't, and it looks timing related in various ways, I'm sorta suspecting that this is a 6-physical core Xeon chip and home is a 16-physical core (I think? or 32?) AMD chip 
[10:27] <jnthnwrthngtn> (Well, "now don't" as in "my patch set eliminated them on this machine")
[10:31] <MasterDuke> cpu architecture and/or concurrently debugging, the best kinds
[10:40] <nine> jnthnwrthngtn: 16 cores, 32 threads
[10:41] <jnthnwrthngtn> Yeah, sounds right :) I'm not sure there is a 32/64 version :)
[10:42] <nine> Not of Ryzen. You can get up to 64 cores (!) in an AMD Threadripper
[10:44] <MasterDuke> but they don't have a zen3 threadripper yet, right?
[10:44] <nine> AFAIK not. It's still Zen2
[10:45] <dogbert17> jnthnwrthngtn: do you want something super easy to do while drinking your coffee?
[10:46] <dogbert17> t/spec/S06-advanced/dispatching.rakudo.moar                     (Wstat: 0 Tests: 6 Failed: 0)
[10:46] <dogbert17>   TODO passed:   1-2
[10:46] * dogbert17 is drinking coffee
[10:58] <dogbert17> btw, I tried to set MVM_HASH_RANDOMIZE=0 in src/moar.h and that seemed to make the gist run 'fast' all the time (tried running it about 15 times)
[10:58] *** Altai-man joined
[11:09] <Altai-man> did anyone remember fixing an issue with `No such method 'CALL-ME' for invocant of type 'Int'`? Not so recent Blin shown the Curry module to fail with this, but it passes on latest for me. Not sure if race or not.
[11:09] <tellable6> 2021-10-03T00:47:49Z #raku <[Coke]> altai-man - is https://github.com/rakudo/rakudo/issues/4314 closable?
[11:09] <Altai-man> [Coke], not yet. :(
[11:28] *** linkable6 joined
[11:53] <dogbert17> Altai-man: FWIW, https://github.com/rakudo/rakudo/issues/4543 mentions some CALL-ME related changes
[11:53] <Altai-man> ah yes, and the author is the same, I thought I saw the nick somewhere! dogbert17++
[12:03] *** reportable6 left
[12:05] *** reportable6 joined
[12:27] *** evalable6 joined
[12:54] <jnthnwrthngtn> Phew, think I finally found/fixed the problem that led my callwith work to pile up doomed dispatch programs (which never ever succeeded)
[13:44] <Nicholas> nine: it compiles - ship it
[13:44] <Nicholas> OK, so new-disp-nativecall does fail some spectests on ppc64
[13:44] <Nicholas> which IIRC master did not
[13:46] <Nicholas> oh, but x86_64 fails (at least) one test in the same way
[13:47] <Nicholas> identical fails!
[13:48] <Geth> ¦ MoarVM: 7fe8a0d94d | (Jonathan Worthington)++ | src/disp/program.c
[13:48] <Geth> ¦ MoarVM: Correct compilation of resume inits
[13:48] <Geth> ¦ MoarVM: 
[13:48] <Geth> ¦ MoarVM: When we have a dispatch program that works through multiple levels of
[13:48] <Geth> ¦ MoarVM: resumption, each level may set up one or more new future resumptions.
[13:48] <Geth> ¦ MoarVM: We take care to emit dispatch resumptions that are set up innermost
[13:48] <Geth> ¦ MoarVM: first, however that must be done taking into account the resumption
[13:48] <Geth> ¦ MoarVM: levels. Otherwise, we can end up reading resume init state of the
[13:48] <Geth> ¦ MoarVM: original resumptions at the wrong time.
[13:49] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7fe8a0d94d
[13:56] *** frost left
[14:04] *** kjp left
[14:11] <nine> Nicholas: what fail is that?
[14:20] *** lizmat_ joined
[14:21] *** TempIRCLogger left
[14:21] *** TempIRCLogger joined
[14:24] *** lizmat left
[14:27] *** kjp joined
[14:29] *** lizmat_ is now known as lizmat
[14:29] *** lizmat left
[14:30] *** lizmat joined
[14:32] <MasterDuke> jnthnwrthngtn: btw, SmokeMachine had a rakuast question over in #raku "Hi! I'm starting playing with RakuAST and I'm not being able to add a custom pass on it... should it be working? https://usercontent.irccloud-cdn.com/file/UHCWPzvB/image.png"
[14:40] <jnthnwrthngtn> MasterDuke: Ah, they asked me elsewhere, and I answered :)
[14:40] <MasterDuke> cool
[14:45] <MasterDuke> thought i'd do something a bit different today, went on a shortish hike up, down, and around cooper's hill, where they hold the famous cheese rolling competition. it really is quite steep, not at all surprised at the number of injuries sustained
[14:47] <Geth> ¦ MoarVM: b535721442 | (Jonathan Worthington)++ | src/disp/resume.c
[14:47] <Geth> ¦ MoarVM: Only resume innermost resumable dispatch
[14:47] <Geth> ¦ MoarVM: 
[14:47] <Geth> ¦ MoarVM: The rule were meant to be:
[14:47] <Geth> ¦ MoarVM: 
[14:47] <Geth> ¦ MoarVM: * Disregard any non-resumable dispatch encountered
[14:47] <Geth> ¦ MoarVM: * If we encounter a resumption that itself sets up further resumptions,
[14:47] <Geth> ¦ MoarVM:   it is logically part of some base dispatch, so keep looking
[14:47] <Geth> ¦ MoarVM: <…commit message has 8 more lines…>
[14:47] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b535721442
[14:49] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/10/11/2021-41-different-patterns/
[14:53] <jnthnwrthngtn> Yay :)
[15:04] <Nicholas> nine: http://paste.scsys.co.uk/595994
[15:17] <nine> Ooh spectests. I haven't run any yet
[15:18] <nine> It's odd that they would be affected by NativeCall changes at all. Maybe my branch is just too far behind master
[15:18] <Nicholas> oh. in which case, I'm dissapointed by how few you've broken. Try harder! :-)
[15:18] <Nicholas> yes, possibly it's just a bit "last week"
[15:40] <nine> Now why would adding the dispatcher-track-unbox-int syscall and MVMDispOpcodeUnboxInt op lead to segfaults in the expression JIT when running the profiler on an empty program? Even when neither syscall nor op are ever used?
[15:41] <jnthnwrthngtn> nine: I had great "fun" by forgetting to update labels.h
[15:41] <jnthnwrthngtn> And then having the computed goto jump to quite random places :)
[15:42] <nine> Thankfully the compiler actually warned me about that!
[15:43] <jnthnwrthngtn> Lucky you, mine didn't!
[15:43] <nine> A bit indirectly though, with an "unused" warning.
[15:43] <nine> Does the order of those ops matter?
[15:45] <jnthnwrthngtn> The order in the labels.h must match the order in the enum since the opcode indexes the array
[15:46] <jnthnwrthngtn> But otherwise, I don't believe so; the order they're in is mostly organizational (grouping similar things)
[15:48] <nine> Ok. Didn't know that the order matters, but did it right anyway
[15:49] <nine> walk_tree (tc=0x4c3e70, tree=0x7ffff02025e0, traverser=0x7ffff6dbbf90, node=-153370240)
[15:50] <jnthnwrthngtn> Phew, think I'm much of the way through https://github.com/rakudo/rakudo/issues/4542
[15:55] <MasterDuke> while people are here, how is possible that MVM_spesh_add_spesh_slot is overwriting a slot? that's not normal/expected, right?
[16:00] <jnthnwrthngtn> Sounds wrong to me
[16:01] <jnthnwrthngtn> We used to have some sp_findmethod that would write into a spesh slot, but it's long gone
[16:05] <MasterDuke> https://github.com/MoarVM/MoarVM/blame/master/src/spesh/optimize.c#L1564 does
[16:13] <nine> jnthnwrthngtn: oh, it's not the addition of dispatcher-track-unbox-int or MVMDispOpcodeUnboxInt after all! I had sp_nativecall already added to src/core/oplist but nowhere else
[16:14] <jnthnwrthngtn> MasterDuke: Does what? That line is updating a spesh operand?
[16:17] <MasterDuke> yeah. https://github.com/MoarVM/MoarVM/blame/master/src/spesh/optimize.c#L1437
[16:23] <jnthnwrthngtn> I don't see the connection with spesh slots, it's the index of the spesh candidate that we're pre-selecting
[16:23] <jnthnwrthngtn> Ah, but maybe you need this to refer to a spesh slot containing the candidate now?
[16:24] <jnthnwrthngtn> In that case I'd expect it'd need to add the candidate to a spesh slot and update the index there, but...
[16:24] <MasterDuke> yep
[16:25] <jnthnwrthngtn> Oh no, it's OK, I think -1 is used as the "no spesh candidate linked" value
[16:25] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1561/commits/3301f5a3d7d93119944689d2ee9322f498fbe07a
[16:25] <jnthnwrthngtn> So spesh slots start at 0
[16:25] <MasterDuke> oops, https://github.com/MoarVM/MoarVM/pull/1561/commits/012122694825bc132942597a88f14575f94f528e
[16:26] <MasterDuke> and https://github.com/MoarVM/MoarVM/pull/1561/commits/e3dc092c76553096abc43b4defa771310077fbe9
[16:29] <jnthnwrthngtn> Hm, that looks better
[16:29] <jnthnwrthngtn> Only issue may be that I think the sslot type in oplist implies unsinged, but we stick a -1 in there
[16:29] <jnthnwrthngtn> May have to leave that change out
[16:30] <nine> Apparently the spect test failures all have the same reason: the check for a custom dispatcher gives bogus results when junctions are involved:
[16:30] <nine> nqp::isconcrete(my $custom-dispatcher := nqp::decont(nqp::how_nd($code).find_method($code, 'CUSTOM-DISPATCHER'))) 
[16:30] <nine> The weird thing about this is, that this ^^^ is exactly the same code as the check for CALL-ME with just the names replaced
[16:33] <MasterDuke> i printed out the values in the sp_runbytecode_* ops in interp.c and there are -1s there
[16:34] <MasterDuke> e.g., here https://github.com/MoarVM/MoarVM/pull/1561/commits/012122694825bc132942597a88f14575f94f528e#diff-34715b5e8db6cf81887ae7c98a123cb13605aa28605441428c095dcf91db707eR6391
[16:45] *** Geth left
[16:46] *** Geth joined
[16:46] *** RakuIRCLogger joined
[16:50] <jnthnwrthngtn> OK
[16:51] <jnthnwrthngtn> Hm, then I don't immediately see what's missing/wrong
[17:43] *** Altai-man left
[17:56] *** squashable6 left
[17:59] *** squashable6 joined
[18:02] *** reportable6 left
[18:47] <Nicholas> jnthnwrthngtn: ASAN finds new-disp-callwith most uninteresting
[19:04] *** reportable6 joined
[19:35] <nine> jnthnwrthngtn: I figured out my spec test failures wrt CUSTOM-DISPATCHER. Need to pass a :no-fallback to nqp::how_nd($code).find_method($code, 'CUSTOM-DISPATCHER', :no-fallback). Maybe a good idea for the search for CALL-ME as well?
[19:43] <nine> https://github.com/rakudo/rakudo/blob/master/src/vm/moar/dispatchers.nqp#L623
[20:03] *** patrickb joined
[20:15] <japhb> jnthnwrthngtn: I really appreciate that you mark in the commit description when you add a big block doc comment to a commit (as in the rakudo commit earlier).  Helps me not miss the deeper info.  :-)
[20:23] <jnthnwrthngtn> nine: Ah, yes, probably it is
[20:24] <jnthnwrthngtn> nine: Should I or will you?
[20:53] <[Coke]> me: finally give up and install a rakudo binary so I can get dayjob scripts running again. Try another build from source... it jfw. (can still reproduce the --debug == concurrent NC failures)
[20:54] <[Coke]> No idea what unblocked.
[20:54] * [Coke] will try another, non-debug build
[20:59] <[Coke]> debugserver.c(1010) : warning C4700: uninitialized local variable 'tc' used
[21:02] <[Coke]> seems like a legit warning.
[21:40] *** patrickb left
[22:05] <[Coke]> so at some point during a rebuild, a 'git clean -xdf' started dying complaining it couldn't remove nqp-m.exe from the nqp build dir. I think once that started happening, any builds were going to be a problem. I rebooted, whatever had the file locked had let go, and I got a successful build.
[22:06] <[Coke]> so I'm guessing some variant of that was what was giving me trouble earlier.
[22:10] <jnthnwrthngtn> Urgh, sounds like
[22:14] <[Coke]> sorry for the wild goose chase!
[22:15] <[Coke]> I tried a few things to free the lock, but no luck. (said it had itself open, couldn't see nqp-m in the task listing)
[22:20] <[Coke]> (hence reboot)
[22:30] <jnthnwrthngtn> Well, I solved a debug server bug on Windows while I was in the VM, so it wasn't all for nothing :)
[22:48] <[Coke]> nice!
[23:02] <japhb> jnthnwrthngtn: Looking at the link you sent yesterday for MVM_nfg_is_concat_stable -- any particular reason lines 450..453 (https://github.com/MoarVM/MoarVM/blob/d11bd7f11aa6661d6c09b3284bee6d3931bb3508/src/strings/nfg.c#L450) shouldn't be hoisted up between 433 and 444?  It looks like when the MVM_unicode_relative_ccc if succeeds, it throws away all the other work in the surrounding block.
[23:05] <japhb> The summary of my review of the comments in that function is: only the last codepoint of the previous string could change during string concat renormalization *unless* the joining point is surrounded by region indicators.
[23:45] <japhb> Interestingly, reviewing the source for MVM_string_concatenate, I *think* consumed_a (count of graphemes consumed from first string) can only be 0 or 1 in that code.  So either the region indicators comment isn't really a problem, or MVM_string_concatenate never got updated for region indicators.
