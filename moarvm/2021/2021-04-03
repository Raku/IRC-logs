[02:41] *** notable6 left
[02:41] *** greppable6 left
[02:41] *** quotable6 left
[02:41] *** linkable6 left
[02:41] *** committable6 left
[02:41] *** tellable6 left
[02:41] *** benchable6 left
[02:41] *** evalable6 left
[02:41] *** coverable6 left
[02:41] *** shareable6 left
[02:41] *** nativecallable6 left
[02:41] *** bloatable6 left
[02:41] *** releasable6 left
[02:41] *** statisfiable6 left
[02:41] *** bisectable6 left
[02:41] *** squashable6 left
[02:41] *** sourceable6 left
[02:41] *** unicodable6 left
[02:42] *** linkable6 joined
[02:42] *** statisfiable6 joined
[02:42] *** greppable6 joined
[02:42] *** sourceable6 joined
[02:42] *** evalable6 joined
[02:42] *** nativecallable6 joined
[02:42] *** unicodable6 joined
[02:43] *** squashable6 joined
[02:43] *** notable6 joined
[02:43] *** shareable6 joined
[02:43] *** bisectable6 joined
[02:43] *** benchable6 joined
[02:44] *** bloatable6 joined
[02:44] *** quotable6 joined
[02:44] *** tellable6 joined
[02:44] *** committable6 joined
[02:44] *** coverable6 joined
[02:45] *** releasable6 joined
[07:20] *** linkable6 left
[07:21] *** linkable6 joined
[07:39] <nwc10> good *, #moarvm

[07:49] *** squashable6 left
[07:50] *** squashable6 joined
[07:57] *** Kaiepi left
[07:59] *** domidumont joined
[08:01] *** squashable6 left
[08:02] *** squashable6 joined
[08:06] *** Kaiepi joined
[08:20] <nwc10> nine: you'll like this. cherry-picking just 298298aaac65e71 (Fix spesh removing not-really-dead code) onto MoarVM master fixes the SEGV, but if one is running with  MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 MVM_SPESH_CHECK_DU=1 it *instead* causes (or exposes) a test failure in t/spec/S09-multidim/assign.t -- not ok 37 - Cannot assign to many items at first dimension (native)

[08:32] <nwc10> and t/spec/S22-package-format/local.t -- Type check failed in binding to parameter '$bytes'; expected Blob but got Supplier::Preserving (Supplier::Preserving...)

[08:44] <nwc10> In the middle of adding a comment to https://github.com/MoarVM/MoarVM/pull/1451

[08:44] <nwc10> the failure exposed in t/spec/S22-package-format/local.t is actually a JIT bug

[08:51] <nwc10> comment done. I'm not (currently) investigating futher

[08:51] <nwc10> oh, for reference, the SEGV that I found that the MoarVM branch fixes was exposed by rakudo commit a7c57a01e82f09d0bb3a8270e91abca0deafa520 -- Make subtest output a header

[08:52] *** linkable6 left
[08:52] <nwc10> there is zero obvious connection between the two

[08:54] *** linkable6 joined
[09:00] <nine> nwc10: this is hilarious. I tried to golf S09-multidim/assign.t and found that the test starts to pass once I remove tests that come _after_ it

[09:01] <nwc10> also, ./rakudo-m -Ilib t/spec/S22-package-format/local.t

[09:01] <nwc10> now reliably passes for me. It had reliably failed.

[09:03] <nine> Oh, assign.t doesn't actually fail reliably

[09:05] <nwc10> hash randomistation hates everyone.

[09:06] <nine> disabling that right now

[09:06] <nine> Ah, it's hash randomisation's fault! Disabling that makes the failure go away ;)

[09:11] <nine> Using a salt of 2 makes it fail reliably

[09:11] <nine> But it still needs those trailing tests which makes me think memory layout

[09:21] *** sena_kun joined
[09:22] <nine> nwc10: ooh...with salt 2 it fails even without my commit

[09:26] <nine> And Spesh of 'process' (cuid: 7125, file: SETTING::src/core.c/native_array.pm6:2132) which is the frame that makes it failing is identical with and without my commit

[09:39] <nwc10> oh. strange. so it was a random failure I saw several times?

[09:44] <nine> Apparently, yes

[09:45] <nine> Turn off hash randomization and set the salt to 2 and it fails

[09:58] *** frost-lab joined
[10:04] <nine> nwc10: oh, this is lovely. The expected exception is "Index 2 for dimension 2 out of range (must be 0..1)" which is thrown by the nqp::atposnd_i implementation.

[10:04] <nine> The line containing that op is "nqp::atposnd_i($!list,$!indices)  # boom!" at https://github.com/rakudo/rakudo/blob/master/src/core.c/native_array.pm6#L2166

[10:04] <nine> So the op is called specifically for the side effect of throwing that exception.

[10:05] <nine> However, the op is marked :pure in MoarVM's oplist. Since we don't actually use the returned value, spesh concludes that it's free to remove the pure op completely. And indeed in the speshed version the op is gone.

[10:05] <nine> So no exception gets thrown and the test correctly fails.

[10:06] <nine> The only thing about this I don't understand is why it depends on hash randomization to occur.

[10:16] <nwc10> does randomisation change *what* gets speshed

[10:17] <nwc10> that was always the thing that I remember jnthn saying - randomisation can change the recorded paths sufficiently that sometimes different optimisations win first

[10:17] <nine> No. And as I said, in both cases I get the exact same result in the spesh log

[10:18] <nwc10> oops. sorry for the confusion. But I also don't see what you wrote that meant "I get the exact same result in the spesh log"

[10:18] <nwc10> what you wrote the first time. (hence my misunderstanding)

[10:20] <nine> This sentence was supposed to express that :) "And Spesh of 'process' (cuid: 7125, file: SETTING::src/core.c/native_array.pm6:2132) which is the frame that makes it failing is identical with and without my commit"

[10:21] <nwc10> oh, I thought you meant "With and without the salt being 2"

[10:22] <nine> Actually....yes :D

[10:22] <nine> but let me check to be sure

[10:27] *** linkable6 left
[10:28] *** linkable6 joined
[10:30] <nine> And of course there are quite a few differences in the spesh result most notably inlining of the .throw call

[10:32] <nine> But neither versions contain the atposnd_i call

[10:34] <nine> Since the exception gets thrown I can only conclude that the speshed version is not actually run, despite getting created

[10:34] <nwc10> but one version passes the test (by throwing and catching the exception)?

[10:34] <nwc10> and the other version fails the test (no exception)?

[10:35] <nwc10> other possibility (and I remember being somewhere near some of this code) is that the same exception can be thrown by a second op

[10:35] <nwc10> is there atpos and then bindpos?

[10:36] <nine> Only this one op can throw this exact exception. And in gdb I clearly see that tc->cur_frame does not have a spesh_cand

[10:36] <nine> And that the exception does get thrown in the atposnd_i op

[10:37] *** linkable6 left
[10:37] *** linkable6 joined
[10:44] <nwc10> I'm not sure what I can add that's useful

[10:46] *** linkable6 left
[10:47] <lizmat> if it is a problem that atposnd_i is called fits exception, I can probably work around that in Raudo

[10:47] *** linkable6 joined
[10:47] <lizmat> *Rakudo

[10:49] <nwc10> I thought that we were keen to figure out what the bug was and hence fix it

[10:50] <nine> The :pure marker is clearly wrong as the op does have a side effect (throwing an exception if appropriate)

[10:51] <nine> As it is spesh must only remove the op if it can prove that the indexes passed to it are safe.

[10:54] <nine> The whole quest to find out why it depends on hash randomization is more for gaining a better understanding of what exactly happens. My hypothesis is that hash randomization affects the order some things are run and thus the availability of spesh candidates when we're looking for inlining possibilities.

[10:55] <lizmat> fwiw, I have a long standing feeling that some setting builds are intrinisically faster / slower than others, even with minimal changes

[11:10] <lizmat> and I wonder whether that has to do with hash randomization

[11:11] *** linkable6 left
[11:13] *** linkable6 joined
[11:24] *** linkable6 left
[11:26] *** linkable6 joined
[11:26] <nwc10> lizmat: yes, likely faster/slower could be chance due to hash randomsiation, affecting spesh

[11:31] *** linkable6 left
[11:33] <nwc10> I can also get t/spec/S22-package-format/local.t to fail on master on a different machine, so it's not the change on your branch

[11:33] *** linkable6 joined
[11:34] *** linkable6 left
[11:35] *** linkable6 joined
[11:36] *** linkable6 left
[11:37] *** linkable6 joined
[11:42] *** linkable6 left
[11:43] *** linkable6 joined
[11:54] *** linkable6 left
[11:57] *** linkable6 joined
[12:06] *** linkable6 left
[12:07] *** linkable6 joined
[12:09] *** Kaiepi left
[12:10] *** Kaiepi joined
[12:45] *** domidumont left
[12:47] *** linkable6 left
[12:49] *** linkable6 joined
[12:55] *** ggoebel left
[13:35] <nine> nwc10: FWIW I'm pretty sure I've seen the "Type check failed in binding to parameter '$bytes'; expected Blob but got Supplier::Preserving" before

[13:36] *** frost-lab left
[13:56] *** squashable6 left
[13:57] *** squashable6 joined
[13:58] <Geth> Â¦ MoarVM/master: 6 commits pushed by (Stefan Seifert)++, niner++

[13:58] <Geth> Â¦ MoarVM/master: f75643768b | Fix getobjsc returning NULL when the object has no SC

[13:58] <Geth> Â¦ MoarVM/master: 572ec70c10 | Prohibit hllbool when the HLL doesn't have special booleans

[13:58] <Geth> Â¦ MoarVM/master: 3623701173 | No longer require an exception as argument of nqp::backtrace

[13:58] <Geth> Â¦ MoarVM/master: 5bba90a0ff | Fixing generated backtraces missing inlined frames

[13:58] <Geth> Â¦ MoarVM/master: 298298aaac | Fix spesh removing not-really-dead code

[13:58] <Geth> Â¦ MoarVM/master: 1538f98da8 | Merge pull request #1451 from MoarVM/various_fixes

[13:58] <Geth> Â¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/a64e1a4326bd...1538f98da8f8

[14:15] *** domidumont joined
[14:19] *** domidumont left
[16:27] <dogbert17> and suddenly all remaining MoarVM bugs were fixed :) nine++

[16:52] *** evalable6 left
[16:52] *** linkable6 left
[16:54] *** evalable6 joined
[16:55] *** linkable6 joined
[17:09] *** domidumont joined
[17:30] <lizmat> so, time for a bump ?

[17:43] *** domidumont left
[18:21] *** zakharyas joined
[18:46] <dogbert17> +1 for bump

[19:19] *** zakharyas left
[19:52] <nine> That's included in the rakudo PR for backtraces

[20:01] *** zakharyas joined
[21:23] *** zakharyas left
[21:30] * leont started a branch on moarvm years ago that now seems lost (not that it really matters, I sincerely doubt it was rebasable at this point)

[21:40] <MasterDuke> there has been the occasional pruning of branches, but i don't remember any particularly recently

[21:41] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1456: Save malloc+free per frame when creating backtrace

[21:41] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1456

[21:49] <leont> MasterDuke: I don't think it was pushed to the official repo, I don't even think I have permissions to do so

[21:50] <leont> It only existed on my hard-drive, on an older computer

[21:52] <leont> I tried adding asynchronous pipe support, which I had needed for a project then and seem to be needing again for something different

[21:58] <MasterDuke> ah

[22:08] <leont> It's a rakudo feature that's 90% a moarvm feature

[23:22] <leont> In this case, it involves a refactor of the socket support because a bunch of stuff is the same (e.g. reading), but another bunch isn't (e.g. connecting)

