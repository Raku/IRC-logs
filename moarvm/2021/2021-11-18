[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:14] *** lizmat_ joined
[00:18] *** lizmat left
[00:34] *** patrickb left
[01:15] *** Colt left
[01:15] *** Colt joined
[01:24] *** frost joined
[02:24] *** linkable6 left
[02:24] *** evalable6 left
[02:27] *** linkable6 joined
[03:27] *** evalable6 joined
[06:02] *** reportable6 left
[08:04] *** reportable6 joined
[08:50] <MasterDuke> any particular reason gc worklists aren't allocated with the fsa?
[08:50] <nine> I guess they just predate the fsa
[08:52] <MasterDuke> ok. i'll have a go a switching them
[08:55] <MasterDuke> i have a wip branch that converts a bunch of MVM_*alloc to alloca or fixed_size_*, converting things that heaptrack says cause a lot of temporary allocations
[09:00] <MasterDuke> by far the largest is set_size_internal, but for that i need to finish up my branch converting VMArray to use a single block for body and storage
[09:30] <MasterDuke> if there's a comment that "technically this free isn't threadsafe", then converting to fixed_size_free and using the _at_safepoint version will in fact make the free threadsafe, correct?
[09:32] *** RakuIRCLogger left
[09:32] *** Geth left
[09:33] *** Geth joined
[09:33] *** lizmat_ left
[09:33] *** lizmat joined
[09:55] <timo> if it's not threadsafe because two threads could free it at the same time, then no, it would still be bad
[09:57] <MasterDuke> ah
[10:10] *** squashable6 left
[10:22] <dogbert17> ===SORRY!=== Error while compiling /home/dogbert/repos/rakudo/t/spec/S06-signature/introspection.rakudo.moar
[10:22] <dogbert17> No such private method 'SET-SELF' on Map
[10:22] <dogbert17> at /home/dogbert/repos/rakudo/t/spec/S06-signature/introspection.rakudo.moar:4
[10:22] <dogbert17> boom
[10:29] <jnthnwrthngtn> o/
[10:30] <dogbert17> good morning 
[10:31] <dogbert17> coffee brewing?
[10:34] <jnthnwrthngtn> Brewed :)
[10:38] <lizmat> I've been thinking about the 2021.11 release and how we're going to probably not able to do that
[10:38] <lizmat> I propose we move the release 2 weeks forward and make it an early 2021.12 release
[10:39] <lizmat> and then skip to 2022.01 release on the 3rd Sat of January
[10:39] <lizmat> so we all get a bit more time during the holiday season
[10:41] <jnthnwrthngtn> *nod*
[10:41] <jnthnwrthngtn> Has anyone volunteered to take on the release manager role yet (or a few, to rotate between, to reduce pressure on any individual)?
[10:42] <lizmat> not yet quite firmly I don't think
[10:46] <JRaspass> I'm always amazed that Ruby launches on xmas day, I guess they get it ready sufficiently before hand
[10:50] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1608: Convert temp allocations into alloca or use FSA
[10:50] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1608
[11:13] *** squashable6 joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:12] <MasterDuke> the vast majority of the remaining temporary allocations are from set_size_internal (which is sort of unavoidable) and MVM_VECTOR_(INIT|GROW)
[12:12] *** discord-raku-bot left
[12:12] <MasterDuke> could those MVM_VECTOR_* macros be converted to use the fsa?
[12:13] *** discord-raku-bot joined
[12:17] *** frost left
[12:49] <jnthnwrthngtn> MasterDuke: Not completely easily, in so far as various things assume they are just malloc'd memory that is then taken over and separately managed
[12:49] <jnthnwrthngtn> (So everything doing that would need updating also)
[12:50] <MasterDuke> hm. haven't even gotten quite that far yet. still trying to deal with the vectors hanging off the instance, where there isn't a tc
[12:51] <dogbert17> dogbert@dogbert-VirtualBox:~/repos/rakudo$ MVM_SPESH_NODELAY=1 ./rakudo-m -Ilib t/spec/S04-blocks-and-statements/let.t
[12:51] <dogbert17> MoarVM panic: Adding pointer 0x55f4a15dd310 to past fromspace to GC worklist
[12:51] <dogbert17> oops
[12:51] <dogbert17> a rather small nursery but still
[12:52] <dogbert17> #define MVM_NURSERY_SIZE (5 * 1024)
[12:53] <dogbert17> will we be able to get to the 'root' of this problem?
[12:57] <dogbert17> might this gist reveal any clues? https://gist.github.com/dogbert17/810f1471907e2c2fa433dde90bb57a19
[13:17] *** evalable6 left
[13:17] *** linkable6 left
[13:19] *** evalable6 joined
[13:20] *** linkable6 joined
[13:38] *** ggoebel joined
[13:43] *** Colt left
[14:07] <ggoebel> Are the Perl 5 integration tests typically run during the release? That's not mentioned in the release guide
[14:08] <lizmat> Perl 5 integration tests are run in every spectest if Inline::Perl5 is installed, afaik
[14:09] <lizmat> so maybe it should mention to install Inline::Perl5 ?
[14:09] <lizmat> afk&
[14:26] <sena_kun> ggoebel, this is part of the `rakudo` task, so yes.
[14:26] <sena_kun> in the rakudo task there are subtasks including rakudo-inline, see https://github.com/rakudo/rakudo/blob/master/tools/releasable/Akefile#L117-L120
[14:28] <MasterDuke> oh, when a vector is assigned somewhere, i can't then just MVM_VECTOR_DESTROY(new_thing), because there won't be new_thing_(num|alloc). ugh
[14:33] <ggoebel> sena_kun: where are currently known flappers documented?
[14:35] <sena_kun> ggoebel, flapper modules or flappers in tests?
[14:43] <ggoebel> flappers in tests
[14:45] <sena_kun> ggoebel, there is a meta-ticket at https://github.com/rakudo/rakudo/issues/4212 and additions are welcome.
[15:10] *** ggoebel left
[15:10] <nine> dogbert17: that GC issue looks like a missing root, somehow involving slurpy nameds (which would explain the rarity)
[15:19] <dogbert17> nine: at least it is relatively easy to repro
[15:22] <nine> indeed
[15:22] <nine> Though not quite trivial to trace back to where things start to go wrong
[15:36] *** patrickb joined
[16:11] <dogbert17> (gdb) p MVM_dump_string(tc,cs->arg_names[i])
[16:11] <dogbert17> default
[16:24] *** psydroid left
[16:24] *** AlexDaniel left
[16:28] <dogbert17> nine: I could be wrong but it seems to be the last part of the test file which is causing problems: https://github.com/Raku/roast/blob/master/S04-blocks-and-statements/let.t#L88
[16:31] <nine> The broken hash key is "default" and the value is Nil. So, yes
[16:32] <dogbert17> any theories as of yet?
[16:33] <MasterDuke> oh. nqp just built with MVM_VECTOR_* using the fsa. however, i do have to have the jit disabled...
[16:34] <nine> dogbert17: not yet
[16:35] *** AlexDaniel joined
[16:39] *** leont left
[16:39] *** SmokeMachine left
[16:39] *** tbrowder left
[16:42] *** leont joined
[16:42] *** SmokeMachine joined
[16:45] *** tbrowder joined
[16:45] *** psydroid joined
[16:59] *** psydroid left
[17:01] *** AlexDaniel left
[17:46] *** lizmat_ joined
[17:47] *** lizmat_ left
[17:47] *** lizmat_ joined
[17:49] *** lizmat left
[17:49] *** lizmat_ left
[17:49] *** lizmat joined
[17:53] *** patrickb left
[18:03] *** reportable6 left
[18:04] *** reportable6 joined
[18:20] *** patrickb joined
[18:29] <dogbert17> nine: could it possibly have anything to do with the merge of New disp nativecall (#1595) ?
[18:42] <nine> dogbert17: don't see how. I've had a mild suspicion about dispatcher-replace-arg-syscall but wasn't able to confirm it either
[18:46] <dogbert17> I rebuilt a few older versions of Moarvm (nothing else) and the problem seems to disappear with https://github.com/MoarVM/MoarVM/commit/10e5344c3fd09589918ab75dac04cdd15a995165
[19:32] <nine> Err.... what the hell happened here? https://github.com/MoarVM/MoarVM/commit/592cc85489d42901dce96032820be49630f85141
[19:33] <nine> Why is this one gigantic commit with a jumbed up commit message?!
[19:33] <ugexe> looks like it was squashed and merged
[19:35] <nine> lizmat: why did you squash my branch? I spent _hours_ cleaning up commits, amending them and ensuring that there is a clear history that can be bisected properly
[19:35] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: 35 commits pushed by (Stefan Seifert)++, (Nicholas Clark)++, (Timo Paulssen)++
[19:35] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: review: https://github.com/MoarVM/MoarVM/compare/08ecf6ffd4bc^...960bb7b31497
[19:36] <lizmat> nine: I squashed because I thought that was what you wanted :-(
[19:36] <nine> Why would I want that? It makes everything worse :(
[19:36] <lizmat> ok, shall I revert the squashed commit and re-apply the PR ?
[19:37] <nine> Yes, please
[19:38] <Geth> ¦ MoarVM: e9ce9ea7f4 | (Elizabeth Mattijsen)++ | 44 files
[19:38] <Geth> ¦ MoarVM: Revert "New disp nativecall (#1595)"
[19:38] <Geth> ¦ MoarVM: 
[19:38] <Geth> ¦ MoarVM: This reverts commit 592cc85489d42901dce96032820be49630f85141.
[19:38] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e9ce9ea7f4
[19:38] *** linkable6 left
[19:39] <lizmat> nine: https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-970269666
[19:39] <lizmat> I waited for about an hour after that :-(
[19:41] <nine> Looking at that PR there are several messages I haven't seen before, because I didn't get them via email. Including jnthn's approval
[19:43] <Geth> ¦ MoarVM: lizmat++ created pull request #1609: New disp nativecall libffi
[19:43] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1609
[19:44] <lizmat> nine: well, there's a new PR now  
[19:45] <lizmat> if you are ok with merging that now, please let me know, or do the merge yourself
[19:45] <lizmat> and sorry, sorry for the misunderstanding  :-(
[19:45] <nine> I think this branch now needs to be rebase, otherwise it won't have an effect
[19:45] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: 35 commits pushed by (Stefan Seifert)++, (Nicholas Clark)++, (Timo Paulssen)++
[19:45] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: review: https://github.com/MoarVM/MoarVM/compare/960bb7b31497...e3614b05ca5e
[19:46] <lizmat> rebased
[19:46] * nine is glad the rebase just went through without conflicts then
[19:46] <lizmat> Using index info to reconstruct a base tree...
[19:46] <lizmat> M	src/spesh/manipulate.c
[19:46] <lizmat> Falling back to patching base and 3-way merge...
[19:46] <lizmat> Auto-merging src/spesh/manipulate.c
[19:46] <lizmat> was the only problematic one
[19:47] <nine> Ah, yes, because master got a fix there after the merge
[19:47] <Geth> ¦ MoarVM/master: 35 commits pushed by (Stefan Seifert)++, (Nicholas Clark)++, (Timo Paulssen)++
[19:47] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/e9ce9ea7f4c4...e3614b05ca5e
[19:48] <nine> git log
[19:48] <nine> dogbert17: can you please re-do your test and just skip commit 592cc85489d42901dce96032820be49630f85141? Maybe that will give us some more information
[19:48] <nine> lizmat: thanks!
[19:49] <nine> lizmat: thanks!
[19:49] <lizmat> I will bump MoarVM again, I guess
[20:09] <lizmat> all bumped
[20:19] <nine> dogbert17: got it!
[20:19] <nine> It is, indeed MVM_capture_replace_arg
[20:20] <dogbert17> nine++
[20:20] <timo> uh oh
[20:26] <Geth> ¦ MoarVM: 81082e1c36 | (Stefan Seifert)++ | src/6model/reprs/MVMCapture.c
[20:26] <Geth> ¦ MoarVM: Fix possible access to fromspace after MVM_capture_replace_arg
[20:26] <Geth> ¦ MoarVM: 
[20:26] <Geth> ¦ MoarVM: A callsite can contain pointers to the names of named arguments. These pointers
[20:26] <Geth> ¦ MoarVM: can get outdated if a newly allocated and populated callsite is neither
[20:26] <Geth> ¦ MoarVM: interned, nor part of any other GC rooted data structure.
[20:26] <Geth> ¦ MoarVM: 
[20:26] <Geth> ¦ MoarVM: MVM_capture_replace_arg first created a new callsite, then allocated a capture.
[20:26] <Geth> ¦ MoarVM: This could lead to outdated pointers to argument names. Fix by reversing the
[20:27] <Geth> ¦ MoarVM: order. The callsite is needed only later anyway.
[20:27] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/81082e1c36
[20:27] <nine> Luckily this is one of those hard to find but trivial to fix ones. Just had to move a few lines of code around.
[20:27] <lizmat> so this would fix NativeCall's issues ?
[20:28] <nine> No, nothing to do with NativeCall
[20:28] <nine> fixes this one: https://gist.github.com/dogbert17/810f1471907e2c2fa433dde90bb57a19
[20:29] <lizmat> ah, ok  :-)
[20:30] <timo> oh my
[20:31] <timo> capture_replace_arg can be used i pretty much any dispatch program
[20:31] <dogbert17> perhaps this fixes other bugs as well
[20:35] <[Coke]> nine++
[20:35] <dogbert17> the complex.t bug was not fixed by this, ah well it was worth a shot
[20:37] <MasterDuke> ah ha! built rakudo with the MVM_VCECTOR_* macros using the fsa (still with the jit disabled though)
[20:41] <MasterDuke> almost 1M reduction in temporary allocations when compiling CORE.c.setting (but now 1.2gb leaked, so obviously something isn't quite right)
[20:44] <nine> Ha! That TCP::LowLevel bug is not a bug in NativeCall at all. It's actually a fix in NativeCall.
[20:44] <nine> https://github.com/jmaslak/Raku-TCP-LowLevel/pull/1/commits/5d7a6955e88e4b01a4e24f339935c698b56dd474
[20:45] <nine> So as far as NativeCall is concerned, there's only the DB::SQLite JIT issue left
[20:46] <[Coke]> Nice.
[20:49] <timo> if fileame contais SQLite, bail the jit
[20:56] <nine> Well, worst case we can indeed disable JIT of native calls for the release. Would hurt a lot, but we'd still be way faster than the previous release.
[20:57] <lizmat> nine: don't know if you saw my ruminations about the release earlier today?
[20:57] <lizmat> https://logs.liz.nl/moarvm/2021-11-18.html#10:38
[20:57] <japhb> timo: I'd call that the "video driver method of solving application conflicts"
[20:58] <nine> lizmat: ah, yes, I do like that idea
[20:58] <japhb> FWIW, "push the release" seems like a good idea to me
[20:59] <[Coke]> +1 from me to space things to a) get better product b) avoid burnouot
[21:00] <nine> On that thought, I think I'll retire for the day and attack that JIT issue with a fresh mind tomorrow
[21:00] <lizmat> nine++
[22:41] *** linkable6 joined
[23:40] <[Coke]> we don't have anyone with an M1 yet, correct? (looking at the mac mini 2000 with an M1 right now)
[23:43] <lizmat> I do think we have people with an M1, just not with MacOS Monterey?
[23:52] <patrickb>  I have an M1 sitting around. Willing to give people access.
