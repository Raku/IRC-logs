[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:53] *** dogbert11 left
[01:10] *** dogbert11 joined
[02:10] *** evalable6 left
[02:10] *** statisfiable6 left
[02:10] *** unicodable6 left
[02:10] *** nativecallable6 left
[02:10] *** shareable6 left
[02:10] *** squashable6 left
[02:10] *** reportable6 left
[02:10] *** greppable6 left
[02:10] *** sourceable6 left
[02:10] *** benchable6 left
[02:10] *** bisectable6 left
[02:10] *** quotable6 left
[02:10] *** releasable6 left
[02:10] *** bloatable6 left
[02:10] *** tellable6 left
[02:10] *** notable6 left
[02:10] *** linkable6 left
[02:10] *** coverable6 left
[02:10] *** committable6 left
[02:11] *** unicodable6 joined
[02:11] *** coverable6 joined
[02:11] *** releasable6 joined
[02:11] *** squashable6 joined
[02:11] *** bisectable6 joined
[02:11] *** benchable6 joined
[02:12] *** bloatable6 joined
[02:12] *** statisfiable6 joined
[02:13] *** evalable6 joined
[03:11] *** committable6 joined
[03:11] *** tellable6 joined
[03:12] *** sourceable6 joined
[03:12] *** reportable6 joined
[03:12] *** quotable6 joined
[03:13] *** greppable6 joined
[03:13] *** linkable6 joined
[04:11] *** nativecallable6 joined
[05:11] *** evalable6 left
[05:11] *** coverable6 left
[05:11] *** committable6 left
[05:11] *** squashable6 left
[05:11] *** bloatable6 left
[05:11] *** quotable6 left
[05:11] *** sourceable6 left
[05:11] *** benchable6 left
[05:11] *** bisectable6 left
[05:11] *** releasable6 left
[05:11] *** greppable6 left
[05:11] *** linkable6 left
[05:11] *** unicodable6 left
[05:11] *** tellable6 left
[05:11] *** nativecallable6 left
[05:11] *** statisfiable6 left
[05:11] *** reportable6 left
[05:11] *** committable6 joined
[05:12] *** tellable6 joined
[05:13] *** unicodable6 joined
[05:13] *** quotable6 joined
[05:13] *** greppable6 joined
[05:14] *** statisfiable6 joined
[05:14] *** releasable6 joined
[05:14] *** sourceable6 joined
[05:14] *** bisectable6 joined
[05:14] *** evalable6 joined
[05:14] *** squashable6 joined
[06:12] *** nativecallable6 joined
[06:13] *** benchable6 joined
[06:13] *** linkable6 joined
[06:14] *** notable6 joined
[07:11] *** shareable6 joined
[07:12] *** bloatable6 joined
[07:17] <Nicholas> good *able6, #moarvm 
[08:09] *** frost joined
[09:16] <lizmat> good moarning  :-)
[09:20] *** dogbert11 left
[09:29] *** dogbert11 joined
[10:21] <jnthnwrthngtn> moarning o/
[10:23] <Nicholas> \o
[10:23] <Nicholas> are you feeling better today?
[10:26] <jnthnwrthngtn> Throat certainly feels less swollen.
[10:26] <jnthnwrthngtn> And nose a bit less stuffy.
[10:27] <jnthnwrthngtn> Brain feels like it's in backwards though.
[10:37] <lizmat> consider using <== instead of ==>  ?
[10:38] <jnthnwrthngtn> :D
[10:38] <jnthnwrthngtn> fwiw, suspect I'll be quite busy with current $dayjob thing for this/next week, but will have moar Raku time after that :)
[10:39] *** evalable6 left
[10:39] *** linkable6 left
[10:40] <nine> jnthnwrthngtn: will you be able to review?
[10:40] *** evalable6 joined
[10:41] <jnthnwrthngtn> nine: Yes
[10:42] <jnthnwrthngtn> And answer questions, as I have been. Just not writing much code. :)
[10:42] <jnthnwrthngtn> At least that means I'm introducing less bugs!
[10:42] <nine> fewer even :D
[10:43] <Nicholas> I was going to say that too
[10:43] <Nicholas> but then I felt it rather optimisitc
[10:43] <Nicholas> countable bugs would imply finite bugs. It might be possible to find them all.
[10:59] <nine> Well, no. Countable does not imply finite. "A countable set is either a finite set or a countably infinite set." according to Wikipedia. You are however absolutely right about the impossibility to find (and thus fix) all bugs, since every bugfix has a non-zero chance for introducing new bugs. So while lim(#bugs) -> 0, the number should actually never reach 0.
[11:00] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: 9d794f8cad | (Stefan Seifert)++ | 2 files
[11:00] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: Fix unwind missing a frame after special return
[11:00] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: 
[11:00] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: When we tried to add a special return handler onto the call stack and we had to
[11:00] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: allocate a new callstack region for this call stack record, the unwind
[11:00] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: following the execution of the special return handler missed a frame. This was
[11:00] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: because when we called MVM_callstack_unwind, on top of the callstack there was
[11:00] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: a region record instead of a frame. MVM_callstack_unwind however assumes that
[11:01] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: a region record instead of a frame. MVM_callstack_unwind however assumes that
[11:01] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: there is a frame on top and so didn't actually unwind the frame.
[11:01] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: 
[11:01] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: Fix by cleaning up the callstack before running a special return or unwind
[11:01] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: handler.
[11:01] <Geth> Â¦ MoarVM/fix_unwind_missing_frame: review: https://github.com/MoarVM/MoarVM/commit/9d794f8cad
[11:03] <nine> jnthnwrthngtn: while testing this ^ fix, I set MVM_CALLSTACK_DEFAULT_REGION_SIZE to 1024 to trigger the conditions more often. Since there's handling for allocations exceeding this default size, setting it so low should be safe, shouldn't it? Because some tests start to fail when I do
[11:05] *** reportable6 joined
[11:12] <jnthnwrthngtn> nine: I'd think so, and those failures are worth a look too.
[11:12] <nine> on it
[11:13] *** coverable6 joined
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:28] *** frost left
[12:40] *** linkable6 joined
[14:30] <nine> Reduced region size may trigger it but what I then see looks more like a classic spesh issue (uninitialized register after deopt). The register in question should be written to by a PHI node and carries the appropriate deopt usage markers. The other side of the PHI (just one version) doesn't. So PEA optimized away the writer.
[14:30] <nine> The PHI node is a converted return_o of an inlinee
[15:22] *** evalable6 left
[15:22] *** linkable6 left
[15:23] *** evalable6 joined
[15:25] *** patrickb joined
[15:49] *** patrickb left
[17:08] <nine> I could fix this particular segfault by copying the deopt_users from the PHI's target to the source in rewrite_returns. Don't know if that's a sensible fix though.
[17:10] <nine> The other spec test failures with reduced region default size are all around signature unpacking. Unfortunately they are high level errors, so not as easy to debug.
[17:10] <nine> See errors like "Too many positionals passed to 'foo'; expected 2 arguments but got 3 in sub-signature", "Type check failed in binding to parameter '$value'; expected Int but got Str ("x")", "Unexpected named argument 'her' passed in sub-signature of parameter c"
[17:23] *** squashable6 left
[17:24] *** linkable6 joined
[17:25] *** squashable6 joined
[17:59] <lizmat> nine: that feels like a bitmap got overridden somehow
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:09] *** patrickb joined
[18:10] <patrickb> nine: Unsure if it's relevant, but "Too many positionals passed to 'foo'; expected 2 arguments but got 3 in sub-signature" reminded me of https://github.com/croservices/cro-http/issues/128
[18:25] *** patrickb left
[19:54] *** lizmat_ joined
[19:54] *** TempIRCLogger left
[19:55] *** TempIRCLogger joined
[19:55] *** RakuIRCLogger left
[19:55] *** Geth joined
[19:57] *** lizmat left
[21:24] *** lizmat_ left
[21:24] *** lizmat joined
[22:21] *** squashable6 left
[22:21] *** squashable6 joined
[23:34] *** squashable6 left
[23:36] *** squashable6 joined
