[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:32] * [Coke] drinks a cherry coke zero

[02:03] *** Kaiepi left
[02:03] *** Kaiepi joined
[03:29] *** shareable6 left
[03:29] *** bisectable6 left
[03:29] *** statisfiable6 left
[03:29] *** linkable6 left
[03:29] *** reportable6 left
[03:29] *** quotable6 left
[03:29] *** greppable6 left
[03:29] *** notable6 left
[03:29] *** squashable6 left
[03:29] *** evalable6 left
[03:29] *** releasable6 left
[03:29] *** unicodable6 left
[03:29] *** committable6 left
[03:29] *** bloatable6 left
[03:29] *** nativecallable6 left
[03:29] *** benchable6 left
[03:29] *** sourceable6 left
[03:29] *** coverable6 left
[03:29] *** tellable6 left
[03:29] *** greppable6 joined
[03:30] *** benchable6 joined
[03:30] *** tellable6 joined
[03:30] *** committable6 joined
[03:30] *** squashable6 joined
[03:30] *** reportable6 joined
[03:30] *** bloatable6 joined
[03:31] *** sourceable6 joined
[03:31] *** linkable6 joined
[03:31] *** notable6 joined
[03:32] *** nativecallable6 joined
[03:32] *** statisfiable6 joined
[03:32] *** bisectable6 joined
[03:32] *** evalable6 joined
[03:32] *** quotable6 joined
[03:32] *** unicodable6 joined
[03:32] *** coverable6 joined
[03:32] *** releasable6 joined
[03:32] *** shareable6 joined
[04:32] *** reportable6 left
[04:32] *** bloatable6 left
[04:32] *** nativecallable6 left
[04:32] *** notable6 left
[04:32] *** benchable6 left
[04:32] *** coverable6 left
[04:32] *** bisectable6 left
[04:32] *** releasable6 left
[04:32] *** evalable6 left
[04:32] *** greppable6 left
[04:32] *** statisfiable6 left
[04:32] *** sourceable6 left
[04:32] *** shareable6 left
[04:32] *** linkable6 left
[04:32] *** committable6 left
[04:32] *** quotable6 left
[04:32] *** squashable6 left
[04:32] *** unicodable6 left
[04:32] *** tellable6 left
[04:33] *** evalable6 joined
[04:33] *** quotable6 joined
[04:33] *** squashable6 joined
[04:33] *** bloatable6 joined
[04:33] *** coverable6 joined
[04:33] *** shareable6 joined
[04:33] *** benchable6 joined
[04:34] *** greppable6 joined
[04:34] *** statisfiable6 joined
[04:34] *** releasable6 joined
[04:34] *** unicodable6 joined
[04:34] *** linkable6 joined
[04:34] *** reportable6 joined
[04:34] *** sourceable6 joined
[04:35] *** notable6 joined
[04:35] *** tellable6 joined
[04:35] *** committable6 joined
[05:35] *** quotable6 left
[05:35] *** bloatable6 left
[05:35] *** shareable6 left
[05:35] *** evalable6 left
[05:35] *** statisfiable6 left
[05:35] *** sourceable6 left
[05:35] *** linkable6 left
[05:35] *** releasable6 left
[05:35] *** reportable6 left
[05:35] *** notable6 left
[05:35] *** greppable6 left
[05:35] *** squashable6 left
[05:35] *** committable6 left
[05:35] *** unicodable6 left
[05:35] *** tellable6 left
[05:35] *** coverable6 left
[05:35] *** benchable6 left
[05:36] *** nativecallable6 joined
[05:36] *** releasable6 joined
[05:36] *** benchable6 joined
[05:36] *** evalable6 joined
[05:37] *** bloatable6 joined
[05:37] *** squashable6 joined
[05:37] *** greppable6 joined
[05:37] *** coverable6 joined
[05:37] *** unicodable6 joined
[05:38] *** linkable6 joined
[05:38] *** reportable6 joined
[05:38] *** quotable6 joined
[05:38] *** statisfiable6 joined
[05:38] *** sourceable6 joined
[05:38] *** shareable6 joined
[05:38] *** committable6 joined
[05:39] *** notable6 joined
[05:39] *** tellable6 joined
[06:03] *** reportable6 left
[06:04] *** reportable6 joined
[06:51] *** frost joined
[07:08] *** dogbert17 joined
[07:11] *** dogbert12 left
[07:44] <Nicholas> jnthnwrthngtn: woohoo! That's an excellent reason for bonus dry days

[08:08] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: 0d63ddadf3 | (Stefan Seifert)++ | src/6model/serialization.c

[08:08] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: Set sc.idx during deserialization to avoid costly lookup later

[08:08] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: 

[08:08] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: When we deserialize a collectable, we actually already know which SC it

[08:08] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: belongs to and the index in this SC. So far we've already told the the

[08:08] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: collectable about the SC, but not about the index. So the first call to

[08:08] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: MVM_sc_find_object_idx had to do a linear search of the SC to find the index.

[08:08] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: Fix by setting the idx field in the collectable header on deserialization.

[08:08] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: 

[08:08] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: This brings installation of rakudo core modules down from 7.89s to 7.21s

[08:08] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: and reduces CPU time of rakudo make test from 138.98s to 134.27s.

[08:09] <Geth> ¬¶ MoarVM/set_sc_idx_during_deserialization: review: https://github.com/MoarVM/MoarVM/commit/0d63ddadf3

[08:09] <nine> MasterDuke: looking at     git push --set-upstream origin set_sc_idx_during_deserialization

[08:09] <nine> MasterDuke: looking at MVM_sc_find_object_idx _was_ productive after all :)

[08:17] *** squashable6 left
[08:17] *** bisectable6 joined
[08:18] *** squashable6 joined
[08:59] *** patrickb joined
[11:50] *** Kaiepi left
[11:51] *** frost left
[12:02] *** Kaiepi joined
[12:02] *** reportable6 left
[12:48] <jnthnwrthngtn> nine++, that's a nice spot

[13:13] *** reportable6 joined
[14:07] <MasterDuke> nice. i'll see what perf says with that and the rakudo branch also

[14:18] <MasterDuke> with the moarvm branch, MVM_sc_find_object_idx is almost zero in perf

[14:18] <Nicholas> So, for: dumbbench -i 100 -- ~/Sandpit/moar-O/bin/rakudo-m -e ""

[14:18] <Nicholas> master is 1.8948e-01 +/- 1.1e-04 (0.1%)

[14:18] <Nicholas> that branch is 1.85249e-01 +/- 8.6e-05 (0.0%)

[14:18] <Nicholas> m: say 1.85249e-01/ 1.8948e-01

[14:18] <camelia> rakudo-moar 0de28ae72: OUTPUT: ¬´0.9776704665400041‚ê§¬ª

[14:18] <Nicholas> 2% starup win

[14:20] <MasterDuke> it's about 1.1s faster for `raku -I . 2Ry.rakumod` (where 2Ry.rakumod is the original script, but with only 100 of the subs)

[14:20] <MasterDuke> 7.3s before, 6.2s after

[14:21] <Nicholas> nine++ # optimising hello world

[14:25] <jnthnwrthngtn> Happily the rakuast startup time advantage has stuck around even with filling out the grammar, actions, AST nodes, etc. quite a bit more.

[14:25] <MasterDuke> on moarvm master, but rakudo speed_up_native_call_setup, MVM_sc_find_object_idx is still at the top of the perf report at 11%, but total time decreased to 4.6s

[14:26] <jnthnwrthngtn> Of course, getting compilation itself competitive is another matter.

[14:27] <MasterDuke> and on moarvm set_sc_idx_during_deserialization + rakudo set_sc_idx_during_deserialization, total time drops to 4.0s (and MVM_sc_find_object_idx is out of the picture again)

[14:28] <MasterDuke> so master/master is 7.3s, set_sc_idx_during_deserialization/speed_up_native_call_setup is 4.0s. nine++

[15:15] <nine> MasterDuke: I'm at my parents' for the weekend. Care to have a look at what dakudo's profiler says about where we're spending tkme now? I don't really have an idea

[17:33] *** linkable6 left
[17:36] *** linkable6 joined
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[19:05] *** patrickb left
[19:28] *** patrickb joined
[19:56] <MasterDuke> nine: https://imgur.com/a/JBHH08n some screenshots of a --profile-compile output. the vast majority of the BOOT(Int|Str)s are from sift_down

[20:02] <[Coke]> sift_down is the heap sort when sorting hash keys, aye?

[20:03] <MasterDuke> https://github.com/Raku/nqp/blob/master/src/core/Hash.nqp#L16-L38

[20:03] <MasterDuke> yep

[20:06] <MasterDuke> https://gist.github.com/MasterDuke17/4c010b1c6f6ac73c2276da526922f98a added a print in sorted_keys

[20:08] <MasterDuke> adding an early exit when nqp::elems(@keys) < 2 seems to be a minor help

[20:08] <[Coke]> wonder if all those sorts are on the same slowly growing hash

[20:10] <[Coke]> also wonder if there are any cases where we sorted but didn't need to.

[20:11] <MasterDuke> i doubt it. iirc, we didn't used to sort (most? all?) things and nine only added them in where needed to get reproducible builds

[20:11] <[Coke]> commented out #nqp::splice(@existing, $_.value, 0, 0); in src/NQP/Optimizer.nqp

[20:11] <[Coke]> fair

[20:11] <MasterDuke> but those growing numbers are interesting

[20:14] <MasterDuke> looks like that commented out splice was in the original commit, https://github.com/Raku/nqp/commit/d062aa3ca9d8222066752dd4aad043ef0aa27ea3 would have to ask jnthnwrthngtn

[20:19] <[Coke]> Seems reasonable to remove it.

[20:19] <[Coke]> afk

[20:44] *** patrickb left
[20:54] <nine> Or the other way round? If that loop still ezists, it could be replaced with the splice

[20:56] <MasterDuke> it does, that code has been pretty much untouched since its introduction

[21:19] <MasterDuke> spectest passes with the slice instead of the loop+push

