[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:22] *** linkable6 joined
[01:29] *** frost joined
[05:16] *** sourceable6 left
[05:16] *** benchable6 left
[05:16] *** coverable6 left
[05:16] *** releasable6 left
[05:16] *** bisectable6 left
[05:16] *** squashable6 left
[05:16] *** linkable6 left
[05:16] *** bloatable6 left
[05:16] *** reportable6 left
[05:16] *** nativecallable6 left
[05:16] *** notable6 left
[05:16] *** shareable6 left
[05:16] *** greppable6 left
[05:16] *** evalable6 left
[05:16] *** tellable6 left
[05:16] *** quotable6 left
[05:16] *** unicodable6 left
[05:16] *** committable6 left
[05:16] *** statisfiable6 left
[05:17] *** sourceable6 joined
[05:18] *** tellable6 joined
[05:19] *** notable6 joined
[05:19] *** coverable6 joined
[05:19] *** reportable6 joined
[05:19] *** committable6 joined
[05:19] *** unicodable6 joined
[05:19] *** squashable6 joined
[05:19] *** bisectable6 joined
[05:19] *** benchable6 joined
[05:20] *** bloatable6 joined
[05:20] *** shareable6 joined
[05:20] *** quotable6 joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:17] *** linkable6 joined
[06:19] *** releasable6 joined
[07:11] *** frost left
[07:17] *** nativecallable6 joined
[07:17] *** evalable6 joined
[07:18] *** statisfiable6 joined
[07:19] *** greppable6 joined
[07:21] *** patrickb joined
[07:28] *** frost joined
[08:50] *** evalable6 left
[08:50] *** linkable6 left
[09:11] * lizmat misses the moarning banter

[09:32] <dogbert17> yes, it's very silent today, perhaps people are fighting their coffee machines

[09:39] <dogbert17> both Nine and Nicholas are missing and they both tend to show up quite early in the moarning

[09:44] <lizmat> I think jnthnwrthngtn is working on their presentations for the TRC

[09:44] * lizmat has done that part  :-)

[09:45] <dogbert17> sounds like you're well prepared then

[09:46] <jnthnwrthngtn> moarning o/

[09:46] <jnthnwrthngtn> lizmat: You're waaay ahead of me, then :)

[09:46] <lizmat> yeah, that rarely happens  :-)

[09:47] <jnthnwrthngtn> I'm...not only doing TRC prep this week, but also trying to finish up a $dayjob task that I put off for the last couple of weeks because I was having too much fun with new-disp. Oh, plus dental work, and as if that wasn't already enough, I have to go to the interior ministry now this week too.

[09:49] * nine cancels his anticipation of new-disp goodies for this week

[09:50] * lizmat is writing Javascript for the first time in a *looong* time

[09:51] *** patrickb left
[09:52] *** patrickb joined
[09:52] *** linkable6 joined
[09:53] *** evalable6 joined
[09:55] <jnthnwrthngtn> lizmat: Enjoying the improvements?

[09:56] <lizmat> well...  I'm glad I don't need to cater for different browsers anymore

[09:56] <Altai-man> lizmat, what are you writing?

[09:56] <jnthnwrthngtn> I was more thinking the langauge improvements, but yes, this is also welcome :)

[09:57] <dogbert17> is the a way to get hold of all output from a 'make test' run, not just the condensed version we usuually get?

[09:57] <lizmat> working on the logs server :-)

[09:58] <nine> dogbert17: yes, there is

[09:58] <dogbert17> nine: please elaborate :)

[09:58] <nine> dogbert17: https://build.opensuse.org/package/view_file/home:niner9:rakudo-git/rakudo/rakudo-test-log.diff?expand=1

[09:59] <nine> Of course, simply having TAP::Harness::Archive installed would suffice. I just wanted to avoid the build dependency for the RPM package.

[10:02] <dogbert17> the reason I'm asking is that I get some random test failures when running 'MVM_SPESH_NODELAY=1 make test TEST_JOBS=<more jobs than you have CPU's>

[10:02] <dogbert17> but I can't see what's happening due to the lack of detail

[10:04] *** patrickb left
[10:04] *** patrickb joined
[10:06] *** patrickb left
[10:06] *** patrickb joined
[10:08] *** patrickb left
[10:08] *** patrickb joined
[10:10] *** patrickb left
[10:10] *** patrickb joined
[10:12] *** patrickb left
[10:12] *** patrickb joined
[10:14] *** patrickb left
[10:14] *** patrickb joined
[10:16] *** patrickb left
[10:16] *** patrickb joined
[10:18] *** patrickb left
[10:18] *** patrickb joined
[10:20] *** patrickb left
[10:20] *** patrickb joined
[10:22] *** patrickb left
[10:22] *** patrickb joined
[10:24] *** patrickb left
[10:24] *** patrickb joined
[10:26] *** patrickb left
[10:26] *** patrickb joined
[10:28] *** patrickb left
[10:28] *** patrickb joined
[10:30] *** patrickb left
[10:30] *** patrickb joined
[10:32] *** patrickb left
[10:32] *** patrickb joined
[10:33] <dogbert17> nine: it worked and now I can, for example, see the following:

[10:33] <dogbert17> dogbert@dogbert-VirtualBox:/tmp$ cat t/05-messages/02-errors.t 

[10:33] <dogbert17> ===SORRY!===

[10:33] <dogbert17> Cannot find method 'push_code_object' on object of type Perl6::World

[10:35] <dogbert17> I ran 'MVM_SPESH_NODELAY=1 make test TEST_JOBS=10' my vm only has 8 cores allocated

[10:38] *** patrickb left
[10:38] *** patrickb joined
[10:40] *** patrickb left
[10:40] *** patrickb joined
[10:42] *** patrickb left
[10:42] *** patrickb joined
[10:46] *** patrickb left
[10:46] *** patrickb joined
[10:48] <nine> What a weird error

[10:49] *** Kaipi is now known as Kaiepi

[10:50] *** Kaiepi left
[10:50] *** Kaiepi joined
[10:51] <nine> Apparently I can reproduce it sometimes when running TEST_JOBS=40 make spectest in another shell

[10:55] *** patrickb left
[10:55] *** patrickb joined
[10:57] *** patrickb left
[10:57] *** sena_kun joined
[10:57] *** patrickb joined
[10:59] *** patrickb left
[10:59] *** patrickb joined
[11:00] *** patrickb left
[11:01] *** patrickb joined
[11:02] *** patrickb left
[11:03] *** patrickb joined
[11:04] *** patrickb left
[11:05] *** patrickb joined
[11:06] *** patrickb left
[11:07] *** patrickb joined
[11:09] *** patrickb left
[11:09] *** patrickb joined
[11:11] *** patrickb left
[11:11] *** patrickb joined
[11:13] *** patrickb left
[11:13] *** patrickb joined
[11:15] *** patrickb left
[11:15] *** patrickb joined
[11:17] <dogbert17> yes, it's very strange

[11:19] *** patrickb left
[11:19] *** patrickb joined
[11:23] *** patrickb left
[11:24] *** patrickb joined
[11:25] *** patrickb left
[11:26] *** patrickb joined
[11:29] *** patrickb left
[11:30] *** patrickb joined
[11:31] *** patrickb left
[11:31] *** patrickb joined
[11:33] *** patrickb left
[11:33] *** patrickb joined
[11:35] *** patrickb left
[11:35] *** patrickb joined
[11:37] *** patrickb left
[11:37] *** patrickb joined
[11:39] *** patrickb left
[11:39] *** patrickb joined
[11:41] *** patrickb left
[11:41] *** patrickb joined
[11:43] *** patrickb left
[11:43] *** patrickb joined
[11:45] *** patrickb left
[11:45] *** patrickb joined
[11:49] *** patrickb left
[11:49] *** patrickb joined
[11:51] *** patrickb left
[11:51] *** patrickb joined
[11:53] *** patrickb left
[11:53] *** patrickb joined
[11:55] *** patrickb left
[11:55] *** patrickb joined
[11:57] *** patrickb left
[11:57] *** patrickb joined
[11:59] *** patrickb left
[11:59] *** patrickb joined
[12:01] *** patrickb left
[12:01] *** patrickb joined
[12:03] *** reportable6 left
[12:04] *** reportable6 joined
[12:07] *** patrickb left
[12:07] *** patrickb joined
[12:09] *** patrickb left
[12:09] *** patrickb joined
[12:11] *** patrickb left
[12:11] *** patrickb joined
[12:13] *** patrickb left
[12:14] *** patrickb joined
[12:17] *** patrickb left
[12:18] *** patrickb joined
[12:19] *** patrickb left
[12:20] *** patrickb joined
[12:21] *** patrickb left
[12:22] *** patrickb joined
[12:23] *** patrickb left
[12:24] *** patrickb joined
[12:25] *** patrickb left
[12:26] *** patrickb joined
[12:27] *** patrickb left
[12:28] *** patrickb joined
[12:29] *** patrickb left
[12:30] *** patrickb joined
[12:36] *** patrickb left
[12:36] *** patrickb joined
[12:38] *** patrickb left
[12:38] *** patrickb joined
[12:40] *** patrickb left
[12:40] *** patrickb joined
[12:46] *** patrickb left
[13:13] <lizmat> m: say "hi"   # just checking

[13:13] <camelia> rakudo-moar ffde2ba23: OUTPUT: «hi␤»

[13:15] <dogbert17> Nine: I managed to get --ll-exception output for the weird error. Dunno if it helps though.

[13:15] <dogbert17> Cannot find method 'push_code_object' on object of type Perl6::World

[13:16] <dogbert17>    at gen/moar/World.nqp:2536  (/home/dogbert/repos/rakudo/blib/Perl6/World.moarvm:stub_code_object)

[13:16] <dogbert17>  from gen/moar/World.nqp:2527  (/home/dogbert/repos/rakudo/blib/Perl6/World.moarvm:create_code_object)

[13:16] <dogbert17>  from gen/moar/World.nqp:2518  (/home/dogbert/repos/rakudo/blib/Perl6/World.moarvm:create_code_obj_and_add_child)

[13:16] <dogbert17>  from gen/moar/World.nqp:2503  (/home/dogbert/repos/rakudo/blib/Perl6/World.moarvm:create_thunk)

[13:16] <dogbert17>  from gen/moar/Actions.nqp:5933  (/home/dogbert/repos/rakudo/blib/Perl6/Actions.moarvm:trait_mod:sym<is>)

[13:18] * sena_kun just saw this error with `❌ TST: ===SORRY!=== Error while compiling /mnt/data/pakku/.cache/NCurses/NCurses-0.6.3-githubazawawi-/t/02-basic.t`

[13:29] <nine> dogbert17: Perl6::World is indeed wrong there. That method is found on Perl6CompilationContext (a lexically defined class inside Perl6::World)

[13:41] <dogbert17> on my system it's enough to run 'while MVM_SPESH_NODELAY=1  ./rakudo-m -c --ll-exception -Ilib t/04-nativecall/02-simple-args.t; do :; done' for a while

[13:44] <nine> I wonder if there's a way to golf this.

[13:45] <dogbert17> FWIW, if I run with --stagestats it says 'Stage start' but crashes before writing 'Stage parse'

[13:49] <jnthnwrthngtn> Is it sensitive to inlining, for example?

[13:56] <nine> jnthnwrthngtn: looks like

[14:07] <nine> 15 minutes with loops in 18 konsole tabs have not produced a single error with inlining disabled

[14:07] <nine> at the same time the one loop with inlining enabled threw multiple

[14:07] <Nicholas> rr!

[14:08] <jnthnwrthngtn> .oO( What's a pirate's favorite debugger? )

[14:08] <Nicholas> (I found something in Perl 5 by having a shell loop that repeated until there was a failure)

[14:08] <dogbert17> where's timo, he usually like to tout the virtues of rr

[14:09] <Nicholas> good *, timo :-)

[14:12] <timo> :)

[14:13] <nine> Good news: turning on the spesh log seems to fix this issue!

[14:21] <timo> so, could be timing related?

[14:23] <nine> That's my guess. Odd though that MVM_SPESH_BLOCKING=1 doesn't make it reliable either

[14:24] <nine> Which...usually indicates that it's not timing, but memory contents

[14:31] *** frost left
[14:33] <timo> right. oof.

[14:33] <timo> well, we do malloc some in the spesh log process

[14:33] <timo> like when we turn mvm strings into c strings

[14:34] <timo> wanna try removing those from the spesh logging code to see if that does anything?

[14:38] <nine> Well, the first hard step seems to be reproducing it in a debug build

[14:39] <nine> ah, finally :) At least that

[15:10] <nine> At least it breaks with MVM_SPESH_INLINE_LOG=1. However, the case where it failed and 2 cases where it succeeded log exactly the same information about both push_code_object (the callee) and stub_code_object (the failing caller). And push_code_object actually gets inlined into stub_code_object

[15:10] <Nicholas> rr!

[15:11] <nine> 372 successfull runs in rr and counting...

[15:11] <timo> did you try the chaos mode that rr has?

[15:11] <nine> just turned that on

[15:11] <timo> should have pointed it out earlier

[15:15] <nine> FWIW I don't think I've ever seen chaos mode really helping. I have had some success with --num-cpu-ticks= though

[15:37] <sena_kun> The number of modules having difficulties with new-disp (including some false positives, alas) decreased from 62 to 37!

[15:40] <nine> Run 660 failed in rr!

[15:51] <jnthnwrthngtn> Just 37...wow

[15:53] <nine> Does anyone have any hypotheses about how we could up with a Perl6::World instead of a Perl6CompilationContext object in that dispatch that I could have a closer look at in that rr session?

[15:55] <lizmat> since Perl6CompilationContext is a defined inside Perl6::World, an off-by-one in lookup of parents ?

[15:56] <nine> The line that's failing is self.context().push_code_object($code); with method context() { $!context } defined in HLL::World

[15:57] <nine> I find it a bit odd that there's nothing about method context in the inline log

[16:02] <jnthnwrthngtn> nine: Does the code-gen look OK in the spesh log?

[16:03] <jnthnwrthngtn> nine: Also, was there a deopt shortly before the effort?

[16:05] <jnthnwrthngtn> uh, I'm not sure what word I wanted but "effort" was not it :D

[16:05] <jnthnwrthngtn> oh, probably error

[16:33] <nine> jnthnwrthngtn: haven't managed to get a spesh log yet :/

[16:36] <nine> Backtrace is: #0  lang_meth_not_found (tc=0x2130e70, arg_info=...) at src/disp/boot.c:513 #1  0x00002d2f3838126b in run_dispatch (tc=0x2130e70, record=0x5d65160cae98, disp=0x214a7f4, capture=0x7ab1593ee8f0, thunked=0x7ffd9e2e8ebc) at src/disp/program.c:482 #2  0x00002d2f3838912b in MVM_disp_program_record_end (tc=0x2130e70, record=0x5d65160cae98, thunked=0x7ffd9e2e8ebc) at src/disp/program.c:2468 #3  

[16:36] <nine> 0x00002d2f382cc932 in handle_end_of_dispatch_record (tc=0x2130e70, thunked=0x7ffd9e2e8ebc) at src/core/callstack.c:353 #4  0x00002d2f382ccf3a in MVM_callstack_unwind_frame (tc=0x2130e70, exceptional=0 '\000', thunked=0x7ffd9e2e8ebc) at src/core/callstack.c:463 #5  0x00002d2f382c883f in remove_one_frame (tc=0x2130e70, unwind=0 '\000') at src/core/frame.c:996 #6  0x00002d2f382c8e06 in MVM_frame_try_return 

[16:36] <nine> (tc=0x2130e70) at src/core/frame.c:1122 #7  0x00002d2f3828aa96 in MVM_interp_run (tc=0x2130e70, initial_invoke=0x2d2f3841ebbe <toplevel_initial_invoke>, invoke_data=0x21e92e0, outer_runloop=0x0) at src/core/interp.c:570

[16:36] <nine> Does that look sensible (except for missing newlines)?

[16:37] <nine> The MVM_frame_try_return surprises me a little since we are kina in the middle of stub_code_object

[16:37] <nine> s/kina/kinda/

[16:38] <jnthnwrthngtn> Well, we're probably returning from a dispatcher (implemented in bytecode), and the lang-meth_not_found dispatcher (in C) thunks off that

[16:38] <jnthnwrthngtn> So that bit is fine

[16:38] <jnthnwrthngtn> If we're in this place, we're recording a new dispatch program

[16:39] <jnthnwrthngtn> There's a few possible hypotheses from that

[16:40] <nine> Yeah, the frame we're returning from looks very dispatchy

[16:40] <jnthnwrthngtn> An interesting question is if we're just after a deopt

[16:40] <jnthnwrthngtn> You can probably reverse breakpoint the deopt impl and see if the frame below the dispatch-y one is the same

[16:41] <jnthnwrthngtn> The other interesting thing is to look at the frame below the one we're currently returning from, which is the one with the dispatch instruction in it that we were trying to handle

[16:41] <jnthnwrthngtn> Firstly, is it specialized?

[16:42] <jnthnwrthngtn> Second, we should be just after a dispatch instruction; look at the bytecode of the frame and see what the instruction is before, and also what registers were passed. Do they look sane?

[16:42] <nine> There was indeed a deopt in stub_code_object

[16:43] <jnthnwrthngtn> If there was a deopt and the values to the dispatch look bogus (e.g. wrong invocant) then it's possible we're looking at a deopt bug *but* that doesn't at all explain why this only happens sometimes

[16:45] <nine> We deopted because of a failed sp_guardconc. Wanted a concrete Str, got a Block type object

[16:45] <nine> Or rather a Block STable

[16:46] <nine> Oh, no, it's actually a defined Block. Got confused there

[16:47] <jnthnwrthngtn> Hmm. Does a Block getting to that point instead of a Str make any sense whatsoever?

[16:47] <jnthnwrthngtn> Or is the deopt likely "garbage in, deopt out"/

[16:49] <nine> Looking at stub_code_object it's actually expecting a Str that makes no sense. Also it looks like the failing sp_guardconc is pretty close to the end of the function, most notably after the inlined call to push_code_object

[16:52] <nine> That's the bytecode of the frame with the failing sp_guardconc: https://gist.github.com/niner/23cf8d105daead236e2131a28b0aef04

[16:52] <nine> Ignore the arrow, we're actually at line 92 according to the register numbers I see

[16:52] <nine> (rr) p GET_UI16(cur_op, -10)

[16:52] <nine> $33 = 38

[16:52] <nine> (rr) p GET_UI16(cur_op, -8)

[16:52] <nine> $34 = 29

[16:53] <nine> dinner&

[17:15] <[Coke]> nine: did a build with your commits intead of my patches, all good.

[17:16] <[Coke]> also: 'set TEST_JOBS=1' 'nmake test' everything passes except psuedohash.

[17:21] <[Coke]> so it looks like the nativecall tests for new-disp on windows do not like being run at the same time as other tests.

[17:22] <[Coke]> It's not all of them, and I don't think the specific failures are the same each run.

[17:24] <nine> [Coke]: do those test failures still happen after one successful run?

[17:28] <[Coke]> yes. i did a test with jobs=1, then jobs=10; first all passed, then many NC fails.

[17:28] <[Coke]> (with psuedohash failing always)

[17:28] <nine> Is that unique to new-disp or does it actually happen on master as well?

[17:28] <nine> the NC failures

[17:28] <[Coke]> uild of master hung for me today. will retry

[17:32] <[Coke]> ... building fine now, weird

[17:40] *** sena_kun left
[17:53] *** Kaiepi left
[17:59] *** Kaiepi joined
[18:02] *** reportable6 left
[18:03] <[Coke]> master *feels* slower on testing. should have timed it all

[18:03] <[Coke]> master TEST_JOBS=1 seems fine on nativecalll.

[18:04] <[Coke]> next...

[18:06] <[Coke]> no failure on pseudohash on master, btw. so that might e exacerbated y new-disp

[18:07] <nine> Yes, pseudohash is known to fail

[18:10] <[Coke]> concurrent nativecall failures are a new-disp regression

[18:11] <[Coke]> getting a debugger attached there will be harder, i think

[18:19] <[Coke]> te test files tht fail fail enitrely, with a wstat of 65280

[18:54] *** MasterDuke joined
[20:04] *** reportable6 joined
[20:13] * jnthnwrthngtn wonders how it's managed to regress those on Windows but not on Linux...

[20:13] <Nicholas> I see pseudohash fail on linux on new-disp

[20:14] <jnthnwrthngtn> Yes, I know about that; I meant the nativecall ones

[20:14] <Nicholas> ah OK. Sorry to be confused

[20:14] <jnthnwrthngtn> I wasn't especially clear, to be fair :)

[20:48] *** Altai-man left
[21:11] *** Altai-man joined
[21:41] *** squashable6 left
[21:44] *** squashable6 joined
[22:13] *** squashable6 left
[23:16] *** squashable6 joined
