[00:02] *** reportable6 left
[00:06] *** reportable6 joined
[00:38] *** evalable6 joined
[02:37] *** linkable6 joined
[03:06] <timo> m: my int $a = 5; sub do_it($x, $y is rw) { $a += $y }; say so do_it all(1, 2, 3, 4), $a; say $a

[03:06] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´True‚ê§80‚ê§¬ª

[03:06] <timo> m: my int $a = 5; sub do_it($x, $y is rw) { $y += 1 }; say so do_it all(1, 2, 3, 4), $a; say $a

[03:06] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´True‚ê§9‚ê§¬ª

[03:06] <timo> rw args with autothreaded subs is funky

[04:40] *** squashable6 left
[04:41] *** squashable6 joined
[04:55] *** squashable6 left
[04:57] *** squashable6 joined
[05:05] *** squashable6 left
[05:05] *** squashable6 joined
[06:00] *** frost joined
[06:02] *** reportable6 left
[07:02] *** unicodable6 left
[07:02] *** bloatable6 left
[07:02] *** statisfiable6 left
[07:02] *** sourceable6 left
[07:02] *** committable6 left
[07:02] *** quotable6 left
[07:02] *** tellable6 left
[07:02] *** greppable6 left
[07:02] *** linkable6 left
[07:02] *** releasable6 left
[07:02] *** bisectable6 left
[07:02] *** notable6 left
[07:02] *** benchable6 left
[07:02] *** squashable6 left
[07:02] *** shareable6 left
[07:02] *** evalable6 left
[07:02] *** nativecallable6 left
[07:02] *** coverable6 left
[07:03] *** greppable6 joined
[07:03] *** sourceable6 joined
[07:03] *** bloatable6 joined
[07:04] *** coverable6 joined
[07:04] *** evalable6 joined
[07:04] *** statisfiable6 joined
[07:05] *** unicodable6 joined
[07:05] *** quotable6 joined
[07:05] *** shareable6 joined
[07:05] *** notable6 joined
[08:04] *** linkable6 joined
[08:04] *** releasable6 joined
[08:04] *** nativecallable6 joined
[09:03] *** squashable6 joined
[09:04] *** tellable6 joined
[09:04] *** bisectable6 joined
[09:05] *** committable6 joined
[09:05] *** benchable6 joined
[10:04] *** reportable6 joined
[10:33] *** dogbert11 left
[11:09] *** sena_kun joined
[12:03] *** reportable6 left
[14:04] *** reportable6 joined
[14:52] *** frost left
[15:26] <MasterDuke> timo: https://github.com/rakudo/rakudo/issues/1713#issuecomment-900393108

[15:35] <MasterDuke> hm, just adding `uv_mutex_unlock(&body->head_lock); uv_mutex_unlock(&body->tail_lock);` before the destroys still gives the abort in the destroy

[15:56] <MasterDuke> huh. we never unlock mutexes before destroying them

[15:57] <[Coke]> during cleanup, do we want to unlock them? Would that potentially allow some other bit of code to continue when we were trying to shut down?

[15:57] <nine> MasterDuke: no you can't just unlock those mutexes. You have to do it on the thread that locked them

[15:58] <nine> There's just no way around proper thread cleanup. And that can only happen if those threads cooperate.

[15:58] <MasterDuke> nine: have you looked at that issue? seems like there might be a problem with workers not getting cleaned up

[16:04] <nine> MasterDuke: haven't looked at that specific issue, but I have working thread cleanup in https://github.com/MoarVM/MoarVM/commit/af5e9158c72511d390a22a9450d874ec9e7516d0 and https://github.com/rakudo/rakudo/commit/8d4f92b0979ab546671978b540c82465155a13e0

[16:05] <MasterDuke> cool, i'll see if those make a difference in this case

[16:05] <nine> Those commits are on the moar_asan_fixes branches

[16:06] <MasterDuke> prob won't be able to until later tonight

[16:12] *** linkable6 left
[16:12] *** evalable6 left
[16:13] *** evalable6 joined
[17:25] *** sena_kun left
[18:03] *** reportable6 left
[18:04] *** reportable6 joined
[18:14] *** linkable6 joined
[19:31] *** discord-raku-bot left
[19:31] *** discord-raku-bot joined
[19:38] <nine> Good news: I have a fully working dispatcher based implementation of nqp::hllize and nqp::hllizefor!

[19:38] <nine> Bad news is that we have a miscompilation on master that makes many tests fail with this new implementation :/

[19:40] <nine> In foo(what => Int.^name) the call to the HOW method gets compiled into QAST::Op+{QAST::SpecialArg}(p6callmethodhow name :named<what>) <wanted> :before_promotion<?> :statement_id<2> name

[19:40] <nine> See that :named<what>? That shouldn't be there and it confuses the lang-hllize dispatcher

[19:45] *** discord-raku-bot left
[19:46] *** discord-raku-bot joined
[20:07] <nine> Apparently caused by method arglist in Perl6::Actions: $_[2].named($name);

[20:18] <nine> And I seem to have a fix :)

[20:19] <timo> i wonder what other sitations this miscompile happens in? only with .^ i assume?

[20:26] <nine> Well, it happens there because we re-use the existing QAST::Op carrying that named annotation. The fix accordingly is to create a new node and take only the stuff we need.

[20:26] <nine> Could happen with other desugars as well

[20:28] <timo> mhm

[20:29] <Geth> ¬¶ MoarVM/new-disp: a9782fd5b0 | (Stefan Seifert)++ | 6 files

[20:29] <Geth> ¬¶ MoarVM/new-disp: Add gettypehllrole op to facilitate writing hllization code in HLLs

[20:29] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a9782fd5b0

[20:29] <Geth> ¬¶ MoarVM/new-disp: 7897ff04e4 | (Stefan Seifert)++ | 7 files

[20:29] <Geth> ¬¶ MoarVM/new-disp: Add lang-hllize dispatcher

[20:29] <Geth> ¬¶ MoarVM/new-disp: 

[20:29] <Geth> ¬¶ MoarVM/new-disp: This dispatcher checks if hllization is actually needed and if it is, delegates

[20:29] <Geth> ¬¶ MoarVM/new-disp: to a registered hllization dispatcher for the target language. This will

[20:29] <Geth> ¬¶ MoarVM/new-disp: replace the existing nqp::hllize and nqp::hllizefor ops.

[20:29] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/7897ff04e4

[20:29] <Geth> ¬¶ MoarVM/new-disp: 4f04eef208 | (Stefan Seifert)++ | src/disp/boot.c

[20:29] <Geth> ¬¶ MoarVM/new-disp: Give lang-hllize dispatcher an optional argument for language name

[20:29] <Geth> ¬¶ MoarVM/new-disp: 

[20:29] <Geth> ¬¶ MoarVM/new-disp: This makes lang-hllize suitable as a replacement for the nqp::hllizefor op.

[20:30] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/4f04eef208

[20:57] <timo> i don't mean to offload "my" work onto you, but do you have an idea for the junction autothreading thing, nine?

[23:04] *** evalable6 left
[23:04] *** linkable6 left
[23:05] *** evalable6 joined
