[00:02] *** reportable6 left
[01:02] *** reportable6 joined
[02:02] *** linkable6 left
[02:02] *** evalable6 left
[02:03] *** evalable6 joined
[02:05] *** linkable6 joined
[02:39] *** vrurg left
[02:41] *** vrurg joined
[03:10] *** jgaz joined
[03:15] *** jgaz left
[05:05] *** reportable6 left
[05:05] *** sourceable6 left
[05:05] *** squashable6 left
[05:05] *** notable6 left
[05:05] *** tellable6 left
[05:05] *** committable6 left
[05:05] *** bisectable6 left
[05:05] *** coverable6 left
[05:05] *** benchable6 left
[05:05] *** evalable6 left
[05:05] *** unicodable6 left
[05:05] *** shareable6 left
[05:05] *** greppable6 left
[05:05] *** nativecallable6 left
[05:05] *** bloatable6 left
[05:05] *** releasable6 left
[05:05] *** quotable6 left
[05:05] *** statisfiable6 left
[05:05] *** linkable6 left
[05:06] *** shareable6 joined
[05:06] *** coverable6 joined
[05:07] *** unicodable6 joined
[05:07] *** greppable6 joined
[05:07] *** squashable6 joined
[05:07] *** bloatable6 joined
[05:07] *** committable6 joined
[05:08] *** evalable6 joined
[05:08] *** quotable6 joined
[05:08] *** statisfiable6 joined
[05:08] *** reportable6 joined
[06:02] *** leedo_ left
[06:02] *** leedo joined
[06:02] *** reportable6 left
[06:06] *** sourceable6 joined
[06:06] *** nativecallable6 joined
[06:06] *** tellable6 joined
[06:07] *** bisectable6 joined
[07:05] *** reportable6 joined
[07:07] *** linkable6 joined
[07:07] *** releasable6 joined
[07:12] <Nicholas> good *, *

[07:34] *** frost joined
[07:55] *** dogbert12 left
[08:07] *** benchable6 joined
[09:06] *** notable6 joined
[09:53] <timo> good -> $a, $b { $a, $b }

[09:55] <moon-child> good { $^a, $^b }

[10:26] <lizmat> good *,* ?

[10:26] <lizmat> meh

[10:30] *** evalable6 left
[10:30] *** linkable6 left
[10:44] *** Colt left
[10:59] *** Colt joined
[11:33] *** evalable6 joined
[11:34] *** Altai-man joined
[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:31] *** linkable6 joined
[14:32] *** frost left
[15:03] *** nebuchadnezzar left
[15:27] *** Geth joined
[15:28] <japhb> lizmat: Kinda looks like an owl face

[15:28] <lizmat> :-)

[18:02] *** reportable6 left
[18:33] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/11/29/2021-48-raku-at-fosdem-2022/

[18:51] *** Altai-man left
[18:59] *** squashable6 left
[19:14] <lizmat> m: my str $a; BEGIN { $a = "foo" }   # is this a known issue ?

[19:14] <camelia> rakudo-moar d6817f088: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  Lexical with name '$a' has wrong type. real type 8 wanted type 7␤  at…»

[19:15] <lizmat> m: BEGIN my str $a = "foo"   # golf

[19:15] <camelia> rakudo-moar d6817f088: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  Lexical with name '$a' has wrong type. real type 8 wanted type 7␤  at…»

[19:15] <lizmat> m: my str constant $a = "foo"; dd $a   # this appears ok

[19:15] <camelia> rakudo-moar d6817f088: OUTPUT: «"foo"␤»

[19:34] <lizmat> also strange:

[19:34] <lizmat> m: my %h := BEGIN { my %m is Map = a => 42, b => 666 }; BEGIN { dd %h.keys }; dd %h

[19:34] <camelia> rakudo-moar d6817f088: OUTPUT: «().Seq␤Map.new((:a(42),:b(666)))␤»

[19:34] <lizmat> so one BEGIN time is not another ?

[19:50] <ugexe> i was thinking it would have to be `BEGIN my %h := ...` but that doesn't do what i expect either

[19:55] <ugexe> m: BEGIN my %h = my %m is Map = a => 42, b => 666; BEGIN { dd %h.keys }; dd %h.keys

[19:55] <camelia> rakudo-moar d6817f088: OUTPUT: «("a", "b").Seq␤("a", "b").Seq␤»

[19:56] <ugexe> assignment worked though

[19:56] <lizmat> yeah, but that just makes %h a Hash

[19:56] <lizmat> mutable and all

[20:04] *** reportable6 joined
[21:39] *** camelia left
[21:39] *** japhb left
[21:39] *** bartolin_ left
[21:39] *** harrow left
[21:39] *** linkable6 left
[21:39] *** evalable6 left
[21:39] *** benchable6 left
[21:39] *** Kaiepi left
[21:39] *** Nicholas left
[21:39] *** leont left
[21:39] *** jnthnwrthngtn left
[21:39] *** rba left
[21:41] *** Colt left
[21:41] *** Colt joined
[21:44] *** linkable6 joined
[21:44] *** evalable6 joined
[21:44] *** benchable6 joined
[21:44] *** japhb joined
[21:44] *** Kaiepi joined
[21:44] *** Nicholas joined
[21:44] *** bartolin_ joined
[21:44] *** camelia joined
[21:44] *** leont joined
[21:44] *** jnthnwrthngtn joined
[21:44] *** harrow joined
[21:44] *** rba joined
[21:45] *** Colt left
[21:46] *** Colt joined
[22:05] *** nebuchadnezzar joined
[22:09] <jnthnwrthngtn> lizmat: BEGIN-time bindings aren't preserved, only assignments (and native assignment is effectively binding, or more to the point, there's no container)

[22:11] <japhb> jnthnwrthngtn: Why aren't BEGIN-time bindings preserved?

[22:28] <jnthnwrthngtn> The lexical scope surrounding the BEGIN isn't compiled at the time the BEGIN block is, so we have to fake it up, and we don't cheat hard enough to preserve bindings, just hard enough that the "prototype" container is preserved

[22:30] <japhb> Ah interesting

[22:30] <jnthnwrthngtn> I suspect RakuAST will take a different approach to all of this

[22:31] <japhb> Is PEA or RakuAST first on your agenda for the new year?

[22:31] <jnthnwrthngtn> I don't think it's impossible to make it work (and don't doubt it ideally would work), just wouldn't fancy doing it on the current compiler architecture :)

[22:31] <japhb> Gotcah

[22:31] <japhb> *Gotcha

[22:31] <japhb> (Gattica?)

[22:31] <jnthnwrthngtn> Probably a bit of both, though I suspect PEA will be the one that finishes first :)

[22:32] <jnthnwrthngtn> Plan to do the re-work of LEAVE-time ahead of either of those (though hoping to do that in December)

[22:34] <japhb> What will that rework gain us?

[22:44] <jnthnwrthngtn> Much cheaper LEAVE handling, removal of some icky scope hackery, and hopefully a fix for a long-standing bug where return values get messed up sometimes when using LEAVE blocks

[22:45] <jnthnwrthngtn> While one may not directly use LEAVE very much, it is used in Lock and Lock::Async, for example

[23:03] *** squashable6 joined
[23:18] <japhb> Oh, and that's definitely going to end up used a lot in concurrent code (often implicitly, I suspect).

[23:24] *** squashable6 left
[23:25] *** squashable6 joined
