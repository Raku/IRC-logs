[00:02] *** reportable6 left
[01:03] *** reportable6 joined
[01:57] *** frost joined
[03:40] *** linkable6 left
[03:40] *** evalable6 left
[03:40] *** quotable6 left
[03:40] *** statisfiable6 left
[03:40] *** bloatable6 left
[03:40] *** notable6 left
[03:40] *** greppable6 left
[03:40] *** coverable6 left
[03:40] *** reportable6 left
[03:40] *** unicodable6 left
[03:40] *** bisectable6 left
[03:40] *** nativecallable6 left
[03:40] *** tellable6 left
[03:40] *** sourceable6 left
[03:40] *** shareable6 left
[03:40] *** releasable6 left
[03:40] *** squashable6 left
[03:41] *** sourceable6 joined
[03:41] *** releasable6 joined
[03:41] *** statisfiable6 joined
[03:42] *** linkable6 joined
[03:42] *** evalable6 joined
[03:43] *** linkable6 joined
[03:43] *** evalable6 joined
[03:43] *** notable6 joined
[04:41] *** coverable6 joined
[04:41] *** reportable6 joined
[04:41] *** bloatable6 joined
[04:41] *** squashable6 joined
[04:42] *** quotable6 joined
[04:43] *** shareable6 joined
[04:43] *** tellable6 joined
[05:41] *** bisectable6 joined
[05:41] *** greppable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:14] *** Util left
[06:21] *** Util joined
[07:09] *** ilogger2 left
[07:11] *** ilogger2 joined
[07:41] *** nativecallable6 joined
[07:43] *** unicodable6 joined
[07:52] <Nicholas> good UGT, *
[07:56] <Nicholas> beware of geeks bearing links.
[07:56] <Nicholas> ( which seemingly is *roughly* correct -- https://en.wikiquote.org/wiki/Yes,_Minister#Episode_Five:_The_Bed_of_Nails )
[08:47] <jnthnwrthngtn> .oO( We're no strangers to moar... )
[08:50] <lizmat> .oO( we can haz never enoagh )
[09:04] *** squashable6 left
[09:06] *** squashable6 joined
[09:30] <jnthnwrthngtn> All the VMIL videos can be found at https://www.youtube.com/playlist?list=PLx0NF5EsMtj740DJXl9Z7VfkboVTTPPa-
[09:34] <Geth> ¬¶ MoarVM/master: 4 commits pushed by (Stefan Seifert)++, (Jonathan Worthington)++
[09:34] <Geth> ¬¶ MoarVM/master: 196803ea4b | Fix segfault due to uninitialized entry_point in native calls
[09:34] <Geth> ¬¶ MoarVM/master: 3ac6c6fff3 | Fix missing data on clones of NativeCall sites
[09:34] <Geth> ¬¶ MoarVM/master: 907a73b835 | Fix nested runloops leaving call stack in confused state
[09:34] <Geth> ¬¶ MoarVM/master: ff5e65d658 | Merge pull request #1569 from MoarVM/new-disp-nativecall-part1
[09:34] <Geth> ¬¶ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/c43ee9dff2c1...ff5e65d65875
[09:35] <Geth> ¬¶ MoarVM: ca87b70acd | (Daniel Green)++ | 2 files
[09:35] <Geth> ¬¶ MoarVM: Lego jit implementation of nqp::abs_i
[09:35] <Geth> ¬¶ MoarVM: 
[09:35] <Geth> ¬¶ MoarVM: This was seen to cause bails in a profile/spesh log of a simple
[09:35] <Geth> ¬¶ MoarVM: Text::Diff::Sift4 benchmark.
[09:35] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ca87b70acd
[09:35] <Geth> ¬¶ MoarVM: 439cc33ec5 | (Jonathan Worthington)++ (committed using GitHub Web editor) | 2 files
[09:35] <Geth> ¬¶ MoarVM: Merge pull request #1572 from MasterDuke17/jit_abs_i
[09:35] <Geth> ¬¶ MoarVM: 
[09:35] <Geth> ¬¶ MoarVM: Lego jit implementation of nqp::abs_i
[09:35] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/439cc33ec5
[09:37] * lizmat feels a bump coming up?
[09:39] <jnthnwrthngtn> Wasn't planning to
[09:39] <lizmat> ok, so this will be post 2021.10 ?
[09:42] <jnthnwrthngtn> Not sure how that follows? I figure anything merged or committed today will be in 2021.10.
[09:42] <lizmat> well... only a few days before the release... I guess a blin run would need to have these changes ?
[09:44] <jnthnwrthngtn> Sure, but I figure the bump can be done before the blin run to take in anything else that may land before then.
[09:44] <lizmat> ok  :-)   just checking...
[09:44] <jnthnwrthngtn> My megamorphic handler changes won't go into 2021.10, I think
[09:45] <jnthnwrthngtn> (Those are in a Rakudo branch)
[10:23] <Nicholas> Does t/02-rakudo/03-cmp-ok.t failing have an issue yet? (with MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1) In that, I know that nine figured out that it was something to do with PEA. But that means it's beyond my ability to fix it. (this yaer)
[10:24] <nine> Btw. I bet it's the same issue as the 15-gh_1202.t flapper
[10:29] *** Altai-man joined
[10:40] <lizmat> too bad the Q&A on the keynote are not part of the video :-)
[10:50] <jnthnwrthngtn> Indeed, there were some good questions
[10:53] <nine> How were the reactions in general?
[10:56] *** Util left
[10:56] <jnthnwrthngtn> nine: Positive; seems folks found it interesting.
[10:58] <jnthnwrthngtn> Was suggested that new-disp may relate to https://dl.acm.org/doi/10.1145/3428288 (which was in my reading list) and that in some senses we might have "got there first"
[11:01] <nine> I guess it's about time you collect your Phd :D
[11:02] <Nicholas> I believe that he'd need to write an actual thesis. Code doesn't cut it.
[11:03] *** Util joined
[11:03] <nine> That abstract reads like it describes spesh linking which I think we even had before new-disp?
[11:03] <Nicholas> (this is time consuming and not necessarily fun)
[11:05] <jnthnwrthngtn> nine: Possibly yes :)
[11:05] <nine> Academia is waaay behind :)
[11:06] <jnthnwrthngtn> I'm pretty sure we were ahead on https://arxiv.org/abs/1807.00661
[11:38] <Geth> ¬¶ MoarVM: 5c6fd3b4dc | (Jonathan Worthington)++ | src/spesh/optimize.c
[11:38] <Geth> ¬¶ MoarVM: Add missing facts to spesh link guard
[11:38] <Geth> ¬¶ MoarVM: 
[11:38] <Geth> ¬¶ MoarVM: When we want to perform specialization linking, we insert a guard on
[11:38] <Geth> ¬¶ MoarVM: the argument we have, and potentially then decont and check what is in
[11:38] <Geth> ¬¶ MoarVM: the container. However, we weren't placing facts as a result of adding
[11:38] <Geth> ¬¶ MoarVM: the guard on the container, thus leaving an sp_decont in the resulting
[11:38] <Geth> ¬¶ MoarVM: output that could have instead been lowered to something cheaper. Add
[11:38] <Geth> ¬¶ MoarVM: them.
[11:38] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5c6fd3b4dc
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[13:14] <timo> "you can have little a run time at compile time, as a treat"
[13:20] <timo> on one slide i see for a few frames the "i'd" at the start and the "ku" (from "Raku") at the end were cut off and then popped in i wonder how that happened
[13:30] <Altai-man> jnthnwrthngtn, bad news, https://github.com/rakudo/rakudo/commit/ca3355a8735eac21637b17c6989b4891030e55e2 broke some modules.
[13:31] <Altai-man> the failure states differ
[13:33] <Altai-man> I think we had this batch of modules before, not sure if rings the bell: SupplyTimeWindow, StrictNamedArguments, Staticish, HTTP::Request::FormData.
[13:34] <Altai-man> No exception handler located for catch with Concurrent::Stack, it seems the bug was uncovered by new-disp, making it more prone to happen.
[13:39] <jnthnwrthngtn> Hmmm
[13:39] <jnthnwrthngtn> Well, then the alternative is we regress no modules but ship with a more busted callwith I guess
[13:40] <jnthnwrthngtn> What do the failure modes look like?
[13:41] <Altai-man> most modules are getting type objects (Any, Nil) instead of real values (strings, integers), for the SupplyTimeWindow it's `Died with X::TypeCheck::Return+{X::React::Died}`, but I guess it has the same cause.
[13:41] <jnthnwrthngtn> Are they actually using callwith?
[13:42] <Altai-man> alas, yes. e.g. https://github.com/FCO/SupplyTimeWindow/blob/master/lib/SupplyTimeWindow.pm6
[13:43] <jnthnwrthngtn> Hm, that looks like a relatively straightward usage of callwith
[13:45] <Altai-man> or https://github.com/zostay/HTTP-Request-FormData/blob/master/lib/HTTP/Request/FormData.pm6#L178-L197
[13:46] <jnthnwrthngtn> Ah, there's a pattern here: they all involve multi
[13:46] <jnthnwrthngtn> multi methods, even
[13:46] <jnthnwrthngtn> OK, will see if I can track it down 
[13:46] <Altai-man> https://github.com/cjfields/bioperl6/blob/dcf2c56f7871820b767ec274c5c7f8a7347d1d01/lib/Bio/SeqIO/fasta.pm6#L30-L33 <- yes, the idea seems to be on spot.
[13:47] <Altai-man> jnthnwrthngtn++
[13:50] *** frost left
[13:55] <timo> ohmygosh spesh log comments got a little shout-out :3
[13:56] <timo> that was me! :D
[13:56] <timo> and wow, 3 years, 2 months ago was the commit that introduced them
[13:56] <[Coke]> \o/
[13:58] *** linkable6 left
[14:01] *** linkable6 joined
[14:08] <timo> a parallel i've never seen before was that making moarvm more "programmable" (with new-disp and such) being a performance revolution is a little bit like programmable pipelines on GPUs, i.e. going from the "fixed function pipeline" in opengl to shaders
[14:09] <timo> where first you had to do stuff like glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
[14:09] <timo> glLightfv(GL_LIGHT0, GL_POSITION, light_position); glEnable(GL_LIGHTING); glEnable(GL_LIGHT0);
[14:09] <timo> and it goes from GL_LIGHT0 to GL_LIGHT7
[14:10] <timo> and now, well, you write a shader, which is like twenty times as much code to set up, but you can now have more than just 8 light sources!
[14:21] <jdv> jnthnwrthngtn: cool presentation, thanks
[14:38] <timo> aww, the questions didn't make it into the recording :(
[14:40] <cognominal_> A jnthn presentation ? A treat !  Where is that ? URL ?
[14:44] <Altai-man> cognominal_, https://www.youtube.com/watch?v=3lxuCr54ULE&list=PLx0NF5EsMtj740DJXl9Z7VfkboVTTPPa-&index=2
[14:55] <cognominal_> MoarVM, almost from Moravia ?
[15:02] <timo> long live space race, long live morvamia
[15:25] *** evalable6 left
[15:25] *** linkable6 left
[15:26] *** linkable6 joined
[15:28] *** evalable6 joined
[16:25] <nine> I got into that talk twice :) First with the GCC plugin, then with boot-foreign-code
[16:26] <timo> yu
[16:26] <timo> very good indeed
[16:28] *** linkable6 left
[16:28] *** evalable6 left
[16:28] <jnthnwrthngtn> m: say 56.826 / 58.737
[16:28] <camelia> rakudo-moar d4f7d1742: OUTPUT: ¬´0.967465‚ê§¬ª
[16:29] <jnthnwrthngtn> m: say 103.2 / 106.8
[16:29] <camelia> rakudo-moar d4f7d1742: OUTPUT: ¬´0.966292‚ê§¬ª
[16:29] *** linkable6 joined
[16:38] <timo> interesting. more speedups from the megamorphic handling branch?
[16:44] <jnthnwrthngtn> No
[17:03] <Geth> ¬¶ MoarVM/cheaper-frames: c1950524d7 | (Jonathan Worthington)++ | 5 files
[17:03] <Geth> ¬¶ MoarVM/cheaper-frames: Allocate ->work registers on the call stack
[17:03] <Geth> ¬¶ MoarVM/cheaper-frames: 
[17:03] <Geth> ¬¶ MoarVM/cheaper-frames: Thus saving us a pair of FSA calls to allocate and free the registers
[17:03] <Geth> ¬¶ MoarVM/cheaper-frames: for every frame invocation. While microbenchmarks where we manage to
[17:03] <Geth> ¬¶ MoarVM/cheaper-frames: inline everything will just get a bit more done while interpreting, a
[17:03] <Geth> ¬¶ MoarVM/cheaper-frames: more realistic program will benefit from this. For example, the Rakudo
[17:03] <Geth> ¬¶ MoarVM/cheaper-frames: build process completes in around 96.7% of the time it used to before
[17:03] <Geth> ¬¶ MoarVM/cheaper-frames: <‚Ä¶commit message has 12 more lines‚Ä¶>
[17:03] <Geth> ¬¶ MoarVM/cheaper-frames: review: https://github.com/MoarVM/MoarVM/commit/c1950524d7
[17:07] <timo> oh my
[17:08] <timo> stack regioin? :)
[17:08] <timo> cool, in any case :)
[17:10] <Geth> ¬¶ MoarVM/cheaper-frames: d83edbeac0 | (Jonathan Worthington)++ | 5 files
[17:10] <Geth> ¬¶ MoarVM/cheaper-frames: Allocate ->work registers on the call stack
[17:10] <Geth> ¬¶ MoarVM/cheaper-frames: 
[17:10] <Geth> ¬¶ MoarVM/cheaper-frames: Thus saving us a pair of FSA calls to allocate and free the registers
[17:10] <Geth> ¬¶ MoarVM/cheaper-frames: for every frame invocation. While microbenchmarks where we manage to
[17:10] <Geth> ¬¶ MoarVM/cheaper-frames: inline everything will just get a bit more done while interpreting, a
[17:10] <Geth> ¬¶ MoarVM/cheaper-frames: more realistic program will benefit from this. For example, the Rakudo
[17:10] <Geth> ¬¶ MoarVM/cheaper-frames: build process completes in around 96.7% of the time it used to before
[17:10] <Geth> ¬¶ MoarVM/cheaper-frames: <‚Ä¶commit message has 12 more lines‚Ä¶>
[17:10] <Geth> ¬¶ MoarVM/cheaper-frames: review: https://github.com/MoarVM/MoarVM/commit/d83edbeac0
[17:10] <jnthnwrthngtn> Ammended to fix the typo :)
[17:18] <timo> can't have a terrible typo like that, after all!
[17:19] * nine groins
[17:20] *** Altai-man left
[17:20] <lizmat> as they would say in Flanders: amai!
[17:21] <MasterDuke> there's a new warning at interp.c:6721
[17:22] <MasterDuke> src/core/interp.c: In function ‚ÄòMVM_interp_run_nested‚Äô:
[17:22] <MasterDuke> src/core/interp.c:6721:29: warning: unused variable ‚Äòcsrecord‚Äô [-Wunused-variable]
[17:22] <MasterDuke>  6721 |         MVMCallStackRecord *csrecord  = MVM_callstack_allocate_nested_runloop(tc);
[17:23] <jnthnwrthngtn> ooh, that looks related to the nine++ PR I merged earlier
[17:23] <jnthnwrthngtn> I guess it's harmless (the function is called for its side-effect and the result isn't needed)
[17:24] <nine> Ah yes, that variable is only used in a debug build for the assert:         assert(tc->stack_top == csrecord);
[17:25] <MasterDuke> clang doesn't complain, but gcc does
[17:27] <jnthnwrthngtn> I'd call that a gcc bug, tbh
[17:27] <jnthnwrthngtn> Sure it optimizes the assert out in a non-debug build, but I'm not sure it should leak the fact
[17:28] <jnthnwrthngtn> So far as the source goes it is used
[17:28] <jnthnwrthngtn> Or maybe bug is strong, but LTA at least.
[17:29] <MasterDuke> interestingly i'm building with --debug=3
[17:29] <jnthnwrthngtn> Even odder
[17:29] <jnthnwrthngtn> OK, home time for me
[17:29] <MasterDuke> still complains without the --debug
[17:31] <nine> Finally got a fix!
[17:32] <nine> The issue was that we took the deopt_idx for the guard from the MVM_SPESH_ANN_DEOPT_PRE_INS annotation. But in this case there was also a MVM_SPESH_ANN_DEOPT_SYNTH.
[17:32] <nine> And if there's also a synth annotation we need to give preference to that.
[17:32] <nine> As the synth's deopt idx will be what the materializations are registered under
[17:34] <MasterDuke> nice
[17:53] <Geth> ¬¶ MoarVM/fix-pea-segfaults: 6ade9ae6af | (Stefan Seifert)++ | src/spesh/optimize.c
[17:53] <Geth> ¬¶ MoarVM/fix-pea-segfaults: Fix uninitialized registers after deopt from dispatch guards
[17:53] <Geth> ¬¶ MoarVM/fix-pea-segfaults: 
[17:53] <Geth> ¬¶ MoarVM/fix-pea-segfaults: A dispatch gets translated to a sequence of operations culminating in the
[17:53] <Geth> ¬¶ MoarVM/fix-pea-segfaults: runbytecode instruction. The pre-deopt index of the original instruction will
[17:53] <Geth> ¬¶ MoarVM/fix-pea-segfaults: be found on the runbytecode itself or any of the guards stacked up before it.
[17:53] <Geth> ¬¶ MoarVM/fix-pea-segfaults: When looking for the pre-deopt index, we didn't take into account, that the
[17:53] <Geth> ¬¶ MoarVM/fix-pea-segfaults: instruction holding a suitable deopt pre ins annotation may also itself have
[17:53] <Geth> ¬¶ MoarVM/fix-pea-segfaults: <‚Ä¶commit message has 10 more lines‚Ä¶>
[17:53] <Geth> ¬¶ MoarVM/fix-pea-segfaults: review: https://github.com/MoarVM/MoarVM/commit/6ade9ae6af
[17:54] <nine> So, this ^^^ fixes the bug but for some obscure reason leads to a hang in t/spec/S12-construction/destruction.t
[17:55] <nine> What the? The hang is there even if I disable spesh?!
[17:57] <nine> Anyone else seeing this?
[18:02] *** reportable6 left
[18:05] <MasterDuke> testing it
[18:10] <MasterDuke> perf top says it spending all its time in __memset_avx2_unaligned_erms and MVM_gc_collect
[18:10] <MasterDuke> oh, isn't that the test i recently changed?!
[18:11] <MasterDuke> yep
[18:12] <MasterDuke> i got rid of a 5s timeout, but added the `quietly $*VM.request-garbage-collection;`
[18:28] *** evalable6 joined
[18:49] <Nicholas> jnthnwrthngtn: ASAN setting builds (with the FSA debugger) *really* like your branch because, well, there's a lot less mallocing.
[18:50] <Nicholas> stage parse down from about 380s to 300s
[18:50] <Nicholas> this has little *real* world impact (the real world uses the FSA) but it makes paranoia faster
[19:04] <nine> MasterDuke: you know what fixes it? Removing the $*VM.request-garbage-collection
[19:04] <MasterDuke> that's odd...
[19:10] <nine> Know what also fixes it? Replacing $*VM.request-garbage-collection with use nqp; nqp::force_gc;
[19:13] <lizmat> and if you replace it with VM.request-garbage-collection ?
[19:13] <lizmat> aka, without the dynvar lookup ?
[19:15] <nine> still hangs
[19:16] <lizmat> so than it's dispatch related, not dynvar lookup related, I'd say ?
[19:17] <nine> How can my change, that only touches spesh's optimizer cause this hang to appear, even when I run with spesh disabled?
[19:17] <nine> If it's your garden variety memory layout issue, why is it so damn consistent and reproducible even across machines?
[19:18] <nine> There's no flapping whatsoever. Some combinations work all the time while the rest hangs all the time
[19:19] <MasterDuke> fyi, also hangs with spesh disabled and rakudo's --optimize=off
[19:20] <nine> Yeah, it's bizarre
[19:28] *** linkable6 left
[19:28] *** evalable6 left
[19:29] *** linkable6 joined
[19:31] <Geth> ¬¶ MoarVM: niner++ created pull request #1573: Fix uninitialized registers after deopt from dispatch guards
[19:31] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1573
[19:33] <MasterDuke> just looking to see what CI has to say?
[19:35] <nine> No, it's up for real. Yes, it triggers that weird GC issue, but there's just no way it can be responsible for it. Unless jnthnwrthngtn has some super surprising insight :)
[19:36] <MasterDuke> heh
[19:37] <MasterDuke> speaking jnthnwrthngtn++, just finished the talk, very good
[19:41] <MasterDuke> nine: will an instruction never have a MVM_SPESH_ANN_DEOPT_PRE_INS without also having a MVM_SPESH_ANN_DEOPT_SYNTH?
[19:43] <nine> MasterDuke: actually that question points me at a mistake
[19:43] <nine> For the second loop (looking for DEOPT_PRE_INS) to make sense, I have to reset ann to ins->annotations
[19:43] <nine> But that makes me really wonder if there actually can be a situation where we have a MVM_SPESH_ANN_DEOPT_PRE_INS but not a MVM_SPESH_ANN_DEOPT_SYNTH?
[19:44] <MasterDuke> couldn't the if just be `if (ann->type == MVM_SPESH_ANN_DEOPT_SYNTH || ann->type == MVM_SPESH_ANN_DEOPT_PRE_INS)`?
[19:45] <nine> No, because we may encounter the MVM_SPESH_ANN_DEOPT_PRE_INS first, but need to give preference to MVM_SPESH_ANN_DEOPT_SYNTH
[19:45] <MasterDuke> or can the compiler reorder those?
[19:45] <Geth> ¬¶ MoarVM/fix-pea-segfaults: b92ca73b48 | (Stefan Seifert)++ | src/spesh/optimize.c
[19:45] <Geth> ¬¶ MoarVM/fix-pea-segfaults: Fix uninitialized registers after deopt from dispatch guards
[19:45] <Geth> ¬¶ MoarVM/fix-pea-segfaults: 
[19:45] <Geth> ¬¶ MoarVM/fix-pea-segfaults: A dispatch gets translated to a sequence of operations culminating in the
[19:45] <Geth> ¬¶ MoarVM/fix-pea-segfaults: runbytecode instruction. The pre-deopt index of the original instruction will
[19:45] <Geth> ¬¶ MoarVM/fix-pea-segfaults: be found on the runbytecode itself or any of the guards stacked up before it.
[19:45] <Geth> ¬¶ MoarVM/fix-pea-segfaults: When looking for the pre-deopt index, we didn't take into account, that the
[19:45] <Geth> ¬¶ MoarVM/fix-pea-segfaults: instruction holding a suitable deopt pre ins annotation may also itself have
[19:45] <Geth> ¬¶ MoarVM/fix-pea-segfaults: <‚Ä¶commit message has 10 more lines‚Ä¶>
[19:45] <Geth> ¬¶ MoarVM/fix-pea-segfaults: review: https://github.com/MoarVM/MoarVM/commit/b92ca73b48
[19:46] <MasterDuke> ah, right
[19:49] <nine> New way to fix it: put my $foo = Foo.new; my $chld = Child.new unless +@destructor_order; into a sub and call that from the loop
[19:49] <MasterDuke> i wonder how expensive that pointer chasing is? might it be cheaper to store the index of the first MVM_SPESH_ANN_DEOPT_PRE_INS found in the first loop and return that if it exists after the loop? then you wouldn't have the second loop at all
[19:51] <nine> Probably won't matter as we expect some 0-2 annotations
[19:51] <MasterDuke> ha, then yeah
[19:54] <nine> I guess putting the test code in a sub helps because we run destructors when returning from a frame. But then, the VM.request-garbage-collection call actually provides a frame to return from
[19:56] <nine> I had hoped that after https://github.com/MoarVM/MoarVM/commit/bb14f423768d122a23a2ef6512880d0f45c3e080 we'd be past those finalizer issues. But apparently there's at least one more oddity left
[19:57] <nine> OTOH it may be good that there is this very small test case now. Because I still see applications leak and debugging those would be horrible
[20:31] *** evalable6 joined
[22:04] *** reportable6 joined
[22:14] *** dogbert17 left
[22:53] *** dogbert17 joined
[23:53] *** notable6 left
[23:53] *** unicodable6 left
[23:53] *** evalable6 left
[23:53] *** reportable6 left
[23:53] *** greppable6 left
[23:53] *** sourceable6 left
[23:53] *** statisfiable6 left
[23:53] *** linkable6 left
[23:53] *** nativecallable6 left
[23:53] *** quotable6 left
[23:53] *** bloatable6 left
[23:53] *** releasable6 left
[23:53] *** shareable6 left
[23:53] *** coverable6 left
[23:53] *** tellable6 left
[23:53] *** bisectable6 left
[23:53] *** committable6 left
[23:53] *** benchable6 left
[23:53] *** squashable6 left
[23:53] *** coverable6 joined
[23:53] *** bloatable6 joined
[23:53] *** sourceable6 joined
[23:54] *** notable6 joined
[23:55] *** committable6 joined
[23:55] *** reportable6 joined
[23:56] *** linkable6 joined
[23:56] *** releasable6 joined
[23:56] *** squashable6 joined
