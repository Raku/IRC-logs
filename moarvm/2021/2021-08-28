[00:04] *** reportable6 joined
[00:27] *** sourceable6 joined
[00:27] *** bisectable6 joined
[00:28] *** evalable6 joined
[00:28] *** linkable6 joined
[00:28] *** greppable6 joined
[01:26] *** benchable6 joined
[01:28] *** shareable6 joined
[02:25] *** rakuUser left
[03:27] *** nativecallable6 joined
[03:40] *** squashable6 left
[08:58] <nine> jnthnwrthngtn: indeed! Many thanks for that fix. Probably safed my whole day today

[08:59] *** Geth joined
[09:00] *** TempIRCLogger joined
[09:00] <Nicholas> so what are you going to do instead? Weather doesn't look *that* nice

[09:00] <tellable6> 2021-08-27T20:13:10Z #moarvm <MasterDuke47> Nicholas here's a valgrind log of compiling CORE.e with --full-cleanup and it has a bunch of hash-related leaks https://gist.github.com/MasterDuke17/3afad8db74f523569fa667b1ec9fbb4d

[09:01] <nine> Work on other bugs :D

[09:02] <Nicholas> I'm not sure if that's more fun than my next job - the washing up backlog

[09:17] *** MasterDuke23 joined
[09:19] <MasterDuke23> Nicholas: ignore what i said about hash stuff leaking from CORE.e compilation with --full-cleanup. turns out i had the --full-cleanup in the wrong spot, and it wasn't being applied. with it in the right location there aren't any leaks

[09:20] <Nicholas> \o/

[09:20] <Nicholas> thanks for the update

[09:20] <Nicholas> I shall return to the washing up...

[09:29] <nine> MasterDuke23: did you salvage the --full-cleanup support for nqp::exit from moar_asan_fixes?

[09:30] *** MasterDuke23 left
[09:46] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: b33d1cb793 | (Nicholas Clark)++ | 2 files

[09:46] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Remove `MVM_6model_add_container_config` from MoarVM's public API.

[09:46] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 

[09:46] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Rakudo eliminated its Scalar container descriptor in April 2020, which was

[09:46] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: the only remaining external user for this (rakudo/rakudo/@4221f8225fea).

[09:46] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 

[09:46] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Hence we no longer need to expose or export this. As the only MoarVM callers

[09:46] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: are in the same file, we can go further and convert it to a static function.

[09:46] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: review: https://github.com/MoarVM/MoarVM/commit/b33d1cb793

[09:46] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 9c71064ed1 | (Nicholas Clark)++ | 4 files

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Simplify `add_container_config` and remove `mutex_container_registry`.

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: MVM_6model_containers_setup() is the only code that writes to

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: `container_registry`. It is only called from `MVM_6model_bootstrap`

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: which is called from `MVM_vm_create_instance`, meaning modification only

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: happens during VM instance setup, which is single threaded. After this

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: `container_registry` is immutable. Hence it no longer needs a mutex to

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: protect access, so remove `mutex_container_registry` and all the code

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: that supports it.

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: review: https://github.com/MoarVM/MoarVM/commit/9c71064ed1

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 2f0d0cd417 | (Nicholas Clark)++ | 6 files

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Convert `container_registry` to an MVMFixKeyHashTable

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: `container_registry` is now an MVMFixKeyHashTable with static storage.

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Add a `name` member to `MVMContainerConfigurer`, and the three instances of

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: it are no longer `const`

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: As the hash keys can now be permarooted, this eliminates an iterator loop

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: from `MVM_gc_root_add_instance_roots_to_worklist`.

[09:47] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: review: https://github.com/MoarVM/MoarVM/commit/2f0d0cd417

[09:52] <Nicholas> Spotted two fixups needed in commit messages, so there's about to be a --force-with-lease

[09:52] <Geth> Â¦ MoarVM: nwc10++ created pull request #1533: Container registry to MVMFixKeyHashTable

[09:52] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1533

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 1d2091cd2b | (Nicholas Clark)++ | 2 files

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Remove `MVM_6model_add_container_config` from MoarVM's public API.

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Rakudo eliminated its Scalar container descriptor in April 2020, which was

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: the only remaining external user for this (rakudo/rakudo@4221f8225fea).

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Hence we no longer need to expose or export this. As the only MoarVM callers

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: are in the same file, we can go further and convert it to a static function.

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: review: https://github.com/MoarVM/MoarVM/commit/1d2091cd2b

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 52d1e553bf | (Nicholas Clark)++ | 4 files

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Simplify `add_container_config` and remove `mutex_container_registry`.

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: `MVM_6model_containers_setup` is the only code that writes to

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: `container_registry`. It is only called from `MVM_6model_bootstrap`

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: which is called from `MVM_vm_create_instance`, meaning modification only

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: happens during VM instance setup, which is single threaded. After this

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: `container_registry` is immutable. Hence it no longer needs a mutex to

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: protect access, so remove `mutex_container_registry` and all the code

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: that supports it.

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: review: https://github.com/MoarVM/MoarVM/commit/52d1e553bf

[09:53] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 26b2d6fa31 | (Nicholas Clark)++ | 6 files

[09:54] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Convert `container_registry` to an MVMFixKeyHashTable.

[09:54] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 

[09:54] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: `container_registry` is now an MVMFixKeyHashTable with static storage.

[09:54] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: Add a `name` member to `MVMContainerConfigurer`, and the three instances of

[09:54] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: it are no longer `const`.

[09:54] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: 

[09:54] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: As the hash keys can now be permarooted, this eliminates an iterator loop

[09:54] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: from `MVM_gc_root_add_instance_roots_to_worklist`.

[09:54] <Geth> Â¦ MoarVM/container_registry-to-MVMFixKeyHashTable: review: https://github.com/MoarVM/MoarVM/commit/26b2d6fa31

[09:55] *** MasterDuke_ joined
[09:56] <MasterDuke_> nine: nope, I completely missed that there were any exit()-related changes in that

[10:07] *** MasterDuke_ left
[10:11] <nine> PSA: I know what causes the segfault in t/spec/S03-operators/short-circuit.t:101 dogbert11++ reported (empty BB). Fix is probably simple (just look further for instructions) but I'm investigating if we couldn't do better in the first place (avoid those empty BBs)

[10:19] *** rakuUser joined
[10:54] <dogbert11> impressive amount of action here today

[11:15] <nine> The weekend can't stop us!

[12:00] <jnthnwrthngtn> nine: Glad to trade in one bug fix from me for a bunch from you :D

[12:01] <jnthnwrthngtn> nine: Is all that remains with hllize now to rip out the legacy implementation?

[12:02] *** reportable6 left
[12:03] <jnthnwrthngtn> Hmm, why on earth did no checks run on https://github.com/MoarVM/MoarVM/pull/1533 ?

[12:04] <Geth> Â¦ MoarVM/new-disp: 4 commits pushed by (Nicholas Clark)++, (Jonathan Worthington)++

[12:04] <Geth> Â¦ MoarVM/new-disp: 1d2091cd2b | Remove `MVM_6model_add_container_config` from MoarVM's public API.

[12:04] <Geth> Â¦ MoarVM/new-disp: 52d1e553bf | Simplify `add_container_config` and remove `mutex_container_registry`.

[12:04] <Geth> Â¦ MoarVM/new-disp: 26b2d6fa31 | Convert `container_registry` to an MVMFixKeyHashTable.

[12:04] <Geth> Â¦ MoarVM/new-disp: 48077af23f | Merge pull request #1533 from MoarVM/container_registry-to-MVMFixKeyHashTable

[12:04] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/compare/7566af62b209...48077af23fdf

[12:04] <jnthnwrthngtn> I trust Nicholas++ to have made sure it all compiles, anyways :)

[12:05] <nine> jnthnwrthngtn: there's still this one instance to get rid of: https://github.com/rakudo/rakudo/blob/master/src/vm/moar/Perl6/Ops.nqp#L192

[12:09] <jnthnwrthngtn> ah, ok

[12:11] <nine> The deeper I dig into the segfault, the more I wonder how MoarVM can execute anything at all successfully...

[12:13] <nine> So, the segfault happens, because an inlined graph is followed by an empty basic block. I figure, it'd be nicer to just get rid of those after we eliminate instructions (thus getting a simpler graph). I can use merge_bbs which not only gets rid of those empty BBs but makes the graph even simpler, right?

[12:14] <nine> Only that merge_bbs apparently does not know anything about instructions that have to end a BB like throwish or invokish ops. It relies solely on having multiple successors to stop merging.

[12:15] <nine> But an MVM_OP_sp_runbytecode_v doesn't require multiple successors. And ah, there's return_o as well, which definitely needs to end a BB.

[12:16] <nine> So why don't merge_bbs' shortcomings cause explosions all the time?

[12:21] <jnthnwrthngtn> nine: Probably because nothing that happens after the point they are merged actually cares. I mean, there's no concept of basic blocks in bytecode or machine code.

[12:22] <jnthnwrthngtn> So this all innevitably gets erased anyway. It's just a question of when

[12:23] <jnthnwrthngtn> iirc, merge_bbs happens as one of the final steps

[12:24] <jnthnwrthngtn> (If you decide to start calling it at an earlier time, this may of course have consequences.)

[12:28] *** squashable6 left
[12:46] *** frost left
[13:23] <Nicholas> jnthnwrthngtn: something recently fixed the Rakudo setting build - it now works (again) with MVM_SPESH_NODELAY=1

[13:23] <Nicholas> I'm guessing that it was your most recent commit, but I have not checked

[14:05] *** reportable6 joined
[14:05] *** TempIRCLogger left
[14:09] <nine> jnthnwrthngtn: merge_bbs is kind of in the middle. It's still followed by pea and the post_inline_pass

[14:14] *** cognominal left
[14:14] *** cognominal joined
[14:32] *** squashable6 joined
[14:40] <dogbert11> nine: there's another bug waiting if you manage to fix that SEGV :)

[14:54] <Nicholas> jnthnwrthngtn: yes, fixed. *Before*, setting build failed like this:

[14:54] <Nicholas> Stage start      :   0.002

[14:54] <Nicholas> Error while compiling, type X::Comp::NYI

[14:54] <Nicholas>   feature: is default on shaped Scalar

[14:54] <Nicholas>  at line 79755, near ";\n\n    if "

[14:54] <Nicholas>    at gen/moar/stage2/NQPHLL.nqp:1053  (/home/nick/Sandpit/moar-SAN/share/nqp/lib/NQPHLL.moarvm:panic)

[14:54] <Nicholas> ...

[14:55] <Nicholas> commit 7566af62b2093947b48c6646d95134a3ce16f04f fixes this

[15:08] <nine> So, I now got both the trivial fix and the supposedly more elegant fix by way of merge_bbs working. I'm not sure how to proceed though. I like the merge_bbs fix more, but I'm not 100 % sure it will work in all cases. If the empty BB has multiple predecessors, merge_bbs can still not eliminate it.

[15:09] <nine> I'm inclined to commit both. The trivial fix for making it 100 % safe and the merge_bbs fix because I really do like the shorter spesh dumps.

[15:27] <nine> dogbert11: what's the other SEGV?

[15:28] <dogbert11> it's not a SEGV this time

[15:28] <dogbert11> lang-call cannot invoke object of type 'VMNull' belonging to no language

[15:29] <dogbert11> to repro, set the nursery to, say 16k, and run 'MVM_SPESH_NODELAY=1 ./rakudo-m -Ilib t/spec/S02-types/range.t' a few times

[15:35] <dogbert11> the error should show up rather quickly ...

[15:51] <Geth> Â¦ MoarVM/new-disp: d678b12069 | (Stefan Seifert)++ | src/spesh/inline.c

[15:51] <Geth> Â¦ MoarVM/new-disp: Fix segfault when inlined frame is followed by an empty BB

[15:51] <Geth> Â¦ MoarVM/new-disp: 

[15:51] <Geth> Â¦ MoarVM/new-disp: Successful optimization can lead to basic blocks that are void of any

[15:51] <Geth> Â¦ MoarVM/new-disp: instructions. When we inline a callee and the BB containing the call was

[15:51] <Geth> Â¦ MoarVM/new-disp: followed by such an empty BB, we would run into a segfault when trying to

[15:51] <Geth> Â¦ MoarVM/new-disp: add an INLINE_END annotation onto the instruction following the inlined

[15:51] <Geth> Â¦ MoarVM/new-disp: call.

[15:51] <Geth> Â¦ MoarVM/new-disp: 

[15:51] <Geth> Â¦ MoarVM/new-disp: Fix by looping through the BB chain until we find an instruction to annotate.

[15:51] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/d678b12069

[15:51] <Geth> Â¦ MoarVM/new-disp: 507fa884db | (Stefan Seifert)++ | 3 files

[15:51] <Geth> Â¦ MoarVM/new-disp: Fix overzealous merge_bbs

[15:51] <Geth> Â¦ MoarVM/new-disp: 

[15:51] <Geth> Â¦ MoarVM/new-disp: merge_bbs did not take into account that some instructions like invocations,

[15:51] <Geth> Â¦ MoarVM/new-disp: returns, etc. have to end a BB. This did not lead to any verifyable bugs yet,

[15:52] <Geth> Â¦ MoarVM/new-disp: but it seems prudent to make it more correct, so we don't stumble when

[15:52] <Geth> Â¦ MoarVM/new-disp: rearranging things at some point in the future.

[15:52] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/507fa884db

[17:56] *** linkable6 left
[17:56] *** evalable6 left
[17:57] *** linkable6 joined
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:28] *** rakuUser left
[18:29] *** rakuUser joined
[18:30] *** rakuUser left
[18:34] *** MasterDuke92 joined
[18:38] <MasterDuke92> the weekend might not be able to stop us, but maybe the sheriff of Nottingham can (on holiday at Sherwood Forest)

[18:39] <MasterDuke92> nine: my approach in https://github.com/MoarVM/MoarVM/pull/1532 is a bit different than yours in more-asan-fixes, do you have a preference for which?

[18:58] *** evalable6 joined
[19:24] *** TempIRCLogger joined
[19:41] *** MasterDuke92 left
[20:38] *** rakuUser joined
[21:03] *** rakuUser1 joined
[21:06] *** rakuUser1 left
[21:16] *** rakuUser left
[22:19] *** shareable6 left
[22:19] *** linkable6 left
[22:19] *** benchable6 left
[22:19] *** squashable6 left
[22:19] *** nativecallable6 left
[22:19] *** notable6 left
[22:19] *** quotable6 left
[22:19] *** bloatable6 left
[22:19] *** releasable6 left
[22:19] *** committable6 left
[22:19] *** reportable6 left
[22:19] *** unicodable6 left
[22:19] *** evalable6 left
[22:19] *** bisectable6 left
[22:19] *** sourceable6 left
[22:19] *** greppable6 left
[22:19] *** tellable6 left
[22:19] *** coverable6 left
[22:19] *** statisfiable6 left
[22:19] *** sourceable6 joined
[22:19] *** notable6 joined
[22:19] *** squashable6 joined
[22:20] *** nativecallable6 joined
[22:20] *** greppable6 joined
[22:21] *** linkable6 joined
[22:21] *** benchable6 joined
[22:21] *** releasable6 joined
[22:22] *** committable6 joined
[22:22] *** bisectable6 joined
[22:36] *** rakuUser joined
[23:19] *** bloatable6 joined
[23:19] *** unicodable6 joined
[23:19] *** coverable6 joined
[23:20] *** tellable6 joined
[23:20] *** quotable6 joined
[23:21] *** statisfiable6 joined
