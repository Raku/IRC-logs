[00:27] *** lizmat left
[01:09] *** MasterDuke left
[01:41] *** Kaiepi joined
[02:07] *** lizmat joined
[06:29] *** frost-lab joined
[06:39] *** patrickb joined
[06:52] <patrickb> Good *ning!

[07:10] *** Geth left
[07:12] *** domidumont joined
[07:58] *** ChanServ left
[07:58] *** camelia left
[07:58] *** samcv left
[07:58] *** klapperl left
[07:58] *** domidumont left
[07:58] *** releasable6 left
[07:58] *** tellable6 left
[07:58] *** statisfiable6 left
[07:58] *** notable6 left
[07:58] *** bisectable6 left
[07:58] *** evalable6 left
[07:58] *** benchable6 left
[07:58] *** nebuchadnezzar left
[07:58] *** nwc10 left
[07:58] *** mtj left
[07:58] *** eater left
[07:58] *** vrurg left
[07:58] *** dogbert17 left
[07:58] *** krunen left
[07:58] *** nativecallable6 left
[07:58] *** bloatable6 left
[07:58] *** coverable6 left
[07:58] *** shareable6 left
[07:58] *** unicodable6 left
[07:58] *** committable6 left
[07:58] *** sourceable6 left
[07:58] *** squashable6 left
[07:58] *** quotable6 left
[07:58] *** greppable6 left
[07:58] *** rba left
[07:58] *** leedo left
[07:58] *** moon-child left
[07:58] *** sxmx left
[07:58] *** mst left
[07:58] *** avar left
[07:58] *** linkable6 left
[07:58] *** chansen_ left
[07:58] *** kawaii left
[07:58] *** Altreus left
[07:58] *** ugexe left
[07:58] *** bonsaikitten left
[07:58] *** jnthn left
[07:58] *** tbrowder left
[07:58] *** SmokeMachine left
[07:58] *** cog_ left
[07:58] *** nine left
[07:58] *** patrickb left
[07:58] *** frost-lab left
[07:58] *** leont left
[07:58] *** japhb left
[07:58] *** jjatria left
[07:58] *** Kaiepi left
[07:58] *** tobs left
[07:58] *** Voldenet left
[07:58] *** BinGOs left
[07:58] *** jraspass left
[07:58] *** [Coke] left
[07:58] *** harrow left
[07:58] *** sivoais left
[07:58] *** timotimo left
[07:58] *** bartolin_ left
[07:58] *** lizmat left
[07:58] *** sena_kun left
[07:58] *** rypervenche left
[07:58] *** jpf1 left
[07:58] *** moritz_ left
[08:06] *** nine joined
[08:06] *** cog_ joined
[08:06] *** harrow joined
[08:06] *** SmokeMachine joined
[08:06] *** tbrowder joined
[08:06] *** jnthn joined
[08:06] *** bonsaikitten joined
[08:06] *** ugexe joined
[08:06] *** Altreus joined
[08:06] *** chansen_ joined
[08:06] *** linkable6 joined
[08:06] *** avar joined
[08:06] *** mst joined
[08:06] *** sxmx joined
[08:06] *** patrickb joined
[08:06] *** leont joined
[08:06] *** japhb joined
[08:06] *** jjatria joined
[08:06] *** nativecallable6 joined
[08:06] *** bloatable6 joined
[08:06] *** coverable6 joined
[08:06] *** shareable6 joined
[08:06] *** unicodable6 joined
[08:06] *** committable6 joined
[08:06] *** sourceable6 joined
[08:06] *** squashable6 joined
[08:06] *** quotable6 joined
[08:06] *** greppable6 joined
[08:06] *** rba joined
[08:06] *** leedo joined
[08:06] *** moon-child joined
[08:06] *** bartolin_ joined
[08:06] *** camelia joined
[08:06] *** [Coke] joined
[08:06] *** jraspass joined
[08:06] *** BinGOs joined
[08:06] *** Voldenet joined
[08:06] *** tobs joined
[08:06] *** Kaiepi joined
[08:06] *** sena_kun joined
[08:06] *** lizmat joined
[08:06] *** mtj joined
[08:06] *** moritz_ joined
[08:06] *** jpf1 joined
[08:06] *** rypervenche joined
[08:06] *** krunen joined
[08:06] *** dogbert17 joined
[08:06] *** rajaniemi.freenode.net sets mode: +o mst

[08:06] *** vrurg joined
[08:06] *** eater joined
[08:06] *** klapperl joined
[08:06] *** samcv joined
[08:06] *** nwc10 joined
[08:06] *** nebuchadnezzar joined
[08:06] *** benchable6 joined
[08:06] *** evalable6 joined
[08:06] *** bisectable6 joined
[08:06] *** notable6 joined
[08:06] *** statisfiable6 joined
[08:06] *** tellable6 joined
[08:06] *** releasable6 joined
[08:06] *** domidumont joined
[08:06] *** ChanServ joined
[08:06] *** rajaniemi.freenode.net sets mode: +o ChanServ

[08:07] *** frost-lab joined
[08:09] *** kawaii joined
[08:15] *** brrt joined
[08:20] *** frost-lab left
[08:20] *** frost-lab joined
[08:22] *** zakharyas joined
[08:32] *** sena_kun left
[08:34] *** sena_kun joined
[08:35] *** squashable6 left
[08:36] *** squashable6 joined
[08:45] <dogbert17> nine++, nice bughunting yesterday

[08:46] <dogbert17> and hello brrt :)

[08:49] *** sivoais joined
[08:49] *** timotimo joined
[08:49] <dogbert17> oh, it's timotimo

[08:49] <brrt> ohai dogbert17 and timotimo

[08:50] <patrickb> o/

[08:50] <dogbert17> hello brrt, are you interested in some light work?

[08:53] <dogbert17> if so you might want to take a look at https://github.com/MoarVM/MoarVM/pull/1465

[08:54] *** sivoais left
[08:54] *** sivoais joined
[09:02] <nwc10> good *, #moarvm 

[09:02] <nwc10> has anyone mentioned t/spec/S32-temporal/juliandate.t yet?

[09:12] *** brrt left
[09:26] <jnthn> good *

[09:27] <jnthn> nwc10: I've not seen a mention of that here, though I'm sure I saw some recent Rakudo issues about date stuff...

[09:27] <nwc10> with all the spesh nodelay stuff, for some runs, it can wedge a CPU at 100%

[09:27] <nwc10> seeming same backtrace (deep down in arrays from the JIT)

[09:27] <nwc10> different subtest numbers at which it hangs

[09:28] <nwc10> have not investigated furtehr

[09:29] <nwc10> need to write a mail to shut up/shut down the well meaning but, um, this is logged right, ignorant person writing Perl 5 threading fan fiction on p5p

[09:29] <nwc10> https://lwn.net/Articles/754577/ and https://lwn.net/Articles/754163/ are interesting. Not directly releveant

[09:30] <nwc10> (Python, the GIL, other optimisations tried)

[09:30] <jnthn> That's a curious new genre of horror fan fiction, I guess... :)

[09:31] * jnthn looks ofrward to reading the mail

[09:31] <jnthn> uh, forward

[09:34] <nwc10> it might actually be sort of interesting, as it's sort of Off Topic, as a chunk of it is summarising "removing the Python GIL failed"

[09:48] *** zakharyas left
[09:57] *** zakharyas joined
[10:37] *** zakharyas left
[10:45] <nwc10> Oh my, got to https://chrisseaton.com/truffleruby/rubyconf16/rubyconf16-cexts.pdf -- 2.1 billion lines of code in RubyGems, 0.5 billion of it is C extension code

[10:46] <jnthn> Wow.

[10:47] <jnthn> I wonder what the CPAN ratio would be.

[10:49] <dogbert17> nwc10; it seems that t/spec/S32-temporal/juliandate.t has a tendency to gobble up all memory (I have 12 gig)

[11:14] * lizmat started a spectest last night, went to bed and found almost all applications OOMed

[11:15] <lizmat> except, curiosly, the IRC client

[11:24] *** brrt joined
[11:49] *** frost-lab left
[12:48] *** brrt left
[12:48] *** brrt` joined
[13:11] *** cog_ left
[13:12] *** cog joined
[13:38] <nwc10> https://www.youtube.com/watch?v=YLtjkP9bD_U

[13:38] <nwc10> is really fun.

[13:38] <nwc10> you can s/Ruby/Perl/ and it wouldn't be much different.

[13:39] <nwc10> and I did like the way that JRuby repeated the C Ruby extension API mistake. Oops. :-/

[13:39] <nwc10> I found it understandable at 1.5x speed

[13:51] <nwc10> https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259770.html -- you're not adding any value. Please stop.

[13:52] <nwc10> (to be clear, that's the TL;DR summary of my rather long message there, which is also about removing the Python GIL and some Ruby things)

[13:55] <[Coke]> Wow, that's an essay. :)

[14:00] * [Coke] watches a few minutes of the rubyconf youtube and has the takeaway: write more in rakudo, not C.

[14:09] *** zakharyas joined
[14:12] <jnthn> I had to read one part a couple of times because I was like "how can you have a problem running the same sub on two threads but not have a problem with recursion" :)

[14:12] <jnthn> Then realized I misunderstood the data structure that was described a few lines above, and it'd never occurred to me to implement it in that way.

[14:13] <jnthn> And now I'm curious if that design is how things worked out because recursion was once not supported.

[14:14] <nwc10> I don't think so. A lot of things changed from Perl 4 to Perl 5. I think that 1 => 2 and 2 => 3/4 were more incremental

[14:14] <nwc10> and I don't remember "Recursion" being in the "what's new for 5"

[14:16] <nwc10> (I claim that) there has been so much "noise" in that thread already we need some "signal" to balance it up

[14:21] <nwc10> I wonder if anyone is going to complain about the last github link I put in the message :-)

[14:45] *** patrickb left
[14:51] * [Coke] checks out v5 to see if how borked it is against a recent raku

[14:51] <[Coke]> (it uses Panda, so probably a bit.)

[15:17] *** domidumont left
[15:26] *** brrt` left
[15:28] <nwc10> [Coke]: that's probably a good thing to do (or at least scope out) - thanks for looking at it.

[15:30] <nwc10> But I fear that the person writing the perl 5 threading fan fiction didn't even acknolwedge my suggestion of (roughly) "maybe you want to prototype it in v5"

[15:31] <nwc10> I'm glad he's only saying "I remain confident someone out there will have an then it's progress." and not "I find your lack of faith disturbing"

[15:31] <nwc10> pants. retry

[15:31] <nwc10> I'm glad he's only saying "I remain confident someone out there will have an epiphany." and not "I find your lack of faith disturbing"

[15:31] <nwc10> anyway, we're having Eid next, aren't we? At some point...

[15:46] <jnthn> At some point.

[15:46] * jnthn is near the end of current big $dayjob project and looking forward to more time for new-disp and rakuast :)

[17:03] <dogbert17> here's what it looks like when t/spec/S32-temporal/juliandate.t hangs and gobbles up all memory: https://gist.github.com/dogbert17/73bad49a5f85167a0ba481c52bb6d925

[17:27] <lizmat> re use v5: after rakuast lands, that may be a thing to pursue again

[17:27] <lizmat> but not before that

[17:28] <lizmat> and the original issue of XS remains

[17:28] *** brrt` joined
[17:30] <nwc10> we just need to implement an LLVM IR interpreter in NQP. How hard could that be? :-)

[17:34] <lizmat> medium ?

[17:46] <leont> Given that Damian already implemented a p5 grammar in p5 regexps (PPR), a frontend to use v5 could be written with that as a starting point, even if there isn't any backend yet

[17:47] <lizmat> last time I asked Damian that question, he suggested against doing just that

[17:48] <lizmat> as there is apparently so much jumping through Perl hoops in there...

[17:48] <lizmat> but of course, if someone would like to go that avenue, more power to them!

[18:03] <nwc10> I'm astounded by the size of the team(s) working on TruffleRuby. It's not *literally* a cast of thousands

[18:03] <nwc10> But in the slides there are 16 people in the picture, 91 names in "Acknowledgements", and it sounded like 7 people directly working on it (in 2016)

[18:04] <brrt`> my (cynical) observation on the matter - by the time TruffleRuby makes Ruby fast, is fast ruby going to be relevant still (in a commercial sense)?

[18:04] <bonsaikitten> brrt`: if it's compatible enough ... I mean, there's tons of legacy ruby code out there that won't be rewritten

[18:04] <nwc10> unclear. You might know more of the state of things that I do. But it's 5 years since that and it's not taking over the world

[18:05] <nwc10> *and* Shopify, who now employ the speaker, seem to be funding other work on a JIT for MIR (er, technically YARV, isn't it)

[18:05] <nwc10> the IBM project mentioned in that talk seemed to die

[18:06] <nwc10> it seems to be a bit like a summary in a Python talk - naming all the abandoned projects to make python faster

[18:08] <[Coke]> hard for us to throw stones there.

[18:08] <[Coke]> (not that we should be throwing stones!)

[18:09] *** brrt` left
[18:09] <nwc10> yes-and-no. They have had seeming several researcher/developer decades poured into this.

[18:09] <nwc10> and they don't seem to be any nearer to world domination than we are

[18:13] <bonsaikitten> afaict there's not much PR for it, and no showcase / tech demo to attract people

[18:13] *** patrickb joined
[18:15] <nwc10> It's funded by Oracle. It doesn't *need* to attract contributors

[18:21] <jnthn> Yes, but it does need to attract *users*, who should do the migration work, and I think that probably breaks down in 3-ish ways of interest

[18:23] <jnthn> 1. Those doing bits of scripting and mostly running small throwawy things. If those are performance bound, it's low risk, but many such tasks aren't performance bound

[18:24] <jnthn> 2. Those with at lesat somewhat complex applications but who don't have the scale that they'll save significant amounts of money on servers etc. if they do migrate, and thus there's not much reward for the cost/risk.

[18:25] <jnthn> 3. Those who do have the scale. Shopify, for example. There's only so many of these.

[18:26] <moritz_> the real target market is those with high performance requirements but moderate complexity. If the complexity is too low, you could just do it in C. If it's too high, the risk of porting is also high

[18:26] <jnthn> I would imagine that for anyone with a non-trivial application, it'll never be a true "drop-in" replacement, because these things never are if you have enough gnarly stuff, which becomes innevitable with application size.

[18:28] <jnthn> It also seems to me that those ecosystems where competing compilers and VMs are commonplace achieved this relatively early in their language lifetime.

[18:31] <nwc10> it might also be that as Truffle and Graal are from Oracle, that folks don't trust the licencing. (ie, the price now might not stay that price)

[18:32] <jnthn> With C it's typical, but these days there's probably less C compilers that one's code could be expected to build on than a decade or so ago. JavaScript had the browser wars. Java had commercial JVM alternatives within 5-6 years.

[18:32] <jnthn> (I was actually expecting to write 10 years there, then went to check, and was surprised.)

[18:33] <jnthn> nwc10: In this particular case, yes, though I think the "it's hard to prise users off The Original if it's been The Only for long enough" holds up more widely.

[18:34] <nwc10> yes, and I'd not considered that until you mentioned it. Thanks for that insight. (And everyone else)

[18:46] *** MasterDuke joined
[19:06] <bonsaikitten> if it were a proper drop-in replacement the migration cost would be low

[19:07] <bonsaikitten> but there's usually some sharp edges to discover with the palm of your hand ;)

[19:10] <lizmat> looks like Rakudo's MoarVM bump of a9490436e649df95b34ff8b is the cause of the performance drop of test-t from 1.9 -> 2.3 seonds

[19:11] *** linkable6 left
[19:12] *** linkable6 joined
[19:12] <MasterDuke> hm, i think that's the one that moves the unicode hashtable to MVMInstance?

[19:13] <lizmat> anything merged after April 3 really

[19:14] <lizmat> 9b94bab9eb2803e19c46 could be ?

[19:14] <lizmat> logging actual deconting ?

[19:14] *** linkable6 left
[19:14] <MasterDuke> could be that too

[19:14] *** linkable6 joined
[19:14] <lizmat> I mean, it was not the backtrace fixes nine did

[19:15] <lizmat> afaics

[19:15] <lizmat> and the other fixes don't seem to be related to hot code

[19:19] <nine> m: say $*PERL.compiler.version

[19:19] <camelia> rakudo-moar b4813bbdb: OUTPUT: «v2021.03.142.gb.4813.bbdb␤»

[19:19] <nine> Camelia's up to date again :)

[19:19] <lizmat> whee!

[19:20] <nine> Firewall rules were just in the wrong order so NAT64 was not active for camelia

[19:21] <MasterDuke> btw, looks like geth is down again

[19:22] <MasterDuke> what's the quick way to run just test-t?

[19:23] <lizmat> raku -Ilib test-t.pl <hello.csv

[19:23] <lizmat> in the Text::CSV repo dir

[19:27] <lizmat> I use this to create the hello.csv file:

[19:27] <lizmat> $*OUT = open("hello999.csv",:w); say q/hello,","," ",world,"!"/ for ^10000

[19:30] <MasterDuke> yep. 1.4s at HEAD, 1.05s with 9b94bab9eb2803e19c46 reverted

[19:30] *** linkable6 left
[19:30] *** linkable6 joined
[19:31] <lizmat> ok, cool

[19:32] <lizmat> then I don't need to look further   :-)

[19:37] <MasterDuke> heh. with that reverted, there are 9k deopts. without it reverted, only 5 deopts

[19:38] <lizmat> yeah, not arguing it is doing  a good thing

[19:38] <lizmat> but apparently comes at a price :-(

[19:39] <MasterDuke> but...3,822,149 frames entered with the logging, only 1,752,809 after the revert

[19:39] <lizmat> ah, so it's setting something off elsewhere 

[19:39] <lizmat> ?

[19:39] <lizmat> that's more than 2x as many!

[19:40] <MasterDuke> so 2x more frames, 1800x fewer deopts

[19:41] <MasterDuke> frames (at least the ones added) are obviously much more costly

[19:43] <lizmat> so, is the "if (MVM_spesh_log_is_logging(tc))" introducing an extra frame ?

[19:43] <nine> no

[19:43] <lizmat> ok, didn't expect it to, but wanted to be sure

[19:43] <lizmat> so MoarVM frames rather than C frames

[19:43] <nine> yes :)

[19:44] <nine> It would be so useful to have more than just 1 benchmark, so we could see if the commit actually brings benefits as well

[19:44] <nine> Which it totally should

[19:46] <lizmat> agree...

[19:46] <MasterDuke> committable6:  9b94bab9eb2803e19c46~1,9b94bab9eb2803e19c46 my $v = -1; sub bar() { $v }; sub foo() { my $i = 0; for ^1_000_000 { $i += $v.abs } }; foo(); $v = -1.5; foo(); say now - INIT now

[19:46] <committable6> MasterDuke, ¦9b94bab9eb2803e19c46~1: «Cannot find this revision (did you mean “cb1fbf6”?)» ¦9b94bab: «Cannot find this revision (did you mean “353334f”?)»

[19:47] <MasterDuke> whoops, it doesn't know moarvm

[19:47] <MasterDuke> committable6:  a9490436e649df95b34ff8b~1,a9490436e649df95b34ff8b my $v = -1; sub bar() { $v }; sub foo() { my $i = 0; for ^1_000_000 { $i += $v.abs } }; foo(); $v = -1.5; foo(); say now - INIT now

[19:47] <committable6> MasterDuke, ¦a9490436e649df95b34ff8b~1: «3.429306905␤» ¦a949043: «5.43289969␤»

[19:48] <MasterDuke> that's an example i was using that had a ton of deopts before, almost none after

[19:49] <lizmat> but the one without deopts is the slower one, right?

[19:49] *** dogbert11 joined
[19:49] <MasterDuke> but somehow that perf difference seems greater than i remember. i feel i would have said something if i'd realized

[19:49] <MasterDuke> yeah

[19:50] <lizmat> is there a way to find out the amount of logging changed ?

[19:50] <lizmat> I mean, if the decont logging added would 10x the amount of logs, that could be an explanation ?

[19:51] <MasterDuke> or the different stats cause different optimized code to be genned

[19:52] <lizmat> deconting is a *very* often ocurring operation

[19:53] <lizmat> any method call will do one for self

[19:53] *** dogbert17 left
[19:54] *** brrt` joined
[19:54] <MasterDuke> that block is entered 22,180 times (when running time-t with a 10k csv file) with 9b94bab9eb2803e19c46 reverted

[19:55] *** linkable6 left
[19:55] <MasterDuke> 261,126 times at HEAD

[19:55] <MasterDuke> so yeah, ~10x more

[19:55] *** linkable6 joined
[19:57] *** brrt` left
[19:57] *** dogbert11 left
[19:59] <nine> I suggest reverting it for the release and investigate this thoroughly. Something just doesn't add up here

[20:01] <MasterDuke> i wonder if i'd see the same perf difference with a moarvm/rakudo from when i was first experimenting with that

[20:01] *** dogbert11 joined
[20:07] <MasterDuke> MVM_spesh_arg_guard_run and MVM_multi_cache_find_callsite_args are a bunch higher percent in a perf report at HEAD compared to with that commit reverted

[20:10] <MasterDuke> i think i've seen MVM_multi_cache_find_callsite_args pop up a bunch recently, but iirc jnthn said not to spend much time on since it'll change/go away with new-disp

[20:13] <nwc10> https://chrisseaton.com/truffleruby/deoptimizing/ -- set_trace_func can be implemented using the same technique as we did for monkey patched methods. Effectively we always have a Proc installed but it does nothing by default and is inlined, which means it generates no machine code. When a new Proc is installed it’s as if we are defining the current Proc, so the implementation is very similar.

[20:14] <nwc10> might already be "obvious", but I liked the trick of having an implicit empty method and inlining it (to become nothing but deoptimisation metadata)

[20:16] *** dogbert17 joined
[20:17] <MasterDuke> i'm amazed by the performance of truffle stuff. even the very incomplete truffle branch of nqp is faster than regular jvm and moarvm backends at some things (and with a high enough iteration count)

[20:19] *** dogbert11 left
[20:19] <lizmat> incomplete implementations often are:  look what adding correct decont logging just did  :-)

[20:19] <MasterDuke> true, but incomplete also can mean unoptimized

[20:28] <lizmat> also true  :-)

[20:33] <MasterDuke> from the article nwc10 just posted: "deoptimization is relatively slow". the funny thing is hearing that (not just from there) is what prompted me on this remove-opts-if-too-many-deopts path, but so far i think i've made more things slower than faster...

[20:34] <lizmat> it's a slippery path  :-)

[20:38] * lizmat is too tired to code so calls it a day

[20:44] <jnthn> MasterDuke: Block entered more because of less inlining?

[20:45] <MasterDuke> In total, 1752809 call frames were entered and exited by the profiled code. Inlining eliminated the need to create 9522048 call frames (that's 84.45%).

[20:45] <MasterDuke> In total, 3822149 call frames were entered and exited by the profiled code. Inlining eliminated the need to create 7452708 call frames (that's 66.1%).

[20:45] <MasterDuke> looks like yes

[20:45] <jnthn> Eek, yes, that'll hurt

[20:46] <jnthn> Is this due to backing out things that deopt too much, or due to the extra decont logging?

[20:46] <jnthn> Or "don't know yet"?

[20:46] <MasterDuke> this is just the extra decont logging, not on the remove-opt branch

[20:47] <jnthn> Hmmm.

[20:47] <MasterDuke> the remove-opt branch wouldn't be any different in this case, because now with the extra logging there aren't many deopts in the first place

[20:48] <jnthn> Curious. Any idea how many more log entries the change results in?

[20:48] <MasterDuke> Of 11227425 specialized or JIT-compiled frames, there were 9903 deoptimizations (that's 0.09% of all optimized frames).

[20:48] <MasterDuke> Of 11225720 specialized or JIT-compiled frames, there were 5 deoptimizations (that's 0% of all optimized frames).

[20:48] <jnthn> Yeah, that's a quite low rate

[20:48] *** linkable6 left
[20:49] <MasterDuke> 10k is with decont logging the way it was before, 5 is after extra decont logging

[20:49] <jnthn> Could try tweaking the log sizes or number of outstanding log buffers a thread can have before it stops

[20:49] *** zakharyas left
[20:49] <jnthn> I think those are in src/spesh/log.h, but it's been a while :)

[20:50] <MasterDuke> cool, will play with that later (or probably tomorrow), off to watch falcon+winter soldier

[20:50] *** linkable6 joined
[20:50] <jnthn> Enjoy

[21:50] *** patrickb left
[22:13] <MasterDuke> jnthn: btw, don't think i exactly answered your question about how many log entries. assuming each call to MVM_spesh_log_decont creates one, then it's 22k (just from decont logging, no idea total) just logging actual deconts, 260k logging all cals

[22:13] <MasterDuke> *calls

[23:29] *** dogbert17 left
[23:31] *** dogbert17 joined
