[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:12] *** linkable6 left
[00:13] *** linkable6 joined
[02:16] *** squashable6 left
[02:19] *** squashable6 joined
[02:23] *** squashable6 left
[02:25] *** squashable6 joined
[02:53] *** linkable6 left
[02:56] *** linkable6 joined
[04:56] *** leedo left
[04:56] *** leedo joined
[05:24] *** dogbert17 left
[05:25] *** dogbert17 joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:33] *** patrickb joined
[07:00] *** patrickb left
[07:44] <Nicholas> good *, #moarvm 
[08:10] *** lizmat left
[08:10] *** lizmat joined
[08:11] <nine> Dry morning!
[08:26] *** Geth joined
[10:13] *** hankache joined
[10:56] *** hankache left
[11:00] <timo> and a dry morning to you
[11:01] *** sena_kun joined
[11:36] <sena_kun> I wonder if new-disp makes the CPU starved somehow, when I run spectest on master the load average is about 32 as it should be, but with new-disp it's about 6-7.
[11:36] <sena_kun> I suspect that's known as there is no optimizer yet.
[11:42] <lizmat> interesting...
[11:42] <lizmat> I don't really see how that would matter, though  
[11:50] <timo> i wonder what magic incantation you can use for perf to get info about this
[11:50] <timo> like, do you want to sample like cache wait times or so?
[11:51] *** AlexDaniel left
[11:54] *** AlexDaniel joined
[12:00] <sena_kun> timo, I don't think I want to, though I can if guided. I am obviously under-qualified to think about any of this, so just stating what I see as someone who has to run tests.
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:10] <nine> I don't think it can be cache waits, as those are too low level. Load average is the average number of processes that have been runnable from the scheduler's point of view in the given time frame.
[12:10] <nine> I don't think the scheduler knows when a process is waiting on memory. That changes much too fast and too often.
[12:11] <nine> So if load average is low despite many processes "running" many of them must be in sleep state, i.e. waiting for some external factor like a timer or connection or something like that.
[12:12] <nine> That's if there are that many processes in the first place. At least the Perl harness isn't actually that good at keeping many parallel processes busy.
[12:23] *** MasterDuke left
[12:56] *** TempIRCLogger joined
[13:08] *** dogbert17 left
[13:09] *** TempIRCLogger left
[13:12] *** dogbert17 joined
[13:16] *** MasterDuke joined
[13:17] <MasterDuke> jnthnwrthngtn: is there any LHF re speshing new-disp?
[13:23] <lizmat> feels it's time for a bump
[13:55] *** Kaiepi left
[13:55] *** Kaiepi joined
[14:01] <jnthnwrthngtn> MasterDuke: Not really; the first thing that's really to be done is switching spesh back on for calls that are dispatched using the new dispatch mechanism, and that's a bit all-or-nothing
[14:01] <jnthnwrthngtn> In the best case it's "adapt spesh logging and candidate selection to the new calling conventions"
[14:02] <jnthnwrthngtn> I hoped that p6sink becoming a dispatcher would be sorta LHF but I've got weird failures.
[14:04] <jnthnwrthngtn> oh gosh, I think I see what I've done, and that's subtle AF
[14:07] <jnthnwrthngtn> (For those curious: nqp::isconcrete will decont, but generating an isconcrete bytecode instruction directly will not, and this is relied upon in order to not sink things in containers.)
[14:17] <jnthnwrthngtn> Yay, with that twiddled it works. No more MAST::Call usage in Rakudo
[14:21] <MasterDuke> nice
[14:22] <jnthnwrthngtn> Next to change over the last invoke instructions emitted anywhere by the QAST compiler
[14:22] <jnthnwrthngtn> (those for invoking immediate blocks)
[14:23] <dogbert17> MasterDuke: there are still GC bugs lurking but perhaps Timo or Nine are fixing them as we speak :) 
[14:29] <timo> not me, nope
[14:54] <nine> dogbert17: there are? How to reproduce?
[14:55] *** linkable6 left
[14:55] *** evalable6 left
[14:57] *** linkable6 joined
[14:58] *** evalable6 joined
[15:00] *** discord-raku-bot left
[15:01] *** discord-raku-bot joined
[15:11] <dogbert17> nine: give me a sec ...
[15:21] <Geth> ¦ MoarVM/new-disp: 2bd41559a7 | (Jonathan Worthington)++ | lib/MAST/Nodes.nqp
[15:21] <Geth> ¦ MoarVM/new-disp: Remove MAST::Call and other invoke emitting bits
[15:21] <Geth> ¦ MoarVM/new-disp: 
[15:21] <Geth> ¦ MoarVM/new-disp: These are no longer used by NQP nor Rakudo running on new-disp.
[15:21] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/2bd41559a7
[15:22] <jnthnwrthngtn> Finally. That means almost everything is now running via the new dispatcher
[15:23] <jnthnwrthngtn> The remaining exception being NQP's multiple dispatch
[15:23] <nine> Niiiice :)
[15:23] <dogbert17> jnthnwrthngtn+++
[15:27] <jnthnwrthngtn> With no loss of passing tests/spectests, also :)
[15:32] <jnthnwrthngtn> I think I might do the NQP multiple dispatch next, to get it out of the way.
[15:34] <jnthnwrthngtn> There's not that much after that beyond being able to do the rebootstrap and start clearing some stuff up in MoarvM
[15:35] * sena_kun recalls a gist with a TODO list
[15:39] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/07/19/2021-29-scheduled-to-3/
[16:09] <jnthnwrthngtn> lizmat++
[16:34] <dogbert17> nine: one GC bug seems to be hiding in t/spec/S05-substitution/subst.t
[16:36] <dogbert17> I'm running with MVM_GC_DEBUG=1 and a nursery of 24000 bytes
[16:51] *** evalable6 left
[16:51] *** linkable6 left
[16:52] *** evalable6 joined
[16:53] *** linkable6 joined
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:21] *** sena_kun left
[18:30] <nine> dogbert17: that could be a hard one
[18:39] <nine> jnthnwrthngtn: I see an arg_info.arg.o pointing at fromspace. Same pointer is in the original ctx->arg_info.source[ctx->arg_info.map[arg_idx]]. But isn't source just the caller's work register list now?
[18:45] *** linkable6 left
[18:47] *** linkable6 joined
[19:11] <dogbert17> nine: so you managed to repro it then :)
[19:16] <nine> Well..."it". That file yields several different failure modes. So far I have tracked down one definite bug.
[19:19] <Geth> ¦ MoarVM/new-disp: 1db0f3bb9c | (Stefan Seifert)++ | src/disp/boot.c
[19:19] <Geth> ¦ MoarVM/new-disp: Fix another possible access to fromspace in boot_code
[19:19] <Geth> ¦ MoarVM/new-disp: 
[19:19] <Geth> ¦ MoarVM/new-disp: We also need to protect code from getting moved by the GC during the allocation
[19:19] <Geth> ¦ MoarVM/new-disp: in MVM_disp_program_record_track_arg.
[19:19] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1db0f3bb9c
[19:23] <nine> Now back to finding outdated pointers in registers
[19:26] *** dogbert11 joined
[19:27] *** dogbert17 left
[19:33] <dogbert11> Here's one of the failures:
[19:33] <dogbert11> #0  MVM_panic (exitCode=0, messageFormat=0x0) at src/core/exceptions.c:854
[19:33] <dogbert11> #1  0x00007ffff78acad6 in MVMHash_bind_key (tc=0x55555555aea0, st=0x5555555c8e48, root=0x5555556d3ca0, data=0x5555556d3cb8, key_obj=0x5555576b9450, value=..., kind=8) at src/6model/reprs/MVMHash.c:119
[19:33] <dogbert11> #2  0x00007ffff77dfb39 in MVM_args_slurpy_named (tc=0x55555555aea0, ctx=0x7ffff723c7a0) at src/core/args.c:1254
[19:42] <jnthnwrthngtn> nine: In simple cases, yes, source is the register list, however it may also be a chunk of memory in a flattening callstack record, or point into a capture if we are in the record phase, or if we can't use the args tail in a call it may also be a set of temporaries as written by the dispatch program
[19:44] <nine> That's quite a few places to check for proper GC marking
[19:51] <jnthnwrthngtn> Yes, although one can look at what kinds of records are on the call stack to get a hint
[19:58] <jnthnwrthngtn> Curious. I switched NQP's multiple dispatch to new-disp, which probably was the last thing that spesh could get its hands on to optimize. Despite that, the setting build got a bit faster.
[19:59] * lizmat smiles
[20:04] <MasterDuke> jnthnwrthngtn: btw, have you seen https://github.com/Raku/nqp/pull/732 ?
[20:07] <jnthnwrthngtn> MasterDuke: Yes, but forgot to review it. I just did so; it looks fine to me, so stuck an approve on it.
[20:07] *** dogbert17 joined
[20:07] <MasterDuke> cool, thanks
[20:08] <lizmat> any reason not to bump MoarVM at the moment ?
[20:09] *** dogbert11 left
[20:11] *** linkable6 left
[20:11] <MasterDuke> lizmat: don't think so
[20:11] <lizmat> ok, then will do so  in a few mins
[20:11] *** linkable6 joined
[20:16] <nine> jnthnwrthngtn: in dispatch_polymorphic don't we need to MVMROOT the collectables needed by the dispatch_initial call? Presumably those MVM_disp_program_run calls could lead to allocation, couldn't they?
[20:22] <jnthnwrthngtn> nine: In theory the dispatch programs should never allocate if they fail (and we try another one), although I've conservatively tweaked things elsewhere to root them anyway
[20:22] <nine> Oh...we do already
[20:22] <nine> No idea how I missed that
[20:22] <nine> Maybe it's time to call it a day after all :)
[20:23] <jnthnwrthngtn> Sigh, this is silly, though probably also my fault. We have *two* different things called NQPRegex.
[20:25] <jnthnwrthngtn> The NQP rebootstrap fails due to something in that area, but I think I should also call it a day 
[20:26] <MasterDuke> recovered from the 2nd shot?
[20:27] <jnthnwrthngtn> Well, this time around my arm didn't hurt at all. I rested all of Saturday, and on Sunday was like "ohh, I'm fine", walked ~6km, and felt totally knackered, and then woke up today wiped out.
[20:28] <jnthnwrthngtn> So...I guess not quite, but I might have been if I'd been more careful yesterday :)
[20:28] <Nicholas> rakudo new-disp gives me:
[20:28] <Nicholas> +++ Compiling   blib/Perl6/Optimizer.moarvm
[20:28] <Nicholas> getcodeobj needs a code ref at gen/moar/Ops.nqp:351  (blib/Perl6/Ops.moarvm:)
[20:28] <jnthnwrthngtn> Did you pull?
[20:28] <Nicholas> so something not quite right
[20:28] <Nicholas> I thought that I did
[20:28] <Nicholas> fail!
[20:28] <jnthnwrthngtn> Hm, it seems I pushed
[20:28] <Nicholas> I did pull
[20:28] <jnthnwrthngtn> ah, good
[20:29] <jnthnwrthngtn> ah, good
[20:29] <Nicholas> my fail,t hat is
[20:29] <Nicholas> I did pull
[20:29] <Nicholas> I didn't check it out
[20:29] <jnthnwrthngtn> oh :)
[20:29] <Nicholas> ^d'
[20:29] <jnthnwrthngtn> afk for now, maybe for the evening
[20:30] <Nicholas> sleep well
[21:11] *** evalable6 left
[21:11] *** linkable6 left
[21:13] *** evalable6 joined
[21:13] *** linkable6 joined
[21:22] *** MasterDuke left
[21:48] *** jgaz joined
[22:01] *** jgaz left
[22:29] *** dogbert17 left
[22:29] *** dogbert11 joined
