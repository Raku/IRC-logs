[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[01:06] *** lizmat left
[01:06] *** lizmat joined
[01:34] *** frost joined
[04:51] *** linkable6 left
[04:51] *** evalable6 left
[04:52] *** evalable6 joined
[05:22] *** frost left
[05:53] *** linkable6 joined
[06:02] *** linkable6 left
[06:02] *** reportable6 left
[07:08] <Nicholas> good *, #moarvm 

[08:05] *** reportable6 joined
[08:23] *** frost joined
[09:02] *** linkable6 joined
[10:12] *** discord-raku-bot left
[10:13] *** discord-raku-bot joined
[10:13] <jnthnwrthngtn> moarning o/

[10:18] <Nicholas> \o

[10:23] <lizmat>  o/o

[10:50] <MasterDuke> ahoy

[10:56] <MasterDuke> jnthnwrthngtn: if you backlog, there's some further discussion and information about that large difference between `is default(0)` and `= 0` 

[11:25] <nine> jnthnwrthngtn: do I understand your message correctly that you will ponder a bit how to handle continuations and MVM_callstack_first_frame_in_region? So no action required by me?

[11:27] <jnthnwrthngtn> nine: Well, my first thought is that we might need directional forms, e.g. the continuation root would want to look at the *next* region after the continuation mark. tbh, I assumed that a continuation record + a frame record would always fit in a single region

[11:27] <jnthnwrthngtn> I didn't really anticipate wanting to support a region so small that'd not work out :)

[11:28] <jnthnwrthngtn> But looking in the previous region would find a frame that is not part of the continuation

[11:29] <nine> If it just were crazy small regions, I'd not even have fixed it. But there's another way of causing us to exceed the one region: a crazy large frame. And that's quite possible with work being part of the frame now.

[11:38] <nine> What I don't understand: we expect the continuation record to be eventually followed by a frame. And that first frame we find is the one we're looking for. What difference does it make if that frame is in the same region or in the next one? IIUC the continuation takes hold of the whole rest of the region chain anyway.

[11:39] <nine> Is it possible that the frame we're looking for does not appear on the callstack at all and that we find some different frame further down the chain instead?

[11:39] <jnthnwrthngtn> Oh hang on, I misread it. :/ You really are looking in the *next* regiion. Somehow I'd read it as looking at the previous one.

[11:40] <nine> Aah...yes that next/prev had me confused as well at some point :)

[11:40] <nine> Darn stacks insisting on growing upwards and all

[11:40] <jnthnwrthngtn> Not sure how I managed that. Well, I am, I was already really tired by the time I got to the third PR. :)

[11:41] <jnthnwrthngtn> I'll take a closer look at it after lunch.

[11:41] <nine> Well...downwards actually. But that way it demonstrates the confusion even better :D

[11:41] <jnthnwrthngtn> Which I'll disappear for nwo; bbiab :)

[11:41] <jnthnwrthngtn> *now

[11:41] <nine> enjoy!

[11:59] <dogbert17> MoarVM panic: Adding pointer 0x555d62d3b158 to past fromspace to GC worklist # hmm

[11:59] *** linkable6 left
[11:59] <dogbert17> when running: MVM_SPESH_BLOCKING=1 ./rakudo-m -Ilib t/spec/S32-str/indent.rakudo.moar , nursery size is 11k

[12:00] <dogbert17> perhaps something for nine :)

[12:02] *** reportable6 left
[13:00] *** linkable6 joined
[13:04] *** reportable6 joined
[13:10] <dogbert17> h, I forgot the gist, https://gist.github.com/dogbert17/9bf6d86d03b424c300829bad6b3dafee

[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[22:28] *** evalable6 left
[22:28] *** linkable6 left
[23:29] *** evalable6 joined
[23:31] *** linkable6 joined
