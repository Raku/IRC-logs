[00:52] *** lucasb left
[01:14] *** sena_kun left
[01:17] *** sena_kun joined
[02:02] *** Kaiepi joined
[02:12] *** Kaiepi left
[02:12] *** Kaiepi joined
[02:40] *** Kaiepi left
[02:41] *** Kaiepi joined
[03:06] *** Kaiepi left
[03:06] *** Kaiepi joined
[04:22] *** linkable6 left
[04:22] *** squashable6 left
[04:22] *** bisectable6 joined
[04:22] *** sourceable6 joined
[04:22] *** greppable6 joined
[04:22] *** committable6 joined
[04:23] *** nativecallable6 joined
[04:23] *** statisfiable6 joined
[04:23] *** unicodable6 joined
[04:24] *** evalable6 joined
[04:24] *** shareable6 joined
[04:24] *** benchable6 joined
[04:24] *** coverable6 joined
[04:24] *** quotable6 joined
[04:24] *** squashable6 joined
[04:25] *** tellable6 joined
[04:25] *** linkable6 joined
[05:25] *** shareable6 left
[05:25] *** linkable6 left
[05:25] *** nativecallable6 left
[05:25] *** benchable6 left
[05:25] *** tellable6 left
[05:25] *** committable6 left
[05:25] *** evalable6 left
[05:25] *** unicodable6 left
[05:25] *** sourceable6 left
[05:25] *** squashable6 left
[05:25] *** bisectable6 left
[05:25] *** coverable6 left
[05:25] *** quotable6 left
[05:25] *** statisfiable6 left
[05:25] *** greppable6 left
[05:26] *** nativecallable6 joined
[05:26] *** tellable6 joined
[05:26] *** benchable6 joined
[05:26] *** notable6 joined
[05:26] *** greppable6 joined
[05:26] *** unicodable6 joined
[05:26] *** committable6 joined
[05:27] *** squashable6 joined
[05:27] *** coverable6 joined
[05:27] *** shareable6 joined
[05:27] *** bisectable6 joined
[05:27] *** quotable6 joined
[05:27] *** sourceable6 joined
[05:28] *** statisfiable6 joined
[05:28] *** evalable6 joined
[05:28] *** linkable6 joined
[07:26] *** eaterof left
[07:52] *** domidumont joined
[08:33] *** zakharyas joined
[08:48] *** MasterDuke joined
[09:12] *** eater joined
[09:33] <nwc10> good *, #moarvm 

[09:36] <MasterDuke> just thinking out loud here, i've added a bunch of `MVM_gc_worklist_add(tc, worklist, <something related to spesh candidates>);`. are there any places i definitely should not have?

[09:43] <MasterDuke> also. https://github.com/MoarVM/MoarVM/pull/1344 in it's current state is fine (just convert MVMSpeshCandidate to a REPR). i've been working locally on that branch to add the removing of an opt if there are too many deopts (this is what's causing segfaults/MVM_panics). should i keep working on this branch and then have the PR include both changes?

[09:43] <MasterDuke> or does it make sense to merge the PR as is, and then have a new one for removing opts?

[10:20] <jnthn> Probably makes sense to review/merge the PR separately

[10:20] <jnthn> And then another one for the deopt bit

[10:21] <jnthn> I can't think of a reason not to add a reference to a collectable.

[10:22] <MasterDuke> good and good

[10:23] <MasterDuke> has anybody looked at the PR? i'm inclined to rebase/squash all the commits down in to one and then take it out of draft status

[10:24] <jnthn> I only looked when I was trying to help find problems 

[10:25] <nine> same here

[10:25] <jnthn> +1 to tidying it up and taking it out of draft; I'll have a look over it

[10:25] <MasterDuke> there's the initial largish commit, and then some followup smaller ones that don't have very descriptive messages

[10:27] <MasterDuke> i'll give them more descriptive messages for now, but leave them in, and then reviewers can decide if they should be squashed (the reason i mildly argue for squashing is that while moarvm builds on each of them, nqp and/or rakudo has some problem)

[10:29] <jnthn> OK, thanks. Good to get this change in well ahead of a release.

[10:30] * jnthn continues on with the dispatch resumption

[11:05] <MasterDuke> hm. now the git fun begins. i have my branch with newly rebased commits, plus commits i don't want to push. i guess i can force push up to the ones i don't want yet, then move them onto a new branch for the eventual next PR

[11:08] *** MasterDuke left
[11:08] *** MasterDuke joined
[11:18] <MasterDuke> ok, https://github.com/MoarVM/MoarVM/pull/1344 is taken out of draft

[11:20] * MasterDuke is afk for a little while to go smear porridge on a baby's face, because said baby is not very skilled at eating said porridge

[11:42] <Geth> Â¦ MoarVM/new-disp: a15e237adf | (Jonathan Worthington)++ | 5 files

[11:42] <Geth> Â¦ MoarVM/new-disp: First steps towards resume initialization state

[11:42] <Geth> Â¦ MoarVM/new-disp: 

[11:42] <Geth> Â¦ MoarVM/new-disp: The resume initialization state is the state that a dispatcher indicates

[11:42] <Geth> Â¦ MoarVM/new-disp: as being needed in order to start a resumption of a dispatch. From the

[11:42] <Geth> Â¦ MoarVM/new-disp: perspective of the dispatch program, it's another place to obtain some

[11:42] <Geth> Â¦ MoarVM/new-disp: values. This gets us to the point of handling the simplest case of the

[11:42] <Geth> Â¦ MoarVM/new-disp: resume initialization state (that is, where it precisely matches the

[11:42] <Geth> Â¦ MoarVM/new-disp: <â€¦commit message has 5 more linesâ€¦>

[11:42] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a15e237adf

[12:15] *** sena_kun left
[12:15] *** Altai-man_ joined
[12:24] *** zakharyas left
[12:49] *** linkable6 left
[12:52] *** linkable6 joined
[14:26] *** MasterDuke left
[14:27] *** MasterDuke joined
[14:47] *** Kaiepi left
[14:47] *** Kaiepi joined
[15:18] *** Kaiepi left
[15:19] *** Kaiepi joined
[15:20] <jnthn> aww, no geth

[15:46] *** domidumont left
[15:46] <lizmat> yeah...  seems like all of a sudden there's an issue setting up an SSL connection to Freenode  :-(

[15:47] <lizmat> tyil has no time to look at it right now

[15:48] *** domidumont joined
[15:55] <jnthn> ah, ok

[16:50] <jnthn> Phew, finally, the first working case of a dispatch program that handles a dispatch resumption.

[16:54] <jnthn> Now let's see how what's left of my brain handles language class... :)

[16:56] <MasterDuke> better than depending on the right side...

[18:14] *** MasterDuke left
[18:14] <jnthn> :P

[18:26] *** domidumont left
[18:35] *** squashable6 left
[18:36] *** squashable6 joined
[19:55] <nine> Ah, GILs are great. Half an our and I got use Inline::Perl5 <thread-safe>; do what it looks like

[19:57] <nine> Oh GILs suck. Kinda destroying the point of having multiple threads in the first place ;)

[19:57] *** Geth joined
[20:31] <jnthn> :)

[20:34] <nwc10> nine: are you paying attention to tanks in Texas?

[20:35] <nine> scrubbed for today, isn't it?

[20:35] <nwc10> nope.

[20:36] <nwc10> it's approved. And they started fueling it *before* they got the approval

[20:39] <nwc10> I think a more accurate answer than "nope" would have been "it got unscrubbed"

[20:40] <nine> Unscrubbed? Now that would be a first :)

[20:41] <nwc10> OK, it's completley unclear what is actually going to happen, but the tank farm is venting

[20:43] <nine> Meanwhile I actually got rid of the GIL and still have an (optionally) thread safe Inline::Perl5. Only now with scaling :)

[20:44] <nwc10> so this is sort of like the independent interpreters of ithreads, but with a proper system to orchestrate them?

[20:47] <nine> The use case I'm aiming at is using Perl 5 in a Cro application, i.e. non-communicating worker threads. I do this by mixing a role into $*THREAD and use it to attach a Perl 5 interpreter.

[20:48] <nine> Test script is: use Inline::Perl5 <thread-safe>; use TestFoo:from<Perl5>; my @p = do for ^15 { start { for ^100000 { TestFoo.new.test; } } } await(@p);

[21:10] *** Kaiepi left
[21:11] *** Kaiepi joined
[21:19] *** MasterDuke joined
[21:39] <lizmat> looks like it is detanking  :-(

[21:40] <nwc10> Yes. And it is completely confused as to what is going on. Other than "wet dress rehersal again - fooled you"

[21:41] <[Coke]> I also am confused by "wet dress rehearsal"

[21:42] <nwc10> you test the procedure for fuelling your rocket. With real fuel.

[21:45] <[Coke]> ah

[21:57] *** MasterDuke left
[21:58] *** MasterDuke joined
[23:35] *** kawaii left
[23:37] *** kawaii joined
