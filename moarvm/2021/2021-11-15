[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:07] *** patrickb left
[01:16] *** [Coke] left
[01:20] *** [Coke] joined
[03:03] *** frost joined
[05:02] *** benchable6 left
[05:02] *** nativecallable6 left
[05:02] *** releasable6 left
[05:02] *** reportable6 left
[05:02] *** greppable6 left
[05:02] *** committable6 left
[05:02] *** shareable6 left
[05:02] *** notable6 left
[05:02] *** unicodable6 left
[05:02] *** quotable6 left
[05:02] *** coverable6 left
[05:02] *** bloatable6 left
[05:02] *** bisectable6 left
[05:02] *** squashable6 left
[05:02] *** statisfiable6 left
[05:02] *** evalable6 left
[05:02] *** sourceable6 left
[05:02] *** tellable6 left
[05:02] *** linkable6 left
[05:03] *** bisectable6 joined
[05:03] *** nativecallable6 joined
[05:03] *** tellable6 joined
[05:03] *** committable6 joined
[05:04] *** notable6 joined
[05:04] *** squashable6 joined
[05:04] *** sourceable6 joined
[05:04] *** statisfiable6 joined
[05:05] *** bloatable6 joined
[05:05] *** linkable6 joined
[05:05] *** benchable6 joined
[05:05] *** evalable6 joined
[05:06] *** quotable6 joined
[06:03] *** unicodable6 joined
[06:04] *** reportable6 joined
[06:05] *** coverable6 joined
[07:03] *** shareable6 joined
[07:04] *** ilogger2 left
[07:04] *** jnthnwrthngtn left
[07:04] *** jnthnwrthngtn joined
[07:04] *** ilogger2 joined
[08:05] *** greppable6 joined
[08:49] <nine> timo: none at all. Apparently we didn't get any output at all, but also no error. Could it be that we don't manage to flush STDOUT on exit on Mac OS?

[09:33] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: 32 commits pushed by (Stefan Seifert)++, (Nicholas Clark)++

[09:33] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: review: https://github.com/MoarVM/MoarVM/compare/d38239d46c3e...ebb602a6e46c

[09:42] <dogbert17> nine: the bug you fixed, was that the occurs once in 10000 runs thingie?

[10:03] *** releasable6 joined
[10:47] <nine> dogbert17: no, I wish that one was as easy. The one I fixed is an Inline::Perl5 test failure that popped up after the new-special-return merge

[10:48] <dogbert17> I have a couple of bugs that are probably easier to deal with ... famous last words :)

[10:49] <jnthnwrthngtn> moarning o/

[10:49] <dogbert17> good morning jnthnwrthngtn, how was the curry yeasterday?

[10:50] *** discord-raku-bot left
[10:51] *** discord-raku-bot joined
[10:53] <jnthnwrthngtn> dogbert17: Delicious, although I probably ate too much of it. :)

[10:53] <dogbert17> so Prague has some excellent Indian restaurants then it seems

[10:58] <lizmat> the only place where /me has had excellent Indian food in Prague, was at jnthnwrthngtn's place  :-)

[11:08] <jnthnwrthngtn> nine: Everything fixed up in the nativecall PR(s)?

[11:12] <nine> jnthnwrthngtn: not yet. alloca and the comment about optimizer are still open

[11:12] <Geth> ¦ MoarVM: 8a91bf8eb0 | (Stefan Seifert)++ | src/core/interp.c

[11:12] <Geth> ¦ MoarVM: Fix JITed return from nested runloops

[11:12] <Geth> ¦ MoarVM: 

[11:12] <Geth> ¦ MoarVM: When a callback frame is completely JIT compiled, including a return_o, we did

[11:12] <Geth> ¦ MoarVM: not notice that it's time to exit the runloop. MVM_callstack_unwind_frame will

[11:12] <Geth> ¦ MoarVM: already have set tc->cur_frame to the frame that called the native routine that

[11:12] <Geth> ¦ MoarVM: in turn ran the callback and returned 0 to signal that the runloop should end.

[11:12] <Geth> ¦ MoarVM: This 0 got forwarded by MVM_frame_try_return but JIT compiled code does not

[11:12] <Geth> ¦ MoarVM: <…commit message has 8 more lines…>

[11:12] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8a91bf8eb0

[11:13] <Geth> ¦ MoarVM: 64f90d4652 | niner++ (committed using GitHub Web editor) | src/core/interp.c

[11:13] <Geth> ¦ MoarVM: Merge pull request #1601 from MoarVM/fix_jited_return_from_native_runloops

[11:13] <Geth> ¦ MoarVM: 

[11:13] <Geth> ¦ MoarVM: Fix JITed return from nested runloops

[11:13] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/64f90d4652

[11:14] <lizmat> bump time?

[11:38] *** Altai-man joined
[11:48] * lizmat takes that as a yes

[11:48] <nine> It's not a life changing decision anyway :)

[11:49] <lizmat> indeed, but it would unbreak the test-t Inline::Perl5 tests, no ?

[11:50] <nine> No, those are fixed in Inline::Perl5

[11:50] <lizmat> ah, but I didn't see that bumped?

[11:50] <nine> Indeed. I haven't done a new release yet

[11:51] <lizmat> ok, just checking  :-)

[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[13:06] *** Kaipi left
[13:07] *** Kaiepi joined
[13:34] *** frost left
[15:17] * [Coke] is playing Deus Ex: Mankind Divided at the moment, and is doing all the Prague missions. I wonder if I can see anyone's apartment from here...

[15:22] <timo> yesterday i saw someone from canada recount when in a movie the characters were shown running towards the exact movie theater that person was sitting in to watch the movie in question

[15:23] <timo> apparently they engage in an activity with their friends where they try to spot their apartment complex / building in movies, since filming around there seems to be common for some reason

[15:24] <timo> https://www.youtube.com/watch?v=aimZkOFqRPk - a five minute clip about "Maple Cringe"

[15:25] <timo> correction: they film lots of stuff in that exact building?

[15:32] * [Coke] notes that "at the moment" means as time permits, not right this actual moment. :)

[15:32] <timo> of course

[15:33] <timo> that's fair

[15:41] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: 32 commits pushed by (Stefan Seifert)++, (Nicholas Clark)++

[15:41] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: review: https://github.com/MoarVM/MoarVM/compare/ebb602a6e46c...b6d35f81dbc5

[16:07] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: dcefde605d | (Stefan Seifert)++ | 2 files

[16:07] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: Stack allocate args, free_strs and free_rws lists in native calls

[16:07] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: 

[16:07] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: Makes it faster and leaks less memory in case of exceptions. Risk of stack

[16:07] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: overflow is minimal because if you pass that many arguments, you could overflow

[16:07] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: the stack with a normal call as well.

[16:07] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: review: https://github.com/MoarVM/MoarVM/commit/dcefde605d

[16:27] <timo> we were leaking data in case of exceptions? :D

[16:31] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: 33 commits pushed by (Stefan Seifert)++, (Nicholas Clark)++

[16:31] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: review: https://github.com/MoarVM/MoarVM/compare/dcefde605d45...c8f497c92d77

[16:34] <nine> timo: actually we still are. The memory we allocate for rw args

[16:35] <nine> We don't if the native calls are JIT compiled though

[16:36] <timo> that's at least something

[16:36] <nine> So, all review comments for new-disp-nativecall are addressed and the branches are rebased

[18:00] <timo> oh yeah! SDL_SetRenderDrawColor($render, 0xff, 0xff, 0xff, 0x00) now has four const_i64 in front of the runnativecall op

[18:00] <timo> the getspeshslot ops for the Int objects are still there, because i imagine deopt requirements

[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:04] <timo> and runnativecall is also jitted to be basically just a regular-old call, if possible?

[18:06] <jnthnwrthngtn> I believe so, yes :)

[18:06] <jnthnwrthngtn> I'm curious how fast this is :)

[18:06] <jnthnwrthngtn> I'd imagine pretty decent

[18:06] <timo> this call only happens once per frame, and this runs at below 40fps due to what else it's doing :D

[18:07] <jnthnwrthngtn> No, I meant how fast C calls are now vs. before :)

[18:07] <timo> oh, of course

[18:07] <timo> needs a good benchmark of some sort

[18:18] <jnthnwrthngtn> nine: https://github.com/rakudo/rakudo/pull/4629/commits/69f9e90e517406956468838674af17f4ad8f6ef6 says it moves the EVAL to BEGIN time but I don't see how it achieves that?

[18:20] <jnthnwrthngtn> home time &

[18:23] *** Altai-man left
[18:32] <timo>       sp_runnativecall_i   r6(3),  r36(0), liti64(101212352),  r37(0),  r32(1),  r35(0),   r6(2)  # [048] BAIL: op <sp_runnativecall_i> (type of arg 2 (1) NYI)

[18:32] <timo> aww

[18:40] *** linkable6 left
[18:41] *** linkable6 joined
[18:44] <timo>       [Delayed temps to release: 9(0), 10(0), 11(0), 12(0), 13(0), 14(0), 15(0), 16(0), 17(0))]

[18:44] <timo>       sp_runnativecall_i  r18(0),  r11(0), liti64(72045936),  r12(0),  r13(0),  r14(0),  r15(0),  r16(0),  r17(0)

[18:44] <timo> ^- implemented dumping of the release regs annotation

[18:59] <Geth> ¦ MoarVM: 10e5344c3f | (Timo Paulssen)++ | src/spesh/dump.c

[18:59] <Geth> ¦ MoarVM: show annotation for delayed temps in spesh log

[18:59] <Geth> ¦ MoarVM: 

[18:59] <Geth> ¦ MoarVM: rather than just "unknown"

[18:59] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/10e5344c3f

[19:02] <nine> jnthnwrthngtn: oh darn....seems like I lost a BEGIN when trying around. And adding it breaks in far too interesting ways like "Premature heredoc consumption" or "When invoking 121 '', provided outer frame 0x4834d80 (159 '') does not match expected static frame 0x4830580 (153 '')"

[19:18] <jnthnwrthngtn> nine: OK, maybe we'll leave that opt for later then

[19:19] <nine> I may have a solution: moving the code into NativeCall::Dispatcher and requiring that module conditionally

[19:19] <nine> (in an EVAL)

[19:20] <nine> or even without EVAL

[19:24] <nine> Oh, that saves a LOT of time.

[19:24] <nine> Pushed a better version

[19:31] <timo> oh my

[19:31] <timo> meanwhile i'm teaching runnativecode's jit compilation to handle CArray arguments

[19:32] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/11/15/2021-46-cro-once-again/

[19:48] <timo> the jitted code we end up with for four const_i64 in a row followed by a runnativecall is still rather long, it puts the constant ints into the moar-registers, then reads them back out

[19:52] <timo> https://gist.github.com/timo/ff98e2f4cbcd40e7223fc9e8dacd4984 - this is roughly what that looks like

[19:54] <nine> timo: but, it already does?

[19:54] <timo> how so?

[19:56] <timo> i put the changes i made into the same gist so you can look-see

[19:56] <nine> https://github.com/MoarVM/MoarVM/blob/new-disp-nativecall-libffi/src/jit/graph.c#L3807

[19:56] <nine> Oh, sorry. CArray vs VMArray

[19:56] <nine> Carry on :D

[19:57] <timo> yep

[19:57] <timo> is it ok to push that patch to nativecall-new-disp-libffi?

[19:58] <timo> you may prefer a PR onto your PR :)

[20:12] *** patrickb joined
[20:43] <nine> just push :)

[20:52] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: 0746645817 | (Timo Paulssen)++ | 3 files

[20:52] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: teach jit of runnativecall about CArray arguments

[20:52] <Geth> ¦ MoarVM/new-disp-nativecall-libffi: review: https://github.com/MoarVM/MoarVM/commit/0746645817

[21:14] *** linkable6 left
[21:14] *** evalable6 left
[21:15] *** evalable6 joined
[21:16] *** linkable6 joined
[22:03] *** squashable6 left
[22:04] *** squashable6 joined
[22:14] <jnthnwrthngtn> m: say 1.47 / 2.55

[22:14] <camelia> rakudo-moar 95164a768: OUTPUT: «0.576471␤»

[22:15] <jnthnwrthngtn> I got curious and measured 100 million calls to the C abs function via NativeCall (I figure it's a very cheap function, so this mostly measures native call overhead).

[22:16] <jnthnwrthngtn> new-disp-nativecall does it in 58% of the time. That's quite a saving. :)

[22:20] <japhb> Wow, impressive work!  jnthnwrthngtn, did you test with libffi as well?  Or is that only for supporting other OSen?

[22:27] <jnthnwrthngtn> Impressive work on the part of nine++, that is. :)

[22:28] <jnthnwrthngtn> Didn't try that but I doubt it makes much difference, given that dyncall or libffi are only used during warmup, and then we JIT the calls

[22:34] <japhb>  jnthnwrthngtn: Ah, makes sense.  For some reason I thought there were still things that couldn't be JITted

[22:38] <jnthnwrthngtn> There are, but my example wasn't one of them :)

[22:45] <japhb> Heh, gotcha

[22:46] <jnthnwrthngtn> For comparison, Python ctyles does it in 12.9s

[22:46] <jnthnwrthngtn> *ctypes

[22:46] <japhb> m: say 12.9/1.47

[22:46] <camelia> rakudo-moar 95164a768: OUTPUT: «8.77551␤»

[22:47] <japhb> If the above is a fair comparison, that's awesome!

[22:47] <japhb> nine++

[22:49] <jnthnwrthngtn> Ruby's ffi extension fares a bit better, at 5.9s

[22:49] <jnthnwrthngtn> I dunno which are the "best" FFIs

[22:55] <jnthnwrthngtn> Perl with FFI::Platypus is 10.4s

[22:55] <jnthnwrthngtn> (Which is what is suggested to use when looking at the docs for the FFI module)

[23:47] *** ggoebel joined
[23:47] <ggoebel> jnthnwrthngtn: have you seen https://github.com/dyu/ffi-overhead

