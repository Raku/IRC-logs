[02:11] *** frost-lab joined
[05:24] <nwc10> good *, #moarvm 

[06:38] *** domidumont joined
[06:41] *** frost-lab left
[07:20] *** zakharyas joined
[08:12] *** sena_kun left
[08:13] *** sena_kun joined
[08:15] <Geth> Â¦ MoarVM: 9f82a46b4f | (Patrick BÃ¶ker)++ | azure-pipelines.yml

[08:15] <Geth> Â¦ MoarVM: Add a test configuration for MinGW on Windows

[08:15] <Geth> Â¦ MoarVM: 

[08:15] <Geth> Â¦ MoarVM: This uses the MinGW that is provided by the AzureCI `windows-2019` image.

[08:15] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9f82a46b4f

[08:15] <Geth> Â¦ MoarVM: f9a9a193f3 | (Nicholas Clark)++ (committed using GitHub Web editor) | azure-pipelines.yml

[08:15] <Geth> Â¦ MoarVM: Merge pull request #1385 from patrickbkr/test-mingw

[08:15] <Geth> Â¦ MoarVM: 

[08:15] <Geth> Â¦ MoarVM: Add a test configuration for MinGW on Windows

[08:15] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f9a9a193f3

[08:16] <nwc10> what could possibly go wrong? :-)

[08:18] *** domidumont left
[08:31] <MasterDuke> hasn't windows actually worked with '/' as the dir separator for a long time now? so in the cases where `${{ variables.PWSH_DEV }}` isn't needed, couldn't we combine the windows and non-windows tasks? e.g., https://github.com/MoarVM/MoarVM/blob/master/azure-pipelines.yml#L251-L260

[08:34] <MasterDuke> guess i can test it out...

[08:35] <nwc10> My understanding (from a decade ago) was that the only class of thing that didn't like / was command line tools

[08:35] <nwc10> (Thanks, CP/M for using / as the option character)

[08:35] <nwc10> (I might be wrong)

[08:35] <nwc10> but basically all the APIs were agnostic about / or \

[08:35] <nwc10> (I might be wrong)

[08:36] <nwc10> but if so, using / internally, and only switching to \ for "presentation to the user" and command line shells might simplify things

[08:38] <nwc10> rant/diregression - not totally relevant here - I get a bit frustrated with everyon goign "we must use File::Spec for portability" and I think "dudes, you think that you're portable but you are only thinking about directory separators and filenames. What about volumes? What about OSes that make distinctions between files and directories in their path syntax?"

[08:38] <nwc10> (and that's before we get to really strange setups like MVS and RISC OS)

[08:38] <nwc10> it's often faux-portability, at a cost of clarity

[08:41] <MasterDuke> what systems does File::Spec support? plan 9, haiku/beos? i haven't used those other than to spin up a vm once or twice, but istr they have weird file(system) stuff

[08:44] *** frost-lab joined
[08:45] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1483: Remove unnecessary Windows specific tasks from CI

[08:45] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1483

[08:48] <MasterDuke> you know, for testing this stuff i could comment out all the other unchanged jobs...should help getting feedback faster

[09:03] *** sena_kun left
[09:05] *** sena_kun joined
[09:22] <MasterDuke> oh, the nativecall tests compile stuff, so they need the dev powershell. well, we can at least combine the nqp test tasks...

[09:29] <jnthn> moarning o/

[09:31] *** frost-lab left
[09:44] <nwc10> \o

[09:51] <MasterDuke> crazy, on windows, moarvm takes longer to compile than rakudo

[09:54] <MasterDuke> https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=485&view=logs&j=1f3a7134-3b80-549a-eaff-49041f6b71c8&t=0f412ece-202f-5283-2af3-f5247c82120e&l=13 ha. well, conditionally setting the PWSH_DEV variable didn't work, but including it (even when set) in the linux builds doesn't actually break them...

[09:57] <MasterDuke> but not sure what's wrong with my conditional assignment https://docs.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#conditionally-assign-a-variable

[10:56] *** zakharyas left
[12:26] *** zakharyas joined
[12:34] *** MasterDuke left
[12:39] *** MasterDuke joined
[13:11] *** MasterDuke left
[13:13] *** MasterDuke joined
[13:24] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/837318227834699776/unknown.png who wants to guess what we're looking at here

[13:25] <MasterDuke> compiling rakudo's core setting?

[13:28] <jnthn> Are the big drops (full?) GC collections?

[13:28] <tellable6> 2021-04-29T10:47:48Z #raku-dev <Xliff> jnthn: Have any conservative idea on when to expect RakuAST on master?

[13:28] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/837319282907807744/memory_map_go_vrrrrrr.gif lovely to look at

[13:28] <timotimo> jnthn: not full :)

[13:29] <timotimo> check the y range, too, it's barely any amount

[13:29] <jnthn> I was trying to figure out the x range to decide full or not :)

[13:29] <timotimo> you can open the memory map, "restrict to time" and scrub the timeline, and it'll show what happens, so shiny

[13:29] <jnthn> But yeah, the y gives it away too

[13:30] <timotimo> this is the thread pool supervisor thread

[13:35] <jnthn> .tell Xliff Can't see it happening before Q4 this year; even when most features are there, we'll want all the opts to be too, plus there'll be lots of little details to do (and bug compat with the current compiler frontend)

[13:35] <tellable6> jnthn, I'll pass your message to Xliff

[13:37] *** frost-lab joined
[13:39] *** frost-lab left
[13:42] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/837322979301785621/unknown.png find nativecalls by symbol names because why not :3

[13:44] <MasterDuke> do your changes to the moarvm build look similar to my PR?

[13:44] <timotimo> you mean mine?

[13:45] <MasterDuke> yes

[13:46] <timotimo> https://gist.github.com/timo/c15757c54db23ddadec34c7657c949bb

[13:46] <timotimo> i changed Makefile itselfr ather than Makefile.in or something

[13:46] <timotimo> terrible hack

[13:47] <MasterDuke> you

[13:47] <MasterDuke> 're included TracyC.h everywhere also. i tried just including it in moar.h, but then the nqp build complains

[13:47] <timotimo> ah, yeah if we don't install teh header file, nqp won't be able to compile its runner since it can't find the header

[13:49] <timotimo> jnthn: you see how after the gc run we seem to grab addresses from the freelist in descending memory address order? is that a bad thing?

[13:50] <MasterDuke> oh, right, i'm probably not installing it...

[13:52] <jnthn> timotimo: I'm not sure. Depends if caches do better at predicting pre-fetches on ascending patterns and, even then, if such an effect comes into play when there's usually a decent amount of time, and so other code, between allocations.

[13:54] *** moritz_ joined
[13:54] *** moritz left
[13:59] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/837326945187659857/unknown.png does this tell you anything? put some zones in the GC. the tiny one at the bottom at the end is also finish_gc

[14:03] <timotimo> bright vs dark is "does the thread run on the cpu?"

[14:08] <jnthn> Bright is when it's running?

[14:08] <timotimo> correct

[14:10] <jnthn> It aligns with what I'd expect from the way things are implemneted. Presumably the async worker has little GC work to do, so doesn't have to run much of the time. But the various phases of GC are coordinated via condition variables, and the wakeups we see are the bright parts.

[14:10] <timotimo> fair enough

[14:11] <jnthn> It's nice in that it shows we're not busy-waiting in nasty ways, which did happen in earlier implementations.

[14:12] <jnthn> What would be quite interesting is to see how this looks in an application with a bunch of threads doing work

[14:13] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/837330553661030420/unknown.png - heap snapshot taking suuuuuper slow :D at least when gc work is tiny like this

[14:13] <MasterDuke> use tracy to profile moar-perf loading a --profile of rakudo compiling the core setting...

[14:14] *** MasterDuke left
[14:14] *** MasterDuke joined
[14:14] <timotimo> this is actually moarperf, but i didn't care to compile the javascript crap yet

[14:14] <timotimo> so i only get a patterned background image when i open it up

[14:15] <MasterDuke> oh, nice though

[14:20] *** sena_kun left
[14:22] *** sena_kun joined
[14:33] <timotimo> ===> Install [FAIL] for App::MoarVM::HeapAnalyzer:ver<0.1>: ===SORRY!===

[14:33] <timotimo> Missing serialize REPR function for REPR ConcBlockingQueue (QueueType)

[14:33] <timotimo> ===SORRY!===

[14:33] <timotimo> Missing serialize REPR function for REPR ConcBlockingQueue (QueueType)

[14:33] <timotimo> wow, what on earth

[14:38] <timotimo> is my rakude installation just kinda busted somehow?

[14:39] <lizmat> well, what would serialization of a ConcBlockingQueue mean?  that's a runtime concept, no?

[14:39] <lizmat> so I guess it gets includes somewhere in a context being serialized when it shouldn't?

[14:40] <timotimo> yeah, i have no clue why it'd try to do that

[14:41] <timotimo> trying to run the moar heapanalyzer gives me two nice exceptions "cannot find method name on object of type Perl6::Metamodel::ClassHOW

[14:51] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/837340158969249822/unknown.png GC run on multiple threads! at the same time!!

[14:53] <timotimo> i still get these exceptions, weird

[15:07] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/837344348303130674/unknown.png - moar heapanalyzer screenshoot

[15:23] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/837348215446569020/unknown.png - the time spread with bytecode loading shows, unsurprisingly, that the core.c.setting is the slowest of them all

[15:35] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/837351213543850024/unknown.png - spesh log submission messages logged

[15:35] <timotimo> little white triangles in the thread timelines are messages

[16:05] *** MasterDuke left
[16:21] *** domidumont joined
[16:33] *** domidumont left
[17:11] *** zakharyas left
[18:11] *** sourceable6 left
[18:11] *** notable6 left
[18:11] *** benchable6 left
[18:11] *** unicodable6 left
[18:11] *** releasable6 left
[18:11] *** committable6 left
[18:11] *** tellable6 left
[18:11] *** squashable6 left
[18:11] *** coverable6 left
[18:11] *** shareable6 left
[18:11] *** statisfiable6 left
[18:11] *** quotable6 left
[18:11] *** bisectable6 left
[18:11] *** greppable6 left
[18:11] *** bloatable6 left
[18:11] *** unicodable6 joined
[18:11] *** coverable6 joined
[18:11] *** statisfiable6 joined
[18:12] *** greppable6 joined
[18:13] *** releasable6 joined
[18:13] *** benchable6 joined
[18:30] *** dogbert17 left
[18:31] *** dogbert17 joined
[18:32] *** dogbert11 joined
[18:34] *** vrurg left
[18:35] *** dogbert12 joined
[18:35] *** vrurg joined
[18:36] *** dogbert17 left
[18:38] *** dogbert11 left
[19:08] *** MasterDuke joined
[19:30] *** dogbert17 joined
[19:32] *** dogbert12 left
[19:59] *** MasterDuke left
[20:05] *** MasterDuke joined
[21:25] *** LizBot left
[21:27] *** lizmat left
[21:35] *** lizmat joined
[21:45] *** nwc10 left
[21:46] *** nwc10 joined
[21:55] *** LizBot joined
[22:29] *** LizBot left
[22:29] *** lizmat left
[22:29] *** lizmat joined
[22:31] *** LizBot joined
[22:52] *** Kaiepi left
[23:46] *** LizBot left
[23:46] *** lizmat left
