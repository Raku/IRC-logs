[00:00] *** squashable6 left
[00:00] *** linkable6 left
[00:00] *** evalable6 left
[00:00] *** Kaiepi left
[00:00] *** gfldex left
[00:00] *** rypervenche left
[00:00] *** samcv left
[00:00] *** japhb left
[00:00] *** nine left
[00:00] *** nine joined
[00:00] *** linkable6 joined
[00:00] *** evalable6 joined
[00:00] *** squashable6 joined
[00:00] *** rypervenche joined
[00:00] *** Kaiepi joined
[00:00] *** rypervenche left
[00:00] *** rypervenche joined
[00:02] *** samcv joined
[00:04] *** reportable6 left
[00:05] *** gfldex joined
[00:05] *** japhb joined
[01:12] <[Coke]> are we still using appveyor?

[01:13] <[Coke]> https://github.com/MoarVM/MoarVM/issues/697

[01:17] <[Coke]> Nicholas: you're our porter person, right? Is Illumos still a thing or is it dead? https://github.com/MoarVM/MoarVM/issues/306

[02:05] *** reportable6 joined
[02:23] *** squashable6 left
[02:25] *** squashable6 joined
[03:37] *** squashable6 left
[03:40] *** squashable6 joined
[06:02] *** reportable6 left
[07:02] *** coverable6 left
[07:02] *** nativecallable6 left
[07:02] *** unicodable6 left
[07:02] *** statisfiable6 left
[07:02] *** notable6 left
[07:02] *** sourceable6 left
[07:02] *** evalable6 left
[07:02] *** greppable6 left
[07:02] *** quotable6 left
[07:02] *** tellable6 left
[07:02] *** benchable6 left
[07:02] *** bisectable6 left
[07:02] *** squashable6 left
[07:02] *** releasable6 left
[07:02] *** committable6 left
[07:02] *** shareable6 left
[07:02] *** bloatable6 left
[07:02] *** linkable6 left
[07:02] *** bloatable6 joined
[07:04] *** benchable6 joined
[07:04] *** tellable6 joined
[07:04] *** sourceable6 joined
[07:05] *** notable6 joined
[07:05] *** committable6 joined
[07:05] *** releasable6 joined
[07:17] <nine> [Coke]: no it's all Azure Pipelines

[08:03] *** unicodable6 joined
[08:15] <nine> [Coke]++ # cleaning our issue queue

[08:18] <MasterDuke> hm. looks like our expmod behavior isn't exactly the same as python's pow

[08:25] <MasterDuke> m: say expmod(41, -1, 1)

[08:25] <camelia> rakudo-moar c50bc9985: OUTPUT: «Error in mp_exptmod: Value out of range␤  in block <unit> at <tmp> line 1␤␤»

[08:25] <MasterDuke> both python's pow and Perl's Math::BigInt->bmodpow give 0

[08:27] <MasterDuke> hm, but that error is coming directly from libtommath

[08:30] <nine> m: say expmod(38, -1, 97)

[08:30] <camelia> rakudo-moar c50bc9985: OUTPUT: «23␤»

[08:31] <nine> Looks like at least in Python pow(41, -1, 1) results in undefined behaviour as the docs say "If mod is present and exp is negative, base must be relatively prime to mod."

[08:33] <MasterDuke> but that gives 0, where other combinations throw `ValueError: base is not invertible for the given modulus`

[08:34] <MasterDuke> m: say expmod(42, -1, 7)  # like this

[08:34] <camelia> rakudo-moar c50bc9985: OUTPUT: «Error in mp_exptmod: Value out of range␤  in block <unit> at <tmp> line 1␤␤»

[08:34] <MasterDuke> Math::BigInt give Nan for ^^^

[08:36] <MasterDuke> i'm building the jvm backend right now to see what it gives for https://github.com/Raku/roast/blob/master/S32-num/expmod.t#L25-L36

[08:37] <nine> WolframAlpha agrees that the result is 0

[08:37] <MasterDuke> after the jvm builds i can switch to my gmp branch and see what it says

[08:44] <MasterDuke> r: say expmod(42, -1, 1)

[08:44] <camelia> rakudo-moar c50bc9985: OUTPUT: «Error in mp_exptmod: Value out of range␤  in block <unit> at <tmp> line 1␤␤»

[08:44] <camelia> ..rakudo-jvm: OUTPUT: «Can't open perl script "/home/camelia/rakudo-j-inst/bin/eval-client.pl": No such file or directory␤»

[08:44] <MasterDuke> right, that's why i built it locally. well, jvm backend gives 0

[08:48] <MasterDuke> moarvm backend gives 0 with gmp

[08:50] <nine> One more reason to switch to gmp :)

[08:52] <MasterDuke> yeah. only that last windows 64bit vs 32bit bug to figure out...

[09:00] <MasterDuke> it's annoying that you can't todo a test that throws

[09:03] *** statisfiable6 joined
[09:03] *** greppable6 joined
[09:24] <MasterDuke> huh. why doesn't `#?rakudo.moar todo 'libtommath incorrectly errors and causes a throw instead of giving 0'; lives-ok { die if 42.expmod(-1,1) != 0 }, '42,  -1,  1';` report at the end as a passing todo when i run with the gmp branch?

[09:24] <nine> So far I've totally failed at reproducing a failure in t/spec/S12-methods/lastcall.t

[09:55] <dogbert17> hmm, that sounds like the bug I reported a few days ago

[10:03] *** linkable6 joined
[10:03] *** squashable6 joined
[10:03] * dogbert17 retries, the bug is still there but does not trigger as often as before

[10:04] *** bisectable6 joined
[10:05] *** nativecallable6 joined
[10:05] *** shareable6 joined
[10:30] <nine> I've also tried reroducing the failures in t/05-messages/10-warnings.t that CI showed in the new-special-return PR. Haven't managed to either. Though a normal run ended in a segfault. Sadly, systemd-coredump segfaulted as well trying to process that coredump :(

[10:31] <MasterDuke> so the problem with https://github.com/MoarVM/MoarVM/issues/1223 is that at the point of the segv https://github.com/MoarVM/MoarVM/blob/master/src/core/frame.c#L286 , env_size and work_size are 480080 and 480096

[10:33] <MasterDuke> but the MVMCallsStackFrame was just created by MVM_callstack_allocate_frame, which takes MVMuint16s https://github.com/MoarVM/MoarVM/blob/master/src/core/callstack.c#L161-L162

[10:33] <nine> Yeah, when reading about 60K variables, I figured it was some 16 bit issue

[10:33] <nine> Thanks for confirming!

[10:34] <MasterDuke> because an MVMFrame only has MVMuint16 allocd_work and allocd_env

[10:35] <MasterDuke> but i don't know what the right fix is

[10:36] <nine> Throwing an error, maybe in bytecode verification

[10:37] <MasterDuke> we don't want to allow 60k variables? fwiw, perl runs that script in 2s

[10:40] <nine> We definitely cannot have more than 2^16 registers, that's a fundamental limit of the bytecode format.

[10:42] <nine> We probably could with a lot of effort support more than 2^16 lexicals. But we'd still have to make sure that we don't lower too many of them to locals. That sounds quite fragile to me

[10:43] <MasterDuke> well, right now we don't support up to 2^16 lexicals. the script only has 60k

[10:44] <nine> does it work with 40k?

[10:44] <nine> I.e. is it a signedness issue as well?

[10:46] <MasterDuke> nope, segv

[10:47] <MasterDuke> after ~40s

[10:49] <MasterDuke> same place

[10:50] <nine> And 30k works?

[10:51] <MasterDuke> segv

[10:52] <MasterDuke> same place

[10:52] <nine> What the? Does it work with 3 variables? :D

[10:53] <MasterDuke> same segv with 20k

[10:54] <MasterDuke> `malloc(): invalid size (unsorted)` with 16k

[10:55] <MasterDuke> MVM_malloc -> MVM_string_latin1_decode -> MVM_cu_obtain_string -> MVM_cu_string -> MVM_interp_run

[10:56] <MasterDuke> don't know why size is invalid, it's 7

[10:58] <MasterDuke> f 7

[11:02] <MasterDuke> different segv at 10k

[11:04] *** evalable6 joined
[11:04] <MasterDuke> 8k succeeds

[11:06] <lizmat> .oO( who would ever need more than 8K )

[11:09] <nine> Oh, of course! allocd_work and allocd_env are sizes in bytes. So 8K locals * 8 bytes per register is quite close to 2^16

[11:14] <MasterDuke> 3 different segvs. where's the best place to at least put some check and throw for now?

[11:17] <MasterDuke> in deserialize_frames? keep a running count of something and throw if it gets too big?

[11:19] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: de4d2d4492 | (Stefan Seifert)++ | 6 files

[11:19] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: Fix segfaults when a frame has more than 8192 locals

[11:19] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: 

[11:19] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: The bytecode format supports 2^16 locals in a frame. However the allocator used

[11:19] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: 16 bit numbers for sizes, i.e. bytes. Since a register is 8 bytes large, we

[11:19] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: could only allocate enough space for 2^13 registers. Fix by using 32 bit

[11:19] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: numbers for size calculations.

[11:19] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: review: https://github.com/MoarVM/MoarVM/commit/de4d2d4492

[11:21] <nine> With this the 60k example succeeds. Going over 2^16 ends in "Annotation segment overflows end of stream"

[11:22] <MasterDuke> that's nicer

[11:22] <MasterDuke> what is the spesh_nodelay stuff?

[11:23] <nine> Oh, that's unrelated. Good thing I pushed into a branch

[11:24] <nine> When trying to reproduce those other bugs I thought that we could make nodelay configurable to get speshed versions between no information and really good statistics and provoke issues that way

[11:24] <nine> Didn't help though. But it still could be useful

[11:26] <MasterDuke> ah, yeah

[11:26] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: cadafe8ef2 | (Stefan Seifert)++ | 4 files

[11:26] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: Fix segfaults when a frame has more than 8192 locals

[11:26] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: 

[11:26] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: The bytecode format supports 2^16 locals in a frame. However the allocator used

[11:26] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: 16 bit numbers for sizes, i.e. bytes. Since a register is 8 bytes large, we

[11:26] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: could only allocate enough space for 2^13 registers. Fix by using 32 bit

[11:26] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: numbers for size calculations.

[11:26] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: review: https://github.com/MoarVM/MoarVM/commit/cadafe8ef2

[11:27] <nine> Having reviewed the new allocation code really made ^^^ quite easy

[11:27] *** nebuchadnezzar left
[11:32] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: 24392a32c2 | (Stefan Seifert)++ | 4 files

[11:32] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: Fix segfaults when a frame has more than 8192 locals

[11:32] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: 

[11:32] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: The bytecode format supports 2^16 locals in a frame. However the allocator used

[11:32] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: 16 bit numbers for sizes, i.e. bytes. Since a register is 8 bytes large, we

[11:32] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: could only allocate enough space for 2^13 registers. Fix by using 32 bit

[11:32] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: numbers for size calculations.

[11:32] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: 

[11:32] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: Fixes GH #1223

[11:32] <Geth> ¦ MoarVM/fix_segfault_on_many_lexicals: review: https://github.com/MoarVM/MoarVM/commit/24392a32c2

[11:32] <Geth> ¦ MoarVM: niner++ created pull request #1588: Fix segfaults when a frame has more than 8192 locals

[11:32] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1588

[11:35] <dogbert17> nine++, you're on a roll

[11:39] <dogbert17> as far as the lastcall issue is concerned I have set: #define MVM_NURSERY_SIZE (20 * 1024)

[12:03] *** coverable6 joined
[12:30] <nine> not a single failure so far

[12:30] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: ed0c8ec068 | (Timo Paulssen)++ | 5 files

[12:30] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: create MVM_callsite_replace_positional and use it

[12:30] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: review: https://github.com/MoarVM/MoarVM/commit/ed0c8ec068

[12:31] <dogbert17> are you running: while MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 ./rakudo-m -Ilib --ll-exception t/spec/S12-methods/lastcall.t; do :; done

[12:32] <nine> Yes, except for --ll-exception

[12:33] <dogbert17> bizarre, perhaps I have messed something up in my installation

[12:38] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: 68b8f429f4 | (Timo Paulssen)++ | src/disp/program.c

[12:38] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: initialize vector to known size, MasterDuke17++

[12:38] <Geth> ¦ MoarVM/dispatcher-replace-arg-syscall: review: https://github.com/MoarVM/MoarVM/commit/68b8f429f4

[12:40] <timo> jnthnwrthngtn: as nine pointed out yesterday, we'll want to see if the MVM_callsite_* ops should all attempt an intern at the end of their operation, as their documentation comments suggest

[12:40] <dogbert17> k 4 - lastcall meant nextsame failed, no deferal happened

[12:40] <dogbert17> Can only use manipulate a capture known in this dispatch

[12:40] <dogbert17>   in method doit at t/spec/S12-methods/lastcall.t line 39

[12:40] <dogbert17>   in block <unit> at t/spec/S12-methods/lastcall.t line 46

[12:41] <timo> with --ll-exception you'll also see the line of the dispatcher program where it happens

[12:42] <dogbert17> timo: all the data I have can be found here, https://github.com/MoarVM/MoarVM/issues/1580

[12:44] <timo> can you tell me what's at gen/moar/BOOTSTRAP/v6c.nqp:5248 ? is it just the -> $capture { line?

[12:46] <dogbert17>   5247     # us to handle `callwith`).

[12:46] <dogbert17>    5248     -> $capture {

[12:46] <dogbert17>    5249         # We put a sentinel value into the resume state in the case that we have

[12:47] <timo> well, that's weird

[12:48] <timo> getting the entire tree of captures could be potentially interesting here

[12:48] <timo> but it should look trivial

[12:50] <timo> the one track argument call that i can see in that block is the one that is called directly on $capture

[12:51] <timo> MVM_dump_bytecode(tc) can give a tiny bit of insight

[12:54] *** CaCode joined
[13:02] *** quotable6 joined
[13:03] *** reportable6 joined
[13:06] <[Coke]> I am very surprised to find that some random bug I tickled last night that was in the queue for ages is now fixed. :)

[13:06] <[Coke]> nine++ MasterDuke++

[13:25] <Geth> ¦ MoarVM: 24392a32c2 | (Stefan Seifert)++ | 4 files

[13:25] <Geth> ¦ MoarVM: Fix segfaults when a frame has more than 8192 locals

[13:25] <Geth> ¦ MoarVM: 

[13:25] <Geth> ¦ MoarVM: The bytecode format supports 2^16 locals in a frame. However the allocator used

[13:25] <Geth> ¦ MoarVM: 16 bit numbers for sizes, i.e. bytes. Since a register is 8 bytes large, we

[13:25] <Geth> ¦ MoarVM: could only allocate enough space for 2^13 registers. Fix by using 32 bit

[13:25] <Geth> ¦ MoarVM: numbers for size calculations.

[13:25] <Geth> ¦ MoarVM: 

[13:25] <Geth> ¦ MoarVM: Fixes GH #1223

[13:25] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/24392a32c2

[13:25] <Geth> ¦ MoarVM: cbed18a68c | niner++ (committed using GitHub Web editor) | 4 files

[13:25] <Geth> ¦ MoarVM: Merge pull request #1588 from MoarVM/fix_segfault_on_many_lexicals

[13:26] <Geth> ¦ MoarVM: 

[13:26] <Geth> ¦ MoarVM: Fix segfaults when a frame has more than 8192 locals

[13:26] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cbed18a68c

[13:26] <MasterDuke> [Coke]++ for testing old issues

[13:26] *** linkable6 left
[13:28] *** linkable6 joined
[13:31] <MasterDuke> interesting, it looks like passing todo's in subtests aren't reported

[14:05] *** CaCode left
[14:09] <nine> MasterDuke: weird-errors is a good place for that test :)

[14:10] <MasterDuke> heh, yeah, i wanted one that was marked slow and it also seemed appropriate

[14:22] <[Coke]> :)

[14:27] <dogbert17> timo: do you want me to dump the bytecode from the breakpoint line, i.e. src/disp/program.c:677

[14:29] <MasterDuke> huh. i did a perf record of that 60k variables script and the most expensive function was MVMHash_gc_mark

[14:30] <dogbert17> timo: https://gist.github.com/dogbert17/f81c6141e2669836f0970383ed2c1414

[15:16] *** evalable6 left
[15:16] *** linkable6 left
[15:16] *** evalable6 joined
[15:17] *** linkable6 joined
[15:45] *** [Coke] left
[15:50] *** [Coke] joined
[16:07] <timo> the bytecode does show that it's literally passing the value of the first passed argument in that syscall

[16:08] <timo> oh, whats in that variable? could it be NULL for some reason?

[16:08] <timo> i think the syscall mechanism checks for that tho

[18:02] *** reportable6 left
[19:04] *** reportable6 joined
[19:49] *** [Coke] left
[20:13] *** [Coke] joined
[20:55] *** rypervenche left
[22:05] *** rypervenche joined
[23:42] *** dogbert17 left
[23:44] *** dogbert17 joined
