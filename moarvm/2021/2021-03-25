[02:52] *** squashable6 left
[02:53] *** squashable6 joined
[02:54] *** Kaiepi left
[02:55] *** Kaiepi joined
[02:56] *** Kaiepi left
[02:56] *** Kaiepi joined
[03:15] *** Kaiepi left
[04:26] *** nativecallable6 left
[04:26] *** linkable6 left
[04:26] *** notable6 left
[04:26] *** greppable6 left
[04:26] *** committable6 left
[04:26] *** quotable6 left
[04:26] *** bisectable6 left
[04:26] *** tellable6 left
[04:26] *** evalable6 left
[04:26] *** squashable6 left
[04:26] *** benchable6 left
[04:26] *** unicodable6 left
[04:26] *** coverable6 left
[04:26] *** sourceable6 left
[04:26] *** statisfiable6 left
[04:26] *** releasable6 left
[04:26] *** shareable6 left
[04:26] *** bloatable6 left
[04:26] *** committable6 joined
[04:26] *** coverable6 joined
[04:26] *** releasable6 joined
[04:27] *** shareable6 joined
[04:27] *** notable6 joined
[04:27] *** unicodable6 joined
[04:27] *** statisfiable6 joined
[04:27] *** quotable6 joined
[04:27] *** bisectable6 joined
[04:27] *** benchable6 joined
[04:27] *** evalable6 joined
[04:28] *** sourceable6 joined
[04:28] *** nativecallable6 joined
[04:28] *** squashable6 joined
[04:28] *** greppable6 joined
[04:28] *** linkable6 joined
[04:28] *** tellable6 joined
[04:29] *** bloatable6 joined
[05:16] *** Kaiepi joined
[06:13] <nwc10> good *, #moarvm 

[07:46] <MasterDuke> interesting. rakudo builds, but install-core-dist.raku dies with `Cannot assign a literal of type Num (NaN) to a native variable of type int. You can declare the variable to be of type Real, or try to coerce the value with NaN.Int or Int(NaN)`

[07:50] *** moon-child left
[07:50] *** moon-child joined
[07:50] <MasterDuke> doh. that's what i get for attempting to program while tired. easy to spot the problem now

[07:57] *** moon-child left
[07:57] *** moon-child joined
[07:58] *** domidumont joined
[08:10] *** brrt joined
[08:12] *** frost-lab joined
[08:18] *** frost-lab31 joined
[08:20] *** Kaiepi left
[08:21] *** frost-lab left
[08:27] *** Kaiepi joined
[08:42] *** Kaeipi joined
[08:42] *** Kaiepi left
[08:43] <nine> MasterDuke: there are worse things than quickly spotting a problem that you deemed inscrutable the day before :)

[08:44] *** zakharyas joined
[08:45] *** zakharyas1 joined
[08:49] *** zakharyas left
[08:50] *** Kaeipi left
[08:52] <brrt> \o

[08:54] *** Kaiepi joined
[09:09] <MasterDuke> yeah, i'll take it

[09:13] *** sena_kun joined
[09:32] *** Kaiepi left
[10:18] <nwc10> o/

[10:23] <MasterDuke> oh, is the german perl workshop on now? i hadn't heard anything about it

[10:24] <jnthn> Yes

[10:25] <nwc10> but also "no" depending on what granularity you're considering

[10:25] <nwc10> not this morning

[10:26] <nwc10> but the heretical real-concept that happens after "morning" out in the real world. (This, depsite the fact that it's only online. Although there was a shot of two orgaisers in the same place)

[10:28] <MasterDuke> ah, jnthn is giving a talk today at 13:30. what timezone is that?

[10:28] <nwc10> CET

[10:28] <jnthn> My one, which makes it easy for me :)

[10:28] <nwc10> you will want to be https://streaming.media.ccc.de/gpw2021/

[10:28] <nwc10> unless you have a pirate copy already. (I don't)

[10:29] <nwc10> conferences never used to have this problem with timezones when they were in actual places

[10:29] * jnthn is amused by the thought of his talk being pirated

[10:29] <nwc10> it just randomly occurred to me.

[10:30] <nwc10> because I realised that it's like a move before it's released in the cinmea - or more, like non-live TV before it's shown

[10:30] <MasterDuke> do i need to pay to watch?

[10:30] <nwc10> No.

[10:31] <nwc10> I don't think you even need to pay to be on the chat channel at https://app.element.io/#/room/#GermanPerlWorkshop:matrix.org

[10:31] <nwc10> so, there's no real market for pirated copies.

[10:31] <nwc10> sorry, if anyone thought that this was a money spinner

[10:32] <MasterDuke> cet is one hour ahead, think i can manage that

[11:07] *** Altai-man_ joined
[11:07] *** sena_kun left
[11:14] *** sena_kun joined
[11:14] <MasterDuke> huh. `say DateTime.now` is off by 12 minutes. i could understand being off by some larger values i was using the wrong multiplier between nanoseconds and seconds, but how does 12min happen?

[11:15] <lizmat> not for me

[11:15] <lizmat> m: say DateTime.now

[11:15] <camelia> rakudo-moar 726a75e24: OUTPUT: «2021-03-25T12:15:40.658154+01:00␤»

[11:15] <lizmat> looks ok here as well ?

[11:15] *** Altai-man_ left
[11:15] <lizmat> maybe your clock is off ?

[11:16] <MasterDuke> i'm on my branches to remove nqp::time_(i|n) and replace with nqp::time that returns nanoseconds

[11:16] <lizmat> aah... ok

[11:16] <lizmat> *phew8

[11:16] <lizmat> *

[11:16] <nwc10> is your local bug exactly 12 minutes?

[11:17] <lizmat> 12 seconds I could sorta understand?  epoch vs instant ?

[11:17] <MasterDuke> oh yeah, it was seconds

[11:18] <MasterDuke> whoops

[11:26] <lizmat> line 866 and following in src/core.c/Rakudo/Internals.pm6

[11:27] <lizmat> hmm...that's be more like 27 seconds

[11:27] <MasterDuke> my measurement wasn't very precise, i was running the rakudo appimage for comparison and then immediately running my local rakudo

[11:33] *** Kaiepi joined
[11:42] *** zakharyas1 left
[11:48] *** Kaiepi left
[11:49] *** Kaiepi joined
[11:57] *** brrt left
[12:02] *** Altai-man_ joined
[12:03] *** Kaiepi left
[12:03] *** Kaiepi joined
[12:05] *** sena_kun left
[12:05] *** frost-lab31 left
[12:19] <nwc10> everyone has about 12 minutes to make coffee (or eat breakfast, hint hint) before jnthn is on https://streaming.media.ccc.de/gpw2021/GPW2021

[12:20] <nwc10> well, jnthn this year, rather than just photos some of which have jnthn in previous years

[12:25] *** Kaiepi left
[12:53] *** brrt joined
[13:01] *** zakharyas joined
[13:15] <lizmat> did we lose the sound?

[13:15] *** Kaiepi joined
[13:16] <nwc10> jnthn: once you've done with questions on the real live stream, what was your euphamasim for "it might SEGV" covering for why it was eager keys

[13:20] <nwc10> we should fix that. But not this week

[13:21] <nwc10> I'm going back upstairs with the table (To the coffee, the sofa and the sun)

[13:24] <jnthn> Even if it didn't segv, it'd still be wrong

[13:24] <jnthn> Probably OO::Monitors should warn on return of a lazy thing

[13:32] <lizmat> jnthn: I wonder whether the three hashes keyed on URL, couldn't have been encapsulated into a single object and used in a SetHash ?

[13:33] <lizmat> with the encapsulating object creating a proper WHICH  :-)

[13:33] <jnthn> lizmat: I said that in the answer session, but unfortunately the sound got lost for it

[13:34] <lizmat> aha, ok

[13:34] <lizmat> yeah, no sound indee

[13:34] <lizmat> d

[13:34] <jnthn> But yeah, I did look at it and think "hm, that'd be nicer as one object" 

[13:35] *** brrt left
[13:36] <lizmat> but yeah, for the presentation, it would have been an additional level of indirection / layer to prevent understanding

[13:37] <jnthn> The WHICH certainly, also I know I'm a very heavy user of lexical classes, but especially for those watching with Perl eyes it may be a less obvious thing too.

[13:49] <lizmat> yeah, figured that :-)

[13:52] <lizmat> or maybe use a module such as ValueTypeCache  :-)

[13:54] <MasterDuke> heh. `Failed test '   ... of approximately correct value'`...`maximum absolute tolerance: 5`...`actual absolute difference: 1616680383668322973.624558`

[13:54] <nwc10> :-)

[14:05] <lizmat> jnthn: so any idea how many people watched ?

[14:13] <jnthn> lizmat: No

[14:14] <nwc10> seed the torrents!

[14:14] <jnthn> lizmat: However, the video will be around for a long time. Also there's actually a "director's cut" version that was a bit too long for the schedule, but has an extra section at the end showing some Comma features of use to those using Cro 

[14:15] <jnthn> Probably the Cro docs should get a section linking to these things...

[14:15] <nwc10> but will fit the typical TPCiC 50-minute slot jsut fine?

[14:18] <jnthn> hah! That'd be lazy :P

[14:18] <nwc10> it only works if you *are* lazy and don't update anything

[14:18] <jnthn> I think by then new-disp will have landed and RakuAST will be far along enough to justify another talk

[15:13] * dogbert11 notes that one of [Tux] CSV tests makes ASAN quite angry

[15:14] <dogbert11> t/45_eol.t ........... 1/? =================================================================

[15:14] <dogbert11> ==355764==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020003278ac at pc 0x7f35e3a21f17 bp 0x7ffe0e684a70 sp 0x7ffe0e684a60

[15:14] <dogbert11> READ of size 4 at 0x6020003278ac thread T0

[15:14] <dogbert11>     #0 0x7f35e3a21f16 in cache_sep_info src/strings/decode_stream.c:639

[15:14] <dogbert11>     #1 0x7f35e3a21f16 in MVM_string_decode_stream_sep_from_strings src/strings/decode_stream.c:698

[15:45] *** Kaiepi left
[16:29] *** zakharyas left
[16:45] *** ggoebel joined
[17:02] *** MasterDuke left
[17:18] *** sivoais left
[17:18] *** [Coke] left
[17:18] *** samcv left
[17:18] *** nwc10 left
[17:18] *** jraspass left
[17:20] *** ilogger2 joined
[17:20] *** kawaii joined
[17:31] <nine> Tradeoffs, tradeoffs, tradeoffs. After spending another couple hours on it, I'm pretty sure that conceptually nqp::backtrace cannot work as it is. The reason is that we simply do not retain the information that it would need to work.

[17:32] <nine> To generate a backtrace, we need the full call chain of frames at the point of the exception. That's easy, we have that as all we need is put the call chain onto the heap and store the top most MVMFrame*.

[17:33] <nine> We also need the current position within each of those frames. And that we do not have. A frame doesn't know the point in the caller where it got called from (or would need to return to). Instead it's the caller that stores this information.

[17:34] <nine> But in Backtrace.new after throwing and catching the exception, we return to one of the callers in the exception's chain and continue executing it (which is how we come across that nqp::backtrace call). So the return point gets changed between exception throw and backtrace.

[17:35] <nine> Now there is a solution that stores the missing position information into each frame's "extra" in that call chain. It's implemented in MVMContext's snapshot_frame_callees.

[17:36] <nine> But that would have to happen in MVM_exception_throwobj, making every exception throw even more expensive.

[17:42] *** Voldenet left
[17:42] *** leedo left
[17:42] *** chansen_ left
[17:42] *** bartolin left
[17:42] *** moritz left
[17:42] *** bartolin_ joined
[17:42] *** moritz_ joined
[17:42] *** Voldenet joined
[17:42] *** [Coke] joined
[17:42] *** chansen_ joined
[17:42] *** sxmx joined
[17:42] *** jraspass joined
[17:42] *** timotimo joined
[17:42] *** bingos_ joined
[17:42] *** dogbert17 joined
[17:42] *** [Coke] left
[17:42] *** [Coke] joined
[17:42] *** releasable6 joined
[17:42] *** notable6 joined
[17:42] *** statisfiable6 joined
[17:42] *** tellable6 joined
[17:42] *** jpf1 joined
[17:42] *** Voldenet left
[17:42] *** Voldenet joined
[17:42] *** Altai-man_ joined
[17:44] *** leedo joined
[17:52] *** moon-child joined
[17:57] *** ugexe left
[17:57] *** mtj_ left
[17:57] *** SmokeMachine left
[17:57] *** Altreus left
[17:57] *** rba_ joined
[17:57] *** Altreus joined
[17:57] *** ugexe joined
[17:57] *** SmokeMachine joined
[17:58] *** rba_ is now known as rba

[17:58] *** kawaii left
[17:58] *** rypervenche left
[17:58] *** camelia left
[17:58] *** rypervenche joined
[17:58] *** kawaii joined
[17:58] *** tbrowder joined
[17:59] *** Util_ left
[17:59] *** eaterof left
[17:59] *** avar joined
[17:59] *** avar left
[17:59] *** avar joined
[17:59] *** jnthn_ joined
[17:59] *** mst joined
[17:59] *** bonsaikitten joined
[17:59] *** jjatria joined
[17:59] *** ChanServ sets mode: +o mst

[18:00] *** Util joined
[18:00] *** eater joined
[18:01] *** lizmat joined
[18:02] *** camelia joined
[18:03] *** kawaii left
[18:03] *** ugexe left
[18:03] *** Altreus left
[18:03] *** nine joined
[18:04] *** kawaii joined
[18:04] *** ugexe joined
[18:04] *** Altreus joined
[18:05] *** kawaii left
[18:05] *** ugexe left
[18:05] *** Altreus left
[18:05] *** ugexe joined
[18:06] *** Altreus joined
[18:06] *** leedo left
[18:06] *** leont left
[18:06] *** leedo joined
[18:06] *** leont joined
[18:10] *** kawaii joined
[18:17] *** ilogger2 joined
[18:17] *** vrurg joined
[18:17] *** tobs joined
[18:17] *** samcv joined
[18:18] *** quotable6 joined
[18:18] *** bloatable6 joined
[18:18] *** evalable6 joined
[18:18] *** unicodable6 joined
[18:18] *** nativecallable6 joined
[18:18] *** squashable6 joined
[18:18] *** shareable6 joined
[18:18] *** committable6 joined
[18:18] *** greppable6 joined
[18:18] *** coverable6 joined
[18:18] *** domidumont joined
[18:19] *** harrow joined
[18:21] *** domidumont left
[18:21] *** japhb joined
[18:21] *** MasterDuke joined
[18:22] <MasterDuke> nine: exceptions aren't the worst thing to get a little slower. but will this also effect rakudo's control flow perf?

[18:47] <nine> it would

[18:47] <nine> But...maybe we can still avoid that

[18:48] <nine> Thing is, the part I struggle with is to get a stable number of frames, regardless of JIT or spesh being enabled or not. What do I need that number for? To skip the top most n frames!

[18:49] <nine> Because those frames are just the throwing of an exception, Backtrace.new, Failure!SET-INTERNAL, Failure.new and fail(), none of which the user cares about.

[18:50] <nine> So instead of starting at the exception's frame, I could actually start generating the backtrace at tc->cur_frame.

[18:58] *** bingos_ is now known as BinGOs

[18:59] *** BinGOs left
[18:59] *** BinGOs joined
[19:02] *** lizmat_ joined
[19:03] *** lizmat left
[19:05] *** MasterDuke left
[19:08] *** lizmat_ is now known as lizmat

[19:16] *** jnthn_ is now known as jnthn

[20:14] *** nebuchadnezzar left
[20:14] *** MasterDuke joined
[20:14] <MasterDuke> nine: sounds promising

[20:43] *** nebuchadnezzar joined
[20:45] <MasterDuke> ok, i now have a moavm+nqp+rakudo that all use nqp::time instead of nqp::time_(i|n) and pass all tests

[20:46] <nine> sounds excellent :)

[20:47] <MasterDuke> but with virtually no other change. i.e., pretty much just an s/nqp::time_n/nqp::div_n(nqp::coerce_in(nqp::time),1000000000e0)/g

[20:48] *** japhb left
[20:49] <MasterDuke> i think i'll PR them as is so people can see the changes and suggest anything that now can be done better/differently

[20:51] *** japhb joined
[20:57] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1450

[20:59] <nine> Ok, seems like this 4th implementation works also and has no drawbacks. On the contrary it makes Failures a little bit cheaper

[21:00] <nine> What I did was make it possible to call nqp::backtrace not with an exception but with an nqp::null. In that case it will just start with the current frame and position.

[21:01] <MasterDuke> very cool

[21:01] <nine> With this we finally pass those backtrace tests with MVM_SPESH_NODELAY

[21:02] <MasterDuke> i don't remember what it was, but a little while ago somebody showed some slow code and iirc creating Failures was (one of?) the biggest costs

[21:03] *** sxmx left
[21:04] <japhb> nine++  # Constantly pushing stability forward

[21:04] <japhb> MasterDuke++  # Taking up my old complaint and doing something about it.  :-)

[21:30] *** zakharyas joined
[21:58] *** zakharyas left
[22:34] *** dogbert17 left
[22:36] *** dogbert17 joined
[22:38] *** dogbert11 joined
[22:40] *** dogbert17 left
[23:07] *** dogbert17 joined
[23:11] *** dogbert11 left
