[00:02] *** reportable6 left
[01:05] *** reportable6 joined
[01:32] *** ggoebel_ left
[02:09] <Geth> ¦ MoarVM: 79ac88eae7 | Ruben++ | src/bithacks.h
[02:09] <Geth> ¦ MoarVM: Improve MVM_bithacks_next_greater_pow2 function
[02:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/79ac88eae7
[02:09] <Geth> ¦ MoarVM: a11b2c3833 | (Jimmy Zhuo)++ (committed using GitHub Web editor) | src/bithacks.h
[02:09] <Geth> ¦ MoarVM: Merge pull request #1167 from rbnx/master
[02:09] <Geth> ¦ MoarVM: 
[02:09] <Geth> ¦ MoarVM: Improve MVM_bithacks_next_greater_pow2 function
[02:09] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a11b2c3833
[02:24] *** frost joined
[03:03] *** frost left
[04:02] <timo> https://gist.github.com/timo/4e8d37590e7447d2d4c96db6a26fa1b0 - the spesh log parser script i'm working on offers this datastructure right now. for the moment it's ignoring comments, annotations, and even operators of instructions in BBs, and stats and spesh slots in specializations, but that stuff is on the map
[04:05] <timo> also, no reason not to offer json export or something
[04:06] <timo> but i'm expecting some interesting questions may be answerable when you've got the data in a format that's more structured than just lines
[04:28] *** evalable6 left
[04:28] *** linkable6 left
[05:29] *** linkable6 joined
[05:30] *** evalable6 joined
[05:47] <Nicholas> good *, *
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[07:15] *** nativecallable6 left
[07:15] *** benchable6 left
[07:15] *** linkable6 left
[07:15] *** reportable6 left
[07:15] *** sourceable6 left
[07:15] *** evalable6 left
[07:15] *** squashable6 left
[07:15] *** releasable6 left
[07:15] *** bisectable6 left
[07:15] *** notable6 left
[07:15] *** bloatable6 left
[07:15] *** unicodable6 left
[07:15] *** committable6 left
[07:15] *** greppable6 left
[07:15] *** shareable6 left
[07:15] *** quotable6 left
[07:15] *** tellable6 left
[07:15] *** coverable6 left
[07:15] *** statisfiable6 left
[07:16] *** quotable6 joined
[07:16] *** bisectable6 joined
[07:16] *** coverable6 joined
[07:16] *** linkable6 joined
[07:16] *** evalable6 joined
[07:16] *** releasable6 joined
[07:17] *** tellable6 joined
[07:17] *** nativecallable6 joined
[07:18] *** unicodable6 joined
[07:18] *** bloatable6 joined
[07:18] *** reportable6 joined
[08:16] *** statisfiable6 joined
[08:17] *** greppable6 joined
[08:17] *** squashable6 joined
[08:22] *** psydroid left
[08:22] *** AlexDaniel left
[08:25] *** AlexDaniel joined
[08:36] *** psydroid joined
[08:42] <lizmat> interesting question: https://www.reddit.com/r/rakulang/comments/pxqaxi/whats_native_ie_highmachineperformance_hybrid/
[09:16] *** sourceable6 joined
[09:18] *** committable6 joined
[09:18] <nine> lizmat: I'm not sure I actually understand the question though
[09:19] <lizmat> But I'm not clear by far, what's the approach for Raku code with native parts get developed with good ergonomics?
[09:19] <moon-child> I think they want numpy but in raku
[09:20] <moon-child> (technically inline::python, buut)
[09:21] <nine> lizmat: there's that sentence, but then they're also going on about Go, Rust, Julia and JITs
[09:23] <lizmat> well, the same question was asked on the mailing list as well, and Simon Proctor already started answering :)
[09:35] *** JimmyZ joined
[09:36] <JimmyZ> looks like tc->current_frame_nr is assigned but never used.
[09:38] <JimmyZ> jnthnwrthngtn:^
[09:40] *** JimmyZ left
[09:49] <jnthnwrthngtn> Curious, I thought the JIT uses it, but indeed, I see no references to it in the JIT
[09:53] <nine> Has last been used before commit https://github.com/MoarVM/MoarVM/commit/8d97efcf9a2fa2edab63512f516eeb4b84fbcf12
[09:56] * jnthnwrthngtn has a go at removing it
[10:03] * jnthnwrthngtn doesn't see the Windows JIT bug get solved in backlog
[10:06] <Geth> ¦ MoarVM/new-disp: a65827dc7b | (Jonathan Worthington)++ | 7 files
[10:06] <Geth> ¦ MoarVM/new-disp: Eliminate unused tc->current_frame_nr
[10:06] <Geth> ¦ MoarVM/new-disp: 
[10:06] <Geth> ¦ MoarVM/new-disp: This ceased to be used in 8d97efcf but was not removed. JimmyZ++ for
[10:06] <Geth> ¦ MoarVM/new-disp: noticing.
[10:06] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a65827dc7b
[10:06] <jnthnwrthngtn> I'm now wondering if we can get rid of next_sequence_nr too
[10:06] <jnthnwrthngtn> uh, next_frame_nr
[10:07] <jnthnwrthngtn> The JIT and OSR both look at tc->cur_frame->sequence_nr
[10:08] <jnthnwrthngtn> Ah, the JIT only in debug output
[10:09] <nine> So what does OSR use it for?
[10:11] <jnthnwrthngtn> Reducing the cost of polling for a ready candidate
[10:12] <jnthnwrthngtn> But I think we could replace it with something else
[10:12] *** ggoebel_ joined
[10:17] *** notable6 joined
[10:18] <Nicholas> "a small shell script"? :-)
[10:25] <Geth> ¦ MoarVM/new-disp: a00870b6de | (Jonathan Worthington)++ | 7 files
[10:25] <Geth> ¦ MoarVM/new-disp: Eliminate frame sequence numbers
[10:25] <Geth> ¦ MoarVM/new-disp: 
[10:25] <Geth> ¦ MoarVM/new-disp: The only remaining uses were:
[10:25] <Geth> ¦ MoarVM/new-disp: 
[10:25] <Geth> ¦ MoarVM/new-disp: * In the JIT, but there only for debug output, so easily removed
[10:25] <Geth> ¦ MoarVM/new-disp: * In OSR to reduce the cost of polling for new candidates. We need two
[10:25] <Geth> ¦ MoarVM/new-disp:   things: the number of candidates last observed and a way to know if
[10:25] <Geth> ¦ MoarVM/new-disp: <…commit message has 8 more lines…>
[10:25] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a00870b6de
[10:27] *** Altai-man joined
[10:28] <Altai-man> Blin?
[10:28] <jnthnwrthngtn> Can do.
[10:28] <jnthnwrthngtn> Is it working?
[10:28] <Altai-man> yes, I pinged and the domain was fixed
[10:28] <Altai-man> so should be
[10:28] <Altai-man> I'm doing bumps
[10:31] <jnthnwrthngtn> ok
[10:31] <jnthnwrthngtn> We may drop them again pre-merge, but if the blin needs it...
[10:31] <jnthnwrthngtn> I have a windows vm on this box, so currently downloading a compiler to see if I can figure out the Windows JIT bug
[10:35] <lizmat> why am I seeing a conflicts now on pulling new-disp ?
[10:36] <jnthnwrthngtn> Because we rebased it
[10:36] <jnthnwrthngtn> git reset --hrad origin/new-disp
[10:37] <jnthnwrthngtn> (And `git fetch origin` instead of `git pull` before running that, if you don't want to see the erorr on pull :))
[10:37] <nine> Or `git remote update`
[10:38] <jnthnwrthngtn> That's a new one on me :)
[10:39] <lizmat> well, all of these fail to make: perl Configure.pl --force-rebuild --gen-moar=new-disp --gen-nqp=new-disp --make-install    work for me
[10:41] <nine> To be clear: git remote update is an alternative to git fetch origin. the reset --hard is still needed
[10:41] <nine> I wonder why there's no convenience command for this though :) Or maybe there is but no one knows it?
[10:43] <Altai-man> ⏳ 338 out of 1698 modules processed
[10:43] <Altai-man> I'll do fast and slow runs today
[10:43] <dogbert17> Altai-man: what does that mean?
[10:44] <lizmat> tools/templates/MOAR_REVISION: needs merge
[10:44] <lizmat> error: you need to resolve your current index first
[10:44] <Altai-man> dogbert17, I'll run Blin with pakku and then zef to be extra sure we have more coverage.
[10:44] <dogbert17> aha, thx for the explanation
[10:45] <nine> lizmat: that's what git reset --hard should have taken care of?
[10:45] <lizmat> yeah... I guess it should've but it didn't
[10:46] <lizmat> did I ever mention I hate branches ?
[10:46] <lizmat> :-)
[10:48] <lizmat> ok, so I reset --hard it to a few commits ago
[10:48] <lizmat> what should I do now?
[10:49] <lizmat> git remote update
[10:49] <lizmat> git reset --hard origin/new-disp
[10:49] <lizmat> ?
[10:49] <jnthnwrthngtn> lizmat: Yes, you'll need to do it in each of the repos
[10:50] <lizmat> ah!
[10:51] <lizmat> rm -rf nqp
[10:51] <lizmat> is less work (for me)
[10:52] <nine> I'd say that too with a half a gigabit internet connection...
[10:52] <lizmat> :-)
[10:52] <Altai-man> ⏳ 1085 out of 1698 modules processed
[10:57] <jnthnwrthngtn> Windows is doing a good job of reminding me why I gave up developing on it...
[10:57] <nine> Yeah, it has this habit
[10:58] <nine> Yeah, it has this habit
[11:00] <lizmat> test-t: 1.115 / .665
[11:01] <lizmat> feels a tiny bit faster again
[11:01] * jnthnwrthngtn wonders how long until we break the 1s barrier :)
[11:06] <timo> i was thinking, maybe instead of main we want to go old-school and call it "trunk" but then maybe instead we use a synonym, like "boot" and then i was just thinking "shoe" ...
[11:09] <Altai-man> hmmm, perhaps it's something we should investigate... So there is a module called Grammar::Profiler::Simple. It does some magic with GrammarHOW and it fails because its tests are expecting the regexes to be called some exact number of times and the new times are lower! So the tests are wrong. Or so I thought... On the second thought, it's probably something we should look into?
[11:09] <Altai-man> I'll try to golf it, though the module is tiny.
[11:10] <Altai-man> ⏳ 1507 out of 1698 modules processed
[11:11] <Altai-man> EXPORTHOW.WHO.<grammar> = ProfiledGrammarHOW;
[11:11] <Altai-man> oh no, I cannot golf it
[11:12] <Altai-man> anyway, is it normal we do less find_method calls now?
[11:13] <nine> Altai-man: could be. After all new-disp tries to cache results of dispatch decisions (which find_method is part of) agressively
[11:13] <Altai-man> see https://github.com/raku-community-modules/Grammar-Profiler-Simple/blob/master/lib/Grammar/Profiler/Simple.pm for the implementation
[11:13] <Altai-man> and https://github.com/raku-community-modules/Grammar-Profiler-Simple/blob/master/t/csv.t for the tests
[11:14] <jnthnwrthngtn> Altai-man: Yes, it is
[11:14] <Altai-man> the difference is in this table: https://github.com/raku-community-modules/Grammar-Profiler-Simple/blob/master/t/csv.t#L15-L18 <- it expects for the token "value" to be called 6, 7, 14 times, but now it's called 3, 4 and 5 times, same as TOP and line.
[11:16] <jnthnwrthngtn> That's odd, it's the closure returned from `find_method` that does all of the work, not `find_method` itself
[11:16] <jnthnwrthngtn> (Which is how it should be.)
[11:16] <jnthnwrthngtn> So I'm not sure why this would have changed
[11:16] <Altai-man> ouch
[11:16] <Altai-man> then it's something to investigate, I guess. :/
[11:17] <Altai-man> I see some new modules, though not sure yet if races
[11:17] <Altai-man> ⏳ 1638 out of 1698 modules processed
[11:17] *** benchable6 joined
[11:18] *** shareable6 joined
[11:28] <jnthnwrthngtn> Also: is this a regression since the last blin run?
[11:29] <Altai-man> jnthnwrthngtn, Grammar one? No.
[11:30] <Altai-man> I was considering it to be the "tests are implementation-defined" case of failure.
[11:31] <jnthnwrthngtn> Well, that may be true, but I'll look into it
[11:32] *** squashable6 left
[11:32] <Altai-man> no hurry, I'll do a more complete overview for the fast round soon (8 modules to test left).
[11:32] <Altai-man> because I see some regressions compared to the last run, yes
[11:33] <Nicholas> "Anything is better than windows installers"? (this seems to be like my daughter - anything is better than cleaning her rook. Even baths and homework)
[11:34] *** squashable6 joined
[11:36] <jnthnwrthngtn> wtf, so I installed MSVC and ActivePerl becuase that's the thing I was used to when developing on Windows. Then I get to the NQP Configure script, it wants the module Win32::Console, which is apparently not included, so I try and install it from CPAN and it fails because it's looking for dmake (what on earth make is that...)
[11:37] <Nicholas> In the context of windows, I don't know.
[11:38] <Nicholas> I think the native Solaris make might (also) be called dmake, but likely it's a different 'd'
[11:38] <jnthnwrthngtn> "It looks like you don't make nmake.exe"...yes I do, I just built MoarVM with it
[11:39] <[Coke]> jnthnwrthngtn: reminds me of tryign to run things from a not-configured cmd prompt
[11:40] <jnthnwrthngtn> [Coke]: I'm using the developer one that should have all the compiler stuff on path
[11:40] <jnthnwrthngtn> I'd expect this if I wasn't
[11:40] <[Coke]> huh.
[11:42] <jnthnwrthngtn> (I can run nmake for sure)
[11:43] <Altai-man> alright, not when you fight with windows, but the blin run №1 (we need №2 for more info) is done. aside from the Profiler issue there is a new regression since last run, `Unexpected multi dispatch step VMNull`). Affected modules are: BioPerl6, HTTP::Request::FormData, SupplyTimeWindow. I updated the wiki page.
[11:45] <jnthnwrthngtn> Sigh
[11:46] <jnthnwrthngtn> OK, my patience with the Windows thing is shot, I think
[11:46] <jnthnwrthngtn> This is SEP.
[11:47] <jnthnwrthngtn> I don't really understand why NQP's Configure script is using ExtUtils::MakeMaker
[11:48] <jnthnwrthngtn> Oh, apparently IPC::Command::can_run uses it
[11:52] <[Coke]> I'm using activeperl & msvc here, but installing any perl5 deps was a long time ago.
[11:52] <[Coke]> I appreciate you trying to resurrect your windows env. though.
[11:53] <jnthnwrthngtn> How did you install them? I thought there was some ppm thing that pulled down binaries, but it seems gone in the ActivePerl I downloaded and there's just the CPAN client, which wants to build things
[11:54] <jnthnwrthngtn> ah, it's been dropped
[11:56] <jnthnwrthngtn> The CPAN client spits out a bunch of undefined warnings too, so I guess something is pretty busted somewhere
[12:01] <[Coke]> it was probably 3 years ago I installed perl on this box, so I don't recall, apologies.
[12:02] *** reportable6 left
[12:04] <[Coke]> I am using strawberry perl.
[12:04] <[Coke]> ... which contradicts what I just said. one sec. :)
[12:05] <[Coke]> yes, strawberry. wtf. I read my path, saw your send, and typed what you had instead. wtf.
[12:05] * [Coke] wanders off for another coffee
[12:05] <Nicholas> coffee bootstrapping fail?
[12:05] <Nicholas> (You typed that faster)
[12:07] <[Coke]> I made a cup at like 9pm last night, fell asleep having drunk like a tablespoon, and was finishing that cup this morning. guessing it's somehow lost its mojo?
[12:07] <[Coke]> Or... I'm an idiot. Probably that one.
[12:07] <Nicholas> If you fell asleep despite drinking coffee, maybe you need more cups of sleep, not more cups of coffee
[12:08] <[Coke]> I will try to spend some time this evening figuring out which commit broke the JIT on windows, but I'm sure we can sort it out, I'd say go ahead with the merge.
[12:08] <[Coke]> Nicholas: revenge bedtime procrastination!
[12:10] <[Coke]> crap, 2 blin failures?
[12:10] <Altai-man> so far, yes
[12:10] <Altai-man> we came a very long way, though
[12:11] <lizmat> reminds me of the time I needed a cup of coffee at 11pm to be able to sleep at all
[12:11] <lizmat> unhealthy lifestyle, I might add
[12:11] <lizmat> not recommended
[12:18] <ggoebel_> strawberry perl++  comes with everything you need. I haven't used ActivePerl since the days of Perl 5.6. Maintaining legacy perl with the occassional major perl version update was much easier with Strawberry Perl
[12:21] <jnthnwrthngtn> ggoebel_: I think I found ActiveState played better with MSVC back when I was regularly doing stuff on Windows, but perhaps that's no longer true
[12:23] <jnthnwrthngtn> Altai-man: The multi regression was a silly thinko; already got a patch locally, spectesting it
[12:25] <Altai-man> jnthnwrthngtn, you mean the one with VMNull? Great, glad to know it's a simple case.
[12:25] <Altai-man> ⏳ 650 out of 1702 modules processed
[12:25] <Altai-man> doing the slow run in the meanwhile...
[12:26] <jnthnwrthngtn> Altai-man: Yeah, I just looked at recent dispatcher commits, looked at where it broke, and it was obvious which commit must be to blame
[12:31] <jnthnwrthngtn> OK, on the profiler one...the problem is that the grammar never actually matches
[12:32] <jnthnwrthngtn> And that's why the numbers are wrong
[12:32] <jnthnwrthngtn> Not sure why yet
[12:40] <jnthnwrthngtn> Pushed the fix for the VMNull issue
[12:41] <lizmat> did we lose Geth ?
[12:42] <lizmat> ah, a rakudo fix
[12:43] <jnthnwrthngtn> Argh, I see the issue
[12:43] <jnthnwrthngtn> Yeah, we need to patch the module, I tink
[12:43] <jnthnwrthngtn> *think
[12:44] <Altai-man> ⏳ 926 out of 1702 modules processed
[12:44] <jnthnwrthngtn> I'll send a PR. It's using the wrong variable somewhere, got away with it before, but doesn't now
[12:46] <Altai-man> jnthnwrthngtn, it's a community module, so I'll merge it
[12:47] <Altai-man> ⏳ 983 out of 1702 modules processed
[12:47] <Altai-man> and the crunching continues
[12:48] <jnthnwrthngtn> Tursn out I had write access so https://github.com/raku-community-modules/Grammar-Profiler-Simple/commit/ace2417a732260d60293bd655275d144501774bb
[12:49] <Altai-man> yes, saw that
[12:49] <Altai-man> then we're out of regressions for now!
[12:50] <jnthnwrthngtn> Also checked that Grammar::Tracer isn't vulnerable in the same way; it isn't
[12:54] <jnthnwrthngtn> ggoebel_++ # Strawberry went much better
[12:56] <Nicholas> "Strawberry Perl Forever" (nothing to get hung about)
[13:07] <jnthnwrthngtn> :P
[13:07] <jnthnwrthngtn> Darn it, it installed successfully here
[13:08] <jnthnwrthngtn> Let's try with MVM_SPESH_BLOCKING=1
[13:09] <Altai-man> jnthnwrthngtn, there is also a spectest failure, so your efforts were not in vain...
[13:11] <jnthnwrthngtn> Spectest failure?
[13:12] <Altai-man> oops, not spec, but "On windows, running 'make test' with TEST_JOBS > 1 causes sporadic failures in nativecall tests. Different tests fail each time; running the tests one at a time do not fail.".
[13:14] <jnthnwrthngtn> OK, I've tried with MVM_SPESH_NODELAY=1 as well and I still can't hit the JIT bug
[13:14] <jnthnwrthngtn> So, no luck
[13:15] <jnthnwrthngtn> Can't fix what I can't repro, alas.
[13:15] <jnthnwrthngtn> Running parallel nmake test now
[13:21] <jnthnwrthngtn> Hm, I see two native call test failures that are independent of if running in parallel
[13:21] <jnthnwrthngtn> They are about C++ name mangling
[13:21] <jnthnwrthngtn> And fail even without parallel make
[13:22] *** patrickb joined
[13:22] <jnthnwrthngtn> So it seems I've failed to reproduce both of the Windows issues :(
[13:22] <patrickb> the c++ name mangling failures are known and can also be observed on master
[13:23] <jnthnwrthngtn> Ah, thanks
[13:23] <patrickb> iirc that is
[13:23] <jnthnwrthngtn> At a guess it'll depend on MSVC version
[13:28] <jnthnwrthngtn> Just realized I still had spesh blocking/nodelay set when I did the nmake test run, so trying again without it
[13:28] <jnthnwrthngtn> Alas, no, still only the name mangling failures
[13:29] <jnthnwrthngtn> So yeah, really no luck reproducing either issue. :(
[13:29] <[Coke]> jnthnwrthngtn: thank you for trying!
[13:30] <jnthnwrthngtn> Altai-man: Any more news from blin?
[13:30] <[Coke]> I also should see if I can repro the make test failures with the various DISABLE flags set
[13:30] <Altai-man> ⏳ 1426 out of 1702 modules processed
[13:30] <Altai-man> jnthnwrthngtn, nothing new
[13:31] <[Coke]> jnthnwrthngtn: what does systeminfo   | findstr /B /C:"OS Name" /C:"OS Version" say?
[13:31] <[Coke]> OS Name:                   Microsoft Windows 10 Enterprise
[13:31] <[Coke]> OS Version:                10.0.18363 N/A Build 18363
[13:32] <jnthnwrthngtn> OS Name:                   Microsoft Windows 10 Pro
[13:32] <jnthnwrthngtn> OS Version:                10.0.18362 N/A Build 18362
[13:33] <jnthnwrthngtn> Typical enterprise software :P
[13:34] <Altai-man> (unrelated to new-disp) also, that's old news, but https://github.com/MoarVM/MoarVM/pull/1472 has increased size of our release sources tarball from 5 mb to 13 mb. :(
[13:34] <jnthnwrthngtn> Also
[13:34] <jnthnwrthngtn> Microsoft (R) C/C++ Optimizing Compiler Version 19.29.30133 for x86
[13:35] <jnthnwrthngtn> Altai-man: Due to the ryu submodule being huge?
[13:35] <Altai-man> jnthnwrthngtn, yes, I think so.
[13:35] <jnthnwrthngtn> oh goodness, yes, it's got a load of Java JARs int ehre 
[13:36] <jnthnwrthngtn> Wonder if we can exclude them if it's our fork of it
[13:36] <jnthnwrthngtn> Yeah, it is
[13:36] <jnthnwrthngtn> Nicholas: ^^
[13:36] <Altai-man> probably worth experimenting, for the bisectable6's sake
[13:37] <[Coke]> jnthnwrthngtn: ah: maybe this:
[13:37] <jnthnwrthngtn> .oO( gotta be careful if saying "huge jars" out loud.. )
[13:37] <[Coke]> Microsoft (R) C/C++ Optimizing Compiler Version 19.16.27035 for x64
[13:38] <[Coke]> you have x86, I have x64.
[13:38] <jnthnwrthngtn> Wait, huh
[13:38] <jnthnwrthngtn> Then how do I have a MoarVM with JIT support, we don't do x86...
[13:39] <jnthnwrthngtn> Oh, bother
[13:39] <jnthnwrthngtn> The moar it found when I checked that was a different one on path from a Rakudo installation I did in the past when testing Comma on this machine
[13:40] <jnthnwrthngtn> Trying again with x64
[13:41] <timo> d'oh
[13:43] <Nicholas> "you say x86, I say x64" ... "let's call the whole thing off"
[13:44] <Nicholas> jnthnwrthngtn: the ^^ is "we want to exclude JARs from our ryu submodule" ?
[13:45] <jnthnwrthngtn> Nicholas: Yes, if possible
[13:46] <patrickb> jnthnwrthngtn: Did you use the devenv bat files to set up the build env in a console window? If yes, did you realize there are multiple such bat scripts for x64 and 86 and non C development?
[13:47] <jnthnwrthngtn> patrickb: Yeah, I'm already using the x64 one of them now
[13:47] <jnthnwrthngtn> Not sure why the one that looks like the standard one isn't that
[13:50] <patrickb> I was bitten by this in the past as well. It's a mystery to me why MS doesn't improve the abysmal developer experience with the Build Tools.
[13:51] <nine> patrickb: I think their fix is "use Windows Subsystem for Linux"
[13:51] <nine> And "stay within Visual Studio" for the rest
[13:54] <patrickb> :-(
[13:56] <jnthnwrthngtn> make test is clean for me with x64
[13:56] <jnthnwrthngtn> (no mangling errors)
[13:58] <jnthnwrthngtn> Sadly that means not the parallel nativecall errors either
[13:59] <jnthnwrthngtn> JIT is certainly built this time
[14:00] <nine> And make install?
[14:01] <jnthnwrthngtn> I just tried it with no options, with blocking and with nodelay, and it completes successfully under all of them :(
[14:01] <Altai-man> one small case is Cro::HTTP with `Tests out of sequence.  Found (49) but expected (48)` in the `http2-request-parser.t` but I don't know if it's a flapper or not, I'd say it is.
[14:02] <jnthnwrthngtn> I think it is
[14:03] <Altai-man> ⏳ 1663 out of 1702 modules processed
[14:03] <jnthnwrthngtn> So, really no luck on Windows repro, even with the JIT :(
[14:03] <jnthnwrthngtn> I kinda wanted to figure it out pre-merge, but I guess it can come after.
[14:08] <nine> If you can't repro, that probably also means that fewer people would be affected
[14:20] <jnthnwrthngtn> This is true. I'm just a bit surprised I can't given we're on very close OS and compiler versions
[14:23] <nine> And given that Windows is usually the much more standardized environment
[15:02] <[Coke]> weird.
[15:03] <[Coke]> I also figured you'd have a much more recent version of cl, but those seemed close, too.
[15:03] <[Coke]> close-ish, anyway
[15:05] <[Coke]> moved the windows failures on https://github.com/rakudo/rakudo/wiki/Rakudo-new-disp-branch to a separate section.
[15:05] <[Coke]> lizmat: be nice if we can solicit more windows feedback on the weekly once we merge.
[15:05] *** reportable6 joined
[15:06] <jnthnwrthngtn> This time we fixed everything blin found before blin got done :D
[15:07] <jnthnwrthngtn> But it's completed now, any nothing extra
[15:07] <jnthnwrthngtn> I think we can go for a merge
[15:07] <Nicholas> does the beer fridge agree?
[15:08] *** discord-raku-bot left
[15:10] *** discord-raku-bot joined
[15:10] <timo> very glad to hear, good work everybody
[15:11] <[Coke]> jnthnwrthngtn: one other difference is that I was always building with --moar-option=--debug, which shouldn't matter, but trying without that.
[15:12] <jnthnwrthngtn> Yeah, I didn't add that
[15:13] <[Coke]> I needed it for previous debug efforts.
[15:13] <jnthnwrthngtn> If that is the difference it'd be...curious
[15:16] *** patrickb left
[15:23] <jnthnwrthngtn> Merge is done locally, currently running tests
[15:24] <jnthnwrthngtn> The beer fridge is at home and I'm at the office, but yes, it's ready :)
[15:24] <Nicholas> and the callwith work from the office is pushed somehwere safe so that you can carry on with it safely next week?
[15:24] <jnthnwrthngtn> I'll be at the office for the rest of this week anyway ;)
[15:24] <jnthnwrthngtn> *:)
[15:25] <gfldex> Is this a good time to get unreasonably excited?
[15:31] <jnthnwrthngtn> I'm so excited I even prepared a blog post...
[15:31] <gfldex> I know that feeling! :D
[15:34] <Nicholas> Hopefully slightly longer than the speech described after " being invited back to Shrewsbury to open a new wing at his old school" in https://fampeople.com/cat-willie-rushton_2
[15:35] <jnthnwrthngtn> :D
[15:50] <[Coke]> uh, I just did nmake instll without failure..
[15:50] <[Coke]> tryin test now... :)
[15:50] <[Coke]> oh wait. I might have env vars set.
[15:53] <[Coke]> I did have jit disabled, but reran teh install with jit and it was fine.
[15:53] <[Coke]> wtf.
[15:57] <[Coke]> WTF. nativecall tests are passing. Was it really --moar-option=debug ??
[15:58] <[Coke]> jnthnwrthngtn++ for making me double check
[15:58] <[Coke]> er, --debug. you know
[15:58] <Nicholas> jnthnwrthngtn++ # for many things
[15:59] <[Coke]> I'll try a fresh build also with the debug option and check again.
[16:01] <[Coke]> I also did some git cleans recently; maybe something was sticky before?
[16:07] <Geth> ¦ MoarVM/master: 576 commits pushed by 9 authors
[16:07] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/a11b2c383318...962e835dc1c8
[16:08] <jnthnwrthngtn> The merges are pushed.
[16:08] <timo> party time
[16:15] <[Coke]> just saw Unhandled exception: The invoke ops are superseded by the general dispatch mechanism on current build on new-disp
[16:16] <timo> then your nqp or rakudo is out of date
[16:16] <[Coke]> weird. build died in new weird way using --debug
[16:17] <jnthnwrthngtn> https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/
[16:18] <[Coke]> switching to master...
[16:23] <nine> wooohooooooooo
[16:24] <jnthnwrthngtn> [Coke]: I wonder if --debug makes for a different stack frame layout and this somehow confuses the JIT, which relies on that...
[16:30] <Nicholas> new-disp is dead. Long live new-disp
[16:36] <timo> jnthnwrthngtn++
[16:37] <timo> after new-disp comes new-new-disp
[16:37] <Nicholas> At some point. But I think a beer or two comes first
[16:38] <Nicholas> and a good night's sleep
[16:49] <Nicholas> Your branch is behind 'origin/master' by 578 commits, and can be fast-forwarded.
[16:50] <Nicholas>  172 files changed, 20425 insertions(+), 12190 deletions(-)
[16:50] <Nicholas> Thud!
[16:50] *** nige joined
[16:52] <nige> just wanted to pop in from the irclogs - to say thanks to Jonathan++ and everyone on the team++ for your work! well done everybody
[16:53] <jnthnwrthngtn> :)
[16:55] <nige> very exciting to see the progress :-)
[16:56] <MasterDuke> congrats all around, very cool
[17:00] <MasterDuke> looks like a new warning, `src/spesh/graph.c:322:68: warning: passing argument 4 of ‘MVM_spesh_disp_initialize_resumption_op_info’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]`, also seen at src/spesh/disp.c:450:68:
[17:01] *** nige left
[17:01] *** nige joined
[17:06] *** nige left
[17:06] *** nige joined
[17:07] *** ggoebel_ left
[17:15] <Geth> ¦ MoarVM: c33111fd64 | (Jonathan Worthington)++ | 2 files
[17:15] <Geth> ¦ MoarVM: Be more constsistent to fix some const warnings
[17:15] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c33111fd64
[17:21] <[Coke]> jnthnwrthngtn: there were a bunch of warnings on the windows build for moarvm also. I had a list, can update it.
[17:23] <jnthnwrthngtn> Hm, it looked relatively quiet for me
[17:23] <jnthnwrthngtn> I did see a const mention, so maybe that was the one I just fixed
[17:23] <MasterDuke> master already had some windows-specific warnings
[17:24] <MasterDuke> one was kind of impossible to fix, caused by a macro that gets expanded to early or something like that
[17:24] <MasterDuke> "unrecognized escape characters'J'" or some such
[17:25] <jnthnwrthngtn> I spent a while trying to fix that a while back and concluded it'd need patching dynasm
[17:25] <jnthnwrthngtn> And that it wasn't worth it
[17:25] <jnthnwrthngtn> (For me :))
[17:30] <MasterDuke> Nicholas: my daughter probably wouldn't like cleaning a bird either
[17:53] <MasterDuke> jnthnwrthngtn: here's a significant perf regression from new-disp https://colabti.org/irclogger/irclogger_log/raku?date=2021-09-29#l199
[17:55] <jnthnwrthngtn> Interesting. Guess a profile will tell all...
[17:55] <MasterDuke> 31mb html profile
[17:57] <jnthnwrthngtn> Probably will need to look at a master one too 
[17:57] <Nicholas> it's all master now! :-)
[17:58] <jnthnwrthngtn> :P
[17:58] *** Altai-man left
[17:59] <jnthnwrthngtn> home time, bbl
[17:59] <MasterDuke> only 3.38% of callframes were eliminated by inlining
[18:00] <MasterDuke> 71% exclusive time in `build-flat-method-table	gen/moar/stage2/NQPCORE.setting:565	39079270	39030630	503162`
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:15] <lizmat> feels to me the EVAL $_ for @tests is maybe a sort of worst case for the new dispatch mechanism?
[18:17] <dogbert17> on my system it takes 38s on master but only 5 with 2021.04
[18:24] <lizmat> on mine 41
[18:25] <lizmat> I've just done a profile on a subset of the tests: There were 531 global deoptimization triggered by the profiled code.
[18:25] <lizmat> so that's...  bad
[18:26] <Nicholas> hopefully also "target rich environment"
[18:26] <lizmat> but indeed: build-flat-method-table is at the top with 54%, yet it claims to have been OSRd ?
[18:31] *** nige left
[18:31] <lizmat> doesn't look like that sub itself can be made any better
[18:31] *** nige joined
[18:35] <[Coke]> turning new-disp wiki page into two blocker tickets (which are sparse on details)
[18:36] *** nige left
[18:36] *** nige joined
[18:39] *** nige left
[18:40] <[Coke]> done, 4541, 4542 on rakudo
[18:51] <Nicholas> jnthnwrthngtn: ASAN is unimpressed by all your hard work. Or maybe it is. It's not saying anything.
[18:54] <jnthnwrthngtn> How many times is build-flat-method-table being run?!
[18:55] <lizmat> in the subset of the tests I did: 17K+ times (at 54% of wallclock)
[18:55] <jnthnwrthngtn> A quiet ASAN  is a happy ASAN
[18:55] <jnthnwrthngtn> lizmat: That...should not happen. :) 
[18:55] <lizmat> yeah... figured it's tickling something :-)
[18:55] <jnthnwrthngtn> Megamorphic blowup prevention mechanism in megamorphic blowup shocker...
[18:59] <lizmat> yeah... something's off  :-)
[19:29] <MasterDuke> build-flat-method-table was run 503k times in my profile of the whole test file
[19:42] <jnthnwrthngtn> Hm, the profile I ahve here...oh, I was about to say what MasterDuke just did :)
[19:42] <jnthnwrthngtn> Full polymorphic dispatch inline cache at:
[19:43] <jnthnwrthngtn>    at gen/moar/stage2/QRegex.nqp:560  (/home/jnthn/dev/MoarVM/install/share/nqp/lib/QRegex.moarvm:mergesubrule)
[19:43] <jnthnwrthngtn> There's handling of a big variety of method names, which suggests the problem here is a big variety of types.
[19:43] <jnthnwrthngtn> Question is, why.
[19:44] <jnthnwrthngtn> (Alternatively, said handling is busted too.)
[19:45] <lizmat> maybe some recursive snafu ?
[19:46] <jnthnwrthngtn> I wonder if we don't cache regex languages that we derive
[19:46] <jnthnwrthngtn> Then the cursor type would vary wildly
[19:46] <MasterDuke> it's compiling a lot of regexes, but i don't see any particular reason there should be new types created with a quick look through
[19:48] <jnthnwrthngtn> oh, no, we just don't share said quote lang caches, they seem to hang off $*W
[19:49] <jnthnwrthngtn> So it'll derive the same one hundreds of times
[19:49] <jnthnwrthngtn> dinner, bbiab
[19:54] *** brrt joined
[19:54] <brrt> \o
[19:54] <tellable6> 2021-09-28T22:36:18Z #moarvm <MasterDuke> brrt thanks, i'd forgotten there was a letv. that plus a fix for an actual error i'd made elsewhere and it's working
[19:55] <brrt> .tell jnthnwrtngtn that the frame sequence nr was quite useful in debugging... oh well
[19:55] <tellable6> brrt, I haven't seen jnthnwrtngtn around, did you mean jnthnwrthngtn?
[19:55] <brrt> yes, I did mean that tellable6
[19:55] <brrt> wasn't just 'jnthn' available? :-P
[19:55] <Nicholas> o/
[19:56] <lizmat> brrt: no, it wasn't  :-(
[19:56] <Nicholas> brrt: new-disp has landed. SMOP is now "JIT all the things". No pressure. :-)
[19:57] <Nicholas> brrt: someone else registered "jnthn" first, but last I looked they had never logged in again.
[19:57] <brrt> sadly
[19:57] <AlexDaniel> lizmat: how come? Somebody squatting on it on the new network?
[19:57] <AlexDaniel> Oh
[19:57] <AlexDaniel> :-/
[19:57] <brrt> that sucks...
[19:58] <Nicholas> libera *now* has a policy of (roughly) "use it or loose it" - nick registrations only stick if you log in again within [I forget]
[19:58] <brrt> ... so no time for playing earthbound then
[19:58] <MasterDuke> should become available after 10 weeks of non-use
[19:58] <MasterDuke> changing to 20 weeks soon
[19:58] <MasterDuke> https://libera.chat/news/lengthening-nick-expiry
[20:02] <lizmat> jnthnwrthngtn: fwiw, it feels to me that Cro::WebApp templates also take significantly longer to parse now
[20:03] <lizmat> it feels related to what Juerd found
[20:03] *** brrt left
[20:07] <[Coke]> how can you see the last-used date of another nick
[20:07] <[Coke]> ?
[20:07] <Nicholas> IIRC I was trying /whowas until I got bored
[20:17] <MasterDuke> can we call the mutex (un)locking functions in the jit?
[20:18] <MasterDuke> e.g., uv_mutex_lock
[20:28] *** ggoebel_ joined
[20:42] *** squashable6 left
[21:16] <jnthnwrthngtn> lizmat: Yeah, if the profile also points to the flat method table calculation and mergesubstates is high in the profile, it will be
[21:17] <jnthnwrthngtn> Will implement something for when the megamorphic explosion is in invocant type tomorrow.
[21:22] <jnthnwrthngtn> I figure we also will want a way to ask for new dispatch programs to be prepended at the callsite, not appeneded as they are now. Or maybe we should just switch to prepend as the default.
[21:23] <jnthnwrthngtn> For monomorphic sites it isn't an issue, for polymorphic ones latest first might reflect the current phase the program is in, and for megamorphic ones we want to hit the megamorphic handler ahead of any of the other things we stacked up at the callsite previously before we knew it was megamorphic.
[21:25] <MasterDuke> huh, https://gist.github.com/MasterDuke17/129ca09760840107045722beeef36731 (jit of getcomp) causes a segfault in nqp's t/qregex/01-qregex.t (and the rakudo build)
[21:25] <MasterDuke> in uv_mutex_lock
[21:27] <MasterDuke> oh, uv_mutex_t is a struct. don't you have to do something different to pass a struct into a function call in asm?
[21:30] <MasterDuke> maybe that's why the (un)locking functions are never (explicitly) called in the jit
[21:33] <jnthnwrthngtn> I may be forgetting, but I thought it wanted a pointer to the struct?
[21:33] <jnthnwrthngtn> afk again for a bit
[21:34] <MasterDuke> oh, i completely missed the & in front. jnthnwrthngtn++
[21:39] <MasterDuke> hm, switching the last `mov ARG1, MVMINSTANCE:ARG1->mutex_compiler_registry` to `lea ARG1, MVMINSTANCE:ARG1->mutex_compiler_registry` gives a different segault (but still in nqp's t/qregex/01-qregex.t (and the rakudo build))
[21:58] <japhb> MasterDuke: Wouldn't you need to do it for both the first and last?
[21:58] <japhb> Or is the & only on *one* of the lock/unlock pair?
[21:59] <MasterDuke> huh, don't know why i said 'last', i did it for both
[22:34] *** ggoebel_ left
[22:53] <MasterDuke> hm. mostly unrelated other question, why doesn't the jit MVMROOT anything? obviously the macro wouldn't work, but i don't see any MVM_gc_root_temp_(push|pop) used either
[22:55] <timo> every register that can hold object pointers is already rooted
[22:55] <timo> by register i mean WORK[blah]
[22:56] <japhb> Noticed that myself as I've been reading through.  *So far*, my guess would be that you only care about opportunities for allocation (triggering GC), because the registers ... what timo said ... so in the case that you're calling some MVM_routine, you'd expect that any rooting needed would happen there.
[22:57] <japhb> There are a couple cases I haven't researched enough to feel sure about though.
[22:58] <japhb> Turns out the JIT is *way* bigger than I expected.  A lot of that seems really repetitive though.
[22:58] <timo> i think we have at least one spot where we refresh a pointer from the frame's WORK space
[23:17] <timo> the exprjit also has information about which ops allocate, maybe it does something with that
[23:37] *** evalable6 left
[23:37] *** linkable6 left
[23:43] *** squashable6 joined
