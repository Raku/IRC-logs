[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:20] *** Geth left
[00:20] *** Geth joined
[00:27] *** Geth left
[00:27] *** Geth joined
[00:31] *** Geth left
[00:32] *** Geth joined
[00:36] *** Geth left
[00:36] *** Geth joined
[00:47] *** Geth left
[00:47] *** Geth joined
[00:52] *** Geth left
[00:52] *** Geth joined
[01:00] *** Geth left
[01:01] *** Geth joined
[01:05] *** Geth left
[01:05] *** Geth joined
[01:37] *** Geth left
[01:38] *** Geth joined
[01:42] *** Geth left
[01:42] *** Geth joined
[01:57] *** discord-raku-bot left
[03:22] *** sourceable6 left
[03:22] *** notable6 left
[03:22] *** nativecallable6 left
[03:22] *** coverable6 left
[03:22] *** greppable6 left
[03:22] *** releasable6 left
[03:22] *** committable6 left
[03:22] *** shareable6 left
[03:22] *** bloatable6 left
[03:22] *** squashable6 left
[03:22] *** evalable6 left
[03:22] *** unicodable6 left
[03:22] *** benchable6 left
[03:22] *** reportable6 left
[03:22] *** linkable6 left
[03:22] *** tellable6 left
[03:22] *** bisectable6 left
[03:22] *** quotable6 left
[03:22] *** statisfiable6 left
[03:22] *** committable6 joined
[03:23] *** linkable6 joined
[03:23] *** reportable6 joined
[03:24] *** unicodable6 joined
[03:24] *** sourceable6 joined
[03:24] *** notable6 joined
[03:24] *** quotable6 joined
[03:24] *** nativecallable6 joined
[03:25] *** greppable6 joined
[04:23] *** evalable6 joined
[04:23] *** bisectable6 joined
[04:24] *** coverable6 joined
[04:25] *** releasable6 joined
[04:25] *** bloatable6 joined
[05:23] *** tellable6 joined
[05:24] *** shareable6 joined
[05:24] *** benchable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:23] *** statisfiable6 joined
[06:23] *** squashable6 joined
[06:57] <Nicholas> good *, #moarvm 

[08:17] <MasterDuke> ugh, i thought this radix change would be pretty trivial. i don't know if it's because i've only been working on it pretty late, or i underestimated the difficulty, but i expected to be at the benchmarking stage right now, not the `say (:3<120>).WHAT` prints `(Rat)` stage...

[08:35] <Nicholas> m: say (:3<120>).WHAT

[08:35] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(Int)␤»

[08:37] <MasterDuke> i don't even know why it's doing it

[08:38] <Nicholas> (me neither) but I think technically it's true, as rational numbers are a superset of integers. But this isn't helpful...

[09:33] <timo> MasterDuke: have you tried using the MVM_COVERAGE_LOG to find the code path?

[09:36] <MasterDuke> hm, good idea

[09:39] *** dogbert17 left
[09:39] *** moon-child left
[09:45] *** TempIRCLogger__ left
[09:46] *** statisfiable6 left
[09:46] *** Kaiepi left
[09:46] *** rypervenche left
[09:46] *** Colt left
[09:46] *** JRaspass left
[09:46] *** jdv left
[09:46] *** harrow left
[09:46] *** reportable6 left
[09:46] *** benchable6 left
[09:46] *** shareable6 left
[09:46] *** tellable6 left
[09:46] *** bloatable6 left
[09:46] *** releasable6 left
[09:46] *** coverable6 left
[09:46] *** bisectable6 left
[09:46] *** evalable6 left
[09:46] *** AlexDaniel left
[09:46] *** ilogger2 left
[09:46] *** greppable6 left
[09:46] *** nativecallable6 left
[09:46] *** notable6 left
[09:46] *** linkable6 left
[09:46] *** committable6 left
[09:46] *** psydroid left
[09:46] *** samcv left
[09:46] *** leedo left
[09:46] *** timo left
[09:46] *** sena_kun left
[09:46] *** Geth left
[09:46] *** Util_ left
[09:46] *** codesections left
[09:46] *** Voldenet left
[09:46] *** squashable6 left
[09:46] *** quotable6 left
[09:46] *** sourceable6 left
[09:46] *** unicodable6 left
[09:46] *** frost left
[09:46] *** [Coke] left
[09:46] *** vrurg left
[09:46] *** nine left
[09:46] *** ugexe left
[09:46] *** tbrowder left
[09:46] *** japhb left
[09:46] *** gfldex left
[09:46] *** camelia left
[09:46] *** lizmat left
[09:46] *** SmokeMachine left
[09:46] *** nebuchadnezzar left
[09:46] *** Nicholas left
[09:46] *** leont left
[09:46] *** jnthnwrthngtn left
[09:46] *** rba left
[09:52] *** Colt left
[09:52] *** Colt joined
[10:07] *** Geth left
[10:07] *** Geth joined
[10:13] <MasterDuke> huh, didn't really help. it's happening at compile time, so i tried putting it in an EVAL, but still can't find it (in the coverage log)

[10:14] <timo> tried --optiimze=0?

[10:14] <timo> or =off

[10:14] <timo> (on the rakudo commandline)

[10:16] *** Geth left
[10:16] *** Geth joined
[10:17] <MasterDuke> oh, tried that before, but not with the coverage log

[10:18] <MasterDuke> why don't i see any of Grammar.pm6 or Actions.pm6 in the log?

[10:18] <MasterDuke> s/pm6/nqp/g

[10:19] <timo> good question

[10:19] <MasterDuke> oh, i do in a full log, but not when i used nqp::coveragecontrol to only turn it on in the EVAL

[10:38] <MasterDuke> ok, looks like it's a problem with rad_number

[10:40] <MasterDuke> ok, this is blowing my mind

[10:41] <MasterDuke> look at these lines in this patch https://gist.github.com/MasterDuke17/cbf7f0268b18b0e4e19f45d7d3286199#file-radix-patch-L38-L39

[10:42] <MasterDuke> two prints, one right after the other

[10:42] <MasterDuke> and this is the output when i run `say :3<122>`

[10:42] <MasterDuke> i: 122

[10:42] <MasterDuke> 17 3 3

[10:42] <MasterDuke> 0 1 2

[10:42] <MasterDuke> wants Rat: 51 3

[10:42] <MasterDuke> 17

[10:43] <MasterDuke> where is the "f: <...>"!?!?!?

[10:45] <timo> the ?? eats it

[10:46] * MasterDuke retracts the question and looks for a way to purge the chat logs

[10:51] <timo> happens to the best of us

[10:52] <timo> wanna implement a tiny little optimizer pass that warns about this? for example, a non-empty string concatenated with any variable will always evaluate to True

[10:56] <MasterDuke> can look into that after i figure this out

[10:57] <MasterDuke> ah, figured out what's going on, now to see if there's an easy fix

[10:57] <MasterDuke> m: use nqp; say nqp::radix_I(3, ".0", 1, 4, Int)

[10:57] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(0 1 2)␤»

[10:58] <MasterDuke> i'm getting the same result locally, which is the problem, it should be (0, 0, 2)

[10:59] <MasterDuke> since i then raise radix to the power of the second element to get what was the value before

[11:03] <timo> but anything raised to the power of 0 is 1, isn't it? or does that refer to the 1 after the ".0"?

[11:06] <MasterDuke> yeah. the problem is that currently i'm counting the trailing 0 as being a parsed character, when in this case it shouldn't be

[11:06] <MasterDuke> m: use nqp; say nqp::radix_I(3, ".0", 1, 0, Int)

[11:06] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(0 3 2)␤»

[11:15] <MasterDuke> i was trying to be a little too clever, but now all spectests pass

[11:15] <MasterDuke> time to see if this is a net positive improvement now

[11:16] <timo> glad to hear

[11:29] *** evalable6 left
[11:29] *** linkable6 left
[11:31] *** linkable6 joined
[11:40] <MasterDuke> timo: btw, any chance you can generate some more app images? they're convenient to test with when i make changes over the whole moarvm/nqp/rakudo stack (i.e., i can't just quickly `git stash` a change in moarvm and rebuilt just it)

[11:41] <timo> i'll have to spend a bit of time figuring out github actions or whatever it is that we replaced travis-ci with

[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:32] *** evalable6 joined
[12:38] *** squashable6 left
[12:42] *** discord-raku-bot joined
[14:39] *** squashable6 joined
[14:59] *** frost left
[15:39] *** Geth left
[15:39] *** Geth joined
[16:27] <jdv> this is the recent blin run - https://github.com/rakudo/rakudo/issues/4667

[16:27] *** Geth left
[16:27] *** Geth joined
[16:28] <sena_kun> jdv, o/

[16:29] <sena_kun> jdv, thanks for doing it. November is the eternal false positive, so it should be filtered out before posting.

[16:30] <sena_kun> TCP::LowLevel has a PR with a fix, so that too.

[16:31] <jdv> ah, thanks.

[16:31] <sena_kun> I'd vote for putting it into ignored modules in Blin, unless you have time and passion to actually investigate what on earth is happening with this module (it's a bug in blin, zef, rakudo or whatever in between).

[16:32] <nine> jdv: NativeHelpers::Callback is weird in that it didn't appear in the https://github.com/rakudo/rakudo/issues/4643 Blin run but the commits the bisection points to have already been present then

[16:33] <nine> That's also the only module where I see action needed by me

[16:33] <sena_kun> right, others want some attention from codesections I think.

[16:39] <nine> jdv: I cannot reproduce the NativeHelpers::Callback issue

[16:39] <jdv> nine: doesn't Algorithm::Evolutionary::Simple bisects to a commit of yours as well?

[16:41] <nine> jdv: yes it does. But the commit itself is innocent. It merely exposed the huge number of issues surrounding native unsigned integers that affect all parts of the stack and which I've worked on cleaning up for the past 2 weeks. But as I said in my initial assessment, this is not gonna be a quick fix but rather a month long project - optimistically speaking.

[16:42] <nine> The only reason Algorithm::Evolutionary::Simple sort of worked before is another rakudo bug.

[16:42] <nine> Does blin run tests in parallel?

[16:42] <MasterDuke> i think so

[16:43] <jdv> yes it does

[16:43] <jdv> i can repro NativeHelpers::Callback outside of blin on head

[16:44] <jdv> so do we just ignore the Algorithm::Evolutionary::Simple failure then?  i'm new here...

[16:44] <nine> With only one test running at a time?

[16:44] <jdv> yes, https://gist.github.com/jdv/9d13d434463971ac4e838614d7b9bda1

[16:46] <nine> jdv: I see no other choice for Algorithm::Evolutionary::Simple. Fix is in the works, but I wouldn't even promise that it can make it into the release after the upcoming one. Unfortunately it looks like the only way to fix this one issue is to basically fix all of them.

[16:46] <nine> And disabling the (in this particular case) bogus error message causes spec test failures.

[16:50] <nine> jdv: still no joy in reproducing locally :/ Seems like I won't be able to debug this

[16:52] <dogbert11> FWIW, I can repro the test failures in NativeHelpers::Callback

[16:53] <dogbert11> nine: on my system valgrind is quite upset with 01-basic.t

[16:57] <dogbert11> 1..8

[16:57] <dogbert11> ==668293== Conditional jump or move depends on uninitialised value(s)

[16:57] <dogbert11> ==668293==    at 0x4A8841C: MVM_intcache_get (intcache.c:42)

[16:57] <dogbert11> ==668293==    by 0x4AB34FA: MVM_repr_box_int (reprconv.c:656)

[16:57] <dogbert11> ==668293==    by 0x4A82111: nativecall_cast (nativecall.c:527)

[16:57] <dogbert11> ==668293==    by 0x4A5F761: MVM_interp_run (interp.c:4072)

[17:00] <nine> Why are suddenly all my problems about ints?! :D

[17:01] <dogbert11> they like you :)

[17:01] <nine> Maybe its because I watch all those Numberphile Youtube videos when cooking...

[17:03] <dogbert11> perhaps the valgrind report is bogus?

[17:04] <nine> Nah, it's too close to be coincidence

[17:07] <nine> Actually I get a ton of "Conditional jump or move depends on uninitialised value" errors with valgrind

[17:11] <dogbert11> yeah, I only posted the first in the list

[17:11] <dogbert11> hopefully there's only one problem ...

[17:12] * dogbert11 is struggling with part two of todays AoC problem

[17:25] * [Coke] needs to catch up again!

[17:27] *** evalable6 left
[17:27] *** linkable6 left
[17:28] *** evalable6 joined
[17:29] *** linkable6 joined
[17:33] <nine> I'm starting to suspect that the valgrind output might be bogus after all. But then we're back at square 1 again.

[17:33] <nine> And I still can't reproduce the actual failure.

[17:35] <nine> Or no, valgrind is right indeed!

[17:36] <nine> What does the test do? It calls make_a_thing which allocates some memory but doesn't initialize it: https://github.com/CurtTilmes/raku-nativehelpers-callback/blob/b8790f15abdf5ab6524fe38b65ec71e1d2a4e675/t/callback.c#L15

[17:37] <nine> Then it calls NativeHelpers::Callback.id on the pointer it got back: https://github.com/CurtTilmes/raku-nativehelpers-callback/blob/master/t/01-basic.t#L36

[17:37] <nine> This just casts the thing it got to int64: https://github.com/CurtTilmes/raku-nativehelpers-callback/blob/master/lib/NativeHelpers/Callback.rakumod#L8

[17:38] <nine> The purpose is probably to use the pointer value as a hash key. But nativecallcast actually dereferences the pointer it got and creates the number from the dereferenced memory location! https://github.com/MoarVM/MoarVM/blob/master/src/core/nativecall.c#L561

[17:38] <nine> But remember: that is uninitialized memory

[17:40] <nine> jdv: but in the module! ^^^

[17:46] <dogbert11> looks like you're off the hook

[17:47] <jdv> cool.  i'll note that stuff.

[18:02] *** reportable6 left
[18:48] *** [Coke] left
[18:58] *** [Coke] joined
[18:59] *** Geth left
[19:00] *** Geth joined
[19:00] *** linkable6 left
[19:04] *** Geth left
[19:04] *** Geth joined
[19:08] *** Geth left
[19:09] *** Geth joined
[19:40] *** Geth left
[19:40] *** Geth joined
[20:01] *** linkable6 joined
[20:05] *** reportable6 joined
[20:39] <jdv> is https://github.com/rakudo/rakudo/issues/4667#issuecomment-993892953 suggesting add those as blockers?

[20:42] *** vrurg left
[20:44] *** vrurg joined
[20:56] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1619: Change nqp::radix(_I)? to return # chars converted

[20:56] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1619

[20:57] *** Geth left
[20:57] *** Geth joined
[21:01] <japhb> MasterDuke: Did you already do the performance tests on those changes?  Or is that waiting for the other PRs?

[21:01] <MasterDuke> i've done some, i was going to put the numbers in the rakudo PR

[21:24] *** patrickb joined
[21:29] *** sena_kun left
[21:31] *** sena_kun joined
[21:58] <jdv> nine: libXML's issues may be from the nativecall stuff.  seems to bisect to the same spot NativeHelpers::Callback does.

[22:04] *** Geth left
[22:04] *** Geth joined
[22:26] *** patrickb left
[22:28] *** Geth left
[22:28] *** Geth joined
