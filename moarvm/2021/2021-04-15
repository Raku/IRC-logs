[00:49] *** evalable6 left
[00:49] *** linkable6 left
[00:51] *** evalable6 joined
[00:51] *** linkable6 joined
[01:05] *** cog joined
[01:16] *** japhb joined
[01:58] *** MasterDuke left
[02:02] *** Voldenet joined
[02:02] *** Voldenet left
[02:02] *** Voldenet joined
[05:37] *** frost-lab joined
[06:00] <nwc10> good *, #moarvm 

[06:07] *** domidumont joined
[07:00] *** MasterDuke joined
[07:03] <nwc10> jnthn: did you see this https://www.cs.rpi.edu/~milanova/docs/dls2020.pdf -- The results of the comparison supportour argument from Sect. 2 that MyPy and PyType are essen-tially two different type systems. For most major program-ming languages, such a finding would come as a shock, soit is somewhat surprising to find Python in this situation

[07:03] <nwc10> gah, PDF copy-paste eats spaces sometimes

[07:04] <nwc10> also for what they tested, there were a lot of errors. They wondered if annotations are being used more as documentation than actual type checking. And of course, it doesn't help that there's no runtime type checking.

[07:30] <MasterDuke> jnthn: yeah, when i tried with MVM_SPESH_BLOCKING the difference between an un-used where and no where disappeared

[07:49] *** zakharyas joined
[09:10] *** Kaeipi joined
[09:11] <nwc10> r: say 1e23

[09:11] <camelia> rakudo-jvm 08b449e1a: OUTPUT: ¬´Error while reading '/home/camelia/p6eval-token': Permission denied at /home/camelia/rakudo-j-inst/bin/eval-client.pl line 10.‚ê§¬ª

[09:11] <camelia> ..rakudo-moar ad81b9806: OUTPUT: ¬´9.9999999999999992e+22‚ê§¬ª

[09:12] <nwc10> r: say 1e23-9.9999999999999992e+22

[09:12] <camelia> rakudo-jvm 08b449e1a, rakudo-moar ad81b9806: OUTPUT: ¬´0‚ê§¬ª

[09:12] <nwc10> today, this is not my favourite number.

[09:12] <nwc10> if you format it with %15g, it comes out as 1e23. %16g or %17g gives the other representation.

[09:17] <MasterDuke> jnthn: question you probably have some idea about https://colabti.org/irclogger/irclogger_log/raku-dev?date=2021-04-15#l26

[09:30] <Geth> ¬¶ MoarVM: MasterDuke17++ created pull request #1470: Simplify pow_I and change to never return Nums

[09:30] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1470

[10:02] <jnthn> https://6guts.wordpress.com/2021/04/15/raku-multiple-dispatch-with-the-new-moarvm-dispatcher/

[10:03] <jnthn> MasterDuke: That's odd, I can imagine it being inlined, but if it's not being...that's strange

[10:05] <MasterDuke> yeah, there's some more chat over in #raku-dev

[10:08] *** MasterDuke left
[10:09] *** MasterDuke joined
[11:17] *** zakharyas left
[11:22] *** moritz_ is now known as moritz

[12:34] *** demostanis[m] joined
[12:35] *** demostanis[m] left
[12:39] <lizmat> [14:37:37]  <demostanis[m]>	Saying this here as I can't write in #moarvm, it looks like MoarVM/libatomic_ops is outdated, it would be great to either use the original repo or to merge some PRs (such as https://github.com/ivmai/libatomic_ops/pull/32)

[12:42] <jnthn> Uh...why can't they write here? 

[12:43] <MasterDuke> i assume because there's no matrix bridge to here?

[12:43] <MasterDuke> if that's what the [m] after their name means

[12:45] *** demostanis[m] joined
[12:45] *** demostanis[m] left
[12:45] <MasterDuke> dogbert17: ping, you're good at testing the 3rdparty bumps, looks like libatomicops is a bit out of date of upstream

[12:45] <tellable6> MasterDuke, I'll pass your message to dogbert17

[12:46] <MasterDuke> yeah, it's a matrix thing. "You do not have permission to post to this room. I'm using matrix."

[12:46] <MasterDuke> jnthn: btw, how does one "stick logging on the pow_I op so that we log its result and then can do guard and maybe toss out the error branch if we rarely hit"?

[12:48] <nine> MasterDuke: think MVM_spesh_log_* calls

[12:49] <jnthn> MasterDuke: Approximately 1) add the :logging (or is it :log) attribute in the oplist and re-generate, 2) tweak the interpreter to perform the result type logging just like ops like getlex_o do, 3) see if you already see it in the spesh stats, 4) probably tweak facts.c (again getlex_o is a good pattern to follow)

[12:49] <jnthn> I think the optimizer will then have the facts and do the right thing

[12:50] <MasterDuke> thanks. not sure how much more time i'll have today, but will play around with that when i can

[12:53] <jnthn> btw, I realized that smart stringify and smart numify in NQP can eventually go away in favor of new-disp :)

[12:53] <jnthn> Less special cases!

[12:53] <MasterDuke> but while we're on the subject, does anybody have an opinion re the pow_I op (via its MVM_bigint_pow) ignoring the sign of the exponent and always returning base**|exponent| ? vs doing the negation in nqp/rakudo if required?¬† they might still have to check the sign of the exponent to decide how to interpret the response, but could at least

[12:53] <MasterDuke> unconditionally call pow_I

[12:54] <MasterDuke> interesting, new-disp brings all sorts of goodness to the table

[12:55] <MasterDuke> jnthn: btw, will there be any sort of performance change wrt constants for parameters? e.g., multi a($b, 1) { ... }; multi a($b, $c) { ... };

[12:56] <jnthn> That's the same situation as `where`

[12:56] <jnthn> So will get the same benefits as discussed in the blog post

[12:57] <nwc10> fewer special cases vs less pedantry. Oops. :-)

[12:57] <MasterDuke> any possibility for extra optimization of the constant case?

[12:59] <jnthn> I think we already code-gen it a bit better

[12:59] <jnthn> Oh, you're thinking if the constants match? Hmm. Interesting.

[13:00] <jnthn> "Not yet" :)

[13:00] <MasterDuke> heh

[13:05] <jnthn> .oO( I should make less of these English mistakes... )

[13:08] <sena_kun> jnthn, but do you really want to prefer other language mistakes...

[13:08] <nwc10> jnthn: add it to you Czech list of resolutions?

[13:09] <jnthn> Czech doesn't do this countable/uncountable silliness, so far as I can tell :P

[13:14] <MasterDuke> i've always found that in interesting rule because of how it potentially conflicts with number theory. e.g., "there are fewer people in the office than in the kitchen" is relatively easy to get correct, and so is "i'd rather have less poverty in the world", but "there are fewer real numbers than there are functions mapping real number to real

[13:14] <MasterDuke> numbers" sounds correct even though both things are uncountable

[13:16] <nwc10> that's a good point.

[13:17] <jnthn> I dunno why I seem to lack the intuition to use "fewer" that many folks apparently have, despite being a native speaker. Wonder if some dialects are less into it than others...

[13:18] <nwc10> that sounds like a plausible explanation

[13:18] <lizmat> yes,  stuff like that can differ in dialects

[13:19] <lizmat> speakers the local dialect here do not find it strange to refer to their wIve with the local equivalent of "him" or "it"

[13:19] <MasterDuke> ha

[13:27] *** frost-lab left
[13:38] *** zakharyas joined
[14:34] <nine> MasterDuke: got it

[14:35] <MasterDuke> oh?

[14:35] <MasterDuke> do tell

[14:41] <Geth> ¬¶ MoarVM/propagate_spesh_facts_after_guard_elimination: 74505ce54d | (Stefan Seifert)++ | src/spesh/optimize.c

[14:41] <Geth> ¬¶ MoarVM/propagate_spesh_facts_after_guard_elimination: Propagate spesh facts after optimizing away a guard

[14:41] <Geth> ¬¶ MoarVM/propagate_spesh_facts_after_guard_elimination: 

[14:41] <Geth> ¬¶ MoarVM/propagate_spesh_facts_after_guard_elimination: When we optimize a guard into a set (for in the hopes of it getting eliminated

[14:41] <Geth> ¬¶ MoarVM/propagate_spesh_facts_after_guard_elimination: later on), we missed the opportunity to copy the facts from the source

[14:41] <Geth> ¬¶ MoarVM/propagate_spesh_facts_after_guard_elimination: register. This lead to missed optimization opportunities like not inlining

[14:41] <Geth> ¬¶ MoarVM/propagate_spesh_facts_after_guard_elimination: a function, because we didn't know that we actually knew the callee.

[14:41] <Geth> ¬¶ MoarVM/propagate_spesh_facts_after_guard_elimination: review: https://github.com/MoarVM/MoarVM/commit/74505ce54d

[14:42] <MasterDuke> ha, not a huge change code-wise. does it now say it can't inline infix:<**> because it's too big?

[14:42] <nine> Doesn't actually help with infix:<**> because that's still too large to inline, but we knew that.

[14:42] <nine> At least it's now sp_fastinvoke_o   r3(6),   r5(1), liti16(0)  # [002] could not inline 'infix:<**>' (3541) candidate 0: bytecode is too large to inline

[14:43] <MasterDuke> does it help that example at all, even if the inline still isn't happening?

[14:45] <MasterDuke> ooo, it does. locally i see it decreasing from 4.2s to 3.7s

[14:46] <MasterDuke> Can NOT inline infix:<**> (3543) with bytecode size 320 into¬† (1): target has a :noinline instruction - ins: getlexstatic_o

[14:47] <nine> 1.84x speedup (2.821623668s vs. 5.199049401s)

[14:47] <sena_kun> Wow, that's a nice improvement.

[14:47] <nine> my values are on master

[14:48] <nine> rakudo master

[14:48] <MasterDuke> hm, you do have better hardware, right?

[14:48] <sena_kun> I know you folks know it, but still a little remainder to try to keep the master in a nice state before release.

[14:49] <nine> sena_kun: come on.... pretty much all I do is fix bugs and especially regressions :)

[14:49] <sena_kun> nine, you are doing a really outstanding work, it's just me trying to be extra careful not to dis-communicate about state of things in some silly way. :)

[14:50] <nine> just having fun with you.... I appreciate having a dilligent release manager very mcuh

[14:53] <MasterDuke> heh. now i need to go back and re-test rakudo master vs my branch

[14:56] <MasterDuke> (unrelated, but i see that from-posix-nanos and term:<now> can't be inlined either. both because `target has a :noinline instruction - ins: speshresolve`)

[14:59] <MasterDuke> oh, but not a big deal here, they aren't called frequently. they do get inlined when called in a loop

[16:21] <cog> I don't know if their other tools to search issues in many GitHub repoa. But there is viscode notebook extension that does just that demonstrated at about the 10minute of that video. https://youtu.be/D-AXZZDTQhM

[16:22] <cog> Probably useful to search at once in Rakudo/nqp/MoarVM/roast

[16:44] <lizmat> re release: I think  the decont logging PR will need to be reverted before release

[16:44] <lizmat> as it appears to generally slow down things *and* make things less stable

[16:56] <sena_kun> lizmat, please do.

[16:57] <lizmat> sena_kun: I would if I'd be 100% sure what to revert exactly, as some changes followed the PR

[16:57] <lizmat> MasterDuke ^^  ??

[17:11] *** Kaeipi left
[17:22] *** domidumont left
[17:26] *** Kaiepi joined
[18:00] <Geth> ¬¶ MoarVM: 9481289950 | (Stefan Seifert)++ | src/core/interp.c

[18:00] <Geth> ¬¶ MoarVM: Revert "Always log the type coming out of an nqp::decont"

[18:00] <Geth> ¬¶ MoarVM: 

[18:00] <Geth> ¬¶ MoarVM: This reverts commit 9b94bab9eb2803e19c4616a4b0d163d96e41cd1b.

[18:00] <Geth> ¬¶ MoarVM: 

[18:00] <Geth> ¬¶ MoarVM: The commit is associated with a number of slow downs or even crashes. While

[18:00] <Geth> ¬¶ MoarVM: it is most probably innocent by itself and just uncovered other existing

[18:00] <Geth> ¬¶ MoarVM: issues, revert it for the upcoming release to buy us time to investigate

[18:00] <Geth> ¬¶ MoarVM: thoroughly.

[18:00] <nine> lizmat: ^^^

[18:00] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9481289950

[18:12] *** zakharyas left
[18:19] <MasterDuke> nine: after that revert, but with your facts change applied, i get `Can NOT inline infix:<**> (3543) with bytecode size 458 into¬† (1): bytecode is too large to inline` on my branches

[18:37] <lizmat> I will bump MoarVM and NQP, so sena_kun can do a blin ?

[18:44] <MasterDuke> sure

[18:47] *** lucasb joined
[19:34] * sena_kun thinks it's time to ping our awesome vrurg for a blin run, alas not him

[19:59] *** MasterDuke left
[19:59] *** MasterDuke joined
[20:08] <nwc10> you wait for ages and then three, er four seem to come along together. So we have Ry≈´, grissu-exact, errol3 and dragonbox

[20:09] <MasterDuke> hadn't heard about the last two. better in some way than ryu?

[20:09] <nwc10> possibly. I'm still trying to figure this out.

[20:09] <moon-child> iirc ryu needs really big lookup tables

[20:09] <moon-child> otoh unicode needs _huge_ lookup tables and no one bats an eye so ¬Ø\_(„ÉÑ)_/¬Ø

[20:09] <nwc10> dragonbox is linked from the grissu-exact github README - this was not hard to find.

[20:10] <nwc10> but you have to be looking since that change was made.

[20:12] <MasterDuke> looks like dragonbox is C++17, which might make it a no-go for moarvm? is there a policy on use of c++?

[20:13] <moon-child> I'm sure it could be reimplemented if it were that much better than others

[20:13] <nwc10> that was my assumption - and hoping to find someone else who had already done this under a suitable licence

[20:14] <moon-child> I like ryu

[20:14] <moon-child> it's permissively licensed c, and completely portable

[20:16] <nwc10> This is probably the most important thing. The marginal gains of anything else are not worth it. We have finite time.

[20:17] <japhb> Is ryu what we're using now?

[20:17] <nwc10> no, it's grissu3 with a fallback to sprintf("%17g", ...)

[20:17] <nwc10> and it turns out that

[20:17] <nwc10> r: 1e23

[20:17] <camelia> rakudo-jvm 08b449e1a: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant floating-point number 1e23 in sink context (line 1)‚ê§¬ª

[20:17] <camelia> ..rakudo-moar 6fdc2b690: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant floating-point number 1e23 in sink context (line 1)‚ê§¬ª

[20:17] <nwc10> r: say 1e23

[20:17] <camelia> rakudo-jvm 08b449e1a: OUTPUT: ¬´9.999999999999999E22‚ê§¬ª

[20:17] <camelia> ..rakudo-moar 6fdc2b690: OUTPUT: ¬´9.9999999999999992e+22‚ê§¬ª

[20:17] <japhb> Oof

[20:17] <nwc10> that that fallback isn't correct :-)

[20:17] <japhb> Sigh

[20:18] <nwc10> printf %15g woudl be fine for this one

[20:18] <nwc10> so I figured that as the bug fix seemed to be "replace sprintf with dtoa"

[20:18] <MasterDuke> japhb: btw, did you see https://github.com/rakudo/rakudo/issues/3620#issuecomment-817586922 ?

[20:18] <[Coke]> "release manager"++. I don't think I've ever had someone in that role at a $DAYJOB until this place and it definitely makes a difference!

[20:18] <nwc10> it might be better to use something else, as I knew something else exists

[20:18] <japhb> m: use nqp; my @a = nqp::abs_i(nqp::sub_i(nqp::time(),nqp::time())) xx 1000; say @a.min  # Transfer of conversation about nqp::time performance from #cro, code from lizmat++

[20:18] <camelia> rakudo-moar 6fdc2b690: OUTPUT: ¬´20‚ê§¬ª

[20:18] <japhb> Wait what

[20:19] <lizmat> that's   weird?

[20:19] <lizmat> hnm... my debian box is still at 2021.3

[20:20] <lizmat> so looks like a MacOS thing then

[20:20] <japhb> MasterDuke: I don't have an SO account either.  Heck, I didn't have a Reddit account until lizmat++ nerd-sniped me earlier this week.  :-)

[20:21] <MasterDuke> whoops, "Our original evaluation of Errol against the prior work of Grisu3 was erroneous. The evaluation indicates a 2x speed improvement over Grisu3. However, corrected performance measurements show a 2x speed loss to Grisu3."

[20:21] <lizmat> 2436

[20:21] <lizmat> is the lowest nqp::time interval I get on MacOS

[20:21] <japhb> OK, at least that indicates my intuition wasn't completely broken, just a different OS.

[20:21] <MasterDuke> i just ran that locally and got 20

[20:21] <nwc10> but, Errol can handle the 5% cases that grissu3 can't? So it could act as the fallback?

[20:22] <nwc10> I still like the idea of ryu if it's just one source file that does 100%

[20:22] <nwc10> but that's not for "this week"

[20:22] <MasterDuke> sure. but then why not ryu?

[20:22] <MasterDuke> yeah

[20:22] <nwc10> snap!

[20:24] <moon-child> it's harder to do printf with ryu

[20:24] <moon-child> can probably be adapted to the task, though

[20:25] <nwc10> notable6: 

[20:25] <notable6> nwc10, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Notable

[20:25] <nwc10> oops

[20:25] <nwc10> moon-child: https://dl.acm.org/doi/10.1145/3360595 seems to be the folloup for printf. I am trying to read the paper

[20:25] <nwc10> the talk was good.

[20:26] <nwc10> I am not an expert on any of this. I think I like integers still.

[20:26] <nwc10> I fear I'm going to be reduced to saying that I only like booleans. All other types are too fiddly.

[20:26] <moon-child> oh, cool, I missed that!

[20:27] * moon-child ‚ô•booleans

[21:04] <nwc10> completely off topic, but referencing an earlier conversation. It has escaled - previously it was the *unofficial* documentaton that was pre-annotated with memes, to save the Internet effort. Now they even have them on the official signage: https://twitter.com/bocachicagal/status/1382736574685843463?s=21

[21:04] <nwc10> escalted

[21:04] <nwc10> my figners are very naughty

[22:24] *** Geth left
