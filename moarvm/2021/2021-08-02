[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[01:28] *** notable6 left
[01:28] *** evalable6 left
[01:28] *** greppable6 left
[01:28] *** squashable6 left
[01:28] *** committable6 left
[01:28] *** quotable6 left
[01:28] *** bisectable6 left
[01:28] *** releasable6 left
[01:28] *** coverable6 left
[01:28] *** shareable6 left
[01:28] *** bloatable6 left
[01:28] *** reportable6 left
[01:28] *** tellable6 left
[01:28] *** sourceable6 left
[01:28] *** benchable6 left
[01:28] *** nativecallable6 left
[01:28] *** unicodable6 left
[01:28] *** statisfiable6 left
[01:28] *** squashable6 joined
[01:29] *** sourceable6 joined
[01:29] *** releasable6 joined
[01:29] *** evalable6 joined
[01:30] *** bisectable6 joined
[01:30] *** notable6 joined
[01:30] *** unicodable6 joined
[01:31] *** benchable6 joined
[02:30] *** reportable6 joined
[02:30] *** quotable6 joined
[02:30] *** nativecallable6 joined
[02:30] *** shareable6 joined
[02:30] *** coverable6 joined
[02:30] *** greppable6 joined
[02:57] <[Coke]> moon-child suggested a workaround, build progressing...

[03:03] <[Coke]> https://gist.github.com/coke/8bffe7f4823e2ff99d0f7dcf07f7d782

[03:04] <[Coke]> patch there lets all the obj files builf then get err3.out on src\jit\x64\emit.dasc

[03:05] *** linkable6 joined
[04:27] *** releasable6 left
[04:27] *** coverable6 left
[04:27] *** quotable6 left
[04:27] *** reportable6 left
[04:27] *** notable6 left
[04:27] *** shareable6 left
[04:27] *** sourceable6 left
[04:27] *** evalable6 left
[04:27] *** greppable6 left
[04:27] *** nativecallable6 left
[04:27] *** linkable6 left
[04:27] *** bisectable6 left
[04:27] *** squashable6 left
[04:27] *** benchable6 left
[04:27] *** unicodable6 left
[04:27] *** quotable6 joined
[04:28] *** unicodable6 joined
[04:29] *** tellable6 joined
[04:29] *** coverable6 joined
[04:29] *** committable6 joined
[04:29] *** nativecallable6 joined
[04:29] *** linkable6 joined
[04:29] *** sourceable6 joined
[04:29] *** notable6 joined
[04:30] *** reportable6 joined
[04:30] *** shareable6 joined
[05:27] *** releasable6 joined
[05:28] *** greppable6 joined
[05:29] *** statisfiable6 joined
[05:30] *** bisectable6 joined
[05:30] *** benchable6 joined
[06:01] <nine> [Coke]: this should take care of that JIT build issue: https://gist.github.com/niner/47eef9bdd295906820d1d5bf32c2dc0d

[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:28] *** evalable6 joined
[07:28] *** squashable6 joined
[09:20] <dogbert17> nine: the SEGV I saw when running 'while ./rakudo-m -Ilib t/spec/S07-hyperrace/for.t; do :; done' has decided to go into hiding, at least on my machine

[09:23] <dogbert17> the SEGV, or perhaps it's another one, does make a comeback if I add MVM_SPESH_BLOCKING=1

[09:28] <dogbert17> nine: perhaps you or timos cats :) have a theory as to what's going on

[09:28] <dogbert17> https://gist.github.com/dogbert17/6cafae9e06e6b4e3be60d0c063708d63

[09:30] *** bloatable6 joined
[09:52] <jnthnwrthngtn> moarning o/

[09:54] <dogbert17> good morning jnthnwrthngtn, have you had any coffee yet?

[09:55] <Nicholas> \o

[09:56] <dogbert17> good morning Nicholas

[09:56] <Nicholas> MasterDuke: busy elsewhere - can't look yet. It's possible.

[09:56] <jnthnwrthngtn> Yes, although I realized after pressing the button to make it that the water tank was very low

[09:56] <jnthnwrthngtn> However on the office machine in-flight refueling is possible :)

[09:56] <dogbert17> nice

[09:57] <Nicholas> I realise that I must confess to a coffee bootstrapping near-miss this mornign, but I salvaged it with a tea infuser.

[10:03] *** lizmat left
[10:26] <nine> dogbert17: I've gotten the same segfault in rr. code->sf is NULL, isn't it?

[10:26] <nine> That's the GC issue I mentioned

[10:26] <dogbert17> nine: yes code->sf is NULL

[10:31] <nine> jnthnwrthngtn: the segfault in S07-hyperrace/for.t is due to *code being all 0s as it's been garbage collected while still in use. *code is part of invoke_args in https://github.com/MoarVM/MoarVM/blob/new-disp/src/disp/program.c#L2829 and gets added by MVMDispOpcodeSet in https://github.com/MoarVM/MoarVM/blob/new-disp/src/disp/program.c#L2738

[10:31] <nine> Any hand waving (or straight fixes) appreciated :)

[10:33] <nine> Just a random observation: fixing the hardest category of bugs is certainly a way to learn about a major new subsystem. I can't shake the feeling though that it's not actually the easiest way to learn...

[10:42] <jnthnwrthngtn> nine: At 2829 there isn't code, there's wrapper

[10:42] <jnthnwrthngtn> I assume that's what you mean?

[10:43] *** sena_kun joined
[10:44] <nine> Ah, sorry, calling wrapper ends up in try_capture_lex_impl where we get code from MVMObject *code = MVM_args_get_required_pos_obj(tc, &arg_ctx, 0);

[10:45] <Geth> ¦ MoarVM/new-disp: 5802f28245 | (Jonathan Worthington)++ | src/disp/program.c

[10:45] <Geth> ¦ MoarVM/new-disp: Set chosen dispatch program before spesh logging

[10:45] <Geth> ¦ MoarVM/new-disp: 

[10:45] <Geth> ¦ MoarVM/new-disp: Otherwise, if the spesh logging allocates, the information that the GC

[10:45] <Geth> ¦ MoarVM/new-disp: needs in order to mark dispatch program temporaries will not be

[10:45] <Geth> ¦ MoarVM/new-disp: available, and so they won't be marked.

[10:45] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5802f28245

[10:45] <jnthnwrthngtn> See if that helps

[10:45] <jnthnwrthngtn> Wonder if I p'd instead of P'd :)

[10:50] *** lizmat joined
[10:52] <jnthnwrthngtn> I wonder if I shoulda got rid of p6bindassert in favor of a `dispatch`, so we didn't need another special case op

[10:52] <jnthnwrthngtn> As in, another one to handle in spesh specially

[10:52] <jnthnwrthngtn> The thing is that it's not quite powerful enough

[10:53] <jnthnwrthngtn> I need some way to signifity "overall bind success"

[10:54] <jnthnwrthngtn> *signify

[10:54] <jnthnwrthngtn> And also a way to ask "Should I throw an error on bind failure or just indicate that it happened"

[10:54] <jnthnwrthngtn> oops, I didn't mean p6bindassert, I meant assertparamcheck

[10:55] <sena_kun> jnthnwrthngtn, do you want a blin run?

[10:55] <jnthnwrthngtn> sena_kun: I don't think there'll be all that much change since the last one

[10:55] <sena_kun> .oO ( maybe just a blin this time )

[10:55] <jnthnwrthngtn> .oO( it is lunch time... )

[10:56] <jnthnwrthngtn> I'm pondering the best way to fix a bunch of the remaining spectest failures (the ones that depend on unpacking)

[10:56] <jnthnwrthngtn> I need the positive outcome part for nextcallee with multiple dispatch

[10:56] <sena_kun> Ah, related to the signature too many/few and such errors? Best of luck.

[11:04] <jnthnwrthngtn> Yes

[11:59] *** linkable6 left
[11:59] *** evalable6 left
[11:59] *** evalable6 joined
[12:02] <nine> I wonder if this will also fix zef uninstall. I guess we'll see :)

[12:03] *** reportable6 left
[12:21] *** frost joined
[12:24] <Geth> ¦ MoarVM: d4a8093ebc | (Stefan Seifert)++ | src/spesh/worker.c

[12:24] <Geth> ¦ MoarVM: Fix deadlock by untimely GC in multi-threaded programs

[12:24] <Geth> ¦ MoarVM: 

[12:24] <Geth> ¦ MoarVM: In send_log we're marking the thread blocked while holding the

[12:24] <Geth> ¦ MoarVM: sl->body.block_mutex. In the spesh worker we're trying to lock the

[12:24] <Geth> ¦ MoarVM: sl->body.block_mutex without the thread being marked blocked for GC.

[12:24] <Geth> ¦ MoarVM: Now if some other thread at that point has decided that a GC run is in order,

[12:24] <Geth> ¦ MoarVM: send_log will wait for the GC run. But the GC run cannot start until the spesh

[12:24] <Geth> ¦ MoarVM: <…commit message has 5 more lines…>

[12:24] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d4a8093ebc

[12:24] <Geth> ¦ MoarVM: 96ce6d8485 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/spesh/worker.c

[12:24] <Geth> ¦ MoarVM: Merge pull request #1526 from MoarVM/fix_spesh_log_gc_deadlock

[12:24] <Geth> ¦ MoarVM: 

[12:24] <Geth> ¦ MoarVM: Fix deadlock by untimely GC in multi-threaded programs

[12:24] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/96ce6d8485

[13:04] *** reportable6 joined
[13:08] <Geth> ¦ MoarVM/new-disp: e4963d3b5b | (Jonathan Worthington)++ | src/disp/syscall.c

[13:08] <Geth> ¦ MoarVM/new-disp: Add bind-will-resume-on-failure syscall

[13:08] <Geth> ¦ MoarVM/new-disp: 

[13:08] <Geth> ¦ MoarVM/new-disp: Provides introspection of whether a bind failure in the current routine

[13:08] <Geth> ¦ MoarVM/new-disp: will trigger a resumption. This will be used in Rakudo in order to make

[13:08] <Geth> ¦ MoarVM/new-disp: multiple dispatch based upon signature unpacking work again.

[13:08] <Geth> ¦ MoarVM/new-disp: 

[13:08] <Geth> ¦ MoarVM/new-disp: In Rakudo master, this is done by binding the signature twice: once to

[13:08] <Geth> ¦ MoarVM/new-disp: <…commit message has 11 more lines…>

[13:08] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/e4963d3b5b

[13:11] <jnthnwrthngtn> m: say 1344 / 1349

[13:11] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «0.996294␤»

[13:11] <jnthnwrthngtn> Only 5 failures in `make spectest` now

[13:11] <jnthnwrthngtn> lizmat: 99.6% passing spectests, if you're looking for a number for the weekly :)

[13:19] <lizmat> noted :-)

[13:19] <jnthnwrthngtn> nine: Yes, zef is fixed 

[13:20] *** frost left
[13:21] <sena_kun> yay

[13:36] *** frost joined
[13:40] *** frost left
[14:24] <nine> jnthnwrthngtn: can confirm :)

[14:25] <Geth> ¦ MoarVM/new-disp: 8b9270918e | (Jonathan Worthington)++ | 6 files

[14:25] <Geth> ¦ MoarVM/new-disp: Generalize bind failure to resumption mechanism

[14:25] <Geth> ¦ MoarVM/new-disp: 

[14:25] <Geth> ¦ MoarVM/new-disp: In preparation for being able to also have a bind success trigger an

[14:25] <Geth> ¦ MoarVM/new-disp: exit of the routine and a resumption. We'll use this for situations like

[14:25] <Geth> ¦ MoarVM/new-disp: nextcallee, where we only want to run signature binding and then leave

[14:25] <Geth> ¦ MoarVM/new-disp: the routine.

[14:25] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8b9270918e

[14:40] *** evalable6 left
[15:00] *** linkable6 joined
[15:06] <Nicholas> jnthnwrthngtn: fixes my rakudo build fail

[15:21] <jnthnwrthngtn> \o/

[15:36] <jnthnwrthngtn> m: use Test; multi def_unpack(@a) { @a.join(',') }; multi def_unpack([$x, $y, $z]) { my &nc = nextcallee; "nc:" ~ nc() }; say  def_unpack([1,2,3])

[15:36] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in sub def_unpack at <tmp> line 1␤  in sub def_unpack at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:37] <jnthnwrthngtn> m: use Test; multi def_unpack(@a) { @a.join(',') }; multi def_unpack([$x, $y, $z]) { my &nc = nextcallee; "nc:" ~ nc([4,5,6]) }; say  def_unpack([1,2,3])

[15:37] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «nc:4,5,6␤»

[15:37] <jnthnwrthngtn> Turns out we lack tests for this situation

[15:43] *** evalable6 joined
[15:49] <[Coke]> nine: thanks. jit left wit hthese warnings: src\jit\x64\emit.c(8): warning C4129: 'j': unrecognized character escape sequence

[15:49] <[Coke]> src\jit\x64\emit.c(8): warning C4129: 'e': unrecognized character escape sequence

[15:51] <nine> [Coke]: I guess that these warnings are not actually new

[15:51] <nine> Line 8 is: line 1 "src/jit/x64/emit.dasc"

[15:52] <nine> Actually, #line 1, so it's a pragma and I guess msvc is trying to interpret /x sequences in it

[15:54] <[Coke]> build completed on windows, woot

[15:59] <[Coke]> baking up and doing a rakudo build now...

[15:59] <[Coke]> *backing

[16:05] <nine> I'd be content with NQP building :D

[16:10] <[Coke]> yah, dies immediately. :(

[16:11] <nine> That's the point where we really need a debugger to get at the failure

[16:12] <[Coke]> https://gist.github.com/coke/8bffe7f4823e2ff99d0f7dcf07f7d782#file-err-4-out

[16:13] <[Coke]> not sure that's a moarvm error, actually.

[16:13] <nine> Error code 0xc0000005 means access violation, i.e. a segfault

[16:14] <[Coke]> Not sure why the nmake call would have worked in moarvm but not nqp.

[16:14] <nine> Which is what I'd expect from an error in the JIT implementation.

[16:14] <[Coke]> ah. I saw "nmake\x{a}" which looked sus.

[16:14] <nine> It's not nmake which fails. It's MoarVM.

[16:15] <[Coke]> (yup, see that now, like I said, the extra text looked sus, that's all)

[16:16] <[Coke]> Will try with jit disabled.

[16:17] <[Coke]> got past the segfault

[16:18] <nine> Any chance of attaching a debugger?

[16:18] <[Coke]> I have visual studio, should be possible.

[16:18] <[Coke]> ... I have to figure it out, though.

[16:18] <[Coke]> let me see how it does sans JIT and then I can get you that.

[16:23] <[Coke]> nqp passes make test

[16:24] <[Coke]> rakudo build dies with:

[16:24] <[Coke]> getcodeobj needs a code ref at gen\moar\Ops.nqp:392  (blib/Perl6/Ops.moarvm:) from gen\moar\stage2\QAST.nqp:1619  (C:\sandbox\rakudo-disp\install\share\nqp\lib/QAST.moarvm:compile_op)

[16:27] <nine> That's a rather surprising failure mode

[16:28] <nine> [Coke]: you sure you are on new-disp in all 3 repositories?

[16:30] <[Coke]> ... dammit.

[16:30] <[Coke]> very good guess!

[16:30] <[Coke]> just blew away my nqp build to get debug info, wll retry shortly

[16:39] <[Coke]> got a stack trace! it wan't a debug build. :)

[16:40] <nine> Seems like it's not exactly gonna be hard to reproduce those segfaults...

[16:40] <[Coke]> :)

[16:46] <[Coke]> I will say that the build *feels* faster, but I don't build on windows frequently.

[16:47] <Geth> ¦ MoarVM/new-disp: c072f53c2f | (Jonathan Worthington)++ | 13 files

[16:47] <Geth> ¦ MoarVM/new-disp: Provide a way to always resume after binding

[16:47] <Geth> ¦ MoarVM/new-disp: 

[16:47] <Geth> ¦ MoarVM/new-disp: So that if we want to invoke something simply to see if it would bind,

[16:47] <Geth> ¦ MoarVM/new-disp: that is now possible. This will be used most immediately for handling

[16:47] <Geth> ¦ MoarVM/new-disp: nextcallee in multiple dispatch with unpacks or `where` clauses, but

[16:47] <Geth> ¦ MoarVM/new-disp: will have some further usages also.

[16:47] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/c072f53c2f

[16:51] <jnthnwrthngtn> This could actually be a useful to expose, since things like Cro::HTTP::Router today do a signature bind check and then an invocation also

[16:53] <[Coke]> nine: actually dying on log.c line 129. "exception thrown: read access violation: cs_args_flags was 0x111011101110112."

[16:54] <[Coke]> let me see if I can easily extract teh call stack

[16:54] <[Coke]> https://gist.github.com/coke/55ba508f67e8e4d2e1856a3e795a215b

[16:55] <[Coke]> please let me know if getting any values out will help.

[16:55] <[Coke]> (can't do a screen share to this box, unfortunately)

[16:57] <[Coke]> (did a simple c/p for both the values and the stack, the formatting ain't great in the paste)

[16:58] <[Coke]> looks like cs->flag_count is one, but cs->arg_flags is NULL

[16:58] <[Coke]> should that loop be over arg_count, not flag_count??

[17:01] <[Coke]> https://github.com/MoarVM/MoarVM/blob/c072f53c2fade9b799534b6f621b571b1d96d5f7/src/spesh/log.c#L124-L131

[17:01] <[Coke]> getting the segfault on line 129 there.

[17:03] <nine> flag_count is correct (yes, that's a bit confusing)

[17:03] <nine> The arguments to MVM_frame_dispatch would be of interest. Including the values in the args struct

[17:05] <nine> It's a bit odd, that there's no callframe for MVM_jit_code_enter, but line 6243 is in sp_jit_enter, so it's gonna be a JIT issue

[17:06] <[Coke]> added file to the gist with that. let me know if you need me to drill down on anything

[17:06] <[Coke]> getting the point where a screen grab might be better...

[17:09] <nine> Hey, I haven't even asked for a disassembly yet :D

[17:10] <[Coke]> anticipating your request, I have found the "go to disassembly" menu option. :)

[17:11] <jnthnwrthngtn> It's quite possible that the debugger is confused by the JIT frames and so "loses" the MVM_jit_code_enter call

[17:16] <nine> I have to admit that I find the vars output rather confusing

[17:17] <nine> Not because of the values, but structurally.

[17:18] <[Coke]> let me try screen grab.

[17:22] <[Coke]> added

[17:22] <[Coke]> (there is a horiz. scroll there also)

[17:25] *** sena_kun left
[17:26] <jnthnwrthngtn> bbl &

[18:02] *** reportable6 left
[18:22] <timo> solderin' time

[18:37] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/08/02/2021-31-counting-down/

[18:39] <nine> Ah, ok. The most interesting to me are code, args and spesh_cand

[18:59] <[Coke]> frame.args is all NULLs and 0s

[18:59] <nine> Not frame.args, args

[19:00] <nine> The argument to MVM_frame_dispatch itself

[19:00] <[Coke]> frame.spesh_cand is NULL

[19:00] <nine> These: moar.dll!MVM_frame_dispatch(MVMThreadContext * tc, MVMCode * code, MVMArgs args, int spesh_cand)

[19:05] *** reportable6 joined
[19:25] <[Coke]> (sorry, $DAYJOB, one sec)

[19:27] <[Coke]> the tc is a huge structure.

[19:27] <[Coke]> spesh_cand: optimized away and not availale

[19:35] <[Coke]> that's weird, one key is "paramet", next is "erized"

[19:39] <nine> That's just jnthnwrthngtn having fun ;)

[19:40] <nine> So what's in args?

[19:41] <[Coke]> there's no easy way to say "expand all levels", so it's a lot of clicking and then multiple captures. one moment.

[19:46] <[Coke]> look at args*.png for args

[19:47] <[Coke]> Thank you for your patience and assistance. :)

[20:08] <[Coke]> looking for a plugin that helps export this stuff...

[20:15] <[Coke]> AHA. nine, check out the .cs files, same gist.

[20:15] <[Coke]> found an exporter that dumps it as an object initialization.

[20:19] <nine> As I feared, args is totally bogus

[20:21] <[Coke]> ... or I can get json (and I may have not gone full depth. one sec.)

[20:22] <nine> Well, maybe not totally. args.source may be sane. Which would indicate that it's just the order that's wrong

[20:22] <[Coke]> ok. need to see some other data? Hopefully my local changes to the struct initializers are correct. (was a lot of { }; those were changed to {0})

[20:24] <nine> Can you please try this other patch as well? https://gist.github.com/niner/08f62474f3a28dd7d9a4cecc6f8acfc6

[20:29] <[Coke]> sure, testing...

[20:33] <[Coke]> I retract my "build seems faster" comment, though I'm now *watching it*, and on battery. :)

[20:40] *** linkable6 left
[20:40] <[Coke]> still dies.

[20:40] *** linkable6 joined
[20:40] <[Coke]> launching debugger...

[20:41] <[Coke]> stack trace looks similar

[20:41] <[Coke]> will redump args++

[20:44] <[Coke]> (doing the export is sloooow)

[21:00] <[Coke]> did the export, put them in the gist git repo... no change from previous variant

[21:01] <[Coke]> ah, thats a lie. one sec.

[21:02] <[Coke]> pushed.

[21:09] <nine> Huh...it just seems to have exported to a deeper level. But the values are just as broken

[21:09] <nine> in the same way even

[21:10] <nine> My other hypothesis is that the values on the stack get overwritten by the callee

[21:12] <nine> I'm not a 100% sure about the stack layout. That it's growing downwards doesn't exactly help

[21:12] <nine> Maybe brrt++ can bring some clarity

[21:12] <nine> Need to go to bed now

[21:31] *** Altai-man left
[21:35] <timo> if we can't use rr on windows, use rr on a virtualbox with windows in it :) :) :) :) :)

[21:36] <Nicholas> I like rr

[21:37] <[Coke]> ah, I did increase the level slightly

[21:55] *** Altai-man joined
