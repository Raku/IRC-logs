[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[01:44] *** evalable6 left
[01:44] *** linkable6 left
[01:57] *** tealecloud joined
[02:01] *** tealecloud left
[02:23] *** frost joined
[02:29] *** tealecloud joined
[02:34] *** tealecloud left
[02:45] *** evalable6 joined
[03:13] *** rakuUser left
[04:36] *** committable6 left
[04:36] *** nativecallable6 left
[04:36] *** coverable6 left
[04:36] *** squashable6 left
[04:36] *** benchable6 left
[04:36] *** bisectable6 left
[04:36] *** shareable6 left
[04:36] *** unicodable6 left
[04:36] *** notable6 left
[04:36] *** releasable6 left
[04:36] *** evalable6 left
[04:36] *** sourceable6 left
[04:36] *** quotable6 left
[04:36] *** bloatable6 left
[04:36] *** statisfiable6 left
[04:36] *** greppable6 left
[04:36] *** reportable6 left
[04:36] *** tellable6 left
[04:36] *** bloatable6 joined
[04:36] *** nativecallable6 joined
[04:37] *** reportable6 joined
[04:37] *** quotable6 joined
[04:37] *** greppable6 joined
[04:38] *** evalable6 joined
[04:38] *** squashable6 joined
[04:38] *** unicodable6 joined
[04:38] *** notable6 joined
[04:38] *** statisfiable6 joined
[04:39] *** tellable6 joined
[04:47] *** linkable6 joined
[04:53] *** kjp left
[04:55] *** kjp joined
[05:36] *** committable6 joined
[05:37] *** bisectable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:31] *** tealecloud joined
[06:35] *** Altai-man joined
[06:35] *** tealecloud left
[06:36] *** Altai-man left
[06:37] *** sourceable6 joined
[06:38] *** shareable6 joined
[06:39] *** Altai-man joined
[06:59] <nine> jnthnwrthngtn: that NULLing of source and map in uninline https://github.com/MoarVM/MoarVM/blob/new-disp/src/spesh/deopt.c#L77 doesn't play well with OSR. Leads to a segfault in t/spec/S32-str/sprintf-e.t when run with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1

[07:00] <nine> jnthnwrthngtn: segfault happens in https://github.com/MoarVM/MoarVM/blob/new-disp/src/spesh/arg_guard.c#L484 due to NULL in args.map

[07:38] *** benchable6 joined
[07:39] <nine> I think it shouldn't be too hard to find the actual pointers for source and map. After all we know the callsite and the caller's pc which probably points after the dispatch op. That ought to be enough information to calculate the position of the map. And source is just the caller's work array anyway.

[07:39] *** releasable6 joined
[08:00] *** tealecloud joined
[09:04] <jnthnwrthngtn> nine: That's curious; the code I ported it from didn't seem to be setting up those things.

[09:04] <jnthnwrthngtn> nine: But yeah, if they're needed, we can find 'em

[09:22] *** lizmat left
[09:23] *** lizmat joined
[09:23] *** TempIRCLogger__ joined
[09:23] <jnthnwrthngtn> nine: Are you already poking at it, or should I put it on my todo list?

[09:25] *** TempIRCLogger left
[09:38] *** coverable6 joined
[09:54] <dogbert11> jnthnwrthngtn: so what is on your todo list apart point 0, i.e. coffee?

[09:55] <dogbert11> *apart from

[10:04] <jnthnwrthngtn> dogbert11: Start of month accounting and looking at some other $dayjob projects for a bit right now

[10:04] <jnthnwrthngtn> But I really want to work on the missing inlining etc.

[10:12] <dogbert11> perhaps you'll get your chance after lunch

[10:12] <nine> jnthnwrthngtn: I have a vague idea on how to implement it and may have time in the evening to give it a try

[10:24] <jnthnwrthngtn> nine: OK, will leave it for you :)

[10:24] <nine> \o/

[10:24] <jnthnwrthngtn> Doing the resumption init stuff is already quite enough of a headache :)

[11:18] *** linkable6 left
[11:18] *** evalable6 left
[11:19] *** evalable6 joined
[11:24] <timo> i don't even know how resumption stuff is going to work; will we just be keeping a few registers around in the frame that did the dispatch call so that whatever we called to can store something in a place that will later be found somehow?

[11:28] <timo> or is there a record on the stack for this purpose instead? that seems more likely

[11:28] <timo> and then we'd have ops that we generate that can interact with that

[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:14] <jnthnwrthngtn> timo: https://github.com/MoarVM/MoarVM/commit/074a3c43e8dbbbdfae1d0723d21641086710baf8 outlines the strategy somewhat

[12:15] *** rakuUser joined
[12:16] <timo> that sounds deceptively simple

[12:20] *** linkable6 joined
[12:42] *** frost left
[13:09] <jnthnwrthngtn> Yes, but it punts the complexity to the time we do a resumption, and need to find all the pieces

[13:09] <timo> true enough

[13:22] <Geth> Â¦ MoarVM/new-disp: ee69c512ba | (Stefan Seifert)++ | src/spesh/deopt.c

[13:22] <Geth> Â¦ MoarVM/new-disp: Fix possible segfault in arg guard run after uninlining

[13:22] <Geth> Â¦ MoarVM/new-disp: 

[13:22] <Geth> Â¦ MoarVM/new-disp: It's possible that after deoptimization uninlines, we run arg guards

[13:22] <Geth> Â¦ MoarVM/new-disp: which need to access map and source in arg_info. Obviously setting those

[13:22] <Geth> Â¦ MoarVM/new-disp: to NULL will not cut it in this case.

[13:22] <Geth> Â¦ MoarVM/new-disp: 

[13:22] <Geth> Â¦ MoarVM/new-disp: Fix by setting up source and map for real. Luckily the arg map is always

[13:22] <Geth> Â¦ MoarVM/new-disp: just the last arguments of the dispatch op. Since the return_address

[13:22] <Geth> Â¦ MoarVM/new-disp: points at the next op after the dispatch, we just have to count back by

[13:22] <Geth> Â¦ MoarVM/new-disp: the number of arguments to get the start of the map. And source will be

[13:22] <Geth> Â¦ MoarVM/new-disp: simply the caller's work registers.

[13:22] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/ee69c512ba

[13:22] <nine> jnthnwrthngtn: it really was easy enough to do between meetings :)

[13:23] *** tbrowder left
[13:23] *** tbrowder joined
[13:25] <jnthnwrthngtn> nine++

[13:27] <jnthnwrthngtn> Looks right to me at first glance

[13:29] <dogbert11> nine++, interested in fixing the SEGV in t/spec/S32-io/io-cathandle.t ?

[15:16] <Geth> Â¦ MoarVM/new-disp: cf26eb505b | (Jonathan Worthington)++ | 12 files

[15:16] <Geth> Â¦ MoarVM/new-disp: Build table of resume inits for spesh candidate

[15:16] <Geth> Â¦ MoarVM/new-disp: 

[15:16] <Geth> Â¦ MoarVM/new-disp: The table contains the static information we'll need in order to be able

[15:16] <Geth> Â¦ MoarVM/new-disp: to handle a dispatch resumption taking place when the dispatch had its

[15:16] <Geth> Â¦ MoarVM/new-disp: origin in specialized code. Some information that was previously in the

[15:16] <Geth> Â¦ MoarVM/new-disp: `sp_resumption` op moves to that table entry. We write the registers

[15:16] <Geth> Â¦ MoarVM/new-disp: into the entry at code-gen time, so that other optimizations are free to

[15:16] <Geth> Â¦ MoarVM/new-disp: reorganize them up to that point.

[15:16] <Geth> Â¦ MoarVM/new-disp: 

[15:16] <Geth> Â¦ MoarVM/new-disp: Since the resumption implementation is not yet updated to account for

[15:16] <Geth> Â¦ MoarVM/new-disp: specialized resumable dispatches, none of this is yet enabled.

[15:16] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/cf26eb505b

[15:47] <nine> Andrei, you've found another segfault?

[16:22] <dogbert11> who's Andrei?

[16:22] <lizmat> .oO( the other I )

[16:31] <nine> Ah, I feared it would be too obscure, but it was worth a try :) https://www.quotes.net/mquote/116839

[16:52] <Geth> Â¦ MoarVM/new-disp: f962d9e5e1 | (Jonathan Worthington)++ | 2 files

[16:52] <Geth> Â¦ MoarVM/new-disp: Restructure resumption search for specializations

[16:52] <Geth> Â¦ MoarVM/new-disp: 

[16:52] <Geth> Â¦ MoarVM/new-disp: Rather than simply looking for dispatch run/record on the stack, we'll

[16:52] <Geth> Â¦ MoarVM/new-disp: also need to look for spesh candidates that contain dispatches with

[16:52] <Geth> Â¦ MoarVM/new-disp: resume initialization data too, where there are no such records. This

[16:52] <Geth> Â¦ MoarVM/new-disp: restructures the resumption code so we can do that, and manages to

[16:52] <Geth> Â¦ MoarVM/new-disp: successfully find a deopt index match too, when translating dispatch

[16:52] <Geth> Â¦ MoarVM/new-disp: programs with resume initialization state is enabled (however, it

[16:52] <Geth> Â¦ MoarVM/new-disp: continues to be disabled for the moment, so the oops is never hit).

[16:52] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/f962d9e5e1

[16:54] <jnthnwrthngtn> I'm gonna need to be smarter than today to handle the inline case of this...

[16:55] <jnthnwrthngtn> In theory now I "just" need to implement getting it to pull the resume init args out.

[16:55] <jnthnwrthngtn> And we'll be able to have spesh linking back at least

[16:57] <dogbert11> nine: aha, I didn't know that one :)

[16:58] <dogbert11> to repro the SEGV run MVM_SPESH_NODELAY=1 ./rakudo-m -Ilib t/spec/S32-io/io-cathandle.t a couple of times with a nursery size of say 16k

[17:03] <jnthnwrthngtn> Time for a break.

[17:03] <dogbert11> jnthnwrthngtn: perhaps some nice Indian food

[17:48] <lizmat> nine: yeah, too submerged :-)

[18:02] *** reportable6 left
[18:08] *** patrickb joined
[18:17] *** tealecloud left
[18:45] <MasterDuke> i love that book and movie, and that's a fantastic scene, but i missed the reference

[19:16] *** patrickb left
[19:37] <nine> dogbert11: sorry, cannot reproduc

[20:05] <dogbert11> nine: odd, perhaps it has something to do with setting MVM_GC_DEBUG=1 which I forgot to mention :(

[20:11] <jnthnwrthngtn> dogbert11: Not today; went to a nearby Vietnamese restaurant :)

[20:15] <dogbert11> was the food good?

[20:17] <jnthnwrthngtn> Yes. :)

[20:23] <dogbert11> :)

[20:23] *** squashable6 left
[20:24] *** squashable6 joined
[22:25] *** evalable6 left
[22:25] *** linkable6 left
[22:26] *** evalable6 joined
[22:47] *** tealecloud joined
[22:52] *** tealecloud left
[23:03] *** reportable6 joined
[23:27] *** linkable6 joined
