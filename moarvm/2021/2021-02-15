[02:42] *** MasterDuke left
[04:12] *** coverable6 left
[04:12] *** bisectable6 left
[04:12] *** quotable6 left
[04:12] *** benchable6 left
[04:12] *** releasable6 left
[04:12] *** nativecallable6 left
[04:12] *** tellable6 left
[04:12] *** evalable6 left
[04:12] *** unicodable6 left
[04:12] *** committable6 left
[04:12] *** bloatable6 left
[04:12] *** sourceable6 left
[04:12] *** greppable6 left
[04:12] *** linkable6 left
[04:12] *** statisfiable6 left
[04:12] *** shareable6 left
[04:12] *** notable6 left
[04:12] *** squashable6 left
[04:12] *** releasable6 joined
[04:12] *** committable6 joined
[04:13] *** bloatable6 joined
[04:13] *** squashable6 joined
[04:13] *** tellable6 joined
[04:13] *** unicodable6 joined
[04:13] *** evalable6 joined
[04:13] *** nativecallable6 joined
[04:13] *** sourceable6 joined
[04:13] *** benchable6 joined
[04:13] *** quotable6 joined
[04:14] *** bisectable6 joined
[04:14] *** notable6 joined
[04:14] *** greppable6 joined
[04:14] *** linkable6 joined
[04:15] *** statisfiable6 joined
[04:15] *** coverable6 joined
[04:15] *** shareable6 joined
[06:40] <nwc10> m: say "good *, #moarvm"

[06:40] <camelia> rakudo-moar 3235f3e42: OUTPUT: «good *, #moarvm␤»

[08:37] *** zakharyas joined
[09:17] *** MasterDuke joined
[09:18] *** dogbert11 left
[09:18] *** dogbert11 joined
[09:19] *** rba left
[09:19] *** rba joined
[09:22] <MasterDuke> jnthn: re https://colabti.org/irclogger/irclogger_log/moarvm?date=2021-02-10#l120 i just realized i'm not sure exactly what the "first" thing is that's necessary for correctness. converting the slot from an index to holding the MVMSpeshCandidate (done)? or not using the candidate (in the invoke_* ops?) if it has the invalidated flag set?

[09:47] <nine> MasterDuke: it's about the caller. You realize that your spesh_cand deopts too often, so you want to get rid of it. But there are probably lots of other spesh cands that call into yours. As long as they reference your spesh_cand (in their invoke ops) your spesh_cand won't go away. So the removal needs to become recursive

[09:51] <nine> Somehow this reminds me of a quote from Stargate (the 1994 movie): "I will kill you and everyone who has seen you"

[09:53] *** domidumont joined
[09:55] <nine> Ah, it's actually "Then I will destroy you and all who have seen you" which is even more apt ;)

[10:05] *** domidumont left
[10:15] <MasterDuke> nine: hm, but i don't think an

[10:16] <MasterDuke> MVMSpeshCandidate knows about things calling it, or what it calls, right?

[10:16] <nine> probably not

[10:17] <nine> yet...

[10:17] <MasterDuke> the yak's hair is growing!

[10:18] <nine> Shave, shave, shave the yak. Shave it till it's clean...

[10:19] *** brrt joined
[10:25] <MasterDuke> heh, i added `else if (spesh_cand->body.discarded) printf(stderr, "Oops, this frame was passed a discarded spesh cand!\n");` here https://github.com/MoarVM/MoarVM/pull/1426/files#diff-1b26a8ca2aae164214773b07e246cefaf103687be9e76c0964f7f626a4c7a0abR519

[10:26] <MasterDuke> prints 688k times when i run that example

[10:26] <nine> there you have it :)

[10:29] <MasterDuke> however, a similar if here https://github.com/MoarVM/MoarVM/pull/1426/files#diff-9791493c4bfe48513c1dd8b637aeb1daa3971293bc164f6bd63ed16c03aca0edR2077 never prints

[10:29] <nine> because that runs before you discard that candidate

[10:30] <MasterDuke> yep

[10:34] <brrt> good *

[10:37] <jnthn> MasterDuke: My idea for the discarded thing was that sp_fastinvoke_* would check the discarded property

[10:37] <jnthn> And if it's set then

[10:37] <jnthn> 1. We're in the caller currently, so that is the specialization that also needs to go away

[10:37] <MasterDuke> in MVM_frame_invoke i could NULL the spesh_cand that's been passed if it's been discarded and let it try to find a new one here https://github.com/MoarVM/MoarVM/pull/1426/files#diff-1b26a8ca2aae164214773b07e246cefaf103687be9e76c0964f7f626a4c7a0abR495

[10:37] <jnthn> 2. We don't actually enter the specialization

[10:38] <jnthn> MasterDuke: That's part 2 of what I just mentioned. I think for part 1 you could do it in frame.c too, just be sure we only catch the sp_fastinvoke case

[10:38] <jnthn> I mean, a late-bound call in a specialized caller, that isn't linked to a particular specialization, does not require us to drop the caller specialization

[10:39] <MasterDuke> oh, part 1 wouldn't be in interp.c?

[10:40] <jnthn> You'd have to repeat it 5 times there

[10:40] <jnthn> I think only sp_fastinvoke calls the invoke function in frame.c complete with a spesh candidate

[10:41] <jnthn> So we could probably handle it there

[10:41] <jnthn> oh, also: not in interp.c because it'd also need repeating for the JIT

[10:41] <MasterDuke> right

[10:42] <MasterDuke> speaking of jits, got an M1 yet brrt?

[10:43] <nwc10> I hope not, and maybe I hope so

[10:43] <nwc10> in that I don't want to put any pressure on anyone

[10:43] <nwc10> and an M1 is a distraction from x86_64

[10:43] <nwc10> but, "also thinking about aarch64" might tease out some lurking portability assumptions

[10:59] <brrt> MasterDuke: no M1 yet

[10:59] <nine> jnthn: so you don't think it'd be worth the trouble to manage the caller specializations from within spesh, i.e. avoid the runtime branch?

[11:00] <brrt> and frankly I can't justify the expense of an apple, though a raspberry might be doable

[11:00] <brrt> but I don't know what the architecture/ABI differences are

[11:01] <brrt> (and I think that an extension to include aarch64 will cause a major rework of JIT internals, so I'm .... looking forward to it, but I also am not sure when I'm going to find that kind of time)

[11:02] <jnthn> nine: It may be, but it also needs quite a bit of new machinary, whereas this approach lets us have the presumably larger win (getting rid of bad specializations) sooner

[11:02] <jnthn> It's also presumably a quite predictable branch

[11:03] <nine> I have to admit that I have no idea how branch prediction in CPUs actually works :)

[11:04] <MasterDuke> jnthn: not quite sure how to do part 1 in MVM_frame_invoke. check the outer?

[11:05] <MasterDuke> nine: i recently watched an interesting interview with jim keller and branch prediction came up. tldr; take the same branch as last time gets something 85% correct, modern cpus have essentially a mini neural net to get better than that

[11:06] <nine> MasterDuke: oh, interesting!

[11:21] <jnthn> MasterDuke: No. At the start of MVM_frame_invoke you are *still in the caller* :)

[11:22] <jnthn> I think since sp_fastinvoke_* is the only thing that passes a non-NULL spesh candidate argument, you can just go on the NULLness of that argument to know you are considering such a case

[11:24] <MasterDuke> so this is odd. i added `if (spesh_cand && spesh_cand->body.discarded) { fprintf(stderr, "oops, discarded\n"); spesh_cand = NULL; }` the line before here https://github.com/MoarVM/MoarVM/pull/1426/files#diff-1b26a8ca2aae164214773b07e246cefaf103687be9e76c0964f7f626a4c7a0abR495

[11:24] <MasterDuke> it never prints

[11:25] <MasterDuke> nor does the later if discarded print oops

[11:27] <MasterDuke> but if i comment out the setting spesh_cand to NULL...both prints happen 688k times

[11:28] <MasterDuke> and even when setting to null there are 688k deopts

[11:37] *** brrt left
[11:39] <MasterDuke> btw, merge https://github.com/MoarVM/MoarVM/pull/1433 now so it has a week before the release?

[11:52] *** patrickb joined
[11:54] <jnthn> +1 on the libuv merge, I think

[11:55] <MasterDuke> just merged it

[12:40] *** zakharyas left
[13:44] *** zakharyas joined
[14:36] * lizmat has just bumped MoarVM to get the latest version of libuv

[14:47] *** lucasb joined
[15:08] *** domidumont joined
[15:52] <dogbert11> thx for approving the libuv PR

[16:17] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/02/15/2021-07-easy-hard/

[16:21] *** domidumont left
[16:22] <dogbert11> lizmat++

[16:56] *** patrickb left
[17:01] <MasterDuke> ok, so not sure what was happening before. but now i have `if (spesh_cand && spesh_cand->body.discarded) { fprintf(stderr, "oops, discarded\n"); spesh_cand = NULL; }` and it gets hit 688k times

[17:20] <MasterDuke> interestingly, if i turn off all the logging and such, the example is now ~0.2s slower. ~2.6s on master, ~2.8s on my branch

[17:21] <MasterDuke> i'm obviously still not doing something i should be doing, because it shouldn't be deopting 688k times

[17:25] <nine> Have you implemented the checks in sp_fastinvoke*?

[17:27] <MasterDuke> no, i thought the plan was to do it in MVM_frame_invoke if spesh_cand is non-NULL, since only the sp_fastinvoke_* ops pass one in

[17:27] <nine> or that...

[18:28] *** domidumont joined
[18:44] *** domidumont left
[18:45] *** brrt joined
[18:57] <nwc10> past me left present me beer in the beer fridge. I figure I should arrange the to return the favour to future me

[18:58] <nine> must be good to be you :D

[19:07] <brrt> I think the expression is to 'pay it forward' - you got if from past you, now you provide to future you?

[19:07] <brrt> anyway.

[19:07] <brrt> metaphors

[19:31] *** zakharyas left
[22:50] <MasterDuke> hm, i would want to evict the candidate out of the spesh slot if it's set to discarded, wouldn't i?

[22:52] *** brrt left
[23:07] <MasterDuke> huh. if i check the spesh_cand in the sp_fastinvoke_* ops in interp.c they're never set to discarded

[23:52] *** linkable6 left
[23:52] *** evalable6 left
[23:53] *** evalable6 joined
[23:55] *** linkable6 joined
