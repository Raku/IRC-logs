[06:52] *** domidumont joined
[07:35] <nwc10> good *, #moarvm 

[07:43] *** zakharyas joined
[07:44] <MasterDuke> i'll concur about the '*' and the '#moarvm', but am reserving judgement on the 'good'

[07:58] *** sena_kun joined
[08:19] <nine> Yeah....I woke up a second time this night (once is sadly par for the course) and couldn't fall asleep again. Until I did and then dreamed that I couldn't fall asleep.

[08:27] <MasterDuke> we could get into a four yorkshiremen contest here about waking up in the night (the baby is currently teething)

[08:28] *** zakharyas1 joined
[08:30] *** zakharyas left
[08:31] <lizmat> in my time we got out of bed an hour before we went to sleep

[08:32] <MasterDuke> you had a bed?!

[08:34] *** zakharyas1 left
[08:34] <MasterDuke> nine: https://github.com/MoarVM/MoarVM/pull/1451 is impressive. after it's merged i'll rebase https://github.com/MoarVM/MoarVM/pull/1438 and https://github.com/MoarVM/MoarVM/pull/1426

[09:19] <nine> MasterDuke: well it's your impressive work that prompted me to fix those things :)

[09:22] <MasterDuke> thanks, but you don't want to see how these sausages are made...

[09:22] <nine> one never does :D

[09:57] <MasterDuke> ooo, this looks really cool https://comby.dev/blog/2021/03/26/comby-reducer

[10:17] <jnthn> morning o/

[10:18] <lizmat> .oO( too late, last week it would have been still morning :-)

[10:18] <nwc10> \o

[10:18] <MasterDuke> m: my $a; my $s := now; $a := now for ^100_000; say now - $s;

[10:18] <camelia> rakudo-moar 726a75e24: OUTPUT: «0.9384962␤»

[10:18] <nwc10> I wasn't intending to reply, but was more curious here - of this list, what *doesn't* Raku have? https://www.nntp.perl.org/group/perl.perl5.porters/2021/03/msg259531.html

[10:18] <nwc10> W functions?

[10:19] <MasterDuke> well, that's now only 0.19s locally (up from 0.03s before bug fixes), and there's only one failing spectest

[10:19] <MasterDuke> Failed test 'Instant subtraction (non-integral seconds)'

[10:19] <MasterDuke> expected: '0.285714'

[10:19] <MasterDuke>      got: '0.285714285'

[10:19] <nwc10> I feel that the the list is valid, but note also that half of those things need internals changes, or are impossible within any human timeframe

[10:21] *** domidumont left
[10:22] <lizmat> yeah, it's easy to make list of missing things

[10:22] <MasterDuke> m: say (2/7).Num

[10:22] <camelia> rakudo-moar 726a75e24: OUTPUT: «0.2857142857142857␤»

[10:23] <lizmat> my car misses a Mr. Fusion powersource

[10:23] <nwc10> I think it's a *good* list, and I agree with most of it

[10:23] <nwc10> I didn't mean at all to belittle it

[10:23] <nwc10> I think it has most things that matter, and doesn't omit anything massive

[10:23] <jnthn> I think we even do call the W functions in quite a few places in MoarVM

[10:23] <MasterDuke> the test is https://github.com/Raku/roast/blob/master/S32-temporal/DateTime-Instant-Duration.t#L40

[10:24] <nwc10> it was more "a solution to most of these already exists"

[10:24] <jnthn> Remind me what the /r flag is?

[10:24] <nwc10> substition (or transliteration) returns the modified value. Original variable is unchanged

[10:24] <jnthn> Oh, right :)

[10:25] <jnthn> Yeah, we have that but differently done

[10:26] <nine> A thing that's very true for Raku(do) also: "Simply put, we need more people, and we need to do better with the people we have. We need a way to get more people able to work on actual real core features, and we need to ensure that the people we do have can work on features as best as they can."

[10:26] <nine> from the reply

[10:27] <jnthn> Indeed.

[10:28] <nine> I think much more than with those technical topics we can learn from Perl about these social aspects.

[10:28] <nine> For example that we absolutely need to keep a good balance between backwards compatibility and the possibility for newcomers to be able to make contributions to the core.

[10:29] <nwc10> Oops. I accidentally started a discussion. I didn't mean to distract people.

[10:29] <nine> Personally I love Perl's backwards compatibility as a user and I've completely given up on getting any change into perl.

[10:29] * nine is having lunch anyway :)

[10:29] <nwc10> where did breakfast go?

[10:30] <nwc10> that one with the IO module and the opcode hook was a real problem, in that different things expect different behaviours from the same "feature", and it was never thought through

[10:31] <nine> In a slight deviation to my usual eating schedule I had a bit of cake with my coffee before the 11 o'clock meeting and I count that as breakfast ;)

[10:31] <nwc10> aha, "safely in my tummy"

[10:31] <nwc10> this being the phrase I was trying to encourage the children with, particularly when there are dogs around

[10:32] <nwc10> on the basis of if it's not safely in *your* tummy, pretty soon it might be safely in a different tummy

[10:42] <MasterDuke> https://github.com/rakudo/rakudo/pull/4265 now has the commit that speeds up `now`, but it still has the problem with that one spectest

[10:43] <lizmat> MasterDuke: does it keep the old nqp::time_* ops working ?

[10:43] <MasterDuke> yeah

[10:43] <lizmat> Cool!

[10:44] <lizmat> I would be in favour of merging all of that now

[10:44] <lizmat> anybody any objections ?

[10:44] <nine> I guess that one spec test failure counts as an objection?

[10:45] <MasterDuke> well, time is one of those things i know is impossible to get right (like names and places), so i certainly would appreciate if people gave the diff a look

[11:15] <MasterDuke> lizmat: i just made the minimal changes needed for Telemetry to work. it might be possible to simplify/optimize it to work in nanoseconds and reduce some of the math going on

[11:16] <lizmat> MasterDuke: cool, will look at that after the merge

[11:17] <lizmat> MasterDuke: look at the failing test, I believe we cannot fix that

[11:17] <lizmat> since Instant no longer has a Rat at its source

[11:18] <lizmat> and 2/7 cannot be represented correctly using integer / float representations

[11:20] <sena_kun> no merge if breakage

[11:21] <MasterDuke> well, the test is just testing the string representation

[11:22] <lizmat> MasterDuke: but you can't go from an approximation to a Rat, so that will never work?

[11:23] <MasterDuke> true. but i wonder what master would say if the test is changed to is-deeply

[11:24] <lizmat> fails with is-deeply

[11:24] <lizmat> <2/7>

[11:24] <lizmat> #      got: Duration.new(<2/7>)

[11:25] <lizmat> passes with: is-deeply diff(second => 2/7).Rat, 2/7

[11:25] <MasterDuke> ah, but the duration is carrying around the 2/7

[11:26] <lizmat> ah... did you change Duration as well to not have a Rat at its core ?

[11:26] <MasterDuke> yeah

[11:26] <MasterDuke> i'll see how easy it is to back that out

[11:26] <lizmat> well... don't 

[11:27] <MasterDuke> and just change Instant instead

[11:27] <lizmat> because I feel that using a Rat there is the wrong thing anyway

[11:27] <MasterDuke> wait, don't what?

[11:27] <lizmat> don't revert the Duration change

[11:27] <lizmat> you won't be able to make a Rat out of a nanosecond (integer) value anyway

[11:28] <lizmat> the whole intent of making Instant based on a Rat, was to give it more precision than floating point would

[11:29] <MasterDuke> just nanoseconds / 1000000000

[11:29] <lizmat> hmmm... actually, that might work if you changed the .Rat methods on Instant and Duration ?

[11:31] <MasterDuke> well, i do already

[11:31] <MasterDuke> https://github.com/rakudo/rakudo/pull/4265/files#diff-823cb500d7cba754f1723b150d579257117c55bb9df5a57c24e938e5630e219eR30

[11:32] <lizmat> Cool

[11:32] <lizmat> but that still makes the test fail then...  what does it give for the values ?

[11:33] <MasterDuke> # expected: '0.285714'

[11:33] <MasterDuke> #      got: '0.285714285'

[11:34] <lizmat> and with: is-deeply diff(second => 2/7).Rat, 2/7 ?

[11:34] <MasterDuke> # expected: <2/7>

[11:34] <MasterDuke> #      got: 0.285714285

[11:35] <MasterDuke> which seems odd

[11:35] <lizmat> no, that's correct

[11:35] <lizmat> because 2/7 can not really be represented as a string

[11:35] <lizmat> so it chooses to do <2/7> instead

[11:36] <MasterDuke> right

[11:36] <lizmat> perhaps changing the test to: is diff(second => 2/7).Num, 2/7.Num

[11:37] <lizmat> actually: is-deeply diff(second => 2/7).Num, 2/7.Num

[11:37] <lizmat> this passes on master

[11:38] <MasterDuke> hm, doesn't here

[11:38] <MasterDuke> # expected: 0.2857142857142857e0

[11:38] <MasterDuke> #      got: 0.285714285e0

[11:40] <MasterDuke> https://github.com/rakudo/rakudo/pull/4265/files#diff-45927982f124bf65c3dfac4c83a9feea4d173b82733df1d67cb43fac2c88f2beR117-R119

[11:42] <lizmat> is-deeply diff(second => 2/7).Num, 2/7.Num, 'Instant subtraction (non-integral seconds)';

[11:42] <lizmat> doesn't pass for you on master ??  qeird

[11:42] <lizmat> *weird

[11:42] <MasterDuke> on my branch

[11:44] <lizmat> aah... ok

[11:46] <MasterDuke> would we have more freedom to change tests if we stick this change behind a lang version boundary? i.e., 6.e

[11:47] <lizmat> how about: is diff(second => 2/7).fmt('%.9f'), (2/7).fmt('%.9f')

[11:47] <lizmat> since the test *was* about string comparisons

[11:50] *** lizmat_ joined
[11:50] <MasterDuke> heh. fails in the last number (expected 6 got 5). `.fmt('%.8f')` works...

[11:51] <lizmat_> well, that'd be close enough, I'd say

[11:53] <MasterDuke> it also passes if you just change the `is` to `is-approx`

[11:53] *** lizmat left
[11:56] *** lizmat_ is now known as lizmat

[11:56] <lizmat> MasterDuke: https://github.com/Raku/roast/commit/b97859e3f385efae89861d14818f4e140944feb1

[11:58] <MasterDuke> cool. that'll have to be cherry-picked back to the errata branches, right?

[12:01] <lizmat> yeah, guess so  :-)

[12:02] <sena_kun> yes

[12:02] <sena_kun> I'll do cherry-picking anyway, but doing so now will save some time when releasing.

[12:02] <sena_kun> Also, can anyone please check kill.t test on errata branches?

[12:11] <nine> sena_kun: I get the same errors as you

[12:15] <nine> sena_kun: oh, actually... did you run make stresstest after switching branches, or just runn kill.t manually? Because that failing test should be fudged

[12:16] <sena_kun> nine, on errata branches this test dies for me when I do make stresstest, yes.

[12:16] <sena_kun> Actually, I do `z ss` using zscipt, but I believes it does the same.

[12:17] <nine> And if you run kill.rakudo.moar manually?

[12:17] <sena_kun> s/es/e/

[12:17] <sena_kun> nine, https://gist.github.com/Altai-man/8c87b45ad885409e627b3216537f7aa8 <- ?

[12:19] <nine> That does say that it's TODOed: not ok 9 - did we get STDOUT # TODO

[12:19] <nine> Though what's TODO is less fixing rakudo and more fixing the test, which I did a year ago in roast master

[12:19] <sena_kun> nine, but you can re-create failure when running stresstest, no?

[12:20] <nine> sure

[12:22] <sena_kun> Phew. So yes, 1)when running separately it seems to be ok; 2)when running as part of the suite it complains about number of tests not matching.

[12:22] <nine> Well, actually no

[12:23] <sena_kun> Hm?

[12:24] <nine> Sorry, I misspoke. make stresstest passes on 6.c-errata and 6.d-errata

[12:31] <MasterDuke> i just had a fail in t/spec/MISC/bug-coverage-stress-6.d.t

[12:37] <nine> MasterDuke: that one's still waiting for https://github.com/rakudo/rakudo/pull/4253

[12:37] <MasterDuke> ah, thought that had already been merged, nm then

[12:38] <nine> I think I'll just change the fix to $l.lock; $.unlock; and leave the potential optimization for later

[12:39] <MasterDuke> otherwise passing tests all around for the nqp::time PRs

[12:41] <MasterDuke> hm, but maybe there's a way to get back some of the performance of `now` i initially had...

[12:55] *** zakharyas joined
[13:04] <MasterDuke> initial idea didn't work...i got rid of one division, but added enough multiplications to more than compensate

[13:11] *** lucasb joined
[13:12] <sena_kun> nine, cannot reproduce it now, so just a noise, I guess.

[13:22] <MasterDuke> ok, by making some (i believe reasonable) assumptions and hardcoding some values, got `my $a; my $s := now; $a := now for ^100_000; say now - $s;` back down to 0.045s

[13:29] <MasterDuke> i.e., the Instant we create with `now`is always after the complete list of leap seconds, so no need to calculate that for each call

[14:07] <MasterDuke> and now down to 0.03s

[14:08] <nwc10> extrapolating wildly, it will be free in about 3 hours from now, and if you keep going further then it will start to return the answer before you even called it :-)

[14:09] <nwc10> cool - 0.03s sounds awesome

[14:11] <MasterDuke> it's fun to compare a before and after profile. something like 3.8m fewer things allocated

[15:44] *** sena_kun left
[15:44] *** sena_kun joined
[15:46] *** lucasb left
[15:48] *** lucasb joined
[17:08] *** patrickb joined
[17:26] *** patrickb left
[18:00] *** patrickb joined
[18:22] *** zakharyas left
[19:05] *** sxmx left
[19:09] <lizmat> for some reason I got pinged on Twitter about this: https://www.i-programmer.info/news/90-tools/14454-regexploit-put-a-stop-to-regular-expression-dos-attacks.html

[19:30] *** zakharyas joined
[20:06] *** patrickb left
[20:42] *** zakharyas left
[20:48] <bartolin_> does anyone know (if there is) an easy way to generated different code for the JVM backend in a module? something similar to the preprocessor directives (#?if jvm ... #endif) we have for the core. More specifically I'd like to special case two declarations for the JVM in lib/NativeCall.rakumod -- see https://github.com/rakudo/rakudo/issues/3043#issuecomment-809679990

[20:52] <moon-child> $*VM

[20:53] <moon-child> r: say $*VM.name eq 'jvm'

[20:53] <camelia> rakudo-jvm 08b449e1a: OUTPUT: «True␤»

[20:53] <camelia> ..rakudo-moar 726a75e24: OUTPUT: «False␤»

[20:55] <bartolin_> r: if $*VM.name eq "jvm" { my $foo = "jvm" } else { my constant $foo = "moar" }; say $foo

[20:55] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$foo' is not declared␤at <tmp>:1␤------> 3else { my constant $foo = "moar" }; say 7⏏5$foo␤»

[20:55] <camelia> ..rakudo-jvm 08b449e1a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$foo' is not declared␤at <tmp>:1␤------> 3else { my constant $foo = "moar" }; say 7⏏5$foo␤»

[20:55] <bartolin_> that's what I'd like to do ...

[20:59] <japhb> r: BEGIN q:c{my {'constant' if $*VM.name eq 'moar'} $foo = "{$*VM.name}";}.EVAL; say $foo;

[20:59] <camelia> rakudo-jvm 08b449e1a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling /home/camelia/EVAL_0␤  Malformed my␤  at /home/camelia/EVAL_0:1␤  -----…»

[20:59] <camelia> ..rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling /home/camelia/EVAL_0␤  Malformed my␤  at /home/camelia/EVAL_0:1␤  ----…»

[21:02] <bartolin_> hmm EVAL. I didn't consider that. But it's probably not the right thing to do ;)

[21:03] <bartolin_> maybe it would be 'good enough' to just drop the constant on MoarVM.

[21:05] <japhb> bartolin_: I talked with camelia for a bit.  There's another problem that I forgot: EVAL is a lexical context; $foo won't leak.

[21:05] <bartolin_> oh, so it wouldn't even help. japhb++

[21:06] <japhb> Come to think of it, it's probably a CompUnit.

[21:11] <lizmat> notable6: weekly reset

[21:11] <notable6> lizmat, Moved existing notes to “weekly_2021-03-29T21:11:03Z”

[21:20] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/03/29/2021-13-games-pop/

[21:34] *** sxmx joined
[21:36] <MasterDuke> anyone have an idea why https://github.com/MasterDuke17/Text-Diff-Sift4/blob/speed_up_pure_raku_version/lib/Text/Diff/Sift4.pm6 would generate massive profiles? just running the sift4 sub with a fixed string against 1000 words from a scrabble list generates a 67mb html profile and the file size blows up fast

[22:07] *** sena_kun left
[22:23] *** Voldenet left
[22:28] *** Voldenet joined
[22:28] *** Voldenet left
[22:28] *** Voldenet joined
[23:25] *** Voldenet left
[23:30] *** Voldenet joined
[23:30] *** Voldenet left
[23:30] *** Voldenet joined
