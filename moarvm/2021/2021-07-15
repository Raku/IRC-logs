[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[02:10] *** benchable6 left
[02:10] *** nativecallable6 left
[02:10] *** notable6 left
[02:10] *** coverable6 left
[02:10] *** reportable6 left
[02:10] *** quotable6 left
[02:10] *** unicodable6 left
[02:10] *** releasable6 left
[02:10] *** shareable6 left
[02:10] *** linkable6 left
[02:10] *** committable6 left
[02:10] *** squashable6 left
[02:10] *** bisectable6 left
[02:10] *** sourceable6 left
[02:10] *** statisfiable6 left
[02:10] *** evalable6 left
[02:10] *** greppable6 left
[02:10] *** tellable6 left
[02:10] *** bloatable6 left
[02:11] *** sourceable6 joined
[02:11] *** benchable6 joined
[02:11] *** nativecallable6 joined
[02:12] *** bloatable6 joined
[02:12] *** shareable6 joined
[02:12] *** linkable6 joined
[02:12] *** reportable6 joined
[02:12] *** squashable6 joined
[02:12] *** tellable6 joined
[02:12] *** bisectable6 joined
[02:13] *** evalable6 joined
[02:13] *** unicodable6 joined
[02:13] *** releasable6 joined
[02:13] *** statisfiable6 joined
[02:13] *** coverable6 joined
[02:13] *** quotable6 joined
[02:13] *** greppable6 joined
[02:13] *** committable6 joined
[02:14] *** notable6 joined
[02:53] *** frost joined
[02:58] *** MasterDuke left
[03:58] *** committable6 left
[03:58] *** bloatable6 left
[03:58] *** bisectable6 left
[03:58] *** unicodable6 left
[03:58] *** quotable6 left
[03:58] *** evalable6 left
[03:58] *** notable6 left
[03:58] *** coverable6 left
[03:58] *** shareable6 left
[03:58] *** benchable6 left
[03:58] *** greppable6 left
[03:59] *** committable6 joined
[03:59] *** shareable6 joined
[03:59] *** greppable6 joined
[03:59] *** quotable6 joined
[04:00] *** benchable6 joined
[04:01] *** bisectable6 joined
[04:01] *** unicodable6 joined
[04:01] *** coverable6 joined
[04:01] *** evalable6 joined
[04:01] *** notable6 joined
[04:01] *** bloatable6 joined
[05:01] *** notable6 left
[05:01] *** evalable6 left
[05:01] *** bloatable6 left
[05:01] *** unicodable6 left
[05:01] *** quotable6 left
[05:01] *** nativecallable6 left
[05:01] *** linkable6 left
[05:01] *** greppable6 left
[05:01] *** coverable6 left
[05:01] *** releasable6 left
[05:01] *** tellable6 left
[05:01] *** committable6 left
[05:01] *** sourceable6 left
[05:01] *** shareable6 left
[05:01] *** reportable6 left
[05:01] *** statisfiable6 left
[05:01] *** bisectable6 left
[05:01] *** squashable6 left
[05:01] *** benchable6 left
[05:02] *** releasable6 joined
[05:02] *** nativecallable6 joined
[05:02] *** reportable6 joined
[05:02] *** benchable6 joined
[05:02] *** unicodable6 joined
[05:02] *** notable6 joined
[05:02] *** sourceable6 joined
[05:03] *** statisfiable6 joined
[05:03] *** evalable6 joined
[05:03] *** tellable6 joined
[05:03] *** quotable6 joined
[05:04] *** greppable6 joined
[05:04] *** committable6 joined
[05:04] *** linkable6 joined
[05:04] *** bloatable6 joined
[05:04] *** coverable6 joined
[05:04] *** bisectable6 joined
[05:04] *** shareable6 joined
[05:04] *** squashable6 joined
[05:14] *** Kaiepi left
[05:33] *** Kaiepi joined
[05:38] *** Kaiepi left
[05:43] *** Kaiepi joined
[05:51] *** Kaiepi left
[05:53] *** Kaiepi joined
[05:58] *** Kaiepi left
[06:00] *** Kaiepi joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:23] *** Kaiepi left
[06:23] *** Kaipi joined
[06:30] *** Kaipi left
[06:30] *** Kaiepi joined
[06:47] *** Kaiepi left
[06:53] *** Kaiepi joined
[07:44] *** patrickb joined
[07:59] *** Kaiepi left
[08:00] *** Kaiepi joined
[08:39] *** Kaipi joined
[08:40] *** Kaiepi left
[09:49] <timo> there's nothing yet to dump disp program related data?
[09:53] <jnthnwrthngtn> timo: There's two `#define`s in src/disp/program.c; one dumps the outcome of recording the dispatch, the second dumps the dispatch program that was produced and installed.
[09:53] <timo> i wonder how i missed that
[09:53] <timo> (i only looked for "dump", and only in a few files, maybe that was it)
[09:54] <jnthnwrthngtn> I sorta wish they each added the line/file of the callsite
[09:57] <timo> i wonder if i can get that in there without too much reading of the everything
[09:57] <timo> so i'm just randomly browsing a spesh log of core setting compilation
[09:58] <timo> and i'm seeing ACCEPTS from QRegex with the type tuple QRegex (Conc), BOOTStr (Conc), the code is basically just "check params are ok, call `parse` method on object"
[09:59] <timo> and the parse method call is this here:       [Annotation: Cached (bytecode offset 60)]
[09:59] <timo>       dispatch_o        r6(3), lits(lang-meth-call), callsite(0x1721d20, 8 arg, 4 pos, nonflattening, interned),   r4(2),   r5(1),   r3(2),   r2(2),   r6(2),   r7(1)
[09:59] <timo> but in the spesh log the stats don't point out any dispatcher outcomes at all, and the After version says "never dispatched"
[10:00] <timo> *looks at impl of lang-meth-call*
[10:01] <jnthnwrthngtn> Yes, if you look at iirc MVM_frame_dispatch then you'll see it never sets a spesh correlation ID or records params etc. 
[10:01] <jnthnwrthngtn> That may be LHF-ish
[10:01] <timo> oh my! that's a TLA that i like
[10:01] <jnthnwrthngtn> Also spesh candidate selection
[10:02] <jnthnwrthngtn> The main thing to know is that the calling conventions are a bit different now
[10:03] <jnthnwrthngtn> And the adaptation needed will be there. Given MVM_frame_invoke is going away once we fully switch over to MVM_frame_dispatch, and most things are switched over anyway, you could just comment out the spesh bits in _invoke rather than finding a way to make it work with both at once
[10:04] <jnthnwrthngtn> Also if you're wondering how any of the dispatch works and didn't ready the 6guts posts, I think at least one of them is a decent introduction :)
[10:05] <timo> https://github.com/MoarVM/MoarVM/blob/new-disp/src/disp/program.c#L2420-L2425 here the implementation of MVMDispOpcodeGuardNoResumptionTopmost falls through to MVMDispOpcodeGuardNoResumptionCaller falls through to MVMDispOpcodeUpdateResumeState, that smells unintentional, but if it is intentional, i'd put a comment for you
[10:06] <jnthnwrthngtn> I think that's accidental
[10:06] <timo> i'll cook up a commit quickly
[10:06] <jnthnwrthngtn> Yeah, it is. 
[10:07] <jnthnwrthngtn> ...wonder how we get away with it o.O
[10:07] <jnthnwrthngtn> Please at least check for no change in NQP and Rakudo `make test`
[10:07] <jnthnwrthngtn> Just in case
[10:08] <jnthnwrthngtn> Next task for me is turning smart_intify (and later smart_numify) into dispatchers
[10:08] <timo> that doesn't hang very low, does it?
[10:08] <timo> i guess it depends mostly on when you're going to do the next bit of new-disp work
[10:09] <jnthnwrthngtn> Oh, I was going to do this right now :)
[10:09] <jnthnwrthngtn> It will be one more `make test` failure eliminated.
[10:09] <jnthnwrthngtn> And maybe more spectests passing
[10:10] <jnthnwrthngtn> I probably should work on something else at some point today, but this is rather good fun :)
[10:12] <Nicholas> the night is still young
[10:12] <jnthnwrthngtn> :)
[10:15] <timo> t/nqp/097-hll.t ........................ 1/50 lang-meth-call cannot work out how to dispatch on type '(null)'
[10:15] <timo> i presume no test failures of nqp tests are known
[10:18] <timo> i get this without my local changes as well, though
[10:18] <Nicholas> I see that one fail. I assumed that it was a known failure
[10:19] <timo> there's a few nok followed by that exception
[10:19] <timo> OK, then that's probably fine. at least jn surely knows about it now if it's not
[10:19] <jnthnwrthngtn> That one is a known failure
[10:19] <jnthnwrthngtn> There's a minor design decision that I'm procrastinating :)
[10:20] *** linkable6 left
[10:20] *** evalable6 left
[10:20] <Nicholas> aha right, thanks. that answered my next question
[10:20] <timo> ah ISTR something about that
[10:20] <jnthnwrthngtn> (Also fixing it almost certainly doesn't win me anything in Rakudo tests)
[10:20] *** linkable6 joined
[10:22] *** evalable6 joined
[10:28] <timo> ok rakudo's make test output is identical
[10:28] <jnthnwrthngtn> yay
[10:28] <jnthnwrthngtn> timo++
[10:29] <jnthnwrthngtn> I see the libera move gave us opposite outcomes on nick length.
[10:29] <jnthnwrthngtn> Must be some conservation principle at work.
[10:29] *** Nicholas is now known as jnthn
[10:29] *** jnthn is now known as nicholas
[10:29] *** nicholas is now known as Nicholas
[10:30] <Nicholas> OK, it's still registered, but it's not used.
[10:30] <Nicholas> (I forgot to chcek with whowas before pulling that little stunt)
[10:30] <jnthnwrthngtn> Yeah, guess maybe some day if it's unused long enough I might get it back
[10:30] <Nicholas> so I wonder when the next round of expiry will be
[10:31] <Nicholas> they announced that they changed policy so that registered but unused nicks would expire rapidly. But I don't think that they made that policy retroactive.
[10:31] <Geth> ¦ MoarVM/new-disp: 5e7743cdc3 | (Timo Paulssen)++ | src/disp/program.c
[10:31] <Geth> ¦ MoarVM/new-disp: Add unintentionally omitted break to cases
[10:31] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/5e7743cdc3
[10:35] <Geth> ¦ MoarVM/new-disp: a284a6d5e2 | (Jonathan Worthington)++ | src/disp/syscall.c
[10:35] <Geth> ¦ MoarVM/new-disp: Add can-unbox-to-* syscalls
[10:35] <Geth> ¦ MoarVM/new-disp: 
[10:35] <Geth> ¦ MoarVM/new-disp: This will save the various coercey dispatchers from doing a rather more
[10:35] <Geth> ¦ MoarVM/new-disp: expensive attempt to unbox followed by exception handling to see if it's
[10:35] <Geth> ¦ MoarVM/new-disp: possible.
[10:35] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a284a6d5e2
[10:43] <timo> the disp dump also doesn't output what the name of the dispatch target was that launched the recording? like froj must recording and program you can't tell that it was a boot-boolify?
[10:44] <jnthnwrthngtn> True
[10:44] <timo> i assume you'd also like that?
[10:45] <timo> especially boot-boolify can be sneaky i guess
[10:48] <jnthnwrthngtn> Yeah, it can be useful info
[10:49] <Geth> ¦ MoarVM/new-disp: 560d22df24 | (Jonathan Worthington)++ | src/disp/syscall.c
[10:49] <Geth> ¦ MoarVM/new-disp: Further syscalls to aid porting smart_intify
[10:49] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/560d22df24
[10:57] <jnthnwrthngtn> Yup, down to 4 files with failure in make test after porting smart-intify
[10:58] <jnthnwrthngtn> I'll do smart-numify while I'm at it
[11:06] <timo> mhh, the current_disp of the record will contain whatever we ended up calling, so would always be like boot-code or boot-constant etc, let's see where i need to look to find the first dispatcher in the chain instead
[11:07] <jnthnwrthngtn> Yeah, 'fraid so
[11:07] <jnthnwrthngtn> Lunch, bbiab
[11:13] <Geth> ¦ MoarVM/new-disp: 3b5dac2315 | (Timo Paulssen)++ | src/disp/program.c
[11:13] <Geth> ¦ MoarVM/new-disp: For dispatch recording and dispatch program dump, add filename and line number info
[11:13] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/3b5dac2315
[11:13] <timo> here's the debug output addition
[11:16] <timo> sometimes looks unhelpful, for example    at <unknown>:1  (<ephemeral file>:<mainline>)
[11:16] <timo> but what can you do
[11:25] <timo> how do we distinguish "unboxability" from "unboxability", i wonder.
[11:25] <timo> as in, what can be unboxed, and what can't be boxed
[11:26] <timo> i guess the latter would be inboxability
[11:26] <timo> and the combination would be inunboxability
[11:27] <timo> AFKabit
[11:32] *** dogbert17 joined
[11:33] *** MasterDuke joined
[11:36] <MasterDuke> timo: is the profiler going to need any changes to support new-disp?
[11:52] <jnthnwrthngtn> I suspect some of the missing line/file info is because we don't emit those annotations properly for rules
[11:54] <MasterDuke> is that something can be (easily) fixed?
[11:55] <jnthnwrthngtn> Yes
[12:01] <Geth> ¦ MoarVM/new-disp: 998bbc01ff | (Jonathan Worthington)++ | src/disp/syscall.c
[12:01] <Geth> ¦ MoarVM/new-disp: Further syscalls to aid porting smart_numify
[12:01] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/998bbc01ff
[12:02] <jnthnwrthngtn> Either we are emitting a Stmts node around the regex node but not setting a match on it (and I think fixing that might do it), or alternatively we need to emit annotations on compilation of some regex nodes
[12:02] *** reportable6 left
[12:03] <MasterDuke> would this be a fix for master also? or just new-disp?
[12:03] *** reportable6 joined
[12:04] <jnthnwrthngtn> master
[12:05] <jnthnwrthngtn> It's independent of new-disp
[12:05] <jnthnwrthngtn> I'd meant to look into it before because it also blocks comma being able to do code coverage of grammar rules
[12:06] <MasterDuke> i'm up for small, self-contained projects while on holiday
[12:07] <MasterDuke> have an idea of where in the (i assume rakudo) source to start looking?
[12:08] <jnthnwrthngtn> Starting from the regex_def action method, if it's just a failure to stick a node on the QAST::Stmts
[12:09] <jnthnwrthngtn> Otherwise look into compile_annotation and where it's used
[12:10] <jnthnwrthngtn> (In the NQP repo, under src/vm/moar/QAST/)
[12:10] <MasterDuke> cool, thanks
[12:11] <MasterDuke> timo, jnthnwrthngtn: and what's the sample code you used that exposed the missing annotations?
[12:19] <jnthnwrthngtn> Down to 3 failures in `make test` and up to 1296 fully passing spectest files
[12:20] <jnthnwrthngtn> MasterDuke: If you have a grammar and run with MVM_COVERAGE_LOG=foo or some such, then `foo` will miss entries for the rule, iirc
[12:23] <jnthnwrthngtn> Ohh, it may not be regexes in general...not sure
[12:23] <jnthnwrthngtn> But
[12:23] <jnthnwrthngtn> ./rakudo-m --ll-exception -e 'grammar G { token TOP { (<xxx>) } }; G.parse("x")'
[12:23] <jnthnwrthngtn> Oh, it is in fact
[12:23] <jnthnwrthngtn> In the output of that:
[12:23] <jnthnwrthngtn>  from <unknown>:1  (<ephemeral file>:)
[12:24] <jnthnwrthngtn>  from -e:1  (<ephemeral file>:TOP)
[12:24] <jnthnwrthngtn> Ah, no, it knows there TOP is. But the (...) (which compiles into its own block) gets no annotation
[12:39] <jnthnwrthngtn> dogbert17 (and others): I think new-disp is now at the point where it is becoming useful to look at remaining test (especially spectest) failures, and 1) report anything that is SEGV, 2) golf non-SEGV ones. For now, performance info is not useful (need to wire spesh back up).
[12:40] <jnthnwrthngtn> I've not actually seen a SEGV for a while :)
[12:41] <jnthnwrthngtn> .oO( cue report of 20 segfaults... )
[12:46] <jnthnwrthngtn> haha...I just found one (heap profiler explodes)
[12:47] <jnthnwrthngtn> ah, a silly one too
[12:48] * dogbert17 tries to build new-disp
[12:48] <jnthnwrthngtn> Also, just fixed passing Proxy to `is rw` args in multiple dispatch
[12:48] <jnthnwrthngtn> 1306 fullying passing spectest files
[12:48] <jnthnwrthngtn> I think that means less than 100 failing
[12:59] <dogbert17> noooo, I almost managed to build everything and then ...
[12:59] <dogbert17> +++ Generating perl6-valgrind-m
[12:59] <dogbert17> +++ Creating installation directories
[12:59] <dogbert17> +++ Removing old files
[12:59] <dogbert17> MoarVM panic: Cannot handle new callsite format in MVM_args_copy_callsite
[12:59] <dogbert17> make: *** [Makefile:1450: m-install-pre] Error 1
[13:00] <dogbert17> hmm, perhaps it just made it and then failed during some cleanup
[13:01] <jnthnwrthngtn> ah, did you try to `make install`?
[13:01] <dogbert17> yes
[13:01] <jnthnwrthngtn> ah yes, that is indeed still busted
[13:01] <jnthnwrthngtn> `make test` and `make spectest` work without it though
[13:02] <dogbert17> cool, do I have to set any environment variables or is new disp used by default?
[13:03] <jnthnwrthngtn> By default now
[13:05] <dogbert17> cool, three failed tests when running 'make test' but you mentioned that
[13:05] *** MasterDuke left
[13:06] *** MasterDuke joined
[13:21] <jnthnwrthngtn> Yes, matches what I have here
[13:22] <jnthnwrthngtn> Hopefully will soon be down to 2
[13:24] <Geth> ¦ MoarVM/new-disp: da6fd4a5a6 | (Jonathan Worthington)++ | 8 files
[13:24] <Geth> ¦ MoarVM/new-disp: Fix callstack marking in heap snapshot mode
[13:24] <Geth> ¦ MoarVM/new-disp: 
[13:24] <Geth> ¦ MoarVM/new-disp: Which means that we no longer segfault when making a heap snapshot (or
[13:24] <Geth> ¦ MoarVM/new-disp: at least, not in the basic tested case).
[13:24] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/da6fd4a5a6
[13:24] <jnthnwrthngtn> Yup, that makes it 2 for me
[13:32] <MasterDuke> why do only QAST::Stmt and QAST::Stmts nodes have a `self.compile_annotation($node);` in them?
[13:39] <jnthnwrthngtn> Because statement level line numbers are considered accurate enough (and keep the size of the position info emitted down)
[13:42] <MasterDuke> k
[13:45] <dogbert17> some tests complain about requiring mutable arguments even though they seem to have that?
[13:45] <dogbert17> Cannot resolve caller postfix:<-->(Int:D); the following candidates
[13:45] <dogbert17> match the type but require mutable arguments:
[13:45] <dogbert17>     (Mu:D $a is rw)
[13:45] <dogbert17>     (Int:D $a is rw --> Int:D)
[13:46] <jnthnwrthngtn> Are you at ffede8cc0be? That fixed a bunch of those
[13:46] <jnthnwrthngtn> (It's the latest commit I pushed)
[13:46] <dogbert17> aha, lemme check
[13:47] *** patrickb left
[13:47] <dogbert17> I wasn't oops
[13:48] *** patrickb joined
[13:48] <jnthnwrthngtn> I've just done a local fix for S02-types/num.t too (need to make sure it doesn't regress anything)
[13:49] <jnthnwrthngtn> Also some regex tests blow up with "Unexpected named argument 'result-int' passed" and I've got a probable fix for that locally too
[13:51] *** patrickb left
[13:52] *** patrickb joined
[13:52] * [Coke] wonders if it would help to get a blin run for new-dispatch before spectest hits 100%
[13:53] *** patrickb left
[13:54] *** patrickb joined
[13:54] <jnthnwrthngtn> Probably a bit early for that now, but yes, once we're within 10 tests or so, it could be an interesting indication
[13:55] *** patrickb left
[13:56] *** patrickb joined
[13:57] *** patrickb left
[13:58] *** patrickb joined
[13:59] <dogbert17> 'new-disp callwith nyi' I guess that one is trycky
[13:59] <dogbert17> *tricky
[14:00] * Altai-man considers a good idea to do a run once spectest/stresstest are clean
[14:02] *** patrickb left
[14:02] *** patrickb joined
[14:02] <jnthnwrthngtn> dogbert17: yes, that's both tricky and on my todo list :)
[14:03] <dogbert17> ok, what about 'take without gather' then?
[14:05] <jnthnwrthngtn> That's quite unexpected
[14:06] <jnthnwrthngtn> Worth golfing
[14:07] <jnthnwrthngtn> One thing worth noting: there may be spectests that are against fixes in master that we haven't got in new-disp yet (didn't rebase for a copule of weeks)
[14:09] <jnthnwrthngtn> Altai-man: Might be worth having it slightly ahead of that if the handful of failures are relatively esoteric, just to get a picture of how much ecosystem fallout there is and start to categorize it into "we have to fix it", "the module depends on impl details but we can bridge it", "the module depneds on impl details and we can't do anything about it", etc.
[14:10] <jnthnwrthngtn> Up to 1313 passing spectests for me
[14:12] <dogbert17> that's very close
[14:16] *** patrickb left
[14:17] *** frost left
[14:17] *** patrickb joined
[14:17] <[Coke]> m: say 1313/1406
[14:17] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «0.933855␤»
[14:17] *** MasterDuke77 joined
[14:18] *** MasterDuke left
[14:20] *** dogbert17 left
[14:20] *** dogbert11 joined
[14:23] *** patrickb left
[14:23] *** patrickb joined
[14:28] <dogbert11> here's a MoarVM Panic:  squish(Any, 'a', 'b', 'b', 'c', 'd', 'e', 'f', 'f', 'a')
[14:28] <[Coke]> is that on new-disp?
[14:29] <jnthnwrthngtn> ah, that's the same one as with `make install`
[14:29] <dogbert11> yes, seems to be
[14:30] <dogbert11> [Coke]: yes it's on new-disp
[14:32] *** patrickb left
[14:32] *** patrickb joined
[14:34] *** patrickb left
[14:34] *** patrickb joined
[14:38] *** patrickb left
[14:39] *** patrickb joined
[14:43] *** patrickb left
[14:43] *** patrickb joined
[14:49] *** patrickb left
[14:50] *** patrickb joined
[15:01] <dogbert11> this also fails with new-disp:   multi f((Int :$value, *%)) { "Int $value" }; multi f((Str :$value, *%)) { "Str $value" }; f("a" => "x")
[15:02] <jnthnwrthngtn> Ah, sub-signature unpacking. 
[15:03] <jnthnwrthngtn> Hm, maybe I have a guess about that
[15:10] *** patrickb left
[15:10] *** patrickb joined
[15:13] *** patrickb left
[15:18] <Geth> ¦ MoarVM/new-disp: 2c0acef072 | (Jonathan Worthington)++ | src/core/args.c
[15:18] <Geth> ¦ MoarVM/new-disp: Implement MVM_args_copy_callsite for new convs
[15:18] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/2c0acef072
[15:19] <jnthnwrthngtn> With that, `make install` works
[15:21] <dogbert11> and you fixed at least one spectest file
[15:23] <jnthnwrthngtn> ah, nice
[15:26] *** patrickb joined
[15:28] <jnthnwrthngtn> Hm, where did the ~1405 number for spectests come from? Maybe it includes Inline::Perl5 tests?
[15:28] <jnthnwrthngtn> for me it reports "Files=1349" at the end. I count 1321 `ok`s in the output. I see about 30 failed tests in the list of results.
[15:30] <jnthnwrthngtn> m: say 1321 / 1349
[15:30] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «0.979244␤»
[15:30] <jnthnwrthngtn> At least 2 failing files are due to needing to rebase
[15:31] <dogbert11> perhaps 1405 was a stresstest, hmm
[15:32] <jnthnwrthngtn> Maybe
[15:33] <jnthnwrthngtn> Anyway, seems to be it's looking rather better than we thought so far as spectest goes
[15:33] <jnthnwrthngtn> I was assuming I had 
[15:33] <jnthnwrthngtn> ~80 left to fix (without considering Inline::Perl5). There's actually more like ~30.
[15:35] <MasterDuke77> should a QAST::Regex ever not have a `:node($/)`?
[15:36] <jnthnwrthngtn> It's optional; the current compiler frontend is quite enthusiastic about placing them, but the RakuAST-based one will be far less eager
[15:36] <MasterDuke77> hm
[15:43] <dogbert11> I have 35 test failures ATM
[15:44] <dogbert11> a bunch seems to be tests expecting a certain exception but gets AdHoc insted
[15:46] <dogbert11> e.g. t/spec/S32-str/sprintf.t
[15:49] <jnthnwrthngtn> Hm, that seems to be the same as one of the remaining `make test` issues
[15:52] <dogbert11> here's a golf (I think):   { sprintf "%d", 0^1 }
[15:53] <dogbert11> under new-disp I get:   elems requires a concrete object (got a VMNull type object instead)
[15:54] <dogbert11> it is expected to return:   Directive %d not applicable for value of type Junction (one(0, 1))
[15:58] <nine> 192
[15:59] <nine> err...disregard that :)
[15:59] <Nicholas> that's a bit short for a password
[16:00] <Nicholas> even our combination bike locks have more digits than that :-)
[16:01] <jnthnwrthngtn> dogbert11: ah, thanks for the golf, that's easier
[16:01] <jnthnwrthngtn> dogbert11: I've just done a debugging tweak in NQP to try and help figure out what on earth is going on
[16:06] <[Coke]> jnthnwrthngtn: my number just a wc -l off the file minus comments, I was super lazy!
[16:10] <jnthnwrthngtn> [Coke]: Ah, right, that includes tress tests then :)
[16:10] <jnthnwrthngtn> dogbert11: Might have figured that one out just now
[16:13] <dogbert11> cool, a thinko?
[16:14] <jnthnwrthngtn> Probably
[16:15] <jnthnwrthngtn> I fixed something in the NQP location that threw the exception and misunderstood what it was meant to be sending along
[16:16] <dogbert11> so it might be an easy fix then?
[16:16] <jnthnwrthngtn> Think I already have one
[16:16] <jnthnwrthngtn> Well, it fixes your golf.
[16:16] *** squashable6 left
[16:17] <dogbert11> there are half a dozen files where tests fail due to incorrect exceptions being returned
[16:17] <jnthnwrthngtn> And it fixes one more `make test`, and S32-str/sprintf.t
[16:17] <dogbert11> yay
[16:17] <jnthnwrthngtn> Yeah, I suspect those all need different fixes, alas
[16:17] <dogbert11> darn
[16:18] *** squashable6 joined
[16:19] <jnthnwrthngtn> Fix for the sprintf thing pushed (to the nqp repo)
[16:19] <dogbert11> todays shocker is that I have a non alcoholic beer in my fridge
[16:20] <jnthnwrthngtn> Tomorrow's shocker will be that I have lots of nice beer in the fridge but will have been told not to drink 
[16:21] <dogbert11> with 30 degrees C (86F) both inside and outside I'll sonn have to open it
[16:21] <jnthnwrthngtn> :)
[16:21] <jnthnwrthngtn> Ouch, that's way too hot
[16:22] <dogbert11> yeah, it's not supposed to be this hot. Guess I shouldn't complain though :)
[16:22] <jnthnwrthngtn> I fear that the things that are LHF-ish for me to fix are running out in the spectets now. Everything looks like something that needs non-trivial effort. :)
[16:23] <jnthnwrthngtn> I fear that the things that are LHF-ish for me to fix are running out in the spectets now. Everything looks like something that needs non-trivial effort. :)
[16:23] <dogbert11> noo
[16:24] *** MasterDuke77 left
[16:24] <jnthnwrthngtn> Hmm, S05-modifier/counted-match.t is curious
[16:26] * dogbert11 is rebuilding nqp and rakudo
[16:26] <jnthnwrthngtn> Hm, it vanishes upon golf. grr
[16:30] <jnthnwrthngtn> ah, it golfs to "aa" ~~ m:nth(1|2)/a/; "aa" ~~ m:nth(1^2)/a/;
[16:33] * [Coke] has new beer that's a passionfruit mango randle.
[16:34] <[Coke]> errrrrr a shandy. oops
[16:39] <jnthnwrthngtn> Hm, I wonder if the assignment is accidentally auto-threading...
[16:39] <jnthnwrthngtn> oh or hmm
[16:40] <jnthnwrthngtn> OK, now I'm at the "how did this ever work" point :)
[16:41] <jnthnwrthngtn> m: "aa" ~~ m:nth(1|2)/a/; "aa" ~~ m:nth(1^2)/a/;
[16:41] <camelia> rakudo-moar 5ecc8308f: ( no output )
[16:41] <jnthnwrthngtn> m: dd $/; "aa" ~~ m:nth(1|2)/a/; dd $/; "aa" ~~ m:nth(1^2)/a/; dd $/;
[16:41] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «Nil $/ = Nil␤Junction $/ = any(Match.new(:orig("aa"), :from(0), :pos(1)), Match.new(:orig("aa"), :from(1), :pos(2)))␤Junction $/ = one(Match.new(:orig("aa"), :from(0), :pos(1)), Match.new(:orig("aa"), :from(1), :pos(2)))␤»
[16:45] <jnthnwrthngtn> We have this function:
[16:45] <jnthnwrthngtn> method !match-nth(Mu \slash, \cursor, \move, \post, $nth, %opts) {
[16:45] <jnthnwrthngtn> Signature binding fails because $nth is Junction, not Any, and so triggers junction auto-threading
[16:46] <jnthnwrthngtn> And at least on new-disp, it sees that slash contains a Junction and so goes auto-threading over that, and then over $nth
[16:46] <jnthnwrthngtn> I'm guessing it doesn't on `master`
[16:55] <jnthnwrthngtn> m: dd $/; "aa" ~~ m:nth(1|2):i/a/; dd $/; "aa" ~~ m:nth(1^2):i/a/; dd $/;
[16:55] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «Nil $/ = Nil␤Junction $/ = any(Match.new(:orig("aa"), :from(0), :pos(1)), Match.new(:orig("aa"), :from(1), :pos(2)))␤Junction $/ = one(Match.new(:orig("aa"), :from(0), :pos(1)), Match.new(:orig("aa"), :from(1), :pos(2)))␤»
[16:58] <jnthnwrthngtn> m: dd $/; "aa" ~~ m:nth(1|2):x(1)/a/; dd $/; "aa" ~~ m:nth(1^2):x(1)/a/; dd $/;
[16:58] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «Nil $/ = Nil␤List $/ = $(any(Match.new(:orig("aa"), :from(0), :pos(1)), Match.new(:orig("aa"), :from(1), :pos(2))),)␤List $/ = $(one(Match.new(:orig("aa"), :from(0), :pos(1)), Match.new(:orig("aa"), :from(1), :pos(2))),)␤»
[17:00] * jnthnwrthngtn is confused
[17:01] <jnthnwrthngtn> Ah well, time to go home.
[17:03] <dogbert11> you've made a lot of progress today
[17:04] <jnthnwrthngtn> This week has been pretty productive for new-disp
[17:04] <dogbert11> indeed
[17:04] <japhb> jnthnwrthngtn++   # Heck yeah
[17:07] <jnthnwrthngtn> Doubt I'll get to anything more tomorrow
[17:07] <jnthnwrthngtn> home time &
[17:32] *** MasterDuke joined
[17:50] *** patrickb left
[17:56] *** patrickb joined
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:11] *** MasterDuke left
[18:16] <Geth> ¦ MoarVM: 97948c2a6f | (Ben Davies)++ | src/io/syncsocket.c
[18:16] <Geth> ¦ MoarVM: Assign the result of a socket(2) call immediately
[18:16] <Geth> ¦ MoarVM: 
[18:16] <Geth> ¦ MoarVM: This allows the socket to be closed should bind(2) or connect(2)
[18:16] <Geth> ¦ MoarVM: fail.
[18:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/97948c2a6f
[18:16] <Geth> ¦ MoarVM: d523b1fcf1 | (Patrick Böker)++ (committed using GitHub Web editor) | src/io/syncsocket.c
[18:16] <Geth> ¦ MoarVM: Merge pull request #1505 from Kaiepi/set-syncsocket
[18:16] <Geth> ¦ MoarVM: 
[18:16] <Geth> ¦ MoarVM: Assign the result of a socket(2) call immediately
[18:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d523b1fcf1
[18:16] *** MasterDuke joined
[18:17] <dogbert11> jnthnwrthngtn: the 'take without gather' problem in new-disp I was harping about before can be 'golfed' down to:
[18:17] <dogbert11> MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 ./rakudo-m -Ilib -MTest -e 'is do { [+] grep * %% 2, (1, 2, *+* ...^ * > 4_000_000) }, 4613732, "fibonacci"'
[18:19] <patrickb> Any reason not to give Kaiepi a commit bit in moar?
[18:19] <patrickb> ^ping jnthnwrthngtn
[18:40] <nine> jnthnwrthngtn: LOL I fixed t/spec/S02-names/is_cached.t on new-disp :) Feel free to throw away my commit if you have something else in mind. It's more an exercise in getting the lay of the land anyway ;)
[18:58] *** linkable6 left
[18:58] *** linkable6 joined
[19:27] *** squashable6 left
[19:27] *** squashable6 joined
[19:34] *** Geth left
[19:35] *** Geth joined
[20:11] <jnthnwrthngtn> nine: Nice! Seems reasonable to me at first glance.
[20:13] <jnthnwrthngtn> nine: One thing you may have an idea about is why ProxyReaderFactory's code gen ends up causing reproducible-builds.t to fail.
[20:14] <jnthnwrthngtn> I don't think the things its producing should end up anywhere in the build output, but apparently somehow they do.
[20:20] <MasterDuke> ugh, testing my changes is much more annoying on the laptop, building rakudo takes twice as long as on the desktop
[20:32] <MasterDuke> jnthnwrthngtn: i added a `$block[1].node($/)` here https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L4962 when $block[1] was https://gist.github.com/MasterDuke17/5fad87f77189fa3133d627dcb04c86e8 but that doesn't seem to have done anything
[20:33] <MasterDuke> was that at least a somewhat-close-to-correct thought?
[20:36] <jnthnwrthngtn> MasterDuke: Is $block[1] a QAST::Stmts node? If so I'd expect that to help but...
[20:36] <MasterDuke> yep
[20:37] <MasterDuke> yep
[20:37] <jnthnwrthngtn> MasterDuke: I think the problem is actually about positional captures
[20:38] <jnthnwrthngtn> https://github.com/Raku/nqp/blob/master/src/QRegex/P6Regex/Actions.nqp#L834
[20:39] <jnthnwrthngtn> In there we never emit a QAST::Stmts around things afaict, and that is probably a problem
[20:39] <MasterDuke> ah, i'll try some keyboard flailing around there
[20:40] <MasterDuke> i did look at all the cases of `rxtype<subcapture>` in rakudo's actions and they all had a `:node($/)`
[20:57] *** linkable6 left
[20:59] *** linkable6 joined
[21:06] *** patrickb left
[22:20] *** committable6 left
[22:20] *** greppable6 left
[22:20] *** notable6 left
[22:20] *** releasable6 left
[22:20] *** bloatable6 left
[22:20] *** tellable6 left
[22:20] *** shareable6 left
[22:20] *** sourceable6 left
[22:20] *** benchable6 left
[22:20] *** evalable6 left
[22:20] *** statisfiable6 left
[22:20] *** coverable6 left
[22:20] *** bisectable6 left
[22:20] *** linkable6 left
[22:20] *** squashable6 left
[22:21] *** quotable6 left
[22:21] *** unicodable6 left
[22:21] *** reportable6 left
[22:21] *** nativecallable6 left
[22:21] *** benchable6 joined
[22:21] *** coverable6 joined
[22:21] *** statisfiable6 joined
[22:21] *** bisectable6 joined
[22:22] *** squashable6 joined
[22:22] *** greppable6 joined
[22:22] *** notable6 joined
[22:22] *** unicodable6 joined
[22:22] *** bloatable6 joined
[22:22] *** evalable6 joined
[22:23] *** tellable6 joined
[22:23] *** sourceable6 joined
[22:23] *** releasable6 joined
[22:23] *** quotable6 joined
[22:23] *** linkable6 joined
[22:23] *** reportable6 joined
[22:23] *** nativecallable6 joined
[22:23] *** shareable6 joined
[22:24] *** committable6 joined
[23:46] *** linkable6 left
[23:46] *** evalable6 left
[23:47] *** linkable6 joined
[23:48] *** evalable6 joined
[23:52] *** jgaz joined
