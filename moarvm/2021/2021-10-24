[00:03] *** reportable6 left
[00:04] *** reportable6 joined
[00:23] *** Kaiepi joined
[01:17] *** vrurg joined
[01:20] *** vrurg_ left
[02:11] *** vrurg_ joined
[02:14] *** vrurg left
[03:22] *** unicodable6 left
[03:22] *** bloatable6 left
[03:22] *** reportable6 left
[03:22] *** shareable6 left
[03:22] *** squashable6 left
[03:22] *** quotable6 left
[03:22] *** greppable6 left
[03:22] *** coverable6 left
[03:22] *** releasable6 left
[03:22] *** committable6 left
[03:22] *** statisfiable6 left
[03:22] *** sourceable6 left
[03:22] *** nativecallable6 left
[03:22] *** notable6 left
[03:22] *** evalable6 left
[03:22] *** bisectable6 left
[03:22] *** tellable6 left
[03:22] *** benchable6 left
[03:22] *** linkable6 left
[03:24] *** tellable6 joined
[03:24] *** statisfiable6 joined
[03:24] *** linkable6 joined
[03:24] *** squashable6 joined
[03:24] *** coverable6 joined
[03:24] *** greppable6 joined
[03:24] *** vrurg_ left
[03:24] *** sourceable6 joined
[03:25] *** vrurg joined
[04:25] *** reportable6 joined
[04:25] *** evalable6 joined
[04:25] *** quotable6 joined
[04:25] *** notable6 joined
[04:25] *** nativecallable6 joined
[04:25] *** bisectable6 joined
[05:03] *** frost joined
[05:23] *** releasable6 joined
[05:24] *** bloatable6 joined
[05:25] *** unicodable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:23] *** benchable6 joined
[06:25] *** shareable6 joined
[06:26] *** committable6 joined
[08:29] <Geth> Â¦ MoarVM: MasterDuke17++ created pull request #1577: Silence wrong GCC warning about unused variable

[08:29] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1577

[09:57] *** linkable6 left
[09:57] *** evalable6 left
[09:57] *** linkable6 joined
[10:58] *** evalable6 joined
[11:25] <nine> https://www.extremetech.com/extreme/188776-how-l1-and-l2-cpu-caches-work-and-why-theyre-an-essential-part-of-modern-chips

[11:25] <nine> Finally an explanation for cache associativity that I understand

[11:58] *** linkable6 left
[11:58] *** evalable6 left
[12:00] *** linkable6 joined
[12:01] *** evalable6 joined
[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:08] <dogbert17> nine: any theories wrt https://gist.github.com/dogbert17/d3fee0f081bb30be355108854faa2f71

[12:08] <nine> Haven't had a look yet

[12:11] <dogbert17> hopefully it won't lead into some kind of rabbit hole :)

[12:41] <nine> New world record! 13.220s

[12:41] <nine> That's almost a full second faster than pre-new-disp. And I haven't even started on JITing native call yet

[12:42] <nine> This speedup is just from no longer unconditionally boxing results of native calls

[12:43] <Geth> Â¦ MoarVM/new-disp-nativecall: ba5513f870 | (Stefan Seifert)++ | 4 files

[12:43] <Geth> Â¦ MoarVM/new-disp-nativecall: Avoid boxing native call results if native type is requested

[12:43] <Geth> Â¦ MoarVM/new-disp-nativecall: review: https://github.com/MoarVM/MoarVM/commit/ba5513f870

[12:45] <Geth> Â¦ MoarVM/new-disp-nativecall: 246565db31 | (Stefan Seifert)++ | 8 files

[12:45] <Geth> Â¦ MoarVM/new-disp-nativecall: Fixup "Translate dispatch to native functions"

[12:45] <Geth> Â¦ MoarVM/new-disp-nativecall: 

[12:45] <Geth> Â¦ MoarVM/new-disp-nativecall: When the rakudobug that prevents us from using natively typed dispatch ops for

[12:45] <Geth> Â¦ MoarVM/new-disp-nativecall: calls is fixed, we need native versions of sp_runnativecall as well

[12:45] <Geth> Â¦ MoarVM/new-disp-nativecall: review: https://github.com/MoarVM/MoarVM/commit/246565db31

[12:56] <MasterDuke> ugh. i dislike msvc

[13:23] *** linkable6 left
[13:23] *** evalable6 left
[13:26] <jnthnwrthngtn> dogbert17: Hmm...that's a curious one.

[13:27] <jnthnwrthngtn> nine: Yay...numbers with the JITting should be rather nice :)

[13:31] <jnthnwrthngtn> Release is out, so guess on tomorrow I'll merge some things :)

[13:38] <MasterDuke> this is blowing my mind. there are `#if foo ... #endif` elsewhere in interp.c, but the one i added is causing msvc to die

[13:43] <dogbert17> jnthnwrthngtn: FWIW, adding MVM_SPESH_OSR_DISABLE=1 seems to remove/hide the problem

[14:25] *** linkable6 joined
[14:53] *** MasterDuke left
[15:03] *** MasterDuke joined
[15:30] <MasterDuke> oh! i think i figured it out. the `#if ... #endif` i added is inside an MVMROOT. it looks like msvc expands that macro (and the block inside) into a single line, so then my directives are just stuck in the middle of the line and don't work

[15:38] <MasterDuke> oh, somehow i didn't realize that's normal behavior (i.e., i think gcc and clang do the same thing). but i guess the real difference is that msvc is doing macro expansion before processing the `#if` directive

[15:38] <MasterDuke> now to see if there's a way to change that order...

[15:39] <MasterDuke> oh, or maybe it's just easier to move the variable declaration outside the MVMROOT (and leave the assigning inside)...

[15:50] <nine> MasterDuke: or replace the MVMROOT macro with MVM_gc_root_temp_push/MVM_gc_root_temp_pop

[15:51] <MasterDuke> you can see what it looks like now, i just force pushed to https://github.com/MoarVM/MoarVM/pull/1577

[15:52] <MasterDuke> but yeah, that was the other better option

[15:52] <MasterDuke> (better than trying to mess with msvc macro expansion rules)

[15:59] <nine> We're JITing calls to void (*native_function)()! Feels like I've been here before :D

[16:02] <nine> Actually void (*native_function)(void) but I guess few people actually know about that distinction

[16:03] <MasterDuke> that's pretty cool. how many layers of indirection are removed?

[16:04] <timo> i didnt know there was a distinction, i thought when i was forced to write the void in there for some microcontroller firmware that was just some random "c standard from the eighteen hundreds" thing

[16:05] <nine> MasterDuke:  https://github.com/MoarVM/MoarVM/blob/new-disp-nativecall/src/core/nativecall_dyncall.c#L882

[16:07] <nine> In C, a void foo(); declaration lets you pass any arguments to foo. Only void foo(void); makes the compiler complain if you pass arguments

[16:25] *** evalable6 joined
[16:27] *** dogbert17 left
[16:42] *** dogbert17 joined
[16:46] <MasterDuke> nine: any further thoughts/questions on https://github.com/MoarVM/MoarVM/pull/1574 and https://github.com/MoarVM/MoarVM/pull/1577 ?

[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[19:04] *** linkable6 left
[19:04] *** evalable6 left
[19:05] *** linkable6 joined
[19:08] *** vrurg_ joined
[19:11] *** vrurg left
[19:23] <nine> MasterDuke: just expressed them Ã–D

[19:23] <nine> :D

[19:28] <nine> That work for avoiding needless boxing of return values in native calls pays off in another way as well. For sp_runnativecall_i returning the result is really just: | mov WORK[runcode->return_register], RV

[19:31] <nine> This already handles smaller integer types as well, as the trunc/extend is already emitted by the code-gen of dispatch_i.

[20:14] *** vrurg joined
[20:14] *** vrurg_ left
[20:55] <MasterDuke> thanks

[21:01] <Geth> Â¦ MoarVM: c008c8eb91 | (Daniel Green)++ | src/core/interp.c

[21:01] <Geth> Â¦ MoarVM: Silence wrong GCC warning about unused variable

[21:01] <Geth> Â¦ MoarVM: 

[21:01] <Geth> Â¦ MoarVM: It's used in an `assert()` a couple lines down, but even with `--debug=3`

[21:01] <Geth> Â¦ MoarVM: for some reason GCC doesn't see it as being used.

[21:01] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c008c8eb91

[21:01] <Geth> Â¦ MoarVM: b4854e7678 | (Daniel Green)++ | src/strings/unicode_ops.c

[21:01] <Geth> Â¦ MoarVM: Silence GCC warning for using `cps` uninitialized

[21:01] <Geth> Â¦ MoarVM: 

[21:01] <Geth> Â¦ MoarVM: It is actually initialized in both branches of the `if/else` right above

[21:01] <Geth> Â¦ MoarVM: (assuming `cp_num` > 0 (but adding an assert for that didn't help)) so

[21:01] <Geth> Â¦ MoarVM: just surpress the warning.

[21:01] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b4854e7678

[21:01] <Geth> Â¦ MoarVM: eb16462233 | MasterDuke17++ (committed using GitHub Web editor) | 2 files

[21:01] <Geth> Â¦ MoarVM: Merge pull request #1577 from MasterDuke17/fix_the_two_current_warnings

[21:01] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/eb16462233

[21:01] <Geth> Â¦ MoarVM: 52c4a6d753 | (Daniel Green)++ | src/jit/x64/emit.dasc

[21:01] <Geth> Â¦ MoarVM: Improve the jit implementation of nqp::abs_i

[21:01] <Geth> Â¦ MoarVM: 

[21:01] <Geth> Â¦ MoarVM: We don't need to copy the source twice, it's faster just to refer back

[21:01] <Geth> Â¦ MoarVM: to it in the cmovl.

[21:01] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/52c4a6d753

[21:01] <Geth> Â¦ MoarVM: 444367cea6 | MasterDuke17++ (committed using GitHub Web editor) | src/jit/x64/emit.dasc

[21:01] <Geth> Â¦ MoarVM: Merge pull request #1574 from MasterDuke17/improve_jit_of_abs_i

[21:01] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/444367cea6

[21:14] *** linkable6 left
[21:14] *** linkable6 joined
[22:13] *** vrurg_ joined
[22:13] *** vrurg left
[22:13] *** vrurg_ left
[22:14] *** vrurg joined
[23:05] *** evalable6 joined
