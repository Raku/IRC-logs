[00:03] *** reportable6 left
[00:03] *** reportable6 joined
[00:11] *** frost joined
[02:15] *** frost left
[02:16] *** MasterDuke left
[03:10] *** AlexDaniel left
[03:12] *** AlexDaniel joined
[03:35] *** AlexDaniel left
[05:22] *** coverable6 left
[05:22] *** greppable6 left
[05:22] *** notable6 left
[05:22] *** statisfiable6 left
[05:22] *** benchable6 left
[05:22] *** shareable6 left
[05:22] *** bisectable6 left
[05:22] *** unicodable6 left
[05:22] *** quotable6 left
[05:22] *** committable6 left
[05:22] *** bloatable6 left
[05:22] *** linkable6 left
[05:22] *** releasable6 left
[05:22] *** reportable6 left
[05:22] *** evalable6 left
[05:22] *** nativecallable6 left
[05:22] *** sourceable6 left
[05:22] *** tellable6 left
[05:22] *** squashable6 left
[05:22] *** sourceable6 joined
[05:22] *** releasable6 joined
[05:22] *** notable6 joined
[05:22] *** benchable6 joined
[05:22] *** quotable6 joined
[05:22] *** squashable6 joined
[05:22] *** linkable6 joined
[05:22] *** committable6 joined
[05:23] *** unicodable6 joined
[05:23] *** reportable6 joined
[05:23] *** coverable6 joined
[05:24] *** tellable6 joined
[05:24] *** statisfiable6 joined
[05:24] *** bloatable6 joined
[05:24] *** nativecallable6 joined
[05:25] *** evalable6 joined
[05:25] *** shareable6 joined
[05:25] *** greppable6 joined
[05:25] *** bisectable6 joined
[05:26] *** squashable6 left
[05:28] *** squashable6 joined
[05:57] <nine> So those were legit? Cool :)
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:17] <nine> jnthnwrthngtn: is the lack of break; for case MVMDispOpcodeGuardNoResumptionCaller and MVMDispOpcodeUpdateResumeState in MVM_disp_program_run intentional?
[07:05] *** patrickb joined
[07:25] *** AlexDaniel joined
[07:49] *** AlexDaniel left
[08:00] *** AlexDaniel joined
[08:23] *** AlexDaniel left
[08:33] *** AlexDaniel joined
[08:40] *** AlexDaniel left
[09:00] *** frost joined
[09:06] *** AlexDaniel joined
[10:09] *** linkable6 left
[10:09] *** evalable6 left
[10:11] *** evalable6 joined
[10:11] *** linkable6 joined
[10:22] *** Kaiepi left
[10:23] *** Kaiepi joined
[10:26] <jnthnwrthngtn> nine: Well, some of them were skating on thin ice: they invoked a relatively complex process that - if it gives a certain return value - should not have resulted in any allocations taking place. However, static analysis can't reasonably know that property, and there's a relatively high risk of a future change resulting in allocations happening, at which point we'd risk breakage.
[10:26] <jnthnwrthngtn> So I decided on balance it's better to add them. Anything that gets really hot will end up with the dispatch program compiled into ops anyway.
[10:26] <jnthnwrthngtn> And parts of it spesh'd away
[10:27] <jnthnwrthngtn> And won't hit this.
[10:42] *** discord-raku-bot left
[10:56] *** discord-raku-bot joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:27] <jnthnwrthngtn> Time for round 3 of trying to figure out the bug, except I've also found a new way to make ASAN go boom early in the build
[12:31] <jnthnwrthngtn> nine: Hm, that looks suspect; will look at it, though later (nothing in NQP uses resumption)
[12:38] <jnthnwrthngtn> Ah, turns out the reason I didn't see the ASAN blow-up before isn't because it's new, but because it only happens when MVM_SPESH_DISABLE=1 is set. So the opposite direction to the effect that flag normally causes...
[13:03] *** linkable6 left
[13:03] *** evalable6 left
[13:06] *** linkable6 joined
[13:06] *** evalable6 joined
[13:06] <jnthnwrthngtn> nine, sena_kun Even after I install the kernel module and install a newer rr (--version says 5.4.0) it still doesn't work for me; the error has changed to "[FATAL /build/rr-D6ACZo/rr-5.4.0/src/PerfCounters_x86.h:94:compute_cpu_microarch()] AMD CPU type 0x20f10 unknown"
[13:06] <jnthnwrthngtn> Did you do a bleeding edge source install or some such?
[13:07] <jnthnwrthngtn> https://github.com/rr-debugger/rr/commit/9c5bc8fa5ee1deb9a4be65d79105a867e9930ece seems to be the commit I need
[13:08] <jnthnwrthngtn> ah, yes, the release was before then
[13:08] <sena_kun> jnthnwrthngtn, did you apply the patch from the wiki page?
[13:09] <jnthnwrthngtn> sena_kun: The kernel module?
[13:09] <jnthnwrthngtn> Yes
[13:09] <jnthnwrthngtn> But for rr itself I just installed the latest package, which it seems is too old. I guess I need to do a source build
[13:09] <sena_kun> :/
[13:09] <jnthnwrthngtn> Did you get it working on your newest machine, btw? (Pretty sure it's the same CPU as I have.)
[13:09] <sena_kun> perhaps, would be great if it works
[13:10] <sena_kun> for the record I did not try it, as I don't debug C usually.
[13:10] <sena_kun> so not so much info, sorry
[13:17] <jnthnwrthngtn> Seems a source build works. Now i need to figure out hwo to use it :)
[13:18] <nine> jnthnwrthngtn: yes, running it on a 5950X
[13:19] <nine> jnthnwrthngtn: rr record whatever-you-want-to-record ; rr replay
[13:19] <nine> then you're in gdb and have now the power of reverse-continue, reverse-next and reverse-step :)
[13:19] *** frost left
[13:20] <nine> What I mostly do is watch -l foo->bar[1]->borked and reverse-continue
[13:23] <jnthnwrthngtn> Ah, I thought it wasn't working, but didn't realize it puts me at the start of execution and I needed to `continue` to get to the segv of interest :)
[13:29] <jnthnwrthngtn> Brilliant. I thought this one should be good with rr, and indeed, it points right at the problem
[13:34] <Geth> Â¦ MoarVM/new-disp: d2d2628aa2 | (Jonathan Worthington)++ | src/6model/reprs/MVMCFunction.c
[13:34] <Geth> Â¦ MoarVM/new-disp: Clear cur_args_callsite when adapting legacy args
[13:34] <Geth> Â¦ MoarVM/new-disp: 
[13:34] <Geth> Â¦ MoarVM/new-disp: Otherwise we will try to GC mark the args buffer according to the legacy
[13:34] <Geth> Â¦ MoarVM/new-disp: layout.
[13:34] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/d2d2628aa2
[13:35] <jnthnwrthngtn> nine++ sena_kun++ for rr help
[13:48] <Geth> Â¦ MoarVM/new-disp: 54bdf4595d | (Jonathan Worthington)++ | src/6model/reprs/MVMCFunction.c
[13:48] <Geth> Â¦ MoarVM/new-disp: Clear cur_args_callsite when adapting legacy args
[13:48] <Geth> Â¦ MoarVM/new-disp: 
[13:48] <Geth> Â¦ MoarVM/new-disp: Otherwise we will try to GC mark the args buffer according to the legacy
[13:48] <Geth> Â¦ MoarVM/new-disp: layout.
[13:48] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/54bdf4595d
[13:51] <jnthnwrthngtn> Hmm, using rr record on the NQP runner seems not to work out?
[13:57] <jnthnwrthngtn> (can't continue past the execve)
[14:05] <patrickb> jnthn: The runner generated in the build dir uses execve, while the installed one doesn't. You could just debug the installed executable
[14:05] <tellable6> patrickb, I'll pass your message to jnthn
[14:11] <patrickb> jnthnwrthngtn: ^
[14:22] <jnthnwrthngtn> patrickb: Ah, interesting, thanks. There's also a workaround with rr too that I ended up using
[14:28] <nine> what's the workaround?
[14:30] <jnthnwrthngtn> Use `when` to get teh current event number, then `rr reply -g X` where X is the value when gives you plus something big enough to get over the execve (unless you're looking for something super early in MoarVM execution, -g 2000 is plenty enough)
[14:30] <jnthnwrthngtn> ops, *replay
[14:30] <jnthnwrthngtn> Unless the amount of work the runner does changes, you can just throw on the -g 2000 argument, I think
[14:32] <jnthnwrthngtn> The first step (run it until it hits the execve and using when) is just to get a reasonable guess at the number
[14:34] <jnthnwrthngtn> Sadly, the reverse debugger doesn't tell me much more about the bug I was hunting; it confirms a GC run scribbles over the arg name MVMString object, which fits what I already knew
[14:37] <jnthnwrthngtn> Argh, I found it :/
[14:37] <jnthnwrthngtn> That was silly
[14:38] <Geth> Â¦ MoarVM/new-disp: 7a8c13942a | (Jonathan Worthington)++ | src/core/callsite.c
[14:38] <Geth> Â¦ MoarVM/new-disp: Make sure to mark and cleanup all interns
[14:38] <Geth> Â¦ MoarVM/new-disp: 
[14:38] <Geth> Â¦ MoarVM/new-disp: The `max_arity` is an inclusive endpoint, not an exclusive one.
[14:38] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/7a8c13942a
[14:39] <jnthnwrthngtn> I nabbed the code from the interns cleanup, which already had the off-by-one, and didn't notice
[14:47] <jnthnwrthngtn> With the explosive build fixed, it's back to the explosive tests.
[15:03] <Nicholas> ASAN is excited by t/nqp/053-knowhow.t and t/nqp/090-findmethod.t
[15:33] <jnthnwrthngtn> Yes, those are the very ones I'm looking at. It's bizzare.
[16:02] <jnthnwrthngtn> It seems we somehow try to return from the same frame twice...
[16:18] *** linkable6 left
[16:18] *** evalable6 joined
[16:18] *** evalable6 left
[16:19] *** evalable6 joined
[16:19] *** linkable6 joined
[16:28] <jnthnwrthngtn> Ah, which in turn is 'cus there's a stray flattening call stack record 
[17:01] <Geth> Â¦ MoarVM/new-disp: 4a26415193 | (Jonathan Worthington)++ | src/core/callstack.c
[17:01] <Geth> Â¦ MoarVM/new-disp: Don't leave flattening records behind
[17:01] <Geth> Â¦ MoarVM/new-disp: 
[17:01] <Geth> Â¦ MoarVM/new-disp: Otherwise, we'll be expecting bytecode frame records, won't find them,
[17:01] <Geth> Â¦ MoarVM/new-disp: and will end up not leaving a bytecode frame when we expect to do so.
[17:01] <Geth> Â¦ MoarVM/new-disp: Fixes the ASAN excitement in a couple of NQP tests.
[17:01] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/4a26415193
[17:02] <jnthnwrthngtn> Now there's only one failing NQP test file for something that I've yet to decide should survive anyway
[17:04] <jnthnwrthngtn> GC stressing shows up a few more failures in tests that don't show up in the build, curiously 
[17:09] <timo> an exciting read, the backlog for today and yesterday
[17:34] <Nicholas> curious, yes.
[17:34] <Nicholas> For me, ASAN is bored again. t/nqp/097-hll.t fails 39, 40, 41, 42 then aborts with lang-meth-call cannot work out how to dispatch on type '(null)'
[17:34] <Nicholas> but I assume that you know that.
[17:40] <timo> who putted a null in there
[17:41] <Nicholas> given the 4 preceding test failures, I suspect that it's just confused.
[17:43] <timo> foncused
[17:47] <jnthnwrthngtn> Reuse code they said. There'll be less bugs they said.
[17:48] <Nicholas> They were wrong. There would be fewer :-)
[17:48] * Nicholas ducks
[17:51] <Geth> Â¦ MoarVM/new-disp: 0eab228b36 | (Jonathan Worthington)++ | 3 files
[17:51] <Geth> Â¦ MoarVM/new-disp: Distinguish cases of dispatch run record unwinding
[17:51] <Geth> Â¦ MoarVM/new-disp: 
[17:51] <Geth> Â¦ MoarVM/new-disp: When we are unwinding it becaues of a success, we want to remove any
[17:51] <Geth> Â¦ MoarVM/new-disp: flattening record that lies underneath it, because the invocation is
[17:51] <Geth> Â¦ MoarVM/new-disp: completed. This was fixed in the previous commit. Unfortunately, this
[17:51] <Geth> Â¦ MoarVM/new-disp: code was also used when we want to drop a dispatch run record because
[17:51] <Geth> Â¦ MoarVM/new-disp: we didn't meet the guards - in which case we're going to try another
[17:51] <Geth> Â¦ MoarVM/new-disp: dispatch program or record a new one, and in this case we certainly do
[17:51] <Geth> Â¦ MoarVM/new-disp: not want to throw away the args flattening frame, because we need the
[17:51] <Geth> Â¦ MoarVM/new-disp: flattened args for the next thing we try, and the eventual dispatch
[17:51] <Geth> Â¦ MoarVM/new-disp: target.
[17:51] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/0eab228b36
[17:53] <jnthnwrthngtn> Well, arguably this was half a bug in that it was right in half the cases :)
[17:53] <jnthnwrthngtn> Anyway, yay, now NQP builds and passes tests with the FSA debug and small nursery and GC debug checks
[17:53] <jnthnwrthngtn> And yes, the NQP test that fails is the one where I'm pondering whether to toss out the mechanism in question entirely
[17:54] <jnthnwrthngtn> It can stay failing until I make my mind up :)
[17:54] <Nicholas> how full is your beer fridge? Does that test need to worry?
[17:54] <jnthnwrthngtn> The beer fridge is very full due to a restock earlier this week. It was a challenge to fit it all in, especially keeping it sorted by type of beer.
[17:55] <jnthnwrthngtn> The NQP test that fails is lower priority than doing the Rakudo build fixing at this point, I think
[17:56] <jnthnwrthngtn> And with GC stressing that now says segfault
[17:56] <Nicholas> That sounds like the right trade off, as I can assume that you know what the implications of that test (failing) means
[17:58] <jnthnwrthngtn> Yeah, I need to decide what to do about method calls where we don't find the method
[17:58] <jnthnwrthngtn> And it's not quite so simple as "the Raku dispatch throws the Raku error" because then we get inter-lang calls wrong
[17:58] <jnthnwrthngtn> Without the GC stressing and stuff Raku's build now reaches the point I expected it to break.
[17:59] <jnthnwrthngtn> +++ Compiling blib/Perl6/BOOTSTRAP/v6c.moarvm
[17:59] <jnthnwrthngtn> lang-meth-call cannot work out how to dispatch on type 'Attribute'
[17:59] <jnthnwrthngtn> .oO( This is not the greatest bug in the world...this is just Attribute... )
[18:00] <Nicholas> oh noes
[18:00] <jnthnwrthngtn> That happens because in the bootstrap we didn't yet set up the dispatchers, so it's a timing/ordering problem, though maybe solvable by temporarily using the NQP dispatcher in place of the Rakudo one, because it knows enough
[18:01] <jnthnwrthngtn> I'll try it, but right now I want a) dinner, b) to make the beer fridge less crowded
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:08] <timo> i'm sorry, nqp dispatcher, but you know to much ... *blam*
[20:24] *** [Coke] left
[20:24] *** [Coke] joined
[20:28] <nine> The word attribute will never be the same
[20:29] <nine> Though...I like the song and the video, so it's ok :)
[21:11] <japhb> OK, now I'm wondering what video you're talking about, and whether I'd already heard the song and forgotten it or never heard it.
[21:39] *** patrickb left
[23:43] *** cognominal left
