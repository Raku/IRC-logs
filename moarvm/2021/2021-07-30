[00:02] *** reportable6 left
[00:03] *** reportable6 left
[01:04] *** reportable6 joined
[02:04] *** linkable6 left
[02:04] *** evalable6 left
[02:05] *** linkable6 joined
[02:06] *** evalable6 joined
[04:44] *** linkable6 left
[04:44] *** evalable6 left
[04:47] *** linkable6 joined
[05:46] *** evalable6 joined
[06:04] *** reportable6 left
[06:06] *** reportable6 joined
[07:53] <Nicholas> good *, #moarvm 
[07:54] <Nicholas> jnthnwrthngtn: *NQP* build failure? For me NQP is fine. Rakudo 6.c setting goes boom with "Language revision must be a concrete string"
[07:54] <Nicholas> and did on the previous commit, IIRC
[08:20] <nine> jnthnwrthngtn: if you're seeing "Attribute '$!result_reg' not declared" as well, that seems to be caused by inlining gen/moar/stage2/NQP.nqp:546 (pkg_add_attribute) into variable_declarator
[08:42] <nine> Or method new of QAST::Stmts, that's also inlined with unspecialized inlining active.
[08:44] <MasterDuke> nine: do you have any thoughts re making ex_release_mutex an array vs passing the particular mutex down to where the exeption is thrown vs something better?
[08:48] <nine> I hope we can come up with something better. Alas yesterday evening my creativity was sapped by a 3 course dinner
[08:50] <lizmat> .oO( the horror! )
[08:59] *** linkable6 left
[08:59] *** evalable6 left
[09:01] *** evalable6 joined
[09:32] *** patrickb joined
[09:43] <jnthnwrthngtn> moarning o/
[09:43] <Nicholas> \o
[09:43] <jnthnwrthngtn> Nicholas: It doesn't break because the lines that break it are communt out
[09:43] <Nicholas> ah OK
[09:43] <Nicholas> so, for me, setting build failed. With all the MVM ENV stuff set
[09:44] <Nicholas> I'm a bit busy with $other so wasn't digging hard
[09:44] <jnthnwrthngtn> nine: Yes, exactly that, and I'd got it to variable declarator too, but it looked about right in the spesh log
[10:00] *** linkable6 joined
[10:03] <nine> Yeah, haven't found anything obvious either
[10:30] *** sena_kun joined
[10:33] <nine> jnthnwrthngtn: one thing I do find odd. The inline log says that it inlines unspecialized pkg_add_attribute and unspecialized new but both inlined graphs do look specialized. There are a lot of sp_ ops in both
[10:35] <nine> Ah, because it gets optimized after picking
[10:44] <jnthnwrthngtn> Yes, what it should really say is it wasn't specialized before we came to trying to inline it
[10:46] <nine> Well it's definitely inlining of pkg_add_attribute, not of method new that's causing it
[10:47] <nine> Oh, one more thing: in pkg_add_attribute, there are 2 calls. The second one is sp_dispatch_v   lits(lang-meth-call), callsite(0x24f4d10, 5 arg, 5 pos, nonflattening, interned), sslot(0), litui32(3),   r8(2),   r7(2),   r6(5),   r1(2),   r5(2)
[10:47] <jnthnwrthngtn> OK, that's more than I knew. (I've got a few other things to work on this morning, so I'm not actively looking into it yet. Thanks for doing so.)
[10:48] <jnthnwrthngtn> Yeah, I didn't figure out if it somehow passes along the wrong name for the attribute or some such
[10:49] <nine> The r6(5) argument is sslot(1) which is an NQPClassHOW in the inlined graph. The inlined version passes r110(5) there which is sslot(59) which is Instance (NQPRoutine)
[10:49] <nine> Are we picking the wrong spesh slot here?
[10:49] <jnthnwrthngtn> Oh. This sounds ungood.
[10:50] <nine> Actually no spesh slot of the resulting graph at all holds an NQPClassHOW
[10:50] <jnthnwrthngtn> o.O
[10:50] <jnthnwrthngtn> Then something is very wrong
[10:51] <jnthnwrthngtn> I just...can't imagine where/how/why right away
[10:51] <nine> Also no register fact talks about NQPClassHOW despite the inlinee having 2 registers with known values of type NQPClassHOW
[10:52] <nine> All the more curious since AFAICT you didn't change anything about inlining mechanics like merging of spesh slots or renumbering of registers
[10:53] <jnthnwrthngtn> No, exactly
[10:54] <jnthnwrthngtn> oh, oops
[10:54] <jnthnwrthngtn> This doesn't explain things too well but
[10:55] <jnthnwrthngtn> It seems that I forgot to stack up the guards ahead of the inline
[10:58] <jnthnwrthngtn> That does seem to fix it
[10:59] <nine> \o/
[10:59] <jnthnwrthngtn> (I forgot because a) late, but b) I restructured the optimization process so that we don't insert guards if we can't actually do an optimization, which we would in the previous impl, but the previous one was a bit fiddly to do the re-org)
[11:00] <jnthnwrthngtn> Sorry for the wild goose chase. Although tbh I still don't understand why the problem caused the symptoms you saw
[11:01] <nine> Both calls in pkg_add_attribute have the comment # [000] Never dispatched
[11:02] <nine> Could it be that those new guards actually prevent the faulty code from running?
[11:02] <jnthnwrthngtn> I think it's a lie.
[11:03] <jnthnwrthngtn> Though let me check
[11:04] <jnthnwrthngtn> Yeah, it's a very dubious claim indeed.
[11:04] <jnthnwrthngtn> When we produce the specialization like this, we don't have any stats to hand
[11:05] <jnthnwrthngtn> And it doesn't differentiate that from "we have stats and they're all zero"
[11:06] <nine> Ah, of course, that makes sense
[11:08] <nine> With that fixed we're now at <43s for stage parse
[11:08] <Geth> ¦ MoarVM/new-disp: 2ecb380497 | (Jonathan Worthington)++ | src/spesh/optimize.c
[11:08] <Geth> ¦ MoarVM/new-disp: Fix and re-enable inlining without specialization
[11:08] <Geth> ¦ MoarVM/new-disp: 
[11:08] <Geth> ¦ MoarVM/new-disp: It didn't work because the guards weren't added; d'oh.
[11:08] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/2ecb380497
[11:08] <Geth> ¦ MoarVM/new-disp: f08c7f9332 | (Jonathan Worthington)++ | src/spesh/disp.c
[11:08] <Geth> ¦ MoarVM/new-disp: Less confusing spesh comment when no stats
[11:08] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/f08c7f9332
[11:09] <jnthnwrthngtn> nine: What did you have before this?
[11:10] <jnthnwrthngtn> And what is master's time on your machine?
[11:11] <nine> Got between 43 and 44s before this. master's at 34
[11:12] <jnthnwrthngtn> Getting closer :)
[11:12] <jnthnwrthngtn> We don't have JIT re-enabled yet
[11:13] <jnthnwrthngtn> And there's not a good solution for the megamorphic exploision in !protoregex yet
[11:13] <jnthnwrthngtn> And I've not even looked at new-disp under the eye of callgrind yet
[11:13] <jnthnwrthngtn> And - though it's probably a drop in the ocean - we've still got branching all over the place for legacy vs. new calling convs
[11:14] <jnthnwrthngtn> (About JIT: not re-enabled in so far as we don't yet JIT any of sp_dispatch, sp_runbytecode, nor sp_runcfunc)
[11:14] <jnthnwrthngtn> (Which will limit many things)
[11:15] * sena_kun has started Blin for new-disp
[11:15] <jnthnwrthngtn> Cool, hopefully callwith being present will help some of them
[11:16] <sena_kun> btw, is it known the spectest hangs as bug-coverage.t hangs?
[11:17] <jnthnwrthngtn> Yes
[11:19] <jnthnwrthngtn> It's a code-gen bug that exists on master
[11:20] <sena_kun> yup, heard about it, though maybe was fixed already, thanks for the info
[11:20] <jnthnwrthngtn> But on master we get "lucky" and it doesn't result in an infinite loop
[11:37] <Nicholas> And we now have to distract timo's cat long enough for timo to implement some JIT?
[11:44] <jnthnwrthngtn> That'd be one approach. :) I'm quite sure most people would choose petting a cat over writing x64 assembly.
[11:52] <lizmat> aahh...the days when I was able to write 8086 machine code using integers only :-)
[11:52] <lizmat> (1986-1993 abouts)
[11:53] <lizmat> the language in question had a Buf like data structure that you just could tell it to run it on the processor
[11:55] <MasterDuke> you had integers! back in my day we only had natural numbers
[11:56] <jnthnwrthngtn> I got the idea to run callgrind on the CORE.setting build while I had lunch. Lunch is finished. It's still running.
[11:56] <jnthnwrthngtn> In stage optimize, mind
[11:57] <Nicholas> clealy you need one of those 3-course lunches
[11:58] <jnthnwrthngtn> Only 1 more week until vacation, and then I'll at least get 4 course dinners... :)
[11:58] <MasterDuke> i'm currently waiting for pypandoc to convert a bunch of files from .md to .rst. it takes about 50m for ~140 files totaling ~115kb
[11:58] <MasterDuke> i have no idea how it can be this slow
[11:58] <jnthnwrthngtn> Wow
[11:58] <jnthnwrthngtn> I think I could get a decent way through the job by hand in that time :P
[11:59] <MasterDuke> i did seriously consider it
[11:59] <Nicholas> is there a pypypandoc that goes much faster once the JIT is done?
[12:01] <MasterDuke> ha. i've never actually used pypy. i assume it runs on windows?
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:07] <Geth> ¦ MoarVM/new-disp: 134ed518ed | (Stefan Seifert)++ | src/jit/x64/tiles.dasc
[12:07] <Geth> ¦ MoarVM/new-disp: Support loading values from int16 arrays in expr JIT
[12:07] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/134ed518ed
[12:07] <Geth> ¦ MoarVM/new-disp: c54d49adc1 | (Stefan Seifert)++ | 2 files
[12:07] <Geth> ¦ MoarVM/new-disp: Expr JIT templates for sp_getarg_* ops
[12:07] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/c54d49adc1
[12:08] <nine> That was quite a bit harder than expected...
[12:09] <jnthnwrthngtn> nine++
[12:09] <jnthnwrthngtn> Are you looking at the lego JIT of sp_dispatch and friends?
[12:10] <jnthnwrthngtn> (If not, I was just about to.)
[12:11] <nine> Well I'm getting reaquainted with JITing things by doing the seemingly simple ones first :)
[12:14] <Geth> ¦ MoarVM/new-disp: 91e5b144d9 | (Jonathan Worthington)++ | src/jit/graph.c
[12:14] <Geth> ¦ MoarVM/new-disp: Throw out dead code
[12:14] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/91e5b144d9
[12:20] <sena_kun> ⏳ 1569 out of 1676 modules processed
[12:20] <sena_kun> the rest are fighting over a small number of alive builds, but we can already get some stats out of it
[12:21] <sena_kun> the callsame ones are gone (yay!), though there are now some with :CallsameIsNotInTheDynamicScope and some with :NextsameIsNotInTheDynamicScope.
[12:21] <nine> jnthnwrthngtn: is it me, or will JITing dispatch be much easier than invoke?
[12:24] <jnthnwrthngtn> nine: I think quite a lot easier, especially as it's one instruction
[12:24] <jnthnwrthngtn> nine: The part I'm currently trying to figure out is where to store the argument maps
[12:25] <jnthnwrthngtn> ah cool, maybe in a data section
[12:26] <nine> well it is data after all :)
[12:28] <nine> Good thing we have extops, since it looks like that's what we have support for data sections in the lego JIT for
[12:28] <jnthnwrthngtn> Yes!
[12:29] <jnthnwrthngtn> I was just looking at that
[12:34] <sena_kun> MoarVM oops: MVM_str_hash_fetch_nocheck called with a stale hashtable pointer when trying to install Prometheus::Client
[12:38] <jnthnwrthngtn> nine: If you're interested to work on JIT of those, I'd happily look at something else instead. 
[12:38] <jnthnwrthngtn> i mean, I can do it, it's just not...very fun...for me :)
[12:40] <jnthnwrthngtn> It seems runbytecode and runcfunc will be the easier of the two
[12:41] <nine> jnthnwrthngtn: sure, I'd be happy to give it a go. Will try runcfunc first as that comes first in the spesh logs I'm looking at.
[12:42] <jnthnwrthngtn> OK, thanks
[12:43] <jnthnwrthngtn> For the data segment, I think the stuff to stick in there is just going over the applicable operands and pulling out the 16-bit .reg.orig
[12:52] <nine> Of course with runcfunc and runbytecode the interesting part starts at how to actually pass that MVMArgs struct by value
[12:55] <nine> If the size of the aggregate exceeds two eightbytes and the first eight-
[12:55] <nine> byte isn’t SSE or any other eightbyte isn’t SSEUP, the whole argument
[12:55] <nine> is passed in memory.
[12:56] <nine> So I think it's passed in memory and not split up into registers
[12:56] <Nicholas> structs by value - dyncall *that*!
[12:58] <jnthnwrthngtn> Sigh, and it may be different on Windows too
[12:59] <jnthnwrthngtn> Maybe we should make MVM_frame_dispatch a wrapper that unpacks and passes on the components to a real underlying impl 
[12:59] <jnthnwrthngtn> And maybe make the wrapper a static inline, to make sure it doesn't ever really make two levels of call
[12:59] <nine> Windows: "Structs or unions of other sizes are passed as a pointer to memory allocated by the caller. For these aggregate types passed as a pointer, including __m128, the caller-allocated temporary memory must be 16-byte aligned."
[13:01] <nine> At least for a first version, having a wrapper that puts the individual values into a stack allocated would get us off the ground
[13:02] <jnthnwrthngtn> Yeah, I'd do that
[13:04] <MasterDuke> there are some existing moarvm (or maybe nativecall) issues about passing structs by value (requesting that i think)
[13:04] <jnthnwrthngtn> Just been looking over the callgrind output. The interpreter is the top thing by far so more JIT will help
[13:05] <jnthnwrthngtn> The second is running dispatch programs. A better solution for megamorphic things will no doubt help a lot.
[13:09] <MasterDuke> just did a new-disp build. stage parse of 56s vs 44s for master
[13:10] <jnthnwrthngtn> Another task for those looking to help with speed: MVM_disp_program_run can make use of computed goto when available.
[13:10] <jnthnwrthngtn> See interp.c for inspiration
[13:11] <jnthnwrthngtn> It's the second most hot thing after the interpreter itself, so likely worth doing
[13:11] <nine> MasterDuke: it's kinda impossible to pass a struct by value in NativeCall, but the show stopper there is there's no way to specify a struct as a value in the first place. We interpret MyStruct as Pointer[MyStruct]. That's in the vast majority of cases what you want, but not in all of them
[13:13] <MasterDuke> jnthnwrthngtn: i suspect this is no different than what you have, but this is what perf has to say about building CORE.c https://gist.github.com/MasterDuke17/e7fe2624d3fbfa36a16dd0c904cd0e3a
[13:16] <jnthnwrthngtn> MasterDuke: Those are exclusive times?
[13:16] <MasterDuke> yeah
[13:16] <MasterDuke> `perf report --call-graph=none --no-children`
[13:17] <MasterDuke> i added just a plain `perf report` to the gist
[13:22] *** [Coke]_ joined
[13:24] <timo> 1% on interning callsites, that's curious
[13:25] <jnthnwrthngtn> Dispatch programs are pretty into those, but yeah, it's a new hotspot I suspect
[13:25] <jnthnwrthngtn> Maybe worth looking at
[13:26] <jnthnwrthngtn> Trying to figure out a good design for the megamorphic situation
[13:26] <jnthnwrthngtn> I guess I'll just do it with resumption in the first pass and then we'll see
[13:26] <jnthnwrthngtn> How well we can opt that
[13:30] <MasterDuke> timo: https://github.com/MoarVM/MoarVM/blob/new-disp/src/core/callsite.c#L210-L217 here's an opt for you
[13:34] *** [Coke] left
[13:57] <timo> i wonder how often that flag is set that's checked on the inner side
[13:58] <timo> "force"
[14:00] <timo> also, i wonder how big that storage tends to become for each of the arities
[14:01] <timo> and what percentage has named argument strings in them at all, but probably the vast majority
[14:11] <Nicholas> jnthnwrthngtn: seems that MVM_SPESH_NODELAY=1 breaks the Rakudo setting build.
[14:12] <sena_kun> ~80 out of 1676 modules (that's the upper estimate) modules have some issues with new-disp.
[14:13] <jnthnwrthngtn> That's quite a lot less than last time, I think?
[14:15] <sena_kun> I don't remember the exact previous number, alas, but it's smaller, yes.
[14:15] <sena_kun> The pool of failures is similar, though.
[14:17] <sena_kun> The callwith is replaced with a smaller number of "not in the dynamic scope" for callwith/nextwith, the rest are similar: issues with type checks (bind, param), too many/little params etc (not surprising).
[14:18] <sena_kun> if anyone fancies some spesh there is a "unhandled case of return_o"
[14:18] <jnthnwrthngtn> Ah, those are because we don't yet do subsignature-based multiple dispatch
[14:19] <Nicholas> " MVM_str_hash_fetch_nocheck called with a stale hashtable pointer" implies a bug in concurrent code, where 2+ threads are accessing the same hash without locking it
[14:19] <MasterDuke> sena_kun: btw, looks like the bump was one behind 2ecb380497, which was a fix
[14:19] <sena_kun> MasterDuke, a fix for? return_o?
[14:20] <MasterDuke> some problem with spesh inlining
[14:20] <jnthnwrthngtn> Nicholas: I suspect that will be for debugging next week
[14:25] <Geth> ¦ MoarVM/new-disp: 8ec4f60215 | (Jonathan Worthington)++ | 5 files
[14:25] <Geth> ¦ MoarVM/new-disp: Provide introspection to identify megamorpism
[14:25] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8ec4f60215
[14:26] <jnthnwrthngtn> sigh, spelling
[14:26] <Geth> ¦ MoarVM/new-disp: 1d70be9a63 | (Jonathan Worthington)++ | 5 files
[14:26] <Geth> ¦ MoarVM/new-disp: Provide introspection to identify megamorphism
[14:26] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1d70be9a63
[14:44] <nine> Writing assembly: fun. Debugging assembly: ...
[14:47] <jnthnwrthngtn> painful
[14:50] <MasterDuke> but hey, your recent jit work might mean you're another person besides brrt to help with https://gist.github.com/MasterDuke17/6529dfddc3cb7716386c11363b16b392 (adding new shl/shr operators)
[14:58] <nine> Ooooh...looks like we're at least calling something. Possibly even the correct function (just with wrong args). Progress!
[15:04] <jnthnwrthngtn> Yay
[15:04] <jnthnwrthngtn> Meanwhile, I'm making progress on letting us stick a lookup table into a dispatch program for handling megamorphic by method name sites
[15:05] <dogbert17> MoarVM oops in spesh thread: Spesh inline: unhandled case of return_o
[15:06] <MasterDuke> what do you mean megamorphic by method name? i thought a callsite was always just for one method, it'd just be the num+types of the invocant+args that'd differ?
[15:07] <sena_kun> dogbert17, where? We have such one in the last Blin run, if there is a golf that's cool.
[15:08] <jnthnwrthngtn> MasterDuke: $obj."$name"()
[15:08] <dogbert17> It's from one of the spectests
[15:09] <MasterDuke> ah
[15:09] <jnthnwrthngtn> !protoregex does exactly that
[15:09] <jnthnwrthngtn> We thus end up stacking a HUGE load of disaptch programs there
[15:09] <jnthnwrthngtn> Up to the max of 64 entries, and then we try all 64 linearly... :)
[15:09] <jnthnwrthngtn> And 64 is still way too many
[15:09] <dogbert17> e.g. t/spec/S32-str/sprintf.t, note that I ran with MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1
[15:10] <dogbert17> I've also seen: 'Internal error: inconsistent bind result'
[15:17] <MasterDuke> runbytecode_ins->info->opcode always seems to be 921 in those cases. i also saw a `===SORRY!===
[15:17] <MasterDuke> Cannot find method 'push_code_object' on object of type Perl6::World` when i ran without the BLOCKING
[15:20] <MasterDuke> i think 921 is MVM_OP_sp_runbytecode_s
[15:24] <timo> runbytecode_ins->info->name should say that
[15:25] <timo> but there's also a #define you should be able to find by searching for the number
[15:25] <timo> that is runbytecode_s indeed
[15:26] <MasterDuke> cargo-culting from rewrite_str_return, just adding `case MVM_OP_sp_runbytecode_s` right above `case MVM_OP_sp_runbytecode_o:` seems to work
[15:27] <MasterDuke> well, is rakudo's `make m-test` supposed to be ok now?
[15:45] <jnthnwrthngtn> MasterDuke: One failure
[15:46] <jnthnwrthngtn> So the good news is that the ability to do a method lookup table deals nicely with the !protoregex situation
[15:47] <MasterDuke> ok, i still see that one failure in test, but there are also a bunch in spectest
[15:47] <jnthnwrthngtn> The bad news is that we get a lovely blow-up around the new/bless transition, although I note NQP lacks the obvious opt that Rakudo enjoys and could really cheat a bit more
[15:50] <MasterDuke> blow-up == failure? or another megamorphic case?
[15:50] <jnthnwrthngtn> The latter
[15:50] <MasterDuke> ah
[15:51] <MasterDuke> i see a bunch of the same fails in a spectest without my change, so maybe it is valid
[15:51] <Geth> ¦ MoarVM/new-disp: 6da8ac9b1c | (Jonathan Worthington)++ | 3 files
[15:51] <Geth> ¦ MoarVM/new-disp: Provide lookup tables in dispatch programs
[15:51] <Geth> ¦ MoarVM/new-disp: 
[15:51] <Geth> ¦ MoarVM/new-disp: So that a callsite that is megamorphic in method names is able to
[15:51] <Geth> ¦ MoarVM/new-disp: install a lookup table, guard on the type, and then enjoy O(1) lookup at
[15:51] <Geth> ¦ MoarVM/new-disp: that location.
[15:51] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/6da8ac9b1c
[15:52] <MasterDuke> jnthnwrthngtn: is adding MVM_OP_sp_runbytecode_s to this case https://github.com/MoarVM/MoarVM/blob/new-disp/src/spesh/inline.c#L1125 correct?
[16:00] <nine> Turns out it's just not possible to load a 64 bit constant into a register directly
[16:01] <timo> oh, you always have to load lower and upper separately?
[16:04] <jnthnwrthngtn> nine: mov64
[16:07] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1524: Handle sp_runbytecode_s like *_o in rewrite_obj_return
[16:07] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1524
[16:07] <jnthnwrthngtn> MasterDuke: Well, it's correct to add that case, but it needs to insert an unbox
[16:08] <jnthnwrthngtn> You can't just put a `set`, otherwise probably things go quite badly later
[16:09] <nine> jnthnwrthngtn: mov64 doesn't seem to work on immediates
[16:09] <MasterDuke> huh. the comment for return_to_set says '...doing any needed boxing or unboxing"
[16:10] <nine> From what I read on the internets, it should be possible. But I can't get it to work. It always only reads the lower 32 bits and sign extends. Which is not that useful for addresses
[16:10] <jnthnwrthngtn> nine: Hm, curious, I see stuff like `| mov64 TMP6, arg.v.lit_i64;`
[16:11] <jnthnwrthngtn> MasterDuke: I think the comment is about the whole bunch of functions that follow
[16:12] <nine> Ah darn...yes, mov64 does work. But the compiler only allows reading ints, not pointers
[16:12] <jnthnwrthngtn> Ah, so it needs a cast to MVMuint64 maybe?
[16:13] <nine> yes
[16:13] <MasterDuke> ah. so a `return_to_unbox` needs to be added and used?
[16:13] <timo> this is for the callsites that we pretend are numbers but really are pointers?
[16:13] <jnthnwrthngtn> MasterDuke: Yes but I'm a bit curious why we didn't really need this before...
[16:24] <jnthnwrthngtn> A bit more time off the CORE.setting build thanks to doing better at, or having less, megamorphic points.
[16:24] <jnthnwrthngtn> All those that remain are about flattening, which is going to need some thought
[16:24] <nine> timo: yes
[16:26] <timo> i wonder if during one spesh run we see the same callsite a whole bunch of times and can be smarter about interning? or are the intern attempts coming from somewhere else?
[16:28] <timo> the interned callsites are already stored in multiple areas based on what arity they have, so i'm guessing that's already relatively quick
[16:30] <jnthnwrthngtn> timo: Very likely the majority of them happen during the recording of dispatch programs
[16:30] <jnthnwrthngtn> Well, notably, when we finish the dispatch program
[16:30] <MasterDuke> what would the `target_facts->type` be for the unbox case?
[16:31] <jnthnwrthngtn> MasterDuke: It's an unboxed value, so it doesn't have a type (it's a native implied in the register)
[16:32] <jnthnwrthngtn> timo: One thing I considered before but didn't do was a means - for small callsites with only positions - is to keep some kind of data structure for handling transforms
[16:33] <jnthnwrthngtn> *positionals
[16:33] <jnthnwrthngtn> timo: Since we do a lot of callsite transforms. That would mean we could finish up with an already interned one in many situations at the end of recording a dispatch program
[16:40] <MasterDuke> oh, master doesn't have a return_to_unbox either...
[16:40] <timo> ah, so like we'd intern at the start and have a lookup structure that immediately gets us from one interned callsite to the interned callsite that results from the same transformation
[16:40] <timo> kind of like the "with_invocant" pointer
[16:40] <nine> All I need now is that argument map
[16:45] <jnthnwrthngtn> timo: yeah, although it'd be nice if it's not "inside" the callsite
[16:46] <timo> yes
[16:48] <Geth> ¦ MoarVM/new-disp: a292856744 | (Jonathan Worthington)++ | src/6model/sc.c
[16:48] <Geth> ¦ MoarVM/new-disp: Optimize MVM_sc_find_code_idx
[16:48] <Geth> ¦ MoarVM/new-disp: 
[16:48] <Geth> ¦ MoarVM/new-disp: The indirection shows up relatively high in a profile of a CORE.setting
[16:48] <Geth> ¦ MoarVM/new-disp: build.
[16:48] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a292856744
[16:54] <jnthnwrthngtn> Hm, I wonder why we bother interning all these intermediate callsites
[16:54] <jnthnwrthngtn> I'm pretty sure that's pointless makework
[16:55] <jnthnwrthngtn> Since it's only really result ones that end up in dispatch programs that need to be interned
[16:55] <jnthnwrthngtn> For those made while we're working on the dispatch it doesn't matter at all
[16:55] <jnthnwrthngtn> So I think we can just not do most of this work at all
[16:55] <jnthnwrthngtn> Rather than trying fancy opts :)
[16:56] <nine> Huh.... I got the map in the data section and it looks ok. I get register number 14 for arg 0 which looks sensible. However an object like the one we're looking for is actually in register 15
[16:56] <nine> And since we're looking for an iterator, that's probably the one we need
[16:58] <nine> I wonder how I can get that kind of off-by-one error here. https://gist.github.com/niner/f566f86fc525c151b904f392cbca20f9
[16:59] <Geth> ¦ MoarVM/new-disp: 84a5c1c3a8 | (Jonathan Worthington)++ | src/core/callsite.c
[16:59] <Geth> ¦ MoarVM/new-disp: Don't do lots of throwaway callsite interning
[16:59] <Geth> ¦ MoarVM/new-disp: 
[16:59] <Geth> ¦ MoarVM/new-disp: We don't need the intermediate ones interned, and the places that do
[16:59] <Geth> ¦ MoarVM/new-disp: need it already make sure it's the case.
[16:59] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/84a5c1c3a8
[17:01] <jnthnwrthngtn> nine: |.word (MVMuint16)runcode->map[i].lit_ui16;
[17:01] <jnthnwrthngtn> I think that should be
[17:01] <jnthnwrthngtn> |.word (MVMuint16)runcode->map[i].reg.orig
[17:02] <jnthnwrthngtn> | mov FRAME:TMP5->cur_args_callsite, TMP6;
[17:02] <jnthnwrthngtn> And cur_args_callsite isn't needed under the new calling convs
[17:02] <jnthnwrthngtn> So that instruction can go away
[17:03] <nine> Indeed!
[17:13] <Geth> ¦ MoarVM/new-disp: b61e45a4fa | (Stefan Seifert)++ | 5 files
[17:13] <Geth> ¦ MoarVM/new-disp: First JIT support for sp_runcfunc_i
[17:13] <Geth> ¦ MoarVM/new-disp: 
[17:13] <Geth> ¦ MoarVM/new-disp: Won't work on Windows yet as it's using POSIX calling conventions.
[17:13] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/b61e45a4fa
[17:14] <sena_kun> no idea if this info is interesting, but stage parse time increased (sic) for 1s on average for me with the "don't do lots of throwaway" commit.
[17:15] <nine> The other runcfunc and runbyte ops should be fairly trivial now as they hardly differ from runfunc_i :)
[17:15] <nine> Alas, gotta prepare dinner
[17:16] <nine> sp_dispatch isn't that far off either
[17:17] <jnthnwrthngtn> sena_kun: That's...weird
[17:17] <jnthnwrthngtn> Is it really more than noise?
[17:17] <jnthnwrthngtn> I'll have to look at another callgrind output after these tweaks, maybe that'll reveal something
[17:18] <jnthnwrthngtn> I'm easily getting ~1s variance build to build, fwiw
[17:18] <sena_kun> yes, pretty much. I did 2 runs for each without any load, the two without the commit are 42.030 and 42.607, while after the commit it becomes 43.429 and 43.134.
[17:18] <sena_kun> maybe just the noise, never mind it then
[17:20] <Geth> ¦ MoarVM/new-disp: 1b3fe9f209 | (Jonathan Worthington)++ | src/core/args.c
[17:20] <Geth> ¦ MoarVM/new-disp: Optimize arg processing handling
[17:20] <Geth> ¦ MoarVM/new-disp: 
[17:20] <Geth> ¦ MoarVM/new-disp: * We know there's no flattening at this point in the new calling
[17:20] <Geth> ¦ MoarVM/new-disp:   conventions, so do a cheaper calculation of the number of named
[17:20] <Geth> ¦ MoarVM/new-disp:   arguments
[17:20] <Geth> ¦ MoarVM/new-disp: * No need to zero out something we'll never look at again
[17:20] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1b3fe9f209
[17:48] <jnthnwrthngtn> OK, enough for now
[17:48] <jnthnwrthngtn> Home time for me
[17:48] <jnthnwrthngtn> o/
[17:52] *** sena_kun left
[17:54] <MasterDuke> nine: `src/jit/compile.c:101:13: warning: implicit declaration of function ‘MVM_jit_emit_runcode’; did you mean ‘MVM_jit_emit_invoke’? [-Wimplicit-function-declaration]`
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:29] *** [Coke]_ is now known as [Coke]
[18:38] <Geth> ¦ MoarVM/new-disp: 2193a6506e | (Stefan Seifert)++ | src/jit/internal.h
[18:38] <Geth> ¦ MoarVM/new-disp: Add missing forward declaration of MVM_jit_emit_runcode
[18:38] <Geth> ¦ MoarVM/new-disp: 
[18:38] <Geth> ¦ MoarVM/new-disp: MasterDuke++ for the heads up
[18:38] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/2193a6506e
[18:50] <Geth> ¦ MoarVM/new-disp: a3c5efb5d2 | (Stefan Seifert)++ | src/jit/graph.c
[18:50] <Geth> ¦ MoarVM/new-disp: Extend JITing to other sp_runcfunc_ variants
[18:50] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a3c5efb5d2
[18:57] <Geth> ¦ MoarVM/new-disp: af8eae171f | (Stefan Seifert)++ | src/jit/x64/emit.dasc
[18:57] <Geth> ¦ MoarVM/new-disp: Hopefully fix MVM_jit_emit_runcode on Windows
[18:57] <Geth> ¦ MoarVM/new-disp: 
[18:57] <Geth> ¦ MoarVM/new-disp: Windows requires structs and other aggregates to be put into caller allocated
[18:57] <Geth> ¦ MoarVM/new-disp: memory and a pointer to this memory passed as an ordinary argument. On POSIX
[18:57] <Geth> ¦ MoarVM/new-disp: we put the struct's fields individually onto the stack. Since the stack is
[18:57] <Geth> ¦ MoarVM/new-disp: memory and as such guaranteed to be available until the caller exits, we can
[18:57] <Geth> ¦ MoarVM/new-disp: use it for Windows as well. So all that should be needed is that pointer.
[18:57] <Geth> ¦ MoarVM/new-disp: 
[18:57] <Geth> ¦ MoarVM/new-disp: Completely untested, as I don't have Windows available.
[18:57] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/af8eae171f
[19:02] <MasterDuke> hm, for return_to_unbox, since we don't need to look up the type, we don't need to add the unbox, we can just overwrite the return, correct?
[19:04] <MasterDuke> i.e., return_to_box == return -> type lookup + box, but return_to_unbox == return -> unbox
[19:40] <Geth> ¦ MoarVM/new-disp: af79f12518 | (Stefan Seifert)++ | 6 files
[19:40] <Geth> ¦ MoarVM/new-disp: JIT support for sp_runbytecode_*
[19:40] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/af79f12518
[19:44] <Geth> ¦ MoarVM/new-disp: f597e4053c | (Stefan Seifert)++ | 6 files
[19:44] <Geth> ¦ MoarVM/new-disp: JIT support for sp_runbytecode_*
[19:44] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/f597e4053c
[20:29] *** linkable6 left
[20:29] *** evalable6 left
[20:31] *** linkable6 joined
[21:00] <jnthnwrthngtn> nine++
[21:03] <jnthnwrthngtn> MasterDuke: yes
[21:04] <jnthnwrthngtn> It should be like the set code, except emitting an unbox
[21:35] <MasterDuke> jnthnwrthngtn: thanks, https://github.com/MoarVM/MoarVM/pull/1524 updated
[21:36] <MasterDuke> no longer get the oops in t/spec/S32-str/sprintf.t. same fail in m-test, looks like same other fails in m-spectest
[21:39] *** patrickb left
[22:19] <jnthnwrthngtn> Cool
[22:26] <[Coke]> Do we need a windows canary for new-disp?
[22:27] <jnthnwrthngtn> Could be useful info. At some point CI will tell us I guess.
[22:27] <jnthnwrthngtn> Curiously, the JITting ends up slower so far as wallclock goes; I'm doing some measurements with callgrind to see if there's any clues
[22:29] <[Coke]> I can try to do a build, will report back.
[22:29] <jnthnwrthngtn> Where "doing measurements" mostly means doing other things while callgrind runs for a long while :)
[23:30] *** evalable6 joined
