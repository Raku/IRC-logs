[00:03] *** quotable6 joined
[00:03] *** greppable6 joined
[00:03] *** committable6 joined
[00:04] *** shareable6 joined
[00:05] *** linkable6 joined
[00:05] *** nativecallable6 joined
[00:05] *** tellable6 joined
[00:05] *** coverable6 joined
[00:16] *** tealecloud left
[01:43] *** moon-child left
[01:44] *** moon-child joined
[02:03] *** unicodable6 joined
[02:03] *** statisfiable6 joined
[02:04] *** squashable6 joined
[02:05] *** reportable6 joined
[02:06] <japhb> How solid is MoarVM cross-compile support?  I see some bits in Configure.pl for it, but I don't know how recently that's been run through its paces ...
[02:13] *** squashable6 left
[02:14] *** squashable6 joined
[02:16] <japhb> Also, is anyone (lizmat perhaps?) building on MacOS on Apple M1?
[03:14] *** evalable6 left
[03:14] *** linkable6 left
[03:18] *** psydroid left
[03:23] *** psydroid joined
[03:27] *** ggoebel left
[03:28] *** squashable6 left
[04:16] *** evalable6 joined
[04:30] *** squashable6 joined
[05:09] <timo> hm, how do you CI cross-compilation, i wonder. i would say qemu but that's slooooow
[05:17] *** linkable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:47] <japhb> Requesting early feedback, to take advantage of timezone differences: https://gist.github.com/japhb/0c2108affd314b307e3027b3eb6a7947
[06:47] <japhb> PLEASE NOTE:  This is not anywhere *close* to ready, and is missing a lot of detail, examples, resource links, etc.  I already know this.  :-)
[06:48] <japhb> I'm just trying to determine if there are major porting risks or task categories that I'm missing.
[07:18] <Nicholas> good *, japhb 
[07:18] <Nicholas> I've got shell acces to an M1 Mac - everything builds quite boringly there.
[07:19] <japhb> \o/
[07:19] <japhb> That's very good news.
[07:20] <japhb> Nicholas: Do you happen to know if the C ABI is different under MacOS/AArch64 than Linux/AAarch64?
[07:21] <moon-child> I believe it is
[07:21] <moon-child> at least: varargs are all passed on the stack, and you are not allowed to use x18
[07:21] <moon-child> there may be more differences
[07:21] <japhb> Dang, that's annoying.  OK, thanks for the info, moon-child.
[07:23] <moon-child> 'Because x64 (and x86 before it) are among the most alignment-lax architectures in common use'  no need to sound so derogatory--unaligned accesses have proven themselves well worth the silicon :)
[07:24] <moon-child> (that said I think modern arm is also fairly tolerant of unaligned accesses in most modes)
[07:25] <japhb> moon-child: Oh hmmm, I hadn't meant that as derogatory, more just a simple statement of fact.
[07:26] <Nicholas> Is "alignment tolerant" better?
[07:26] <moon-child> was mostly just poking.  Hence the :) :)
[07:27] <japhb> How about "Because x64 (and x86 before it) have been the primary
[07:27] <japhb> MoarVM development platform so far and are very alignment-tolerant,"
[07:28] <japhb> moon-child: It was a totally valid concern.  :-)
[07:29] <Nicholas> you use "forgiving" later to describe the x86 memory model. I think that that's probably a better word than "lax" or "tolerant"
[07:33] <japhb> Nicholas: üëç
[07:33] *** patrickb joined
[07:34] <patrickb> japhb: I also own an M1 Mac. It's currently only used for building the compiled rakudo releases. I intend to set it up to allow remote ssh access, but simply didn't manage to do so yet.
[07:34] <japhb> patrickb: Ah, good to know, thank you
[07:38] <japhb> Oh, forgot to respond to one of your comments, moon-child -- It is possible that the most recent AArch64 variants have relaxed some of the alignment strictness (wouldn't surprise me, actually -- as you point out, it can be a good use of silicon), but I'm taking the view that supporting all AArch64 variants back to the original ARMv8-A introduction (but nothing that isn't a superset thereof) is a good place 
[07:38] <japhb> to draw a line that captures most of the ARM systems we would reasonably want to JIT today.
[07:41] <moon-child> it appears armv8-a supports unaligned accesses too.  At least, https://stackoverflow.com/questions/45714535/performance-of-unaligned-simd-load-store-on-aarch64 says it does
[07:42] <moon-child> (that said taking a longer view towards wider architecture support, it might be good to figure out how to support stricter alignment requirements.  Gcc famously generates bad code when alignment requirements are high)
[07:43] <japhb> (If anyone thinks ARMv8-A is the wrong line, please do say so -- but I figure it's way easier for us to say "We support all AArch64 variants" than confuse users with "Well, if you're running ARMv8.5-A, ARMv8.6-A, or ARMv9-A then yes, but ...")
[07:46] <japhb> Interesting regarding the unaligned access.  Some of the instruction encodings seem to directly add trailing 0 bits based on the operand size (so it's literally not possible with those encodings to refer to unaligned data), but perhaps experienced ARM coders know how to avoid those instruction encodings efficiently.  I'll have to look more into that.
[07:47] <patrickb> japhb: I'd like to know how much work it would be to get rid of the lego JIT. I think the intention has long been to get rid of it. If it's not that far off, it might make sense to tackle that first.
[07:51] <japhb> patrickb: Right now the expression jit depends on some of the infrastructural parts of the lego JIT (as well as being a fallback in case expression JIT cannot handle some ops).  That infrastructure part probably could be disentangled first.
[07:51] <japhb> .tell brrt Saw your comment on the gist, thank you, will reply in the morning as my brain is currently fading a bit.
[07:51] <tellable6> japhb, I'll pass your message to brrt
[07:57] <Nicholas> the only thing that I have access to that builds MoarVM that is really grumpy about alignment is sparc64
[07:57] <Nicholas> ppc64 can cope with 64 bit loads (at least at) 32 bit alignment
[07:58] <Nicholas> so if there are 64 bit ARMs that aren't happy about 64 bit integer loads (more) off-alignment than we currently do, I've not hit them
[07:58] <Nicholas> I'm not familiar with the 64 bit ARM instruction set, or what alignment you start having
[07:58] <moon-child> why do you have a sparc?
[07:59] <Nicholas> but even x864_64 gets grumpy (SIGsomething) if you attempt to go "off alignment" with SIMD instructions. And if you compiler vectorised a loop, working sloppy code can go boom
[07:59] <japhb> 16-byte alignment (what x86 used to call "paragraph alignment") for the AArch64 stack was the biggest surprise I've come across so far.
[07:59] <Nicholas> I don't. I have access to one. It's https://cfarm.tetaneutral.net/machines/list/
[08:02] <japhb> OK, it's past 1 AM here; I'm going to wander off to the land of nod for now, but will backlog any further comments/suggestions when I'm back online.
[08:03] <japhb> Goodnight, y'all!
[08:03] <japhb> &
[08:10] *** tealecloud joined
[08:47] *** Xliff left
[08:51] *** patrickb left
[09:08] *** ggoebel joined
[09:12] *** patrickb joined
[09:18] *** patrickb left
[09:18] *** patrickb joined
[09:51] *** ggoebel left
[09:54] <jnthnwrthngtn> moarning o/
[09:54] <Nicholas> \o
[10:07] *** linkable6 left
[10:09] *** linkable6 joined
[10:14] *** patrickz joined
[10:15] *** patrickb left
[10:22] *** lizmat_ joined
[10:22] *** Geth_ joined
[10:22] *** RakuIRCLogger joined
[10:23] *** TempIRCLogger joined
[10:24] *** RakuIRCLogger_ left
[10:24] *** Geth joined
[10:24] *** TempIRCLogger__ left
[10:24] *** lizmat left
[10:24] *** Geth left
[10:24] *** Geth_ left
[10:25] *** Geth joined
[10:25] *** lizmat_ left
[10:25] *** lizmat joined
[10:31] <jnthnwrthngtn> Goodness, the NQP build is master than the MoarVM build with Visual C++ / nmake...
[10:32] <jnthnwrthngtn> uh, faster
[10:34] <lizmat> .oO( time to drop C as an implementation language :-)
[10:38] <jnthnwrthngtn> :D
[10:39] <Nicholas> you can fix this with ASAN
[10:40] <jnthnwrthngtn> Anyways, the build succeeded, which is good but also bad because I failed to repro what [Coke]++ is observing and have few guesses left of what it could be
[10:43] <dogbert17> jnthnwrthngtn: didn't [Coke]++ mention that some nativecall tests failed on windows?
[10:45] <jnthnwrthngtn> Only with a debug build
[10:45] <dogbert17> ah
[10:46] *** sena_kun joined
[10:46] <jnthnwrthngtn> Hm, wonder if the debug server problem I'm looking at is a regression everywhere or just a Windows-specific issue...
[10:47] <sena_kun> jnthnwrthngtn, you mean it not connecting to the socket or something new?
[10:49] <jnthnwrthngtn> It seems to connect but doesn't hit a breakpoint; on Linux it does hit it, but then hangs when I resume.
[10:49] <sena_kun> ouch
[10:49] <sena_kun> good luck
[10:49] <jnthnwrthngtn> Pretty sure that's a regression
[10:49] <jnthnwrthngtn> It's the simplest possible example
[11:10] <jnthnwrthngtn> ah, it's backslash vs forward slash confusion on Windows
[11:22] <Geth> ¬¶ MoarVM/debug-server-fixes: ab2a3f01c2 | (Jonathan Worthington)++ | src/debug/debugserver.c
[11:22] <Geth> ¬¶ MoarVM/debug-server-fixes: Normalize filenames for debug server
[11:22] <Geth> ¬¶ MoarVM/debug-server-fixes: 
[11:22] <Geth> ¬¶ MoarVM/debug-server-fixes: So that we can avoid missing breakpoints due to / vs. \ on Windows.
[11:22] <Geth> ¬¶ MoarVM/debug-server-fixes: review: https://github.com/MoarVM/MoarVM/commit/ab2a3f01c2
[11:36] <Geth> ¬¶ MoarVM/debug-server-fixes: 137ca8343e | (Jonathan Worthington)++ | src/instrument/line_coverage.c
[11:36] <Geth> ¬¶ MoarVM/debug-server-fixes: Produce one breakpoint instruction per line
[11:36] <Geth> ¬¶ MoarVM/debug-server-fixes: 
[11:36] <Geth> ¬¶ MoarVM/debug-server-fixes: Some lines span multiple basic blocks, which would result in us placing
[11:36] <Geth> ¬¶ MoarVM/debug-server-fixes: multiple breakpoint instructions. This could lead to the debugger
[11:36] <Geth> ¬¶ MoarVM/debug-server-fixes: stopping many times on the same line.
[11:36] <Geth> ¬¶ MoarVM/debug-server-fixes: review: https://github.com/MoarVM/MoarVM/commit/137ca8343e
[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:12] *** cognominal joined
[13:04] *** tealecloud left
[13:22] <Geth> ¬¶ MoarVM/debug-server-fixes: b5b276ffd1 | (Jonathan Worthington)++ | 2 files
[13:22] <Geth> ¬¶ MoarVM/debug-server-fixes: Fix issues with resuming suspended threads
[13:22] <Geth> ¬¶ MoarVM/debug-server-fixes: 
[13:22] <Geth> ¬¶ MoarVM/debug-server-fixes: * The case of being unable to GC and with an outstanding suspend
[13:22] <Geth> ¬¶ MoarVM/debug-server-fixes:   request was not handled
[13:22] <Geth> ¬¶ MoarVM/debug-server-fixes: * A mutex was not acquired while using a condition variable, leading to
[13:22] <Geth> ¬¶ MoarVM/debug-server-fixes:   lost wakeups
[13:22] <Geth> ¬¶ MoarVM/debug-server-fixes: * For efficiency, we also only broadcast the condition variable after
[13:22] <Geth> ¬¶ MoarVM/debug-server-fixes:   going through all of the threads to resume them
[13:22] <Geth> ¬¶ MoarVM/debug-server-fixes: review: https://github.com/MoarVM/MoarVM/commit/b5b276ffd1
[13:37] <nine> Looksblight a mighty yak shaving trip
[13:37] <nine> Looks like
[13:43] <[Coke]> jnthnwrthngtn: thanks for trying to repro my windows issue;.
[13:46] <patrickz> jnthnwrthngtn: Do these debugger fixes fix bugs new-disp brought or were they potentially present in 2021.09 as well?
[13:47] <Geth> ¬¶ MoarVM/debug-server-fixes: 8f7d970aed | (Jonathan Worthington)++ | src/gc/orchestrate.c
[13:47] <Geth> ¬¶ MoarVM/debug-server-fixes: Only produce debugger debugging output when asked
[13:47] <Geth> ¬¶ MoarVM/debug-server-fixes: review: https://github.com/MoarVM/MoarVM/commit/8f7d970aed
[13:47] <jnthnwrthngtn> patrickz: These all seem to go back quite a long way
[13:48] <jnthnwrthngtn> nine: The yak is "argh, we have too many bug reports about the Comma debugger", pretty much.
[13:49] <nine> Which means that it gets used :)
[13:50] <patrickz> OK. I haven't had much luck using the debugger until now. Seeing those fixes makes me happy. jnthnwrthngtn++
[13:52] *** brrt joined
[13:52] <Nicholas> good *, brrt 
[13:52] <patrickz> o/
[13:53] <Nicholas> brrt: I was wrong. "JIT all the things" is so last week. it's now "dispatch all the things"
[13:53] <brrt> good * Nicholas
[13:53] <tellable6> 2021-10-06T07:51:35Z #moarvm <japhb> brrt Saw your comment on the gist, thank you, will reply in the morning as my brain is currently fading a bit.
[13:53] <brrt> ah
[13:53] <brrt> that's good
[13:54] <MasterDuke> brrt: have you seen my recent jit-related PRs and the problems i've been having on windows?
[13:56] <brrt> I have not
[13:56] <brrt> which are the ones?
[13:56] <brrt> though I'm vaguely aware
[13:58] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1555 currently is ok
[13:59] <MasterDuke> but https://github.com/MoarVM/MoarVM/pull/1552 has some extra ops that fail on windows
[13:59] <MasterDuke> scsetobj, scsetcode, getcomp, and setdebugtypename
[14:28] <Geth> ¬¶ MoarVM/debug-server-fixes: 746175bc9a | (Jonathan Worthington)++ | src/debug/debugserver.c
[14:28] <Geth> ¬¶ MoarVM/debug-server-fixes: Fix regression in stepping
[14:28] <Geth> ¬¶ MoarVM/debug-server-fixes: review: https://github.com/MoarVM/MoarVM/commit/746175bc9a
[14:28] <Geth> ¬¶ MoarVM/debug-server-fixes: cedebdbf7f | (Jonathan Worthington)++ | src/debug/debugserver.c
[14:28] <Geth> ¬¶ MoarVM/debug-server-fixes: A little more debug output for stepping
[14:28] <Geth> ¬¶ MoarVM/debug-server-fixes: review: https://github.com/MoarVM/MoarVM/commit/cedebdbf7f
[14:33] <Geth> ¬¶ MoarVM: jnthn++ created pull request #1559: Assorted debug server fixes
[14:33] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1559
[14:41] <brrt> I'll have a look
[15:06] <[Coke]> so I rebooted this morning... and I think things are now failing *differently*
[15:06] <[Coke]> doing a re-rebuild with VERBOSE_BUILD to verify
[15:33] *** brrt left
[15:34] *** brrt joined
[15:36] <Nicholas> [Coke]: if you pour coffee into the computer do your problems go away? Or do you just get a whole new set of different problems? :-)
[15:40] <jnthnwrthngtn> I've only tried this experiment with a keyboard, but it didn't make much difference.
[15:41] <nine> Oh the coffee is supposed to go into the computer?! I've always... well better not say where I put it
[15:45] <timo> jnthnwrthngtn: i'm having trouble coming up with a sensible solution to the argument spesh being aborted when a NativeRef is passed and it desires something that boxes an int, unless we teach spesh that Int*Ref can in fact box int
[15:46] <[Coke]> gets past where it was. now dying on instal with:
[15:47] <[Coke]> C:\sandbox\rakudo\rakudo-m.exe" --ll-exception "C:\sandbox\rakudo\tools\build\install-core-dist.raku" "C:\raku\share\perl6\core"
[15:47] <[Coke]> ... which seems super familar. :|
[15:47] <[Coke]> https://gist.github.com/coke/2aa9eaa797004060d0f9965a10c18893
[15:48] <[Coke]> (this is with rakudo HEAD and recommended nqp/moarvm)
[15:49] <jnthnwrthngtn> `nmake install` did succeed for me (otherwise I'd not have had a working install to debug the debugger)
[15:50] <jnthnwrthngtn> And I was doing it with a 64-bit environment so there's JIT
[15:51] <[Coke]> it bugs me that a reboot fixed the last issue. :)
[15:52] <nine> Ah, the error: no error again?
[15:52] <nine> [Coke]: have you tried with RAKUDO_MODULE_DEBUG=1?
[15:54] <[Coke]> nine - updated gist with that output
[15:55] <[Coke]> C:\sandbox\rakudo>set RAKUDO_MODULE_DEBUG=1
[15:55] <[Coke]> C:\sandbox\rakudo>C:\sandbox\rakudo\rakudo-m.exe --ll-exception "C:\sandbox\rakudo\tools\build\install-core-dist.raku" "C:\raku\share\perl6\core" 1 RMD: R
[15:55] <[Coke]> equested for settings CORE.d
[15:55] <[Coke]>  1 RMD: Loading settings CORE.d 1 RMD: Loading bytecod
[15:55] <[Coke]> e from CORE.d.setting.moarvm 1 RMD: going to load Perl6::BOOTSTRAP::v6d 1 RMD: Requested for set
[15:55] <[Coke]> tings CORE.c 1 RMD: Loading settings CORE.c
[15:55] <[Coke]> 1 RMD: Loading bytecode from CORE.c.setting.moarvm
[15:55] <[Coke]>  1 RMD: going to load Perl6::BOOTSTRAP::v6c 1 RMD: Settings
[15:55] <[Coke]>  CORE.c loaded
[15:55] <[Coke]>  1 RMD: Settings CORE.d loaded 1 RMD: Re
[15:55] <[Coke]> quested for settings CORE.d 1 RMD: Attempting 'lib' as a pragma 1 RMD: Successfully handled 'lib' as a pragma 1 RMD: Attempting 'CompUn
[15:55] <[Coke]> it::Repository::Staging' as a pragma 1 RMD:   '
[15:55] <[Coke]> CompUnit::Repository::Staging' is not a valid pragma 1 RM
[15:55] <[Coke]> D: Attempting to load 'CompUnit::Repository::Staging' 1 RMD:   Late loading 'CompUnit::Repository::Staging' 1 RMD:
[15:55] <[Coke]>  try-load 33A52796DB3EBB40BEF94B7696A1B0AB7A29B5C5: C:\sandbox\rakudo\lib\CompUnit\Repository\Staging.rakumod 1 RMD: Trying to load 33A52
[15:55] <[Coke]> 796DB3EBB40BEF94B7696A1B0AB7A29B5C5 from C:\sandbox\rakudo\lib\.precomp 1 RMD: Trying to loa
[15:55] <[Coke]> d 33A52796DB3EBB40BEF94B7696A1B0AB7A29B5C5.repo-id from C:\sandbox\rakudo\lib\.precomp 1 RMD: Loading prec
[15:55] <[Coke]> ompiled C:\sandbox\rakudo\lib\.precomp\77F46E13F3D1DF44C7F80A37C6EF2AAED6FADE90\33\33A52796DB3EBB40BEF94B7696A1B0AB7A29B5C5 1 RMD: Requested for settin
[15:56] <[Coke]> gs CORE.d 1 RMD: Performing imports for 'CompUnit::Repository::Staging' 1 RMD: Imports for 'CompUnit::Repository::Staging' done 1 RMD: Requested for settings CORE.d 1 RMD: Precompiling C:\r
[15:56] <[Coke]> aku\share\perl6\core\sources\10E86A71646D649AE0856ACE1737E1FFACC669D6 into C:\raku\share\perl6\core\precomp\77F46E13F3D1DF44C7F80A37C6EF2AAED6FADE90\10\10E86A71646D649AE0856ACE1737E1FFACC669D6.bc (--ll-exception   )
[15:56] <[Coke]> 2     RMD: Requested for settings CORE.d 2     RMD: Loading settings CORE.d 2     RMD: Loading bytecode from CORE.d.setting.moarvm 2     RMD: going to load Pe
[15:56] <[Coke]> rl6::BOOTSTRAP::v6d 2     RMD: Requested for settings CORE.c 2     RMD: Loading se
[15:56] <[Coke]> ttings CORE.c 2     RMD: Loading bytecode from CORE.c.setting.moarvm 2     RMD: going to load Perl6::BOOTSTRAP::v6c 2     RMD: Settings CORE.c loaded 2     RMD: Settings CORE.d loaded 2     RMD: Attempting 'nqp' as 
[15:56] <[Coke]> a pragma 2     RMD: Successfully handled 'nqp' as a pragma 1 RMD: Precomp
[15:56] <[Coke]> iled C:\raku\share\perl6\core\sources\10E86A71646D649AE0856ACE1737E1FFACC669D6 into C:\raku\share\perl6\core\precomp\77F46E13F3D1DF44C7F80A37C6EF2AAED6FADE90\10\10E86A71646D649AE0856ACE1737E1FFACC669D6.bc 1 RMD: Writing dependencies and byte cod
[15:56] <[Coke]> e to C:\raku\share\perl6\core\precomp\77F46E13F3D1DF44C7F80A37C6EF2AAED6FADE90\10\10E86A71646D649AE0856ACE1737E1FFACC669D6.tmp for source checksum: 730C935463B25D3071F7BF6251821D9504B56F99
[15:56] <[Coke]>  1 RMD: Precompiling C:\raku\share\perl6\core\sources\70EBDA25F44EBFF8734F739F5779D64914083409 into C:\raku\share\perl6\core\precomp\77F46E13F3D1DF44C7F80A37C6EF2AAED6FADE90\70\70EBDA25F44EBFF8734F739F5779D64914083409.bc (--ll-exception   ) 2     RMD: Requested for settings CORE.d 2     RMD: Loading settings CORE.d 2     RMD: Loading bytecode from CORE.d.setting.moarvm 2     RMD: goin
[15:56] <[Coke]> g to load Perl6::BOOTSTRAP::v6d 2     RMD: Requested for settings CORE.c 2     RMD: Loading settings CORE.c 2     RMD: Loading bytecode from CORE.c.setting.moarvm 2     RMD: going to load Perl6::BOOTSTRAP::v6c 2     RMD: Settings CORE.c load
[15:56] <[Coke]> ed 2     RMD: Settings CORE.d loaded 1 RMD: Precompi
[15:56] <[Coke]> led C:\raku\share\perl6\core\sources\70EBDA25F44EBFF8734F739F5779D64914083409 into C:\raku\share\perl6\core\precomp\77F46E13F3D1DF44C7F80A37C6EF2AAED6FADE90\70\70EBDA25F44EBFF8734F739F5779D64914083409.bc 1 RMD: Writing de
[15:56] <[Coke]> pendencies and byte code to C:\raku\share\perl6\core\precomp\77F46E13F3D1DF44C7F80A37C6EF2AAED6FADE90\70\70EBDA25F44EBFF8734F739F5779D64914083409.tmp for source checksum: 708B4F48873D9AA1D048760B4B487CD8C7427E00 1 RMD: Precompiling C:\raku\share\perl6\core\sourc
[15:56] <[Coke]> es\09AD0895983003F8BD0D4FB6C3B0212C822A7FE8 into C:\raku\share\perl6\core\precomp\77F46E13F3D1DF44C7F80A37C6EF2AAED6FADE90\09\09AD0895983003F8BD0D4FB6C3B0212C822A7FE8.bc (--ll-exception   ) 2     RMD: Requested for settings CORE.d 2     RMD: Loading s
[15:56] <[Coke]> ettings CORE.d 2     RMD: Loading by
[15:56] <[Coke]> tecode from CORE.d.setting.moarvm 2     RMD: going to load Perl6::BOOTSTRAP::v6d 2     RMD: Requested for settings CORE.c 2     RMD: Loading settings CORE
[15:57] <[Coke]> .c 2     RMD: Loading bytecode from CORE.c.setting.moarvm 2     RMD:
[15:57] <[Coke]>  going to load Perl6::BOOTSTRAP::v6c 2     RMD: Setti
[15:57] <[Coke]> ngs CORE.c loaded 2     RMD: Settings CORE.d loaded 2     RMD: Attempting 
[15:57] <[Coke]> 'nqp' as a pragma 2     RMD: Successfully handled 'nqp' as a pragma 1 RMD: Pre
[15:57] <[Coke]> compiling C:\raku\share\perl6\core\sources\09AD0895983003F8BD0D4FB6C3B0212C822A7FE8 failed: 3221225512
[15:57] <[Coke]> at SETTING::src/core.c/Exception.pm6:62  (C:\sandbox\rakudo\blib/CORE.c.setting.moarvm:throw) from SETTING::src/core.c/control.pm6:255
[15:57] <[Coke]>   (C:\sandbox\rakudo\blib/CORE.c.setting.moarvm:die) from 
[15:57] <[Coke]> SETTING::src/core.c/CompUnit/PrecompilationRepository.pm6:456  (C:\sandbox\rakudo\blib/CORE.c.setting.moarvm:precompile) from SETTING::src/core.c/CompUnit/Repository/Installation.pm6:301  (C:\sandbox\ra
[15:57] <[Coke]> kudo\blib/CORE.c.setting.moarvm:) from SETTING::src/core.c/CompUnit/Re
[15:57] <[Coke]> pository/Installation.pm6:291  (C:\sandbox\rakudo\blib/CORE.c.setting.moarvm:)
[15:57] *** brrt left
[15:57] <[Coke]>  from SETTING::src/core.c/CompUnit/Repository/Installation.pm6:274  (C:\sandbox\rakudo\blib/CORE.c.setting.moarvm:) from SETTING::src/core.c/Lock.pm6:30  (C:\sandbox\ra
[15:57] <[Coke]> kudo\blib/CORE.c.setting.moarvm:protect) from 
[15:57] <[Coke]> SETTING::src/core.c/CompUnit/Repository/Installation.pm6:177  (C:\sandbox\rakudo\blib/CORE.c.setting.moarvm:install) from C:\sandbox\raku
[15:57] <[Coke]> do\tools\build\install-core-dist.raku:46  (<ephemeral file>:<unit>)
[15:57] <[Coke]>  from C:\sandbox\rakudo\tools\build\install-core-dist.raku:1  (<ephemeral file>:<unit-outer>) from gen\moar\stage
[15:57] <[Coke]> 2\NQPHLL.nqp:1943  (C:\raku\share\nqp\lib/NQPHLL.moarvm:eval) from gen\moar\stage2\
[15:57] <[Coke]> NQPHLL.nqp:2148  (C:\raku\share\nqp\lib/NQPHLL.moarvm:evalfiles) from ge
[15:57] <[Coke]> n\moar\stage2\NQPHLL.nqp:2108  (C:\raku\share\nqp\lib/NQPHLL.moarvm:command_eval) from gen\moar\Compiler.nqp:111  (C:\sandb
[15:57] <[Coke]> ox\rakudo\blib/Perl6/Compiler.moarvm:command_eval) from gen\moar\stage2\NQPHLL.nqp:2033  (C:\raku\share\nqp\lib/NQPHLL.moarvm:command_line) from gen\moar\rakudo.nqp:127  (C:\sandbox\rakudo\rakudo.moarvm:MAIN) from gen\moar\rakudo.nqp:1  (C:\sandbox\rakudo\rakudo.moarvm:<mainline>) from
[15:57] <[Coke]>  <unknown>:1  (C:\sandbox\rakudo\rakudo.moarvm:<main>)
[15:57] <[Coke]> OOF. sorry
[15:58] <[Coke]> was trying to paste the one interesting line. :|
[16:00] <nine> The failing compilation is of MoarVM::Profiler
[16:01] <nine> [Coke]: can you try something like ./rakudo-m lib/MoarVM/Profiler.rakumod? Maybe that will give us some more info
[16:04] <[Coke]> seems to complete successfully
[16:04] <nine> and ./rakudo-m -Ilib -e 'use MoarVM::Profiler'?
[16:07] <[Coke]> precompile failed, error while compile -e
[16:10] <[Coke]> nine: https://gist.github.com/coke/7966426a43606af0f322bc826948bba1
[16:10] <timo> what if you just rakudo-m -Ilib lib/MoarVM/Profiler.rakumod?
[16:11] <nine> What could that 3221225512 be? Seems to be always the same number
[16:11] <nine> It's 0xC0000028 in hex.
[16:12] <[Coke]> timo: that seems to complete
[16:14] <nine> Ooooh:
[16:14] <nine> nqp/MoarVM/3rdparty/libuv/src/win/winapi.h
[16:14] <nine> 836:# define STATUS_BAD_STACK ((NTSTATUS) 0xC0000028L)
[16:15] <nine> Looking for the hexadecimal representation of that number was a really long shot but when you have nothing else at hand... :)
[16:16] <nine> Now just grep through the OS source code to see in what situations this error gets reported
[16:19] <jnthnwrthngtn> Hmm. https://bytepointer.com/resources/pietrek_crash_course_depths_of_win32_seh.htm
[16:19] <jnthnwrthngtn> Does it go away with MVM_JIT_DISABLE=1?
[16:22] <jnthnwrthngtn> Or at least maybe change?
[16:28] <[Coke]> jnthnwrthngtn: yes! that gets .\rakudo-m -Ilib -e "use MoarVM::Profiler" to complete
[16:28] <[Coke]> Sorry. I should be trying that every time I have a weird error on win
[16:28] <[Coke]> (offline for a bit)
[16:33] <MasterDuke> jnthnwrthngtn: question from #raku, "Is there a way to re-dispatch a method call to a role that the given class does? The method resolution order only includes parent classes, but not roles, so stuff like ‚Äòcallsame‚Äô doesn‚Äôt work. Is anything like it available for roles, too?"
[16:33] <MasterDuke> `RoleName::method-name()` gives `Could not find symbol '&method-name' in 'RoleName'`
[16:34] <jnthnwrthngtn> self.RoleName::method-name()
[16:34] <jnthnwrthngtn> It's correct that callsame doesn't visit them. Flattening composition means that a method in the class *replaces* the one that would be provided by the role.
[16:34] <MasterDuke> ha, was just figured out over there
[16:36] <MasterDuke> i didn't know it had to have `self.` before
[16:41] <jnthnwrthngtn> Yes, otherwise it's not a method call.
[16:45] <MasterDuke> ha, right
[17:05] *** discord-raku-bot left
[17:06] <[Coke]> back
[17:06] *** discord-raku-bot joined
[17:06] * [Coke] guesses he can set MVM_JIT_DISABLE to get a working raku so he can run the scripts he needs for work, anyway.
[17:14] *** patrickz left
[17:17] *** patrickb joined
[17:25] <Geth> ¬¶ MoarVM/debug-server-fixes: 86d0a05025 | (Jonathan Worthington)++ | src/debug/debugserver.c
[17:25] <Geth> ¬¶ MoarVM/debug-server-fixes: Avoid duplicate response for suspend/resume all
[17:25] <Geth> ¬¶ MoarVM/debug-server-fixes: 
[17:25] <Geth> ¬¶ MoarVM/debug-server-fixes: The functions that do the suspension or resumption of all threads
[17:25] <Geth> ¬¶ MoarVM/debug-server-fixes: already communicate success or failure, so we don't need to do it from
[17:25] <Geth> ¬¶ MoarVM/debug-server-fixes: the message dispatch too.
[17:25] <Geth> ¬¶ MoarVM/debug-server-fixes: review: https://github.com/MoarVM/MoarVM/commit/86d0a05025
[17:37] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/10/06/2021-40-its-here/
[17:38] <jnthnwrthngtn> lizmat++ # already read it, got advance notification because of the link to my 6guts post :)
[17:38] <lizmat> :-)
[17:47] <jnthnwrthngtn> bbl o/
[17:47] *** sena_kun left
[18:02] *** reportable6 left
[18:18] *** [Coke]_ joined
[18:20] *** [Coke] left
[18:45] <nine> Turns out, the segfaults in nativcall callback tests were not actually caused by the missing handling but by the NativeCall repr's copy_to neglecting to copy arg_info (and sym_name). Why this only occurs now is anyone's guess
[18:46] <nine> Next failure mode: moar: src/core/callstack.c:425: handle_end_of_dispatch_record: Assertion `(char *)disp_record == (char *)tc->stack_top' failed.
[18:48] <MasterDuke> maybe the copy_to problem is the cause of the failed nativecall tests on windows hat [Coke]_ saw?
[18:57] *** brrt joined
[19:00] <brrt> .tell MasterDuke I'm not seeing anything immediately obvious
[19:00] <tellable6> brrt, I'll pass your message to MasterDuke
[19:01] <MasterDuke> hm, thanks for looking
[19:03] <jnthnwrthngtn> nine: Is it in a callback test? It may be that the nested runloop messes stuff up
[19:03] <jnthnwrthngtn> dinner &
[19:03] <Nicholas> botherit - I wanted to ask a teasing question
[19:04] <Nicholas> in the new "disp all the things" paradigm, what was next after nativecall? Was it some thoughts about type coercions?
[19:22] *** brrt left
[19:28] <nine> jnthnwrthngtn: yes, it is
[19:35] <nine> jnthnwrthngtn: and yes, it does
[19:40] <nine> Just restoring tc->stack_top to its previous state after the nested runloop gets me to the end of the test file with just 3 out of 11 failed. But of course that's a rather crude way.
[20:03] *** reportable6 joined
[20:31] <jnthnwrthngtn> nine: Eventually we should probably have a callstack record type for "edge of a nested runloop"
[20:32] <jnthnwrthngtn> (However, that may not make sense until the larger restructuring of call/return I'm plotting)
[20:32] *** [Coke]_ is now known as [Coke]
[20:33] <jnthnwrthngtn> Nicholas: Integrating the specialization selection with dispatch programs is probably one more useful unification. Not quite sure how to achieve it yet.
[20:44] *** patrickb left
[20:45] <nine> jnthnwrthngtn: so do you consider restoring tc->stack_top to be a valid workaround till that restructuring?
[20:45] <jnthnwrthngtn> nine: If it suffices, I think so, yes
[20:46] <jnthnwrthngtn> I think it's relatively unlikely callbacks would work at all if this was the problem
[20:54] <[Coke]> with JIT disabled I was able to install raku. But then installing zef dies.
[20:56] <[Coke]> ah. also getting lots of 'nmake test' failures, will post.
[20:56] <[Coke]> I do apologize because I feel like 50% of these are "will did something dumb." :)
[21:44] *** linkable6 left
[21:44] *** evalable6 left
[21:44] *** linkable6 joined
[21:45] *** evalable6 joined
[22:24] <Geth> ¬¶ MoarVM: 627c92ccb0 | (Jonathan Worthington)++ | 3 files
[22:24] <Geth> ¬¶ MoarVM: Add [mono|poly|mega]morphic site counts in profile
[22:24] <Geth> ¬¶ MoarVM: 
[22:24] <Geth> ¬¶ MoarVM: Including which megamorphic ones ended up blowing the cache size limit,
[22:24] <Geth> ¬¶ MoarVM: indicating there was no megamorphic handler installed to cope with the
[22:24] <Geth> ¬¶ MoarVM: situation.
[22:24] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/627c92ccb0
[22:25] <timo> oh, cool
[22:30] <jnthnwrthngtn> Wonder how best to do this in the SQL
[22:31] <timo> can just add a new table that has the values indexed to the id from the call table
[22:32] <timo> the nqp side of the code can check if any node has the mono/poly/etc keys and emit the table definition a little later or whatever
[22:33] <timo> oh, wait, this isn't about call, this is about routine, isn't it
[22:33] <jnthnwrthngtn> oh hmm...yes, it's about routine, but I've emitted it per call node, which is...
[22:33] <timo> not optimal, eah
[22:33] <jnthnwrthngtn> grmbl
[22:33] <timo> shouldn't be difficult to move to the right spot
[22:34] <timo> should go in the "get routine id" function that creates the routine hash if necessary
[22:34] <jnthnwrthngtn> Is there a separate notion of routines vs calls in the data structure MoarVM builds up?
[22:35] <timo> oh
[22:35] <timo> i must have confused it with the implementation of the heap dump
[22:38] <timo> every call has the name and line number and filename in the node as strings and ints
[22:38] <jnthnwrthngtn> Yup
[22:38] <jnthnwrthngtn> Though it seems there is a unique ID per static frame too
[22:39] <jnthnwrthngtn> So I can clear it up into a per-routine thing on the NQP side and have a separate table without the repetition.
[22:39] <timo> OTOH since the contents of a cache change over time, there is a little bit of a reason to have it in the call graph
[22:40] <jnthnwrthngtn> But I don't log any info
[22:40] <jnthnwrthngtn> I add the end state of the inline caches
[22:40] <timo> ah, OK
[22:40] <jnthnwrthngtn> But yeah, this is...rather inefficient.
[22:40] <timo> time for a full rewrite
[22:40] <jnthnwrthngtn> Although doing better probably means a larger reorganization.
[22:41] <timo> i also notice we box_s the filenames over and over, so that's some memory definitely wasted there
[22:41] <timo> but only RAM usage at the time you pull out the profile data
[22:42] <jnthnwrthngtn> The profiler as it is today is mostly quite recognizable from the Conference Driven Development implementation I wrote years ago :)
[22:42] <timo> that's because you did it good :D
[22:44] <jnthnwrthngtn> I guess we have a decent amount of freedom if we want to tidy up, because the only thing that we absolutely cannot change without causing big problems is the SQL
[22:44] <jnthnwrthngtn> Which is already sensible enough to have a separate routines table
[22:44] <MasterDuke> when i started using raku (perl 6 at the time) i thought one of the coolest features was that it came with a profiler
[22:45] <timo> having it output a html file that just gives you all the data is damn nice
[22:45] *** linkable6 left
[22:45] *** evalable6 left
[22:45] <jnthnwrthngtn> While the `--profile` at the command line spitting out a HTML single page app only scales so far, it's delightfully easy to use
[22:45] <timo> sadly, browsers don't like when html files go past a couple megabytes
[22:46] <jnthnwrthngtn> I suspect we could get it to go a little further with a more compact representation.
[22:46] <MasterDuke> i think it's really just the size of the json that's a problem, not of the page in total
[22:46] *** evalable6 joined
[22:47] <jnthnwrthngtn> For sure, though we can probably get it more compact too
[22:47] <MasterDuke> wins all around
[22:47] <timo> toss out key/value, replace it with arrays with fixed indices, for example
[22:47] <jnthnwrthngtn> Things like this, yes
[22:47] <timo> oh, can possibly gzip or whatever it before writing to the html file, then ungzip it on the fly in javascript
[22:47] <jnthnwrthngtn> o.O
[22:48] <timo> may have to base64 it in the middle tho
[22:48] <jnthnwrthngtn> Oh, talking of that...about heap profiles: what is used to compress them, and what is its license?
[22:48] <MasterDuke> probably even faster to stick a webasm zstd implementation in and use that
[22:48] <timo> zstd, the library has a compatible license, i checked
[22:48] <timo> a moment please
[22:49] <timo> 3 clause bsd
[22:49] <jnthnwrthngtn> OK, so there'd be no problem with us having it as a 3rdparty/ dep to ensure it's present on systems that don't have a package for it?
[22:49] <timo> that would be all right i think
[22:49] <MasterDuke> the linux kernel is just about to upgrade their zstd implementation, it's something like 4 years out of date
[22:50] <jnthnwrthngtn> I'm looking at Comma heap profile support and it's a bit annoying that many folks will have MoarVM versions that don't support version 3 of the heap profile (I think it's version 3)
[22:50] <timo> do you think it's worth dynamically loading libzstd when it's first needed, so that moarvm's memory footprint doesn't increase much?
[22:50] <timo> i would be in favor of making zstd available for all users
[22:51] <jnthnwrthngtn> Is it such a big library?
[22:51] <jnthnwrthngtn> Ah, maybe some big tables that drive compression?
[22:51] <timo> libzstd.so.1.5.0 is 988K big on my system
[22:51] <jnthnwrthngtn> Wowser, that's more than I'd expect
[22:51] <timo> i don't think i have bloaty installed
[22:52] <jnthnwrthngtn> Presumably any heap allocations can be delayed until it's initialized and we can do that lazily, and we can leave demand paging and memory mapping to keep the cost down
[22:53] <timo> the dynamic loader is pretty fast, that's true
[22:53] <MasterDuke> timo: https://gist.github.com/MasterDuke17/7a1aa2287a759056ff836227f2bf922d
[22:54] <jnthnwrthngtn> Well, if I understand that output correctly, not a bunch of big static tables then
[22:54] <timo>   [13] .text             PROGBITS        00003ec0 003ec0 0dfbd8 00  AX  0   0 16
[22:54] <timo>   [15] .rodata           PROGBITS        000e4000 0e4000 005745 00   A  0   0 32
[22:54] <timo>   [17] .eh_frame         PROGBITS        000ea4d4 0ea4d4 009f24 00   A  0   0  4
[22:54] <timo> these are the big sections
[22:55] <jnthnwrthngtn> Yeah but
[22:55] <jnthnwrthngtn>   90.5%   975Ki  91.1%   975Ki    .text
[22:55] <jnthnwrthngtn> That dominates
[22:55] <timo> oof.
[22:55] <jnthnwrthngtn> And that's the machine code section, iiuc?
[22:55] <timo> yeah
[22:55] <timo> could potentially build a libzstd that can only compress not decompress
[22:55] <timo> no clue how much that can save
[22:56] <jnthnwrthngtn> I've no idea what eh_frame is, I figure rodata is where any of the tables I was imagining would be
[22:57] <timo> exception handlers?
[22:58] <jnthnwrthngtn> Oh...but it looks like it's in C? Or is it so a C++ program using it can throw over it?
[22:58] <jnthnwrthngtn> At least if number of files is anything to go on, compress is heavier than decompress
[22:59] <MasterDuke> https://github.com/facebook/zstd/blob/dev/CONTRIBUTING.md#c90
[22:59] <timo> Languages
[22:59] <timo> C 84.2%
[22:59] <timo> C++ 6.4%
[22:59] <timo> Shell 2.9%
[22:59] <timo> Python 2.2%
[22:59] <timo> Makefile 2.0%
[22:59] <timo> CMake 0.7%
[22:59] <timo> Other 1.6%
[23:00] <timo> presumably a cpp compatible interface in the same .so file
[23:01] <jnthnwrthngtn> ah, maybe there's a configure option to avoid that since we won't need it
[23:01] <jnthnwrthngtn> For when we build it ourselves at least
[23:01] <timo> there's also the zlib wrapper which lets you drop in zstd as replacement and switch back and forth with a define
[23:01] <timo> no clue how much that contributes
[23:02] <timo> the functionality to support and create pre-trained shared dictionaries may be useless to us as well
[23:04] <timo> otherwise, static linking and dead code elimination could be an option
[23:06] <jnthnwrthngtn> I guess the other view on this is that wider access to heap snapshots may well lead to more memory being saved than zstd costs :)
[23:06] <timo> :D
[23:11] <MasterDuke> there doesn't really appear to be any configuring options when building it (at least as far as leaving out features and such)
[23:46] *** linkable6 joined
