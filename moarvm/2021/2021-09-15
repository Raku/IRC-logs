[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[01:13] *** frost joined
[03:52] *** nativecallable6 left
[03:52] *** coverable6 left
[03:52] *** sourceable6 left
[03:52] *** benchable6 left
[03:52] *** linkable6 left
[03:52] *** evalable6 left
[03:52] *** greppable6 left
[03:52] *** squashable6 left
[03:52] *** tellable6 left
[03:52] *** committable6 left
[03:52] *** unicodable6 left
[03:52] *** shareable6 left
[03:52] *** statisfiable6 left
[03:52] *** bisectable6 left
[03:52] *** notable6 left
[03:52] *** reportable6 left
[03:52] *** quotable6 left
[03:52] *** bloatable6 left
[03:52] *** releasable6 left
[03:53] *** shareable6 joined
[03:53] *** tellable6 joined
[03:53] *** committable6 joined
[03:53] *** notable6 joined
[03:53] *** bisectable6 joined
[03:53] *** evalable6 joined
[03:54] *** sourceable6 joined
[03:54] *** coverable6 joined
[03:54] *** releasable6 joined
[03:55] *** reportable6 joined
[03:55] *** linkable6 joined
[04:52] *** unicodable6 joined
[04:53] *** nativecallable6 joined
[04:53] *** bloatable6 joined
[04:55] *** greppable6 joined
[04:55] *** statisfiable6 joined
[04:55] *** benchable6 joined
[05:47] <Nicholas> good *able6, #moarvm 

[05:54] *** quotable6 joined
[06:03] *** reportable6 left
[07:32] *** notable6 left
[07:32] *** coverable6 left
[07:32] *** statisfiable6 left
[07:32] *** releasable6 left
[07:32] *** benchable6 left
[07:32] *** committable6 left
[07:32] *** evalable6 left
[07:32] *** sourceable6 left
[07:32] *** tellable6 left
[07:32] *** bloatable6 left
[07:32] *** linkable6 left
[07:32] *** shareable6 left
[07:32] *** bisectable6 left
[07:32] *** unicodable6 left
[07:32] *** nativecallable6 left
[07:32] *** greppable6 left
[07:32] *** quotable6 left
[07:33] *** nativecallable6 joined
[07:33] *** notable6 joined
[07:33] *** greppable6 joined
[07:33] *** benchable6 joined
[07:34] *** tellable6 joined
[07:35] *** bisectable6 joined
[07:35] *** committable6 joined
[07:35] *** coverable6 joined
[07:54] *** squashable6 joined
[08:00] <Nicholas> We seem to be missing unflappable6

[08:32] *** unicodable6 joined
[08:32] *** evalable6 joined
[08:33] *** sourceable6 joined
[08:35] <lizmat> I guess unflappable6 flapped ?

[09:33] *** statisfiable6 joined
[09:33] *** shareable6 joined
[09:43] <lizmat> hmmm... apparently, raku has an undocumented --encoding parameter

[09:43] <lizmat> or rather I would say: rakudo has that

[09:44] <lizmat> is that intentionally not documented ?

[09:44] <Nicholas> what heresy is this? There is only UGT and Unicode :-)

[09:45] <lizmat> oddly, this seems only to apply to code in a file

[09:45] <lizmat> $ raku --encoding=ascii -e 'say "üç∫"'

[09:45] <lizmat> works fine

[09:46] <lizmat> $ raku --encoding=ascii foo

[09:46] <lizmat> Error while reading from file: Will not decode invalid ASCII (code point (240) > 127 found)

[09:49] <dogbert11> https://unicode.org/versions/Unicode14.0.0/

[09:49] <lizmat> dogbert11  ??

[09:51] <dogbert11> my nick changes when libera throws my out, it should be dogbert17

[09:51] *** dogbert11 left
[09:52] *** dogbert17 joined
[09:53] <lizmat> I was wondering why you posted that link  :-)

[09:53] <dogbert17> as far as the link is concerned I just wanted to point out that a new Unicode version has been released :)

[09:57] <lizmat> aha.. ok  :-)

[10:04] *** reportable6 joined
[10:34] *** quotable6 joined
[10:34] *** bloatable6 joined
[10:37] * dogbert17 hopes that jnthnwrthngtn's coffee machine is in working order

[10:53] <jnthnwrthngtn> moarning o/

[10:54] <jnthnwrthngtn> Yes, in fact I've used both of them (home and office) today :)

[10:54] <Nicholas> \o

[10:55] <dogbert17> :)

[11:33] *** releasable6 joined
[11:33] *** linkable6 joined
[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[13:11] <[Coke]> I've had three disappointing k-cups this morning.

[13:34] *** dogbert17 left
[13:49] <Geth> ¬¶ MoarVM/new-disp: eb1e7f5903 | (Jonathan Worthington)++ | 2 files

[13:49] <Geth> ¬¶ MoarVM/new-disp: Add some missing :invokish annotations

[13:49] <Geth> ¬¶ MoarVM/new-disp: 

[13:49] <Geth> ¬¶ MoarVM/new-disp: Fixes "failed to find deopt index when processing resume" errors with

[13:49] <Geth> ¬¶ MoarVM/new-disp: the JIT.

[13:49] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/eb1e7f5903

[13:50] <jnthnwrthngtn> That gets `make test` in Rakudo clean again for me

[13:57] <jnthnwrthngtn> Hm, still one spectest failure

[14:01] <jnthnwrthngtn> Ah, it's the one dogbert offerred a golf of, but somehow I can't repro it that way

[14:10] *** dogbert17 joined
[14:11] <dogbert17> jnthnwrthngtn: did you run with MVM_SPESH_NODELAY=1 ?

[14:20] <jnthnwrthngtn> Yes

[14:20] <jnthnwrthngtn> Don't worry though, I extracted a reliable repro and already have figured out which inline is triggering the bug

[14:20] <jnthnwrthngtn> However, not sure hte inline itself is to blame, just that it exposes a constant

[14:20] <jnthnwrthngtn> And then a branch elimination seems to eliminate the wrong way

[14:22] <dogbert17> good news that you found a repro

[14:25] <jnthnwrthngtn> Hm, actually the facts are super weird

[14:25] <jnthnwrthngtn>       const_i64         r6(6), liti64(0)  # [016] unboxed literal to value 0

[14:26] <jnthnwrthngtn> But

[14:26] <jnthnwrthngtn>       r6(6): usages=1, flags=11    KnTyp KnVal Concr (type: Bool)

[14:26] <jnthnwrthngtn> How can we be sticking an int constant into a register that has object type facts on it?

[14:28] *** frost left
[14:32] <jnthnwrthngtn> hah, found it

[14:33] <dogbert17> yay, thinko or copy pasto?

[14:35] <jnthnwrthngtn> Thinko, I'd say

[14:35] <jnthnwrthngtn> master may have the same bug, just unexposed.

[14:35] <dogbert17> uh oh

[14:36] <jnthnwrthngtn> ah no, it doesn't

[14:36] <jnthnwrthngtn> It would actually have blown up if the sitaution ever arose

[14:37] <Nicholas> I misread that as "oh not it doesn't" and was thinkign that "oh yes it does" was not really a helpful reply, even if it seemed like a good fit.

[14:39] <Geth> ¬¶ MoarVM/new-disp: 06453a55a2 | (Jonathan Worthington)++ | src/spesh/inline.c

[14:39] <Geth> ¬¶ MoarVM/new-disp: Don't inappropriately copy facts when inlining

[14:39] <Geth> ¬¶ MoarVM/new-disp: 

[14:39] <Geth> ¬¶ MoarVM/new-disp: When we transform the `return` instruction, it makes sense to copy facts

[14:39] <Geth> ¬¶ MoarVM/new-disp: when were are returning an object to a place where an object is wanted.

[14:39] <Geth> ¬¶ MoarVM/new-disp: However, in the case that we are performing an unbox, they should not be

[14:39] <Geth> ¬¶ MoarVM/new-disp: copied, otherwise we end up with object-y facts on a non-object operand,

[14:39] <Geth> ¬¶ MoarVM/new-disp: which can in turn cause confusion (in the case debugged, it cause a

[14:39] <Geth> ¬¶ MoarVM/new-disp: mis-optimization of a branch).

[14:39] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/06453a55a2

[14:39] <jnthnwrthngtn> :D

[14:39] <jnthnwrthngtn> OK, I think that gets us spectests happy

[14:39] <jnthnwrthngtn> After yesterday's fun

[14:40] <jnthnwrthngtn> lizmat: You may like to retry test-t with the latest MoarVM changes, now make test / make spectest regressions are fixed at least

[14:47] <dogbert17> what's next on the agenda?

[14:47] <Nicholas> tea!

[14:48] <jnthnwrthngtn> Indeed, I do now have tea

[14:48] <lizmat> will  do later today

[14:51] <dogbert17> just did a spectest unde MVM_SPESH_NODELAY. Yesterday there were plenty of failures but now we're down to one

[14:52] <jnthnwrthngtn> Which one?

[14:53] <dogbert17> t/spec/S32-str/numeric.rakudo.moar

[14:53] <dogbert17> here's another crappy (?) golf:  while MVM_SPESH_NODELAY=1 ./rakudo-m -e 'sub f($str) { my $num = +$str; }; f  "3.0/2"'; do :; done

[14:54] <jnthnwrthngtn> senhened; ot 

[14:54] <jnthnwrthngtn> arhg

[14:54] <jnthnwrthngtn> Sensitive to JIT or inline?

[14:54] <dogbert17> let's see

[14:55] <dogbert17> disabling the JIT does not help

[14:55] <jnthnwrthngtn> aww, I hoped that one of the fixes I'd done might be at the bottom of the problem where we can't elide adding guards when compiling a dispatch progrma without blowing up the NQP build

[14:55] <jnthnwrthngtn> Alas no

[14:56] <dogbert17> MVM_SPESH_INLINE_DISABLE=1 seems to help though

[14:58] <dogbert17> hopefully you'll be able to repro

[14:59] * dogbert17 sneaks away for a walk

[14:59] <jnthnwrthngtn> $ MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 ./rakudo-m -e 'sub f($str) { my $num = +$str; }; f  "3.0/2"'

[14:59] <jnthnwrthngtn> ===SORRY!===

[14:59] <jnthnwrthngtn> Cannot find method 'outer' on object of type BOOTInt

[14:59] <jnthnwrthngtn> oh hang on

[14:59] <jnthnwrthngtn> I still had the attempt at not emitting guarsds, so was probably seeing that

[15:00] <jnthnwrthngtn> Can't repro it now alas

[15:01] <jnthnwrthngtn> argh, it doesn't fail with spesh blocking, only with nodelay

[15:02] <jnthnwrthngtn> Curious, the original test file still fails even with JIT and inline disabled

[15:18] *** patrickb joined
[15:22] *** discord-raku-bot left
[15:22] <jnthnwrthngtn> OK, seems like an istype gets turned into a constant, which may well be OK but the facts "magically appear" where there used to be a decont instruction

[15:22] *** discord-raku-bot joined
[15:23] *** discord-raku-bot left
[15:23] *** discord-raku-bot joined
[15:38] *** patrickb left
[15:51] <jnthnwrthngtn> OK, this probably is the very same bug that keeps me from being able to not emit guards: the version splitting doesn't properly account for control flow

[15:53] <jnthnwrthngtn> I suspected it when I was tracing that problem on Monday, but with this incidence it's far more clear cut

[16:28] <Nicholas> All tests successful.

[16:28] <Nicholas> (that was spectest)

[16:39] <Geth> ¬¶ MoarVM/new-disp: 8667feedd0 | (Jonathan Worthington)++ | src/spesh/manipulate.c

[16:39] <Geth> ¬¶ MoarVM/new-disp: Only split SSA versions to dominance frontiers

[16:39] <Geth> ¬¶ MoarVM/new-disp: 

[16:39] <Geth> ¬¶ MoarVM/new-disp: When we need to insert additional guards while translating dispatch

[16:39] <Geth> ¬¶ MoarVM/new-disp: programs or stacking up guards ahead of a call, we perform an SSA

[16:39] <Geth> ¬¶ MoarVM/new-disp: version split, since gurad instructions write a new version (so the

[16:39] <Geth> ¬¶ MoarVM/new-disp: facts can be placed on the new version only). When looking for reads to

[16:39] <Geth> ¬¶ MoarVM/new-disp: update, it would walk the CFG successors. However, this is incorrect.

[16:39] <Geth> ¬¶ MoarVM/new-disp: <‚Ä¶commit message has 15 more lines‚Ä¶>

[16:39] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8667feedd0

[16:40] <jnthnwrthngtn> dogbert17: That's the fix for the spectest that failed with NODELAY

[16:40] <jnthnwrthngtn> Now, does *this* let me finally not insert the dupe guards...

[16:41] <jnthnwrthngtn> Sigh, no

[16:41] <jnthnwrthngtn> I really thought this was going to be the same issue

[16:44] <dogbert17> back

[16:45] <dogbert17> jnthnwrthngtn++, will test

[16:48] <dogbert17> it works perfectly

[16:49] <dogbert17> I only have one more new-disp bug left (!), the one which throws valgrind for a loop if MoarVM is built with --no-optimize

[16:51] *** patrickb joined
[16:51] *** patrickb left
[16:52] *** patrickb joined
[16:52] *** patrickb left
[16:52] *** patrickb joined
[16:52] *** patrickb left
[16:52] *** patrickb joined
[16:53] *** patrickb left
[17:08] <jnthnwrthngtn> Ugh. So I spesh bisected not emitting the guard, got a frame, then looked at the deopt log and right before we SEGV we've just done a lazy deopt of that frame

[17:09] <jnthnwrthngtn> We do also delete a huge amount of set instructions all over the place

[17:09] <jnthnwrthngtn> Which are from optimized away things

[17:09] <jnthnwrthngtn> With the guard we don't delete them

[17:45] *** patrickb joined
[17:54] *** patrickb left
[17:58] <Geth> ¬¶ MoarVM/new-disp: 70e83891a7 | (Jonathan Worthington)++ | 2 files

[17:58] <Geth> ¬¶ MoarVM/new-disp: Correct a typo in op properties

[17:58] <Geth> ¬¶ MoarVM/new-disp: 

[17:58] <Geth> ¬¶ MoarVM/new-disp: Which meant that we could incorrectly delete deopt points.

[17:58] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/70e83891a7

[17:58] <Geth> ¬¶ MoarVM/new-disp: e3c699053d | (Jonathan Worthington)++ | src/spesh/disp.c

[17:58] <Geth> ¬¶ MoarVM/new-disp: Don't lose pre-deopt annotation

[17:58] <Geth> ¬¶ MoarVM/new-disp: 

[17:58] <Geth> ¬¶ MoarVM/new-disp: If we insert no guards, then we could end up losing this deopt

[17:58] <Geth> ¬¶ MoarVM/new-disp: annotation from the graph, which could in turn lead to us doing

[17:58] <Geth> ¬¶ MoarVM/new-disp: optimizations that prevented us from being able to deopt correctly

[17:58] <Geth> ¬¶ MoarVM/new-disp: (specifically, this seems to be the only thing that keeps the result

[17:58] <Geth> ¬¶ MoarVM/new-disp: register of a runbytecode or dispatch op from getting changed as part of

[17:58] <Geth> ¬¶ MoarVM/new-disp: `set` elimination, and if we do that, we have the result in the wrong

[17:58] <Geth> ¬¶ MoarVM/new-disp: place when global deoptimization happens).

[17:58] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/e3c699053d

[17:59] <Nicholas> And *now* it's time for a well earned beer?

[18:00] <timo> oh no!

[18:00] *** squashable6 left
[18:00] <timo> sounds like update_ops wants to warn on unknown :blah things

[18:01] <timo> coming from the "please update your account recovery settings" page and clicking "confirm" redirected me to an empty page, but interestingly the url started with

[18:01] <timo> https://github.com/_view_fragments/Voltron::CommitFragmentsController

[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:26] <lizmat> local test-t timings master vs newdisp:

[18:27] <lizmat> test-t: 1.372 -> 1954,   test-t --race: .634 -> .870

[18:29] <lizmat> newdisp timings were 2.11    0.81   https://logs.liz.nl/moarvm/2021-09-14.html#09:00

[18:30] <lizmat> so the test-t has improved from 2.110 to 1.954, but the --race case appears to have fallen back from .81 to .87

[18:30] <lizmat> jnthnwrthngtn ^^

[18:42] *** patrickb joined
[18:45] <jnthnwrthngtn> timo: Yes, it could do with that indeed

[18:46] <jnthnwrthngtn> lizmat: Thanks, nice to see it going in the correct direction. The two fix commits above are working towards getting rid of some guards in arg processing that also block a lot of inlining.

[18:46] <jnthnwrthngtn> lizmat: Not sure how to explain the --race worsening off hand

[18:46] <jnthnwrthngtn> Oh, and also: yay, no more segv :)

[18:49] <lizmat> indeed  :-)

[18:50] <lizmat> verified the test-t --race on master: I guess the .634 was an outlier, it's more like .65

[18:51] <jnthnwrthngtn> Nicholas: There will be beer at some point this evening, at least. Well earned aloo gobi first :)

[18:51] <Nicholas> jnthnwrthngtn: in case anyone asks when you're getting some well earned AFK, is it "worth" doing another blin run yet, or is it better to wait for some more changes?

[18:51] <Nicholas> \o/

[18:51] <jnthnwrthngtn> Nicholas: Kinda both I guess...I mean, the more regular we have them, the less commits to suspect if something breaks.

[18:52] <jnthnwrthngtn> I don't know how seeon I'll be able to get in the change to elide producing guards that (should be) unrequired.

[18:52] <jnthnwrthngtn> *soon

[18:52] <jnthnwrthngtn> weird typo

[18:52] <lizmat> channeling your internal Korean ?

[18:53] <jnthnwrthngtn> I thought the fixes I pushed earlier would nail it, but they just move it along to a different failure mode.

[18:53] <jnthnwrthngtn> Mmm...it's been way too long since I had some Korean noms.

[18:53] <Nicholas> me too

[18:55] <jnthnwrthngtn> yay, spectest looks good on my home machine too, and a few seconds faster than the last successful run I did here

[19:05] <jnthnwrthngtn> grmbl, compile_mastop is not a function I hoped to have picked out as a problematic one...

[19:05] <jnthnwrthngtn> (186 basic blocks and lots of inlines)

[19:12] <jnthnwrthngtn> dinner, bbl

[19:23] <timo> the desire to make a proper spesh log "viewer" grows stronger and stronger

[19:24] <lizmat> timo: so what is missing from the MoarVM::Spesh module ?

[19:28] <timo> i forgot to look at it lol

[19:34] <[Coke]> can we add -Werror=vla to our gcc configs?

[19:44] <[Coke]>  CFLAGS="-Werror=vla" ./Configure.pl - this catches the VLA issue in src/jit/expr.c

[19:46] <[Coke]> added https://github.com/MoarVM/MoarVM/issues/1537

[19:48] <timo> lizmat: that actually looks pretty cool, but i'm focusing more on viewing a before or after part and making information easier to find in context. like from a "sslot(blah)" to get the type, or from every register to its writer, and getting the facts for the register etc etc

[19:51] <timo> and for that i'd probably want a UI that lets me have two views side by side to have corresponding BBs scroll together, and/or source code lines and/or the inlined "before" code, etc etc

[19:53] <[Coke]> (Very excited for the merge!)

[19:53] <timo> maybe that's the project i need in order to put RaQt through its paces?

[20:01] *** squashable6 joined
[20:21] <Nicholas> All tests successful.

[20:38] <jnthnwrthngtn> I got a smaller repro for the new failure mode with guard elimination and it's also a deopt issue

[20:41] <timo> ouch, even more tricky issues

[20:49] <jnthnwrthngtn> Yeah, it seems to be that the deopt annotations go missing when we do an inline

[20:49] <jnthnwrthngtn> I wonder why they don't on master...

[20:55] *** patrickb left
[20:59] *** MasterDuke26 joined
[21:01] <MasterDuke26> is it deliberate that `<some callsite>->arg_flags` sometimes gets malloced with `<something>*sizeof(MVMCallsiteEntry)` and sometimes just `<something>`?

[21:03] * MasterDuke26 recorded the invalid free in rr from `raku --full-cleanup -e ''` on new-disp and put a watch on cs->arg_flags in MVM_callsite_destroy, but the backtraces at some of the writes are all '??', even with MVM_SPESH_DISABLE=1 and building with --optimize=0

[21:07] <jnthnwrthngtn> MasterDuke26: Not really; the sizeof version is more robust in case it ever changes, but it seems unlikely

[21:08] <MasterDuke26> ah, yeah i see that sizeof(MVMCallsiteEntry) should always be 1

[21:15] <jnthnwrthngtn> bbl

[21:34] <MasterDuke26> fg

[22:08] *** MasterDuke26 left
[22:50] <Geth> ¬¶ MoarVM: MasterDuke17++ created pull request #1538: Fix invalid free when cleaning interned callsites

[22:50] <Geth> ¬¶ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1538

[23:10] <Geth> ¬¶ MoarVM/new-disp: 2a886d53e6 | (Daniel Green)++ (committed by timo) | src/core/callsite.c

[23:10] <Geth> ¬¶ MoarVM/new-disp: Fix invalid free when cleaning interned callsites

[23:10] <Geth> ¬¶ MoarVM/new-disp: 

[23:10] <Geth> ¬¶ MoarVM/new-disp: A new "common" callsite was added in 494cb75d2e0dac880ee4848824fad7d84ce4da64,

[23:10] <Geth> ¬¶ MoarVM/new-disp: but accidentally left out of the list to check for in `is_common()`.

[23:10] <Geth> ¬¶ MoarVM/new-disp: This fixes the abort and `free(): invalid pointer` seen when running

[23:10] <Geth> ¬¶ MoarVM/new-disp: `raku --full-cleanup -e ''`.

[23:10] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/2a886d53e6

