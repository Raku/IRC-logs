[00:05] *** Kaiepi joined
[00:38] *** Kaiepi left
[01:54] *** lizmat joined
[02:22] *** bloatable6 joined
[02:39] *** Util joined
[03:51] *** Kaiepi joined
[05:45] <Geth> Â¦ MoarVM/ryu: 6 commits pushed by (Nicholas Clark)++

[05:45] <Geth> Â¦ MoarVM/ryu: 5c767492be | Add RyÅ« as a submodule.

[05:45] <Geth> Â¦ MoarVM/ryu: 2ea9ba325d | Switch MVM_coerce_n_s to RyÅ« from Grisu3 with a sprintf fallback.

[05:45] <Geth> Â¦ MoarVM/ryu: cc41b3c8e2 | Remove the Grisu3 code.

[05:45] <Geth> Â¦ MoarVM/ryu: 1ab7e9c167 | Convert MVM_num_isnanorinf and MVM_num_{posinf,neginf,nan} to static inline.

[05:45] <Geth> Â¦ MoarVM/ryu: bb1093c912 | In `MVM_coerce_n_s`, move the NaN and Inf handling inside an UNLIKELY test.

[05:45] <Geth> Â¦ MoarVM/ryu: 0b258819d2 | Switch to our own mirror of RyÅ«.

[05:45] <Geth> Â¦ MoarVM/ryu: review: https://github.com/MoarVM/MoarVM/compare/1a337d22ea32...0b258819d22f

[05:46] <nwc10> good *, #moarvm 

[05:49] <japhb> Good way to say hello, with a push!  :-)

[06:11] *** sivoais left
[06:39] *** sivoais joined
[06:50] *** patrickb joined
[06:52] <patrickb> o/

[06:54] <nwc10> \o

[07:03] <Geth> Â¦ MoarVM: patrickbkr++ created pull request #1484: CI: Update package index before installing packages

[07:03] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1484

[07:04] <patrickb> nwc10: I hope the above will fix the ryu PR.

[07:04] <nwc10> I was about to ask you exactly that :-)

[07:07] <patrickb> Work on CIs tends to be a lot of pain. I have quite a bit of sympathy for MasterDuke and his attempt to improve the Azure chain.

[07:08] <patrickb> MasterDuke++

[07:36] <Geth> Â¦ MoarVM: 19db00f75d | (Patrick BÃ¶ker)++ | azure-pipelines.yml

[07:36] <Geth> Â¦ MoarVM: CI: Update package index before installing packages

[07:36] <Geth> Â¦ MoarVM: 

[07:36] <Geth> Â¦ MoarVM: This should fix missing package errors.

[07:36] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/19db00f75d

[07:36] <Geth> Â¦ MoarVM: 09c4c4d427 | (Patrick BÃ¶ker)++ (committed using GitHub Web editor) | azure-pipelines.yml

[07:36] <Geth> Â¦ MoarVM: Merge pull request #1484 from patrickbkr/ci-update-package-index

[07:36] <Geth> Â¦ MoarVM: 

[07:36] <Geth> Â¦ MoarVM: CI: Update package index before installing packages

[07:36] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/09c4c4d427

[07:37] <patrickb> It now installs gdb 10. So the fix seems to actually have been correct.

[07:39] *** lizmat left
[07:47] <Geth> Â¦ MoarVM/ryu: 6 commits pushed by (Nicholas Clark)++

[07:47] <Geth> Â¦ MoarVM/ryu: a08bb7003c | Add RyÅ« as a submodule.

[07:47] <Geth> Â¦ MoarVM/ryu: 348e78e37a | Switch MVM_coerce_n_s to RyÅ« from Grisu3 with a sprintf fallback.

[07:47] <Geth> Â¦ MoarVM/ryu: 3f1b7758c6 | Remove the Grisu3 code.

[07:47] <Geth> Â¦ MoarVM/ryu: fe5cbb9976 | Convert MVM_num_isnanorinf and MVM_num_{posinf,neginf,nan} to static inline.

[07:47] <Geth> Â¦ MoarVM/ryu: 83dfa5cb23 | In `MVM_coerce_n_s`, move the NaN and Inf handling inside an UNLIKELY test.

[07:47] <Geth> Â¦ MoarVM/ryu: 9274872e35 | Switch to our own mirror of RyÅ«.

[07:47] <Geth> Â¦ MoarVM/ryu: review: https://github.com/MoarVM/MoarVM/compare/0b258819d22f...9274872e3561

[07:47] <nwc10> and now rebased onto that

[07:53] *** sena_kun left
[07:53] *** lizmat joined
[07:59] *** sena_kun joined
[08:06] *** LizBot joined
[08:28] *** zakharyas joined
[09:14] <timotimo> you know, jnthn, if we know that a frame we just hit the instrumentation barrier on in order to validate it is going to call into another soon after, we could totally queue the other frame for immediate verification, perhaps off-thread, and win the tiniest amount of latency

[09:24] <jnthn> Given a lot of frames are quite small, I think off-thread might not be a win, in that the coordination could dominate, but one could go on bytecode size

[09:25] <timotimo> i wonder what workload i had where verification was a lot of time spent. perhaps "the empty program"

[09:25] <jnthn> But yeah, since the instrumentation has to walk the bytecode anyway...

[09:26] <jnthn> There'a a memory trade-off also iirc, because bytecode validation depends on the frame being fully deserialized and I think also creates annotation maps

[09:26] <jnthn> And just because one frame can be statically seen as referencing another doesn't mean that it will actually call it

[09:27] <jnthn> For example, CATCH blocks

[09:27] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/837620996205838336/unknown.png here's the moar heapanalyzer with its bytecode validation zones

[09:27] <jnthn> In which case we risk doing work ahead of time that we'd neve really do

[09:28] *** frost-lab joined
[09:29] <jnthn> The long tail is interesting there

[09:30] *** cog_ left
[09:30] <jnthn> I wonder what it took 9ms to validate

[09:31] <jnthn> I should really install that Tracey thing when I get to tuning up new-disp

[09:32] <jnthn> Looks pretty amazing in terms of what you can visualize and find out

[09:32] <timotimo> i'm putting in reporting for what exactly is being validated right now so we can see

[09:35] <timotimo> can't reproduce the 9 right now

[09:44] <jnthn> I guess this can be sensitive to context switches and other sources of load, or does it somehow account for that?

[09:48] <timotimo> i would have seen it if i had zoomed to the zone

[09:48] <timotimo> and i think the "self time" and "running time" and other stats also show that

[09:51] <timotimo> it could be the mainline of nqp/lib/QAST.moar takes a bit long

[09:52] <timotimo> hm, though for that i only got the name not the filename which i should have gotten if it were that file

[09:54] <timotimo> that was the last load bytecode region before that validation however

[09:55] *** domidumont joined
[09:55] <timotimo> or i have to see it like a stack

[09:58] <timotimo> ok i have the filename in it as well now

[09:59] <nwc10> patrickb: yes, your fix fixed it

[10:00] <nwc10> and I realise "most context free message so far today"

[10:00] <nwc10> oops. Azure, apt and d'oh!

[10:00] <timotimo> MASTOPS' frame with uuid 827 wins with 993 Î¼s, next up is nqp/lib/QAST.moarvm's <mainline> with 777Î¼s and then is core.c.setting.moarvm's 19141 with 766, then it drops a bit with 400 Î¼s for core setting's unit

[10:02] <timotimo> that very first one is the frame that has a boatload of locals and the code is just getcode + takeclosure + getcode + takeclosure et cetera followed by checkarity, paramnamesused, then wval + bindlex a lot, and then it sets up integer arrays by pushing const_i64_16 values into it over and over

[10:03] <timotimo> and then a hash with string keys, where integers are boxed but it's not even caching the hllboxtype_i it just gets it over and over again :D

[10:04] <timotimo> it's got 16.67k instructions in total

[10:04] <timotimo> also 866 registers

[10:05] <timotimo> wonder if anything keeps us from getting these arrays and hashes created at compile-time and properly serialized

[10:06] <nwc10> I've not used Bloaty McBloatface, but from what I've read it tells you the size of various sections. Is there any easy way to do that for MoarVM compiled bytecode files? So one can see whether a change moves stuff between sections? Or what total size the various different bytecode tags add up to?

[10:07] <timotimo> what does "bytecode tags" mean to you here?

[10:08] <timotimo> just 10.15k instructions in the <mainline> of QAST.moarvm, but it looks even more wasteful in some spaces

[10:08] <nwc10> good question. Wasn't clear. Say, how much is serialised arrays. Vs say serialised code. Except, I realise that this is a daft idea becuase everything contains everything else

[10:08] <timotimo> haha, yeah true

[10:13] *** samcv left
[10:13] *** samcv joined
[10:17] <timotimo> do we do any good on repeated findmeth with the same name on the same object (grabbed fresh with a wval each time) when every findmeth is in a different spot in a frame we only run a single time?

[10:19] <timotimo> right now our QAST.nqp ends up with a boatload of top-level calls to QAST::MASTOperations.add_core_moarop_mapping, for example, and that's a wval + decont + findmeth every time, though we could perhaps bind QAST::MASTOperations itself to a local, have the method found once up front, and call it over and over again

[10:25] <jnthn> Even better would be to build the mapping data structure at BEGIN time, but maybe something blocks us on that

[10:26] <timotimo> we currently use closures to create these core moarop mappers; serializing closures isn't a problem tho

[10:27] <timotimo> why are these operations even still there now that we have the big hash of writer subs

[10:27] <timotimo> i guess for argument count validation and such

[10:28] <jnthn> And sometimes name discrepancies, I guess

[10:29] <timotimo> that's right

[10:32] <timotimo> not just sometimes, actually kind of a lot. many related to underscores

[10:42] *** frost-lab left
[11:08] <timotimo> anyway, if these two frames are improved to rely on serialization instead of mainline execution, imagine the miliseconds this could save

[11:08] * lizmat would take any msecs saved at startup

[11:08] <timotimo> at least 1 milisecond from validation, and i don't have any measurement for how long these two mainlines take to execute by themselves

[11:08] <lizmat> where would I need to make changes?

[11:10] <timotimo> the trickier one would be in nqp's vm/moar/QAST/QASTOperationsMAST.nqp

[11:12] <timotimo> huh. the MASTOps frame that i thought was the one taking so long to validate is the big begin block that makes up the entire moarvm/lib/MAST/Ops.nqp file

[11:14] <timotimo> i don't see it get invoked by anything in the dump of MASTOps.moarvm eithegr

[11:14] <timotimo> does the frame being something else's outer cause it to be validated?

[11:15] <lizmat> things like %hll_inlinability{$hll} := {} unless nqp::existskey(%hll_inlinability, $hll);

[11:15] <lizmat> could benefit from using nqp::ifnull

[11:15] <lizmat> reducing number of lookups

[11:15] <lizmat> but I guess that's only once per op anyway

[11:16] <timotimo> that lives in add_core_moarop_mapping or so?

[11:18] <timotimo> as long as we run that code on startup a tiny improvement like that could help. if we can get it to run during compile instead, the win isn't as big

[11:22] <timotimo> i mean, the win from making it run at compile time is big, the win from using infull in that case there will not be as big

[11:27] *** zakharyas left
[11:44] *** patrickb left
[11:52] <timotimo> https://cdn.discordapp.com/attachments/557618333755768832/837657369910706237/unknown.png - guess what you can just nativecall into the TracyC functions, like ___tracy_emit_message

[11:54] <timotimo> tracy is telling me "sampling is disabled due to non-native scheduler clock. are you running under a VM?" and i don't know what that means.

[11:55] <lizmat> not running on a physical machine ?

[11:55] <lizmat> but under valgrind?  or in a container ?

[11:56] <timotimo> yeah but this is on hardware

[11:57] *** MasterDuke left
[11:57] <timotimo> no VMs that i'm aware of

[11:58] <lizmat> maybe Tracy knows something you don't ?

[11:58] <lizmat> can you actually *see* the hardware ?

[11:59] <timotimo> yeah

[11:59] <timotimo> i mean, i see the enclosure it's inside of

[12:02] *** domidumont left
[12:05] <lizmat> ok  :-)

[13:05] <nine> timotimo: the kernel can use a variety of clock sources. What does /sys/devices/system/clocksource/clocksource0/current_clocksource say about it?

[13:06] <timotimo> it says hpet

[13:06] <timotimo> High Precision Extreme Timer?

[13:06] <timotimo> the other available one is acpi_pm

[13:07] <timotimo> for masterduke, tracy's sampling worked fine, i wonder what the clock source is on that machine?

[13:15] *** Nornie28 joined
[13:19] *** Nornie28 left
[13:24] *** LizBot left
[14:07] *** domidumont joined
[14:28] <nine> on mine it's tsc

[14:30] <timotimo> Traditional Source of Clocks

[14:31] <timotimo> what clock sources are available on your machine, nine?

[14:31] <timotimo> my desktop also has tsc active and has tsc, hpet, and acpi_pm available

[14:31] <timotimo> (the system i'm working from right now is my laptop)

[14:34] <nine> tsc hpet acpi_pm

[14:47] *** zakharyas joined
[14:55] <timotimo> tracy dev points out that the flag "cap_user_time_zero" isn't set when doing perf_open, which isn't clear how to get that set, but is possibly an NYI in the kernel for my hardware perhaps?

[15:08] *** zakharyas left
[15:09] *** zakharyas joined
[16:07] *** domidumont left
[16:22] *** domidumont joined
[17:06] *** lizmat left
[17:16] *** lizmat joined
[17:18] *** domidumont left
[17:24] *** LizBot joined
[18:04] *** dogbert17 left
[18:07] *** dogbert17 joined
[18:08] *** LizBot left
[18:08] *** LizBot joined
[18:47] *** zakharyas left
[19:56] *** zakharyas joined
[20:18] *** zakharyas left
[20:32] *** cog_ joined
[20:43] *** MasterDuke joined
[20:44] <MasterDuke> timotimo: /sys/devices/system/clocksource/clocksource0/current_clocksource is tsc for me

[20:50] *** unicodable6 left
[20:50] *** tellable6 joined
[20:51] *** evalable6 joined
[20:51] *** greppable6 left
[20:51] *** releasable6 left
[20:51] *** committable6 joined
[20:52] *** shareable6 joined
[20:52] *** sourceable6 joined
[20:53] *** bisectable6 joined
[20:53] *** statisfiable6 left
[20:54] *** statisfiable6 joined
[20:55] *** unicodable6 joined
[20:56] *** tellable6 left
[20:57] *** releasable6 joined
[21:05] *** sourceable6 left
[21:05] *** benchable6 left
[21:05] *** sourceable6 joined
[21:05] *** bloatable6 left
[21:07] *** nativecallable6 joined
[21:07] *** tellable6 joined
[21:07] *** bloatable6 joined
[21:07] *** greppable6 joined
[21:25] <MasterDuke> .tell jnthn in case you missed them, some questions here https://colabti.org/irclogger/irclogger_log/raku-dev?date=2021-04-30#l53

[21:25] <tellable6> MasterDuke, I'll pass your message to jnthn

[21:49] *** evalable6 left
[21:49] *** shareable6 left
[21:49] *** statisfiable6 left
[21:49] *** bisectable6 left
[21:49] *** unicodable6 left
[21:49] *** committable6 left
[21:49] *** sourceable6 left
[21:49] *** bloatable6 left
[21:49] *** tellable6 left
[21:49] *** releasable6 left
[21:49] *** coverable6 left
[21:49] *** greppable6 left
[21:49] *** nativecallable6 left
[21:51] <MasterDuke> oh, looks like i may have figured out this azure pipeline enough to get it a bit simplified, assuming people like the changes

[21:51] *** unicodable6 joined
[21:51] *** sourceable6 joined
[21:52] *** notable6 joined
[21:52] *** greppable6 joined
[21:52] *** releasable6 joined
[21:52] *** statisfiable6 joined
[21:52] *** committable6 joined
[21:53] *** evalable6 joined
[21:53] *** tellable6 joined
[21:55] <MasterDuke> spoke a little too soon...

[22:36] *** Kaiepi left
[23:15] *** Kaiepi joined
