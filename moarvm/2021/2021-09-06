[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:18] *** tealecloud joined
[00:23] *** tealecloud left
[00:56] *** linkable6 joined
[01:00] *** frost joined
[01:42] *** tealecloud joined
[01:48] *** tealecloud left
[04:02] *** sourceable6 left
[04:02] *** bloatable6 left
[04:02] *** benchable6 left
[04:02] *** squashable6 left
[04:02] *** committable6 left
[04:02] *** releasable6 left
[04:02] *** shareable6 left
[04:02] *** quotable6 left
[04:02] *** reportable6 left
[04:02] *** unicodable6 left
[04:02] *** coverable6 left
[04:02] *** greppable6 left
[04:02] *** linkable6 left
[04:02] *** statisfiable6 left
[04:02] *** nativecallable6 left
[04:03] *** greppable6 joined
[04:04] *** nativecallable6 joined
[04:04] *** linkable6 joined
[04:04] *** shareable6 joined
[04:04] *** releasable6 joined
[04:05] *** quotable6 joined
[04:05] *** statisfiable6 joined
[04:05] *** squashable6 joined
[04:48] *** squashable6 left
[04:56] *** evalable6 joined
[05:04] *** benchable6 joined
[05:04] *** bloatable6 joined
[05:04] *** committable6 joined
[05:48] *** squashable6 joined
[06:03] *** reportable6 joined
[06:04] *** coverable6 joined
[06:04] *** unicodable6 joined
[06:04] *** sourceable6 joined
[06:22] *** squashable6 left
[08:28] *** tealecloud joined
[08:45] <Nicholas> good *, #moarvm 
[08:46] <Nicholas> so next step on new-disp is a blin run (or maybe two - new-disp and master), and then figure out how many failures are regressions on new-disp?
[08:58] <nine> Nicholas: yes
[09:10] <jnthnwrthngtn> moarning o/
[09:11] <jnthnwrthngtn> There's some args flattening bug that seems to afflict a number of the modules on new-disp; I might try and figure that out ahead of the next blin run
[09:12] <Nicholas> \o
[09:14] <dogbert11> there's also the 'lang-call cannot invoke object of type 'VMNull' belonging to no language' bug which has made a return
[09:15] <dogbert11> perehaps we can trick nine++ to take a look at that one :)
[09:15] <dogbert11> perehaps => ENOCOFFEE
[09:22] <lizmat> but I understand roast is clean now ?
[09:24] <dogbert11> lizmat: yes
[09:24] <lizmat> cool
[09:36] <jnthnwrthngtn> 1.4% of CPU cycles off CORE.setting compilation by having $*REGALLOC looked up via the QAST compiler instance instead. (Was something I hacked up over the weekend, and left callgrind with it to see what the impact was...)
[09:36] <jnthnwrthngtn> Ah, actually 1.4% of IFs, to be prefcise
[09:36] <jnthnwrthngtn> *precise
[09:39] *** evalable6 left
[09:39] *** linkable6 left
[09:40] *** linkable6 joined
[09:41] <lizmat> wow
[09:41] *** evalable6 joined
[09:47] <MasterDuke> jnthnwrthngtn: going to do the same thing with $*MAST_FRAME?
[09:58] <dogbert11> tested a few modules, that I have on my machine, under new-disp. Unsurprisingly most of them passes their tests :)
[10:00] <dogbert11> two of them have failing tests, i.e. Async::Workers and DOM::Tiny
[10:02] <dogbert11> meh, Async::Workers should be Test::Async which fails with: [Test::Async] ===SORRY!=== No registered operation handler for 'invokewithcapture'
[10:02] <dogbert11> the other one runs into 'Non-trivial multi dispatch step NYI for MultiDispatchAmbiguous'
[10:09] *** lizmat_ joined
[10:10] *** TempIRCLogger left
[10:10] *** TempIRCLogger joined
[10:13] *** lizmat left
[10:16] *** lizmat_ left
[10:16] *** lizmat joined
[10:22] *** sena_kun joined
[10:23] <jnthnwrthngtn> The invokewithcapture one is for the module to fix; it depended on an nqp::op that has gone away
[10:23] <jnthnwrthngtn> *depends
[10:24] <jnthnwrthngtn> Probably the best we can do is open an issue
[10:24] *** squashable6 joined
[10:24] <lizmat> vrurg ^^
[10:25] <sena_kun> jnthnwrthngtn, o/
[10:25] <sena_kun> if you're looking at new-disp today, I'll along the $dayjob way check some modules and filter out clear failures
[10:26] <jnthnwrthngtn> sena_kun: Do you have an example or two that failed with the flattening issue? I seem to remember that was quite a common failure mode...
[10:27] <sena_kun> Colorizable is the smallest, I believe, the other are HTML::Canvas and PDF::Content or PDF::API6, but I would look at Colorizable first
[10:35] <nine> dogbert11: any other non-standard things for reproducing the VMNull issue?
[10:38] <Geth> ¬¶ MoarVM/new-disp: 11c50b3a0a | (Jonathan Worthington)++ | src/core/args.c
[10:38] <Geth> ¬¶ MoarVM/new-disp: Allow MultiDimArray flattening args also
[10:38] <Geth> ¬¶ MoarVM/new-disp: 
[10:38] <Geth> ¬¶ MoarVM/new-disp: This happens when we flatten in a fixed dimension array.
[10:38] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/11c50b3a0a
[10:38] <jnthnwrthngtn> That fixes Colorizable and so probably the others with that error too
[10:38] <sena_kun> yay
[10:38] <sena_kun> that's awesome
[10:40] <sena_kun> Should I post broken modules I am sure? Maybe I can post 1, then it can be fixed, then 2 and so on, not to make it overwhelming.
[10:40] <lizmat> Q: if I checkout "new-disp" on rakudo, will it do the right thing when running Configure.pl ?
[10:40] <sena_kun> s/sure/sure about/
[10:41] <nine> lizmat: probably not
[10:41] <lizmat> ah too bad...  was thinking of running test-t while writing the weeklt
[10:41] <lizmat> *weekly
[10:41] <nine> You'd need to checkout new-disp in all 3 repos
[10:42] <lizmat> and then refer to each in the build?
[10:42] <dogbert11> nine: 80k nursery and 'while MVM_JIT_DISABLE=1 MVM_SPESH_NODELAY=1 ./rakudo-m -Ilib t/spec/S02-types/range.t; do :; done'
[10:43] <dogbert11> I have MVM_GC_DEBUG=0 (untouched)
[10:44] <jnthnwrthngtn> sena_kun: Well, can post a few at least
[10:44] <lizmat> tried it, didn't work indeed  :-)
[10:44] <sena_kun> jnthnwrthngtn, try AccessFacade, passes on 08, weird errors on new-disp.
[10:44] <jnthnwrthngtn> I can reproduce the DOM::Tiny one
[10:45] <jnthnwrthngtn> $ zef look AccessFacade
[10:45] <nine> dogbert11: got it in rr right after asking you :)
[10:45] <jnthnwrthngtn> ===> Searching for: AccessFacade
[10:45] <sena_kun> oops, sorry
[10:45] <jnthnwrthngtn> Failed to resolve any candidates. No reason to proceed
[10:45] <sena_kun> AccessorFacade
[10:45] <jnthnwrthngtn> Ah
[10:45] <jnthnwrthngtn> I did try :: in the middle also 
[10:47] <jnthnwrthngtn> Yeah, that fails its tests
[10:55] <dogbert11> nine: yay
[10:55] <jnthnwrthngtn> m: role P { method CALL-ME(|) { say "here" } }; class C { method m() { } does P }; C.m
[10:55] <camelia> rakudo-moar b451f89b6: ( no output )
[10:56] <nine> Darn...more than 9 hours of sleep but brane feels like the hand break is put on
[10:56] <dogbert11> nine: lack of coffee perhaps
[10:57] <nine> Nah, just recovering from yesterday's hike
[10:57] <jnthnwrthngtn> m: role P { method CALL-ME(|) { say "here" } }; multi trait_mod:<is>(Method $m, :$p!) { $m does P }; class C { method m() is p { } }; C.m
[10:57] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´here‚ê§¬ª
[10:58] <MasterDuke> lizmat: if you're using --gen-(nqp|moar), i think you can add `=new-disp` to them and it'll use that branch in those repos
[10:58] <jnthnwrthngtn> Aha, that produces no output on new-disp
[10:59] <jnthnwrthngtn> On master a CALL-ME mixed into a code object apparently wins over the default invocation behavior. Interesting.
[10:59] <nine> jnthnwrthngtn: that's how you implemented NativeCall :)
[11:01] <lizmat> MasterDuke: meh, that still finds the old nqp-m, uses that and dies
[11:01] <nine> Ok, actually there was some setinvokespec involved
[11:02] <jnthnwrthngtn> nine: Yes, but invokespec is gone and...uh...NativeCall works anyway
[11:02] <lizmat> MasterDuke: https://gist.github.com/lizmat/4f4bf55e5b774c49fe034afb86586207
[11:02] <lizmat> argh... spello
[11:02] <nine> NativeCall doesn't use CALL-ME anymore. Replacing $!do now instead
[11:02] <jnthnwrthngtn> nine: Also seems that...right :)
[11:03] <jnthnwrthngtn> So I guess in a post-invoke-spec world we should always first check for a CALL-ME
[11:03] <nine> That sounds expensive?
[11:04] <lizmat> MasterDuke: even with properly spelled branch name no luck (see updated gist)
[11:07] <MasterDuke> --force-rebuild maybe?
[11:08] <jnthnwrthngtn> nine: Dunno; this only happens when we're setting up the dispatcher; once we've set it up then its just falling out of the type guards
[11:08] <jnthnwrthngtn> nine: If we really want to avoid it we could eqaddr the .WHAT of it for some common cases
[11:09] <MasterDuke> but i just have all three repos separately checked out, so i'm not the best person to help with --gen-* settings. patrickb would know better i think
[11:09] <lizmat> looks like --force-rebuild is doing the right thing  :-)
[11:12] <nine> dogbert11: I think, we're dealing with yet another inlining issue
[11:12] <nine> And it's again in finalization handlers
[11:15] <lizmat> nine: I see Inline::Perl5 tests fail on new-disp, is that expected ?
[11:15] <nine> lizmat: no
[11:15] <lizmat> perhaps I need to update Inline::Perl5 ?
[11:15] <lizmat> ok, will get back to you on that :-)
[11:15] <nine> You need at least 0.54 (current is 0.56)
[11:16] <nine> new-disp actually uncovered 2 stupid mistakes
[11:16] <lizmat> hmmm... it claims I need to install Inline::Perl5
[11:17] <dogbert11> nine: didn't you fix a bug relating to finalization handlers recently?
[11:20] <nine> dogbert11: I did. Actually 3 bugs. MVM_frame_find_lexical_by_name was ignoring inlining entirely and both the frame walker's code parts for finding the current inlinee had problems as well
[11:20] <nine> i.e. the code path for JITed code and the one for non-JITed code
[11:22] <jnthnwrthngtn> Accessor::Facade fixed
[11:22] <sena_kun> awesome
[11:22] <sena_kun> next?
[11:23] <sena_kun> *want something netx?
[11:23] <lizmat> hmmm... trying to install Inline::Perl5 on new-disp says:
[11:23] <lizmat> ===> Failed to find dependencies: perl:from<native>
[11:23] <lizmat> Failed to resolve some missing dependencies (use e.g. --exclude="perl" to skip
[11:23] <jnthnwrthngtn> sena_kun: Sure. Well, want lunch also, but feel free to feed another one
[11:24] <lizmat> only fails I see in roast, are the Inline::Perl5 ones
[11:24] <sena_kun> we have AttrX::Mooish (horrible inf loop + leak), Scalar::History behaves the same way. Just failing ones are ClassX::StrictConstructor and Test::Base (something with "method mro is not found on a metamodel)").
[11:24] <nine> Huh... MVM_spesh_deopt_find_inactive_frame_deopt_idx is looking for a ret_offset of 428, but the closest deopt_bytecode_pos are 416 and 444
[11:25] <sena_kun> Text::Tabs is a super simple module yet it fails it's tests. Other than that I'll need to do another Blin run, but I need the infinite ones fixed for that.
[11:25] <sena_kun> s/it's/its/
[11:25] <nine> lizmat: so you still get the same errors?
[11:26] <lizmat> yes
[11:26] <lizmat> it claims Inline::Perl5 is not installed
[11:26] <lizmat> and trying to install it fails with a missing dependency
[11:26] <jnthnwrthngtn> I suspect Scalar::History will be easier to debug than AttrX::Mooish :)
[11:27] <nine> lizmat: the missing dependency message does tell you how to fix that
[11:27] <lizmat> so I should do that, is what you're saying :-)
[11:27] <nine> indeed
[11:27] <sena_kun> jnthnwrthngtn, well, if it's the same bug then yes, unless...
[11:30] <lizmat> nine: Inline::Perl5 installed and spectest clean!
[11:31] <lizmat> guess I'll be developing on the new-disp branch from now on  :-)
[11:38] <nine> lizmat: only for a short while I hope :)
[11:44] <nine> Aaah! It's finally a bug in my own code :D
[11:44] <nine> I changed MVMuint32 ret_offset = f->return_address - f->spesh_cand->body.bytecode;
[11:44] <nine> to MVMuint32 ret_offset = (f == tc->cur_frame ? *(tc->interp_cur_op) : f->return_address) - f->spesh_cand->body.bytecode;
[11:44] <nine> So for the currently executed frame, we'd use the up-to-date position when looking for the inlinee we're in.
[11:46] <nine> But tc->interp_cur_op points at the currently executing sp_getlexstatic_o which doesn't have a deopt annotation. Without that annotation we don't find it in the deopt table which is how we'd find a deopt_idx which we'd use for looking up the inlinee
[11:50] *** TempIRCLogger left
[11:51] *** TempIRCLogger joined
[11:51] <lizmat> ^^ now running on new-disp
[11:53] <dogbert11> very cool
[12:02] *** reportable6 left
[12:02] <lizmat> hmmm... --profile   ->  MoarVM panic: Need to update profiling continuation support
[12:03] <lizmat> for reference: test-t is now about 2x as slow as it is on master  (on my machine)
[12:05] *** reportable6 joined
[12:05] <nine> I think, I fixed the original bug at the wrong layer. The point of finding the deopt_idx is to then look at the deopt table to....get the position in the bytecode the inlinee was called from! So for the currently executed frame *tc->interp_cur_pos is already the answer
[12:06] <nine> jnthnwrthngtn: does this sound right? ^^^
[12:15] <Nicholas> jnthnwrthngtn: that most recent thing you fixed with CALL-ME - that doesn't have any sort of regression test in the rakudo repository?
[12:44] <jnthnwrthngtn> Nicholas: Well, I'd maybe not expect it to have on in the Rakudo repo, but indeed it means there's not a spec test for it
[12:45] <Nicholas> yes, I phrased that badly. You answered the question I should have asked. Thanks.
[12:47] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/09/06/2021-36-clean-disp/
[12:49] <nine> dogbert11: do you remember which test case triggered my first rounds of sp_getlexstatic_o/inlining fixes?
[12:55] <dogbert11> nine: you mean the VMNull messages?
[12:55] <nine> yes
[12:55] <jnthnwrthngtn> nine: I'm not sure I've enough context...why are we trying to deopt on an sp_getlexstatic_o?
[12:56] <nine> jnthnwrthngtn: we're not! But the frame walker is using deopt indexes to find the current position. And I argue that for tc->cur_frame that's just a roundabout way to find *tc->interp_cur_op, so it's better to use that directly
[12:56] <dogbert11> hmm: I can check but I think t/spec/S02-types/range.t might be one of them
[12:58] <jnthnwrthngtn> nine: Maybe, but that won't be anything interesting if we're in the JIT?
[12:58] <jnthnwrthngtn> Also I think cur_op is a complete memory address, not an offset
[12:59] <nine> jnthnwrthngtn: yes, this is only for non-JITed situations. For JITed code what we're currently doing may be quite OK. And yes, I meant *tc->interp_cur_op - spesh_cand->body.bytecode
[13:00] <nine> Basically I think https://github.com/MoarVM/MoarVM/commit/8b78433023e8a999bc80b1f36c4702f875e4922d was the wrong fix
[13:03] <jnthnwrthngtn> nine: Well, the "inactive" in MVM_spesh_deopt_find_inactive_frame_deopt_idx means "not currently executing"
[13:03] <jnthnwrthngtn> Thus why it only cares for return address
[13:03] <nine> Or rather it was the right fix, but for a different problem. It does fix deopting, but not the frame walker
[13:03] <jnthnwrthngtn> So if anything we should have an assert in there that it's not asking about the currently executing frame.
[13:04] <nine> Hah...I just did exactly that. And it the assert triggers immediately.
[13:05] *** linkable6 left
[13:05] *** evalable6 left
[13:05] <nine> MVM_frame_try_return -> remove_one_frame -> MVM_callstack_unwind_frame -> MVM_spesh_deopt_during_unwind -> MVM_spesh_deopt_find_inactive_frame_deopt_idx -> assert -> abort
[13:06] *** linkable6 joined
[13:06] <jnthnwrthngtn> oh hah, right, that's too simplistic
[13:07] <jnthnwrthngtn> That case is on the transition point from inactive to active (e.g. when the frame was inactive but we're now returning into it)
[13:07] *** evalable6 joined
[13:22] *** frost left
[13:31] <dogbert11> jnthnwrthngtn: is Scalar::History supposed to be working now?
[13:32] <jnthnwrthngtn> dogbert11: Passes tests for me with the latest Rakudo push
[13:33] <dogbert11> thx: I must have done something wrong then because it hangs for me :(
[13:34] * sena_kun builds to test
[13:34] <dogbert11> jnthnwrthngtn: I didn't have your latest latest fix :)
[13:36] <sena_kun> confirmed
[13:37] <dogbert11> confirmed here as well, jnthnwrthngtn++
[13:38] <sena_kun> awesome, AttrX::Mooish is fixed as well
[13:39] <sena_kun> oki, I am starting another Blin run. Other confirmed cases to look at while the test goes are: Test::Base, ClassX::StrictConstructor, Text::Tabs.
[13:40] <sena_kun> if those are not enough then PDF (Use of uninitialized value of type <anon> in numeric context) and maybe PDF::Class.
[13:41] <dogbert11> Text::Tabs is written by non other than ...
[13:41] <sena_kun> :)
[13:42] <sena_kun> I think somebody rewrote it completely along the way
[13:42] <sena_kun> but were too modest to claim authorship
[13:42] <sena_kun> hmm, I need to do bumps
[13:44] <jnthnwrthngtn> sena_kun: I think I know what's wrong with ClassX::StructConstrictor, working on that one now
[13:44] <jnthnwrthngtn> Uh, StrictConstructor :D
[13:44] <sena_kun> :)
[13:44] <jnthnwrthngtn> Too much C...
[13:45] <sena_kun> done bump commits, please be careful...
[13:45] <Geth> ¬¶ MoarVM/new-disp: 1dbb222938 | (Stefan Seifert)++ | src/spesh/frame_walker.c
[13:45] <Geth> ¬¶ MoarVM/new-disp: Fix frame walker still using wrong address for inline check if not JITed
[13:45] <Geth> ¬¶ MoarVM/new-disp: 
[13:45] <Geth> ¬¶ MoarVM/new-disp: While since commit 8b78433023e8a99 MVM_spesh_deopt_find_inactive_frame_deopt_idx
[13:45] <Geth> ¬¶ MoarVM/new-disp: uses the actual current position to find the deopt_idx for the currently
[13:45] <Geth> ¬¶ MoarVM/new-disp: executing frame, this position does not necessarily have to be at a deopt point.
[13:45] <Geth> ¬¶ MoarVM/new-disp: Thus it can still happen that we don't find a deopt_idx.
[13:45] <Geth> ¬¶ MoarVM/new-disp: 
[13:45] <Geth> ¬¶ MoarVM/new-disp: <‚Ä¶commit message has 7 more lines‚Ä¶>
[13:45] <Geth> ¬¶ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1dbb222938
[13:53] <vrurg> Test::Async is workarounding broken wrap. Can be ignored for now.
[13:53] <sena_kun> ‚è≥ 105 out of 1688 modules processed
[13:54] <nine> dogbert11: lang-call cannot invoke object of type 'VMNull' should really be gone now
[13:55] <dogbert11> nine++ very cool
[14:01] <jnthnwrthngtn> Seems I've got ClassX::StrictConstructor fixed (locally, spectesting)
[14:03] <jnthnwrthngtn> Test::Base has a different failure mode alas
[14:03] <sena_kun> well, I did not say they have a common reason
[14:06] <jnthnwrthngtn> Ah, then I misunderstood (thought they both complained about mro)
[14:07] <sena_kun> I ran out of the modules which are grouped by now, some you fixed and some were already fixed when I tried them out, so now it's a more precise sniping.
[14:07] <sena_kun> ‚è≥ 1037 out of 1688 modules processed
[14:10] <sena_kun> ‚è≥ 1136 out of 1688 modules processed
[14:10] <sena_kun> very nice, I wonder if it's really faster this time
[14:11] <jnthnwrthngtn> m: lass C { method m() { } }; role R { method m() { } }; sub c() { for ^10_000_000 { C.m }; say now - ENTER now; }; sub r() { for ^10_000_000 { R.m }; say now - ENTER now; }; c; r;
[14:11] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´5===SORRY!5===‚ê§Undeclared name:‚ê§    C used at line 1‚ê§Undeclared routine:‚ê§    lass used at line 1. Did you mean 'last'?‚ê§‚ê§Other potential difficulties:‚ê§    Useless declaration of a has-scoped method in mainline (did you mean 'my method‚Ä¶¬ª
[14:11] <jnthnwrthngtn> m: class C { method m() { } }; role R { method m() { } }; sub c() { for ^10_000_000 { C.m }; say now - ENTER now; }; sub r() { for ^10_000_000 { R.m }; say now - ENTER now; }; c; r;
[14:11] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´0.097447874‚ê§10.442654768‚ê§¬ª
[14:11] <jnthnwrthngtn> Wowser, that's a big difference :)
[14:12] <sena_kun> indeed
[14:12] <jnthnwrthngtn> I accidentally just implemented the stuff to optimize such calls using the dispatch mechanism
[14:12] <jnthnwrthngtn> I mean, I thought I needed to implement it to fix a bug, then realized now, I'd misunderstood the bug. :)
[14:13] <jnthnwrthngtn> m: say 2.77 / 1.89
[14:13] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´1.465608‚ê§¬ª
[14:13] <jnthnwrthngtn> m: say 10.4 / 0.0974
[14:13] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´106.776181‚ê§¬ª
[14:13] <timo> oh my, what's this
[14:14] <jnthnwrthngtn> No spesh linking or inlining yet on new-disp, but the ratio is a lot nicer :)
[14:14] <jnthnwrthngtn> (And should stay this nice after we can spesh link and inline, I expect)
[14:14] <timo> ah i see
[14:14] <timo> on new-disp it's only 1.45 times slower, on master it's 106 times slower
[14:15] <timo> to call a method on a punned role
[14:17] <jnthnwrthngtn> Yes
[14:17] <jnthnwrthngtn> Well, yes-ish
[14:17] <jnthnwrthngtn> Because we're calling an empty method so it inlines away to nothing
[14:18] <jnthnwrthngtn> But with new-disp we'd be able to inline away the method on the punned role also
[14:18] <timo> ah, hehe.
[14:19] <timo> so we're still emitting noticeably more guards or sometihng liek that
[14:19] <timo> no, scratch that
[14:21] <timo> you think there's anything much we can do for subs and methods whose bodies look like { other-sub($arg, $narg, $farg) }; ?
[14:22] *** evalable6 left
[14:22] *** linkable6 left
[14:22] <timo> if we inline that, the dispatcher that does the other-sub call will also be there i guess
[14:22] *** linkable6 joined
[14:24] <jnthnwrthngtn> I think inlining mostly will take care of that?
[14:24] *** evalable6 joined
[14:33] <timo> it'll also be super good at not-juggling-the-arguments?
[14:33] <timo> well, not actually important
[14:33] <timo> carry on
[14:35] <sena_kun> 87 modules to test, that's the longest part to wait for... from the 1601 tested, 12 modules (including the ones I named) are broken so far.
[14:44] <jnthnwrthngtn> Seems Text::Tabs was a missing guard
[14:44] <jnthnwrthngtn> Spectesting a fix, but should have that one nailed
[14:44] <sena_kun> is Test::Base fixed locally or not yet?
[14:45] <jnthnwrthngtn> No
[14:45] <sena_kun> roger
[14:46] <jnthnwrthngtn> I did repro it, but wasn't immediately sure what's going on
[14:47] <jnthnwrthngtn> Yup, spectest is fine, Text::Tabs is fixed
[14:48] <jnthnwrthngtn> Weird failure more. Hm.
[14:49] <sena_kun> yay
[14:52] <jnthnwrthngtn> oh, Test::Base is...subtle. I dunno if/how we can fix that.
[14:53] <jnthnwrthngtn> method FALLBACK($name) {
[14:53] <jnthnwrthngtn>     ::?CLASS.^add_method($name, method () { $!data{$name} });
[14:53] <jnthnwrthngtn>     return $!data{$name};
[14:53] <jnthnwrthngtn> }
[14:53] <sena_kun> ‚è≥ 1663 out of 1688 modules processed
[14:54] <jnthnwrthngtn> It adds a method to the class. But the callsite is already linked to FALLBACK by that point.
[14:54] <jnthnwrthngtn> So the next time around it cals the method again
[14:54] <jnthnwrthngtn> *calls
[14:54] <jnthnwrthngtn> The FALLBACK method again, that is. And tries to add a method of the same name again.
[14:55] <jnthnwrthngtn> So it's relying on an implementation detail of how method caching previously worked. I wonder if it's alone in that.
[14:55] <jnthnwrthngtn> greppable6: FALLBACK
[14:55] <greppable6> jnthnwrthngtn, 104 lines, 31 modules: https://gist.github.com/f02ce6de48ffcc52eaad545f2cd23ce1
[14:56] <jnthnwrthngtn> greppable6: method FALLBACK
[14:56] <greppable6> jnthnwrthngtn, 56 lines, 28 modules: https://gist.github.com/2de04fca1d92b9719ec6990a6feaa36c
[14:58] <jnthnwrthngtn> Inline::Perl5 sorta does the same trick except it uses a mixin, forcing a type change, and thus meaning the inline cache entry won't go for the FALLBACK the next time: https://github.com/lizmat/raku-all-modules/blob/1a21efff55918653216f6cd745fad8fa76b945e9/cpan/NINE/Inline-Perl5/lib/Inline/Perl5/Object.pm6#L32
[14:58] <nine> Oh, I thought ^add_method isn't allowed after ^compose.
[14:59] <nine> Actually that mixin trick shouldn't even be in use anymore. Will have to test if there's some weird use case left.
[14:59] <nine> Nowadays https://github.com/niner/Inline-Perl5/blob/master/lib/Inline/Perl5/ClassHOW.pm6 is the work horse
[15:01] <jnthnwrthngtn> nine: Well, it sure ain't if you re-compose
[15:01] <jnthnwrthngtn> uh, if you don't re-compose
[15:01] <jnthnwrthngtn> But that won't help here either without some significant effort
[15:02] <jnthnwrthngtn> It seems it's the only module that's doing this
[15:02] <jnthnwrthngtn> And best of all, the fix is to delete a line of code, unless it actually wants the methods added for introspection reasons too
[15:02] <dogbert11> jnthnwrthngtn: are you talking about Text::Tabs?
[15:04] <jnthnwrthngtn> No, Test::base
[15:04] <sena_kun> dogbert11, Test::Base, tabs are fixed already
[15:04] <jnthnwrthngtn> I think Test::Base goes on the "send a PR" list
[15:05] <dogbert11> ah, I got confused
[15:05] <jnthnwrthngtn> sena_kun: Did AttrX::Mooish start passing, or just no longer eat all the memory?
[15:05] <sena_kun> jnthnwrthngtn, it passes fine for me
[15:06] <sena_kun> jnthnwrthngtn, do you want something next?
[15:06] <jnthnwrthngtn> Sure
[15:06] <sena_kun> jnthnwrthngtn, I think you reproduced DOM::Tiny, right?
[15:07] <jnthnwrthngtn> That one I still have to look at
[15:07] <jnthnwrthngtn> I thought I knew what it was, but then it wasn't so clear...
[15:07] <nine> jnthnwrthngtn: I bet the ^add_method trick is only for the speedup (which used to be substantial)
[15:08] <jnthnwrthngtn> nine: It may sorta still be, but we can rewrite the args directly to FALLBACK with the dispatcher :)
[15:08] <jnthnwrthngtn> I don't think I did that yet
[15:08] <sena_kun> well, this one is on the list. others to try are maybe Audio::Liquidsoap (typecheck failed to bind), hide-methods, Pretty::Table.
[15:09] <jnthnwrthngtn> The middle one of those sounds scary :)
[15:09] *** brrt joined
[15:09] <brrt> \o
[15:09] <tellable6> 2021-08-31T09:39:17Z #moarvm <Nicholas> brrt Pyston (finally) seems to have solved its "how do we monetise this?" problem: https://blog.pyston.org/2021/08/30/pyston-team-joins-anaconda/ https://www.anaconda.com/blog/pyston-team-joins-anaconda
[15:09] <sena_kun> well, lizmat++ wrote it, so it is small, at the very least, less golfing
[15:11] <jnthnwrthngtn> Pretty::Table I can repro. Hm.
[15:13] <sena_kun> Cro::WebApp is broken as well, if you fancy. :)
[15:13] <jnthnwrthngtn> Oh? What failure mode?
[15:13] <jnthnwrthngtn> And does this mean the rest of Cro is OK? :)
[15:13] <sena_kun> Type check failed in assignment to $!path; expected type Path cannot be itself (perhaps Nil was assigned to a :D which had no default?)
[15:14] <sena_kun> in a test for forms
[15:14] <sena_kun> rest of the Cro - not sure about HTTP, it fails but I have no idea if because of a flapper or not.
[15:14] <sena_kun> ah no
[15:14] <sena_kun> Type check failed in assignment to $!path; expected type Path cannot be itself (perhaps Nil was assigned to a :D which had no default?) 
[15:15] <sena_kun> Type check failed in assignment to $!path; expected type Path cannot be itself (perhaps Nil was assigned to a :D which had no default?) 
[15:15] <sena_kun> in cookies handling
[15:15] <sena_kun> so it's something related, I suspect
[15:16] <sena_kun> so we are at about 30 modules. in fact, less, maybe around 22-25.
[15:17] <brrt> .tell Nicholas question is, who is making money from open source perl...
[15:17] <tellable6> brrt, I'll pass your message to Nicholas
[15:17] <brrt> let alone raku
[15:17] <brrt> ohai jnthnwrthngtn :-P 
[15:27] <nine> "New type Stash for Perl6::Metamodel::PackageHOW is not a mixin type" when loading a module seems to be the only (reproducible) failure in our Cro-based applications at work
[15:30] <nine> And that went away after removing .precomp directories...
[15:34] <Nicholas> brrt: I don't think that many folks are making money from open source *anything* (see ActiveState trying to encourage firms to take up the offer of long term Python 2.7 support) - at least for "open source you install locally to your own systems"
[15:34] <tellable6> 2021-09-06T15:17:21Z #moarvm <brrt> Nicholas question is, who is making money from open source perl...
[15:38] <brrt> yeah, I think that's accurate these day s
[16:03] <jnthnwrthngtn> o/ brrt 
[16:07] *** brrt left
[16:07] <jnthnwrthngtn> m: subset S where ($_ ~~ <a b c> || die); say "a" ~~ S
[16:07] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´Died‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[16:08] <jnthnwrthngtn> m: enum e <a b c>; subset S where ($_ ~~ e || die); say a ~~ S; say S ~~ S
[16:08] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´True‚ê§True‚ê§¬ª
[16:16] <jnthnwrthngtn> Pretty::Table is fixed
[16:27] <sena_kun> yay
[16:27] <sena_kun> something else or hide-methods time?
[16:31] <jnthnwrthngtn> I'm looking at hide-methods now. Trying to understand how/why the test would pass on master :)
[16:31] <timo> "how did this ever work" time
[16:42] <jnthnwrthngtn> I missed something important in the test
[16:42] <jnthnwrthngtn> So it's OK, I just...need to figure out the bug
[16:42] <jnthnwrthngtn> It feels like "missing guard" but I can't imagine where
[16:42] <timo> well it could also be wrngly removed guard
[16:46] <jnthnwrthngtn> oh
[16:46] <jnthnwrthngtn> It's probably 'cus it's also playing "add methods at runtime" tricks
[16:48] <jnthnwrthngtn> Yeah, I see.
[16:50] <nine> At least it composes ;)
[16:51] <jnthnwrthngtn> It does
[16:51] <jnthnwrthngtn> The trouble is that if we already reoslved a method to one in a parent at a callsite, then it won't be reevaluated later
[16:52] <jnthnwrthngtn> This policy is largely OK for augment
[16:52] <jnthnwrthngtn> (So long as it happens at module load times)
[16:52] <jnthnwrthngtn> But there's not yet an invalidation strategy
[17:06] <sena_kun> really not sure if I can suggest anything simpler...
[17:06] <sena_kun> except Audio:: one
[17:06] <jnthnwrthngtn> I suspect that needs a native dep
[17:08] <jnthnwrthngtn> DOM::Tiny seems just an NYI in the multi dispatcher
[17:08] <jnthnwrthngtn> Just compiling an attmept at it
[17:09] <sena_kun> the rest are basically metamodel-related ones (each need a check if it's a bug or a reliance on internals), Cro failures, PDF-related failures (that's deep).
[17:10] <jnthnwrthngtn> Yeah, kinda hoping some of the other fixes might nail the PDF one
[17:11] <jnthnwrthngtn> Seems I have a working fix for DOM::Tiny
[17:11] <sena_kun> wow
[17:11] <jnthnwrthngtn> I've lost count of how many I've fixed today :)
[17:11] <sena_kun> IIUC PDF ones have a couple of different issues exposed, so that's pretty entangled
[17:11] <sena_kun> a lot
[17:11] <[Coke]> Do these fixes need spec tests?
[17:12] <jnthnwrthngtn> [Coke]: Most of them probably do, yes
[17:13] <jnthnwrthngtn> Well, or at least, we'd know about the issues sooner
[17:14] <jnthnwrthngtn> Fix for DOM::Tiny pushed
[17:14] <jnthnwrthngtn> sena_kun: Which Cro things have failures?
[17:16] <sena_kun> jnthnwrthngtn, Cro::HTTP and Cro::WebApp. The failure mode is very similar (the same exception, but in different places), so maybe better to narrow down the HTTP one and then check if it fixes the WebApp.
[17:16] <jnthnwrthngtn> Makes sense, thanks
[17:16] <jnthnwrthngtn> Though...hmm, was it something involving a subset type
[17:16] <sena_kun> As for what ones were fixed today: Colorizable, AccessorFacade, DOM::Tiny, AttrX::Mooish, Scalar::History, ClassX::StrictConstructor, Test::Base, Text::Tabs, Pretty::Table
[17:17] <sena_kun> jnthnwrthngtn, Type check failed in assignment to $!path; expected type Path cannot be itself (perhaps Nil was assigned to a :D which had no default?)
[17:17] <jnthnwrthngtn> Not bad for a day when I woke up and felt rotten enough that I wondered if I'd get anything done at all...
[17:18] <sena_kun> in submethod BUILD at /mnt/data/pakku/.cache/Cro-HTTP/Cro-HTTP-0.8.5-JonathanWorthingtonjnthn@jnthn.net-/lib/Cro/HTTP/Cookie.pm6 (Cro::HTTP::Cookie) line 138
[17:18] <sena_kun> in block  at t/http-session-persistent.t line 91 
[17:18] <sena_kun> ^ here is the test
[17:18] <sena_kun> jnthnwrthngtn, yes, that's an outstanding pace
[17:19] <sena_kun> hmm, I'll also test out if Template::Anti and Oddmuse6 were fixed with the same fix as DOM::Tiny, this will mean that 11 modules in a single day were fixed...
[17:21] <jnthnwrthngtn> Cro::HTTP passes
[17:21] <jnthnwrthngtn> I think it was the same issue that afflicted Pretty::Table
[17:22] <sena_kun> interesting
[17:22] <sena_kun> can you try WebApp then?
[17:22] <jnthnwrthngtn> Yeah, doing so
[17:22] <sena_kun> the test is `t/form-router-integration.t`
[17:25] <jnthnwrthngtn> It passes
[17:26] <sena_kun> that's 13 modules then. Template::Anti passes, so 14 and...
[17:26] <sena_kun> hmm, I won't check Oddmuse6, but let's assume 15.
[17:26] <sena_kun> jnthnwrthngtn, time for some rest?
[17:27] <jnthnwrthngtn> Yeah, I think so :)
[17:28] <sena_kun> jnthnwrthngtn, you deserve plenty
[17:30] <jnthnwrthngtn> Need a day with a clear head to finish up the spesh linking / inlining work so we get much of the perf back, though I fear tomorrow shall not be that day.
[17:30] <sena_kun> indeed
[17:30] <sena_kun> d'oh, I probably should have saved some easier ones for tomorrow. :/
[17:30] <sena_kun> OTOH not sure if you'll work tomorrow
[17:31] <jnthnwrthngtn> Dunno, we'll see.
[17:31] <jnthnwrthngtn> afk for a bit
[17:32] <jnthnwrthngtn> Thanks for the feed of things to work on :)
[17:33] *** sena_kun left
[17:37] *** tealecloud left
[18:02] *** reportable6 left
[18:05] *** tealecloud joined
[18:10] *** tealecloud left
[18:45] <Nicholas> jnthnwrthngtn: after your last commit, is it still possible to reach that NYI failure? (Is this a fuzzing challenge?)
[18:57] *** tealecloud joined
[18:59] <MasterDuke> timo: https://www.phoronix.com/scan.php?page=news_item&px=Notcurses-2.4 seems like the sort of thing you'd be interested in
[19:01] <timo> this "sexblitter" has only half the vertical resolution of sixel, what a shame
[19:01] <timo> i forget how many pixels per cell it has in width
[19:02] *** tealecloud left
[19:04] *** reportable6 joined
[19:08] <timo> is that first demo video meant to be played on two screens side-by-side?
[19:09] <MasterDuke> i think so
[19:09] <MasterDuke> honestly i wasn't a huge fan of the demo video
[19:16] <timo> " That's not a TUI; it's a slow and inflexible GUI. Many terminal emulators don't support Sixel. Sixel doesn't work well with mouse selection. Sixel has a limited color palette. With that said, both Sixel and the Kitty bitmap protocol are well-supported."
[19:38] *** TempIRCLogger left
[19:38] *** TempIRCLogger joined
[19:57] *** tealecloud joined
[20:18] <MasterDuke> hm, i've got some more diagnostic info about what's going on with this gc'ed mutex, but haven't figured out exactly why the source of the problem is happening
[20:19] <MasterDuke> so my stack of now two ex_release_mutexes seems to be working fine
[20:19] <MasterDuke> i see one being set in MVM_load_bytecode, then a second in prepare_and_verify_static_frame, then a clear in prepare_and_verify_static_frame and a clear in MVM_load_bytecode
[20:23] <MasterDuke> however, between the the last time that happens and the panic, in prepare_and_verify_static_frame there's an additional set / clear and then a release
[20:26] <MasterDuke> but no MVM_load_bytecode between that release and the final release before the panic
[20:34] <MasterDuke> oh, https://gist.github.com/MasterDuke17/33f0c4fe6973d51ccce349f05126dfe3 is an interesting backtrace
[20:42] <timo> i assume you turned off jit so backtraces don't go wacky?
[20:43] <MasterDuke> yeah
[20:50] <timo> ah, hehe
[20:50] <timo> the exception is being thrown, then caught, and the chandler hasn't run yet, so it now has to be verified as well
[20:50] <timo> this might even be able to infinitely loop?
[20:51] <timo> if the handler is also the target for the exception thrown by the handler not verifying correctly?
[20:52] <MasterDuke> this is the example with YAMLish and EVAL that ends in an MVM_panic: tried to gc a locked mutex
[20:53] *** vrurg left
[20:53] <MasterDuke> so i think what i expected to happen is set in MVM_load_bytecode, set in prepare_and_verify_static_frame, then the exception and both be released
[20:54] <MasterDuke> but that's not what's happening
[20:55] <timo> i guess the mutexes are cleared when the stack is unrolled, so they would still be held while the handler runs
[20:56] <jnthnwrthngtn> Nicholas: Should be impossible.
[20:56] <MasterDuke> because before the panic, it's set in MVM_load_bytecode, set in prepare_and_verify_static_frame, clear in prepare_and_verify_static_frame, clear in MVM_load_bytecode. then a bunch of other code, set in prepare_and_verify_static_frame, exception, release
[20:57] <MasterDuke> but the mutex from MVM_load_bytecode wasn't set again, so it doesn't get released
[20:59] *** vrurg joined
[21:04] <timo> is the problem not that it's two levels deep?
[21:05] *** vrurg left
[21:05] *** vrurg joined
[21:27] *** tealecloud left
[21:39] <MasterDuke> jnthnwrthngtn: nice, measured the effect of those $*MAST_FRAME commits?
[21:40] <MasterDuke> timo: i think yes and no
[21:40] <MasterDuke> well, maybe more no than yes
[21:41] <MasterDuke> i guess it depends on what you mean by levels
[21:42] <MasterDuke> so it's in prepare_and_verify_static_frame twice in that backtrace, yeah. but the panic happens later
[21:44] <timo> right, when the stack gets unwound after the handler has run?
[21:45] <timo> and the inner verify function has set some stuff and overwrote the outer one?
[21:45] <timo> and on the way back, the data is bogus?
[21:46] <MasterDuke> no, data is fine
[21:47] <MasterDuke> there's just a locked mutex being gc'ed because of the exception
[21:47] <MasterDuke> that wasn't set in ex_release
[22:42] <jnthnwrthngtn> MasterDuke: valgrind says around 2 billion less IFs
[22:42] <jnthnwrthngtn> So I guess 0.6% off or so
[22:43] <MasterDuke> cool beans
[22:43] <jnthnwrthngtn> I think $*REGALLOC was going to be the big one both in terms of frequency but also because it leaves the cache slots free for other things
[22:44] <jnthnwrthngtn> There's still some streamlining to do around producing callsites though
[22:47] <jnthnwrthngtn> We're pretty much tied with master at this point for CORE.setting compilation total time (a tad slower on parse, winning it back elsewhere)
[22:48] <jnthnwrthngtn> This is good in the sense that there's still plenty of optimization opportunities to go.
[22:48] *** linkable6 left
[22:48] *** evalable6 left
[22:50] *** linkable6 joined
[22:50] <MasterDuke> nice. i'm guessing really big wins at parse are only going to come from an nqp nfa/regex re-write?
[22:51] <MasterDuke> i.e., new-disp will help everything, but it's not a silver bullet for parse by itself?
[22:51] <jnthnwrthngtn> Indeed
[22:55] <jnthnwrthngtn> I think there'll be some ways new-disp will be able to help us optimize regex performance.
[22:56] <jnthnwrthngtn> Well, especially grammars
[22:57] <jnthnwrthngtn> But we'll need a re-work of NFAs and how we use them 
[23:03] <MasterDuke> i keep flirting with the idea of trying to start doing something in that area, but i feel that just blindly making changes and hoping for the best (my preferred method of jumping into a codebase) isn't going to work, and some theory and concrete plans are going to be required
[23:10] <jnthnwrthngtn> For sure
[23:10] <jnthnwrthngtn> And before that deciding what problems we're aiming to solve with it
[23:18] <timo> my brain is still incapable of coming up with the right peg to hang a "this regex should be a simple sub instead" feature of the optimizer
[23:23] *** MasterDuke left
[23:24] <jnthnwrthngtn> I think it'll be easier in RakuAST
[23:43] <timo> ah, makes sense
[23:44] <timo> you may have told me this already at some point in the past
[23:49] *** evalable6 joined
