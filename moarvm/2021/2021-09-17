[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:17] *** MasterDuke47 joined
[00:23] <MasterDuke47> all the the current leaks shown by `valgrind --leak-check=full raku --full-cleanup -e ''` are from https://github.com/MoarVM/MoarVM/blob/new-disp/src/disp/program.c#L2323
[01:17] *** linkable6 left
[01:20] *** linkable6 joined
[01:20] <timo> https://gist.github.com/timo/6063038e9518a0cce8948a0688bdd176 - look at all these "set" instructions that helpfully come with deopt point annotations
[01:26] <timo> (put the rest of the spesh log piece in there as well)
[02:04] *** vrurg joined
[02:09] <MasterDuke47> timo: what's the code? i see a bunch of missing *_n templates
[02:16] *** vrurg left
[02:21] <MasterDuke47> huh, why don't we a div template expression op?
[02:49] *** evalable6 joined
[03:19] *** frost joined
[03:31] *** frost left
[04:28] *** vrurg joined
[04:41] *** vrurg_ joined
[04:41] *** vrurg left
[05:40] *** vrurg_ left
[05:41] *** vrurg joined
[05:46] *** vrurg left
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:07] <Nicholas> I saw the exact same failure as timo on a run with the commit 1 *before* timo's
[06:07] <Nicholas> good *, #moarvm
[06:12] *** vrurg joined
[06:27] <Nicholas> .tell [Coke] ASAN is very excited by MoarVM/jit-vla (and I also spot that there's no free() after the loop). Hopefully I'll spot the problem before you read this.
[06:27] <tellable6> Nicholas, I'll pass your message to [Coke]
[06:28] *** vrurg left
[06:29] *** Kaiepi left
[06:40] *** vrurg joined
[06:45] *** vrurg left
[06:56] *** vrurg joined
[07:02] *** vrurg left
[07:05] *** lizmat left
[07:05] *** lizmat joined
[07:13] *** vrurg joined
[07:20] *** Kaiepi joined
[07:25] *** vrurg left
[07:34] *** patrickb joined
[07:38] *** vrurg joined
[07:40] *** patrickz joined
[07:41] *** patrickb left
[07:43] *** vrurg left
[07:52] <Nicholas> jnthnwrthngtn: ebfd4d5d6e (Jonathan Worthington 2021-09-10 18:31:56 +0200 705)         MVMint32 operands[MAX(2, ins->info->num_operands)]; /* At least 2 for inc_i hack */
[07:52] <Nicholas> Oh, I didn't manage to highlight any of that
[07:53] <Nicholas> surely "at least 2" implies MIN(2, ins->info->num_operands) ?
[07:54] <Nicholas> oh, pick the maxiumum...
[07:55] <Nicholas> anyway, I'm suspicious that the bug is exposed by the branch, rather than being on the branch.
[07:58] <Nicholas> clearly the coffee is weak today...
[08:08] <Nicholas> pointer arithmetic, etc ... - missing multiplying by sizeof(MVMint32) in the malloc
[08:52] *** RakuIRCLogger left
[08:52] *** RakuIRCLogger joined
[09:20] <Geth> Â¦ MoarVM/jit-vla-v2: fef6205f49 | Coke++ (committed by Nicholas Clark) | src/jit/expr.c
[09:20] <Geth> Â¦ MoarVM/jit-vla-v2: Don't use Variable Length Arrays, as MSVC forbids them.
[09:20] <Geth> Â¦ MoarVM/jit-vla-v2: 
[09:20] <Geth> Â¦ MoarVM/jit-vla-v2: Instead of allocating each time through the loop, keep a small array to
[09:20] <Geth> Â¦ MoarVM/jit-vla-v2: reuse each time through the loop. Expand the size of the array when
[09:20] <Geth> Â¦ MoarVM/jit-vla-v2: necessary.
[09:20] <Geth> Â¦ MoarVM/jit-vla-v2: review: https://github.com/MoarVM/MoarVM/commit/fef6205f49
[09:39] *** vrurg joined
[09:43] *** vrurg left
[09:44] *** vrurg joined
[09:49] *** vrurg left
[09:56] <jnthnwrthngtn> moarning o/
[09:58] <Nicholas> \o
[10:26] *** vrurg joined
[10:31] *** vrurg left
[10:36] <Geth> Â¦ MoarVM/jit-vla-v2: 088bc9cd96 | (Nicholas Clark)++ | src/jit/expr.c
[10:36] <Geth> Â¦ MoarVM/jit-vla-v2: Use the FSA instead of malloc in `MVM_jit_expr_tree_build`
[10:36] <Geth> Â¦ MoarVM/jit-vla-v2: 
[10:36] <Geth> Â¦ MoarVM/jit-vla-v2: The Fixed Size Allocator should be slightly faster than malloc for the
[10:36] <Geth> Â¦ MoarVM/jit-vla-v2: small allocations we need, and possibly much faster than free, because we
[10:36] <Geth> Â¦ MoarVM/jit-vla-v2: know the size of the memory we are deallocating.
[10:36] <Geth> Â¦ MoarVM/jit-vla-v2: review: https://github.com/MoarVM/MoarVM/commit/088bc9cd96
[10:38] <dogbert17> good morning
[10:38] <Geth> Â¦ MoarVM: nwc10++ created pull request #1542: Convert the use of a Variable Length Array to a regular allocation
[10:38] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1542
[10:39] <dogbert17> it seems as if the error in t/spec/S06-advanced/callframe.t is caused by https://github.com/MoarVM/MoarVM/commit/e3c6d39dcd4f530b572494b24f5812c059a8ce88
[10:43] *** vrurg joined
[10:52] <jnthnwrthngtn> dogbert17: Is that one OK under nodelay/blocking on master also?
[10:54] *** vrurg left
[11:12] <dogbert17> jnthnwrthngtn: as far as I can tell yes
[11:25] *** frost joined
[11:30] *** celo_duro joined
[11:31] <celo_duro> Nicholas: msvc doesnâ€™t support alloca?
[11:33] <celo_duro> It compiles to a sum and a subtraction on the stack pointer
[11:35] <celo_duro> or maybe, depending on optimization levels, not even that: it compiles to nothing.
[11:36] *** celo_duro left
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:08] <Nicholas> jnthnwrthngtn: we're already using alloca() left right and centre, (it seems), without problems.
[12:08] <Nicholas> Should MoarVM/jit-vla-v2 just be ditched, and a "v3" appear with alloca?
[12:19] *** brrt joined
[12:19] <jnthnwrthngtn> Nicholas: That could also work, yes
[12:20] <jnthnwrthngtn> And avoids having to free
[12:20] <Nicholas> I think it would be better. For that reason :-)
[12:20] <Nicholas> need to go AFK, but will have a go at it soon.
[12:40] <dogbert17> I have now run t/spec/S06-advanced/callframe.t om master with MVM_SPESH_NODELAY=1 and MVM_SPESH_BLOCKING=1 for an hour, no failures
[12:50] *** vrurg joined
[12:54] <dogbert17> it seems so be this specific change: https://github.com/MoarVM/MoarVM/commit/e3c6d39dcd4f530b572494b24f5812c059a8ce88#diff-c2b67b30422b6bd3c2735cc18f8a5d46b283be1d115437c2ba49805ae9611ad4L551-R561
[12:55] *** vrurg left
[12:55] <dogbert17> reverting that seemingly fixes the problem
[12:55] *** [Coke] joined
[12:56] <timo> jnthnwrthngtn: how do you currently deal with reading spesh logs? especially the pretty-huge registers / facts section and it being so far away from the BBs?
[12:56] <timo> do you have like a vertical split where you independently scroll?
[12:56] <[Coke]> Nicholas: thanks for fixing up my WIP, appreciate it.
[12:56] <tellable6> 2021-09-17T06:27:13Z #moarvm <Nicholas> [Coke] ASAN is very excited by MoarVM/jit-vla (and I also spot that there's no free() after the loop). Hopefully I'll spot the problem before you read this.
[12:57] <[Coke]> and I think you did! thanks.
[12:58] <Nicholas> I did. Eventually. You failed to multiply by sizeof(MVMuint32)
[12:58] <Nicholas> But *eventually*. It hid from us both for quite a while.
[12:58] <[Coke]> Nicholas: this is because I am not a C programmer. I had only committed it to a branch so I could easily do a full build from rakudo and test it out.
[12:59] <[Coke]> Sorry to drag you in early, but glad you found it!
[12:59] <[Coke]> re-confirming that it's faster to commit (say) something and wrong and get a correction! :)
[12:59] <[Coke]> s/and wrong/wrong/
[13:06] *** brrt left
[13:08] *** vrurg joined
[13:13] *** vrurg left
[13:31] *** vrurg joined
[13:36] *** vrurg left
[13:38] *** brrt joined
[13:38] <brrt> I somehow thought that the ASAN runner was a bot, too
[13:40] <timo> hey brrt did you see my first steps for per-repr exprjit stuff?
[13:40] *** brrt left
[13:40] <timo> d'oh :D
[13:43] *** vrurg joined
[13:52] <[Coke]> Nicholas: did your PR get merged to new-disp?
[13:52] <Nicholas> no, I rejected it because v3 is coming instead
[13:52] <Nicholas> who is (was) celo_duro who appeared breifly and suggestd alloca?
[13:53] <[Coke]> ahhhh
[13:53] <[Coke]> ok. Thanks for getting sucked into fixing it for me! :)
[13:53] <[Coke]> perhaps "suckered" is a better word. :)
[13:53] <[Coke]> [6~
[14:00] <Nicholas> I thought it looked fairly easy, and I thought I could fit it in between tweaking GitHub workflow runs
[14:04] <[Coke]> I owe you a beer.
[14:05] <Nicholas> Pretty sure I owe you a beer in return for stuff you've tested for me
[14:06] <Geth> Â¦ MoarVM/jit-vla-v3: 18d98df054 | Coke++ (committed by Nicholas Clark) | src/jit/expr.c
[14:06] <Geth> Â¦ MoarVM/jit-vla-v3: Don't use Variable Length Arrays, as MSVC forbids them.
[14:06] <Geth> Â¦ MoarVM/jit-vla-v3: 
[14:06] <Geth> Â¦ MoarVM/jit-vla-v3: Instead use `alloca` to explicitly allocate storage.
[14:06] <Geth> Â¦ MoarVM/jit-vla-v3: review: https://github.com/MoarVM/MoarVM/commit/18d98df054
[14:09] <Geth> Â¦ MoarVM: nwc10++ created pull request #1543: Convert the use of a Variable Length Array to alloca
[14:09] <Geth> Â¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1543
[14:13] <[Coke]> That is much shorter, nice. Does alloca do something behind the scenes like what jnthn was suggesting?
[14:15] <[Coke]> I see the stack vs. heap distinction.
[14:20] <Nicholas> and the "returns NULL on failure" vs "undefined behaviour" distinction
[14:37] *** vrurg left
[15:00] *** frost left
[15:01] <[Coke]> build succeeded on your v3 branch, doing rakudo make test now
[15:02] <[Coke]> (windows)
[15:04] <[Coke]> still getting nativecall failures when concurrent testing.
[15:06] <[Coke]> only nativecall failures; psuedohash error didn't recur.
[15:06] <[Coke]> Nicholas: Thanks.
[15:40] <Nicholas> at the start of the week I was fixing bugs on VMS. Now it's Win32. Two platforms I know little about and don't use. :-)
[15:41] <Nicholas> (the M1 mac mini on the gcc compiler farm is seriously fast. I'm wondering what the *real* performance CPUs from Apple will be like)
[15:44] <Nicholas> I'm guessing "goes like shit off a shovel" but I doubt that that's how they will officially describe them
[15:59] <[Coke]> ... I wonder how many people in this chat have actually had to shovel shit at one point. (I had to muck stables a few times one summer)
[16:00] <[Coke]> if that branch looks good on non-win, looks good to merge to me.
[16:01] <Nicholas> I was going to say "never shit". But then I remembered that one day my parents collected free horse manure, and I was involved. But I think I was too young then to be efficient at shovelling.
[16:01] <Nicholas> I've shovelled but plenty of earth, sand and similar.
[16:02] <Nicholas> That branch worked on "my" machine. (ie has been tested by me on exactly one x86_64 system running debian)
[16:04] <[Coke]> I'll do a run on my old mac mini...
[16:09] *** vrurg joined
[16:13] <[Coke]> Any m1 build issues? I assume lizmat would be our canary there.
[16:13] <[Coke]> (on master or new-disp)
[16:14] * lizmat does not have an M1 yet
[16:14] *** vrurg left
[16:16] <Nicholas> me neither. This might change when laptops with 16G or greater appear.
[16:18] <[Coke]> looks like at this point you can have 16G *OR* M1.
[16:21] <patrickz> I actually do have an M1 that I'd be very willing to make available via ssh. Would that help?
[16:21] <Nicholas> but I want both! And a pony.
[16:21] <Nicholas> Darwin minimac.moose.housegordon.com 20.4.0 Darwin Kernel Version 20.4.0: Thu Apr 22 21:46:41 PDT 2021; root:xnu-7195.101.2~1/RELEASE_ARM64_T8101 arm64
[16:21] <Nicholas> I have access to that one
[16:27] <Nicholas> trying new-disp first. It doesn't like t/04-nativecall/02-simple-args.t
[16:27] <Nicholas> but IIRC it never "liked" that
[16:28] <Nicholas> IIRC it's actually whichever dyncall library that we use that is buggy, and doesn't handle unsigned chars and unsigned shorts correctly - assumes it can cast them to signed and just use the signed "thing" code.
[16:29] <Nicholas> this fails when the ABI treats the sign extension (or not) differently.
[16:30] <Nicholas> actually, I think that both our options are making the same buggy assumptions, but one of them ends up truncating the data again, which undoes the damage.
[16:32] *** sena_kun joined
[16:45] *** vrurg joined
[16:45] *** vrurg left
[16:48] <[Coke]> jit-vla-v3 looks good on win & mac here.
[17:08] *** MasterDuke47 left
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:20] <timo> oh, did we look for new libuv versions?
[18:24] <Nicholas> releasable6: next release?
[18:24] <releasable6> Nicholas, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Releasable
[18:24] <Nicholas>  /win 1
[18:25] <Nicholas> that *used* to be very fast way to learn of the next release date
[18:25] <Nicholas> releasable6: status
[18:25] <releasable6> Nicholas, Next release in â‰ˆ1 day and â‰ˆ0 hours. There are no known blockers. Changelog for this release was not started yet
[18:25] <releasable6> Nicholas, Details: https://gist.github.com/33431e85962f001e4d76cd983ac6babc
[18:25] <Nicholas> releasable6: botsnack
[18:25] <releasable6> Nicholas, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Releasable
[19:01] *** patrickz left
[19:21] <sena_kun> please no new libraries
[19:24] <Nicholas> sorry, this was my implied point, but I failed to be explicit
[19:25] <Nicholas> actually, more - we aren't hurting on any existing bugs are we? So logically we should
[19:26] <ugexe> i have a M1 with 16G ram
[19:26] <Nicholas> 1) release (thanks for everyone who does this. I really appreciate your work, as I like releases to happen but I don't enjoy doing them personally)
[19:26] <Nicholas> 2) merge new-disp
[19:26] <Nicholas> 3) fix all the things
[19:26] <Nicholas> 4) *then* new libraries
[19:27] * sena_kun is in another city with different conditions and kinda sorta vacationing (while sorting out private stuff), but the release is to be done so it'd be nice to pass it safely this time
[19:27] <lizmat> as in libuv ?
[19:27] <Nicholas> M1 with 16G RAM is a desktop?
[19:27] <lizmat> MacMini I assume?
[19:27] <ugexe> ah i was wondering what i was missing
[19:27] <sena_kun> Nicholas, hmm, merge new-disp? were the last modules fixed? I remember there were 4 maybe with very complex fixes to do.
[19:27] <ugexe> mac pro
[20:07] <timo> https://www.pypy.org/posts/2021/09/jit-auto-generated-code.html leasure reading
[20:07] <Nicholas> oh my, I slack. timo finds a pypy blog entry before I do
[20:12] <timo> is any project taking "faJITa"?
[20:19] <timo> OnePlus has a device called (or code-named) "fajita"
[20:52] <Geth> Â¦ MoarVM/new-disp: a66754871d | Coke++ | build/setup.pm
[20:52] <Geth> Â¦ MoarVM/new-disp: Turn VLA usage into a compiler error
[20:52] <Geth> Â¦ MoarVM/new-disp: 
[20:52] <Geth> Â¦ MoarVM/new-disp: VLA fails on windows, this allows us to catch it on other platforms first.
[20:52] <Geth> Â¦ MoarVM/new-disp: 
[20:52] <Geth> Â¦ MoarVM/new-disp: Resolves #1537
[20:52] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/a66754871d
[20:52] <Geth> Â¦ MoarVM/new-disp: 18d98df054 | Coke++ (committed by Nicholas Clark) | src/jit/expr.c
[20:52] <Geth> Â¦ MoarVM/new-disp: Don't use Variable Length Arrays, as MSVC forbids them.
[20:52] <Geth> Â¦ MoarVM/new-disp: 
[20:52] <Geth> Â¦ MoarVM/new-disp: Instead use `alloca` to explicitly allocate storage.
[20:52] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/18d98df054
[20:52] <Geth> Â¦ MoarVM/new-disp: 8413e9dd5a | (Jonathan Worthington)++ (committed using GitHub Web editor) | 2 files
[20:52] <Geth> Â¦ MoarVM/new-disp: Merge pull request #1543 from MoarVM/jit-vla-v3
[20:52] <Geth> Â¦ MoarVM/new-disp: 
[20:52] <Geth> Â¦ MoarVM/new-disp: Convert the use of a Variable Length Array to alloca
[20:52] <Geth> Â¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/8413e9dd5a
[21:16] *** evalable6 left
[21:17] *** evalable6 joined
[23:04] *** linkable6 left
[23:04] *** releasable6 left
[23:04] *** evalable6 left
[23:05] *** linkable6 joined
[23:06] *** evalable6 joined
[23:07] *** releasable6 joined
