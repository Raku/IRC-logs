[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:43] *** kjp left
[00:48] *** kjp joined
[01:48] *** committable6 left
[01:48] *** bloatable6 left
[01:48] *** squashable6 left
[01:48] *** greppable6 left
[01:48] *** coverable6 left
[01:48] *** nativecallable6 left
[01:48] *** statisfiable6 left
[01:48] *** bisectable6 left
[01:48] *** shareable6 left
[01:48] *** quotable6 left
[01:48] *** benchable6 left
[01:48] *** notable6 left
[01:48] *** releasable6 left
[01:48] *** sourceable6 left
[01:48] *** tellable6 left
[01:48] *** unicodable6 left
[01:48] *** evalable6 left
[01:48] *** reportable6 left
[01:48] *** linkable6 left
[01:48] *** nativecallable6 joined
[01:49] *** tellable6 joined
[01:49] *** bloatable6 joined
[01:49] *** reportable6 joined
[01:49] *** benchable6 joined
[01:49] *** evalable6 joined
[01:50] *** squashable6 joined
[01:50] *** shareable6 joined
[01:51] *** releasable6 joined
[01:51] *** unicodable6 joined
[02:49] *** committable6 joined
[02:50] *** statisfiable6 joined
[03:49] *** notable6 joined
[03:49] *** greppable6 joined
[03:51] *** bisectable6 joined
[04:48] *** linkable6 joined
[04:50] *** quotable6 joined
[05:50] *** linkable6 left
[05:50] *** quotable6 left
[05:50] *** bisectable6 left
[05:50] *** shareable6 left
[05:50] *** nativecallable6 left
[05:50] *** notable6 left
[05:50] *** reportable6 left
[05:50] *** tellable6 left
[05:50] *** evalable6 left
[05:50] *** statisfiable6 left
[05:50] *** unicodable6 left
[05:50] *** greppable6 left
[05:50] *** bloatable6 left
[05:50] *** benchable6 left
[05:50] *** squashable6 left
[05:50] *** releasable6 left
[05:50] *** committable6 left
[05:50] *** tellable6 joined
[05:50] *** releasable6 joined
[05:50] *** greppable6 joined
[05:50] *** notable6 joined
[05:50] *** unicodable6 joined
[05:51] *** coverable6 joined
[05:51] *** committable6 joined
[05:51] *** quotable6 joined
[05:51] *** statisfiable6 joined
[05:52] *** linkable6 joined
[05:52] *** squashable6 joined
[06:14] <Nicholas> good *, #moarvm 
[06:17] <timo> ooh niiii~chon
[06:18] <timo> ...las
[06:20] <Nicholas> Hello timo and hello to timo's cat
[06:48] *** sourceable6 joined
[06:50] *** bisectable6 joined
[06:51] *** nativecallable6 joined
[06:51] *** shareable6 joined
[06:52] *** evalable6 joined
[07:48] *** frost joined
[07:50] *** bloatable6 joined
[07:50] *** benchable6 joined
[07:56] *** patrickb joined
[08:03] *** reportable6 joined
[08:19] *** Geth left
[08:20] *** RakuIRCLogger left
[08:40] <timo> i've been thinking a bit more about the callsite transformation cache business
[08:40] *** RakuIRCLogger joined
[08:41] *** Geth joined
[08:41] <timo> first, trying to be clever and comparing the callsites in the intern cache with the one we expect by comparing flags until we hit the "remove from here" spot, then jumping ahead is not a great idea
[08:41] <timo> since we're essentially competing against memcmp that we could have if we just call callsite_intern
[08:43] <timo> so fixing that up to also be a memcmp would be a good first step
[08:43] <timo> but then also: the "is inlined" flag is one bit in an 8 bit wide field
[08:44] <timo> keeping 0 for "not inlined" and 1 for "inlined" we can use 253 numbers to indicate a position in another array
[08:44] <timo> "not interned" and "interned"*
[08:46] <timo> so an array of arrays with the outer array being "per arity" and the inner array being just a growing list of callsite -> pointer to another array would be a good start
[08:47] <timo> that other array would have one slot for each of the flags the callsite has, and would point to the existing callsite that is equal to the given callsite except with the flag at that spot removed
[08:48] <timo> now the bigger question becomes: is the size increase this entails worth whatever speed we gain from not having to go through all interned callsites of the "target" size
[08:49] <timo> maybe what would work better instead is like a skip list that helps go through the lists of interned callsites faster by knowing the flags, for example
[08:50] <timo> another thing that's of course also always possible is using a hash keyed on the flags bytestring
[08:51] <timo> Nicholas: thoughts? :)
[09:01] *** patrickb left
[09:08] <timo> https://gist.github.com/timo/95b92b2c2f1a808929f73bf0a8c24215 here's the data
[09:08] <timo> callsites printed after a relatively simple progra run
[09:09] <timo> no clue where these big numbers at the end coe from, those are supposed to be the arg_count values, but they should be 2x the amount of nameds + the arity as an upper bound
[09:10] <timo> i wonder if maybe we're not using that field any more?
[09:11] <timo> perhaps splitting them first by arity and second by whether it has named arguments is a good idea
[09:45] <jnthnwrthngtn> It may be that a split of named or not already gets us a fairly big win, because without is the common case, and also the one with which there's relatively few permutations
[09:46] <jnthnwrthngtn> The idea of stealing a few bits for storing a hint of where to look for a related callsite is neat
[09:47] *** moon-child left
[09:48] <Nicholas> "my brain is full" - I don't have any good answer to questions about hashes
[09:51] *** moon-child joined
[09:59] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: ff687781e2 | (Nicholas Clark)++ | src/spesh/manipulate.c
[09:59] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: All bits in the union returned by `make_temp_reg` should be initialised
[09:59] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: 
[09:59] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: `make_temp_reg` returns `MVMSpeshOperand`, which is a union between various
[09:59] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: types and structs, all of which are 64 bits or smaller.
[09:59] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: 
[09:59] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: Code in `optimize_bb_switch` evaluates `lit_i64 != -1` before calling
[09:59] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: `MVM_spesh_manipulate_release_temp_reg`. The struct within the union returned
[09:59] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: <…commit message has 9 more lines…>
[09:59] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: review: https://github.com/MoarVM/MoarVM/commit/ff687781e2
[10:01] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: 0ca25c96d9 | (Nicholas Clark)++ | src/spesh/manipulate.c
[10:01] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: All bits in the union returned by `make_temp_reg` should be initialised
[10:01] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: 
[10:01] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: `make_temp_reg` returns `MVMSpeshOperand`, which is a union between various
[10:01] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: types and structs, all of which are 64 bits or smaller.
[10:01] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: 
[10:01] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: Code in `optimize_bb_switch` evaluates `lit_i64 != -1` before calling
[10:01] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: `MVM_spesh_manipulate_release_temp_reg`. The struct within the union returned
[10:01] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: <…commit message has 9 more lines…>
[10:01] <Geth> ¦ MoarVM/make_temp_reg-init-all-64: review: https://github.com/MoarVM/MoarVM/commit/0ca25c96d9
[10:01] <Nicholas> 9 more lines one of which had a typo
[10:02] <Geth> ¦ MoarVM: nwc10++ created pull request #1551: All bits in the union returned by `make_temp_reg` should be initialised
[10:02] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1551
[10:41] * dogbert17 waves his wand hand and tries to conjure up brrt
[10:43] *** Altai-man joined
[10:55] <Geth> ¦ MoarVM/new-disp: b9cb40f56d | (Nicholas Clark)++ (committed by Jonathan Worthington) | src/spesh/manipulate.c
[10:55] <Geth> ¦ MoarVM/new-disp: All bits in the union returned by `make_temp_reg` should be initialised
[10:55] <Geth> ¦ MoarVM/new-disp: 
[10:55] <Geth> ¦ MoarVM/new-disp: `make_temp_reg` returns `MVMSpeshOperand`, which is a union between various
[10:55] <Geth> ¦ MoarVM/new-disp: types and structs, all of which are 64 bits or smaller.
[10:55] <Geth> ¦ MoarVM/new-disp: 
[10:55] <Geth> ¦ MoarVM/new-disp: Code in `optimize_bb_switch` evaluates `lit_i64 != -1` before calling
[10:55] <Geth> ¦ MoarVM/new-disp: `MVM_spesh_manipulate_release_temp_reg`. The struct within the union returned
[10:55] <Geth> ¦ MoarVM/new-disp: <…commit message has 9 more lines…>
[10:55] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/b9cb40f56d
[11:05] <Altai-man> ⏳ 133 out of 1693 modules processed
[11:06] <Altai-man> this will take some time...
[11:42] <Altai-man> about Blin after 150 modules: *cough* hide-methods *cough*
[11:58] * lizmat feels called
[12:00] <Altai-man> well, that's a regression...
[12:02] *** reportable6 left
[12:04] *** patrickb joined
[12:20] <Altai-man> ⏳ 759 out of 1693 modules processed
[13:02] *** reportable6 joined
[13:22] <dogbert17> jnthnwrthngtn: it seems to me that after the following two commits, which go together,  were applied the expr_jit started to get annoyed
[13:22] <dogbert17> https://github.com/MoarVM/MoarVM/commit/5e982bfc98bb62d4cc9e5cf831c4760900b183e5 and https://github.com/rakudo/rakudo/commit/4ebc6bba083d4c6f620bdf00216baabc533bf766
[13:24] * dogbert17 there's of course a chance that I messed up my 'bisect' totally
[13:26] <jnthnwrthngtn> Hmm. Assuming it's correct, it sadly won't explain much, since I think it will have mostly just exposed more things for JITting rather than actually introducing the problem.
[13:26] *** [Coke] left
[13:26] <jnthnwrthngtn> Given this change would potentially give the expr JIT more things to compile it seems like a quite legitimate bissect outcome.
[13:26] *** [Coke] joined
[13:27] <jnthnwrthngtn> The dream outcome woulda been one introducing or changing a template.
[13:27] <jnthnwrthngtn> I do wonder if it's worth going through the templates that differ between master and new-disp and commenting out each of them
[13:31] <dogbert17> it could be unless brrt make a sudden appearance :)
[13:33] <dogbert17> hmm, is it core_templates.expr which should be changed, i.e. remove stuff from?
[13:33] <jnthnwrthngtn> Yes
[13:33] <dogbert17> I can give it a shot
[13:34] <dogbert17> do you have any wild guesses wrt which template it might be
[13:36] <jnthnwrthngtn> 'fraid not, anything with flow control (a when or some such) is a good candidate. That and it should have changed from master to now, perhaps.
[13:37] <dogbert17> I have a short program which exposes the problem:
[13:37] <dogbert17> my $num = 600_851_475_143; 
[13:37] <dogbert17> my $val = $num;
[13:37] <dogbert17> my @factors = ();
[13:37] <dogbert17> while ([*] @factors) != $num {
[13:37] <dogbert17>   push @factors, (2...*).first(-> $x { $val %% $x && $x.is-prime });
[13:37] <dogbert17>   $val = $val div @factors[*-1];
[13:37] <dogbert17> }
[13:37] <dogbert17> say @factors.max;
[13:40] <Geth> ¦ MoarVM/new-disp: 1362ebd5cb | (Jonathan Worthington)++ | src/disp/resume.c
[13:40] <Geth> ¦ MoarVM/new-disp: Add some basic resumption debug dumping
[13:40] <Geth> ¦ MoarVM/new-disp: 
[13:40] <Geth> ¦ MoarVM/new-disp: Which can help with tracking down issues in resuming dispatchers.
[13:40] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/1362ebd5cb
[13:55] <Altai-man> MoarVM oops: MVM_str_hash_fetch_nocheck called with a stale hashtable pointer
[13:56] <jnthnwrthngtn> That means somebody is abusing hashes
[13:57] <Altai-man> alright, 32 modules to go...
[13:57] <jnthnwrthngtn> Highly doubt that'd be a new-disp regression, likely just flappy
[13:58] <Altai-man> yes, that's likely
[13:59] <dogbert17> hmm, now that I have removed all templates from core_templates.expr I now get four label errors instead of one when the file was complete
[14:00] <dogbert17> perhaps I'm misunderstanding something here
[14:01] <jnthnwrthngtn> o.O
[14:09] <dogbert17> dunno what else I can do
[14:18] <jnthnwrthngtn> 'fraid I'm out of ideas too
[14:19] <timo> wondering where exactly to put the bifurcation for named vs no named callsites in the intern cache
[14:20] <timo> there could even be two mutexes if there's two "entire" intern caches
[14:21] <Altai-man> MoarVM oops: Oversize callstack flattening record requested (wanted 139344, maximum 131040) looks like one, right?
[14:21] <timo> so... less contention overall, in theory
[14:21] <timo> wow, someone is passing very many arguents, eh?
[14:44] <jnthnwrthngtn> Many too many, it looks like
[14:47] <Altai-man> I think I have enough results to share, should I?
[14:47] <timo> the corresponding MVMCallsite we make for flattening will also be at least 130 kilobytes? :D
[14:49] <Altai-man> I can count presumably 5 different issues.
[14:52] <jnthnwrthngtn> Altai-man: Yes, please. This is pretty much what decides about merge.
[14:54] <Altai-man> alright, so the "new" ones are: Spit (Parameterizer callback must be a code handle), Slang::SQL (No such method 'ACCEPTS' for invocant of type 'VMNull'), Services::PortMapping (Oversize callstack) and a couple of CSS moduoles are failing now with the same error (This type cannot unbox to a native string: P6opaque, Scalar). And there is also hide-methods, which in total make 5.
[14:55] <lizmat> I assume the hide-methods is the "callwith semantics" issue ?
[14:55] <lizmat> or is there something I should do for that module ?
[14:56] <jnthnwrthngtn> lizmat: No, it's something different.
[14:56] <jnthnwrthngtn> lizmat: It's that it replaces .can iirc
[14:56] <lizmat> ah, should I look into it more?
[14:57] <jnthnwrthngtn> Well, if you can find a way to make it work on new-disp that'd probably be best
[14:58] <jnthnwrthngtn> I don't know why Spit is a new one...
[14:58] <jnthnwrthngtn> That issue is one I already PR'd some other modules with
[14:58] <jnthnwrthngtn> It's using nqp::setparameterizer and should be using Metamodel::Primitives instead
[14:58] <jnthnwrthngtn> So that one just needs a PR
[14:59] <timo> phew, even with two individual intern caches split by has nameds or not, in perf the percentage of time spent in drop_positionals goes from 0.10% to 0.18%, so more time spent in there, but not easurably faster in total sadly
[14:59] <Altai-man> great
[14:59] <jnthnwrthngtn> The Slang::SQL and CSS ones sound like fallout (maybe deopt issues?) from the reinsated optimizations, so certainly need investigating
[15:01] <jnthnwrthngtn> Sigh, this callwith thing is really tricky to fix
[15:01] * timo rubs eyes
[15:02] <timo> uh oh, it appears like i actually broke raku tho
[15:08] <Altai-man> the third module, CSS fails with the same issue as two others
[15:22] *** patrickb left
[15:30] <Nicholas> Would it be possible to list the (roughly) 5 issues that blin revealed on https://github.com/rakudo/rakudo/wiki/Rakudo-new-disp-branch ?
[15:30] <Nicholas> I'm getting a bit confused as to what is(n't yet) working
[15:30] <Altai-man> aye, sorry I forgot it last time. :S
[15:30] <Altai-man> doing now
[15:32] <Nicholas> thanks
[15:34] <[Coke]> Nicholas: heh. "I came here to make that post"
[15:37] <[Coke]> converted to the bulleted list, so strikethrough is now a checked box to match new blin items added.
[15:41] * lizmat stops playing with the ecosystem and goes back to look at hide-methods on new-disp
[15:49] <lizmat> jnthnwrthngtn: in the case of hide-methods, it looks like it succeeds in finding the B.bar method, but it is in fact the A.bar method that runs
[16:01] <jnthnwrthngtn> lizmat: Did that program location previously do a method call and it went to A.bar?
[16:01] <lizmat> yes
[16:02] <jnthnwrthngtn> lizmat: We cache at callsites now, and once something is "linked" to a result, it'll stay that way.
[16:02] <lizmat> hmmm....  but it was a different call site
[16:02] <jnthnwrthngtn> Ah, then that doesn't explain it
[16:03] <lizmat> there's no loop and no sub involved, so all the call-sites are different
[16:04] <lizmat> dinner&
[16:30] <lizmat> m: sub a { dd }; sub b { dd }; my &c = &a; for ^2 { c(); &c = &b }
[16:30] <camelia> rakudo-moar ba15173fd: OUTPUT: «sub a()␤sub b()␤»
[16:31] <lizmat> this gives the same on new-disp.  Should it, or am I understanding call-site incorrect ?
[16:31] <lizmat> or does it actually known &c can change?
[16:32] <jnthnwrthngtn> It knows it can change
[16:33] <lizmat> ok...
[16:39] *** frost left
[16:43] *** Altai-man left
[16:44] <lizmat> jnthnwrthngtn: could this be troublesome?   $class.^mro[1].can($name).head
[16:58] <jnthnwrthngtn> Hm...do you ever mix into the meta-object?#
[17:01] <lizmat>             unless $class.^find_method("can").package =:= &can-wrapper.package {
[17:01] <lizmat>                 $class.^add_method("can",&can-wrapper);
[17:01] <lizmat>                 $class.^compose;
[17:01] <lizmat>             }
[17:01] <jnthnwrthngtn> Ah...and then the callsite will have been found to the `can` before
[17:02] *** squashable6 left
[17:02] <jnthnwrthngtn> If you change it to `$class.^mro[1].^find_method('can')($name).head` does it help?
[17:04] <jnthnwrthngtn> I also figured out a better strategy for the callwith + dispatcher nesting issue, that doesn't need any extensions to the mechanism *and* is better designed *and* will probably perform better
[17:04] <jnthnwrthngtn> Alas, I'm too tired to implement it now. I did note down what it is.
[17:05] <jnthnwrthngtn> So I don't forget by Monday :)
[17:06] <lizmat> that change causes 4 errors instead of 1
[17:07] <jnthnwrthngtn> Oh, that's 'cus it's wrong
[17:08] <lizmat> afk for a bit&
[17:08] <jnthnwrthngtn> Should probably be more like `my $type := $class.^mro[1]; $type.^find_method('can')($type, $name).head`
[17:08] <jnthnwrthngtn> (e.g. the found method needs its incocant too)
[17:08] <jnthnwrthngtn> *invocant
[17:09] <jnthnwrthngtn> Also heading afk 
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[19:10] <lizmat> jnthnwrthngtn: fix for hide-methods on its way to the ecosystem
[19:26] <dogbert17> lizmat: have you tried test-t today?
[19:27] <lizmat> yeah, no noticeable change
[19:27] <lizmat> at least for me
[19:27] <dogbert17> did you try it with MVM_JIT_EXPR_DISABLE=1 as well?
[19:28] <lizmat> no, should I expect a better performance with it?
[19:28] <dogbert17> since they expr-jit is acting up a bit at the moment yes
[19:33] <lizmat> wow
[19:33] *** squashable6 joined
[19:34] <lizmat> 1.141 / .664
[19:34] <lizmat> that *is* indeed a noticeable difference
[19:35] <dogbert17> that's really cool
[19:40] <lizmat> now the amazing part: running on master:
[19:40] <lizmat> 1.361 / .650
[19:41] <lizmat> running on master with MVM_JIT_EXPR_DISABLE=1
[19:41] <timo> oh my
[19:41] <dogbert17> so master is finally beaten :)
[19:41] <lizmat> 1.318 / .664
[19:42] <japhb> \o/
[19:42] <lizmat> but also: on master, there's an advantage to do MVM_JIT_EXPR_DISABLE=1 even
[19:42] <lizmat> so it looks expr-jit was sorta borked already ?
[19:43] *** japhb left
[19:43] <lizmat> dogbert17: master was already beaten, I think, just not the --race case, as that suffers more from the longer startup
[19:43] <dogbert17> perhaps, but now it can spew out scary errors if you run with MVM_JIT_DEBUG=1, i.e. on new-disp
[19:44] <timo> lizmat: can you quickly turn on MVM_JIT_DEBUG=1 and see if any error lines appear on stderr?
[19:44] <dogbert17> I believe MasterDuke wrote that it also seems to get in the way of jitting in general
[19:44] <lizmat> with or without the EXPR_DISABLE?
[19:44] <dogbert17> without
[19:45] * lizmat rebuilds again  :)
[19:45] <nine> I'm pretty sure those scary errors are there on master as well
[19:46] *** japhb joined
[19:49] <lizmat> dogbert17 timo https://gist.github.com/lizmat/eb1ff243b6b93f058f87b194085051a5
[19:49] <timo> wild
[19:50] <dogbert17> was that on master?
[19:50] <timo> make your raku programs faster with this one weird trick. developers hate her!
[19:50] <lizmat> no, new-disp
[19:50] <lizmat> want me to run on master as well, dogbert17 
[19:50] <timo> oh i was hoping for output from master
[19:50] <lizmat> ?
[19:50] <lizmat> ah, ok, gimme a mo
[19:51] <dogbert17> if you want to verify nine's theory?
[19:51] <timo> yeah
[19:56] <lizmat> no errors on master
[19:56] <lizmat> dogbert17 timo ^^
[19:57] <timo> ok
[19:57] <dogbert17> sounds like we need to conjure up brrt
[20:06] <dogbert17> 'use Slang::SQL; sql drop table if exists stuff;' running or compiling this is enough to trip up Slang::SQL
[20:30] <Geth> ¦ MoarVM/new-disp: 060d3eeda6 | (Jonathan Worthington)++ | 2 files
[20:30] <Geth> ¦ MoarVM/new-disp: Tidy up sp_getarg_* in expression JIT
[20:30] <Geth> ¦ MoarVM/new-disp: 
[20:30] <Geth> ¦ MoarVM/new-disp: * Remove a now-unused macro
[20:30] <Geth> ¦ MoarVM/new-disp: * Add template for `sp_getarg_n`
[20:30] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/060d3eeda6
[20:36] <lizmat> jnthnwrthngtn: should I rerun test-t, or is there still some general breakage with the expression JIT?
[20:46] *** linkable6 left
[20:46] *** evalable6 left
[20:47] *** evalable6 joined
[20:47] *** linkable6 joined
[20:55] <jnthnwrthngtn> lizmat: Still the problem, I just spotted those things to clean up while seeing if I could figure it out
[20:56] <jnthnwrthngtn> It's rather odd: I annotated instructions with their JIT labels, and the instruction whose label goes missing when the expr JIT is on doesn't even get compiled by the expr JIT
[21:21] <jnthnwrthngtn> I may have a fix.
[21:43] <Geth> ¦ MoarVM/new-disp: 9f22ac582a | (Jonathan Worthington)++ | src/jit/expr.c
[21:43] <Geth> ¦ MoarVM/new-disp: Bail from template JIT prior to adding labels
[21:43] <Geth> ¦ MoarVM/new-disp: 
[21:43] <Geth> ¦ MoarVM/new-disp: The template JIT graph builder would first consider annotations, and
[21:43] <Geth> ¦ MoarVM/new-disp: after that see if there was a template. In the event that there was not
[21:43] <Geth> ¦ MoarVM/new-disp: one, this could lead to labels being produced, but never emitted, which
[21:43] <Geth> ¦ MoarVM/new-disp: then led to a missing label and the the entire JIT of the frame failing.
[21:43] <Geth> ¦ MoarVM/new-disp: Resolve this by first checking if there is a template, and only then
[21:43] <Geth> ¦ MoarVM/new-disp: <…commit message has 7 more lines…>
[21:43] <Geth> ¦ MoarVM/new-disp: review: https://github.com/MoarVM/MoarVM/commit/9f22ac582a
[21:44] <jnthnwrthngtn> lizmat: That one should fix the breakage.
[21:47] <timo> ooh
[21:47] <timo> good work
[21:47] *** linkable6 left
[21:47] *** evalable6 left
[21:48] *** evalable6 joined
[21:58] <jnthnwrthngtn> afk for a bit, maybe for the evening
[22:48] *** evalable6 left
[22:50] *** linkable6 joined
[23:20] *** sena_kun left
[23:24] <lizmat> ok, this makes new-disp run test-t at 1.162 on my machine
[23:25] <lizmat> running with MVM_JIT_EXPR_DISABLE=1 still gives a similar value
[23:26] <lizmat> so it feels to me that this last change is just effectively disabling JIT without the environment variable
[23:27] <lizmat> still, good to see test-t now at least 15% faster than on master :-)
[23:31] <MasterDuke> if we made the jit abort instead of printing those errors with MVM_JIT_DEBUG=1, could we then use the jit bisect script to figure more precisely where things are going wrong?
[23:35] <lizmat> oh, by the way, JIT_DEBUG is clean now
[23:42] <lizmat> sleep&
