[00:02] *** reportable6 left
[00:03] *** coleman-x left
[00:03] *** coleman-x joined
[00:04] *** reportable6 joined
[00:22] *** evalable6 joined
[00:52] *** ggoebel left
[01:24] *** linkable6 joined
[05:18] *** kjp_ is now known as kjp
[06:02] *** reportable6 left
[06:06] *** MasterDuke left
[06:06] *** bartolin joined
[06:06] *** japhb_ joined
[06:10] *** jdv_ joined
[06:14] *** timo left
[06:14] *** lizmat left
[06:14] *** MasterDuke left
[06:14] *** harrow left
[06:14] *** japhb left
[06:14] *** ilogger2 left
[06:14] *** Util left
[06:14] *** bartolin_ left
[06:14] *** raydiak left
[06:14] *** jdv left
[06:15] *** timo joined
[06:16] *** lizmat joined
[06:16] *** harrow joined
[06:17] *** Util joined
[06:20] *** raydiak joined
[06:25] *** ilogger2 joined
[06:37] <Nicholas> good *, #moarvm 
[06:38] <Nicholas> unless you're big endian, in which case your morning is still a bit LTA
[06:38] *** patrickb joined
[06:50] *** harrow left
[06:53] *** harrow joined
[07:03] *** reportable6 joined
[07:08] *** ggoebel joined
[07:16] *** Kaipi joined
[07:16] *** ggoebel_ joined
[07:18] *** shareable6_ joined
[07:21] *** shareable6 left
[07:21] *** Kaiepi left
[07:21] *** ggoebel left
[07:21] *** tellable6 left
[07:21] *** tellable6 joined
[07:22] *** childlikempress joined
[07:22] *** moon-child left
[07:22] *** childlikempress is now known as moon-child
[07:25] *** committable6_ joined
[07:25] *** notable6_ joined
[07:27] *** notable6 left
[07:27] *** committable6 left
[07:31] *** samcv_ joined
[07:34] *** samcv left
[08:17] *** jdv_ left
[08:17] *** jdv joined
[08:22] <Nicholas> nine: if "all" I am doing is defining MVM_LOG_DEOPTS 1, how do I know if a deopt was "recent"?
[08:23] <Nicholas> I can see what the most recent logged thing is before my breakpoint on MVM_exception_throw_adhoc is hit, but I don't know what that then tells me.
[08:29] *** bloatable6 left
[08:29] *** bisectable6 left
[08:30] *** bloatable6 joined
[08:30] *** bisectable6 joined
[08:40] *** Kaipi left
[08:42] *** Kaiepi joined
[08:42] *** reportable6 left
[08:43] *** reportable6 joined
[08:48] <nine> 
[08:49] <moon-child>  
[08:49] <nine> Nicholas: what does it tell you?
[08:51] <Nicholas> Deopt one requested by interpreter in frame 'raku-multi-plan' (cuid '198') Will deopt 4128 -> 4344 Completed deopt_one in 'raku-multi-plan' (cuid '198')
[08:51] <Nicholas> Breakpoint 1, MVM_exception_throw_adhoc (tc=0x10030b90,
[08:51] <Nicholas> (but in 5 lines, not 2)
[08:52] <nine> That's not the same frame as your bisection result. Are there any deopts in 'val' at all?
[08:53] <nine> May be worth a try to verify the jit-bisect result manually. Sometimes it's a bit off unfortunately :/ Disabling hash randomization may help getting a stable result
[08:53] <Nicholas> can't see on in val
[08:53] <Nicholas> and I think that this is the same output as last night
[08:53] <Nicholas> and it's a different ppc64 machine.
[08:53] <Nicholas> can't see one in val
[08:54] <Nicholas> usign the first ppc64 machine to grind forwards trying to find the last good rakduo/nqp/MoarVM combo
[08:54] <Nicholas> commit 42b52ec9e392b00b9114b1c213ee4ae14ca4d789 was good
[08:55] *** linkable6 left
[09:05] *** ggoebel__ joined
[09:07] *** jdv left
[09:07] *** jdv joined
[09:12] *** jdv_ joined
[09:14] *** ggoebel_ left
[09:14] *** jdv left
[09:14] *** moon-child left
[09:14] *** moon-child joined
[09:34] <jnthnwrthngtn> Nicholas: I always disable hash randomization when doing spesh/JIT bissects, because it reliably makes them useless
[09:36] <jnthnwrthngtn> (In fact, I'd probably have been better disabling it throughout the new-disp work and reenabling it before merge... :))
[09:41] <nine> I wonder if it'd have a measurable cost to make it possible to disable hash randomization via an environment variable?
[09:42] <jnthnwrthngtn> I think it'd be tested on some hot paths, but it maybe possible to arrange things so not
[09:44] <lizmat> it would be nice to have it environment variable settable
[09:46] <nine> It'd be an MVM_LIKELY(tc->instance->hash_randomize) per hash we construct
[09:46] <lizmat> that feels expensive?
[09:47] <jnthnwrthngtn> Hmm, despite the vast improvement there are still 13754 attempts to transition a full dispatch cache in the p6-mqtt thing.
[09:47] <Nicholas> it also needs to be a check on that (or similar) at the start of every string we feed into siphash
[09:49] <jnthnwrthngtn> That'd be the most costly place, I guess?
[09:49] <nine> Nicholas: does it? I don't see any checks for MVM_HASH_RANDOMIZE there?
[09:52] <Nicholas> actually, not. but it's the setup of tc->instance->hashSecrets[0] and tc->instance->hashSecrets[1] that also needs to be changed to a fixed value (ie 0) if hash randomsiation is disabled
[09:52] <Nicholas> else one gets different results from MVM_string_hash_code for each run, and that will make different hash ordering
[09:52] <Nicholas> (too)
[09:53] <nine> Yes. I didn't mention that because it's a one time thng
[09:53] <Nicholas> true. I was confused. But it's still "don't forget..."
[09:56] <jnthnwrthngtn> Ah, then maybe not too terribly costly
[10:03] <jnthnwrthngtn> Should we worry about folks setting the env var instead of fixing their busted code/tests? :)
[10:03] <timo> could require -DDEBUG for that perhaps
[10:04] <timo> then it will be available mostly to devs, but normal users don't get the performance hit
[10:11] <dogbert17> m: &grep does role :: { method CALL-ME (|) { say "Got a call"; }} ; grep(Str)   # correct? GH #4543
[10:11] <camelia> rakudo-moar 93f0d86fc: ( no output )
[10:14] <timo> m: &grep does role :: { method CALL-ME (|) { say "Got a call"; }} ; grep.(Str)
[10:14] <camelia> rakudo-moar 93f0d86fc: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling grep() will never work with signature of the proto (Mu, |)␤at <tmp>:1␤------> 3od CALL-ME (|) { say "Got a call"; }} ; 7⏏5grep.(Str)␤»
[10:14] <timo> m: &grep does role :: { method CALL-ME (|) { say "Got a call"; }} ; &grep.(Str)
[10:14] <camelia> rakudo-moar 93f0d86fc: ( no output )
[10:15] <timo> feels a little strange to put a CALL-ME on a sub, though that's kind of what nativecall does
[10:15] <timo> the normal way to do this would be with wrap though, right?
[10:15] <Geth> ¦ MoarVM/hash_randomization_environment_variable: c6c7041781 | (Stefan Seifert)++ | 6 files
[10:15] <Geth> ¦ MoarVM/hash_randomization_environment_variable: Support disabling hash randomization via environment variable
[10:15] <Geth> ¦ MoarVM/hash_randomization_environment_variable: 
[10:15] <Geth> ¦ MoarVM/hash_randomization_environment_variable: This makes it easier to debug and get useful results from e.g.
[10:15] <Geth> ¦ MoarVM/hash_randomization_environment_variable: jit-bisect.pl.
[10:15] <Geth> ¦ MoarVM/hash_randomization_environment_variable: review: https://github.com/MoarVM/MoarVM/commit/c6c7041781
[10:15] <nine> timo: what NativeCall used to do
[10:15] <dogbert17> c: 2021.09 &grep does role :: { method CALL-ME (|) { say "Got a call"; }} ; grep(Str)
[10:15] <committable6_> dogbert17, ¦2021.09: «Got a call␤»
[10:24] <jnthnwrthngtn> Even if we reinstate paying attention to the mixed-in CALL-ME, it's not going to impact any callsites already bound to an outcome pre-mixin.
[10:24] <jnthnwrthngtn> The immutability of the lexpad post-CHECK time really should be considered to extend to Routines installed into it at compile-time also.
[10:25] <jnthnwrthngtn> However, we can't just forbid `does` on a Routine because that's a perfectly fine thing for a trait to be doing.
[10:27] <lizmat> but does are at compile time, generally, no?
[10:27] <lizmat> *those
[10:29] <Geth> ¦ MoarVM: 1420640ab2 | (Jonathan Worthington)++ | 3 files
[10:29] <Geth> ¦ MoarVM: Add a way to request non-installation of a DP
[10:29] <Geth> ¦ MoarVM: 
[10:29] <Geth> ¦ MoarVM: In some cases, we may know that we are only recording a new dispatch
[10:29] <Geth> ¦ MoarVM: program because of a transient situation. For example, a megamorphic
[10:29] <Geth> ¦ MoarVM: by type method dispatcher may end up in record mode because the class in
[10:29] <Geth> ¦ MoarVM: question didn't have a cached flat method table yet. Once that situation
[10:29] <Geth> ¦ MoarVM: is resolved, an already installed dispatch program could start to match.
[10:29] <Geth> ¦ MoarVM: Thus provide a way for a dispatcher to indicate that it's not worth the
[10:29] <Geth> ¦ MoarVM: installation of the current dispatch program, so we can hopefully avoid
[10:29] <Geth> ¦ MoarVM: one cause of piling up a mass of programs at the callsite beyond the
[10:29] <Geth> ¦ MoarVM: point we realize it's megamorphic.
[10:29] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1420640ab2
[10:30] <jnthnwrthngtn> lizmat: Yes, they are, and it's possible that the issue was golfed from such a situation too.
[10:32] <jnthnwrthngtn> Hm, that plus a matching NQP commit are not quite so helpful as hoped...
[10:32] <jnthnwrthngtn> lunch, bbl
[10:36] <lizmat> jnthnwrthngtn: yeah, basicallt from 8.0 to 7.9 for MQTT::Client test
[10:36] <lizmat> *basically
[10:43] <lizmat> ah, missed the NQP one: with the NQP one, it's down to 7.8 for me
[10:48] *** Altai-man joined
[10:52] <Nicholas> OK, first (of many?) big endian bug appears in MoarVM between 720b1aa169de2fb508f7ae80e095b89fad30af4b and 649c9ccad21debf80fec48025b824bad07464785
[10:53] <Nicholas> actually, end is tigher than that. It's present at e9be25809ccfdf13b9db4beeba2a4f9cf0feb535 (which changes which op is reported as NYI)
[10:53] <nine> So, just 12K lines of diff to comb :D
[10:54] <Nicholas> I'm trying to get down to 1 commit
[10:56] <nine> Lets hope it will be the actual commit introducing the broken code, not just a commit unlocking some previously broken optimization
[10:56] <nine> Though even the latter can point us in the right direction
[10:56] <Nicholas> even if it's the latter, it reduces the number of thigns to look for
[10:56] <Nicholas> remember, I don't udnerstand spesh. but I do understand C :-)
[10:56] *** linkable6 joined
[10:58] <Nicholas> OK, it's wierder still. It's commit edb9e5bc04c1232799c378779681ba9a4096a898
[10:59] <Nicholas> edb9e5bc04c1232799c378779681ba9a4096a898 / 27d0b9ff6e0e86bf8763daef7927a8216f6a145b / b21bf9a80e380b17f72cd34b63d40552b8c79ed3 is bad (gets a NYI)
[10:59] *** linkable6 left
[10:59] <Nicholas> edb9e5bc04c1232799c378779681ba9a4096a898^ / 27d0b9ff6e0e86bf8763daef7927a8216f6a145b / b21bf9a80e380b17f72cd34b63d40552b8c79ed3 is good
[11:00] *** linkable6 joined
[11:02] <nine> Huh...can't claim that the error is blatantly obvious to me. But then, if it were I'd probably have avoided it in the first place
[11:02] <Nicholas> prior to that commit, only 1 line does new_operands[3].lit_ui32 = deopt_index;
[11:02] <Nicholas> which size *should* a deopt_index be?
[11:04] <nine> why deopt_index?
[11:04] <Nicholas> it's assigned to lit_ui32
[11:04] <Nicholas> I'm suspicious about alignment in unions
[11:05] <nine> The commit does new_operands[2].lit_ui32 = MVM_disp_inline_cache_get_slot(...). And the latter does return an MVMuint32
[11:05] <nine> And there are 4 other places that do exactly the same
[11:06] <Nicholas> but only 1 is uncommented?
[11:06] <Nicholas> and I don't know if it is reachable
[11:07] <nine> No? optimize_getlexstatic does exactly the same
[11:13] <nine> sp_assertparamcheck's arguments are defined in oplist as r(int64) sslot uint32 and write_instructions in codegen.c reads ins->operands[i].lit_ui32 for MVM_operand_uint32 parameters. So assigning to lit_ui32 should be safe, shouldn't it?
[11:13] *** ggoebel__ left
[11:13] <Nicholas> well, I believe so
[11:19] <nine> Nicholas: can it really be something as basic as GET_UI32 in interp.c?
[11:20] <Nicholas> I really dobut it
[11:20] <Nicholas> new strangeness - I stuck a breakpoint on sp_assertparamcheck and ok is 1 both times
[11:21] *** ggoebel__ joined
[11:21] <timo> turned off jit before?
[11:21] <Nicholas> timo: this is ppc64
[11:21] <timo> ah, of course
[11:21] <timo> you're debugging endianness issues
[11:21] <Nicholas> JIT is "NYI" :-)
[11:22] <timo> SMOP, surely
[11:33] <Nicholas> FSA_SIZE_DEBUG and valigrind find an invalid write at interp.c:248
[11:34] <Nicholas>             OP(extend_i16):
[11:34] <Nicholas>                 GET_REG(cur_op, 0).i64 = (MVMint64)GET_REG(cur_op, 2).i16;
[11:34] <Nicholas> before this spesh problem.
[11:34] <Nicholas> so, the real bug is earlier...
[11:34] <timo> huh, is that not targeting a 64bit register?
[11:36] <Nicholas> unavoidable lunch&
[11:37] <timo> non-maskable interlunch
[11:38] *** ggoebel__ left
[12:03] *** reportable6 left
[12:03] *** reportable6 joined
[12:15] *** rypervenche left
[12:29] *** japhb_ is now known as japhb
[12:29] *** rypervenche joined
[13:25] *** [Coke] is now known as CokeZero
[13:25] *** CokeZero is now known as [Coke]
[13:33] <jnthnwrthngtn> lizmat: Yeah, it's something. Also it's now pretty close to what it was before new-disp for me.
[13:33] <jnthnwrthngtn> (A bit slower, but not by that much.)
[13:35] <nine> jnthnwrthngtn: looks like Inline::Perl5's slow down doesn't have anything to do with the method cache or find_best_dispatchee no longer existing. Looks more like optimized NativeCall sub bodies are no longer used
[13:35] <nine> Have to confirm the latter though. Profiler's too broken to tell from that
[13:36] <timo> :o
[13:37] <jnthnwrthngtn> Profiler's broken? In a way specific to nativecall, or?
[13:37] <jnthnwrthngtn> (I've used it quite a bit recently)
[13:38] <nine> Well for one running with --profile is super slow compared to before. I also don't get a call graph anymore
[13:38] <[Coke]> build seems broken on windows again. Might be me trying to force a build of all 3 bits from one config line.
[13:38] <nine> Have to change trains. May be a bit
[13:38] <jnthnwrthngtn> nine: Odd, I was seeing much smaller profiler output 
[13:38] <jnthnwrthngtn> (For the things I tried)
[13:38] <jnthnwrthngtn> Including finally being able to do CORE.setting
[13:39] <jnthnwrthngtn> So I guess there's something different about this case
[13:45] <nine> testing CSV's csp-ip5xs.pl
[13:45] <nine> profile time seems to grow exponentially with the number of rows
[13:46] <[Coke]> seeing many more warnings in moarvm build today, weird.
[13:47] <nine> 16K rows take half a minute, 100K rows take noeth of half an hour
[13:47] <[Coke]> (wonder if I accidentally deleted some lines yesterday.)
[13:48] <jnthnwrthngtn> o.O
[13:48] <jnthnwrthngtn> I'd guess perf would show up something of interest
[14:00] <Nicholas> I'm really strugglign with this big endian stuff.
[14:00] <[Coke]> updated compiler warnings: https://gist.github.com/coke/4626a2760c3144d606c630794c55f2ac
[14:01] <Nicholas> In that, I end up with valgrind reporting garbage reads (or writes) with spesh enabled
[14:01] <Nicholas> but from interp.c and non spesh ops
[14:01] <jnthnwrthngtn> Normal ops are executed in spesh code
[14:02] <jnthnwrthngtn> Garbage as in uninitialized or out of bounds?
[14:02] <Nicholas> but if I build the same version on x86_64 with (the same) paranoia, all is happy
[14:02] <jnthnwrthngtn> oh, writes implies the latter
[14:02] <Nicholas> ==1619710==  Address 0x119f62d8 is not stack'd, malloc'd or (recently) free'd
[14:02] <Nicholas> ==1619710== Invalid read of size 8
[14:02] <jnthnwrthngtn> Can you breakpoint it and get the register index it's trying to read?
[14:03] <timo> perhaps even `call MVM_dump_bytecode(tc)`
[14:04] <Nicholas> no, I can't see how I can
[14:04] <Nicholas> valgrind reports different errors from a gdb run
[14:04] <Nicholas> so I'm not getting a SEGV when usign gdb
[14:06] <timo> in theory, doesn't valgrind also expose a gdbserver interface?
[14:06] <timo> can you also get it to complain with asan?
[14:06] <timo> i think asan has an env var option that lets you abort() when such an access happens
[14:11] <jnthnwrthngtn> This is odd, some inline caches reach full entries even though I don't think that should be possible any more...
[14:12] <jnthnwrthngtn> Or rather, in a situation I think it shouldn't be possible
[14:17] <jnthnwrthngtn> yeah, this is weird, it should be boring
[14:17] <jnthnwrthngtn> A simple method call
[14:18] <jnthnwrthngtn> With a huge variance in invocant type
[14:20] <jnthnwrthngtn> oh
[14:22] <jnthnwrthngtn> It's boot-boolify
[14:23] <jnthnwrthngtn> It guards on type
[14:39] <nine> Not kiddimg: they just told us that they have to reboot the train. The IT Crowd was far more visionary than I thought
[14:47] <nine> [A[A
[14:51] <jnthnwrthngtn> Seems there is a little benefit in running latest dispatch program first (in order to get the megamorphic handler added most recently)
[15:11] <Nicholas> I didn't know that ASAN had "UNKNWON" in its vocab: ==1629517==The signal is caused by a UNKNOWN memory access.
[15:11] <lizmat> cosmic ray?
[15:13] <lizmat> neutrino?
[15:14] <lizmat> WIMP?
[15:14] <Geth> ¦ MoarVM: f452513c57 | (Jonathan Worthington)++ | src/disp/inline_cache.c
[15:14] <Geth> ¦ MoarVM: Attempt latest dispatch program first
[15:14] <Geth> ¦ MoarVM: 
[15:14] <Geth> ¦ MoarVM: This means that for megamorphic sites that install a program to handle
[15:14] <Geth> ¦ MoarVM: everything, we'll use that ahead of the rest. Rationale:
[15:14] <Geth> ¦ MoarVM: 
[15:14] <Geth> ¦ MoarVM: * The dispatch programs we stacked up before installing the megamorphic
[15:14] <Geth> ¦ MoarVM:   one are liable to regularly fail, and so less efficient to attempt
[15:14] <Geth> ¦ MoarVM: <…commit message has 7 more lines…>
[15:14] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f452513c57
[15:14] <Geth> ¦ MoarVM: c7237e9c83 | (Jonathan Worthington)++ | 2 files
[15:14] <Geth> ¦ MoarVM: Translate dispatch ops used at megamorphic sites
[15:14] <Geth> ¦ MoarVM: 
[15:14] <Geth> ¦ MoarVM: So that we will be able to at least JIT compile the HOW access and hash
[15:14] <Geth> ¦ MoarVM: lookup.
[15:14] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c7237e9c83
[15:30] <lizmat> seems to gain another .1 on MQTT-Client test
[15:31] <jnthnwrthngtn> Yeah, that's the kind of magnitude I saw now
[15:32] <jnthnwrthngtn> How does it compare on your machine to the pre-new-disp measurement?
[15:32] <lizmat> I don't think I have a proper local one  
[15:33] <jnthnwrthngtn> ah, ok, I was asking 'cus I don't on this box either
[15:33] <jnthnwrthngtn> But I think we're probably within 10% now
[15:34] <lizmat> yeah, feels like
[15:35] <jnthnwrthngtn> Given this is one of the worst cases for the new-disp model (explosions of types all over the place), that's not too bad.
[15:36] <jnthnwrthngtn> boot-boolify handles the megamorphic stuff quite badly
[15:36] <jnthnwrthngtn> Figuring out a solution for that would likely help, I'm just not too sure what it'll look like yet
[15:37] <jnthnwrthngtn> Probably pushing some amount of it out of the VM and into userspace
[15:37] <lizmat> well, that's what you've been doing a lot of lately anyway, right?
[15:37] <jnthnwrthngtn> Yup :)
[15:37] <lizmat> so that would be a good thing, no?
[15:38] <jnthnwrthngtn> I just need to decide how far to go with it, is all
[15:38] <lizmat> right.... and I guess more userland stuff, means more warmup time
[15:38] <jnthnwrthngtn> Do we toss the boolification spec entirely in MoarVM and do a full dispatch solution, for example.
[15:38] <jnthnwrthngtn> Yes, there's that
[15:40] <jnthnwrthngtn> Anyway, 10% slowdown is much more manageable than factor of 7 slowdown.
[15:41] <lizmat> indeed  :)
[16:06] <lizmat> although 10% speedup would be better :-)
[16:07] <[Coke]> :P
[16:08] <lizmat> yeah, I know  :-)
[16:08] <[Coke]> ok. on windows today, I am getting failed to load library 'dynext\perl6_ops_moar.dll' at gen\moar\BOOTSTRAP\v6c.nqp:1134  (<ephemeral file>:)
[16:08] <[Coke]> moarvm and nqp appear to have built and installed...
[16:10] <[Coke]> ugh. nevermind.
[16:11] <timo> the perils of using Configure.pl to build all three parts?
[16:11] <[Coke]> (typo in the PATH setup, so while the --prefix was pulling from the right spot, trying to run the installed nqp later was not great.
[16:11] <jnthnwrthngtn> lizmat: I suspect if we find a way to cache the derived regex languages between EVALs we'll gain at least that.
[16:12] <[Coke]> timo: of NOT using, in this case. writing a .bat file to help me force all 3 to build at master
[16:12] <[Coke]> master/HEAD
[16:13] <timo> oh my
[16:16] <nine> Really looks like NativeCall is not using the generated function bodies anymore. Except during BEGIN time (just to make it weird)
[16:18] *** MasterDuke joined
[16:20] <nine> No, it's not BEGIN vs. runtime either
[16:29] <[Coke]> nope, fixed my typo, still can't build rakudo on head. wtf.
[16:31] <Geth> ¦ MoarVM: 6cdb0846c5 | (Jonathan Worthington)++ | src/6model/reprs/ReentrantMutex.c
[16:31] <Geth> ¦ MoarVM: Fix segfault when GCing ReentrantMutex
[16:31] <Geth> ¦ MoarVM: 
[16:31] <Geth> ¦ MoarVM: We cannot clone a ReentrantMutex. In the event that we attempt to do
[16:31] <Geth> ¦ MoarVM: so, an object is allocated, but then not initialized. That lack of
[16:31] <Geth> ¦ MoarVM: initialization would lead to a NULL pointer dereference when we tried to
[16:31] <Geth> ¦ MoarVM: GC the lock. (We don't need to take care of this anywhere else, because
[16:31] <Geth> ¦ MoarVM: the clone never leaks out to userspace; an exception is thrown before it
[16:31] <Geth> ¦ MoarVM: can.)
[16:31] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6cdb0846c5
[16:31] <timo> oh wow
[16:31] *** coleman-x left
[16:33] <nine> jnthnwrthngtn: when _do_ we fail to initialize a mutex? And can we actually recover in that situation?
[16:35] <jnthnwrthngtn> nine: When we allocate the memory (in the GC), then call `copy_to`, and it throws
[16:35] <jnthnwrthngtn> The GC still needs to clear up the allocation
[16:36] <jnthnwrthngtn> hah, I wrote a Rakudo test to cover it, then realized that if I push it it'll SEGV unless I do version bumps...
[16:41] <nine> Looks like the generated bodies that do get used are created by the CHECK phaser NativeCall exports: https://github.com/rakudo/rakudo/blob/master/lib/NativeCall.rakumod#L792
[16:46] <nine> But that should really be all of them. Without the CHECK phaser we don't call any generated bodies at all. With it only some
[17:08] <nine> I really can't find a system in this
[17:09] *** linkable6 left
[17:09] <timo> is what jnthn just committed to rakudo about nativecall?
[17:09] <timo> ah, no it's about the other exaple from earlier today
[17:10] <nine> It's about why Inline::Perl5 is now twice as slow
[17:10] <timo> i meant mixing CALL-ME into a proto
[17:11] <nine> Ah, sorry, misread your sentence. Sounds like that, yes
[17:16] <jnthnwrthngtn> What I just committed fixes a reported regression
[17:23] *** patrickb left
[17:34] *** Altai-man left
[17:34] <jnthnwrthngtn> Time to go home, rest, etc.
[18:03] *** reportable6 left
[18:10] *** linkable6 joined
[18:57] <lizmat> ...
[19:04] *** reportable6 joined
[20:42] <jnthnwrthngtn> Goodness, that was a filling dinner...
[20:47] <jnthnwrthngtn> nine: I've been pondering what NativeCall might look like if really done to take advantage of new-disp. My rough idea:
[20:47] <jnthnwrthngtn> 1. Add a new dispatch terminal (along with value, constant, invoke bytecode, etc.) which is to invoke an FFI function.
[20:47] <jnthnwrthngtn> 2. Can add guards, decont Scalar containers, and add unboxings if needed as part of the dispatch program, so there's not much conversion work left in the final thing.
[20:47] <jnthnwrthngtn> 3. It specializes into guards and an op like `sp_nativecall`, which is what it then used on platforms where we can to JIT the native call.
[20:47] <jnthnwrthngtn> Note that this means that the location we make a native call can end up, in the JIT case, with the C call itself emitted, so we're not even dependent on inlining of anything, nor any QAST generation, etc.
[20:53] <MasterDuke> so i'm not terribly surprised, since that one was trickier, but reverting the jitting of scsetobj in https://github.com/MoarVM/MoarVM/pull/1552 got it farther. now nqp build but there's an error building rakudo i've never seen before
[21:03] <MasterDuke> `NMAKE : fatal error U1077: 'C:\Strawberry\perl\bin\perl.exe' : return code '0xff`
[21:04] <MasterDuke> i guess this means (at least) two of the ops are incorrect. ugh, another round of reverting to find out which one...
[21:41] <timo> well that's super odd
[21:41] <timo> we use perl for the exprjit compiler don't we? is that the part that asplode?
[21:42] <timo> does nmake output more info? maybe with --no-silent-build?
[22:06] <MasterDuke> it's somewhere in stage parse, since stage start finished
[22:06] <MasterDuke> https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=704&view=logs&j=1bbd921f-2da8-56be-a1c6-2e0444a912f9&t=936ea194-eb33-58e6-e21c-76b312016e60
[22:09] <timo> ah, that's the "run_early_build_rakudo.pl" or whatever it's called
[22:09] <timo> and it quite possibly just forwards the exit status from the moarvm process itself
[22:16] <MasterDuke> i'm not really regretting now making a PR right away and just adding each new commit to it
[22:16] <MasterDuke> *now really
[22:16] <MasterDuke> *not making
[22:18] <[Coke]> can roll things back and do a PR, no?
[22:19] <MasterDuke> eh, i'm kind of in the middle now
[22:27] <[Coke]> fair enough
