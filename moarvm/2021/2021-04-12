[01:27] *** MasterDuke left
[03:53] *** frost-lab joined
[04:20] *** frost-lab left
[04:28] *** frost-lab joined
[05:38] *** frost-lab left
[05:41] *** frost-lab joined
[05:55] <nwc10> good *, #moarvm 

[06:36] *** MasterDuke joined
[06:46] <MasterDuke> long *, #moarvm

[06:49] <MasterDuke> nine: https://github.com/Raku/nqp/blame/master/src/vm/moar/QAST/QASTOperationsMAST.nqp#L154 is what you think is wrong?

[06:50] *** domidumont joined
[06:51] <MasterDuke> fwiw, removing that line entirely causes `Arg count 1 doesn't equal required operand count 2 for op 'isnull'` in the nqp build

[07:27] *** zakharyas joined
[07:35] <nine> MasterDuke: I think I've misread the code a bit. After all there's this $num_args == $num_operands - 1 condition. But it's clear that there's an off-by-one somewhere in that method

[07:38] <MasterDuke> agreed, but i haven't spotted it yet either

[07:38] <nine> Oh, and now I understand it. It may actually be a feature

[07:40] <nine> What the code does is for ops that write into a register, add that result register automatically to the operand list if it's missing. This implies that the write register can be specified explicitly, like nqp::iseq_i($result_reg, 1, 2)

[07:40] <MasterDuke> hm, is that feature ever used?

[07:41] <nine> Good question. You could make that automation mandatory by removing the `&& $num_args == $num_operands - 1` and see where it breaks

[07:43] <MasterDuke> lets see. nqp builds and passes its tests...

[07:45] <MasterDuke> rakudo builds...

[07:49] <MasterDuke> and passes its tests and a spectest

[07:49] <nine> I'm not terribly surprised

[07:49] <MasterDuke> nor i

[07:51] <nine> So, does this change fix the issue?

[07:51] <MasterDuke> `./nqp-m -e 'for nqp::split(",", "abc,def", "ghasdfi") { say($_) }'` now dies with `Arg count 3 doesn't equal required operand count 2 for op 'split'`

[07:52] <MasterDuke> which i think is a much better result than printing "ghasdfi"

[07:55] <MasterDuke> any reason not to PR that change?

[07:56] <MasterDuke> speaking of PRs, with a week before the release, i think https://github.com/MoarVM/MoarVM/pull/1467 and https://github.com/MoarVM/MoarVM/pull/1464 are pretty non-controversial

[07:57] <MasterDuke> any thoughts from the channel?

[08:02] *** patrickb joined
[08:06] *** patrickb left
[08:18] <nine> Please PR the change :)

[08:36] <MasterDuke> https://github.com/Raku/nqp/pull/714

[08:51] *** Altai-man_ left
[08:53] *** sena_kun joined
[09:18] <nwc10> https://www.csl.cornell.edu/~cbatten/pdfs/cheng-type-freezing-cgo2020.pdf -- Theseadditional operations indeed hurt the interpreter perfor-mance. However, in practice the interpreter executes fora fraction of the overall execution time for many bench-marks. Thus, the overhead induced by the extra logicwe added could be considered as not significant

[09:19] <nwc10> optimised for benchmarks? :-)

[09:34] <jnthn> My own experience tells that real applications are less kind than benchmarks in terms of time spent in the interpreter.

[09:34] <jnthn> The more one relies on that, the larger the warm-up time gets

[09:38] <nwc10> and if you take this too far you ship a JIT that can run an NES emulator very well, but can't help Rails.

[09:39] <nwc10> kind of the same with Pyston and LLVM, I suspect. "Oh pants, we need a baseline JIT too". And Safari?

[09:41] <nwc10> anyway, the approach in that paper shipped as part of the PyPy release a few days ago

[09:45] <jnthn> iirc the CLR (at least initially, maybe still) never did interpret, it just went straight for a quick baseline JIT

[09:45] <jnthn> (quick as in quick to produce the machine code)

[09:46] <jnthn> I guess initially they cared only for x86 (maybe x64) and itainc

[10:00] *** frost-lab left
[10:03] *** frost-lab joined
[11:39] *** Kaeipi joined
[11:40] *** Kaiepi left
[11:43] *** zakharyas left
[12:02] *** frost-lab left
[12:34] <nwc10> I believe that this is not entirely off-topic... :-)

[12:35] <nwc10> So, the ongoing story of hot beverage fail

[12:35] <nwc10> I went round to Andrea's parents to change her mum's car to summer tyers

[12:35] <nwc10> tyres

[12:35] <nwc10> [This is OK. One person visiting relatives]

[12:35] <nwc10> but before I started, I wanted a cup of tea. OH NOES - where is the kettle?

[12:36] <nwc10> so the kettle was unplugged, because it had to go back under guarantee, because it was dysfunctional

[12:36] <nwc10> so, she tried using it

[12:37] <nwc10> it's a fancy kettle - a button to pick 60°C, 70°C ... 100°C and a light to show which and beep to acknowledge input

[12:37] <nwc10> kettle starts in a "disco mode" - beeping and cycling the temerature lights

[12:37] <nwc10> then it deigns to heat water at 80°C for a bit. Then more disco. Then 70°C. Then I give up and use a pan

[12:38] <nwc10> This has triggered Andrea to descale our kettle.

[12:38] <jnthn> Did it ever make anything close to 70 or 80?

[12:38] <nwc10> Not really. Got some way there.

[12:38] <jnthn> Ah. That's pretty useless for tea. :)

[12:38] <nwc10> So boiling water in a pan here during this descaling

[12:38] <nwc10> [yep]

[12:39] <nwc10> first failure - yesterday - water from pan pours out much mroe quickly than a kettle - so comes out of the top of the Aeropress and everywhere onto the kitchen work surface

[12:39] <nwc10> today, thinking that I was going to recount this story and how I'd not F'd up

[12:40] <nwc10> I managed to make the coffee, but then drop the slug of squashed coffee grounds from the Aeropress *into* the cup of coffee

[12:40] <nwc10> (And onto the worksurface)

[12:40] <nwc10> recovered from this with a tea infuser as a sieve and another mug

[12:40] <nwc10> I'm going to make more coffee - what could possible go wrong *this* time?

[12:41] <jnthn> At least you had coffee before making this coffee, so it might go better?

[12:41] <nwc10> I hope so.

[12:42] <nine> Why a pan, not a pot?

[12:42] <jnthn> I only just remembered to order more beans in the latest grocery delivery. Forgetting that would have led to an unfortunate morning in several day's time.

[12:43] *** zakharyas joined
[12:43] <nwc10> oh my. Catastrophe averted

[12:43] <jnthn> The one I used to have at home needed putting ground coffee into it for each cup, so I noticed I was running out. Now it's just a 500g beans container and all too easy to forget about.

[12:44] <jnthn> It has a really silly failure mode where it will 1. grind beans, 2. realize its water tray is full, 3. just dump the ground but unused beans out, thus wasting them. I dunno why it can't figure out 2 before it does 1.

[12:45] <nwc10> nine: unclear if you're using "pan" and "pot" for the same things as I am - Andrea picks different words from me. In each case wanted the smallest cooking vessel that can go on the hob in which I could boil water

[12:59] <nine> nwc10: I was wondering if it may be just a vocabulary issue, so I did an image search of pot https://duckduckgo.com/?q=pot&iax=images&ia=images vs pan https://duckduckgo.com/?q=pan&iax=images&ia=images

[13:02] <nwc10> I have coffee. I have drunk some. However, opportunities remain for spilling the rest

[13:05] <nine> At least you only slipped water. Our filter coffee machine has a timer. You put water and coffee in, set the timer for next morning and are good to go. Except that you need to ensure that the pot is also in place. Otherwise you wake to that delicious coffee smell just to find that you first have to remove it from the kitchen counter and set up a new pot...

[13:06] <nwc10> how cruel

[13:06] <nwc10> and how design fail! - one more microswitch

[13:06] <nine> indeed

[14:39] *** dogbert11 joined
[14:42] *** dogbert17 left
[14:59] <timotimo> https://cdn.discordapp.com/attachments/348807061351563264/831181743281012806/unknown.png

[15:22] <[Coke]> I went from drinking k-cup coffee at home to driving a vehicle to a bakery a few miles away to get an Americano today. Bad Coke.

[15:33] <nwc10> This is awesome. It's quite readable. I'm only halfway through, but so far, to circumvent the GIL, it's "we link the entire Python runtime statically into our shared object, and use a linker script to hide *all* its symbols" and then "we copy our shared library to different names in a temp directory so that we can load it more than once" -- https://arxiv.org/pdf/2104.00254.pdf

[15:33] <nwc10> before that part there's quite a good summary of why Python is a sodbag to JIT.

[15:34] <nwc10> their citations are screwed up and they don't seem to have noticed.

[15:34] <nwc10> also, I assume that the publication date is only a coincidence

[15:49] <MasterDuke> timotimo: second life?

[15:50] <timotimo> MasterDuke: bill wurtz music videos

[15:51] <MasterDuke> huh, don't recognize the name

[15:51] <timotimo> he just recently pivoted to blender from what i assume to have been Flash

[15:55] <timotimo> https://www.youtube.com/watch?v=xuCn8ux2gbs if you want to see something he made that got almost 120 million views

[15:58] <timotimo> but this is only partially music

[16:29] <nwc10> "Both the extensions and code size issues can be resolvedby writing custom dynamic library loading code rather thanrelying on OS primitives likedlopen."

[17:27] *** domidumont left
[17:31] <nwc10> the number of hoops that they are having to go through to work around GIL limitations makes me wonder how long until a language that can thread (R or Julia)? starts to eat into this

[17:32] <nwc10> also, oh my, the security and even just software engineering chalenges of "we package up models as Python code"

[18:09] *** patrickb joined
[18:17] <nwc10> $ perl -le 'printf "%a\n", 3.1414999999999935'

[18:17] <nwc10> 0x1.921cac083126p+1

[18:17] <nwc10> $ perl -le 'printf "%a\n", 3.1415'

[18:17] <nwc10> 0x1.921cac083126fp+1

[18:17] <nwc10> Is it actually possible to do that in NQP? :-)

[18:17] <nwc10> anyway, https://github.com/MoarVM/MoarVM/pull/1385 oh my

[18:18] <nwc10> they differ in the last 4 bits of the mantissa. That seems rather too sloppy to be acceptable

[18:20] <nwc10> patrickb: if t/hll/06-sprintf.t is run on "this week"'s MoarVM is it still producing the same failure output?

[18:22] <patrickb> It should. The fix I was writing about is not upstream.

[18:23] <nwc10> OK, but I can't remember offhand when a fix went into MoarVM that might be relevant

[18:23] <nwc10> oh Dec 11

[18:23] <nwc10> that's so last year

[18:27] *** zakharyas left
[18:28] <nwc10> Offhand, for this expression:

[18:28] <nwc10>    my $float_str := ~$float;

[18:28] <nwc10> where does that land in MoarVM?

[18:29] <nwc10> (what's the route into the C code for that stringification)

[18:31] <patrickb> give me a mome t

[18:32] <patrickb> hm. need to reboot into windows

[18:32] *** patrickb left
[18:33] <MasterDuke> probably coerce_ns or smrt_strify

[18:35] *** patrickb joined
[18:35] * patrickb is back on Windows

[18:36] <nwc10> thanks, but "there might be a delay" until the next question

[18:39] <nwc10> oh wait, I realise I did have one.

[18:39] <nwc10> I think that the code in `scientific` will hit nqp::pow_n(10.0, $exp)

[18:39] <nwc10> so in that test $exp was 20

[18:39] <nwc10> so

[18:40] <nwc10> m: nqp::say(nqp::pow_n(10.0, -20.0))

[18:40] <camelia> rakudo-moar b1556cbad: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::pow_n, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3nqp::say(nqp::pow_n(10.0, -20.0)7⏏5)␤»

[18:40] <nwc10> n: nqp::say(nqp::pow_n(10.0, -20.0))

[18:40] <nwc10> m: use nqp; nqp::say(nqp::pow_n(10.0, -20.0))

[18:40] <camelia> rakudo-moar b1556cbad: OUTPUT: «This type cannot unbox to a native number: P6opaque, Rat␤  in block <unit> at <tmp> line 1␤␤»

[18:40] <nwc10> aargh

[18:40] <MasterDuke> nqp: nqp::say(nqp::pow_n(10.0, -20.0))

[18:40] <camelia> nqp-moarvm: OUTPUT: «1e-20␤»

[18:40] <nwc10> thanks

[18:40] <MasterDuke> heh, np

[18:41] <nwc10> patrickb: so my only current question is does MinGW get the same value?

[18:41] <nwc10> (and did I have it wrong - should my question be about nqp::pow_n(10.0, 20.0) ?

[18:41] <patrickb> currently compiling

[18:41] <nwc10> thanks

[18:58] <nwc10> I stuck a breakpoint on dtoa_grisu3

[18:58] <nwc10> only call was from  src/core/interp.c:888

[18:58] <nwc10> OP(coerce_ns):

[18:58] <nwc10> 888 is supposed to be lucky, isn't it? :-)

[19:00] <MasterDuke> jnthn: in the examples in https://github.com/rakudo/rakudo/pull/4320, why does MVM_SPESH_INLINE_LOG have no mention of either succeeding or failing to inline `infix:<**>`? things get inlined into it, but no other mention

[19:02] <MasterDuke> nwc10: time to buy a chinese lottery ticket i guess?

[19:03] <nwc10> patrickb: not that you've got there yet, but I'm asking the wrong question. my num $exp := nqp::iseq_n($float, 0.0) ?? 0.0 !! nqp::floor_n(nqp::div_n(nqp::log_n($float), nqp::log_n(10.0)));

[19:04] * patrickb builds CORE.c atm...

[19:04] <nwc10> oops, I think that all these questions can be answered in NQP

[19:07] <nwc10> actually, it is 10 and 20

[19:07] <nwc10> er, -20

[19:07] <nwc10> Starting program: /home/nick/Sandpit/moar-g/bin/moar --execname=/home/nick/Perl/nqp/nqp-m --libpath=/home/nick/Perl/nqp nqp.moarvm -e nqp::say\(nqp::sprintf\(\"\<%7.3e\>\",\ \[-3.1415e-20\]\)\)

[19:07] <nwc10> ...

[19:07] <nwc10> 810                         pow(x, y);

[19:07] <nwc10> x is 10, y is -20

[19:08] <nwc10> here, of pow, gdb said

[19:08] <nwc10> Value returned is $3 = 9.9999999999999995e-21

[19:08] <nwc10> if pow(10, -20) is something else on MinGW, then this is the problem

[19:10] <patrickb> nqp::say(nqp::sprintf("<%7.3e>", [-3.1415e-20])) -> <-3.141e-20>

[19:10] <patrickb> that's on mingw

[19:10] <nwc10> OK good, bug still present

[19:11] <nwc10> <-3.142e-20> on x86_64 linux, but I think that that's the only correct answer. As in, there should be no ambiguity.

[19:12] <nwc10> does "nqp::say(nqp::pow_n(10.0, -20.0))" report 1e-20 ?

[19:13] <patrickb> 1.0000000000000022e-20

[19:13] <nwc10> oh my

[19:13] <nwc10> thanks

[19:13] <nwc10> that's our problem.

[19:13] <nwc10> you can reboot to $other (linux?) whenever you need to

[19:14] <patrickb> it's a linux :-)

[19:14] <nwc10> I'm not yet sure whether the easier fix is dammit, just to redo the NQP code to trust the output of the stringification, and then do the rounding as decimal maths with character operations

[19:15] <nwc10> this is, I believe, the long term right answer

[19:15] <nwc10> and might even be faster than trying to bodge round the problem by "emulating" pow_n with multiply

[19:15] <patrickb> rebooting is not that much of a hastle. So just ping me when you need more testing.

[19:16] <nwc10> I'm not confident on a "when", but hiding in the cellar looks like a plan for the next few days: https://www.bbc.co.uk/weather/2761335

[19:17] <nwc10> but there are other things to do (including tidying the cellar, and possibly also "encourage my son to actually do his school work")

[19:17] <nwc10> oh my, if I'm not careful I will get a stroke-by-stroke commentary on writing letters.

[19:17] <nwc10> Unicode eat your heart out - you can decompose ASCII further if you really want to :-)

[19:21] <nine> MasterDuke: there is just one code path where optimize_call won't even make an entry about inlining: when it can't even identify the static frame to inline

[19:21] * patrickb reboots

[19:22] *** patrickb left
[19:24] *** patrickb joined
[19:31] <japhb> Since there are more folks here at this hour -- we *may* have found a problem with the libuv bump that happened a couple months ago.  I and ugexe have both been seeing "Failed to open dir: Too many open files" errors when doing a `zef uninstall`.  ugexe is on MacOS and I'm on Linux, so it doesn't appear to be platform-specific.  When I rolled back to just before the libuv bump, I couldn't recreate it.

[19:32] <nwc10> japhb: yes, erk, seems important but no immediate idea

[19:33] <ugexe> i scanned the libuv changelog but nothing jumped out at me

[19:36] <japhb> ugexe: Gah.  Thanks for taking a look.

[19:41] <ugexe> https://github.com/libuv/libuv/blob/v1.x/ChangeLog#L1-L112

[19:48] <japhb> ugexe: Yeah, the only one that triggered something for me is https://github.com/libuv/libuv/blob/v1.x/ChangeLog#L67

[19:49] <japhb> It's also the only change to mention fd at all since https://github.com/libuv/libuv/blob/v1.x/ChangeLog#L419

[20:01] <ugexe> fwiw testing a given commit is the problem would involve going to the libuv subdirectory of a moarvm installation, reverting the commit, then running `make install` inside the moarvm dir. then running rakudo should have those changes. its unfortunate there isnt a golf to trigger the issue

[20:11] *** zakharyas joined
[20:19] *** patrickb left
[20:55] *** zakharyas left
[21:07] *** dogbert17 joined
[21:09] *** dogbert11 left
[21:22] *** dogbert11 joined
[21:22] *** dogbert11 left
[21:23] *** dogbert11 joined
[21:24] *** dogbert17 left
[21:56] *** dogbert17 joined
[21:59] *** dogbert11 left
[22:01] *** dogbert17 left
[22:02] *** Geth joined
[22:02] *** dogbert17 joined
