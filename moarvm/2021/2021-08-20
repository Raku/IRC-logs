[00:02] *** reportable6 left
[01:02] *** bloatable6 left
[01:02] *** quotable6 left
[01:02] *** shareable6 left
[01:02] *** releasable6 left
[01:02] *** bisectable6 left
[01:02] *** nativecallable6 left
[01:02] *** greppable6 left
[01:02] *** notable6 left
[01:02] *** committable6 left
[01:02] *** sourceable6 left
[01:02] *** squashable6 left
[01:02] *** statisfiable6 left
[01:02] *** coverable6 left
[01:02] *** evalable6 left
[01:02] *** unicodable6 left
[01:02] *** tellable6 left
[01:02] *** benchable6 left
[01:02] *** linkable6 left
[01:03] *** sourceable6 joined
[01:03] *** squashable6 joined
[01:03] *** shareable6 joined
[01:04] *** bisectable6 joined
[01:04] *** tellable6 joined
[01:05] *** evalable6 joined
[01:05] *** benchable6 joined
[01:05] *** releasable6 joined
[01:05] *** reportable6 joined
[01:05] *** statisfiable6 joined
[01:05] *** greppable6 joined
[02:04] *** nativecallable6 joined
[02:05] *** unicodable6 joined
[03:04] *** quotable6 joined
[03:04] *** committable6 joined
[03:05] *** coverable6 joined
[04:04] *** linkable6 joined
[04:50] *** frost joined
[05:05] *** bloatable6 joined
[06:02] *** reportable6 left
[06:03] *** notable6 joined
[07:03] *** reportable6 joined
[07:59] *** linkable6 left
[09:01] *** linkable6 joined
[09:22] *** frost left
[10:24] *** lizmat left
[10:25] *** lizmat joined
[12:03] *** reportable6 left
[12:06] *** reportable6 joined
[14:08] *** committable6 left
[14:08] *** benchable6 left
[14:08] *** bisectable6 left
[14:08] *** sourceable6 left
[14:08] *** evalable6 left
[14:08] *** nativecallable6 left
[14:08] *** reportable6 left
[14:08] *** unicodable6 left
[14:08] *** bloatable6 left
[14:08] *** quotable6 left
[14:08] *** squashable6 left
[14:08] *** shareable6 left
[14:08] *** releasable6 left
[14:08] *** greppable6 left
[14:08] *** tellable6 left
[14:08] *** notable6 left
[14:08] *** coverable6 left
[14:08] *** statisfiable6 left
[14:08] *** linkable6 left
[14:09] *** shareable6 joined
[14:10] *** evalable6 joined
[14:10] *** reportable6 joined
[14:10] *** squashable6 joined
[14:10] *** bloatable6 joined
[14:10] *** sourceable6 joined
[14:10] *** notable6 joined
[14:11] *** tellable6 joined
[14:12] *** releasable6 joined
[14:12] *** benchable6 joined
[14:20] <dogbert17> MaterDuke++, nice work yesterday

[14:21] <dogbert17> that should ofc be MasterDuke++

[14:32] <dogbert17> there are two juicy new-disp bugs waiting for the rr experts :)

[15:10] *** statisfiable6 joined
[15:27] *** leont left
[15:31] *** leont joined
[16:09] *** quotable6 joined
[16:10] *** coverable6 joined
[16:10] *** linkable6 joined
[16:11] *** nativecallable6 joined
[16:11] *** unicodable6 joined
[16:11] *** bisectable6 joined
[16:15] <nine> there are_

[16:15] <nine> ?

[16:20] <dogbert17> nine: indeed

[16:21] <dogbert17> t/spec/S32-io/utf16.t hangs with MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 and a small nursery (12k)

[16:21] <dogbert17> t/spec/S04-statements/with.t fails to comipile given the same settings

[17:09] *** greppable6 joined
[17:10] *** committable6 joined
[18:02] *** reportable6 left
[19:03] *** reportable6 joined
[19:56] <vrurg> How hard would it be to add atomics support to NQP?

[20:07] <lizmat> isn't it already in nqp as nqp:: ops ?

[20:09] <lizmat> $ nqp -e 'my int $a; nqp::atomicstore($a,42)'

[20:09] <lizmat> Cannot perform atomic store to a non-container value of type BOOTInt

[20:09] <vrurg> lizmat: that's it. There is no atomicint.

[20:09] <lizmat> but isn't that just a matter of definition?

[20:10] <lizmat> afaik, the "atomicint" is reallt just an int64 ?

[20:10] <lizmat> the magic being in the ops, *not* in the variable ?

[20:10] <lizmat> going afk&

[20:11] <vrurg> In the core it is 'my native atomicint is repr('P6int') is Int is ctype('atomic') { } '

[20:11] <vrurg> ctype is what's missing for NQP.

[20:11] <lizmat> I see   :-(

[20:11] <lizmat> afk&

[20:14] *** evalable6 left
[20:14] *** linkable6 left
[20:15] *** evalable6 joined
[20:16] *** linkable6 joined
[20:44] <vrurg> Ok, correct me if I'm wrong, but atomics wouldn't work without containers. So, no go for NQP.

[21:04] *** squashable6 left
[21:07] *** squashable6 joined
[21:10] <timo> atomics can work on locals by way of NativeRef, right?

[21:11] <timo> maybe we can only sensibly emit that at the qast level at the moment in nqp

[21:11] <timo> "is ctype('atomic')" is only for getting the right size, isn't it?

[21:36] <timo> but yeah, nqp doesn't build containers by itself, and if we can't "just" get a nativeref or similar with "is rw" or so, that will need ome extra work

[22:23] <vrurg> timo: but that'd require more work than it worth, perhaps.

[22:27] <timo> do you have anything in particular in mind?

[22:41] <vrurg> No. I just played with adding atomicint to NQP (required a grammar fix) only to realize that nqp::cas results in a "not a container" kind of error.

[22:42] <timo> yeah, nqp also doesn't have "is rw"

[22:44] <vrurg> That's easy to understand. But with atomic I needed the error message to realize the fact. :)

[22:45] <timo> have you tried adding something to t/nqp/104-refs.t? there are reference types there which may support atomic ops

[22:48] <vrurg> No. I didn't even know that exists. But looks promising. Unfortunately, I have discarded all changes in NQP already. Would have to try it later.

[23:21] *** linkable6 left
[23:21] *** evalable6 left
[23:21] *** evalable6 joined
[23:25] <timo> the nqp test suite is a little treasure trove in general

