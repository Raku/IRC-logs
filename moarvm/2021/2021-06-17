[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[05:24] *** linkable6 left
[05:24] *** evalable6 left
[05:24] *** evalable6 joined
[05:26] *** linkable6 joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[07:39] <Nicholas> nine: did I read that right - a pure Raku re-implementation is within 50% of the speed of Perl with Inline::C ?

[07:42] <nine> indeed

[07:42] <Nicholas> That seems newsworthy

[07:42] <japhb> That is *awesome*

[07:43] <moon-child> nine++++

[07:43] <Nicholas> so, how many programmers competant at C do you have at work? And how many competant to maintain that code now? :-)

[07:43] <japhb> Not just C, XS

[07:43] <Nicholas> (this might actually be the same number. I phrased it slightly carefully)

[07:44] <nine> To be fair, I probably could have gotten at least a factor of 10 (maybe 100?) more out of the Perl solution - by turning it into a C thing with Perl essentially just being the program loader. But essentially I pushed the hybrid code as far as I could without re-doing the whole architecture.

[07:44] <Nicholas> japhb: if it's "only" Inline::C it might be possible to make it work without knowing XS. If all you're doing are "leaf" functions. *BUT* as soon as you get to arrays, it's going to need XS

[07:44] <Nicholas> nine: and your factor of 10 would save you how much hardware?

[07:45] <Nicholas> (I'm guessing this isn't like my ex $ork, where not-in-C is going to get *expensive*)

[07:45] <Nicholas> (like maybe a 6 figure sum)

[07:45] <japhb> Nicholas: He quoted lines like "double const geo_distance = SvNV(*(hv_fetch(distances_hv, name_pv, name_len, 0)));" so I figured he was well into XS land.

[07:45] <nine> The problem in this case is not really hardware cost, but development time. The simulation requires tuning every so often (due to changes in usage patterns). And this requires running it a lot, wasting hours and hours.

[07:46] <Nicholas> oh, I missed that. Yes, that's well into XS

[07:46] <Nicholas> aha.

[07:46] <Nicholas> but, now you can parallelise it? :-)

[07:46] <nine> The point where I figured that Raku may have a shot is actually that hash access. Because we have proper objects and attribute access is lightning speed compared to hash access.

[07:47] <nine> Yes, and just adding ".hyper" in a single place already got me to 3.5s Raku vs. 5s Perl in my 200 iteration test case

[07:47] <japhb> I still have to remind myself of that (the switch from Perl on attribute v. hash element access)

[07:47] <nine> Unfortunately this revealed the issue I mentioned in #raku-dev yesterday, but we'll fix that at some point

[07:49] <nine> Being only twice as slow is already a victory and makes it possible to use this in production. The point of the exercise is that someone else but me can take over maintenance and tuning, and having to grok that XS stuff in addition to the math is asking just a bit too much

[07:50] <nine> And maybe we can fix the .hyper issue in time, then it's a done deal for sure

[07:54] <nine> I also think that it took me less time to speed up the Raku version than the original Perl code.

[08:05] <lizmat> maybe that leaves time for a blog post  :-)

[08:08] *** LizBot left
[08:09] *** LizBot joined
[08:09] *** LizBot left
[08:09] *** LizBot joined
[08:24] *** LizBot left
[08:24] *** LizBot joined
[08:25] *** LizBot left
[08:25] *** LizBot joined
[08:54] <MasterDuke> nine: where was it you said the precomp renaming should be patched for windows?

[08:59] <nine> MasterDuke: CompUnit::PrecompilationStore::File

[09:01] <MasterDuke> thanks

[09:14] *** linkable6 left
[09:16] *** linkable6 joined
[09:21] <jnthnwrthngtn> nine: I'm looking for an issue for the hyper thing you mentioned; is it still to be created or did you plan to look at it yourself?

[09:31] <nine> jnthnwrthngtn: ah, sorry, will create an issue right away. Since I investigate most issues I find myself, I'm lazy about feeding Github. But help would be greatly appreciated!

[10:04] <nine> jnthnwrthngtn: https://github.com/rakudo/rakudo/issues/4410

[10:50] <jnthnwrthngtn> Hm, that error implicates a supply or react block somewhere

[10:51] <jnthnwrthngtn> The Supplier patch is thus very unlikely to be guilty

[11:00] <jnthnwrthngtn> Hm, though with the stacktrace Liz just posted it looks a bit like some object is undefined and we end up calling .emit in Mu where we shouldn't be

[11:00] <nine> Yes, that's about how far I got. Which made me suspect spesh, but that turned out to be wrong

[11:05] <jnthnwrthngtn> I suspect it's a race

[11:05] <jnthnwrthngtn> .oO( The clue's in the name of the construct! )

[11:06] <jnthnwrthngtn> More likely at the raku level than deeper

[11:07] <MasterDuke> is it just .hyper or .race also?

[11:07] <nine> race also

[11:16] *** Altai-man joined
[11:19] *** sena_kun left
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[15:42] *** bisectable6 left
[15:42] *** unicodable6 left
[15:42] *** benchable6 left
[15:42] *** tellable6 left
[15:42] *** quotable6 left
[15:42] *** bloatable6 left
[15:42] *** shareable6 left
[15:42] *** committable6 left
[15:42] *** reportable6 left
[15:42] *** releasable6 left
[15:42] *** greppable6 left
[15:42] *** notable6 left
[15:42] *** coverable6 left
[15:42] *** linkable6 left
[15:42] *** sourceable6 left
[15:42] *** squashable6 left
[15:42] *** statisfiable6 left
[15:42] *** nativecallable6 left
[15:42] *** evalable6 left
[15:43] *** releasable6 joined
[15:43] *** greppable6 joined
[15:43] *** statisfiable6 joined
[15:43] *** benchable6 joined
[15:43] *** notable6 joined
[15:43] *** bloatable6 joined
[15:44] *** tellable6 joined
[15:44] *** reportable6 joined
[15:44] *** shareable6 joined
[15:44] *** linkable6 joined
[15:44] *** squashable6 joined
[15:45] *** coverable6 joined
[15:45] *** sourceable6 joined
[15:45] *** evalable6 joined
[15:45] *** bisectable6 joined
[15:45] *** committable6 joined
[15:45] *** quotable6 joined
[15:45] *** unicodable6 joined
[15:45] *** nativecallable6 joined
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[19:00] *** linkable6 left
[19:02] *** linkable6 joined
[19:05] *** Kaiepi left
[19:24] *** ilogger2 left
[19:24] *** ilogger2 joined
[20:45] *** Kaiepi joined
[20:49] *** squashable6 left
[20:50] *** squashable6 joined
[20:51] *** squashable6 left
[20:53] *** squashable6 joined
[21:39] *** linkable6 left
[21:42] *** linkable6 joined
[22:58] *** bisectable6 left
[22:59] *** bisectable6 joined
[23:00] *** linkable6 left
[23:03] *** linkable6 joined
