[00:17] *** squashable6 left
[00:19] *** squashable6 joined
[00:47] *** lizmat joined
[01:55] *** ggoebel_ left
[01:57] *** dogbert2 joined
[01:57] *** MasterDuke left
[02:17] *** ggoebel_ joined
[05:47] *** japhb left
[07:58] *** vesper11 joined
[08:07] <El_Che> when packaging there are precomp files here: opt/rakudo-pkg/share/perl6/core/precomp/*

[08:07] <El_Che> I can get read of those

[08:07] <El_Che> but I also see precomp files in opt/rakudo-pkg/share/perl6/core/short/*

[08:08] <El_Che> and in ./share/perl6/core/sources/*

[08:30] *** vesper11 left
[08:37] *** patrickb joined
[08:38] *** domidumont joined
[09:41] <nine> El_Che: what's that about?

[10:38] <jnthn> morning o/

[10:38] <nwc10> \o

[10:40] <nine> \o/

[10:50] <jnthn> So...let's have a go at the method dispatch resume stuff

[11:16] <El_Che> jnthn: are the files in share/perl6/core/sources/* used or are they precomp as well and can they safely be deleted?

[11:16] <nine> They are used

[11:16] <nine> And why do you think precomp stuff can be deleted?

[11:16] <El_Che> because for modules they are regenerated

[11:17] <nine> Why regenerate when they are already generated?

[11:18] <El_Che> it's for a package

[11:18] <nine> so?

[11:18] <El_Che> smaller pkg size

[11:19] <El_Che> I am ok to living them there, just wondering

[11:19] <nine> As a user of packges I certainly appreciate not having to wait for minutes to compile stuff. That's why I use packages in the first place

[11:19] <El_Che> good point

[11:20] <nine> The whole way how these repositories are structured is to facilitate packaging

[11:22] <jnthn> I'm pretty sure they've changed enough to facilitate packaging that anything I might have known about them is now outdated. :)

[11:27] <nine> Well, some has, some has not. In any case it was a very interesting exercise to essentially create a database index that does not require modifying existing files :)

[11:34] <jnthn> Ooh, yes.

[11:34] <jnthn> Because packages should ideally only add files.

[11:34] <jnthn> Not tweak existing ones

[11:34] <nine> exactly

[11:35] <jnthn> I'm really glad you took over working on this stuff; packaging is absolutely not me strong point :)

[11:35] <jnthn> *my

[11:36] <nine> But, but, you missed all the fun :D

[11:37] <nine> But yes, packaging is quite important to me (because I just got fed up waiting for hours to install CPAN packages on any new machine or after server upgrades). Nice how different interests complement each other :)

[11:44] <jnthn> Tssk, looks like I have another (probably silly) buglet to track down...

[11:46] <jnthn> "Literal object of type Exhausted"...the most Friday bit of debug output

[11:50] <jnthn> It was silly and easy to find. Yay, one-level deferral works.

[11:58] <jnthn> Yay, now n-level also :)

[12:00] <nine> that was fast

[12:01] <nwc10> he must be hungry

[12:02] <nwc10> that, or there's something particularly good waiting in the beer fridge

[12:02] <jnthn> I'd already written a test case in the dispatcher test suite that showed it should work in theory, so the question was whether there'd be any surprises once I used that approach on the Rakudo dispatcher implementations.

[12:02] <jnthn> Thankfully, there weren't.

[12:04] <jnthn> And yes, I am hungry; thankfully I can hear soup being blended :)

[12:05] <jnthn> There already is some pretty nice things in the beer fridge, but later this afternoon I'll make the short walk to the Belgian beer bar, where some further nice things are waiting for me to collect.

[12:05] <jnthn> I'm hopeful that if enough folks order/collect stuff from them, they'll manage to survive.

[12:07] <jnthn> lunch, bbiab

[13:13] <jnthn> Spesh doesn't really know that much about new-disp yet. Despite that:

[13:13] <jnthn> https://gist.github.com/jnthn/742ffa9d1dce49186a7b524dce31436f

[13:36] <patrickb> Wow! That's a factor 7 faster!

[13:40] <Altai-man_> jnthn++

[13:45] <nine> Woah!

[14:21] <jnthn> OK, nextcallee and lastcall were about as easy as hoped.

[14:22] <jnthn> callwith and nextwith need quite a bit more thought

[14:22] <jnthn> Though next I'll do either multi dispatch resumption or, given it's Friday, probably wrap since it's rather easier

[14:22] <jnthn> walk, bbs

[15:30] * jnthn back

[16:36] *** ggoebel__ joined
[16:36] *** ggoebel_ left
[17:00] *** patrickb left
[17:05] *** patrickb joined
[18:03] *** domidumont left
[18:08] *** MasterDuke joined
[18:19] <jnthn> OK, wrap/unwrap successfully implemented in terms of new-disp

[18:25] <jnthn> Speedup is bigger on this one than the method one. https://gist.github.com/jnthn/1bf4fda2eaea2d6b8b3a4ed5d89c4deb

[18:25] <jnthn> Oh, no, it's not quite fair

[18:25] <jnthn> Because it's only doing two levels of callsame, not 4

[18:26] <jnthn> And quite a bit of the win is in re-using setup work

[18:26] <jnthn> otoh, using multiple wrappers is unusual

[18:26] <jnthn> So maybe this is quite representative

[19:00] <[Coke]> has to feel nice seeing the payoffs

[19:00] <jnthn> Yes, finally! :)

[19:03] <nwc10> if theese numbers hold out, it's going to make the speedups from the hashes look extremeley "meh, whatever"

[19:03] <vrurg> Where is the "like" button on IRC? :)

[19:04] <nwc10> it's very impressive

[19:05] <patrickb> The big question is what new-disp will do to the most common "normal" sub and method calls.

[19:06] <jnthn> Yes, indeed. There's quite a lot of things at play there.

[19:06] <nwc10> jnthn: t/04-nativecall/18-routine-sig-sanity.t passes all 33 tests but ends with

[19:06] <nwc10> MoarVM panic: Invalid owner in item added to GC worklist

[19:06] <jnthn> Joy!

[19:06] <nwc10> I guess that's +#define MVM_GC_DEBUG 1

[19:07] <nwc10> ASAN expresses the usual disdain. Long may this continue

[19:07] <jnthn> Yeah. I managed to get a one-off SEGV earlier too, so I know I've got something to hunt

[19:07] <jnthn> I'm glad of ASAN being content with it :)

[19:09] <nwc10> did you walk result in interesting provisions from the Belgium bar?

[19:10] <jnthn> Yes.

[19:10] <nwc10> Excellent.

[19:10] <jnthn> Which have been cooling for some hours now

[19:13] <jnthn> Conveniently, that place is about 2 minutes away from the model railway store, where I also had an order to collect. So I've got some afk things to play with this weekend as well. :)

[19:15] <nwc10> oh well, actually ASAN is still excited by t/02-rakudo/15-gh_1202.t but that's not news

[19:15] <nwc10> oooh, maybe

[19:17] <nwc10> http://paste.scsys.co.uk/594534

[19:24] <jnthn> ooh, hmm

[19:24] <jnthn> Thanks

[19:24] <jnthn> Will look later; dinner now

[19:25] <nwc10> I think that there might have been a second fly past. I'd not surpressed the leak checks, and they were making a lot of (black and white) noise

[19:25] <nwc10> enjoy dinner

[19:35] *** evalable6 left
[19:35] *** linkable6 left
[19:38] *** linkable6 joined
[19:38] *** evalable6 joined
[19:40] *** MasterDuke left
[19:41] *** MasterDuke joined
[20:25] <nine> Regarding the leak checks: I wonder if we should enable --full-cleanup for processes used in the build (including the local rakudo-m runniner for use by uninstalled rakudo). There are quite a few places where one needs to enable it in various ways to get useful asan output.

[20:25] <nine> I figure, it won't hurt to have it on all the time when it's just for build and test and it would give this more involved code path much more exercise

[21:39] <MasterDuke> seems to make sense

[21:45] <MasterDuke> i just compiled with --ubsan to see if it showed anything that would help me with this panic/segv. it found two unrelated things (and one maybe related, looking at that one now):

[21:45] <MasterDuke> src/6model/serialization.c:1704:21: runtime error: left shift of 4239 by 52 places cannot be represented in type 'long int'

[21:45] <MasterDuke> src/6model/reprs/MVMMultiCache.c:290:5: runtime error: null pointer passed as argument 2, which is declared to never be null

[21:46] <MasterDuke> that's just from running one file of the nqp build

[21:52] <MasterDuke> m: say 4239 +< 52

[21:52] <evalable6> MasterDuke, rakudo-moar 842bbae3c: OUTPUT: «19090758820423532544␤»

[21:53] <MasterDuke> m: say (4239 +< 52) - 2**64

[21:53] <evalable6> MasterDuke, rakudo-moar 842bbae3c: OUTPUT: «644014746713980928␤»

[22:18] <MasterDuke> wow, ubsan really doesn't like how we access a lot of structs/unions. tons of `runtime error: member access within misaligned address 0x562299711ae4 for type 'union MVMRegister', which requires 8 byte alignment` and also for various structs

[22:45] *** MasterDuke left
[22:45] *** MasterDuke joined
