[00:09] *** colomon joined
[05:08] *** TEttinger joined
[08:47] *** rurban joined
[10:23] *** brrt joined
[10:24] <brrt> \o

[10:24] <nwc10> o/

[10:25] <brrt> ehm

[10:25] <brrt> hmm

[10:26] <brrt> table generation looks like it'll take O(m*n^2) iterations

[10:26] <brrt> n will at least be 100, 200

[10:26] <brrt> so that... sucks, i think

[10:27] <brrt> but it's probably worth it to do it at preprocessing time rather than at runtime

[10:27] <brrt> maybe any of you know of a cheap way to represent a sparse 3-dimensional array

[10:28] <brrt> or a cheap way to test filter impossible combinations

[10:28] <brrt> (e.g. (add reg (const)) can be combined with (add reg reg) but not with (add reg (load mem))

[10:29] <jnthn> brrt: Tree?

[10:29] <jnthn> brrt: Bloom filter?

[10:29] <brrt> i'm unfamiliar with a bloom filter

[10:29] <jnthn> (for the "represent" and "filter" respectively)

[10:30] <jnthn> Oh, they're cool!

[10:30] <brrt> i thought about a tree, yes

[10:30] <jnthn> https://en.wikipedia.org/wiki/Bloom_filter

[10:30] <brrt> but i figure the key has to be at least three words long, and repeated

[10:30] <brrt> or the value should be the marker for another tree

[10:30] <brrt> let's read about it :-) (the bloom filter)

[10:33] <brrt> ok, i agree, that's pretty cool

[10:34] <brrt> not sure if necessarily  what i want, but cool :-)

[10:35] <brrt> i think the problem to: i can combine rule a and rule b, if for all children c identified by i, a[i] can reduce to b[i] or b[i] can reduce to a[i]

[10:36] <brrt> e.g. (const) can reduce to reg, as can (load mem), but (const) cannot be reduced to (load mem) or the other way arround

[10:37] * brrt bbl

[10:38] <brrt> thanks for that link, though :-)

[10:52] *** lizmat joined
[11:00] *** bonsaikitten joined
[11:00] *** hoelzro_ joined
[11:11] *** timotimo joined
[11:12] *** retupmoca joined
[12:22] *** vendethiel joined
[12:46] <nebuchadnezzar> hello

[12:46] <lizmat> nebuchadnezzar o/

[12:47] <nebuchadnezzar> I'm preparing the 2015.07 Debian package which permit to enable mipsel arch using libffi (and possibly others too)

[12:47] <lizmat> ++nebuchadnezzar

[12:48] <nebuchadnezzar> Is there any reason not to use libffi for all arch or should I limit the libffi case to thoses dyncall does not support?

[12:50] <lizmat> nebuchadnezzar: jnthn FROGGS moritz brrt might know

[12:50] <jnthn> I'd do the latter for now.

[12:50] <jnthn> As dyncall is what most folks are working against, and so that codepath is much better tested

[12:59] <nebuchadnezzar> ok, I'll do that

[12:59] <nebuchadnezzar> thanks

[13:01] <moritz> lizmat: fwiw I don't know all that much about MoarVM; I just hang out here :-)

[13:16] <lizmat> moritz: but you have some dyncall / libffi knowledge ?

[13:22] <moritz> lizmat: negative

[13:23] <lizmat> moritz++    # nonetheless  :-)

[13:24] <moritz> :-)

[13:26] * jnthn is glad moritz++ hangs out here :)

[13:53] *** brrt joined
[13:53] *** FROGGS__ joined
[14:02] *** brrt left
[14:57] *** rurban joined
[15:13] *** ggoebel joined
[15:55] *** TEttinger joined
[17:08] *** zakharyas joined
[17:13] * timotimo is looking at the "suddenly decont" issue again a little bit

[17:16] <timotimo> oh, look, there's a substr + eq in the compile_mastop method that can become an eqat instead

[17:17] <timotimo> anyway. i put a debug print into the "if @deconts[$arg_num]" part of that method and it doesn't seem to trigger for the rpoblematic case i'm looking at

[17:21] <timotimo> oh, aha, getting somewhere now

[17:49] <masak> timotimo++

[18:08] <timotimo> i'm not 100% sure how exactly code should look that references a local "into" a localref

[18:08] *** brrt joined
[18:08] <timotimo> currently using a bind onto a localref will complain

[18:09] <timotimo> but maybe that's exactly what we want?

[18:38] <brrt> aw, yeah

[18:38] * brrt has tiling working

[18:39] <brrt> the only trick is efficient translation to a C header file

[18:39] <timotimo> ooooh

[18:39] <timotimo> tiling works?

[18:40] <timotimo> oh, you probably mean just the preprocessor?

[18:40] <brrt> well, the preprocessor, but the tiling algorithm, too :-)

[18:40] <brrt> just implemented in perl rather than c

[18:42] <timotimo> ah

[18:42] <timotimo> neato :)

[18:42] <timotimo> we're getting close to actual assembly code getting spit out?

[18:44] <timotimo> it's food time locally

[18:44] <brrt> hmmm... yeah, conceptually a lot closer, at least

[18:44] <timotimo> buy maybe after that i'll look a bit more into the graph.c parsing thing

[18:45] <brrt> don't worry about it too much

[18:45] <brrt> :-)

[19:00] <brrt> \o/

[19:00] <dalek> MoarVM/even-moar-jit: 8be7d2a | brrt++ | / (3 files):

[19:00] <dalek> MoarVM/even-moar-jit: Generate tiler tables in perl

[19:00] <dalek> MoarVM/even-moar-jit:

[19:00] <dalek> MoarVM/even-moar-jit: Add a testcase to check the suitability for tiling actual trees.

[19:00] <dalek> MoarVM/even-moar-jit: The next step is the to represent this in some static data

[19:00] <dalek> MoarVM/even-moar-jit: structure suitable for search in the VM.

[19:00] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/8be7d2a5dc

[19:00] <brrt> this was *such* a brain killer

[19:02] <brrt> i'm wondering how it'll perform for a bigger grammar

[19:09] <brrt> not perfectly, but i suspect that's due to grammar inconsistency

[19:18] <dalek> MoarVM/even-moar-jit: 8761634 | brrt++ | tools/tiler-table-generator.pl:

[19:18] <dalek> MoarVM/even-moar-jit: Ambiguous test case

[19:18] <dalek> MoarVM/even-moar-jit:

[19:18] <dalek> MoarVM/even-moar-jit: How do we deal with ambiguity? Well enough, it seems.

[19:18] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/8761634ce9

[19:20] <brrt> ooh... it is dramatically slow though

[19:22] <brrt> hmmm

[19:22] <brrt> well...

[19:22] <brrt> we'll see what we do about that

[19:23] *** zakharyas joined
[19:24] <brrt> worst case we can commit the stored preprocessed tiles

[19:24] <brrt> and distribute them that way

[19:27] * brrt afk for now

[19:27] <brrt> or, wait afk in a few minutes

[19:32] *** brrt left
[20:27] *** rurban joined
[21:34] <jnthn> brrt++ # JIT progress

[21:34] <jnthn> timotimo: iirc binding to localref is needed; I think we find to lexicalref to handle "is rw" native parameters

[21:38] <jnthn> uh, s/find/bind/

[21:38] <jnthn> Apparently I made good use of The Bishop's Arms near my hotel :)

[23:12] <timotimo> ok 4 - a localref'd var can have a local ref'd thing bound to it and accessed (str)

[23:12] <timotimo> so the code had been right all along, but the test was b0rked?

[23:13] <timotimo> i feel dumb :)

[23:15] <timotimo> especially dumb for bothering jnthn about it so often

[23:21] *** harrow joined
