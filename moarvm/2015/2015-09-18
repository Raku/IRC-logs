[00:55] *** tokuhiro_ joined
[03:50] *** vendethiel joined
[07:18] *** FROGGS joined
[07:38] *** brrt joined
[07:39] <brrt> good UGT

[07:41] <nwc10> good UGT, brrt

[07:42] <brrt> hey

[07:43] <brrt> you guys fixed it? :-o

[07:43] <brrt> jnthn++

[07:44] <brrt> oh, the 6th arg explains why it didn't go wrong for jnthn

[07:45] <brrt> 6th win32 arg is stack-passed, on unix it's register-passed

[07:47] <brrt> FROGGS: MVM_JIT_REG_VAL and MVM_JIT_REG_VAL_F are really the same op. MVM_JIT_LITERAL is meant for smallish integers, MVM_JIT_LITERAL_64 and friends not

[07:48] <brrt> jnthn++

[07:51] <brrt> we can actually replace that, i think, with a fits_in_32_bit check

[08:10] <FROGGS> :o)

[08:20] *** vendethiel joined
[08:27] <brrt> anyway, thanks for fixing that :-)

[09:06] * brrt can, somewhat uselessly, confirm that it works for him too

[09:07] <FROGGS> hehe, that's still nice to know :o)

[09:07] <FROGGS> brrt: btw, what are your next steps? fix more bugs?

[09:09] <brrt> ehm, yes, i guess so

[09:09] <brrt> there are still vast maps of NYI in the JIT compiler that should be implemented

[09:09] <brrt> but first and foremost i want to remove bugs

[09:10] <brrt> there is a bug somewhere in the new JIT that seems to return the wrong value in a routine

[09:10] <brrt> i'm going to see if i can golf that

[09:10] <brrt> and why it's broken

[09:11] <FROGGS> brrt: I can't help you in any area, right?

[09:11] <brrt> hmmm

[09:11] <brrt> well, how good are you with GDB? :-P

[09:11] <brrt> i can tell you what i know is going wrong, and maybe you have an idea

[09:12] <brrt> actually, the truth is, i know very little of what is going wrong yet

[09:12] <FROGGS> well, fell free to paste a test case

[09:13] <brrt> hmm

[09:13] <FROGGS> feel*

[09:13] <brrt> my 'testcase' is basically 'run moar in gdb. see where it blows up'

[09:14] <FROGGS> how do you run moar? nqp-m -e'' ?

[09:15] <brrt> https://gist.github.com/bdw/56dd8b724f55e79183ce

[09:15] <brrt> is what i do

[09:15] <brrt> MVM_JIT_EXPR_ENABLE is what is necessary to enable the expression compiler

[09:23] <FROGGS> looks like it blows up here in the elems op

[09:24] <brrt> aye

[09:24] <brrt> but why?

[09:24] <brrt> i'd have to look at the code that is being compiled

[09:24] <FROGGS> valgrind is unhappy too

[09:24] <brrt> oh, that helps

[09:24] <brrt> about what?

[09:25] <FROGGS> https://gist.githubusercontent.com/FROGGS/9dc924b7a89239b18adb/raw/f679483a43cc9a7fa80bbe46442458285dffd602/gistfile1.txt

[09:27] <brrt> aw, that's awful

[09:29] <FROGGS> it is

[09:29] <brrt> hmm

[09:29] <brrt> i wonder why

[09:42] <brrt> FROGGS++ that's a huge help though

[09:42] <brrt> (my suspicion is that valgrind makes it crash because it zeroes out memory?)

[09:50] <brrt> oh, hmm

[09:50] <brrt> you may want to do a make reconfig before you run even-moar-jit?

[09:50] <brrt> that's basically the generic advice in any case :-)

[09:51] <FROGGS> I recompiled moar, yes

[09:51] <brrt> i'm not getting a crash, though

[09:51] <brrt> but still

[09:51] <FROGGS> not nqp though, but I think that's no needed

[09:51] <FROGGS> hmmm

[10:01] <FROGGS> one of the Invalid read of size 8 seems to be about info->tile->right_sym at tile.c:197

[10:03] <brrt> aye

[10:03] <brrt> i see why that should be so

[10:05] <FROGGS> do tell

[10:07] <brrt> it's realloced in assign_tile when we need more space due to tile resolution

[10:07] <brrt> however

[10:08] <brrt> when i remove that

[10:08] <brrt> it still hapens

[10:08] <brrt> happens

[10:12] <dalek> MoarVM/even-moar-jit: c5733aa | brrt++ | src/jit/ (2 files):

[10:12] <dalek> MoarVM/even-moar-jit: Don't cache from realloced array

[10:12] <dalek> MoarVM/even-moar-jit:

[10:12] <dalek> MoarVM/even-moar-jit: This silences valgrind, but does not solve the wrong-value-return

[10:12] <dalek> MoarVM/even-moar-jit: bug

[10:12] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/c5733aaf46

[10:15] <FROGGS> yeah, the only oddness thath stays is this:

[10:15] <FROGGS> ==10392== Jump to the invalid address stated on the next line

[10:15] <FROGGS> ==10392==    at 0x0: ???

[10:15] <FROGGS> ==10392==    by 0x4F9B2EA: MVM_interp_run (interp.c:2603)

[10:17] <brrt> hmmmm

[10:20] <FROGGS> what happens when you do that? memcpy(88582584, 88582584, 40)

[10:20] <FROGGS> ohh wait

[10:21] <FROGGS> nvm, that was my stupidity

[10:23] <brrt> where should i have done it? :-)

[10:23] <FROGGS> no havn't :o)

[10:24] <FROGGS> lunch &

[10:25] * brrt also lunch &

[10:50] *** vendethiel joined
[10:55] *** colomon joined
[11:17] *** brrt joined
[11:52] *** FROGGS joined
[12:01] *** brrt joined
[12:24] <brrt> ok, i'm now diffing the code pieces

[12:28] <FROGGS> code pieces of what?

[12:28] <FROGGS> generated code?

[12:28] <FROGGS> old jit vs new jit?

[12:32] <brrt> aye

[13:05] <brrt> something seems to be pretty wrong...

[13:10] <[Coke]> new jit, same as the old jit.

[13:10] *** rarara joined
[13:10] <brrt> new jit, worse than the old jit :-(

[13:11] <[Coke]> sorry, that was a reference to the band the Who, not your coding skills. :)

[13:13] *** Peter__R joined
[13:16] <brrt> :-)

[13:21] <brrt> i wonder what the JIT thought it was doing

[13:21] <FROGGS> O.o

[13:29] *** colomon joined
[13:31] <brrt> there is a call in the middle of that code

[13:32] <brrt> and it's weird

[13:38] <brrt> hmmm

[13:38] <brrt> maybe it's the write barier i'm looking at

[14:12] *** FROGGS joined
[14:15] <FROGGS> o/

[15:08] *** synbot6 joined
[15:43] <timotimo> o/

[16:00] *** Peter_R joined
[16:24] *** vendethiel joined
[16:28] *** Peter_R joined
[17:12] *** Peter_R joined
[17:31] *** Peter_R joined
[17:38] *** Peter_R joined
[17:54] *** Peter_R joined
[18:00] *** Peter_R joined
[19:27] *** zakharyas joined
[19:41] *** FROGGS joined
[22:57] *** Peter_R joined
