[00:33] *** tokuhiro_ joined
[01:01] *** kjs_ joined
[02:24] *** ggoebel joined
[02:35] *** tokuhiro_ joined
[02:47] *** ilbot3 joined
[03:05] *** tokuhiro_ joined
[03:39] *** vendethiel joined
[05:39] *** xiaomiao joined
[07:04] *** domidumont joined
[07:09] *** domidumont joined
[07:20] *** FROGGS joined
[08:14] *** brrt joined
[08:14] <brrt> good *

[08:14] <brrt> btw, nwc10, if you keep on giving me articles like that, i won't ever finish my blog post :-P

[08:37] <FROGGS> Arrrgh!

[08:37] <FROGGS> bad nwc10! ò.ó

[08:37] <FROGGS> :P

[08:37] <brrt> i do wonder why the results have been so varying

[08:38] <FROGGS> electromagnetic forces?

[08:38] * FROGGS has no idea what the topic is about

[08:41] <brrt> oh, the topic is 'retrofitting existing p-type languages on llvm'

[08:41] <brrt> which has seen less-than-awesome results in various projects, despite llvm being without doubt an excellent quality compiler system

[08:51] *** zakharyas joined
[09:00] *** zakharyas joined
[09:02] *** xiaomiao joined
[09:07] <dalek> Heuristic branch merge: pushed 58 commits to MoarVM/even-moar-jit by bdw

[09:19] <dalek> MoarVM/even-moar-jit: ea87b0d | brrt++ | src/jit/graph.c:

[09:19] <dalek> MoarVM/even-moar-jit: Fix references to jgb

[09:19] <dalek> MoarVM/even-moar-jit:

[09:19] <dalek> MoarVM/even-moar-jit: jgb has been killed in even-moar-jit in favor of the spesh iterator

[09:19] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/ea87b0d5ec

[09:26] <diakopter> brrt++ # rakudo builds with even-moar-jit branch

[09:26] <brrt> \o/

[09:36] <JimmyZ> I think dynasm is small and good enough, since luajit is very awesome, but i don't think llvm is small, and I din't see any popular dyn lang use llvm keep it  samll and fast enough. :P

[09:38] <JimmyZ> and we don't have enough resource to make moar/dynasm good enough, so we don't have any time to do moar on llvm

[09:39] <brrt> but dynasm and llvm are quite different things, i think?

[09:39] <brrt> one is an assembler which has you specifiy all the instructions, and the other is a compiler which explicitly tells you not to care

[09:40] <JimmyZ> yes. if someone want to do experimence moar on llvm, I don't think we will be mind :P

[09:40] <JimmyZ> just fork moar

[09:41] <brrt> hmm

[09:43] <JimmyZ> or better, like Rperl, one can do  Perl 6 on llvm :P

[09:45] <jnthn> Just because llvm is an excellent quality compiler system doesn't mean it'll naturally suit all languages.

[09:46] <jnthn> I suspect part of the issue may be that dynamic language impls have different priorities.

[09:48] <jnthn> For dynlangs, your performance comes greatly from spotting ways to remove indirections based on runtime data, rather than considering all the statically available data and throwing all you can at it.

[09:50] <jnthn> So even-moar-jit ain't just exciting 'cus it will let us generate better code, it's also 'cus the expression trees will let us optimize away indirections in places we can't now.

[09:51] <JimmyZ> I could see it :P

[09:51] <brrt> aye, that is also what i want :-)

[09:52] <brrt> (in a somewhat cross-platform way too :-))

[09:53] <JimmyZ> spoke of luajit, I was not porting the code  from luajit to moar, I wanted to port the optimization algorithm :)

[09:54] <JimmyZ> most is about AA and escape

[09:54] <brrt> if you know how to do that... sure

[09:54] <brrt> but there are quite a few moar things you want to take into account

[09:54] <JimmyZ> yes

[09:55] <brrt> i'm thinking of continuations, mostly

[09:55] <JimmyZ> and I found  Trace spesh may make things   a bit easier.

[09:56] <brrt> and dynamic lexicals

[09:56] <brrt> i do think that is true yes

[09:56] <JimmyZ> TraceJIT , that is it

[09:56] <brrt> if nobody else has done it before i'm finished with my theses i'll make a stab at it

[09:57] <jnthn> :)

[09:57] <JimmyZ> well , if merge dynamic lex => local var in rakudo branch, dyn lex is not a a big problem

[09:58] <jnthn> dynamic lexicals can never become locals

[09:58] <JimmyZ> oh

[09:58] <jnthn> Not in any useful case.

[09:58] <JimmyZ> static lexical

[09:58] <jnthn> They may be interesting in trace JIT though :)

[09:59] <JimmyZ> anyway, I forgot the name, but there is a branch there :P

[09:59] <JimmyZ> which will reudce getlex op

[10:00] <JimmyZ> english still is hard to me .

[10:00] <nwc10> ASAN likes even-moar-jit. OK, ASAN *tolerates* it :-)

[10:02] <nwc10> JimmyZ: your English is still way better than any foreign language I can write

[10:02] *** kjs_ joined
[10:33] <brrt> yeah, i know it leaks nwc10 :-)

[10:33] <brrt> 'why haven't you fixed it then...'

[10:34] <brrt> it wasn't a priority yet

[10:43] *** kjs_ joined
[11:02] <dalek> MoarVM: 836f87e | (Pawel Murias)++ | / (18 files):

[11:02] <dalek> MoarVM: Implement a istty_fh op.

[11:02] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/836f87e0ad

[11:46] <timotimo> o/

[11:47] <timotimo> so ... are we really able to build rakudo with even-moar-jit?

[12:02] <timotimo> damn you, Configure.pl

[12:02] <timotimo> i can't run nqp, the serialization format in there is too high

[12:02] <timotimo> with even-moar-jit :(

[12:02] <jnthn> o.O

[12:04] <timotimo> wait

[12:05] <timotimo> the new commits weren't merged in %)

[12:05] <timotimo> because git pull from a different branch doesn't destroy things

[12:05] <timotimo> but isn't there still an env var that needs to be set so that the new jit activates?

[12:08] <timotimo> 158:    jit_expr_enable = getenv("MVM_JIT_EXPR_ENABLE");

[12:09] <timotimo> if people have been testing stuff without that set, they may have not actually tested the new jit at all ...

[12:09] <nwc10> er, OK, ASAN likes the code *without* that set...

[12:11] <timotimo> hah

[12:11] <timotimo> that's easy

[12:15] <timotimo> the exprjit fragments are all so tiny :(

[12:22] <timotimo> well, that's just because so many tiles were ripped out

[12:42] <timotimo> .tell brrt if we can somehow know which nodes have a "size" parameter (and which one it is), we could put it into the same node in the tree so that things get a little less cluttered

[12:43] <timotimo> and perhaps we could consider different node shaps for different things

[12:50] *** kjs_ joined
[12:58] <nwc10> .tell timotimo no bot here

[13:02] <timotimo> ah

[13:03] <timotimo> maybe we should finally invite yoleaux in here? or perhaps it's a good idea to only have it in #perl6 - unless yoleaux also does .tell across channels?

[13:04] <timotimo> so you don't have to .botsnack in both channels to get every message

[13:04] <timotimo> because you could forget that

[13:10] <nwc10> brrt: http://paste.scsys.co.uk/501659 -- MVM_JIT_EXPR_ENABLE + ASAN = Barf

[13:11] <jnthn> ASAN++

[13:11] <nwc10> seems to be a fairly simple "use after free" caused by a realloc, but I didn't dig further than reading the stack trace

[13:11] <timotimo> oh, realloc can be nasty, aye

[13:13] <timotimo> in assign_tile there's a note about realloc right in front of MVM_DYNARR_ENSURE_SPACE, which probably does realloc

[13:14] <timotimo> well, i don't know how memory management works for the whole thing, but brrt surely knows what the issue will be

[13:31] *** camelia joined
[14:20] <diakopter> heh, barf

[15:06] *** tokuhiro_ joined
[15:25] *** zakharyas1 joined
[15:30] *** zakharyas joined
[15:35] <jnthn> Time to cut the monthly, I guess :)

[15:49] <dalek> MoarVM: 2b9df29 | jnthn++ | docs/ChangeLog:

[15:49] <dalek> MoarVM: ChangeLog for 2015.11.

[15:49] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2b9df29b97

[15:51] <dalek> MoarVM: c335cdd | jnthn++ | VERSION:

[15:51] <dalek> MoarVM: Bump VERSION file.

[15:51] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c335cdd1e0

[15:53] *** brrt joined
[15:53] <brrt> \o

[15:53] <brrt> yes, i know what it is

[15:53] <brrt> but, here is the confusing bit

[15:54] <brrt> *i* would think that the lvalue of the assignment is evaluated *after* the computation of the rvalue

[15:54] <brrt> however, such is clearly not the case

[15:56] <brrt> i should probably fix that wholesale

[15:59] *** colomon joined
[16:06] <[Coke]> jnthn++ # moarvm cut

[16:08] <dalek> moarvm.org: 6388276 | jnthn++ | / (2 files):

[16:08] <dalek> moarvm.org: Update site for 2015.11 release.

[16:08] <dalek> moarvm.org: review: https://github.com/MoarVM/moarvm.org/commit/6388276811

[16:08] *** tokuhiro_ joined
[16:14] <timotimo> that changelog looks good

[16:14] <jnthn> :)

[16:14] <jnthn> Yeah, busy month

[16:14] <jnthn> > 600 commits across Moar, NQP, and Rakudo.

[16:15] <timotimo> fitting for the months before The Big Release

[16:16] <hoelzro> o/ #moarvm

[16:16] <hoelzro> oh dang, I missed the release window =/

[16:16] <hoelzro> in other news, I got a working MoarVM on Windows last night \o/

[16:16] <timotimo> \o/

[16:17] <jnthn> Thankfully, we do monthly releases, so you don't have that long to wait ;)

[16:18] <hoelzro> =)

[16:19] <arnsholt> There was a neat blogpost about the benefits of timed releases frmo the Postgres people a while back

[16:19] <arnsholt> Basically saying that there were less rushed features when the releases were entirely predictable

[17:12] <ilmari> perl5 sees that too

[17:12] <ilmari> missing a release is less critical when you know there's going to be another next year

[17:13] <ilmari> also, we've got better at marking new features experimental for the first few releases

[17:13] <ilmari> or sometimes retroactively *cough* smartmatch *spit*

[17:17] *** domidumont joined
[17:26] *** synbot6 joined
[17:53] *** Peter_R joined
[18:00] <nwc10> seems that this month's moarvm release has completed before this month's parrot release

[18:04] <diakopter> well there was only one commit since last month's release

[18:08] *** xiaomiao joined
[18:13] *** tokuhiro_ joined
[19:13] *** colomon joined
[19:16] *** vendethiel joined
[19:28] *** diakopter___ joined
[19:34] *** kjs_ joined
[19:54] *** FROGGS joined
[19:55] <dalek> MoarVM/even-moar-jit: 836f87e | (Pawel Murias)++ | / (18 files):

[19:55] <dalek> MoarVM/even-moar-jit: Implement a istty_fh op.

[19:55] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/836f87e0ad

[19:55] <dalek> MoarVM/even-moar-jit: 2b9df29 | jnthn++ | docs/ChangeLog:

[19:55] <dalek> MoarVM/even-moar-jit: ChangeLog for 2015.11.

[19:55] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/2b9df29b97

[19:55] <dalek> MoarVM/even-moar-jit: c335cdd | jnthn++ | VERSION:

[19:55] <dalek> MoarVM/even-moar-jit: Bump VERSION file.

[19:55] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/c335cdd1e0

[19:55] <dalek> MoarVM/even-moar-jit: c18a3d1 | (Matthew Wilson)++ | / (20 files):

[19:55] <dalek> MoarVM/even-moar-jit: Merge pull request #302 from MoarVM/master

[19:55] <dalek> MoarVM/even-moar-jit:

[19:56] <diakopter___> lazy diakopter--

[20:01] *** vendethiel joined
[20:11] *** brrt joined
[20:14] *** tokuhiro_ joined
[20:21] *** lizmat joined
[20:33] *** tokuhiro_ joined
[20:45] *** kjs_ joined
[21:40] *** leont joined
[21:50] <dalek> MoarVM/even-moar-jit: 42c02d1 | brrt++ | src/jit/ (4 files):

[21:50] <dalek> MoarVM/even-moar-jit: Fix use after free

[21:50] <dalek> MoarVM/even-moar-jit:

[21:50] <dalek> MoarVM/even-moar-jit: Apparantly the lvalue of tree->nodes[child] was evaluated *before*

[21:50] <dalek> MoarVM/even-moar-jit: the rvalue of assign_tile, and assign_tile may realloc the nodes

[21:50] <dalek> MoarVM/even-moar-jit: array. All this led to ASAN being angry (and rightly so!). This is

[21:50] <dalek> MoarVM/even-moar-jit: fixed by providing a single macro to do it correctly.

[21:50] <dalek> MoarVM/even-moar-jit:

[21:50] <dalek> MoarVM/even-moar-jit: Also fix a couple of JIT-related memory leaks, including the

[21:50] <dalek> MoarVM/even-moar-jit: nonclean destruction of graphs that had trees, and the branches

[21:50] <dalek> MoarVM/even-moar-jit: stack that wasn't freed in the register allocator.

[21:50] <dalek> MoarVM/even-moar-jit:

[21:50] <dalek> MoarVM/even-moar-jit: nwc10++ for notifying this issue

[21:50] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/42c02d15a3

[21:57] <brrt> asan still falls over quite a few memory leaks, but, whatever

[22:01] <jnthn> In the JIT, or generally?

[22:08] <brrt> generally

[22:09] <brrt> no more in the JIT, in fact

[22:09] * brrt is going in the general direction of sleeping, so afk :-)

[22:09] <brrt> see you tomorrow

[22:12] * jnthn figures he'll do similar

[22:12] <jnthn> 'night

[22:35] *** tokuhiro_ joined
[23:11] *** camelia joined
