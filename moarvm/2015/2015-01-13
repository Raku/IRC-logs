[00:58] *** colomon joined
[01:18] *** Ven joined
[05:36] *** vendethiel joined
[07:47] *** FROGGS joined
[07:51] *** FROGGS[mobile] joined
[08:16] *** zakharyas joined
[08:21] *** FROGGS joined
[09:01] *** FROGGS[mobile] joined
[09:39] *** kjs_ joined
[10:08] *** rurban joined
[11:18] <dalek> MoarVM/6pe: bccbeac | jnthn++ | docs/6model-parametric-extensions.markdown:

[11:18] <dalek> MoarVM/6pe: Start documenting the parametric 6model design.

[11:18] <dalek> MoarVM/6pe: review: https://github.com/MoarVM/MoarVM/commit/bccbeac0e6

[11:18] <dalek> MoarVM/6pe: 3bcab71 | jnthn++ | / (6 files):

[11:18] <dalek> MoarVM/6pe: Stub parametricity-related ops.

[11:18] <dalek> MoarVM/6pe: review: https://github.com/MoarVM/MoarVM/commit/3bcab7154a

[11:18] <dalek> MoarVM/6pe: 0ae9e8e | jnthn++ | src/6model/6model.h:

[11:18] <dalek> MoarVM/6pe: STable extensions for parametricity.

[11:18] <dalek> MoarVM/6pe: review: https://github.com/MoarVM/MoarVM/commit/0ae9e8e50e

[11:18] <dalek> MoarVM/6pe: 2fc3940 | jnthn++ | src/gc/collect.c:

[11:18] <dalek> MoarVM/6pe: GC marking for STable parametricity bits.

[11:18] <dalek> MoarVM/6pe: review: https://github.com/MoarVM/MoarVM/commit/2fc394043e

[11:18] <jnthn> (Rebase, sorry for noise :))

[11:35] *** colomon joined
[12:56] *** colomon joined
[13:00] *** brrt joined
[13:13] *** colomon joined
[14:00] *** kjs_ joined
[14:01] *** synopsebot joined
[14:09] *** rurban joined
[14:25] <nwc10> Today "Spesh" ... http://www.bbc.co.uk/news/blogs-magazine-monitor-30795336

[14:26] <brrt> what

[14:27] <jnthn> That stuff must taste like crap...

[14:27] <nwc10> I was unware that said beverage had said nickname

[14:27] <nwc10> it does.

[14:27] <brrt> jnthn: i had the exact same thought

[14:27] * jnthn wasn't aware of it either

[14:27] <brrt> also, that is such terrible hypocrisy, to blame one beer out of all for alcoholism

[14:28] <nwc10> IIRC we refered to it as "punishment juice" or something like that, when using it as a forfeit in a drinking game

[14:28] <nwc10> (but this was 20 years ago)

[14:28] <tadzik> hmm, they say it's 4.5 alcohol units, so 0.5 more than daily dosage

[14:28] <jnthn> "dosage" :D

[14:28] <nwc10> :-)

[14:28] <tadzik> and the solution is watering it down? Rather than, hmm, let's see, making cans smaller?

[14:29] <jnthn> "My doctor told me to drink 4 units a day..."

[14:29] <brrt> rather than not selling alcohol to obvious alcoholics?

[14:29] <tadzik> I don't see how my choice of words is any other than spot on :P

[14:30] <brrt> :-P

[14:31] <brrt> anyway, now that we're all here. create a new structure for repr ops compilation, *or*, extend c call structure for repr ops compilation

[14:31] <jnthn> Some of my favorite beers are in the 9%-10% range, but I'm pretty sure they're not a cheap way to get drunk...

[14:31] <brrt> first one is simpler btw, except that i have to replicate windows / posix argument inconsistency

[14:31] <jnthn> And the folks I know who drink them are responsible. So singling out high-volume thing is also silly...

[14:32] <jnthn> brrt: I was wondering if the second one was easier in that you get to re-use the windows/posix argument handling bits.

[14:32] <[Coke]> http://imgur.com/gallery/CJfnAL7 - a little nicer than the ones I have!

[14:32] <jnthn> brrt: And also 'cus it can be handled in graph.c entirely that way

[14:32] <brrt> jnthn, yeah that's mostly the argument for it

[14:32] <brrt> well..... doing it specially is much more efficient

[14:32] <brrt> since i'll only have to do stable unpacking once

[14:32] <jnthn> More efficient how?

[14:33] <jnthn> In the generated code, or...?

[14:33] <brrt> yes

[14:33] <jnthn> Hmm

[14:33] <brrt> maybe not much

[14:33] <brrt> but still quite a bit

[14:33] <jnthn> Why do you have to do STable unpacking?

[14:33] <brrt> ehm, consider one of the simplest cases, elems

[14:33] <jnthn> If we're resolving the call to a C function then it only needs to be dereferenced once...

[14:34] <jnthn> To pass to the appropriate elems function

[14:34] <jnthn> [Coke]: Wow!

[14:35] <brrt> i have to resolve the repr, the repr function, the object, the stable of the object, and the object body of the object

[14:35] <brrt> it's: REPR(obj)->elems(tc, STABLE(obj), obj, OBJECT_BODY(obj));

[14:35] <brrt> that's four separate obj loads right there

[14:35] <jnthn> Yes but I was suggesting to do this in the case where we *know* the type of obj!

[14:36] <jnthn> Meaning that by the time we have machine code, the indirection is all gone.

[14:36] <brrt> true, in which case we have 3 of them :-)

[14:36] <jnthn> So you use the type in graph.c to get the elems function

[14:36] <brrt> right, then it is simpler

[14:37] <brrt> you still can't do all in graph.c since you still have to take the STABLE and the OBJECT_BODY of the obj

[14:37] <jnthn> I wonder if it'd be possible to have C function call flags that indicate "STable of" and "body of", and to do a quick check when producing the machine code to avoid the multiple memory accesses...

[14:38] <brrt> heuristically, yes, but it'd be complicated

[14:38] <brrt> you'd have to reorder loads

[14:38] <jnthn> Well, the heuristic only has to catch the REPR API calls

[14:38] <jnthn> And those are rather regular

[14:39] <jnthn> The other way to do it would be to have a REPR_THREESOME C call flag.

[14:39] <brrt> and then you'd have to have a way to refer to the notion of obj being in the 4th argument or the 3rd, and then to emit code that loads these from there

[14:39] <brrt> hmmm

[14:39] <brrt> that.... would be possible

[14:39] <jnthn> Which expands to STABLE(o), o, OBJECT_BODY(o)

[14:40] <brrt> not sure if that makes things much simpler

[14:41] <jnthn> Yeah, depends how messy it makes the C call code-gen vs the duplication we'd get from a new JIT graph node type.

[14:42] * brrt wonders about just that

[14:47] <jnthn> My gut suspects the complication of re-use is less code/pain than the complexity of a new node type, givne the similarities.

[14:47] <jnthn> *given

[14:49] <brrt> i can try both, of course

[14:50] <jnthn> True. :)

[14:51] *** kjs_ joined
[15:01] *** kjs_ joined
[15:02] *** donaldh joined
[15:47] *** FROGGS joined
[16:02] *** kjs_ joined
[16:33] *** brrt left
[18:13] *** FROGGS_ joined
[18:18] *** zakharyas joined
[19:57] *** kjs_ joined
[20:44] *** kjs_ joined
[20:56] *** rurban joined
[21:02] *** zakharyas joined
[21:10] *** zakharyas1 joined
[21:12] *** synopsebot joined
[21:13] *** Util joined
[21:23] *** Util joined
[21:23] *** synopsebot joined
[21:34] *** ingy joined
[21:34] *** daxim joined
[21:34] *** jnthn joined
[21:34] *** leedo_ joined
[21:34] *** sivoais joined
[21:34] *** pyrimidine joined
[21:34] *** tadzik joined
[21:34] *** ggoebel111111112 joined
[21:34] *** FROGGS_ joined
[21:34] *** Util joined
[21:34] *** synopsebot joined
[21:35] *** sivoais_ joined
[21:37] *** avar joined
[21:37] *** brrt joined
[21:39] <brrt> what we really need, of course, is something of an expression compiler

[21:40] *** lue joined
[21:43] *** timotimo joined
[21:43] *** lizmat joined
[21:43] *** nwc10 joined
[21:45] *** sivoais joined
[21:50] *** dalek joined
[21:50] *** timotimo joined
[21:50] *** zakharyas1 joined
[21:50] *** rurban joined
[21:50] *** kjs_ joined
[21:50] *** vendethiel joined
[21:50] *** danaj joined
[21:50] *** JimmyZ joined
[21:50] *** nebuchadnezzar joined
[21:50] *** btyler_ joined
[21:50] *** xiaomiao joined
[21:50] *** brrt joined
[21:53] *** woolfy joined
[21:53] *** flussence joined
[21:53] *** [Coke] joined
[21:54] *** [Coke] joined
[21:54] *** flussence joined
[21:54] *** woolfy joined
[21:54] *** brrt joined
[21:54] *** xiaomiao joined
[21:54] *** btyler_ joined
[21:54] *** nebuchadnezzar joined
[21:54] *** JimmyZ joined
[21:54] *** danaj joined
[21:54] *** vendethiel joined
[21:54] *** kjs_ joined
[21:54] *** rurban joined
[21:54] *** zakharyas1 joined
[21:54] *** timotimo joined
[21:54] *** dalek joined
[21:54] *** sivoais joined
[21:54] *** nwc10 joined
[21:54] *** lizmat joined
[21:54] *** lue joined
[21:54] *** avar joined
[21:54] *** synopsebot joined
[21:54] *** Util joined
[21:54] *** FROGGS_ joined
[21:54] *** ggoebel111111112 joined
[21:54] *** tadzik joined
[21:54] *** pyrimidine joined
[21:54] *** leedo_ joined
[21:54] *** jnthn joined
[21:54] *** daxim joined
[21:54] *** ingy joined
[21:54] *** ashleydev joined
[21:54] *** betterworld joined
[21:54] *** moritz joined
[21:54] *** ChanServ joined
[21:54] *** japhb joined
[21:54] *** oetiker joined
[21:54] *** retupmoca joined
[21:54] *** dsm joined
[21:54] *** BinGOs joined
[21:54] *** TimToady joined
[21:55] <brrt> wow very netsplit

[21:55] *** 17WAAWSLC joined
[21:55] *** harrow joined
[21:55] *** harrow` joined
[21:57] *** sivoais joined
[21:59] *** moritz joined
[21:59] *** oetiker joined
[21:59] *** retupmoca joined
[21:59] *** BinGOs joined
[21:59] *** TimToady joined
[22:06] *** timotimo joined
[22:06] *** zakharyas1 joined
[22:06] *** rurban joined
[22:06] *** kjs_ joined
[22:06] *** vendethiel joined
[22:06] *** danaj joined
[22:06] *** JimmyZ joined
[22:06] *** nebuchadnezzar joined
[22:06] *** btyler_ joined
[22:06] *** xiaomiao joined
[22:07] *** sivoais joined
[22:08] *** dalek joined
[22:09] *** donaldh joined
[22:14] <brrt> single core windows 8.1 is a guarantee to be unhappy it seems

[22:16] <jnthn> .oO( I thought Windows 8 was generally such a guarantee... )

[22:19] *** timotimo joined
[22:27] *** colomon joined
[22:30] <brrt> 8.1 is ok

[22:30] <brrt> it has a little desktop mode that allows you to mostly ignore the tablet like thingy

[22:32] <brrt> importantly, you can choose the system background colour during setup

[22:35] <leedo_> i always thought white on blue was an odd choice for a Windows setup screen

[22:35] <leedo_> since I immediately am reminded of the BSOD

[22:36] <brrt> which is why i use yellow

[23:21] *** kjs_ joined
