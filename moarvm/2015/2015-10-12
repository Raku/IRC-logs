[00:11] *** Util joined
[00:28] *** cognominal joined
[00:28] <cognominal> what p6bindattrinvres stands for? Perl6 bind attribute... ?

[00:33] *** tokuhirom joined
[00:41] *** hohoho joined
[01:08] <tadzik> inverse resolution?

[01:08] <tadzik> guessing :)

[01:17] <leont> What is the provides meta-data used for currently?

[01:22] <leont> Wrong channel!

[01:33] *** diakopter joined
[01:47] *** ilbot3 joined
[03:56] *** vendethiel joined
[04:48] *** hohoho joined
[05:42] *** tokuhirom joined
[05:49] <timotimo> oh, ops.markdown doesn't have it ... because it's a perl6 op ...

[05:51] <timotimo> ah, there it is

[05:53] <timotimo> huh. weird. p6bindattrinvres seems to turn pretty much directly into a a bindattrs_o, it just deconts the second argument

[06:23] *** domidumont joined
[06:28] *** domidumont joined
[06:50] *** FROGGS joined
[06:55] *** Ven joined
[06:58] *** zakharyas joined
[06:58] <nwc10> good *, #moarvm

[07:04] <FROGGS> o/

[07:09] *** brrt joined
[07:10] <timotimo> good brrt, good nwc10, good froggs

[07:12] <brrt> good timotimo

[07:12] <brrt> hey, timotimo, i thought of something

[07:12] <brrt> you were intereseted into copy removals, weren't you?

[07:13] <brrt> i've figured out a safe path to implementing itg

[07:13] <brrt> (if i'm ever going into consulting, safe implementation paths are going to be my catchphrase and my moneymaker)

[07:13] <brrt> very simple strategy

[07:14] <brrt> * you figure out which copys (sets) are redundant, and 'virtually' remove them

[07:14] <timotimo> oh, you mean the "set" operations, yeah?

[07:14] <brrt> i.e. at first you don't remove them, but you emit them, *but* create both the deopt mapping and translate all users to the old registers

[07:15] <brrt> so you get a bunch of completely redundant set-s which are never used

[07:15] <brrt> this keeps the memory layout exactly the same as before, just tests that the translation mapping is safe

[07:15] <brrt> eh use mapping

[07:16] <brrt> fine, next step, during deopt, you copy all values from their 'reduced' registers to the redundant registers

[07:16] <brrt> now logically that is still completely redundant? but it demonstrates that your deopt logic works

[07:17] <brrt> last step, you remove the set ops proper, and verify everything works as before

[07:18] *** Ven joined
[07:18] <brrt> you are done. q.e.d. :-)

[07:18] <brrt> watch as performance blazes

[07:20] <FROGGS> :D

[07:20] <timotimo> not so sure about that part :)

[07:25] <brrt> no, neither am i

[07:25] <brrt> but you see what i mean, right

[07:28] <timotimo> i *think* so

[07:29] <timotimo> my moar and perl6 related productivity has been taking a nosedive recently :(

[07:40] <brrt> yeah, mine too

[07:40] <brrt> although my science-related productivity has increased to compensate :-)

[07:40] <timotimo> oi, not good, your stuff is important to me! :P

[07:41] <brrt> well, i've been refactoring the tiler table generator into a oo format, and i hope to attack the false-cost-table problem

[07:41] <brrt> and aside from that, to mark arguments you're intereseted in and have them passed as well

[07:42] <brrt> i can do that now, but it yields to global variable explosion

[07:42] <brrt> that might still be worth it, but understanding suffers

[07:43] <brrt> but the dynvar bug is still eluding me, and that hurts

[07:43] <brrt> and another thing i should've done much earlier, is give each jitted code object a sequence number for identification

[07:44] *** tokuhirom joined
[07:44] <timotimo> a sequence number, eh?

[07:44] <timotimo> for cross-reference between what exactly?

[07:45] <brrt> well, for instance, after adding the sequence number it became obious that quite a few frames are compiled twice (probably different spesh candidates)

[07:45] <brrt> means that i could be trying to debug a certain frame, and look at another frames binary code altogether

[07:46] <brrt> s/obious/obvious/

[07:46] <timotimo> oh

[07:46] <timotimo> yeah, that's a very good idea then

[07:47] <brrt> i've not yet a complete implementation plan for linearizing tiles

[07:47] <brrt> one thing that bothers me a bit is that i have to mark the condiitional ranges

[08:11] *** kjs_ joined
[09:06] *** Ven joined
[09:18] *** leont joined
[09:21] *** kjs_ joined
[09:41] <jnthn> morning, #moarvm

[09:41] <jnthn> p6bindattrinvres = do a bindattr, and evaluate to the invocant as the result of the op (as opposed to the bound value); really useful in a few places

[09:42] <timotimo> oh, i see

[09:45] *** tokuhirom joined
[09:47] <brrt> good morning jnthn

[09:48] <jnthn> o/ brrt

[10:03] *** hohoho joined
[10:09] *** Ven joined
[10:52] <dalek> MoarVM: aac89bd | jnthn++ | src/strings/ (3 files):

[10:52] <dalek> MoarVM: Refactor MVM_nfg_get_case_change interface.

[10:52] <dalek> MoarVM:

[10:52] <dalek> MoarVM: It will now be able to return multiple graphemes (though never does

[10:52] <dalek> MoarVM: so far).

[10:52] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/aac89bde61

[11:22] <jnthn> m: say "\c[LATIN SMALL LIGATURE FF]".tc

[11:22] <camelia> rakudo-moar 70a94d: OUTPUT«FF␤»

[11:22] <jnthn> m: say nqp::tc("\c[LATIN SMALL LIGATURE FF]")

[11:22] <camelia> rakudo-moar 70a94d: OUTPUT«Ff␤»

[11:22] <jnthn> mm

[11:22] <jnthn> m: say "\c[LATIN SMALL LIGATURE FF]".tclc

[11:22] <camelia> rakudo-moar 70a94d: OUTPUT«Ff␤»

[11:23] <jnthn> oh, method tc in Rakudo doesn't actually use nqp::tc o.O

[11:24] <nwc10> it forks out to Perl 5? :-)

[11:24] *** cognominal joined
[11:24] <jnthn> No, it uses uc

[11:24] <jnthn> wtf :)

[11:25] <tadzik> ......really? :D

[11:25] * jnthn fixes that and crosses fingers :)

[11:25] * timotimo fixes fingers

[11:25] <jnthn> yeah really

[11:27] <jnthn> Better :) Now my tests pass :)

[11:30] <dalek> MoarVM: ee9fc2b | jnthn++ | src/strings/ (3 files):

[11:30] <dalek> MoarVM: Complete length-changing casefold/NFG integration.

[11:30] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ee9fc2b8b7

[11:47] *** tokuhirom joined
[12:14] *** colomon joined
[12:36] *** hohoho joined
[13:15] *** Ven joined
[13:37] *** tokuhirom joined
[13:48] *** Ven joined
[14:14] *** Ven joined
[14:24] *** Ven joined
[14:41] *** Ven joined
[14:42] *** tokuhirom joined
[14:55] *** Ven joined
[14:57] *** Ven joined
[15:18] *** Ven joined
[15:31] *** brrt joined
[15:31] <brrt> \o #moarvm

[15:31] <brrt> i'd be very pleased if you could review my next blog post for me

[15:31] <brrt> https://brrt-to-the-future.blogspot.com/b/post-preview?token=EuhkXlABAAA.ozsHgvVaFMwFa6cFGTqyAUUFOFU8aJeV9FXvO0l7R6lkPTjlqDnePRcEcv-PIV3rfdN9aZP5d1qbQ31o6EaaqQ.YC8V6FeYwkRWaK74PflU1w&postId=3157412146561341428&type=POST

[15:31] <brrt> now i have to be off again :-)

[15:31] <brrt> dinner &

[15:34] <Guest87784> so, I finally isolated... a bit... my "invalid GC status"

[15:37] <Ven_> I guess I'll make a repro repo

[15:38] <jnthn> Ven_++

[15:39] <Ven_> https://github.com/vendethiel/moarvm-gcerr-gtk/blob/master/isolated.p6 here's the file. I havn't found a way to isolate it without GTK::Simple, though.

[15:39] <Ven_> This errors with "Invalid GC status observed; aborting" (and used to crash badly)

[15:45] *** Ven joined
[15:47] <arnsholt> .tell brrt +1 on the blog post from me

[15:47] *** synbot6 joined
[15:48] *** Ven joined
[15:51] <timotimo> arnsholt: we don't have a bot here, but brrt does backlog dilligently

[15:53] <Ven> timotimo: ^ that's the SPW bug, btw

[15:53] <timotimo> yeah, i thought it'd be

[16:05] <arnsholt> Ah, excellent

[16:33] *** FROGGS joined
[16:34] *** hohoho joined
[16:40] *** vendethiel joined
[17:14] <retupmoca> I'm having trouble building the latest rakudo with VS2015 (both with --gen-moar and master/master/nom): moar.exe dies in CORE.setting stage parse with what appears to be STATUS_STACK_BUFFER_OVERRUN

[17:14] <retupmoca> is this known? Or (more likely) did I screw up my environment somehow?

[17:16] <[Coke]> retupmoca: OOC does it work with */*/nom ? (that is, letting nom pick the versions?)

[17:17] <[Coke]> ISTR that we've had issues with VS-latest in the past, and I think our devs are using an earlier version... but I'm on mac, so not entirely sure.

[17:17] <jnthn> Yeah, I'm on VS 2013 I think. But I thought somebody patched our build issue...

[17:17] <jnthn> And it was an issue compiling MoarVM, not using it to build CORE.setting

[17:24] <retupmoca> [Coke]: yeah, doing --gen-moar and letting rakudo pick whatever it wants still throws the error

[17:24] <retupmoca> jnthn: I had it building on VS2015 a month or two ago, but I haven't tried in a while

[17:29] *** Peter_R joined
[17:40] <[Coke]> retupmoca: you're the canary for vs2015, then. :)

[17:40] <[Coke]> it might be helpful if you could bisect the moarvm build and see where it goes south.

[17:41] <[Coke]> (assuming that the core issue here is the moarvm build failing because rakudo config calls it, not because moarvm builds ok and then something dies in rakudo's build.

[17:57] <retupmoca> ok, rakudo 92be579 (--gen-moar) from september 30 builds fine, so I'll try to get a bisect running tonight or so

[18:06] *** vendethiel joined
[18:18] <[Coke]> retupmoca++

[18:29] *** zakharyas joined
[18:45] *** domidumont joined
[19:04] <itz_stmuk> 32 bit at least worked OK for me some time last week on VS2015 so it might be recent change

[19:43] *** vendethiel joined
[19:47] *** tokuhirom joined
[19:49] *** colomon joined
[19:51] *** brrt joined
[19:57] *** Ven joined
[20:05] *** hohoho joined
[20:15] *** Ven joined
[20:35] *** Ven joined
[21:22] *** colomon joined
[21:39] *** cognominal joined
[21:49] *** tokuhirom joined
[21:50] *** hohoho joined
[22:09] *** hohoho joined
[23:45] *** leont joined
[23:50] *** tokuhirom joined
