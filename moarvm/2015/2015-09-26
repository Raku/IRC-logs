[01:29] <ShimmerFairy> for that loop presented earlier, playing with it just now I find that    class C::C { }; EVAL 'sub foo() { return C::C.new(a => 1, b => 2) }; foo()' for ^105    seems to be where it breaks (^104 is fine)

[01:30] *** vendethiel joined
[01:33] *** tokuhiro_ joined
[02:34] *** tokuhiro_ joined
[02:37] <hoelzro> if I add a member to a struct in MoarVM, do I have to tell spesh about it somehow?

[02:37] <hoelzro> ShimmerFairy: what happens when you run with 105?

[02:37] <hoelzro> I didn't see the original post

[02:38] <ShimmerFairy> m: class C::C { }; EVAL 'sub foo() { return C::C.new(a => 1, b => 2) }; foo()' for ^105

[02:38] <camelia> rakudo-moar 0024b0: OUTPUT«Default constructor for 'C::C' only takes named arguments␤  in sub foo at EVAL_104:1␤  in block <unit> at EVAL_104:1␤  in block <unit> at /tmp/8wGHwXlsCe:1␤␤»

[02:38] <ShimmerFairy> m: class C::C { }; EVAL 'sub foo() { return C::C.new(a => 1, b => 2) }; foo()' for ^104

[02:38] <camelia> rakudo-moar 0024b0: ( no output )

[02:38] <ShimmerFairy> Unless I'm mistaken it's the panda jit thingy

[02:39] <hoelzro> whoa

[02:39] <hoelzro> have you tried with MVM_JIT_DISABLE=1 and MVM_SPESH_DISABLE=1 ?

[02:40] <ShimmerFairy> not myself, but that's the golfed line jnthn gave for the problem as presented in panda (and yeah, IIRC it's definitely a JIT issue)

[02:41] <hoelzro> neat

[02:45] <ShimmerFairy> the original code showed it work at ^100 and fail at ^500, so I just wanted to see if there was a specific number where it consistently failed (and that seems to be the case)  :)

[04:36] *** tokuhiro_ joined
[05:29] *** tokuhiro_ joined
[07:31] *** tokuhiro_ joined
[07:38] *** vendethiel joined
[10:31] *** zakharyas joined
[11:34] *** tokuhiro_ joined
[11:49] *** FROGGS joined
[13:07] *** zakharyas1 joined
[13:25] *** brrt joined
[13:36] *** tokuhiro_ joined
[13:59] *** brrt joined
[14:11] *** FROGGS_ joined
[14:21] *** zakharyas joined
[15:37] *** tokuhiro_ joined
[15:40] *** ggoebel joined
[15:48] *** brrt joined
[16:30] *** ShimmerFairy joined
[16:31] <brrt> jnthn: the main difficulty in catching it under the debugger is that i'm not 100% sure where it *should* catch it

[16:31] <brrt> hmm

[16:31] <brrt> althugh

[16:31] <brrt> maybe we can just dump the whole lexical table for each inline

[16:32] <brrt> like a bunch of barbarians

[16:50] <timotimo> yup

[17:25] *** brrt joined
[17:39] *** tokuhiro_ joined
[19:36] *** cognominal joined
[20:35] *** tokuhiro_ joined
[20:36] *** vendethiel joined
[22:36] *** tokuhiro_ joined
[22:45] *** cognominal joined
