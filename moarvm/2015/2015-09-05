[00:42] *** tadzik joined
[01:45] *** colomon joined
[02:47] *** colomon joined
[02:58] *** colomon joined
[03:33] *** danaj joined
[04:15] *** lizmat joined
[04:27] *** lizmat joined
[04:33] *** lizmat joined
[04:45] *** _itz joined
[04:46] *** lizmat joined
[04:50] *** lizmat joined
[05:23] *** lizmat_ joined
[05:38] *** lizmat joined
[05:48] *** lizmat joined
[06:07] *** lizmat joined
[06:14] *** virtualsue joined
[06:17] *** lizmat joined
[06:32] *** lizmat_ joined
[06:44] *** lizmat joined
[06:53] *** lizmat_ joined
[07:12] *** lizmat joined
[07:26] *** lizmat joined
[07:34] *** virtualsue joined
[07:46] *** lizmat joined
[07:52] *** virtualsue joined
[07:57] *** lizmat joined
[08:04] *** lizmat joined
[08:11] *** lizmat joined
[08:23] *** TEttinger joined
[08:30] *** mj41 joined
[08:34] *** lizmat joined
[10:27] *** vendethiel joined
[11:05] *** dalek joined
[11:29] <dalek> MoarVM/even-moar-jit: dd75160 | brrt++ | 3rdparty/dynasm:

[11:29] <dalek> MoarVM/even-moar-jit: Upgrade dynasm for dynamic register bugfix

[11:29] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/dd75160faa

[11:29] <dalek> MoarVM/even-moar-jit: e629fe3 | brrt++ | src/ (4 files):

[11:29] <dalek> MoarVM/even-moar-jit: Take JIT spill area into account for work size

[11:30] *** dalek joined
[12:35] *** colomon joined
[12:39] *** virtualsue joined
[12:47] *** Ven joined
[12:49] <timotimo> cool, now i get leave_conditional NYI instead of a segfault :)

[12:50] <timotimo> "This caused issues when the same

[12:50] <timotimo> register was 'used' twice in a

[12:50] <timotimo> "

[12:51] <timotimo> haha, the line break is fantastic on this one

[12:51] <timotimo> "Without this the JIT will emit code that overwrites (gnu) malloc"

[12:51] <timotimo> "wait, it does WHAT? HOW?!?"

[13:12] *** Ven joined
[13:22] *** Ven joined
[14:09] *** FROGGS_ joined
[14:32] *** brrt joined
[14:32] <brrt> \o

[14:32] <timotimo> o/

[14:36] *** Ven joined
[14:37] <dalek> MoarVM/even-moar-jit: ff26781 | paultcochrane++ | src/core/nativecall_dyncall.c:

[14:37] <dalek> MoarVM/even-moar-jit: Add missing break statement to callback_handler switch cascade

[14:37] <dalek> MoarVM/even-moar-jit:

[14:37] <dalek> MoarVM/even-moar-jit: It seems that a break statement is missing in the MVM_NATIVECALL_ARG_*

[14:37] <dalek> MoarVM/even-moar-jit: cascade of case statements.  This adds the missing break.  The NQP tests

[14:37] <jnthn> o/ brrt

[14:37] <brrt> (that was a merge dalek)

[14:37] <brrt> \o jnthn

[14:37] <brrt> and timotimo

[14:37] <brrt> how are you today?

[14:37] *** dalek joined
[14:38] <brrt> the fixes of yesterday (i pushed this morning) reduce some of the more crazy bugs

[14:38] <jnthn> Tired, probably 'cus I felt well yesterday and walked for 2-3 hours and did a bunch of cooking...

[14:39] <brrt> walking is good, usually

[14:39] * jnthn needs to remember to be more relaxed on the days he feels less exhausted, rather than being like "omg I feel more OK let's do lots!" and then feeling tired again the next day...

[14:39] <brrt> yes, that's a good idea

[14:41] <brrt> balancing energy is a tricky business :-)

[14:42] <jnthn> Yeah...I need to be more careful

[14:43] * jnthn thinks he'll take a look at a couple of RTs today

[14:48] * brrt hopes jnthn will be more careful :-)

[14:49] <brrt> shall i tell you of the wondrous bug that turned a r8 reference into a rax reference?

[14:49] <jnthn> haha

[14:49] <jnthn> Go on :)

[14:50] <brrt> first i couldn't believe what i was seeing as i couldn't repeat it in example code

[14:51] <brrt> so i tried it with luajit and various other options, and there was no diference in minilua

[14:51] <brrt> basically, the only difference between rax and r8 on the instruction encoding level is a bit set in the REX byte

[14:52] <brrt> as it turned out, that bit was really not being set

[14:52] <brrt> while the right number was passed, and while it worked in every other case

[14:52] <brrt> so why was that so? because the REX byte was not marked (in that case)

[14:52] <brrt> why was the REX byte not marked? dynasm didn't say that it should

[14:53] <brrt> why did dynasm say it shouldn't? it looked at only the second operand, which was (in this case) a constant register (rbx)

[14:54] <jnthn> oops

[14:55] <jnthn> .oO( totally rex the code-gen )

[14:55] *** camelia joined
[14:56] <brrt> so i replaced that with a loop over all operands, which fixed it

[14:56] <brrt> kind of took the sting out of waiting on the airport :-)

[15:04] <brrt> anyway, that still leaves some bits not implemented yet

[15:09] <brrt> and i kind of don't have the spare braintime left for now

[15:09] <brrt> but good to see jnthn++ back online :-)

[15:20] <timotimo> i'm not doing so great, but i'll be okay

[15:20] *** zakharyas joined
[15:22] <timotimo> jnthn: my understanding of lexicalref decl'd vars doesn't cover the reason why we would declare a var as lexicalref and then just assign_i a value into them ... what lexical does it ref in that case? how can this not be poking into unallocated memory and blowing up?

[15:23] <jnthn> timotimo: Got a code snippet I can --target=ast?

[15:25] <timotimo> wait!

[15:25] <timotimo> oh no

[15:25] <timotimo> did i ... did i totally misread this?

[15:25] <timotimo> i must have been somewhat tired at that point, i guess

[15:25] <timotimo> never mind >_<

[15:26] <timotimo> i should remove ":decl(..)" from the qast dump if it isn't actually set, perhaps

[15:27] <jnthn> That has caught me out more than once...

[15:32] <timotimo> there's already an nqp::isnull_s in there that should prevent :decl() from appearing in the dump

[15:35] <timotimo> m: use nqp; say nqp::isnull_s("")

[15:35] <camelia> rakudo-moar e6f360: OUTPUT«0␤»

[15:35] <timotimo> that'll be it, then

[15:35] <timotimo> m: use nqp; say nqp::graphs("")

[15:35] <camelia> rakudo-moar e6f360: OUTPUT«===SORRY!===␤No registered operation handler for 'graphs'␤»

[15:35] <timotimo> m: use nqp; say nqp::chars("")

[15:35] <camelia> rakudo-moar e6f360: OUTPUT«0␤»

[15:36] <timotimo> that ought to be better in that case

[15:38] <timotimo> this realization brings me one more step closer to getting lex-to-local back to working order

[15:39] <timotimo> took me long enough …

[15:54] *** Ven joined
[15:55] *** FROGGS[mobile] joined
[16:23] <timotimo> jnthn: your tiny act of ducking unblocked my work, i'm very glad :)

[16:55] *** Ven joined
[17:39] *** mj41 joined
[17:40] *** Ven joined
[18:13] *** vendethiel- joined
[18:24] *** mj41 joined
[19:32] *** zakharyas joined
[19:42] *** virtualsue joined
[19:52] *** virtualsue joined
[20:02] *** virtualsue joined
[21:08] <dalek> MoarVM: 163ee73 | FROGGS++ | src/6model/reprs/C (6 files):

[21:08] <dalek> MoarVM: bring CStruct, CPPStruct and CUnion in line

[21:08] <dalek> MoarVM:

[21:08] <dalek> MoarVM: That involves porting all CStruct patches to CPPStruct that happened

[21:08] <dalek> MoarVM: since CPPStruct was born in a branch, but also means that all three

[21:08] <dalek> MoarVM: representations can now be in attribute slots of the others.

[21:08] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/163ee73f6e

[21:19] *** virtualsue joined
[21:20] *** virtualsue_ joined
[21:37] *** virtualsue joined
[21:37] *** virtualsue_ joined
[21:40] *** Ven joined
[21:48] *** Peter_R joined
[22:36] *** TEttinger joined
[23:06] *** Ven joined
[23:33] *** lizmat joined
