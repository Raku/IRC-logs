[00:17] *** kjs_ joined
[00:51] *** colomon joined
[02:54] *** colomon joined
[04:30] *** ggoebel111111112 joined
[11:33] *** rurban joined
[12:30] *** kjs_ joined
[12:37] *** ggoebel111111112 joined
[12:49] *** rurban joined
[12:50] *** vendethiel joined
[13:15] *** brrt joined
[13:16] <brrt> \o

[13:16] <brrt> jnthn: the one below or the one above

[13:47] *** kjs_ joined
[14:16] *** brrt joined
[14:17] <brrt> uhm, can anybody help me understand what the rules are to spesh facts usage

[14:19] <brrt> is a HOW always a type object?

[14:19] <brrt> m: nqp::say(nqp::istype(nqp::gethow("oh hai')));

[14:19] <camelia> rakudo-moar 13d9af: OUTPUT«===SORRY!=== Error while compiling /tmp/dB5DuNNoff␤Unable to parse expression in double quotes; couldn't find final '"' ␤at /tmp/dB5DuNNoff:1␤------> say(nqp::istype(nqp::gethow("oh hai')));⏏<EOL>␤    expectin…»

[14:19] <brrt> m: nqp::say(nqp::istype(nqp::gethow("oh hai")));

[14:19] <camelia> rakudo-moar 13d9af: OUTPUT«===SORRY!===␤Arg count 1 doesn't equal required operand count 3 for op 'istype'␤»

[14:20] <brrt> m: nqp::say(nqp::isconcrete(nqp::gethow("OH HAI")));

[14:20] <camelia> rakudo-moar 13d9af: OUTPUT«===SORRY!===␤No registered operation handler for 'gethow'␤»

[14:40] <timotimo> m: nqp::say(nqp::isconcrete(nqp::how("OH HAI")))

[14:40] <camelia> rakudo-moar 2aef1f: OUTPUT«1␤»

[14:50] *** brrt joined
[15:05] *** zakharyas joined
[15:11] *** FROGGS__ joined
[16:16] *** MARTIMM joined
[18:03] *** zakharyas joined
[18:13] *** FROGGS_ joined
[19:21] *** kjs_ joined
[20:02] *** FROGGS_ joined
[20:56] *** brrt joined
[20:57] <dalek> MoarVM: aa7ed7b | brrt++ | src/jit/emit_x64.dasc:

[20:57] <dalek> MoarVM: Remove unused getwho JIT

[20:57] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/aa7ed7b5eb

[20:57] <dalek> MoarVM: aa60110 | brrt++ | src/spesh/optimize.c:

[20:57] <dalek> MoarVM: Spesh gethow (can be spesh slot lookup)

[20:57] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/aa6011066d

[21:09] *** kjs_ joined
[21:21] *** kjs_ joined
[21:21] <brrt> jnthn, time to advice me?

[21:21] <brrt> hmm

[21:22] <brrt> with regards to spesh op devirtualisation

[21:22] <brrt> it seems i can do two thins

[21:22] <brrt> things

[21:22] <brrt> a): extend c call invocation structure to support getting the STABLE and OBJECT_BODY of an object

[21:23] <brrt> b): create a new structure for repr ops

[21:23] <brrt> i was thinking of doing the latter

[21:24] <lizmat> brrt: afaik, jnthn is travelling atm

[21:24] <brrt> ah ok :-)

[21:25] <brrt> i'd need to say that a would involve having repr special logic as well

[21:47] <timotimo> brrt: do you know where gethow happens usually?

[21:47] <brrt> i have no idea

[21:51] *** donaldh joined
[21:52] <timotimo> i see two occurences of it in BUILDALL

[21:52] <timotimo> which is in need of optimization anyway

[21:53] <timotimo> !alt has two, as well

[22:04] <timotimo> brrt: well, the gethow optimization fires a bunch of times :)

[22:04] <timotimo> during nqp compilation already

[22:05] <brrt> it does. it is a small optimization but still

[22:06] <timotimo> lots and lots and lots during stage parse

[22:06] <timotimo> none in the other stages of core setting, though

[22:13] *** dalek joined
[22:18] *** lue joined
[22:28] <timotimo> spesh_diff.p6 is either wrong again or still wrong :\

[22:32] <brrt> how do you say wrong?

[22:32] <brrt> i broke it?

[22:36] <timotimo> it expects different input

[22:36] *** kjs_ joined
[22:36] <timotimo> i don't think you broke it

[22:36] <timotimo> i think i just didn't properly adapt it to the "inserting logging" + "before/after" and then "finished specialization"

[22:36] <timotimo> the diffs don't look very good

[22:41] <brrt> ah ok :-)
