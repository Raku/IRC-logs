[01:10] *** vendethiel joined
[01:48] *** ilbot3 joined
[06:35] *** brrt joined
[07:29] <brrt> good moarning

[08:11] <dalek> MoarVM/even-moar-jit: 751ce63 | brrt++ | src/jit/ (3 files):

[08:11] <dalek> MoarVM/even-moar-jit: Add ctxcode instruction template and some macros

[08:11] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/751ce6360a

[09:11] <dalek> MoarVM/even-moar-jit: f3e0e25 | brrt++ | src/ (6 files):

[09:11] <dalek> MoarVM/even-moar-jit: Replace explicit JIT function return frame check

[09:11] <dalek> MoarVM/even-moar-jit:

[09:11] <dalek> MoarVM/even-moar-jit: This greatly simplifies the JIT compiler driver and jump-out

[09:11] <dalek> MoarVM/even-moar-jit: logic. MVM_frame_try_return is now called within the JIT-compiled

[09:11] <dalek> MoarVM/even-moar-jit: code.

[09:11] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/f3e0e25064

[09:33] <dalek> MoarVM/even-moar-jit: a1301bf | brrt++ | src/jit/core.expr:

[09:33] <dalek> MoarVM/even-moar-jit: Implement return_o and return as expr templates

[09:33] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/a1301bffb2

[10:05] <brrt> hmm, dynasm, y u so ugly

[10:23] <brrt> hmm, ok, i think i have the optrexes at the right place

[10:29] *** vendethiel joined
[11:57] *** Peter_R joined
[13:54] *** FROGGS_ joined
[15:26] *** lizmat joined
[16:28] <dalek> MoarVM/even-moar-jit: 4013032 | brrt++ | 3rdparty/dynasm:

[16:28] <dalek> MoarVM/even-moar-jit: Updated dynasm for full register addressing

[16:28] <dalek> MoarVM/even-moar-jit:

[16:28] <dalek> MoarVM/even-moar-jit: Sub-qword instructions typically only emit a REX byte when using

[16:28] <dalek> MoarVM/even-moar-jit: extended registers, so in case of variable registers, this adds

[16:28] <dalek> MoarVM/even-moar-jit: a facility to detect the necessity of a REX byte and emits one

[16:28] <dalek> MoarVM/even-moar-jit: if necessry; actual REX byte encoding is shared with the facility

[16:28] <dalek> MoarVM/even-moar-jit: implemented earlier.

[16:28] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/4013032214

[16:34] *** vendethiel joined
[16:39] *** brrt joined
[16:39] <brrt> for those few people that care, this means we can address all registers large and small, dynamically

[16:40] <brrt> which is awesome because small values prop up in rather more places than i had initially expected

[16:43] <timotimo> very cool!

[16:43] <brrt> there are two things next on the list

[16:43] <brrt> value size propagation

[16:43] <lizmat> brrt++

[16:43] <timotimo> but are we interested in adressing registers as smaller than they are?

[16:43] <brrt> and store adding

[16:43] <brrt> no

[16:43] <timotimo> would we use two halves of a register as two separate registers?

[16:44] <brrt> yes and no, and the yes is mostly uninteresting

[16:44] <timotimo> right, so ... why do you call that awesome? :)

[16:45] <brrt> well, because operand sizes smaller than 8 bytes occur really often

[16:45] <brrt> easily half of all we do is fiddling with interpreter internals

[16:45] <brrt> interpreter internal structures are not all nicely 8-byte sized values

[16:46] <brrt> so, i guess, we are interested in addressing 'small' registers

[16:46] <brrt> not having this would've cost me a lot of complexity in the register allocator

[16:46] <brrt> i now no longer need to take the the size into account

[16:47] <brrt> of the register i wish to use

[16:47] <timotimo> oh, OK

[16:47] <brrt> and, at the same time, if i have to convert a condition code to a flag value (e.g .setnz, sete, setlt, etc), then i'm addressing a single byte, too

[16:49] <brrt> so, its not about addressing them as smaller than they are, just as large as they should be :-)

[16:51] <brrt> i'm afk for tonight

[16:51] <brrt> see you tomorrow!

[16:57] <timotimo> mhm

[16:57] <timotimo> see you then :)

[16:57] <timotimo> have a good sunday

[16:58] <timotimo> (not that you can read that right now)

[18:56] *** rudi_s joined
[18:56] *** dagurval joined
[19:10] *** lizmat joined
[19:11] *** ingy joined
[19:11] *** tadzik joined
[20:02] *** ggoebel joined
[21:37] *** harrow joined
[21:54] *** TEttinger joined
[22:33] *** diakopter joined
