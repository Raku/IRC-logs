[00:46] *** ggoebel joined
[00:58] *** ShimmerFairy joined
[01:47] *** ilbot3 joined
[01:57] <TEttinger> feed it snowden leaks

[05:00] *** harrow joined
[07:03] *** zakharyas joined
[07:10] *** lizmat joined
[08:23] *** mtj_ joined
[08:23] *** brrt joined
[08:34] <brrt> good moarning

[08:36] <jnthn> dobre jitro :)

[08:38] <brrt> iirc... jitro was late morning?

[08:38] <jnthn> Yes :)

[08:42] * jnthn starts typing "how to make atom package" and before he could get done google was suggesting "how to make atom bomb" o.O

[08:43] <brrt> it's an interesting topic :-)

[09:02] <FROGGS> jnthn: that probably just happens because you implemented DESTROY not too long ago :o)

[09:03] * FROGGS .oO( $*W.^can: 'DESTROY' )

[09:15] <jnthn> :)

[09:42] *** Ven joined
[09:45] *** FROGGS_ joined
[12:57] *** brrt joined
[13:22] <brrt> ok, thinking about it properly, i concur that instruction selection comes after tile selection, and that it'd better be done in a preorder traversal order

[13:26] <brrt> or something like that...

[13:51] <timotimo> i still don't grok MVM_ASSIGN_REF

[13:51] <timotimo> what i do understand is it's about serialization contexts

[13:51] <jnthn> It's not :)

[13:52] <timotimo> oh

[13:52] <jnthn> It's about generational GC

[13:52] <timotimo> that's sc_wb, then

[13:52] <timotimo> okay; why do we need to reload objects when we hit a write barrier?

[13:52] <jnthn> Right, this is just the normal write barrier

[13:52] <timotimo> or is that only for when we have a p6opaque?

[13:53] <timotimo> oooh

[13:53] <timotimo> these stores and restores are just because registers get clobbered

[13:53] <brrt> what

[13:53] <brrt> which registers

[13:53] <timotimo> that explains why it writes to rbp-0x*

[13:53] <timotimo> TMP1 and TMP2 in the cases i'm trying to cargocult from :)

[13:54] <brrt> ahaaah

[13:54] <timotimo> no, TMP2 and TMP3

[13:54] <jnthn> The write barrier might end up calling a C function

[13:54] <timotimo> ah!

[13:54] <brrt> what jnthn says

[13:54] <timotimo> now there's an explanation that helps :)

[13:54] <brrt> hit_wb calls a function, hence the values are spilt

[13:54] <brrt> (temporaries)

[13:54] <timotimo> i'm now finally going to implement setcodeobj via the old jit

[13:55] <brrt> mvm_assign_ref is split in two, in a sense

[14:07] <timotimo> yeah, check + hit

[14:10] <timotimo> bleh!

[14:10] <timotimo> setcodeobj never has a known type + correct reprid

[14:16] <timotimo> it seems like that always comes from $!do

[14:16] <timotimo> bbiab

[14:32] *** camelia joined
[15:52] *** lizmat joined
[15:57] <timotimo> maybe i should add a little piece to spesh that checks if there's a guard for $!do having a known type so that that won't be thrown out before jit?

[16:09] <timotimo> jnthn: we don't emit log instructions for the result of getattr_o; is there a good reason to keep it that way?

[16:21] <timotimo> i was wrong

[16:21] <timotimo> we actually do put in a log op for getattr_o and getattrs_o

[16:22] <timotimo> darn, they log different types, but of course all have the same repr

[16:24] <FROGGS> PR 233 is quite interesting

[16:40] *** lizmat joined
[16:57] <japhb> FROGGS: Feels like it should come with a mini-benchmark though.  I would expect MVM{,_bigint}_radix are fast-path operations; it would be nice to avoid making them much slower (if indeed this has any significant effect).

[17:10] <timotimo> perhaps a "known reprid" fact would be interesting?

[19:59] *** synbot6 joined
[20:44] <dalek> MoarVM/jit_and_opt_setcodeobj: 0c3c8fb | timotimo++ | src/ (3 files):

[20:44] <dalek> MoarVM/jit_and_opt_setcodeobj: jit and try to opt setcodeobj

[20:44] <dalek> MoarVM/jit_and_opt_setcodeobj:

[20:44] <dalek> MoarVM/jit_and_opt_setcodeobj: alas, we pretty much always log different type objects.

[20:44] <dalek> MoarVM/jit_and_opt_setcodeobj: since the opt is only interested in REPR ID, maybe that

[20:44] <dalek> MoarVM/jit_and_opt_setcodeobj: ought to become an entry in facts?

[20:44] <dalek> MoarVM/jit_and_opt_setcodeobj: review: https://github.com/MoarVM/MoarVM/commit/0c3c8fb508

[22:45] *** TEttinger joined
[22:49] *** notostraca joined
[23:44] *** notostraca joined
