[00:16] *** flussence joined
[00:47] *** colomon joined
[00:48] *** tokuhiro_ joined
[00:48] *** tadzik joined
[01:48] *** tokuhiro_ joined
[02:04] *** tokuhiro_ joined
[02:31] <hoelzro> ugh

[02:31] <hoelzro> well, I figured it out

[02:31] * hoelzro made a newbie mistake

[02:32] <hoelzro> I handled the case where a new call capture was referring to a frame's callsite, but I wasn't handling the case where a capture was referring to another capture's callsite

[02:45] *** vendethiel joined
[02:54] <timotimo> oh? does that mean you're making progress?

[03:02] <hoelzro> timotimo: yes! I should be pushing code to a branch shortly =)

[03:03] <hoelzro> just in time for my trip, too! I was not looking forward to having an incomplete solution hanging over my head

[03:06] <dalek> MoarVM/patch-callsite-memory-leak: e304e68 | hoelzro++ | src/ (4 files):

[03:06] <dalek> MoarVM/patch-callsite-memory-leak: Track whether or not a capture owns its callsite

[03:06] <dalek> MoarVM/patch-callsite-memory-leak:

[03:06] <dalek> MoarVM/patch-callsite-memory-leak: This fixes a memory leak (RT #126183)

[03:06] <dalek> MoarVM/patch-callsite-memory-leak: review: https://github.com/MoarVM/MoarVM/commit/e304e68d44

[03:07] <hoelzro> timotimo: does this seem sane to you? https://github.com/MoarVM/MoarVM/pull/274

[03:07] <hoelzro> we might want to do proper reference counting, but this seems to work ok

[03:30] <dalek> MoarVM/defer-close-stdin: 4df2030 | hoelzro++ | src/io/procops.c:

[03:30] <dalek> MoarVM/defer-close-stdin: Track process state when spawning children

[03:30] <dalek> MoarVM/defer-close-stdin:

[03:30] <dalek> MoarVM/defer-close-stdin: This is prepare for a fix around closing standard input and race

[03:30] <dalek> MoarVM/defer-close-stdin: conditions

[03:30] <dalek> MoarVM/defer-close-stdin: review: https://github.com/MoarVM/MoarVM/commit/4df2030ad3

[03:30] <dalek> MoarVM/defer-close-stdin: 3adb8e0 | hoelzro++ | src/io/procops.c:

[03:30] <dalek> MoarVM/defer-close-stdin: Re-enqueue close stdin request when process is unstarted

[03:30] <dalek> MoarVM/defer-close-stdin:

[03:30] <dalek> MoarVM/defer-close-stdin: Starting a process from Perl 6 using Proc::Async offers no guarantees

[03:30] <dalek> MoarVM/defer-close-stdin: that the process has had a chance to run once the start method returns;

[03:30] <dalek> MoarVM/defer-close-stdin: it just schedules the process to be started on the async worker thread.

[06:25] *** FROGGS joined
[06:26] *** Ven joined
[07:35] *** Ven joined
[08:33] *** Ven joined
[09:45] *** cognominal joined
[09:57] *** zakharyas joined
[10:54] *** TimToady joined
[11:01] *** colomon joined
[11:11] *** colomon joined
[11:21] *** Ven joined
[13:09] * [Coke] opened RT #126216, but it's probably a moarvm bug.

[13:13] <timotimo> it could also be a violation of the contract that the profiler expects

[13:14] <timotimo> for example, maybe when exit is called, nqp::leaveprofiler or what it's name is never gets called properly?

[13:14] <timotimo> and then we're working off of data that's not properly finalized and also is still being written to?

[13:14] <timotimo> just a theory

[13:14] <timotimo> but this is how i'd go about debugging it: see if the profiler exit nqp:: op is called when exit is involved

[13:41] *** Ven joined
[14:24] *** Ven joined
[15:02] <hoelzro> good morning #moarvm!

[15:18] *** tokuhiro_ joined
[15:57] <hoelzro> if anyone has time today, could I get some eyes on https://github.com/MoarVM/MoarVM/pull/274 and https://github.com/MoarVM/MoarVM/pull/275 , make sure it's good enough for master?

[16:19] *** tokuhiro_ joined
[16:20] <timotimo> i've briefly looked over the patch-callsite-memory-leak code and couldn't see anything wrong with it

[16:20] <timotimo> but i didn't compile and/or run it

[16:20] <timotimo> if it survives spec tests and perhaps even a nqp build under asan or something that'd be good enough for me :)

[16:32] <hoelzro> I spectested it, and it did fine

[16:34] <timotimo> in that case, why don't you go ahead and merge it in?: )

[16:34] <timotimo> :)

[16:34] <jnthn> I'll try and have a look at the two later this evening

[16:35] * jnthn spent the day traveling, which was tiring

[16:39] <timotimo> man who runs before car gets tired, man who runs behind car gets exhausted

[16:39] <jnthn> :P

[16:41] <nwc10> Swedish rail, or something that actually goes foward?

[16:41] <timotimo> an airplane, IIRC

[16:44] <jnthn> Two planes

[16:44] <jnthn> Preceded by a taxi and followed by a train

[16:46] <nwc10> two plans, one after the other, I hope. And not RAID-like failover

[16:46] <nwc10> two plan*e*s

[16:47] <jnthn> yes, indeed

[16:50] <timotimo> maybe the planes coupled while mid-air like those planes that can re-fuel in the air

[16:50] <timotimo> and then the passengers were funneled through a hose from one plane to the other?

[16:50] <jnthn> The first managed to be a little early, and the second managed to be 10 minutes late - the perfect delay to make me rush through the airport to make the train (5 mins earlier and it's an amble, 5 mins later and I'd have not even bothered trying to make it)

[16:51] <jnthn> The only do one train per hour from the airport to the city...

[16:51] <timotimo> wow

[16:52] <nwc10> timotimo: you clearly haven't flow to interesting places (which is probably a good thing)

[16:52] <jnthn> There's a bus every 15 mins or so, but it doesn't take the pretty route by the sea

[16:52] *** Ven joined
[16:52] <jnthn> And takes a little longer

[16:52] <nwc10> ie either *genuinely* interesting places, or airports Ryanair chooses

[16:53] <jnthn> oh my, Ryanair...

[16:53] <nwc10> "there's a train hourly" is somewhat on the good side

[16:53] <hoelzro> I'll merge the two after work tonight, providing no one objects

[16:54] * jnthn wonders why he's so hungry...

[16:55] <jnthn> Mebbe I'll try and find the nice pub I discovered last time...

[16:55] <jnthn> Interesting beers, posh burgers, and stout chocolate cake...what's not to like? Well, the prices, 'cus it's Norway. :)

[16:55] <jnthn> Anyways, bbl &

[17:30] *** FROGGS joined
[17:50] *** Peter_R joined
[17:53] *** vendethiel joined
[18:18] *** Ven joined
[18:21] *** tokuhiro_ joined
[18:39] *** _itz joined
[19:48] *** Ven joined
[20:20] *** Ven joined
[20:22] *** tokuhiro_ joined
[20:29] *** arnsholt joined
[20:31] *** Ven joined
[20:51] *** hoelzro joined
[21:04] <timotimo> jnthn: are you interested in me golfing the magical increase of gen2 roots that came when i was accessing an AoA outside of its correct boundaries?

[21:11] <jnthn> timotimo: Yeah, but not now...I gotta get up to teach tomorrow :(

[21:13] <jnthn> timotimo: I'd see if Failure is involved, and if so if it's to do with Failure holding an Exception which holds a stack trace, since frames tend to be to blame

[21:13] <jnthn> Anyways, 'night o/

[21:14] <timotimo> oh gnite jnthn

[21:14] <timotimo> btw

[21:14] <timotimo> 41.38user 0.13system 0:41.95elapsed 98%CPU (0avgtext+0avgdata 207352maxresident)k

[21:14] <timotimo> compared to:

[21:14] <timotimo> 50.25user 0.12system 0:50.77elapsed 99%CPU (0avgtext+0avgdata 204740maxresident)k

[21:14] <timotimo> this is how my benchmark reacts to the setup block moving to its own private method

[21:14] <timotimo> nativecall i mean

[21:14] <hoelzro> timotimo: nice!

[21:15] <timotimo> this is for rendering 500 "frames"

[21:15] <timotimo> so the framerate is still not that great

[21:15] <timotimo> but it's a noticable improvement

[21:15] <timotimo> why it uses up more memory? i have no clue.

[21:15] <timotimo> perhaps it's noise

[21:16] <hoelzro> I've found a lot of memory noise in MoarVM

[21:16] <japhb> timotimo: What's the time to finish the first frame?

[21:17] <timotimo> you mean from program startup to first frame rendered?

[21:18] <japhb> It's common to do [time-to-finish-first-frame] separate from [(num-frames - 1) / time-after-first-frame]

[21:18] <japhb> Yeah

[21:18] <japhb> Well, program *launch*, but same difference

[21:18] <timotimo> 0.26944467 with the current rakudo/nom

[21:19] <timotimo> 0.25608250 with my change

[21:19] <japhb> And then the other number would be (499 / (41.95 - 0.27)) I presume

[21:19] <timotimo> but that could well be noise

[21:21] <japhb> m: 499 / (41.95 - 0.27)

[21:21] <camelia> rakudo-moar ab7d96: ( no output )

[21:21] <japhb> m: say 499 / (41.95 - 0.27)

[21:21] <camelia> rakudo-moar ab7d96: OUTPUT«11.972169␤»

[21:21] <japhb> OK, so 12 fps.  Only need to get 5x faster.  :-)

[21:22] <japhb> 2.5x for a 30 fps game, and that ain't shabby.

[21:27] <timotimo> ... the ... what?!

[21:27] <timotimo> i ... what ?!?!?

[21:28] <timotimo> the number of find_method calls has reduced to almost 0

[21:28] <timotimo> 3794.65ms was how much time find_method exclusively took; but i could even count the inclusive time here which is 4127.41ms

[21:30] *** cognome joined
[21:31] *** co-gnome joined
[21:37] <timotimo> and i still don't know why CALL-ME doesn't get spesh'd

[21:37] <timotimo> it must be because the callsite we're using for it flattens?

[21:39] <timotimo> also, a very low percentage of calls to the min method are jitted, i wonder why that is

[21:40] <timotimo> more than a hundred K calls, so "not called often enough" isn't the case at all

[21:40] <timotimo> and i didn't find an abort message in the ji tlog

[21:40] <timotimo> jitlog*

[21:45] *** tokuhiro_ joined
[21:58] *** lizmat joined
[23:22] *** cognominal joined
[23:30] *** cognominal_ joined
[23:33] *** orbus joined
[23:49] *** tokuhiro_ joined
