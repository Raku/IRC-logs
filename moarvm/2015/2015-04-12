[00:39] *** vendethiel joined
[01:06] *** vendethiel joined
[01:31] *** vendethiel joined
[01:47] *** ilbot3 joined
[02:38] *** vendethiel joined
[03:02] *** vendethiel joined
[05:37] *** vendethiel joined
[05:48] *** arnsholt_ joined
[05:49] *** BinGOs_ joined
[06:00] *** BinGOs joined
[07:06] *** lue joined
[08:25] <dalek> MoarVM: 1b28af6 | nicholas++ | src/6model/serialization.c:

[08:25] <dalek> MoarVM: Read the serialized reference type discriminator with read_discrim().

[08:25] <dalek> MoarVM:

[08:25] <dalek> MoarVM: This is the first stage of refactoring to permit storing the discriminator in

[08:25] <dalek> MoarVM: one byte, not two.

[08:25] <dalek> MoarVM:

[08:25] <dalek> MoarVM: The reference type discriminator is the only thing written and written as a 16

[08:25] <dalek> MoarVM: bit quantity. For now, keep read_int16() for the read of the discriminator that

[08:25] <dalek> MoarVM: happens as part of *writing* the serialization blob.

[08:25] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1b28af697d

[08:25] <dalek> MoarVM: 6433def | nicholas++ | src/6model/serialization.c:

[08:25] <dalek> MoarVM: Refactor read_discrim() to take thread context and serialization reader as args.

[08:25] <dalek> MoarVM: 4f55679 | nicholas++ | src/6model/serialization.c:

[08:25] <dalek> MoarVM: Store the serialized reference type discriminator in 1 byte, not 2.

[08:25] <dalek> MoarVM:

[08:25] <dalek> MoarVM: This shrinks CORE.setting.moarvm by 5% (568K). It's now just over 11M.

[08:25] <dalek> MoarVM: (We serialize a lot of references. 582038 to be exact, at the time of writing.)

[08:25] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4f556793c7

[08:26] <nwc10> in the end, I'm not sure how exact my exact was. But it was consistent with the size drop :-)

[08:26] <nwc10> jnthn++ # checking my stuff

[08:27] *** vendethiel joined
[08:27] <jnthn> I *think* I have all of your Moar/NQP patches merged by now :)

[08:27] <nwc10> all the ones I've written and pushed

[08:28] <jnthn> Also, this remote workflow works much better for me than email

[08:28] <nwc10> (it looks like it. I'll check soon, but the directory that it's easiest to use for that is busy doing more work)

[08:28] <nwc10> cool

[08:28] <nwc10> I just have to remember not to yank the rug from under you by force pushing a change while you're busy looking at the old one

[08:30] <jnthn> *nod*

[08:30] <jnthn> Leaving me with rebasing work to do is OK.

[08:31] <dalek> MoarVM: 551e211 | jnthn++ | src/6model/serialization.c:

[08:31] <dalek> MoarVM: Add missing IS_CONCRETE checks in serialization.

[08:31] <dalek> MoarVM:

[08:31] <dalek> MoarVM: We likely should not have gotten away with these before now; they can

[08:31] <dalek> MoarVM: lead to illegal memory reads.

[08:31] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/551e211384

[08:33] <dalek> MoarVM: 42342d3 | jnthn++ | src/6model/reprconv.c:

[08:33] <dalek> MoarVM: Make unbox int/num/str functions test IS_CONCRETE.

[08:33] <dalek> MoarVM:

[08:33] <dalek> MoarVM: We were failing to do this check in most places that called these

[08:33] <dalek> MoarVM: functions, so it makes sense to move the check inside of them to fix

[08:33] <dalek> MoarVM: the existing bugs and prevent a bunch of new and similar ones.

[08:33] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/42342d3f60

[08:36] <dalek> MoarVM: 1055bb7 | jnthn++ | src/core/args.c:

[08:36] <dalek> MoarVM: Remove duplicate IS_CONCRETE check.

[08:36] <dalek> MoarVM:

[08:36] <dalek> MoarVM: Now that we moved this into the unbox functions themselves, we do not

[08:36] <dalek> MoarVM: need to repeat it in args processing.

[08:36] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1055bb7dd5

[08:37] <nwc10> jnthn: yes, I think they're all there. Thanks

[08:54] *** lizmat joined
[09:08] *** lizmat joined
[10:11] <timotimo> nwc10: i like your ~5% decrease

[10:11] <timotimo> much fewer zeroes everywhere i bet

[10:12] <timotimo> jnthn: +1/0/-1 on merging devirt_repr_ops into master?

[10:13] <jnthn> 0; I'd like to review it first.

[12:55] <timotimo> sure

[12:55] <timotimo> on my machine it passed spec tests, but it wasn't a big speed increase, sadly

[13:10] <timotimo> ... -Wpedantic does not help me figure out if this will build on msvc or not

[13:11] <timotimo> a hundred million times warnings like src/gc/orchestrate.h:14:29: warning: comma at end of enumerator list [-Wpedantic]

[13:11] <timotimo> for example

[13:27] *** colomon joined
[13:50] *** zakharyas joined
[15:19] <vendethiel> timotimo: is moarvm c99 or c89?

[15:19] <jnthn> C89

[15:19] <vendethiel> ah, that explains the warning then

[15:20] * vendethiel wrote the most basic possible VM in C (89) last week, and is very happy not having to maintain one...:)

[15:21] <vendethiel> (even if I don't doubt moarvm's code to be literally a hundred times better than mine...)

[15:35] <dalek> MoarVM: 23e9c98 | jnthn++ | tools/ucd2c.pl:

[15:35] <dalek> MoarVM: Have Unicode DB generator emit NFC lookup table.

[15:35] <dalek> MoarVM:

[15:35] <dalek> MoarVM: These will be used in computing NFC/NFKC.

[15:35] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/23e9c98afb

[15:35] <dalek> MoarVM: b1e3ead | jnthn++ | src/strings/unicode_db.c:

[15:35] <dalek> MoarVM: Update generated Unicode DB to have NFC tables.

[15:35] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b1e3ead1e5

[15:38] <dalek> MoarVM: dadde5a | jnthn++ | src/strings/unicode (2 files):

[15:38] <dalek> MoarVM: Implement codepoints -> primary composite lookup.

[15:38] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/dadde5ae13

[15:50] <dalek> MoarVM: febd736 | jnthn++ | src/strings/normalize.c:

[15:50] <dalek> MoarVM: Implement most of Unicode canonical composition.

[15:50] <dalek> MoarVM:

[15:50] <dalek> MoarVM: Used by NFC and NFKC. Known to be missing the Hangul special cases,

[15:50] <dalek> MoarVM: which is the likely reason for the remaining Unicode normalization

[15:50] <dalek> MoarVM: test failures.

[15:50] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/febd736d64

[16:31] <dalek> MoarVM: 117cea2 | jnthn++ | src/strings/normalize.c:

[16:31] <dalek> MoarVM: Factor out Hangul constants.

[16:31] <dalek> MoarVM:

[16:31] <dalek> MoarVM: So we can use them during canonical composition too.

[16:31] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/117cea2470

[16:31] <dalek> MoarVM: 3f29518 | jnthn++ | src/strings/normalize.c:

[16:31] <dalek> MoarVM: Implement Hangul part of canonical composition.

[16:31] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3f295180fe

[16:32] <jnthn> Neat, we pass all 74,324 test cases from NormalizationTests in the Unicode 7 spec.

[16:47] <jnthn> dinner &

[16:51] <vendethiel> jnthn++ # great work, as always :o)

[16:52] *** camelia joined
[17:17] *** zakharyas joined
[18:53] *** brrt joined
[18:54] <brrt> \o

[19:10] <timotimo> o/

[19:10] <timotimo> brrt: did you see what sillyness i had done wrong in the devirt reprop branch?

[19:10] <brrt> no

[19:10] <brrt> i did not

[19:10] <brrt> i'll go fetch it

[19:11] <timotimo> it's embarassing, really :)

[19:13] <brrt> i'm assuming you mean exchanging pop and push

[19:13] <brrt> that's not embarassing, that just happens :-)

[19:16] <brrt> that branch does still contain the patch i thought was unworthy :-P

[19:17] <brrt> although it is correct

[19:17] <brrt> and i'm wondering if we can't / shouldn't push that up somewhere in the chain

[19:17] <timotimo> yes, i can still cut that out, no problem

[19:19] <dalek> MoarVM/jit_devirtualize_reprops_3: 02ee703 | timotimo++ | src/jit/emit_x64.dasc:

[19:19] <dalek> MoarVM/jit_devirtualize_reprops_3: Revert "special case initial TC and STable, obj, objbody cases in jit"

[19:19] <dalek> MoarVM/jit_devirtualize_reprops_3:

[19:19] <dalek> MoarVM/jit_devirtualize_reprops_3: This reverts commit a185b28d3d214afd4f648019a56dacdcabd1c50d.

[19:19] <dalek> MoarVM/jit_devirtualize_reprops_3: review: https://github.com/MoarVM/MoarVM/commit/02ee703155

[19:30] * brrt wants this: http://lvalsan.web.cern.ch/lvalsan/processor_benchmarking/presentation/#/available_arm_systems

[19:31] <brrt> 40W for 8 cores @ 2,4Ghz is pretty awesome

[19:31] <brrt> timotimo: do you notice any speedups yet?

[19:31] <brrt> timotimo++ btw :-)

[19:33] <brrt> it's AArch64 btw

[19:35] <timotimo> the speedups were qiute sad

[19:35] <timotimo> for a spec test run, that is

[19:36] <brrt> hmm

[20:43] *** cognominal joined
[21:05] * brrt afk

[22:20] *** vendethiel joined
[23:05] *** vendethiel joined
