[02:26] *** FROGGS_ joined
[02:33] *** cognominal joined
[02:41] <dalek> MoarVM/tommy-hash: adfdd67 | diakopter++ | / (2 files):

[02:41] <dalek> MoarVM/tommy-hash: build it righter

[02:41] <dalek> MoarVM/tommy-hash: review: https://github.com/MoarVM/MoarVM/commit/adfdd67614

[02:41] <dalek> MoarVM/tommy-hash: 6381236 | diakopter++ | build/Makefile.in:

[02:41] <dalek> MoarVM/tommy-hash: even more righter

[02:41] <dalek> MoarVM/tommy-hash: review: https://github.com/MoarVM/MoarVM/commit/6381236fe8

[02:41] <dalek> MoarVM/tommy-hash: 41d30df | diakopter++ | 3rdparty/tommy/tommytypes.h:

[02:41] <dalek> MoarVM/tommy-hash: MSVC needs this...

[02:41] <dalek> MoarVM/tommy-hash: review: https://github.com/MoarVM/MoarVM/commit/41d30df45c

[02:41] <dalek> MoarVM/tommy-hash: 627db6d | diakopter++ | src/6model/reprs/KnowHOWREPR.c:

[02:41] <dalek> MoarVM/tommy-hash: hash needs to do some initialization now, but luckily it doesn't allocate anything else

[02:41] <dalek> MoarVM/tommy-hash: review: https://github.com/MoarVM/MoarVM/commit/627db6dac5

[02:42] *** vendethiel joined
[02:47] *** ilbot3 joined
[02:59] <diakopter> jnthn: any idea how to make moarvm dump a HLL callstack while debugging in Visual Studio

[04:32] *** stmuk_ joined
[07:29] <nwc10> good *, #moarvm

[07:55] *** llfourn joined
[08:26] *** timotimo joined
[09:09] <timotimo> diakopter: print MVM_dump_stacktrace(tc) in any frame that has a tc

[09:39] *** virtualsue joined
[10:18] *** kjs_ joined
[10:49] *** kjs_ joined
[11:52] *** kjs_ joined
[12:14] *** cognominal joined
[12:45] *** kjs_ joined
[13:15] *** kjs_ joined
[13:19] *** kjs_ joined
[13:36] *** leont joined
[15:00] *** llfourn joined
[16:01] *** llfourn joined
[16:22] *** virtualsue joined
[16:26] <dalek> MoarVM: be41cae | jnthn++ | docs/ChangeLog:

[16:26] <dalek> MoarVM: ChangeLog for 2015.12.

[16:26] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/be41caee99

[16:30] <nwc10> jnthn: ++ Copy callsites when inliing

[16:31] <nwc10> also, arguably, s/unicode/Unicode/g

[16:32] <dalek> MoarVM: 892d580 | jnthn++ | docs/ChangeLog:

[16:32] <dalek> MoarVM: ChangeLog tweaks; nwc10++.

[16:32] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/892d580a1c

[16:32] <nwc10> ++ Add missing unsigned operand types; clean up unsinged int ops

[16:32] <nwc10> :-)

[16:32] <jnthn> heh

[16:33] <timotimo> good-looking changelog :)

[16:33] <nwc10> ++ Somewhat cheating unsinged parameter ops.

[16:33] <timotimo> inliing is a bit like skiiing?

[16:33] <jnthn> Change log was mostly derived directly from git log --oneline --reverse :)

[16:33] <nwc10> I think you need to neuralise your spellchecker excpetions

[16:33] <jnthn> So all these errors are those of the original authors :P

[16:34] <dalek> MoarVM: 64d5884 | jnthn++ | docs/ChangeLog:

[16:34] <dalek> MoarVM: Correct spellos; nwc10++.

[16:34] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/64d58841d4

[16:34] <nwc10> I can't spot any more

[16:40] <hoelzro> o/ #moarvm

[16:41] <jnthn> o/ hoelzro

[16:41] <hoelzro> o/ jnthn

[16:41] <timotimo> yo ro

[16:43] <hoelzro> o/ timotimo

[16:44] <nwc10> \o \o \o \o

[16:44] <nwc10> we weem to be out of balance

[16:49] <hoelzro> o/ nwc10 \o

[17:16] <hoelzro> Moar has no guaranteed GC order, right? even if A has a pointer to B, you don't know which will be collected first?

[17:16] <hoelzro> I did some sleuthing and think I determined what the implemented order is, but I assume that's subject to change

[17:17] <JimmyZ> I think so

[17:18] <jnthn> Yeah, you can't rely on such ordering

[17:20] <hoelzro> k, thanks for confirming

[17:20] *** Begi joined
[17:20] *** Begi left
[17:21] <hoelzro> speaking of the GC, I seem to remember there was something that causes a nursery GC or something upon a frame pop, but I couldn't find that in the code when I looked.  Did I dream that?

[17:22] <jnthn> Surely

[17:22] <jnthn> That'd be hideously expensive.

[17:27] <hoelzro> ok, it was a dream then =)

[18:28] *** uruwi joined
[19:05] *** virtualsue joined
[19:17] <uruwi> Hello?

[19:18] <timotimo> hi

[19:18] <uruwi> Hi  again

[19:19] <uruwi> Just lurking around about the mutex crash.

[19:21] <timotimo> OK

[19:21] <timotimo> yeah, i've got nothin'

[19:37] <uruwi> Yeah, some bugs aren't easy to fix.

[19:38] <timotimo> like the run_alt method not found problem

[20:48] *** virtualsue joined
[20:59] <TimToady> can we notice we didn't find run-alt, and re-install it somehow?

[20:59] <TimToady> as a workaround?

[20:59] <TimToady> or is that just the tip of the iceberg?

[21:00] <jnthn> TimToady: Tip of the iceberg, I fear

[21:00] <jnthn> And we'd not be in a place to really

[21:00] <TimToady> well, full speed ahead then :)

[21:01] <jnthn> Got the final bit of travel tomorrow, which will hopefully make me less sick than the bit I did a couple of days ago. So mebbe I'll be able to find it tomorow once that's done.

[21:02] <TimToady> well, Merry Christmas Eve Eve

[21:02] <jnthn> :)

[21:03] <timotimo> TimToady: i think what nine has discovered is that it's not grabbing an NFA object at all, but a "random NQPArray with always different numbers of values"

[21:03] <jnthn> Yeah...it's a corruption issue

[21:04] <jnthn> From the description

[21:04] <jnthn> I failed after an hour's trying to recreate it locally; nine++ left me a new hint in the backlog, so I can try that tomorrow

[21:11] <jnthn> TimToady: Did the "as Foo" alias for coercion syntax go away, and if not should it?

[21:11] <jnthn> Seems we still got it...

[21:18] <lizmat> it was recently removed from panda, afaik

[21:24] <jnthn> OK. Not sure I want to carry it forward...

[21:24] <lizmat> fwiw, there is nu use of "as" in the core anymore

[21:26] <jnthn> aye

[21:26] <TimToady> as far as I'm concerned, it can go

[21:27] <jnthn> k

[21:31] <lizmat> double checked panda, no " as " in there

[21:33] <jnthn> ok

[21:33] <TimToady> so what could possibly go worng?

[21:33] <jnthn> I've got a patch locally to rip it out

[21:46] <jnthn> And it's gone

[21:46] <jnthn> rest time :)

[22:46] <diakopter> timotimo: my problem is: something is corrupting the call stack and related, such that debugging isn't working

[22:46] <diakopter> bah

[22:47] <timotimo> something? it's probably just the jit

[22:47] <timotimo> the jit pretty much always makes the stack unreadable to gdb

[22:50] <diakopter> jit is disabled

[22:50] <diakopter> this is MSVC

[22:54] <timotimo> oh

[22:54] <timotimo> -fno-omit-frame-pointer?
