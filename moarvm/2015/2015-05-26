[00:19] *** colomon joined
[00:40] *** vendethiel joined
[01:10] *** vendethiel joined
[01:33] *** colomon joined
[01:48] *** ilbot3 joined
[04:10] <JimmyZ> japhb: I don't know , but https://msdn.microsoft.com/en-us/library/dd374089%28VS.85%29.aspx FYI

[05:58] *** vendethiel joined
[06:26] *** flaviusb joined
[06:50] *** zakharyas joined
[06:52] *** FROGGS joined
[06:52] <nwc10> jnthn: what helgrind makes of it all: http://paste.scsys.co.uk/482933

[07:05] <FROGGS> o/

[07:06] <nwc10> \o

[07:08] *** Ven joined
[07:45] <jnthn> Helgrind makes so much noise it's hard to extract the false positives from the interesting...

[07:46] <nwc10> 1381 lines - this time it wasn't massive

[07:46] <nwc10> anyway, that was more "if it's useful"

[07:46] <jnthn> *nod*

[07:46] <nwc10> there's clearly a problem, as it's repeatable

[07:46] <nwc10> but I really don't have any good idea how to dig further.

[07:46] <jnthn> So, in bed last night while waiting to sleep, I figured out the cheap way to fix the serialization data race, and also that there'd have been a way to trigger it without laziness anyway if you were creative enough.

[07:47] <nwc10> good stuff

[07:47] <jnthn> I don't know how much of the other issues that will fix

[07:47] *** vendethiel joined
[07:48] <jnthn> I think some of what we're seeing now is the result of previously hidden-by-a-core-under-load things coming to light

[07:48] <jnthn> The deserialization race is certainly one of those. It's always been there, but rarely showed up

[07:50] <FROGGS> I also got a segfault in SCRef.c when use'ing a module in en EVAL which was installed into a CURLI

[07:50] <FROGGS> an*

[07:50] <jnthn> I highly doubt that's the same issue. You need multiple threads to get a race. :)

[07:50] <FROGGS> ahh

[07:50] <FROGGS> it failed on GC_WORKLIST_ADD IIRC

[07:51] <jnthn> there's a debugging mode for that

[07:52] <FROGGS> yeah, need to look at that again, since now is post-release

[07:52] <FROGGS> (I took the weekend off since the release was kinda painful)

[07:54] <jnthn> (time off)++

[07:54] <FROGGS> :o)

[07:55] <FROGGS> now I am back and pick up full fart :P

[07:59] <jnthn> :D

[08:27] *** vendethiel joined
[09:03] *** vendethiel joined
[09:30] *** brrt joined
[09:43] *** vendethiel joined
[09:53] <brrt> \o

[09:54] <nwc10> o/

[09:57] <FROGGS> -o-

[10:12] <brrt> :-)

[10:13] <brrt> so, what's today's plan for making perl6 faster

[10:24] <brrt> and more stable :-)

[10:58] <FROGGS> my plan is not to make it faster or stable, but I'm trying to make a certain slang this evening, or at least explore its limits :o)

[10:59] *** vendethiel joined
[11:12] *** Ven joined
[11:29] <brrt> sounds like a decent plan to me

[12:00] <FROGGS> yeah, I am eager to start, since it is about EVALing a 'safe' subset of Perl 6, that is, a subset that is perhaps based on the restricted setting

[12:01] <FROGGS> so that you can "EVAL" stuff passed by commandline, which may contain regexes and other stuff, but does not wipe your hard disk in a BEGIN block etc

[12:02] *** ggoebel joined
[12:22] *** vendethiel joined
[12:38] *** Ven joined
[12:50] *** vendethiel joined
[13:15] *** vendethiel joined
[13:16] *** dalek joined
[13:48] <brrt> right. that would be bad

[13:48] <brrt> nobody likes wiped hard disks

[13:51] *** Ven joined
[14:07] *** vendethiel joined
[14:22] <dalek> MoarVM: 5ddab9a | FROGGS++ | src/core/nativecall.c:

[14:22] <dalek> MoarVM: add dlerror() in errmsg for nativecall for clarity

[14:22] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5ddab9a43d

[14:41] *** vendethiel joined
[14:50] *** colomon joined
[15:14] *** vendethiel joined
[15:36] <japhb> JimmyZ: From https://msdn.microsoft.com/en-us/library/dd374081(v=vs.85).aspx (linked from the page you sent), it looks like the Windows "Unicode" functions push UTF-16 pretty hard, though apparently there is some support for translating UTF-7 and UTF-8 via pseudo-codepages.

[15:37] <japhb> .oO( UTF-16: The World^W^WUCS-2 is Not Enough )

[15:43] *** colomon joined
[15:45] <JimmyZ> japhb: yeah.

[16:39] *** camelia joined
[17:38] *** vendethiel joined
[17:40] *** FROGGS joined
[18:16] *** Peter_R joined
[19:36] * timotimo wonders about jnthn's status

[19:49] *** colomon joined
[19:49] <lizmat> I think jnthn is travelling a lot in anticipation of the coming weekend

[19:51] *** brrt joined
[19:51] <masak> I can confirm this.

[19:52] <nwc10> and I just thought that he was fleeing Eurovision 2016

[19:52] <lizmat> 2016 ???

[19:52] <lizmat> ah, yes

[19:52] <lizmat> La Suede    :-)

[19:59] <timotimo> ah

[20:05] <timotimo> i thought jnthn was going to develop and push over the course of the day

[20:07] <timotimo> hm, that also means jnthn isn't going to be able to tell me more about how to figure out if a given call target wants to handle junctions on its own

[20:48] *** colomon joined
[21:17] *** colomon joined
[21:32] *** brrt left
[21:41] *** colomon joined
[22:11] *** vendethiel joined
[22:19] *** colomon joined
[22:27] <timotimo> brrt, it seems like param_sp being used is keeping us from jitting next, last, and redo

[22:27] <timotimo> why must that thing be so complicated :\

[22:27] <timotimo> though on the other hand, we'd want to avoid p6argvmarray anyway

[22:28] <timotimo> because that'll generate a BOOTArray every time we call next/last/redo even if the number of elements is bound to be 0

[22:32] <timotimo> can we use captureposelems without forcing the allocation of some object before that?

[22:34] * timotimo just goes ahead and tries

[22:35] <timotimo> i just want a cheap way to figure out whether our block with signature  -> | { ... } was called with arguments or without

[22:35] <timotimo> but i suppose it really wants to be a multi
