[01:18] *** vendethiel joined
[01:24] *** agentzh_ joined
[01:26] *** colomon joined
[01:32] *** agentzh_ joined
[01:49] *** vendethiel joined
[03:03] *** vendethiel joined
[03:35] *** vendethiel joined
[05:15] *** vendethiel joined
[05:38] *** vendethiel joined
[06:26] *** vendethiel joined
[06:45] *** FROGGS joined
[07:03] *** brrt joined
[07:31] *** zakharyas joined
[08:56] <vendethiel> https://github.com/MoarVM/MoarVM/blob/master/src/core/frame.c#L1052 seem to be missing an "are"

[09:11] <jnthn> inside of an inline, it's too dark to grammar...

[09:12] *** harrow joined
[09:15] <masak> an inline is man's best friend

[09:30] <jnthn> The workers must take control of the means to inline!

[09:38] <dalek> MoarVM: 1e07fd4 | jnthn++ | src/core/frame.c:

[09:38] <dalek> MoarVM: Fix a grammaro; vendethiel++.

[09:38] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1e07fd4e95

[09:39] <vendethiel> that's a pretty hairy part of the code :p

[09:39] <vendethiel> (that means I don't get it)

[09:41] <jnthn> Indeed it is

[09:41] <jnthn> It's basically saying "what would happen if we de-optimized and then I did the lookup", but avoiding having to deopt. :)

[09:48] <jnthn> Åhnejs...I'm running out of coffee...

[09:49] <nwc10> "Åhnejs"?

[09:50] <tadzik> sounds like ancient egyptian web framework

[09:51] <jnthn> nwc10: A Swedish approximation of "oh noez" :)

[09:51] <nwc10> ah, so relatively polite?

[09:52] <jnthn> yes :)

[09:52] <jnthn> There was actually enough for me to make today's cup

[09:53] <nwc10> aha right. so this is one of those irregular verbs, in that "___ I've run out of coffee" would be a very different word?

[09:59] <vendethiel> MVM_USED_BY_JIT means the compiler shouldn't try to optimize the function? (optimize("g", off))

[10:00] <jnthn> vendethiel: More "not change calling conventions"

[10:00] <jnthn> I think we disabled a very specific kind of opt

[10:03] <vendethiel> g Enable global optimizations.

[10:03] <vendethiel> from msdn

[10:04] <jnthn> Yeah, that's the one that fiddles wiht ccs iirc

[10:07] <vendethiel> I gather invoke_v, invoke_i, invoke_n and invoke_s are optimizations, much like nqp's list_s, list_i etc?

[10:08] <jnthn> No, they vary on the result register type

[10:08] <jnthn> nqp's list_s and list_i aren't opts either

[10:08] <jnthn> They get you a different data structure

[10:09] <jnthn> (array of native str/int rather than an object array that needs boxing)

[10:09] <vendethiel> well, isn't having an array of native str/int rather than a boxed object something that was made for optimization?

[10:11] <jnthn> Well, maybe, but not in the compiler sense, more the programmer one

[10:11] <jnthn> From Moar/NQP's point of view this is just another language feature to support.

[10:12] <jnthn> (expressed as my int @x in Perl 6)

[10:14] <vendethiel> "STABLE" for serialization table? the parametric extensions doc talks about "STable", are they the same?

[10:15] <vendethiel> (because I think STABLE was here much before parametric extensions)

[10:16] <jnthn> STABLE = Shared Table

[10:16] <jnthn> The stuff a type (defined as a pairing of REPR/HOW) has in common

[10:17] <vendethiel> guess I better look at how REPR exists in the big scheme of things

[10:17] <vendethiel> or rather, in the big 6model

[11:25] <jnthn> Stage parse      : Internal error: zeroed target thread ID in work pass

[11:25] <jnthn> yowser

[11:27] <lizmat> yowser...  something I did ?

[11:27] <jnthn> No

[11:27] <jnthn> I made a tiny change in CORE.setting locally and it triggered it

[11:28] <jnthn> Some GC buglet that we only occasionally trip up on

[11:28] <jnthn> But now I actually can reproduce it, I'll try and figure it out

[11:28] <jnthn> I think you ran into it a while ago in a similar situation

[11:31] <jnthn> lizmat: yes, https://rt.perl.org/Ticket/Display.html?id=124196

[11:32] <jnthn> Probably another symptom of the same kinda thing

[11:32] <jnthn> Darn, it doesn't crash under the debugger

[11:32] <lizmat> yes, it's fickly

[11:33] * jnthn turns off using the debug heap

[11:34] <jnthn> A debug build experiences it at least

[11:36] <nwc10> ASAN hasn't spotted this ever

[11:40] <moritz> jnthn: I still managed to make it segfault

[11:41] <moritz> jnthn: but only with   echo "foo" | telnet localhost 3333

[11:41] <moritz> jnthn: might be a timing issue about closing connections before reading the response

[11:41] <jnthn> Maybe...dunno

[11:41] <jnthn> I had a Perl 6 script hammering it with requests until it fell over

[11:41] <moritz> I have a bt for you

[11:42] <moritz> jnthn: http://perlpunks.de/paste/show/5555db90.4a64.38a

[11:42] <jnthn> eek, in libuv?

[11:42] <jnthn> odd

[11:44] <jnthn> hm

[11:44] <jnthn> MVM_gc_worklist_add(tc, worklist, &new_addr_st->paramet.ric.parameterizer);

[11:44] <jnthn> There's the zeroed item it tries to add

[11:45] <jnthn> That will hopefully not be too annoying to hunt down

[11:45] <jnthn> well, hm

[11:48] <jnthn> oh, I wonder...

[11:53] <dalek> MoarVM: cb0d552 | jnthn++ | src/6model/parametric.c:

[11:53] <dalek> MoarVM: Fix a GC marking bug in parametric type setup.

[11:53] <dalek> MoarVM:

[11:53] <dalek> MoarVM: This could cause very occasional crashes, including in CORE.setting

[11:53] <dalek> MoarVM: compilation.

[11:53] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cb0d55239b

[11:53] <jnthn> ...from the "what on earth are the odds of that!" department...

[11:54] <nwc10> jnthn: https://www.youtube.com/watch?v=BgIuUyAUxaw -- million to one but still they come

[11:59] <jnthn> apparently :)

[11:59] <jnthn> And thankfully on my machine so I could hunt it down :)

[12:01] <jnthn> ok, errand and lunch...bbiab

[12:34] <dalek> Heuristic branch merge: pushed 287 commits to MoarVM/cpp2 by hoelzro

[14:03] *** FROGGS[mobile] joined
[14:07] <dalek> MoarVM: 6604cb7 | jnthn++ | src/core/exceptions.c:

[14:07] <dalek> MoarVM: Implement exception object creation from category.

[14:07] <dalek> MoarVM:

[14:07] <dalek> MoarVM: A long-standing TODO that could lead to some unhelpful errors.

[14:07] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6604cb7e37

[14:11] <vendethiel> jnthn: is that last commit implementing the categories described here? https://github.com/MoarVM/MoarVM/blob/master/docs/exceptions.markdown

[14:12] <jnthn> vendethiel: Yeah; we can throw without actually creating an exception object for control exceptions in NQP, but it exploded it you did actually need said exception object

[14:12] <vendethiel> that means performance improvements for control-flow (next/redo etc) exceptions?

[14:13] <jnthn> That's the motivation for having it the way it is, yes

[14:14] <vendethiel> those documents are informative :)

[14:15] <jnthn> Turns out fixing that todo told me the thing I suspected was the cuase of the actual bug I'm hunting is, in fact, not the case...

[14:16] <vendethiel> .oO( todo-at-a-distance )

[15:49] *** vendethiel joined
[16:12] *** colomon_ joined
[16:14] *** vendethiel joined
[16:19] *** colomon_ joined
[16:29] *** colomon_ joined
[18:25] *** vendethiel joined
[19:29] *** brrt joined
[19:38] *** brrt joined
[19:46] *** vendethiel joined
[19:49] *** brrt joined
[20:33] <dalek> MoarVM: 1a36596 | jnthn++ | src/6model/sc.c:

[20:33] <dalek> MoarVM: Check owning object wasn't disclaimed.

[20:33] <dalek> MoarVM:

[20:33] <dalek> MoarVM: Some objects are serialized as part of an enclosing object (more for

[20:33] <dalek> MoarVM: historical reasons than good ones at this point, alas). Check we did

[20:33] <dalek> MoarVM: not clear an SC when doing repossession.

[20:33] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1a365961cc

[21:55] *** dalek joined
[22:00] *** colomon joined
[22:08] *** vendethiel joined
[22:42] *** vendethiel joined
[23:16] *** vendethiel joined
