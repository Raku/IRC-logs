[01:31] *** vendethiel joined
[03:02] *** vendethiel joined
[04:32] *** vendethiel joined
[05:01] *** vendethiel joined
[05:09] <dalek> MoarVM: f12710c | paultcochrane++ | .travis.yml:

[05:09] <dalek> MoarVM: Change Travis matrix option to --no-jit

[05:09] <dalek> MoarVM:

[05:09] <dalek> MoarVM: This is because JIT is on by default, thus only the JIT was being tested in

[05:09] <dalek> MoarVM: all configurations.  It was also throwing the warning that --enable-jit was

[05:09] <dalek> MoarVM: obsolete and mentioning the --no-jit option, which would make sense so as to

[05:09] <dalek> MoarVM: test with and without JIT.

[05:09] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f12710c137

[05:09] <dalek> MoarVM: b1fe8c1 | (Jimmy Zhuo)++ | .travis.yml:

[05:09] <dalek> MoarVM: Merge pull request #205 from paultcochrane/pr/enable_jit_to_no_jit

[05:09] <dalek> MoarVM:

[05:09] <dalek> MoarVM: Change Travis matrix option to --no-jit

[05:10] <dalek> MoarVM: 0afe1e0 | paultcochrane++ | src/6model/reprs/MVM (3 files):

[05:10] <dalek> MoarVM: Initialise unset fields in MVMStorageSpec

[05:10] <dalek> MoarVM:

[05:10] <dalek> MoarVM: These fields were uninitialised and thus flagged as a potential problem by

[05:10] <dalek> MoarVM: Coverity Scan.  The nqp tests pass and this seems correct in this situation,

[05:10] <dalek> MoarVM: however a code review would be a good idea to be on the safe side.

[05:10] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0afe1e047c

[05:10] <dalek> MoarVM: 42e66bc | (Jimmy Zhuo)++ | src/6model/reprs/MVM (3 files):

[05:10] <dalek> MoarVM: Merge pull request #204 from paultcochrane/pr/set_spec_fields

[05:10] <dalek> MoarVM:

[05:10] <dalek> MoarVM: Initialise unset fields in MVMStorageSpec

[05:10] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/42e66bc5cb

[05:12] <dalek> MoarVM: 56dcbaa | (Francois Perrad)++ | / (2 files):

[05:12] <dalek> MoarVM: enforce C99 compliance

[05:12] <dalek> MoarVM:

[05:12] <dalek> MoarVM: needs -D_GNU_SOURCE or -D_XOPEN_SOURCE=600

[05:12] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/56dcbaa08c

[05:13] *** dalek joined
[05:22] *** colomon joined
[05:26] *** vendethiel joined
[06:25] *** vendethiel joined
[06:28] <jnthn> On 0afe1e0, any code reading those fields when the box type is reference is wrong anyway; they're meaningless whatever values they have in that case.

[06:29] <jnthn> So, wasn't a bug, but don't mind the patch.

[06:29] <jnthn> 56dcbaa is curious in that it's C89 we're targetting.

[07:10] *** zakharyas joined
[07:15] <dalek> MoarVM: 94199b9 | jnthn++ | src/core/bytecode.c:

[07:15] <dalek> MoarVM: Toss commented out code.

[07:15] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/94199b9464

[07:23] <dalek> MoarVM: 052c210 | jnthn++ | docs/ChangeLog:

[07:23] <dalek> MoarVM: Add 2015.04 ChangeLog entries.

[07:23] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/052c210289

[07:23] <jnthn> Busy month!

[07:24] <jnthn> 157 commits

[07:24] <nwc10> I failed to make 2 (more) of mine work. (So far)

[07:25] <jnthn> There's always a next month

[07:25] <nwc10> right now it's feeling like unless that's a month made of Sundays, they're not going to work.

[07:27] *** FROGGS joined
[07:27] <dalek> MoarVM: 4ee2748 | jnthn++ | VERSION:

[07:27] <dalek> MoarVM: Bump VERSION.

[07:27] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4ee2748fe6

[07:27] <dalek> MoarVM: 3607c62 | jnthn++ | README.markdown:

[07:27] <dalek> MoarVM: Tweak a README item.

[07:27] <dalek> MoarVM:

[07:27] <dalek> MoarVM: To better indicate what sort of things we can do, now we can do 'em.

[07:27] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3607c624dc

[07:28] *** vendethiel joined
[07:28] <jnthn> I'll give folks a chance to review the README etc.

[07:29] <jnthn> Anything from that aside, 3607c62 is what will be released in a couple of hours.

[07:29] <FROGGS> jnthn++

[07:30] <jnthn> masak: Moar release should be in place in time :)

[07:31] <FROGGS> jnthn: the section "Building a Rakudo with MoarVM" mentions parrot

[07:31] <jnthn> Ah

[07:32] <FROGGS> s/parrot/jvm/?

[07:32] <FROGGS> "Precise, generational, parallel, GC" -- is the last comma correct there?

[07:33] <dalek> MoarVM: cdcbf43 | jnthn++ | README.markdown:

[07:33] <dalek> MoarVM: Give Rakudo Configure.pl example that works.

[07:33] <dalek> MoarVM:

[07:33] <dalek> MoarVM: FROGGS++

[07:33] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cdcbf4353a

[07:34] <jnthn> FROGGS: It's probably an over-reaction to http://cdn2.thegloss.com/wp-content/uploads/2011/09/jfk.jpg :)

[07:35] <FROGGS> lol

[07:38] <dalek> MoarVM: 6c7541e | jnthn++ | README.markdown:

[07:38] <dalek> MoarVM: Grammar tweak; FROGGS++.

[07:38] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6c7541e192

[07:42] <nwc10> jnthn: "Implement a more compact varint serialization format" isn't quite correct

[07:43] <nwc10> I think it's usually *less* compact.

[07:43] <nwc10> (slightly)

[07:43] <nwc10> but it uses less CPU

[07:43] <nwc10> it will be more compat for values between 64 and 126

[07:45] <jnthn> nwc10: Better wording? "more efficient" :)

[07:47] <nwc10> Yes, that seems bnetter

[07:47] * jnthn cvhanges it

[07:48] <FROGGS> you guys are snilly

[07:49] <dalek> MoarVM: d56c8a6 | jnthn++ | docs/ChangeLog:

[07:49] <dalek> MoarVM: Tweak varint ChangeLog entry; nwc10++.

[07:49] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d56c8a6924

[07:55] * lizmat wonders how interesting http://www.liblfds.org would be for MoarVM ?

[07:56] <lizmat> probably not, as it is already 2.5 years old  :-(

[07:56] <lizmat> sorry for the noise

[07:57] <jnthn> lizmat: Well, code doesn't rot with age :)

[07:58] <jnthn> lizmat: It looks familiar, I'm sure I've looked over it before

[07:58] <jnthn> lizmat: But it's quite restricted

[07:58] <jnthn> e.g.

[07:58] <jnthn> "hash (add-only)"

[07:58] <FROGGS> wasn't there an intend to to something (replace) uthash?

[07:59] <jnthn> At some point, yes.

[07:59] <FROGGS> why ooc? is it inefficient?

[08:00] <jnthn> It could be more memory efficient, but more notably it's missing sufficient randomization.

[08:01] <FROGGS> ahh jnthn, before I forget... can you look at my question from yesterday? http://irclog.perlgeek.de/moarvm/2015-04-22#i_10484760

[08:01] <FROGGS> ahh

[08:01] <FROGGS> I always wonder why we want to have randomization at all

[08:01] <jnthn> Check for matching SC - yes

[08:01] <jnthn> Randomization - thwart DoS attacks

[08:02] <FROGGS> where are these checks?

[08:02] <jnthn> See write_obj_ref

[08:02] <jnthn> Well, actually it's not "check for matching SC"

[08:02] <jnthn> It's "check for no SC and put it into the current one if so"

[08:02] <FROGGS> ahh, nice

[08:02] <FROGGS> that is what I was looking for

[08:03] <FROGGS> I was thinking the check happens earlier

[08:03] <jnthn> I think "packed" is the thing what nwc10++ added recently so we can store things more compact. :)

[08:03] <jnthn> No, happens during traversal

[08:03] <FROGGS> I see

[08:04] <FROGGS> veeeery nice... so I can continue now :o)

[08:04] <jnthn> \o.

[08:04] <jnthn> \o/ even

[08:04] *** rurban joined
[08:15] <nwc10> Given that MoarVM isn't using shared hash keys, I suspect that randomisation could be added by storing a small (eg) 32 bit salt value for each (and every hash)

[08:16] <nwc10> with the salt coming from a private drand48() or similar

[08:16] <nwc10> ie, not much effort needed

[08:17] <nwc10> because, as best I can tell/remember, the actual integer hash values are not exposed outside of the hash table code

[08:33] <masak> jnthn: thank you :)

[08:34] *** vendethiel joined
[08:48] *** Ven joined
[09:04] *** Ven joined
[09:44] <jnthn> http://www.moarvm.org/releases/MoarVM-2015.04.tar.gz

[09:44] <jnthn> masak: ^^

[09:45] <jnthn> Will do the website updates later.

[09:58] *** vendethiel joined
[10:04] *** raiph joined
[11:10] *** vendethiel joined
[11:21] <masak> \o/

[11:21] <masak> jnthn++

[11:22] <masak> "Native reference related optimizations (goal: 2015.04)"

[11:23] <masak> "Optimize away unrequired native reference takes and dereferences, including over inlining boundaries."

[11:23] <masak> I'm out of touch. how much was this goal achieved?

[11:24] <FROGGS> still todo

[11:42] *** vendethiel joined
[11:52] * FROGGS thinks about adding MVM_nuke_idx_of_sc()

[12:11] *** dalek joined
[12:19] *** dalek joined
[12:23] *** dalek joined
[12:35] *** BinGOs joined
[12:48] *** vendethiel joined
[12:49] *** Ven joined
[13:14] *** vendethiel joined
[13:43] *** vendethiel joined
[14:09] *** vendethiel joined
[14:14] <jnthn> Yeah, missed the native ref opts. The parameterics serialization got done, and NFG is basically there.

[14:15] <jnthn> Not wired up everywhere, but the key algos are in place. Plus we got all /NFK?[D|C]/ too and an update to Unicode 7 :)

[14:18] *** Ven joined
[14:49] *** FROGGS joined
[14:59] *** vendethiel joined
[15:13] *** TimToady joined
[15:33] *** vendethiel joined
[15:50] *** brrt joined
[15:50] <brrt> \o

[15:51] <jnthn> o/ brrt

[15:52] <jnthn> I see you're now up to 7 comments on the JIT proposal :)

[15:53] <brrt> yes :-) and all positive

[15:53] <brrt> i'd better start reading intel docs then :-)

[15:55] <brrt> i think what you said about using the jit as a stepping-stone as it were for small-bigints, nativecall, etc.. that has a lot of potential

[15:55] <jnthn> *nod*

[15:56] <jnthn> Well, they also can produce expression trees.

[15:57] *** vendethiel joined
[16:02] <brrt> right. expression trees should be much more ... malleable (i think)

[16:15] <brrt> i'm off for an errand

[16:27] *** vendethiel joined
[16:46] *** brrt joined
[16:59] *** vendethiel joined
[18:08] *** vendethiel joined
[18:53] <FROGGS> jnthn: do you want to answer? https://github.com/MoarVM/MoarVM/pull/202#issuecomment-95679004

[19:11] *** brrt joined
[19:24] *** zakharyas joined
[21:42] *** Peter_R joined
[21:50] *** pyrimidine joined
[22:15] *** vendethiel joined
[22:28] *** Peter_R joined
[22:44] *** LLamaRider joined
[23:15] *** vendethiel joined
[23:41] *** vendethiel joined
[23:54] *** danaj joined
