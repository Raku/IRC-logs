[00:15] *** vendethiel joined
[00:55] *** vendethiel joined
[01:34] *** Peter_R joined
[01:36] *** vendethiel joined
[02:55] *** vendethiel joined
[03:19] *** ShimmerFairy joined
[03:48] *** vendethiel joined
[04:12] *** vendethiel joined
[04:43] *** vendethiel joined
[05:19] *** vendethiel joined
[06:16] *** vendethiel joined
[06:22] *** ggoebel joined
[06:48] *** FROGGS joined
[06:49] *** Ven joined
[06:57] <dalek> MoarVM: 7dfa89b | skids++ | src/strings/ (3 files):

[06:57] <dalek> MoarVM: Update windows-1252 codepage support and activate it.

[06:57] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/7dfa89b257

[06:57] <dalek> MoarVM: 060346c | skids++ | src/strings/windows1252.h:

[06:57] <dalek> MoarVM: Add missing C prototype.

[06:57] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/060346c28d

[06:57] <dalek> MoarVM: bb50941 | FROGGS++ | src/strings/ (4 files):

[06:57] <dalek> MoarVM: Merge pull request #210 from skids/windows-1252

[06:57] <dalek> MoarVM:

[06:57] <dalek> MoarVM: Windows 1252 support

[06:57] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bb509417da

[07:13] *** vendethiel joined
[07:34] <jnthn> FROGGS: Commented; thanks :)

[07:34] <FROGGS> jnthn++

[07:34] <FROGGS> :o)

[07:42] * jnthn makes coffee and prepares to dig into Perl 6 things :)

[07:42] <FROGGS> \o/

[07:42] <FROGGS> sounds good :o)

[07:43] <FROGGS> btw, my attempts to nuke an SC were not successful yet, though, I won't give up that quickly

[07:44] <jnthn> Hmm

[07:46] *** vendethiel joined
[07:48] *** zakharyas joined
[08:07] *** rurban joined
[08:15] <dalek> MoarVM: 826a8cc | jnthn++ | src/strings/unicode_ops.c:

[08:15] <dalek> MoarVM: Fix uniname out of range error reporting.

[08:15] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/826a8cc61e

[08:24] <jnthn> eek, turns out RT #124333 is actually a bug in computing SSA form.

[08:24] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124333

[08:26] <FROGGS> ohh deer

[09:01] <dalek> MoarVM: ae63692 | jnthn++ | src/ (3 files):

[09:01] <dalek> MoarVM: Fix SSA crash when huge number of basic blocks.

[09:01] <dalek> MoarVM:

[09:01] <dalek> MoarVM: When we have a lot of basic blocks, we might end up needing to produce

[09:01] <dalek> MoarVM: huge PHI nodes. This was exposed in real world code of only 8KB when a

[09:01] <dalek> MoarVM: huge alternation was written in a regex. This fix both bumps the size

[09:01] <dalek> MoarVM: of the field holding operand count so we can handle such large graphs,

[09:01] <dalek> MoarVM: and adds a check so we panic rather than SEGV in the (rather unlikely)

[09:01] <dalek> MoarVM: event we ever exceed the new limit.

[09:01] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ae636929ad

[09:06] *** vendethiel joined
[10:00] *** vendethiel joined
[10:10] <dalek> MoarVM: 8bcd46a | jnthn++ | src/strings/normalize.c:

[10:10] <dalek> MoarVM: Implement normalization buffer grwoth handling.

[10:10] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/8bcd46aa8a

[10:13] *** japhb joined
[10:27] *** vendethiel joined
[11:05] *** vendethiel joined
[11:28] *** vendethiel joined
[11:37] *** Ven joined
[11:45] <dalek> MoarVM: d8d853b | jnthn++ | src/strings/utf8.c:

[11:45] <dalek> MoarVM: Add missing frees on invalid UTF-8 decoding.

[11:45] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d8d853bddd

[11:53] *** vendethiel joined
[11:56] <dalek> MoarVM: cc08ed5 | jnthn++ | src/strings/utf16.c:

[11:56] <dalek> MoarVM: Integrate NFG with UTF-16 non-stream decode.

[11:56] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cc08ed5ddb

[11:58] *** lizmat joined
[12:13] <dalek> MoarVM: 0bff027 | hoelzro++ | / (13 files):

[12:13] <dalek> MoarVM: Remove linenoise/readline

[12:13] <dalek> MoarVM:

[12:13] <dalek> MoarVM: Now that NativeCall is included with Rakudo, instead of having

[12:13] <dalek> MoarVM: linenoise/readline functionality be bundled in as a VM-level op,

[12:13] <dalek> MoarVM: let's create a NativeCall-based module for this functionality

[12:13] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0bff0279b7

[12:13] <dalek> MoarVM: 343ff5b | hoelzro++ | / (13 files):

[12:13] <dalek> MoarVM: Merge branch 'no-moar-linenoise'

[12:13] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/343ff5bb1b

[13:03] *** vendethiel joined
[13:07] <dalek> MoarVM: eff0e68 | jnthn++ | src/strings/decode_stream. (2 files):

[13:07] <dalek> MoarVM: Give a decode stream a normalizer.

[13:07] <dalek> MoarVM:

[13:07] <dalek> MoarVM: Up to the encodings if they will actually use it.

[13:07] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/eff0e68e84

[13:07] <dalek> MoarVM: dc9a9cd | jnthn++ | src/strings/decode_stream.c:

[13:07] <dalek> MoarVM: Further integrate normalizer with deocde stream.

[13:07] <dalek> MoarVM:

[13:07] <dalek> MoarVM: We're not finished if there are still graphemes to retrieve from the

[13:07] <dalek> MoarVM: normalizer, and we need to EOF the normalizer when told to fetch the

[13:07] <dalek> MoarVM: remaining graphemes.

[13:07] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/dc9a9cda02

[13:38] <dalek> MoarVM: 660cef5 | jnthn++ | src/core/interp.c:

[13:38] <dalek> MoarVM: Toss unrequired curly clutter.

[13:38] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/660cef54ab

[13:38] <dalek> MoarVM: 6139281 | jnthn++ | src/strings/ops. (2 files):

[13:38] <dalek> MoarVM: Fix chr for our brave new NFG world.

[13:38] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6139281940

[13:51] *** vendethiel joined
[13:52] *** Ven joined
[14:15] *** vendethiel joined
[14:25] <[Coke]> is there a way to make http://moarvm.org/releases/ list releases in descending order?

[14:26] <nwc10> <joke>descending order of what? Awesomeness?</joke>

[14:26] <nwc10> which I figure is actually 1 to 1 with date

[14:26] *** Ven joined
[14:27] <jnthn> [Coke]: Maybe, it's a normal Apache web server, if there's a line I can drop in a .htaccess that'll make happen then it's easy enough

[14:29] <dalek> MoarVM: 4108a85 | coke++ | ports/macports/Portfile:

[14:29] <dalek> MoarVM: Update macportfile to 2015.04 release

[14:29] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4108a85a07

[14:40] <dalek> MoarVM: c2b904f | jnthn++ | src/strings/normalize. (2 files):

[14:40] <dalek> MoarVM: Make \n a "normalization terminator".

[14:40] <dalek> MoarVM:

[14:40] <dalek> MoarVM: This means we always assume we won't get any combiners after it, and

[14:40] <dalek> MoarVM: so do not need to block until we get another codepoint. Makes REPLs

[14:40] <dalek> MoarVM: and similar keep working once we switch NFG on for all strings.

[14:40] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c2b904ff7b

[14:40] *** Ven joined
[14:42] *** vendethiel joined
[15:15] *** vendethiel joined
[15:37] <TimToady> perhaps all control codes should be normalization terminators?

[15:38] <TimToady> thinking of things like tab completion...

[15:40] <TimToady> or synchronizing with ESC interpretation

[15:41] <jnthn> TimToady: Possibly.

[15:41] <jnthn> TimToady: I coded it expecting this not to be the only one.

[15:42] <jnthn> But didn't have a good idea just how many we'll end up with.

[15:42] <TimToady> well, < 32 is pretty easy to test for

[15:42] <jnthn> Are all the controls contiguous?

[15:42] <jnthn> Ah. Then yes :)

[15:42] *** FROGGS joined
[15:44] <TimToady> m: say uniprop(0x80)

[15:44] <camelia> rakudo-moar 0914fc: OUTPUT«Cc␤»

[15:44] <TimToady> up there too

[15:44] <jnthn> ah

[15:44] <jnthn> The latin-1 ones I ugess

[15:44] <jnthn> *guess

[15:45] <TimToady> m: .say if .uniprop() eq 'Cc' for ^0xffff

[15:45] <camelia> rakudo-moar 0914fc: OUTPUT«0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤127␤128␤129␤130␤131␤132␤133␤134␤135␤136␤137␤138␤139␤140␤141␤142␤143␤144…»

[15:46] <TimToady> looks like that's all that's considered Cc

[15:46] <jnthn> OK, then we can do those

[15:47] <timotimo> m: say uniname 0x140

[15:47] <camelia> rakudo-moar 0914fc: OUTPUT«LATIN SMALL LETTER L WITH MIDDLE DOT␤»

[15:47] <timotimo> er

[15:48] <timotimo> m: say uniname 140

[15:48] <camelia> rakudo-moar 0914fc: OUTPUT«PARTIAL LINE BACKWARD␤»

[15:48] <timotimo> those are control characters, eh?

[15:48] <timotimo> m: say chr 140

[15:48] <camelia> rakudo-moar 0914fc: OUTPUT«␤»

[15:48] <timotimo> i don't think i've heard of those

[15:49] <TimToady> oh, and all the ASCII escapes are completely obvious :P

[15:50] <TimToady> *controls

[15:50] <TimToady> DATA LINK ESCAPE?

[15:51] <timotimo> kind of sad to see all those hardly ever used by any programs

[15:52] <TimToady> hey, we could make them into variable names!

[15:54] <FROGGS> \o\ special vars ftw! /o/

[15:55] *** Ven joined
[15:55] *** vendethiel joined
[15:57] <FROGGS> $ perl -e 'my $ = 42'

[15:57] <FROGGS> Can't use global $^����������� in "my" at -e line 1, near "my $�"

[16:00] <TimToady> heh, I can't copy/paste that line because the ^U wipes out everything but the final quote :)

[16:01] <jnthn> hah!

[16:01] <TimToady> (when I produce the line locally, that is)

[16:01] <jnthn> TimToady: See #perl6, but we've a few tests that I don't think are gonna work out with NFG.

[16:02] <jnthn> (7 of thme, but all in the one test file, I *think*)

[16:02] <jnthn> (I need to re-run spectest to make sure fixes I'm doing don't bust other things)

[16:17] <dalek> MoarVM: 5e8d2b0 | jnthn++ | src/strings/ (3 files):

[16:17] <dalek> MoarVM: Ensure concatenation is closed under NFG.

[16:17] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5e8d2b08b0

[16:28] *** vendethiel joined
[16:46] *** Ven joined
[16:56] *** vendethiel joined
[17:10] <dalek> MoarVM: 5a47535 | jnthn++ | src/core/interp.c:

[17:10] <dalek> MoarVM: Don't leak synthetics from ord.

[17:10] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5a47535f4b

[17:23] *** japhb joined
[17:42] <dalek> MoarVM: 18fcc09 | jnthn++ | src/strings/utf8.c:

[17:42] <dalek> MoarVM: Integrate NFG with UTF-8 non-stream decode.

[17:42] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/18fcc09af0

[17:42] <dalek> MoarVM: 10f3ad3 | jnthn++ | src/strings/utf8.c:

[17:42] <dalek> MoarVM: Implement NFG for decode stream case of UTF-8.

[17:42] <dalek> MoarVM:

[17:42] <dalek> MoarVM: This covers file I/O.

[17:42] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/10f3ad3921

[17:42] <jnthn> This basically flips NFG on for those who build master all the time. :)

[17:44] *** vendethiel joined
[18:06] <[Coke]> nice.

[18:07] <[Coke]> https://trac.macports.org/ticket/47561

[18:24] <dalek> MoarVM: c799226 | coke++ | ports/macports/README:

[18:24] <dalek> MoarVM: more instructions

[18:24] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c7992265be

[18:24] <dalek> MoarVM: dcb8d11 | coke++ | ports/macports/README:

[18:24] <dalek> MoarVM: Even moar instructions.

[18:24] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/dcb8d11685

[18:26] <[Coke]> patch applied, should show up in ports soon

[18:58] *** brrt joined
[19:13] <brrt> \p

[19:13] <brrt> \o

[19:34] *** brrt joined
[20:23] *** colomon joined
[20:38] <brrt> hmmm... invalid thread id in gc pass ... that's likely to be a mvmroout problem,no?

[20:38] <jnthn> Quite often

[20:38] <jnthn> If you actually have no threads (or even if you do) it tends to mean memory corruption.

[20:38] <brrt> guess what, it doesn't fail without make

[20:39] <jnthn> Then, memory corruption :(

[20:39] <brrt> lets try, try again

[20:41] <brrt> hmmm

[20:41] <brrt> ok, i reliably get a broken moarvm now

[20:42] <jnthn> OK.

[20:42] <jnthn> Well, debugging time ;)

[20:43] <brrt> well, i'm checking if it's been brought on by the recent rakudo changes

[20:44] <jnthn> It's almost always a mistake in Moar that's been a ticking time bomb, and sadly expereince tells that knowing a recent Rakudo change brought it on rarely provides any insight into how to fix it.

[20:48] <brrt> well, in this case it could be an bigint in an int

[21:03] <timotimo> do we output the thread id, too?

[21:03] <timotimo> because if it's 0, 1, 2, 3, ... it'd be fine, but if it's -12431 or 95028 it'd be pretty problematic

[21:04] <jnthn> timotimo: No, but no objections if you want to add it

[21:04] <timotimo> sure, no problem :)

[21:05] <timotimo> jnthn: does the localref/local thing have a spot in your priority queue yet?

[21:05] <timotimo> i mean, now that the release is through, it's not terribly pressing, i suppose

[21:06] <jnthn> timotimo: I'll be doing another push on native stuff soon, yes.

[21:06] <jnthn> timotimo: Depends how much NFG stuff I have to jump on.

[21:06] <timotimo> ... and actually when i tried to build the tests for lexical/lexicalref i couldn't get them to work, but i haven't actually inspected the bactrace i got enough

[21:06] <timotimo> right

[21:06] <timotimo> big ups for your nfg work, btw :)

[21:07] <jnthn> Our LTM-er is bust in a few interesting ways with regard to NFG, it turns out.

[21:07] <timotimo> oh

[21:07] <timotimo> it doesn't know anything about nfg yet?

[21:07] <jnthn> No, and worse a couple of aspects of the QRegex::NFA design make it a bit hard to fix.

[21:08] <timotimo> damn ;(

[21:08] <jnthn> (Not horribly hard, but not "oh yay it just works" either.)

[21:08] <jnthn> However, we don't yet have a single spectest bitten by this.

[21:08] <jnthn> Uh, we may have one that I wrote this week. :)

[21:08] <timotimo> better to have one than to not have one

[21:08] <jnthn> Yeah

[21:08] <jnthn> Anyway, I'll ponder that some more next week :)

[21:09] <timotimo> i ought to write a test for that hyperop thing i found the other day, i think

[21:09] <jnthn> I think it's hard enough to run into that it's very unlikely to cause ecosystem strife.

[21:09] <timotimo> should that be filed as todo or left failing?

[21:09] <timotimo> i haven't roast in a loooong time, it feels like

[21:09] <jnthn> The hyperop thing? todo

[21:09] <timotimo> good

[21:18] <timotimo> wat

[21:19] <timotimo> there are already tests that look like exactly what is wrong in my ticket

[21:22] *** rurban joined
[22:01] <[Coke]> timotimo: nice, right?

[22:01] <[Coke]> (or are those tests passing?)

[22:02] <timotimo> they do pass

[22:38] *** flussence joined
[22:48] *** dalek joined
[22:59] *** colomon joined
