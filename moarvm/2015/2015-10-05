[00:58] *** tokuhirom joined
[02:41] *** tokuhirom joined
[05:00] *** tokuhirom joined
[06:14] *** FROGGS joined
[06:26] *** brrt joined
[06:31] *** Ven joined
[07:00] *** zakharyas joined
[08:26] *** Ven joined
[09:14] *** Ven joined
[09:29] *** avar joined
[09:56] *** Ven joined
[10:38] *** FROGGS joined
[11:25] *** leont joined
[11:40] *** Ven joined
[12:17] *** camelia joined
[12:32] *** zakharyas1 joined
[12:40] *** Ven joined
[12:53] *** camelia joined
[12:59] *** camelia joined
[14:00] *** FROGGS joined
[14:11] *** FROGGS_ joined
[14:27] <dalek> MoarVM: 6b1e755 | jnthn++ | src/profiler/ (2 files):

[14:27] <dalek> MoarVM: Ensure profiling data is valid at profile end.

[14:27] <dalek> MoarVM:

[14:27] <dalek> MoarVM: Stopping profiling with frames on the call stack left the the exit

[14:27] <dalek> MoarVM: times for those nodes with bogus values.

[14:27] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6b1e755290

[14:28] <dalek> MoarVM: a43af22 | (Pawel Murias)++ | src/core/interp.c:

[14:28] <dalek> MoarVM: make popcompsc return a value instead of segfaulting

[14:28] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a43af22089

[14:28] <dalek> MoarVM: c4d6637 | jnthn++ | src/core/interp.c:

[14:28] <dalek> MoarVM: Merge pull request #276 from pmurias/fix-popcompsc-returnvalue

[14:28] <dalek> MoarVM:

[14:28] <dalek> MoarVM: make popcompsc return a value instead of segfaulting

[14:28] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c4d663780d

[14:41] *** tokuhirom joined
[15:20] *** Ven joined
[15:58] *** lizmat joined
[16:42] *** tokuhirom joined
[16:51] <dalek> MoarVM: 5075f5b | jnthn++ | src/6model/reprs/MVMIter.c:

[16:51] <dalek> MoarVM: Make context iterator include values.

[16:51] <dalek> MoarVM:

[16:51] <dalek> MoarVM: Before it just had keys, but skipped the values, menaing that things

[16:51] <dalek> MoarVM: like CORE::.values in Rakudo just gave a load of (Mu).

[16:51] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5075f5b1a5

[16:53] <timotimo> what is this about "takeclosure" being a no-op now?

[16:57] <jnthn> timotimo: the nqp::takeclosure op

[16:57] <jnthn> Not the MoarVM one

[16:57] <jnthn> It's been that way for a long, long while now

[16:57] *** zakharyas joined
[16:57] <jnthn> Back to when we killed that prior_invocation thing

[16:58] <timotimo> oh, ok

[16:58] <timotimo> hm, we take all closures as soon as we enter the frame they could be used in, right?

[16:58] <timotimo> so sometimes we take closures that end up not getting used?

[16:59] <jnthn> timotimo: Sometimes, but I think that could happen before anyway

[17:00] <jnthn> timotimo: And given we already know inter-gen roots are one of the hurtingest things in our GC, and prior_invocation was a source of such things, we probably better off the current way

[17:00] <timotimo> of course

[17:00] <timotimo> the comment about taking closures that don't get used was a bit orthogonal

[17:00] <timotimo> it was more of a "maybe i could do something about this in spesh!" thing

[17:00] <jnthn> ah, yes :)

[17:01] <jnthn> Though digging deeper into the flattening and lowering stuff in Perl6::Optimizer is likely to also yield a big win :)

[17:01] <jnthn> For less pain.

[17:01] <timotimo> i've already had a fair amount of pain in that area :S

[17:18] *** dalek joined
[17:43] <FROGGS> src/6model/6model.h:608:26: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]

[17:43] <FROGGS> src/core/interp.c:4703:44: note: in expansion of macro ‘STABLE’

[17:43] <FROGGS> MVMContainerSpec *cs = STABLE(obj)->container_spec;

[18:26] <lizmat> jnthn timotimo re Optimizer.nqp: feels to me we need to have some kind of XPath like DSL for walking the AST's

[18:29] <jnthn> lizmat: Most opts don't really look more than a node or so deep

[18:29] <lizmat> well, the for -> while opt looks like its looking deeper

[18:29] <lizmat> and it's broken atm

[18:29] <jnthn> Yeah, that's one of the exceptions

[18:30] <jnthn> Though I'm rather tempted to fix it by adding a desugar

[18:30] <lizmat> but one of the most worthwhile ones

[18:30] <jnthn> That's simple to match on

[18:30] <lizmat> fixing it an *any* way would be good  :-)

[18:30] <lizmat> and an example for further fixes, possibly ?

[18:30] <jnthn> In the longer run, the compiler will produce QTrees that will later make QAST, and we'll work against the QTrees, and things will get easier. But that's more for 6.devali than 6.christmas :)

[18:31] <jnthn> Or whatever event we find for the d :)

[18:33] <FROGGS> ahh, so 6.d was intentional :o)

[18:35] <jnthn> FROGGS: btw, that warning can probably be shut up by sticking a const somehwere on the line it whines about :)

[18:36] <FROGGS> somewhere you say? :o)

[18:36] <jnthn> Try it in all the syntactic slots until it compiles quietly :P

[18:36] <nwc10> I checked - Divali is about 10 months after Christmas

[18:36] <nwc10> that's not a great choice of D, at least for this cycle round the alphabet

[18:37] <jnthn> nwc10: Depends what 6.d will be, really

[18:37] <nwc10> mmm, yes. if it's a spec, then 10 months might well be sane

[18:38] <jnthn> If it *is* going to be the language version with macros/slangs at its centerpiece then I struggle to see that taking much less than 10 months that have an impl that proves it.

[18:38] <jnthn> s/that have/to have/

[18:40] * jnthn waits hungrily for noms to show up

[18:40] <nwc10> external delivery? Or internal trade for previous cooking?

[18:46] <jnthn> Delivery. :)

[18:53] <jnthn> yays, it's arrives :) bbl

[18:56] * masak .oO( "it's-a me! delivery Maaar-io!" )

[19:56] *** tokuhirom joined
[21:44] *** leont joined
[21:48] *** dalek joined
[22:04] *** tokuhirom joined
[23:32] *** Peter_R joined
