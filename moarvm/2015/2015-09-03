[02:58] *** ShimmerFairy joined
[04:27] *** virtualsue joined
[05:51] *** lizmat joined
[06:12] *** virtualsue joined
[06:35] *** xiaomiao joined
[06:45] *** FROGGS joined
[07:03] *** Ven joined
[07:29] *** ShimmerFairy joined
[07:33] *** lizmat joined
[08:51] *** Ven joined
[09:42] *** lizmat joined
[09:51] *** zakharyas joined
[10:13] *** Ven joined
[11:43] *** Ven joined
[12:04] *** lizmat joined
[12:44] *** lizmat joined
[13:03] *** zakharyas joined
[13:12] <hoelzro> good moarning #moarvm

[13:12] <nwc10> good *, hoelzro

[13:14] <timotimo> heyo you two

[13:15] <hoelzro> o/ nwc10 & timotimo!

[13:17] <hoelzro> it turns out there's a bug in rakudo-m where if you create a Thread, it will never clean up the underlying ThreadContext.  I tried to add MVM_tc_destroy(thread->body.tc) to MVM_thread_join, but that results in segfaults and other fun.  Is there some other cleanup I need to be doing?

[13:20] <timotimo> doesn't the interpreter have a list of all threads?

[13:20] <timotimo> i think that's necessary for the gc to work properly

[13:23] <timotimo> hm. i should get an overview of the things i've been doing (or rather trying to do) during spw

[13:24] <timotimo> i tried to move forward with the lexical-to-local lowering and got baffled by things once more

[13:24] <timotimo> i've made perl6-bench glr-compatible

[13:24] <timotimo> what else? :\

[13:24] <hoelzro> timotimo: does that thread still need a TC after the thread has been joined?

[13:25] <hoelzro> and should the thread be removed from that instance thread listing?

[13:25] <timotimo> probably needs to be kept, as the thread contexts all have their own nursery and gen2

[13:25] <hoelzro> re: what you've been up to, I just remember the lexical -> local stuff

[13:25] <hoelzro> ahhhh

[13:25] <hoelzro> that's probably why it's mad

[13:25] <timotimo> maybe we want to have newly created threads claim previous TCs

[13:29] *** lizmat joined
[13:32] *** brrt joined
[13:33] <brrt> good *

[13:34] <timotimo> brrt * good

[13:34] <brrt> hi timotimo

[13:37] <hoelzro> o/ brrt

[13:37] <brrt> \o hoelzro

[13:37] <brrt> are you at yapc::eu?

[13:38] <hoelzro> timotimo: A joined thread can no longer allocate memory in its pool, right?

[13:38] <hoelzro> brrt: I am not (

[13:38] <hoelzro> =(

[13:38] <brrt> shame

[13:38] <brrt> it's really nice up here

[13:38] <brrt> granada is awesome

[13:38] <brrt> perl community is really alive this year

[13:38] <nwc10> Klima!

[13:38] <[Coke]> I'mma let you finish, but SPW2015 was clearly the best european workshop of all time.

[13:38] <nwc10> however, the big blue room is a bit warmer than the venue

[13:39] <brrt> i was clearly not at SPW2015

[13:39] <timotimo> [Coke]: because of the kitties, right?

[13:39] <brrt> nwc10: where are you now? we haven't talked all conference, and i'm leaving tomorrow morning

[13:39] * [Coke] wishes he could have gone to all 3 conferences in a row. Ah well.

[13:39] <nwc10> brrt: second row in miyagawa's talk

[13:39] <[Coke]> timotimo: Loved that cat, man.

[13:39] <brrt> it was hard enough justifying one conference :-)

[13:39] <nwc10> I'll try to find you at coffee

[13:39] <brrt> that's F1 right

[13:39] <brrt> aye

[13:39] <[Coke]> brrt: exactly. :)

[13:40] <timotimo> brrt: may i ask you about the slides again?

[13:40] <brrt> yes. if you have somewhere for me to put them, i will be happy to upload them

[13:40] <timotimo> you have a google account, don't you?

[13:41] <timotimo> we can use something like https://reep.io/ as well

[13:42] <timotimo> https://rtccopy.com/ or this

[13:42] <timotimo> https://rtccopy.com/#g6ZrBarS

[13:43] <brrt> timotimo: https://github.com/bdw/slides/blob/master/Bart%20Wiegmans%20-%20YAPC::EU%202015-09-02.pdf

[13:44] <timotimo> wow, github can display pdfs in-line

[13:44] <brrt> nice

[13:52] <timotimo> brrt: you're probably busy attending things rather than hacking on the jit, right?

[13:53] <brrt> i'm actually working on the freeing-to-many-registers problem now

[13:53] <brrt> (sorry tux, if you're reading it)

[13:54] <timotimo> cool :)

[13:56] <brrt> we're trying to free rbx

[13:56] <brrt> ....

[13:56] <brrt> wth

[14:04] <dalek> MoarVM/even-moar-jit: 2bfd5dd | brrt++ | src/ (6 files):

[14:04] <dalek> MoarVM/even-moar-jit: Introduce 'immortally' created values

[14:04] <dalek> MoarVM/even-moar-jit:

[14:04] <dalek> MoarVM/even-moar-jit: From the perspective of the register allocator, values residing

[14:04] <dalek> MoarVM/even-moar-jit: in nonvolatile registers are 'immortal'. These registers should

[14:04] <dalek> MoarVM/even-moar-jit: not be freed over overwritten.

[14:04] <dalek> MoarVM/even-moar-jit:

[14:04] <dalek> MoarVM/even-moar-jit: This does not fix all the bugs, but some of them.

[14:04] <dalek> MoarVM/even-moar-jit: Also implement the handlers for pre-and-post branch logic,

[14:04] <dalek> MoarVM/even-moar-jit: but we do not yet call them.

[14:04] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/2bfd5dda3d

[14:10] <dalek> MoarVM: 15eadcd | paultcochrane++ | src/spesh/candidate.c:

[14:10] <dalek> MoarVM: Revert func_ptr free from commit 688eecd

[14:10] <dalek> MoarVM:

[14:10] <dalek> MoarVM: Unfortunately freeing the func_ptr wasn't the correct thing to do; the

[14:10] <dalek> MoarVM: change actually caused a bad free of a variable.  Sorry about that!  This

[14:10] <dalek> MoarVM: reverts the commit and thus removes a potentially bad free operation.

[14:10] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/15eadcde04

[14:10] <dalek> MoarVM: ac6ea4e | lizmat++ | src/spesh/candidate.c:

[14:10] <dalek> MoarVM: Merge pull request #253 from paultcochrane/pr/revert-free-func_ptr

[14:10] <dalek> MoarVM:

[14:10] <dalek> MoarVM: Revert func_ptr free from commit 688eecd

[14:10] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ac6ea4e232

[14:26] *** Ven joined
[14:39] *** rarara joined
[15:00] *** kjs_ joined
[15:25] *** brrt joined
[15:31] *** colomon joined
[15:47] <dalek> MoarVM/even-moar-jit: baa5b8a | brrt++ | src/jit/register.c:

[15:47] <dalek> MoarVM/even-moar-jit: Always take register when putting a value there

[15:47] <dalek> MoarVM/even-moar-jit:

[15:47] <dalek> MoarVM/even-moar-jit: After all, the register is now in use by a live value

[15:47] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/baa5b8a6f2

[15:48] <brrt> battery is empty, that's all folks!

[15:48] *** brrt joined
[15:49] *** brrt joined
[15:50] *** brrt joined
[15:51] *** brrt joined
[15:52] *** brrt joined
[15:53] *** brrt joined
[15:54] *** brrt joined
[15:55] *** brrt joined
[15:56] *** brrt joined
[15:58] *** brrt joined
[15:59] *** brrt joined
[16:00] *** brrt joined
[16:01] *** brrt joined
[16:02] *** brrt joined
[16:03] *** brrt joined
[16:04] *** brrt joined
[16:22] *** lizmat joined
[16:34] *** kjs_ joined
[16:54] *** vendethiel joined
[16:55] <hoelzro> it seems that MVM_thread_cleanup_threads_list is never called to clean things up; when *should* it be called?

[17:07] <jnthn> You generally can't clean up threads until 2 GC runs later.

[17:07] <jnthn> 'cus that's how long it takes for their nursery to be redundant.

[17:08] <jnthn> There is logic in orchestrate.c that arranges merging of gen2 into a live thread.

[17:08] <jnthn> That's about the point when a ThreadContext can go away

[17:09] <[Coke]> jnthn: hio!

[17:09] <jnthn> o/

[17:11] <timotimo> cool, i didn't know about that

[17:11] <timotimo> so on brrt's latest commit i can get a little ways into the first file in the nqp build

[17:11] <jnthn> brrt++ # talk

[17:11] <timotimo> but after it enters a jitted frame, it segfaults, and the stack gets a bit trashed apparently

[17:11] * jnthn read the slides

[17:11] <timotimo> i imagine from the slides there was quite a bit more in the audio track than in the video track

[17:12] * jnthn is sad to not have been able to do his MoarVM talk at YAPC::EU this year

[17:12] <jnthn> But, health first...

[17:12] <lizmat> jnthn++  # good plan

[17:13] <jnthn> I'll be gradually inserting myself back into hacking over the coming days, as energy levels allow (so, probably just a little bit at first)

[17:15] *** kjs_ joined
[17:21] <timotimo> yes, health very first, indeed

[17:25] <jnthn> Aye

[17:26] <jnthn> Though I suspect my first task ("screw it just merge glr already") will be an easy one. :)

[17:28] *** TEttinger joined
[17:37] *** ggoebel joined
[17:41] <[Coke]> jnthn: yes, please do that. :)

[17:41] *** FROGGS joined
[17:45] <FROGGS> o/

[17:49] *** _itz_ joined
[18:14] *** colomon joined
[18:18] <hoelzro> jnthn: thanks for weighing in!  so I have to wait for a thread's state to be MVM_thread_stage_destroyed for a run before I can clean it up?

[18:18] <hoelzro> ex. GC 1: state = destroyed; GC 2: nothing; GC 3: can clean up thread ?

[18:27] *** lizmat joined
[18:34] <jnthn> hoelzro: I think by destroyed it can go

[18:35] <jnthn> hoelzro: There's a clearing_nursery before that iirc

[18:35] <jnthn> There's an enum of all these states somewhere :)

[18:35] <hoelzro> =)

[18:36] <hoelzro> jnthn: I tried putting a MVM_tc_destroy here: https://github.com/MoarVM/MoarVM/blob/master/src/gc/orchestrate.c#L88, but that also segfaulted

[18:36] <hoelzro> I must be missing something else

[18:36] *** colomon joined
[18:38] <hoelzro> also, that "will be cleaned up (removed from the lists) shortly" - any idea where that happens?

[18:39] <jnthn> orchestrate.c iirc

[18:40] * hoelzro .oO( iir.c )

[18:51] *** colomon joined
[18:56] <jnthn> .oO( ir.c )

[18:59] *** dalek joined
[19:01] *** colomon_ joined
[19:48] *** brrt joined
[19:48] <brrt> good evening or any other day time

[19:56] *** lizmat joined
[20:02] *** brrt joined
[20:16] <_itz_> brrt: excellent talk on jit and I would be interested in any links you have for eco issues

[20:17] <_itz_> jnthn++ # much hard work and rest deserved

[20:35] *** brrt joined
[20:35] <brrt> thank you _itz_

[20:35] <brrt> were you at yapc::eu or are you talking about the slides?

[20:51] *** Peter_R joined
[21:04] <nwc10> good UGT, brrt

[21:55] <_itz_> brrt: I am at YAPC and saw the talk

[22:00] *** brrt joined
[22:01] <brrt> oh cool

[22:01] <brrt> did i meet you afterwards

[22:01] <brrt> goot UGT nwc10

[22:01] <brrt> did you stay long still?

[22:01] <brrt> (irc connection has been spotty in hotels, to say the least)

[22:03] <_itz_> no we didn't meet .. may try and talk tomorrow

[22:07] <brrt> only early in the morning, because i'm leaving just after the first talk

[22:07] <brrt> shame. i'll very very very likely will be going to nine's talk

[22:09] <brrt> ok, my current theory is... what

[22:10] <brrt> my code is weird, and bad

[22:10] <brrt> and i feel bad

[22:44] *** _itz joined
[22:50] *** kjs_ joined
[22:56] *** FROGGS joined
[22:58] *** mj41 joined
[23:03] *** lizmat joined
[23:12] *** mj41_nb joined
[23:14] *** mj41_nbx joined
[23:56] *** colomon joined
