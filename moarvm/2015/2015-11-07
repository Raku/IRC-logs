[00:37] *** vendethiel joined
[00:45] *** tokuhiro_ joined
[01:07] *** Ven joined
[01:24] *** Ven joined
[02:47] *** ilbot3 joined
[04:48] *** tokuhiro_ joined
[06:38] *** tokuhiro_ joined
[06:39] <konobi> jnthn: ping

[07:44] *** tokuhiro_ joined
[08:30] *** leont joined
[09:07] *** Ven joined
[09:17] *** vendethiel joined
[09:42] *** Ven joined
[09:45] *** tokuhiro_ joined
[09:52] *** Ven joined
[11:01] *** diakopter joined
[11:40] *** Ven joined
[12:26] *** Ven joined
[12:39] *** Ven joined
[12:53] *** Ven joined
[13:16] *** Ven joined
[13:39] *** Ven joined
[13:56] <lizmat> I wonder whether $sprintfHandlerInitialized could have anything to do with precomp issues

[13:58] *** Ven joined
[14:09] *** Ven joined
[15:04] *** zakharyas joined
[15:19] *** camelia joined
[15:39] *** tokuhiro_ joined
[16:10] *** Ven joined
[16:26] *** Ven joined
[17:02] <arnsholt> nwc10: Re the NFG attack you mentioned in http://irclog.perlgeek.de/perl6/2015-04-07#i_10400549 (came up on #perl6 today), it might be feasible to to a refcounting-style GC for the synthetics?

[17:03] <arnsholt> Although that'd incur the overhead of each synthetic having a refcount, and each string knowing which synthetics it references. Which might not be worth it

[17:24] <jnthn> You'd be better just looking at all live strings you encounter in a full collection and keeping a bit table of synthetics that you see (card marking style)

[17:25] <jnthn> And then keeping a free list of synthetic indices to re-use

[17:26] <jnthn> It's probably a day or two's coding.

[17:26] <arnsholt> Right, that sounds more sane

[17:26] <dalek> MoarVM: 04b540b | (Pawel Murias)++ | src/strings/ops.c:

[17:26] <dalek> MoarVM: Make escape handle \r\n properly

[17:26] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/04b540b8cd

[17:26] <dalek> MoarVM: cdf1067 | jnthn++ | src/strings/ops.c:

[17:26] <dalek> MoarVM: Merge pull request #290 from pmurias/fix-escape-crlf

[17:26] <dalek> MoarVM:

[17:26] <dalek> MoarVM: Make escape handle \r\n properly

[17:26] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/cdf1067ff7

[17:34] *** zakharyas joined
[17:34] <jnthn> arnsholt: btw, on your .WHAT question on #perl6 earlier, .WHAT is an object operation, so you'll be doing .WHAT of the boxing of an int32, thus why you see Int.

[17:35] <arnsholt> Ah, so that was it. Didn't think that'd happen. Cheers!

[17:35] <arnsholt> Is there a way to get the int32 type instead?

[17:45] *** tokuhiro_ joined
[17:47] <konobi> morning

[17:56] <TimToady> we'd have to make .WHAT into a macro, like the specs speculate :)

[18:07] *** lizmat joined
[18:08] *** colomon joined
[18:16] <jnthn> :P

[18:17] <jnthn> TimToady: If you feel strongly it should be that way on variables, we could probably make it happen without too much trouble

[18:17] *** Ven_ joined
[18:22] <TimToady> it seems like a thing that would be hard to change later

[18:22] <TimToady> and I don't wanna suggest .what for native types :)

[18:25] <TimToady> m: my int $x = 42; say VAR($x).WHAT

[18:25] <camelia> rakudo-moar f4266f: OUTPUT«(IntLexRef)␤»

[18:25] <TimToady> hmm

[18:25] *** Ven_ joined
[18:36] <jnthn> m: my int $x = 42; say VAR($x).of

[18:36] <camelia> rakudo-moar f4266f: OUTPUT«Method 'of' not found for invocant of class 'Int'␤  in block <unit> at /tmp/0KULJN3OrW:1␤␤»

[18:37] <jnthn> Hm, that .of kinda wants to work out

[18:37] *** Ven_ joined
[18:37] <jnthn> I think I put some language into the design docs that the types you get on .VAR of a native are implementation-defined

[18:39] *** brrt joined
[18:39] <brrt> timotimo: noted, but i don't think i can fix that; i don't know anything about minilua source code

[18:40] <brrt> i'll try to install dyson sometime later

[18:40] <brrt> it might be weirder/sillier than that, too

[18:40] <brrt> now i'm afk again, sorry

[18:41] *** Ven_ joined
[19:25] *** Ven joined
[19:40] *** Ven joined
[19:47] *** tokuhiro_ joined
[19:56] *** Ven joined
[20:11] *** Ven joined
[20:31] *** Ven joined
[20:40] *** Ven joined
[20:58] <konobi> jnthn: there was also an issue with moarvm on illumos... it was assuming SUNCC (specifically the -mt CFLAG) even though it was attempting to use gcc

[21:01] <konobi> mkay... i attempted to build with --no-jit and I hit a linker error looking for symbol 'cfmakeraw'

[21:01] <konobi> here's an article by a friend about cfmakeraw on illumos/solaris

[21:01] <konobi> http://www.perkin.org.uk/posts/solaris-portability-cfmakeraw.html

[21:02] <konobi> seems cfmakeraw isn't portable.

[21:03] <konobi> right... better get a real fresh version

[21:11] *** Ven joined
[21:18] <konobi> mmm... seems like a problem with libuv

[21:22] <konobi> jnthn: looks like the cfmakeraw() problem was fixed in version 1.0.2 ov libuv... though it's now up to 1.7.6

[21:26] *** Ven joined
[21:48] *** tokuhiro_ joined
[21:51] *** zakharyas joined
[21:55] *** Ven joined
[22:12] *** Ven joined
[22:28] *** Ven joined
[22:43] *** Ven joined
[23:14] *** Ven joined
[23:30] *** Ven joined
[23:41] *** Ven_ joined
[23:50] *** tokuhiro_ joined
[23:57] *** Ven joined
