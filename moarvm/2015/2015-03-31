[01:48] *** ilbot3 joined
[06:37] *** FROGGS joined
[07:09] *** zakharyas joined
[07:50] *** rurban_ joined
[08:07] *** kjs_ joined
[08:08] *** brrt joined
[08:08] <brrt> \o

[08:14] *** Ven joined
[08:19] <jnthn> o/

[09:23] *** brrt joined
[09:43] <brrt> rudi_s - your patches Work For Me

[09:44] <timotimo> o/

[09:44] <brrt> \o timotimo

[09:58] *** brrt left
[09:58] *** brrt joined
[09:58] <brrt> remind me to write a udp-proxy-for-irc one day

[09:59] <jnthn> So you never know if your messages made it? :)

[09:59] <timotimo> why you no irc.p6c.org? :)

[10:00] <brrt> is that a new server?

[10:00] <brrt> that's what message sequence numbers are for jnthn :-)

[10:00] <timotimo> a new vm on p6c.org

[10:00] <brrt> ah

[10:00] <brrt> i am in general not connected to any server at p6c.org

[10:00] <timotimo> you could be :)

[10:01] <timotimo> you can do all your compiling and testing on hack.p6c.org

[10:02] <timotimo> etc etc; also, host stuff on www.p6c.org

[10:03] <jnthn> brrt: You can run irssi or so in a screen session on irc.p6c.org, which means you can be on IRC "all the time" :)

[10:05] <timotimo> i recommend weechat actually

[10:05] <timotimo> then you can set up glowing-bear and have a pretty frontend

[10:06] <tadzik> glowing-bear?

[10:06] <tadzik> that sounds fun

[10:07] <timotimo> http://www.glowing-bear.org/

[10:07] <tadzik> Ha, pretty cool!

[10:08] <timotimo> as far as i know the name comes from the github repo name suggestion feature

[10:09] <tadzik> hah, I have a project like that

[10:09] <timotimo> panda? :P

[10:09] <tadzik> cloaked-hipster

[10:10] <timotimo> %)

[10:10] <brrt> nmany wow

[10:11] <tadzik> There's nothing in there, I just saw the suggestion and called dibs on the name :P

[10:11] <timotimo> you called dibs on the name ... inside your own namespace?

[10:11] <tadzik> that's right :)

[10:11] <tadzik> you can never be too careful

[10:12] <masak> it's cloaked. of course it appears empty.

[10:12] <tadzik> ha!

[10:12] <masak> the main thing is that the repo was there *before* it was mainstream.

[10:12] <masak> if a hipster is hip under a cloak, is he really hip?

[10:13] <timotimo> what if every country has ninjas, but the only ninjas that are bad enough to let themselves be seen every now and then are the japanese?

[10:13] <masak> timotimo: now I'm imagining Danish ninjas

[10:44] *** Ven joined
[11:02] <rudi_s> Regarding the %zu vs. %Iu discussion from yesterday, I pushed a (untested) fix for MVSC: git://git.informatik.uni-erlangen.de/he29heri/moarvm/

[11:06] <brrt> thanks. i'm in no position to test it on msvc now

[11:11] <rudi_s> np

[11:11] <jnthn> On MSVC building rudi_s/master:

[11:11] <jnthn> interp.c

[11:11] <jnthn> src\core\interp.c(4892) : error C2094: label 'runloop' was undefined

[11:11] <rudi_s> Hm. Then I'm confused.

[11:11] <rudi_s> Better drop this patch then.

[11:12] <jnthn> 642e9ca86ea7ad1 is to blame

[11:13] <jnthn> Probably wants to be #if !MVM_CGOTO or so

[11:13] <jnthn> err&

[11:13] <jnthn> (bbi30)

[12:35] *** Ven joined
[13:25] <FROGGS> I might get my hands on an Intel Itanium system /o/

[13:25] <nwc10> oh, gosh

[13:26] <nwc10> heavy and warm?

[13:27] <nwc10> what OS(es) would you run on it? VMS, HP/UX, Linux, there-must-be-a-BSD-surely, Win* still?

[14:15] <FROGGS> I've no idea yet :o)

[14:16] <FROGGS> bbiab

[15:16] *** Ven joined
[15:44] *** FROGGS joined
[16:39] *** kjs_ joined
[19:58] *** brrt joined
[20:13] *** kjs_ joined
[21:48] <flussence> re: %z/I, take a look at inttypes.h. I dunno if MSVC has it though...

[21:53] <brrt> anybody know a good at-t syntax assembler for linux?

[21:57] <flussence> brrt: of the three I've got installed (llvm, nasm, gcc), only gcc's one seems to support that. I have no opinion on the relative goodness of it :)

[21:58] <brrt> hmm

[21:58] <brrt> gcc it will be then

[21:59] <flussence> (I wonder what the BSDs do there, a few of them have been doing away with gcc)

[22:05] <rudi_s> flussence: There is nothing in the standard inttypes, because %zu is the standard format for it.

[22:19] *** vendethiel joined
[22:38] <brrt> ok, i estimate that in the scenario of tight numeric / integer code , the speedup factor can be as large as 6x

[22:38] <timotimo> oh my god

[22:38] <timotimo> for your proposed jit work?

[22:38] <brrt> wherin estimate = measure :-)

[22:38] <brrt> yes

[22:38] <timotimo> that'd be *sweet*

[22:38] <brrt> i'll put a gist online

[22:38] <timotimo> way cool.

[22:38] <timotimo> another factor of 6 is just what we need :)

[22:39] <timotimo> but for code that's very "general purpose", we'll have a much smaller improvement?

[22:39] <brrt> depends

[22:39] <brrt> long story very short

[22:39] <brrt> mvmarray access is basically offset + stride * position right?

[22:40] <brrt> well, that can be a single instruction

[22:40] <timotimo> read access, yeah

[22:40] <brrt> and we can tell the cpu to prefetch a line

[22:41] <brrt> but whether it matters a lot for 'real' code depends on whether we can eliminate / reduce some of the c calls

[22:41] <brrt> or 'inline' them if they're repr ops

[22:41] <timotimo> right

[22:42] <timotimo> that's quite a hard thing to do until we've got the jit tree expression thingie

[22:43] <brrt> on the other hand, i expect 'real' code to become quite a bit smaller, maybe 30% or so

[22:43] <brrt> and that may count a lot too

[22:45] <timotimo> mhm

[22:45] <timotimo> the more we can keep in the instruction cache, the better

[22:46] <brrt> right

[22:47] <timotimo> we may not necessarily be at the point where that makes a huge difference, but we might as well reach it :)

[22:57] <brrt> what's important to me is that we *can* reach it :-)

[23:05] <brrt> https://gist.github.com/bdw/fef76ca07b7203e49fc2

[23:06] <brrt> timotimo ^ if you're interested in trying it out

[23:45] *** flussence joined
