[02:28] *** zakharyas joined
[04:02] *** FROGGS_ joined
[05:26] *** zakharyas joined
[07:49] *** Ven joined
[07:50] *** FROGGS joined
[08:18] *** Ven joined
[08:30] *** rurban_ joined
[08:54] *** brrt joined
[09:13] *** kjs_ joined
[10:11] *** kjs_ joined
[10:30] * lizmat sees daylight again for the second time today

[10:46] <brrt> :-)

[10:46] <brrt> i see cloudlight mostly

[10:49] <lizmat> well, it got a bit darker here, like an early onset of the setting of the sun

[10:56] *** colomon joined
[11:32] *** kjs_ joined
[11:50] *** Ven joined
[12:21] *** Ven joined
[12:35] <[Coke]> new moarvm is visible in the port list. whee.

[12:35] <[Coke]> hopefully will make some progress on nqp this weekend.

[12:35] <brrt> yay

[12:42] <FROGGS> \o/

[13:33] <timotimo> brrt: you think perf could tell us what's wrong with the performance?

[13:34] *** kjs_ joined
[13:40] *** nebuchadnezzar joined
[13:56] *** kjs_ joined
[14:10] *** retupmoca joined
[15:09] *** FROGGS[mobile] joined
[16:13] *** Ven joined
[16:37] <jnthn> timotimo: You may get more insight from callgrind or so

[16:40] <timotimo> mhm

[16:53] <hoelzro> [Coke]++

[16:58] <dalek> MoarVM: aa450df | jnthn++ | src/6model/serialization.c:

[16:58] <dalek> MoarVM: Re-enable lazy deserialization.

[16:58] <dalek> MoarVM:

[16:58] <dalek> MoarVM: Provide a #define for easily turning it on/off also. We'll see what

[16:58] <dalek> MoarVM: the ecosystem fall-out is; even if there is any, we really want to

[16:58] <dalek> MoarVM: have this on for the startup and memory use, so we should discover

[16:58] <dalek> MoarVM: and debug the issues ahead of the next release. The pre-comp tests

[16:58] <dalek> MoarVM: in the spectest suite are no worse with this turned on.

[16:58] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/aa450df4ad

[16:59] <FROGGS[mobile]> I can do a ecosystem smoke if you want

[17:00] <jnthn> Feel free.

[17:00] <FROGGS[mobile]> and we can easily diff to the 2015.03 run

[17:00] <jnthn> Right

[17:01] <jnthn> I'm going to have more tuits starting soon also, so I'll be in a better position to debug any fallout

[17:05] *** FROGGS joined
[17:28] <hoelzro> jnthn: I tested my test for RT #122773 with your lazy deserialization change, and it doesn't break  :thumbsup:

[17:28] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122773

[17:29] <jnthn> Yeah, I can the test file that's in and it seemed happy

[17:29] <jnthn> There were other pre-comp fixes in the meantime

[17:29] <hoelzro> jnthn++

[17:29] <jnthn> So I guess one of those nailed the real issue.

[17:32] <FROGGS> "This has been fixed on MoarVM; the issue is still outstanding on JVM."

[17:33] <hoelzro> FROGGS: I'm trying it on the JVM now =)

[17:33] * hoelzro wonders if the corresponding roast test is skipped on JVM

[17:34] *** colomon joined
[17:56] <japhb> jnthn: What are your 2015.04 goals?  Which is to say, what's up next on the docket?

[17:57] <jnthn> Next major goal is NFG

[17:57] <jnthn> (In Moar)

[17:58] <jnthn> Also thinking lots about sized/shaped array stuff

[17:58] <jnthn> In the backbrane at least. :)

[17:59] <jnthn> Will keep on with the native array stuff a bit too, since that's not perfect yet

[18:00] <jnthn> Wanting to land the various box/unbox and ref/deref opts in spesh I've started in on too

[18:01] <jnthn> In May, concurrency and I/O things probably will rise to the top of the pile.

[18:11] <hoelzro> FROGGS: it's still outstanding on JVM =(

[18:12] <hoelzro> I was hoping that NQP or Rakudo had a change that fixed the issue for everyone

[18:26] <FROGGS> :/

[18:27] <hoelzro> although

[18:28] <hoelzro> there could be something in NQP that was largely copied over from JVM -> Moar, and was fixed in the latter, but not the former

[18:28] <hoelzro> (or Rakudo, for that matter)

[18:31] <FROGGS> yeah, the question is: what fixed it?

[18:32] <hoelzro> sounds like a job for git-bisect!

[18:32] <jnthn> I blame FROGGS!

[18:32] <jnthn> :P

[18:33] <FROGGS> ò.ó

[18:33] * FROGGS thinks that it might help the he look angry

[18:33] <hoelzro> jnthn: you blame FROGGS for fixing it? =)

[18:33] <jnthn> Yes :D

[18:33] <jnthn> FROGGS++ fixes lots of things :)

[18:34] <FROGGS> hmmm, I cannot remember touching something in that area

[18:36] *** rurban_ joined
[18:38] <jnthn> ah well :)

[18:38] <jnthn> Dammit, why can drunk annoying people be rich enough to afford first class... :/

[18:39] <FROGGS> :/

[18:41] *** kjs_ joined
[19:03] <FROGGS> jnthn: that's the only ecosystem regression: http://testers.p6c.org/reports/37368.html

[19:03] <FROGGS> jnthn: I just had to run it, right? I did not have to enable anything, right?

[19:04] <jnthn> right

[19:04] <jnthn> Just build with latest Moar

[19:04] <jnthn> (I didn't bump MOAR_REVISION etc)

[19:05] <FROGGS> jnthn: you see the used versions at the top of the report

[19:05] <FROGGS> moar 2015.3.6.gaa.450.df - that looks good

[19:07] <jnthn> yes

[19:08] <jnthn> except the weird dots :P

[19:11] <FROGGS> jnthn: I'm not to blame this time :o)

[19:11] <FROGGS> but, you get used to the dots

[19:16] <nwc10> jnthn: I appreciate that the release ship has sailed, but I was a bit, um, unthinking.

[19:17] <nwc10> Could you correct "PPC32" and "PPC64" to "Power (32 and 64 bit)"

[19:17] <nwc10> I believe that that is correct (or nearly correct) and certainly far less incorrect than PPC

[19:18] <jnthn> nwc10: Correct it where?

[19:18] <nwc10> the website

[19:18] <nwc10> and whatever file in the repo

[19:18] <nwc10> aha, not in the repo

[19:19] <jnthn> The website is in a repo, but asking you to fix it does no good since you don't have a commit bit :(

[19:19] <nwc10> sorry, I'm not *that* useful

[19:20] * jnthn isn't especially sure what was wrong with the original rendering :)

[19:20] <dalek> moarvm.org: 1403e08 | jnthn++ | index.html:

[19:20] <dalek> moarvm.org: Wording tweak.

[19:20] <dalek> moarvm.org: review: https://github.com/MoarVM/moarvm.org/commit/1403e0805c

[19:22] <nwc10> if I understand it correctly, PPC is just one variant of the Power family

[19:22] <nwc10> from a decade ago

[19:23] <nwc10> so saying "PPC" is sort of "so great, and you're y2k compliant too?"

[19:23] <jnthn> ah, ok

[19:23] <jnthn> Turns out they marketed PPC too well so I thought that was the entire line :P

[19:24] <nwc10> I think this at times. Hence I made the mistake

[19:24] <jnthn> Not sure if marketing win or fail :)

[19:39] <jnthn> japhb: You've asked before about half-precision floating point. Any idea how portably available that is?

[19:39] <jnthn> japhb: https://gcc.gnu.org/onlinedocs/gcc/Half-Precision.html suggests "not"

[19:47] <jnthn> S09 mentions "16-bit floating-point is also considered optional in this sense."

[19:57] <japhb> http://en.wikipedia.org/wiki/PowerPC has a little of the history of POWER/Power/PowerPC/PPC and such

[19:58] <japhb> I found it interesting that IBM won the contracts for all three of CPUs for the previous generation of gaming consoles.  Apparently in the early days Sony/Microsoft/Nintendo didn't realize that IBM was essentially having the design teams sitting together, which is why mysteriously they had the same clock ratings and such.

[19:59] <japhb> .oO( Gee, 4.2 GHz is awfully specific to have identical on different consoles ... )

[20:00] <japhb> jnthn: It might be worth looking at the LLVM docs, since it's used for doing GPU cross compiles, IIRC.

[20:01] <japhb> jnthn: 16-bit FP ("half") is pervasively supported on GPUs and in any graphics software that supports HDR rendering or intermediates; see http://www.openexr.com/ for the library that kick-started this.

[20:02] <japhb> As you note, it's supported directly on ARM, but also see: https://software.intel.com/en-us/blogs/2013/09/30/intel-half-precision-floating-point-format-conversion-instructions

[20:09] <jnthn> japhb: OK. I think I'm inclined to class this as something I'm happy to have go in, but don't personally feel it's a great use of tuits for me to focus on.

[20:10] <jnthn> 'cus it'll need a bunch of Configure probes to do.

[20:13] <japhb> jnthn: I'm fine with that.  Most important to me is that we not design it to break, like assuming a 16-bit value is a short int.

[20:14] <jnthn> japhb: Given that'd be int/num confusion, I don't see it happening.

[20:14] <japhb> (I wasn't expecting us to do that, I just meant that as an example.)

[20:15] <japhb> I'm basically fine with not having it available soon, as long as it's not hard to add later, is all I'm saying.  :-)

[20:17] <jnthn> ah, oK :)

[20:18] <dalek> MoarVM: 0c95c4b | jnthn++ | src/6model/reprs/MVMArray.h:

[20:18] <dalek> MoarVM: Add type codes for bit-packed array sizes.

[20:18] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0c95c4bc6e

[20:20] <japhb> *Way* more useful to me is 32-bit and 64-bit int/float "reinterpretation", which these days I assume will come from CUnion support.

[20:39] *** kjs_ joined
[20:42] *** TimToady joined
[20:45] *** FROGGS joined
[20:47] <timotimo> oh wow

[20:47] <timotimo> no wonder devirting reprops made things break

[20:47] <timotimo> i mean, performance wise

[20:48] <jnthn> Oh?

[20:49] <timotimo> i had "return jgb_consume_reprop(...)" in the jgb_consume_ins switch

[20:49] <timotimo> wait

[20:49] <timotimo> that's not wrong

[20:50] <timotimo> mrrr

[20:51] <dalek> MoarVM: 74c1982 | jnthn++ | src/6model/reprs/MVMArray.c:

[20:51] <dalek> MoarVM: Fix a possible buffer-overrun in existspos.

[20:51] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/74c198283b

[20:51] <dalek> MoarVM: 01be8e3 | jnthn++ | src/6model/reprs/MVMArray.c:

[20:51] <dalek> MoarVM: First steps to handling bit-packed arrays.

[20:51] <dalek> MoarVM:

[20:51] <dalek> MoarVM: This gets them recognized in compose/deserialize_repr. Also factor out

[20:51] <dalek> MoarVM: some repeated code to make this change easier.

[20:51] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/01be8e3548

[20:54] <timotimo> and now configure.pl refuses to accept my moar because it's "too old"

[20:55] <dalek> MoarVM/jit_devirtualize_reprops_2: cfff29d | timotimo++ | build/probe.pm:

[20:55] <dalek> MoarVM/jit_devirtualize_reprops_2: Merge branch 'master' into jit_devirtualize_reprops

[20:55] <dalek> MoarVM/jit_devirtualize_reprops_2: review: https://github.com/MoarVM/MoarVM/commit/cfff29da50

[20:55] <dalek> MoarVM/jit_devirtualize_reprops_2: b5962a0 | timotimo++ | src/jit/graph.c:

[20:55] <dalek> MoarVM/jit_devirtualize_reprops_2: when failing from consume_reprop, do it loudly

[20:55] <dalek> MoarVM/jit_devirtualize_reprops_2: review: https://github.com/MoarVM/MoarVM/commit/b5962a05ea

[20:55] <timotimo> er

[20:55] <timotimo> did not mean to push

[20:55] <timotimo> i wanted to rebase this

[20:55] <dalek> Heuristic branch merge: pushed 22 commits to MoarVM/jit_devirtualize_reprops_2 by timo

[20:56] <timotimo> my brane seems to still be napping

[20:57] <dalek> Heuristic branch merge: pushed 22 commits to MoarVM/jit_devirtualize_reprops_2 by timo

[21:07] <timotimo> ah, got it

[21:08] <dalek> MoarVM/jit_devirtualize_reprops_2: ceeb4b5 | timotimo++ | src/jit/graph.c:

[21:08] <dalek> MoarVM/jit_devirtualize_reprops_2: no longer bail from many unhandled repr ops

[21:08] <dalek> MoarVM/jit_devirtualize_reprops_2: review: https://github.com/MoarVM/MoarVM/commit/ceeb4b567c

[21:08] <timotimo> that was a dumb mistake :)

[21:34] <timotimo> i'll walk by my desktop quickly and turn it on so that i can run benchmarks

[21:34] <timotimo> now that i'm not accidentally bailing on a whole lot of jitted frames

[21:50] <dalek> MoarVM/jit_devirtualize_reprops_2: ac1ca37 | timotimo++ | src/jit/graph.c:

[21:50] <dalek> MoarVM/jit_devirtualize_reprops_2: fill out switch-case, revert pointer "hack"

[21:50] <dalek> MoarVM/jit_devirtualize_reprops_2: review: https://github.com/MoarVM/MoarVM/commit/ac1ca372be

[22:03] <timotimo> benchmarks will commence now

[22:24] *** moritz joined
