[02:01] *** d4l3k_ joined
[06:38] *** FROGGS joined
[07:01] *** vendethiel joined
[07:06] <nwc10> as MoarVM has been reboostrapped very recently, does this mean that we can remove code that supports everything other than the current serialisation format?

[07:06] <jnthn> "yes" (more)

[07:07] <jnthn> At some point, though, we're going to want to declare that a given Moar supports a bunch of Rakudo versions before it, so you can upgrade the VM independently of the rest and be comfortable doing so.

[07:07] <nwc10> I was sort of assuming this at some point. Alpha time?

[08:14] *** brrt joined
[08:23] *** zakharyas joined
[09:06] *** harrow joined
[09:09] *** Ven joined
[10:24] *** lizmat joined
[11:17] <brrt> \o

[11:19] <jnthn> o/ brrt

[11:20] <brrt> hey, how is today :-)

[11:24] <brrt> nlpw this friday by the way. that came as a surprise to me

[11:25] <timotimo> oh!

[11:25] <timotimo> i didn't realize

[11:25] <timotimo> i'll be somewhere else this weekend

[11:27] <brrt> well, same for me, unfortunately

[13:33] *** Ven joined
[13:46] *** dalek joined
[14:52] <dalek> MoarVM: dd6cf7c | jnthn++ | src/strings/normalize. (2 files):

[14:52] <dalek> MoarVM: Stash appropriate quick check prop in normalizer.

[14:52] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/dd6cf7c0d1

[14:52] <dalek> MoarVM: ebf84df | jnthn++ | src/strings/normalize.h:

[14:52] <dalek> MoarVM: A couple of macros to test the normalization form.

[14:52] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ebf84dfaa9

[14:54] <dalek> MoarVM: 5c2ac31 | jnthn++ | src/strings/normalize.h:

[14:54] <dalek> MoarVM: NFD and NFKD can get a simpler fast path.

[14:54] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5c2ac31df0

[14:54] <dalek> MoarVM: e3c0f7e | jnthn++ | src/strings/ (2 files):

[14:54] <dalek> MoarVM: Add a way to get a Unicode property as a C string.

[14:54] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e3c0f7ea91

[15:30] <dalek> MoarVM: 734f34c | jnthn++ | src/strings/normalize.c:

[15:30] <dalek> MoarVM: Add quick-check simple paths; prepare for decomp.

[15:30] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/734f34ccc3

[15:51] <dalek> MoarVM: 0a53a93 | jnthn++ | src/strings/normalize.c:

[15:51] <dalek> MoarVM: Basic cases of NFD/NFKD.

[15:51] <dalek> MoarVM:

[15:51] <dalek> MoarVM: Gets the recursion requirements of the spec right, but still missing

[15:51] <dalek> MoarVM: Hangul handling and also canonical sorting.

[15:51] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0a53a93a1a

[15:54] *** FROGGS[mobile] joined
[15:59] <jnthn> Guess I gotta get the hang of Hangul next...don't want to jamon it... :)

[16:01] *** vendethiel joined
[16:04] * TimToady hands jnthn a syllabus..

[16:05] <jnthn> .oO( What the syllabus number of implementing this stuff... )

[16:06] <TimToady> don't get run over by a syllabull either...

[16:07] <TimToady> syllaberries are probably not too dangerous though

[16:17] <dalek> MoarVM: 6b61fb5 | jnthn++ | src/strings/normalize.c:

[16:17] <dalek> MoarVM: Implement Hangul decomposition algorithm.

[16:17] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/6b61fb566b

[16:20] <jnthn> Well, that gets us passing a good bit more of the NFD tests...

[16:20] <jnthn> Probably NFKD too, will have to generate those and try 'em when I get done with NFD.

[16:23] <jnthn> Anyway, canonical ordering algo will be next, but I think it's dinner time first :)

[16:31] *** Ven joined
[16:58] *** ggoebel joined
[17:12] *** FROGGS joined
[18:15] <nwc10> jnthn: I made another patch at https://gitlab.com/nwc10/MoarVM.git

[18:15] <nwc10> it removes all the non-current serialisation code

[18:16] <nwc10> I'm not sure if it's exactly how you'd like to do it. Particularly the comment "See blame history for the next line if you change the header size:"

[18:16] <nwc10> and how to undo the header size variation stuff, whilst making it easy to add it back it we need it again

[18:39] <dalek> MoarVM: badd461 | (Francois Perrad)++ | build/probe.pm:

[18:39] <dalek> MoarVM: cross-compiling with computed goto

[18:39] <dalek> MoarVM:

[18:39] <dalek> MoarVM: a target executable can not run on the host.

[18:39] <dalek> MoarVM: so, don't try that.

[18:39] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/badd461b54

[18:39] <dalek> MoarVM: 44b3340 | FROGGS++ | build/probe.pm:

[18:40] <dalek> MoarVM: Merge pull request #199 from fperrad/cross-cgoto

[18:40] <dalek> MoarVM:

[18:40] <dalek> MoarVM: cross-compiling with computed goto

[18:40] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/44b334011b

[18:40] *** Ven joined
[18:52] *** zakharyas joined
[19:29] <dalek> MoarVM: ddb1bf9 | (Francois Perrad)++ | / (4 files):

[19:29] <dalek> MoarVM: refactor pthread_yield detection

[19:29] <dalek> MoarVM:

[19:29] <dalek> MoarVM: the current detection is fragile.

[19:29] <dalek> MoarVM: for example, with the musl libc on linux, it fails.

[19:29] <dalek> MoarVM:

[19:29] <dalek> MoarVM: the detection must be done during the configure step.

[19:29] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ddb1bf9e47

[19:29] <dalek> MoarVM: f110c94 | FROGGS++ | / (4 files):

[19:29] <dalek> MoarVM: Merge pull request #200 from fperrad/pthread_yield

[19:29] <dalek> MoarVM:

[19:29] <dalek> MoarVM: refactor pthread_yield detection

[19:31] <FROGGS> what should we do about that?

[19:31] <FROGGS> src/strings/normalize.c: In function ‘assert_codepoint_array’:

[19:31] <FROGGS> src/strings/normalize.c:23:5: warning: format not a string literal and no format arguments [-Wformat-security]

[19:31] <FROGGS> MVM_exception_throw_adhoc(tc, error);

[19:31] <FROGGS> just rename "error" to something else?

[19:37] <jnthn> The warning is wrong; we only pass literal strings in there.

[19:38] <FROGGS> isnt "error" special?

[19:38] <jnthn> I don't think that's hat the warning is saying, no.

[19:39] <FROGGS> ahh

[19:39] <FROGGS> got it

[19:39] <jnthn> We could fix it with "%s", error I guess.

[19:39] <FROGGS> so the warning if about `format injection attacks` :o)

[19:39] <FROGGS> s/if/is/

[19:40] <jnthn> Yeah

[19:40] <FROGGS> k

[19:40] <jnthn> The whole lot is static but I guess the static analysis of the compiler isn't so good ;)

[19:40] <FROGGS> not smart enough, heh

[19:54] <FROGGS> jnthn: is it okay if I push there %s patch?

[20:04] <jnthn> Should be fine.

[20:05] *** zakharyas1 joined
[20:15] <dalek> MoarVM: 1129f82 | FROGGS++ | src/strings/normalize.c:

[20:15] <dalek> MoarVM: silence warning about missing format string

[20:15] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1129f82c76

[20:33] *** Ven joined
[20:35] *** colomon joined
[20:48] * jnthn writes ?? ... !! in C and...yeah, the compiler doesn't like that :)

[20:49] <FROGGS> did the compiler spot your typo and gave you a good guess what might be right?

[20:50] <jnthn> It was larlely confused :)

[20:50] <jnthn> *largely

[20:57] <jnthn> Anyways, seems I've reached one milestone on the path to NFG. :)

[21:09] <dalek> MoarVM: 45861b3 | jnthn++ | src/strings/normalize.c:

[21:09] <dalek> MoarVM: Implement Unicode canonical sorting.

[21:09] <dalek> MoarVM:

[21:09] <dalek> MoarVM: With this, we pass all of the Unicode normalization tests for both NFD

[21:09] <dalek> MoarVM: and NFKD.

[21:09] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/45861b3d02

[21:11] <jnthn> Now I "just" need to implement the canonical composition algorithm and we get NFC and NFKC.

[21:12] <FROGGS> hmmm, at some point I should read what these abbr's mean :o)

[21:12] <FROGGS> jnthn++ anyway

[21:13] <FROGGS> I know what NFC stands for though

[21:15] <jnthn> To implement NFC, you first decompose everything that's not already in NFC, do a canonical sort (and at this point you have NFD), and then apply canonical composition to get NFC.

[21:15] <FROGGS> ahh

[21:16] <jnthn> And NFG is NFC and then some, thus why I'm taking them on in this order.

[21:17] <FROGGS> are we going to "loose" information when we compose to NFC or NFG?

[21:18] <jnthn> NFD/NFC/NFG are defined as canonicalization, so don't lose anything much

[21:18] <FROGGS> like when I a utf8 string that has "o +combiner +dots", and it get combined into "ö", do I get back to the original bytes?

[21:18] <jnthn> Well, you can lose insignificant ordering.

[21:18] <jnthn> It depneds on the combining chars in question.

[21:19] <FROGGS> I see

[21:19] <jnthn> It all depends on what you choose to write out, really.

[21:20] <jnthn> NFKD/NFKC *are* much more "violent"

[21:20] <FROGGS> not that I need to get back to the very same bytestream, but I'd seen this question a few weeks ago

[21:20] <jnthn> And go rather beyond canonicalization.

[21:20] <jnthn> Yeah, we don't promise the exact same bytestream, just one that's canonically equivalent.

[21:21] <FROGGS> yeah

[21:21] <jnthn> That means we take care of retaining the combiner orders that matter for when you render things.

[21:21] <jnthn> One of the nice things is that by the time we've applied NFC and are considering NFG, we already have things nicely ordered.

[21:35] *** colomon joined
[21:39] *** lizmat_ joined
[22:24] *** retupmoca joined
[23:59] *** camelia joined
