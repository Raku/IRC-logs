[00:00] *** lizmat joined
[00:08] *** TEttinger joined
[01:15] *** vendethiel joined
[03:45] <colomon> success!  \o/

[03:46] * colomon got his dop kit into his overstuffed suitcase

[06:31] *** FROGGS[mobile] joined
[07:37] *** vendethiel joined
[07:56] *** virtualsue joined
[07:58] *** FROGGS joined
[08:04] *** vendethiel joined
[09:21] *** brrt joined
[09:35] <dalek> MoarVM/even-moar-jit: ac58687 | brrt++ | src/jit/ (7 files):

[09:35] <dalek> MoarVM/even-moar-jit: Factor out the 'mem' abstraction

[09:35] <dalek> MoarVM/even-moar-jit:

[09:35] <dalek> MoarVM/even-moar-jit: The 'mem' value type could refer to any number of registers

[09:35] <dalek> MoarVM/even-moar-jit: withoutt ensuring that they were live values. Adding support

[09:35] <dalek> MoarVM/even-moar-jit: for such values would be complicated, and it's not necessary

[09:35] <dalek> MoarVM/even-moar-jit: either (the tiler can take care of it).

[09:35] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/ac586875e4

[09:40] <timotimo> cool

[09:42] <timotimo> colowhat is a "dop kit"?

[09:44] <timotimo> "Trying to free too many registers" - aaw

[09:45] <dalek> MoarVM/even-moar-jit: b900755 | brrt++ | build/Makefile.in:

[09:45] <dalek> MoarVM/even-moar-jit: Remove JIT intermediates in make clean

[09:45] <dalek> MoarVM/even-moar-jit: review: https://github.com/MoarVM/MoarVM/commit/b9007553fe

[09:46] * brrt afk for now

[14:52] *** FROGGS[mobile] joined
[19:37] *** colomon joined
[19:37] <colomon> o/

[19:38] * colomon is back in the States

[19:46] <masak> \o

[19:50] *** TEttinger joined
[19:52] <colomon> what’s the current count?  :)

[19:54] <timotimo> welcome back to the ground, colomon :)

[19:55] <colomon> I can’t tell you how happy I was to get off that plane.  Big Sol, tiny cramped seat.

[19:56] <colomon> at least I’ve got an aisle for my last leg home, and a few more hours to recoup before I have to board.

[19:58] <timotimo> yeah, sol is really big

[19:58] <timotimo> i'd go so far as to call it gigantic

[20:09] <colomon> http://smoke.perl6.org/report — last column is (I think) the most account smoke test run in ages.

[20:09] <colomon> woah, GLR count is 4?

[20:10] <timotimo> glr count?

[20:10] <colomon> 4 failing test files?

[20:10] <colomon> at least, that’s what I just got locally

[20:11] <colomon> well, techincally I am in Chicago and the server I ran it on is in Michigan, but that’s close enough to local for me.  ;)

[20:14] <colomon> m: say <:13<01>/:13<07>>

[20:14] <camelia> rakudo-moar cf3b24: OUTPUT«:13<01>/:13<07>␤»

[20:14] <colomon> … errr ....

[20:15] <colomon> maybe I’d better backlog

[20:15] <colomon> oh, how’d I get in moarvm?  apologies, good folk

[20:15] <timotimo> :)

[20:15] <timotimo> we like visitors :)

[20:23] <vendethiel> .oO( you're bound to stay now )

[20:24] <timotimo> hey vendethiel

[20:25] <vendethiel> hi hi

[20:35] *** virtualsue joined
[21:16] *** rarara_ joined
[21:17] *** lizmat joined
[21:20] *** lizmat_ joined
[21:27] <dalek> MoarVM: 1172953 | paultcochrane++ | src/spesh/candidate.c:

[21:27] <dalek> MoarVM: Remove potential double-free in MVM_spesh_candidate_setup

[21:27] <dalek> MoarVM:

[21:27] <dalek> MoarVM: The `before` and `after` variables were being potentially freed twice.  By

[21:27] <dalek> MoarVM: only freeing them in the outer scope of their usage means that the resources

[21:27] <dalek> MoarVM: are still freed before exiting the function and the code doesn't try to free

[21:27] <dalek> MoarVM: already-freed variables.

[21:27] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/11729536a8

[21:27] <dalek> MoarVM: 511c467 | lizmat++ | src/spesh/candidate.c:

[21:27] <dalek> MoarVM: Merge pull request #245 from paultcochrane/pr/remove-double-free

[21:27] <dalek> MoarVM:

[21:27] <dalek> MoarVM: Remove potential double-free in MVM_spesh_candidate_setup

[21:28] <dalek> MoarVM: 613153e | paultcochrane++ | src/gc/orchestrate.c:

[21:28] <dalek> MoarVM: Cast unsigned short to MVMunit64 to avoid integer overflow

[21:28] <dalek> MoarVM:

[21:28] <dalek> MoarVM: Coverity noticed that in the expression changed here, the variable

[21:28] <dalek> MoarVM: `tc->instance->num_user_threads` was an unsigned short, which was then being

[21:28] <dalek> MoarVM: implicitly promoted to int and then promoted again to unsigned long.

[21:28] <dalek> MoarVM: However, if the result of the expression is sufficiently large, this won't

[21:28] <dalek> MoarVM: calculate the correct value anymore since the value overflows.  By casting

[21:28] <dalek> MoarVM: `num_user_threads` to MVMunit64 we ensure that the overflow is avoided.

[21:28] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/613153e232

[21:28] <dalek> MoarVM: 7e9f29e | lizmat++ | src/gc/orchestrate.c:

[21:28] <dalek> MoarVM: Merge pull request #246 from paultcochrane/pr/avoid-integer-overflow

[23:01] *** lizmat joined
