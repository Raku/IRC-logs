[00:20] <jnthn> Woo, down to just 2 warnings building Moar on clang.

[00:24] <jnthn> And then there were none. \o/

[00:25] <dalek> MoarVM: 797025f | jnthn++ | src/gc/roots.c:

[00:25] <dalek> MoarVM: Supersitious parens to quiet clang.

[00:25] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/797025f73f

[00:25] <dalek> MoarVM: 527af71 | jnthn++ | src/math/bigintops.c:

[00:25] <dalek> MoarVM: Use labs for a 64-bit int.

[00:25] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/527af71f4c

[00:26] <dalek> MoarVM: 686058b | jnthn++ | / (27 files):

[00:26] <dalek> MoarVM: Big cleanup of signed/unsigned mess.

[00:26] <dalek> MoarVM:

[00:26] <dalek> MoarVM: Turns out that using anything but char * for things that are C level

[00:26] <dalek> MoarVM: and string-ish goes against enough C culture to be a real pain. So

[00:26] <dalek> MoarVM: standardize on that. Clears up almost all the remaining warnings in

[00:26] <dalek> MoarVM: clang, and the overall number of casts has probably decreased some

[00:26] <dalek> MoarVM: along the way.

[00:26] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/686058bc41

[00:26] <dalek> MoarVM: 0194409 | jnthn++ | src/platform/threads.h:

[00:26] <dalek> MoarVM: Quiet pthread_yield() warnings.

[00:26] <dalek> MoarVM:

[00:33] <jnthn> Clean of warnings with clang, gcc, and MSVC now. :)

[00:33] <jnthn> Well, except the annoying stuff about backslashes in the generated JIT code on Windows.

[00:36] <jnthn> Sleep &

[01:08] *** kjs_ joined
[01:16] <japhb> Still, very nice indeed.  jnthn++

[08:19] *** dsm joined
[08:20] *** kjs_ joined
[08:27] *** dsm joined
[08:58] <FROGGS> o/

[09:13] <timotimo> o/

[09:16] *** kjs_ joined
[09:23] <JimmyZ> \o/

[09:23] *** kjs_ joined
[09:26] <timotimo> JimmyZ: can we use alias analysis to handle tracking of boxed data?

[09:27] <timotimo> oh

[09:27] <timotimo> actually, now i notice this wasn't boxing, this was containering!

[09:27] <timotimo> hm ... does decont on an Int object give the P6Int object?

[09:28] <timotimo> https://gist.github.com/timo/a39c98d7af822b763be6 ‚Üê i've seen this pretty well optimized piece of code inlined in a bigger routine and i was thinking the decont could probably be eliminated in some cases when the value in the container used to lie around in an "unboxed" or at least "uncontainered" state earlier

[09:30] <timotimo> https://gist.github.com/timo/881201c9742ff048e4e6 - maybe you can make some more sense out of this than i can :)

[09:30] <timotimo> because i've got to be AFK in a few minutes

[09:37] *** rurban joined
[10:46] *** ilbot3 joined
[11:11] <dalek> MoarVM: 1ac4eec | jnthn++ | src/strings/unicode_ops.c:

[11:11] <dalek> MoarVM: Really fix final warnings in unicode.c.

[11:11] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1ac4eec845

[11:41] *** Ven joined
[13:13] <dalek> MoarVM: f74cd19 | jnthn++ | src/strings/ops.c:

[13:13] <dalek> MoarVM: Fix leak in join; missing free on early return.

[13:13] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f74cd19b48

[13:13] <dalek> MoarVM: 203df1e | jnthn++ | src/spesh/args.c:

[13:13] <dalek> MoarVM: Fix missing free in args spesh.

[13:13] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/203df1e2a4

[13:13] <dalek> MoarVM: 5a12129 | jnthn++ | src/core/fixedsizealloc.h:

[13:13] <dalek> MoarVM: Tweak fixed size alloc configuration.

[13:13] <dalek> MoarVM:

[13:13] <dalek> MoarVM: Avoids some wastage, saving around 264KB off max memory of a Rakudo

[13:13] <dalek> MoarVM: "Hello world".

[13:13] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/5a12129514

[13:20] <dalek> MoarVM: ab041da | jnthn++ | src/6model/serialization.c:

[13:20] <dalek> MoarVM: Fix typo; Ven++.

[13:20] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ab041daa74

[13:22] <timotimo> the comment you've fixed a typo in is actually from back when i created the varint9 implementation and didn't know if i was doing it wrong ...

[13:22] <timotimo> still don't know if it's totally correct :P

[13:23] <jnthn> I didn't look at it, tbh, just fixed the typo :P

[13:23] <jnthn> The two leaks above found by valgrind++

[13:23] <timotimo> :P

[13:23] <timotimo> very good

[13:23] <timotimo> got a clue how much they mattered?

[13:24] <jnthn> Well, running the NQP bigint test file, we're down from 81 to 51 items in --leak-check=full, with --full-cleanup passed

[13:24] <jnthn> --full-cleanup is not very full yet :)

[13:24] <jnthn> I picked out those two as they are things that could repeatedly happen at runtime and lead to real leaks.

[13:25] <jnthn> Whereas much of the rest looks like "incomplete cleanup at exit"

[13:25] <timotimo> mhm

[13:26] <jnthn> Anyway, suspect I'll pick off the odd one of those too :)

[13:26] <timotimo> sure

[13:26] <timotimo> at least moarvm usually shuts down with a clean exit code rather than a signal or something

[13:26] <jnthn> Yeah

[13:27] <jnthn> We normally don't waste time cleaning up at exit at all

[13:27] <jnthn> but --full-cleanup exists to try and do so

[13:27] <jnthn> In the longer term it's good for embedders if we can do a clean shutdown.

[13:27] <jnthn> In the meantime, the cleaner we are with it, the easier it is to use valgrind's leak checker to find actual leaks.

[13:27] <timotimo> sure

[13:27] <jnthn> (As in, ones we should really take care of.)

[13:30] <jnthn> Anyways, back to working on parametric stuff... :)

[13:35] <timotimo> sounds good

[13:35] <timotimo> how are you feeling btw?

[13:37] <jnthn> Mostly better; I slept well, and the cold is about gone.

[13:38] <timotimo> \o/

[13:47] <FROGGS> and I finally make some progress on XML::LibXML, which also feels very good :o)

[13:48] <jnthn> :)

[13:50] <timotimo> \o/

[14:13] * jnthn is happy to have working speakers again, to provide hacking music o/

[14:16] <FROGGS> I just enjoy the noise of kids >.<

[14:18] <jnthn> ENOKIDS :)

[14:20] <FROGGS> *g*

[14:21] <FROGGS> hmmmm, I wonder how I could make  foo(void *bar)  work...

[14:33] <FROGGS> ohh! CArrays to the rescue!

[14:41] *** rurban joined
[14:56] *** brrt joined
[15:29] <timotimo> of course

[15:32] <jnthn> .oO( Keep calm and CArray on native calling... )

[15:37] <jnthn> Turns out you can't do anything much useful with 6pe until implementing the serialization bits of it ;)

[15:38] * timotimo feared that

[16:11] *** JimmyZ_ joined
[16:28] *** zakharyas joined
[18:32] *** FROGGS_ joined
[19:50] *** zakharyas joined
[20:09] <jnthn> Stage mast       : Code ref does not exist in serialization context

[20:09] <jnthn> Well darn.

[20:10] <FROGGS_> eww

[20:10] <jnthn> wtbh

[20:10] <jnthn> After improving the error

[20:10] <jnthn> Stage mast       : Code ref 'Bool' does not exist in serialization context

[20:25] *** kjs_ joined
[20:27] <timotimo> :o

[20:27] <timotimo> ordered by name, perchance?

[20:30] <FROGGS_> or broken lazy deserialization?

[20:31] <jnthn> No, the bug only comes up when the 6pe-based mixin cache I've got implemented locally actually interns something.

[20:38] <TimToady> those darn interns never know what they're doing...

[20:41] <FROGGS_> I hope they don't get pe'd too much!

[20:43] <TimToady> they just stand around looking 6y

[21:01] *** rurban joined
[21:33] *** tgt joined
[22:03] <jnthn> 'tis odd. A code object ends up with an SC set on it, but then is missing in that SC's code roots list.

[22:06] <jnthn> Will look further tomorrow.

[22:06] <timotimo> good night!

[22:07] <TimToady> o/

[22:07] <timotimo> is everything needed to investigate psuhed to your branch?

[22:08] <timotimo> or do you have some nice local patches for huntin'?

[22:22] <timotimo> hmm
