[01:37] *** tokuhiro_ joined
[01:48] *** ilbot3 joined
[01:53] *** tokuhiro_ joined
[01:59] *** vendethiel joined
[03:27] *** colomon joined
[07:03] *** lizmat joined
[07:05] *** Ven joined
[07:05] * nwc10 found the reasoning behind all of this interesting: http://www.snarky.ca/try-to-not-use-the-c-api-directly

[07:06] <nwc10> oh my

[07:06] <nwc10> https://www.blogger.com/comment.g?blogID=3971202189709462152&postID=3638960649983103796&bpli=1 -- ...  the non-SSE2 backend for older x86 processors is fully working and can be built from source, which takes almost 7h on a 2.2GHz Athlon XP.

[07:08] *** kjs__ joined
[07:13] <timotimo> oh wow

[07:14] <timotimo> that's a whole lot of time

[07:16] *** FROGGS joined
[07:37] *** dalek joined
[07:49] *** zakharyas joined
[07:58] *** psch joined
[08:28] *** brrt joined
[08:32] <brrt> nwc10: ain't pypy fun

[08:32] <brrt> :-P

[08:33] <timotimo> brrt: anything i can do to help out with your workload?

[08:33] <brrt> how good are you with gdb :-P

[08:33] <brrt> no, not really

[08:33] <brrt> sorry :-)

[08:33] <brrt> thansk for the offer though

[08:34] <brrt> what you can do is bug me about it after i've had a few days to mull over the next few things

[08:34] <timotimo> mhm

[08:36] <brrt> ok, the one thing i really want done is unbrittling the DynASM rsp case handling

[08:37] <brrt> so i'm kind of thinking on how to do that best

[08:39] <timotimo> right, that could otherwise bonk someone on the head at some point

[08:39] <brrt> possibly, yes

[08:40] <timotimo> and it's always a good idea to leave third party projects you've contributed to in the course of adding a feature to your project in a good state

[08:43] <brrt> oh, yes, of course

[08:43] <brrt> but nobody suffers from my wonky dynasm branch but me

[08:43] <brrt> so i'm not too worried about that

[08:43] <timotimo> yeah, but some day it may want to get merged up stream, right?

[08:44] <timotimo> we can't be the only ones interested in dynasm for x86_64

[08:45] <brrt> right

[08:45] <brrt> one of the nasty bits about that was that i ran dynasm through an indenter before starting to hack on it

[08:46] <brrt> so that will need some undoing

[08:48] <timotimo> oh crap

[08:48] <timotimo> find an intern to do that for you %)

[08:48] <brrt> well, it's not that bad? just get the patches from post-indentation to final and apply them on the unindented

[08:49] <brrt> or, i speak with them about it and ask how they feel about having dynasm sanely indented

[08:49] <timotimo> well, yeah, but the code you'll have added will still be indented wrong?

[08:49] <timotimo> haha, "sanely"? :)

[08:49] <timotimo> someone will not like that choice of words

[08:49] <brrt> lets just say that it was previously mike-pall-indented

[08:50] <brrt> of course not. but i didn't apply an indenter to satisfy my personal whims. it was unreadable

[08:52] <timotimo> :)

[08:52] <brrt> let's just say that brilliance and comparative isolation can be a toxic combination

[09:03] *** FROGGS joined
[09:09] *** kjs__ joined
[10:14] * jnthn returns to the nasty frames issue

[10:14] <timotimo> ah, yes

[10:19] *** ShimmerFairy joined
[10:29] <timotimo> i'll run spectests for a patch that uses a Want + WVal's value.WHAT instead of the Want's .returns in that place

[10:29] <timotimo> it seems to improve code generated in this case

[10:30] <FROGGS> timotimo: what happened to the patch we discussed last night?

[10:30] <timotimo> oh!

[10:30] <timotimo> that was excellent :)

[10:30] <FROGGS> is worth anything?

[10:30] <timotimo> wait, what was it for again? :P

[10:31] <FROGGS> to remove the calls to infix:<,> I believe

[10:31] <timotimo> ah, yes

[10:31] <timotimo> i have to check it a bit more again

[10:31] <timotimo> it seemed good

[10:31] <FROGGS> k

[10:31] <timotimo> i have no clue why it seemed to not work when i built pretty much the exact same code :D

[10:32] <FROGGS> timotimo: well, you didnt :P

[10:32] <timotimo> that must be it

[10:33] <FROGGS> you have to put the $list in the want

[10:33] <timotimo> i thought i did that, though

[10:33] <timotimo> oh, the patch i gave to you wasn't what i tried first

[10:33] <timotimo> it was some strange in-between state, i fear

[10:35] <FROGGS> yes, you tried to recover your modifications somehow

[10:35] <timotimo> huh

[10:35] <timotimo> a few times i get "no subtests run"

[10:35] <timotimo> i hope it's just increased debug output causing trouble for the harness

[10:38] <FROGGS> well, the odds are not very high though

[10:38] *** Util joined
[10:41] *** ShimmerFairy joined
[10:45] <timotimo> spec tests aren't very happy :|

[10:48] <timotimo> yeah, trouble

[10:49] <timotimo> i should have used =:= NQPMu instead of just boolifying the type from the start

[10:50] <timotimo> because type objects boolify to false

[10:51] <timotimo> i want a tool that knows about recent spectest runs and highlights differing results immediately as the results are flowing past

[10:53] <timotimo> but the spectest seems much better now

[10:53] <timotimo> but perhaps i made my optimization useless and it's only because of that it works :D

[11:09] *** kjs__ joined
[11:22] *** Ven joined
[11:54] <dalek> MoarVM: 113c3b5 | jnthn++ | src/ (6 files):

[11:54] <dalek> MoarVM: Fix data race in frame reference count handling.

[11:54] <dalek> MoarVM:

[11:54] <dalek> MoarVM: Previously, it was possible for a reference to a frame to be acquired

[11:54] <dalek> MoarVM: from the body of an object and for it to die before the frame's ref

[11:54] <dalek> MoarVM: count was increased. This adds an "acquire frame" operation that will

[11:54] <dalek> MoarVM: take care of this issue by ensuring the reference count did not go to

[11:54] <dalek> MoarVM: zero already, thus avoiding the race. To ensure the zeroed count will

[11:54] <dalek> MoarVM: remain zero after frame death, we arrange to not free the frame's

[11:54] <dalek> MoarVM: memory until the next safe point if it was ever referenced by an

[11:54] <dalek> MoarVM: object body; the safe point mechanism can still free it right away

[11:54] <dalek> MoarVM: in a single-threaded program.

[11:54] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/113c3b57fb

[11:55] <timotimo> that doesn't sound like terribly much overhead for the multi-threaded case

[11:55] <jnthn> It ain't too bad

[12:09] <FROGGS> jnthn: wow, such comment

[12:09] <FROGGS> :o)

[12:09] <timotimo> the hairy problems deserve big commit messages

[12:15] *** [Coke] joined
[12:16] *** kjs__ joined
[12:28] <arnsholt> Yeah, if the time spent hacking vs. lines of code changed is very weird, long commit messages are definitely in order

[12:29] <timotimo> coders shall now be paid by lines-of-commit-message

[12:40] <jnthn> Sadly, any payment scheme is gameable :)

[12:43] <timotimo> yes

[12:43] <timotimo> i mean

[12:43] <timotimo> git commit -m $(yes)

[12:55] *** Ven joined
[13:00] *** brrt joined
[13:12] *** colomon joined
[13:14] *** brrt joined
[13:24] *** dalek joined
[13:40] *** brrt joined
[13:52] *** Ven joined
[14:24] *** Ven joined
[14:25] *** brrt joined
[14:55] *** kjs__ joined
[15:09] *** tokuhiro_ joined
[15:14] *** Ven joined
[16:00] *** FROGGS[mobile] joined
[16:11] *** tokuhiro_ joined
[16:17] <dalek> MoarVM: 3d63248 | (Pawel Murias)++ | src/strings/ops.c:

[16:17] <dalek> MoarVM: Make nqp::findcclass behave as on the jvm.

[16:17] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3d63248017

[16:17] <dalek> MoarVM: d17524c | (Pawel Murias)++ | src/strings/ops.c:

[16:17] <dalek> MoarVM: Make findnotcclass behave as on the jvm.

[16:17] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d17524c9b4

[16:17] <dalek> MoarVM: ce87c97 | jnthn++ | src/strings/ops.c:

[16:17] <dalek> MoarVM: Merge pull request #259 from pmurias/findcclass-fix

[16:17] <dalek> MoarVM:

[16:17] <dalek> MoarVM: Make the nqp::findcclass na nqp::findnotclass behave the same as on the jvm.

[16:17] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ce87c9792e

[16:42] *** kjs__ joined
[16:57] *** vendethiel joined
[17:12] *** kjs__ joined
[18:06] *** kjs__ joined
[18:12] *** tokuhiro_ joined
[18:19] *** lizmat joined
[18:21] *** FROGGS joined
[18:23] *** tokuhiro_ joined
[18:58] *** kjs__ joined
[19:25] *** tokuhiro_ joined
[19:48] *** lizmat joined
[19:57] *** Peter_R joined
[20:05] *** kjs__ joined
[20:09] *** brrt joined
[20:31] *** colomon joined
[20:37] <brrt> oh, have i a wonderful nugget of surprise for y'all

[20:37] <brrt> you know how rsp encoding is weird?

[20:38] <brrt> rbp encoding is *also weird*

[20:38] <timotimo> is that so!

[20:38] <brrt> but differently

[20:38] <brrt> yes

[20:38] <brrt> well, bit less weird actually

[20:39] <brrt> but still

[20:40] <timotimo> *sigh*

[20:40] * brrt is going to blog about this for sure

[20:40] <brrt> and expose the evil to the world!

[20:42] <timotimo> i'm just glad we have you to make it all work out in the end :)

[20:43] <brrt> how long can the end wait?

[20:43] <timotimo> hah

[20:44] <brrt> i think i'm going to claim TimToady's defence. doesn't matter if it took N years if N years lie in the past :-)

[20:45] <brrt> and, at some point in the future, it will all be past

[20:49] <timotimo> ouch! :)

[20:50] <brrt> oh, lord, what botched corner of x86 have i opened up now

[20:53] <brrt> apparantly,  0044 is the secret code for 'just use the rsp register damnit'

[20:53] <brrt> octal, that is

[20:58] <brrt> and any other way lies madness

[20:59] <timotimo> where lies mundaneness?

[21:17] <brrt> a sane ISA like ehm.... i dunno

[21:17] <brrt> some hypothetical one i presume

[21:19] <brrt> yay, i brokened it

[21:21] <timotimo> hm

[21:21] <timotimo> explain that to the intel engineers that'll show up at your doorstep every second now

[21:21] <timotimo> you broke their ISA!

[21:21] <brrt> i broke dynasm :-)

[21:21] <brrt> intel guys can sleep in peace

[21:21] <psch> ^5 for breaking things!

[21:22] <psch> i'm more breaking myself with that ConcurrentModificationException, which means it's bed time

[21:22] <lizmat> good night, psch

[21:23] <timotimo> gnite psch

[21:23] <timotimo> i hope you'll have more luck tomorrow!

[21:24] *** colomon joined
[21:24] <brrt> good night psch

[21:24] <brrt> (ConcurrentModificationException implies java?)

[21:24] <timotimo> yup

[21:25] * brrt sometimes feels like throwing all of this to the wind and programming sanely and boringly in java or javascript or ruby or whatever is currently fashionable

[21:25] <brrt> then i renember i'll never be truly sane

[21:26] <timotimo> mhh

[21:26] *** tokuhiro_ joined
[21:29] <brrt> the thing is, i can kind of cargo-cult the 'rsp trick', but it's absolutely puzzling why it works

[21:29] <timotimo> mhm

[21:30] <brrt> it is not, so to speak, in the table

[21:37] *** kjs__ joined
[21:37] <brrt> hmm

[21:37] <brrt> or maybe it is

[21:41] <timotimo> aaaand he's gone :)

[21:41] <timotimo> good night and see you tomorrow or so :)

[23:28] *** tokuhiro_ joined
