[02:25] *** colomon joined
[02:49] *** ilbot3 joined
[03:37] *** ggoebel111111114 joined
[07:32] *** kjs_ joined
[07:57] *** FROGGS joined
[08:04] *** zakharyas joined
[08:09] *** Ven joined
[08:11] *** rurban joined
[08:37] <jnthn> timotimo++

[09:01] <dalek> moarvm.org: 0245d95 | jnthn++ | / (4 files):

[09:01] <dalek> moarvm.org: Site updates for 2015.02 release.

[09:01] <dalek> moarvm.org: review: https://github.com/MoarVM/moarvm.org/commit/0245d95bb6

[10:03] *** Ven joined
[10:55] *** Ven joined
[12:22] *** Ven joined
[13:39] *** vendethiel- joined
[14:26] *** Ven joined
[15:21] *** Ven joined
[17:03] *** zakharyas joined
[17:17] *** Ven joined
[17:28] *** camelia joined
[17:36] *** camelia joined
[18:26] *** FROGGS joined
[19:30] <dalek> MoarVM/cpp: e929224 | timotimo++ | src/6model/reprs/P6opaque.c:

[19:30] <dalek> MoarVM/cpp: re-enable usage decrements for get/bindattr in P6opaque

[19:30] <dalek> MoarVM/cpp: review: https://github.com/MoarVM/MoarVM/commit/e929224363

[19:30] <dalek> MoarVM/cpp: 4d546bc | timotimo++ | src/spesh/optimize.c:

[19:30] <dalek> MoarVM/cpp: currently, set removal hurts more than it helps.

[19:31] <jnthn> oh noahs

[19:31] *** dalek joined
[19:31] <FROGGS> jnthn: because of dalek or because of C++?

[19:31] <FROGGS> :o)

[19:31] *** tgt joined
[19:32] <jnthn> Either will do :)

[19:32] <jnthn> But given the flood reference, clearly dalek :P

[19:32] <FROGGS> jnthn: btw, can you build dlls with C#? and, what'r there calling convention?

[19:32] <FROGGS> "noah"s -.-

[19:33] <FROGGS> what's*

[19:33] <FROGGS> their*

[19:34] <jnthn> FROGGS: You can build DLLs, *but* they're just a .dll file wrapper around CLR bytecode

[19:34] <jnthn> FROGGS: And similar with .exe files; they just contain enough to load the CLR to process the bytecode within the file

[19:34] <FROGGS> ahh

[19:35] <jnthn> FROGGS: A DLL can choose to expose itself as a COM interface

[19:36] <FROGGS> okay, I scratch that idea then :o)

[19:36] <jnthn> FROGGS: Otherwise, best bet is to embed the CLR

[19:36] <jnthn> FROGGS: And we should be able to do that using NativeCall

[19:36] <FROGGS> well, at some point we will have a Win32 module to do COM stuff I guess

[19:36] <FROGGS> ohh, interesting

[19:36] <jnthn> Aye

[19:38] <timotimo> not to be a downer, but how are we supposed to compete with the startup memory usage of other popular interpreters? :\

[19:41] <jnthn> timotimo: Partly by continuing to get it down from where it is now. Partly by realizing that memory is, in many caes, rather more abundant now than it has been in the past. :)

[19:42] <timotimo> well, that may be

[19:43] <japhb> Given a choice of where to put tuits, I'd much rather have them on "efficient use of memory for large problem sizes" and "faster startup for real code" (not just for empty benchmarks), than I would for "tiny startup memory for trivial programs"

[19:43] <timotimo> i won't be satisfied until we get below 50 megabytes for a simple "say 1"

[19:43] <japhb> That's a good goal though, aye.

[19:44] <jnthn> timotimo: I think that's achievable.

[19:44] <timotimo> good :)

[20:14] * FROGGS still wonder how he translates this signature to Perl 6: virtual long ConstIntPtr(const int *i) {

[20:16] <FROGGS> the mangled name for this param is PKi (_P_ointer, _K_onst, _i_nt)

[20:17] <jnthn> int $i is rw is cppconst

[20:17] <jnthn> Or mebbe cpp-const

[20:18] <FROGGS> could also be: OpaquePointer[int] $i is cpp-const or so, right?

[20:19] <jnthn> Yeah, for now I guess

[20:19] <jnthn> CArray[int] is the usual hack at the moment

[20:19] <FROGGS> though, I have a gut feeling that there might be a better way to say 'const' without using a trait

[20:19] <jnthn> Once I get the native-ref stuff landed though, I plan to work on "is rw" for nativecall

[20:20] <jnthn> It'll really want to see int as the type for that, though...

[20:20] *** rurban joined
[20:20] <FROGGS> ahh, k

[20:20] <FROGGS> well, it makes it easy to pass integers, yes

[20:20] <jnthn> Pointes to integers

[20:20] <jnthn> e.g.

[20:21] <FROGGS> and when somebody needs to fiddle with pointers, he/she can cast them

[20:21] <jnthn> my int $i; some-native-thing($i); # and afterwards $i is updated

[20:21] <FROGGS> right

[20:21] * jnthn did some figuring out of NFG in the pub tonight

[20:21] <FROGGS> nice :o)

[20:25] <FROGGS> Perl 6 is soooo awesome :o)

[20:25] <FROGGS> $ perl6-m -e 'sub foo($a is rw) { }; say &foo.signature.params[0].rw'

[20:25] <FROGGS> True

[20:25] <jnthn> :)

[20:26] * jnthn will get back to native-ref hacking next week :)

[20:32] <FROGGS> when we pass a Str, is 'is rw' implied?

[20:32] <FROGGS> or does that decide if we strdup somewhere?

[20:42] <FROGGS> I am slightly surprised that this works:

[20:42] <FROGGS> is $d2.?ConstIntPtr(13), 13, 'name mangling of parameter `const int *`';

[20:42] <FROGGS> (currently I generate the symbol incorrectly, so the symbol is not found)

[20:43] <FROGGS> so instead of aborting the test script, I get a single test fail... nice

[20:55] <FROGGS> ohh, no, it doesnt... missing a symbol is fatal

[23:47] <dalek> MoarVM: 953c022 | coke++ | macports/Portfile:

[23:47] <dalek> MoarVM: Add a macports Portfile

[23:47] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/953c02206f

[23:53] <dalek> MoarVM: c462d90 | coke++ | / (2 files):

[23:53] <dalek> MoarVM: delint Portfile, move to correct location

[23:53] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c462d90f14

[23:59] <[Coke]> ok, submitted the Portfile to macports for inclusion.
