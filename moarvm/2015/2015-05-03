[00:05] *** vendethiel joined
[01:19] *** raiph joined
[01:20] <raiph> http://stefan-marr.de/papers/pldi-marr-et-al-zero-overhead-metaprogramming/

[01:21] <raiph> "Dispatch chains are a generalization of polymorphic inline caches ... and allow optimization of metaprogramming at the virtual machine level."

[01:22] *** Ven joined
[01:48] *** ilbot3 joined
[02:02] *** Ven joined
[02:06] *** vendethiel joined
[03:08] *** vendethiel joined
[08:21] *** Ven joined
[08:43] *** mj41 joined
[09:34] *** Ven joined
[10:36] <jnthn> Yay, valgrind spots the same explode ASAN did too

[11:00] *** ggoebel joined
[11:02] <dalek> MoarVM: 2d09987 | jnthn++ | / (9 files):

[11:02] <dalek> MoarVM: Fix use-after-free if hash iter block frees nodes.

[11:02] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2d0998755f

[11:06] <jnthn> yay, clean valgrind is clean

[11:12] <jnthn> Urgh...but loads of fail in spectest

[11:14] <arnsholt> Code depending on hash ordering perhaps?

[11:15] <jnthn> No, SEGVs...

[11:21] <arnsholt> Oh. Not hash ordering then, I agree =)

[12:15] <jnthn> Something very strange/confusing.

[12:28] *** vendethiel joined
[12:30] <dalek> MoarVM: fcf977f | jnthn++ | 3rdparty/uthash.h:

[12:30] <dalek> MoarVM: Be consistent with paren-ing in macro.

[12:30] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/fcf977fb11

[12:30] <dalek> MoarVM: f323d27 | jnthn++ | src/6model/reprs/MVMHash. (2 files):

[12:30] <dalek> MoarVM: Eliminate a single-use macro.

[12:30] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/f323d27331

[12:51] <dalek> MoarVM: 0c052ea | jnthn++ | 3rdparty/uthash.h:

[12:51] <dalek> MoarVM: Correct head replacement logic.

[12:51] <dalek> MoarVM:

[12:51] <dalek> MoarVM: Apparently, I need my head logic replaced... If we have a hash with

[12:51] <dalek> MoarVM: only one bucket filled with two things in the same bucket, we of

[12:51] <dalek> MoarVM: course need to consider both items in the bucket when seeking a

[12:51] <dalek> MoarVM: replacement head if the head gets deleted.

[12:51] <dalek> MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0c052ea90a

[12:52] <jnthn> That took altogether too long to find...

[12:52] <nwc10> OK, so I should test *that* one? :-)

[12:52] <jnthn> Please. Valgrind is quiet on the spectests I've thrown at it that exploded before.

[12:52] <jnthn> ut_hash is horrible to debug since it's a load of macros

[12:52] <jnthn> They are in serious danger of being replaced by static inlines. :)

[12:53] <nwc10> I was wondering whether it's viable/time to replace it with

[12:53] <nwc10> what you said

[12:53] <jnthn> Not *trivially*, but should be possible

[12:57] <nwc10> jnthn: was that a bug in your changes/additions to UThash, or the original code?

[12:58] *** rurban joined
[13:00] <jnthn> nwc10: My changes

[13:00] <jnthn> nwc10: It had logic that solved the same problem, but it used the addition order chain, which I was getting rid of

[13:01] <nwc10> aha, that explains a lot

[13:11] <jnthn> Anyway, will leave you to do the ASAN run and have a (later than intended) lunch now I've debuggered that issue...

[13:18] <nwc10> t/spec/S17-promise/allof.t and t/spec/integration/advent2013-day14.t appear to be flapping under ASAN, but that's not new news.

[13:18] <nwc10> everything else passes

[13:18] <nwc10> "We have normality. I repeat, we have normality. Anything you still can't cope with is therefore your own problem."

[13:18] <nwc10> jnthn++ # well earned lunch

[13:33] *** rurban joined
[13:40] *** mj41 joined
[13:53] *** rurban joined
[13:57] *** vendethiel joined
[14:33] *** rurban joined
[14:33] *** rurban left
[15:43] *** zakharyas joined
[16:08] *** rurban joined
[18:04] *** vendethiel joined
[19:00] *** vendethiel- joined
[19:14] *** FROGGS[mobile] joined
[19:22] *** zakharyas joined
[21:28] *** vendethiel joined
[21:34] *** TimToady joined
[23:04] <timotimo> i am going to put valgrind annotations into the allocators we have so that helgrind and drd output more sensible descriptions of the allocated chunks

[23:05] <timotimo> we *could* introduce redzone support into our allocators, too

[23:12] *** vendethiel joined
