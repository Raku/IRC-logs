[00:08] *** reportable6 left
[00:08] *** reportable6 joined
[03:04] *** frost joined
[03:16] *** frost left
[03:35] *** frost joined
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:11] <Nicholas> good *, *
[06:12] <japhb> Good *, Nicholas 
[06:13] <japhb> .oO( Star Nicholas ?)
[06:38] *** rba left
[06:39] *** rba joined
[06:50] *** SmokeMachine left
[06:50] *** RakuIRCLogger left
[06:50] *** crystalfrost[m] left
[06:51] *** SmokeMachine joined
[06:54] *** crystalfrost[m] joined
[06:55] *** RakuIRCLogger left
[06:55] *** RakuIRCLogger joined
[06:59] *** RakuIRCLogger left
[06:59] *** RakuIRCLogger joined
[07:39] *** sena_kun joined
[08:39] *** RakuIRCLogger left
[08:39] *** RakuIRCLogger joined
[08:57] <timo> good star nicholas
[09:22] *** sena_kun left
[09:40] *** discord-raku-bot left
[09:40] *** discord-raku-bot joined
[10:04] *** sena_kun joined
[10:30] *** gfldex left
[10:30] *** discord-raku-bot left
[11:40] *** benchable6 left
[11:40] *** coverable6 left
[11:40] *** greppable6 left
[11:40] *** sourceable6 left
[11:40] *** releasable6 left
[11:40] *** shareable6 left
[11:40] *** reportable6 left
[11:40] *** bloatable6 left
[11:40] *** quotable6 left
[11:40] *** nativecallable6 left
[11:40] *** notable6 left
[11:40] *** unicodable6 left
[11:40] *** linkable6 left
[11:40] *** evalable6 left
[11:40] *** bisectable6 left
[11:40] *** committable6 left
[11:40] *** statisfiable6 left
[11:40] *** tellable6 left
[11:41] *** nativecallable6 joined
[11:41] *** coverable6 joined
[11:41] *** bisectable6 joined
[11:41] *** releasable6 joined
[11:41] *** shareable6 joined
[11:41] *** committable6 joined
[11:41] *** benchable6 joined
[11:42] *** unicodable6 joined
[11:42] *** quotable6 joined
[11:42] *** tellable6 joined
[11:42] *** evalable6 joined
[11:42] *** reportable6 joined
[11:42] *** statisfiable6 joined
[11:42] *** linkable6 joined
[11:43] *** bloatable6 joined
[11:43] *** notable6 joined
[11:43] *** sourceable6 joined
[11:43] *** greppable6 joined
[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[13:09] *** frost left
[13:09] *** vrurg left
[13:10] *** vrurg joined
[13:30] <timo> i was just tripped up when attempting to make a reproduced build of a program in go because apparently a release and its corresponding commit have disappeared from a github repository
[13:31] <timo> something like cpan would have been great here ...
[13:34] <Nicholas> I found this at ex-$ork - `go get` (IIRC) is great. Until the thing you are building against vanishes.
[13:34] <Nicholas> If we replace the Internet with a monorepository, that should fix the problem.
[13:35] <Nicholas> (who needs branches. Or anything else complex. When you have a monorepository)
[13:35] <timo> back two svn
[13:44] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/08/01/2022-31-justintimerelease/
[14:56] *** [Coke]_ joined
[14:58] *** [Coke] left
[15:27] <lizmat> Q: my uint $a = 42; $a == $a   # should that dispatch to the int/int candidate or the Int/Int candidate ?
[15:28] <lizmat> or is there a uint/uint candidate missing for == ?
[15:28] <lizmat> currently it dispatched to the Int/Int candidate it seems
[15:43] <japhb> Yeah, I think we're missing uint candidates all over the place.  uint shouldn't dispatch to int, because uint isn't a subset of int.
[15:46] <jnthn> Int/Int is at least safe because there's no range problem, but agree it sounds like unit/unit candidate is missing
[16:41] *** discord-raku-bot joined
[16:58] *** [Coke]_ is now known as [Coke]
[17:18] *** sena_kun left
[17:53] <nine> Keep in mind that the goal for my uint work was "get to a stable situation that handles uints more correctly" and not "get uint support 100 % finished"
[17:53] <nine> So yes, a lot of optimization opportunities still open
[17:54] *** sena_kun joined
[18:06] *** reportable6 left
[18:07] *** reportable6 joined
[18:44] <lizmat> ok, I'll be adding some candidates then
[18:47] <lizmat> m: my int $b; multi sub a(int $a, int $b) { dd };  multi sub a(Int $a, Int $b) { dd }; a $b, 0
[18:47] <camelia> rakudo-moar 556bf98da: OUTPUT: «sub a(Int $a, Int $b)␤»
[18:47] <lizmat> that this is selecting the Int Int candidate, also seems meh to me...
[18:48] <lizmat> is that a static optimisation opportunity ?
[18:57] *** sena_kun left
[19:00] *** sena_kun joined
[19:18] <lizmat> https://github.com/rakudo/rakudo/commit/47f9b2860b
[19:49] <lizmat> m: my int @a = ^10; my uint $b = 5; @a[$b] for ^10000000; say now - ENTER now
[19:49] <camelia> rakudo-moar 47f9b2860: OUTPUT: «3.07404725␤»
[19:49] <lizmat> m: my int @a = ^10; my int $b = 5; @a[$b] for ^10000000; say now - ENTER now
[19:49] <camelia> rakudo-moar 47f9b2860: OUTPUT: «1.759042641␤»
[19:49] <lizmat> spesh reports this for the uint case:
[19:49] <lizmat>     postcircumfix:<[ ]> BB(8097, 88 bytes) -> BB(1):
[19:49] <lizmat>       target has a :noinline instruction - ins: param_rp_o
[19:50] <lizmat> int and Int cases for the index *are* inlined
[19:57] <timo> BB 9097?
[20:00] <lizmat> raku -MSIL -e 'my int @a = ^10; my uint $b = 5; @a[$b] for ^100000'
[20:05] <timo> how is it so hueg
[20:25] <lizmat> I haz no idea
[20:26] <lizmat> in the native int $b version, it's postcircumfix:<[ ]> BB(8098, 222 bytes) -> BB(1)
[20:26] <timo> do you see a bb with that number in your spesh log?
[20:27] <lizmat> I'm using SIL, I'm not actually looking at the spesh log itself
[20:27] <lizmat> I'm letting SIL do that :-)
[20:28] <timo> i know
[20:30] <lizmat> ok, so I added a native int candidate, and that also doesn't get inlined
[20:30] <lizmat> so it's related to nativeness of the $pos
[20:32] <lizmat> timo: I'm not understanding where the:
[20:32] <lizmat>     postcircumfix:<[ ]> BB(8097, 76 bytes) -> BB(1):
[20:32] <lizmat>       target has a :noinline instruction - ins: param_rp_o
[20:33] <lizmat> comes from.    Does that apply to *all* native positional arguments ?
[20:33] <lizmat> if not, why does it apply here ?
[20:33] <timo> sorry what exactly are you pointing at?
[20:34] <lizmat> the reason for not inlining
[20:34] <lizmat> target has a :noinline instruction - ins: param_rp_o
[20:34] <timo> param_rp_o, especially that it doesn't have sp_, is a sign for arg spesh not having worked
[20:37] <timo> it's the same thing i looked at just the other day
[20:39] <timo> look where i asked about hllboxtype_u on the 18th of july
[20:42] <lizmat> but it's the same for native int
[20:43] <timo> oh
[20:43] <timo> that's unfortunately
[20:44] <lizmat> m: my int @a = ^10; my uint $b = 5; @a[$b] for ^10000000; say now - ENTER now
[20:44] <camelia> rakudo-moar 47f9b2860: OUTPUT: «2.870941504␤»
[20:44] <lizmat> m: my int @a = ^10; my int $b = 5; @a[$b] for ^10000000; say now - ENTER now
[20:44] <camelia> rakudo-moar 47f9b2860: OUTPUT: «1.789156957␤»
[20:44] <lizmat> m: my int @a = ^10; my $b = 5; @a[$b] for ^10000000; say now - ENTER now
[20:44] <camelia> rakudo-moar 47f9b2860: OUTPUT: «0.281685348␤»
[20:44] <lizmat> there's a *lot* to be gained here
[20:44] <lizmat> feels to me
[20:46] <lizmat> or we give up for now, and remove all of the native int/uint candidates
[20:49] <timo> i see postcircumfix:<[ ]> be inlined into '' (-e:1) here
[20:49] <timo> but the 8040 i see here isn't a bb id, it's a cuuid maybe :ed
[20:49] <timo> :D
[20:50] <lizmat> ?
[20:51] <lizmat> you mean spesh is cpnfused ?
[20:51] <timo> no, SIL or me
[20:51] <lizmat> I think SIL takes those lines from the log verbatim
[20:52] <timo> the reason why it can't inline '' (1) is there's a getlexref_i in it
[20:52] <lizmat> you mean: nqp::atposref_i ?
[20:52] <timo> no
[20:52] <lizmat> ah, the reference to $pos from the signature ?
[20:53] <timo> getlexref_i is what you get when you compile a qast::var of a lexical with :return(int) and scope(ref) or something like that
[20:53] <timo> it does getlexref_i on $b
[20:55] <lizmat> ok, so this issue applies to *all* cases where we have a native in the signature and it gets called with a native
[20:56] <timo> we immediately decont_i that lexref and never use the register again, but we do put the lexref_i result in an sp_resumption
[20:57] <timo> i'm not sure what we need to do in order to prove whether the resumption can be elided
[20:57] <timo> perhaps it is possible with more-pea to move the creation of the lexref to when we deoptimize and immediately getlex_i in that spot until then
[20:58] * lizmat neither  :-)
[21:38] *** sena_kun left
[21:42] *** jnthn left
[22:36] *** linkable6 left
[22:38] *** linkable6 joined
[23:17] *** jnthn joined
