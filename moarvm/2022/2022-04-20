[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[01:37] *** statisfiable6 left
[01:37] *** statisfiable6 joined
[01:37] *** tellable6 left
[01:37] *** tellable6 joined
[01:37] *** bartolin left
[01:37] *** bartolin joined
[01:40] *** frost joined
[01:42] *** linkable6 left
[01:42] *** statisfiable6 left
[01:42] *** sourceable6 left
[01:42] *** releasable6 left
[01:42] *** tellable6 left
[01:42] *** evalable6 left
[01:42] *** coverable6 left
[01:42] *** quotable6 left
[01:42] *** kjp left
[01:42] *** sourceable6 joined
[01:42] *** bisectable6 left
[01:43] *** kjp joined
[01:44] *** statisfiable6 joined
[02:07] *** sourceable6 left
[02:07] *** greppable6 left
[02:07] *** statisfiable6 left
[02:07] *** bartolin left
[02:07] *** statisfiable6 joined
[02:10] *** statisfiable6 left
[02:25] *** bartolin joined
[02:32] *** linkable6 joined
[02:39] *** coverable6 joined
[02:40] *** tellable6 joined
[02:40] *** releasable6 joined
[02:40] *** bisectable6 joined
[02:40] *** evalable6 joined
[02:40] *** quotable6 joined
[03:01] *** greppable6 joined
[03:02] *** sourceable6 joined
[03:08] *** statisfiable6 joined
[05:06] <Nicholas> good *. *

[05:33] <Nicholas> strange bright thing in sky

[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[10:21] <nine> I think I've seen that before

[10:24] <nine> vrurg: I fail to see the difference in need for exception handling between low level locking hash and a high level implementation

[10:27] <jnthnwrthngtn> The more general point is that we've already been down the "implement it in the VM, it'll be faster" and we already un-did a lot of that because it prevents spesh doing its job

[10:28] <jnthnwrthngtn> Not to mention that writing stuff in HLL eliminates entire classes of bugs (can't get GC invariants wrong, for example)

[10:34] <MasterDuke> i tried turning https://github.com/rakudo/rakudo/pull/4891/files#diff-825a09f6993c1c5393a98e85d638a3e21cf40b650b44af0592519fdcaa296f32R3344 directly into a call to `mul_I`, by making it `return QAST::Op.new(:op('mul_I'), $op[0], $op[0], QAST::WVal.new(:value($!symbols.find_in_setting('Int'))));`, but that just causes `P6opaque: get_boxed_ref could

[10:34] <MasterDuke> not unbox for the representation 'P6bigint' of type Scalar` at runtime

[10:35] <MasterDuke> and i haven't figured out why yet

[10:38] <jnthnwrthngtn> Missing decont

[10:39] <MasterDuke> oh...right...doh

[10:46] <MasterDuke> hm, `nqp::decont($!symbols.find_in_setting('Int'))` still gives the same error. or you mean gen one?

[10:50] *** Altai-man joined
[10:56] <jnthnwrthngtn> The $op[0]

[10:56] <nine> You need to decont $op[0] and/or $op[1]

[11:12] <MasterDuke> doh (again)

[11:16] <MasterDuke> huh. same

[11:42] *** wybpip[m] joined
[11:42] *** wybpip[m] left
[12:06] *** reportable6 left
[12:07] *** reportable6 joined
[12:10] <lizmat> it just struck me that t/spec/S12-construction/destruction.t has been flapping a lot for the past 10 days or so

[12:10] <lizmat> where the test is that a child DESTROY should be executed before a parent DESTROY

[12:31] <nine> more like months

[12:41] <lizmat> ah...  ok... :-(

[13:07] *** rba left
[13:07] *** rba joined
[13:28] *** [Coke]_ is now known as [Coke]

[14:19] <MasterDuke> hm. i now have the mul_I generation working, but it obviously fails if the QAST::Var is not actually an Int. `nqp::istype($op[0].value, $!symbols.find_in_setting("Int"))` doesn't work. i'm obviously thinking even slower than usual today, what am i missing?

[14:42] <nine> What do you expect to find in $op[0].value?

[14:54] * MasterDuke wants to plead the 5th

[14:55] <Nicholas> chocolate? coffee?

[14:55] <Nicholas> (this answers can be used for either question)

[14:55] <Nicholas> these. pesky fingers

[14:57] <nine> MasterDuke: you'll want to generate code that does the type check on that value (just like you need to do for the decont)

[15:43] <MasterDuke> ugh. i'll probably just stick with genning the &infix:<*> then, that's a bit simpler

[15:44] <MasterDuke> though i do need to add some more checks, because currently in the optimizer `2.1 == 2` is true

[17:02] *** tailgate joined
[17:02] *** Util left
[17:02] *** Util joined
[17:17] *** Altai-man left
[17:53] *** sena_kun left
[17:58] *** frost left
[18:01] *** sena_kun joined
[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[20:03] *** sena_kun left
[20:05] *** sena_kun joined
[22:07] *** vrurg left
[22:15] *** vrurg joined
[22:55] *** vrurg left
[23:23] *** vrurg joined
