[00:07] *** reportable6 left
[00:07] *** reportable6 joined
[00:10] *** kjp left
[00:43] *** frost joined
[02:40] *** nativecallable6 left
[02:40] *** linkable6 left
[02:40] *** benchable6 left
[02:40] *** releasable6 left
[02:40] *** committable6 left
[02:40] *** unicodable6 left
[02:40] *** quotable6 left
[02:40] *** coverable6 left
[02:40] *** reportable6 left
[02:40] *** shareable6 left
[02:40] *** bisectable6 left
[02:40] *** evalable6 left
[02:40] *** notable6 left
[02:40] *** statisfiable6 left
[02:40] *** greppable6 left
[02:40] *** tellable6 left
[02:40] *** bloatable6 left
[02:40] *** sourceable6 left
[02:40] *** reportable6 joined
[02:40] *** bloatable6 joined
[02:41] *** sourceable6 joined
[02:41] *** notable6 joined
[02:41] *** bisectable6 joined
[02:41] *** statisfiable6 joined
[02:41] *** shareable6 joined
[02:41] *** releasable6 joined
[02:41] *** coverable6 joined
[02:41] *** unicodable6 joined
[02:41] *** tellable6 joined
[02:41] *** nativecallable6 joined
[02:41] *** evalable6 joined
[02:42] *** quotable6 joined
[02:42] *** greppable6 joined
[02:42] *** linkable6 joined
[02:42] *** benchable6 joined
[02:43] *** committable6 joined
[06:06] *** reportable6 left
[06:08] *** reportable6 joined
[06:20] *** frost left
[08:13] *** frost joined
[10:08] *** sena_kun left
[10:10] *** sena_kun joined
[11:10] *** frost left
[11:57] *** discord-raku-bot left
[11:57] *** discord-raku-bot joined
[12:06] *** reportable6 left
[12:07] *** reportable6 joined
[12:56] <nine> I've made some progress on my weird WVal confusion issue. Somehow the block loses the sc and idx from the point we add it to the SC to when the WVal is processed by the QAST compiler

[13:14] *** discord-raku-bot left
[13:14] *** discord-raku-bot joined
[13:15] <nine> Aw, man.... nqp::scsetcode resets the code object's sc

[13:19] <lizmat> I guess that is generally / was a good thing ?

[13:24] *** discord-raku-bot left
[13:24] *** discord-raku-bot joined
[13:29] <vrurg_> BTW, is there a particular reason why nqp::getlexdyn (getdynlex) is marked `noinline`? It just walks a frame stack and should be ok if its own frame is inlined.

[13:31] <vrurg_> Would it be inlinable then pulling it out of &DYNAMIC and only falling back to the sub if no symbol is found could make a big difference.

[13:36] <nine> It may be inlinable thanks to the frame walker

[13:45] <vrurg_> nine: getdynlex           w(obj) r(str) :pure :noinline :useshll

[13:45] <vrurg_> Perhaps it worth correcting?

[13:46] <nine> worth a try, yes

[13:46] <vrurg_> Ok, I would test it on my side. 

[13:46] *** vrurg_ is now known as vrurg

[13:48] <nine> The hard part is making sure your test would actually break if there was an inlining issue after all

[13:50] <vrurg> No slightest idea how to do it. Though I was about to do a little benchmarking on using dynamics. There are good chances for inlining the inner sub or, at least, its loop body.

[13:55] <vrurg> Just removing noinline doesn't work. 'MVMArray: Can't pop from an empty array' while compiling rakudo.

[13:57] <vrurg> NQP doesn't build too. :(

[14:29] *** Kaipei joined
[14:33] *** Kaiepi left
[15:02] *** Kaipei is now known as Kaiepi

[15:55] *** childlikempress joined
[15:56] *** moon-child left
[18:04] *** CaCode joined
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[19:10] *** evalable6 left
[19:10] *** linkable6 left
[19:11] *** sena_kun left
[19:12] *** evalable6 joined
[19:13] *** linkable6 joined
[19:23] *** sena_kun joined
[19:27] *** CaCode left
[21:36] *** childlikempress is now known as moon-child

[22:06] *** Altai-man joined
[22:08] *** sena_kun left
