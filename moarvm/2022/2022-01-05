[00:07] *** reportable6 left
[01:07] *** linkable6 left
[01:07] *** evalable6 left
[01:07] *** bisectable6 left
[01:10] *** reportable6 joined
[01:10] *** bisectable6 joined
[02:08] *** evalable6 joined
[03:41] *** frost joined
[06:07] *** reportable6 left
[06:10] *** linkable6 joined
[07:10] *** linkable6 left
[07:10] *** bisectable6 left
[07:10] *** sourceable6 left
[07:10] *** greppable6 left
[07:10] *** nativecallable6 left
[07:10] *** releasable6 left
[07:10] *** notable6 left
[07:10] *** unicodable6 left
[07:10] *** shareable6 left
[07:10] *** committable6 left
[07:10] *** tellable6 left
[07:10] *** coverable6 left
[07:10] *** evalable6 left
[07:10] *** squashable6 left
[07:10] *** benchable6 left
[07:10] *** statisfiable6 left
[07:10] *** bloatable6 left
[07:10] *** quotable6 left
[07:11] *** benchable6 joined
[07:11] *** greppable6 joined
[07:11] *** linkable6 joined
[07:12] *** tellable6 joined
[07:12] *** bisectable6 joined
[07:12] *** bloatable6 joined
[07:13] *** notable6 joined
[07:13] *** shareable6 joined
[07:13] *** sourceable6 joined
[07:14] *** unicodable6 joined
[08:08] *** reportable6 joined
[08:11] *** squashable6 joined
[08:11] *** statisfiable6 joined
[08:13] *** releasable6 joined
[08:13] *** evalable6 joined
[08:13] *** nativecallable6 joined
[08:44] <MasterDuke> m: dd Array[Str]("a", "b", "c")
[08:44] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «Array[Str].new("a", "b", "c")␤»
[08:45] <MasterDuke> jnthnwrthngtn: why/how does ^^^ work? to me it looks like either a C-style cast or a Python-ish object instantiation
[08:48] <timo> MasterDuke: coverage log says it goes via List.pm6's method CALL-ME, which calles self.new on the argument capture
[08:50] <MasterDuke> huh. do we have a lot of other types that do that?
[08:51] <timo> what exactly, like Int(99)?
[08:51] <timo> m: say Int(99.0)
[08:51] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «99␤»
[08:51] <timo> m: say Int(99.1)
[08:51] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «99␤»
[08:51] <timo> m: dd Str(123)
[08:51] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «"123"␤»
[08:51] <timo> m: dd Hash("a", "b", "c", "d")
[08:51] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «Has % = {:a("b"), :c("d")}␤»
[08:52] <timo> "Has" :D
[08:52] <nine> MasterDuke: https://github.com/rakudo/rakudo/commit/902d590511a2e034fa6885ea54f17c8e259306a0
[08:52] <MasterDuke> huh
[08:53] <MasterDuke> i don't know if it's because i haven't finished my first cup of coffee yet, but i'm still surprised
[08:53] <nine> same here, despite the coffee
[09:03] <MasterDuke> m: dd Array("a", "b"); dd Hash("a", "b")  #  lizmat two oddities. https://github.com/rakudo/rakudo/commit/4960802167dd63eda69b9c33899edd0503e2d3e2 caused the "Has", but i'm not sure why the Array one has 'element' instead of '@'
[09:03] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «Array element = ["a", "b"]␤Has % = {:a("b")}␤»
[09:06] <MasterDuke> 'element' comes from here maybe https://github.com/rakudo/rakudo/blob/master/src/Perl6/bootstrap.c/BOOTSTRAP.nqp#L1870-L1874
[09:11] *** committable6 joined
[09:12] *** coverable6 joined
[09:13] *** quotable6 joined
[09:41] <MasterDuke> in the end, getting mimalloc integrated wasn't too terrible. anybody have any thoughts on https://github.com/MoarVM/MoarVM/pull/1634 ?
[09:44] <moon-child> MasterDuke: might be good to make MVM_strdup instead of going to mi_ versions, so any future changes don't have to track down where those are used
[09:46] <moon-child> (and for those, would maybe straight str(n)len -> mvm_malloc+memcpy rather than calling mi_strdup, to further reduce cognitive overhead of a future change.  That's not going to be any different from how mi implements it anyway)
[09:46] <MasterDuke> hm, but future changes should be easier, since e.g., switching away from mimalloc would show up the use of mi_* as a compile-time error
[09:46] <moon-child> good point
[09:46] <moon-child> but still requires effort at all, vs _just_ swapping out malloc/calloc/realloc/free
[09:50] <nine> Yeah, we may as well go all the way and wrap all mimalloc functions
[09:50] <nine> Or #define it in that case
[09:52] <MasterDuke> simple enough
[09:53] <nine> What triggered the bool -> _Bool change?
[09:55] <MasterDuke> i think it was a type redeclaration
[09:55] <MasterDuke> don't have the error in my scrollback anymore
[09:56] <MasterDuke> i could try undoing those now that i'm just including the single static file
[09:56] <nine> Could take the opportunity and #include <stdbool.h> and get bool as it's intended to be
[09:57] <timo> ok everybody, turn up your music, because without dB, that's just "stool.h"
[10:03] <moon-child> ugh
[10:03] <moon-child> :)
[10:15] <lizmat> m: dd [1,2].VAR.name   # MasterDuke the origin of "element"
[10:15] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «"element"␤»
[10:16] <lizmat> m: dd {:a,:b}.VAR.name   # the origin of %
[10:16] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «"\%"␤»
[10:20] *** discord-raku-bot left
[10:20] *** discord-raku-bot joined
[10:23] *** Geth__ joined
[10:25] *** Geth left
[10:25] <MasterDuke> there are some differences between the implementation of at least .name() and .of() between Array and Hash. i have no idea if those differences are required
[10:41] <lizmat> MasterDuke: https://github.com/rakudo/rakudo/commit/59929f0a23
[10:41] <lizmat> workaround for now
[10:44] <MasterDuke> cool. wonder if https://github.com/rakudo/rakudo/commit/39086fedab4518c30ff34c92ea390d5ae8c3f964 can be done for Array also?
[10:46] <lizmat> m: use nqp; dd nqp::getattr([1],Array,q/$!descriptor/).name
[10:46] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «"element"␤»
[10:46] <lizmat> I guess it could, let's see
[10:50] <MasterDuke> m: use nqp; dd nqp::getattr(Map.new.Hash,Hash,q/$!descriptor/).name
[10:50] <camelia> rakudo-moar 59929f0a2: OUTPUT: «Use of Nil in string context␤  in block <unit> at <tmp> line 1␤"element"␤»
[10:51] <jnthnwrthngtn> Array[Int](1,2,3) is a coercion
[10:51] <jnthnwrthngtn> Or at least, that's how I'd expect it to work
[10:52] <MasterDuke> m: dd 1
[10:52] <camelia> rakudo-moar 59929f0a2: OUTPUT: «Use of Nil in string context␤  in block <unit> at <tmp> line 1␤1␤»
[10:53] <MasterDuke> lizmat: looks like that 'Use of Nil <...>' warning always happens now
[10:53] <lizmat> yeah, looking at that
[10:53] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/src/core.c/Map.pm6#L35 where my Map.new.Hash example gets it's 'element' from
[10:54] <MasterDuke> *its
[11:01] *** Geth__ left
[11:01] *** Geth joined
[11:02] <MasterDuke> jnthnwrthngtn: if i look at the ast of e.g., `sub foo(Int() $a) { say $a };` i see a `Perl6::Metamodel::CoercionHOW`, but the ast of `say Array[Str]("a", "b", "c")` doesn't have any
[11:03] <jnthnwrthngtn> MasterDuke: Possibly raku-call takes care of mapping to any coercion logic
[11:07] <MasterDuke> well, timo was correct that it goes through List's CALL-ME (i added a print in there and it gets triggered)
[11:08] <jnthnwrthngtn> That may be sorta-legacy or at least pre-date when we had more proper coercion stuff
[11:08] <MasterDuke> yeah, the commit nine found introducing it was from 2015 iirc
[11:09] <MasterDuke> https://github.com/rakudo/rakudo/commit/902d590511a2e034fa6885ea54f17c8e259306a0
[11:10] <MasterDuke> https://github.com/rakudo/rakudo/blame/master/src/core.c/List.pm6#L913-L916 essentially unchanged since then
[11:12] <jnthnwrthngtn> Correct results by dubious means, I guess... :)
[11:12] <jnthnwrthngtn> (Although at the time it was probably the only way)
[11:17] <MasterDuke> huh. entirely removing CALL-ME from List still give the same output
[11:17] <jnthnwrthngtn> Cool, so then everything involving the coercion protocol is wired up already :)
[11:18] <jnthnwrthngtn> iirc, a CALL-ME takes precedence
[11:18] <jnthnwrthngtn> If there's not one, the dispatcher looks if it's a type object and if it can do the coercion
[11:18] <nine> Removed code is debugged code!
[11:18] <MasterDuke> no `Perl6::Metamodel::CoercionHOW` in the new ast though
[11:18] <timo> and smaller core setting and less ram and ...
[11:18] <timo> that wouldn't show up in the ast anyway, though?
[11:19] <nine> No, it's a runtime thing
[11:19] <MasterDuke> it does for a sub with a coersion parameter, but yeah, that's really not quite the same thing
[11:20] <nine> Int() in a place where we expect a type is an object of a CoercionHOW meta class. It's for talking about a specific coercion type. Coercion by itself doesn't actually have much to do with CoercionHOW, its more of an abstract concept.
[11:24] <MasterDuke> cool, spectest passed. guess i should try removing some of those other CALL-MEs to see if it's the same for them
[11:50] *** Altai-man joined
[12:07] *** reportable6 left
[13:10] *** reportable6 joined
[13:59] *** Geth left
[13:59] *** Geth joined
[14:10] *** frost left
[14:30] <MasterDuke> wow, there are two new sets of warnings when building moarvm in our CI, but they don't seem to be about any newly added/modified code
[14:31] <MasterDuke> https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=964&view=logs&j=1f3a7134-3b80-549a-eaff-49041f6b71c8&t=cebb2378-2f87-5e8d-fe8c-4dbf4bfaf11c&l=240
[14:31] <MasterDuke> https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=964&view=logs&j=2c1cff8a-908d-52a7-e22c-3d416bc847b7&t=0a1a0cd4-e70e-5c71-3cc1-fca9092148b1&l=217
[14:32] <MasterDuke> https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=964&view=logs&j=c83e5e7f-383d-50f0-76b0-1e0b759102f5&t=3f1c2bef-8000-50b4-fe5f-f94b6354c424&l=216
[14:33] <MasterDuke> https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=964&view=logs&j=c83e5e7f-383d-50f0-76b0-1e0b759102f5&t=3f1c2bef-8000-50b4-fe5f-f94b6354c424&l=268
[14:33] <MasterDuke> oops, four new sets
[15:00] <vrurg> Looking for an advise. I'm considering splitting Junction into subclasses – one for each kind of junction. This would allow to shrink methods like Bool and ACCEPTS to a couple of ops possibly improving their inlinability. Does it make sense to play with this?
[15:04] <[Coke]> Would that break any spectests?
[15:04] <[Coke]> if it can be hidden as an implementation detail, seems reasonable.
[15:05] <vrurg> [Coke]: I don't know if it would break anything. That's why it's going to be an experiment.
[15:06] <vrurg> But if the methods currently fit into inline limits nicely then there might be no reason to waste time on this.
[15:08] <MasterDuke> do you have some benchmarks you've looked at spesh logs of? or maybe MVM_SPESH_INLINE_LOG will give more useful data
[15:09] <vrurg> MasterDuke: never done it before. Looks like it is the time to start. :)
[15:29] *** Geth left
[15:29] *** reportable6 left
[15:29] *** discord-raku-bot left
[15:29] *** quotable6 left
[15:29] *** coverable6 left
[15:29] *** committable6 left
[15:29] *** nativecallable6 left
[15:29] *** evalable6 left
[15:29] *** releasable6 left
[15:29] *** statisfiable6 left
[15:29] *** squashable6 left
[15:29] *** unicodable6 left
[15:29] *** sourceable6 left
[15:29] *** shareable6 left
[15:29] *** notable6 left
[15:29] *** bloatable6 left
[15:29] *** bisectable6 left
[15:29] *** tellable6 left
[15:29] *** linkable6 left
[15:29] *** greppable6 left
[15:29] *** benchable6 left
[15:29] *** sena_kun left
[15:29] *** [Coke] left
[15:29] *** MasterDuke left
[15:29] *** bartolin left
[15:29] *** Kaiepi left
[15:29] *** leedo left
[15:29] *** ugexe left
[15:29] *** camelia left
[15:29] *** dogbert11 left
[15:29] *** moon-child left
[15:29] *** SmokeMachine left
[15:29] *** nebuchadnezzar left
[15:29] *** leont left
[15:29] *** jnthnwrthngtn left
[15:29] *** rba left
[15:29] *** JRaspass left
[15:29] *** jdv left
[15:29] *** Altai-man left
[15:29] *** kjp left
[15:29] *** Voldenet left
[15:29] *** gfldex left
[15:29] *** psydroid left
[15:29] *** TempIRCLogger left
[15:29] *** ilogger2 left
[15:29] *** nine left
[15:29] *** vrurg left
[15:29] *** Nicholas left
[15:29] *** samcv left
[15:29] *** timo left
[15:29] *** rypervenche left
[15:29] *** tbrowder left
[15:29] *** Util_ left
[15:29] *** codesections left
[15:29] *** harrow left
[15:29] *** samebchase left
[15:29] *** japhb left
[15:29] *** lizmat left
[15:32] *** timo joined
[15:32] *** samcv joined
[15:32] *** vrurg joined
[15:32] *** Nicholas joined
[15:32] *** nine joined
[15:32] *** ilogger2 joined
[15:32] *** codesections joined
[15:32] *** Util_ joined
[15:32] *** tbrowder joined
[15:32] *** rypervenche joined
[15:32] *** rba joined
[15:32] *** jnthnwrthngtn joined
[15:32] *** leont joined
[15:32] *** camelia joined
[15:32] *** nebuchadnezzar joined
[15:32] *** SmokeMachine joined
[15:32] *** moon-child joined
[15:32] *** ugexe joined
[15:32] *** dogbert11 joined
[15:32] *** MasterDuke joined
[15:32] *** leedo joined
[15:32] *** Kaiepi joined
[15:32] *** bartolin joined
[15:32] *** [Coke] joined
[15:32] *** sena_kun joined
[15:32] *** benchable6 joined
[15:32] *** greppable6 joined
[15:32] *** linkable6 joined
[15:32] *** tellable6 joined
[15:32] *** bisectable6 joined
[15:32] *** bloatable6 joined
[15:32] *** notable6 joined
[15:32] *** shareable6 joined
[15:32] *** sourceable6 joined
[15:32] *** unicodable6 joined
[15:32] *** squashable6 joined
[15:32] *** statisfiable6 joined
[15:32] *** releasable6 joined
[15:32] *** evalable6 joined
[15:32] *** nativecallable6 joined
[15:32] *** committable6 joined
[15:32] *** coverable6 joined
[15:32] *** quotable6 joined
[15:32] *** discord-raku-bot joined
[15:32] *** reportable6 joined
[15:32] *** Geth joined
[15:32] *** harrow joined
[15:32] *** samebchase joined
[15:32] *** JRaspass joined
[15:32] *** jdv joined
[15:32] *** TempIRCLogger joined
[15:32] *** AlexDaniel left
[15:33] *** japhb joined
[15:33] *** lizmat joined
[15:33] <Nicholas> MasterDuke: newer MIPS system has a newer gcc. It too has no __atomic_load_8 etc.
[15:33] *** Altai-man joined
[15:33] *** kjp joined
[15:33] *** Voldenet joined
[15:33] *** gfldex joined
[15:33] <Nicholas> one needs to add  -latomic to the link command line
[15:33] <Nicholas> for moar. for nqm-m. and I guess for rakudo-m
[15:34] <Nicholas> but meanwhile, on arm32
[15:34] <Nicholas> Thread 1 "moar" received signal SIGSEGV, Segmentation fault.
[15:34] <Nicholas> deserialize_callsites (rs=0xb6388680, cu=0x1, tc=0xb6010080) at src/core/bytecode.c:900
[15:34] <Nicholas> 900                             if (!callsites[i]->is_interned) {
[15:34] <Nicholas> (gdb) p callsites[i]
[15:34] <Nicholas> $2 = (MVMCallsite *) 0x0
[15:34] <Nicholas> so, that's a bug of some sort.
[15:35] <vrurg> NQP and Rakudo puck up their compile options from moar backend config.
[15:35] <MasterDuke> huh. thanks for checking
[15:35] <Nicholas> ah OK, so it could be fixed in one place
[15:35] <vrurg> I hope so.
[15:35] <Nicholas> anyway, sparc64 builds OK
[15:35] <Nicholas> everything else fails early in some way currently
[15:36] <Nicholas> everything else tried taht is
[15:36] <Nicholas> need to go AFK
[15:37] <Nicholas> will try aarch64 linux later. And the M1 Mac. To see what 64 bit ARMs think
[15:38] <MasterDuke> so it looks like there's a combination of: actual bug (maybe upstream), build options we need to (and most likely can) set, and build problems we can't work around but are potentially fixable if one is willing and able to upgrade packages on the system
[15:41] <MasterDuke> i would say the first two definitely need to be addressed. personally i'm ok with the third
[15:44] <lizmat> vrurg: In the past I tried playing with Junctions like that, it did not end well
[15:44] <lizmat> but things have changed since then, so more power to you if you get that working
[15:45] <nine> Nicholas: that cu=0x1 looks fishy already. That's supposed to be a MVMCompUnit*
[15:47] <vrurg> lizmat: won't be asking what went wrong for you as to not get biased from the start. :)
[15:48] <lizmat> vrurg: if it fails, it's probably in a different way than then anyway  :-)
[15:49] <MasterDuke> looks like cpython is experimenting with mimalloc also. maybe we can steal something from them https://github.com/python/cpython/pull/29123
[15:49] <lizmat> if I recall correctly, the main failure mode was a lot of places where expecting nqp::eqaddr((1|2).WHAT,Junction) to be True
[15:50] <jnthnwrthngtn> If it's just about opt, then probably it's possible to write a dispatcher that guards on the type attribute inside of the Junction object
[15:56] <vrurg> Dispatcher would limit it to moar only. Though if JVM doesn't inline then it probably doesn't worth trying.
[15:58] <MasterDuke> Nicholas: `3rdparty/mimalloc/include/mimalloc-types.h:42:#define MI_SECURE 0` do you mind trying with that set to 4 instead?
[16:02] <vrurg> I also have a guess that guarding on a type object is slightly faster than guarding on an attribute value.
[16:03] <jnthnwrthngtn> After JIT/spesh maybe not all that much
[16:05] <jnthnwrthngtn> Also note that a type explosion will potentially turn monomorphic callsites (just Junction) polymorphic too, which also prevents inlining
[16:07] <vrurg> This is certainly the last nail into coffin.
[16:09] <vrurg> Will refocus on dispatchers. I wanted to have smartmatch optimizations based on dispatchers anyway.
[16:10] <vrurg> jnthnwrthngtn: One last request. If you get some spare time for https://github.com/Raku/problem-solving/issues/294#issuecomment-912087363 (just that comment only) and tell if it makes sense to you. 
[16:10] <vrurg> Any time. It's no rush at all.
[16:11] <jnthnwrthngtn> OK. Alas, maybe not this week if it needs much thinking, I'm buried in $other-job this week still :(
[16:13] <vrurg> As I said, no rush. It's waiting since Sep anyway. The related PR is at low risk of merge conflicts because barely anybody else works with pseudostashes.
[16:20] *** discord-raku-bot left
[16:21] *** discord-raku-bot joined
[16:37] *** discord-raku-bot left
[16:38] *** discord-raku-bot joined
[17:26] *** AlexDaniel joined
[18:06] *** linkable6 left
[18:06] *** reportable6 left
[18:08] *** reportable6 joined
[18:08] *** linkable6 joined
[18:40] *** Altai-man left
[18:41] *** squashable6 left
[18:44] *** squashable6 joined
[20:19] *** linkable6 left
[21:03] <Geth> ¦ MoarVM/C11-mimalloc-swings-and-roundabouts: 7 commits pushed by (Daniel Green)++, (Nicholas Clark)++
[21:03] <Geth> ¦ MoarVM/C11-mimalloc-swings-and-roundabouts: 3e0ed61678 | Add mimalloc submodule
[21:03] <Geth> ¦ MoarVM/C11-mimalloc-swings-and-roundabouts: ec909f8f93 | Statically include mimalloc as a single source
[21:03] <Geth> ¦ MoarVM/C11-mimalloc-swings-and-roundabouts: ecb0297d6d | Correctly free memory allocated by libuv
[21:03] <Geth> ¦ MoarVM/C11-mimalloc-swings-and-roundabouts: 5a73e30a21 | Link with BCrypt for mingw
[21:03] <Geth> ¦ MoarVM/C11-mimalloc-swings-and-roundabouts: f3ac354e37 | Add #define's for any mi_* functions we use
[21:03] <Geth> ¦ MoarVM/C11-mimalloc-swings-and-roundabouts: cf5704dba9 | Import stdbool.h in debugserver so we can use `bool` instead of `_Bool`
[21:03] *** psydroid joined
[21:03] <Geth> ¦ MoarVM/C11-mimalloc-swings-and-roundabouts: 8390ddc72b | Add a Configure.pl probe for working #include <stdatomic.h>
[21:03] <Geth> ¦ MoarVM/C11-mimalloc-swings-and-roundabouts: review: https://github.com/MoarVM/MoarVM/compare/3e0ed6167822^...8390ddc72b00
[22:33] *** Geth left
[22:34] *** Geth__ joined
[22:49] *** sena_kun left
[22:51] *** sena_kun joined
[23:19] *** Geth__ left
[23:19] *** Geth joined
[23:20] *** RakuIRCLogger__ left
