[00:06] *** reportable6 left
[00:08] *** reportable6 joined
[00:10] *** Geth left
[00:11] *** Geth joined
[00:11] *** lizmat joined
[00:11] *** RakuIRCLogger joined
[00:56] *** vrurg_ left
[00:56] *** vrurg joined
[02:14] *** RakuIRCLogger left
[03:14] *** bisectable6 left
[03:14] *** evalable6 left
[03:14] *** notable6 left
[03:14] *** reportable6 left
[03:14] *** benchable6 left
[03:14] *** bloatable6 left
[03:14] *** sourceable6 left
[03:14] *** releasable6 left
[03:14] *** linkable6 left
[03:14] *** statisfiable6 left
[03:14] *** quotable6 left
[03:14] *** unicodable6 left
[03:14] *** coverable6 left
[03:14] *** nativecallable6 left
[03:14] *** squashable6 left
[03:14] *** greppable6 left
[03:14] *** tellable6 left
[03:14] *** committable6 left
[03:14] *** shareable6 left
[03:14] *** releasable6 joined
[03:14] *** quotable6 joined
[03:14] *** coverable6 joined
[03:15] *** unicodable6 joined
[03:15] *** bloatable6 joined
[03:15] *** bisectable6 joined
[03:15] *** benchable6 joined
[03:16] *** shareable6 joined
[03:16] *** nativecallable6 joined
[03:17] *** statisfiable6 joined
[03:38] *** frost joined
[04:14] *** evalable6 joined
[04:15] *** notable6 joined
[04:16] *** linkable6 joined
[04:16] *** tellable6 joined
[04:21] *** frost left
[04:27] *** frost joined
[05:14] *** sourceable6 joined
[05:16] *** greppable6 joined
[05:16] *** committable6 joined
[05:17] *** squashable6 joined
[07:07] *** reportable6 joined
[08:11] *** Shane__ left
[09:23] *** Geth left
[09:23] *** Geth joined
[10:24] *** RakuIRCLogger joined
[11:40] *** Geth left
[11:40] *** Geth joined
[11:42] *** frost left
[11:44] *** Geth left
[11:44] *** Geth joined
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[13:25] *** statisfiable6 left
[13:25] *** bisectable6 left
[13:25] *** releasable6 left
[13:25] *** nativecallable6 left
[13:25] *** benchable6 left
[13:25] *** reportable6 left
[13:25] *** bloatable6 left
[13:25] *** greppable6 left
[13:25] *** shareable6 left
[13:25] *** squashable6 left
[13:25] *** unicodable6 left
[13:25] *** committable6 left
[13:25] *** coverable6 left
[13:25] *** linkable6 left
[13:25] *** quotable6 left
[13:25] *** sourceable6 left
[13:25] *** evalable6 left
[13:25] *** notable6 left
[13:25] *** tellable6 left
[13:25] *** committable6 joined
[13:26] *** squashable6 joined
[13:26] *** bloatable6 joined
[13:26] *** nativecallable6 joined
[13:26] *** greppable6 joined
[13:27] *** quotable6 joined
[13:27] *** reportable6 joined
[13:28] *** releasable6 joined
[13:28] *** coverable6 joined
[13:28] *** statisfiable6 joined
[14:26] *** bisectable6 joined
[14:26] *** linkable6 joined
[14:27] *** sourceable6 joined
[14:27] *** shareable6 joined
[14:27] *** unicodable6 joined
[14:27] *** tellable6 joined
[15:16] *** Shane__ joined
[15:17] <nine> I've made some progres on "No such private method 'SET-SELF' on Map". Looks like it's a frame walker/multi level inlining issue. Apparently at the current position where we look up ::?CLASS, we are multiple inlining levels deep. When looking for the correct inlined frame for the current position, we take the first, but at least in this case, the last matching one would be more appropriate.
[15:27] *** notable6 joined
[15:32] <dogbert11> so you have now found a reliable way to repro the problem?
[15:33] <nine> Not really reliable. Depends a lot on timing and I'm pretty sure hash order to end up with the right stack of inlinees. But at least I cought one gdb run in my net
[15:34] <nine> I added a check to MVM_frame_find_lexical_by_name which abort()s if we find ::?CLASS in one of Map's methods.
[15:42] <dogbert11> so there's something wrong with the logic which retrieves the correct frame then?
[15:54] <nine> Yes. I hope simply reversing the direction of search will be all that's required. But it'll take quite a bit of code reading to confirm that
[16:04] <nine> An open question is if this only affects JITed code or if it could also happen in interpreted code.
[16:12] <nine> Huh...if I read merge_graph correctly, we already add an inlinee's inlines to the inliner's inlines table before adding an entry for the inlinee itself. I.e. those indexes should already be ordered in a way to have the most nested first. With this, just looking for the first matching entry in ascending order would be correct.
[16:12] <nine> So why doesn't this work in this case?
[16:13] <nine> Just got the failure with disabled JIT, which is unsurprising, considering my finding ^^^
[16:31] <nine> Aaaah I've got it!
[16:32] <nine> What happens is: we inline Map.keys which is just: Seq.new(Rakudo::Iterator.Mappy-keys(self)). Originally the spesh cand for keys does not have any inlines, so none can get stacked up front.
[16:33] <nine> After inlining we run optimize_bb over the inlined graph to get a more optimized version. optimize_bb will then encounter those dispatches, try to optimize them and succeed at inlining. But those inlinees get added to the table after the original inlinee for keys.
[16:34] <nine> So when we're looking for ::?CLASS, we'll find keys first, even though we really are in Mappy-keys.
[16:35] <nine> This is a new-disp regression. Before, spesh was smart enough, not to try to inline calls in code we've just inlined: https://github.com/MoarVM/MoarVM/commit/bc98cb9467ab2d5d408dff841f39ae8734a936a5#diff-9791493c4bfe48513c1dd8b637aeb1daa3971293bc164f6bd63ed16c03aca0edR2701
[16:35] <nine> This protection got lost in translation.
[16:41] <lizmat> nine++
[17:08] *** linkable6 left
[17:15] <nine> 40 minutes without failure in the configuration that reproduced the issue pretty reliably in a minute or two. I think this fix may just work :)
[17:45] <dogbert11> nine++
[17:57] <Geth> ¦ MoarVM: 059c013b09 | (Stefan Seifert)++ | src/spesh/optimize.c
[17:57] <Geth> ¦ MoarVM: Fix frame walker finding wrong value after multi level inlining
[17:57] <Geth> ¦ MoarVM: 
[17:57] <Geth> ¦ MoarVM: The frame walker expects a spesh cand's inlinees to be sorted depth first. This
[17:57] <Geth> ¦ MoarVM: has the benefit of the walker being able to just iterate over the inlinees and
[17:57] <Geth> ¦ MoarVM: take the first one that covers the current bytecode position.
[17:57] <Geth> ¦ MoarVM: 
[17:57] <Geth> ¦ MoarVM: In the failing case we'd inlined Map.keys which is just:
[17:57] <Geth> ¦ MoarVM: <…commit message has 20 more lines…>
[17:57] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/059c013b09
[17:58] * lizmat will do the bump
[17:58] <nine> thanks :)
[18:08] *** reportable6 left
[18:12] <MasterDuke> nine++ nice one. whereas the nqp build is actually getting sigkilled when i try to use the new sp_getarg_u i added...
[18:28] *** evalable6 joined
[18:28] *** benchable6 joined
[20:09] *** reportable6 joined
[20:09] *** linkable6 joined
[20:24] <Geth> ¦ MoarVM/master: 4 commits pushed by (Vittore F. Scolari)++, niner++
[20:24] <Geth> ¦ MoarVM/master: e96bab85fc | Correcly detect MacOS
[20:24] <Geth> ¦ MoarVM/master: 0d584831be | Define PATH_MAX if it is not defined
[20:24] <Geth> ¦ MoarVM/master: a9c0058dec | The Hurd claims to implement the BSD api, but it didn't keep up
[20:24] <Geth> ¦ MoarVM/master: bc2c4cf09d | Merge pull request #1666 from scovit/compiles-on-the-hurd
[20:24] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/059c013b0944...bc2c4cf09d9d
[20:25] <lizmat> bumpy time again ?
[20:31] <Geth> ¦ MoarVM: 596b42154f | (Daniel Green)++ | 4 files
[20:31] <Geth> ¦ MoarVM: Add an MVM_nativecall_encode_string function
[20:31] <Geth> ¦ MoarVM: 
[20:31] <Geth> ¦ MoarVM: And have MVM_nativecall_unmarshal_string just call it with the right
[20:31] <Geth> ¦ MoarVM: arguments. This lets us use MVM_nativecall_encode_string in some other
[20:31] <Geth> ¦ MoarVM: NativeCall code that was partially duplicating the functionality in
[20:31] <Geth> ¦ MoarVM: MVM_nativecall_unmarshal_string.
[20:31] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/596b42154f
[20:31] <Geth> ¦ MoarVM: 4bf970a9df | (Daniel Green)++ | 3 files
[20:31] <Geth> ¦ MoarVM: Fix potential invalid free in nativecall
[20:31] <Geth> ¦ MoarVM: 
[20:31] <Geth> ¦ MoarVM: When using mimalloc this particular memory comes from libc's malloc(), so
[20:31] <Geth> ¦ MoarVM: we have to use libc's free().
[20:31] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4bf970a9df
[20:31] <Geth> ¦ MoarVM: 278a705ebc | MasterDuke17++ (committed using GitHub Web editor) | 4 files
[20:31] <Geth> ¦ MoarVM: Merge pull request #1673 from MasterDuke17/fix_potential_invalid_free_with_mimalloc_in_nativecall
[20:31] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/278a705ebc
[20:32] <MasterDuke> how about now
[20:36] <lizmat> ok!
[20:42] *** sena_kun left
[20:43] *** sena_kun joined
[20:54] <lizmat> bumped
[21:24] <MasterDuke> nice
[22:24] *** [Coke] left
[22:29] *** [Coke] joined
[22:47] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1681: Fix spesh of named uint parameters
[22:47] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1681
[23:41] *** discord-raku-bot left
[23:41] *** discord-raku-bot joined
