[00:07] *** reportable6 left
[00:10] *** reportable6 joined
[00:32] *** Kaipei left
[00:32] *** Kaipei joined
[01:32] *** greppable6 left
[01:32] *** bisectable6 left
[01:32] *** evalable6 left
[01:32] *** reportable6 left
[01:32] *** committable6 left
[01:32] *** shareable6 left
[01:32] *** sourceable6 left
[01:32] *** benchable6 left
[01:32] *** statisfiable6 left
[01:32] *** nativecallable6 left
[01:32] *** tellable6 left
[01:32] *** linkable6 left
[01:32] *** bloatable6 left
[01:32] *** notable6 left
[01:32] *** coverable6 left
[01:32] *** quotable6 left
[01:32] *** unicodable6 left
[01:32] *** releasable6 left
[01:33] *** statisfiable6 joined
[01:33] *** notable6 joined
[01:33] *** evalable6 joined
[01:33] *** linkable6 joined
[01:33] *** coverable6 joined
[01:34] *** tellable6 joined
[01:34] *** nativecallable6 joined
[01:34] *** sourceable6 joined
[01:34] *** reportable6 joined
[01:34] *** releasable6 joined
[01:34] *** quotable6 joined
[01:34] *** greppable6 joined
[01:35] *** bisectable6 joined
[01:35] *** bloatable6 joined
[01:35] *** benchable6 joined
[01:35] *** shareable6 joined
[01:35] *** committable6 joined
[01:36] *** unicodable6 joined
[02:02] *** Kaipei left
[03:02] *** statisfiable6 left
[03:02] *** notable6 left
[03:02] *** releasable6 left
[03:02] *** unicodable6 left
[03:02] *** shareable6 left
[03:02] *** quotable6 left
[03:02] *** evalable6 left
[03:02] *** linkable6 left
[03:02] *** coverable6 left
[03:02] *** reportable6 left
[03:02] *** committable6 left
[03:02] *** benchable6 left
[03:02] *** sourceable6 left
[03:02] *** bloatable6 left
[03:02] *** bisectable6 left
[03:02] *** tellable6 left
[03:02] *** nativecallable6 left
[03:02] *** greppable6 left
[03:03] *** quotable6 joined
[03:03] *** committable6 joined
[03:03] *** greppable6 joined
[03:03] *** statisfiable6 joined
[03:03] *** bloatable6 joined
[03:04] *** nativecallable6 joined
[03:04] *** unicodable6 joined
[03:04] *** notable6 joined
[03:04] *** releasable6 joined
[03:04] *** bisectable6 joined
[03:05] *** coverable6 joined
[03:05] *** tellable6 joined
[03:05] *** benchable6 joined
[03:05] *** reportable6 joined
[03:05] *** evalable6 joined
[03:05] *** sourceable6 joined
[03:05] *** shareable6 joined
[03:05] *** linkable6 joined
[04:05] *** greppable6 left
[04:05] *** sourceable6 left
[04:05] *** nativecallable6 left
[04:05] *** tellable6 left
[04:05] *** releasable6 left
[04:05] *** notable6 left
[04:05] *** reportable6 left
[04:05] *** evalable6 left
[04:05] *** bloatable6 left
[04:05] *** benchable6 left
[04:05] *** statisfiable6 left
[04:05] *** unicodable6 left
[04:05] *** coverable6 left
[04:05] *** linkable6 left
[04:05] *** quotable6 left
[04:05] *** bisectable6 left
[04:05] *** shareable6 left
[04:05] *** committable6 left
[04:06] *** benchable6 joined
[04:06] *** bloatable6 joined
[04:06] *** shareable6 joined
[04:06] *** quotable6 joined
[04:06] *** nativecallable6 joined
[04:07] *** committable6 joined
[04:07] *** linkable6 joined
[04:07] *** notable6 joined
[04:07] *** unicodable6 joined
[04:07] *** releasable6 joined
[04:07] *** sourceable6 joined
[04:07] *** evalable6 joined
[04:08] *** coverable6 joined
[04:08] *** tellable6 joined
[04:08] *** reportable6 joined
[04:08] *** greppable6 joined
[04:09] *** statisfiable6 joined
[04:09] *** bisectable6 joined
[05:09] *** tellable6 left
[05:09] *** reportable6 left
[05:09] *** quotable6 left
[05:09] *** bloatable6 left
[05:09] *** releasable6 left
[05:09] *** committable6 left
[05:09] *** sourceable6 left
[05:09] *** linkable6 left
[05:09] *** evalable6 left
[05:09] *** shareable6 left
[05:09] *** statisfiable6 left
[05:09] *** greppable6 left
[05:09] *** bisectable6 left
[05:09] *** notable6 left
[05:09] *** coverable6 left
[05:09] *** benchable6 left
[05:09] *** nativecallable6 left
[05:09] *** unicodable6 left
[05:09] *** bisectable6 joined
[05:09] *** statisfiable6 joined
[05:09] *** releasable6 joined
[05:09] *** committable6 joined
[05:09] *** bloatable6 joined
[05:09] *** nativecallable6 joined
[05:09] *** unicodable6 joined
[05:10] *** coverable6 joined
[05:10] *** linkable6 joined
[05:10] *** sourceable6 joined
[05:10] *** evalable6 joined
[05:11] *** shareable6 joined
[05:11] *** notable6 joined
[05:11] *** reportable6 joined
[05:11] *** greppable6 joined
[05:11] *** quotable6 joined
[05:11] *** tellable6 joined
[05:11] *** benchable6 joined
[05:17] *** Kaipei joined
[05:33] *** frost joined
[06:08] *** reportable6 left
[06:10] *** reportable6 joined
[06:19] *** kjp left
[07:52] *** linkable6 left
[07:52] *** evalable6 left
[07:54] *** linkable6 joined
[07:54] *** evalable6 joined
[07:58] *** Kaipii joined
[08:01] *** Kaipei left
[09:35] *** Kaipii left
[09:51] *** frost left
[10:24] *** Kaipii joined
[10:47] *** Kaipii left
[11:46] *** Kaipii joined
[12:08] *** reportable6 left
[12:09] *** reportable6 joined
[12:57] <dogbert17> m: use nqp; nqp::splice(my int @a,array[int].new(:shape),0,1)

[12:57] <camelia> rakudo-moar b5a82d28b: OUTPUT: «(signal SEGV)»

[12:58] <dogbert17> this is https://github.com/rakudo/rakudo/issues/4075

[13:02] <dogbert17> the problem seems, to my untrained eye, to start on this line: https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/VMArray.c#L842

[13:02] <dogbert17>  when REPR(src)->ID returns 39 (MVM_REPR_ID_MultiDimArray) instead of 1 (MVM_REPR_ID_VMArray)

[13:03] <dogbert17> at that point s_repr_data gets set to NULL which leads to a SEGV on line 864

[14:55] *** [Coke] left
[15:03] *** [Coke] joined
[15:39] *** [Coke] left
[15:51] *** [Coke] joined
[16:24] <timo> good catch

[16:26] <timo> the guard for "is s_repr_data not null" should perhaps guard both the then and else branch, and probably also have an exception thrown at the end

[16:27] <timo> i would have said we must have been sure the repr id of at least source is always array at some point, perhaps when choosing if copy_elements is the right function to call

[16:28] <timo> perhaps we just blindly copy-pasted copy-elements to the reprops of mvmmultidimarray?

[16:43] *** [Coke] left
[16:53] *** [Coke] joined
[17:16] *** [Coke] left
[17:31] *** [Coke] joined
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[19:32] <dogbert17> timo: thx for looking, could it be the asplice function that maskes some kind of mistake?

[19:32] <dogbert17> #0  0x00007ffff78350f0 in copy_elements (tc=0x20000030080, src=0x200091178a0, dest=0x20009041e60, s_offset=0, d_offset=0, elems=1) at src/6model/reprs/VMArray.c:864

[19:32] <dogbert17> #1  0x00007ffff78358a1 in asplice (tc=0x20000030080, st=0x200038c11b8, root=0x20009041e60, data=0x20009041e78, from=0x200091178a0, offset=0, count=0) at src/6model/reprs/VMArray.c:1024

[19:32] <dogbert17> #2  0x00007ffff7794772 in MVM_interp_run (tc=0x20000030080, initial_invoke=0x7ffff7954c52 <toplevel_initial_invoke>, invoke_data=0x20000598800, outer_runloop=0x0) at src/core/interp.c:2260

[19:36] *** kjp joined
[21:42] *** evalable6 left
[21:42] *** linkable6 left
[21:42] *** linkable6 joined
[21:45] *** evalable6 joined
[22:24] <timo> we'll have to think about what exactly it means to splice a multidimarray. multidimarrays are supposed to be fixed-size, so either we forbid splicing a different-sized thing into the hole it makes, or if we do something like shuffle the default value or whatever in from the end

[22:26] <timo> and splice uses single-dimension indices, how does it, just in general?

