[00:06] *** reportable6 left
[00:08] *** reportable6 joined
[01:08] *** benchable6 left
[01:08] *** linkable6 left
[01:08] *** notable6 left
[01:08] *** sourceable6 left
[01:08] *** squashable6 left
[01:08] *** greppable6 left
[01:08] *** reportable6 left
[01:08] *** quotable6 left
[01:08] *** nativecallable6 left
[01:08] *** statisfiable6 left
[01:08] *** unicodable6 left
[01:08] *** committable6 left
[01:08] *** coverable6 left
[01:08] *** bloatable6 left
[01:08] *** bisectable6 left
[01:08] *** evalable6 left
[01:08] *** tellable6 left
[01:08] *** releasable6 left
[01:08] *** shareable6 left
[01:08] *** sourceable6 joined
[01:08] *** quotable6 joined
[01:09] *** tellable6 joined
[01:09] *** squashable6 joined
[01:09] *** greppable6 joined
[01:09] *** unicodable6 joined
[01:10] *** notable6 joined
[01:11] *** statisfiable6 joined
[01:11] *** reportable6 joined
[01:11] *** bloatable6 joined
[01:11] *** bisectable6 joined
[01:45] *** frost joined
[02:08] *** committable6 joined
[02:10] *** nativecallable6 joined
[02:10] *** coverable6 joined
[02:10] *** releasable6 joined
[02:36] *** frost left
[02:49] *** frost joined
[03:08] *** discord-raku-bot left
[03:08] *** discord-raku-bot joined
[03:10] *** benchable6 joined
[03:41] *** frost left
[04:09] *** frost joined
[04:11] *** shareable6 joined
[04:18] *** frost left
[05:56] *** greppable6 left
[05:56] *** coverable6 left
[05:56] *** notable6 left
[05:56] *** nativecallable6 left
[05:56] *** statisfiable6 left
[05:56] *** quotable6 left
[05:56] *** sourceable6 left
[05:56] *** bloatable6 left
[05:56] *** squashable6 left
[05:56] *** bisectable6 left
[05:56] *** reportable6 left
[05:56] *** tellable6 left
[05:56] *** unicodable6 left
[05:56] *** releasable6 left
[05:56] *** committable6 left
[05:56] *** benchable6 left
[05:56] *** shareable6 left
[05:57] *** shareable6 joined
[05:57] *** reportable6 joined
[05:57] *** bloatable6 joined
[05:57] *** coverable6 joined
[05:59] *** benchable6 joined
[05:59] *** nativecallable6 joined
[05:59] *** sourceable6 joined
[05:59] *** quotable6 joined
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:37] <nine> MasterDuke: everything the optimizer does, makes compilation take longer

[06:38] <Nicholas> good *, *

[06:57] *** committable6 joined
[06:58] *** squashable6 joined
[06:58] *** releasable6 joined
[06:59] *** greppable6 joined
[06:59] *** tellable6 joined
[07:09] *** linkable6 joined
[07:14] <nine> Good Friday! (We've already decided that Friday exists in IRC)

[07:42] <Nicholas> "while stocks last"

[07:58] *** statisfiable6 joined
[08:11] *** evalable6 joined
[08:14] *** frost joined
[08:19] *** frost left
[08:19] *** moon-child left
[08:19] *** moon-child joined
[08:25] *** frost joined
[08:59] *** bisectable6 joined
[09:16] <MasterDuke> nine: no argument there. but if you're squaring numbers you're probably doing something math-heavy, and would be ok for a slight slowdown in compilation for a speedup in runtime

[09:42] <MasterDuke> hopefully after rakuast we can better separate what's currently done in the optimizer. break apart correctness checking and performance optimization and make the optimization(s) opt-in/out-able

[09:56] *** notable6 joined
[10:01] <MasterDuke> backing up to removing the fsa and the double free. valgrind with --trace-children=yes doesn't get them, which is annoying. but asan does

[10:02] <MasterDuke> https://gist.github.com/MasterDuke17/72c0bdde47bdf2bf913ef59ad3cec7aa

[10:03] <MasterDuke> happening in/because of MVM_6model_set_debug_name, which i took the mutex out of because i switched to using the linked list with looping on MVM_trycas

[10:05] *** linkable6 left
[10:44] *** Techcable left
[10:58] *** linkable6 joined
[10:59] *** unicodable6 joined
[11:09] <MasterDuke> ok, added the mutex back to MVM_6model_set_debug_name and now everything passes

[11:16] <MasterDuke> times look pretty much the same as on master

[11:55] <lizmat> something I just found, that I found counter-intuitive:

[11:55] <lizmat> sub a(Callable:D $a) { $a }   creates 10 bytes of bytecode

[11:56] <lizmat> sub a(&a) { &a }   creates *50* bytes of bytecode

[11:56] <lizmat> is there any reason for that discrepancy?

[12:07] *** reportable6 left
[12:10] *** reportable6 joined
[12:21] *** Altai-man joined
[12:26] *** Techcable joined
[12:45] <Geth> ¦ MoarVM: nwc10++ created pull request #1644: Add missing `static` qualifiers to various private functions

[12:45] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1644

[13:24] <jnthnwrthngtn> lizmat: Well, everything has a reason, but it probably isn't a good one :)

[13:41] <lizmat> yeah, that's why I figured I'd ask  :-)

[13:41] <lizmat> btw, the bytecode sizes are what the spesh log reported using -MSIL

[13:41] <lizmat> is there a way to directly introspect bytecode size ?

[13:49] <jnthnwrthngtn> moar --dump bytecode-file.moarvm

[13:49] <jnthnwrthngtn> And you can get one of those by --target=mbc --output=bytecode-file.moarvm to Rakudo, I think

[13:50] <jnthnwrthngtn> The inlining numbers are to be taken with a pinch of salt because they are actually after specialization

[13:50] <jnthnwrthngtn> iirc

[13:50] <jnthnwrthngtn> Well, they might be :)

[13:50] <lizmat> ok

[13:50] <jnthnwrthngtn> Some are, some aren't

[13:50] <jnthnwrthngtn> The one that mentions it being a call to something unspecialized certainly is the unspecialized size

[13:51] <lizmat> so I guess Callable:D $foo speshializes better than &foo

[14:03] *** Altai-man left
[14:08] *** Altai-man joined
[14:52] *** frost left
[15:22] *** frost joined
[15:28] <Geth> ¦ MoarVM/master: 11 commits pushed by (Nicholas Clark)++, (Jonathan Worthington)++

[15:28] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/1850f91a4000...4b2de6d1d09f

[15:29] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1645: Remove the fixed size allocator (FSA)

[15:29] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1645

[15:30] *** Techcable left
[15:31] *** Techcable joined
[16:01] <Nicholas> forgot to say (and before I forget again) mimalloc on ppc32 grumbles a lot (to stderr) about large alloacations that it thinks are bogus, and then follows up with another message to the effect of "OK, actually it wasn't bogus". Lots and lots

[16:01] *** Kaipi left
[16:01] <Nicholas> mimalloc on sparc32 fails assertions

[16:01] *** Kaipi joined
[16:01] <Nicholas> optional for the win

[16:02] <Nicholas> mainly beacuse I don't like debugging mimalloc

[16:22] *** frost left
[16:24] <nine> Nicholas: wow, now I'm really glad I asked. I thought that if anything atomic_load_explicit would be more expensive (because what could be cheaper than a MOV of equivalent?), but figured knowing is better than suspecting. Reading that it can actually be cheaper after all is a very nice surprise.

[16:24] <nine> And this uncovered one of the many x86 biases I've gathered over the years...

[17:25] *** TempIRCLogger left
[17:25] *** TempIRCLogger joined
[17:26] *** TempIRCLogger left
[17:26] *** TempIRCLogger joined
[17:26] *** TempIRCLogger left
[17:26] *** TempIRCLogger joined
[17:41] *** Altai-man left
[17:43] *** discord-raku-bot left
[17:43] *** discord-raku-bot joined
[18:06] *** reportable6 left
[19:09] *** reportable6 joined
[20:22] *** discord-raku-bot left
[20:22] *** discord-raku-bot joined
