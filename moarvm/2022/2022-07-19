[00:00] *** reportable6 left
[00:00] *** nativecallable6 left
[00:00] *** quotable6 left
[00:00] *** sourceable6 left
[00:00] *** notable6 left
[00:00] *** tellable6 left
[00:00] *** releasable6 left
[00:00] *** shareable6 left
[00:00] *** greppable6 left
[00:00] *** bloatable6 left
[00:00] *** ilogger2 left
[00:00] *** harrow left
[00:03] *** ilogger2 joined
[00:06] *** harrow joined
[00:09] *** reportable6 joined
[00:46] *** greppable6 joined
[00:46] *** releasable6 joined
[01:42] <vrurg> I have some pretty interesting benchmarking here: https://github.com/Raku/problem-solving/issues/334

[01:46] *** notable6 joined
[01:47] *** shareable6 joined
[01:47] *** bloatable6 joined
[01:48] *** tellable6 joined
[01:48] *** quotable6 joined
[01:54] *** frost joined
[01:56] <timo> giving Cdefault an int32 attribute makes it a little faster even

[01:59] <timo> if you replace |c with :$n it's a lot faster than Cdefault

[02:00] <timo> 0.723379992 | 0.473043493

[02:00] <timo> this is with :$n, :$m

[02:05] <Voldenet> it's a bit surprising that `Cnew.new(:$n)` is faster than `Cnew.new(int32 :$n)`

[02:07] <Voldenet> though it's `0.634931815 | 0.330936486` vs `0.645507507 | 0.386812083`

[02:07] <Voldenet> not substantial difference

[02:09] <timo> do we have literally SET-SELF(|c) in much of our code? i assume it's the capture that costs the most here

[02:14] <Voldenet> from what I see SET-SELF always uses positional args

[02:18] <Voldenet> and it consistently beats everything else

[02:26] <timo> named and positional are supposed to have the same performance after spesh

[02:37] <japhb> timo: Would that still be true given newdisp?  I would expect positional args would be *very* fast in new-disp, especially handed from routine to routine in the same order

[02:41] <timo> you mean the thing about |c?

[02:41] <timo> /bin/time raku -e 'for ^50_000_000 -> int $_ { my int $a = $_ div 2; $a = $_ div 4; $a = $_ div 8; $a = $_ div 16; $a = $_ div 32; $a = $_ div 64; $a = $_ div 128; $a = $_ div 256 }'

[02:41] <timo> i timed this at 1.25s with my div-to-brshift branch and 4.8s without

[02:45] <timo> japhb: all i know is when i switched the |c out for explicit arguments, it got a whole lot faster

[02:48] *** nativecallable6 joined
[02:58] <timo> now imagine the improvement we could get if we take the techniques from libdivide for non-power-of-two divisions and modulus as well

[02:59] <timo> though the win won't be as extreme perhaps?

[03:01] <timo> " libdivide's scalar code is up to 16 times faster for powers of 2, 10 times faster for non-powers of 2, compared to naive hardware division."

[03:48] *** evalable6 left
[03:48] *** linkable6 left
[03:49] *** evalable6 joined
[03:50] *** linkable6 joined
[03:53] *** sourceable6 joined
[04:53] *** greppable6 left
[04:53] *** shareable6 left
[04:53] *** committable6 left
[04:53] *** nativecallable6 left
[04:53] *** unicodable6 left
[04:53] *** coverable6 left
[04:53] *** reportable6 left
[04:53] *** quotable6 left
[04:53] *** evalable6 left
[04:53] *** linkable6 left
[04:53] *** benchable6 left
[04:53] *** statisfiable6 left
[04:53] *** bisectable6 left
[04:53] *** releasable6 left
[04:53] *** tellable6 left
[04:53] *** bloatable6 left
[04:53] *** notable6 left
[04:54] *** unicodable6 joined
[04:54] *** reportable6 joined
[04:54] *** releasable6 joined
[04:54] *** coverable6 joined
[04:54] *** benchable6 joined
[04:54] *** evalable6 joined
[04:55] *** bisectable6 joined
[04:55] *** committable6 joined
[04:55] *** greppable6 joined
[04:55] *** quotable6 joined
[04:55] *** notable6 joined
[04:56] *** nativecallable6 joined
[04:56] *** linkable6 joined
[04:56] *** tellable6 joined
[04:56] *** shareable6 joined
[04:56] *** bloatable6 joined
[04:56] *** statisfiable6 joined
[05:56] *** reportable6 left
[05:56] *** sourceable6 left
[05:56] *** releasable6 left
[05:56] *** committable6 left
[05:56] *** unicodable6 left
[05:56] *** notable6 left
[05:56] *** bisectable6 left
[05:56] *** bloatable6 left
[05:56] *** nativecallable6 left
[05:56] *** tellable6 left
[05:56] *** shareable6 left
[05:56] *** benchable6 left
[05:56] *** quotable6 left
[05:56] *** coverable6 left
[05:56] *** greppable6 left
[05:56] *** evalable6 left
[05:56] *** statisfiable6 left
[05:56] *** linkable6 left
[05:57] *** releasable6 joined
[05:57] *** unicodable6 joined
[05:57] *** shareable6 joined
[05:57] *** notable6 joined
[05:58] *** quotable6 joined
[05:58] *** committable6 joined
[05:58] *** bisectable6 joined
[05:58] *** greppable6 joined
[05:58] *** benchable6 joined
[05:58] *** evalable6 joined
[05:59] *** nativecallable6 joined
[05:59] *** linkable6 joined
[05:59] *** bloatable6 joined
[05:59] *** statisfiable6 joined
[05:59] *** sourceable6 joined
[05:59] *** reportable6 joined
[05:59] *** tellable6 joined
[05:59] *** coverable6 joined
[06:06] *** reportable6 left
[06:08] *** reportable6 joined
[06:36] <japhb> timo: I was talking about explicit positional args, not captures.

[06:37] <japhb> I'm actually surprised that brshift is so much faster *at the Raku level*.  I honestly would have expected our overhead to hide that.  Or maybe brshift makes it all the way down to the JIT?

[06:40] <Nicholas> good *, japhb 

[06:40] <Nicholas> good *, *

[07:13] <nine> brshift on native integers is JITed indeed

[07:14] <nine> Becomes mov rax, WORK[reg_b]; mov cl, byte WORK[reg_c]; sar rax, cl; mov WORK[reg_a], rax;

[07:21] *** [Coke] joined
[07:22] <nine> I think the massive difference is not actually in how shifting is faster than dividing in hardware but that even the JITed version of div_i has to check for division by 0 and handle negative divisors

[07:23] *** sena_kun joined
[07:25] *** [Coke]_ left
[08:07] <Kaiepi> i got sick of not being able to do like

[08:07] <Kaiepi> LAPTOP-7I9RCT0C% raku -e 'my constant F = Semaphore.new: 42; use nqp; say nqp::unbox_u(F)'

[08:07] <Kaiepi> 42

[08:08] <Kaiepi> so i'm trying my hand at eliminating libuv from the Semaphore REPR

[08:08] <Kaiepi> since it's missing basic features like sem_getvalue

[08:29] *** Kaiepi left
[09:29] *** evalable6 left
[09:29] *** linkable6 left
[09:31] *** linkable6 joined
[09:32] *** evalable6 joined
[10:15] <timo> cool

[10:53] *** Kaiepi joined
[11:06] *** dogbert2 joined
[11:10] *** dogbert17 left
[11:15] *** frost left
[11:19] *** frost joined
[11:50] *** dogbert2 left
[11:53] *** dogbert11 joined
[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[13:53] *** vrurg_ joined
[13:53] *** vrurg left
[14:21] *** dogbert17 joined
[14:21] *** dogbert11 left
[14:26] *** ismustachio left
[15:26] *** notable6 left
[15:26] *** greppable6 left
[15:26] *** statisfiable6 left
[15:26] *** reportable6 left
[15:26] *** evalable6 left
[15:26] *** quotable6 left
[15:26] *** linkable6 left
[15:26] *** shareable6 left
[15:26] *** coverable6 left
[15:26] *** committable6 left
[15:26] *** tellable6 left
[15:26] *** nativecallable6 left
[15:26] *** bloatable6 left
[15:26] *** benchable6 left
[15:26] *** sourceable6 left
[15:26] *** releasable6 left
[15:26] *** unicodable6 left
[15:26] *** bisectable6 left
[15:27] *** tellable6 joined
[15:27] *** shareable6 joined
[15:27] *** reportable6 joined
[15:27] *** quotable6 joined
[15:27] *** notable6 joined
[15:27] *** coverable6 joined
[15:27] *** bisectable6 joined
[15:27] *** evalable6 joined
[15:27] *** linkable6 joined
[15:27] *** bloatable6 joined
[15:28] *** sourceable6 joined
[15:28] *** greppable6 joined
[15:28] *** committable6 joined
[15:28] *** releasable6 joined
[15:28] *** benchable6 joined
[15:28] *** nativecallable6 joined
[15:28] *** statisfiable6 joined
[15:29] *** unicodable6 joined
[15:38] *** frost left
[16:04] <nine> Just noticed that we've got 2 spec test failures with blocking and nodelay: not ok 126 - Accessing non-existing on num32 array dies, not ok 237 - Accessing non-existing on num64 array dies

[16:06] <Nicholas> IIRC there are two regular spectest fails on master with blocking and something. But I don't know enough to fix them

[16:07] <Geth> ¦ MoarVM/fallback_resolver: a6fbcf6b7f | (Stefan Seifert)++ | 12 files

[16:07] <Geth> ¦ MoarVM/fallback_resolver: Support a fallback resolver when looking for dynamic variables

[16:07] <Geth> ¦ MoarVM/fallback_resolver: review: https://github.com/MoarVM/MoarVM/commit/a6fbcf6b7f

[16:07] <Geth> ¦ MoarVM/fallback_resolver: 35064bf9a3 | (Stefan Seifert)++ | 7 files

[16:07] <Geth> ¦ MoarVM/fallback_resolver: Support fallback resolver in getlexouter

[16:07] <Geth> ¦ MoarVM/fallback_resolver: review: https://github.com/MoarVM/MoarVM/commit/35064bf9a3

[16:07] <Geth> ¦ MoarVM/fallback_resolver: c89c3ec898 | (Stefan Seifert)++ | 10 files

[16:07] <Geth> ¦ MoarVM/fallback_resolver: Support fallback resolver in *getlex*

[16:07] <Geth> ¦ MoarVM/fallback_resolver: review: https://github.com/MoarVM/MoarVM/commit/c89c3ec898

[16:33] *** dogbert11 joined
[16:35] *** dogbert17 left
[16:50] *** dogbert11 left
[16:52] *** dogbert11 joined
[17:05] *** dogbert17 joined
[17:05] *** dogbert11 left
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[19:09] *** linkable6 left
[19:09] *** evalable6 left
[19:09] *** linkable6 joined
[19:09] *** evalable6 joined
[19:11] *** vrurg_ left
[19:13] *** vrurg joined
[19:28] *** sena_kun left
[19:29] *** sena_kun joined
[19:36] *** discord-raku-bot left
[19:36] *** discord-raku-bot joined
[19:37] *** discord-raku-bot left
[19:37] *** discord-raku-bot joined
[20:58] *** sena_kun left
[21:43] <vrurg> m: start loop {}; await start { sleep 1; note "OK"; } 

[21:43] <vrurg> Something is deeply wrong here.

[21:43] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «(timeout)»

[21:44] <vrurg> How come a deep loop in one thread doesn't let complete a promise in another?

[21:45] <vrurg> bisectable6: start loop {}; await start { sleep 1; note "OK"; }

[21:45] <bisectable6> vrurg, Will bisect the whole range automagically because no endpoints were provided, hang tight

[21:47] <bisectable6> vrurg, Output on all releases: https://gist.github.com/27fac2aab893f77bbfa9e98b53efe9f9

[21:48] <bisectable6> vrurg, Bisecting by exit signal (old=2021.09 new=2021.10). Old exit signal: 0 (None)

[21:52] <bisectable6> vrurg, bisect log: https://gist.github.com/732f506a6fe9c2f1343bd695a96eced2

[21:52] <bisectable6> vrurg, Output on all releases and bisected commits: https://gist.github.com/dc566bbda2ecb568b84291c783cfcd7a

[21:57] <vrurg> bisectable6: good=2021.09 bad=2021.10 start loop {}; await start { sleep 1; note "OK"; }

[21:57] <bisectable6> vrurg, Bisecting by exit signal (old=2021.09 new=2021.10). Old exit signal: 0 (None)

[21:58] *** evalable6 left
[21:58] *** linkable6 left
[21:59] *** linkable6 joined
[22:01] *** evalable6 joined
[22:02] <bisectable6> vrurg, bisect log: https://gist.github.com/7716535955e01b2a4306c020eb592ddc

[22:02] <bisectable6> vrurg, There are 224 candidates for the first “new” revision. See the log for more details

[23:01] *** linkable6 left
[23:01] *** evalable6 left
[23:03] *** evalable6 joined
[23:04] *** linkable6 joined
