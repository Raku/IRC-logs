[00:08] *** reportable6 left
[00:09] *** reportable6 joined
[01:50] *** frost joined
[02:27] *** frost left
[02:30] *** frost joined
[04:02] *** sourceable6 left
[04:02] *** releasable6 left
[04:02] *** bisectable6 left
[04:02] *** greppable6 left
[04:02] *** reportable6 left
[04:02] *** benchable6 left
[04:02] *** notable6 left
[04:02] *** bloatable6 left
[04:02] *** coverable6 left
[04:02] *** unicodable6 left
[04:02] *** tellable6 left
[04:02] *** quotable6 left
[04:02] *** committable6 left
[04:02] *** linkable6 left
[04:02] *** nativecallable6 left
[04:02] *** evalable6 left
[04:02] *** shareable6 left
[04:02] *** statisfiable6 left
[04:02] *** shareable6 joined
[04:02] *** coverable6 joined
[04:02] *** bisectable6 joined
[04:02] *** tellable6 joined
[04:02] *** committable6 joined
[04:03] *** sourceable6 joined
[04:03] *** bloatable6 joined
[04:03] *** evalable6 joined
[04:03] *** unicodable6 joined
[04:03] *** statisfiable6 joined
[04:04] *** greppable6 joined
[04:04] *** benchable6 joined
[04:04] *** linkable6 joined
[04:04] *** quotable6 joined
[04:04] *** releasable6 joined
[04:04] *** nativecallable6 joined
[04:05] *** reportable6 joined
[04:05] *** notable6 joined
[06:03] *** evalable6 left
[06:03] *** linkable6 left
[06:03] *** linkable6 joined
[06:04] *** evalable6 joined
[06:08] *** reportable6 left
[06:10] *** reportable6 joined
[06:34] <Geth> ¦ MoarVM: JJ++ created pull request #1709: LTA error message: One usually connects *to* things

[06:34] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1709

[07:02] <Geth> ¦ MoarVM: 79bb406d79 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | src/io/syncsocket.c

[07:02] <Geth> ¦ MoarVM: One usually connects *to* things

[07:02] <Geth> ¦ MoarVM: 

[07:02] <Geth> ¦ MoarVM: As seen here https://stackoverflow.com/questions/72639883/how-to-deal-with-exceptions-in-iosocketinet

[07:02] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/79bb406d79

[07:02] <Geth> ¦ MoarVM: ce1789ac90 | niner++ (committed using GitHub Web editor) | src/io/syncsocket.c

[07:02] <Geth> ¦ MoarVM: Merge pull request #1709 from JJ/patch-2

[07:02] <Geth> ¦ MoarVM: 

[07:02] <Geth> ¦ MoarVM: LTA error message: One usually connects *to* things

[07:02] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ce1789ac90

[07:10] *** evalable6 left
[07:10] *** linkable6 left
[07:10] *** linkable6 joined
[07:11] *** evalable6 joined
[07:36] *** [Coke]_ joined
[07:37] *** [Coke] left
[09:39] *** committable6 left
[09:39] *** nativecallable6 left
[09:39] *** quotable6 left
[09:39] *** shareable6 left
[09:39] *** greppable6 left
[09:39] *** coverable6 left
[09:39] *** unicodable6 left
[09:39] *** evalable6 left
[09:39] *** sourceable6 left
[09:39] *** reportable6 left
[09:39] *** statisfiable6 left
[09:39] *** tellable6 left
[09:39] *** notable6 left
[09:39] *** bloatable6 left
[09:39] *** benchable6 left
[09:39] *** linkable6 left
[09:39] *** bisectable6 left
[09:39] *** releasable6 left
[09:39] *** coverable6 joined
[09:39] *** nativecallable6 joined
[09:40] *** reportable6 joined
[09:40] *** committable6 joined
[09:40] *** tellable6 joined
[09:40] *** notable6 joined
[09:40] *** shareable6 joined
[09:40] *** greppable6 joined
[09:40] *** statisfiable6 joined
[09:40] *** evalable6 joined
[09:40] *** benchable6 joined
[09:41] *** releasable6 joined
[09:41] *** quotable6 joined
[09:41] *** linkable6 joined
[09:41] *** bisectable6 joined
[09:42] *** bloatable6 joined
[09:42] *** sourceable6 joined
[09:42] *** unicodable6 joined
[10:42] *** linkable6 left
[10:42] *** evalable6 left
[10:43] *** evalable6 joined
[10:44] *** linkable6 joined
[11:44] *** linkable6 left
[11:44] *** evalable6 left
[11:44] *** notable6 left
[11:45] *** notable6 joined
[11:45] *** evalable6 joined
[11:45] *** linkable6 joined
[12:06] *** reportable6 left
[12:06] *** [Coke]_ is now known as [Coke]

[12:08] *** reportable6 joined
[12:32] <nine> Aaaah...that crazy "outer frame does not match expected static frame" message seems to have come from signatures not getting their $!code attribute set, so the runtime blindly tried to execute a Scalar object

[12:37] <nine> And 464 spectest files passing now

[12:37] <lizmat> that would count as an aha erlebnis indeed

[12:53] <jnthn> Urgh. Just been investigating a leak in XLSX::Spreadsheet, which golfed to a leak in LibXML, which golfed to a small leaking example whose leakiness depended on the presence of `default { ... }` around something in the reproduction

[12:54] <jnthn> Which in turn pointed to something going on in Rakudo/MoarVM, and it turns out that sometimes we end up with something perpetually in tc->last_handler_result

[12:54] <jnthn> Which means we never run any DESTROY submethods

[13:03] <jnthn> MVM_SPESH_DISABLE=1 raku -e 'class C { submethod DESTROY { note "destroyed" } }; loop { my $x = C.new; given 1 { default {} } }'

[13:04] <jnthn> If one removes the `default` the DESTROY submethods run. Leave it in and they don't

[13:05] <lizmat> yuck, but great detective work!

[13:07] <jnthn> I can see two ways forward, I think

[13:08] <jnthn> 1) Rework the way we invoke finalizers so that we can do it even when tc->last_handler_result is set by saving it and then restoring it. 2) Try to figure out if we can clear it.

[13:08] <jnthn> I suspect 1 is more sure-fire

[13:08] <jnthn> And needs writing code rather than more investigation

[13:18] <jnthn> Got a patch for 1 that fixes the leak, testing/spectesting now

[13:23] *** Kaiepi joined
[13:37] <[Coke]> I am not sure I have the perserverance for that sort of detective work any more (if ever I did) jnthn++

[13:37] <nine> Investigating memory leaks is no fun....

[13:37] <[Coke]> I remember having to dig into some stuff in java, but it was always "how to work around it", not "fix the vm". :)

[13:47] <Geth> ¦ MoarVM/finalize-even-with-handler-result: 3796890b93 | (Jonathan Worthington)++ | src/gc/finalize.c

[13:47] <Geth> ¦ MoarVM/finalize-even-with-handler-result: Run finalizers even with tc->last_handler_result

[13:47] <Geth> ¦ MoarVM/finalize-even-with-handler-result: 

[13:47] <Geth> ¦ MoarVM/finalize-even-with-handler-result: Finalizers can run at pretty much any return point, and it is possible

[13:47] <Geth> ¦ MoarVM/finalize-even-with-handler-result: that they could use exception handling that thus end up replacing the

[13:47] <Geth> ¦ MoarVM/finalize-even-with-handler-result: content of `tc->last_handler_result`, affecting the code running on the

[13:47] <Geth> ¦ MoarVM/finalize-even-with-handler-result: thread before it was asked to run finalizers. The initial solution for

[13:47] <Geth> ¦ MoarVM/finalize-even-with-handler-result: this was to not run finalizers if `tc->last_handler_result` was set, on

[13:47] <Geth> ¦ MoarVM/finalize-even-with-handler-result: <…commit message has 11 more lines…>

[13:47] <Geth> ¦ MoarVM/finalize-even-with-handler-result: review: https://github.com/MoarVM/MoarVM/commit/3796890b93

[13:47] <Geth> ¦ MoarVM: jnthn++ created pull request #1710: Run finalizers even with tc->last_handler_result

[13:47] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1710

[13:56] <jnthn> releasable6: status

[13:56] <releasable6> jnthn, Next release in ≈43 days and ≈5 hours. There are no known blockers. 0 out of 21 commits logged (⚠ 89 warnings)

[13:56] <releasable6> jnthn, Details: https://gist.github.com/70449e74610752e7b8dce831baa06688

[14:21] <nine> jnthn: that finalizer fix seems to have fixed a memory leak in Cro as well!

[14:24] *** frost left
[14:36] <vrurg_> Do I get it right that LEAVE would not mangle with return values anymore?

[14:38] *** vrurg_ is now known as vrurg

[14:51] <jnthn> vrurg: I think that's a separate issue

[14:54] <nine> Darn....as soon as $resolver is referenced by the compiler stub, compilation fails with Missing serialize REPR function for REPR MVMContext (BOOTContext)

[14:54] <nine> (but only when precompiling)

[15:00] <Geth> ¦ MoarVM: 3796890b93 | (Jonathan Worthington)++ | src/gc/finalize.c

[15:00] <Geth> ¦ MoarVM: Run finalizers even with tc->last_handler_result

[15:00] <Geth> ¦ MoarVM: 

[15:00] <Geth> ¦ MoarVM: Finalizers can run at pretty much any return point, and it is possible

[15:00] <Geth> ¦ MoarVM: that they could use exception handling that thus end up replacing the

[15:00] <Geth> ¦ MoarVM: content of `tc->last_handler_result`, affecting the code running on the

[15:00] <Geth> ¦ MoarVM: thread before it was asked to run finalizers. The initial solution for

[15:00] <Geth> ¦ MoarVM: this was to not run finalizers if `tc->last_handler_result` was set, on

[15:00] <Geth> ¦ MoarVM: <…commit message has 11 more lines…>

[15:00] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3796890b93

[15:01] <Geth> ¦ MoarVM: c315523aba | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/gc/finalize.c

[15:01] <Geth> ¦ MoarVM: Merge pull request #1710 from MoarVM/finalize-even-with-handler-result

[15:01] <Geth> ¦ MoarVM: 

[15:01] <Geth> ¦ MoarVM: Run finalizers even with tc->last_handler_result

[15:01] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c315523aba

[15:24] *** Altai-man left
[15:25] *** sena_kun joined
[16:28] *** sena_kun left
[16:30] *** sena_kun joined
[16:55] *** Kaiepi left
[17:24] *** Kaiepi joined
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[19:09] *** evalable6 left
[19:09] *** linkable6 left
[19:10] *** evalable6 joined
[19:11] *** linkable6 joined
[19:20] *** MasterDuke left
[19:34] *** MasterDuke joined
[20:46] <jnthn> nine: Was pondering how it could help Cro, and realized it's perhaps TLS

[20:47] *** moon-child left
[21:58] *** evalable6 left
[21:58] *** linkable6 left
[22:00] *** evalable6 joined
[22:01] *** linkable6 joined
[23:07] *** evalable6 left
[23:07] *** linkable6 left
[23:10] *** evalable6 joined
[23:10] *** linkable6 joined
