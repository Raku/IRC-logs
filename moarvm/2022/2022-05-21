[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[01:43] *** benchable6 left
[01:43] *** sourceable6 left
[01:43] *** evalable6 left
[01:43] *** unicodable6 left
[01:43] *** shareable6 left
[01:43] *** bloatable6 left
[01:43] *** statisfiable6 left
[01:43] *** coverable6 left
[01:43] *** bisectable6 left
[01:43] *** quotable6 left
[01:43] *** tellable6 left
[01:43] *** releasable6 left
[01:43] *** greppable6 left
[01:43] *** notable6 left
[01:43] *** reportable6 left
[01:43] *** linkable6 left
[01:43] *** committable6 left
[01:43] *** nativecallable6 left
[01:43] *** shareable6 joined
[01:44] *** benchable6 joined
[01:44] *** unicodable6 joined
[01:44] *** bisectable6 joined
[01:44] *** committable6 joined
[01:44] *** evalable6 joined
[01:44] *** coverable6 joined
[01:44] *** quotable6 joined
[01:44] *** nativecallable6 joined
[01:44] *** bloatable6 joined
[01:45] *** statisfiable6 joined
[01:45] *** linkable6 joined
[01:45] *** reportable6 joined
[01:46] *** greppable6 joined
[01:46] *** sourceable6 joined
[01:46] *** tellable6 joined
[01:46] *** notable6 joined
[01:46] *** releasable6 joined
[03:21] *** evalable6 left
[03:21] *** linkable6 left
[03:21] *** evalable6 joined
[03:21] *** linkable6 joined
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[06:58] <nine> "into native integer" sounds like it's trying to write into a native _signed_ int. That's why it thinks the value is too large

[07:08] *** linkable6 left
[07:08] *** evalable6 left
[07:09] *** evalable6 joined
[07:10] *** linkable6 joined
[07:12] *** [Coke]_ joined
[07:14] *** [Coke] left
[08:17] <nine> 423!

[08:18] <nine> I think commits like https://github.com/rakudo/rakudo/commit/aeaa906a553c4832571963f6534f58e9d6f8af2d why it's so much more joy to implement features in RakuAST than it was on the old compiler frontend. Good luck with even finding all the bits of sub-signature support in the latter.

[09:15] *** dogbert17 left
[09:54] *** dogbert17 joined
[10:15] *** sena_kun left
[10:16] *** sena_kun joined
[10:19] *** dogbert17 left
[11:16] *** sena_kun left
[11:18] *** sena_kun joined
[12:07] *** reportable6 left
[12:08] *** frost joined
[12:08] <nine> LOL RakuAST does crazy things like sub signature declarations and auto generated protos, but then stumbles over a basic %h<foo>:exists.

[12:08] <nine> Though to be fair, that looks far more innocent than it is.

[12:09] <lizmat> indeed: I remember Larry telling that parsing that was really breaking "only parse once" rule

[12:09] *** reportable6 joined
[12:11] <nine> It's also one of the few features where I really don't understand what they are there for. Why go to all the trouble, complicating the compiler, when a simple %h.has-key('foo') would have been just as good and not introduce this weird special syntax for passing named args?

[12:12] <nine> How many Raku programmers won't see %h<foo>:exist as anything but some special magic syntax?

[12:15] <lizmat> %h.EXISTS-KEY("foo")

[12:15] <lizmat> works

[12:15] <lizmat> fwiw, I think the power of :adv only comes into play with slices

[12:16] <lizmat> m: my %h = :42a, :666b; dd %h<a b>:p

[12:16] <camelia> rakudo-moar 530e17848: OUTPUT: «(:a(42), :b(666))␤»

[13:00] <jnthn> Ah, operator adverbs... They're parsed as fake infixes and then re-arranged, iirc.

[13:01] <jnthn> Don't believe they violate one-pass parsing though

[13:01] <jnthn> They're just an annoyance when constructing expression ASTs

[13:09] *** evalable6 left
[13:09] *** linkable6 left
[13:11] *** evalable6 joined
[13:12] *** linkable6 joined
[13:15] <lizmat> well, I knew there was something tricky there, as I remember it taking Larry a long time to come up with that solution

[13:30] <Nicholas> I've seen this SEGV twice now: https://gist.github.com/nwc10/797b7e49d17a6219d62f30faa32dcd1e

[13:30] <Nicholas> can't reliably reproduce

[13:31] <nine> Well, that wasn't so bad after all and brought us up to 432 passing!

[14:19] *** [Coke]_ is now known as [Coke]

[15:29] *** linkable6 left
[15:29] *** evalable6 left
[15:29] *** linkable6 joined
[15:31] *** evalable6 joined
[15:45] *** frost left
[15:54] *** rypervenche joined
[16:10] *** [Coke] left
[16:10] *** [Coke] joined
[16:15] *** [Coke] left
[16:15] *** [Coke] joined
[17:13] *** sena_kun left
[17:14] *** sena_kun joined
[17:20] *** sena_kun left
[17:21] *** sena_kun joined
[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[19:02] <MasterDuke> lizmat's example is calling MVM_args_get_named_int instead of MVM_args_get_named_uint

[19:03] <MasterDuke> from param_on_i, obviously should be param_on_u

[19:06] <MasterDuke> looks like it's happening inside a QAST::IVal

[19:06] <MasterDuke> do we need a QAST::UVal?

[19:09] <lizmat> not sure

[19:10] <lizmat> m: class A { has int $.a = 42 }; use BUILDPLAN A

[19:10] <camelia> rakudo-moar 530e17848: OUTPUT: «class A BUILDPLAN:␤ 0: nqp::bindattr_i(obj,A,'$!a',:$a) if possible␤ 1: Don't know how to handle: (401, A, "\$!a", 42)␤»

[19:10] <lizmat> m: class A { has uint $.a = 42 }; use BUILDPLAN A

[19:10] <camelia> rakudo-moar 530e17848: OUTPUT: «class A BUILDPLAN:␤ 0: vivify nqp::getattr(obj,A,'$!a') if part of a mixin␤ 1: Don't know how to handle: (410, A, "\$!a", 42)␤»

[19:10] <lizmat> the "nqp::getattr(obj,A,'$!a')" is wrong

[19:11] <lizmat> that should be "nqp::bindattr_u(obj,A,'$!a',:$a) if possible"

[19:11] <lizmat> I guess BUILDPLAN will also need some TLC

[19:11] <lizmat> will look at that tomorrow

[19:17] <nine> ++lizmat

[20:15] *** linkable6 left
[20:15] *** evalable6 left
[20:15] *** evalable6 joined
[20:17] *** linkable6 joined
[20:45] *** sena_kun left
[20:46] *** sena_kun joined
[21:12] *** MasterDuke left
