[00:07] *** reportable6 left
[00:49] *** [Coke]_ joined
[00:52] *** [Coke] left
[00:57] *** tellable6 joined
[00:58] *** nativecallable6 joined
[00:58] *** benchable6 joined
[00:59] *** evalable6 joined
[01:07] *** reportable6 joined
[01:18] *** discord-raku-bot left
[01:18] *** discord-raku-bot joined
[01:18] *** jnthnwrthngtn left
[01:19] *** jnthnwrthngtn joined
[01:23] *** discord-raku-bot left
[01:23] *** discord-raku-bot joined
[01:56] *** shareable6 joined
[02:14] *** discord-raku-bot left
[02:14] *** discord-raku-bot joined
[03:01] *** frost joined
[03:03] *** frost left
[03:56] *** statisfiable6 joined
[03:57] *** bloatable6 joined
[04:57] *** linkable6 left
[04:57] *** evalable6 left
[05:57] *** bloatable6 left
[05:57] *** releasable6 left
[05:57] *** notable6 left
[05:57] *** coverable6 left
[05:57] *** sourceable6 left
[05:57] *** benchable6 left
[05:57] *** committable6 left
[05:57] *** nativecallable6 left
[05:57] *** greppable6 left
[05:57] *** squashable6 left
[05:57] *** bisectable6 left
[05:57] *** reportable6 left
[05:57] *** tellable6 left
[05:57] *** statisfiable6 left
[05:57] *** shareable6 left
[05:57] *** quotable6 left
[05:57] *** unicodable6 left
[05:57] *** quotable6 joined
[05:58] *** bloatable6 joined
[05:58] *** reportable6 joined
[05:58] *** benchable6 joined
[05:58] *** tellable6 joined
[05:59] *** evalable6 joined
[05:59] *** committable6 joined
[05:59] *** bisectable6 joined
[05:59] *** squashable6 joined
[06:00] *** unicodable6 joined
[06:00] *** statisfiable6 joined
[06:07] *** reportable6 left
[06:55] <Nicholas> good *, *

[06:58] *** nativecallable6 joined
[06:59] *** linkable6 joined
[06:59] *** shareable6 joined
[06:59] *** notable6 joined
[06:59] *** releasable6 joined
[06:59] *** sourceable6 joined
[07:00] *** greppable6 joined
[07:45] *** squashable6 left
[07:57] *** coverable6 joined
[08:08] *** reportable6 joined
[08:12] *** japhb left
[08:18] <Geth> ¦ MoarVM: 85fa90c42c | (Nicholas Clark)++ | src/core/bytecode.c

[08:18] <Geth> ¦ MoarVM: Move the repeated code that frees callsites before exceptions to a function

[08:18] <Geth> ¦ MoarVM: 

[08:18] <Geth> ¦ MoarVM: Create `report_deserialize_callsites_violation` to de-duplicate code in

[08:18] <Geth> ¦ MoarVM: `deserialize_callsites` which frees callsites before throwing an exception.

[08:18] <Geth> ¦ MoarVM: 

[08:18] <Geth> ¦ MoarVM: For all use the form of the exception text (with more diagnostics)

[08:18] <Geth> ¦ MoarVM: originally only used for the fourth case.

[08:18] <Geth> ¦ MoarVM: <…commit message has 6 more lines…>

[08:18] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/85fa90c42c

[08:18] <Geth> ¦ MoarVM: 03f023cc6c | (Nicholas Clark)++ | src/core/bytecode.c

[08:18] <Geth> ¦ MoarVM: Fix a bug in `report_deserialize_callsites_violation`

[08:18] <Geth> ¦ MoarVM: 

[08:18] <Geth> ¦ MoarVM: This bug originates from when the code was first added as part of commit

[08:18] <Geth> ¦ MoarVM: c1c25e33fd6f1cce.

[08:18] <Geth> ¦ MoarVM: 

[08:18] <Geth> ¦ MoarVM: Unfortunately it can cause a SEGV, which obscures the actual error message

[08:19] <Geth> ¦ MoarVM: that we are trying to report.

[08:19] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/03f023cc6c

[08:34] *** japhb joined
[08:38] *** frost joined
[08:42] *** frost left
[08:47] *** squashable6 joined
[09:30] <Geth> ¦ MoarVM: e80869eb63 | (Nicholas Clark)++ | 7 files

[09:30] <Geth> ¦ MoarVM: Remove all code for serialization versions earlier than 23

[09:30] <Geth> ¦ MoarVM: 

[09:30] <Geth> ¦ MoarVM: Code compiled with earlier versions assumes "old" dispatch, meaning that the

[09:30] <Geth> ¦ MoarVM: ops it needs will now throw exceptions.

[09:30] <Geth> ¦ MoarVM: 

[09:30] <Geth> ¦ MoarVM: Also remove two comments "TODO ffi support" - FFI support for NativeCall.c

[09:30] <Geth> ¦ MoarVM: was actually implemented in Dec 2019 by commit ff1e55617855f4ab:

[09:30] <Geth> ¦ MoarVM:     Implement serialization of NativeCall sites for libffi

[09:30] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/e80869eb63

[09:30] <Geth> ¦ MoarVM: bee95459f0 | (Nicholas Clark)++ | src/core/bytecode.c

[09:30] <Geth> ¦ MoarVM: Remove all code for bytecode versions earlier than 7

[09:30] <Geth> ¦ MoarVM: 

[09:30] <Geth> ¦ MoarVM: Identical to the previous commit for serialization versions, Code compiled

[09:30] <Geth> ¦ MoarVM: for earlier bytecode versions assumes "old" dispatch, meaning that it will

[09:30] <Geth> ¦ MoarVM: no longer work.

[09:30] <Geth> ¦ MoarVM: 

[09:30] <Geth> ¦ MoarVM: (Code compiled for earlier bytecode versions actually won't have worked for

[09:30] <Geth> ¦ MoarVM: some time due to the incremental effect of other changes changed or removed

[09:30] <Geth> ¦ MoarVM: unused functionality.)

[09:30] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/bee95459f0

[09:33] <lizmat> feels like a bump is in order ?

[09:34] <Nicholas> I have no good feel, really

[09:44] <lizmat> ok, I'll hold for more input  :-)

[09:45] <MasterDuke> hm, i think it should be possible to consolidate the ascii cases for coerce_s_i, radix, and radix_I, which will likely give a bit of a speedup for radix* in those cases. the tricky part is that radix* keeps track of how many chars were converted and coerce_s_i doesn't

[09:45] <lizmat> well, keeping how much has been converted, is a feature that *is* used

[09:45] <MasterDuke> actually, i believe ascii and grapheme8 cases

[09:46] <MasterDuke> definitely

[09:47] <MasterDuke> just trying to figure out if adding that to coerce_s_i will complicate it/slow it down too much

[09:49] <MasterDuke> but we may end up with pulling some of the code out of coerce_s_i that we just inlined, so all three ops can share it

[10:11] <jnthnwrthngtn> moarning o/

[10:11] <Nicholas> \o

[10:11] <MasterDuke> ahoy

[10:11] *** ugexe left
[10:18] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1661: Fix things found by lgtm.com

[10:18] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1661

[10:25] *** ugexe joined
[10:27] <lizmat> bumped anyway for better bisectability :-)

[11:00] <nine> Looks like that Digest failure is its own can of worms.

[11:01] <nine> Ha! "FIXME need autobox_uint" how right I was...

[11:13] <Geth> ¦ MoarVM: b7d2713b08 | (Stefan Seifert)++ | 6 files

[11:13] <Geth> ¦ MoarVM: Implement unsigned native version of binary not op (bnot_u)

[11:13] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/b7d2713b08

[11:13] <Geth> ¦ MoarVM: a0a98d47cc | (Stefan Seifert)++ | src/6model/reprs/P6opaque.c

[11:13] <Geth> ¦ MoarVM: Teach MVM_dump_p6opaque debug function to dump bigints

[11:13] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a0a98d47cc

[11:13] <Geth> ¦ MoarVM: 3ff5b11136 | (Stefan Seifert)++ | src/core/args.c

[11:13] <Geth> ¦ MoarVM: Fix autoboxing of arguments treating unsigned ints as signed

[11:13] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3ff5b11136

[11:34] <MasterDuke> it's really annoying that the reproducible build test doesn't seem to ever fail locally

[11:41] *** AlexDaniel joined
[11:47] *** AlexDaniel left
[12:00] *** AlexDaniel joined
[12:02] *** AlexDaniel left
[12:06] *** reportable6 left
[12:08] *** AlexDaniel joined
[12:20] *** psydroid joined
[12:33] *** [Coke]_ is now known as [Coke]

[12:35] *** AlexDaniel left
[13:07] *** reportable6 joined
[15:23] <MasterDuke> nine: https://github.com/rakudo/rakudo/issues/1515#issuecomment-1026962471 might be up your alley

[15:23] *** AlexDaniel joined
[15:29] <vrurg> We have a SEGV regression. BSON::Simple reliably dies on master on its t/00-use.rakutest

[15:31] <vrurg> Unfortunately, I can't quickly make my linux box produce a core and don't have time for gdb right now.

[15:35] <MasterDuke> doesn't repro right away for me

[15:38] <vrurg> I wasn't able too somehow. Try full rebuild.

[15:39] <vrurg> v2021.12-173-gffa09ff68.

[15:40] <MasterDuke> 2021.12-173-gffa09ff68 here too. that test is just `use`ing the module. i think this is the same bug (or at least related to it) in use/require/precomp that i just reproed

[15:43] <vrurg> Very likely. Out of curiosity, I'm trying 382f2f1084d721df6c3ce24a3dea9a174bbaac82 which is pre-last NQP bump.

[15:43] *** linkable6 left
[15:44] <vrurg> The bump, perhaps, made the bug more reproducible. Pre-bump build works as charm.

[15:45] <nine> I'm curious how you come to that conclusion without backtraces to compare?

[15:45] <vrurg> The test is about module loading.

[15:46] *** linkable6 joined
[15:46] <nine> And the reproduction is about parallel module loading, which we've never been good at

[15:47] <vrurg> Could be a coincidence, of course. That's why it's "likely", even though "very". :)

[15:49] <Geth> ¦ MoarVM: 2abb469945 | (Stefan Seifert)++ | src/6model/reprs/MVMCapture.c

[15:49] <Geth> ¦ MoarVM: Fix segfault after capture-replace-literal-arg with different kind

[15:49] <Geth> ¦ MoarVM: 

[15:49] <Geth> ¦ MoarVM: A comment above MVM_capture_replace_arg already said: "The callsite argument

[15:49] <Geth> ¦ MoarVM: type is expected to be the same". Sadly comments are easy to miss and when

[15:49] <Geth> ¦ MoarVM: arguments are replaced with values of different kinds, we can end up with e.g.

[15:49] <Geth> ¦ MoarVM: a literal number for a callsite argument with kind obj and may try to

[15:49] <Geth> ¦ MoarVM: dereference what we wrongly believe to be a pointer.

[15:49] <Geth> ¦ MoarVM: 

[15:49] <Geth> ¦ MoarVM: Fix by actually enforcing this rule. Fixes the segfault reported in GH #1656

[15:49] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2abb469945

[15:49] <Geth> ¦ MoarVM: ac0dee75b6 | niner++ (committed using GitHub Web editor) | src/6model/reprs/MVMCapture.c

[15:49] <Geth> ¦ MoarVM: Merge pull request #1658 from MoarVM/fix_segfault_after_capture_replace_literal_arg

[15:49] <Geth> ¦ MoarVM: 

[15:49] <Geth> ¦ MoarVM: Fix segfault after capture-replace-literal-arg with different kind

[15:49] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ac0dee75b6

[15:50] *** linkable6 left
[15:51] <vrurg> Anyway, the SEGV is certainly reliable. Switched back to the HEAD and it is back to dying.

[15:52] *** linkable6 joined
[16:19] <vrurg> I have to go now. https://gist.github.com/vrurg/0fb88fb5f54f16d35f81673c5bfb8009 – this is as much as I managed to pull out from a core.

[16:24] <nine> Definitely a different bug then

[16:30] <MasterDuke> vrurg: if you're compiling your own rakudo/moarvm it would be nice to add `--debug=3` to the moarvm build. makes backtraces so much nicer and isn't really any slower

[16:35] <Geth> ¦ MoarVM: d58fa57df3 | (Stefan Seifert)++ | 7 files

[16:35] <Geth> ¦ MoarVM: Implement (bind|get)attrs?_u ops

[16:35] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d58fa57df3

[16:35] <Geth> ¦ MoarVM: ea644a5b1e | (Stefan Seifert)++ | 11 files

[16:35] <Geth> ¦ MoarVM: Implement getattrref_u op

[16:35] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ea644a5b1e

[17:33] <MasterDuke> m: use nqp; my str $s = "  12"; say nqp::coerce_si($s); say nqp::radix(10, $s, 0, 0)

[17:33] <camelia> rakudo-moar 753c173ea: OUTPUT: «0␤(0 0 -1)␤»

[17:34] <MasterDuke> that's interesting. locally i get `12 ` from coerce_si

[17:34] <MasterDuke> which is what i was expecting

[17:35] <MasterDuke> (minus the space i accidentally put in the quotes)

[17:36] <MasterDuke> but what i really wanted to point out was the difference between coerce and radix in how they handle leading spaces

[17:37] <MasterDuke> which makes my plan to consolidate some of their implementations look more complicated

[17:37] <MasterDuke> m: use nqp; my str $s = "1_2"; say nqp::coerce_si($s); say nqp::radix(10, $s, 0, 0)  # another difference

[17:37] <camelia> rakudo-moar 753c173ea: OUTPUT: «1␤(12 2 3)␤»

[17:49] <Nicholas> MasterDuke: JVM and MoarVM already disagree on what coerce_si does with leading spaces. And jnthnwrthngtn previously has said that the nqp spec is rougly "whatever the tests say", and this isn't tested yet, so we could figure out that it can all converge. See https://github.com/Raku/nqp/pull/759 (partly)

[17:50] <lizmat> converging++

[17:52] <MasterDuke> yeah. trying to decide if i should make two versions of this change, one keeping current behavior and one converging as much as possible, or just go right to converging as much as possible and seeing if the benefit is worth dealing with any potential breakage

[17:53] <[Coke]> benefit other than "single code path" ?

[17:54] <MasterDuke> some faster hotpaths may be possible

[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[19:03] <dogbert17> m: class :: { has uint8  $.x; }.new( x => 2** 8-1 ).x.say

[19:03] <camelia> rakudo-moar a38bebecf: OUTPUT: «-1␤»

[19:04] <dogbert17> found this in the old bug repo

[19:42] *** linkable6 left
[20:44] *** linkable6 joined
[20:57] *** Kaiepi left
[21:58] *** vrurg left
[21:58] *** vrurg joined
[22:03] *** Kaiepi joined
