[00:09] *** reportable6 left
[00:12] *** reportable6 joined
[00:52] *** evalable6 joined
[01:35] *** frost joined
[01:42] *** frost left
[02:27] *** frost joined
[02:39] *** frost left
[03:10] *** frost joined
[03:13] *** discord-raku-bot left
[03:13] *** discord-raku-bot joined
[03:17] *** discord-raku-bot left
[03:17] *** discord-raku-bot joined
[03:20] *** frost left
[04:10] *** frost_ joined
[04:14] *** frost_ left
[04:16] *** frost joined
[04:20] *** frost left
[04:23] *** frost joined
[04:30] *** frost left
[05:10] *** frost joined
[05:25] *** Kaipi joined
[05:35] *** discord-raku-bot left
[05:35] *** kjp left
[05:37] *** RakuIRCLogger__ joined
[05:38] *** RakuIRCLogger left
[05:40] *** discord-raku-bot joined
[05:40] *** kjp joined
[05:40] *** Altai-man joined
[05:40] *** TempIRCLogger joined
[05:40] *** japhb joined
[05:40] *** Geth joined
[06:08] *** reportable6 left
[06:14] *** frost left
[06:41] <Nicholas> good *, #moarvm 
[07:10] *** reportable6 joined
[07:18] <nine> Oh is it * again?
[07:22] <Nicholas> the light is on in the big blue room - it certainly looks that way
[07:22] <nine> Isn't much light though, so I remain skeptical
[08:03] *** patrickb joined
[08:03] *** patrickb left
[08:12] *** patrickb joined
[08:24] <Nicholas> nine: the window in this room faces (roughly) south and it was fairly blue that way. But going upstairs to get coffee, I can see a thick wall of grey in your direction.
[08:25] <Nicholas> Looks pretty solid (at least for clouds). So if I extrapolate wildly ("this is what we do in the Internet, right?") that it's 200km or so thick, that will explain everything?
[08:25] <Nicholas> fresh pack of coffee. smells good...
[08:40] <nine> The first whiff when you open a pack, that's perfection
[08:41] <MasterDuke> i love the little one-way valve they have so you can squeeze a closed pack and still get that smell
[08:57] <Voldenet> Who said it's one way – when you smell coffee the coffee also smells you.
[08:57] <Voldenet> Whoever smells coffee should see to it that he does not become coffee in the process.
[08:58] <Voldenet> this quote makes less sense in the context than I initially thought, hm
[09:00] <Nicholas> this feels like a feed line, that leads to "you are typing this before you have had coffee?"
[09:01] <Voldenet> Yes
[09:15] <Geth> ¦ MoarVM/master: 9 commits pushed by (Nicholas Clark)++, (Daniel Green)++
[09:15] <Geth> ¦ MoarVM/master: 1d779128b0 | Convert remaining direct calls to `malloc`/`free`/ to the MVM_* wrappers
[09:15] <Geth> ¦ MoarVM/master: e306759e6f | Abstract `strdup` and `strndup` as `MVM_strdup`/`MVM_strndup`
[09:15] <Geth> ¦ MoarVM/master: 248aa337f0 | Link with BCrypt for mingw
[09:15] <Geth> ¦ MoarVM/master: eaaeab54ff | In Configure.pl use a '!' flag to --telemeh to implement --no-telemeh
[09:15] <Geth> ¦ MoarVM/master: e73882507f | Add a Configure.pl probe for working #include <stdatomic.h>
[09:15] <Geth> ¦ MoarVM/master: 8a5be0d9bf | Add mimalloc submodule
[09:15] <Geth> ¦ MoarVM/master: 0a8a66d57f | Permit building with mimalloc instead of libc malloc
[09:15] <Geth> ¦ MoarVM/master: 9f0a3bdbb1 | Default to mimalloc if using MSVC
[09:15] <Geth> ¦ MoarVM/master: 2d9ad7453f | Merge pull request #1638 from nwc10/mimalloc-optional
[09:15] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/677d1fd6c842...2d9ad7453f3b
[09:16] <lizmat> good *!
[09:16] <lizmat> is this bumpable?  nine: or should I wait until you've bumped?
[09:16] <Nicholas> lets wait until the CI runs...
[09:20] <MasterDuke> oooh, maybe now it's time to experiment with removing the fsa completely...
[09:26] <Nicholas> it's also not clear whether 
[09:26] <Nicholas> oops
[09:26] <Nicholas> whether mi_good_size() is useful anywhere https://microsoft.github.io/mimalloc/group__extended.html#gac057927cd06c854b45fe7847e921bd47
[09:27] <Nicholas> ie - is there code that allocates a buffer of size $whatever, and records that $whatever with the pointer to the buffer, so that later code can grow the buffer if needed
[09:27] <nine> arrays
[09:27] <Nicholas> Ah OK good
[09:27] <Nicholas> anyway, IIRC macOS system malloc has something similar
[09:28] <Nicholas> and it's trvial not to be tied to mimalloc with this - the fallback wrapper is #define MVM_good_size(foo) (foo)
[09:32] <nine> [   56s] src/moar.h:29:10: fatal error: mimalloc.h: No such file or directory
[09:32] <nine> [   56s]    29 | #include <mimalloc.h>
[09:32] <nine> https://build.opensuse.org/package/live_build_log/home:niner9:rakudo-git/moarvm/openSUSE_Factory_ARM/armv7l
[09:32] <nine> Same here: https://build.opensuse.org/package/live_build_log/home:niner9:rakudo-git/moarvm/openSUSE_Factory_ARM/aarch64
[09:32] <Nicholas> it's in .gitmodules
[09:34] <nine> My script does git pull ; git submodule update
[09:35] <Nicholas> I think it might need a `git submodule init` too. *But* I don't know this stuff well. And I forget what happened with ryu
[09:37] <nine> git submodule update has an optional --init flag, but I can't find docs on what it does...
[09:37] <Voldenet> you need git submodule update –recursive
[09:39] <nine> Ah, it's documented in git submodule init
[09:39] <nine> I changed it to git -C MoarVM submodule update --init --recursive just to be sure. We'll see how it goes
[09:41] <Voldenet> git has submodule.recurse setting which makes pulls a lot easier
[09:44] <MasterDuke> oh, i realized this the other day but forgot to comment, we probably want something like `#ifdef MIMALLOC #define MVM_malloc_trim mi_collect #else #define MVM_malloc_trim malloc_trim #endif`
[09:59] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1641: Make value_desc_cont_atomic_store() static
[09:59] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1641
[10:00] <Geth> ¦ MoarVM: 1351cfe6fd | (Daniel Green)++ | src/6model/containers.c
[10:00] <Geth> ¦ MoarVM: Make value_desc_cont_atomic_store() static
[10:00] <Geth> ¦ MoarVM: 
[10:00] <Geth> ¦ MoarVM: Looks like it was just an accidental omission when it was added.
[10:00] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/1351cfe6fd
[10:00] <Geth> ¦ MoarVM: fcbbfc660f | MasterDuke17++ (committed using GitHub Web editor) | src/6model/containers.c
[10:00] <Geth> ¦ MoarVM: Merge pull request #1641 from MasterDuke17/make_value_desc_cont_atomic_store_static
[10:00] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/fcbbfc660f
[10:22] *** frost joined
[10:29] <MasterDuke> ugh, i don't think we can easily switch MVM_recalloc to use mi_recalloc. we currently pass the old size and the new size to MVM_recalloc, and then manually memset the difference. but mi_recalloc takes the new count and new size (like calloc)
[10:30] <MasterDuke> so if we change MVM_recalloc to take count and size then where we don't use mimalloc we can't know what to memset
[10:31] <moon-child> why not just pass mi_recalloc a count of n and size of 1 (or vice versa)?
[10:32] <MasterDuke> well, i was just thinking about that
[10:33] <MasterDuke> but i wonder if that'll throw off any expectations/optimizations in the implementation of mi_recalloc. i.e., yeah it should work correctly, but will performance be negatively effected?
[10:34] <moon-child> literally the only reason calloc takes separately a count and a size is so it can do overflow checking
[10:34] <moon-child> there's no reason to do more than that
[10:35] <moon-child> https://github.com/microsoft/mimalloc/blob/master/src/alloc.c#L664
[10:35] *** frost left
[10:35] <moon-child> .oO(could also just call rezalloc)
[10:37] <MasterDuke> ah, nice. i wondered if perhaps it did something with it's various heaps and bin sizes, but looks like not
[10:40] <jnthnwrthngtn> moarning o/
[10:43] <Nicholas> \o
[10:53] *** frost joined
[10:54] <MasterDuke> huh.https://gist.github.com/MasterDuke17/b8d6531470da743700249a16912c6af4 causes an insta-MVM_panic in the nqp build
[10:55] <MasterDuke> which i guess means somewhere we're recallocing memory that wasn't originally calloced
[10:56] <MasterDuke> now how to find where...
[10:56] <Nicholas> rr?
[10:56] <Nicholas> this seems like a "wind time backwards" problem
[10:58] <MasterDuke> oh, but https://github.com/microsoft/mimalloc/issues/63 suggest mi_rezalloc is going away...
[11:04] <MasterDuke> well, i guess no real harm in leaving things as they are right now, the mimalloc implementation pretty much does just what we do (i.e., memset to 0 the difference)
[11:06] <timo> it's wind time! except backwards, so it would be dniw
[11:39] *** sena_kun joined
[11:55] *** frost left
[12:07] *** reportable6 left
[12:14] <MasterDuke> iirc,the fsa provided two benefits. first was faster allocation for small sizes, which is apparently not so useful now that we're using mimalloc. but the second was the *_at_safepoint mechanism, which was part of the point of using the fsa for things like the body (actual slots + metadata) of arrays, so that modifying them from separate threads
[12:14] <MasterDuke> would cause things like an MVM_panic instead of a segv
[12:16] <MasterDuke> so simply removing the fsa entirely will regress that second benefit. instead, should create MVM_*_at_safepoint functions that just use regular MVM_* alloc functions instead of MVM_fixed_size_* alloc functions
[12:18] <MasterDuke> does this sound correct?
[12:19] *** frost joined
[12:25] <nine> yes
[12:26] *** frost left
[12:40] <Nicholas> seems correct to me. Also, as the FSA already has to handle pointers to allocations larger than its largest bucket, the code must exist already
[12:42] *** frost joined
[12:55] <Geth> ¦ MoarVM: nwc10++ created pull request #1642: update-submodules.pl should handle linked worktrees created by git-worktree
[12:55] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1642
[13:11] *** sena_kun_ joined
[13:13] *** sena_kun left
[14:11] *** reportable6 joined
[14:52] *** frost left
[14:55] *** discord-raku-bot left
[14:55] *** discord-raku-bot joined
[15:19] *** RakuIRCLogger__ left
[15:19] *** lizmat left
[15:19] *** Geth left
[15:20] *** TempIRCLogger left
[15:29] *** TempIRCLogger joined
[15:30] *** lizmat joined
[15:30] *** RakuIRCLogger joined
[15:34] *** RakuIRCLogger left
[15:35] *** RakuIRCLogger joined
[15:46] *** TempIRCLogger left
[15:46] *** RakuIRCLogger left
[15:48] *** lizmat left
[15:49] *** TempIRCLogger joined
[16:03] *** Geth joined
[16:06] <lizmat> hmmm... looks like my ISP had 2 outages: one 11 mins, and one 5 mins
[16:07] <lizmat> fortunately, the loggers recovered ok
[16:07] <lizmat> but Geth needed a manual restart somehow
[16:11] *** discord-raku-bot left
[16:12] *** discord-raku-bot joined
[16:12] *** cognominal joined
[17:10] *** dogbert17 left
[17:20] *** dogbert17 joined
[17:54] *** [Coke] left
[17:58] *** [Coke] joined
[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[18:15] *** Geth left
[18:15] *** Geth joined
[18:26] *** nebuchad` joined
[18:27] *** SmokeMachine_ joined
[18:27] *** childlikempress joined
[18:27] *** leont_ joined
[18:29] *** jnthn joined
[18:29] *** sena_kun_ left
[18:30] *** nine_ joined
[18:32] *** moon-chi- joined
[18:34] *** childlikempress left
[18:34] *** nine left
[18:34] *** moon-child left
[18:34] *** SmokeMachine left
[18:34] *** nebuchadnezzar left
[18:34] *** leont left
[18:34] *** jnthnwrthngtn left
[18:34] *** rba left
[18:34] *** cognominal left
[18:34] *** RakuIRCLogger left
[18:34] *** sena_kun_ left
[18:34] *** kjp left
[18:34] *** Altai-man left
[18:34] *** japhb left
[18:34] *** patrickb left
[18:34] *** MasterDuke left
[18:34] *** bartolin left
[18:34] *** leedo left
[18:34] *** Techcable left
[18:34] *** ugexe left
[18:34] *** camelia left
[18:34] *** SmokeMachine_ is now known as SmokeMachine
[18:34] *** rba_ is now known as rba
[18:34] *** leont_ is now known as leont
[18:35] *** nine left
[18:35] *** moon-child left
[18:35] *** SmokeMachine left
[18:35] *** nebuchadnezzar left
[18:35] *** leont left
[18:35] *** jnthnwrthngtn left
[18:35] *** rba left
[18:35] *** Geth left
[18:35] *** dogbert17 left
[18:35] *** lizmat left
[18:35] *** Voldenet left
[18:35] *** gfldex left
[18:35] *** AlexDaniel left
[18:35] *** JRaspass left
[18:35] *** jdv left
[18:35] *** Nicholas left
[18:35] *** samcv left
[18:35] *** timo left
[18:35] *** ilogger2 left
[18:35] *** harrow left
[18:35] *** samebchase left
[18:35] *** TempIRCLogger left
[18:35] *** psydroid left
[18:35] *** rypervenche left
[18:35] *** tbrowder left
[18:35] *** Util_ left
[18:35] *** reportable6 left
[18:35] *** [Coke] left
[18:35] *** discord-raku-bot left
[18:35] *** Kaipi left
[18:35] *** evalable6 left
[18:35] *** linkable6 left
[18:35] *** squashable6 left
[18:35] *** sourceable6 left
[18:35] *** quotable6 left
[18:35] *** statisfiable6 left
[18:35] *** unicodable6 left
[18:35] *** notable6 left
[18:35] *** committable6 left
[18:35] *** releasable6 left
[18:35] *** tellable6 left
[18:35] *** bloatable6 left
[18:35] *** benchable6 left
[18:35] *** bisectable6 left
[18:35] *** nativecallable6 left
[18:35] *** coverable6 left
[18:35] *** shareable6 left
[18:35] *** greppable6 left
[18:35] *** codesections left
[18:35] *** vrurg left
[18:38] *** discord-raku-bot left
[18:38] *** discord-raku-bot joined
[18:38] *** nebuchad` joined
[18:38] *** cognominal joined
[18:38] *** RakuIRCLogger joined
[18:38] *** patrickb joined
[18:38] *** japhb joined
[18:38] *** Altai-man joined
[18:38] *** kjp joined
[18:38] *** MasterDuke joined
[18:38] *** Techcable joined
[18:38] *** camelia joined
[18:38] *** bartolin joined
[18:38] *** leedo joined
[18:38] *** ugexe joined
[18:39] *** moon-chi- joined
[18:39] *** nine_ joined
[18:39] *** jnthn joined
[18:39] *** leont joined
[18:39] *** SmokeMachine joined
[18:39] *** rba joined
[18:39] *** Geth joined
[18:39] *** reportable6 joined
[18:39] *** [Coke] joined
[18:39] *** dogbert17 joined
[18:39] *** TempIRCLogger joined
[18:39] *** lizmat joined
[18:39] *** Kaipi joined
[18:39] *** evalable6 joined
[18:39] *** linkable6 joined
[18:39] *** squashable6 joined
[18:39] *** sourceable6 joined
[18:39] *** quotable6 joined
[18:39] *** statisfiable6 joined
[18:39] *** unicodable6 joined
[18:39] *** notable6 joined
[18:39] *** committable6 joined
[18:39] *** releasable6 joined
[18:39] *** tellable6 joined
[18:39] *** bloatable6 joined
[18:39] *** benchable6 joined
[18:39] *** bisectable6 joined
[18:39] *** nativecallable6 joined
[18:39] *** coverable6 joined
[18:39] *** shareable6 joined
[18:39] *** greppable6 joined
[18:39] *** codesections joined
[18:39] *** vrurg joined
[18:39] *** psydroid joined
[18:39] *** AlexDaniel joined
[18:39] *** gfldex joined
[18:39] *** Voldenet joined
[18:39] *** jdv joined
[18:39] *** JRaspass joined
[18:39] *** samebchase joined
[18:39] *** harrow joined
[18:39] *** timo joined
[18:39] *** samcv joined
[18:39] *** Nicholas joined
[18:39] *** ilogger2 joined
[18:39] *** Util_ joined
[18:39] *** tbrowder joined
[18:39] *** rypervenche joined
[18:40] *** discord-raku-bot joined
[19:42] *** bloatable6 left
[19:42] *** nativecallable6 left
[19:42] *** coverable6 left
[19:42] *** statisfiable6 left
[19:42] *** notable6 left
[19:42] *** sourceable6 left
[19:42] *** reportable6 left
[19:42] *** quotable6 left
[19:42] *** greppable6 left
[19:42] *** linkable6 left
[19:42] *** bisectable6 left
[19:42] *** evalable6 left
[19:42] *** releasable6 left
[19:42] *** benchable6 left
[19:42] *** tellable6 left
[19:42] *** committable6 left
[19:42] *** shareable6 left
[19:42] *** squashable6 left
[19:42] *** unicodable6 left
[19:42] *** evalable6 joined
[19:43] *** greppable6 joined
[19:43] *** benchable6 joined
[19:43] *** committable6 joined
[19:43] *** notable6 joined
[19:43] *** nativecallable6 joined
[19:55] <Nicholas> OK, naughty denizens of #moarvm, struct MVMRegister *might* need 8-byte alignment on 32 bit systems...
[19:55] <Nicholas> (this is progress)
[19:55] *** moon-chi- is now known as moon-child
[20:01] *** discord-raku-bot left
[20:01] *** discord-raku-bot joined
[20:05] <Nicholas> sparc64++ # the best bastard out there for checking alignment
[20:06] <Nicholas> sparc64 hardware in 32 bit mode is somewhat more fun than sparc64 hardware in 64 bit mode
[20:06] <Nicholas> because the compiler *knows*
[20:35] <Nicholas> OK, culprit is:
[20:35] <Nicholas>     tc->stack_top = allocate_record(tc, MVM_CALLSTACK_RECORD_DISPATCH_RUN,
[20:35] <Nicholas>             sizeof(MVMCallStackDispatchRecord) + num_temps * sizeof(MVMRegister));
[20:36] <Nicholas> figuring an elegant solution...
[20:38] *** nine_ is now known as nine
[20:40] <nine> Could that cause those strange hangs I see on aarch64 and armv7l?
[20:41] <Nicholas> unlikely. it's an failing-to-be-64-bit-aligned issue, which seems only to matter on sparc
[20:41] <Nicholas> (and probably ia64, which I don't have useful access to, and maybe parisc64 and alpha. I raelised about 15 minutes ago that there's a connection between all of those)
[20:42] <Nicholas> and I can't replicate your hang, but I don't know how the system I tried it on differs
[20:42] <nine> They are kinda random
[20:42] *** bloatable6 joined
[20:43] <Nicholas> so maybe I need a loop...
[20:43] *** coverable6 joined
[20:43] *** statisfiable6 joined
[20:44] *** quotable6 joined
[20:44] *** unicodable6 joined
[20:44] *** bisectable6 joined
[20:58] <Nicholas> jnthn: on line 302 of src/core/callstack.c, why is the allocation calculated as sizeof(MVMCallStackDispatchRecord) and not sizeof(MVMCallStackDispatchRun) ?
[21:07] <nine> Smells fishy
[21:07] <Nicholas> it's (relatively) safe - allocated sizeof(...) is 200, used sizeof(...) is 76
[21:07] <Nicholas> but does seem wrong
[21:09] <nine> Probably costs a tiny bit of performance
[21:31] <MasterDuke> ugh. just removed the fsa, but get a segfault pretty soon in the nqp build
[21:37] <MasterDuke> oh, i bet need to rebootstrap because i removed stuff from MVMInstance
[21:39] <jnthn> Nicholas: Sounds like copy-pasta
[21:40] <jnthn> Oh or
[21:40] <jnthn> Hm, I notice after some reconnect my nick as changed :)
[21:40] *** jnthn is now known as jnthnwrthngtn
[21:40] <jnthnwrthngtn> Alas, that one's still reg'd
[21:41] <jnthnwrthngtn> Anyway, if none of the dispatch programs we run work out we'd need to then record a new one, so it's possible the thinking was to permit reuse of the record and then events overtook it. I don't really remember.
[21:41] <jnthnwrthngtn> (I know how it ended up is discarding the run record and making a record record)
[21:42] <jnthnwrthngtn> But probably it was copy pasta
[21:42] *** tellable6 joined
[21:43] *** sourceable6 joined
[21:43] *** reportable6 joined
[21:44] *** shareable6 joined
[21:45] *** releasable6 joined
[21:58] <MasterDuke> does https://gist.github.com/MasterDuke17/d1c269498d39b2e9fccf1232c4cbffbf look like a correct implementation of MVM_realloc_at_safepoint()?
[22:03] <jnthnwrthngtn> No. You can't actually implement it in terms of realloc
[22:03] <MasterDuke> oh?
[22:04] <MasterDuke> has to be a new alloc?
[22:04] <jnthnwrthngtn> Yes, otherwise there's no previous alloc to defer the deallocation of until a safepoint
[22:05] <jnthnwrthngtn> Yes, otherwise there's no previous alloc to defer the deallocation of until a safepoint
[22:05] <jnthnwrthngtn> The only optimization available is to do nothing is new_size == old_size (or under the FSA, if they would go into the same bin)
[22:07] <jnthnwrthngtn> Ah, the other optimization is if minmalloc exposes something where you can say "do the realloc but only if you don't change the pointer"
[22:07] <jnthnwrthngtn> (that is, it can enlarge it because there's already free memory after the block)
[22:07] <jnthnwrthngtn> I've no idea if it has such a feature
[22:07] <MasterDuke> yeah, i think they have mi_expand or something like that
[22:07] <jnthnwrthngtn> OK, that may allow safety + more efficiency
[22:08] <jnthnwrthngtn> The rule is that any memory reads based on the pointer passed into realloc up to the extent of the original size must continue to work until the safepoint
[22:08] <jnthnwrthngtn> (Sorry if that's not very clearly staged, I'm a little tired...)
[22:08] <jnthnwrthngtn> heh, stated. Point proved :D
[22:08] <MasterDuke> huh. nqp built ok and passed `make m-test`, but the rakudo build just died in stage parse with `This representation (P6int) cannot unbox to a native string (for type BOOTInt)`
[22:09] <MasterDuke> thanks, that's all helpful
[22:10] <jnthnwrthngtn> I can imagine NQP building with this wrong given safepoint-y stuff only tends to come into play when there's multiple threads at work
[22:15] <MasterDuke> rakudo just built (this is all with the fsa 99.9% removed)
[22:15] <jnthnwrthngtn> Will be interesting to see any timing results :)
[22:15] <MasterDuke> stage parse looked about the same
[22:16] <jnthnwrthngtn> The same but with less code we have to maintain is still a win, I guess.
[22:18] <MasterDuke> looks like ~500 fewer lines
[22:23] <MasterDuke> hm, bunch of spectest fails though
[23:44] *** linkable6 joined
