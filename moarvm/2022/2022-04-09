[00:05] *** reportable6 left
[00:06] *** reportable6 joined
[01:06] *** evalable6 left
[01:06] *** committable6 left
[01:06] *** reportable6 left
[01:06] *** notable6 left
[01:06] *** linkable6 left
[01:06] *** statisfiable6 left
[01:06] *** coverable6 left
[01:06] *** releasable6 left
[01:06] *** nativecallable6 left
[01:06] *** shareable6 left
[01:06] *** bisectable6 left
[01:06] *** benchable6 left
[01:06] *** bloatable6 left
[01:06] *** unicodable6 left
[01:06] *** greppable6 left
[01:06] *** sourceable6 left
[01:06] *** quotable6 left
[01:07] *** benchable6 joined
[01:07] *** notable6 joined
[01:07] *** linkable6 joined
[01:07] *** sourceable6 joined
[01:07] *** statisfiable6 joined
[01:07] *** coverable6 joined
[01:08] *** evalable6 joined
[01:08] *** reportable6 joined
[01:08] *** shareable6 joined
[01:08] *** committable6 joined
[01:08] *** bisectable6 joined
[01:08] *** greppable6 joined
[01:08] *** quotable6 joined
[01:08] *** nativecallable6 joined
[01:09] *** bloatable6 joined
[01:09] *** releasable6 joined
[01:09] *** unicodable6 joined
[01:20] *** japhb left
[01:23] *** japhb joined
[03:19] *** linkable6 left
[03:19] *** evalable6 left
[03:22] *** evalable6 joined
[03:22] *** linkable6 joined
[04:22] *** benchable6 left
[04:22] *** coverable6 left
[04:22] *** sourceable6 left
[04:22] *** notable6 left
[04:22] *** releasable6 left
[04:22] *** greppable6 left
[04:22] *** committable6 left
[04:22] *** statisfiable6 left
[04:22] *** linkable6 left
[04:22] *** unicodable6 left
[04:22] *** shareable6 left
[04:22] *** evalable6 left
[04:22] *** nativecallable6 left
[04:22] *** bisectable6 left
[04:22] *** reportable6 left
[04:22] *** bloatable6 left
[04:22] *** quotable6 left
[04:22] *** greppable6 joined
[04:23] *** quotable6 joined
[04:23] *** nativecallable6 joined
[04:23] *** bloatable6 joined
[04:23] *** sourceable6 joined
[04:23] *** notable6 joined
[04:23] *** unicodable6 joined
[04:23] *** benchable6 joined
[04:23] *** reportable6 joined
[04:23] *** committable6 joined
[04:24] *** linkable6 joined
[04:24] *** bisectable6 joined
[04:24] *** statisfiable6 joined
[04:25] *** releasable6 joined
[04:25] *** coverable6 joined
[04:25] *** evalable6 joined
[04:25] *** shareable6 joined
[05:27] *** frost joined
[05:27] *** frost left
[05:51] *** frost joined
[06:07] *** reportable6 left
[06:07] *** reportable6 joined
[08:31] <nine> jnthnwrthngtn: 329!

[08:31] <nine> jnthnwrthngtn: https://github.com/rakudo/rakudo/commit/997c4f20b2 adds API and needs review

[10:24] <lizmat> looks like we can't build on Windows since https://dev.azure.com/Rakudo/rakudo/_build/results?buildId=2509&view=logs&jobId=5b519533-8a6a-5ec0-9930-bcff75bff664&j=5b519533-8a6a-5ec0-9930-bcff75bff664&t=7676d444-d131-54a2-fb1a-407ed1ecd095 ?

[10:30] <MasterDuke> a quick google suggests atomic support wasn't added until visual studio 2022

[10:30] <MasterDuke> but CI uses Visual Studio 2019

[10:33] <lizmat> so: does that mean we have an issue with testing, or more generally with building ?

[10:36] <MasterDuke> we could revert a3476e286967f33af50c6dad821db16bf347b5bc (which made C11 atomics the default), we could add the `--no-c11-atomics` MoarVM option to our Windows CI jobs, we could add a probe in Configure.pl to check whether C11 atomics are actually supported

[10:36] <lizmat> feels like the last option would be best ?

[10:36] *** linkable6 left
[10:37] <nine> indeed

[10:39] *** linkable6 joined
[10:58] <nine> method multi_declarator:sym<multi>

[10:59] <nine> And suddenly the flexibility of routine names makes so much sense...

[11:24] <nine> Surprisingly just parsing multi declarators (and still compiling them into plain normal only routines) gets us to 331

[11:38] *** sena_kun left
[11:39] *** sena_kun joined
[12:06] *** reportable6 left
[12:08] *** reportable6 joined
[12:11] <jnthnwrthngtn> omg, I must have been sleepy when I did the Rat parsing stuff, it was doing it wrong

[12:11] <jnthnwrthngtn> So Rat literals often got the wrong values

[12:11] <jnthnwrthngtn> Fixing that is worth 32 extra passes, bringing us to 356 even before I pull nine++'s latest things :)

[12:14] <lizmat> jnthnwrthngtn++   

[12:20] <jnthnwrthngtn> nine: Mixed feelings about the signature "tell, don't ask" changes, in so far as I'm not sure if it will have a negative impact when folks manipulate the AST (for example, add extra parameters)

[12:21] <jnthnwrthngtn> Plus now we have a mix of "some properties (like invocant type) are discovered through attachment, others are pushed down at BEGIN time"

[12:22] <nine> It has the benefit of being a solution I could find. It had no competitors...

[12:25] <nine> It's not clear whose responsibility it is to determine those types. I could argue it both ways. It'd certainly be easier (more magical) for parameters to do it. But then this magic may also be a bit surprising and get in the way. Arguably it's for the owner to decide these things.

[12:27] <nine> We can of course go all the way and treat invocant type the same. At least that would make it consistent. Only reason I didn't do it is that I wanted to get by with as few changes as possible.

[12:30] <jnthnwrthngtn> The attachment mechanism is meant to be the general way for handling situations where compilation and meta-object production depends on the surrounding context, although it's certainly the case that timing and similar around it is not fully fleshed out yet

[12:31] <nine> BEGIN makes everything hard

[12:31] <jnthnwrthngtn> Right, and I'm certainly not "done" in terms of exploring that territory in the RakuAST design

[12:32] <nine> So I suggest leaving it as it is for now, so we continue to make progress and collect more use cases and re-visit that part later with a hopefully better design.

[12:38] <jnthnwrthngtn> OK, hopefully the revisit won't be too painful.

[12:39] <jnthnwrthngtn> Seems we're up to 375 passing tests

[12:40] <jnthnwrthngtn> Blasting us well over the 25% mark (27.7%)

[12:41] <MasterDuke> nice

[12:43] <jnthnwrthngtn> In general, I want to try and avoid too many special-case interactions between AST nodes. So I hunt for generic things (like visiting, the attachment mechanism) that extract common "node interaction patterns" and solve many problems at once.

[12:43] <jnthnwrthngtn> The expression thunk thing is another example of that

[12:44] <jnthnwrthngtn> Timing *also* comes up there, though: when is the right time for an expression to get its whatever-code thunker attached?

[12:44] <jnthnwrthngtn> (I don't know yet.)

[12:45] <jnthnwrthngtn> BEGIN time execution also implies that we might need to push parts of the AST into later "stages" than we might naturally otherwise do

[12:46] <jnthnwrthngtn> It may be that at the point you BEGIN-time evaluate something, the AST below that point is made immutable, for example.

[12:47] <jnthnwrthngtn> Anyway, I guess there's some kind of lifetime model to come up with here.

[12:48] <jnthnwrthngtn> That should also rationalize the difference between EVAL from parse-time and EVAL from synthetic AST

[12:49] <jnthnwrthngtn> Or when synthetic AST appears in a parse-produced AST (for example, thanks to a macro)

[12:50] <jnthnwrthngtn> (Effectively, in the case we're parsing, BEGIN-time effects can affect how we parse/interpret what follows. But in a synthetic AST, well, it's already decided what things are. A bit like how precedence is no longer a question in an AST.)

[12:51] <nine> How would traits then work with a synthetic AST?

[12:52] <jnthnwrthngtn> The BEGIN-time effects are performed, it's just that there's not a parsing triggering them "as soon as possible"

[12:53] <jnthnwrthngtn> The question is what the rules are for triggering that

[12:53] <jnthnwrthngtn> For example, should there be a rule like "my children must be in at least the compilation phase that I am"

[12:55] <jnthnwrthngtn> We're going to have a nice headache in this area with quasi quoting too :)

[12:56] <jnthnwrthngtn> Lunch, bbiab

[12:59] <lizmat> MasterDuke: will you do the Rakudo bump ?

[13:04] <MasterDuke> sure

[13:09] <lizmat> well, I can do that also... just wanted to make sure we're not both doing it  :-)

[13:45] <nine> Out-of-sync package detected in LANG1 at age ~= "\n$indents# between tw (value in braid: RakuAST::Package, value in $*PACKAGE: RakuAST::Package)

[13:45] <nine> I wonder if this is still a correct warning (issued by NQP) or if it's just obsolete.

[14:52] *** dogbert17 joined
[15:09] *** frost left
[15:45] *** sena_kun left
[15:46] *** sena_kun joined
[16:30] <nine> (value in braid: RakuAST::Package (X::SubtestsSkipped), value in $*PACKAGE: RakuAST::Package (Test)) looks legit

[16:57] *** sena_kun left
[16:58] *** sena_kun joined
[18:04] *** discord-raku-bot left
[18:05] *** discord-raku-bot joined
[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[19:09] <lizmat> is it correct that you cannot do an nqp::atkey on a lexpad, unless the key actually exists ?

[19:09] <lizmat> if not, you get: Lexical with name 'Version' does not exist in this frame

[19:09] <lizmat> s/Version/$name

[19:11] *** linkable6 left
[19:13] *** linkable6 joined
[20:20] *** Geth left
[20:20] *** Geth joined
[22:05] *** discord-raku-bot left
[22:06] *** discord-raku-bot joined
[23:54] *** reportable6 left
[23:54] *** committable6 left
[23:54] *** bloatable6 left
[23:54] *** nativecallable6 left
[23:54] *** linkable6 left
[23:54] *** releasable6 left
[23:54] *** benchable6 left
[23:54] *** quotable6 left
[23:54] *** shareable6 left
[23:54] *** sourceable6 left
[23:54] *** statisfiable6 left
[23:54] *** bisectable6 left
[23:54] *** coverable6 left
[23:54] *** evalable6 left
[23:54] *** greppable6 left
[23:54] *** unicodable6 left
[23:54] *** notable6 left
[23:54] *** reportable6 joined
[23:55] *** linkable6 joined
[23:55] *** greppable6 joined
[23:55] *** bloatable6 joined
[23:56] *** coverable6 joined
[23:56] *** bisectable6 joined
[23:56] *** quotable6 joined
[23:56] *** releasable6 joined
[23:56] *** benchable6 joined
[23:56] *** nativecallable6 joined
[23:56] *** committable6 joined
[23:56] *** Techcable left
[23:56] *** sourceable6 joined
[23:57] *** notable6 joined
[23:57] *** statisfiable6 joined
[23:57] *** evalable6 joined
[23:57] *** unicodable6 joined
[23:57] *** shareable6 joined
[23:58] *** Techcable joined
