[00:05] *** reportable6 left
[01:28] *** linkable6 left
[01:28] *** evalable6 left
[01:29] <[Coke]> someone could go through now and find commits like https://github.com/MoarVM/MoarVM/commit/1003874b2 and start throwing them in the recommended file

[01:29] *** evalable6 joined
[02:04] *** frost joined
[03:30] *** linkable6 joined
[03:58] *** frost left
[05:06] *** reportable6 joined
[06:06] *** reportable6 left
[06:15] *** frost joined
[07:15] *** evalable6 left
[07:15] *** linkable6 left
[07:17] *** evalable6 joined
[08:14] *** frost left
[09:07] *** reportable6 joined
[09:16] <Geth> ¦ MoarVM: 280c709ce0 | (Stefan Seifert)++ | src/spesh/disp.c

[09:16] <Geth> ¦ MoarVM: Fix spesh breaking non-int/long rw args of native calls

[09:16] <Geth> ¦ MoarVM: 

[09:16] <Geth> ¦ MoarVM: We only generated code for handling int, long and long long rw args of

[09:16] <Geth> ¦ MoarVM: speshed/jited NativeCalls, not other types, but proceeded with speshing

[09:16] <Geth> ¦ MoarVM: anyway. We really need to abort when encountering unsupported types.

[09:16] <Geth> ¦ MoarVM: Otherwise those rw args won't get updated.

[09:16] <Geth> ¦ MoarVM: 

[09:16] <Geth> ¦ MoarVM: Fixes Rakudo issue #4749

[09:16] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/280c709ce0

[09:18] <lizmat> nine++

[09:18] <lizmat> worthy of a bump ?

[09:19] <nine> Definitely

[09:19] <lizmat> ok, will do

[09:19] <nine> thanks :)

[09:31] <nine> Adding rw support for other integer types is quite trivial. Except for CPointer. We cannot update those via assign_i or assign_u ops as we do for native refs. NativeCall instead calls the set_int box function, but there is no op for doing just that.

[09:48] <nine> Funny that for precicely this oddity there's a PR to docs from just 2 hours ago: https://github.com/Raku/doc/pull/402

[09:48] <nine> It explains that for an rw pointer, one needs to pass an existing Pointer object, so it can get updated by NativeCall. Which is really just not how rw args in general work in Raku

[09:53] <lizmat> nine: [Tux] saw a performance drop, not sure it was the latest bump or the commit before

[11:18] *** linkable6 joined
[12:06] *** reportable6 left
[13:06] *** sena_kun left
[13:06] *** sena_kun joined
[13:08] *** reportable6 joined
[13:49] *** Altai-man joined
[13:52] *** sena_kun left
[14:00] *** discord-raku-bot left
[14:00] *** discord-raku-bot joined
[15:44] <[Coke]> https://github.com/Raku/doc/pull/4026 #402 is something else

[16:03] <nine> [Coke]: oh, thanks!

[16:39] <[Coke]> it helpfully directed me to issue 402, where I had made a snarky comment in 2016. :)

[16:45] <nine> There is no op for calling a repr's set_int functions. But there is sp_bind_i64 for writing a struct's attribute directly. And quite surprisingly, this seems to have worked on the very first try!

[16:45] <nine> With that I've got full spesh coverage of rw args in native calls

[16:50] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: 311e099d1f | (Stefan Seifert)++ | src/spesh/disp.c

[16:50] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: Support alll kinds of rw args on native calls in spesh

[16:50] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: 

[16:50] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: So far, we've only supported the larger integer types for rw args when speshing

[16:50] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: native calls. Extend this support to all sizes, unsigned integers and pointers.

[16:50] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: 

[16:50] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: Since CPointer objects get passed as-is, not as native refs, we need to update

[16:50] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: them in-place via sp_bind_i64 instead of assigning into the ref.

[16:50] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: review: https://github.com/MoarVM/MoarVM/commit/311e099d1f

[16:58] *** [Coke] left
[17:16] *** [Coke] joined
[17:18] <jnthnwrthngtn> nine: Spesh coverage meaning "we can JIT them all"?

[17:28] <nine> jnthnwrthngtn: yes

[17:28] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: da649cd208 | (Stefan Seifert)++ | src/spesh/disp.c

[17:28] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: Support all kinds of rw args on native calls in spesh

[17:28] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: 

[17:28] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: So far, we've only supported the larger integer types for rw args when speshing

[17:28] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: native calls. Extend this support to all sizes, unsigned integers and pointers.

[17:28] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: 

[17:28] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: Since CPointer objects get passed as-is, not as native refs, we need to update

[17:28] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: them in-place via sp_bind_i64 instead of assigning into the ref.

[17:28] <Geth> ¦ MoarVM/support_all_kinds_of_rw_args_on_native_calls_in_spesh: review: https://github.com/MoarVM/MoarVM/commit/da649cd208

[17:28] <nine> (just fixed the typo in the commit message)

[17:29] <jnthnwrthngtn> Cool :)

[17:37] <nine> Btw. if I can somehow get my uint $t = 0; $t = $t + 2; to perform the same as $t = $t + my uint $ = 2; I can get sieve.raku down to 0.79s which is less than a factor of 2 away from Perl's 0.43s

[17:39] <lizmat> perhaps it is time to codegen integer values that are small enough to fit in a native int, as a native int ?

[17:39] <lizmat> and if positive, as a uint even ?

[17:59] <nine> Thing is....I think it already should. Perl6::World.add_numeric_constant creates a QAST::IVal node and QASTCompilerMAST turns that into a const_i64 instruction. So the question is: why doesn't it work out this way in my case?

[18:03] <nine> The QAST::Want might get in the way

[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[18:31] <[Coke]> looking at the cleanup branches ticket; there are 37 merged branches in Moarvm - anyone mind if I delete those in the next day or so?

[18:32] <[Coke]> I can post a list of who last committed to them when, but then include (e.g.) asan_fixes, fix-intern-lookup, etc.

[18:37] <[Coke]> (there are nearly 200 unmerged branches)

[18:39] <[Coke]> oldest of which are 8+ years

[18:39] <[Coke]> is there some standard for what do with old stuff like that we're not ready to delete? move it to origin/archive/ ?

[19:31] *** linkable6 left
[19:33] *** linkable6 joined
[19:34] *** linkable6 left
[20:36] *** linkable6 joined
[20:38] <jnthnwrthngtn> I can't imagine anybody objecting to cleaning up merged branches

[20:39] <[Coke]> jnthnwrthngtn: danke

[20:39] <[Coke]> jnthnwrthngtn: you had one of the oldest unmerged, btw. :)

[20:39] <nine> Well merged branches are not of much use. Unmerged ones however can still be useful. E.e. there's the more_asan_fixes branch which I I do intend to get back to, despite the last commit being over a year old

[20:41] <[Coke]> jnthnwrthngtn: gen2-frames, set-removal are both 8+ years

[20:48] <nine> Oh, there's my gc_torture branch which is not meant to be merged ever but still useful :)

[20:58] <[Coke]> what about new-disp?

[20:58] <[Coke]> it's merged, but is it special enough to save or tag?

[21:08] <[Coke]> cleaned up everything merged except new-disp & ryu, which I can see but cannot delete.

[21:11] <[Coke]> I can't see ryu on the website; weird.

[21:15] <jnthnwrthngtn> [Coke]: I guess I'm the oldest here in moar years :)

[21:16] <jnthnwrthngtn> Anything of mine that's unmerged and older than 4 years can be deleted; it'll have surely bitrotted enormously 

[21:17] <[Coke]> ok. I'll get that list and see if any of the names stand out for you, though.

[21:18] <[Coke]>  /speculative-calls /nine-try-this-fix /deterministic-ucd2c /slower/elim-take-dispatcher /sync-without-uv /wip-mvmarray-refactor /inlining-exception-fix /frame-gc-opts /spesh-value-prop /set-removal /gen2-frames

[21:19] <[Coke]> those are jnthn last commit, > 4 years

[21:22] <[Coke]> nine, did you try that fix? :)

[21:42] <nine> [Coke]: looks like that fix even made it into master :) And has evolved somewhat since

[21:53] <[Coke]> ... ok, not exactly as is, I assume, or my merge check is missing stuff?

[22:08] *** linkable6 left
[22:08] *** evalable6 left
[22:08] <jnthnwrthngtn> [Coke]: Also can be that I rebased the branch and merged it locally, put never pushed the update to the branch itself, in which case --merged won't detect it

[22:08] <[Coke]> Oof.

[22:09] *** evalable6 joined
[22:10] *** linkable6 joined
[22:10] <jnthnwrthngtn> And then GitHub also has squash merge and rebase merge options even in a PR-based workflow (but mitigates it somewhat with a button to delete the branch, but one has to remember to push it)

[22:10] <jnthnwrthngtn> So there's quite a few paths to "--merged doesn't detect it, but it was", alas.

[22:13] <MasterDuke> i have a FF plugin/extension that automatically clicks that button when i merge my own PRs

[22:14] <MasterDuke> https://github.com/refined-github/refined-github

[22:15] <[Coke]> nice

