[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[00:38] *** uzl[m] left
[00:39] *** AlexDaniel left
[00:39] *** crystalfrost[m] left
[00:39] *** psydroid left
[01:04] *** uzl[m] joined
[01:06] *** frost joined
[01:22] *** psydroid joined
[01:33] *** AlexDaniel joined
[01:55] *** crystalfrost[m] joined
[02:43] *** Kaipei left
[04:06] *** Kaipei joined
[05:26] *** reportable6 left
[05:26] *** coverable6 left
[05:26] *** evalable6 left
[05:26] *** statisfiable6 left
[05:26] *** tellable6 left
[05:26] *** committable6 left
[05:26] *** nativecallable6 left
[05:26] *** greppable6 left
[05:26] *** quotable6 left
[05:26] *** bloatable6 left
[05:26] *** notable6 left
[05:26] *** releasable6 left
[05:26] *** bisectable6 left
[05:26] *** sourceable6 left
[05:26] *** benchable6 left
[05:26] *** unicodable6 left
[05:26] *** shareable6 left
[05:26] *** linkable6 left
[05:27] *** evalable6 joined
[05:27] *** benchable6 joined
[05:27] *** bloatable6 joined
[05:27] *** releasable6 joined
[05:27] *** committable6 joined
[05:28] *** unicodable6 joined
[05:28] *** greppable6 joined
[05:28] *** sourceable6 joined
[05:28] *** coverable6 joined
[05:28] *** bisectable6 joined
[05:28] *** nativecallable6 joined
[05:28] *** notable6 joined
[05:29] *** statisfiable6 joined
[05:29] *** shareable6 joined
[05:29] *** reportable6 joined
[05:29] *** linkable6 joined
[05:29] *** quotable6 joined
[05:29] *** tellable6 joined
[05:47] *** samcv left
[05:47] *** samcv joined
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:52] <Nicholas> Servus, #moarvm

[06:53] <nine> Zers

[06:55] *** nine left
[06:56] *** nine joined
[07:31] <MasterDuke> morning

[07:37] <nine> Ah, a traditionalist!

[07:41] <MasterDuke> a monolinguist

[08:18] <nine> nine@sphinx:~/rakudo (rakuast_wip *)> RAKUDO_RAKUAST=1 ./rakudo-m -Ilib -e 'use Test; diag("NYI"); done-testing;'

[08:18] <nine> # NYI

[08:18] <nine> 1..0

[08:36] <lizmat> mogge

[08:53] <nine> Next step to unlock Test's functionality will be real support for coercion types. Till now I've only enabled them in the parser, but they don't coerce anything yet.

[08:59] <lizmat> nine++   ++nine

[08:59] <lizmat> I think I found an issue in the regex engine:

[08:59] <lizmat> m: say "aabbcc" ~~ / b ** 0..3 /   # this is wrong, I think

[08:59] <camelia> rakudo-moar 530e17848: OUTPUT: «｢｣␤»

[09:00] <lizmat> m: say "aabbcc" ~~ / b ** 1..3 /   # this goes to 2

[09:00] <camelia> rakudo-moar 530e17848: OUTPUT: «｢bb｣␤»

[09:06] <jnthnwrthngtn> Looks buggy to me, I'd bet on a semi-predicate issue

[09:23] <lizmat> ok, so buggable I guess  :-)

[09:42] *** linkable6 left
[09:42] *** evalable6 left
[09:42] *** evalable6 joined
[09:42] *** linkable6 joined
[10:21] *** Altai-man left
[10:24] *** sena_kun joined
[10:56] <MasterDuke> looks like git's sha1 implementations are slightly slower than ours

[12:06] *** tellable6 left
[12:06] *** benchable6 left
[12:06] *** committable6 left
[12:06] *** releasable6 left
[12:06] *** greppable6 left
[12:06] *** quotable6 left
[12:06] *** coverable6 left
[12:06] *** reportable6 left
[12:06] *** statisfiable6 left
[12:06] *** unicodable6 left
[12:06] *** notable6 left
[12:06] *** nativecallable6 left
[12:06] *** bisectable6 left
[12:06] *** evalable6 left
[12:06] *** linkable6 left
[12:06] *** sourceable6 left
[12:06] *** bloatable6 left
[12:06] *** shareable6 left
[12:07] *** tellable6 joined
[12:07] *** sourceable6 joined
[12:07] *** statisfiable6 joined
[12:07] *** benchable6 joined
[12:07] *** unicodable6 joined
[12:07] *** reportable6 joined
[12:08] *** notable6 joined
[12:08] *** evalable6 joined
[12:08] *** nativecallable6 joined
[12:08] *** quotable6 joined
[12:08] *** releasable6 joined
[12:08] *** shareable6 joined
[12:08] *** bloatable6 joined
[12:09] *** bisectable6 joined
[12:09] *** coverable6 joined
[12:09] *** greppable6 joined
[12:09] *** committable6 joined
[12:09] *** linkable6 joined
[13:03] *** vrurg_ joined
[13:05] *** vrurg left
[14:05] *** vrurg_ is now known as vrurg

[14:23] <japhb> Well that's surprising.

[14:27] *** frost left
[15:25] <nine> > RAKUDO_RAKUAST=1 ./rakudo-m -Ilib -e 'use Test; ok(1); done-testing;'

[15:25] <nine> ok 1 - 

[15:25] <nine> 1..1

[15:25] <nine> Thanks to support for "is copy" on parameters :)

[15:29] *** evalable6 left
[15:29] *** linkable6 left
[15:31] *** linkable6 joined
[15:31] *** evalable6 joined
[15:35] <japhb> nine++  # Go nine, go nine!

[17:52] *** vrurg left
[18:06] *** vrurg joined
[18:08] *** reportable6 left
[18:10] *** reportable6 joined
[18:11] *** vrurg left
[19:11] *** notable6 left
[19:11] *** shareable6 left
[19:11] *** benchable6 left
[19:11] *** greppable6 left
[19:11] *** tellable6 left
[19:11] *** committable6 left
[19:11] *** bisectable6 left
[19:11] *** nativecallable6 left
[19:11] *** releasable6 left
[19:11] *** linkable6 left
[19:11] *** sourceable6 left
[19:11] *** statisfiable6 left
[19:11] *** coverable6 left
[19:11] *** bloatable6 left
[19:11] *** quotable6 left
[19:11] *** unicodable6 left
[19:11] *** evalable6 left
[19:11] *** evalable6 joined
[19:12] *** benchable6 joined
[19:12] *** committable6 joined
[19:12] *** bisectable6 joined
[19:12] *** notable6 joined
[19:12] *** unicodable6 joined
[19:13] *** tellable6 joined
[19:13] *** statisfiable6 joined
[19:13] *** linkable6 joined
[19:13] *** sourceable6 joined
[19:13] *** greppable6 joined
[19:13] *** shareable6 joined
[19:14] *** quotable6 joined
[19:14] *** coverable6 joined
[19:14] *** releasable6 joined
[19:14] *** nativecallable6 joined
[19:14] *** bloatable6 joined
[19:40] *** vrurg joined
[19:44] *** vrurg left
[19:55] <MasterDuke> ok, after some more correctly-done benchmarking, git's sha1 implementation is the same speed as our current one. which is also the same or faster as the other random implementations i was able to test. the outlier is openssl's, which is a bunch faster

[19:55] <MasterDuke> however, bringing in openssl is a big dependency

[19:57] <MasterDuke> so unless someone speaks up and says they think it would be worth the cost/complications of using openssl, i'm going to leave this experiment concluding that no change in our sha1 implementation is needed

[20:00] <lizmat> unless you can lift the sha1 code out of the openssl distro ?

[20:01] <MasterDuke> it doesn't look terribly easy. and i believe the main reason they're faster is they gen platform/cpu specific asm

[20:02] <lizmat> ah...  ok...  that looks like the difference then  :-)

[20:03] <lizmat> so... wouldn't that imply that writing the sha code in nqp would make it automatically scale up for the cpu in use ?  :-)

[20:09] <MasterDuke> i think it'll be hard to beat the C implementation we have

[20:12] <MasterDuke> what would probably make more sense is to switch to a faster algorithm, if there is a faster one for our use case. but that would cause every precomp file in existence to be invalidated, so maybe we don't want that

[20:14] <japhb> They're already invalidated every time we install a new Rakudo

[20:14] <MasterDuke> fwiw, in a my benchmark `use nqp; my $a = "src/core.c/Int.pm6".IO.slurp; my $b; my $s = now; $b := nqp::sha1($a) for ^10_000; say now - $s; say $b`, the most expensive function at half the time is MVM_string_utf8_encode_substr. next is a sha1 related function at 25%, then next is a spesh function with only 1.3%

[20:15] <MasterDuke> oh right. maybe i'll experiment with a different algorithm then

[20:16] <lizmat> yeah, each Rakdo compile gets its own precomp files

[20:16] <lizmat> $ cleanup-precomp

[20:16] <lizmat> Freed 678,739,528 bytes from 7 repositories.

[20:16] <japhb> Wait, why is utf8 *encode* chewing so much time?

[20:16] <MasterDuke> https://github.com/MoarVM/MoarVM/blob/master/src/6model/serialization.c#L3200

[20:16] <lizmat> that would be the .slurp I'd say?

[20:16] <japhb> lizmat: Wouldn't that be *decode*?

[20:17] <lizmat> nqp::sha1 takes a Str

[20:17] <lizmat> *not* a Buf

[20:17] <lizmat> you could argue that having nqp::sha1 taking an int array, would make things a lot faster

[20:18] <lizmat> as one could then slurp the file as :bin

[20:18] <lizmat> and then just feed it the Buf

[20:18] <lizmat> afk&

[20:18] <japhb> OH, I see, yeah, the slurp is decoding, and then the sha1 is encoding first.  GAH

[20:18] <japhb> Yeah, what lizmat said.

[20:19] <lizmat> MasterDuke: if you're looking at making nqp::sha1 more useful, having it take an REPR VMArray would be the trick, I'd say

[20:19] <lizmat> afk&

[20:23] <MasterDuke> hm, i can give that a try

[20:25] <MasterDuke> ugh, it does have some ecosystem use https://gist.github.com/Whateverable/42287a9a652618613fba2fda409e62a5

[20:32] <japhb> MasterDuke: I can see a couple ways out of that, both of which depend on a new MoarVM op: 1. Wrap the new MoarVM op into a new nqp::op, and change the callers that would get advantage from the VMArray version.  2. Rewrite the nqp::op to call the appropriate MoarVM op depending on the type/REPR of the argument.

[20:39] <MasterDuke> yep

[20:41] *** vrurg joined
[20:42] <MasterDuke> if the MVMString storage_type is not MVM_STRING_STRAND, can i just hash the body.storage directly instead of utf8 encoding it?

[20:45] <japhb> I think that would only work for MVM_STRING_GRAPHEME_ASCII

[20:46] *** vrurg left
[20:52] <MasterDuke> right, i guess synthetics and such would be a problem

[21:31] *** sena_kun left
[21:32] *** sena_kun joined
[23:59] *** vrurg joined
