[00:02] *** linkable6 left
[00:02] *** evalable6 left
[00:02] *** evalable6 joined
[00:03] *** linkable6 joined
[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[00:41] *** Kaipei left
[01:00] *** MasterDuke left
[01:15] *** Kaipei joined
[01:20] *** Kaipei left
[01:47] *** MasterDuke joined
[04:24] *** linkable6 left
[04:24] *** reportable6 left
[04:24] *** coverable6 left
[04:24] *** nativecallable6 left
[04:24] *** bloatable6 left
[04:24] *** quotable6 left
[04:24] *** shareable6 left
[04:24] *** notable6 left
[04:24] *** committable6 left
[04:24] *** benchable6 left
[04:24] *** statisfiable6 left
[04:24] *** greppable6 left
[04:24] *** bisectable6 left
[04:24] *** releasable6 left
[04:24] *** unicodable6 left
[04:24] *** squashable6 left
[04:24] *** sourceable6 left
[04:24] *** tellable6 left
[04:24] *** evalable6 left
[04:24] *** squashable6 joined
[04:24] *** sourceable6 joined
[04:24] *** greppable6 joined
[04:25] *** nativecallable6 joined
[04:25] *** evalable6 joined
[04:25] *** unicodable6 joined
[04:25] *** releasable6 joined
[04:25] *** bisectable6 joined
[04:25] *** bloatable6 joined
[04:26] *** tellable6 joined
[04:26] *** benchable6 joined
[04:26] *** linkable6 joined
[04:26] *** coverable6 joined
[04:26] *** quotable6 joined
[04:26] *** reportable6 joined
[04:27] *** statisfiable6 joined
[04:27] *** shareable6 joined
[04:27] *** committable6 joined
[04:27] *** notable6 joined
[05:06] <[Coke]> well done, nine.

[05:13] *** sortiz left
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[08:44] *** Kaipei joined
[09:00] *** crystalfrost[m] left
[10:14] *** sena_kun joined
[11:31] *** linkable6 left
[11:32] *** linkable6 joined
[11:32] *** sena_kun left
[11:34] *** sena_kun joined
[12:08] *** reportable6 left
[12:09] *** reportable6 joined
[12:23] *** sena_kun left
[15:19] *** sena_kun joined
[17:20] *** Altai-man joined
[17:23] *** sena_kun left
[17:56] *** linkable6 left
[17:57] *** linkable6 joined
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[19:28] <ugexe> MVM_file_chown takes int arguments, but i think they are supposed to be unsigned. see https://github.com/nodejs/node-v0.x-archive/commit/ed806385bfd6d7d0e7e31b49586a78dd33d82d37

[19:55] *** evalable6 left
[19:55] *** linkable6 left
[19:55] *** evalable6 joined
[19:57] *** linkable6 joined
[21:02] *** discord-raku-bot left
[21:02] *** discord-raku-bot joined
[21:07] *** discord-raku-bot left
[21:08] *** discord-raku-bot joined
[21:08] <MasterDuke> yep, nice catch

[21:09] <MasterDuke> i should be able to fix that today or tomorrow

[21:14] *** discord-raku-bot left
[21:14] *** discord-raku-bot joined
[21:21] *** Kaipei left
[21:23] *** sortiz joined
[21:31] *** discord-raku-bot left
[21:31] *** discord-raku-bot joined
[21:44] *** discord-raku-bot left
[21:45] *** discord-raku-bot joined
[21:46] *** discord-raku-bot left
[21:47] *** discord-raku-bot joined
[21:53] *** Altai-man left
[21:55] *** discord-raku-bot left
[21:55] *** discord-raku-bot joined
[21:56] *** discord-raku-bot left
[21:56] <lizmat> so, it looks like if you create a *large* string (such as by slurping a 4MB file)

[21:56] *** discord-raku-bot joined
[21:57] <lizmat> and you take a 1 char substring of that, it will keep the large string in memory because of the substring

[21:57] <lizmat> is there a way to disassociate a substring from such a large string ?

[22:01] <lizmat> nqp::indexingoptimized doesn't  seem to cut it

[22:09] <japhb> lizmat: Incredibly ugly hack, but ... encode the substring into a buffer, drop all references to the original string or the substring, decode the buffer back into a new string?

[22:09] <lizmat> something like:

[22:09] <lizmat>     nqp::strtocodes($string, nqp::const::NORMALIZE_NFC, my int32 @ords);

[22:09] <lizmat>     nqp::strfromcodes(@ords)

[22:09] <lizmat> ??

[22:12] <nine> Or just $substring.encode.decode

[22:15] <lizmat> if that would work, it wouldn't matter how big the original string was, right?

[22:26] <lizmat> basic code:

[22:26] <lizmat> use Telemetry;

[22:26] <lizmat> for ^100 {

[22:26] <lizmat>     my $a = substantiate($io.slurp.substr(0,1));

[22:26] <lizmat> }

[22:26] <lizmat> END say T<max-rss>;

[22:26] <lizmat> where $io is either a 4 byte or a 4MB file

[22:28] <japhb> lizmat: Right, shouldn't matter at all.

[22:28] <lizmat> it does  :-(

[22:28] <lizmat> so that would make it not work

[22:29] <japhb> Of course, just because the original string is now garbage, doesn't mean it has been collected ....

[22:29] <lizmat> reason I'm asking is IRC log parsing for instance

[22:29] <lizmat> hmmm

[22:30] *** discord-raku-bot left
[22:30] *** discord-raku-bot joined
[22:31] <lizmat> nqp::force_gc appears to make a difference...

[22:32] <lizmat> for ^100 {

[22:32] <lizmat>     my $a = $io.slurp.substr(0,1);

[22:32] <lizmat>     nqp::force_gc;

[22:32] <lizmat> }

[22:39] <lizmat> actually, hiving:

[22:39] <lizmat> start { loop { sleep .1; nqp::force_gc } }

[22:40] <lizmat> running, seems to have a very beneficial effect on memory usage, and no effect on CPU usage

[22:42] <lizmat> *having

[22:58] <lizmat> putting a "nqp::force_gc() unless nqp::mod_i(++$force_gc,100);" into the ThreadPoolScheduler supervisor loop

[23:02] <lizmat> has a similar positive effect on memory usage of the above code

[23:04] * lizmat sleeps on it

[23:17] *** discord-raku-bot left
[23:17] *** discord-raku-bot joined
[23:27] *** Kaipei joined
