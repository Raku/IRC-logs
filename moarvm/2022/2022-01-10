[00:08] *** reportable6 left
[00:25] *** frost joined
[00:37] *** frost left
[00:49] *** Kaiepi joined
[00:50] *** frost joined
[00:54] *** Kaiepi left
[01:04] *** linkable6 left
[01:08] *** reportable6 joined
[01:18] *** frost left
[02:04] *** frost joined
[02:29] *** frost left
[02:37] *** frost joined
[02:50] *** frost left
[02:54] *** frost joined
[03:24] *** frost left
[03:41] *** Kaiepi joined
[04:29] *** shinto joined
[05:06] *** linkable6 joined
[05:26] *** shinto left
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[07:14] <nine> vrurg: two chained method calls requires resumption in new-disp. There are examples starting at https://github.com/Raku/nqp/blob/master/t/moar/53-dispatch.t#L341

[07:15] <Nicholas> good *, *

[07:36] *** frost joined
[08:02] *** frost left
[08:09] *** Kaiepi left
[08:09] *** [Coke] left
[08:09] *** japhb left
[08:09] *** sena_kun left
[08:09] *** MasterDuke left
[08:12] *** TempIRCLogger left
[08:14] *** TempIRCLogger__ left
[08:53] *** frost joined
[09:49] *** frost left
[11:00] *** frost joined
[11:25] *** frost left
[11:41] *** Altai-man joined
[11:43] *** Altai-man left
[11:55] *** Altai-man joined
[12:08] *** reportable6 left
[12:09] *** reportable6 joined
[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: 6ad88ac6af | (Nicholas Clark)++ | .gitmodules

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: Change .gitmodules to default submodules to a shallow clone.

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: 

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: The git documentation implies that this is the "right" way to do this, but

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: as best I can tell from experimenting this *only* affects

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: `git clone --recursive`

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: 

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: `git clone` followed by `git submodule update --init --recommend-shallow`

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: <…commit message has 6 more lines…>

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: review: https://github.com/MoarVM/MoarVM/commit/6ad88ac6af

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: 6f749f3ac0 | (Nicholas Clark)++ | tools/update-submodules.pl

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: Run `git submodule --quiet update --depth 1` if git is new enough.

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: 

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: This reduces .git by about 32M at little cost, as most folks aren't looking

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: at submodule history. If you need the history, it's easy to get back with:

[12:15] <Geth> ¦ MoarVM/submodule-default-shallow-clone: 

[12:16] <Geth> ¦ MoarVM/submodule-default-shallow-clone: git submodule foreach git fetch --unshallow

[12:16] <Geth> ¦ MoarVM/submodule-default-shallow-clone: review: https://github.com/MoarVM/MoarVM/commit/6f749f3ac0

[12:41] <lizmat> nine: now that new-disp has landed, would it make sense to re-investigate the "in process" pre-compilation work ?

[12:59] <jnthnwrthngtn> I'm not sure how far new-disp would help with that, tbh

[13:00] <jnthnwrthngtn> Trying to do it as part of the new RakuAST-baesd compiler frontend might be more fruitful

[13:04] <lizmat> the thing is: I was thinking on how to solve "default auth / ver / api" for loading modules without specific ver / auth / api

[13:04] <lizmat> and thought: well, a dynamic variable keeping the default ver/auth/api info might just do the trick

[13:04] <lizmat> until I realized:  meh, separate processes 

[13:19] <nine> Well the method cache was one large source of problems. That's gone now.

[13:25] <lizmat> right!

[13:26] <Geth> ¦ MoarVM: 2883ba7547 | (Stefan Seifert)++ | src/spesh/deopt.c

[13:26] <Geth> ¦ MoarVM: Fix possible access to fromspace after deopt materialization

[13:26] <Geth> ¦ MoarVM: 

[13:26] <Geth> ¦ MoarVM: We stored the newly allocated objects we create during materialization in an

[13:26] <Geth> ¦ MoarVM: array, for future reference so we could store the same objects into multiple

[13:26] <Geth> ¦ MoarVM: target registers if required. Allocating these objects however could trigger

[13:26] <Geth> ¦ MoarVM: a GC run which then missed the pointers in the materialized array. This would

[13:26] <Geth> ¦ MoarVM: then lead to such outdated pointers getting written to frame registers.

[13:26] <Geth> ¦ MoarVM: <…commit message has 7 more lines…>

[13:26] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/2883ba7547

[13:26] <Geth> ¦ MoarVM: 3ef0c229d2 | niner++ (committed using GitHub Web editor) | src/spesh/deopt.c

[13:26] <Geth> ¦ MoarVM: Merge pull request #1630 from MoarVM/fix_gc_issue_in_materialization

[13:26] <Geth> ¦ MoarVM: 

[13:26] <Geth> ¦ MoarVM: Fix possible access to fromspace after deopt materialization

[13:26] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/3ef0c229d2

[14:22] <vrurg> nine: I thought of resumption, but it requires initiation on the callee side. That's not possible in case of .ACCEPTS.Bool. Not to mention if there be any performance gain at all then.

[14:24] <jnthnwrthngtn> vrurg: Have the dispatch program evaluate to calling something that in turn calls the two methods? I figure something so small as to do two method calls will neatly inline if it's hot

[14:25] <vrurg> jnthnwrthngtn: thanks, that's was my next question, actually. :)

[14:29] <vrurg> Though would there be a way to inline explicitly, without delegating to a frame, that'd be even better. But it seems there is no way to compile a non-block root QAST node anyway.

[14:38] <jnthnwrthngtn> No, frames (QAST::Block) are the smallest unit you can give to the VM to execute

[14:39] <jnthnwrthngtn> Given inlining is *already* really complex, I don't think we want to have to support two kinds of it :-)

[14:54] <Geth> ¦ MoarVM/submodule-default-shallow-clone: 0c45973a58 | (Nicholas Clark)++ | 2 files

[14:54] <Geth> ¦ MoarVM/submodule-default-shallow-clone: Run `git submodule --quiet update --depth 1` if git is new enough.

[14:54] <Geth> ¦ MoarVM/submodule-default-shallow-clone: 

[14:54] <Geth> ¦ MoarVM/submodule-default-shallow-clone: This reduces .git by about 32M at little cost, as most folks aren't looking

[14:54] <Geth> ¦ MoarVM/submodule-default-shallow-clone: at submodule history. If you need the history, it's easy to get back with:

[14:54] <Geth> ¦ MoarVM/submodule-default-shallow-clone: 

[14:54] <Geth> ¦ MoarVM/submodule-default-shallow-clone: git submodule foreach git fetch --unshallow

[14:54] <Geth> ¦ MoarVM/submodule-default-shallow-clone: review: https://github.com/MoarVM/MoarVM/commit/0c45973a58

[15:15] *** Altai-man left
[16:10] <vrurg> Does existence of a lexical $_ in a frame affects its inlinability?

[16:10] <lizmat> doesn't every frame have a $_ ?

[16:11] <lizmat> and ergo, the answer is no?

[16:12] <vrurg> On many occasions it is lowered to a local.

[16:12] <vrurg> I wonder what if it stays lexical.

[16:13] * vrurg is considering if it worth replacing locallifetime op with a dispatch delegating to a block.

[16:15] <vrurg> afk for a couple of hours.

[16:20] <jnthnwrthngtn> No, lexicals don't prevent MoarVM from doing inlining. Lowering to locals makes some other optimizations possible.

[16:20] <jnthnwrthngtn> But inlining isn't blocked by it

[16:20] <jnthnwrthngtn> locallifetime is a code-gen hint; I don't think it should introduce a scope

[16:21] <jnthnwrthngtn> s/scope/blcok/

[16:21] <jnthnwrthngtn> It should have no semantic effects, it just allows for better register re-use

[17:50] <Geth> ¦ MoarVM/fix_unsigned_for_merge: 6 commits pushed by (Stefan Seifert)++

[17:50] <Geth> ¦ MoarVM/fix_unsigned_for_merge: 4d00373286 | Use uint where appropriate in MAST code

[17:50] <Geth> ¦ MoarVM/fix_unsigned_for_merge: ba8bd0e92b | Support objprimspec 10 for unsigned integers in MAST code

[17:50] <Geth> ¦ MoarVM/fix_unsigned_for_merge: 3f616d7a9a | New callsite flag for native unsigned ints MVM_CALLSITE_ARG_UINT

[17:50] <Geth> ¦ MoarVM/fix_unsigned_for_merge: 171ea9f497 | Fix spesh generating decont_i for unboxing unsigned ints

[17:50] <Geth> ¦ MoarVM/fix_unsigned_for_merge: 36a5fb4cf4 | Teach spesh to differ between signed and unsigned decont

[17:50] <Geth> ¦ MoarVM/fix_unsigned_for_merge: 90b241460f | Teach VMArray's copy_to to use proper signed/unsigned registers

[17:50] <Geth> ¦ MoarVM/fix_unsigned_for_merge: review: https://github.com/MoarVM/MoarVM/compare/7175db2ee216...90b241460f69

[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[18:46] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/01/10/2022-01-02-perching/

[18:50] <nine> What a busy week in the Core. lizmat++ for the write up!

[18:56] <lizmat> well, actually 2 weeks :-)

[18:58] <sena_kun> lizmat++

[19:12] *** linkable6 left
[19:12] *** evalable6 left
[20:13] *** linkable6 joined
[20:13] *** evalable6 joined
[21:13] <MasterDuke> m: sub a(|c(Int $b, Str $c? = "bar")) { b(|c) }; sub b(*@v) { .say for @v }; a(1, "bc"); a(2)   # any way to get "bar" to be printed the second time a() is called? or is that just not possible?

[21:13] <camelia> rakudo-moar a90369e10: OUTPUT: «1␤bc␤2␤»

[21:16] *** Guest1244 joined
[21:19] <jnthnwrthngtn> MasterDuke: Not possible; c is the original incoming argument capture, which you unpack; unpacking the capture does not, however, mutate it

[21:25] <MasterDuke> could that be a warning or error?

[21:29] <jnthnwrthngtn> No

[21:29] <jnthnwrthngtn> Well, it could be, but given it might be exactly what was wanted, it shouldn't be

[21:30] <MasterDuke> m: sub a(|c(Int $b, Str $c? = "bar")) { my $z = (|c).Array; $z.push($c) if c.elems == 1; b(|$z) }; sub b(*@v) { .say for @v }; a(1, "bc"); a(2)    # yeah, this works as a workaround, maybe a warning is a little aggresive

[21:30] <camelia> rakudo-moar a90369e10: OUTPUT: «1␤bc␤2␤bar␤»

[21:44] <jnthnwrthngtn> Why the capture in the first place?

[21:45] <jnthnwrthngtn> I mean, I'd just write sub a(Int $b, Str $c = "bar" { b($b, $c) } 

[21:45] <jnthnwrthngtn> uh, with the ) that I missed

[21:46] <MasterDuke> the request was to not have to repeat the list of arguments

[21:47] <MasterDuke> the capture+subsignature made it so you could constrain the parameters, but not have to repeat them when passing them on

[21:58] *** Guest1244 left
[23:34] *** CaCode joined
