[00:02] *** [Coke] left
[00:07] *** reportable6 left
[00:07] *** [Coke] joined
[00:08] *** reportable6 joined
[01:08] *** [Coke] left
[01:10] *** [Coke] joined
[01:40] *** Techcable joined
[02:42] *** evalable6 left
[02:42] *** benchable6 left
[02:42] *** greppable6 left
[02:42] *** linkable6 left
[02:42] *** bisectable6 left
[02:42] *** notable6 left
[02:42] *** unicodable6 left
[02:42] *** squashable6 left
[02:42] *** shareable6 left
[02:42] *** committable6 left
[02:42] *** quotable6 left
[02:42] *** coverable6 left
[02:42] *** nativecallable6 left
[02:42] *** reportable6 left
[02:42] *** sourceable6 left
[02:42] *** bloatable6 left
[02:42] *** releasable6 left
[02:42] *** statisfiable6 left
[02:42] *** tellable6 left
[02:43] *** notable6 joined
[02:43] *** sourceable6 joined
[02:43] *** reportable6 joined
[02:43] *** committable6 joined
[02:44] *** shareable6 joined
[02:44] *** quotable6 joined
[02:45] *** bloatable6 joined
[02:45] *** evalable6 joined
[03:43] *** squashable6 joined
[03:43] *** bisectable6 joined
[03:44] *** releasable6 joined
[03:44] *** nativecallable6 joined
[03:44] *** benchable6 joined
[03:45] *** unicodable6 joined
[04:45] *** coverable6 joined
[05:43] *** statisfiable6 joined
[05:44] *** linkable6 joined
[05:45] *** tellable6 joined
[06:07] *** reportable6 left
[06:28] *** frost joined
[08:45] *** greppable6 joined
[08:53] *** ShaneC left
[09:50] *** sena_kun left
[10:08] *** reportable6 joined
[10:45] *** sena_kun joined
[12:07] *** reportable6 left
[12:18] *** sena_kun left
[12:20] *** sena_kun joined
[14:14] *** frost left
[14:31] *** Geth left
[14:31] *** Geth joined
[14:32] <MasterDuke> hm, i haven't been able to construct an example that behaves differently without the try

[14:34] <MasterDuke> timo: think you could make some more updated appimages?

[14:58] *** frost joined
[15:33] *** frost left
[16:09] *** reportable6 joined
[16:19] *** squashable6 left
[16:19] *** squashable6 joined
[16:37] <MasterDuke> well, at least for this example i'm working with, it looks like it's not too hard to gen better code in Actions.nqp

[16:57] <MasterDuke> not as big of a run-time difference as i'd hoped though

[17:04] <MasterDuke> m: my $t = ("errors.md.tmpl" xx 1_000).join(" foo "); my $page; my $s = now; for ^1_000 { $page = $t.clone; $page ~~ s:g[ "foo" ] = "a" }; say now - $s;     # locally this drops from ~2.60s to ~2.26s

[17:04] <camelia> rakudo-moar 028828ac8: OUTPUT: «2.681882169␤»

[17:15] <MasterDuke> now down to ~2.1s

[17:20] <MasterDuke> m: my $t = ("errors.md.tmpl" xx 5).join(" foo "); my $page; my $s = now; for ^10_000 { $page = $t.clone; $page ~~ s:g[ "foo" ] = "a" }; say now - $s;       # and this drops from ~0.48s to ~0.44s

[17:20] <camelia> rakudo-moar 028828ac8: OUTPUT: «0.416483535␤»

[17:23] <MasterDuke> though that's with a fast path added to !APPLY-MATCHES

[17:33] <MasterDuke> ~2.03s with a slightly faster fast path

[17:35] <MasterDuke> though i would like to know why that assignment has to happen in the loop and can't just be done at the end

[17:43] <[Coke]> so, not a lot of luck trying to golf my malloc issue; any other suggestions? Reducing nursery size, maybe?

[17:44] <MasterDuke> you turned on MVM_GC_DEBUG?

[17:47] <MasterDuke> if so, then yeah, reducing the nursery might help. dogbert17 might have some other suggestions

[17:47] <MasterDuke> afk for dinner, etc.

[18:01] *** ShaneC joined
[18:06] *** reportable6 left
[18:09] *** reportable6 joined
[18:19] <[Coke]> ... oh. MVM_GC_DEBUG isn't an env var, is it

[18:26] <[Coke]> re-re-re-compiling. :)

[18:27] *** discord-raku-bot left
[18:27] *** discord-raku-bot joined
[18:40] <[Coke]> I assume I can tell it's working because it's sooooo sloooow now. :)

[18:50] <[Coke]> (maybe I shouldn't have jumped from 0 to 3)

[18:55] <dogbert17> MVM_GC_DEBUG=3 is by far the slowest setting

[18:57] <dogbert17> most of the time I tend to use MVM_GC_DEBUG=1 and a nursery size of a few kilobytes

[19:27] *** evalable6 left
[19:27] *** linkable6 left
[19:28] *** linkable6 joined
[20:57] *** ShaneC left
[21:29] *** evalable6 joined
[21:30] *** sena_kun left
[21:31] *** sena_kun joined
[21:37] <MasterDuke> huh, i've run into this from time to time, but why aren't private multi-methods supported?

[21:38] *** sena_kun left
[21:39] *** sena_kun joined
[22:30] <[Coke]> ... crap. the debug run just finished. no output, nothing.

[22:30] <[Coke]> (just the one line I've come to expect from the broken run)

[22:30] <[Coke]> Was I supposed to attach a debugger or something?

[22:30] <MasterDuke> the un-golfed version that you expected to fail?

[22:32] <[Coke]> y

[22:32] <[Coke]> yes

[22:33] <[Coke]> I think I assumed I'd get debug output or a new failure mode or something. my bad, should have checked first.

[22:34] <MasterDuke> huh. MVM_SPESH_NODELAY=1 and/or MVM_SPESH_BLOCKING=1 changed anything?

[22:34] *** sena_kun left
[22:34] *** sena_kun joined
[22:36] <MasterDuke> m: my $m = ("a " x 1_000) ~~ m:g/\w/; my int $a = 0; my $s = now; for ^10_000 { $a++ for flat $m }; say now - $s; say $a

[22:36] <camelia> rakudo-moar 028828ac8: OUTPUT: «0.938690274␤10000000␤»

[22:36] <MasterDuke> m: my $m = ("a " x 1_000) ~~ m:g/\w/; my int $a = 0; my $s = now; for ^10_000 { $a++ for @$m }; say now - $s; say $a

[22:36] <camelia> rakudo-moar 028828ac8: OUTPUT: «0.206832283␤10000000␤»

[22:37] <MasterDuke> m: my $m = ("a " x 1_000) ~~ m:g/\w/; my int $a = 0; my $s = now; for ^10_000 { $a++ for $m.list }; say now - $s; say $a

[22:37] <camelia> rakudo-moar 028828ac8: OUTPUT: «0.211387123␤10000000␤»

[22:38] <MasterDuke> i thought `.list` instead of `flat` would be a nice change here https://github.com/rakudo/rakudo/pull/4807/files#diff-15d67e9706f4ca84c91a9caf72855be5ef3192f2b19baa5dcc6898e1702c4804R1814, but instead i get an error that i have no idea why it's happening

[22:44] <MasterDuke> during installation too, not while compiling rakudo

[22:52] <MasterDuke> https://gist.github.com/MasterDuke17/e945bafe0295ac39e68ca65455dc5e48 if anyone is curious

[23:53] *** japhb left
[23:58] *** japhb joined
