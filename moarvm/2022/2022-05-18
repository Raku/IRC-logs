[00:07] *** reportable6 left
[00:07] *** reportable6 joined
[00:08] *** kjp left
[00:11] *** kjp joined
[00:24] *** [Coke] left
[00:25] *** [Coke] left
[00:28] *** [Coke] joined
[00:53] *** [Coke] left
[00:53] *** [Coke] joined
[01:04] *** MasterDuke left
[02:09] *** reportable6 left
[02:09] *** linkable6 left
[02:09] *** bloatable6 left
[02:09] *** committable6 left
[02:09] *** notable6 left
[02:09] *** bisectable6 left
[02:09] *** releasable6 left
[02:09] *** unicodable6 left
[02:09] *** quotable6 left
[02:09] *** sourceable6 left
[02:09] *** tellable6 left
[02:09] *** evalable6 left
[02:09] *** shareable6 left
[02:09] *** statisfiable6 left
[02:09] *** nativecallable6 left
[02:09] *** coverable6 left
[02:09] *** greppable6 left
[02:09] *** benchable6 left
[02:09] *** greppable6 joined
[02:09] *** bisectable6 joined
[02:09] *** frost joined
[02:10] *** unicodable6 joined
[02:10] *** benchable6 joined
[02:10] *** quotable6 joined
[02:10] *** releasable6 joined
[02:10] *** statisfiable6 joined
[02:10] *** sourceable6 joined
[02:10] *** reportable6 joined
[02:11] *** shareable6 joined
[02:11] *** committable6 joined
[02:11] *** nativecallable6 joined
[02:11] *** notable6 joined
[02:11] *** evalable6 joined
[02:11] *** bloatable6 joined
[02:12] *** linkable6 joined
[02:12] *** coverable6 joined
[02:12] *** tellable6 joined
[02:19] *** frost left
[02:22] *** frost joined
[02:40] *** Kaiepi left
[05:07] *** bisectable6 left
[05:07] *** statisfiable6 left
[05:07] *** shareable6 left
[05:07] *** unicodable6 left
[05:07] *** greppable6 left
[05:07] *** bloatable6 left
[05:07] *** reportable6 left
[05:07] *** benchable6 left
[05:07] *** notable6 left
[05:07] *** committable6 left
[05:07] *** nativecallable6 left
[05:07] *** tellable6 left
[05:07] *** quotable6 left
[05:07] *** releasable6 left
[05:07] *** linkable6 left
[05:07] *** coverable6 left
[05:07] *** sourceable6 left
[05:07] *** evalable6 left
[05:07] *** committable6 joined
[05:08] *** bloatable6 joined
[05:08] *** tellable6 joined
[05:08] *** releasable6 joined
[05:08] *** evalable6 joined
[05:08] *** coverable6 joined
[05:08] *** statisfiable6 joined
[05:09] *** shareable6 joined
[05:09] *** reportable6 joined
[05:09] *** bisectable6 joined
[05:09] *** nativecallable6 joined
[05:09] *** quotable6 joined
[05:09] *** unicodable6 joined
[05:10] *** sourceable6 joined
[05:10] *** notable6 joined
[05:10] *** greppable6 joined
[05:10] *** benchable6 joined
[05:10] *** linkable6 joined
[05:57] *** Geth__ joined
[05:58] *** lizmat_ joined
[05:59] *** Geth left
[06:00] *** tailgate left
[06:01] *** lizmat left
[06:02] *** tailgate joined
[06:06] *** reportable6 left
[06:09] *** reportable6 joined
[06:53] <nine> japhb: that makes me wonder: how does the old compiler frontend handle nqp ops in the first place?
[06:53] <Nicholas> good *
[06:54] <Nicholas> "lex, yacc, smoke and mirrors" ? :-)
[06:58] <nine> That's not that far off actually :D token term:sym<nqp::op>
[07:02] <nine> And japhb++ is correct as well. The old frontend emits QAST::Want nodes for those literals. Actually the new one does as well, with just one exception: constant folded (double) quoted strings. So it's an omission rather than a conceptual issue.
[08:54] *** lizmat_ left
[08:54] *** lizmat joined
[08:59] *** Geth__ left
[09:00] *** Geth joined
[09:22] *** frost left
[09:29] *** frost joined
[09:42] *** samcv left
[09:42] *** samcv joined
[10:13] *** Altai-man joined
[11:57] *** Kaiepi joined
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:18] <nine> A longname is a name + optional colonpairs. My first instinct for the AST representation would be class RakuAST::LongName is RakuAST::Node { has RakuAST::Name $.name; has %.colonpairs; ... }.
[12:19] <nine> However RakuAST::Type::Simple and other places expect a RakuAST::Name for the name, not such a LongName. This indicates that RakuAST::Name should be an abstract role rather than the class it is now.
[12:20] <nine> Alternatively RakuAST::Name::Long could be a subclass of RakuAST::Name. Would take care of those type constraints, but makes it somewhat cumbersome to construct (since $<name>.ast already creates a RakuAST::Name) which may be a sign that this isn't the right way either.
[12:22] <jnthn> RakuAST::Name is what goes with LongName
[12:22] <jnthn> *longname
[12:23] <jnthn> It's meant to have colonpairs included too eventually
[12:23] <jnthn> I don't think there's any reason to distinguish name vs. longname in the AST level; almost everywhere accepts a longname anyway
[12:24] <jnthn> So no subclass, just add colonpairs in RakuAST::Name
[12:24] <nine> Ah, that's good to know :)
[12:24] <jnthn> For things like TypeName:D and Type(OtherType) I was thinking of RakuAST::Type::Definedness and RakuAST::Type::Coercion, fwiw
[12:25] <jnthn> (Which would reference other RakuAST::Type nodes)
[12:26] <nine> So "# TODO add colonpairs" is quite accurate then despite its brevity. I.e. get an object from $<name>.ast and then .add-colonpair those colonpairs
[12:26] <nine> class RakuAST::Type::Coercion is RakuAST::Type is RakuAST::Lookup is already implemented :)
[12:27] <nine> https://github.com/rakudo/rakudo/commit/27c8f6e1152b55f5592c5d185458cd78d07ccfd6
[12:31] <jnthn> Ah, nice :)
[13:58] <nine> Interesting: the old compiler frontend emits QAST::Op(istype_nd) with Int followed by QAST::Op(isconcrete_nd) for an Int:D param. My current state emits QAST::Op(istype_nd) with Int:D instead, but that still seems to do the right thing
[13:58] <nine> Any reason to do istype_nd+isconcrete_nd instead?
[14:21] *** frost left
[14:35] <nine> sub group-of ( Pair ( Int:D :key($plan), Pair  :value(( Str:D :key($desc), :value(&tests))))) # sometimes I wonder if we've taken things too far
[14:36] <jnthn> I think the istype + isconcrete pair are cheaper
[14:37] <jnthn> Unless there's already dispatcher handling to do better on definedness types
[14:38] <jnthn> But by default it'll call accepts_type method on the meta-object, iirc
[15:09] <nine> # Do type checks.
[15:10] <nine> # TODO really more involved than this
[15:10] <nine> Indeed :D
[16:13] *** Kaiepi left
[16:15] *** Kaiepi joined
[16:20] *** Kaiepi left
[16:24] *** Kaiepi joined
[16:45] *** Kaiepi left
[17:26] *** Altai-man left
[17:54] *** Kaiepi joined
[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[19:21] *** MasterDuke joined
[20:21] *** statisfiable6 left
[20:21] *** bloatable6 left
[20:21] *** releasable6 left
[20:21] *** linkable6 left
[20:21] *** benchable6 left
[20:21] *** shareable6 left
[20:21] *** greppable6 left
[20:21] *** committable6 left
[20:21] *** tellable6 left
[20:21] *** quotable6 left
[20:21] *** evalable6 left
[20:21] *** sourceable6 left
[20:21] *** coverable6 left
[20:21] *** bisectable6 left
[20:21] *** reportable6 left
[20:21] *** nativecallable6 left
[20:21] *** unicodable6 left
[20:21] *** notable6 left
[20:22] *** tellable6 joined
[20:22] *** unicodable6 joined
[20:22] *** sourceable6 joined
[20:22] *** committable6 joined
[20:22] *** coverable6 joined
[20:22] *** benchable6 joined
[20:22] *** quotable6 joined
[20:23] *** notable6 joined
[20:23] *** bloatable6 joined
[20:23] *** linkable6 joined
[20:23] *** greppable6 joined
[20:23] *** nativecallable6 joined
[20:23] *** statisfiable6 joined
[20:23] *** evalable6 joined
[20:23] *** shareable6 joined
[20:24] *** reportable6 joined
[20:24] *** bisectable6 joined
[20:24] *** releasable6 joined
[20:50] *** [Coke] left
[22:18] *** discord-raku-bot left
[22:18] *** discord-raku-bot joined
[23:13] *** [Coke] joined
[23:16] *** [Coke] left
