[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[00:30] *** CaCode left
[00:56] *** frost joined
[01:19] *** frost left
[01:59] *** frost joined
[02:05] *** frost left
[02:24] *** frost joined
[02:30] *** frost left
[02:43] *** frost joined
[03:12] *** discord-raku-bot left
[03:12] *** discord-raku-bot joined
[03:16] *** frost left
[03:21] *** frost joined
[03:41] *** frost left
[03:51] *** frost joined
[03:56] *** frost left
[06:07] *** reportable6 left
[06:19] *** frost joined
[07:10] *** reportable6 joined
[07:38] *** frost left
[07:47] *** frost joined
[07:48] <Nicholas> good *, #moarvm 

[07:53] *** frost left
[07:55] <nine> Good IRC!

[08:05] <Geth> ¦ MoarVM/master: 7 commits pushed by (Stefan Seifert)++, niner++

[08:05] <Geth> ¦ MoarVM/master: 4d00373286 | Use uint where appropriate in MAST code

[08:05] <Geth> ¦ MoarVM/master: ba8bd0e92b | Support objprimspec 10 for unsigned integers in MAST code

[08:05] <Geth> ¦ MoarVM/master: 3f616d7a9a | New callsite flag for native unsigned ints MVM_CALLSITE_ARG_UINT

[08:05] <Geth> ¦ MoarVM/master: 171ea9f497 | Fix spesh generating decont_i for unboxing unsigned ints

[08:05] <Geth> ¦ MoarVM/master: 36a5fb4cf4 | Teach spesh to differ between signed and unsigned decont

[08:05] <Geth> ¦ MoarVM/master: 90b241460f | Teach VMArray's copy_to to use proper signed/unsigned registers

[08:05] <Geth> ¦ MoarVM/master: 56925da8f7 | Merge pull request #1639 from MoarVM/fix_unsigned_for_merge

[08:05] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/3ef0c229d2d6...56925da8f7ca

[08:11] <Nicholas> I slack. I can't think of any uint puns.

[08:15] <Nicholas> and (as foretold) github has disabled git:// support, and at least one thing I was running still got caught out because the previous brownouts didn't spot it

[08:15] <Nicholas> (a private thing. I wasn't actively seeking them out to fix)

[08:27] <timo> uint me both, buddy

[08:38] <nine> Nicholas: Truth is, you'll probably not recover the time spent on shallow clones. But the time saved for all users and CI runs and disk space saved will be worth a whole lot!

[08:39] <Nicholas> yes, this I agree with

[08:39] <Nicholas> I wasn't sure how much it would affect CI runs (cumulatively) but I didn't see it hurting...

[08:41] <Nicholas> even if Azure pipelines are in the same rack as github servers, and connected with ∞Base-T

[10:13] *** linkable6 left
[10:13] *** evalable6 left
[10:16] *** evalable6 joined
[10:27] *** frost joined
[10:32] *** frost left
[10:42] *** frost joined
[10:55] *** frost left
[11:02] *** frost joined
[11:02] <dogbert17> is the build somehow broken

[11:03] <dogbert17> dogbert@dogbert-VirtualBox:~/repos/rakudo$ perl Configure.pl --gen-moar --gen-nqp --backends=moar

[11:03] <dogbert17> ===ATTENTION===

[11:03] <dogbert17>   No --prefix supplied, building and installing to /home/dogbert/repos/rakudo/install

[11:03] <dogbert17> Segmentation fault (core dumped)

[11:04] <dogbert17> or do I need to update nqp as well?

[11:04] <nine> You may need to

[11:11] <dogbert17> ok

[11:26] *** frost left
[11:35] * dogbert17 runs away to get a booster shot

[11:38] <Nicholas> odd co-incidence. I had one 2 hours ago

[11:38] <Nicholas> no, wait, 1 hour ago

[11:47] *** frost joined
[11:51] *** frost left
[12:07] *** reportable6 left
[12:14] *** linkable6 joined
[12:50] <MasterDuke> interesting. that segfault exposed by that warning only happens when the code that triggers it runs in the optimizer

[12:51] <MasterDuke> m: say &infix:<< +> >>.prec<iffy>   # doesn't die

[12:51] <camelia> rakudo-moar a90369e10: OUTPUT: «(Any)␤»

[13:07] *** frost joined
[13:29] <dogbert17> nine: updating nqp worked. There's only one spectest failure, in t/spec/S32-io/IO-Socket-Async.t, which I haven't seen before

[13:30] <dogbert17> ok 22 - server's peer-port seems right

[13:30] <dogbert17> Unhandled exception in code scheduled on thread 4

[13:30] <dogbert17> address already in use

[13:41] *** frost left
[13:44] <MasterDuke> spectest all clear for me

[13:47] <dogbert17> and now it's clear for me too. I actually had a program running which used the address in question, oops

[14:10] *** reportable6 joined
[14:24] <MasterDuke> jnthnwrthngtn: you commented on https://stackoverflow.com/questions/70525665/raku-apply-one-signature-test-to-multiple-positionals and i think i've asked before about this and you said rakuast should eventually enable a speculated feature for exactly that case (needing multiple multis for handling every combination of position of parameters based

[14:24] <MasterDuke> on type, when you really don't care about position and just want to do something with whatever parameter is of a certain type)

[14:32] <jnthnwrthngtn> Should be possible

[14:48] *** MasterDuke left
[15:01] <Geth> ¦ MoarVM: d783bf2717 | (Stefan Seifert)++ | src/spesh/disp.c

[15:01] <Geth> ¦ MoarVM: Fix speshed native calls with rw args assigning into wrong target

[15:01] <Geth> ¦ MoarVM: 

[15:01] <Geth> ¦ MoarVM: For rw args of native calls we emit appropriate assign_i instructions

[15:01] <Geth> ¦ MoarVM: after the call to write back the native values from the argument

[15:01] <Geth> ¦ MoarVM: registers to the NativeRef. However the register holding the NativeRef

[15:01] <Geth> ¦ MoarVM: will already have been released at the callsite (as for non-speshed

[15:01] <Geth> ¦ MoarVM: calls writing back is handled by MVM_nativecall_dispatch). If one of the

[15:01] <Geth> ¦ MoarVM: <…commit message has 9 more lines…>

[15:01] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d783bf2717

[15:01] <Geth> ¦ MoarVM: a75aacc642 | niner++ (committed using GitHub Web editor) | src/spesh/disp.c

[15:01] <Geth> ¦ MoarVM: Merge pull request #1627 from MoarVM/fix_rw_native_calls

[15:01] <Geth> ¦ MoarVM: 

[15:01] <Geth> ¦ MoarVM: Fix speshed native calls with rw args assigning into wrong target

[15:01] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a75aacc642

[15:06] *** MasterDuke joined
[16:28] <MasterDuke> m: BEGIN say &infix:<< +> >>.prec<iffy>     # huh, why doesn't this segv?

[16:28] <camelia> rakudo-moar a90369e10: OUTPUT: «(Any)␤»

[16:31] *** kjp left
[16:31] <MasterDuke> i guess BEGIN isn't quite the same as happens-in/during-Optimizer.nqp

[16:34] *** kjp joined
[16:49] <MasterDuke> so right here https://github.com/rakudo/rakudo/blob/master/src/Perl6/Optimizer.nqp#L2745 `$obj.prec` is a P6opaque instead of a VMHash

[16:52] <MasterDuke> then we call P6opque's at_key and it segfaults here https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L1469 because `del`is 0x0

[16:58] <MasterDuke> so obviously rakudo shouldn't segfault in this situation

[16:58] <MasterDuke> but i'm not sure if there's insufficient checking happening in P6opaque's at_key (same thing happens if i put an explicit nqp::existskey first, it just segfaults there instead)?

[16:59] <MasterDuke> or did something prior incorrectly change a VMHash into a P6opaque?

[17:05] <MasterDuke> m: BEGIN say &infix:<< +> >>.prec.WHAT

[17:06] <camelia> rakudo-moar a90369e10: OUTPUT: «(Hash)␤»

[17:07] <MasterDuke> m: BEGIN say &infix:<< eq >>.prec.WHAT

[17:07] <camelia> rakudo-moar a90369e10: OUTPUT: «(Hash)␤»

[18:04] *** cognominal joined
[18:06] *** squashable6 left
[18:08] *** reportable6 left
[18:10] *** reportable6 joined
[18:24] *** squashable6 joined
[19:07] *** [Coke]_ joined
[19:10] *** [Coke] left
[19:40] <Geth> ¦ MoarVM: 677d1fd6c8 | (Nicholas Clark)++ | 2 files

[19:40] <Geth> ¦ MoarVM: Run `git submodule --quiet update --depth 1` if git is new enough.

[19:40] <Geth> ¦ MoarVM: 

[19:40] <Geth> ¦ MoarVM: This reduces .git by about 32M at little cost, as most folks aren't looking

[19:40] <Geth> ¦ MoarVM: at submodule history. If you need the history, it's easy to get back with:

[19:40] <Geth> ¦ MoarVM: 

[19:40] <Geth> ¦ MoarVM: git submodule foreach git fetch --unshallow

[19:40] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/677d1fd6c8

[20:52] *** [Coke]_ left
[20:55] *** [Coke] joined
[22:09] *** cognominal left
[22:10] *** cognominal joined
[22:11] *** cognominal left
[23:51] *** evalable6 left
[23:51] *** linkable6 left
[23:53] *** linkable6 joined
