[00:00] *** vrurg left
[00:02] *** vrurg joined
[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[01:28] *** MasterDuke joined
[01:38] <MasterDuke> timo: i noticed you had some comment about performance when using the iterator over strings. i don't remember what exact code i was looking at a little while ago (hopefully i have some work saved i can retrieve when my desktop gets set up soon), but there are a bunch of places where we could make a tradeoff of increased code size for better

[01:38] <MasterDuke> performance

[01:40] <MasterDuke> coincidentally i was looking at https://dotat.at/@/2022-06-27-tolower-swar.html (a blog post about doing tolower() fast), but our current implementation of lc uses the grapheme iterator

[01:50] <MasterDuke> and then https://github.com/simdutf/simdutf hit HN yesterday or today. istr i looked at it (or its precursor) before, but whatever i looked at wasn't immediately obviously useful. but it looks like it's been expanded upon since i looked at it before, so maybe someone else could take a second look and re-evaluate

[02:06] <MasterDuke> fwiw, during a compete build+install of rakudo, lc() is called 86,531 times on strings of <8 chars and storage type of MVM_STRING_GRAPHEME_8

[02:27] <MasterDuke> hopefully in a week or so i'll be able to get back into moarvm/rakudo hacking a bit

[02:34] *** MasterDuke left
[02:36] *** frost joined
[02:38] *** nebuchadnezzar left
[03:38] *** statisfiable6 left
[03:38] *** notable6 left
[03:38] *** linkable6 left
[03:38] *** squashable6 left
[03:38] *** reportable6 left
[03:38] *** committable6 left
[03:38] *** bisectable6 left
[03:38] *** greppable6 left
[03:38] *** benchable6 left
[03:38] *** releasable6 left
[03:38] *** quotable6 left
[03:38] *** nativecallable6 left
[03:38] *** coverable6 left
[03:38] *** tellable6 left
[03:38] *** evalable6 left
[03:38] *** sourceable6 left
[03:38] *** shareable6 left
[03:38] *** bloatable6 left
[03:38] *** unicodable6 left
[03:39] *** coverable6 joined
[03:39] *** tellable6 joined
[03:39] *** reportable6 joined
[03:40] *** bloatable6 joined
[03:40] *** quotable6 joined
[03:40] *** linkable6 joined
[03:40] *** greppable6 joined
[03:41] *** benchable6 joined
[03:41] *** unicodable6 joined
[03:41] *** committable6 joined
[03:41] *** bisectable6 joined
[03:41] *** nativecallable6 joined
[03:41] *** shareable6 joined
[03:41] *** evalable6 joined
[03:41] *** releasable6 joined
[03:41] *** sourceable6 joined
[03:41] *** statisfiable6 joined
[03:42] *** notable6 joined
[03:42] *** squashable6 joined
[03:44] *** frost left
[04:53] *** quotable6 left
[04:53] *** bisectable6 left
[04:53] *** sourceable6 left
[04:53] *** committable6 left
[04:53] *** evalable6 left
[04:53] *** squashable6 left
[04:53] *** shareable6 left
[04:53] *** notable6 left
[04:53] *** coverable6 left
[04:53] *** tellable6 left
[04:53] *** linkable6 left
[04:53] *** releasable6 left
[04:53] *** greppable6 left
[04:53] *** nativecallable6 left
[04:53] *** statisfiable6 left
[04:53] *** bloatable6 left
[04:53] *** benchable6 left
[04:53] *** reportable6 left
[04:53] *** unicodable6 left
[04:54] *** squashable6 joined
[04:54] *** linkable6 joined
[04:54] *** committable6 joined
[04:54] *** greppable6 joined
[04:54] *** nativecallable6 joined
[04:54] *** coverable6 joined
[04:55] *** benchable6 joined
[04:55] *** unicodable6 joined
[04:55] *** reportable6 joined
[04:55] *** bloatable6 joined
[04:55] *** sourceable6 joined
[04:55] *** evalable6 joined
[04:55] *** statisfiable6 joined
[04:55] *** bisectable6 joined
[04:56] *** shareable6 joined
[04:56] *** quotable6 joined
[04:56] *** releasable6 joined
[04:56] *** notable6 joined
[04:56] *** tellable6 joined
[05:56] *** nativecallable6 left
[05:56] *** benchable6 left
[05:56] *** committable6 left
[05:56] *** bisectable6 left
[05:56] *** bloatable6 left
[05:56] *** tellable6 left
[05:56] *** coverable6 left
[05:56] *** reportable6 left
[05:56] *** evalable6 left
[05:56] *** unicodable6 left
[05:56] *** quotable6 left
[05:56] *** linkable6 left
[05:56] *** squashable6 left
[05:56] *** shareable6 left
[05:56] *** statisfiable6 left
[05:56] *** notable6 left
[05:56] *** greppable6 left
[05:56] *** sourceable6 left
[05:56] *** releasable6 left
[05:57] *** committable6 joined
[05:57] *** greppable6 joined
[05:57] *** reportable6 joined
[05:57] *** nativecallable6 joined
[05:58] *** linkable6 joined
[05:58] *** unicodable6 joined
[05:58] *** squashable6 joined
[05:58] *** benchable6 joined
[05:58] *** bisectable6 joined
[05:58] *** statisfiable6 joined
[05:58] *** releasable6 joined
[05:58] *** coverable6 joined
[05:59] *** evalable6 joined
[05:59] *** shareable6 joined
[05:59] *** bloatable6 joined
[05:59] *** sourceable6 joined
[05:59] *** tellable6 joined
[06:00] *** notable6 joined
[06:00] *** quotable6 joined
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:19] *** kjp joined
[06:22] <Nicholas> good *,*

[08:16] *** sena_kun joined
[08:18] <timo> good

[08:22] <timo> i semi-randomly watched the "swiss tables" presentation again, the one from cppcon from the google engineer

[08:26] *** Guest68 joined
[08:32] <timo> our hash implementation doesn't use any intrinsics for sse and such?

[08:34] <Guest68> Hello everybody. I have been investigating a problem I have with rakudo on macOS: https://stackoverflow.com/questions/73414989/qqx-no-longer-works-in-raku-2022-04. The problem is a commit to libuv. For Darwin fork()/exec() has been replaced with posix_spawn(). A side effect of this change is that posix_spawn() treats all descriptors, regardless if

[08:34] <Guest68> opened or not with O_CLOEXEC, as if they had. This is the pull request: https://github.com/libuv/libuv/pull/3064. I think that moar/raku/nqp (?) did not adapt to this change. The process is spawned but the output is lost. While I am certain that properly fixing this issue is beyond my capabilities I'd still like to have a look. I'd appreciate if

[08:34] <Guest68> you could point me at a source folder/file/function worth investigating.

[08:39] *** frost joined
[09:10] <Voldenet> Guest68: I could be wrong because the Proc::Async (I believe that is the one used here as well) is sufficiently complex, but https://github.com/MoarVM/MoarVM/blob/4b2de6/src/io/procops.c#L764 is the line that spawns the process I think

[09:14] <Guest68> Voldenet: Thank you very much, I'll have a look.

[09:20] *** nebuchadnezzar joined
[10:20] *** evalable6 left
[10:20] *** linkable6 left
[10:21] *** linkable6 joined
[10:22] *** evalable6 joined
[11:25] <Guest68> Unfortunately I don't get anywhere. The program flow in spawn_setup() is always the same so the file descriptors are always setup the same way. It is interesting that the test only fails when it is wrapped in MAIN.

[11:25] <Guest68> This will succeed: echo hi | ./dir/install/bin/raku -e 'for slurp() { shell <<echo ok>>; }'

[11:25] <Guest68> this won't: echo hi | ./dir/install/bin/raku -e 'sub MAIN() { for slurp() { shell <<echo ok>>; } }'

[12:05] *** reportable6 left
[12:09] *** reportable6 joined
[13:09] *** evalable6 left
[13:09] *** linkable6 left
[13:11] *** linkable6 joined
[13:11] *** evalable6 joined
[13:40] *** frost left
[14:44] *** samcv left
[14:44] *** samcv joined
[15:45] <Guest68> I have filed an issue at github: https://github.com/MoarVM/MoarVM/issues/1720. Thanks for your assistance!

[15:55] *** Guest68 left
[16:03] *** sena_kun left
[16:03] *** sena_kun joined
[16:18] *** discord-raku-bot left
[16:18] *** discord-raku-bot joined
[16:56] *** discord-raku-bot left
[16:57] *** discord-raku-bot joined
[17:42] <timo> isn't that how argfiles is supposed to work?

[17:55] <timo> ah i misunderstood

[18:05] *** reportable6 left
[18:07] *** epony left
[18:07] *** reportable6 joined
[18:26] *** epony joined
[18:40] *** Kaiepi left
[19:19] *** Kaiepi joined
[20:11] *** discord-raku-bot left
[21:58] *** sena_kun left
