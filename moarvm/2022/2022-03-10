[00:08] *** reportable6 left
[01:09] *** reportable6 joined
[02:09] *** notable6 left
[02:09] *** squashable6 left
[02:09] *** statisfiable6 left
[02:09] *** greppable6 left
[02:09] *** evalable6 left
[02:09] *** releasable6 left
[02:09] *** linkable6 left
[02:09] *** tellable6 left
[02:09] *** bloatable6 left
[02:09] *** unicodable6 left
[02:09] *** shareable6 left
[02:09] *** reportable6 left
[02:09] *** sourceable6 left
[02:09] *** coverable6 left
[02:09] *** quotable6 left
[02:09] *** committable6 left
[02:09] *** benchable6 left
[02:09] *** bisectable6 left
[02:09] *** nativecallable6 left
[02:09] *** frost joined
[02:10] *** releasable6 joined
[02:10] *** benchable6 joined
[02:10] *** tellable6 joined
[02:11] *** statisfiable6 joined
[02:11] *** nativecallable6 joined
[02:11] *** quotable6 joined
[02:11] *** greppable6 joined
[02:11] *** committable6 joined
[02:12] *** evalable6 joined
[02:12] *** shareable6 joined
[02:56] *** squashable6 joined
[03:10] *** notable6 joined
[03:10] *** sourceable6 joined
[03:11] *** coverable6 joined
[03:11] *** linkable6 joined
[04:10] *** bloatable6 joined
[04:12] *** reportable6 joined
[05:11] *** bisectable6 joined
[06:08] *** reportable6 left
[06:10] *** reportable6 joined
[07:10] *** unicodable6 joined
[08:33] *** evalable6 left
[08:33] *** linkable6 left
[09:32] *** kjp left
[09:33] *** linkable6 joined
[09:34] *** evalable6 joined
[09:48] *** sena_kun left
[09:52] *** sena_kun joined
[10:41] *** ShaneC left
[12:08] *** reportable6 left
[12:55] *** sena_kun left
[12:57] *** sena_kun joined
[13:11] *** reportable6 joined
[14:11] *** evalable6 left
[15:02] *** frost left
[15:23] *** squashable6 left
[15:24] *** squashable6 joined
[15:56] *** cognominal joined
[16:09] <MasterDuke> do we support any systems that don't have 128 bit integers?

[16:13] *** evalable6 joined
[16:16] <nine> Huh....I didn't know 128 bit integers were a thing

[16:18] <nine> I think at least with msvc you're out of luck

[16:27] <MasterDuke> hm. i was looking at https://www.pcg-random.org/using-pcg-c.html and just saw this "The 64-bit scheme is only supported on platforms that support 128-bit integers (e.g., using GCC or Clang as the compiler on a 64-bit system)."

[16:29] <MasterDuke> oh, but https://github.com/imneme/pcg-c#128-bit-math seems to suggest there's a way to get 64-bit output by combining two 32-bit generators

[17:50] *** Kaipi left
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[18:45] *** Kaipi joined
[18:57] *** ShaneC joined
[20:37] *** sena_kun left
[20:38] *** sena_kun joined
[21:23] <MasterDuke> nqp: my int $r; my int $i := 0; my int $s := nqp::time; $r := nqp::rand_i while $i++ < 100_000_000; say(nqp::div_n(nqp::time - $s, 1000000000e0)); say($r)

[21:23] <camelia> nqp-moarvm: OUTPUT: «0.518222349␤-940366421805941772␤»

[21:25] <MasterDuke> interesting. locally that's ~0.58s but drops to ~0.48s when i switch in xoshiro256++ instead of tinymt64

