[00:08] *** reportable6 left
[00:09] *** reportable6 joined
[01:09] *** linkable6 left
[01:10] *** linkable6 joined
[02:10] *** bloatable6 left
[02:10] *** benchable6 left
[02:10] *** linkable6 left
[02:10] *** greppable6 left
[02:10] *** quotable6 left
[02:10] *** coverable6 left
[02:10] *** releasable6 left
[02:10] *** shareable6 left
[02:10] *** tellable6 left
[02:10] *** statisfiable6 left
[02:10] *** committable6 left
[02:10] *** greppable6 joined
[02:11] *** committable6 joined
[02:11] *** linkable6 joined
[02:12] *** statisfiable6 joined
[02:12] *** benchable6 joined
[02:12] *** tellable6 joined
[02:12] *** bloatable6 joined
[02:12] *** coverable6 joined
[02:12] *** shareable6 joined
[02:13] *** releasable6 joined
[02:13] *** quotable6 joined
[03:48] *** Kaiepi left
[04:19] *** sena_kun joined
[05:19] *** benchable6 left
[05:19] *** reportable6 left
[05:19] *** bloatable6 left
[05:19] *** linkable6 left
[05:19] *** unicodable6 left
[05:19] *** coverable6 left
[05:19] *** notable6 left
[05:19] *** bisectable6 left
[05:19] *** greppable6 left
[05:19] *** committable6 left
[05:19] *** nativecallable6 left
[05:19] *** statisfiable6 left
[05:19] *** sourceable6 left
[05:19] *** releasable6 left
[05:19] *** evalable6 left
[05:19] *** quotable6 left
[05:19] *** tellable6 left
[05:19] *** shareable6 left
[05:19] *** bisectable6 joined
[05:19] *** greppable6 joined
[05:19] *** unicodable6 joined
[05:20] *** bloatable6 joined
[05:20] *** committable6 joined
[05:20] *** sourceable6 joined
[05:20] *** coverable6 joined
[05:20] *** shareable6 joined
[05:21] *** linkable6 joined
[05:21] *** reportable6 joined
[05:21] *** releasable6 joined
[05:21] *** benchable6 joined
[05:21] *** statisfiable6 joined
[05:22] *** notable6 joined
[05:22] *** tellable6 joined
[05:22] *** quotable6 joined
[05:22] *** evalable6 joined
[05:22] *** nativecallable6 joined
[06:08] *** reportable6 left
[06:08] *** reportable6 joined
[07:51] *** evalable6 left
[07:51] *** linkable6 left
[07:53] *** evalable6 joined
[07:54] *** linkable6 joined
[09:08] *** Kaiepi joined
[10:27] *** Kaiepi left
[10:28] *** Kaiepi joined
[10:30] *** Kaiepi left
[10:31] *** Kaiepi joined
[11:52] <nine> There is just no better way to learn really all about a language than implementing a compiler for it. Suddenly I understand how ParametricRoleHOW, ParametricRoleGroupHOW and CurriedRoleHOW fit together.

[11:57] *** discord-raku-bot left
[11:58] *** discord-raku-bot joined
[12:07] *** reportable6 left
[12:07] *** reportable6 joined
[12:27] *** discord-raku-bot left
[12:32] *** discord-raku-bot joined
[15:09] <nine> Huh....timing does seem to become a bit of an issue now and then in RakuAST

[15:11] <dogbert17> how is that possible?

[15:11] <nine> Like when to add a parametric role to its role group. At BEGIN time (when we find or create the group) the role doesn't have a compiled body block yet, so we can't add then. At the time we create the meta object it's too late as in the mean time we may want to specialize the role for a class.

[15:31] *** linkable6 left
[15:31] *** evalable6 left
[15:31] *** linkable6 joined
[15:33] *** evalable6 joined
[15:42] <nine> Yet in the end it's ye good olde semipredicate problem again. Role groups are themselves type objects, i.e. not concrete, thus if $group just doesn't do what I meant

[15:42] <nine> preventing PRODUCE-META-OBJECT from actually adding the role to its group

[17:02] *** evalable6 left
[17:02] *** linkable6 left
[17:03] *** evalable6 joined
[17:03] *** linkable6 joined
[17:28] <nine> We haz role groups!

[17:28] <nine> Now the final piece of the puzzle seems to be currying of roles.

[17:36] <lizmat> nine++

[17:36] <lizmat> meanwhile on SO: https://stackoverflow.com/questions/72416580/raku-nativecall-segfaults-getting-tuple-from-rust

[17:51] <nine> I don't think we support structs as value types

[17:52] <nine> At least for return values

[17:52] *** [Coke] left
[18:02] <nine> m: role Foo[$i] { }; sub foo(Foo:D[Int]) { }; foo(Foo[Int])

[18:02] *** [Coke] joined
[18:02] <camelia> rakudo-moar b15394b60: OUTPUT: «Parameter '<anon>' of routine 'foo' must be an object instance of type␤'Foo', not a type object of type 'Foo[Int]'.  Did you forget a '.new'?␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:02] <nine> m: role Foo[$i] { }; sub foo(Foo:D[Int]) { }; foo(Foo[Str].new)

[18:02] <camelia> rakudo-moar b15394b60: ( no output )

[18:03] <nine> Somehow, I don't think that's right

[18:06] <nine> Makes me realize, that I may have done RakuAST::Type::Coercion and RakuAST::Type::Definedness wrong. They should take a base type instead of a type name, so they become composable.

[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[19:18] *** japhb left
[20:51] *** evalable6 left
[20:51] *** linkable6 left
[20:51] *** evalable6 joined
[20:54] *** linkable6 joined
