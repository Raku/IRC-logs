[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[01:30] *** frost joined
[02:30] *** notable6 left
[02:30] *** unicodable6 left
[02:30] *** evalable6 left
[02:30] *** sourceable6 left
[02:30] *** committable6 left
[02:30] *** benchable6 left
[02:31] *** releasable6 left
[02:31] *** statisfiable6 left
[02:31] *** shareable6 left
[02:31] *** bloatable6 left
[02:31] *** tellable6 left
[02:31] *** greppable6 left
[02:31] *** reportable6 left
[02:31] *** bisectable6 left
[02:31] *** coverable6 left
[02:31] *** nativecallable6 left
[02:31] *** quotable6 left
[02:31] *** linkable6 left
[02:31] *** greppable6 joined
[02:31] *** nativecallable6 joined
[02:31] *** linkable6 joined
[02:31] *** reportable6 joined
[02:31] *** unicodable6 joined
[02:31] *** evalable6 joined
[02:32] *** releasable6 joined
[02:32] *** bloatable6 joined
[02:32] *** coverable6 joined
[02:32] *** quotable6 joined
[02:32] *** shareable6 joined
[02:32] *** statisfiable6 joined
[02:32] *** committable6 joined
[02:33] *** bisectable6 joined
[02:33] *** tellable6 joined
[02:33] *** sourceable6 joined
[02:33] *** notable6 joined
[02:34] *** benchable6 joined
[03:34] *** statisfiable6 left
[03:34] *** linkable6 left
[03:34] *** quotable6 left
[03:34] *** bisectable6 left
[03:34] *** releasable6 left
[03:34] *** unicodable6 left
[03:34] *** tellable6 left
[03:34] *** evalable6 left
[03:34] *** notable6 left
[03:34] *** reportable6 left
[03:34] *** committable6 left
[03:34] *** bloatable6 left
[03:34] *** benchable6 left
[03:34] *** nativecallable6 left
[03:34] *** sourceable6 left
[03:34] *** coverable6 left
[03:34] *** shareable6 left
[03:34] *** greppable6 left
[03:34] *** notable6 joined
[03:34] *** bisectable6 joined
[03:35] *** nativecallable6 joined
[03:35] *** coverable6 joined
[03:35] *** benchable6 joined
[03:35] *** bloatable6 joined
[03:35] *** sourceable6 joined
[03:35] *** quotable6 joined
[03:35] *** committable6 joined
[03:36] *** reportable6 joined
[03:36] *** greppable6 joined
[03:36] *** releasable6 joined
[03:36] *** evalable6 joined
[03:36] *** tellable6 joined
[03:36] *** unicodable6 joined
[03:36] *** linkable6 joined
[03:37] *** statisfiable6 joined
[03:37] *** shareable6 joined
[04:53] *** Kaiepi left
[05:13] <Nicholas> good ðŸ¦†, #moarvm

[05:37] *** kjp joined
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[07:27] <nine> japhb: I don't see a good reason but we do take the mutex for all IO ops as a principle. There could still be a good reason for that. Apart from this, if MVM_io_read_bytes and MVM_io_is_tty are trying to lock the same mutex, one of them ought to win (and release the mutex once it's done). So I don't understand why it would deadlock?

[08:12] *** Kaiepi joined
[08:19] *** lizmat_ is now known as lizmat

[08:19] *** Geth__ left
[08:19] *** Geth joined
[08:24] *** Geth left
[08:24] *** Geth joined
[08:28] *** Geth left
[08:29] *** Geth joined
[08:33] *** Geth left
[08:33] *** Geth joined
[10:35] *** Kaiepi left
[10:40] *** Kaiepi joined
[11:13] <lizmat> https://www.theregister.com/2022/06/10/apple_m1_pacman_flaw/?utm_source=twitter&utm_medium=twitter&utm_campaign=auto&utm_content=article

[11:13] <lizmat> meh

[11:13] <lizmat> https://www.theregister.com/2022/06/10/apple_m1_pacman_flaw/

[11:23] <nine> So.... speculative execution is hard

[11:34] <timo> as always ;(

[11:35] <timo> just .. don't allow program code to get high resolution time values

[11:35] <timo> sounds easy enough lol

[11:44] *** Kaiepi left
[11:48] *** Kaiepi joined
[12:02] <japhb> nine: It wasn't deadlocking just on the mutexes.  It was other program logic.  To whit, one thread was waiting in the read for the response to a terminal query string, which was never getting sent because I'd inserted the TTY check just before sending the terminal query string.  And the query would never get sent because it was waiting on the mutex that the read already held.

[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:11] <timo> the read stuff itself is async though, right?

[12:44] <japhb> timo: Not on a syncfile.

[12:50] <timo> ah

[12:51] <timo> do we cache the result of .t btw? if so, then it'll be very fun to discover that it may lock if you have for some reason had something else call .t on it before and never realized until you, for example, tossed out some debug code

[13:14] <japhb> timo: Nah, no caching that I'm aware of.  I don't think isatty is an expensive operation (though it may be a syscall underneath, I suppose).

[13:32] *** frost left
[13:53] *** [Coke] left
[13:56] *** [Coke] joined
[15:10] *** nine left
[15:11] *** nine joined
[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[19:23] *** linkable6 left
[19:23] *** evalable6 left
[19:25] *** linkable6 joined
[19:26] *** evalable6 joined
[20:26] *** benchable6 left
[20:26] *** reportable6 left
[20:26] *** nativecallable6 left
[20:26] *** committable6 left
[20:26] *** coverable6 left
[20:26] *** releasable6 left
[20:26] *** bisectable6 left
[20:26] *** sourceable6 left
[20:26] *** tellable6 left
[20:26] *** notable6 left
[20:26] *** unicodable6 left
[20:26] *** shareable6 left
[20:26] *** quotable6 left
[20:26] *** evalable6 left
[20:26] *** bloatable6 left
[20:26] *** linkable6 left
[20:26] *** statisfiable6 left
[20:26] *** greppable6 left
[20:26] *** notable6 joined
[20:26] *** coverable6 joined
[20:27] *** committable6 joined
[20:27] *** greppable6 joined
[20:27] *** unicodable6 joined
[20:27] *** bisectable6 joined
[20:27] *** nativecallable6 joined
[20:27] *** shareable6 joined
[20:27] *** reportable6 joined
[20:28] *** tellable6 joined
[20:28] *** linkable6 joined
[20:28] *** bloatable6 joined
[20:28] *** sourceable6 joined
[20:28] *** quotable6 joined
[20:28] *** evalable6 joined
[20:28] *** benchable6 joined
[20:28] *** releasable6 joined
[20:29] *** statisfiable6 joined
[20:45] *** Kaiepi left
[21:46] *** Kaiepi joined
[21:49] *** Kaipei joined
[21:51] *** Kaiepi left
