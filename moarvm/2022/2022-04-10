[00:07] *** reportable6 left
[00:10] *** reportable6 joined
[01:11] <nine> And up to 377

[02:19] *** notable6 left
[02:19] *** releasable6 left
[02:19] *** reportable6 left
[02:19] *** sourceable6 left
[02:19] *** bisectable6 left
[02:19] *** linkable6 left
[02:19] *** bloatable6 left
[02:19] *** nativecallable6 left
[02:19] *** coverable6 left
[02:19] *** committable6 left
[02:19] *** quotable6 left
[02:19] *** unicodable6 left
[02:19] *** evalable6 left
[02:19] *** greppable6 left
[02:19] *** benchable6 left
[02:19] *** statisfiable6 left
[02:19] *** shareable6 left
[02:20] *** unicodable6 joined
[02:20] *** greppable6 joined
[02:20] *** quotable6 joined
[02:21] *** bloatable6 joined
[02:21] *** bisectable6 joined
[02:21] *** sourceable6 joined
[02:21] *** reportable6 joined
[02:21] *** evalable6 joined
[02:21] *** benchable6 joined
[02:22] *** committable6 joined
[02:22] *** notable6 joined
[02:22] *** statisfiable6 joined
[02:22] *** nativecallable6 joined
[02:22] *** releasable6 joined
[02:22] *** coverable6 joined
[02:22] *** linkable6 joined
[02:22] *** shareable6 joined
[03:37] *** shareable6 left
[03:37] *** nativecallable6 left
[03:37] *** evalable6 left
[03:37] *** coverable6 left
[03:37] *** unicodable6 left
[03:37] *** reportable6 left
[03:37] *** notable6 left
[03:37] *** benchable6 left
[03:37] *** bisectable6 left
[03:37] *** statisfiable6 left
[03:38] *** unicodable6 joined
[03:38] *** reportable6 joined
[03:39] *** coverable6 joined
[03:39] *** evalable6 joined
[03:39] *** benchable6 joined
[03:39] *** nativecallable6 joined
[03:39] *** bisectable6 joined
[03:40] *** notable6 joined
[03:40] *** statisfiable6 joined
[03:40] *** shareable6 joined
[04:40] *** bloatable6 left
[04:40] *** committable6 left
[04:40] *** sourceable6 left
[04:40] *** releasable6 left
[04:40] *** reportable6 left
[04:40] *** bisectable6 left
[04:40] *** nativecallable6 left
[04:40] *** greppable6 left
[04:40] *** linkable6 left
[04:40] *** quotable6 left
[04:40] *** evalable6 left
[04:40] *** notable6 left
[04:40] *** shareable6 left
[04:40] *** unicodable6 left
[04:40] *** benchable6 left
[04:40] *** statisfiable6 left
[04:40] *** coverable6 left
[04:40] *** unicodable6 joined
[04:40] *** reportable6 joined
[04:41] *** shareable6 joined
[04:41] *** evalable6 joined
[04:41] *** bisectable6 joined
[04:42] *** releasable6 joined
[04:42] *** notable6 joined
[04:42] *** statisfiable6 joined
[04:42] *** quotable6 joined
[04:42] *** coverable6 joined
[04:42] *** bloatable6 joined
[04:42] *** benchable6 joined
[04:42] *** sourceable6 joined
[04:43] *** committable6 joined
[04:43] *** linkable6 joined
[04:43] *** nativecallable6 joined
[04:43] *** greppable6 joined
[05:11] *** frost joined
[06:06] *** reportable6 left
[06:09] *** reportable6 joined
[10:17] *** sena_kun left
[10:18] *** sena_kun joined
[11:18] *** linkable6 left
[11:18] *** evalable6 left
[11:20] *** linkable6 joined
[11:21] *** evalable6 joined
[11:48] <nine> Looks like auto-generated protos are the next facet for the timing deliberations.

[11:50] <nine> Given just: multi sub foo() is export { }, this obviously needs to auto-generate a proto and this proto's meta object must be available to the export-trait, as this really means "export my proto".

[11:50] <lizmat> fwiw, I wouldn't be against removing auto-generate protos

[11:51] <lizmat> they're really just too much magic imo

[11:52] <nine> That would break so much code out there. I mean, who is manually creating protos if they don't have to? So I don't see how that would be feasible.

[12:04] <lizmat> I know... still, I can voice an opinion, no ?

[12:04] <lizmat> :-)

[12:06] *** reportable6 left
[12:08] *** reportable6 joined
[12:15] <nine> You just did, so obviously you can :P

[12:21] <jnthnwrthngtn> nine: Yup, there's multiple unresolved design questions in the area of multis in RakuAST, I'm afraid.

[12:21] <nine> Actually, that comment is not totally off. There is the question of whether auto-generating protos is actually a task for the AST, or if it belongs in the parser. I.e. do people who create synthetic ASTs need to create those protos as well?

[12:29] <jnthnwrthngtn> AST.

[12:30] <jnthnwrthngtn> RakuAST is abstracted from some amount of syntactic detail, but not to that degree. 

[12:32] <jnthnwrthngtn> It's probably some kind of begin-time effect, much like package creation

[12:32] <jnthnwrthngtn> Although it may be that we need to tease "begin time" apart a little bit

[13:06] <jnthnwrthngtn> OK, two tiny fixes from me today in a spare moment. afk for a while :)

[13:08] *** linkable6 left
[13:08] *** evalable6 left
[13:10] *** evalable6 joined
[13:11] *** linkable6 joined
[13:17] *** Geth left
[13:17] *** Geth joined
[13:21] *** Geth left
[13:21] *** Geth joined
[13:21] *** sena_kun left
[13:23] *** sena_kun joined
[13:36] *** Geth left
[13:36] *** Geth joined
[14:15] <nine> jnthnwrthngtn: why are RakuAST::Parameter::Slurpy::Capture no RakuAST::Parameters?

[14:16] <nine> Ah, stupid question....because they just aren't. They're markers on the actual parameter objects

[14:18] <nine> I'm really noticing that lack of sleep now.

[14:24] *** shareable6 left
[14:24] *** unicodable6 left
[14:25] *** evalable6 left
[14:25] *** statisfiable6 left
[14:25] *** bisectable6 left
[14:25] *** statisfiable6 joined
[14:26] *** shareable6 joined
[14:27] *** unicodable6 joined
[14:27] *** evalable6 joined
[14:28] *** bisectable6 joined
[14:55] *** unicodable6 left
[14:55] *** shareable6 left
[14:55] *** evalable6 left
[14:55] *** evalable6 joined
[14:56] *** releasable6 left
[14:56] *** vrurg left
[14:56] *** shareable6 joined
[14:56] *** vrurg joined
[14:56] *** releasable6 joined
[14:57] *** unicodable6 joined
[15:00] *** JoeyeS joined
[15:05] *** linkable6 left
[15:08] *** linkable6 joined
[15:15] *** linkable6 left
[15:17] *** linkable6 joined
[15:25] *** frost left
[15:28] *** JoeyeS left
[15:29] *** JoeyeS joined
[15:29] *** JoeyeS is now known as Guest6423

[15:32] *** Guest6423 is now known as JoeyeS

[15:33] *** [Coke] left
[15:36] *** [Coke] joined
[15:38] *** linkable6 left
[15:41] *** linkable6 joined
[16:00] <nine> Oh boy...how would I prevent a routine from getting added to the lexpad (i.e. a multi dispatchee)?

[16:07] *** JoeyeS left
[16:15] *** JoeyeS joined
[16:15] *** JoeyeS is now known as Guest1891

[16:16] *** dogbert11 joined
[16:18] *** dogbert12 joined
[16:19] *** dogbert17 left
[16:20] *** Guest1891 is now known as JoeyeS

[16:20] *** dogbert11 left
[16:29] *** dogbert17 joined
[16:30] *** dogbert12 left
[16:36] *** dogbert11 joined
[16:38] *** dogbert17 left
[16:51] *** dogbert17 joined
[16:52] *** dogbert11 left
[17:17] *** dogbert17 left
[17:25] *** dogbert17 joined
[17:25] *** JoeyeS left
[17:28] *** dogbert11 joined
[17:30] *** dogbert17 left
[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[18:46] *** dogbert17 joined
[18:49] *** dogbert11 left
[18:57] *** dogbert11 joined
[18:59] *** JoeyeS joined
[19:00] *** dogbert17 left
[19:21] *** dogbert17 joined
[19:23] *** dogbert11 left
[19:32] *** dogbert11 joined
[19:34] *** dogbert17 left
[19:41] *** linkable6 left
[19:41] *** committable6 left
[19:41] *** greppable6 left
[19:41] *** bloatable6 left
[19:41] *** statisfiable6 left
[19:41] *** evalable6 left
[19:41] *** quotable6 left
[19:41] *** notable6 left
[19:41] *** benchable6 left
[19:41] *** sourceable6 left
[19:41] *** releasable6 left
[19:41] *** unicodable6 left
[19:41] *** coverable6 left
[19:41] *** shareable6 left
[19:41] *** reportable6 left
[19:41] *** nativecallable6 left
[19:41] *** bisectable6 left
[19:46] *** greppable6 joined
[19:47] *** unicodable6 joined
[19:47] *** sourceable6 joined
[19:47] *** releasable6 joined
[19:47] *** shareable6 joined
[19:47] *** evalable6 joined
[19:48] *** quotable6 joined
[19:48] *** reportable6 joined
[19:48] *** statisfiable6 joined
[19:48] *** notable6 joined
[19:48] *** bloatable6 joined
[19:48] *** benchable6 joined
[19:49] *** coverable6 joined
[19:49] *** nativecallable6 joined
[19:49] *** linkable6 joined
[19:49] *** bisectable6 joined
[19:49] *** committable6 joined
[20:03] <MasterDuke> huh, look like https://github.com/MoarVM/MoarVM/commit/e73882507fd18f1afc0a2dd5a89c1344daa39e52 is already supposed to detect a working stdatomic.h

[20:05] <MasterDuke> ah, but that only uses the probe to check for whether we can use mimalloc

[20:25] <Geth> ¦ MoarVM: MasterDuke17++ created pull request #1699: Take stdatomic.h probe into account in decision whether or not to use c11 atomics 

[20:25] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1699

[20:59] *** JoeyeS left
[21:54] *** dogbert11 left
[21:56] *** dogbert11 joined
[21:57] <Geth> ¦ MoarVM: d7dee3a282 | (Daniel Green)++ | Configure.pl

[21:57] <Geth> ¦ MoarVM: Use stdatomic probe in using c11 atomics decision

[21:57] <Geth> ¦ MoarVM: 

[21:57] <Geth> ¦ MoarVM: Had to move the probe earlier, and then also copy the minimal ldlib setup

[21:57] <Geth> ¦ MoarVM: code.

[21:57] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d7dee3a282

[21:57] <Geth> ¦ MoarVM: 794e1d589b | MasterDuke17++ (committed using GitHub Web editor) | Configure.pl

[21:57] <Geth> ¦ MoarVM: Merge pull request #1699 from MasterDuke17/use_stdatomic_probe_to_decide_whether_to_use_c11_atomics

[21:57] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/794e1d589b

[22:33] *** JoeyeS joined
[22:43] *** JoeyeS left
[22:56] *** JoeyeS joined
[23:01] *** JoeyeS left
[23:48] *** JoeyeS joined
