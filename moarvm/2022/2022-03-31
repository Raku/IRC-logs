[01:32] *** japhb left
[01:35] *** japhb joined
[02:01] *** nine left
[02:02] *** nine joined
[05:51] <Nicholas> good *, *

[06:39] *** kjp_ left
[06:55] *** kjp joined
[07:05] <nine> * is good!

[08:15] <moon-child> 'what a lot of things you do use good * for!'

[09:19] <lizmat> I * it  :-)

[09:42] *** ggoebel left
[10:18] <lizmat> ok, I think I got a lead on #1920

[10:19] <lizmat> so, looking at https://github.com/rakudo/rakudo/blob/master/src/Perl6/ModuleLoader.nqp#L245

[10:20] <lizmat> if the setting has already been loaded, it doesn't do anything there

[10:21] <lizmat> but I think it may not be doing enough in that case: if I put a debug message for the case that the setting was already loaded

[10:21] <lizmat> it is *always* *that* debug message before the segfault

[10:21] <lizmat> or completion, or hang

[10:22] <lizmat> so my theory here is that somehow the "already loaded" branch is not doing enough

[10:22] <lizmat> and that after that, the runloop goes into never never land, usually crashing, sometimes hanging

[10:23] <lizmat> does that make sense?  jnthnwrthngtn  nine MasterDuke ^^

[10:25] <jnthnwrthngtn> You mean it never makes it to Loading bytecode from $path ?

[10:25] * jnthnwrthngtn notes it is holding $setting-lock

[10:26] <jnthnwrthngtn> About the hang, notice this code is really fragile

[10:26] <jnthnwrthngtn> If there's any exception, it shall never release the lock

[10:32] <lizmat> so you mean it doesn't make sense to protect the global %settings_loaded hash ?

[10:33] <jnthnwrthngtn> lizmat: I'm saying that if `find_setting` for example throws an exception, the lock is never released, so nothing can ever obtain it again, and that is maybe why there's a hang

[10:34] <lizmat> the hangs were there *before* I introduced that lock already

[10:34] <jnthnwrthngtn> OK, well, now there's a second way to hang ;)

[10:34] <jnthnwrthngtn> Just needs a CATCH that releases the lock and rethrows

[10:34] <lizmat> basically 8/10 segfault, 1/10 hang, 1/10 completed

[10:35] <jnthnwrthngtn> What's the stacktrace of the segfault?

[10:35] * lizmat has no stacktrace of the segfault :-(

[10:42] <jnthnwrthngtn> Is it reproducible with `rakudo-gdb-m`?

[10:43] <jnthnwrthngtn> Oh, somebody posted taht in the issue

[10:44] <nine> Parallel module loading has more than one way to segfault

[11:02] *** ggoebel joined
[11:22] <lizmat> jnthnwrthngtn: added an lldbm backtrace: https://github.com/rakudo/rakudo/issues/1920#issuecomment-1084445196

[11:22] *** ggoebel left
[11:23] <lizmat> it *always* stops there

[11:23] <lizmat> hmmm... not always :-)

[11:24] <lizmat> added another backtrace

[11:31] *** ggoebel joined
[11:49] <lizmat> added some more: but to me it looks like deserializing bytecode is not threadsafe

[12:13] *** ggoebel left
[12:55] *** ggoebel joined
[15:02] *** discord-raku-bot left
[15:03] *** discord-raku-bot joined
[15:44] *** committable6 joined
[15:44] *** bisectable6 joined
[15:44] *** sourceable6 joined
[15:44] *** bisectable6 left
[15:45] *** quotable6 joined
[15:45] *** coverable6 joined
[15:45] *** linkable6 joined
[15:46] *** notable6 joined
[15:46] *** nativecallable6 joined
[15:46] *** releasable6 joined
[15:46] *** bloatable6 joined
[15:47] *** reportable6 joined
[15:47] *** bisectable6 joined
[16:11] *** linkable6 left
[16:14] *** linkable6 joined
[18:16] *** reportable6 left
[18:17] *** reportable6 joined
[20:00] *** statisfiable6 joined
[20:01] *** bisectable6 left
[20:02] *** bisectable6 joined
[20:03] *** benchable6 joined
[20:03] *** squashable6 joined
[20:04] *** unicodable6 joined
[20:04] *** evalable6 joined
[20:04] *** evalable6 left
[20:04] *** benchable6 left
[20:04] *** bisectable6 left
[20:04] *** squashable6 left
[20:04] *** statisfiable6 left
[20:04] *** releasable6 left
[20:04] *** linkable6 left
[20:04] *** coverable6 left
[20:04] *** quotable6 left
[20:04] *** bloatable6 left
[20:04] *** notable6 left
[20:04] *** unicodable6 left
[20:04] *** sourceable6 left
[20:04] *** nativecallable6 left
[20:04] *** reportable6 left
[20:04] *** committable6 left
[20:04] *** linkable6 joined
[20:04] *** sourceable6 joined
[20:04] *** squashable6 joined
[20:04] *** greppable6 joined
[20:05] *** reportable6 joined
[20:05] *** statisfiable6 joined
[20:05] *** shareable6 joined
[20:05] *** notable6 joined
[20:05] *** coverable6 joined
[20:05] *** evalable6 joined
[20:06] *** committable6 joined
[20:06] *** unicodable6 joined
[20:06] *** nativecallable6 joined
[20:06] *** squashable6 left
[20:07] *** quotable6 joined
[20:07] *** bloatable6 joined
[20:07] *** benchable6 joined
[20:07] *** bisectable6 joined
[20:07] *** releasable6 joined
[22:38] *** discord-raku-bot left
[22:38] *** discord-raku-bot joined
[22:38] *** gfldex left
[22:41] *** gfldex joined
[22:44] *** discord-raku-bot left
[22:45] *** discord-raku-bot joined
[22:48] *** Techcable left
[22:50] *** Techcable joined
[22:53] *** Techcable left
[22:55] *** Techcable joined
