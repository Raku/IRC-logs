[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:36] *** jnthnwrthngtn left
[00:37] *** jnthnwrthngtn joined
[01:38] *** timo left
[01:55] *** frost joined
[02:34] *** frost left
[02:37] *** frost joined
[03:37] *** coverable6 left
[03:37] *** unicodable6 left
[03:37] *** evalable6 left
[03:37] *** greppable6 left
[03:37] *** benchable6 left
[03:37] *** bisectable6 left
[03:37] *** statisfiable6 left
[03:37] *** tellable6 left
[03:37] *** committable6 left
[03:37] *** nativecallable6 left
[03:37] *** shareable6 left
[03:37] *** quotable6 left
[03:37] *** sourceable6 left
[03:37] *** notable6 left
[03:37] *** releasable6 left
[03:37] *** linkable6 left
[03:37] *** reportable6 left
[03:37] *** bloatable6 left
[03:37] *** squashable6 left
[03:38] *** greppable6 joined
[03:38] *** bloatable6 joined
[03:38] *** statisfiable6 joined
[03:39] *** releasable6 joined
[03:39] *** notable6 joined
[03:39] *** nativecallable6 joined
[03:39] *** unicodable6 joined
[03:39] *** committable6 joined
[03:39] *** quotable6 joined
[03:39] *** shareable6 joined
[03:40] *** sourceable6 joined
[03:40] *** benchable6 joined
[03:40] *** squashable6 joined
[04:31] *** frost left
[04:39] *** linkable6 joined
[04:39] *** bisectable6 joined
[05:39] *** evalable6 joined
[07:00] <Nicholas> good *, *

[07:04] <lizmat>  /o Nicholas

[08:08] *** reportable6 joined
[08:40] *** tellable6 joined
[08:42] <Nicholas> I assume that it's (relatively) sensible to merge the C11 atomics stuff now?

[08:42] <Nicholas> releasable6: help

[08:42] <releasable6> Nicholas, status | status link # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Releasable

[08:42] <Nicholas> releasable6: status

[08:42] <releasable6> Nicholas, Next release in ≈3 days and ≈10 hours. 1 blocker. Changelog for this release was not started yet

[08:42] <releasable6> Nicholas, Details: https://gist.github.com/b445ca955c46fd8aed89c68463e4ed7a

[08:42] <Nicholas> but the atomics stuff is optional, and default off, so it seems safe

[08:48] <nine> I say go for it

[11:38] <Geth__> ¦ MoarVM/master: 6 commits pushed by (Nicholas Clark)++

[11:38] <Geth__> ¦ MoarVM/master: 777a18c441 | Rename atomic_load to load_atomic to avoid clashes with C11 atomics

[11:38] <Geth__> ¦ MoarVM/master: 48c67de858 | Add AO_READ and AO_CAST macros to abstract actions on AO_t

[11:38] <Geth__> ¦ MoarVM/master: 783bb2ac3c | Support using C11 atomics instead of libatomic_ops

[11:38] <Geth__> ¦ MoarVM/master: 9ff2236969 | CI tests for --c11-atomics on Linux and macOS

[11:38] <Geth__> ¦ MoarVM/master: 44696884d1 | Use `atomic_load_explicit` on all compilers, not just clang

[11:38] <Geth__> ¦ MoarVM/master: f884085c14 | Merge pull request #1640 from nwc10/C11-atomics

[11:38] <Geth__> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/4b2de6d1d09f...f884085c145d

[11:40] *** coverable6 joined
[12:05] <MasterDuke> so changing `!$obj.prec<iffy>` to `!nqp::getattr($obj.prec,Map,'$!storage')<iffy>` here https://github.com/rakudo/rakudo/blob/master/src/Perl6/Optimizer.nqp#L2745 causes the segfault not to happen

[12:07] <MasterDuke> but that seems like masking over an underlying problem. i.e., why don't all infixes cause a segfault?

[12:07] *** reportable6 left
[12:10] <MasterDuke> maybe the difference is that only infixes that return an empty hash from .prec cause the segfault?

[12:12] <MasterDuke> m: dd &infix:<< +> >>.prec; dd &infix:<< +< >>.prec; dd &infix:<< +| >>.prec; dd &infix:<< ~< >>.prec;

[12:12] <camelia> rakudo-moar fb909efce: OUTPUT: «{}␤{}␤{:assoc("left"), :prec("t=")}␤{}␤»

[12:12] <nine> But still, none of these may even cause a segfault.

[12:12] <MasterDuke> those are just some examples. it looks like anything that returns {} from .prec will segfault, but other things do

[12:13] <nine> i.e. they are not allowed to

[12:13] <MasterDuke> oh yeah, definitely

[12:14] <MasterDuke> but i think it's something in dispatching. disabling spesh doesn't change anything

[12:18] <MasterDuke> i.e., dispatch is not de-containerizing in some cases

[12:23] <MasterDuke> oh interesting. rakudo 2021.09 + that change in Optimizer.nqp segfaults also. so not new-disp's fault

[13:09] *** reportable6 joined
[13:38] *** kjp left
[13:46] <MasterDuke> adding `if (!del) die_no_ass_del(tc, st);` here https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L1468 measn'

[13:47] <MasterDuke> s/measn'/fixes the segfault/

[13:48] <MasterDuke> which is good.but i still don't know why it's getting the wrong repr anyway

[13:48] <nine> It's getting the wrong repr?

[13:49] <MasterDuke> well, it's a P6opaque. STABLE(obj)->debug_name == "Hash"

[13:50] <MasterDuke> so for some of the infixes `.prec` returns a BOOTHash/VMHash. but when it's empty, it's an HLL hash

[13:51] *** kjp joined
[14:11] <MasterDuke> adding `trait_mod:<is>(&infix:«+<»,  :prec($multiplicative));` here https://github.com/rakudo/rakudo/blob/master/src/core.c/precedence.pm6#L67 also fixes the segfault (with a stock MoarVM)

[14:12] <MasterDuke> and then `dd &infix:<< +> >>.prec` prints `{:assoc("left"), :prec("u=")}`

[14:16] <MasterDuke> that change passes a spectest

[14:24] <MasterDuke> let's see if i can sum up where things stand: `&infix:«+<»` didn't have its precedence set, therefore the call to `.prec` went through Code's method prec, which simple returns `my %`, which is an HLL hash and the optimizer can't operate on them directly, so the atkey goes through P6opaque and that's where the segfault happens because it's

[14:24] <MasterDuke> ass_del_slot != -1, but get_obj_at_offset() still returns 0x0

[14:27] <MasterDuke> the missing precedences in precedence.pm6 seems like an accidental omission, so those should be added, and that nicely fixes the segfault

[14:27] <MasterDuke> anything else i'm not sure about

[14:29] <MasterDuke> i don't know if there's some problem with `my %`, but it's only used a couple other times in rakudo

[14:33] <MasterDuke> heh. removing those added precedences and instead changing https://github.com/rakudo/rakudo/blob/master/src/core.c/Code.pm6#L25 to `my % = ()` also fixes the segfault

[14:37] <MasterDuke> interesting, there's definitely different ast for a sub returning `my %` vs `my % = ()`

[14:39] <MasterDuke> https://gist.github.com/MasterDuke17/a8f3e2cefd375205a766b2f6f7e8d3d3 not the easiest thing to read in a gist, but a vimdiff of the only relevant different in the asts

[15:19] <vrurg> BTW, I was looking into feasibility of doing coercions via new-disp and it seems making little to no sense. The part with fallback to .COERCE and .new depends on value being coerced and this we barely can cache with new-disp.

[15:29] *** linkable6 left
[15:31] *** linkable6 joined
[15:38] *** squashable6 left
[15:45] <jnthnwrthngtn> vrurg: What do you mean by "the value being coerced"? The value itself, or the type of the value?

[15:47] <vrurg> jnthnwrthngtn: The value itself. Custom methods may have `where` blocks, for example.

[15:47] *** patrickb left
[15:48] <jnthnwrthngtn> Hm, but what are the semantics of whether we use COERCE or new?

[15:48] *** patrickb joined
[15:49] <vrurg> can we .Type -> then .COERCE($value) -> then .new($value)

[15:49] <vrurg> .Type is doable.

[15:50] <vrurg> And the thing I've missed and realized in about 10mins after the first message – I still can iterate method candidates and make sure there are no post-constraints attached to the parameter.

[15:51] <vrurg> This would probably be 90%+ of all cases.

[15:52] <vrurg> Then the only possible issue is if a method gets wrapped at run-time. But this we can explicitly spec as compile-time possibility only due to optimization needs.

[16:13] <MasterDuke> huh. why don't the precedences in src/core.c/precedence.pm6 always match the ones in src/Perl6/Grammar.nqp ?

[16:14] <MasterDuke> e.g., `my Mu $methodcall       := nqp::hash('prec', 'y=');` vs `my %methodcall      := nqp::hash('prec', 'y=', 'assoc', 'unary', 'dba', 'methodcall', 'fiddly', 1);`

[16:15] *** kjp left
[16:15] <MasterDuke> `%named_unary` is missing entirely from precedence.pm6

[16:20] <jnthnwrthngtn> vrurg: What, so if multi-dispatch to COERCE fails then we try `new`?

[16:31] <MasterDuke> would there be any reason not to have the table and info in precedence.pm6 exactly match what's in Grammar.nqp?

[16:38] *** squashable6 joined
[16:43] <vrurg> jnthnwrthngtn: Kind of. If .cando($value) on target type COERCE fails.

[16:44] <vrurg> I'll be afk for a couple of hours.

[16:47] *** kjp joined
[16:54] <nine> MasterDuke: oh, so there's probaby 2 bugs here. The severe one where MoarVM's at_key assumes without checking that if there's an associative delegate attribute, it's also initialized, leading to the segfault and the triggering one in the optimizer which expects a low level hash but gets an HLL one

[16:59] <MasterDuke> for the first, is adding `if (!del) die_no_ass_del(tc, st);` (or a throw with a different error message) here https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L1468 a correct fix? or should something more complicated be done?

[16:59] <MasterDuke> for the second, i have no idea

[17:05] <nine> MasterDuke: I'm leaning towards returning tc->instance->VMNull instead of throwing an exception. The type after all does support associative operations. It's just that there's no data yet, so we ought to pretend that there's just an empty hash there.

[17:06] <nine> MasterDuke: for the thing in the optimizer, unless nqp::ishash($hash) { $hash := $hash.FLATTENABLE_HASH(); } seems to be the idiom for "downgrading" a possible HLL hash

[17:17] *** kjp left
[17:24] *** linkable6 left
[17:24] *** linkable6 joined
[17:25] <lizmat> I've merged MasterDuke's PR

[17:25] <lizmat> please note that in RakuAST all of that precedence stuff is kept in *one* place  :-)

[17:35] <nine> I for one welcome our new AST overloards!

[18:07] *** reportable6 left
[18:07] *** reportable6 joined
[18:10] *** kjp joined
[19:51] *** nebuchadnezzar left
[19:51] *** nebuchadnezzar joined
[20:40] <MasterDuke> ah, that'll be nice

[20:41] <MasterDuke> guess i won't bother syncing up the two places now

[20:42] <MasterDuke> nine: re the optimizer, that sort of seems like papering over a problem, given that changing the `my %` to `my % = ()` makes the hash non-HLL

[21:41] *** linkable6 left
[21:41] *** evalable6 left
[21:42] *** evalable6 joined
[21:42] *** linkable6 joined
[22:13] *** discord-raku-bot left
[22:14] *** discord-raku-bot joined
[22:18] *** discord-raku-bot left
[22:18] *** discord-raku-bot joined
