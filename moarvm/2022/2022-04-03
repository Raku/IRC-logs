[00:08] *** reportable6 left
[00:10] *** reportable6 joined
[03:35] *** ggoebel left
[05:17] *** frost joined
[06:08] *** reportable6 left
[06:09] *** reportable6 joined
[07:39] *** nativecallable6 left
[07:39] *** greppable6 left
[07:39] *** unicodable6 left
[07:39] *** benchable6 left
[07:39] *** shareable6 left
[07:39] *** statisfiable6 left
[07:39] *** bisectable6 left
[07:39] *** reportable6 left
[07:39] *** linkable6 left
[07:39] *** bloatable6 left
[07:39] *** coverable6 left
[07:39] *** notable6 left
[07:39] *** sourceable6 left
[07:39] *** committable6 left
[07:39] *** evalable6 left
[07:39] *** releasable6 left
[07:39] *** quotable6 left
[07:40] *** coverable6 joined
[07:40] *** sourceable6 joined
[07:40] *** shareable6 joined
[07:40] *** statisfiable6 joined
[07:40] *** linkable6 joined
[07:40] *** reportable6 joined
[07:40] *** releasable6 joined
[07:40] *** greppable6 joined
[07:41] *** notable6 joined
[07:41] *** bisectable6 joined
[07:41] *** unicodable6 joined
[07:41] *** benchable6 joined
[07:41] *** evalable6 joined
[07:42] *** committable6 joined
[07:42] *** quotable6 joined
[07:42] *** bloatable6 joined
[07:42] *** nativecallable6 joined
[08:42] <nine> releasable6: statisfiable6: 

[08:42] <releasable6> nine, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Releasable

[08:42] <nine> releasable6: status

[08:42] <releasable6> nine, Next release in ≈19 days and ≈10 hours. There are no known blockers. Changelog for this release was not started yet

[08:42] <releasable6> nine, Details: https://gist.github.com/f574a1b543f8a8bf95ba06886b0e39e2

[08:43] <Geth> ¦ MoarVM/master: 4 commits pushed by (Stefan Seifert)++, niner++

[08:43] <Geth> ¦ MoarVM/master: 01e1d11672 | Fix mis-spesh of native calls on unsupported rw arg types

[08:43] <Geth> ¦ MoarVM/master: 87040eaa5a | Extend translation of native call dispatch to unsigned rw args

[08:43] <Geth> ¦ MoarVM/master: 2319bba43b | Replace callsite_drop/insert pairs with callsite_replace

[08:43] <Geth> ¦ MoarVM/master: 91db67b902 | Merge pull request #1695 from MoarVM/fix_misspesh_of_native_calls

[08:43] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/35453e9e1680...91db67b9029e

[08:50] <Nicholas> good *, *

[08:53] <Geth> ¦ MoarVM: a3476e2869 | (Stefan Seifert)++ | 2 files

[08:53] <Geth> ¦ MoarVM: Turn on C11 atomics by default

[08:53] <Geth> ¦ MoarVM: 

[08:53] <Geth> ¦ MoarVM: It's been a while since these were enabled optionally and I've been using them

[08:53] <Geth> ¦ MoarVM: for almost as long without any fault whatsoever. It's time we give them some

[08:53] <Geth> ¦ MoarVM: more exposure.

[08:53] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a3476e2869

[08:53] <Nicholas> oh, "may you live in interesting times"

[08:59] <nine> Well, Linux distros will like this as it gets us rid of one more bundled dependency

[09:00] <nine> The packages for openSUSE Tumbleweed already build with --has-libffi --has-libtommath --has-libuv and work just fine.

[09:07] *** linkable6 left
[09:07] *** evalable6 left
[09:07] *** evalable6 joined
[09:09] *** linkable6 joined
[09:37] *** bartolin left
[09:37] *** bartolin joined
[10:48] *** ggoebel joined
[10:54] *** frost left
[11:44] <lizmat> nine: compilation seems slower since I bumped MoarVM... should it ?

[11:46] <nine> No. How much slower?

[11:51] <lizmat> finger in the air: up to 5% ?

[11:52] *** sena_kun left
[11:53] *** ggoebel left
[11:53] *** sena_kun joined
[11:59] *** ggoebel joined
[12:08] *** reportable6 left
[12:08] *** reportable6 joined
[12:09] <nine> That would be ~ 1s for core.c parsing. Sounds like that's within noise

[12:17] *** dogbert11 left
[12:17] <lizmat> I also see it in spectest timing

[12:20] <lizmat> afk for a few hours&

[12:22] <lizmat> in any case, it shouldn't be slower, right ?

[12:27] <ugexe> well doing .mkdir is twice as slow than .e for the common case, and now that is happening during every path object creation

[12:27] <moon-child> https://users.cs.northwestern.edu/~robby/courses/322-2013-spring/mytkowicz-wrong-data.pdf

[12:28] <ugexe> ...in CUR. which is still a lot

[12:29] <[Coke]> would it work to re-add the "once"?

[12:29] <[Coke]> and then still not bother calling .e then? 

[12:32] <jnthnwrthngtn> nine: Nice work on the package vars; left a couple of comments on the commit, but also t/12-rakuast/package.t has regressed, also spectest lost 28 fully passing test files.

[12:33] <jnthnwrthngtn> (The latter by `make spectest` and then `RAKUDO_RAKUAST=1 make spectest | grep '\. ok' | wc -l`, which was 320 before and now 292

[12:33] <jnthnwrthngtn> )

[12:33] *** frost joined
[12:37] *** nebuchadnezzar joined
[12:38] <nine> I'll try to get those declarations to work without making the Package do LexicalScope

[12:40] <nine> It's kinda funny that packages and $?PACKAGE specifically are often used as examples in comments, when they were not actually implemented :)

[13:11] *** sena_kun left
[13:13] <jnthnwrthngtn> Well, `$?PACKAGE` was already bound to GLOBAL in RakuAST::CompUnit, I believe

[13:13] <jnthnwrthngtn> But yeah, any kind of nested package stuff hasn't really been done yet

[13:14] <jnthnwrthngtn> Well, it's getting done now thanks to you :)

[13:15] *** sena_kun joined
[13:47] <nine> This stuff is complicated... Replacing PRODUCE-IMPLICIT-DECLARATIONS and direct QAST manipulation with an apply-implicit-block-semantics that calls $!body.add-generated-lexical-declaration, we get correct runtime behaviour, but at compile time it doesn't find the package's $?PACKAGE

[14:24] *** ggoebel left
[14:34] <nine> Ah, I'm actually so close... problem is just that QAST::Var(lexical $?PACKAGE :decl(static)) is generated right after the QAST::Op(bind) that looks up $?PACKAGE

[14:48] <nine> And now its working :)

[14:50] <nine> jnthnwrthngtn: I wonder: do we actually need to lookup $?PACKAGE for initializing package scoped variables? It's used for $bar := $?PACKAGE.AT-KEY('$bar'). Seems to work just fine when I use a WVal for the meta-object and I guess that would be a little bit faster?

[15:01] <lizmat> ugexe: good catch

[15:01] <lizmat> TIL nqp::mkdir is pretty expensive

[15:04] *** frost left
[16:13] <ugexe> src\moar.h(44): fatal error C1083: Cannot open include file: 'stdatomic.h': No such file or directory

[16:13] <ugexe> NMAKE : fatal error U1077: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\HostX64\x64\cl.EXE"' : return code '0x2'

[16:14] <ugexe> Stop.

[16:24] *** sena_kun left
[16:26] <jnthnwrthngtn> nine: I think the WVal approach should work

[16:30] *** sena_kun joined
[16:33] <nine> done :)

[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[18:30] <nine> Would be so nice to just be able to use note(...) for debug output in the nodes

[18:34] <lizmat> what can't you ?

[18:39] <nine> They're part of the bootstrap. No settings available yet and NQP's setting is not in scope either

[18:41] <lizmat> hmmm

[18:41] <lizmat> nqp::say()

[19:09] *** sena_kun left
[19:18] <nine> Apparently I have a nack for breaking things. My "less hacky" commit broke class Foo { method foo() { 456 } }; which now gives "Package 'Foo' already has a method 'foo'". No idea how though.

[19:19] <nine> Looks like the parser attaches the method multiple times which means that it will be added to the package multiple times.

[19:19] <lizmat> existence check always returning true ?

[19:19] <lizmat> ah... yes, that would do it

[19:22] <nine> Removing "is RakuAST::ImplicitBlockSemanticsProvider" from RakuAST::Package again unbreaks it. What the?

[19:26] *** sena_kun joined
[19:35] <nine> Aaah...it's the self.meta-object call in apply-implicit-block-semantics

[19:44] <nine> Commit ae3b46ee51 fixes the package regression.

[20:00] <nine> Doesn't fix all the spectests though :/ commit 023ec833f gives me 277 ok, HEAD^ gives 246 and HEAD is at 254

[20:00] *** linkable6 left
[20:02] *** linkable6 joined
