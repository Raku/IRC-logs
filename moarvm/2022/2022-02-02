[00:08] *** reportable6 left
[01:03] *** [Coke]_ joined
[01:03] *** [Coke] left
[01:08] *** reportable6 joined
[02:03] *** squashable6 left
[02:17] *** frost joined
[02:52] *** [Coke] joined
[02:53] *** [Coke]_ left
[03:03] *** frost left
[03:06] *** squashable6 joined
[04:32] *** unicodable6 left
[04:32] *** statisfiable6 left
[04:32] *** greppable6 left
[04:32] *** benchable6 left
[04:32] *** nativecallable6 left
[04:32] *** tellable6 left
[04:32] *** quotable6 left
[04:32] *** shareable6 left
[04:32] *** coverable6 left
[04:32] *** notable6 left
[04:32] *** bisectable6 left
[04:32] *** bloatable6 left
[04:32] *** sourceable6 left
[04:32] *** releasable6 left
[04:32] *** committable6 left
[04:32] *** evalable6 left
[04:32] *** squashable6 left
[04:32] *** linkable6 left
[04:32] *** reportable6 left
[04:32] *** nativecallable6 joined
[04:33] *** reportable6 joined
[04:33] *** committable6 joined
[04:34] *** notable6 joined
[04:34] *** releasable6 joined
[04:34] *** sourceable6 joined
[04:34] *** squashable6 joined
[04:34] *** statisfiable6 joined
[04:34] *** greppable6 joined
[04:34] *** bisectable6 joined
[04:34] *** coverable6 joined
[05:38] *** AlexDaniel left
[05:39] *** nine left
[05:39] *** Techcable left
[05:39] *** statisfiable6 left
[05:39] *** sourceable6 left
[05:39] *** ugexe left
[05:39] *** [Coke] left
[05:39] *** harrow left
[05:39] *** moon-child left
[05:39] *** coverable6 left
[05:39] *** squashable6 left
[05:39] *** notable6 left
[05:39] *** committable6 left
[05:39] *** reportable6 left
[05:39] *** psydroid left
[05:39] *** JRaspass left
[05:39] *** jdv left
[05:39] *** Voldenet left
[05:39] *** mst left
[05:39] *** samcv left
[05:39] *** bartolin_ left
[05:39] *** gfldex left
[05:39] *** jnthnwrthngtn left
[05:39] *** rypervenche left
[05:39] *** Util left
[05:39] *** samebchase left
[05:39] *** lizmat left
[05:39] *** tbrowder left
[05:39] *** leont left
[05:39] *** rba left
[05:39] *** codesections left
[05:50] *** Geth left
[05:50] *** MasterDuke left
[05:50] *** Altai-man left
[05:50] *** nebuchadnezzar left
[05:50] *** leedo left
[05:52] *** Kaiepi left
[05:52] *** vrurg left
[05:52] *** japhb left
[05:52] *** discord-raku-bot left
[05:52] *** kjp left
[05:52] *** timo left
[05:52] *** ilogger2 left
[05:52] *** camelia left
[05:53] *** leedo joined
[05:53] *** nebuchadnezzar joined
[05:53] *** Altai-man joined
[05:53] *** MasterDuke joined
[05:53] *** Geth joined
[05:53] *** [Coke]_ joined
[05:53] *** quotable6 joined
[05:53] *** linkable6 joined
[05:53] *** bloatable6 joined
[05:53] *** unicodable6 joined
[05:53] *** coverable6 joined
[05:53] *** statisfiable6 joined
[05:53] *** squashable6 joined
[05:53] *** sourceable6 joined
[05:53] *** notable6 joined
[05:53] *** committable6 joined
[05:53] *** reportable6 joined
[05:53] *** AlexDaniel joined
[05:53] *** psydroid joined
[05:53] *** ugexe joined
[05:53] *** jnthnwrthngtn joined
[05:53] *** rypervenche joined
[05:53] *** nine joined
[05:53] *** Techcable joined
[05:53] *** mst joined
[05:53] *** samcv joined
[05:53] *** Voldenet joined
[05:53] *** lizmat joined
[05:53] *** Util joined
[05:53] *** harrow joined
[05:53] *** bartolin_ joined
[05:53] *** gfldex joined
[05:53] *** moon-child joined
[05:53] *** leont joined
[05:53] *** rba joined
[05:53] *** codesections joined
[05:53] *** jdv joined
[05:53] *** JRaspass joined
[05:53] *** samebchase joined
[05:53] *** tbrowder joined
[05:54] *** Kaiepi joined
[05:54] *** vrurg joined
[05:54] *** japhb joined
[05:54] *** discord-raku-bot joined
[05:54] *** kjp joined
[05:54] *** timo joined
[05:54] *** ilogger2 joined
[05:54] *** camelia joined
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[06:13] *** linkable6 left
[06:33] *** evalable6 joined
[06:33] *** shareable6 joined
[06:34] *** tellable6 joined
[06:34] *** benchable6 joined
[06:38] <Nicholas> good *able6, *

[06:38] <Nicholas> It was a windy night. No wonder everything flapped a lot

[07:20] <nine> m: dd class :: { has uint8  $.x; }.new( x => 255 )

[07:20] <camelia> rakudo-moar 14bacc249: OUTPUT: «<anon|1>.new(x => 255)␤»

[07:20] <nine> m: dd class :: { has uint8  $.x; }.new( x => 255 ).x # but

[07:20] <camelia> rakudo-moar 14bacc249: OUTPUT: «-1␤»

[07:31] <nine> m: dd class :: { has uint8  $.x is rw; }.new( x => 255 ).x # oh!

[07:31] <camelia> rakudo-moar 14bacc249: OUTPUT: «255␤»

[07:32] *** squashable6 left
[07:33] *** squashable6 joined
[07:36] <nine> Ah, yes, that's the unfinished business in QASTCompilerMAST

[08:07] *** frost joined
[09:05] <MasterDuke> today is windsday, but it's not very blustery here

[09:16] *** frost left
[09:20] <nine> Now this is bizarre:

[09:20] <nine> m: my uint64 $no = 2**64 - 1; say $no

[09:20] <camelia> rakudo-moar 4e1a77214: OUTPUT: «-1␤»

[09:20] <nine> But:

[09:20] <nine> m: my uint64 $no = 2**64 - 2; say $no

[09:20] <camelia> rakudo-moar 4e1a77214: OUTPUT: «18446744073709551614␤»

[09:21] <nine> So there's the last known uint problem and it's with exactly one value

[09:21] <japhb> That sounds like an off-by-one (or equivalently < instead of <=) in determining bounds

[09:22] <japhb> nine++ for the continuing massive effort, THANK YOU

[09:44] <nine> Aaah...it's the int cache! I also used it for autobox_uint, but the int cache also contains -1

[09:44] *** squashable6 left
[09:45] <MasterDuke> ha, nice find

[09:47] <nine> Total luck... I just wanted to use a value that would stand out more than -1 (which appears in unrelated places as well) in my debug output

[09:51] *** frost61 joined
[10:03] *** mst left
[10:03] <Geth> ¦ MoarVM: a851fcf406 | (Stefan Seifert)++ | src/core/args.c

[10:03] <Geth> ¦ MoarVM: Fix autobox_uint finding negative Ints in the int cache

[10:03] <Geth> ¦ MoarVM: 

[10:03] <Geth> ¦ MoarVM: The int cache also contains a boxed -1 which autobox_uint would find for

[10:03] <Geth> ¦ MoarVM: the value 2**64 - 1. Just exclude values with the high bit set from getting

[10:03] <Geth> ¦ MoarVM: looked up at all, in case we add further negative values to the int cache.

[10:03] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/a851fcf406

[10:05] *** mst joined
[10:09] *** squashable6 joined
[10:13] *** linkable6 joined
[10:20] <lizmat> nine++ on a roll!

[10:21] <Nicholas> <lizmat>bump?</lizmat>

[10:21] <lizmat> I think nine++ already did

[10:43] *** frost61 left
[10:52] * jnthnwrthngtn is feeling positive about nine++'s uint work

[10:54] <dogbert17> :)

[10:55] <dogbert17> m: my int8 $x = 2**7 - 1; say $x; say $x++; say $x # is this correct?

[10:55] <camelia> rakudo-moar c92833f35: OUTPUT: «127␤-129␤-128␤»

[11:00] <jnthnwrthngtn> dogbert17: I think so, on the basis that calculations are done at full-width, and smaller sizes are only units of storage

[11:01] *** linkable6 left
[11:01] <jnthnwrthngtn> But wait...uh...how does ++ make it smaller? :)

[11:01] <lizmat> .oO( there is no place for negativity! )

[11:02] <jnthnwrthngtn> lizmat: This is not what I want to here while I'm watching today's anti-gen test process :P

[11:02] <jnthnwrthngtn> *hear

[11:02] <lizmat> it was only a though!

[11:02] <lizmat> -)

[11:05] <jnthnwrthngtn> Phew, there was at least a little room for negativity :)

[11:05] <lizmat> good!

[11:20] <lizmat> maybe an idea to have a GSOC project to port MoarVM to the web with this?  https://leaningtech.com/webvm-server-less-x86-virtual-machines-in-the-browser/

[11:31] <Nicholas> are they single threaded?

[11:33] <lizmat> I have no idea... but I guess you can't run a Debian without being multi-threaded ?

[11:34] <lizmat> even on a single CPU

[11:43] *** sena_kun joined
[12:02] *** linkable6 joined
[12:07] *** reportable6 left
[12:12] *** frost joined
[12:14] <Geth> ¦ MoarVM: ef270d7f5e | (Stefan Seifert)++ | 11 files

[12:14] <Geth> ¦ MoarVM: Proper uint support for multidim arrays.

[12:14] <Geth> ¦ MoarVM: 

[12:14] <Geth> ¦ MoarVM: Introduce new ops: atposnd_u, atpos2d_u, atpos3d_u, bindposnd_u, bindpos2d_u,

[12:14] <Geth> ¦ MoarVM: bindpos3d_u and multidimref_u and fix deconting unsigned multidimrefs.

[12:14] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ef270d7f5e

[12:30] *** sena_kun left
[12:33] *** sena_kun joined
[12:45] *** frost left
[13:26] *** [Coke]_ is now known as [Coke]

[13:56] *** discord-raku-bot left
[13:57] *** discord-raku-bot joined
[14:04] <Geth> ¦ MoarVM: nwc10++ created pull request #1662: Serialize bigints in base 32, not base 10

[14:04] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1662

[14:05] <Nicholas> Epic, um, well, epic fail:

[14:05] <Nicholas> All checks have failed

[14:05] <Nicholas> 1 failing check 

[14:05] <Nicholas> (CodeFactor)

[14:05] *** discord-raku-bot left
[14:05] <Nicholas> (now more tests running as I created that PR. I think CodeFactor was on branch push)

[14:05] *** discord-raku-bot joined
[14:24] *** sena_kun left
[14:25] *** sena_kun joined
[14:50] <MasterDuke> Nicholas: very interesting. so we have a couple places doing semi-custom str-to-int and a couple places doing semi-custom int-to-str. definitely seems like they should be investigated to see how much (if any) of the code can be consolidated

[14:52] <MasterDuke> btw, since you're writing an ascii string, can't you assume it's ascii and well-formed when read back and then you don't have to use the iterator and can just read from the MVMString's storage?

[14:55] <Nicholas> I don't know enough about string serialisation to be confident that it guarantees any particular representation on the way out

[14:55] <Nicholas> (and I didn't go digging)

[14:56] <Nicholas> (was faster to steal the existing iterator code)

[14:58] <MasterDuke> i guess that's something that could be figured out during an investigation into consolidating

[14:59] <MasterDuke> btw, did my explanation in https://github.com/MoarVM/MoarVM/pull/1661#discussion_r796990689 make sense?

[14:59] <Nicholas> I spotted that last night when I was tired and so far failed to get back to it (sorry)

[14:59] <MasterDuke> no particular hurry

[15:09] *** reportable6 joined
[15:51] <vrurg> MasterDuke: BTW, the yesterdays SEGV is gone after full removal of the installation directory. No other changes were needed. Some leftovers, I guess, but no idea of what kind as --full-rebuild didn't help.

[15:51] <MasterDuke> huh. well as long as a clean checkout + build is fine i guess that's the most important thing

[16:03] *** Kaipi joined
[16:06] *** Kaiepi left
[16:44] <Geth> ¦ MoarVM: c00abdf385 | (Daniel Green)++ | src/6model/reprs/P6opaque.c

[16:44] <Geth> ¦ MoarVM: Silence warning about ignoring return value from libtommath function

[16:44] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/c00abdf385

[17:25] *** colemanx joined
[18:06] *** reportable6 left
[18:24] *** sena_kun left
[18:44] <lizmat> do we know that EVAL is not threadsafe ?

[18:44] <lizmat> https://gist.github.com/lizmat/e94b93e0645168973a4ba173c834c05e

[18:46] <ugexe> is the code you are evaling thread safe?

[18:47] <lizmat> Looks like the BlockVarOptimizer class has more of these: %!usages_flat

[18:48] <lizmat> the code in fact is just doing (try $code.EVAL) on something inside of a :ver(   )

[18:49] <ugexe> is $code thread safe?

[18:49] <lizmat> it consists of strings like 'v0.0.42+'

[18:50] <lizmat> I'd say: yes

[18:50] <lizmat> which is run inside of a .hyper

[18:50] <lizmat> the string does *not* reference anything outside of it

[18:51] <ugexe> `use MONKEY-SEE-NO-EVAL; (1..10000).race.map({ EVAL "1" })` works well enough

[18:51] <lizmat> indeed...  it's the first time I see this error 

[18:52] <ugexe> but we can see and be quite certain "1" is thread safe

[18:52] <lizmat> but we knew there are still gremlins with EVALling code in parallel, and thats why I made sure I created a gist with the stack trace

[18:54] <ugexe> can you get one of the strings being evald and plug it into a minimal example like the one above?

[18:58] <lizmat> v0.3.3+

[18:59] <ugexe> m: use MONKEY-SEE-NO-EVAL; (1..1000000).race.map({ my class Bar:ver(EVAL "v0.3.3+") {} }).eager

[18:59] <camelia> rakudo-moar 7cb214671: ( no output )

[19:00] <ugexe> why can't it be that simple :/

[19:00] <lizmat> ugexe: it was extracting the string inside a :ver( ) dependency specification

[19:00] <lizmat> well, that's it, I haven't been able to reproduce either

[19:01] <lizmat> but I felt it was important enough to mention, because of the stack trace and indeed the use of hashes at the given locations

[19:10] *** Merfont joined
[19:13] *** Kaipi left
[19:17] <lizmat> I think I found the problem: in QAST::Node

[19:17] <lizmat>     my %uniques;

[19:17] <lizmat>     method unique($prefix) {

[19:18] <lizmat> gen/moar/stage2/QASTNode.nqp:249

[19:18] *** colemanx left
[19:18] <lizmat> feels to me that that hash should be an attribute  :-)

[19:19] *** colemanx joined
[19:29] <lizmat> hmm... looks like QAST::Node.unique is used as a class method

[19:29] <lizmat> so I guess we need to add a lock ?

[19:36] <lizmat> my attempt to fix that race: https://github.com/Raku/nqp/pull/760

[19:38] <lizmat> comments very welcome

[20:19] *** evalable6 left
[20:19] *** linkable6 left
[20:36] *** Altai-man left
[20:39] *** sena_kun joined
[20:58] <lizmat> Nicholas++   # for making thready hash accesses not segfault, but panic

[21:11] *** camelia left
[21:11] *** mst left
[21:11] *** vrurg left
[21:11] *** japhb left
[21:11] *** kjp left
[21:11] *** timo left
[21:11] *** ilogger2 left
[21:11] *** sena_kun left
[21:11] *** Geth left
[21:11] *** MasterDuke left
[21:11] *** nebuchadnezzar left
[21:11] *** leedo left
[21:11] *** AlexDaniel left
[21:11] *** nine left
[21:11] *** Techcable left
[21:11] *** Merfont left
[21:11] *** squashable6 left
[21:11] *** benchable6 left
[21:11] *** shareable6 left
[21:11] *** bloatable6 left
[21:11] *** unicodable6 left
[21:11] *** statisfiable6 left
[21:11] *** sourceable6 left
[21:11] *** ugexe left
[21:11] *** discord-raku-bot left
[21:11] *** harrow left
[21:11] *** moon-child left
[21:11] *** colemanx left
[21:11] *** coverable6 left
[21:11] *** notable6 left
[21:11] *** committable6 left
[21:11] *** psydroid left
[21:11] *** JRaspass left
[21:11] *** jdv left
[21:11] *** Voldenet left
[21:11] *** samcv left
[21:11] *** bartolin_ left
[21:11] *** gfldex left
[21:11] *** jnthnwrthngtn left
[21:11] *** rypervenche left
[21:11] *** Util left
[21:11] *** samebchase left
[21:11] *** [Coke] left
[21:11] *** quotable6 left
[21:11] *** lizmat left
[21:11] *** tbrowder left
[21:11] *** leont left
[21:11] *** rba left
[21:11] *** codesections left
[21:14] *** gfldex joined
[21:14] *** bartolin_ joined
[21:14] *** samcv joined
[21:14] *** ilogger2 joined
[21:14] *** timo joined
[21:14] *** kjp joined
[21:14] *** japhb joined
[21:14] *** vrurg joined
[21:14] *** mst joined
[21:14] *** Techcable joined
[21:14] *** nine joined
[21:14] *** AlexDaniel joined
[21:14] *** codesections joined
[21:14] *** rba joined
[21:14] *** leont joined
[21:14] *** jdv joined
[21:14] *** JRaspass joined
[21:14] *** committable6 joined
[21:14] *** discord-raku-bot joined
[21:14] *** Merfont joined
[21:14] *** squashable6 joined
[21:14] *** benchable6 joined
[21:14] *** shareable6 joined
[21:14] *** bloatable6 joined
[21:14] *** unicodable6 joined
[21:14] *** statisfiable6 joined
[21:14] *** sourceable6 joined
[21:14] *** ugexe joined
[21:15] *** camelia joined
[21:15] *** AlexDaniel left
[21:15] *** jnthnwrthngtn joined
[21:15] *** rypervenche joined
[21:15] *** Util joined
[21:15] *** samebchase joined
[21:19] *** evalable6 joined
[21:37] <jnthnwrthngtn> Wonder how much that .unique locking fix will tank performance...

[21:38] <MasterDuke> i haven't noticed any difference

[22:17] *** psydroid joined
[22:53] *** AlexDaniel joined
[22:58] *** MasterDuke joined
[23:07] <lizmat> in most cases there won't be any lock cintention, right ?

[23:07] <lizmat> *contention

[23:18] <jnthnwrthngtn> No, but it'd still imply an atomic op in userspace

[23:18] <jnthnwrthngtn> I don't think that's avoidable

[23:18] <jnthnwrthngtn> Probably a drop in the ocean

[23:18] <jnthnwrthngtn> RakuAST's QAST production approach actually gives us a better peg to hang this off anyway

[23:19] <jnthnwrthngtn> So no point spending more time over it than this

[23:34] <vrurg> jnthnwrthngtn: NQP doesn't have atomics, unfortunately.

[23:36] <jnthnwrthngtn> vrurg: I was talking about what happens inside nqp::lock in the non-contention case

[23:37] <jnthnwrthngtn> One could arrange for atomics in NQP if they're needed

[23:37] <jnthnwrthngtn> (But here they'd not help)

[23:39] <vrurg> I thought an atomic guard would have less overhead, than a lock.

[23:39] <vrurg> But, whatever. 

