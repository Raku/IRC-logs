[00:06] *** reportable6 left
[00:30] *** linkable6 joined
[02:15] *** unicodable6 left
[02:15] *** squashable6_ left
[02:15] *** statisfiable6_ left
[02:15] *** quotable6 left
[02:15] *** releasable6 left
[02:15] *** committable6 left
[02:15] *** greppable6 left
[02:15] *** linkable6 left
[02:15] *** sourceable6_ left
[02:15] *** bloatable6 left
[02:15] *** shareable6_ left
[02:15] *** bisectable6_ left
[02:15] *** coverable6 left
[02:15] *** nativecallable6_ left
[02:15] *** notable6 left
[02:15] *** benchable6 left
[02:16] *** quotable6 joined
[02:16] *** nativecallable6 joined
[02:16] *** sourceable6 joined
[02:16] *** squashable6 joined
[02:16] *** statisfiable6 joined
[02:17] *** bloatable6 joined
[02:17] *** greppable6 joined
[02:18] *** coverable6 joined
[02:18] *** releasable6 joined
[02:23] *** ggoebel left
[02:29] *** evalable6 joined
[03:09] *** reportable6 joined
[03:16] *** notable6 joined
[03:16] *** bisectable6 joined
[03:17] *** shareable6 joined
[03:34] *** frost joined
[04:17] *** linkable6 joined
[04:17] *** benchable6 joined
[04:17] *** unicodable6 joined
[04:58] *** [Coke] left
[05:17] *** committable6 joined
[06:07] *** reportable6 left
[06:10] *** [Coke] joined
[06:42] *** CaCode left
[06:47] *** ggoebel joined
[06:52] *** ggoebel left
[06:52] *** ggoebel joined
[07:00] <Nicholas> good *, *

[08:10] <MasterDuke> exciting-not-in-the-best-of-ways *, *

[08:14] <MasterDuke> but now that we've had a release, and it seems all known mimalloc issues are fixed, anybody have any thoughts about https://github.com/MoarVM/MoarVM/pull/1645 ?

[08:19] <nine> I for one welcome our new mimalloc overlords!

[08:22] <MasterDuke> and if we want to switch to another microsoft-written allocator, there's https://github.com/microsoft/snmalloc !

[08:23] <MasterDuke> some commentary about the two here https://lobste.rs/s/kfwxvu/microsoft_mimalloc#c_cvykcm

[08:35] *** sena_kun joined
[10:00] *** evalable6 left
[10:00] *** linkable6 left
[10:09] *** reportable6 joined
[10:28] *** TempIRCLogger left
[10:29] *** TempIRCLogger joined
[10:33] *** TempIRCLogger left
[10:33] *** TempIRCLogger joined
[11:00] *** evalable6 joined
[11:03] *** linkable6 joined
[11:55] <Geth> ¦ MoarVM: dogbert17++ created pull request #1689: Update libuv to version 1.44.1

[11:55] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1689

[12:08] *** reportable6 left
[12:21] *** discord-raku-bot left
[12:21] *** discord-raku-bot joined
[12:41] *** Altai-man joined
[13:02] *** [Coke] left
[13:07] *** Altai-man left
[13:07] *** [Coke] joined
[13:12] *** [Coke]_ joined
[13:13] *** [Coke] left
[13:22] *** frost left
[13:26] *** [Coke]_ is now known as [Coke]

[14:09] *** jnthn is now known as jnthnwrthngtn

[14:11] *** reportable6 joined
[14:56] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/03/21/2022-12-releasomatic/

[15:07] <Voldenet> I've noticed something… relatively strange

[15:07] <Voldenet> https://raku.land/cpan:BDUGGAN/Dawa

[15:08] <Voldenet> last paragraph's header looks like this https://i.imgur.com/PoxH3cW.png

[15:10] <Voldenet> I'm pretty sure it's caused by readme.md being rendered like this, so `#dists`, `#info` and similar colliding things would break the display on that page

[15:14] <Voldenet> s/like this/with the name of the header as the id/

[15:15] <Voldenet> Oops, I should've posted that on #raku

[15:33] *** Techcable left
[15:35] *** Techcable joined
[16:07] <MasterDuke> i figured out the bug in my implementation of pre-sizing $!mbc when writing frames. now to try and remember why i was doing that...

[16:10] <MasterDuke> i think at least part of it was assuming that when the backing VMArray got very big, it would be more efficient to only increase by the known desired amount, instead of doubling

[16:26] *** colemanx joined
[17:16] <nine> I just realized: the day we switch to RakuAST for everything will be The Day The World Went Away

[17:24] <lizmat> indeed... World.nqp will be no more

[17:57] *** nine left
[17:58] *** nine joined
[18:00] *** ilogger2 joined
[18:05] *** camelia left
[18:05] *** nine left
[18:06] *** nine joined
[18:07] <jnthnwrthngtn> Clearly the World is not enough.

[18:09] *** reportable6 left
[18:14] *** camelia joined
[18:43] *** linkable6 left
[19:37] <drakonis> when is that day :V?

[19:41] <MasterDuke> hopefully tomorrow never dies

[20:24] <drakonis> perhaps raku will finally have excellent editor extensions once rakuast lands

[20:25] <drakonis> comma is nice but i'm partial to emacs

[20:40] <drakonis> does moarvm have TCO?

[20:44] <MasterDuke> not really

[20:46] <drakonis> i see, it should still be possible to introduce TCO into it, right?

[20:46] <drakonis> or in rakudo, i'm not sure where it has to be implemented to allow it

[21:10] *** reportable6 joined
[21:30] <jnthnwrthngtn> I suspect at the language level tail calls should be explicitly requested rather than introduced as an optimization. And yeah, it'd need some MoarVM support.

[21:32] <MasterDuke> jnthnwrthngtn: since you're around, do you happen to have an opinion on https://github.com/rakudo/rakudo/pull/4807 ?

[21:56] <jnthnwrthngtn> MasterDuke: About the last one, did you try doing a substitution in an action method?

[21:57] <jnthnwrthngtn> (One that takes the edited code path, that is)

[21:57] <jnthnwrthngtn> The first two look reasonable to me

[21:57] <jnthnwrthngtn> *two commits

[22:05] <MasterDuke> jnthnwrthngtn: not sure what you mean re doing a substitution in an action method. to test that the change is correct? or as a better way of implementing that change?

[22:38] <jnthnwrthngtn> To test the change is correct; $/ is bound readonly in that context usually

[22:46] *** linkable6 joined
[22:55] <MasterDuke> m: grammar G { token TOP { <thingy>* }; token thingy { "thingy" } }; class A { method thingy($/) { my $p = "page"; $p ~~ s:g[ \w ] = "a"; $p } }; my $g = G.parse("thingythingy", actions => A.new); say $g

[22:55] <camelia> rakudo-moar ca09e6fcc: OUTPUT: «Cannot assign to a readonly variable or a value␤  in method thingy at <tmp> line 1␤  in regex thingy at <tmp> line 1␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:56] <MasterDuke> something like ^^^ ? i get the same error on my branch

[23:21] <jnthnwrthngtn> OK, I guess it already trips over the issue before it gets to that point, then

[23:24] <MasterDuke> (and that example does in fact go through the new fast path here https://github.com/rakudo/rakudo/pull/4807/files#diff-15d67e9706f4ca84c91a9caf72855be5ef3192f2b19baa5dcc6898e1702c4804R1813)

[23:25] <jnthnwrthngtn> Alright

[23:25] <jnthnwrthngtn> Then I've nothing to add :)

[23:26] <MasterDuke> cool. i'll go ahead and merge. lots of time to revert before the next release if need be

[23:32] <jnthnwrthngtn> :)

[23:32] <jnthnwrthngtn> MasterDuke++

