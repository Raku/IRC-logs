[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[00:21] <moon-child> re warning: apparently it's a gcc bug

[00:31] *** Kaiepi left
[00:31] *** Kaiepi joined
[00:57] *** Altai-man joined
[00:59] *** sena_kun left
[01:59] *** bisectable6 left
[01:59] *** sourceable6 left
[01:59] *** committable6 left
[01:59] *** benchable6 left
[01:59] *** releasable6 left
[01:59] *** bloatable6 left
[01:59] *** unicodable6 left
[01:59] *** coverable6 left
[01:59] *** shareable6 left
[01:59] *** greppable6 left
[01:59] *** nativecallable6 left
[01:59] *** linkable6 left
[01:59] *** tellable6 left
[01:59] *** statisfiable6 left
[01:59] *** evalable6 left
[01:59] *** reportable6 left
[01:59] *** quotable6 left
[01:59] *** notable6 left
[02:00] *** nativecallable6 joined
[02:00] *** quotable6 joined
[02:00] *** statisfiable6 joined
[02:00] *** greppable6 joined
[02:00] *** shareable6 joined
[02:00] *** benchable6 joined
[02:01] *** sourceable6 joined
[02:01] *** bloatable6 joined
[02:01] *** notable6 joined
[02:01] *** tellable6 joined
[02:01] *** committable6 joined
[02:01] *** releasable6 joined
[02:01] *** unicodable6 joined
[02:01] *** evalable6 joined
[02:01] *** coverable6 joined
[02:02] *** reportable6 joined
[02:02] *** bisectable6 joined
[02:02] *** Altai-man left
[02:02] *** linkable6 joined
[02:07] *** sena_kun joined
[02:08] *** Altai-man joined
[02:12] *** sena_kun left
[03:35] *** Kaiepi left
[04:01] *** Kaiepi joined
[04:28] *** Kaiepi left
[04:58] *** frost joined
[05:07] *** frost left
[05:22] *** kjp left
[05:37] *** kjp joined
[05:46] *** kjp left
[05:47] *** kjp joined
[05:49] <Nicholas> [* GOOD *]

[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[08:44] *** Kaiepi joined
[09:59] *** sena_kun joined
[10:59] *** evalable6 left
[10:59] *** linkable6 left
[11:01] *** linkable6 joined
[11:02] *** evalable6 joined
[11:25] *** frost joined
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[13:15] <vrurg> m: class C { method foo(--> Nil) { }; method p(&code) { LEAVE self.foo; code() }; method bar { self.p({ return 42 }) }; }; say C.new.bar; 

[13:15] <camelia> rakudo-moar 530e17848: OUTPUT: «foo␤»

[13:16] <vrurg> Is it by design???? jnthnwrthngtn?

[14:17] <jnthnwrthngtn> vrurg: Probably a case of https://github.com/rakudo/rakudo/issues/4521

[14:19] <vrurg> It's in the way of my work on fixing CU/require concurrency.

[14:21] <vrurg> Though I can rework the problematic code to get the returns out of the protected blocks, but it would likely slightly de-optimize them. Is there a workaround for the bug?

[14:23] <jnthnwrthngtn> Not besides what you suggested, alas

[14:25] <vrurg> Do you at least know if it's in the current codegen code and would be different on RakuAST? I mean, does it make sense for me to try fixing it?

[14:26] *** frost left
[14:26] <jnthnwrthngtn> I was more planning to re-work how LEAVE time is done generally, but it's an all-the-stack kind of change. I don't think it's a code-gen bug, probably more a MoarVM one, but not sure.

[14:28] <vrurg> Ok, then I better change the CU code. There are only two or three locations left.

[14:29] <vrurg> BTW, if there is a better suggestion for Lock::Soft name I'd like to consider it. :)

[14:37] <vrurg> One more on this. Lock.protect is not affected. I presume because nqp::unlock doesn't touch the stack.

[15:19] *** Kaiepi left
[15:20] *** Kaiepi joined
[15:20] <jnthnwrthngtn> What is Lock::Soft?

[15:49] <vrurg> await-based replacement for Lock.

[15:49] <vrurg> Non-blocking.

[15:49] * vrurg is afk for a couple of hours

[17:17] *** sena_kun left
[18:06] *** reportable6 left
[18:08] *** reportable6 joined
[19:43] *** vrurg left
[19:54] <nine> nine@sphinx:~/rakudo (rakuast_wip *)> RAKUDO_RAKUAST=1 ./rakudo-m -Ilib -e 'use Test;'

[19:54] <nine> nine@sphinx:~/rakudo (rakuast_wip *)>

[19:54] <nine> It compiles!

[19:58] <Nicholas> ship it!

[19:59] *** vrurg joined
[20:02] <japhb> Awesome!  nine++

[20:16] <MasterDuke> nice

[20:24] <MasterDuke> moon-child: interesting, where are you seeing that?

[20:24] <moon-child> MasterDuke: I don't remember; but there was some gcc bug that was causing it to think array bounds were being overrun, that was affecting a lot of projects

[20:26] <MasterDuke> src/disp/inline_cache.c:646:19: warning: array subscript ‘MVMDispInlineCacheEntryPolymorphicDispatchFlattening[0]’ is partly outside array bounds of ‘MVMDispInlineCacheEntry[1]’ [-Warray-bounds]

[20:26] <MasterDuke>   646 |         MVMuint32 num_dps = ((MVMDispInlineCacheEntryPolymorphicDispatchFlattening *)entry)->num_dps;

[20:26] <MasterDuke>       |                   ^~~~~~~

[20:27] <MasterDuke> i've gotten ^^^ for a while now, but some googling did suggest it was a gcc bug. i'd hoped it would disappear with 12, but it hasn't. the other one is new with gcc 12

[20:36] *** Altai-man left
[20:36] <MasterDuke> https://lwn.net/Articles/893686/ "Modern Python performance considerations", but might be some stuff of interest for us

[20:41] *** sena_kun joined
[21:26] *** uzl[m] joined
[22:17] *** Altai-man joined
[22:17] *** sena_kun left
[23:17] *** Kaiepi left
[23:19] *** Kaiepi joined
[23:45] *** Kaipei joined
[23:48] *** Kaiepi left
