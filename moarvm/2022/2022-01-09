[00:05] *** linkable6 joined
[00:06] *** reportable6 left
[02:14] *** greppable6 left
[02:14] *** committable6 left
[02:14] *** releasable6 left
[02:14] *** notable6 left
[02:14] *** sourceable6 left
[02:14] *** evalable6 left
[02:14] *** squashable6 left
[02:14] *** coverable6 left
[02:14] *** statisfiable6 left
[02:14] *** bisectable6 left
[02:14] *** benchable6 left
[02:14] *** nativecallable6 left
[02:14] *** shareable6 left
[02:14] *** unicodable6 left
[02:14] *** linkable6 left
[02:14] *** quotable6 left
[02:14] *** tellable6 left
[02:14] *** bloatable6 left
[02:15] *** greppable6 joined
[02:15] *** shareable6 joined
[02:15] *** coverable6 joined
[02:16] *** nativecallable6 joined
[02:16] *** bisectable6 joined
[02:16] *** evalable6 joined
[02:17] *** benchable6 joined
[02:17] *** bloatable6 joined
[02:17] *** tellable6 joined
[03:11] *** discord-raku-bot left
[03:11] *** discord-raku-bot joined
[03:15] *** releasable6 joined
[03:15] *** committable6 joined
[03:17] *** notable6 joined
[04:17] *** evalable6 left
[04:17] *** unicodable6 joined
[04:32] *** Techcable joined
[05:08] *** reportable6 joined
[05:17] *** statisfiable6 joined
[05:18] *** evalable6 joined
[05:25] *** frost joined
[05:45] *** frost left
[05:56] *** frost joined
[06:07] *** reportable6 left
[06:15] *** quotable6 joined
[06:16] *** sourceable6 joined
[06:16] *** squashable6 joined
[07:10] *** reportable6 joined
[07:16] *** linkable6 joined
[08:29] *** evalable6 left
[09:04] *** squashable6 left
[09:14] <nine> Ah, yes, we really should re-use those deprecated ops much more agressively

[09:30] *** evalable6 joined
[09:38] <nine> Nice: though there are tons of failures in the current Blin run, none of them seem to be caused by my changes

[09:46] <Nicholas> I'm inferring that installed systems (mostly) have to rebuild installed bytecode on new releases of the setting,

[09:46] <Nicholas> meaning that we don't actually have to run older bytecode on new MoarVM *that* often

[09:47] <Nicholas> meanign that it doesn't matter *as much* that it's efficient. Only that it works.

[09:47] <Nicholas> that we might be able to completely re-number the opcodes

[09:47] <Nicholas> (and know how to load and re-map older bytecode in the validator)

[09:47] <Nicholas> but then I thought "worry about this when extops die"

[09:50] <MasterDuke> Nicholas: did you see my comment on 'mimalloc' vs 'use_mimalloc' on https://github.com/MoarVM/MoarVM/pull/1638 ? i think that's the reason for the ci fails

[09:52] <Nicholas> yes. incoming.

[09:52] <Nicholas> but the comment on it will not be incoming for a bit

[09:52] <Nicholas> (thanks for the diagnosis)

[09:53] <MasterDuke> i also have a wip patch (against master) to convert MVM_recalloc to take a new count + new size (like calloc does) instead of old total size + new total size so we can use mi_recalloc

[09:55] <MasterDuke> oh, and do you think you could add `ignore = untracked` to the .gitmodule entry?

[09:56] <Nicholas> ah OK. But not right now as I'm building something else

[09:56] <Nicholas> and "need" coffee

[09:57] <MasterDuke> no worries, just got a second cup a couple min ago myself

[10:28] *** frost left
[10:28] <MasterDuke> committable6: 25ca206~1,25ca206 say List({:1a, :2b})   # this is what broke Crane

[10:28] <committable6> MasterDuke, ¦25ca206~1: «({a => 1, b => 2})␤» ¦25ca206: «(b => 2 a => 1)␤»

[10:31] <MasterDuke> is this a bug in coercion/dispatch, or expected behavior? if the latter, then we'll have to revert 25ca206 (i.e., add back those CALL-MEs i removed)

[10:31] <MasterDuke> jnthnwrthngtn, vrurg: ^^^

[10:58] *** dogbert11 left
[11:05] *** squashable6 joined
[11:06] *** dogbert17 joined
[11:53] *** linkable6 left
[11:54] *** linkable6 joined
[12:06] *** reportable6 left
[12:30] <Geth> ¦ MoarVM/fix_unsigned_for_merge: 6 commits pushed by (Stefan Seifert)++

[12:30] <Geth> ¦ MoarVM/fix_unsigned_for_merge: 3b21e39c93 | Use uint where appropriate in MAST code

[12:30] <Geth> ¦ MoarVM/fix_unsigned_for_merge: e313f50bba | Support objprimspec 10 for unsigned integers in MAST code

[12:30] <Geth> ¦ MoarVM/fix_unsigned_for_merge: fc5549013a | New callsite flag for native unsigned ints MVM_CALLSITE_ARG_UINT

[12:30] <Geth> ¦ MoarVM/fix_unsigned_for_merge: a0b363d54f | Fix spesh generating decont_i for unboxing unsigned ints

[12:30] <Geth> ¦ MoarVM/fix_unsigned_for_merge: a5f09532e5 | Teach spesh to differ between signed and unsigned decont

[12:30] <Geth> ¦ MoarVM/fix_unsigned_for_merge: 7175db2ee2 | Teach VMArray's copy_to to use proper signed/unsigned registers

[12:30] <Geth> ¦ MoarVM/fix_unsigned_for_merge: review: https://github.com/MoarVM/MoarVM/compare/3b21e39c9382^...7175db2ee216

[12:37] <Geth> ¦ MoarVM: niner++ created pull request #1639: More preparations for fixing unsigned handling

[12:37] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1639

[12:55] <nine> With those out of the way, the remaining core of interdependent changes looks somewhat manageable :)

[13:02] <lizmat> let's merge!  :-)

[13:03] <bartolin> nine: I didn't really follow your work on fixing/improving handling of unsigned ints. Am I right in assuming that the other backends would need to support the new ops as well?

[13:07] <bartolin> (or should I raise that question in one of the PR or over at #raku-dev?)

[13:09] *** reportable6 joined
[13:10] *** linkable6 left
[13:13] <lizmat> bartolin: looks to me raising it in the PR would be the best chance of it not falling through the cracks :-)

[13:17] <bartolin> will do

[13:23] <nine> Yes, they will

[13:24] <bartolin> ah, I just asked in https://github.com/Raku/nqp/pull/756

[14:20] <lizmat> sanity check: can MoarVM be considered a registered based VM ?

[14:20] <nine> Register based VM? Yes, absolutely

[14:26] <lizmat> oki, thanks!

[14:47] <MasterDuke> lizmat: been reading https://news.ycombinator.com/item?id=29850562 ?

[15:13] *** linkable6 joined
[15:22] <MasterDuke> m: my $v = 3; my $sign = $v +> 31 ?? -1 !! 1; say $sign    # this is less than ideal

[15:22] <camelia> rakudo-moar 21d988d13: OUTPUT: «(signal SEGV)»

[16:10] <Nicholas> ==22075==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x7f322e7be1f2 bp 0x7ffeba1d2800 sp 0x7ffeba1d27f0 T0) #0 0x7f322e7be1f1 in at_key src/6model/reprs/P6opaque.c:1469

[16:13] <lizmat> MasterDuke: no, actually it was https://twitter.com/chrisgardenuk/status/1479929700109725697

[16:47] *** linkable6 left
[16:47] *** evalable6 left
[16:49] *** evalable6 joined
[16:50] *** linkable6 joined
[17:07] *** sena_kun left
[17:08] *** sena_kun joined
[18:06] <dogbert17> bisect: my $v = 3; my $sign = $v +> 31 ?? -1 !! 1

[18:06] <bisectable6> dogbert17, Will bisect the whole range automagically because no endpoints were provided, hang tight

[18:06] <bisectable6> dogbert17, Output on all releases: https://gist.github.com/9f32a8d5d9273967bb4096f98b9c296c

[18:06] <bisectable6> dogbert17, Bisecting by exit signal (old=2021.12 new=21d988d). Old exit signal: 0 (None)

[18:06] <bisectable6> dogbert17, bisect log: https://gist.github.com/31e0f21d74489a410d5cf35f4c6e3909

[18:06] <bisectable6> dogbert17, (2021-12-16) https://github.com/rakudo/rakudo/commit/71c62e7c1121c19e7c486de5f56d0e7d13855ce1

[18:06] <bisectable6> dogbert17, Output on all releases and bisected commits: https://gist.github.com/c861c8877f1e7a9b61f0120a7d850c9f

[18:09] *** reportable6 left
[18:56] *** patrickb joined
[19:44] <vrurg> MasterDuke: It is expected. You coerce a hash into a List. 

[19:44] <vrurg> m: say {:1a, :2b}.List

[19:44] <camelia> rakudo-moar 21d988d13: OUTPUT: «(a => 1 b => 2)␤»

[19:45] <vrurg> m: say List.new({:1a, :2b})

[19:45] <camelia> rakudo-moar 21d988d13: OUTPUT: «({a => 1, b => 2})␤»

[19:49] <Geth> ¦ MoarVM: nwc10++ created pull request #1640: Support using C11 atomics as an alternative libatomic_ops

[19:49] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1640

[19:53] <Nicholas> Geth: technically that was a *draft* PR

[19:56] <MasterDuke> vrurg: ok, guess we need to revert https://github.com/rakudo/rakudo/pull/4701 then

[20:00] <MasterDuke> so that segfault i demoed and dogbert17 bisected points to new code i added. however, i'm not yet 100% sure that code is entirely at fault. i don't think it should segfault, even if it does end up happening to be wrong

[20:03] <MasterDuke> it dies here https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L1469 because del is 0x0

[20:04] <MasterDuke> however, repr_data->ass_del_slot is 0 and repr_data->attribute_offsets[repr_data->ass_del_slot] is 8, which seem like plausible values

[20:10] *** reportable6 joined
[20:18] <nine> MasterDuke: your code cannot be at fault. Nothing Rakudo does may lead to a segfault in the VM. Except via NativeCall of course.

[20:19] <MasterDuke> yeah, the segfault definitely shouldn't happen. i was looking to see if i was also doing something incorrect

[20:19] <MasterDuke> fwiw, no change with MVM_SPESH_DISABLE

[20:37] <MasterDuke> if i change the code to do an nqp::existskey first that still dies. something's wrong with what it gets from `.prec`

[20:43] <vrurg> MasterDuke: I don't see why removal of CALL-ME is a wrong move? It was a workaround for incorrectly working coercions which is not the matter anymore.

[20:43] <MasterDuke> because i breaks the ecosystem

[20:43] <MasterDuke> *it breaks

[20:44] <vrurg> Perhaps it's the modules who got it wrong?

[20:45] <MasterDuke> https://github.com/rakudo/rakudo/issues/4705 crane, first one on the list

[20:45] <vrurg> Let's not shoot from the hip. For example, the fact that Chronic expects `1 ~~ all(1,2,3)` to be true doesn't mean I'd revert the fixes for smartmatching. :)

[20:46] <vrurg> Let me get over those which point at my commits. Then I hope to have time for Crane.

[20:46] <MasterDuke> vrurg++

[20:47] <vrurg> BTW, what exact type does it fail with? Did you manage to find this out?

[20:48] <MasterDuke> what do you mean type? what i showed is pretty much a golf of one of its fails

[20:49] <MasterDuke> it's creating Lists

[20:52] <vrurg> Ah, I see. Then it is certainly bad reason to revert. If it needs a list with a hash element, the approach is the same, as for everything else: containerize, or itemize with extra comma.

[20:52] <vrurg> m: say List({:1a, :2b},)

[20:52] <camelia> rakudo-moar 21d988d13: OUTPUT: «(a => 1 b => 2)␤»

[20:52] <vrurg> m: say List(({:1a, :2b},))

[20:53] <camelia> rakudo-moar 21d988d13: OUTPUT: «({a => 1, b => 2})␤»

[20:53] <MasterDuke> yeah, but it used to work that way for 6 years, i doubt that's the only code relying on the behavior

[20:54] <vrurg> Ah, containerization wouldn't work. Anyway.

[20:54] <vrurg> This is a bad reason to preserve a bug, in my eyes.

[20:54] <MasterDuke> i'm not disagreeing that it's "wrong", but i'm not sure we can just change that behavior

[20:56] <vrurg> Let's see how it goes. But as long as it's just a couple of modules, it should be manageable, I hope.

[20:57] <MasterDuke> backing up to the segfault, looks like what `.prec` is returning is concrete, but nqp::existskey and nqp::atkey segfault if given it

[21:00] *** patrickb left
[21:20] *** japhb left
[21:36] *** japhb joined
[21:37] <vrurg> BTW, is there a way in new-disp to program two chained method calls? In my spare time I'm playing with expressing smartmatch via new-disp and can't see if .ACCEPTS.Bool can be done without introducing an extra block/frame around them.

[22:04] *** [Coke] left
[22:07] *** [Coke] joined
[22:10] <MasterDuke> huh. why is REPR(obj)->name = "P6opaque"? shouldn't it be MVMHash (or BOOTHash)?

[22:12] *** [Coke] left
[22:12] *** [Coke] joined
[22:18] <MasterDuke> yeah, so it's usually a VMHash. that's the current problem. now to figure why is it a P6opaque instead?

[22:20] * japhb thinks that would depend on whether you're looking at a Rakudo Hash or its $!storage

[22:27] *** [Coke] left
[22:30] <MasterDuke> oh interesting. if i do indeed replace $obj.prec<iffy> with `my $prec := $obj.prec; nqp::atkey(nqp::getattr($prec,Map,'$!storage'),'iffy')` then there's no segfault

[22:32] <MasterDuke> but `$obj.prec<iffy>` should still not cause a segfault

[22:40] *** [Coke] joined
[22:56] <japhb> Agreed, definitely

[23:40] *** evalable6 left
[23:40] *** linkable6 left
[23:42] *** evalable6 joined
[23:42] *** linkable6 joined
[23:48] *** Kaiepi left
