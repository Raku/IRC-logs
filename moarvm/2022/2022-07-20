[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:10] *** [Coke] left
[00:20] *** [Coke] joined
[01:07] *** kjp left
[01:57] *** frost joined
[03:17] *** linkable6 left
[03:17] *** bloatable6 left
[03:17] *** benchable6 left
[03:17] *** evalable6 left
[03:17] *** greppable6 left
[03:17] *** notable6 left
[03:17] *** statisfiable6 left
[03:17] *** quotable6 left
[03:17] *** unicodable6 left
[03:17] *** releasable6 left
[03:17] *** shareable6 left
[03:17] *** coverable6 left
[03:17] *** sourceable6 left
[03:17] *** committable6 left
[03:17] *** reportable6 left
[03:17] *** tellable6 left
[03:17] *** nativecallable6 left
[03:17] *** bisectable6 left
[03:17] *** linkable6 joined
[03:17] *** evalable6 joined
[03:18] *** quotable6 joined
[03:18] *** benchable6 joined
[03:18] *** notable6 joined
[03:18] *** unicodable6 joined
[03:18] *** coverable6 joined
[03:19] *** bloatable6 joined
[03:19] *** statisfiable6 joined
[03:19] *** sourceable6 joined
[03:19] *** greppable6 joined
[03:19] *** bisectable6 joined
[03:20] *** committable6 joined
[03:20] *** shareable6 joined
[03:20] *** tellable6 joined
[03:20] *** releasable6 joined
[03:20] *** reportable6 joined
[03:20] *** nativecallable6 joined
[04:18] *** vrurg_ joined
[04:18] *** vrurg left
[05:18] *** nativecallable6 left
[05:18] *** unicodable6 left
[05:18] *** statisfiable6 left
[05:18] *** tellable6 left
[05:18] *** notable6 left
[05:18] *** reportable6 left
[05:18] *** coverable6 left
[05:18] *** quotable6 left
[05:18] *** evalable6 left
[05:18] *** committable6 left
[05:18] *** benchable6 left
[05:18] *** shareable6 left
[05:18] *** linkable6 left
[05:18] *** greppable6 left
[05:18] *** sourceable6 left
[05:18] *** bisectable6 left
[05:18] *** bloatable6 left
[05:18] *** releasable6 left
[05:19] *** evalable6 joined
[05:19] *** releasable6 joined
[05:19] *** bisectable6 joined
[05:19] *** sourceable6 joined
[05:20] *** bloatable6 joined
[05:20] *** statisfiable6 joined
[05:20] *** tellable6 joined
[05:20] *** greppable6 joined
[05:20] *** quotable6 joined
[05:20] *** reportable6 joined
[05:20] *** nativecallable6 joined
[05:21] *** committable6 joined
[05:21] *** benchable6 joined
[05:21] *** coverable6 joined
[05:21] *** unicodable6 joined
[05:21] *** notable6 joined
[05:21] *** linkable6 joined
[05:22] *** shareable6 joined
[06:05] <Nicholas> good *able6, #moarvm 

[06:09] *** reportable6 left
[06:09] *** reportable6 joined
[07:42] <timo> goo goo

[07:48] <Geth> ¦ MoarVM/fallback_resolver: 5d0f92c65b | (Stefan Seifert)++ | 2 files

[07:48] <Geth> ¦ MoarVM/fallback_resolver: Add missing :deoptallpoint flags to invokish ops

[07:48] <Geth> ¦ MoarVM/fallback_resolver: 

[07:48] <Geth> ¦ MoarVM/fallback_resolver: Since invoked code may do anything, including creating mixins, we have

[07:48] <Geth> ¦ MoarVM/fallback_resolver: to mark all non-spesh ops that may invoke as deoptallpoints.

[07:48] <Geth> ¦ MoarVM/fallback_resolver: review: https://github.com/MoarVM/MoarVM/commit/5d0f92c65b

[07:59] *** Kaiepi left
[07:59] *** Kaiepi joined
[08:05] *** sena_kun joined
[08:43] <timo> vrurg_: seems to be about orchestration of gc runs

[08:47] <timo> thread 5 is just coming out of the sleep and is waiting on cond_blocked_can_continue in orchestrate.c:331, thread 4 entered the gc from allocating in the thread pool scheduler somewhere and is waiting on cond_gc_start

[09:15] *** Kaiepi left
[09:17] <nine> And the tight loop is missing a GC_SYNC_POINT?

[09:23] <timo> Thread 5 run 2 : GC thread elected coordinator: starting gc seq 2 Thread 5 run 2 : A blocked thread 6 spotted; work stolen Thread 5 run 2 : Signalled thread 4 to interrupt Thread 5 run 2 : A blocked thread 3 spotted; work stolen Thread 5 run 2 : A blocked thread 1 spotted; work stolen

[09:23] <timo> without jit it completes

[09:24] <timo> so yeah, that's quite possibly the reason, nine

[09:31] <jnthn> There's already an issue about that, I believe; think it's that the expr jit doesn't emit gc sync points

[09:32] <jnthn> https://github.com/MoarVM/MoarVM/issues/1230

[09:34] <timo> well, that's not good :) :) :)

[09:58] <nine> jnthn: do those :deoptallpoints look correct now?

[10:05] *** Altai-man joined
[10:31] *** sena_kun_ joined
[10:31] *** Altai-man left
[11:50] *** frost left
[12:00] *** frost joined
[12:05] *** frost left
[12:08] *** reportable6 left
[12:09] <timo> jnthn: is there something that can be done with the commits from more-pea? last one is already three years old, wow... or perhaps relevant commits have been cherry-picked or something?

[12:11] *** reportable6 joined
[12:24] <timo> maybe we can merge partial-PEA :D

[12:26] <jnthn> timo: My thinking was to cherry-pick parts of it focused on particular improvements I was exploring

[12:26] <jnthn> And polish up each of them in turn.

[12:27] <jnthn> Also a lot can be simplified thanks to the end of attrinnited

[12:27] <timo> ah, yes

[12:27] <jnthn> Which was quite an analysis complication

[12:27] <jnthn> The p6o-setup stuff is probably the logical next step, since that really gets rid of the whole attr auto-viv stuff

[12:28] <jnthn> That blocked on finding a solution to attrinitted, which has been done already.

[12:28] <jnthn> After that I'd probably go for the transitive EA bits

[12:30] <timo> was that already on your agenda for some point in the near future?

[14:03] *** dogbert17 left
[14:30] <Geth> ¦ MoarVM: Kaiepi++ created pull request #1714: [WIP] Make some enhancements to the Semaphore REPR

[14:30] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1714

[14:32] *** dogbert17 joined
[14:35] *** dogbert11 joined
[14:39] *** dogbert17 left
[14:58] *** dogbert17 joined
[15:01] *** dogbert11 left
[15:26] *** dogbert17 left
[16:13] *** sena_kun_ left
[16:14] *** sena_kun_ joined
[16:45] *** dogbert17 joined
[17:06] *** sena_kun_ left
[18:06] *** reportable6 left
[18:08] *** reportable6 joined
[19:22] *** vrurg_ is now known as vrurg

[19:33] <vrurg> Anybody would mind adding optional $obj parameter to metamodel archetypes methods? First, it would allow $obj.^archetypes in Raku. Second, I would be able to complete nominalizable transparency because for a generic T:D archetypes do not report its genericness.

[19:34] <vrurg> The problem with definites is that single metamodel instance serves them all via parameterization.

[19:45] *** sena_kun left
[19:47] *** sena_kun joined
[21:02] *** sena_kun left
[23:58] *** evalable6 left
[23:58] *** linkable6 left
[23:59] *** evalable6 joined
