[00:00] *** frost joined
[00:05] *** reportable6 left
[00:07] *** reportable6 joined
[01:17] *** linkable6 left
[01:17] *** evalable6 left
[01:19] *** evalable6 joined
[01:20] *** linkable6 joined
[03:20] *** evalable6 left
[03:20] *** linkable6 left
[03:20] *** linkable6 joined
[03:21] *** frost left
[03:22] *** evalable6 joined
[04:22] *** evalable6 left
[04:22] *** linkable6 left
[04:23] *** evalable6 joined
[04:23] *** linkable6 joined
[05:18] *** Geth left
[06:05] *** reportable6 left
[06:06] *** reportable6 joined
[07:15] <Nicholas> Today’s coffee bootstrapping problem - the AeroPress does not make very good coffee if you forget to put the filter paper in.

[07:15] <Nicholas> (good *, *)

[07:33] <nine> Is it a bit chewy?

[07:34] <Nicholas> well, there's a *lot* of coffee grouns in the original mug, but the mug I filtered it into is doing OK

[07:35] <Nicholas> oops, "spoke" too soon. Have just reached the bottom, and there were some coffee grounds

[07:54] *** frost joined
[07:54] <nine> That can still count as ok

[09:04] *** sena_kun left
[09:07] *** sena_kun joined
[09:52] *** Geth joined
[10:00] *** Geth left
[10:00] *** Geth joined
[10:06] <jnthnwrthngtn> Coffee was successfully made here today. :)

[10:07] <Nicholas> \o/

[10:07] <nine> jnthnwrthngtn: brane cooperating better today?

[10:12] <jnthnwrthngtn> A bit; didn't catch up quite as much on sleep as hoped because somebody was getting some construction work done starting from earlier than ideal.

[10:43] <nine> jnthnwrthngtn: pushed a couple commits to rakuast

[10:50] *** Altai-man joined
[11:55] <jnthnwrthngtn> nine: Cool. Just spectested them while lunching, still on 321. Will take a look over them.

[12:03] <jnthnwrthngtn> nine: Was reading one commit and was like "ah, I should point at StubbyMeta"...then came across the one where you found it anyway :D

[12:05] *** reportable6 left
[12:06] <jnthnwrthngtn> nine++ # commits look good

[12:07] *** reportable6 joined
[12:09] <nine> \o/

[12:09] <nine> The PACKAGES thing was the 3rd iteration already :D

[12:10] <nine> Next up: colon pairs, as Test has multi sub trait_mod:<is>(Routine:D $r, :$test-assertion!) is export

[12:17] *** frost left
[12:21] <jnthnwrthngtn> Ah, you're on the "compile Test" mission? :)

[12:21] <jnthnwrthngtn> I think `multi` will be the blocker before that; I put it off until after new-disp

[12:27] <nine> Yes, I am. Probably not the easiest entry into the project, but now that I've started, I'm curious where it leads me

[13:14] *** frost joined
[13:40] <[Coke]> (coffee) ugh, I need to stop using k-cups. :|

[13:41] <[Coke]> nine++ jnthnwrthngtn++

[13:46] *** frost left
[14:04] <nine> m: dd sub foo:$bar() { }

[14:04] <camelia> rakudo-moar 530e17848: OUTPUT: «Sub foo: = sub foo: { #`(Sub|4492199190672) ... }␤»

[14:05] <nine> jnthnwrthngtn: is this ^^^ the reason why deflongname doesn't just use <colonpair>* like in the old parser?

[14:20] <jnthnwrthngtn> nine: I think I only commented out <colonpair>* 'cus it's not implemented/used in any way yet

[14:21] <nine> Ah, ok. It now is :)

[14:21] <nine> m: dd sub foo:bar<baz>:$qux() { } # never realized that this is legal syntax

[14:21] <camelia> rakudo-moar 530e17848: OUTPUT: «Sub foo:bar<baz>: = sub foo:bar<baz>: { #`(Sub|2707841213400) ... }␤»

[14:22] <jnthnwrthngtn> It is, although dubious semantics :)

[14:51] <nine> What's a placeholder signature?

[14:52] <jnthnwrthngtn> { :$^foo }

[14:52] <jnthnwrthngtn> Funnily enough I'm looking at an issue around that right now :)

[14:53] <nine> Routine resolves the placeholder-signature but not the plain normal signature in PERFORM-BEGIN. Doing the latter, too, gets me further

[14:54] <nine> Well, now there's no avoiding multi anymore

[15:16] <jnthnwrthngtn> OK, phew, today I managed to fix the { $^foo } compilation bug that defeated me last time I looked at it :)

[15:17] <jnthnwrthngtn> It gets me no more fully passing spectest files, but a lot further into at least one more file

[15:28] <[Coke]> Do rewrites like this highlight anything we can be doing in roast to better isolate features?

[16:05] <nine> Somehow a simple if $!signature {

[16:05] <nine> $!signature.IMPL-CHECK($resolver, True); } causes weird regressions like turning default argument types to Mu instead of Any

[16:06] <nine> (in RakuAST::Routine.PERFORM-BEGIN)

[16:10] <[Coke]> getting an error building on windows: moarvm complaining it cannot find stdatomic.h, no such file

[16:11] <jnthnwrthngtn> nine: It'll be dupe-checking if you do that

[16:11] <jnthnwrthngtn> And it shouldn't really be checked at BEGIN time either

[16:11] <jnthnwrthngtn> The only reason we do it for placeholder signatures is because they are generated and so not actually in the AST

[16:11] <jnthnwrthngtn> Oh, wait, True there means resolve only

[16:12] <jnthnwrthngtn> But still, I'm surprised it's needed

[16:12] <nine> Traits need those types to be resolved

[16:13] <jnthnwrthngtn> Which types?

[16:14] <jnthnwrthngtn> The implicit lookups?

[16:15] <nine> parameter types

[16:16] <nine> Traits need a decl-target, which we get from the compile-time-value of the target which we get via meta-object which tries to process the signature

[16:33] <nine> Ah, I think at that time the args aren't attached yet, so they have no owner so this check fails: nqp::istype($!owner, RakuAST::Routine) ?? Any !! Mu

[16:33] <nine> Timing is everything

[17:11] <jnthnwrthngtn> Up to 324 passing, plus some others getting further

[17:11] <jnthnwrthngtn> (either with compilation or running)

[17:11] <jnthnwrthngtn> 2 just from correct exception type for undeclared routine

[17:12] <jnthnwrthngtn> home time &

[17:17] *** Altai-man left
[18:05] *** reportable6 left
[18:07] *** reportable6 joined
[18:16] <nine> Tell, don't ask!

[18:17] <nine> I'd say an argument shouldn't determine its own default type based on its owner. It should be told what type to use

[18:59] *** sena_kun left
[19:08] *** sena_kun joined
[22:38] *** nebuchadnezzar left
