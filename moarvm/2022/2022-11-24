[00:07] *** reportable6 left
[00:10] *** reportable6 joined
[00:17] *** epony joined
[03:04] *** Kaiepi joined
[04:57] *** sortiz joined
[05:17] *** Guest15 left
[05:58] *** sortiz left
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[07:01] *** squashable6 left
[07:02] *** squashable6 joined
[10:03] *** sena_kun joined
[11:30] *** sena_kun left
[11:31] *** sena_kun joined
[12:08] *** reportable6 left
[12:11] *** reportable6 joined
[12:34] *** frost19 joined
[13:21] *** frost19 left
[15:24] <vrurg> nqp's HLL::World is using @*comp_line_directives. But where is it declared?

[15:35] *** nine left
[15:35] *** nine joined
[16:04] <nine> vrurg: I think it isn't anymore since commit 0d4885d7450b22ccf2000823f9c2d7908fbe9019

[16:05] *** linkable6 left
[16:06] *** linkable6 joined
[16:10] *** Kaiepi left
[17:04] *** epony left
[17:09] *** MasterDuke joined
[17:10] <MasterDuke> vrurg: @*comp_line_directives was the first not-completely-trivial thing i did for moarvm/nqp/rakudo, so i'm sure it can be improved

[17:12] <MasterDuke> btw, https://gist.github.com/MasterDuke17/97950159ed27fe4dc7ae3da030abcc54 is what i'm experimenting with right now. anybody have any thoughts on whether i should or should not PR that (and any further similar changes)?

[17:14] <MasterDuke> for compiling CORE.e, it's reduced temporary allocations from 272k down to 124k

[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[18:29] *** Kaiepi joined
[19:57] <vrurg> nine, MasterDuke: then how does `#line` currently works? I only found it being handled by HLL::Grammar/Actions where it refers back to HLL::Compiler which is using the dynamic.

[20:16] <timo> are we certain that 16 is the longest capture path we will ever encounter?

[20:18] <nine> vrurg: in RakuAST it doesn't at all. See also https://irclogs.raku.org/moarvm/2022-11-20.html

[20:25] *** sena_kun left
[20:31] *** MasterDukeMobile joined
[20:33] <MasterDukeMobile> timo: certain, no. But I saw a max of only 13 when compiling CORE.c, so 16 was sufficient for experimenting

[20:33] <MasterDukeMobile> Actual values would definitely be up for bikeshedding

[20:40] *** MasterDukeMobile left
[20:42] <timo> shrug, stack is big :P

[21:09] <vrurg> nine: that's what I'm working on. I encountered a bug yesterday which is hard to track down to exact location in a source. So, decided to do something about it.

[21:10] *** Guest32 joined
[22:27] <nine> MasterDuke: if we can't guarantee that we never run out of room there, I'd say it's not worth it. Those buffer overruns would be painful to debug. What do we gain in terms of time in return?

[23:01] *** linkable6 left
[23:01] *** evalable6 left
[23:03] *** evalable6 joined
[23:04] *** linkable6 joined
[23:09] *** epony joined
