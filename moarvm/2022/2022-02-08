[00:07] *** reportable6 left
[01:10] *** greppable6 left
[01:10] *** committable6 left
[01:10] *** linkable6 left
[01:10] *** coverable6 left
[01:10] *** nativecallable6 left
[01:10] *** sourceable6 left
[01:10] *** bisectable6 left
[01:10] *** statisfiable6 left
[01:10] *** notable6 left
[01:10] *** benchable6 left
[01:10] *** squashable6 left
[01:10] *** shareable6 left
[01:10] *** unicodable6 left
[01:10] *** evalable6 left
[01:10] *** tellable6 left
[01:10] *** releasable6 left
[01:10] *** quotable6 left
[01:10] *** bloatable6 left
[01:11] *** benchable6 joined
[01:11] *** squashable6 joined
[01:11] *** coverable6 joined
[01:11] *** notable6 joined
[01:12] *** committable6 joined
[01:12] *** tellable6 joined
[01:12] *** statisfiable6 joined
[01:12] *** nativecallable6 joined
[01:13] *** greppable6 joined
[01:13] *** shareable6 joined
[01:13] *** sourceable6 joined
[01:13] *** releasable6 joined
[01:57] *** discord-raku-bot left
[01:58] *** discord-raku-bot joined
[02:10] *** reportable6 joined
[02:11] *** bisectable6 joined
[02:12] *** frost joined
[02:13] *** evalable6 joined
[02:13] *** quotable6 joined
[02:13] *** linkable6 joined
[02:16] *** sena_kun left
[02:17] *** sena_kun joined
[03:13] *** bloatable6 joined
[03:39] *** frost left
[04:00] *** discord-raku-bot left
[04:00] *** discord-raku-bot joined
[04:13] *** frost joined
[04:42] *** frost left
[06:08] *** reportable6 left
[06:10] *** reportable6 joined
[06:11] *** unicodable6 joined
[07:14] *** linkable6 left
[07:14] *** evalable6 left
[07:17] *** evalable6 joined
[08:05] *** MasterDuke left
[08:17] *** linkable6 joined
[08:43] *** MasterDuke joined
[09:13] <MasterDuke> is it really possible to get something that can't `$foo.HOW.name($foo)`?
[09:38] <patrickb> nine: Then my guess of the op being reversed again was actually correct. (Not that such guesses would buy me anything but a grin :-)
[11:22] <nine> patrickb: definitely a good guess!
[11:33] <nine> MasterDuke: just compare the output of rakudo --target=optimize -e 'my $a = 0; $a += 1;' and rakudo --target=optimize -e 'my $a = 0; $a = $a + 1;'
[11:36] <MasterDuke> yeah, i saw that the += version has an extra `definite($a) ?? $a !! 0`. i wonder how possible/easy it would be to check if there's a compile-time value and if so, re-write it into the `$a = $a + 1` version (or remove that check)
[11:38] <nine> Worth a try I guess.
[11:47] *** Altai-man joined
[11:51] <MasterDuke> could `self.find_single_symbol('Mu', :setting-only)` in World ever actually die (i.e., not find 'Mu')?
[11:58] <nine>         nqp::die("Cannot find symbol $name in $setting_name");
[11:58] <nine> That would indicate so
[11:59] <nine> Oh, 'Mu' specifically?
[12:00] <lizmat> I guess very early in the bootstrap, Mu may not be a thing yet ?
[12:01] <nine> I dare say if we make it through settings compilation without that try, we don't need it
[12:02] <MasterDuke> yeah, there are a couple places where it tries to get hardcoded values, like 'Mu', and i'm wondering if those *actually* need any checks
[12:07] *** reportable6 left
[12:10] *** reportable6 joined
[12:56] *** [Coke] left
[12:58] *** Altai-man left
[12:59] *** Altai-man joined
[13:01] *** [Coke] joined
[13:32] *** [Coke]_ joined
[13:35] *** [Coke] left
[14:43] *** tbrowder joined
[15:27] *** MasterDuke left
[15:36] *** MasterDuke joined
[16:07] *** [Coke]_ is now known as [Coke]
[16:20] <MasterDuke> interesting. in windows, when using an nqp with https://github.com/Raku/nqp/pull/764 creating even a minimal profile dies with `KnowHOW methods must be called on object instance with REPR KnowHOWREPR
[16:20] <MasterDuke>    at gen\moar\stage2\NQPHLL.nqp:245  (C:\Users\Dan\Source\nqp/NQPHLL.moarvm:get_remapped_type_id)`
[16:33] <lizmat> fwiw, some of my modules currently fail testing in weird ways on Windows
[17:03] <[Coke]> recent failure mode?
[17:04] <[Coke]> or just-now-testing on windows?
[17:04] <MasterDuke> just now testing the pr
[17:04] <MasterDuke> for me
[17:07] *** Altai-man left
[17:12] *** Merfont left
[17:12] *** Kaiepi joined
[18:06] *** reportable6 left
[18:07] *** reportable6 joined
[19:04] <nine> https://michaelheap.com/git-ignore-rev/
[19:06] <lizmat> interesting
[19:07] <MasterDuke> yeah, just found out about that a couple months ago. good timing as we were discussing doing a repo-wide linting/formatting commit, but one of the cons was the impact on git blame. dramatically minimized that particular con
[19:08] <lizmat> feels there should be a trigger in a commit message to make that commit automatically be added to the ignorable commits ?
[19:09] <lizmat> feels there should be a trigger in a commit message to make that commit automatically be added to the ignorable commits ?
[19:17] *** Kaiepi left
[19:17] *** Kaiepi joined
[20:17] *** linkable6 left
[20:17] *** evalable6 left
[20:19] *** evalable6 joined
[20:51] *** timo joined
[22:18] *** linkable6 joined
[22:38] <Geth> ¦ MoarVM: 418711f010 | (Daniel Green)++ | src/io/syncfile.c
[22:38] <Geth> ¦ MoarVM: Whoops, fix a wrong format string change
[22:38] <Geth> ¦ MoarVM: 
[22:38] <Geth> ¦ MoarVM: It slipped in accidentally when fixing some others for MinGW.
[22:38] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/418711f010
[22:46] *** MasterDuke left
[23:41] *** MasterDuke joined
