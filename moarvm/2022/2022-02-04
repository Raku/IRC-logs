[00:08] *** reportable6 left
[00:10] *** reportable6 joined
[00:33] *** linkable6 left
[00:35] *** linkable6 joined
[01:28] *** Merfont left
[03:55] *** unicodable6 left
[03:55] *** squashable6 left
[03:55] *** nativecallable6 left
[03:55] *** committable6 left
[03:55] *** statisfiable6 left
[03:55] *** releasable6 left
[03:55] *** coverable6 left
[03:55] *** linkable6 left
[03:55] *** evalable6 left
[03:55] *** benchable6 left
[03:55] *** notable6 left
[03:55] *** reportable6 left
[03:55] *** quotable6 left
[03:55] *** greppable6 left
[03:55] *** sourceable6 left
[03:55] *** bloatable6 left
[03:55] *** shareable6 left
[03:55] *** tellable6 left
[03:55] *** bisectable6 left
[03:56] *** quotable6 joined
[03:56] *** releasable6 joined
[03:56] *** squashable6 joined
[03:56] *** unicodable6 joined
[03:56] *** linkable6 joined
[03:56] *** statisfiable6 joined
[03:57] *** sourceable6 joined
[03:57] *** benchable6 joined
[03:57] *** committable6 joined
[03:58] *** shareable6 joined
[03:58] *** tellable6 joined
[03:58] *** bisectable6 joined
[04:56] *** greppable6 joined
[04:56] *** coverable6 joined
[04:56] *** notable6 joined
[05:56] *** linkable6 left
[05:57] *** evalable6 joined
[05:57] *** nativecallable6 joined
[05:58] *** linkable6 joined
[06:10] <nine> Now that vrurg++ put it this way: what if we have a callsite where we call an unwrapped routine, dispatch accordingly but between this first and the next call at this callsite the routine actually gets wrapped? How do we detect that?

[06:12] <nine> The answer is: the only way a routine object can get a WRAPPERS method is by getting mixed into. But mixing into an object changes the object's type and we have a guard on the callee's type. So that's how we end up back in the dispatcher which now deals with the wrappers.

[07:11] *** reportable6 joined
[07:20] <Nicholas> *, * good

[07:27] <Geth> ¦ MoarVM: 4a3b98d546 | (Stefan Seifert)++ | src/spesh/optimize.c

[07:27] <Geth> ¦ MoarVM: Teach optimize_decont about UINT64 box type

[07:27] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/4a3b98d546

[07:27] <Geth> ¦ MoarVM: ed3cdd382f | (Stefan Seifert)++ | src/spesh/facts.c

[07:27] <Geth> ¦ MoarVM: Fix spesh turning decont of a UIntLexRef into a decont_i

[07:27] <Geth> ¦ MoarVM: 

[07:27] <Geth> ¦ MoarVM: We wrongly assumed int_lex_ref as the type of the result of a getlex_u*

[07:27] <Geth> ¦ MoarVM: op when gathering facts. This led us to making optimization decisions

[07:27] <Geth> ¦ MoarVM: based on the wrong type.

[07:27] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/ed3cdd382f

[08:57] *** bloatable6 joined
[09:18] <lizmat> oooh..., that looks like an interesting fix performance wise!

[09:41] <nine> I think there are still several optimizations that need to cover uint now

[09:47] <Geth> ¦ MoarVM: scovit++ created pull request #1666: Make rakudo available on the GNU Hurd

[09:47] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/pull/1666

[10:06] <lizmat> m: sub a(int $a, int $b) { }; a 42, 666 for ^10000000; say now - ENTER now   # something I just noticed now

[10:06] <camelia> rakudo-moar 006a920ca: OUTPUT: «0.584606328␤»

[10:06] <lizmat> m: sub a(Int:D $a, int $b) { }; a 42, 666 for ^10000000; say now - ENTER now   # Int:D int  *much* faster

[10:06] <camelia> rakudo-moar 006a920ca: OUTPUT: «0.069507487␤»

[10:06] <lizmat> a factor of 8 ?

[10:14] <timo> https://www.ui.perfetto.dev/ may be interesting at some point

[10:18] <timo> lizmat: i'm willing to bet it's about boxing that we're not noticing is unnecessary

[10:22] <lizmat> actually, the int int case does not inline:

[10:22] <lizmat> a BB(1, 18 bytes) -> BB(2):

[10:22] <lizmat>       target has a :noinline instruction - ins: paramnamesused

[10:23] <timo> huh, paramnamesused, that suggests we're not arg-speshing it

[10:24] * lizmat is just reporting  :-)

[10:25] <lizmat> m: 'sub a(int @a, int $b) { }; a (my int @ = 42), 666 for ^100000   # also does not inline

[10:25] <camelia> rakudo-moar 006a920ca: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3666 for ^100000   # also does not inline⏏<EOL>␤    expecting…»

[10:25] <lizmat> m: sub a(int @a, int $b) { }; a (my int @ = 42), 666 for ^100000   # also does not inline

[10:25] <camelia> rakudo-moar 006a920ca: ( no output )

[10:25] <lizmat> a BB(1, 46 bytes) -> BB(2):

[10:25] <lizmat>       target has a :noinline instruction - ins: sp_assertparamcheck

[10:26] <lizmat> is that something that should be handled with new-disp dispatching ?

[10:35] <timo> hm, good question

[10:43] *** Merfont joined
[11:24] *** Altai-man joined
[12:08] *** TheAthlete joined
[12:08] *** reportable6 left
[12:43] <jnthnwrthngtn> No, that's pretty orthogonal to dispatching, it's about optimization of signature checking. If that op is still around, it means we didn't prove that, in the given specialization, the signature will always bind

[12:46] <timo> and failing the bind at that point isn't a point where we could do a resumption into an error handler or something?

[12:46] <timo> i wonder if we can perhaps have an sp_sp_assertparamcheck that takes info about the original callable and signature and all the arguments as parameters or something

[12:47] <timo> so that inlining would be safe since all necessary info is kept available

[12:47] <timo> sp_assertsp_aramcheck

[13:58] *** discord-raku-bot left
[13:58] *** discord-raku-bot joined
[14:18] <nine> I'm surprised about int int not param speshing. E.g. I've tested int Int and that speshes (while int Int:D doesn't)

[14:19] <vrurg> nine: Then something didn't work as expected. I have managed to get wrapped `proto` working by the proposed method: added the attribute to Routine then added a guarding on it in raku-meth-deferral resumption. Right after the guard on $track_method type.

[14:20] <vrurg> And there is one more thing. Unless I'm misinterpreted the dumped programs, but it looks like unwrapping results in returning to the default multi-method dispatching path.

[14:20] <nine> Oh, but I've tested something like sub foo(int $a, Int $b) { }; my int $a = 1; foo($a, 1) for ^2000000

[14:23] <nine> sub foo(int $a, int $b) { my $x = $a; }; foo(2, 1) for ^20000000; speshes just fine?

[14:23] <vrurg> nine: BTW, with regard to LibXML, there is missing 'unsigned' in error message of native_ref_store_u. And there is no difference in store and fetch messages, making it harder to track down. I can make a PR, but not sure when will have time for it.

[14:23] <nine> As does 'sub foo(int $a, Int $b). It's really 'sub foo(int $a, Int:D $b) which tanks performance

[14:24] <nine> vrurg: feel free :)

[14:48] <vrurg> Unfudged S06-advanced/dispatching.t currently fails with 'Already set resume init args for this dispatcher'. This is a case where a multi-dispatch candidate gets wrapped with another multi-dispatch. Looks like delegating back to a dispatcher which is already was called/delegated to is not possible. Do I understand it correctly that because delegations do not recurse this wrapping will never work?

[15:57] <jnthnwrthngtn> vrurg: Correct, we don't support the same resumable dispatcher occurring recursively

[16:01] <vrurg> jnthnwrthngtn: any plans for this? I mean, we're not prohibiting that behaviour of wrapping.

[16:04] <jnthnwrthngtn> We could explicitly prohibit it with a decent error

[16:05] <jnthnwrthngtn> We could also have a multi-wrapper dispatcher that forces us to run the proto and do a resumption to actually going to the multi candidate, to "split" the dispatch at that point

[16:05] <jnthnwrthngtn> e.g. "you can do this but you'll not get the optimization that avoids running the proto"

[16:20] <vrurg> The latter is ok, I think. It's a rare and extremely specific case. 

[16:32] <jnthnwrthngtn> Yeah, I don't feel much like making the dispatch mechanism more complex for this, if we have an acceptable "user-space" solution

[16:39] *** TheAthlete left
[16:49] *** sena_kun_ joined
[16:49] *** Altai-man left
[17:09] *** reportable6 joined
[17:36] *** sena_kun_ left
[18:07] *** reportable6 left
[19:10] *** reportable6 joined
[19:34] *** squashable6 left
[19:36] *** squashable6 joined
[19:56] *** discord-raku-bot left
[19:56] *** discord-raku-bot joined
[20:10] *** MasterDuke left
[20:12] <vrurg> jnthnwrthngtn: BTW, what would be the best way to find out if a recursive delegation took place?

[20:39] *** MasterDuke joined
[21:09] <Geth> ¦ MoarVM/master: 6 commits pushed by (Daniel Green)++, MasterDuke17++

[21:09] <Geth> ¦ MoarVM/master: 0b16384da8 | Print gcc plugin output to stderr

[21:09] <Geth> ¦ MoarVM/master: 3773169d17 | Remove unused imports in gcc plugins

[21:09] <Geth> ¦ MoarVM/master: de12679a6f | Don't reuse variables in nested loops in gcc plugins

[21:09] <Geth> ¦ MoarVM/master: b73b95705d | Remove unused variable in gcc plugin

[21:09] <Geth> ¦ MoarVM/master: 3d759ed55b | Some minor cleanup of the gdb plugin

[21:09] <Geth> ¦ MoarVM/master: dcf445677f | Merge pull request #1663 from MasterDuke17/fix_python_things_found_by_lgtm.com

[21:09] <Geth> ¦ MoarVM/master: review: https://github.com/MoarVM/MoarVM/compare/ed3cdd382f6d...dcf445677ffd

[21:09] <Geth> ¦ MoarVM: d968da8927 | (Daniel Green)++ | src/jit/compile.c

[21:10] <Geth> ¦ MoarVM: Use correct sizes in format string

[21:10] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/d968da8927

[21:10] <Geth> ¦ MoarVM: 58d0d7567c | (Daniel Green)++ | src/strings/gb18030_codeindex.h

[21:10] <Geth> ¦ MoarVM: Remove impossible logic

[21:10] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/58d0d7567c

[21:10] <Geth> ¦ MoarVM: 0b2bda31fc | MasterDuke17++ (committed using GitHub Web editor) | 2 files

[21:10] <Geth> ¦ MoarVM: Merge pull request #1664 from MasterDuke17/fix_more_things_found_by_lgtm.com

[21:10] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/0b2bda31fc

[21:27] <vrurg> MasterDuke: would you, pls, merge https://github.com/MoarVM/MoarVM/pull/1665? It holds me back from updating moar.

[21:27] <Geth> ¦ MoarVM: 72b313b2f2 | (Vadim Belman)++ | src/disp/program.c

[21:27] <Geth> ¦ MoarVM: Make it possible turn dispatcher debugger with compiler options

[21:27] <Geth> ¦ MoarVM: 

[21:27] <Geth> ¦ MoarVM: Sometimes it is better than editing the source.

[21:27] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/72b313b2f2

[21:27] <Geth> ¦ MoarVM: 74bbbccabf | MasterDuke17++ (committed using GitHub Web editor) | src/disp/program.c

[21:27] <Geth> ¦ MoarVM: Merge pull request #1665 from vrurg/disp-debug-trigger

[21:27] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/74bbbccabf

[21:27] <vrurg> MasterDuke++

[21:59] *** discord-raku-bot left
[21:59] *** discord-raku-bot joined
