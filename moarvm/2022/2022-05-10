[00:07] *** reportable6 left
[00:07] *** reportable6 joined
[00:42] *** frost joined
[01:42] *** committable6 left
[01:42] *** statisfiable6 left
[01:42] *** benchable6 left
[01:42] *** bisectable6 left
[01:42] *** notable6 left
[01:42] *** quotable6 left
[01:42] *** greppable6 left
[01:42] *** shareable6 left
[01:42] *** linkable6 left
[01:42] *** evalable6 left
[01:42] *** reportable6 left
[01:42] *** releasable6 left
[01:42] *** tellable6 left
[01:42] *** sourceable6 left
[01:42] *** unicodable6 left
[01:42] *** nativecallable6 left
[01:42] *** coverable6 left
[01:42] *** bloatable6 left
[01:43] *** statisfiable6 joined
[01:43] *** benchable6 joined
[01:43] *** notable6 joined
[01:43] *** greppable6 joined
[01:43] *** sourceable6 joined
[01:44] *** evalable6 joined
[01:44] *** coverable6 joined
[01:44] *** bisectable6 joined
[01:44] *** reportable6 joined
[01:45] *** releasable6 joined
[01:45] *** tellable6 joined
[01:45] *** shareable6 joined
[01:45] *** nativecallable6 joined
[01:45] *** bloatable6 joined
[01:45] *** committable6 joined
[01:45] *** linkable6 joined
[01:45] *** quotable6 joined
[01:46] *** unicodable6 joined
[03:27] *** Kaiepi left
[04:17] *** Kaiepi joined
[05:20] <Nicholas> good *, *

[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:26] *** frost left
[07:32] <nine> Good summer!

[07:50] *** frost joined
[07:56] <Nicholas> "while stocks last"

[09:31] *** frost left
[09:39] *** frost joined
[12:04] *** frost left
[12:06] *** reportable6 left
[12:09] *** reportable6 joined
[13:26] *** patrickb left
[13:27] *** patrickb joined
[14:17] *** discord-raku-bot left
[14:17] *** discord-raku-bot joined
[14:28] *** Kaiepi left
[15:34] *** Kaiepi joined
[16:39] <lizmat> nine: re https://github.com/rakudo/rakudo/commit/d8ff3ade1e   is that something that should be fixed on master as well ?

[16:41] <nine> Unless someone intends to give precompiled scripts another try, I don't see a need to rush.

[16:42] <nine> If you are curious, you could test if we actually need that GLOBAL preserving in Perl6::ModuleLoader at all anymore. Since that only loads NQP modules, I don't see how Raku's GLOBAL could get overwritten

[16:51] *** Kaiepi left
[16:56] *** vrurg left
[17:02] <lizmat> will check

[17:05] *** dogbert11 left
[17:09] *** Kaiepi joined
[17:26] *** Kaiepi left
[17:48] *** Kaiepi joined
[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[18:48] <nine> Oooooh! find-lexical on a scope caches the negative. So my check for conflicts on IMPORT actually prevents those imported symbols from getting found

[18:51] <nine> Well, it doesn't actually cache a negative. It's more that it generates the list of generated lexical declarations just the once and caches the result, preventing future additions from getting found.

[19:04] <lizmat> I think I just had a record in the Rakudo code base: fixed a problem introduced in 2012, and *nobody* has noticed that until now

[19:06] <nine> Could be. My ModuleLoader bug was from 2013

[19:16] <nine> 400!

[19:18] <nine> The 4 additional spec tests failed before because they `use Test;` twice: https://github.com/Raku/roast/blob/master/S32-str/CollationTest_NON_IGNORABLE-0.t#L2306

[19:24] *** sena_kun left
[19:25] *** sena_kun joined
[19:34] *** Kaipei joined
[19:37] *** Kaiepi left
[20:34] *** Kaipei left
[20:53] *** sena_kun left
[20:55] *** sena_kun joined
[21:45] *** Kaiepi joined
[21:47] *** vrurg joined
[21:54] *** vrurg left
[22:03] *** vrurg joined
[22:14] *** discord-raku-bot left
[22:15] *** discord-raku-bot joined
[22:16] *** discord-raku-bot left
[22:16] *** discord-raku-bot joined
[22:54] <MasterDuke> os just updated to gcc 12 and there's a new warning

[22:54] <MasterDuke> compiling src/jit/tile.o

[22:54] <MasterDuke> src/jit/tile.c: In function ‘MVM_jit_tile_make’:

[22:54] <MasterDuke> src/jit/tile.c:51:25: warning: writing 1 byte into a region of size 0 [-Wstringop-overflow=]

[22:54] <MasterDuke>    51 |         tile->values[i] = (MVMint8)va_arg(arglist, MVMint32);

[22:54] <MasterDuke>       |                         ^

[22:54] <MasterDuke> In file included from src/moar.h:286,

[22:54] <MasterDuke>                  from src/jit/tile.c:1:

[22:54] <MasterDuke> src/jit/tile.h:21:14: note: at offset 4 into destination object ‘values’ of size 4

[22:54] <MasterDuke>    21 |     MVMuint8 values[4];

[22:54] <MasterDuke>       |              ^~~~~~

[23:19] <drakonis> sounds like gcc added some new checkers

[23:19] <drakonis> hot take: how long would it take to rewrite moarvm with rust

[23:23] <Voldenet> probably depends on whether you're willing to start today ( ¬‿¬)

[23:24] <drakonis> its wayyyy out of my depth

[23:29] <japhb> drakonis: A long time.

[23:30] <tellable6> 2022-05-10T20:29:09Z #raku <tonyo> japhb i understand how macros work, referring mostly to the trend of code generation vs just using macros (whether it's syntactic or semantic).  go's use of code generation, in practice, is abhorrent

[23:33] <drakonis> it does that because it used to lack generics

[23:33] <drakonis> it offers it now

[23:33] <drakonis> still no macros

[23:34] <Voldenet> golang does still lack proper generics

[23:34] <Voldenet> or rather the strategy of executing generics is peculiar

[23:35] <drakonis> it seems entirely in line with golang's modus operandi

[23:37] <Voldenet> and regarding rust, it probably isn't good language for this

