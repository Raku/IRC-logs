[00:00] *** JoeyeS left
[00:00] *** japhb left
[00:00] *** Nicholas left
[00:00] *** Nicholas joined
[00:05] *** japhb joined
[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[00:09] *** JoeyeS joined
[00:10] *** JoeyeS is now known as Guest4061
[00:10] *** Guest4061 is now known as JoeyeS
[00:26] *** frost joined
[00:40] *** JoeyeS left
[00:46] *** frost left
[00:46] *** frost joined
[01:34] *** JoeyeS joined
[01:35] *** JoeyeS is now known as Guest2934
[01:35] *** Guest2934 is now known as JoeyeS
[01:47] *** JoeyeS left
[01:47] *** JoeyeS joined
[01:47] *** JoeyeS is now known as Guest6552
[01:48] *** Guest6552 is now known as JoeyeS
[02:05] *** JoeyeS is now known as pshhh
[02:05] *** pshhh is now known as JoeyeS
[02:16] *** JoeyeS is now known as pshhh
[02:42] *** pshhh is now known as JoeyeS
[02:50] *** JoeyeS is now known as pshhh
[02:51] *** pshhh is now known as JoeyeS
[03:24] *** JoeyeS is now known as pshhh
[03:26] *** pshhh is now known as JoeyeS
[03:39] *** frost left
[03:44] *** JoeyeS is now known as pshhh
[03:44] *** pshhh is now known as JoeyeS
[03:52] *** JoeyeS left
[04:52] *** reportable6 left
[04:52] *** greppable6 left
[04:52] *** bisectable6 left
[04:52] *** shareable6 left
[04:52] *** committable6 left
[04:52] *** notable6 left
[04:52] *** unicodable6 left
[04:52] *** benchable6 left
[04:52] *** sourceable6 left
[04:52] *** quotable6 left
[04:52] *** releasable6 left
[04:52] *** evalable6 left
[04:52] *** coverable6 left
[04:52] *** nativecallable6 left
[04:52] *** bloatable6 left
[04:52] *** linkable6 left
[04:52] *** statisfiable6 left
[04:52] *** benchable6 joined
[04:52] *** bisectable6 joined
[04:52] *** reportable6 joined
[04:53] *** greppable6 joined
[04:53] *** notable6 joined
[04:53] *** linkable6 joined
[04:53] *** bloatable6 joined
[04:54] *** releasable6 joined
[04:54] *** shareable6 joined
[04:54] *** nativecallable6 joined
[04:54] *** unicodable6 joined
[04:55] *** quotable6 joined
[04:55] *** evalable6 joined
[04:55] *** statisfiable6 joined
[04:55] *** sourceable6 joined
[04:55] *** committable6 joined
[04:55] *** coverable6 joined
[05:43] *** AlexDaniel left
[05:43] *** uzl[m] left
[05:43] *** jjatria left
[05:43] *** jjatria joined
[05:45] *** uzl[m] joined
[05:45] *** AlexDaniel joined
[05:50] *** JoeyeS joined
[05:56] *** JoeyeS left
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:44] <Nicholas> good *, *
[06:58] *** nebuchadnezzar joined
[07:36] *** frost joined
[07:54] *** sena_kun left
[07:55] *** sena_kun joined
[08:40] *** JoeyeS_ joined
[08:56] *** JoeyeS_ left
[11:37] *** JoeyeS_ joined
[12:03] *** JoeyeS_ left
[12:04] *** Altai-man joined
[12:06] *** reportable6 left
[12:07] *** reportable6 joined
[12:16] <MasterDuke> jnthnwrthngtn: are "Make the AST compiler support return types..." and "Make us indicate slurpiness when signatures are introspected." listed here https://github.com/rakudo/rakudo/tree/rakuast/src/Raku/ast#if-you-want-to-help actually done?
[12:17] <MasterDuke> i see stuff related to return types and slurpiness in https://github.com/rakudo/rakudo/blob/rakuast/src/Raku/ast/signature.rakumod
[12:30] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/04/11/2022-15-wordling/
[12:37] <jnthnwrthngtn> MasterDuke: Those relate to the thing that compiles the stuff under src/Raku/ast into the NQP code that goes into the bootstrap
[12:37] <jnthnwrthngtn> So one can introspect the RakuAST API itself via the MOP (and thus IDEs can auto-complete on AST node types, etc.)
[12:38] <jnthnwrthngtn> MasterDuke: So, it's in https://github.com/rakudo/rakudo/blob/rakuast/tools/build/raku-ast-compiler.nqp
[13:00] <nine> After you've written your first one, compilers seem to be the solution for every problem
[13:01] <MasterDuke> ah
[13:03] <jnthnwrthngtn> Why write code when you could instead write code that writes the code? :)
[13:05] <Nicholas> there's no problem that can't be made better with anohter level of abstraction
[13:25] *** frost left
[13:54] *** Altai-man left
[13:54] *** Altai-man joined
[14:17] *** childlikempress joined
[14:18] *** moon-child left
[14:32] *** JoeyeS_ joined
[14:54] *** JoeyeS__ joined
[14:57] *** JoeyeS_ left
[15:24] *** JoeyeS__ left
[15:57] *** JoeyeS_ joined
[15:57] *** JoeyeS_ left
[15:57] *** JoeyeS_ joined
[16:13] *** sena_kun_ joined
[16:13] *** Altai-man left
[16:13] *** dogbert17 joined
[16:15] *** dogbert11 left
[16:20] *** JoeyeS_ left
[16:40] *** JoeyeS_ joined
[16:51] *** JoeyeS_ left
[17:14] *** sena_kun_ left
[17:35] *** RakuIRCLogger__ joined
[17:35] *** TempIRCLogger left
[17:35] *** Geth left
[17:36] *** lizmat_ joined
[17:36] *** RakuIRCLogger left
[17:37] *** lizmat left
[17:37] *** lizmat_ left
[17:38] *** lizmat joined
[17:38] *** RakuIRCLogger__ left
[18:05] *** discord-raku-bot left
[18:06] *** discord-raku-bot joined
[18:06] *** reportable6 left
[18:08] *** reportable6 joined
[19:14] *** discord-raku-bot left
[19:15] *** discord-raku-bot joined
[19:47] *** childlikempress is now known as moon-child
[21:28] <jnthnwrthngtn> Today's little RakuAST bit from me netted some new passes. Up to 381 fully passing now.
[21:36] <MasterDuke> am i correct in thinking that we don't have any built-in way of directly getting the parts (significand and exponent) of a num?
[21:43] <jnthnwrthngtn> I'm not aware of anything more than writing the num into a Buf with `write-num64` and then pulling the appropriate bits out.
[21:44] <jnthnwrthngtn> Probably would need to account for denormals too
[21:48] <MasterDuke> i was thinking about https://www.reddit.com/r/rakulang/comments/u0fsg6/converting_num_to_rational_bug_of_feature/ and wondering if there was any additional smarts that could be added to Num's Rat method
[21:49] <MasterDuke> but i haven't been able to come up with anything. since at the point of calling .Rat, we just have a plain num/float, not the literal form with the parts nicely broken out
[22:09] *** linkable6 left
[22:09] <SmokeMachine> Do we already have a way of creating new compiler custom passes using RakuAST?
[22:11] *** linkable6 joined
[22:20] <lizmat> SmokeMachine: to my understanding: not yet
[22:21] <SmokeMachine> Thanks lizmat
[23:08] <lizmat> MasterDuke: looking forward to further review
[23:08] <lizmat> calling it a day now
[23:13] <MasterDuke> maybe the slowdown was using the `if foo() -> $bar {` construct, which is slower than explicitly doing the assignment before the `if`
[23:15] <MasterDuke> nqp: my %h := nqp::hash("a", 1, "n", 2, "f", 3, "v", 4, "g", 5, "e", 6, "k", 7, "o", 8, "c", 9, "x", 10); my $a; my int $i := 0; my int $s := nqp::time; while $i++ < 100_000_000 { if nqp::elems(%h) -> $e { $a := $e + 1 }; }; say(nqp::div_n(nqp::time - $s, 1000000000e0)); say($a)
[23:15] <camelia> nqp-moarvm: OUTPUT: «1.449024658␤11␤»
[23:16] <MasterDuke> nqp: my %h := nqp::hash("a", 1, "n", 2, "f", 3, "v", 4, "g", 5, "e", 6, "k", 7, "o", 8, "c", 9, "x", 10); my $a; my int $i := 0; my int $s := nqp::time; while $i++ < 100_000_000 { my $e := nqp::elems(%h); if $e { $a := $e + 1 }; }; say(nqp::div_n(nqp::time - $s, 1000000000e0)); say($a)
[23:16] <camelia> nqp-moarvm: OUTPUT: «0.972030957␤11␤»
