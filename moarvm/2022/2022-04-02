[00:08] *** reportable6 left
[00:09] *** reportable6 joined
[00:21] *** Kaiepi left
[00:47] *** Kaiepi joined
[01:11] *** frost joined
[02:27] *** sourceable6 left
[02:27] *** greppable6 left
[02:27] *** committable6 left
[02:27] *** unicodable6 left
[02:27] *** benchable6 left
[02:27] *** bisectable6 left
[02:27] *** releasable6 left
[02:27] *** statisfiable6 left
[02:27] *** reportable6 left
[02:27] *** quotable6 left
[02:27] *** linkable6 left
[02:27] *** coverable6 left
[02:27] *** evalable6 left
[02:27] *** notable6 left
[02:27] *** bloatable6 left
[02:27] *** shareable6 left
[02:27] *** nativecallable6 left
[02:27] *** releasable6 joined
[02:27] *** benchable6 joined
[02:27] *** nativecallable6 joined
[02:27] *** quotable6 joined
[02:28] *** evalable6 joined
[02:28] *** greppable6 joined
[02:28] *** sourceable6 joined
[02:28] *** statisfiable6 joined
[02:28] *** bisectable6 joined
[02:28] *** coverable6 joined
[02:28] *** notable6 joined
[02:28] *** reportable6 joined
[02:29] *** linkable6 joined
[02:29] *** committable6 joined
[02:30] *** shareable6 joined
[02:30] *** bloatable6 joined
[02:30] *** unicodable6 joined
[03:30] *** evalable6 left
[03:30] *** linkable6 left
[03:32] *** linkable6 joined
[03:32] *** evalable6 joined
[05:29] *** linkable6 left
[05:29] *** evalable6 left
[05:30] *** linkable6 joined
[05:31] *** evalable6 joined
[06:08] *** reportable6 left
[06:08] *** reportable6 joined
[07:08] *** benchable6 left
[07:08] *** quotable6 left
[07:08] *** releasable6 left
[07:08] *** nativecallable6 left
[07:08] *** shareable6 left
[07:08] *** reportable6 left
[07:08] *** evalable6 left
[07:08] *** bloatable6 left
[07:08] *** greppable6 left
[07:08] *** linkable6 left
[07:08] *** sourceable6 left
[07:08] *** bisectable6 left
[07:08] *** unicodable6 left
[07:08] *** coverable6 left
[07:08] *** committable6 left
[07:09] *** greppable6 joined
[07:09] *** linkable6 joined
[07:09] *** shareable6 joined
[07:10] *** bisectable6 joined
[07:10] *** bloatable6 joined
[07:10] *** reportable6 joined
[07:10] *** benchable6 joined
[07:11] *** sourceable6 joined
[07:11] *** unicodable6 joined
[07:11] *** nativecallable6 joined
[07:11] *** committable6 joined
[07:11] *** quotable6 joined
[07:11] *** coverable6 joined
[07:11] *** releasable6 joined
[07:12] *** evalable6 joined
[08:18] *** committable6 left
[08:18] *** evalable6 left
[08:18] *** coverable6 left
[08:18] *** nativecallable6 left
[08:18] *** benchable6 left
[08:18] *** releasable6 left
[08:18] *** quotable6 left
[08:18] *** unicodable6 left
[08:18] *** sourceable6 left
[08:18] *** bisectable6 left
[08:18] *** statisfiable6 left
[08:18] *** bloatable6 left
[08:18] *** linkable6 left
[08:18] *** notable6 left
[08:18] *** greppable6 left
[08:18] *** reportable6 left
[08:18] *** shareable6 left
[08:19] *** benchable6 joined
[08:19] *** greppable6 joined
[08:19] *** shareable6 joined
[08:19] *** quotable6 joined
[08:19] *** notable6 joined
[08:20] *** sourceable6 joined
[08:20] *** committable6 joined
[08:20] *** evalable6 joined
[08:20] *** linkable6 joined
[08:20] *** statisfiable6 joined
[08:20] *** nativecallable6 joined
[08:20] *** bisectable6 joined
[08:21] *** coverable6 joined
[08:21] *** unicodable6 joined
[08:21] *** releasable6 joined
[08:21] *** reportable6 joined
[08:22] *** bloatable6 joined
[08:35] *** linkable6 left
[08:38] *** linkable6 joined
[10:00] *** linkable6 left
[10:00] *** evalable6 left
[10:01] *** linkable6 joined
[10:01] *** evalable6 joined
[10:30] *** frost left
[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:34] <nine> jnthnwrthngtn: what's the plan here? https://github.com/rakudo/rakudo/blob/rakuast/src/Raku/Actions.nqp#L1635

[12:35] <nine> I need that to make multi part variable names like $PROCESS::OUT work.

[12:43] <jnthnwrthngtn> nine: Why does that need colonpairs? But I think the way will be to give RakuAST::Name an attribute that is a list of RakuAST::ColonPair (not entirely unlike the approach taken in RakuAST::QuotedMatchConstruct)

[12:44] * jnthnwrthngtn is picking of =finish support, to have an easy thing to get done in a spare moment

[12:44] <jnthnwrthngtn> *off

[12:48] <nine> Oh, I totally missed that there's a RakuAST::Name and that this already is made from a list of parts. So it's just RakuAST::Var::Lexical that will want that destructured name in addition or instead of the stringified name

[12:57] <nine> Is $PROCESS::OUT even a lexical? Isn't that more something different like a package variable?

[12:58] <jnthnwrthngtn> I think we consider PROCESS a kind of pseudo-package

[12:59] <jnthnwrthngtn> I didn't do anything towards handling those yet

[13:00] <jnthnwrthngtn> (And didn't think very deeply about it, beyond that it'd be nice to compile some of the simple cases into things that don't actually create a PseudoStash)

[13:00] <nine> Yes, Perl6::World handles PROCESS as a pseudo package. There's a lookup hash for them

[13:00] <jnthnwrthngtn> (Although PROCESS ain't one of those)

[13:01] <nine> Apart from the pseudo special case, would "package variable" be the right term and would that imply the need for a RakuAST::Var::Package?

[13:01] <lizmat> in my experience, PROCESS:: is initially a BOOTHash, and then somehow turns into a Stash

[13:02] <lizmat> recently had to do a fix for that

[13:03] <jnthnwrthngtn> I think even the pseudo special case would be a RakuAST::Var::Package that contains a RakuAST::Var::Name

[13:03] <lizmat> oops, no, misremembered: it was GLOBAL.WHO

[13:04] <lizmat> c08d2ee9f855e1dc91722191f9f6d727d8c7d3c3

[13:04] <jnthnwrthngtn> oops, sorry

[13:04] <jnthnwrthngtn> I think even the pseudo special case would be a RakuAST::Var::Package that contains a RakuAST::Name

[13:04] <jnthnwrthngtn> And that an amount of the pseudo-package handling has to go into RakuAST::Name. Especially because things like `class GLOBAL::Foo { }` are possible, so it's not just about variables.

[13:05] <nine> Ok, thanks! I'll see how far I get.

[13:09] <jnthnwrthngtn> And of course I still don't pass the `=finish` tests because...they use heredocs!

[13:09] <jnthnwrthngtn> Happy hacking, I'm afk for a bit

[13:45] *** evalable6 left
[13:45] *** linkable6 left
[13:47] *** linkable6 joined
[13:48] *** evalable6 joined
[15:03] *** discord-raku-bot left
[15:04] *** discord-raku-bot joined
[15:43] *** sena_kun left
[15:44] *** sena_kun joined
[16:30] *** sena_kun left
[16:31] *** sena_kun joined
[16:54] *** sena_kun left
[16:55] *** sena_kun joined
[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[18:29] *** unmatched-paren joined
[18:30] <unmatched-paren> hi! :) i'm trying to build moarvm 2022.03 from source, but there seems to be an issue with the cmp fork it uses as a submodule...

[18:30] <unmatched-paren> when i run the tests, it invokes *Sanitizers left, right, and centre

[18:31] <unmatched-paren> if i patch out the problematic tests, i get loads of memory leaks

[18:31] <nine> unmatched-paren: you mean cmp's tests?

[18:31] <unmatched-paren> yeah

[18:31] <nine> I think those are not usually run during our build

[18:32] <unmatched-paren> the other thing: the makefile is configured to use -Werror, which causes GCC to complain about casts from `size_t` to `int`

[18:32] <unmatched-paren> hm, okay

[18:33] <unmatched-paren> i'm packaging the latest version of MoarVM, NQP, and Rakudo in GNU Guix <https://guix.gnu.org> as i'd like to learn Raku but the packages are quite out of date, and guix tries not to vendor things, but if it's necessary for it to work then it's fine

[18:33] <unmatched-paren> thanks, nine

[18:43] <unmatched-paren> it's compiling now \o/

[18:43] <unmatched-paren> hah, just as i said that the build failed :P

[18:52] <unmatched-paren> successfully built /gnu/store/8x0r4wxwpp6nxffizd2py0gy49bfj969-moarvm-2022.03.drv

[18:52] <unmatched-paren> ok, it works! nine: thanks again!

[18:52] *** unmatched-paren left
[18:59] <nine> cool :)

[19:03] *** sena_kun left
[19:04] *** sena_kun joined
[19:10] <[Coke]> o/

[20:32] *** evalable6 left
[20:32] *** linkable6 left
[20:33] *** linkable6 joined
[20:34] *** [Coke]_ joined
[20:35] *** evalable6 joined
[20:35] *** [Coke] left
[21:04] *** vrurg_ is now known as vrurg

[21:28] *** [Coke]_ is now known as [Coke]

