[00:06] *** reportable6 left
[00:09] *** reportable6 joined
[02:51] *** Kaipei left
[03:16] *** frost joined
[04:10] *** Kaiepi joined
[05:35] *** bloatable6 left
[05:35] *** nativecallable6 left
[05:35] *** releasable6 left
[05:35] *** notable6 left
[05:35] *** sourceable6 left
[05:35] *** unicodable6 left
[05:35] *** benchable6 left
[05:35] *** reportable6 left
[05:35] *** evalable6 left
[05:35] *** quotable6 left
[05:35] *** linkable6 left
[05:35] *** statisfiable6 left
[05:35] *** shareable6 left
[05:35] *** tellable6 left
[05:35] *** bisectable6 left
[05:35] *** coverable6 left
[05:35] *** committable6 left
[05:35] *** greppable6 left
[05:36] *** unicodable6 joined
[05:36] *** evalable6 joined
[05:36] *** releasable6 joined
[05:36] *** benchable6 joined
[05:36] *** reportable6 joined
[05:37] *** sourceable6 joined
[05:37] *** linkable6 joined
[05:37] *** nativecallable6 joined
[05:37] *** shareable6 joined
[05:37] *** coverable6 joined
[05:37] *** tellable6 joined
[05:38] *** committable6 joined
[05:38] *** bloatable6 joined
[05:38] *** bisectable6 joined
[05:38] *** notable6 joined
[05:38] *** quotable6 joined
[05:39] *** greppable6 joined
[05:39] *** statisfiable6 joined
[06:02] <Nicholas> [* GOOD *]

[06:06] *** reportable6 left
[06:08] *** reportable6 joined
[08:21] *** sena_kun joined
[09:26] <jnthnwrthngtn> moarning o/

[09:30] <Nicholas> \o

[10:08] *** evalable6 left
[10:08] *** linkable6 left
[10:08] *** evalable6 joined
[10:11] *** linkable6 joined
[11:34] *** evalable6 left
[11:34] *** linkable6 left
[11:35] *** Altai-man joined
[11:35] *** evalable6 joined
[11:36] *** linkable6 joined
[11:38] *** sena_kun left
[12:08] *** reportable6 left
[12:09] *** reportable6 joined
[12:42] <japhb> o/

[12:45] <nine> Signature declarations a bit of a tricky beast. On the one hand we get quite a bit already for free (like declarations) by utilizing RakuAST::Signature. On the other hand it's hard to find a good place for creating containers for those parameter targets.

[12:52] <jnthnwrthngtn> nine: I already have local work on those

[12:53] <jnthnwrthngtn> nine: But it's another of the things that triggered my "need to figure out the timing issues" detour

[12:53] <jnthnwrthngtn> https://gist.github.com/jnthn/420e93cd4ca074da0b620992c10fb361 is the notes so far, fwiw

[12:55] <nine> Aaaah...that background explains why timing is such a big issue. Didn't find it that difficult so far and most things found a reasonable place. But of course I totally ignored that we want to add macros and custom compiler passes :)

[12:56] <nine> In https://github.com/rakudo/rakudo/commit/f5cfaa0bca4b58c3ccf7accaf43714cb61fdf1c5 I figured that an optimization pass would want to have the generated block for where expressions already in place, so I generate them at BEGIN time

[12:59] <jnthnwrthngtn> There's some things I'm struggling to decide where go, alas. Like the implicit block semantics.

[13:08] <nine> Like those where blocks I mentioned?

[13:10] *** Kaiepi left
[13:11] <jnthnwrthngtn> No, the thing that makes the block of a `with` get declared with an implicit topic parameter, or the block of a `start` having a fresh $/ and $!

[13:11] <jnthnwrthngtn> Because they're not really about the block, but about its "owner"

[13:11] *** Kaiepi joined
[13:13] <nine> Ah, part of the "Some nodes need to know about surrounding context in order to compile" problem

[13:16] <nine> .oO(It would be soo useful to have a $!parent in each node, and sooo lead to bad design)

[13:20] <nine> jnthnwrthngtn: wanna share what you have on signature declarations?

[13:27] <jnthnwrthngtn> nine: Wasn't much; branch stub-var-sig-decl

[13:31] <nine> -            my \type = ::($.typename);

[13:31] <nine> +            my \type = try ::($.typename);

[13:32] <nine> Aaaah...yes, that one :D

[13:32] <nine> Ok, looks like my RakuAST::VarDeclaration::Signature is already way more advanced. And I picked the exact same name :)

[13:39] <jnthnwrthngtn> Well, then continue with yours I guess :)

[13:44] * nine thinks it's about time to factor out the code for creating containers

[13:45] <jnthnwrthngtn> Yeah, I'd figured signature vars would imply that, but was undecided where it goes :)

[13:46] <nine> RakuAST::ContainerCreator?

[13:46] <nine> method IMPL-CONTAINER can easily go into a role. It only expects .sigil and .twigil on self

[13:50] <jnthnwrthngtn> Hm, not also type?

[13:51] <nine> $of is supplied by the caller

[13:52] <nine> Plan is to add a $!container-type to RakuAST::ParameterTarget::Var, set by RakuAST::VarDeclaration::Simple and used to determine whether to create a contvar and if with what container type

[13:52] <nine> s/

[13:52] <nine> s/RakuAST::VarDeclaration::Simple/RakuAST::VarDeclaration::Signature/

[14:18] *** frost left
[14:34] <nine> nine@sphinx:~/rakudo (rakuast_wip *<>)> ./rakudo-m -e 'my ($a, $b) = 1, 2; say $b;'

[14:34] <nine> 2

[14:34] <nine> nine@sphinx:~/rakudo (rakuast_wip *<>)> ./rakudo-m -e 'my Int ($a, $b) = 1, 2; say $b;'

[14:34] <nine> 2

[14:34] <nine> nine@sphinx:~/rakudo (rakuast_wip *<>)> ./rakudo-m -e 'my Str ($a, $b) = 1, 2; say $b;'

[14:34] <nine> Type check failed in assignment to $a; expected Str but got Int (1)

[14:44] <japhb> nine++

[15:42] *** Techcable_ joined
[15:45] *** rypervenche_ joined
[15:45] *** jnthn joined
[15:49] *** AlexDaniel left
[15:49] *** uzl[m] left
[15:49] *** Techcable left
[15:49] *** rypervenche left
[15:50] *** jnthnwrthngtn left
[15:50] *** Techcable_ is now known as Techcable

[15:58] *** uzl[m] joined
[16:00] *** AlexDaniel joined
[16:53] *** Kaiepi left
[16:54] *** Kaiepi joined
[18:08] *** reportable6 left
[18:10] *** reportable6 joined
[18:19] <nine> m: class Foo { has Int ($.a, $.b) is default(1); }; say Foo.new.b # Implementing a compiler for a language teaches you quite a lot about that language...

[18:19] <camelia> rakudo-moar 530e17848: OUTPUT: «1␤»

[18:48] *** MasterDuke left
[18:59] <nine> And another 10 spec test files unlocked. Now 414 passing

[19:01] *** MasterDuke joined
[19:02] <nine> Now there's only 1 rakuast_wip commit left to merge, before the rakuast branch can compile a (somewhat) usable Test.rakumod. It brings a bit of support for nqp ops

[19:05] <nine> The hardest part of that is that for nqp ops literals need to be unboxed, i.e. need different code gen for those.

[19:05] <nine> Again a "Some nodes need to know about surrounding context in order to compile" problem

[19:28] *** Kaiepi left
[19:51] *** Kaiepi joined
[19:59] <japhb> nine: ISTR that's done in the current compiler by having literal nodes know both their boxed and unboxed forms, and the parent gets to pick ...?

[20:31] *** Altai-man left
[20:40] *** sena_kun joined
[21:42] <MasterDuke> interesting. adding that pretty simple fast path in MVM_string_utf8_encode_substr takes `my $a = "when.opt".IO.slurp; my $b; my $s = now; $b = $a.encode for ^100_000; say now - $s; say $b.decode.chars` from 4.2s down to 2.0s

[21:44] <MasterDuke> where 'when.opt' is 18kb, 350 lines, and 18101 chars

[21:51] <MasterDuke> `MVM_SPESH_BLOCKING=1 ./rakudo-m -e 'use nqp; my $a = "src/core.c/Int.pm6".IO.slurp; my $b; my $s = now; $b := nqp::sha1($a) for ^10_000; say now - $s; say $b' now is ~0.38s (~0.58s on master, ~0.22s with the binarysha1 op)

[21:54] <MasterDuke> hm. only gets hit 1k times when compiling CORE.c

[21:58] <MasterDuke> right, because most of the strings used then are strands

[21:59] <japhb> Good progress, definitely

[21:59] <MasterDuke> trying to remember what the other benchmarks i ran where i saw MVM_string_utf8_encode_substr a lot...

[22:03] <MasterDuke> hm. i wonder if there's some heuristic where it would make sense not to make strands when concatenating a string and a newline?

[22:17] *** discord-raku-bot left
[22:18] *** discord-raku-bot joined
