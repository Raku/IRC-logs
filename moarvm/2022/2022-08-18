[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[00:16] *** kjp left
[00:16] *** pamplemoussecach joined
[00:23] *** kjp joined
[00:49] *** pamplemoussecach left
[00:54] *** pamplemoussecach joined
[01:05] *** pamplemoussecach left
[02:05] *** notable6 left
[02:05] *** bisectable6 left
[02:05] *** committable6 left
[02:05] *** coverable6 left
[02:05] *** linkable6 left
[02:05] *** quotable6 left
[02:05] *** statisfiable6 left
[02:05] *** bloatable6 left
[02:05] *** tellable6 left
[02:05] *** reportable6 left
[02:05] *** squashable6 left
[02:05] *** benchable6 left
[02:05] *** unicodable6 left
[02:05] *** greppable6 left
[02:05] *** sourceable6 left
[02:05] *** nativecallable6 left
[02:05] *** evalable6 left
[02:05] *** shareable6 left
[02:05] *** releasable6 left
[02:05] *** tellable6 joined
[02:06] *** shareable6 joined
[02:06] *** statisfiable6 joined
[02:06] *** evalable6 joined
[02:06] *** greppable6 joined
[02:06] *** reportable6 joined
[02:06] *** committable6 joined
[02:07] *** benchable6 joined
[02:07] *** quotable6 joined
[02:07] *** squashable6 joined
[02:07] *** sourceable6 joined
[02:07] *** releasable6 joined
[02:07] *** nativecallable6 joined
[02:07] *** notable6 joined
[02:07] *** coverable6 joined
[02:08] *** bloatable6 joined
[02:08] *** unicodable6 joined
[02:08] *** bisectable6 joined
[02:08] *** linkable6 joined
[02:52] *** pamplemoussecach joined
[02:52] *** pamplemoussecach left
[04:19] *** coverable6 left
[04:19] *** bloatable6 left
[04:19] *** notable6 left
[04:19] *** unicodable6 left
[04:19] *** greppable6 left
[04:19] *** nativecallable6 left
[04:19] *** benchable6 left
[04:19] *** linkable6 left
[04:19] *** reportable6 left
[04:19] *** quotable6 left
[04:19] *** tellable6 left
[04:19] *** committable6 left
[04:19] *** bisectable6 left
[04:19] *** statisfiable6 left
[04:19] *** releasable6 left
[04:19] *** sourceable6 left
[04:19] *** squashable6 left
[04:19] *** evalable6 left
[04:19] *** shareable6 left
[04:19] *** shareable6 joined
[04:20] *** sourceable6 joined
[04:20] *** committable6 joined
[04:20] *** unicodable6 joined
[04:20] *** nativecallable6 joined
[04:20] *** squashable6 joined
[04:20] *** notable6 joined
[04:20] *** reportable6 joined
[04:21] *** evalable6 joined
[04:21] *** tellable6 joined
[04:21] *** greppable6 joined
[04:21] *** linkable6 joined
[04:21] *** quotable6 joined
[04:21] *** benchable6 joined
[04:21] *** bisectable6 joined
[04:22] *** bloatable6 joined
[04:22] *** coverable6 joined
[04:22] *** releasable6 joined
[04:22] *** statisfiable6 joined
[04:29] *** vrurg_ left
[04:30] *** vrurg joined
[06:06] *** reportable6 left
[06:07] *** reportable6 joined
[06:14] <Nicholas> good *, *

[09:06] *** notable6 left
[09:06] *** benchable6 left
[09:06] *** quotable6 left
[09:06] *** bisectable6 left
[09:06] *** bloatable6 left
[09:06] *** unicodable6 left
[09:06] *** committable6 left
[09:06] *** sourceable6 left
[09:06] *** tellable6 left
[09:06] *** linkable6 left
[09:06] *** reportable6 left
[09:06] *** squashable6 left
[09:06] *** evalable6 left
[09:06] *** coverable6 left
[09:06] *** nativecallable6 left
[09:06] *** shareable6 left
[09:06] *** greppable6 left
[09:06] *** statisfiable6 left
[09:06] *** releasable6 left
[09:06] *** committable6 joined
[09:06] *** releasable6 joined
[09:06] *** sourceable6 joined
[09:06] *** shareable6 joined
[09:07] *** tellable6 joined
[09:07] *** statisfiable6 joined
[09:07] *** benchable6 joined
[09:08] *** squashable6 joined
[09:08] *** unicodable6 joined
[09:08] *** notable6 joined
[09:08] *** evalable6 joined
[09:08] *** nativecallable6 joined
[09:08] *** coverable6 joined
[09:08] *** quotable6 joined
[09:09] *** greppable6 joined
[09:09] *** bloatable6 joined
[09:09] *** reportable6 joined
[09:09] *** bisectable6 joined
[09:09] *** linkable6 joined
[09:23] *** sena_kun joined
[10:23] *** squashable6 left
[10:23] *** benchable6 left
[10:23] *** coverable6 left
[10:23] *** bloatable6 left
[10:23] *** tellable6 left
[10:23] *** reportable6 left
[10:23] *** bisectable6 left
[10:23] *** notable6 left
[10:23] *** shareable6 left
[10:23] *** unicodable6 left
[10:23] *** evalable6 left
[10:23] *** committable6 left
[10:23] *** nativecallable6 left
[10:23] *** statisfiable6 left
[10:23] *** linkable6 left
[10:23] *** greppable6 left
[10:23] *** quotable6 left
[10:23] *** sourceable6 left
[10:23] *** releasable6 left
[10:23] *** evalable6 joined
[10:24] *** coverable6 joined
[10:24] *** notable6 joined
[10:24] *** sourceable6 joined
[10:24] *** squashable6 joined
[10:25] *** committable6 joined
[10:25] *** benchable6 joined
[10:25] *** greppable6 joined
[10:25] *** unicodable6 joined
[10:25] *** nativecallable6 joined
[10:25] *** shareable6 joined
[10:25] *** bloatable6 joined
[10:26] *** quotable6 joined
[10:26] *** bisectable6 joined
[10:26] *** statisfiable6 joined
[10:26] *** tellable6 joined
[10:26] *** releasable6 joined
[10:26] *** reportable6 joined
[10:26] *** linkable6 joined
[11:26] *** coverable6 left
[11:26] *** bisectable6 left
[11:26] *** nativecallable6 left
[11:26] *** shareable6 left
[11:26] *** committable6 left
[11:26] *** notable6 left
[11:26] *** bloatable6 left
[11:26] *** sourceable6 left
[11:26] *** quotable6 left
[11:26] *** tellable6 left
[11:26] *** linkable6 left
[11:26] *** evalable6 left
[11:26] *** squashable6 left
[11:26] *** greppable6 left
[11:26] *** benchable6 left
[11:26] *** statisfiable6 left
[11:26] *** reportable6 left
[11:26] *** unicodable6 left
[11:26] *** releasable6 left
[11:26] *** linkable6 joined
[11:27] *** benchable6 joined
[11:27] *** squashable6 joined
[11:27] *** nativecallable6 joined
[11:27] *** bisectable6 joined
[11:27] *** shareable6 joined
[11:28] *** committable6 joined
[11:28] *** quotable6 joined
[11:28] *** coverable6 joined
[11:28] *** bloatable6 joined
[11:28] *** greppable6 joined
[11:28] *** tellable6 joined
[11:28] *** unicodable6 joined
[11:29] *** statisfiable6 joined
[11:29] *** notable6 joined
[11:29] *** sourceable6 joined
[11:29] *** evalable6 joined
[11:29] *** reportable6 joined
[11:29] *** releasable6 joined
[12:07] *** reportable6 left
[12:10] *** reportable6 joined
[13:27] *** pamplemoussecach joined
[13:43] *** pamplemoussecach left
[14:53] <vrurg> I had no idea, how unsafe our unicode ops are...

[15:04] <japhb> Unsafe in what way?

[16:17] *** linkable6 left
[16:17] *** evalable6 left
[16:18] *** evalable6 joined
[16:19] *** linkable6 joined
[16:25] *** discord-raku-bot left
[16:26] *** discord-raku-bot joined
[17:52] *** pamplemoussecach joined
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[18:09] *** pamplemoussecach left
[18:11] *** pamplemoussecach joined
[18:12] *** pamplemoussecach left
[18:14] *** pamplemoussecach joined
[18:18] *** pamplemoussecach left
[18:30] *** squashable6 left
[18:31] *** squashable6 joined
[19:43] <vrurg> japhb: hash is used inside

[19:44] <vrurg> https://github.com/MoarVM/MoarVM/issues/1717

[20:10] *** sena_kun left
[20:11] *** sena_kun joined
[20:25] <timo> so we may have to lock against simultaneous attempts to create the property_codes_by_seq_names and property_codes_by_names_aliases hashes?

[20:27] <timo> ah, you also pointed out a spot in unicodey.pm6 where we do bindkey something into the $name2pref hash?

[20:28] <timo> not sure if that hash is tiny or big

[20:29] *** sena_kun left
[20:42] <timo> brilliant, i got a crash reproduced

[20:43] <timo> takes a lot of attempts

[20:58] <timo> now the setting up of the property codes lookup hashes is protected by a mutex

[21:00] <Geth> ¦ MoarVM: 9bc1beed70 | (Timo Paulssen)++ | 3 files

[21:00] <Geth> ¦ MoarVM: protect the two property code lookup hashes being set up with a mutex

[21:00] <Geth> ¦ MoarVM: review: https://github.com/MoarVM/MoarVM/commit/9bc1beed70

[21:00] <timo> vrurg: please grab this patch and see if your application still manages to crash

[21:00] <vrurg> timo: Oh, I was about to complain that it is to be fixed at MoarVM. :)

[21:01] <vrurg> The testing might take a week or two. Normally it fails like once in 3 days or so. 

[21:01] <timo> yeah

[21:01] <timo> you can't up the load on this program?

[21:01] <vrurg> Hence negative proof is better be ~3 times longer period.

[21:01] <timo> if the problem is what i am fixing, it'd help to restart the program after it has successfully handled a few requests

[21:02] <vrurg> Nah, it is VERY specific and a private property of my employee. 

[21:03] <vrurg> I'm stupid. The tools is cron-started. I can just change the schedule.

[21:04] <timo> :D

[21:04] <timo> you can run it in a tigh loop too perhaps

[21:04] <timo> i'll give you my reproducer script too

[21:05] <timo> use nqp; my $lmao = Promise.in(0.01); my $o; await do for ^1000 { start { await $lmao; $o = nqp::unipropcode(<ASCII ASCIIHexDigit AboveLeft Braille C CB changes_when_lowercased 3-Heth 3-Beth>.pick) } };

[21:05] <timo> just `rakudo -I. -Mdo_it -e ''` in a loop until it exits with nonzero

[21:07] <timo> even though i made it do a lot less sleeping, it still takes very very long to crash sometimes

[21:07] <timo> now it was two in very short succession :D

[21:07] <timo> MoarVM oops: insert conflict, changeswhencasefolded is 1649993372, 38 != 96

[21:07] <timo> MoarVM oops: insert conflict, prepended_concatenation_mark is 755562829, 92 != 6

[21:15] <vrurg> It's so crazy day, I barely manage to share myself between tasks... Gonna try your script.

[21:16] <timo> that's okay!

[21:16] <timo> ith the patch i've run it for a couple of minutes and it's entirely too warm to heat up my cpu to 75degC for any extended amount of time uggghhh :)

[21:16] <timo> without the "mvm oops" of course

[21:25] <vrurg> Segfault for the first run on unpatched moar. Trying the second one.

[21:28] <timo> oh wow segfault? not even a moarvm oops but a full blown segfault?

[21:31] <vrurg> Right.

[21:31] <vrurg> But the second run – it just runs so far.

[21:32] <timo> do you happen to have a backtrace from that core dump or something? this is for your production script rather than my reproduction script?

[21:33] <vrurg> There is no debug info. But the top frame is in MVM_uni_hash_insert

[21:33] <vrurg> Invoked from MVM_unicode_name_to_property_code

[21:37] <timo> good to know, i'll have a look that way

[21:37] <timo> ah yes, that's one of the functions i've put a lock into

[21:40] <lizmat> timo: the bindkey in unicodey is inside a protect block, so shouldn't be a race condition ?

[21:40] <timo> i haven't looked at that yet :) :)

[21:41] <timo> you mean the only way to ever get this crash is by going past unicodey.pm6 and straight to nqp code?

[21:41] <vrurg> timo: don't forget, I'm still testing the unpatched version. Just wanna make sure it does fail for me with your test.

[21:41] <lizmat> https://github.com/rakudo/rakudo/blob/master/src/core.c/unicodey.pm6#L155

[21:42] <timo> aha

[21:42] <timo> but the problem is the call to nqp::unipropcode

[21:42] <vrurg> Unicode ops are used across NQP and Rakudo. The only valid protection is in their bodies.

[21:42] <timo> that's why you can still get the race and explosion

[21:42] <lizmat> fair enough, but then a protect block here wouldn't help either, so indeed a MoarVM solution is needed

[21:43] <timo> ayup, the very one i've implemented i would dare claim :)

[21:43] <vrurg> lizmat: But the protect is still needed there because $name2pref is getting updated.

[21:44] <timo> i'm not sure what we are updating name2pref for exactly

[21:44] <lizmat> yeah, that's rakudo land

[21:48] <vrurg> A little improvement to the test made it fail more reliable. Two insert conflicts in a row – I'm convinced! ;) Moving on to trying the patch.

[21:53] <vrurg> *reliably

[22:09] *** linkable6 left
[22:09] *** evalable6 left
[22:11] *** evalable6 joined
[22:11] *** linkable6 joined
[22:12] <vrurg> 1900 repetitions of the patched version against as maximum as 72 for the unpatched one. I think the computer simulation proves the theory. ;)

[22:12] <timo> that's a pretty good ratio of time-of-implementation to impact-of-fix i think

[22:12] <vrurg> Not to mention that normally it fails within 30-40 repetitions.

[22:12] <vrurg> timo: Absolutely!

[22:13] <timo> thanks for bringing it up because i am not good at keeping up with our bug trackers

[22:14] <vrurg> With this respect I always recall my three weeks spent on lost closures for precompiled code in BEGIN. Only to come up with a single-line patch. :)

[22:14] <timo> sadly, it's not a "life hack" to just point me at every bug now because it just randomly happened that i saw the problem so quickly here (actually the golf to nqp::unipropcode was 99% of the work necessary)

[22:14] <timo> phew

[22:14] <timo> that is a rough one

[22:15] <vrurg> This is a kind of teamwork I like. :) Thanks a lot, those `$ is not a currency sign` errors I am receiving once in a while are so annoying.

[22:16] <vrurg> I wouldn't be surprised is another problem with `symbol not found in a module` errors would also be gone because that could be a memory corruption as a side effect.

[22:16] <timo> aye, very unfortunate error reporting there

[22:18] <vrurg> Anyway, thanks again! I'm going to re-focus on other tasks.

[22:19] <timo> hey how much do you need to change in vikna to benefit from the resumption improvements we got from new-disp? do you have the opportunity to work on vikna more this year?

[22:23] <timo> i don't actually have a real strong use case / need for vikna right now

[22:24] <timo> it's just kinda cool that vikna more or less forced this whole piece of work to get started

[22:52] <vrurg> timo: No spare time for the project, unfortunately. 

[22:54] <vrurg> I think it can be adapted for all the latest changes. But the biggest matter is to make use of C for canvas.

[22:55] <japhb> vrurg: What are you using now?

[22:56] <vrurg> Raku. :) 

[22:56] <vrurg> A lot of nqp::.

[22:56] <japhb> Vikna is terminal-based, yes?

[22:56] <vrurg> Right.

[22:56] <japhb> Did you do it bespoke, or base it on Terminal::Print?

[22:57] <vrurg> Up to some extent. Only the very basic functionality like getting the right ANSI codes.

[22:57] <vrurg> Ah, and keyboard input.

[23:00] <japhb> Interesting.  Terminal::Print's compositing has had a fair amount of (pure Raku) tuning, so it's definitely capable of animation, though I remember something about Vikna's default compositing being more complex than Terminal::Print does out of the box.

[23:01] <vrurg> japhb: consider overlapping windows, Z-order.

[23:03] <japhb> Nod.  I'm adding Z order in Terminal::Widgets (which is based on Terminal::Print)

[23:04] <vrurg> What I haven't manage to done properly is synchronous drawing of frames and their client windows.

[23:04] <vrurg> What about background scrolling/drawing of planes?

[23:07] <japhb> Terminal::Print has a group of modules based around Terminal::Print::Animation that render (optionally in parallel) and composite their children recursively in order.  This requires keeping said children in "z order" if you're overlapping.

[23:07] <japhb> That extra effort is part of why Terminal::Widgets will handle the Z reordering natively.

[23:08] <vrurg> So, you could probably implement it all, eventually. 

[23:09] <vrurg> Vikna was a good experiment. But is unlikely to become a living thing.

[23:09] <japhb> Of Vikna?  Or of Vikna's rendering engine?

[23:09] <japhb> I thought that the cool bit of Vikna was the dispatch model?

[23:10] <japhb> Terminal::Widgets is using the HTML DOM "trickle down / bubble up" event model

[23:11] <japhb> Partially because it's reasonable to understand, and partly because I discovered that lots and lots of Supplies and Channels (my first event model design) caused a laggy UI that I didn't understand enough to be able to optimize.  :-)

[23:11] *** evalable6 left
[23:11] *** linkable6 left
[23:12] *** linkable6 joined
[23:12] <japhb> (I wonder how many of my architectural decisions come down to "I'm not smart enough to make this awesome, so let's do something I *can* understand"?)

[23:12] *** evalable6 joined
[23:13] <vrurg> I seemingly almost failed to manage the supply/channel model too. Though it only affected the sync thing about frames/clients.

[23:14] <vrurg> The big problem was in maintaining clipping masks.

[23:14] <vrurg> Ok, I'll be afk for at least an hour.

[23:14] <japhb> \o

