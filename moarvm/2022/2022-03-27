[00:08] *** reportable6 left
[00:29] *** ggoebel joined
[02:10] *** reportable6 joined
[02:34] *** harrow left
[02:57] *** harrow joined
[03:57] *** linkable6 left
[03:57] *** evalable6 left
[03:59] *** linkable6 joined
[03:59] *** evalable6 joined
[04:04] *** Geth left
[04:04] *** TempIRCLogger__ left
[04:04] *** RakuIRCLogger left
[04:06] *** lizmat left
[04:07] *** lizmat joined
[05:53] *** quotable6 left
[05:53] *** statisfiable6 left
[05:53] *** nativecallable6 left
[05:53] *** benchable6 left
[05:53] *** coverable6 left
[05:53] *** evalable6 left
[05:53] *** sourceable6 left
[05:53] *** unicodable6 left
[05:53] *** bisectable6 left
[05:53] *** linkable6 left
[05:53] *** reportable6 left
[05:53] *** releasable6 left
[05:53] *** notable6 left
[05:53] *** committable6 left
[05:53] *** bloatable6 left
[05:53] *** greppable6 left
[05:53] *** squashable6 left
[05:53] *** shareable6 left
[05:53] *** evalable6 joined
[05:54] *** bisectable6 joined
[05:54] *** releasable6 joined
[05:55] *** shareable6 joined
[05:55] *** greppable6 joined
[05:55] *** nativecallable6 joined
[05:55] *** committable6 joined
[05:56] *** benchable6 joined
[05:56] *** sourceable6 joined
[05:56] *** quotable6 joined
[05:56] *** coverable6 joined
[06:10] *** reportable6 joined
[06:54] *** unicodable6 joined
[06:54] *** bloatable6 joined
[06:54] *** squashable6 joined
[06:56] *** notable6 joined
[07:00] *** lizmat left
[07:00] *** lizmat joined
[07:00] *** Geth joined
[07:04] *** RakuIRCLogger left
[07:04] *** RakuIRCLogger joined
[07:08] *** RakuIRCLogger left
[07:08] *** RakuIRCLogger joined
[07:12] *** TempIRCLogger joined
[07:13] *** RakuIRCLogger left
[07:13] *** RakuIRCLogger joined
[07:15] *** CaCode joined
[07:17] *** TempIRCLogger left
[07:17] *** TempIRCLogger joined
[07:31] <nine> There are up-to-date openSUSE packages for rakudo on s390x.
[07:57] *** [Coke] left
[08:35] <lizmat> nine: I've not been able to find them on software.opensuse.org ...  link?
[08:44] <nine> https://download.opensuse.org/repositories/devel:/languages:/perl6/openSUSE_Leap_15.3/s390x/
[08:44] <nine> The repository (for openSUSE Leap 15.3)is https://download.opensuse.org/repositories/devel:/languages:/perl6/openSUSE_Leap_15.3/devel:languages:perl6.repo
[08:46] *** [Coke] joined
[08:46] <nine> I do not yet build s390x for openSUSE_Factory (the rolling distro). I could - it's just one click to enable that arch, but I don't know if its worth the additional ressource usage
[08:56] *** statisfiable6 joined
[09:00] <nine> And finally got it to build on Fedora :)
[09:01] <nine> Module packages need a tweak as well. Have submitted a PR for module2rpm with the fix
[09:53] *** linkable6 joined
[10:00] *** CaCode_ joined
[10:03] *** CaCode left
[10:56] *** CaCode- joined
[10:59] *** CaCode_ left
[11:06] *** TempIRCLogger left
[12:04] <dogbert11> nine: thx for the information wrt  https://github.com/rakudo/rakudo/issues/1920
[12:05] <dogbert11> I saw that you had merged some fix that seemed related and thought that it might have been fixed
[12:08] *** reportable6 left
[12:10] *** reportable6 joined
[12:44] * lizmat thinks she has a fix for #1920
[12:53] * dogbert11 thinks lizmat deserves +++ :)
[12:54] <lizmat> meh... too early
[12:54] <lizmat> at least it isn't always a segfault anymore
[12:55] *** CaCode_ joined
[12:55] *** CaCode_ left
[12:55] <dogbert11> small steps are better than no steps :)
[12:56] <lizmat> I had replaced the (require ::($module)) by "lib/$module.rakumod".IO.slurp.EVAL
[12:56] <lizmat> that pointed to a stale has access in Rakudo::Internals.EXPORT_SYMBOL
[12:58] *** CaCode- left
[12:58] <lizmat> https://github.com/rakudo/rakudo/commit/f4cba21c67
[12:59] *** linkable6 left
[13:02] *** linkable6 joined
[14:00] *** [Coke]_ joined
[14:02] *** [Coke] left
[14:03] *** ggoebel left
[14:15] *** discord-raku-bot left
[14:15] *** discord-raku-bot joined
[14:37] <dogbert11> perhaps there are more to it than this
[14:39] <lizmat> yes, I'd say so
[14:54] <dogbert11> I'm looking through some old stuff in order to see if things have been fixed
[14:54] <ugexe> ‚ùØ raku -e '(1..Inf).race(:batch(1)).map({ require "/Users/ugexe/.rakubrew/versions/moar-blead/lib/Test.rakumod" })'
[14:55] <ugexe> [1]    31277 segmentation fault  raku -e
[14:59] <ugexe> and doing the IO.slurp.EVAL gives a error that wasn't present in 2021.12 https://gist.github.com/ugexe/2d623df785f8a3b4defa0fc202c200b0
[15:01] <ugexe> i kind of question if anything was fixed or if it was just slowed down enough to make the problem slightly more difficult to shake out
[15:06] <dogbert11> .seen MasterDuke
[15:22] <nine> There are multiple issues that affect parallel module loading both in MoarVM and Rakudo.
[15:25] <dogbert11> it seems as if this SEGV har made a comeback: perl6 --profile -e'say "127.0.0.1" ~~ /^ [ <{ 0 .. 255 }> ]**4 % \. $/; say now - INIT now'
[15:25] <dogbert11> s/har/has/
[15:37] *** discord-raku-bot left
[15:37] *** discord-raku-bot joined
[15:41] <dogbert11> updated https://github.com/rakudo/rakudo/issues/2013 with my findings
[16:12] <dogbert11> there are lots of strange things happening all of a sudden
[16:14] <dogbert11> for example running valgrind on any program, when moarvm has been built with --no-optimize, makes valgrind complain like crazy with lots of 'Conditional jump or move depends on uninitialised value(s)'
[16:15] *** ggoebel joined
[16:30] *** ggoebel left
[16:30] *** ggoebel joined
[17:05] *** [Coke]_ is now known as [Coke]
[17:13] <nine> Could be that we lost memory alignment with the move to mimalloc
[17:15] *** sena_kun left
[17:16] *** sena_kun joined
[17:25] <lizmat> re Rakudo on s390: https://www.reddit.com/r/rakulang/comments/tp4z7q/couldnt_detect_system_architecture_current_arch/i2bq93l/
[17:25] <lizmat> looks like libffi is too modern?
[17:29] <nine> Sounds like they were trying to install openSUSE packages on RHEL. That can work with luck, but it can also run into issues like different versions of libraries being available.
[17:29] <dogbert11> nine: dunno if it's correct but valgrind seems to think that the problem originates here: 'Uninitialised value was created by a stack allocation at 0x4B696D5: emit_capture_guards (program.c:2241)'
[17:31] <dogbert11> that would be here, https://github.com/MoarVM/MoarVM/blob/master/src/disp/program.c#L2241
[18:07] *** reportable6 left
[18:45] *** sena_kun left
[18:46] *** sena_kun joined
[19:24] *** lizmat_ joined
[19:25] *** lizmat left
[19:26] *** TempIRCLogger joined
[19:41] * lizmat_ wonders whether this isn't a potential race condition ?
[19:41] <lizmat_> https://github.com/rakudo/rakudo/blob/master/src/Perl6/bootstrap.c/EXPORTHOW.nqp
[19:41] *** lizmat_ left
[19:42] *** lizmat joined
[19:44] <nine> What would be the race?
[19:45] <lizmat> multiple requires doing the $?PACKAGE.WHO assignment ?
[19:45] <lizmat> like the script of #1920 ?
[19:54] <nine> If this code is run multiple times, wouldn't it be a different module object each time?
[20:39] *** discord-raku-bot left
[20:40] *** discord-raku-bot joined
[20:45] *** discord-raku-bot left
[20:45] *** discord-raku-bot joined
[20:49] *** linkable6 left
[20:49] *** sena_kun left
[20:51] *** sena_kun joined
[20:58] <lizmat> it runs several times during module install
[21:27] <MasterDuke> nine, dogbert11: i think that valgrind warning about uninitialized value is correct. if you search for `MVM_VECTOR_.*\(cs->ops`, you'll see that it's PUSHed to, but is never MVM_VECTOR_INITed. so MVM_recalloc is being called without there having first been an MVM_calloc
[22:09] <MasterDuke> oh wait, there's a mix of `cs.ops` and `cs->ops`. ok, `MVM_VECTOR_.*\(cs(->|\.)ops` does show an INIT for `cs.ops`
[23:26] *** TempIRCLogger left
[23:55] *** [Coke] left
