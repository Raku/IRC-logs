[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[01:43] *** linkable6 left
[01:43] *** linkable6 joined
[02:53] *** [Coke] left
[02:55] *** [Coke] joined
[04:25] *** evalable6 left
[04:25] *** benchable6 left
[04:25] *** committable6 left
[04:25] *** reportable6 left
[04:25] *** shareable6 left
[04:25] *** bisectable6 left
[04:25] *** quotable6 left
[04:25] *** releasable6 left
[04:25] *** statisfiable6 left
[04:25] *** sourceable6 left
[04:25] *** coverable6 left
[04:25] *** tellable6 left
[04:25] *** greppable6 left
[04:25] *** bloatable6 left
[04:25] *** linkable6 left
[04:25] *** nativecallable6 left
[04:25] *** unicodable6 left
[04:25] *** notable6 left
[04:26] *** releasable6 joined
[04:26] *** greppable6 joined
[04:26] *** quotable6 joined
[04:26] *** coverable6 joined
[04:26] *** tellable6 joined
[04:26] *** sourceable6 joined
[04:27] *** statisfiable6 joined
[04:27] *** evalable6 joined
[04:27] *** benchable6 joined
[04:27] *** bloatable6 joined
[04:28] *** shareable6 joined
[04:28] *** linkable6 joined
[04:28] *** nativecallable6 joined
[04:28] *** bisectable6 joined
[04:29] *** committable6 joined
[04:29] *** notable6 joined
[04:29] *** reportable6 joined
[04:29] *** unicodable6 joined
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:16] *** [Coke] left
[06:24] *** [Coke] joined
[06:39] <Nicholas> [* GOOD *]

[08:25] <nine> *.map: *.GOOD

[08:35] *** sena_kun left
[08:36] *** sena_kun joined
[08:39] *** frost joined
[08:45] <MasterDuke> i don't remember if there were any comments on irc at the time, but any thoughts about https://github.com/MoarVM/MoarVM/pull/1470 ?

[08:51] *** codesections left
[08:52] *** codesections joined
[11:23] *** evalable6 left
[11:24] *** evalable6 joined
[11:26] *** discord-raku-bot left
[11:26] *** discord-raku-bot joined
[11:27] *** Altai-man joined
[11:29] *** Util left
[11:30] *** Util joined
[11:30] *** discord-raku-bot left
[11:31] *** discord-raku-bot joined
[11:31] *** sena_kun left
[12:08] *** reportable6 left
[12:10] *** reportable6 joined
[12:29] *** frost left
[12:58] *** [Coke] left
[12:59] *** timo left
[13:00] *** [Coke] joined
[13:06] *** discord-raku-bot left
[13:07] *** discord-raku-bot joined
[13:07] *** discord-raku-bot left
[13:07] *** discord-raku-bot joined
[13:08] *** discord-raku-bot left
[13:08] *** discord-raku-bot joined
[13:08] *** discord-raku-bot left
[13:09] *** discord-raku-bot joined
[13:09] *** discord-raku-bot left
[13:09] *** discord-raku-bot joined
[13:10] *** discord-raku-bot left
[13:10] *** discord-raku-bot joined
[13:11] *** discord-raku-bot left
[13:11] *** discord-raku-bot joined
[13:11] *** discord-raku-bot left
[13:12] *** discord-raku-bot joined
[13:12] *** discord-raku-bot left
[13:12] *** timo joined
[13:12] *** discord-raku-bot joined
[13:13] *** discord-raku-bot left
[13:13] *** discord-raku-bot joined
[13:14] *** discord-raku-bot left
[13:14] *** discord-raku-bot joined
[13:14] *** discord-raku-bot left
[13:15] *** discord-raku-bot joined
[13:15] *** discord-raku-bot left
[13:15] *** discord-raku-bot joined
[13:16] *** discord-raku-bot left
[13:16] *** discord-raku-bot joined
[13:17] *** discord-raku-bot left
[13:17] *** discord-raku-bot joined
[13:17] *** discord-raku-bot left
[13:18] *** discord-raku-bot joined
[13:18] *** discord-raku-bot left
[13:18] *** discord-raku-bot joined
[13:19] *** discord-raku-bot left
[13:19] *** discord-raku-bot joined
[13:20] *** discord-raku-bot left
[13:20] *** discord-raku-bot joined
[13:20] *** discord-raku-bot left
[13:21] *** discord-raku-bot joined
[13:21] *** discord-raku-bot left
[13:21] *** discord-raku-bot joined
[13:22] *** discord-raku-bot left
[13:22] *** discord-raku-bot joined
[13:23] *** discord-raku-bot left
[13:23] *** discord-raku-bot joined
[13:23] *** discord-raku-bot left
[13:24] *** discord-raku-bot joined
[13:24] *** discord-raku-bot left
[13:24] *** discord-raku-bot joined
[13:25] *** discord-raku-bot left
[13:25] *** discord-raku-bot joined
[13:25] *** discord-raku-bot left
[13:26] *** discord-raku-bot joined
[13:26] *** discord-raku-bot left
[13:27] *** discord-raku-bot joined
[13:27] *** discord-raku-bot left
[13:27] *** discord-raku-bot joined
[13:28] *** discord-raku-bot left
[13:28] *** discord-raku-bot joined
[13:28] *** discord-raku-bot left
[13:29] *** discord-raku-bot joined
[13:29] *** discord-raku-bot left
[13:30] *** discord-raku-bot joined
[13:30] *** discord-raku-bot left
[13:30] *** discord-raku-bot joined
[13:31] *** discord-raku-bot left
[13:31] *** discord-raku-bot joined
[13:31] *** discord-raku-bot left
[13:32] *** discord-raku-bot joined
[13:32] *** discord-raku-bot left
[13:33] *** discord-raku-bot joined
[13:33] *** discord-raku-bot left
[13:33] *** discord-raku-bot joined
[13:34] *** discord-raku-bot left
[13:34] *** discord-raku-bot joined
[13:34] *** discord-raku-bot left
[13:35] *** discord-raku-bot joined
[15:11] *** japhb left
[15:17] *** japhb joined
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:19] *** linkable6 left
[18:22] *** linkable6 joined
[18:28] *** Altai-man left
[18:30] *** sena_kun joined
[18:35] <vrurg> Are `nqp::uni*` thread-safe?

[18:35] <tellable6> 2021-10-05T09:27:00Z #moarvm <jnthnwrthngtn> .tell vrurg It's about separate compilation; the compilation of a module should start with an empty GLOBAL and accumulate the things that are `use`d by it.

[18:36] <vrurg> Wow, it was an old one...

[18:50] <japhb> vrurg: Yeah, tellable6 is re-delivering messages it couldn't guarantee had been delivered properly before.

[19:19] *** discord-raku-bot left
[19:19] *** discord-raku-bot joined
[20:14] *** sena_kun left
[20:16] *** sena_kun joined
[20:42] <jnthnwrthngtn> vrurg: They should be, but looks like something is wrong. Do you have a reproduction or can you get it to oops under rakudo-gdb-m and provide the stack trace?

[20:42] <jnthnwrthngtn> The matter will probably give a big clue

[20:43] <vrurg> jnthnwrthngtn: "They should be" is ok for now. I'm just trying to figure out the best fix for sub codename2proppref in unicodey.pm6.

[20:44] <vrurg> Unfortunately, so far the best is to wrap the whole sub in a lock which is going to slow it down. :(

[20:45] <jnthnwrthngtn> Ah, just saw the latest on the thread and it looks like there's actually some rakudo-level caching going on?

[20:45] <jnthnwrthngtn> Yeah, that's that threadsafe at all

[20:47] <jnthnwrthngtn> s:2nd/that/not

[20:47] <sourceable6> jnthnwrthngtn, No idea, boss. Can you give me a Code object? Output: 4===SORRY!4=== Error while compiling /tmp/HJi8w7z78Z␤Confused␤at /tmp/HJi8w7z78Z:1␤------> 328⏏4nd/that/not␤    expecting any of:␤        whitespace␤

[20:48] <jnthnwrthngtn> hah

[20:48] <vrurg> Phew, I was trying to figure out what you mean until the "not" was added. :)

[20:48] <jnthnwrthngtn> I wonder if we could pre-calculate the hash at compile time

[20:48] *** [Coke]_ joined
[20:49] <vrurg> It mostly is. Caching is for what is overlooked, perhaps.

[20:49] <vrurg> Or at least this is how I get it. I'm bad with unicode.

[20:50] <jnthnwrthngtn> I suspect additions to this are rare, though, so an alternative is to never bind into the hash, but instead clone it, add the new key, and bind the copy in place of the old one (can't be `constant` then but, well, there's nothing constant about it anyway...

[20:50] <jnthnwrthngtn> That's probably cheaper than the lock, anyway

[20:50] *** [Coke] left
[20:51] <vrurg> That's what I'm currently considering. 

[20:51] <jnthnwrthngtn> Although for a locking appraoch, note that unless $prop2pref also also written to, then it may be that only the nqp::ifnull(...) part needs wrapping in a `$lock.protect`

[20:51] <vrurg> There might be extra misses on the same key, but I don't think it would be too costly to have it cached on a second pass.

[20:51] <jnthnwrthngtn> Indeed

[20:52] <vrurg> $prop2perf is a RO, but I don't like lock.protect as it may break inlinability.

[20:53] <vrurg> So, atomic replace, after all.

[20:53] <vrurg> Thanks!

[20:56] <vrurg> BTW, I wonder how much would it cost to have a low-level lock-protected hash for cases like this? Locking at C-level shouldn't be that expensive.

[21:00] <jnthnwrthngtn> Probably won't save that much, since nqp::lock/nqp::unlock are pretty direct mappings onto C stuff anyway

[21:00] <jnthnwrthngtn> And especially if they're jitted the interpreter cost goes away

[21:00] <vrurg> Low-level wouldn't require an object allocation though.

[21:00] <jnthnwrthngtn> Which object?

[21:01] <vrurg> nqp::lock needs a concrete with ReentrantMutex repr 

[21:01] <vrurg> Or whatever the repr is named.

[21:02] <jnthnwrthngtn> Sure, but for cases like this it's long lived anyway, plus the allocation might not even be the dominant cost (dunno without profiling, but it's also calling the pthread mutex creation stuff either way)

[21:02] <vrurg> Oh, and correct NQP/Raku level locking requires handling of exceptions which wouldn't be needed for C-level hash protection.

[21:03] <vrurg> Yeah, I'm trying to multi-task and forgot that allocation "issue" I have excluded myself too. Only to get back to it again... :)

[21:04] <vrurg> Bet the exception is a problem because, again, it's about phasers and inlineability.

[21:10] <vrurg> s/Bet/But/

[22:04] *** sena_kun left
[22:05] *** sena_kun joined
