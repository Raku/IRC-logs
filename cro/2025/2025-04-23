[00:19] *** Pe_Elle joined
[00:24] *** Pe_Elle left
[01:11] *** Pe_Elle joined
[01:21] *** Pe_Elle left
[01:21] *** Pe_Elle joined
[02:23] *** discord-raku-bot left
[05:04] *** discord-raku-bot joined
[11:29] *** Pe_Elle left
[11:45] *** Pe_Elle joined
[12:50] *** Pe_Elle left
[13:29] *** Pe_Elle joined
[13:34] *** Pe_Elle left
[13:47] *** Pe_Elle joined
[14:31] *** Pe_Elle left
[14:31] *** Pe_Elle joined
[14:36] *** japhb left
[14:48] *** japhb joined
[15:02] *** Pe_Elle left
[15:02] *** Pe_Elle joined
[15:07] *** Pe_Elle left
[15:35] *** Pe_Elle joined
[15:40] *** Pe_Elle left
[16:01] *** Pe_Elle joined
[18:23] *** Pe_Elle left
[18:24] *** Pe_Elle joined
[18:29] *** Pe_Elle left
[18:46] *** Pe_Elle joined
[18:56] <SmokeMachine> Does anyone see an easy way to use Cro::RPC::JSON (vrurg?) from stdio? I mean, entry a json through $*IN and response on $*OUT (not only response, but also back notifications). One way I thought was to keel listening $*IN, and for each json it receives, create a Cro::HTTP::Request and inject it (some how) to the Cro::Application… but it would need to have a path… and I think it might be a better way… any ideas?

[19:53] <SmokeMachine> Maybe if I create a Cro::Source that reads $*IN and emits Cro::RPC::JSON::Request and a Cro::Sink that receives Cro::RPC::JSON::Response (and notification) and writes it on $*OUT, that would work to create a pipeline… :) make sense?

[20:20] *** Pe_Elle left
[20:50] <discord-raku-bot> <librasteve> makes sense to me - good idea and useful debug tool to put in the Cro module somewhere if you would be happy to do a couple of tests and a little docs

[20:52] *** Pe_Elle joined
[20:56] *** Pe_Elle left
[21:22] *** Pe_Elle joined
[22:27] *** Pe_Elle left
[22:55] *** Pe_Elle joined
[23:00] *** Pe_Elle left
[23:40] *** Pe_Elle joined
[23:45] *** Pe_Elle left
