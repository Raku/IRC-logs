[00:20] *** melezhik joined
[00:27] *** melezhik left
[07:20] *** sena_kun left
[13:03] <kawaii_> Hello! I have a very basic API Cro app which uses very rudimentary authentication by simply doing a select on a database for the keys, which at the moment is included in my only API route - but as my API grows I wanted to do the fancy cro middleware stuff and have a `before` running on all my routes, which I have started to write below the attached snippet - but I am unsure how to start putting this all together? If my check for a key fails in 

[13:03] <kawaii_> my PFAPI::Authenticate class, how do I escape this block and throw a `forbidden`? https://www.irccloud.com/pastebin/gv9I1vGE/

[13:20] <kawaii_> I shifted some things around and I think this is now closer to what I'm trying to achieve?  https://www.irccloud.com/pastebin/2UL7Pamb/

[13:32] <jnthnwrthngtn> kawaii_: Were you aware of https://github.com/croservices/cro-apitoken ?

[13:32] <kawaii_> ah um... no :(

[13:32] <kawaii_> I'll take a look now! hankyou!

[13:32] <kawaii_> thankyou*

[13:34] <jnthnwrthngtn> The answer to your question is that the middleware should emit a Cro::HTTP::Response, but you need to use the Conditional midldeware base class. Example (even one giving forbidden) at https://cro.services/docs/reference/cro-http-middleware#Request_middleware_that_may_produce_a_response

[13:35] <kawaii_> Oh wow! This example looks exactly like what I might need, just modified to do my DB lookup. :)

[13:37] <jnthnwrthngtn> :)

[14:04] <kawaii_> jnthnwrthngtn: where does the $req variable come from in that example? I have no such variable in my program, I tried replacing $req with $request but that just causes my app to hang forever - but in the case where you provide a bad key it does the right thing and throws the 403, so that's progress!  https://www.irccloud.com/pastebin/2m6xdULK/

[14:19] <jnthnwrthngtn> Why are you requesting the body?

[14:20] <jnthnwrthngtn> Or why is the auth in the body, probably should be in a header...

[14:20] <jnthnwrthngtn> Anyway, you'll need to obtain the body using a `whenever`, not an `await`, otherwise you'll block the request processing pipeline

[14:21] <jnthnwrthngtn> Then you'll need to set-body to put the body back in place, because the body is only possible to consume once

[14:24] <kawaii_> Because the client app currently sends the auth payload in the body of the GET, and I don't currently have control over the client (for now), you're probably right about it going into a header though.

[14:24] <kawaii_> And ah yes that makes sense, blocking due to await - thanks!

[14:27] <jnthnwrthngtn> Ah, OK. Was gonna say, if you get the choose, choose header. 

[14:37] <kawaii_> it works ðŸŽ‰

[14:37] <kawaii_> thanks for your help jnthnwrthngtn 

[14:47] <jnthnwrthngtn> Yay, welcome :)

