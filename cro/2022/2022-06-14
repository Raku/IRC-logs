[01:00] *** summerisle left
[01:01] *** summerisle joined
[02:58] *** summerisle left
[03:02] *** summerisle joined
[08:40] *** Xliff joined
[09:44] <Xliff> If I have a sub with a signature like <:sub a ($text, :$n = 1)>, can I set $n in a template like this: <&a(n => 2)> ?

[09:47] <jnthn> Well, you'd need to pass an argument for $text too, since that's not optional, and I think only colonpair syntax is supported

[09:56] <Xliff> Ah! Thanks for that.

[09:57] <Xliff> Next question :)

[09:57] <Xliff> What's the best way to iterate when you only have the number of iterations stored in a variable?

[09:57] <Xliff> Is the <@^$v> syntax supported?

[09:59] <jnthn> No. Dunno how you'd do that with iteration. Can write it as a recursive function, though :)

[10:00] <jnthn> Although I'd probably just send a Range into the template data instead of the number

[10:00] <Xliff> Yeah, was thinking that. Was hoping to keep that solely in the template.

[10:01] <Xliff> Thanks for the idea though.

[10:01] <Xliff> I'll see if I can shoehorn that into the template language and submit a PR. 

[10:01] <Xliff> That will be in my copious free time, however.

[10:01] <Xliff> Which is a complete lie.

[10:01] <jnthn> I...don't really like that syntax, fwiw

[10:02] <Xliff> Which would you prefer?

[10:03] <jnthn> Dunno. Maybe a more general <@{ ... }> form a bit like the <?{ ... }> form

[10:03] <Xliff> So...

[10:03] <Xliff> <@{1..3}> ?

[10:03] <Xliff> <@{$s..$e}> ?

[10:03] <jnthn> Yeah. I don't even mind the ^$s inside of there, tbh

[10:04] <Xliff> OK... so as long as it evals to a range inside the curlies?

[10:04] <jnthn> Yeah

[10:04] <Xliff> I should be able to work with that.

[10:04] <jnthn> Well, I mean, it can do anything in the curlies really

[10:04] <Xliff> Will keep you posted.

[10:05] <jnthn> So it's 1) support having an expression in curlies, like with `?` and `!` sigil tags, 2) add range operators to the expression language

[10:05] <Xliff> Yeah. Something like that.

[10:06] <jnthn> Then it's neat for e.g. <@{ .some-cond ?? .some-array !! .some-other-array }> or similar

[10:08] <Xliff> Yep. And value check would test that expression would evaluate to Iterable or throw?

[10:09] <Xliff> Array will. Range will. 

[10:13] <jnthn> Don't think we need to; Raku doesn't

[10:13] <Xliff> OK

[10:13] <jnthn> (the "item is a 1-item list in such a context" rule)

[10:19] <Xliff> jnthn: Thanks for the recusion solution. It was simple enough to implement.

[11:47] <Xliff> jnthn: Is there any way to create a Signature object from another Signature?

[11:48] <lizmat> Xliff: apart from .clone ?

[11:50] <Xliff> No.

[11:50] <Xliff> I was able to come up with this...

[11:50] <Xliff> m: 1.say

[11:50] <Xliff> Oh.. No bot here.

[11:50] <Xliff> sub a ("a", "b", $c, :$d) { }; Signature.new( params => &a.signature.params[1..*] ).gist.say

[11:51] <Xliff> The reason why I am asking, is that I am looking for ways to simplify application creation.

[11:51] <Xliff> I'd like to set up a controller class that has controllers as the methods.

[11:51] <Xliff> Then have the route block create the routes from the signatures of all marked methods.,

[11:51] <Xliff> methods would be (METHOD, ...) where ... is the route

[11:52] <Xliff> And METHOD, in this case is GET, POST, DELETE and such.

[12:51] <jnthn> You might want to look at the OpenAPI::RoutesFromDefinition module that does something kinda similar with route handlers being partly synthesized from other things

[13:14] <Xliff> jnthn: Ah! Thanks!

[18:18] *** lizmat left
[18:21] *** lizmat joined
[18:50] <Xliff> in RakuAST, If I want to create a Parameter from a literal, can I still use StrLiteral, or do I need a ParameterTarget?

[18:50] <Xliff> The examples aren't quite clear on that.

[18:53] *** n1to joined
[19:24] *** jjatria left
[19:24] *** jdv left
[19:25] *** jdv joined
[19:31] *** jjatria joined
[20:44] *** summerisle is now known as eof

[21:59] *** n1to left
