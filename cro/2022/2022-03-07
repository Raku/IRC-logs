[12:49] *** TempIRCLogger joined
[17:52] *** melezhik joined
[17:53] <melezhik> In cro application I have a connection to mysql db, how can I cache this connection, so not create a db connection on every http request?

[17:53] <melezhik> my mysql db ends up with too many connections

[18:20] <sena_kun> melezhik, dependency injection I guess, you can create a DB connection at your `service.p6` and then pass it to `routes` as an argument/parameter.

[18:25] <melezhik> so you mean to crate the db connection object inside app.raku file?

[18:40] *** melezhik left
[19:29] *** melezhik joined
[19:29] <melezhik> sena_kun I do this - https://github.com/melezhik/sparky/blob/master/bin/sparky-web.raku#L19 however simmer like cro does not see my $dbh

[19:33] <sena_kun> melezhik, you can wrap the code to create `$application` into a routine that returns `$application`, and pass the db there. It would be visible in the scope.

[19:36] <melezhik> let me try ...

[19:49] <melezhik> sena_kun I've changed as you recommended - https://github.com/melezhik/sparky/blob/master/bin/sparky-web.raku#L484 Â however the very first request to an application works just fine ( data fetched from db and shown in a web page ) however the next request always errors and all cro application becomes unavailable

[19:50] <melezhik> I guess this is somehow connected with failure to get dbh for the second time, weird ...

[19:57] <melezhik> sena_kun never mind, I have found the cause - https://github.com/melezhik/sparky/commit/636b29c65f4baf673d0d88cc29dc876b01d41669 ))

[19:58] <melezhik> dispose destroys dbh connection,

[19:59] <melezhik> sena_kun thanks for your help!

[20:00] *** melezhik left
[20:11] *** melezhik joined
[20:11] *** melezhik left
[20:28] <jnthnwrthngtn> Sometimes I wonder if we should explicitly recommend the use of DB:: modules over DBIish in the Cro docs, given those have connection caching built in, which is far safer given the multi-threaded nature of Cro apps

[20:43] * leont never quite got how the connection caching is supposed to work with prepared statements. They feel rather mutually exclusive.

[21:49] <jnthnwrthngtn> I think for anything you can't do with one of the convenience forms, it's calling the `db` method to explicitly get a handle, which has to have `finish` called on it.

[22:49] *** melezhik joined
[22:49] <melezhik> .

[23:26] *** melezhik left
