[07:45] *** patrickb joined
[07:50] *** patrickb left
[08:23] *** patrickb joined
[08:53] <japhb> jnthnwrthngtn: You wanted to know as CBOR::Simple improved in performance.  With the latest tuning, it now ranges from slightly slower in the worst case to much faster than JSON::Fast on the same data, while generally having smaller encoded size and better fidelity with original types.

[08:55] <jnthnwrthngtn> japhb: Faster on numerics, I imagine? What's the main slower area?

[08:59] <japhb> Oddly, round-tripping simple UNPACKED small Int Arrays -- CBOR tries to compress those extra well, and it costs.  (About 30% slower decode, 55% slower encode on my machine.)  Decode of data structures pulled from META6.json files is about 16% slower.  Everything else is faster.

[09:00] <japhb> Packed floats and blobs are ridiculously fast (orders of magnitude faster, since JSON can't do them natively and has to fall back to unpacked)

[09:01] <japhb> Haven't added the code for packed ints (they silently encode as unpacked ints, with a small speedboost from knowing they're all the same type)

[09:01] <japhb> *packed intarrays

[09:04] <jnthnwrthngtn> What about individual ints?

[09:04] <japhb> Should be pretty quick, and small.

[09:06] <japhb> I would love to find more places to improve it, so if you have any particular data files you'd like to use as a challenge, I'm all ears.  Happy to add them to my perf tuning collection, too.

[09:07] <japhb> (And if you have a use for packed intarrays sooner rather than later, I can prioritize that -- I've just been focusing on general performance for the last couple days)

[09:10] <japhb> jnthnwrthngtn: Here's a recent perf test run on my laptop, to give you an idea: https://gist.github.com/japhb/595d9afc9570daa9401135853f0c34a8

[10:04] *** patrickb left
[10:38] *** patrickb joined
[12:19] <jnthnwrthngtn> japhb: No, Log::Timeline doesn't currently make use of those

[18:35] <japhb> Ah, that's what you want it for ... OK, do you have log entries from something performance-sensitive but not private (so you can share the entries and I can make a test)?

[18:36] <japhb> I presume what you're looking for most is "Least time spent encoding each entry individually", but let me know if that's not right.

[18:38] *** sena_kun left
[19:04] *** sena_kun joined
[20:18] *** patrickb left
[21:03] <jnthnwrthngtn> japhb: The current protocol is JSONLines over a socket, but one can also set LOG_TIMELINE_JSON_LINES=filename in the environment to get that to a file, to see how the entries look

[21:05] <jnthnwrthngtn> japhb: Running a Cro web application with that in the environment and throwing some requests at it will get you some output.

[21:21] *** AlexDaniel joined
[21:56] <japhb> OK, SGTM

