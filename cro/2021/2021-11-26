[00:45] *** xinming joined
[02:30] *** Xliff_ joined
[02:33] *** _Xliff_ left
[03:38] *** xinming left
[06:13] <Xliff_> OK, so it wasn't Curl keeping the request open.

[06:14] <Xliff_> jnthnwrthngtn: Is there anything special you need to do on the Cro side to get a request to complete or should it just automatically clean up when it reaches the end of a specific route handler?

[10:05] <jnthnwrthngtn> Xliff_: Not sure what you mean by "complete", but the end of the route handler isn't the end of the process of producing a response. There may be middleware after that point (including the one that logs what happened), and eventually the response will be serialized (first headers, then body)

[10:08] <Nicholas> There is always the possiblity that "I'm doing something stupid here", but I don't think that I am

[10:09] <Nicholas> I have some code which is pretty close to the WebSocket example on https://cro.services/#ws

[10:09] <Nicholas> if I put a LAST phaser into the ` whenever $incoming -> $message {` block

[10:09] <Nicholas> (And reload my test page with Firefox, which clearly is doing something a bit different from Chrome)

[10:09] <Nicholas> A WebSocket handler crashed: No such method 'done' for invocant of type 'Cro::WebSocket::Message'.

[10:10] <Nicholas> and I can't work out why the *invocant* is Cro::WebSocket::Message

[10:10] <Nicholas> (and not a supply)

[10:10] <Nicholas> the code in S17-supply/syntax.t looks identical: whenever $trigger -> $value {

[10:10] <Nicholas> ...

[10:10] <Nicholas> LAST {

[10:10] <Nicholas> ...

[10:46] <Nicholas> bugger. Confident it isn't me. If I try to reduce it to testcase without DB::Pg, then firefox now behaves the same way as Chrome.

[10:46] <Nicholas> In that, I get "Cannot write to a closed socket" from the Cro server

[10:46] <Nicholas> but my LAST block works out

[11:05] *** Altai-man joined
[11:10] <Nicholas> Oh well. Firefox behaves differently if you're running the server inside a docker container.

[11:10] <Nicholas> That clearly isn't helping.

[11:46] *** lizmat_ joined
[11:47] *** _Xliff_ joined
[11:55] *** lizmat_ left
[11:55] *** lizmat_ joined
[11:55] *** lizmat left
[11:55] *** JRaspass left
[11:55] *** Xliff_ left
[11:56] *** Nicholas left
[11:56] *** lizmat_ left
[11:56] *** lizmat joined
[11:56] *** Nicholas joined
[12:03] *** JRaspass joined
[12:08] <_Xliff_> jnthnwrthngtn: Well, it seems like a single handler has this runawayu resource issue. 

[12:08] <_Xliff_> And I can't seem to figure out what's causing itg.

[12:08] <_Xliff_> s/itg/it/

[12:09] <_Xliff_> It just seems like the request gets serve as normal, but the thread does not close properly. I thought Curl might have been holding it open with a leaked file handle, but I am closing all of those, now.

[12:09] <_Xliff_> (at least I am using the close method)

[12:10] <_Xliff_> Even so, after that handler is run ONE TIME, one processor is forced to 100% usage and memory usage shoots through the roof.

[12:10] <_Xliff_> Looks like I will need to use the profiler on a larger machine to solve this issue. *sigh*

[12:11] <_Xliff_> Any ideas on how to do that will be helpful. I've never used it, before.

[12:20] <jnthnwrthngtn> _Xliff_: What is the response body?

[12:21] <jnthnwrthngtn> But really Log::Timeline is the first resort.

[12:22] <jnthnwrthngtn> Before profiling

[12:22] <jnthnwrthngtn> As it may show for example that the response serializer phase never ends

[12:22] <_Xliff_> I

[12:23] <_Xliff_> Would I need to run things via Cro to get that?

[12:23] <_Xliff_> s/Cro/Comma/

[12:23] <jnthnwrthngtn> Well, if you want the nice visualization yes.

[12:24] <jnthnwrthngtn> But otherwise you can just get it to write JSON lines output and read that

[12:24] <_Xliff_> I'll probably need some help converting my existing source tree into a soluition for Comma.

[12:25] <_Xliff_> I've been using comma for mostly small debugging tasks and Grammar development.

[12:25] <jnthnwrthngtn> If all you need is to run it with the timeline view just 1) new project from sources, 2) create a run configuration and tell it what script to run and what parameters to pass to Raku (for example any -Ifoo)

[12:26] <jnthnwrthngtn> Then Run with timeline view. That should be it.

[12:26] <jnthnwrthngtn> (In order to get the visualization, anyway)

[12:27] <_Xliff_> Can you set up environment vars using Comma?

[12:27] <jnthnwrthngtn> Really all it does is run Rakudo with an env var set telling Log::Timeline a port number, then connects to it.

[12:27] <jnthnwrthngtn> Yes, in the run configuration dialog

[12:28] <jnthnwrthngtn> That's been possible pretty much forever for running scripts (and probably for well over a year for tests too :))

[12:31] <_Xliff_> Add as Cro service sor Raku app?

[12:35] <jnthnwrthngtn> If you have a .cro.yml then as Cro service, but all it will really do is set up the env vars from that file for you

[12:35] <jnthnwrthngtn> If you're not using `cro run` to run the thing then just go for Raku app

[12:45] <_Xliff_> It's picking up external libraries from the wrong place.

[12:45] <_Xliff_> I haved a -I for my own version of Cro::WebApp, but it is using the system installed version. Even with -I in the run config.

[12:49] <_Xliff_> OK, so how do I get the JSON data? I will just have to run it without comma for the time being.

[12:50] <jnthnwrthngtn> Huh, does the command line that it actually runs look correct?

[12:51] <jnthnwrthngtn> You put the -I things in Raku parameters, not script parameters?

[12:52] <_Xliff_> Yep.

[12:54] <jnthnwrthngtn> Hm, so does the command it runs match what you run manually? I mean, Comma doesn't have any say in how to find modules, it's just invoking Rakudo.

[12:54] <jnthnwrthngtn> Anyway, see Log::Timeline README for the environment variable to set if you want to do it that way

[12:54] <_Xliff_> I'd have to restart everything again, but the command looked right.

[12:58] <jnthnwrthngtn> I'm guessing either something missed or maybe incorrect working directory, if you have relative -I paths

[13:00] <_Xliff_> OK. So request has been made and I only have 1 entry in log file.

[13:00] <_Xliff_> Is that a good thing or does that indicate I'm still processing a request?

[13:01] <_Xliff_> Yeah. K = 1 and no corresponding k=2.

[13:01] <_Xliff_> So what can hang up things like this?

[13:07] <_Xliff_> OK, so "Process Request" which is i:1 has a k:1 but no accompanying k:2

[13:07] <_Xliff_> Same with i:2

[13:09] <_Xliff_> Actually no. i:2 finishes. i:3 and i:4 do not.

[13:13] <jnthnwrthngtn> Hm, I'm guessing IO buffering...

[13:13] <jnthnwrthngtn> (there should be more in the ifle than that)

[13:14] <jnthnwrthngtn> I'd expect there not only to be process request but a breakdown of the phases of request processing too

[13:14] <_Xliff_> Hmm.... php script hangs on POST request and doesn't do anything else until I kill the server.

[13:15] <jnthnwrthngtn> (Feel free to paste the output somehwere so I can maybe see something in it)

[13:19] <_Xliff_> https://gist.github.com/Xliff/1b77ae9a146d47a83b36f6d4fd6b6719

[13:21] <_Xliff_> Something is definitely hanging the server.

[13:23] <jnthnwrthngtn> But does the POST request ever make it into the request handler?

[13:23] <_Xliff_> No. Not until I abort the server.

[13:26] <jnthnwrthngtn> huh, that makes it look like the request doesn't even get parsed

[13:28] <_Xliff_> Yeah. I'm using DB::MySQL -- Looks like I need to call .finish on the statement handle, but seems there is some laziness involved.

[13:29] <jnthnwrthngtn> How are you producing a response? `content ` and then what?

[13:30] * jnthnwrthngtn is quite confused by this point, though, as the pieces don't add up :)

[13:31] <_Xliff_> Welcome to my world.

[13:31] <_Xliff_> OK. I need to sleep. Thanks for the help!

[13:32] <jnthnwrthngtn> Rest well

[13:45] *** Xliff_ joined
[13:46] *** Xliff_ left
[13:48] *** _Xliff_ left
[18:24] <lizmat> so, I just realized that I have a case for letting browsers / proxies cache on request generated HTML

[18:25] <lizmat> so it looks like "content" could also some some args describing caching baheviour

[18:25] <lizmat> *behaviour

[18:33] <jnthnwrthngtn> lizmat: No, you just call `cache-control` (before or after content)

[18:34] <jnthnwrthngtn> Or if it should apply over many route handlers, but it in an `after-matched` block

[18:34] <lizmat> jnthnwrthngtn++

[18:35] <jnthnwrthngtn> See https://cro.services/docs/reference/cro-http-router#Setting_response_cachability

[18:35] <lizmat> was just looking at that, how could I have missed that before  :-)

[18:36] <jnthnwrthngtn> .oO( we have too many features :D )

[18:36] <jnthnwrthngtn> Home time for me. :)

[18:43] *** Altai-man left
