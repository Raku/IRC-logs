[09:41] *** patrickb joined
[14:17] *** Xliff joined
[14:17] <Xliff> \o

[14:17] <Xliff> Given "package Mine { sub a is export ( ... } }"

[14:18] <Xliff> Is there a way I can call a as both a() or Mine:a()?

[14:18] <Xliff> Would our-scoping a() be the way to go?

[16:11] <Xliff> Anaswer: no

[16:11] <Xliff> s/Ana/An/

[16:47] *** rypervenche joined
[17:06] <jnthnwrthngtn> `our` scoping is the ansewr

[17:07] <jnthnwrthngtn> It's `Mine::a()` though (two colons, not one)

[17:07] <jnthnwrthngtn> Note that you need to leave the `is export` *and* `our` scope it

[17:36] <Xliff> Ah, thanks jnthnwrthngtn.

[17:37] <Xliff> That's good to know. I left out the fact that in my use case, I left out the fact it was a multi.

[17:37] <Xliff> Can't our scope an individual multi, I would have had to write a proto.

[17:38] <Xliff> jnthnwrthngtn: How goes work on RakuAST?

[18:26] <Xliff> jnthnwrthngtn: What's the best way to test for leaks? I have a Cro app server that I can't keep up for longer than a day or so before it chews up all of the active RAM.

[18:43] *** japhb left
[18:43] *** japhb joined
[19:37] <jnthnwrthngtn> Xliff: Heap dumps are probably the best way, although the tooling around them is not wonderful.

[19:38] <jnthnwrthngtn> But that'd let you see what kinds of objects are growing with time and what keeps them alive

[19:38] <jnthnwrthngtn> RakuAST hasn't move that much recently, I've been almost entirely focused on getting new-disp over the line, so at least *something* I started got done :)

[20:15] *** patrickz joined
[20:25] <Xliff> jnthnwrthngtn: I completely understand regarding RakuAST. The work on new-disp was just as important. Thank you so much for getting that across the finish line.

[20:26] <Xliff> A little bit of odd new re Cro::WebApp::Template though. I've been using Cro::WebApp::Template::Bootstap, and it's been serving me well. However I have run into a bit of an issue.

[20:27] <Xliff> I have made change after change to cdn.crotmp, but none of the changes seem to make it through to the running server. I've rerun my app several times with no change. 

[20:27] <Xliff> For example, there is a bug with jquery-ui which only occurs when jquery-slim is loaded.

[20:27] <Xliff> So I've tried adjusting cdn.crotmp to remove it, and haven't been successful in getting any of that picked up. Ideas?\

[20:30] <jnthnwrthngtn> I assume you've either reinstalled Cro::WebApp::Template::Bootstrap after your changes, or at least have a -I to point to your version of it?

[20:30] <jnthnwrthngtn> (It works just like any other Raku module in this regard)

[20:31] <jnthnwrthngtn> If so you could try clearing out precomp caches (rm -r lib/.precomp) to see if that helps

[20:34] <Xliff>  Sure

[20:38] <Xliff> Removing .precomp had no effect

[20:41] <jnthnwrthngtn> OK, then...I've no idea what's going on.

[20:41] <jnthnwrthngtn> (I was pretty sure we don't precompile template modules anyway, so woulda been surprised if it helped.)

[20:41] <jnthnwrthngtn> You could try to strace it and grep for the bootstrap template file name to see what file it's trying to access.

[20:44] <Xliff> Good ide.

[20:44] <Xliff> idea even

[20:44] <jnthnwrthngtn> .oO( I know a good IDE too... :D )

[20:44] <Xliff> strace doesn't seem to catch the route handlers.

[20:44] <Xliff> jnthnwrthngtn: Hahah! Yes.

[20:44] <Xliff> That'll be the next step

[20:50] <jnthnwrthngtn> Hmm...I thought strace traced everything in a process and thus all threads of it, but I may be mistaken.

[20:50] <jnthnwrthngtn> But perhaps worth checking in so far as requests are processed on the thread pool

[21:15] <Xliff> Yeah, well I straced the main raku executable, and didn't get anything from the thread processing the request.

[21:52] <Xliff> jnthnwrthngtn: Will rakudo-valgrind-m pick up leaked Rakudo resources, or just moar internals?

[23:12] *** patrickz left
[23:14] *** patrickb left
