[06:58] *** patrickb joined
[10:01] <Geth> ¦ cro-http: 47fabdddec | (Jonathan Worthington)++ | 2 files

[10:01] <Geth> ¦ cro-http: Warn if a `route` block is sunk

[10:01] <Geth> ¦ cro-http: 

[10:01] <Geth> ¦ cro-http: I recently helped track down a routing problem that was a result of

[10:01] <Geth> ¦ cro-http: writing one `route` block inside another and forgetting the `include` or

[10:01] <Geth> ¦ cro-http: `delegate` before it (it was actually an `openapi` block, but same

[10:01] <Geth> ¦ cro-http: deal). Add a warning to provide a hint, rather that silently ignoring

[10:01] <Geth> ¦ cro-http: those routes.

[10:01] <Geth> ¦ cro-http: review: https://github.com/croservices/cro-http/commit/47fabdddec

[10:01] <Geth> ¦ cro-http: 6f0bcb8495 | (Jonathan Worthington)++ (committed using GitHub Web editor) | 2 files

[10:01] <Geth> ¦ cro-http: Merge pull request #143 from croservices/warn-on-sunk-route-block

[10:01] <Geth> ¦ cro-http: 

[10:01] <Geth> ¦ cro-http: Warn if a `route` block is sunk

[10:01] <Geth> ¦ cro-http: review: https://github.com/croservices/cro-http/commit/6f0bcb8495

[10:06] <Geth> ¦ cro-webapp: 4237fe7755 | Altai-man++ | 4 files

[10:06] <Geth> ¦ cro-webapp: Present the simplest way to handle comments

[10:06] <Geth> ¦ cro-webapp: 

[10:06] <Geth> ¦ cro-webapp: Do not rely on considering things that are not `<` and `>` being literals,

[10:06] <Geth> ¦ cro-webapp: instead provide an alternative to parse "-- everything non-greedy before closing `-->`" after

[10:06] <Geth> ¦ cro-webapp: the opener `<`.

[10:06] <Geth> ¦ cro-webapp: review: https://github.com/croservices/cro-webapp/commit/4237fe7755

[10:06] <Geth> ¦ cro-webapp: 9c03234fb1 | (Jonathan Worthington)++ (committed using GitHub Web editor) | 4 files

[10:06] <Geth> ¦ cro-webapp: Merge pull request #49 from croservices/handle-comments

[10:06] <Geth> ¦ cro-webapp: 

[10:06] <Geth> ¦ cro-webapp: Present the simplest way to handle comments

[10:06] <Geth> ¦ cro-webapp: review: https://github.com/croservices/cro-webapp/commit/9c03234fb1

[12:38] *** ecocode_ joined
[12:40] <ecocode_> Hi. I'm playing with Cro and was asking myself if Cro can generate an openapi yaml file from the routers code ?

[12:43] <jnthnwrthngtn> Not *yet*. We can't figure out enough to do that. But...when RakuAST lands and we can inspect the `route` block contents and look inside the handlers to find their `request-body` calls and similar, then it should be possible.

[12:43] <jnthnwrthngtn> Currently it'd only be able to generate a very incomplete openapi spec

[12:50] <ecocode_> Ok.  Thanks for the info.

[12:51] <jnthnwrthngtn> I'm quite keen on such a thing because I'd much rather write Raku than a YAML spec :)

[12:53] <ecocode_> Since Cro supports importing routes from openapi, I was thinking that you were doing this the other way around..

[12:54] <ecocode_> So I even started looking for tools to create an openapi spec 😜

[12:56] <jnthnwrthngtn> At the moment I am doing it that way around, yes

[12:56] <jnthnwrthngtn> There's https://editor.swagger.io/ which is an online editor for openapi specs

[12:56] <jnthnwrthngtn> oh, grr, that looks like it's for an old spec version though 

[12:56] <jnthnwrthngtn> oh no, it supports both, yay :)

[12:58] <ecocode_> Do you use a tool to create the openapi spec? Or you just do it in an text editor ?

[13:00] <jnthnwrthngtn> I've used the think I just linked you to, since it at least makes sure the syntax is right

[13:00] <jnthnwrthngtn> *thing

[13:02] <ecocode_> 👍

[13:02] <jnthnwrthngtn> https://editor.swagger.io/

[13:05] <ecocode_> For now I don't really need the openapi support.  But it might be useful later..  so my best option for now is to start from raku routes

[14:41] *** ecocode joined
[15:26] *** patrickb left
[15:47] <Altreus> hmm raku would be a great target for an openapi module

[15:47] <Altreus> working with specs programmatically doesn't seem to be a highly represented problem in the perl family

[15:49] <jnthnwrthngtn> There already is OpenAPI::Schema that does the parsing of the spec into an object model, which is probably a good start

[16:38] *** ecocode_ left
[17:30] <Altreus> it does sound good

[19:01] *** ecocode_ joined
[21:18] *** ecocode_ left
[23:40] *** japhb left
[23:44] *** japhb joined
