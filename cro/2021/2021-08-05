[06:40] *** patrickb joined
[07:00] *** patrickb left
[09:43] *** Xliff joined
[09:43] <Xliff> Hello.

[09:44] <Xliff> Once again I am dusting off my work with Cro::WebApp.

[09:44] <Xliff> This time I'd like to look into the possibility of making the route{} block pluggable.

[09:45] <Xliff> Has someone experimented with a way to make the route block accept input from different locations (ala Route:: modules)

[09:45] <Xliff> If so, is there a blog post or write-up describing how this can be done?

[09:45] <Xliff> Thanks.

[09:47] <Xliff> Is there a mechanism for assigning a prefix for a set of routes?

[09:48] <Xliff> Something like "route { prefix 'prefix' { get -> 'endpoint' { ... }; }; }; 

[09:49] <Xliff> Would then have one endpoint served by GET request to 'prefix/endpoint'

[10:27] <Xliff> Will this work as expected if the object attributes match the form field names?

[10:27] <Xliff> ...

[10:30] <Xliff> https://gist.github.com/Xliff/ceb6f6a50935289dddb2ad82173eef21

[10:41] <jnthnwrthngtn> Xliff: The prefix is just `include 'prefix' => route { get -> 'endpoint' { } }`

[10:43] <jnthnwrthngtn> If you have a method on Instance to coerce it from a Hash, then probably `get -> Instance() $i { }` would do the job.

[10:44] <jnthnwrthngtn> I'd wondered about having some object unpacking stuff in Cro but nowadays figure it's probably better to just leave it to coercions.

[10:44] <Xliff> How would the coercion method on Instance work?

[10:44] <Xliff> method Instance (%hash) { ... }

[10:45] <Xliff> jnthnwrthngtn: Thanks for the information on 'include'

[10:45] <Xliff> Have you thought about making that "Pluggable"

[10:45] <Xliff> For example, can include take data from a flatted (or unflattened) hash?

[10:47] *** sena_kun joined
[10:47] <jnthnwrthngtn> Just write a `method COERCE(%hash) { }` on Instance

[10:47] <jnthnwrthngtn> include is slurpy iirc

[10:48] <jnthnwrthngtn> There's a further plugin mechanism in HEAD (release planned later this week) that lets you stash and obtain state relating to the current route blcok

[10:48] <Xliff> HAH! Didn't know about COERCE()

[10:48] <Xliff> I've always been handling it from the other direction...

[10:48] <jnthnwrthngtn> Note that since `request` and `response` are dynamically scoped a lot of "plugin" things don't even *need* an explicit mechanism; you just write subs. `web-socket` works that way for example.

[10:49] <jnthnwrthngtn> But for things like `template` where we wanted to have configuration associated with the route block and find it (accounting for `include`s), there's a new mechanism now

[10:50] <Xliff> Looking forward to your writeup on these new features, then.

[10:51] <jnthnwrthngtn> There's already doc comments explaining it in the source; we're working on getting all of those extracted and available online also, for those who don't use Comma and thus can't enjoy the docs view in that. :)

[10:52] <jnthnwrthngtn> So far as plugin-y stuff in general goes: I'm being careful what is introduced, since the longer-term plan is for `route` to become a macro and to analyze/compile the routing at compile time

[10:52] <jnthnwrthngtn> Along with being able to look at `request-body` and signatures etc. to produce an autoamtic OpenAPI spec from the `route` block, so one can write Raku and get the sepc for free.

[10:53] <Xliff> nice!

[10:53] <Xliff> How long after the release of RakuAST will it be before we get macros?

[10:54] <Xliff> p6-GLib et all want to play... # :)

[10:54] <Xliff> Passed 600kloc of that, BTW

[10:54] <jnthnwrthngtn> Probably not long at all for something to play with, as with all these things a bit longer for maturity 

[11:02] *** Xliff left
[12:05] *** Xliff joined
[12:05] <Xliff> .

[12:06] <Xliff> jnthnwrthngtn: Ouch. You are not logging this channel?

[12:06] <Xliff> Oh, you are. Is there a web interface?

[12:08] <sena_kun> Xliff, https://logs.liz.nl/cro/live.html <- ?

[12:40] <Xliff> Oh, hey! Powered by Cro. Nice!

[13:27] <lizmat> Xliff: just wait when we're done with the styling (in cooperation with sena_kun :-)

[13:33] <Xliff> lizmat: Noticed that. Clicking the "scroll down" link results in unstyled output

[13:33] <Xliff> Is there more work to pass around?

[13:53] <lizmat> Xliff: possibly, after I get this first version out according to my liking :-)

[13:53] <Xliff> :)

[13:54] <Xliff> lizmat: If you want to wrap a function with a given argument, would that look something like this: $method.wrap(&wrapper).assuming($always-first-param)

[13:55] <lizmat> tbh, I would have to check  :-)

[13:55] <lizmat> never used .assuming myself

[13:55] <lizmat> if you look at the *current* underlying code, you understand why :-)

[13:55] <Xliff> Me neither.

[13:56] <Xliff> But then a light bulb started flickering, and I thought... "oh maybe"....

[17:16] *** sena_kun left
[20:15] *** SmokeMachine_ left
[20:42] *** SmokeMachine_ joined
[21:02] <Xliff> This is a bit confusing: Method 'resolve' must be implemented by Cro::WebApp::Template::Repository because it is required by roles: Cro::WebApp::Template::Repository

[21:03] <Xliff> Should I bug this?

[21:15] <jnthnwrthngtn> Depends, how did you make it happen?

[21:16] <jnthnwrthngtn> If in normal Cro usage, then it's odd and yes, report it.

[21:16] <jnthnwrthngtn> If you were trying to make a custom template repository, sounds like you punned the role (perhaps `is` instead of `does`)?

[21:21] <Xliff> Cro::WebApp::Template::Repository.new?

[21:21] <Xliff> That would be a role, wouldn't it?

[21:22] <Xliff> If I wan to compile a template, should I pass an instance or a type to :$repository when using Cro::WebAp::Template::Compiled.new()?

[21:23] <japhb> Roles can directly instantiate -- so if you .new a role directly, it auto-puns to a class containing just that role.

[21:24] <japhb> (Apologies if I misunderstood the question, BTW.  Can't tell if that's what you were asking.)

[21:24] <jnthnwrthngtn> Yeah, that `.new` is to blame; you can't .new a role with unimplemented methods.

[21:26] <jnthnwrthngtn> You're not really meant to instantiate Cro::WebApp::Template::Compiled yourself; you implement Cro::WebApp::Template::Repository and then give your instance to set-template-repository

[21:27] <jnthnwrthngtn> load-template does the creation of the Cro::WebApp::Template::Compiled

[21:27] <Xliff> When you say "Implement Cro::WebApp::Template::Repository" you are taling about implementing a class that does and satisfies the role, correct?

[21:27] <jnthnwrthngtn> Yes

[21:27] <Xliff> Ok, thanks!

[21:27] <Xliff> I'll have to see what all that entails.

[21:27] <jnthnwrthngtn> Like https://github.com/croservices/cro-webapp/blob/master/lib/Cro/WebApp/Template/Repository.pm6#L54 for example

[21:27] <jnthnwrthngtn> What're you aiming at achieving, btw?

[21:29] <jnthnwrthngtn> We only just starting pondering which pieces we want to make extensible API here, and we're only so imaginative (we've handled templates from the filesystem and from resources, and figure maybe somebody will want to have them pulled from a database at some point...)

[21:29] <Xliff> Outputting string-based cro templates. I have no need for files.

[21:30] <Xliff> This a first step from then moving to templates stored in a database.\

[21:30] <jnthnwrthngtn> oh, then maybe the path of least resistence is IO::String and passing that to `load-template`

[21:30] <Xliff> If you have suggestions as to better implement that, please let me know.

[21:30] <Xliff> Ah, yes. Um. IO::String?

[21:31] <jnthnwrthngtn> I think that's what the module is called. Make a string be like an IO handle.

[21:31] <Xliff> https://github.com/zostay/raku-io-string

[21:32] <jnthnwrthngtn> oh, maybe I'm confused and it only does the other direction? I thought it did string to IO handle also

[21:32] <jnthnwrthngtn> Sigh, surely somebody did a module for this :)

[21:32] <jnthnwrthngtn> Though of course maybe Cro::WebApp should just have a function for this, to avoid the workaround

[21:33] <Xliff> Yeah, I think it works by something like $buffer = IO::String; $buffer.print: "This is wat should be in the buffer"; and the using $buffer in the placed where an IO::Handle should go.

[21:33] <Xliff> ??

[21:34] <Xliff> I always wondered why there was no Str() based load-template

[21:37] <jnthnwrthngtn> I couldn't imagine somebody wanting to have them in the database, I guess.

[21:38] <jnthnwrthngtn> Probably because I can't imagine working on them without highlighting, auto-complete, reference resolution, etc. :D

[21:38] <japhb> jnthnwrthngtn: When you invest heavily in the hammer ....

[21:38] <jnthnwrthngtn> But yeah, just 'cus I wouldn't do something isn't a reason for it to be impossible. :) We should add a candidate taking a Str also.

[21:39] <jnthnwrthngtn> Can sneak it in ahead of tomorrow's (probably) release, I guess.

[21:40] <jnthnwrthngtn> Though I've gotta be afk for a bit now

[21:40] <japhb> Yay!

[21:40] * japhb is always happy to hear about new Cro releases.  :-)

[22:00] <Xliff> Thank you, jnthnwrthngtn 

[22:00] <Xliff> !

