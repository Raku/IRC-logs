[03:02] *** nine left
[08:26] *** lizmat_ left
[08:26] *** TempIRCLogger joined
[08:26] *** lizmat joined
[14:51] *** Altai-man joined
[14:51] *** Altai-man left
[21:55] *** Xliff left
[21:55] *** Xliff_ joined
[22:08] <Xliff_> Can someone tell me why my MySQL handles go away when using then in Cro?

[22:09] <japhb> Go away?

[22:11] <Xliff_> "Mysql server has gone away..."

[22:11] <Xliff_> It either does that or gets lost.

[22:11] <Xliff_> Also, sockets close when I am trying to debug away exceptions in controllers.

[22:32] <japhb> Hmmm, keepalive timeouts?

[22:40] <lizmat> yeah, I seem to recall MySQL requires a ping from the clients to keep the connection alive?

[22:40] <lizmat> also: that's settable in the MySQL config, as far as I remember

[22:49] <Xliff_> lizmat/japh: Yes, but both errors occur on app server STARTUP.

[22:54] <jnthnwrthngtn> Perhaps trying to share a single connection over multiple threads and it's getting confused?

[22:55] <jnthnwrthngtn> (I think DB::MySQL probably has the same connection pooling thing as with other DB::*, which makes this easier to get right; iirc, DBIish doesn't)

[22:58] <Xliff_> jnthnwrthngtn: So you suggest using DB::MySQL?

[22:58] <Xliff_> Or implementing a DB pool.

[22:59] <Xliff_> What is the best way to get thread id in raku?

[23:05] <jnthnwrthngtn> $*THREAD.id

[23:05] <jnthnwrthngtn> I've had much better luck with the DB:: series of modules

[23:05] <jnthnwrthngtn> I implemented a pooling scheme when using DBIish because (at least at the time) it was the only option for SQLite

[23:06] <jnthnwrthngtn> But for Postgres I always reach for DB::Postgres, because it does the pooling for me, and I prefer the API more generally.

[23:06] <jnthnwrthngtn> Time for some rest o/

[23:09] <Xliff_> jnthnwrthngtn: Thanks. I was hoping to NOT have to deal with differing APIs, hence DBIish.

[23:10] <Xliff_> I will look into the DB::* modules.

