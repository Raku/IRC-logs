[06:36] *** Xliff_ joined
[06:39] *** Xliff left
[10:56] *** sena_kun joined
[12:14] *** sena_kun left
[12:15] *** sena_kun joined
[12:15] *** sena_kun left
[12:19] *** sena_kun joined
[14:27] *** sena_kun left
[15:00] *** sena_kun joined
[15:01] *** sena_kun left
[17:15] *** sena_kun joined
[17:36] *** TheAthlete joined
[18:06] *** sena_kun left
[18:08] *** sena_kun joined
[19:40] <lizmat> I'm considering writing a module that would act as a server, and the only thing it would do is to capture raw requests (header + body) and store them in a "temp" directory

[19:40] <lizmat> and return a 200 OK

[19:40] <lizmat> the reason for this is for de-coupling of webhooks from their processing

[19:41] <lizmat> e.g. to be able to re-run a webhook again locally if something died processing the webhook contents

[19:42] <lizmat> or to be able to upgrade webhook handling without losing webhook events

[19:43] <lizmat> my question: does it make sense to use Cro::HTTP::Server for this?  and if so, to use Cro::HTTP::Router for this as well ?

[19:43] <lizmat> it feels that Cro::HTTP::Server should be enough by itself

[19:44] <lizmat> anything not POST should just be some non-200 code

[19:44] <lizmat> anything POST should be OK

[19:45] <lizmat> no decoding, just dumping whatever was received as binary

[19:45] <lizmat> or is there something like that already ?

[22:02] *** TheAthlete left
[22:07] <jnthnwrthngtn> lizmat: Maybe 204 No Content is even more appropriate. But yeah, you could get away with any `route` and write a Cro::Transform directly, although it's hardly a lift to write a route block that swallos every POST as you want and probably less code

[22:08] <jnthnwrthngtn> route { post -> *@ { request-body-blob -> $blob { #`( then write out headers and the body blob ) } }

[22:09] <jnthnwrthngtn> Note that `request.Str` will get you the serialized HTTP request line and headers

[22:09] <jnthnwrthngtn> So it's really easy :)

[22:09] <lizmat> ok, I was getting to that realization... at least it would allow for https:// support out of the box as well

[22:10] <jnthnwrthngtn> Unless you need to be so close to the wire that you care about retaining, say, chunked transfer encoding or on-the-wire compression

[22:10] <lizmat> no, I don't  :-)

[22:10] <jnthnwrthngtn> Figured not from the problem description :)

[22:10] <lizmat> ok, Cro::Webhook, here we come  :-)

[22:14] <jnthnwrthngtn> Have fun :)

[22:14] <lizmat> will try so  :-)

