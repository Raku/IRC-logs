[00:09] *** Pe_Elle joined
[01:11] *** Pe_Elle left
[01:26] *** Pe_Elle joined
[02:27] *** Pe_Elle left
[02:39] *** Pe_Elle joined
[02:40] <discord-raku-bot> <aruniecrisps> update: more life stuff getting in the way, i'll get to it tomorrow

[02:41] <discord-raku-bot> <aruniecrisps> i do want to help improve cro, i have a couple of ideas as well in addition to the Cromponent work

[02:44] *** Pe_Elle left
[03:06] *** Pe_Elle joined
[03:57] <discord-raku-bot> <aruniecrisps> @lizmat, it doesn't look like it's re-precompiling it looks like

[03:57] <discord-raku-bot> <aruniecrisps> @librasteve where do you suggest i throw some say now - $starts?

[04:09] *** Pe_Elle left
[04:24] *** Pe_Elle joined
[05:25] *** Pe_Elle left
[05:38] *** Pe_Elle joined
[06:39] *** Pe_Elle left
[06:55] *** Pe_Elle joined
[07:22] <SmokeMachine> I'm planing on deprecating Cromponent's template-with-components in favor of something like this: https://github.com/FCO/Cromponent/blob/main/bin/todo.raku where you do not use Cromponent on your cro code, only on your components it self (like this: https://github.com/FCO/Cromponent/blob/main/bin/lib/Todo.rakumod) and your component is compiled as template and you can use that inside your templates (like this: 

[07:22] <SmokeMachine> https://github.com/FCO/Cromponent/blob/main/resources/todo-base.crotmp) and you only use your components on your cro routes if you want it to auto-create endpoints to themselves (like here: https://github.com/FCO/Cromponent/blob/main/bin/todo.raku#L14). Any opinion about that? Any suggestion? librasteve?

[07:27] <SmokeMachine> I think that ways is more "cro-ish"... and it also have the benefit of, if you call the component with a component object (eq: `<&Todo(.todo)>`) it uses the object as data (as it already did), but if you instead passes some named arguments (eg: `<|Boilerplate(:htmx, :title('Todo - Cromponent'))></|>`), it creates a new object with those parameters and use that created object as data.

[07:28] <SmokeMachine> (Just to make it clear, about instantiating the obj, there is no difference between sub and macro... I just used the examples from the code...)

[07:57] *** Pe_Elle left
[08:13] *** Pe_Elle joined
[09:15] *** Pe_Elle left
[09:29] *** Pe_Elle joined
[10:26] *** sena_kun joined
[10:29] *** sena_kun left
[10:31] *** sena_kun joined
[11:01] <SmokeMachine> This is my idea for deprecating `template-with-components`: https://github.com/FCO/Cromponent/pull/9 this PR has an error I'm not being able to fix... the error message says something about `lang-call` that seems to be a dispatcher and it happens on `use`... but the odd thing is that it works if I `use Todo`, but doesn't when I `use todo-routes` that uses Todo... but if I Comment the `use Todo` from `todo-routes` it works... I am 

[11:01] <SmokeMachine> manipulating the EXPORT of Todo, so that might be related to that... But I couldn't find the problem or a solution. The PR description has more details. Could someone help me on that?

[11:35] *** Pe_Elle left
[12:00] *** Pe_Elle joined
[12:02] *** Pe_Elle left
[12:02] *** Pe_Elle joined
[12:34] *** Pe_Elle left
[12:35] *** Pe_Elle joined
[12:40] *** Pe_Elle left
[12:56] *** Pe_Elle joined
[13:41] *** guifa left
[13:56] *** Pe_Elle left
[14:11] *** Pe_Elle joined
[14:55] *** librasteve_ joined
[14:58] <discord-raku-bot> <librasteve> SmokeMachine: thanks for checking on the ability of Cro Template to do nested iterables - I searched the docs for this and could not find it ... I see that it does do the obvious thing

[14:59] <discord-raku-bot> <librasteve>  <@tables>   <ul>     <@tags><li><$_></li></@>   </ul>   <&Table(.table)>   <:separator><br><hr><br></:> </@> 

[15:02] <discord-raku-bot> <librasteve> sharing here for others to see - at the time I hit this concern, I was unsure about whether the inner var needed to be given a name like:

[15:02] <discord-raku-bot> <librasteve>  $topic<tables> = tables[   { :tags<a e i o u>, :table($table),  },   { :tags<a e i o u>, :table($themed), },   { :tags<a e i o u>, :table($striped),}, ]; 

[15:03] <discord-raku-bot> <librasteve> maybe we should raise a PR on the Cro template docs?

[15:12] *** Pe_Elle left
[15:15] <discord-raku-bot> <librasteve> that said, the use of nested iterables in Cro was (for me) a hurdle [both in having no examples in the docs / LLM to steal and in that it raised questions in my mind like how can I index into an array in Cro template language]. Thank you for solving that, but it was not the only worry I had - how can I do something conditional in the first iteration (ie for th on the left element of a row), how to put conditional

[15:15] <discord-raku-bot> classes in the table tag and so on and so on ... you probably will rightly say that these things are possible in Cro template, but each time I needed to add a feature to my code I found that Cro template syntax was awkward and ugly (for me) vs. jnthns advice (see above) to do only simple logic in Cro template language and it just seemed like puching water uphill vs. coding directly in raku (with the help of HTML::Functional).

[15:15] <discord-raku-bot> This for me was a subjective call - I don't expect you to agree ... and I am sure the Cro templates will be a main / the main way to build components for Cro websites and that I will likely need to marry these two ideas (components in functional raku and Cro template Cromponents) ... eg for Cro user auth, for Cro forms and so on.

[15:17] <discord-raku-bot> <librasteve> Anyway I do not mean to criticize Cromponents, I think it is a great way to buikd components for Cro using the template syntax and I think we need that ... I am just explaining why my path will diverge for now...

[15:17] *** Pe_Elle joined
[15:22] <SmokeMachine> librasteve: I also have some Cro components not using cro templates half baked, if you'd like to take a look...

[15:23] *** Pe_Elle left
[15:54] *** Pe_Elle joined
[15:58] *** Pe_Elle left
[16:18] *** Pe_Elle joined
[17:02] *** Pe_Elle left
[17:02] *** Pe_Elle joined
[17:51] <discord-raku-bot> <librasteve> yeah - I am very happy to take a look and hope to have crotmp and functional templates be interoperable (such as one kind can take a body of another kind), personally I am really liking the code style and legibility via HTML::Functional ... (which is just a fancy way to make an HTML Str) so it would be awesome if you could make that work too

[17:52] <discord-raku-bot> <librasteve> my latest efforts are here https://github.com/librasteve/raku-Cro-Website-Basic/edit/05-sharrc4/lib/Component/MyLib.rakumod (from yesterday)

[17:55] <discord-raku-bot> <librasteve> I have been vaguely considering changing to  method render($topic) ie. return a callable that takes a crotmp style topic ... why? that way I expect that my components will be precomped and can be installed and called from a route eg via zef install MyLib to avoid recompiling them all in the build and to have similar cached behaviour as crotmps

[18:14] *** Pe_Elle left
[18:30] *** Pe_Elle joined
[18:34] *** Pe_Elle left
[18:48] *** Pe_Elle joined
[19:50] *** Pe_Elle left
[20:15] *** Pe_Elle joined
[20:19] *** Pe_Elle left
[20:49] *** Pe_Elle joined
[20:54] *** Pe_Elle left
[21:30] <patrickb> I have another question wrt how we want to do our releases. The different Cro libs are interdependent and they currently specify exact version numbers in their depends sections.

[21:32] <patrickb> This is basically following the idea of having one single set of library versions that are meant to work together. But since sometimes there are releases with only changes in some of the libraries, it will require releases of other modules only to bump the dependent version number.

[21:33] *** Pe_Elle joined
[21:34] <patrickb> This can cause a flood of module releases for even a single change in e.g. Cro::HTTP. How do we want to deal with this?

[21:35] <patrickb> I think the previous tactic has been to not release too often.

[21:38] *** Pe_Elle left
[21:38] <patrickb> We could alternatively try to change the dependency specifications to something like `Cro::TLS:ver<0.8.9+>:auth<zef:cro>:api<1>` and add an API version to all of the modules.

[21:39] <patrickb> This would allow bumping one module without having to bump the others only for the dependency. But we'll loose having a uniform module set on our users computers.

[21:40] <patrickb> So to sumarize. We could:

[21:41] <patrickb> 1. Keep the module set locked together version wize and try to not release too often.

[21:42] <patrickb> 2. Keep the module set locked together version wise. Release often and accept we'll create module release floods.

[21:43] <patrickb> 3. Give up on locking the module set together version wise and specify minimum versions in dependencies from now on.

[22:02] *** Pe_Elle joined
[22:25] <patrickb> I lean towards option 3. Please do give your opinion, I'd like to have some other opinions on this!

[22:52] *** guifa joined
[23:04] *** Pe_Elle left
[23:25] *** librasteve_ left
[23:28] <lizmat> perhaps 3 for minor releases, but 1 for major releases ?

[23:32] *** sena_kun left
[23:32] *** Pe_Elle joined
[23:37] <discord-raku-bot> <aruniecrisps> @librasteve these are some of the time differentials that i'm seeing after adding some say now - $times. i just pushed the latest changes to github, please have a look whenever you can

[23:37] <discord-raku-bot> <aruniecrisps> https://cdn.discordapp.com/attachments/1309518836441022484/1322709952120361014/image.png?ex=6771dd23&is=67708ba3&hm=6fdc9acd1bf0ef6ddc90abe1d8b4b4a896f72112e7bf676fe07d5db75819dde2&

[23:37] *** Pe_Elle left
[23:49] *** guifa left
[23:51] *** Pe_Elle joined
[23:57] *** Pe_Elle left
