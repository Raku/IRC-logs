[10:19] <lizmat> just realized I could do:

[10:19] <lizmat> % ps ax | rak §vi

[10:19] <lizmat> to find all of my vi processes  :-)

[10:20] <lizmat> just looking for "vi" including all of the "Service" lines as well

[10:20] <lizmat> *includes

[12:47] <Geth> ¦ App-Rak/main: 2927a3b4a1 | (Elizabeth Mattijsen)++ | 2 files

[12:47] <Geth> ¦ App-Rak/main: Allow postcircumfix[] on strings to index into the .words

[12:47] <Geth> ¦ App-Rak/main: 

[12:47] <Geth> ¦ App-Rak/main: This looks like it is the most useful functionality within the

[12:47] <Geth> ¦ App-Rak/main: context of Raku code patterns

[12:47] <Geth> ¦ App-Rak/main: review: https://github.com/lizmat/App-Rak/commit/2927a3b4a1

[12:58] <Geth> ¦ App-Rak/main: 4f1e0526ce | (Elizabeth Mattijsen)++ | 2 files

[12:58] <Geth> ¦ App-Rak/main: Default to *not* showing line numbers when reading from STDIN.

[12:58] <Geth> ¦ App-Rak/main: 

[12:58] <Geth> ¦ App-Rak/main: Feels to me that is the most sane thing to do

[12:58] <Geth> ¦ App-Rak/main: review: https://github.com/lizmat/App-Rak/commit/4f1e0526ce

[15:46] <SmokeMachine> §vi? I don't get it...

[16:14] <SmokeMachine> lizmat: I've been wondering about a simpler version of `rak`... that would be able to receive between 1 and 3 code blocks. one that would run for each file (defaults to: `{ .relative => .lines }`) it would receive a IO::Path and return a list of items to be matched by the 2nd block. The 2nd block would receive one of those items returned by the first one (if the first block is not changed, that would be a line) and it would use 

[16:14] <SmokeMachine> the object on `$*PARENT-ITEM` to `.add-item` the matched item (defaults to: `{ $*PARENT-ITEM.add: $/ if /pattern/ }`). And the last block would receive a list of Item objects and each obj would have a list of children objects, to print it out (the default would be: `{ gather { for .<> { take "{ .name }:"; take "{ .item-index }: { .highlighted-match }".indent: 4 }  } }`).

[16:15] <SmokeMachine> lizmat: I'm not sure I'm mentioning this here... I do not intent on implementing it... but I can't stop thinking on it...

[16:15] <lizmat> §vi is short for vi --type=words

[16:15] <lizmat> --per-line takes a code block that's given an IO::Path and is supposed to create items to search in

[16:16] <lizmat> so that part is there already

[16:16] <lizmat> rak --per-line='*.lines.head(5)'

[16:16] <lizmat> would only look in the first 5 lines of each file

[16:17] <lizmat> internally, there is a mapper functionality that sorta is what you describe

[16:17] <lizmat> but I'm still unsure how to externalize it

[16:18] <lizmat> SmokeMachine: please distill what you would like to achieve in an example in an issue, so that I can also ruminate about it  :-)

[16:19] <SmokeMachine> lizmat: I'm not sure if I'd like to achieve anything... :(

[16:26] <SmokeMachine> using that, something to, for example, find the name of every module where you are the author (assuming a list of modules) would be something like: `not-rak '{ .slurp.from-json if .basename eq "META6.json" }' '{ $*PARENT-ITEM.add: $_ if .<author> eq "lizmat" }' '{ .content<name>.say for .<> }'`

[16:27] <SmokeMachine> lizmat: does that make any sense?

[16:28] <lizmat> rak --json-per-file {,<name> if .<auth> eq "zef:lizmat"}

[16:28] <lizmat> rak --json-per-file {.<name> if .<auth> eq "zef:lizmat"}

[16:29] <SmokeMachine> yes, that makes sense and is much smaller...

[16:30] <lizmat> in the REA dir:

[16:30] <lizmat> rak --json-per-file '{.<name> if .<auth> eq "zef:lizmat"}' meta --quietly --unique

[16:33] <SmokeMachine> yes... I don't know... I think I was just finding a way to not need all those parameters... but that doesn't make much sense...

[16:33] <lizmat> if you do this often, you can do:

[16:34] <lizmat> rak --json-per-file --pattern='{.<name> if .<auth> eq "zef:lizmat"}' --quietly --unique --save=module-names

[16:34] <lizmat> and then go:

[16:34] <lizmat> rak --module-names meta

[16:37] <SmokeMachine> no, I don't do that often... but something I do often is reading all the options... I think that's what I was trying to avoid... but that doesn't make sense...

[16:37] <lizmat> well, you could also  create your own set of shortcuts

[16:37] <SmokeMachine> yes

[16:37] <lizmat> rak --json-per-file --save=j

[16:38] <lizmat> rak --quietly --save=q

[16:38] <lizmat> rak --unique --save=u

[16:38] <lizmat> and you could do:

[16:38] <lizmat> rak -jqu '{.<name> if .<auth> eq "zef:lizmat"}' meta

[16:51] <lizmat> afk&

