[04:02] *** [Coke]___ joined
[04:05] *** [Coke] left
[10:39] <Geth> ¦ App-Rak/main: 6b714d4a73 | (Elizabeth Mattijsen)++ | 8 files

[10:39] <Geth> ¦ App-Rak/main: Allow URLs as file specification

[10:39] <Geth> ¦ App-Rak/main: 

[10:39] <Geth> ¦ App-Rak/main: Also allow multiple ecosystems to be specified with --ecosystem

[10:39] <Geth> ¦ App-Rak/main: review: https://github.com/lizmat/App-Rak/commit/6b714d4a73

[10:45] <Geth> ¦ rak/main: 21cd3df75c | (Elizabeth Mattijsen)++ | 3 files

[10:45] <Geth> ¦ rak/main: 0.0.32

[10:45] <Geth> ¦ rak/main: review: https://github.com/lizmat/rak/commit/21cd3df75c

[11:43] <Geth> ¦ App-Rak/main: 10a3139922 | (Elizabeth Mattijsen)++ | xt/02-simple.rakutest

[11:43] <Geth> ¦ App-Rak/main: Add tests for --sourcery, --ecosystem, URLs

[11:43] <Geth> ¦ App-Rak/main: review: https://github.com/lizmat/App-Rak/commit/10a3139922

[12:56] *** [Coke]___ is now known as [Coke]

[14:30] <Geth> ¦ App-Rak/main: 6c9fdfa34b | (Elizabeth Mattijsen)++ | 6 files

[14:30] <Geth> ¦ App-Rak/main: Add support for --description

[14:30] <Geth> ¦ App-Rak/main: 

[14:30] <Geth> ¦ App-Rak/main: Allowing users to add a description to a custom option

[14:30] <Geth> ¦ App-Rak/main: review: https://github.com/lizmat/App-Rak/commit/6c9fdfa34b

[18:02] *** Nemokosch joined
[18:21] <Nemokosch> Hello hello

[18:21] <Nemokosch> rak '{ .say if .comb(/ \d+ /).first(* ~~ (1 .. 65)) }' path_of_file.c

[18:22] <Nemokosch> do you know a significantly easier way to get the lines that contain a number between 1 and 65? maybe I'm just too much of a noob and overcomplicating things

[18:26] <Nemokosch> oh and found the answer to the other question, --no-group-matches can remove the separating lines between the groups of consecutive matches

[18:28] <Nemokosch> Noting another thing I'm gonna try to find out: "find all words longer than 31 characters in all files with a certain extension"

[18:28] *** Nemokosch left
[18:36] *** Nemokosch joined
[18:48] <Nemokosch> It turned out that I needed to rely on a naming convention rather than the extension and there is something I don't understand

[18:49] <Nemokosch> rak '/ \w **  32..* /' --file='/ "_config" $ /' src/param/

[18:51] <Nemokosch> ^ this seems to traverse the known universe; eventually it halted on an Excel file or something

[18:51] <Nemokosch> however

[18:51] <Nemokosch> rak '/ \w **  32..* /' --file='* ~~ / "_config" $ /' src/param/

[18:52] <Nemokosch> (I only added smartmatching to the whatever star)

[18:52] <Nemokosch> this works just as I wished

[18:52] <Nemokosch> is this intentional design or a bug?

[19:00] <lizmat> If you want to limit to files with extension "foo", you can do --extensions=foo

[19:02] <[Coke]> did you mean _config and not a . ?

[19:06] <Nemokosch> yes, unfortunately the system wouldn't use extensions but mere naming conventions

[19:06] <Nemokosch> blah_config

[19:07] <[Coke]> ah

[19:09] * [Coke] plays with rak, finds Steams engish profanity filter which is a file with 69 lines of regular expressions.

[19:09] <Nemokosch> HAhahaha

[19:09] <[Coke]> (was looking for .gz files, not files with swears. :)

[19:10] <lizmat> Nemokosch: re " "find all words longer than 31 characters in all files with a certain extension""   do you want to know just the words, or where they are in the files ?

[19:11] <Nemokosch> lizmat: it would be good to at least know the line number (but the whole line is not necessary)

[19:12] <Nemokosch> actually even just the word can be fine but eventually I'd want to find them in the file

[19:15] <lizmat> rak '/ \w ** 32..* /' --file='*.ends-with("_config")'

[19:15] <lizmat> that should also highlight the words

[19:15] <Nemokosch> nice :)

[19:16] <Nemokosch> re: which files to pick - the sad truth is that there isn't a simple and accurate way to determine which files are "this sort of config file" and which aren't. Another check I would be happy with: "select this file only if it contains a certain pattern"

[19:16] <Nemokosch> they tend to have a header with a certain description

[19:17] <lizmat> is there a program that you could call to select?  then you could use --exec

[19:17] <Nemokosch> --shell='grep -q "yadda yadda config" $_' is okay

[19:18] <Nemokosch> I'm just wondering if there isn't a more "native" way

[19:18] <lizmat> well, you could always use a first call to determine the files, and then pipe that to the next rak with --files-from=-

[19:20] <lizmat> rak '/ initial selection /' --file='*.ends-with("_config")' --files-with-matches | rak --files-from=- '/ further selection /'

[19:20] <Nemokosch> is that dash a shell feature or handwritten?

[19:20] <lizmat> handwritten

[19:20] <lizmat> just following convention

[19:23] <lizmat> re incorrect config file types: would your search query produce false positives if inspecting the "wrong" config file ?

[19:24] <Nemokosch> yes - but since there is no foolproof definition, I'd pick false positives over false negatives so that's acceptable

[19:26] <Nemokosch> to make the story at least a bit vivid: the story is that a certain config utility in this project stored the keys in char[32], hence anything that is at least 32 characters will fail

[19:26] <Nemokosch> and it turned out that there were indeed some 32 long config key names

[19:31] <lizmat> re: all lines with numbers between 1 and 65:

[19:31] <lizmat> rak '/ \d+ <?{ 1 <= $/.Int <= 65 }> /'

[19:33] <lizmat> re false positives being ok: don't bother about the extension / looking at headers ?

[19:37] <Nemokosch> okay... that would be a bit overboard

[19:38] <Nemokosch> remember the Excel files? lol

[19:38] <lizmat> well, if these config files share *some* kind of extension, then you could filter on that with --file

[19:39] <Nemokosch> they share the extension of no extension, if that counts

[19:39] <Nemokosch> at least I think so

[19:39] <lizmat> --extensions=,

[19:39] <lizmat> would limit to files without extension

[19:52] <lizmat> Nemokosch: anything else I can help you with?

[20:08] <lizmat> Nemokosch: if you would have an option --accept='*.slurp.starts-with("foo")'  the would be given an IO::Path object of the file being checked for inclusion

[20:08] <lizmat> that would sorta solve your problem, no?

[20:22] <Nemokosch> yes, or at least it would provide quite a great variety of tools

[20:23] <Nemokosch> anyway, thank you, I think as much as it could be investigated with simple CLI tools, we got it covered :)

[20:46] <lizmat> --accept='*.slurp.contains("use Test")   would accept files that have "use Test" in them

[20:46] <lizmat> rak foo --accept='*.slurp.contains("use Test")

[20:46] <lizmat> would look for "foo" in files with "use Test" in them

[20:46] <lizmat> rak foo --deny='*.slurp.contains("use Test")

[20:47] <lizmat> would look for "foo" in files that do NOT have "use Test" in them

[20:47] <lizmat> anyways, glad rak was of help  :-)

[20:50] <lizmat> (I hope :-)

[21:16] <Geth> ¦ rak/main: 0561c4662b | (Elizabeth Mattijsen)++ | 6 files

[21:16] <Geth> ¦ rak/main: 0.0.33

[21:16] <Geth> ¦ rak/main: review: https://github.com/lizmat/rak/commit/0561c4662b

[21:20] <Geth> ¦ App-Rak/main: 10f84c38d4 | (Elizabeth Mattijsen)++ | 8 files

[21:20] <Geth> ¦ App-Rak/main: Add support for --accept and --deny

[21:20] <Geth> ¦ App-Rak/main: 

[21:20] <Geth> ¦ App-Rak/main: After discussing a use case on #raku-rak .  Allows one to specify Raku

[21:20] <Geth> ¦ App-Rak/main: code that will accept a file or deny a file from being further inspected.

[21:20] <Geth> ¦ App-Rak/main: 

[21:20] <Geth> ¦ App-Rak/main: Also add some answers to some questions in the FAQ.

[21:20] <Geth> ¦ App-Rak/main: 

[21:20] <Geth> ¦ App-Rak/main: Add default --file setting always, unless it is explicitely set, or

[21:20] <Geth> ¦ App-Rak/main: set implicitely by another explicit option (such as --extensions).

[21:20] <Geth> ¦ App-Rak/main: review: https://github.com/lizmat/App-Rak/commit/10f84c38d4

[21:22] <Nemokosch> Sure thing! Even if I can't completely ditch find, grep and similar *nix tools because non-modifiable legacy systems but it really plays well with the Raku-as-utility approach

[21:22] <lizmat> glad to hear!

[22:34] *** Nemokosch left
