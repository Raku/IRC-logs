[07:20] *** domidumont joined
[07:21] *** p6bannerbot sets mode: +v domidumont

[13:28] *** leont joined
[13:28] *** p6bannerbot sets mode: +v leont

[13:39] <leont> This thing where people keep using p5 prove in p6 land is â€¦ disappointing.

[14:07] <lizmat> fwiw, it's been a while since I tried it

[14:07] <lizmat> what is the invocation again to make "make spectest" use prove6 ?

[14:15] <leont> HARNESS_TYPE=6 make spectest

[14:15] <lizmat> leont++

[14:17] <leont> Though my main concern is people using prove5 when developing p6 modules.

[14:19] <leont> zef can use either depending on availability, mi6 and assixt shell out to prove5 (I will PR mi6 soon)

[14:21] <leont> And I've seen references to developers using bulky aliases like alias 6prove="PERL6LIB=lib prove -e perl6", and that soon will have to be "PERL6LIB=lib prove --ext t --ext t6 -e perl6"

[14:22] <lizmat> Original exception:

[14:22] <lizmat>         too many open files

[14:22] <lizmat> :-(

[14:23] <lizmat> An operation first awaited:

[14:23] <lizmat>   in sub MAIN at t/harness6 line 94

[14:23] <lizmat>   in block <unit> at t/harness6 line 26

[14:23] <leont> Sounds like bitrot :-/

[14:23] <lizmat> sounds to me something(s) aren't being closed

[14:24] * lizmat checks for repeatability

[14:25] <leont> Essentially all IO is Proc::Async, which doesn't have a close method.

[14:26] <lizmat> hmmm....

[14:26] <leont> If something has to be closed, I wouldn't know where in my code that could happen

[14:26] <lizmat> good point

[14:26] <leont> Also, I don't remember seeing that error previously (though I haven't tried in a while), so that's smelling like a regression in rakudo/moarvm

[14:27] <lizmat> yeah, repeatable

[15:26] <b2gills> To close Proc::Async you close all of the handles

[15:42] <lizmat> b2gills: and how do you do that?  $proc.stdout.tap.close ?

[16:22] *** domidumont left
[16:27] <leont> That would certainly need to be documented

[17:08] <leont> But it still doesn't make sense to me. The pipe should be closed automatically on EOF. Keeping it open never makes sense.

[17:10] <lizmat> fwiw, I agree  :-)

[17:10] *** patrickb joined
[17:11] *** p6bannerbot sets mode: +v patrickb

[17:33] <b2gills> proc.stdout.close

[17:34] <lizmat> b2gills: No such method 'close' for invocant of type 'Proc::Async::Pipe'

[17:34] <b2gills> Actually proc.stdin.close usually is enough for the program to terminate

[17:34] <lizmat> you probably meant: proc.stdout.tap.close ?

[17:35] <b2gills> Maybe its Proc I'm thinking fo

[17:35] <b2gills> of

[17:35] <lizmat> that's nowadays a shim for Proc::Async

[17:52] *** domidumont joined
[17:53] *** p6bannerbot sets mode: +v domidumont

[21:10] *** domidumont left
[21:12] *** patrickb left
