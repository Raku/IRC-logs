[04:04] *** lizmat left
[04:27] *** ribasushi left
[04:34] *** ribasushi joined
[04:35] *** p6bannerbot sets mode: +v ribasushi

[04:53] *** ribasushi left
[04:59] *** ribasushi joined
[05:00] *** p6bannerbot sets mode: +v ribasushi

[05:59] *** domidumont joined
[06:00] *** p6bannerbot sets mode: +v domidumont

[06:09] *** domidumont left
[06:51] *** domidumont joined
[06:52] *** p6bannerbot sets mode: +v domidumont

[08:59] *** eponym joined
[08:59] *** p6bannerbot sets mode: +v eponym

[08:59] *** eponym left
[11:38] *** leont joined
[11:39] *** p6bannerbot sets mode: +v leont

[11:59] *** lizmat joined
[11:59] *** p6bannerbot sets mode: +v lizmat

[14:03] *** p6bannerbot left
[14:04] *** p6bannerbot joined
[14:04] *** ChanServ sets mode: +o p6bannerbot

[15:11] *** domidumont left
[15:37] *** domidumont joined
[15:37] *** p6bannerbot sets mode: +v domidumont

[15:53] *** sjn joined
[15:53] <sjn> hey folks o/

[15:54] *** p6bannerbot sets mode: +v sjn

[15:55] <sjn> I've been playing around with docker images lately, and there's been something that has been bugging me there, and I'm wondering if anyone here has had the same experience...

[15:57] <sjn> so when building and installing some distribution, the usual steps are-(ish?): resolve, fetch, extract, filter?, build, test, install and report

[15:58] <sjn> but when playing around with containers, they usually discourage the test step - especially if it takes a long time and definitely if it depends on some external resources

[15:58] <sjn> I guess the report step might be problematic too (not sure though)

[15:59] <sjn> the reason for this is that when building a container, most resources like non-trivial network setup or exteral services just aren't available

[16:00] <sjn> this is especially true for applications that are built/tested/installed using the perl6 toolchain

[16:01] <sjn> (e.g. for "integration tests" etc.)

[16:02] <sjn> this made me think, would it be sensible to have the toolchain offer the possibility to postpone any testing until after install is done?

[16:03] <sjn> meaning the container build phase is done, and when one eventually gets to running the container, there's enough installed so that one can do a "post-install" test run

[16:04] <sjn> ..and perhaps even a "post-install" report, if relevant

[16:05] <sjn> has anyone else here thought about something similar?

[16:05] <leont> Installing tests in such a way that they can be rerun later is generally a good idea IMO

[16:12] <sjn> yeah. a former colleage of mine tried to do something around that with Module::Build back at the QAH in Lancaster, but we never got that project into a useful state...

[16:12] <sjn> back then I thought this was mostly useful for re-running tests when dependencies are updated, but today I see that there are more uses

[16:13] <sjn> of which the interaction with containers is probably the most important one

[16:20] *** lizmat left
[17:58] *** lizmat joined
[17:58] *** p6bannerbot sets mode: +v lizmat

[18:25] *** patrickb joined
[18:26] *** p6bannerbot sets mode: +v patrickb

[18:57] *** domidumont left
[22:31] *** patrickb left
