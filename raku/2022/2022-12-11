[00:00] *** reportable6 left
[00:01] *** sena_kun left
[00:02] *** reportable6 joined
[00:12] *** abraxxa-home left
[00:54] <Geth> ¦ doc: 057131fef5 | (Will Coleda)++ | xt/check-signatures.t

[00:54] <Geth> ¦ doc: Fix error check

[00:54] <Geth> ¦ doc: 

[00:54] <Geth> ¦ doc: A successful run can still generate output to stderr, that's not a failure.

[00:54] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/057131fef5

[00:58] <Geth> ¦ doc: coke self-assigned Remove 'Defined as:' https://github.com/Raku/doc/issues/4134

[01:04] *** xinming left
[01:06] *** xinming joined
[01:15] *** lichtkind__ left
[01:37] <Geth> ¦ doc: 0779d68747 | (Will Coleda)++ | 112 files

[01:37] <Geth> ¦ doc: Remove Defined/Declared as

[01:37] <Geth> ¦ doc: 

[01:37] <Geth> ¦ doc: Closes #4134

[01:37] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/0779d68747

[01:37] <Geth> ¦ doc: 6d037720ad | (Will Coleda)++ | 2 files

[01:37] <Geth> ¦ doc: fix routine declarations

[01:37] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/6d037720ad

[01:38] *** linkable6 left
[01:40] *** linkable6 joined
[01:40] <guifa> okay I'm blanking but

[01:42] *** Kaiepi left
[01:44] <guifa> nm am idiot

[01:49] <Geth> ¦ problem-solving: add472a844 | (Vadim Belman)++ | solutions/rakudo/Use-main-branch.md

[01:49] <Geth> ¦ problem-solving: Resolution for #298

[01:49] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/commit/add472a844

[01:49] <Geth> ¦ problem-solving: e1a76d0ea0 | (Vadim Belman)++ (committed using GitHub Web editor) | solutions/rakudo/Use-main-branch.md

[01:49] <Geth> ¦ problem-solving: Merge pull request #356 from vrurg/issue_298

[01:49] <Geth> ¦ problem-solving: 

[01:49] <Geth> ¦ problem-solving: Resolution for issue 298

[01:49] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/commit/e1a76d0ea0

[02:30] *** razetime joined
[02:37] *** discord-raku-bot left
[02:37] *** discord-raku-bot joined
[02:40] *** razetime left
[02:58] <Geth> ¦ doc: 94f2ae3c28 | (Will Coleda)++ | 4 files

[02:58] <Geth> ¦ doc: pass check-signatures

[02:58] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/94f2ae3c28

[03:02] *** euandreh left
[03:04] *** euandreh joined
[03:13] *** MasterDuke joined
[04:11] <lucs> When I print $?FILE.IO.absolute from a module file, why does the module name get appended to the result, e.g., ｢.../foo.rakumod (foo)｣?

[04:13] *** evalable6 left
[04:13] *** linkable6 left
[04:15] *** linkable6 joined
[04:15] *** evalable6 joined
[04:32] <[Coke]> (You can see it with just dd $?FILE - the IO and absolute don't change it)

[04:34] *** razetime joined
[04:40] <lucs> Well, I actually need the module's file name (to pass it to ｢raku --doc the-module's-file-name｣)

[04:41] <lucs> If you've got a minute, can you see if you get the same result as I do here?: 

[04:41] <lucs> https://gist.github.com/lucs/f812bd3e70ea242ec775081cee4454f4

[04:43] <lucs> I'm using a directory of /tmp, because earlier, }

[04:44] <lucs> I'm using a directory of /tmp, because earlier I was placing my test files in /tmp, and there is so much stuff in there, that it took an eternity for the module to be found, and I thought the program was hanging.

[04:45] <lucs> A subdirectory, dammit I can't type.

[04:55] <lucs> Oh well, going to bed, I'll check back later.

[05:30] *** holyghost joined
[05:35] *** holyghost left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:27] *** Kaiepi joined
[06:39] *** sarna left
[07:10] *** hobbified joined
[07:12] <hobbified> If I have a class with `has Int @.items is rw`, then I can `@.items = ()` in a method and it clears the array. With `has int @.items is rw` the same assignment throws "Cannot unbox a type object (Nil) to int". A) is that a bug? I'm not trying to nil an item, I'm trying to clear the whole array, and otherwise it seems to behave fine. B) is there something else I can do that won't error?

[07:19] <hobbified> okay, found something while playing around: `@!items = ()` doesn't error.

[07:27] <xinming> probably a bug, IMO,   @.items = ();  should work

[07:27] <xinming> when we have `has Int @.items is rw`;   @.items = ()     should work.

[08:10] *** evalable6 left
[08:10] *** linkable6 left
[08:11] *** evalable6 joined
[08:13] *** linkable6 joined
[08:30] *** euandreh left
[08:50] <hobbified> it does work with Int, it doesn't work with int.

[08:51] <hobbified> but yeah, I feel like it's a bug. But I'm not much of an expert :)

[08:51] *** lichtkind__ joined
[08:59] <lizmat> hobbified: feels like a bug, please make an issue  :-)

[09:04] *** ProperNoun left
[09:04] *** ProperNoun joined
[09:06] <hobbified> lizmat: where?

[09:06] <lizmat> https://github.com/rakudo/rakudo/issues/new

[09:07] <hobbified> okay, will do in the morning

[09:08] <lizmat> ++hobbified 

[09:11] <kjp> I'm confused—which happens frequently. Are you supposed to be able to access attributes using notation like @.items? Everything I can recall seeing in the documentation says the correct syntax is @!items.

[09:11] *** Sgeo left
[09:11] *** Sgeo_ joined
[09:13] *** tejr left
[09:15] <lizmat> $.foo is short for self.foo

[09:16] <hobbified> or now, actually. https://github.com/rakudo/rakudo/issues/5126

[09:16] <lizmat> @.foo is also short for self.foo, but expected to return a Positional

[09:16] <lizmat> %.foo is also short for self.foo, but expected to return an Associative

[09:16] <lizmat> kjp ^^

[09:16] <lizmat> hobbified++

[09:17] <kjp> Thanks

[09:19] *** tejr joined
[09:19] <lizmat> hobbified: is there a reason you used the @.foo version, instead of @!foo ?

[09:19] <lizmat> s/foo/items

[09:20] <lizmat> as a workaround, @!items = ()  works ok

[09:20] <hobbified> yeah, I noticed that. No, no specific reason. I'm new to this, and I wrote that, and it worked, until I typed it to int. :)

[09:22] <lizmat> right, ok

[09:25] <lizmat> meh, looks like  defaults for native int arrays don't work either:

[09:25] <lizmat> m: class A { has int @.a = 1,2 }; dd A.new.a

[09:25] <camelia> rakudo-moar d52342eb0: OUTPUT: «array[int].new()␤»

[09:25] <lizmat> m: class A { has Int @.a = 1,2 }; dd A.new.a

[09:25] <camelia> rakudo-moar d52342eb0: OUTPUT: «Array[Int @!a = Array[Int].new(1, 2)␤»

[09:26] <lizmat> m: class A { has int @.a = 1,2 }; use BUILDPLAN A

[09:26] <camelia> rakudo-moar d52342eb0: OUTPUT: «class A BUILDPLAN:␤ 0: nqp::getattr(obj,A,'@!a') = :$a if possible␤ 1: nqp::getattr(obj,A,'@!a') = execute-code() if not set␤»

[09:27] <lizmat> I guess the "if not set" bit on native arrays is not working

[09:32] *** sarna joined
[09:52] *** sena_kun joined
[10:03] *** jpn joined
[10:32] *** Sgeo_ left
[11:01] *** Kaiepi left
[11:05] <tbrowder> [Coke]: i've tried to make a non-threaded version of aspell.t to see if i can get around the utf-8 error but not having much luck. i don't have time right now to spin up another *nix variant but it's real irritant.

[11:27] <discord-raku-bot> <Nemokosch> It would be really good to get some crashcourse about Raku grammars as well, if there is anybody knowing it well enough and willing to explain

[11:27] <discord-raku-bot> <Nemokosch> there seems to be demand for this kind of knowledge and not many people know this topic well

[11:34] *** jpn left
[11:35] *** discord-raku-bot left
[11:35] *** discord-raku-bot joined
[11:36] *** euandreh joined
[11:40] *** euandreh left
[11:42] *** euandreh1 joined
[11:50] *** euandreh1 left
[11:58] <tbrowder> can anyone help: i'm

[11:58] <tbrowder> geting make xtest errors from aspell.t when testing doc changes

[12:00] *** reportable6 left
[12:00] <tbrowder> i'm getting errors on both Debian and Ubuntu. if anyone is NOT getting those errors on any flavot of *nix (other that Mac OS) please tell me that flavor

[12:00] <tbrowder> of Linux

[12:01] *** reportable6 joined
[12:03] *** jpn joined
[12:08] *** lichtkind_ joined
[12:10] *** lichtkind__ left
[12:33] <discord-raku-bot> <Nemokosch> what kind of errors are you getting?

[12:35] *** jpn left
[12:36] <El_Che> tbrowder: with tip? a released rakudo?

[12:36] <El_Che> (rakudo-pkg builds on Debian and ubuntu and don't have the error)

[12:36] <discord-raku-bot> <Nemokosch> how to even run named tests...

[12:46] *** Kaiepi joined
[12:46] <lizmat> you mean to run a specific spectest file ?

[12:46] *** jpn joined
[13:06] *** xinming left
[13:07] *** xinming joined
[13:08] *** jpn left
[13:23] <tbrowder> see doc issue #4162

[13:23] <tbrowder> regardless

[13:24] <tbrowder> of the OSs i've tried (2), hosts (4), i get that error.

[13:25] <tbrowder> yes, a released rakudo on three of the hosts

[13:26] <tbrowder> but does the rakudo-pkg test the docs?

[13:27] <tbrowder> this occurs only in my clones of github.com/raku/doc.git

[13:28] <tbrowder> make xtest

[13:31] <tbrowder> on another topic: i have a module with, at the top: "use Text::Utils; enum FType <Index Sep Text>;" and i get a compile error something like: "symbol Text already defined".

[13:32] <lizmat> does the module have module Text::Utils in it ?

[13:32] <lizmat> does the module have "module Text::Utils" in it ?

[13:32] <tbrowder> i thought you could use the same symbol for different object types.

[13:32] <lizmat> an enum is a sorta class

[13:33] <lizmat> well, the values of the enum are

[13:33] <tbrowder> okay, makes sense. i'll change the enum. thnx

[13:35] *** jpn joined
[13:35] <tbrowder> but that doc make xtext error is weird. i've tried to make a non-threaded version of aspell.t but haven't yet had any luck

[13:37] <tbrowder> afk for a while...

[13:43] <tbrowder> FYI, [Coke]'s gonna ban me if i don't fix my doc testing and doc PRs

[13:46] *** jpn left
[13:48] *** jpn joined
[13:52] *** euandreh joined
[13:53] *** jpn left
[13:58] <lucs> Problem with ｢$?FILE.IO.absolute｣? https://gist.github.com/lucs/f812bd3e70ea242ec775081cee4454f4

[14:02] <lizmat> feels like it is getting something from a backtrace ?

[14:02] <lizmat> weird

[14:06] *** jpn joined
[14:12] <SmokeMachine> lizmat: Hi there! Can I have your opinion into something?

[14:12] <lizmat> sure  :-)

[14:12] <SmokeMachine> lizmat: do you think this is better than my original post? https://gist.github.com/FCO/88c1ced4772f693619f4cda81e65597b

[14:14] <SmokeMachine> (I didn't know how to end that...)

[14:15] <lizmat> apart from some spello, looks tighter to me at first glance

[14:16] <SmokeMachine> is it too small?

[14:18] <SmokeMachine> lizmat: thank you very much! I'll try to fix everything and replace the old one by this one

[14:18] <lizmat> ok...

[14:18] <lizmat> some spellos:

[14:41] *** jpn left
[14:41] <lucs> lizmat: So that IO.absolute problem, worth opening an issue?

[14:42] <lizmat> yeah, feels like to me

[14:42] <lucs> Okay, thanks.

[14:46] <ugexe> $?FILE includes the module name on purpose. its how precompiled files know the module name along with its path or something like that. from this perspective $?FILE is a bad name or should have been considered an implementation detail

[14:47] <lizmat> ah, ok... and that's why we see it in backtraces

[14:47] <lizmat> so I had it backwards

[14:48] <lizmat> wouldn't we be able to mix in a `.module` method into `$?FILE` ?  which would return the module name (if any)?

[14:48] <lizmat> hmmm...  perhaps .name would be better

[14:48] <lizmat> and perhaps also mix in .auth, .ver and .api as well ?

[14:49] <guifa> https://gist.github.com/alabamenhu/7261845862162b13b4a2affb4d945f58

[14:49] <guifa> I haven't edited day 2 yet, so it doesn't quite yet acknowledge day 1's existence, but comments on day 1 are appreciated

[14:52] <ugexe> probably

[14:53] <lizmat> s/Now he his two-item function/Now his two-item function

[14:55] *** jpn joined
[14:55] <lizmat> " In tomorrow's article"  are you sure the articles will be published on consecutive days ?

[14:56] <lizmat>  s/even more safer manner/even more safe manner   or  even safer manner   ??   or was that intentional ?

[14:58] <lizmat> re "Elizabeth Mattijsen's 2014 Advent Calendar post "  I was actually thinking of remastering that article this year

[14:58] <lizmat> maybe I should  :-)

[15:09] <guifa> lizmat ty!

[15:09] <guifa> not sure they'd be on consecutive, I'll talk with JJ about that

[15:09] <lizmat> oki

[15:10] <guifa> but yeah, the article kind of ballooned, definitely needed two days for it

[15:10] <guifa> hopefully the length makes it easier to follow — I wanted to make sure that even folks without much Raku knowledge can follow and see some of the cooler features, without making it a "yeah I already know this" for mid-level experienced rakoons

[15:37] *** jpn left
[15:48] *** guifa left
[15:49] *** guifa joined
[15:57] *** mscha joined
[15:59] <mscha> m: say &infix:<+>; # works, of course

[15:59] <camelia> rakudo-moar d52342eb0: OUTPUT: «&infix:<+>␤»

[15:59] <mscha> m: my $oper = '+'; say &infix:«$oper»; # does not work

[15:59] <camelia> rakudo-moar d52342eb0: OUTPUT: «Use of uninitialized value $oper of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤  in code  at <tmp> line 1␤===SORRY!=== Error while compiling <tmp>␤Undeclared rou…»

[15:59] <mscha> :-(

[16:01] <mscha> m: BEGIN my $oper = '+'; say &infix:«$oper»; # works, but is not helpful

[16:01] <camelia> rakudo-moar d52342eb0: OUTPUT: «&infix:<+>␤»

[16:02] *** jpn joined
[16:06] *** jpn left
[16:07] <lizmat> m: my $oper = '+'; say "&infix:«$oper»".EVAL;

[16:07] <camelia> rakudo-moar d52342eb0: OUTPUT: «Use of uninitialized value $oper of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤&infix:<+>␤  in code  at <tmp> line 1␤»

[16:07] <lizmat> m: my $oper = '+'; say "&infix:«$oper»";

[16:07] <camelia> rakudo-moar d52342eb0: OUTPUT: «Use of uninitialized value $oper of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤&infix:«+»␤  in code  at <tmp> line 1␤»

[16:08] <lizmat> weird ?

[16:08] <mscha> lizmat: looks like &infix:«...» is evaluated at compile time?

[16:09] *** TieUpYourCamel left
[16:12] <lizmat> m: my $oper = '+'; say '&infix:«' ~ $oper ~ '»';

[16:12] <camelia> rakudo-moar d52342eb0: OUTPUT: «&infix:«+»␤»

[16:12] <lizmat> m: my $oper = '+'; say ('&infix:«' ~ $oper ~ '»').EVAL

[16:12] <camelia> rakudo-moar d52342eb0: OUTPUT: «&infix:<+>␤»

[16:12] <lizmat> m: my $oper = '+'; say qq:!c/&infix:«$oper»/;

[16:12] <camelia> rakudo-moar d52342eb0: OUTPUT: «Use of uninitialized value $oper of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤&infix:«+»␤  in code  at <tmp> line 1␤»

[16:13] <lizmat> m: my $oper = '+'; say qq:!f/&infix:«$oper»/;

[16:13] <camelia> rakudo-moar d52342eb0: OUTPUT: «&infix:«+»␤»

[16:13] <lizmat> ah, much better

[16:13] <lizmat> m: my $oper = '+'; say qq:!f/&infix:«$oper»/.EVAL;

[16:13] <camelia> rakudo-moar d52342eb0: OUTPUT: «&infix:<+>␤»

[16:14] <mscha> Thanks, lizmat

[16:14] *** sena_kun left
[16:17] <mscha> Used in: https://github.com/mscha/aoc/blob/master/aoc2022/aoc11

[16:17] <lizmat> that has a distinct jungle feel  :-)

[16:19] *** sena_kun joined
[16:20] *** jpn joined
[16:31] *** TieUpYourCamel joined
[17:02] *** jpn left
[17:29] *** jpn joined
[17:31] <mscha> Quite a few Raku newbies in https://www.reddit.com/r/adventofcode/comments/zifqmh/2022_day_11_solutions/ today!

[17:34] <lizmat> nice!

[17:41] *** razetime left
[17:53] <smol-hors> oh yeah here's mine https://github.com/esnk86/aoc22/blob/main/11/main.raku

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:06] *** jpn left
[18:20] *** jpn joined
[18:57] *** sena_kun left
[19:00] *** sena_kun joined
[19:27] <hobbified> https://github.com/arodland/Advent-of-Code-2022/tree/master/11

[19:35] <hobbified> (no grammars, no attempt at encapsulation. I tend to Q&D these. I only used a class at all because at a certain point it makes life easier :)

[19:39] <mscha> I tend to use classes a _lot_ in my Raku AoC solutions, because they so quickly make life easier, and don't require any boilerplate.

[19:46] <hobbified> I'm old school and I tend to buy into Raku and Perl's ability to sort of "stream-of-consciousness" program, so I just start out at file scope, read the input, make sure I know what I've got, accumulate it into whatever data structures seem right, go from there... and pretty shortly it's a solution

[19:46] <hobbified> until things get complex enough that I need to put chunks into neat boxes to be able to keep focusing on the high-level

[19:48] <hobbified> I one-lined day6 just for fun

[19:55] <lizmat> :-)

[20:00] *** evalable6 left
[20:00] *** linkable6 left
[20:00] *** linkable6 joined
[20:01] *** evalable6 joined
[20:13] *** Sgeo joined
[20:13] *** jpn left
[20:26] *** sena_kun left
[20:40] *** squashable6 left
[20:40] *** jpn joined
[20:40] *** squashable6 joined
[20:44] *** sena_kun joined
[20:47] *** sena_kun left
[20:58] *** mscha left
[21:17] *** jpn left
[21:17] *** deoac joined
[21:44] *** jpn joined
[21:52] <lucs> ugexe: "$?FILE includes the module name on purpose." Oh, hmm..., okay. I'll just have to strip it out for now I guess.

[22:03] <lucs> (Still feels like an issue to me though -- how do I get the absolute path to a file?)

[22:10] *** deoac left
[22:15] *** jpn left
[22:22] <[Coke]> Yah, seems like a misfeature

[22:28] *** jpn joined
[22:37] *** deoac joined
[22:40] *** jpn left
[22:53] *** jpn joined
[23:01] <ugexe> what even *is* the file?

[23:01] <ugexe> usually its some precomp file thats being run, not the source code file

[23:02] <hobbified> What *are* birds? We just don't know.

[23:02] <discord-raku-bot> <Nemokosch> lol

[23:04] <[Coke]> https://github.com/Raku/doc/issues/4162 - how to get the default values for race/hyper ?

[23:07] *** lichtkind_ left
[23:07] *** jpn left
[23:11] <discord-raku-bot> <Nemokosch> what does that mean?

[23:20] *** jpn joined
[23:31] *** jpn left
[23:43] *** deoac left
[23:46] *** jpn joined
[23:56] *** jpn left
