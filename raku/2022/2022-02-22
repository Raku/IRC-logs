[00:01] <ugexe> the example shown only makes sense when its literally just tweaking the value you are cloning. it does not make sense for almost any other code TWEAK might run

[00:07] *** reportable6 left
[00:30] <japhb> ugexe: Not sure about that.  I use TWEAK in several cases to make sure that I cache some slow-to-compute values based on the public attributes at object creation time, to avoid any risk of concurrency races to compute it later.

[00:30] <japhb> *compute them

[00:32] <ugexe> thats fine, why would you want TWEAK called again?

[00:32] <ugexe> .clone would be copying the attributes after that heavy lifting has been done, so i dont see why you would want TWEAK to do anything

[00:33] <japhb> ugexe: If one of the changed public attributes affected that computation.

[00:34] <ugexe> class Foo { has $.a; has $.b submethod TWEAK(:$!a, :$!b) { $!b = $!b * 100} }; Foo.new(a => 1).clone(a => 2)

[00:34] <japhb> Meaning, if my internal cache had been invalidated by an attribute override.

[00:34] <ugexe> .clone should not be affecting $.b

[00:34] <ugexe> it should clone $.b over, not run TWEAK again

[00:34] <ugexe> although if you did want it to do so then thats a case for writing a custom clone method

[00:35] <ugexe> in general that does not seem ideal

[00:35] <japhb> OIC.  You're merging BUILD and TWEAK, I think.

[01:07] *** linkable6 left
[01:07] *** evalable6 left
[01:35] *** frost joined
[02:08] *** evalable6 joined
[02:53] *** simcop2387 left
[02:53] *** perlbot left
[03:04] *** simcop2387 joined
[03:09] *** reportable6 joined
[03:10] *** perlbot joined
[04:08] <Xliff> How can I get a list of currently loaded compunits?

[04:09] *** linkable6 joined
[04:44] <Geth> ¦ Raku-Steering-Council/main: d35d096a68 | (Geoffrey Broadwell)++ | minutes/20220219.md

[04:44] <Geth> ¦ Raku-Steering-Council/main: Add RSC meeting minutes for 2022-02-19

[04:44] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/d35d096a68

[05:09] *** evalable6 left
[05:09] *** linkable6 left
[05:35] *** frost left
[05:52] *** jrjsmrtn left
[05:56] *** jrjsmrtn joined
[06:09] *** reportable6 left
[06:09] *** mexen joined
[06:10] *** reportable6 joined
[06:14] *** abraxxa-home joined
[06:16] *** abraxxa-home left
[06:24] *** abraxxa-home joined
[07:08] *** jjido joined
[07:10] *** evalable6 joined
[07:10] *** tejr left
[07:11] *** tejr joined
[07:33] *** Altai-man joined
[07:35] *** Altai-man left
[08:22] *** Sgeo left
[08:25] *** abraxxa-home left
[08:27] *** abraxxa joined
[08:27] *** ccntrq joined
[08:31] *** abraxxa left
[08:33] *** abraxxa joined
[08:37] *** frost joined
[08:41] *** abraxxa left
[08:42] *** abraxxa joined
[09:10] *** tejr left
[09:11] *** tejr joined
[09:17] *** dakkar joined
[09:29] *** frost left
[09:38] <CIAvash> Xliff: `$*REPO.repo-chain.map(|*.loaded).grep(&so)`?

[10:04] <Geth> ¦ doc/updated-ecosystem-faq: 52606e4027 | (Elizabeth Mattijsen)++ | doc/Language/faq.pod6

[10:04] <Geth> ¦ doc/updated-ecosystem-faq: Update the ecosystem FAQ

[10:04] <Geth> ¦ doc/updated-ecosystem-faq: review: https://github.com/Raku/doc/commit/52606e4027

[10:05] <Geth> ¦ doc: lizmat++ created pull request #4037: Update the ecosystem FAQ

[10:05] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4037

[10:09] *** frost joined
[10:20] *** lgtaube left
[10:25] <Geth> ¦ doc/updated-modules-setup: 59eaa27b31 | (Elizabeth Mattijsen)++ | doc/Language/modules.pod6

[10:25] <Geth> ¦ doc/updated-modules-setup: Update modules setup for zef | fez

[10:25] <Geth> ¦ doc/updated-modules-setup: review: https://github.com/Raku/doc/commit/59eaa27b31

[10:25] <Geth> ¦ doc: lizmat++ created pull request #4038: Update modules setup for zef | fez

[10:25] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4038

[10:36] *** lgtaube joined
[10:36] *** jjido left
[10:41] *** jjido joined
[10:45] *** jjido left
[10:56] <discord-raku-bot> <Nemokosch#9980> Offtopic but is there something like qqx in Perl?

[10:58] *** discord-raku-bot left
[10:58] <CIAvash> As I mentioned in [problem-solving#317](https://github.com/Raku/problem-solving/issues/317) and other places, I don't understand why everyone wants to create and maintain their own project, when [problem-solving#158](https://github.com/Raku/problem-solving/issues/158) can solve and cover all those issues. It can be the main website, it can have a core blog, it can have an advent-blog, it can have an announcements section, it can have a community blog

[10:58] <CIAvash> where members of the community or others with relevant content can post their articles, maybe this can also be the place you revive or store old blog posts? it can be home to weekly blogs as well, for even different Raku implementations. It probably can be home to Documentation too, but that's another matter. Anyway I created my own website, maybe that's what people like to do, create their own things 😀 

[10:58] *** discord-raku-bot joined
[11:00] <lizmat> CIAvash: good points... I had quite forgotten about that....  but the demo is not working (anymore) ?

[11:01] *** Altai-man joined
[11:01] <lizmat> also: I think more generally now that we can have a full Raku stack for websites, I have a slight preference for having the main website being a full stack Raku thing

[11:02] <lizmat> dogfooding and all that :)

[11:06] <El_Che> I think we miss oidc before we can speak of full stack

[11:07] <CIAvash> Updated the demo link, either I forgot to change it or something happened to the redirection. https://www.raku-lang.ir/en/

[11:11] <CIAvash> Nemokosch: don't backticks and `qx` do that in Perl? If you mean variable interpolation

[11:14] <CIAvash> Right now Raku can't do everything, so in some places you end up using external tools or well, creating them. A simple example is Raku syntax highlighter, do we have one written in Raku?

[11:17] <Altai-man> CIAvash, nope. It depends on having a Raku parser written in Raku, but rakudo guts are not to be touched, Perl6::Parser is not active anymore.

[11:18] <Altai-man> There is a speculation the sitatuion can get better with introducing the RakuAST, as it opens a way to have something like "Parse the text and give me a stream of tokens" which then can be formatted and/or highlighted.

[11:18] <Altai-man> *situation

[11:21] *** ccntrq1 joined
[11:22] <Geth> ¦ doc: 743f394c93 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[11:22] <Geth> ¦ doc: Update the ecosystem FAQ (#4037)

[11:22] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/743f394c93

[11:23] *** ccntrq left
[11:23] *** ccntrq1 is now known as ccntrq

[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:18] <lizmat> yes, I'd expect a Raku syntax highlighter in Raku to become available after RakuAST lands

[12:24] <CIAvash> But it won't highlight code of other languages used in POD; Chroma does 😀

[13:00] *** discord-raku-bot left
[13:00] *** discord-raku-bot joined
[13:04] <Geth> ¦ problem-solving/sunsetting-p6c-cpan: 3de16a68c8 | (Elizabeth Mattijsen)++ | solutions/meta/sunsetting-p6c-cpan.md

[13:04] <Geth> ¦ problem-solving/sunsetting-p6c-cpan: First stab at resolution document for #316

[13:04] <Geth> ¦ problem-solving/sunsetting-p6c-cpan: review: https://github.com/Raku/problem-solving/commit/3de16a68c8

[13:04] <Geth> ¦ problem-solving: lizmat++ created pull request #318: First stab at resolution document for #316

[13:04] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/pull/318

[13:10] *** linkable6 joined
[13:15] *** jjido joined
[13:39] *** frost left
[14:08] *** morte_ joined
[14:14] <Geth> ¦ doc: f68ed10ab1 | Coke++ | doc/Language/faq.pod6

[14:14] <Geth> ¦ doc: whitespace

[14:14] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f68ed10ab1

[14:14] <Geth> ¦ doc: 097fce4e4a | Coke++ | doc/Language/faq.pod6

[14:14] <Geth> ¦ doc: typo

[14:14] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/097fce4e4a

[14:14] <Geth> ¦ doc: 5a4ac27425 | Coke++ | xt/pws/words.pws

[14:14] <Geth> ¦ doc: new word

[14:14] <linkable6> Link: https://docs.raku.org/language/faq

[14:14] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/5a4ac27425

[14:16] *** yo joined
[14:17] *** ggoebel joined
[14:18] *** yo is now known as ayu

[14:18] <Geth> ¦ ecosystem: 5d6d128964 | (Elizabeth Mattijsen)++ | META.list

[14:18] <Geth> ¦ ecosystem: Remove modules from p6c that now live in zef

[14:18] <Geth> ¦ ecosystem: 

[14:18] <Geth> ¦ ecosystem: Email::Simple, Net::IMAP, NET::SMTP, PSpec,

[14:18] <Geth> ¦ ecosystem: Time::Duration::Parser, Web::Template

[14:18] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/5d6d128964

[14:23] *** ayu left
[14:30] <ggoebel> is it possible to create or use interpolation to generate a regular expression character class? I.e. something like... @filter = <d .. z>; "abadaba" ~~ /^ <[a .. z] - [{@filter}]>+ $/

[14:32] <MasterDuke> nope, not without using EVAL to create the regex

[14:34] * lizmat clickbaits https://rakudoweekly.blog/2022/02/21/2022-08-grammarly-co-op/

[14:36] <ggoebel> say I have an @dictionary and I'd like to filter out all words that match any letter in an array... what approach would you take? @filtered = @dict.grep({ ... }}?

[14:38] <lizmat> ggoebel: probably would put the letters in a Set or a hash, and then grep on non-existence in that Set or hash ?

[14:38] <lizmat>  s/non-//

[14:41] <lizmat> my %s is Set = @letters; @filtered = @dict.grep: { .comb.first: { %s{$_} {

[14:41] <lizmat> my %s is Set = @letters; @filtered = @dict.grep: { .comb.first: { %s{$_} }

[14:41] <lizmat> of the top of my head :-)

[14:42] <lizmat> or perhaps use Map::Match

[14:44] <lizmat> my %m is Map::Match = @dictionary.map: * => 1;  @filtered = %m{@letters}.unique

[14:44] <lizmat> also off the top of my head

[14:44] <lizmat> my %m is Map::Match = @dictionary.map: * => 1;  @filtered = %m{@letters}:k.unique

[14:45] <lizmat> you don't want just 1s

[14:48] <ggoebel> m: my @filter = <e .. z>; say @filter.any ∉ "abadaba".comb.cache

[14:48] <camelia> rakudo-moar 0dead3c6a: OUTPUT: «any(True, True, True)␤»

[14:48] <ggoebel> my @filter = <d .. z>; say @filter.any ∉ "abadaba".comb.cache

[14:48] <evalable6> ggoebel, rakudo-moar d53b3ee83: OUTPUT: «any(False, True, True)␤»

[14:50] <ggoebel> lizmat: thank you

[14:57] <ggoebel> m: my @filter = <d .. z>; if @filter.all ∉ "abadaba".comb.cache { "ok".say } else { "nok".say }

[14:57] <camelia> rakudo-moar d53b3ee83: OUTPUT: «nok␤»

[14:57] <ggoebel> m: my @filter = <e .. z>; if @filter.all ∉ "abadaba".comb.cache { "ok".say } else { "nok".say }

[14:57] <camelia> rakudo-moar d53b3ee83: OUTPUT: «ok␤»

[15:03] *** discord-raku-bot left
[15:03] *** discord-raku-bot joined
[15:04] <japhb> m: say <d .. z>

[15:04] <camelia> rakudo-moar d53b3ee83: OUTPUT: «(d .. z)␤»

[15:04] <japhb> m: say <d .. z>.elems

[15:04] <camelia> rakudo-moar d53b3ee83: OUTPUT: «3␤»

[15:05] <japhb> Yeah, I was pretty sure that wasn't a range

[15:05] <japhb> The .. is being taken literally

[15:05] <japhb> m: say ('d' .. 'z').elems  # I'm guessing this is what you were looking for?

[15:05] <camelia> rakudo-moar d53b3ee83: OUTPUT: «23␤»

[15:07] *** discord-raku-bot left
[15:07] *** discord-raku-bot joined
[15:23] <guifa> ggoebel perhaps you could tool this for you in some way:

[15:25] <guifa> m: my token filter ($x) {.<?{~$¢ (elem) $x}>}; my @abc = 'a'..'z'; my @nope = 'm'..'z'; say 'b' ~~ /<filter: @abc (-) @nope>/; say 't' ~~ /<filter: @abc (-) @nope>/

[15:25] <camelia> rakudo-moar d53b3ee83: OUTPUT: «｢b｣␤ filter => ｢b｣␤Nil␤»

[15:26] <guifa> the token <filter: ... > takes either a list or a set, so you can piece things together with standard set operators

[15:29] *** Sgeo joined
[15:39] *** Altai-man left
[15:40] *** jjido left
[15:58] <japhb> File::Directory::Tree tests chew RAM for anyone else?  I stopped it at 40 GB or so

[16:00] <ggoebel> japhb: thanks

[16:01] <ggoebel> guifa: will try to wrap my head around that. thanks!

[16:01] <japhb> Not many places you see someone actually use $¢

[16:03] *** clarjon1 joined
[16:05] <guifa> japhb I legit think that's the long string of non-alpha characters I've written in Raku

[16:06] <japhb> Use ∈ and you can make it even longer!  ;-)

[16:07] <guifa> was litearlly already typing it out :-)

[16:07] <guifa> my token filter($_){.<?{~$¢∈$_}>};

[16:07] <guifa> :D :D :D :D

[16:08] <japhb> Yep, hard to resist once you've gotten started, isn't it.  It's like you gave yourself a challenge and immediately accepted.  ;-)

[16:11] <japhb> APL: "Seems legit."

[16:11] <guifa> Perl: *yawn*

[16:11] <MasterDuke> japhb: can repro F::D::T eating ram. it's not the recent mimalloc bump, i still see it even with a moarvm compiled with --no-mimalloc

[16:12] <guifa> still, that works pretty nice as a runtime character class, esp since it lets you use all of the normal set operators (so technically, even, a bit more powerful).  Performance will be not as good though I'm sure, since I'd imagine character classes can optimize for ranges and this one can

[16:16] <MasterDuke> it's spinning in mktree somehow

[16:18] <MasterDuke> spinning in https://github.com/labster/p6-file-directory-tree/blob/master/lib/File/Directory/Tree.pm#L7-L10

[16:21] <MasterDuke> guessing it's https://github.com/rakudo/rakudo/pull/4795

[16:24] <japhb> Good thinking

[16:52] *** [Coke] left
[16:56] *** jjido joined
[16:58] *** [Coke] joined
[17:00] *** mexen left
[17:04] <discord-raku-bot> <Nemokosch#9980> Hyper can be used with mutable operations, right?

[17:06] <moritz> yes

[17:12] *** lichtkind joined
[17:13] <discord-raku-bot> <Nemokosch#9980> okay, thanks

[17:14] *** Guest12 joined
[17:15] <Guest12> r: loop { await ^2 .map: { start { require ::("Test") } } }

[17:15] <camelia> rakudo-jvm: OUTPUT: «Can't open perl script "/home/camelia/rakudo-j-inst/bin/eval-client.pl": No such file or directory␤»

[17:15] <camelia> ..rakudo-moar d53b3ee83: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    Failed to seek in filehandle: 22␤      in block  at <tmp> line 1␤␤»

[17:15] <discord-raku-bot> <Nemokosch#9980> one more: does the list assignment operator return the assigned list?

[17:17] <guifa> Nemokosch: it does.

[17:17] <Guest12> m: loop { await ^2 .map: { start { require ::("Test") } } }

[17:17] <camelia> rakudo-moar d53b3ee83: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    Failed to seek in filehandle: 22␤      in block  at <tmp> line 1␤␤»

[17:17] <guifa> m: my @a; say @a = 1,2,3;

[17:17] <camelia> rakudo-moar d53b3ee83: OUTPUT: «[1 2 3]␤»

[17:20] <discord-raku-bot> <Nemokosch#9980> cool, it seemed to work indeed

[17:20] <discord-raku-bot> <Nemokosch#9980> however, every solved thing spawns a new question 😅

[17:20] <discord-raku-bot> <Nemokosch#9980> > Potential difficulties:

[17:20] <discord-raku-bot> <Nemokosch#9980> >     Useless use of >>[&eli-value-fallback]>> in sink context

[17:20] <discord-raku-bot> <Nemokosch#9980> can I somehow silence this?

[17:20] <discord-raku-bot> <Nemokosch#9980> like, I know it's sink context, I use it for mutation

[17:22] <discord-raku-bot> <Nemokosch#9980> nvm, found it

[17:22] <discord-raku-bot> <Nemokosch#9980> the sink prefix

[17:23] *** abraxxa left
[17:27] <discord-raku-bot> <Nemokosch#9980> uh oh...

[17:27] <discord-raku-bot> <Nemokosch#9980> the assignment returns the very same array, right? not a copy

[17:28] <discord-raku-bot> <Nemokosch#9980> that's a problem with a state variable

[17:30] *** jjido left
[17:38] *** jjido joined
[17:38] *** dakkar left
[17:39] <Geth> ¦ ecosystem: 795f2cd4d0 | (Elizabeth Mattijsen)++ | META.list

[17:39] <Geth> ¦ ecosystem: Freeze File::Bundled

[17:39] <Geth> ¦ ecosystem: 

[17:39] <Geth> ¦ ecosystem: While we move it to the zef ecosystem

[17:39] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/795f2cd4d0

[17:44] *** morte_ left
[17:48] *** morte_ joined
[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[18:08] <tonyo> the zef eco grows stronger

[18:16] *** Guest12 left
[18:20] <lizmat> :-)

[18:39] <Geth> ¦ ecosystem: 0d74ac92e3 | (Elizabeth Mattijsen)++ | META.list

[18:39] <Geth> ¦ ecosystem: Remove Find::Bundled from the ecosystem

[18:39] <Geth> ¦ ecosystem: 

[18:39] <Geth> ¦ ecosystem: The code still uses @*INC and as such has not functioned for at

[18:39] <Geth> ¦ ecosystem: least 6 years.  The functionality it provided, is now standard in

[18:39] <Geth> ¦ ecosystem: Raku with the %?RESOURCES interface.  So it is a wrong solution to

[18:39] <Geth> ¦ ecosystem: a problem that no longer exists.

[18:39] <Geth> ¦ ecosystem: 

[18:39] <Geth> ¦ ecosystem: The repo in raku-community-modules has been archived.

[18:39] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/0d74ac92e3

[18:42] *** MasterDuke left
[18:56] <Geth> ¦ ecosystem: f85adfe926 | (Elizabeth Mattijsen)++ | META.list

[18:56] <Geth> ¦ ecosystem: Freeze JSON::JWT

[18:56] <Geth> ¦ ecosystem: 

[18:56] <Geth> ¦ ecosystem: While we move it to the Raku ecosystem

[18:56] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/f85adfe926

[18:58] *** euandreh left
[19:01] *** euandreh joined
[19:02] *** mexen joined
[19:11] <[Coke]> when using --moar-option to rakudo configure, is it ok to use it multiple times?

[19:12] *** morte_ left
[19:12] <[Coke]> (apparently yes)

[19:41] *** morte_ joined
[19:44] *** Darkcoal joined
[19:51] *** Darkcoal left
[19:54] *** dextercd joined
[20:01] *** MasterDuke joined
[20:26] <tonyo> zef db is cutting over, might be a few minutes of login/upload problems

[20:32] <japhb> tonyo: cutting over from what to what?

[20:32] <tonyo> moving the db from aws to linode

[20:37] <japhb> Ah

[20:42] *** ccntrq left
[20:56] *** Guest1838 joined
[21:00] <tonyo> alright, fez should be back up

[21:00] *** lichtkind_ joined
[21:01] *** jjido left
[21:03] *** lichtkind left
[21:03] *** jjido joined
[21:04] *** ocomport left
[21:05] *** lichtkind_ left
[21:06] <Guest1838> sorry, this got long:  it suddenly popped into mind, "-Ofun", optimized for FUN! :)   as an operational newbie (albeit longtime 10,000-foot lurker) to raku, could someone point me to something that i could do for the community that would be 1) low barrier to entry, 2) useful, 3) would help me (gradually) ease myself into the

[21:06] <Guest1838> language/ecosystem/community, while also be useful for everyone?  assuming i don't flake (like i'm sure many with a rush of enthusiasm ultimately do), my personal interest in raku is more in the "100-year language" sense, less in the "i have a TODO that i need to DO today" sense...  i would love if humanity had a "lingua franca" in the

[21:06] <Guest1838> computational realm, and the various contenders i am aware of for "total systems" are just... not inspiring to me, personally, for this or that reason... raku has great technology, but i think more importantly it has a wonderful community... polite, open, and *unrushed*... "rome wasn't built in a day" and all that

[21:07] <tonyo> a pure raku gzip module would be nice

[21:08] <[Coke]> there's bug queues for rakudo/nqp/moarVM/docs which usually have some tag to indicate good tickets or first users... what sort of skills? programming? (what langs), QA, documentation...

[21:09] <japhb> Guest1838: You could ask lizmat if she would like help with her ecosystem update work, she's got like 100 modules left to convert (but may have gotten into an efficient groove already, I dunno)

[21:16] <Guest1838> i love the idea of a gzip module (compression is interesting theoretically and practically, and having something that was streaming, concurrent, etc. would be neat), but that's beyond my ken ATM

[21:16] <Guest1838> in term of bug trackers, where are those?  is https://rakudo.org/issue-trackers the canonical starting point?

[21:17] <Guest1838> as for module conversion, that's probably not yet appropriate for me either, given that i really am not up to speed on the language proper

[21:17] <[Coke]> it's a great place to start, sure!

[21:18] <Guest1838> sweet!

[21:20] <MasterDuke> well, i don't think the module conversion really requires any raku programming. i think it's mostly some git and shell commands and editing a json file

[21:21] <Guest1838> ahhh, okay, i didn't know that... is there a page that talks about what it is/entails in more detail?

[21:24] <MasterDuke> i don't think so, you'd need to chat with lizmat

[21:25] *** tonyo1 joined
[21:37] *** ggoebel left
[21:49] *** jjido left
[21:54] *** tonyo left
[21:55] *** tonyo1 is now known as tonyo

[22:20] *** mexen left
[22:38] *** jjido joined
[22:55] *** dextercd left
[22:57] *** morte_ left
[23:03] <guifa> Guest1838 to be honest, if you take a simple module from another language and try to convert it, you'll learn a lot

[23:03] <guifa> You'll probably end up rewriting it all from scratch when you're done based on everything you learn, but having something practical as a goal is really useful

[23:04] <guifa> What language are you coming from?

[23:06] <lizmat> Guest1838: what also could be helpful is collecting and / or remastering blog posts in the CCR https://github.com/raku/CCR

[23:16] *** djerius left
[23:17] *** djerius joined
