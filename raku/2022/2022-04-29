[00:05] *** [Coke] left
[00:06] *** reportable6 left
[00:08] *** [Coke] joined
[00:09] *** reportable6 joined
[01:07] *** frost joined
[02:02] *** nine left
[02:02] *** nine joined
[02:14] *** ToddAndMargo joined
[02:16] <ToddAndMargo> Hi All,¬† RakudoMoar-2022.04.01-win-x86_64-msvc.msi.¬† Is "spurt" suppose to overwrite?¬† That is my understanding.¬† I have an instance writing to Ice drive where if the data is identical to what is already there, spurt appends, so I get doubles.¬† But is the data changes, it overwrites

[02:16] <tellable6> 2021-07-13T03:53:00Z #raku-dev <Xliff> .tell ToddAndMargo class AA { has Str @.I is rw; submethod BUILD (:$data) { @!I[.key] = .value for $data.pairs }; method new(*%data) { self.bless( :data => %data );  }; }; AA.new(66 => 23, 10 => 1, 100 => 'a').gist.say;

[02:16] <tellable6> hey ToddAndMargo, you have a message: https://gist.github.com/52bb07a5170aeeefe9126493bbcec69a

[02:19] <moon-child> ToddAndMargo: http://ix.io/3Wx9 does not happen for me.  Though I am not on windows, and I am not sure what ice drive is

[02:20] <moon-child> 1) does that simple example reproduce for you?  2) does it still happen without ice drive?

[02:20] <ToddAndMargo> https://icedrive.net/

[02:21] <moon-child> (and if the answer to 2 is no, it may be a flaw in ice drive; I would suggest testing this with a small c snippet)

[02:23] <ToddAndMargo> teh example works perfectly on both Linux and Windows 10. This is an Ice Drive issue.¬† Thank you for the double check!

[02:27] <ToddAndMargo> I also notices that I had to run my program twice to get the file to see more than zero bytes.¬† Ice Drive has some bugs.¬† The double entry problem won't be an issue as the program triggers every hour and the date in the time data will change

[02:35] *** ToddAndMargo left
[04:02] *** Sankalp left
[04:04] *** Sankalp joined
[04:12] *** oodani left
[04:13] *** oodani joined
[04:48] *** xinming left
[04:50] *** xinming joined
[05:38] *** mexen joined
[05:39] *** jujo joined
[05:39] <jujo> hello

[05:39] <jujo> I need help with a raku oneliner, anyone could give me a hand?

[05:46] <moon-child> jujo: if you have a questino, then ask it

[05:55] <jujo> I want to use somehthing like this

[05:56] <jujo> > cat file | raku -ne '.match(/begin <(content)> end/, :g).map({.Str.say})'

[05:56] <jujo> to print only the contents between begin and end

[06:06] <jujo> oh just figured it out

[06:07] <jujo> I just needed to stop my patterns from being greedy

[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:32] *** Sgeo left
[06:42] <jujo> is there a way to lets say, if I pipe the contents of a file to raku

[06:42] <jujo> to run the command not per line, but with the contents as a whole

[06:42] <jujo> ?

[06:42] <moon-child> | raku -e 'do whatever with slurp'

[06:46] <jujo> thanks, sorry to bother, but how should I use slurp in there?

[06:47] <moon-child> slurp is a function.  When you call it with a filename, it returns a str representing the entire contents of the file.  When you call it with no arguments, it uses stdin as a defualt

[06:47] *** daxim left
[06:47] <jujo> oh I see

[06:47] <jujo> ok ok

[06:47] <jujo> doing 

[06:47] <jujo> raku -e "slurp.say"

[06:47] <jujo> just prints the same input it received

[06:47] <jujo> thanks again, think I got it

[06:54] *** defaultxr left
[06:55] *** defaultxr joined
[06:57] <jujo> yet another question...

[06:57] <jujo> I have: cat fak | raku -e "slurp.match(/'?p=' <( <-[\"]>+/,:g)"

[06:57] <jujo> it works well

[06:58] <jujo> but I want to apply an anonymous function to every item

[06:58] <jujo> like substract one

[07:00] <jujo> what, I did

[07:00] <jujo> raku -e "slurp.match(/'?p=' <( <-[\"]>+/,:g).map({ .Int + 1}).say"

[07:00] <jujo> I expected the magic bind to be $_

[07:00] *** daxim joined
[07:01] <moon-child> you can use $_ there

[07:02] <moon-child> I expect most would write that as  ...map(* + 1), using the whatever star

[07:02] <moon-child> alternately, { $_ + 1 }

[07:02] <moon-child> it's not necessary to explicitly call .Int unless you specifically need to truncate a float or rat, as + will coerce a string to a number automatically

[07:03] <jujo> when I use $_ or * it errors out

[07:03] <jujo> saying something about if I was meaning to use floor

[07:04] <moon-child> since you are using double quotes at the shell level, you would need to escape the $ in $_

[07:04] <moon-child> if you use *, then you need to skip the braces

[07:04] <jujo> :O

[07:06] <jujo> one last question, if my pipeline ends up producing a single value, and I want to apply a lambda to it

[07:06] <jujo> how should I do it

[07:07] <moon-child> why do you need to create a lambda abstraction?  Just do whatever the function would have done directly

[07:08] <jujo> I want to create a range, if I got 3, I want a range like 0..3

[07:08] <jujo> oh

[07:09] <jujo> jmmm

[07:09] <jujo> i thought that doing 0..(all of that)

[07:09] <jujo> would work

[07:15] <El_Che> m: say 0...3

[07:15] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(0 1 2 3)‚ê§¬ª

[07:17] <jujo> thanks, but I need to do it from a command line one liner

[07:17] <jujo> where I have a value that result from processing a file

[07:18] <jujo> I'm here so far

[07:18] <jujo> cat fak | raku -e "slurp.match(/'?p=' <( <-[\"]>+/,:g).map( * - 1 ).max <I want to use max to create a range>"

[07:21] <jujo> well

[07:21] <jujo> I did it

[07:22] <jujo> cat fak | raku -e "slurp.match(/'?p=' <( <-[\"]>+/,:g).max.&({0..\$_-1}).Seq.say"

[07:22] <jujo> but I wonder if there is another way

[07:24] <moon-child> in place of 0..x, you can say 0..^x

[07:25] <moon-child> or just ^x, for short

[07:25] <moon-child> err, in place of 0..(x-1), say 0..^x

[07:30] <jujo> I see

[07:30] <jujo> wow, didn't know how powerful where raku one liners

[07:32] <jujo> its like haskell but practical and with predictable magic

[08:00] *** linkable6 left
[08:00] *** evalable6 left
[08:01] *** evalable6 joined
[08:02] *** linkable6 joined
[08:03] *** grondilu joined
[08:12] <jujo> thank you so much, good night

[08:16] <grondilu> m: say .fmt("%08x") given my int32 $ = -1

[08:16] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´000000-1‚ê§¬ª

[08:19] <grondilu> ü§® 

[08:47] *** jujo left
[09:07] *** grondilu left
[09:29] *** frost left
[09:32] <Geth> ¬¶ ecosystem: 591f91b7d8 | (Elizabeth Mattijsen)++ | META.list

[09:32] <Geth> ¬¶ ecosystem: Fix URL for pbkdf2

[09:32] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/591f91b7d8

[09:36] *** grondilu joined
[09:47] *** jaguart joined
[10:47] *** reportable6 left
[10:47] *** unicodable6 left
[10:47] *** quotable6 left
[10:47] *** greppable6 left
[10:47] *** releasable6 left
[10:47] *** tellable6 left
[10:47] *** statisfiable6 left
[10:47] *** linkable6 left
[10:47] *** evalable6 left
[10:47] *** benchable6 left
[10:47] *** notable6 left
[10:47] *** bloatable6 left
[10:47] *** coverable6 left
[10:47] *** nativecallable6 left
[10:47] *** shareable6 left
[10:47] *** committable6 left
[10:47] *** bisectable6 left
[10:47] *** sourceable6 left
[10:48] *** reportable6 joined
[10:48] *** shareable6 joined
[10:48] *** nativecallable6 joined
[10:48] *** notable6 joined
[10:48] *** statisfiable6 joined
[10:48] *** sourceable6 joined
[10:48] *** committable6 joined
[10:49] *** unicodable6 joined
[10:49] *** benchable6 joined
[10:49] *** evalable6 joined
[10:49] *** bloatable6 joined
[10:49] *** tellable6 joined
[10:49] *** bisectable6 joined
[10:50] *** coverable6 joined
[10:50] *** linkable6 joined
[10:50] *** releasable6 joined
[10:50] *** greppable6 joined
[10:50] *** quotable6 joined
[11:10] *** guifa left
[11:17] <Geth> ¬¶ doc/document-are: c8f331765f | (Elizabeth Mattijsen)++ | doc/Type/Any.pod6

[11:17] <Geth> ¬¶ doc/document-are: Document the .are method

[11:17] <Geth> ¬¶ doc/document-are: review: https://github.com/Raku/doc/commit/c8f331765f

[11:17] <Geth> ¬¶ doc: lizmat++ created pull request #4069: Document the .are method

[11:17] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4069

[11:33] *** solitario left
[11:46] *** solitario joined
[11:55] *** melezhik joined
[11:55] *** melezhik left
[12:06] <Geth> ¬¶ doc/document-are: c7375b3ba9 | (Elizabeth Mattijsen)++ | doc/Type/Any.pod6

[12:06] <Geth> ¬¶ doc/document-are: Tweak, Altai-man++

[12:06] <Geth> ¬¶ doc/document-are: review: https://github.com/Raku/doc/commit/c7375b3ba9

[12:07] *** reportable6 left
[12:07] *** reportable6 joined
[12:08] <grondilu> m: dd my @ = [ [ "foo" ] ]; dd my @ = [ [ "foo" ], ];

[12:08] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Array @ = ["foo"]‚ê§Array @ = [["foo"],]‚ê§¬ª

[12:09] <grondilu> isn't it kind of non-intuitive?

[12:10] <discord-raku-bot> <Nemokosch#9980> I think this is actually fair and conform with rather explicit design choices

[12:10] <discord-raku-bot> <Nemokosch#9980> the comma makes the structure, not the brackets

[12:10] <discord-raku-bot> <Nemokosch#9980> I think this is explicitly recited as an example somewhere

[12:12] <discord-raku-bot> <Nemokosch#9980> in fact you don't even need the outer brackets

[12:12] <discord-raku-bot> <Nemokosch#9980> m: dd my @ = [ "foo" ] , ;

[12:14] <discord-raku-bot> <Nemokosch#9980> the latter is because of something that I for one dislike: the so-called "list assignment"

[12:16] <discord-raku-bot> <Nemokosch#9980> the @ sigil on the LHS of an assignment means: empty the container, take all the elements from the RHS and put them into the container

[12:18] *** frost joined
[12:21] *** melezhik joined
[12:22] <grondilu> noted

[12:24] <Geth> ¬¶ ecosystem: 499a334153 | (Elizabeth Mattijsen)++ | META.list

[12:24] <Geth> ¬¶ ecosystem: Remove DB::Model::Easy from git ecosystem

[12:24] <Geth> ¬¶ ecosystem: 

[12:24] <Geth> ¬¶ ecosystem: It only ever had one release, and with the existence of Red, it

[12:24] <Geth> ¬¶ ecosystem: feels that nobody will be interested in picking up this distribution

[12:24] <Geth> ¬¶ ecosystem: and continue to develop this.

[12:24] <Geth> ¬¶ ecosystem: 

[12:24] <Geth> ¬¶ ecosystem: The only known release will continue to live in the REA.

[12:24] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/499a334153

[12:24] <discord-raku-bot> <Nemokosch#9980> but yes, the comma itself is a list-maker operator, no matter the sigil

[12:25] <discord-raku-bot> <Nemokosch#9980> to demonstrate that, let me generate increasing number sequences starting from one

[12:25] *** melezhik left
[12:26] *** Nemokosch joined
[12:26] <Nemokosch> m: [\,] (1..^10) andthen .raku.say;

[12:26] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´((1,), (1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5, 6, 7, 8, 9)).Seq‚ê§¬ª

[12:26] <discord-raku-bot> <Nemokosch#9980> maybe from the irc

[12:27] <discord-raku-bot> <Nemokosch#9980> dang

[12:27] *** Nemokosch left
[12:27] <discord-raku-bot> <Nemokosch#9980> I used the produce meta-operator with the comma operator

[12:37] *** Sankalp left
[12:39] *** Sankalp joined
[12:46] *** guifa joined
[12:51] *** jaguart left
[12:56] *** guifa left
[13:12] *** jaguart joined
[13:19] <Geth> ¬¶ doc/document-are: 8b4d2bfb9a | (Elizabeth Mattijsen)++ | doc/Type/Any.pod6

[13:19] <Geth> ¬¶ doc/document-are: More sses

[13:19] <Geth> ¬¶ doc/document-are: review: https://github.com/Raku/doc/commit/8b4d2bfb9a

[14:11] <grondilu> `andthen` is something I never use.  Maybe I should.

[14:12] *** linkable6 left
[14:12] *** evalable6 left
[14:12] *** linkable6 joined
[14:13] *** Sankalp left
[14:14] *** Sankalp joined
[14:15] *** evalable6 joined
[14:19] *** perlbot left
[14:20] *** perlbot joined
[14:21] *** simcop2387 left
[14:21] <discord-raku-bot> <Nemokosch#9980> I took this from Jan Kr≈à√°vek üòÑ

[14:22] <discord-raku-bot> <Nemokosch#9980> a cool prototyping feature, you need less parens and all

[14:23] *** simcop2387 joined
[14:28] *** Sgeo joined
[14:48] *** bigdata joined
[15:01] *** frost left
[15:09] <Voldenet> m: sub x($_) { .return }; x(2).say

[15:09] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´2‚ê§¬ª

[15:14] <discord-raku-bot> <Nemokosch#9980> _why_

[15:15] <Voldenet> heh heh

[15:15] <Voldenet> watch this

[15:15] <Voldenet> m: use nqp; sub surprise() { nqp::throwpayloadlexcaller(nqp::const::CONTROL_RETURN, 2) }; sub x { surprise(); return 3; }; x().say

[15:15] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´2‚ê§¬ª

[15:17] <discord-raku-bot> <Nemokosch#9980> okay, this is cheating

[15:17] <Voldenet> but hold my beer, it's not the end

[15:17] <Voldenet> m: use nqp; sub surprise() { nqp::throwpayloadlexcaller(nqp::const::CONTROL_RETURN, 2) }; sub x { surprise() }; x().say

[15:17] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Attempt to return outside of any Routine‚ê§  in sub surprise at <tmp> line 1‚ê§  in sub x at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:17] <Voldenet> I love those tiny little surprises

[15:18] <discord-raku-bot> <Nemokosch#9980> anyway, using $_ as a parameter is an interesting idea

[15:19] <discord-raku-bot> <Nemokosch#9980> why did it fail though

[15:20] <Voldenet> obviously, x wasn't supposed to return anything! :)

[15:20] *** frost joined
[15:22] *** grondilu left
[15:23] *** bigdata left
[15:24] *** jaguart left
[15:24] <discord-raku-bot> <Nemokosch#9980> but like, who decided that it wasn't

[15:25] <Voldenet> m: use nqp; sub surprise is hidden-from-backtrace { nqp::throwpayloadlexcaller(nqp::const::CONTROL_RETURN, 2) }; sub x { surprise() }; x().say

[15:25] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Attempt to return outside of any Routine‚ê§  in sub x at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:29] <Voldenet> handler for CX::Return is missing

[15:32] <Voldenet> and it's moarvm deciding that

[15:44] *** frost left
[15:46] *** Sankalp- joined
[15:47] *** Sankalp left
[15:47] *** Sankalp- is now known as Sankalp

[15:49] *** bigdata joined
[15:50] <discord-raku-bot> <Nemokosch#9980> well yeah that's not transparent

[15:55] *** razetime joined
[16:03] *** guifa joined
[16:12] *** bigdata left
[16:41] *** grondilu joined
[16:43] <grondilu> I may have bitten off more than I can chew with this protobuff thing I'm trying to do.

[16:43] <grondilu> https://github.com/grondilu/protobuf-raku

[16:43] <grondilu> the thing is, I'm supposed to generate code.  And not just subs, but classes.

[16:44] <grondilu> I could try to use the metamodel, but that sounds complicated.

[16:44] <grondilu> I could write some actual raku code in plain text, save it in a file in RAKULIB path, and then load it.

[16:45] *** jujo joined
[16:46] <grondilu> possibly doing all this code generation into a BEGIN block so that the generated code can be used by the rest of the code as if it had been there from the beginning.

[16:46] <grondilu> All this sounds overkill, though.

[16:47] <grondilu> Last time I had to do code generation was with my clifford module.

[16:47] <grondilu> https://github.com/grondilu/clifford

[16:48] <grondilu> but then I ended up just using closures, which was quite simple and elegant.

[16:48] <grondilu> I'm hoping I could do that again, but I don't quite see the way to do it.

[16:53] <guifa> grondilu you'll probably not like the answer, but you'll probably want to hold off for RakuAST (or start experimenting it some)

[16:57] <grondilu> never heard of it

[16:57] <grondilu> is that about macros?

[16:58] <grondilu> anyway the more I think about it, the more I am tempted to write the module in raku on disk inside a BEGIN block

[16:58] <grondilu> I can't show it here as there is IO involved, but I've just tried `BEGIN "lib/foo.rakumod".IO.spurt: "unit module foo;"; use foo;` and it does work.

[17:00] <guifa> RakuAST lets you generate Raku code without needing to EVAL Str which is always risky

[17:00] <grondilu> actually I can even put the use statement before the BEGIN block, which is nice.

[17:01] <grondilu> guifa: yeah I wouldn't be satisfied with resorting to EVAL

[17:06] *** bigdata joined
[17:07] *** razetime left
[17:11] <grondilu> I don't like having to write to disk either though, as that would leave some mess to clean up afterwards.

[17:12] <grondilu> although I suppose I could remove the files in a END block.

[17:39] <Voldenet> but how is using files different from EVAL

[17:40] <Voldenet> it carries all the nasty stuff that makes EVAL problematic in the first place

[17:47] *** mexen left
[17:47] *** jujo left
[17:49] <grondilu> Voldenet: true

[18:02] <grondilu> well that is weird

[18:03] <grondilu> I was watching jnnth's conference about rakuAST...

[18:03] <grondilu> at some point he talks about `--target=ast`

[18:03] <grondilu> so I give it a try for fun

[18:04] <grondilu> I run `raku --target=ast -e 'say "hi";'`

[18:04] <grondilu> and since the output is large, I re-run it with `|most`, as one does.

[18:05] <grondilu> and then I got an unresponsive terminal :/

[18:05] <grondilu> not even ctrl-C was caught

[18:06] <grondilu> such output is not supposed to contain control characters though, does it/

[18:07] <grondilu> damn even `|cat -v |most` misbehaves

[18:08] *** reportable6 left
[18:08] *** [Coke] left
[18:08] *** reportable6 joined
[18:19] *** Guest35 joined
[18:20] *** [Coke] joined
[18:30] <guifa> weird

[18:30] <guifa> the best place to look at how some of RakuAST works is the test files for Rakudo

[18:37] *** melezhik joined
[18:38] <melezhik> .tell patrickb you can use use this to make SparkyCI output more readable when dealing with stderr mixed with stdout - https://git.sr.ht/~melezhik/Devel-ExecRunnerGenerator2/commit/45a0902d2ca4d2dda1212138c123fc3dddd0d70f.patch

[18:38] <tellable6> melezhik, I'll pass your message to patrickb

[18:43] <patrickb> melezhik: Thanks!

[18:43] <tellable6> 2022-04-25T23:10:37Z #raku <melezhik> patrickb I've added support for any git urls, not just GH - http://sparrowhub.io:2222/report/232

[18:43] <tellable6> 2022-04-27T18:13:22Z #raku <melezhik> patrickb I successfully run your build from my fork - https://git.sr.ht/~melezhik/Devel-ExecRunnerGenerator/tree/master/item/.sparkyci.yaml

[18:43] <tellable6> 2022-04-27T18:28:36Z #raku <melezhik> patrickb - here Devel-ExecRunnerGenerator SpakyCI log with debug enabled for `build.pre` hook - http://sparrowhub.io:2222/report/263

[18:43] <tellable6> 2022-04-27T20:03:43Z #raku <melezhik> patrickb , please see https://github.com/melezhik/sparkyci/blob/main/docs/dsl.md#build-hooks as well

[18:44] <patrickb> melezhik: I'm really impressed with SparkyCI. It really is very little effort to get it up and running.

[18:46] <patrickb> melezhik: How hard would it be to get a "My builds" tab?

[18:57] <melezhik> patrickb - thanks! I am glad someone find the service useful. "my builds" would not be that hard, will add it to my todo list

[18:57] <tellable6> 2022-04-28T23:09:30Z #raku <SmokeMachine> melezhik: still working on that‚Ä¶

[18:58] <melezhik> "it really is very little effort to get it up and running." - thanks again ... yeah, that was the intention - to make it as simple as possible for end users, and it still extendable via `.sparky.yaml` if needed ...

[19:00] *** silug left
[19:00] <melezhik> https://github.com/melezhik/sparkyci/issues/1

[19:03] *** melezhik left
[19:07] *** silug joined
[20:07] *** evalable6 left
[20:07] *** linkable6 left
[20:07] *** linkable6 joined
[20:10] *** evalable6 joined
[20:17] *** grondilu left
[21:01] *** bigdata left
[21:13] *** guifa left
[21:14] *** perlbot left
[21:14] *** simcop2387 left
[21:15] *** perlbot joined
[21:16] *** simcop2387 joined
[21:23] *** dg left
[21:46] * gfldex .oO( In Raku, we don't need to LEAVE a mess behind. )

[22:23] *** linkable6 left
[22:23] *** evalable6 left
[22:23] *** evalable6 joined
[22:25] *** linkable6 joined
[22:32] *** swaggboi left
[22:45] *** swaggboi joined
[23:45] *** unicodable6 left
[23:45] *** quotable6 left
[23:45] *** coverable6 left
[23:45] *** benchable6 left
[23:45] *** releasable6 left
[23:45] *** committable6 left
[23:45] *** greppable6 left
[23:45] *** bloatable6 left
[23:45] *** bisectable6 left
[23:45] *** sourceable6 left
[23:45] *** reportable6 left
[23:45] *** evalable6 left
[23:45] *** tellable6 left
[23:45] *** statisfiable6 left
[23:45] *** nativecallable6 left
[23:45] *** notable6 left
[23:45] *** linkable6 left
[23:45] *** shareable6 left
[23:45] *** tellable6 joined
[23:45] *** nativecallable6 joined
[23:46] *** releasable6 joined
[23:46] *** reportable6 joined
[23:46] *** coverable6 joined
[23:46] *** shareable6 joined
[23:47] *** evalable6 joined
[23:47] *** bisectable6 joined
[23:47] *** greppable6 joined
[23:47] *** benchable6 joined
[23:47] *** statisfiable6 joined
[23:47] *** unicodable6 joined
[23:48] *** linkable6 joined
[23:48] *** committable6 joined
[23:48] *** quotable6 joined
[23:48] *** bloatable6 joined
[23:48] *** sourceable6 joined
[23:48] *** notable6 joined
