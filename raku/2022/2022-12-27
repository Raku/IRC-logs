[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:13] *** jpn left
[00:22] *** melezhik joined
[00:24] *** fennewald joined
[00:27] *** jpn joined
[00:28] *** melezhik left
[00:30] <guifa_> Anton: ty btw, for some reason my current setup is hitting all sorts of edge cases and I'm fixing quite a few little bugs 

[00:33] *** jpn left
[00:47] *** melezhik joined
[00:48] <Homer_Simpson> nm fixed, comma wants you to manually give it the file extention

[00:50] *** ProperNoun left
[00:52] *** melezhik left
[01:00] *** jpn joined
[01:04] *** xinming left
[01:05] *** xinming joined
[01:08] *** Kaiepi left
[01:14] *** jpn left
[01:55] *** jpn joined
[01:58] <coleman> Who owns raku.org? 

[02:00] *** jpn left
[02:03] <guifa_> I believe the TPRF

[02:03] <coleman> That stands for The Perl and Raku Foundation?

[02:03] <guifa_> Is there a way to obtain the original method of a wrapped method when doing, e.g. $foo.^find_method('bar') ? .is-wrapped returns True, but wanting to see if there's a way that I can check to see if a method may have been accidentally double wrapped

[02:04] <guifa_> Yeah.  Don't quote me, but I believe they have it.  codesections probably knows a bit more on that end

[02:22] <guifa_> Anton: stuff should be updated now enough that you can use Intl::Format::DateTime

[02:42] *** jpn joined
[02:58] <Voldenet> m: sub bar { }; &bar.wrap({callsame}); my $foo = &bar; my $foo = &bar.clone; &bar.restore; say &bar.is-wrapped

[02:58] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´Potential difficulties:‚ê§    Redeclaration of symbol '$foo'.‚ê§    at <tmp>:1‚ê§    ------> rap({callsame}); my $foo = &bar; my $foo‚èè = &bar.clone; &bar.restore; say &bar.is‚ê§No such method 'restore' for invocant of type 'Sub+{Routine::Wrap‚Ä¶¬ª

[02:58] <Voldenet> m: sub bar { }; &bar.wrap({callsame}); my $foo = &bar.clone; &bar.restore; say &bar.is-wrapped

[02:58] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´No such method 'restore' for invocant of type 'Sub+{Routine::Wrapped}'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:07] <guifa_> hmm that's an idea

[03:10] <guifa_> Voldenet unfortunately, no go

[03:10] <guifa_> m: sub foo {42}; my $x = &foo.wrap(->{24}); my &bar = &foo.clone; say foo; &bar.unwrap($x); say foo;

[03:10] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´24‚ê§42‚ê§¬ª

[03:10] <Voldenet> yeah, doesn't work

[03:17] *** melezhik joined
[03:17] *** melezhik left
[03:19] <guifa_> I guess I could make a dummy sub that returns 1 if it's the final candidate, and otherwise returns 1+ that

[03:19] <guifa_> but that feels like overkill for a test

[03:20] <Voldenet> It could be structurally tested by touching attributes, but moar impl is different than others‚Ä¶

[03:21] <Voldenet> it'd be easier if there was `unwrap` that returned unwrapped routine instead of replacing it

[03:21] *** jpn left
[03:25] <Voldenet> m: sub foo {42}; my $spooky = &foo; my $x = &foo.wrap(->{24}); $spooky.is-wrapped.say

[03:25] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´True‚ê§¬ª

[03:26] *** razetime joined
[03:28] <Voldenet> m: sub foo {42}; my $spooky = &foo.clone; my $x = &foo.wrap(->{24}); $spooky.is-wrapped.say

[03:28] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´False‚ê§¬ª

[03:29] <Voldenet> wrapped method keeps being WrapHandle though

[03:30] <Voldenet> s/WrapHandle/Sub+{Wrapped}/

[03:44] <jaguart> wrap/unwrap has scope for handle hiccups

[03:44] <jaguart> m:  sub foo(){'f'};sub bar(){'b'};my $f=&foo.wrap(->{'F'});my $b=&bar.wrap(->{'B'}); &foo.unwrap($b); say foo; say bar;

[03:44] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´F‚ê§b‚ê§¬ª

[03:46] <jaguart> seems the handle is more important than the sub

[03:46] <jaguart> m:  sub foo(){'f'};sub bar(){'b'};my $f=&foo.wrap(->{'F'});my $b=&bar.wrap(->{'B'}); $b.restore; say foo; say bar;

[03:46] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´F‚ê§b‚ê§¬ª

[04:01] <guifa_> I didn't even realize restore was a method.

[04:01] <guifa_> it's not documented

[04:06] *** jpn joined
[04:33] *** jpn left
[04:34] <jaguart> yeah - and you can't introspect Routine::WrapHandle

[04:55] <Voldenet> it is documented, but https://docs.raku.org/type/Routine::WrapHandle

[04:55] <Voldenet> the class it's on is somewhat odd

[04:57] <jaguart> hmmm - actually you can - https://gist.github.com/jaguart/35ab71ade4de290ec9723a3f3a3a5554

[05:02] *** jpn joined
[05:04] <guifa_> I feel like I'm about to do th hackiest code ever

[05:04] <jaguart> I think I have something for you to try...

[05:04] <guifa_> oh wait

[05:05] <jaguart> .WRAPPERS METHOD

[05:05] <guifa_> I won't have access to the wrap handler

[05:06] <guifa_> oh i just scrolled down ha

[05:07] <jaguart> m: sub foo(){'f'};my $f=&foo.wrap(->{'bar'});say &foo.WRAPPERS; $f.restore; say &foo.WRAPPERS;

[05:07] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´(->  { #`(Block|3569926561016) ... }, sub foo { #`(Sub|3569926161664) ... }).IterationBuffer‚ê§(sub foo { #`(Sub|3569926161664) ... },).IterationBuffer‚ê§¬ª

[05:07] <jaguart> m: sub foo(){'f'};my $f=&foo.wrap(->{'bar'});say &foo.WRAPPERS; say $f.restore; say &foo.WRAPPERS;

[05:07] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´(->  { #`(Block|3594085752056) ... }, sub foo { #`(Sub|3594085352704) ... }).IterationBuffer‚ê§True‚ê§(sub foo { #`(Sub|3594085352704) ... },).IterationBuffer‚ê§¬ª

[05:07] *** jpn left
[05:08] <jaguart> So you can count .WRAPPERS to see if you are still wrapped?

[05:08] <guifa_> yeah that's perfect

[05:08] <guifa_> nice find

[05:10] <jaguart> It's weird how that method doesn't show in the Class but does on a wrapped instance

[05:11] <guifa_> I'll take it for now ha

[05:12] <guifa_> basically I do a bunch of wrapping on DateTime methods so I can upgrade old core ones to newer fancy ones

[05:12] <guifa_> but if multiple files or scopes `use` my module, the methods could get wrapped several times

[05:13] <guifa_> I've got them wrapped in once blocks, but this will give me extra confidence

[05:22] <guifa_> jaguart: there we go https://github.com/alabamenhu/DateTimeTimezones/blob/master/t/04-double.rakutest

[05:26] <Homer_Simpson> does raku have structs and enums

[05:26] <Homer_Simpson> err unions and structs

[05:27] <jaguart> guifa++ :)

[05:27] * guifa_ https://github.com/alabamenhu/DateTimeTimezones/blob/master/t/04-double.rakutest

[05:28] <guifa_> errr sorry didn-t mean to double post that link

[05:29] <guifa_> Homer_Simpson it has unions for native call stuff

[05:30] <guifa_> I *think* there may be a way to pull more interesting things off with non-native objects via is repr(‚Ä¶), but right now all valid values there seem to be hard coded

[05:33] <Homer_Simpson> what about typedefs

[05:39] *** epony left
[05:43] <guifa_> yes

[05:43] <guifa_> m: constant DT = DateTime; DT.now.say

[05:43] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´2022-12-27T06:43:51.346203+01:00‚ê§¬ª

[05:57] *** jpn joined
[06:03] *** jpn left
[06:13] *** epony joined
[06:51] *** jpn joined
[07:00] <jaguart> given this:

[07:00] <jaguart> m: module b { our $a=1; my $b=2; our sub x { my $i=0; .say for OUTER::.pairs.grep({$_.key ~~ /^^ . <[a..z]>+ /}); }}; b::x()

[07:00] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´$b => 2‚ê§&x => &x‚ê§$a => 1‚ê§¬ª

[07:00] *** jpn left
[07:01] <jaguart> How do I enumerate the my-vars from outside the package?

[07:01] <jaguart> including lexical subs?

[07:11] *** jpn joined
[07:14] *** guifa_ left
[08:06] *** Homer_Simpson left
[08:12] *** Sgeo left
[08:14] *** jpn left
[08:41] *** Kaiepi joined
[08:47] *** jpn joined
[08:52] *** jpn left
[09:19] <discord-raku-bot> <Nemokosch> Jaguart: sounds like something to do with stashes

[09:21] <discord-raku-bot> <Nemokosch> There is the MY pseudostash, for example

[09:22] <discord-raku-bot> <Nemokosch> Our CALLER

[09:22] <discord-raku-bot> <Nemokosch> Or

[09:33] *** jpn joined
[09:49] *** jpn left
[09:50] *** sena_kun joined
[10:02] *** jpn joined
[10:37] *** jpn left
[10:44] *** razetime left
[10:52] <moritz> you don't get access to lexicals from the outside though

[10:58] <discord-raku-bot> <Nemokosch> How sure are you on a 1 to 10 scale? üòÖ Like this seems to be the kind of topic only ~ 3 people are up-to-date with

[10:59] *** jpn joined
[11:12] <moritz> I'm, like 99% certain that you don't get language-mandated, reliable access to foreign lexical scopes

[11:12] <moritz> compilers are free to optimize away lexical variables, if they can

[11:13] <moritz> if there are ways in current rakudo, I wouldn't rely on them in code that's meant to last a long time

[11:14] <moritz> there's a reason that lexicals are delcared with "my" :-)

[11:18] <discord-raku-bot> <Nemokosch> that makes sense

[11:18] <discord-raku-bot> <Nemokosch> even if there is a way, it might not be a good idea...

[11:20] *** tejr left
[11:28] <moritz> m: sub f { say CALLER::MY::.keys }; { my $x = 42; f() }

[11:28] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´($_ $x)‚ê§¬ª

[11:29] <moritz> rakudo doesn't forbid it, but it might in future

[11:36] *** jpn left
[11:46] *** jpn joined
[11:50] *** sena_kun left
[11:52] *** sena_kun joined
[12:31] *** jpn left
[12:35] *** jpn joined
[12:41] *** jpn left
[12:53] *** tejr joined
[13:11] <lizmat> a lot of the P5-xxx modules in the ecosystem use this to be able to mimic Perl semantics

[13:12] <lizmat> I guess I should mark them explicitely v6.c so that a future language version can get rid of CALLER::

[13:12] <lizmat> as it blocks just about any optimization you can think of

[13:12] * lizmat clickbaits https://rakudoweekly.blog/2022/12/26/2022-52-antonovmas/

[13:21] *** tejr left
[13:31] *** sena_kun left
[13:31] *** sena_kun joined
[13:44] <leont> I'm very confused about some supply behavior I'm seeing. It seems my ¬´supply { whenever $foo.lines { ... } } gets run for every tap I put on it (including the $supply.Promise). That is ‚Ä¶ not what I had expected

[13:48] *** grondilu joined
[13:49] <grondilu> I can't do a cartesian product of a list of pairs for some reason :

[13:50] <grondilu> m: my @k = foo => "bar"; for @k X @k 

[13:50] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> my @k = foo => "bar"; for @k X @k‚èè<EOL>‚ê§    expecting any of:‚ê§        block or pointy block‚ê§¬ª

[13:50] <grondilu> ah sorry

[13:50] <grondilu> m: my @k = foo => "bar"; for @k X @k -> $, $ { }

[13:50] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´Too few positionals passed; expected 2 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:50] <grondilu> m: my @k = foo => "bar"; for @k X @k -> ($, $) { }

[13:50] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´Too few positionals passed to '<anon>'; expected 2 arguments but got 0 in sub-signature‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:50] <grondilu> what am I missing?

[13:52] <leont> I guess that's intentional given what I read in method share, but adding share to it doesn't seem to solve anything either

[13:52] <leont> fg

[13:55] <discord-raku-bot> <Nemokosch> grondilu: if I were to guess, it's passed as named argument...

[13:55] <discord-raku-bot> <Nemokosch> if that's really true, I still wouldn't be sure if it's a feature

[13:56] *** guifa_ joined
[13:57] <discord-raku-bot> <Nemokosch> let's make it worse:

[13:57] *** Nemokosch joined
[13:58] <Nemokosch> m: for ((foo => 'bar', foo => 'baz'),) -> (*%_) { dd %_ }

[13:58] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´{:foo("baz")}‚ê§¬ª

[13:58] <Nemokosch> the second pair overwrote the first one

[14:00] <Nemokosch> leont: I think atm only Jonathan or Stefan would know enough about this topic...

[14:05] <leont> Possibly I should ask in #cro, not because it's a cro question but because that's where all the experts on this area seem to hang out

[14:05] <lizmat> except maybe this time of year

[14:06] <leont> lizmat: How dare people have a life and priorities and such! /s

[14:06] <lizmat> leont: isn't it because the "supply" "keyword" creates a non-live supply ?

[14:07] <leont> Yeah, I had come to a similar conclusion, but wasn't sure how to fix it, other than not tap on the supply more than once

[14:09] <leont> What I thing I need is .share(:preserving), but somehow that isn't an option

[14:11] <Nemokosch> by the way: do y'all happen to know how to pass a pair (or multiple pairs) to a for loop when named argument semantics isn't sufficient?

[14:11] *** tejr joined
[14:15] *** sena_kun left
[14:16] *** sena_kun joined
[14:22] <Nemokosch> m: my @k = foo => "bar"; for @k X @k -> @sad { dd @sad[0], @sad[1]; }

[14:22] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´Pair @k = :foo("bar")‚ê§Pair @k = :foo("bar")‚ê§¬ª

[14:22] <Nemokosch> not much but it's honest work...

[14:28] <leont> I've been using supplies since 2014, and apparently I still don't fully understand them. The documentation is less-than-helpful much of the time.

[14:30] <grondilu> unrelated:

[14:30] <grondilu> m: say (pi but role { multi method AT-POS { 3, 1, 4, 2 } })[]

[14:30] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´3.141592653589793‚ê§¬ª

[14:31] <grondilu> m: say class { method AT-POS { rand xx * } }.new[]

[14:31] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´<anon|1>.new‚ê§¬ª

[14:31] <grondilu> m: say class { method AT-POS($n) { rand } }.new[0]

[14:31] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´0.8613574568742635‚ê§¬ª

[14:31] <grondilu> m: say class { method list { rand xx * } }.new[]

[14:31] <camelia> rakudo-moar cdc9aa987: OUTPUT: ¬´<anon|1>.new‚ê§¬ª

[14:32] <leont> On the bright side, next version of TAP should be faster because it's no longer double parsing the input

[14:34] <grondilu> how do I override &postcircumfix:[] without arguments?

[14:36] <Nemokosch> why do you want to, if I may?

[14:38] <Nemokosch> iirc there are multi candidates that force it to act like bare decontainerisation

[14:39] <grondilu> I have a class where it would make sense to do so

[14:42] *** Sgeo joined
[14:42] <Nemokosch> how would it be called? why [] in particular?

[14:46] <Nemokosch> https://github.com/rakudo/rakudo/blob/704a05b934ba10f3240e8764827bbfd7fe089cdf/src/core.c/array_slice.pm6#L281 this is the candidate to beat, for that matter

[14:54] *** jpn joined
[15:15] *** Nemokosch left
[15:18] *** jpn left
[15:19] *** jpn joined
[15:41] *** jgaz joined
[15:48] *** jgaz left
[15:50] *** jgaz joined
[15:53] *** razetime joined
[16:30] *** guifa_ left
[16:36] *** pippo joined
[16:36] *** djerius left
[16:37] <pippo> Hello Raku people. Is there a peek-one method on Iterable to take a sneak on the neext value witout pulling it out?

[16:38] *** djerius joined
[16:39] <pippo> p6: say "Hello";

[16:39] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´Hello‚ê§¬ª

[16:42] <pippo> p6: my $iter = [1,2,3,4].iterator; $iter.pull-one()

[16:42] <camelia> rakudo-moar 1bc45ba98: ( no output )

[16:43] <pippo> p6: my $iter = [1,2,3,4].iterator; say $iter.pull-one()

[16:43] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´1‚ê§¬ª

[16:43] <pippo> p6: my $iter = [1,2,3,4].iterator; say $iter.peek-one()

[16:43] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´No such method 'peek-one' for invocant of type‚ê§'Rakudo::Iterator::ReifiedArrayIterator'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:43] <pippo> p6: my $iter = [1,2,3,4].iterator; say $iter.peek(1)

[16:43] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´No such method 'peek' for invocant of type‚ê§'Rakudo::Iterator::ReifiedArrayIterator'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:44] *** grondilu left
[16:49] *** jpn left
[16:49] <discord-raku-bot> <Nemokosch> maybe in module space? I don't know, iterators are fairly low-level. I wouldn't know by heart but I have the impression that in languages like C++, Java, Python, Javascript, that also wasn't a thing

[16:54] <pippo> It would be useful if raku architects could decide to implement that.

[16:56] *** jgaz left
[16:57] <discord-raku-bot> <Nemokosch> Bluntly put, one could create a top 20 list if things that "would be useful (...)" any day, and I'm not sure how many times this apparently unorthodox iterator feature would appear.

[16:58] *** sena_kun left
[16:58] *** Altai-man joined
[16:58] <discord-raku-bot> <Nemokosch> Having said that, I'm curious what you have in mind. Why would it be useful for iterators to do that?

[16:59] *** Altai-man left
[17:00] *** Altai-man joined
[17:00] *** Altai-man left
[17:01] *** Altai-man joined
[17:02] <pippo> Abhoerschutz _________ on a case statement (or any other test). Depending on the value of peek-one perform the correct action;case $iter.peek-one() { 1 {sub1($iter.pull-one)}; 2 {sub2($iter.pull-one()}}

[17:02] <pippo> on a case statement (or any other test). Depending on the value of peek-one perform the correct action;case $iter.peek-one() { 1 {sub1($iter.pull-one)}; 2 {sub2($iter.pull-one()}}

[17:03] <pippo> Abhoerschutz ^^ Sorry for that. Unintended mess-up!

[17:04] <discord-raku-bot> <Nemokosch> but you can just pull the value, store it in a variable (bind it) and then decide, no?

[17:04] <Abhoerschutz> pippo: No problem.

[17:05] <discord-raku-bot> <Nemokosch> it might even work with given-when directly (`given` binds to the topic variable iirc)

[17:05] *** Xliff joined
[17:06] <Xliff> \o

[17:07] <tonyo> m: role A does Iterator { method pull-one { }; method peek-one { } }; my $iter = [1,2,3,4] does A; $iter.peek-one.say # pippo

[17:07] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´Nil‚ê§¬ª

[17:07] <Xliff> My complements to Anton Antonov for his work on Javascript::D3. I am trying to get the Mandala test notebook to run, however it is not generating the Mandalas. 

[17:08] <Xliff> Can someone tell me what I am likely missing?

[17:08] <Xliff> I think I have all of the modules installed, but would appreciate it if someone else has run into... and solved... this issue.

[17:08] *** jpn joined
[17:09] <discord-raku-bot> <Nemokosch> ~~let me guess: another Mac user~~

[17:09] <pippo> <Nemokosch> Yes. But it does not work if I want to pass the $iterable to a function depending on its nex value. case $iter.peek-one() { 1 {sub1($iter)}; 2 {sub2($iter}}

[17:10] <pippo> tonyo in your example there is no implementation of peek-one

[17:11] <discord-raku-bot> <Nemokosch> Javascript::D3 worked for me offhand, Ubuntu 20.04, iirc tried inside WSL

[17:11] <tonyo> that is how you'd implement it

[17:12] <pippo> p6: role A does Iterator { method pull-one { }; method peek-one { } }; my $iter = [1,2,3,4] does A; say $iter.peek-one(); say $iter.pull-one();

[17:12] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´Nil‚ê§Nil‚ê§¬ª

[17:13] <discord-raku-bot> <Nemokosch> and it would always just return Nil? üòÑ

[17:14] <pippo> p6: role A does Iterator { method peek-one { } }; my $iter = [1,2,3,4] does A; say $iter.peek-one(); say $iter.pull-one();

[17:14] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´Method 'pull-one' must be implemented by Array+{A} because it is required by roles: A.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:14] <tonyo> m: role A does Iterator { method pull-one { self.shift; }; method peek-one { self[0]; } }; my $iter = [1,2,3,4] does A; $iter.peek-one.say; dd $iter; $iter.pull-one.say; dd $iter # pippo

[17:14] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´1‚ê§Array+{A $iter = $[1, 2, 3, 4]‚ê§1‚ê§Array+{A $iter = $[2, 3, 4]‚ê§¬ª

[17:14] <discord-raku-bot> <Nemokosch> pippo: why not? do something like my $following := $iter.pull-one; and then dispatch over it. That should work, no?

[17:17] <pippo> That is good idea. But the subs to which I pass $iter are called recursively and doing that will just defeat what I am trying to do: preserve memory.

[17:19] <tonyo> pippo: and then for easier use in funcs you can do something like:

[17:19] <tonyo> m: role A does Iterator { method pull-one { self.shift; }; method peek-one { self[0]; }; method COERCE(*@_) { @_ does A; } }; my $iter = [1,2,3,4];  sub WHAT-I-WANT (A() $x) { dd $x.peek-one; };  WHAT-I-WANT($iter)

[17:19] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´1‚ê§¬ª

[17:22] *** razetime left
[17:23] <moritz> doesn't List both persist elements *and* keep iterator tails? Sounds like the perfect type for when you want to be able to peek

[17:23] *** jgaz joined
[17:24] <pippo> tonyo that does seem to work for me. Although not sure to understand completely what you wrote. I need to do some meditations on that :-)

[17:27] *** jpn left
[17:29] *** jpn joined
[17:32] <pippo> Thank you tonyo. thank you all. Cheers!

[17:32] <discord-raku-bot> <Nemokosch> is it not an overkill way to use a List?

[17:32] *** pippo left
[17:32] <discord-raku-bot> <Nemokosch> üçª

[17:33] <moritz> using the best tool for the job doesn't sound like overkill to me :-)

[17:34] <discord-raku-bot> <Nemokosch> perhaps I didn't phrase it clearly. To build an Iterator on top of a List and then use it like an Iterator... now that seems like an overkill version of a List

[17:38] *** pippo joined
[17:39] <Xliff> <Nemokosch> - Were you able to see the mandalas?

[17:40] *** pippo left
[17:40] <Xliff> Where I am supposed to see scribbles and mandalas, I am seeing nothing.

[17:41] <Xliff> Javascript error adding output!

[17:41] <Xliff> SyntaxError: Unexpected identifier 'routine'

[17:41] <Xliff> See your browser Javascript console for more details.

[17:41] <discord-raku-bot> <Nemokosch> where did you see that?

[17:42] <discord-raku-bot> <Nemokosch> Anton asked me to run this:

[17:42] <discord-raku-bot> <Nemokosch> `js-d3-graphics random-mandala 32 --margins=5 -h=300 -w=300 --color='rgb(120,120,120)' --background='white' > ~/out.html`

[17:43] <Xliff> I'm seeing this in the Jupyter notebook.

[17:44] <discord-raku-bot> <Nemokosch> and the generated html looked like this: https://media.discordapp.net/attachments/874770314557521940/1055141888488902819/out.html_20221221151810.png?width=620&height=599

[17:44] <Xliff> Aha! Now that did work.

[17:44] <Xliff> So it might be something in the Jupyter setup then. Thanks.

[17:49] <discord-raku-bot> <Nemokosch> üç¨

[17:54] *** jpn left
[17:57] *** jpn joined
[18:08] *** jpn left
[18:14] *** guifa_ joined
[18:14] *** guifa_ left
[19:14] *** squashable6 left
[19:14] *** statisfiable6 left
[19:14] *** reportable6 left
[19:14] *** coverable6 left
[19:14] *** nativecallable6 left
[19:14] *** shareable6 left
[19:14] *** sourceable6 left
[19:14] *** tellable6 left
[19:14] *** unicodable6 left
[19:14] *** greppable6 left
[19:14] *** bisectable6 left
[19:14] *** notable6 left
[19:14] *** evalable6 left
[19:14] *** committable6 left
[19:14] *** bloatable6 left
[19:14] *** releasable6 left
[19:14] *** benchable6 left
[19:14] *** linkable6 left
[19:14] *** quotable6 left
[19:15] *** reportable6 joined
[19:15] *** linkable6 joined
[19:15] *** benchable6 joined
[19:15] *** evalable6 joined
[19:15] *** coverable6 joined
[19:16] *** statisfiable6 joined
[19:16] *** quotable6 joined
[19:16] *** bisectable6 joined
[19:16] *** committable6 joined
[19:17] *** unicodable6 joined
[19:17] *** sourceable6 joined
[19:17] *** squashable6 joined
[19:17] *** greppable6 joined
[19:17] *** releasable6 joined
[19:17] *** notable6 joined
[19:17] *** melezhik joined
[19:17] *** shareable6 joined
[19:17] *** tellable6 joined
[19:17] *** bloatable6 joined
[19:18] *** nativecallable6 joined
[19:18] *** Xliff left
[19:21] *** melezhik_ joined
[19:24] *** melezhik left
[19:24] *** epony left
[19:25] *** melezhik_ left
[19:26] *** melezhik joined
[19:28] *** melezhik left
[19:31] *** melezhik joined
[19:34] <discord-raku-bot> <Anton Antonov> <@742445366489645080> Using "JavaScript::D3" with the Jupyter Raku kernel requires a particular JavaScript code to be executed first in a cell marked to use the JavaScript magic (`%%javascript`).

[19:35] <discord-raku-bot> <Anton Antonov> <@742445366489645080> See the notebook here: https://nbviewer.org/github/antononcube/Raku-JavaScript-D3/blob/main/resources/RandomMandalas.ipynb

[19:37] *** melezhik left
[19:45] *** Altai-man left
[19:46] *** sena_kun joined
[20:04] *** TieUpYourCamel left
[20:11] *** jpn_ joined
[20:16] *** jpn_ left
[20:22] *** sena_kun left
[20:25] *** sena_kun joined
[20:34] *** epony joined
[21:02] *** Kaipei joined
[21:04] *** Kaiepi left
[21:08] *** Guest73 joined
[21:08] *** Guest73 left
[21:10] *** QhpAptyj9hj0RQwM joined
[21:23] *** Voldenet left
[21:24] *** Voldenet joined
[21:35] *** pippo joined
[21:38] <pippo> m: sub peek-one(Iterator $it is copy) {return $it.pull-one}; my @a = [1,2,3,4,7]; my $it1 = @a.iterator; pull-one($it1); $it1.pull-one;

[21:38] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    pull-one used at line 1. Did you mean 'peek-one'?‚ê§‚ê§¬ª

[21:39] <pippo> m: sub peek-one(Iterator $it is copy) {return $it.pull-one}; my @a = [1,2,3,4,7]; my $it1 = @a.iterator; peek-one($it1); $it1.pull-one;

[21:39] <camelia> rakudo-moar 1bc45ba98: ( no output )

[21:39] <pippo> m: sub peek-one(Iterator $it is copy) {return $it.pull-one}; my @a = [1,2,3,4,7]; my $it1 = @a.iterator; say peek-one($it1); say $it1.pull-one;

[21:39] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´1‚ê§2‚ê§¬ª

[21:39] <pippo> ^^ apparently is copy does not work for iterators?

[21:41] <vrurg_> pippo: copy only means that you get a copy of the container. Not what it contains. In other words, if you want a duplicate which you can replace without affecting the original.

[21:42] <pippo> That is what I looking for. I was expecting $it1.pull-one to give 1 but gave 2 instead.

[21:43] <vrurg_> pippo: once again, wrong. Gimme a second.

[21:44] <vrurg_> m: sub nc($v) { say $v.VAR.WHICH; }; sub c($v is copy) { say $v.VAR.WHICH }; my $foo = 1; say $foo.VAR.WHICH; nc($foo); c($foo)'

[21:44] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 31; say $foo.VAR.WHICH; nc($foo); c($foo)‚èè'‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement‚Ä¶¬ª

[21:45] <vrurg_> m: sub nc($v) { say $v.VAR.WHICH; }; sub c($v is copy) { say $v.VAR.WHICH; }; my $foo = 1; say $foo.VAR.WHICH; nc($foo); c($foo)'

[21:45] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 31; say $foo.VAR.WHICH; nc($foo); c($foo)‚èè'‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement‚Ä¶¬ª

[21:45] <vrurg_> m: sub nc($v) { say $v.VAR.WHICH; }; sub c($v is copy) { say $v.VAR.WHICH; }; my $foo = 1; say $foo.VAR.WHICH; nc($foo); c($foo);

[21:45] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´Scalar|3875479669520‚ê§Scalar|3875479671104‚ê§Scalar|3875479671200‚ê§¬ª

[21:47] <vrurg_> Ah, no, bad example. Ok, anyway, `is copy` gives you a writable variable made off a parameter. It differs from `is rw` in a way that `is rw` binds the parameter to the original variable, `is copy` gives you a new one.

[21:47] <vrurg_> m: sub nc($v is rw) { say $v.VAR.WHICH; }; sub c($v is copy) { say $v.VAR.WHICH; }; my $foo = 1; say $foo.VAR.WHICH; nc($foo); c($foo);

[21:47] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´Scalar|3090965449632‚ê§Scalar|3090965449632‚ê§Scalar|3090965451264‚ê§¬ª

[21:48] <vrurg_> pippo: like this. But each Scalar contains the same iterator in your case ‚Äì the same object, in general case.

[21:48] *** vrurg_ is now known as vrurg

[21:49] <vrurg> m: sub nc($v is rw) { $v = 13; say "nc:$v" }; sub c($v is copy) { $v = 12; say "c:$v"; }; my $foo = 1; say $foo.VAR.WHICH; nc($foo); c($foo);

[21:49] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´Scalar|3693077322448‚ê§nc:13‚ê§c:12‚ê§¬ª

[21:50] <vrurg> m: sub nc($v is rw) { $v = 13; say "nc:$v"; }; sub c($v is copy) { $v = 12; say "c:$v"; }; my $foo = 1; say $foo; c($foo); say "after c: $foo"; nc($foo); say "after nc: $foo";

[21:50] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´1‚ê§c:12‚ê§after c: 1‚ê§nc:13‚ê§after nc: 13‚ê§¬ª

[21:50] <vrurg> pippo: does it make the case clearer?

[21:51] <pippo> m: sub peek-one(Iterator $it is copy) {return $it.VAR.WHICH}; my @a = [1,2,3,4,7]; my $it1 = @a.iterator; say peek-one($it1); say $it1.VAR.WHICH;

[21:51] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´Scalar|5609505824496‚ê§Scalar|5609505825984‚ê§¬ª

[21:52] <discord-raku-bot> <Nemokosch> could one say that Iterable doesn't have value semantics?

[21:53] <vrurg> pippo: I think you need to read through this section of the docs: https://docs.raku.org/language/containers

[21:53] <pippo> reading...

[21:54] <vrurg> Nemokosch: how could it? Iterables are mutable by definition.

[21:54] <tellable6> vrurg, I'll pass your message to Nemokosch

[21:57] <discord-raku-bot> <Nemokosch> I mean, it's pretty simple then, no? Something that doesn't act like a value, cannot be copied by value.

[21:59] <discord-raku-bot> <Nemokosch> Regarding an Iterator in particular: pippo think about it what it would mean for an Iterator to be copied

[22:01] <discord-raku-bot> <Nemokosch> if you consider two copies two completely isolated Iterators that produce the same values respectively - how could that work? Firstly, many Iterators are lazy so the semantics wouldn't even be easy to define

[22:01] *** jgaz left
[22:02] <discord-raku-bot> <Nemokosch> Moreover, how do you achieve that *without* pulling all the values from the original iterator?

[22:03] <pippo> m: my @a = [1,2,3,7]; my $itr1 = @a.iterator; my $itr2 = @a.iterator; say $itr1.pull-one; say $itr2.pull-one;

[22:03] <camelia> rakudo-moar 1bc45ba98: OUTPUT: ¬´1‚ê§1‚ê§¬ª

[22:03] <discord-raku-bot> <Nemokosch> Don't forget that an Iterator is a very simple interface with no particular data structure backing it up.

[22:04] <discord-raku-bot> <Nemokosch> basically it only promises that you can get a subsequent value - or you will know when you can't get more values

[22:06] <pippo> OK. thank you Nemokosch.¬† I think i'll drop iterators and try to work my way with something else. Cheers.

[22:07] *** pippo left
[22:09] <discord-raku-bot> <Nemokosch> the two biggest takeaways imo are: 1. `is copy` is not super useful for something that isn't used as a value (i.e deeply immutable and hence re-assignment is all the mutation you need to calculate with) 2. Iterators are like, "hollow" or something. Black boxes that can give you a value some magical way. There is not a lot you can do with something like that, and this isn't Raku specific from all I know.

[22:22] <moritz> fun fact, recently had a bug in a Python application; root cause was that some boolean test used "value in iterator" (inside a loop), and in python, the "in" operator exhausts the iterator until it finds a value, or the end

[22:23] <moritz> so if the iterator had the values (1, 2, 3, 4), and the first test was "3 in iterator", then later tests for "2 in iterator" failed

[22:23] <moritz> the fix was to construct a set from the iterator

[22:33] <discord-raku-bot> <Nemokosch> and this makes quite a lot of sense if you think about it

[22:34] <discord-raku-bot> <Nemokosch> how else could an iterator know if 3 is present? and iterators generally don't have any structure that could allow putting values back, let alone in front

[22:51] *** pippo joined
[22:52] *** pippo left
[23:03] <discord-raku-bot> <Nemokosch> https://github.com/2colours/Raku-ideas/blob/main/Squashathon%20reborn.md for what it's worth, I wrote a little vision of new squashathons. Feedback is appreciated ^^

[23:11] *** Kaipei left
[23:25] *** sena_kun left
[23:53] *** Kaipei joined
