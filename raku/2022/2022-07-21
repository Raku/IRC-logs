[00:01] *** linkable6 joined
[00:07] *** reportable6 left
[00:09] <SmokeMachine> saint-: it seems to be the ? On chats

[00:10] *** reportable6 joined
[00:10] <SmokeMachine> saint-: if you remove it (the `?`) it works: https://glot.io/snippets/gbu92d4tjy

[00:10] <SmokeMachine> (I removed the action while testing‚Ä¶)

[00:19] <saint-> SmokeMachine why does it break though? What if I want the match to be frugal/non-greedy

[00:24] <saint-> Because for my actual usecase I need it to be frugal

[00:31] *** Colere left
[00:39] *** kaskal- left
[00:41] *** kaskal joined
[01:02] *** Colere joined
[01:04] <SmokeMachine> Because you haven‚Äôt said a limit it would search for, so it will only return 1 char‚Ä¶ but if you add a limit (like a <?before> for example it works well: https://glot.io/snippets/gbu92d4tjy

[01:05] <SmokeMachine> m: say ‚Äúaaaaaaaa‚Äù ~~ /a+?/

[01:05] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§¬ª

[01:05] <SmokeMachine> m: say ‚Äúaaaaaaaab‚Äù ~~ /a+?/

[01:05] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§¬ª

[01:06] <SmokeMachine> m: say ‚Äúaaaaaaaab‚Äù ~~ /a+? <?before ‚Äúb‚Äù>/

[01:06] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´ÔΩ¢aaaaaaaaÔΩ£‚ê§¬ª

[01:06] <SmokeMachine> saint-: üëÜ

[01:06] <saint-> SmokeMachine : https://glot.io/snippets/gbuamtf4rl

[01:08] <saint-> Why does it work when it isn't part of a token. Meaning like if I just put <char>?+ 

[01:08] <saint-> I think I get it though

[01:08] <saint-> Because there is no end limit  when it evaluates just that token on its own

[01:09] <saint-> It's weird that those aren't equivalent though, I guess that's just how raku works right?

[01:11] <SmokeMachine> What do you want? Multiple sentences? Why not `token sentence { <word>+ % <.ws> <endPunc> }; token sentRefEnd { <sentence>+ <ref> }`?

[01:12] <SmokeMachine> (I forgot to mention word would be `\w+`

[01:14] <saint-> The % thing is interesting, didn't see that yet, but 

[01:14] <saint-> Right now I'm just trying to understand how this works, or rather why it's not working

[01:15] *** lichtkind left
[01:15] <SmokeMachine> https://glot.io/snippets/gbuavu593w

[01:16] <saint-> SmokeMachine https://glot.io/snippets/gbuawafqem

[01:16] <saint-> This still doesn't work, but the commented line works

[01:16] <SmokeMachine> (Sorry for keep using glot.io, but I‚Äôm using my phone‚Ä¶ so no computer to test code)

[01:17] <saint-> That's no problem, it's a cool site!

[01:17] <saint-> As for my problem, I just want to understand why my example https://glot.io/snippets/gbuawafqem doesnt work

[01:17] <SmokeMachine> Because char includes the endPunc, so it gets consumed by it and never is found by <?before>

[01:18] <saint-> Oh wait okay it should be nongreedy

[01:18] <saint-> Non greedy doesn't work either

[01:18] <saint->     token sentFrag { <char>+? <?before endPunc> }

[01:18] <saint-> This doesn't help

[01:19] <SmokeMachine> https://glot.io/snippets/gbuazuteey

[01:21] <saint-> Why doesn't non-greedy work though

[01:21] <saint-> It works if I don't put it in a 'sub' token

[01:21] <saint-> I get why your example works but it's pretty contrived just for this use case 

[01:21] <saint-> Or not that clear in general I guess

[01:22] <saint-> It's putting logic of other tokens in a lower level which shouldn't need to know about stuff

[01:22] <saint-> Sorry if I'm not expressing it cleraly

[01:22] <SmokeMachine> saint-: sorry, I‚Äôm going to sleep now‚Ä¶ (2:22 here‚Ä¶)

[01:23] <saint-> Okay no problem thanks for the help!

[02:15] *** evalable6 left
[02:15] *** linkable6 left
[02:16] *** linkable6 joined
[02:17] *** evalable6 joined
[03:17] *** statisfiable6 left
[03:17] *** bloatable6 left
[03:17] *** shareable6 left
[03:17] *** bisectable6 left
[03:17] *** unicodable6 left
[03:17] *** releasable6 left
[03:17] *** evalable6 left
[03:17] *** notable6 left
[03:17] *** nativecallable6 left
[03:17] *** greppable6 left
[03:17] *** coverable6 left
[03:17] *** committable6 left
[03:17] *** linkable6 left
[03:17] *** sourceable6 left
[03:17] *** benchable6 left
[03:17] *** quotable6 left
[03:17] *** tellable6 left
[03:17] *** reportable6 left
[03:18] *** greppable6 joined
[03:18] *** coverable6 joined
[03:18] *** nativecallable6 joined
[03:18] *** benchable6 joined
[03:18] *** quotable6 joined
[03:19] *** bloatable6 joined
[03:19] *** shareable6 joined
[03:19] *** statisfiable6 joined
[03:20] *** notable6 joined
[03:20] *** bisectable6 joined
[03:20] *** committable6 joined
[03:20] *** releasable6 joined
[03:20] *** evalable6 joined
[03:20] *** sourceable6 joined
[03:21] *** unicodable6 joined
[03:21] *** reportable6 joined
[03:21] *** linkable6 joined
[03:21] *** tellable6 joined
[04:21] *** shareable6 left
[04:21] *** releasable6 left
[04:21] *** benchable6 left
[04:21] *** sourceable6 left
[04:21] *** reportable6 left
[04:21] *** unicodable6 left
[04:21] *** linkable6 left
[04:21] *** nativecallable6 left
[04:21] *** bisectable6 left
[04:21] *** coverable6 left
[04:21] *** tellable6 left
[04:21] *** notable6 left
[04:21] *** evalable6 left
[04:21] *** committable6 left
[04:21] *** quotable6 left
[04:21] *** greppable6 left
[04:21] *** bloatable6 left
[04:21] *** statisfiable6 left
[04:21] *** bloatable6 joined
[04:21] *** reportable6 joined
[04:21] *** notable6 joined
[04:22] *** nativecallable6 joined
[04:22] *** evalable6 joined
[04:22] *** sourceable6 joined
[04:22] *** linkable6 joined
[04:22] *** committable6 joined
[04:22] *** tellable6 joined
[04:23] *** unicodable6 joined
[04:23] *** bisectable6 joined
[04:23] *** releasable6 joined
[04:23] *** quotable6 joined
[04:23] *** greppable6 joined
[04:23] *** coverable6 joined
[04:24] *** shareable6 joined
[04:24] *** statisfiable6 joined
[04:24] *** benchable6 joined
[05:24] *** bisectable6 left
[05:24] *** tellable6 left
[05:24] *** quotable6 left
[05:24] *** committable6 left
[05:24] *** reportable6 left
[05:24] *** linkable6 left
[05:24] *** statisfiable6 left
[05:24] *** shareable6 left
[05:24] *** coverable6 left
[05:24] *** bloatable6 left
[05:24] *** nativecallable6 left
[05:24] *** notable6 left
[05:24] *** sourceable6 left
[05:24] *** greppable6 left
[05:24] *** unicodable6 left
[05:24] *** releasable6 left
[05:24] *** evalable6 left
[05:24] *** benchable6 left
[05:24] *** evalable6 joined
[05:25] *** benchable6 joined
[05:25] *** committable6 joined
[05:25] *** quotable6 joined
[05:25] *** bloatable6 joined
[05:25] *** sourceable6 joined
[05:26] *** notable6 joined
[05:26] *** nativecallable6 joined
[05:26] *** coverable6 joined
[05:26] *** greppable6 joined
[05:26] *** releasable6 joined
[05:26] *** unicodable6 joined
[05:26] *** reportable6 joined
[05:26] *** linkable6 joined
[05:27] *** shareable6 joined
[05:27] *** bisectable6 joined
[05:27] *** statisfiable6 joined
[05:34] *** saint- left
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:17] *** Sgeo left
[06:42] <discord-raku-bot> <Nemokosch> I think SmokeMachine made a perfect argument

[06:42] <discord-raku-bot> <Nemokosch> > Because you haven‚Äôt said a limit it would search for, so it will only return 1 char

[06:44] *** merpaderp left
[06:46] *** merpaderp joined
[06:49] <discord-raku-bot> <Nemokosch> a regex/token is one entity, it's not some macro that gets substituted into another regex/token

[06:56] *** abraxxa joined
[06:57] *** Oshawott joined
[06:59] <discord-raku-bot> <Nemokosch> Having said that, I haven't got a clue why or how this works: https://glot.io/snippets/gbuazuteey

[06:59] *** archenoth left
[07:00] *** abraxxa left
[07:00] *** abraxxa joined
[07:06] *** Kaiepi joined
[07:07] <discord-raku-bot> <Nemokosch> okay, I think I get it

[07:07] <discord-raku-bot> <Nemokosch> it wouldn't match the final dot before the ref

[07:08] <discord-raku-bot> <Nemokosch> it's kinda hacky, basically the definition of a character prevents those from being matched

[08:00] *** archenoth joined
[08:02] *** Oshawott left
[08:37] *** Oshawott joined
[08:39] *** archenoth left
[08:46] *** lichtkind joined
[09:09] *** jaguart joined
[09:19] *** Oshawott left
[09:19] *** Sankalp left
[09:19] *** Sankalp- joined
[09:19] *** Oshawott joined
[09:20] *** Sankalp- is now known as Sankalp

[09:45] *** Ven_de_Thiel joined
[09:45] <Ven_de_Thiel> o/

[09:45] <Ven_de_Thiel> m: "-".IO.e; say 1; "-".IO.d;

[09:45] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´1‚ê§Failed to find '/home/camelia/-' while trying to do '.d'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:46] <Ven_de_Thiel> m: subset File of Str where .IO.e && !.IO.d; sub f(File) { say 1; }; f("-");

[09:46] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´Constraint type check failed in binding to parameter '<anon>'; expected File but got Str ("-")‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:52] *** Sankalp left
[09:56] <Voldenet> "-" is valid filename, try /dev/stdin

[09:58] *** sena_kun joined
[10:05] <discord-raku-bot> <Nemokosch> lizmat: what does CLI::Help do actually? It seems like if I just make my MAIN sub a multi, I would get -h and --help for free without it as well

[10:06] <lizmat> how?

[10:07] <lizmat> m: multi sub MAIN() { }; @*ARGS = "--help"

[10:07] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´Usage:‚ê§  <tmp>‚ê§¬ª

[10:07] <lizmat> is that what you mean ?

[10:07] <discord-raku-bot> <Nemokosch> yes

[10:07] <SmokeMachine> Hi lizmat have you seen my answer about json?

[10:07] <lizmat> well, that's for the cases where you can specify the handling of your options as arguments to main

[10:08] <lizmat> "rak" is too complicated for that, it basically has *%_ to catch all options, and takes it from there

[10:08] <lizmat> then CLI::Help is very helpful (to me anyway), as it let's me write extended help in text files in resources

[10:09] <lizmat> SmokeMachine: so how would you specify a path ?

[10:09] <discord-raku-bot> <Nemokosch> Fair enough

[10:11] <SmokeMachine> As code: *.parsed andthen .<path><to><wanted><key>.defined

[10:12] <SmokeMachine> (About specifying help on resources files‚Ä¶ do you also use it to generate your README and/or your pod?

[10:19] <lizmat> no, the pod is maintained separately and the README generated from that

[10:19] <lizmat> that information is more for the module developer / maintainer in my view...

[10:20] <lizmat> the user of "rak" will probably only use --help and/or have man pages created from that, I'd guess

[10:21] <SmokeMachine> (I read App::Rak‚Äôs README and Changes file probably more than I should‚Ä¶ :) )

[10:22] <lizmat> well, until recently, that was the only source of info

[10:22] <lizmat> --help should give you a lot more now

[10:24] <SmokeMachine> *more than I probably should (sorry I should learn proper English‚Ä¶)

[10:26] <lizmat> SmokeMachine: so I guess the problem re handling JSON, is that pretty JSON would be separated up into multiple lines, instead of a single blob?

[10:27] <SmokeMachine> No, also because when searching on json you would probably search for a path and not a string‚Ä¶

[10:30] <SmokeMachine> For example, if you want to search for every json-schema that has a endpoint defined with a query parameter called ‚Äúproperty‚Äù. Only searching by the string ‚Äúproperty‚Äù wouldn‚Äôt help‚Ä¶

[10:31] <lizmat> is there a module that would allow you to search a hash / array (from from_json) like that?

[10:34] <SmokeMachine> I was think in pure Raku... just parse the json and do something like:

[10:34] <SmokeMachine> m: my $parsed-json = {a => { b => { c => 42 }}}; say $parsed-json<a>{*}>><c>

[10:34] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´(42)‚ê§¬ª

[10:40] <lizmat> so, if JSON would be recognized, and a parsed json would be in $_ in your Callable, then you could do:

[10:41] <lizmat> rak '{ .<a>{*}>><c> }' ??

[10:44] <SmokeMachine> m: something like that, but I'd prefer to have an obj representing the file, that way I could do something like `rak '{ next unless .extension(2) eq "schema.json"; .parsed.<a>{*}>><c> }'`

[10:44] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Bogus term‚ê§at <tmp>:1‚ê§------> ile, that way I could do something like ‚èè`rak '{ next unless .extension(2) eq "sc‚ê§    expecting any of:‚ê§        argument list‚ê§        infix‚ê§        inf‚Ä¶¬ª

[10:45] <SmokeMachine> (sorry, please ignore the `m:`)

[10:45] <lizmat> how about a --json flag that would try to interprete each selected file as JSON, and only if that parsed, would present it as $_ to your callable?

[10:46] <lizmat> this would also imply --files-with-matches

[10:46] <SmokeMachine> better, but I couldn't, yet, avoid json that are not json-schema...

[10:47] <lizmat> how can you separate one from the other ?

[10:47] <SmokeMachine> blablabla.schema.json is a json-schema (depending on the user's definition)

[10:48] <lizmat> is that a file extension?   sorry, am a json schema noob

[10:49] <SmokeMachine> you could also, for example, search all json files that the content doesn't match the file name `rak '{ .file-name eq .parsed<file-name> }'

[10:50] <SmokeMachine> I don't think that's required, but I've seen many places using like that

[10:53] <SmokeMachine> another example, without using json, if you want to search all files that mentions its own name on its content `rak '{ .content.contains: .file-name  }'`

[10:54] <SmokeMachine> (assuming .file-name yould return the name of the current file and .content would return a string with its content)

[10:58] *** linkable6 left
[11:00] *** linkable6 joined
[11:03] *** Nemokosch joined
[11:03] <Nemokosch> m: $composit = { dummy => <actual content> }; $composit .= <dummy>;

[11:03] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '$composit' is not declared.  Did you mean 'CompUnit'?‚ê§at <tmp>:1‚ê§------> <BOL>‚èè$composit = { dummy => <actual content> ‚ê§¬ª

[11:03] <Nemokosch> oops

[11:04] <Nemokosch> m: my $composit = { dummy => <actual content> }; $composit .= <dummy>;

[11:04] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´No such method '&postcircumfix:<{ }>' for invocant of type 'Hash'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:04] <Nemokosch> ^ why does it lie?

[11:06] <SmokeMachine> m: my $composit = { dummy => <actual content> }; $composit .= AT-KEY("dummy")

[11:06] <camelia> rakudo-moar 7ec4b10d7: ( no output )

[11:06] <SmokeMachine> m: my $composit = { dummy => <actual content> }; $composit .= AT-KEY("dummy"); say $composit

[11:06] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´(actual content)‚ê§¬ª

[11:06] <SmokeMachine> curious

[11:07] <Nemokosch> I mean... okay but AT-KEY is lower-level and less powerful

[11:07] <SmokeMachine> m: $composit = {}; $composit{("bla", )}

[11:07] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '$composit' is not declared.  Did you mean 'CompUnit'?‚ê§at <tmp>:1‚ê§------> <BOL>‚èè$composit = {}; $composit{("bla", )}‚ê§¬ª

[11:08] <SmokeMachine> m: my $composit = {}; $composit{("bla", )}

[11:08] <camelia> rakudo-moar 7ec4b10d7: ( no output )

[11:09] <SmokeMachine> m: my $composit = { dummy => <actual content> }; $composit .= {"dummy"};

[11:09] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´No such method '&postcircumfix:<{ }>' for invocant of type 'Hash'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:10] <Nemokosch> m: my $composit = { dummy => <actual content> }; dd $composit.{"dummy"};

[11:10] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´$("actual", "content")‚ê§¬ª

[11:10] <Nemokosch> is this a syntax hack, then?

[11:10] <lizmat> not sure

[11:11] <Nemokosch> anyway, I think .= could be expected to work?

[11:11] *** Ssw joined
[11:11] <SmokeMachine> I would expect that to work...

[11:13] *** Nemokosch left
[11:14] <SmokeMachine> that's not only that...

[11:14] <SmokeMachine> this works:

[11:14] <SmokeMachine> m: my $composit = { dummy => <actual content> }; $composit .= self.elems; say $composit

[11:14] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´{dummy => (actual content)}‚ê§¬ª

[11:14] <SmokeMachine> but this doesn't:

[11:14] <SmokeMachine> m: my $composit = { dummy => <actual content> }; $composit .= self.<dummy>; say $composit

[11:14] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Malformed postfix call‚ê§at <tmp>:1‚ê§------> > <actual content> }; $composit .= self.‚èè<dummy>; say $composit‚ê§¬ª

[11:15] <discord-raku-bot> <Nemokosch> well, did it work

[11:16] <discord-raku-bot> <Nemokosch> seems to me it didn't return what you asked for

[11:16] <SmokeMachine> yeah, I think you are right

[11:17] <discord-raku-bot> <Nemokosch> which is no surprise actually - there is an issue for the precedence of .=

[11:17] <SmokeMachine> m: my $composit = { dummy => <actual content> }; $composit .= (self.<dummy>); say $composit

[11:17] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§'self' used where no object is available‚ê§at <tmp>:1‚ê§------> my => <actual content> }; $composit .= (‚èèself.<dummy>); say $composit‚ê§    expecting any of:‚ê§        argument list‚ê§        t‚Ä¶¬ª

[11:18] <SmokeMachine> :(

[11:27] *** Nemokosch joined
[11:27] <discord-raku-bot> <Nemokosch> another interesting one

[11:27] *** Ssw left
[11:28] <Nemokosch> m: my @values = (1..90).pick: 5; @values.classify(* % 3){1}[0] = 1; dd @values;

[11:28] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´Array @values = [48, 4, 55, 5, 80]‚ê§¬ª

[11:28] <Nemokosch> so the assignment succeeded... but to what?

[11:29] <Nemokosch> m: my @values = (1..90).pick: 5; dd @values; @values.classify(* % 3){1}[0] = 1; dd @values;

[11:29] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´Array @values = [85, 47, 76, 33, 24]‚ê§Array @values = [85, 47, 76, 33, 24]‚ê§¬ª

[11:30] <SmokeMachine> 12:29 <Nemokosch> m: my @values = (1..90).pick: 5; dd @values; (my %c = @values.classify(* % 3)){1}[0] = 1; dd @values; dd %c

[11:30] <SmokeMachine> m: my @values = (1..90).pick: 5; dd @values; (my %c = @values.classify(* % 3)){1}[0] = 1; dd @values; dd %c

[11:30] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´Array @values = [85, 6, 68, 16, 17]‚ê§Array @values = [85, 6, 68, 16, 17]‚ê§Hash %c = {"0" => $[6], "1" => $[1, 16], "2" => $[68, 17]}‚ê§¬ª

[11:30] <SmokeMachine> There!

[11:34] <discord-raku-bot> <Nemokosch> so classify did copy, after all

[11:36] <discord-raku-bot> <Nemokosch> again, I think this should be documented... rotor for example doesn't copy. You can witness the modified element.

[11:44] *** lichtkind_ joined
[11:47] *** lichtkind left
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:05] *** Ven_de_Thiel left
[12:08] *** Kaipei joined
[12:10] *** Kaiepi left
[12:18] *** frost joined
[12:28] <lizmat> SmokeMachine: release 0.20 of rak has a --json option

[12:29] <SmokeMachine> \o/

[12:29] <lizmat> % time rak '{ $_ with .<auth> }' --json

[12:29] <lizmat> META6.json: zef:lizmat

[12:38] *** frost left
[12:38] <Nemokosch> okay, next thing...

[12:39] <Nemokosch> m: my &test = *{'fej'}; my &test2 = *{'fej'; 'orr'};

[12:39] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´Type Whatever does not support associative indexing.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:40] <Nemokosch> m: my &test = *{'fej'};

[12:40] <camelia> rakudo-moar 7ec4b10d7: ( no output )

[12:40] <discord-raku-bot> <Nemokosch> so yeah, the first one works, the second doesn't, is what I'm trying to say

[12:41] <lizmat> yeah, the rules of WhateverCode generation are mysterious

[12:42] <discord-raku-bot> <Nemokosch> and the error message is clearly less-than-awesome, even if it doesn't work

[12:42] <discord-raku-bot> <Nemokosch> I don't know why it should not work but the error message is lying basically

[12:43] <SmokeMachine> m: my &bla = *.<bla>; my %a = %( bla => 42); say %a.&bla

[12:43] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´42‚ê§¬ª

[12:43] <lizmat> well, if the currying doesn't work, the * is a Whatever

[12:43] <lizmat> so technically, I understand the message

[12:44] <SmokeMachine> me too...

[12:44] <lizmat> but maybe an AT-KEY on Whatever could provide a better (runtime) error

[12:44] <lizmat> m: my &test2 = *.{'fej'; 'orr'}

[12:44] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´Type Whatever does not support associative indexing.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:46] <discord-raku-bot> <Nemokosch> You know the underlying behavior, in that sense you can understand the error message. But in this sense, all error messages are correct, this is not a high tally...

[12:49] <discord-raku-bot> <Nemokosch> Probably this fails on a syntax problem. But should it, really? Even with the dot

[12:49] <SmokeMachine> but yes, I agree that's LTA

[12:50] <SmokeMachine> that should work IMHO...

[12:52] <discord-raku-bot> <Nemokosch> I don't actually know but if I were to guess, once you detect the syntax problem, it's not more difficult to make it work than to give back a descriptive error message instead

[12:53] <lizmat> I suggest making an issue for it, and marking it as something to be solved in the RakuAST branch

[12:56] <discord-raku-bot> <Nemokosch> I'm trying to remember these and compile (haha) them in the evening

[12:56] <SmokeMachine> lizmat: could something like this be done? `ran --modify-files --backup=<ext> --save=I` and then `ran -I=bkp` mean `ran --modify-files --backup=bkp`? (just curious)

[12:57] <lizmat> I've been thinking about that, but have yet to find a way to make it easy to pass the given argument to the correct option

[12:59] <lizmat> how about ###?

[13:00] <lizmat> rak --modify-files --backup=### --save=I

[13:00] <SmokeMachine> `{}`?

[13:00] <lizmat> and then rak -l=bkp ?

[13:01] <lizmat> '{}' indicates a callable...  which could be confusing with a needle like that

[13:01] <SmokeMachine> my message was missing the last part, sorry: `rak --modify-files --backup=<ext> --save=i=ext`

[13:02] <SmokeMachine> yes, makes sense... I was thinking on `find`...

[13:03] <lizmat> find functionality is also on my list  :-)

[13:03] <SmokeMachine> (could, adding a "name" for the parameter, help on "documenting" your tags?)

[13:04] <lizmat> ?

[13:05] <SmokeMachine> like, this `rak --modify-files --backup=<ext> --save=I=ext`, when you call `rak --list-additional-options` could return `-i=ext` and that helps you to know it expects an extension...

[13:06] <SmokeMachine> or better: `rak --modify-files --backup=<extension> --save=i=extension` => `-I=extension`

[13:06] <lizmat> hmmm

[13:07] <SmokeMachine> (sorry, my Mac keeps replacing `i` with `I`)

[13:09] <lizmat> using < or > in an argument, will be troublesome in most shells

[13:09] <discord-raku-bot> <Nemokosch> is i a reserved trademark of Apple? xD

[13:11] <lizmat> SmokeMachine: also, how to handle a default

[13:11] <SmokeMachine> maybe it could even accept optlong's format, then `--save=I=extension` would ben that's a flag, `--save=C=lines=I` mean it's a number, etc

[13:11] <SmokeMachine> `--save=C=lines=i`

[13:12] <SmokeMachine> but maybe that's too much

[13:12] <lizmat> rak --modify-files --backup=[bak] --save=I

[13:12] <lizmat> rak -l    would use bak

[13:12] <lizmat> rak -l=bkp would use bkp ?

[13:12] <SmokeMachine> I like it!

[13:13] <SmokeMachine> rak --context=[10] --save=C ?

[13:14] <SmokeMachine> `rak --context=[] --save=C` for argument required?

[13:15] <lizmat> rak --modify-files --backup=! --save=I    # argument required

[13:16] <lizmat> lemme mull over that during a little bicycle ride  :-)

[13:16] <SmokeMachine> :)

[13:19] *** rypervenche left
[13:24] *** rypervenche joined
[14:20] *** m_athias left
[14:20] *** nine left
[14:20] *** nine joined
[14:21] *** m_athias joined
[14:49] *** saint- joined
[14:50] *** saint- left
[14:50] *** saint- joined
[14:53] *** jgaz joined
[14:57] *** abraxxa left
[15:00] *** Nemokosch left
[15:18] *** ProperNoun left
[15:20] *** jgaz left
[15:31] *** morte_ joined
[16:31] *** greppable6 left
[16:31] *** coverable6 left
[16:31] *** nativecallable6 left
[16:31] *** bloatable6 left
[16:31] *** releasable6 left
[16:31] *** quotable6 left
[16:31] *** bisectable6 left
[16:31] *** evalable6 left
[16:31] *** benchable6 left
[16:31] *** linkable6 left
[16:31] *** shareable6 left
[16:31] *** committable6 left
[16:31] *** sourceable6 left
[16:31] *** unicodable6 left
[16:31] *** statisfiable6 left
[16:31] *** notable6 left
[16:31] *** reportable6 left
[16:32] *** quotable6 joined
[16:32] *** bisectable6 joined
[16:32] *** shareable6 joined
[16:32] *** bloatable6 joined
[16:33] *** notable6 joined
[16:33] *** committable6 joined
[16:33] *** evalable6 joined
[16:33] *** greppable6 joined
[16:33] *** nativecallable6 joined
[16:33] *** sourceable6 joined
[16:33] *** benchable6 joined
[16:34] *** coverable6 joined
[16:34] *** releasable6 joined
[16:34] *** reportable6 joined
[16:34] *** linkable6 joined
[16:34] *** unicodable6 joined
[16:34] *** statisfiable6 joined
[16:40] *** jgaz joined
[17:29] <discord-raku-bot> <Nemokosch> Hey, do you know what I should do with an Exports.pm6 file if I want to make an old module up-to-date?

[17:32] <discord-raku-bot> <Nemokosch> or is this something completely ad-hoc in HTML::Tag? Because it's indeed not listed in the provides section...

[17:37] <discord-raku-bot> <Nemokosch> for now, I'm gonna assume the latter and add it to provides

[17:40] *** linkable6 left
[17:40] *** evalable6 left
[17:42] *** evalable6 joined
[17:42] *** linkable6 joined
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:04] *** ProperNoun joined
[18:14] *** morte_ left
[18:17] *** ProperNoun left
[18:21] <SmokeMachine> hi again lizmat ! could it be prettified some how? https://usercontent.irccloud-cdn.com/file/TPufRN6I/CleanShot%202022-07-21%20at%2019.20.18%402x.png

[18:22] <SmokeMachine> lizmat: sorry, maybe that's not needed... https://usercontent.irccloud-cdn.com/file/nXWYleYN/CleanShot%202022-07-21%20at%2019.21.54%402x.png

[18:23] <lizmat> yeah, whatever you return, gets output.  If it's not a string, it will get stringified, which may not be what you want

[18:24] *** ProperNoun joined
[18:24] *** morte_ joined
[18:29] <SmokeMachine> lizmat: something seems wrong: https://usercontent.irccloud-cdn.com/file/GIIsztCX/CleanShot%202022-07-21%20at%2019.29.21%402x.png

[18:31] <SmokeMachine> `rak '*.<a>{*}>><c>'` hangs

[18:32] <lizmat> % rak '*.<a>{*}>><c>' --degree=1

[18:32] <lizmat> Type WhateverCode does not support associative indexing.

[18:32] <SmokeMachine> yes... sorry... same here when I pass a single file...

[18:34] <SmokeMachine> but `rak --json '*.<a>{*}>><c>' <(echo '{"a": {"b": {"c": [42, 13, 3.14]}}}')` seems to not be expecting `--json`

[18:34] *** ProperNoun left
[18:35] <lizmat> SmokeMachine: I think it's basically because reading from STDIN is not really implemented yet

[18:36] <SmokeMachine> but that's a file... and that works for other codes...

[18:36] <lizmat> hmmm

[18:36] <SmokeMachine> for example, `rak --json '*.<a><b><c>' <(echo '{"a": {"b": {"c": [42, 13, 3.14]}}}')` works well

[18:37] *** ProperNoun joined
[18:37] *** eseyman joined
[18:39] <lizmat> then it's because it's not a valid WhateverCode:

[18:39] <lizmat> m: dd q/*.<a>{*}>><c>/.EVAL

[18:39] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´(Failure.new(exception => X::AdHoc.new(payload => "Type WhateverCode does not support associative indexing."), backtrace => Backtrace.new),)‚ê§¬ª

[18:39] *** sena_kun left
[18:40] <discord-raku-bot> <Nemokosch> uh-oh, the associative indexing is back

[18:40] *** sena_kun joined
[18:41] <lizmat> I guess I need to check for the EVAL to return a Failure

[18:42] <SmokeMachine> I also think so... but why is that blaming --json?

[18:42] <lizmat> some twisted logic issue in the MAIN sub I guess :-)

[18:43] <lizmat> it should have complained about the needle

[18:44] <SmokeMachine> lizmat: rak is becoming great!

[18:50] <lizmat> m: CATCH { say "CATCH" };  q|/ foo bar /|.EVAL   # meh, looks like this type of compile error is not catchable :-(

[18:50] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: ¬´Potential difficulties:‚ê§    Space is not significant here; please use quotes or :s (:sigspace) modifier (or, to suppress this warning, omit the space, or otherwise change the spacing)‚ê§    at /home/camelia/EVAL_0:1‚ê§    ------> / foo‚èè bar ‚Ä¶¬ª

[18:51] <SmokeMachine> lizmat: I have another suggestion, if you don't mind, that I'm not sure how useful it would be...

[18:53] <SmokeMachine> lizmat: the option to watch a file or a dir and that would be like `tail -f ... | grep ...`

[18:54] <lizmat> rak --watch pattern paths ?

[18:54] <SmokeMachine> yes

[18:54] <lizmat> feels doable  :-)

[18:54] <SmokeMachine> :)

[18:59] <SmokeMachine> does `--json` accept a list of jsons 1 p/ line? (like this: https://jsonlines.org) that's very used for logs... kind of the perfect use-case for rak...

[19:00] <SmokeMachine> lizmat: ^^

[19:00] <lizmat> --json currently assumes the whole file

[19:00] <lizmat> --json-per-line could well take one line and convert to json

[19:00] <SmokeMachine> --json-line?

[19:00] <lizmat> if that would fail, should it abort or ignore

[19:01] <lizmat> --json-per-file  and --json-per-line    you can create your own shortcuts if you want :-)

[19:01] <lizmat> --json will go in that case

[19:02] <SmokeMachine> üëç

[19:02] <SmokeMachine> (sorry for keep asking more features...)

[19:02] <lizmat> hmmm... didn;t know about JSONlines... maybe JSON::Fast::Hyper should also support that

[19:03] <lizmat> I can always say "no" or "make a PR"

[19:03] <lizmat> :-)

[19:04] *** mexen left
[19:07] *** morte_ left
[19:07] *** morte_` joined
[19:25] *** morte_` left
[19:43] *** linkable6 left
[19:45] *** linkable6 joined
[19:47] *** morte_` joined
[20:15] *** Xliff joined
[20:54] *** morte_` left
[20:58] *** morte_` joined
[21:01] *** jgaz left
[21:07] *** sena_kun left
[21:08] *** sena_kun joined
[21:13] *** guifa_ left
[21:14] *** guifa joined
[21:18] *** sena_kun left
[21:18] *** saint- left
[21:31] *** morte_` left
[21:38] *** morte_` joined
[21:56] *** morte_` left
[22:43] <discord-raku-bot> <Nemokosch> I'm almost certain there was discussion about .=

[22:43] <discord-raku-bot> <Nemokosch> But where is the issue for it?

[22:56] *** evalable6 left
[22:56] *** linkable6 left
[22:56] *** evalable6 joined
[22:57] *** linkable6 joined
[23:12] *** jaguart left
[23:16] *** Sgeo joined
[23:23] <Geth> ¬¶ problem-solving: 2colours assigned to coke Issue Function return types should also tell about the used assignment/container https://github.com/Raku/problem-solving/issues/337

[23:25] <discord-raku-bot> <Nemokosch> Anyway, I've just created 3 issues for 3 different things...

