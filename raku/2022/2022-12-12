[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:10] *** jpn joined
[00:22] <[Coke]> you can specify degree and batch - there are defaults
[00:24] <[Coke]> oh, oops: method race(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --> Iterable)
[00:24] <discord-raku-bot> <Nemokosch> are they different from other default values?
[00:25] <[Coke]> right in the docs. I thought those were driven by a per machine config
[00:39] *** NemokoschKiwi joined
[00:40] <discord-raku-bot> <Nemokosch> and apparently I'm not doing a great job at reading chat
[00:45] *** jpn left
[00:58] *** NemokoschKiwi left
[01:13] *** jpn joined
[01:22] *** jpn left
[01:35] *** jpn joined
[01:41] *** razetime joined
[01:48] *** jpn left
[02:01] *** jpn joined
[02:31] *** jpn left
[02:44] *** jpn joined
[02:50] *** jpn left
[03:02] *** jpn joined
[03:47] *** jpn left
[04:11] *** jpn joined
[04:16] *** jpn left
[04:17] *** jpn left
[04:31] *** jpn joined
[04:41] *** xinming left
[04:42] *** xinming joined
[05:09] *** jpn left
[05:33] *** epony left
[05:35] *** jpn joined
[05:50] *** jpn left
[06:00] *** reportable6 left
[06:01] *** grondilu joined
[06:01] <grondilu> Hi
[06:01] *** reportable6 joined
[06:01] <grondilu> m: say (-> &f { 1, &f.assuming(*, 1) ... * })({ cos $^a + $^b })[^10]
[06:01] <camelia> rakudo-moar d52342eb0: OUTPUT: «(1 -0.4161468365471424 0.834344819917976 -0.2605081543348971 0.7388111056961248 -0.16722541329588864 0.6728257104204812 -0.10185245484442669 0.6230599786146125 -0.05223986213471105)␤»
[06:02] <grondilu> m: say (-> &f { 1, &f.assuming(*, 1) ... * })(&cos o &[+])[^10]
[06:02] <camelia> rakudo-moar d52342eb0: OUTPUT: «Too many positionals passed; expected 0 to 2 arguments but got 3␤  in sub __PRIMED_ANON at EVAL_2 line 4␤  in sub __PRIMED_ANON at EVAL_2 line 1␤  in block <unit> at <tmp> line 1␤␤»
[06:03] <grondilu> m: say (&cos o &[+]).assuming(*, pi)(2)
[06:03] <camelia> rakudo-moar d52342eb0: OUTPUT: «0.4161468365471423␤»
[06:03] *** jpn joined
[06:05] <grondilu> m: say { &^f.assuming(*, pi) }(&cos o &[+])(2)
[06:05] <camelia> rakudo-moar d52342eb0: OUTPUT: «0.4161468365471423␤»
[06:05] <grondilu> m: say { 1, &^f.assuming(*, pi) ... * }(&cos o &[+])(2)
[06:05] <camelia> rakudo-moar d52342eb0: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Seq'␤  in block <unit> at <tmp> line 1␤␤»
[06:06] <grondilu> m: say { 1, &^f.assuming(*, pi) ... * }(&cos o &[+])
[06:06] <camelia> rakudo-moar d52342eb0: OUTPUT: «(...)␤»
[06:06] <grondilu> m: say { 1, &^f.assuming(*, pi) ... * }(&cos o &[+])[^10]
[06:06] <camelia> rakudo-moar d52342eb0: OUTPUT: «Too many positionals passed; expected 0 to 2 arguments but got 3␤  in sub __PRIMED_ANON at EVAL_2 line 4␤  in sub __PRIMED_ANON at EVAL_2 line 1␤  in block <unit> at <tmp> line 1␤␤»
[06:06] <grondilu> sorry for the noise, but I think there is a bug here
[06:06] <grondilu> to recap...
[06:07] <grondilu> m: say { &^f.assuming(*, pi) }(&cos o &[+])(2) # this works
[06:07] <camelia> rakudo-moar d52342eb0: OUTPUT: «0.4161468365471423␤»
[06:07] <grondilu> m: say { 1, &^f.assuming(*, pi) ... * }(&cos o &[+])[^10] # but not this?
[06:07] <camelia> rakudo-moar d52342eb0: OUTPUT: «Too many positionals passed; expected 0 to 2 arguments but got 3␤  in sub __PRIMED_ANON at EVAL_2 line 4␤  in sub __PRIMED_ANON at EVAL_2 line 1␤  in block <unit> at <tmp> line 1␤␤»
[06:09] <grondilu> I know that is a convoluted line but that's the best I could come up with to reproduce a weird error I got in some digest code of mine.
[06:09] *** jpn left
[06:10] <grondilu> slightly shorter:
[06:10] <grondilu> m: say 1, (&cos o &[+]).assuming(*, pi) ... * > 10
[06:10] <camelia> rakudo-moar d52342eb0: OUTPUT: «Too many positionals passed; expected 0 to 2 arguments but got 3␤  in sub __PRIMED_ANON at EVAL_2 line 4␤  in sub __PRIMED_ANON at EVAL_2 line 1␤  in block <unit> at <tmp> line 1␤␤»
[06:12] <grondilu> the part about three arguments is especially weird.  where are there three args??
[06:16] * grondilu was about to post an issue on github and notices rakudo already has 1k issues
[06:17] <grondilu> damn that is a lot of issues
[06:18] *** oodani left
[06:20] <grondilu> oh maybe the Seq interprets (...).assuming(*, pi) as { (...).assuming($_, pi) }
[06:20] <grondilu> m: say 1, { (&cos o &[+]).assuming($_, pi) } ... * > 10
[06:20] <camelia> rakudo-moar d52342eb0: OUTPUT: «Cannot resolve caller Real(Sub+{Callable[Mu]}:D: ); none of these signatures matches:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»
[06:21] <grondilu> nope
[06:21] *** oodani joined
[06:21] <grondilu> m: my &f = (&cos o &[+]).assuming(*, pi); say 1, &f ... * > 10
[06:21] <camelia> rakudo-moar d52342eb0: OUTPUT: «Too many positionals passed; expected 0 to 2 arguments but got 3␤  in sub __PRIMED_ANON at EVAL_2 line 4␤  in sub __PRIMED_ANON at EVAL_2 line 1␤  in block <unit> at <tmp> line 1␤␤»
[06:22] <grondilu> m: my &f = (&cos o &[+]).assuming(*, pi); say &f(e)
[06:22] <camelia> rakudo-moar d52342eb0: OUTPUT: «0.9117339147869649␤»
[06:23] <grondilu> m: my &f = (&[+]).assuming(*, pi); say 1, &f ... * > 10
[06:23] <camelia> rakudo-moar d52342eb0: OUTPUT: «(1 4.141592653589793 7.283185307179586 10.42477796076938)␤»
[06:24] <grondilu> m: my &f = &cos o &[+].assuming(*, pi); say 1, &f ... * > 10
[06:24] <camelia> rakudo-moar d52342eb0: OUTPUT: «(1 -0.5403023058681398 -0.8575532158463933 -0.654289790497779 -0.7934803587425655 -0.7013687736227564 -0.7639596829006542 -0.7221024250267077 -0.7504177617637604 -0.73140404242251 -0.7442373549005568 -0.7356047404363472 -0.7414250866101092 -0.73750689…»
[06:35] <grondilu> m: say (&[+]).assuming(*, pi).count
[06:35] <camelia> rakudo-moar d52342eb0: OUTPUT: «1␤»
[06:36] <grondilu> m: say (&[+]).assuming(*, pi).arity
[06:36] <camelia> rakudo-moar d52342eb0: OUTPUT: «0␤»
[06:36] <grondilu> ??
[06:36] <grondilu> m: say (&cos o &[+]).assuming(*, pi).count
[06:36] <camelia> rakudo-moar d52342eb0: OUTPUT: «Inf␤»
[06:37] <grondilu> m: say (&cos o &[+]).assuming(*, pi).arity
[06:37] <camelia> rakudo-moar d52342eb0: OUTPUT: «0␤»
[06:37] <grondilu> m: say (&cos o &[+]).assuming(*, pi).of
[06:37] <camelia> rakudo-moar d52342eb0: OUTPUT: «(Mu)␤»
[06:37] <grondilu> that doesn't look right
[06:38] <grondilu> m: say (&cos o &[+]).arity
[06:38] <camelia> rakudo-moar d52342eb0: OUTPUT: «0␤»
[06:38] <grondilu> m: say (&cos o &[+]).count
[06:38] <camelia> rakudo-moar d52342eb0: OUTPUT: «2␤»
[06:38] <grondilu> m: say (&cos o &[+]).of
[06:38] <camelia> rakudo-moar d52342eb0: OUTPUT: «(Mu)␤»
[06:41] * grondilu looks at the code for C<assuming>
[06:41] * grondilu runs away in terror
[06:56] *** grondilu left
[06:58] *** jpn joined
[07:06] *** jpn left
[07:17] *** epony joined
[07:31] *** abraxxa joined
[07:34] *** jpn joined
[07:40] *** djerius left
[07:41] *** djerius joined
[07:42] *** xinming left
[07:42] *** xinming joined
[07:44] *** sena_kun joined
[08:16] *** jpn left
[08:19] *** Sgeo left
[08:20] *** xinming left
[08:21] *** xinming joined
[08:51] *** dakkar joined
[08:54] *** jpn joined
[09:25] *** tappi joined
[09:35] *** jpn left
[09:46] *** jpn joined
[10:15] <guifa> grondilu: my understanding is that assuming was put together rather quickly
[10:15] <tellable6> guifa, I'll pass your message to grondilu
[10:16] <guifa> it's also rather slow. But there's definitely some potential for speed up
[10:16] <guifa> I need to spend sometime looking at those examples though to see what may be going on and if it makes sense
[10:46] *** evalable6 left
[10:49] *** evalable6 joined
[11:43] *** tappi left
[11:55] *** pmurias joined
[11:55] <pmurias> hi!
[11:55] <tellable6> 2022-07-09T11:51:29Z #raku <Xliff> pmurias Hey there! Nice to see you around. Hope to catch up to you in the future!
[11:57] <pmurias> https://simon.peytonjones.org/assets/pdfs/haskell-exchange-22.pdf - interesting to see the overlap with Raku junctions
[11:58] <lizmat> guifa: assuming is screaming "redo me with RakuAST"  but we'll have to wait until the Raku grammar uses RakuAST, because we currently cannot introspect the given code enough
[11:58] <lizmat> and/or re-use parts of it
[12:00] <guifa> lizmat: yeah that's what I was thinking.  If I could get a hold of a RAST representation of a sub, I'm fairly certain I could produce an assumed version of it super easily
[12:00] <lizmat> yup
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:00] <lizmat> anyways, rakuast branch has been updated by vrurg and is now "main"  :-)
[12:00] * guifa is really hoping that traits will get rakuast representations down the road
[12:00] <guifa> because OMG the stuff I could with that
[12:01] <lizmat> yup  :-)
[12:02] <discord-raku-bot> <Nemokosch> Voldenet: reminder
[12:05] <Voldenet> Oh, nice
[12:40] *** pmurias left
[12:42] <Voldenet> ".assuming" is a weird part of the language, I shudder every time I remember it actually does _EVAL_
[12:48] <Geth> ¦ ecosystem/main: 307669fc48 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list
[12:48] <Geth> ¦ ecosystem/main: Moved to the zef ecosystem
[12:48] <Geth> ¦ ecosystem/main: 
[12:48] <Geth> ¦ ecosystem/main: One down, a few to go.
[12:48] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/307669fc48
[12:55] <Voldenet> btw, nice junctions presentation, I adore usage of comic sans
[13:01] * leont doesn't quite understand why assuming can't just use Captures to do it's thing, all you really need to do is merging captures, right?
[13:05] <Voldenet> iirc I've tried implementing it with Captures and it wasn't exactly trivial
[13:22] <Geth> ¦ ecosystem/main: 94fd1471b6 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list
[13:22] <Geth> ¦ ecosystem/main: Moved to zef ecosystem
[13:22] <Geth> ¦ ecosystem/main: 
[13:22] <Geth> ¦ ecosystem/main: Looking for greener pastures
[13:22] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/94fd1471b6
[14:18] *** razetime left
[14:54] *** lichtkind joined
[14:57] *** razetime joined
[15:25] *** squashable6 left
[15:26] *** squashable6 joined
[15:41] *** yay joined
[15:58] *** Sgeo joined
[16:01] *** discord-raku-bot left
[16:01] *** discord-raku-bot joined
[16:24] *** abraxxa left
[16:24] <Geth> ¦ Raku-Steering-Council/main: 5ad315bdca | (Geoffrey Broadwell)++ | minutes/20221210.md
[16:24] <Geth> ¦ Raku-Steering-Council/main: Add RSC meeting minutes for 2022-12-10
[16:24] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/5ad315bdca
[16:42] *** Kaiepi left
[16:55] <[Coke]> ... Anyone who has found drag and drop to be acting "funny" on recent osx's ... disable "spring-loading" in accessibility. ahhh
[17:01] *** jpn left
[17:01] *** Kaiepi joined
[17:09] *** jpn joined
[17:13] *** yay left
[17:35] *** martinthewildpig joined
[17:39] *** dakkar left
[17:40] *** razetime left
[17:40] *** mscha joined
[17:41] <mscha> m: my Int $n; say $n === 0;
[17:41] <camelia> rakudo-moar d52342eb0: OUTPUT: «False␤»
[17:41] <mscha> Is this the proper way to check for Int equality without complaining about uninitialized values?
[17:41] <mscha> Doesn't seem to be documented for Int.
[17:45] <discord-raku-bot> <Nemokosch> the reason this doesn't complain about uninitialized values is that it performs a very generic, WHICH based comparison
[17:45] *** lizmat left
[17:48] *** lizmat joined
[17:48] <discord-raku-bot> <Nemokosch> another quasi-solution would be to use quietly on the statement, silencing all runtime warnings
[17:50] <mscha> m: my $a; say quietly $a == 0;
[17:50] <camelia> rakudo-moar d52342eb0: OUTPUT: «True␤»
[17:50] <mscha> m: my $a; quietly say $a == 0;
[17:50] <camelia> rakudo-moar d52342eb0: OUTPUT: «True␤»
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:09] *** martinthewildpig left
[18:09] <mscha> m: my @a; @a[0].push: (3,4); say @a[0]; for @a[0] -> ($x,$y) { say "($x, $y)" }
[18:09] <camelia> rakudo-moar d52342eb0: OUTPUT: «[(3 4)]␤Too few positionals passed to '<anon>'; expected 2 arguments but got 1 in sub-signature␤  in block <unit> at <tmp> line 1␤␤»
[18:09] <mscha> What am I doing wrong here?
[18:13] <mscha> m: my @a; @a[0].push: (3,4); say @a[0]; for |@a[0] -> ($x,$y) { say "($x, $y)" }
[18:13] <camelia> rakudo-moar d52342eb0: OUTPUT: «[(3 4)]␤(3, 4)␤»
[18:13] <mscha> This works, but why is it needed?
[18:22] *** sena_kun left
[18:23] * lizmat is getting ready to ditch WordPress completely
[18:23] <El_Che> you ditcher
[18:23] *** sena_kun joined
[18:23] *** jpn left
[18:23] <lizmat> it's like working on a 1200 baud line on a system in the US over satellite all over again
[18:24] <El_Che> hehe
[18:25] <El_Che> you mean for raku weekly?
[18:25] <lizmat> yeah, while I'm typing this I'm literally watching a whole line slowly appear in de WP editor
[18:25] <El_Che> JS was a great solution
[18:25] <El_Che> :)
[18:26] <lizmat> such behaviour was unacceptable when I wrote an editor for a client in the late 1988's, to run on 286 / 386 machines
[18:26] <lizmat> 30+ years later it's still the same  :-(
[18:26] <El_Che> I don't know when I will write a blogpost, but I will create static content from md
[18:26] <El_Che> I have a caddy container running to put hugo content
[18:28] <hobbified> mscha: -> (($x, $y)) is another thing that works, if it makes you happier :)
[18:31] <mscha> hobbified: not really, bracket soup makes me nervous.  ;-)
[18:40] *** jpn joined
[18:45] *** jpn left
[18:48] <discord-raku-bot> <Nemokosch> well you did deliberately nest it so...
[18:50] <mscha> Because IRL I need more than @a[0].  But I still don't understand why "for @a[0]" gives me @a[0] itself, and not its contents.
[18:51] <discord-raku-bot> <Nemokosch> then we might have two things going on
[18:52] <discord-raku-bot> <Nemokosch> dayum, 3 dimensional
[18:54] <mscha> m: my @a; @a[0].push: (3,4); @a[0].push: (5,6); say @a[0]; for @a[0] -> ($x,$y) { say "(x='$x', y='$y')" }
[18:54] <camelia> rakudo-moar d52342eb0: OUTPUT: «[(3 4) (5 6)]␤(x='3 4', y='5 6')␤»
[18:54] <discord-raku-bot> <Nemokosch> okay, so here is the thing
[18:54] <discord-raku-bot> <Nemokosch> @a is an Array
[18:54] <discord-raku-bot> <Nemokosch> now, what are the elements of an Array?
[18:55] *** Nemokosch joined
[18:56] <Nemokosch> m: my @a; @a[0].push: (3, 4); dd @a[0];
[18:56] <camelia> rakudo-moar d52342eb0: OUTPUT: «Array @a = $[(3, 4),]␤»
[18:57] <mscha> m: my @a; @a.push: (3,4); @a.push: (5,6); say @a; for @a -> ($x,$y) { say "(x='$x', y='$y')" }
[18:57] <camelia> rakudo-moar d52342eb0: OUTPUT: «[(3 4) (5 6)]␤(x='3', y='4')␤(x='5', y='6')␤»
[18:57] <Nemokosch> See the dollar sign? The elements of an Array are _Scalars_
[18:57] <mscha> Ah, OK.
[18:58] *** jpn joined
[18:58] <Nemokosch> btw I don't like how dd tries to lie to us: it wasn't Array @a obviously, it was Array @a[0]. It would be good to see where it takes the name from...
[18:58] <Nemokosch> anyway, since it's a Scalar container and Scalar containers iterate as one element, the solution is within reach:
[18:58] <mscha> Is there any way around this?  In other words, can I get @a[0] to be (or behave like) an array?
[18:59] <Nemokosch> m: my @a; @a[0].push: (3,4); say @a[0]; for @a[0][] -> ($x,$y) { say "($x, $y)" }
[18:59] <camelia> rakudo-moar d52342eb0: OUTPUT: «[(3 4)]␤(3, 4)␤»
[19:00] <mscha> OK, that's a bit better than my attempt.
[19:00] <Nemokosch> we might get a dedicated decont soon, if somebody fancies that :)
[19:01] <Nemokosch> conventionally, you can decontainerize using zen-slices <> and [] respectively. For positional stuff, I like [] more but it's completely up to you.
[19:01] <Nemokosch> m: my @a; @a[0].push: (3,4); say @a[0]; for @a[0]<> -> ($x,$y) { say "($x, $y)" }
[19:01] <camelia> rakudo-moar d52342eb0: OUTPUT: «[(3 4)]␤(3, 4)␤»
[19:01] <mscha> 99% of the time I love Raku.  But 1% of the time, it annoys me with unintuitive stuff like this.
[19:01] <mscha> Yeah, [] looks better than <> in this case.
[19:04] <Nemokosch> How to put it... this is the kind of stuff one can develop Stockholm syndrome for, quite quickly
[19:05] <Nemokosch> I've grown to like the term "strangely consistent". I think it does express this ambivalence quite well.
[19:07] <Nemokosch> It could be read as an exaggeration of consistency but I frankly don't think that's the accurate interpretation. It's rather just "consistent in a way that often comes off as strange"
[19:08] <mscha> Anyway, thanks for the explanation.
[19:10] <Nemokosch> no problem ^^
[19:10] *** Nemokosch left
[19:12] <discord-raku-bot> <Nemokosch> Another note: I'm not sure if you really need an array as opposed to a plain list. That would not containerize its elements by default.
[19:14] <hobbified> you do if you want to build it up with push :)
[19:14] <lizmat> looks like clearing out all of WP's local cache, made the editor workable again
[19:14] <hobbified> but if you can get around *that* (gather/take maybe?)
[19:16] *** jpn left
[19:17] <mscha> @a[0][] stuff used at: https://github.com/mscha/aoc/blob/master/aoc2022/aoc12
[19:17] <discord-raku-bot> <Nemokosch> yes, sure thing but I for one use push quite seldom - let alone with further Positionals as elements 😛
[19:19] <mscha> In calc-distance().  I can't think of a more elegant way to keep track of all points with distance d.
[19:20] *** discord-raku-bot left
[19:20] *** discord-raku-bot joined
[19:42] *** kylese joined
[19:42] *** jpn joined
[19:53] *** Nemokosch joined
[19:53] *** Nemokosch left
[20:00] *** kylese left
[20:10] *** jpn left
[20:12] *** grondilu joined
[20:13] <grondilu> m: say my +^blob32.new(271733878)[0];
[20:13] <camelia> rakudo-moar d52342eb0: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Malformed my␤at <tmp>:1␤------> say my⏏ +^blob32.new(271733878)[0];␤»
[20:13] <tellable6> 2022-12-12T10:15:30Z #raku <guifa> grondilu: my understanding is that assuming was put together rather quickly
[20:13] <grondilu> m: say +^blob32.new(271733878)[0];
[20:13] <camelia> rakudo-moar d52342eb0: OUTPUT: «-271733879␤»
[20:14] <grondilu> I really didn't expect a negative value to come out of a bitwise boolean operator on Blob
[20:14] <grondilu> m: say +^my uint32 $ = 271733878;
[20:14] <camelia> rakudo-moar d52342eb0: OUTPUT: «18446744073437817737␤»
[20:14] *** mscha left
[20:15] <grondilu> m: say 18446744073437817737 Cmp 2**32
[20:15] <camelia> rakudo-moar d52342eb0: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> say 18446744073437817737⏏ Cmp 2**32␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤       …»
[20:15] <grondilu> m: say 18446744073437817737 cmp 2**32
[20:15] <camelia> rakudo-moar d52342eb0: OUTPUT: «More␤»
[20:15] <grondilu> nor a larger value than 2**32
[20:17] <grondilu> m: say .base(2) given +^my uint32 $ = 271733878;
[20:17] <camelia> rakudo-moar d52342eb0: OUTPUT: «1111111111111111111111111111111111101111110011011010101110001001␤»
[20:18] <grondilu> looks like a uint64.  Why does &[+^] promote a uint32 to a uint64?
[20:18] <discord-raku-bot> <Nemokosch> how does this work at all?
[20:18] *** Nemokosch joined
[20:19] <Nemokosch> m: my uint32 $lol = 271733878; say +^ $lol;
[20:19] <camelia> rakudo-moar d52342eb0: OUTPUT: «18446744073437817737␤»
[20:19] *** yay joined
[20:19] <grondilu> and why isn't it consistent with how it behaves inside a blob32?
[20:19] <Nemokosch> oh okay, another thing that works differently in the REPL xd
[20:20] <Nemokosch> m: my uint32 $lol = 271733878; +^ $lol andthen .base(2).say;
[20:20] <camelia> rakudo-moar d52342eb0: OUTPUT: «-10000001100100101010001110111␤»
[20:20] *** Nemokosch left
[20:21] *** discord-raku-bot left
[20:21] *** discord-raku-bot joined
[20:23] <discord-raku-bot> <Nemokosch> anyway, this is the invoked function: https://github.com/rakudo/rakudo/blob/704a05b934ba10f3240e8764827bbfd7fe089cdf/src/core.c/Int.pm6#L541
[20:24] <grondilu> yeah, I was looking at it too.  I now think I recall that all native types are treated the same regarless of their size.
[20:25] <grondilu> so they're all uint in that case
[20:25] <grondilu> m: say .base(2) given +^my uint $ = 271733878;
[20:25] <camelia> rakudo-moar d52342eb0: OUTPUT: «1111111111111111111111111111111111101111110011011010101110001001␤»
[20:25] *** jpn joined
[20:26] <grondilu> and I suppose prefix:<+^> always uses the largest type not to lose information or something?
[20:26] *** sena_kun left
[20:26] <grondilu> m: say .base(2) given +^my uint $ = 1;
[20:26] <camelia> rakudo-moar d52342eb0: OUTPUT: «1111111111111111111111111111111111111111111111111111111111111110␤»
[20:26] <grondilu> yeah, it seems so.
[20:27] <grondilu> that's kind of LTA
[20:27] *** sena_kun joined
[20:27] <discord-raku-bot> <Nemokosch> > This is due to the fact that Natives don't know their types because they're just values, without any metadata. In multi-dispatch, you can have a native candidate, but you cannot differentiate different sizes or signedness of the same native type. That is, you can have an Int and int candidates, but there would be an ambiguity between, for instance int, uint, atomicint or int64 candidates.
[20:27] <grondilu> I'm writing digest functions and I was hoping to do uint32 bitwise arithmetics without ever having to use the modulus operator
[20:30] *** discord-raku-bot left
[20:30] *** discord-raku-bot joined
[20:30] <grondilu> couldn't the bitwise operators call their native equivalent when called with natives?
[20:31] <grondilu> same for arithmetic operators while we're at it.
[20:31] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/12/12/2022-50-mainified/
[20:32] <discord-raku-bot> <Nemokosch> what does "their native equivalent" mean here?
[20:32] <grondilu> hum
[20:33] <grondilu> yeah I'm not quite sure how that would work, I admit.
[20:35] <discord-raku-bot> <Nemokosch> I was thinking of a plain dumb adverb, by the way. to be able to say +^ 1234 :32bit or something like this
[20:36] <grondilu> :uint32
[20:37] <discord-raku-bot> <Nemokosch> the details can be clarified ^^
[20:39] *** discord-raku-bot left
[20:39] <grondilu> still, what about blobs, they do know their types, no?  So boolean operators could behave appropriately when mapped to them.
[20:39] *** discord-raku-bot joined
[20:40] <grondilu> m: say +^<<blob8.new(^10)
[20:40] <camelia> rakudo-moar d52342eb0: OUTPUT: «(-1 -2 -3 -4 -5 -6 -7 -8 -9 -10)␤»
[20:40] <grondilu> ^I mean isn't that silly?
[20:40] <grondilu> m: say +^<<blob8.new(^10).map: *.base(2)
[20:40] <camelia> rakudo-moar d52342eb0: OUTPUT: «(-1 -2 -11 -12 -101 -102 -111 -112 -1001 -1002)␤»
[20:40] <discord-raku-bot> <Nemokosch> what happened here?
[20:41] <grondilu> m: say (+^<<blob8.new(^10)).map: *.base(2)
[20:41] <camelia> rakudo-moar d52342eb0: OUTPUT: «(-1 -10 -11 -100 -101 -110 -111 -1000 -1001 -1010)␤»
[20:41] <grondilu> blob8 is supposed to contain unsigned ints
[20:41] <discord-raku-bot> <Nemokosch> oh, everything is just negative 😄
[20:42] <grondilu> m: say +^my uint $ = 1
[20:42] <camelia> rakudo-moar d52342eb0: OUTPUT: «18446744073709551614␤»
[20:44] <grondilu> what happens in C if I do `short i = 1; long long j = ^i;`?  I actually have no idea.
[20:45] <discord-raku-bot> <Nemokosch> well, from what I can see
[20:45] <discord-raku-bot> <Nemokosch> MoarVM itself doesn't know negations of different sizes
[20:45] <discord-raku-bot> <Nemokosch> or at least doesn't expose such a thing to NQP
[20:51] * grondilu looks at https://docs.raku.org/language/numerics#Native_numerics
[20:51] <Geth> ¦ App-Rakubrew: c82c3ae540 | (Patrick Böker)++ | 4 files
[20:51] <Geth> ¦ App-Rakubrew: Track the master -> main branch rename in rakudo
[20:51] <Geth> ¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/c82c3ae540
[20:51] <Geth> ¦ App-Rakubrew: 990cde0ea9 | (Patrick Böker)++ | 3 files
[20:51] <Geth> ¦ App-Rakubrew: Version 31
[20:51] <Geth> ¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/990cde0ea9
[20:51] <grondilu> m: say (my uint8 $ = 0) -= 156
[20:51] <camelia> rakudo-moar d52342eb0: OUTPUT: «Cannot modify an immutable Int (0)␤  in block <unit> at <tmp> line 1␤␤»
[20:52] <grondilu> m: say (my uint8 $) -= 156
[20:52] <camelia> rakudo-moar d52342eb0: OUTPUT: «100␤»
[20:52] <grondilu> m: say (my uint8 $) -= 100
[20:52] <camelia> rakudo-moar d52342eb0: OUTPUT: «156␤»
[20:52] <grondilu> m: say (my uint16 $) -= 100
[20:52] <camelia> rakudo-moar d52342eb0: OUTPUT: «65436␤»
[20:53] <grondilu> 🤔
[20:53] <grondilu> m: say (my uint32 $) -= 100
[20:53] <camelia> rakudo-moar d52342eb0: OUTPUT: «4294967196␤»
[20:53] <grondilu> 😕
[20:54] <grondilu> oh I see, here we mutate the variable so it has to stay in the same native type
[20:55] <grondilu> m: my buf32 $b .= new: 1; $b[0] +^= 0; say $b
[20:55] <camelia> rakudo-moar d52342eb0: OUTPUT: «Buf[uint32]:0x<00000001>␤»
[20:56] <grondilu> m: my buf32 $b .= new: 1; $b[0] = +^$b[0]; say $b
[20:56] <camelia> rakudo-moar d52342eb0: OUTPUT: «Buf[uint32]:0x<FFFFFFFE>␤»
[20:56] <grondilu> maybe that's what I shoud do
[21:00] <discord-raku-bot> <Nemokosch> clever 😄 I wonder how this works
[21:03] *** jpn left
[21:09] <discord-raku-bot> <Nemokosch> > qqx sets the topic to the cli response,
[21:10] <discord-raku-bot> <Nemokosch> > qqx sets the topic to the cli response,
[21:10] <discord-raku-bot> <Nemokosch> I didn't know that
[21:28] <bartolin> grondilu: the "Cannot modify an immutable Int" is something, I've noted in https://github.com/rakudo/rakudo/blob/b0f9d8324e/src/Raku/ast/code.rakumod#L223 as well. It happens with int as well
[21:28] <bartolin> m: (my int $x = 42) = 47
[21:28] <camelia> rakudo-moar d52342eb0: OUTPUT: «Cannot modify an immutable Int (42)␤  in block <unit> at <tmp> line 1␤␤»
[21:29] <bartolin> (which still looks wrong to me)
[21:29] *** jpn joined
[21:47] <grondilu> yeah that looks wrong
[21:48] <discord-raku-bot> <Nemokosch> agreed
[21:50] <discord-raku-bot> <Nemokosch> although I think it's understandable. I haven't actually checked but I suspect native variables are special-cased for assignment
[21:51] <discord-raku-bot> <Nemokosch> hmm... they are stored in something called IntLexRef
[21:52] * grondilu thinks he had sped up Digest::RIPEMD about 2 times 😄
[21:52] <discord-raku-bot> <Nemokosch> 👏
[21:52] <grondilu> apparently by just using a reduce instead of a loop
[21:53] <grondilu> which amazes me
[21:53] <grondilu> https://github.com/grondilu/libdigest-raku/commit/e1c137eb92532e1722dd1377a8a691896cff0ca8
[21:53] <discord-raku-bot> <Nemokosch> is bartolin and usev6 the same person?
[21:54] <bartolin> Nemokosch: yes
[21:54] <tellable6> bartolin, I'll pass your message to Nemokosch
[21:56] <discord-raku-bot> <Nemokosch> good to see you around 🎉
[21:57] <bartolin> grondilu: nice
[21:58] <grondilu> FP looks so nice.  I'm still trying to figure out how to do it for the inner loop too, but it's not obvious
[22:00] *** yay is now known as equinox
[22:00] <discord-raku-bot> <Nemokosch> > buf32.new($h).clone xx 2
[22:00] <discord-raku-bot> <Nemokosch> does this replicate the same clone or make two clones?
[22:00] <grondilu> make two clones, hopefully
[22:01] *** equinox is now known as equinox_
[22:02] <grondilu> &[xx] is supposed to currify (I think that's the word)
[22:02] <discord-raku-bot> <Nemokosch> seems that it returns two objects with different id's
[22:02] *** equinox_ left
[22:02] <grondilu> m: say rand xx 2
[22:02] <camelia> rakudo-moar d52342eb0: OUTPUT: «(0.8816995699352017 0.8916930751171629)␤»
[22:03] <grondilu> m: say class {}.new.WHICH xx 2
[22:03] <camelia> rakudo-moar d52342eb0: OUTPUT: «(<anon|1>|4297118153344 <anon|1>|4297118153376)␤»
[22:03] <[Coke]> it does the call and dupes the value
[22:04] <[Coke]> m: say (class {}.new xx 2).map(*.WHICH)
[22:04] <camelia> rakudo-moar d52342eb0: OUTPUT: «(<anon|1>|3958285555904 <anon|1>|3958285556928)␤»
[22:19] *** habere-et-disper joined
[22:21] <grondilu> weird, I've managed to rewrite the inner loop with a reduce too, but now it's slighly slower
[22:23] *** perlbot left
[22:23] *** simcop2387 left
[22:24] *** Nemokosch joined
[22:28] <grondilu> in any case, it looks better.  I put in on RC: https://rosettacode.org/wiki/RIPEMD-160#Raku
[22:31] *** perlbot joined
[22:34] *** simcop2387 joined
[22:42] <habere-et-disper> How do I use the bisectable6 bot?
[22:44] *** jpn left
[22:44] <Nemokosch> https://github.com/Raku/whateverable/wiki/Bisectable
[22:44] <tellable6> 2022-12-12T21:54:20Z #raku <bartolin> Nemokosch: yes
[22:44] <Nemokosch> long story short: you can specify e.g old=2022.07 new=2022.12, and then add your code
[23:02] <habere-et-disper> bisect: old=2022.07 sub foo ( @bar = (2, *+7 ...^ * > 28) ) { say @bar }
[23:02] <bisectable6> habere-et-disper, On both starting points (old=2022.07 new=d52342e) the exit code is 0 and the output is identical as well
[23:02] <bisectable6> habere-et-disper, Output on both points: «»
[23:02] <habere-et-disper> bisect: old=2022.07 sub foo ( @bar = (2, *+7 ...^ * > 28) ) { say @bar }; foo()
[23:02] <bisectable6> habere-et-disper, On both starting points (old=2022.07 new=d52342e) the exit code is 0 and the output is identical as well
[23:02] <bisectable6> habere-et-disper, Output on both points: «(2 9 16 23)␤»
[23:03] <discord-raku-bot> <Nemokosch> do you have any objections?
[23:05] *** jpn joined
[23:28] *** jpn left
[23:33] *** sena_kun left
[23:55] *** jpn joined
