[00:01] *** squashable6 left
[00:01] *** coverable6 left
[00:01] *** bisectable6 left
[00:01] *** statisfiable6 left
[00:01] *** shareable6 left
[00:01] *** greppable6 left
[00:01] *** linkable6 left
[00:01] *** sourceable6 left
[00:01] *** evalable6 left
[00:01] *** releasable6 left
[00:01] *** nativecallable6 left
[00:01] *** benchable6 left
[00:01] *** quotable6 left
[00:01] *** bloatable6 left
[00:01] *** committable6 left
[00:01] *** tellable6 left
[00:01] *** reportable6 left
[00:01] *** unicodable6 left
[00:01] *** shareable6 joined
[00:01] *** bloatable6 joined
[00:01] *** bisectable6 joined
[00:02] *** evalable6 joined
[00:02] *** reportable6 joined
[00:02] *** releasable6 joined
[00:02] *** unicodable6 joined
[00:02] *** statisfiable6 joined
[00:03] *** quotable6 joined
[00:03] *** benchable6 joined
[00:03] *** committable6 joined
[00:03] *** linkable6 joined
[00:03] *** nativecallable6 joined
[00:03] *** sourceable6 joined
[00:03] *** tellable6 joined
[00:04] *** greppable6 joined
[00:04] *** coverable6 joined
[00:04] *** squashable6 joined
[00:23] *** Xliff left
[00:27] *** Kaiepi left
[00:55] *** discord-raku-bot left
[00:56] *** discord-raku-bot joined
[01:56] *** statisfiable6 left
[01:56] *** bisectable6 left
[01:56] *** linkable6 left
[01:56] *** coverable6 left
[01:56] *** nativecallable6 left
[01:56] *** quotable6 left
[01:56] *** shareable6 left
[01:56] *** unicodable6 left
[01:56] *** greppable6 left
[01:56] *** squashable6 left
[01:56] *** sourceable6 left
[01:56] *** releasable6 left
[01:56] *** reportable6 left
[01:56] *** benchable6 left
[01:56] *** bloatable6 left
[01:56] *** tellable6 left
[01:56] *** evalable6 left
[01:56] *** committable6 left
[01:56] *** notable6 left
[01:56] *** sourceable6 joined
[01:56] *** reportable6 joined
[01:56] *** coverable6 joined
[01:57] *** greppable6 joined
[01:57] *** bisectable6 joined
[01:57] *** benchable6 joined
[01:57] *** nativecallable6 joined
[01:57] *** evalable6 joined
[01:57] *** squashable6 joined
[01:57] *** quotable6 joined
[01:57] *** releasable6 joined
[01:58] *** linkable6 joined
[01:58] *** unicodable6 joined
[01:58] *** bloatable6 joined
[01:58] *** statisfiable6 joined
[01:58] *** committable6 joined
[01:59] *** notable6 joined
[01:59] *** shareable6 joined
[01:59] *** tellable6 joined
[02:54] <[Coke]_> .

[02:57] <tonyo> .

[02:57] <[Coke]_> dumb question: my reserved nick is already in use while I have a _ version?

[02:58] <tonyo> there's some command to make them auth or rename

[02:59] <tonyo> i think, /msg nickserv regain

[02:59] *** linkable6 left
[02:59] *** evalable6 left
[02:59] *** evalable6 joined
[03:00] *** linkable6 joined
[03:02] *** [Coke]_ is now known as [Coke]

[03:02] <[Coke]> guess so, thanks!

[03:02] <tellable6> 2022-10-17T16:42:19Z #raku <melezhik> [Coke] I am not sure if this a curlie bug, when I was creating the one, I thought this is Rakudo's one, at least someone told me that this could be a true ))

[03:32] *** [Coke]___ joined
[03:35] *** [Coke] left
[04:35] *** shareable6 left
[04:35] *** squashable6 left
[04:35] *** greppable6 left
[04:35] *** evalable6 left
[04:35] *** tellable6 left
[04:35] *** releasable6 left
[04:35] *** reportable6 left
[04:35] *** coverable6 left
[04:35] *** notable6 left
[04:35] *** linkable6 left
[04:35] *** committable6 left
[04:35] *** unicodable6 left
[04:35] *** quotable6 left
[04:35] *** statisfiable6 left
[04:35] *** nativecallable6 left
[04:35] *** bisectable6 left
[04:35] *** sourceable6 left
[04:35] *** bloatable6 left
[04:35] *** benchable6 left
[04:35] *** coverable6 joined
[04:36] *** bisectable6 joined
[04:36] *** greppable6 joined
[04:36] *** bloatable6 joined
[04:36] *** nativecallable6 joined
[04:36] *** shareable6 joined
[04:36] *** linkable6 joined
[04:36] *** benchable6 joined
[04:36] *** committable6 joined
[04:37] *** tellable6 joined
[04:37] *** releasable6 joined
[04:37] *** squashable6 joined
[04:37] *** notable6 joined
[04:37] *** quotable6 joined
[04:37] *** evalable6 joined
[04:37] *** reportable6 joined
[04:37] *** statisfiable6 joined
[04:37] *** bigdata joined
[04:38] *** sourceable6 joined
[04:38] *** unicodable6 joined
[04:38] *** bigdata left
[05:11] *** Sauvin left
[05:11] *** Bocaneri joined
[05:11] *** Bocaneri is now known as Guest5006

[05:13] *** rumgzy joined
[05:17] *** Guest5006 left
[05:30] *** Woodi left
[05:30] *** tbrowder left
[05:30] *** jdv left
[05:30] *** esh left
[05:30] *** jdv joined
[05:30] *** esh joined
[05:30] *** tbrowder joined
[05:37] *** rumgzy is now known as Sauvin

[05:44] *** Kaiepi joined
[05:53] *** abraxxa joined
[05:53] *** camelia left
[05:53] *** hexology left
[05:53] *** peder left
[05:53] *** bartolin_ left
[05:53] *** tinita left
[05:53] *** GreaseMonkey left
[05:53] *** mykhal left
[05:53] *** BinGOs left
[05:53] *** Grrrr left
[05:53] *** skaji left
[05:53] *** leont left
[05:53] *** gordonfish left
[05:53] *** KotH left
[05:53] *** nicole left
[05:53] *** thowe_ left
[05:53] *** zostay left
[05:53] *** aqua2 left
[05:53] *** Altreus left
[05:53] *** rjbs left
[05:53] *** kawaii_ left
[05:53] *** charsbar left
[05:53] *** leedo_ left
[05:53] *** jcallen left
[05:53] *** Ekho left
[05:54] *** nicole joined
[05:54] *** KotH joined
[05:54] *** skaji joined
[05:54] *** charsbar joined
[05:54] *** bingos joined
[05:54] *** kawaii_ joined
[05:54] *** Grrrr joined
[05:54] *** tinita joined
[05:54] *** bartolin joined
[05:54] *** aqua2 joined
[05:54] *** thowe joined
[05:54] *** greaser|q joined
[05:54] *** rjbs joined
[05:54] *** leedo joined
[05:54] *** jcallen joined
[05:55] *** leont joined
[05:55] *** zostay joined
[05:56] *** hexology joined
[05:56] *** gordonfish joined
[05:56] *** peder joined
[05:57] *** Altreus joined
[05:59] *** mykhal joined
[06:07] *** reportable6 left
[06:07] *** Ekho joined
[06:08] *** reportable6 joined
[06:14] *** camelia joined
[06:16] *** camelia left
[06:16] *** camelia joined
[06:25] *** abraxxa left
[06:30] *** abraxxa joined
[06:39] *** abraxxa left
[06:40] *** abraxxa joined
[06:42] *** abraxxa left
[06:43] *** derpydoo joined
[06:45] *** razetime joined
[07:17] *** MoC joined
[07:52] *** Sgeo left
[07:53] *** Sgeo joined
[08:08] *** saint- left
[08:31] *** johnjaye left
[08:33] *** johnjaye joined
[09:18] *** labster joined
[09:23] *** razetime left
[09:33] *** Grrrr left
[09:35] *** Grrrr joined
[10:09] *** labster left
[11:06] *** sena_kun joined
[11:13] *** razetime joined
[11:33] *** lichtkind joined
[11:39] <Geth> ¦ advent: wimvanderbauwhede++ created pull request #94: Update authors.md

[11:39] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/94

[11:40] <Geth> ¦ advent: fd7e904d15 | (Wim Vanderbauwhede)++ (committed using GitHub Web editor) | raku-advent-2022/authors.md

[11:40] <Geth> ¦ advent: Update authors.md

[11:40] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/fd7e904d15

[11:40] <Geth> ¦ advent: d38b612cc8 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | raku-advent-2022/authors.md

[11:40] <Geth> ¦ advent: Merge pull request #94 from wimvanderbauwhede/patch-1

[11:40] <Geth> ¦ advent: 

[11:40] <Geth> ¦ advent: Update authors.md

[11:40] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/d38b612cc8

[12:04] *** derpydoo left
[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:15] *** derpydoo joined
[12:40] *** vietchunk joined
[12:40] *** vietchunk left
[12:49] *** razetime left
[13:04] *** derpydoo left
[13:16] *** Kaiepi left
[13:21] *** massa left
[13:32] *** Kaiepi joined
[13:36] *** Xliff joined
[13:36] <Xliff> \o

[13:36] <Xliff> \o

[13:36] <Xliff> If I see the following in a C struct: x __attribute__((aligned(val)))...what does that mean if I am trying to write nativecall bindings for it?

[14:09] *** epony left
[14:25] *** [Coke] joined
[14:28] *** [Coke]___ left
[14:35] *** razetime joined
[15:35] *** nativecallable6 left
[15:35] *** statisfiable6 left
[15:35] *** coverable6 left
[15:35] *** bloatable6 left
[15:35] *** evalable6 left
[15:35] *** bisectable6 left
[15:35] *** squashable6 left
[15:35] *** unicodable6 left
[15:35] *** committable6 left
[15:35] *** tellable6 left
[15:35] *** greppable6 left
[15:35] *** linkable6 left
[15:35] *** shareable6 left
[15:35] *** reportable6 left
[15:35] *** notable6 left
[15:35] *** sourceable6 left
[15:35] *** benchable6 left
[15:35] *** releasable6 left
[15:35] *** quotable6 left
[15:35] *** benchable6 joined
[15:35] *** statisfiable6 joined
[15:35] *** evalable6 joined
[15:36] *** quotable6 joined
[15:36] *** unicodable6 joined
[15:36] *** coverable6 joined
[15:36] *** sourceable6 joined
[15:36] *** shareable6 joined
[15:37] *** greppable6 joined
[15:37] *** releasable6 joined
[15:37] *** committable6 joined
[15:37] *** linkable6 joined
[15:37] *** notable6 joined
[15:37] *** bisectable6 joined
[15:37] *** tellable6 joined
[15:37] *** nativecallable6 joined
[15:38] *** squashable6 joined
[15:38] *** bloatable6 joined
[15:38] *** reportable6 joined
[16:26] *** haxxelotto left
[16:26] *** haxxelotto joined
[17:10] <guifa> I know I can get the symbols for a routine's caller

[17:11] <guifa> can I actually get the caller itself (e.g. the routine)?

[17:13] *** razetime left
[17:26] *** derpydoo joined
[17:46] *** sena_kun left
[17:47] *** sena_kun joined
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:14] <discord-raku-bot> <Nemokosch> What is the `dot:from<bin>` module?

[18:16] <discord-raku-bot> <Nemokosch> https://github.com/Raku/Documentable/issues/135

[18:16] *** labster joined
[18:22] <ugexe> if a script 'dot' is found in the path, i.e. if `run("dot", @args)` should run

[18:23] <discord-raku-bot> <Nemokosch> interesting

[18:24] <discord-raku-bot> <Nemokosch> Good to see you around - I have a more zef-related question, perhaps.

[18:24] <discord-raku-bot> <Nemokosch> `File::Temp:ver<0.0.6>` doesn't seem to be available in the ecosystem

[18:25] <discord-raku-bot> <Nemokosch> oh damn... it's not in REA either

[18:26] <discord-raku-bot> <Nemokosch> I wanted to ask how I can tell zef to use REA but well, if this one really leaked... I'm not sure anything is left

[18:27] <ugexe> you can disable ecosystems with e.g. --/fez --/cpan --/p6c --/rea

[18:28] <discord-raku-bot> <Nemokosch> I'm trying to install the new docs site, by the way

[18:29] *** derpydoo left
[18:30] <discord-raku-bot> <Nemokosch> can I somehow retrieve what exactly depends on this unknown legacy version of File::Temp?

[18:30] <discord-raku-bot> <Nemokosch> tried `zef depends Documentable` and it gives `Failed to resolve some missing dependencies (use e.g. --exclude="File::Temp" to skip)`

[18:31] <discord-raku-bot> <Nemokosch> the hint doesn't work anyway

[18:36] <ugexe> zef install https://github.com/rbt/raku-File-Temp.git@e7e8a881f5cd920c3b0477fd011fb1eca17d7a25

[18:39] <discord-raku-bot> <Nemokosch> "Not found"

[18:39] <discord-raku-bot> <Nemokosch> welp

[18:39] <ugexe> run the command, its not a link

[18:39] <discord-raku-bot> <Nemokosch> I'm building Documentable atm

[18:39] *** labster left
[18:40] <ugexe> you said "Not found", which is what that uri above shows if you try to visit it in a browser

[18:40] <ugexe> if you run the command i showed it will install File::Temp:ver<0.0.6>

[18:41] * lizmat makes mental note to re-create missing module version from CPAN in the REA

[18:42] <discord-raku-bot> <Nemokosch> yes, and I'm waiting for the installation of Documentable

[18:42] <ugexe> ah i see

[18:42] <ugexe> as far as what depends on it, `zef rdepends "File::Temp:ver<0.0.6>"` should show that

[18:43] <discord-raku-bot> <Nemokosch> okay, it did install

[18:43] <discord-raku-bot> <Nemokosch> now going backwards, rdepends first...

[18:44] <ugexe> that command is taking forever to run on my laptop for whatever reason

[18:46] <ugexe> maybe cause there was like 100 items lol

[18:51] *** derpydoo joined
[18:51] <ugexe> hmm maybe that isn't quite right

[18:51] <ugexe> cause that will show everything i fulfills, including File::Temp aka File::Temp:ver<*>

[18:56] *** xinming left
[18:57] <discord-raku-bot> <Nemokosch> yes, it was slow but it returned nothing

[18:57] <discord-raku-bot> <Nemokosch> well well, why did the installation of the docs site complain, then

[18:59] <ugexe> $ zef rdepends "File::Temp:ver<0.0.6>"

[18:59] <ugexe> ABC:ver<0.6.12>:auth<zef:colomon>

[18:59] <ugexe> Module2Rpm:ver<0.0.3>:auth<zef:wbiker>

[18:59] <ugexe> ABC:ver<0.6.13>:auth<zef:colomon>

[18:59] <ugexe> ...

[18:59] *** xinming joined
[19:00] <discord-raku-bot> <Nemokosch> returned absolutely nothing for me

[19:02] <discord-raku-bot> <Nemokosch> lizmat: re Ecosystem module - I saw there is a release-date attribute in the meta files corresponding to the modules; what do you think about allowing some sort of sorting/filtering based on that?

[19:02] <lizmat> sounds like something nice to have... please make an issue for it :-)

[19:06] <discord-raku-bot> <Nemokosch> Okay 😛

[19:06] <lizmat> just about finished with the second "don't fear the grepper" blog post

[19:06] <Xliff> \o/

[19:07] <Xliff> Just crossed 800,000 lines of Raku!

[19:07] <Xliff> And now... a nap... ;)

[19:08] <discord-raku-bot> <Nemokosch> something completely unrelated - I'm jumping all around the Raku-related topics I'm trying to make progress with - is there a good name for \symbols, i.e "sigilless variables/constants"? Something that's less technical and more abstract

[19:09] *** Xliff left
[19:11] *** jetchisel left
[19:12] *** jetchisel joined
[19:18] <lizmat> well, sigilless always means bound, but not all bound variables are sigilless, so that doesn't bring you much

[19:21] *** jetchisel left
[19:24] *** jetchisel joined
[19:32] *** MoC left
[19:48] *** greaser|q left
[19:48] *** greaser|q joined
[19:48] *** greaser|q is now known as GreaseMonkey

[20:01] *** Nemokosch joined
[20:01] <Nemokosch> .

[20:01] <Nemokosch> So I was reading about this https://github.com/rakudo/rakudo/issues/5049

[20:01] <discord-raku-bot> <Nemokosch> next interesting issue is coming soon

[20:02] <Nemokosch> damn the lag :D

[20:02] <Nemokosch> anyway

[20:02] <Nemokosch> m: .say if 1 for <a b c>

[20:02] <camelia> rakudo-moar d9059e3fe: OUTPUT: «a␤b␤c␤»

[20:02] <Nemokosch> m: .say with 1 for <a b c>

[20:02] <camelia> rakudo-moar d9059e3fe: OUTPUT: «1␤»

[20:03] <Nemokosch> peculiar indeed... does anybody have an idea how this result came to be? why did it only run once?

[20:06] <lizmat> weekly: https://dev.to/lizmat/dont-fear-the-grepper-2-4ki5

[20:06] <notable6> lizmat, Noted! (weekly)

[20:10] *** Kaiepi left
[20:11] *** Kaiepi joined
[20:14] <guifa> Nemokosch that feels buggy

[20:15] <lizmat> agree

[20:15] *** Kaipei joined
[20:16] *** derpydoo left
[20:19] *** Kaiepi left
[20:19] *** Kaipii joined
[20:22] *** Kaiepi joined
[20:23] *** Kaipei left
[20:24] <Nemokosch> `given` and `for` aren't allowed together, it seems

[20:25] <Nemokosch> it can be argued that `with` is like `given` and also that `with` is like `if`

[20:26] *** Kaipei joined
[20:26] *** Kaipii left
[20:26] <Nemokosch> but it shouldn't be like something that downright ignores the `ḟor` :P But seriously, do you have an idea how to know what happened?

[20:30] *** Kaiepi left
[20:42] <guifa> I still can't figure out the difference between given and with, tbh

[20:43] <lizmat> with only triggers for defined values

[20:43] <lizmat> given sets the topic for any value

[20:43] <guifa> ah, hence I never notice a difference lol

[20:43] <lizmat> m: given Int { say "Int" }

[20:43] <camelia> rakudo-moar d9059e3fe: OUTPUT: «Int␤»

[20:44] <lizmat> m: with Int { say "Int" }

[20:44] <camelia> rakudo-moar d9059e3fe: ( no output )

[20:44] <guifa> I can't think the last time I used with/given with undefined values

[20:44] <lizmat> well, I use it a lot in things like:

[20:45] <lizmat> with try foo -> $value { }

[20:45] <lizmat> with try foo() -> $value { }

[20:46] <guifa> ah yeah.  I think in those cases I've tended to use if, since the pointy block kills the topicalization

[20:46] <guifa> but hey this is Raku

[20:46] <guifa> TIMTOWTDI :-)

[20:55] <guifa> I think one of my new favorite idioms to use is

[20:55] <guifa> .return with state $cache;

[20:56] <lizmat> nice

[20:56] <lizmat> I've become fond of

[20:56] <lizmat> $foo = do if $cond { ... } elsif { ... } else { ... }

[20:57] <lizmat> for those cases that are too complicated for ternaries

[21:01] <Nemokosch> I use both `with` and `given` quite a lot

[21:02] <Nemokosch> How can I generate a syntax tree from that questionable line?

[21:04] <guifa> raku --target=ast -e '.say with 1 for <a b c>' IIRC

[21:05] <ugexe> state isnt thread safe

[21:06] <lizmat> sad but true :-(

[21:06] <ugexe> i basically remove any uses of `state` in my code as i reencounter them

[21:08] <Nemokosch> guifa: thankies

[21:09] <Nemokosch> well, if state not being thread-safe is an issue... make it thread safe?

[21:09] <Nemokosch> I'm rarely concerned with threads for one

[21:09] <ugexe> why not make everything thread safe? because it would make the common case (single thread) slower

[21:10] <ugexe> sometimes its fine for e.g. state to not be thread safe and to use it multithreaded

[21:10] <ugexe> you just have to be aware what your constrains are

[21:10] <Nemokosch> if it's the "common case", perhaps it's not that sad overall

[21:11] <Nemokosch> insert good old Knuth saying

[21:12] <ugexe> its only sad because its not intuitive for a beginner to know that

[21:15] <Nemokosch> Well well, fortunately I don't think that's the case

[21:15] <Nemokosch> That is actually something that is reasonably well-documented

[21:16] <Nemokosch> Also, I for one think it's pretty intuitive but maybe it's only because I didn't think enough to realize why it wouldn't be. :D But that's kind of the point of intuition, so... :P

[21:17] <Nemokosch> I seriously underestimated how unreadably the QAST output really is

[21:17] <Nemokosch> unreadable

[21:18] <guifa> ugexe: true.  I definitely thought about it in my use cases, but for mine, it's not a huge deal.  AFAICT, the worst case would be that two threads both find the value undefined, and afterwards, both set it to the same value, and thenceforth, no more issues

[21:19] <guifa> I basically just use it as a lazy loader

[21:30] *** linkable6 left
[21:30] *** evalable6 left
[21:30] *** evalable6 joined
[21:31] *** linkable6 joined
[21:34] *** lichtkind left
[21:40] <Nemokosch> [] and <> (with no arguments) work the same way at the moment, right?

[21:48] *** epony joined
[22:10] *** Nemokosch left
[22:29] *** sena_kun left
[22:31] *** sena_kun joined
[22:42] <guifa> yup

[22:43] <guifa> You also have {} 

[22:44] <guifa> Seems weird that they're functionally equivalent, but the idea is to decontainerize, which is....identical regardless

[22:44] <guifa> deitemize, I guess more technically?

[22:55] *** sena_kun left
[22:57] <discord-raku-bot> <Nemokosch> yes, I don't really mind this behavior

[23:55] *** evalable6 left
[23:55] *** linkable6 left
[23:57] *** evalable6 joined
[23:58] *** linkable6 joined
