[00:00] <guifa> nine -- you were doing some work on native types, I'll try to find a work around for now, but any ideas?

[00:08] *** reportable6 left
[00:10] *** reportable6 joined
[00:24] *** dextercd left
[00:36] *** hasrthur left
[00:48] *** cielo joined
[00:51] *** cielo left
[00:54] *** frost joined
[01:50] *** frost left
[02:36] *** MasterDuke left
[02:36] *** hasrthur joined
[02:40] *** razetime joined
[02:40] *** hasrthur left
[03:40] *** quotable6 left
[03:40] *** evalable6 left
[03:40] *** bisectable6 left
[03:40] *** reportable6 left
[03:40] *** linkable6 left
[03:40] *** benchable6 left
[03:40] *** releasable6 left
[03:40] *** sourceable6 left
[03:40] *** shareable6 left
[03:40] *** bloatable6 left
[03:40] *** unicodable6 left
[03:40] *** greppable6 left
[03:40] *** coverable6 left
[03:40] *** statisfiable6 left
[03:40] *** tellable6 left
[03:40] *** squashable6 left
[03:40] *** committable6 left
[03:40] *** nativecallable6 left
[03:40] *** notable6 left
[03:41] *** bisectable6 joined
[03:42] *** reportable6 joined
[03:42] *** bloatable6 joined
[03:43] *** committable6 joined
[03:43] *** releasable6 joined
[03:43] *** statisfiable6 joined
[04:15] *** razetime left
[04:35] *** euandreh left
[04:41] *** sourceable6 joined
[04:42] *** unicodable6 joined
[04:42] *** squashable6 joined
[04:42] *** coverable6 joined
[04:43] *** benchable6 joined
[04:43] *** notable6 joined
[04:43] *** nativecallable6 joined
[04:43] *** quotable6 joined
[05:43] *** sourceable6 left
[05:43] *** benchable6 left
[05:43] *** squashable6 left
[05:43] *** coverable6 left
[05:43] *** committable6 left
[05:43] *** nativecallable6 left
[05:43] *** quotable6 left
[05:43] *** releasable6 left
[05:43] *** bloatable6 left
[05:43] *** bisectable6 left
[05:43] *** unicodable6 left
[05:43] *** statisfiable6 left
[05:43] *** reportable6 left
[05:43] *** notable6 left
[05:44] *** evalable6 joined
[05:44] *** unicodable6 joined
[05:44] *** nativecallable6 joined
[05:44] *** reportable6 joined
[05:45] *** squashable6 joined
[05:46] *** releasable6 joined
[05:46] *** committable6 joined
[05:46] *** bloatable6 joined
[05:47] *** coverable6 joined
[06:09] *** reportable6 left
[06:09] *** ufobat joined
[06:11] *** mexen joined
[06:45] *** quotable6 joined
[06:45] *** notable6 joined
[07:11] *** reportable6 joined
[07:19] *** seednode99 left
[07:20] *** seednode99 joined
[07:21] *** jjido joined
[07:23] *** Garbanzo_ joined
[07:28] *** Garbanzo_ left
[07:44] *** statisfiable6 joined
[07:47] *** bisectable6 joined
[07:58] *** abraxxa joined
[08:07] *** abraxxa left
[08:08] *** abraxxa joined
[08:11] *** Sgeo left
[08:17] *** lichtkind_ joined
[08:26] *** jjido left
[08:47] *** TheAthlete joined
[08:52] *** dakkar joined
[09:17] *** hasrthur joined
[09:18] *** razetime joined
[09:32] *** Skarsnik__ left
[09:38] *** qorg11 left
[09:41] *** tellable6 joined
[09:41] *** qorg11 joined
[09:42] *** linkable6 joined
[09:44] *** sourceable6 joined
[09:46] *** benchable6 joined
[10:15] *** razetime left
[10:26] *** TheAthlete left
[10:42] *** shareable6 joined
[10:42] *** greppable6 joined
[11:31] *** hasrthur left
[11:32] *** hasrthur joined
[11:37] *** Altai-man joined
[12:04] *** jjido joined
[12:08] *** reportable6 left
[12:09] *** reportable6 joined
[12:10] *** frost joined
[12:12] <discord-raku-bot> <Nemokosch#9980> umm, for the weekly challenge...

[12:12] <discord-raku-bot> <Nemokosch#9980> > Given a number base, derive the largest perfect square with no repeated digits and return it as a string. (For base>10, use ‘A’..‘Z’.)

[12:13] <discord-raku-bot> <Nemokosch#9980> are we expected to find fast enough solutions for large bases? the possible values grow exponentially

[12:14] <discord-raku-bot> <Nemokosch#9980> if you take the square root of a 36-digit number, that's still a humonguous 18-digit number

[12:20] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/01/24/2022-04-unsigned-merge/

[12:50] *** frost left
[12:55] <El_Che> my failing test for rhel7 and derivatives is because redhat doest not have arm64 images vor 7, only 8 :)

[13:03] *** frost joined
[13:03] *** TheAthlete joined
[13:17] *** ufobat left
[13:20] *** euandreh joined
[13:52] *** discord-raku-bot left
[13:53] *** discord-raku-bot joined
[14:01] *** zmoment joined
[14:05] *** morte_ joined
[14:09] *** frost left
[14:12] *** frost joined
[14:34] *** morte_ left
[14:34] *** morte_ joined
[14:50] *** clarjon_1 joined
[14:54] *** clarjon1 left
[15:06] *** Sgeo joined
[15:09] *** Garbanzo_ joined
[15:24] *** jjido left
[15:31] *** Garbanzo_ left
[15:32] *** frost left
[15:34] *** razetime joined
[15:36] <guifa> lizmat++ 

[15:44] *** silug left
[15:49] *** silug joined
[15:54] *** qorg11 left
[15:55] *** qorg11 joined
[15:56] <leont> «Could not instantiate role 'Class::Name': lang-call cannot invoke object of type 'VMNull' belonging to no language»

[15:56] <leont> That sounds like I discovered an interesting issue?

[16:13] *** morte_ left
[16:21] <Voldenet> Could be that you only discovered horrible message though

[16:21] *** razetime left
[16:37] *** sena_kun_ joined
[16:37] *** Altai-man left
[16:44] *** andinus joined
[16:45] <andinus> can i make cro respond to both 'page' and 'page/' ?

[16:45] <andinus> note the '/'

[16:50] <ugexe> one option would be to use a middleware to normalize the trailing / one way or another

[16:54] *** razetime joined
[16:56] *** lichtkind__ joined
[16:59] *** lichtkind_ left
[17:00] *** razetime left
[17:09] *** zmoment left
[17:17] *** silug left
[17:33] <Voldenet> maybe not a cool solution, but

[17:33] <Voldenet> > sub ok { content 'text/plain', 'Ok' }; my $application = route { get -> 'page', { ok }; get -> 'page', '' { ok }}

[17:35] *** dakkar left
[17:49] *** abraxxa left
[17:56] *** silug joined
[17:56] *** Altai-man joined
[17:57] *** djerius left
[17:57] *** djerius joined
[17:58] *** sena_kun_ left
[18:06] *** reportable6 left
[18:06] *** reportable6 joined
[18:26] *** Altai-man left
[18:29] *** jjido joined
[18:30] *** simcop2387 left
[18:30] *** perlbot left
[18:46] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2022/01/24/iterative-golfing/

[18:47] <leont> andinus: generally speaking, you do not want to do that. Any relative URL in such a page will point to a different location depending on the presence of the slash or not

[18:48] <[Coke]> might be better to have a redirect.

[18:48] <leont> Exactly, that's generally the better idea.

[18:48] <[Coke]> then the final page will act consistently for relative urls

[18:48] <[Coke]> leont++

[18:49] <leont> I'd personally make the slashless version canonical, but that's entirely personal taste. Either option is fine, just be consistent

[18:49] <leont> Another problem with aliasing them is that it's cache unfriendly

[18:50] <leont> Because as far as caches are concerned, they're different URLs

[18:51] <andinus> ugexe: i see, ya that would work

[18:51] <andinus> Voldenet: iasked it in #cro, - the middleware solution -  https://paste.debian.net/hidden/ff0cb0f2/

[18:53] <andinus> leont: i see, that makes sense, i'll setup a redirect then

[19:02] *** jjido left
[19:07] <SmokeMachine> I was wondering… would that be possible/make sense to @ sigiled arguments of functions become Tuple?

[19:12] <[Coke]> I don't think you can change what the default @ means.

[19:12] <[Coke]> You could specifically type things Tuple if you wanted.

[19:16] <leont> Is there a less annoying way to turn a number into a bigendian encoded Buf than «my $b = Buf.new; $b.write-uint16(0, 1234, BigEndian);»

[19:16] <leont> It seems like that shouldn't take two statement

[19:17] <[Coke]> ... Buf.new.writ....

[19:17] <[Coke]> which isn't helpful, but is one statement. :)

[19:18] <leont> write-* return Nil, so it's useless

[19:18] <[Coke]> I don't think there's a shorter way, no

[19:29] <SmokeMachine> We can change what’s the default smile… shouldn’t we be able to change the default class for a sigil? Making Tuple the default for @ on function args would make simple to people understanding this: https://stackoverflow.com/questions/70779446/why-are-arrays-passed-as-arguments-mutable-but-scalars-are-not

[19:31] <lizmat> SmokeMachine: there have been several problem solving issues about that already

[19:32] <lizmat> Personally, I think we need to revisit the whole picture for either 6.e  or 6.f

[19:34] *** lizmat left
[19:37] *** lichtkind__ left
[19:38] <SmokeMachine> Agree… but if we are adding an “immutable list” in core, that would be a great chance “fix the inconsistency”

[19:52] *** simcop2387 joined
[19:53] *** perlbot joined
[19:56] *** Garbanzo_ joined
[20:06] <thundergnat> I stumbled across (typoed actually,) a bit of syntax I never saw before and was more than a little surprised it gave the answer I was looking for.

[20:07] <thundergnat> m: for 1..5 { say .$ }

[20:07] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: «1␤2␤3␤4␤5␤»

[20:07] <thundergnat> I don't believe I have ever seen .$ as an alias for $_ before.

[20:08] <thundergnat> I assume I shouldn't rely on it... Or have I just been blind and never noticed before that was legal?

[20:11] <Voldenet> bisect: for 1..5 { say .$ }

[20:11] <bisectable6> Voldenet, Will bisect the whole range automagically because no endpoints were provided, hang tight

[20:11] <bisectable6> Voldenet, Output on all releases: https://gist.github.com/00bbc945017ed8f6582ca444f876be6f

[20:11] <bisectable6> Voldenet, Bisecting by exit code (old=2020.11 new=2020.12). Old exit code: 1

[20:11] <bisectable6> Voldenet, bisect log: https://gist.github.com/cffac309e8c73e47754ed287507c2a37

[20:11] <bisectable6> Voldenet, (2020-12-08) https://github.com/rakudo/rakudo/commit/79d2aeab83f15de485a5e41a9c576a0f7bdc46f6

[20:11] <bisectable6> Voldenet, Bisecting by output (old=2016.04 new=2016.05) because on both starting points the exit code is 1

[20:12] <bisectable6> Voldenet, bisect log: https://gist.github.com/e2c87e33e27bce531096d6f90fe01928

[20:12] <bisectable6> Voldenet, (2016-05-12) https://github.com/rakudo/rakudo/commit/33ef5a95459b95bf7256391a053550d4efe221de

[20:12] <bisectable6> Voldenet, Output on all releases and bisected commits: https://gist.github.com/cb9400ed951849ed0e553c61d5a3fd03

[20:12] <Voldenet> as you can see, it wasn't always like that

[20:14] <ugexe> m: say Any.$;

[20:14] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: «(Any)␤»

[20:14] <ugexe> m: say Any.@;

[20:14] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Array'␤  in block <unit> at <tmp> line 1␤␤»

[20:14] * ugexe shrugs

[20:15] <Voldenet> m: for 1..5 { say $_.$ }

[20:15] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: «1␤2␤3␤4␤5␤»

[20:15] <thundergnat> Kind of a weird Easter egg rather than legal syntax I guess.

[20:16] <Voldenet> m: for 1..5 { say $_.Any }

[20:16] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: «No such method 'Any' for invocant of type 'Int'.  Did you mean 'any'?␤  in block <unit> at <tmp> line 1␤␤»

[20:17] <Voldenet> most puzzling, I'm sure it's because `$` is Any

[20:17] <Voldenet> m: for 1..5 { say $_.(Any) }

[20:17] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[20:22] *** lichtkind joined
[20:23] *** lichtkind left
[20:31] *** lizmat joined
[20:46] *** TheAthlete left
[21:06] *** jjido joined
[21:16] *** Manifest0 left
[21:18] *** Manifest0 joined
[21:41] <japhb> m: with (1,2,3,4) { dd; dd .$ }

[21:41] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: «block (;; $_ is raw)␤(1, 2, 3, 4)␤»

[21:41] <japhb> m: with (1,2,3,4) { dd $_; dd .$ }

[21:41] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: «(1, 2, 3, 4)␤(1, 2, 3, 4)␤»

[21:54] *** younder joined
[21:58] <younder> I have problems with Compress:Zlib. I have a file in iso-latin1 and when it encounters a 8 bit character it goes into a infinate loop.

[21:59] <younder> I eventually gave up copied the file and unzipped it in the local directory.

[22:01] <younder> anyhow:

[22:01] <younder> Uploaded file: https://uploads.kiwiirc.com/files/bb6a47acff210f7604cd0d91155a0517/pasted.txt

[22:02] <younder> Uploaded file: https://uploads.kiwiirc.com/files/756063a91f61366b8dd01457cb2c446a/pasted.txt

[22:02] *** MasterDuke joined
[22:05] <younder> "$line.encode("utf8").bytes == $line.chars" was needed to to filer ascii from iso-latin1

[22:06] <younder> That took a lot of time to figure out..

[22:08] <younder> s/filer/filter/

[22:14] <younder> Anyhow what is the story of 'leave' not implemented yet. Would be more belivable if it didn't work :)

[22:15] *** Garbanzo_ left
[22:17] <younder> As i see it C(continue, break) -> raku(next, leave)

[22:17] <MasterDuke> last is break

[22:17] <moon-child> leave, not last?

[22:18] <moon-child> leave is return from blocks, I think, and still nyi

[22:19] <younder> That explains a lot..

[22:24] <younder> I thoght leave was like a goto where you jumped out of blocks except that you spesify the exit symbol before the nested loop rather than after. So leave without a symbol would be exit just the innermost loop.

[22:25] <guifa> it's most commonly used in subs as a sort of cleanup-ish thing

[22:26] <younder> yes.

[22:26] <guifa> m: sub calculate-something { LEAVE say 'finished calculations'; return 'here are calculations' }; calculate-something() 

[22:26] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: «finished calculations␤»

[22:27] <moon-child> well no leave is different from LEAVE

[22:27] <younder> of cource you have lEAVE to that or try {} CATCH {}.. there are many ways to do things

[22:28] <younder> yes, the all caps versions confused me. What is the difference?

[22:30] <younder> LEAVE {

[22:30] <younder>         close $file;

[22:30] <younder>   }

[22:31] <moon-child> LEAVE is a phaser.  leave is a not-yet-implemented directive which is similar to return except that it escapes blocks rather than subroutines

[22:33] <younder> I sort of got that from working with the code.

[22:35] <younder> Sorry to trouble you with a beginner like me, but the raku-beginner has practically no attendants.

[22:37] *** jjido left
[22:38] <younder> Why do you call it a phaser?

[22:39] <moon-child> I don't know why they're called that.  But see https://docs.raku.org/language/phasers

[22:39] *** xinming left
[22:41] *** xinming joined
[22:45] <younder> So raku has no character type, just string?  I needed a 'for $word.split('', :skip-empty) -> $ch {' .. to itterate over characters.

[22:46] <younder> and a integer.chr returns a string

[22:47] <moon-child> do you perhaps want comb?

[22:47] <moon-child> m: .say for "quux".comb

[22:47] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: «q␤u␤u␤x␤»

[22:47] <younder> perhaps like a 'go' rune..

[22:48] <moon-child> 'rune' is not well-defined given unicode

[22:48] <younder> nor is character

[22:48] <moon-child> yes

[22:48] <moon-child> (or, rather, it is well-defined but not to anything interesting)

[22:48] <moon-child> again: comb probably does what you want here

[22:50] <younder> Yes from the doc comb seems what I was after. thanks!

[22:52] <younder> Is comb more efficent than .split('', :skip-empty)?

[22:52] *** xinming left
[22:52] *** xinming joined
[22:53] <moon-child> seems so

[22:53] <moon-child> I would not worry too much about it though

[22:55] <younder> replaced it and it works..

[22:57] <MasterDuke> on a 50k line file, i get ~0.34s for comb()ing every line and ~0.45s for split()ting every line

[22:58] *** SqrtNegInf joined
[23:06] <younder> Another thing I miss Python's 'x in [array] is there a better way than 'grep { $ch eq $_ }, @guessed'?

[23:06] <moon-child> x (elem) array or x ∊ array

[23:07] <younder> thanks

[23:08] *** xinming left
[23:09] *** xinming joined
[23:12] <younder>  '$ch (elem) @guessed' works..

[23:13] <younder> Well I have learned a lot. Thanks for your time.

[23:14] *** younder left
[23:24] *** sena_kun left
[23:27] *** xinming left
[23:28] *** xinming joined
[23:49] <elcaro> .tell younder Phasers are contructs than can "fire" (get triggered) outside of the standard flow control. The ALLCAPS are to make them stand out because of this

[23:49] <tellable6> elcaro, I'll pass your message to younder

[23:50] <elcaro> .tell younder eg. and INIT block at the bottom of your script doesn't happen last... or you could have a single CATCH block handle _all_ exceptions in a script.

[23:50] <tellable6> elcaro, I'll pass your message to younder

[23:50] *** sena_kun joined
[23:59] *** hasrthur left
