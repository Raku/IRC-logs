[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[01:09] *** unicodable6 left
[01:09] *** shareable6 left
[01:09] *** reportable6 left
[01:09] *** notable6 left
[01:09] *** coverable6 left
[01:09] *** tellable6 left
[01:09] *** statisfiable6 left
[01:09] *** committable6 left
[01:09] *** sourceable6 left
[01:09] *** linkable6 left
[01:09] *** benchable6 left
[01:09] *** quotable6 left
[01:09] *** evalable6 left
[01:09] *** bloatable6 left
[01:09] *** squashable6 left
[01:09] *** greppable6 left
[01:09] *** releasable6 left
[01:09] *** bisectable6 left
[01:09] *** nativecallable6 left
[01:10] *** committable6 joined
[01:10] *** evalable6 joined
[01:10] *** sourceable6 joined
[01:10] *** shareable6 joined
[01:10] *** linkable6 joined
[01:11] *** quotable6 joined
[01:11] *** reportable6 joined
[01:11] *** squashable6 joined
[01:11] *** bisectable6 joined
[01:11] *** notable6 joined
[01:11] *** unicodable6 joined
[01:11] *** benchable6 joined
[01:11] *** statisfiable6 joined
[01:11] *** bloatable6 joined
[01:11] *** coverable6 joined
[01:12] *** tellable6 joined
[01:12] *** releasable6 joined
[01:12] *** greppable6 joined
[01:12] *** nativecallable6 joined
[01:19] *** deoac joined
[01:53] *** Sgeo joined
[02:06] *** deoac left
[02:50] *** nort joined
[03:32] *** frost joined
[04:32] *** greppable6 left
[04:32] *** statisfiable6 left
[04:32] *** notable6 left
[04:32] *** squashable6 left
[04:32] *** sourceable6 left
[04:32] *** coverable6 left
[04:32] *** quotable6 left
[04:32] *** linkable6 left
[04:32] *** nativecallable6 left
[04:32] *** tellable6 left
[04:32] *** benchable6 left
[04:32] *** committable6 left
[04:32] *** shareable6 left
[04:32] *** bisectable6 left
[04:32] *** bloatable6 left
[04:32] *** unicodable6 left
[04:32] *** reportable6 left
[04:32] *** evalable6 left
[04:32] *** releasable6 left
[04:32] *** shareable6 joined
[04:32] *** releasable6 joined
[04:32] *** evalable6 joined
[04:33] *** squashable6 joined
[04:33] *** greppable6 joined
[04:33] *** nativecallable6 joined
[04:33] *** unicodable6 joined
[04:33] *** statisfiable6 joined
[04:33] *** notable6 joined
[04:33] *** committable6 joined
[04:34] *** benchable6 joined
[04:34] *** quotable6 joined
[04:34] *** coverable6 joined
[04:34] *** linkable6 joined
[04:34] *** reportable6 joined
[04:34] *** bloatable6 joined
[04:35] *** sourceable6 joined
[04:35] *** bisectable6 joined
[04:35] *** tellable6 joined
[05:35] *** statisfiable6 left
[05:35] *** greppable6 left
[05:35] *** notable6 left
[05:35] *** bloatable6 left
[05:35] *** committable6 left
[05:35] *** bisectable6 left
[05:35] *** nativecallable6 left
[05:35] *** benchable6 left
[05:35] *** unicodable6 left
[05:35] *** releasable6 left
[05:35] *** squashable6 left
[05:35] *** evalable6 left
[05:35] *** reportable6 left
[05:35] *** tellable6 left
[05:35] *** coverable6 left
[05:35] *** shareable6 left
[05:35] *** quotable6 left
[05:35] *** linkable6 left
[05:35] *** sourceable6 left
[05:35] *** coverable6 joined
[05:36] *** bloatable6 joined
[05:36] *** unicodable6 joined
[05:36] *** sourceable6 joined
[05:36] *** evalable6 joined
[05:36] *** squashable6 joined
[05:36] *** quotable6 joined
[05:36] *** greppable6 joined
[05:37] *** benchable6 joined
[05:37] *** nativecallable6 joined
[05:37] *** releasable6 joined
[05:37] *** tellable6 joined
[05:37] *** bisectable6 joined
[05:38] *** linkable6 joined
[05:38] *** shareable6 joined
[05:38] *** notable6 joined
[05:38] *** statisfiable6 joined
[05:38] *** reportable6 joined
[05:38] *** committable6 joined
[05:59] *** irc_user joined
[06:06] *** reportable6 left
[06:08] *** reportable6 joined
[06:34] <discord-raku-bot> <Nemokosch> The uk is also missing the uk's weather

[06:50] *** GreaseMonkey left
[07:24] *** Sgeo left
[08:09] *** irc_user left
[09:09] *** linkable6 left
[09:09] *** benchable6 left
[09:09] *** committable6 left
[09:09] *** nativecallable6 left
[09:09] *** statisfiable6 left
[09:09] *** sourceable6 left
[09:09] *** notable6 left
[09:09] *** coverable6 left
[09:09] *** greppable6 left
[09:09] *** bisectable6 left
[09:09] *** shareable6 left
[09:09] *** unicodable6 left
[09:09] *** squashable6 left
[09:09] *** evalable6 left
[09:09] *** quotable6 left
[09:09] *** releasable6 left
[09:09] *** tellable6 left
[09:09] *** bloatable6 left
[09:09] *** releasable6 joined
[09:09] *** shareable6 joined
[09:09] *** sourceable6 joined
[09:09] *** quotable6 joined
[09:10] *** statisfiable6 joined
[09:10] *** tellable6 joined
[09:10] *** benchable6 joined
[09:10] *** unicodable6 joined
[09:10] *** nativecallable6 joined
[09:10] *** greppable6 joined
[09:11] *** squashable6 joined
[09:11] *** bisectable6 joined
[09:11] *** committable6 joined
[09:11] *** notable6 joined
[09:11] *** evalable6 joined
[09:11] *** coverable6 joined
[09:12] *** linkable6 joined
[09:12] *** bloatable6 joined
[10:40] *** sena_kun joined
[10:55] *** frost left
[11:26] <Geth> ¦ ecosystem: JRaspass++ created pull request #608: Update a few repos from "master" to "main"

[11:26] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/608

[11:28] <Geth> ¦ ecosystem: 10b1efa3a8 | (James Raspass)++ (committed using GitHub Web editor) | META.list

[11:28] <Geth> ¦ ecosystem: Update a few repos from "master" to "main"

[11:28] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/10b1efa3a8

[11:28] <Geth> ¦ ecosystem: ce7d0a2e34 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[11:28] <Geth> ¦ ecosystem: Merge pull request #608 from JRaspass/patch-2

[11:28] <Geth> ¦ ecosystem: 

[11:28] <Geth> ¦ ecosystem: Update a few repos from "master" to "main"

[11:28] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/ce7d0a2e34

[11:30] *** Geth left
[11:31] *** Geth joined
[12:07] *** reportable6 left
[12:07] *** reportable6 joined
[12:23] <[Coke]> (33) wow, it's 16 here this morning.

[13:07] *** linkable6 left
[13:07] *** evalable6 left
[13:08] *** linkable6 joined
[13:08] *** evalable6 joined
[13:16] *** jaguart joined
[13:22] *** morte_ joined
[13:49] *** Sgeo joined
[14:00] *** [Coke]_ joined
[14:02] *** [Coke] left
[14:15] *** amenonsen left
[14:15] *** amenonsen joined
[14:30] *** razetime joined
[14:51] *** waffleiron joined
[14:52] <waffleiron> hello in raku how would i replace a backreference with the uppercase version?

[14:55] <lizmat> $1.uc ?

[14:57] <waffleiron> sorry i meant lowercase and .lc doesnt seem to work

[14:57] <waffleiron> i used to be able to type \l

[14:57] <lizmat> where?

[14:58] <waffleiron> perl -pe's/(\p{Uppercase})/\l\1/g' file

[15:00] <lizmat> waffleiron: first off, positional captures start counting at 1 in Raku

[15:01] <lizmat> m: say "foofoo bar".match(/ (foo) $0 /)'

[15:01] <camelia> rakudo-moar 10feda116: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> say "foofoo bar".match(/ (foo) $0 /)⏏'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤    …»

[15:01] <lizmat> m: say "foofoo bar".match(/ (foo) $0 /)

[15:01] <camelia> rakudo-moar 10feda116: OUTPUT: «｢foofoo｣␤ 0 => ｢foo｣␤»

[15:02] <lizmat> m: say "foofoo bar".subst(/ (foo) $0  /, { $0.uc })

[15:02] <camelia> rakudo-moar 10feda116: OUTPUT: «FOO bar␤»

[15:02] <lizmat> m: say "foofoo bar".subst(/ (foo) $0  /, { $/.uc })

[15:02] <camelia> rakudo-moar 10feda116: OUTPUT: «FOOFOO bar␤»

[15:03] <waffleiron> finding this output hard to read sorry

[15:03] <lizmat> m: say "foofoo bar".subst(/ foo  /, { $/.uc })

[15:03] <camelia> rakudo-moar 10feda116: OUTPUT: «FOOfoo bar␤»

[15:03] <lizmat> m: say "foofoo bar".subst(/ foo  /, { $/.uc }, :g)

[15:03] <camelia> rakudo-moar 10feda116: OUTPUT: «FOOFOO bar␤»

[15:05] <waffleiron> what is $/

[15:05] <waffleiron> taht seems to ffix it it wont work with numbers

[15:05] <lizmat> https://docs.raku.org/syntax/$$SOLIDUS

[15:07] <waffleiron> ===SORRY!=== Error while compiling -e

[15:07] <waffleiron> Undeclared routine:

[15:07] <waffleiron>     bash used at line 1. Did you mean 'hash'?

[15:07] <waffleiron> if i use $0

[15:08] <lizmat> without code, it's hard to tell what's going on

[15:08] <waffleiron> perl6 -npe"s:g/(<upper>)/{$0.lc}/"  file

[15:10] <lizmat> what does raku --version say ?

[15:11] <waffleiron> implementing Perl 6.c.

[15:12] <lizmat> looks like you have a pretty old version then

[15:12] <lizmat> it should something like:

[15:12] <lizmat> % raku --version

[15:12] <lizmat> Welcome to Rakudo™ v2022.07-13-g10feda116.

[15:12] <lizmat> Implementing the Raku® Programming Language v6.d.

[15:12] <lizmat> Built on MoarVM version 2022.07.

[15:12] <waffleiron> k

[15:12] <lizmat> maybe get a more recent version before we go on ?

[15:15] <waffleiron> got a newer version

[15:15] <waffleiron> raku -npe"s:g/(<upper>)/{$0.lc}/" "file"

[15:15] <waffleiron> No such method 'lc' for invocant of type 'Any'

[15:15] <waffleiron>   in code  at -e line 1

[15:15] <waffleiron>   in block <unit> at -e line 1

[15:16] <lizmat> what do you think <upper> does?

[15:16] <waffleiron> finds an uppercase unicode letter

[15:17] <lizmat> ok, so we're on the same page then :-)

[15:18] <waffleiron> phew

[15:18] *** razetime left
[15:21] <waffleiron> i'm kind of having trouble when i try to search for things the raku way

[15:22] <lizmat> fwiw, I'm not a regular user of -np  :-)

[15:23] <waffleiron> well i just started to use it i sort of accidently used perl5 but i really wanted to use perl6

[15:24] <lizmat> well, it's called Raku nowadays  :-)

[15:24] <lizmat> raku -npe '$_ .= subst("e","a",:g)'  file

[15:25] <lizmat> so...

[15:25] <waffleiron> i get load of potteryh when i search raku :P

[15:26] <discord-raku-bot> <Nemokosch> as they say: search friendly attempt is to always add "lang"

[15:26] *** razetime joined
[15:26] <lizmat> raku -npe '$_ .= subst(/ <upper> /, { $/.lc },:g)' file

[15:26] <waffleiron> sec

[15:27] <waffleiron> i wanted it to work using capture groups

[15:27] <discord-raku-bot> <Nemokosch> golang, rakulang, redlang etc

[15:27] <discord-raku-bot> <Nemokosch> ~~erlang~~

[15:28] <lizmat> why ?

[15:28] <waffleiron> try searching for raku books on ebay and you'll see what i mean

[15:29] <lizmat> "raku programming language" and rakulang should give you better results

[15:29] <discord-raku-bot> <Nemokosch> I'm not surprised if you eventually won't find many books on ebay, though...

[15:30] <lizmat> raku -npe 's:g/ <upper>+ /{ $/.lc }/'

[15:31] <lizmat> waffleiron: so, why do you want to use backrefs ?

[15:31] *** morte_ left
[15:31] <lizmat> raku -npe 's:g/ (<upper>+) /{ $0.lc }/' Changes

[15:31] <discord-raku-bot> <Nemokosch> doesn't p override n by the way

[15:31] <waffleiron> a i want to know how to do it B i've done it before in previous languages 3 . I don't have a specific reason

[15:32] <waffleiron> like if i've done it before maybe i think i can be usefull again

[15:32] <waffleiron> at i'm just testing and learning

[15:32] <waffleiron> atm

[15:33] <lizmat> ok  :-)

[15:34] <waffleiron> I've kind of used regexes quite alot before as well ( i probally suck at them)

[15:35] <lizmat> well, fwiw I don't like -np in Raku much, as it is too much like Perl's

[15:35] <lizmat> I guess it was one of the first features implemented way back when

[15:36] <waffleiron> yeah i tried to search for launch options i did'nt seem to find the info

[15:36] <lizmat> raku -h

[15:40] <waffleiron> btw your code works any idea why it didnt work before?

[15:41] <waffleiron> the plus makes it work i guess

[15:41] <waffleiron> nope

[15:42] <discord-raku-bot> <Nemokosch> still, pretty please 🥺

[15:42] <discord-raku-bot> <Nemokosch> confirm or deny pls

[15:42] <discord-raku-bot> <Nemokosch> I think p is just n with an additional ".say"

[15:42] <lizmat> yup

[15:42] <waffleiron> the n option is that not neeeded if you have a loop in the code?

[15:43] <lizmat> -e will just run your code once

[15:44] *** discord-raku-bot left
[15:44] <waffleiron> i ask becasue i was messing around pipeing input from standard input and one the options didn't have -n but still went through the input

[15:44] *** discord-raku-bot joined
[15:44] <discord-raku-bot> <Nemokosch> the p option also gives you the loop iirc

[15:46] <waffleiron> anyways ty i now know i should use single quotes and not double quotes when using regex

[15:47] <waffleiron> it seems that was the problem i thought i needed double quotes when using inline code

[15:47] <discord-raku-bot> <Nemokosch> why? 🙂

[15:47] <lizmat> waffleiron: i think it was the shell messing up there

[15:47] <waffleiron> ah ok maybe

[15:47] <lizmat> you *can* use single quotes, but when used in a shell, the shell messes up

[15:47] <lizmat> well, fsvo messing up  :-)

[15:48] <discord-raku-bot> <Nemokosch> probably

[15:50] <waffleiron> i'm probally doding things all wrong there always seems to be a million ways to do things

[15:50] <waffleiron> wrong things

[15:50] *** discord-raku-bot left
[15:50] *** discord-raku-bot joined
[15:54] <lizmat> waffleiron: fwiw, I learned a few things about -n -p in Raku today  :-)

[15:54] <waffleiron> cool :)

[16:08] <discord-raku-bot> <Nemokosch> so we have || slipping on Hashes in the 6.e preview

[16:08] <discord-raku-bot> <Nemokosch> what happens - better asked: what should happen - if the thing to slip by, is empty?

[16:10] <waffleiron> (as a person who know nothing about raku) could you not do either by setting some sort of option?

[16:10] <waffleiron> and let people choose

[16:23] <waffleiron> anyways thanks for all your help everone

[16:24] *** waffleiron left
[16:32] *** sena_kun left
[16:41] *** deoac joined
[16:42] <discord-raku-bot> <Nemokosch> I wish there was //:= as well :DD

[16:43] <deoac> When using the `Test` module, how do I test the output to `$*OUT`?

[16:43] *** ajr joined
[17:03] <lizmat> deoac: raku.land may have some modules

[17:03] *** a3r0_ left
[17:03] <lizmat> personally I'd use Trap for its simplicity

[17:03] <lizmat> m: https://raku.land/zef:lizmat/Trap

[17:03] <camelia> rakudo-moar 10feda116: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> https:⏏//raku.land/zef:lizmat/Trap␤    expecting any of:␤        colon pair␤»

[17:04] <lizmat> https://raku.land/zef:lizmat/Trap

[17:04] <lizmat> rather  :-)

[17:04] *** a3r0 joined
[17:04] <lizmat> or maybe silently: https://raku.land/zef:lizmat/silently

[17:09] *** atroxaper joined
[17:13] * leont still has to finish their presentation, but this heat is melting their brain

[17:16] <lizmat> well, you're theb first on Sunday... so maybe still a little time

[17:22] *** razetime left
[17:53] *** Xplorator joined
[18:06] *** reportable6 left
[18:07] *** reportable6 joined
[18:19] *** Xplorator left
[18:20] *** ProperNoun left
[18:29] *** [Coke]_ is now known as [Coke]

[18:55] *** atroxaper left
[19:48] *** p6steve joined
[19:48] <p6steve> m: role R { method new {say 'yo'}}; my $x = 42 but R;  

[19:48] <camelia> rakudo-moar 10feda116: ( no output )

[19:49] <p6steve> ^^^ wonders why new() or TWEAK() don't fire on a mixin?

[20:05] <deoac> Thanks, lizmat.  `Trap` is *exactly* what I need for testing.

[20:06] <deoac> I wonder why there's nothing similar in `Test` .

[20:06] <lizmat> well, maybe Trap will make it into core at some point :-)

[20:10] <discord-raku-bot> <p6steve> is there a way to constrain $x to eg. defined from the mixin R?

[20:18] <SmokeMachine> m: role R { say 'yo' }; my $x = 42 but R; 

[20:18] <camelia> rakudo-moar 10feda116: OUTPUT: «yo␤»

[20:20] <SmokeMachine> m: role R { method COMPOSE { say 'yo' } }; my $x = 42 but R; # COMPOSE still doesn’t to it, does it?

[20:20] <camelia> rakudo-moar 10feda116: ( no output )

[20:20] *** discord-raku-bot left
[20:20] *** discord-raku-bot joined
[20:24] <p6steve> ^^^ wonders why new() or TWEAK() don't fire on a mixin?

[20:24] <p6steve> oops

[20:25] *** sena_kun joined
[20:29] <p6steve> m: role R { say self }; my $x = 42 but R;

[20:29] <camelia> rakudo-moar 10feda116: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤'self' used where no object is available␤at <tmp>:1␤------> role R { say ⏏self }; my $x = 42 but R;␤    expecting any of:␤        argument list␤        term␤»

[20:30] <p6steve> ^^^ not getting it ... I would like the mixin to be able to get the invocant and test it for definedness when "constructed" 

[20:33] <lizmat> there's only an invocant inside a method

[20:34] <lizmat> m:  role R { method foo() { say self } }; my $x = 42 but R; $x.foo

[20:34] <camelia> rakudo-moar 10feda116: OUTPUT: «42␤»

[20:35] <discord-raku-bot> <p6steve> yeah but (see 20:48 above) there's no method new on mixing in afaict

[20:35] <discord-raku-bot> <p6steve> is there a method that gets called on mixin "construction"

[20:35] <discord-raku-bot> <p6steve> ?

[20:42] <Geth> ¦ ecosystem: JRaspass++ created pull request #609: Update Ed25519 URL

[20:42] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/609

[20:50] <Geth> ¦ ecosystem: ab4a9ba3a8 | (James Raspass)++ (committed using GitHub Web editor) | META.list

[20:50] <Geth> ¦ ecosystem: Update Ed25519 URL (#609)

[20:50] <Geth> ¦ ecosystem: 

[20:50] <Geth> ¦ ecosystem: The repo has changed to from "Ed25519" to "ed25519-raku" and the default branch from "master" to "main".

[20:50] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/ab4a9ba3a8

[21:25] *** evalable6 left
[21:28] *** evalable6 joined
[21:41] *** sena_kun left
[21:51] *** pamplemousse joined
[22:11] *** Xplorator joined
[22:12] <Xplorator> Hi. Is normal that the following regex cause a parse error?

[22:13] <Xplorator> m: say "abcabc" ~~ / ^ <before ("abc")> /'

[22:13] <camelia> rakudo-moar 10feda116: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<( )>; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> say "abcabc" ~~ / ^ <before ("abc")>⏏ /'␤    expecting an…»

[22:22] <discord-raku-bot> <Nemokosch> not sure one is allowed to put a capture group inside a lookaround

[22:22] <discord-raku-bot> <Nemokosch> I for one wouldn't allow it, that's for sure 😅

[22:23] <discord-raku-bot> <Nemokosch> since lookarounds are parts that wouldn't belong to the matching - if you actually do want to match them, why not just... match them?

[22:28] *** pamplemousse left
[22:30] <Xplorator> It seems that we ARE allowed to put capture in "lookarounds" though

[22:30] <Xplorator> m: say "abcde" ~~ / (a) <()> (b) /

[22:30] <camelia> rakudo-moar 10feda116: OUTPUT: «｢｣␤ 0 => ｢a｣␤ 1 => ｢b｣␤»

[22:32] <Xplorator> but maybe the "<(" and ")>" forms of lookarounds are exceptions

[22:34] <Xplorator> Also, what bugs me is not really the ability or inability to put

[22:34] <Xplorator> capturing groups inside <before> <after> lookarounds

[22:36] <Xplorator> What bugs me is that is we are can put them unless they are the top level thing

[22:36] <Xplorator> This is allowed for example say "abcabc" ~~ / ^ <before ("abc")**2> /

[22:39] <guifa_> <( isn't a lookaroundl, they're just start/end anchors

[22:39] <Xplorator> right, thanks for the clarification

[22:44] <guifa_> Re before and after, you CAN do a capture group, but there is no way to access before/after outside of the before/after match, as the before/after isn't actually stored.  Curiously, their existance is noted in gisting a Match

[22:44] <guifa_> m: say 'ab' ~~ /<after a> b/;

[22:44] <camelia> rakudo-moar 10feda116: OUTPUT: «｢b｣␤ after => ｢｣␤»

[22:45] <Xplorator> they disappear when we do <.before> / <.after>

[22:45] <Xplorator> I didn't express my self correctly

[22:46] <Xplorator> the troubling thing is that the error message says

[22:46] <Xplorator> Unable to parse expression in metachar:sym<( )>; couldn't find final ')'

[22:47] <Xplorator> while the matching right brace is clearly present

[22:57] <guifa_> some metachar:sym<( )> are parentheses

[22:57] <guifa_> not <( and )> 

[22:57] <guifa_> the issue is you just need a space

[22:57] <guifa_> m: say "abcabc" ~~ / ^ <before ("abc" )> /'

[22:57] <camelia> rakudo-moar 10feda116: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<( )>; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> say "abcabc" ~~ / ^ <before ("abc" )>⏏ /'␤    expecting a…»

[22:57] <guifa_> err

[22:57] <guifa_> m: say "abcabc" ~~ / ^ <before ("abc") > /'

[22:57] <camelia> rakudo-moar 10feda116: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> say "abcabc" ~~ / ^ <before ("abc") > /⏏'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤ …»

[22:58] <guifa_> m: say "abcabc" ~~ / ^ <before ("abc") > /

[22:58] <camelia> rakudo-moar 10feda116: OUTPUT: «｢｣␤ before => ｢｣␤»

[22:58] <guifa_> there we go

[22:58] <guifa_> )> is a term in the grammar since it's just an anchor of sorts, so the parser treats it as a single entity (no different than $ or ^ ) 

[23:01] <guifa_> before (capture-group-start-token), (a), (b), (c), (end-match-anchor) ………… and then reaches the end of the string without finding the capture-group-end-token 

[23:01] <Xplorator> Oh right I see

[23:01] <Xplorator> thanks

[23:01] <Xplorator> I guess this was a longest token matching thing. A lexing problem

[23:02] <guifa_> Yeah.  Consider * vs **

[23:02] <guifa_> 5 * *   --->   anon sub :: ($x) { 5 * x }

[23:03] <guifa_> but 5 **    is "five to the power of… wait what?"

[23:04] <Xplorator> yes it it definitely the same sort of error

[23:05] <Xplorator> could it be a new case for less than awesome error messages?

[23:10] <discord-raku-bot> <Nemokosch> from the user's perspective, definitely...

[23:13] <guifa_> It might be tough though, because you'd need to check over ever symbol with tighter precedence that starts with the expected end symbol.  Not sure how easily that can be done, since it'd cover infixes, postfixes, prefixes, terms, etc

[23:28] *** linkable6 left
[23:28] *** evalable6 left
[23:29] *** linkable6 joined
[23:31] *** evalable6 joined
[23:34] *** pamplemousse joined
[23:42] *** pamplemousse left
[23:50] *** Xplorator left
