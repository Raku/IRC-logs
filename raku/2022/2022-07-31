[00:08] *** reportable6 left
[00:09] *** reportable6 joined
[01:09] *** nativecallable6 left
[01:09] *** linkable6 left
[01:09] *** evalable6 left
[01:09] *** greppable6 left
[01:09] *** coverable6 left
[01:09] *** notable6 left
[01:09] *** sourceable6 left
[01:09] *** releasable6 left
[01:09] *** statisfiable6 left
[01:09] *** tellable6 left
[01:09] *** bloatable6 left
[01:09] *** unicodable6 left
[01:09] *** quotable6 left
[01:09] *** reportable6 left
[01:09] *** committable6 left
[01:09] *** bisectable6 left
[01:09] *** shareable6 left
[01:09] *** benchable6 left
[01:09] *** committable6 joined
[01:09] *** tellable6 joined
[01:10] *** bloatable6 joined
[01:10] *** greppable6 joined
[01:10] *** statisfiable6 joined
[01:10] *** evalable6 joined
[01:10] *** shareable6 joined
[01:10] *** coverable6 joined
[01:10] *** quotable6 joined
[01:10] *** linkable6 joined
[01:10] *** bisectable6 joined
[01:11] *** unicodable6 joined
[01:11] *** notable6 joined
[01:11] *** benchable6 joined
[01:11] *** nativecallable6 joined
[01:12] *** sourceable6 joined
[01:12] *** releasable6 joined
[01:12] *** reportable6 joined
[01:57] *** Maylay left
[02:06] *** Maylay joined
[03:06] *** tellable6 left
[03:06] *** nativecallable6 left
[03:06] *** unicodable6 left
[03:06] *** bloatable6 left
[03:06] *** coverable6 left
[03:06] *** releasable6 left
[03:06] *** quotable6 left
[03:06] *** committable6 left
[03:06] *** bisectable6 left
[03:06] *** notable6 left
[03:06] *** reportable6 left
[03:06] *** benchable6 left
[03:06] *** greppable6 left
[03:06] *** statisfiable6 left
[03:06] *** shareable6 left
[03:06] *** linkable6 left
[03:06] *** evalable6 left
[03:06] *** sourceable6 left
[03:07] *** greppable6 joined
[03:07] *** unicodable6 joined
[03:07] *** notable6 joined
[03:07] *** bisectable6 joined
[03:07] *** benchable6 joined
[03:08] *** quotable6 joined
[03:08] *** tellable6 joined
[03:08] *** evalable6 joined
[03:08] *** nativecallable6 joined
[03:08] *** shareable6 joined
[03:08] *** linkable6 joined
[03:08] *** coverable6 joined
[03:08] *** sourceable6 joined
[03:09] *** bloatable6 joined
[03:09] *** reportable6 joined
[03:09] *** committable6 joined
[03:09] *** statisfiable6 joined
[03:09] *** releasable6 joined
[03:14] *** Sankalp left
[03:15] *** Sankalp joined
[04:15] *** sourceable6 left
[04:15] *** statisfiable6 left
[04:15] *** benchable6 left
[04:15] *** tellable6 left
[04:15] *** linkable6 left
[04:15] *** notable6 left
[04:15] *** committable6 left
[04:15] *** releasable6 left
[04:15] *** greppable6 left
[04:15] *** shareable6 left
[04:15] *** quotable6 left
[04:15] *** nativecallable6 left
[04:15] *** bisectable6 left
[04:15] *** unicodable6 left
[04:15] *** bloatable6 left
[04:15] *** evalable6 left
[04:15] *** coverable6 left
[04:15] *** reportable6 left
[04:16] *** unicodable6 joined
[04:16] *** bisectable6 joined
[04:16] *** quotable6 joined
[04:16] *** nativecallable6 joined
[04:16] *** releasable6 joined
[04:16] *** notable6 joined
[04:16] *** coverable6 joined
[04:17] *** evalable6 joined
[04:17] *** benchable6 joined
[04:17] *** greppable6 joined
[04:17] *** bloatable6 joined
[04:17] *** sourceable6 joined
[04:17] *** linkable6 joined
[04:18] *** statisfiable6 joined
[04:18] *** committable6 joined
[04:18] *** shareable6 joined
[04:18] *** reportable6 joined
[04:18] *** tellable6 joined
[04:45] *** Kaiepi left
[05:45] *** committable6 left
[05:45] *** notable6 left
[05:45] *** statisfiable6 left
[05:45] *** coverable6 left
[05:45] *** releasable6 left
[05:45] *** shareable6 left
[05:45] *** greppable6 left
[05:45] *** benchable6 left
[05:45] *** nativecallable6 left
[05:45] *** quotable6 left
[05:45] *** bloatable6 left
[05:45] *** tellable6 left
[05:45] *** unicodable6 left
[05:45] *** sourceable6 left
[05:45] *** linkable6 left
[05:45] *** reportable6 left
[05:45] *** bisectable6 left
[05:45] *** evalable6 left
[05:45] *** bisectable6 joined
[05:45] *** shareable6 joined
[05:45] *** coverable6 joined
[05:45] *** benchable6 joined
[05:46] *** bloatable6 joined
[05:46] *** releasable6 joined
[05:46] *** statisfiable6 joined
[05:46] *** greppable6 joined
[05:46] *** reportable6 joined
[05:46] *** sourceable6 joined
[05:47] *** evalable6 joined
[05:47] *** nativecallable6 joined
[05:47] *** tellable6 joined
[05:47] *** committable6 joined
[05:47] *** quotable6 joined
[05:48] *** notable6 joined
[05:48] *** unicodable6 joined
[05:48] *** linkable6 joined
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[06:38] *** Sankalp left
[06:46] *** Sankalp joined
[07:01] *** Sankalp left
[07:06] *** Sankalp joined
[07:07] *** Kaiepi joined
[07:42] *** oodani left
[07:44] *** oodani joined
[08:42] *** lichtkind joined
[08:54] *** sena_kun joined
[09:27] *** andm joined
[10:23] <Geth> ¬¶ ecosystem: eb38ec02d2 | (Richard Hainsworth)++ (committed using GitHub Web editor) | META.list

[10:23] <Geth> ¬¶ ecosystem: returning Collection-Raku-Documentation

[10:23] <Geth> ¬¶ ecosystem: 

[10:23] <Geth> ¬¶ ecosystem: There is a problem with fez uploading executables (issue # 61 there). Will migrate Collection-Raku-Documentation to fez when the issue is resolved

[10:23] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/eb38ec02d2

[10:27] *** linkable6 left
[10:27] *** evalable6 left
[10:27] *** linkable6 joined
[10:28] *** evalable6 joined
[11:28] *** reportable6 left
[11:28] *** evalable6 left
[11:29] *** evalable6 joined
[11:29] *** reportable6 joined
[11:29] *** Sgeo left
[11:33] *** sena_kun left
[11:34] *** sena_kun joined
[11:48] <leont> Apparently I have just today to come up with a presentation for rakucon, so I guess that's a no (unless people want a rant on all the things I don't like about Raku in 2022, but I doubt you want that negativity)

[11:48] *** habere-et-disper joined
[11:52] <habere-et-disper> How to declare a hash with its inverse? This seems verbose:

[11:52] <habere-et-disper> m: ('a'..'z', 0..25).flat Z=> (0..25, 'a'..'z').flat

[11:52] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of Z=> in sink context‚ê§    at <tmp>:1‚ê§    ------> ('a'..'z', 0..25).flat ‚èèZ=> (0..25, 'a'..'z').flat‚ê§¬ª

[11:52] <tellable6> hey habere-et-disper, you have a message: https://gist.github.com/c1e697f057d819d215fee96ed65d27c3

[11:53] *** kolofon joined
[12:02] <habere-et-disper> Thank you @tellable6. I'm trying to get an exhaustive list of uncomposed operators to create test cases for typeface ligature support.

[12:02] <tellable6> habere-et-disper, It's my pleasure!

[12:08] *** reportable6 left
[12:10] *** reportable6 joined
[12:15] *** kolofon left
[12:15] *** habere-et-disper left
[12:29] *** sena_kun left
[12:30] *** sena_kun joined
[13:22] <lucs> Is there a way to have a foo() where foo($x) would return 'x', that is, the name of the variable?

[13:30] *** evalable6 left
[13:30] *** linkable6 left
[13:30] *** linkable6 joined
[13:32] *** evalable6 joined
[13:33] <lucs> (Maybe with macros?)

[14:12] <lizmat> m: sub a(\a) { dd a.VAR.name }; my $b = 42; a $b

[14:12] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´"\$b"‚ê§¬ª

[14:12] <lizmat> lucs ^^

[14:18] <lizmat> m: sub a(\a) { dd a.VAR.name }; my $b = 42; a 666

[14:18] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´No such method 'name' for invocant of type 'Int'.  Did you mean any of‚ê§these: 'Num', 'are', 'base', 'none', 'note', 'take'?‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:19] <lizmat> m: sub a(\a) { dd try a.VAR.name }; my $b = 42; a $b; a 666

[14:19] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´"\$b"‚ê§Nil‚ê§¬ª

[14:23] <lucs> lizmat: Thanks. (Damn, raku is fantastic.)

[14:23] <discord-raku-bot> <Nemokosch> leont: I'd definitely be curious, lol

[14:24] <lizmat> leont: please, do do a presentation!   If you must, on the things that you don't like  :-)

[14:32] *** linkable6 left
[14:32] *** evalable6 left
[14:34] *** evalable6 joined
[14:35] *** linkable6 joined
[14:48] <discord-raku-bot> <Anton Antonov> @lizmat I think you answered a question I was planning to ask...

[14:49] <discord-raku-bot> <Nemokosch> what question?

[14:57] <discord-raku-bot> <Anton Antonov> <@297037173541175296> About a certain article I am working on. I will finish it (to a point) and then send you the link.

[14:58] <discord-raku-bot> <Nemokosch> ü•≥

[15:01] <guifa_> leont: sometimes what's not good can be just as enlightening as what's good

[15:34] *** simcop2387 left
[15:34] *** perlbot left
[15:35] *** simcop2387 joined
[15:35] *** andm left
[15:37] *** simcop2387 left
[15:38] *** sena_kun left
[15:41] *** perlbot joined
[15:45] *** simcop2387 joined
[15:48] *** sena_kun joined
[16:19] <guifa_> I feel like there should be a less hacky way to get your own scope for a dynamic variable, but also keep the value it has if it's already been set

[16:19] <guifa_> basically akin to lexical `temp`

[16:20] <guifa_> Right now the only solution I have is my $*foo = CALLERS::<$*foo> // default-value;

[16:25] <lizmat> m: my $*A = 42; sub a() { temp $*A; say $*A; $*A = 666; say $*A }; a

[16:25] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´42‚ê§666‚ê§¬ª

[16:25] <lizmat> guifa_  ^^ why not use temp ?

[16:26] <guifa_> weird

[16:26] <guifa_> I was getting an error saying no such in scope

[16:26] <guifa_> oh wait

[16:26] <guifa_> sub a() {¬†temp $*A; say $*A; $*A = 666; say $*A }; my $*A = 42; a; say $*A

[16:26] <evalable6> guifa_, rakudo-moar b9c90bc79: OUTPUT: ¬´42‚ê§666‚ê§42‚ê§¬ª

[16:26] <guifa_> huh

[16:27] <guifa_> did something change with dynamic handling?

[16:27] <guifa_> m: sub a () {¬†temp $*A; say $*A // 5 }; a

[16:27] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´Dynamic variable $*A not found‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:27] <guifa_> ^^

[16:28] <lizmat> m: say $*A

[16:28] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´Dynamic variable $*A not found‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:28] <lizmat> if there is none, you'll get a Failure

[16:28] <lizmat> m: dd $*A

[16:28] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´Failure.new(exception => X::Dynamic::NotFound.new(name => "\$*A"), backtrace => Backtrace.new)‚ê§¬ª

[16:29] <lizmat> m: m: sub a () { temp $*A }; a

[16:29] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´Dynamic variable $*A not found‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:29] <guifa_> I think it's because I often use the dynamics in an iffy/withy context

[16:29] <lizmat> m: m: sub a () { temp $*A // 666 }; a

[16:29] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´Dynamic variable $*A not found‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:29] <guifa_> so the failure works just as well as undefined/falsey

[16:29] <lizmat> hmmm

[16:29] <lizmat> m: m: sub a () { temp ($*A // 666) }; a

[16:29] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´Can only use 'temp' on a container‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:30] <lizmat> m: m: sub a () { with $*A { temp $*A } }; a

[16:30] <camelia> rakudo-moar b9c90bc79: ( no output )

[16:31] <guifa_> basically in my use case I've got my ECMA regex syntax

[16:31] <lizmat> m: m: sub a () { temp $*A }; dd a

[16:31] <camelia> rakudo-moar b9c90bc79: OUTPUT: ¬´Dynamic variable $*A not found‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:31] <guifa_> but then need to handle some of the options

[16:32] <guifa_> dynamics are just easier haha

[16:32] <lizmat> I guess you need to make sure you have a $*A at the outermost scope to prevent the Failure of blowing up in temp

[16:33] <guifa_> the my $*A = CALLERS::<$*A>; actually works really well, it just feels...hacky

[16:33] <guifa_> But I'm also just trying to finish making it work

[16:33] <guifa_> You know me, when I get done, I'll refactor it about 2-3x including at least one total rewrite

[16:34] <guifa_> And then when RakuAST comes along, I'll rinse and repeat hahaha

[16:35] * guifa_ definitely understands now why the regex options go in front, and not after, though.  Allows for the regex to be created much more simply in a single pass

[16:48] *** linkable6 left
[16:48] *** evalable6 left
[16:49] *** linkable6 joined
[16:50] *** evalable6 joined
[16:50] <discord-raku-bot> <Nemokosch> what is the prerequisite of successfully uploading a module to zef?

[16:51] <discord-raku-bot> <Nemokosch> what happened to me is that I updated the code and sent fez upload, it said that I "did it", no email about failure or anything

[16:51] <discord-raku-bot> <Nemokosch> but yeah, it wouldn't show up even after half a day, that's a little suspicious

[16:51] <discord-raku-bot> <Nemokosch> I didn't commit and push to git though

[16:51] <discord-raku-bot> <Nemokosch> could that have been the problem?

[17:36] *** Maylay left
[17:43] *** Xliff joined
[17:44] *** linkable6 left
[17:44] *** Maylay joined
[17:44] *** linkable6 joined
[17:47] <discord-raku-bot> <gfldex> With fez you upload a tar-ball. If that is missing, you might have missed a vital step. Do you got a proper META6.json-file?

[17:48] <discord-raku-bot> <Nemokosch> yes

[18:09] *** reportable6 left
[18:12] *** reportable6 joined
[18:52] *** Sgeo joined
[19:22] *** kolofon joined
[19:47] *** kolofon left
[20:41] *** sena_kun left
[20:42] *** sena_kun joined
[20:45] *** habere-et-disper joined
[21:10] *** sena_kun left
[21:38] *** nort left
[22:33] *** nort joined
[22:40] *** eseyman left
[23:18] *** lichtkind left
[23:34] *** nort left
[23:35] *** nort joined
[23:58] <[Coke]> (alpha sort on docs table) bug, reported, already fixed in new UI coming "soon"

