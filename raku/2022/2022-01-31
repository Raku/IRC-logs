[00:07] *** guifa_ left
[00:08] *** reportable6 left
[00:11] *** reportable6 joined
[00:17] *** guifa joined
[00:17] *** guifa left
[00:28] *** djerius left
[00:30] *** djerius joined
[00:57] *** lichtkind left
[01:28] *** linkable6 joined
[01:35] *** Kaiepi joined
[01:41] *** D5n9sMatrix joined
[02:00] *** perlbot left
[02:01] *** simcop2387 left
[02:02] *** simcop2387 joined
[02:05] *** perlbot joined
[02:41] *** D5n9sMatrix left
[03:18] *** mahafyi joined
[03:33] *** lainon joined
[03:37] *** lainon left
[04:37] *** evalable6 left
[04:37] *** coverable6 left
[04:37] *** releasable6 left
[04:37] *** committable6 left
[04:37] *** greppable6 left
[04:37] *** sourceable6 left
[04:37] *** squashable6 left
[04:37] *** shareable6 left
[04:37] *** statisfiable6 left
[04:37] *** reportable6 left
[04:37] *** notable6 left
[04:37] *** nativecallable6 left
[04:37] *** bisectable6 left
[04:37] *** unicodable6 left
[04:37] *** quotable6 left
[04:37] *** benchable6 left
[04:37] *** bloatable6 left
[04:37] *** tellable6 left
[04:37] *** linkable6 left
[04:38] *** tellable6 joined
[04:38] *** linkable6 joined
[04:39] *** committable6 joined
[04:39] *** nativecallable6 joined
[04:39] *** releasable6 joined
[04:39] *** quotable6 joined
[04:39] *** coverable6 joined
[04:40] *** bloatable6 joined
[04:40] *** reportable6 joined
[05:35] <Xliff> How are constants handled in Parameter?

[05:35] *** CIAvash joined
[05:35] <Xliff> Rather, if the Parameter is a constant value, how can I retrieve it from the Parameter object?

[05:38] *** shareable6 joined
[05:38] *** Garbanzo_ left
[05:38] *** statisfiable6 joined
[05:39] *** bisectable6 joined
[05:40] *** notable6 joined
[06:03] <Xliff> Arg! Constant values are constraints! LOL.

[06:03] <Xliff> I have to dig 'em out with nqp.

[06:04] <Xliff> nqp:hllize( nqp::getattr( nqp::decont($parameter), Parameter, '@!post_constraints').head

[06:08] *** reportable6 left
[06:32] *** discord-raku-bot left
[06:32] *** discord-raku-bot joined
[06:37] *** discord-raku-bot left
[06:37] *** discord-raku-bot joined
[06:38] *** unicodable6 joined
[06:38] *** greppable6 joined
[06:39] *** benchable6 joined
[06:51] *** jjido joined
[07:10] *** reportable6 joined
[07:40] *** evalable6 joined
[08:18] *** Sgeo left
[08:30] *** lichtkind joined
[08:31] *** abraxxa joined
[08:34] *** BinGOs left
[08:35] *** vodkra left
[08:36] *** m_athias left
[08:36] *** nine left
[08:36] *** abraxxa left
[08:36] *** nine joined
[08:36] *** m_athias joined
[08:36] *** abraxxa joined
[08:36] *** vodkra joined
[08:38] *** bingos joined
[08:40] *** mexen joined
[08:54] <Od1n1> hello rakoons.

[09:05] *** bingos is now known as BinGOs

[09:05] *** dakkar joined
[09:18] *** hasrthur joined
[09:38] *** sourceable6 joined
[09:38] *** hasrthur_ joined
[09:38] *** hasrthur left
[09:50] *** jjido left
[09:58] *** mahafyi left
[10:00] *** andinus` left
[10:01] <lizmat> Od1n1 o/

[10:21] <Xliff> \o lizmat

[10:37] *** jjido joined
[10:38] *** squashable6 joined
[10:39] *** euandreh left
[11:16] *** whatnext joined
[11:25] *** sena_kun joined
[11:39] *** frost joined
[11:39] *** jjido left
[12:08] *** reportable6 left
[12:14] *** frost left
[12:15] *** whatnext left
[12:23] *** jjido joined
[12:25] *** mahafyi joined
[12:54] *** Averna joined
[13:05] *** hasrthur_ left
[13:06] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/01/31/2022-05-foo-is-42/

[13:08] *** hasrthur joined
[13:08] *** reportable6 joined
[13:09] *** hasrthur_ joined
[13:13] *** hasrthur left
[13:17] *** Darkcoal joined
[13:22] *** hasrthur_ left
[13:29] *** D5n9sMatrix joined
[13:33] *** A26F64 joined
[13:33] *** cetjs2 joined
[13:36] *** rypervenche joined
[13:55] *** discord-raku-bot left
[13:56] *** discord-raku-bot joined
[14:13] *** jjido left
[14:14] *** hasrthur joined
[14:29] *** guifa joined
[14:30] *** Darkcoal left
[14:31] *** ychaouche joined
[14:31] <guifa> o/

[14:32] <[Coke]> heh. was just about to describe a delay I was seeing in zef, and as I finished typing the send here, it moved t the next step. :)

[14:33] <ychaouche> hi all

[14:35] <[Coke]> hi

[14:50] *** Sgeo joined
[14:53] <gfldex> I still don't understand how Tomasz managed to put "Raku" and "Speedrun" into the same heading. He must have a special tool for that.

[14:53] *** hasrthur left
[14:55] <guifa> me when I woke up: I dunno if I'm going to have time to finish my basic BASIC slang proof-of-concept in time for the weekly

[14:55] <guifa> me when I had my coffee: oh, lizmat++ already published the weekly.  I get another week now :-)

[14:56] <lizmat> hehe...  there's always a pro for every con  :-)  

[14:56] <lizmat> gfldex: the SpeedRun describes how much time Tomasz spends on it

[14:56] <lizmat> ?

[14:57] <gfldex> Maybe I'm just slow. :)

[14:57] <guifa> I just have to finish up the signature processing (yeah, I'm going custom signatures even!) and finish writing the VM-within-a-VM code in RakuAST

[15:00] <lizmat> guifa++

[15:03] *** hasrthur joined
[15:12] <guifa> I'm going alzy though.  A hash and an array, hash is lineNumber => codeIndex, and the array is just each line of code haha.  But proof of concepts don't have to be efficient I figure

[15:17] *** jjido joined
[15:25] <lizmat> nope  :-)

[15:26] *** hasrthur left
[15:30] <MasterDuke> m: sub a("b") {}; say &a.signature.params[0].constraint_list[0]  # Xliff

[15:30] <camelia> rakudo-moar ec4522404: OUTPUT: «b␤»

[15:44] <cetjs2> lizmat, in gsoc 2022 raku will participaTE?

[15:45] <lizmat> I guess an application will be made, just like last year

[15:45] <lizmat> only last year it wasn't accepted  :-(

[15:46] <cetjs2> lizmat, ага. I understood

[15:51] <guifa> lizmat actually just now reading up on it.  apparently some of them were CRAZY inefficient (or I guess, did the best they could at the time) and would scan forward/backward character by character for new lines. ouch

[15:52] <lizmat> ah, yes, BASIC  :-)

[15:52] <lizmat> if you only have a few K of memory  :-)

[15:53] <Xliff> MasterDuke: Huh. Missed that. Thanks!

[16:07] *** ychaouche left
[16:20] *** D5n9sMatrix left
[16:31] <clarkema> Is there a clean way of checking whether a resource exists before trying to use it?  At the moment I've got `if %?RESOURCES<header.ttl>.IO ~~ Slip {`, which does work but seems less than ideal

[16:33] *** D5n9sMatrix joined
[16:36] <CIAvash> `IO.e`?

[16:38] <clarkema> You'd think so, but it returns a Slip from the .IO call and then can't call .e on that 

[16:38] <guifa> ah yes

[16:38] <guifa> I had the %?RESOURCES issue back a while ago

[16:38] <guifa> lemme remember exactly how I solved it

[16:39] <clarkema> would be nice to be able to call .e on the resource directly

[16:40] <guifa> Agreed, but I think there was some work being done in that area, but not sure what the status is

[16:41] <guifa> I guess I actually used something more complicated than checking for a Slip

[16:41] <guifa> https://github.com/alabamenhu/Intl-CLDR/blob/master/lib/Intl/CLDR/Types/Languages.pm6

[16:42] <clarkema> I assume it has something to do with library resources

[16:42] <clarkema> thanks guifa, I'll take a look

[16:43] *** D5n9sMatrix left
[16:44] <guifa> Yeah.  When installing a module, the resources aren't stored with the same names/structure that you see.  I'd love for us to get to a point that resources are fully introspectable (e.g. list all the files in a directory) but I don't think that's been a priority since, presumably, module authors should know exactly what resources they have

[16:46] <clarkema> Yeah, I know I control the resources directory and could just add the file and charge ahead, but the error message when it's missing is very non-obvious and I prefer not leaving landmines lying around for my future-self's foot

[16:51] <guifa> instead of `if %?RESOURCES<foo>.IO ~~ Slip { … }`, perhaps you could consider a define `sub resource (Str $file) { given %?RESOURCES{$file} { when Slip { die "File $file not located in resources. Maybe you should add it?" }; default { .return } } }`

[16:52] <guifa> obviously, modifying the result of a non-existent file based on your needs

[16:57] <clarkema> Looks like that's going to be the best approach, thanks :)

[17:03] *** A26F64 left
[17:03] *** hasrthur joined
[17:05] *** abraxxa left
[17:20] *** Averna left
[17:27] *** djerius left
[17:28] *** djerius joined
[17:29] *** cetjs joined
[17:33] *** cetjs2 left
[17:36] *** dakkar left
[17:41] *** hasrthur left
[17:41] *** hasrthur joined
[17:44] *** [Coke] left
[17:47] *** [Coke] joined
[17:48] *** Sgeo_ joined
[17:50] *** Sgeo left
[17:52] <ugexe> in what case would a file listed in %?RESOURCES not exist?

[17:53] <lizmat> when it got deleted at some point after installation ?

[17:53] <clarkema> or a typo during development

[17:54] <ugexe> it makes me sad we continue to treat %?RESOURCES as a file when it could be any type of io source

[17:55] *** jjido left
[17:56] <clarkema> such as?

[17:56] <ugexe> a socket

[17:58] <clarkema> what would be the benefit vs the socket API?

[17:59] <ugexe> well, uh, you could use a socket

[17:59] *** jjido joined
[18:02] <ugexe> CompUnit::Repository::[Tar|Github] dont load code off the filesystem (well ::Tar does, but it streams the bytes out of the file, they don't go to an actual file somewhere first)

[18:03] <ugexe> when you hard couple %?RESOURCES to being a file path your code can't work with those things

[18:04] <clarkema> sure, but then there should be some equally generic way of signalling 'there are no bytes at this named place'

[18:04] <ugexe> same with a theoretical CompUnit::Repository::FatPack::PureRaku

[18:04] <clarkema> Especially if you're not using; if you're streaming resources from the network then then chances of failure are way higher than loading a file that 'should' be known good in the resources directory

[18:05] <clarkema> s/not using/& files/

[18:05] <ugexe> I'd probably check $?DISTRIBUTION.content('resources/name-of-file').slurp

[18:06] <ugexe> maybe %?RESOURCES<whatever>.slurp will work without the .IO

[18:06] <ugexe> in which case that is equally ok

[18:06] <ugexe> $?DISTRIBUTION.content('resources/name-of-file').open.slurp rather

[18:06] *** reportable6 left
[18:08] *** reportable6 joined
[18:10] <ugexe> raku -e 'my $dist = CompUnit::Repository::FileSystem.new(prefix => $*CWD).distribution; for $dist.meta<resources>.flat -> $r { say "Missing $r" unless try $dist.content("resources/$r").open.slurp }'

[18:10] *** sena_kun left
[18:13] <ugexe> that will also work for the auto platform naming of stuff placed in resources/libraries/

[18:34] *** D5n9sMatrix joined
[18:37] *** hasrthur_ joined
[18:37] *** hasrthur left
[19:04] *** D5n9sMatrix left
[19:38] *** hasrthur joined
[19:38] *** hasrthur_ left
[19:58] *** jjido left
[20:01] *** jjido joined
[20:13] *** jjido left
[20:56] *** epony left
[20:59] *** ecocode_ left
[21:06] *** jjido joined
[21:07] <[Coke]> --version output on git bash on windows is fine as is, in the VS command prompt, needs chcp 65001, which is expected. Looks much better now without the bold text.

[21:08] <[Coke]> (this is probably old news)

[21:20] <Xliff> m: sub a () { 42; }; &a.WHERE # <- Can that change?

[21:20] <camelia> rakudo-moar 382f2f108: ( no output )

[21:20] *** ecocode joined
[21:20] <Xliff> m: sub a () { 42; }; &a.WHERE.say # <- Can that change?

[21:20] <camelia> rakudo-moar 382f2f108: OUTPUT: «2852129596152␤»

[21:37] <MasterDuke> i think .WHERE is generally allowed to change, but in practice maybe it won't for compile time things like subs. you'd need to ask someone like nine or timo to be sure

[21:39] <MasterDuke> m: sub a() { say "hi" }; say &a.WHERE; for ^1_000_000 { my @b = .comb; }; say &a.WHERE

[21:39] <camelia> rakudo-moar 382f2f108: OUTPUT: «2741538338400␤2741534130296␤»

[21:44] *** cetjs left
[21:44] <moon-child> I see no reason why you would want to disallow .WHERE changing for compile-time things.  I think mvm is not currently globally compacting, but that might change in the future

[21:49] *** stoned75 joined
[21:49] *** stoned75 left
[21:51] *** hasrthur_ joined
[21:51] *** hasrthur left
[21:55] *** dextercd joined
[22:02] *** hasrthur_ left
[22:03] *** curiosa joined
[22:04] *** curiosa left
[22:13] <SmokeMachine> Sorry for not golfing it, but does anyone have any idea of why would this be happening when the code is inside a whenever and a start only on the 2 first iterations? https://github.com/FCO/Red/issues/537#issuecomment-1026262630

[22:18] <timo> yeah, where will change, usually only up to once, though? there's a mechanism to get an id that's stable for the program's runtime for one object, which is called "objectid"

[22:21] <MasterDuke> moon-child: not really disallow, just some stuff is created right away in gen2 or because we know it'll stick around and i don't know if .WHERE will *actually* change for them, even though you shouldn't rely on that

[22:42] <Xliff> m: class A { }; A.new.objectid.say

[22:42] <camelia> rakudo-moar 382f2f108: OUTPUT: «No such method 'objectid' for invocant of type 'A'␤  in block <unit> at <tmp> line 1␤␤»

[22:42] <Xliff> ^^ timo

[22:43] <ugexe> m: use nqp; say nqp::objectid($*CWD)

[22:43] <camelia> rakudo-moar 382f2f108: OUTPUT: «4369382167664␤»

[22:51] *** dextercd left
[22:52] <timo> yeah it's not a method

[22:52] <timo> it's internal

[22:53] <timo> i believe WHICH on some things uses it?

[22:56] *** jjido left
[23:56] *** committable6 left
[23:56] *** reportable6 left
[23:56] *** coverable6 left
[23:56] *** sourceable6 left
[23:56] *** linkable6 left
[23:56] *** greppable6 left
[23:56] *** unicodable6 left
[23:56] *** notable6 left
[23:56] *** tellable6 left
[23:56] *** nativecallable6 left
[23:56] *** bisectable6 left
[23:56] *** statisfiable6 left
[23:56] *** shareable6 left
[23:56] *** bloatable6 left
[23:56] *** benchable6 left
[23:56] *** squashable6 left
[23:56] *** quotable6 left
[23:56] *** releasable6 left
[23:56] *** evalable6 left
[23:56] *** coverable6 joined
[23:56] *** linkable6 joined
[23:57] *** sourceable6 joined
[23:57] *** greppable6 joined
[23:57] *** releasable6 joined
[23:57] *** unicodable6 joined
[23:57] *** notable6 joined
[23:58] *** squashable6 joined
[23:58] *** bisectable6 joined
[23:58] *** committable6 joined
[23:58] *** reportable6 joined
[23:58] *** quotable6 joined
