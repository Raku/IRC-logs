[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:14] *** abraxxa-home left
[00:20] *** jpn left
[00:25] <ingy> lizmat: you planning to do tpfna next year?

[00:26] <ingy> or whatever yapc's called now :)

[00:26] <ingy> tparcna?

[00:27] <ingy> toronto edition

[00:34] *** jaguart left
[00:41] *** Kaiepi left
[00:44] *** perlbot left
[00:44] *** simcop2387 left
[00:46] *** perlbot joined
[00:47] *** simcop2387 joined
[01:41] *** razetime joined
[01:51] *** swaggboi left
[02:27] *** razetime left
[02:42] *** jaguart joined
[03:42] *** notable6 left
[03:42] *** evalable6 left
[03:42] *** tellable6 left
[03:42] *** unicodable6 left
[03:42] *** quotable6 left
[03:42] *** squashable6 left
[03:42] *** releasable6 left
[03:42] *** statisfiable6 left
[03:42] *** linkable6 left
[03:42] *** reportable6 left
[03:42] *** coverable6 left
[03:42] *** bisectable6 left
[03:42] *** bloatable6 left
[03:42] *** nativecallable6 left
[03:42] *** committable6 left
[03:42] *** benchable6 left
[03:42] *** sourceable6 left
[03:42] *** shareable6 left
[03:42] *** greppable6 left
[03:43] *** evalable6 joined
[03:43] *** reportable6 joined
[03:43] *** notable6 joined
[03:43] *** releasable6 joined
[03:43] *** unicodable6 joined
[03:43] *** squashable6 joined
[03:43] *** quotable6 joined
[03:44] *** bloatable6 joined
[03:44] *** nativecallable6 joined
[03:44] *** shareable6 joined
[03:44] *** benchable6 joined
[03:44] *** bisectable6 joined
[03:45] *** sourceable6 joined
[03:45] *** committable6 joined
[03:45] *** linkable6 joined
[03:45] *** statisfiable6 joined
[03:45] *** greppable6 joined
[03:45] *** tellable6 joined
[03:45] *** coverable6 joined
[04:06] *** perryprog is now known as merryprog

[04:26] *** Kaiepi joined
[04:26] *** buffet joined
[04:38] *** vrurg left
[04:42] *** razetime joined
[05:42] *** unicodable6 left
[05:42] *** shareable6 left
[05:42] *** greppable6 left
[05:42] *** releasable6 left
[05:42] *** nativecallable6 left
[05:42] *** bloatable6 left
[05:42] *** bisectable6 left
[05:42] *** statisfiable6 left
[05:42] *** benchable6 left
[05:42] *** notable6 left
[05:42] *** squashable6 left
[05:42] *** committable6 left
[05:42] *** evalable6 left
[05:42] *** coverable6 left
[05:42] *** sourceable6 left
[05:42] *** reportable6 left
[05:42] *** tellable6 left
[05:42] *** quotable6 left
[05:42] *** linkable6 left
[05:43] *** notable6 joined
[05:43] *** sourceable6 joined
[05:43] *** statisfiable6 joined
[05:43] *** unicodable6 joined
[05:43] *** coverable6 joined
[05:43] *** shareable6 joined
[05:43] *** quotable6 joined
[05:44] *** linkable6 joined
[05:44] *** bloatable6 joined
[05:44] *** releasable6 joined
[05:44] *** committable6 joined
[05:44] *** tellable6 joined
[05:45] *** nativecallable6 joined
[05:45] *** reportable6 joined
[05:45] *** greppable6 joined
[05:45] *** evalable6 joined
[05:45] *** squashable6 joined
[05:45] *** bisectable6 joined
[05:45] *** benchable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:02] *** nativecallable6 left
[07:02] *** greppable6 left
[07:02] *** unicodable6 left
[07:02] *** evalable6 left
[07:02] *** bloatable6 left
[07:02] *** squashable6 left
[07:02] *** releasable6 left
[07:02] *** shareable6 left
[07:02] *** sourceable6 left
[07:02] *** coverable6 left
[07:02] *** benchable6 left
[07:02] *** linkable6 left
[07:02] *** tellable6 left
[07:02] *** notable6 left
[07:02] *** bisectable6 left
[07:02] *** statisfiable6 left
[07:02] *** quotable6 left
[07:02] *** reportable6 left
[07:02] *** committable6 left
[07:03] *** quotable6 joined
[07:03] *** notable6 joined
[07:03] *** nativecallable6 joined
[07:03] *** benchable6 joined
[07:03] *** reportable6 joined
[07:03] *** bisectable6 joined
[07:03] *** releasable6 joined
[07:03] *** evalable6 joined
[07:03] *** statisfiable6 joined
[07:03] *** tellable6 joined
[07:03] *** unicodable6 joined
[07:03] *** squashable6 joined
[07:03] *** bloatable6 joined
[07:04] *** linkable6 joined
[07:04] *** sourceable6 joined
[07:05] *** committable6 joined
[07:05] *** coverable6 joined
[07:05] *** shareable6 joined
[07:05] *** greppable6 joined
[07:26] *** jpn joined
[07:37] *** DarthGandalf left
[07:55] *** Sgeo left
[07:57] *** jpn left
[08:20] *** DarthGandalf joined
[08:26] *** abraxxa joined
[08:33] *** abraxxa left
[08:33] *** abraxxa joined
[08:54] *** jpn joined
[08:59] *** Kaiepi left
[09:02] *** sena_kun joined
[09:30] *** razetime left
[09:43] *** Kaiepi joined
[10:27] *** sena_kun left
[10:39] *** rahil joined
[10:39] <rahil> hi there

[10:40] *** rahil left
[10:40] <discord-raku-bot> <Nemokosch> welcome

[10:54] *** Abhoerschutz left
[10:57] *** Abhoerschutz_ joined
[10:58] *** Kernspin left
[10:59] *** Kernspin joined
[11:07] *** Abhoerschutz_ is now known as Abhoerschutz

[11:21] *** holyghost joined
[11:24] *** sena_kun joined
[11:29] *** holyghost left
[11:30] <discord-raku-bot> <Nemokosch> how does one reset a @variable to its default value?

[11:32] <lizmat> @variable = ()

[11:32] <discord-raku-bot> <Nemokosch> I'm back to thinking one shouldn't ever use @variables, they are too unpredictable for that

[11:35] <discord-raku-bot> <Nemokosch> oh, so they just downright ignore is default traits...

[11:44] <lizmat> m: my @a is default(42) = 1,2,3; dd @a; @a[1] = Nil; dd @a

[11:44] <camelia> rakudo-moar 0ddfdaef5: OUTPUT: «Array @a = [1, 2, 3]␤Array @a = [1, 42, 3]␤»

[11:44] <lizmat> what is so hard to understand about that ?

[11:46] <discord-raku-bot> <Nemokosch> why can't @variables behave like... variables?

[11:47] <discord-raku-bot> <Nemokosch> why do they sabotage this way of thinking in all possible ways?

[11:48] <discord-raku-bot> <Nemokosch> undefined @variable, @variable that doesn't start off empty... hello?

[11:54] <discord-raku-bot> <Nemokosch> is there even a way to tell a @parameter "you should start off as undefined", which would be the right thing for a named parameter?

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[13:00] *** shareable6 left
[13:00] *** greppable6 left
[13:00] *** squashable6 left
[13:00] *** statisfiable6 left
[13:00] *** notable6 left
[13:00] *** unicodable6 left
[13:00] *** coverable6 left
[13:00] *** tellable6 left
[13:00] *** quotable6 left
[13:00] *** reportable6 left
[13:00] *** nativecallable6 left
[13:00] *** bloatable6 left
[13:00] *** evalable6 left
[13:00] *** sourceable6 left
[13:00] *** releasable6 left
[13:00] *** benchable6 left
[13:00] *** linkable6 left
[13:00] *** bisectable6 left
[13:01] *** bisectable6 joined
[13:01] *** bloatable6 joined
[13:01] *** releasable6 joined
[13:01] *** squashable6 joined
[13:01] *** benchable6 joined
[13:01] *** coverable6 joined
[13:01] *** nativecallable6 joined
[13:01] *** tellable6 joined
[13:01] *** kaskal left
[13:01] *** reportable6 joined
[13:02] *** statisfiable6 joined
[13:02] *** linkable6 joined
[13:02] *** sourceable6 joined
[13:02] *** quotable6 joined
[13:02] *** notable6 joined
[13:03] *** greppable6 joined
[13:03] *** evalable6 joined
[13:03] *** unicodable6 joined
[13:03] *** shareable6 joined
[13:06] *** kaskal joined
[13:10] *** jpn left
[13:37] *** jpn_ joined
[13:44] *** abraxxa left
[13:46] *** elcaro_ left
[13:47] *** elcaro joined
[13:50] *** eseyman left
[13:59] *** Xliff joined
[13:59] <Xliff> \i

[13:59] <Xliff> \o even

[13:59] <Xliff> Now working on GTK4 bindings. 880,000 lines of Raku and counting.

[14:06] *** Altai-man joined
[14:07] *** hankache joined
[14:07] *** hankache left
[14:07] <lizmat> Xliff: I'd be interested in (non-)progress of compilation times

[14:08] *** hankache joined
[14:08] <Xliff> lizmat: I think I send up that on #raku-dev like... yesterday? Day before?

[14:10] *** sena_kun left
[14:12] *** vrurg joined
[14:26] *** holyghost joined
[14:27] *** holyghost left
[14:58] *** hankache left
[15:19] *** eseyman joined
[15:57] <Geth> ¦ ecosystem/main: ccb23906aa | (Lucien Grondin)++ (committed using GitHub Web editor) | META.list

[15:57] <Geth> ¦ ecosystem/main: Update META.list

[15:57] <Geth> ¦ ecosystem/main: 

[15:57] <Geth> ¦ ecosystem/main: edit p6-modular link

[15:57] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/ccb23906aa

[16:19] *** evalable6 left
[16:19] *** linkable6 left
[16:19] *** evalable6 joined
[16:22] *** linkable6 joined
[16:24] *** Altai-man left
[16:25] *** Altai-man joined
[16:35] *** Guest2910 joined
[16:54] *** razetime joined
[17:03] *** Sgeo joined
[17:18] <smol-hors> m: ('000'..'111').join(' ').say

[17:18] <camelia> rakudo-moar d4598e475: OUTPUT: «000 001 010 011 100 101 110 111␤»

[17:18] *** razetime left
[17:48] *** jpn_ left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:05] *** Altai-man left
[18:14] *** jpn joined
[18:52] *** mcmillhj joined
[18:55] *** abraxxa-home joined
[18:57] <mcmillhj> Are there any quirks with the :cached trait and Set objects? I am trying to memoize a recursive function that has a Set parameter and I never see any values get cached. Smaller example that reproduces what I am seeing: https://topaz.github.io/paste/

[18:57] <mcmillhj> sorry, this is the url

[18:57] <mcmillhj> https://topaz.github.io/paste/#XQAAAQB2AgAAAAAAAAA5nUhjF1dV0ZmtcGlo4Mg47Ay+JKdunz+7FrQs4xGc3764sPzlh6tdeOwfB9azP59RjtW6crf0QIEq3+DAA0EXry+Wg9uCFtP8qf9/I/Ah53nqeIju9V9RQOc3DgAtCZzwHsZ0KZjPy4aa1NdxbDFPsWaQduwxt6RzDLmmFZNEBiL5YbtvlAx6a4iftK3gppfGJtQTgOK4Zzv1ywH4X2siQ8X82xHWIHyiXfqBhnJ4wsJoE4LXdB6u0V5DoOAcApgW+cZoBvZtdllfxYXnOeIOY5IpHS5L0u2a/81+DaY=

[18:59] *** sena_kun joined
[19:13] <lizmat> mcmillhj interesting

[19:13] <tbrowder> xmas

[19:14] <mcmillhj> If I change my Set to an Array it works as expected.

[19:14] <lizmat> yeah... :cached is experimental for a reason  :-)

[19:14] <lizmat> this big argument has always been what to use for a key in the cache

[19:15] <lizmat> and the original implementation used .gist for determining the key

[19:16] <lizmat> m: dd (1,2,3).Set.Str

[19:16] <camelia> rakudo-moar d4598e475: OUTPUT: «"2 3 1"␤»

[19:16] <lizmat> m: dd (1,2,3).Set.Str

[19:16] <camelia> rakudo-moar d4598e475: OUTPUT: «"1 2 3"␤»

[19:16] <lizmat> and as you can see, it follows the internal random hash ordering for stringification

[19:16] <lizmat> m: dd (1,2,3).Str

[19:16] <camelia> rakudo-moar d4598e475: OUTPUT: «"1 2 3"␤»

[19:16] <lizmat> m: dd (1,2,3).Str

[19:16] <camelia> rakudo-moar d4598e475: OUTPUT: «"1 2 3"␤»

[19:17] <lizmat> note that it is consistent here

[19:17] <lizmat> mind you, the implementation of :cached predates the current implementation of Sets

[19:18] <mcmillhj> okay, that makes sense. So w/e structure I am using as a cache needs to have consistent ordering in order for :cached to be consistent. Thank you! This was super informative.

[19:18] <lizmat> you're welcome

[19:19] <lizmat> well, for this implementation of :cached, indeed

[19:20] <lizmat> note the implementation of "is cached" is very simple:

[19:20] <lizmat> https://github.com/rakudo/rakudo/blob/main/lib/experimental.rakumod#L8

[19:21] <lizmat> you could take that sub into your own code and replace c.gist by c.WHICH

[19:21] <lizmat> and you would be set, I think

[19:22] <mcmillhj> ohh let me try that, filtering the arrays is pretty slow.

[19:26] <smol-hors> I get this error when invoking raku-debug on (I'm on Ubuntu 22.10) https://bpa.st/O3CKS

[19:29] <lizmat> smol-hors: meh, that feels like bitrot, could you make an issue for that ?

[19:30] <lizmat> meanwhile, you can fall into the REPL by calling the "repl"sub

[19:31] <smol-hors> sure :)

[19:38] *** Guest2910 left
[19:39] <smol-hors> issue submitted

[19:41] <smol-hors> hmm, that reminds me. I also cannot enter the repl (I have Rakudo v2022.04). I invoke raku with no arguments and it prints the header but does not show a prompt or respond to input.

[19:41] <smol-hors> can submit an issue, or is this something fixed in a later version?

[19:44] <lizmat> are you on Windows ?

[19:44] <smol-hors> Ubuntu 22.10

[19:44] <lizmat> ah, duh

[19:44] <lizmat> then I suggest upgrading to 2022.12 if possible  -)

[19:44] <Geth> ¦ docker: 65c49addd3 | (Daniel Mita)++ (committed using GitHub Web editor) | 5 files

[19:44] <Geth> ¦ docker: Bump to 2022.12 (#51)

[19:44] <Geth> ¦ docker: review: https://github.com/Raku/docker/commit/65c49addd3

[19:44] <smol-hors> ok :)

[19:53] *** Guest2998 joined
[20:03] *** jpn left
[20:07] *** codesections joined
[20:08] *** codesections left
[20:09] *** codesections joined
[20:30] <discord-raku-bot> <Nemokosch> so what do y'all think of this? https://github.com/Raku/problem-solving/issues/357

[20:33] *** mcmillhj left
[20:56] <MasterDuke> have you tried fixing it in rakudo? any spectests break?

[21:02] <discord-raku-bot> <Nemokosch> I haven't. Grammar stuff still makes me shiver.

[21:14] *** Kaiepi left
[21:18] *** Kaiepi joined
[21:27] *** sena_kun left
[21:56] *** abraxxa-home left
[22:22] *** euandreh left
[22:26] *** euandreh joined
[22:32] *** euandreh left
[23:09] <discord-raku-bot> <Nemokosch> surprisingly consistent: native types only support assignment, not binding; NQP only supports binding, not assignment

[23:10] <discord-raku-bot> <Nemokosch> surprising yes, consistent not so sure 😄 but really, does anyone know the history of this?

[23:32] <Geth> ¦ doc: 0rir++ created pull request #4178: Put glossary ref on HomePage.pod6

[23:32] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4178

[23:32] *** jpn joined
[23:36] <Xliff> What is this?

[23:36] <Xliff> "Cannot find method 'is_dispatcher' on object of type BOOTCode"

[23:36] <Xliff> Is this another nqp escapee making its way into Raku-land?

[23:39] <discord-raku-bot> <Nemokosch> how do you even get to stuff like this? 😅

[23:39] <Xliff> NativeCall

[23:41] <discord-raku-bot> <Nemokosch> then this is probably something very meta

[23:43] <Xliff> Hmmm... looks like a predeclaration issue.

[23:44] <Xliff> m: sub a { ... }; sub b { a() }; sub a { say "A"; b() }; 

[23:44] <camelia> rakudo-moar d4598e475: ( no output )

[23:44] <Xliff> m: sub a { ... }; sub b { a() }; sub a { say "A"; b() }; b()

[23:44] <camelia> rakudo-moar d4598e475: OUTPUT: «(signal SEGV)A␤»

[23:44] <Xliff> m: sub a { ... }; sub b { a() }; sub a { say "A"; b() }; a()

[23:44] <camelia> rakudo-moar d4598e475: OUTPUT: «(signal SEGV)A␤»

[23:45] <Xliff> That last shouldn't segfault. Should just print "A"

[23:45] <Xliff> twice.

[23:45] <Xliff> Ah nope. Infinite loop.

[23:46] <Xliff> m: sub a { ... }; sub b { a() }; sub a { say "A"; }; b()

[23:46] <camelia> rakudo-moar d4598e475: OUTPUT: «A␤»

[23:50] <Geth> ¦ doc: 206df08851 | rir++ (committed using GitHub Web editor) | doc/HomePage.pod6

[23:50] <Geth> ¦ doc: Put glossary ref on HomePage.pod6 (#4178)

[23:50] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/206df08851

[23:51] *** linkable6 left
[23:54] *** linkable6 joined
