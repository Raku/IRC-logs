[00:00] *** djerius left
[00:03] *** djerius joined
[00:06] *** reportable6 left
[00:15] *** euandreh left
[00:16] *** djerius left
[00:18] *** djerius joined
[00:31] *** lichtkind left
[00:31] *** Yeuph joined
[01:12] *** euandreh joined
[01:30] *** patterner___ joined
[01:30] *** SmokeMachine_ joined
[01:30] *** pjlsergeant_ joined
[01:30] *** samcv_ joined
[01:32] *** [dpk] joined
[01:32] *** simcop2387_ joined
[01:32] *** elcaro_ joined
[01:33] *** ky joined
[01:33] *** m_athias_ joined
[01:33] *** greaser|q joined
[01:34] *** mykhal_ joined
[01:34] *** solitario_ joined
[01:35] *** vodkra joined
[01:35] *** esh joined
[01:36] *** Tirifto joined
[01:38] *** Altreus_ joined
[01:39] *** SmokeMachine left
[01:39] *** pjlsergeant left
[01:39] *** SmokeMachine_ is now known as SmokeMachine

[01:39] *** pjlsergeant_ is now known as pjlsergeant

[01:39] *** patterner__ left
[01:39] *** Zero_Dogg left
[01:39] *** elcaro left
[01:39] *** epony left
[01:39] *** vodkra_ left
[01:39] *** andrea[m] left
[01:39] *** Arathorn left
[01:39] *** solitario left
[01:39] *** mykhal left
[01:39] *** ingy left
[01:39] *** m_athias left
[01:39] *** esh_ left
[01:39] *** simcop2387 left
[01:39] *** kybr left
[01:39] *** GreaseMonkey left
[01:39] *** samcv left
[01:39] *** simcop2387_ is now known as simcop2387

[01:39] *** Altreus left
[01:39] *** dpk left
[01:39] *** timo left
[01:40] *** epony joined
[01:42] *** ecocode left
[01:43] *** m_athias_ is now known as m_athias

[01:44] *** Zero_Dogg joined
[01:44] *** ecocode joined
[01:47] *** timo joined
[01:48] *** ingy joined
[01:48] *** andrea[m] joined
[01:49] *** Arathorn joined
[02:03] *** euandreh left
[02:04] *** ky is now known as kybr

[02:08] *** reportable6 joined
[02:18] *** euandreh joined
[02:28] *** seednode99 left
[02:29] *** seednode99 joined
[02:40] *** frost joined
[02:45] *** greaser|q left
[02:45] *** greaser|q joined
[02:46] *** kjp left
[02:46] *** greaser|q is now known as GreaseMonkey

[03:09] *** kjp joined
[03:10] *** Maxdamantus joined
[03:12] *** Kaipi left
[03:12] *** Merfont joined
[03:16] *** Merfont left
[03:16] *** Merfont joined
[03:17] <Maxdamantus> Hmm .. this is a bug, right?

[03:17] <Maxdamantus> $ cat /dev/urandom | head -c 100000 | raku -e 'say slurp("/dev/stdin", :bin).elems;'

[03:17] <Maxdamantus> 65536

[03:18] <Maxdamantus> Looking at strace, it does a read with size 1048576, and it stops reading if the returned size is less than that.

[03:19] <Maxdamantus> If it receives a full 1048576 bytes, it will do another read (potentially blocking), so seems like it's just assuming that it's a regular file or something.

[03:36] *** perlbot left
[03:37] *** simcop2387 left
[04:37] *** reportable6 left
[04:37] *** nativecallable6 left
[04:37] *** greppable6 left
[04:37] *** linkable6 left
[04:37] *** shareable6 left
[04:37] *** bisectable6 left
[04:37] *** quotable6 left
[04:37] *** committable6 left
[04:37] *** coverable6 left
[04:37] *** releasable6 left
[04:37] *** statisfiable6 left
[04:37] *** bloatable6 left
[04:37] *** tellable6 left
[04:37] *** squashable6 left
[04:37] *** unicodable6 left
[04:37] *** evalable6 left
[04:37] *** benchable6 left
[04:37] *** notable6 left
[04:37] *** sourceable6 left
[04:37] *** bloatable6 joined
[04:38] *** nativecallable6 joined
[04:38] *** sourceable6 joined
[04:38] *** shareable6 joined
[04:38] *** coverable6 joined
[04:39] *** statisfiable6 joined
[04:39] *** linkable6 joined
[04:39] *** unicodable6 joined
[04:39] *** bisectable6 joined
[04:40] *** evalable6 joined
[04:40] *** committable6 joined
[04:40] *** greppable6 joined
[04:40] *** reportable6 joined
[05:01] *** swaggboi left
[05:16] *** swaggboi joined
[05:38] *** releasable6 joined
[05:39] *** notable6 joined
[05:46] *** simcop2387 joined
[05:47] *** perlbot joined
[06:08] *** reportable6 left
[06:09] *** reportable6 joined
[06:37] *** benchable6 joined
[07:15] <elcaro_> I made a Wordle clone with Raku just for fun... teaching my kids about spelling and programming in one go

[07:15] <elcaro_> https://gist.github.com/0racle/77fb3e50b6b9b8666ba4082188bb81d8

[07:36] *** archenoth joined
[07:38] *** Oshawott left
[07:39] *** Oshawott joined
[07:39] *** tellable6 joined
[07:41] *** archenoth left
[07:42] *** seednode99 left
[07:43] *** seednode99 joined
[07:56] *** [dpk] is now known as dpk

[08:06] *** epony left
[08:08] *** epony joined
[08:11] *** discord-raku-bot left
[08:12] *** discord-raku-bot joined
[08:21] *** hasrthur joined
[08:26] *** hasrthur left
[08:38] *** squashable6 joined
[08:41] *** lichtkind joined
[08:47] *** jjido joined
[09:17] <MasterDuke> nice

[09:38] *** quotable6 joined
[09:58] *** eseyman left
[10:14] *** jjido left
[10:21] *** hasrthur joined
[10:51] *** frost left
[10:53] *** Sgeo left
[11:22] <Voldenet> Maxdamantus: maybe a workaround, but `cat /dev/urandom | head -c 100000 | raku -e 'say "/dev/stdin".IO.open(:bin).slurp.elems;'` works fine

[11:23] <Voldenet> makes me wonder why `slurp("/dev/stdin", :bin)` behaves differently

[11:23] <Maxdamantus> Yeah, I noticed that. A bit more awkward though since you need to capture the handle to avoid leaking the file descriptor.

[11:24] <Maxdamantus> (Not very nice to just open a file and not close it)

[11:31] *** jjido joined
[11:35] <Voldenet> Well yes, but `sub my-slurp(IO() $path, :$bin) { my $p = $path.open(:$bin); LEAVE $p.close; $p.slurp };` also works without that bug

[11:37] <moon-child> augment class Handle { method slurp { ... } }

[11:37] <moon-child> :)

[11:39] <Voldenet> I wish LEAVE worked like defer, btw

[11:43] *** jjido left
[11:43] <Voldenet> in fact, this would be super nice to use: say "/dev/stdin".IO.open(:bin).defer-with(*.close).slurp.elems;

[11:44] <moon-child> you would an explicit '.done' or similar at the end

[11:44] <moon-child> otherwise I think you could rig it so that you'd be able to write that as is

[11:45] <lizmat> Supplier.slurp() takes a :close argument ?

[11:45] <lizmat> actually IO.slurp takes a :bin

[11:46] <lizmat> so maybe "/dev/stdin".IO.slurp(:bin).elems" should work ?

[11:47] <Voldenet> > cat /dev/urandom | head -c 14120000 | raku -e 'say "/dev/stdin".IO.slurp(:bin).elems;'

[11:47] <Voldenet> i see nothing close to the number on the left

[11:47] <Voldenet> with .open(:bin) inbetween I do though

[11:58] <lizmat> hmmm... that feels strange

[12:07] *** reportable6 left
[12:21] <Voldenet> https://github.com/rakudo/rakudo/blob/10c3db/src/core.c/IO/Path.pm6#L574

[12:22] <Voldenet> …can't readfh return fewer bytes than expected?

[12:24] <lizmat> as far as I know, yes, what you specify is the max number of bytes to receive

[12:24] <moon-child> check EAGAIN or some such iirc

[12:24] <moon-child> might be the problem

[12:31] <Voldenet> eh, just instead of iseq_i(…, slurp-size) do isne_i(…, 0)

[13:00] *** kjp left
[13:00] <Skarsnik> I think I remember stdin/stdout being already available at async::io on start up, that maybe the issue?

[13:08] *** reportable6 joined
[13:11] *** jjido joined
[13:12] *** kjp joined
[13:18] <Maxdamantus> It's not specific to stdin.

[13:18] <Maxdamantus> $ raku -e 'say slurp(@*ARGS[0], :bin).elems;' <(head -c 100000 /dev/urandom)

[13:18] <Maxdamantus> 65536

[13:25] *** jjido left
[13:42] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2022/01/15/manual-hypering/

[13:52] *** djerius left
[13:53] *** djerius joined
[13:55] <cognominal>  0+0i == 0

[13:55] <cognominal> True

[13:55] <cognominal> > 0+0i eq 0

[13:55] <cognominal> False

[13:55] <cognominal> > 

[13:55] <cognominal> Why  ?

[13:56] <Skarsnik> say 0i.Str

[13:56] <evalable6> Skarsnik, rakudo-moar fb909efce: OUTPUT: «0+0i␤»

[13:57] <Skarsnik> eq coerce into string 

[13:57] <cognominal> Yes but I would expect. === things to be coerced into eq things

[13:58] *** Zero_Dogg left
[14:02] <discord-raku-bot> <Nemokosch#9980> what does that mean?

[14:05] <discord-raku-bot> <Nemokosch#9980> m: dd 0+0i === 0

[14:06] <Voldenet> m: dd 0+0i === 0

[14:06] <camelia> rakudo-moar fb909efce: OUTPUT: «Bool::False␤»

[14:06] <Voldenet> 0+0i has different value identity than 0

[14:07] <Skarsnik> say (0+0i).WHAT

[14:07] <evalable6> Skarsnik, rakudo-moar fb909efce: OUTPUT: «(Complex)␤»

[14:07] <discord-raku-bot> <Nemokosch#9980> okay, so 0+0i and 0 are NOT "=== things" in the first place

[14:07] <discord-raku-bot> <Nemokosch#9980> and from this point, there is nothing really surprising

[14:08] <discord-raku-bot> <Nemokosch#9980> string representation is more verbose than numeric representation

[14:09] <Voldenet> say 0+0i + 1 === 1+0i

[14:09] <evalable6> Voldenet, rakudo-moar fb909efce: OUTPUT: «True␤»

[14:10] <Voldenet> say 0+0i === 0.Complex

[14:10] <evalable6> Voldenet, rakudo-moar fb909efce: OUTPUT: «True␤»

[14:13] *** dextercd joined
[14:14] <cognominal> Nine said the same thing in #raku-dev.. Thx  everyone. I got rusty even if I have trouble with rust

[14:20] <Voldenet> counterintuitively you'll never get rusty if you code in rust frequently ;)

[15:13] *** evalable6 left
[15:13] *** linkable6 left
[15:32] *** Henry151 left
[16:15] *** evalable6 joined
[16:31] *** seednode99 left
[16:33] *** seednode99 joined
[17:24] *** lichtkind left
[18:08] *** reportable6 left
[18:10] *** Util_ left
[18:11] *** reportable6 joined
[18:15] *** linkable6 joined
[18:28] *** euandreh left
[18:36] *** ingy left
[18:36] *** ingy joined
[18:44] *** mexen left
[18:44] *** Sgeo joined
[19:44] *** euandreh joined
[19:58] *** Merfont left
[19:58] *** Kaiepi joined
[20:03] *** qorg11 left
[20:05] *** qorg11 joined
[20:22] *** Kaiepi left
[20:22] *** Kaiepi joined
[20:31] *** lichtkind joined
[20:33] *** clarjon1 joined
[20:35] *** stanrifkin joined
[20:35] <stanrifkin> how i enter 200 in roman numerals?

[20:35] <stanrifkin> ⅭⅭ

[20:35] <stanrifkin> i copied that from unicode-table.com

[20:35] <stanrifkin> one Ⅽ works but two of them not.

[20:36] <stanrifkin> when i quite them "ⅭⅭ" it just print ⅭⅭ

[20:37] <stanrifkin> and "ⅭⅭ" + 0x200 is says it can't convert to number

[20:37] <stanrifkin> but Ⅽ + 0x200 works fine

[20:38] <japhb> Looking for Slang::Roman or Math::Roman maybe?

[20:38] <stanrifkin> haven't looked into that

[20:38] <stanrifkin> thought raku can do it native

[20:49] <[Coke]> check the unicode properties on those characters. There's a difference between numbers/numerals, if I recall.

[20:49] <stanrifkin> eval: Ⅽ + 0x200

[20:49] <evalable6> stanrifkin, rakudo-moar fb909efce: OUTPUT: «WARNINGS for /tmp/J1HIEdYGmN:␤Useless use of "+" in expression "Ⅽ + 0x200" in sink context (line 1)␤»

[20:49] <stanrifkin> hm...

[20:50] <[Coke]> you need to output it.

[20:50] <stanrifkin> eval: say Ⅽ + 0x200

[20:50] <evalable6> stanrifkin, rakudo-moar fb909efce: OUTPUT: «612␤»

[20:50] <stanrifkin> eval: say ⅭⅭ + 0x200

[20:50] <evalable6> stanrifkin, rakudo-moar fb909efce: OUTPUT: «(exit code 1) 4===SORRY!4=== Er…»

[20:50] <evalable6> stanrifkin, Full output: https://gist.github.com/d6925d556caf3815e60ba7d5e89037e1

[21:07] <stanrifkin> Slang::Roman works. But not in the Repl.

[21:35] *** evalable6 left
[21:35] *** linkable6 left
[21:48] *** stanrifkin left
[22:26] *** Kaiepi left
[22:26] *** Kaiepi joined
[22:49] *** hasrthur left
[23:08] *** lichtkind left
[23:14] *** xinming left
[23:23] *** eseyman joined
[23:27] *** jjido joined
[23:34] *** epony left
[23:36] *** evalable6 joined
