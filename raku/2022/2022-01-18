[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:26] *** dextercd left
[00:26] <discord-raku-bot> <stevied#8273> anyone know offhand how I can figure out which version of vim started supporting "raku" for the filetype?
[00:30] <discord-raku-bot> <stevied#8273> actually, more specifically, when they dropped support for perl6 fitetypes
[00:30] <discord-raku-bot> <Nemokosch#9980> what does it mean that it's supported? 👀
[00:31] <discord-raku-bot> <stevied#8273> well, here's the issue:
[00:32] <discord-raku-bot> <stevied#8273> https://github.com/kbucheli/p6-Text-VimColour/blob/master/t/vim_colour.t
[00:32] <discord-raku-bot> <stevied#8273> test 7 fails with the newest versions of vim
[00:32] <discord-raku-bot> <stevied#8273> if I change it to raku, it works with newer versions
[00:33] <discord-raku-bot> <stevied#8273> so need to figure out when to set it to perl6 for ancient versions of vim and when to set it to raku for newer versions of vim
[00:34] <discord-raku-bot> <stevied#8273> sorry, test 4 fails
[00:36] <discord-raku-bot> <stevied#8273> tests pass with version 8.2.3489 but fail with 8.2.4100
[00:36] *** andrea[m] left
[00:36] <discord-raku-bot> <stevied#8273> I guess easiest thing to do is use perl6 for all versions up to 3489 and raku for all versions after
[00:39] *** aitron left
[00:39] *** aitron joined
[00:39] *** Manifest0 left
[00:40] *** Manifest0 joined
[00:40] <discord-raku-bot> <stevied#8273> but it doesn't seem easy to get at patch version
[00:40] <discord-raku-bot> <stevied#8273> 8.1 was released in 2018, before raku came out. so I can't use that
[00:55] *** andrea[m] joined
[01:38] *** timo left
[01:50] *** hasrthur joined
[01:54] *** hasrthur left
[01:55] *** frost joined
[02:06] *** BinGOs left
[02:06] *** bingos joined
[02:09] <[Coke]> Do you need to pass things that are so old they don't support raku ?
[02:10] <[Coke]> (Seems like just changing it to 'raku' is a good first pass)
[02:34] *** frost left
[02:37] *** frost joined
[03:37] *** coverable6 left
[03:37] *** unicodable6 left
[03:37] *** evalable6 left
[03:37] *** greppable6 left
[03:37] *** benchable6 left
[03:37] *** bisectable6 left
[03:37] *** statisfiable6 left
[03:37] *** tellable6 left
[03:37] *** committable6 left
[03:37] *** nativecallable6 left
[03:37] *** shareable6 left
[03:37] *** quotable6 left
[03:37] *** sourceable6 left
[03:37] *** notable6 left
[03:37] *** releasable6 left
[03:37] *** linkable6 left
[03:37] *** reportable6 left
[03:37] *** bloatable6 left
[03:37] *** squashable6 left
[03:38] *** greppable6 joined
[03:38] *** bloatable6 joined
[03:38] *** statisfiable6 joined
[03:39] *** releasable6 joined
[03:39] *** notable6 joined
[03:39] *** nativecallable6 joined
[03:39] *** unicodable6 joined
[03:39] *** committable6 joined
[03:39] *** quotable6 joined
[03:39] *** shareable6 joined
[03:40] *** sourceable6 joined
[03:40] *** benchable6 joined
[03:40] *** squashable6 joined
[03:53] *** andinus joined
[04:28] *** D5n9sMatrix joined
[04:29] <D5n9sMatrix> Hi all
[04:31] *** frost left
[04:32] <D5n9sMatrix> develop my project "ably" used language ["Perl6", "Erlang", "Octave", "Gambas"] any your my help ?
[04:34] <D5n9sMatrix> #raku  one pivoting
[04:39] *** linkable6 joined
[04:39] *** bisectable6 joined
[04:40] <D5n9sMatrix> sub pivoting($U11, $L21) { my $self = [Coke]+$U11|$L21; } #expression Intel Core
[04:54] <D5n9sMatrix> create one File in Folder /develop/  ->
[04:54] <D5n9sMatrix> # pivtos solver verify the elements
[04:54] <D5n9sMatrix> sub pivots($Ut12, $Coke){
[04:54] <D5n9sMatrix>     # reflect arguments silent
[04:54] <D5n9sMatrix>     my $self = @[$Coke];
[04:54] <D5n9sMatrix>     my $sys  = Array.x[$Ut12];
[04:54] <D5n9sMatrix>     # type of speech voice commands
[04:54] <D5n9sMatrix>     say "look pivots to solver the elements" if $self.x;
[04:54] <D5n9sMatrix>     say "look the resolution verify", if $sys.x;
[04:54] <D5n9sMatrix>   return $self; # running path car silent
[04:54] <D5n9sMatrix> }
[04:56] *** aitron left
[04:59] *** aitron joined
[05:00] *** aitron left
[05:01] <D5n9sMatrix> # pivtos solver verify the elements
[05:01] <D5n9sMatrix> sub pivots($Ut12, $Coke){
[05:01] <D5n9sMatrix>     # reflect arguments silent
[05:01] <D5n9sMatrix>     my $self = @[$Coke];
[05:01] <D5n9sMatrix>     my $sys  = Array.x[$Ut12];
[05:01] <D5n9sMatrix>     # type of speech voice commands
[05:01] <D5n9sMatrix>     say "look pivots to solver the elements" if $self.x;
[05:01] <D5n9sMatrix>     say "look the resolution verify", if $sys.x;
[05:01] <D5n9sMatrix>     return $sys.x[$Ut12[" aitron has left (Read error: Connection reset by peer)"]];
[05:01] <D5n9sMatrix>   return $self; # running path car silent
[05:01] <D5n9sMatrix> }
[05:03] <D5n9sMatrix> move change return to access true connection aitron ...
[05:08] *** aitron joined
[05:14] <D5n9sMatrix> create solver problems /develop/ ->
[05:14] <D5n9sMatrix> # k + 1 relfect ah-ha!
[05:14] <D5n9sMatrix> sub L21($k + 1){
[05:14] <D5n9sMatrix>     my $self = @[$k+1];
[05:14] <D5n9sMatrix>     my $detail = &[$k.x[5.5]];
[05:14] <D5n9sMatrix>     my $solver = m/$k/;
[05:14] <D5n9sMatrix>     say "look detail solver problems", if $self.x;
[05:14] <D5n9sMatrix>     say "verify the detail of elements", if $detail.x;
[05:14] <D5n9sMatrix>     say "problems resolver" if $solver.x;
[05:14] <D5n9sMatrix>     return $self.x;
[05:14] <D5n9sMatrix> }
[05:16] <D5n9sMatrix> solved here ->
[05:16] <D5n9sMatrix> # k + 1 relfect ah-ha!
[05:16] <D5n9sMatrix> sub L21($k){
[05:16] <D5n9sMatrix>     my $self = @[$k+1];
[05:16] <D5n9sMatrix>     my $detail = $k.x[5.5];
[05:16] <D5n9sMatrix>     my $solver = m/$k/;
[05:16] <D5n9sMatrix>     say "look detail solver problems", if $self.x;
[05:16] <D5n9sMatrix>     say "verify the detail of elements", if $detail.x;
[05:16] <D5n9sMatrix>     say "problems resolver" if $solver.x;
[05:16] <D5n9sMatrix>     return $self.x;
[05:16] <D5n9sMatrix> }
[05:17] <D5n9sMatrix> #raku Rook Pivoting
[05:18] <D5n9sMatrix> #raku 3.4.7 Rook Pivoting
[05:34] <D5n9sMatrix> Lu pivoting reference of points in what verify the elements ->
[05:34] <D5n9sMatrix> # Lu pivoting
[05:34] <D5n9sMatrix> sub Lu($k, $n) {
[05:34] <D5n9sMatrix>     # dialog lie
[05:34] <D5n9sMatrix>     my $self = @[$k|$n];
[05:34] <D5n9sMatrix>     my $P = Array.x[24, 42, 38, 52,
[05:34] <D5n9sMatrix>                     36, 67, 11, 37,
[05:34] <D5n9sMatrix>                     13, 72, 36, 48,
[05:34] <D5n9sMatrix>                     61, 50, 43, 16];
[05:34] <D5n9sMatrix>     my $breakpoints = $P;
[05:34] <D5n9sMatrix>     my $verify = $P;
[05:34] <D5n9sMatrix>     # verify the lie of elements about error
[05:34] <D5n9sMatrix>     say "verify the brekpoints elements", if $breakpoints.x;
[05:34] <D5n9sMatrix>     say "verify the elements", if $verify.x;
[05:34] <D5n9sMatrix>     say "look breakpoints", if $P.x;
[05:34] <D5n9sMatrix> }
[05:39] *** evalable6 joined
[05:41] *** aitron left
[05:47] *** aitron joined
[05:47] *** aitron left
[05:50] *** aitron joined
[05:51] *** aitron left
[05:52] <D5n9sMatrix> verify the debug -> /home/username/project/ably/matrix/bin/client/debug ->
[05:52] <D5n9sMatrix> # then "72" would be identified by complete pivoting
[05:52] <D5n9sMatrix> # while "52," "72," or "61" would
[05:52] <D5n9sMatrix> sub detail($debug){
[05:52] <D5n9sMatrix>     # verify self
[05:52] <D5n9sMatrix>     my $self = @[$debug];
[05:53] <D5n9sMatrix>     my $pivoting = Array.x["Dialog Pivoting"];
[05:53] <D5n9sMatrix>     my $World = Array.x["Best Peace"];
[05:53] <D5n9sMatrix>     # vector send pow round
[05:53] <D5n9sMatrix>     my $vector = Array.x[72, 52, 72, 61];
[05:53] <D5n9sMatrix>     # speech ambient integer
[05:53] <D5n9sMatrix>     say "verify breakpoints" if $pivoting.x;
[05:53] <D5n9sMatrix>     say "verify the Best Peace World" if $World.x;
[05:53] <D5n9sMatrix>     say "vector matrix", if $vector.x;
[05:53] <D5n9sMatrix> }
[05:59] *** aitron joined
[05:59] *** aitron left
[06:08] <D5n9sMatrix> create folder -> /home/username/project/ably/matrix/bin/client/debug/perl6/Lu/pivoting ->
[06:08] <D5n9sMatrix> file n.p6 ->
[06:08] <D5n9sMatrix> # while develop
[06:08] <D5n9sMatrix> while (0 < 1) {
[06:08] <D5n9sMatrix>    say "develop debug compiler raku perl6 files";
[06:08] <D5n9sMatrix>    last;
[06:08] <D5n9sMatrix> }
[06:09] *** aitron joined
[06:09] *** aitron left
[06:20] *** aitron joined
[06:24] *** aitron left
[06:25] *** aitron joined
[06:31] *** zj joined
[06:32] *** aitron left
[06:34] *** aitron joined
[06:34] *** aitron left
[06:35] <D5n9sMatrix> about the folder -> /home/username/project/ably/matrix/bin/client/debug/perl6/Lu/pivoting ->
[06:37] <D5n9sMatrix> create file rowpiv.p6 ->
[06:37] <D5n9sMatrix> # tehory of loop
[06:37] <D5n9sMatrix> my &On2 = sub { say "theory of loop" }
[06:37] <D5n9sMatrix> while (0 < 1) {
[06:37] <D5n9sMatrix>     say &On2;
[06:37] <D5n9sMatrix>     last;
[06:37] <D5n9sMatrix> }
[06:41] <D5n9sMatrix> personal let go my sleep good morning to all ...
[06:44] *** aitron joined
[06:45] *** aitron left
[06:46] *** D5n9sMatrix left
[06:51] *** aitron joined
[06:55] *** aitron left
[07:00] *** aitron joined
[07:04] *** aitron left
[07:27] *** aitron joined
[07:30] *** aitron left
[07:35] *** aitron joined
[07:36] *** hasrthur joined
[07:37] *** seednode99 left
[07:37] *** aitron left
[07:38] *** seednode99 joined
[07:40] *** mexen joined
[07:45] *** aitron joined
[07:45] *** aitron left
[07:50] *** aitron joined
[07:53] *** aitron left
[07:58] *** qeqeqw joined
[08:05] *** aitron joined
[08:08] *** reportable6 joined
[08:12] *** aitron left
[08:14] *** abraxxa joined
[08:18] *** aitron joined
[08:19] *** abraxxa left
[08:19] *** aitron left
[08:19] *** abraxxa joined
[08:24] *** Xliff left
[08:28] *** aitron joined
[08:29] *** Sgeo left
[08:35] *** aitron left
[08:38] *** aitron joined
[08:39] *** aitron left
[08:39] *** aitron joined
[08:40] *** tellable6 joined
[08:44] *** aitron left
[08:46] *** jjido joined
[08:51] *** aitron joined
[08:52] *** aitron left
[09:04] *** aitron joined
[09:06] *** aitron left
[09:10] *** D5n9sMatrix joined
[09:11] *** dakkar joined
[09:20] <D5n9sMatrix> easy many fasts between specifying document situation->
[09:21] *** aitron joined
[09:21] *** aitron left
[09:26] <D5n9sMatrix> class new attach documentation case professional AOS by guest imaginary spirit professional help will green compare more full lew history lack dis number peer my bill hire lay due or money protected my life business my site pad jack var new order tech home AOS tech problems history.
[09:27] <D5n9sMatrix> business ->
[09:27] <D5n9sMatrix> #!/usr/bin/perl6
[09:27] <D5n9sMatrix> # ensure long method bellow
[09:27] <D5n9sMatrix> sub colpiv($k){
[09:27] <D5n9sMatrix>     # open click do
[09:27] <D5n9sMatrix>     my $self = @[$k];
[09:27] <D5n9sMatrix>     my $mn   =  m/$k/;
[09:27] <D5n9sMatrix>     my $den  = $self;
[09:27] <D5n9sMatrix>     # speech country best equip
[09:27] <D5n9sMatrix>     say "easy night joy" if $self.x;
[09:27] <D5n9sMatrix>     say "mesy send powy" if $mn.x;
[09:27] <D5n9sMatrix>     say "look ter" if $den.x;
[09:27] <D5n9sMatrix>     # notation en fantastic
[09:27] <D5n9sMatrix>     class pivoting {}
[09:27] <D5n9sMatrix>     # fantastic markets
[09:27] <D5n9sMatrix>     my $pivoting_1 = pivoting.new;
[09:27] <D5n9sMatrix>     my $pivoting_2 = pivoting.supply;
[09:27] <D5n9sMatrix>     my $pivoting_3 = pivoting.pivoting;
[09:27] <D5n9sMatrix> return $self;
[09:29] <D5n9sMatrix> #raku 3.4.8
[09:29] <D5n9sMatrix> A Note on U nderdetermined Systems
[09:36] *** aitron joined
[09:36] <El_Che> D5n9sMatrix: use tools like https://pastebin.com/
[09:37] *** aitron left
[09:52] *** aitron joined
[09:53] *** aitron left
[09:53] *** aitron joined
[09:54] *** jjido left
[10:07] *** aitron left
[10:14] *** aitron joined
[10:15] *** aitron left
[10:24] *** aitron joined
[10:25] *** Maylay left
[10:29] <D5n9sMatrix> &El_Che does not support pastebin.com
[10:29] *** aitron left
[10:33] <D5n9sMatrix> gut night sleep in corporation sign banner tar peer over problems sis peer proffer level new pad change way google books revolution HTTP://z-lib.org
[10:36] <D5n9sMatrix> sou jobs supper ray person supper books way hi quest nobody waits for click server protection.
[10:37] *** aitron joined
[10:41] <D5n9sMatrix> sou math tech over day profession -> clicks everyday lack der peer double lay have peer nay stick documents have the software still proffession.
[10:43] <D5n9sMatrix> server comprehend fest ship still nay chef sou beta gates support the family everyday person overblow.
[10:44] *** qeqeqw left
[10:47] *** aitron left
[10:48] *** aitron joined
[10:51] *** aitron left
[10:58] *** aitron joined
[10:59] *** ChanServ sets mode: +o El_Che
[11:00] *** El_Che sets mode: +b *!*D5n9sMatr@177.72.180.*
[11:00] *** D5n9sMatrix was kicked by El_Che (D5n9sMatrix))
[11:00] <El_Che> \o/
[11:00] <El_Che> :)
[11:00] *** ChanServ sets mode: -o El_Che
[11:03] <moritz> thanks El_Che 
[11:03] *** aitron left
[11:06] *** aitron joined
[11:10] *** aitron left
[11:12] *** Maylay joined
[11:12] <El_Che> kicking and banning since 1994 :)
[11:17] *** aitron joined
[11:18] *** qeqeqw joined
[11:18] *** aitron left
[11:19] *** zj left
[11:24] *** Maylay left
[11:26] *** Maylay joined
[11:27] *** aitron joined
[11:29] *** aitron left
[11:32] *** qeqeqw left
[11:40] *** coverable6 joined
[11:42] *** aitron joined
[11:45] *** aitron left
[11:49] *** aitron joined
[11:51] *** aitron left
[12:01] <tbrowder> yay El_Che
[12:07] *** reportable6 left
[12:08] *** dynamite joined
[12:28] *** aitron joined
[12:28] *** aitron left
[12:34] <dynamite> hello
[12:34] <dynamite> what do you call someone who writes perl? :)
[12:38] *** aitron joined
[12:39] *** aitron left
[12:50] <lizmat> dynamite: are you on the right channel ?
[12:56] <discord-raku-bot> <Anton Antonov#7232> <@549087503735324693> "perlite" maybe...
[12:58] *** aitron joined
[12:58] <discord-raku-bot> <dynamite#1375> oh, I like perlite!
[13:00] <discord-raku-bot> <Anton Antonov#7232> Well, "perlite" is a cheap "industrial mineral", but it does allude to being "literate with perl."
[13:00] *** aitron left
[13:03] *** aitron joined
[13:06] *** aitron left
[13:09] *** reportable6 joined
[13:10] *** aitron joined
[13:13] *** aitron left
[13:13] *** qorg11 left
[13:15] *** qorg11 joined
[13:16] <discord-raku-bot> <Anton Antonov#7232> @lizmat I have a follow-up question related to using `BEGIN`. I have a package Stoichiometry computations, which has a Singleton pattern class for accessing the chemical elements data. The package uses this declarations / instantiations within a few files : `my Chemistry::Stoichiometry::ResourceAccess $resources.instance;` .
[13:17] <discord-raku-bot> <Anton Antonov#7232> If replace one of them with `BEGIN` block, e.g. `my Chemistry::Stoichiometry::ResourceAccess $resources :=  BEGIN { my Chemistry::Stoichiometry::ResourceAccess $resources.instance }` this should be sufficient to speed the load at run time, after package installation?
[13:20] <lizmat> you're creating a constant from a variable that hasn't been initialized yet ?
[13:21] <lizmat> perhaps a gist with a golf ?
[13:22] *** aitron joined
[13:22] *** aitron left
[13:25] <discord-raku-bot> <Anton Antonov#7232> @lizmat Let me think on what you said... 🙂
[13:30] *** aitron joined
[13:33] <discord-raku-bot> <stevied#8273> Not sure what you mean by “pass”. If I have just a 2 year old version of vim, it may not work with “raku”. If I have a new version of it’s broken with perl6.
[13:35] <discord-raku-bot> <stevied#8273> Seems some kind of logic is needed to determine what language is supported.
[13:38] *** dynamite left
[13:38] *** kjp left
[13:51] *** kjp joined
[13:52] *** dynamite joined
[13:56] *** aitron left
[14:02] *** anight[m] joined
[14:07] *** qeqeqw joined
[14:39] *** abraxxa left
[14:45] *** razetime joined
[14:49] *** abraxxa joined
[14:49] *** morte_ joined
[14:55] *** abraxxa left
[14:56] *** abraxxa joined
[14:57] *** aitron joined
[14:57] *** aitron left
[15:13] *** morte_ left
[15:14] *** Sgeo joined
[15:18] <Ulti> out of curiosity the ARM64 builds of MoarVM and Rakudo without any JIT?
[15:19] <Ulti> just noticing my benchmarks are a little bit faster than my intel laptop from 2016 on the latest Apple Silicon Mac but wondered if thats just its brute improvement in CPU power accounting for the lack of any JIT implementation
[15:21] <Ulti> D5n9sMatrix feels like an emerging AI child attempted to talk to us about its creation
[15:21] <MasterDuke> correct, they are without a jit. however, almost all of the moarvm/nqp/rakudo optimizations recently haven't been jit-related, so a recent rakudo without a jit is comparatively less slow than an old rakudo without a jit
[15:29] *** linkable6 left
[15:31] *** linkable6 joined
[15:37] *** abraxxa left
[15:38] *** squashable6 left
[15:39] *** abraxxa joined
[15:39] *** aitron joined
[15:44] *** aitron left
[15:44] *** dynamite left
[15:47] *** patrickb left
[15:48] *** patrickb joined
[15:57] *** morte_ joined
[15:58] *** dynamite joined
[16:00] *** aitron joined
[16:15] *** kjp left
[16:17] <discord-raku-bot> <Anton Antonov#7232> @lizmat "you're creating a constant from a variable that hasn't been initialized yet ?" -- No,  the Singleton class is already defined. So, the variable can initialized. (At seems to work without complains.)
[16:18] <discord-raku-bot> <Anton Antonov#7232> @lizmat "perhaps a gist with a golf ?" -- I think I finally understood what you are proposing. I can dehydrate/serialize the object with chemical elements data in using `.raku` or `.gist` and use that expression in a `BEGIN` block.
[16:38] *** squashable6 joined
[16:40] *** hasrthur left
[16:47] *** kjp joined
[17:06] *** mexen left
[17:17] *** kjp left
[17:18] *** razetime left
[17:24] *** linkable6 left
[17:24] *** linkable6 joined
[17:28] *** abraxxa left
[17:31] *** aitron left
[17:35] *** aitron joined
[17:36] *** aitron left
[17:38] <cognominal> Is there in raku a canonical way to test if a file is binary (non textual file), like -B (I think) for Perl ?
[17:39] *** dakkar left
[17:43] *** abraxxa joined
[17:44] <Voldenet> perl's -B is not that useful
[17:46] *** abraxxa left
[17:49] <[Coke]> many of the file operators exist, but not b.
[17:50] <[Coke]> there is https://github.com/jnthn/p6-data-textorbinary
[17:50] <[Coke]> It's 5 years unchanged, but looks decent.
[17:51] <moon-child> 'The algorithm will flag a file as binary if it encounters a NULL byte or a lone carriage return (\r)'  didn't an old version of macos use lone cr as a newline?
[17:53] <[Coke]> pre OS X, IIRC.
[17:56] <El_Che> [Coke]: Mac Classic what they call it nowadays
[17:56] <El_Che> :)
[17:57] <[Coke]> +1
[18:07] *** reportable6 left
[18:07] *** reportable6 joined
[18:10] *** kjp joined
[18:22] <cognominal> Thx. Judging by the contributors, it is a good candidate
[18:36] <Voldenet> not sure why p6-data-textorbinary checks 13 and 10 separately
[18:37] <Voldenet> file(1) treats 10 and 13 as text always
[18:37] <moon-child> it says it's based on git's heuristic
[18:41] *** hasrthur joined
[18:43] <Voldenet> \r can be valid text, at least on my typewriter
[18:46] *** hasrthur left
[18:49] *** lichtkind joined
[18:50] <dynamite>  /msg NickServ IDENTIFY dynamite asdf
[18:50] <dynamite> wait what
[18:50] <lizmat> space before
[18:51] <dynamite> ah
[19:03] *** younder joined
[19:04] <younder> Is there a raku module with a interface to ncurses for Linux?
[19:06] <younder> Never mind: I'ts  NCurses
[19:08] *** jjido joined
[19:25] *** hasrthur joined
[19:27] * moon-child waggles his fist at in-band authentication
[19:27] <moon-child> younder: consider using Terminal::Print, unless you absolutely need curses
[19:45] <Voldenet> a propos console libs, I wish there was something like https://github.com/Textualize/rich for raku
[19:46] <Voldenet> currently i just use Inline::Python for it, but it's enormously ugly
[19:51] *** nebuchadnezzar left
[19:51] *** nebuchadnezzar joined
[20:07] <discord-raku-bot> <Anton Antonov#7232> @Voldenet What is ugly? Python, "Inline::Python", or both applied together?
[20:12] *** hasrthur left
[20:25] <Voldenet> both
[20:27] <Voldenet> for example progress bar from rich uses `with` syntax, which translated into raku with __enter__ and __exit__ methods is a terrible hack
[20:33] *** dynamite left
[20:40] *** dynamite joined
[20:41] *** qeqeqw left
[21:41] *** linkable6 left
[21:41] *** evalable6 left
[21:42] *** evalable6 joined
[21:42] *** linkable6 joined
[21:53] <lucs> Raku constructor question: https://gist.github.com/lucs/387b10ac9576bf9a04fcdfdb12ce91d0
[21:56] *** espadrine joined
[22:05] <Voldenet> lucs: http://ix.io/3MIu
[22:06] <thowe> I need an alternative to fail2ban written in raku.
[22:06] <El_Che> Foo.new(foo => $x/2); #maybe?
[22:07] <lucs> Voldenet: Yes, that works, but I'm trying to find a way where only the Foo class knows what to do with the $x argument.
[22:08] <Voldenet> in fact, it returns Foo instead of Bar
[22:08] <El_Che> BUILD?
[22:09] <lucs> (I'm testing it...)
[22:09] *** espadrine left
[22:10] <MasterDuke> m: class A { has $.foo }; class B is A { method new($x) { self.bless(:foo($x)) } }; say B.new(42).foo
[22:10] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «42␤»
[22:11] <MasterDuke> lucs: is ^^^ what you mean?
[22:12] <lucs> But if the $x needs to be modified (divided by 2 for example), it appears that it has to happen in the B constructor.
[22:12] *** hasrthur joined
[22:12] <lucs> Only the A class knows how to modify the 42.
[22:13] *** discord-raku-bot left
[22:14] *** discord-raku-bot joined
[22:14] <MasterDuke> m: class A { has $.foo; submethod TWEAK() { $!foo /= 2 } }; class B is A { method new($x) { self.bless(:foo($x)) } }; say B.new(42).foo
[22:14] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «21␤»
[22:15] <lucs> Yes, closer to what I'm looking for.
[22:15] <lucs> I'll beef up my abstraction.
[22:16] <gfldex> m: class A { has $.foo }; class B is A { method new($x) { my $self := self.CREATE; use nqp; nqp::bindattr($self, A, '$!foo', $x / 2); $self } }; say B.new(42).foo;
[22:16] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «21␤»
[22:16] <gfldex> <-- cheater
[22:16] <lucs> Yow! ;)
[22:17] *** hasrthur left
[22:18] *** discord-raku-bot left
[22:18] *** discord-raku-bot joined
[22:22] <MasterDuke> m: class A { has $.foo }; class B is A { method new($x) { use nqp; nqp::p6bindattrinvres(nqp::create(self), A, '$!foo', $x / 2); } }; say B.new(42).foo;   # another take on gfldex's cheat
[22:22] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «21␤»
[22:22] <lucs> I really need to go with nqp to solve this?
[22:22] *** morte_ left
[22:22] <discord-raku-bot> <grenzo#3668> # Maybe try this:
[22:22] <discord-raku-bot> <grenzo#3668> class Foo {
[22:22] <discord-raku-bot> <grenzo#3668>    has $.foo;
[22:22] <discord-raku-bot> <grenzo#3668>    submethod BUILD (:$foo) {
[22:22] <discord-raku-bot> <grenzo#3668>       $!foo = $foo;
[22:23] <discord-raku-bot> <grenzo#3668>    }
[22:23] <discord-raku-bot> <grenzo#3668> }
[22:23] <discord-raku-bot> <grenzo#3668> class Bar is Foo {}
[22:23] <discord-raku-bot> <grenzo#3668> print Bar.new(foo => 42).foo
[22:23] <lucs> Bar should know nothing of Foo's implementation.
[22:24] <MasterDuke> dunno. doesn't my version with TWEAK meet that requirement?
[22:24] <lucs> I'll have a better abstract example of what I'm after in a few minutes...
[22:25] *** jrjsmrtn left
[22:28] *** jrjsmrtn joined
[22:33] *** jrjsmrtn left
[22:35] <Voldenet> lucs: so after previous bad example, this is probably better one http://ix.io/3MIv
[22:36] <lucs> Yes, thanks, but my example was not clear.
[22:36] <lucs> Revised here:
[22:36] *** jrjsmrtn joined
[22:36] <lucs> https://gist.github.com/lucs/387b10ac9576bf9a04fcdfdb12ce91d0
[22:38] <Voldenet> BUILD is better than new
[22:39] <lucs> I don't code in Raku enough, I keep forgetting how things work :/
[22:39] <lucs> I'll read up on BUILD again.
[22:39] <MasterDuke> well, and TWEAK is preferred over BUILD if possible
[22:39] <vrurg> TWEAK is better than BUILD
[22:39] <El_Che> maybe you just want to be too smart :)
[22:39] <vrurg> MasterDuke++ :)
[22:40] <Voldenet> huh, but why TWEAK is better? Doesn't the value get assigned twice then?
[22:41] <lucs> I've used TWEAK in the past, but I'm not sure how that helps with my problem, that is: how to set up the A part of the B instance so that some-A-method will know about that initial 42 argument.
[22:42] <lucs> That is, given that class B has no idea how A is implemented.
[22:43] <MasterDuke> m: class A { has $.foo; submethod TWEAK() { $!foo /= 2 }; method something() { return $!foo }; }; class B is A { has $.bar = 66; method new($x) { self.bless(:foo($x)) } }; my $b = B.new(42); say $b.foo; say $b.something; say $b.bar
[22:43] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «21␤21␤66␤»
[22:44] <lucs> That solution has B knowing about A's foo :/
[22:44] <MasterDuke> it's a subclass, why wouldn't it know about the public members of A?
[22:45] <lucs> Again, sorry, my example doesn't quite represent my problem I guess.
[22:45] <lucs> It's not necessarily a public member.
[22:45] <vrurg> Voldenet: the default construction protocol depends on BUILD. If it is not specificied it then creates one for you when necessary. If you have a BUILD then much of construction work has to be done manually.
[22:46] <vrurg> lucs: if it's not a public then subclass must not mangle with it.
[22:46] <lucs> Class A has some-A-method(), and the latter will return something that has to do with the 42 argument passed to the B constructor.
[22:46] <lucs> But B doesn't know how that happens.
[22:47] <MasterDuke> m: class A { has $.foo; has $!baz; submethod TWEAK() { $!baz = $!foo / 2 }; method something() { return $!baz }; }; class B is A { has $.bar = 66; method new($x) { self.bless(:foo($x)) } }; my $b = B.new(42); say $b.foo; say $b.something; say $b.bar
[22:47] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «42␤21␤66␤»
[22:47] <lucs> I'll rework my example...
[22:49] <MasterDuke> don't actually need the TWEAK in my example, could just be `has $!baz = $!foo / 2;`
[22:52] <Voldenet> vrurg: I see, that makes sense
[22:59] <lucs> "vrurg> lucs: if it's not a public then subclass must not mangle with it."
[23:00] <lucs> Right. I want the parent class to do the mangling, and the subclass to be able to get to the mangled value with for example some-A-method.
[23:00] <Voldenet> lucs: public constructor is part of the contract for subclasses
[23:02] <[Coke]> then you need an accessor or method in A that B calls explicitly
[23:03] <lucs> Uh, A doesn't know about B, can it?
[23:03] <vrurg> lucs: re-phrasing [Coke], then you need a public interface for a private entity
[23:03] *** lichtkind left
[23:03] <vrurg> lucs: BTW, A can know about B.
[23:03] <lucs> Yes, I think that's what I want: class A has a some-
[23:04] <lucs> oops
[23:04] <vrurg> And on rare occasions A can trust B to provide access to its private members.
[23:04] <lucs> Yes, I think that's what I want: class A has a some-A-method() returning the mangled value.
[23:04] <vrurg> But this is unrecommended most of the time.
[23:05] <lucs> So invoking B.new(42) somehow passes that 42 to the A constructor (or whatever) and later, some-A-method() returns the mangled value.
[23:05] <MasterDuke> i'm not sure how my example doesn't match your description
[23:06] <[Coke]> You're trying to make B too aware of A.
[23:06] <lucs> Your example has class B knowing about $.foo, which it shouldn't (except it should, because my example was not precise enough to match what I'm after).
[23:07] <lucs> I'll write up a concrete example.
[23:07] <vrurg> lucs: I have a very strong feeling that you have mis-designed or over-engineered your code. :)
[23:08] <vrurg> But better see the example in first place.
[23:13] <MasterDuke> m: class A { has $!baz; method new($x) { self.bless(:foo($x)) }; submethod BUILD(:$foo) { $!baz = $foo / 2 }; method some-A-method() { return $!baz }; }; class B is A { has $.bar = 66; }; my $b = B.new(42); say $b.some-A-method; say $b.bar    # sounds like this maybe?
[23:13] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «21␤66␤»
[23:14] <lucs> Looking...
[23:15] <gfldex> m: class A { has $.foo; submethod TWEAK { $!foo = $*x; } }; class B is A { method new($*x) { self.bless } }; say B.new(42).foo;
[23:15] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «42␤»
[23:16] <vrurg> MasterDuke: you still can use TWEAK in the last example. :foo will arrive into it.
[23:16] <MasterDuke> ah, nice
[23:19] <lucs> MasterDuke: Your last example is what I was after (I'll look at the TWEAK in a minute).
[23:19] <MasterDuke> cool
[23:19] <lucs> You guys (and gals, eh) are great!
[23:20] <lucs> So I really have to read up on the construction process more carefully.
[23:21] <gfldex> If any subclass overloads method new, you are out of luck.
[23:21] <lucs> gfldex: I don't understand the  $*x
[23:21] <gfldex> :D
[23:21] <lucs> Not funny! ;-)
[23:22] <gfldex> You want to forward a positional argument into a method call in another class.
[23:22] <gfldex> So I put the value into a dynvar and as such onto the call stack.
[23:23] * vrurg would ignore gfldex ;)
[23:23] <vrurg> He loves tricks even more than I do... :)
[23:24] <lucs> I've read (not necessarily understood) some of his stuff before, I know what you mean.
[23:24] <lucs> But seriously, I love what you figure out gfldex.
[23:25] <gfldex> I do agree that Raku is -Ofun. I had loads of that the past couple of years.
[23:28] <lucs> D'oh! $*x. I get it now. I'd completely forgotten about those.
[23:29] <lucs> (I would never have guessed to use them for my problem though, eh.)
[23:30] <lucs> All this to help me build a Wordle solver helper :-)
