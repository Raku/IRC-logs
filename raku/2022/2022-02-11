[00:09] *** reportable6 left
[00:09] <tbrowder> asm is for super geeks, but it is fun for an intro course and never use it again

[00:55] *** jjido left
[01:12] *** reportable6 joined
[02:06] *** yonnybg left
[02:09] *** yonnybg joined
[02:17] *** laidback_01 joined
[02:23] <tonyo> haha, it's useful for other stuff too just not very practical for general computing

[02:23] <tonyo> i used some form of it when i worked on test equipment for jets

[02:27] <tbrowder> oh, yeah, the original iot, but without the internet part.

[02:28] <perryprog> or you can use it to flex on the projecteuler forums

[02:28] <perryprog> and https://codegolf.stackexchange.com

[02:30] <tbrowder> did you know the us f-111f had its digital nav system programmed with punched tape readers plugged into the jet by ground crew members?

[02:31] <perryprog> Yes! tbrowder told me that just today

[02:31] <perryprog> That's pretty crazy

[02:33] <tbrowder> yep, but it was state-of-the-art at the time for operational gear

[02:34] <perryprog> Not quite as gnarly as string encoding your ROM, though

[02:35] <perryprog> and no, not "that" kind of string ;-)

[02:35] <perryprog> see: https://www.youtube.com/watch?v=P12r8DKHsak&t=20s

[02:36] <perryprog> and also: https://www.youtube.com/watch?v=2KSahAoOLdU&list=PL-_93BVApb59FWrLZfdlisi_x7-Ut_-w7&t=0s

[02:36] <perryprog> and also: https://www.youtube.com/watch?v=Bh_gP5aF3ys

[02:36] <perryprog> (this is a time-worthy rabbit hole by the way)

[02:36] <tbrowder> i should have said punched tape players i guess, read the tape and converted the tape holes to electrical signals

[02:37] <perryprog> Is there a semantical difference between reader and player?

[02:39] <tbrowder> i guess it depends on which side of the process you’re on

[02:59] <tbrowder> the apollo program preceded f-111 a bit i think, but it was a much different priority and had mucho dollars in its budget

[03:11] <tonyo> the earlier fa18s had a horizontal situational indicator that you'd have to calibrate on the flightline and would move according to what air speed indicated and projected a map onto a screen for the pilot to see where they were

[03:15] <tonyo> sometimes we'd get them back for cal and the map would be off the reel or it'd be off by several hundred miles

[03:17] *** evalable6 left
[04:38] *** linkable6 joined
[04:46] *** japhb left
[04:54] *** yonnybg left
[04:57] *** yonnybg joined
[04:57] *** japhb joined
[04:57] *** yonnybg left
[04:58] *** yonnybg joined
[05:16] *** frost joined
[05:19] *** evalable6 joined
[05:27] *** mexen joined
[06:09] *** reportable6 left
[07:02] *** frost left
[07:11] *** reportable6 joined
[07:41] *** abraxxa joined
[07:45] *** linkable6 left
[07:45] *** linkable6 joined
[07:47] *** abraxxa left
[07:48] *** abraxxa joined
[07:59] *** Sgeo left
[08:23] <jaguart> @MasterDuke - thanks, that is what I am looking for... though I get errors about coercing Nil to Int with my specifics ...

[08:33] *** frost joined
[08:38] <jaguart> m: say "a3bbbbbbc" ~~ /a(\d)b**{$0}/

[08:38] <camelia> rakudo-moar 74e1dcc65: OUTPUT: «｢a3bbb｣␤ 0 => ｢3｣␤»

[08:39] <jaguart> m: say "a3bbbbbbc" ~~ /a(\d)(b**{$0})/;

[08:39] <camelia> rakudo-moar 74e1dcc65: OUTPUT: «Use of Nil.Int coerced to empty string␤  in regex  at <tmp> line 1␤This type cannot unbox to a native integer: P6opaque, Str␤  in regex  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:45] <jaguart> m: "a3bbbbbbc" ~~ /a$<n>=[\d+]$<s>=[.**{$<n>+0}]/

[08:45] <camelia> rakudo-moar 74e1dcc65: ( no output )

[08:45] <jaguart> m: say "a3bbbbbbc" ~~ /a$<n>=[\d+]$<s>=[.**{$<n>+0}]/

[08:45] <camelia> rakudo-moar 74e1dcc65: OUTPUT: «｢a3bbb｣␤ n => ｢3｣␤ s => ｢bbb｣␤»

[08:53] <jaguart> An adjective for raku? Let me start: orsome

[09:09] *** dakkar joined
[09:21] *** jjido joined
[09:31] <discord-raku-bot> <Anton Antonov#7232> @jaguart "perflexing"

[09:33] <discord-raku-bot> <Nemokosch#9980> what does "orsome" express?

[09:35] <discord-raku-bot> <Anton Antonov#7232> I assume a crossbreed between "awesome" and "or some".

[09:47] *** frost left
[09:48] *** frost joined
[09:52] <discord-raku-bot> <Nemokosch#9980> but like... why "or"

[10:24] *** frost left
[10:25] *** cognominal joined
[10:26] *** cognominal left
[10:32] *** jjido left
[10:59] *** jjido joined
[11:10] <tbrowder> tonyo: interesting, i thought fa18s had more digital avionics than that, guess it was quite a mixed bag with the long dev times, and many upgrades along the way…very rakuish

[11:58] *** sena_kun joined
[12:07] *** reportable6 left
[12:08] *** frost joined
[12:17] *** abraxxa left
[12:50] *** frost left
[12:51] *** squashable6 left
[13:01] *** frost joined
[13:05] *** Voldenet left
[13:11] *** Voldenet joined
[13:42] <[Coke]> teams--

[13:43] <discord-raku-bot> <Anton Antonov#7232> @Nemokosch#9980 For me "or some" hints on "strangeness" or "redundancy" in Raku. (And sounds like "awesome".)

[13:44] *** jjido left
[13:52] *** frost left
[14:01] *** discord-raku-bot left
[14:02] *** discord-raku-bot joined
[14:08] *** reportable6 joined
[14:16] *** epony left
[14:55] *** jjido joined
[14:59] *** jjido left
[15:13] *** epony joined
[15:15] *** A26F64 joined
[15:22] *** MasterDuke left
[15:23] <leont> m: multi sub foo(Int:D(Cool:D) $foo) { dd $foo }; foo("1")

[15:23] <camelia> rakudo-moar 05447137f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling foo(Str) will never work with any of these multi signatures:␤    (Int:D(Cool:D):D $foo)␤at <tmp>:1␤------> ub foo(Int:D(Cool:D) $foo) { dd $foo }; ⏏foo("1")␤»

[15:24] *** ph88 left
[15:28] <leont> I'm not sure how I'm always the one to run into issues like that

[15:29] <A26F64> Actually, I'm always asking myself the same question.

[15:32] *** frost joined
[15:36] *** epony left
[15:38] <leont> I guess some of us have an explorative mind, we're like "that's a cool feature and I know exactly where I could use that"

[15:38] <leont> bisectable: v6.d multi sub foo(Int:D(Cool:D) $foo) { dd $foo }; foo("1")

[15:38] <bisectable6> leont, Will bisect the whole range automagically because no endpoints were provided, hang tight

[15:39] <bisectable6> leont, Output on all releases: https://gist.github.com/e8e429935610ffdb55e723261aa4bbc3

[15:39] <bisectable6> leont, Nothing to bisect!

[15:39] <leont> bisectable: multi sub foo(Int:D(Cool:D) $foo) { dd $foo }; foo("1")

[15:39] <bisectable6> leont, Will bisect the whole range automagically because no endpoints were provided, hang tight

[15:40] <bisectable6> leont, Output on all releases: https://gist.github.com/e1743bc00adb3899a568f84e2d2ccb22

[15:40] <bisectable6> leont, Bisecting by output (old=2018.09 new=2018.10) because on both starting points the exit code is 1

[15:40] <bisectable6> leont, bisect log: https://gist.github.com/92ea6e6e5e01b8c677493a8033f00ea0

[15:40] <bisectable6> leont, (2018-10-23) https://github.com/rakudo/rakudo/commit/0243275defec300098202e25bea7412f041ccacb

[15:40] <bisectable6> leont, Bisecting by output (old=2017.12 new=2018.01) because on both starting points the exit code is 1

[15:41] <bisectable6> leont, bisect log: https://gist.github.com/b6a0a74f8f395d9631a2a18ffe9e9877

[15:41] <bisectable6> leont, (2018-01-02) https://github.com/rakudo/rakudo/commit/a177fa99cbb08387dd3186a25b4c65ed6f00048c

[15:41] <leont> So basically it has never worked, so I can't blame the new dispatcher

[15:41] <bisectable6> leont, Output on all releases and bisected commits: https://gist.github.com/8243f147ab06bb3ef401d381ac505d10

[15:41] <leont> What was the less verbose than bisectable command again? I clearly picked the wrong one

[15:47] *** Sgeo joined
[15:49] <guifa> Updated BASIC-test to include support for multis yay

[15:49] <tellable6> 2022-02-09T15:55:28Z #raku <curiosa> guifa: thank you I've done that way

[16:12] *** epony joined
[16:15] *** frost left
[16:17] *** epony left
[16:22] *** epony joined
[16:23] <[Coke]> windows issue: running the full script, it gets to a block that is like indir('path/to', { $proc = run('git',..., $file,:out); $proc.out.slurp(:close).trim}); ... and nothing I print in that block or immediately after is displayed. so that's where the script is just exiting. But if I extract the indir code to a standalone file, executes fine. any suggestions?

[16:26] <[Coke]> at this point I think my best bet may be to do a bisect rakudos and see when it broke. :|

[16:26] <[Coke]> "bisect of"

[16:30] <[Coke]> Is there a way to force rakudo to build nqp & moarvm even if they are already installed in the prefix dir?

[16:33] *** Xliff left
[16:37] *** Kaipi left
[16:38] *** Kaipi joined
[16:44] <moritz> rm -rf install && perl Configure.pl --gen-moar

[16:44] <[Coke]> , so no

[16:45] <[Coke]> that is less usable when you have a system install dir

[16:46] <laidback_01> rakudo is being used as a system language now?  which system?

[16:46] <[Coke]> sorry, only mean in a shared location, not local to the source dir.

[16:47] <laidback_01> oh, and I think I mean 'raku', my bad on that!

[16:52] *** squashable6 joined
[16:54] <[Coke]> (ugh, this bisect is going to take forever, have to reinstall half a dozen packages with zef and that is not fast on this box)

[16:54] *** mexen left
[16:56] <[Coke]> (quicker to build moar/nqp/rakudo)

[16:57] *** slowtyper left
[16:59] *** slowtyper joined
[17:02] <[Coke]> ok, at least I have a good and bad rakudo on the bisect, so maybe I can find the issue. :)

[17:28] *** slowtype- joined
[17:29] *** slowtyper left
[17:31] *** dakkar left
[17:37] *** slowtyper joined
[17:37] *** slowtype- left
[17:43] *** A26F64 left
[17:48] *** sena_kun left
[17:57] *** slowtyper left
[17:58] *** slowtype- joined
[18:08] *** reportable6 left
[18:10] *** reportable6 joined
[18:15] <Geth> ¦ ecosystem: d5168408f0 | (Elizabeth Mattijsen)++ | META.list

[18:15] <Geth> ¦ ecosystem: Remove MIME::Base64 from p6c ecosystem, it lives in zef now

[18:15] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/d5168408f0

[18:15] <Geth> ¦ ecosystem: 6b92e5a804 | (Elizabeth Mattijsen)++ | META.list

[18:15] <Geth> ¦ ecosystem: Fix p6c version of Benchmark to last commit before zef

[18:15] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/6b92e5a804

[18:39] *** xinming left
[18:40] *** xinming joined
[18:50] *** jjido joined
[18:58] *** epony left
[19:00] *** epony joined
[19:08] *** jjido left
[19:10] *** slowtype- left
[19:11] *** slowtyper joined
[19:17] *** slowtype- joined
[19:17] *** slowtyper left
[19:21] <Geth> ¦ ecosystem: b7166221a0 | (Elizabeth Mattijsen)++ | META.list

[19:21] <Geth> ¦ ecosystem: Remove Benchmark from p6c

[19:21] <Geth> ¦ ecosystem: 

[19:21] <Geth> ¦ ecosystem: It lives in the zef ecosystem now

[19:21] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/b7166221a0

[19:21] <Geth> ¦ ecosystem: 064fc0f5f2 | (Elizabeth Mattijsen)++ | META.list

[19:21] <Geth> ¦ ecosystem: Fix Test::Class to the last commit in p6c

[19:21] <Geth> ¦ ecosystem: 

[19:21] <Geth> ¦ ecosystem: So that we can move it to the zef ecosystem without any issues

[19:21] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/064fc0f5f2

[19:24] *** epony left
[19:24] *** xinming left
[19:24] *** xinming joined
[19:28] <jdv> seems there's a bunch of roast errata fails - some todos, some not.

[19:28] <jdv> whoops - wrong chan

[19:51] *** curiosa joined
[20:02] *** discord-raku-bot left
[20:02] *** discord-raku-bot joined
[20:21] *** epony joined
[20:26] *** slowtyper joined
[20:26] *** slowtype- left
[20:30] *** epony left
[20:42] <curiosa> Hello, how would you define a grammar rule for a valid filename? is there any module providing that?

[20:42] <tellable6> hey curiosa, you have a message: https://gist.github.com/08da64c6dc3b4c007c6b94945e88f6b0

[20:48] *** slowtyper left
[20:49] <japhb> curiosa: There are a lot of different definitions of "valid filename", depending on operating system, filesystem, kernel settings, etc.

[20:49] *** slowtyper joined
[20:49] <curiosa> japhb yes i know that is the issue

[20:50] <curiosa> and sometime you are on win32 but still want to translate valid unix filenames

[20:58] *** slowtyper left
[20:59] *** slowtyper joined
[21:01] <curiosa> ok, is there a shortcut to make a rule case insensitive?

[21:08] <curiosa> would have been nice if this worked: rule declaration:sym<pippo> { <sym:ignorecase> }

[21:08] <curiosa> is there a shortcut like this?

[21:16] <japhb> :i inside the brackets

[21:16] <curiosa> inside these brackets: <>

[21:16] <curiosa> it doesnt seem to work

[21:17] <japhb> inside { }

[21:18] <curiosa> nope

[21:18] <curiosa> there is no way it can work

[21:20] *** slowtype- joined
[21:21] *** slowtyper left
[21:24] *** curiosa left
[21:24] *** curiosa joined
[21:24] <curiosa> I really cannot declare a case insensitive token

[21:24] <curiosa> seems weird

[21:25] <curiosa> am I the first one trying to achieve anything like that?

[21:25] <curiosa> what am I doing wrong?

[21:25] <curiosa> token subsystem-keyword { "subsystem" :i }

[21:25] <curiosa> doesn't work

[21:27] *** slowtype- left
[21:27] *** slowtyper joined
[21:28] *** curiosa39 joined
[21:28] <curiosa39> m: my token subsystem-keyword { "Subsystem" :i }; say "subsystem" ~~ &subsystem-keyword

[21:28] <camelia> rakudo-moar 05447137f: OUTPUT: «Nil␤»

[21:29] <curiosa39> m: my token subsystem-keyword { "subsystem" :i }; say "subsystem" ~~ &subsystem-keyword

[21:29] <camelia> rakudo-moar 05447137f: OUTPUT: «｢subsystem｣␤»

[21:29] <curiosa39> m: my token subsystem-keyword { "subsystem" :i }; say "Subsystem" ~~ &subsystem-keyword

[21:29] <camelia> rakudo-moar 05447137f: OUTPUT: «Nil␤»

[21:29] <curiosa39> m: my token subsystem-keyword { "subsystem" :i }; say "Subsystem" ~~ &subsystem-keyword:i

[21:29] <camelia> rakudo-moar 05447137f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    subsystem-keyword:i used at line 1. Did you mean 'subsystem-keyword'?␤␤»

[21:30] <curiosa39> m: my token subsystem-keyword { :i "subsystem" :i }; say "Subsystem" ~~ &subsystem-keyword

[21:30] <camelia> rakudo-moar 05447137f: OUTPUT: «｢Subsystem｣␤»

[21:30] <curiosa39> m: my token subsystem-keyword { :i "subsystem" "pera" }; say "Subsystem Pera" ~~ &subsystem-keyword

[21:30] <camelia> rakudo-moar 05447137f: OUTPUT: «Nil␤»

[21:30] <curiosa39> m: my token subsystem-keyword { :i "subsystem" "pera" }; say "Subsystem pera" ~~ &subsystem-keyword

[21:30] <camelia> rakudo-moar 05447137f: OUTPUT: «Nil␤»

[21:30] <curiosa39> m: my regex subsystem-keyword { :i "subsystem" "pera" }; say "Subsystem pera" ~~ &subsystem-keyword

[21:30] <camelia> rakudo-moar 05447137f: OUTPUT: «Nil␤»

[21:31] *** curiosa left
[21:49] *** moon-child is now known as bowl-of-petunias

[21:49] *** bowl-of-petunias is now known as moon-child

[21:51] <tonyo> tbrowder: the cs and up all had gps and more electronics, the as and bs both had a mix of tech and old stuff

[21:52] <tonyo> the flir pods were the most fun to work on and often caught fire

[21:53] <Geth> ¦ doc/assoc-tbl: 8506034460 | (Daniel Sockwell)++ | 2 files

[21:53] <Geth> ¦ doc/assoc-tbl: Expand qq docs re esc sequences

[21:53] <Geth> ¦ doc/assoc-tbl: 

[21:53] <Geth> ¦ doc/assoc-tbl: This expands the description of interpolation with qq, especially with

[21:53] <Geth> ¦ doc/assoc-tbl: regards to backslash escape sequences.

[21:53] <Geth> ¦ doc/assoc-tbl: review: https://github.com/Raku/doc/commit/8506034460

[21:53] <Geth> ¦ doc/assoc-tbl: 1e0a7abae6 | (Daniel Sockwell)++ | 2 files

[21:53] <Geth> ¦ doc/assoc-tbl: Clarify operator precedence description and tbl

[21:53] <Geth> ¦ doc/assoc-tbl: 

[21:53] <Geth> ¦ doc/assoc-tbl: This commit clarifies the operator precedence table as discussed in

[21:53] <Geth> ¦ doc/assoc-tbl: Raku/doc#4029 and the accompanying discussion of operator precedence

[21:53] <Geth> ¦ doc/assoc-tbl: and associativity.

[21:53] <Geth> ¦ doc/assoc-tbl: 

[21:53] <Geth> ¦ doc/assoc-tbl: The commit made the following changes:

[21:54] <Geth> ¦ doc/assoc-tbl: <…commit message has 20 more lines…>

[21:54] <Geth> ¦ doc/assoc-tbl: review: https://github.com/Raku/doc/commit/1e0a7abae6

[21:54] *** linkable6 left
[21:55] *** linkable6 joined
[21:58] <Geth> ¦ doc/assoc-tbl: f5f7ad5b82 | (Daniel Sockwell)++ | 2 files

[21:58] <Geth> ¦ doc/assoc-tbl: Clarify operator precedence description and tbl

[21:58] <Geth> ¦ doc/assoc-tbl: 

[21:58] <Geth> ¦ doc/assoc-tbl: This commit clarifies the operator precedence table as discussed in

[21:58] <Geth> ¦ doc/assoc-tbl: Raku/doc#4029 and the accompanying discussion of operator precedence

[21:58] <Geth> ¦ doc/assoc-tbl: and associativity.

[21:58] <Geth> ¦ doc/assoc-tbl: 

[21:58] <Geth> ¦ doc/assoc-tbl: The commit made the following changes:

[21:58] <Geth> ¦ doc/assoc-tbl: <…commit message has 20 more lines…>

[21:58] <Geth> ¦ doc/assoc-tbl: review: https://github.com/Raku/doc/commit/f5f7ad5b82

[21:59] *** linkable6 left
[22:06] <Geth> ¦ doc: codesections++ created pull request #4031: Clarify operator precedence description and table

[22:06] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4031

[22:06] <Geth> ¦ doc: d9dae55f00 | (Daniel Sockwell)++ | 2 files

[22:06] <Geth> ¦ doc: Expand qq docs re esc sequences

[22:06] <Geth> ¦ doc: 

[22:06] <Geth> ¦ doc: This expands the description of interpolation with qq, especially with

[22:06] <Geth> ¦ doc: regards to backslash escape sequences.

[22:06] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/d9dae55f00

[22:12] *** slowtype- joined
[22:12] *** slowtyper left
[22:19] <Geth> ¦ doc: codesections self-assigned xt/examples-compilation.t doc/Language/containers.pod6 https://github.com/Raku/doc/issues/4020

[22:23] *** epony joined
[22:30] *** jjido joined
[22:35] *** slowtyper joined
[22:35] *** slowtype- left
[22:49] *** slowtype- joined
[22:49] *** slowtyper left
[23:30] *** curiosa39 left
[23:32] *** slowtype- left
[23:33] *** slowtyper joined
[23:36] <leont> Am i correct to assume that Supply.list (and friends) have the same semantics as await would have (with regard to switching tasks instead of truly blocking)

[23:41] *** slowtype- joined
[23:41] *** slowtyper left
[23:45] *** simcop2387 left
[23:45] *** perlbot left
[23:55] *** _________ left
[23:56] *** _________ joined
