[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:19] *** evalable6 joined
[00:19] *** committable6 joined
[00:20] *** releasable6 joined
[00:20] *** bloatable6 joined
[00:21] *** unicodable6 joined
[00:21] *** nativecallable6 joined
[00:21] <codesections> In fact, it looks like rakudo's Mu.new actually bypasses .bless and goes straight to .create in the happy path – so even faster than ^^^^

[00:22] <codesections> https://github.com/rakudo/rakudo/blob/1cd72f1b23c4ead3d71683f826cee64d8d7530d8/src/core.c/Mu.pm6#L115

[00:40] *** Sgeo_ joined
[00:40] *** Sgeo left
[01:19] *** sourceable6 joined
[01:47] *** swaggboi left
[01:55] *** swaggboi joined
[02:19] *** statisfiable6 joined
[02:31] <guifa_> codesections interestingly, when I had very high reps in my test, the custom .new was the winner by a lot

[02:32] <guifa_> well, I had one test where it won, but that assumed constant values rather than having different values each time around

[03:02] *** m_athias left
[03:03] *** m_athias joined
[03:20] *** tellable6 joined
[04:20] *** tellable6 left
[04:20] *** bloatable6 left
[04:20] *** nativecallable6 left
[04:20] *** bisectable6 left
[04:20] *** notable6 left
[04:20] *** benchable6 left
[04:20] *** unicodable6 left
[04:20] *** evalable6 left
[04:20] *** releasable6 left
[04:20] *** committable6 left
[04:20] *** reportable6 left
[04:20] *** shareable6 left
[04:20] *** linkable6 left
[04:20] *** coverable6 left
[04:20] *** statisfiable6 left
[04:20] *** greppable6 left
[04:20] *** squashable6 left
[04:20] *** quotable6 left
[04:20] *** sourceable6 left
[04:20] *** nativecallable6 joined
[04:20] *** shareable6 joined
[04:21] *** bisectable6 joined
[04:21] *** statisfiable6 joined
[04:22] *** bloatable6 joined
[04:22] *** greppable6 joined
[04:22] *** squashable6 joined
[04:25] *** frost joined
[05:20] *** quotable6 joined
[05:21] *** benchable6 joined
[05:22] *** coverable6 joined
[05:22] *** evalable6 joined
[05:22] *** sourceable6 joined
[06:22] *** bloatable6 left
[06:22] *** statisfiable6 left
[06:22] *** bisectable6 left
[06:22] *** squashable6 left
[06:22] *** quotable6 left
[06:22] *** sourceable6 left
[06:22] *** coverable6 left
[06:22] *** nativecallable6 left
[06:22] *** benchable6 left
[06:22] *** evalable6 left
[06:22] *** greppable6 left
[06:22] *** shareable6 left
[06:23] *** linkable6 joined
[06:23] *** coverable6 joined
[06:24] *** squashable6 joined
[06:24] *** quotable6 joined
[06:24] *** evalable6 joined
[06:25] *** nativecallable6 joined
[06:26] *** greppable6 joined
[07:10] *** reportable6 joined
[07:22] *** releasable6 joined
[07:23] *** committable6 joined
[07:23] *** shareable6 joined
[07:23] *** sourceable6 joined
[07:25] *** benchable6 joined
[07:25] *** bisectable6 joined
[08:21] *** unicodable6 joined
[08:21] *** tellable6 joined
[08:25] *** bloatable6 joined
[08:29] *** dogbert11 left
[08:57] *** dogbert11 joined
[09:18] *** Kaipi left
[09:19] *** Kaipi joined
[09:21] *** notable6 joined
[09:53] *** Sgeo_ left
[10:22] *** Darkcoal joined
[10:26] *** statisfiable6 joined
[10:41] *** Darkcoal left
[10:42] *** Darkcoal joined
[10:52] *** Darkcoal left
[10:54] *** Darkcoal joined
[10:58] *** Shane__ left
[10:59] <Geth> ¦ ecosystem: 233dd6a94f | (Elizabeth Mattijsen)++ | META.list

[10:59] <Geth> ¦ ecosystem: Remove XML, DateTime::TimeZone, DateTime::Math

[10:59] <Geth> ¦ ecosystem: 

[10:59] <Geth> ¦ ecosystem: They now live in the zef ecosystem

[10:59] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/233dd6a94f

[11:01] <Geth> ¦ ecosystem: f0632fca68 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[11:01] <Geth> ¦ ecosystem: Remove LWP::Simple

[11:01] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/f0632fca68

[11:19] <Geth> ¦ ecosystem: ece1ec8c18 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[11:19] <Geth> ¦ ecosystem: Freeze SOAP::Client

[11:19] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/ece1ec8c18

[11:29] *** oodani left
[11:31] *** oodani joined
[11:33] *** tejr left
[11:40] *** tejr joined
[12:07] *** reportable6 left
[12:10] *** reportable6 joined
[13:02] *** MoC joined
[13:36] *** MoC left
[13:43] *** timo joined
[14:02] *** frost left
[14:10] <Geth> ¦ App-Rakubrew/fix-par-env: 5eb2132b61 | (Patrick Böker)++ | 3 files

[14:10] <Geth> ¦ App-Rakubrew/fix-par-env: Fix PAR changing env vars on MacOS

[14:10] <Geth> ¦ App-Rakubrew/fix-par-env: review: https://github.com/Raku/App-Rakubrew/commit/5eb2132b61

[14:15] *** Altai-man joined
[14:20] *** Altai-man left
[14:52] * leont wrote a raku blogpost, and then accidentally closed that tab -_-

[14:56] <Geth> ¦ App-Rakubrew: 39ca617b01 | (Patrick Böker)++ | 3 files

[14:56] <Geth> ¦ App-Rakubrew: Fix PAR changing env vars on MacOS

[14:56] <Geth> ¦ App-Rakubrew: 

[14:56] <Geth> ¦ App-Rakubrew: On MacOS Rakubrew is deployed via the PAR packager. On MacOS rakubrew

[14:56] <Geth> ¦ App-Rakubrew: itself acts as the shim in `shim` mode. PAR adds environment variables and

[14:56] <Geth> ¦ App-Rakubrew: modifies the dynamic library loading path variable. Those changes can cause

[14:56] <Geth> ¦ App-Rakubrew: issues in the program being called. Thus we now try to revert the

[14:56] <Geth> ¦ App-Rakubrew: environment variables to their original state before doing `exec` in the

[14:56] <Geth> ¦ App-Rakubrew: <…commit message has 8 more lines…>

[14:56] <Geth> ¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/39ca617b01

[14:56] <Geth> ¦ App-Rakubrew: 463e5eda89 | (Patrick Böker)++ | lib/App/Rakubrew/VersionHandling.pm

[14:56] <Geth> ¦ App-Rakubrew: Switch shims to use symlinks instead of hardlinks

[14:56] <Geth> ¦ App-Rakubrew: 

[14:56] <Geth> ¦ App-Rakubrew: This change makes it possible to have the shim dir on a different partition

[14:56] <Geth> ¦ App-Rakubrew: than the rakubrew script.

[14:56] <Geth> ¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/463e5eda89

[15:17] <Geth> ¦ App-Rakubrew: f858e2681b | (Patrick Böker)++ | 4 files

[15:17] <Geth> ¦ App-Rakubrew: Version 27

[15:17] <Geth> ¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/f858e2681b

[15:23] *** linkable6 left
[15:23] *** evalable6 left
[15:25] *** linkable6 joined
[16:11] *** tejr left
[16:17] <discord-raku-bot> <Anton Antonov#7232> I want to make an outliers identifiers package (facilitates the identification of outliers in, say, numerical arrays or lists). What would be good name for it? Here are  possible names: 1) `Data::OutlierIdentifiers`  , 2) `Stats:OutlierIdentifiers` , 3) `ML::OutlierIdentifiers` .

[16:23] *** Darkcoal left
[16:23] *** evalable6 joined
[16:24] *** tejr joined
[16:25] *** Darkcoal joined
[16:41] *** sftp left
[16:43] *** sftp joined
[17:45] *** Sgeo joined
[17:53] <moritz> Math::Outliers?

[17:57] <discord-raku-bot> <Anton Antonov#7232> @mori#6536tz Hmm... that is clear and concise. But I think it hints too much on the results not the algorithms...

[18:00] <discord-raku-bot> <Anton Antonov#7232> Also, if a "general" (multi-type, multi-dimensional) outlier identifier (or anomaly detector) is made using Machine Learning (ML) algorithms, `Math::Outliers` a good place for it?

[18:00] <discord-raku-bot> <Anton Antonov#7232> I am browsing the packages under Math right now.

[18:02] <discord-raku-bot> <Anton Antonov#7232> Also, if a "general" (multi-type, multi-dimensional) outlier identifier (or anomaly detector) is made using Machine Learning (ML) algorithms, is`Math::Outliers` a good place for it?

[18:02] <discord-raku-bot> <Anton Antonov#7232> Also, if a "general" (multi-type, multi-dimensional) outlier identifier (or anomaly detector) is made using Machine Learning (ML) algorithms, is `Math::Outliers` a good place for it?

[18:05] <discord-raku-bot> <Anton Antonov#7232> Do any of those seem good? 1)  `Math::Outliers::1DIdentifiers`  2) `Math::Outliers::AnomalyDetectors`

[18:08] *** reportable6 left
[18:25] <guifa_> When in doubt, you can always change later.  The advantage with Raku is that you can provide the same module under two separate names, and with use Foo:auth<bar>, it's okay for two people to have the same name to a module

[18:25] <guifa_> Early in the ecosystem it's probably a bit hard to tell what the best organization/naming structure is

[18:29] <discord-raku-bot> <Anton Antonov#7232> @guifa_ Ok. Then I will go with the name most clear _and_ expected to me. (`Stats::OutlierIdentifiers` .)

[18:30] <guifa_> I'll actually be doing that fairly soon.  I have a module Intl::UserLanguage which made sense in the context of my international work

[18:31] <guifa_> but then as I made Intl::UserTimezone I realized that was starting to stretch it

[18:32] <guifa_> so I'm going to move them to a new namespace User:: or UserInfo:: where other similar get-info-about-user's-environment modules would fit in

[18:53] *** dextercd joined
[18:53] *** euandreh left
[18:55] *** euandreh joined
[19:07] *** euandreh left
[19:09] *** euandreh joined
[19:13] <guifa_> am I going crazy or did there used to be a thing about Hash subclasses not having BUILD called on them?

[19:13] *** euandreh left
[19:15] <lizmat> that's quite possible...

[19:17] <guifa_> aaaah there was

[19:17] <guifa_> but only when bless isn't called manually

[19:17] <guifa_> m: class A is Hash { method BUILD { self.BIND-KEY: "a", 1 }; method TWEAK { self.BIND-KEY: "b", 2 }; }; say A.new

[19:17] <camelia> rakudo-moar 1823cdade: OUTPUT: «{}␤»

[19:18] <guifa_> m: class A is Hash { method new { self.bless }; method BUILD { self.BIND-KEY: "a", 1 }; method TWEAK { self.BIND-KEY: "b", 2 }; }; say A.new

[19:18] <camelia> rakudo-moar 1823cdade: OUTPUT: «{a => 1, b => 2}␤»

[19:19] <lizmat> well, yeah, you could argue that there's a problem in core that .bless is not called for subclasses of Hash

[19:19] <lizmat> like it is e.g. done with Date / DateTime

[19:21] <guifa_> It's by design per https://github.com/rakudo/rakudo/issues/2716 

[19:22] <guifa_> It's easy enough to just add a .new or even directly call a .bless

[19:26] <guifa_> although tbh I had never thought of just directly call Foo.bless

[19:36] *** sena_kun left
[19:37] *** sena_kun joined
[19:52] <discord-raku-bot> <Anton Antonov#7232> @guifa_ Thank you for your input!

[20:00] <MasterDuke> guifa_: re your benchmark from earlier. you need to be carefull about running different things in the same script. there's a decent chance that spesh might optimize the first thing it sees, and depending on how similar the subsequent things are, you could run into a situation where the first thing is artificially faster, regardless of which one it

[20:00] <MasterDuke> it

[20:00] <MasterDuke> *it is

[20:06] *** euandreh joined
[20:10] *** reportable6 joined
[20:23] *** Shane__ joined
[20:50] *** jjido joined
[20:54] *** sena_kun left
[20:55] *** sena_kun joined
[21:26] *** Darkcoal left
[21:38] *** jjido left
[22:14] <guifa_> MasterDuke: yeah, I've noticed that sometimes, and occasionally upon reordering the advantage can shift

[22:15] <MasterDuke> i have a WIP moarvm PR to remove spesh candidates if they get too many deopts, which might help, but it's going to take me a little while to get it rebased after new-disp

[22:21] <discord-raku-bot> <gfldex#8222> @Anton Antonov#7232 In my eyes the description field in a meta6.json is more important than the name.

[22:27] *** MasterDuke left
[22:51] *** melezhik joined
[22:55] *** melezhik left
[23:03] *** MasterDuke joined
[23:20] *** Util joined
[23:41] *** discord-raku-bot left
[23:41] *** discord-raku-bot joined
