[00:01] *** swaggboi left
[00:13] *** swaggboi joined
[00:18] *** zacts joined
[00:52] *** zacts left
[00:57] <SmokeMachine> kawaii_: say [42] ~~ Array[Int]

[00:57] <SmokeMachine> m: say [42] ~~ Array[Int]

[00:57] <camelia> rakudo-moar 530e17848: OUTPUT: «False␤»

[00:58] <kawaii_> Ah I see, yes :)

[01:02] <Juerd> m: subset IntArray of Array where .all ~~ Int; say [42] ~~ IntArray;

[01:02] <camelia> rakudo-moar 530e17848: OUTPUT: «True␤»

[01:09] *** atweiden_air- joined
[01:11] <atweiden_air-> why does one file lib/A.rakumod containing `role A['a'] {}; role A['b'];` pose no issue with downstream usage whereas splitting this file into lib/Aa.rakumod containing `unit role A['a'] {}` and lib/Ab.rakumod containing `unit role A['b'] {}` throw P6M Merging GLOBAL symbols failed: duplicate definition of symbol Replace

[01:12] <atweiden_air-> s/Replace/A

[01:26] <atweiden_air-> golfed https://github.com/atweiden/golf

[01:32] *** japhb left
[01:35] *** japhb joined
[01:46] <atweiden_air-> Is the only workaround not parameterizing the unit roles?

[02:01] *** nine left
[02:01] *** m_athias left
[02:02] *** nine joined
[02:02] *** m_athias joined
[02:58] *** xinming left
[02:59] *** xinming joined
[03:35] *** guifa joined
[04:11] *** perlbot left
[04:11] *** simcop2387 left
[04:19] *** zacts joined
[04:26] *** lockywolf left
[04:33] *** lockywolf joined
[04:40] <atweiden_air-> solved https://github.com/atweiden/golf/commit/5c9c7935ce980540a1c12603d318c29c3b3f1162

[04:45] *** atweiden_air- left
[04:49] *** zacts left
[05:30] <Geth> ¦ doc: 9930cf5d20 | (Patrick Böker)++ (committed using GitHub Web editor) | doc/Language/modules.pod6

[05:30] <Geth> ¦ doc: Give the more obvious answer to "Where are bin/ scipts installed?" (#4046)

[05:30] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/9930cf5d20

[06:05] *** mexen joined
[06:18] *** perlbot joined
[06:21] *** simcop2387 joined
[06:30] *** abraxxa joined
[06:35] *** abraxxa left
[06:36] *** jmcgnh left
[06:36] *** abraxxa joined
[06:39] *** kjp_ left
[06:41] *** jmcgnh joined
[06:42] *** Sgeo left
[06:55] *** kjp joined
[08:03] *** dakkar joined
[08:07] *** jmcgnh left
[08:09] *** jmcgnh joined
[08:23] <patrickb> melezhik: I think one possible route is to move over to DB::MySQL which maintains a connection pool.

[08:57] *** solitario left
[08:59] *** jjido joined
[09:00] *** MitarashiDango[m left
[09:00] *** jjido left
[09:09] *** _________ left
[09:12] *** Oshawott left
[09:12] <Altreus> japhb: meh, this is for me, and the maths is easier if the week starts at 1

[09:12] <Altreus> And the maths was weirdly not very easy

[09:22] *** jjido joined
[09:42] *** ggoebel left
[10:18] *** solitario joined
[10:36] *** jjido left
[11:02] *** ggoebel joined
[11:11] *** archenoth joined
[11:22] *** ggoebel left
[11:30] *** razetime joined
[11:31] *** ggoebel joined
[11:47] *** simcop2387 left
[11:48] *** simcop2387 joined
[12:03] *** synthmeat left
[12:13] *** ggoebel left
[12:23] *** synthmeat joined
[12:55] *** ggoebel joined
[13:00] *** jjido joined
[13:12] <Altreus> Where are raku's own options documented? Equivalent of perldoc perlrun?

[13:12] <Altreus> I tried rakurun :D

[13:17] <lizmat> raku --help ?

[13:17] <Altreus> o, I tried man raku and gave up :D

[13:17] <Altreus> forgot about basic functions -_-

[13:39] <Altreus> in repeat/while, can the condition see variables lexical to the repeat block?

[13:40] <lizmat> I think so?

[13:40] * Altreus TIAS

[13:40] <ugexe> m: while my $x = 42 { last; }; say $x

[13:40] <camelia> rakudo-moar 530e17848: OUTPUT: «42␤»

[13:41] <ugexe> oops i guess thats the exact opposite

[13:41] <Altreus> m: repeat { my $x = 42 } while $x > 50;

[13:41] <camelia> rakudo-moar 530e17848: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$x' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> repeat { my $x = 42 } while ⏏$x > 50;␤»

[13:41] <Altreus> :(

[13:41] <Altreus> leaky scope

[13:41] <Altreus> that's OK, the outer scope is small here

[13:57] *** jjido left
[14:09] <Altreus> Hmm, the .? methodop doesn't work if it's an attribute on a type object

[14:13] <lizmat> example?

[14:16] <Altreus> m: DateTime.?day

[14:16] <camelia> rakudo-moar 530e17848: OUTPUT: «Cannot look up attributes in a DateTime type object. Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[14:16] <Altreus> m: Nil.?day

[14:16] <camelia> rakudo-moar 530e17848: ( no output )

[14:17] <Altreus> Seems like "I would have this if I were instantiated" overrides "maybe you don't have this"

[14:17] <lizmat> m: DateTime.day

[14:17] <camelia> rakudo-moar 530e17848: OUTPUT: «Cannot look up attributes in a DateTime type object. Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[14:19] <lizmat> m: class A { has $.a }; A.a

[14:19] <camelia> rakudo-moar 530e17848: OUTPUT: «Cannot look up attributes in a A type object. Did you forget a '.new'?␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:19] <lizmat> the underlying issue, to an extent

[14:19] <lizmat> not sure why the accessor is not generated with a :D check on the invocant

[14:20] <lizmat> m: class A { has $.a }; dd A.^find_method("a")   # hmmm... the signature says it is?

[14:20] <camelia> rakudo-moar 530e17848: OUTPUT: «Method a = method a (A:D: *%_) { #`(Method|5973966464984) ... }␤»

[14:21] <lizmat> m: class A { has $.a; method a(A:D:) { 42 } }; dd A.a  # signature does not match reality

[14:21] <camelia> rakudo-moar 530e17848: OUTPUT: «Invocant of method 'a' must be an object instance of type 'A', not a␤type object of type 'A'.  Did you forget a '.new'?␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:57] *** stanrifkin joined
[14:57] <stanrifkin> is there something similar to perl's Math::Prime::Util in raku?

[14:59] *** Sgeo joined
[14:59] <lizmat> not that I know of

[15:00] <lizmat> shouldn't be too hard to port https://metacpan.org/pod/Math::Prime::Util::PP to Raku  :-)

[15:01] <lizmat> especially since a lot of the bigint / bigfloat handling is built into Raku  :-)

[15:01] <stanrifkin> lizmat: but not gmp or?

[15:02] <stanrifkin> lizmat: can't i simply use that perl module in raku? never done that

[15:02] <lizmat> possibly... there's even a MoarVM branch to use libgmp internally, which would make things even simpler

[15:02] <lizmat> stanrifkin: that you can do also: https://raku.land/cpan:NINE/Inline::Perl5

[15:02] *** discord-raku-bot left
[15:03] <lizmat> .oO( another plan thwarted to get a module ported :-)

[15:03] *** discord-raku-bot joined
[15:07] *** morte_ joined
[15:08] *** lichtkind joined
[15:13] *** djerius left
[15:15] *** djerius joined
[15:16] <stanrifkin> get an error when installing Inline::Perl5

[15:17] <stanrifkin> relocation R_X86_64_PC32 against symbol `PL_opargs' can not be used when making a shared object; recompile with -fPIC

[15:17] <stanrifkin> something wrong with the newest perl5.34.1 and raku distributions?

[15:18] <stanrifkin> i use perlbrew and it seems that the archive libperl.a is not compiled with -fPIC

[15:23] <drakonis> https://github.com/rakudo/rakudo/issues/4835 huh well.

[15:25] <stanrifkin> nothing to do with tail call optimization. I didn't realize raku doesn't have that.

[15:26] <stanrifkin> ok perl has no TCO either... i see

[15:27] * lizmat still fails to understand why some people seem to dismiss a language because it does not appear to have tail call optimizations

[15:27] <lizmat> whereas Raku has a more general automatic inlining of hot code

[15:29] <ugexe> i wonder how many people who proclaim such a desire for TCO have actually blown a stack before

[15:29] <ugexe> dont get me wrong, having TCO would be awesome

[15:31] <stanrifkin> lizmat: some problems are recursive naturally and hard or not possible iterative. but that doesn't mean someone "dismiss" a language because of the lack of TCO

[15:32] <Altreus> Is this normal? In month-as-table, if I do it this way, all weeks are the same; presumably the assignment to @week is done by reference and the @month array therefore gets changed --> https://gist.github.com/Altreus/8d797886a34afe219762f08d6719c899

[15:32] <El_Che> doesn't perl stops you at 100 recursive loop?

[15:32] <stanrifkin> lizmat: but when i think about it. TCO possible problems should be no recursive either.

[15:33] <Altreus> But if I use gather/take, it works as expected (gist updated)

[15:33] <Altreus> I didn't expect any reference behaviour here at all

[15:34] <ugexe> did you mean to use append?

[15:34] <ugexe> i guess not

[15:34] <Altreus> no I want an AoA

[15:34] <Altreus> I mean, I do prefer gather/take!

[15:37] *** _________ joined
[15:37] <drakonis> oops, i derailed the topic

[15:38] <drakonis> i've seen someone dismiss raku over no tco

[15:38] <stanrifkin> drakonis: and used instead?

[15:39] <drakonis> hmm, this person used python at the time

[15:39] <drakonis> which doesn't have tco either

[15:40] <stanrifkin> darkonis: says it all :)

[15:40] <ugexe> I wanted atomics in raku, so I paid someone to implement them

[15:40] <drakonis> hmm, time to pay someone for tco

[15:40] <ugexe> exactly >:)

[15:41] *** p6steve left
[15:43] <[Coke]> I would chip in a few bucks for that. (if anyone has a plan, could submit a grant to YAS also)

[15:44] *** committable6 joined
[15:44] *** bisectable6 joined
[15:44] *** sourceable6 joined
[15:44] <drakonis> YAS?

[15:44] *** bisectable6 left
[15:45] *** quotable6 joined
[15:45] *** coverable6 joined
[15:45] *** linkable6 joined
[15:45] <[Coke]> https://www.perlfoundation.org/

[15:45] <[Coke]> I was avoiding the "perl" name variant, but it's the one most people know.

[15:46] *** notable6 joined
[15:46] <[Coke]> e.g. https://news.perlfoundation.org/post/grant_proposals_march_2022

[15:46] *** nativecallable6 joined
[15:46] *** releasable6 joined
[15:46] *** bloatable6 joined
[15:47] *** reportable6 joined
[15:47] *** bisectable6 joined
[15:52] *** Guest3345 joined
[15:54] *** Guest3345 left
[15:57] *** Papercombo joined
[16:00] <drakonis> oh i see

[16:01] *** Papercombo left
[16:09] <stanrifkin> someone have got an working Inline::Perl5 module?

[16:10] *** jgaz joined
[16:11] *** linkable6 left
[16:13] <stanrifkin> got it working with the default installed perl but not with the newest perlbrew perl-5.34.1

[16:14] *** linkable6 joined
[16:14] <Altreus> japhb: I made this; dunno if it helps you any https://gist.github.com/Altreus/17359580fbfcedd703ccc12e05741324

[16:29] <japhb> Altreus: Thank you.

[16:29] *** jjido joined
[16:43] *** razetime left
[16:45] <jdv> anarchy in the uk?

[16:46] <jdv> wrong chan:(

[16:47] <Altreus> wrong japh

[16:50] *** dakkar left
[16:56] *** melezhik joined
[16:56] <melezhik> .

[16:57] <melezhik> Hi. let me know if someone is interested in trying out sparkyci

[16:59] <Altreus> qué

[17:01] *** melezhik left
[17:02] *** mexen left
[17:06] <Altreus> Now I just need to figure out how to output that table in such a way that I can put fields next to each date and navigate to those fields in the terminal!

[17:08] <Altreus> Maybe Terminal::UI

[17:20] *** melezhik joined
[17:21] *** melezhik left
[17:25] *** melezhik joined
[17:28] <stanrifkin> Altreus: and output it to an CVS file? Terminal only?

[17:29] *** melezhik left
[17:29] <Altreus> Currently I'm just outputting the result to the terminal... With Terminal::UI, I could feasibly just output it to another pane

[17:35] *** melezhik joined
[17:39] *** melezhik left
[17:39] *** jgaz left
[17:51] *** melezhik joined
[17:53] *** melezhik left
[18:05] *** melezhik joined
[18:06] *** abraxxa left
[18:08] *** melezhik left
[18:10] *** guifa left
[18:16] *** reportable6 left
[18:17] *** reportable6 joined
[18:20] *** casaca joined
[18:35] *** p6steve joined
[18:38] *** n1to joined
[18:43] *** guifa joined
[18:44] <p6steve> lichtkind: I see this https://lichtkind.de/vortrag but not the Plotten mit raku deck - kanst du bitte mitteilen?

[18:45] *** melezhik joined
[18:49] *** melezhik left
[18:52] <lichtkind> p6steve: yes it developed into pure perl talk partially becasue the big modules on rakku org are wrapper for same libs but most of talk is dataprep theory math and design anyway

[18:52] <lichtkind> and becasue raku is missing some the math i needed

[18:53] <lichtkind> which is in smaller part my fault

[18:53] *** melezhik joined
[18:53] <stanrifkin> lichtkind: do you use this kephra editor?

[18:53] <lichtkind> im the author but i use it too

[18:55] <stanrifkin> nice website. i'll take a look at these wx tutorials.

[18:56] <lichtkind> you mean lichtkind.de?

[18:56] <stanrifkin> yes

[18:57] <lichtkind> its like a buisnesscard :) not much design, but thanks for compliment

[18:57] <stanrifkin> content matters right?

[18:58] <lichtkind> exactly

[19:00] <stanrifkin> did some c++ wxwidget stuff. but experimenting things out with perl seems like a good idea. can than implement it later in c++.

[19:00] <lichtkind> then you look into xrc

[19:00] <lichtkind> you c++ app loads same xrc file and looks same

[19:00] <lichtkind> also helps with i18n

[19:01] <stanrifkin> ok i see. 

[19:04] *** melezhik left
[19:09] *** melezhik joined
[19:09] <melezhik> .

[19:13] *** melezhik left
[19:18] *** melezhik joined
[19:20] *** melezhik left
[20:00] *** statisfiable6 joined
[20:01] *** bisectable6 left
[20:02] *** bisectable6 joined
[20:03] *** benchable6 joined
[20:03] *** squashable6 joined
[20:03] *** unicodable6 joined
[20:04] *** evalable6 joined
[20:04] *** evalable6 left
[20:04] *** benchable6 left
[20:04] *** bisectable6 left
[20:04] *** squashable6 left
[20:04] *** statisfiable6 left
[20:04] *** releasable6 left
[20:04] *** linkable6 left
[20:04] *** coverable6 left
[20:04] *** quotable6 left
[20:04] *** bloatable6 left
[20:04] *** notable6 left
[20:04] *** unicodable6 left
[20:04] *** sourceable6 left
[20:04] *** nativecallable6 left
[20:04] *** reportable6 left
[20:04] *** committable6 left
[20:04] *** linkable6 joined
[20:04] *** sourceable6 joined
[20:04] *** squashable6 joined
[20:04] *** greppable6 joined
[20:05] *** reportable6 joined
[20:05] *** statisfiable6 joined
[20:05] *** shareable6 joined
[20:05] *** notable6 joined
[20:05] *** coverable6 joined
[20:05] *** evalable6 joined
[20:06] *** committable6 joined
[20:06] *** unicodable6 joined
[20:06] *** nativecallable6 joined
[20:06] *** squashable6 left
[20:07] *** quotable6 joined
[20:07] *** bloatable6 joined
[20:07] *** benchable6 joined
[20:07] *** bisectable6 joined
[20:07] *** releasable6 joined
[20:51] <lucs> Hmm... Took me a while to figure out:

[20:51] <lucs> for ^42 { foo(); bar(); } # foo() is evaluated in sink context, but bar() is not, not sure why...

[20:58] <discord-raku-bot> <Nemokosch#9980> is it the last statement of your function?

[20:58] <discord-raku-bot> <Nemokosch#9980> idk how exactly it works but bar() is not in sink context probably because it's the last statement in some scope

[20:58] <discord-raku-bot> <Nemokosch#9980> therefore its return value is propagated

[20:59] <lucs> Yeah, that's kind of what I suspected, but I'm not sure where exactly the value is propagated to.

[21:00] *** melezhik joined
[21:01] <lucs> (It doesn't sink when it's the last statement in the block here.)

[21:02] *** melezhik left
[21:02] *** melezhik joined
[21:03] <melezhik> patrickb I've created a prototype for sparkyci - http://sparrowhub.io:2222 so you can check it out and see the idea - please let me know if you have any thoughts ...

[21:03] <melezhik> I think what else besides test coverage would be interesting to add as CI part for a regular Raku project?

[21:04] <melezhik> maybe license checks? not sure 🤔 if it fits opensource projects requirements ...

[21:05] <melezhik> another though - check pod syntax linter , but maybe not everyone uses pod now, many docs - just markdown ...

[21:05] <melezhik> code security vulnerabilities checks?

[21:13] *** melezhik left
[21:17] <lucs> Yucky, but I can make sure bar() gets evaluated in sink context (because it may generate a Failure whose exception I want to be thrown) by doing:

[21:17] <lucs> for ^42 { foo(); bar(); next; }

[21:17] <guifa> you can also force sink context by just prefixing with sink

[21:17] <guifa>  for ^42 { foo(); sink bar(); }

[21:17] <lucs> Aha! I knew there must have been a better way :)

[21:18] <lucs> Thanks.

[21:23] *** lichtkind left
[21:33] <patrickb> melezhik: This looks really nice.

[21:33] <patrickb> melezhik: I'd focus on usability.

[21:34] <patrickb> Getting it up and running as simple as possible.

[21:34] <patrickb> GitHub / GitLab / SourceHut integration.

[21:34] <patrickb> Simple configuration

[21:34] * patrickb is off to bed now.

[21:36] *** jjido left
[21:40] *** melezhik joined
[21:45] *** melezhik left
[22:10] *** n1to left
[22:28] *** zacts joined
[22:34] *** tejr left
[22:36] *** jgaz joined
[22:36] *** tejr joined
[22:38] *** discord-raku-bot left
[22:38] *** discord-raku-bot joined
[22:38] *** gfldex left
[22:41] *** gfldex joined
[22:44] *** discord-raku-bot left
[22:45] <gfldex> m: my $result = do for ^1 { 42 }; dd $result;

[22:45] <camelia> rakudo-moar 530e17848: OUTPUT: «List $result = $(42,)␤»

[22:45] *** discord-raku-bot joined
[22:55] *** zacts left
[23:01] *** morte_ left
[23:05] *** jgaz left
[23:26] *** epony joined
[23:42] *** melezhik joined
[23:44] *** melezhik left
[23:50] <lucs> gfldex: Ah, gotcha, thanks.

[23:51] <moon-child> m: my $x = gather for ^1 { take 42 }; dd $x

[23:51] <camelia> rakudo-moar 530e17848: OUTPUT: «Seq $x = $((42,).Seq)␤»

[23:52] <moon-child> m: my $x = eager gather for ^1 { take 42 }; dd $x

[23:52] <camelia> rakudo-moar 530e17848: OUTPUT: «List $x = $(42,)␤»

