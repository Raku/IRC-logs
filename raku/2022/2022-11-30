[00:00] *** deoac left
[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:14] *** Kaiepi left
[00:21] *** sortiz left
[00:21] *** sortiz joined
[00:36] *** habere-et-disper joined
[00:45] <discord-raku-bot> <Anton Antonov> I tried to set up GitHub blog posting, but was too hard (for me.) So, I stuck with WordPress.

[01:09] <discord-raku-bot> <Nemokosch> :DDD

[01:22] *** habere-et-disper left
[01:22] <Geth> ¬¶ advent: 5d14dc3e01 | (Alexey Melezhik)++ (committed using GitHub Web editor) | raku-advent-2022/authors.md

[01:22] <Geth> ¬¶ advent: Second part of SparrowCI pipelines posts

[01:22] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/5d14dc3e01

[01:42] *** MasterDuke left
[02:10] *** rinkydink is now known as kerframil

[02:12] *** kerframil is now known as tirnanog

[03:12] *** linkable6 left
[03:12] *** evalable6 left
[03:12] *** shareable6 left
[03:12] *** squashable6 left
[03:12] *** nativecallable6 left
[03:12] *** tellable6 left
[03:12] *** committable6 left
[03:12] *** sourceable6 left
[03:12] *** bloatable6 left
[03:12] *** statisfiable6 left
[03:12] *** coverable6 left
[03:12] *** greppable6 left
[03:12] *** unicodable6 left
[03:12] *** benchable6 left
[03:12] *** notable6 left
[03:12] *** bisectable6 left
[03:12] *** quotable6 left
[03:12] *** releasable6 left
[03:12] *** reportable6 left
[03:12] *** unicodable6 joined
[03:12] *** greppable6 joined
[03:12] *** shareable6 joined
[03:12] *** evalable6 joined
[03:13] *** releasable6 joined
[03:13] *** quotable6 joined
[03:13] *** sourceable6 joined
[03:13] *** linkable6 joined
[03:13] *** bloatable6 joined
[03:13] *** squashable6 joined
[03:13] *** notable6 joined
[03:13] *** reportable6 joined
[03:14] *** bisectable6 joined
[03:14] *** benchable6 joined
[03:14] *** tellable6 joined
[03:14] *** statisfiable6 joined
[03:14] *** committable6 joined
[03:15] *** nativecallable6 joined
[03:15] *** coverable6 joined
[03:16] *** razetime joined
[03:46] *** Kaiepi joined
[04:04] *** derpydoo left
[04:47] *** oodani left
[04:50] *** oodani joined
[05:50] *** benchable6 left
[05:50] *** committable6 left
[05:50] *** nativecallable6 left
[05:50] *** statisfiable6 left
[05:50] *** evalable6 left
[05:50] *** greppable6 left
[05:50] *** shareable6 left
[05:50] *** bloatable6 left
[05:50] *** sourceable6 left
[05:50] *** reportable6 left
[05:50] *** bisectable6 left
[05:50] *** unicodable6 left
[05:50] *** squashable6 left
[05:50] *** tellable6 left
[05:50] *** linkable6 left
[05:50] *** evalable6 joined
[05:51] *** benchable6 joined
[05:51] *** greppable6 joined
[05:51] *** bisectable6 joined
[05:51] *** reportable6 joined
[05:51] *** nativecallable6 joined
[05:51] *** statisfiable6 joined
[05:51] *** sourceable6 joined
[05:51] *** bloatable6 joined
[05:52] *** shareable6 joined
[05:52] *** tellable6 joined
[05:53] *** squashable6 joined
[05:53] *** linkable6 joined
[05:53] *** committable6 joined
[05:53] *** unicodable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:10] *** goblin left
[06:10] *** goblin joined
[06:41] <CIAvash> I already suggested this but since the talk about blog and markdown has arose again, the website I created for Raku is a static site generator that uses Hugo which supports markdown and uses chroma syntax highlighter which supports Raku. One problem people might have with it, is that it is not written in Raku. You can either use the website and host it directly and/or I can create a blog and use CNAME records to point it to the address you want.

[06:41] <CIAvash> https://www.raku-lang.ir/en/ https://github.com/CIAvash/raku-website

[06:56] *** Jamiu joined
[06:57] <Jamiu> Hello all

[06:57] *** Jamiu left
[07:11] *** abraxxa joined
[07:16] *** abraxxa left
[07:16] *** abraxxa joined
[07:30] *** epony left
[07:30] *** epony joined
[07:52] <Geth> ¬¶ problem-solving: JJ assigned to codesections Issue Choose some precise (or rough) way to "adopt" modules in the Raku Module Adoption center https://github.com/Raku/problem-solving/issues/355

[08:09] *** ProperNoun left
[08:14] *** epony left
[08:20] *** epony joined
[08:29] *** sarna left
[08:41] *** sena_kun joined
[08:57] *** Sgeo left
[08:58] *** sena_kun left
[09:01] *** sena_kun joined
[09:02] *** dakkar joined
[09:43] <discord-raku-bot> <Nemokosch> RE: raku-lang.ir site - I kept asking about this site for months, nobody seemed to care. Now that I made up my mind that apparently it's not being adopted, and started mangling with the current raku.org site, I don't want it to be taken over.

[09:49] *** ToddAndMargo joined
[09:59] *** lichtkind_ joined
[10:06] *** ToddAndMargo left
[10:06] *** ToddAndMargo joined
[10:07] <ToddAndMargo> Anyone on newbie duty?¬† :-)

[10:07] <ToddAndMargo> I posted my NativeCall question over on http://vpaste.net/yVh5l

[10:10] *** sarna joined
[10:12] *** sarna left
[10:12] *** sarna joined
[10:14] <discord-raku-bot> <Nemokosch> Jamiu: what's up

[10:14] <discord-raku-bot> <Nemokosch> this name is new to me

[10:20] <CIAvash> Yeah, I'm not talking about adoption, but using it for blogs(advent, core, community blogs). But it seems people are not interested in that either ü§∑

[10:21] *** sena_kun left
[10:22] *** sena_kun joined
[10:29] *** sena_kun left
[10:34] <discord-raku-bot> <Nemokosch> Yes well, communication is sloppy somehow.

[10:35] <discord-raku-bot> <Nemokosch> Don't take it as a judgement of your work; this topic inherently has more bikeshedding than actual collaborative work.

[10:37] *** sarna left
[10:38] *** sarna joined
[10:38] <discord-raku-bot> <Nemokosch> let me bring up my Raku-related "sketchboard" repo, especially Biggest Wishes and Issues but everything is public; just not necessarily interesting üòÑ

[10:38] <discord-raku-bot> <Nemokosch> https://github.com/2colours/Raku-ideas

[10:40] *** sarna left
[10:41] *** sarna joined
[10:48] <ToddAndMargo> I will post my question over on the mailing list too

[10:49] *** sarna left
[10:49] <Geth> ¬¶ ecosystem/main: 0e123bc3c6 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[10:49] <Geth> ¬¶ ecosystem/main: Moved to zef ecosystem

[10:49] <Geth> ¬¶ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/0e123bc3c6

[10:49] *** sarna joined
[10:55] *** linkable6 left
[10:57] *** linkable6 joined
[11:16] *** ToddAndMargo left
[11:22] *** sena_kun joined
[11:45] *** epony left
[11:49] *** sgrs joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:02] <tbrowder> CVIvash: how much effort would it take to make that website

[12:04] <Geth> ¬¶ advent: massa++ created pull request #103: Massa's article

[12:04] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/pull/103

[12:04] <discord-raku-bot> <Nemokosch> what is a Callable[Int]? In general, what is the parameter of the Callable role for?

[12:04] <tbrowder> into something roughly approximating the current advent site? i remember seeing it some time ago--looks nice.

[12:07] <tbrowder> CIAvash: can you think of a way to hook up a publish-on-schedule list?

[12:13] <tbrowder> <Nemokosch> i like the idea of porting Text::Word::Extract, but i would vote for a rename. i've seen it before on searches but the Word part never caught my eye as being MS Word. but good tags would help for sure

[12:14] <tbrowder> text-extract-word

[12:16] <tbrowder> Text::Extract::MSWord or MSWord::Extract or MSWord::Tools or Word::Utils ...

[12:17] <tbrowder> anyhow, great idea, very useful like the Excel modules

[12:19] <discord-raku-bot> <Nemokosch> tbrowder: noted

[12:22] <tbrowder> CIAvash: some of tonyo's fez plumbing for user accounts might be useful, also ugexe's zef plumbing as well

[12:25] <CIAvash> <tbrowder> "into something roughly approxima..." <- You mean visually or the blog(functionality) itself?

[12:26] *** epony joined
[12:28] <tbrowder> mostly the functionality. i pesonally liked the visiual format of the original site

[12:28] <CIAvash> <tbrowder> "CIAvash: can you think of a..." <- I think the way to go about it would be specifying the date for the blog post for when it's going to be published and then a GitHub action for periodically building the website. I think posts with future dates won't be published by default, so when the time is right they will

[12:29] <tbrowder> and you can count on my support and help if you are willing and the RSC approves

[12:30] <tbrowder> yes, using github actions sounds good!

[12:31] <sortiz> Nemokosch, Is used to set the "returns" property of a "synthetic" Callable as normal ones takes it from its signature.

[12:32] <tbrowder> FYI, the raku-advent.blog domain name belongs to us

[12:32] <CIAvash> functionality-wise I think it's ready to be used, except for the comments section, if that is necessary an external tool needs to be used(since it's a static site)

[12:33] <sortiz> m: sub foo(-->Int) { 6 }; say &foo.returns; say foo();

[12:33] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´(Int)‚ê§6‚ê§¬ª

[12:34] <discord-raku-bot> <Nemokosch> oh interesting. Let me see if it works with what I'm trying to check. üòõ

[12:35] <sortiz> m: class Adder does Callable[Int] { has $.toadd; submethod CALL-ME($a) { $a + self.toadd  } }; my &add6 = Adder.new(6); say add6(3); say &add6.returns;

[12:35] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´Default constructor for 'Adder' only takes named arguments‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:35] <discord-raku-bot> <Nemokosch> > my Int &foo = sub bar(-->Int) { 6 };  # this actually works

[12:35] <sortiz> m: class Adder does Callable[Int] { has $.toadd; submethod CALL-ME($a) { $a + self.toadd  } }; my &add6 = Adder.new(:6toadd); say add6(3); say &add6.returns;

[12:35] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´9‚ê§(Int)‚ê§¬ª

[12:36] <tbrowder> the current comment part i think would be better used if were easier to comment. i'm always in a hurry and can't seem to have time to go through another login process

[12:36] *** Nemokosch joined
[12:37] <Nemokosch> \o :P

[12:37] <tbrowder> o/ ;-D

[12:38] <Nemokosch> m: my Int &foo = -> --> Int { 6 };

[12:38] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´Type check failed in assignment to &foo; expected Callable[Int] but got Block (->  --> Int { #`(Blo...)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:38] <Nemokosch> sortiz: do you know why this fails?

[12:40] <Nemokosch> m: my Int &foo = sub bar(--> Int) { 6 };

[12:40] <camelia> rakudo-moar 1e30b43c0: ( no output )

[12:40] <Nemokosch> this works

[12:41] <tbrowder> i'll bet tonyo or melezhik could get a commenting system for it

[12:45] <CIAvash> Hugo has support for [Disqus](https://disqus.com/), but there are other alternatives: https://gohugo.io/content-management/comments/

[12:45] <sortiz> m:  my &foo = -> --> Int { 6 }; say &foo.returns; # Works too.

[12:45] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´(Int)‚ê§¬ª

[12:45] <Nemokosch> tbh I kinda hope this advent blog topic can settle and maybe CIAvash++ can collect some social credits finally; I myself couldn't fully appreciate multiple of his otherwise decent and functional solutions

[12:47] <Geth> ¬¶ advent: 141b632389 | (Humberto Massa)++ | raku-advent-2022/articles/hyperCro.md

[12:47] <Geth> ¬¶ advent: Massa's article

[12:47] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/141b632389

[12:47] <Geth> ¬¶ advent: a3588c4458 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | raku-advent-2022/articles/hyperCro.md

[12:47] <Geth> ¬¶ advent: Merge pull request #103 from massa/master

[12:47] <Geth> ¬¶ advent: 

[12:47] <Geth> ¬¶ advent: Massa's article

[12:47] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/a3588c4458

[12:47] <tbrowder> CIAvash: i really would like to be able to write a blog in any reasonably familiar language that would not get scrambled as soon it's sucked into it's maw

[12:47] <Nemokosch> sortiz: the more interesting it is that the type check failed there. Apparently it does know the return type.

[12:48] <Nemokosch> Could be that this is simply a bug.

[12:48] <sortiz> Can be.

[12:49] <sortiz> m: class Adder does Callable[Int] { has $.toadd; submethod CALL-ME($a) { $a + self.toadd  } }; my Int &add2 = Adder.new(2); say add2(2):

[12:49] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´Default constructor for 'Adder' only takes named arguments‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:49] <sortiz> m: class Adder does Callable[Int] { has $.toadd; submethod CALL-ME($a) { $a + self.toadd  } }; my Int &add2 = Adder.new(:2toadd); say add2(2):

[12:49] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´4‚ê§¬ª

[12:50] <Nemokosch> so the type annotation makes sense for &variables as well, it does have a concept for it

[12:51] <CIAvash> Interesting it seems there is even a comment system based on GitHub issues: https://utteranc.es/

[12:51] <tbrowder> *its maw (e.g., wordpress)

[12:53] <tbrowder> CIAvash: is there a cost for it?

[12:56] <sortiz> Nemokosch, fill a rakudo bug for the Block case.

[12:58] <Nemokosch> sortiz: okay, thank you; I'm collecting the conclusions

[12:59] <CIAvash> It's seems to be an open source and free javascript widget that uses the GitHub issues API for submitting and showing comments

[13:00] <Nemokosch> oh by the way, one more thing

[13:00] <tbrowder> CIAvash: it looks free to use from what i just saw! this all sounds pretty good to me

[13:01] <Nemokosch> m: my Int @foo; my Int &foo; dd @foo, &foo;

[13:01] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´Array[Int @foo = Array[Int].new()‚ê§Callable &foo = Callable‚ê§¬ª

[13:03] <sortiz> And the question is?

[13:04] <Nemokosch> the variable seems to preserve the annotated type with the assignment (see next snippet soon), however it sets something that doesn't have a parameter

[13:04] <discord-raku-bot> <Anton Antonov> I have a question for tbrowder, lizmat, guifa, XLiff, timitimo, ugexe -- Do you mind if I use your handles in articles / presentations discussing statistics like this one: https://i.imgur.com/6KSaaSD.png ? (Right now I obfuscate them.)

[13:05] <Nemokosch> m: my Int &foo; &foo = sub(-->Str) { 'qux' }

[13:05] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> my Int &foo; &foo = sub(‚èè-->Str) { 'qux' }‚ê§    expecting any ‚Ä¶¬ª

[13:05] <Nemokosch> oops

[13:06] <Nemokosch> m: my Int &foo; &foo = sub (-->Str) { 'qux' }

[13:06] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´Type check failed in assignment to &foo; expected Callable[Int] but got Sub+{Callable[Str]} (sub ( --> Str) { #`(...)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:06] <CIAvash> tbrowder: as for writing blog posts, Hugo supports Markdown, HTML, org-mode, AsciiDoc, RST and Pandoc: https://gohugo.io/content-management/formats/

[13:06] <sortiz> Unexpected?

[13:07] <Nemokosch> so yes, the type constraint lives; how can it be that the default value doesn't follow it?

[13:07] <Nemokosch> for an Array, it would

[13:07] <discord-raku-bot> <Anton Antonov> I have heard about Hugo "notebooks" even ...

[13:08] <discord-raku-bot> <Nemokosch> <@694526400488669234> goforprediction when?

[13:09] <discord-raku-bot> <Anton Antonov> üôÇ no, I decided to stop at mathematic-, raku-, and pythonforprediction . But I should have probably chosen the name "goforpediction" 9 years ago...

[13:09] <tbrowder> <Anton Antonov>: feel free to use my handle @tbrowder

[13:10] <sortiz> m:  my Int @foo; @foo[3] = 'foo'; # For Array the type constraint is for the containers.

[13:10] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´Type check failed for an element of @foo; expected Int but got Str ("foo")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:10] <discord-raku-bot> <Anton Antonov> <@755062053282119803> Great!

[13:11] <Nemokosch> <@755062053282119803> would be @tbrowder :P

[13:12] <Nemokosch> ortiz: yes, and for Callable, the type constraint is (apparently) for .returns

[13:12] <Nemokosch> m: my Int &foo; say &foo.returns

[13:12] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´(Mu)‚ê§¬ª

[13:13] <Nemokosch> except when it leaks :P

[13:14] <sortiz> In `my Int &foo`, &foo is constrained but not defined yet.

[13:15] <sortiz> m: my Int &foo; say &foo.VAR.of;

[13:15] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´(Callable[Int])‚ê§¬ª

[13:16] <sortiz> BTW `&foo` is an Scalar container.

[13:17] <tbrowder> CIAvash: have you used Hugo for any other static sites?

[13:18] <tbrowder> i'm looking for a

[13:19] <sortiz> An as soon as you (successfully) assign some Callable to it, &foo.returns has it proper value.

[13:19] <CIAvash> tbrowder: yes, my own website and blog: https://siavash.askari-nasr.com/blog/ https://github.com/CIAvash/ciavash.github.io

[13:19] <tbrowder> fairly painless way to show pages of photos similar to pages in a printed school yearbook

[13:22] <CIAvash> tbrowder: there seems to be tools for image galleries: https://gohugo.io/tools/other/

[13:23] <tbrowder> my wife and i love the movie site!

[13:26] <tbrowder> ah, i see a wordpress to hugo tool!

[13:27] * Nemokosch is taking notes

[13:28] <sortiz> One more note:

[13:28] <Nemokosch> sortiz: I think it should say .returns === Int at any time but this is a minor inconvenience, after all

[13:29] <sortiz> m: my Int &foo = -> --> Int { 6 } but Callable[Int]

[13:29] <camelia> rakudo-moar 1e30b43c0: ( no output )

[13:35] <sortiz> Expecting that in anundefined &foo .returns works is like expecting .succ works in a undefined `my Int $a`.

[13:36] <Nemokosch> no, it's not like that

[13:36] *** linkable6 left
[13:36] *** evalable6 left
[13:37] *** evalable6 joined
[13:37] <Nemokosch> it's like expecting that for my Int $a, $a can pass as an Int under any valid circumstances

[13:37] *** linkable6 joined
[13:40] <Nemokosch> m: my Int &foo; my Int &bar; &bar = &foo;

[13:40] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´Type check failed in assignment to &bar; expected Callable[Int] but got Callable (Callable)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:40] <Nemokosch> does this help with understanding my problem?

[13:41] <Nemokosch> Because I think I couldn't have hoped for a bigger red flag to back up my sentiment.7

[13:42] <tbrowder> CIAvash: allow a private msg?

[13:47] <sortiz> When you declare `my Int &foo;` you aren't creating any Callable, you are only creating a (constrained) container for one. Only after you assign one to it you can expect it to be fully functional.

[13:48] <Nemokosch> Well, I thought I tried as hard as possible to show that this isn't about being "fully functional" but simply "consistently typed"

[13:49] <Nemokosch> if two variables that have the same type cannot be assigned to each other *because of a type constraint*, something is inconsistent

[13:50] <Nemokosch> this is my "demarcation line", I have nowhere to back up from this assumption so I hope you can agree with it as it is.

[13:50] <CIAvash> tbrowder: sure

[13:50] * lizmat clickbaits https://rakudoweekly.blog/2022/11/29/2022-48-classy-core/

[13:51] *** derpydoo joined
[13:53] <Nemokosch> And please take it into account that this is an essential reason for type objects being the undefined values of that type, rather than having one universal undefined value above all.

[14:01] *** Nemokosch left
[14:02] *** Kaipei joined
[14:05] *** Kaiepi left
[14:13] *** simcop2387 left
[14:13] *** perlbot left
[14:14] *** simcop2387 joined
[14:14] *** perlbot joined
[14:27] *** sena_kun left
[14:27] *** Altai-man joined
[14:45] <discord-raku-bot> <Nemokosch> I've been thinking and there are even more extreme examples. `my Int &foo; &foo = &foo` fails and `my Int &foo; &foo = Nil` fails, the former violates common sense while the latter violates the specification.

[14:46] <discord-raku-bot> <Nemokosch> Hell, even `my Int &foo = Nil` fails

[14:50] <discord-raku-bot> <Nemokosch> My conclusions are: 1. `my Int &var` is a valid, designed concept backed up by Callable[::T], based on the declared return value of the Callable instance. 2. The sole fact that Callable can be parameterized and what that does, needs to be documented. 3. `my Int &var = -> --> Int { 6 }` fails; this is probably a bug, file a Rakudo issue for this. 4. `my Int &var` defaults to unparameterized Callable which is bogus

[14:58] *** defaultxr joined
[15:00] *** Sgeo joined
[15:14] <defaultxr> hi. i have a script that processes each line of stdin, and calls a function for each line, pasted here: http://ix.io/4hhE . when i run it as is, it's pretty fast. however, if i comment out line 74 and uncomment line 73 (the ones in the "for $*IN.lines" block near the end), it's much slower (runs in 50 seconds instead of 5 on a long list of files). why is this? shouldn't i expect it to be way slower

[15:14] <defaultxr> to make a fresh any() junction each iteration by calling a function, rather than just pre-computing the any() once before the loop?

[15:16] <defaultxr> in other words, is-extension-type-old is way faster than is-extension-type, and i expect the opposite

[15:18] <discord-raku-bot> <Nemokosch> I'd think that smartmatch could be quite costly

[15:18] *** ProperNoun joined
[15:18] <discord-raku-bot> <Nemokosch> oh but it's in the other one as well...

[15:19] <discord-raku-bot> <Nemokosch> oh right! The signature!

[15:20] <discord-raku-bot> <Nemokosch> Have you checked the content of the $extensions argument?

[15:21] *** abraxxa left
[15:21] <discord-raku-bot> <Nemokosch> Because I think it's not the junction but all individual values in the junction, resulting in a lot of calls

[15:24] <sortiz> Nemokosch; I think that what you want at & sigilled declaration time is something like `my Int &b is default(sub (-->Int) { Int } );` right?

[15:24] <defaultxr> Nemokosch: hmm... sorry, noob question but why does it become a list instead of staying a junction?

[15:24] <tellable6> defaultxr, I'll pass your message to Nemokosch

[15:25] <discord-raku-bot> <Nemokosch> sortiz: not necessarily. Callable[Int] would be just as good, if that punning works

[15:26] <discord-raku-bot> <Nemokosch> my problem isn't with the non-DEFINITE-ness but the type of the non-DEFINITE instance

[15:26] *** Nemokosch joined
[15:26] <Nemokosch> \o

[15:26] <tellable6> 2022-11-30T15:24:50Z #raku <defaultxr> Nemokosch: hmm... sorry, noob question but why does it become a list instead of staying a junction?

[15:27] <Nemokosch> defaultxr: https://docs.raku.org/type/Junction junctions are a bit special. Okay, not just a bit.

[15:28] <Nemokosch> They don't descend from the Any type but directly from Mu, the root of the type system

[15:29] <Nemokosch> This is a deliberate design decision so that wherever an individual value makes sense, the junction could be passed and you could get a new junction

[15:30] <Nemokosch> m: my @fibo = 1, 1, * + * ... *; dd @fibo[1|3|5];

[15:30] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´any(1, 3, 8)‚ê§¬ª

[15:31] <defaultxr> ah, that makes sense. then is the best way to just compute the junction within is-extension-type, like i do in is-extension-type-old? or is there a way i can pre-compute it and pass it as if it were a regular value?

[15:33] <Nemokosch> You can capture the junction as one entity by specifying a type constraint. The default type constraint is Any.

[15:33] <Nemokosch> You could set it to Junction or Mu and then it wouldn't break up.

[15:34] <defaultxr> perfect, that works. thank you!

[15:36] <discord-raku-bot> <Nemokosch> üç¨

[15:36] *** Nemokosch left
[15:38] *** Kaipei left
[15:45] <sortiz> The problem is that simply declaring something not necessarily creates a pun, the positional-sigil by default creates a new Array that is auto-composed with its Positional role, but if you declare `my Positional[Int] $a` no Positional[Int] is punned, so you should not expect that `$a[0] = 1` works nor that $a[0] === Int

[15:47] <discord-raku-bot> <Nemokosch> you know... I'm giving up. I don't expect _the content_ to be definite and specified. I expect _the type_ to be valid.

[15:47] *** Nemokosch joined
[15:48] <Nemokosch> m: my Positional[Int] $a; dd $a; $a = $a; $a = Nil; 

[15:48] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´Positional[Int $a = Positional[Int]‚ê§¬ª

[15:49] <Nemokosch> the dd output is a bit glitchy but please

[15:50] <Nemokosch> This variable is consistently typed, I don't think you couldn't understand that.

[15:50] <Nemokosch> m: my Int &a; dd &a; &a = &a; &a = Nil; 

[15:50] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´Callable &a = Callable‚ê§Type check failed in assignment to &a; expected Callable[Int] but got Callable (Callable)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:50] <Nemokosch> this one isn't

[15:50] <Nemokosch> you get the difference, don't you?

[15:51] <Nemokosch> `my Int &foo` should simply default to the value `my Callable[Int] $foo` does

[15:54] <sortiz> Yep, I got the difference and is fixable.

[15:56] <sortiz> But that has nothing to do with the .returns method result.

[15:57] <Nemokosch> m: say Callable[Int].returns

[15:57] <camelia> rakudo-moar 1e30b43c0: OUTPUT: ¬´(Int)‚ê§¬ª

[15:57] <Nemokosch> I'd argue that it does have something to do with it, after all.

[15:58] <Nemokosch> I wish Positional[Int][0] also did in fact return (Int) but beggars can't be choosers :)

[16:00] <sortiz> Ok, point taken.

[16:01] <Nemokosch> Thank you. <3

[16:01] *** Nemokosch left
[16:02] <leont> Apparently all WhateverCode's are eqv to each other, that can't be right

[16:05] <discord-raku-bot> <Nemokosch> yes, it does look like that...

[16:07] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/blob/2022.07/src/core.c/Mu.pm6#L1311 Sourcery implies it simply dispatches to this call

[16:09] <discord-raku-bot> <Nemokosch> mm, maybe I'm using it wrong

[16:10] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/blob/2022.07/src/core.c/Mu.pm6#L1321 okay, that's more like it

[16:15] <discord-raku-bot> <Nemokosch> oh right, it's because they are the same type and they have the same .raku output

[16:15] <tbrowder> CIAvash: maybe you could propose a new Raku Advent site as a project to the Raku Foundation.

[16:29] *** sortiz left
[16:35] <leont> Yeah, because any difference between them is private

[16:42] *** jetchisel left
[16:43] *** jetchisel joined
[16:52] <leont> I should have known, my list of things that are affected by public/private was too short

[17:11] *** Kaipei joined
[17:37] *** Matthew|m left
[17:37] *** tiziodcaio left
[17:37] *** AlexDaniel left
[17:37] *** tadzik left
[17:37] *** CIAvash left
[17:37] *** Demos[m] left
[17:37] *** andrea[m]12 left
[17:39] *** dakkar left
[17:43] *** CIAvash joined
[17:49] *** razetime left
[17:54] <ugexe> Anton Antonov: I don't mind if you use my handle in your data/post

[17:54] *** AlexDaniel joined
[17:54] *** tiziodcaio joined
[17:54] *** Matthew|m joined
[17:54] *** tadzik joined
[17:54] *** Demos[m] joined
[17:54] *** andrea[m] joined
[17:54] <Geth> ¬¶ advent: fefa23b23e | (Alexey Melezhik)++ (committed using GitHub Web editor) | raku-advent-2022/articles/melezhik_post2.md

[17:54] <Geth> ¬¶ advent: second post

[17:54] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/fefa23b23e

[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:12] *** derpydoo left
[18:14] *** Altai-man left
[18:16] <discord-raku-bot> <Anton Antonov> @ugeexe Thanks!

[18:28] <discord-raku-bot> <Nemokosch> melezhik++ about time I actually start experimenting with CI üòõ

[18:40] *** lichtkind__ joined
[18:44] *** lichtkind_ left
[18:54] <Geth> ¬¶ advent: c3cb48628d | (Alexey Melezhik)++ (committed using GitHub Web editor) | raku-advent-2022/articles/melezhik_post2.md

[18:54] <Geth> ¬¶ advent: link to the gift

[18:54] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/c3cb48628d

[19:11] *** sortiz joined
[19:31] *** clarkema joined
[19:39] *** jgaz joined
[19:44] <El_Che> hello

[19:49] <[Coke]> I wonder if it would be helpful to have a list of ongoing potential community projects ranked in order of preference by RSC (yes, I know tuits aren't fungible)

[19:49] <[Coke]> github does, I think, let us have projects defined at the Raku group level.

[19:59] *** sgrs left
[20:00] *** clarkema_ joined
[20:00] <Geth> ¬¶ advent: 5812b30661 | (Alexey Melezhik)++ (committed using GitHub Web editor) | raku-advent-2022/articles/melezhik_post2.md

[20:00] <Geth> ¬¶ advent: minor style, gramma corrections

[20:00] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/5812b30661

[20:01] *** sgrs joined
[20:01] <El_Che> [Coke]: great idea, but a little delicate

[20:17] *** sgrs left
[20:18] *** sena_kun joined
[20:21] *** epony left
[20:21] *** epony joined
[20:39] *** clarkema left
[20:39] *** clarkema_ is now known as clarkema

[20:53] *** ToddAndMargo joined
[20:54] <ToddAndMargo> Two questions on NativeCall:

[20:54] <ToddAndMargo> 1) how to I tell NativeCall I only want the

[20:54] <ToddAndMargo> C pointer back, not what it points to?

[20:54] <ToddAndMargo> 2) how do I tell NativeCall I am sending it

[20:54] <ToddAndMargo> a C pointer?

[21:03] *** jgaz left
[21:05] *** holyghost joined
[21:08] <tonyo> CPointer

[21:10] <sortiz> ToddAndMargo, 1) NC never call automatically .deref on a Pointer and a Pointer only can be dereferenced (on demand by the user) when it is parameterized with what its points to (Not *void). How can yo get a Pointer is API specific.

[21:11] <ToddAndMargo> now I am confused!

[21:11] <ToddAndMargo> C++

[21:11] <ToddAndMargo> ¬†¬†¬†¬†¬† HANDLE WTSOpenServerA(

[21:11] <sortiz> 2) In NC, to pass a pointer to some C function, you should declare an argument as Pointer. An example follows:

[21:11] <ToddAndMargo> ¬†¬†¬†¬†¬† [in] LPSTR pServerName

[21:11] <ToddAndMargo> ¬†¬†¬†¬†¬† );

[21:14] <ToddAndMargo> LPSTR is long pointer to string.¬† I give NC a CArray, not a pointer.¬† And it works

[21:15] <sortiz> m: use NativeCall; sub malloc(size_t $size --> Pointer) is native { * }; sub free(Pointer \p) is native { * }; my $mem = malloc(10); say "Got some memory"; free($mem); say "Memory freed";

[21:15] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´Got some memory‚ê§Memory freed‚ê§¬ª

[21:15] *** kolibrie joined
[21:19] <ToddAndMargo> So to get NC to leave a c pointer alone, just declare it a "Pointer".¬†¬† That makes sense.¬† What does not make sense is giving NC an actual structure and having it do it on its own.¬† What triggers what?

[21:20] <kolibrie> I'm trying to get the cube root of a number, and I'm experiencing some unexpected results.¬† -8 ** (1/3) gives the expected answer of -2.¬† If I add a parenthesis around the initial number, (-8) ** (1/3) I get an unexpected answer of NaN.¬† If I save my initial number in a variable: my $number = -2 * -2 * -2; $number ** (1/3) I get a $number of -8

[21:20] <kolibrie> as expected, but the full expression becomes NaN.¬† What should I try, so I can get a cube root of a calculation?

[21:21] <ToddAndMargo> Do I hvae some booboo's here:

[21:21] <sortiz> Ah, In NC CArray and CStruct are passed by reference, i.e. as parameterized pointers. BTW, in NC LPSTR can use a simple Str, passed by reference also.

[21:21] <ToddAndMargo> constant CPOINTER := uint32;

[21:21] <ToddAndMargo> constant HANDLE¬†¬† = Pointer[void];

[21:21] <ToddAndMargo> constant LPSTR¬†¬†¬† = CArray[BYTE];

[21:21] <ToddAndMargo> constant LPWCTSTR = CArray[WCHAR];

[21:24] <sortiz> In Windows NEVER consider HANDLE a Pointer, it it almost everywhere opaque.

[21:25] <sortiz> Use a simple uint of a proper size. And pass it as native int.

[21:28] <ToddAndMargo> That explains some things.¬† Would handle be a uint32 or uint64?¬† I have to work in both 32 bit and 64 bit Windows

[21:28] <sortiz> You should not attempt to deref it. Get the HANDLE, use(pass) the HANDLE, and dispose(pass) it to proper sub.

[21:31] *** ToddAndMargo left
[21:32] *** ToddAndMargo joined
[21:32] <ToddAndMargo> dang!¬† I somehow managed to crash Firefox

[21:32] <ToddAndMargo> I will look at the logs

[21:32] <kolibrie> m: -8 ** (1/3)

[21:32] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "-" in expression "-8 **" in sink context (line 1)‚ê§¬ª

[21:33] <kolibrie> m: say "{-8 ** (1/3)}"

[21:33] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´-2‚ê§¬ª

[21:34] <kolibrie> m: say "{(-8) ** (1/3)}"

[21:34] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´NaN‚ê§¬ª

[21:35] <kolibrie> What should I try so I can get the cube root of an expression in parenthesis?

[21:35] <sortiz> m: use NativeCall; constant ptrsize is export = nativesizeof(Pointer); say "My ptr size", ptrsize; constant intptr is export = ptrsize == 4 ?? uint32 !! uint64;

[21:35] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´My ptr size8‚ê§¬ª

[21:35] <sortiz> You get the idea.

[21:40] *** thundergnat joined
[21:41] <thundergnat> m: say (-8.Complex) ** (1/3)

[21:41] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´1-1.732050807568877i‚ê§¬ª

[21:42] <thundergnat> Raku doesn't automatically promote (coerce?) to Complex.

[21:42] <ToddAndMargo> During my Firefox crash, did someone answer my 32 bit and 64 bit Windows HANDLE question?¬† Would you mind repeating it?

[21:45] <sortiz> m: use NativeCall; constant ptrsize is export = nativesizeof(Pointer); say "My ptr size is ", ptrsize; constant HANDLE = ptrsize == 4 ?? uint32 !! uint64;

[21:45] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´My ptr size is 8‚ê§¬ª

[21:47] <ToddAndMargo> You guys are confusing me.¬† I though HANDLE was not a pointer

[21:48] <sortiz> Read the code above, HANDLE is an uint32 or uint64, not a Pointer.

[21:49] <ToddAndMargo> I also do not understand what ?? and !! are.¬† And when yo say "size" do you mean bytes?

[21:50] <sortiz> ?? and !! are basic raku stuff 8-) and yes, 'size' means bytes.

[21:51] <ToddAndMargo> I am a total beginner.¬† Would you please explain ?? and !!.¬† I will write it down for the future

[21:52] <kolibrie> thundergnat: That is interesting.¬† I'm not sure if that is giving the answer I am looking for, still, because the cube root of -8 is -2, and I am not sure whether 1-1.732050807568877i is the same as -2.

[21:52] <tirnanog> the same as ? and : in perl5 (and others). tenary.

[21:52] <thundergnat> ToddAndMargo: https://docs.raku.org/routine/%3F%3F%20!!

[21:53] <ToddAndMargo> Ha!¬† I love it!¬† Thank you!

[21:54] <lizmat> eh, my client didn't include the !! in the url

[21:54] <lizmat> *phew*

[21:54] <defaultxr> is there some way to load an arbitrary file of raku code? i don't want to make a module if possible, i'm just writing a script and i want to load its subroutines/variables/etc at the repl so i can test them interactively

[21:55] <Geth> ¬¶ Raku-Steering-Council/main: 9637c1b47d | (Daniel Sockwell)++ | papers/coc_incident_response_guide.md

[21:55] <Geth> ¬¶ Raku-Steering-Council/main: Add response option: ‚â§ 48hr ban by one CAT member

[21:55] <Geth> ¬¶ Raku-Steering-Council/main: 

[21:55] <Geth> ¬¶ Raku-Steering-Council/main: This commit adds the points discussed at a previous RSC meeting:

[21:55] <Geth> ¬¶ Raku-Steering-Council/main:  * CAT should share passwords needed to ban someone

[21:55] <Geth> ¬¶ Raku-Steering-Council/main:  * CAT members should exchange phone #s

[21:55] <Geth> ¬¶ Raku-Steering-Council/main:  * CAT can treat someone as abstaining if they don't respond in 48hrs

[21:55] <Geth> ¬¶ Raku-Steering-Council/main:  * Any CAT member can issue a 48 hr ban without needing to discuss

[21:55] <Geth> ¬¶ Raku-Steering-Council/main:  with the full group.

[21:55] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/9637c1b47d

[21:55] <Geth> ¬¶ Raku-Steering-Council/main: 9ccb0d4554 | (Daniel Sockwell)++ (committed using GitHub Web editor) | papers/coc_incident_response_guide.md

[21:55] <Geth> ¬¶ Raku-Steering-Council/main: Merge pull request #51 from codesections-forks/Incident-Response

[21:55] <Geth> ¬¶ Raku-Steering-Council/main: 

[21:55] <Geth> ¬¶ Raku-Steering-Council/main: Add response option: ‚â§ 48hr ban by one CAT member

[21:55] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/9ccb0d4554

[21:57] <thundergnat> kolibrie: You aren't wrong. There are three cube roots of -8. -2 is one but apparently not the one returned by Raku :/ 

[21:57] <kolibrie> Hmm. How do I get the one I want?

[21:58] <defaultxr> oh, nevermind about my question; i just found EVALFILE (it seems the doc.raku.org search is case-sensitive?)

[21:59] <defaultxr> wait, it's not... not sure why it didn't work before

[22:00] <[Coke]> if you hit enter too quick, you get the first thing in the list

[22:00] <thundergnat> A kind-of cheaty way would be to not enclose the negative number in parens. 

[22:00] <thundergnat> m: say -8 ** (1/3)

[22:00] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´-2‚ê§¬ª

[22:01] <thundergnat> But that not actually taking the root of negative 8.

[22:01] *** ToddAndMargo left
[22:04] <kolibrie> thundergnat: I noticed that it works if I don't use parenthesis.¬† However, I don't actually know what my number is, because it is the result of a calculation (thus I'm using parenthesis).

[22:04] <[Coke]> I think you'd need a library or custom function to get the two complex roots.

[22:04] <discord-raku-bot> <Nemokosch> hi, seems like I'm late to the party. Could you please recite what the original code/context was?

[22:05] <kolibrie> m: say (-8).roots(3)

[22:05] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´(1.0000000000000002+1.7320508075688772i -2+2.4492935982947064e-16i 1.0000000000000002-1.7320508075688772i)‚ê§¬ª

[22:05] <[Coke]> ... oh, or you could use that builtin thing I forgot about. :)

[22:05] <kolibrie> I don't know how to use that.

[22:05] *** sgrs joined
[22:05] <[Coke]> I see that it's got rounding issues, unsurprisingly.

[22:06] <[Coke]> I eagerly await someone implementing ComplexRat.

[22:06] <discord-raku-bot> <Nemokosch> üòÑ

[22:07] <kolibrie> If I have a calculator, and I type in -8 and then the cube root button, I get -2. I want to know how to do that in raku, but when the -8 is really something like (-2 * -2 * -2).

[22:07] <[Coke]> m: 8.roots(3) #this one's closer. :)

[22:07] <camelia> rakudo-moar 6cded78e9: ( no output )

[22:07] <discord-raku-bot> <Nemokosch> was ** (1/3) also inaccurate?

[22:07] <[Coke]> m: say 8.roots(3) #this one's closer. :)

[22:07] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´(2+0i -0.9999999999999996+1.7320508075688774i -1.0000000000000009-1.7320508075688767i)‚ê§¬ª

[22:08] <kolibrie> m: -8 ** (1/3)

[22:08] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "-" in expression "-8 **" in sink context (line 1)‚ê§¬ª

[22:09] <discord-raku-bot> <Nemokosch> interestingly, sqrt can return exact values even in the Num type

[22:09] <kolibrie> m: say "{-8 ** (1/3)}"

[22:09] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´-2‚ê§¬ª

[22:09] <kolibrie> That works fine.

[22:09] <discord-raku-bot> <Nemokosch> do you have anything against it?

[22:09] <kolibrie> But if I add a parenthesis is does not give me a number.

[22:09] <guifa> THat's because -8 ** (1/3) is actually 

[22:09] <[Coke]> https://docs.raku.org/routine/roots - why does this example subtract the roots from 16. What is this trying to show?

[22:10] <guifa> (- ( 8 ** (1/3)))

[22:10] <guifa> iirc

[22:10] <guifa> but maybe I'm wrong

[22:10] <thundergnat> m: say (.abs ** (1/3)) * .sign for -8, -6, 8, 4.5; # a little verbose but only the real cube roots

[22:10] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´-2‚ê§-1.8171205928321397‚ê§2‚ê§1.6509636244473134‚ê§¬ª

[22:11] <guifa> [Coke] The goal is to show how close the approximattion is, I guess

[22:11] <[Coke]> guifa: no, that's right. the negative is applied to the result in the one that "works". I don't see anything in the docs warning about negatives on the LHS of **

[22:11] <guifa> The docs state that roots "produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number."

[22:12] <thundergnat> ** binds tighter than prefix negation

[22:12] <[Coke]> guifa: ... oh. it's showing the root raised to 4th power, my bad.

[22:13] <discord-raku-bot> <Nemokosch> > (-8) ** (1/3) # NaN

[22:13] <discord-raku-bot> <Nemokosch> you mean this?

[22:14] <discord-raku-bot> <Nemokosch> it seems to me that rational exponents aren't defined for negative numbers at all

[22:15] <kolibrie> With all this discussion, I think I have a workaround.

[22:15] <thundergnat> Like I said earlier, Raku doesn't automatically promote to Complex.

[22:15] <kolibrie> m: my $negative = (-8) == (-8).abs ?? 1 !! -1;

[22:15] <camelia> rakudo-moar 6cded78e9: ( no output )

[22:15] <kolibrie> my $abs = ((-8).abs ** (1/3)) * $negative;

[22:15] <kolibrie> say $abs;

[22:15] <[Coke]> m: say (8+0i) ** (1/3)

[22:15] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´1.9999999999999998+0i‚ê§¬ª

[22:15] <[Coke]> m: say (-8+0i) ** (1/3)

[22:15] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´1+1.732050807568877i‚ê§¬ª

[22:15] <discord-raku-bot> <Nemokosch> kolibrie there is the sign method

[22:15] <thundergnat> kolibrie: Did you see my snippet above?

[22:16] * [Coke] wonders if we have a wolframalpha shim yet.

[22:16] <discord-raku-bot> <Nemokosch> > m: say (.abs ** (1/3)) * .sign for -8, -6, 8, 4.5 # the snippet above

[22:16] <kolibrie> thundergnat: Yes, but I did not understand it enough to know how to use it.

[22:17] <thundergnat> It's pretty much what you had but using the built-in .sign method.

[22:18] <discord-raku-bot> <Nemokosch> (-8).sign * ((-8).abs ** (1/3))

[22:18] <discord-raku-bot> <Nemokosch> does this help to follow?

[22:18] <thundergnat> m: say .sign * .abs ** (1/3) given -8

[22:18] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´-2‚ê§¬ª

[22:18] <guifa> [Coke] anton has been working on it

[22:18] <[Coke]> ++anton

[22:18] *** ToddAndMargo joined
[22:19] <ToddAndMargo> I still have not got the HANDLE thing down yet.¬† http://vpaste.net/9mOIT

[22:19] <kolibrie> m: say (-8).sign * (-8).abs ** (1/3)

[22:19] <camelia> rakudo-moar 6cded78e9: OUTPUT: ¬´-2‚ê§¬ª

[22:20] <kolibrie> Okay. That works.¬† A bit convoluted, perhaps, but if I can get the answer I expect, then it will be sufficient.

[22:20] <kolibrie> Thank you all for your help!

[22:21] <discord-raku-bot> <Nemokosch> üç¨

[22:22] <kolibrie> sub cube-root(Numeric $value) {

[22:22] <kolibrie> ¬† ¬† given $value { return .sign * .abs ** (1/3) }

[22:22] <kolibrie> }

[22:23] <ToddAndMargo> This works.¬† Why?¬† # my HANDLE $Handle = 0;

[22:23] <ToddAndMargo> my $Handle = WTSOpenServerA $lpBuffer;

[22:29] <ToddAndMargo> and WHAT fails me:

[22:29] <ToddAndMargo> my $Handle = WTSOpenServerA $lpBuffer;

[22:29] <ToddAndMargo> print "Handle.WHAT = <" ~ $Handle.WHAT ~ "\n";

[22:29] <ToddAndMargo> my $Handle = WTSOpenServerA $lpBuffer;

[22:29] <ToddAndMargo> print "Handle.WHAT = <" ~ $Handle.WHAT ~ "\n";

[22:29] <ToddAndMargo> forget that last bad paste

[22:30] <ToddAndMargo> my $Handle = WTSOpenServerA $lpBuffer;

[22:30] <ToddAndMargo> print "Handle.WHAT = <" ~ $Handle.WHAT ~ "\n";

[22:30] <thundergnat> Could more concisely be: sub cube-root(Numeric $_) { .sign * .abs ** (1/3) }

[22:30] <ToddAndMargo> It did it agai

[22:30] <ToddAndMargo> Use of uninitialized value of type NativeCall::Types::Pointer[NativeCall::Types::void] in string context.

[22:30] <ToddAndMargo> Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.

[22:30] <ToddAndMargo> ¬† in block <unit> at PopUpTest3.pl6 line 76

[22:31] <ToddAndMargo> I had to paste to a Leaf pad and then recopy to get it here.¬† ARG!

[22:35] <kolibrie> thundergnat: Oh, I did not know you could set $_ in a signature like that. That is shorter.

[22:36] *** NemokoschKiwi joined
[22:36] <ToddAndMargo> constant HANDLE¬†¬† = Pointer[NativeCall::Types::void];¬†¬†¬† removes the error

[22:38] <thundergnat> üëç Not always a great idea to set the topic variable as a subroutine parameter, but there are times when I think it is worth it.

[22:45] <kolibrie> :)

[22:45] *** sena_kun left
[22:46] *** NemokoschKiwi left
[22:48] *** sortiz left
[22:51] * [Coke] wonders again how he managed to score ~coke on github

[22:54] <[Coke]> hey, all us old folks on github, there's an account setting for allowing someone to take over your account in the event of your death.

[22:57] <tbrowder> yes, jmerelo has agreed to take over all my github stuff

[22:57] * [Coke] is reminded he's still an admin on /parrot

[22:58] *** sgrs left
[23:09] *** derpydoo joined
[23:10] *** thundergnat left
[23:19] <ToddAndMargo> In the following, are we starting counting from zero or one?

[23:19] <ToddAndMargo> Native call expected argument 3 to reference a native integer, but got CPointer

[23:25] <ToddAndMargo> It looks like it is counting from 1

[23:26] <ToddAndMargo> NativeCall question:¬† how do I declare a "const void *src"

[23:27] <guifa> thundergnat: I mean, that's a good example of it, and of course the standard action classes methods are another

[23:27] <tellable6> guifa, I'll pass your message to thundergnat

[23:27] <guifa> [Coke] thanks for letting me know on that.  I don't anticipate mine any time soon, but no doubt setting it up is helpful 

[23:44] <discord-raku-bot> <Anton Antonov> @Coke You can use WolframAlpha in Raku via ZMQ. Please see "Proc::ZMQed". I am considering making a better fledged "Wolfram client" for Raku. (But that requires more work...)

[23:46] <discord-raku-bot> <Anton Antonov> @guifa and @Coke I am repeating here a question I asked in the morning: Can I use username handles in some articles about Raku IRC messages analysis? (I currently obfuscate names/handles.)

[23:55] <[Coke]> the data is already publicly logged, but: probably better to obfuscate slightly

[23:56] <guifa> Agreed.  Also depends on exactly what the analysis data includes

[23:56] <guifa> if it's just "who sent the most messages" or stuff like that, I'd say there's no problem using usernames

[23:57] <guifa> OTOH if it's "who said f*** the most" .... obfuscate maybe or ask the users (if they're regulars) if they'd be okay 

