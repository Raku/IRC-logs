[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:20] *** mira left
[00:59] *** dogbert11 left
[01:38] *** Sankalp- joined
[01:38] *** Sankalp left
[01:38] *** Sankalp- is now known as Sankalp

[01:48] *** dogbert11 joined
[01:54] *** frost joined
[02:54] *** sourceable6 left
[02:54] *** greppable6 left
[02:54] *** tellable6 left
[02:54] *** coverable6 left
[02:54] *** benchable6 left
[02:54] *** releasable6 left
[02:54] *** quotable6 left
[02:54] *** committable6 left
[02:54] *** linkable6 left
[02:54] *** bisectable6 left
[02:54] *** shareable6 left
[02:54] *** unicodable6 left
[02:54] *** statisfiable6 left
[02:54] *** nativecallable6 left
[02:54] *** reportable6 left
[02:54] *** notable6 left
[02:54] *** evalable6 left
[02:54] *** bloatable6 left
[02:54] *** quotable6 joined
[02:54] *** reportable6 joined
[02:54] *** shareable6 joined
[02:54] *** statisfiable6 joined
[02:54] *** nativecallable6 joined
[02:55] *** notable6 joined
[02:55] *** unicodable6 joined
[02:55] *** bloatable6 joined
[02:56] *** tellable6 joined
[02:56] *** linkable6 joined
[02:56] *** greppable6 joined
[02:56] *** coverable6 joined
[02:56] *** benchable6 joined
[02:57] *** sourceable6 joined
[02:57] *** releasable6 joined
[02:57] *** committable6 joined
[02:57] *** evalable6 joined
[02:57] *** bisectable6 joined
[03:07] *** frost left
[03:17] *** frost joined
[04:17] *** bloatable6 left
[04:17] *** evalable6 left
[04:17] *** greppable6 left
[04:17] *** statisfiable6 left
[04:17] *** linkable6 left
[04:17] *** benchable6 left
[04:17] *** notable6 left
[04:17] *** unicodable6 left
[04:17] *** coverable6 left
[04:17] *** reportable6 left
[04:17] *** tellable6 left
[04:17] *** committable6 left
[04:17] *** shareable6 left
[04:17] *** quotable6 left
[04:17] *** releasable6 left
[04:17] *** nativecallable6 left
[04:17] *** sourceable6 left
[04:17] *** bisectable6 left
[04:18] *** shareable6 joined
[04:18] *** quotable6 joined
[04:18] *** releasable6 joined
[04:18] *** bisectable6 joined
[04:18] *** unicodable6 joined
[04:18] *** benchable6 joined
[04:18] *** nativecallable6 joined
[04:18] *** bloatable6 joined
[04:19] *** linkable6 joined
[04:19] *** statisfiable6 joined
[04:19] *** greppable6 joined
[04:19] *** committable6 joined
[04:19] *** reportable6 joined
[04:19] *** evalable6 joined
[04:20] *** notable6 joined
[04:20] *** tellable6 joined
[04:20] *** sourceable6 joined
[04:20] *** coverable6 joined
[05:20] *** reportable6 left
[05:20] *** coverable6 left
[05:20] *** bloatable6 left
[05:20] *** benchable6 left
[05:20] *** releasable6 left
[05:20] *** sourceable6 left
[05:20] *** shareable6 left
[05:20] *** bisectable6 left
[05:20] *** statisfiable6 left
[05:20] *** linkable6 left
[05:20] *** quotable6 left
[05:20] *** nativecallable6 left
[05:20] *** tellable6 left
[05:20] *** evalable6 left
[05:20] *** committable6 left
[05:20] *** notable6 left
[05:20] *** greppable6 left
[05:20] *** unicodable6 left
[05:21] *** greppable6 joined
[05:21] *** bloatable6 joined
[05:21] *** shareable6 joined
[05:21] *** releasable6 joined
[05:21] *** coverable6 joined
[05:21] *** reportable6 joined
[05:22] *** linkable6 joined
[05:22] *** bisectable6 joined
[05:22] *** tellable6 joined
[05:22] *** notable6 joined
[05:22] *** evalable6 joined
[05:22] *** sourceable6 joined
[05:22] *** statisfiable6 joined
[05:23] *** quotable6 joined
[05:23] *** benchable6 joined
[05:23] *** unicodable6 joined
[05:23] *** committable6 joined
[05:24] *** nativecallable6 joined
[06:03] *** Voldenet_ joined
[06:04] *** Voldenet left
[06:04] *** Voldenet_ is now known as Voldenet

[06:08] *** reportable6 left
[06:10] *** reportable6 joined
[06:24] *** abraxxa joined
[06:32] *** abraxxa left
[06:32] *** abraxxa joined
[07:08] *** Sgeo left
[07:29] *** Nemokosch joined
[07:30] <Nemokosch> m: dd (9, ) >>**>> (1 .. *)

[07:30] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «(9,)␤»

[07:30] <Nemokosch> m: dd 9 >>*>> (1 .. *)

[07:30] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «List on right side of hyperop of infix:<*> is known to be infinite␤  in block <unit> at <tmp> line 1␤␤»

[07:30] <Nemokosch> My question is simple: _why_

[07:31] <Nemokosch> why does it fail when the generating end is one single element

[07:31] *** Nemokosch left
[07:59] <lizmat> Nemokosch: probably some trait on the operator

[07:59] <tellable6> lizmat, I'll pass your message to Nemokosch

[08:01] <discord-raku-bot> <Nemokosch> I'm pretty sure this is either a bug or not documented

[08:01] <discord-raku-bot> <Nemokosch> It should simply take the lhs value and use it like in the first, one-element list case

[08:09] <lizmat> tend to agree with you

[08:13] *** sena_kun joined
[08:14] <discord-raku-bot> <Nemokosch> is there something like divmod? seems like I overestimated the usefulness of polymod

[08:28] <discord-raku-bot> <Nemokosch> [18] >  92.polymod(1,2,6,24,120,720)                                           

[08:28] <discord-raku-bot> <Nemokosch> (0 0 4 7 0 0 0)

[08:28] <discord-raku-bot> <Nemokosch> this result makes no sense anyway

[08:28] <discord-raku-bot> <Nemokosch> what is that 7?

[08:30] <discord-raku-bot> <Nemokosch> > In the first case, 120 is divided by 10 giving as a remainder 12, which is the last element.

[08:30] <discord-raku-bot> <Nemokosch> it's not the remainder, it's the quotient... could this be comprehensible...

[08:38] <lizmat> you'd have to ask Larry, as he came up with it and implemented it, afaik  :-)

[08:41] <discord-raku-bot> <Nemokosch> it does the opposite of what I'd like to have, apparently

[08:41] <discord-raku-bot> <Nemokosch> the description could be better either way

[08:42] <lizmat> doc PR's are always welcome!

[08:43] <discord-raku-bot> <Nemokosch> what it seems to do is -> returns $n mod $current and replaces $n with $n div $current for the next calculation

[08:43] <discord-raku-bot> <Nemokosch> 92 mod 1 is 0, 92 mod 2 is also 0, 46 mod 6 is 4, 7 mod 24 is 7 and from that point on, $n reached 0

[08:45] <discord-raku-bot> <Nemokosch> what I would actually need is the opposite

[08:45] <discord-raku-bot> <Nemokosch> returning the div and calculating further with the mod

[08:45] <discord-raku-bot> <Nemokosch> of course then it would be fed in reverse order

[08:47] <discord-raku-bot> <Nemokosch> 92 div 720 is 0, 92 div 120 is still 0, 92 div 24 is 3, 20 div 6 is also 3, 2 div 2 is 1 and $n reached 0

[08:54] <Voldenet> polymod is useful for converting ints into human readable output

[08:54] <Voldenet> m: say reverse (123412346435).polymod(1024 xx Inf) Z~ <b k M G T>

[08:54] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «(114G 959M 189k 579b)␤»

[08:59] <discord-raku-bot> <Nemokosch> theoretically yes, practically it could be much better, frankly

[08:59] <discord-raku-bot> <Nemokosch> the "polydiv" function I described would give the same result AND would work for my use case as well

[09:00] <Voldenet> so… you want to turn 92 into (3 3 1)?

[09:00] <Voldenet> m: say 92.polymod(1..5).reverse

[09:00] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «(0 3 3 1 0 0)␤»

[09:00] <Voldenet> something like that

[09:01] <discord-raku-bot> <Nemokosch> this looks merely coincidental, though. It should be 0 0 3 3 1 0

[09:01] <Voldenet> starting from 720, eh

[09:01] <Voldenet> m: say 92.polymod(1..6).reverse

[09:01] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «(0 0 3 3 1 0 0)␤»

[09:02] <discord-raku-bot> <Nemokosch> other than that I don't see how 1..5 relates to descending factorials

[09:04] <discord-raku-bot> <Nemokosch> I guess this is some algebraic identity at the end of the day

[09:06] <discord-raku-bot> <Nemokosch> I'm not sure if polymod can always fake "polydiv" this way

[09:06] <discord-raku-bot> <Nemokosch> also this is considerably less readable with regards to the problem

[09:07] <Voldenet> Yes, it is considerably less readable

[09:07] <discord-raku-bot> <Nemokosch> I'm counting factorials because I want to identify a permutation

[09:09] <discord-raku-bot> <Nemokosch> I could imagine a combinatoric problem where the countings for consequent number of elements don't divide each other

[09:10] <Voldenet> Yes, this will produce unique sequences for substantially large numbers I think

[09:12] <discord-raku-bot> <Nemokosch> for the factorials, indeed it looks like this will give the right result, which is cool some way

[09:13] <Voldenet> you can see polymod as representation of positional systems also

[09:13] <Voldenet> m: say 16.polymod(16 xx 5).reverse

[09:13] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «(0 0 0 0 1 0)␤»

[09:13] <Voldenet> m: say 64.polymod(16 xx 5).reverse

[09:13] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «(0 0 0 0 4 0)␤»

[09:13] *** linkable6 left
[09:13] *** evalable6 left
[09:13] <Voldenet> m: say 256.polymod(16 xx 5).reverse

[09:13] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «(0 0 0 1 0 0)␤»

[09:14] <discord-raku-bot> <Nemokosch> still I think 1. polymod should get a better description, perhaps with even more example usages 2. it would make sense to have a polydiv, if for no other reason, for the more transparent interface

[09:14] *** evalable6 joined
[09:16] *** linkable6 joined
[09:16] <discord-raku-bot> <Nemokosch> yes, and I have the impression that as long as the given divisors, idk the mathematical term but all divide the previous divisors, polymod and polydiv do the same thing but backwards

[09:19] <Voldenet> m: say ((((((4 * 3) + 3) * 3) + 1) * 2) + 0) * 1

[09:19] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «92␤»

[09:19] <lizmat> PR's are welcome  :-)

[09:20] <discord-raku-bot> <Nemokosch> you know what is the other notoriously sadistic method?

[09:20] <discord-raku-bot> <Nemokosch> toggle

[09:21] <Voldenet> my fav still is ^fff^ operator

[09:21] <Voldenet> when I see it in the code, i hang for a few seconds

[09:22] <discord-raku-bot> <Nemokosch> I tried to look into those, too

[09:22] <discord-raku-bot> <Nemokosch> but I succeeded even less than with the toggle method

[09:22] <discord-raku-bot> <Nemokosch> sometimes it's good to make a from-predicate-to-predicate cut on an infinite sequence

[09:22] <discord-raku-bot> <Nemokosch> and toggle kinda sorta lets you do that

[09:24] <discord-raku-bot> <Nemokosch> still I wouldn't say it's an optimal tool...

[09:24] <discord-raku-bot> <Nemokosch> simply because the semantics isn't terribly suited for either this or any other problem I can think of

[09:26] <Voldenet> m: for ^50 { .say if !.is-prime ^fff^ .is-prime }

[09:26] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «1␤9␤10␤15␤16␤21␤22␤25␤26␤27␤28␤33␤34␤35␤36␤39␤40␤45␤46␤49␤»

[09:26] <discord-raku-bot> <Nemokosch> http://blogs.perl.org/users/zoffix_znet/2016/05/perl-6-polymod-break-up-a-number-into-denominations.html this post about polymod is pretty good btw

[09:27] <discord-raku-bot> <Nemokosch> especially the "handmade" part I think

[09:27] <discord-raku-bot> <Nemokosch> it actually says how it works

[09:28] <Voldenet> I just remember it as seconds-to-date-algorithm, there's only one way to write that correctly

[09:28] <discord-raku-bot> <Nemokosch> well, that's a good start to interpolate 🤠

[09:30] <discord-raku-bot> <Nemokosch> What bothers me about it is that it's really used as a fake "polydiv" when most of the time we would care about the div values indeed

[09:30] <discord-raku-bot> <Nemokosch> > m: say reverse (123412346435).polymod(1024 xx Inf) Z~ <b k M G T>

[09:30] <discord-raku-bot> <Nemokosch> this was a really good illustration

[09:31] <discord-raku-bot> <Nemokosch> we care about how many times the unit _is filled_, not _what is left_

[09:31] <discord-raku-bot> <Nemokosch> it's just a nice side effect that answering "what is left" is a way to the other question

[09:32] <Voldenet> writing good docs for this may be surprisingly difficult

[09:32] <Voldenet> even though it's such a simple method

[09:32] <discord-raku-bot> <Nemokosch> This is like Horner's division

[09:33] <discord-raku-bot> <Nemokosch> like okay it's nice and elegant to write it from small numbers and the modulus towards the bigger numbers

[09:33] <discord-raku-bot> <Nemokosch> but we are still interested in the quotients, starting from the big numbers

[09:34] <discord-raku-bot> <Nemokosch> and if you have those braindead anglo-saxon units of measure that may not even divide each other

[09:34] <discord-raku-bot> <Nemokosch> the Horner way may even fail

[09:35] <Voldenet> with non-SI units you may also need to know current moonphase or length of user's beard (if present)

[09:37] *** frost left
[09:38] <discord-raku-bot> <Nemokosch> 🤣

[09:38] <discord-raku-bot> <Nemokosch> anyway, there may be situations where you can't rely on the mods turning into divs

[09:38] <discord-raku-bot> <Nemokosch> and frankly I don't know when you'd want actually the mods

[10:31] *** dogbert11 left
[10:54] *** frost joined
[11:00] *** dogbert11 joined
[11:05] *** sacomo left
[11:07] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/07/18/2022-29-hot/

[11:08] <frost> lizmat++

[11:09] <lizmat> pretty cool, thank you :-)

[11:16] *** sacomo joined
[11:26] *** dogbert11 left
[11:26] *** dogbert11 joined
[11:47] *** dogbert11 left
[12:06] *** dogbert11 joined
[12:08] *** reportable6 left
[12:09] *** reportable6 joined
[12:14] *** dogbert17 joined
[12:16] *** dogbert11 left
[12:21] *** dogbert17 left
[12:21] *** jgaz joined
[12:35] *** dogbert17 joined
[13:04] *** jgaz left
[13:04] *** m6502 joined
[13:21] *** dogbert11 joined
[13:21] *** dogbert17 left
[13:34] *** m6502 left
[13:34] *** jgaz joined
[13:38] *** Nemokosch joined
[13:40] <Nemokosch> test test

[13:40] <tellable6> 2022-07-18T07:59:12Z #raku <lizmat> Nemokosch: probably some trait on the operator

[13:41] * Nemokosch is wondering

[13:41] <Nemokosch> it worked, lol

[13:42] *** Nemokosch left
[13:43] *** Nemokosch joined
[13:43] *** Nemokosch left
[13:43] *** Nemokosch joined
[13:43] * lizmat wonders what it is that worked

[13:44] *** Nemokosch left
[13:44] *** Nemokosch joined
[13:44] <discord-raku-bot> <Nemokosch> same but backwards...

[13:45] <lizmat> ah, an irc to discord bot ?

[13:45] *** Nemokosch left
[13:47] <discord-raku-bot> <Nemokosch> I was just curious if Pidgin would support this ACTION stuff

[14:11] <[Coke]> https://stackoverflow.com/questions/72945313/proper-way-of-avoiding-deprecated-code-warning - doesn't the suggestion here mean that when the deprecated thing is removed, the code will then stop working?

[14:12] <[Coke]> (as opposed to changing the code to avoid the deprection warning)

[14:15] *** Sgeo joined
[14:21] <lizmat> [Coke]: I guess   hhmmmm

[14:24] <[Coke]> ok. added a comment. Thanks

[14:26] <[Coke]> docs say "Rakudo provides a separate set of executables suffixed with a 'w' (rakuw.exe, rakudow.exe, ...) that are compiled as non-console applications. These do not spawn this console window.

[14:26] <[Coke]> but if I run "rakuw -e 'say 3'", it does output it.

[14:33] *** Xliff left
[14:36] *** grondilu joined
[14:37] <grondilu> m: grammar { token TOP { \# } }

[14:37] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «===SORRY!===␤Regex not terminated.␤at <tmp>:1␤------> grammar { token TOP { \# } }⏏<EOL>␤Regex not terminated.␤at <tmp>:1␤------> grammar { token TOP { \# } }⏏<EOL>␤Malformed regex␤at <tmp>:1␤------> grammar…»

[14:37] <tellable6> 2022-05-23T23:55:55Z #raku <Xliff_> grondilu: Donno. But sticking a guard on that would effectively kill the Failure.

[14:37] <grondilu> m: grammar { token TOP { '#' } }

[14:37] <camelia> rakudo-moar 7ec4b10d7: ( no output )

[14:38] <grondilu> m: grammar { token TOP { \\# } }

[14:38] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «===SORRY!===␤Regex not terminated.␤at <tmp>:1␤------> grammar { token TOP { \\# } }⏏<EOL>␤Malformed regex␤at <tmp>:1␤------> grammar { token TOP { \\# } }⏏<EOL>␤␤»

[14:39] <grondilu> I thought I could backslash # like with any metacharacter

[14:39] <grondilu> m: grammar { token TOP { \% } }

[14:39] <camelia> rakudo-moar 7ec4b10d7: ( no output )

[14:39] <grondilu> looks like a bug tbh

[14:40] <grondilu> btw it works fine in a regex

[14:40] <grondilu> m: say "#" ~~ /\#/

[14:40] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «｢#｣␤»

[15:23] *** abraxxa left
[15:25] *** abraxxa joined
[15:29] *** frost left
[16:15] *** grondilu left
[16:25] *** japhb left
[16:28] *** lichtkind joined
[16:32] *** japhb joined
[17:11] <SmokeMachine> m: my Pair $a = abc => 42; multi bla(Pair (:$key, |)) { say $key }; bla $a # this works...

[17:11] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «abc␤»

[17:12] <SmokeMachine> m: my Pair $a = abc => 42; given $a { when Pair (:$key, |) { say "bla" } } # Should this also work?

[17:12] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> air $a = abc => 42; given $a { when Pair⏏ (:$key, |) { say "bla" } } # Should thi␤    expecting any of:␤        block or pointy block␤        infix␤…»

[17:20] <SmokeMachine> m: my Pair $a = abc => 42; given $a { when :(Pair (:$key, |)) { say "bla" }; default { .say } } # This does not die...

[17:20] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «abc => 42␤»

[17:32] *** linkable6 left
[17:32] *** evalable6 left
[17:34] *** linkable6 joined
[17:34] *** evalable6 joined
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:26] *** eseyman joined
[18:28] <SmokeMachine> is there a better way of doing something like this? https://usercontent.irccloud-cdn.com/file/AKQIEnXy/CleanShot%202022-07-18%20at%2019.28.06%402x.png

[18:33] <lizmat> m: role Maybe[::T = Int] { }

[18:33] <camelia> rakudo-moar 7ec4b10d7: ( no output )

[18:34] <lizmat> assuming role Maybe { } has Int as a default for T ?

[18:37] <SmokeMachine> I don't know if it should have a default...

[18:39] <lizmat> then what is the role of role Maybe without T ?

[18:39] *** dogbert17 joined
[18:39] <SmokeMachine> just for be able to use Maybe without [T] on pattern matching

[18:41] *** dogbert11 left
[18:41] <lizmat> m: role Maybe[::T?] { }

[18:41] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> role Maybe[::T⏏?] { }␤    expecting any of:␤        constraint␤        formal parameter␤»

[18:41] <lizmat> m: role Maybe[::T = Any] { }

[18:41] <camelia> rakudo-moar 7ec4b10d7: ( no output )

[18:41] <lizmat> that should allow it?

[18:43] <SmokeMachine> lizmat: yes, thanks! https://usercontent.irccloud-cdn.com/file/xsbII4Qj/CleanShot%202022-07-18%20at%2019.43.22%402x.png

[18:45] <lizmat> yuu're welcome  :-)

[18:59] *** dogbert11 joined
[19:01] *** dogbert17 left
[19:02] *** melezhik joined
[19:06] <melezhik> hi jjatria - did you get a chance to take a look at postfix + Tomtit PR?

[19:07] *** xinming left
[19:09] *** xinming joined
[19:13] *** rypervenche left
[19:24] *** melezhik left
[20:11] *** abraxxa left
[20:23] *** Kaiepi left
[20:24] *** rypervenche joined
[20:45] *** dogbert11 left
[20:45] *** dogbert11 joined
[20:56] *** dogbert11 left
[20:59] *** dogbert11 joined
[21:06] *** Kaiepi joined
[21:10] *** jgaz left
[21:12] *** dogbert11 left
[21:14] *** dogbert11 joined
[21:14] *** sena_kun left
[22:03] *** dogbert17 joined
[22:05] *** dogbert11 left
[22:28] *** discord-raku-bot left
[22:29] *** discord-raku-bot joined
[22:38] *** discord-raku-bot left
[22:39] *** discord-raku-bot joined
[22:40] *** habere-et-disper joined
[22:41] <habere-et-disper> Z appears to have a default of the list constructor Z, (Z comma)

[22:41] <habere-et-disper> Should R have the same (it appears to not have a default)

[22:42] <habere-et-disper> ?

[23:40] *** evalable6 left
[23:40] *** linkable6 left
[23:42] *** evalable6 joined
[23:42] *** linkable6 joined
[23:45] *** [Coke]_ joined
[23:46] *** [Coke] left
