[00:06] <SqrtNegInf> Regarding the .$ construction: Looking at the QAST output for the code, it seems like an anonymous state variable is generated from the topic variable. They necessarily remain in lock-step through the loop.

[00:06] <SqrtNegInf> Not-half-bad as an obscfucation technique...

[00:07] *** reportable6 left
[00:10] <Geth> ¬¶ Raku-Steering-Council/main: b16f124c26 | (Geoffrey Broadwell)++ | minutes/20220122.md

[00:10] <Geth> ¬¶ Raku-Steering-Council/main: Add RSC meeting minutes for 2022-01-22

[00:10] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/b16f124c26

[00:12] <SmokeMachine> m: say .$ given 42

[00:12] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´42‚ê§¬ª

[00:13] <SmokeMachine> m: say .$++ for 1,1,1,1

[00:13] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´Cannot resolve caller postfix:<++>(Int:D); the following candidates‚ê§match the type but require mutable arguments:‚ê§    (Mu:D $a is rw)‚ê§    (Int:D $a is rw --> Int:D)‚ê§‚ê§The following do not match for other reasons:‚ê§    (Bool:D $a is rw)‚ê§   ‚Ä¶¬ª

[00:14] <SmokeMachine> m: say .$++ for ($=1) xx 5

[00:14] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´Cannot resolve caller postfix:<++>(Int:D); the following candidates‚ê§match the type but require mutable arguments:‚ê§    (Mu:D $a is rw)‚ê§    (Int:D $a is rw --> Int:D)‚ê§‚ê§The following do not match for other reasons:‚ê§    (Bool:D $a is rw)‚ê§   ‚Ä¶¬ª

[00:15] <SmokeMachine> m: my @a = 1 xx 5; say .$++ for @a

[00:15] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´Cannot resolve caller postfix:<++>(Int:D); the following candidates‚ê§match the type but require mutable arguments:‚ê§    (Mu:D $a is rw)‚ê§    (Int:D $a is rw --> Int:D)‚ê§‚ê§The following do not match for other reasons:‚ê§    (Bool:D $a is rw)‚ê§   ‚Ä¶¬ª

[00:16] <SmokeMachine> m: say .$.VAR given 42

[00:16] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable $.VAR used where no 'self' is available‚ê§at <tmp>:1‚ê§------> say .$.VAR‚èè given 42‚ê§    expecting any of:‚ê§        dotty method or postfix‚ê§¬ª

[00:17] <SmokeMachine> m: say .VAR given 42.$

[00:17] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´42‚ê§¬ª

[00:25] *** sena_kun left
[00:33] *** sena_kun joined
[00:44] *** Summer joined
[00:47] <Summer> xx but as a metaoperator?, `(1..6).roll xx[max] 6  #6d6` or `("a".."z") xx[X~] 5` generating permutations

[00:48] <Summer> I get that it doesn't really match with the original intent of xx to be instantly reduced, but

[00:48] <Summer> ngl every time I use xx I instantly reduce it üëÄ 

[01:08] *** reportable6 joined
[01:38] <leont> That's not really a metaoperator, is it

[01:53] *** frost joined
[01:59] *** hasrthur joined
[02:03] *** hasrthur left
[02:19] *** jaguart joined
[02:21] <jaguart> Anyone know why Raku is not on https://stackshare.io? I submitted it - but the submission failed because the slug is reserved. :(

[02:53] <Summer> its a metaoperator if it can wrap another operator, e.g. X~, X metaoperatorings around the ~ operator

[02:54] <Summer> X~ ~= X[~], need brackets since some operators are letters too

[02:55] <Summer> (and that would be, xx[X[~]] for duplicate, crossproduct, concat)

[03:05] *** Garbanzo_ joined
[03:07] *** razetime joined
[03:33] *** SqrtNegInf left
[03:52] *** frost left
[04:21] *** squashable6 left
[05:18] *** razetime left
[05:24] *** squashable6 joined
[06:06] *** reportable6 left
[06:07] *** reportable6 joined
[06:20] *** Garbanzo_ left
[06:47] *** silug left
[06:52] *** silug joined
[07:17] *** TheAthlete joined
[07:19] *** seednode99 left
[07:20] *** seednode99 joined
[07:36] *** qorg11 left
[07:37] *** qorg11 joined
[07:49] *** jast left
[07:49] *** jast joined
[07:55] *** jrjsmrtn left
[07:56] *** jrjsmrtn joined
[08:04] *** abraxxa joined
[08:19] *** Sgeo left
[08:20] *** abraxxa left
[08:21] *** abraxxa joined
[09:00] *** dakkar joined
[09:36] <discord-raku-bot> <Nemokosch#9980> I don't get the reasoning behind that hypothetical xx metaoperator

[09:37] <discord-raku-bot> <Nemokosch#9980> jaguart: what is "slug"? ü§î

[09:41] *** synthmeat left
[09:54] *** hasrthur joined
[10:29] *** synthmeat joined
[10:52] *** TheAthlete left
[10:58] *** hasrthur left
[11:06] *** hasrthur joined
[11:06] *** hasrthur left
[11:12] *** hasrthur joined
[11:13] *** hasrthur left
[11:14] *** hasrthur joined
[11:15] *** hasrthur left
[11:15] *** hasrthur joined
[11:16] *** hasrthur left
[11:17] *** hasrthur joined
[11:17] *** hasrthur left
[11:23] *** hasrthur joined
[11:25] *** hasrthur left
[11:31] *** hasrthur joined
[11:52] *** linkable6 left
[11:57] *** hasrthur left
[11:58] *** hasrthur joined
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:25] *** frost joined
[12:26] *** frost left
[12:30] *** fjlavado joined
[12:32] *** fjlavado left
[12:35] *** TheAthlete joined
[12:54] *** linkable6 joined
[13:04] *** frost joined
[13:44] *** frost left
[13:44] *** linkable6 left
[13:46] *** linkable6 joined
[14:15] *** frost joined
[14:55] <[Coke]> slug: "a part of a URL which identifies a particular page on a website in a form readable by users." ... though I never heard that before looking it up just now

[14:55] <[Coke]> guessing derived from the earlier "a line of type in Linotype printing.

[14:58] <[Coke]> (RSC minutes) "We are normal people" ?

[14:59] <El_Che> (are you all superheroes?)

[15:01] <[Coke]> I'm not arguing against that statement, just wondering why it's in the minutes. :)

[15:04] <El_Che> If I would be an alien from outer space I would say "we are normal people" all the time

[15:04] <El_Che> 3rd rock from the Sun plot :)

[15:12] <japhb> [Coke]: Because any time there's a committee or council or whatever and the general public doesn't have the opportunity to talk to them and determine they are normal people, they instead assume shadowy cabal.

[15:12] <japhb> Which I suppose given world history is probably not a horrible assumption.

[15:13] <japhb> El_Che: Yeah, I probably should have found a better way to write that than "WE ARE TOTALLY NORMAL, BELIEVE US" which comes out a little like "We come in peace!  (kill, kill!)"

[15:14] <japhb> Further proof for the "normal people" statement: I suck at this.  ;-)

[15:15] *** linkable6 left
[15:17] *** frost left
[15:19] <[Coke]> Yah, that might have been edited too much and therefore lost clarity

[15:22] <[Coke]> Thanks for the explainer.

[15:27] *** Sgeo joined
[15:29] <El_Che> Some of you I've known IRL for years (and probably all online for years)

[15:30] <El_Che> maybe it just means that the infiltration plots works with sleeping agents :)

[15:44] * guifa is still waiting for an in-person conference so he can meet everyone IRL

[15:45] <guifa> Looks like maaaybe finally P&R Houston but I know a lot of people won't be going in person for that

[15:46] <El_Che> just too early

[15:49] <guifa> Yeah.  It's just unfortunate for me that I started getting to the point of presenting at a conference right as the pandemic hit.  

[16:27] *** evalable6 left
[17:18] *** linkable6 joined
[17:37] *** dakkar left
[17:42] *** abraxxa left
[17:48] *** dogbert11 left
[18:06] *** reportable6 left
[18:07] *** reportable6 joined
[18:35] <tonyo> .

[19:07] *** linkable6 left
[19:13] <leont> We don't have Buf/Blob literals, right?

[19:15] <lizmat> nope

[19:16] <leont> NYI? Or deliberate?

[19:17] <lizmat> afaik there is no syntax for it ?

[19:17] <leont> qb/abcd/ would seem like the obvious option there

[19:17] <lizmat> I assume that would be a blob ?

[19:18] <lizmat> with an escape for / I assume ?

[19:18] <leont> Right now I either have to do 'abcd'.encode('ascii'), or Blob.new(65, 66, 67, 68). Neither is ergonomic.

[19:18] <lizmat> q:b:ascii then ?

[19:18] <lizmat> q:b:ascii/abcd/ then?

[19:19] <lizmat> assuming the default would be utf8 encoding ?

[19:20] <guifa> leont: you could probably do sub qb is pure ($s) {¬†$s.encode('ascii') }, and then the compiler could even do some of it for you

[19:22] <leont> I'm not entirely sure what the default encoding should be, but it should be one of those two for sure

[19:22] <lizmat> we do utf8 everywhere by default, so I guess.... 

[19:22] <leont> Fair

[19:23] <lizmat> and if you're just using ASCII characters, that shouldn't matter anyway

[19:23] <leont> Yeah, in the cases I've encountered so far the distinction wouldn't have mattered

[19:23] *** abraxxa-home joined
[19:26] <guifa> leont: lemme see if I can resurrect the slang I had finally got working for binex.  It could probably be reworked fairly quickly to give you a nice way of entering in blob literals (including doing q:b/‚Ä¶/) or maybe 0x(‚Ä¶) for hex, 0a(‚Ä¶) for ascii, 0b(‚Ä¶) for binary, etc)

[19:26] * guifa has been playing with RakuAST the past 24 hours and is so excited for the future of so many modules 

[19:26] <lizmat> yeah, it's pretty cool, eh?

[19:27] <guifa> I think I need to write a RakuAST::Prettifier soon though :-) 

[19:27] <lizmat> yeah, I'm sorta torn on that

[19:28] <lizmat> on the one hand, it should be easy to simplify a lot of constructs

[19:28] <lizmat> otoh, it would be yet another language to learn, document and maintain

[19:28] * leont wants a RegexBuilder when RakuAST lands. I've needed that in at least two modules already.

[19:29] <lizmat> I think you already can do that in RakuAST, I seem to recall

[19:29] <lizmat> to an extent, anyway

[19:30] *** evalable6 joined
[19:32] <guifa> lizmat I think of it only really as a way for quick visualization of what's going on

[19:32] <guifa> (or did you mean for a binary quoting construct?) 

[19:33] <lizmat> no, I meant the RegexBuilder idea

[19:37] <lizmat> in any case, if anybody would like to tackle .assuming in RakuAST  :-)

[19:41] <gfldex> I'm looking forward to assume fastness. :)

[19:41] <guifa> That would really just involve pulling out an element or two from the parameter list and adding a new lexical that's bound to the args in .assume(‚Ä¶), yeah?

[19:41] * guifa is probably missing a LOT of complexity there

[19:41] <lizmat> basically, yeah  :-)

[19:41] <lizmat> problem is that parsing the core should be far enough so that you can interact with stuff that was parsed by the default parser

[19:42] <lizmat> at the moment, you can't do that yet very well, because the bootstrap is only half-way so to speak

[19:42] <guifa> ah

[19:42] <lizmat> so you don't have a RakuAST to work on, to start peeking and poking on  :-)

[19:44] <guifa> I suppose in the meantime you could do a QOD pointy block that just recalls the original, reordering/inserting arguments as necessary.  But the stack trace would be off if it errored

[19:46] <guifa> I think the other thing that's really cool about RakuAST is I'm seeing a lot of potentially to actually REALLY make Raku a polyglot

[19:49] <guifa> Imagine being able to do sub-fortran {¬†print *, "Hello, World!" } 

[19:51] <gfldex> Do you intend to grow heads faster then out enemies can swing a sword?

[19:51] <guifa> I mean‚Ä¶¬†

[19:52] <gfldex> It's one head per glot, isn't it?

[19:52] <gfldex> Anything else would be a mouthfull!

[19:52] * guifa . o O ( neckful? )

[19:58] <guifa> I don't actually know how well fortan code could be done, given that it'd involve GOTOs and that doesn't quite align so well with how Raku compiles (although I think the synopses intended that there be a goto)

[19:58] <leont> I don't think fortran is the useful kind of polyglotery, it's DSLs that are

[20:00] <guifa> leont: agreed.  I just think it's one of those "look what can be done" things.  My work is primarily going to be towards a the binary regex

[20:02] <gfldex> There is plenty of Fortran code out there, that was written for slowputers. If we provide the companies that are affected with a nice escape hatch, we might be able to win a few hearts.

[20:03] <guifa> My understanding is that people still write Fortran, particularly in the science community where speed is king

[20:04] <guifa> (partly because history/tradition, partly because Intel and friends have extremely hyper optimized fortran compilers available )

[20:12] *** abraxxa-home left
[20:13] <gfldex> There is plenty of business software with reporting in 7-bit ASCII. I'm confident we can handle that.

[20:15] *** morte_ joined
[20:24] *** jjido joined
[20:32] <leont> Yeah, but that's more NativeCall territory than polyglotting territory

[20:40] *** jjido left
[20:43] *** Xliff joined
[20:50] *** TheAthlete left
[20:59] *** Colt left
[21:38] *** melezhik joined
[21:38] <melezhik> Hi raku folks!

[22:06] <melezhik> if someone does Azure automation - here is some Raku/Bash plugins for that - https://www.sparrowhub.io/search?q=azure

[22:07] *** melezhik left
[22:18] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2022/01/25/functional-hypering/

[22:28] *** rir_ joined
[22:33] *** rir__ left
[22:40] <Voldenet> Eh, .assuming has weird performance implications, but it stops being so surprising when you know how it's just packing stuff into large string and then EVALs it

[22:55] *** sftp left
[22:56] *** sftp joined
[23:03] *** jjido joined
[23:08] *** jjido left
[23:08] *** linkable6 joined
[23:13] *** morte_ left
[23:28] *** djerius left
[23:29] *** djerius joined
[23:32] <guifa> how does one make a call to a postcircumfix in RakuAST?

[23:49] <Xliff> That's a good question. Can't find an example in the tests?

[23:50] <Xliff> Are you talking custom operator?

