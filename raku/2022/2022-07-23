[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:15] *** jaguart left
[00:23] <japhb> Quibono: There used to be other compilers, such as Niecza and PUGS, but they have not been maintained in a very long time.

[00:23] <japhb> Niecza targeted .NET; PUGS targeted GHC

[00:24] <japhb> But after a certain point, Rakudo became the compiler getting most of the effort.

[00:29] <discord-raku-bot> <Quibono> Do you know why the other compilers kinda died?

[00:32] <japhb> PUGS: Lead developer became quite sick, and henceforth moved on to becoming a government minister.

[00:32] <japhb> Niecza: IIRC, the lead developer got a $day-job that took all their time.

[00:32] <japhb> But it's been a while, so my memory may be fuzzy.

[00:35] <discord-raku-bot> <Quibono> Gotcha.

[00:38] *** kbtz left
[00:40] <Geth> ¦ ecosystem: 7aee6125dc | (Geoffrey Broadwell)++ (committed using GitHub Web editor) | META.list

[00:40] <Geth> ¦ ecosystem: Remove Terminal-Print from p6c

[00:40] <Geth> ¦ ecosystem: 

[00:40] <Geth> ¦ ecosystem: ... it has been moved to the `zef:terminal-printers` in the Fez ecosystem instead.

[00:40] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/7aee6125dc

[00:46] <jdv> niecza.  blast from the barely but fondly remembered past...

[01:38] *** evalable6 left
[01:38] *** linkable6 left
[01:40] *** linkable6 joined
[01:40] *** evalable6 joined
[02:32] *** guifa_ joined
[02:32] *** guifa_ left
[02:50] *** andrea[m]1 joined
[03:50] *** evalable6 left
[03:50] *** linkable6 left
[03:52] *** evalable6 joined
[03:52] *** linkable6 joined
[04:52] *** nativecallable6 left
[04:52] *** bloatable6 left
[04:52] *** committable6 left
[04:52] *** unicodable6 left
[04:52] *** tellable6 left
[04:52] *** coverable6 left
[04:52] *** statisfiable6 left
[04:52] *** releasable6 left
[04:52] *** greppable6 left
[04:52] *** bisectable6 left
[04:52] *** sourceable6 left
[04:52] *** linkable6 left
[04:52] *** evalable6 left
[04:52] *** reportable6 left
[04:52] *** shareable6 left
[04:52] *** benchable6 left
[04:52] *** notable6 left
[04:52] *** quotable6 left
[04:52] *** sourceable6 joined
[04:52] *** coverable6 joined
[04:52] *** evalable6 joined
[04:53] *** releasable6 joined
[04:53] *** notable6 joined
[04:53] *** nativecallable6 joined
[04:53] *** bloatable6 joined
[04:54] *** linkable6 joined
[04:54] *** unicodable6 joined
[04:54] *** shareable6 joined
[04:54] *** benchable6 joined
[04:54] *** tellable6 joined
[04:54] *** greppable6 joined
[04:54] *** committable6 joined
[04:54] *** reportable6 joined
[04:55] *** quotable6 joined
[04:55] *** statisfiable6 joined
[04:55] *** bisectable6 joined
[05:16] *** Sankalp left
[05:21] *** Sankalp joined
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[07:02] *** Guest53 joined
[07:02] *** Sankalp left
[07:02] <Guest53> hello

[07:02] <Guest53> is anyone else here?

[07:04] *** Guest53 left
[07:20] *** Sankalp joined
[07:20] <discord-raku-bot> <Nemokosch> Maybe

[07:21] <discord-raku-bot> <Nemokosch> 53 is my lucky number

[07:36] *** kbtz joined
[07:54] <discord-raku-bot> <Nemokosch> I'm still thinking what makes HTML::Tag so terribly slow

[07:54] <discord-raku-bot> <Nemokosch> and there are things I don't understand

[07:55] <discord-raku-bot> <Nemokosch> https://github.com/2colours/HTML-Tag/blob/31b98e3c7a82061cb14dfda39351543515ecf726/lib/HTML/Tag.rakumod#L29

[07:55] <discord-raku-bot> <Nemokosch> why does this stuff work _at all_

[07:55] <discord-raku-bot> <Nemokosch> there is no $!id

[07:57] <lizmat> has      $.id    is rw;

[07:57] <lizmat> there *is* an $!id

[07:58] <lizmat> https://github.com/2colours/HTML-Tag/blob/31b98e3c7a82061cb14dfda39351543515ecf726/lib/HTML/Tag.rakumod#L7

[07:59] <discord-raku-bot> <Nemokosch> well, why?

[08:02] <lizmat> has $.foo defines a $!foo private attribute *and* creates an accessor method

[08:06] <discord-raku-bot> <Nemokosch> ~~somebody could have really valued consistency more~~

[08:08] <discord-raku-bot> <Nemokosch> perhaps it would be more readable if stuff declared with $. could only be accessed with $. and it would resolve to the underlying private variable

[08:08] <discord-raku-bot> <Nemokosch> anyway...

[08:10] <discord-raku-bot> <Nemokosch> this time around, I straight-up murdered this do-assignments stuff

[08:10] <discord-raku-bot> <Nemokosch> it's not called from the generic render method

[08:10] <discord-raku-bot> <Nemokosch> and guess what, that wasn't it

[08:10] <discord-raku-bot> <Nemokosch> there is no improvement at all apparently

[08:10] <discord-raku-bot> <Nemokosch> I mean, assignments shouldn't be costly but I suspected there might be a ridiculous number of them

[08:11] <discord-raku-bot> <Nemokosch> that's not the case apparently

[08:11] <lizmat> ok, for the sake of the argument, could you take out the encode_entities bit and see how that affects performance?

[08:14] <discord-raku-bot> <Nemokosch> I did that once and I immediately realized an 80% performance boost lol

[08:14] <discord-raku-bot> <Nemokosch> but I think there might be other places where it can be removed

[08:14] <discord-raku-bot> <Nemokosch> so that may be even bigger, let's see...

[08:14] <lizmat> ok, then lemme focus on that module

[08:16] <discord-raku-bot> <Nemokosch> okay - this time around, I'm replacing it with a dummy function that just returns the argument

[08:16] <discord-raku-bot> <Nemokosch> and I added do-assignments back

[08:18] <discord-raku-bot> <Nemokosch> anyway, I'm afraid this won't be a win - because I don't let anything be encoded either way

[08:19] <discord-raku-bot> <Nemokosch> I made a HTML::Tag::Raw class that renders as its content

[08:19] <lizmat> ok, so "encode-html-entities" is really the only type of encoding that you need, right?

[08:20] <discord-raku-bot> <Nemokosch> and I'm using that for literally all my data in the given script

[08:20] <discord-raku-bot> <Nemokosch> I'd say even that is too much 😅 I'm not sure what you mean

[08:22] <discord-raku-bot> <Nemokosch> One thing seems sure: XML::Entity::HTML might be horroristically slow - but that's not the only reason this module is embarrassingly slow

[08:23] <discord-raku-bot> <Nemokosch> Is there a tool by any chance that can monitor calls?

[08:23] <lizmat> raku --profile

[08:24] <lizmat> if you could get the code to run for up to a second or so in a single thread

[08:24] <lizmat> otherwise the generated HTML becomes too large for browsers to handle

[08:25] <discord-raku-bot> <Nemokosch> 😂

[08:25] <discord-raku-bot> <Nemokosch> then I'm gonna use raku --profile for generating HTML, instead of HTML::Tag

[08:25] <discord-raku-bot> <Nemokosch> 🤣

[08:25] <lizmat> hehe

[08:27] <discord-raku-bot> <Nemokosch> yes, in my current script, encode-html-entities is not called at all

[08:28] <discord-raku-bot> <Nemokosch> everything I generate is raw, and this isn't only for performance - the unofficial REST API I'm using gives back HTML fragments (sometimes even XML) because they wanted to help the browser anyway

[08:29] <discord-raku-bot> <Nemokosch> of course it would be nice to get encode-html-entities performant, but again, that in itself won't save this module

[08:30] <discord-raku-bot> <Nemokosch> and I started suspecting encode-html-entities might be too slow because of Raku's trans method

[08:31] <discord-raku-bot> <Nemokosch> it doesn't seem to do much besides calling trans

[08:31] <lizmat> I just had a look at Str.trans, and it could use some TLC now with new-disp developments and all

[08:31] <lizmat> but that would also be marginal I'd say

[08:33] <discord-raku-bot> <Nemokosch> is there something I'm missing about XML::Entity::HTML? or is it really just one object allocation and then calling trans, pretty much

[08:34] <lizmat> well, it schlepps in all of XML

[08:34] <lizmat> but from a cursory look at the code, yes, pretty much

[08:35] <discord-raku-bot> <Nemokosch> that's definitely inconvenient but I don't think it should be a cost for every single call made, importing the XML module that is

[08:36] *** linkable6 left
[08:36] *** evalable6 left
[08:36] <lizmat> what I see with ,trans is that it is building a hash for *each* call, with the given lookips

[08:36] <lizmat> *lookups

[08:37] *** linkable6 joined
[08:38] *** evalable6 joined
[08:39] <discord-raku-bot> <Nemokosch> I couldn't bet how much that holds the performance back but yes, that's definitely overkill

[08:39] <discord-raku-bot> <Nemokosch> that hash might be magnitudes bigger than the string to transform

[08:39] <lizmat> indeed

[08:41] <lizmat> there's also https://github.com/Mouq/HTML-Entity

[08:42] <lizmat> but that also uses trans

[08:42] <lizmat> ok, lemme take some code from XML::Entity::HTML and whip that up into a HTML::Entity::Fast

[09:02] *** jaguart joined
[09:20] <discord-raku-bot> <Nemokosch> You know, I replaced HTML::Entity

[09:20] <discord-raku-bot> <Nemokosch> because it's a pre-christmas module

[09:20] <discord-raku-bot> <Nemokosch> even the module format is obsolete

[09:21] <discord-raku-bot> <Nemokosch> it doesn't install with zef

[09:41] *** lichtkind__ joined
[09:43] *** Sgeo left
[09:45] *** Sankalp left
[09:47] *** Sankalp joined
[10:47] *** notable6 left
[10:47] *** committable6 left
[10:47] *** releasable6 left
[10:47] *** shareable6 left
[10:47] *** bisectable6 left
[10:47] *** quotable6 left
[10:47] *** nativecallable6 left
[10:47] *** statisfiable6 left
[10:47] *** evalable6 left
[10:47] *** tellable6 left
[10:47] *** unicodable6 left
[10:47] *** greppable6 left
[10:47] *** benchable6 left
[10:47] *** linkable6 left
[10:47] *** coverable6 left
[10:47] *** sourceable6 left
[10:47] *** bloatable6 left
[10:47] *** reportable6 left
[10:47] *** RaycatWhoDat joined
[10:47] <RaycatWhoDat> Hey, all.

[10:47] *** reportable6 joined
[10:47] *** statisfiable6 joined
[10:48] <RaycatWhoDat> I might have found a bug with set equality but I want to float it by y'all to make sure I'm not crazy.

[10:48] *** benchable6 joined
[10:48] *** tellable6 joined
[10:48] *** committable6 joined
[10:48] *** unicodable6 joined
[10:48] *** releasable6 joined
[10:48] <RaycatWhoDat> https://glot.io/snippets/gbwxz5e06i

[10:49] <RaycatWhoDat> Given that snippet above, is it correct to expect each assignment to be False?

[10:49] *** sourceable6 joined
[10:49] *** bloatable6 joined
[10:49] *** notable6 joined
[10:49] *** nativecallable6 joined
[10:49] <RaycatWhoDat> condition*

[10:49] *** evalable6 joined
[10:49] *** greppable6 joined
[10:49] *** bisectable6 joined
[10:49] *** quotable6 joined
[10:50] *** shareable6 joined
[10:50] *** linkable6 joined
[10:50] *** coverable6 joined
[10:51] *** sena_kun joined
[11:07] <lizmat> m: dd "abba" (==) "abbba"

[11:07] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::False␤»

[11:07] <lizmat> m: dd "abba".comb.Set (==) "abbba".comb,Set

[11:07] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::True␤Set␤»

[11:07] <lizmat> m: dd "abba".comb.Set (==) "abbba".comb.Set

[11:07] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::True␤»

[11:07] <lizmat> m: dd "abba".comb.Set (==) "abbba".comb

[11:07] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::True␤»

[11:07] <lizmat> at least the left hand side will have to be made a Set otherwise it will just compare two lists

[11:08] <discord-raku-bot> <Nemokosch> I think the behavior was nice

[11:08] <lizmat> m: dd <a b b a> (==) < a b b b a>   # what is happening effectively

[11:08] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::True␤»

[11:08] <lizmat> ah?

[11:08] <lizmat> hmmm

[11:09] <lizmat> intriguing

[11:10] <lizmat> Nemokosch: https://github.com/lizmat/HTML-Entities-Fast on its way to the ecosystem

[11:11] <tellable6> lizmat, I'll pass your message to Nemokosch

[11:19] <lizmat> m: dd "abba".comb (==) "abbba".comb

[11:19] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::True␤»

[11:19] <lizmat> hmmm

[11:20] <lizmat> RaycatWhoDat: correction, the last one should indeed be True

[11:20] <lizmat> it already coerces the left hand side to Set

[11:21] <RaycatWhoDat> That's a bit different than my understading of the operator

[11:22] <RaycatWhoDat> Should `(==)` return True if the sets are identical?

[11:22] <RaycatWhoDat> Shouldn't*

[11:22] <RaycatWhoDat> OH.

[11:23] <RaycatWhoDat> I see what you mean.

[11:23] <RaycatWhoDat> In that case, is there a better, duplicate-respecting way to compare two Seqs?

[11:25] <RaycatWhoDat> maybe...

[11:26] <RaycatWhoDat> m: dd "abba".comb.Bag === "abbba".comb.Bag

[11:26] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::False␤»

[11:26] <RaycatWhoDat> m: dd "abba".comb.Bag (==) "abbba".comb.Bag

[11:26] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::False␤»

[11:27] <RaycatWhoDat> Those two work, it seems

[11:27] <RaycatWhoDat> Cool, cool. Thanks for the clarification.

[11:29] <lizmat> m: m: dd "abba".comb.Bag === "abbba".comb

[11:29] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::False␤»

[11:29] <lizmat> m: m: dd "abbab".comb.Bag === "abbba".comb

[11:29] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::False␤»

[11:29] <lizmat> m: m: dd "abbab".comb.Bag === "abbba".comb.Bag

[11:29] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::True␤»

[11:29] <lizmat> hmmm

[11:29] <lizmat> m: m: dd "abbab".comb.Bag (==) "abbba".comb

[11:29] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::True␤»

[11:29] <lizmat> m: m: dd "abba".comb.Bag (==) "abbba".comb

[11:29] <camelia> rakudo-moar a7e9b1938: OUTPUT: «Bool::False␤»

[11:30] <lizmat> yeah, you don't need to .Bag the right hand side if the left side is a Bag

[11:30] <lizmat> it will allow it to shortcut on mismatch

[11:51] *** linkable6 left
[11:51] *** evalable6 left
[11:52] *** linkable6 joined
[11:53] *** evalable6 joined
[12:06] *** reportable6 left
[12:07] *** reportable6 joined
[13:01] *** saint- joined
[14:01] *** evalable6 left
[14:01] *** committable6 left
[14:01] *** notable6 left
[14:01] *** sourceable6 left
[14:01] *** bisectable6 left
[14:01] *** bloatable6 left
[14:01] *** unicodable6 left
[14:01] *** linkable6 left
[14:01] *** benchable6 left
[14:01] *** reportable6 left
[14:01] *** greppable6 left
[14:01] *** shareable6 left
[14:01] *** tellable6 left
[14:01] *** quotable6 left
[14:01] *** statisfiable6 left
[14:01] *** releasable6 left
[14:01] *** nativecallable6 left
[14:01] *** coverable6 left
[14:02] *** benchable6 joined
[14:02] *** releasable6 joined
[14:02] *** committable6 joined
[14:02] *** notable6 joined
[14:02] *** statisfiable6 joined
[14:02] *** bisectable6 joined
[14:03] *** evalable6 joined
[14:03] *** tellable6 joined
[14:03] *** bloatable6 joined
[14:03] *** unicodable6 joined
[14:03] *** linkable6 joined
[14:03] *** reportable6 joined
[14:04] *** greppable6 joined
[14:04] *** sourceable6 joined
[14:04] *** shareable6 joined
[14:04] *** nativecallable6 joined
[14:04] *** quotable6 joined
[14:04] *** coverable6 joined
[14:51] *** Xliff left
[15:42] *** MoC joined
[16:27] *** MoC left
[16:47] <ugexe> i wonder if it would be useful to have ENV vars for setting the paths of the named repos i.e. site/home/etc. particularly for doing e.g. RAKUDO_SITE_REPO_PATH="" RAKUDO_HOME_REPO_PATH="" etc (since disabling repos this way effectively allows one to control the entire repo chain to have a totally self contained app module location)

[17:27] *** evalable6 left
[17:27] *** linkable6 left
[17:29] *** linkable6 joined
[17:29] *** evalable6 joined
[18:07] *** reportable6 left
[18:07] *** reportable6 joined
[19:05] *** Sgeo joined
[19:52] *** kbtz left
[20:49] *** sena_kun left
[20:53] *** daxim left
[21:53] *** releasable6 left
[21:53] *** greppable6 left
[21:53] *** quotable6 left
[21:53] *** committable6 left
[21:53] *** linkable6 left
[21:53] *** sourceable6 left
[21:53] *** evalable6 left
[21:53] *** tellable6 left
[21:53] *** benchable6 left
[21:53] *** reportable6 left
[21:53] *** nativecallable6 left
[21:53] *** unicodable6 left
[21:53] *** coverable6 left
[21:53] *** bisectable6 left
[21:53] *** notable6 left
[21:53] *** statisfiable6 left
[21:53] *** bloatable6 left
[21:53] *** shareable6 left
[21:53] *** shareable6 joined
[21:53] *** bloatable6 joined
[21:54] *** sourceable6 joined
[21:54] *** reportable6 joined
[21:54] *** notable6 joined
[21:54] *** unicodable6 joined
[21:55] *** coverable6 joined
[21:55] *** releasable6 joined
[21:55] *** benchable6 joined
[21:55] *** evalable6 joined
[21:55] *** committable6 joined
[21:55] *** tellable6 joined
[21:55] *** statisfiable6 joined
[21:55] *** linkable6 joined
[21:56] *** greppable6 joined
[21:56] *** quotable6 joined
[21:56] *** nativecallable6 joined
[21:56] *** bisectable6 joined
[22:55] <tbrowder> ugexe: +1

[22:56] *** evalable6 left
[22:56] *** linkable6 left
[22:56] *** evalable6 joined
[22:57] *** jaguart left
[22:58] *** linkable6 joined
[22:58] *** Sankalp left
[23:01] *** Sankalp joined
[23:24] *** Sankalp left
[23:26] *** Sankalp joined
[23:34] *** lichtkind__ left
[23:37] *** vasko left
[23:43] *** vasko joined
[23:43] *** vasko left
[23:43] *** vasko joined
[23:51] <discord-raku-bot> <Quibono> So is there interest in alternative compilers/more backends?

[23:58] *** Sankalp left
