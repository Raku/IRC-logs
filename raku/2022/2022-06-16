[00:08] *** reportable6 left
[00:09] *** reportable6 joined
[00:39] *** KvL left
[00:39] *** KvL joined
[00:55] *** Sankalp left
[00:56] *** Sankalp joined
[01:50] *** frost joined
[02:27] *** frost left
[02:30] *** frost joined
[02:59] *** simcop2387 left
[03:02] *** simcop2387 joined
[04:02] *** sourceable6 left
[04:02] *** releasable6 left
[04:02] *** bisectable6 left
[04:02] *** greppable6 left
[04:02] *** reportable6 left
[04:02] *** benchable6 left
[04:02] *** notable6 left
[04:02] *** bloatable6 left
[04:02] *** coverable6 left
[04:02] *** unicodable6 left
[04:02] *** tellable6 left
[04:02] *** quotable6 left
[04:02] *** committable6 left
[04:02] *** linkable6 left
[04:02] *** nativecallable6 left
[04:02] *** evalable6 left
[04:02] *** shareable6 left
[04:02] *** statisfiable6 left
[04:02] *** shareable6 joined
[04:02] *** coverable6 joined
[04:02] *** bisectable6 joined
[04:02] *** tellable6 joined
[04:02] *** committable6 joined
[04:03] *** sourceable6 joined
[04:03] *** bloatable6 joined
[04:03] *** evalable6 joined
[04:03] *** unicodable6 joined
[04:03] *** statisfiable6 joined
[04:04] *** greppable6 joined
[04:04] *** benchable6 joined
[04:04] *** linkable6 joined
[04:04] *** quotable6 joined
[04:04] *** releasable6 joined
[04:04] *** nativecallable6 joined
[04:05] *** reportable6 joined
[04:05] *** notable6 joined
[05:03] *** mexen joined
[05:15] <sjn> is there a way to create character classes based on the content of previous captures in a regex?

[05:18] <sjn> e.g. m/( <[abc]> )( <[abc] - [$1]> )/;

[05:25] <sjn> interpolated character class set operations

[06:03] *** evalable6 left
[06:03] *** linkable6 left
[06:03] *** linkable6 joined
[06:04] *** evalable6 joined
[06:08] *** reportable6 left
[06:10] *** reportable6 joined
[07:10] *** evalable6 left
[07:10] *** linkable6 left
[07:10] *** linkable6 joined
[07:11] *** evalable6 joined
[07:24] *** Sgeo left
[07:32] *** Woodi_ is now known as Woodi

[07:36] *** [Coke]_ joined
[07:37] *** [Coke] left
[08:14] <MasterDuke> nope, not without using EVAL

[08:14] *** dakkar joined
[08:18] <discord-raku-bot> <Nemokosch#9980> regexes are sort of underpowered once you want to generate them

[08:18] <discord-raku-bot> <Nemokosch#9980> Bumped into this just a week ago or so

[08:18] <discord-raku-bot> <Nemokosch#9980> Praise for RakuAST as usual

[08:18] <discord-raku-bot> <Nemokosch#9980> Pray*

[08:33] *** dg left
[08:39] *** dg joined
[09:39] *** committable6 left
[09:39] *** nativecallable6 left
[09:39] *** quotable6 left
[09:39] *** shareable6 left
[09:39] *** greppable6 left
[09:39] *** coverable6 left
[09:39] *** unicodable6 left
[09:39] *** evalable6 left
[09:39] *** sourceable6 left
[09:39] *** reportable6 left
[09:39] *** statisfiable6 left
[09:39] *** tellable6 left
[09:39] *** notable6 left
[09:39] *** bloatable6 left
[09:39] *** benchable6 left
[09:39] *** linkable6 left
[09:39] *** bisectable6 left
[09:39] *** releasable6 left
[09:39] *** coverable6 joined
[09:39] *** nativecallable6 joined
[09:40] *** reportable6 joined
[09:40] *** committable6 joined
[09:40] *** tellable6 joined
[09:40] *** notable6 joined
[09:40] *** shareable6 joined
[09:40] *** greppable6 joined
[09:40] *** statisfiable6 joined
[09:40] *** evalable6 joined
[09:40] *** benchable6 joined
[09:41] *** releasable6 joined
[09:41] *** quotable6 joined
[09:41] *** linkable6 joined
[09:41] *** bisectable6 joined
[09:42] *** bloatable6 joined
[09:42] *** sourceable6 joined
[09:42] *** unicodable6 joined
[09:49] <lizmat> weekly: https://www.facebook.com/wgavdijk/posts/pfbid0r3T6fKyFvHd9YL9kRnMWMjHL5dxSrdAbzq9db2tCvaQUZJrA138g9vpjcb9CWhrsl

[09:49] <notable6> lizmat, Noted! (weekly)

[10:26] <El_Che> (link is not accessible without login in)

[10:28] * sienet_ja_LSD[m] uploaded an image: (138KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/WnhclWiVZMQaJPfToeUACoNU/image.png >

[10:28] <sienet_ja_LSD[m]> here's most of it 

[10:29] <El_Che> thx :)

[10:42] <lizmat> sienet_ja_LSD[m]++

[10:42] *** linkable6 left
[10:42] *** evalable6 left
[10:43] *** evalable6 joined
[10:44] *** linkable6 joined
[10:45] <lizmat> weekly: https://wendyga.wordpress.com/2022/06/16/we-will-raku/

[10:45] <notable6> lizmat, Noted! (weekly)

[11:44] *** linkable6 left
[11:44] *** evalable6 left
[11:44] *** notable6 left
[11:45] *** notable6 joined
[11:45] *** evalable6 joined
[11:45] *** linkable6 joined
[12:06] *** reportable6 left
[12:06] *** [Coke]_ is now known as [Coke]

[12:08] *** reportable6 joined
[12:15] <SmokeMachine> m: my @a = <a b c>; say $_, " -> ", ?m/(@a)<{@a.grep: { $_ ne $0 }}>/ for <ab bc ca aa bb cc> # son: not exactly what you want, but would that work?

[12:15] <camelia> rakudo-moar d253dc79e: OUTPUT: «ab -> True␤bc -> True␤ca -> True␤aa -> False␤bb -> False␤cc -> False␤»

[12:24] <SmokeMachine> m: say $_, " -> ", so m/( <[abc]> )( <[abc]> ) <?{$1 ne $0}>/ for <ab bc ca aa bb cc> # sjn or this

[12:24] <camelia> rakudo-moar d253dc79e: OUTPUT: «ab -> True␤bc -> True␤ca -> True␤aa -> False␤bb -> False␤cc -> False␤»

[12:28] <SmokeMachine> m: say $_, " -> ", so m/(<[abc]>) ** 2 <?{infix:<ne>(|$0)}>/ for <ab bc ca aa bb cc> # or

[12:28] <camelia> rakudo-moar d253dc79e: OUTPUT: «ab -> True␤bc -> True␤ca -> True␤aa -> False␤bb -> False␤cc -> False␤»

[12:29] <SmokeMachine> sjn: ☝️

[12:34] *** lichtkind joined
[13:23] *** Kaiepi joined
[13:24] *** jgaz joined
[13:29] *** morte_ joined
[13:31] * [Coke] forgot he wrote https://github.com/coke/raku-cal to have 'cal' on windows. wow, that is old and needs some updating.

[13:31] <[Coke]> (needs to switch to app-as-shim-for-lib model and add a META6.json)

[13:39] <dakkar> uh… I didn't know you could put a pair inside a «»

[13:40] <dakkar> m: say qq:ww{:a(1) b}.map: { $^a.WHAT };

[13:40] <camelia> rakudo-moar d253dc79e: OUTPUT: «((Pair) (Str))␤»

[13:40] <dakkar> m: say qq:w{:a(1) b}.map: { $^a.WHAT };

[13:40] <camelia> rakudo-moar d253dc79e: OUTPUT: «((Str) (Str))␤»

[13:40] <dakkar> https://docs.raku.org/language/quoting doesn't say anything about that… docbug?

[13:45] <dakkar> m: say qq:ww{:a(1)}.map: { $^a.WHAT }

[13:45] <camelia> rakudo-moar d253dc79e: OUTPUT: «((Pair))␤»

[13:45] <dakkar> m: say qq:ww{:a(1)}

[13:45] <camelia> rakudo-moar d253dc79e: OUTPUT: «␤»

[13:46] <dakkar> uh… why is it not printed?

[13:46] <dakkar> m: say qq:ww{:a(1) b}

[13:46] <camelia> rakudo-moar d253dc79e: OUTPUT: «(a => 1 b)␤»

[13:46] <dakkar> is there a special case for list-contaning-one-pair in `say` or `gist`?

[13:47] <dakkar> does it get interpreted as a named argument??

[13:49] <dakkar> (roast does specify that qqww recognises pairs, in `S02-literals/quoting.t`)

[13:57] *** morte_ left
[13:58] *** jgaz left
[14:12] *** ocomporto left
[14:18] <dakkar> uh…

[14:18] <dakkar> m: say «:a(1)»

[14:18] <camelia> rakudo-moar d253dc79e: OUTPUT: «a => 1␤»

[14:18] <dakkar> m: say Q:qq:ww:v{:a(1)}

[14:18] <camelia> rakudo-moar d253dc79e: OUTPUT: «a => 1␤»

[14:18] <dakkar> m: say qq:ww:v{:a(1)}

[14:18] <camelia> rakudo-moar d253dc79e: OUTPUT: «a => 1␤»

[14:18] <dakkar> m: say Q:qq:ww{:a(1)}

[14:18] <camelia> rakudo-moar d253dc79e: OUTPUT: «␤»

[14:18] <dakkar> ☝ I'm confused

[14:20] <dakkar> why does `say` behave differently depending on the `:v` adverb to `Q`?

[14:24] *** frost left
[14:38] *** vrurg_ is now known as vrurg

[14:38] *** Sgeo joined
[14:49] <[Coke]> :v is documented as "convert (value) to allomorph if possible"

[14:50] <ugexe> m: say Q:qq:ww{:a(1),}

[14:50] <camelia> rakudo-moar d253dc79e: OUTPUT: «(a => 1 ,)␤»

[14:51] <ugexe> https://docs.raku.org/syntax/Single%20Argument%20Rule

[14:52] <[Coke]> ordering seems to matter, :v:ww vs. :ww:v

[14:53] <[Coke]> m: say qq:v:ww{:a(1)}

[14:53] <camelia> rakudo-moar d253dc79e: OUTPUT: «(a 1)␤»

[14:53] <[Coke]> m: say qq:v{:a(1)}

[14:53] <camelia> rakudo-moar d253dc79e: OUTPUT: «:a(1)␤»

[14:53] <dakkar> ugexe: I'm not sure how single-argument applies without an iterator…

[14:54] <dakkar> [Coke]: that last one produces a string, as expected

[14:54] <[Coke]> for this kind of debugging, 'dd' may be more instructive than say

[14:54] <dakkar> tried that, didn't help

[14:54] <ugexe> well that would depend on the signatures of all the functions that end up getting called

[14:56] <dakkar> ugexe: proto say(|), multi say(\x), multi say(|)

[14:57] <dakkar> https://github.com/rakudo/rakudo/blob/master/src/core.c/io_operators.pm6#L109-L123

[14:58] <ugexe> is say really the only function used?

[14:58] <dakkar> how would I check that?

[14:58] <ugexe> i.e. Q v etc don't end up calling any functions?

[14:59] <dakkar> m: my @a=qq:ww:v{:a(1)}; dd @a

[14:59] <camelia> rakudo-moar d253dc79e: OUTPUT: «Array @a = [:a(1)]␤»

[14:59] <dakkar> m: my @a=qq:ww{:a(1)}; dd @a

[14:59] <camelia> rakudo-moar d253dc79e: OUTPUT: «Array @a = [:a(1)]␤»

[14:59] <dakkar> I *think* that means the difference is in `say`, but I don't know how to check better

[15:01] *** morte_ joined
[15:01] <[Coke]> you know say calls '.gist', yes?

[15:02] <dakkar> yes

[15:02] <dakkar> m: print qq:ww{:a(1)}.gist

[15:02] <camelia> rakudo-moar d253dc79e: OUTPUT: «a => 1»

[15:02] <dakkar> then again…

[15:03] <dakkar> m: print qq:ww:v{:a(1)}

[15:03] <camelia> rakudo-moar d253dc79e: OUTPUT: «a       1»

[15:03] <dakkar> m: print qq:ww{:a(1)}

[15:03] <camelia> rakudo-moar d253dc79e: ( no output )

[15:03] <dakkar> *something* is up

[15:03] <dakkar> it may well be correct and specced, but I'm not sure where to look

[15:03] <dakkar> m: print qq:ww{:a(1)}.gist

[15:03] <camelia> rakudo-moar d253dc79e: OUTPUT: «a => 1»

[15:03] <dakkar> m: print qq:ww:v{:a(1)}.gist

[15:03] <camelia> rakudo-moar d253dc79e: OUTPUT: «a => 1»

[15:04] <ugexe> i'm not suggesting its correct or specced, just that it seems like single arg rule might be behind it

[15:04] <dakkar> maybe? why would `:v` (make allomorphs) affect that?

[15:05] <ugexe> i dunno, presumably :v calls some function to turn a thing into an allomorph?

[15:05] <dakkar> (my starting assumption is "I'm missing something", not "stuff is broken" 😁)

[15:06] <dakkar> ugexe: but the weirdness only happens when the result of the quoting is used as arglist for a different call…

[15:07] <dakkar> should I open an issue? even if it turn out to be correct behaviour, it may still lead to some doc changes

[15:09] <dakkar> m: print (qq:ww:v{:a(1)})

[15:09] <camelia> rakudo-moar d253dc79e: OUTPUT: «a       1»

[15:09] <dakkar> m: print (qq:ww{:a(1)})

[15:09] <camelia> rakudo-moar d253dc79e: OUTPUT: «a       1»

[15:10] <dakkar> still a single argument, but gets printed

[15:10] <dakkar> m: print qq:ww{:a(1)}

[15:10] <camelia> rakudo-moar d253dc79e: ( no output )

[15:12] <dakkar> hmmm

[15:12] <dakkar> m: sub x(|c) { dd c }; x qq:ww{:a(1)}; x qq:ww:v{:a(1)}

[15:12] <camelia> rakudo-moar d253dc79e: OUTPUT: «\(:a(1))␤\("a" => 1)␤»

[15:12] <dakkar> I don't understand what I'm seeing

[15:13] <dakkar> m: sub x(|c) { dd c }; x qq:ww{:a(1)}; x qq:ww:v{:a(1)}; x (qq:ww{:a(1)})

[15:13] <camelia> rakudo-moar d253dc79e: OUTPUT: «\(:a(1))␤\("a" => 1)␤\("a" => 1)␤»

[15:15] * dakkar opens an issue

[15:16] <discord-raku-bot> <Nemokosch#9980> hello

[15:16] <discord-raku-bot> <Nemokosch#9980> do you have an idea when 6.e can be ready?

[15:17] <discord-raku-bot> <Nemokosch#9980> or what will it include, even

[15:20] *** jgaz joined
[15:24] *** Altai-man left
[15:25] *** sena_kun joined
[15:26] <dakkar> https://github.com/rakudo/rakudo/issues/4958 let's see what other people say

[15:51] *** johnjaye left
[16:10] <discord-raku-bot> <gfldex#8222> <@297037173541175296> the plan is to have it released with or shortly after RakuAST. That plan might be changed, tho. You can have a peek at: https://github.com/rakudo/rakudo/tree/master/src/core.e

[16:10] *** jgaz left
[16:14] <discord-raku-bot> <Nemokosch#9980> umm... what to see here? 😅

[16:28] *** sena_kun left
[16:30] *** sena_kun joined
[16:32] *** dakkar left
[16:52] *** eseyman left
[16:53] *** eseyman joined
[16:55] *** Kaiepi left
[17:02] <xinming> m: my %h = :a, :b, :c; my @a = <a b>; %h{@a}.raku.say;

[17:02] <camelia> rakudo-moar d253dc79e: OUTPUT: «(Bool::True, Bool::True)␤»

[17:03] <xinming> In this case, How can we also return a Hash rather than a List please?

[17:03] <moritz> m: my %h = :a, :b, :c; my @a = <a b>; %h{@a}:kv

[17:03] <camelia> rakudo-moar d253dc79e: ( no output )

[17:03] <moritz> m: my %h = :a, :b, :c; my @a = <a b>; say %h{@a}:kv

[17:03] <camelia> rakudo-moar d253dc79e: OUTPUT: «(a True b True)␤»

[17:03] <xinming> thx

[17:03] <moritz> m: my %h = :a, :b, :c; my @a = <a b>; say %h{@a}:pairs

[17:03] <camelia> rakudo-moar d253dc79e: OUTPUT: «Cannot resolve caller postcircumfix:<{ }>(Hash:D, Array:D, :pairs); none of these signatures matches:␤    (\SELF, Mu \key)␤    (\SELF, Mu \key, Mu \ASSIGN)␤    (\SELF, Mu \key, Mu :$BIND! is raw)␤    (\SELF, Mu \key, Bool(Any) :$delete!)␤   …»

[17:03] <moritz> m: my %h = :a, :b, :c; my @a = <a b>; say %h{@a}:p

[17:03] <camelia> rakudo-moar d253dc79e: OUTPUT: «(a => True b => True)␤»

[17:03] <xinming> thanks

[17:03] <moritz> list of pairs, not hash, but that's just one coercion away

[17:03] <moritz> you're welcome

[17:05] *** jgaz joined
[17:24] *** Kaiepi joined
[17:38] *** kawaii left
[18:07] *** reportable6 left
[18:08] <[Coke]> lizmat: anyone on RSC looking into replacing the perl6-users mailing list?

[18:09] *** reportable6 joined
[18:41] <lizmat> [Coke]: no, not at the moment

[18:41] <lizmat> volunteers welcome

[18:49] <[Coke]> might be worth asking if the folks supporting the perl* mailing lists can help; There wasn't interest in previous years, but now that we're one happy YAS...

[19:09] *** evalable6 left
[19:09] *** linkable6 left
[19:10] *** evalable6 joined
[19:11] *** linkable6 joined
[19:15] *** morte_ left
[19:20] *** MasterDuke left
[19:23] <drakonis> what does YAS stand for?

[19:33] <lizmat> Yet Another Society

[19:33] <lizmat> the official name of The Perl Foundation and the Raku Foundation

[19:33] <lizmat> TPF and RF are so-called "doing business as" names

[19:34] *** MasterDuke joined
[19:54] <drakonis> i see

[19:54] <lizmat> or "dba's" for short

[19:54] <drakonis> will the upcoming perl/raku conference will be recorded?

[20:01] <guifa> drakonis that's the plan, but it won't be livestreamed

[20:01] <drakonis> i see, alright then.

[20:06] *** morte_ joined
[20:07] *** p6steve joined
[20:10] <guifa> (the goal is to try to really go all in on the idea of an in-person conference.  I'm really looking forward to it)

[20:12] <drakonis> it'll be quite nice, nonetheless

[20:13] <guifa> I've just got to finish up my talks.  I'm a masochist and ended up agreeing to do three of them lol

[20:14] <drakonis> good job!

[20:14] <drakonis> that said

[20:15] <drakonis> coerce protocol talk?

[20:15] <guifa> for the new COERCE method that vrurg added to core

[20:15] <drakonis> oh, neat.

[20:16] <drakonis> how new is that one?

[20:16] <guifa> I think it the PR was committed late last year maybe? 

[20:16] <drakonis> oh, neat.

[20:18] <p6steve> a coerce talk is great - the raku approach to gradual typing and coercion is quite cool... we know it but many don't

[20:18] <drakonis> indeed it is

[20:18] <p6steve> also nice to hear the subtleties, trade offs and design approach (no pressure)

[20:19] <drakonis> i got into a perl discussion earlier today and rperl was brought up

[20:19] <drakonis> it seems like such a weird thing

[20:20] <coleman> I would be interested in a mailing list for Raku

[20:20] <drakonis> it is very much a half measure towards bringing raku and perl together

[20:20] <lizmat> rperl?

[20:20] <drakonis> but it has the ability to output executable binaries

[20:20] <drakonis> http://rperl.org/

[20:20] <lizmat> bringing perl and raku together ?

[20:20] <lizmat> yeah, I know about rprel

[20:21] <lizmat> that page does not mention raku

[20:21] <drakonis> it was written before the rename

[20:21] <p6steve> never heard of it - they (http://rperl.org) do "making perl run faster" -- no mention of raku

[20:21] <drakonis> back when it was perl 6

[20:21] <drakonis> it is part of a thing called perl11 i guess

[20:21] <lizmat> yeah, it parses a subset of Perl and generates C++ code

[20:22] <drakonis> it is more like nqp then

[20:22] <p6steve> no mention of perl6 or raku 

[20:22] <lizmat> perl11 is a pipe dream of the developer of rperl

[20:22] <drakonis> yes it is

[20:22] <drakonis> http://rperl.org/the_book_of_rperl.html

[20:22] <drakonis> it is a strange pipe dream

[20:23] <p6steve> tobacco?

[20:23] <drakonis> this is not helpful documentation

[20:23] <drakonis> no

[20:23] <drakonis> hallucinogenic drug fueled trips

[20:23] <drakonis> the documentation on cpan is a lot better

[20:23] <vrurg> rperl is mosly about producing binaries. Not even bytecode, by binaries as such.

[20:24] <drakonis> i'm interested only in the binaries bit but in raku

[20:24] <drakonis> which has been stalled for some time

[20:24] <drakonis> https://metacpan.org/release/WBRASWELL/RPerl-7.000000/view/lib/RPerl/Learning.pm

[20:24] <vrurg> It makes me feel weird because either it's Perl with all its power; or it's C or Rust for the performance. But castrated Perl??

[20:25] <drakonis> that sounds accurate

[20:25] <sienet_ja_LSD[m]> I would use rperl if the documentation was better

[20:25] <drakonis> https://metacpan.org/release/WBRASWELL/RPerl-7.000000/view/lib/RPerl.pm

[20:25] <drakonis> the documentation is ugly and the cpan docs are serviceable

[20:25] <drakonis> it looks a lot like a half-measure since it has a lot of hardcoded stuff that looks like it came from raku

[20:26] <sienet_ja_LSD[m]> I was supposed to do some OO project with it, but I couln't do it 

[20:26] <lizmat> for all practical purposes, rperl appears to be stalled for almost 2 years now?

[20:26] <drakonis> so it is.

[20:28] <El_Che> I don't think it went further than esoteric perl being interesting but not used at large

[20:28] <sienet_ja_LSD[m]> maybe I'll try it again if I'll play around with the examples

[20:28] <drakonis> it is more interesting to use raku anyways

[20:28] <drakonis> https://github.com/wbraswell/rperl/tree/master/docs this has some silly bits

[20:29] <drakonis> in special the modes

[20:30] <drakonis> http://rperl.org/the_low_magic_perl_commandments.html this bit in particular though

[20:31] <drakonis> it seems to suffer a lot from perl collapsing under the weight of its age

[20:32] <guifa> the author of that page is … eccentric. 

[20:33] <drakonis> i'm... aware...

[20:33] <p6steve> yes, raku is a great lifeboat for perl nuggets - i am really impressed by https://metacpan.org/pod/FFI::Platypus - and trying to rekindle in Dan::Polars

[20:34] <El_Che> trying to get C performance in a safe language is kind of the Holy Grail :)

[20:34] <p6steve> err - no its Rust

[20:34] <El_Che> nah

[20:34] <drakonis> i wonder why rperl has a operator for crypt lol

[20:34] <p6steve> not fast? not safe?

[20:34] <El_Che> it came and it did not take over the world, and not for lack of attention

[20:35] <drakonis> rust has been eating up some marketshare

[20:35] <drakonis> it takes time to displace the existing options

[20:35] <El_Che> slowly

[20:35] <p6steve> yeah - I've spent weeks knee deep in rust and it's hard

[20:35] <drakonis> since you can't replace C or C++ with it overnight

[20:35] <drakonis> then there are spaces that it needs a lot of investment to break into

[20:36] <El_Che> p6steve: I like the simplicity of Go

[20:36] <drakonis> like the data science space

[20:36] <El_Che> p6steve: so did most devops people so it took that space where it was not intended to

[20:36] <p6steve> you cant replace [Perl|Python|Ruby|PHP] (with raku) overnight either

[20:36] <guifa> As with all things, there are trade offs

[20:36] <drakonis> indeed not.

[20:37] <El_Che> it's a different comparison

[20:37] <drakonis> you can however write something useful that will slowly eat up the marketshare at the edges

[20:37] <drakonis> wrt replacing the common scripting languages

[20:37] <El_Che> there is stuff where perl and co still beat raku

[20:37] <drakonis> except usability and long term flexibility

[20:37] *** moon-child left
[20:38] <El_Che> there are advantages, but people care about different things

[20:38] <El_Che> ans like p6steve implied, there is inertia

[20:39] <drakonis> and inertia is truly a powerful thing

[20:40] <p6steve> El_Che: then try Occam!

[20:40] <El_Che> 's razor

[20:41] <El_Che> :)

[20:41] <El_Che> when and if I had the time I would like to pick up some rust

[20:41] <drakonis> occam, eh?

[20:41] <p6steve> El_Che: can always work on Dan::Polars ... 

[20:42] <El_Che> having a look

[20:42] <p6steve> sadly a bit early

[20:42] <El_Che> p6steve: you're into data science :)

[20:43] <p6steve> learning as I go

[20:43] <p6steve> yes occam: if it can fail, it will fail

[20:44] <El_Che> the rust integration looks more promising to me than inlining python

[20:44] <El_Che> python (and perl and ruby) are terrible to deploy

[20:44] <El_Che> (that's why go took devops from python)

[20:44] <El_Che> so maintaining several stacks of languages is not something I would like to do

[20:45] <El_Che> but on the other hand, I don't see people porting Panda :)

[20:45] <p6steve> we need Python for some level of feature completeness, interop for newcomers/compatibity and workflows to eg plotting

[20:45] <p6steve> BUT rust/pandas/arrow2 is a good match for raku (fast, lazy, better API)

[20:46] <p6steve> rust is nice to deploy as a lib

[20:47] <p6steve> just a pig to code

[20:48] <El_Che> so nativecall is lipstick :)

[20:48] <p6steve> the notion with Pandas is just EVAL anything that looks like df.pl.XXX() ... so just have to maintain as a proxy

[20:51] <p6steve> well Polars Python binding uses maturin - we have nativecall :: rust FFI and nothing in between

[20:52] <p6steve> no - raku is the lipstick!

[20:56] <drakonis> lipstick on a pig, eyyyy

[20:58] *** jgaz left
[20:59] <p6steve> El_Che: do consider helping on Dan::Polars - it has the right levels of abstration and performance to be awesome

[21:00] <p6steve> El_Che: and you can add rust to your CV

[21:02] <drakonis> how long until rakuast is merged into the main branch?

[21:02] <drakonis> also, how long until the opposite happens?

[21:02] <El_Che> p6steve: I am not in that field

[21:52] <p6steve> El_Che: ;-)

[21:58] *** evalable6 left
[21:58] *** linkable6 left
[22:00] *** evalable6 joined
[22:01] *** linkable6 joined
[22:07] *** morte_ left
[22:47] <Geth> ¦ ecosystem: f1858bec0e | (Elizabeth Mattijsen)++ | META.list

[22:47] <Geth> ¦ ecosystem: Remove Spreadsheet::XLSX

[22:47] <Geth> ¦ ecosystem: 

[22:47] <Geth> ¦ ecosystem: It lives in the zef ecosystem now

[22:47] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/f1858bec0e

[22:52] <kybr> i'm trying the code here: https://docs.raku.org/type/IO::Notification#method_watch-path ;; except, i am using a different file (not syslog) and updating manually. I only see a couple of events come out of the tap. Is this expected behaviour?

[22:54] <kybr> that is, saving the watched file seems to produce a file-renamed event and a file-changed event after the first update, but subsequent manually updates to the file produce no events.

[23:07] *** evalable6 left
[23:07] *** linkable6 left
[23:10] *** evalable6 joined
[23:10] *** linkable6 joined
