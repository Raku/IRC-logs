[00:08] *** reportable6 left
[00:08] *** reportable6 joined
[01:08] *** shareable6 left
[01:08] *** unicodable6 left
[01:08] *** committable6 left
[01:08] *** tellable6 left
[01:08] *** quotable6 left
[01:08] *** nativecallable6 left
[01:08] *** evalable6 left
[01:08] *** linkable6 left
[01:08] *** statisfiable6 left
[01:08] *** bisectable6 left
[01:08] *** reportable6 left
[01:08] *** notable6 left
[01:08] *** releasable6 left
[01:08] *** sourceable6 left
[01:08] *** benchable6 left
[01:08] *** bloatable6 left
[01:08] *** coverable6 left
[01:08] *** greppable6 left
[01:09] *** greppable6 joined
[01:09] *** reportable6 joined
[01:09] *** nativecallable6 joined
[01:09] *** statisfiable6 joined
[01:10] *** notable6 joined
[01:10] *** bloatable6 joined
[01:10] *** releasable6 joined
[01:10] *** evalable6 joined
[01:10] *** coverable6 joined
[01:10] *** unicodable6 joined
[01:10] *** sourceable6 joined
[01:11] *** shareable6 joined
[01:11] *** benchable6 joined
[01:11] *** tellable6 joined
[01:11] *** quotable6 joined
[01:11] *** bisectable6 joined
[01:11] *** committable6 joined
[01:11] *** linkable6 joined
[02:11] *** benchable6 left
[02:11] *** linkable6 left
[02:11] *** sourceable6 left
[02:11] *** quotable6 left
[02:11] *** committable6 left
[02:11] *** tellable6 left
[02:11] *** releasable6 left
[02:11] *** coverable6 left
[02:11] *** greppable6 left
[02:11] *** unicodable6 left
[02:11] *** bisectable6 left
[02:11] *** statisfiable6 left
[02:11] *** notable6 left
[02:11] *** evalable6 left
[02:11] *** bloatable6 left
[02:11] *** shareable6 left
[02:11] *** reportable6 left
[02:11] *** nativecallable6 left
[02:12] *** shareable6 joined
[02:12] *** committable6 joined
[02:12] *** sourceable6 joined
[02:12] *** releasable6 joined
[02:12] *** bisectable6 joined
[02:12] *** coverable6 joined
[02:13] *** benchable6 joined
[02:13] *** tellable6 joined
[02:13] *** unicodable6 joined
[02:13] *** notable6 joined
[02:13] *** evalable6 joined
[02:14] *** statisfiable6 joined
[02:14] *** nativecallable6 joined
[02:14] *** greppable6 joined
[02:14] *** reportable6 joined
[02:14] *** linkable6 joined
[02:14] *** bloatable6 joined
[02:14] *** quotable6 joined
[02:53] *** abraxxa-home left
[03:08] <xinming> SmokeMachine: https://termbin.com/a11h    <-- This is the test script to trigger the issue.

[03:18] <xinming> when running the script, a db named     test_record_db        will be dropped and then created

[03:53] *** linkable6 left
[03:53] *** evalable6 left
[03:54] *** evalable6 joined
[03:55] *** linkable6 joined
[04:13] *** nebuchad` joined
[04:13] *** andinus` joined
[04:14] *** andinus left
[04:14] *** nebuchadnezzar left
[04:51] *** Xliff joined
[04:52] <Xliff> \o

[04:52] <tellable6> 2022-06-06T01:45:58Z #raku-dev <vrurg> Xliff https://github.com/rakudo/rakudo/issues/4933#issuecomment-1146947454 ‚Äì this might be of interest for you.

[04:54] <Xliff> m: package A { our enum abc <a b c> is export }; import A;

[04:54] <camelia> rakudo-moar d4e8b671a: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> package A { our enum abc <a b c>‚èè is export }; import A;‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        st‚Ä¶¬ª

[04:54] <Xliff> m: package A { our enum abc <a b c> is export;  }; import A;

[04:54] <camelia> rakudo-moar d4e8b671a: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> package A { our enum abc <a b c>‚èè is export;  }; import A;‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        ‚Ä¶¬ª

[04:55] <Xliff> m: package A { our enum abc is export <a b c>  }; import A;

[04:55] <camelia> rakudo-moar d4e8b671a: ( no output )

[04:55] <Xliff> m: package A { our enum abc is export <a b c>  }; import A; abc.enums.say

[04:55] <camelia> rakudo-moar d4e8b671a: OUTPUT: ¬´Map.new((a => 0, b => 1, c => 2))‚ê§¬ª

[04:55] <Xliff> m: package A { our enum abc is export <a b c>  }; import A; abc.enums.say; abc.^name.say

[04:55] <camelia> rakudo-moar d4e8b671a: OUTPUT: ¬´Map.new((a => 0, b => 1, c => 2))‚ê§abc‚ê§¬ª

[04:55] <Xliff> ^^ How can I get the package name of enum abc?

[05:26] *** nebuchad` is now known as nebuchadnezzar

[06:07] *** reportable6 left
[06:07] *** reportable6 joined
[06:32] *** Oshawott joined
[06:35] *** archenoth left
[06:58] *** Sgeo left
[07:12] *** lichtkind_ joined
[07:24] *** MikeyHoef joined
[07:29] *** ocomporto left
[07:49] *** abraxxa joined
[07:53] *** abraxxa left
[08:03] *** abraxxa joined
[08:07] *** abraxxa left
[08:08] *** abraxxa joined
[09:06] *** Kaiepi left
[09:26] *** Kaiepi joined
[09:34] *** Sankalp left
[09:35] *** Sankalp joined
[09:50] <discord-raku-bot> <Nemokosch#9980> Is it just me or `div` not ensuring numeric context is pretty inconsistent with overall design?

[09:52] *** discord-raku-bot left
[09:52] *** discord-raku-bot joined
[09:54] <discord-raku-bot> <Nemokosch#9980> It's not really nice. I wouldn't even use `div` if normal division weren't considerably slower

[10:00] <Xliff> m: package A { our enum abc is export <a b c>  }; import A; abc.enums.say; abc.^name.say

[10:00] <camelia> rakudo-moar d4e8b671a: OUTPUT: ¬´Map.new((a => 0, b => 1, c => 2))‚ê§abc‚ê§¬ª

[10:00] <Xliff> ^^ How can I get the package name of enum abc?

[10:07] <MasterDuke> Nemokosch: what do you mean about numeric context?

[10:07] <tellable6> MasterDuke, I'll pass your message to Nemokosch

[10:09] <discord-raku-bot> <Nemokosch#9980> '6' / 2 is 3, except it's a Rat and not a performant operation overall

[10:09] <discord-raku-bot> <Nemokosch#9980> '6' div 2 on the other hand is an error

[10:10] <discord-raku-bot> <Nemokosch#9980> I want to use div for the sole reason / is proven to be not performant enough

[10:11] <discord-raku-bot> <Nemokosch#9980> calling div= in particular so no, most calls won't need the conversion

[10:12] <MasterDuke> `/` has https://github.com/rakudo/rakudo/blob/master/src/core.c/Numeric.pm6#L228, but there's no equivalent for `div`

[10:13] <discord-raku-bot> <Nemokosch#9980> $n div $m should at least attempt to convert to Int, if it only operates on Int

[10:15] <discord-raku-bot> <Nemokosch#9980> probably the same for mod

[10:16] <discord-raku-bot> <Nemokosch#9980> in the large list of operators, I rarely see operators that do not coerce

[10:16] *** MARTIMM joined
[10:16] <MasterDuke> i think someone pointed out the apparent inconsistency on the mailing list a little while ago, but i don't believe anything became of it

[10:17] <discord-raku-bot> <Nemokosch#9980> I'm not even saying if this approach of coercions is good or not but I am saying that given this approach, it's inconsistent to rule out `div` and `mod`

[10:19] <discord-raku-bot> <Nemokosch#9980> Can I open an issue for this?

[10:19] <MasterDuke> sure

[10:20] <discord-raku-bot> <Nemokosch#9980> üëç

[10:22] *** discord-raku-bot left
[10:22] *** discord-raku-bot joined
[10:24] *** frost joined
[10:27] <MasterDuke> fwiw, adding a new multi for infix:<div> that coerces to Int passes a spectest and makes `say "6" div 2` return 3

[10:29] *** discord-raku-bot left
[10:29] *** discord-raku-bot joined
[10:39] *** MARTIMM left
[10:48] <discord-raku-bot> <Nemokosch#9980> in fact, even gcd coerces...

[11:04] <discord-raku-bot> <Nemokosch#9980> done

[11:04] <discord-raku-bot> <Nemokosch#9980> under Problem-Solving as this related to language design

[11:10] *** frost left
[11:33] *** frost joined
[11:43] *** lichtkind_ left
[12:01] <Xliff> m: package A { our enum abc is export <a b c>  }; import A; abc.enums.say; abc.^name.say

[12:01] <camelia> rakudo-moar d4e8b671a: OUTPUT: ¬´Map.new((a => 0, b => 1, c => 2))‚ê§abc‚ê§¬ª

[12:01] <Xliff> ^^ How can I get the package name of enum abc?

[12:03] <MasterDuke> m: package A { our sub foo() is export { say "hi" } }; import A; say &foo.package

[12:03] <camelia> rakudo-moar d4e8b671a: OUTPUT: ¬´(A)‚ê§¬ª

[12:04] <MasterDuke> Routines have a `.package`, but most things don't. i'm not sure how to do it for the enum

[12:04] <Xliff> Yeah. That's what I noticed.

[12:04] <Xliff> That seems to be a bit of an oversight.

[12:06] <Xliff> I've even tried punning a role that would contain the package name, but enums cannot take a role, either.

[12:06] <Xliff> m: role B { }; package A { our enum abc is export <a b c>  }; import A; abc does B;

[12:06] <camelia> rakudo-moar d4e8b671a: OUTPUT: ¬´Cannot use 'does' operator on a type object abc.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:20] *** jjido joined
[12:40] *** jjido left
[13:22] *** morte_ joined
[13:26] *** abraxxa left
[13:27] *** abraxxa joined
[13:28] *** jgaz joined
[13:32] *** abraxxa left
[13:32] *** abraxxa joined
[13:53] *** Kaiepi left
[13:55] *** morte_ left
[14:04] *** p6steve joined
[14:07] *** frost left
[14:08] *** archenoth joined
[14:10] *** Oshawott left
[14:14] *** lizmat joined
[14:21] *** morte_ joined
[14:29] <p6steve> hi! what's the best way to test for num32 / num64?

[14:29] *** lizmat_ joined
[14:30] <p6steve> [need to determine this to make CArray[num32] or CArray[num64] ]

[14:31] <moritz> what do you want to test for num32/num64?

[14:32] *** lizmat left
[14:33] *** lizmat_ is now known as lizmat

[14:34] * lizmat clickbaits https://rakudoweekly.blog/2022/06/06/2022-23-learly-release/

[14:38] *** lizmat left
[14:38] *** lizmat joined
[14:41] <p6steve> moritz: I want to use NativeCall CArray to send data to populate a Rust / Polars Series object 

[14:42] <p6steve> moritz: so I need to specify if I have a CArray[num32] or a CArray[num64]

[14:43] <p6steve> I have thought of .min/.max vs. the extreme values of num32, but...

[14:43] <p6steve> m:[1, 3, 5, NaN, Inf, 6, 8].max.say

[14:43] <evalable6> p6steve, rakudo-moar d4e8b671a: OUTPUT: ¬´NaN‚ê§¬ª

[14:43] <p6steve> m:[1, 3, 5, Inf, 6, 8].max.say

[14:43] <evalable6> p6steve, rakudo-moar d4e8b671a: OUTPUT: ¬´Inf‚ê§¬ª

[14:45] *** xcanehan joined
[14:45] <moritz> let the user decide, no?

[14:46] <moritz> that probably know better what precision they need than you

[14:47] *** Sgeo joined
[14:47] <moritz> *they

[14:51] <Voldenet> .max is not valid either way, your best bet is to use num64 and let users specify

[14:54] <Voldenet> the simplest way is to convert every value to single precision, then double and afterwards compare if single precision result matches double precision

[14:56] <[Coke]> folks, could use more eyes on the upcoming revision of the doc site, please ping me if you have some time to review the changes.

[14:56] <Voldenet> m: use NativeCall; sub Create(:$type = num64) { CArray[$type].new([10e0,1e30]).map(*.say).sink }; Create(); Create(:type(num32))

[14:57] <camelia> rakudo-moar d4e8b671a: OUTPUT: ¬´10‚ê§1e+30‚ê§10‚ê§1.0000000150474662e+30‚ê§¬ª

[14:57] <p6steve> moritz: tempted by user knows argument, but the tradition in Pandas/Polars is Series.new([1,2,3...]); and I think forcing user to specify makes API more complex

[14:58] <moritz> p6steve: you don't have to force the user, you can just default to one, and let the user specify an option to select the other

[14:58] <moritz> but the num32/num64 choice isn't just about possible range, but also about precision; and you cannot infer the user's need for precision based on their data

[14:59] <p6steve> Voldenet: surely min/max are faster / less memory than converting every entry (some dataframes are order 50GB ... not that I'm attempting this scale yet ;-)

[14:59] <Voldenet> but min/max is invalid in terms of precision, as you can see

[14:59] <Voldenet> 1e30 "fits" in num32

[15:00] <Voldenet> I think pandas use float64 by default

[15:01] <nine> p6steve: then go with num64 as a safe default and offer options to work with reduced precision

[15:03] <p6steve> both: OK - I will default to num64 and provide option to [coerce to] num32 - this is probably a better target for Rats also (since they have higher precision than even num64) 

[15:03] <Voldenet> in fact, pandas handles NaN in int64 arrays, which may sound weird

[15:04] <p6steve> Voldenet: yes ... this is just WRONG in many ways ...

[15:05] <Voldenet> or maybe it was numpy, I'm not entirely sure

[15:05] <Voldenet> either way, people dealing with numbers know differences between data types

[15:06] <p6steve> Voldenet: my initial design for OOTB Raku Dan Series is !!! untyped (and that the .dtype method is just an alias for .are) 

[15:07] <p6steve> Voldenet: Python Pandas uses the Numpy NAN as the universal "missing" value

[15:08] <Voldenet> ‚Ä¶and it's quite weird

[15:09] <p6steve> Voldenet: IMO it is common to see users (and even coders) get confused about numeric data types (esp. decimals)

[15:09] *** morte_ left
[15:10] *** abraxxa-home joined
[15:11] <Voldenet> It is common, because things like matlab silently handle it‚Ä¶ somehow

[15:11] <p6steve> now I think about it the cast and compare method is the only safe way (and even that may confound expectations)

[15:12] <Voldenet> it's not the only safe way, the other safe way would be checking bitmasks

[15:12] <Voldenet> knowing the architecture's single/double precision numbers layout

[15:12] <p6steve> I don't think so

[15:13] <p6steve> There are a lot of denormalised numbers near the extremes

[15:13] <p6steve> That's what I mean about confound - you may be lucky that your precision needs are met for the numbers you test, but not in general

[15:16] *** xcanehan left
[15:16] <p6steve> Really appreciate the feedback!

[15:17] <Voldenet> m: use NativeCall; my $*num-type = num64; sub Create(:$type = $*num-type) { CArray[$type].new([10e0,1e30]).map(*.say).sink }; Create(); Create(:type(num32)); { my $*num-type = num32; Create(); }

[15:17] <camelia> rakudo-moar d4e8b671a: OUTPUT: ¬´10‚ê§1e+30‚ê§10‚ê§1.0000000150474662e+30‚ê§10‚ê§1.0000000150474662e+30‚ê§¬ª

[15:17] <Voldenet> I consider this pretty sane

[15:17] <Voldenet> you don't have to care until you do

[15:20] <p6steve> just to wax lyrical, both Pandas and Polars implement read_csv methods that parse columns of numbers into numbers ... I have not got under the hood on this ... don;t know if they handle Ints, what are defaults etc. ... AFAIK they do dates too

[15:21] <p6steve> sooo - as it happens Raku is just awesome for this ... it's just OOTB (and lazy)

[15:23] <p6steve> Voldenet: I like your example - will follow!

[15:25] <Voldenet> (though i'd try to have pure C api and C-macros defined storage types)

[15:31] <Voldenet> (the reason is more control when representing something like `struct Num64 { double value; ChangeLog(Num64) * log; 

[15:31] <Voldenet> }`)

[15:31] <Voldenet> which could really make debugging work easier

[15:36] <Voldenet> or rather `struct Num64 { double value; ChangeLog(struct Num64) log; };`

[15:51] *** Kaiepi joined
[16:51] *** notable6 left
[16:51] *** bisectable6 left
[16:51] *** tellable6 left
[16:51] *** bloatable6 left
[16:51] *** benchable6 left
[16:51] *** quotable6 left
[16:51] *** sourceable6 left
[16:51] *** linkable6 left
[16:51] *** coverable6 left
[16:51] *** shareable6 left
[16:51] *** nativecallable6 left
[16:51] *** unicodable6 left
[16:51] *** committable6 left
[16:51] *** statisfiable6 left
[16:51] *** reportable6 left
[16:51] *** greppable6 left
[16:51] *** evalable6 left
[16:51] *** releasable6 left
[16:51] *** shareable6 joined
[16:51] *** greppable6 joined
[16:51] *** benchable6 joined
[16:52] *** sourceable6 joined
[16:52] *** reportable6 joined
[16:52] *** bisectable6 joined
[16:52] *** coverable6 joined
[16:52] *** unicodable6 joined
[16:52] *** abraxxa left
[16:52] *** nativecallable6 joined
[16:52] *** statisfiable6 joined
[16:52] *** releasable6 joined
[16:53] *** evalable6 joined
[16:53] *** bloatable6 joined
[16:53] *** linkable6 joined
[16:53] *** committable6 joined
[16:53] *** notable6 joined
[16:53] *** quotable6 joined
[16:54] *** tellable6 joined
[17:24] <p6steve> m:> sub xx( :$dtype ) { given $dtype {when num32 {say "yo"}} }; xx(dtype => num32);

[17:24] <evalable6> p6steve, rakudo-moar d4e8b671a: OUTPUT: ¬´(exit code 1) 4===SORRY!4=== Er‚Ä¶¬ª

[17:24] <evalable6> p6steve, Full output: https://gist.github.com/8fe6bd5cbf8a401853c9ca7e38ad7d71

[17:25] <p6steve> m:sub xx( :$dtype ) { given $dtype {when num32 {say "yo"}} }; xx(dtype => num32);

[17:25] <evalable6> p6steve, rakudo-moar d4e8b671a: OUTPUT: ¬´yo‚ê§¬ª

[17:26] <p6steve> hmmm - this works here and in the repl on my machine, but not in my script

[17:28] <sienet_ja_LSD[m]> p6steve: I tried that Dan module of yours, seems to work, but I wonder if it has matrix methods like outer product. or would you recommend using Math::Matrix instead for those kind of operations

[17:32] <p6steve> sienet: thanks for giving it a spin - sorry that there is not much elaboration of the design / roadmap so far

[17:34] <sienet_ja_LSD[m]> there's great potential atleast

[17:34] <p6steve> sienet: in a nutshell, you have 3 modules Dan, Dan::Pandas and Dan::Polars - they have (largely) the same API

[17:36] <sienet_ja_LSD[m]> I got to fix the python Inline thing, there were some errors installing it

[17:38] <p6steve> sienet: suggest you take a look at the Dockerfile - I also had some issues (the Dan::Jupyter module should get you up with a Jupyter Notebook if you prefer)

[17:39] <p6steve> sienet: so - Dan::Pandas is the history - interface via Inline::Python to Python Pandas --- we need this now for all 435 Pandas methods, to interop with Seaborn and Matplotlib etc

[17:39] <sienet_ja_LSD[m]> my docker skills are extremely rusty, but I might try it out. jupyter is very usable

[17:41] <p6steve> sienet: Dan is the future, I have deliberately kept the common API very minimal - and frankly I do not have the tuits to rebuild all of Pandas, the idea is to (i) modularize the API so that there is a base API [already "there"]

[17:41] <sienet_ja_LSD[m]> yeah it will be nice

[17:42] <p6steve> sienet: (ii) then we can have Mezzanine modules for aspects such as (SQL) Query, Math, Set, that largely work through (i) so that we can keep the base API focused and tuned

[17:43] <sienet_ja_LSD[m]> so how does it work, if I want some statistical functions, is using the inline Pandas module the way to go?

[17:44] <sienet_ja_LSD[m]> installing Inline::Python errors ===> Searching for missing dependencies: python3:from<native>

[17:44] <sienet_ja_LSD[m]> No such method 'as' for invocant of type 'Any'

[17:44] <p6steve> sienet: Dan::Polars is the present (but it is not ready yet!), why? because we need to apply some resource to build bridges to eg Math::Matrix ... and that will take too long (also Polars is fast)

[17:45] <sienet_ja_LSD[m]> aye, ok nice

[17:45] <p6steve> sienet: so until Dan::Polars is MVP, then the practical answer is please use Dan::Pandas for anything you need not in the base Dan API, or consider just useing the base Dan API directly.

[17:47] <sienet_ja_LSD[m]> ok, well I'm going to need to report the zef installing error to get Inline::Python working

[17:48] <p6steve> sienet: the base Dan API gives you transparent access to a native Raku M x N array eg. my \df = DataFrame.new(...), df.data, so you should be able to do something in MAth::Matrix like df1.data OP df2.data directly

[17:49] <sienet_ja_LSD[m]> hmm, I'll try that, seems easier that way

[17:50] <p6steve> sienet: then you can maybe go my \df3 = DataFrame.new( data => df1.data OP df2.data )

[17:51] <sienet_ja_LSD[m]> aye

[17:51] <p6steve> sienet: sienet: try this zef install https://github.com/niner/Inline-Python.git --exclude="python3" 

[17:51] <p6steve> sienet: from here https://github.com/p6steve/raku-Dockerfiles/blob/main/raku-dan-pandas/stage-2/Dockerfile

[17:52] <sienet_ja_LSD[m]> nice, it did in fact install, thanks

[17:54] *** evalable6 left
[17:54] *** linkable6 left
[17:55] <sienet_ja_LSD[m]> Dan::Pandas install errors though

[17:56] *** linkable6 joined
[17:56] <sienet_ja_LSD[m]> [Dan::Pandas] Invalid typename 'Dan::Series' in parameter declaration. [Dan::Pandas] ------>     multi method new( Dan::Series:D‚èè \s ) {

[17:56] <sienet_ja_LSD[m]> [Dan::Pandas]     expecting any of:

[17:56] <sienet_ja_LSD[m]> [Dan::Pandas]         pair value

[17:57] *** evalable6 joined
[17:57] <p6steve> sienet: please can you post the error, maybe open an issue on Gh https://github.com/p6steve/raku-Dan-Pandas

[17:59] <sienet_ja_LSD[m]> aye

[17:59] <p6steve> sienet: what do you get from 'zef info Dan' ??

[18:00] <sienet_ja_LSD[m]> - Info for: Dan... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/437e39bbc10468f801353a6110fae7040fbc1454)

[18:01] <sienet_ja_LSD[m]> I opened up an issue

[18:02] <p6steve> sienet: tx for posting it -- maybe try zef install --force-test Dan::Pandas

[18:02] <p6steve> sienet: tx ... 

[18:03] <sienet_ja_LSD[m]> the error persists, line 73 of Dan::Pandas

[18:07] *** reportable6 left
[18:08] *** jjido joined
[18:08] <p6steve> sienet: please can you add your kit (raku version & platform info) to the issue

[18:08] <sienet_ja_LSD[m]> aye sure

[18:09] *** reportable6 joined
[18:09] <p6steve> maybe try zef install --verbose https://github.com/p6steve/raku-Dan-Pandas.git (not sure if fez has the latest)

[18:10] <p6steve> sienet: otherwise, I will have to roll up my sleeves ... will revert via the issue

[18:13] <sienet_ja_LSD[m]> added the infos

[18:21] <p6steve> sienet: meantime here is a live jupyter notebook setup for your investigation (I only have one for now) https://container-service-1.gs7k0bfrb4gvk.eu-west-2.cs.amazonlightsail.com/lab?

[18:22] <p6steve> the login token is fd4e8fac86a88a68e7201a1dd54ced42c1ad5a0836a739e9

[18:22] <sienet_ja_LSD[m]> nice, thanks

[18:22] <p6steve> sienet: don't worry about making changes and so on (there is a known glitch in here that the raku Jupyetr kernel will restart)

[18:23] <sienet_ja_LSD[m]> oh ok

[18:25] <p6steve> sienet: sorry think I was "fighting" you!

[18:26] <sienet_ja_LSD[m]> hehe

[18:26] <p6steve> sienet: also please do join the IPRC raku track if you can later in the month as I will be presenting some more info

[18:27] <p6steve> https://tprc2022.sched.com/event/11nf9/rakudan-re-inventing-the-dataframe

[18:27] <sienet_ja_LSD[m]> aye I will

[18:27] *** lichtkind joined
[18:45] *** HobGoblin joined
[18:46] *** kawaii_ joined
[18:46] *** ecocode____ joined
[18:47] *** PotatoGim_ joined
[18:48] *** jcallen_ joined
[18:49] *** El_Che_ joined
[18:50] *** ecocode___ left
[18:50] *** PotatoGim left
[18:50] *** kawaii left
[18:50] *** El_Che left
[18:50] *** jcallen left
[18:50] *** goblin left
[18:50] *** kawaii_ is now known as kawaii

[18:50] *** ecocode____ is now known as ecocode___

[18:50] *** PotatoGim_ is now known as PotatoGim

[19:39] *** vrurg left
[19:39] *** vrurg joined
[20:37] *** Geth left
[20:57] <[Coke]> any ideas why File::Directory::Tree's rmtree might be failing under windows?

[20:59] <[Coke]> oh, because I'm an idiot. Nevermind.

[21:00] *** lizmat left
[21:04] *** jgaz left
[21:40] <phogg> Using Windows can have that effect on people.

[22:01] *** lizmat joined
[22:05] *** lizmat left
[22:12] *** jjido left
[22:13] *** abraxxa-home left
[23:09] *** jjido joined
[23:43] *** Xliff left
[23:44] *** lichtkind left
[23:47] <[Coke]> (I had created a test for it to delete ages ago... that was a file, not a directory)

[23:49] *** thowe left
[23:53] *** jgaz joined
