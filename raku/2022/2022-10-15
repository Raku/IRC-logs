[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:32] *** bigdata joined
[00:46] *** jgaz joined
[00:58] *** Kaipii left
[01:03] *** Kaipii joined
[01:12] *** [Coke]__ joined
[01:15] *** [Coke] left
[01:17] *** frost26 joined
[01:19] *** [Coke]__ is now known as [Coke]

[01:20] *** jgaz left
[02:00] *** bigdata left
[02:53] *** epony left
[03:44] *** Sauvin left
[03:44] *** Colere joined
[04:38] *** razetime joined
[04:56] *** epony joined
[05:46] *** Xliff left
[05:46] *** kueppo joined
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[06:16] <Kernspin> Guten Morgen / Bonjour / Доброе утро / Good morning.

[06:44] *** Nemokosch joined
[06:48] *** sivoais left
[07:31] *** razetime left
[07:36] *** MoC joined
[07:37] *** kueppo left
[07:40] *** sivoais joined
[07:42] *** Abhoerschutz joined
[07:43] <Nemokosch> [Coke]: the idea sounds really good but unfortunately I have no idea how...

[07:44] *** Abhoerschutz left
[07:45] *** Kernspin left
[07:45] *** Kernspin joined
[07:47] *** Abhoerschutz joined
[07:59] *** jjido joined
[08:01] *** razetime joined
[08:20] *** Abhoerschutz left
[08:21] *** Abhoerschutz joined
[08:30] *** daxim joined
[08:51] *** jgaz joined
[08:54] *** kueppo joined
[09:18] *** jjido left
[09:28] *** kueppo left
[09:45] *** sena_kun left
[09:46] *** sena_kun joined
[10:02] *** jgaz left
[10:05] *** labster joined
[10:06] *** Kernspin left
[10:08] *** Kernspin joined
[10:09] <Nemokosch> Something doesn't click in.

[10:09] <Nemokosch> If I have a script, the MAIN function can take enums

[10:09] <Nemokosch> If I have a module, apparently it can't.

[10:09] <Nemokosch> How do I fix that?

[10:10] <lizmat> can't give an answer to this question: insufficient data

[10:10] <lizmat> unless you want me to rubberduck  :-)

[10:11] <Nemokosch> Well, have you used an enum in the CLI of a module?

[10:11] <lizmat> I've used True and False, yes ?

[10:11] *** Kernspin left
[10:12] *** Kernspin joined
[10:12] <Nemokosch> An enum that lives in the module of the CLI, that is

[10:12] *** Abhoerschutz left
[10:13] <lizmat> Nemokosch: I'm now spending cycles trying to figure out what you mean

[10:13] *** Abhoerschutz joined
[10:14] <lizmat> I'd rather spend that on fixing any known problem

[10:14] <Nemokosch> it shouldn't be that hard, though

[10:14] <Nemokosch> there is the MAIN subroutine and it can take enums, that will be parsed okay - in theory

[10:15] <Nemokosch> now, since I made my script a module under lib/ and export MAIN, trying to use it from a script

[10:15] <Nemokosch> doesn't work anymore

[10:17] *** frost26 left
[10:20] <Nemokosch> it's really easy to reproduce, too, I'm gonna make a golfed gist in a sec

[10:22] <Nemokosch> https://gist.github.com/2colours/d85b593f70a0b6e557c61f733f00d9c6

[10:22] <Nemokosch> in a mi6 generated default module under lib and bin respectively

[10:23] <Nemokosch> running demo.raku Wolves will just give you the usage

[10:24] <Nemokosch> tried exporting the enum as well, didn't help on it

[10:25] *** frost56 joined
[10:25] * lizmat is looking at it

[10:25] *** tadzik left
[10:26] *** crystalfrost[m] left
[10:26] *** CIAvash left
[10:26] *** Matthew|m left
[10:26] *** AlexDaniel left
[10:26] *** andrea[m] left
[10:31] *** CIAvash joined
[10:51] <lizmat> Nemokosch: I think it's a bug, located at https://github.com/rakudo/rakudo/blob/master/src/core.c/Main.pm6#L75

[10:51] *** AlexDaniel joined
[10:51] *** crystalfrost[m] joined
[10:51] *** Matthew|m joined
[10:51] *** MitarashiDango[m joined
[10:51] *** tadzik joined
[10:51] *** andrea[m] joined
[10:52] <Abhoerschutz> Where can I found out, what modules (like Perl DBI::) Raku already owns?

[10:52] <Abhoerschutz> Where can I finnd out, what modules (like Perl DBI::) Raku already owns?

[10:52] <Abhoerschutz> Where can I find out, what modules (like Perl DBI::) Raku already owns?

[10:54] <lizmat> Abhoerschutz: you could check raku.land

[10:54] <Abhoerschutz> lizmat: Oh, thank you! Great.

[10:54] <lizmat> Nemokosch: I think the ::(a) doesn't work in the import case

[10:55] <lizmat> Nemokosch: you could check if there's already an issue for it, and if not, create one

[10:56] <Abhoerschutz> lizmat: Very futuristic, nice website (raku.land).

[10:58] *** labster left
[10:58] <lizmat> Nemokosch: I don't see an easy workaround atm

[10:59] <Nemokosch> My workaround was to use a string and convert it with EnumName::{$str}

[10:59] <lizmat> well,, yeah.. but that's not generic  ;-)

[11:00] <Nemokosch> I don't know what ::(a) is or how it comes into play

[11:03] *** kueppo joined
[11:03] *** Kaipei joined
[11:05] *** kueppo left
[11:06] *** Kaiepi joined
[11:07] *** Kaipii left
[11:08] *** Kaipei left
[11:09] <lizmat> Nemokosch: https://github.com/rakudo/rakudo/blob/master/src/core.c/Main.pm6#L75

[11:40] *** lichtkind joined
[11:54] *** Kernspin left
[11:54] *** Kernspin joined
[11:55] *** Abhoerschutz left
[11:55] *** Abhoerschutz joined
[12:06] *** reportable6 left
[12:07] *** reportable6 joined
[12:20] *** bigdata joined
[12:29] *** gugod left
[12:32] *** derpydoo joined
[12:46] *** Abhoerschutz left
[12:46] *** Abhoerschutz joined
[13:09] *** dextercd joined
[13:14] *** gugod joined
[13:19] *** frost56 left
[13:36] <Nemokosch> lizmat: I will check on the issues, I'm just not sure what to look for

[13:36] <lizmat> enum?

[13:38] *** sena_kun left
[13:38] <Nemokosch> doesn't seem to help a lot

[13:39] <Nemokosch> also, CLI allomorphs have further problems so it might not be named with "enum" somewhere

[13:40] <Nemokosch> you might remember the Label fail where the built-in Label sabotaged parsing to the customly defined enum Label

[13:40] <Nemokosch> Something else: is it possible that Cro had no realease for almost a year?

[13:40] *** Nemokosch left
[13:43] *** sena_kun joined
[13:45] <guifa_> Nemokosch: it's actively being developed, my guess is they just haven't been doing formal github releases

[13:45] <tellable6> guifa_, I'll pass your message to Nemokosch

[13:45] <Abhoerschutz> Good afternoon. Guten Nachmittag.

[13:46] <guifa_> o/

[13:49] <discord-raku-bot> <Nemokosch> guifa_: no newer releases on raku.land

[14:26] *** derpydoo left
[14:26] *** [Coke]___ joined
[14:29] *** [Coke] left
[15:15] *** habere-et-disper joined
[15:39] *** Kernspin left
[15:39] *** Kernspin joined
[15:42] *** Kernspin left
[15:43] *** Kernspin joined
[15:47] *** Abhoerschutz left
[15:47] *** Abhoerschutz joined
[16:06] *** sena_kun left
[16:23] *** Colere is now known as Sauvin

[16:24] *** masukomi joined
[16:24] *** sena_kun joined
[16:24] *** sena_kun left
[16:25] <discord-raku-bot> <Nemokosch> Another interesting error for today:

[16:25] <discord-raku-bot> <Nemokosch> I have a module that contains the following line of code:

[16:25] <discord-raku-bot> <Nemokosch> const %specpath-from-projectid = %?RESOURCES<project_paths.conf>.IO.words;

[16:27] <discord-raku-bot> <Nemokosch> I get the following error at compilation: # Missing serialize REPR function for REPR VMIter (BOOTIter)

[16:27] <discord-raku-bot> <Nemokosch> if I change that line to `my %specpath-from-projectid`, it works

[16:27] <discord-raku-bot> <Nemokosch> if I add `const $unused = %?RESOURCES<project_paths.conf>.IO.words.Map; dd $unused;`, it also works logs the correct value for $used

[16:30] <ugexe> probably isn't a great idea to store lazy sequences in a compile time constant

[16:35] *** kueppo joined
[16:37] *** kueppo left
[16:38] <discord-raku-bot> <Nemokosch> except it's not a lazy sequence but a Hash

[16:39] <ugexe> .words does not return a Hash

[16:39] <discord-raku-bot> <Nemokosch> % does, however

[16:40] <discord-raku-bot> <Nemokosch> that assignment is eager

[16:40] <ugexe> i was talking about the one i dont expect to work; the lazy one

[16:41] <ugexe> if you're asking why the other ones works, well you already answered that

[16:41] <discord-raku-bot> <Nemokosch> there was no lazy one

[16:41] *** Nemokosch joined
[16:42] <Nemokosch> beep boop

[16:42] <tellable6> 2022-10-15T13:45:16Z #raku <guifa_> Nemokosch: it's actively being developed, my guess is they just haven't been doing formal github releases

[16:42] <Nemokosch> m: % = 1..* #hangs becouse _it is eager_

[16:42] <camelia> rakudo-moar 4cdb55850: OUTPUT: «(timeout)»

[16:43] <discord-raku-bot> <Nemokosch> why would `const %specpath-from-projectid = ` be any different?

[16:44] <discord-raku-bot> <Nemokosch> *constant, of course

[16:45] <discord-raku-bot> <Nemokosch> `constant %specpath-from-projectid = %?RESOURCES<project_paths.conf>.IO.words.Map` also doesn't work, it really _is_ about the sigil difference

[16:46] <discord-raku-bot> <Nemokosch> not laziness

[16:47] *** Nemokosch left
[16:48] <ugexe> m: const $a = 1

[16:48] <camelia> rakudo-moar 4cdb55850: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$a' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> const ⏏$a = 1␤»

[16:48] <ugexe> m: constant $a = 1

[16:48] <camelia> rakudo-moar 4cdb55850: ( no output )

[16:49] <ugexe> seems like `const $unused = ` should be throwing a compile time error and not work in any scenario

[16:50] <discord-raku-bot> <Nemokosch> what is the difference between the $ version and the % version, then?

[16:51] *** jjido joined
[16:51] <ugexe> not sure, and i already spent some cycles trying to mentally debug something that doesnt compile :P

[16:53] <ugexe> my next guess would be somehow related to the .IO call on RESOURCES doesnt return a normal IO::Path object like an e.g. string does

[16:53] <ugexe> how that would affect that code, i dunno. but it is a difference between what you have and like constant %a = "META6.json".IO.words; say %a

[16:55] <ugexe> what if you calls .words without the .IO?

[16:55] <ugexe> %?RESOURCES<...>.words

[16:55] <evalable6> ugexe, rakudo-moar 4cdb55850: OUTPUT: «Use of Nil.words coerced to empty string␤  in block <unit> at /tmp/mpUHzCwYs0 line 1␤»

[16:55] <discord-raku-bot> <Nemokosch> should `constant %a = "META6.json".IO.words` work? 😄 At this point, I'm not sure if I can follow the narrative

[16:56] *** MoC left
[16:57] <ugexe> it doesnt even matter if it works or not, only that it has the same behavior as your example

[16:57] <ugexe> (which it doesnt have the same behavior, to be clear)

[16:59] <ugexe> when i try to reproduce i get a different error

[16:59] <ugexe> ===SORRY!=== Error while compiling /Users/ugexe/repos/zef/bin/zef

[16:59] <ugexe> Cannot do 'readchars' on a closed handle

[17:05] <ugexe> https://github.com/rakudo/rakudo/blob/dad8ea029e026a8db2fa206b2b66344178c80c48/src/core.c/Distribution/Resource.pm6#L7-L9

[17:05] <ugexe> is probably relevant

[17:14] *** haxxelotto joined
[17:23] <discord-raku-bot> <Nemokosch> Cannot do readchars was with $ = and without the .Map

[17:41] *** jjido left
[17:41] *** Abhoerschutz left
[17:41] *** Abhoerschutz joined
[17:43] <discord-raku-bot> <Nemokosch> mentioned commits: https://github.com/rakudo/rakudo/commit/647abfea2d9adce2a06454736d6d6b9d6a77b844

[17:43] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/commit/d4d6a9976403c7a8339aaf44d3fb9e9656c28232

[17:45] <discord-raku-bot> <Nemokosch> from these, I don't see how "IO() **MUST** be determined at runtime" would follow, and in particular I don't think it was about this use case

[17:45] *** Nemokosch joined
[17:45] <discord-raku-bot> <Nemokosch> is there a way to modify a resource file after installation?

[17:47] *** derpydoo joined
[17:49] <discord-raku-bot> <Nemokosch> (to share my reasoning: if there is a transparent way to change resource files, I will gladly promote that possibility to the supposed users and use runtime resolution; if there isn't, slurping the content of the file could and should work, or else uglier workarounds need to be applied for the same effect)

[17:57] <ugexe> once something has been installed it is meant to be immutable

[17:58] *** jgaz joined
[17:59] <ugexe> just allow it to be overriden in a location where its logical for the user to have write access to files `my $config = try { "~/.config/myapp/config.json".IO.slurp } || %?RESOURCES<config.json>`

[18:01] *** justVain is now known as justache

[18:03] *** razetime left
[18:04] <discord-raku-bot> <Nemokosch> oh by the way, just now I checked... a Resource has loads of methods that call self.IO but it doesn't sound obvious that all those methods would inherit the "must be called at runtime" warning

[18:04] <discord-raku-bot> <Nemokosch> nope, slurp doesn't work either xD

[18:06] <discord-raku-bot> <Nemokosch> tbh it might be the most convenient if I simply expect the config file to be in the $*CWD, I need to see Windows compatibility anyway

[18:06] <ugexe> you could also try like `$*DISTRIBUION.content("resources/config.json").open.slurp(:close)`

[18:06] <ugexe> if you expect the config file in $*CWD then i doubt its going to work once installed

[18:07] <ugexe> https://github.com/ugexe/zef/blob/3398a89d4a2aa47035e3fee83337c2f8568c5c9a/lib/Zef/Config.rakumod#L29-L32

[18:07] *** reportable6 left
[18:07] <ugexe> its pretty simple

[18:08] *** reportable6 joined
[18:08] <discord-raku-bot> <Nemokosch> I think the discussion is getting a bit messy. The $*CWD idea was meant for the runtime resolution, and for that, I see no reason why it wouldn't work

[18:08] <ugexe> ...because installed things can run at runtime?

[18:09] <ugexe> if myapp expects the config to be in $*CWD, you install myapp, and then change directories do you want it to not work?

[18:10] <discord-raku-bot> <Nemokosch> I don't like the way this question is phrased lol but basically yes, that's exactly what I want.

[18:10] <discord-raku-bot> <Nemokosch> I want it to work wherever the supposed user put the file with the supposed name and content.

[18:11] <ugexe> i wouldnt bother making it a distribution then, since its not really distributed in the sense that libraries are

[18:11] *** haxxelotto left
[18:12] <ugexe> i guess i don't understand. i would just suggest doing it how zef does it since it provides defaults, user overrides, and is proven to work on basically all OS

[18:13] <ugexe> https://github.com/ugexe/zef#global-configuration

[18:14] <discord-raku-bot> <Nemokosch> I mean, it's really not a "distribution". It's just a directory that can be zef-installed for 1. dependency management 2. running tests 3. precompilation of actual code

[18:15] <ugexe> it would be precompiled without installing fwiw

[18:16] <ugexe> i usually run those types of "apps" like `raku -I $dir-containing-meta6 $dir-containing-meta6/bin/myapp`

[18:19] <ugexe> although its true that installation guarantees all the files are precompiled immediately (revealing potential compile errors) 

[18:19] <discord-raku-bot> <Nemokosch> I'm not sure how it behaves but I have no issues with having an "undistributed", but otherwise zef-compatible "app"

[18:20] <discord-raku-bot> <Nemokosch> like I don't see big disadvantages to what I'm doing, even if it's not meant to use most of typical distribution stuff

[18:20] <ugexe> sometimes people write tests that don't end up using every module, and thus e.g. `prove6 t/` could show all tests passing but it would fail on install when one of those unused-in-tests modules gets installed/precompiled

[18:23] <discord-raku-bot> <Nemokosch> and fwiw I don't badly need this "constant from resource file" feature (if I need it at all) but I do think the behavior is strange and the prohibition of compiling resource file content into the module is badly reasoned

[18:25] <discord-raku-bot> <Nemokosch> Actually I feel lucky that I'm getting a feel for what is likely to be the problem, even when I think something could "just work"

[18:27] <discord-raku-bot> <Nemokosch> CLI parsing, on the other hand, is really starting to be a problem, with the name collisions and badly exported enums

[18:38] <ugexe> constant $config = $?DISTRIBUTION.content("resources/config.json").open(:bin).slurp(:close).decode.words;

[18:38] <evalable6> ugexe, rakudo-moar 4cdb55850: OUTPUT: «Use of Nil.words coerced to empty string␤  in block  at /tmp/Ukckui_Lbr line 1␤»

[18:38] <ugexe> so uh that works too lol

[18:39] *** jetchisel left
[18:39] <ugexe> i suppose s/:bin// and s/.decode// would be the same and slightly shorter

[18:41] *** haxxelotto joined
[18:42] *** jetchisel joined
[18:45] <discord-raku-bot> <Nemokosch> interesting, what is the content method?

[18:47] <ugexe> https://github.com/rakudo/rakudo/blob/4cdb5585049a142cb22c5bda85b6a2c127b65645/src/core.c/Distribution.pm6#L2-L18

[18:48] <ugexe> basically you give content() a path as it is written in the meta6.json file

[18:48] <ugexe> so .content("lib/Foo.rakumod") or .content("resources/whatever.json") 

[18:54] *** kueppo joined
[18:54] *** Manifest0 joined
[18:56] <ugexe> some explanation in this old advent post as well https://perl6advent.wordpress.com/2016/12/16/day-16-the-meta-spec-distribution-and-compunitrepository-explained-ish/

[18:58] <discord-raku-bot> <Nemokosch> thanks

[18:59] *** habere-et-disper left
[19:07] *** derpydoo left
[19:08] <guifa_> whoa

[19:08] <guifa_> someone changed the $*DISTRO on the mac side from "macosx" to "macos"

[19:08] <guifa_> easy fix for one of my modules but I was wondering why detection was way off

[19:18] *** derpydoo joined
[19:24] *** jgaz left
[19:49] *** kueppo left
[20:10] *** Nemokosch left
[20:36] <discord-raku-bot> <Nemokosch> > Often used as a Boolean value. See operator. Made via the use keyword.

[20:37] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/glossary#iffy

[20:37] <discord-raku-bot> <Nemokosch> am I braindead or the "Made via the use keyword" remark makes no sense in this context?

[20:37] *** sena_kun joined
[20:49] *** derpydoo left
[20:56] *** sena_kun left
[20:57] *** sena_kun joined
[20:59] *** haxxelotto left
[20:59] *** haxxelotto joined
[21:00] *** sena_kun left
[21:01] *** sena_kun joined
[21:05] *** derpydoo joined
[21:08] *** Xliff joined
[21:18] <Xliff> \o

[21:19] <Xliff> [Coke] - Your gh wiki page isn't a bad idea for a dashboard.

[21:19] <Xliff> An app server with controls might be a better one. Depends on how detailed you want to get with your dashboard.

[21:19] <Xliff> Where are you getting your data? What metrics do you want to track?

[21:20] *** jgaz joined
[21:23] *** sena_kun left
[21:24] *** sena_kun joined
[21:25] *** Justin joined
[21:26] *** Justin is now known as Justin546

[21:27] <Justin546> Can anyone tell me if I need to install postgres for Red ORM?

[21:27] <Xliff> Justin546, If you are going to use Postgres in your application, then yes.

[21:28] <Xliff> It does depend on DB::Pg

[21:28] <Justin546> I would prefer not to but when I zef install Red I get "Failed to find dependencies: pq:ver<5>:from<native>"

[21:29] <Xliff> You can "zef install Red --force-install"

[21:29] <Justin546> Oh!  Okay, I'll try that.  Thanks!

[21:30] <Xliff> You may also want to do that to DB::Pg

[21:30] <Xliff> If push comes to shove you can always install Postgres and not use it.

[21:32] <guifa_> nemokosch: that's a joke, there, I think.

[21:32] <tellable6> guifa_, I'll pass your message to Nemokosch

[21:34] *** TieUpYourCamel left
[21:34] <Justin546> Xliff: yeah --force-install didn't seem to do anything. I just wondered if this was normal as no mention of it anywhere.

[21:35] <Xliff> Justin546, ah. mea cupla.

[21:35] <Xliff> culpa, even :)

[21:35] <Xliff> So just go ahead and install libpq

[21:37] <discord-raku-bot> <Nemokosch> guifa_: apparently I'm not in a funny enough mood 😄

[21:37] <Justin546> I had that thought but abandoned it when I did apt search libpq and got 50 or so results.

[21:37] <Xliff> Yeah. It's there. That's the proper package name for Debian/Ubuntu

[21:37] <Justin546> Xliff: libpq5, maybe?

[21:38] <Xliff> Er. That's the one.

[21:38] <Xliff> I don't know why they don't create a pseudo package pointing to the latest version. The dev package is still libpq-dev

[21:39] <discord-raku-bot> <Nemokosch> Is PostgreSQL really needed for Red? 🤔 I wouldn't have thought. What a nuisance

[21:39] <Justin546> That did the trick! Thanks.

[21:39] <Xliff> Nemokosch - Yeah. It's a dependency. 

[21:40] <Xliff> Justin546, yw.

[21:41] <discord-raku-bot> <Nemokosch> what if somebody doesn't plan to use PostgreSQL? 😅

[21:41] *** jetchisel left
[21:43] <guifa_> niiiiice

[21:43] <guifa_> I just made a super simple module that produces a supply that emits anytime the timezone info changes (e.g. daylight savings time)

[21:43] <guifa_> to use it's as simple as

[21:43] <Xliff> guifa_++

[21:44] <Xliff> guifa_, source?

[21:44] *** haxxelotto left
[21:44] <guifa_> reach { whenever timezone-shifts() -> $metadata { ... } } 

[21:44] <guifa_> Xliff: I'm still self-bikeshedding names before I publish :-)

[21:45] <Xliff> reach?

[21:45] <guifa_> react

[21:45] <discord-raku-bot> <Nemokosch> react, right?

[21:45] <Xliff> guifa_, Ah, OK. I was hoping to take a look at it so I can finally figure out the Supply paradigm.

[21:46] <Xliff> I still have some misconceptions about react/whenever.

[21:46] <guifa_> Right now I've tentatively named the module Timezones::Live but that just sounds..... so..... HI I'M MARKETING LOOK AT MY FANCY NEW THING

[21:46] <Xliff> LOL

[21:46] <Xliff> Timezones::Event?

[21:46] <Xliff> Hmmm.... same thing!? ^_^

[21:47] <Xliff> Event::Timezone ? (LOL!)

[21:47] <Xliff> Maybe.... Timezone::React?

[21:49] <guifa_> hmmm React sounds less market-y especially in the context of Raku since it's a keyword we have

[21:49] <Xliff> Good.

[21:50] <discord-raku-bot> <Nemokosch> I'm also curious about Supply's

[21:50] <Xliff> Timezone::Action ?

[21:50] <guifa_> I think React is perfect

[21:51] <Xliff> =D

[21:51] <guifa_> I'll finish documenting and I'll publish

[21:51] <Xliff> \o/

[21:51] <guifa_> problem is... I don't really know how to write a test file for it

[21:51] <Xliff> LOL. 

[21:51] <discord-raku-bot> <Nemokosch> I need a pushable and pullable queue for a TS discord bot

[21:51] <guifa_> "Please change your computer's clock to a few minutes before your timezone will change.  then run the test file and wait until it happens"

[21:52] <Xliff> Maybe a docker container where you do just that?

[21:52] <guifa_> yeah but that's not doable in the module test file

[21:52] <guifa_> I just tested it as thoroughly as I could where I manually inserted values

[21:53] <Xliff> Hmm... I could be more help if I saw the source. +D

[21:53] *** sena_kun left
[21:53] <vrurg> The module could easily be extended to produce not only timezone events. For future developement I would consider naming it DateTime::<something>.

[21:54] <guifa_> vrurg: hmm, good point

[21:54] <Xliff> Yeah. It is... when it actually uses a DateTime

[21:54] <guifa_> it could chunk events like when the day rolls over, months roll over, etc

[21:54] <Xliff> Until then, I would leave it TimeZone

[21:54] <Xliff> guifa: Now THAT is worth the rename.

[21:54] <vrurg> Xliff: renaming a module is a big trouble.

[21:55] <Xliff> vrurg: Ah. OK. Didn't know that.

[21:55] <guifa_> I did it recently

[21:55] <guifa_> This was my tactic

[21:55] <vrurg> Xliff: just consider you have dependencies on that module.

[21:55] <guifa_> https://github.com/alabamenhu/UserTimezone/blob/master/lib/Intl/UserTimezone.rakumod

[21:58] *** TieUpYourCamel joined
[22:00] <guifa_> okay between Xliff and vrurg this module is going to take a bit longer :-)

[22:00] <guifa_> but I'll gist my current code for Xliff

[22:03] *** Justin546 left
[22:04] <Xliff> guifa++

[22:04] *** sena_kun joined
[22:05] <guifa_> Xliff: https://gist.github.com/alabamenhu/fe0ef49bc0d4ec0f0a7ea428c32232a6

[22:05] <Xliff> guifa: As for testing, create a custom timezone, compile it with zic -- set DST change over for 30 seconds in the future.  Switch timezones. Start test. Wait 30. If no event within that time, then the test fails.

[22:06] <vrurg> guifa_: consider different code structure. Something like `supply { loop { await $promise; emit; } }`

[22:07] <vrurg> This way you wouldn't consume a thread.

[22:07] <guifa_> the supply would still run async though?

[22:08] <Xliff> vrurg: Could that structure be repeated for multiple events?

[22:08] <vrurg> Sure it will.

[22:08] <Xliff> 'EVENT1: { supply { loop { await $promise; emit; }; }; EVENT2: { supply { loop { await $promise2; emit; }; }; ...

[22:08] <vrurg> Xliff: of course. There are many ways. Promise.any to await for a couple of promises. Supply.merge for several supplies.

[22:09] <Xliff> vrurg: Could you give me example of Supply.merge?

[22:09] <vrurg> Xliff: not that way. `supply` returns a Supply. So, you could react on them separately. Or merge into a single one.

[22:10] <Xliff> Id want to react separately. Sorry I misread.

[22:10] <vrurg> Xliff: TIMTOWTDI ;)

[22:12] <vrurg> Related to the module, it could be something like `react { whenever DateTime::React.timezone { ... }; whenever DateTime::React.date { ... }; }`

[22:12] <vrurg> Ok, I'll be unable to type for a while.

[22:12] * vrurg is afk&

[22:30] *** sena_kun left
[22:35] *** derpydoo left
[22:36] <Xliff> guifa: Adding many DateTime components to the gist. 

[22:36] <Xliff> One sec.

[22:36] *** haxxelotto joined
[22:40] <guifa_> Xliff nice.  Although the week will be ... more complicated

[22:40] <guifa_> I'll need to get the user's language code for that

[22:40] <guifa_> since some places start on Sun, Mon, etc

[22:41] <Xliff> This is going strictly by rakudo's truncated-to

[22:41] <Xliff> So it will be Sunday. Will have to add offsets for special-case SOW.

[22:42] <Xliff> Although, in those cases, they might be better off going with the day trigger and checking the time attribute for the right date.

[22:42] *** haxxelotto left
[22:42] <guifa_> In general my goal is for all my stuff to be pretty internationally aware from the get go, so I'll figure out a way :-)

[22:43] <Xliff> Here's what I get when that event is tripped: Minute shifted for event TimeEvent.new(time => DateTime.new(2022,10,15,18,36,0,:timezone(-14400)))

[22:43] * guifa_ wants Raku to be the go-to easy-to-use language that works internationally

[22:43] <Xliff> It triggers every minute, as expected.

[22:43] <Xliff> And I now have a better grasp of Suppliers, supplies and react/whenever. 

[22:43] <Xliff> Thanks!

[22:49] *** Sgeo left
[22:51] *** dextercd left
[22:52] *** Sgeo joined
[22:52] *** lichtkind left
[23:02] *** haxxelotto joined
[23:41] *** jetchisel joined
[23:45] *** bigdata left
[23:57] *** jgaz left
