[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[00:55] *** epony left
[01:27] *** sftp left
[01:30] *** sftp joined
[01:56] *** frost joined
[01:59] *** Xliff left
[02:00] *** epony joined
[03:00] *** notable6 left
[03:00] *** committable6 left
[03:00] *** squashable6 left
[03:00] *** statisfiable6 left
[03:00] *** linkable6 left
[03:00] *** evalable6 left
[03:00] *** benchable6 left
[03:00] *** nativecallable6 left
[03:00] *** unicodable6 left
[03:00] *** bloatable6 left
[03:00] *** shareable6 left
[03:00] *** greppable6 left
[03:00] *** releasable6 left
[03:00] *** sourceable6 left
[03:00] *** reportable6 left
[03:00] *** quotable6 left
[03:00] *** bisectable6 left
[03:00] *** tellable6 left
[03:00] *** coverable6 left
[03:01] *** statisfiable6 joined
[03:01] *** committable6 joined
[03:01] *** notable6 joined
[03:01] *** bloatable6 joined
[03:01] *** quotable6 joined
[03:01] *** squashable6 joined
[03:02] *** benchable6 joined
[03:02] *** sourceable6 joined
[03:02] *** evalable6 joined
[03:02] *** unicodable6 joined
[03:02] *** releasable6 joined
[03:03] *** reportable6 joined
[03:03] *** coverable6 joined
[03:03] *** nativecallable6 joined
[03:03] *** greppable6 joined
[03:03] *** shareable6 joined
[03:03] *** linkable6 joined
[03:03] *** tellable6 joined
[03:04] *** bisectable6 joined
[03:26] *** Sgeo_ joined
[03:27] *** Sgeo left
[03:30] *** Kaiepi left
[03:31] *** Kaiepi joined
[04:16] *** Sgeo__ joined
[04:19] *** Sgeo_ left
[05:05] *** Oshawott left
[06:05] *** quotable6 left
[06:05] *** bisectable6 left
[06:05] *** nativecallable6 left
[06:05] *** evalable6 left
[06:05] *** unicodable6 left
[06:05] *** releasable6 left
[06:05] *** sourceable6 left
[06:05] *** bloatable6 left
[06:05] *** linkable6 left
[06:05] *** coverable6 left
[06:05] *** notable6 left
[06:05] *** statisfiable6 left
[06:05] *** squashable6 left
[06:05] *** greppable6 left
[06:05] *** tellable6 left
[06:05] *** benchable6 left
[06:05] *** shareable6 left
[06:05] *** committable6 left
[06:05] *** reportable6 left
[06:05] *** committable6 joined
[06:05] *** linkable6 joined
[06:05] *** unicodable6 joined
[06:05] *** greppable6 joined
[06:06] *** coverable6 joined
[06:06] *** releasable6 joined
[06:06] *** bloatable6 joined
[06:06] *** quotable6 joined
[06:06] *** bisectable6 joined
[06:06] *** shareable6 joined
[06:06] *** nativecallable6 joined
[06:07] *** statisfiable6 joined
[06:07] *** tellable6 joined
[06:07] *** reportable6 joined
[06:08] *** evalable6 joined
[06:08] *** notable6 joined
[06:08] *** squashable6 joined
[06:08] *** sourceable6 joined
[06:08] *** benchable6 joined
[07:08] *** shareable6 left
[07:08] *** reportable6 left
[07:08] *** squashable6 left
[07:08] *** sourceable6 left
[07:08] *** statisfiable6 left
[07:08] *** bisectable6 left
[07:08] *** quotable6 left
[07:08] *** bloatable6 left
[07:08] *** evalable6 left
[07:08] *** tellable6 left
[07:08] *** unicodable6 left
[07:08] *** nativecallable6 left
[07:08] *** releasable6 left
[07:08] *** committable6 left
[07:08] *** notable6 left
[07:08] *** benchable6 left
[07:08] *** coverable6 left
[07:08] *** greppable6 left
[07:08] *** linkable6 left
[07:08] *** bloatable6 joined
[07:08] *** quotable6 joined
[07:08] *** linkable6 joined
[07:09] *** sourceable6 joined
[07:09] *** greppable6 joined
[07:09] *** tellable6 joined
[07:09] *** nativecallable6 joined
[07:09] *** evalable6 joined
[07:09] *** Sgeo__ left
[07:10] *** notable6 joined
[07:10] *** epony left
[07:10] *** squashable6 joined
[07:10] *** committable6 joined
[07:10] *** releasable6 joined
[07:10] *** bisectable6 joined
[07:10] *** coverable6 joined
[07:11] *** statisfiable6 joined
[07:11] *** benchable6 joined
[07:11] *** shareable6 joined
[07:11] *** reportable6 joined
[07:11] *** unicodable6 joined
[07:41] *** sena_kun joined
[07:54] *** razetime joined
[08:25] <SmokeMachine> lizmat: It seems there is something wrong on rak... While running `rak '/[has_[many|one]|belongs_to] \( /' $(find path/to/dbic/schema/source -type f -name \*.pm)` I got this error: https://usercontent.irccloud-cdn.com/file/8AulFGs7/CleanShot%202022-08-31%20at%2009.25.22%402x.png
[08:26] <lizmat> grrr... if you run with MVM_SPESH_DISABLE+1 ?
[08:26] <lizmat> grrr... if you run with MVM_SPESH_DISABLE=1 ?
[08:33] *** nine left
[08:33] *** m_athias left
[08:33] *** nine joined
[08:33] *** nine left
[08:34] *** nine joined
[08:34] *** nine left
[08:34] *** nine joined
[08:35] *** m_athias joined
[08:38] <xinming> m: my Int sub test (Str) { }; sub t (Int(Str) $arg) { $arg.WHAT.say; $arg.say; }; t("3");
[08:38] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´(Int)‚ê§3‚ê§¬ª
[08:38] <xinming> In this example, What is the best practise to achieve the type auto convertion?
[08:39] <xinming> m: my Int sub test (Str $s) { $s.Int }; sub t (Int(Str) $arg) { $arg.WHAT.say; $arg.say; }; t("3");
[08:39] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´(Int)‚ê§3‚ê§¬ª
[08:40] <xinming> m: my Int sub test (Str $s) { $s.Int + 2 }; sub t (Int(Str) $arg) { $arg.WHAT.say; $arg.say; }; t("3");
[08:40] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´(Int)‚ê§3‚ê§¬ª
[08:40] <xinming> Seems the test sub is not in effect
[08:40] <discord-raku-bot> <Nemokosch> what do you mean?
[08:40] <xinming> possible to add customized auto type convertion in this example please?
[08:43] *** discord-raku-bot left
[08:43] *** discord-raku-bot joined
[08:43] <discord-raku-bot> <Nemokosch> where do you call the test sub?
[08:45] <xinming> Neokosch:  I want to make the arg auto converted.
[08:46] <xinming> Something like,    sub my-sub (MyType1(MyType2) $arg) { ... }
[08:56] <SmokeMachine> lizmat: no errors if setting MVM_SPESH_DISABLE=1
[08:56] <lizmat> yeah, feared as much...  looks like rak code is tickling a bug  :-(
[08:57] <lizmat> which I haven't been able to golf so far...
[08:57] <discord-raku-bot> <Nemokosch> It is converted though?
[08:57] <discord-raku-bot> <Nemokosch> What does this have to do with a test sub?
[08:57] <lizmat> afaics, it has to do with a native int being referenced from within a wrapped Callable
[09:00] *** frost left
[09:03] *** frost joined
[09:19] *** sena_kun left
[09:36] <xinming> Nemokosch: I try to figure out how to do implicit type convertion, so I want to write a test sub. :-)
[09:36] <tellable6> xinming, I'll pass your message to Nemokosch
[09:59] *** razetime left
[10:00] *** razetime joined
[10:10] *** sena_kun joined
[10:16] <lizmat> SmokeMachine: App::Rak 0.91 on zef now, should fix the error you saw
[10:17] <lizmat> turned out to be a case of "" but True being handled incorrectly by spesh, apparently
[10:20] <discord-raku-bot> <Nemokosch> xinming: there is a good presentation by guifa iirc
[10:20] <discord-raku-bot> <Nemokosch> https://www.youtube.com/watch?v=1-KV8oiOSZA
[11:10] *** evalable6 left
[11:10] *** linkable6 left
[11:11] *** linkable6 joined
[11:11] *** evalable6 joined
[11:11] <discord-raku-bot> <Nemokosch> leont: good sir, I remember your remarks about CLI
[11:11] <discord-raku-bot> <Nemokosch> do you know something about actually giving more accurate feedback on argument parsing failures?
[11:38] <SmokeMachine> lizmat: thanks!
[11:43] <leont> That question is very open and vague
[11:45] <discord-raku-bot> <Nemokosch> This didn't sound like a "no" at least
[11:46] <discord-raku-bot> <Nemokosch> Can the CLI be modified in a way that it can report a missing/wrong argument?
[11:48] <leont> The difficulty with the default argument handling is that it essentially converts the given arguments into a capture without any knowledge of the sub MAIN, and then tries to fix things up. That makes it very difficult to give good errors because you find out about the problem too late.
[11:49] <leont> You get a (multi) dispatch error, but those aren't terribly specific.
[11:49] <leont> Missing arguments, duplicate arguments and type mismatches all get the same non-descriptive error.
[11:55] <discord-raku-bot> <Nemokosch> so there is no known way to fix that in the MAIN context?
[12:01] *** Colere left
[12:06] *** reportable6 left
[12:06] <xinming> Nemokosch: thanks.
[12:06] <tellable6> xinming, I'll pass your message to Nemokosch
[12:07] *** reportable6 joined
[12:08] <xinming> I think as long as time goes, when Nemokosch try to come here with irc client, He'll get a lot of messages. :-)
[12:11] *** Nemokosch joined
[12:11] <discord-raku-bot> <Nemokosch> let's see
[12:11] <Nemokosch> .
[12:11] <discord-raku-bot> <Nemokosch> yes...
[12:11] <tellable6> 2022-08-30T18:19:12Z #raku <tonyo> nemokosch: looking for samecase in the rakudo source will lead you to the entry point and then eventually to the implementation which will lead you to some nqp
[12:11] <tellable6> 2022-08-31T09:36:45Z #raku <xinming> Nemokosch: I try to figure out how to do implicit type convertion, so I want to write a test sub. :-)
[12:11] <tellable6> 2022-08-31T12:06:59Z #raku <xinming> Nemokosch: thanks.
[12:11] *** Nemokosch left
[12:17] <leont> That depends on the specific issue, really. I'm not saying impossible but things can get annoying.
[12:31] *** Colere joined
[12:32] <Voldenet> it's pretty easy to get good error handling in arguments in console apps
[12:32] <Voldenet> > sub MAIN(|c) {  }
[12:32] <Voldenet> I just do this whenever I need something advanced
[12:34] <discord-raku-bot> <Nemokosch> I mean... yes
[12:34] <discord-raku-bot> <Nemokosch> or just using Perl
[12:34] <discord-raku-bot> <Nemokosch> who needs function signatures anyway üòÑ
[12:34] <Voldenet> :D
[12:38] <Voldenet> but it's rare that I do need this
[12:39] <leont> That's why I wrote Getopt::Long, it gives clear errors like ¬´Unknown option --foobar¬ª
[12:40] <discord-raku-bot> <Nemokosch> The question is related to that as well
[12:41] <discord-raku-bot> <Nemokosch> how much Getopt::Long can help with reponses, not just changing the syntax
[12:41] <leont> Or ¬´Cannot convert --foo argument "a" to number: base-10 number must begin with valid digits or '.'¬ª
[12:43] *** discord-raku-bot left
[12:43] *** discord-raku-bot joined
[12:44] <Voldenet> for the most complex cases I prefer creating json and passing filename
[12:44] <discord-raku-bot> <Nemokosch> what do I need to do to unlock these superpowers?
[12:45] <Voldenet> > this probably https://raku.land/cpan:LEONT/Getopt::Long
[12:45] <leont> Just ¬´use Getopt::Long;¬ª
[12:48] <discord-raku-bot> <Nemokosch> I'm definitely trying this, it's time
[12:48] <discord-raku-bot> <Nemokosch> I can use my own scripts but others keep messing it up
[12:49] <nine> I don't see a reason why command line argument and MAIN dispatch has to go through the normal multi dispatcher. That was probably just the cheapest way to implement it. The startup code could instead inspect the MAIN signatures and do the dispatch by itself, retaining full information for helpful error messages.
[12:50] <nine> This wouldn't require a re-implementation of the full dispatch logic (that would be horrible). For example, it can simply assume that all input types are allomorphs of strings and numbers. There are no native types or complex objects involved.
[12:54] <Voldenet> while there are no complex objects involved, there's use for them in console apps IMO
[12:54] <Voldenet> > class Something { has Str $.a; has Int $.b; }; sub MAIN(Something :$something) { say $something }
[12:55] <Voldenet> for example things like these are useful, I'm just using json for it‚Ä¶ but it's theoretically possible to say something like `‚Äìsomething.a=foo ‚Äìsomething.b=42'
[12:59] <Voldenet> > use JSON::Unmarshal; class Something { has Str $.a; has Int $.b; method COERCE(Str $s) { unmarshal($s, Something) } }; sub MAIN(Something() :$something) { say $something }
[13:00] <Voldenet> the alternative is pretty sad, `‚Äìsomething='{"a":"foo","b":42}'` in args is also sad format
[13:29] <leont> Voldenet: Getopt::Long supports hash parameters, so you can do ¬´foo --config a=1 --config b=42¬ª and it will DWIM
[13:30] <leont> nine: Getopt::Subcommands was my first attempt at not using the normal multi-dispatcher, but I'm not sure I got that one right. Probably should make something that looks more conventional.
[13:31] *** frost left
[13:32] <Voldenet> > raku -e 'use Getopt::Long; class Something { has Str $.a; has Int $.b; }; sub MAIN(Something :$something) { say $something }' ‚Äìsomething a=foo ‚Äìsomething b=42
[13:32] <Voldenet> > No argument conversion known for parameter $something argument (type Something)
[13:32] <Voldenet> That's not fully DWIM
[13:35] <leont> Well, you have a different DWIM than I do I guess. It can accept those arguments and turn it into a hash, it can't convert that to Something
[13:36] <Voldenet> I know, I know. Every time I need to solve such problems I end up writing customized parsing because it's hard to make something truly universal
[13:40] <Voldenet> re subcommands: I really like how ManyConsole project in csharp does that ‚Äì it isn't nearly as succinct and nested arguments are still not that nice
[13:44] <Voldenet> the nice thing is that you can use lambdas for arg assignment and thanks to impreative style you can fake nested classes
[13:44] <leont> raku -Ilib -e 'use Getopt::Long; class Something { has Str $.a; has Int $.b; method COERCE(Hash (Str :$a, Int(Str) :$b)) { self.new(:$a, :$b) } }; sub MAIN(Something() :$something is option<=s%>) { say $something }' --something a=foo --something b=42
[13:46] <leont> Possibly I should add something that would allow me push that ¬´is option<=s%>¬ª into Something itself, but I think this is a workable approach
[13:46] <Voldenet> > use Getopt::Long; class Something { has Str $.a; has Int() $.b; method COERCE(Hash (|h)) { self.new(|h) } }; sub MAIN(Something() :$something is option<=s%>) { say $something }
[13:46] <leont> Yeah, that better
[13:46] <Voldenet> that's probably less painful than defining all fields in COERCE
[13:47] <Voldenet> iirc slower, but not by much
[13:47] <leont> Slightly, but if argument parsing is your bottle neck you're probably not doing anything interesting
[13:47] <Voldenet> true
[13:51] <Geth> ¬¶ doc: tbrowder++ created pull request #4105: Add a practical example of augmenting class IO::Path
[13:51] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4105
[13:56] *** bigdata left
[13:59] <tbrowder> Howdy. I'm looking for suggestions for the best book for introducing young people to computer programming, Raku (instead of Python), and, indirectly, Linux. I think Laurent Rosenfeld's book, "Think Perl 6" (now "Think Raku") is a good candidate. What say you?
[14:01] <Voldenet> imo raku/python are not the best languages to start with, best languages are probably js and maybe php
[14:02] <Voldenet> the thing is that js is extremely easy to visualise and needs almost no tools
[14:07] <El_Che> js has a lot of gotchas
[14:08] <Voldenet> Sure it does, but for newcomers commandline toolchain is more painful than the language itself
[14:09] <Voldenet> that's just my opinion though, I've got no basis for it
[14:24] *** jgaz joined
[14:30] *** xinming left
[14:32] *** xinming joined
[14:34] <tbrowder> my problem with js is not having used it much, also doesn't "feel" good
[14:35] <tbrowder> but i do have the YUGE js book (600+ pp) for reference!
[14:35] <Voldenet> probably my opinion comes from knowing js for over 20 years, might be a bit skewed ;)
[14:39] <tbrowder> the tutorial situation is a linux laptop will be provided in a youth center or school library along with a book. mostly self-help with a volunteer avaibale to help sometime. only the inquisitive kids are expected to try it.
[14:39] <tbrowder> maybe with parent/teacher encouragement
[14:40] <tbrowder> *available
[14:41] <Voldenet> If the toolchain would be already up, then I'm betting it makes things easy
[14:41] <tbrowder> and there is still the linux foundation online linux course to help wean windows ppl
[14:42] <tbrowder> i will have the machine pretty well set for at least CLI use, and some choice of editors.
[14:43] <Voldenet> maybe some IDE with "run" button would be nice
[14:43] <Voldenet> (Comma is nice, but I'm not sure if easy enough)
[14:44] <tbrowder> yeah, i don't like its interface personally, but that's just me
[14:45] <tbrowder> i wish i could get around that but i never seem to have the patience
[14:46] <tbrowder> so, what else has a "run" button, VS code for linux?
[14:46] <Voldenet> I mostly use tmux+nano+inotifywatch for scripting, which is probably not the ideal IDE‚Ä¶ :)
[14:47] <tbrowder> the VSC may work esp. for those with only Win experience
[14:47] *** Xliff joined
[14:49] <Voldenet> VSC is extensible and nice for programmers, but without proper configs it could be too difficult for the target audience
[14:49] <xinming> m: enum T <a b c>; multi COERCE (Str $s) { T::{$s} }; sub t (T(Str) $v) { $v.say; }; t("a");
[14:49] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´No value 'a' found in enum T‚ê§  in sub t at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[14:49] <xinming> In this example, how can we make the sub t work as expected?
[14:50] <xinming> I konw the T::<a> to resolve to the enum value, But how to do the convertion with sub signatures?
[14:51] *** Xliff left
[14:52] <tbrowder> i use emacs for desktop and vi with terminal.
[14:52] <tbrowder> ant would be ok but config problem also
[14:53] <tbrowder> i just saw "tabnine" , new to me but no raku ...
[14:55] <tbrowder> oops, tabnine is an addon to ide's
[14:57] <Voldenet> xinming: this COERCE is never used
[14:58] <tbrowder> and...atom is being archived...
[14:59] <tbrowder> surely some raku person has settings for VSC to share?
[14:59] <Voldenet> m: enum T <a b c>; use MONKEY-TYPING; augment class T { multi method COERCE(Str $s) { T::{$s} }}; sub t (T(Str) $v) { $v.say; }; say t("a");
[14:59] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´a‚ê§True‚ê§¬ª
[15:00] <Voldenet> ^ this works, but the uppercase scares me, I don't know how to add coercing to an enum otherwise
[15:04] *** razetime left
[15:12] <xinming> tonyo: I know, It's just trying to attach multi to the enum type, so hope it worked.
[15:12] <xinming> Voldenet: Thanks, That's what I want
[15:14] *** sena_kun left
[15:22] <discord-raku-bot> <Nemokosch> I do think Raku is a good language to start with, simply because it's so big, you can illustrate anything with it
[15:22] <discord-raku-bot> <Nemokosch> but it's a good point that CLI stuff is just not cool these days
[15:35] *** epony joined
[15:45] *** sftp left
[15:51] *** MoC joined
[15:52] *** epony left
[15:52] *** epony joined
[16:03] <tbrowder> so what editor (IDE) do you recommend for linux?
[16:04] * leont still thinks Raku could be a great GUI language if we put the effort into it, and should really make a blogpost about the GIR idea they mentioned at the conference
[16:18] <xinming> m: my $t = enum <a b c>; constant T = $t;  $t does role :: { multi method COERCE (Str $s) { T::{$s} } }; sub t (T(Str) $v) { $v.say; }; t("a");
[16:18] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´a‚ê§¬ª
[16:18] <xinming> Voldenet: I just found a way to achieve this without using augment.
[16:19] <tonyo> xinming: ?
[16:19] <discord-raku-bot> <Nemokosch> amazing üëè
[16:23] <leont> xinming: nice!
[16:27] <leont> Though it doesn't actually seem to work for me
[16:30] <discord-raku-bot> <Nemokosch> something is suspicious?
[16:31] *** sftp joined
[16:35] <leont> If you apply dd to that, instead of say, you'll see it doesn't work
[16:44] <discord-raku-bot> <Nemokosch> so you say it didn't convert?
[16:55] <Voldenet> ‚Ä¶this seems like a suspicious thing to do
[16:55] <Voldenet> Currently it works, but I'm not sure if it's guaranteed to work
[16:56] <lizmat> if instead of dd foo, you'd do note foo.rak
[16:56] <lizmat> if instead of dd foo, you'd do note foo.raku
[16:56] <lizmat> would that work ?
[16:56] <lizmat> dd is essentially that, but with some bells and whistles, and maybe those are messing up things?
[16:57] <tonyo> m: my \t = enum <a b c>; dd t<a>; note t<a>;
[16:57] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´0‚ê§0‚ê§¬ª
[16:57] <Voldenet> m: my $t = enum <a b c>; constant T = $t;  $t does role :: { multi method COERCE (Str $s) { T::{$s} } }; sub t (T(Str) $v) { $v.WHAT.say; }; t("a");
[16:57] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´(Str)‚ê§¬ª
[16:57] <Voldenet> ‚Ä¶huh
[17:03] <leont> Enum.^add_method also doesn't work because it already has a method and apparently it doesn't allow for overriding that.
[17:03] <leont> Possibly we should invent a trait to turn that off first
[17:04] <Voldenet> every language I know invents enum classes sooner or later
[17:12] <discord-raku-bot> <Nemokosch> perhaps using an enum is not the best type to work with coercions
[17:16] <leont> Currently not, no
[17:17] <leont> But I don't see any reason why it has to be this difficult
[17:20] <xinming> <Nemokosch> do you have any ideas to achive it with other type?  access with hash key is easy, It's just want to have more way to do it.
[17:27] <tonyo> leont: iirc there's another way to add a multi
[17:31] *** linkable6 left
[17:31] *** evalable6 left
[17:32] <tonyo> .^add_multi_method
[17:32] <tonyo> still doesn't dispatch to COERCE though
[17:33] *** evalable6 joined
[17:33] *** linkable6 joined
[17:41] *** HvszrStykp joined
[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[18:19] *** sena_kun joined
[18:43] <discord-raku-bot> <Nemokosch> leont: Getopt::Long contains $*PERL
[18:44] <discord-raku-bot> <Nemokosch> which generates an ugly warning message into my script, "contact the author to change that to $*RAKU so that message will disappear"
[18:44] <discord-raku-bot> <Nemokosch> üòÖ
[18:44] <leont> I should probably just cut that entire check, because it's only needed for compatibility with raku < 2018.06. No one should be using a Raku that old
[18:54] <Voldenet> ‚Ä¶except debian stable enjoyers
[18:54] <Voldenet> or oldstable
[18:55] <discord-raku-bot> <Nemokosch> could you please publish a version without the warning?
[19:14] *** Guest99 joined
[19:15] *** Guest99 left
[19:39] <leont> Nemokosch, just uploaded it
[19:40] <tonyo> what version of raku is warning on $*PERL usage?
[20:15] *** linkable6 left
[20:15] *** evalable6 left
[20:16] *** linkable6 joined
[20:18] *** evalable6 joined
[20:56] *** jgaz left
[20:57] <discord-raku-bot> <Nemokosch> thankies
[20:59] <discord-raku-bot> <Nemokosch> tonyo: I'm using 2022.04 in this environment
[21:29] *** epony left
[21:46] <japhb> Not even Debian oldstable is back in the world of 2018.05.  See https://gist.github.com/japhb/88322d76326df16856f31f108c90e567
[21:50] *** sena_kun left
[21:54] *** epony joined
[22:01] <Voldenet> I was only joking, but 2018.12 is painfully close
[22:04] *** Grrrr joined
[22:13] <epony> did you have an accident then?
[22:14] <Voldenet> ‚Ä¶that made me laugh, but no, the line above was this link https://gist.github.com/japhb/88322d76326df16856f31f108c90e567 and we were talking about raku releases on debian oldstable :D
[22:18] *** melezhik joined
[22:18] <melezhik> how to know that a string is binary in Raku?
[22:19] <Voldenet> m: my $s = "010101"; say so "0b$s".Int ~~ Int
[22:19] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´True‚ê§¬ª
[22:20] <Voldenet> m: my $s = "010101not binary"; say so "0b$s".Int ~~ Int
[22:20] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´False‚ê§¬ª
[22:22] <melezhik> so $s.Int ~~ Int ?
[22:23] <Voldenet> > "0b$s".Int ~~ Int
[22:23] <Voldenet> the 0b part is important
[22:24] <melezhik> ah, ok
[22:26] <Voldenet> or ~~ Failure
[22:33] *** Sgeo joined
[22:35] *** melezhik left
[23:03] *** Geth left
[23:03] *** RakuIRCLogger left
[23:04] *** lizmat left
[23:19] <discord-raku-bot> <Nemokosch> something broke testing with zef
[23:20] <discord-raku-bot> <Nemokosch> was it Test::Output?
[23:23] <discord-raku-bot> <Nemokosch> was it naively running mi6 test?
[23:25] *** MoC left
[23:25] <discord-raku-bot> <Nemokosch> could be TAP as well...
[23:28] <discord-raku-bot> <Nemokosch> one thing is sure: if I run tests by hand, they all pass
[23:28] <discord-raku-bot> <Nemokosch> and yet I get
[23:28] <discord-raku-bot> <Nemokosch> ```===> Testing: HTML::Tag:ver<0.0.6>:auth<zef:2colours>
[23:28] <discord-raku-bot> <Nemokosch> ===> Testing [FAIL]: HTML::Tag:ver<0.0.6>:auth<zef:2colours>
[23:28] <discord-raku-bot> <Nemokosch> Aborting due to test failure: HTML::Tag:ver<0.0.6>:auth<zef:2colours> (use --force-test to override)
[23:28] <discord-raku-bot> <Nemokosch> ```
[23:29] <ugexe> does the test output using --debug give any more info?
[23:30] <ugexe> you can also try testing with `--/tap-harness` to try without using TAP
[23:39] *** Geth joined
[23:50] *** discord-raku-bot left
[23:50] *** discord-raku-bot joined
