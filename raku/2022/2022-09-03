[00:06] *** reportable6 left
[00:06] *** reportable6 joined
[00:50] *** epony joined
[00:59] *** razetime joined
[01:11] *** razetime left
[01:12] *** razetime joined
[01:18] *** razetime left
[01:22] *** razetime joined
[01:24] *** kjp left
[01:30] *** m_athias left
[01:30] *** nine left
[01:32] *** nine joined
[01:32] *** m_athias joined
[02:10] <[Coke]> https://github.com/coke/sudoku-helper

[02:10] <[Coke]> (Had this script for ages, finally put it somewhere)

[02:14] <[Coke]> What do we need to do to make "use experimental :cached;

[02:14] <[Coke]> " not experimental?

[02:15] <[Coke]> er, rephrasing, to make "is cached" not require the use.

[02:16] <[Coke]> I see 2 tickets in rakudo/rakudo (#4665 and #4666) - anything else?

[02:26] *** jgaz joined
[02:39] *** razetime left
[02:41] *** jgaz left
[02:42] *** razetime joined
[02:50] *** razetime left
[02:50] *** razetime joined
[02:56] *** Kaiepi joined
[03:01] *** swaggboi left
[04:01] *** irc_user joined
[04:04] *** queddd joined
[04:53] *** queddd left
[05:47] *** razetime left
[05:47] *** razetime joined
[06:05] *** razetime left
[06:06] *** razetime joined
[06:06] *** reportable6 left
[06:08] *** reportable6 joined
[06:23] *** razetime left
[06:24] *** razetime joined
[06:44] *** razetime left
[06:45] *** razetime joined
[06:56] *** razetime left
[06:59] *** MoC joined
[07:07] *** ioh left
[07:14] *** razetime joined
[07:20] *** irc_user left
[07:54] *** bigdata joined
[08:28] *** eseyman left
[08:36] *** Sgeo left
[09:36] *** quotable6 left
[09:36] *** bloatable6 left
[09:36] *** notable6 left
[09:36] *** reportable6 left
[09:36] *** greppable6 left
[09:36] *** linkable6 left
[09:36] *** shareable6 left
[09:36] *** nativecallable6 left
[09:36] *** tellable6 left
[09:36] *** squashable6 left
[09:36] *** bisectable6 left
[09:36] *** committable6 left
[09:36] *** evalable6 left
[09:36] *** sourceable6 left
[09:36] *** coverable6 left
[09:36] *** squashable6 joined
[09:36] *** coverable6 joined
[09:37] *** quotable6 joined
[09:37] *** shareable6 joined
[09:37] *** greppable6 joined
[09:37] *** tellable6 joined
[09:38] *** linkable6 joined
[09:38] *** reportable6 joined
[09:38] *** evalable6 joined
[09:38] *** bloatable6 joined
[09:39] *** nativecallable6 joined
[09:39] *** notable6 joined
[09:39] *** sourceable6 joined
[09:39] *** committable6 joined
[09:39] *** bisectable6 joined
[10:39] *** greppable6 left
[10:39] *** squashable6 left
[10:39] *** sourceable6 left
[10:39] *** shareable6 left
[10:39] *** bisectable6 left
[10:39] *** notable6 left
[10:39] *** linkable6 left
[10:39] *** tellable6 left
[10:39] *** quotable6 left
[10:39] *** reportable6 left
[10:39] *** coverable6 left
[10:39] *** benchable6 left
[10:39] *** committable6 left
[10:39] *** evalable6 left
[10:39] *** unicodable6 left
[10:39] *** statisfiable6 left
[10:39] *** bloatable6 left
[10:39] *** releasable6 left
[10:39] *** nativecallable6 left
[10:40] *** bloatable6 joined
[10:40] *** squashable6 joined
[10:40] *** coverable6 joined
[10:40] *** tellable6 joined
[10:40] *** quotable6 joined
[10:40] *** sourceable6 joined
[10:40] *** reportable6 joined
[10:40] *** committable6 joined
[10:40] *** linkable6 joined
[10:40] *** nativecallable6 joined
[10:41] *** benchable6 joined
[10:41] *** bisectable6 joined
[10:42] *** shareable6 joined
[10:42] *** evalable6 joined
[10:42] *** greppable6 joined
[10:42] *** unicodable6 joined
[10:42] *** releasable6 joined
[10:42] *** notable6 joined
[10:42] *** statisfiable6 joined
[11:42] *** linkable6 left
[11:42] *** nativecallable6 left
[11:42] *** squashable6 left
[11:42] *** greppable6 left
[11:42] *** committable6 left
[11:42] *** shareable6 left
[11:42] *** quotable6 left
[11:42] *** bloatable6 left
[11:42] *** sourceable6 left
[11:42] *** releasable6 left
[11:42] *** unicodable6 left
[11:42] *** bisectable6 left
[11:42] *** coverable6 left
[11:42] *** evalable6 left
[11:42] *** benchable6 left
[11:42] *** notable6 left
[11:42] *** statisfiable6 left
[11:42] *** reportable6 left
[11:42] *** tellable6 left
[11:43] *** notable6 joined
[11:44] *** shareable6 joined
[11:44] *** grondilu joined
[11:44] <grondilu> hi all

[11:44] *** statisfiable6 joined
[11:44] *** releasable6 joined
[11:44] *** epony left
[11:44] *** sourceable6 joined
[11:44] *** unicodable6 joined
[11:44] *** greppable6 joined
[11:44] <grondilu> m: put blob32.new: 2**32

[11:44] <camelia> rakudo-moar 958537b12: OUTPUT: ¬´Stringification of a Blob[uint32] is not done with 'Str'.  The 'decode'‚ê§method should be used to convert a Blob[uint32] to a Str.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:44] *** bisectable6 joined
[11:44] *** coverable6 joined
[11:44] <grondilu> m: dd blob32.new: 2**32

[11:44] <camelia> rakudo-moar 958537b12: OUTPUT: ¬´Blob[uint32].new(0)‚ê§¬ª

[11:44] *** benchable6 joined
[11:44] <grondilu> m: dd blob64.new: 2**64

[11:44] <camelia> rakudo-moar 958537b12: OUTPUT: ¬´Cannot unbox 65 bit wide bigint into native integer‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:45] *** linkable6 joined
[11:45] *** quotable6 joined
[11:45] *** tellable6 joined
[11:45] *** squashable6 joined
[11:45] *** evalable6 joined
[11:45] *** reportable6 joined
[11:45] <grondilu> not sure why blob32 and blob64 would behave differently here

[11:45] *** bloatable6 joined
[11:45] *** committable6 joined
[11:45] *** nativecallable6 joined
[11:47] <grondilu> m: my uint64 $ = 2**64

[11:47] <camelia> rakudo-moar 958537b12: OUTPUT: ¬´Cannot unbox 65 bit wide bigint into native integer‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:48] <grondilu> m: my uint32 $ = 2**32

[11:48] <camelia> rakudo-moar 958537b12: ( no output )

[11:48] <grondilu> :ü§î

[11:48] *** bigdata left
[11:58] <grondilu> FYI I stumbled upon this when trying to implement SHA-512

[12:04] <lizmat> m: m: my uint64 $ = 2**64 - 1

[12:04] <camelia> rakudo-moar 958537b12: ( no output )

[12:05] <lizmat> grondilu: 2**64 does *not* fit in a 64 bit uint so the error message is correct

[12:05] <lizmat> or one could argue it should just cut off... 

[12:06] <lizmat> thing is, 2**32 *can* be represented as a native int on 64 bit systems, so in that case it's a native int being put into a native int that is not large enough

[12:06] <lizmat> m: my uint8 $a = 256; say $a

[12:06] <camelia> rakudo-moar 958537b12: OUTPUT: ¬´0‚ê§¬ª

[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:09] <grondilu> yeah I guess one could argue on the semantics.  I think it should just cut off.

[12:09] <lizmat> thing is, the logic is currently when converting from a bigint into a native int, is to throw if it doesn't fit

[12:10] <lizmat> 2**64 cannot be represented as a native int currently

[12:10] <lizmat> hence the error

[12:11] <grondilu> yeah but 2**32 can't be represented as a int32 either.   It can be represented as a native int, but only because there are natives that are larger.

[12:12] <lizmat> I bet it will give the same error on a 32bit system

[12:12] <lizmat> the logic is "can be represented as a native int on this architecture" I guess

[12:12] <grondilu> I see.

[12:13] <lizmat> I guess we could think about a pragma for cutting off

[12:13] <lizmat> or a dynamic variable

[12:16] <lizmat> the logic for MoarVM is in nqp/MoarVM/src/6model/reprs/P6bigint.c

[12:18] <grondilu> on a related note, it's a bit annowing that algebraic operations on native ints do not remain native ints, even when the result is assigned to a native int variable

[12:19] <grondilu> m: my uint64 $ = (my uint64 $ = 2**63) * (my uint64 $ = 2)

[12:19] <camelia> rakudo-moar 958537b12: ( no output )

[12:19] <grondilu> ah I thought that would die

[12:19] <grondilu> m: my uint64 $a = 2**63; my uint64 $ = $a + $a

[12:19] <camelia> rakudo-moar 958537b12: ( no output )

[12:20] <grondilu> damn I can't reproduce it

[12:21] <grondilu> m: my uint64 $a = 2**63; put my uint64 $ = $a + $a + $a;

[12:21] <camelia> rakudo-moar 958537b12: OUTPUT: ¬´9223372036854775808‚ê§¬ª

[12:21] <grondilu> m: my uint64 $a = 2**63; put .WHAT given my uint64 $ = $a + $a + $a;

[12:21] <camelia> rakudo-moar 958537b12: OUTPUT: ¬´Use of uninitialized value of type Int in string context.‚ê§Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.‚ê§‚ê§  in block  at <tmp> line 1‚ê§¬ª

[12:21] <grondilu> m: my uint64 $a = 2**63; put .?WHAT given my uint64 $ = $a + $a + $a;

[12:21] <camelia> rakudo-moar 958537b12: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Cannot use .? on a non-identifier method call‚ê§at <tmp>:1‚ê§------> my uint64 $a = 2**63; put .?WHAT‚èè given my uint64 $ = $a + $a + $a;‚ê§    expecting any of:‚ê§        method arguments‚ê§¬ª

[12:22] <grondilu> m: my uint64 $a = 2**63; dd my uint64 $ = $a + $a + $a;

[12:22] <camelia> rakudo-moar 958537b12: OUTPUT: ¬´-9223372036854775808‚ê§¬ª

[12:22] <grondilu> üòï 

[12:23] <lizmat> yup, as long as the compiler can assure something is a native, it will do cut off

[12:23] <lizmat> with literal values, it assumes non-native

[12:24] <lizmat> the exact reasoning I'm not sure about, feels like something that could change in the future

[12:25] <grondilu> hang on

[12:25] <grondilu> m: say (my uint64 $ = 5) ~~ uint64 # just checking type setting syntax

[12:25] <camelia> rakudo-moar 958537b12: OUTPUT: ¬´False‚ê§¬ª

[12:26] <grondilu> ok how do I test if a variable points to a native?

[12:28] *** euandreh left
[12:28] <lizmat> good question... not possible without nqp afaik

[12:28] <lizmat> afk for some fresh hot air  &

[12:37] <grondilu> sha-512 is supposed to be very similar to sha-256, so I thought I would be able to just substitute blob32 to blob64 and so on but apparently that won't work.

[12:37] <grondilu> oh well

[12:38] *** grondilu left
[12:56] <nine> m: What prevents it from working?

[12:56] <camelia> rakudo-moar 958537b12: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Bogus postfix‚ê§at <tmp>:1‚ê§------> What prevents it from working‚èè?‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§        statemen‚Ä¶¬ª

[12:56] <nine> What prevents it from working?

[13:09] *** vasko_ left
[13:15] *** vasko joined
[13:15] *** vasko left
[13:15] *** vasko joined
[13:25] *** euandreh joined
[13:56] *** vasko left
[13:58] *** vasko joined
[13:58] *** vasko left
[13:58] *** vasko joined
[13:58] *** vasko left
[14:01] *** vasko joined
[14:01] *** vasko left
[14:01] *** vasko joined
[14:10] *** epony joined
[14:14] *** razetime_ joined
[14:14] *** razetime left
[14:17] *** Kaiepi left
[14:17] <guifa> grondilu: best you can do is

[14:17] <tellable6> guifa, I'll pass your message to grondilu

[15:00] *** perlbot left
[15:00] *** simcop2387 left
[15:16] *** Kaiepi joined
[15:47] <guifa> my int $a = 42; my Int $b = 42; say $a.VAR.WHAT; say $b.VAR.WHAT

[15:47] <evalable6> guifa, rakudo-moar 958537b12: OUTPUT: ¬´(IntLexRef)‚ê§(Scalar)‚ê§¬ª

[15:49] *** simcop2387 joined
[15:50] *** perlbot joined
[15:54] <discord-raku-bot> <stevied> if someone has a moment and is knowledgeable about using NativeCall with Windows API, please have a look at https://www.perlmonks.org/?node_id=11146662

[16:11] <[Coke]> You'll be better off using stack overflow than perlmonks, IME.

[16:23] <discord-raku-bot> <stevied> Already went that route. See comments at https://stackoverflow.com/questions/73562354/how-to-get-paths-for-apps-showing-in-app-paths-folder-in-windows-registry-usin?noredirect=1#comment129931138_73562354

[16:34] *** razetime_ left
[16:34] *** razetime joined
[16:37] <discord-raku-bot> <stevied> hmm, maybe the handle is the hex number found here in this file: https://metacpan.org/release/CHORNY/Win32API-Registry-0.33/source/cRegistry.pc?

[16:37] <discord-raku-bot> <stevied> does that even make sense? I guess I could try it.

[16:49] *** razetime_ joined
[16:49] *** razetime left
[16:50] <ugexe> `my $program-files-path = shell("echo %ProgramFiles%", :out).out.slurp(:close)` or some such is the quick and easy way

[16:56] <ugexe> shell('echo "%ProgramFiles%"'... rather

[16:58] *** razetime joined
[16:58] *** razetime_ left
[16:59] <ugexe> PS C:\Users\ugexe\zef\bar> raku -e "say shell(q|echo %ProgramFiles%|, :out).out.slurp(:close)"

[16:59] <ugexe> C:\Program Files

[17:00] <discord-raku-bot> <stevied> yeah, wanted to see if I could learn how to use the API, though.

[17:02] <discord-raku-bot> <stevied> oh, and I did figure out how to use the API to get the paths

[17:02] <discord-raku-bot> <stevied> so I'm set with that

[17:02] <discord-raku-bot> <stevied> right now, I'm trying to figure out how to get the subkeys with the api

[17:02] *** razetime left
[17:03] *** razetime joined
[17:09] <ugexe> win: fix thread race in uv_cwd() and uv_chdir() (#3708) - https://github.com/libuv/libuv/commit/4db0a9a6b73b2c29c4e19930702203790734e2d3

[17:09] <ugexe> hmm hopefully we update libuv soon :)

[17:11] <ugexe> i guess thats not in a release yet though

[17:11] *** razetime left
[17:11] <ugexe> same with the commit for fixing uv_os_uname to handle Windows 11

[17:11] *** razetime joined
[17:13] <ugexe> there is also a fix to make macOS return kilobytes for rss like all the other OS

[17:13] <ugexe> there is a telemetry test that works around that issue

[17:15] *** swaggboi joined
[17:27] *** otpv joined
[17:29] *** otpv left
[17:35] *** razetime left
[18:06] *** reportable6 left
[18:09] *** reportable6 joined
[18:57] *** Sgeo joined
[19:28] *** axmed99 joined
[19:43] <discord-raku-bot> <stevied> figured out my problem querying the registry. Knowing that the constant's `HKEY_LOCAL_MACHINE ` value is `0x80000002` was indeed the key to figuring this out. https://stackoverflow.com/a/73594981/1641112

[19:43] <discord-raku-bot> <stevied> pats on the back welcome

[19:54] *** axmed99 left
[19:55] *** axmed99 joined
[20:29] *** Sgeo left
[20:54] <leont> I thought I made an issue for yesterday's dispatching issue, but apparently I didn't

[20:54] <leont> And now I may have a new one

[21:29] *** linkable6 left
[21:29] *** evalable6 left
[21:29] *** linkable6 joined
[21:30] *** evalable6 joined
[21:38] *** discord-raku-bot left
[21:38] *** gfldex left
[22:28] *** nebuchadnezzar left
[22:45] *** jmcgnh left
[22:52] *** jmcgnh joined
[23:12] *** a3r0_ left
[23:14] *** discord-raku-bot joined
[23:15] *** gfldex joined
[23:20] *** a3r0 joined
[23:27] <Geth> ¬¶ doc: 1de7522804 | (Tom Browder)++ | doc/Language/variables.pod6

[23:27] <Geth> ¬¶ doc: Add a practical example of augmenting class IO::Path

[23:27] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/1de7522804

[23:27] <Geth> ¬¶ doc: 7e11a94430 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/variables.pod6

[23:27] <Geth> ¬¶ doc: Merge pull request #4105 from tbrowder/aug-class

[23:27] <Geth> ¬¶ doc: 

[23:27] <Geth> ¬¶ doc: Add a practical example of augmenting class IO::Path

[23:27] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/7e11a94430

[23:27] <linkable6> Link: https://docs.raku.org/language/variables

[23:51] *** MoC left
