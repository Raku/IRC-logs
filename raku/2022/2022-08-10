[00:00] *** Kaipei is now known as Kaiepi

[00:06] *** reportable6 left
[00:09] *** reportable6 joined
[00:11] *** Sgeo joined
[00:26] *** ajr left
[00:39] *** deoac left
[01:07] *** Colere left
[01:09] *** Colere joined
[01:28] *** Geth left
[01:28] *** Geth joined
[01:33] *** Geth__ joined
[01:33] *** Geth left
[02:20] <tonyo> hi ingy 

[02:33] *** linkable6 left
[02:33] *** evalable6 left
[02:35] *** linkable6 joined
[02:36] *** evalable6 joined
[03:36] *** shareable6 left
[03:36] *** committable6 left
[03:36] *** evalable6 left
[03:36] *** sourceable6 left
[03:36] *** coverable6 left
[03:36] *** squashable6 left
[03:36] *** tellable6 left
[03:36] *** statisfiable6 left
[03:36] *** notable6 left
[03:36] *** greppable6 left
[03:36] *** bloatable6 left
[03:36] *** linkable6 left
[03:36] *** releasable6 left
[03:36] *** notable6 joined
[03:36] *** releasable6 joined
[03:36] *** tellable6 joined
[03:36] *** shareable6 joined
[03:36] *** squashable6 joined
[03:36] *** coverable6 joined
[03:37] *** evalable6 joined
[03:37] *** statisfiable6 joined
[03:38] *** sourceable6 joined
[03:38] *** committable6 joined
[03:38] *** linkable6 joined
[03:38] *** greppable6 joined
[03:38] *** bloatable6 joined
[03:54] *** pamplemousse left
[04:23] *** ed left
[05:23] *** tellable6 left
[05:23] *** evalable6 left
[05:23] *** bisectable6 left
[05:23] *** committable6 left
[05:23] *** sourceable6 left
[05:23] *** bloatable6 left
[05:23] *** unicodable6 left
[05:23] *** linkable6 left
[05:23] *** quotable6 left
[05:23] *** reportable6 left
[05:23] *** greppable6 left
[05:23] *** nativecallable6 left
[05:23] *** benchable6 left
[05:23] *** coverable6 left
[05:23] *** squashable6 left
[05:23] *** releasable6 left
[05:23] *** statisfiable6 left
[05:23] *** notable6 left
[05:23] *** reportable6 joined
[05:23] *** sourceable6 joined
[05:23] *** quotable6 joined
[05:24] *** releasable6 joined
[05:24] *** committable6 joined
[05:24] *** greppable6 joined
[05:25] *** linkable6 joined
[05:25] *** bisectable6 joined
[05:25] *** bloatable6 joined
[05:25] *** evalable6 joined
[05:25] *** coverable6 joined
[05:25] *** squashable6 joined
[05:25] *** benchable6 joined
[05:25] *** tellable6 joined
[05:25] *** statisfiable6 joined
[05:25] *** notable6 joined
[05:25] *** unicodable6 joined
[05:26] *** nativecallable6 joined
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:50] *** Sgeo left
[07:25] *** frost joined
[07:44] *** Geth__ left
[07:46] *** RakuIRCLogger left
[07:47] *** Geth left
[07:47] *** Geth joined
[08:07] *** dakkar joined
[08:14] *** Geth left
[08:15] *** Geth joined
[08:18] *** sena_kun joined
[08:32] *** Oshawott left
[08:33] *** Oshawott joined
[08:38] *** dogbert17 left
[08:53] <discord-raku-bot> <Nemokosch> reinventing the wheel be like

[08:53] <discord-raku-bot> <Nemokosch> > git log | raku -pe 'last if /^^ "commit " / && $++ >= 10'

[08:53] <discord-raku-bot> <Nemokosch> in other words: git log -10

[09:19] <lizmat> SmokeMachine: if you want to use rak as a sub, would you need all of its features, or a subset ?

[09:19] <lizmat> if subset, what subset ?  :)

[09:28] <SmokeMachine> lizmat: I‚Äôm thinking‚Ä¶ but I assume at least most of them‚Ä¶ let me think‚Ä¶

[09:32] *** lizmat_ joined
[09:33] *** sena_kun left
[09:34] *** lizmat__ joined
[09:35] *** lizmat___ joined
[09:36] *** lizmat left
[09:37] *** lizmat_ left
[09:39] *** lizmat__ left
[09:40] *** lizmat___ is now known as lizmat

[10:12] <discord-raku-bot> <Nemokosch> How can I catch all the arguments of a function (so that I can propagate them to another function)?

[10:12] <discord-raku-bot> <Nemokosch> Perhaps I will rather use a decorator-ish pattern but still worth asking imo

[10:14] <SmokeMachine> m: sub bla(|c) { say |c }; bla ‚Äútest‚Äù, 42

[10:14] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´test42‚ê§¬ª

[10:16] <discord-raku-bot> <Nemokosch> does it pick up named arguments as well?

[10:25] <lizmat> it does

[10:26] <lizmat> if you're interested in *only* the named arguments, you should use a slurpy hash

[10:28] <discord-raku-bot> <Nemokosch> thankies

[10:32] <discord-raku-bot> <Nemokosch> does `last` set the return value of a block?

[10:33] <lizmat> not in 6.c

[10:33] *** sena_kun joined
[10:33] <lizmat> in 6.e you can "last 42"

[10:34] <lizmat> m: use v6.e.PREVIEW;  say (^10).map: {  $_ == 5 ?? (last 42) !! $_ }

[10:34] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´(0 1 2 3 4 42)‚ê§¬ª

[10:34] <lizmat> m: say (^10).map: {  $_ == 5 ?? (last 42) !! $_ }

[10:34] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Calling last(Int) will never work with any of these multi signatures:‚ê§    ( --> Nil) ‚ê§    (Label:D $x --> Nil)‚ê§at <tmp>:1‚ê§------> say (^10).map: {  $_ == 5 ?? (‚èèlast 42) !! $_ }‚ê§¬ª

[10:35] <discord-raku-bot> <Nemokosch> wow

[10:35] <discord-raku-bot> <Nemokosch> while this is good to know, actually this wasn't the essential question I should have asked

[10:35] <discord-raku-bot> <Nemokosch> say I have a piece of code &actions

[10:35] <discord-raku-bot> <Nemokosch> and I want to do `return actions`, or could be `last actions` in this other example

[10:35] <discord-raku-bot> <Nemokosch> what happens if actions throws?

[10:42] <lizmat> if it doesn't get caught in a CATCH, your ptogram will die

[10:44] <discord-raku-bot> <Nemokosch> I'm gonna show an example code that I don't fully understand

[10:45] <discord-raku-bot> <Nemokosch> I'm trying to emulate error and retrial

[10:45] <discord-raku-bot> <Nemokosch> If Pidgin starts...

[10:46] *** Nemokosch joined
[10:47] <Nemokosch> m: sub demo2 { loop { CATCH { say "OKAY WTF." }; return { die 'Now!' unless (1 .. 10).pick == 1; 12 }(); } }

[10:47] <camelia> rakudo-moar 10feda116: ( no output )

[10:47] <Nemokosch> oops, maybe it should be called as well...

[10:48] <Nemokosch> m:  sub demo2 { loop { CATCH { say "OKAY WTF." }; return { die 'Now!' unless (1 .. 10).pick == 1; 12 }(); } }; demo2

[10:48] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´OKAY WTF.‚ê§Now!‚ê§  in block  at <tmp> line 1‚ê§  in sub demo2 at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:48] <Nemokosch> This is what I always get. Caught at first, dies after.

[10:48] <Nemokosch> Or caught and yet dies? I don't know how this works.

[10:49] <lizmat> you didn't handle the exception in the CATCH block, so it is being rethrown by a CATCH block higher up

[10:49] <lizmat> m: CATCH { say "CATCH"; .resume }; say "before"; die; say "after"

[10:49] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´before‚ê§CATCH‚ê§after‚ê§¬ª

[10:50] <Nemokosch> well, what does "handling" mean? I'm used to the block itself doing the distinguishing, a la C++ and derived languages

[10:51] <Nemokosch> "distinguishing", almost... extinguishing xd

[10:55] <lizmat> then why did you want a CATCH block ?  todo something with the exception, no ?

[10:55] <lizmat> *to do

[10:56] <Nemokosch> Well for now I wanted to see if it's caught

[10:56] <lizmat> m: CATCH { say "CATCH" }; say "before"; die; say "after"

[10:56] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´before‚ê§Died‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§CATCH‚ê§¬ª

[10:57] <lizmat> m: CATCH { say "CATCH" }; note "before"; die; note "after"

[10:57] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´before‚ê§CATCH‚ê§Died‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:57] <lizmat> say is on STDOUT, camelia got some syncing issues there, using note makes the sequence more clear

[10:58] <lizmat> making all output happening on STDERR

[10:58] <Nemokosch> without dying, that is :D anyway, I was looking at this .resume... I'm not sure I want to give the control flow back to where the error happened

[10:59] <Nemokosch> I just want to keep the loop running so that there can be a retry

[11:00] <lizmat> m: for ^10 { CATCH { next }; die if $_ == 5; .say }

[11:00] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§6‚ê§7‚ê§8‚ê§9‚ê§¬ª

[11:00] <lizmat> make sure the CATCH is inside the loop

[11:00] <lizmat> m: for ^10 { CATCH { say "CATCH"l; next }; die if $_ == 5; .say }

[11:01] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> for ^10 { CATCH { say "CATCH"‚èèl; next }; die if $_ == 5; .say }‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§   ‚Ä¶¬ª

[11:01] <lizmat> m: for ^10 { CATCH { say "CATCH"; next }; die if $_ == 5; .say }

[11:01] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§CATCH‚ê§6‚ê§7‚ê§8‚ê§9‚ê§¬ª

[11:03] <Nemokosch> okay, good enough overall. This leads to...

[11:04] <discord-raku-bot> <Nemokosch> https://gist.github.com/2colours/255b578e65003f5c85b04ec21cd70bf9

[11:04] <lizmat> you want to return the result of calling &actions, right ?

[11:06] <discord-raku-bot> <Nemokosch> yes :plad

[11:06] <discord-raku-bot> <Nemokosch> ü•∫

[11:06] <lizmat> so what is the problem with that code?

[11:06] <discord-raku-bot> <Nemokosch> Well, nothing anymore, I hope? üòÑ

[11:06] <discord-raku-bot> <Nemokosch> Will see the rest. Thanks for the help!

[11:07] <lizmat> well.. it will continue to retry on failure... which may be excessive

[11:07] <lizmat> especially if the failure is quick, you're going to burn a lot of CPU there

[11:07] <lizmat> so I'd put a max on the number of retries, and maybe put in an increasing delay on retries

[11:08] <discord-raku-bot> <Nemokosch> I doubt the failure is going to be quick. There is a 20 seconds timeout on the requests typically, could be even more

[11:08] <lizmat> ah, ok

[11:10] <lizmat> glad to have been of help :-)

[11:10] <discord-raku-bot> <Nemokosch> I'm trying to not over-engineer it because it's gonna be something that "only has to work" once in a month or so

[11:10] <discord-raku-bot> <Nemokosch> we host the service that should be accessed so if there is serious trouble, probably it will escalate to other systems and shutting down poor script won't be the biggest deal üòÖ

[11:10] <lizmat> gotcha :-)

[11:10] <lizmat> well, it's some form of production :-)

[11:14] <discord-raku-bot> <Nemokosch> I updated the gist with a "usage example"

[11:21] <lizmat> looks ok from here 

[11:22] <discord-raku-bot> <Nemokosch> Hopefully it will work okay. I kinda like this style

[11:23] <lizmat> :-)

[11:46] *** evalable6 left
[11:46] *** linkable6 left
[11:49] *** linkable6 joined
[11:49] *** evalable6 joined
[12:00] <discord-raku-bot> <Nemokosch> Lesson to learn: .kv only works for Maps, not Positionals of Pairs - however, for loop with :key and :value destructuring works for both

[12:01] <lizmat> yep, that's because a loop on a Map will produce a list of Pairs

[12:01] <lizmat> m: my %h = a => 42, b => 666; for %h { dd $_ }

[12:01] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´:b(666)‚ê§:a(42)‚ê§¬ª

[12:01] <lizmat> m: my %h = a => 42, b => 666; for %h { dd .^name }

[12:01] <camelia> rakudo-moar 10feda116: OUTPUT: ¬´"Pair"‚ê§"Pair"‚ê§¬ª

[12:06] *** Voldenet_ joined
[12:07] *** reportable6 left
[12:07] *** Voldenet left
[12:07] *** Voldenet_ is now known as Voldenet

[12:09] *** reportable6 joined
[12:15] *** Nemokosch left
[12:29] *** Nemokosch joined
[13:17] <ingy> hi tonyo 

[13:29] *** linkable6 left
[13:29] *** evalable6 left
[13:30] *** vrurg_ is now known as vrurg

[13:30] *** evalable6 joined
[13:31] *** linkable6 joined
[13:46] <ingy> tonyo: how can I `fez login` from a script (not interactively)

[13:47] <ingy> I could use `expect` but hopefully I can just curl something?

[13:52] <lizmat> ingy: afaik, you only need to do that once a month ?

[14:17] *** morte_ joined
[14:24] <ingy> lizmat: this is for an ephemeral environment

[14:25] <lizmat> then why upload it to fez ??   On fez it will stay there *forever*  !!

[14:27] <ingy> I'm not sure we are talking about the same thing.

[14:28] *** frost left
[14:28] <ingy> I have a tool that can publish modules in various languages. It runs in docker. It uses a credentials file containing fez creds and others.

[14:29] <ingy> When I do a `pst publish` in a raku module repo it should `fez login` and `fez upload`

[14:30] <ingy> I guess I'll look in the fez code and see what it's doing. I just thought I could get a quicker answer here :)

[14:31] <lizmat> sorry to have disappointed you

[15:22] *** guifa_ joined
[15:25] *** guifa left
[15:37] *** sena_kun left
[16:19] *** morte_ left
[16:36] *** dakkar left
[16:40] <El_Che> that sounds a tad dramatic

[16:44] <lizmat> sorry, but the person in question *always* wants it the quick and easy and lazy way, and I'm grumpy today

[17:01] * [Coke] offers lizmat something from the ice cream truck that just went through Coke's neighborhood.

[17:01] <[Coke]> ... or I would, if they ever drove by my house! They always go around!

[17:01] *** ajr joined
[17:03] *** ProperNoun left
[17:05] <leont> Given the weather in NL at the moment I'm pretty sure ice cream would be  welcome

[17:14] *** mexen left
[17:21] <lizmat> yeah..  will probably go out in 30 mins or so to get some

[17:31] <[Coke]> \o/

[17:32] *** morte_ joined
[17:39] <[Coke]> ... which I guess is the chocolate at the bottom of a coronetto?

[17:47] *** deoac joined
[17:47] *** japhb left
[17:55] *** japhb joined
[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[18:17] *** human-blip left
[18:18] *** human-blip joined
[18:31] *** mexen joined
[18:43] *** sena_kun joined
[18:49] *** nort left
[18:51] *** deoac left
[19:51] *** linkable6 left
[19:51] *** reportable6 left
[19:51] *** squashable6 left
[19:51] *** statisfiable6 left
[19:51] *** sourceable6 left
[19:51] *** greppable6 left
[19:51] *** bloatable6 left
[19:51] *** notable6 left
[19:51] *** releasable6 left
[19:51] *** unicodable6 left
[19:51] *** tellable6 left
[19:51] *** evalable6 left
[19:51] *** coverable6 left
[19:51] *** benchable6 left
[19:51] *** quotable6 left
[19:51] *** bisectable6 left
[19:51] *** shareable6 left
[19:51] *** nativecallable6 left
[19:51] *** committable6 left
[19:52] *** bloatable6 joined
[19:52] *** sourceable6 joined
[19:52] *** benchable6 joined
[19:52] *** shareable6 joined
[19:53] *** greppable6 joined
[19:53] *** releasable6 joined
[19:53] *** evalable6 joined
[19:53] *** bisectable6 joined
[19:53] *** statisfiable6 joined
[19:53] *** nativecallable6 joined
[19:53] *** quotable6 joined
[19:53] *** reportable6 joined
[19:53] *** notable6 joined
[19:54] *** coverable6 joined
[19:54] *** squashable6 joined
[19:54] *** committable6 joined
[19:54] *** tellable6 joined
[19:54] *** unicodable6 joined
[19:54] *** linkable6 joined
[20:27] *** ProperNoun joined
[20:33] *** djerius left
[20:33] *** djerius joined
[20:50] *** ProperNoun left
[20:51] *** ProperNoun joined
[21:15] *** Nemokosch left
[21:16] *** squashable6 left
[21:17] *** squashable6 joined
[21:58] *** morte_ left
[22:02] *** pamplemousse joined
[22:55] *** Sgeo joined
[23:18] *** sena_kun left
[23:21] *** irc_user joined
[23:25] *** delon joined
[23:26] *** delon left
