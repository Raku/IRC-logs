[00:01] <tonyo> new keyboard just got here, maybe this cro post will have enough time to make it into RKW
[00:08] *** reportable6 left
[00:09] *** reportable6 joined
[00:13] *** Darkcoal left
[01:07] *** benchable6 joined
[01:43] *** lainon joined
[01:45] *** lainon left
[01:50] *** jjido left
[02:10] *** tetramelly joined
[02:30] *** tetramelly left
[03:23] <guifa> I'll be posting a return to the "What's everyone working on" on reddit tomorrow
[03:30] *** evalable6 left
[03:30] *** linkable6 left
[03:31] *** evalable6 joined
[04:34] <Xliff> tonyo: Got a URL for that blog?
[04:34] <Xliff> guifa: For me? GDA/GDA-UI bindings for Raku
[04:35] <Xliff> https://www.gnome-db.org/
[05:02] *** evalable6 left
[05:15] <guifa> Xliff: I look forward to a post on it
[05:15] <guifa> I think codesections had the right idea.  Weekly is probably too much, but maybe a stickied monthly one will be the right trick.  It'll also draw attention for casual viewers of new cool stuff happening
[05:25] *** Xliff left
[06:08] *** reportable6 left
[06:31] *** linkable6 joined
[06:35] *** alfonsox joined
[06:52] *** abraxxa joined
[06:57] *** abraxxa left
[06:57] *** abraxxa joined
[07:05] *** evalable6 joined
[07:11] *** reportable6 joined
[07:34] *** Sgeo left
[07:53] *** ShaneC joined
[08:18] *** jjido joined
[08:39] *** ShaneC left
[08:48] *** lizmat_ joined
[08:48] *** TempIRCLogger__ joined
[08:49] *** Geth left
[08:49] *** RakuIRCLogger__ joined
[08:50] *** TempIRCLogger left
[08:51] *** lizmat left
[08:51] *** RakuIRCLogger left
[08:53] *** RakuIRCLogger__ left
[08:53] *** RakuIRCLogger joined
[08:59] *** dakkar joined
[09:00] *** lizmat_ left
[09:01] *** lizmat joined
[09:01] *** RakuIRCLogger left
[09:01] *** Geth joined
[09:04] *** jjido left
[09:05] <El_Che> morning
[09:05] *** Geth left
[09:05] *** Geth joined
[09:05] <discord-raku-bot> <Nemokosch#9980> ^^
[09:10] <discord-raku-bot> <Nemokosch#9980> okay, this explains why I didn't notice the weekly challenge
[09:32] *** p6steve_1 joined
[09:34] <p6steve_1> hi - is there a neat way to get back the sort order indices from .sort on a List (I can imagine some map that uses kv somehow, but is there just a methos I have missed?
[09:34] <p6steve_1> )
[09:35] <p6steve_1> (ah I see I am now 3 people ... soz, will fix after this)
[09:35] *** Oshawott joined
[09:37] *** archenoth left
[09:41] <discord-raku-bot> <Nemokosch#9980> I don't think I could help but still it would be good to understand the question...
[09:44] <MasterDuke> something like `[2, 6, 4].sort(:indices)` to return `[0, 2, 1]`?
[09:49] <MasterDuke> m: `say [2, 6, 4].pairs.sort(*.value).map(*.key)`
[09:49] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Bogus statement‚ê§at <tmp>:1‚ê§------> <BOL>‚èè`say [2, 6, 4].pairs.sort(*.value).map(*‚ê§    expecting any of:‚ê§        prefix‚ê§        statement list‚ê§        term‚ê§¬ª
[09:49] <MasterDuke> m: say [2, 6, 4].pairs.sort(*.value).map(*.key)
[09:49] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´(0 2 1)‚ê§¬ª
[09:50] <MasterDuke> but i don't know of a single pre-existing method/sub to do that
[09:57] <discord-raku-bot> <Nemokosch#9980> oh
[10:08] <p6steve_1> yes MasterDuke, that's the correct interpretation of the question 
[10:08] <p6steve_1> and the kind of thing I meant when I was imagining a map of kv (or Pairs)
[10:16] <CIAvash> m: say [2, 6, 4].antipairs.sort¬ª.value; say [2, 6, 4].antipairs.sort.hash.values;
[10:16] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´(0 2 1)‚ê§(2 0 1)‚ê§¬ª
[10:16] <CIAvash> m: say [2, 6, 4].antipairs.sort¬ª.value; say [2, 6, 4].antipairs.sort.hash.values;
[10:16] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´(0 2 1)‚ê§(0 2 1)‚ê§¬ª
[10:23] <p6steve_1> thanks - some neat options!
[10:32] *** p6steve_1 left
[10:42] *** p6steve_1 joined
[10:42] *** p6steve_1 left
[10:44] *** Kaiepi left
[10:44] *** Kaiepi joined
[10:48] *** p6steve_1 joined
[10:49] *** p6steve_1 left
[10:53] *** jjido joined
[10:55] *** p6steve left
[10:57] *** p6steve joined
[11:06] <p6steve> back to my true self (rather than p6steve_1) ... thanks to the magic of screen -r
[11:39] *** frost left
[11:59] *** jjido left
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:23] *** jjido joined
[12:55] *** tejr_ joined
[12:57] *** tejr left
[12:57] *** tejr_ is now known as tejr
[12:59] *** jjido left
[13:15] *** alfonsox left
[13:27] <lizmat> PSA: the next Rakudo Weekly will be posted on 7 March, unless someone pressed a red button somewhere
[13:28] <perryprog> drat, no red button emoji
[13:31] <dakkar> üà≤ (U+1F232 japanese "prohibited sign") maybe?
[13:33] *** p6steve left
[13:36] *** p6steve joined
[13:36] *** p6steve left
[13:39] *** p6steve joined
[13:56] *** Kaiepi left
[13:57] *** Kaiepi joined
[14:55] *** epony left
[15:07] *** frost joined
[15:31] *** Sgeo joined
[15:36] *** frost left
[16:58] *** epony joined
[16:59] *** jjido joined
[17:17] *** abraxxa left
[17:29] *** [Coke] joined
[17:30] *** jjido left
[17:40] *** dakkar left
[18:07] *** Hello16 joined
[18:08] *** Hello16 left
[18:08] *** reportable6 left
[18:16] * guifa was thinking about adding flairs on the reddit page
[18:17] <guifa> User flairs could help nwecomers see that vrurg and lizmat work on core that way, and some the regular posts could be flaired like weekly challenges, weekly editions, new release, etc.  
[18:17] <guifa> Thoughts?
[18:28] *** Xliff joined
[18:28] <Xliff> \o
[18:29] <Xliff> Given the signature for a method, the first parameter should always be the invocant, correct? If said invocant is class A, how can I turn that parameter from A:D to A:U ?
[18:30] *** simcop2387 left
[18:30] *** perlbot_ joined
[18:30] *** perlbot left
[18:30] *** simcop2387 joined
[18:30] *** jjido joined
[18:32] <japhb> Xliff: I'm not sure what you mean.  Do you want to know the type object of the invocant?  Like 'self.WHAT' or so?
[18:32] *** perlbot_ is now known as perlbot
[18:32] <Xliff> japhb: See here - https://replit.com/@Xliff/DeadExoticRecords#main.raku
[18:33] <Xliff> Is there a way to turn the first so that it is like the second?
[18:35] *** ShaneC joined
[18:39] <japhb> I'm now *more* confused.  I get two identical lines output.  What do you get?
[18:41] <Xliff> Oh. Sorry. I was doing more debugging. One sec.
[18:42] <Xliff> OK,  If you run it now, you will get two different type constraints.
[18:42] <Xliff> I'm trying to figure out how I can turn a signature like the first, into the second.
[18:43] <tonyo> m: class A { method a(A:U: Str $a) { say $a; }; }; A.a("hello");
[18:43] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´hello‚ê§¬ª
[18:43] <tonyo> m: class A { method a(A:U: Str $a) { say $a; }; }; A.a("hello"); A.new.a('test')
[18:43] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´hello‚ê§Invocant of method 'a' must be a type object of type 'A', not an object‚ê§instance of type 'A'.  Did you forget a 'multi'?‚ê§  in method a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[18:44] <Xliff> tonyo: So if I want, at compile time, to change method A from A:U to A:D -- how would that work?
[18:45] <japhb> Oh, wait, are you trying to figure out how to change the signature *during* the compile?  As in, at BEGIN time?
[18:45] <Xliff> Yep
[18:46] <japhb> I mean, I suppose you could go wrap the method with something with a different signature.  Seems a little odd, and feels like an XY question.
[18:46] <japhb> *Why* do you want to do this?
[18:46] <Xliff> I'd like to try something. 
[18:47] <Xliff> So you can't change the signature on the method directly, I suppose?
[18:47] <Xliff> I mean. I've always disliked the whole type-smiley mechanism. I want to see if I can do it one better via traits.
[18:48] <Xliff> Have the trait pun  the method, which alters the signature.
[18:48] <japhb> Huh.
[18:48] <japhb> Interesting idea.
[18:48] <Xliff> so -- class  A { method a (Str $a) is static { 1 } }; 
[18:49] <Xliff> Same as -- class A ( method a (A:U: Str $aA) { 1 } }
[18:49] <Xliff> Same as -- class A ( method a (A:U: Str $a)  { 1 } } # oops
[18:50] <Xliff> And my syntax is all a mess, but you should be able to get the idea.
[18:50] <guifa> Xliff: I think you could wrap the method and accomplish that pretty easily
[18:50] <Xliff> guifa: But I'd have to wrap the method....
[18:51] <Xliff> Please illustrate!
[18:53] <japhb> m: class B {}; B.say; B:U.say; my $bu = B:U; $bu.say;
[18:53] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´(B)‚ê§(B:U)‚ê§(B:U)‚ê§¬ª
[18:54] <japhb> (Just thinking that might allow you to replace the type of the method, or at least programmatically create a :U version of a class)
[18:54] <japhb> m: class B {}; my $b = B; my $bu = $b:U; $bu.say;
[18:54] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '$b:U' is not declared.  Did you mean '$bu'?‚ê§at <tmp>:1‚ê§------> class B {}; my $b = B; my $bu = ‚èè$b:U; $bu.say;‚ê§¬ª
[18:54] <japhb> Sadly, it doesn't like that.
[18:55] <japhb> m: class B {}; my $b = B; my $bu = ::($b):U; $bu.say;
[18:55] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´Use of uninitialized value element of type B in string context.‚ê§Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.‚ê§  in block <unit> at <tmp> line 1‚ê§No such symbol ''‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[18:55] <japhb> m: class B {}; my $b = B; my $bu = ::($b.^name):U; $bu.say;
[18:55] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´(B)‚ê§¬ª
[18:55] <japhb> AH, and there's the rub.
[18:56] <guifa> m: multi sub trait_mod:<is>(Method \m, :$static!) { m.wrap: anon method (|) { say "nope" and exit if self.defined; callsame } }; class F { method f is static { say "yay" } }; F.f; F.new.f
[18:56] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´yay‚ê§nope‚ê§¬ª
[19:03] <guifa> You won't be able to have a static and non-static version with the same signature though.  With RakuAST / macros / etc  I think it'll be possible to actually manipulate the signature
[19:04] <Xliff> guifa: That's what I'm hoping
[19:05] <Xliff> guifa - Nice! For my purposes, that limitation is fine, I can always fall back on the original method in that case.
[19:06] <Xliff> Hmm... would nice to keep the defined check at the dispatch level though. 
[19:06] <Xliff> RakuAST is going to have some large shoes t o fill.
[19:07] <tonyo> you should be able to do that with nqp to set the $!flags attribute in the Parameter
[19:08] *** reportable6 joined
[19:09] <guifa> an open question is to what degree a trait will be able to mianipulate stuff.  if it received (and returned) a RAST::Node, tere's some amazing cool stuff you could do BUT it would probably break backwards compatibility where traits expect compiled objects instead. maybe there will be a different trait_mod keyword that gets the RAST (it's not like it shouldn't be possible to add in more trait_mods besides handles, is, and does)
[19:14] <tonyo> update, you can.  Xliff 
[19:14] <tonyo> m: use nqp; class A { method a (A: Str $a) { }; method b (A:U: Str $b) { }; }; my $param := A.^lookup("a").signature.params[0]; dd $param.modifier; my int $flags = nqp::getattr($param, $param.WHAT, "\$!flags"); my int $f = 1 +< 16; $flags = $flags +$f; nqp::bindattr_i($param, $param.WHAT, "\$!flags", $flags); dd $param.modifier
[19:14] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´""‚ê§":U"‚ê§¬ª
[19:15] <tonyo> that 1+<16 should be replaced with the CONST in src/Parameter
[19:15] <tonyo> https://github.com/rakudo/rakudo/blob/master/src/core.c/Parameter.pm6#L30
[19:16] <guifa> lol @ slurpy-lol
[19:17] <tonyo> ?
[19:17] <guifa> https://github.com/rakudo/rakudo/blob/028828ac88ec4f77b4d84e9854b98fc2319c756a/src/core.c/Parameter.pm6#L19
[19:17] <guifa>     my constant $SIG_ELEM_SLURPY_LOL         = 1 +<  5;
[19:17] <ugexe> didnt there use to be an lol method or sub?
[19:17] <tonyo> oh haha
[19:17] <ugexe> pre 6.c
[19:17] <guifa> I'm guessing it was "list of lists"?
[19:17] <ugexe> yeah
[19:18] <tonyo> also used to be a dragon with a gold tooth in zef
[19:18] <guifa> I'm guessing
[19:18] <guifa> slurpy_pos = *@foo
[19:18] <guifa> slurpy_lol = **@foo
[19:18] <guifa> and slurpy_onearg = +@foo
[19:19] <guifa> (or maybe * and ** are flipped, I literally wrote a blog post on it and I still get them mixd up )
[19:31] <Xliff> tonyo: Yeah... looked at that. Not exposed, so I can't use it.
[19:31] <tonyo> you can use it.
[19:31] <Xliff> But thanks for the idea! My brain should have twigged on to it. I am still getting used to nqp.
[19:31] <tonyo> you have to use nqp to get at it
[19:32] <Xliff> Not $!flags... the constant.
[19:34] <tonyo> i know.  you could also do something funky like determining which bit it is by comparing A:U and A: so that it doesn't break if that constant changes
[19:35] <Xliff> Um. That would need a known A:U for it to work.
[19:35] <Xliff> But thanks for the ideas! # tonyo++
[19:38] <tonyo> the flag is the same regardless of type
[19:44] *** jjido left
[19:58] *** Sgeo_ joined
[20:00] *** Sgeo left
[20:00] <Xliff> japhb / tonyo / giufa--https://replit.com/@Xliff/DeadExoticRecords#main.raku
[20:01] <tonyo> does that site take ~15s to show you the files @Xliff?
[20:01] <Xliff> It should't. Hold on, I'll stick a version on tio.
[20:02] <Xliff> https://tio.run/##hZBBa4NAEIXv/oqXIESJXeIlB40Fe2oPPbXQQ9OGMW7NUnXt7noIpb/drquUHAo5DQzf@4Y3HVf1dhh6zdF@dSk8T/cFjCJhDo0sk53QtwgeuTnJEvsmwp2UNRJfGzLiuAjx7QHNGX5HihokGRqmRdWS6RVnbqlfN29W7DDRGvgfNVUa2XgwSSpuTUYFkyCaRezlPn@OsNz7C0cvQ2eYo@sMMdY7xFu3dZ5CtOUoOohrqmjWjMofzzvWpDXyqcjUkxA8GQWfIjy0JgjhFzZErTQnrm5oKg3EqR3W8JcrIDSmz8zIZkIslLP3WsrPvgtWtAr/@xGrhDZM0zm9hIursDcMvw
[20:02] <tonyo> not too shabby
[20:04] <Xliff> Dispatch doesn't catch it though, so....
[20:04] <Xliff> vhttps://tio.run/##hZDBSsNAEIbveYq/JdCEpqG99LBthXjSgycVD7aWSbqmi8lu3N0gRXz2uE1SLSIUFpYZvv8bZiqui3nT1IZDvlcLeJ6pU1hNwm5LtWNLYa4Q3HG7VzusywjXShVgvrFkRTYI8ekB5QF@RZpKsBXK2Ihckq01j9umeZ5unLjFhLTwXwvKDVbHgYzl3JmsDjpB1Ivip5vkIcJw7Q9aehi2hj46XmGG8RKzedttPamQu6NoKy6pol5zVH55XlaQMUi6Rbo9CcG91fApwq20QQg/dSGSyu65nlC3NDBbuM8ZfnIphEF3mR6Z/kUyBAl7ZDg5JieJe0n8Uij1VlfBiEbhf2eMc2FsbOiwOIfTi7Cj01NM8o/fIjvv9oXXNN8
[20:04] * guifa went ahead and added flairs to Reddit. so all you redditors, go choose one!
[20:06] <Xliff> Hmmm... the changes should be bound to .signature.params[0], but it looks like the changes just don't take affect.
[20:07] *** [Coke] left
[20:11] *** Summer left
[20:11] *** Juerd left
[20:11] *** Summer_ joined
[20:11] *** Summer_ is now known as Summer
[20:11] *** vodkra left
[20:12] *** Juerd joined
[20:12] *** vodkra joined
[20:18] <Xliff> Any new blogs  this week?
[20:23] *** renormalist left
[20:23] *** renormalist joined
[20:32] *** Darkcoal joined
[20:33] <gfldex> Xliff: as long as there is already a multi, you can use add_dispatchee to transform arguments: https://gist.github.com/gfldex/0df500d560d3e59a2360162a3a3bad6a
[20:38] <MasterDuke> moritz: when could/would `$/` be readonly?
[20:40] <guifa> MasterDuke seems when it's a parameter
[20:41] <MasterDuke> https://github.com/Raku/old-issue-tracker/issues/3012 is the original bug report, i'm going to experiment with it's examples
[20:43] <MasterDuke> hm, they give `Nil` now
[20:44] <MasterDuke> and on all releases (from 6.c on)
[20:45] <MasterDuke> guifa: but if you can come up with an example that would be much appreciated
[20:46] <guifa> MasterDuke this seems quite different from that bug report but
[20:46] <guifa> m: grammar G { token TOP { . } }; class A { method TOP ($/) { 'a' ~~ /a/ } }; G.parse: 'b', :actions(A)
[20:46] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´Cannot assign to a readonly variable or a value‚ê§  in method TOP at <tmp> line 1‚ê§  in regex TOP at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[20:47] <guifa> $/ = always gives a perlisms error, and $/ := gives bad LHA
[20:47] *** jjido joined
[20:48] <MasterDuke> i need to test it with s///, but afk for a bit
[20:49] <guifa> MasterDuke same here, afk for probably the day, but this causes the same issue with s///
[20:49] <guifa> grammar G { token TOP { . } }; class A { method TOP ($/) { 'a' ~~ s/a/b/ } }; G.parse: 'b', :actions(A)
[20:49] <guifa> m: grammar G { token TOP { . } }; class A { method TOP ($/) { 'a' ~~ s/a/b/ } }; G.parse: 'b', :actions(A)
[20:49] <camelia> rakudo-moar 028828ac8: OUTPUT: ¬´Cannot assign to a readonly variable or a value‚ê§  in method TOP at <tmp> line 1‚ê§  in regex TOP at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[20:56] *** tejr left
[20:56] *** tejr joined
[21:53] *** jjido left
[21:56] *** jjido joined
[22:00] *** jjido left
[22:08] *** p6steve__ left
[22:14] *** Darkcoal left
[22:20] <ShaneC> is it feasible to compile raku on windows without using the same toolchain that compiled perl?
[22:22] <ShaneC> compile rakudo*
[22:24] <MasterDuke> should be, yeah
[22:24] <tonyo> this cro post turned out to be a monster
[22:26] <tonyo> tbrowder: Xliff: https://deathbykeystroke.com/articles/20220224-building-a-cro-app-part-1.html
[22:48] *** codesections5 joined
[22:50] *** kjp left
[22:50] *** maettu left
[22:50] *** perlmaros left
[22:50] *** ilogger2 left
[22:50] *** codesections left
[22:50] *** codesections5 is now known as codesections
[22:50] <Xliff> tonyo++ # Thanks!
[22:51] *** kjp joined
[22:52] *** maettu joined
[22:54] *** perlmaros joined
[23:03] *** ilogger2 joined
[23:11] <tbrowder> tonyo++ you da man!!!
[23:31] *** Xliff left
