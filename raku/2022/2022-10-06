[00:07] *** reportable6 left
[00:07] *** reportable6 joined
[00:20] *** guifa joined
[00:23] *** guifa_ left
[01:11] *** Kaiepi joined
[01:11] *** Kaiepi left
[01:12] *** archenoth joined
[01:14] *** Oshawott left
[01:24] *** Kaiepi joined
[01:59] *** squashable6 left
[02:00] *** squashable6 joined
[02:26] *** razetime joined
[02:37] *** Tojin joined
[02:37] *** Tojin left
[03:23] *** squashable6 left
[03:25] *** squashable6 joined
[03:37] *** razetime left
[04:07] <tonyo> excellent obfuscation

[04:08] <tonyo> m: constant \s = -> \a { &infix:<*>(a,2) }; -> --> s { }()(2).say;

[04:08] <camelia> rakudo-moar 30a9d3a40: OUTPUT: ¬´4‚ê§¬ª

[04:13] *** razetime joined
[04:48] *** razetime left
[05:03] *** bigdata joined
[05:57] *** bigdata left
[06:06] *** reportable6 left
[06:09] *** reportable6 joined
[06:13] *** ProperNoun left
[06:14] *** ProperNoun joined
[06:55] *** razetime joined
[07:06] *** Sgeo left
[07:20] *** MoC joined
[07:24] *** lichtkind joined
[07:41] *** lichtkind left
[08:03] *** MoC left
[08:09] *** dakkar joined
[08:21] <discord-raku-bot> <Nemokosch> Functions hidden behind terms: yes, negative integers: no

[08:21] <discord-raku-bot> <Nemokosch> vrurg will hold lessons about core development

[08:23] <discord-raku-bot> <Nemokosch> I'm definitely willing to alter the grammar to eliminate this "consistency" that -1 is an expression rather than a literal

[08:25] *** discord-raku-bot left
[08:26] *** discord-raku-bot joined
[08:31] *** MoC joined
[08:33] *** sena_kun joined
[08:51] *** razetime left
[08:51] *** razetime joined
[08:59] *** razetime left
[08:59] *** razetime joined
[09:18] *** jetchisel left
[09:21] *** jetchisel joined
[09:25] *** linkable6 left
[09:26] *** linkable6 joined
[09:31] *** razetime left
[10:31] *** evalable6 left
[10:31] *** sourceable6 left
[10:31] *** statisfiable6 left
[10:31] *** bisectable6 left
[10:31] *** bloatable6 left
[10:31] *** greppable6 left
[10:31] *** nativecallable6 left
[10:31] *** quotable6 left
[10:31] *** releasable6 left
[10:31] *** unicodable6 left
[10:31] *** notable6 left
[10:31] *** squashable6 left
[10:31] *** benchable6 left
[10:31] *** linkable6 left
[10:31] *** tellable6 left
[10:31] *** shareable6 left
[10:31] *** committable6 left
[10:31] *** reportable6 left
[10:31] *** coverable6 left
[10:31] *** nativecallable6 joined
[10:31] *** shareable6 joined
[10:31] *** coverable6 joined
[10:32] *** squashable6 joined
[10:32] *** notable6 joined
[10:32] *** linkable6 joined
[10:32] *** tellable6 joined
[10:32] *** bloatable6 joined
[10:32] *** sourceable6 joined
[10:32] *** committable6 joined
[10:32] *** bisectable6 joined
[10:32] *** reportable6 joined
[10:33] *** statisfiable6 joined
[10:33] *** unicodable6 joined
[10:33] *** quotable6 joined
[10:33] *** benchable6 joined
[10:34] *** evalable6 joined
[10:34] *** greppable6 joined
[10:34] *** releasable6 joined
[10:55] *** sena_kun left
[10:56] *** sena_kun joined
[11:05] *** frost joined
[11:07] <guifa> you might have more buy in for working to ensure that the pointy-arrow return value excepts anything resolvable at compile time: that's a restriction in, e.g., interpolated module names in use statements

[11:08] <guifa> -1 is resolvable at compile time.  10 + $a (where $a is a compile-time constant) is similarly resolvable at a compile time

[11:08] * guifa is afk

[11:14] <discord-raku-bot> <Nemokosch> you mean "accepts", no?

[11:17] <discord-raku-bot> <Nemokosch> I don't think this is an either-or thing, by the way. -1 _is a value and not an expression_. This needs to be fixed before it causes further trouble, regardless compile-time resolution.

[11:45] *** Kaiepi left
[11:50] <Geth> ¬¶ doc: massa++ created pull request #4115: Including :x adverb

[11:50] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4115

[11:51] <lizmat>  Nemokosch: fwiw, with static optimization enabled, a -1 will be codegenned as a WVal of -1

[11:51] <tellable6> lizmat, I'll pass your message to Nemokosch

[12:03] *** jetchisel left
[12:06] *** MoC left
[12:06] *** reportable6 left
[12:09] *** reportable6 joined
[12:13] *** frost left
[12:14] <discord-raku-bot> <Nemokosch> lizmat: yeah no, my biggest worry isn't the generated code, rather the conceptual and grammar implications of "-1 is not a value but an expression"

[12:16] <lizmat> do you consider +1 to be an expression ?

[12:17] <discord-raku-bot> <Nemokosch> I don't consider it to be the same as -1, for sure

[12:19] <discord-raku-bot> <Nemokosch> perhaps I still wouldn't consider it an expression but mainly it's not the same

[12:29] <discord-raku-bot> <Nemokosch> I'd say it's more valid to say "+1 is a numeric literal" than "-1 is not a numeric literal", it's less counterfactual regarding the expectations of whoever enters a number

[12:48] *** frost joined
[12:56] *** epony left
[13:00] *** m_athias left
[13:01] *** m_athias joined
[13:13] *** Kaiepi joined
[13:14] *** jetchisel joined
[13:23] *** Sgeo joined
[13:31] <tonyo> if you're coming from haskell then you have no expectations of `-1` being a number..my presumption wouldn't be others' expectations

[13:35] <tonyo> https://stackoverflow.com/a/61272957

[13:35] *** Kaiepi left
[13:35] <dutchie> consider APL/J where there is a separate minus sign to form a negative number literal (¬Ø1 or _1)

[13:37] <dutchie> possibly not relevant as a choice forced by other aspects of array language syntax, but interesting nonetheless

[13:45] <tonyo> APL has a lot of interesting decisions/design

[14:34] *** xinming left
[14:37] *** xinming joined
[14:37] *** epony joined
[14:58] <discord-raku-bot> <Nemokosch> perhaps _that_ shouldn't be the base of assumptions

[15:00] <discord-raku-bot> <Nemokosch> Raku is advertised as a language that "just works the way you expect" and the mainstream interpretation seems to be: the way a lay person reads text

[15:02] <discord-raku-bot> <Nemokosch> if you are coming from 4th grade math, your expectation is that `-1` is a number, and `-1` will work everywhere where a numeric literal is needed - unless the domain explicitly excludes this value

[15:04] <discord-raku-bot> <Nemokosch> by the way, for Haskell: it eats -1 just fine, as a number, and doesn't eat +1 at all

[15:05] <tonyo> fourth graders don't write a lot of code

[15:05] <tonyo> and no, haskell doesn't.   `let a = 5 - -1` is an error

[15:06] <discord-raku-bot> <Nemokosch> yes, it does, I just tried it

[15:06] <discord-raku-bot> <Nemokosch> and anyway, it's written down in the SO answer you linked

[15:06] <discord-raku-bot> <Nemokosch> everybody was a 4th grader once; not everybody did Haskell/APL

[15:06] <discord-raku-bot> <Nemokosch> and this is an advertised aspect of Raku design

[15:11] *** MoC joined
[15:12] <Geth> ¬¶ doc: 760bbc3538 | (Humberto Massa)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[15:12] <Geth> ¬¶ doc: Including :x adverb (#4115)

[15:12] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/760bbc3538

[15:12] <linkable6> Link: https://docs.raku.org/language/regexes

[15:13] *** linkable6 left
[15:14] *** linkable6 joined
[15:25] <discord-raku-bot> <Nemokosch> These discussions aren't chat compatible really, this format is a fuel of way too quick responses. I will do what I can, be it implementation or describing a rationale

[15:27] <discord-raku-bot> <Nemokosch> Humberto Massa is a prolific Weekly Challenger üíØ

[15:34] *** Kaiepi joined
[16:00] * [Coke] also sets up a basic win10 box in azure so he can do the win install instructions on a pristine box.

[16:31] <tonyo> the original backend of rakudo was written in haskell

[16:31] <tonyo> https://gist.github.com/tonyo-tatari/3c2c03729614e0dbaf1e0374cb896905

[16:32] <tonyo> take a nice look at the ghci not allowing the `let` statement above

[16:32] *** dakkar left
[16:45] <tonyo> well, one of the backends, anyway

[16:45] <discord-raku-bot> <Nemokosch> anyway, -1 is a number according to the REPL of haskell.org itself, and I still fail to see why this would be any relevant for Raku

[16:47] <tonyo> i didn't say it was relevant to raku.  it's relevant to making assumptions about peoples expectations, though

[16:50] <discord-raku-bot> <Nemokosch> well, very slightly

[16:50] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/syntax#Literals the docs do mention (2 times out of 3) the current parsing

[16:51] <tonyo> why would your expectations differ from the docs?

[17:00] <discord-raku-bot> <Nemokosch> no I mean, documenting the behavior is better than not documenting it

[17:00] <discord-raku-bot> <Nemokosch> but doesn't make the behavior itself better

[17:00] <discord-raku-bot> <Nemokosch> so far, I'm yet to hear a benefit of this approach, something tangible

[17:01] <discord-raku-bot> <Nemokosch> and I already see a disadvantage: arrow returns don't work for negative numbers which is hardly justifiable towards an outsider

[17:02] <discord-raku-bot> <Nemokosch> this is how it all started. I wanted to fix arrow returns and realized that the whole grammar is built upon the assumption that negative numbers cannot be values

[17:03] *** Guest49 joined
[17:03] <Guest49> Hi who create this disgusting website?

[17:04] <Guest49> https://docs.raku.org/language/5to6-nutshell

[17:05] <discord-raku-bot> <Nemokosch> mehh, you haven't tried to learn Typescript from docs üòÑ

[17:08] <discord-raku-bot> <Nemokosch> oh right, one more thing. Probably it's possible to fix return arrows to accept any "constexpr" - but the mental acrobatics probably won't stop here, if one always have to pay attention to allow "negative literals" anywhere where literals are okay.

[17:09] <discord-raku-bot> <Nemokosch> The only convincing way I can imagine is some mechanism that ensures at parsing that "constexpr"s are turned into their values

[17:11] <discord-raku-bot> <Nemokosch> And even then, I would still think it's worth knowing if there was some tangible benefit on the side of minus-one-as-negated-one

[17:32] *** dextercd joined
[17:36] *** Altai-man joined
[17:38] *** sena_kun left
[17:41] *** Altai-man left
[17:41] *** Altai-man joined
[17:49] <lizmat> Guest49: anything else you'd like to say?

[17:50] *** ChanServ sets mode: +o lizmat

[17:54] *** Guest49 left
[17:55] *** sena_kun joined
[17:57] *** Altai-man left
[17:57] *** ChanServ sets mode: -o lizmat

[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:40] <Geth> ¬¶ mu: 955caf36c4 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | docs/Perl6/Cheatsheet/cheatsheet.txt

[18:40] <Geth> ¬¶ mu: Version 9 of the cheatsheet

[18:40] <Geth> ¬¶ mu: 

[18:40] <Geth> ¬¶ mu: Replace the clearly wrong @*INC by $*REPO

[18:40] <Geth> ¬¶ mu: review: https://github.com/Raku/mu/commit/955caf36c4

[19:05] <[Coke]> https://github.com/lizmat/App-Rak/issues/15#issuecomment-1270549515 - anyone remember the fix for this 'zef install' error?

[19:10] *** evalable6 left
[19:10] *** linkable6 left
[19:10] *** linkable6 joined
[19:10] <lizmat> [Coke]: no idea, but I bet it's the same thing that is breaking CI on WIndows :-(

[19:12] *** evalable6 joined
[19:12] <lizmat> the path feels wrong though: a .tar.gz extension as a directory, and then a mix of separators ?

[19:16] <[Coke]> running in git bash on windows.

[19:33] *** simcop2387 left
[19:33] *** perlbot left
[19:35] *** perlbot joined
[19:36] *** simcop2387 joined
[20:30] *** justHaunted is now known as _justHaunted

[20:30] *** _justHaunted is now known as justHaunted

[20:30] *** frost left
[20:35] <tbrowder> i‚Äôm trying to create another child class of DateTime. i don‚Äôt yet see a reliable way to pass new() args to self.DateTime::new(|c). some combos work and others don‚Äôt. do i need to unpack the |c from the subclass or redefine the capture before passing it along? or do i need to go the whole multi signature route? or is it a lost cause? i had success with DateTime::Julian, thanks to lizmat, because only one specific signature was 

[20:35] <tbrowder> passed to self new, otherwise the (|c) works fine.

[20:36] *** Colere left
[20:37] *** Colere joined
[21:07] *** sena_kun left
[21:08] *** sena_kun joined
[21:40] *** MoC left
[22:06] <lizmat> tbrowder: could you post a gist of what you're trying ?

[22:12] *** sena_kun left
[22:25] *** drakonis joined
[23:20] <elcaro> Need some guidance on licenses. If I'm creating bindings to a shared lib (eg. .so, .dll) does the licens of my module have to comply with the license the shared lib is under?

[23:22] <elcaro> I notice Inline::Go is MIT, but Go itself is BSD3. Both Inline::Ruby and Inline::Python are Artistic2 (which is largely a Perl/Raku thing)

[23:25] *** evalable6 left
[23:25] *** linkable6 left
[23:25] *** evalable6 joined
[23:26] <elcaro> With a shared lib... I guess I'm not really including any source, so maybe there's no strict requirement? Halp

[23:26] *** linkable6 joined
[23:27] <[Coke]> Someone using your wrapper is bound by your license and the lib's license.

[23:27] <[Coke]> If you use the same license, you're making it easier on your users, presumably, so they only have to worry about one license.

[23:28] <elcaro> I see

[23:28] <[Coke]> I am not a lawyer, but I do often ask the legal team at $dayjob "can we use this OSS thing?"

[23:29] <elcaro> Yeah, what you said makes sense. Thanks

[23:30] <[Coke]> if you're doing a bundled distro (like, you're building a wrapper that CONTAINS the other thing and you're shipping both, that's a different set of issues. You may even be prohibited from doing that, depending on the original lib's license)

[23:31] <[Coke]> good luck!

[23:31] <elcaro> Yeah, I'm not bundling... but yeah I think it makes sense to release the wrapper under the same license. They have to be ok with that license anyway to use the shared lib, so it only makes sense

[23:41] *** dextercd left
[23:41] <tbrowder> lizmat: i'll post a gist tomorrow--almost my bedtime  :-)

[23:59] <[Coke]> ugh. the small VM I created to do the windows build test is too small.

