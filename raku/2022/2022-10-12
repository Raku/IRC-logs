[00:02] *** habere-et-disper left
[00:07] <[Coke]> there's no self during the end. if you save it into a lexical, that might work.
[00:07] *** reportable6 left
[00:07] <[Coke]> not sure why it would work in non-first runs.
[00:07] *** reportable6 joined
[00:07] <[Coke]> ... I mean, assuming my guess is right.
[00:18] *** derpydoo joined
[01:06] <tonyo> Is it being precomped?
[01:16] *** MasterDuke left
[01:16] *** synthmeat left
[01:16] *** dogbert11 left
[01:16] *** rypervenche left
[01:16] *** tejr left
[01:16] *** kaskal left
[01:16] *** Tirifto_ left
[01:16] *** oodani left
[01:16] *** human_blip left
[01:16] *** mtj left
[01:16] *** kybr left
[01:16] *** a3r0 left
[01:16] *** gfldex left
[01:16] *** kaskal joined
[01:16] *** oodani joined
[01:16] *** synthmeat joined
[01:16] *** a3r0 joined
[01:17] *** dogbert11 joined
[01:17] *** rypervenche joined
[01:17] *** rypervenche left
[01:17] *** rypervenche joined
[01:17] *** mtj joined
[01:17] *** Tirifto joined
[01:18] *** human_blip joined
[01:18] *** derpydoo left
[01:21] *** tejr joined
[01:26] *** gfldex joined
[01:30] *** deoac joined
[01:30] <deoac> ```
[01:30] <deoac> my Rat $r = 1.0;
[01:30] <deoac> my Int $i = 1;
[01:30] <deoac> try $i = $r;
[01:30] <deoac> say $! if $!;
[01:30] <deoac> try $r = $i;
[01:30] <deoac> say $! if $!;
[01:30] <deoac> #OUTPUT:
[01:30] <deoac> #Type check failed in assignment to $i; expected Int but got Rat (1.0)
[01:30] <deoac> #  in block <unit> at deleteme.raku line 5
[01:30] <deoac> #
[01:31] <deoac> #Type check failed in assignment to $r; expected Rat but got Int (1)
[01:31] <deoac> #  in block <unit> at deleteme.raku line 7
[01:31] <deoac> ```
[01:31] <deoac> Why aren't Ints coerced into Rats?
[01:37] <guifa> Assignment doesn't automatically coerce in Raku (unless you have a coercion type)
[01:38] <guifa> So you could do, for instance
[01:39] <guifa> m: my Rat() $r = 1.0; my Int $i = 1; $r = $i; say "r is $r and is a ", $r.WHAT;
[01:39] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´r is 1 and is a (Rat)‚ê§¬ª
[01:47] *** MasterDuke joined
[02:01] *** deoac left
[02:01] *** deoac joined
[02:01] *** HvszrStykp joined
[02:01] <deoac> Thanks, I didn't know about the Int() syntax.
[02:02] <deoac> But the question remains, why aren't Ints automatically coerced to Rats?¬† It's certainly DWIM.
[02:03] *** kybr joined
[02:04] <MasterDuke> raku is strongly typed and they're different types
[02:05] <MasterDuke> they can coerce if you request that, but it doesn't happen automatically
[02:07] <MasterDuke> m: say Int.^mro; say Rat.^mro
[02:07] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´((Int) (Cool) (Any) (Mu))‚ê§((Rat) (Cool) (Any) (Mu))‚ê§¬ª
[02:41] *** frost joined
[02:55] *** razetime joined
[03:04] *** bigdata joined
[03:07] *** deoac left
[03:17] *** Oshawott joined
[03:21] *** archenoth left
[03:48] *** razetime left
[03:55] *** bigdata left
[04:17] *** HvszrStykp left
[04:27] *** [Coke]___ joined
[04:29] *** [Coke] left
[04:37] *** razetime joined
[04:40] *** cm left
[04:40] *** cm joined
[05:18] *** razetime left
[05:32] *** Kaiepi left
[05:33] *** Xliff joined
[05:34] <Xliff> https://gist.github.com/Xliff/69b7bccf1f740d61bcf91de27abe8657
[05:34] <Xliff> \o
[05:34] <tellable6> 2022-10-05T11:00:55Z #raku <gfldex> Xliff https://gist.github.com/b1a3eb9f870cb7c6af384763f2fa2a80
[05:47] *** razetime joined
[06:08] *** reportable6 left
[06:09] *** reportable6 joined
[06:22] *** abraxxa joined
[06:22] *** HvszrStykp joined
[06:24] *** abraxxa left
[06:26] *** abraxxa joined
[06:30] *** abraxxa left
[06:31] *** abraxxa joined
[06:42] *** gfldex left
[06:42] *** human_blip left
[06:42] *** rypervenche left
[06:42] *** dogbert11 left
[06:42] *** a3r0 left
[06:42] *** vrurg left
[06:42] *** silug left
[06:42] *** dustinm` left
[06:42] *** ilogger2 left
[06:42] *** perlmaros left
[06:42] *** bdju left
[06:42] *** a3r0 joined
[06:42] *** perlmaros_ joined
[06:43] *** rypervenche joined
[06:43] *** dogbert11 joined
[06:43] *** silug joined
[06:43] *** perlmaros_ is now known as perlmaros
[06:43] *** rypervenche left
[06:43] *** rypervenche joined
[06:43] *** vrurg joined
[06:44] *** bigdata joined
[06:45] *** dustinm` joined
[06:46] *** human_blip joined
[06:47] *** ilogger2 joined
[06:48] *** bdju joined
[06:52] *** gfldex joined
[07:20] *** lichtkind joined
[07:29] *** Sgeo left
[07:52] <Kernspin> Good morning.
[07:53] <discord-raku-bot> <Nemokosch> sup
[08:03] *** razetime left
[08:07] *** dakkar joined
[08:20] *** razetime joined
[08:54] *** Kaiepi joined
[09:30] <lizmat> hythm:  END try self.some-method()
[09:30] <tellable6> lizmat, I'll pass your message to hythm
[09:44] <discord-raku-bot> <Nemokosch> deoac: the point you went down from the track of DWIM was when you assigned a self-declared Int to a self-declared Rat. Basically, you were the one who explicitly asked it to fail
[09:44] *** Kaiepi left
[09:46] <discord-raku-bot> <Nemokosch> I'm often under the impression Raku type annotations weren't meant for what people are trying to use them
[09:46] <discord-raku-bot> <Nemokosch> And this is the rare case where I think people could be "fixed" instead of the language
[09:48] <discord-raku-bot> <Nemokosch> ironically enough, the type annotation could rightfully claim "I do what I mean", as in meaning
[09:50] *** Kaiepi joined
[09:53] *** habere-et-disper joined
[09:55] *** zups joined
[10:05] *** Kaiepi left
[10:06] <guifa> There's a reason Real and Numeric types exist, fwiw
[10:06] <guifa> Those are broader and will take Rats and Ints alike
[10:08] *** habere-et-disper left
[10:10] <Xliff> \o
[10:10] <Xliff> https://gist.github.com/Xliff/69b7bccf1f740d61bcf91de27abe8657
[10:14] <discord-raku-bot> <Nemokosch> The naming of types could be better, if anything, Real being "outside" of Num
[10:15] *** Kaiepi joined
[10:16] *** holyghost left
[10:16] *** sena_kun joined
[10:23] <discord-raku-bot> <Nemokosch> Xliff: what does `does` do, and are you sure it shouldn't be `but`?
[10:23] <discord-raku-bot> <Nemokosch> both are absolute magic to me tbh
[10:32] <lizmat> Nemokosch: do you grok roles ?
[10:32] <tellable6> lizmat, I'll pass your message to Nemokosch1
[10:46] <discord-raku-bot> <Nemokosch> Nemokosch1 is back...
[10:51] <discord-raku-bot> <Nemokosch> lizmat: no, I don't think so
[10:51] <lizmat> and you've read https://docs.raku.org/language/objects#Roles ?
[10:53] <lizmat> in any case, you could think of "does" as the "but-rw" version of "but"
[10:53] <lizmat> a does b          is sorta like    a = a but b
[10:58] <discord-raku-bot> <Nemokosch> I only read it superficially. Honestly, the time just hasn't come when it's useful for me.
[10:59] <lizmat> have you used inheritance in classes, and where annoyed by its deficiencies ?   read up on roles :-)
[10:59] <lizmat> *were
[11:05] <tbrowder> .tell tonyo i'm not yet using yr code as basis for formatter, the trick is getting two or more different  formatters in the same program that actually work with DateTime to produce, e.g., "2022-10-11T00:00:00 CST" or "2023-06-01T00:00:00 CDT". i can do that with my hack, but can't with yrs.
[11:05] <tellable6> tbrowder, I'll pass your message to tonyo
[11:07] <discord-raku-bot> <Nemokosch> I'm pretty sure HTML::Tag itself uses roles but I haven't needed to alter them much yet üòÑ
[11:14] *** labster left
[11:24] <tbrowder> melezhik: i just added a feature request for Cromtit
[11:24] <tellable6> tbrowder, I'll pass your message to melezhik
[11:25] <tonyo> tbrowder:  do you have a usage or repo I can peek at?
[11:25] <tellable6> hey tonyo, you have a message: https://gist.github.com/288f3ee903a034bcd19fd95eba5d6f43
[11:47] *** frost left
[11:54] *** habere-et-disper joined
[12:07] *** reportable6 left
[12:07] *** reportable6 joined
[12:17] *** Kaiepi left
[12:17] *** Kaiepi joined
[12:21] *** [Coke]___ is now known as [Coke]
[12:23] *** derpydoo joined
[12:35] *** epony left
[12:38] *** bigdata left
[12:39] <tbrowder> tonyo: yes - https://github.com/tbrowder/LocalTime/
[12:39] *** lizmat_ joined
[12:42] *** RakuIRCLogger joined
[12:43] *** lizmat left
[12:47] *** RakuIRCLogger left
[12:47] *** RakuIRCLogger joined
[13:28] <Xliff> Did anyone get the chance to look at my gist?
[13:29] <Xliff> Or can tell me how I can get values from a Parameter object?
[13:30] <lizmat_> Parameter.get_value ?
[13:30] *** lizmat_ is now known as lizmat
[13:30] <Xliff> lizmat: Can you tell me why my gist doesn't work?
[13:30] <lizmat> not without looking deeper into it, and I need to go afk in a few minutes
[13:31] <lizmat> will look into it when back in a few hours
[13:31] <Xliff> lizmat: Isn't that Attribute.get_value?
[13:31] *** abraxxa left
[13:31] <Xliff> lizmat: *sigh* -- OK, thanks.
[13:31] <lizmat> ah.. yes...  
[13:31] <lizmat> oops, you're right
[13:31] <Xliff> :)
[13:32] <lizmat> hmmm. off the top of my head, there's no interface to the Parameter object to do that
[13:33] <Xliff> Ah. Why not?
[13:33] <Xliff> I guess I can see why, though.
[13:33] <Xliff> I'd like to write a Parameter::Also
[13:33] <Xliff> The existing syntax is bothering me. :)
[13:34] <lizmat> creating Method::Also originally was just syntactic sugar for .^add_method
[13:34] <lizmat> so there was metamodel support for it
[13:34] <Xliff> I know. We've had that conversation, I think. :)
[13:35] <lizmat> could well be  :-)
[13:35] <Xliff> I was hoping that all I needed to do was override Parameter.named_names, but that turns out to not be the case.
[13:36] <Xliff> I guess I'll delve into the source if I get some time today. Thanks.
[13:37] <lizmat> could be just named_names, but at compile time
[13:37] *** razetime left
[13:37] <Xliff> Aren't traits done at compile time?
[13:37] <lizmat> true
[13:37] <lizmat> afk&
[13:45] *** dogbert11 left
[13:58] <vrurg> Xliff: a lot of work is done by parameter binding code. Not sure how does aliasing work, I was mostly focusing on different things. But I could guess it's not using metamodel.
[14:01] *** jgaz joined
[14:23] <vrurg> Xliff: yep, that's the case. Grep for named_names through Actions.nqp. It's not using parameter's object.
[14:23] <tbrowder> tonyo: check my prog in the dev directory: tonyo-v2.raku
[14:24] <tbrowder> that's where i started experimenting with your lag
[14:24] <tbrowder> *latest
[14:24] *** Sgeo joined
[15:01] *** razetime joined
[15:03] <[Coke]> updated to HEAD recently, ran a script on windows, got a segfault.
[15:03] <[Coke]> will see if I can track it down.
[15:05] *** melezhik joined
[15:05] <melezhik> o/
[15:05] <tellable6> 2022-10-12T11:24:04Z #raku <tbrowder> melezhik: i just added a feature request for Cromtit
[15:05] <melezhik> .tell tbrowder - cool! - https://github.com/melezhik/Cromtit/blob/main/cookbook.md#restart-apache-server
[15:06] <tellable6> melezhik, I'll pass your message to tbrowder
[15:07] <tbrowder> melezhik: hi, thnx, gotta go, bye
[15:07] <melezhik> tbrowder , sure, thanks again!
[15:13] *** Colere is now known as Sauvin
[15:18] *** epony joined
[15:23] *** melezhik left
[16:07] *** derpydoo left
[16:13] <[Coke]> segfault was occuring loading an old .precomp :(
[16:13] <[Coke]> I removed the .precomp dir in question, script started working again
[16:14] <[Coke]> wish I had saved the old directory for diagnostics, sorry.
[16:16] <[Coke]> is a newer version of rakudo enough to trigger re-compilation? (if so, is it just when the bytecode format changes, or when a version is released, or...)
[16:36] *** dakkar left
[16:38] <tonyo> tbrowder: should this be converting the time to the right timezone?
[16:47] <tbrowder> no, i take care of that. just handle various text inputs that go after the time string. they are constant strings inside the formatter.
[16:47] <tonyo> tbrowder: https://gist.github.com/tonyo-tatari/2c567e1a308b93172b05b58651d62ae9
[16:50] *** haxxelotto joined
[16:51] *** sena_kun left
[16:58] *** haxxelotto left
[16:59] *** derpydoo joined
[17:14] *** derpydoo left
[17:16] *** habere-et-disper left
[17:20] *** derpydoo joined
[17:30] *** haxxelotto joined
[17:35] <tbrowder> look at my method gen-fmt-class
[17:47] *** dextercd joined
[17:50] *** razetime left
[18:03] *** TieUpYourCamel left
[18:06] *** reportable6 left
[18:09] *** reportable6 joined
[18:13] <tonyo> I see, I'll modify for that ^
[18:16] *** TieUpYourCamel joined
[18:48] <ugexe> [Coke]: should be, but yeah for some reason deleting the precomp folder fixes things for unknown reasons
[18:48] <ugexe> i often think it might be related more to runtime module loading but i dont really have any proof of that
[18:58] <[Coke]> Thanks
[19:16] *** linkable6 left
[19:16] *** evalable6 left
[19:16] *** sftp left
[19:16] *** sftp joined
[19:18] *** linkable6 joined
[19:18] *** evalable6 joined
[19:34] *** lizmat left
[19:35] *** lizmat joined
[19:55] <ugexe> m: my %*SUB-MAIN-OPTS = :allow-no; sub MAIN(:$foo, :$no-foo) { say $foo; say $no-foo }; BEGIN @*ARGS = <--foo --no-foo>;
[19:55] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´[True False]‚ê§(Any)‚ê§¬ª
[19:55] <ugexe> why im not a fan of having all these MAIN options
[19:57] <discord-raku-bot> <Nemokosch> what is this SUB-MAIN-OPTS at all?
[19:58] <ugexe> it changes the parsing of sub MAIN. it also pretty much guarantees the current implementation can never be replaced due to so much of the tacked on functionality not having much cohesiveness or or consistency
[20:02] <ugexe> our descendants will use `sub MAIN2 {...}`
[20:03] <discord-raku-bot> <Nemokosch> maybe in version 7 üòÇ
[20:03] <ugexe> i though larry said there couldnt be a version 7 because that would imply it was perfect or some such
[20:03] <discord-raku-bot> <Nemokosch> and they will never know where that 2 came from
[20:05] <discord-raku-bot> <Nemokosch> like X11, forever 11
[20:05] <discord-raku-bot> <Nemokosch> ugexe: fair point; guess that's why Perl5 folks had to back up from releasing Perl 7
[20:08] <discord-raku-bot> <Nemokosch> on a more serious tone: I personally think that it's hard to further improve the situation around CLI argument parsing - simply because it's superior to everything I have seen or heard of
[20:10] <ugexe> m: sub MAIN(Str :$mystr) { say so $mystr; say $mystr }; BEGIN @*ARGS = <--mystr=False>
[20:10] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´Usage:‚ê§  <tmp> [--mystr=<Str>]‚ê§¬ª
[20:11] <ugexe> like i cant think of a single situation where someone wants to pass a boolean false as the string "False"
[20:11] <ugexe> m: sub MAIN(Str :$mystr) { say so $mystr; say $mystr }; BEGIN @*ARGS = <--mystr=FalseXXX>
[20:11] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´True‚ê§FalseXXX‚ê§¬ª
[20:13] <discord-raku-bot> <Nemokosch> I have seen this with enums
[20:14] <discord-raku-bot> <Nemokosch> more precisely: `Label` failed to be parsed as an enum value because of the existing `Label` class
[20:14] <ugexe> its at least consistent in its own way. afterall is --mystr=1 an in or a str?
[20:14] <ugexe> int or a str^
[20:14] <ugexe> but beyond numerical stuff it doesn't seem useful
[20:17] <discord-raku-bot> <Nemokosch> Is there even a way to force passing False as a string?
[20:20] <ugexe> m: my %*SUB-MAIN-OPTS = :coerce-allomorphs-to(Str); sub MAIN(Str :$mystr) { say so $mystr; say $mystr }; BEGIN @*ARGS = <--mystr=False>
[20:20] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´Usage:‚ê§  <tmp> [--mystr=<Str>]‚ê§¬ª
[20:20] <ugexe> i would intuitively expect that to do so, but obviously doesnt
[20:22] <ugexe> m: my %*SUB-MAIN-OPTS = :coerce-allomorphs-to(Version); sub MAIN(Str :$mystr) { say so $mystr; say $mystr }; BEGIN @*ARGS = <--mystr=False>
[20:22] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´Unsupported allomorph coercion: Version‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[20:23] <ugexe> i guess because string "False" is a bool, not an allmorph of False|"False"
[20:24] <ugexe> which seems inconsistent
[20:25] *** Nemokosch joined
[20:25] <ugexe> but an Allmorph of boolean False and string "False" would make no sense outside of dispatching for MAIN
[20:27] <Nemokosch> m: enum Element<Entity Label>; sub MAIN(Element :$choice) { dd $choice; }; BEGIN @ARGS = <--choice=Label>
[20:27] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '@ARGS' is not declared.  Perhaps you forgot a 'sub' if this‚ê§was intended to be part of a signature?‚ê§at <tmp>:1‚ê§------> lement :$choice) { dd $choice; }; BEGIN ‚èè@ARGS = <--choice=‚Ä¶¬ª
[20:27] <tellable6> 2022-10-12T10:32:16Z #raku <lizmat> Nemokosch: do you grok roles ?
[20:28] <Nemokosch> oops copypaste fail
[20:28] <Nemokosch> m: enum Element<Entity Label>; sub MAIN(Element :$choice) { dd $choice; }; BEGIN @*ARGS = <--choice=Label>
[20:28] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´Usage:‚ê§  <tmp> [--choice=<Element> (Entity Label)]‚ê§¬ª
[20:28] <Nemokosch> m: enum Element<Entity Label>; sub MAIN(Element :$choice) { dd $choice; }; BEGIN @ARGS = <--choice=Entity>
[20:28] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '@ARGS' is not declared.  Perhaps you forgot a 'sub' if this‚ê§was intended to be part of a signature?‚ê§at <tmp>:1‚ê§------> lement :$choice) { dd $choice; }; BEGIN ‚èè@ARGS = <--choice=‚Ä¶¬ª
[20:28] <Nemokosch> aaaa
[20:28] <Nemokosch> m: enum Element<Entity Label>; sub MAIN(Element :$choice) { dd $choice; }; BEGIN @*ARGS = <--choice=Element>
[20:28] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´Usage:‚ê§  <tmp> [--choice=<Element> (Entity Label)]‚ê§¬ª
[20:28] <Nemokosch> It's ridiculous that I just can't get this right
[20:29] <Nemokosch> m: enum Element<Entity Label>; sub MAIN(Element :$choice) { dd $choice; }; BEGIN @*ARGS = <--choice=Entity>
[20:29] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´Element::Entity‚ê§¬ª
[20:29] <Nemokosch> so yes, eventually I succeeded at reproducing it...
[20:30] <Nemokosch> let's try with Array instead of Label
[20:31] <Nemokosch> m: enum Element<Button Array>; sub MAIN(Element :$choice) { dd $choice; }; BEGIN @*ARGS = <--choice=Array>
[20:31] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´Usage:‚ê§  <tmp> [--choice=<Element> (Array Button)]‚ê§¬ª
[20:31] <Nemokosch> m: enum Element<Button Array>; sub MAIN(Element :$choice) { dd $choice; }; BEGIN @*ARGS = <--choice=Button>
[20:31] <camelia> rakudo-moar feb04dbe9: OUTPUT: ¬´Element::Button‚ê§¬ª
[20:31] <Nemokosch> same thing
[20:31] *** Nemokosch left
[20:32] *** derpydoo left
[21:32] *** sourceable6 left
[21:32] *** bloatable6 left
[21:32] *** unicodable6 left
[21:32] *** notable6 left
[21:32] *** quotable6 left
[21:32] *** shareable6 left
[21:32] *** reportable6 left
[21:32] *** squashable6 left
[21:32] *** benchable6 left
[21:32] *** linkable6 left
[21:32] *** tellable6 left
[21:32] *** committable6 left
[21:32] *** bisectable6 left
[21:32] *** releasable6 left
[21:32] *** evalable6 left
[21:32] *** nativecallable6 left
[21:32] *** greppable6 left
[21:32] *** statisfiable6 left
[21:32] *** coverable6 left
[21:32] *** greppable6 joined
[21:32] *** unicodable6 joined
[21:32] *** coverable6 joined
[21:32] *** statisfiable6 joined
[21:33] *** sourceable6 joined
[21:33] *** releasable6 joined
[21:33] *** shareable6 joined
[21:33] *** benchable6 joined
[21:33] *** quotable6 joined
[21:33] *** linkable6 joined
[21:33] *** committable6 joined
[21:33] *** notable6 joined
[21:34] *** squashable6 joined
[21:34] *** evalable6 joined
[21:34] *** nativecallable6 joined
[21:35] *** tellable6 joined
[21:35] *** reportable6 joined
[21:35] *** bisectable6 joined
[21:35] *** bloatable6 joined
[21:38] *** haxxelotto left
[21:49] *** lichtkind left
[22:05] <[Coke]> I once worked in a language where the country code "NO" was interpreted as False.
[22:07] <guifa> lol
[22:10] <Xliff> vrurg: Thanks for the update. How does parameter binding occur?
[22:11] <vrurg> Xliff: see lower_signature in Actions.
[22:18] <Xliff> vrurg: That one is ... quite large.
[22:18] <Xliff> I do see that it's a hash, however.
[22:19] <vrurg> Should be possible to replace with Param object though. 
[22:19] <vrurg> It is being used in some locations of the sub.
[22:20] <Xliff> Hmmm... good thought. I'll make a note of it.
[22:21] <Xliff> Actually, I'll look at the rakuast branch of this and see what's going on  there, too.
[22:34] <lizmat> weekly: https://dev.to/lizmat/dont-fear-the-grepper-1-1k3e
[22:34] <notable6> lizmat, Noted! (weekly)
[22:34] <lizmat> afk&
[22:38] *** jgaz left
[22:41] *** dextercd left
[22:56] *** Kaiepi left
[22:59] *** Kaiepi joined
[22:59] *** Kaiepi left
[22:59] *** Kaiepi joined
[23:16] <[Coke]> lizmat: you have an extra \ in one of the snippets as \*
[23:16] <[Coke]> er, \* %% 2
[23:51] *** guifa_ joined
[23:54] *** guifa left
[23:55] *** jgaz joined
