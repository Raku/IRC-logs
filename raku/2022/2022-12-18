[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:04] *** xinming left
[00:05] *** xinming joined
[00:14] *** jpn left
[00:32] *** epony left
[00:52] *** epony joined
[00:59] <jaguart> m: #| above sub-x\nsub x() {...}; say &x.WHY

[00:59] <camelia> rakudo-moar 665375bab: ( no output )

[00:59] <jaguart> is there a way to play with POD declarators via m:?

[01:00] <jaguart> m: EVAL("#| above sub-x\nsub x() {...}; say &x.WHY")

[01:00] <camelia> rakudo-moar 665375bab: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma␤to override this error but only if you're VERY sure your data contains␤no injection attacks).␤at <tmp>:1␤------> above s…»

[01:01] <jaguart> m: use MONKEY-SEE-NO-EVAL; EVAL("#| above sub-x\nsub x() {...}; say &x.WHY")

[01:01] <camelia> rakudo-moar 665375bab: OUTPUT: «Stub code executed␤  in block <unit> at <tmp> line 1␤␤»

[01:03] <jaguart> m: use MONKEY-SEE-NO-EVAL; EVAL("#| above sub-x\nsub x() {...}"); say &x.WHY

[01:03] <camelia> rakudo-moar 665375bab: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    x used at line 1␤␤»

[01:05] <jaguart> hmmm - &x.WHY works in my REPL but not here 

[01:22] *** xinming left
[01:22] *** xinming joined
[01:48] <MasterDuke> m: #| above sub-x␤sub x() {...}; say &x.WHY

[01:48] <camelia> rakudo-moar 665375bab: OUTPUT: «above sub-x␤»

[01:49] <MasterDuke> jaguart: ^^^

[01:50] <jaguart> MasterDuke++ thanks :)

[01:50] *** ProperNoun left
[01:51] <jaguart> m: #| above sub-x␤sub x() {...}; say &x.WHY

[01:51] <camelia> rakudo-moar 665375bab: OUTPUT: «above sub-x␤»

[01:52] <jaguart> so using the unicode NL char - nice

[01:52] <MasterDuke> m: dd Bool.^attributes     also, Bool is kind of special in that it needs to exist very early in the compilation process, so it's mostly "hand-crafted" before the rest of the compiler is built and that probably why this happens (though it'd be nice to get it to not show two `$!value`s if possible)

[01:52] <camelia> rakudo-moar 665375bab: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> dd Bool.^attributes⏏     also, Bool is kind of special in th␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤  …»

[01:52] <MasterDuke> m: dd Bool.^attributes    # also, Bool is kind of special in that it needs to exist very early in the compilation process, so it's mostly "hand-crafted" before the rest of the compiler is built and that probably why this happens (though it'd be nice to get it to not show two `$!value`s if possible)

[01:52] <camelia> rakudo-moar 665375bab: OUTPUT: «(Attribute.new, Attribute.new, BOOTSTRAPATTR.new)␤»

[01:53] <jaguart> yeah - that BOOTSTRAPATTR borks introspection, as do VMvoids that show up in MOP queries

[01:55] <MasterDuke> yep. i think a while ago i was on a kick of giving some of the NQP-level things the methods they're missing compared to their Raku-level counterparts, but i stalled out for some reason

[01:55] <jaguart> and .^methods.map(*.required) fails on a few :)

[01:56] <jaguart> the worst one though is querying traits - there just isn't a good way to get traits of things

[01:58] <jaguart> I'd be willing to sponsor a grant on fleshing out more of the MOP to make it a bit more consistent

[01:59] <MasterDuke> might want to chat with Kaiepi, they've done a lot with the MOP

[02:00] <jaguart> and I'd also sponsor to have the pod edgecases worked on

[02:01] <jaguart> my beginner exercise is a gadget called Inspector that describes things - I'm currently throwing all the types mentioned on https://docs.raku.org/type.html at it.

[02:02] <jaguart> I want to know the external APIs and the POD. Works for most, except the Telemetry thread stuff so far

[02:44] *** xinming left
[02:44] *** xinming joined
[03:12] *** xinming left
[03:12] *** xinming joined
[03:25] *** habere-et-disper left
[03:38] *** xinming left
[03:40] *** xinming joined
[04:38] *** MasterDuke left
[05:38] *** bisectable6 left
[05:38] *** bloatable6 left
[05:38] *** unicodable6 left
[05:38] *** greppable6 left
[05:38] *** statisfiable6 left
[05:38] *** sourceable6 left
[05:38] *** quotable6 left
[05:38] *** tellable6 left
[05:38] *** linkable6 left
[05:38] *** evalable6 left
[05:38] *** reportable6 left
[05:38] *** notable6 left
[05:38] *** benchable6 left
[05:38] *** shareable6 left
[05:38] *** squashable6 left
[05:38] *** nativecallable6 left
[05:38] *** committable6 left
[05:38] *** coverable6 left
[05:38] *** releasable6 left
[05:38] *** quotable6 joined
[05:38] *** coverable6 joined
[05:38] *** tellable6 joined
[05:39] *** reportable6 joined
[05:39] *** committable6 joined
[05:39] *** greppable6 joined
[05:39] *** unicodable6 joined
[05:39] *** bloatable6 joined
[05:39] *** statisfiable6 joined
[05:39] *** evalable6 joined
[05:40] *** linkable6 joined
[05:40] *** benchable6 joined
[05:40] *** shareable6 joined
[05:40] *** sourceable6 joined
[05:41] *** notable6 joined
[05:41] *** bisectable6 joined
[05:41] *** releasable6 joined
[05:41] *** nativecallable6 joined
[05:41] *** squashable6 joined
[05:46] *** xinming left
[05:49] *** xinming joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:20] *** razetime joined
[06:20] *** xinming left
[06:21] *** xinming joined
[06:42] *** codesections left
[06:42] *** codesections joined
[07:14] *** hobbified joined
[07:16] <hobbified> I was inspired to revisit day 10 and try to... not quite golf it, but squeeze it down to a few simple bits: https://github.com/arodland/Advent-of-Code-2022/blob/master/10/2b.raku

[08:05] *** hobbified left
[08:17] *** hobbified joined
[08:29] *** xinming left
[08:29] *** xinming joined
[08:57] *** xinming left
[08:58] *** xinming joined
[09:23] *** xinming left
[09:24] *** xinming joined
[09:47] *** Sgeo left
[10:24] *** sena_kun joined
[10:43] *** xinming left
[10:44] *** xinming joined
[10:45] *** tejr left
[10:55] *** Kaiepi left
[11:05] *** grondilu joined
[11:15] *** Kaiepi joined
[11:38] *** xinming left
[11:39] *** xinming joined
[11:41] *** tejr joined
[11:47] *** tejr left
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:12] <El_Che> weekly: https://github.com/mame/quine-relay where raku is part of the 150 languages (as perl 6), chain is perl => perl 6 => php

[12:12] <notable6> El_Che, Noted! (weekly)

[12:51] *** tejr joined
[13:42] *** razetime left
[13:51] *** razetime joined
[14:51] *** coverable6 left
[14:51] *** shareable6 left
[14:51] *** releasable6 left
[14:51] *** tellable6 left
[14:51] *** unicodable6 left
[14:51] *** benchable6 left
[14:51] *** sourceable6 left
[14:51] *** notable6 left
[14:51] *** committable6 left
[14:51] *** bisectable6 left
[14:51] *** statisfiable6 left
[14:51] *** bloatable6 left
[14:51] *** evalable6 left
[14:51] *** linkable6 left
[14:51] *** nativecallable6 left
[14:51] *** squashable6 left
[14:51] *** greppable6 left
[14:51] *** quotable6 left
[14:51] *** reportable6 left
[14:51] *** squashable6 joined
[14:51] *** tellable6 joined
[14:51] *** shareable6 joined
[14:52] *** coverable6 joined
[14:52] *** committable6 joined
[14:52] *** evalable6 joined
[14:52] *** linkable6 joined
[14:52] *** sourceable6 joined
[14:52] *** notable6 joined
[14:52] *** bloatable6 joined
[14:53] *** quotable6 joined
[14:53] *** reportable6 joined
[14:53] *** unicodable6 joined
[14:53] *** releasable6 joined
[14:53] *** nativecallable6 joined
[14:53] *** bisectable6 joined
[14:53] *** statisfiable6 joined
[14:53] *** benchable6 joined
[14:53] *** greppable6 joined
[15:20] *** tejr left
[15:40] *** sena_kun left
[15:44] *** Kaiepi left
[15:46] *** guifa_ joined
[15:49] *** guifa left
[15:51] *** sena_kun joined
[15:57] *** Kaiepi joined
[16:09] *** asarch joined
[16:18] *** TieUpYourCamel left
[16:22] *** perlbot left
[16:23] *** simcop2387 left
[16:25] *** simcop2387 joined
[16:26] *** perlbot joined
[16:31] *** TieUpYourCamel joined
[16:43] *** holyghost joined
[16:47] *** holyghost left
[17:00] *** ProperNoun joined
[17:02] *** Kaiepi left
[17:03] *** grondilu left
[17:05] *** razetime left
[17:11] <asarch> Doing a 'zef install Gnome::Gtk3' I get [Gnome::Glib] Cannot locate symbol 'g_prefix_error_literal' in native library 'libglib-2.0.so.0'

[17:12] <asarch> Asking at #gtk, the fellows there told me that the problem is because the zef package needs the GLib 2.70 version and in my Debian stable box the 2.66.8-1 version is installed

[17:13] <asarch> Is there a way to use the installed version (maybe an old release of Gnome::Gtk3)?

[17:32] <ugexe> asarch: it looks like that native function was added in 0.20.4 og Gnome::Gtk3 so indeed a previous version might work. `zef install "Gnome::Glib:ver<0.20.3>"` perhaps (although you'd want to `zef uninstall Gnome::Glib` first)

[17:36] <ugexe> you might want to file an issue in Gnome::Glib to maybe more gracefully handle the minimum version requirement

[17:55] *** sweetblood joined
[17:56] *** Kaiepi joined
[17:56] <sweetblood> Is it true that raku is the same as perl 6?

[17:58] <hobbified> It's true that Raku is Raku, and it's true that Raku used to be named Perl 6

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:06] *** perlbot left
[18:06] *** simcop2387 left
[18:08] <sweetblood> Okay, thanks. So, not to be too dense, I should be looking for raku documentation rather than perl 6 when trying to learn, correct? I an a 20+ year perl 5 programmer(retired), I just want to stick my toe in to see what raku is like.

[18:10] <sweetblood> Are there many perlmonks here?

[18:19] <asarch> It worked!: ===> Installing: Gnome::Glib:ver<0.20.3>

[18:22] *** simcop2387 joined
[18:23] *** perlbot joined
[18:38] *** cbk joined
[18:42] *** ProperNoun left
[19:04] *** tejr joined
[19:40] <asarch> Thank you! Thank you very much!: ===> Installing: Gnome::Gtk3:ver<0.48.13>:auth<github:MARTIMM> :-)

[19:40] <asarch> One last question: what does .= mean?

[19:43] <discord-raku-bot> <lucs> Kind of like  += , but for function application, for example  $str = $str.uc  would be  $str .= uc

[19:48] *** Sgeo joined
[19:55] <asarch> Thank you!

[19:55] *** abraxxa-home joined
[20:25] *** asarch left
[20:43] <discord-raku-bot> <Nemokosch> it is kind of like that but it will bite you at places with this kind of thinking

[20:43] *** gabiruh_ is now known as gabiruh

[21:00] *** sena_kun left
[21:40] *** sena_kun joined
[21:55] <discord-raku-bot> <lucs> Beginner thinking is fine at the beginning.

[21:55] <discord-raku-bot> <lucs> Expert thinking will come, one bite at a time 🙂

[22:02] <discord-raku-bot> <lucs> Beginner thinking is fine at the beginning.

[22:02] <discord-raku-bot> <lucs> Expert thinking will come later, one bite at a time 🙂

[22:40] *** evalable6 left
[22:40] *** linkable6 left
[22:40] *** linkable6 joined
[22:40] <discord-raku-bot> <Nemokosch> oh no worries, I can show how exactly it will bite you 😛

[22:41] *** evalable6 joined
[22:41] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/issues/4863

[22:44] *** xinming left
[22:44] *** xinming joined
[23:02] *** Marcool04 joined
[23:03] <Marcool04> Hi all!

[23:03] <Marcool04> I'm having a hard time trying to compile Rakudo on a raspberry pi 3B+ that I've just switched from armv7h to aarch64

[23:03] <Marcool04> is there any kind of known limitation or issue on that architecture?

[23:03] <Marcool04> if not I think I'm just experiencing some kind of oom issue

[23:04] <Marcool04> I have 2Gb of swap, alongside the 1Gb of actual RAM, but I can kind of see the memory usage creep up and up during the build until the system becomes unresponsive and has to be rebooted

[23:05] <Marcool04> annoying thing about that is I lose the traces of what is actually happening

[23:05] <Marcool04> but pretty sure it's an OOm

[23:05] <Marcool04> Which is kind of weird, 'cos this used to work on a 32 bit system on the exact same hardware...

[23:07] <lizmat> on my M1 it grows to about 1.8G

[23:07] <lizmat> we just had the RakuAST branch merged...  which includes a lot of additional code

[23:08] <lizmat> well, that is, if you're running on HEAD

[23:08] <Marcool04> oh so maybe the problems are coming from the new code, rather than my switch to 64bit

[23:08] <Marcool04> oh no I'm just trying to compile 2022.12

[23:08] <lizmat> ah... then I don't know...

[23:08] <lizmat> but yeah, building Rakudo can be a memory hog

[23:08] <Marcool04> thanks for the input anyhow lizmat

[23:08] <Marcool04> M1 is the arm mac right?

[23:09] <Marcool04> so it'll be aarch64 too?

[23:13] <Marcool04> (answered my own question on Wikipedia... M1 has arm v8.5 so that's different I guess from the armv8 in a raspberry pi 3B

[23:14] <Marcool04> there isn't any standard toolchain to cross-compile rakudo is there?

[23:14] <Marcool04> nor any prebuilt binaries other than the x86_64 ones?

[23:26] *** Marcool04 left
[23:44] *** Kaiepi left
[23:51] *** Kaiepi joined
