[00:06] *** reportable6 left
[00:09] *** reportable6 joined
[00:23] *** melezhik joined
[00:23] *** melezhik left
[01:10] *** Guest41 joined
[01:15] *** Guest41 left
[02:15] *** bloatable6 left
[02:15] *** nativecallable6 left
[02:15] *** coverable6 left
[02:15] *** evalable6 left
[02:15] *** bisectable6 left
[02:15] *** linkable6 left
[02:15] *** shareable6 left
[02:15] *** unicodable6 left
[02:15] *** committable6 left
[02:15] *** sourceable6 left
[02:15] *** reportable6 left
[02:15] *** quotable6 left
[02:15] *** tellable6 left
[02:15] *** statisfiable6 left
[02:15] *** releasable6 left
[02:15] *** benchable6 left
[02:15] *** greppable6 left
[02:15] *** notable6 left
[02:15] *** releasable6 joined
[02:16] *** sourceable6 joined
[02:16] *** reportable6 joined
[02:16] *** notable6 joined
[02:16] *** quotable6 joined
[02:16] *** coverable6 joined
[02:16] *** linkable6 joined
[02:17] *** bloatable6 joined
[02:17] *** benchable6 joined
[02:17] *** statisfiable6 joined
[02:17] *** tellable6 joined
[02:17] *** shareable6 joined
[02:17] *** evalable6 joined
[02:17] *** committable6 joined
[02:17] *** unicodable6 joined
[02:18] *** bisectable6 joined
[02:18] *** greppable6 joined
[02:18] *** nativecallable6 joined
[02:20] *** razetime joined
[02:30] *** hythm left
[03:02] *** guifa joined
[03:36] *** guifa left
[04:07] *** Guest35 left
[05:07] *** evalable6 left
[05:07] *** nativecallable6 left
[05:07] *** releasable6 left
[05:07] *** quotable6 left
[05:07] *** greppable6 left
[05:07] *** committable6 left
[05:07] *** notable6 left
[05:07] *** shareable6 left
[05:07] *** bisectable6 left
[05:07] *** benchable6 left
[05:07] *** statisfiable6 left
[05:07] *** linkable6 left
[05:07] *** reportable6 left
[05:07] *** bloatable6 left
[05:07] *** tellable6 left
[05:07] *** sourceable6 left
[05:07] *** unicodable6 left
[05:07] *** coverable6 left
[05:08] *** sourceable6 joined
[05:08] *** greppable6 joined
[05:08] *** statisfiable6 joined
[05:08] *** nativecallable6 joined
[05:08] *** quotable6 joined
[05:08] *** evalable6 joined
[05:08] *** reportable6 joined
[05:09] *** unicodable6 joined
[05:09] *** bloatable6 joined
[05:09] *** releasable6 joined
[05:09] *** benchable6 joined
[05:09] *** notable6 joined
[05:09] *** linkable6 joined
[05:10] *** shareable6 joined
[05:10] *** coverable6 joined
[05:10] *** committable6 joined
[05:10] *** bisectable6 joined
[05:10] *** tellable6 joined
[05:33] *** guifa joined
[05:50] *** guifa left
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[06:34] *** yolo joined
[06:35] *** yolo left
[06:48] *** razetime left
[07:00] *** p6steve left
[07:03] *** dumarchie joined
[07:22] *** razetime joined
[07:56] *** RakuIRCLogger left
[07:56] *** RakuIRCLogger joined
[07:58] *** Xliff joined
[08:01] *** Sgeo left
[08:05] *** jujo left
[08:19] *** Sankalp left
[08:22] *** Sankalp joined
[08:45] *** dumarchie left
[08:48] *** dumarchie joined
[09:12] *** Sankalp left
[09:20] *** dumarchie left
[09:30] *** Geth__ joined
[09:30] *** RakuIRCLogger__ left
[09:31] *** TempIRCLogger__ joined
[09:31] *** TempIRCLogger__ left
[09:32] *** TempIRCLogger__ joined
[09:32] *** RakuIRCLogger left
[09:32] *** lizmat left
[09:33] *** Geth left
[09:33] *** TempIRCLogger left
[09:34] *** TempIRCLogger__ left
[09:34] *** TempIRCLogger joined
[09:34] *** Geth__ left
[09:34] *** Geth joined
[09:34] *** lizmat_ left
[09:34] *** lizmat joined
[09:38] *** TempIRCLogger left
[09:38] *** TempIRCLogger joined
[09:38] *** Geth left
[09:38] *** Geth joined
[09:43] *** Geth left
[09:43] *** Geth joined
[10:01] *** mexen joined
[10:41] *** Nemokosch joined
[10:42] <Nemokosch> m: dd ('a'..'z').rotor(5)
[10:42] <camelia> rakudo-moar 530e17848: OUTPUT: «(("a", "b", "c", "d", "e"), ("f", "g", "h", "i", "j"), ("k", "l", "m", "n", "o"), ("p", "q", "r", "s", "t"), ("u", "v", "w", "x", "y")).Seq␤»
[10:49] <lizmat> m: dd ("a".."z").comb(5)   # alternate ?
[10:49] <camelia> rakudo-moar 530e17848: OUTPUT: «("a b c", " d e ", "f g h", " i j ", "k l m", " n o ", "p q r", " s t ", "u v w", " x y ", "z").Seq␤»
[10:49] <lizmat> hmm
[10:49] <lizmat> aah...
[10:49] <lizmat> m: dd ("a".."z").batch(5)   # alternate ?
[10:49] <camelia> rakudo-moar 530e17848: OUTPUT: «(("a", "b", "c", "d", "e"), ("f", "g", "h", "i", "j"), ("k", "l", "m", "n", "o"), ("p", "q", "r", "s", "t"), ("u", "v", "w", "x", "y"), ("z",)).Seq␤»
[10:51] <discord-raku-bot> <Nemokosch#9980> "it is a shorthand of .rotor($batch, :partial)"
[11:02] *** Nemokosch left
[11:06] <lizmat> it's a simpler, faster version
[11:09] <Xliff> lizmat: Did you see the timings? 
[11:23] *** razetime left
[11:24] *** grondilu joined
[11:25] <grondilu> can't I define a FALLBACK method in an action class?
[11:25] <grondilu> m: grammar { token TOP { foo } }.parse: "foo", actions => class { multi method FALLBACK($ where "bar") {...} }
[11:25] <camelia> rakudo-moar 530e17848: OUTPUT: «Cannot resolve caller FALLBACK((<anon|2>): TOP, ｢foo｣); none of these signatures matches:␤    (<anon|2>: $ where { ... }, *%_)␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[11:26] <patrickb> hythm: Which libcurl.dll did you use? Do you know which compiler that was compiled with? (mingw or msvc) Which compiler do you use for your builds on Windows?
[11:26] <tellable6> patrickb, I'll pass your message to hythm
[11:27] <patrickb> hythm: Can you turn this into a bugreport?
[11:27] <tellable6> patrickb, I'll pass your message to hythm
[11:57] *** thegargler joined
[11:59] *** frost joined
[12:08] *** reportable6 left
[12:08] *** razetime joined
[12:10] *** reportable6 joined
[12:23] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2022/05/01/antipairing/
[13:10] *** linkable6 left
[13:10] *** evalable6 left
[13:12] *** linkable6 joined
[13:13] *** evalable6 joined
[13:40] *** sena_kun left
[13:41] *** sena_kun joined
[13:50] *** Guest35 joined
[14:28] *** thegargler left
[14:48] *** frost left
[15:08] *** sdf joined
[15:10] *** razetime left
[15:11] *** sdf left
[15:25] *** razetime joined
[16:25] *** reportable6 left
[16:25] *** nativecallable6 left
[16:25] *** coverable6 left
[16:25] *** linkable6 left
[16:25] *** evalable6 left
[16:25] *** unicodable6 left
[16:25] *** greppable6 left
[16:25] *** committable6 left
[16:25] *** benchable6 left
[16:25] *** tellable6 left
[16:25] *** releasable6 left
[16:25] *** quotable6 left
[16:25] *** statisfiable6 left
[16:25] *** sourceable6 left
[16:25] *** notable6 left
[16:25] *** shareable6 left
[16:25] *** bloatable6 left
[16:25] *** bisectable6 left
[16:26] *** releasable6 joined
[16:26] *** notable6 joined
[16:26] *** sourceable6 joined
[16:26] *** committable6 joined
[16:26] *** benchable6 joined
[16:26] *** shareable6 joined
[16:26] *** quotable6 joined
[16:26] *** bloatable6 joined
[16:26] *** unicodable6 joined
[16:26] *** reportable6 joined
[16:27] *** Sgeo joined
[16:27] *** nativecallable6 joined
[16:27] *** evalable6 joined
[16:27] *** greppable6 joined
[16:28] *** bisectable6 joined
[16:28] *** linkable6 joined
[16:28] *** tellable6 joined
[16:28] *** statisfiable6 joined
[16:28] *** coverable6 joined
[17:06] *** razetime left
[17:10] <SmokeMachine> .ask melezhik are you planning on having a image badge to add on readme to show if the build has passed? I think that would help a lot. And thank you very much for all the work! That’s helping a lot! Most of the tests are not being skipped for Pg anymore! :)
[17:10] <tellable6> SmokeMachine, I'll pass your message to melezhik
[17:12] *** mexen left
[17:39] <discord-raku-bot> <Nemokosch#9980> batch just doesn't give the same result as rotor, though
[17:39] <discord-raku-bot> <Nemokosch#9980> and once you want to make it non-partial, I suspect batch isn't superior anymore
[17:41] *** grondilu left
[18:08] *** reportable6 left
[18:11] *** reportable6 joined
[18:39] *** sena_kun left
[18:40] *** sena_kun joined
[19:40] *** linkable6 left
[19:40] *** evalable6 left
[19:41] *** linkable6 joined
[19:43] *** evalable6 joined
[20:23] *** hythm joined
[20:24] <hythm> patrickb, created rakubrew issue #54 and answered the questions there. let me know if I missed anything. thanks
[20:24] <tellable6> 2022-05-01T11:26:49Z #raku <patrickb> hythm: Which libcurl.dll did you use? Do you know which compiler that was compiled with? (mingw or msvc) Which compiler do you use for your builds on Windows?
[20:24] <tellable6> 2022-05-01T11:27:17Z #raku <patrickb> hythm: Can you turn this into a bugreport?
[20:51] <discord-raku-bot> <Nemokosch#9980> Something odd happened
[20:51] <discord-raku-bot> <Nemokosch#9980> _nextwith is not in the dynamic scope of a dispatcher_
[20:53] <discord-raku-bot> <Nemokosch#9980> If this wasn't new enough for me: if I only give the proto {*}, the arguments seem to be passed wrong
[20:53] <discord-raku-bot> <Nemokosch#9980> if I make a dummy body with logging the arguments, they are passed right but this error message shows up for my nextwith call from a multi
[20:59] <discord-raku-bot> <Nemokosch#9980> check, the arguments are passed almost right - I thought the proto could be used for setting a default value?
[21:05] *** lichtkind joined
[21:05] <discord-raku-bot> <Nemokosch#9980> okay, seems like it cannot: "can validate but not modify arguments"
[21:05] <discord-raku-bot> <Nemokosch#9980> this one I understand
[21:05] <discord-raku-bot> <Nemokosch#9980> still don't understand what happened when I gave it a block and hence broke `nextwith`
[21:05] <discord-raku-bot> <Nemokosch#9980> Anyway, I think this should work:
[21:05] <discord-raku-bot> <Nemokosch#9980> multi process-pair(@table, $mode, $a, $b = 'x') { nextsame }
[21:05] <discord-raku-bot> <Nemokosch#9980> and it doesn't
[21:06] <discord-raku-bot> <Nemokosch#9980> seems like same is too much the same
[21:10] <discord-raku-bot> <Nemokosch#9980> okay no, this could work
[21:11] <discord-raku-bot> <Nemokosch#9980> the argument passing somehow doesn't work from map
[21:14] <discord-raku-bot> <Nemokosch#9980> aaah
[21:15] <discord-raku-bot> <Nemokosch#9980> can I somehow tell a multi "if this argument is Nil, do accept but replace it with a default value"?
[21:24] <discord-raku-bot> <Nemokosch#9980> no no no, this never works as intended, that's for sure
[21:24] <discord-raku-bot> <Nemokosch#9980> if my proto has no default option, the map call fails when there was only 1 element left
[21:24] <discord-raku-bot> <Nemokosch#9980> so it's not the fault of the argument passing from map
[21:24] <discord-raku-bot> <Nemokosch#9980> if my proto does have a default option, Nil gets assigned instead 😡
[21:24] <MasterDuke> i think that'd have to be done "manually", i.e., make it of type Mu, and in the body check and replace
[21:27] <MasterDuke> m: multi sub a($a, Nil $b) { a($a, 42) }; multi sub a($a, $b) { say "$a $b" }; a(3, Nil)
[21:27] <camelia> rakudo-moar 530e17848: OUTPUT: «3 42␤»
[21:32] <discord-raku-bot> <Nemokosch#9980> anyway, what I'm trying to do just has too many ways to fail
[21:32] <discord-raku-bot> <Nemokosch#9980> however, I'm pretty sure that this fake default is incorrect behavior
[21:34] <discord-raku-bot> <Nemokosch#9980> if you cannot set a default on a proto, it should say that, not pretend to add a default argument and then set it to Nil
[21:44] <MasterDuke> a quick `git grep proto | grep =` in roast doesn't show anything obviously testing that, so very well could be unspecced
[21:50] *** tejr joined
[21:52] <gfldex> nextsame will just pass on the Capture which is immutable. I would not expect defaults of one candidate to travel to the next that way.
[21:52] <gfldex> If anything, this is an ENODOC.
[21:53] <gfldex> Or better, it could be more precise and tell what is really going on.
[22:04] <discord-raku-bot> <Nemokosch#9980> Something else: why are @-sigilled variables treated as immutable when `given`?
[22:43] *** linkable6 left
[22:44] *** linkable6 joined
[22:50] <Voldenet> my @what = <are they now?>; given @what { .push('not at all'); }; say @what
[22:50] <evalable6> Voldenet, rakudo-moar b01c493a5: OUTPUT: «[are they now? not at all]␤»
[22:53] <Voldenet> m: my @what := <are they now?>; given @what { .WHAT.say; .push('…if they are lists'); }; say @what
[22:53] <camelia> rakudo-moar 530e17848: OUTPUT: «(List)␤Cannot call 'push' on an immutable 'List'␤  in block <unit> at <tmp> line 1␤␤»
[22:53] <discord-raku-bot> <Nemokosch#9980> this is not an assignment, though, it doesn't actually change the container
[23:15] *** lichtkind left
[23:24] <Voldenet> m: my @sth = <this>; given @sth { @sth = "it works" }; say @sth
[23:24] <camelia> rakudo-moar 530e17848: OUTPUT: «[it works]␤»
[23:24] <discord-raku-bot> <Bscan🍺#6614> I released a vscode extension today for Raku. It defines the language and file extensions (otherwise only shows Perl 6), uses the syntax highlighting from the Atom extension, and contains a simple language server for syntax checking. https://marketplace.visualstudio.com/items?itemName=bscan.raku-navigator
[23:24] <Voldenet> m: my @sth = <this>; given @sth { $sth = "this won't work" }; say @sth
[23:24] <camelia> rakudo-moar 530e17848: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$sth' is not declared.  Did you mean '@sth'?␤at <tmp>:1␤------> my @sth = <this>; given @sth { ⏏$sth = "this won't work" }; say @sth␤»
[23:24] <Voldenet> m: my @sth = <this>; given @sth { @_ = "it also works" }; say @sth
[23:24] <camelia> rakudo-moar 530e17848: OUTPUT: «[this]␤»
[23:24] <Voldenet> m: my @sth = <this>; given @sth { $_ = "this won't work" }; say @sth
[23:24] <camelia> rakudo-moar 530e17848: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»
[23:27] <Voldenet> I'm not sure if I get the question, but I wouldn't be able to answer either way
[23:55] *** discord-raku-bot left
[23:57] *** discord-raku-bot joined
