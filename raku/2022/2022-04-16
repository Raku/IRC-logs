[00:35] *** reportable6 left
[00:35] *** nativecallable6 left
[00:35] *** benchable6 left
[00:35] *** bloatable6 left
[00:35] *** sourceable6 left
[00:35] *** notable6 left
[00:35] *** evalable6 left
[00:35] *** statisfiable6 left
[00:35] *** linkable6 left
[00:35] *** releasable6 left
[00:35] *** unicodable6 left
[00:35] *** bisectable6 left
[00:35] *** quotable6 left
[00:35] *** committable6 left
[00:35] *** coverable6 left
[00:35] *** shareable6 left
[00:35] *** greppable6 left
[00:36] *** linkable6 joined
[00:36] *** evalable6 joined
[00:36] *** releasable6 joined
[00:36] *** statisfiable6 joined
[00:36] *** notable6 joined
[00:36] *** committable6 joined
[00:36] *** bisectable6 joined
[00:36] *** bloatable6 joined
[00:36] *** coverable6 joined
[00:37] *** benchable6 joined
[00:37] *** reportable6 joined
[00:37] *** nativecallable6 joined
[00:37] *** quotable6 joined
[00:37] *** shareable6 joined
[00:37] *** sourceable6 joined
[00:38] *** unicodable6 joined
[00:38] *** greppable6 joined
[00:44] *** zacts joined
[00:57] <Geth> ¦ doc/master: 31 commits pushed by Altai-man++, Coke++, (Will Coleda)++

[00:57] <Geth> ¦ doc/master: review: https://github.com/Raku/doc/compare/53319ff11b6a...52615eef403b

[01:01] *** zacts left
[01:01] <saint->  I want to be able to have a character to be any character except for a double line-break, The idea is to like make a paragraph as a single token https://www.toptal.com/developers/hastebin/ejivimofib.pl

[01:42] *** Xliff left
[01:56] <saint-> Figured it out! 

[01:56] <saint-> Is there a way to limit the "depth" of the print out of a match?

[01:57] <[Coke]> You could print out the specific components you're interested in.

[01:58] <saint-> So, for example I'd like to print all the matches except for like my single letter tokens

[01:58] <drakonis> hm, there's no pattern matching in raku, is there?

[01:58] <saint-> I'm using the grammar match thing

[01:59] <saint-> It's awesome, just is a bit  hard to read out when it prints every character too

[02:02] <saint-> I'm sorry, I'm actually using the parse method

[02:03] <drakonis> multiple dispatch isn't quite the same, is it?

[02:07] <[Coke]> no.. pattern.. matching ?

[02:09] <saint-> How would I print all of a certain token from a match?

[02:09] <[Coke]> do you have a small example showing the match you'd like to only print part of?

[02:10] <saint-> Sure one sec

[02:10] <[Coke]> m: my $a = "this is fun" ~~ /$<verb>='is'/; dd $a<verb>

[02:10] *** rbt left
[02:10] <camelia> rakudo-moar 530e17848: OUTPUT: «Match.new(:orig("this is fun"), :from(2), :pos(4))␤»

[02:10] <saint-> This is the end of the output https://www.toptal.com/developers/hastebin/dejifacone.php

[02:11] <[Coke]> m: my $a = "this is fun" ~~ /$<verb>='is'/; dd ~$a<verb>

[02:11] <camelia> rakudo-moar 530e17848: OUTPUT: «"is"␤»

[02:11] <saint-> And I just want to print refBlock s

[02:11] <drakonis> [Coke]: http://rosettacode.org/wiki/Pattern_matching#OCaml

[02:11] <saint-> https://www.toptal.com/developers/hastebin/oniqequkat.xml

[02:11] <saint-> This is my code

[02:12] <drakonis> multiple dispatch is mostly like pattern matching i guess?

[02:12] <saint-> disregard the .hash in the $match.hash part, I was just testing that out

[02:13] *** razetime joined
[02:13] <[Coke]> drakonis: http://rosettacode.org/wiki/Pattern_matching#Raku ?

[02:13] <drakonis> yes i saw that

[02:13] <drakonis> its done with multiple dispatch

[02:14] <saint-> $match<refBlock> isn't working for me

[02:15] <saint-> $match<block> does though

[02:16] <saint-> But once again it prints everything recursively basically

[02:16] <drakonis> funny, ocaml can do something like multiple dispatch too

[02:16] <drakonis> pattern matching is amazing.

[02:18] <[Coke]> drakonis: do you have a pointer to a definition for pattern matching? that page mentions algebraic data types and then says you can do pattern matching on them, but doesn't define it.

[02:18] <drakonis> does wikipedia serve as a pointer?

[02:18] <[Coke]> I assume this is part of formal computer science theory that my comp sys background skimped on

[02:18] <drakonis> or ocaml's docs

[02:18] <drakonis> https://ocaml.org/manual/patterns.html

[02:19] <[Coke]> the wikipedia page seemed VERY generic.

[02:19] <drakonis> https://www.haskell.org/tutorial/patterns.html

[02:19] <[Coke]> and the ocaml seems much more specific. reading...

[02:19] <drakonis> haskell's explanation also goes in depth

[02:20] <drakonis> but the syntax for pattern matching is uglier than ocaml's

[02:20] <[Coke]> those are very dense.

[02:20] <drakonis> however it looks a lot more like raku's syntax

[02:20] <[Coke]> so I am not the one who is going to answer your question tonight, sorry. :)

[02:20] <[Coke]> cheers!

[02:21] <drakonis> since it lets you do pattern matching through multiple definitions of the same function

[02:21] <drakonis> cheers.

[02:21] <drakonis> no problem.

[02:22] <drakonis> raku doesnt seem to have guards for making complex pattern matching possible

[02:22] <drakonis> like a tree of matches

[02:23] <drakonis> or maybe it does, through constraints?

[02:24] <saint-> Based on this code https://www.toptal.com/developers/hastebin/ekebigojiq.xml do you know how I would print out all refBlock matches only?

[02:25] <drakonis> okay so you actually can do something like guards with signatures

[02:25] <drakonis> how nice.

[02:26] <drakonis> its a lot better than julia's

[02:27] <drakonis> it'd be quite nice if raku could successfully enter the scientific computations space

[03:09] *** clarjon1 joined
[03:26] *** Guest35 left
[04:09] *** grondilu joined
[04:13] *** rbt joined
[04:35] *** saint- left
[04:41] *** saint- joined
[04:48] <andinus> how is '**' faster than multiplying in a loop? -- https://paste.debian.net/plainh/faf95e3e

[05:15] *** zacts joined
[05:26] *** razetime_ joined
[05:26] *** razetime_ left
[05:52] *** zacts left
[05:58] *** yodabyte0 joined
[06:05] *** yodabyte0 left
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:13] *** rbt left
[06:13] *** rbt joined
[07:00] *** euandreh left
[07:04] *** euandreh joined
[07:05] <discord-raku-bot> <Nemokosch#9980> What you were doing isn't just multiplying in a loop though

[07:05] <discord-raku-bot> <Nemokosch#9980> But reducing an array

[07:05] <discord-raku-bot> <Nemokosch#9980> Who knows what memory operations happen in that time or how the reducing step is invoked

[07:17] *** frost joined
[07:17] *** frost left
[07:31] *** eseyman left
[07:31] *** frost joined
[07:44] *** eseyman joined
[08:31] <andinus> changing that to https://paste.debian.net/plainh/4a452e5c -- loop still seems to be slower

[08:32] <andinus> how can i look at '**' implementation?

[08:39] *** grondilu left
[08:51] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/src/core.c/Int.pm6#L382-L394

[08:52] <MasterDuke> and https://github.com/MoarVM/MoarVM/blob/master/src/math/bigintops.c#L613-L673 and https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L715-L734

[08:54] <MasterDuke> so for large numbers libtommath might have some better algorithm than just repeated multiplication. but `$x * $x` is faster than `$x ** 2`

[08:59] *** rbt left
[08:59] *** rbt joined
[09:02] <lizmat> MasterDuke: I wonder whether an infix:<**>(Int,2) candidate would make sense

[09:04] <MasterDuke> yeah. iirc prior to new-disp literal candidates slowed the others down too much, but i think that's better now

[09:05] <MasterDuke> also, i still plan to clean up https://github.com/rakudo/rakudo/pull/4320

[09:11] *** grondilu joined
[09:11] <MasterDuke> yeah. so adding a multi for literal 2 makes `** 2` faster, but `** 3` slower

[09:11] <MasterDuke> m: my $a; my $s = now; $a = $_ ** 2 for ^10_000_000; say now - $s; say $a;

[09:11] <camelia> rakudo-moar 530e17848: OUTPUT: «3.846028098␤99999980000001␤»

[09:11] <MasterDuke> m: multi infix:<**>(Int:D $a, 2) { $a * $a }; my $a; my $s = now; $a = $_ ** 2 for ^10_000_000; say now - $s; say $a;

[09:11] <camelia> rakudo-moar 530e17848: OUTPUT: «3.063476915␤99999980000001␤»

[09:12] <MasterDuke> m: my $a; my $s = now; $a = $_ ** 3 for ^10_000_000; say now - $s; say $a;

[09:12] <camelia> rakudo-moar 530e17848: OUTPUT: «3.96146164␤999999700000029999999␤»

[09:12] <MasterDuke> m: multi infix:<**>(Int:D $a, 2) { $a * $a }; my $a; my $s = now; $a = $_ ** 3 for ^10_000_000; say now - $s; say $a;

[09:12] <camelia> rakudo-moar 530e17848: OUTPUT: «6.508001321␤999999700000029999999␤»

[09:12] <lizmat> yeah

[09:18] <MasterDuke> maybe it's best to just handle it in the optimizer

[09:23] <MasterDuke> i actually thought i had done something like that, but i don't see anything. maybe i was experimenting at the same time as i was playing around with that PR

[09:44] *** rbt left
[09:44] *** rbt joined
[09:48] *** Sgeo left
[09:58] <Geth> ¦ ecosystem: d2511be8d2 | (Lucien Grondin)++ (committed using GitHub Web editor) | META.list

[09:58] <Geth> ¦ ecosystem: Add PBKDF2 to ecosystem

[09:58] <Geth> ¦ ecosystem: 

[09:58] <Geth> ¦ ecosystem: see https://github.com/grondilu/pbkdf2-raku.git

[09:58] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/d2511be8d2

[09:59] *** rbt left
[10:10] *** zacts joined
[10:17] <grondilu> m: proto foo($, :$arg = "bar") {*}; multi foo(Str $x, :$arg) { say $arg }; multi foo(Int $x, :$arg) { say $arg }; foo(53) 

[10:17] <camelia> rakudo-moar 530e17848: OUTPUT: «(Any)␤»

[10:17] <grondilu> can't I put default name parameters values in the proto?

[10:20] <grondilu> m: proto foo($, :$arg = "bar") {*}; multi foo(Str $x, :$arg) { say $arg }; multi foo(Int $x) { say $arg }; foo(53) 

[10:20] <camelia> rakudo-moar 530e17848: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$arg' is not declared.  Perhaps you forgot a 'sub' if this␤was intended to be part of a signature?␤at <tmp>:1␤------> ) { say $arg }; multi foo(Int $x) { say ⏏$arg }; foo(53)␤»

[10:35] *** rbt joined
[10:46] *** sena_kun left
[10:47] *** sena_kun joined
[11:30] *** rbt left
[11:30] *** rbt joined
[11:51] *** rbt left
[12:08] *** reportable6 left
[12:10] *** zacts left
[12:10] *** reportable6 joined
[12:44] *** frost left
[12:56] *** rbt joined
[12:58] *** monkey_ joined
[13:06] *** rbt left
[13:06] *** rbt joined
[13:12] *** rbt left
[13:12] *** rbt joined
[13:50] *** Guest35 joined
[13:50] *** rir joined
[13:52] *** rbt left
[13:52] *** rbt joined
[13:55] <rir> Linux source rakudo-star 2022.03 still has, in */etc/fetch_core.txt, the wrong versions for nqp, moarvm and rakudo.

[13:57] *** rbt left
[13:57] *** rbt joined
[13:57] *** rbt left
[14:08] *** rbt joined
[14:10] *** razetime left
[14:33] *** rbt left
[14:33] *** rbt joined
[15:37] *** guifa joined
[15:41] *** sena_kun left
[15:41] <gfldex> grondilu: you can build a new capture in the protos body and use nextwith

[15:43] *** rbt left
[15:44] *** rbt joined
[15:44] *** sena_kun joined
[15:59] *** rbt left
[15:59] *** rbt joined
[16:38] *** guifa left
[17:11] *** rbt left
[17:34] *** rbt joined
[17:35] *** monkey_ left
[17:42] *** lichtkind joined
[17:43] *** tellable6 joined
[17:57] <Geth> ¦ Documentable: coke assigned to antoniogamiz Issue Test failures https://github.com/Raku/Documentable/issues/160

[18:08] *** reportable6 left
[18:10] *** reportable6 joined
[18:10] <[Coke]> lizmat: looks like you're subscribed to all events coming from raku/nqp - can you add ticket notifications for that repo to IRC?

[18:11] <[Coke]> https://github.com/Raku/nqp/issues/633

[18:15] <[Coke]> looks like we get assignment notifications, but not creation

[18:38] *** Sgeo joined
[18:48] *** grondilu left
[18:59] *** rbt left
[19:00] *** rbt joined
[19:01] <lizmat> [Coke]: will look at that soon

[19:01] <tellable6> 2022-04-16T17:44:17Z #raku-dev <AlexDaniel> lizmat I think tellable is back up (with all the messages, nothing was lost from what I can tell)

[19:01] <tellable6> 2022-04-16T17:44:48Z #raku-dev <AlexDaniel> lizmat there is a chance that it will redeliver some messages that were already delivered, but based on what I see it's all good

[19:01] <tellable6> 2022-04-16T17:45:24Z #raku-dev <AlexDaniel> lizmat btw now with IRC-logs we can make quotable work again, which is really cool

[19:06] <lizmat> I don't even know what quotable6 is  :-)

[19:07] *** sena_kun left
[19:08] *** sena_kun joined
[19:17] <MasterDuke> searches irc logs

[19:18] <MasterDuke> quotable6: test-t-20

[19:18] <quotable6> MasterDuke, OK, working on it! This may take up to three minutes (4582161 messages to process)

[19:18] <quotable6> MasterDuke, https://gist.github.com/c42e1844ad8671fb52b940ad68eba12c

[19:18] <MasterDuke> quotable6: 'test-t-20'

[19:18] <quotable6> MasterDuke, OK, working on it! This may take up to three minutes (4582161 messages to process)

[19:19] <quotable6> MasterDuke, 390 messages (2017-10-26⌁2018-04-28): https://gist.github.com/397b3119e79b64f64f8210faedab6237

[19:20] <Geth> ¦ Raku-Steering-Council/main: b5084e5043 | (Geoffrey Broadwell)++ | minutes/20220402.md

[19:20] <Geth> ¦ Raku-Steering-Council/main: Fix date copy pasta

[19:20] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/b5084e5043

[19:36] *** jjido joined
[20:20] *** rbt left
[20:20] *** rbt joined
[20:25] *** rbt left
[20:25] *** rbt joined
[20:50] *** rbt left
[20:56] *** rbt joined
[21:16] *** rbt left
[21:16] *** rbt joined
[21:26] *** rbt left
[21:27] *** rbt joined
[21:34] *** jjido left
[21:43] *** jjido joined
[21:52] *** rbt left
[22:27] *** rbt joined
[22:34] *** linkable6 left
[22:37] *** linkable6 joined
[22:39] *** zacts joined
[22:41] *** linkable6 left
[22:43] *** rbt left
[22:43] *** rbt joined
[22:44] *** linkable6 joined
[22:45] *** jjido left
[22:56] *** melezhik joined
[22:56] <melezhik> .

[22:56] <tellable6> 2022-03-09T22:50:00Z #raku <tonyo> melezhik: you could just use one already available, i have a cron doing nightlys for the past couple of years

[22:56] <tellable6> 2022-03-09T22:50:00Z #raku <tonyo> melezhik: https://hub.docker.com/repository/docker/tonyodell/rakudo-nightly

[22:56] <tellable6> 2021-09-15T15:12:00Z #raku-dev <lizmat> .tell melezhik you might find this interesting: https://raku.land/zef:lizmat/Rakudo::Options

[22:58] <melezhik> .tell SmokeMachine I see are trying to run Red under SparkyCI, if you see timeouts  failure - please bear with me, it seems, Sparky needs some improvement for long running builds

[22:58] <tellable6> melezhik, I'll pass your message to SmokeMachine

[22:58] <melezhik> I will let you know once it's fixed

[22:59] *** melezhik left
[23:01] *** melezhik joined
[23:01] <SmokeMachine> .

[23:02] <melezhik> SmokeMachine actually one build just came through - http://sparrowhub.io:2222/report/132

[23:02] <melezhik> but again , if you see timeouts - please let me know or file bug to SparkyCI GH

[23:02] <melezhik> thanks

[23:05] <SmokeMachine> .tell melezhik I was just going to write to you :). Yes, thanks...

[23:05] <tellable6> SmokeMachine, I'll pass your message to melezhik

[23:05] <melezhik> NP

[23:05] *** melezhik left
[23:06] <SmokeMachine> .tell melezhik it seems it's not being able to connect to PG...

[23:06] <tellable6> SmokeMachine, I'll pass your message to melezhik

[23:10] <SmokeMachine> .tell melezhik sorry, it seems I misunderstood the message: `stderr: initdb: warning: enabling "trust" authentication for local connections`

[23:10] <tellable6> SmokeMachine, I'll pass your message to melezhik

[23:10] *** euandreh_ joined
[23:11] <SmokeMachine> .tell melezhik I'm not finding what the error is on this log: http://sparrowhub.io:2222/report/132\

[23:11] <tellable6> SmokeMachine, I'll pass your message to melezhik

[23:12] *** zacts left
[23:12] <SmokeMachine> .tell melezhik the truth is I can't see it running the tests...

[23:12] <tellable6> SmokeMachine, I'll pass your message to melezhik

[23:12] *** euandreh left
[23:13] *** rbt left
[23:13] *** rbt joined
[23:15] *** euandreh_ left
[23:21] *** euandreh_ joined
[23:33] *** rbt left
[23:33] *** rbt joined
[23:34] *** euandreh_ left
[23:34] *** euandreh_ joined
