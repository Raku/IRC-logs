[00:08] *** reportable6 left
[00:09] *** reportable6 joined
[00:13] *** jrjsmrtn joined
[01:13] *** reportable6 left
[01:13] *** evalable6 left
[01:13] *** linkable6 left
[01:13] *** bisectable6 left
[01:13] *** notable6 left
[01:13] *** committable6 left
[01:13] *** tellable6 left
[01:13] *** releasable6 left
[01:13] *** unicodable6 left
[01:13] *** quotable6 left
[01:13] *** statisfiable6 left
[01:13] *** benchable6 left
[01:13] *** greppable6 left
[01:13] *** sourceable6 left
[01:13] *** bloatable6 left
[01:13] *** coverable6 left
[01:13] *** nativecallable6 left
[01:13] *** shareable6 left
[01:14] *** bisectable6 joined
[01:14] *** evalable6 joined
[01:14] *** bloatable6 joined
[01:14] *** sourceable6 joined
[01:15] *** releasable6 joined
[01:15] *** nativecallable6 joined
[01:15] *** committable6 joined
[01:15] *** statisfiable6 joined
[01:15] *** benchable6 joined
[01:15] *** notable6 joined
[01:16] *** unicodable6 joined
[01:16] *** coverable6 joined
[01:16] *** reportable6 joined
[01:16] *** quotable6 joined
[01:16] *** tellable6 joined
[01:16] *** shareable6 joined
[01:16] *** greppable6 joined
[01:16] *** linkable6 joined
[01:18] *** Kaiepi left
[01:19] *** Xliff joined
[01:32] *** Kaiepi joined
[02:24] *** Kaiepi left
[02:36] <Voldenet> m: (^10).reduce({($^a), $^b}).flat.say

[02:36] <camelia> rakudo-moar 77bc03047: OUTPUT: «(((((((((0 1) 2) 3) 4) 5) 6) 7) 8) 9)␤»

[02:38] <Voldenet> m: sub flatten($_) { $_ ~~ Iterable ?? |$_.map(&flatten) !! $_ }; (^10).reduce({($^a), $^b}).&flatten.say

[02:38] <camelia> rakudo-moar 77bc03047: OUTPUT: «(0 1 2 3 4 5 6 7 8 9)␤»

[03:14] <drakonis> hm, coerce protocol?

[03:24] *** linkable6 left
[03:24] *** evalable6 left
[03:25] *** evalable6 joined
[03:27] *** linkable6 joined
[04:02] <Voldenet> coerce protocol is pretty useful, but undocumented

[04:03] <Voldenet> m: class Hello { has $.i; multi method COERCE(Int() $i) { Hello.new(:$i) }}; sub x(Hello() $h) { say $h }; x("42")

[04:03] <camelia> rakudo-moar 77bc03047: OUTPUT: «Hello.new(i => 42)␤»

[04:03] <Voldenet> this is as useful as undocumented

[04:21] *** Kaiepi joined
[05:21] *** evalable6 left
[05:21] *** bloatable6 left
[05:21] *** benchable6 left
[05:21] *** unicodable6 left
[05:21] *** nativecallable6 left
[05:21] *** committable6 left
[05:21] *** statisfiable6 left
[05:21] *** linkable6 left
[05:21] *** releasable6 left
[05:21] *** greppable6 left
[05:21] *** notable6 left
[05:21] *** tellable6 left
[05:21] *** reportable6 left
[05:21] *** sourceable6 left
[05:21] *** bisectable6 left
[05:21] *** quotable6 left
[05:21] *** coverable6 left
[05:21] *** shareable6 left
[05:22] *** unicodable6 joined
[05:22] *** releasable6 joined
[05:22] *** statisfiable6 joined
[05:22] *** coverable6 joined
[05:22] *** linkable6 joined
[05:22] *** quotable6 joined
[05:22] *** notable6 joined
[05:23] *** nativecallable6 joined
[05:23] *** tellable6 joined
[05:23] *** benchable6 joined
[05:23] *** greppable6 joined
[05:23] *** committable6 joined
[05:23] *** evalable6 joined
[05:24] *** sourceable6 joined
[05:24] *** shareable6 joined
[05:24] *** bisectable6 joined
[05:24] *** reportable6 joined
[05:24] *** bloatable6 joined
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[07:10] *** quotable6 left
[07:10] *** coverable6 left
[07:10] *** notable6 left
[07:10] *** committable6 left
[07:10] *** unicodable6 left
[07:10] *** nativecallable6 left
[07:10] *** releasable6 left
[07:10] *** reportable6 left
[07:10] *** tellable6 left
[07:10] *** bloatable6 left
[07:10] *** linkable6 left
[07:10] *** statisfiable6 left
[07:10] *** sourceable6 left
[07:10] *** shareable6 left
[07:10] *** bisectable6 left
[07:10] *** greppable6 left
[07:10] *** benchable6 left
[07:10] *** evalable6 left
[07:11] *** evalable6 joined
[07:11] *** tellable6 joined
[07:11] *** bloatable6 joined
[07:11] *** greppable6 joined
[07:11] *** coverable6 joined
[07:11] *** releasable6 joined
[07:11] *** reportable6 joined
[07:12] *** sourceable6 joined
[07:12] *** unicodable6 joined
[07:12] *** linkable6 joined
[07:12] *** quotable6 joined
[07:12] *** nativecallable6 joined
[07:13] *** bisectable6 joined
[07:13] *** shareable6 joined
[07:13] *** benchable6 joined
[07:13] *** notable6 joined
[07:13] *** committable6 joined
[07:13] *** statisfiable6 joined
[07:57] *** Sgeo left
[08:30] *** jjido joined
[08:52] *** nikhil left
[09:37] *** jjido left
[09:56] *** jjido joined
[10:18] *** jjido left
[11:15] *** saint- joined
[11:16] <saint-> Hey! So I have a grammar which parses something as shown here https://andrewshitov.com/2018/10/31/a-simple-parser-in-perl-6-grammars/ but I was wondering once I have the match object, how do I navigate through the parse tree? For example if I want to print out only all the "assignment" tokens or "expression" tokens in this example

[11:16] <tellable6> 2021-12-16T11:06:00Z #raku <tbrowder> .ask ssaint what kind of mobile app do you want?

[11:22] <nine> saint-: Match objects do the Positional and Associative roles, i.e. they can be used like they were arrays or hashes for accessing groups and sub-rules. E.g. $my-match<assignment>

[11:23] <nine> m: say $*RAKU.compiler.version

[11:23] <camelia> rakudo-moar 77bc03047: OUTPUT: «v2022.04.87.g.77.bc.03047␤»

[11:23] <nine> tbrowder: ^^^

[11:25] <saint-> nine it seems though I can't access a second level group though

[11:27] <nine> You mean sub-rules of ssignment? That would be $my-match<assignment><whatever>. Providing that whatever is actually a named rule/token/regex and that there is exactly one assignment in your match.

[11:27] <saint-> nine What if there are multiple matches

[11:28] <saint-> I'll give you an example, one sec

[11:29] <saint-> https://www.toptal.com/developers/hastebin/rasocivopu.properties This is my output

[11:30] <saint-> I want to just print "plainBlock" for example

[11:30] <saint-> All of them

[11:30] <saint-> Or "refBlock"

[11:31] <saint-> And this is my code: https://www.toptal.com/developers/hastebin/vadaceyeku.xml

[11:31] <Xliff> \o

[11:34] <nine> saint-: that'd be $match<block>[0]<plainBlock>

[11:35] <Xliff> saint: Then  it looks like you would  use $match[$idx]<block><plainBlock>

[11:35] <saint-> Oh thank you! And is there a way to print just the matched text and not the subsequent parse tree?

[11:35] <nine> Or for all of them $match<block>.map(*<plainBlock>).grep(*.defined)

[11:36] <nine> stringify the resulting match object: $match[$idx]<block><plainBlock>.Str

[11:40] <saint-> Thanks a lot nine ! It's making sense now

[11:41] <Xliff> What's the best way to tell if a match object is Associative or Positional, then?

[11:41] <tbrowder> .tell nine thanks!

[11:41] <tellable6> tbrowder, I'll pass your message to nine

[11:42] <Xliff> m: my token letter { \w }; my token word { <letter>+ }; my $m = "abcd efgh ijk" ~~ / <word>; $m.gist.say

[11:42] <camelia> rakudo-moar 77bc03047: OUTPUT: «===SORRY!===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at <tmp>:1␤------> + }; my $m = "abcd efgh ijk" ~~ / <word>⏏; $m.gist.say␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤------> …»

[11:43] <Xliff> m: my token letter { \w }; my token word { <letter>+ }; my $m = "abcd efgh ijk" ~~ / <word> /; $m.gist.say

[11:43] <camelia> rakudo-moar 77bc03047: OUTPUT: «｢abcd｣␤ word => ｢abcd｣␤  letter => ｢a｣␤  letter => ｢b｣␤  letter => ｢c｣␤  letter => ｢d｣␤»

[11:43] <Xliff> m: my token letter { \w }; my token word { <letter>+ }; my $m = "abcd efgh ijk" ~~ / <word>+ /; $m.gist.say

[11:43] <camelia> rakudo-moar 77bc03047: OUTPUT: «｢abcd｣␤ word => ｢abcd｣␤  letter => ｢a｣␤  letter => ｢b｣␤  letter => ｢c｣␤  letter => ｢d｣␤»

[11:43] <Xliff> m: my token letter { \w }; my token word { <letter>+ }; my $m = "abcd efgh ijk" ~~ m:g/ <word>+ /; $m.gist.say

[11:43] <camelia> rakudo-moar 77bc03047: OUTPUT: «(｢abcd｣␤ word => ｢abcd｣␤  letter => ｢a｣␤  letter => ｢b｣␤  letter => ｢c｣␤  letter => ｢d｣ ｢efgh｣␤ word => ｢efgh｣␤  letter => ｢e｣␤  letter => ｢f｣␤  letter => ｢g｣␤  letter => ｢h｣ ｢ijk…»

[11:46] <tbrowder> regarding the term 4pi thing, i can use it in scope as above but i'm trying to put it in a module and export it. i haven't been successful trying the usual syntax

[11:49] <tbrowder> m: constant term:<4pi> is export = 4*pi;

[11:49] <camelia> rakudo-moar 77bc03047: ( no output )

[11:50] *** discord-raku-bot left
[11:51] *** discord-raku-bot joined
[11:51] <tbrowder> well, so far so good, in my other effort i had the "is export" on the other side of the =

[11:52] <tbrowder> back to the modue ... Math::Trig

[12:01] <tbrowder> nope, had syntax right, i just couldn't read it successfully by using that module

[12:02] <tbrowder> i can try the direct reading qualifying it by name of module...

[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:11] <saint-> Could someone explain how $match<block>.map(*<plainBlock>)  ? As in could someone point me to how * or . works in a routine

[12:11] <saint-> Been trying to find out where I can read how they work but haven't been able to yet

[12:12] <saint-> This example is more confusing -- say ('hello', 1, 22/7, 42, 'world').map: { .^name }

[12:14] <saint-> Okay I just figured out about the colon syntax, but yeah wondering about the . vs *

[12:21] <nine> saint-: https://docs.raku.org/type/Whatever#index-entry-Whatever-currying

[12:21] <tellable6> 2022-06-05T11:41:53Z #raku <tbrowder> nine thanks!

[12:21] <tbrowder> i tried using the EXPORT sub but no go, i give up :-(

[12:22] <nine> tbrowder: if something is so hard, it's usually worth asking the question if what you want to do is even a good idea

[12:22] <saint-> Thanks nine !

[12:23] <tbrowder> nine: exactly, it's not worth the effort

[12:24] <tbrowder> thanks for the cold water

[12:26] <discord-raku-bot> <Anton Antonov#7232> I can find the roles of a class with $class.^roles , but it seems I cannot do that for a grammar, i.e. $grammar.^roles does not work. Is there some alternative that works for grammars?

[12:27] <nine> m: grammar Foo { }; say Foo.^roles.elems

[12:27] <camelia> rakudo-moar 77bc03047: OUTPUT: «1␤»

[12:27] <nine> Looks like ^roles on grammars works just fine

[12:45] <discord-raku-bot> <Anton Antonov#7232> @nine Please try `say Foo.^roles`  -- you will get the error "Cannot find method 'find_method' on object of type NQPParametricRoleHOW".

[12:50] <moritz> but that's a problem with the stringifcation of the type names, not with .^roles

[12:50] <moritz> m: grammar Foo { }; say .^name for Foo.^roles;

[12:50] <camelia> rakudo-moar 77bc03047: OUTPUT: «NQPMatchRole␤»

[12:57] *** Util left
[12:59] <discord-raku-bot> <Anton Antonov#7232> <@171354420292878346>tz Ok. Still, I cannot find the roles of a grammar using `.^roles` .

[13:00] <nine> But you can? .^roles gives you the roles

[13:01] <nine> You expect to be able to do specific things with those roles (like just stringify or gist them) you get and that's where you fail.

[13:01] <moritz> I haven't read the full backlog... where's the code?

[13:02] <nine> m: grammar Foo does Numeric { }; dd Foo.^roles.map(*.^name)

[13:02] <camelia> rakudo-moar 77bc03047: OUTPUT: «("Numeric", "NQPMatchRole").Seq␤»

[13:08] <discord-raku-bot> <Anton Antonov#7232> @nine Ok. My mistake, `$grammar.^roles.map({ $_.^name })` works.

[13:18] <discord-raku-bot> <Anton Antonov#7232> It looks same / similar observations apply when using `.^attributes` on grammars.

[13:57] *** linkable6 left
[13:57] *** evalable6 left
[13:59] *** linkable6 joined
[14:00] <ecocode[m]> Hello, I have 3 arrays with different quantity of items ie: A=[a1,a2,a3] , B=[b1,b2], C=[c1,c2,c3,c4]. I want to to generate an array containing all possible combinations like: [a1,b1,c1], [a1,b1,c2] ... [a3,b2,c4]

[14:00] <ecocode[m]> In this case, the order is not particularly important.

[14:00] <ecocode[m]> Since raku has a lot of operators, which one would be the cleaniest one ?  Speed is not really important, code maintainablility is the main priority.

[14:00] *** evalable6 joined
[14:05] <moritz> why an operator and not just a function?

[14:06] <ecocode[m]> because @result =@A x @B x @C  would be sooo nice 😉

[14:09] <moritz> but above you listed maintainablility as your main priority, not conciseness or beatuy :D

[14:09] <ecocode[m]> and if it would be even more nicier if it was lazy

[14:10] <moritz> laziness is orthogonal to operator vs. function

[14:12] <ecocode[m]> yeah, you can forget about lazy as requirement 😉 but beauty is of course important, otherwise I would use Python 😉

[14:14] <moritz> there are symbols for joins in Unicode

[14:14] <moritz> ⟗ - U+027D7 - FULL OUTER JOIN

[14:14] <moritz> maybe a good option for this one?

[14:15] <moritz> full outer join is roughly what you want

[14:21] <ecocode[m]> that gives an error

[14:21] <ecocode[m]> but found the solution !  `@a = @A X @B X @C` works

[14:21] <ecocode[m]> I wasn't far 😉

[14:22] <moritz> m: sub infix:<⟗>($x, $y) {say $x + $y }; say 4 ⟗ 5

[14:22] <camelia> rakudo-moar 77bc03047: OUTPUT: «9␤True␤»

[14:22] <moritz> m: sub infix:<⟗>($x, $y) {$x + $y }; say 4 ⟗ 5

[14:22] <camelia> rakudo-moar 77bc03047: OUTPUT: «9␤»

[14:22] <moritz> ah, so X already does what you want, great

[14:23] <ecocode[m]> yeah

[14:23] <ecocode[m]> is X lazy ?

[14:23] <ecocode[m]> I think so, since it generates a sequence.. right ?

[14:39] <ecocode[m]> hmmm... nope it is not lazy... tested with `@a = 1..100 X 1..100 X 1..1000; say @a[^5]` takes forever

[15:00] <ugexe> m: my $a := 1..100 X 1..100 X 1..1000; say $a[^5]

[15:00] <camelia> rakudo-moar 77bc03047: OUTPUT: «((1 1 1) (1 1 2) (1 1 3) (1 1 4) (1 1 5))␤»

[15:00] *** linkable6 left
[15:00] *** evalable6 left
[15:01] *** evalable6 joined
[15:02] *** linkable6 joined
[15:02] <ecocode[m]> ugexe: awesome ! thanks !

[15:38] *** Sankalp- joined
[15:40] *** Sankalp left
[15:40] *** Sankalp- is now known as Sankalp

[16:21] *** jjido joined
[17:10] *** mexen joined
[17:26] <discord-raku-bot> <Anton Antonov#7232> I apologize for these ignorant questions: [1] Is the the blog/site deathbyperl6.com developed/maintained by Nick Logan? [2] Is Nick Logan also ugexe? [3] Is Tony O'Dell publishing Raku packages under user name tony-o ?

[17:27] <ugexe> yes to all of those

[17:28] <discord-raku-bot> <Anton Antonov#7232> I assume the answers to all these questions is "yes", but when writing references it is a good idea to double check.

[17:28] <discord-raku-bot> <Anton Antonov#7232> @ugexe Thanks!

[17:31] *** Sankalp left
[17:32] *** Sankalp joined
[17:47] <gfldex> tbrowder: please note: https://github.com/rakudo/rakudo/issues/4942

[17:51] <tbrowder> gfldex: thanks for showing how to use the exported term, and for creating the issue. think the new  AST branch can make it work?

[17:53] <gfldex> I thing nobody tried to export a term before.

[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[18:42] *** Sgeo joined
[18:49] *** Geth left
[18:49] *** Geth joined
[19:01] <Xliff> Has anyone here heard of FluidSynth?

[19:02] <perryprog> Yeah

[19:03] <perryprog> Though the context I know about it is from playing Doom I and II

[19:03] <tbrowder> gfldex: just a thought, maybe there’s a unicode char that looks like an arabic digit but really isn’t that could fake the symbol for the constant

[19:04] <gfldex> Rakudo knows all the numbers, no matter the language.

[19:05] <tbrowder> m: constant iipi = pi*2

[19:05] <camelia> rakudo-moar 77bc03047: ( no output )

[19:06] <gfldex> m: say ١ + ٢;

[19:06] <camelia> rakudo-moar 77bc03047: OUTPUT: «3␤»

[19:07] <tbrowder> m: constant ivpi = 4*pi

[19:07] <camelia> rakudo-moar 77bc03047: ( no output )

[19:07] <gfldex> m: say Ⅰ+Ⅱ;

[19:07] <camelia> rakudo-moar 77bc03047: OUTPUT: «3␤»

[19:08] <tbrowder> m: constant ipi = pi; say ipi

[19:08] <camelia> rakudo-moar 77bc03047: OUTPUT: «3.141592653589793␤»

[19:14] <Xliff> perryprog: I have basic binds for Raku. I'm looking for sample code from other languages that I can port. Have any idea where I can look for something like that?

[19:14] <perryprog> hmm

[19:15] <perryprog> Xliff, https://github.com/coelckers/ZMusic might have something

[19:27] <tbrowder> m: say “c\[109]”

[19:27] <camelia> rakudo-moar 77bc03047: OUTPUT: «c[109]␤»

[19:29] <tbrowder> m: say “\c[109]”

[19:29] <camelia> rakudo-moar 77bc03047: OUTPUT: «m␤»

[19:30] <tbrowder> m: say “\c[4,109]”

[19:30] <camelia> rakudo-moar 77bc03047: OUTPUT: «m␤»

[19:31] <tbrowder> m: say “\c[109,110]”

[19:31] <camelia> rakudo-moar 77bc03047: OUTPUT: «mn␤»

[19:32] <tbrowder> m: my $a = \c[109,110]; say $a

[19:32] <camelia> rakudo-moar 77bc03047: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    c used at line 1␤␤»

[19:33] <tbrowder> m: my $a = “\c[109,110]”; say $a

[19:33] <camelia> rakudo-moar 77bc03047: OUTPUT: «mn␤»

[19:35] <tbrowder> m: constant “\c[109,110]” = pi; say mn

[19:35] <camelia> rakudo-moar 77bc03047: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing initializer on constant declaration␤at <tmp>:1␤------> constant⏏ “\c[109,110]” = pi; say mn␤»

[19:53] <Xliff> https://github.com/Xliff/raku-FluidSynth

[19:53] <Xliff> perryprog: Thanks!

[20:20] *** jjido left
[20:26] *** jjido joined
[20:49] <coleman> Does the middle CircleCI badge icon look broken for anyone else? The URL is valid for me, though. https://github.com/Raku/doc#official-documentation-of-raku

[20:57] <perryprog> Doesn't load for me either; the URL for the image is a 404

[20:58] *** mexen left
[21:07] <discord-raku-bot> <Anton Antonov#7232> It looks like https://360.zef.pm/index.json has only author IDs that start with "zef", e.g. "zef:Altai-man", "zef:amano.kenji", ... Is there a JSON file with other non-zef-prefixed author IDs?

[21:07] <Xliff> What does this error mean: 

[21:07] <Xliff> ===SORRY!=== Error while compiling /home/cbwood/Projects/p6-GtkPlus/lib/GTK/Box.pm6 (GTK::Box)

[21:07] <Xliff> New type Stash for CompUnit::DependencySpecification is not a mixin type

[21:21] <jdv> anyone else see something like this?:  Cannot find method 'is_dispatcher' on object of type BOOTCode

[21:23] *** lichtkind joined
[21:33] <jdv> m: role A {}; A.new ~~ A:D;

[21:33] <camelia> rakudo-moar 5d46c27f9: OUTPUT: «===SORRY!===␤Cannot find method 'is_dispatcher' on object of type BOOTCode␤»

[21:34] <jdv> i don't think that used to happen...

[21:44] *** sena_kun left
[21:47] <jdv> Anton: they are in a repo that zef looks at somewhere

[21:48] <jdv> probably here - https://github.com/ugexe/Perl6-ecosystems

[21:50] <jdv> vrurg: i'd guess you'd know the most about the thing i tripped on 

[21:50] <jdv> s/role/class/ and its fine so roley or something...

[21:54] <discord-raku-bot> <Anton Antonov#7232> @jdv Thank you!

[21:58] <vrurg> jdv: Yes, it's my "baby". :) Optimizer stuff.

[21:59] <jdv> the ll exec looked beyond me

[21:59] <jdv> should i log a bug or is that known or what do you think?

[22:03] <vrurg> jdv: It's about to be fixed now.

[22:04] <vrurg> Pretty stupid bug as one branch is testing for a method availability whereas another branch of the same condition doesn't. 

[22:15] *** jjido left
[22:30] <jdv> oh ok.  thanks!

[22:31] <jdv> no rush.  i can deal...

[22:32] <vrurg> jdv: https://github.com/rakudo/rakudo/pull/4944 – as soon as it's all green.

[23:15] *** evalable6 left
[23:15] *** linkable6 left
[23:16] *** evalable6 joined
[23:17] *** linkable6 joined
