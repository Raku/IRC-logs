[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:46] *** Furor is now known as Colere

[00:47] *** Colere left
[00:48] *** TieUpYourCamel left
[00:53] <ugexe> https://gist.github.com/ugexe/ce581c7cac445395299308ebe816d97f

[00:54] <ugexe> a prototype of the load-from-this-same-dist functionality

[00:56] <ugexe> anyone have suggestions to make the `use-from-dist("module-name")` work as `use-from-dist(module-name)`?

[00:56] <ugexe> or `use-from-dist module-name`

[00:56] *** TieUpYourCamel joined
[01:47] *** frost joined
[02:09] *** Colere joined
[02:36] *** frost left
[03:36] *** squashable6 left
[03:36] *** sourceable6 left
[03:36] *** coverable6 left
[03:36] *** committable6 left
[03:36] *** greppable6 left
[03:36] *** benchable6 left
[03:36] *** notable6 left
[03:36] *** bloatable6 left
[03:36] *** reportable6 left
[03:36] *** statisfiable6 left
[03:36] *** evalable6 left
[03:36] *** tellable6 left
[03:36] *** bisectable6 left
[03:36] *** releasable6 left
[03:36] *** releasable6 joined
[03:36] *** tellable6 joined
[03:36] *** squashable6 joined
[03:37] *** notable6 joined
[03:37] *** reportable6 joined
[03:37] *** committable6 joined
[03:37] *** greppable6 joined
[03:37] *** sourceable6 joined
[03:37] *** benchable6 joined
[03:38] *** statisfiable6 joined
[03:38] *** coverable6 joined
[03:38] *** bloatable6 joined
[03:38] *** evalable6 joined
[03:39] *** bisectable6 joined
[04:34] *** gfldex left
[04:34] *** discord-raku-bot left
[05:34] *** sourceable6 left
[05:34] *** committable6 left
[05:34] *** reportable6 left
[05:34] *** statisfiable6 left
[05:34] *** coverable6 left
[05:34] *** releasable6 left
[05:34] *** notable6 left
[05:34] *** squashable6 left
[05:34] *** nativecallable6 left
[05:34] *** evalable6 left
[05:34] *** greppable6 left
[05:34] *** bloatable6 left
[05:34] *** tellable6 left
[05:34] *** linkable6 left
[05:34] *** shareable6 left
[05:34] *** unicodable6 left
[05:34] *** quotable6 left
[05:34] *** benchable6 left
[05:34] *** bisectable6 left
[05:34] *** statisfiable6 joined
[05:34] *** benchable6 joined
[05:34] *** quotable6 joined
[05:35] *** reportable6 joined
[05:35] *** linkable6 joined
[05:35] *** greppable6 joined
[05:35] *** squashable6 joined
[05:36] *** committable6 joined
[05:36] *** sourceable6 joined
[05:36] *** nativecallable6 joined
[05:36] *** bloatable6 joined
[05:36] *** unicodable6 joined
[05:36] *** notable6 joined
[05:36] *** shareable6 joined
[05:36] *** releasable6 joined
[05:37] *** bisectable6 joined
[05:37] *** coverable6 joined
[05:37] *** evalable6 joined
[05:37] *** tellable6 joined
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:18] *** elcaro left
[06:40] *** elcaro joined
[06:40] *** Sgeo left
[06:40] *** elcaro left
[06:40] *** elcaro joined
[06:42] *** summerisle is now known as eof

[07:42] *** reportable6 left
[07:42] *** committable6 left
[07:42] *** shareable6 left
[07:42] *** statisfiable6 left
[07:42] *** tellable6 left
[07:42] *** benchable6 left
[07:42] *** greppable6 left
[07:42] *** sourceable6 left
[07:42] *** releasable6 left
[07:42] *** evalable6 left
[07:42] *** bloatable6 left
[07:42] *** unicodable6 left
[07:42] *** squashable6 left
[07:42] *** linkable6 left
[07:42] *** nativecallable6 left
[07:42] *** notable6 left
[07:42] *** coverable6 left
[07:42] *** bisectable6 left
[07:42] *** quotable6 left
[07:43] *** unicodable6 joined
[07:43] *** committable6 joined
[07:43] *** sourceable6 joined
[07:43] *** shareable6 joined
[07:43] *** bloatable6 joined
[07:43] *** squashable6 joined
[07:43] *** coverable6 joined
[07:43] *** nativecallable6 joined
[07:43] *** notable6 joined
[07:43] *** quotable6 joined
[07:44] *** greppable6 joined
[07:44] *** reportable6 joined
[07:44] *** tellable6 joined
[07:44] *** linkable6 joined
[07:44] *** releasable6 joined
[07:44] *** bisectable6 joined
[07:45] *** evalable6 joined
[07:45] *** statisfiable6 joined
[07:45] *** benchable6 joined
[08:11] *** sena_kun joined
[08:47] *** frost joined
[09:25] *** sena_kun left
[10:04] *** sena_kun joined
[10:36] *** timo left
[10:58] *** discord-raku-bot joined
[11:06] *** gfldex joined
[11:40] <tib> Hi all :) by curiosity, anyone can tell me what is or was "pigeon" (from https://www.reddit.com/r/linux/comments/3y9hnv/comment/cybv196/?utm_source=share&utm_medium=web2x&context=3) or it was just the word used to talk about "parrot"?

[11:42] *** mexen_ joined
[12:01] *** timo joined
[12:08] *** reportable6 left
[12:11] *** reportable6 joined
[12:42] *** jgaz joined
[13:11] *** otpv joined
[13:11] *** otpv left
[14:11] *** bisectable6 left
[14:11] *** benchable6 left
[14:11] *** nativecallable6 left
[14:11] *** evalable6 left
[14:11] *** committable6 left
[14:11] *** greppable6 left
[14:11] *** tellable6 left
[14:11] *** quotable6 left
[14:11] *** notable6 left
[14:11] *** reportable6 left
[14:11] *** linkable6 left
[14:11] *** sourceable6 left
[14:11] *** squashable6 left
[14:11] *** unicodable6 left
[14:11] *** shareable6 left
[14:11] *** releasable6 left
[14:11] *** bloatable6 left
[14:11] *** coverable6 left
[14:11] *** statisfiable6 left
[14:11] *** evalable6 joined
[14:11] *** notable6 joined
[14:12] *** sourceable6 joined
[14:12] *** frost left
[14:12] *** nativecallable6 joined
[14:12] *** reportable6 joined
[14:12] *** quotable6 joined
[14:12] *** committable6 joined
[14:12] *** greppable6 joined
[14:12] *** benchable6 joined
[14:12] *** releasable6 joined
[14:12] *** linkable6 joined
[14:12] *** tellable6 joined
[14:12] *** statisfiable6 joined
[14:13] *** squashable6 joined
[14:13] *** coverable6 joined
[14:13] *** bloatable6 joined
[14:13] *** unicodable6 joined
[14:13] *** bisectable6 joined
[14:14] *** shareable6 joined
[14:36] *** jgaz left
[14:56] <leont> I can't add a COERCE method to a role, can I?

[14:56] <leont> Mixing in a role { COERCE() { .‚Ä¶ }} gives an error because something else is already adding a COERCE as well, I don't know any other escape hatch

[14:57] <leont> Er, I meant add a CEORCE to an enum

[14:58] *** xinming left
[14:59] *** xinming joined
[15:16] <discord-raku-bot> <p6steve> this code line seems to work as intended ```$obj = sort(   $obj: {$obj[$++]<species>, $obj[$++]<mass>})[*].reverse^;```

[15:18] <discord-raku-bot> <p6steve> I am a bit nervous that the state var ```$``` is getting incremented twice on each pass ... or is it one state var for each subscript ```[]```?

[15:19] *** epony left
[15:26] <p6steve> m: my @a = 3,6,5,7;for ^2 { say @a[$++] }

[15:26] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´3‚ê§6‚ê§¬ª

[15:26] <p6steve> m: my @a = 3,6,5,7;for ^2 { say @a[$++], '+', @a[$++] }

[15:26] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´3+3‚ê§6+6‚ê§¬ª

[15:27] <p6steve> looks like the [] subscript delimits the block scope of $

[15:31] <discord-raku-bot> <Nemokosch> I'd like to know the reason for this behavior

[15:33] <p6steve> m: my @a = 3,6,5,7;for ^2 {state $i; say @a[$i++],'+',@a[$i++]}

[15:33] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´3+6‚ê§5+7‚ê§¬ª

[15:34] *** Nemokosch joined
[15:34] <Nemokosch> .

[15:34] <tellable6> 2022-08-23T10:48:11Z #raku <leont> Nemokosch: It will probably work if you use Getopt::Long üòâ

[15:34] <tellable6> 2022-08-27T11:13:01Z #raku <leont> Nemokosch: I will open a ticket as soon as I narrowed it down. It's tricker than I thought

[15:34] <Nemokosch> m: for ^2 { ($ ~= 'asd') .WHICH.say; ($++) .WHICH.say; }

[15:34] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´Str|asd‚ê§Int|0‚ê§Str|asdasd‚ê§Int|1‚ê§¬ª

[15:35] <Nemokosch> oops, bad copy

[15:35] <leont> Very helpul, tellable6 

[15:35] <Nemokosch> this was simple enough

[15:35] <Nemokosch> m: for ^2 { ($++) .WHICH.say; ($++) .WHICH.say; }

[15:35] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´Int|0‚ê§Int|0‚ê§Int|1‚ê§Int|1‚ê§¬ª

[15:35] <Nemokosch> almost as if they were two different static variables

[15:36] <p6steve> I think that may be intentional

[15:39] <Nemokosch> isn't this the same thing that you showed?

[15:40] <p6steve> I think that the independent indexing is useful

[15:40] <p6steve> maybe like this

[15:41] <Nemokosch> it can be useful, I just don't understand it :D

[15:41] <p6steve> m: my @a = 3,6,5,7;for ^2 { say @a[$++], '+', @a[$+=2] }

[15:41] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´3+5‚ê§6+(Any)‚ê§¬ª

[15:42] <Nemokosch> umm

[15:42] <Nemokosch> something seems strange

[15:42] <p6steve> m: my @a = 3,6,5,7,8,9,2;for ^2 { say @a[$++], '+', @a[$+=2] }

[15:42] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´3+5‚ê§6+8‚ê§¬ª

[15:44] <Nemokosch> can you comprehend this? because I surely can't

[15:45] <p6steve> looking at this behaviour, I would say for the state var, each index [] "context" is seen as a block scope

[15:46] <p6steve> so in my first example, there are two state vars and each increments each time it is touched, so they index the same values

[15:47] <Nemokosch> so far so good

[15:47] <Nemokosch> oh maybe I just miscounted

[15:47] <Nemokosch> it just acts like two state variables

[15:48] <Nemokosch> but wasn't this the case without indexing as well?

[15:48] <p6steve> yes - just acts like two independent state vars

[15:48] <Nemokosch> m: for ^2 { ($++) .WHICH.say; ($ += 2) .WHICH.say; }

[15:48] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´Int|0‚ê§Int|2‚ê§Int|1‚ê§Int|4‚ê§¬ª

[15:49] <p6steve> I didn't try outside of the index []

[15:50] <p6steve> I did declare state $i in the outer scope and then used it in both indexes (and then $i is shared)

[15:51] <p6steve> looks like the () example you just did has single $ also

[15:52] <p6steve> alles klar?

[15:55] <Nemokosch> jawohl xd

[15:55] *** Nemokosch left
[15:58] *** MoC joined
[16:26] <lizmat> PSA: this week's Rakudo Weekly news will be later today or tomorrow

[16:33] *** Kaiepi left
[16:34] *** Kaiepi joined
[17:12] *** sena_kun left
[17:14] *** razetime joined
[17:20] *** razetime left
[17:45] *** ProperNoun left
[17:59] *** sena_kun joined
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[18:11] *** epony joined
[18:26] *** silug left
[18:32] *** silug joined
[18:33] *** silug left
[19:21] *** squashable6 left
[19:23] *** squashable6 joined
[19:27] *** silug joined
[20:05] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/08/29/2022-35-reworkout/

[20:27] *** linkable6 left
[20:27] *** evalable6 left
[20:27] *** evalable6 joined
[20:29] *** linkable6 joined
[20:39] <Xliff> m: my $*a, $*b = (1, 2); DYNAMIC::.keys.gist.say

[20:39] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´Dynamic variable $*b not found‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:39] <Xliff> m: my ($*a, $*b) = (1, 2); DYNAMIC::.keys.gist.say

[20:39] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´($_ ::?PACKAGE $=pod $*a $=finish EXPORT $?PACKAGE $¬¢ GLOBALish $*b $! !UNIT_MARKER $/)‚ê§¬ª

[20:40] <Xliff> m: class A { method a {  DYNAMIC::.keys.gist.say  }; }; my ($*a, $*b) = (1, 2);  A.a

[20:40] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´($! %_ $¬¢ self $/ $_)‚ê§¬ª

[20:41] <Xliff> Why aren't $*a and $*b visible in the second example?

[20:44] *** [Coke] left
[20:45] <Xliff> m: sub a {  DYNAMIC::.keys.gist.say  };  my ($*a, $*b) = (1, 2);  A.a

[20:45] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    A used at line 1‚ê§‚ê§¬ª

[20:45] <Xliff> m: sub a {  DYNAMIC::.keys.gist.say  };  my ($*a, $*b) = (1, 2);  a()

[20:45] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´($/ $¬¢ $! $_)‚ê§¬ª

[20:48] <japhb> Well that explains some weirdness that I thought was just me holding it wrong.

[20:48] *** [Coke] joined
[20:49] <japhb> ... and why I generally handle dynamic variables by setting PROCESS:: keys

[20:52] <Xliff> Example, please?

[20:57] <Xliff> japhb: Exanple, please?

[20:59] <Xliff> m: class A { method a {  DYNAMIC::.keys.gist.say  }; }; PROCESS::<$a> = 1; PROCESS:<$b> = 2; A.a

[20:59] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix = instead.‚ê§Did you make a mistake in Pod syntax?‚ê§at <tmp>:1‚ê§------>  }; }; PROCESS::<$a> = 1; PROCESS:<$b> =‚èè 2; A.a‚ê§¬ª

[21:00] <Xliff> m: class A { method a {  DYNAMIC::.keys.gist.say  }; }; PROCESS::<$a> = 1; PROCESS::<$b> = 2; A.a

[21:00] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´($/ $_ %_ self $! $¬¢)‚ê§¬ª

[21:00] <Xliff> m: PROCESS::<$a> = 1; PROCESS::<$b> = 2; class A { method a {  DYNAMIC::.keys.gist.say  }; }; ; A.a

[21:00] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´($/ $_ %_ self $! $¬¢)‚ê§¬ª

[21:00] <Xliff> m: class A { method a {  $*a.say; $ *b.say  }; }; PROCESS::<$a> = 1; PROCESS::<$b> = 2; A.a

[21:00] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    b used at line 1‚ê§‚ê§¬ª

[21:00] <Xliff> m: class A { method a {  $*a.say; $*b.say  }; }; PROCESS::<$a> = 1; PROCESS::<$b> = 2; A.a

[21:00] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´1‚ê§2‚ê§¬ª

[21:03] *** euandreh left
[21:05] *** euandreh joined
[21:35] *** epony left
[21:40] <japhb> Sorry, was working $day-job.  :-)

[21:41] <japhb> But yeah, I don't generally do DYNAMIC:: introspection, so when I need to set particular variables to be seen anywhere in my code, I just set the PROCESS:: keys as you did with your last example.

[21:41] <japhb> Because PROCESS:: is the final fallback for all dynamic searches.

[22:04] *** sena_kun left
[22:14] *** euandreh left
[22:16] *** euandreh joined
[22:19] *** epony joined
[22:34] *** Sgeo joined
[22:45] *** archenoth left
[22:45] *** MoC left
[22:53] *** Guest10 joined
[22:54] <Guest10> my last name is sud => stupid suicide

[22:55] <Guest10> i am mage looking for a priest and healer

[22:57] <Guest10> help

[22:57] <Guest10> reno911

[23:10] *** Guest10 left
[23:19] *** bdju left
[23:28] *** archenoth joined
[23:46] *** bigdata joined
