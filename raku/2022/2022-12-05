[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:11] *** lichtkind_ left
[00:28] *** MasterDuke joined
[00:35] *** MoC left
[00:35] *** xinming left
[00:36] *** xinming joined
[00:42] *** Xliff left
[00:50] *** xinming left
[00:50] *** xinming joined
[00:54] *** deoac joined
[01:04] *** xinming left
[01:06] *** xinming joined
[01:18] *** razetime joined
[01:57] *** epony joined
[01:58] *** deoac left
[01:59] *** deoac joined
[02:26] *** frost48 joined
[02:28] *** frost48 is now known as frost
[02:28] *** frost left
[02:28] *** frost joined
[02:59] *** deoac left
[03:48] *** Kaipei joined
[04:03] *** frost left
[04:05] *** frost joined
[04:40] *** frost left
[05:09] *** frost joined
[05:13] *** frost joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:14] *** Kaipei left
[06:15] *** Kaipei joined
[06:36] *** epony left
[06:46] *** epony joined
[07:05] *** frost left
[07:37] *** abraxxa joined
[07:41] *** abraxxa left
[07:42] *** abraxxa joined
[07:43] *** sena_kun joined
[07:48] *** Sgeo left
[08:06] *** sena_kun left
[08:07] *** sena_kun joined
[08:52] *** dakkar joined
[09:01] *** lichtkind_ joined
[09:23] *** xkr47 left
[09:24] *** xkr47 joined
[10:00] *** jpn joined
[10:01] *** tappi joined
[10:05] *** tappi left
[10:14] <discord-raku-bot> <Nemokosch> is it possible to make a parameter of an infix operator nodal?
[10:15] *** Guest62 joined
[10:16] *** Guest62 left
[10:20] *** sena_kun left
[10:26] <lizmat> what would that mean?
[10:26] <discord-raku-bot> <Nemokosch> that the hyper operator doesn't recurse upon encountering it?
[10:36] <lizmat> afaik, nodality is only checked on code objvects?
[10:36] <lizmat> *objects
[10:50] <discord-raku-bot> <Nemokosch> :\
[11:01] <lizmat> well, there's nothing magic about "is nodal"
[11:02] <lizmat> it's just a marker, and afaik, it is only being checked on code objets
[11:04] <discord-raku-bot> <Nemokosch> it would be better to "only" check it on parameters (including self)
[11:04] <discord-raku-bot> <Nemokosch> and that's also where it logically belongs - to the data, not to the behavior
[11:07] *** epony left
[11:07] *** sena_kun joined
[11:28] *** epony joined
[11:45] *** nine_ is now known as nine
[11:50] *** razetime left
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:07] *** lichtkind__ joined
[12:10] *** lichtkind_ left
[12:16] *** frost joined
[12:24] *** guifa joined
[12:26] *** lichtkind__ left
[12:33] *** tappi joined
[12:35] *** frost left
[12:45] *** tappi left
[13:07] *** razetime joined
[14:04] *** razetime left
[14:24] <discord-raku-bot> <Anton Antonov> Has anyone here submitted FOSDEM 2023 talk proposal? Is the deadline for all dev rooms December 10th, 2022?
[14:31] *** tokomak joined
[14:34] *** Sgeo joined
[14:43] <El_Che> https://fosdem.org/2023/news/2022-11-13-call-for-presentations/
[14:43] <tellable6> 2022-12-04T20:52:42Z #raku-dev <jdv> El_Che 2022.12 rakudo release done.
[14:44] <El_Che> deadlines of devrooms are set by the devroom orgs
[14:44] <El_Che> global is: 
[14:44] <El_Che> Submissions will be reviewed as they are received on an ongoing basis. The final deadline is 15th December but some tracks may close earlier if they fill up or the respective call for papers specifies an earlier date. 
[14:55] *** tokomak left
[15:12] <discord-raku-bot> <Anton Antonov> @El_Che Thanks -- good to know!
[15:19] *** razetime joined
[15:38] *** Guest11 joined
[15:38] *** Guest11 left
[15:40] <discord-raku-bot> <Anton Antonov> @El_Che The dev rooms I was looking at had December 10th as a deadline.
[15:53] <El_Che> which want do you target?
[16:03] <japhb> .tell Nemokosch $*IN.lines tries to empty stdin all the way to EOF.  So you're starving the REPL.
[16:03] <tellable6> japhb, I'll pass your message to Nemokosch
[16:05] <discord-raku-bot> <Nemokosch> can the REPL not use something else instead of $*IN? Is there no other interface to a terminal?
[16:05] *** melezhik joined
[16:05] <melezhik> o/
[16:06] <melezhik> when rakudo 2022.12 binaries will be available on https://rakudo.org/downloads/rakudo ?
[16:07] <melezhik> I am looking for rakudo-moar-2022.12-01-linux-x86_64-gcc.tar.gz
[16:08] <jdv> iirc it typically takes a few days, no?
[16:09] <El_Che> is it out?
[16:09] <jdv> what is it?
[16:09] <jdv> is that a lyric?...
[16:15] *** melezhik left
[16:20] <El_Che> rakudo 2022.12
[16:21] <jdv> the release happened yday
[16:24] <japhb> Nemokosch: I'm not sure why you want this, but I'm guessing what you really need is to point $*IN somewhere else.  If you redirect the input for the REPL itself, you violate the definition of stdin.  Which, I mean, you could do, but why?
[16:24] <tellable6> japhb, I'll pass your message to Nemokosch
[16:25] <El_Che> jdv: ok, I will create pkgs
[16:25] <El_Che> thx
[16:25] <jdv> i msgd you:)
[16:26] <El_Che> really?
[16:26] <El_Che> nothing to see here
[16:26] <El_Che> ... did I react?
[16:26] <El_Che> maybe I updated the server and lost the message
[16:26] <jdv> 43:49 < tellable6> 2022-12-04T20:52:42Z #raku-dev <jdv> El_Che 2022.12 rakudo release done.
[16:26] <jdv> ^
[16:27] <jdv> is there a better way?
[16:38] *** jgaz joined
[16:57] <discord-raku-bot> <Nemokosch> japhb: because I want to test a script line by line?
[16:58] <discord-raku-bot> <Nemokosch> In shell, one can do this redirection, what about in the REPL
[17:00] <discord-raku-bot> <Nemokosch> I think it makes perfect sense for the REPL to *not* consider the command to run "input" in the same sense as the stdin of a script
[17:01] <discord-raku-bot> <Nemokosch> after all, if you actually run a script, the lines of the script themselves aren't the stdin within the script
[17:02] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/12/05/2022-49-releasemas-again/
[17:02] <jdv> lizmat: thanks!
[17:03] <discord-raku-bot> <Nemokosch> it really seems more of a technical fun fact that the REPL uses the very same stdin - but could it not be done differently?
[17:09] <japhb> If you run a script, the lines of the script are coming from a file.  Thus, not stdin.  It sounds like you need a debugger, not the REPL.  Command-line and IDE debuggers exist for Raku.
[17:10] <japhb> How would you expect to test the REPL itself, if you could not just feed it input?
[17:11] <japhb> (And yes, the REPL probably could use a different input than $*IN with some extra work, but I don't know if it would be able to do so portably and without gotchas.)
[17:16] <discord-raku-bot> <Nemokosch> to be honest, since the REPL is inherently an interactive thing, I wouldn't feel it's a huge loss if that cannot be tested automatically
[17:18] <discord-raku-bot> <Nemokosch> anyway, it's fine if this is worth doing but I think it would be a legitimate and meaningful feature
[17:18] <discord-raku-bot> <Nemokosch> anyway, it's fine if thisn't/ is worth doing but I think it would be a legitimate and meaningful feature
[17:19] <discord-raku-bot> <Nemokosch> *discord being too clever with the s/ substitutions üïµÔ∏è *
[17:21] <discord-raku-bot> <Nemokosch> the same way it's not worth for me to mangle with debuggers if all I wanted was interactive code execution on lines of code that will form a little standalone script
[17:21] <discord-raku-bot> <Nemokosch> eventually I ran it with raku -e probably
[17:24] *** baughb joined
[17:31] <japhb> It occurs to me that what might work best for you (assuming you don't want to learn a debugger, which I highly recommend you do, since it's a really nice tool in one's toolbox), is to reopen $*IN yourself, pointing to whatever test inputs you want.
[17:33] *** razetime left
[17:37] <baughb> I want to read (and process) a file line-by-line, until I find an empty line, and then continue reading (and processing in a different way) line-by-line until the end. My idea was to bind `.IO.lines` with something like `my \lines = 'file'.IO.lines` and then run two for loops over it, but then I get the "The iterator of this Seq is already in
[17:37] <baughb> use/consumed" error. Is there some other way to do this lazily, without caching the file?
[17:38] *** dakkar left
[17:39] <japhb> baughb: Use a single loop, but have a mode flag that you set when you see the blank line, and that determines how you process each line?
[17:39] <japhb> You could also use a couple loops and the flip-flop operator on the first one, I suppose.
[17:40] <baughb> ya, seems like a easy solution, but it's pretty ugly - all of the logic would be in a giant if/else
[17:44] <japhb> baughb: `my $blank-seen; for lines() { $blank-seen ?? do-foo($_) !! do-bar($_); $blank-seen++ if /^ \s* $/; }` and then just define do-foo and do-bar?
[17:46] <baughb> ya, I guess that's what I'll do.... I was hoping there'd be some way to keep the state of the iterator between loops
[17:51] <japhb> baughb: I mean, you could store the iterator in a variable, and then read from that variable line-by-line, rather than all the way through, so that it is still not completely consumed at the end of the first loop.
[17:55] <discord-raku-bot> <Nemokosch> sounds like this is another case of "split on value"
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:07] <El_Che> jdv: good question. Building atm
[18:10] *** sena_kun left
[18:14] <jdv> i have nothing but questionable questions but ok!
[18:24] <El_Che> I may anwerable answers?
[18:25] <jdv> yes
[18:27] *** baughb left
[18:29] <El_Che> only one falling test in first run, profile on ubuntu 20.04
[18:29] <El_Che> nice
[18:32] <jdv> :(
[18:33] <jdv> i got todos but no fails
[18:33] <El_Che> we use to have lots op flippers
[18:33] <El_Che> 1 out of 25 builds is good
[18:34] <El_Che> and it did not fail on the next run
[18:34] <jdv> ha.  actually even since i started there have been less flaps...
[18:34] <El_Che> causation, correlation, potato, potahto
[18:34] <jdv> no doubt the results of a lot of work.  thanks y'all!
[18:35] <jdv> "progress":)
[18:54] *** sena_kun joined
[18:54] <El_Che> okm now I had 3 :)
[18:55] <El_Che> t/09-moar/01-profilers.t (3x), t/04-nativecall/21-callback-other-thread.t (1x)
[19:23] *** jpn left
[19:40] *** lichtkind__ joined
[20:01] *** abraxxa left
[20:26] *** sena_kun left
[20:35] *** sena_kun joined
[20:41] *** jpn joined
[20:48] *** beginner joined
[20:48] *** beginner left
[21:05] <El_Che> weekly: rakudo-pkg releases for 2022.12 + added packages for newly released alpine 3.17
[21:05] <notable6> El_Che, Noted! (weekly)
[21:09] *** jpn left
[21:18] *** vrurg_ joined
[21:21] *** vrurg left
[22:19] *** sena_kun left
[22:29] *** jgaz left
[23:06] *** jpn joined
[23:10] *** jpn left
[23:33] *** kjp left
[23:34] *** kjp joined
