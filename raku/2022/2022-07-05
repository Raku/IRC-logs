[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[01:09] *** evalable6 left
[01:09] *** statisfiable6 left
[01:09] *** quotable6 left
[01:09] *** notable6 left
[01:09] *** bloatable6 left
[01:09] *** sourceable6 left
[01:09] *** releasable6 left
[01:09] *** greppable6 left
[01:09] *** nativecallable6 left
[01:09] *** shareable6 left
[01:09] *** bisectable6 left
[01:09] *** linkable6 left
[01:09] *** coverable6 left
[01:09] *** reportable6 left
[01:09] *** tellable6 left
[01:09] *** unicodable6 left
[01:09] *** benchable6 left
[01:09] *** committable6 left
[01:10] *** tellable6 joined
[01:10] *** releasable6 joined
[01:10] *** notable6 joined
[01:10] *** benchable6 joined
[01:10] *** shareable6 joined
[01:10] *** evalable6 joined
[01:10] *** sourceable6 joined
[01:11] *** unicodable6 joined
[01:11] *** quotable6 joined
[01:11] *** reportable6 joined
[01:11] *** coverable6 joined
[01:11] *** nativecallable6 joined
[01:11] *** linkable6 joined
[01:11] *** statisfiable6 joined
[01:11] *** bloatable6 joined
[01:12] *** bisectable6 joined
[01:12] *** greppable6 joined
[01:12] *** committable6 joined
[01:48] *** swaggboi left
[01:49] *** swaggboi joined
[02:06] *** Kaiepi left
[02:09] *** frost joined
[02:09] *** swaggboi left
[02:26] *** swaggboi joined
[02:42] *** swaggboi left
[03:00] *** swaggboi joined
[04:00] *** sourceable6 left
[04:00] *** greppable6 left
[04:00] *** tellable6 left
[04:00] *** nativecallable6 left
[04:00] *** benchable6 left
[04:00] *** releasable6 left
[04:00] *** shareable6 left
[04:00] *** reportable6 left
[04:00] *** unicodable6 left
[04:00] *** linkable6 left
[04:00] *** notable6 left
[04:00] *** bloatable6 left
[04:00] *** evalable6 left
[04:00] *** committable6 left
[04:00] *** coverable6 left
[04:00] *** bisectable6 left
[04:00] *** statisfiable6 left
[04:00] *** quotable6 left
[04:00] *** sourceable6 joined
[04:00] *** bloatable6 joined
[04:00] *** unicodable6 joined
[04:01] *** committable6 joined
[04:01] *** quotable6 joined
[04:01] *** benchable6 joined
[04:01] *** bisectable6 joined
[04:01] *** notable6 joined
[04:01] *** releasable6 joined
[04:01] *** greppable6 joined
[04:01] *** tellable6 joined
[04:01] *** reportable6 joined
[04:01] *** statisfiable6 joined
[04:01] *** linkable6 joined
[04:01] *** nativecallable6 joined
[04:02] *** evalable6 joined
[04:03] *** coverable6 joined
[04:03] *** shareable6 joined
[04:03] *** wcs left
[04:17] *** swaggboi left
[04:35] *** swaggboi joined
[05:28] *** abraxxa joined
[05:30] *** Sankalp left
[05:32] *** abraxxa left
[05:33] *** abraxxa joined
[05:33] *** Sankalp joined
[06:02] *** Sankalp left
[06:03] *** Sankalp joined
[06:06] *** reportable6 left
[06:07] *** reportable6 joined
[06:22] *** guifa joined
[06:22] <guifa> o/

[06:32] *** Sgeo left
[07:32] *** greppable6 left
[07:32] *** nativecallable6 left
[07:32] *** benchable6 left
[07:32] *** bloatable6 left
[07:32] *** sourceable6 left
[07:32] *** bisectable6 left
[07:32] *** committable6 left
[07:32] *** tellable6 left
[07:32] *** shareable6 left
[07:32] *** notable6 left
[07:32] *** reportable6 left
[07:32] *** statisfiable6 left
[07:32] *** unicodable6 left
[07:32] *** linkable6 left
[07:32] *** releasable6 left
[07:32] *** coverable6 left
[07:33] *** quotable6 left
[07:33] *** evalable6 left
[07:33] *** notable6 joined
[07:33] *** statisfiable6 joined
[07:33] *** greppable6 joined
[07:33] *** sourceable6 joined
[07:34] *** shareable6 joined
[07:34] *** coverable6 joined
[07:34] *** benchable6 joined
[07:34] *** reportable6 joined
[07:34] *** linkable6 joined
[07:34] *** bisectable6 joined
[07:35] *** quotable6 joined
[07:35] *** bloatable6 joined
[07:35] *** evalable6 joined
[07:35] *** tellable6 joined
[07:35] *** nativecallable6 joined
[07:35] *** committable6 joined
[07:35] *** unicodable6 joined
[07:35] *** releasable6 joined
[07:50] *** dakkar joined
[07:56] *** Woodi left
[07:56] *** Woodi joined
[07:59] *** DeSade joined
[07:59] *** DeSade left
[08:15] *** archenoth joined
[08:18] *** Oshawott left
[08:31] *** Kaiepi joined
[08:54] *** swaggboi left
[09:10] *** swaggboi joined
[09:32] *** swaggboi left
[09:42] *** avuserow left
[09:49] *** swaggboi joined
[10:39] *** perlbot left
[10:39] *** simcop2387 left
[10:41] *** perlbot joined
[10:42] *** simcop2387 joined
[10:53] *** frost left
[10:59] *** frost joined
[11:22] *** frost left
[11:41] *** frost joined
[11:42] *** better_sleeping[ joined
[11:47] *** ngt joined
[11:50] *** frost left
[12:06] *** reportable6 left
[12:08] *** reportable6 joined
[12:09] *** Xliff joined
[12:09] *** ngt left
[12:25] *** sena_kun left
[12:26] *** sena_kun joined
[12:49] *** morte_ joined
[12:55] <Xliff> \o

[12:56] <Xliff> Can the current implementation of macros be used like a sub?

[13:01] *** better_sleeping[ left
[13:01] <Xliff> I would like to make a set of need statements reusable. Is that possible with the current implementation?

[13:02] <Xliff> m: use MONKEY-SEE-NO-EVAL; use experimental :macros; macro hai { quasi { say "O, HAI" } }; hai

[13:02] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: «O, HAI␤»

[13:02] <Xliff> That works... but this doesn't...

[13:02] *** morte_ left
[13:02] <Xliff> use MONKEY-SEE-NO-EVAL; use experimental :macros; my $a = 42; macro a { quasi { $a } }; say a

[13:02] <evalable6> Xliff, rakudo-moar 6dc2f92c9: OUTPUT: «(Mu)␤»

[13:03] <Xliff> I would expect that second one to emit '42'. Can someone tell me what I am doing wrong?

[13:25] <jjatria> Xliff: I think the issue is that the value needs to be available at compile time

[13:25] <jjatria> m: use MONKEY-SEE-NO-EVAL; use experimental :macros; constant A = 42; macro a { quasi { A } }; say a

[13:25] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: «42␤»

[13:26] <jjatria> See the end of https://docs.raku.org/syntax/macros

[13:32] *** wcs joined
[13:33] <jjatria> m: use MONKEY-SEE-NO-EVAL; use experimental :macros; macro a($x) { quasi { {{{$x}}} } }; my $a = 42; say a $a

[13:33] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: «42␤»

[13:33] <jjatria> That also works

[13:36] *** morte_ joined
[13:37] <Xliff> Ah! Thank you both!

[13:38] <Xliff> Can macros be exported?

[13:38] <Xliff> m: package A { macro b is export { quasi { say 'HI!' }; }; };

[13:38] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Use of macros is experimental; please 'use experimental :macros'␤at <tmp>:1␤------> package A { macro⏏ b is export { quasi { say 'HI!' }; }; }␤»

[13:38] <Xliff> m: use experimental :macros; package A { macro b is export { quasi { say 'HI!' }; }; };

[13:38] <camelia> rakudo-moar 6dc2f92c9: ( no output )

[13:46] <Xliff> m: use experimental :macros; package A { macro b is export { quasi {need NativeCall  }; }; }; import A; b; CArray.^name.say

[13:46] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    CArray used at line 1. Did you mean 'array', 'Array'?␤␤»

[13:47] <Xliff> Hmmm.. -- Do I need to worry that the need call is lexicalized in the quasi block, when it should be lexicalized into the calling one?

[14:09] <dakkar> I fear that falls under "macros aren't fully implemented"

[14:09] <dakkar> I agree it should affect the caller

[14:15] *** morte_ left
[14:17] <Xliff> Ah well. I was hoping there was a way to make my life easier by putting repetitive code like need statements within  a macro.

[14:17] <Xliff> All in due time, I guess.

[14:18] *** Xliff left
[14:24] *** perlbot left
[14:24] *** simcop2387 left
[14:30] *** silug left
[14:31] <dakkar> m: use experimental :macros; package A { macro b is export { quasi {use NativeCall  }; }; }; import A; b; CArray.^name.say

[14:31] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    CArray used at line 1. Did you mean 'array', 'Array'?␤␤»

[14:31] <dakkar> ok, the problem wasn't that `need` doesn't import symbols

[14:33] *** silug joined
[14:39] <dakkar> Xliff: https://github.com/LLFourn/p6-CompUnit-Util#re-exporting may help make your life easier

[14:39] <tellable6> dakkar, I'll pass your message to Xliff

[14:43] *** simcop2387 joined
[14:44] *** perlbot joined
[14:59] <jjatria> Looking more into SameSite, I don't think that can be done without access to the public suffix list, which we don't seem to have at the moment in Raku

[15:00] <jjatria> And I guess in that case, the hardest thing would be to make it so that it doesn't go stale (since the list is updated several times a week)

[15:01] <jjatria> I did see a Rust library that checked for updates every day and auto-minted a release, but I don't think we have any prior art for that sort of thing in zef

[15:16] *** Sgeo joined
[15:24] *** morte_ joined
[16:00] *** eseyman left
[16:26] *** Altai-man joined
[16:30] *** sena_kun left
[16:37] *** dakkar left
[17:04] *** swaggboi left
[17:12] *** MoC joined
[17:22] *** swaggboi joined
[17:32] *** Util joined
[17:32] *** abraxxa left
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[18:34] *** MoC left
[18:47] *** morte_ left
[18:49] *** abraxxa-home joined
[19:05] * lizmat clickbaits https://rakudoweekly.blog/2022/07/04/2022-27-more-videos/

[19:29] <coleman> Bruce's intro to Raku is helpful for me

[19:30] <lizmat> good to hear!

[19:31] *** andm joined
[19:35] <Geth> ¦ planet.raku.org: 062b21a056 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | perlanetrc

[19:35] <Geth> ¦ planet.raku.org: perl6.party appears to have been reset

[19:35] <Geth> ¦ planet.raku.org: review: https://github.com/Raku/planet.raku.org/commit/062b21a056

[19:55] *** Sankalp left
[20:16] *** Kaiepi left
[20:18] *** Kaiepi joined
[20:34] *** markmarkmark left
[20:35] <El_Che> A

[20:35] *** markmarkmark joined
[20:38] *** wcs left
[20:39] *** markmarkmark left
[20:47] *** markmarkmark joined
[21:16] *** andm left
[21:29] *** swaggboi left
[21:39] <guifa> m: grammar A { token TOP { <b: 1> }; multi token b:x ($c) { $c }; multi token b:y ($c) { $c$c }; }; A.parse('1').say

[21:39] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: «No such method 'b' for invocant of type 'A'.  Did you mean 'wb'?␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:39] <guifa> This feels...not right

[21:39] <guifa> if you remove the signature, and replace $c with a . , things are called properly as you'd expect

[21:42] <guifa> basically, you can do multi with signatures, or no-multi with signatures, but not multi with signatures

[21:46] *** swaggboi joined
[22:01] *** discord-raku-bot left
[22:02] *** discord-raku-bot joined
[22:19] <uzl[m]> lizmat++ for the weekly. Informative as always!

[22:25] *** Altai-man left
[22:25] *** abraxxa-home left
[23:25] *** greppable6 left
[23:25] *** statisfiable6 left
[23:25] *** benchable6 left
[23:25] *** nativecallable6 left
[23:25] *** linkable6 left
[23:25] *** notable6 left
[23:25] *** bisectable6 left
[23:25] *** evalable6 left
[23:25] *** coverable6 left
[23:25] *** releasable6 left
[23:25] *** sourceable6 left
[23:25] *** unicodable6 left
[23:25] *** reportable6 left
[23:25] *** committable6 left
[23:25] *** quotable6 left
[23:25] *** tellable6 left
[23:25] *** shareable6 left
[23:25] *** bloatable6 left
[23:25] *** releasable6 joined
[23:25] *** evalable6 joined
[23:26] *** bisectable6 joined
[23:26] *** shareable6 joined
[23:26] *** sourceable6 joined
[23:27] *** tellable6 joined
[23:27] *** linkable6 joined
[23:27] *** nativecallable6 joined
[23:27] *** committable6 joined
[23:27] *** greppable6 joined
[23:27] *** coverable6 joined
[23:28] *** statisfiable6 joined
[23:28] *** notable6 joined
[23:28] *** unicodable6 joined
[23:28] *** quotable6 joined
[23:28] *** reportable6 joined
[23:28] *** benchable6 joined
[23:28] *** bloatable6 joined
[23:37] *** discord-raku-bot left
[23:38] *** discord-raku-bot joined
