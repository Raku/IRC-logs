[00:07] *** jaguart left
[00:08] *** jaguart joined
[00:08] *** reportable6 left
[00:09] *** reportable6 joined
[00:20] *** Nemokosch left
[00:48] *** Kaiepi left
[00:50] *** deoac joined
[01:31] *** simcop2387 left
[01:32] *** perlbot left
[01:42] *** perlbot joined
[01:55] *** simcop2387 joined
[02:05] *** deoac left
[02:26] *** frost75 joined
[02:32] *** Kaiepi joined
[02:55] *** donpdonp- left
[03:09] *** donpdonp joined
[03:17] *** clarjon1 left
[03:36] *** Kaiepi left
[04:05] *** frost75 left
[04:35] *** Kaiepi joined
[04:59] *** cm_ joined
[05:00] *** cm left
[05:00] *** cm_ is now known as cm

[06:00] *** evalable6 left
[06:00] *** notable6 left
[06:00] *** benchable6 left
[06:00] *** squashable6 left
[06:00] *** sourceable6 left
[06:00] *** releasable6 left
[06:00] *** greppable6 left
[06:00] *** coverable6 left
[06:00] *** unicodable6 left
[06:00] *** statisfiable6 left
[06:00] *** linkable6 left
[06:00] *** reportable6 left
[06:00] *** tellable6 left
[06:00] *** committable6 left
[06:00] *** nativecallable6 left
[06:00] *** quotable6 left
[06:00] *** bloatable6 left
[06:00] *** bisectable6 left
[06:00] *** shareable6 left
[06:00] *** unicodable6 joined
[06:00] *** notable6 joined
[06:00] *** bisectable6 joined
[06:00] *** coverable6 joined
[06:00] *** quotable6 joined
[06:01] *** sourceable6 joined
[06:01] *** evalable6 joined
[06:01] *** linkable6 joined
[06:01] *** committable6 joined
[06:01] *** statisfiable6 joined
[06:01] *** benchable6 joined
[06:01] *** releasable6 joined
[06:02] *** tellable6 joined
[06:02] *** squashable6 joined
[06:02] *** reportable6 joined
[06:02] *** nativecallable6 joined
[06:02] *** greppable6 joined
[06:02] *** bloatable6 joined
[06:02] *** shareable6 joined
[06:33] *** derpydoo joined
[07:09] *** Kaiepi left
[07:16] *** jjido joined
[07:20] *** Kaiepi joined
[07:33] *** epony joined
[07:36] *** derpydoo left
[07:45] *** jjido left
[08:00] *** derpydoo joined
[08:34] *** Sgeo_ left
[08:40] *** jjido joined
[08:49] *** linkable6 left
[08:50] *** linkable6 joined
[09:37] *** epony left
[09:38] *** jjido left
[09:39] *** epony joined
[09:40] *** epony left
[09:43] *** epony joined
[09:43] *** jjido joined
[10:06] *** tim1 joined
[10:15] *** tim1 left
[10:30] *** frost14 joined
[11:30] *** linkable6 left
[11:30] *** benchable6 left
[11:30] *** statisfiable6 left
[11:30] *** coverable6 left
[11:30] *** quotable6 left
[11:30] *** tellable6 left
[11:30] *** bisectable6 left
[11:30] *** greppable6 left
[11:30] *** reportable6 left
[11:30] *** sourceable6 left
[11:30] *** committable6 left
[11:30] *** bloatable6 left
[11:30] *** notable6 left
[11:30] *** unicodable6 left
[11:30] *** releasable6 left
[11:30] *** squashable6 left
[11:30] *** nativecallable6 left
[11:30] *** evalable6 left
[11:30] *** shareable6 left
[11:31] *** tellable6 joined
[11:31] *** linkable6 joined
[11:31] *** shareable6 joined
[11:31] *** bisectable6 joined
[11:31] *** committable6 joined
[11:31] *** squashable6 joined
[11:31] *** evalable6 joined
[11:31] *** notable6 joined
[11:32] *** releasable6 joined
[11:32] *** reportable6 joined
[11:32] *** greppable6 joined
[11:32] *** nativecallable6 joined
[11:32] *** bloatable6 joined
[11:32] *** benchable6 joined
[11:33] *** unicodable6 joined
[11:33] *** quotable6 joined
[11:33] *** sourceable6 joined
[11:33] *** statisfiable6 joined
[11:33] *** coverable6 joined
[11:41] <discord-raku-bot> <Nemokosch> the final nail in the coffin of the "worry" message of smartmatching to S/// has arrived:

[11:42] *** Nemokosch joined
[11:42] *** epony left
[11:43] <Nemokosch> m: no worries; '1' ~~ S/1/2/; say $/;

[11:43] <camelia> rakudo-moar a98f1cabe: OUTPUT: «｢1｣␤»

[11:44] *** epony joined
[11:44] <Nemokosch> it even sets the match variable so all reasoning that applies to $foo ~~ /regex/ applies to $foo ~~ S/regex/new/ as well

[11:49] <lizmat> m: no worries; say '1' ~~ S/1/2/; say $/;

[11:49] <camelia> rakudo-moar a98f1cabe: OUTPUT: «2␤｢1｣␤»

[11:49] <Nemokosch> Since the imo undesirable behavior is noted on the docs site as well, I will open a problem-solving issue for this

[11:50] <lizmat> sounds like a plan

[11:51] <Nemokosch> Fortunately this is an extended weekend until wednesday and I want to start with my pending $dayjob duties (plus a little Ddt :speak-no-evil: ) so maybe it won't happen until monday or tuesday

[11:52] <lizmat> and on Sunday, the day will be 25 hours!  :-)

[11:52] <Nemokosch> But I took notes in Obsidian

[11:52] <Nemokosch> Oh you are right, that will probably turn into sleep :D

[11:54] *** Nemokosch left
[12:01] *** lizmat_ joined
[12:02] *** Geth left
[12:02] *** Geth joined
[12:04] <discord-raku-bot> <Nemokosch> Hm, I have a question because this might be hard to figure out out the hard way

[12:05] *** lizmat left
[12:05] *** frost14 left
[12:06] <discord-raku-bot> <Nemokosch> I have a role that provides some multi candidates for new

[12:06] <discord-raku-bot> <Nemokosch> This role, to be precise: https://github.com/kalkin/License-Software/blob/master/lib/License/Software/Abstract.pm6

[12:06] *** lizmat_ left
[12:06] <discord-raku-bot> <Nemokosch> I want to write a class that does this role, and has some properties that I'd like to take from new

[12:06] *** lizmat joined
[12:06] *** Geth left
[12:06] *** Geth joined
[12:07] <lizmat> you'd probably want to stick a proto in there

[12:07] *** reportable6 left
[12:08] <discord-raku-bot> <Nemokosch> will a new candidate be generated, and if so, how? if not, how can I handle my properties and then pass the handling to the inherited new?

[12:08] <discord-raku-bot> <Nemokosch> yes, well, in the long term, it would be good to adopt License::Software as well, but for now I'd like to get around its interface from Ddt

[12:10] *** reportable6 joined
[12:39] <discord-raku-bot> <Nemokosch> I've started playing around and it seems to me I do get a new candidate that can only fill the properties but doesn't really pass anything to the inherited method

[12:52] *** Abhoerschutz left
[12:52] *** Abhoerschutz joined
[13:15] *** tiziodcaio joined
[13:22] *** abraxxa-home joined
[13:25] *** abraxxa-home left
[13:46] *** epony left
[13:48] *** epony joined
[13:59] <discord-raku-bot> <Nemokosch> can I somehow say "call the inherited new method"?

[14:16] *** Nemokosch joined
[14:16] <Nemokosch> Best Raku error message delivered yet is coming, pay attention

[14:16] <Nemokosch> m: sub demo(|c, :$name) { say c; say $name; }; demo(1);

[14:16] <camelia> rakudo-moar a98f1cabe: OUTPUT: «Too many positionals passed to 'demo'; expected 1 argument but got 1␤  in sub demo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:17] <Nemokosch> expected 1 but got 1... oh well

[14:19] <Nemokosch> The lie lies (haha) in the "expected 1 argument" part

[14:19] <Nemokosch> It actually expects 0 positional arguments. I don't know how all this works, honestly. I just wanted to capture one of the named arguments, called "name"

[14:28] <Nemokosch> oh it works in reverse order

[14:28] <Nemokosch> still, the error message (and possibly the behavior?) is very much LTA...

[14:50] *** tiziodcaio left
[14:54] <Nemokosch> How can I git rid of the default constructor?

[14:54] *** tiziodcaio joined
[14:54] <Nemokosch> m: class Demo { method new(:$name!) { say $name; } }

[14:54] <camelia> rakudo-moar a98f1cabe: ( no output )

[14:54] *** ecocode left
[14:55] <Nemokosch> maybe another REPL weirdness...

[14:56] *** ecocode joined
[15:27] *** epony left
[15:28] *** epony joined
[15:30] <lizmat> m: sub demo(:$name, |c) { say c; say $name; }; demo(1);

[15:30] <camelia> rakudo-moar a98f1cabe: OUTPUT: «\(1)␤(Any)␤»

[15:31] <lizmat> I think it should actually complain about having a named argument *after* a |c

[15:31] <lizmat> at compile time

[15:41] <Nemokosch> Fine by me, I don't really know how it should work

[15:41] <Nemokosch> however, the default constructor is getting on my nerves

[15:42] <Nemokosch> is there really no way to get rid of it if I'm overriding the shown multi-only role?

[15:50] <Nemokosch> > Default constructor for 'Ddt::License' only takes named arguments

[15:50] <Nemokosch> I don't want to have any default constructors :@

[15:50] <Nemokosch> I didn't ask for this

[15:51] *** epony left
[15:51] <lizmat> make an "only method new"

[15:52] <lizmat> give a class its own proto method new 

[15:52] *** epony joined
[15:52] <Nemokosch> with only, it doesn't complain because I inherit from that role with the multis

[15:53] <Nemokosch> At least that's how I understood the error

[15:53] <Nemokosch> With proto, it did the same thing as with multi - still complained about "the default method" wanting to do something

[15:56] <lizmat> ok, do we have a gist somewhere ?

[15:56] <Nemokosch> moment

[15:59] <Nemokosch> https://gist.github.com/2colours/b6f52cc16366ef9dccfd4b36917608b9

[15:59] <Nemokosch> you can try for yourself I think, with little modifications

[15:59] <Nemokosch> the only version throws a compile-time error, by the way

[16:02] <lizmat> yeah, looking at it now

[16:06] <lizmat> so what has the Ddt::License module need to do extra?

[16:08] <lizmat> Nemokosch: looks like

[16:08] <lizmat> multi method new(Ddt::License:) {...}

[16:08] <lizmat> works?

[16:10] <Nemokosch> moment, I need time to integrate the knowledge :DD

[16:13] <Nemokosch> By the way, don't overestimate my knowledge with Raku OO because it's nearly zero

[16:14] <lizmat> ok...

[16:15] <lizmat> so by adding Ddt::License: to the signature, you're saying that this multi candidate will be called whenever it is called as a class or instance method on the Ddt::License class

[16:16] <Nemokosch> No, it didn't help, by the way

[16:16] <Nemokosch> > Default constructor for 'Ddt::License' only takes named arguments

[16:16] <lizmat> you could add :U for class method only, or :D for instance method

[16:16] <lizmat> the gist doesn't contain a call to the class: how do you call it ?

[16:17] <Nemokosch> Hmm, this is a reasonable question actually... do I in fact overestimate how many ways there are to call the underlying method, I wonder

[16:17] <Nemokosch> Ddt::License.new: 'sajt' # does work, for example

[16:18] <Nemokosch> Ddt::License.new: 'sajt', 'víz' # produces this bizarre error but the fact that it's an error is probably fair

[16:19] <lizmat> yeah, if your candidate fails to match, then it falls back to the one provided by Any, and that one will complain

[16:20] <Nemokosch> now I'm going to try to add the named argument to the Ddt::License new

[16:20] <lizmat> make sure the |c is the last one

[16:20] <Nemokosch> Oh right

[16:21] <Nemokosch> Almost forgot

[16:22] <Nemokosch> So yeah, in simple terms, my goal is to handle this one named argument separately while the rest is just provided to the underlying License::Software::Abstract method

[16:27] <lizmat> multi method new(Ddt::License: :$foo, |c) {

[16:28] <lizmat> my $base-constructed = self.bless(|c);

[16:29] <Nemokosch> What does specifying Ddt::License: serve here?

[16:30] <lizmat> [18:15:50]  <lizmat>	so by adding Ddt::License: to the signature, you're saying that this multi candidate will be called whenever it is called as a class or instance method on the Ddt::License class

[16:36] <Nemokosch> Oh right, I was busy checking the behavior at that moment

[16:36] <Nemokosch> but it did not help unfortunately, still

[16:37] <Nemokosch> Ddt::License.new: name => 'GO' # Stub code executed

[16:37] <Nemokosch> despite the `multi  method new(:$name!, |) {` candidate

[16:37] <Nemokosch> do I need Ddt::License: there as well?

[16:37] <lizmat> i'd say so ?

[16:38] <lizmat> hmmm

[16:38] <Nemokosch> I still don't fully grasp the relevance of that. I define the candidates in that class, it shouldn't get mixed with the underlying role.

[16:38] <Nemokosch> And I have no derived classes, nor do I plan to

[16:38] <Nemokosch> it could be a "final class"

[16:39] <lizmat> then add a:proto method new(|) {*}

[16:39] <lizmat> then add a

[16:39] <lizmat> proto method new(|) {*}

[16:40] <lizmat> to Ddt::License

[16:40] <Nemokosch> instead of the stub?

[16:40] <lizmat> do you understand the function of proto ?

[16:40] <lizmat> https://docs.raku.org/syntax/proto

[16:41] <Nemokosch> I wouldn't have asked if I didn't at least think I understood proto :)

[16:41] <Nemokosch> And based on my understanding, I would have expected the "default constructor" to go away by the sole presence of a proto

[16:43] <Nemokosch> To be honest, it's more that I feel the language is gaslighting me with the apparent lack of consistency

[16:43] <lizmat> it does go away with a proto

[16:43] <lizmat> dinner&

[16:44] <Nemokosch> That's what I thought until an error message disproved me...

[16:46] <Nemokosch> By the way, thanks for all the help, I don't want to appear thankless to the effort you are putting into helping me

[16:48] <Nemokosch> However, all this code got us nowhere. The behavior is exactly the same as without any overloading of new

[16:49] <Nemokosch> That is, either the positional is in effect, or :$name, but not both

[16:52] *** linkable6 left
[16:52] *** evalable6 left
[16:53] *** linkable6 joined
[16:53] *** evalable6 joined
[16:56] <Nemokosch> > proto  method new(Ddt::License: :$name!, |c) {

[16:56] <Nemokosch> Ddt::License.new: name => 'FASZ', 'LOL'

[16:56] <Nemokosch> > Default constructor for 'Ddt::License' only takes named arguments

[16:56] <Nemokosch> Enough of the lies :@

[17:08] <Nemokosch> my problem, to be honest, is that I don't want to use the usual multi dispatch mechanism. I want to call the inherited method with the same arguments. That's a different thing.

[17:15] *** Sgeo joined
[17:24] <lizmat> Nemokosch: I don't think you understand what proto is about

[17:26] <Voldenet> honestly, inheritance is not that useful if you control base class

[17:26] <Nemokosch> To be honest, I reached the point where I just want a solution.

[17:27] <Voldenet> just use role and compose it into the class

[17:27] <lizmat> you want an extra named argument to the License::Software::Abstract role

[17:27] <lizmat> Nemokosch: is that what you want ?

[17:27] <Nemokosch> not necessarily extra

[17:28] <lizmat> make up das mind  :-)

[17:28] <Nemokosch> I just want it to be handled in a special way; it can still be passed to the base class

[17:28] <Nemokosch> I think it makes more sense if it gets passed through

[17:29] <lizmat> ok, please provide a piece of (pseudo) code with input / requested output

[17:31] <Nemokosch> > Ddt::License.new: 'ASD' # Ddt::License.new(name => Str, works-name => "This program", holders => [License::Software::Holder.new(name => "ASD", year => 2022)])

[17:31] <Nemokosch> > Ddt::License.new: name => 'Proprietary' # Ddt::License.new(name => "Proprietary", works-name => "This program", holders => [])

[17:32] <Nemokosch> Ddt::License.new: 'ASD', name => 'Proprietary' # Ddt::License.new(name => 'Proprietary', works-name => "This program", holders => [License::Software::Holder.new(name => "ASD", year => 2022)])

[17:32] <Nemokosch> the first two I get for free

[17:32] <Nemokosch> I want the third one to also work, without hardcoding the whole interface of License::Software

[17:33] *** derpydoo left
[17:33] *** notna joined
[17:35] <Nemokosch> This would be painfully simple with a super/inherited/License::Software::method call

[17:35] <Nemokosch> That's really all it would take. "Handle this one as the concrete class needs, pass all the arguments to the inherited method"

[17:46] <lizmat> so the first positional is the name, but only if :name is not specified?

[17:47] <lizmat> in that case, what is the meaning of the first positional then ?

[17:51] <Nemokosch> The order of the parameters is not a constrain; the user (so mostly me) will use them in the prescribed order

[17:52] <Nemokosch> The important thing is that I pick the existing interface of License::Software and handle one (otherwise irrelevant) part of it (:$name) specifically in the implementing class

[17:53] <Nemokosch> For the rest, it should behave all accordingly to the inherited new methods

[17:54] <lizmat> multi method new(Ddt::License: :$name, |c) {

[17:54] <lizmat> self.bless(:name($name.uc), |c);

[17:55] <lizmat> uc-ing the name to prove it was changed

[17:55] <Nemokosch> so does bless automagically call the inherited new?

[17:56] *** epony left
[17:56] <lizmat> no, the inherited new calls bless under the hood normally

[17:57] *** epony joined
[17:57] <lizmat> you're bypassing that by calling bless yourself

[17:57] <lizmat> https://docs.raku.org/routine/bless

[17:57] <Nemokosch> yes but then how do I make sure all other arguments are handled the way License::Software handles them?

[17:57] <Nemokosch> that's why I was trying to call its new

[17:57] <lizmat> you don't need to, bless will take care of that

[17:58] <Nemokosch> You have seen the new methods of License::Software, right? Just to make sure, because I'm really not sure we are on a common ground.

[18:01] <lizmat> ah, ok  :-) sorry

[18:03] <lizmat> ok, get rid of the "method new" altogether, and add:

[18:03] <lizmat> submethod TWEAK(:$name) { $!name = $name }

[18:04] <lizmat> submethod TWEAK(:$name) { $!name = $name.uc }   # uc to prove it changed

[18:05] <Nemokosch> ohhh

[18:06] *** reportable6 left
[18:08] *** reportable6 joined
[18:08] <Nemokosch> I have to try this before saying anything that's for sure

[18:09] <Nemokosch> Ddt::License.new: 'ASD', name => 'LMAO' # Type check failed in assignment to $!name; expected Str but got Any (Any)

[18:13] <lizmat> confirmed... looking into it

[18:14] *** Guest376 joined
[18:25] <lizmat>     method !set-name($!name) { self }

[18:25] <lizmat>     multi method new(Ddt::License: Str:D $foo, :$name!) {

[18:25] <lizmat>         self.new($foo, |%_)!set-name($name)

[18:25] <lizmat>     }

[18:25] <lizmat>     multi method new(Ddt::License: :$name!) {

[18:25] <lizmat>         self.new(|%_)!set-name($name)

[18:25] <lizmat>     }

[18:26] <lizmat> you will need 2 candidates

[18:26] <lizmat> and a private method to set $!name

[18:29] *** notna left
[18:32] <Nemokosch> How does this not break the interface of License::Software? :(

[18:33] <Nemokosch> I mean, I agree that this is very unfortunate design but new is a part of the API of License::Software

[18:37] *** xinming left
[18:37] *** xinming joined
[18:46] <Voldenet> actually, if you ignore conventions, you can do that quite easily

[18:46] <Voldenet> http://ix.io/4eps

[18:47] <Voldenet> or even http://ix.io/4ept

[18:56] <Nemokosch> I only noticed now how weird that "submethod url..." is. Whatever, checking your code...

[18:57] <Voldenet> discarding .new is a leap of faith here

[18:58] <Nemokosch> I mean yeah... I don't consider this a solution. If it's a part of the API then it shouldn't be replaced by a method with a different name

[18:59] <Voldenet> it stops being the part of this api once the inheriting class doesn't even know all constructors

[19:01] <Voldenet> meaning that what specifies Ddt::License's behaviour is the version of the imported role

[19:02] <Nemokosch> I mean yeah, same with any extension to any API

[19:02] <Voldenet> So, imo you either have to maintain all the constructors you use (I recommend that, btw) or create a separate creation method

[19:03] <Voldenet> if License::Software::Abstract gets a :name parameter in its api bad things might happen

[19:03] <Nemokosch> You know, the bad thing is that License::Software::Abstract doesn't even get *maintenance*

[19:03] <Voldenet> Probably :)

[19:05] <Nemokosch> Perhaps you don't know the context. I'm planning to create an update for the Ddt module so that I can claim maintenance of that module.

[19:05] <Nemokosch> The same author created License::Software but I didn't want the burden to start things over for that module as well.

[19:06] <Nemokosch> As something that seemed useful to me personally, I wanted to allow licenses that are really just a name and minimal description; that's enough for internal modules at work.

[19:06] <Voldenet> …ah, that's why the requirement of keeping the api

[19:07] <Nemokosch> that's why I created the Ddt::License class which is really a dummy implementation of the role provided by the license module

[19:07] <Nemokosch> so that at other places in Ddt, I can say "if identification of the license failed, fall back to this dummy"

[19:08] *** jjido left
[19:08] <Nemokosch> unfortunately, an integral part of the License::Software API revolves around type objects and constructors

[19:09] <Nemokosch> so I wanted to make Ddt::License as much "drop-in" as possible

[19:09] <Nemokosch> and the truth is, if Raku had proper inherited (Pascal), super (Java, Javascript, Python) or scope-based module resolution (C++), this would be trivial

[19:09] <Voldenet> in that case adding new `new` constructors for every case feels like the sanest solution

[19:10] <Nemokosch> s/module/method

[19:10] <Nemokosch> and perhaps s/scope/namespace

[19:11] <Voldenet> Actually in java you'd have to always write down constructors for every case

[19:11] <Voldenet> in inherited class

[19:11] <Nemokosch> if you cannot pass the same arguments without naming them, sure

[19:12] <Nemokosch> but that's actually not the issue for Raku

[19:12] <Nemokosch> the issue is that I don't seem to be able to just say "call the inherited method"

[19:12] <Nemokosch> multi candidates are not even conceptually similar to inheritance

[19:13] <Nemokosch> my final shot is to mess around with MOP, I just cannot accept that something like this can fail on arguably the easiest step

[19:14] <Nemokosch> not the argument list, not the object construction but the lookup of inherited methods

[19:18] *** Guest376 left
[19:28] <Voldenet> Nemokosch: true Enterprise Java Coder would just create something like this (except with more `new` methods, obviously) http://ix.io/4epH

[19:29] <Voldenet> hmm, true java coder would've put $.name before the new

[19:32] <lizmat> sorry, was in a meeting

[19:33] <lizmat> why does my solution break the API ?

[19:34] <Voldenet> …it doesn't, because Ddt::License defines its own new api and it can define any candidates for `new`

[19:35] <Voldenet> btw, in ` multi method new(Ddt::License: Str:D $foo, :$name!) {`, is it really necessary to have the `Ddt::License`?

[19:36] <Voldenet> `Ddt::License.^find_method('new').candidates.map(*.signature).say;` tells me that signatures define that either way when composing the role into the class

[19:37] *** djerius left
[19:39] *** djerius joined
[19:42] *** archenoth left
[19:44] *** djerius left
[19:45] *** djerius joined
[19:53] *** djerius left
[19:53] *** djerius joined
[19:58] *** jjido joined
[20:00] *** epony left
[20:01] *** epony joined
[20:13] *** archenoth joined
[20:18] <discord-raku-bot> <Nemokosch> That's what I also asked

[20:19] <discord-raku-bot> <Nemokosch> lizmat: oh sorry, perhaps I misread

[20:20] <discord-raku-bot> <Nemokosch> I was also trying to play with MOP, ^.roles and all...

[20:43] *** archenoth left
[20:43] *** archenoth joined
[21:08] *** djerius left
[21:09] *** djerius joined
[21:09] *** derpydoo joined
[21:10] *** Kaiepi left
[21:13] *** Xliff joined
[21:15] <Xliff> japhb: Around?

[21:15] <tellable6> hey Xliff, you have a message: https://gist.github.com/38ffce85fa6bfd0cc615266e72549693

[21:16] <Xliff> .tell japhb Would like your help on something. What's the best way to redirect $*OUT to a Terminal::Widget window? I haven't had a chance to look at the examples yet. I thought I'd ask you for quick help first. TIA.

[21:16] <tellable6> Xliff, I'll pass your message to japhb

[21:17] <Xliff> .tell japhb OK, thanks. Was just wondering what the proper interface to the decoded-output was in Terminal::ANSIParser. I'll take another gander and look more closely. Thanks.

[21:17] <tellable6> Xliff, I'll pass your message to japhb

[21:27] *** archenoth left
[21:28] *** archenoth joined
[21:31] <Nemokosch> uh oh, now I remember what I didn't like about lizmat's solution

[21:31] <Nemokosch> the hardcoding of the positional ($foo in the snippet)

[21:34] <Nemokosch> I think it might be sufficient because Ddt::License isn't supposed to be really public, and inside Ddt, I know which License::Software.new call I will be making

[21:39] <Nemokosch> lizmat: It does work, thank you. I wish there was a straightforward and elegant way but the underlying ad-hoc interface also didn't help to make it nice and clean.

[21:52] <japhb> .

[21:52] <tellable6> 2022-10-29T21:16:17Z #raku <Xliff> japhb Would like your help on something. What's the best way to redirect $*OUT to a Terminal::Widget window? I haven't had a chance to look at the examples yet. I thought I'd ask you for quick help first. TIA.

[21:52] <tellable6> 2022-10-29T21:17:15Z #raku <Xliff> japhb OK, thanks. Was just wondering what the proper interface to the decoded-output was in Terminal::ANSIParser. I'll take another gander and look more closely. Thanks.

[21:52] <japhb> Xliff: Around now.  Still need help?

[21:54] *** jjido left
[22:04] *** epony left
[22:05] *** epony joined
[22:20] <Geth> ¦ Raku-Steering-Council/main: 1fc4e21cd5 | (Nick Logan)++ (committed using GitHub Web editor) | minutes/20221029.md

[22:20] <Geth> ¦ Raku-Steering-Council/main: Add RSC meeting minutes for 2022-10-29

[22:20] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/1fc4e21cd5

[22:28] *** derpydoo left
[22:34] *** Kaiepi joined
[23:34] *** notable6 left
[23:34] *** bloatable6 left
[23:34] *** unicodable6 left
[23:34] *** coverable6 left
[23:34] *** releasable6 left
[23:34] *** quotable6 left
[23:34] *** statisfiable6 left
[23:34] *** evalable6 left
[23:34] *** squashable6 left
[23:34] *** linkable6 left
[23:34] *** committable6 left
[23:34] *** greppable6 left
[23:34] *** sourceable6 left
[23:34] *** nativecallable6 left
[23:34] *** benchable6 left
[23:34] *** bisectable6 left
[23:34] *** reportable6 left
[23:34] *** tellable6 left
[23:34] *** shareable6 left
[23:35] *** linkable6 joined
[23:35] *** tellable6 joined
[23:35] *** reportable6 joined
[23:35] *** releasable6 joined
[23:35] *** nativecallable6 joined
[23:35] *** statisfiable6 joined
[23:35] *** bloatable6 joined
[23:35] *** squashable6 joined
[23:36] *** quotable6 joined
[23:36] *** benchable6 joined
[23:36] *** coverable6 joined
[23:36] *** committable6 joined
[23:36] *** notable6 joined
[23:36] *** bisectable6 joined
[23:36] *** greppable6 joined
[23:37] *** evalable6 joined
[23:37] *** sourceable6 joined
[23:37] *** unicodable6 joined
[23:37] *** shareable6 joined
[23:44] <Xliff> .

[23:45] <Xliff> japhb: Wasn't then. Am now.

[23:49] <japhb> Heh

