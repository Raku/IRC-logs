[00:08] *** reportable6 left
[00:08] *** reportable6 joined
[00:19] <Voldenet> Bscan: cool vscode support, as an improvement consider using nqp::getcomp('Raku').compile for massive performance boost and some additional checks

[00:39] *** frost joined
[00:51] <discord-raku-bot> <Bscanüç∫#6614> Thanks voldenet! I'll take a look at getcomp. Additional checks (or symbol information) would certainly be nice.  The Perl Navigator has Perl::Critic and inspects the symbol table for various features, so I'm certainly looking for additional sources of information for the Raku version.

[01:39] *** linkable6 left
[01:39] *** evalable6 left
[01:42] *** evalable6 joined
[01:42] *** linkable6 joined
[01:46] *** melezhik joined
[01:47] <melezhik> .tell patrickb sparkyci did see your new commits in DevelExecRunerGenerator, I restarted the daemon and new build succeded - http://sparrowhub.io:2222/report/346 , I am working on SparkyCI stability ...

[01:47] <tellable6> melezhik, I'll pass your message to patrickb

[01:48] <melezhik> .tell SmokeMachine - thanks! I will think about badges , first I want to make SparkyCI works stable ... but yeah I agree badges would be convenient ...

[01:48] <tellable6> melezhik, I'll pass your message to SmokeMachine

[01:51] *** kjp left
[01:56] *** hythm left
[01:58] *** kjp joined
[02:25] *** melezhik left
[03:25] *** statisfiable6 left
[03:25] *** releasable6 left
[03:25] *** nativecallable6 left
[03:25] *** tellable6 left
[03:25] *** sourceable6 left
[03:25] *** greppable6 left
[03:25] *** shareable6 left
[03:25] *** linkable6 left
[03:25] *** bisectable6 left
[03:25] *** committable6 left
[03:25] *** notable6 left
[03:25] *** coverable6 left
[03:25] *** unicodable6 left
[03:25] *** reportable6 left
[03:25] *** evalable6 left
[03:25] *** quotable6 left
[03:25] *** benchable6 left
[03:25] *** bloatable6 left
[03:26] *** unicodable6 joined
[03:26] *** bisectable6 joined
[03:26] *** sourceable6 joined
[03:26] *** releasable6 joined
[03:26] *** committable6 joined
[03:26] *** Guest35 left
[03:27] *** evalable6 joined
[03:27] *** linkable6 joined
[03:27] *** greppable6 joined
[03:27] *** shareable6 joined
[03:27] *** coverable6 joined
[03:27] *** tellable6 joined
[03:27] *** notable6 joined
[03:27] *** benchable6 joined
[03:28] *** nativecallable6 joined
[03:28] *** reportable6 joined
[03:28] *** quotable6 joined
[03:28] *** bloatable6 joined
[03:28] *** statisfiable6 joined
[03:37] *** frost left
[04:08] *** defaultxr left
[04:25] *** BinGOs left
[04:25] *** Altreus left
[04:25] *** bingos joined
[04:25] *** Altreus joined
[04:28] *** zostay left
[04:28] *** Matthew|m left
[04:28] *** maettu left
[04:28] *** dpk left
[04:28] *** JRaspass left
[04:28] *** maettu joined
[04:28] *** dpk joined
[04:28] *** zostay joined
[04:28] *** JRaspass joined
[04:31] *** Matthew|m joined
[04:41] *** Altai-man joined
[04:44] *** sena_kun left
[05:44] *** tellable6 left
[05:44] *** quotable6 left
[05:44] *** releasable6 left
[05:44] *** greppable6 left
[05:44] *** evalable6 left
[05:44] *** nativecallable6 left
[05:44] *** shareable6 left
[05:44] *** notable6 left
[05:44] *** statisfiable6 left
[05:44] *** reportable6 left
[05:44] *** bisectable6 left
[05:44] *** bloatable6 left
[05:44] *** unicodable6 left
[05:44] *** sourceable6 left
[05:44] *** committable6 left
[05:44] *** coverable6 left
[05:44] *** linkable6 left
[05:44] *** benchable6 left
[05:44] *** quotable6 joined
[05:44] *** releasable6 joined
[05:44] *** bisectable6 joined
[05:45] *** unicodable6 joined
[05:45] *** bloatable6 joined
[05:45] *** tellable6 joined
[05:45] *** sourceable6 joined
[05:45] *** shareable6 joined
[05:46] *** greppable6 joined
[05:46] *** benchable6 joined
[05:46] *** evalable6 joined
[05:46] *** reportable6 joined
[05:46] *** nativecallable6 joined
[05:46] *** statisfiable6 joined
[05:46] *** committable6 joined
[05:46] *** coverable6 joined
[05:46] *** linkable6 joined
[05:47] *** notable6 joined
[06:08] *** reportable6 left
[06:10] *** reportable6 joined
[06:27] *** lichtkind joined
[06:39] *** abraxxa joined
[06:44] *** abraxxa left
[06:59] *** JRaspass left
[06:59] *** JRaspass joined
[06:59] *** abraxxa joined
[07:30] *** Sgeo left
[08:15] <discord-raku-bot> <Nemokosch#9980> > <Voldenet> m: my @sth = <this>; given @sth { $_ = "this won't work" }; say @sth

[08:15] <discord-raku-bot> <Nemokosch#9980> well, why does this not work?

[08:16] <discord-raku-bot> <Nemokosch#9980> and what does this have to do with "immutable values" anyway

[08:16] *** m_athias left
[08:16] *** nine left
[08:17] *** nine joined
[08:17] *** m_athias joined
[08:19] <MasterDuke> weekly: https://marketplace.visualstudio.com/items?itemName=bscan.raku-navigator

[08:19] <notable6> MasterDuke, Noted! (weekly)

[08:19] <discord-raku-bot> <Nemokosch#9980> > <Voldenet> m: my @sth = <this>; given @sth { @_ = "it also works" }; say @sth

[08:19] <discord-raku-bot> <Nemokosch#9980> this also doesn't work as one can see by the input but I wouldn't have expected this to work anyway

[08:19] <discord-raku-bot> <Nemokosch#9980> there is no hint that @_ would exist as a topic variable so no surprise that it is indeed not a topic variable

[08:24] <discord-raku-bot> <Nemokosch#9980> aaah, yet another example that sigils were a mistake

[08:24] <discord-raku-bot> <Nemokosch#9980> if you assign the same arrays to a scalar container, it works flawlessly

[08:52] *** frost joined
[09:00] *** grondilu joined
[09:01] <grondilu> m: say 0x<aa ff>

[09:01] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> say 0‚èèx<aa ff>‚ê§¬ª

[09:01] <grondilu> m: say :16<aa ff>

[09:01] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Malformed radix number‚ê§at <tmp>:1‚ê§------> say :16<aa‚èè ff>‚ê§    expecting any of:‚ê§        number in radix notation‚ê§¬ª

[09:01] * grondilu thought one of these would work

[09:03] <grondilu> m: say <aa ff>.map({:16($_)}) # feels verbose

[09:03] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(170 255)‚ê§¬ª

[09:04] *** silug left
[09:04] <grondilu> m: say blob8.new: <aa ff>.map({:16($_)})

[09:04] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Blob[uint8]:0x<AA FF>‚ê§¬ª

[09:04] <grondilu> in the output here the 0x<.. .. ...> notation is used

[09:05] *** silug joined
[09:05] <discord-raku-bot> <Nemokosch#9980> what is the goal?

[09:05] <grondilu> to make list of integer from their hex representation

[09:06] <grondilu> integer*s*

[09:07] <discord-raku-bot> <Nemokosch#9980> I don't think you can just pass a list instead of a number ü§î

[09:08] <discord-raku-bot> <Nemokosch#9980> tbh this feels just like passing a sequence of values instead of a value to any function

[09:12] <discord-raku-bot> <Nemokosch#9980> if you have two numbers, why not just write them? (0xaa, 0xff)

[09:13] <discord-raku-bot> <Nemokosch#9980> and if you have an indefinite number of values, resorting to some literal syntax isn't a good idea anyway

[09:53] <grondilu> often blobs on the web are displayed as a sequence of bytes in hex.  It would be convenient to be able to paste that and turn it into the relevant raku code easily.

[09:53] <grondilu> like for test vectors in crypto

[09:56] <discord-raku-bot> <Nemokosch#9980> well you can stick to the "verbose" solution, although at that point I'd rather use a whatever curry

[09:57] *** Nemokosch joined
[09:57] <Nemokosch> m: dd <beef cab>.map(*.&parse-base: 16)

[09:57] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(48879, 3243).Seq‚ê§¬ª

[09:58] *** Nemokosch left
[09:59] <grondilu> m: dd <beef cab>>>.&parse-base: 16

[09:59] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(48879, 3243)‚ê§¬ª

[10:00] <grondilu> works, but still verbose IMHO

[10:00] <grondilu> it is better than .map({:16($_)}), though

[10:03] <discord-raku-bot> <Nemokosch#9980> well if you want something shorter, define it for yourself, this is Raku after all

[10:03] *** Nemokosch joined
[10:04] <Nemokosch> m: sub hex(@nums) { @nums>>.&parse-base: 16 } dd hex <beef cab>

[10:04] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> b hex(@nums) { @nums>>.&parse-base: 16 }‚èè dd hex <beef cab>‚ê§    expecting any of:‚ê§        infix‚ê§        infix‚Ä¶¬ª

[10:04] <Nemokosch> oh okay

[10:04] <Nemokosch> m: sub hex(@nums) { @nums>>.&parse-base: 16 }; dd hex <beef cab>

[10:04] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(48879, 3243)‚ê§¬ª

[10:04] *** Nemokosch left
[10:07] *** Sankalp joined
[10:07] <discord-raku-bot> <Nemokosch#9980> you could define an operator as well ofc but that may not work in REPL

[10:14] *** thegargler joined
[10:14] *** Altai-man left
[10:15] *** Altai-man joined
[10:27] *** thegargler left
[10:42] *** sena_kun joined
[10:51] *** frost left
[10:51] *** frost joined
[10:55] <Geth> ¬¶ doc: a6177bce97 | (Peter du Marchie van Voorthuysen)++ | 3 files

[10:55] <Geth> ¬¶ doc: Document X::Cannot::Empty

[10:55] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/a6177bce97

[10:55] <Geth> ¬¶ doc: 159c26ca3e | (Peter du Marchie van Voorthuysen)++ | doc/Type/X/Cannot/Empty.pod6

[10:55] <Geth> ¬¶ doc: Add example of failing with X::Cannot::Empty

[10:55] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/159c26ca3e

[10:55] <Geth> ¬¶ doc: 199e96b00c | Altai-man++ (committed using GitHub Web editor) | 3 files

[10:55] <Geth> ¬¶ doc: Merge pull request #4070 from dumarchie/master

[10:55] <linkable6> Link: https://docs.raku.org/type/X::Cannot::Empty

[10:55] <Geth> ¬¶ doc: 

[10:55] <Geth> ¬¶ doc: Document X::Cannot::Empty

[10:55] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/199e96b00c

[11:08] <Geth> ¬¶ problem-solving: e5b8cbf16d | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | .github/CODEOWNERS

[11:08] <Geth> ¬¶ problem-solving: Remove self as owner of that section

[11:08] <Geth> ¬¶ problem-solving: 

[11:08] <Geth> ¬¶ problem-solving: I can no longer claim responsibility for the documentation repo *de facto*. It's only sensible to remove myself from here too.

[11:08] <Geth> ¬¶ problem-solving: review: https://github.com/Raku/problem-solving/commit/e5b8cbf16d

[11:09] <Geth> ¬¶ problem-solving: 894e41f708 | (Elizabeth Mattijsen)++ | .github/CODEOWNERS

[11:09] <Geth> ¬¶ problem-solving: Fix formatting in CODEOWNERS

[11:09] <Geth> ¬¶ problem-solving: review: https://github.com/Raku/problem-solving/commit/894e41f708

[11:47] *** jaguart joined
[12:01] *** frost left
[12:02] <El_Che> what does JJ's commit mean?

[12:07] <lizmat> It means he's relinquishing final responsibility for the Raku documentation

[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:21] <lizmat> and that we need someone else to take that responsibility  :-)

[12:37] *** frost joined
[12:42] *** lichtkind left
[12:45] <El_Che> oh, sad

[12:59] <lizmat> afk for a few hours, the sun is shining  :-)  &

[13:00] <discord-raku-bot> <Nemokosch#9980> üòÇ

[13:03] *** frost left
[13:07] *** shareable6 left
[13:10] *** shareable6 joined
[13:17] <[Coke]> ... trying to use raku to run the equiv of "start https://google.com" from a raku script. I suspect I might need to actually launch 'cmd' and pass args; anyone done this? (windows, obvs.)

[13:17] *** Sankalp left
[13:18] <japhb> Oh there has *got* to be a more direct way than indirecting via cmd ... but if I ever knew it, it has faded from my memory

[13:20] <[Coke]> eh. I can make this a shell script (it's small and dumb and start works there.)

[13:26] <discord-raku-bot> <Nemokosch#9980> the windows nerds

[13:53] *** [Coke] left
[13:56] *** [Coke] joined
[13:59] <[Coke]> (windows nerds) it's probably worse that I wrote something intended to be used under 'git bash' only on windows.

[13:59] <[Coke]> but at least now I have my "open this list of ticket numbers in bug tracking that's listed in someone's excel file". which I was working on the script instead of looking at the tickets, because... yak shaving.

[14:00] <[Coke]> this 30 minutes will definitely save me 10m later.

[14:00] *** melezhik joined
[14:01] <melezhik> SmokeMachine: patrickb sparkyci won't trigger new builds in few hours, I will fix this once I get an access to my laptop ...

[14:01] <japhb> Time well spent

[14:01] <tellable6> hey melezhik, you have a message: https://gist.github.com/7580851da811ceb7b02d8909facb849d

[14:06] *** jaguart left
[14:07] *** melezhik left
[14:12] *** Guest35 joined
[14:13] <discord-raku-bot> <Nemokosch#9980> at the end of the day, it's good to know that Raku stuff actually works on Windows üôÇ

[14:17] *** Sgeo joined
[14:29] <[Coke]> Use it every day for devops/scripty things.

[15:17] *** evalable6 left
[15:17] *** linkable6 left
[15:18] *** linkable6 joined
[15:19] *** evalable6 joined
[15:30] <discord-raku-bot> <Nemokosch#9980> Does map put its argument(s) into Scalar containers?

[15:35] <[Coke]> m: my \a = 3; my @a=[\a,3]; @a.map({$_.VAR.say})

[15:35] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´\(3)‚ê§3‚ê§¬ª

[15:35] <discord-raku-bot> <Nemokosch#9980> from all I see, @two-dimensional-array.map(* Z <1 2 3>) doesn't work as intended

[15:36] <discord-raku-bot> <Nemokosch#9980> and @two-dimensional-array.map(*.List Z <1 2 3>) does

[15:39] *** Nemokosch joined
[15:39] <Nemokosch> m: [[1,2], [3,4]].map(*.raku.say);

[15:39] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´$[1, 2]‚ê§$[3, 4]‚ê§¬ª

[15:39] *** Nemokosch left
[15:40] <[Coke]> m: my @a=(1,2;3,4); @a.map({dd $_, @$_})

[15:40] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´List @a = $(1, 2)‚ê§(1, 2)‚ê§List @a = $(3, 4)‚ê§(3, 4)‚ê§¬ª

[15:42] <discord-raku-bot> <Nemokosch#9980> what I particularly don't get is... what is this, if it's apparently not a List/Array?

[15:42] <discord-raku-bot> <Nemokosch#9980> because *.List or *.Array fixes it

[15:44] <[Coke]> dd: ($(1,2)).WHAT

[15:44] <[Coke]> m: dd: ($(1,2)).WHAT

[15:44] <camelia> rakudo-moar 530e17848: ( no output )

[15:44] <[Coke]> m: ($(1,2)).WHAT.say

[15:44] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(List)‚ê§¬ª

[15:44] <[Coke]> m: say $(1,2).elems; say (1,2).elems

[15:44] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´2‚ê§2‚ê§¬ª

[15:46] <[Coke]> m: my $a = $(1,2); my @a = $(1,2); dd $a, @a

[15:46] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´List $a = $(1, 2)‚ê§Array @a = [(1, 2),]‚ê§¬ª

[15:48] <[Coke]> Sorry, I should have tested more of those "off screen" first.

[15:51] <discord-raku-bot> <Nemokosch#9980> The difference between types and containers is fuzzy at times

[15:52] <discord-raku-bot> <Nemokosch#9980> Like okay, map treats the argument as a scalar

[15:53] <discord-raku-bot> <Nemokosch#9980> but then what do .Array and .List do that turns this scalar into a positional container, whatever the name is

[16:00] <discord-raku-bot> <Nemokosch#9980> it's even inconsistent at times: Z and X do pay attention to this "scalarness", hyper and even reduce don't

[16:08] *** abraxxa left
[16:32] *** grondilu left
[16:38] <Geth> ¬¶ problem-solving: lizmat assigned to codesections Issue Taking responsibility for Raku Documentation issues https://github.com/Raku/problem-solving/issues/324

[16:38] <Geth> ¬¶ problem-solving: lizmat unassigned from codesections Issue Taking responsibility for Raku Documentation issues https://github.com/Raku/problem-solving/issues/324

[16:48] *** jaguart joined
[16:50] *** saint- joined
[16:59] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/05/02/2022-18-period/

[17:16] <CIAvash> I think that's happening because `map` is capturing everything. And those are items.

[17:16] <CIAvash> m: my (|c) := [[1,2],[3,4]]; dd c

[17:16] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´\($[1, 2], $[3, 4])‚ê§¬ª

[17:17] <CIAvash> so, if they are items, they need to be decontainerized:

[17:17] <gfldex> lizmat: I did not know that I can start the REPL like that. Are there any spec tests? :->

[17:17] <CIAvash> m: say [[1,2],[3,4]].map: *<> Z <1 2 3>

[17:17] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(((1 1) (2 2)) ((3 1) (4 2)))‚ê§¬ª

[17:17] <lizmat> gfldex: I don't think so...

[17:18] <lizmat> and it's going to be pretty tricky perhaps to write tests for that?

[17:18] <lizmat> hmmm... I guess it could be part of the normal repl tests....  hmmm

[17:18] <gfldex> :->   ‚Üê that's my "I'm-being-cheeky-face"

[17:22] <CIAvash> And that's happening because Arrays have containers. Lists don't

[17:22] <CIAvash> m: say ((1,2),(3,4)).map: * Z <1 2 3>

[17:22] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(((1 1) (2 2)) ((3 1) (4 2)))‚ê§¬ª

[17:24] <discord-raku-bot> <Nemokosch#9980> Okay but then why does even *.Array fix the containerisation?

[17:28] *** sena_kun left
[17:31] <CIAvash> Because the `item` becomes an `Array`?

[17:33] *** melezhik joined
[17:33] <discord-raku-bot> <Nemokosch#9980> it was an Array though?

[17:33] *** melezhik left
[17:33] *** Nemokosch joined
[17:34] <Nemokosch> m: dd [[1, 2], [3,4]].map({ .WHAT })

[17:34] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(Array, Array).Seq‚ê§¬ª

[17:34] *** Nemokosch left
[17:35] *** Nemokosch joined
[17:35] <Nemokosch> m: dd¬† [[1, 2], [3,4]].map({ $_ Z [5, 6] }) #doesn't work

[17:35] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´((($[1, 2], 5),).Seq, (($[3, 4], 5),).Seq).Seq‚ê§¬ª

[17:35] <Nemokosch> dd: [[1, 2], [3,4]].map({ .Array Z [5, 6] }) #does work

[17:35] <Nemokosch> m dd: [[1, 2], [3,4]].map({ .Array Z [5, 6] }) #does work

[17:35] <Nemokosch> almost, damn

[17:36] <Nemokosch> m: dd [[1, 2], [3,4]].map({ .Array Z [5, 6] }) #does work

[17:36] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(((1, 5), (2, 6)).Seq, ((3, 5), (4, 6)).Seq).Seq‚ê§¬ª

[17:36] <CIAvash> actually it's not related to map, it's just Arrays having containers

[17:36] <CIAvash> m: my @a = [[1,2], [3,4]]; say @a[0].raku

[17:36] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´$[1, 2]‚ê§¬ª

[17:37] <CIAvash> it's itemized Array

[17:37] <discord-raku-bot> <Nemokosch#9980> anyway, it's not often desirable and rather confusing

[17:38] <discord-raku-bot> <Nemokosch#9980> some stuff cares about type, including the reduce and hyper meta-operators

[17:38] <discord-raku-bot> <Nemokosch#9980> some stuff cares about containers, like foreach and zip

[17:38] <CIAvash> m: say [1,2] Z [3,4]; say $[1,2] Z [3,4] # like this

[17:38] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´((1 3) (2 4))‚ê§(([1 2] 3))‚ê§¬ª

[17:40] <discord-raku-bot> <Nemokosch#9980> and it feels very quirky that I take an array that is itemized for some reason, convert it to an Array and suddenly it is containerized properly

[17:40] <discord-raku-bot> <Nemokosch#9980> this takes me back to yesterday

[17:40] <discord-raku-bot> <Nemokosch#9980> if you set a @-sigilled variable to the topic variable, you cannot assign to it because Rakudo will claim it's "immutable"

[17:42] <discord-raku-bot> <Nemokosch#9980> I've spent like half a year with Raku scripts, I've watched lizmat's presentation about sigils and still, most WAT's I come across are with sigil-dependent stuff and containerisation

[17:44] <discord-raku-bot> <Nemokosch#9980> I saw in your examples that zen-slicing changed the behavior, I would say that's a clear-looking solution; I don't know what it did or where this is described but it seems like the cleanest solution

[17:46] *** Nemokosch left
[17:46] <CIAvash> maybe those functions you used that don't care about containers, are probably not `nodal`? https://docs.raku.org/routine/is%20nodal

[17:47] *** melezhik joined
[17:48] <discord-raku-bot> <Nemokosch#9980> I would also really like a working example of `nodal` with some non-method

[17:48] <discord-raku-bot> <Nemokosch#9980> with an infix hyper, even

[17:50] *** melezhik left
[17:50] <discord-raku-bot> <Nemokosch#9980> but I don't think this is related to that map-zip example I've given

[17:50] <discord-raku-bot> <Nemokosch#9980> Anyway, I'm reaching the point where I should probably collect my concerns about the whole containerisation stuff and make a post to Reddit

[17:51] <discord-raku-bot> <Nemokosch#9980> This map-zip stuff is something that I think we can sort out and I will eventually understand

[17:51] <CIAvash> no, I mentioned nodal because you mentioned hyper-operators

[17:52] <discord-raku-bot> <Nemokosch#9980> but @variables as topic being immutable is an annoyance and the infamous (@a, @b) = (@b, @a) is plain satanic in my opinion

[17:52] <CIAvash> m: say [[1,2],[3,4]].map: -> @a { @a Z <1 2 3> } # another way to change containers

[17:52] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(((1 1) (2 2)) ((3 1) (4 2)))‚ê§¬ª

[17:53] <CIAvash> m: say [[1,2],[3,4]].map: -> $a { $a Z <1 2 3> } # same thing happening to $_

[17:53] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´((([1 2] 1)) (([3 4] 1)))‚ê§¬ª

[17:54] <discord-raku-bot> <Nemokosch#9980> yes, I know this one; once I started suspecting that map takes scalar items, I expected this to work

[17:54] <discord-raku-bot> <Nemokosch#9980> or @$_ to work (also does)

[17:55] <discord-raku-bot> <Nemokosch#9980> but I wondered if there is a clean way to change it within a whatever curry

[17:55] <CIAvash> Can you give an example for "but @variables as topic being immutable"

[17:56] <CIAvash> the clean way is either using `List`s or using `<>`.

[17:56] <discord-raku-bot> <Nemokosch#9980> *.List and *.Array work but I find them confusing - in fact I still don't really know why they change the containerisation and how this fits into the big picture

[17:56] <discord-raku-bot> <Nemokosch#9980> so yeah, so far I like *<> the most

[17:56] <discord-raku-bot> <Nemokosch#9980> or *[]

[17:57] <discord-raku-bot> <Nemokosch#9980> perhaps I could have used lists, I think it seemed easier to generate the data as an array

[17:58] <discord-raku-bot> <Nemokosch#9980> anyway, you know

[17:58] <discord-raku-bot> <Nemokosch#9980> so apparently it works as expected if the outer dimension is a List

[17:58] <discord-raku-bot> <Nemokosch#9980> perhaps there can be a logical framework around this

[17:59] <discord-raku-bot> <Nemokosch#9980> but I ask myself the question - who will remember nuances like that, among mortal users?

[18:00] <CIAvash> I think Arrays have containers so you can modify them, unlike Lists. Then there is flattening, iterating, ... https://docs.raku.org/language/containers

[18:00] <discord-raku-bot> <Nemokosch#9980> Lists still aren't immutable enough to be hashable, for example

[18:02] <discord-raku-bot> <Nemokosch#9980> okay, so this is the implication of (shallow) immutability

[18:02] <discord-raku-bot> <Nemokosch#9980> (personally I also don't think the type hierarchy helps here, i.e Arrays descending from Lists)

[18:03] <discord-raku-bot> <Nemokosch#9980> I'll have to study this part thoroughly

[18:04] <CIAvash> If I'm not mistaken codesections is working on the immutability issue

[18:04] *** Nemokosch joined
[18:04] <discord-raku-bot> <Nemokosch#9980> Anyway, let me show you the two increasingly annoying things

[18:05] <discord-raku-bot> <Nemokosch#9980> And there are ValueLists that are hashable (or some related implication of deep immutability); they will be built in from 6.e from what I know

[18:05] <discord-raku-bot> <Nemokosch#9980> That's good news for sure

[18:05] <Nemokosch> so here's one:

[18:06] <Nemokosch> m: my @array = <1 2 3>; $_ = <4 5 6> given @array;

[18:06] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Cannot assign to an immutable value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:06] *** reportable6 left
[18:06] <discord-raku-bot> <Nemokosch#9980> of course if I type out @array, it will work

[18:07] <discord-raku-bot> <Nemokosch#9980> I don't know of an easy workaround for the left handside though

[18:07] *** reportable6 joined
[18:08] <Nemokosch> m: my $item-array = <1 2 3>; $_ = <4 5 6> given $item-array;

[18:08] <camelia> rakudo-moar 530e17848: ( no output )

[18:08] <discord-raku-bot> <Nemokosch#9980> dang, works with the scalar sigil

[18:09] <discord-raku-bot> <Nemokosch#9980> I can't help but think that the so-called "item assignment" is more reliable overall

[18:10] <Nemokosch> And now let's perform the summoning ceremony of Raku

[18:11] <Nemokosch> m: my @a = <1>; my @b = <2>; (@a, @b ) = (@b, @a); dd @a; dd @b;

[18:11] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Array @a = ((my @Array_5770288009536) = [[], @Array_5770288009536])‚ê§Array @b = []‚ê§¬ª

[18:13] <discord-raku-bot> <Nemokosch#9980> again, this would work as intended, had you used $

[18:15] <discord-raku-bot> <Nemokosch#9980> And yes, I asked about this, I think Jonathan Worthington explained the behavior (list assignment, STORE is called, it pushes all the values to the emptied @a variable so nothing is left for @b) but I still think this is too horrifying to be acceptable...

[18:17] *** Nemokosch left
[18:23] <CIAvash> yes, again it's because of containers, I know why it's immutable but not sure about `@a` being a value and `$a` being a container/variable

[18:24] <CIAvash> m: my @a = 1,2,3; given @a -> $a is raw { $a = [4,5,6] }; dd @a;

[18:24] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Cannot assign to an immutable value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:25] <CIAvash> m: my @a = 1,2,3; given @a -> @b { @b = [4,5,6] }; dd @a;

[18:25] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Array @a = [4, 5, 6]‚ê§¬ª

[18:25] <CIAvash> m: my @a = 1,2,3; given @a <-> $a { $a = [4,5,6] }; dd @a;

[18:25] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Parameter '$a' expects a writable container (variable) as an argument,‚ê§but got '[1 2 3]' (Array) as a value without a container.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:26] <CIAvash> m: my $a = [1,2,3]; given $a <-> $b { $b = [4,5,6] }; dd $a;

[18:26] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Array $a = $[4, 5, 6]‚ê§¬ª

[18:27] <discord-raku-bot> <Nemokosch#9980> hmmm

[18:28] <discord-raku-bot> <Nemokosch#9980> does this mean that "item assignments" are literally impossible to list containered variables?

[18:29] <discord-raku-bot> <Nemokosch#9980> maybe all you have is this STORE method hidden behind "list assignments"?

[18:31] *** rypervenche left
[18:31] <CIAvash> apparently, I try to avoid mutability as much as I can and don't do these kind of things.

[18:32] <discord-raku-bot> <Nemokosch#9980> I mean that's not a bad idea but that doesn't mean it should be a can of worms, right? üòÑ

[18:33] <discord-raku-bot> <Nemokosch#9980> and especially this (@a, @b) = (@b, @a)

[18:33] <discord-raku-bot> <Nemokosch#9980> turns out it's not even easy to swap two variables if they happen to have this sigil

[18:33] <discord-raku-bot> <Nemokosch#9980> I mean, other than using a temporary third variable like back in the days

[18:34] <discord-raku-bot> <Nemokosch#9980> and for me, stuff like this definitely ruins my confidence with anything that seems like pattern matching

[18:36] *** rypervenche joined
[18:56] *** jaguart left
[19:12] *** p6steve joined
[19:13] *** ecocode left
[19:16] *** ecocode joined
[19:32] *** Altai-man left
[19:33] *** sena_kun joined
[19:48] <SmokeMachine> I've been reading about Erlang's way of doing RPC and that seemed interesting. Then I've started writing this (https://github.com/FCO/Supervisor), do you think something like this would make sense?

[19:48] <tellable6> 2022-05-02T01:48:51Z #raku <melezhik> SmokeMachine - thanks! I will think about badges , first I want to make SparkyCI works stable ... but yeah I agree badges would be convenient ...

[20:00] <p6steve> smokemachine: heck yes

[20:21] *** sena_kun left
[20:23] *** sena_kun joined
[20:24] *** charsbar left
[20:24] *** charsbar joined
[20:30] <SmokeMachine> p6steve: thanks! I think I‚Äôll continue trying it‚Ä¶

[20:34] *** jjido joined
[21:05] *** hythm joined
[21:35] *** jjido left
[22:30] <Voldenet> Nekomosch: Whenever I actually need to manage references (so, change instance of objects and so on), I use `$`, but when I care about collections, I use @ and %

[22:35] *** evalable6 left
[22:35] *** linkable6 left
[22:37] *** linkable6 joined
[22:38] *** evalable6 joined
[22:41] <Voldenet> erm, typo Nemokosch ^

[22:47] <Voldenet> it's not true perl way, but I strongly prefer storing everything in $ even in perl5, because it makes passing arguments more predictable IMO

[22:49] *** hythm left
[23:06] *** jujo joined
[23:07] <jujo> hello people, what is the idiomatic way to read stdin until eof?

[23:07] <Voldenet> m: for lines() { .say }

[23:07] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´¬ªWann treffen wir drei wieder zusamm?¬´‚ê§   ¬ªUm die siebente Stund‚Äò, am Br√ºckendamm.¬´‚ê§     ¬ªAm Mittelpfeiler.¬´‚ê§         ¬ªIch l√∂sche die Flamm.¬´‚ê§ ¬ªIch mit¬´‚ê§‚ê§         ¬ªIch komme vom Norden her.¬´‚ê§        ¬ªUnd ich vom S√ºden.‚Ä¶¬ª

[23:08] <Voldenet> m: $*IN.slurp.say

[23:08] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´¬ªWann treffen wir drei wieder zusamm?¬´‚ê§   ¬ªUm die siebente Stund‚Äò, am Br√ºckendamm.¬´‚ê§     ¬ªAm Mittelpfeiler.¬´‚ê§         ¬ªIch l√∂sche die Flamm.¬´‚ê§ ¬ªIch mit¬´‚ê§‚ê§         ¬ªIch komme vom Norden her.¬´‚ê§        ¬ªUnd ich vom S√ºden.‚Ä¶¬ª

[23:10] <jujo> thanks, why use a label?

[23:10] <jujo> also where can I read about the methods of the dynamic $*IN

[23:11] <Voldenet> https://docs.raku.org/language/variables#index-entry-$*IN

[23:11] <jujo> thankyou again :)

[23:12] <Voldenet> (the `m:` is a bot command for evaluation, not a label)

[23:12] <Voldenet> m: invalid-code

[23:12] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    invalid-code used at line 1‚ê§‚ê§¬ª

[23:12] <jujo> oooooooohhhhhh

[23:17] *** TempIRCLogger left
[23:18] <perryprog> m: valid-code

[23:18] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    valid-code used at line 1‚ê§‚ê§¬ª

[23:18] <perryprog> :(

[23:19] <Voldenet> it's not perl, you can't just type in random things and expect it to work! :>

[23:21] <perryprog> haha

[23:22] <perryprog> m: P == NP

[23:22] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix == instead.‚ê§at <tmp>:1‚ê§------> P ==‚èè NP‚ê§¬ª

[23:22] <perryprog> that works in Perl 5, dangit!

[23:26] <jujo> if I want my program to behave differently depending on if I pass it files or I pipe a stream to it, how should I do it

[23:28] <jujo> nvm

[23:28] <jujo> just found out

[23:29] <Voldenet> probably just use "-" as argument, it's standard way to do it

[23:32] <Voldenet> eh, apparently .slurp won't do what you want

[23:32] <Voldenet> because slurp returns available content for $*IN

[23:33] <jujo> I'm declaring main with a slurpy array as argument

[23:33] <Voldenet> $*IN.slurp-rest is the method

[23:33] <jujo> and if it is empty I just treat it as input from stdin

[23:33] <jujo> (I could do some parsing before deciding)

[23:34] <jujo> is it too hacky?

[23:36] <Voldenet> makes sense

[23:38] <Voldenet> > sub MAIN(IO() :$file = "-") { $file.open.slurp-rest.chars.say }

[23:38] <Voldenet> that's how I'd do it

[23:45] <jujo> oh I see, I was just reading about the builtin arg parsing, very interesting

[23:45] <jujo> what if I want to have rest args after some flags?

[23:48] <Voldenet> > sub MAIN(IO() $in, :$out = "out") { $in.say; $out.say; }

[23:50] <Voldenet> if you want multiple unnamed arguments, you can use *@whatever as args, so

[23:51] <Voldenet> > sub MAIN(*@c, :$out = "out") { @c.join(";").say; $out.say; } 

[23:51] <Voldenet> keep in mind that in that case, named arguments must appear before unnamed ones

[23:51] <jujo> ok I understand

[23:51] <jujo> thanks again!

[23:52] <jujo> you can declare MAIN as multi right?

[23:52] <Voldenet> Yes

[23:53] <Voldenet> https://docs.raku.org/language/create-cli#___top

[23:56] <jujo> Thanks again, I will read it

