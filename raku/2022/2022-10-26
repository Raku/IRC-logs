[00:08] *** reportable6 left
[00:10] *** reportable6 joined
[00:37] *** MasterDuke joined
[00:40] *** epony joined
[01:19] *** deoac joined
[01:21] *** deoac left
[01:58] *** Xliff left
[02:43] *** epony left
[02:45] *** epony joined
[03:45] *** quotable6 left
[03:45] *** bisectable6 left
[03:45] *** committable6 left
[03:45] *** unicodable6 left
[03:45] *** bloatable6 left
[03:45] *** tellable6 left
[03:45] *** notable6 left
[03:45] *** linkable6 left
[03:45] *** benchable6 left
[03:45] *** greppable6 left
[03:45] *** squashable6 left
[03:45] *** releasable6 left
[03:45] *** shareable6 left
[03:45] *** sourceable6 left
[03:45] *** releasable6 joined
[03:45] *** sourceable6 joined
[03:45] *** squashable6 joined
[03:46] *** linkable6 joined
[03:46] *** unicodable6 joined
[03:46] *** benchable6 joined
[03:46] *** greppable6 joined
[03:46] *** bloatable6 joined
[03:46] *** committable6 joined
[03:47] *** quotable6 joined
[03:47] *** bisectable6 joined
[03:47] *** notable6 joined
[03:47] *** tellable6 joined
[03:47] *** shareable6 joined
[04:47] *** benchable6 left
[04:47] *** statisfiable6 left
[04:47] *** greppable6 left
[04:47] *** quotable6 left
[04:47] *** bisectable6 left
[04:47] *** unicodable6 left
[04:47] *** linkable6 left
[04:47] *** tellable6 left
[04:47] *** committable6 left
[04:47] *** sourceable6 left
[04:47] *** squashable6 left
[04:47] *** shareable6 left
[04:47] *** nativecallable6 left
[04:47] *** coverable6 left
[04:47] *** bloatable6 left
[04:47] *** notable6 left
[04:47] *** reportable6 left
[04:47] *** evalable6 left
[04:48] *** epony left
[04:48] *** evalable6 joined
[04:48] *** committable6 joined
[04:48] *** shareable6 joined
[04:48] *** unicodable6 joined
[04:49] *** bloatable6 joined
[04:49] *** reportable6 joined
[04:49] *** linkable6 joined
[04:49] *** bisectable6 joined
[04:49] *** nativecallable6 joined
[04:49] *** quotable6 joined
[04:50] *** notable6 joined
[04:50] *** epony joined
[04:50] *** statisfiable6 joined
[04:50] *** squashable6 joined
[04:50] *** coverable6 joined
[04:50] *** tellable6 joined
[04:50] *** benchable6 joined
[04:51] *** HvszrStykp left
[04:51] *** greppable6 joined
[04:51] *** sourceable6 joined
[05:34] *** epony left
[05:49] *** epony joined
[06:06] *** reportable6 left
[06:09] *** reportable6 joined
[06:28] *** equinox joined
[06:52] *** epony left
[06:53] *** epony joined
[07:14] *** jjido joined
[07:15] *** Sgeo left
[07:23] *** squashable6 left
[07:24] *** labster joined
[07:26] *** squashable6 joined
[07:33] *** razetime joined
[07:49] *** jjido left
[07:53] *** lichtkind joined
[08:10] *** dakkar joined
[08:40] *** razetime left
[08:56] *** epony left
[08:58] *** epony joined
[09:16] *** mykhal left
[09:44] *** mykhal joined
[09:53] *** epony left
[09:55] *** epony joined
[09:57] *** epony left
[09:58] *** epony joined
[10:00] <discord-raku-bot> <Nemokosch> Shouldn't App::Mi6 depend on fez? It seems to me it does depend on it implicitly.

[10:02] <lizmat> if fez is not installed, you cannot use fez as an ecosystem to upload to

[10:02] <lizmat> if you're still ok with uploading to CPAN, you don't need to install fez

[10:03] *** epony left
[10:03] <lizmat> now: with CPAN and p6c being phased out as ecosystem backends, one could argue that fez is going to be the only one left

[10:03] <lizmat> at that time (or even before that) I'd say it would make sense to make fez a requirement for App::Mi6

[10:08] <discord-raku-bot> <Nemokosch> yes, that's kinda similar to my line of thinking

[10:09] *** epony joined
[10:10] <discord-raku-bot> <Nemokosch> for me as a "fez-only" user, it's pointless to have a CPAN-related dependency (CPAN::Uploader::Tiny) and since fez is "natively supported" in mi6, it would make more sense to make sure fez is present

[10:11] <lizmat> zef install fez

[10:11] <lizmat> and you're set

[10:11] <lizmat> I mean, it's only a very minor inconvenience

[10:12] <lizmat> if you feel strongly about it, I suggest making a PR in the App::Mi6 repo  :-)

[10:12] <lizmat> the change would be a one liner in the META6.json basically

[10:12] <lizmat> and possibly some code cleanup

[10:13] <discord-raku-bot> <Nemokosch> Yes... it's just a bit mind-boggling to have implicit dependencies, especially for something I would consider the main use

[10:13] <lizmat> well, historically, that is not true  :-)

[10:14] <lizmat> CPAN was the main use for a long time

[10:14] <discord-raku-bot> <Nemokosch> You know, I sometimes feel the Raku macroverse is a big graveyard, with a couple of necromancers, like you, trying to get the party going

[10:15] <discord-raku-bot> <Nemokosch> I have a pending PR for mi6 myself, by the way. Not the slightest response for a month.

[10:16] * leont still has to transfer all their old modules to fez, but his annoyance at fez's login procedure  is keeping  them from it

[10:16] <discord-raku-bot> <Nemokosch> I'm planning my "noble revenge" at the moment, by the way: revining Ddt

[10:16] <discord-raku-bot> <Nemokosch> *reviving

[10:17] <discord-raku-bot> <Nemokosch> I'm happy at the moment that we could start a little discussion about the Atom highlighter that I asked about here as well

[10:19] <discord-raku-bot> <Nemokosch> I'm also happy that kalkin seems to be willing to pass Ddt; that will also need more than the good old p6c release instructions...

[10:21] <discord-raku-bot> <Nemokosch> graveyard or treasure island, it's just a matter of perspective 😄

[10:23] <lizmat> indeed  :-)

[10:23] <lizmat> leont: what is the annoyance?  Having to enter the password once a month ?

[10:23] *** sena_kun joined
[10:24] <lizmat> skaji ^^ PR for mi6

[10:24] <leont> Yes. I have everything else automated so it unlocks when I log in. And it doesn't work with my password manager either (because that's integrated into my browser.

[10:24] <leont> So I'm going to have to use some crappy password because using a slightly better password means I'm resetting it every month

[10:25] <lizmat> tonyo: wouldn't you be able to (re)register using a link in a browser ?

[10:26] <leont> If it doesn't integrate with my browser, it should at least integrate with my platform's keychain manager

[10:26] <lizmat> tonyo: if so, what would that be?

[10:27] <leont> Which shouldn't be too hard once we have a dbus module, but someone has to write that first

[10:27] <discord-raku-bot> <Nemokosch> I wonder if this could work with some private key/public key combo, like SSH

[10:27] <leont> Asymmetric keys mainly work smooth because they integrate with the keychain manager

[10:27] <leont> If you'd reuse that then yes

[10:31] <discord-raku-bot> <Nemokosch> I'm learning a lot from these modules I inspect or modify...

[10:31] <discord-raku-bot> <Nemokosch> oh by the way, lizmat: what is the purpose of the --edit option in rak?

[10:33] <lizmat> --edit will call vim with all the locations of your search, to inspect and/or edit the code

[10:33] <lizmat> rak 'sub min' src --edit

[10:34] <lizmat> when done inside the Rakudo source tree, would bring you to all locations that have 'sub min'

[10:37] *** labster left
[10:38] <discord-raku-bot> <Nemokosch> It seemed to me that it collects the content into one anonymous file so literal editing didn't seem possible

[10:39] <discord-raku-bot> <Nemokosch> what am I missing?

[10:42] <lizmat> well, you need to use :cn to go to the next entry

[10:42] <lizmat> instead of :n

[10:42] <lizmat> and literal editing is *definitely* possible, I have already used it that way on the Rakudo core source

[10:44] *** abraxxa-home joined
[10:46] <discord-raku-bot> <Nemokosch> well, I wonder what I need to do; what I got was an anonymous file and the moment I added a character, the notification appeared that this was a readonly file

[10:47] <lizmat> hmmmm

[10:48] <lizmat> maybe something in your ~/.vimrc ?

[10:51] <lizmat> https://gist.github.com/lizmat/4df3073fd957048834ff51a82a061311   # mine

[11:00] <discord-raku-bot> <Nemokosch> I don't know what I did differently but now it seems better...

[11:00] <discord-raku-bot> <Nemokosch> like really, what could I set

[11:00] <lizmat> perhaps you were already editing the file in question ?

[11:00] *** equinox2 joined
[11:01] <lizmat> or vim thought you were because there was a (stale) swap file ?

[11:01] *** epony left
[11:02] *** epony joined
[11:03] *** equinox left
[11:27] <discord-raku-bot> <Nemokosch> I don't know but unless I can reproduce, it was probably on my end

[11:35] <discord-raku-bot> <Nemokosch> I suppose META6 entries shouldn't be Unicode-escaped but normal Unicode, right?

[11:36] <discord-raku-bot> <Nemokosch> immediately got my name with \uXXXX letters...

[11:37] <lizmat> I think the JSON standard expects escaped

[11:38] <lizmat> and META6.json being JSON, I'd say seeing \uxxx in your case, is to be expected

[11:43] <discord-raku-bot> <Nemokosch> but jjatria can have José Joaquín written in META6.json :c

[11:46] <discord-raku-bot> <Nemokosch> from what I understand, almost all Unicode characters can be left unescaped

[11:46] <discord-raku-bot> <Nemokosch> iirc mi6 itself leaves it unescaped, that's why it hit me

[11:52] *** jjido joined
[11:56] *** epony left
[11:56] <lizmat> I think if the character is supported by latin-1, you can leave it unescaped

[11:57] *** razetime joined
[11:58] *** epony joined
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:37] *** equinox2 left
[12:40] *** derpydoo joined
[12:48] *** jjido left
[13:05] *** epony left
[13:06] *** epony joined
[13:16] <lizmat> weekly: https://dev.to/lizmat/dont-fear-the-grepper-3-hfp   # part 3 of "Don't fear the grepper!" saga

[13:16] <notable6> lizmat, Noted! (weekly)

[13:19] *** Sgeo joined
[13:34] *** jgaz joined
[13:41] <discord-raku-bot> <Nemokosch> what does the `method X of Y` structure do?

[13:43] *** Sauvin left
[13:44] *** derpydoo left
[13:44] *** Sauvin joined
[13:57] *** abraxxa-home left
[14:11] *** epony left
[14:15] *** sena_kun left
[14:48] *** perlbot left
[14:48] *** perlbot_ joined
[14:50] *** perlbot_ is now known as perlbot

[14:58] *** equinox joined
[15:09] *** sena_kun joined
[15:11] *** vrurg left
[15:19] <tbrowder> howdy

[15:21] <tbrowder> lizmat: yr timing on file access times is spot on. i need that in a prog i'm working on now

[15:21] <tbrowder> so, how can i export an enum from a module?

[15:23] <tbrowder> m: enum  Foo is export = <a b>

[15:23] <camelia> rakudo-moar ef835615f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤An enum must supply an expression using <>, «», or ()␤at <tmp>:1␤------> enum  Foo is export⏏ = <a b>␤»

[15:23] <tbrowder> m: enum Foo <a b> is export;

[15:23] <camelia> rakudo-moar ef835615f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> enum Foo <a b>⏏ is export;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statemen…»

[15:24] <tbrowder> see my problem?

[15:26] <tbrowder> without delving into classes and such is there a simple way to make an enum accessible from a module?

[15:29] <tbrowder> maybe put in module E, then use "F::Foo"

[15:29] <tbrowder> sorry "E::Foo"

[15:31] *** HvszrStykp joined
[15:32] <equinox> enum E is export <yes no>;  # trait came first

[15:32] <tbrowder> that seems to work, but it doesn't feel rakuish to me

[15:33] <tbrowder> m: enum E is export <a b>;

[15:33] <camelia> rakudo-moar ef835615f: ( no output )

[15:33] *** vrurg joined
[15:34] <tbrowder> hm, i thought i tried  that. let me do it from a  script...

[15:35] *** razetime left
[15:36] <tbrowder> it works so far. thanks

[15:37] <tbrowder> equinox: thanks!

[15:37] <equinox> glad

[15:51] <tbrowder> when i last delt with enums i didn't understand or appreciate anything about automatic corecion. that really makes enums easy to define and use--especially now that i can export them thanks to you!

[15:52] <tbrowder> *coercion

[15:52] <tbrowder> i think

[15:53] <tbrowder>  yes, coercion

[16:14] <equinox> oh yeah

[16:15] <equinox> i was doing `E.pairs.first(*.value == $val).key` to inverse map a value to find the key in enum

[16:15] <equinox> but then `E($val)` is doing it already...

[16:16] <equinox> not sure if your coercion meant this or other but this is what happened to me

[16:16] <ugexe> m: my %x = :a(1), :b(2); say %x.antipairs.hash<2

[16:16] <camelia> rakudo-moar ef835615f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Whitespace required before < operator␤at <tmp>:1␤------>  = :a(1), :b(2); say %x.antipairs.hash<2⏏<EOL>␤    expecting any of:␤        method arguments␤        postfix␤»

[16:17] <ugexe> m: my %x = :a(1), :b(2); say %x.antipairs.hash<2>

[16:17] <camelia> rakudo-moar ef835615f: OUTPUT: «b␤»

[16:17] <ugexe> alternatively there is already a way to inverse a list of pairs

[16:26] *** derpydoo joined
[16:34] *** dakkar left
[16:43] *** derpydoo left
[16:44] *** equinox left
[16:45] *** derpydoo joined
[17:04] *** equinox joined
[17:46] *** derpydooo joined
[17:49] *** derpydoo left
[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[18:15] <lizmat> weekly: https://news.perlfoundation.org/post/announcements

[18:15] <notable6> lizmat, Noted! (weekly)

[18:39] *** notna joined
[18:39] <El_Che> "TPRF has made an intentional decision to not apply for a dev room, but to encourage talks to be given in other, non-language specific dev rooms instead. This will allow Perl and Raku to be shared with new audiences. "

[18:39] <lizmat> indeed

[18:39] <El_Che> a little weasel-talk, isn'it

[18:40] <lizmat> no, it is not

[18:40] <lizmat> this was also discussed in the RSC

[18:40] <El_Che> puts on cockney costume: "it's my understanding, luv, innit? "

[18:40] <El_Che> :)

[18:41] <lizmat> well, would you want to organize a request for a Raku devroom?

[18:42] *** derpydooo left
[18:50] *** notna left
[18:56] <El_Che> that's exactly my point actually

[18:56] <El_Che> there is no volunteer (no shame in that) but it's frame as a decision instead of a consequence

[18:56] <El_Che> anyway, semantics

[18:57] <El_Che> it does not really matter

[18:58] *** jjido joined
[19:07] *** sena_kun left
[19:32] <lizmat> weekly: https://www.heise.de/news/Programmiersprachen-Ranking-JavaScript-gewinnt-das-Rennen-7317740.html

[19:32] <notable6> lizmat, Noted! (weekly)

[19:32] <lizmat> Raku is mentioned in the graph

[19:35] *** johnjaye left
[19:45] *** vrurg left
[19:46] *** sena_kun joined
[19:49] <gfldex> lizmat: we would demand that they change it to bold *and* italic. :->

[19:49] <lizmat> hehe

[20:05] *** vrurg joined
[20:12] *** MoC joined
[20:15] <lizmat> https://blog.trailofbits.com/2022/10/25/sqlite-vulnerability-july-2022-library-api/

[20:39] *** equinox left
[20:41] *** jjido left
[20:49] *** jjido joined
[21:20] *** MoC left
[21:27] *** jjido left
[21:39] *** jjido joined
[22:03] *** jgaz left
[22:31] *** avar left
[22:34] *** avar joined
[22:50] *** bigdata joined
[22:57] *** sena_kun left
[23:05] *** Nemokosch joined
[23:06] <Nemokosch> I found a situation in which .? is actually desirable

[23:06] <tellable6> 2022-10-24T15:04:57Z #raku <SmokeMachine> Nemokosch: where do I sign in?! :)

[23:06] <tellable6> 2022-10-25T10:30:01Z #raku <guifa> Nemokosch: if they can be in any order AND any number, [<a><b><c>]*

[23:06] <Nemokosch> License::Software's license sub produces type objects or Nil 

[23:07] <Nemokosch> type objects do have .new to call on them, even though they aren't defined

[23:07] <Nemokosch> so it's good that .?new chains on them and propagates Nil haha

[23:21] *** bigdata left
[23:23] *** lichtkind left
[23:49] *** Nemokosch left
