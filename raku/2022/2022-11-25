[00:06] *** reportable6 left
[00:08] *** reportable6 joined
[00:29] *** jjido left
[00:40] *** epony left
[00:43] *** epony joined
[00:55] *** razetime joined
[01:08] *** Kaiepi left
[01:20] *** razetime left
[01:20] *** razetime joined
[01:27] *** razetime_ joined
[01:27] *** razetime left
[01:37] *** razetime_ left
[01:38] *** razetime joined
[01:38] <MasterDuke> [Coke]: pretty sure ugexe gave an example of how to do that in one of the channels in the past month or two

[01:38] *** razetime left
[02:22] *** sgrs left
[02:27] *** frost joined
[02:27] *** frost43 joined
[02:28] *** frost43 left
[03:29] *** unicodable6 left
[03:29] *** notable6 left
[03:29] *** linkable6 left
[03:29] *** coverable6 left
[03:29] *** evalable6 left
[03:29] *** releasable6 left
[03:29] *** tellable6 left
[03:29] *** reportable6 left
[03:29] *** quotable6 left
[03:29] *** squashable6 left
[03:29] *** benchable6 left
[03:29] *** committable6 left
[03:29] *** bloatable6 left
[03:29] *** bisectable6 left
[03:29] *** greppable6 left
[03:29] *** statisfiable6 left
[03:29] *** sourceable6 left
[03:29] *** shareable6 left
[03:29] *** nativecallable6 left
[03:29] *** shareable6 joined
[03:29] *** tellable6 joined
[03:30] *** coverable6 joined
[03:30] *** quotable6 joined
[03:30] *** unicodable6 joined
[03:30] *** evalable6 joined
[03:30] *** reportable6 joined
[03:30] *** greppable6 joined
[03:31] *** committable6 joined
[03:31] *** nativecallable6 joined
[03:31] *** bloatable6 joined
[03:31] *** linkable6 joined
[03:32] *** sourceable6 joined
[03:32] *** squashable6 joined
[03:32] *** benchable6 joined
[03:32] *** releasable6 joined
[03:32] *** statisfiable6 joined
[03:32] *** notable6 joined
[03:32] *** bisectable6 joined
[03:41] *** melezhik joined
[03:42] <melezhik> .tell tonyo - finally I've made it - full automation of fez upload via pipeline - https://fosstodon.org/@melezhik/109402367802442237

[03:42] <tellable6> melezhik, I'll pass your message to tonyo

[03:43] <melezhik> happy thanks giving to everyone who observes this holiday !

[03:50] <ToddAndMargo> Happy Thanksgiving to all too!

[03:50] <ToddAndMargo> What is the proper syntax for this?

[03:50] <ToddAndMargo> my $k = CArray[uint8].new(0xFF xx $j )

[03:50] <ToddAndMargo> Cannot invoke object of type 'NQPMu'

[03:50] <ToddAndMargo> It does not like $j (which is 6)

[03:52] <Guest32> https://docs.raku.org/routine/xx

[03:54] <ToddAndMargo> I am not seeing any way to use a variable there.  Am I missing something?

[03:55] <ToddAndMargo> I want to use the variable to set the length

[03:58] *** melezhik left
[04:00] <ToddAndMargo> say [1, 2] xx $j;

[04:00] <ToddAndMargo> Cannot invoke object of type 'NQPMu'

[04:00] <ToddAndMargo> any other way to presalt my CArray?

[04:05] <Guest32> [2] > my $l = CArray[uint8].new(255 xx 6);

[04:05] <Guest32> NativeCall::Types::CArray[uint8].new

[04:05] <Guest32> [3] > say $l.kv;

[04:05] <Guest32> (0 255 1 255 2 255 3 255 4 255 5 255)

[04:07] <ToddAndMargo> my $k = CArray[uint8].new(0xFF xx $j )     The reason for the $j is that I do not know the length until it is calculated

[04:08] <Guest32> [3] > my $j = 7;

[04:08] <Guest32> 7

[04:08] <Guest32> [4] > my $l = CArray[uint8].new(255 xx $j);

[04:08] <Guest32> NativeCall::Types::CArray[uint8].new

[04:08] <Guest32> [5] > say $l.kv;

[04:08] <Guest32> (0 255 1 255 2 255 3 255 4 255 5 255 6 255)

[04:12] <ToddAndMargo> Where is my typo?

[04:12] <ToddAndMargo> > $j =6; $k = CArray[uint8].new(0xFF xx $j ); print $j ~ "\n";

[04:12] <ToddAndMargo> Cannot find method 'qast' on object of type NQPMu

[04:16] <ToddAndMargo> Figured it out.  My repl does not like my $j.  When run directly, it works perfectly.  Sorry for the false alarm

[04:19] <ToddAndMargo> Now what am I doing wrong?

[04:19] <ToddAndMargo> ppSessionInf       = <NativeCall::Types::Pointer<4817055982656>>

[04:19] <ToddAndMargo> pCount             = <2>

[04:19] <ToddAndMargo> Length             = <48>

[04:19] <ToddAndMargo>    $Result = GetWTSEnumerateSession $hServer, $Reserved, $Version, $ppSessionInf, $pCount;

[04:19] <ToddAndMargo>    my uint16 $Length = $pCount * (12 + (12 * $Win64bit));

[04:19] <ToddAndMargo>    my $ca = CArray[BYTE].new( 0xFF xx $Length );

[04:19] <ToddAndMargo>    $ca = $ppSessionInf.deref;

[04:19] <ToddAndMargo> Internal error: unhandled target type

[04:20] <ToddAndMargo> What should I have as a target type?

[04:20] <ToddAndMargo> the target type is throwing on `$ca = $ppSessionInf.deref;`

[04:24] <Guest32> Give it a read: https://docs.raku.org/language/numerics

[04:27] <ToddAndMargo> what section?

[04:28] <ToddAndMargo> Is there a way to ask raki what type is being returned?

[04:29] <ToddAndMargo> not declaring the variable type does not work either `my $x = $ppSessionInf.deref;`  neither does `say $ppSessionInf.deref;`

[04:31] <Guest32> [8] > my $v = 1;

[04:31] <Guest32> 1

[04:31] <Guest32> [9] > my $l = CArray[uint8].new($v++ xx $j);

[04:31] <Guest32> NativeCall::Types::CArray[uint8].new

[04:31] <Guest32> [10] > say $l[0].WHAT;

[04:31] <Guest32> (Int)

[04:31] <Guest32> [10] > say $l.WHAT;

[04:31] <Guest32> (CArray[uint8])

[04:31] <Guest32> [10] > say $l.kv;

[04:31] <Guest32> (0 1 1 2 2 3 3 4 4 5 5 6 6 7)

[04:32] <ToddAndMargo> appartenly 1repr1 does not exist either

[04:33] <ToddAndMargo> say $ppSessionInf; return `NativeCall::Types::Pointer<0x1e2f9c04020>`

[04:34] <ToddAndMargo> How do I tell NativeCall I want 24 bytes that that pointer points to?

[04:35] <ToddAndMargo> .deref is giving me a bad time!

[04:36] <Guest32> As far I can tell there is no valid hexadecimal representarion (0xFF) in Raku lang.

[04:37] <ToddAndMargo> 0xFF is uint8

[04:37] <Guest32> I can't find the strings "0x" or "hexa" in the search box of docs.raku.org

[04:38] <ToddAndMargo> say 0xFF.base(16)

[04:38] <ToddAndMargo> FF

[04:38] <evalable6> ToddAndMargo, rakudo-moar 59a348538: OUTPUT: «FF␤»

[04:40] <ToddAndMargo> > my $i=0xFF; say $i.base(16) ~ "  " ~ $i.base(2)

[04:40] <ToddAndMargo> FF  11111111

[04:40] <ToddAndMargo> my uint8 $i=0xFF; say $i.base(16) ~ "  " ~ $i.base(2)

[04:40] <ToddAndMargo> FF  11111111

[04:40] <evalable6> ToddAndMargo, rakudo-moar 59a348538: OUTPUT: «FF  11111111␤»

[04:41] <ToddAndMargo> How do I tell NativeCall I want 24 bytes that that pointer points to?

[04:43] *** tirnanog left
[04:44] <ToddAndMargo> `say "$ppSessionInf.WHAT = <" ~ $ppSessionInf.WHAT ~ ">";` gives me

[04:44] <ToddAndMargo> Use of uninitialized value of type NativeCall::Types::Pointer in string context.

[04:44] <ToddAndMargo> Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.

[04:44] <ToddAndMargo>   in sub GetSessionNo at PopUpTest2.pl6 line 98

[04:44] <ToddAndMargo> NativeCall::Types::Pointer<3452477188480>.WHAT = <>

[04:46] <ToddAndMargo> say "$ppSessionInf.deref.WHAT = <" ~ $ppSessionInf.deref.WHAT ~ ">";

[04:46] <ToddAndMargo> Internal error: unhandled target type

[04:49] <ToddAndMargo> Perhaps, did I just trip across a bug in NativeCall?

[04:53] <Guest32> no ideia

[04:58] *** frost left
[05:27] *** Kaiepi joined
[05:27] *** Guest32 left
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[07:08] *** bisectable6 left
[07:08] *** notable6 left
[07:08] *** statisfiable6 left
[07:08] *** benchable6 left
[07:08] *** linkable6 left
[07:08] *** committable6 left
[07:08] *** unicodable6 left
[07:08] *** quotable6 left
[07:08] *** sourceable6 left
[07:08] *** bloatable6 left
[07:08] *** nativecallable6 left
[07:08] *** greppable6 left
[07:08] *** releasable6 left
[07:08] *** evalable6 left
[07:08] *** tellable6 left
[07:08] *** reportable6 left
[07:08] *** coverable6 left
[07:08] *** squashable6 left
[07:08] *** shareable6 left
[07:09] *** committable6 joined
[07:09] *** squashable6 joined
[07:09] *** evalable6 joined
[07:09] *** notable6 joined
[07:10] *** releasable6 joined
[07:10] *** coverable6 joined
[07:10] *** sourceable6 joined
[07:10] *** linkable6 joined
[07:10] *** nativecallable6 joined
[07:10] *** quotable6 joined
[07:10] *** shareable6 joined
[07:11] *** greppable6 joined
[07:11] *** tellable6 joined
[07:11] *** benchable6 joined
[07:11] *** statisfiable6 joined
[07:11] *** bloatable6 joined
[07:11] *** unicodable6 joined
[07:11] *** reportable6 joined
[07:11] *** bisectable6 joined
[07:20] *** abraxxa joined
[07:29] *** abraxxa left
[07:30] *** abraxxa joined
[07:44] *** eseyman joined
[07:58] *** discord-raku-bot left
[07:59] *** discord-raku-bot joined
[08:30] *** xinming left
[08:31] *** xinming joined
[08:41] *** MoC joined
[09:03] *** razetime joined
[10:03] *** committable6 left
[10:03] *** bisectable6 left
[10:03] *** squashable6 left
[10:03] *** reportable6 left
[10:03] *** nativecallable6 left
[10:03] *** linkable6 left
[10:03] *** sourceable6 left
[10:03] *** statisfiable6 left
[10:03] *** bloatable6 left
[10:03] *** greppable6 left
[10:03] *** unicodable6 left
[10:03] *** benchable6 left
[10:03] *** tellable6 left
[10:03] *** quotable6 left
[10:03] *** notable6 left
[10:03] *** coverable6 left
[10:03] *** shareable6 left
[10:03] *** releasable6 left
[10:03] *** evalable6 left
[10:04] *** committable6 joined
[10:04] *** unicodable6 joined
[10:04] *** nativecallable6 joined
[10:04] *** statisfiable6 joined
[10:04] *** tellable6 joined
[10:04] *** squashable6 joined
[10:05] *** releasable6 joined
[10:05] *** shareable6 joined
[10:05] *** linkable6 joined
[10:05] *** evalable6 joined
[10:05] *** bloatable6 joined
[10:05] *** quotable6 joined
[10:05] *** greppable6 joined
[10:06] *** sourceable6 joined
[10:06] *** bisectable6 joined
[10:06] *** reportable6 joined
[10:06] *** benchable6 joined
[10:06] *** coverable6 joined
[10:06] *** notable6 joined
[10:38] *** Sgeo left
[11:30] *** sgrs joined
[11:37] *** habere-et-disper joined
[11:54] *** MoC left
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:10] *** jjido joined
[12:12] *** jjido left
[12:26] *** Guest7276 joined
[12:26] *** Guest7276 left
[12:54] *** jjido joined
[12:57] *** habere-et-disper left
[13:03] *** Nemokosch joined
[13:05] <Nemokosch> Hi, is there anyone who would feel strongly about the removal of "Defined as:" phrases from the top of signatures in the documentation?

[13:05] <tellable6> 2022-11-23T09:54:02Z #raku-dev <lizmat> Nemokosch: I think it's time to do a PR to add yourself to https://github.com/rakudo/rakudo/blob/master/CREDITS  :-)

[13:05] <tellable6> 2022-11-24T18:30:43Z #raku-dev <lizmat> Nemokosch: would you like a commit bit ?

[13:06] <Nemokosch> Example: https://docs.raku.org/routine/sum "Defined as:" at two out of three places

[13:07] *** Nemokosch left
[13:11] *** abraxxa left
[13:25] *** Kaiepi left
[13:26] *** Kaiepi joined
[13:34] *** jjido left
[14:21] *** habere-et-disper joined
[14:27] *** gugod left
[14:31] *** gugod joined
[14:44] *** razetime left
[15:03] *** probiedooo joined
[15:11] *** rbt joined
[15:13] <rbt> Is there a way to see when a Num or Rat will fit into num64 without reducing precision?

[15:16] <rbt> This write-num64(0, $_.Num) just tosses extra lower bytes.

[15:20] *** rbt left
[15:20] *** rbt joined
[15:21] <discord-raku-bot> <Nemokosch> probably .Num itself does

[15:29] <rbt> Indeed.  Is there a better way of detecting tossed bytes than this:  $value != $value.Num.Rat

[16:00] *** deoac left
[16:02] <Geth> ¦ advent: tbrowder++ created pull request #102: Moving tbrowder's Raku Advent article source to another location

[16:02] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/102

[16:02] <Geth> ¦ advent/master: 9 commits pushed by (Tom Browder)++

[16:02] <Geth> ¦ advent/master: 4dfdd9d910 | update

[16:02] <Geth> ¦ advent/master: c11411e567 | update

[16:02] <Geth> ¦ advent/master: e5a9c70241 | upate

[16:02] <Geth> ¦ advent/master: aae2ac6fcd | update

[16:02] <Geth> ¦ advent/master: 2df3e0ac98 | update

[16:02] <Geth> ¦ advent/master: 89c8c8e0a6 | change info

[16:02] <Geth> ¦ advent/master: 6fb9025ae2 | change info

[16:02] <Geth> ¦ advent/master: 6d125781cf | update source location

[16:02] <Geth> ¦ advent/master: c5ba8ae67f | Merge pull request #102 from tbrowder/tbrowder

[16:02] <Geth> ¦ advent/master: review: https://github.com/Raku/advent/compare/57d73c081339...c5ba8ae67f16

[16:05] *** deoac joined
[16:06] <avuserow> rbt: maybe narrow would help? https://docs.raku.org/routine/narrow

[16:07] <avuserow> not sure if that helps with native types though. your solution may be the best

[16:11] <rbt> Unfortunately, narrow provides datatypes which may still overflow num64.

[16:15] <avuserow> is there a way to get regexes to return Str instead of Matches? here's my usecase:

[16:15] <avuserow> m: "foo.bar::baz" ~~ /^ $<relation>=(\S+) "." $<column>=(<-[:]>+) "::" $<cast>=(\S+) $/; dd [:$<relation>] # this is what I get

[16:15] <camelia> rakudo-moar 59a348538: OUTPUT: «[:relation(Match.new(:orig("foo.bar::baz"), :from(0), :pos(3)))]␤»

[16:15] <avuserow> m: "foo.bar::baz" ~~ /^ $<relation>=(\S+) "." $<column>=(<-[:]>+) "::" $<cast>=(\S+) $/; dd [:relation($<relation>.Str)] # this is what I want but simpler :)

[16:15] <camelia> rakudo-moar 59a348538: OUTPUT: «[:relation("foo")]␤»

[16:20] *** rbt left
[16:20] *** rbt joined
[16:42] *** MasterDuke left
[16:49] *** probiedooo left
[16:52] *** nine_ joined
[16:52] *** nine left
[16:52] *** camelia left
[16:52] *** m_athias left
[16:53] *** m_athias joined
[16:55] *** rbt left
[16:56] *** rbt joined
[16:58] *** jjido joined
[16:59] *** camelia joined
[17:19] *** Guest79 joined
[17:21] *** jjido left
[17:26] *** tirnanog joined
[17:36] <gfldex> m: my Str() @a = ('foo=10' ~~ /$<a>=[\w+] '=' $<b>=[\d+]/)<a b>; .say for @a;

[17:36] <camelia> rakudo-moar 59a348538: OUTPUT: «foo␤10␤»

[17:36] <gfldex> avuserow: ^^^

[17:46] *** sortiz joined
[17:46] <gfldex> m: say ('foo=bar=10' ~~ /$<a>=('foo' '=' $<b>=('bar' '=' $<c> = [\d+]))/){||<a b c>};

[17:46] <camelia> rakudo-moar 59a348538: OUTPUT: «(｢foo=bar=10｣␤ b => ｢bar=10｣␤  c => ｢10｣ Nil Nil)␤»

[17:47] <gfldex> m: use v6.*; say ('foo=bar=10' ~~ /$<a>=('foo' '=' $<b>=('bar' '=' $<c> = [\d+]))/){||<a b c>};

[17:47] <camelia> rakudo-moar 59a348538: OUTPUT: «｢10｣␤»

[17:50] *** habere-et-disper left
[17:51] *** holyghost joined
[17:51] <sortiz> rba, As far as I remember any Num can be stored as num64 without losing precision:

[17:51] <sortiz> m: my $b = Buf.allocate(8).write-num64(0,pi); say $b.read-num64(0) === pi;

[17:51] <camelia> rakudo-moar 59a348538: OUTPUT: «True␤»

[17:53] *** Nemokosch joined
[17:54] <Nemokosch> avuserow: I think I found a hacky way for your syntax

[17:54] <Nemokosch> m: "foo.bar::baz" ~~ /^ $<relation>=(\S+) "." $<column>=(<-[:]>+) "::" $<cast>=(\S+) $/; $/ := $/.Hash>>.Str; dd [:$<relation>]

[17:54] <camelia> rakudo-moar 59a348538: OUTPUT: «[:relation("foo")]␤»

[17:56] <Nemokosch> the problem is that this binding seems to kill the mechanism that backs up $/

[17:56] <Nemokosch> so now I'm stuck with the value I got into it, no matter how many times I match :\

[17:58] *** squashable6 left
[18:00] *** squashable6 joined
[18:07] <Nemokosch> m: my $match = "foo.bar::baz" ~~ /^ $<relation>=(\S+) "." $<column>=(<-[:]>+) "::" $<cast>=(\S+) $/; { my $/ := $match.Hash>>.Str; dd [:$<relation>]; }; "alma" ~~ / ma /; dd $/;

[18:07] <camelia> rakudo-moar 59a348538: OUTPUT: «[:relation("foo")]␤Match $/ = Match.new(:orig("alma"), :from(2), :pos(4))␤»

[18:07] *** reportable6 left
[18:07] <Nemokosch> now, the hack doesn't leak at least

[18:07] <Nemokosch> but it's getting too verbose to be useful

[18:08] *** reportable6 joined
[18:11] <sortiz> rbt: Ups, the above was for you.

[18:14] *** squashable6 left
[18:15] *** squashable6 joined
[18:32] *** Nemokosch left
[18:38] *** kylese joined
[18:42] <rbt> soritz: Thank-you. I'd come to that conclusion as well. I've got a different solution for Rat. Trying to cleanup some of the DBIish MySQL driver issues.

[18:44] <rbt> sortiz: Thank-you ^

[18:45] <sortiz> Some loss of precision when converting between Num and Rat (or FatRat) is inevitable.

[19:03] *** deoac left
[19:23] *** sgrs left
[20:09] *** kylese left
[20:18] <avuserow> Nemokosch, thanks for the ideas. Luckily I found that I can solve this a layer up

[20:18] <avuserow> m: class Foo {has Str() $.bar}; "foo.bar::baz" ~~ /^ $<relation>=(\S+) "." $<column>=(<-[:]>+) "::" $<cast>=(\S+) $/; say Foo.new(:$<bar>)

[20:18] <camelia> rakudo-moar 59a348538: OUTPUT: «Foo.new(bar => Str)␤»

[20:19] <avuserow> m: class Foo {has Str() $.relation}; "foo.bar::baz" ~~ /^ $<relation>=(\S+) "." $<column>=(<-[:]>+) "::" $<cast>=(\S+) $/; say Foo.new(:$<relation>)

[20:19] <camelia> rakudo-moar 59a348538: OUTPUT: «Foo.new(relation => "foo")␤»

[20:23] *** japhb left
[20:30] *** japhb joined
[20:52] <rbt> sortiz: I managed to find loss in precision while creating a FatRat directly.

[20:52] <rbt> say '-0.1234567890123456774144'.FatRat;     # output:  -0.123456789012345677

[20:52] <evalable6> rbt, rakudo-moar 59a348538: OUTPUT: «-0.123456789012345677␤»

[20:55] *** n1to joined
[20:57] <sortiz> rbt: Creating a FatRat from Num?

[20:58] <rbt> From a string.

[20:58] <rbt> Adding digits gets the correct output.

[21:00] <sortiz> A FatRat from Str attempts to use as many digits as available. But from from Num it use a default epsilon. (1e-6)

[21:00] <gfldex> This is calling Cool.FatRat what is in turn calling self.Numeric.

[21:00] *** Sgeo joined
[21:00] <sortiz> &brb

[21:01] <gfldex> and in role Numeric we can find: method FatRat(Numeric:D:) { self.Rat.FatRat }

[21:01] <gfldex> rbt: please file a Rakudobug

[21:01] <rbt> Yeah, I filed #5108

[21:06] <gfldex> This is rather convoluted. Str.val -> Cool.Numeric -> *.Rat.FatRat

[21:06] <gfldex> m: say '-0.1234567890123456774144'.val

[21:06] <camelia> rakudo-moar 59a348538: OUTPUT: «No such method 'val' for invocant of type 'Str'.  Did you mean 'EVAL'?␤  in block <unit> at <tmp> line 1␤␤»

[21:06] <gfldex> m: say val('-0.1234567890123456774144')

[21:06] <camelia> rakudo-moar 59a348538: OUTPUT: «-0.1234567890123456774144␤»

[21:06] <gfldex> m: say val('-0.1234567890123456774144').WHAT

[21:06] <camelia> rakudo-moar 59a348538: OUTPUT: «(RatStr)␤»

[21:07] <rbt> It works if you add a digit. Appended a 9 to the end:

[21:07] <rbt> say '-0.12345678901234567741449'.FatRat

[21:07] <evalable6> rbt, rakudo-moar 59a348538: OUTPUT: «-0.12345678901234567741449␤»

[21:44] *** habere-et-disper joined
[22:03] *** sgrs joined
[22:38] *** holyghost left
[22:45] *** jjido joined
[22:45] *** n1to left
[23:39] *** Sgeo left
[23:50] *** euandreh left
[23:53] *** snibsnab joined
[23:55] *** Sgeo joined
