[00:03] *** discord-raku-bot left
[00:03] *** discord-raku-bot joined
[00:07] *** reportable6 left
[00:15] *** Geth left
[00:16] *** Geth joined
[00:21] <leont> There was a way in this channel to run a raku sniplet on a bunch of different versions, right?

[00:30] <guifa> bisectable

[00:32] *** hasrthur left
[00:38] <leont> bisectable: say sub foo(Str :@foo) { say "success" }.cando(\())

[00:38] <bisectable6> leont, Will bisect the whole range automagically because no endpoints were provided, hang tight

[00:38] <bisectable6> leont, ¬¶6c (60 commits): ¬´()‚ê§¬ª

[00:38] <bisectable6> leont, Nothing to bisect!

[00:38] <leont> bisectable6: help

[00:38] <bisectable6> leont, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^‚àû).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Bisectable

[00:39] <leont> bisectable6: old=2015.12 new=HEAD say sub foo(Str :@foo) { say "success" }.cando(\())

[00:39] <bisectable6> leont, On both starting points (old=2015.12 new=3823f88) the exit code is 0 and the output is identical as well

[00:39] <bisectable6> leont, Output on both points: ¬´()‚ê§¬ª

[00:39] <perryprog> commit: say sub foo(Str :@foo) { say "success" }.cando(\())

[00:39] <committable6> perryprog, Seems like you forgot to specify a revision (will use ‚Äúv6.c‚Äù instead of ‚Äúsay‚Äù)

[00:39] <committable6> perryprog, ¬¶v6.c (60 commits): ¬´()‚ê§¬ª

[00:39] <perryprog> commit: releases sub foo(Str :@foo) { say "success" }.cando(\())

[00:40] * leont should read the wiki first

[00:40] <committable6> perryprog, ¬¶releases (60 commits): ¬´¬ª

[00:40] <perryprog> leont :(

[00:40] <leont> bisectable6: old=2015.12 new=HEAD exit ?sub foo(Str :@foo) { say "success" }.cando(\())

[00:40] <bisectable6> leont, On both starting points (old=2015.12 new=3823f88) the exit code is 0 and the output is identical as well

[00:40] <bisectable6> leont, Output on both points: ¬´¬ª

[00:41] <leont> commit: say sub foo(Str :@foo) { say "success" }.cando(\())

[00:41] <committable6> leont, Seems like you forgot to specify a revision (will use ‚Äúv6.c‚Äù instead of ‚Äúsay‚Äù)

[00:41] <leont> commit: v6.c say sub foo(Str :@foo) { say "success" }.cando(\())

[00:42] <committable6> leont, ¬¶v6.c (60 commits): ¬´()‚ê§¬ª

[00:42] <committable6> leont, ¬¶v6.c (60 commits): ¬´()‚ê§¬ª

[00:42] <leont> I really thought I had seen that work at some point, but apparently my memory is wrong

[01:09] *** reportable6 joined
[01:51] <lucs> Is there something like (elem) that could give me the index of the found element?

[01:53] <japhb> lucs: (elem) is a set-like operator, and sets are unordered.  Are you looking for something like .first(:k)?

[01:53] <moon-child> m: say <a b c>.first('b', :k)

[01:53] <camelia> rakudo-moar 3823f88ce: OUTPUT: ¬´1‚ê§¬ª

[01:54] <lucs> japhb: I believe I am :-)

[01:54] <lucs> Thanks japhb and moon-child.

[01:54] <japhb> :-)

[01:55] <moon-child> one thing to watch out for: 0 is falsy.  <a b c>.first('a', :k) is 0, <a b c>.first('d', :k) is Nil

[01:55] <lucs> Gotcha.

[01:59] *** linkable6 joined
[02:32] *** hasrthur joined
[02:34] *** xinming left
[02:36] *** xinming joined
[02:37] *** hasrthur left
[03:36] <guifa> (one of the really nice differences between with and if.  with requires a defined value ‚Äî which Nil is not, but 0 is, so if you anticipate 0 or empty string/lists but not as falsey values, use with)

[03:37] *** linkable6 left
[03:37] *** evalable6 left
[03:39] * lucs tweaks his code.

[03:39] <lucs> Thanks for the reminder guifa :)

[03:39] *** linkable6 joined
[03:40] *** evalable6 joined
[04:04] * leont really likes combining with with named block arguments

[04:05] <leont> ¬´with some.expression() -> $value {}¬ª is so much better than ¬´if defined(my $value = some.expression()) {}¬ª

[04:07] * lucs tweaks his code some more :)

[04:14] <leont> (erm, I meant normal block arguments, these aren't named)

[04:19] *** perlbot left
[04:19] *** simcop2387 left
[04:30] *** simcop2387 joined
[04:30] *** frost joined
[04:32] *** perlbot joined
[05:09] *** Altai-man joined
[05:11] *** sena_kun left
[05:49] *** frost left
[06:07] *** reportable6 left
[07:07] *** linkable6 left
[07:07] *** evalable6 left
[07:08] *** reportable6 joined
[07:10] *** linkable6 joined
[07:19] *** seednode99 left
[07:20] *** seednode99 joined
[08:08] *** evalable6 joined
[08:34] *** dakkar joined
[08:55] *** ufobat joined
[09:07] *** tejr left
[09:07] *** tejr joined
[09:40] *** linkable6 left
[09:43] *** dakkar left
[10:33] *** Sgeo left
[10:35] *** ufobat left
[10:41] *** linkable6 joined
[10:43] *** jjido joined
[11:25] *** eseyman joined
[11:26] *** nine left
[11:27] *** nine joined
[11:53] *** hasrthur joined
[11:59] *** jjido left
[12:08] *** reportable6 left
[12:41] *** frost joined
[13:10] *** frost left
[13:11] *** reportable6 joined
[13:26] <tbrowder> howdy, folks

[13:26] <lizmat> tbrowder  o/

[13:28] <tbrowder> you're up late!

[13:28] *** frost joined
[13:28] <lizmat> ??   it's 2.30 pm here ?

[13:28] <tbrowder> sorry, my tz sense is off!

[13:28] <lizmat> .oO( it's all relative )

[13:29] <tbrowder> i've been working on tail end of my day more

[13:32] <tbrowder> i don't see much on 2d array in docs. do i remember seeing some syntax like @a[1;3]?

[13:33] <tbrowder> for row 1, col 3

[13:34] <Geth> ¬¶ CCR: sjn++ created pull request #4: Jnthn's presentation at NUUG, 2010-09-14

[13:34] <Geth> ¬¶ CCR: review: https://github.com/Raku/CCR/pull/4

[13:34] <tbrowder> or can we fake [][] using AT-POS somehow on a class

[13:38] <tbrowder> maybe back later today, bye-bye

[13:48] <lizmat> make sure your outer AT-POS returns an object that the inner AT-POS can work on?

[13:48] *** discord-raku-bot left
[13:51] *** discord-raku-bot joined
[14:29] *** frost left
[14:45] *** frost joined
[14:55] *** getimiskon joined
[15:06] <discord-raku-bot> <Anton Antonov#7232> I there a package/module for extracting plain text from HTML strings?

[15:25] *** frost left
[16:15] <lizmat> Anton Antonov: (run lynx $url, :out, :!err).out.slurp ?

[16:25] *** evalable6 left
[16:25] *** linkable6 left
[16:25] *** linkable6 joined
[16:26] <ugexe> .slurp(:close)

[16:36] <moon-child> I used HTTP::UserAgent

[16:36] <moon-child> seems to work pretty well

[16:37] <ugexe> that wouldn't strip the html tags would it?

[16:37] <moon-child> OH

[16:37] <moon-child> I misread the original request

[16:37] <moon-child> and I misread lynx as curl

[16:37] <moon-child> >_<

[16:38] <moon-child> should say misinterpreted, I guess

[16:38] <ugexe> i'd think libxml would work

[16:39] <moon-child> yeah I've used XML::Text and gumbo, both worked fine, but that's a lot more work (and more error-prone) than shelling out ot an actual web browser

[16:40] <moon-child> (note: iirc gumbo is supposed to be fast, but for what I used it it was somewhat slower than XML::text; maybe conv overhead idk)

[16:42] *** ufobat joined
[16:43] <discord-raku-bot> <Anton Antonov#7232> Thank you all for the suggestions!

[17:10] <discord-raku-bot> <Anton Antonov#7232> @lizmat I did not have `lynx` ; I installed it. Had to fiddle with certificates settings. The command that worked  is this `run('/usr/local/bin/lynx', '-dump', $url, :out, :!err).out.slurp(:close)`

[17:12] <discord-raku-bot> <Anton Antonov#7232> @moon-child I was thinking to use XML::<Something> libraries, but I spent too much time with `lynx`  and it worked, so some another time...

[17:25] *** seednode99 left
[17:26] *** seednode99 joined
[17:26] *** evalable6 joined
[17:29] *** Skarsnik_ is now known as Skarsnik

[17:43] <discord-raku-bot> <Anton Antonov#7232> How can find who contributed Raku code to https://rosettacode.org/ ? And more specifically the Raku code for Finite State Machines : https://rosettacode.org/wiki/Finite_state_machine#Raku .

[17:43] <discord-raku-bot> <Anton Antonov#7232> How can find who contributed Raku code to https://rosettacode.org/ ? And more specifically the Raku code for Finite State Machines : https://rosettacode.org/wiki/Finite_state_machine#Raku .

[17:43] <discord-raku-bot> <Anton Antonov#7232> (I would like to give proper reference / credit in my packages and talks...)

[18:08] *** reportable6 left
[18:12] <lizmat> Anton Antonov: https://rosettacode.org/mw/index.php?title=Finite_state_machine&action=history

[18:13] <lizmat> will be messy, would have to go by commit messages  :-(

[18:22] *** ufobat left
[18:33] *** dogbert11 left
[18:34] *** dogbert11 joined
[18:43] <discord-raku-bot> <Anton Antonov#7232> Ah -- good reason to postpone it indefinitely... üôÇ  I was also kind of hoping that some here would proclaim authorship.

[19:11] *** reportable6 joined
[19:12] *** timo joined
[19:14] *** clarjon1 joined
[19:18] *** Sgeo joined
[19:38] *** clarjon1 left
[19:39] *** clarjon1 joined
[19:48] <MasterDuke> i think thundergnat has done a bunch

[19:57] <guifa> lizmat later today you're FINALLY going to see my took-way-longer-than-it-should-have new release of DateTime::Timezones :-) 

[19:57] <guifa> hopefully it will work well for the logger

[19:58] * lizmat hopes so too :-)

[19:58] * guifa is really secretly just hoping lizmat will bug test it for him haha

[19:58] <lizmat> I might :-)

[20:01] *** dextercd joined
[20:01] <guifa> The good thing is that I finally really understand how the tz codebase works, so you could also have methods like "DateTime.next-dst-change" and "DateTime.last-dst-change" (that's the only one that comes to mind, but i'm sure I could think of other stuff down the road)

[20:01] <discord-raku-bot> <Anton Antonov#7232> @MasterDuke  Ok, thanks!

[20:02] <MasterDuke> i'm pretty sure i would use DateTime.ante-penultimate-dst-change on a daily basis

[20:04] <MasterDuke> is the same one guy still maintaining the tz database?

[20:18] *** Skarsnik_ joined
[20:22] *** Skarsnik left
[20:23] <m_athias> MasterDuke: he is.

[20:25] <MasterDuke> wow

[20:25] *** lichtkind joined
[20:31] *** nebuchadnezzar left
[20:31] *** nebuchadnezzar joined
[20:40] <japhb> Olson?

[20:40] <japhb> That's ... dedication.

[20:53] *** discord-raku-bot left
[20:54] *** discord-raku-bot joined
[20:55] <m_athias> IIRC olson wrote the code and eggert maintained the data. there was some podcast about it some time ago but I didn't manage to dig it out.

[21:54] *** evalable6 left
[21:54] *** linkable6 left
[21:56] *** linkable6 joined
[22:37] *** getimiskon left
[22:45] *** djerius left
[22:45] *** djerius joined
[22:48] *** sena_kun joined
[22:49] *** Altai-man left
[22:55] *** Curiosa joined
[23:09] <Curiosa> Would it be possible to write an assembler in Raku that takes as input some text and outputs Blobs, then use Nativecall to invoke those Blobs as native functions?

[23:09] <moon-child> Curiosa: you would need to use mmap

[23:09] <moon-child> I have a demo, one sec lemme see if I can find it

[23:09] <moon-child> Curiosa: http://ix.io/2W7Q/perl6

[23:10] <Curiosa> That‚Äôs great!

[23:14] <Curiosa> Well, one would need to write an assembler around that

[23:16] *** Esoren joined
[23:16] <moon-child> yeah

[23:16] <moon-child> but this is the 'invoke those blobs as native functions' part

[23:17] <Curiosa> One could start with a primitive assembler like the one in this video: https://m.youtube.com/watch?v=Z73eKb2-YrU&t=30

[23:17] <Curiosa> Of course for x64 it‚Äôs more difficult

[23:27] *** Curiosa left
[23:31] *** lichtkind left
[23:34] <guifa> MasterDuke japhb m_athias Olson wrote the initial code, etc, but now it's handled by IANA who has a process set up for updates

[23:35] *** Curiosa joined
[23:39] <Curiosa> Let‚Äôs say one want to write a miniassembler like the one in video. Is there a way from Nativecall to get the symbol tables?

[23:42] <moon-child> Curiosa: what do symbol tables have to do with an assembler?  What are you tryihng to do?

[23:44] *** monkey_ joined
[23:44] *** hasrthur left
[23:45] <Curiosa> Just tell ant to mess around

[23:46] <Curiosa> He symbol table is useful

[23:46] <Curiosa> Because on the 6502 you knew where all the important values and procedure were located in the rom

[23:47] <Curiosa> In a modern OS it‚Äôs all dynamically randomized

[23:47] <Curiosa> So you need to find them

[23:47] <moon-child> Sure.  So: grab function symbol, nativecast to pointer, nativecast to size_t, copy it into your buffer

[23:48] <Curiosa> that works

[23:49] <Curiosa> You could also pass it as an argument to the function

