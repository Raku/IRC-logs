[00:04] *** rbt left
[00:04] *** rbt joined
[00:08] *** reportable6 left
[00:09] *** reportable6 joined
[00:41] *** monkey_ left
[00:44] <Xliff> m: my ($a, $b, $c, $d) = 0 xx 4; for $a, $b, $c, $d -> $_ is raw { say .VAR.name }

[00:44] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´$a‚ê§$b‚ê§$c‚ê§$d‚ê§¬ª

[01:04] *** frost joined
[01:14] *** razetime joined
[01:44] *** rbt left
[01:44] *** rbt joined
[01:49] *** djerius left
[01:50] *** melezhik joined
[01:50] <melezhik> .tell lizmat Whateverable build fails on SparkyCI - http://sparrowhub.io:2222/report/124

[01:50] <melezhik> ^^ AlexDaniel

[01:50] <melezhik> HTH

[01:51] *** djerius joined
[02:00] *** melezhik left
[02:07] *** zacts joined
[02:14] *** londoed_ left
[02:14] *** londoed_ joined
[02:27] *** Nick12 joined
[02:39] <Nick12> What have people tried to make rakudo startup/execution faster? I absolutely love the power of the language but it's a barrier for me to adopt this over perl due to performance. For example:

[02:39] <Nick12> raku -e 'print $_ for 1..1000000;' > /dev/null  1.66s user 0.03s system 104% cpu 1.617 total

[02:39] <Nick12> perl -e 'print $_ for 1..1000000;' > /dev/null  0.25s user 0.00s system 98% cpu 0.254 total

[02:39] <Nick12> Rakudo v2022.02 installed on macOS 12.2.1 with homebrew

[02:39] <Nick12> perl v5.34.0 on the same system, also installed with homebrew

[02:43] <japhb> Nick12: In that *particular* case you may be running up against Perl doing no output encoding, but Raku using UTF-8 encoding by default.

[02:44] <japhb> But rather than microbenchmarks, I'd say it's more valuable to look at the performance difference for whatever it is you're *actually* trying to do.

[02:45] <japhb> (Having written quite a few microbenchmarks, I can say that it is very easy to wildly change relative performance with minor changes.)

[02:46] <japhb> Oh, also it matters for MacOS if you're on an Intel or ARM processor -- the latter does not yet have JIT support in Rakudo.

[02:56] <Nick12> Sure. I agree a single test case isn't sufficient to prove it's slower. Most big applications I default to using something like c++ and opt for scripting when I'm just trying to get something specific done really quickly and typically is focused on processing text (perl one liners? ooh¬†8) ¬†lol). I've perceived a slower response time using rakudo

[02:56] <Nick12> which is a bit frustrating, and I know that's vague. It probably takes playing around with it a bit more and perhaps not entirely switching from perl to raku if I'm looking for something really snappy. The potential of saving minutes writing a raku script might dwarf the milliseconds to seconds of extra time spent executing one haha.

[02:57] <Nick12> FWIW I have an intel processor

[02:59] *** rbt left
[03:05] *** zacts left
[03:10] *** rbt joined
[03:16] *** Guest35 left
[03:33] *** guifa joined
[03:34] <japhb> Yeah, generally perl will be faster for pure sed/awk-like tasks, as that is what it was optimized for.  Rakudo will be faster for heavy OO and many of the numeric bits that Perl doesn't support out of the box (big integers, rational numbers, and complex numbers, for example).  And as you note, rather often Raku has more general whipupitude and developer efficiency.

[03:36] <japhb> Also, very few interpreters beat perl on startup time.  It's wicked fast at that.  Rakudo does a lot more at startup than perl does, and it costs a few dozen milliseconds to do all of that.

[04:01] *** zacts joined
[04:20] *** rbt left
[04:20] *** rbt joined
[04:20] *** Nick12 left
[05:00] *** zacts left
[05:00] *** grondilu joined
[05:20] *** rbt left
[05:20] *** rbt joined
[05:25] *** rbt left
[05:26] *** rbt joined
[05:41] *** rbt left
[05:51] *** rbt joined
[05:54] <grondilu> on https://docs.raku.org/language/operators#Operator_precedence the table seems to list operator precedence levels alphabetically, not from actual precedence levels.

[05:57] <grondilu> a quick search points to https://raku.finanalyst.org/language/operators.html

[05:57] <grondilu> where the table makes much more sense.

[06:11] *** rbt left
[06:12] *** rbt joined
[06:15] <grondilu> unrelated:

[06:15] <grondilu> m: say class :: does Numeric { method Int { 13 } }.new div 7; CATCH { default { say "huh?" } } 

[06:15] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´huh?‚ê§¬ª

[06:16] <grondilu> which method do I need to implement the Numeric role?

[06:16] <grondilu> m: say class :: does Numeric { method Bridge { 13 } }.new div 7; CATCH { default { say "huh?" } } 

[06:16] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´huh?‚ê§¬ª

[06:16] <grondilu> m: say class :: does Numeric { method Numeric { 13 } }.new div 7; CATCH { default { say "huh?" } } 

[06:16] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Cannot have a multi candidate for 'Numeric' when an only method is also in the package '<anon|1>'‚ê§at <tmp>:1‚ê§¬ª

[06:17] <grondilu> m: say class :: does Numeric { method Real { 13 } }.new div 7; CATCH { default { say "huh?" } } 

[06:17] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´huh?‚ê§¬ª

[06:25] <Voldenet> that table on operator_precedence seems to be sorted in some weird way

[06:25] <Voldenet> It is correct in source though https://github.com/Raku/doc/blob/master/doc/Language/operators.pod6#L34

[06:28] <grondilu> then it's the conversion to html that is wrong.

[06:31] <Voldenet> ‚Ä¶the html conversion is also correct :)

[06:31] <Voldenet> it's some fancy script that sorts the table

[06:33] *** abraxxa joined
[06:37] *** abraxxa left
[06:38] *** abraxxa joined
[06:46] <Voldenet> regarding the "Numeric" role, operators are not part of the role

[06:47] <Voldenet> m: class X does Numeric is Int { method Int { 13 } }; multi infix:<div>(X:D $a, Int:D $b) { $a.Int div $b }; say X.new div 7

[06:47] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´1‚ê§¬ª

[06:48] <Voldenet> m: say class :: does Numeric is Int { }.new(13) div 7

[06:48] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´1‚ê§¬ª

[06:49] <grondilu> oh ok, so with a straight-up inheritance to Int.

[06:49] <grondilu> then I guess I don't even need Numeric

[06:49] <grondilu> m: say class :: is Int { method Int { 13 } }.new div 7; CATCH { default { say "huh?" } } 

[06:49] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´0‚ê§¬ª

[06:50] <grondilu> m: say class :: does Numeric is Int { method Int { 13 } }.new div 7; CATCH { default { say "huh?" } } 

[06:50] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´0‚ê§¬ª

[06:51] <grondilu> not what I want

[06:51] <Voldenet> m: multi infix:<div>(Numeric:D $a, Int:D $b) { $a.Int div $b }; say class :: does Numeric { method Int { 13 } }.new div 7

[06:51] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´1‚ê§¬ª

[06:52] <grondilu> I really don't want to have to redefine the operator myself.

[06:53] *** Sgeo left
[06:59] *** Voldenet left
[07:03] *** Voldenet joined
[07:10] *** rbt left
[07:32] *** rbt joined
[07:37] *** rbt left
[07:38] *** rbt joined
[07:50] <guifa> o/

[08:36] *** lichtkind_ joined
[08:42] *** mexen left
[08:48] *** rbt left
[09:20] <AlexDaniel> melezhik18: I haven't tried installing it that way for a long time, so that's kinda expected. Pull requests are welcome

[09:48] *** linkable6 left
[09:48] *** evalable6 left
[09:49] *** evalable6 joined
[09:50] *** linkable6 joined
[10:09] *** rbt joined
[10:24] *** rbt left
[10:24] *** rbt joined
[10:31] <grondilu> isn't there a flag for `prompt` to suppress echo?

[10:32] <grondilu> I mean what is the correct way to prompt for a password then?

[10:34] <discord-raku-bot> <Nemokosch#9980> hmmm

[10:37] <gfldex> grondilu: see https://github.com/rakudo/rakudo/blob/master/src/core.c/io_operators.pm6#L146

[10:40] <gfldex> echo is a property of the terminal and Raku doesn't know those exist

[10:41] <gfldex> https://raku.land/github:titsuki/Terminal::Readsecret

[10:41] <gfldex> this module does

[10:42] <Voldenet> > sub without-echo(&fn) { LEAVE { run("stty", "echo") }; run("stty", "-echo"); fn() }; say without-echo({ prompt("password: ") })

[10:43] <grondilu> I guess I can also call the shell :

[10:43] <grondilu> say "password was {.out.slurp}" given shell q[read -s -p "password?"; echo $REPLY], :out

[10:43] <evalable6> grondilu, rakudo-moar fc5ee2b0b: OUTPUT: ¬´password was ‚ô•ü¶ã Ííõ„é≤‚Çä‚º¶üÇ¥‚ßø‚åü‚ìú‚âπ‚Ñª‚ÄÖüò¶‚¶Äüåµ‚ÄÇüñ∞„å≤‚é¢‚û∏ üêçüíî‚ÄÉüó≠êÖπ‚Æü‚øÅ·öÄ‚°ç„ç∑‚Ωê‚ê§‚ê§¬ª

[10:43] <grondilu> lol that's fun

[10:44] <Voldenet> but shell implies bash

[10:44] <Voldenet> sh doesn't do read -s

[10:44] <grondilu> I mean look at that beautiful unicode string

[10:44] <gfldex> shell implies not-Windows

[10:44] <Voldenet> touche

[10:45] <grondilu> I don't mind excluding Windows users lol

[10:45] <Voldenet> windows-also solution sounds difficult to maintain on your own

[10:45] <gfldex> It would make any coporate password policy very happy indeed.

[10:45] <Voldenet> regarding corporate password policies, I've seen things you people wouldn't believe :D

[10:46] <gfldex> I got a login for a software that controls SIM cards. 8 chars max for the PW.

[10:46] * grondilu thinks about the famous Sony playstation hack

[10:46] <gfldex> Dont't use SMS for two-factory.

[10:46] <gfldex> s/y//

[10:53] <Voldenet> sadly some services only have sms or nothing, sms is still better than nothing

[10:53] <grondilu> Voldenet: looking at your solution again, it looks fine actually

[10:54] <Voldenet> well, stty is relatively portable too

[10:56] <grondilu> quite a smart use of LEAVE too

[10:59] * grondilu ended up using that solution

[11:11] <grondilu> what about checking input by prompting password twice and dying if the inputs differ?  How to make sure echo is restored then?  Since the LEAVE will not be executed.

[11:14] <Voldenet> hmm?

[11:15] <grondilu> well it's common to ask for a password twice to check for input mistakes.

[11:15] <grondilu> then if there is indeed a mistake I would raise an exception, but then the LEAVE will not be executed, would it?

[11:17] <Voldenet> it would

[11:17] <grondilu> { CATCH { default { say "oops" }; LEAVE say "done"; die "aaaahh"; } }()

[11:19] <Voldenet> m: { CATCH { default { say "oops" } }; LEAVE say "done"; die "aaaahh"; }

[11:19] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´oops‚ê§done‚ê§¬ª

[11:21] <grondilu> ok great

[11:21] <Voldenet> either way:

[11:21] <Voldenet> sub without-echo(&fn) { LEAVE { run("stty", "echo") }; run("stty", "-echo"); fn() }; sub get-new-pass { without-echo(sub { loop { my $pass = prompt("password: "); return $pass if $pass eq prompt("\nrepeat password: "); say "\npasswords mismatch" }  }) }; say get-new-pass;

[11:23] <grondilu> I don't need a dedicated `without-echo` function but yeah, that's the idea.

[11:24] <grondilu> m: { LEAVE run <echo bye>; say hi; }  # testing shorter syntax

[11:24] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    hi used at line 1‚ê§‚ê§¬ª

[11:24] <grondilu> m: { LEAVE run <echo bye>; say "hi"; }  # testing shorter syntax

[11:24] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´hi‚ê§¬ª

[11:24] <grondilu> hum

[11:24] *** discord-raku-bot left
[11:24] *** discord-raku-bot joined
[11:24] <Voldenet> it will work if you test it on real env

[11:25] <grondilu> indeed

[11:25] <grondilu> the run command is really powerful, especially now that it handles binary input/output.

[11:26] <Voldenet> m: say $*OUT.native-descriptor

[11:26] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´1‚ê§¬ª

[11:27] <Voldenet> that's most puzzling

[11:27] <Voldenet> m: say $*OUT

[11:27] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´IO::Handle<IO::Special.new("<STDOUT>")>(opened)‚ê§¬ª

[11:28] *** xinming left
[11:28] *** xinming joined
[11:45] *** abraxxa left
[11:49] *** Altai-man left
[12:06] *** zacts joined
[12:14] *** melezhik joined
[12:14] <melezhik> .

[12:16] *** dogbert11 joined
[12:17] *** dogbert17 left
[12:17] *** melezhik left
[12:20] *** razetime left
[12:29] *** rbt left
[12:29] *** rbt joined
[12:30] *** dogbert17 joined
[12:32] *** dogbert11 left
[12:33] *** razetime joined
[12:34] *** melezhik joined
[12:37] *** melezhik left
[12:44] *** sena_kun joined
[12:51] *** mexen joined
[12:58] *** dogbert11 joined
[12:58] *** dogbert17 left
[13:09] *** TempIRCLogger joined
[13:10] *** rbt left
[13:10] *** rbt joined
[13:28] <[Coke]> As someone who uses windows raku for $dayjob, if there's a raku core solution that works (assuming this is going into the ecosystem), I'd prefer you used the core solution.

[13:39] <Voldenet> no dependencies is the best dependency

[13:47] *** dogbert11 left
[13:47] *** dogbert17 joined
[13:59] *** zacts left
[14:04] *** Guest35 joined
[14:11] *** Sgeo joined
[14:18] *** dogbert17 left
[14:21] *** dogbert17 joined
[14:22] <[Coke]> mm!

[14:23] <Xliff> Still having problems with nested braces. This time trying to parse out methods from a class definition.

[14:23] <Xliff> Can someone tell me what I'm missing?

[14:23] <Xliff> https://gist.github.com/Xliff/e2a51378257a714e3dd66613c6369a8a

[14:30] *** rbt left
[14:30] *** rbt joined
[14:44] *** frost left
[15:08] <grondilu> [Coke]: do you use WSL?

[15:08] *** rbt left
[15:12] <El_Che> [WSL]: do you use Coke?

[15:12] <El_Che> dunno, it's all a waze

[15:16] *** [Coke]_ joined
[15:17] *** sena_kun left
[15:18] *** [Coke] left
[15:18] *** sena_kun joined
[15:28] *** razetime left
[15:38] *** razetime joined
[15:40] <[Coke]_> I do not use WSL, no

[15:40] *** [Coke]_ is now known as [Coke]

[16:15] *** rbt joined
[16:29] *** wingfold joined
[16:36] *** rbt left
[16:36] *** rbt joined
[16:44] *** wingfold left
[16:45] <grondilu> how can I get JSON::RPC::Client to send an actual {} as parameter instead of 'null'?

[16:45] *** razetime left
[16:46] <grondilu> I have an rpc server which accepts {} as params but not null, and I think JSON::RPC::Client sends null.  $server.method({}) works the same as $server.method() and fails.

[17:01] *** rbt left
[17:01] *** rbt joined
[17:24] <gfldex> grondilu: what happens when you send `Hash.new` ?

[17:28] <grondilu> same result

[17:28] <grondilu> apparently the lib relies on add_fallback

[17:28] <grondilu> m: class { BEGIN { $?PACKAGE.HOW.add_fallback( $?PACKAGE, sub (|) { True }, -> $obj, $name { method (*@params, *%params) { say "$name called with {@params.raku}"; } } ) } }.new.foo({})

[17:28] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´foo called with []‚ê§¬ª

[17:29] <grondilu> but this mechanism does not accept and empty hash as a positional parameter?

[17:29] <grondilu> m: class { BEGIN { $?PACKAGE.HOW.add_fallback( $?PACKAGE, sub (|) { True }, -> $obj, $name { method (*@params, *%params) { say "$name called with {@params.raku}"; } } ) } }.new.foo("hello")

[17:29] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´foo called with ["hello"]‚ê§¬ª

[17:29] <grondilu> see what I mean?

[17:29] <grondilu> m: class { BEGIN { $?PACKAGE.HOW.add_fallback( $?PACKAGE, sub (|) { True }, -> $obj, $name { method (*@params, *%params) { say "$name called with {@params.raku}"; } } ) } }.new.foo

[17:29] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´foo called with []‚ê§¬ª

[17:30] <grondilu> m: class { BEGIN { $?PACKAGE.HOW.add_fallback( $?PACKAGE, sub (|) { True }, -> $obj, $name { method (*@params, *%params) { say "$name called with {@params.raku}"; } } ) } }.new.foo([])

[17:30] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´foo called with []‚ê§¬ª

[17:30] <grondilu> neither an empty array?

[17:30] <grondilu> m: class { BEGIN { $?PACKAGE.HOW.add_fallback( $?PACKAGE, sub (|) { True }, -> $obj, $name { method (*@params, *%params) { say "$name called with {@params.raku}"; } } ) } }.new.foo(["hey"])

[17:30] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´foo called with ["hey"]‚ê§¬ª

[17:30] <grondilu> looks like a bug to me

[17:31] <grondilu> oh wait

[17:32] <grondilu> m: sub (*@params) { @params }([]).say

[17:32] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´[]‚ê§¬ª

[17:32] <grondilu> m: sub (*@params) { @params }().say

[17:32] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´[]‚ê§¬ª

[17:32] <grondilu> ah

[17:33] * grondilu tries to remember how this *@ thing is called.  Slurpy parameters?

[17:34] <grondilu> m: sub (*@params) { @params }([].item).say

[17:34] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´[[]]‚ê§¬ª

[17:34] <grondilu> ah ah

[17:35] <grondilu> damn I was hoping that would work but the rpc call still fails

[17:37] <grondilu> m: class { BEGIN { $?PACKAGE.HOW.add_fallback( $?PACKAGE, sub (|) { True }, -> $obj, $name { method (*@params, *%params) { say "$name called with {@params.raku}"; } } ) } }.new.foo([].iteum)

[17:37] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´No such method 'iteum' for invocant of type 'Array'.  Did you mean‚ê§'item'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:37] <grondilu> m: class { BEGIN { $?PACKAGE.HOW.add_fallback( $?PACKAGE, sub (|) { True }, -> $obj, $name { method (*@params, *%params) { say "$name called with {@params.raku}"; } } ) } }.new.foo([].item)

[17:37] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´foo called with [[],]‚ê§¬ª

[17:46] *** rbt left
[17:46] *** rbt joined
[18:16] *** rir joined
[18:29] *** guifa left
[18:29] *** rir left
[18:43] *** rypervenche left
[18:53] *** grondilu left
[19:37] *** rbt left
[19:37] *** rbt joined
[19:47] *** rbt left
[19:47] *** rbt joined
[19:47] *** nebuchadnezzar left
[19:48] *** nebuchadnezzar joined
[20:46] *** rypervenche joined
[21:11] *** saint- joined
[21:22] *** rbt left
[21:22] *** rbt joined
[21:31] *** lichtkind_ left
[22:15] <saint-> Hi, I was wondering what was wrong with trying to use this grammar to parse into just separate lines? https://www.toptal.com/developers/hastebin/ecijorefon.lua

[22:31] *** linkable6 left
[22:31] *** evalable6 left
[22:32] *** linkable6 joined
[22:33] *** evalable6 joined
[23:02] <Voldenet> m: grammar Lit { token TOP { ^ <lines>+ $ }; token lines { .*? '\n' };}; Lit.parse("ab\nc\nde\n").say

[23:02] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Nil‚ê§¬ª

[23:04] <Voldenet> m: grammar Lit { token TOP { ^ <lines>+ $ }; token lines { .*? "\n" };}; Lit.parse("ab\nc\nde\n").say

[23:04] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´ÔΩ¢ab‚ê§c‚ê§de‚ê§ÔΩ£‚ê§ lines => ÔΩ¢ab‚ê§ÔΩ£‚ê§ lines => ÔΩ¢c‚ê§ÔΩ£‚ê§ lines => ÔΩ¢de‚ê§ÔΩ£‚ê§¬ª

[23:06] <Voldenet> the '\n' works, but probably not in the way you want

[23:06] <Voldenet> m: grammar Lit { token TOP { ^ <lines>+ $ }; token lines { .*? '\n' };}; Lit.parse("ab\\nc\\nde\\n").say

[23:06] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´ÔΩ¢ab\nc\nde\nÔΩ£‚ê§ lines => ÔΩ¢ab\nÔΩ£‚ê§ lines => ÔΩ¢c\nÔΩ£‚ê§ lines => ÔΩ¢de\nÔΩ£‚ê§¬ª

[23:33] *** evalable6 left
[23:33] *** linkable6 left
[23:33] *** evalable6 joined
[23:35] *** linkable6 joined
