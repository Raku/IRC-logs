[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:15] *** jjido left
[01:00] *** Kaiepi left
[01:13] <discord-raku-bot> <Nemokosch#9980> ^ means beginning of string
[01:13] <discord-raku-bot> <Nemokosch#9980> ^^ means beginning of line
[01:31] *** guifa joined
[02:01] *** frost joined
[02:35] *** silug left
[02:36] *** silug joined
[02:38] *** Kaiepi joined
[03:33] *** Guest35 left
[03:36] *** Sankalp left
[03:36] *** Sankalp joined
[04:12] *** londoed__ left
[04:12] *** londoed__ joined
[04:20] *** guifa left
[04:26] *** guifa joined
[04:31] *** guifa left
[04:44] *** z4kz joined
[04:45] *** guifa joined
[04:48] *** xinming left
[04:50] *** swaggboi left
[04:51] *** xinming joined
[04:54] *** z4kz left
[04:57] *** Kaiepi left
[05:01] *** juanfra__ left
[05:01] *** juanfra__ joined
[05:03] *** swaggboi joined
[05:05] *** londoed__ left
[05:05] *** londoed__ joined
[05:47] *** jmcgnh left
[06:04] *** Oshawott joined
[06:07] *** guifa left
[06:08] *** archenoth left
[06:08] *** reportable6 left
[06:09] *** reportable6 joined
[06:10] *** Sgeo_ joined
[06:12] *** Sgeo left
[07:12] *** evalable6 left
[07:12] *** bisectable6 left
[07:12] *** greppable6 left
[07:12] *** benchable6 left
[07:12] *** committable6 left
[07:12] *** unicodable6 left
[07:12] *** releasable6 left
[07:12] *** statisfiable6 left
[07:12] *** tellable6 left
[07:12] *** quotable6 left
[07:12] *** nativecallable6 left
[07:12] *** reportable6 left
[07:12] *** bloatable6 left
[07:12] *** shareable6 left
[07:12] *** linkable6 left
[07:12] *** notable6 left
[07:12] *** sourceable6 left
[07:12] *** coverable6 left
[07:12] *** quotable6 joined
[07:12] *** releasable6 joined
[07:13] *** nativecallable6 joined
[07:13] *** benchable6 joined
[07:13] *** reportable6 joined
[07:13] *** notable6 joined
[07:14] *** greppable6 joined
[07:14] *** shareable6 joined
[07:14] *** bisectable6 joined
[07:14] *** sourceable6 joined
[07:14] *** tellable6 joined
[07:14] *** unicodable6 joined
[07:14] *** linkable6 joined
[07:14] *** coverable6 joined
[07:15] *** bloatable6 joined
[07:15] *** evalable6 joined
[07:15] *** committable6 joined
[07:15] *** statisfiable6 joined
[08:15] *** evalable6 left
[08:15] *** bloatable6 left
[08:15] *** nativecallable6 left
[08:15] *** linkable6 left
[08:15] *** unicodable6 left
[08:15] *** shareable6 left
[08:15] *** bisectable6 left
[08:15] *** releasable6 left
[08:15] *** sourceable6 left
[08:15] *** notable6 left
[08:15] *** tellable6 left
[08:15] *** reportable6 left
[08:15] *** statisfiable6 left
[08:15] *** quotable6 left
[08:15] *** committable6 left
[08:15] *** benchable6 left
[08:15] *** greppable6 left
[08:15] *** coverable6 left
[08:16] *** greppable6 joined
[08:16] *** sourceable6 joined
[08:16] *** linkable6 joined
[08:16] *** bisectable6 joined
[08:16] *** benchable6 joined
[08:16] *** committable6 joined
[08:17] *** bloatable6 joined
[08:17] *** statisfiable6 joined
[08:17] *** coverable6 joined
[08:17] *** notable6 joined
[08:17] *** nativecallable6 joined
[08:17] *** unicodable6 joined
[08:17] *** quotable6 joined
[08:17] *** releasable6 joined
[08:18] *** reportable6 joined
[08:18] *** evalable6 joined
[08:18] *** tellable6 joined
[08:18] *** shareable6 joined
[09:01] *** Kaiepi joined
[09:01] *** guifa joined
[09:02] *** jjido joined
[09:04] *** guifa left
[09:06] *** Kaiepi left
[09:11] *** Kaiepi joined
[09:32] *** Sgeo_ left
[09:47] *** razetime joined
[10:11] *** jjido left
[10:25] <lizmat> weekly: https://www.reddit.com/r/rakulang/comments/ukadpq/the_raku_conference_2022/
[10:25] <notable6> lizmat, Noted! (weekly)
[10:52] *** grondilu joined
[10:52] <grondilu> Hi
[10:53] <grondilu> I realized I followed the wrong track for my project, yet again.  The method I used won't allow me to have distinct instances.
[10:53] <grondilu> So I want to try an other method : using classes similarily as closures.  If that makes any sense.
[10:54] <grondilu> Here is a mockup : https://gist.github.com/grondilu/386665ea3266356fbce15b96f6bab244
[10:54] <grondilu> Would you mind look at it and tell me if that makes sense to you?
[11:03] <lizmat> grondilu: one thing that jnthn taught me (again and again I might say) is that classes are *not* closures
[11:03] <lizmat> looking at your gist, all instances returned will be instances of the *same* anonymous class
[11:04] <lizmat> so there's no difference with calling that class "Foo" and doing "say Foo.new: 13 for ^100"
[11:18] <SmokeMachine> grondilu: for that, maybe you should use MOP.
[11:22] <SmokeMachine> m: sub get-class { my $type = Metamodel::ClassHOW.new_type: :name(‚ÄúUnluckyNumber‚Äù ~ ++$); $type.^compose; $type }; say get-class.^name for ^3
[11:22] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´UnluckyNumber1‚ê§UnluckyNumber2‚ê§UnluckyNumber3‚ê§¬ª
[11:23] <SmokeMachine> grondilu: üëÜ
[11:52] *** evalable6 left
[11:52] *** linkable6 left
[11:52] *** linkable6 joined
[11:53] *** evalable6 joined
[11:58] <grondilu> noted
[12:04] <lizmat> still, this does feel like a X-Y solution..  :-)
[12:09] *** reportable6 left
[12:10] *** reportable6 joined
[12:17] <grondilu> I think I'll try to use parametrized roles again.  I just need to accept that the parameter has to be known at compile time.
[12:19] <lizmat> m: role Foo[$a] { method bar() { $a } }; my $b = 42; say Foo[$b].new.bar; 
[12:19] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´42‚ê§¬ª
[12:19] <grondilu> using the MOP seems too complicated
[12:19] <lizmat> grondilu: ^^  the parameters to a parameterized role don't need to be known at compile time
[12:20] <grondilu> well I'm confused then, as that is not what we concluded few days ago.
[12:21] <lizmat> m: role Foo[$a] { method bar() { $a } }; my $b = 42; class Bar is Foo[$b] { }; dd Bae 
[12:21] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    Bae used at line 1. Did you mean 'Bag', 'Bar'?‚ê§‚ê§¬ª
[12:21] <lizmat> m: role Foo[$a] { method bar() { $a } }; my $b = 42; class Bar is Foo[$b] { }; dd Bar.new.bar
[12:21] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Any‚ê§¬ª
[12:21] <lizmat> if you consume a role into a class, it needs to be compile time
[12:21] <lizmat> m: role Foo[$a] { method bar() { $a } }; BEGIN my $b = 42; class Bar is Foo[$b] { }; dd Bar.new.bar
[12:21] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´42‚ê§¬ª
[12:22] <lizmat> but not if you pun a role
[12:22] <grondilu> indeed
[13:10] *** linkable6 left
[13:10] *** evalable6 left
[13:11] *** linkable6 joined
[13:11] *** evalable6 joined
[13:35] *** razetime left
[13:41] *** frost left
[13:47] *** razetime joined
[13:48] *** razetime left
[14:02] *** Guest35 joined
[14:55] *** masak joined
[14:56] *** CIAvash left
[14:56] *** Matthew|m left
[14:56] *** daxim left
[14:56] *** vodkra left
[14:56] *** masak_ left
[14:56] *** El_Che left
[14:56] *** goblin left
[14:56] *** PotatoGim left
[14:57] *** CIAvash left
[14:57] *** Matthew|m joined
[14:57] *** CIAvash joined
[14:57] *** daxim joined
[14:57] *** vodkra joined
[14:57] *** El_Che joined
[14:57] *** goblin joined
[14:57] *** PotatoGim joined
[15:26] *** Kaiepi left
[15:55] *** jaguart joined
[16:06] *** Kaiepi joined
[16:18] *** z4kz joined
[16:38] *** z4kz left
[16:44] *** lichtkind joined
[17:44] *** reportable6 left
[17:44] *** bloatable6 left
[17:44] *** notable6 left
[17:44] *** benchable6 left
[17:44] *** greppable6 left
[17:44] *** committable6 left
[17:44] *** nativecallable6 left
[17:44] *** releasable6 left
[17:44] *** sourceable6 left
[17:44] *** linkable6 left
[17:44] *** quotable6 left
[17:44] *** coverable6 left
[17:44] *** bisectable6 left
[17:44] *** tellable6 left
[17:44] *** shareable6 left
[17:44] *** unicodable6 left
[17:44] *** evalable6 left
[17:44] *** statisfiable6 left
[17:44] *** greppable6 joined
[17:45] *** committable6 joined
[17:45] *** bloatable6 joined
[17:45] *** releasable6 joined
[17:45] *** notable6 joined
[17:45] *** unicodable6 joined
[17:45] *** quotable6 joined
[17:45] *** nativecallable6 joined
[17:46] *** statisfiable6 joined
[17:46] *** sourceable6 joined
[17:46] *** bisectable6 joined
[17:46] *** coverable6 joined
[17:47] *** shareable6 joined
[17:47] *** benchable6 joined
[17:47] *** evalable6 joined
[17:47] *** tellable6 joined
[17:47] *** reportable6 joined
[17:47] *** linkable6 joined
[17:49] *** grondilu left
[17:50] *** sena_kun left
[17:52] *** sena_kun joined
[17:56] *** Kaiepi left
[17:57] *** Kaiepi joined
[18:07] *** jaguart left
[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[18:18] *** Kaiepi left
[18:19] *** Kaiepi joined
[18:32] *** Guest032 joined
[18:33] *** Guest032 left
[18:36] *** spacekookie left
[18:37] *** spacekookie joined
[18:49] *** Sgeo joined
[18:49] *** Sgeo left
[18:50] *** Sgeo joined
[19:13] <japhb> .tell grondilu When samuraisam and I worked on Protocol Buffer support, we used the MOP; you'll find it in several places in:  https://github.com/samuraisam/p6-pb 
[19:13] <tellable6> japhb, I'll pass your message to grondilu
[19:17] *** jjido joined
[20:09] *** sena_kun left
[20:10] *** sena_kun joined
[20:27] *** hankache joined
[20:51] *** jjido left
[21:02] *** hankache left
[21:23] *** jjido joined
[22:23] *** evalable6 left
[22:23] *** linkable6 left
[22:23] *** linkable6 joined
[22:25] *** evalable6 joined
[22:34] *** jjido left
[22:40] <ecocode___> hi. how should I define a Type "unit" which can be either of these Str "m", "m2", "m3" ?
[22:44] <gfldex> m: enum Unit <m m1 m2>; my $str = 'm1'; say ::($str) ~~ Unit;
[22:44] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´True‚ê§¬ª
[22:44] <gfldex> You can use an enum for that, but a Set might be better.
[22:51] <gfldex> m: enum Unit (<m m1 m2> Z=> <m m1 m2>); my $str = 'm1'; say $str ~~ Unit; sub foo(Unit() $u) { say $u }; foo('m2');
[22:51] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´False‚ê§m2‚ê§¬ª
[22:52] <gfldex> m: enum Unit (<m m1 m2> Z=> <m m1 m2>); my $str = 'm1'; say $str ~~ Unit(); sub foo(Unit() $u) { say $u }; foo('m2');
[22:52] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´True‚ê§m2‚ê§¬ª
[22:53] <gfldex> I didn't know that ~~ takes a coersion type.
[22:53] <ecocode___> how would you use a set instead ?
[22:54] <gfldex> I shall query Roast and check for ENODOC tomorrow.
[22:54] *** melezhik joined
[22:54] <melezhik> .
[22:54] <gfldex> m: constant Unit = Set(<m m2 m3>); say 'm2' ~~ Unit;
[22:54] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´False‚ê§¬ª
[22:54] <gfldex> m: constant Unit = Set(<m m2 m3>); say 'm2' ‚àà Unit;
[22:54] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´True‚ê§¬ª
[22:55] <ecocode___> sounds good
[22:55] <ecocode___> for my usage :)
[22:55] <ecocode___> is there an ascii alternative for ‚àà ?
[22:56] *** melezhik left
[22:59] <ecocode___> hmmm... Attribute definition of type Set (implicit : by pragma) needs to be marked as required or given an initializer
[23:00] <ecocode___> can't use the Set in "has Unit $.unit" in a class definition ?
[23:01] <ecocode___> it works with enum, but then without using strings
[23:59] *** lichtkind left
